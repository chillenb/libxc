
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mn15_l_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mn15_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.305206418731928e+01, -2.305165277195607e+01, -2.305036729134465e+01, -2.305646298221854e+01, -2.305319284731542e+01, -2.305319284731542e+01, -3.499586517026584e+00, -3.499837789675003e+00, -3.506914283099718e+00, -3.508357932537472e+00, -3.506157950262188e+00, -3.506157950262188e+00, -4.568768401848752e-01, -4.560224546508068e-01, -4.423189746618238e-01, -4.681089267432796e-01, -4.667814738077253e-01, -4.667814738077253e-01, -2.150537068448368e-01, -2.171515423604618e-01, -2.748901898305192e-01, -1.332350836487386e-01, -1.943105925504555e-01, -1.943105925504554e-01, -1.207186420429303e-02, -1.267052104488313e-02, -5.166292785943820e-02, -7.142777262321992e-03, -9.818946210009413e-03, -9.818946210009420e-03, -4.433584420034537e+00, -4.400137635860968e+00, -4.431886326242706e+00, -4.402372159181635e+00, -4.416756898365939e+00, -4.416756898365939e+00, -2.156601883057577e+00, -2.202770066978431e+00, -2.146061543949617e+00, -2.187935611905081e+00, -2.187378258768095e+00, -2.187378258768095e+00, -5.938175205460328e-01, -6.435372064928693e-01, -5.160603867125577e-01, -5.414757246870587e-01, -6.073445610353998e-01, -6.073445610353999e-01, -8.872458000723410e-02, -1.910162548512711e-01, -8.412023446858316e-02, -1.868178447242070e+00, -1.140074624544456e-01, -1.140074624544455e-01, -5.558044384593125e-03, -6.987519842180305e-03, -5.392491867527029e-03, -6.755166405270599e-02, -6.725561654945329e-03, -6.725561654945331e-03, -6.188275315831995e-01, -5.954069357473266e-01, -6.005670168345729e-01, -6.070977965180332e-01, -6.035391448447769e-01, -6.035391448447769e-01, -6.172284258199807e-01, -5.230242274454285e-01, -5.392813571649020e-01, -5.505056214800325e-01, -5.447597754094600e-01, -5.447597754094600e-01, -6.705017900074701e-01, -2.517782477182156e-01, -2.926726283526329e-01, -3.383276668911004e-01, -3.184413341419087e-01, -3.184413341419087e-01, -4.581733731081072e-01, -5.032428340989674e-02, -6.035408306182765e-02, -3.253708034344385e-01, -7.944435199054947e-02, -7.944435199054947e-02, -1.658739883727509e-02, -1.914734490169407e-03, -3.986618217694486e-03, -7.693461949618449e-02, -6.193562628898933e-03, -6.193562628898932e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mn15_l_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mn15_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([4.861572264102119e+00, 4.874737883539159e+00, 4.863428579861093e+00, 4.876084044879276e+00, 4.868784408773830e+00, 4.883921667834611e+00, 4.847964236376013e+00, 4.857340593800634e+00, 4.862758834825943e+00, 4.867526141703828e+00, 4.862758834825943e+00, 4.867526141703828e+00, -5.418140003706537e+00, -5.418517809527602e+00, -5.417928895287624e+00, -5.418401927462165e+00, -5.413959311630710e+00, -5.413348725092743e+00, -5.414698350953616e+00, -5.415027264533712e+00, -5.417710632620343e+00, -5.411410764520059e+00, -5.417710632620343e+00, -5.411410764520059e+00, -7.870627574291146e-01, -8.086740982595212e-01, -7.800290766992869e-01, -8.057368005627836e-01, -6.912854430734818e-01, -6.697393502640243e-01, -7.023030666693464e-01, -7.133282663910839e-01, -8.368566507275610e-01, -6.198127001015562e-01, -8.368566507275610e-01, -6.198127001015562e-01, -2.155753093727892e-01, -2.118029282144222e-01, -2.080920222500588e-01, -2.031742548074878e-01, -6.012602673338426e-01, -7.809556694489875e-01, -1.794978432222603e-01, -2.045298365037795e-01, -2.196939751935814e-01, -9.823163408571951e-02, -2.196939751935805e-01, -9.823163408571908e-02, -1.533169630507963e-02, -1.621147382975466e-02, -1.600282715295421e-02, -1.704149020225252e-02, -5.834916560303055e-02, -5.994929028027562e-02, -9.506737761406044e-03, -9.355765574939851e-03, -1.379368613259047e-02, -8.080186879572465e-03, -1.379368613259048e-02, -8.080186879572465e-03, 3.022691907103695e+00, 3.022194633030592e+00, 3.092610386283503e+00, 3.089757907907872e+00, 3.027769047385996e+00, 3.025377165857582e+00, 3.087713200146024e+00, 3.086705167495241e+00, 3.057616391760867e+00, 3.055988134165883e+00, 3.057616391760867e+00, 3.055988134165883e+00, -2.863983743613142e+00, -2.866847369658149e+00, -2.912141513853638e+00, -2.913180977122110e+00, -2.826129998675907e+00, -2.839909262256024e+00, -2.871133523352650e+00, -2.884473257511821e+00, -2.918499911734694e+00, -2.895582255887592e+00, -2.918499911734694e+00, -2.895582255887592e+00, -7.978949891648627e-01, -7.928913650909220e-01, -8.767833779071046e-01, -8.745604412242464e-01, -7.377809130190593e-01, -7.633976652501752e-01, -8.252783132407211e-01, -8.360495696681214e-01, -8.204839835360025e-01, -7.928212883931371e-01, -8.204839835360019e-01, -7.928212883931373e-01, -1.141404772083743e-01, -1.147649099069043e-01, -2.742465636866251e-01, -2.739813347504281e-01, -9.768794823182494e-02, -1.079436832146893e-01, -2.262900283979826e+00, -2.260727966660145e+00, -1.544212342198928e-01, -1.802436261323971e-01, -1.544212342198929e-01, -1.802436261323978e-01, -7.211777896457504e-03, -7.485265869578044e-03, -9.161244176512734e-03, -9.294034923741118e-03, -6.920367850258639e-03, -7.312988704569058e-03, -7.143709957880309e-02, -7.429270018806658e-02, -7.064979641841735e-03, -9.580488436614897e-03, -7.064979641841797e-03, -9.580488436614970e-03, -8.068624844285578e-01, -8.061958919898182e-01, -8.043852647925017e-01, -8.059300916083268e-01, -8.118519990220392e-01, -8.127712165286980e-01, -8.136713047035103e-01, -8.139237595058503e-01, -8.134120179304433e-01, -8.139882437870333e-01, -8.134120179304433e-01, -8.139882437870333e-01, -8.031690943011964e-01, -8.025128183362763e-01, -5.697115965980307e-01, -5.738373451860792e-01, -6.288567309769340e-01, -6.328057903966929e-01, -6.980066407895198e-01, -7.007295766074683e-01, -6.606165639151274e-01, -6.631140556065453e-01, -6.606165639151276e-01, -6.631140556065452e-01, -9.301419462519900e-01, -9.239366215611157e-01, -2.912128420033444e-01, -2.902487902600955e-01, -2.666669439106477e-01, -2.649237844404947e-01, -3.702716484989125e-01, -3.744395099078849e-01, -2.802114897928469e-01, -2.800660586631599e-01, -2.802114897928469e-01, -2.800660586631601e-01, -5.268667061436608e-01, -5.321027659799878e-01, -5.836120987993466e-02, -5.849418423662562e-02, -6.561683052710642e-02, -6.655281094501637e-02, -3.775208066496131e-01, -3.717176910686905e-01, -9.021650531178566e-02, -1.009194737047063e-01, -9.021650531178586e-02, -1.009194737047051e-01, -2.117863477962907e-02, -2.184926704109496e-02, -2.544005070734442e-03, -2.549520353628098e-03, -5.114949091121619e-03, -5.431743600268685e-03, -8.888087163001357e-02, -9.472159833422800e-02, -6.700674785588416e-03, -8.816273977595608e-03, -6.700674785588362e-03, -8.816273977595582e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mn15_l_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mn15_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.260646950783808e-07, 0.000000000000000e+00, -1.260882563542529e-07, -1.260660593872637e-07, 0.000000000000000e+00, -1.260892430326555e-07, -1.260693709538010e-07, 0.000000000000000e+00, -1.260942798261641e-07, -1.260542125086298e-07, 0.000000000000000e+00, -1.260748899664951e-07, -1.260656489730921e-07, 0.000000000000000e+00, -1.260818496079336e-07, -1.260656489730921e-07, 0.000000000000000e+00, -1.260818496079336e-07, -5.350619838499291e-05, 0.000000000000000e+00, -5.348476139494276e-05, -5.351878346071422e-05, 0.000000000000000e+00, -5.349180534469796e-05, -5.375074890140697e-05, 0.000000000000000e+00, -5.378663358231312e-05, -5.371050528418078e-05, 0.000000000000000e+00, -5.369457018267353e-05, -5.351241048972024e-05, 0.000000000000000e+00, -5.390278037840329e-05, -5.351241048972024e-05, 0.000000000000000e+00, -5.390278037840329e-05, -2.883248700836512e-02, 0.000000000000000e+00, -2.843575967628506e-02, -2.897768909943654e-02, 0.000000000000000e+00, -2.851005970063304e-02, -3.046860997344702e-02, 0.000000000000000e+00, -3.063932413845141e-02, -2.963662871742686e-02, 0.000000000000000e+00, -2.956806658389386e-02, -2.764489957701187e-02, 0.000000000000000e+00, -2.872784357956406e-02, -2.764489957701187e-02, 0.000000000000000e+00, -2.872784357956406e-02, -3.727059888145769e+00, 0.000000000000000e+00, -3.660909833341031e+00, -3.862120287989731e+00, 0.000000000000000e+00, -3.736504711937789e+00, -1.677369647340760e-02, 0.000000000000000e+00, -1.516890641050312e-02, -3.256383056512343e+00, 0.000000000000000e+00, -3.100477265413885e+00, -3.213484792703394e+00, 0.000000000000000e+00, -4.197237569637909e+00, -3.213484792703394e+00, 0.000000000000000e+00, -4.197237569637915e+00, -1.940076335466543e+01, 0.000000000000000e+00, -1.915246686008812e+01, -2.039607080089516e+01, 0.000000000000000e+00, -2.022252013096541e+01, -8.615970727322900e+00, 0.000000000000000e+00, -8.435230276567887e+00, -1.807988642633324e+01, 0.000000000000000e+00, -1.759615015596545e+01, -1.946200592479408e+01, 0.000000000000000e+00, -5.016332077227102e+01, -1.946200592480286e+01, 0.000000000000000e+00, -5.016332077224261e+01, -3.697966996481323e-05, 0.000000000000000e+00, -3.701539542127860e-05, -3.705660377733953e-05, 0.000000000000000e+00, -3.708984254182300e-05, -3.698593045902038e-05, 0.000000000000000e+00, -3.701938709315064e-05, -3.705186042719704e-05, 0.000000000000000e+00, -3.708693430565114e-05, -3.701770392093050e-05, 0.000000000000000e+00, -3.705263836530479e-05, -3.701770392093050e-05, 0.000000000000000e+00, -3.705263836530479e-05, -4.410462083930295e-04, 0.000000000000000e+00, -4.424172755008306e-04, -4.427783183049714e-04, 0.000000000000000e+00, -4.441687260107266e-04, -4.361992888777606e-04, 0.000000000000000e+00, -4.389988251873498e-04, -4.378998821190957e-04, 0.000000000000000e+00, -4.407212633468999e-04, -4.451221893145419e-04, 0.000000000000000e+00, -4.439030089307911e-04, -4.451221893145419e-04, 0.000000000000000e+00, -4.439030089307911e-04, -4.536923695561094e-02, 0.000000000000000e+00, -4.602713804148103e-02, -1.408760037262912e-02, 0.000000000000000e+00, -1.294457355569497e-02, -6.393555433297317e-02, 0.000000000000000e+00, -5.479034723889158e-02, -2.881550117477570e-02, 0.000000000000000e+00, -2.628830921023615e-02, -3.944685203943052e-02, 0.000000000000000e+00, -4.530157017038325e-02, -3.944685203943056e-02, 0.000000000000000e+00, -4.530157017038330e-02, -2.956199267499673e+00, 0.000000000000000e+00, -3.016413351732515e+00, -1.585581181378304e+00, 0.000000000000000e+00, -1.581499504872688e+00, -3.642827100963796e+00, 0.000000000000000e+00, -3.346317118554564e+00, -6.964390310554285e-04, 0.000000000000000e+00, -6.979003393996061e-04, -3.150484220834237e+00, 0.000000000000000e+00, -4.226061310891048e+00, -3.150484220834215e+00, 0.000000000000000e+00, -4.226061310891048e+00, -2.553552176422079e+01, 0.000000000000000e+00, -2.208730097374766e+01, -2.187531578931179e+01, 0.000000000000000e+00, -2.019130573168311e+01, -1.251911938275429e+02, 0.000000000000000e+00, -1.390951044125943e+02, -7.256227000273161e+00, 0.000000000000000e+00, -6.810651287580611e+00, -6.229098225209170e+01, 0.000000000000000e+00, -6.071230534434774e+01, -6.229098225201640e+01, 0.000000000000000e+00, -6.071230534430973e+01, 1.551558138673795e-01, 0.000000000000000e+00, 1.553847007727969e-01, 5.954954085291678e-02, 0.000000000000000e+00, 6.080266134740905e-02, 8.705931328951773e-02, 0.000000000000000e+00, 8.828798733653322e-02, 1.147162387967289e-01, 0.000000000000000e+00, 1.152128308993583e-01, 1.002971258160698e-01, 0.000000000000000e+00, 1.011842507992281e-01, 1.002971258160698e-01, 0.000000000000000e+00, 1.011842507992281e-01, 1.725817810350231e-01, 0.000000000000000e+00, 1.733147814612306e-01, -1.081043887690423e-01, 0.000000000000000e+00, -1.064067460767968e-01, -8.520521214737573e-02, 0.000000000000000e+00, -8.343149894434210e-02, -4.206880905573095e-02, 0.000000000000000e+00, -4.108818622749694e-02, -6.789440982293618e-02, 0.000000000000000e+00, -6.677270363885779e-02, -6.789440982293618e-02, 0.000000000000000e+00, -6.677270363885771e-02, -1.657719965996860e-02, 0.000000000000000e+00, -1.588989383879311e-02, -1.164072742031497e+00, 0.000000000000000e+00, -1.160291038073760e+00, -9.287886027936982e-01, 0.000000000000000e+00, -9.202619972448575e-01, -4.204879334913532e-01, 0.000000000000000e+00, -4.107587762627434e-01, -6.915179228666001e-01, 0.000000000000000e+00, -6.948895578843592e-01, -6.915179228666006e-01, 0.000000000000000e+00, -6.948895578843598e-01, -1.415541234699143e-01, 0.000000000000000e+00, -1.379380290561955e-01, -7.922722307661094e+00, 0.000000000000000e+00, -7.917712255764605e+00, -6.779873317944420e+00, 0.000000000000000e+00, -6.761541211701126e+00, -4.640651799417170e-01, 0.000000000000000e+00, -4.191453910355524e-01, -5.810442280547941e+00, 0.000000000000000e+00, -6.437036292489526e+00, -5.810442280547964e+00, 0.000000000000000e+00, -6.437036292489538e+00, -1.510908955828431e+01, 0.000000000000000e+00, -1.538905085073754e+01, -7.945729881939120e+01, 0.000000000000000e+00, -1.407436127737904e+02, -4.872875629095100e+01, 0.000000000000000e+00, -5.183186441423263e+01, -6.598827951803078e+00, 0.000000000000000e+00, -6.174599667784102e+00, -1.284880828431102e+02, 0.000000000000000e+00, -6.316696594197399e+01, -1.284880828430792e+02, 0.000000000000000e+00, -6.316696594199291e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mn15_l_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mn15_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-6.243724318346289e-03, -6.249090197154639e-03, -6.244723607877993e-03, -6.249815242176181e-03, -6.247311440309990e-03, -6.253695245428785e-03, -6.236095280812985e-03, -6.239374313326680e-03, -6.244371325193530e-03, -6.244644951146429e-03, -6.244371325193530e-03, -6.244644951146429e-03, 1.776978283858918e-02, 1.775901649219392e-02, 1.777123357519287e-02, 1.775902012737185e-02, 1.778761314912643e-02, 1.778742124618153e-02, 1.782571741853205e-02, 1.781563904787820e-02, 1.777031117654629e-02, 1.783041179166759e-02, 1.777031117654629e-02, 1.783041179166759e-02, 5.620135563060077e-02, 5.707392561736932e-02, 5.596667195539858e-02, 5.695410639507417e-02, 5.257217200214263e-02, 5.208689550612908e-02, 5.399608836654012e-02, 5.464184963909388e-02, 5.746398327505092e-02, 5.053125562054397e-02, 5.746398327505092e-02, 5.053125562054397e-02, 1.765638786902710e-01, 1.851111962989162e-01, 1.788714767997901e-01, 1.862112334038811e-01, 2.774157561434408e-02, 3.298640765609588e-02, 8.876504486499305e-02, 1.045277855949812e-01, 1.698936159461486e-01, 3.231058350323911e-02, 1.698936159461483e-01, 3.231058350323935e-02, 1.543268858208408e-05, 1.861632456019996e-05, 1.843606157885671e-05, 2.299491026024862e-05, 1.719337359758463e-03, 2.145645113787404e-03, 2.433249390738333e-06, 2.336786735163809e-06, 1.038297112771558e-05, 3.253002055612227e-06, 1.038297112771560e-05, 3.253002055677582e-06, -6.042701534261775e-02, -6.043633752410053e-02, -6.155027743358067e-02, -6.152209139211687e-02, -6.050219900199068e-02, -6.048292379958310e-02, -6.146540090710409e-02, -6.146866131604426e-02, -6.099106232464030e-02, -6.097870085706956e-02, -6.099106232464030e-02, -6.097870085706956e-02, 3.534566417875026e-02, 3.553833303031485e-02, 3.664340442536344e-02, 3.679767771078821e-02, 3.476688494828249e-02, 3.511991146714032e-02, 3.596271116961663e-02, 3.632881250789807e-02, 3.645622103501277e-02, 3.627082831244579e-02, 3.645622103501277e-02, 3.627082831244579e-02, 6.700314448203580e-02, 6.618487898617920e-02, 2.580171177615751e-02, 2.366738369232220e-02, 8.244025137154758e-02, 7.653435532647648e-02, 6.656724307073848e-02, 5.797617684670005e-02, 5.634885953497996e-02, 6.407785619077117e-02, 5.634885953498009e-02, 6.407785619077114e-02, 3.247413668459167e-02, 3.338778091257218e-02, 1.230571062694195e-01, 1.231065346806653e-01, 2.448783064288710e-02, 3.017100948701175e-02, 1.438441021543688e-03, 1.381309620045576e-03, 6.186448637071396e-02, 9.542668320742977e-02, 6.186448637071406e-02, 9.542668320743007e-02, 7.451941536159195e-07, 7.699601313723656e-07, 2.055554124648883e-06, 1.895588988637336e-06, 6.182737893963479e-06, 8.068333772990015e-06, 9.708967569236077e-03, 1.101603386568693e-02, 1.240454498279102e-06, 1.024244550067812e-05, 1.240454498300325e-06, 1.024244550067664e-05, 1.274330968752775e-02, 9.995269000047529e-03, -3.821876215757519e-02, -4.018429484283157e-02, -2.918336106659931e-02, -3.118971702106164e-02, -1.510652737741173e-02, -1.749248111276623e-02, -2.298006420158230e-02, -2.514852538116224e-02, -2.298006420158230e-02, -2.514852538116215e-02, 9.483180256142879e-02, 9.150285940088597e-02, 8.538025411666823e-02, 8.486411545154002e-02, 5.882323982778200e-02, 5.736858872448668e-02, 1.027087913684828e-02, 9.536309263963226e-03, 3.659321957326352e-02, 3.558755775618035e-02, 3.659321957326372e-02, 3.558755775618035e-02, 3.409436789062422e-02, 3.013717025937348e-02, 1.375218325545765e-01, 1.377486580725327e-01, 1.347652924225297e-01, 1.345894258720474e-01, 1.055450101964766e-01, 1.052408632510737e-01, 1.221742591765821e-01, 1.220929556863236e-01, 1.221742591765820e-01, 1.220929556863236e-01, 8.918393589079864e-02, 8.790017023200471e-02, 1.690560683263981e-03, 1.694305597534962e-03, 3.759142307635612e-03, 4.349968205776542e-03, 9.340247153794345e-02, 7.226693096091941e-02, 2.380574011760123e-02, 3.509576477654713e-02, 2.380574011760175e-02, 3.509576477654706e-02, 2.201544267612889e-05, 2.417817627274970e-05, 4.567912232297501e-08, 4.579669885812859e-08, 1.069773924223054e-06, 1.364105066079623e-06, 2.407377033572292e-02, 2.781188816308746e-02, 2.721749139265761e-06, 8.166634809705319e-06, 2.721749139257206e-06, 8.166634809657610e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
