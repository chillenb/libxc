
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mn15_l_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mn15_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.427231964522614e+01, -1.427195329539942e+01, -1.427049867886469e+01, -1.898704813276476e+01, -1.898395914961920e+01, -2.369522032048139e+01, -3.651987582221799e+00, -4.343704214470469e+00, -4.348550453708487e+00, -4.347017485720627e+00, -4.346695770187678e+00, -3.655592244389622e+00, -3.099395964803298e-01, -4.961704211817803e-01, -6.528885981324929e-01, -4.681590807064319e-01, -2.655881499137329e-01, -6.641029762265289e-01, -1.273761176459227e-01, -1.329641438428144e-01, -3.883544127222300e-01, -1.417346260020593e-01, -2.047603089424156e-01, -1.819293484558056e-01, -1.207206198745583e-02, -4.308799642856313e-03, -1.205705724427089e-02, -7.143275717546462e-03, -9.819587996825776e-03, -9.819587996825779e-03, -4.444707871700359e+00, -4.411153627635859e+00, -4.442779722341264e+00, -4.413180252213657e+00, -3.623244209840848e+00, -3.624030254436329e+00, -2.258787991040855e+00, -2.292169266381395e+00, -2.233620227989282e+00, -2.263318047113746e+00, -1.916916564247984e+00, -2.289641074135427e+00, -5.969523748783332e-01, -6.749667392927180e-01, -5.896874090839650e-01, -6.108621177500029e-01, -6.116413419766243e-01, -6.483364562495075e-01, -9.134811884576588e-02, -8.227692008554816e-02, -8.660219415904644e-02, -2.354731646767022e+00, -1.169448971976444e-01, -1.169448971976443e-01, -1.699136185753589e-03, -6.988572913465187e-03, -5.393144604814243e-03, -6.055351060170053e-03, -6.726175518164951e-03, -6.726175518164955e-03, -6.036536545476670e-01, -5.899906032283870e-01, -6.283887895756172e-01, -6.147631222371088e-01, -6.309794703243006e-01, -6.123811229288858e-01, -5.890231575545699e-01, -4.868837256489200e-01, -5.222240523020162e-01, -5.561539329889567e-01, -5.525250712520517e-01, -5.364940766432628e-01, -6.941300122361278e-01, -2.570957096255456e-01, -2.040205438667645e-01, -3.215715746229391e-01, -3.452625591861161e-01, -2.643028944430302e-01, -4.894354606317603e-01, 3.533987242559902e-02, -6.098210405261051e-02, -3.597288484752345e-01, -8.119206127395764e-02, -8.119206127395764e-02, 8.976563566542271e-03, -1.914860329495305e-03, 1.988864499824894e-03, 5.971706747431058e-02, -6.194196197643487e-03, 8.603281344428976e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mn15_l_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mn15_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [2.920376641765434e+00, 2.930544344126168e+00, 2.921888142109396e+00, 2.931640487431429e+00, 2.926167403380101e+00, 2.937927856838214e+00, 2.909211548655124e+00, 5.063785282572719e+00, 2.921344808079475e+00, 5.074001405202172e+00, 5.070082825489335e+00, 5.074001405202176e+00, -5.455728740762994e+00, -5.556576953117576e+00, -5.455587411883587e+00, -5.455683608213617e+00, -5.452675416524407e+00, -5.452186183596705e+00, -5.454246807332213e+00, -5.454322628579912e+00, -5.455124191309215e+00, -5.451663155512684e+00, -5.556607347518904e+00, -5.451663155512684e+00, -1.088393350884308e+00, -1.101669454788724e+00, -1.084011828702241e+00, -8.059013225736428e-01, -8.182400558031974e-01, -8.187359979044893e-01, -8.088438412335317e-01, -1.049926703754199e+00, -1.115351845422955e+00, -9.392729731833871e-01, -8.099121198064663e-01, -8.249104267954820e-01, -2.296682663435946e-01, -2.197019330864981e-01, -2.398981092448712e-01, -2.127272890294236e-01, -1.184794170365510e+00, -1.032580075414677e+00, -2.261729016338661e-01, -2.350253347598907e-01, -2.485873351902239e-01, -1.246729397393563e-01, -2.485873351902234e-01, 5.825680307758469e-02, -1.533276886869551e-02, -1.621202048844925e-02, 8.566714555605622e-03, -1.704292959938160e-02, 4.544472952943870e-02, -6.095060439554941e-02, -9.508936902564767e-03, -9.357531504404250e-03, -1.379598418217295e-02, -8.084134516819890e-03, -1.379598418217295e-02, -8.084134516819911e-03, 3.031900074193253e+00, 3.030874114341895e+00, 3.101821513541742e+00, 3.098434416636480e+00, 3.036768211166401e+00, 3.033905780218033e+00, 3.096720907279562e+00, 3.095237419556081e+00, 1.945858664837030e+00, 3.064692895441957e+00, 3.066985512001371e+00, 1.943963441787463e+00, -2.900537094253695e+00, -2.902195025767012e+00, -2.941324286517487e+00, -2.941516236045854e+00, -2.863355377139492e+00, -2.875879625147437e+00, -2.900806703058064e+00, -2.913120528503600e+00, -2.949481532716514e+00, -3.317311440751870e+00, -2.949481532716515e+00, -2.926921841584642e+00, -7.185202075075380e-01, -8.879374641669435e-01, -7.666996065455142e-01, -7.664665177193399e-01, -6.114565589043287e-01, -6.560796941766524e-01, -6.675999739467733e-01, -6.972994374095464e-01, -7.500786436014326e-01, -8.773421184121072e-01, -7.500786436014325e-01, -7.080137295718076e-01, -1.224856761618927e-01, -1.242100993963258e-01, -1.494373099890205e-01, -2.950081827125277e-01, -1.059057041225438e-01, -1.157704587669853e-01, -2.171480861319097e+00, -2.169093342084803e+00, -1.659048906089098e-01, -1.942407389281686e-01, -1.659048906089098e-01, -1.942407389281700e-01, 3.662585241431437e-03, -7.488678966068302e-03, -9.165264337143882e-03, -9.298407699092671e-03, -6.922594151091987e-03, -7.315908761280048e-03, -7.655674711388102e-02, 6.008290211517276e-02, -7.071370612394737e-03, -9.581415254530552e-03, -7.071370612394787e-03, -9.581415254530632e-03, -8.112721890578359e-01, -8.112273252127338e-01, -7.912655328166989e-01, -7.934374099765247e-01, -8.211132298689487e-01, -8.206336841337976e-01, -8.111083803673675e-01, -8.102621920181794e-01, -8.164608171928510e-01, -8.158618814623384e-01, -8.164608171928510e-01, -8.076966099223782e-01, -8.089183926489542e-01, -8.094336335867444e-01, -5.601762218055764e-01, -7.711163232112808e-01, -6.115916522313284e-01, -7.671704859201841e-01, -6.699419751588932e-01, -6.726947377754067e-01, -6.368440526552959e-01, -6.399837428755503e-01, -6.368440526552963e-01, -7.760986222940843e-01, -8.077525183802429e-01, -9.448995133171575e-01, -3.066330438247743e-01, -3.061047773417522e-01, -4.261368892991149e-01, -2.858958802956507e-01, -5.863662580918787e-01, -3.243486460796678e-01, -2.794546889872989e-01, -2.786237786917988e-01, -2.794546889872994e-01, -5.228327708784707e-01, -4.830536604517284e-01, -4.905293560208012e-01, 4.461192001885941e-02, 4.491533193199237e-02, -6.769198812913414e-02, -6.869991313807403e-02, -3.028931986848972e-01, -3.148943049457386e-01, -9.532111771525699e-02, -1.069256494207759e-01, -9.532111771525729e-02, -1.069256494207745e-01, 1.175588786211221e-02, 1.218733904341237e-02, -2.544390588600648e-03, -2.550140158496618e-03, 2.564695584739838e-03, 2.728537883321721e-03, 5.449097256941022e-02, 5.123868243940335e-02, -6.707380019368121e-03, -8.817021325830626e-03, -6.707380019368088e-03, 4.516603479553806e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mn15_l_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mn15_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.089974807242363e-07, 0.000000000000000e+00, -1.090189204353997e-07, -1.089991600710600e-07, 0.000000000000000e+00, -1.090201361548459e-07, -1.090031090632675e-07, 0.000000000000000e+00, -1.090261901920344e-07, -1.089843823862345e-07, 0.000000000000000e+00, -1.268387573276989e-07, -1.089986333937313e-07, 0.000000000000000e+00, -1.268453557841476e-07, -1.268325205851966e-07, 0.000000000000000e+00, -1.268453557841476e-07, -5.738876670413605e-05, 0.000000000000000e+00, -3.514566999150850e-05, -5.740644540330729e-05, 0.000000000000000e+00, -5.738851006978026e-05, -5.775228532508720e-05, 0.000000000000000e+00, -5.781207306245249e-05, -5.760749037054847e-05, 0.000000000000000e+00, -5.760484678751311e-05, -5.738495826589657e-05, 0.000000000000000e+00, -5.791347374061050e-05, -3.515165024523280e-05, 0.000000000000000e+00, -5.791347374061050e-05, -2.461661744342078e-02, 0.000000000000000e+00, -2.365441010371861e-02, -2.494213524469475e-02, 0.000000000000000e+00, -1.782650923553838e-02, -1.628035956857643e-02, 0.000000000000000e+00, -1.621590041248148e-02, -1.709117141750231e-02, 0.000000000000000e+00, -2.767568216512743e-02, -2.255602148335934e-02, 0.000000000000000e+00, -3.629767824955833e-02, -1.768347793219700e-02, 0.000000000000000e+00, -1.573916323449450e-02, -1.239911743306365e+01, 0.000000000000000e+00, -3.476386666562985e+00, -1.162697659647899e+01, 0.000000000000000e+00, -3.506688046715788e+00, -2.998746747788065e-03, 0.000000000000000e+00, -1.543114831347433e-02, -1.580221890299680e+00, 0.000000000000000e+00, -2.016132245195009e+00, -2.666697415123303e+00, 0.000000000000000e+00, -1.591629978987206e+00, -2.666697415123303e+00, 0.000000000000000e+00, -1.537402971906717e+02, -1.893510209425807e+01, 0.000000000000000e+00, -1.895485037429907e+01, -1.160245573333547e+07, 0.000000000000000e+00, -1.976939317516154e+01, -1.090781027900452e+04, 0.000000000000000e+00, -6.896284358949035e+00, -1.410846351387718e+01, 0.000000000000000e+00, -1.425869910947042e+01, -1.807643811404233e+01, 0.000000000000000e+00, -3.144140289634109e+01, -1.807643811404233e+01, 0.000000000000000e+00, -3.144140289632895e+01, -3.700770823086591e-05, 0.000000000000000e+00, -3.704185270555039e-05, -3.708450746891878e-05, 0.000000000000000e+00, -3.711615988228770e-05, -3.701332116868670e-05, 0.000000000000000e+00, -3.704537778657504e-05, -3.707915678845437e-05, 0.000000000000000e+00, -3.711281928529674e-05, -3.175276969531530e-05, 0.000000000000000e+00, -3.707910672713106e-05, -3.704615952525769e-05, 0.000000000000000e+00, -3.178022889572004e-05, -4.305726167446370e-04, 0.000000000000000e+00, -4.324008619309138e-04, -4.354588584846238e-04, 0.000000000000000e+00, -4.371282482586539e-04, -4.253267566426630e-04, 0.000000000000000e+00, -4.286072221997410e-04, -4.299391898994794e-04, 0.000000000000000e+00, -4.332057147014874e-04, -4.372939202267564e-04, 0.000000000000000e+00, -2.553122305303259e-04, -4.372939202267564e-04, 0.000000000000000e+00, -4.356365044563377e-04, -5.821886820470027e-02, 0.000000000000000e+00, -7.372381861104181e-03, -3.829987616259517e-02, 0.000000000000000e+00, -3.696803476628369e-02, -7.705383288482941e-02, 0.000000000000000e+00, -7.035501555011484e-02, -7.103757553229308e-02, 0.000000000000000e+00, -6.346264721272918e-02, -5.103619965596381e-02, 0.000000000000000e+00, -7.016610213976146e-03, -5.103619965596384e-02, 0.000000000000000e+00, -6.081387791816357e-02, -2.022497742913734e+00, 0.000000000000000e+00, -1.986639775115297e+00, -1.215684913696849e+01, 0.000000000000000e+00, -1.322830484766719e+00, -2.381895608951002e+00, 0.000000000000000e+00, -2.300129728971285e+00, -9.670441616639118e-04, 0.000000000000000e+00, -9.691566333498599e-04, -2.237749813167573e+00, 0.000000000000000e+00, -3.184722552114363e+00, -2.237749813167556e+00, 0.000000000000000e+00, -3.184722552114378e+00, -3.434577307348405e+08, 0.000000000000000e+00, -9.494562855914484e+00, -1.339543735656476e+01, 0.000000000000000e+00, -1.180426809417342e+01, -9.692231722993320e+01, 0.000000000000000e+00, -1.062617365360054e+02, -4.809173653626369e+00, 0.000000000000000e+00, -1.304611257830397e+03, -1.827291698308101e+01, 0.000000000000000e+00, -5.757892095356977e+01, -1.827291698306656e+01, 0.000000000000000e+00, -5.757892095353115e+01, 1.436859891334226e-01, 0.000000000000000e+00, 1.443087400117402e-01, 5.112361470959089e-02, 0.000000000000000e+00, 5.263561193504742e-02, 1.148449667674826e-01, 0.000000000000000e+00, 1.152683025825809e-01, 1.373476206543250e-01, 0.000000000000000e+00, 1.053074070321529e-01, 1.255981701859686e-01, 0.000000000000000e+00, 1.257535878777719e-01, 1.255981701859686e-01, 0.000000000000000e+00, 9.170734573746679e-02, 1.476923548020516e-01, 0.000000000000000e+00, 1.494005261127148e-01, -1.099740052405800e-01, 0.000000000000000e+00, -1.474526899710133e-02, -9.041001945007257e-02, 0.000000000000000e+00, 2.005376758827732e-03, -5.256097924492065e-02, 0.000000000000000e+00, -5.145253476816197e-02, -7.594266086476517e-02, 0.000000000000000e+00, -7.452447197649624e-02, -7.594266086476516e-02, 0.000000000000000e+00, 1.067478507830788e-02, -3.725917009942600e-02, 0.000000000000000e+00, -4.566725585307745e-03, -1.067352601691330e+00, 0.000000000000000e+00, -1.061945587433044e+00, -1.606705105413105e+00, 0.000000000000000e+00, -8.123410175602115e-01, -2.254505800239620e-01, 0.000000000000000e+00, -3.947015876955349e-01, -6.228947736668478e-01, 0.000000000000000e+00, -6.266592711957646e-01, -6.228947736668488e-01, 0.000000000000000e+00, -6.182596622136430e-01, -1.470138525958299e-01, 0.000000000000000e+00, -1.443289449504178e-01, -1.179150739677853e+04, 0.000000000000000e+00, -1.146435744729208e+04, -5.171697891690536e+00, 0.000000000000000e+00, -5.211609637109325e+00, -5.005357734402638e-01, 0.000000000000000e+00, -4.706591115807649e-01, -4.310108616975898e+00, 0.000000000000000e+00, -4.755520377920981e+00, -4.310108616975951e+00, 0.000000000000000e+00, -4.755520377921000e+00, -3.308728075062511e+06, 0.000000000000000e+00, -2.865707361758923e+06, -1.565523062117115e+01, 0.000000000000000e+00, -1.558619195651477e+01, -1.418333359427813e+09, 0.000000000000000e+00, -1.107819618953586e+09, -6.560894779691381e+02, 0.000000000000000e+00, -6.151052173895913e+02, -4.718395609866695e+01, 0.000000000000000e+00, -5.982640127243850e+01, -4.718395609864200e+01, 0.000000000000000e+00, -1.482089409546009e+08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mn15_l_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mn15_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.274484371594790e-02, -1.275139031041120e-02, -1.274576493396105e-02, -1.275205847459743e-02, -1.274834547214518e-02, -1.275585964455720e-02, -1.273801598177561e-02, -5.773980184343950e-03, -1.274543643153112e-02, -5.779501287163082e-03, -5.777195706615767e-03, -5.779501287163082e-03, 2.735183960190324e-02, 1.193668307812067e-02, 2.735719982847532e-02, 2.735124435776948e-02, 2.746078026505665e-02, 2.747891775757609e-02, 2.742124943631248e-02, 2.742105269818438e-02, 2.734372912858154e-02, 2.751321720902296e-02, 1.194400571279759e-02, 2.751321720902296e-02, 6.410070622788122e-02, 6.510172760772255e-02, 6.383243539208316e-02, 5.889618631689351e-02, 5.447826494508796e-02, 5.399913854627250e-02, 5.603047553746018e-02, 6.242014220086031e-02, 6.535281418059181e-02, 5.595924985538643e-02, 5.932154656649120e-02, 5.210666779707324e-02, 1.824038145877511e-01, 1.850045822138881e-01, 1.883283324179858e-01, 1.860876142252141e-01, 2.976665599380473e-02, 3.520718202800065e-02, 8.522988927311266e-02, 1.021596001147957e-01, 1.695882951827899e-01, 2.897988154138252e-02, 1.695882951827897e-01, 2.340514345929657e-02, 1.543129670687049e-05, 1.861551800244024e-05, 2.128916331636218e-05, 2.299242383646292e-05, 1.729331201672246e-03, 2.112310296889749e-03, 2.432508070269768e-06, 2.336205464351196e-06, 1.038072806326826e-05, 3.250901460337659e-06, 1.038072806326826e-05, 3.250901460403035e-06, -6.030189988338330e-02, -6.031836944918458e-02, -6.142685582559237e-02, -6.140574326008039e-02, -6.038004290741787e-02, -6.036707694667492e-02, -6.134458281971548e-02, -6.135417509719081e-02, -7.813381906835035e-02, -6.086118444416924e-02, -6.086464666205925e-02, -7.813490521012739e-02, 3.768441667464095e-02, 3.782838768670806e-02, 3.885100361232595e-02, 3.895661743016603e-02, 3.659484873073175e-02, 3.704872860397219e-02, 3.765240439588637e-02, 3.810908256441688e-02, 3.913983596916903e-02, 2.475969024401208e-02, 3.913983596916903e-02, 3.855092183324142e-02, 8.161003999339854e-02, 6.412294163511464e-02, 1.430149971952151e-02, 8.164200111172977e-03, 9.285097066662233e-02, 9.064004485280304e-02, 8.298017752352922e-02, 7.439686350581606e-02, 6.885925344998356e-02, 6.381725354988736e-02, 6.885925344998362e-02, 7.892678286755284e-02, 3.102711567564066e-02, 3.177558140626793e-02, 1.088143889500075e-01, 1.223771258154778e-01, 2.316565014453310e-02, 2.879594702923347e-02, 3.765886608750841e-02, 3.762055236302235e-02, 5.998675962153446e-02, 9.353947043462091e-02, 5.998675962153452e-02, 9.353947043462121e-02, 8.689205884913570e-07, 7.694947968213220e-07, 2.054365327092348e-06, 1.894414100483901e-06, 6.180099900999006e-06, 8.064068432979345e-06, 9.200115010154908e-03, 9.498425956901455e-03, 1.238967357385390e-06, 1.024114257727259e-05, 1.238967357406617e-06, 1.024114257727113e-05, -6.144070349187792e-02, -6.318131404245171e-02, -7.397267616528952e-02, -7.582504941283594e-02, 1.085231956330952e-01, 1.060700152108075e-01, 1.115288845010625e-01, -7.429852919986667e-02, 1.103170534430329e-01, 1.074679521040044e-01, 1.103170534430329e-01, -7.637395240125149e-02, -4.706655865168689e-02, -4.780346242971602e-02, 8.735256378803816e-02, 8.629100354191661e-02, 6.154001985232186e-02, 6.491230359765211e-02, 3.869236749195894e-03, 2.958215447313914e-03, 3.744399868226862e-02, 3.628058859089835e-02, 3.744399868226882e-02, 6.170079980289096e-02, 4.422407431977637e-02, 3.589281308399118e-02, 1.373937064444783e-01, 1.376264950077746e-01, 1.619804730012975e-01, 1.346835502524411e-01, 1.469557928439329e-01, 1.056092771923291e-01, 1.222363098970739e-01, 1.221434837833786e-01, 1.222363098970738e-01, 1.674559586639928e-01, 9.445619051852454e-02, 9.332398035261771e-02, 1.720373447041400e-03, 1.720765833870974e-03, 3.658506183995524e-03, 4.232432300542694e-03, 9.207003287567092e-02, 7.300634886866371e-02, 2.285705840224943e-02, 3.376114136101439e-02, 2.285705840224997e-02, 3.376114136101432e-02, 2.522825005196056e-05, 2.766972775172077e-05, 4.566979888449007e-08, 4.578170712828468e-08, 1.249722661008885e-06, 1.593036404242950e-06, 1.949185829103513e-02, 2.269059225163127e-02, 2.718138099995005e-06, 8.165721914421280e-06, 2.718138099986436e-06, 9.499764553102333e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
