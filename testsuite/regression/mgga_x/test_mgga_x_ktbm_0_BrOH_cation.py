
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_0_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.294037716113221e+01, -2.294042886775151e+01, -2.294076060643571e+01, -2.293999267921144e+01, -2.294038052540419e+01, -2.294038052540419e+01, -3.470646409292859e+00, -3.470683616248914e+00, -3.471937601682790e+00, -3.473761724241128e+00, -3.472364071343430e+00, -3.472364071343430e+00, -6.572337438288811e-01, -6.569098245697960e-01, -6.497914979513140e-01, -6.575066131552207e-01, -6.559232871333578e-01, -6.559232871333578e-01, -1.910374211340348e-01, -1.936877411957180e-01, -7.532797207974238e-01, -1.410055006934308e-01, -1.812501637964462e-01, -1.812501637964461e-01, -6.484222446021818e-03, -6.827014415446996e-03, -3.755028309551194e-02, -3.726006286762250e-03, -5.210688541314049e-03, -5.210688541314048e-03, -5.575666467241148e+00, -5.575799985449991e+00, -5.575718862133403e+00, -5.575834915159913e+00, -5.575710225316435e+00, -5.575710225316435e+00, -2.136899036110937e+00, -2.158272776939466e+00, -2.133900957573444e+00, -2.153340579865392e+00, -2.150091009221127e+00, -2.150091009221127e+00, -6.084261518022208e-01, -6.437351710179151e-01, -5.495087862583281e-01, -5.502181598344751e-01, -6.189657363492684e-01, -6.189657363492684e-01, -9.786112383697981e-02, -1.894855003854303e-01, -9.057898004309313e-02, -1.870769661337293e+00, -1.158386572981394e-01, -1.158386572981394e-01, -2.849605130845921e-03, -3.626752013407091e-03, -2.787971343441542e-03, -6.077501194336049e-02, -3.500773238469630e-03, -3.500773238469631e-03, -6.158077961723065e-01, -6.162834315848620e-01, -6.161265703680160e-01, -6.159822550511992e-01, -6.160526811001876e-01, -6.160526811001876e-01, -5.942300344114690e-01, -5.404479721972919e-01, -5.572628022375015e-01, -5.720068258859757e-01, -5.642027874659803e-01, -5.642027874659803e-01, -6.681069515864222e-01, -2.417501966490419e-01, -2.884870165382114e-01, -3.638686445608645e-01, -3.269640485813095e-01, -3.269640485813095e-01, -4.837141953658356e-01, -3.595659568162162e-02, -4.893162802161838e-02, -3.489491002917794e-01, -7.773533486906278e-02, -7.773533486906278e-02, -9.067123474187859e-03, -9.527471639853438e-04, -2.050649320605424e-03, -7.307524775726167e-02, -3.215765792370658e-03, -3.215765792370655e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_0_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.761055642154177e+01, -2.761035556463068e+01, -2.761070107502597e+01, -2.761046063955286e+01, -2.761108304808780e+01, -2.761103062122251e+01, -2.760944987042828e+01, -2.760894877557793e+01, -2.761064612512621e+01, -2.760972160826763e+01, -2.761064612512621e+01, -2.760972160826763e+01, -4.380094404455388e+00, -4.380059789891935e+00, -4.380212504244855e+00, -4.380143854226124e+00, -4.382613951035029e+00, -4.383121796328052e+00, -4.381593465122245e+00, -4.381770124140038e+00, -4.379117791303286e+00, -4.383998775734035e+00, -4.379117791303286e+00, -4.383998775734035e+00, -8.001393612628170e-01, -8.030429833654884e-01, -7.990988293464932e-01, -8.024916632134516e-01, -7.861116992978279e-01, -7.835071103421020e-01, -7.927463499510882e-01, -7.941572304007523e-01, -8.077042303056857e-01, -7.817188535497878e-01, -8.077042303056857e-01, -7.817188535497878e-01, -2.256241293741397e-01, -2.345692569067573e-01, -2.271916025591071e-01, -2.372690109876089e-01, -9.089314610841647e-01, -9.292426794204968e-01, -1.755755769061816e-01, -1.794127462079179e-01, -2.347522496997453e-01, -1.291574520871368e-01, -2.347522496997454e-01, -1.291574520871367e-01, -8.163396597860849e-03, -8.676396468809782e-03, -8.552163464206067e-03, -9.163952671614189e-03, -4.736358280788088e-02, -5.003915758372129e-02, -4.891953678596326e-03, -4.812830983865986e-03, -7.277187416027404e-03, -4.120346087533108e-03, -7.277187416027403e-03, -4.120346087533111e-03, -6.844799280036705e+00, -6.842993181269954e+00, -6.849021506279860e+00, -6.847072383575403e+00, -6.845008844545166e+00, -6.843115381602148e+00, -6.848632538172295e+00, -6.846821895355101e+00, -6.846980504801143e+00, -6.845044792847716e+00, -6.846980504801143e+00, -6.845044792847716e+00, -2.434037339705125e+00, -2.433810562576999e+00, -2.449875454324900e+00, -2.449093585419875e+00, -2.423097563959784e+00, -2.425834785138032e+00, -2.436302845115221e+00, -2.439306942356972e+00, -2.452286210465689e+00, -2.443070756181855e+00, -2.452286210465689e+00, -2.443070756181855e+00, -7.565196475920202e-01, -7.546912106362660e-01, -8.699088819311602e-01, -8.711069876676342e-01, -6.724416962371793e-01, -7.052853590655253e-01, -7.380641647904636e-01, -7.680177888693787e-01, -7.932336249970414e-01, -7.515825069387372e-01, -7.932336249970413e-01, -7.515825069387374e-01, -1.251837549365195e-01, -1.262255467434278e-01, -2.348576248780272e-01, -2.358365424667687e-01, -1.132477779293490e-01, -1.193885988309028e-01, -2.600570378485842e+00, -2.599556929908625e+00, -1.428435363998902e-01, -1.508991438842707e-01, -1.428435363998902e-01, -1.508991438842708e-01, -3.644588161542262e-03, -3.789604632465727e-03, -4.693235749777617e-03, -4.761862539233188e-03, -3.519326990849018e-03, -3.726435350468432e-03, -7.832914653614352e-02, -7.905644220697536e-02, -3.561358596231247e-03, -4.950216215636512e-03, -3.561358596231248e-03, -4.950216215636517e-03, -8.149320988083033e-01, -8.182854243758169e-01, -7.964029416543669e-01, -7.998919190457914e-01, -8.028185160435460e-01, -8.063026642428716e-01, -8.082495815394077e-01, -8.116154023981358e-01, -8.055279030412118e-01, -8.089508049791323e-01, -8.055279030412118e-01, -8.089508049791323e-01, -7.983276176999757e-01, -8.009290170563921e-01, -6.086429224359676e-01, -6.114676256495902e-01, -6.501214269085378e-01, -6.536832029367685e-01, -7.047345101855366e-01, -7.075466364169006e-01, -6.760929241498626e-01, -6.788606633043445e-01, -6.760929241498626e-01, -6.788606633043445e-01, -9.072843321083789e-01, -9.105111980001905e-01, -2.923915993654844e-01, -2.938063266127752e-01, -3.388636626130543e-01, -3.414449485822810e-01, -4.297044582483740e-01, -4.320717465611937e-01, -3.790788577000568e-01, -3.787889742862339e-01, -3.790788577000561e-01, -3.787889742862340e-01, -5.625417070069278e-01, -5.667147068202270e-01, -4.659284020913682e-02, -4.689323197203112e-02, -6.242754238600944e-02, -6.451712387841932e-02, -4.159506269961001e-01, -4.242613142232041e-01, -9.724325673933983e-02, -1.025289947249824e-01, -9.724325673933981e-02, -1.025289947249824e-01, -1.160194275478963e-02, -1.201782657696093e-02, -1.251580424549353e-03, -1.251256365328591e-03, -2.581110609033278e-03, -2.745028946985977e-03, -9.329890044579447e-02, -9.515103899038725e-02, -3.378893838439864e-03, -4.537157403645966e-03, -3.378893838439859e-03, -4.537157403645958e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_0_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.921673051633748e-08, 0.000000000000000e+00, -2.921829996540915e-08, -2.921653083598577e-08, 0.000000000000000e+00, -2.921815460011766e-08, -2.921578037385111e-08, 0.000000000000000e+00, -2.921711011042841e-08, -2.921805197962022e-08, 0.000000000000000e+00, -2.922000144481926e-08, -2.921662244997657e-08, 0.000000000000000e+00, -2.921876258708748e-08, -2.921662244997657e-08, 0.000000000000000e+00, -2.921876258708748e-08, -2.724690018995971e-05, 0.000000000000000e+00, -2.724335538803469e-05, -2.725230606011681e-05, 0.000000000000000e+00, -2.724693300451806e-05, -2.735742166458493e-05, 0.000000000000000e+00, -2.737497133780878e-05, -2.731161566662314e-05, 0.000000000000000e+00, -2.730988320300536e-05, -2.725235306606419e-05, 0.000000000000000e+00, -2.740252604379206e-05, -2.725235306606419e-05, 0.000000000000000e+00, -2.740252604379206e-05, -9.816584139467862e-03, 0.000000000000000e+00, -9.998448382926231e-03, -9.778916074826645e-03, 0.000000000000000e+00, -9.975079753005824e-03, -9.151289644070394e-03, 0.000000000000000e+00, -9.119526494388500e-03, -9.524304157589076e-03, 0.000000000000000e+00, -9.694376208729488e-03, -9.918827502742802e-03, 0.000000000000000e+00, -8.856663573614487e-03, -9.918827502742802e-03, 0.000000000000000e+00, -8.856663573614487e-03, -1.087103759617637e+00, 0.000000000000000e+00, -1.186040467834512e+00, -1.108403464725008e+00, 0.000000000000000e+00, -1.213768266517881e+00, -2.501876786821998e-03, 0.000000000000000e+00, -2.888172349382333e-03, -7.813526644188765e-01, 0.000000000000000e+00, -8.833220200464560e-01, -9.299979331277108e-01, 0.000000000000000e+00, -8.739843995994762e-01, -9.299979331277102e-01, 0.000000000000000e+00, -8.739843995994766e-01, -1.705144036790296e+02, 0.000000000000000e+00, -1.504681015367330e+02, -1.594172081867398e+02, 0.000000000000000e+00, -1.388337137795422e+02, -4.363815296640950e+00, 0.000000000000000e+00, -4.024855950838858e+00, -4.415021564783574e+02, 0.000000000000000e+00, -4.522131737643677e+02, -2.132207475616984e+02, 0.000000000000000e+00, -9.968046518510647e+02, -2.132207475616990e+02, 0.000000000000000e+00, -9.968046518510638e+02, -8.699520333777861e-06, 0.000000000000000e+00, -8.707992482000026e-06, -8.699839999470888e-06, 0.000000000000000e+00, -8.708304732928946e-06, -8.699636740782912e-06, 0.000000000000000e+00, -8.708074581288094e-06, -8.699905820931020e-06, 0.000000000000000e+00, -8.708352978027487e-06, -8.699616974016968e-06, 0.000000000000000e+00, -8.708142402514849e-06, -8.699616974016968e-06, 0.000000000000000e+00, -8.708142402514849e-06, -2.319776276709077e-04, 0.000000000000000e+00, -2.328567370687112e-04, -2.333207816429957e-04, 0.000000000000000e+00, -2.341371819265871e-04, -2.299538737389614e-04, 0.000000000000000e+00, -2.314274477078377e-04, -2.314977144588485e-04, 0.000000000000000e+00, -2.328835114926256e-04, -2.340450669286519e-04, 0.000000000000000e+00, -2.338364463744589e-04, -2.340450669286519e-04, 0.000000000000000e+00, -2.338364463744589e-04, -4.313789207207484e-02, 0.000000000000000e+00, -4.394369890863165e-02, -3.636678141196389e-02, 0.000000000000000e+00, -3.655012752438423e-02, -5.066421154970101e-02, 0.000000000000000e+00, -4.913258294327122e-02, -5.230854409266426e-02, 0.000000000000000e+00, -4.849351105798211e-02, -3.931869874487304e-02, 0.000000000000000e+00, -4.582974523859838e-02, -3.931869874487307e-02, 0.000000000000000e+00, -4.582974523859840e-02, -9.629029713615015e-01, 0.000000000000000e+00, -9.574882199658316e-01, -5.323451129079142e-01, 0.000000000000000e+00, -5.267513111818092e-01, -1.096537844877778e+00, 0.000000000000000e+00, -1.065312811345212e+00, -3.952703401817454e-04, 0.000000000000000e+00, -3.960732504785710e-04, -1.056227664957260e+00, 0.000000000000000e+00, -1.340224338360892e+00, -1.056227664957261e+00, 0.000000000000000e+00, -1.340224338360893e+00, -8.153057674821658e+02, 0.000000000000000e+00, -7.135661725921429e+02, -5.054203159106336e+02, 0.000000000000000e+00, -4.671708953300612e+02, -2.237486259268146e+03, 0.000000000000000e+00, -2.101776616414421e+03, -2.103783118489758e+00, 0.000000000000000e+00, -2.154818421593099e+00, -1.210472046857423e+03, 0.000000000000000e+00, -8.101050105849104e+02, -1.210472046857423e+03, 0.000000000000000e+00, -8.101050105849087e+02, -5.626452544739069e-02, 0.000000000000000e+00, -5.543394752111275e-02, -5.658385073816486e-02, 0.000000000000000e+00, -5.575994354045928e-02, -5.649694605398686e-02, 0.000000000000000e+00, -5.566941281561853e-02, -5.640546044041931e-02, 0.000000000000000e+00, -5.557646361119171e-02, -5.645346091791750e-02, 0.000000000000000e+00, -5.562511257774004e-02, -5.645346091791750e-02, 0.000000000000000e+00, -5.562511257774004e-02, -6.234043180286383e-02, 0.000000000000000e+00, -6.157309063385594e-02, -8.110252899285825e-02, 0.000000000000000e+00, -8.026967677737186e-02, -7.867735271513888e-02, 0.000000000000000e+00, -7.773238775003284e-02, -7.356190399610407e-02, 0.000000000000000e+00, -7.262942186769952e-02, -7.643937750102660e-02, 0.000000000000000e+00, -7.552062325654238e-02, -7.643937750102660e-02, 0.000000000000000e+00, -7.552062325654238e-02, -2.894287655337113e-02, 0.000000000000000e+00, -2.916105415557819e-02, -4.023018089153694e-01, 0.000000000000000e+00, -4.005560748071716e-01, -3.335959229627979e-01, 0.000000000000000e+00, -3.354614317159115e-01, -2.322974810368001e-01, 0.000000000000000e+00, -2.278031707530431e-01, -3.021297314546171e-01, 0.000000000000000e+00, -3.048850850857596e-01, -3.021297314546174e-01, 0.000000000000000e+00, -3.048850850857598e-01, -9.766153313291329e-02, 0.000000000000000e+00, -9.788141324084373e-02, -4.398459482498973e+00, 0.000000000000000e+00, -4.334504429903990e+00, -2.591884900233465e+00, 0.000000000000000e+00, -2.506130345674639e+00, -3.228190466491605e-01, 0.000000000000000e+00, -3.415587587005793e-01, -1.770192380757103e+00, 0.000000000000000e+00, -1.951679985366088e+00, -1.770192380757104e+00, 0.000000000000000e+00, -1.951679985366088e+00, -7.002608831707960e+01, 0.000000000000000e+00, -6.547714425743412e+01, -9.591991374896857e+03, 0.000000000000000e+00, -1.023771274688611e+04, -2.627195720886320e+03, 0.000000000000000e+00, -2.395791844558143e+03, -2.039751357341069e+00, 0.000000000000000e+00, -2.091244109236956e+00, -2.070646133623548e+03, 0.000000000000000e+00, -9.818062371469903e+02, -2.070646133623553e+03, 0.000000000000000e+00, -9.818062371469933e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_0_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_0_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.637727223646894e-03, 1.637872273750480e-03, 1.637728633181608e-03, 1.637873274396033e-03, 1.637743488614219e-03, 1.637891629973941e-03, 1.637728703196148e-03, 1.637872536180111e-03, 1.637728088187464e-03, 1.637887679466071e-03, 1.637728088187464e-03, 1.637887679466071e-03, 4.541729759783564e-03, 4.536403900618054e-03, 4.543618661095226e-03, 4.537263325887294e-03, 4.576036974795396e-03, 4.580724395341758e-03, 4.581470098631177e-03, 4.577620583728699e-03, 4.538649173986158e-03, 4.607065350778694e-03, 4.538649173986158e-03, 4.607065350778694e-03, 6.084861464534918e-03, 6.163767348520849e-03, 6.090932386189797e-03, 6.136558403278686e-03, 5.923976104951447e-03, 6.299318523869182e-03, 7.322823618933018e-03, 7.506345164513508e-03, 5.744914613418819e-03, 8.544843826805173e-03, 5.744914613418819e-03, 8.544843826805173e-03, 4.168988901474296e-02, 5.469211085385195e-02, 4.280707360231818e-02, 5.760988037315195e-02, -5.274444155757546e-04, -4.504232161181396e-04, 1.057529339399144e-02, 1.483822835275595e-02, 3.947878989767155e-02, 3.691934303311471e-03, 3.947878989767162e-02, 3.691934303311470e-03, 2.667843298544206e-04, 2.845210672112992e-04, 2.847261816500793e-04, 3.076557986599711e-04, 1.234415366881759e-03, 1.372331515680125e-03, 1.339873406368119e-04, 1.329792371873447e-04, 2.309331293742506e-04, 1.632578957650055e-04, 2.309331293742506e-04, 1.632578957650089e-04, 6.992821582404905e-03, 6.994968681633055e-03, 6.994337505114061e-03, 6.996433473404454e-03, 6.993119562046429e-03, 6.995173171412175e-03, 6.994411267265796e-03, 6.996495111189454e-03, 6.993439064298199e-03, 6.995679410646717e-03, 6.993439064298199e-03, 6.995679410646717e-03, 1.128530185731137e-02, 1.136334487770138e-02, 1.171751381864000e-02, 1.177968743207966e-02, 1.129536976908520e-02, 1.136459357400145e-02, 1.169419114602665e-02, 1.176798302270103e-02, 1.152446925594240e-02, 1.158837107315082e-02, 1.152446925594240e-02, 1.158837107315082e-02, 4.478473393768003e-02, 4.560879755530717e-02, 4.655982044286928e-02, 4.718349477237201e-02, 3.198554139376066e-02, 3.832000175140374e-02, 3.422643838585520e-02, 3.846097529016759e-02, 4.721752474056733e-02, 4.523127998309678e-02, 4.721752474056731e-02, 4.523127998309678e-02, 5.173179690572028e-03, 5.180574802049797e-03, 2.290440257795372e-02, 2.285582264997492e-02, 4.149051229742784e-03, 4.933759172383365e-03, 1.171674365435561e-02, 1.172745225723949e-02, 9.024210713586575e-03, 1.416404204408725e-02, 9.024210713586530e-03, 1.416404204408720e-02, 7.515413867672511e-05, 7.613082279962302e-05, 1.210033772128822e-04, 1.143167172812076e-04, 2.519320044519561e-04, 2.792319190999525e-04, 2.521725003730334e-03, 2.914607684823000e-03, 8.931057942339592e-05, 2.787652887392993e-04, 8.931057942339553e-05, 2.787652887393049e-04, 6.287070037034830e-02, 6.267744539561150e-02, 6.248782558885047e-02, 6.230675022328593e-02, 6.262666633377695e-02, 6.244269888609109e-02, 6.273989994250627e-02, 6.254921080140916e-02, 6.268300892991201e-02, 6.249587253398752e-02, 6.268300892991201e-02, 6.249587253398752e-02, 6.346562464943920e-02, 6.335807428892308e-02, 6.121135268182500e-02, 6.123180896354506e-02, 6.332309158861735e-02, 6.328211645427052e-02, 6.402803197791904e-02, 6.386802479383377e-02, 6.362534418956232e-02, 6.358433196410476e-02, 6.362534418956228e-02, 6.358433196410471e-02, 4.060003160428045e-02, 4.176624337855910e-02, 3.511181768827475e-02, 3.544579327252113e-02, 4.391710884483773e-02, 4.525986395602390e-02, 4.975699332044578e-02, 4.924838442054080e-02, 5.294118941690296e-02, 5.323892352462400e-02, 5.294118941690309e-02, 5.323892352462412e-02, 5.119627263882060e-02, 5.295769111386860e-02, 1.273705506794615e-03, 1.265618220362135e-03, 1.669757756282724e-03, 1.797001652157115e-03, 5.705391906710802e-02, 6.990236485993327e-02, 4.499839525113057e-03, 5.926276547543473e-03, 4.499839525113036e-03, 5.926276547543445e-03, 2.497754874088718e-04, 2.552847431795508e-04, 2.536319423824339e-05, 2.043324343089046e-05, 1.240668093239415e-04, 1.357933569743757e-04, 4.699781685995163e-03, 5.533838370970720e-03, 1.452706480504158e-04, 2.599392042504873e-04, 1.452706480504128e-04, 2.599392042504746e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
