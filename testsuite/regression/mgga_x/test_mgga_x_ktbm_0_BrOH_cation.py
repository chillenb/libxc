
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_0_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.081098972078031e+01, -2.081108709606002e+01, -2.081152209128400e+01, -2.194920032248191e+01, -2.194978679320474e+01, -2.308887169618613e+01, -3.515923538508919e+00, -3.878647807606622e+00, -3.878335109774476e+00, -3.878813809828186e+00, -3.878356869787695e+00, -3.515816016500716e+00, -6.046536116592642e-01, -6.784893707303086e-01, -7.297356047903640e-01, -6.651263720983572e-01, -5.956050342545320e-01, -7.364540367051836e-01, -1.781821126646779e-01, -1.810142956835308e-01, -7.897481899548766e-01, -1.438054426012078e-01, -1.845162171556111e-01, -1.834736052333653e-01, -6.485899427581258e-03, -6.692014286704765e-03, -3.683899076294903e-02, -3.739320609841914e-03, -5.219682394212799e-03, -5.219682394212800e-03, -5.578282547191264e+00, -5.578385598586017e+00, -5.578280523493366e+00, -5.578372025680775e+00, -5.378676218951633e+00, -5.378853925420202e+00, -2.191191330450982e+00, -2.205711134777760e+00, -2.180543665672957e+00, -2.193485355756129e+00, -1.990455182337777e+00, -2.204309917900750e+00, -5.978129154148992e-01, -6.878839139163573e-01, -6.037307800628042e-01, -6.207449088338309e-01, -6.111902365008800e-01, -6.543827533111635e-01, -9.884438380465509e-02, -1.781374768210352e-01, -9.147301753944954e-02, -2.100248689884790e+00, -1.169219950424779e-01, -1.169219950424779e-01, -2.824592391718500e-03, -3.655407150168784e-03, -2.799390320063513e-03, -5.934314277140020e-02, -3.516525587553238e-03, -3.516525587553240e-03, -6.214837961132968e-01, -6.217256102233299e-01, -6.007853974612710e-01, -6.128876907588993e-01, -6.025151994746967e-01, -6.120301821041262e-01, -6.051538512148230e-01, -4.993261355378709e-01, -5.262816139987970e-01, -5.808412005913060e-01, -5.724909901282129e-01, -5.397921540821008e-01, -6.861512171633339e-01, -2.436579549005009e-01, -2.672525982867441e-01, -3.513347709841184e-01, -3.392396257598966e-01, -3.051964948573337e-01, -5.050719138434752e-01, -3.418300731518932e-02, -4.918850489107141e-02, -3.730982500746556e-01, -7.832890881079849e-02, -7.832890881079849e-02, -8.713418158228247e-03, -9.769929595427004e-04, -1.958656676649956e-03, -6.829308038264321e-02, -3.229311320475347e-03, -3.114904297591189e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_0_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.986293717308671e+01, -2.986304652874681e+01, -2.986305535271163e+01, -2.986313234343634e+01, -2.986344432462639e+01, -2.986368658575818e+01, -2.986211080017556e+01, -2.744806404248502e+01, -2.986300766819197e+01, -2.744892348018710e+01, -2.744913919220025e+01, -2.744892348018710e+01, -4.297399316621840e+00, -4.462749621476684e+00, -4.297375415332610e+00, -4.297351945472841e+00, -4.296905125510290e+00, -4.296868834804795e+00, -4.297435381227050e+00, -4.297494737679321e+00, -4.296764156296503e+00, -4.297165340943246e+00, -4.461758410654112e+00, -4.297165340943246e+00, -7.691141561800724e-01, -7.741253785239426e-01, -7.673848102241793e-01, -8.735613169439695e-01, -8.620383105552772e-01, -8.576237825007575e-01, -8.620674984976860e-01, -7.528768422249026e-01, -7.814265014074707e-01, -7.199884866987339e-01, -8.791262922927278e-01, -8.423759630756540e-01, -1.936661220893091e-01, -2.360975467370781e-01, -1.956907977585459e-01, -2.392748621424741e-01, -1.044734523355858e+00, -9.034246809556720e-01, -1.810183259738516e-01, -1.831740543850312e-01, -2.395018160806368e-01, -1.326340114897052e-01, -2.395018160806369e-01, -1.234590619591214e-01, -8.166429754458403e-03, -8.677780819943120e-03, -8.350022441570765e-03, -9.167140833629888e-03, -4.608279423386271e-02, -5.022886277152128e-02, -4.909116595952874e-03, -4.827316880507776e-03, -7.285259180602334e-03, -4.145797370281982e-03, -7.285259180602335e-03, -4.145797370281985e-03, -6.841566392990959e+00, -6.839946177290922e+00, -6.845821136721411e+00, -6.844056978380987e+00, -6.841851689736544e+00, -6.840122734969604e+00, -6.845500521587060e+00, -6.843855247681051e+00, -7.312080280170123e+00, -6.842004322249515e+00, -6.843708275942161e+00, -7.310293583933920e+00, -2.440935444166198e+00, -2.440200599003054e+00, -2.453102685751896e+00, -2.452048681609803e+00, -2.431519702193819e+00, -2.433428066423810e+00, -2.441506812278926e+00, -2.443723446267868e+00, -2.455157859054653e+00, -2.450534928682928e+00, -2.455157859054653e+00, -2.447302269286054e+00, -7.295165098645763e-01, -7.979517128719572e-01, -8.210630242923334e-01, -8.235205514810984e-01, -6.579604839249705e-01, -6.814396375412963e-01, -6.877911891708489e-01, -7.151555207680009e-01, -7.657220742294767e-01, -7.917580341543057e-01, -7.657220742294768e-01, -7.221068152076741e-01, -1.266596042344459e-01, -1.278591347702849e-01, -2.032561703995544e-01, -2.386796517705612e-01, -1.146528633591762e-01, -1.207622203985739e-01, -2.405430306540967e+00, -2.404454549369429e+00, -1.446048461414272e-01, -1.527631151460698e-01, -1.446048461414273e-01, -1.527631151460700e-01, -3.594617600235933e-03, -3.827296532089964e-03, -4.723437052146917e-03, -4.794927069818106e-03, -3.532052583531297e-03, -3.740564505029946e-03, -7.909050904726099e-02, -7.589862306299391e-02, -3.607466260699759e-03, -4.954175414703620e-03, -3.607466260699761e-03, -4.954175414703627e-03, -8.074044316506539e-01, -8.109281204714834e-01, -7.893587668420705e-01, -7.929937116233817e-01, -8.225524895629988e-01, -8.257023252618483e-01, -8.234550708609762e-01, -8.044081921678092e-01, -8.230149968952094e-01, -8.261527177697751e-01, -8.230149968952093e-01, -8.018088234119128e-01, -7.838744598690843e-01, -7.869169598096429e-01, -6.062761407629508e-01, -6.580799210139645e-01, -6.442672528012757e-01, -7.119529314232730e-01, -6.948587796562100e-01, -6.976731412027032e-01, -6.677076968888077e-01, -6.706897594343353e-01, -6.677076968888077e-01, -7.344945295307055e-01, -8.489909050338278e-01, -9.327378256441944e-01, -2.950206336456221e-01, -2.965376009397148e-01, -2.981671080205854e-01, -3.477337995188154e-01, -4.286437238177120e-01, -4.352166454236945e-01, -3.859062391475525e-01, -3.855406533558679e-01, -3.859062391475526e-01, -3.574667499835594e-01, -5.579245461249699e-01, -5.612621872940838e-01, -4.522509044566361e-02, -4.553327401959278e-02, -6.277175378027657e-02, -6.486928850906427e-02, -4.112147324348010e-01, -4.162574641120089e-01, -9.810316482457176e-02, -1.035189905713469e-01, -9.810316482457172e-02, -1.035189905713467e-01, -1.139732357930306e-02, -1.181016105330398e-02, -1.270782254160196e-03, -1.273686713072249e-03, -2.523844743261409e-03, -2.684290937427867e-03, -8.849086662065823e-02, -8.962734629619629e-02, -3.417032674243581e-03, -4.540872840965387e-03, -3.417032674243577e-03, -4.431618796609331e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_0_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.827248688484673e-08, 0.000000000000000e+00, -2.827390222416044e-08, -2.827230789517243e-08, 0.000000000000000e+00, -2.827377190819479e-08, -2.827159326068205e-08, 0.000000000000000e+00, -2.827278730762348e-08, -2.827363052864055e-08, 0.000000000000000e+00, -2.928095404098381e-08, -2.827239211713591e-08, 0.000000000000000e+00, -2.927967976884040e-08, -2.927780464417760e-08, 0.000000000000000e+00, -2.927967976884040e-08, -2.740920264946470e-05, 0.000000000000000e+00, -2.691732675781715e-05, -2.741500567188333e-05, 0.000000000000000e+00, -2.740955714532996e-05, -2.752821793304512e-05, 0.000000000000000e+00, -2.754730544121654e-05, -2.747780584900302e-05, 0.000000000000000e+00, -2.747642423390845e-05, -2.741383746982744e-05, 0.000000000000000e+00, -2.757627561370136e-05, -2.692620541973429e-05, 0.000000000000000e+00, -2.757627561370136e-05, -1.000134362081704e-02, 0.000000000000000e+00, -1.016577471945059e-02, -9.969723243177476e-03, 0.000000000000000e+00, -9.428975617824397e-03, -8.534029614539836e-03, 0.000000000000000e+00, -8.501556045613447e-03, -8.955034510762893e-03, 0.000000000000000e+00, -9.969901187792455e-03, -1.006289427353035e-02, 0.000000000000000e+00, -9.351153781476825e-03, -9.388076615305146e-03, 0.000000000000000e+00, -8.304429092344528e-03, -1.262215651160421e+00, 0.000000000000000e+00, -1.178040146872399e+00, -1.273525777139239e+00, 0.000000000000000e+00, -1.203797709918564e+00, -2.123087095364425e-03, 0.000000000000000e+00, -2.947411316677053e-03, -7.085208871930367e-01, 0.000000000000000e+00, -8.332294274399457e-01, -9.078509592195588e-01, 0.000000000000000e+00, -7.230928099340338e-01, -9.078509592195584e-01, 0.000000000000000e+00, -1.150964616599130e+00, -1.686012464688688e+02, 0.000000000000000e+00, -1.497410460154609e+02, -3.152448023708391e+02, 0.000000000000000e+00, -1.373804183379171e+02, -7.598148776604682e+00, 0.000000000000000e+00, -3.713157873080524e+00, -3.973588454530858e+02, 0.000000000000000e+00, -4.130145281829116e+02, -2.061725312976299e+02, 0.000000000000000e+00, -8.304776845858820e+02, -2.061725312976299e+02, 0.000000000000000e+00, -8.304776845858821e+02, -8.701071461622424e-06, 0.000000000000000e+00, -8.709456153851663e-06, -8.701376658541903e-06, 0.000000000000000e+00, -8.709754259453414e-06, -8.701151607735231e-06, 0.000000000000000e+00, -8.709512186086924e-06, -8.701409576558618e-06, 0.000000000000000e+00, -8.709779016369655e-06, -8.460841301001366e-06, 0.000000000000000e+00, -8.709603458369425e-06, -8.701187561969706e-06, 0.000000000000000e+00, -8.469009449564450e-06, -2.313830458492629e-04, 0.000000000000000e+00, -2.322906257720299e-04, -2.329253014889339e-04, 0.000000000000000e+00, -2.337588046308993e-04, -2.293265283281302e-04, 0.000000000000000e+00, -2.308321385919699e-04, -2.310508524527110e-04, 0.000000000000000e+00, -2.324670511109895e-04, -2.336229868587099e-04, 0.000000000000000e+00, -2.327876062951329e-04, -2.336229868587099e-04, 0.000000000000000e+00, -2.333816236141530e-04, -4.368762644995734e-02, 0.000000000000000e+00, -4.283685679498449e-02, -3.720767955103679e-02, 0.000000000000000e+00, -3.737405606568017e-02, -5.101834655009210e-02, 0.000000000000000e+00, -4.972021817667104e-02, -5.377455300991858e-02, 0.000000000000000e+00, -4.985166377235876e-02, -3.981313349762561e-02, 0.000000000000000e+00, -4.474188058552676e-02, -3.981313349762564e-02, 0.000000000000000e+00, -4.648213987528509e-02, -8.836976784651911e-01, 0.000000000000000e+00, -8.729347323404253e-01, -6.650829299404228e-01, 0.000000000000000e+00, -5.150079470808532e-01, -9.850679171253673e-01, 0.000000000000000e+00, -9.748952755259002e-01, -4.076145043513469e-04, 0.000000000000000e+00, -4.084457058497082e-04, -9.955587108121413e-01, 0.000000000000000e+00, -1.283859988033595e+00, -9.955587108121414e-01, 0.000000000000000e+00, -1.283859988033596e+00, -1.214610025542239e+03, 0.000000000000000e+00, -5.342593553131881e+02, -4.179400268495386e+02, 0.000000000000000e+00, -3.807502931108324e+02, -2.007765660328276e+03, 0.000000000000000e+00, -1.876541653862062e+03, -1.841366938789204e+00, 0.000000000000000e+00, -3.469497247042530e+00, -8.341175290780167e+02, 0.000000000000000e+00, -7.906252856990999e+02, -8.341175290780152e+02, 0.000000000000000e+00, -7.906252856990982e+02, -5.649554484624884e-02, 0.000000000000000e+00, -5.565576542812525e-02, -5.679347409501448e-02, 0.000000000000000e+00, -5.596171895528462e-02, -5.588543504702076e-02, 0.000000000000000e+00, -5.507901047614591e-02, -5.593247138730157e-02, 0.000000000000000e+00, -5.579137283877058e-02, -5.591055010434612e-02, 0.000000000000000e+00, -5.510064623068011e-02, -5.591055010434612e-02, 0.000000000000000e+00, -5.583714079169479e-02, -6.284837740804987e-02, 0.000000000000000e+00, -6.205818629337070e-02, -8.119352420943157e-02, 0.000000000000000e+00, -7.775017085079750e-02, -7.891352685031108e-02, 0.000000000000000e+00, -7.499371369560644e-02, -7.394468339226364e-02, 0.000000000000000e+00, -7.300628197138306e-02, -7.677263903539314e-02, 0.000000000000000e+00, -7.584053445981061e-02, -7.677263903539314e-02, 0.000000000000000e+00, -7.305334602756595e-02, -2.970421082831646e-02, 0.000000000000000e+00, -2.883409916366924e-02, -3.979678265631381e-01, 0.000000000000000e+00, -3.961522858739964e-01, -3.633460600416111e-01, 0.000000000000000e+00, -3.304525489321170e-01, -2.315282529791607e-01, 0.000000000000000e+00, -2.264795821655132e-01, -2.985874864122731e-01, 0.000000000000000e+00, -3.013544994385203e-01, -2.985874864122734e-01, 0.000000000000000e+00, -3.130178337469162e-01, -9.782560669782257e-02, 0.000000000000000e+00, -9.811143096895389e-02, -8.087954215984347e+00, 0.000000000000000e+00, -7.900454416501217e+00, -2.341353949786721e+00, 0.000000000000000e+00, -2.274334604800660e+00, -3.236421947652934e-01, 0.000000000000000e+00, -3.435565705846160e-01, -1.629432244890745e+00, 0.000000000000000e+00, -1.811168126621266e+00, -1.629432244890746e+00, 0.000000000000000e+00, -1.811168126621268e+00, -1.155437168041283e+02, 0.000000000000000e+00, -1.068564816592250e+02, -6.180227577859151e+03, 0.000000000000000e+00, -6.138535816835288e+03, -5.023566937134757e+03, 0.000000000000000e+00, -4.571389151877802e+03, -3.150598397588471e+00, 0.000000000000000e+00, -3.311496421507480e+00, -1.494419060233737e+03, 0.000000000000000e+00, -9.576131859978304e+02, -1.494419060233741e+03, 0.000000000000000e+00, -1.931999514253868e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_0_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.240020050338098e-03, 1.240169039642823e-03, 1.240037678762136e-03, 1.240181814372904e-03, 1.240085168092322e-03, 1.240252325648758e-03, 1.239887733599535e-03, 1.666736891596516e-03, 1.240031572894813e-03, 1.666731717359119e-03, 1.666699860764961e-03, 1.666731717359119e-03, 8.062988251559190e-03, 1.943563850880874e-03, 8.064153563818859e-03, 8.062892821602450e-03, 8.086781448153144e-03, 8.090734091112129e-03, 8.077886391202792e-03, 8.077804116819003e-03, 8.061682202696936e-03, 8.097985711067991e-03, 1.941388855999545e-03, 8.097985711067991e-03, -3.389547429672678e-03, -3.208596205948351e-03, -3.439332620521446e-03, 2.374135502806363e-02, 2.044226196818183e-02, 2.002194015603666e-02, 2.152056229127601e-02, -3.734773803752844e-03, -3.064996112216925e-03, -4.230465644197502e-03, 2.412595044726925e-02, 1.842439273518664e-02, -1.411743364155830e-02, 5.711294635199451e-02, -1.438217319276291e-02, 6.100180489691162e-02, 8.768081789924609e-03, -3.192718452327694e-03, 1.461984504838541e-02, 1.793831285547370e-02, 4.548989134469367e-02, 5.597925455539355e-03, 4.548989134469358e-02, -1.707120770305979e-03, 2.670378598733060e-04, 2.846302400426505e-04, -1.419118196102169e-06, 3.079361973402773e-04, -1.161662452225179e-04, 1.422558461289714e-03, 1.365483246880607e-04, 1.349489813164484e-04, 2.317459519846868e-04, 1.718938704122984e-04, 2.317459519846868e-04, 1.718938704122975e-04, 7.000755488770349e-03, 7.002449845950553e-03, 7.002159270796580e-03, 7.003807589880900e-03, 7.000865419306584e-03, 7.002519582466366e-03, 7.002068311475867e-03, 7.003751381590852e-03, 5.864649787226362e-03, 7.003129640630973e-03, 7.001452883226163e-03, 5.865924364650865e-03, 1.277802795467654e-02, 1.281266266684977e-02, 1.301312187936478e-02, 1.303944487665630e-02, 1.254849141411786e-02, 1.264952790088514e-02, 1.276935242031496e-02, 1.286814070932625e-02, 1.307299268310026e-02, 1.797287396303163e-03, 1.307299268310026e-02, 1.295958305108486e-02, 5.588500454886441e-02, 2.902763610604343e-02, 5.605068459652962e-02, 5.619667906574467e-02, 5.352504487344323e-02, 5.559575767882252e-02, 5.850968321906726e-02, 5.834414274409075e-02, 5.559775091103893e-02, 2.991244867912199e-02, 5.559775091103890e-02, 5.700003901170621e-02, 5.962013254335888e-03, 6.065008859723442e-03, -8.911611444993110e-03, 2.498853507012939e-02, 4.866581974104964e-03, 5.677647530731540e-03, 1.767720646584820e-02, 1.768734762139297e-02, 1.026476522171434e-02, 1.587639854626923e-02, 1.026476522171438e-02, 1.587639854626916e-02, -5.798662013397316e-08, 8.697689707557234e-05, 1.279259772038284e-04, 1.219129299115034e-04, 2.570222342115169e-04, 2.853653976552109e-04, 2.872524211712697e-03, -6.577270024340382e-04, 1.137199392688325e-04, 2.793998922868710e-04, 1.137199392688315e-04, 2.793998922868729e-04, 6.387938793754742e-02, 6.365164152729960e-02, 6.358553888337933e-02, 6.336734458016939e-02, 5.971753816419264e-02, 5.962034131459670e-02, 6.059399161035136e-02, 6.355716330546675e-02, 6.016037919517352e-02, 6.004549196656970e-02, 6.016037919517352e-02, 6.351657212316610e-02, 6.554991871762668e-02, 6.535593726367178e-02, 6.330120126224530e-02, 2.548073487490695e-02, 6.590049394402225e-02, 3.919716911023324e-02, 6.666589959440795e-02, 6.647333248849811e-02, 6.647282763457779e-02, 6.631271613702663e-02, 6.647282763457779e-02, 4.540361689952207e-02, 5.249305133334434e-02, 3.752693749219475e-02, 3.728722083968675e-02, 3.772004182486705e-02, -9.970601982266639e-03, 5.204130005487544e-02, 7.902548185226827e-03, 7.097478374944333e-02, 6.549103186576827e-02, 6.592297779177171e-02, 6.549103186576839e-02, -2.349681152790468e-03, 6.273370990091570e-02, 6.353974437734874e-02, -1.155463637663325e-04, -1.155778425602453e-04, 1.776087768325479e-03, 1.911308465726604e-03, 8.363587319589984e-02, 8.894324876760677e-02, 5.015681303129110e-03, 6.645011732288354e-03, 5.015681303129125e-03, 6.645011732288257e-03, -1.680372443986533e-06, -1.842869669437168e-06, 3.682077010872185e-05, 3.682372033562669e-05, -8.343465695554687e-08, -1.063499103728372e-07, -1.383317676639421e-03, -1.619277641094113e-03, 1.731752431339169e-04, 2.605433052864923e-04, 1.731752431339153e-04, -6.339105124566580e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
