
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ms2_rev_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2_rev", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.244860712519050e+01, -2.244865260447291e+01, -2.244891562420208e+01, -2.244817021914620e+01, -2.244863059998809e+01, -2.244863059998809e+01, -3.371484797418909e+00, -3.371489837234670e+00, -3.371866547724210e+00, -3.373095949453967e+00, -3.371495234127776e+00, -3.371495234127776e+00, -6.586479453271203e-01, -6.584166860404815e-01, -6.540008544278030e-01, -6.594282477474029e-01, -6.585626605712908e-01, -6.585626605712908e-01, -2.014111077650759e-01, -2.023666422979938e-01, -7.680331530322163e-01, -1.565386230714708e-01, -2.015831283026829e-01, -2.015831283026829e-01, -1.418472931866441e-02, -1.485472014853008e-02, -5.901428115912124e-02, -6.816575533167497e-03, -1.469998446367277e-02, -1.469998446367277e-02, -5.446492063386235e+00, -5.446939308010089e+00, -5.446542313281406e+00, -5.446889988041781e+00, -5.446714973409613e+00, -5.446714973409613e+00, -2.106444031010746e+00, -2.125348856118000e+00, -2.106939157990585e+00, -2.121540117450016e+00, -2.118879062927437e+00, -2.118879062927437e+00, -5.890913649716286e-01, -6.305164321435514e-01, -5.394415255225060e-01, -5.535602834491317e-01, -6.192025676616042e-01, -6.192025676616042e-01, -1.233394673445812e-01, -2.121672093698994e-01, -1.212609922814465e-01, -1.830437056499434e+00, -1.376151386484812e-01, -1.376151386484812e-01, -6.575974247201548e-03, -7.514351246546873e-03, -5.632188892602874e-03, -8.035502402585305e-02, -6.846707311001093e-03, -6.846707311001093e-03, -6.193092745692168e-01, -6.179995112034959e-01, -6.184718308641427e-01, -6.188328210110595e-01, -6.186517644848235e-01, -6.186517644848235e-01, -5.981220076577584e-01, -5.366830847495739e-01, -5.543876584076520e-01, -5.708453437325282e-01, -5.622903140109430e-01, -5.622903140109430e-01, -6.487753712305661e-01, -2.627971818364264e-01, -2.985533971706379e-01, -3.537626477244170e-01, -3.270880841931141e-01, -3.270880841931141e-01, -4.721423454324519e-01, -5.495077236729347e-02, -7.316321109230438e-02, -3.296205762603691e-01, -1.014451700298844e-01, -1.014451700298844e-01, -1.661763850993816e-02, -2.058258124932701e-03, -3.909474422071806e-03, -9.671129557890867e-02, -5.819180878580769e-03, -5.819180878580760e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ms2_rev_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2_rev", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.878812648131035e+01, -2.878821763616640e+01, -2.878873577642274e+01, -2.878724777311346e+01, -2.878817353273149e+01, -2.878817353273149e+01, -4.214728046766139e+00, -4.214945480996896e+00, -4.221899511324922e+00, -4.221577586716026e+00, -4.214795636074597e+00, -4.214795636074597e+00, -7.829082317884629e-01, -7.816805530195847e-01, -7.511796043791616e-01, -7.595996771109688e-01, -7.824649472158556e-01, -7.824649472158556e-01, -1.783891087241286e-01, -1.828856731823436e-01, -9.289628065496688e-01, -1.661326418522272e-01, -1.796588353265778e-01, -1.796588353265778e-01, -1.883279254391479e-02, -1.971408419427989e-02, -7.494827980173946e-02, -9.081280873354088e-03, -1.950889992306813e-02, -1.950889992306813e-02, -7.080532667777704e+00, -7.082427444907716e+00, -7.080757493555779e+00, -7.082228890380312e+00, -7.081462602465681e+00, -7.081462602465681e+00, -2.317512193987930e+00, -2.376779154562937e+00, -2.322037936193524e+00, -2.371811297469069e+00, -2.353525956284862e+00, -2.353525956284862e+00, -7.570910355087803e-01, -8.848046594032052e-01, -7.025494671676281e-01, -7.850719768538096e-01, -7.944984983459229e-01, -7.944984983459229e-01, -1.400046119423048e-01, -1.755378127327596e-01, -1.368956016029581e-01, -2.631632802140392e+00, -1.490812331864248e-01, -1.490812331864248e-01, -8.761042786888787e-03, -1.000879466464466e-02, -7.502219045870321e-03, -9.786348269505156e-02, -9.119436966071792e-03, -9.119436966071792e-03, -8.235953671776892e-01, -8.153869098325447e-01, -8.183030606347131e-01, -8.205756522721849e-01, -8.194366218076025e-01, -8.194366218076025e-01, -7.993540690072276e-01, -6.600801160731847e-01, -6.975226620841000e-01, -7.352318320372810e-01, -7.154223104322660e-01, -7.154223104322660e-01, -9.304044276328044e-01, -2.439242225167536e-01, -2.813724425382862e-01, -4.164356304306719e-01, -3.414067815735866e-01, -3.414067815735867e-01, -5.511438309858079e-01, -7.048922616644039e-02, -9.102371176599532e-02, -4.105387096606306e-01, -1.172659056432541e-01, -1.172659056432541e-01, -2.204511676784634e-02, -2.744065488906381e-03, -5.210860526059577e-03, -1.116986228119199e-01, -7.751854759798447e-03, -7.751854759798435e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms2_rev_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2_rev", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.700579248607617e-09, -3.700499780095423e-09, -3.699482713751197e-09, -3.700744014512834e-09, -3.700543561185066e-09, -3.700543561185066e-09, -7.669109258206626e-06, -7.675961560061870e-06, -7.893744762983183e-06, -7.916179937172479e-06, -7.670187506122411e-06, -7.670187506122411e-06, -4.249822138960063e-03, -4.251181186345656e-03, -4.240542543728422e-03, -4.206306866479717e-03, -4.250485879239822e-03, -4.250485879239822e-03, -1.592674667734224e+00, -1.550100905514771e+00, -2.068131025430222e-03, -6.594925411807503e-01, -1.580873446761483e+00, -1.580873446761483e+00, -3.580506531656482e+00, -3.589640379921649e+00, -1.490627366755196e+00, -2.536292691317326e+00, -3.729408323536578e+00, -3.729408323536577e+00, -7.504073428947921e-07, -7.500147483371644e-07, -7.500540158553312e-07, -7.497676715470867e-07, -7.506274532228836e-07, -7.506274532228836e-07, -1.218924983662000e-04, -1.057688927855257e-04, -1.148063509323056e-04, -1.013972738812640e-04, -1.196664638006175e-04, -1.196664638006175e-04, -2.721682802377337e-02, -2.110679018566660e-02, -2.669621408065142e-02, -2.720276122935782e-02, -2.084583734403056e-02, -2.084583734403056e-02, -7.973712607422921e-01, -9.462639565853997e-01, -9.136708471325777e-01, -2.064989652415493e-04, -9.273109802759545e-01, -9.273109802759545e-01, -2.690634068688111e+00, -2.696111419802933e+00, -7.716852566653441e+00, -1.440179071431304e+00, -3.982287186866042e+00, -3.982287186866039e+00, -7.310087761789697e-03, -7.266049145012325e-03, -7.282932866576667e-03, -7.294902102719097e-03, -7.290388792564255e-03, -7.290388792564255e-03, -1.179596995908728e-02, -1.388210252482434e-02, -1.376197965826595e-02, -1.325911915501495e-02, -1.395513103796030e-02, -1.395513103796031e-02, -1.825559843788833e-02, -4.281871114977820e-01, -3.539190797872726e-01, -1.429939860105073e-01, -2.597626214687376e-01, -2.597626214687376e-01, -6.292317017358801e-02, -1.266313168668012e+00, -1.251633620456185e+00, -2.051270703151401e-01, -1.380850685532985e+00, -1.380850685532987e+00, -2.688965537508205e+00, -4.637847943733290e+00, -3.993212158399128e+00, -1.686592088162919e+00, -5.815893942724657e+00, -5.815893942724642e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms2_rev_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2_rev", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms2_rev_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2_rev", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.865433160538545e-04, 1.865351928686167e-04, 1.864024242313479e-04, 1.865292047298095e-04, 1.865399438948549e-04, 1.865399438948549e-04, 1.495087197994240e-03, 1.499680600343202e-03, 1.646845443634311e-03, 1.667907679823052e-03, 1.495869514714658e-03, 1.495869514714658e-03, 2.772575282451391e-03, 2.756385411479552e-03, 2.401844852348833e-03, 2.831769542161342e-03, 2.767299143024666e-03, 2.767299143024666e-03, 1.207883468640101e-01, 1.210747568091764e-01, 5.213475262628331e-04, 7.634542027430438e-04, 1.208438342483810e-01, 1.208438342483810e-01, 1.720968901548080e-08, 1.289186750296395e-08, 2.477025972315543e-06, 9.578521564651841e-16, 1.993658723199789e-08, 1.993658723199701e-08, 5.455358917749054e-05, 5.392777410895126e-05, 5.379525550060751e-05, 5.335058262933197e-05, 5.516671578521478e-05, 5.516671578521478e-05, 1.083835276293324e-02, 9.270671832033273e-03, 9.950505975508098e-03, 8.630253848434946e-03, 1.090572213362843e-02, 1.090572213362843e-02, 6.687210364991478e-02, 6.644590354986747e-02, 4.881237417521773e-02, 5.908602455767649e-02, 5.661604151189955e-02, 5.661604151189955e-02, 2.936052528458573e-04, 7.111554688138719e-02, 3.716846997364336e-04, 1.601655698994423e-02, 2.930354455882158e-03, 2.930354455882158e-03, 8.372992382082395e-15, 6.862863586870706e-15, 1.121709558470181e-13, 2.673978045542568e-06, 2.937957707635036e-15, 2.937957701846235e-15, 9.776718460219847e-03, 9.432173443937113e-03, 9.558448514159502e-03, 9.652857122866352e-03, 9.610430807001236e-03, 9.610430807001235e-03, 2.059810663643177e-02, 1.313237301500216e-02, 1.635399612943705e-02, 1.865753825611112e-02, 1.851481483951072e-02, 1.851481483951076e-02, 6.540764447947950e-02, 6.368267300458925e-02, 9.187796749219500e-02, 6.812829462235392e-02, 9.676716143059916e-02, 9.676716143059913e-02, 7.368255316765279e-02, 4.548768576025623e-06, 6.668961347853468e-06, 8.458873388767045e-02, 3.039217379683727e-04, 3.039217379683673e-04, 4.117861487803680e-12, 2.826063571129335e-20, 2.249160894628011e-15, 2.654722581237392e-04, 1.461753285760839e-15, 1.461753287939236e-15]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
