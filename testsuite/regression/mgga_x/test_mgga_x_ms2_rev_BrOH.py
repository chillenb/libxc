
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ms2_rev_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2_rev", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.064107711188688e+01, -2.064118361581570e+01, -2.064169043900749e+01, -2.063995159765254e+01, -2.064113293899958e+01, -2.064113293899958e+01, -3.215019949717818e+00, -3.215042692403449e+00, -3.215838561211630e+00, -3.215788035751108e+00, -3.215041556558090e+00, -3.771771769394601e+00, -6.058608829643461e-01, -7.525337979865000e-01, -7.395188695289803e-01, -7.421538234619466e-01, -7.528480142422166e-01, -7.528480142422166e-01, -2.082646293405088e-01, -2.103671927184477e-01, -7.230836639106631e-01, -1.649382036094402e-01, -2.089051746894500e-01, -2.089051746894500e-01, -1.418539766857706e-02, -1.485567698346644e-02, -5.923192235065469e-02, -6.817435900557553e-03, -1.470081590669946e-02, -1.470081590669946e-02, -5.446942541000473e+00, -5.447384660858331e+00, -5.446986448094143e+00, -5.195560363626416e+00, -5.447170653952236e+00, -5.447170653952236e+00, -1.797916926554939e+00, -1.812447088241932e+00, -1.791981065167494e+00, -1.803340910164027e+00, -1.815465974012517e+00, -2.153540501812857e+00, -6.197249224890059e-01, -6.636069928266848e-01, -5.929051729810066e-01, -6.107237015152379e-01, -6.401476603529058e-01, -5.611944656227251e-01, -8.760303874958250e-02, -2.179324207281551e-01, -8.648179496716678e-02, -2.035760741655071e+00, -1.412351465584675e-01, -1.412351465584675e-01, -4.250212918703910e-03, -7.515299031634079e-03, -5.632504921660906e-03, -5.450705622686899e-02, -4.425752537888823e-03, -6.847812377388073e-03, -6.206601171003563e-01, -6.192856554478439e-01, -6.130952089302925e-01, -6.201602289945443e-01, -6.199710931013436e-01, -6.199710931013436e-01, -6.014194103127580e-01, -5.381072625892830e-01, -5.564255542658167e-01, -5.734403052059202e-01, -5.647753210646609e-01, -5.108149685537929e-01, -6.984845934896250e-01, -2.092792997718192e-01, -3.087758367826100e-01, -3.227843909437788e-01, -3.429473793831160e-01, -3.429473793831159e-01, -4.198088845136586e-01, -5.505218068952240e-02, -7.363785480824052e-02, -3.589459470706741e-01, -7.110082335532063e-02, -1.030619387760308e-01, -1.663006266244504e-02, -2.058299249183375e-03, -3.909530117780207e-03, -9.833872103825904e-02, -5.820035025255119e-03, -5.820035025255111e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ms2_rev_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2_rev", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.100624638424907e+01, -3.100636047547950e+01, -3.100692112386036e+01, -3.100505501634913e+01, -3.100630606930357e+01, -3.100630606930357e+01, -4.402332184396049e+00, -4.402310624235881e+00, -4.401780774544675e+00, -4.402346583534788e+00, -4.402347148371114e+00, -4.619061030435780e+00, -8.222388453531876e-01, -8.772053686871396e-01, -8.550600687677731e-01, -8.611005257682458e-01, -8.777618058482552e-01, -8.777618058482552e-01, -2.406183749880938e-01, -2.436594226220576e-01, -9.727470719923286e-01, -1.890257156873552e-01, -2.415293305186082e-01, -2.415293305186082e-01, -1.883563049012007e-02, -1.971810646573582e-02, -7.582359819405528e-02, -9.084719516735435e-03, -1.951242642623453e-02, -1.951242642623447e-02, -7.082273704037543e+00, -7.084131331863266e+00, -7.082472772132371e+00, -7.481984947897658e+00, -7.083213916879407e+00, -7.083213916879407e+00, -2.473786544980156e+00, -2.493636821325461e+00, -2.465446892067063e+00, -2.481287580040758e+00, -2.497622285269590e+00, -2.610736607606174e+00, -7.776479600523072e-01, -8.536532044776667e-01, -7.342396380850588e-01, -7.719159009683193e-01, -8.104517578862437e-01, -7.850462088091638e-01, -1.168506517346680e-01, -2.472219454912049e-01, -1.153603391812584e-01, -2.579592375830916e+00, -1.626894559990789e-01, -1.626894559990789e-01, -5.666950584061569e-03, -1.001258276306928e-02, -7.503484073048568e-03, -7.268064029738579e-02, -5.901003416056833e-03, -9.123852601644675e-03, -8.222501186741765e-01, -8.154169742115998e-01, -8.289508993839484e-01, -8.197433514391792e-01, -8.187952497298870e-01, -8.187952497298870e-01, -7.949952568346200e-01, -6.728286998386778e-01, -7.076993590040911e-01, -7.407443847191796e-01, -7.238191824460821e-01, -7.678163251487589e-01, -8.923202304669042e-01, -2.821388656801388e-01, -3.613342895410269e-01, -4.441251152836613e-01, -4.093236138382317e-01, -4.093236138382317e-01, -5.726491821639071e-01, -7.092042315527140e-02, -9.288274918479050e-02, -4.404769338071061e-01, -9.482917470490919e-02, -1.233518947191763e-01, -2.209457027572731e-02, -2.744229966775643e-03, -5.211083448493461e-03, -1.177220139878504e-01, -7.755268129035838e-03, -7.755268129035806e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms2_rev_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2_rev", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.713349518925516e-08, -1.713350130606814e-08, -1.713338951408029e-08, -1.713330711384997e-08, -1.713349935097538e-08, -1.713349935097538e-08, -7.924719212354008e-06, -7.924251284526033e-06, -7.908592818704014e-06, -7.912230986478049e-06, -7.924438637230971e-06, -2.890556826541331e-06, -5.477368952538810e-03, -1.567284548119022e-03, -1.606373177072570e-03, -1.616960596536385e-03, -1.566327391269224e-03, -1.566327391269224e-03, -2.541157388194772e-01, -2.479655462953227e-01, -2.596012292381443e-03, -3.138039200863492e-01, -2.521605959011074e-01, -2.521605959011074e-01, -3.423021424423916e+00, -3.394337741042419e+00, -1.089464388860763e+00, -1.221181912777365e+00, -3.550159968649586e+00, -3.550159968655470e+00, -7.256621148276193e-07, -7.255664324276823e-07, -7.256542159974351e-07, -4.547999713357259e-06, -7.256107900121542e-07, -7.256107900121542e-07, -7.988624255370336e-05, -7.793035204860939e-05, -8.065305457421292e-05, -7.914948333983553e-05, -7.754244274339840e-05, -2.660898093523126e-05, -4.138992963234585e-03, -3.254535978626993e-03, -4.834698196707652e-03, -4.435104276761736e-03, -3.682722978460636e-03, -1.218758693616836e-02, -1.179995935626246e+01, -1.678836850433115e-01, -1.242447272011377e+01, -3.604974768594774e-05, -5.248034821270711e-01, -5.248034821270711e-01, -2.129032805083146e+06, -1.540620260396530e+00, -6.054248940446746e+00, -7.870970456326411e+01, -1.810825465057669e+06, -1.898455534266168e+00, -4.384201212683974e-03, -4.398284512243935e-03, -1.416903063359515e-02, -4.389389688899924e-03, -4.391302691180321e-03, -4.391302691180321e-03, -4.962745876648595e-03, -7.241294920522351e-03, -6.491660246230845e-03, -5.865055759782092e-03, -6.175741577247106e-03, -3.981182551474456e-02, -2.629282022871802e-03, -3.729275687034755e-01, -5.630526749551631e-02, -7.726974745727563e-02, -3.972223202421642e-02, -3.972223202421636e-02, -2.689438966416637e-02, -1.040214136706326e+00, -8.510714717259762e-01, -3.538470526649606e-02, -2.719051128406215e+01, -8.852423339636665e-01, -1.338623476850415e+00, -1.706206541967890e+00, -3.352176430734828e+00, -1.063684959499435e+00, -2.669265127072407e+00, -2.669265127102882e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms2_rev_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2_rev", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.043180530265814e-03, 2.043209359785341e-03, 2.043331102061970e-03, 2.042862202132822e-03, 2.043195746955601e-03, 2.043195746955601e-03, 8.705735220046862e-04, 8.703799442810444e-04, 8.642069450198916e-04, 8.666017215546837e-04, 8.705157135395214e-04, 2.427140244043020e-18, 1.348350118244251e-03, -1.111413418473966e-17, 1.637691741538787e-17, -8.604640934442797e-17, -5.852146357889908e-17, -5.852146357889908e-17, 9.932965446026881e-17, 1.119725518209057e-16, 3.756490719058128e-04, -3.282286797789417e-16, 5.455792757810638e-17, 5.455792757810638e-17, 1.918808446149920e-17, -1.278092756322561e-16, -2.707247253146240e-16, -6.950308017328821e-18, -8.779537589718450e-17, 2.210874611181578e-17, -2.064448764752798e-18, 2.522479985527921e-19, -1.404019821297615e-19, 8.041933102155242e-03, 7.544602505508261e-20, 7.544602505508261e-20, 1.470258126538225e-03, 1.518684101937451e-03, 1.444497669314269e-03, 1.488743391952818e-03, 1.529416023937756e-03, 9.157559455228951e-18, 2.062300164728516e-17, -6.637712678400132e-18, -3.404359910411212e-17, 1.589840334518415e-17, 8.933585633202991e-18, 1.747708461588623e-02, 2.791142695101708e-05, 8.109416253656893e-17, 3.327731413209344e-05, 3.166849910136106e-18, 3.305323922228098e-16, 3.305323922228098e-16, 2.217290626543910e-11, -2.206617992512836e-17, -3.290267372078943e-17, 2.801903913730922e-06, 2.796393910245085e-11, 2.727596669723246e-17, 5.888856523189844e-18, -1.660360160823739e-18, 3.196444434561441e-02, -4.417791200105539e-18, -5.812426371417527e-20, -5.812426371417527e-20, 4.905192147192138e-18, -2.053059078441593e-17, 2.306804496140768e-17, 1.775837889240265e-17, -1.598566392408130e-17, 7.144873506705145e-02, -9.042007275894558e-18, 1.817835781982807e-03, -9.303202835868559e-17, 8.411994912905037e-03, -2.676377388445294e-17, -5.789370152565575e-17, 6.079876766397246e-03, -3.319953791795596e-17, -2.758914145549211e-17, 1.378943435639469e-17, 2.199103265989916e-05, -1.722037783883724e-16, 6.343188720576735e-17, 5.565097272946760e-18, -1.554707310224782e-18, -1.607490109748135e-16, -1.805733323199789e-18, 3.329761281850578e-17]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
