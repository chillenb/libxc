
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_0_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.081098971604272e+01, -2.081108709159053e+01, -2.081152208527921e+01, -2.081007592342278e+01, -2.081083333661124e+01, -2.081083333661124e+01, -3.153196438349190e+00, -3.153243892364221e+00, -3.154557989485165e+00, -3.154310860791764e+00, -3.154009498339645e+00, -3.878359519891405e+00, -6.046448783551792e-01, -7.509576865213592e-01, -7.297185603108695e-01, -7.364400477495776e-01, -7.350078589921389e-01, -7.350078589921389e-01, -1.928052546669471e-01, -1.959266959440207e-01, -7.254505876708284e-01, -1.437838213625517e-01, -1.626289152488570e-01, -1.626289152488570e-01, -6.474012874403580e-03, -6.814217403203183e-03, -3.764361861654528e-02, -3.738792948351373e-03, -4.698145362540333e-03, -4.698145362540333e-03, -5.578282395688966e+00, -5.578385437137668e+00, -5.578280364863484e+00, -5.180459951284258e+00, -5.578337908194032e+00, -5.578337908194032e+00, -1.760161211853442e+00, -1.775149218286238e+00, -1.749356240071784e+00, -1.762359649679898e+00, -1.773808799120323e+00, -2.204296474247994e+00, -6.453735103528566e-01, -6.878851277595111e-01, -6.034825635519293e-01, -6.204697466132699e-01, -6.536095457741312e-01, -5.622771298114477e-01, -9.130392421497537e-02, -1.911886888114015e-01, -8.471416003045949e-02, -2.100248504135887e+00, -1.166975780279847e-01, -1.166975780279846e-01, -2.749952287792282e-03, -3.654994859537610e-03, -2.794811779862259e-03, -5.753912723604700e-02, -3.209432757118861e-03, -3.366873438567782e-03, -6.214791462454271e-01, -6.217209101049990e-01, -6.007808101232529e-01, -6.215739034331138e-01, -6.216128133321571e-01, -6.216128133321571e-01, -6.051505258830671e-01, -5.451696794872103e-01, -5.640902205639958e-01, -5.808377831567231e-01, -5.724873196419625e-01, -5.072716629452459e-01, -7.250222153936703e-01, -2.028408203035399e-01, -2.945430339406862e-01, -3.124918477548219e-01, -3.392396979848294e-01, -3.392396979848294e-01, -4.120071822754142e-01, -3.602593622313069e-02, -4.916162750898797e-02, -3.731367164566789e-01, -7.260587903352644e-02, -7.820685769371150e-02, -9.137015985742224e-03, -9.769904135600233e-04, -2.050761387708772e-03, -7.339870809941203e-02, -3.115412600831494e-03, -3.115412600831491e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_0_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.986299185985892e+01, -2.986309385619631e+01, -2.986356546779327e+01, -2.986204878119092e+01, -2.986284092633421e+01, -2.986284092633421e+01, -4.462868328985705e+00, -4.463056645261013e+00, -4.468093842808152e+00, -4.466464017222398e+00, -4.466174781278800e+00, -4.296956292684159e+00, -7.716000195958904e-01, -8.726655686340568e-01, -8.598420504855315e-01, -8.622588714063500e-01, -8.618441739226995e-01, -8.618441739226995e-01, -2.329114643223680e-01, -2.356829914695393e-01, -8.924456841859595e-01, -1.821156937706686e-01, -2.028735235495680e-01, -2.028735235495678e-01, -8.429860452157698e-03, -8.872759707584240e-03, -4.893425002205215e-02, -4.868560336852498e-03, -6.117695996768027e-03, -6.117695996768027e-03, -6.840756352703825e+00, -6.844939152614283e+00, -6.840987301147460e+00, -7.311874196164973e+00, -6.842856382182237e+00, -6.842856382182237e+00, -2.428627142816475e+00, -2.463079009072627e+00, -2.402716926191562e+00, -2.433256726437679e+00, -2.460449467209403e+00, -2.451218906838199e+00, -7.288544490988724e-01, -8.222845048125460e-01, -6.694034721614797e-01, -7.015109793267555e-01, -7.443099524491601e-01, -8.175598467118990e-01, -1.183536653309554e-01, -2.381058071439924e-01, -1.101890332254520e-01, -2.404942447328915e+00, -1.488297803696373e-01, -1.488297803696372e-01, -3.666501695221359e-03, -4.759450532294711e-03, -3.639295334322784e-03, -7.573317503377754e-02, -4.278922872692731e-03, -4.384225387780155e-03, -8.091705001582865e-01, -7.911806764576411e-01, -8.241305656667886e-01, -8.026502506450897e-01, -8.000220247311292e-01, -8.000220247311292e-01, -7.853990189924173e-01, -6.076608423667619e-01, -6.460330068135320e-01, -6.962684574260787e-01, -6.692012350654987e-01, -7.329913689345290e-01, -8.514059888167833e-01, -2.496697085908658e-01, -3.464756608881387e-01, -4.299345985681079e-01, -3.857236472792827e-01, -3.857236472792826e-01, -5.858046987663950e-01, -4.683771629514873e-02, -6.383783249237937e-02, -4.134845728003074e-01, -9.452576912917135e-02, -1.008874423096998e-01, -1.189705387653066e-02, -1.272236141306096e-03, -2.670474685242489e-03, -9.475977846767600e-02, -4.056779358509424e-03, -4.056779358509417e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_0_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.413659727643526e-08, -1.413651994863970e-08, -1.413609514721158e-08, -1.413725262495432e-08, -1.413665758404726e-08, -1.413665758404726e-08, -1.345940097864715e-05, -1.346152160717424e-05, -1.351644131594067e-05, -1.348936585059538e-05, -1.349787793846473e-05, -1.374752166175414e-05, -5.041899479722974e-03, -4.661310004070759e-03, -4.259161677344108e-03, -4.521992618633225e-03, -4.459033817815082e-03, -4.459033817815082e-03, -5.617570708773452e-01, -5.731781801208180e-01, -1.379286560623705e-03, -3.838662073089670e-01, -4.662369290549080e-01, -4.662369290549081e-01, -7.923454496697599e+01, -7.307383774116474e+01, -1.917397111341814e+00, -2.024990319642862e+02, -1.515669541150398e+02, -1.515669541150398e+02, -4.352630988143737e-06, -4.352781829291215e-06, -4.352665048283386e-06, -4.232842310078130e-06, -4.352696839423319e-06, -4.352696839423319e-06, -1.159497988796651e-04, -1.162204836672914e-04, -1.154687376573772e-04, -1.158562072382356e-04, -1.163330551257049e-04, -1.167570049770798e-04, -2.204373532452373e-02, -1.864573317763049e-02, -2.525505458826786e-02, -2.590060540455928e-02, -2.147711308427913e-02, -2.066114949378163e-02, -6.968902668965077e-01, -2.590033223353331e-01, -7.935423174893077e-01, -2.040148437172550e-04, -5.669562847846595e-01, -5.669562847846596e-01, -5.709361542526673e+02, -1.991811524697917e+02, -9.698155880941250e+02, -1.680170775390384e+00, -8.352283136236698e+02, -4.138503305005963e+02, -2.803648049108754e-02, -2.818750633957433e-02, -2.773987993759866e-02, -2.810375953385626e-02, -2.812647294678014e-02, -2.812647294678014e-02, -3.122558571518080e-02, -4.038846439901501e-02, -3.921932453537411e-02, -3.673645960101355e-02, -3.815218104848531e-02, -3.674763086844407e-02, -1.490338605273404e-02, -2.343681856852060e-01, -1.647354916241334e-01, -1.146179344776473e-01, -1.499829981700196e-01, -1.499829981700197e-01, -4.796626665603066e-02, -2.086678935395117e+00, -1.153499299381171e+00, -1.670688806079111e-01, -1.401280015723594e+00, -8.603938663813919e-01, -2.756862042196068e+01, -3.079647685975545e+03, -1.184594685952237e+03, -9.799751698128994e-01, -5.770737798763308e+02, -5.770737798763315e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_0_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.240094544637224e-03, 1.240109746039647e-03, 1.240168747387876e-03, 1.239943990037631e-03, 1.240062966580134e-03, 1.240062966580134e-03, 1.944264413720221e-03, 1.945705653595319e-03, 1.983776928602222e-03, 1.968186583119770e-03, 1.970061216801300e-03, 8.079855991901771e-03, -3.301677627010495e-03, 2.337773593819913e-02, 2.023339749475299e-02, 2.176424598559423e-02, 2.140779133501336e-02, 2.140779133501336e-02, 5.202272703294495e-02, 5.518500827572168e-02, -3.035730224207830e-03, 1.618769496230124e-02, 2.773252051469158e-02, 2.773252051469154e-02, 2.761030847661663e-04, 2.969876974548767e-04, 1.355566171839648e-03, 1.357515448363761e-04, 2.016914901762703e-04, 2.016914901762703e-04, 7.001602436530019e-03, 7.002983221579387e-03, 7.001692287967521e-03, 5.870624088298333e-03, 7.002291040617028e-03, 7.002291040617028e-03, 1.575241610107736e-03, 1.904751882774826e-03, 1.324087922778005e-03, 1.612052453928038e-03, 1.886188749481931e-03, 1.301698009990572e-02, 5.607565051099121e-02, 5.612415520844097e-02, 5.472841726929079e-02, 5.847982211423875e-02, 5.631901168745419e-02, 3.161788471133797e-02, -1.847900222373342e-03, 2.495003926040568e-02, -1.532938682786044e-03, 1.768227318159188e-02, 1.286295619598938e-02, 1.286295619598915e-02, -5.886785128767602e-08, 1.247427709167062e-04, 2.716284866595705e-04, -6.132973444902921e-04, -3.709918387092725e-07, 2.026382189646657e-04, 6.376513885019847e-02, 6.347611624398895e-02, 5.966924668363698e-02, 6.366949388233731e-02, 6.362784074561130e-02, 6.362784074561129e-02, 6.545267710859975e-02, 6.329554738666443e-02, 6.585148699476967e-02, 6.656936769110076e-02, 6.639273163304543e-02, 4.531618056021140e-02, 5.262414762078208e-02, -1.111737613584998e-02, 5.126729147269263e-02, 7.944296619342272e-03, 6.570645240544674e-02, 6.570645240544670e-02, 1.689355059774950e-02, 1.290328077452395e-03, 1.844284460206846e-03, 8.643546798211273e-02, -1.658467209468056e-03, 5.804196860252773e-03, 2.702279254200113e-04, 3.682215590346921e-05, 1.310227078113363e-04, 5.448360378944368e-03, 2.238627384886644e-04, 2.238627384886576e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
