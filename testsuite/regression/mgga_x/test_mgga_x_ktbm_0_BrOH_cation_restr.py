
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_0_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.294037715634057e+01, -2.294042886290656e+01, -2.294076060150612e+01, -2.293999267369223e+01, -2.294038051360636e+01, -2.294038051360636e+01, -3.470646352031477e+00, -3.470683540157318e+00, -3.471937555317461e+00, -3.473761682868056e+00, -3.472357464576291e+00, -3.472357464576291e+00, -6.572295878800756e-01, -6.569043541880069e-01, -6.497793869644930e-01, -6.575047915865787e-01, -6.551072560478574e-01, -6.551072560478574e-01, -1.907981481958490e-01, -1.933851129927783e-01, -7.529928927710292e-01, -1.409288011520086e-01, -1.594155510898235e-01, -1.594155510898235e-01, -6.472316854699280e-03, -6.810941995089471e-03, -3.749406433219649e-02, -3.725485271311409e-03, -4.688001405762136e-03, -4.688001405762135e-03, -5.575666305372344e+00, -5.575799814596436e+00, -5.575718695008825e+00, -5.575834752973716e+00, -5.575710054780942e+00, -5.575710054780942e+00, -2.136897619091492e+00, -2.158271769520316e+00, -2.133898166045675e+00, -2.153337351909074e+00, -2.150075463659717e+00, -2.150075463659717e+00, -6.084159819291860e-01, -6.437302927474199e-01, -5.489539465143148e-01, -5.498035937167131e-01, -6.181268472328864e-01, -6.181268472328864e-01, -9.785700708059697e-02, -1.894831289126993e-01, -9.044909992563913e-02, -1.870769420257750e+00, -1.155770358685593e-01, -1.155770358685592e-01, -2.847468839911023e-03, -3.626257435352504e-03, -2.783411560544216e-03, -6.077021445014080e-02, -3.343353156606526e-03, -3.343353156606525e-03, -6.158029606220876e-01, -6.162785386253523e-01, -6.161216582101841e-01, -6.159774343496791e-01, -6.160478164466114e-01, -6.160478164466114e-01, -5.942262723602187e-01, -5.404433046740843e-01, -5.572574029188203e-01, -5.720030958354028e-01, -5.641986657328421e-01, -5.641986657328421e-01, -6.680883025318900e-01, -2.417461803325888e-01, -2.884720031607014e-01, -3.638619661220219e-01, -3.269600414457969e-01, -3.269600414457969e-01, -4.836846584106609e-01, -3.595576086879733e-02, -4.890466334709693e-02, -3.487146005684868e-01, -7.760828434237929e-02, -7.760828434237928e-02, -9.061370688903668e-03, -9.526918590494432e-04, -2.046778782335235e-03, -7.305915443380741e-02, -3.099294264183609e-03, -3.099294264183605e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_0_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.761045600361244e+01, -2.761058086803806e+01, -2.761105684489855e+01, -2.760919933557545e+01, -2.761018388880390e+01, -2.761018388880390e+01, -4.380077139480675e+00, -4.380178243631156e+00, -4.382867805766931e+00, -4.381681801063821e+00, -4.381561972368621e+00, -4.381561972368621e+00, -8.015677137120650e-01, -8.007632036014106e-01, -7.847782334799912e-01, -7.934438718436435e-01, -7.910134317816839e-01, -7.910134317816839e-01, -2.301993733870621e-01, -2.323715594704047e-01, -9.186934521851208e-01, -1.774303691787996e-01, -1.977526379814195e-01, -1.977526379814191e-01, -8.427700396738472e-03, -8.868603808048848e-03, -4.873794218153902e-02, -4.852703449628033e-03, -6.105272446377993e-03, -6.105272446377994e-03, -6.843896344822857e+00, -6.848047083912263e+00, -6.844062241221771e+00, -6.847727330718011e+00, -6.846012788765456e+00, -6.846012788765456e+00, -2.433925507344104e+00, -2.449485551737383e+00, -2.424453443937690e+00, -2.437792622097367e+00, -2.447613420542621e+00, -2.447613420542621e+00, -7.556131504375562e-01, -8.705148366707605e-01, -6.893851229543451e-01, -7.535340786316919e-01, -7.730103861801620e-01, -7.730103861801620e-01, -1.257070380974320e-01, -2.353480830078047e-01, -1.163984602205687e-01, -2.600063694512185e+00, -1.469486894207940e-01, -1.469486894207939e-01, -3.718497490416763e-03, -4.727700146097930e-03, -3.625829625369956e-03, -7.868764733493165e-02, -4.357832007102560e-03, -4.357832007102556e-03, -8.166127760108571e-01, -7.981517629835422e-01, -8.045649567645503e-01, -8.099365097085032e-01, -8.072435413989550e-01, -8.072435413989550e-01, -7.996312346287654e-01, -6.100566527701955e-01, -6.519053345502761e-01, -7.061434474322529e-01, -6.774796251097125e-01, -6.774796251097125e-01, -9.089248702163262e-01, -2.931012339631827e-01, -3.401598249637715e-01, -4.308903777761511e-01, -3.789316153396038e-01, -3.789316153396038e-01, -5.646434475851047e-01, -4.674346651967367e-02, -6.348941077442306e-02, -4.203521971516498e-01, -9.995095276776929e-02, -9.995095276776921e-02, -1.181348216156250e-02, -1.251324569241135e-03, -2.665585941266682e-03, -9.422407050699146e-02, -4.038113933588955e-03, -4.038113933588942e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_0_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.460875761856078e-08, -1.460867135549049e-08, -1.460822262617919e-08, -1.460951334299145e-08, -1.460884623903903e-08, -1.460884623903903e-08, -1.362256386363445e-05, -1.362480969615269e-05, -1.368309783230359e-05, -1.365537471156544e-05, -1.366370090287302e-05, -1.366370090287302e-05, -4.953913421902012e-03, -4.938776081679388e-03, -4.568152987647683e-03, -4.804584492514858e-03, -4.749650724765554e-03, -4.749650724765554e-03, -5.691910493892064e-01, -5.818525080443612e-01, -1.347408505041677e-03, -4.151213534256507e-01, -4.897774032565732e-01, -4.897774032565732e-01, -7.985359268982289e+01, -7.411732505448803e+01, -2.092099326936776e+00, -2.234089957832249e+02, -1.611744585660621e+02, -1.611744585660622e+02, -4.351877264059949e-06, -4.352035259679313e-06, -4.351926909614349e-06, -4.352063768499748e-06, -4.351938898777048e-06, -4.351938898777048e-06, -1.162082967046174e-04, -1.168641673976290e-04, -1.153470041612084e-04, -1.160971574377567e-04, -1.169774811513675e-04, -1.169774811513675e-04, -2.176861140262601e-02, -1.822939071694264e-02, -2.500419516059877e-02, -2.518948843298838e-02, -2.119179647143604e-02, -2.119179647143604e-02, -4.801027684397118e-01, -2.647616869844519e-01, -5.400695315611068e-01, -1.978356957126263e-04, -5.972317960161861e-01, -5.972317960161863e-01, -3.802847216880434e+02, -2.428097910721551e+02, -1.083816377749908e+03, -1.064761153981767e+00, -4.949272263519265e+02, -4.949272263519262e+02, -2.792329273891941e-02, -2.808467329473250e-02, -2.804029749609577e-02, -2.799416645567185e-02, -2.801833935010273e-02, -2.801833935010273e-02, -3.097737178824791e-02, -4.034253695088277e-02, -3.910168946999634e-02, -3.654655147663596e-02, -3.798890421576524e-02, -3.798890421576524e-02, -1.452660691681568e-02, -2.007140677817095e-01, -1.672876015876244e-01, -1.150128032376058e-01, -1.517518315090089e-01, -1.517518315090089e-01, -4.889271119569834e-02, -2.183122470971943e+00, -1.273965773232383e+00, -1.662863224996693e-01, -9.316552139464598e-01, -9.316552139464600e-01, -3.383305076608684e+01, -4.964922412189330e+03, -1.252562360449836e+03, -1.032745609837134e+00, -6.622273868098650e+02, -6.622273868098681e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_0_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.637799749201935e-03, 1.637800954034591e-03, 1.637817560889804e-03, 1.637800618426774e-03, 1.637807879794989e-03, 1.637807879794989e-03, 4.539066363252577e-03, 4.540440353399968e-03, 4.578379855740770e-03, 4.579544895874871e-03, 4.572782719225456e-03, 4.572782719225456e-03, 6.122889025934149e-03, 6.112020109203628e-03, 6.109165606276270e-03, 7.413655897452956e-03, 6.977520757964452e-03, 6.977520757964452e-03, 4.804558462087398e-02, 5.006231043047708e-02, -5.163376366436243e-04, 1.252244351040139e-02, 2.251206711376070e-02, 2.251206711376047e-02, 2.759281941014822e-04, 2.966118153186403e-04, 1.304753339522551e-03, 1.334869624190242e-04, 2.000611818291709e-04, 2.000611818291733e-04, 6.993894734585357e-03, 6.995385106205673e-03, 6.994146000583433e-03, 6.995452813786002e-03, 6.994558801206482e-03, 6.994558801206482e-03, 1.132425351007948e-02, 1.174854036294562e-02, 1.133001653289175e-02, 1.173114128366271e-02, 1.155614077478536e-02, 1.155614077478536e-02, 4.519156810371158e-02, 4.687178733218472e-02, 3.532449293787680e-02, 3.649668331381489e-02, 4.641353901669963e-02, 4.641353901669963e-02, 5.176857038923142e-03, 2.287931399750152e-02, 4.541728917438266e-03, 1.172209031050980e-02, 1.133913448869549e-02, 1.133913448869534e-02, 7.561517011883691e-05, 1.174380305925211e-04, 2.659964319765263e-04, 2.710551782969757e-03, 1.928021737750011e-04, 1.928021737750003e-04, 6.277383689600367e-02, 6.239711337295441e-02, 6.253449927024919e-02, 6.264432660558862e-02, 6.258923570951444e-02, 6.258923570951444e-02, 6.341191568786539e-02, 6.122237345091756e-02, 6.330325573052435e-02, 6.394779000983983e-02, 6.360520915064147e-02, 6.360520915064145e-02, 4.118389909203578e-02, 3.527931797279401e-02, 4.459259423702534e-02, 4.949779476647991e-02, 5.308544747301525e-02, 5.308544747301536e-02, 5.208015721165641e-02, 1.269586208743443e-03, 1.733858322388427e-03, 6.344052971302422e-02, 5.182028053770165e-03, 5.182028053770131e-03, 2.525270145259658e-04, 2.291067866971232e-05, 1.301392801690266e-04, 5.102719127031825e-03, 2.171373707798406e-04, 2.171373707798226e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
