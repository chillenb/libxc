
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mbrxh_bg_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbrxh_bg", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.898782696770861e+01, -1.898785820435312e+01, -1.898802216403659e+01, -2.049542446971203e+01, -2.049519437337096e+01, -2.200286396470168e+01, -4.183345764158424e+00, -4.988213500485996e+00, -4.976007792290082e+00, -4.981386579211229e+00, -4.980287662668909e+00, -4.175216139112066e+00, -7.468175101850972e-01, -1.034721805604303e+00, -1.389225610560274e+00, -1.050354670564421e+00, -7.459945981731239e-01, -1.362506221848150e+00, -3.209755088964726e-01, -3.185532325745372e-01, -1.526847993939263e+00, -5.814600966469068e-01, -5.043494307545066e-01, -4.227206628231627e-01, -3.266957447388125e+00, -1.680566242168846e+00, -6.938009606372531e-01, -5.797374307653493e+00, -3.886672083245679e+00, -3.886672083245678e+00, -4.943764432532955e+00, -4.938222922879215e+00, -4.943436698209026e+00, -4.938548613117755e+00, -4.759054208039453e+00, -4.759198587728496e+00, -3.039875972065095e+00, -3.012337165645929e+00, -3.063491144511643e+00, -3.037517113817460e+00, -2.489764615019506e+00, -3.013083673156302e+00, -6.276163587953481e-01, -6.463195324981714e-01, -7.416370726805648e-01, -6.834844440986623e-01, -6.252454496300759e-01, -7.028850088461434e-01, -7.418505394720808e-01, -4.058794284755708e-01, -7.614077121381120e-01, -2.218975098981480e+00, -5.700419958580731e-01, -5.700419958580727e-01, -4.504583240964860e+00, -6.240732676371165e+00, -3.019270079183924e+00, -5.035949465932849e-01, -4.036440448771919e+00, -4.036440448770387e+00, -5.154049737015957e-01, -5.237567210372929e-01, -5.100831677309807e-01, -5.139807850764662e-01, -5.101021448342725e-01, -5.145435551960893e-01, -5.027158563941407e-01, -5.510205405542348e-01, -5.317980785023958e-01, -5.418876551610332e-01, -5.706229057062916e-01, -5.213629019845790e-01, -6.580722619485203e-01, -5.655989538229246e-01, -4.288145432466364e-01, -4.485135151772131e-01, -5.346389080848697e-01, -4.285675048794610e-01, -6.395253230955725e-01, -1.071882110942963e-01, -1.077061659228109e+00, -4.680422505994908e-01, -6.721924329150009e-01, -6.721924329149955e-01, -7.244385630944546e-02, -1.692760278364009e+01, -3.852499953282302e-02, -1.328332007484068e-01, -3.593499047843533e+00, -1.371467175920676e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mbrxh_bg_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbrxh_bg", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.414932497163590e+01, -2.414944119384033e+01, -2.414942461746944e+01, -2.414951354883070e+01, -2.414975068603220e+01, -2.414997869469978e+01, -2.414862657959632e+01, -1.513872897630984e+01, -2.414938459331815e+01, -1.513999458092715e+01, -1.513979752885285e+01, -1.513999458092715e+01, -1.935216875200988e+00, -3.661694949240627e+00, -1.935626238960756e+00, -1.935126424871243e+00, -1.943545169848644e+00, -1.944976882345739e+00, -1.940836073512923e+00, -1.940873830268218e+00, -1.933994114383163e+00, -1.948019179272724e+00, -3.661012124032142e+00, -1.948019179272725e+00, -7.544909098586531e-01, -7.534423582389512e-01, -7.544854380901830e-01, -8.991736291310623e-02, -1.606096384921276e-03, 1.210449073674207e-02, -2.898439067240310e-02, -7.504916071620608e-01, -7.566237496657520e-01, -7.468109333009630e-01, -1.028678002335900e-01, 6.445127526976027e-02, -2.098743422877848e-01, 3.875200298008713e-02, -2.109323413842100e-01, 2.741807628912427e-02, 4.364852756466034e-01, -9.683064720506684e-01, 2.783004387057879e-01, 2.367531463925688e-01, 7.209036426766781e-02, 5.027522188219545e-01, 7.209036426766802e-02, -1.573947490564583e-01, 3.477349949688306e+00, 3.297918661388834e+00, -4.038398388538025e-02, 3.084515382721828e+00, -8.670498432592573e-02, 1.026089245564471e+00, 6.181148678604097e+00, 6.240759115752368e+00, 3.920784608680806e+00, 4.933256153669284e+00, 3.920784608680806e+00, 4.933256153669249e+00, -4.613895160745625e+00, -4.612932473288026e+00, -4.637516620735597e+00, -4.635758059636216e+00, -4.615537067843528e+00, -4.613954616132876e+00, -4.635791267049607e+00, -4.634676224930689e+00, -5.928279283480619e+00, -4.624364548202350e+00, -4.625757280238409e+00, -5.926826184848171e+00, -9.153692963759836e-01, -9.192986306640756e-01, -9.607807846546083e-01, -9.631727373435526e-01, -8.736513425452265e-01, -8.896098603615216e-01, -9.148053729279104e-01, -9.307222337787223e-01, -9.711679428240022e-01, -2.055640406941388e+00, -9.711679428240023e-01, -9.470953299255089e-01, -3.951285636265798e-01, -6.455492830258117e-01, -4.588619522244505e-01, -4.679724255251144e-01, -3.037598122157966e-01, -3.467585589337931e-01, -3.697649733480015e-01, -3.905854280449675e-01, -4.188336462962183e-01, -6.404583206330742e-01, -4.188336462962178e-01, -3.927756992010885e-01, 4.746237831155754e-01, 4.705593198822121e-01, -2.283730032057763e-01, 1.761624531199480e-01, 5.275845583836256e-01, 4.831620036977258e-01, -1.315801280683397e+00, -1.315257556747814e+00, 3.403587090784037e-01, 2.511982120188998e-01, 3.403587090784041e-01, 2.511982120188959e-01, -3.635258589180021e-02, 9.211568670468139e+00, 6.545814452016894e+00, 6.851460176662381e+00, 3.361965882122324e+00, 3.067114611873259e+00, 6.784402895424444e-01, -1.101572744453464e-01, 7.153611097846484e+00, 3.199060086203233e+00, 7.153611097846481e+00, 3.199060086189558e+00, -6.635960259769668e-01, -6.666940783938953e-01, -6.312626366247457e-01, -6.354246975369280e-01, -6.710722643590402e-01, -6.737476246577035e-01, -6.726001657570753e-01, -6.578460856336943e-01, -6.718394336928371e-01, -6.744974879514558e-01, -6.718394336928371e-01, -6.536034536027447e-01, -6.431201446748284e-01, -6.459237500830923e-01, -3.129067668022311e-01, -5.336998748912428e-01, -3.524405304440779e-01, -5.754812507995825e-01, -3.961557264393065e-01, -3.993964531786303e-01, -3.618008786075715e-01, -3.633077882652830e-01, -3.618008786047085e-01, -5.936186558101886e-01, -4.598043689590391e-01, -7.539763745085803e-01, 8.693319966147851e-02, 8.414504368805306e-02, -3.028378448613067e-01, -6.349165203181578e-03, -3.629186661475018e-01, -1.601914131723961e-01, -8.870665543508292e-02, -9.005974122075311e-02, -8.870665543381047e-02, -3.258421765185717e-01, -2.551832080895207e-01, -2.639614368649998e-01, -8.535759602803218e-02, -8.586063321237250e-02, 9.086487914015691e-01, 8.666247062985617e-01, -1.830143959996317e-01, -2.060203317131381e-01, 4.917615558371798e-01, 4.132577286656019e-01, 4.917615558371066e-01, 4.132577286656026e-01, -5.073546908512429e-02, -5.143493017204154e-02, 1.904539247585882e+01, 1.904673886169875e+01, -2.547437823998057e-02, -2.557535806912136e-02, -1.179838771011897e-01, -1.177661958348141e-01, 4.827790540087639e+00, 3.387136447765134e+00, 4.827790540055219e+00, -2.766388797102627e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbrxh_bg_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbrxh_bg", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.345160618809841e-08, 0.000000000000000e+00, -1.345063716833256e-08, -1.345127994946419e-08, 0.000000000000000e+00, -1.345040040173238e-08, -1.345025916906374e-08, 0.000000000000000e+00, -1.344893160357231e-08, -1.345393303866517e-08, 0.000000000000000e+00, -5.950600998242946e-08, -1.345140652007843e-08, 0.000000000000000e+00, -5.950187564021428e-08, -5.949868207908135e-08, 0.000000000000000e+00, -5.950187564021428e-08, -6.287532783612652e-05, 0.000000000000000e+00, -2.883448176832475e-05, -6.287790373892174e-05, 0.000000000000000e+00, -6.287790714069106e-05, -6.292933424067825e-05, 0.000000000000000e+00, -6.293594062260200e-05, -6.288937368606050e-05, 0.000000000000000e+00, -6.288593182983412e-05, -6.290990734963761e-05, 0.000000000000000e+00, -6.292777424384885e-05, -2.885374037483124e-05, 0.000000000000000e+00, -6.292777424384885e-05, -1.459267970813961e-02, 0.000000000000000e+00, -1.468977350019212e-02, -1.458865349359183e-02, 0.000000000000000e+00, -4.050763257407008e-02, -4.392858021198504e-02, 0.000000000000000e+00, -4.500689868885004e-02, -4.357449110617075e-02, 0.000000000000000e+00, -1.487331436028687e-02, -1.445443079035031e-02, 0.000000000000000e+00, -1.507311507746696e-02, -3.931494351324263e-02, 0.000000000000000e+00, -4.897292981876247e-02, -2.393132497947128e+00, 0.000000000000000e+00, -8.042654206421187e+00, -2.348754746498499e+00, 0.000000000000000e+00, -7.571304947771345e+00, -2.132002168383071e-02, 0.000000000000000e+00, -5.296286550080350e-03, -2.245477366412425e+01, 0.000000000000000e+00, -2.174774233247653e+01, -7.687668202294544e+00, 0.000000000000000e+00, -6.958583210866985e+01, -7.687668202294543e+00, 0.000000000000000e+00, -8.235345656712974e+00, -2.559741063586583e+06, 0.000000000000000e+00, -2.032076436606753e+06, -2.538788486056508e+04, 0.000000000000000e+00, -1.653220681287945e+06, -1.621267641258744e+02, 0.000000000000000e+00, -2.618245380189790e+03, -1.758791396814749e+07, 0.000000000000000e+00, -1.876374816932523e+07, -3.943915316011057e+06, 0.000000000000000e+00, -3.476375951575739e+07, -3.943915316011057e+06, 0.000000000000000e+00, -3.476375951575726e+07, -1.362658136063479e-05, 0.000000000000000e+00, -1.363892266860260e-05, -1.350061986205567e-05, 0.000000000000000e+00, -1.351707051408165e-05, -1.361790707837278e-05, 0.000000000000000e+00, -1.363352165042228e-05, -1.350989861570180e-05, 0.000000000000000e+00, -1.352289835028720e-05, -3.439211361590357e-06, 0.000000000000000e+00, -1.357800249245572e-05, -1.356341322308780e-05, 0.000000000000000e+00, -3.442641276164112e-06, -6.062743636586668e-04, 0.000000000000000e+00, -6.067844077678386e-04, -5.924883351621297e-04, 0.000000000000000e+00, -5.934018063279214e-04, -6.179963395788892e-04, 0.000000000000000e+00, -6.151045147206303e-04, -6.057483418368942e-04, 0.000000000000000e+00, -6.027897820312735e-04, -5.901596734981787e-04, 0.000000000000000e+00, -2.801640925392291e-04, -5.901596734981787e-04, 0.000000000000000e+00, -5.985905173495990e-04, -8.587406529939857e-02, 0.000000000000000e+00, -2.979089020336069e-02, -7.501533185307914e-02, 0.000000000000000e+00, -7.438834868298745e-02, -1.147414471853209e-01, 0.000000000000000e+00, -1.030858032765751e-01, -1.063254452953423e-01, 0.000000000000000e+00, -9.751191585862094e-02, -7.809604981611309e-02, 0.000000000000000e+00, -3.065500631482567e-02, -7.809604981611315e-02, 0.000000000000000e+00, -9.109688415924135e-02, -8.381383251592632e+01, 0.000000000000000e+00, -8.092451506439112e+01, -1.692603716279028e+00, 0.000000000000000e+00, -7.782166600839780e+00, -1.210867078653309e+02, 0.000000000000000e+00, -1.004549802667695e+02, -7.992633223951176e-04, 0.000000000000000e+00, -8.009336986091909e-04, -5.257630967840986e+01, 0.000000000000000e+00, -4.397890372775463e+01, -5.257630967840990e+01, 0.000000000000000e+00, -4.397890372775438e+01, -2.298392393918788e+05, 0.000000000000000e+00, -4.485414224302575e+07, -2.033613163913123e+07, 0.000000000000000e+00, -1.909530409057148e+07, -6.741984549741557e+07, 0.000000000000000e+00, -5.438771728875617e+07, -4.858765007267468e+02, 0.000000000000000e+00, -4.066110984498759e+01, -5.782670543340011e+07, 0.000000000000000e+00, -1.810249907981124e+07, -5.782670543340012e+07, 0.000000000000000e+00, -1.810249907977007e+07, -2.800125875074734e-02, 0.000000000000000e+00, -2.720337060402244e-02, -4.485690210611324e-02, 0.000000000000000e+00, -4.336058090041936e-02, -1.895081583160085e-02, 0.000000000000000e+00, -1.861363198548308e-02, -1.849964068186404e-02, 0.000000000000000e+00, -3.225082925307413e-02, -1.872382223938695e-02, 0.000000000000000e+00, -1.839688922463410e-02, -1.872382223938695e-02, 0.000000000000000e+00, -3.450594936185138e-02, -3.328912127638151e-02, 0.000000000000000e+00, -3.234871649320822e-02, -1.662849720134904e-01, 0.000000000000000e+00, -6.528128229342227e-02, -1.546697071455228e-01, 0.000000000000000e+00, -4.563459703686016e-02, -1.467661672719674e-01, 0.000000000000000e+00, -1.443806120742063e-01, -1.547746902571054e-01, 0.000000000000000e+00, -1.531521975683578e-01, -1.547746902582645e-01, 0.000000000000000e+00, -3.834532163779848e-02, -6.008217784863935e-02, 0.000000000000000e+00, -1.448034111256987e-02, -3.337806056639811e+00, 0.000000000000000e+00, -3.267835319701448e+00, -5.594319512147210e-01, 0.000000000000000e+00, -1.652430816791356e+00, -2.856360903107524e-01, 0.000000000000000e+00, -6.008210248455625e-01, -1.017557467584005e+00, 0.000000000000000e+00, -1.020012469963439e+00, -1.017557467586540e+00, 0.000000000000000e+00, -4.245250120573695e-01, -2.216615107052539e-01, 0.000000000000000e+00, -2.173703616310243e-01, -1.735828320381872e+02, 0.000000000000000e+00, -1.692711024627128e+02, -1.130041055799500e+03, 0.000000000000000e+00, -1.002949573890548e+03, -7.492819096507938e-01, 0.000000000000000e+00, -7.294647166038895e-01, -2.229869589575415e+02, 0.000000000000000e+00, -1.861047348036423e+02, -2.229869589575279e+02, 0.000000000000000e+00, -1.861047348036425e+02, -8.412378418520682e+03, 0.000000000000000e+00, -7.573639513688176e+03, -3.174106112807054e+09, 0.000000000000000e+00, -3.145783842259460e+09, -9.485392745273728e+05, 0.000000000000000e+00, -8.089761003420486e+05, -2.752960517025306e+01, 0.000000000000000e+00, -2.723306822537976e+01, -7.411688021050154e+07, 0.000000000000000e+00, -2.527972664122265e+07, -7.411688021023375e+07, 0.000000000000000e+00, -2.106385008225316e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbrxh_bg_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbrxh_bg", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-6.846968168257887e-04, -6.846448481199006e-04, -6.846868470984501e-04, -6.846376171129406e-04, -6.846574264403245e-04, -6.845947799126821e-04, -6.847694467943364e-04, -9.617410428811910e-04, -6.846905453611327e-04, -9.618576002425119e-04, -9.617915261708965e-04, -9.618576002425119e-04, -1.886595297665417e-03, -6.333720148984524e-03, -1.887207196157307e-03, -1.886517201661688e-03, -1.899159278635792e-03, -1.901288320115031e-03, -1.894643000265937e-03, -1.894632681867056e-03, -1.885534752688456e-03, -1.905419355612349e-03, -6.335030867010721e-03, -1.905419355612349e-03, -2.286499918756728e-02, -2.329192828795697e-02, -2.275213147547919e-02, -4.498479766061965e-03, -3.907537561669494e-03, -3.837512376365029e-03, -4.095583290159269e-03, -2.216648938562530e-02, -2.345014368127510e-02, -2.009450132506064e-02, -4.572005022935100e-03, -3.577913803664606e-03, -6.122684369242403e-02, -1.135785684320607e-02, -6.234032270032721e-02, -1.196150997625670e-02, -1.901048953258083e-03, -1.389152278194956e-02, -4.489890559557837e-03, -5.175986164586370e-03, -9.460356171063717e-03, -2.409178968648306e-03, -9.460356171063713e-03, -3.703786136623688e-02, -1.287880354422044e-04, -1.388073948307313e-04, -3.040147760578930e-02, -1.519749611074727e-04, -3.337718572526871e-02, -8.413641300735023e-04, -5.938960857050859e-05, -5.855133115901072e-05, -1.092488811891666e-04, -7.515418394062950e-05, -1.092488811891666e-04, -7.515418394062919e-05, -4.065555100407261e-03, -4.066437590952333e-03, -4.049938586484311e-03, -4.051344821280961e-03, -4.064486726035559e-03, -4.065772499111757e-03, -4.051096731561537e-03, -4.052071172402605e-03, -2.537142558216524e-03, -4.058933685023130e-03, -4.057770956610126e-03, -2.537814802824247e-03, -2.696291370539827e-03, -2.708369958665171e-03, -2.795774640038352e-03, -2.805128048704459e-03, -2.608198100779131e-03, -2.644560436247658e-03, -2.693588788229854e-03, -2.731867597004012e-03, -2.821439225931173e-03, -1.111297919536872e-02, -2.821439225931173e-03, -2.769651602028045e-03, -1.858221177853231e-02, -3.130449974772564e-02, -3.312783459630175e-02, -3.381261559769281e-02, -1.280237452953736e-02, -1.512016797556745e-02, -1.863944759021062e-02, -2.114735796656405e-02, -2.197496923995635e-02, -3.133396719569980e-02, -2.197496923995635e-02, -1.960634142135415e-02, -2.555707897575137e-03, -2.583621801515366e-03, -4.579555603702883e-02, -6.077185572941352e-03, -2.233070413829969e-03, -2.488930592151582e-03, -6.948484323105338e-03, -6.957805947691685e-03, -3.705937499948295e-03, -4.999027857818421e-03, -3.705937499948298e-03, -4.999027857818397e-03, -2.193667404438478e-02, -3.568385171460367e-05, -5.515105748024830e-05, -5.241164224385084e-05, -1.147393302668321e-04, -1.291993838712721e-04, -1.545964730212725e-03, -3.928125686097425e-02, -4.746310183316423e-05, -1.294177188614250e-04, -4.746310183316426e-05, -1.294177188611305e-04, -2.132219225152927e-02, -2.112735386906435e-02, -2.619090248538428e-02, -2.585655616307097e-02, -1.994317963899146e-02, -1.981860996862253e-02, -1.956705573202151e-02, -2.263343584908123e-02, -1.975415126665366e-02, -1.963632274155996e-02, -1.975415126665366e-02, -2.329925789491783e-02, -2.248591147454419e-02, -2.227027395673639e-02, -1.772356167741062e-02, -4.097015186494861e-02, -2.572777294306373e-02, -3.289122331313753e-02, -4.021285739007187e-02, -4.020914304016369e-02, -3.263692242015653e-02, -3.293761329394182e-02, -3.263692242040091e-02, -2.945778823470733e-02, -2.637691961869464e-02, -2.262276714083322e-02, -7.737451471063795e-03, -7.797849101539793e-03, -5.247533784236301e-02, -9.923465149186945e-03, -6.216346942693894e-02, -1.487376709319108e-02, -1.263374751074912e-02, -1.273227143932926e-02, -1.263374751078061e-02, -6.123808447134024e-02, -1.487658511162690e-02, -1.548046898201652e-02, -3.376759725211100e-02, -3.360938075245116e-02, -1.028554576126544e-03, -1.098262186994098e-03, -1.938520028818633e-02, -2.309048754187461e-02, -2.362925814843175e-03, -2.910824103139658e-03, -2.362925814843033e-03, -2.910824103139665e-03, -2.562495198925353e-02, -2.567131173142601e-02, -1.300532973973985e-05, -1.300856352943365e-05, -3.133517081981384e-02, -3.215317121284741e-02, -4.395438061808497e-02, -4.564919453119715e-02, -7.452675602713311e-05, -1.190279441374282e-04, -7.452675602686359e-05, -3.768631308131189e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
