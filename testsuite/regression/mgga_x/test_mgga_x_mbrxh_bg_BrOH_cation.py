
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mbrxh_bg_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbrxh_bg", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.170176850988074e+01, -2.170166807228659e+01, -2.170146050990857e+01, -2.170294787147851e+01, -2.170213456780310e+01, -2.170213456780310e+01, -4.029300811757252e+00, -4.029073436028114e+00, -4.023655570897825e+00, -4.031047993232391e+00, -4.027800811074108e+00, -4.027800811074108e+00, -9.170169502966662e-01, -9.191012595664603e-01, -9.782113794733033e-01, -9.780939668375067e-01, -9.865689185858341e-01, -9.865689185858341e-01, -4.158415508021127e-01, -4.069242515856626e-01, -1.102613373271907e+00, -5.012149461803870e-01, -4.511054455425852e-01, -4.511054455425565e-01, -3.242551088875749e+00, -3.040433313030814e+00, -1.114072366196034e+00, -5.227637635839307e+00, -3.647770239389103e+00, -3.647770239389097e+00, -4.939679673403120e+00, -4.934222624016252e+00, -4.939438779641689e+00, -4.934620925931807e+00, -4.936899546854675e+00, -4.936899546854675e+00, -2.897341429952908e+00, -2.891387129107607e+00, -2.938166385832904e+00, -2.932581950171219e+00, -2.874616652612711e+00, -2.874616652612711e+00, -6.379305822603201e-01, -5.789861122829312e-01, -6.206939048605182e-01, -5.409996462395315e-01, -6.301675270294840e-01, -6.301675270294841e-01, -6.526240674586284e-01, -5.502382463450943e-01, -6.644391104483178e-01, -1.785979128905237e+00, -5.247245495409495e-01, -5.247245495409495e-01, -5.685172208135421e+00, -4.948402395877855e+00, -2.683278804887384e+00, -7.537367581308214e-01, -3.202196902385531e+00, -3.202196902384419e+00, -5.128446221020426e-01, -5.198190136996856e-01, -5.169240795351391e-01, -5.149035848531174e-01, -5.158736187485841e-01, -5.158736187485841e-01, -4.978780320387831e-01, -6.313816206971644e-01, -5.821280002004217e-01, -5.250398557091644e-01, -5.536986468489526e-01, -5.536986468489526e-01, -6.145382692768198e-01, -5.497702162021751e-01, -5.244415764334558e-01, -4.762237730145155e-01, -4.928899147621839e-01, -4.928899147622081e-01, -5.911294116644752e-01, -1.195204624418998e+00, -9.634844037878554e-01, -4.131703691392302e-01, -6.044683668839643e-01, -6.044683668842440e-01, -2.737439823858133e+00, -7.088860412417407e+00, -5.334629124820392e+00, -6.296712762687291e-01, -3.051636682697817e+00, -3.051636682698720e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mbrxh_bg_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbrxh_bg", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.561325894390858e+01, -1.561301317050274e+01, -1.561354151793076e+01, -1.561321839467059e+01, -1.561411029876512e+01, -1.561412767569289e+01, -1.561092696771400e+01, -1.561006752157843e+01, -1.561344347015791e+01, -1.561144291466501e+01, -1.561344347015791e+01, -1.561144291466501e+01, -2.820871058460082e+00, -2.821842887522755e+00, -2.820782039670965e+00, -2.821873039441011e+00, -2.820080338085886e+00, -2.820239390862866e+00, -2.816326860166666e+00, -2.817289141109881e+00, -2.820519976566544e+00, -2.816650492738845e+00, -2.820519976566544e+00, -2.816650492738845e+00, -5.305891635641455e-01, -5.438215905648747e-01, -5.256687732987271e-01, -5.423208038441811e-01, -4.584552241773960e-01, -4.293710639364911e-01, -4.402829062954695e-01, -4.480985955835572e-01, -5.672541444810821e-01, -2.807914988710518e-01, -5.672541444810821e-01, -2.807914988710518e-01, 4.862951587637245e-02, 3.098401034482316e-02, 3.683634736382527e-02, 1.748422960457436e-02, -7.322471738011177e-01, -7.845244252364760e-01, 1.846163551454474e-01, 1.839511256218309e-01, 4.464916222629872e-02, 3.105505888263380e-01, 4.464916222629868e-02, 3.105505888250579e-01, 3.438622176743886e+00, 3.282193710022747e+00, 3.227040714964813e+00, 3.052481767180318e+00, 9.818506561706565e-01, 9.317780710369657e-01, 5.510685422554575e+00, 5.661726913705206e+00, 3.789443753040442e+00, 3.974292225334761e+00, 3.789443753040427e+00, 3.974292225334737e+00, -4.630755034254974e+00, -4.628823611101012e+00, -4.654125064378198e+00, -4.651410102888266e+00, -4.631997105693304e+00, -4.629559428611600e+00, -4.652051611832265e+00, -4.650079141081392e+00, -4.642781066826458e+00, -4.640185022860531e+00, -4.642781066826458e+00, -4.640185022860531e+00, -1.062315222722971e+00, -1.061257206915377e+00, -1.084481076384026e+00, -1.082982938208621e+00, -1.000185850634558e+00, -1.017772880332724e+00, -1.020313273352796e+00, -1.037390057752115e+00, -1.118263015730498e+00, -1.078916037627930e+00, -1.118263015730498e+00, -1.078916037627930e+00, -4.422086104124032e-01, -4.395449690049704e-01, -6.823545300709686e-01, -6.857846658237688e-01, -4.257867030729318e-01, -4.311408467315790e-01, -5.434292756933985e-01, -5.651054928709807e-01, -4.596350157891336e-01, -4.423795198988714e-01, -4.596350157891362e-01, -4.423795198988715e-01, 3.972690911599760e-01, 3.868553721076392e-01, 1.538748952782952e-01, 1.518462807338507e-01, 4.291540701028853e-01, 4.043023902286603e-01, -2.011464086960921e+00, -2.010997919851925e+00, 2.911239632664973e-01, 2.176444604615334e-01, 2.911239632664973e-01, 2.176444604615334e-01, 6.017362062152719e+00, 6.225849943654286e+00, 5.216093865653922e+00, 5.343622444409878e+00, 2.986787540578749e+00, 2.708330239886791e+00, 5.519771851453262e-01, 5.595391205437886e-01, 4.052358292936656e+00, 3.121747205251204e+00, 4.052358292920599e+00, 3.121747205247507e+00, -6.696372754494300e-01, -6.724603379285562e-01, -6.447004073317797e-01, -6.482039780577755e-01, -6.555682534086352e-01, -6.588112601637260e-01, -6.627719410896770e-01, -6.657147328333404e-01, -6.593649150188687e-01, -6.624418815158490e-01, -6.593649150188687e-01, -6.624418815158490e-01, -6.543132403242234e-01, -6.565426355020002e-01, -3.210764475400887e-01, -3.237516972059262e-01, -3.591570628608542e-01, -3.608085516847105e-01, -4.411330476451983e-01, -4.451643088050795e-01, -3.737960821474379e-01, -3.754740704996506e-01, -3.737960821474379e-01, -3.754740704996516e-01, -6.988981844025781e-01, -7.063618712343078e-01, 7.210999918973518e-02, 6.887779959037012e-02, -2.917726136782079e-02, -3.701978494453636e-02, -2.281695826519048e-01, -2.309348606958730e-01, -1.318054184932716e-01, -1.331808031987248e-01, -1.318054184923148e-01, -1.331808031993939e-01, -3.034950627783564e-01, -3.069309099475603e-01, 1.042161076876332e+00, 1.035184907377626e+00, 7.962811345627590e-01, 7.629251294697988e-01, -2.458686504434576e-01, -2.443054187791205e-01, 4.243940829986989e-01, 3.568288166155304e-01, 4.243940829986981e-01, 3.568288166186823e-01, 2.831440378592565e+00, 2.721960581153803e+00, 8.913001882825114e+00, 6.813300403502008e+00, 6.048305932462632e+00, 5.572955881633091e+00, 4.217163911101028e-01, 4.181866042363115e-01, 3.036671616298071e+00, 3.303178401411022e+00, 3.036671616317567e+00, 3.303178401411013e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbrxh_bg_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbrxh_bg", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.886546127594573e-08, 0.000000000000000e+00, -5.886718560074124e-08, -5.886443986594979e-08, 0.000000000000000e+00, -5.886644335171216e-08, -5.886157617489823e-08, 0.000000000000000e+00, -5.886222500805151e-08, -5.887310738497721e-08, 0.000000000000000e+00, -5.887692457534759e-08, -5.886483721158951e-08, 0.000000000000000e+00, -5.887134966683946e-08, -5.886483721158951e-08, 0.000000000000000e+00, -5.887134966683946e-08, -6.546286737375315e-05, 0.000000000000000e+00, -6.546154540428344e-05, -6.546810071286839e-05, 0.000000000000000e+00, -6.546517994996989e-05, -6.557158065776306e-05, 0.000000000000000e+00, -6.558749911290352e-05, -6.551084352760417e-05, 0.000000000000000e+00, -6.550757087779451e-05, -6.549317813865968e-05, 0.000000000000000e+00, -6.559602000227780e-05, -6.549317813865968e-05, 0.000000000000000e+00, -6.559602000227780e-05, -4.081409037571658e-02, 0.000000000000000e+00, -4.015653466111715e-02, -4.108682098621164e-02, 0.000000000000000e+00, -4.025570713660915e-02, -4.472308466916447e-02, 0.000000000000000e+00, -4.610271353419033e-02, -4.455308631579839e-02, 0.000000000000000e+00, -4.424146393124092e-02, -3.866317542542722e-02, 0.000000000000000e+00, -5.086893589861628e-02, -3.866317542542722e-02, 0.000000000000000e+00, -5.086893589861628e-02, -9.238163529668126e+00, 0.000000000000000e+00, -8.077610246017308e+00, -8.873043775803790e+00, 0.000000000000000e+00, -7.613214756403782e+00, -1.957752066302602e-02, 0.000000000000000e+00, -1.708852447314345e-02, -2.343701610056858e+01, 0.000000000000000e+00, -2.230948895583252e+01, -7.798926358423005e+00, 0.000000000000000e+00, -7.446064332094767e+01, -7.798926358422999e+00, 0.000000000000000e+00, -7.446064332083915e+01, -2.562774334769823e+06, 0.000000000000000e+00, -2.033115788446461e+06, -2.150613880621861e+06, 0.000000000000000e+00, -1.655092866779670e+06, -3.250439196794104e+03, 0.000000000000000e+00, -2.655848892775111e+03, -1.778135624728908e+07, 0.000000000000000e+00, -1.893803029199393e+07, -3.957823081759376e+06, 0.000000000000000e+00, -3.549473252040846e+07, -3.957823081759370e+06, 0.000000000000000e+00, -3.549473252040832e+07, -1.354118223543952e-05, 0.000000000000000e+00, -1.355834527777867e-05, -1.341574827900327e-05, 0.000000000000000e+00, -1.343702501374989e-05, -1.353448749460441e-05, 0.000000000000000e+00, -1.355436960355602e-05, -1.342686460856250e-05, 0.000000000000000e+00, -1.344416228434359e-05, -1.347679496416759e-05, 0.000000000000000e+00, -1.349743791701061e-05, -1.347679496416759e-05, 0.000000000000000e+00, -1.349743791701061e-05, -6.120584552243071e-04, 0.000000000000000e+00, -6.124150344279236e-04, -5.974947415509321e-04, 0.000000000000000e+00, -5.982842916814161e-04, -6.229637462991668e-04, 0.000000000000000e+00, -6.201694292003748e-04, -6.099663718808120e-04, 0.000000000000000e+00, -6.070932204904684e-04, -5.961069978142066e-04, 0.000000000000000e+00, -6.039017112880705e-04, -5.961069978142066e-04, 0.000000000000000e+00, -6.039017112880705e-04, -9.251878333319676e-02, 0.000000000000000e+00, -9.398925166247067e-02, -3.337988280958185e-02, 0.000000000000000e+00, -3.237708463861323e-02, -1.199389369903922e-01, 0.000000000000000e+00, -1.099602641004855e-01, -8.244850063745675e-02, 0.000000000000000e+00, -7.175278738189848e-02, -8.295819394959722e-02, 0.000000000000000e+00, -9.842930987289054e-02, -8.295819394959685e-02, 0.000000000000000e+00, -9.842930987289050e-02, -8.604826369603845e+01, 0.000000000000000e+00, -8.328957639325142e+01, -8.015041394312595e+00, 0.000000000000000e+00, -7.868329866994957e+00, -1.249308359494265e+02, 0.000000000000000e+00, -1.031634574635971e+02, -4.460846567128131e-04, 0.000000000000000e+00, -4.463944110350497e-04, -5.368704313660613e+01, 0.000000000000000e+00, -4.472874099537696e+01, -5.368704313660613e+01, 0.000000000000000e+00, -4.472874099537696e+01, -5.419225744897814e+07, 0.000000000000000e+00, -4.647807181957833e+07, -2.077915242949192e+07, 0.000000000000000e+00, -1.955022998236236e+07, -6.820567442355017e+07, 0.000000000000000e+00, -5.506466030551033e+07, -5.017158322108041e+02, 0.000000000000000e+00, -4.891841138456617e+02, -6.097312995239661e+07, 0.000000000000000e+00, -1.814743928729353e+07, -6.097312995226681e+07, 0.000000000000000e+00, -1.814743928728209e+07, -2.326201706353779e-02, 0.000000000000000e+00, -2.270261900518020e-02, -3.803639860014386e-02, 0.000000000000000e+00, -3.691162885546403e-02, -3.214454246790618e-02, 0.000000000000000e+00, -3.122062784094727e-02, -2.783722135811680e-02, 0.000000000000000e+00, -2.714035309798206e-02, -2.992437651038714e-02, 0.000000000000000e+00, -2.912107801870983e-02, -2.992437651038714e-02, 0.000000000000000e+00, -2.912107801870983e-02, -2.287530963010835e-02, 0.000000000000000e+00, -2.250649819973020e-02, -1.672995762949345e-01, 0.000000000000000e+00, -1.649582719352289e-01, -1.577813680186776e-01, 0.000000000000000e+00, -1.561166590274843e-01, -1.336103068471045e-01, 0.000000000000000e+00, -1.308968635532279e-01, -1.575177385288916e-01, 0.000000000000000e+00, -1.555615483419114e-01, -1.575177385288916e-01, 0.000000000000000e+00, -1.555615483419110e-01, -3.125238840671594e-02, 0.000000000000000e+00, -2.969011784016956e-02, -3.359148683767366e+00, 0.000000000000000e+00, -3.289314229608621e+00, -1.731475929800367e+00, 0.000000000000000e+00, -1.671794885202000e+00, -6.268569928572234e-01, 0.000000000000000e+00, -6.135995856765039e-01, -1.032157455610331e+00, 0.000000000000000e+00, -1.034669520406735e+00, -1.032157455612625e+00, 0.000000000000000e+00, -1.034669520405116e+00, -2.261900381625344e-01, 0.000000000000000e+00, -2.218043371690392e-01, -3.465322421607605e+03, 0.000000000000000e+00, -3.378771578002555e+03, -1.152971129262361e+03, 0.000000000000000e+00, -1.022694753364225e+03, -7.731794631741983e-01, 0.000000000000000e+00, -7.551301231787845e-01, -2.280867806632750e+02, 0.000000000000000e+00, -1.902451718415583e+02, -2.280867806632747e+02, 0.000000000000000e+00, -1.902451718422099e+02, -6.500906314602004e+05, 0.000000000000000e+00, -5.685696973007792e+05, -3.369595399843964e+09, 0.000000000000000e+00, -3.414081769759447e+09, -2.158419544421561e+08, 0.000000000000000e+00, -1.708684884692090e+08, -2.691551364142120e+02, 0.000000000000000e+00, -2.533717725983550e+02, -7.748393895643267e+07, 0.000000000000000e+00, -2.534318390632188e+07, -7.748393895669904e+07, 0.000000000000000e+00, -2.534318390632195e+07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbrxh_bg_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbrxh_bg", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-9.951994036556560e-04, -9.952265347153912e-04, -9.952146418644315e-04, -9.952375882372540e-04, -9.952415516456554e-04, -9.952822361762735e-04, -9.950701379591398e-04, -9.950635443003496e-04, -9.952096882840430e-04, -9.951349611559965e-04, -9.952096882840430e-04, -9.951349611559965e-04, -3.801579015156887e-03, -3.804983478551203e-03, -3.802373794795269e-03, -3.805895853043896e-03, -3.822466085113601e-03, -3.827167172682230e-03, -3.796424244519495e-03, -3.800385407395949e-03, -3.799999340518430e-03, -3.818131669124105e-03, -3.799999340518430e-03, -3.818131669124105e-03, -1.102080013861779e-02, -1.147463312311440e-02, -1.087684607283222e-02, -1.142054068735283e-02, -9.166730430926450e-03, -8.636016009890909e-03, -8.925824230271677e-03, -9.128233220074883e-03, -1.210284660063827e-02, -6.462507630491156e-03, -1.210284660063827e-02, -6.462507630491156e-03, -1.089444272301553e-02, -1.181821603218476e-02, -1.151629985647720e-02, -1.260186164887107e-02, -8.204614294073995e-03, -9.451353233328118e-03, -6.215679946131186e-03, -6.277643316704538e-03, -1.075688246293302e-02, -3.979646129144879e-03, -1.075688246293300e-02, -3.979646129139086e-03, -1.305188231452701e-04, -1.396016552418147e-04, -1.420693851391824e-04, -1.538841269397409e-04, -8.767252846549765e-04, -9.469979315144583e-04, -6.797431677187186e-05, -6.565109294154496e-05, -1.137631494991274e-04, -9.693647985350111e-05, -1.137631494991274e-04, -9.693647985350079e-05, -4.056093207106262e-03, -4.057518836193068e-03, -4.040311667248254e-03, -4.042281143684778e-03, -4.055230166462656e-03, -4.057003384202032e-03, -4.041695372124386e-03, -4.043166066265421e-03, -4.048057216799340e-03, -4.049912520790736e-03, -4.048057216799340e-03, -4.049912520790736e-03, -3.070900259854691e-03, -3.072053541919805e-03, -3.127937260692305e-03, -3.127992430930234e-03, -2.906749578395410e-03, -2.955243935436465e-03, -2.953895881930436e-03, -3.002377905306739e-03, -3.231161137111458e-03, -3.119494183723944e-03, -3.231161137111458e-03, -3.119494183723944e-03, -2.885513544553537e-02, -2.914015288029854e-02, -2.726098975934424e-02, -2.678625908143492e-02, -2.454946775072961e-02, -2.680856932867600e-02, -3.934420906694723e-02, -3.726847324538793e-02, -3.200199860638005e-02, -3.157089109405205e-02, -3.200199860637984e-02, -3.157089109405207e-02, -3.098338304836619e-03, -3.189989477899063e-03, -6.590435088013881e-03, -6.628019392873550e-03, -2.811580781283663e-03, -3.024965740437304e-03, -1.024997644072825e-02, -1.024954072153247e-02, -4.316405541260142e-03, -5.662742965182412e-03, -4.316405541260142e-03, -5.662742965182412e-03, -5.831287380980633e-05, -5.640300797131162e-05, -7.202132505527231e-05, -7.018888102293504e-05, -1.319338321500817e-04, -1.496734703088250e-04, -1.975668313232626e-03, -1.948484859019196e-03, -9.242220584354542e-05, -1.332256851611111e-04, -9.242220584334854e-05, -1.332256851610270e-04, -2.023710778141806e-02, -2.008804601056837e-02, -2.455162561181314e-02, -2.428832537185137e-02, -2.285068982811186e-02, -2.262390377480577e-02, -2.158789059878237e-02, -2.141356240147388e-02, -2.220157826329442e-02, -2.200264073232830e-02, -2.220157826329442e-02, -2.200264073232830e-02, -2.031431419582031e-02, -2.020261936743166e-02, -1.862079110604343e-02, -1.880710559560462e-02, -2.816784441908747e-02, -2.863523095287903e-02, -4.107347816011332e-02, -4.089087523148512e-02, -3.656347878640412e-02, -3.671879791248965e-02, -3.656347878640412e-02, -3.671879791248959e-02, -2.818645669691732e-02, -2.737713430267230e-02, -8.179734994987467e-03, -8.258601786502508e-03, -1.094093512874024e-02, -1.124450624819547e-02, -2.151724554375676e-02, -2.161928543914246e-02, -1.538799130335252e-02, -1.552695177050774e-02, -1.538799130338672e-02, -1.552695177048344e-02, -1.904048529634476e-02, -1.946503671568248e-02, -8.113374759689399e-04, -8.193394478897456e-04, -1.208124609182981e-03, -1.282438363781288e-03, -3.054779935203035e-02, -3.227341170019039e-02, -2.792930376304698e-03, -3.419961148465974e-03, -2.792930376304700e-03, -3.419961148477691e-03, -1.766962259646053e-04, -1.866105111550669e-04, -3.110512937013464e-05, -4.242738408600942e-05, -5.460482657744616e-05, -6.070298941339772e-05, -2.797156175995396e-03, -2.835216102962579e-03, -1.286036768435407e-04, -1.226156160948292e-04, -1.286036768439823e-04, -1.226156160948291e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
