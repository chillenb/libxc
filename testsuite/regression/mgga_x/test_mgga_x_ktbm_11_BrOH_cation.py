
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_11_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_11", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.359196731079462e+01, -2.359203037148884e+01, -2.359242262166330e+01, -2.359148693016217e+01, -2.359196123899768e+01, -2.359196123899768e+01, -3.441119083482547e+00, -3.441189762768772e+00, -3.443336212377890e+00, -3.444891166125373e+00, -3.443488175701967e+00, -3.443488175701967e+00, -6.356705181860620e-01, -6.352459178197678e-01, -6.258250912101428e-01, -6.342104859849671e-01, -6.328191401083857e-01, -6.328191401083857e-01, -1.838482925430050e-01, -1.865471670028671e-01, -7.245075295946783e-01, -1.338334086020645e-01, -1.737069948159118e-01, -1.737069948159117e-01, -6.161081537866615e-03, -6.485391726442672e-03, -3.558704624033928e-02, -3.530638715601488e-03, -4.945040831053984e-03, -4.945040831053984e-03, -5.759382286076935e+00, -5.759850209784381e+00, -5.759463200377839e+00, -5.759873859991292e+00, -5.759589113903756e+00, -5.759589113903756e+00, -2.118422031379738e+00, -2.143968101812800e+00, -2.113728642707218e+00, -2.136976612877787e+00, -2.134775817926076e+00, -2.134775817926076e+00, -6.150385708450524e-01, -6.576722818125027e-01, -5.480611811766609e-01, -5.535005887020592e-01, -6.275269293766595e-01, -6.275269293766597e-01, -9.271897048695495e-02, -1.809325973570187e-01, -8.579671917028184e-02, -1.888885137875253e+00, -1.100154388850412e-01, -1.100154388850412e-01, -2.693189390518009e-03, -3.429744489958841e-03, -2.640921769230584e-03, -5.755265733650779e-02, -3.321547178451505e-03, -3.321547178451507e-03, -6.379594157125404e-01, -6.376983522322094e-01, -6.378261574719543e-01, -6.378962199427547e-01, -6.378611868499943e-01, -6.378611868499943e-01, -6.147814381510077e-01, -5.463903958917045e-01, -5.687919216712861e-01, -5.881744463016936e-01, -5.780786381574288e-01, -5.780786381574288e-01, -6.797859729529190e-01, -2.323937493756792e-01, -2.792939614631094e-01, -3.588248644453815e-01, -3.198765930835736e-01, -3.198765930835736e-01, -4.830991361504795e-01, -3.412160533689920e-02, -4.635338489182553e-02, -3.480643401659639e-01, -7.367781086304050e-02, -7.367781086304051e-02, -8.573684101999872e-03, -9.041541432650477e-04, -1.945435725137902e-03, -6.933564450637758e-02, -3.050360404741412e-03, -3.050360404741408e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_11_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_11", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.859252827554478e+01, -2.859219591647819e+01, -2.859267451386433e+01, -2.859230215979390e+01, -2.859304571493806e+01, -2.859286115487081e+01, -2.859139377306260e+01, -2.859075560032572e+01, -2.859261922523112e+01, -2.859152634335280e+01, -2.859261922523112e+01, -2.859152634335280e+01, -4.534075263117604e+00, -4.533957697777298e+00, -4.534236552009255e+00, -4.534065290305807e+00, -4.537420589016390e+00, -4.538056575270633e+00, -4.536337705074402e+00, -4.536472543650905e+00, -4.532982462897419e+00, -4.539407401782200e+00, -4.532982462897419e+00, -4.539407401782200e+00, -8.019203108924514e-01, -8.058283220315704e-01, -8.005969847450007e-01, -8.051219239125126e-01, -7.833043989178349e-01, -7.799019742157656e-01, -7.918549706972010e-01, -7.941100704314767e-01, -8.108963064057809e-01, -7.741052991866754e-01, -8.108963064057809e-01, -7.741052991866754e-01, -2.175549749166440e-01, -2.275661963461446e-01, -2.197292167568649e-01, -2.311930284818533e-01, -8.880974242182352e-01, -9.128930370804749e-01, -1.663041611606772e-01, -1.694325532988053e-01, -2.266536930254686e-01, -1.223469151781884e-01, -2.266536930254685e-01, -1.223469151781884e-01, -7.569639525034228e-03, -8.041705152325992e-03, -7.934223029772459e-03, -8.496986938151770e-03, -4.421007451378185e-02, -4.666147675078118e-02, -4.566136693420238e-03, -4.487653481867139e-03, -6.758444737838918e-03, -3.866825415691038e-03, -6.758444737838921e-03, -3.866825415691037e-03, -7.079273391046819e+00, -7.077371101532116e+00, -7.083663043239913e+00, -7.081612051845259e+00, -7.079477954855562e+00, -7.077488560821018e+00, -7.083245845781705e+00, -7.081342536372241e+00, -7.081550806951812e+00, -7.079505438766796e+00, -7.081550806951812e+00, -7.079505438766796e+00, -2.503291801005181e+00, -2.503270729657288e+00, -2.522713410568411e+00, -2.521997166221396e+00, -2.486846161865115e+00, -2.491429646039344e+00, -2.503352721964466e+00, -2.508130239074689e+00, -2.527354731428077e+00, -2.514944615550549e+00, -2.527354731428077e+00, -2.514944615550549e+00, -7.880356848946538e-01, -7.861001231646362e-01, -9.053112560394108e-01, -9.064719833189199e-01, -6.970042366013846e-01, -7.336711750797941e-01, -7.661807046417338e-01, -7.987218417286103e-01, -8.258254955410215e-01, -7.829174633871668e-01, -8.258254955410216e-01, -7.829174633871671e-01, -1.173216195868310e-01, -1.183956374654636e-01, -2.225851511903672e-01, -2.235982381983995e-01, -1.062463383504011e-01, -1.118811061965044e-01, -2.703998853468565e+00, -2.702953313856961e+00, -1.339211232547162e-01, -1.417028273110977e-01, -1.339211232547163e-01, -1.417028273110977e-01, -3.449228312586299e-03, -3.582842317230857e-03, -4.406765324025935e-03, -4.475733284136796e-03, -3.285633111047670e-03, -3.480226894082853e-03, -7.347340497219335e-02, -7.386338639988789e-02, -3.385925795762073e-03, -4.594351405562386e-03, -3.385925795762076e-03, -4.594351405562393e-03, -8.456502785726296e-01, -8.491358697220736e-01, -8.254710332625733e-01, -8.290910439443591e-01, -8.324124330292340e-01, -8.360322693194627e-01, -8.383265109967378e-01, -8.418219261079614e-01, -8.353588332257975e-01, -8.389142661734976e-01, -8.353588332257975e-01, -8.389142661734976e-01, -8.291790909252995e-01, -8.318560761068258e-01, -6.313453206876044e-01, -6.343172232765745e-01, -6.746941814481866e-01, -6.783336386342586e-01, -7.306471825957549e-01, -7.335449335713814e-01, -7.013489150153551e-01, -7.041448486882159e-01, -7.013489150153551e-01, -7.041448486882159e-01, -9.444751173148461e-01, -9.477995223194734e-01, -2.814951362938894e-01, -2.830582428709154e-01, -3.343516977190468e-01, -3.376578631867618e-01, -4.426568477810125e-01, -4.451489589233644e-01, -3.842942964124030e-01, -3.841708614207363e-01, -3.842942964124031e-01, -3.841708614207362e-01, -5.835222012986526e-01, -5.882595324130813e-01, -4.331051702766578e-02, -4.361872593949302e-02, -5.833405509517946e-02, -6.027157881398630e-02, -4.312061489217459e-01, -4.412338463316892e-01, -9.097110321373536e-02, -9.594076126706709e-02, -9.097110321373536e-02, -9.594076126706717e-02, -1.090127832741604e-02, -1.130063678083109e-02, -1.195078787360371e-03, -1.200001696222861e-03, -2.400627912234118e-03, -2.553454212760572e-03, -8.717374797164715e-02, -8.859854689292833e-02, -3.202561128822914e-03, -4.211162369546132e-03, -3.202561128822912e-03, -4.211162369546126e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_11_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_11", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.425611310127584e-08, 0.000000000000000e+00, -3.425859689667132e-08, -3.425589794348430e-08, 0.000000000000000e+00, -3.425844013756655e-08, -3.425514510465697e-08, 0.000000000000000e+00, -3.425737883388751e-08, -3.425759896196252e-08, 0.000000000000000e+00, -3.426050078756333e-08, -3.425599681618661e-08, 0.000000000000000e+00, -3.425920380636384e-08, -3.425599681618661e-08, 0.000000000000000e+00, -3.425920380636384e-08, -2.850147571054381e-05, 0.000000000000000e+00, -2.849378555848727e-05, -2.850841605222370e-05, 0.000000000000000e+00, -2.849807835234964e-05, -2.864010590499942e-05, 0.000000000000000e+00, -2.866154482741652e-05, -2.859775929061155e-05, 0.000000000000000e+00, -2.859304013230907e-05, -2.850462123280626e-05, 0.000000000000000e+00, -2.870983393907918e-05, -2.850462123280626e-05, 0.000000000000000e+00, -2.870983393907918e-05, -9.139166276625321e-03, 0.000000000000000e+00, -9.323065328707830e-03, -9.102781481560055e-03, 0.000000000000000e+00, -9.297493690810494e-03, -8.484995868866663e-03, 0.000000000000000e+00, -8.498175367903678e-03, -8.991376128327032e-03, 0.000000000000000e+00, -9.169436771687871e-03, -9.215939143319047e-03, 0.000000000000000e+00, -8.574533822506596e-03, -9.215939143319047e-03, 0.000000000000000e+00, -8.574533822506596e-03, -1.224295773845925e+00, 0.000000000000000e+00, -1.362772178712881e+00, -1.235621801878071e+00, 0.000000000000000e+00, -1.383635587284653e+00, -1.935450818776789e-03, 0.000000000000000e+00, -2.335868214958539e-03, -8.235479590320769e-01, 0.000000000000000e+00, -1.002127628266314e+00, -1.037747681491415e+00, 0.000000000000000e+00, -8.209872961946028e-01, -1.037747681491414e+00, 0.000000000000000e+00, -8.209872961946029e-01, -3.236725393997193e+02, 0.000000000000000e+00, -2.894298226134749e+02, -2.978106374842516e+02, 0.000000000000000e+00, -2.637454958571253e+02, -6.471512566741540e+00, 0.000000000000000e+00, -6.121113272982842e+00, -6.802532742597270e+02, 0.000000000000000e+00, -7.211972073962047e+02, -3.860328435913834e+02, 0.000000000000000e+00, -1.265633363402135e+03, -3.860328435913830e+02, 0.000000000000000e+00, -1.265633363402135e+03, -1.026448689154715e-05, 0.000000000000000e+00, -1.027467262985567e-05, -1.026519718743469e-05, 0.000000000000000e+00, -1.027536314409476e-05, -1.026472198940692e-05, 0.000000000000000e+00, -1.027483773110821e-05, -1.026532219250547e-05, 0.000000000000000e+00, -1.027545578273373e-05, -1.026471233594774e-05, 0.000000000000000e+00, -1.027500188192811e-05, -1.026471233594774e-05, 0.000000000000000e+00, -1.027500188192811e-05, -2.592652805805310e-04, 0.000000000000000e+00, -2.605108842772462e-04, -2.621385576395269e-04, 0.000000000000000e+00, -2.632632428947484e-04, -2.578412677042275e-04, 0.000000000000000e+00, -2.594737566262844e-04, -2.608001621105539e-04, 0.000000000000000e+00, -2.623709590364293e-04, -2.618242242316399e-04, 0.000000000000000e+00, -2.622419357379815e-04, -2.618242242316399e-04, 0.000000000000000e+00, -2.622419357379815e-04, -4.813862346445539e-02, 0.000000000000000e+00, -4.915535814324626e-02, -4.101676067610618e-02, 0.000000000000000e+00, -4.131345617523564e-02, -5.346661185936704e-02, 0.000000000000000e+00, -5.320789077152623e-02, -5.560835170496031e-02, 0.000000000000000e+00, -5.248148182095973e-02, -4.447131821638657e-02, 0.000000000000000e+00, -5.108185975680676e-02, -4.447131821638658e-02, 0.000000000000000e+00, -5.108185975680675e-02, -1.183073204922529e+00, 0.000000000000000e+00, -1.154620031789987e+00, -6.248027411361422e-01, 0.000000000000000e+00, -6.162998432438817e-01, -1.319156766902424e+00, 0.000000000000000e+00, -1.312896427292284e+00, -4.283493748441237e-04, 0.000000000000000e+00, -4.292427325763017e-04, -1.290066916772199e+00, 0.000000000000000e+00, -1.619454003249773e+00, -1.290066916772200e+00, 0.000000000000000e+00, -1.619454003249774e+00, -7.208878321364818e+02, 0.000000000000000e+00, -6.627669242051835e+02, -6.290968684660356e+02, 0.000000000000000e+00, -5.590048549437045e+02, -3.421961524383745e+03, 0.000000000000000e+00, -3.175391868871880e+03, -2.586742369136182e+00, 0.000000000000000e+00, -2.949460003026142e+00, -8.316084324198231e+02, 0.000000000000000e+00, -1.496985066713482e+03, -8.316084324198243e+02, 0.000000000000000e+00, -1.496985066713482e+03, -6.608479011745554e-02, 0.000000000000000e+00, -6.511841687109650e-02, -6.647738723635604e-02, 0.000000000000000e+00, -6.551937366612864e-02, -6.637330967150197e-02, 0.000000000000000e+00, -6.541083024477369e-02, -6.626089504143000e-02, 0.000000000000000e+00, -6.529623111340183e-02, -6.631992822938323e-02, 0.000000000000000e+00, -6.535631579163183e-02, -6.631992822938323e-02, 0.000000000000000e+00, -6.535631579163183e-02, -7.282108795476236e-02, 0.000000000000000e+00, -7.195186202145341e-02, -9.357998918809940e-02, 0.000000000000000e+00, -9.265955772326889e-02, -9.133624027950234e-02, 0.000000000000000e+00, -9.028186992143396e-02, -8.580026614717726e-02, 0.000000000000000e+00, -8.472424512747487e-02, -8.890986021496979e-02, 0.000000000000000e+00, -8.788781713195151e-02, -8.890986021496979e-02, 0.000000000000000e+00, -8.788781713195151e-02, -3.219544141522140e-02, 0.000000000000000e+00, -3.258105410169207e-02, -4.631044713990163e-01, 0.000000000000000e+00, -4.603796398044906e-01, -3.689909386355225e-01, 0.000000000000000e+00, -3.708811785717633e-01, -2.482539664339566e-01, 0.000000000000000e+00, -2.432148661107542e-01, -3.288926128113963e-01, 0.000000000000000e+00, -3.318734190742976e-01, -3.288926128113964e-01, 0.000000000000000e+00, -3.318734190742977e-01, -1.081507030186825e-01, 0.000000000000000e+00, -1.089666583452481e-01, -7.387937026609484e+00, 0.000000000000000e+00, -7.140144430431118e+00, -3.648154332075633e+00, 0.000000000000000e+00, -3.540165347674958e+00, -3.464040095484072e-01, 0.000000000000000e+00, -3.772145529223571e-01, -2.288573820769762e+00, 0.000000000000000e+00, -2.486130130536301e+00, -2.288573820769761e+00, 0.000000000000000e+00, -2.486130130536304e+00, -8.478267824688513e+01, 0.000000000000000e+00, -7.693301038376744e+01, -4.843608158708812e+03, 0.000000000000000e+00, -3.285573250950616e+03, -4.549930597349714e+03, 0.000000000000000e+00, -4.129886214740941e+03, -2.717184742864442e+00, 0.000000000000000e+00, -2.994348317316539e+00, -1.696107453154877e+03, 0.000000000000000e+00, -1.812362219477420e+03, -1.696107453154881e+03, 0.000000000000000e+00, -1.812362219477424e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_11_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_11", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.287594195948170e-03, 2.287797612391220e-03, 2.287592959653229e-03, 2.287796682576682e-03, 2.287607893850749e-03, 2.287812740815526e-03, 2.287623331113466e-03, 2.287832118791630e-03, 2.287593271898323e-03, 2.287838132864062e-03, 2.287593271898323e-03, 2.287838132864062e-03, 6.290195828706359e-03, 6.283014553097428e-03, 6.292851829429495e-03, 6.284252750150443e-03, 6.338781975183474e-03, 6.345519454338406e-03, 6.344917545032574e-03, 6.339806903033382e-03, 6.285816652584614e-03, 6.381520121776252e-03, 6.285816652584614e-03, 6.381520121776252e-03, 8.086489909228929e-03, 8.277125032506180e-03, 8.065011969816927e-03, 8.231299841324322e-03, 7.488404838551965e-03, 7.849762872518326e-03, 9.234597399939778e-03, 9.515491806107520e-03, 7.861475401649734e-03, 1.025203931253639e-02, 7.861475401649734e-03, 1.025203931253639e-02, 5.109164044146206e-02, 6.868349706182941e-02, 5.236061959786489e-02, 7.245617261857681e-02, -4.356536407088543e-04, -1.476872007679300e-04, 1.168777381720619e-02, 1.746346074513480e-02, 4.817479232094441e-02, 3.548366460308813e-03, 4.817479232094420e-02, 3.548366460308787e-03, 5.060360240816062e-04, 5.468050447942903e-04, 5.314811069598642e-04, 5.838973731498405e-04, 1.819690946641967e-03, 2.070741337568256e-03, 2.064225691758513e-04, 2.120525713182928e-04, 4.178926289525052e-04, 2.072833009027048e-04, 4.178926289525094e-04, 2.072833009027044e-04, 9.628760563497939e-03, 9.631830420905946e-03, 9.627274689750534e-03, 9.630393012977656e-03, 9.628976062096338e-03, 9.631995837222773e-03, 9.627688855398563e-03, 9.630678222594138e-03, 9.627779741905021e-03, 9.631075338757679e-03, 9.627779741905021e-03, 9.631075338757679e-03, 1.536202775769319e-02, 1.547789013059027e-02, 1.602982717771370e-02, 1.612208717728086e-02, 1.533350201433324e-02, 1.544890954906386e-02, 1.594868810675013e-02, 1.607148711992003e-02, 1.576349430562651e-02, 1.582978415260650e-02, 1.576349430562651e-02, 1.582978415260650e-02, 6.254059927473876e-02, 6.371119244214221e-02, 6.320552650031211e-02, 6.397675503812784e-02, 4.429289677249517e-02, 5.329860767174041e-02, 4.743321720663146e-02, 5.302970009680315e-02, 6.588157766787887e-02, 6.307587098693032e-02, 6.588157766787889e-02, 6.307587098693036e-02, 6.372302870221185e-03, 6.280197311246726e-03, 2.804909138362384e-02, 2.793939233418883e-02, 5.011163786227912e-03, 6.091262426907850e-03, 1.607373960223334e-02, 1.608785129099624e-02, 1.110507827236032e-02, 1.737489140235495e-02, 1.110507827236027e-02, 1.737489140235508e-02, 6.645118395055866e-05, 7.071179311449630e-05, 1.506115650319072e-04, 1.367886524884059e-04, 3.852479478900144e-04, 4.218056288037275e-04, 3.100525824983788e-03, 3.955258078712270e-03, 6.135244304981486e-05, 5.149025477391252e-04, 6.135244304981474e-05, 5.149025477391284e-04, 8.243589177124362e-02, 8.214654470774373e-02, 8.350198629110171e-02, 8.320905833948498e-02, 8.315654192919600e-02, 8.286238610769353e-02, 8.284474846109263e-02, 8.255455488350076e-02, 8.300238311225597e-02, 8.271048983751103e-02, 8.300238311225597e-02, 8.271048983751109e-02, 8.300877787173684e-02, 8.284297998945594e-02, 8.643920874264260e-02, 8.650632515425327e-02, 8.948359247165960e-02, 8.939924376724431e-02, 8.871080847014420e-02, 8.845699429198148e-02, 8.923869237017551e-02, 8.916110859144950e-02, 8.923869237017551e-02, 8.916110859144950e-02, 5.541688593034455e-02, 5.690309243044858e-02, 4.360308709191036e-02, 4.402061318444482e-02, 5.529202331957091e-02, 5.718012027441334e-02, 6.723353969177456e-02, 6.656825552224374e-02, 6.932014386271218e-02, 6.976771716104294e-02, 6.932014386271244e-02, 6.976771716104281e-02, 7.082246538162416e-02, 7.350998142427805e-02, 2.116257989207204e-03, 2.063916925455403e-03, 2.334808325045358e-03, 2.519955498008336e-03, 7.855700156981042e-02, 9.729003662599137e-02, 5.790278568816884e-03, 7.528008770541168e-03, 5.790278568816884e-03, 7.528008770541202e-03, 3.024082310300052e-04, 2.999584825100524e-04, 1.280692430109805e-05, 6.556414217154209e-06, 2.148484873923041e-04, 2.340597437003528e-04, 6.208199208815602e-03, 7.771874649971127e-03, 1.189927469833179e-04, 4.796551989574869e-04, 1.189927469833198e-04, 4.796551989574905e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
