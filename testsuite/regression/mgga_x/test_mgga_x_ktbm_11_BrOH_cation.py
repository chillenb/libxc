
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_11_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_11", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.117059492455985e+01, -2.117070673088682e+01, -2.117120078973141e+01, -2.246767505002738e+01, -2.246836024974763e+01, -2.376645532731643e+01, -3.504728773045285e+00, -3.889276327414682e+00, -3.889941656863074e+00, -3.890026252111253e+00, -3.889611427742496e+00, -3.505312734554628e+00, -5.890682000432328e-01, -6.615114954404144e-01, -7.085453199637501e-01, -6.470960315832952e-01, -5.796751303713228e-01, -7.165776948525636e-01, -1.723602025099010e-01, -1.752646370173718e-01, -7.622444201431260e-01, -1.371714729415321e-01, -1.774709087432060e-01, -1.766831878104528e-01, -6.164310270203028e-03, -6.409555752486166e-03, -3.529323567607244e-02, -3.553902417523722e-03, -4.960868322190361e-03, -4.960868322190362e-03, -5.762469481750321e+00, -5.762901543486775e+00, -5.762486192297378e+00, -5.762867958375248e+00, -5.532372975081241e+00, -5.532578523861618e+00, -2.179997575437176e+00, -2.197929259489450e+00, -2.166687231176748e+00, -2.182680838347227e+00, -1.973646701832690e+00, -2.196339377945851e+00, -6.046724091513118e-01, -7.085848447830746e-01, -6.083726222951722e-01, -6.323958787870674e-01, -6.203160305736556e-01, -6.681165383746352e-01, -9.404461626580973e-02, -1.713803446511617e-01, -8.701626557258105e-02, -2.147324157136391e+00, -1.114064630091563e-01, -1.114064630091563e-01, -2.706850856013329e-03, -3.474149420675302e-03, -2.660581390736006e-03, -5.691386096851260e-02, -3.342158388782635e-03, -3.342158388782636e-03, -6.446451108138662e-01, -6.441100756214512e-01, -6.199371051348790e-01, -6.343101890839782e-01, -6.220616904751096e-01, -6.331982788227204e-01, -6.276142873909698e-01, -5.020113870617930e-01, -5.345052558556285e-01, -5.985326302896874e-01, -5.877716155302276e-01, -5.507954250138791e-01, -7.008291321597295e-01, -2.346165330112616e-01, -2.598070205034529e-01, -3.476713666157084e-01, -3.335938815017098e-01, -2.993557596140352e-01, -5.072973232585187e-01, -3.308493556680893e-02, -4.675913092268064e-02, -3.751327539658669e-01, -7.450987921042770e-02, -7.450987921042772e-02, -8.434401478512151e-03, -9.285465590877259e-04, -1.895949877733217e-03, -6.607563721525329e-02, -3.069184846810695e-03, -3.001398989774915e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_11_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_11", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.106439608095237e+01, -3.106453247576415e+01, -3.106452233961311e+01, -3.106462415113313e+01, -3.106493634680471e+01, -3.106521447330534e+01, -3.106351186802806e+01, -2.839298267491701e+01, -3.106447154387015e+01, -2.839386061914503e+01, -2.839408817754640e+01, -2.839386061914503e+01, -4.434218368206395e+00, -4.556598034098925e+00, -4.434228057117756e+00, -4.434163835630487e+00, -4.434403676589352e+00, -4.434483144974520e+00, -4.434712067992296e+00, -4.434774209159382e+00, -4.433486323911044e+00, -4.435023218462035e+00, -4.555513454913456e+00, -4.435023218462035e+00, -7.621160695680713e-01, -7.678720791530769e-01, -7.601787190483181e-01, -8.670335375131289e-01, -8.465672043922866e-01, -8.409327464718175e-01, -8.492926709273393e-01, -7.444488144906583e-01, -7.756358460119053e-01, -7.080277623763559e-01, -8.739396104646718e-01, -8.213184764233119e-01, -1.891649338719799e-01, -2.285949654214094e-01, -1.913113635065760e-01, -2.325554067473680e-01, -9.967768794209065e-01, -8.840117904195012e-01, -1.690462032455735e-01, -1.714087407889699e-01, -2.298524931851339e-01, -1.231360440898709e-01, -2.298524931851337e-01, -1.193929476408661e-01, -7.566472045100033e-03, -8.040260528637613e-03, -8.082600403021304e-03, -8.493675129794792e-03, -4.459637597577033e-02, -4.654572290970703e-02, -4.548448500317336e-03, -4.472658369141539e-03, -6.750031415103841e-03, -3.841209919841985e-03, -6.750031415103845e-03, -3.841209919841984e-03, -7.075325415858976e+00, -7.073650022085270e+00, -7.079755675112833e+00, -7.077930378770644e+00, -7.075622480394760e+00, -7.073833869964814e+00, -7.079421824217885e+00, -7.077720327473636e+00, -7.609152289897536e+00, -7.075792756035222e+00, -7.077555283114628e+00, -7.607293293820274e+00, -2.500912687467570e+00, -2.500613835310603e+00, -2.517711533111648e+00, -2.516920502555045e+00, -2.487065802178821e+00, -2.490713320904662e+00, -2.501413872935547e+00, -2.505306812781809e+00, -2.520810278290988e+00, -2.485061656138566e+00, -2.520810278290988e+00, -2.510565916103150e+00, -7.560011010215688e-01, -8.257450096261253e-01, -8.492631799579460e-01, -8.517517620269519e-01, -6.794978754796430e-01, -7.057126163372824e-01, -7.127890815658692e-01, -7.409622116628001e-01, -7.931155492115864e-01, -8.195883454981547e-01, -7.931155492115870e-01, -7.482725260162750e-01, -1.175938520186282e-01, -1.187146369725058e-01, -1.973538876177731e-01, -2.253071774250298e-01, -1.063853576218687e-01, -1.120957083725276e-01, -2.491534383285469e+00, -2.490516683708037e+00, -1.345506374916559e-01, -1.425598655934004e-01, -1.345506374916560e-01, -1.425598655934004e-01, -3.479532216679838e-03, -3.546106421076872e-03, -4.376410098649658e-03, -4.442647636602694e-03, -3.272557558021788e-03, -3.465751462287135e-03, -7.331980331485960e-02, -7.342109490156384e-02, -3.342427497850480e-03, -4.590203204718911e-03, -3.342427497850479e-03, -4.590203204718914e-03, -8.367421499907548e-01, -8.404298377825038e-01, -8.170560588342939e-01, -8.208516022740056e-01, -8.551717827705275e-01, -8.584207099228442e-01, -8.559149967602048e-01, -8.332636828084001e-01, -8.555569360926194e-01, -8.587948474282272e-01, -8.555569360926193e-01, -8.304219323411468e-01, -8.121955123059728e-01, -8.153864214589409e-01, -6.280459316083299e-01, -6.778535759175207e-01, -6.673459124362318e-01, -7.385718909222615e-01, -7.186723760612450e-01, -7.215751138240482e-01, -6.910493076551427e-01, -6.941085667861322e-01, -6.910493076551429e-01, -7.634374822811071e-01, -8.786016933536498e-01, -9.698893186462176e-01, -2.832360552181469e-01, -2.848713692536757e-01, -2.940832986274635e-01, -3.420478393141759e-01, -4.338135887521283e-01, -4.455815449022285e-01, -3.887714133897832e-01, -3.885780681995279e-01, -3.887714133897828e-01, -3.576264231945033e-01, -5.760027250829980e-01, -5.799912202896993e-01, -4.376645948709521e-02, -4.406466757411739e-02, -5.817446201557051e-02, -6.012023101804825e-02, -4.241270726816633e-01, -4.307987686141115e-01, -9.101185802599472e-02, -9.609056999223348e-02, -9.101185802599480e-02, -9.609056999223350e-02, -1.103226991668351e-02, -1.143187238062449e-02, -1.177417688925596e-03, -1.180108757050686e-03, -2.443041234489436e-03, -2.598349865197614e-03, -8.558396434257656e-02, -8.668011956025121e-02, -3.165986077158251e-03, -4.207263416175081e-03, -3.165986077158249e-03, -4.289716966694870e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_11_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_11", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.120431051663146e-08, 0.000000000000000e+00, -3.120639255093148e-08, -3.120418927708415e-08, 0.000000000000000e+00, -3.120630404967368e-08, -3.120361603630994e-08, 0.000000000000000e+00, -3.120553406040323e-08, -3.120500850225133e-08, 0.000000000000000e+00, -3.448541787697571e-08, -3.120425485202232e-08, 0.000000000000000e+00, -3.448397274156826e-08, -3.448174213052597e-08, 0.000000000000000e+00, -3.448397274156826e-08, -3.166659967295554e-05, 0.000000000000000e+00, -2.632565576982277e-05, -3.167353134856102e-05, 0.000000000000000e+00, -3.166697186208244e-05, -3.180877896203693e-05, 0.000000000000000e+00, -3.183163401124262e-05, -3.174891024608282e-05, 0.000000000000000e+00, -3.174731986641464e-05, -3.167144817252067e-05, 0.000000000000000e+00, -3.186672284433295e-05, -2.633243411546415e-05, 0.000000000000000e+00, -3.186672284433295e-05, -8.412998448031048e-03, 0.000000000000000e+00, -8.609175531593167e-03, -8.369887351135455e-03, 0.000000000000000e+00, -1.084742526839911e-02, -9.862712016432500e-03, 0.000000000000000e+00, -9.833912835499463e-03, -1.033232424421197e-02, 0.000000000000000e+00, -8.264493836838666e-03, -8.558632818532325e-03, 0.000000000000000e+00, -7.411303511271167e-03, -1.079526863465132e-02, 0.000000000000000e+00, -9.642827374440924e-03, -9.227664420193075e-01, 0.000000000000000e+00, -1.376440285542779e+00, -9.434355697865897e-01, 0.000000000000000e+00, -1.401445696634667e+00, -2.534392492099614e-03, 0.000000000000000e+00, -2.211058869809053e-03, -9.334548446484705e-01, 0.000000000000000e+00, -1.076307385792062e+00, -1.072601239786571e+00, 0.000000000000000e+00, -1.082101078918213e+00, -1.072601239786571e+00, 0.000000000000000e+00, -3.164005964176994e-01, -3.277489373491275e+02, 0.000000000000000e+00, -2.909792467702271e+02, 3.845768078678331e+01, 0.000000000000000e+00, -2.668407677561287e+02, 3.016934120718795e-01, 0.000000000000000e+00, -6.756438097093178e+00, -7.739336771004284e+02, 0.000000000000000e+00, -8.044457947629253e+02, -4.010363855934492e+02, 0.000000000000000e+00, -1.617428539937035e+03, -4.010363855934492e+02, 0.000000000000000e+00, -1.617428539937035e+03, -1.026959159127627e-05, 0.000000000000000e+00, -1.027948961656057e-05, -1.027024435301775e-05, 0.000000000000000e+00, -1.028012453419647e-05, -1.026970673753430e-05, 0.000000000000000e+00, -1.027956857070149e-05, -1.027026205359318e-05, 0.000000000000000e+00, -1.028014048012144e-05, -9.542933822072701e-06, 0.000000000000000e+00, -1.027980568048513e-05, -1.026987593195838e-05, 0.000000000000000e+00, -9.552104263544012e-06, -2.661905585800192e-04, 0.000000000000000e+00, -2.672538517320518e-04, -2.681630737154154e-04, 0.000000000000000e+00, -2.691373738332857e-04, -2.636650407297165e-04, 0.000000000000000e+00, -2.654575152062474e-04, -2.658048946191796e-04, 0.000000000000000e+00, -2.675040497468151e-04, -2.690170017111738e-04, 0.000000000000000e+00, -2.208007378390707e-04, -2.690170017111738e-04, 0.000000000000000e+00, -2.686299769295903e-04, -5.102944223127555e-02, 0.000000000000000e+00, -4.490329002642899e-02, -4.383562737457938e-02, 0.000000000000000e+00, -4.404482405648152e-02, -5.899405391006094e-02, 0.000000000000000e+00, -5.775756123067825e-02, -6.274807008502882e-02, 0.000000000000000e+00, -5.833464102180127e-02, -4.665997164393528e-02, 0.000000000000000e+00, -4.699678201916679e-02, -4.665997164393530e-02, 0.000000000000000e+00, -5.433402700551630e-02, -1.320140123566458e+00, 0.000000000000000e+00, -1.300495299965146e+00, -4.212757565872426e-01, 0.000000000000000e+00, -6.332997998802677e-01, -1.517881090634415e+00, 0.000000000000000e+00, -1.470924389819115e+00, -4.776701283863811e-04, 0.000000000000000e+00, -4.786502928903532e-04, -1.387587916705729e+00, 0.000000000000000e+00, -1.705357340916060e+00, -1.387587916705729e+00, 0.000000000000000e+00, -1.705357340916061e+00, 1.527668955523595e+02, 0.000000000000000e+00, -1.041028521727649e+03, -8.140890376928546e+02, 0.000000000000000e+00, -7.416674832892038e+02, -3.909316579696590e+03, 0.000000000000000e+00, -3.653059999878456e+03, -3.090088451481382e+00, 0.000000000000000e+00, -3.671720483797361e-01, -1.625152829420657e+03, 0.000000000000000e+00, -1.538482919306243e+03, -1.625152829420657e+03, 0.000000000000000e+00, -1.538482919306243e+03, -6.673151651824351e-02, 0.000000000000000e+00, -6.573867452385053e-02, -6.709494477301468e-02, 0.000000000000000e+00, -6.611261259981731e-02, -6.466515402368914e-02, 0.000000000000000e+00, -6.376317256543983e-02, -6.495094913021725e-02, 0.000000000000000e+00, -6.590766803336830e-02, -6.480994628925317e-02, 0.000000000000000e+00, -6.389877446249106e-02, -6.480994628925317e-02, 0.000000000000000e+00, -6.596390722985755e-02, -7.423976575947132e-02, 0.000000000000000e+00, -7.330537961120283e-02, -9.440528956050434e-02, 0.000000000000000e+00, -7.933184111042894e-02, -9.246562151950943e-02, 0.000000000000000e+00, -8.005731848104013e-02, -8.714716016448840e-02, 0.000000000000000e+00, -8.604631906562292e-02, -9.024701711060719e-02, 0.000000000000000e+00, -8.916357535421307e-02, -9.024701711060719e-02, 0.000000000000000e+00, -7.955997839094504e-02, -3.492715246264037e-02, 0.000000000000000e+00, -3.159102699452936e-02, -4.699333997936695e-01, 0.000000000000000e+00, -4.673554444429913e-01, -2.954487948501536e-01, 0.000000000000000e+00, -3.815702983402767e-01, -2.176340303227367e-01, 0.000000000000000e+00, -2.604770173327995e-01, -3.426259315134543e-01, 0.000000000000000e+00, -3.457965285842456e-01, -3.426259315134544e-01, 0.000000000000000e+00, -2.784197515227423e-01, -1.130806453485299e-01, 0.000000000000000e+00, -1.135298345606158e-01, 3.289805049208664e-01, 0.000000000000000e+00, 3.191213932618150e-01, -4.149210291242217e+00, 0.000000000000000e+00, -4.001508757037433e+00, -3.737709370562615e-01, 0.000000000000000e+00, -3.984696806961210e-01, -2.542787994532975e+00, 0.000000000000000e+00, -2.731779462839308e+00, -2.542787994532977e+00, 0.000000000000000e+00, -2.731779462839311e+00, 1.395940615473394e+01, 0.000000000000000e+00, 1.287095236535467e+01, -1.204692717468767e+04, 0.000000000000000e+00, -1.196565698707024e+04, 6.318214251312686e+02, 0.000000000000000e+00, 5.745124831584549e+02, -6.414660141991970e-01, 0.000000000000000e+00, -7.450497920297257e-01, -2.910967510892630e+03, 0.000000000000000e+00, -1.863906628793711e+03, -2.910967510892635e+03, 0.000000000000000e+00, 2.400069080845336e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_11_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_11", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.663331740064207e-03, 1.663518765709846e-03, 1.663353504102249e-03, 1.663534536465324e-03, 1.663411889180478e-03, 1.663621304420911e-03, 1.663168169582402e-03, 2.335002208272793e-03, 1.663345989225389e-03, 2.334975716377855e-03, 2.334938766306894e-03, 2.334975716377855e-03, 1.125874267631207e-02, 2.979823245998092e-03, 1.126062061464112e-02, 1.125856817392535e-02, 1.129708162959554e-02, 1.130346945662968e-02, 1.128289418669464e-02, 1.128278580985445e-02, 1.125635991612033e-02, 1.131534061505063e-02, 2.977120945363668e-03, 1.131534061505063e-02, -2.076209890202160e-03, -1.819197801548704e-03, -2.146784250015324e-03, 3.090558163356119e-02, 2.626354053142896e-02, 2.567869626583745e-02, 2.775229549511551e-02, -2.561187342301055e-03, -1.631994122886612e-03, -3.397365574223612e-03, 3.147309716785889e-02, 2.348867539104126e-02, -1.245324173303047e-02, 7.234946298515148e-02, -1.256927777721676e-02, 7.753283877224013e-02, 1.102107955466502e-02, -2.761726769224987e-03, 1.913202738070056e-02, 2.318266326677550e-02, 5.728773160648930e-02, 8.130416584414423e-03, 5.728773160648937e-02, -1.675252540805254e-03, 5.186880785808451e-04, 5.525989243102067e-04, -1.420131063979074e-06, 5.975045613700187e-04, -1.159109104941337e-04, 2.545934752202942e-03, 2.658882637259912e-04, 2.627822507276181e-04, 4.505005210149533e-04, 3.346899553200289e-04, 4.505005210149533e-04, 3.346899553200261e-04, 9.642059564091513e-03, 9.644370701794896e-03, 9.640391607527611e-03, 9.642759221964706e-03, 9.641960315186028e-03, 9.644310518449937e-03, 9.640529174224905e-03, 9.642846594324317e-03, 7.786909445231609e-03, 9.643566471362951e-03, 9.641215673632976e-03, 7.788618743836459e-03, 1.753584622750981e-02, 1.759031682136426e-02, 1.792692486807564e-02, 1.796792389710812e-02, 1.715931853475890e-02, 1.732216919257712e-02, 1.752266204550869e-02, 1.768322764325193e-02, 1.802561693765159e-02, 3.174495699352971e-03, 1.802561693765159e-02, 1.783400668258232e-02, 7.942920785482117e-02, 4.006940534327857e-02, 7.838307037385095e-02, 7.844611642461678e-02, 7.493196102862691e-02, 7.861993641402931e-02, 8.313293087936843e-02, 8.290558368459471e-02, 7.891267442940092e-02, 4.122897014361961e-02, 7.891267442940089e-02, 8.101706942529467e-02, 8.645126652468046e-03, 8.772097704575443e-03, -8.286457127234083e-03, 3.154852389580905e-02, 7.268711333195624e-03, 8.310048153589945e-03, 2.509254019135997e-02, 2.510660622732545e-02, 1.400808293713918e-02, 2.089258359921739e-02, 1.400808293713911e-02, 2.089258359921743e-02, -5.803522933701652e-08, 1.694574163078822e-04, 2.491260910632616e-04, 2.374239089941949e-04, 5.002792114167286e-04, 5.553009346857456e-04, 4.686729315830579e-03, -6.521270972106147e-04, 2.215324213623685e-04, 5.434084844559818e-04, 2.215324213623665e-04, 5.434084844559825e-04, 8.420779560322803e-02, 8.385918948859175e-02, 8.538967870343020e-02, 8.503457461016828e-02, 7.817953860460254e-02, 7.802794458696040e-02, 7.914242718565026e-02, 8.431230534886001e-02, 7.866861081389763e-02, 7.849614448635213e-02, 7.866861081389763e-02, 8.448498068170646e-02, 8.664668607695165e-02, 8.633352779870411e-02, 8.964021530234835e-02, 3.607015819334789e-02, 9.355548440273283e-02, 5.346802000215686e-02, 9.303072548944299e-02, 9.272615380184702e-02, 9.381285194030799e-02, 9.354882232135983e-02, 9.381285194030806e-02, 6.128753620931569e-02, 7.402210965571504e-02, 5.051053374417509e-02, 4.696603063148821e-02, 4.752667445092715e-02, -7.471179890918339e-03, 6.698691124446475e-02, 1.506960752022119e-02, 9.724759039009442e-02, 8.712990237899794e-02, 8.776811146452179e-02, 8.712990237899791e-02, 2.506756427730466e-03, 8.773858744091897e-02, 8.912390741828814e-02, -1.152966326213491e-04, -1.153268072536132e-04, 3.081224890056523e-03, 3.288301513566566e-03, 1.166445674441473e-01, 1.254230968994187e-01, 7.585639753444661e-03, 9.722837957928858e-03, 7.585639753444683e-03, 9.722837957928934e-03, -1.681506307882294e-06, -1.844090964517225e-06, 7.177233919065544e-05, 7.177807657913897e-05, -8.350459069644869e-08, -1.064387168037039e-07, -1.364075917834035e-03, -1.594578162453087e-03, 3.372525976083562e-04, 5.069020575923101e-04, 3.372525976083561e-04, -6.344096606258849e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
