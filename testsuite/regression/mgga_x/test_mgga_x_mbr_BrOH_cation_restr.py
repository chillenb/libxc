
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mbr_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbr", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.911857425086697e+01, -1.911862180376612e+01, -1.911885198984532e+01, -1.911814372631086e+01, -1.911851217707787e+01, -1.911851217707787e+01, -3.175958809860526e+00, -3.175938780821398e+00, -3.175468762118019e+00, -3.175945913229609e+00, -3.175564723843564e+00, -3.815962682029546e+00, -6.369493566444751e-01, -8.159973723023426e-01, -8.122275395450385e-01, -8.105224784812334e-01, -8.110148676076722e-01, -8.110148676076722e-01, -2.258012702159924e-01, -2.272501197849466e-01, -7.865052579046644e-01, -2.026862355953474e-01, -2.106353008801503e-01, -2.106353008801503e-01, -5.529743698442609e-02, -5.557111043207578e-02, -1.070942359154670e-01, -5.177586088677757e-02, -5.104890805275451e-02, -5.104890805275451e-02, -4.944968269838912e+00, -4.943419486812229e+00, -4.944871962773033e+00, -4.646784621343597e+00, -4.944195349069730e+00, -4.944195349069730e+00, -1.801045381332347e+00, -1.811081293046348e+00, -1.793972549153302e+00, -1.802699281872932e+00, -1.810020097348030e+00, -2.210959024012875e+00, -6.068132018133688e-01, -6.189945862953876e-01, -5.857916404254653e-01, -5.826902300869685e-01, -6.094281395974035e-01, -5.369063583666273e-01, -1.222948595136677e-01, -2.458872419310025e-01, -1.163545576494371e-01, -1.948631743306013e+00, -1.744834092032549e-01, -1.744834092032549e-01, -3.219808962883073e-02, -5.279540141546891e-02, -3.307939923085938e-02, -9.069478121850803e-02, -2.566732685010676e-02, -4.153649023253293e-02, -5.335467340901006e-01, -5.402766404893035e-01, -5.222718192152600e-01, -5.359993453991153e-01, -5.369840497272825e-01, -5.369840497272825e-01, -5.204281013547647e-01, -5.221628208947542e-01, -5.232939528241369e-01, -5.217706026968938e-01, -5.227772463941105e-01, -4.725446394210123e-01, -6.599653025934656e-01, -2.194008840087198e-01, -3.268437399586775e-01, -3.202012984186325e-01, -3.557018397819623e-01, -3.557018397819624e-01, -4.134028726308420e-01, -1.050579144984530e-01, -1.212323881993518e-01, -3.645160193864037e-01, -1.004652985111155e-01, -1.400765471731459e-01, -6.923015571950461e-02, -3.961309274467191e-02, -3.653963658513673e-02, -1.343153277557544e-01, -3.810723854954763e-02, -3.810723854956144e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mbr_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbr", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.518138985675495e+01, -2.518146274803996e+01, -2.518180740735357e+01, -2.518072267901965e+01, -2.518128812398056e+01, -2.518128812398056e+01, -4.063505616565273e+00, -4.063532241304457e+00, -4.064303002634957e+00, -4.064360269382041e+00, -4.063931863643113e+00, -3.883019419614928e+00, -7.662678015329820e-01, -7.938571199144988e-01, -7.816220622672058e-01, -7.839961885372462e-01, -7.835637068019480e-01, -7.835637068019480e-01, -2.121810985084226e-01, -2.145281934224537e-01, -8.772866640024504e-01, -1.733469420756487e-01, -1.882759792277163e-01, -1.882759792277164e-01, -2.411521957564693e-02, -2.448423985616067e-02, -6.510310602938461e-02, -2.054962613276843e-02, -2.118448934180343e-02, -2.118448934180343e-02, -5.821060826826314e+00, -5.824370225958865e+00, -5.821242887328122e+00, -6.145586265022493e+00, -5.822722269927445e+00, -5.822722269927445e+00, -2.277398437626072e+00, -2.296053179078198e+00, -2.263583092501162e+00, -2.280188057644618e+00, -2.294376775706279e+00, -2.228800959855701e+00, -6.383457811092083e-01, -7.016847325717708e-01, -6.006165012971548e-01, -6.137865542750898e-01, -6.475025976419856e-01, -7.012278550102077e-01, -1.226739825338502e-01, -2.205793304992710e-01, -1.156602544498291e-01, -2.084349403834018e+00, -1.446398587893345e-01, -1.446398587893344e-01, -2.208163299711953e-02, -2.080268958579592e-02, -1.350563533356249e-02, -8.595407238957636e-02, -1.817339425860899e-02, -1.682906236251883e-02, -6.853210102634775e-01, -6.715108947609714e-01, -6.939406377291094e-01, -6.803325329387162e-01, -6.783227736577699e-01, -6.783227736577699e-01, -6.653864666497409e-01, -5.402065415330412e-01, -5.598546552365579e-01, -5.938875760538159e-01, -5.742658486374675e-01, -6.207045083317903e-01, -7.295194918371649e-01, -2.458332400535481e-01, -3.149689384570414e-01, -4.043462057731533e-01, -3.515659072391305e-01, -3.515659072391306e-01, -5.300952327345444e-01, -6.322577904264456e-02, -7.833855182244773e-02, -3.723561416099959e-01, -9.960007286766931e-02, -1.055956542207841e-01, -3.101922505367026e-02, -1.351137812601860e-02, -1.391300907520083e-02, -1.001434723103179e-01, -1.546387998100684e-02, -1.546387998097862e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbr_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbr", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.470321679059379e-08, -1.470301760518188e-08, -1.470209565042149e-08, -1.470505766716032e-08, -1.470351075494110e-08, -1.470351075494110e-08, -2.410999976260770e-05, -2.410853841308889e-05, -2.406841946255350e-05, -2.407588425042119e-05, -2.408509133890905e-05, -7.412862007611611e-06, -2.069009671486724e-02, -3.121793516853272e-03, -3.140824917516424e-03, -3.183754991073312e-03, -3.172000662576707e-03, -3.172000662576707e-03, -5.200344409191594e-01, -5.072651403482296e-01, -1.145543167470458e-02, -8.662231226762532e-01, -7.029526651810860e-01, -7.029526651810857e-01, -5.815969762105871e+03, -5.092079680048722e+03, -3.354922100214815e+01, -2.524172129610856e+04, -1.452033711968777e+04, -1.452033711968777e+04, -2.818802736217318e-06, -2.819910330189029e-06, -2.818882962423859e-06, -4.059516353603267e-06, -2.819351485424483e-06, -2.819351485424483e-06, -2.512494146438905e-04, -2.418430536613735e-04, -2.585547905529746e-04, -2.498637686626801e-04, -2.426271021872150e-04, -6.342941081846565e-05, -1.271703958885261e-02, -1.185549925127403e-02, -1.373241120892191e-02, -1.498681247883540e-02, -1.265340332223916e-02, -2.538487509911285e-02, -2.284227381056036e+01, -3.773087235959331e-01, -2.865885267614492e+01, -1.217085304223788e-04, -1.664096223446832e+00, -1.664096223446832e+00, -4.922056589738131e+05, -2.598037896680056e+04, -1.019977254422657e+05, -9.358528550581278e+01, -4.745255978394335e+05, -4.552956496162112e+04, -1.976662349129882e-02, -1.883210363455875e-02, -2.434063563504675e-02, -1.931683691943838e-02, -1.917735921199848e-02, -1.917735921199848e-02, -2.177632857977890e-02, -2.238366818285520e-02, -2.340534587851775e-02, -2.341590555655323e-02, -2.362681808924501e-02, -4.034128343319442e-02, -9.289515508862601e-03, -1.870565692172744e+00, -1.199380518759022e-01, -2.535321219670661e-01, -8.905547156438079e-02, -8.905547156438091e-02, -8.275064053675629e-02, -3.809675541910975e+01, -1.542184977089510e+01, -9.035698354529353e-02, -5.200922735750503e+01, -5.016726187635320e+00, -1.767656705593071e+03, -1.192230760551636e+06, -1.933739728257821e+05, -6.125158685613504e+00, -6.290064774505389e+04, -6.290064774513712e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbr_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbr", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.817876937841132e-04, -1.817867520252293e-04, -1.817825838291550e-04, -1.817965663735150e-04, -1.817892373246550e-04, -1.817892373246550e-04, -1.286416519363371e-03, -1.286346876716317e-03, -1.284492895400753e-03, -1.285124688733351e-03, -1.285190416514064e-03, -1.183827038000501e-03, -7.921587124678341e-03, -4.114896239482987e-03, -3.909982091708989e-03, -4.019595525272646e-03, -3.993644896443979e-03, -3.993644896443979e-03, -1.265225940315575e-02, -1.281411183384289e-02, -6.953654845952667e-03, -1.029558473557587e-02, -1.132468823024884e-02, -1.132468823024882e-02, -8.093811037068136e-03, -8.258724035827506e-03, -8.793820005715748e-03, -6.791587502714687e-03, -7.740181184185175e-03, -7.740181184185175e-03, -1.020910203579534e-03, -1.019353379739431e-03, -1.020822510995718e-03, -7.273316481424131e-04, -1.020131682900769e-03, -1.020131682900769e-03, -2.389399484223998e-03, -2.350356158626586e-03, -2.420018788893408e-03, -2.384177583607951e-03, -2.353177621567688e-03, -1.909669827118899e-03, -8.686798215283394e-03, -8.668528673389329e-03, -8.100206111123906e-03, -9.075208633778782e-03, -8.822370257548773e-03, -6.824885605687584e-03, -2.204761681137330e-02, -9.815745915328727e-03, -2.190198313526831e-02, -2.783944785844334e-03, -1.097296716015367e-02, -1.097296716015368e-02, -1.210934645568193e-02, -6.532127974882365e-03, -1.145269621475046e-02, -2.176043708972690e-02, -1.856061855491175e-02, -8.940231221711236e-03, -7.146762166547370e-03, -8.042213322586379e-03, -6.258530926656646e-03, -7.485341628254599e-03, -7.617517345994727e-03, -7.617517345994727e-03, -7.476923300379030e-03, -9.530087591171462e-03, -1.036911938799524e-02, -1.023375576823841e-02, -1.048865204523823e-02, -7.486133031889704e-03, -8.293194688949906e-03, -2.497967951152056e-02, -9.783413233282546e-03, -1.351421614722713e-02, -1.035227298182456e-02, -1.035227298182458e-02, -9.780078488598829e-03, -8.774134738077760e-03, -8.850881512432801e-03, -1.271877107267360e-02, -2.496611696663933e-02, -1.079093535548526e-02, -6.904885473533203e-03, -5.739108114787489e-03, -8.595344394854387e-03, -1.096823919283498e-02, -9.784836447816124e-03, -9.784836447829034e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
