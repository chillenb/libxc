
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mbr_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbr", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.075315078125410e+01, -2.075315905412077e+01, -2.075328340911959e+01, -2.075315797398507e+01, -2.075321125325080e+01, -2.075321125325080e+01, -3.543778802429042e+00, -3.543698645707963e+00, -3.541829819706740e+00, -3.544632939936999e+00, -3.543238732246574e+00, -3.543238732246574e+00, -7.363216004235602e-01, -7.364938667041991e-01, -7.411726106412586e-01, -7.438389495819815e-01, -7.425811611794396e-01, -7.425811611794396e-01, -2.239219080995740e-01, -2.249677317235150e-01, -8.822947726816376e-01, -1.961513811530045e-01, -2.056987166012143e-01, -2.056987166012143e-01, -5.517321336732892e-02, -5.534375718369638e-02, -1.045299614187416e-01, -5.016129291763449e-02, -5.009342732914332e-02, -5.009342732914329e-02, -4.943273026703285e+00, -4.941743398949197e+00, -4.943211971402211e+00, -4.941861626159366e+00, -4.942492173081577e+00, -4.942492173081577e+00, -2.177060329871242e+00, -2.185088657195992e+00, -2.179306395459312e+00, -2.186423500352150e+00, -2.180290532942069e+00, -2.180290532942069e+00, -5.829687213393722e-01, -5.880247556423278e-01, -5.500085146851514e-01, -5.311289396737942e-01, -5.862667031624798e-01, -5.862667031624798e-01, -1.645171195868453e-01, -2.433827755094553e-01, -1.569887227339804e-01, -1.779982294434108e+00, -1.711842999883261e-01, -1.711842999882893e-01, -4.701904572206370e-02, -4.924053651816360e-02, -3.191626618945071e-02, -1.252239528760263e-01, -3.907014599218770e-02, -3.907014599218772e-02, -5.294208622381308e-01, -5.365805361744596e-01, -5.341398058420372e-01, -5.320606777687030e-01, -5.331070947156609e-01, -5.331070947156609e-01, -5.123195740379811e-01, -5.195013638518904e-01, -5.191263352139054e-01, -5.160168781994229e-01, -5.175215475641498e-01, -5.175215475641498e-01, -6.196001051005704e-01, -2.868836819776771e-01, -3.223086835308605e-01, -3.776121936916361e-01, -3.480120759394859e-01, -3.480120759393653e-01, -4.823206135768867e-01, -1.037904987637180e-01, -1.178678049039252e-01, -3.495071330050467e-01, -1.366140290633263e-01, -1.366140290633263e-01, -6.463217710226632e-02, -3.119301094613688e-02, -3.589955946154642e-02, -1.322063267314660e-01, -3.641479377601016e-02, -3.641479377601013e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mbr_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbr", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.351029970126405e+01, -2.351039814323964e+01, -2.351080813893669e+01, -2.350934444336609e+01, -2.351011527678031e+01, -2.351011527678031e+01, -3.791532817303465e+00, -3.791531206651502e+00, -3.791568388496320e+00, -3.791925488189078e+00, -3.791478497797153e+00, -3.791478497797153e+00, -7.570908524742010e-01, -7.568571724561578e-01, -7.515565859172416e-01, -7.549348444925806e-01, -7.538800835478079e-01, -7.538800835478079e-01, -2.116247505341398e-01, -2.138276535568802e-01, -9.063485230514595e-01, -1.721281272034138e-01, -1.871693319703823e-01, -1.871693319703822e-01, -2.410806367024331e-02, -2.447087862046327e-02, -6.486027619301946e-02, -2.049041750552734e-02, -2.113998956558804e-02, -2.113998956558816e-02, -5.822649397739823e+00, -5.825946904924172e+00, -5.822798732204119e+00, -5.825709607078903e+00, -5.824321396489013e+00, -5.824321396489013e+00, -2.205420425369193e+00, -2.216357854777963e+00, -2.201639356091124e+00, -2.211275734187854e+00, -2.213232927174784e+00, -2.213232927174784e+00, -6.401990741471344e-01, -7.304964869453294e-01, -5.913726677164977e-01, -6.370045158743527e-01, -6.529089981606034e-01, -6.529089981606034e-01, -1.299809939389747e-01, -2.200139647895218e-01, -1.220780793057120e-01, -2.193414443629893e+00, -1.440856407370679e-01, -1.440856407371466e-01, -1.996200748109214e-02, -2.070467910884162e-02, -1.345850611513321e-02, -8.933325112098445e-02, -1.674526947007682e-02, -1.674526947007687e-02, -6.897549584857849e-01, -6.753538809750255e-01, -6.803030354848536e-01, -6.844633403407107e-01, -6.823717938806304e-01, -6.823717938806304e-01, -6.743067689710955e-01, -5.392324075808472e-01, -5.603405254928947e-01, -5.984901607856434e-01, -5.767359614123232e-01, -5.767359614123232e-01, -7.628595569721348e-01, -2.692665762418606e-01, -3.133147008744515e-01, -3.872858544238472e-01, -3.480116783302156e-01, -3.480116783308855e-01, -4.989632824669462e-01, -6.310426328541988e-02, -7.799542288221195e-02, -3.663674318869008e-01, -1.051367579269314e-01, -1.051367579269313e-01, -3.080022793878192e-02, -1.382199290598289e-02, -1.389235685064783e-02, -9.986769279981707e-02, -1.540034319184086e-02, -1.540034319184088e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbr_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbr", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-9.416462682474870e-09, -9.416423171233491e-09, -9.416106447821305e-09, -9.416696891690063e-09, -9.416407626837381e-09, -9.416407626837381e-09, -1.169649325554752e-05, -1.169772822631797e-05, -1.172588079732301e-05, -1.167656292120124e-05, -1.170086115703477e-05, -1.170086115703477e-05, -5.723696186792399e-03, -5.701620740742924e-03, -5.193232626674445e-03, -5.133543444115758e-03, -5.177563963486744e-03, -5.177563963486744e-03, -5.392861907484443e-01, -5.304977688600143e-01, -2.856871020667183e-03, -9.680090598247514e-01, -7.686399169658120e-01, -7.686399169658128e-01, -5.836333075842792e+03, -5.124836242251782e+03, -3.522529016718309e+01, -2.644799195009223e+04, -1.494072285135438e+04, -1.494072285135434e+04, -2.821775266450135e-06, -2.822847527395196e-06, -2.821793540709663e-06, -2.822740894292339e-06, -2.822337002943849e-06, -2.822337002943849e-06, -6.882172648959325e-05, -6.814961648271004e-05, -6.779231650752706e-05, -6.719642893005391e-05, -6.897892476003366e-05, -6.897892476003366e-05, -1.569531210927482e-02, -1.430855295994395e-02, -2.004240658159018e-02, -2.318115264868852e-02, -1.529346874297248e-02, -1.529346874297248e-02, -2.388733028303186e+00, -3.920752021351452e-01, -3.006547390896851e+00, -1.813410059411228e-04, -1.766346393980299e+00, -1.766346393977617e+00, -5.617343826568698e+04, -2.878475305971133e+04, -1.076156239081878e+05, -9.694629386151103e+00, -4.988816391606411e+04, -4.988816391606403e+04, -2.099625655478827e-02, -1.940991505227864e-02, -1.978192159777564e-02, -2.021807539581631e-02, -1.998252353065911e-02, -1.998252353065911e-02, -2.484194199606015e-02, -2.308415906542780e-02, -2.437385466120692e-02, -2.431573750808884e-02, -2.465736616079429e-02, -2.465736616079429e-02, -1.183360644694445e-02, -1.998862762685525e-01, -1.283682473088344e-01, -8.025556974739147e-02, -1.005582369030816e-01, -1.005582369023614e-01, -3.097270095011557e-02, -3.902596684065757e+01, -1.638312846165674e+01, -1.170681273189598e-01, -5.359124796543711e+00, -5.359124796543711e+00, -1.971687051133969e+03, -1.653729835325246e+06, -1.983555689229803e+05, -6.380323906309376e+00, -6.731627964815305e+04, -6.731627964815321e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbr_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbr", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbr_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbr", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-2.587790857238988e-04, -2.587778791636220e-04, -2.587729731291066e-04, -2.587909032342135e-04, -2.587814461042125e-04, -2.587814461042125e-04, -1.523661574407000e-03, -1.523745181993966e-03, -1.525730336697368e-03, -1.523087936790119e-03, -1.524248123786369e-03, -1.524248123786369e-03, -6.127311529052101e-03, -6.101543803819688e-03, -5.489912391700966e-03, -5.546556028552808e-03, -5.554963003315407e-03, -5.554963003315407e-03, -1.299651432052609e-02, -1.324271401435493e-02, -4.713531010368788e-03, -1.123554549632659e-02, -1.212441315480369e-02, -1.212441315480369e-02, -8.121866307216943e-03, -8.311277697438986e-03, -9.204603507898599e-03, -7.114482368488286e-03, -7.962660399673206e-03, -7.962660399673183e-03, -1.019967055647858e-03, -1.018407210798134e-03, -1.019898288321884e-03, -1.018521549525595e-03, -1.019177100889079e-03, -1.019177100889079e-03, -1.991814568998953e-03, -2.005702953574267e-03, -1.952313919348820e-03, -1.964484652841025e-03, -2.019285261033227e-03, -2.019285261033227e-03, -9.408200891904285e-03, -7.433585669068482e-03, -9.884068393579458e-03, -9.158194967866592e-03, -9.306936758945637e-03, -9.306936758945637e-03, -1.008123542763926e-02, -1.010902010538386e-02, -1.014256622991712e-02, -2.532032910539751e-03, -1.151521946843876e-02, -1.151521946842128e-02, -6.945664912042296e-03, -7.233489637251299e-03, -1.207934914680938e-02, -1.037175947242127e-02, -9.790466075931694e-03, -9.790466075931677e-03, -6.753148915001331e-03, -7.737166849207449e-03, -7.411002483932928e-03, -7.124965163428537e-03, -7.269835251213712e-03, -7.269835251213712e-03, -6.654477507214393e-03, -9.704789253665354e-03, -1.052706066364169e-02, -1.006722621837287e-02, -1.053228790620353e-02, -1.053228790620353e-02, -7.273333133690984e-03, -9.870386126083071e-03, -1.027251027565500e-02, -1.232622951210188e-02, -1.125896498619905e-02, -1.125896498611842e-02, -1.022750458828939e-02, -8.975275789568219e-03, -9.355825661247709e-03, -1.482442986685053e-02, -1.141834019010127e-02, -1.141834019010128e-02, -7.690511548582215e-03, -7.956524848145083e-03, -8.816016732533828e-03, -1.136171299566783e-02, -1.046733568097301e-02, -1.046733568097300e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
