
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_rscan_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.321448352148083e+01, -2.321454360065361e+01, -2.321488296132564e+01, -2.321390040508544e+01, -2.321451457442770e+01, -2.321451457442770e+01, -3.413062686209099e+00, -3.413178426912574e+00, -3.416930499772533e+00, -3.417925525487698e+00, -3.413097054427116e+00, -3.413097054427116e+00, -5.945774899046874e-01, -5.939808915996942e-01, -5.792011795629020e-01, -5.893502419334219e-01, -5.943668977022785e-01, -5.943668977022785e-01, -1.882149961157405e-01, -1.901379962848286e-01, -6.708546736759875e-01, -1.139216724114897e-01, -1.886804703245030e-01, -1.886804703245030e-01, -6.948274284265117e-03, -7.379145157326422e-03, -3.932887094424536e-02, -2.549913530720998e-03, -7.300222342604360e-03, -7.300222342604360e-03, -5.666580205908076e+00, -5.667638751472314e+00, -5.666691820348767e+00, -5.667514842086582e+00, -5.667118396591964e+00, -5.667118396591964e+00, -2.077354720284610e+00, -2.099605982012047e+00, -2.074798460500851e+00, -2.092353314838749e+00, -2.095903119287033e+00, -2.095903119287033e+00, -6.057226463914227e-01, -6.576925597224899e-01, -5.561195042297011e-01, -5.794091481123960e-01, -6.365190883954507e-01, -6.365190883954507e-01, -8.419092591450068e-02, -1.858634179193271e-01, -8.389936228721295e-02, -1.919620705602258e+00, -1.024721131861516e-01, -1.024721131861516e-01, -2.441405802302955e-03, -2.924923092699260e-03, -2.172890851584421e-03, -5.237206021392658e-02, -2.669201165593405e-03, -2.669201165593405e-03, -6.507468511294655e-01, -6.473373491941616e-01, -6.485670422281336e-01, -6.495103523274686e-01, -6.490375235861164e-01, -6.490375235861164e-01, -6.268170103267894e-01, -5.440692203861991e-01, -5.684443232009617e-01, -5.908895880866332e-01, -5.792567640765375e-01, -5.792567640765375e-01, -6.791201884328658e-01, -2.422959791115914e-01, -2.846880439194853e-01, -3.557424290908968e-01, -3.211969947671452e-01, -3.211969947671452e-01, -4.758741635857818e-01, -3.586905323792892e-02, -4.961132301947350e-02, -3.366168952871425e-01, -7.231114142619326e-02, -7.231114142619323e-02, -8.352949216019622e-03, -5.147568167485782e-04, -1.242112455352781e-03, -6.979096022695504e-02, -2.215180552526537e-03, -2.215180552526533e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_rscan_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.025910181103439e+01, -3.025921196646020e+01, -3.025994897148867e+01, -3.025815854686578e+01, -3.025915761403874e+01, -3.025915761403874e+01, -4.803832547990701e+00, -4.803934337234027e+00, -4.807068576580670e+00, -4.805237830642418e+00, -4.803889940936078e+00, -4.803889940936078e+00, -8.222358981522476e-01, -8.212664734355346e-01, -7.974886385579927e-01, -8.087170489870151e-01, -8.218897734369133e-01, -8.218897734369133e-01, -2.051589108058208e-01, -2.107104332199879e-01, -8.776349315693301e-01, -1.544981687923470e-01, -2.067168537800500e-01, -2.067168537800500e-01, -1.198533984705531e-02, -1.268923912283605e-02, -5.773623008827172e-02, -4.605406242404954e-03, -1.255431536480699e-02, -1.255431536480699e-02, -7.570503393237408e+00, -7.571773560090884e+00, -7.570696831602728e+00, -7.571680057002406e+00, -7.571068672258987e+00, -7.571068672258987e+00, -2.555072464539311e+00, -2.588599392789539e+00, -2.544539807581541e+00, -2.571456549545448e+00, -2.591732902325272e+00, -2.591732902325272e+00, -8.113720662048933e-01, -9.194746781300174e-01, -7.681333314704774e-01, -8.371991201083797e-01, -8.473396663097122e-01, -8.473396663097122e-01, -1.000842994466827e-01, -1.571628676426208e-01, -9.957882959527363e-02, -2.831986010433276e+00, -1.032738882549484e-01, -1.032738882549484e-01, -4.413833892992762e-03, -5.253906221697413e-03, -3.907967676638912e-03, -6.784129506671911e-02, -4.793501131192203e-03, -4.793501131192203e-03, -8.696904522426376e-01, -8.596299357191514e-01, -8.631594082160235e-01, -8.659428691167423e-01, -8.645443158664282e-01, -8.645443158664282e-01, -8.439044966155698e-01, -6.902905832598816e-01, -7.339682193910927e-01, -7.750324172680738e-01, -7.541293091271898e-01, -7.541293091271899e-01, -9.679334604105752e-01, -2.537453507274330e-01, -3.258975738156284e-01, -4.658294259710958e-01, -3.938681719088924e-01, -3.938681719088925e-01, -6.110773636031038e-01, -5.392988749218364e-02, -6.394639454848854e-02, -4.525607650885973e-01, -7.331883226474264e-02, -7.331883226474267e-02, -1.432349852368260e-02, -9.674997251381358e-04, -2.286648328343494e-03, -7.457955694087673e-02, -3.991419992463924e-03, -3.991419992463915e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rscan_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.829109034388535e-09, -5.828929600560003e-09, -5.826367138646187e-09, -5.829198449641559e-09, -5.829030971525635e-09, -5.829030971525635e-09, -1.535036552624457e-05, -1.535170020440465e-05, -1.538781930817162e-05, -1.535620141761675e-05, -1.535052303964114e-05, -1.535052303964114e-05, -4.214804541906732e-03, -4.198534820954048e-03, -3.824772082516289e-03, -4.015692139777984e-03, -4.209263814724295e-03, -4.209263814724295e-03, -1.339630967831784e+00, -1.306407288687597e+00, -1.612888884255870e-03, -3.816192561994987e-01, -1.334036604225729e+00, -1.334036604225729e+00, 1.214853472154163e+02, 1.109497485780691e+02, -3.951878977453068e-01, 4.084088304273825e+02, 1.154768451213485e+02, 1.154768451213485e+02, 4.485636911683771e-08, 4.508220112298683e-08, 4.552387332812744e-08, 4.565525433084838e-08, 4.409870984856529e-08, 4.409870984856529e-08, -9.670568126937287e-05, -9.025428122279227e-05, -9.518500717299971e-05, -9.000832216905932e-05, -9.413409767328903e-05, -9.413409767328903e-05, -1.802701352926972e-02, -1.531666494617844e-02, -2.497478828442027e-02, -2.506120811038413e-02, -1.442427796521881e-02, -1.442427796521881e-02, -2.001254145207385e+00, -1.292976201976022e+00, -2.223038445480531e+00, -2.145434223192342e-04, -3.162172625153211e+00, -3.162172625153211e+00, 4.503097901585738e+02, 3.530406425605932e+02, 1.058903939730598e+03, -3.492941853322784e+00, 5.171824945550212e+02, 5.171824945550209e+02, -1.276797647854370e-02, -1.239165756798078e-02, -1.252438300542317e-02, -1.262970760630750e-02, -1.257853678723157e-02, -1.257853678723157e-02, -1.589542534956348e-02, -2.013758197823300e-02, -1.828755206365453e-02, -1.708089738294737e-02, -1.769812357216359e-02, -1.769812357216357e-02, -1.380033004782268e-02, -4.553920768484453e-01, -2.776304844230802e-01, -1.290443567706892e-01, -1.843250243249326e-01, -1.843250243249329e-01, -4.132555160609944e-02, 6.718250574850601e-01, -4.415252321404214e+00, -1.744221413483532e-01, -6.379303242429680e+00, -6.379303242429673e+00, 7.660663165653303e+01, 4.679114821409255e+03, 1.420802301327982e+03, -6.759445922035241e+00, 8.557967715249036e+02, 8.557967715249050e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rscan_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([9.431492161257380e-04, 9.431276555134683e-04, 9.427684277736696e-04, 9.431051003219505e-04, 9.431403242071702e-04, 9.431403242071702e-04, 9.125887878056276e-03, 9.127075004874176e-03, 9.162456198324551e-03, 9.156340779304323e-03, 9.126118019848996e-03, 9.126118019848996e-03, 1.433887828963775e-02, 1.430046848290549e-02, 1.354837434628288e-02, 1.492577939637522e-02, 1.432666680093732e-02, 1.432666680093732e-02, 1.341450093153084e-01, 1.357979031421794e-01, 2.899848923801502e-03, 1.793735691026559e-02, 1.350631564176410e-01, 1.350631564176410e-01, 1.243699238244967e-09, 3.215433691176736e-09, 5.177316836626999e-03, 4.082524455394301e-10, 2.084834530512783e-09, 2.084834530512849e-09, 5.747766025933431e-05, 5.615959044446497e-05, 5.590325972504219e-05, 5.497674360595153e-05, 5.875440819474100e-05, 5.875440819474100e-05, 1.195690547710825e-02, 1.144149632403566e-02, 1.170442415258051e-02, 1.128894847679951e-02, 1.191988028257395e-02, 1.191988028257395e-02, 5.380851385282003e-02, 5.522439523964896e-02, 6.106352719507820e-02, 6.519869377985570e-02, 4.876093356916696e-02, 4.876093356916696e-02, 3.392119686044276e-02, 1.318572387546564e-01, 3.615377355761500e-02, 2.018413948223218e-02, 7.632981906710688e-02, 7.632981906710688e-02, 5.590758004928419e-11, 5.670585493679254e-10, 1.745849296939548e-12, 1.736695291983678e-02, 2.926859355545613e-10, 2.926859355545623e-10, 4.318443389005504e-02, 4.176065220774895e-02, 4.226054152185747e-02, 4.265397576883038e-02, 4.246168324703695e-02, 4.246168324703695e-02, 4.784482634897178e-02, 4.280368419281100e-02, 4.366104213381027e-02, 4.491746256145743e-02, 4.431185936540177e-02, 4.431185936540170e-02, 5.588741866118777e-02, 9.357723560965971e-02, 9.435584544444334e-02, 8.685903706504977e-02, 8.934543227682039e-02, 8.934543227682043e-02, 6.161957374583488e-02, 3.457239221920712e-03, 1.616847578828222e-02, 9.636908266081137e-02, 5.548481452950556e-02, 5.548481452950547e-02, 3.115187468602279e-06, 2.031742927082907e-15, 3.630032692164532e-14, 5.192326028744686e-02, 4.341305652346358e-11, 4.341305652346284e-11])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
