
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_rscan_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.173317820249642e+01, -2.173328268760399e+01, -2.173378287498071e+01, -2.173207650169590e+01, -2.173323295134107e+01, -2.173323295134107e+01, -3.049563242845210e+00, -3.049661182350553e+00, -3.052729221575123e+00, -3.051781998177623e+00, -3.049604933369194e+00, -3.765974006981416e+00, -5.266959935535741e-01, -7.146210966597492e-01, -6.938513963493353e-01, -7.001135786908397e-01, -7.151302397147177e-01, -7.151302397147177e-01, -1.951569374341467e-01, -1.979250539134912e-01, -6.120266920041436e-01, -1.367054375752378e-01, -1.959850664055233e-01, -1.959850664055233e-01, -6.927645856155445e-03, -7.351796178558669e-03, -3.931379090709156e-02, -2.387431498604335e-03, -7.276773741675559e-03, -7.276773741675559e-03, -5.666542301438776e+00, -5.667601371595872e+00, -5.666654321922782e+00, -5.439052085583516e+00, -5.667080293845722e+00, -5.667080293845722e+00, -1.670031268295435e+00, -1.689890482342805e+00, -1.661687071147012e+00, -1.677328185119059e+00, -1.694335843376638e+00, -2.132058309946530e+00, -6.301973950768262e-01, -6.859350073953744e-01, -5.971710001205305e-01, -6.241394023091413e-01, -6.549404925248582e-01, -5.828981391669646e-01, -7.230442534917597e-02, -1.942258417220568e-01, -7.153974947417124e-02, -2.084012215862873e+00, -1.155980963486768e-01, -1.155980963486768e-01, -5.135134736693948e-03, -2.784490476470114e-03, -2.127248866081055e-03, -4.683147960732605e-02, -5.347222218783833e-03, -2.500278706319957e-03, -6.523986383663397e-01, -6.488404051827572e-01, -6.415166926586697e-01, -6.511067664901988e-01, -6.506146565996668e-01, -6.506146565996668e-01, -6.314408180569842e-01, -5.458224102951187e-01, -5.710151277364587e-01, -5.942454469897521e-01, -5.824255888894184e-01, -5.383268465711463e-01, -7.188525183816071e-01, -1.784674218891300e-01, -2.947273357607676e-01, -3.006195825579834e-01, -3.346490227504230e-01, -3.346490227504230e-01, -4.010869138893959e-01, -3.577486136498493e-02, -5.084813598301510e-02, -3.589819483615526e-01, -5.978040527763785e-02, -7.857078250518594e-02, -7.936111588989672e-03, -4.640588152052398e-04, -1.221564564401191e-03, -7.494498823676610e-02, -2.066175921159773e-03, -2.066175921159768e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_rscan_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.217389351760227e+01, -3.217393718871372e+01, -3.217419270580012e+01, -3.217347277346718e+01, -3.217391608649218e+01, -3.217391608649218e+01, -4.727637903668322e+00, -4.727940337976984e+00, -4.737278103038417e+00, -4.734024234301774e+00, -4.727744329845193e+00, -5.098588697647884e+00, -7.964455900190264e-01, -9.832495589729975e-01, -9.583659817473844e-01, -9.653342329410890e-01, -9.838571737990468e-01, -9.838571737990468e-01, -2.696652056114188e-01, -2.731361333442675e-01, -8.739901718425908e-01, -1.968297021661175e-01, -2.707084608024410e-01, -2.707084608024410e-01, -1.195758206968168e-02, -1.265285505724353e-02, -6.185130385116495e-02, -4.347961054564438e-03, -1.252311904774757e-02, -1.252311904774757e-02, -7.572989753335300e+00, -7.574187129435914e+00, -7.573115294359561e+00, -7.730984255240061e+00, -7.573599268117517e+00, -7.573599268117517e+00, -2.561779781046620e+00, -2.587009107373946e+00, -2.552993510675821e+00, -2.570495736181599e+00, -2.593365202998696e+00, -2.894454782633061e+00, -8.481471766192712e-01, -9.184161615231438e-01, -8.062005336245875e-01, -8.386519917453514e-01, -8.797252782222005e-01, -9.164799990567604e-01, -9.765288437784825e-02, -2.727780952009071e-01, -9.670114639008531e-02, -2.798756971683777e+00, -1.671977350104227e-01, -1.671977350104227e-01, -6.846846315593497e-03, -5.035437447372586e-03, -3.837101953500319e-03, -6.281887185170330e-02, -7.129629625047900e-03, -4.530050149043444e-03, -8.699891397178395e-01, -8.656690502269998e-01, -8.728756572347153e-01, -8.683920122317756e-01, -8.677932283027441e-01, -8.677932283027441e-01, -8.421613218162218e-01, -7.351908438818283e-01, -7.662561701026785e-01, -7.950484816028265e-01, -7.803759611917653e-01, -8.102897456119161e-01, -9.637763152745608e-01, -2.576874744447310e-01, -4.048505045426529e-01, -4.602718378315958e-01, -4.564426408309554e-01, -4.564426408309553e-01, -6.274593918464451e-01, -5.675165216886852e-02, -7.872501605961089e-02, -4.857515719453698e-01, -8.066251090261195e-02, -1.167815326883713e-01, -1.376533304877149e-02, -8.783845591621332e-04, -2.252632440549267e-03, -1.114073224839414e-01, -3.756691137066262e-03, -3.756691137066255e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rscan_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.428381297783959e-08, -1.428353543682842e-08, -1.428220799411346e-08, -1.428674028768184e-08, -1.428366754204984e-08, -1.428366754204984e-08, -1.454536801640613e-05, -1.454910321543241e-05, -1.466042616978249e-05, -1.461240939057911e-05, -1.454612787590627e-05, 5.449479038932159e-07, -1.017135475517950e-02, 3.778861285597157e-04, 4.075975057550566e-04, 4.009667070088236e-04, 3.771819249494870e-04, 3.771819249494870e-04, 6.482465463349200e-02, 6.218339938117835e-02, -5.004825969090927e-03, 1.478596048194785e-01, 6.400975012864875e-02, 6.400975012864875e-02, 1.190428327438843e+02, 1.081501981654388e+02, 3.260105848602668e+00, 2.737880841836770e+02, 1.129479408794109e+02, 1.129479408794108e+02, 7.082921930785694e-08, 7.045136136263215e-08, 7.078775686151639e-08, -3.480475238139960e-06, 7.063955752555464e-08, 7.063955752555464e-08, -1.237283838121441e-04, -1.218146980983308e-04, -1.248431098875567e-04, -1.228319452499010e-04, -1.217159019077363e-04, 5.278942600864333e-06, 6.707184379373594e-04, 4.007204327611484e-04, 8.563709077525102e-04, 6.766475513088907e-04, 5.532222826102800e-04, -2.481132129529083e-02, -2.305715503039171e+01, 5.347816091061871e-02, -2.418086049614299e+01, 5.370203354281761e-06, 2.676223884183197e-01, 2.676223884183197e-01, -3.976111925701649e+00, 2.607370989826554e+02, 9.289262668733226e+02, -1.389673806143251e+02, -4.723466743841193e+00, 3.460149677761588e+02, 1.028764405951874e-04, 2.342865265101575e-04, -1.515726159993974e-02, 1.535447041575160e-04, 1.721227101119229e-04, 1.721227101119229e-04, 1.728513266490949e-04, 1.204669454611729e-03, 9.305602553048353e-04, 6.693918185899659e-04, 8.050901399208973e-04, -3.771279425761249e-02, 3.578050431532979e-04, -7.142541544265599e-01, 1.328150624490068e-02, -1.201965745840059e-01, 8.488027944790123e-03, 8.488027944790127e-03, -5.414770861311065e-02, 3.792913546638267e+00, 1.754383006109657e+00, 6.599275486549545e-03, -5.117789067767692e+01, 7.566146297526440e-01, 5.405403904123884e+01, 2.620794943325891e+03, 1.288275666900815e+03, 9.115826883203941e-01, 5.595904503794790e+02, 5.595904503794803e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rscan_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.874037214458860e-03, 1.874022591725948e-03, 1.873954929733078e-03, 1.874193351400618e-03, 1.874029536553548e-03, 1.874029536553548e-03, 4.980425725659267e-03, 4.982847402099080e-03, 5.056336399600311e-03, 5.027289497593802e-03, 4.981074091129971e-03, 1.082901204268196e-31, 8.804849442546872e-03, 0.000000000000000e+00, 4.156121455235666e-29, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.825818565959757e-29, 1.658309252180364e-28, 2.521136973811060e-03, 0.000000000000000e+00, 1.077951249046266e-28, 1.077951249046266e-28, 2.084090246676388e-39, 8.261960823058313e-39, 0.000000000000000e+00, 4.117625697617980e-41, 0.000000000000000e+00, 3.472201009556647e-39, 0.000000000000000e+00, 1.241830069993340e-33, 2.840459544110410e-32, 6.944827544504223e-03, 1.111106020042456e-34, 1.111106020042456e-34, 6.434379445324827e-03, 6.580547987730528e-03, 6.401324950628668e-03, 6.472828717377277e-03, 6.638988137917995e-03, 9.601687947202857e-31, 1.088448892572165e-30, 1.152514312356378e-31, 0.000000000000000e+00, 6.135395712928338e-31, 2.014419020498682e-31, 6.618091896474736e-02, 1.707390481246342e-03, 2.736563384237414e-29, 2.023613842951892e-03, 0.000000000000000e+00, 4.172964371093889e-28, 4.172964371093889e-28, 6.436333980518668e-09, 0.000000000000000e+00, 0.000000000000000e+00, 3.419093304319507e-03, 9.449946558528373e-09, 1.625795992422115e-40, 7.484467450844428e-32, 0.000000000000000e+00, 4.874423092748739e-02, 1.804444910326503e-33, 0.000000000000000e+00, 0.000000000000000e+00, 5.042094514187960e-32, 0.000000000000000e+00, 1.142614169191857e-30, 3.892542172801689e-32, 0.000000000000000e+00, 7.623861166087958e-02, 2.842330294949897e-31, 1.176654713697230e-02, 6.173307290109296e-31, 3.645477893492007e-02, 5.132089594044347e-30, 0.000000000000000e+00, 4.369112463422056e-02, 0.000000000000000e+00, 0.000000000000000e+00, 3.246046107719083e-31, 3.479808416571383e-03, 0.000000000000000e+00, 5.184067376109041e-37, 6.331779957228409e-47, 0.000000000000000e+00, 5.410267405552380e-29, 5.055764767247725e-42, 5.968084231207208e-42])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
