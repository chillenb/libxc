
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_sa_tpss_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_sa_tpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.234710834119605e+01, -2.234717125518617e+01, -2.234754287665152e+01, -2.234660896554389e+01, -2.234708515570891e+01, -2.234708515570891e+01, -3.451060940386058e+00, -3.451066044711517e+00, -3.451450965144086e+00, -3.453413686726131e+00, -3.452090594279061e+00, -3.452090594279061e+00, -6.693868655413595e-01, -6.691906612922940e-01, -6.665383319848226e-01, -6.729423124982661e-01, -6.737423441149879e-01, -6.737423441149879e-01, -2.044429898545864e-01, -2.054408463808204e-01, -7.654666916727784e-01, -1.817377384784000e-01, -2.040889664956125e-01, -2.040889664956124e-01, -1.848313700894621e-02, -2.254605642420104e-02, -8.734946065449911e-02, -4.267132437968916e-02, -3.160104787587224e-02, -3.160104787587253e-02, -5.476099904549777e+00, -5.477112528747785e+00, -5.476225106793434e+00, -5.477116351948284e+00, -5.476572539352931e+00, -5.476572539352931e+00, -2.078015067284888e+00, -2.092663926548221e+00, -2.073772291836163e+00, -2.086650628069328e+00, -2.088266109598663e+00, -2.088266109598663e+00, -5.949244334181663e-01, -6.128317314242822e-01, -5.433170602017483e-01, -5.369974128803148e-01, -6.041290418646628e-01, -6.041290418646630e-01, -1.527341305594660e-01, -2.212583649901733e-01, -1.465891488181272e-01, -1.813528714032105e+00, -1.559028688279716e-01, -1.559028688279716e-01, -7.376376724599432e-02, -5.942598539365403e-02, -2.846114719302697e-02, -1.155884565945071e-01, -3.347360294836695e-02, -3.347360294836686e-02, -5.833020830036930e-01, -5.998029117714623e-01, -5.965264807841160e-01, -5.921761280525857e-01, -5.945787293922520e-01, -5.945787293922520e-01, -5.464531917884163e-01, -5.188577533373497e-01, -5.392846146096354e-01, -5.573930819180496e-01, -5.483995325827016e-01, -5.483995325827016e-01, -6.398269758706423e-01, -2.616459765056530e-01, -2.952709347028472e-01, -3.606257010975157e-01, -3.245142095414545e-01, -3.245142095414545e-01, -4.723142473198934e-01, -7.406938621617876e-02, -1.041159857507986e-01, -3.436121902327627e-01, -1.242231398886148e-01, -1.242231398886148e-01, -7.428143157080744e-02, -7.709263302758698e-02, -2.400335487429424e-02, -1.138863912135369e-01, -2.901523853334176e-02, -2.901523853334187e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_sa_tpss_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_sa_tpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.763928102216706e+01, -2.764005376081200e+01, -2.763935356604525e+01, -2.764010638370070e+01, -2.763974138324527e+01, -2.764061844147504e+01, -2.763892603526031e+01, -2.763957812135531e+01, -2.763931953118062e+01, -2.764010792637713e+01, -2.763931953118062e+01, -2.764010792637713e+01, -4.195607431053329e+00, -4.195390356754025e+00, -4.195667526616624e+00, -4.195414040191817e+00, -4.196676033386121e+00, -4.196865484664253e+00, -4.197244537715012e+00, -4.197175808653865e+00, -4.194813947134014e+00, -4.198176543992889e+00, -4.194813947134014e+00, -4.198176543992889e+00, -7.814790707948727e-01, -7.874779007983338e-01, -7.792567712612792e-01, -7.866271185620133e-01, -7.481227875081644e-01, -7.376524057889241e-01, -7.510939254166310e-01, -7.549414347133337e-01, -7.975388864050620e-01, -6.992216442830438e-01, -7.975388864050620e-01, -6.992216442830438e-01, -1.883710690353054e-01, -1.853090674858364e-01, -1.901730616231786e-01, -1.932030410682322e-01, -9.071798355366110e-01, -9.552697484082393e-01, -1.581509500769644e-01, -1.777794335512704e-01, -1.965035763459071e-01, -1.310700000737687e-01, -1.965035763459071e-01, -1.310700000737685e-01, -5.296832210889011e-01, -8.287254947123572e-01, -4.036943815164167e-01, -5.479296387281564e-01, -2.273680301046848e-01, -2.430032302003575e-01, -1.656132935080664e-01, -1.785739057216707e-01, -2.964903857725932e-01, -1.017624711720415e-01, -2.964903857725881e-01, -1.017624711720413e-01, -6.727871900491185e+00, -6.726601655631099e+00, -6.727576117145395e+00, -6.726316963594954e+00, -6.727979966485486e+00, -6.726681471626564e+00, -6.727722279819972e+00, -6.726418963280558e+00, -6.727627092973976e+00, -6.726443985804552e+00, -6.727627092973976e+00, -6.726443985804552e+00, -2.436059624515404e+00, -2.437169430503493e+00, -2.465418462202422e+00, -2.465540329914187e+00, -2.410174729179714e+00, -2.418820068768272e+00, -2.435271165295569e+00, -2.444271945117401e+00, -2.470282401307794e+00, -2.454780127885424e+00, -2.470282401307794e+00, -2.454780127885424e+00, -7.265107402335402e-01, -7.257352855566784e-01, -7.867210368182044e-01, -7.873069935353619e-01, -6.446948431891861e-01, -6.739015114190005e-01, -6.823707743695514e-01, -7.050403204797258e-01, -7.588629440286673e-01, -7.149001080630395e-01, -7.588629440286673e-01, -7.149001080630397e-01, -2.034690909863692e-01, -1.959951579713954e-01, -2.126752702139743e-01, -2.134968571849398e-01, -1.900915344318896e-01, -1.998474957537356e-01, -2.377911090593838e+00, -2.376907957517963e+00, -1.964213870451231e-01, -1.806619761494181e-01, -1.964213870451232e-01, -1.806619761494183e-01, -9.890402133277314e-02, -1.039119257946120e-01, -1.223243702851534e-01, -1.212355863614663e-01, -1.023406018410395e-01, -9.835284771402346e-02, -1.759091452503344e-01, -2.118551433745824e-01, -7.725977979071115e-02, -2.620531560751913e-01, -7.725977979071122e-02, -2.620531560751936e-01, -7.296810468212918e-01, -7.325855027968681e-01, -7.296232460681110e-01, -7.324131513659874e-01, -7.282636736356813e-01, -7.310791133461647e-01, -7.278681801007550e-01, -7.307126456028598e-01, -7.279344647072842e-01, -7.307684388834829e-01, -7.279344647072843e-01, -7.307684388834828e-01, -7.171570681716832e-01, -7.194576981537202e-01, -6.361986456688880e-01, -6.393485268405023e-01, -6.675595589635563e-01, -6.704619874617459e-01, -6.836246420374291e-01, -6.858904357447856e-01, -6.764067403221055e-01, -6.791487007251501e-01, -6.764067403221053e-01, -6.791487007251501e-01, -8.238198260307876e-01, -8.255531710487269e-01, -2.349801227710488e-01, -2.367682297029924e-01, -2.948355394885859e-01, -2.991208931343812e-01, -4.239374549272359e-01, -4.260970215085137e-01, -3.617302757468349e-01, -3.619652806956548e-01, -3.617302757468349e-01, -3.619652806956548e-01, -5.673307109880334e-01, -5.735541624422922e-01, -3.372614334461021e-01, -3.100615342917629e-01, -2.218597381466002e-01, -2.238513747153476e-01, -4.074897179025039e-01, -4.214166874455315e-01, -1.952748336572588e-01, -1.844618999001745e-01, -1.952748336572586e-01, -1.844618999001744e-01, -1.408167043042879e-01, -1.377235575188400e-01, -6.796411443227798e-02, -6.221672590605549e-02, -1.722333929536288e-01, -1.675485809525356e-01, -2.016857019366193e-01, -2.443462160605542e-01, -6.667613034581452e-02, -2.545088767426507e-01, -6.667613034581445e-02, -2.545088767426472e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_sa_tpss_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_sa_tpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.759455709079166e-08, 0.000000000000000e+00, -2.759680567006994e-08, -2.759548819917717e-08, 0.000000000000000e+00, -2.759748131873548e-08, -2.759696082974623e-08, 0.000000000000000e+00, -2.760001468151222e-08, -2.758650563950899e-08, 0.000000000000000e+00, -2.758666711642254e-08, -2.759519616573601e-08, 0.000000000000000e+00, -2.759089189636220e-08, -2.759519616573601e-08, 0.000000000000000e+00, -2.759089189636220e-08, -2.440090904865566e-05, 0.000000000000000e+00, -2.440574949966583e-05, -2.440622269564999e-05, 0.000000000000000e+00, -2.441008281864929e-05, -2.451958370152114e-05, 0.000000000000000e+00, -2.454123721129841e-05, -2.443125696324024e-05, 0.000000000000000e+00, -2.443863916344004e-05, -2.440386125811384e-05, 0.000000000000000e+00, -2.453829690559015e-05, -2.440386125811384e-05, 0.000000000000000e+00, -2.453829690559015e-05, -1.070769800865073e-02, 0.000000000000000e+00, -1.061369068346497e-02, -1.075567291877540e-02, 0.000000000000000e+00, -1.062758003525188e-02, -1.129330819081633e-02, 0.000000000000000e+00, -1.146579589968692e-02, -1.116370660840876e-02, 0.000000000000000e+00, -1.115857913341952e-02, -1.020998241444635e-02, 0.000000000000000e+00, -1.111632329598966e-02, -1.020998241444635e-02, 0.000000000000000e+00, -1.111632329598966e-02, -1.155747924776399e+00, 0.000000000000000e+00, -1.531252248004525e+00, -1.144074102766001e+00, 0.000000000000000e+00, -1.348184855123714e+00, -4.218784800107162e-03, 0.000000000000000e+00, -3.471281405893834e-03, -9.143224127791493e-01, 0.000000000000000e+00, -5.800895996796399e-02, -9.710409745539100e-01, 0.000000000000000e+00, -8.632669588916928e-01, -9.710409745539085e-01, 0.000000000000000e+00, -8.632669588917081e-01, 4.456632166817739e+05, 0.000000000000000e+00, 5.864746055779349e+05, 2.981036682937423e+05, 0.000000000000000e+00, 3.336297827962367e+05, 5.249905572144174e+02, 0.000000000000000e+00, 4.912657812872993e+02, 5.266900532681448e+05, 0.000000000000000e+00, 6.044136991924470e+05, 3.368989264828047e+05, 0.000000000000000e+00, 7.745250799526062e+05, 3.368989264827986e+05, 0.000000000000000e+00, 7.745250799526046e+05, -1.233985082506364e-05, 0.000000000000000e+00, -1.234919125051871e-05, -1.246657868314972e-05, 0.000000000000000e+00, -1.247175111274739e-05, -1.234738431579273e-05, 0.000000000000000e+00, -1.235376880983734e-05, -1.245607691499869e-05, 0.000000000000000e+00, -1.246506356585114e-05, -1.240412301502950e-05, 0.000000000000000e+00, -1.241046256787699e-05, -1.240412301502950e-05, 0.000000000000000e+00, -1.241046256787699e-05, -1.121272373987482e-04, 0.000000000000000e+00, -1.120141039398912e-04, -1.095831445231128e-04, 0.000000000000000e+00, -1.096160457754787e-04, -1.116193472470967e-04, 0.000000000000000e+00, -1.116357274120624e-04, -1.097243773145081e-04, 0.000000000000000e+00, -1.096458614647388e-04, -1.116423693045469e-04, 0.000000000000000e+00, -1.108118059576961e-04, -1.116423693045469e-04, 0.000000000000000e+00, -1.108118059576961e-04, -3.828981565772260e-02, 0.000000000000000e+00, -3.886175048770379e-02, -4.881944524071816e-02, 0.000000000000000e+00, -5.049278913605602e-02, -4.477325691728171e-02, 0.000000000000000e+00, -4.370152841197119e-02, -4.194895726529196e-02, 0.000000000000000e+00, -4.514127418190070e-02, -3.779809129009351e-02, 0.000000000000000e+00, -4.353606213955663e-02, -3.779809129009355e-02, 0.000000000000000e+00, -4.353606213955663e-02, 1.061329944616872e+01, 0.000000000000000e+00, 9.153592057742012e+00, -4.738111264236881e-01, 0.000000000000000e+00, -4.574504351037039e-01, 1.407938097363810e+01, 0.000000000000000e+00, 1.303789898483263e+01, -3.177971439506792e-04, 0.000000000000000e+00, -3.183772067459597e-04, 5.545206426120829e+00, 0.000000000000000e+00, 2.957921719756425e+00, 5.545206426120830e+00, 0.000000000000000e+00, 2.957921719756434e+00, 5.969384268703511e+05, 0.000000000000000e+00, 5.386870033411152e+05, 4.116517278227078e+05, 0.000000000000000e+00, 3.643279236368397e+05, 2.269298757473831e+06, 0.000000000000000e+00, 1.913401027314068e+06, 6.176304398339328e+01, 0.000000000000000e+00, 8.933122243169321e+01, 6.355430723461569e+05, 0.000000000000000e+00, 1.695447863575194e+06, 6.355430723461580e+05, 0.000000000000000e+00, 1.695447863575208e+06, -3.381853547815849e-01, 0.000000000000000e+00, -3.421220074646886e-01, -1.816720094916074e-01, 0.000000000000000e+00, -1.829685544752268e-01, -2.222035483308045e-01, 0.000000000000000e+00, -2.243450200253568e-01, -2.675789395870111e-01, 0.000000000000000e+00, -2.696643359066961e-01, -2.433539953729091e-01, 0.000000000000000e+00, -2.454719305512253e-01, -2.433539953729091e-01, 0.000000000000000e+00, -2.454719305512254e-01, -2.060812661886721e-01, 0.000000000000000e+00, -2.114704051996081e-01, -3.631040130423201e-02, 0.000000000000000e+00, -3.612394120186969e-02, -4.857890469317563e-02, 0.000000000000000e+00, -4.885209016109170e-02, -8.652317783659143e-02, 0.000000000000000e+00, -8.625635451141381e-02, -6.310625351180325e-02, 0.000000000000000e+00, -6.284627779554400e-02, -6.310625351180328e-02, 0.000000000000000e+00, -6.284627779554394e-02, -3.297870516354209e-02, 0.000000000000000e+00, -3.471540929051432e-02, -5.229768944840613e-01, 0.000000000000000e+00, -5.097956175084568e-01, -2.752396801350200e-01, 0.000000000000000e+00, -2.686967481644773e-01, -1.520506042999078e-01, 0.000000000000000e+00, -1.504715304557072e-01, -1.837452978756831e-01, 0.000000000000000e+00, -1.846721828403651e-01, -1.837452978756831e-01, 0.000000000000000e+00, -1.846721828403653e-01, -5.386450462882719e-02, 0.000000000000000e+00, -5.292647431442011e-02, 9.365610069604651e+02, 0.000000000000000e+00, 8.203040272924776e+02, 1.900838408987863e+02, 0.000000000000000e+00, 1.755295958845523e+02, -2.385558247140089e-01, 0.000000000000000e+00, -2.251662822362120e-01, 3.646424390024565e+01, 0.000000000000000e+00, 2.878322075564101e+01, 3.646424390024556e+01, 0.000000000000000e+00, 2.878322075564103e+01, 2.467741192969203e+04, 0.000000000000000e+00, 2.132836532013403e+04, 1.210963119337372e+07, 0.000000000000000e+00, 1.057602775944493e+07, 6.714258551912448e+06, 0.000000000000000e+00, 5.575886550000031e+06, 4.940055933448711e+01, 0.000000000000000e+00, 6.741870312934152e+01, 1.047462220125295e+06, 0.000000000000000e+00, 2.179363231445909e+06, 1.047462220125297e+06, 0.000000000000000e+00, 2.179363231445886e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_sa_tpss_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_sa_tpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.930530455023824e-03, 1.931340971583580e-03, 1.930622416811759e-03, 1.931407673147915e-03, 1.930898416511462e-03, 1.931808495885833e-03, 1.929868309751106e-03, 1.930492347395899e-03, 1.930589292332694e-03, 1.931004292651050e-03, 1.930589292332694e-03, 1.931004292651050e-03, 2.682302051860166e-03, 2.678096224688653e-03, 2.683671286257861e-03, 2.678684780164754e-03, 2.706854153155928e-03, 2.710116547822391e-03, 2.712327566157289e-03, 2.709274213595095e-03, 2.680006892520377e-03, 2.730470093904818e-03, 2.680006892520377e-03, 2.730470093904818e-03, 3.956869200699945e-03, 3.953091088854430e-03, 3.968367919626444e-03, 3.946478029369461e-03, 3.796946224443252e-03, 3.796483497822412e-03, 4.220141300453075e-03, 4.342305732017308e-03, 3.645530909748370e-03, 2.928840410497954e-03, 3.645530909748370e-03, 2.928840410497954e-03, -5.478619520414707e-03, 1.663194393995305e-02, -5.402524664675479e-03, 1.166264341028242e-02, 6.265339171297691e-04, 6.030315475208681e-04, -3.116715776371964e-02, -3.999449167494461e-02, -6.356745894478487e-03, -3.805522304097880e-02, -6.356745894478513e-03, -3.805522304097874e-02, -7.047559607417009e-01, -1.112691317226611e+00, -5.425047396542805e-01, -7.462964526200883e-01, -1.691071162178522e-01, -1.856506156840120e-01, -1.812714906561616e-01, -1.976958679234830e-01, -3.783990647310158e-01, -1.612140595489008e-01, -3.783990647310091e-01, -1.612140595489006e-01, 1.370464092763955e-02, 1.371218849009077e-02, 1.385416543881179e-02, 1.385679950908001e-02, 1.371633860413635e-02, 1.371961392488589e-02, 1.384451568901941e-02, 1.385085788253974e-02, 1.377833071115733e-02, 1.378412542369975e-02, 1.377833071115733e-02, 1.378412542369975e-02, 2.873958387414925e-03, 2.889325958976468e-03, 3.048641958197379e-03, 3.062158718317914e-03, 2.678037472934034e-03, 2.747400758937243e-03, 2.846266148887065e-03, 2.915934059344367e-03, 3.140624926275622e-03, 3.001924279937062e-03, 3.140624926275622e-03, 3.001924279937062e-03, 3.188696742685066e-02, 3.277067154521549e-02, 3.036926881380240e-02, 3.185514368065424e-02, 1.922081151689971e-02, 2.452231066480706e-02, 1.055466525034916e-02, 1.554785485863115e-02, 3.820728101774597e-02, 3.335476112333745e-02, 3.820728101774602e-02, 3.335476112333744e-02, -8.492820164192033e-02, -7.941962776902450e-02, -1.676853118801321e-02, -1.740593977601351e-02, -8.374466701311711e-02, -8.860093221410613e-02, 3.398065032500884e-03, 3.399072574807659e-03, -7.712220852577344e-02, -6.581124327685352e-02, -7.712220852577348e-02, -6.581124327685353e-02, -8.776654455722881e-02, -8.875369918180506e-02, -1.267152151460364e-01, -1.174277905088728e-01, -2.910466660362094e-01, -2.916223355308776e-01, -1.053278107242548e-01, -1.429847618561861e-01, -8.932241644134981e-02, -5.986901551455154e-01, -8.932241644134992e-02, -5.986901551455204e-01, 2.968591212838894e-01, 3.038090128326048e-01, 2.167646268314558e-01, 2.214003535180288e-01, 2.504709093658830e-01, 2.563762377856689e-01, 2.795393575856341e-01, 2.857430996838495e-01, 2.652217259902783e-01, 2.713007708473042e-01, 2.652217259902783e-01, 2.713007708473042e-01, 7.453244626637136e-02, 7.849666681495354e-02, 2.507456691353938e-02, 2.550981956923704e-02, 4.340799404732133e-02, 4.442555469998347e-02, 8.375511673249945e-02, 8.439728764262595e-02, 5.918939005711548e-02, 5.997471161715572e-02, 5.918939005711547e-02, 5.997471161715568e-02, 2.117835323080206e-02, 2.300150415217131e-02, 5.255930512904006e-03, 4.852267295263545e-03, 3.208721251753928e-03, 3.823360512113968e-03, 2.045174113592706e-02, 2.056033371766126e-02, 1.061394153003094e-02, 1.081489224987353e-02, 1.061394153003092e-02, 1.081489224987361e-02, 2.080054587746764e-02, 2.177523567183515e-02, -2.791498269811906e-01, -2.501823794783631e-01, -1.442871282327735e-01, -1.471873742212469e-01, 3.048954046475338e-02, 3.658415328675992e-02, -1.188103695460176e-01, -1.155535104079005e-01, -1.188103695460175e-01, -1.155535104079005e-01, -1.161917497918959e-01, -1.120712803349529e-01, -7.348651638392457e-02, -6.625278961368052e-02, -3.371430564952974e-01, -3.368778744881284e-01, -1.365213529672258e-01, -1.839780274968078e-01, -1.242787815893175e-01, -5.925734201666446e-01, -1.242787815893174e-01, -5.925734201666365e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
