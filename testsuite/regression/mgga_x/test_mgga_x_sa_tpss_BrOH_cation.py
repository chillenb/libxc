
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_sa_tpss_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_sa_tpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.990389233616921e+01, -1.990395276900017e+01, -1.990423659104776e+01, -2.119265263570595e+01, -2.119311894274113e+01, -2.248250408490930e+01, -3.470194523923009e+00, -3.705416276513426e+00, -3.704811857292968e+00, -3.705390382709314e+00, -3.704945790091773e+00, -3.469842430503051e+00, -6.333254425087820e-01, -6.934253883343429e-01, -7.480074788029589e-01, -6.849044404736482e-01, -6.221644765279108e-01, -7.492113808452184e-01, -1.864834150435200e-01, -1.884545971330616e-01, -8.490283219014083e-01, -1.832460560465262e-01, -2.058350223552928e-01, -1.984928471067764e-01, -1.010552172988962e-02, -8.688656084939015e-03, -4.706051116792424e-02, -5.828940900416120e-03, -8.134388867992500e-03, -8.134388867992511e-03, -5.479801516681135e+00, -5.480807968224117e+00, -5.479851648932518e+00, -5.480740089702469e+00, -5.173002650157965e+00, -5.173300841974443e+00, -2.104273449563878e+00, -2.115072431677310e+00, -2.096864376051045e+00, -2.106097242369812e+00, -1.976496788801312e+00, -2.113907500054349e+00, -5.820371437978051e-01, -6.708767600502779e-01, -5.765869234223766e-01, -5.956557998494942e-01, -5.953920615144712e-01, -6.292868639095219e-01, -1.401043738620047e-01, -1.958617175713659e-01, -1.311076949971707e-01, -2.022717244073001e+00, -1.547957648339005e-01, -1.547957648339005e-01, -3.616821454796621e-03, -5.698244411927101e-03, -4.363335648522299e-03, -7.281107276875541e-02, -5.480843763190301e-03, -5.480843763191650e-03, -6.203122535366852e-01, -6.169230828487022e-01, -5.511035450245008e-01, -5.859794327116006e-01, -5.517222900787405e-01, -5.854245170582119e-01, -6.035314514523782e-01, -4.887339253279853e-01, -5.108852305606619e-01, -5.669332696648597e-01, -5.547278863705296e-01, -5.222637229983882e-01, -6.627079033261991e-01, -2.651871351184060e-01, -2.753572306057341e-01, -3.496819926910487e-01, -3.320838574000352e-01, -3.081207984604737e-01, -4.823076781207767e-01, -3.221950849610135e-02, -7.474938468996414e-02, -3.563533400563361e-01, -1.125624572606300e-01, -1.125624572606300e-01, -8.189145835647615e-03, -1.523228837302144e-03, -1.840562975532948e-03, -6.524107185889996e-02, -5.033380786493321e-03, -3.412616213862438e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_sa_tpss_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_sa_tpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.680323995364864e+01, -2.680324711786709e+01, -2.680333266702457e+01, -2.680331445936980e+01, -2.680364406646548e+01, -2.680375650443734e+01, -2.680259703803119e+01, -2.790213433028577e+01, -2.680329466093304e+01, -2.790254339829488e+01, -2.790294806509531e+01, -2.790254339829488e+01, -4.396065879307144e+00, -4.242604168297397e+00, -4.396255534538474e+00, -4.395982189575324e+00, -4.399903473272725e+00, -4.400598781558803e+00, -4.398952095752219e+00, -4.399018409865691e+00, -4.394938494148051e+00, -4.402370649964451e+00, -4.241893407690429e+00, -4.402370649964451e+00, -8.222784883681368e-01, -8.246421778120997e-01, -8.212593837438166e-01, -7.095373657779769e-01, -6.480738021220241e-01, -6.366857759924799e-01, -6.643063389243878e-01, -8.105704629087839e-01, -8.303957249970156e-01, -7.862906944925842e-01, -7.215938303895129e-01, -5.945903404885288e-01, -2.124985007745735e-01, -1.545376029139868e-01, -2.148400209787734e-01, -1.635701995577228e-01, -5.187649676978603e-01, -9.919641685797898e-01, 1.181713799176939e-01, 6.102084189803481e-02, -1.369922858243458e-01, 6.194251894613056e-01, -1.369922858243456e-01, -1.215528919064164e-01, 1.154738455595268e+01, 1.083891877373412e+01, -7.848521126325636e-03, 1.002448373401620e+01, -4.361132934538551e-02, 2.344881497683722e+00, 2.252456431286913e+01, 2.279077446546011e+01, 1.329486290865391e+01, 1.789426676040231e+01, 1.329486290865391e+01, 1.789426676041023e+01, -6.733998739043291e+00, -6.732375751923073e+00, -6.733662332412232e+00, -6.732050321297356e+00, -6.733964482416476e+00, -6.732353247922436e+00, -6.733676783165976e+00, -6.732058573042401e+00, -6.542804598403405e+00, -6.732215385284044e+00, -6.733839443780558e+00, -6.541208017058009e+00, -2.394173538847688e+00, -2.395952928332568e+00, -2.430173162488531e+00, -2.430761871459837e+00, -2.362023051910878e+00, -2.373084868894230e+00, -2.394270726913293e+00, -2.405394514652405e+00, -2.437776364419276e+00, -2.388338277943608e+00, -2.437776364419276e+00, -2.417754933008815e+00, -7.689083562313785e-01, -7.281853384040538e-01, -8.316532675401885e-01, -8.311940526137780e-01, -6.767924428898748e-01, -7.145080511505540e-01, -7.252345350125162e-01, -7.519470095818878e-01, -8.019274707912062e-01, -7.218996804204794e-01, -8.019274707912066e-01, -7.605429545676347e-01, 5.802666019316793e-01, 5.682649979451397e-01, -2.185540533434230e-01, -6.003634768535669e-02, 7.322094590339864e-01, 6.166679956170326e-01, -2.519891298159471e+00, -2.518768811715296e+00, 2.786684506785641e-01, 1.226238145654441e-01, 2.786684506785677e-01, 1.226238145654431e-01, -3.377917669747852e-03, 3.534164361844149e+01, 2.404001619944879e+01, 2.522487606714175e+01, 1.197150594191278e+01, 1.078540835299157e+01, 1.238583666774867e+00, -7.293099106071842e-02, 2.703410136273508e+01, 1.102163174849539e+01, 2.703410136274749e+01, 1.102163174862152e+01, -7.388286860318722e-01, -7.413881721030997e-01, -7.440315458279285e-01, -7.465644650274007e-01, -7.363668610202002e-01, -7.392296497816744e-01, -7.375209522233910e-01, -7.433972976428352e-01, -7.369446288856046e-01, -7.397968805639525e-01, -7.369446288856047e-01, -7.441634312700319e-01, -7.203682029028149e-01, -7.224204776935054e-01, -6.370576563045616e-01, -6.085248168766977e-01, -6.751608776541851e-01, -6.450663967929198e-01, -7.008979809879736e-01, -7.032073458782667e-01, -6.894263544396062e-01, -6.918745817998005e-01, -6.894263544396062e-01, -6.613326084080353e-01, -8.749933782466195e-01, -8.385436339713278e-01, -1.699092889347283e-01, -1.727835752937704e-01, -3.233963201077217e-01, -2.647929053991517e-01, -4.210440639238641e-01, -4.250759477743214e-01, -3.437715559020509e-01, -3.443484670402492e-01, -3.437715559020507e-01, -3.682116472334034e-01, -5.727154432628255e-01, -5.796435956674150e-01, -4.279586701221168e-02, -4.308859917655090e-02, 1.926916599359192e+00, 1.801908270713649e+00, -4.195426448205725e-01, -4.343432008073377e-01, 7.149299819146049e-01, 5.267043097444214e-01, 7.149299819145692e-01, 5.267043097444395e-01, -1.071368875323914e-02, -1.110205122864110e-02, 8.344168520597907e+01, 8.343501606809556e+01, -2.371696204321182e-03, -2.522481479172084e-03, -8.614436746944035e-02, -8.753169705217821e-02, 1.775817629194171e+01, 1.181526958569432e+01, 1.775817629140478e+01, -4.164832201560632e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_sa_tpss_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_sa_tpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.370443956086694e-08, 0.000000000000000e+00, -1.370630543308016e-08, -1.370452592314679e-08, 0.000000000000000e+00, -1.370636785643856e-08, -1.370466849461150e-08, 0.000000000000000e+00, -1.370660965558583e-08, -1.370371427270761e-08, 0.000000000000000e+00, -2.582134459998675e-08, -1.370450462874009e-08, 0.000000000000000e+00, -2.582636940464104e-08, -2.582226191257002e-08, 0.000000000000000e+00, -2.582636940464104e-08, -1.241256964924930e-05, 0.000000000000000e+00, -9.653229609452368e-06, -1.241338937499260e-05, 0.000000000000000e+00, -1.241302784743031e-05, -1.242999114372154e-05, 0.000000000000000e+00, -1.243252967311644e-05, -1.241966806341444e-05, 0.000000000000000e+00, -1.241899717560897e-05, -1.241870943589262e-05, 0.000000000000000e+00, -1.243347229284861e-05, -9.655312016994119e-06, 0.000000000000000e+00, -1.243347229284861e-05, -3.628775247962965e-03, 0.000000000000000e+00, -3.655310708067093e-03, -3.627172433457074e-03, 0.000000000000000e+00, -1.017582363050193e-02, -1.210113638181151e-02, 0.000000000000000e+00, -1.257907623558386e-02, -1.166190263213490e-02, 0.000000000000000e+00, -3.694674901801509e-03, -3.598560018914005e-03, 0.000000000000000e+00, -3.734618863026629e-03, -9.749725049422019e-03, 0.000000000000000e+00, -1.447969082642414e-02, -5.893523104598231e-01, 0.000000000000000e+00, -2.571063333718010e+00, -5.789838232825403e-01, 0.000000000000000e+00, -2.316172503565539e+00, -8.472422915213851e-03, 0.000000000000000e+00, -1.306840476043976e-03, -1.782959029370121e+01, 0.000000000000000e+00, -1.542136256949523e+01, -2.768915251661349e+00, 0.000000000000000e+00, -9.556237358512045e+01, -2.768915251661352e+00, 0.000000000000000e+00, -2.604839821485014e+00, -9.926216484145408e+06, 0.000000000000000e+00, -7.782665955256961e+06, -1.174837383467577e+05, 0.000000000000000e+00, -6.246623888438202e+06, -1.271025130813753e+02, 0.000000000000000e+00, -6.473990847157666e+03, -7.615268807420279e+07, 0.000000000000000e+00, -8.144890971370606e+07, -1.568151346989957e+07, 0.000000000000000e+00, -1.497077259056546e+08, -1.568151346989957e+07, 0.000000000000000e+00, -1.497077259057209e+08, -1.228213905210384e-05, 0.000000000000000e+00, -1.229476004696558e-05, -1.240901011030713e-05, 0.000000000000000e+00, -1.241748586841018e-05, -1.229100651317654e-05, 0.000000000000000e+00, -1.230029913957350e-05, -1.239978069965283e-05, 0.000000000000000e+00, -1.241170213190129e-05, -4.838478768136417e-06, 0.000000000000000e+00, -1.235594583190005e-05, -1.234547558051545e-05, 0.000000000000000e+00, -4.842911192002009e-06, -1.215610060106007e-04, 0.000000000000000e+00, -1.215545265082578e-04, -1.178657368583445e-04, 0.000000000000000e+00, -1.179917108068069e-04, -1.250170006352008e-04, 0.000000000000000e+00, -1.239723422537138e-04, -1.214758538548796e-04, 0.000000000000000e+00, -1.205042853285892e-04, -1.172180696220871e-04, 0.000000000000000e+00, -8.035863216016924e-05, -1.172180696220871e-04, 0.000000000000000e+00, -1.193206448435218e-04, -2.105189760656312e-02, 0.000000000000000e+00, -1.765611374168000e-02, -3.453997961173562e-02, 0.000000000000000e+00, -3.649657468177862e-02, -2.274520123620714e-02, 0.000000000000000e+00, -2.164593409941344e-02, -2.513319280557245e-02, 0.000000000000000e+00, -2.578090006516506e-02, -2.229887462002023e-02, 0.000000000000000e+00, -1.852853280993826e-02, -2.229887462002025e-02, 0.000000000000000e+00, -2.299961530785120e-02, -1.144143465196207e+02, 0.000000000000000e+00, -1.094294826402095e+02, -4.164284235633279e-01, 0.000000000000000e+00, -3.956797172015564e+00, -1.831096437940994e+02, 0.000000000000000e+00, -1.418373930642038e+02, -2.270971512642766e-04, 0.000000000000000e+00, -2.277272293469433e-04, -5.493661142188829e+01, 0.000000000000000e+00, -3.649469669526101e+01, -5.493661142188871e+01, 0.000000000000000e+00, -3.649469669526089e+01, -3.426544828208920e+06, 0.000000000000000e+00, -2.062086592312061e+08, -8.885884670246227e+07, 0.000000000000000e+00, -8.367880693606424e+07, -2.840964864848111e+08, 0.000000000000000e+00, -2.258097056937865e+08, -9.452034545111979e+02, 0.000000000000000e+00, -1.763245758121536e+01, -2.612315858249743e+08, 0.000000000000000e+00, -7.335684089023283e+07, -2.612315858250943e+08, 0.000000000000000e+00, -7.335684089107168e+07, -3.708779688559148e-01, 0.000000000000000e+00, -3.771713277751117e-01, -1.705695473214253e-01, 0.000000000000000e+00, -1.723512905488391e-01, -5.513287776481532e-02, 0.000000000000000e+00, -5.541633274215240e-02, -6.476945186383415e-02, 0.000000000000000e+00, -2.690025608330140e-01, -5.946721636973017e-02, 0.000000000000000e+00, -5.976911725876068e-02, -5.946721636973017e-02, 0.000000000000000e+00, -2.399681609947685e-01, -3.579852615274969e-01, 0.000000000000000e+00, -3.652893510440662e-01, -3.558437102512300e-02, 0.000000000000000e+00, -3.020869938631230e-02, -4.368071779214844e-02, 0.000000000000000e+00, -3.230140800454275e-02, -7.285358765600140e-02, 0.000000000000000e+00, -7.270884327296427e-02, -5.399182909820395e-02, 0.000000000000000e+00, -5.406364742237108e-02, -5.399182909820395e-02, 0.000000000000000e+00, -3.342884598206265e-02, -2.146828712335214e-02, 0.000000000000000e+00, -1.350643389237629e-02, -1.195684926391460e+00, 0.000000000000000e+00, -1.159690136653379e+00, -1.388186864147131e-01, 0.000000000000000e+00, -4.484700596465261e-01, -7.936940436245847e-02, 0.000000000000000e+00, -1.209221243494782e-01, -2.278258335813159e-01, 0.000000000000000e+00, -2.276260887384747e-01, -2.278258335813165e-01, 0.000000000000000e+00, -1.072847504643648e-01, -4.385853776376872e-02, 0.000000000000000e+00, -4.330437201489223e-02, -1.370081396896256e+02, 0.000000000000000e+00, -1.333404093016655e+02, -2.570577890128291e+03, 0.000000000000000e+00, -2.233155091685976e+03, -1.477561260610294e-01, 0.000000000000000e+00, -1.491805439847753e-01, -3.508541178524972e+02, 0.000000000000000e+00, -2.624757015146787e+02, -3.508541178524822e+02, 0.000000000000000e+00, -2.624757015146860e+02, -3.383849451583714e+04, 0.000000000000000e+00, -2.934751478348557e+04, -1.697230918715924e+10, 0.000000000000000e+00, -1.681802405490501e+10, -1.409987616431952e+07, 0.000000000000000e+00, -1.101807249902215e+07, -9.717159014888473e+00, 0.000000000000000e+00, -9.274643172228261e+00, -3.244465931514814e+08, 0.000000000000000e+00, -1.039617363413864e+08, -3.244465931416759e+08, 0.000000000000000e+00, -1.481781169538500e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_sa_tpss_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_sa_tpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.551978237420093e-04, 1.552300620518834e-04, 1.552020254346145e-04, 1.552331068405970e-04, 1.552136032216477e-04, 1.552502074918195e-04, 1.551665049792696e-04, 1.978930564942832e-03, 1.552005453101809e-04, 1.979451102167547e-03, 1.979203092882429e-03, 1.979451102167547e-03, 2.533649583897605e-03, -5.309839897825273e-04, 2.534594443146316e-03, 2.533524501196319e-03, 2.553131979819374e-03, 2.556454961671492e-03, 2.546142034815579e-03, 2.546131537934025e-03, 2.531952629277981e-03, 2.562953114206952e-03, -5.314630347101018e-04, 2.562953114206952e-03, -1.956831439434193e-03, -2.045805309594984e-03, -1.932034375357647e-03, 1.062362408509005e-02, 1.258939388669933e-02, 1.299978005584710e-02, 1.194801152799514e-02, -1.786329154866208e-03, -2.092631044816643e-03, -1.318493438415729e-03, 1.035977396179842e-02, 1.473687594310723e-02, -2.707396380788861e-03, 6.116140513816747e-02, -2.939375192759264e-03, 5.542547118123797e-02, 2.047599078889154e-02, -6.964866663547092e-04, 2.898320594882905e-01, 2.540784376397839e-01, 7.533148187289582e-02, 6.435163818918660e-01, 7.533148187289547e-02, -1.168374596389996e-04, 1.569484854925012e+01, 1.476500096860078e+01, -3.206671476692353e-07, 1.397104846065757e+01, -9.206586156039331e-06, 2.383717101843924e+00, 2.615528429000251e+01, 2.659908558977953e+01, 1.760336275719003e+01, 3.096941125356925e+01, 1.760336275719003e+01, 3.096941125358294e+01, 1.376294129886086e-02, 1.376718816172883e-02, 1.391324086320390e-02, 1.391246896962934e-02, 1.377337290988393e-02, 1.377369198357351e-02, 1.390223797672998e-02, 1.390557346698301e-02, 7.810159024050817e-04, 1.383962799637627e-02, 1.383802841218039e-02, 7.811827801840850e-04, 3.649975385922996e-03, 3.662269793034578e-03, 3.750760935803582e-03, 3.761517586549667e-03, 3.573033974103913e-03, 3.604234546365709e-03, 3.647079618554166e-03, 3.684856585083303e-03, 3.779335089318944e-03, -1.113210601843447e-03, 3.779335089318944e-03, 3.723645552761320e-03, 2.958057548172091e-02, 1.310961657106680e-03, 7.045436028824587e-02, 7.467686500495914e-02, 1.731076606052151e-02, 2.169580368369326e-02, 2.905432573130299e-02, 3.501577855670011e-02, 3.770112800596494e-02, 1.506518936718307e-03, 3.770112800596505e-02, 3.171307150889449e-02, 6.708142382242080e-01, 6.597411813575299e-01, -1.073705602244784e-03, 1.299776931070601e-01, 7.989282675526003e-01, 7.216550280668882e-01, 1.189547005449408e-02, 1.191500428158982e-02, 4.714381359694929e-01, 3.591394752513929e-01, 4.714381359694969e-01, 3.591394752513919e-01, -3.433643637940511e-08, 3.356174702526103e+01, 2.718558475173899e+01, 2.678088611916667e+01, 3.634239126677029e+01, 3.431006482730506e+01, 1.358593083763564e+00, -4.432528992052150e-05, 3.560364799755151e+01, 2.589553476178864e+01, 3.560364799756787e+01, 2.589553476208476e+01, 5.977210291188403e-01, 6.149478877175163e-01, 2.704863888078195e-01, 2.765017753933426e-01, 7.768516810729061e-03, 7.746775862273662e-03, 7.811358729073822e-03, 4.359204251981302e-01, 7.791756701906808e-03, 7.768257635923421e-03, 7.791756701906808e-03, 3.879639437863444e-01, 5.317272156606816e-01, 5.479725410266969e-01, 2.582507986453162e-02, -1.059632678783542e-03, 4.392677393505567e-02, 3.331033972085715e-03, 8.945286291009182e-02, 9.024835674930791e-02, 6.071538066596687e-02, 6.156842637817914e-02, 6.071538066596686e-02, 5.159703886379681e-03, 4.954908104496931e-02, 4.484749761187568e-03, 6.055951269627106e-02, 5.923479891711281e-02, -3.883885802951462e-03, 3.037105648235193e-02, -6.369781771054689e-03, 2.023270264942623e-02, 2.129873874241364e-02, 2.128732187414429e-02, 2.129873874241371e-02, -6.208319167275858e-03, 2.005800868360576e-02, 2.107581224522522e-02, -9.181276291604930e-06, -9.176784523878295e-06, 1.847626955698864e+00, 1.771475092123781e+00, 2.597233648500737e-02, 3.235287841473342e-02, 9.599013476918363e-01, 8.411588143393752e-01, 9.599013476917960e-01, 8.411588143393983e-01, -3.419932527534952e-07, -3.649333683246644e-07, 1.011144594863029e+02, 1.008838692626594e+02, -4.927884447230218e-08, -5.819969033670293e-08, -9.262162415632713e-05, -1.088971005184854e-04, 3.757977007577045e+01, 2.825920879449178e+01, 3.757977007463460e+01, -1.989391822320508e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
