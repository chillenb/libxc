
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mk00b_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mk00b", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.052876925036152e+01, -2.052899072028259e+01, -2.053003204639780e+01, -2.052674786568703e+01, -2.052846056777486e+01, -2.052846056777486e+01, -3.323606236241261e+00, -3.324136190751921e+00, -3.338189431616076e+00, -3.333290234107611e+00, -3.333386492599632e+00, -3.333386492599632e+00, -4.313417245742384e-01, -4.295859972860751e-01, -3.924226185932654e-01, -4.132390586374968e-01, -4.068563730193845e-01, -4.068563730193845e-01, -1.218076901602184e-01, -1.245927531659790e-01, -3.213758178613191e-01, -7.571798683229794e-02, -8.397449613715278e-02, -8.397449613715277e-02, -5.795709623204491e-02, -5.755701597751227e-02, -7.141831523548667e-02, -5.569300594261194e-02, -5.420334102926476e-02, -5.420334102926473e-02, 8.017209282255853e-01, 3.069610343726343e+00, -2.244091433915588e-01, 3.133445560729136e-01, -2.796028504856938e+00, 3.477899687719263e+01, -1.628176046329993e-01, 6.682616364695061e+00, -2.323758468651261e+00, -2.396390572378906e+00, -2.496712093239762e+00, -1.557079200107802e+00, 2.205730529790691e-02, 1.633624564096114e-01, 2.100536958018248e-02, -1.142136416362638e+00, -1.512605718371455e+00, -1.295207812264614e+01, -6.097186804583990e-02, -3.931213478032224e-02, -6.041932568846890e-02, -5.303349768049616e+00, -6.201703729631187e-02, -5.813279360044117e-02, -5.085124717510747e-02, -5.358047390143435e-02, -3.459062370256492e-02, -6.258648773918851e-02, -4.185649008454174e-02, -4.185680172192589e-02, -1.706952298518642e-03, -4.680979395250418e-03, -3.636877211933090e-03, -2.104186355282671e-03, -3.253530487904878e-03, -3.206574403250281e-03, -7.949851108070347e-04, -7.089241975476430e-01, 3.367628562555555e-02, -2.360945679755563e-01, 3.989307541900264e+00, 6.088192011442530e-03, 3.621511727802417e-02, -4.498402905034476e-02, -3.755751059202628e-02, -3.973560538876973e-02, 2.337895521012647e-01, -1.146141022906820e+00, -6.257865641245048e-01, -7.284397755504562e-02, -7.226182841277953e-02, -4.363267899721446e-01, -5.456651800398679e-02, -5.849949967037284e-02, -6.297447388460382e-02, -3.236282571835831e-02, -4.139318118617537e-02, -5.741891386142780e-02, -3.939708205158498e-02, -3.939707527872541e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mk00b_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mk00b", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-5.936499850734825e+01, -5.936571750035505e+01, -5.936898472887351e+01, -5.935832213411049e+01, -5.936389883378223e+01, -5.936389883378223e+01, -9.484411975567657e+00, -9.486090752777567e+00, -9.530293445768960e+00, -9.511950794445383e+00, -9.513847625244200e+00, -9.513847625244200e+00, -1.145015019183875e+00, -1.138300754779248e+00, -9.873079089500431e-01, -1.050418607651416e+00, -1.032913250446054e+00, -1.032913250446054e+00, -2.408720908792487e-01, -2.537992854465033e-01, -8.071082216414264e-01, -6.216360932131093e-02, -1.075865442823965e-01, -1.075865442823964e-01, -8.257686802913085e-03, -8.067428572288544e-03, 2.966258479920280e-03, -8.561369040482483e-03, -8.123421758126375e-03, -8.123421758126364e-03, 2.807991843835628e+00, 9.608715517776039e+00, -2.705193913127081e-01, 1.340141982036816e+00, -7.986757221535908e+00, 1.047383189246128e+02, 1.125274627095944e-01, 2.064134119177874e+01, -6.346244040201593e+00, -6.570870556105406e+00, -6.904837988372977e+00, -4.085939308977098e+00, 1.377446231371083e-01, 5.127738630877371e-01, 1.377224347010017e-01, -3.399238235071027e+00, -4.472215556266764e+00, -3.879063276909079e+01, 2.237730230485147e-02, 5.990206400366667e-02, 2.396234567445489e-02, -1.584547899010951e+01, -1.360732280814786e-02, -1.954591720535769e-03, -7.870892782173396e-03, -8.225327316551645e-03, -5.227639898130950e-03, 1.510407536653216e-02, -6.328197186656668e-03, -6.329132098809050e-03, 2.245793339020573e-03, 5.852823635925927e-03, 4.634201742737911e-03, 5.587175135309072e-03, 3.966664835169526e-03, 4.107533089133318e-03, 1.039222376940216e-03, -2.020238595428530e+00, 1.772548899547274e-01, -6.620612532347495e-01, 1.202902094584078e+01, 7.936289617431837e-02, 1.346640598571581e-01, 3.253991248199627e-02, 3.004296988342475e-02, -3.290659470227604e-02, 8.149129679720744e-01, -3.324878757052177e+00, -1.776925967773917e+00, 3.598198047451417e-03, 4.188464734870185e-03, -1.247248182128728e+00, 2.035827802578924e-02, 8.559333026631043e-03, -8.131338089864290e-03, -4.935501559354850e-03, -6.416785931977003e-03, 1.516291134714987e-02, -5.968972855383125e-03, -5.968952536804462e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mk00b_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mk00b", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.383318342263045e-09, -3.383289902647387e-09, -3.383136900212137e-09, -3.383560583655355e-09, -3.383342350954553e-09, -3.383342350954553e-09, -4.659009815957472e-06, -4.659075651604441e-06, -4.660142156628158e-06, -4.654752665626719e-06, -4.658639530629318e-06, -4.658639530629318e-06, -3.148150549181529e-03, -3.156308342564686e-03, -3.349039860280933e-03, -3.247829620339527e-03, -3.275255788606006e-03, -3.275255788606006e-03, -5.223113783142886e-01, -5.014781601317252e-01, -1.731252141285982e-03, -1.218677154467725e+00, -8.694697983038191e-01, -8.694697983038192e-01, -1.020028699521047e+04, -8.948600489955039e+03, -5.957098103399291e+01, -4.799715134100529e+04, -2.663419112405740e+04, -2.663419112405743e+04, -9.844238704637624e-07, -9.843067557408454e-07, -9.844128661893704e-07, -9.843095385695860e-07, -9.843674135089437e-07, -9.843674135089437e-07, -4.086085048774892e-05, -3.986102411598205e-05, -4.134207012372457e-05, -4.044369362303052e-05, -4.007893495707881e-05, -4.007893495707881e-05, -5.842664469631572e-03, -4.604387919751738e-03, -7.858926383734489e-03, -7.372492776286189e-03, -5.542087032069810e-03, -5.542087032069810e-03, -3.563552638880277e+00, -4.463116502605580e-01, -4.571527927033203e+00, -5.611486966665837e-05, -2.384864003012130e+00, -2.384864003012130e+00, -1.094039312125690e+05, -5.362908407084568e+04, -1.944992836437493e+05, -1.575564584852677e+01, -9.182498949432757e+04, -9.182498949432754e+04, -6.515413597999380e-03, -6.450667671023173e-03, -6.466430875289181e-03, -6.484639468266200e-03, -6.474908032116022e-03, -6.474908032116022e-03, -7.364774640314230e-03, -1.088866456836402e-02, -9.573480495724689e-03, -8.518642805180493e-03, -9.035110006904290e-03, -9.035110006904290e-03, -3.794810316941520e-03, -1.990215429542677e-01, -1.079033525279061e-01, -4.278768987392660e-02, -6.856449461107730e-02, -6.856449461107733e-02, -1.509705550064783e-02, -6.558796219236707e+01, -2.735932539955483e+01, -5.203979501299976e-02, -8.178509256897001e+00, -8.178509256897001e+00, -3.582471637733952e+03, -3.758789817880351e+06, -3.609205126884789e+05, -9.810699429030846e+00, -1.225716936351572e+05, -1.225716936351577e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mk00b_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mk00b", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [-1.097382326761514e-03, -1.097398921666463e-03, -1.097473421097989e-03, -1.097227825458179e-03, -1.097356402330570e-03, -1.097356402330570e-03, -6.537417593263675e-03, -6.539626293183868e-03, -6.597668007069610e-03, -6.572730228700378e-03, -6.576929101081186e-03, -6.576929101081186e-03, -1.381839286533194e-02, -1.371540871777455e-02, -1.150134903064164e-02, -1.262553560843815e-02, -1.228241462731000e-02, -1.228241462731000e-02, -4.107993029563959e-02, -4.295236266782985e-02, -4.479802288799398e-03, -1.102971784929115e-02, -1.713125859765970e-02, -1.713125859765969e-02, -5.675733755660406e-06, -6.999909412522500e-06, -3.007149374020770e-04, -6.188879614316315e-07, -2.445278866734630e-06, -2.445278866734630e-06, -1.525757831257414e-04, -1.896287619759726e-03, -3.140846360890549e-06, -3.157825296290753e-05, -1.381489168054939e-03, -2.303575584132529e-01, -6.812000621551153e-07, -1.628324212430745e-01, -1.704471685514437e-02, -1.788680827433030e-02, -1.934813273043669e-02, -6.976135401135407e-03, -2.038024654029423e-04, -2.938405500249378e-03, -2.541011569049568e-04, -1.919024425634440e-01, -2.827571645967483e-01, -2.111795468261087e+01, -5.632875099780244e-05, -3.616328644087735e-04, -1.747180343345802e-06, -1.057148000586458e-01, -4.072275106532233e-03, -2.088481741795929e-03, -1.472661380951086e-09, -1.601027559538368e-15, -5.694977394548631e-15, -1.442235785119374e-05, -8.251706492041028e-08, -8.890888637843740e-12, -4.784732155962885e-12, -2.889022688949171e-11, -9.676528535859549e-14, -5.936279131687239e-08, -2.843718305700370e-10, -2.960978675301327e-14, -3.152702607026356e-13, -1.044599773704346e-01, -5.288854284556709e-04, -8.669496146273326e-03, -2.931007592269068e+00, -7.858754554638813e-05, -1.605677726030804e-04, -3.174120236159958e-06, -1.663014710004265e-06, -2.186532065419841e-04, -6.654161358786261e-02, -1.209012175958897e+00, -1.037640635287609e-01, -4.963403593368651e-06, -1.225197407125519e-03, -1.261182233502074e-01, -4.950003549902531e-06, -1.245329142527787e-03, -1.081354796917476e-09, -1.021453551483891e-10, -1.099625719718999e-11, -2.181262935592422e-04, -2.410750155681769e-10, -7.123112617119294e-11]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mk00b_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mk00b", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [8.779058614092110e-03, 8.779191373331703e-03, 8.779787368783914e-03, 8.777822603665433e-03, 8.778851218644556e-03, 8.778851218644556e-03, 5.229934074610940e-02, 5.231701034547095e-02, 5.278134405655688e-02, 5.258184182960302e-02, 5.261543280864949e-02, 5.261543280864949e-02, 1.105471429226555e-01, 1.097232697421964e-01, 9.201079224513312e-02, 1.010042848675052e-01, 9.825931701847999e-02, 9.825931701847999e-02, 3.286394423651167e-01, 3.436189013426388e-01, 3.583841831039519e-02, 8.823774279432918e-02, 1.370500687812776e-01, 1.370500687812775e-01, 4.540587004528325e-05, 5.599927530018000e-05, 2.405719499216616e-03, 4.951103691453052e-06, 1.956223093387704e-05, 1.956223093387704e-05, 1.220606265005931e-03, 1.517030095807780e-02, 2.512677088712439e-05, 2.526260237032602e-04, 1.105191334443951e-02, 1.842860467306023e+00, 5.449600497240922e-06, 1.302659369944596e+00, 1.363577348411550e-01, 1.430944661946424e-01, 1.547850618434935e-01, 5.580908320908325e-02, 1.630419723223538e-03, 2.350724400199502e-02, 2.032809255239654e-03, 1.535219540507552e+00, 2.262057316773986e+00, 1.689436374608870e+02, 4.506300079824195e-04, 2.893062915270188e-03, 1.397744274676641e-05, 8.457184004691660e-01, 3.257820085225786e-02, 1.670785393436743e-02, 1.178129104760869e-08, 1.280822047630695e-14, 4.555981915638905e-14, 1.153788628095500e-04, 6.601365193632822e-07, 7.112710910274992e-11, 3.827785724770308e-11, 2.311218151159336e-10, 7.741222828687639e-13, 4.749023305349792e-07, 2.274974644560296e-09, 2.368782940241062e-13, 2.522162085621085e-12, 8.356798189634768e-01, 4.231083427645367e-03, 6.935596917018660e-02, 2.344806073815255e+01, 6.287003643711051e-04, 1.284542180824643e-03, 2.539296188927966e-05, 1.330411768003412e-05, 1.749225652335873e-03, 5.323329087029008e-01, 9.672097407671179e+00, 8.301125082300874e-01, 3.970722874694921e-05, 9.801579257004148e-03, 1.008945786801659e+00, 3.960002839922025e-05, 9.962633140222292e-03, 8.650838375339811e-09, 8.171628411871132e-10, 8.797005757751991e-11, 1.745010348473938e-03, 1.928600124545415e-09, 5.698490093695435e-10]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
