
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_23_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_23", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.506349108142350e+01, -2.506354953079696e+01, -2.506397890716536e+01, -2.506302750950009e+01, -2.506352037859210e+01, -2.506352037859210e+01, -3.409409896706941e+00, -3.409559634843199e+00, -3.414356129404821e+00, -3.415204790297412e+00, -3.409452068071102e+00, -3.409452068071102e+00, -5.701425085048830e-01, -5.694450229863663e-01, -5.525565498628602e-01, -5.641572324601879e-01, -5.698977690656241e-01, -5.698977690656241e-01, -1.719116108431550e-01, -1.749705309930115e-01, -6.323615353114995e-01, -1.062466459887543e-01, -1.727521879211070e-01, -1.727521879211070e-01, -7.872300938957336e-03, -8.245125200132994e-03, -3.365127003006214e-02, -3.754282597139009e-03, -8.160079560565144e-03, -8.160079560565145e-03, -6.109640109294136e+00, -6.109540191830129e+00, -6.109679709582561e+00, -6.109599342131083e+00, -6.109523340947749e+00, -6.109523340947749e+00, -2.089567316838687e+00, -2.126135349085029e+00, -2.084955441207124e+00, -2.114252417652899e+00, -2.119988329078692e+00, -2.119988329078692e+00, -6.225725255535947e-01, -6.691351521851280e-01, -5.610233588765480e-01, -5.843766257016560e-01, -6.608592682177701e-01, -6.608592682177701e-01, -7.700403760641329e-02, -1.612573679536884e-01, -7.614661091410814e-02, -1.929647141218531e+00, -9.124000442785732e-02, -9.124000442785732e-02, -3.627529181113316e-03, -4.141208932203340e-03, -3.110727618633998e-03, -4.689539555089094e-02, -3.771289495956493e-03, -3.771289495956493e-03, -6.728384518977181e-01, -6.774711626087783e-01, -6.759524592946854e-01, -6.746665340204333e-01, -6.753180198839100e-01, -6.753180198839100e-01, -6.444548609139118e-01, -5.829221457412729e-01, -6.116821389933720e-01, -6.297425665193992e-01, -6.208889554322715e-01, -6.208889554322716e-01, -6.872517758280946e-01, -2.166273061226807e-01, -2.679260205047564e-01, -3.537871736542305e-01, -3.140873600107622e-01, -3.140873600107619e-01, -4.857996712906671e-01, -3.118131376470085e-02, -4.229326942198861e-02, -3.386030707450706e-01, -6.235819782699571e-02, -6.235819782699570e-02, -9.175751262313380e-03, -1.133028060089552e-03, -2.159921072157856e-03, -5.944482635285848e-02, -3.204880018474625e-03, -3.204880018474620e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_23_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_23", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.948735848371622e+01, -2.948743934790221e+01, -2.948771384297648e+01, -2.948638197919417e+01, -2.948740197227974e+01, -2.948740197227974e+01, -4.983343038533552e+00, -4.983460261102076e+00, -4.987156282051465e+00, -4.986471841502247e+00, -4.983396994911002e+00, -4.983396994911002e+00, -8.290390848351299e-01, -8.275479619332469e-01, -7.918610147661739e-01, -8.119609938326183e-01, -8.285153340302149e-01, -8.285153340302149e-01, -2.416589550667774e-01, -2.463330524976012e-01, -8.829616715793031e-01, -1.433468030228965e-01, -2.429738299390357e-01, -2.429738299390357e-01, -1.026030880331387e-02, -1.075146191783823e-02, -4.433655528906349e-02, -4.992636447750375e-03, -1.063741714070781e-02, -1.063741714070781e-02, -7.218996184136060e+00, -7.222748826286222e+00, -7.219333320769548e+00, -7.222253796301225e+00, -7.220978288219994e+00, -7.220978288219994e+00, -2.816685231328107e+00, -2.840065773682045e+00, -2.809450168683339e+00, -2.828253378659455e+00, -2.841927374173343e+00, -2.841927374173343e+00, -8.408909830969055e-01, -9.404660380620348e-01, -7.990894641338147e-01, -8.542791298337991e-01, -8.689228510509576e-01, -8.689228510509576e-01, -1.025666010772774e-01, -2.222190920380510e-01, -1.014920363553348e-01, -2.873881400245679e+00, -1.223908811890097e-01, -1.223908811890097e-01, -4.783446048284706e-03, -5.488003905997525e-03, -4.085629976913550e-03, -6.239635811557891e-02, -5.016152281879777e-03, -5.016152281879772e-03, -8.895783779473304e-01, -8.659742986513068e-01, -8.740766254191777e-01, -8.806190595655093e-01, -8.773191863863682e-01, -8.773191863863682e-01, -8.666929121136592e-01, -7.059399034428647e-01, -7.293865950731468e-01, -7.673070479908177e-01, -7.462643815289592e-01, -7.462643815289596e-01, -9.884638010175800e-01, -3.028615143248443e-01, -3.768034343351037e-01, -4.994570894161324e-01, -4.390012476336749e-01, -4.390012476336745e-01, -6.531034950158305e-01, -4.090794238549589e-02, -5.587345853598991e-02, -4.771598110376569e-01, -8.281232360075974e-02, -8.281232360075959e-02, -1.219509240301169e-02, -1.512868921476295e-03, -2.829949326160254e-03, -7.898097577181691e-02, -4.265589570056603e-03, -4.265589570056592e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_23_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_23", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.386577224922930e-08, -2.386568302562638e-08, -2.386522045196093e-08, -2.386670639408975e-08, -2.386572543022707e-08, -2.386572543022707e-08, -1.712233584488290e-05, -1.712609895320630e-05, -1.723775577596121e-05, -1.720089592380263e-05, -1.712297855898135e-05, -1.712297855898135e-05, -4.534528812331593e-03, -4.515141476518944e-03, -4.039335701866050e-03, -4.390592657299918e-03, -4.528215914761671e-03, -4.528215914761671e-03, -7.361513245427727e-01, -7.498999490936236e-01, -1.026148922155153e-03, -2.733208802803317e-01, -7.391011683940446e-01, -7.391011683940446e-01, -2.939853705736815e+01, -2.640144741282024e+01, -1.031827109032913e+00, -1.219522839648277e+01, -2.783315501454396e+01, -2.783315501454389e+01, -7.243644228750678e-06, -7.244807842497692e-06, -7.243868654121086e-06, -7.244765928609809e-06, -7.244109460831783e-06, -7.244109460831783e-06, -1.549774325141452e-04, -1.581909806762748e-04, -1.542367770762167e-04, -1.569645232468709e-04, -1.580600638355584e-04, -1.580600638355584e-04, -3.218223183735169e-02, -2.842658470275750e-02, -3.259229161969331e-02, -3.424612508253529e-02, -3.082895293204669e-02, -3.082895293204669e-02, -3.484663531709633e-01, -2.932539289789197e-01, -4.035535929482650e-01, -2.794691876958168e-04, -4.917434906505201e-01, -4.917434906505201e-01, -5.584600126694105e+01, -2.387797799080534e+01, -1.753875530718903e+02, -3.730176276770384e-01, -1.426229514424861e+01, -1.426229514424863e+01, -4.331497588904894e-02, -4.366658007527384e-02, -4.356600721231628e-02, -4.346939479690103e-02, -4.351953503973521e-02, -4.351953503973521e-02, -4.842001970647390e-02, -5.948999316084314e-02, -5.909394870584014e-02, -5.638446546976440e-02, -5.794865440693304e-02, -5.794865440693305e-02, -2.188093959557599e-02, -2.424115614883386e-01, -2.038610100721408e-01, -1.440188102409960e-01, -1.889661176343231e-01, -1.889661176343231e-01, -6.788704225605095e-02, -1.250199715934520e+00, -6.542629682610501e-01, -2.221747116559888e-01, -6.481933953260763e-01, -6.481933953260761e-01, -2.949966319250584e+00, 9.558918862322238e+01, -3.013445792037942e+02, -7.663168520324515e-01, -1.750300212445405e+01, -1.750300212445413e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_23_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_23", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_23_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_23", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [3.221756974369353e-03, 3.221733586039421e-03, 3.221668198337860e-03, 3.222052082714579e-03, 3.221744292858018e-03, 3.221744292858018e-03, 1.134748579830199e-02, 1.134996489107157e-02, 1.142633807106069e-02, 1.142859812212164e-02, 1.134791022454162e-02, 1.134791022454162e-02, 1.889825794629822e-02, 1.880417472449853e-02, 1.672335752637497e-02, 1.941049812330327e-02, 1.886798538204953e-02, 1.886798538204953e-02, 1.129545099472929e-01, 1.180037654035249e-01, 4.042769586541916e-03, 1.184056066340328e-02, 1.141517671140569e-01, 1.141517671140569e-01, 4.957399458139999e-04, 5.102518521354572e-04, 1.472175232942929e-03, 1.595964484514999e-05, 5.229657461537729e-04, 5.229657461537659e-04, 1.240251993731371e-02, 1.237750920221517e-02, 1.240006517535192e-02, 1.238061319797655e-02, 1.238956427400360e-02, 1.238956427400360e-02, 2.635752210688738e-02, 2.744263437992580e-02, 2.634590934508780e-02, 2.724392384246986e-02, 2.708169698254883e-02, 2.708169698254883e-02, 9.779052526294557e-02, 8.209383872048259e-02, 8.561188067347433e-02, 8.241649080143033e-02, 9.977730325317778e-02, 9.977730325317778e-02, 6.464552140753408e-03, 4.669745798735084e-02, 7.244576178287650e-03, 2.370948183165227e-02, 1.554275303989007e-02, 1.554275303989007e-02, 7.774765142697290e-05, 4.535038086029818e-05, 1.634973689230103e-04, 1.395015375752964e-03, 1.893937648973518e-05, 1.893937648973839e-05, 8.140951112271493e-02, 8.977461832755444e-02, 8.680028207729888e-02, 8.447892249203413e-02, 8.564186371034582e-02, 8.564186371034582e-02, 8.381387813690785e-02, 1.434648489651450e-01, 1.349547947541752e-01, 1.177391375009634e-01, 1.269993933846403e-01, 1.269993933846404e-01, 7.531940518058877e-02, 7.962673588399979e-02, 1.037960655602127e-01, 1.196448989777284e-01, 1.263690965914089e-01, 1.263690965914086e-01, 1.218682609157311e-01, 1.435149026889284e-03, 1.899631190260258e-03, 1.405619929067671e-01, 6.498589887686675e-03, 6.498589887686594e-03, 6.109960620051378e-05, -2.942308149088316e-06, 9.659080254744981e-05, 6.605450834296851e-03, 1.404359765920064e-05, 1.404359765920120e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
