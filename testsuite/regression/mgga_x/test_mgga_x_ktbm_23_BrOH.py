
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_23_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_23", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.176305047083682e+01, -2.176316211722114e+01, -2.176369365637480e+01, -2.176187078473446e+01, -2.176310899189297e+01, -2.176310899189297e+01, -3.029678810222844e+00, -3.029803617627021e+00, -3.033672850294080e+00, -3.032415291083386e+00, -3.029727865838086e+00, -3.959331365969263e+00, -5.228756753853935e-01, -6.652051130190543e-01, -6.301927831695352e-01, -6.427351358315746e-01, -6.661027486845018e-01, -6.661027486845018e-01, -1.768246792854228e-01, -1.807414964134767e-01, -6.131165357033767e-01, -1.099785769934963e-01, -1.779698795207450e-01, -1.779698795207450e-01, -7.877484161377995e-03, -8.251951071685595e-03, -3.382595330302003e-02, -3.776323043188055e-03, -8.165968818549854e-03, -8.165968818549856e-03, -6.114063113060596e+00, -6.113915009091741e+00, -6.114041615897436e+00, -5.477692986256008e+00, -6.113997225139482e+00, -6.113997225139482e+00, -1.643924864172409e+00, -1.666113734304077e+00, -1.634687281401413e+00, -1.651997101100299e+00, -1.671228077049945e+00, -2.196490906036728e+00, -6.845083511955948e-01, -7.470603356990002e-01, -6.393171656008100e-01, -6.808208265769610e-01, -7.148373845086764e-01, -5.823286429318681e-01, -7.505421119392815e-02, -1.636588210257416e-01, -7.404552148100657e-02, -2.275163523674788e+00, -9.269847200067063e-02, -9.269847200067063e-02, -3.694205589333564e-03, -4.163495308341827e-03, -3.120616986992706e-03, -4.707773524309594e-02, -3.846760150824597e-03, -3.793542742131523e-03, -6.829457454825878e-01, -6.871935736214899e-01, -6.543999880658122e-01, -6.846410383787735e-01, -6.852449795916313e-01, -6.852449795916313e-01, -6.639233547474911e-01, -5.910336632044878e-01, -6.237555744990489e-01, -6.453276125984333e-01, -6.354516411665939e-01, -5.383574670294792e-01, -7.850083752321416e-01, -1.780591620506079e-01, -2.774653587204752e-01, -2.961370770530498e-01, -3.323281539621443e-01, -3.323281539621443e-01, -3.993337386588070e-01, -3.127752215445996e-02, -4.258844582826907e-02, -3.788017384525199e-01, -6.101836179568623e-02, -6.305386698296152e-02, -9.231238312936508e-03, -1.139727283443060e-03, -2.165176013350327e-03, -6.014835741600483e-02, -3.223941888199071e-03, -3.223941888199067e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_23_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_23", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.265169533959588e+01, -3.265177419348577e+01, -3.265218436941893e+01, -3.265089183068433e+01, -3.265173643693672e+01, -3.265173643693672e+01, -4.895677878062300e+00, -4.895912397242680e+00, -4.903119317067599e+00, -4.900725268740383e+00, -4.895766271228015e+00, -4.994548366566023e+00, -7.682569318524386e-01, -9.249011182270777e-01, -8.786795972673962e-01, -8.955314313470257e-01, -9.260294124890111e-01, -9.260294124890111e-01, -2.465606867347515e-01, -2.519423541470351e-01, -8.482712674847687e-01, -1.471333621987564e-01, -2.481453400266616e-01, -2.481453400266616e-01, -1.024846111187254e-02, -1.073587339234007e-02, -4.411966379829487e-02, -4.911927759301575e-03, -1.062401374430647e-02, -1.062401374430647e-02, -7.213428144483139e+00, -7.217234251960900e+00, -7.213841346827186e+00, -7.935058217023702e+00, -7.215342565346801e+00, -7.215342565346801e+00, -2.622100851806541e+00, -2.666641529478089e+00, -2.603035561198810e+00, -2.638326866769697e+00, -2.676999040863398e+00, -2.853816928229966e+00, -8.050998343329964e-01, -8.619175665398714e-01, -7.794221057302684e-01, -7.895610771727316e-01, -8.270099209764377e-01, -9.138370227473392e-01, -9.864055792672449e-02, -2.249061845584617e-01, -9.727712520369133e-02, -2.629224592656424e+00, -1.235958363124732e-01, -1.235958363124732e-01, -4.925250742003455e-03, -5.415592575839494e-03, -4.059107277707622e-03, -6.230672898910153e-02, -5.128606815919755e-03, -4.934366443860869e-03, -8.761980405784136e-01, -8.531760708294938e-01, -9.012511615993245e-01, -8.674211097686780e-01, -8.641929391488147e-01, -8.641929391488147e-01, -8.413109981221941e-01, -7.012291682986305e-01, -7.181880748298666e-01, -7.492294333086901e-01, -7.309362585601611e-01, -8.181013712028005e-01, -9.023155231555727e-01, -2.502649719540726e-01, -3.847280176591931e-01, -4.734004717625465e-01, -4.481707094123606e-01, -4.481707094123605e-01, -6.460986044307871e-01, -4.077471368750130e-02, -5.562390084618404e-02, -4.748782197076766e-01, -8.028618498599750e-02, -8.298070017780361e-02, -1.200926640900531e-02, -1.482420520053317e-03, -2.816240419665455e-03, -7.915367315786967e-02, -4.193446566629026e-03, -4.193446566629020e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_23_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_23", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.082010178753927e-08, -2.082007840320341e-08, -2.081980863595590e-08, -2.082021312895260e-08, -2.082009060211351e-08, -2.082009060211351e-08, -1.534901445253204e-05, -1.535238112070718e-05, -1.545153693050432e-05, -1.540819671572645e-05, -1.534965693367780e-05, -1.995940535245512e-05, -4.052852264469109e-03, -5.570785703403831e-03, -4.932106858555128e-03, -5.297600456732806e-03, -5.587935603219431e-03, -5.587935603219431e-03, -7.687128305050552e-01, -7.868666842406432e-01, -9.571154351386998e-04, -3.507018990504874e-01, -7.733053933999945e-01, -7.733053933999945e-01, -3.103363837944200e+01, -2.827614126813626e+01, -1.394978214674905e+00, -7.766468235001079e+01, -2.953216475988018e+01, -2.953216475988013e+01, -7.248955567901185e-06, -7.250061594851512e-06, -7.249106696218326e-06, -6.511972685947391e-06, -7.249481991741031e-06, -7.249481991741031e-06, -1.218317042037002e-04, -1.240739391045336e-04, -1.206760714482425e-04, -1.225656368708219e-04, -1.248331911532528e-04, -1.643078400075544e-04, -3.541287282254749e-02, -3.168122166682644e-02, -3.719864740643752e-02, -3.978886371078731e-02, -3.336347117015157e-02, -2.738750071143689e-02, 2.192978993980961e-02, -3.046552093843268e-01, 5.895246424449621e-03, -3.282085489575762e-04, -5.546461666591394e-01, -5.546461666591394e-01, 2.040235994244637e+02, -7.192244755204017e+01, -2.540329265188665e+02, 5.495501886290997e-01, 1.899713753912776e+02, -9.610841193588712e+01, -4.396220850653177e-02, -4.429289872508617e-02, -4.220055095249896e-02, -4.410978659438698e-02, -4.415741443769484e-02, -4.415741443769484e-02, -4.987032187301207e-02, -6.035173101509046e-02, -6.028703013074080e-02, -5.779351791080652e-02, -5.932935941172370e-02, -5.053343001955132e-02, -2.493023564181361e-02, -1.716934749332978e-01, -2.135242706808356e-01, -1.210985140213436e-01, -2.016681799924268e-01, -2.016681799924269e-01, -5.634730349378754e-02, -1.491225015979797e+00, -9.109894587533923e-01, -2.495138466149543e-01, 1.262199488194493e-01, -7.928959413053907e-01, -1.404550185544042e+01, -1.002385227401978e+03, -3.903458953641157e+02, -9.525560189580592e-01, -1.576148872284034e+02, -1.576148872284035e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_23_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_23", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.130824835655661e-03, 2.130830923243814e-03, 2.130853223560953e-03, 2.130754763461816e-03, 2.130828071775588e-03, 2.130828071775588e-03, 6.445090822100840e-03, 6.447062957851383e-03, 6.506205483922192e-03, 6.482773929957928e-03, 6.445607599564558e-03, 1.917041571441296e-02, 6.645252972045328e-03, 4.530369134094034e-02, 3.736172513609274e-02, 4.093803837167247e-02, 4.551660427103402e-02, 4.551660427103402e-02, 1.297612012048891e-01, 1.378818256456869e-01, 1.339055134647340e-03, 2.087381242072245e-02, 1.320280390823228e-01, 1.320280390823228e-01, 5.333690716960491e-04, 5.597276999977577e-04, 2.185483505510280e-03, 1.442707308505828e-04, 5.665263870790636e-04, 5.665263870790640e-04, 1.242621360323731e-02, 1.240088668310925e-02, 1.242342528161063e-02, 9.157021834159958e-03, 1.241350054130370e-02, 1.241350054130370e-02, 8.261150945144491e-03, 8.775259619572803e-03, 8.033698136124888e-03, 8.441577426975521e-03, 8.912109554173745e-03, 3.048176452432851e-02, 1.303327282871071e-01, 1.123802002914538e-01, 1.311549380952188e-01, 1.319344044853183e-01, 1.255000720452677e-01, 6.527675952021961e-02, -8.575405944949885e-04, 5.200444380495389e-02, -9.411215664827968e-04, 3.938883072419237e-02, 1.995543469590689e-02, 1.995543469590689e-02, -3.066848605247594e-07, 1.792605822931132e-04, 2.667280780472207e-04, -2.845183592505430e-04, -3.531571872028530e-07, 1.811325278063641e-04, 8.447381631765742e-02, 9.309210814788242e-02, 7.988688749911335e-02, 8.764268414483228e-02, 8.884311182300655e-02, 8.884311182300655e-02, 9.033083868589271e-02, 1.493613619385448e-01, 1.425415559621270e-01, 1.257918909419132e-01, 1.353742623903492e-01, 8.262100200520908e-02, 1.114199147953668e-01, 7.537326501826654e-03, 1.206226422762312e-01, 4.807030441845338e-02, 1.560576218912627e-01, 1.560576218912627e-01, 5.354927544431842e-02, 1.812589673557813e-03, 2.956882562879661e-03, 2.046874406533536e-01, -8.393472381742858e-04, 9.011817627170529e-03, 3.872891564667137e-04, 5.104543322448695e-05, 1.364745259962675e-04, 9.396424219166914e-03, 1.822267764269910e-04, 1.822267764269932e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
