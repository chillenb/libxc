
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_16_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_16", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.433867279705602e+01, -2.433874340272848e+01, -2.433918541718382e+01, -2.433813847158257e+01, -2.433866874638463e+01, -2.433866874638463e+01, -3.432454942542773e+00, -3.432557356616550e+00, -3.435559102504312e+00, -3.436937266168334e+00, -3.435473574281994e+00, -3.435473574281994e+00, -6.179907373158765e-01, -6.174630840726483e-01, -6.056508317162697e-01, -6.149061251806200e-01, -6.121992170805541e-01, -6.121992170805541e-01, -1.758096973811928e-01, -1.786396835098109e-01, -6.974722669579296e-01, -1.258010765649229e-01, -1.435897551204455e-01, -1.435897551204456e-01, -5.697818630785467e-03, -5.995547063511849e-03, -3.301882288531949e-02, -3.278283768664238e-03, -4.125360548840214e-03, -4.125360548840215e-03, -5.955282754228819e+00, -5.955821778586944e+00, -5.955380580637062e+00, -5.955853433354437e+00, -5.955519020458376e+00, -5.955519020458376e+00, -2.113297193790248e+00, -2.143329806163818e+00, -2.106309274633925e+00, -2.133652034597632e+00, -2.133214839109181e+00, -2.133214839109181e+00, -6.248887871067285e-01, -6.715899563052499e-01, -5.491211047323826e-01, -5.574618261592965e-01, -6.381090404904963e-01, -6.381090404904963e-01, -8.658542319169131e-02, -1.710731390115586e-01, -7.997352333619295e-02, -1.908895844975181e+00, -1.027933216997714e-01, -1.027933216997715e-01, -2.516631281619451e-03, -3.194642433377585e-03, -2.449420270842869e-03, -5.360509542095750e-02, -2.944335161009770e-03, -2.944335161009770e-03, -6.575690725972692e-01, -6.580436962331399e-01, -6.579583340325139e-01, -6.578142054803655e-01, -6.578899276576790e-01, -6.578899276576790e-01, -6.326219280592105e-01, -5.562162770792797e-01, -5.837534686011334e-01, -6.060774647493697e-01, -5.946957465482285e-01, -5.946957465482287e-01, -6.918666921916165e-01, -2.221059767823178e-01, -2.704710809113338e-01, -3.563021751104762e-01, -3.144747918168848e-01, -3.144747918168848e-01, -4.858566270178116e-01, -3.166564578816028e-02, -4.309100128511747e-02, -3.491507349180327e-01, -6.859969460839935e-02, -6.859969460839935e-02, -7.984451487723572e-03, -8.533307017330351e-04, -1.801146026821410e-03, -6.455849861150148e-02, -2.727903830395331e-03, -2.727903830395330e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_16_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_16", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.934798049419900e+01, -2.934810143737205e+01, -2.934852900295329e+01, -2.934672792705452e+01, -2.934768733863168e+01, -2.934768733863168e+01, -4.688311081337825e+00, -4.688467098454018e+00, -4.692658156920518e+00, -4.691464844168202e+00, -4.691075010454797e+00, -4.691075010454797e+00, -8.111210307592065e-01, -8.099457358228793e-01, -7.851244653610677e-01, -7.994874044659797e-01, -7.955848769987384e-01, -7.955848769987384e-01, -2.227338301743870e-01, -2.263107365120489e-01, -8.855638287081347e-01, -1.619733836615591e-01, -1.837067310136800e-01, -1.837067310136801e-01, -7.362046719035311e-03, -7.752110225966894e-03, -4.299754412532647e-02, -4.276667847042474e-03, -5.361240652838302e-03, -5.361240652838304e-03, -7.246741670421311e+00, -7.251121301613422e+00, -7.246890196567585e+00, -7.250758510628999e+00, -7.248987168229499e+00, -7.248987168229499e+00, -2.614658715247134e+00, -2.636818615756097e+00, -2.599879204215225e+00, -2.619573478213139e+00, -2.634424309938879e+00, -2.634424309938879e+00, -8.157167466711459e-01, -9.350726229316498e-01, -7.422505149093546e-01, -8.088113958849434e-01, -8.333473736405915e-01, -8.333473736405915e-01, -1.123154259725864e-01, -2.180460622786970e-01, -1.039023417221270e-01, -2.792467635849252e+00, -1.322601429973091e-01, -1.322601429973092e-01, -3.341367553222279e-03, -4.207606329040681e-03, -3.199520042239236e-03, -6.989204755473011e-02, -3.871186908883109e-03, -3.871186908883109e-03, -8.723905724917587e-01, -8.496398168806942e-01, -8.573958728847983e-01, -8.640153026507005e-01, -8.606837037662151e-01, -8.606837037662151e-01, -8.561488119156729e-01, -6.594155674170128e-01, -6.988140532469508e-01, -7.519809962409419e-01, -7.234410082732853e-01, -7.234410082732856e-01, -9.773544584998526e-01, -2.814356585106962e-01, -3.418897937891767e-01, -4.607761119601002e-01, -3.974254749296118e-01, -3.974254749296118e-01, -6.110599525206289e-01, -4.104729774762702e-02, -5.616357067297875e-02, -4.540602661361948e-01, -8.895957181208453e-02, -8.895957181208455e-02, -1.052234723615769e-02, -1.143673258218845e-03, -2.339368492243888e-03, -8.347245253334407e-02, -3.572627442337291e-03, -3.572627442337294e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_16_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_16", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.049382784251782e-08, -2.049373799491713e-08, -2.049330486980922e-08, -2.049465661889688e-08, -2.049395295356350e-08, -2.049395295356350e-08, -1.538439401146865e-05, -1.538793013516130e-05, -1.548121697634755e-05, -1.544833589096778e-05, -1.545389741136755e-05, -1.545389741136755e-05, -4.441351090176689e-03, -4.422618240928657e-03, -4.000442390341041e-03, -4.339726491313018e-03, -4.251352972761488e-03, -4.251352972761488e-03, -6.213094227496783e-01, -6.329476223930559e-01, -8.919148389465228e-04, -3.640619963697767e-01, -4.730436731821533e-01, -4.730436731821531e-01, -9.295712242674291e+01, -8.440560968704075e+01, -1.789948370652114e+00, -1.840725677831184e+02, -1.544694771215590e+02, -1.544694771215586e+02, -6.210849060231090e-06, -6.212156680774928e-06, -6.211040762100504e-06, -6.212188120616286e-06, -6.211450294939355e-06, -6.211450294939355e-06, -1.408836919219252e-04, -1.432672604518295e-04, -1.398640946535133e-04, -1.422351645801145e-04, -1.427039540463313e-04, -1.427039540463313e-04, -2.784130019710356e-02, -2.421637257385292e-02, -2.943456822514368e-02, -3.044047975019222e-02, -2.746447797544191e-02, -2.746447797544191e-02, -4.024268963677111e-01, -2.774514488266877e-01, -4.388832252437932e-01, -2.440585510147061e-04, -5.692832203736464e-01, -5.692832203736466e-01, -6.886687103530532e+01, -1.175753401221384e+02, -8.432690227720676e+02, -8.211869082776526e-01, -2.705985124876797e+02, -2.705985124876806e+02, -3.996752963868161e-02, -4.009087494786076e-02, -4.007165006994443e-02, -4.003696852017773e-02, -4.005629719212808e-02, -4.005629719212808e-02, -4.395891949968841e-02, -5.331601884832007e-02, -5.330458415124317e-02, -5.099386859645890e-02, -5.239700926009253e-02, -5.239700926009253e-02, -1.884637293630457e-02, -2.199337307866667e-01, -1.840111079021789e-01, -1.308845583247570e-01, -1.715376251338209e-01, -1.715376251338210e-01, -6.014001894166156e-02, -2.200022847002878e+00, -1.032378722940661e+00, -1.995587451121921e-01, -8.095844750605421e-01, -8.095844750605422e-01, -1.565692113198250e+01, 1.547668737310003e+03, -1.227294733967603e+03, -9.898797129294326e-01, -4.540575006004667e+02, -4.540575006004673e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_16_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_16", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_16_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_16", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.926294646940375e-03, 2.926289253379794e-03, 2.926297602408995e-03, 2.926379347317426e-03, 2.926331895358588e-03, 2.926331895358588e-03, 8.066939085648815e-03, 8.069426952490653e-03, 8.137888082857614e-03, 8.137902737734404e-03, 8.126792714303508e-03, 8.126792714303508e-03, 1.065656078013167e-02, 1.059861498046743e-02, 9.587634760130685e-03, 1.168470220751999e-02, 1.102395298081627e-02, 1.102395298081627e-02, 6.591521094091062e-02, 6.928424627443573e-02, 1.476436239074475e-04, 1.311345221186664e-02, 2.660927079898763e-02, 2.660927079898771e-02, 3.213424916496179e-04, 3.379662983611385e-04, 1.142855004384371e-03, 1.100205950725994e-04, 1.918269935923977e-04, 1.918269935923948e-04, 1.212576396917555e-02, 1.211916321703013e-02, 1.212579275344999e-02, 1.211995068129471e-02, 1.212225564771221e-02, 1.212225564771221e-02, 1.951712562423006e-02, 2.042124392150572e-02, 1.942425927731718e-02, 2.027589897035212e-02, 2.006002405677377e-02, 2.006002405677377e-02, 8.102515053069881e-02, 7.866240535272025e-02, 6.289662097289979e-02, 6.348316315695436e-02, 8.290720827370089e-02, 8.290720827370089e-02, 4.811841919634629e-03, 2.847823335845358e-02, 4.070459168653789e-03, 2.006692178171231e-02, 1.225412210606614e-02, 1.225412210606625e-02, 1.369775035704145e-05, 5.689666799811744e-05, 2.070741875638465e-04, 2.229089029437882e-03, 1.054896495664093e-04, 1.054896495664088e-04, 9.834141784749260e-02, 1.016116757549206e-01, 1.005127094522591e-01, 9.956008902774503e-02, 1.000403429775867e-01, 1.000403429775867e-01, 9.881656127843731e-02, 1.125944495266772e-01, 1.160555022157388e-01, 1.122811246888316e-01, 1.146665063663450e-01, 1.146665063663450e-01, 6.981725599821149e-02, 4.792171896083433e-02, 6.536245538399554e-02, 8.471825630253817e-02, 8.528057392872629e-02, 8.528057392872641e-02, 9.278008199502417e-02, 1.298963702511758e-03, 1.460590735863081e-03, 1.127903540112878e-01, 4.908551907230803e-03, 4.908551907230844e-03, 1.171969439921517e-04, -7.143379537686989e-06, 1.275298556286454e-04, 5.231421196713905e-03, 1.489697343069173e-04, 1.489697343069152e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
