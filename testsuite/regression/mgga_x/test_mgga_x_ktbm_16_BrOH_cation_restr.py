
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_16_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_16", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.148377149105026e+01, -2.148389563995577e+01, -2.148444022186414e+01, -2.148259758473821e+01, -2.148356405639991e+01, -2.148356405639991e+01, -3.090223648534853e+00, -3.090312856127807e+00, -3.092729050893568e+00, -3.092030296335639e+00, -3.091783793879479e+00, -3.926188006048489e+00, -5.738628743503729e-01, -7.139309175934893e-01, -6.862026036438419e-01, -6.959319245490811e-01, -6.937844818201818e-01, -6.937844818201818e-01, -1.780452162312522e-01, -1.814703522314783e-01, -6.802991975420689e-01, -1.286279194203493e-01, -1.469259830706812e-01, -1.469259830706811e-01, -5.699819042773123e-03, -5.999368298087292e-03, -3.316985427256459e-02, -3.291606135989836e-03, -4.136249365896281e-03, -4.136249365896281e-03, -5.959017219254545e+00, -5.959513383364432e+00, -5.959037413912194e+00, -5.410400300988988e+00, -5.959270590922774e+00, -5.959270590922774e+00, -1.706829827333510e+00, -1.724859067669723e+00, -1.693698769591174e+00, -1.709356412922378e+00, -1.723355649350605e+00, -2.200587591008638e+00, -6.736769807400446e-01, -7.321218471101458e-01, -6.169192924882995e-01, -6.481350303894048e-01, -6.854629181118229e-01, -5.687659700513301e-01, -8.492859114522562e-02, -1.729174545706631e-01, -7.879404429131931e-02, -2.208215192866958e+00, -1.039504245540568e-01, -1.039504245540568e-01, -2.557689236324746e-03, -3.217827585307546e-03, -2.460544345980432e-03, -5.351258049904443e-02, -2.985043366349957e-03, -2.964181253276800e-03, -6.657282983088033e-01, -6.658451541817010e-01, -6.362857210341923e-01, -6.658521744208825e-01, -6.658795617071518e-01, -6.658795617071518e-01, -6.482549275906432e-01, -5.624959076373280e-01, -5.931304077197365e-01, -6.184998936332770e-01, -6.062154706686171e-01, -5.199654670653131e-01, -7.686753003905791e-01, -1.903149788968628e-01, -2.773386368751193e-01, -3.027236286485108e-01, -3.288387795208281e-01, -3.288387795208281e-01, -4.047679887482179e-01, -3.174223530554685e-02, -4.334308489270199e-02, -3.797039892212191e-01, -6.753098541927388e-02, -6.919666978373860e-02, -8.044475594112619e-03, -8.601271307892089e-04, -1.805466786319346e-03, -6.491375296865649e-02, -2.742797017289470e-03, -2.742797017289468e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_16_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_16", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.209868115495119e+01, -3.209879520093100e+01, -3.209931995910505e+01, -3.209762436275572e+01, -3.209851032623918e+01, -3.209851032623918e+01, -4.645459010985597e+00, -4.645730956511830e+00, -4.652973820974965e+00, -4.650469769686935e+00, -4.650255188729076e+00, -4.645447571043468e+00, -7.612847596236954e-01, -8.887894790696280e-01, -8.593962553324656e-01, -8.693561813743331e-01, -8.672066488493642e-01, -8.672066488493642e-01, -2.246981155550214e-01, -2.287723195811519e-01, -8.535526199901258e-01, -1.639845803634119e-01, -1.866727465584234e-01, -1.866727465584233e-01, -7.358333643332379e-03, -7.744990583905305e-03, -4.277014566543020e-02, -4.249549148740065e-03, -5.339935120666327e-03, -5.339935120666327e-03, -7.242121936049407e+00, -7.246548459775044e+00, -7.242366086756016e+00, -7.862299676477569e+00, -7.244343177041269e+00, -7.244343177041269e+00, -2.492752976315988e+00, -2.535532600911341e+00, -2.460383791593544e+00, -2.498353322607043e+00, -2.532407349116590e+00, -2.636536317994439e+00, -7.828029078911024e-01, -8.716421206506221e-01, -7.240744840590316e-01, -7.531241403899124e-01, -7.970715115544823e-01, -8.733731774439030e-01, -1.101649088235603e-01, -2.196235715247619e-01, -1.025371894486127e-01, -2.570943715223970e+00, -1.327942095804395e-01, -1.327942095804395e-01, -3.410156592447846e-03, -4.154305561837518e-03, -3.176602785968809e-03, -7.043540601282584e-02, -3.979754865311833e-03, -3.826815045935714e-03, -8.616556833423288e-01, -8.395227885057333e-01, -8.844051612043167e-01, -8.534773828943462e-01, -8.502297335577202e-01, -8.502297335577202e-01, -8.358555891391350e-01, -6.560955067068723e-01, -6.905910441486568e-01, -7.378661256449174e-01, -7.117331994435885e-01, -7.868327753933104e-01, -9.047361941993788e-01, -2.391543936087538e-01, -3.471096340703807e-01, -4.406363625432462e-01, -4.039918940990738e-01, -4.039918940990739e-01, -6.114927824614589e-01, -4.093320141880787e-02, -5.584667066447298e-02, -4.472847794620440e-01, -8.795603782293039e-02, -8.881533791947858e-02, -1.038502155044730e-02, -1.110462266730694e-03, -2.330921329586132e-03, -8.335238106480138e-02, -3.541002126566080e-03, -3.541002126566080e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_16_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_16", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.813269867022320e-08, -1.813266851337273e-08, -1.813240272236234e-08, -1.813286549827420e-08, -1.813264161777523e-08, -1.813264161777523e-08, -1.386809896430451e-05, -1.387134788133632e-05, -1.395609216285449e-05, -1.391678304628676e-05, -1.392678310627460e-05, -1.779121673826305e-05, -3.962485904330018e-03, -5.492501160389437e-03, -4.946965630717498e-03, -5.285803362324716e-03, -5.204403967261671e-03, -5.204403967261671e-03, -6.384334338026195e-01, -6.535972333487756e-01, -8.089743457119267e-04, -4.272847769906246e-01, -5.198575564862017e-01, -5.198575564862015e-01, -9.468282415892233e+01, -8.731265044243625e+01, -2.257734345787134e+00, -2.421065052145219e+02, -1.811796928114568e+02, -1.811796928114568e+02, -6.214824229825371e-06, -6.216086696108893e-06, -6.214933365441520e-06, -5.647130611990988e-06, -6.215443891700145e-06, -6.215443891700145e-06, -1.119703768373966e-04, -1.137553578936645e-04, -1.103046318743035e-04, -1.120552964949556e-04, -1.137791124899667e-04, -1.477863672315525e-04, -3.005066611353747e-02, -2.639177965463095e-02, -3.321122168617410e-02, -3.535299394533552e-02, -2.952749150067170e-02, -2.460193031267061e-02, 1.183785324953194e-01, -2.889640811899140e-01, 1.820340616957292e-01, -2.818161074502216e-04, -6.329482834419005e-01, -6.329482834419008e-01, 4.881898684131279e+02, -2.381447397374973e+02, -1.159385084427565e+03, 7.987365048215080e-01, 7.127535907584260e+02, -4.947611335136529e+02, -4.047353766075135e-02, -4.057505687883548e-02, -3.874371991268678e-02, -4.053580286955156e-02, -4.055219276204586e-02, -4.055219276204586e-02, -4.506335863334518e-02, -5.394855148293970e-02, -5.418288221079707e-02, -5.205568432600125e-02, -5.343147140676859e-02, -4.597181578571855e-02, -2.092355779851562e-02, -1.405704674365462e-01, -1.916581486763488e-01, -1.099333260587111e-01, -1.816041174573600e-01, -1.816041174573601e-01, -5.008550088923910e-02, -2.459647915669054e+00, -1.347902510853314e+00, -2.180473829468805e-01, 3.446771859274141e-01, -9.773643493145381e-01, -3.293462291053016e+01, -3.682725029991038e+03, -1.416433317897172e+03, -1.115746764826239e+00, -6.898916739242504e+02, -6.898916739242527e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_16_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_16", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.024985504384192e-03, 2.025006792171567e-03, 2.025088843606112e-03, 2.024774157789842e-03, 2.024940822408845e-03, 2.024940822408845e-03, 3.948283708018523e-03, 3.950451474972986e-03, 4.007696606283829e-03, 3.984161588282844e-03, 3.987096787695258e-03, 1.454913256981569e-02, -3.689581631815519e-04, 3.595160122960767e-02, 3.005406254048706e-02, 3.284434234629389e-02, 3.218848673059897e-02, 3.218848673059897e-02, 7.262115448919032e-02, 7.785894314130490e-02, -2.171172500309614e-03, 1.998638921754710e-02, 3.563457967191578e-02, 3.563457967191559e-02, 3.300536270364861e-04, 3.550020535205663e-04, 1.610233484055761e-03, 1.623203545932035e-04, 2.411436718558284e-04, 2.411436718558284e-04, 1.214514548436317e-02, 1.213828253392975e-02, 1.214476926008697e-02, 9.408695221038573e-03, 1.214170561789457e-02, 1.214170561789457e-02, 4.181216236799783e-03, 4.666596939480699e-03, 3.810017469663756e-03, 4.234947147275763e-03, 4.639766989085958e-03, 2.280338945242086e-02, 1.041619687388821e-01, 1.003179783565511e-01, 1.000745635562163e-01, 1.086183506482061e-01, 1.044348075626317e-01, 5.359274507852443e-02, -1.677742312369452e-03, 3.219944907134983e-02, -1.398881102725474e-03, 3.271555133518279e-02, 1.561033655888813e-02, 1.561033655888820e-02, -5.559644292505306e-08, 1.491585995325598e-04, 3.247735460683023e-04, -5.691446959810431e-04, -3.503527753653943e-07, 2.422889833382822e-04, 1.010070999105021e-01, 1.044310687918293e-01, 9.309591873469128e-02, 1.022874677228176e-01, 1.027918543274797e-01, 1.027918543274797e-01, 1.042540928062707e-01, 1.169695255989984e-01, 1.218281539679518e-01, 1.186319865151166e-01, 1.211919658824213e-01, 7.485763087762413e-02, 9.568993450055646e-02, -7.808698079769931e-03, 7.647398752275202e-02, 2.213886278739661e-02, 1.069714190756819e-01, 1.069714190756820e-01, 3.326750992546642e-02, 1.533310594417460e-03, 2.185748039232961e-03, 1.569920771941718e-01, -1.515449840278769e-03, 6.885518688869638e-03, 3.229859621023383e-04, 4.403324018574117e-05, 1.566738834814045e-04, 6.457364626564209e-03, 2.676657130310132e-04, 2.676657130310142e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
