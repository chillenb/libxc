
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_eel_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_eel", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.312548159775971e+01, -2.312555954188600e+01, -2.312598703653388e+01, -2.312483038358448e+01, -2.312542490104063e+01, -2.312542490104063e+01, -2.891553603791462e+00, -2.891876677609421e+00, -2.900773171781107e+00, -2.900789240023574e+00, -2.899080627447117e+00, -2.899080627447117e+00, -3.298222374386676e-01, -3.286148695741238e-01, -3.080038087112938e-01, -3.400781676297147e-01, -3.431262986664414e-01, -3.431262986664414e-01, -1.690339329211991e-01, -1.692302346751551e-01, -1.552831511385623e-01, -8.450914306340797e-02, -1.460729574088697e-01, -1.460729574088696e-01, -3.172287787789190e-03, -3.415751374336541e-03, -2.678625065713338e-02, -1.484491964344561e-03, -2.399448885270661e-03, -2.399448885270672e-03, -5.671156394669962e+00, -5.672266809153608e+00, -5.671232783486971e+00, -5.672211488648778e+00, -5.671706557890122e+00, -5.671706557890122e+00, -1.965492131855906e+00, -2.005080897210055e+00, -1.970980550004807e+00, -2.007365155118924e+00, -1.985396568867996e+00, -1.985396568867996e+00, -5.828976244880927e-01, -6.800665662347147e-01, -4.832050529845441e-01, -5.420443734436415e-01, -6.016904018674956e-01, -6.016904018674956e-01, -6.084991137676615e-02, -1.589127707933787e-01, -5.700695045584254e-02, -1.914776638249835e+00, -8.119528133376708e-02, -8.119528133376708e-02, -1.064770948902324e-03, -1.461033429231268e-03, -1.203210354635844e-03, -4.184304093867675e-02, -1.536741105336121e-03, -1.536741105336104e-03, -6.423495737102307e-01, -6.386649950954453e-01, -6.399615725095474e-01, -6.410294316270488e-01, -6.404949195186695e-01, -6.404949195186695e-01, -6.249364186342161e-01, -5.254715056639457e-01, -5.511954007280235e-01, -5.804686013494768e-01, -5.643090345211795e-01, -5.643090345211795e-01, -6.982354748072167e-01, -2.168429375410861e-01, -2.492031419899889e-01, -3.052766173867487e-01, -2.808808264692882e-01, -2.808808264692883e-01, -4.435399350193543e-01, -2.550388517979092e-02, -3.490060736672722e-02, -3.110803631242488e-01, -5.049647185037193e-02, -5.049647185037201e-02, -4.917026609315044e-03, -2.694079762186432e-04, -7.137710922852289e-04, -5.165382653823045e-02, -1.392301635164050e-03, -1.392301635164034e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_eel_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_eel", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.956093411163781e+01, -2.955962709691337e+01, -2.956117113518492e+01, -2.955979934156669e+01, -2.956157603430729e+01, -2.956047854938566e+01, -2.955889567810626e+01, -2.955706304262622e+01, -2.956108841026690e+01, -2.955816940917143e+01, -2.956108841026690e+01, -2.955816940917143e+01, -5.145903504717150e+00, -5.148172527880405e+00, -5.146048730907533e+00, -5.148501130641867e+00, -5.151594092892231e+00, -5.153318613151229e+00, -5.138812444643023e+00, -5.141325557210440e+00, -5.144499483443904e+00, -5.146218037802628e+00, -5.144499483443904e+00, -5.146218037802628e+00, -7.510025486011416e-01, -7.772903046743380e-01, -7.425212167089122e-01, -7.737329366221742e-01, -6.303788213257033e-01, -6.004921569047917e-01, -6.420143059556856e-01, -6.569181974330962e-01, -8.093809317807094e-01, -4.760955337916245e-01, -8.093809317807094e-01, -4.760955337916245e-01, -2.348508964206469e-02, -4.013220677304189e-02, -3.367241293621383e-02, -5.220864312266054e-02, -3.629248715117534e-01, -5.929374928488658e-01, 1.215793636391816e-03, 3.555246905103625e-02, -2.967367251671333e-02, -2.877776989648059e-02, -2.967367251671355e-02, -2.877776989648058e-02, -5.434854773084850e-03, -5.869555991873453e-03, -5.790776658279417e-03, -6.317521134163909e-03, -3.658069707959104e-02, -3.798521176822283e-02, -2.768212264540551e-03, -2.700310321897023e-03, -4.690193923134010e-03, -2.405422354873176e-03, -4.690193923134035e-03, -2.405422354873239e-03, -7.419023205281394e+00, -7.416593810612033e+00, -7.426289295261946e+00, -7.423617053248135e+00, -7.419245445464330e+00, -7.416704358173937e+00, -7.425487576811249e+00, -7.423091590396047e+00, -7.422889405411461e+00, -7.420149917224028e+00, -7.422889405411461e+00, -7.420149917224028e+00, -1.871147790845490e+00, -1.869335575956199e+00, -1.903277718774120e+00, -1.900778285939855e+00, -1.783004043266841e+00, -1.807305588771815e+00, -1.811185399668143e+00, -1.834983121163688e+00, -1.953695703060783e+00, -1.894939333771872e+00, -1.953695703060783e+00, -1.894939333771872e+00, -8.536815982694393e-01, -8.493063440115950e-01, -1.004371480911760e+00, -9.985508879593146e-01, -7.781032576036352e-01, -8.116505860613715e-01, -9.638491678470343e-01, -9.788536587736605e-01, -8.989176557951207e-01, -8.636262311551099e-01, -8.989176557951207e-01, -8.636262311551102e-01, -1.529984089182945e-02, -1.962682154432021e-02, 4.518314951962184e-02, 4.339262549870138e-02, -3.572866470417918e-02, -2.085814356300138e-02, -3.234034135184459e+00, -3.232218541713833e+00, 4.294276849061739e-02, 6.206707696520663e-02, 4.294276849061755e-02, 6.206707696520703e-02, -1.935892303412790e-03, -2.013565777327098e-03, -2.671479831763146e-03, -2.707398989404520e-03, -2.095348312037765e-03, -2.279520022270019e-03, -4.383787274615785e-02, -4.140125678638018e-02, -2.033951925003833e-03, -3.090813274221152e-03, -2.033951925003825e-03, -3.090813274221118e-03, -8.548043416706551e-01, -8.581087315307638e-01, -8.498843885798906e-01, -8.532028669637546e-01, -8.516103617323342e-01, -8.549344078683669e-01, -8.530467574769450e-01, -8.563459575982993e-01, -8.523279470699049e-01, -8.556392459616254e-01, -8.523279470699049e-01, -8.556392459616254e-01, -8.318667999828818e-01, -8.346167034336484e-01, -5.554684721574029e-01, -5.606171680010321e-01, -6.649188448737360e-01, -6.706697716485979e-01, -7.782770219922648e-01, -7.817475809657513e-01, -7.230942770914025e-01, -7.262368467994580e-01, -7.230942770914025e-01, -7.262368467994580e-01, -1.086421814162568e+00, -1.077524714801574e+00, -2.274302360711008e-02, -2.561627458727960e-02, -1.243763865097577e-01, -1.328332177020843e-01, -3.933434015077907e-01, -3.980312800523250e-01, -2.480051842165372e-01, -2.496494784937061e-01, -2.480051842165374e-01, -2.496494784937063e-01, -5.274341242573002e-01, -5.341720277279310e-01, -3.544947134088392e-02, -3.625815869562904e-02, -4.369150819168995e-02, -4.415568179412058e-02, -4.335795243951407e-01, -4.355630385263376e-01, -2.547961175058091e-02, -5.757029858291140e-03, -2.547961175058136e-02, -5.757029858291126e-03, -8.408302689823038e-03, -8.797113991732554e-03, -4.961020225519861e-04, -5.268431996349014e-04, -1.267480629182044e-03, -1.386699493517039e-03, -1.527803392942459e-02, 6.796118376105675e-02, -2.009455342042162e-03, -2.765026840738746e-03, -2.009455342042148e-03, -2.765026840738711e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_eel_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_eel", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.518036558225161e-08, 0.000000000000000e+00, -2.518042060336953e-08, -2.517879532047417e-08, 0.000000000000000e+00, -2.517928057566279e-08, -2.517537588648995e-08, 0.000000000000000e+00, -2.517393153978463e-08, -2.519306702015423e-08, 0.000000000000000e+00, -2.519649325336000e-08, -2.517934813975716e-08, 0.000000000000000e+00, -2.518865497525462e-08, -2.517934813975716e-08, 0.000000000000000e+00, -2.518865497525462e-08, -4.526291540020216e-05, 0.000000000000000e+00, -4.520675041581314e-05, -4.526057000120845e-05, 0.000000000000000e+00, -4.519951044996914e-05, -4.514672027936060e-05, 0.000000000000000e+00, -4.510737930702572e-05, -4.544722248161108e-05, 0.000000000000000e+00, -4.538526437665388e-05, -4.530342623154622e-05, 0.000000000000000e+00, -4.528338297384904e-05, -4.530342623154622e-05, 0.000000000000000e+00, -4.528338297384904e-05, -2.990313686121907e-02, 0.000000000000000e+00, -2.919835012687550e-02, -3.020261770296907e-02, 0.000000000000000e+00, -2.927773961067189e-02, -3.318702979475213e-02, 0.000000000000000e+00, -3.484901876827419e-02, -3.534084134811420e-02, 0.000000000000000e+00, -3.530949639030868e-02, -2.703556954380530e-02, 0.000000000000000e+00, -4.229650129714973e-02, -2.703556954380530e-02, 0.000000000000000e+00, -4.229650129714973e-02, -8.998302144819986e+00, 0.000000000000000e+00, -8.194767116280980e+00, -8.684128489789023e+00, 0.000000000000000e+00, -7.805349506732374e+00, -5.479283769884371e-03, 0.000000000000000e+00, -5.036225275995722e-03, -8.117695663886321e+00, 0.000000000000000e+00, -1.351634981941826e+01, -7.565649560302968e+00, 0.000000000000000e+00, -3.424873746700110e+00, -7.565649560302965e+00, 0.000000000000000e+00, -3.424873746700119e+00, 4.531683410518052e+02, 0.000000000000000e+00, 4.015187569899585e+02, 4.260673456398923e+02, 0.000000000000000e+00, 3.722156266350647e+02, 2.559767743655036e+00, 0.000000000000000e+00, 1.469500648325324e+00, 1.096135463174764e+03, 0.000000000000000e+00, 1.112095440303783e+03, 5.610799366780998e+02, 0.000000000000000e+00, 2.603854109763694e+03, 5.610799366781006e+02, 0.000000000000000e+00, 2.603854109763724e+03, -3.388894027310477e-06, 0.000000000000000e+00, -3.396415641108817e-06, -3.280880536211934e-06, 0.000000000000000e+00, -3.291962431185270e-06, -3.383361877375691e-06, 0.000000000000000e+00, -3.393159569348381e-06, -3.290685550668447e-06, 0.000000000000000e+00, -3.298272402911164e-06, -3.333292009410514e-06, 0.000000000000000e+00, -3.343964530761720e-06, -3.333292009410514e-06, 0.000000000000000e+00, -3.343964530761720e-06, -6.385428883146808e-04, 0.000000000000000e+00, -6.389246038521874e-04, -6.209606604712865e-04, 0.000000000000000e+00, -6.218029315015647e-04, -6.554081420280834e-04, 0.000000000000000e+00, -6.509786201498707e-04, -6.399349180970801e-04, 0.000000000000000e+00, -6.353522965292397e-04, -6.158872159186260e-04, 0.000000000000000e+00, -6.281882635847351e-04, -6.158872159186260e-04, 0.000000000000000e+00, -6.281882635847351e-04, -5.314451654841959e-02, 0.000000000000000e+00, -5.365504283080026e-02, 3.861376932064221e-04, 0.000000000000000e+00, 3.314130017011892e-04, -8.520579267156024e-02, 0.000000000000000e+00, -7.135439652157559e-02, 5.513212839735342e-03, 0.000000000000000e+00, 3.137571157667055e-03, -3.917817816913229e-02, 0.000000000000000e+00, -5.038186169002681e-02, -3.917817816913229e-02, 0.000000000000000e+00, -5.038186169002678e-02, -1.059581281794298e+01, 0.000000000000000e+00, -9.148442190063106e+00, -7.006331416721808e+00, 0.000000000000000e+00, -6.872111655196634e+00, -5.978099579276575e+00, 0.000000000000000e+00, -1.035085074979965e+01, 2.394594076508945e-05, 0.000000000000000e+00, 2.395165424408395e-05, -2.154040007041522e+01, 0.000000000000000e+00, -2.756395886177074e+01, -2.154040007041525e+01, 0.000000000000000e+00, -2.756395886177078e+01, 2.197229505798621e+03, 0.000000000000000e+00, 1.893875110844420e+03, 1.304355627705427e+03, 0.000000000000000e+00, 1.214879527313628e+03, 5.739371818244874e+03, 0.000000000000000e+00, 5.483559983938243e+03, -3.872437115489265e+00, 0.000000000000000e+00, -7.145988497048072e+00, 3.755751893195049e+03, 0.000000000000000e+00, 2.098316744133600e+03, 3.755751893195009e+03, 0.000000000000000e+00, 2.098316744133585e+03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.547923140661272e-01, 0.000000000000000e+00, -1.516752650218703e-01, -1.089136947749250e-01, 0.000000000000000e+00, -1.057901027843002e-01, -4.257869987929459e-02, 0.000000000000000e+00, -4.104039562674172e-02, -7.980077876694169e-02, 0.000000000000000e+00, -7.793906673739363e-02, -7.980077876694169e-02, 0.000000000000000e+00, -7.793906673739363e-02, 6.677102752369843e-04, 0.000000000000000e+00, 5.398427014739919e-04, -3.310945798820353e+00, 0.000000000000000e+00, -3.249977146796109e+00, -1.804400137975001e+00, 0.000000000000000e+00, -1.749454709642059e+00, -6.158214415221906e-01, 0.000000000000000e+00, -6.007347549100620e-01, -1.092000294596415e+00, 0.000000000000000e+00, -1.094353472044569e+00, -1.092000294596416e+00, 0.000000000000000e+00, -1.094353472044570e+00, -2.153435114014441e-01, 0.000000000000000e+00, -2.089391262008103e-01, -9.692225270779277e-02, 0.000000000000000e+00, 2.205307270610354e+00, -1.171213459770812e+00, 0.000000000000000e+00, -1.613669414881050e+00, -6.740044610237452e-01, 0.000000000000000e+00, -6.410872335084072e-01, -1.565105078356173e+01, 0.000000000000000e+00, -2.718428985024662e+01, -1.565105078356167e+01, 0.000000000000000e+00, -2.718428985024669e+01, 2.003873286377972e+02, 0.000000000000000e+00, 1.884473199738340e+02, 2.550143662763419e+04, 0.000000000000000e+00, 3.548220908891247e+04, 5.828648369321335e+03, 0.000000000000000e+00, 5.432075380928863e+03, -2.561151242160344e+01, 0.000000000000000e+00, -8.083432664470207e+01, 6.175940418897368e+03, 0.000000000000000e+00, 2.511086931769685e+03, 6.175940418897226e+03, 0.000000000000000e+00, 2.511086931769673e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_eel_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_eel", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_eel_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_eel", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.169192604654383e-03, 2.168544932776292e-03, 2.169089890406449e-03, 2.168470419844861e-03, 2.168796018098302e-03, 2.168039510519943e-03, 2.169948664111232e-03, 2.169511162011314e-03, 2.169127123414169e-03, 2.168949076170813e-03, 2.169127123414169e-03, 2.168949076170813e-03, 2.033771576687048e-02, 2.033384885203031e-02, 2.033862972151684e-02, 2.033413714375158e-02, 2.035237744703311e-02, 2.035363654243953e-02, 2.036094096086457e-02, 2.035737462504092e-02, 2.033928165806293e-02, 2.036919634536992e-02, 2.033928165806293e-02, 2.036919634536992e-02, 7.003469540115997e-02, 7.099329177326186e-02, 6.985920872146861e-02, 7.081322450209868e-02, 6.625213274625155e-02, 6.719403463149498e-02, 7.242532826284979e-02, 7.350325054178819e-02, 6.999995640293347e-02, 7.541132079246202e-02, 6.999995640293347e-02, 7.541132079246202e-02, 3.443296703583096e-01, 3.599426093667916e-01, 3.429239906842121e-01, 3.602413941025212e-01, 1.280651546635901e-02, 2.126520434642937e-02, 1.130293519545682e-01, 2.293917317608005e-01, 3.274416678336385e-01, 1.084762607576789e-03, 3.274416678336388e-01, 1.084762607576790e-03, 0.000000000000000e+00, 7.928288276398561e-08, 0.000000000000000e+00, 1.594779366038217e-13, 1.617303285268248e-07, 7.732264375667872e-06, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 3.970261590286121e-03, 3.970460036620454e-03, 3.848694651886948e-03, 3.852943828466895e-03, 3.961819260592123e-03, 3.965198826132474e-03, 3.857585700003501e-03, 3.858518236395422e-03, 3.909393744598620e-03, 3.911752270537541e-03, 3.909393744598620e-03, 3.911752270537541e-03, 3.864103015748843e-02, 3.866555163101090e-02, 3.848831941025170e-02, 3.851179280768929e-02, 3.885697579347412e-02, 3.882053103367671e-02, 3.874164218196000e-02, 3.869612091442347e-02, 3.838235271943468e-02, 3.856721612274076e-02, 3.838235271943468e-02, 3.856721612274076e-02, 1.173002841047663e-01, 1.169502247310712e-01, 6.785102838821448e-02, 6.402810231360660e-02, 1.340779992150267e-01, 1.299839341205505e-01, 1.198070672131862e-01, 1.123409317632038e-01, 1.048990356816216e-01, 1.169600006867267e-01, 1.048990356816216e-01, 1.169600006867266e-01, 4.921152832545024e-02, 4.117747404215608e-02, 2.842348050810674e-01, 2.824510264810765e-01, 1.372500739287853e-02, 3.990030567361721e-02, 3.221819622600398e-02, 3.222129249423284e-02, 1.769607776067401e-01, 2.792471859678831e-01, 1.769607776067404e-01, 2.792471859678836e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.592752797761171e-04, 5.288892495466153e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.501861966721620e-01, 1.491446906204791e-01, 1.263517236033615e-01, 1.246157097974373e-01, 7.611837993449772e-02, 7.484044006482561e-02, 1.066532228905148e-01, 1.052344667486500e-01, 1.066532228905148e-01, 1.052344667486500e-01, 8.051185785530372e-02, 7.597213218617745e-02, 2.745502935410257e-01, 2.740779562237834e-01, 2.543723058269763e-01, 2.543576740778477e-01, 2.106188768560225e-01, 2.092558591869405e-01, 2.383556701454405e-01, 2.387046482221951e-01, 2.383556701454405e-01, 2.387046482221950e-01, 1.662162255248294e-01, 1.650033947604103e-01, 9.691821264654896e-04, 2.463043409683251e-04, 2.251239746542359e-05, 7.739363604191213e-05, 2.203235792843987e-01, 2.187561989586054e-01, 3.223964468532044e-02, 7.435047359260448e-02, 3.223964468532021e-02, 7.435047359260465e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 5.204180665752079e-02, 2.011168610972233e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
