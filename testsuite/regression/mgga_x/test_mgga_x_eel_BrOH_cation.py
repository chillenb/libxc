
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_eel_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_eel", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.267662194119071e+01, -2.267675140588508e+01, -2.267731979822613e+01, -2.296700616624604e+01, -2.296781269565124e+01, -2.325931587317876e+01, -3.270889710870978e+00, -3.766705169537004e+00, -3.767218616755755e+00, -3.767352611446986e+00, -3.766947030167949e+00, -3.271189822379192e+00, -3.127320167148332e-01, -5.143792049435901e-01, -6.974905171281304e-01, -4.942541353922472e-01, -2.846921032574720e-01, -7.043067897310862e-01, -1.231460899782912e-01, -1.265928116121230e-01, -5.181092922531132e-01, -1.354010730350890e-01, -1.753772773317233e-01, -1.659515031203979e-01, -3.187416734464168e-03, -2.635024563649204e-03, -2.018370101207644e-02, -1.454917707252234e-03, -2.386701434726210e-03, -2.386701434726210e-03, -5.672188563375606e+00, -5.673255307609045e+00, -5.672241918178305e+00, -5.673183568727998e+00, -5.662984890892307e+00, -5.662987029815445e+00, -2.115362564362269e+00, -2.131667153636374e+00, -2.103389954120264e+00, -2.117835832279352e+00, -1.779805629350910e+00, -2.130187092165463e+00, -6.015022648973352e-01, -6.941592937113941e-01, -5.891024606369695e-01, -6.137317081228015e-01, -6.170759717440093e-01, -6.491257322929574e-01, -8.981722025198406e-02, -1.133567942463740e-01, -8.246914090441235e-02, -2.087929137149524e+00, -1.091556084218980e-01, -1.091556084218980e-01, -8.279694177678971e-04, -1.392946151975896e-03, -1.177498033511612e-03, -3.286169705294295e-02, -1.501211411344329e-03, -1.501211411344329e-03, -6.423495737102307e-01, -6.386649950954453e-01, -6.399615725095474e-01, -6.410294316270488e-01, -6.404949195186695e-01, -6.404949195186695e-01, -6.249364186342161e-01, -4.886627198430659e-01, -5.384679857679739e-01, -5.866474978084120e-01, -5.735060540020605e-01, -5.606265125419814e-01, -7.145295258207911e-01, -2.324496603197534e-01, -1.959500716473656e-01, -3.102918416639133e-01, -3.254864715986270e-01, -2.491379373004918e-01, -4.912181702654019e-01, -8.103864280790980e-03, -4.028498064850648e-02, -3.632664289106292e-01, -7.045463397046069e-02, -7.045463397046070e-02, -2.059010555686387e-03, -2.190165160703787e-04, -4.627484748252000e-04, -1.642677827480784e-02, -1.361174338241440e-03, -8.492633305521612e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_eel_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_eel", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.379671881663451e+01, -3.379547395088862e+01, -3.379665168462088e+01, -3.379542540579054e+01, -3.379652457041060e+01, -3.379521873925646e+01, -3.379726868831170e+01, -2.890579389776894e+01, -3.379666979594529e+01, -2.890727372959332e+01, -2.890727157676340e+01, -2.890727372959332e+01, -3.365985079484105e+00, -6.010484555819945e+00, -3.366558147173730e+00, -3.365850629475784e+00, -3.377670143807472e+00, -3.379691883204799e+00, -3.373917058166954e+00, -3.373979129450594e+00, -3.364168602066906e+00, -3.384047523394804e+00, -6.009385815309825e+00, -3.384047523394805e+00, -8.723556493814741e-01, -8.956062700965941e-01, -8.651901193445163e-01, -3.383399757525415e-01, -2.520946531258190e-01, -2.384788399439489e-01, -2.771547427730561e-01, -8.149090373601724e-01, -9.149711176377360e-01, -6.568442159232516e-01, -3.526174612267942e-01, -1.882469984920725e-01, -1.221824757192593e-01, -3.556869035231860e-02, -1.313933650715819e-01, -4.577237274349771e-02, 3.998187881772369e-02, -6.435252917293069e-01, 1.127860286136564e-01, 9.522033991078299e-02, -1.077792195197350e-02, 1.662777202177556e-01, -1.077792195197346e-02, -3.067535736268320e-02, 2.234681777005373e-02, 2.394657806319010e-02, -1.973440808603839e-03, 2.550489111864544e-02, -1.097319375135494e-02, 1.204488643101990e-01, 1.200476813677253e-02, 1.176491449414949e-02, 1.955010810249313e-02, 1.021079327367862e-02, 1.955010810249313e-02, 1.021079327367864e-02, -7.406968128457315e+00, -7.405231854897147e+00, -7.414404174057622e+00, -7.412417158667386e+00, -7.407475880366081e+00, -7.405546920175690e+00, -7.413852558242834e+00, -7.412070568067874e+00, -7.801357116986513e+00, -7.408834270400129e+00, -7.410712261737339e+00, -7.799553695687064e+00, -1.670346938404000e+00, -1.675067029656181e+00, -1.729907122561974e+00, -1.732723894843934e+00, -1.616973936615910e+00, -1.636906312683660e+00, -1.669772572087444e+00, -1.690072948844862e+00, -1.743542560916167e+00, -3.326794147134877e+00, -1.743542560916167e+00, -1.711387247014320e+00, -6.930585981766169e-01, -9.979154637741958e-01, -8.682370003895290e-01, -8.741084979665017e-01, -5.260201683055598e-01, -5.958776082235112e-01, -6.443745012314666e-01, -6.958140454252033e-01, -7.597064998365054e-01, -9.870046125376554e-01, -7.597064998365055e-01, -6.929033917673664e-01, 1.576936052071946e-01, 1.574549180858185e-01, -7.299324309786656e-02, 5.724713049475320e-02, 1.605271509072049e-01, 1.563113298140099e-01, -2.383824667521337e+00, -2.383236042066914e+00, 1.308487548738304e-01, 1.015898423525344e-01, 1.308487548738304e-01, 1.015898423525344e-01, -8.492787339604608e-04, 8.551487407875794e-03, 1.140836693484208e-02, 1.153442136200388e-02, 8.936808087706780e-03, 9.625014697984335e-03, 1.471380999057184e-01, -1.837116775330681e-02, 8.293499919267429e-03, 1.306878671678966e-02, 8.293499919267434e-03, 1.306878671678966e-02, -8.548043416706551e-01, -8.581087315307638e-01, -8.498843885798906e-01, -8.532028669637546e-01, -8.516103617323342e-01, -8.549344078683669e-01, -8.530467574769450e-01, -8.563459575982993e-01, -8.523279470699049e-01, -8.556392459616254e-01, -8.523279470699049e-01, -8.556392459616254e-01, -8.318667999828818e-01, -8.346167034336484e-01, -5.383079487926524e-01, -8.538848680018244e-01, -6.375721608562855e-01, -8.637216959662612e-01, -7.380071697038734e-01, -7.415530560340798e-01, -6.871843805715022e-01, -6.913955340392312e-01, -6.871843805715023e-01, -8.568892339577830e-01, -8.766344445500943e-01, -1.073944180890815e+00, -1.465943256035096e-02, -1.714259080684027e-02, -3.013222264359708e-01, -1.068792219245297e-01, -5.811875552104347e-01, -2.940926520975717e-01, -1.996039461613715e-01, -2.009640766764781e-01, -1.996039461613716e-01, -4.613381975051105e-01, -4.425940291341713e-01, -4.558270520599569e-01, -1.076793711319155e-02, -1.084161406260624e-02, 1.384081525135400e-01, 1.398449319261004e-01, -3.190578909290973e-01, -3.540464484679496e-01, 1.437024730658499e-01, 1.338193634796935e-01, 1.437024730658498e-01, 1.338193634796932e-01, -2.693908251793812e-03, -2.791574296011817e-03, 2.061791058034708e-03, 2.067397071860728e-03, -5.962938043523265e-04, -6.342065959986617e-04, -2.172044781525058e-02, -2.207565334255825e-02, 8.232097153050014e-03, 1.180372326116718e-02, 8.232097153050013e-03, -1.047168764860737e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_eel_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_eel", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([7.412584168889001e-10, 0.000000000000000e+00, 7.406823838806223e-10, 7.411637156763493e-10, 0.000000000000000e+00, 7.406137342100920e-10, 7.408908273841596e-10, 0.000000000000000e+00, 7.402145645121736e-10, 7.419541017103851e-10, 0.000000000000000e+00, -2.751561712953529e-08, 7.411982185842792e-10, 0.000000000000000e+00, -2.750691081865404e-08, -2.750814541240067e-08, 0.000000000000000e+00, -2.750691081865404e-08, -6.431453150666978e-05, 0.000000000000000e+00, 1.325023110667059e-05, -6.431284268570633e-05, 0.000000000000000e+00, -6.431788062955944e-05, -6.428055773433924e-05, 0.000000000000000e+00, -6.427195554990852e-05, -6.427075531445457e-05, 0.000000000000000e+00, -6.426712323018081e-05, -6.435952862033414e-05, 0.000000000000000e+00, -6.423258253370381e-05, 1.326898663810196e-05, 0.000000000000000e+00, -6.423258253370381e-05, 2.823923480815121e-02, 0.000000000000000e+00, 2.700656580106570e-02, 2.864841249908293e-02, 0.000000000000000e+00, -4.290020286534342e-02, -4.581607744526529e-02, 0.000000000000000e+00, -4.680984401556427e-02, -4.568749224964641e-02, 0.000000000000000e+00, 3.198850985897382e-02, 2.569966795417793e-02, 0.000000000000000e+00, 4.273943361242800e-02, -4.170945521006376e-02, 0.000000000000000e+00, -5.034581992338748e-02, 9.651576745846103e+00, 0.000000000000000e+00, -8.121994616392454e+00, 9.033072905084673e+00, 0.000000000000000e+00, -7.724875082814505e+00, -2.034305342943908e-02, 0.000000000000000e+00, 1.940720672922621e-02, -1.676967544799281e+01, 0.000000000000000e+00, -1.706880555353730e+01, -7.533878447555716e+00, 0.000000000000000e+00, -3.615116230995303e+01, -7.533878447555713e+00, 0.000000000000000e+00, 1.090814094554135e+02, -2.344636315629250e+04, 0.000000000000000e+00, -2.102714530345698e+04, 6.368130304468832e+06, 0.000000000000000e+00, -1.947756658934373e+04, 6.661563469268450e+03, 0.000000000000000e+00, -4.446675427825870e+02, -4.880920316728826e+04, 0.000000000000000e+00, -5.054827796092086e+04, -2.804140581976227e+04, 0.000000000000000e+00, -1.027983773531873e+05, -2.804140581976227e+04, 0.000000000000000e+00, -1.027983773531873e+05, -3.474639857144766e-06, 0.000000000000000e+00, -3.477311562216763e-06, -3.366362179297800e-06, 0.000000000000000e+00, -3.372565520656280e-06, -3.467133034752683e-06, 0.000000000000000e+00, -3.472631729458441e-06, -3.374292183236262e-06, 0.000000000000000e+00, -3.377542250927438e-06, 4.309269984491343e-08, 0.000000000000000e+00, -3.424965677564878e-06, -3.420396707766209e-06, 0.000000000000000e+00, 4.315855739755025e-08, -6.407166830627765e-04, 0.000000000000000e+00, -6.409719024912489e-04, -6.231912266421538e-04, 0.000000000000000e+00, -6.239244803655584e-04, -6.554523613108225e-04, 0.000000000000000e+00, -6.515108469074597e-04, -6.402124802717546e-04, 0.000000000000000e+00, -6.360497145410435e-04, -6.199560099263169e-04, 0.000000000000000e+00, 1.765122156347601e-04, -6.199560099263169e-04, 0.000000000000000e+00, -6.305116952010298e-04, -7.246991462152774e-02, 0.000000000000000e+00, 5.961694478046395e-03, -3.289598460414131e-02, 0.000000000000000e+00, -3.096849832064105e-02, -1.163779440249988e-01, 0.000000000000000e+00, -9.856196190044529e-02, -9.245838781375604e-02, 0.000000000000000e+00, -7.703375229947111e-02, -5.728801665852230e-02, 0.000000000000000e+00, 5.936641330134614e-03, -5.728801665852230e-02, 0.000000000000000e+00, -7.497684900122754e-02, -4.379358742850276e+01, 0.000000000000000e+00, -4.266419548346366e+01, 9.788857966530427e+00, 0.000000000000000e+00, -6.895899099840279e+00, -5.685249952158213e+01, 0.000000000000000e+00, -5.077830101176440e+01, -5.892212088650291e-04, 0.000000000000000e+00, -5.900465491808529e-04, -3.382986833280907e+01, 0.000000000000000e+00, -3.216404536579822e+01, -3.382986833280907e+01, 0.000000000000000e+00, -3.216404536579824e+01, 1.856553045332217e+08, 0.000000000000000e+00, -5.961617018511804e+04, -5.065826974967928e+04, 0.000000000000000e+00, -4.595154832768125e+04, -2.558868545487023e+05, 0.000000000000000e+00, -2.436005623464180e+05, -1.564963908272727e+02, 0.000000000000000e+00, 8.479325530412943e+02, -9.592470594748508e+04, 0.000000000000000e+00, -1.054905708337513e+05, -9.592470594748511e+04, 0.000000000000000e+00, -1.054905708337513e+05, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.565279761098677e-01, 0.000000000000000e+00, 1.889051047060282e-02, -1.147198751913682e-01, 0.000000000000000e+00, 6.593668826590829e-03, -6.054470965060201e-02, 0.000000000000000e+00, -5.890413944499270e-02, -9.066880349784148e-02, 0.000000000000000e+00, -8.846870050708018e-02, -9.066880349784145e-02, 0.000000000000000e+00, 3.390139623798540e-03, -3.421390511445421e-02, 0.000000000000000e+00, 1.056335108028693e-03, -3.275706742680110e+00, 0.000000000000000e+00, -3.214912266823278e+00, 1.366020724557944e+00, 0.000000000000000e+00, -1.728218891068922e+00, 1.975407405946942e-01, 0.000000000000000e+00, -6.360215851033213e-01, -1.089055320033620e+00, 0.000000000000000e+00, -1.091784775250514e+00, -1.089055320033622e+00, 0.000000000000000e+00, 5.111763106553631e-01, -2.255813802759495e-01, 0.000000000000000e+00, -2.188284704269534e-01, 7.184198410760439e+03, 0.000000000000000e+00, 6.990891903621660e+03, -2.510066755779962e+02, 0.000000000000000e+00, -2.365339283134502e+02, -7.691102602912333e-01, 0.000000000000000e+00, -7.138470715324997e-01, -9.987123545197517e+01, 0.000000000000000e+00, -9.417953111266901e+01, -9.987123545197522e+01, 0.000000000000000e+00, -9.417953111266901e+01, 1.833906364770128e+06, 0.000000000000000e+00, 1.590419151800024e+06, -4.949965274098990e+05, 0.000000000000000e+00, -4.918750986813920e+05, 7.639539352789392e+08, 0.000000000000000e+00, 5.970151361121110e+08, 4.339435742412478e+02, 0.000000000000000e+00, 4.066812137268473e+02, -1.806449411700006e+05, 0.000000000000000e+00, -1.257085869869358e+05, -1.806449411700011e+05, 0.000000000000000e+00, 8.032331837055379e+07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_eel_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_eel", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.087992167343381e-03, 2.087392701119172e-03, 2.087897057550683e-03, 2.087323700866309e-03, 2.087624564926389e-03, 2.086924235778777e-03, 2.088691864971081e-03, 2.169759647018175e-03, 2.087931553492101e-03, 2.169197167365783e-03, 2.169377473838911e-03, 2.169197167365783e-03, 2.188874133040453e-02, 1.736835194867557e-02, 2.188837185314394e-02, 2.188906334596957e-02, 2.188107967999485e-02, 2.187950276309939e-02, 2.188193227229227e-02, 2.188161693548995e-02, 2.189306931102067e-02, 2.187442204318735e-02, 1.736814169081298e-02, 2.187442204318735e-02, 4.360010427286921e-02, 4.556684693293587e-02, 4.304748533361381e-02, 1.051825847834888e-01, 1.039337674485352e-01, 1.040086457556968e-01, 1.048127720351866e-01, 3.974480077551406e-02, 4.658861851870139e-02, 2.839951173046050e-02, 1.048398070901393e-01, 1.039883813258616e-01, 4.764393615338676e-02, 3.609978212401099e-01, 5.419829570940499e-02, 3.618492287093308e-01, 7.486224639590505e-02, 1.335842219188072e-02, 3.021569296389411e-01, 3.204560830033992e-01, 3.399889227445119e-01, 2.519031024756500e-01, 3.399889227445118e-01, 7.594331585418316e-09, 3.780555569353306e-02, 4.068105584472593e-02, 0.000000000000000e+00, 4.442477443014727e-02, 0.000000000000000e+00, 1.670272887104507e-01, 1.709552675999194e-02, 1.683427270197174e-02, 3.210067128080518e-02, 2.168610521074962e-02, 3.210067128080518e-02, 2.168610521074963e-02, 3.970263837379496e-03, 3.970462032758778e-03, 3.848696776662495e-03, 3.852945717005175e-03, 3.961821397973712e-03, 3.965200748474861e-03, 3.857587739985880e-03, 3.858520067138431e-03, 3.799105681136894e-03, 3.911754224350634e-03, 3.909396006456280e-03, 3.801400056105738e-03, 3.886879215917484e-02, 3.887838060467636e-02, 3.864711241173747e-02, 3.866100411140121e-02, 3.902999141240004e-02, 3.899693577035034e-02, 3.886006586772803e-02, 3.881645800815427e-02, 3.860507619447505e-02, 2.816520315941338e-02, 3.860507619447505e-02, 3.874880886794956e-02, 1.189274685052400e-01, 1.076978971897186e-01, 6.889059323565015e-02, 6.494242933208491e-02, 1.425496027841337e-01, 1.345377182799720e-01, 1.278997884699107e-01, 1.175415188756091e-01, 1.057618341410333e-01, 1.082993368835031e-01, 1.057618341410333e-01, 1.187376203791618e-01, 2.657813003187336e-01, 2.664054209015534e-01, 8.345492439814068e-03, 2.934216016386312e-01, 2.554237954537395e-01, 2.669184530306880e-01, 3.375340514674960e-02, 3.375514841685737e-02, 3.075781470145852e-01, 3.476377416149754e-01, 3.075781470145853e-01, 3.476377416149756e-01, 0.000000000000000e+00, 9.894828732634864e-03, 1.580501519446821e-02, 1.499740675168622e-02, 3.338121899856895e-02, 3.774538100078659e-02, 2.299699797329147e-01, 0.000000000000000e+00, 1.333232335836278e-02, 3.797559031279007e-02, 1.333232335836278e-02, 3.797559031279006e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.502400564429127e-01, 1.298398295216255e-01, 1.264160696461067e-01, 1.161417355529594e-01, 7.616882249531760e-02, 7.488936674987211e-02, 1.067239653693385e-01, 1.052990809644817e-01, 1.067239653693385e-01, 1.002104769057570e-01, 8.241294135583829e-02, 7.420308445250950e-02, 2.766049689831609e-01, 2.762143026762443e-01, 8.572722428980303e-02, 2.587950758054502e-01, 1.546882656255048e-01, 2.180345477669037e-01, 2.436548898040809e-01, 2.440071375073095e-01, 2.436548898040810e-01, 1.377295988964440e-01, 1.683057977946810e-01, 1.666635805970362e-01, 0.000000000000000e+00, 0.000000000000000e+00, 1.841293579094951e-01, 1.915274256417061e-01, 2.290112758153996e-01, 2.223173740066365e-01, 2.809016021303488e-01, 3.118410356852494e-01, 2.809016021303489e-01, 3.118410356852496e-01, 0.000000000000000e+00, 0.000000000000000e+00, 3.007329570779539e-03, 3.008902677480811e-03, 0.000000000000000e+00, 0.000000000000000e+00, 1.333131477704820e-11, 1.298379427125281e-10, 2.133748665365479e-02, 3.484640847729398e-02, 2.133748665365479e-02, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
