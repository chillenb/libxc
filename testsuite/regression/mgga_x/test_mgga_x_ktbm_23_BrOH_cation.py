
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_23_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_23", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.176379970549311e+01, -2.176392799170232e+01, -2.176448985371064e+01, -2.353480216984079e+01, -2.353556582167381e+01, -2.530773919091958e+01, -3.494035212640997e+00, -3.959008073907088e+00, -3.962513933927415e+00, -3.961458971948879e+00, -3.961158338869541e+00, -3.496628673016923e+00, -5.276464596193791e-01, -6.014937313925384e-01, -6.377537036550880e-01, -5.817280228380974e-01, -5.144989312392662e-01, -6.512980526575274e-01, -1.491648232087193e-01, -1.526476546757159e-01, -6.495468048732789e-01, -1.096893794766103e-01, -1.512127435433713e-01, -1.509226047835198e-01, -4.668954048965946e-03, -4.946499077062086e-03, -2.732506016991360e-02, -2.691505924487084e-03, -3.757273013157487e-03, -3.757273013157488e-03, -6.116595538339393e+00, -6.116442063753606e+00, -6.116578262372368e+00, -6.116443536865432e+00, -5.797597362490236e+00, -5.797882797374394e+00, -2.166104105751728e+00, -2.195234320034069e+00, -2.143895309442084e+00, -2.170079674816499e+00, -1.933318335746752e+00, -2.193016978455195e+00, -6.247498341125066e-01, -7.543465092630905e-01, -6.273376656011719e-01, -6.674159633872516e-01, -6.449050574418818e-01, -7.073947199629161e-01, -7.285022848246109e-02, -1.417116173895753e-01, -6.721338048077416e-02, -2.277959765736613e+00, -8.800514852503338e-02, -8.800514852503338e-02, -2.091474409666831e-03, -2.631094930737286e-03, -2.015001912560864e-03, -4.437722973619024e-02, -2.531224220312172e-03, -2.531224220312173e-03, -6.732862031749272e-01, -6.778272748990732e-01, -6.422261904070335e-01, -6.608102539074636e-01, -6.444291286842752e-01, -6.600409922504474e-01, -6.562545119223571e-01, -5.121826394998943e-01, -5.557699978810670e-01, -6.370756711811414e-01, -6.256830787046785e-01, -5.757233787526586e-01, -7.332966347975123e-01, -2.016642516738091e-01, -2.323836603666295e-01, -3.381399987044504e-01, -3.177079923766580e-01, -2.806662355421121e-01, -5.187847170304172e-01, -2.621501464128865e-02, -3.561312712578277e-02, -3.846102303471858e-01, -5.751596854733697e-02, -5.751596854733699e-02, -6.672926567868172e-03, -7.031967602866760e-04, -1.499859890798794e-03, -5.273883144168213e-02, -2.324465523472751e-03, -2.349260351213845e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_23_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_23", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.265255496629030e+01, -3.265250923415915e+01, -3.265265992344348e+01, -3.265258547167313e+01, -3.265301670929588e+01, -3.265309076588680e+01, -3.265183076693437e+01, -2.921193311546834e+01, -3.265261648998453e+01, -2.921261116595441e+01, -2.921293514149236e+01, -2.921261116595441e+01, -4.995168079100203e+00, -4.894522359418070e+00, -4.995082047079207e+00, -4.995122580782839e+00, -4.993369579327991e+00, -4.993112026847246e+00, -4.994417112808740e+00, -4.994484512388282e+00, -4.994558965265464e+00, -4.993016922797318e+00, -4.893333977240040e+00, -4.993016922797318e+00, -7.751933672209627e-01, -7.840188681291093e-01, -7.723573536629500e-01, -9.396463758146268e-01, -8.937671795437058e-01, -8.841252119853567e-01, -9.041165510864868e-01, -7.508738596449074e-01, -7.938327724961222e-01, -6.956024715562958e-01, -9.504815523466209e-01, -8.497179082653840e-01, -1.778439017575792e-01, -2.314297258030978e-01, -1.810671567548699e-01, -2.383028953891048e-01, -9.564988003774217e-01, -8.421810555478607e-01, -1.447938354708345e-01, -1.489576134253610e-01, -2.256643808666074e-01, -9.973040776449860e-02, -2.256643808666072e-01, -9.703841646462860e-02, -5.872466000077218e-03, -6.240391840001519e-03, -6.395046140298271e-03, -6.592577412959072e-03, -3.540988428869159e-02, -3.637308240322316e-02, -3.529501402087206e-03, -3.470682103039502e-03, -5.238510892646199e-03, -2.980713851038676e-03, -5.238510892646200e-03, -2.980713851038680e-03, -7.217707374267423e+00, -7.215994950275755e+00, -7.221707802433644e+00, -7.219859726570772e+00, -7.217973492416427e+00, -7.216159486876768e+00, -7.221404277135822e+00, -7.219668676854394e+00, -7.939153279357377e+00, -7.217927089998257e+00, -7.219718992124557e+00, -7.937225090800990e+00, -2.836004557864016e+00, -2.835672087783596e+00, -2.854374597192163e+00, -2.853368151657963e+00, -2.819492299195294e+00, -2.824110416039139e+00, -2.836569848488561e+00, -2.840939168173593e+00, -2.857478092066532e+00, -2.658301732939432e+00, -2.857478092066532e+00, -2.846633568381207e+00, -8.130331105364322e-01, -8.816122018502577e-01, -8.723947684393435e-01, -8.737656904583220e-01, -7.635523212840053e-01, -7.795116351444894e-01, -7.706167327851530e-01, -7.891634788769913e-01, -8.375773783231280e-01, -8.746181143253615e-01, -8.375773783231278e-01, -8.015375671974971e-01, -9.528925352259959e-02, -9.627387877143834e-02, -1.753140367287600e-01, -2.059746512836002e-01, -8.550276497552368e-02, -9.058161280725605e-02, -2.632533349669356e+00, -2.631273089490886e+00, -1.117611275461983e-01, -1.214577808385505e-01, -1.117611275461981e-01, -1.214577808385506e-01, -2.752641710308589e-03, -2.751595153554744e-03, -3.395976704562259e-03, -3.447367245585210e-03, -2.539507661887561e-03, -2.689476840956363e-03, -5.793687490022793e-02, -5.878212860265172e-02, -2.593574556371747e-03, -3.562201443472585e-03, -2.593574556371749e-03, -3.562201443472587e-03, -8.586368599053298e-01, -8.625863033554221e-01, -8.342108425973810e-01, -8.382107641863682e-01, -8.861415557162692e-01, -8.894268948113646e-01, -8.863628999170936e-01, -8.533801136126404e-01, -8.862532524137898e-01, -8.895412650733565e-01, -8.862532524137898e-01, -8.498154990672824e-01, -8.327102746062029e-01, -8.361565188685705e-01, -6.908953385055712e-01, -7.272025876698126e-01, -7.055556988541859e-01, -7.847991288645262e-01, -7.370844093172166e-01, -7.398689180312917e-01, -7.178848925085932e-01, -7.205369477628748e-01, -7.178848925085934e-01, -8.061441631240492e-01, -9.113994457387974e-01, -1.022067594008065e+00, -2.784448036722083e-01, -2.806999590684336e-01, -2.932983110219136e-01, -3.626691937202031e-01, -4.631192551269777e-01, -5.052493332046796e-01, -4.337240333354695e-01, -4.338174182156255e-01, -4.337240333354694e-01, -3.744194545826028e-01, -6.479025935440466e-01, -6.502754289655968e-01, -3.474933810230511e-02, -3.498657204065470e-02, -4.560802586907014e-02, -4.717800447495159e-02, -4.782568369830203e-01, -4.789512790908479e-01, -7.292900450794444e-02, -7.765537048536962e-02, -7.292900450794444e-02, -7.765537048536965e-02, -8.729259909121526e-03, -9.045573275827147e-03, -9.135842938515150e-04, -9.156723648324879e-04, -1.932678749305346e-03, -2.055550308904252e-03, -6.905296387538543e-02, -7.007886560678157e-02, -2.456716545259548e-03, -3.264946023516846e-03, -2.456716545259545e-03, -3.393778413629285e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_23_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_23", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.163535768910446e-08, 0.000000000000000e+00, -4.163881684530441e-08, -4.163529589516971e-08, 0.000000000000000e+00, -4.163877124164574e-08, -4.163481335048860e-08, 0.000000000000000e+00, -4.163815875833405e-08, -4.163554976496129e-08, 0.000000000000000e+00, -4.820308242814935e-08, -4.163534751969525e-08, 0.000000000000000e+00, -4.820136283473298e-08, -4.819812506590715e-08, 0.000000000000000e+00, -4.820136283473298e-08, -3.986805673726011e-05, 0.000000000000000e+00, -3.065122045690729e-05, -3.987906025509371e-05, 0.000000000000000e+00, -3.986815092056177e-05, -4.009372277966350e-05, 0.000000000000000e+00, -4.013046537804794e-05, -4.000217028364823e-05, 0.000000000000000e+00, -4.000022616152349e-05, -3.986908687123804e-05, 0.000000000000000e+00, -4.019067626717338e-05, -3.065646359909183e-05, 0.000000000000000e+00, -4.019067626717338e-05, -8.216233574326000e-03, 0.000000000000000e+00, -8.471879678285339e-03, -8.156052047811054e-03, 0.000000000000000e+00, -1.159368436560049e-02, -1.014951465745412e-02, 0.000000000000000e+00, -1.006282585108317e-02, -1.075577680303079e-02, 0.000000000000000e+00, -7.939679037304189e-03, -8.462950104031733e-03, 0.000000000000000e+00, -6.773255600699773e-03, -1.160246305495152e-02, 0.000000000000000e+00, -9.659657159117785e-03, -7.702451679968596e-01, 0.000000000000000e+00, -1.340994108278515e+00, -7.994779241721384e-01, 0.000000000000000e+00, -1.386627883716445e+00, -2.303281594765011e-03, 0.000000000000000e+00, -1.900494450938013e-03, -6.937612789515065e-01, 0.000000000000000e+00, -8.282658784284814e-01, -1.004679395951532e+00, 0.000000000000000e+00, -6.521238185030346e-01, -1.004679395951531e+00, 0.000000000000000e+00, 1.468086341751891e-01, -1.275774620014758e+02, 0.000000000000000e+00, -1.133387559373982e+02, 2.330126095174039e+02, 0.000000000000000e+00, -1.040192249080133e+02, 4.656227151166203e+00, 0.000000000000000e+00, -2.951459501517213e+00, -3.002195112551747e+02, 0.000000000000000e+00, -3.120420036899812e+02, -1.559305192729904e+02, 0.000000000000000e+00, -6.274838822603593e+02, -1.559305192729904e+02, 0.000000000000000e+00, -6.274838822603591e+02, -1.446704197444577e-05, 0.000000000000000e+00, -1.448099427623642e-05, -1.446933722574322e-05, 0.000000000000000e+00, -1.448321988615070e-05, -1.446730098865437e-05, 0.000000000000000e+00, -1.448116589167416e-05, -1.446926286125628e-05, 0.000000000000000e+00, -1.448318002987221e-05, -1.299302932725877e-05, 0.000000000000000e+00, -1.448210882869271e-05, -1.446813586311228e-05, 0.000000000000000e+00, -1.300546456672902e-05, -3.216138897325588e-04, 0.000000000000000e+00, -3.231868603991253e-04, -3.268302920912718e-04, 0.000000000000000e+00, -3.282162772372561e-04, -3.160090224076320e-04, 0.000000000000000e+00, -3.191764975445386e-04, -3.210949866903989e-04, 0.000000000000000e+00, -3.241848852002393e-04, -3.285499162054087e-04, 0.000000000000000e+00, -2.478450070416801e-04, -3.285499162054087e-04, 0.000000000000000e+00, -3.265957573678546e-04, -6.875093041792310e-02, 0.000000000000000e+00, -5.670953034615779e-02, -6.135078594795402e-02, 0.000000000000000e+00, -6.171331319361491e-02, -7.477347017919504e-02, 0.000000000000000e+00, -7.549662802662138e-02, -8.410370687810939e-02, 0.000000000000000e+00, -7.929191704999497e-02, -6.388193150882374e-02, 0.000000000000000e+00, -5.949146596402455e-02, -6.388193150882375e-02, 0.000000000000000e+00, -7.347499495299412e-02, -7.978144419323459e-01, 0.000000000000000e+00, -7.894155947631053e-01, -2.940323541739913e-01, 0.000000000000000e+00, -5.361682624852412e-01, -8.726609479553161e-01, 0.000000000000000e+00, -8.748284087483820e-01, -6.537031661290234e-04, 0.000000000000000e+00, -6.550827469303703e-04, -9.382832098213201e-01, 0.000000000000000e+00, -1.249690161243518e+00, -9.382832098213202e-01, 0.000000000000000e+00, -1.249690161243519e+00, 9.048242107720959e+02, 0.000000000000000e+00, -4.035149288022041e+02, -3.157482511533510e+02, 0.000000000000000e+00, -2.876461577643813e+02, -1.517306140553585e+03, 0.000000000000000e+00, -1.418365741483463e+03, -1.546182221554930e+00, 0.000000000000000e+00, 1.349320601322321e+00, -6.300410271670451e+02, 0.000000000000000e+00, -5.977765718889059e+02, -6.300410271670453e+02, 0.000000000000000e+00, -5.977765718889059e+02, -9.416426780840893e-02, 0.000000000000000e+00, -9.275773948995085e-02, -9.477594821563778e-02, 0.000000000000000e+00, -9.338795711706990e-02, -8.985746370018233e-02, 0.000000000000000e+00, -8.863461054533163e-02, -9.047798656750411e-02, 0.000000000000000e+00, -9.305331519753010e-02, -9.017140785518615e-02, 0.000000000000000e+00, -8.893026407810878e-02, -9.017140785518615e-02, 0.000000000000000e+00, -9.314932907243527e-02, -1.047866783557384e-01, 0.000000000000000e+00, -1.034616008688951e-01, -1.240762798393813e-01, 0.000000000000000e+00, -9.712391724004796e-02, -1.264752609800054e-01, 0.000000000000000e+00, -1.031768036640447e-01, -1.221288429364890e-01, 0.000000000000000e+00, -1.206128403625178e-01, -1.251891443131364e-01, 0.000000000000000e+00, -1.237566627452713e-01, -1.251891443131364e-01, 0.000000000000000e+00, -1.047373208057110e-01, -4.850514789825566e-02, 0.000000000000000e+00, -4.184363011541131e-02, -4.409329370372100e-01, 0.000000000000000e+00, -4.398247431240661e-01, -2.778091863721625e-01, 0.000000000000000e+00, -3.949870592695418e-01, -2.416816305800233e-01, 0.000000000000000e+00, -3.135884628745491e-01, -3.861793434121221e-01, 0.000000000000000e+00, -3.904007647875013e-01, -3.861793434121223e-01, 0.000000000000000e+00, -2.897655256065836e-01, -1.429604482992428e-01, 0.000000000000000e+00, -1.446521566324271e-01, 4.968427619345831e+00, 0.000000000000000e+00, 4.849816887239724e+00, -1.895787064732087e+00, 0.000000000000000e+00, -1.850636265466374e+00, -4.691392518589930e-01, 0.000000000000000e+00, -5.157911755281953e-01, -1.432310133061649e+00, 0.000000000000000e+00, -1.625595424585416e+00, -1.432310133061651e+00, 0.000000000000000e+00, -1.625595424585417e+00, 8.519504059862604e+01, 0.000000000000000e+00, 7.872989084358164e+01, -4.666437790717499e+03, 0.000000000000000e+00, -4.634958565504459e+03, 3.742285292431353e+03, 0.000000000000000e+00, 3.404765459508068e+03, 7.498201050063777e-01, 0.000000000000000e+00, 6.785416257673691e-01, -1.128999857812696e+03, 0.000000000000000e+00, -7.238867993657163e+02, -1.128999857812698e+03, 0.000000000000000e+00, 1.434657061199348e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_23_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_23", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.130754165560549e-03, 2.130859092599629e-03, 2.130762282424075e-03, 2.130864963794219e-03, 2.130781259732829e-03, 2.130894069938941e-03, 2.130690739655534e-03, 3.307547723457756e-03, 2.130759746953614e-03, 3.307343879504253e-03, 3.307357906843950e-03, 3.307343879504253e-03, 1.915744919962444e-02, 6.432912418708212e-03, 1.916060481095607e-02, 1.915715874859670e-02, 1.922171824322759e-02, 1.923239065779790e-02, 1.919794845442658e-02, 1.919776274915866e-02, 1.915348076981829e-02, 1.925216544951932e-02, 6.430040684134910e-03, 1.925216544951932e-02, 6.984210329516114e-03, 7.545498106279305e-03, 6.829773800933496e-03, 4.813782124265183e-02, 3.948876307307327e-02, 3.839610596314200e-02, 4.219152275772665e-02, 5.933391282985957e-03, 7.881044268798133e-03, 3.455495857718503e-03, 4.926259959883444e-02, 3.437844703288703e-02, 3.918458183651975e-03, 1.028522779655482e-01, 4.805131830906733e-03, 1.120351118301021e-01, 1.450635989417925e-02, 1.263715615112052e-03, 1.980661531139115e-02, 2.504765742688211e-02, 7.801769147126002e-02, 6.426996545877263e-03, 7.801769147125986e-02, -6.037640881172013e-04, 2.029041537881743e-04, 2.164500940213716e-04, -6.246999400663834e-07, 2.344082806361959e-04, -4.973121723873955e-05, 1.233725090747699e-03, 1.033010225583577e-04, 1.020854397204397e-04, 1.758392674187311e-04, 1.300566227559038e-04, 1.758392674187311e-04, 1.300566227559053e-04, 1.241684757747088e-02, 1.241967106662839e-02, 1.239027866359153e-02, 1.239398683101580e-02, 1.241501690041171e-02, 1.241853215546367e-02, 1.239223486962347e-02, 1.239521476606957e-02, 9.151394875249696e-03, 1.240682109702233e-02, 1.240351292182769e-02, 9.153574570419598e-03, 2.962543289935379e-02, 2.972666251081222e-02, 3.037003203607648e-02, 3.044467719282794e-02, 2.890111932190394e-02, 2.921232132568399e-02, 2.960144675384256e-02, 2.990524178999374e-02, 3.055465129977242e-02, 8.694801998289771e-03, 3.055465129977242e-02, 3.019081099901318e-02, 1.290027092283702e-01, 6.212411883730150e-02, 1.098376001238173e-01, 1.087706265428410e-01, 1.274342485877413e-01, 1.321809742682876e-01, 1.361572657499873e-01, 1.322529299826427e-01, 1.235137836013745e-01, 6.342243806001309e-02, 1.235137836013744e-01, 1.306752076584768e-01, 6.859858321517540e-03, 7.002134398705486e-03, -4.508050624217172e-04, 3.823540442511074e-02, 5.386343551741259e-03, 6.452357796582584e-03, 3.932318325084416e-02, 3.933848586300339e-02, 1.288051693338029e-02, 2.125492756459503e-02, 1.288051693338022e-02, 2.125492756459517e-02, -2.555551545045140e-08, 6.573420498772301e-05, 9.675932279752384e-05, 9.220590900075024e-05, 1.945766344355170e-04, 2.161341857482942e-04, 2.835310231220624e-03, -2.636272648825539e-04, 8.596527783089809e-05, 2.118107900748363e-04, 8.596527783089744e-05, 2.118107900748349e-04, 8.698711348778138e-02, 8.638056384655207e-02, 9.669166623694202e-02, 9.594054792588218e-02, 8.156677425524257e-02, 8.120060251939677e-02, 8.101640790422152e-02, 8.984724096061113e-02, 8.130680373545013e-02, 8.094131044067902e-02, 8.130680373545013e-02, 9.123441241915124e-02, 9.072431320543924e-02, 9.010350053089866e-02, 1.500986223182315e-01, 6.240968028575528e-02, 1.468364871009396e-01, 7.744282366142337e-02, 1.287551869111295e-01, 1.280471427297681e-01, 1.395100143994058e-01, 1.387059346924664e-01, 1.395100143994059e-01, 8.251375659895636e-02, 1.094245114810361e-01, 6.651482349498518e-02, 6.408359390447502e-02, 6.506388894300169e-02, 1.170292165063290e-02, 1.012950157814386e-01, 4.529171396937183e-02, 1.640791964824306e-01, 1.416548957646361e-01, 1.428616280805794e-01, 1.416548957646361e-01, 2.946519827406151e-02, 1.492542433490593e-01, 1.514439789575625e-01, -4.948367753210493e-05, -4.949196117825867e-05, 1.611816235921461e-03, 1.755093842133049e-03, 1.984886896861323e-01, 2.120375263876972e-01, 5.462465417572926e-03, 7.554875031798964e-03, 5.462465417572927e-03, 7.554875031798985e-03, -7.394359824516584e-07, -8.108504865263616e-07, 2.780438817153365e-05, 2.780662508402290e-05, -3.677078830178819e-08, -4.686848005055478e-08, -5.205284169727997e-04, -5.991323280357309e-04, 1.309796862157799e-04, 1.974005011164453e-04, 1.309796862157772e-04, -2.792409469519825e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
