
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_13_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_13", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.444201077983323e+01, -2.444207958740333e+01, -2.444251336609146e+01, -2.444149297104466e+01, -2.444200939390459e+01, -2.444200939390459e+01, -3.393720042695245e+00, -3.393858632904209e+00, -3.397811440586827e+00, -3.398822191523734e+00, -3.397404737970459e+00, -3.397404737970459e+00, -5.850012292176274e-01, -5.842966821851541e-01, -5.685656072063450e-01, -5.799231686021240e-01, -5.783583691022698e-01, -5.783583691022698e-01, -1.648463932672288e-01, -1.679458350865714e-01, -6.374359736613338e-01, -1.138898109084063e-01, -1.538732026212228e-01, -1.538732026212228e-01, -5.093482904617063e-03, -5.361202355811111e-03, -2.944400089901234e-02, -2.915402661439842e-03, -4.086030681618464e-03, -4.086030681618466e-03, -5.969952523596142e+00, -5.970228915769472e+00, -5.970034008923044e+00, -5.970275218542287e+00, -5.970058205039257e+00, -5.970058205039257e+00, -2.075950311418298e+00, -2.109482852976516e+00, -2.066311790259149e+00, -2.096861796446325e+00, -2.099129170746967e+00, -2.099129170746967e+00, -6.263821288103439e-01, -6.751370570205061e-01, -5.465455356938519e-01, -5.594362285753880e-01, -6.413308276388719e-01, -6.413308276388721e-01, -7.750097709960890e-02, -1.571123450926298e-01, -7.159349031968185e-02, -1.917781910786122e+00, -9.307000298193871e-02, -9.307000298193872e-02, -2.220213961754237e-03, -2.829284952993181e-03, -2.180432875812664e-03, -4.776410236719855e-02, -2.743637461125823e-03, -2.743637461125824e-03, -6.552018097294070e-01, -6.575353276122421e-01, -6.568404092860276e-01, -6.561552882642763e-01, -6.565060954937039e-01, -6.565060954937039e-01, -6.308079868295888e-01, -5.554722550464177e-01, -5.859876199050736e-01, -6.085894725780534e-01, -5.974325366119839e-01, -5.974325366119839e-01, -6.958101491053862e-01, -2.072932138172113e-01, -2.566592626304289e-01, -3.491454515005927e-01, -3.040614459877128e-01, -3.040614459877128e-01, -4.819231915758668e-01, -2.824321141945995e-02, -3.838944745968492e-02, -3.468524079595157e-01, -6.148259263384398e-02, -6.148259263384399e-02, -7.072790308987678e-03, -7.454051161909375e-04, -1.607222379537856e-03, -5.783514949158103e-02, -2.519501206760060e-03, -2.519501206760058e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_13_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_13", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.940880960735277e+01, -2.940814812753715e+01, -2.940892853956045e+01, -2.940823459528066e+01, -2.940920640928123e+01, -2.940866159410789e+01, -2.940785983629895e+01, -2.940694598741798e+01, -2.940888332340653e+01, -2.940755666383292e+01, -2.940888332340653e+01, -2.940755666383292e+01, -4.863055145952119e+00, -4.862856192952383e+00, -4.863223863404130e+00, -4.862961430411022e+00, -4.866455454407027e+00, -4.867080755760119e+00, -4.865712503760164e+00, -4.865781105171961e+00, -4.861900290665827e+00, -4.868753937371643e+00, -4.861900290665827e+00, -4.868753937371643e+00, -8.222089406132790e-01, -8.287750119308303e-01, -8.201178145778756e-01, -8.276663600655997e-01, -7.911827938363695e-01, -7.857468874554848e-01, -8.051418727522129e-01, -8.095502245156103e-01, -8.352744296467898e-01, -7.725643509274788e-01, -8.352744296467898e-01, -7.725643509274788e-01, -2.094339017106931e-01, -2.244999090440505e-01, -2.127898757413583e-01, -2.301558834281844e-01, -8.367823888994261e-01, -8.822751909524742e-01, -1.455668633166500e-01, -1.497295492203777e-01, -2.184370839295623e-01, -1.033321793523859e-01, -2.184370839295623e-01, -1.033321793523858e-01, -6.198115525657567e-03, -6.583959961218816e-03, -6.497702589878644e-03, -6.957671576689569e-03, -3.639952981190795e-02, -3.842984452839377e-02, -3.745142861879284e-03, -3.679745773019215e-03, -5.536104515751805e-03, -3.176104904965807e-03, -5.536104515751812e-03, -3.176104904965806e-03, -7.222429999715541e+00, -7.220443554832637e+00, -7.226296825804215e+00, -7.224179107194339e+00, -7.222579012659230e+00, -7.220524573881710e+00, -7.225899305967398e+00, -7.223920426580421e+00, -7.224457678702822e+00, -7.222325793148852e+00, -7.224457678702822e+00, -7.222325793148852e+00, -2.709865414883878e+00, -2.710313963463436e+00, -2.733840502381447e+00, -2.733342377940721e+00, -2.690582285642344e+00, -2.696550799510586e+00, -2.711954587384572e+00, -2.717850253942139e+00, -2.737928073151492e+00, -2.724607718656985e+00, -2.737928073151492e+00, -2.724607718656985e+00, -8.337479399340578e-01, -8.309229007341855e-01, -9.365318030186757e-01, -9.368325745704617e-01, -7.478084248067219e-01, -7.840297170941077e-01, -8.095974315098700e-01, -8.401753522843129e-01, -8.659837714866635e-01, -8.267444042197898e-01, -8.659837714866636e-01, -8.267444042197900e-01, -9.895950052994180e-02, -9.992911728372993e-02, -2.036439981242989e-01, -2.046854610827554e-01, -8.917040154322302e-02, -9.420268433277042e-02, -2.835235003603640e+00, -2.834064898436811e+00, -1.147810491444434e-01, -1.235233162992709e-01, -1.147810491444435e-01, -1.235233162992709e-01, -2.839033499930028e-03, -2.948276998040109e-03, -3.620056476902560e-03, -3.677663429665108e-03, -2.695075500337970e-03, -2.854997585632663e-03, -6.101513613839138e-02, -6.134135787020958e-02, -2.790041371360524e-03, -3.762645617769779e-03, -2.790041371360524e-03, -3.762645617769779e-03, -8.639008113633034e-01, -8.674830262128167e-01, -8.419818549532698e-01, -8.456576901594084e-01, -8.493461463052443e-01, -8.530434073906684e-01, -8.557697882902167e-01, -8.593478620911450e-01, -8.525303412771171e-01, -8.561663371220346e-01, -8.525303412771171e-01, -8.561663371220346e-01, -8.481542181624611e-01, -8.508612632210060e-01, -6.764782785511305e-01, -6.791315120315186e-01, -7.067162018808510e-01, -7.098123010879497e-01, -7.508744485820944e-01, -7.536978083602948e-01, -7.269145548814706e-01, -7.294283627075481e-01, -7.269145548814709e-01, -7.294283627075481e-01, -9.826770438725783e-01, -9.842727804297385e-01, -2.716460283109526e-01, -2.736200617844134e-01, -3.398420493964946e-01, -3.448176718223603e-01, -4.766840402499719e-01, -4.793375227271465e-01, -4.083396949176241e-01, -4.084502620658357e-01, -4.083396949176236e-01, -4.084502620658361e-01, -6.301481103019749e-01, -6.347358371155969e-01, -3.561929659538437e-02, -3.587946474137026e-02, -4.816497660913948e-02, -4.979102095521210e-02, -4.643506310531622e-01, -4.738979724838857e-01, -7.616704158206306e-02, -8.076558705516285e-02, -7.616704158206297e-02, -8.076558705516286e-02, -8.958319059770127e-03, -9.288435610837144e-03, -9.857412390660962e-04, -9.908011183021846e-04, -1.967040828172428e-03, -2.092355973345861e-03, -7.295130841944529e-02, -7.424095544306721e-02, -2.637016555189167e-03, -3.448812762061683e-03, -2.637016555189167e-03, -3.448812762061680e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_13_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_13", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.054581266536406e-08, 0.000000000000000e+00, -4.054918236960205e-08, -4.054558171304341e-08, 0.000000000000000e+00, -4.054901397767355e-08, -4.054479594175812e-08, 0.000000000000000e+00, -4.054790032615732e-08, -4.054743598836566e-08, 0.000000000000000e+00, -4.055125783971222e-08, -4.054568932545863e-08, 0.000000000000000e+00, -4.054987909379799e-08, -4.054568932545863e-08, 0.000000000000000e+00, -4.054987909379799e-08, -3.104208167634550e-05, 0.000000000000000e+00, -3.103167931758495e-05, -3.105078211361454e-05, 0.000000000000000e+00, -3.103699042743190e-05, -3.121523960001122e-05, 0.000000000000000e+00, -3.124205988755670e-05, -3.116650953959853e-05, 0.000000000000000e+00, -3.116029607036067e-05, -3.104307859649714e-05, 0.000000000000000e+00, -3.130663645677846e-05, -3.104307859649714e-05, 0.000000000000000e+00, -3.130663645677846e-05, -9.061790397104636e-03, 0.000000000000000e+00, -9.268301818758200e-03, -9.019663188891159e-03, 0.000000000000000e+00, -9.238880798697648e-03, -8.323965888063738e-03, 0.000000000000000e+00, -8.333701917573570e-03, -8.891905155365381e-03, 0.000000000000000e+00, -9.087045991425484e-03, -9.165954654415533e-03, 0.000000000000000e+00, -8.434902309396917e-03, -9.165954654415533e-03, 0.000000000000000e+00, -8.434902309396917e-03, -1.220260289671203e+00, 0.000000000000000e+00, -1.380707294661685e+00, -1.232653810234928e+00, 0.000000000000000e+00, -1.406548657403277e+00, -1.760096341975573e-03, 0.000000000000000e+00, -2.170155636708106e-03, -7.785222917134428e-01, 0.000000000000000e+00, -9.633371441045898e-01, -1.033023501783583e+00, 0.000000000000000e+00, -7.489201173572289e-01, -1.033023501783583e+00, 0.000000000000000e+00, -7.489201173572286e-01, -3.198509895937364e+02, 0.000000000000000e+00, -2.863741580792122e+02, -2.938512167878936e+02, 0.000000000000000e+00, -2.606606257822079e+02, -6.246841963066038e+00, 0.000000000000000e+00, -5.928232407236111e+00, -6.578127831521126e+02, 0.000000000000000e+00, -7.000897332756360e+02, -3.797269009830396e+02, 0.000000000000000e+00, -1.194876747088919e+03, -3.797269009830388e+02, 0.000000000000000e+00, -1.194876747088919e+03, -1.220491303737738e-05, 0.000000000000000e+00, -1.221712744303930e-05, -1.220602944558817e-05, 0.000000000000000e+00, -1.221821154726450e-05, -1.220525220591046e-05, 0.000000000000000e+00, -1.221736488212710e-05, -1.220619740991494e-05, 0.000000000000000e+00, -1.221833706952790e-05, -1.220528870858262e-05, 0.000000000000000e+00, -1.221764709912616e-05, -1.220528870858262e-05, 0.000000000000000e+00, -1.221764709912616e-05, -2.837436424592636e-04, 0.000000000000000e+00, -2.853043635759624e-04, -2.884329008710131e-04, 0.000000000000000e+00, -2.898174747097160e-04, -2.814893638684217e-04, 0.000000000000000e+00, -2.836551749806185e-04, -2.861000104575893e-04, 0.000000000000000e+00, -2.882270569119355e-04, -2.879567960222353e-04, 0.000000000000000e+00, -2.880781916669133e-04, -2.879567960222353e-04, 0.000000000000000e+00, -2.880781916669133e-04, -5.508625083257274e-02, 0.000000000000000e+00, -5.634478895619503e-02, -4.773633993053939e-02, 0.000000000000000e+00, -4.813984007985633e-02, -5.855733093558170e-02, 0.000000000000000e+00, -5.950610150443641e-02, -6.230463399053750e-02, 0.000000000000000e+00, -5.949992430617056e-02, -5.147102105821692e-02, 0.000000000000000e+00, -5.850686387768417e-02, -5.147102105821694e-02, 0.000000000000000e+00, -5.850686387768418e-02, -1.128610080564734e+00, 0.000000000000000e+00, -1.098694143122442e+00, -6.131303997746985e-01, 0.000000000000000e+00, -6.045987606694179e-01, -1.251360165764283e+00, 0.000000000000000e+00, -1.251939991491183e+00, -4.869430022777289e-04, 0.000000000000000e+00, -4.879783491038344e-04, -1.238742013208469e+00, 0.000000000000000e+00, -1.564021707695329e+00, -1.238742013208469e+00, 0.000000000000000e+00, -1.564021707695330e+00, -6.412611771169766e+02, 0.000000000000000e+00, -5.951920933470916e+02, -5.923071302554999e+02, 0.000000000000000e+00, -5.233920421060069e+02, -3.306330552042201e+03, 0.000000000000000e+00, -3.063828717842038e+03, -2.448006415281473e+00, 0.000000000000000e+00, -2.833573521216165e+00, -6.979759575201855e+02, 0.000000000000000e+00, -1.475446427259110e+03, -6.979759575201873e+02, 0.000000000000000e+00, -1.475446427259111e+03, -7.816760053998337e-02, 0.000000000000000e+00, -7.702380721781954e-02, -7.880409513363201e-02, 0.000000000000000e+00, -7.766881663573205e-02, -7.863207288400484e-02, 0.000000000000000e+00, -7.749122833576969e-02, -7.844868884304722e-02, 0.000000000000000e+00, -7.730626667101741e-02, -7.854470938529319e-02, 0.000000000000000e+00, -7.740300313333090e-02, -7.854470938529319e-02, 0.000000000000000e+00, -7.740300313333090e-02, -8.594485768255658e-02, 0.000000000000000e+00, -8.492691534708412e-02, -1.073802375460279e-01, 0.000000000000000e+00, -1.064258414505252e-01, -1.068188154547208e-01, 0.000000000000000e+00, -1.056627285264479e-01, -1.013914812930630e-01, 0.000000000000000e+00, -1.001315913995515e-01, -1.046099550222644e-01, 0.000000000000000e+00, -1.034512451410644e-01, -1.046099550222645e-01, 0.000000000000000e+00, -1.034512451410644e-01, -3.717006710130626e-02, 0.000000000000000e+00, -3.771579290175177e-02, -4.640931784433383e-01, 0.000000000000000e+00, -4.616118844429369e-01, -3.773346776639378e-01, 0.000000000000000e+00, -3.803526508026108e-01, -2.675205590583958e-01, 0.000000000000000e+00, -2.620765465292972e-01, -3.470780701127872e-01, 0.000000000000000e+00, -3.504507581376290e-01, -3.470780701127875e-01, 0.000000000000000e+00, -3.504507581376293e-01, -1.203013075366806e-01, 0.000000000000000e+00, -1.218236121674747e-01, -7.231315973175661e+00, 0.000000000000000e+00, -6.974308572035351e+00, -3.505068097906168e+00, 0.000000000000000e+00, -3.404080263224686e+00, -3.801230402284074e-01, 0.000000000000000e+00, -4.232762484677287e-01, -2.191317178381233e+00, 0.000000000000000e+00, -2.382045849642082e+00, -2.191317178381234e+00, 0.000000000000000e+00, -2.382045849642083e+00, -7.952495890486188e+01, 0.000000000000000e+00, -7.185086133996340e+01, -3.676463552976144e+03, 0.000000000000000e+00, -1.926924147625329e+03, -4.455394864753448e+03, 0.000000000000000e+00, -4.042162550563115e+03, -2.611992780982439e+00, 0.000000000000000e+00, -2.908804002982500e+00, -1.485061345270572e+03, 0.000000000000000e+00, -1.786083740142445e+03, -1.485061345270573e+03, 0.000000000000000e+00, -1.786083740142448e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_13_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_13", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.829945004469980e-03, 2.830081148321092e-03, 2.829923417415922e-03, 2.830065450326356e-03, 2.829888270175520e-03, 2.830005530945420e-03, 2.830132490733116e-03, 2.830316866926211e-03, 2.829930929006751e-03, 2.830217288728199e-03, 2.829930929006751e-03, 2.830217288728199e-03, 9.835698411624046e-03, 9.826746606860347e-03, 9.838989099748514e-03, 9.828274970726983e-03, 9.895725850377936e-03, 9.903979686942059e-03, 9.903614196187998e-03, 9.897170965486831e-03, 9.830606615070698e-03, 9.948595908115903e-03, 9.830606615070698e-03, 9.948595908115903e-03, 1.636455326579254e-02, 1.684736055690141e-02, 1.626463037586571e-02, 1.675739077238672e-02, 1.452566920995802e-02, 1.472368362158097e-02, 1.687314685018888e-02, 1.739088162349445e-02, 1.652570554574048e-02, 1.657475283865487e-02, 1.652570554574048e-02, 1.657475283865487e-02, 6.666659399779591e-02, 9.039507709211153e-02, 6.905524885152133e-02, 9.644451347967527e-02, 1.994000974456517e-03, 3.203904555343986e-03, 1.423745582716696e-02, 2.097172339280600e-02, 6.324754830597835e-02, 4.039937976559069e-03, 6.324754830597824e-02, 4.039937976559101e-03, 5.005091569588319e-04, 5.415705262230403e-04, 5.249508676158763e-04, 5.777334742221083e-04, 1.802886594303943e-03, 2.062853853691404e-03, 1.996862451976543e-04, 2.059164260934582e-04, 4.113704319396658e-04, 1.957945435320738e-04, 4.113704319396664e-04, 1.957945435320747e-04, 1.110255592843149e-02, 1.110614722951190e-02, 1.108442861302604e-02, 1.108862081708218e-02, 1.110172117377747e-02, 1.110566872823021e-02, 1.108616064487537e-02, 1.108974116095092e-02, 1.109314691193282e-02, 1.109732810068786e-02, 1.109314691193282e-02, 1.109732810068786e-02, 2.246635132394406e-02, 2.262375815473041e-02, 2.339241740687171e-02, 2.351715934838236e-02, 2.234127472012525e-02, 2.252539321921465e-02, 2.320333386031135e-02, 2.339410297152453e-02, 2.307302541885423e-02, 2.311988301140743e-02, 2.307302541885423e-02, 2.311988301140743e-02, 8.679692347932955e-02, 8.804494688287309e-02, 7.582493295208471e-02, 7.610005630770071e-02, 6.821755072937033e-02, 7.825592224560185e-02, 6.797367573753686e-02, 7.259955234336855e-02, 8.796858994885202e-02, 8.691296186301596e-02, 8.796858994885201e-02, 8.691296186301606e-02, 6.941902489940423e-03, 6.863449311776284e-03, 3.447264507806386e-02, 3.439321919975739e-02, 5.380976502310632e-03, 6.600807775780686e-03, 2.150392970040410e-02, 2.151800474418671e-02, 1.253818871357740e-02, 2.016066255100931e-02, 1.253818871357745e-02, 2.016066255100940e-02, 5.913399662583275e-05, 6.352572137475270e-05, 1.418667523728406e-04, 1.281323659927198e-04, 3.724166431067752e-04, 4.072296648544422e-04, 3.178245539584773e-03, 4.079634664244153e-03, 5.153005823068996e-05, 5.077944130527372e-04, 5.153005823069202e-05, 5.077944130527369e-04, 8.023760249300844e-02, 7.980384487202807e-02, 8.700438593239021e-02, 8.647802199239954e-02, 8.467337255249539e-02, 8.416247292410324e-02, 8.268666778773040e-02, 8.223258618617914e-02, 8.368355648208049e-02, 8.320158322584627e-02, 8.368355648208049e-02, 8.320158322584627e-02, 8.105992455019849e-02, 8.074158111507386e-02, 1.226419448410057e-01, 1.225574227119244e-01, 1.200424675927119e-01, 1.195272383733945e-01, 1.074123524734252e-01, 1.069198676831013e-01, 1.144738242606846e-01, 1.141136252515657e-01, 1.144738242606847e-01, 1.141136252515656e-01, 6.961633714200381e-02, 7.041965908318533e-02, 5.636718126374448e-02, 5.702440164523665e-02, 7.632117090657831e-02, 7.928115315475938e-02, 1.022648383579890e-01, 1.013783110641339e-01, 1.013057627441105e-01, 1.020362178462155e-01, 1.013057627441104e-01, 1.020362178462156e-01, 1.042066583773417e-01, 1.075621779172992e-01, 2.116755200481492e-03, 2.061487262010039e-03, 2.341342892312211e-03, 2.536065536612099e-03, 1.189539030363736e-01, 1.420182753016195e-01, 6.155336357024627e-03, 8.139231383508699e-03, 6.155336357024621e-03, 8.139231383508649e-03, 2.843194664309292e-04, 2.808733546533211e-04, 9.722102428984851e-06, 3.846022451318663e-06, 2.104163417029348e-04, 2.291286609466769e-04, 6.587704940167098e-03, 8.278807327782660e-03, 1.042689573230927e-04, 4.729401008190848e-04, 1.042689573230926e-04, 4.729401008190809e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
