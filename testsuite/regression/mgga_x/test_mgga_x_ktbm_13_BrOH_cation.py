
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_13_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_13", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.161430645434283e+01, -2.161442985783356e+01, -2.161497168184887e+01, -2.313058778608427e+01, -2.313133976152569e+01, -2.464874635494571e+01, -3.469165190453622e+00, -3.890127513249630e+00, -3.892781146354443e+00, -3.892063524335621e+00, -3.891734585445646e+00, -3.471137192677143e+00, -5.393572982654133e-01, -6.121381736443889e-01, -6.518782743679195e-01, -5.940930879106998e-01, -5.268159672874737e-01, -6.635103259920425e-01, -1.539575496502871e-01, -1.572424795901771e-01, -6.740554199757385e-01, -1.171178449427564e-01, -1.576221861602206e-01, -1.569348493734024e-01, -5.096677795857743e-03, -5.301105549732124e-03, -2.924022050672112e-02, -2.938205151274287e-03, -4.101557808771436e-03, -4.101557808771437e-03, -5.973623604934721e+00, -5.973857428926014e+00, -5.973628753191955e+00, -5.973835670378882e+00, -5.702677281705014e+00, -5.702919504330341e+00, -2.143656145166663e+00, -2.169094080850761e+00, -2.124387242990069e+00, -2.147197212390549e+00, -1.927978117960139e+00, -2.167091035578181e+00, -6.151616186244084e-01, -7.349893366325650e-01, -6.142469904884968e-01, -6.498826313683937e-01, -6.338511682522212e-01, -6.884548246013543e-01, -7.878251606721418e-02, -1.483404586650048e-01, -7.277209619676217e-02, -2.216362842325100e+00, -9.442134469460189e-02, -9.442134469460189e-02, -2.238619030494183e-03, -2.872262075514090e-03, -2.199674351727621e-03, -4.730179872033934e-02, -2.763195180509500e-03, -2.763195180509501e-03, -6.631201786850005e-01, -6.651456617430103e-01, -6.357217212893642e-01, -6.519365389207856e-01, -6.378521361052276e-01, -6.510178611364059e-01, -6.459932486482100e-01, -5.057560751391812e-01, -5.466502593968257e-01, -6.208588204174652e-01, -6.088650042911664e-01, -5.658714627221190e-01, -7.205923513608565e-01, -2.095270653589639e-01, -2.376148816981915e-01, -3.378568464278495e-01, -3.186442756161010e-01, -2.832451606189631e-01, -5.090948118456067e-01, -2.740919205687196e-02, -3.878474206156561e-02, -3.771721697910767e-01, -6.228929246427763e-02, -6.228929246427765e-02, -6.978716421619572e-03, -7.676631692870391e-04, -1.568615313489077e-03, -5.507113013841732e-02, -2.537497070950667e-03, -2.482803309835141e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_13_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_13", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.221310383919599e+01, -3.221308236315780e+01, -3.221321085354608e+01, -3.221316009080157e+01, -3.221357263708573e+01, -3.221367298974648e+01, -3.221236373537028e+01, -2.917138269257378e+01, -3.221316675965084e+01, -2.917211843262531e+01, -2.917241856895626e+01, -2.917211843262531e+01, -4.809955822511459e+00, -4.828640296896285e+00, -4.809929135453898e+00, -4.809902778270034e+00, -4.809378379122881e+00, -4.809328265812386e+00, -4.809986374542528e+00, -4.810052768504105e+00, -4.809244295696394e+00, -4.809636316713441e+00, -4.827483667077520e+00, -4.809636316713441e+00, -7.745498551736093e-01, -7.827943677326126e-01, -7.718821526671089e-01, -9.022563615068877e-01, -8.627830235367145e-01, -8.542492994271467e-01, -8.712371181233437e-01, -7.514566692951858e-01, -7.922265670973437e-01, -6.995674952508941e-01, -9.120617069731350e-01, -8.239785890699634e-01, -1.803018344117354e-01, -2.255706485013547e-01, -1.833468962793688e-01, -2.316001930779256e-01, -9.450712184604452e-01, -8.517672000007572e-01, -1.478161102977620e-01, -1.513933555045182e-01, -2.216418750236292e-01, -1.036593054995747e-01, -2.216418750236290e-01, -1.010067535082524e-01, -6.194149124075570e-03, -6.582150099613758e-03, -6.688021500211603e-03, -6.953521431894470e-03, -3.700962790993762e-02, -3.827257704967823e-02, -3.723076421906617e-03, -3.661034094836241e-03, -5.525580557361319e-03, -3.144185100216386e-03, -5.525580557361320e-03, -3.144185100216391e-03, -7.217669606056689e+00, -7.215956689475401e+00, -7.221585056312503e+00, -7.219739449051836e+00, -7.217930107603274e+00, -7.216117729751685e+00, -7.221288042972184e+00, -7.219552474314432e+00, -7.840501604886453e+00, -7.217848897525095e+00, -7.219639793789994e+00, -7.838595611959069e+00, -2.714334881086789e+00, -2.714246584564317e+00, -2.734404690685848e+00, -2.733632719089326e+00, -2.696702717309390e+00, -2.701797607578212e+00, -2.714834010575159e+00, -2.719864172689219e+00, -2.738046237638986e+00, -2.626948840072928e+00, -2.738046237638986e+00, -2.726236411759261e+00, -7.995050638844367e-01, -8.685524379397275e-01, -8.715269238396399e-01, -8.731720897218568e-01, -7.363001550761245e-01, -7.580282853185707e-01, -7.562060874184435e-01, -7.789422790628046e-01, -8.293302584294916e-01, -8.616758172179246e-01, -8.293302584294919e-01, -7.894210581609726e-01, -9.902668854082856e-02, -1.000234520759529e-01, -1.795750742946938e-01, -2.062459408910511e-01, -8.910111222593620e-02, -9.422196253125177e-02, -2.606135915527895e+00, -2.604954893665948e+00, -1.152062835142205e-01, -1.241985940727848e-01, -1.152062835142204e-01, -1.241985940727848e-01, -2.878820530399699e-03, -2.902547245648191e-03, -3.582238537258369e-03, -3.636450748100986e-03, -2.678759880397503e-03, -2.836933518931054e-03, -6.072601702193373e-02, -6.134918375268757e-02, -2.735848745291132e-03, -3.757457363561278e-03, -2.735848745291131e-03, -3.757457363561284e-03, -8.532918332133287e-01, -8.571163726360567e-01, -8.318904086119051e-01, -8.357777324094564e-01, -8.761908487898281e-01, -8.794560455873619e-01, -8.765261174748088e-01, -8.491265954369702e-01, -8.763612330708174e-01, -8.796266268346905e-01, -8.763612330708174e-01, -8.460130979289808e-01, -8.279812726608825e-01, -8.312990662925307e-01, -6.730694235856413e-01, -7.165020322244655e-01, -6.983206702226386e-01, -7.733743817633868e-01, -7.366193925166087e-01, -7.394436706723675e-01, -7.148475832478601e-01, -7.176551494008869e-01, -7.148475832478604e-01, -7.948679928728523e-01, -9.079601209724832e-01, -1.008000686453518e+00, -2.733885303613637e-01, -2.754403769376865e-01, -2.941485332942594e-01, -3.497756219792042e-01, -4.579349741516655e-01, -4.834185875785171e-01, -4.145663028896608e-01, -4.146243466144158e-01, -4.145663028896607e-01, -3.719485048420227e-01, -6.244254123751886e-01, -6.278304390684558e-01, -3.631952601939871e-02, -3.656739564670181e-02, -4.793512795918792e-02, -4.956882035724700e-02, -4.602425558333038e-01, -4.643619331630224e-01, -7.607492891451717e-02, -8.077376246687698e-02, -7.607492891451720e-02, -8.077376246687704e-02, -9.129100307383307e-03, -9.459879196559341e-03, -9.637150210029367e-04, -9.659176653102261e-04, -2.021271105523252e-03, -2.149773629050834e-03, -7.197023196313830e-02, -7.301333161746107e-02, -2.591463393052284e-03, -3.443937406411825e-03, -2.591463393052282e-03, -3.549309966127858e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_13_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_13", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.595800495954379e-08, 0.000000000000000e+00, -3.596072762282545e-08, -3.595791272566303e-08, 0.000000000000000e+00, -3.596066005779785e-08, -3.595738622293672e-08, 0.000000000000000e+00, -3.595996978250919e-08, -3.595845822087801e-08, 0.000000000000000e+00, -4.089775219576166e-08, -3.595797125604769e-08, 0.000000000000000e+00, -4.089614510021066e-08, -4.089345712698310e-08, 0.000000000000000e+00, -4.089614510021066e-08, -3.566565644439413e-05, 0.000000000000000e+00, -2.800659258677095e-05, -3.567446639893450e-05, 0.000000000000000e+00, -3.566591070270037e-05, -3.584635113623845e-05, 0.000000000000000e+00, -3.587560405143309e-05, -3.577179278827336e-05, 0.000000000000000e+00, -3.577002719103520e-05, -3.566888201236805e-05, 0.000000000000000e+00, -3.592219102968575e-05, -2.801236326631722e-05, 0.000000000000000e+00, -3.592219102968575e-05, -8.109660210361483e-03, 0.000000000000000e+00, -8.330935216363536e-03, -8.059072058669927e-03, 0.000000000000000e+00, -1.136506528587706e-02, -1.019539809857490e-02, 0.000000000000000e+00, -1.014658846100229e-02, -1.072281968753421e-02, 0.000000000000000e+00, -7.901328239704341e-03, -8.302654955150946e-03, 0.000000000000000e+00, -6.920571116582815e-03, -1.133424472180843e-02, 0.000000000000000e+00, -9.882686011980488e-03, -8.299861117436020e-01, 0.000000000000000e+00, -1.399406866938251e+00, -8.535048072745411e-01, 0.000000000000000e+00, -1.431033096665029e+00, -2.535569648831473e-03, 0.000000000000000e+00, -2.011541491218982e-03, -9.150457597657198e-01, 0.000000000000000e+00, -1.056658187149746e+00, -1.079878164392383e+00, 0.000000000000000e+00, -1.059980372442730e+00, -1.079878164392382e+00, 0.000000000000000e+00, -1.613597877141884e-01, -3.246023483816083e+02, 0.000000000000000e+00, -2.881806570448189e+02, 8.868413551753530e+01, 0.000000000000000e+00, -2.642687479124610e+02, 1.477051715398709e+00, 0.000000000000000e+00, -6.670681083076848e+00, -7.665737394996480e+02, 0.000000000000000e+00, -7.967966150682305e+02, -3.971980031266962e+02, 0.000000000000000e+00, -1.602043005819154e+03, -3.971980031266962e+02, 0.000000000000000e+00, -1.602043005819154e+03, -1.221275439654177e-05, 0.000000000000000e+00, -1.222452689120198e-05, -1.221378149428154e-05, 0.000000000000000e+00, -1.222552474293631e-05, -1.221290926429664e-05, 0.000000000000000e+00, -1.222463197527272e-05, -1.221378473455479e-05, 0.000000000000000e+00, -1.222553252347172e-05, -1.111606619140653e-05, 0.000000000000000e+00, -1.222502585825112e-05, -1.221322004490955e-05, 0.000000000000000e+00, -1.112672608576581e-05, -2.939055812271230e-04, 0.000000000000000e+00, -2.952039799711257e-04, -2.973092040542153e-04, 0.000000000000000e+00, -2.984755480867881e-04, -2.900187832251862e-04, 0.000000000000000e+00, -2.924279985388393e-04, -2.934569274144165e-04, 0.000000000000000e+00, -2.957807524086202e-04, -2.985506601169092e-04, 0.000000000000000e+00, -2.298694441724621e-04, -2.985506601169092e-04, 0.000000000000000e+00, -2.974784891656795e-04, -5.945903360159624e-02, 0.000000000000000e+00, -5.013863725746022e-02, -5.201392272451839e-02, 0.000000000000000e+00, -5.228573916162389e-02, -6.666481170309033e-02, 0.000000000000000e+00, -6.628030281712360e-02, -7.292389863827842e-02, 0.000000000000000e+00, -6.827239740470223e-02, -5.480375202563766e-02, 0.000000000000000e+00, -5.254796666971203e-02, -5.480375202563770e-02, 0.000000000000000e+00, -6.342722265401950e-02, -1.293095650148350e+00, 0.000000000000000e+00, -1.273766273531572e+00, -3.575207295498843e-01, 0.000000000000000e+00, -6.266959743966266e-01, -1.488133305127275e+00, 0.000000000000000e+00, -1.441173104166594e+00, -5.609253401332734e-04, 0.000000000000000e+00, -5.620924332390691e-04, -1.358009254128360e+00, 0.000000000000000e+00, -1.670980900300877e+00, -1.358009254128360e+00, 0.000000000000000e+00, -1.670980900300878e+00, 3.465393985197635e+02, 0.000000000000000e+00, -1.031149907845830e+03, -8.063504941441528e+02, 0.000000000000000e+00, -7.346182483467086e+02, -3.872083632952613e+03, 0.000000000000000e+00, -3.618232452878187e+03, -3.039629445859049e+00, 0.000000000000000e+00, 1.394607040286236e-01, -1.609723648626321e+03, 0.000000000000000e+00, -1.523785960336566e+03, -1.609723648626322e+03, 0.000000000000000e+00, -1.523785960336565e+03, -7.914148082277708e-02, 0.000000000000000e+00, -7.795763824579771e-02, -7.974175206903257e-02, 0.000000000000000e+00, -7.856932541241937e-02, -7.606695487189789e-02, 0.000000000000000e+00, -7.501711407991755e-02, -7.648349268854052e-02, 0.000000000000000e+00, -7.822971982876807e-02, -7.627826220461467e-02, 0.000000000000000e+00, -7.521539480835708e-02, -7.627826220461467e-02, 0.000000000000000e+00, -7.832175384243618e-02, -8.807911182596073e-02, 0.000000000000000e+00, -8.696284961696905e-02, -1.086345615506564e-01, 0.000000000000000e+00, -8.696390863165801e-02, -1.085539557929028e-01, 0.000000000000000e+00, -9.045689267503990e-02, -1.034601837898749e-01, 0.000000000000000e+00, -1.021620492851158e-01, -1.066667138674564e-01, 0.000000000000000e+00, -1.054138459511378e-01, -1.066667138674564e-01, 0.000000000000000e+00, -9.099530069267805e-02, -4.130334536984152e-02, 0.000000000000000e+00, -3.625609189638376e-02, -4.733062216586396e-01, 0.000000000000000e+00, -4.710323444081659e-01, -2.795450486089539e-01, 0.000000000000000e+00, -3.952276309105356e-01, -2.251530061582898e-01, 0.000000000000000e+00, -2.871136559722200e-01, -3.666794465756123e-01, 0.000000000000000e+00, -3.703332042109562e-01, -3.666794465756124e-01, 0.000000000000000e+00, -2.775933929691690e-01, -1.276223991313558e-01, 0.000000000000000e+00, -1.286255078070534e-01, 1.580555918085041e+00, 0.000000000000000e+00, 1.541554161965091e+00, -4.091498201878779e+00, 0.000000000000000e+00, -3.944538702176647e+00, -4.203407542715103e-01, 0.000000000000000e+00, -4.550298590681640e-01, -2.494025535784076e+00, 0.000000000000000e+00, -2.676500742512258e+00, -2.494025535784078e+00, 0.000000000000000e+00, -2.676500742512260e+00, 3.236088828740660e+01, 0.000000000000000e+00, 2.988674814317228e+01, -1.193282052434962e+04, 0.000000000000000e+00, -1.185232003465702e+04, 1.433254080275928e+03, 0.000000000000000e+00, 1.303782899676247e+03, -2.013205380514534e-01, 0.000000000000000e+00, -2.872566872720646e-01, -2.883298730435606e+03, 0.000000000000000e+00, -1.846123507581922e+03, -2.883298730435610e+03, 0.000000000000000e+00, 5.480624100550949e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_13_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_13", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.989963949723128e-03, 1.990075691579601e-03, 1.989973547987512e-03, 1.990082638051534e-03, 1.989996969847047e-03, 1.990118197809958e-03, 1.989889797913493e-03, 2.895056575569014e-03, 1.989970456071270e-03, 2.894912118443452e-03, 2.894910843030402e-03, 2.894912118443452e-03, 1.621121997055614e-02, 5.745946697089182e-03, 1.621380515540440e-02, 1.621098820349467e-02, 1.626389493223003e-02, 1.627264122449176e-02, 1.624436508103572e-02, 1.624420577121144e-02, 1.620805210649824e-02, 1.628880747283886e-02, 5.743193680990105e-03, 1.628880747283886e-02, 5.433470118498714e-03, 5.936772142655995e-03, 5.294987875356483e-03, 4.245599477271050e-02, 3.536054713985591e-02, 3.446587666644925e-02, 3.759926563514056e-02, 4.490249674948480e-03, 6.242858109561423e-03, 2.312841699077963e-03, 4.335805435961326e-02, 3.115547502834219e-02, 1.251809600988787e-03, 9.447171643327894e-02, 1.966112374613174e-03, 1.021268513217343e-01, 1.384627476812474e-02, 6.038209509656001e-04, 2.193797834818566e-02, 2.693774671616690e-02, 7.317257670449996e-02, 8.753168678158079e-03, 7.317257670449986e-02, -7.663921428414161e-04, 5.141543576519084e-04, 5.478215678657574e-04, -7.427495058612017e-07, 5.924084135970879e-04, -5.958777283493842e-05, 2.569486497496203e-03, 2.634305044193778e-04, 2.603515379025020e-04, 4.464893026483443e-04, 3.316009676945434e-04, 4.464893026483443e-04, 3.316009676945430e-04, 1.112058821371700e-02, 1.112315082021694e-02, 1.110220783691532e-02, 1.110538275618844e-02, 1.111932630570437e-02, 1.112236620167181e-02, 1.110356543600821e-02, 1.110623522785076e-02, 8.633278664441859e-03, 1.111426220867582e-02, 1.111136166769606e-02, 8.635314804520967e-03, 2.521948984241694e-02, 2.530137227183468e-02, 2.581236771551677e-02, 2.587310810564748e-02, 2.464226715432216e-02, 2.489142358657753e-02, 2.519986491210518e-02, 2.544314365811967e-02, 2.596009308257583e-02, 7.646400330914785e-03, 2.596009308257583e-02, 2.567113325657800e-02, 1.096425598985871e-01, 5.695638737114492e-02, 9.638305470999232e-02, 9.568515648027834e-02, 1.077770186101365e-01, 1.117554214492677e-01, 1.155507339660995e-01, 1.127891705777895e-01, 1.057411271671395e-01, 5.818676304912745e-02, 1.057411271671395e-01, 1.112066430298479e-01, 9.313800128074038e-03, 9.461012495154466e-03, -1.695464411035884e-03, 3.822437601998807e-02, 7.737826922269199e-03, 8.917644436438058e-03, 3.365632544626897e-02, 3.367061187234992e-02, 1.556404325029306e-02, 2.383472482476119e-02, 1.556404325029306e-02, 2.383472482476128e-02, -3.037507775665618e-08, 1.678718242629012e-04, 2.468177538904723e-04, 2.352224332101400e-04, 4.956946246099300e-04, 5.502417506747156e-04, 4.845726332624274e-03, -3.219231797707395e-04, 2.194653304335824e-04, 5.385150584644011e-04, 2.194653304335835e-04, 5.385150584644065e-04, 8.251403917535989e-02, 8.200243105987493e-02, 8.949042106878068e-02, 8.888012763920057e-02, 7.821530729556916e-02, 7.789403358649422e-02, 7.791173398060451e-02, 8.451104225329130e-02, 7.807677031556112e-02, 7.775306336159389e-02, 7.807677031556112e-02, 8.551011220388287e-02, 8.574315012486966e-02, 8.523151942154590e-02, 1.269584899554163e-01, 5.669212268122099e-02, 1.256365754882516e-01, 7.143799309799657e-02, 1.133151034108069e-01, 1.127517862969786e-01, 1.207615891013561e-01, 1.201451017371162e-01, 1.207615891013561e-01, 7.665853616538483e-02, 9.484578100247153e-02, 6.193651930437467e-02, 6.004617615217605e-02, 6.086390590742520e-02, 8.473630823336870e-03, 9.047991556761839e-02, 3.961839065952019e-02, 1.397741139541354e-01, 1.227014816651273e-01, 1.236847219672123e-01, 1.227014816651273e-01, 2.467858469498985e-02, 1.262554507238259e-01, 1.280415469415772e-01, -5.928517850704115e-05, -5.929684888527957e-05, 3.133433398587894e-03, 3.351103120852740e-03, 1.680126535175700e-01, 1.792090765103515e-01, 8.037757446654555e-03, 1.043509922998236e-02, 8.037757446654538e-03, 1.043509922998240e-02, -8.792548889415448e-07, -9.642028284356793e-07, 7.109386018338447e-05, 7.109954601426197e-05, -4.370547067406096e-08, -5.570795481297622e-08, -6.478883924035285e-04, -7.496520290719382e-04, 3.341262886029112e-04, 5.023033940599319e-04, 3.341262886029133e-04, -3.319466046016110e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
