
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ft98_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ft98", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.248158791507347e+01, -2.248154743550819e+01, -2.248154959718368e+01, -2.248214810665466e+01, -2.248180839810711e+01, -2.248180839810711e+01, -3.457891331315584e+00, -3.457870172516806e+00, -3.457506073033937e+00, -3.459227738931149e+00, -3.458152604737950e+00, -3.458152604737950e+00, -6.842514602067749e-01, -6.840035812268502e-01, -6.787936387044468e-01, -6.837224786463680e-01, -6.837146919075686e-01, -6.837146919075686e-01, -2.058981387569517e-01, -2.069326298234615e-01, -7.932672424403984e-01, -1.657370182627149e-01, -1.985732292885714e-01, -1.985732292885713e-01, -8.080243256707911e-02, -7.672977482387444e-02, -9.343008309062502e-02, -5.778446003448662e-02, -5.772367428933167e-02, -5.772367428933124e-02, -5.123261471821473e+00, -5.087369972639600e+00, -5.149250831785699e+00, -5.136080720942383e+00, -5.242536564766551e+00, -5.037453501814710e+00, -2.047310642065159e+00, -2.057158347414798e+00, -2.065496954618037e+00, -2.076791898905936e+00, -2.072289909847317e+00, -2.143214386258568e+00, -5.822971397212493e-01, -6.526749223468029e-01, -5.413525889253851e-01, -5.388147378809394e-01, -5.854973633525757e-01, -5.857024237893522e-01, -1.154986762830298e-01, -2.054587116037340e-01, -1.071755533427974e-01, -1.820755985677083e+00, -1.786792248801461e-01, -2.371240013673552e-01, -1.754940359177779e-03, -2.340886891948768e-03, -1.881970283430456e-03, -7.123426205647633e-02, -2.391293925555404e-03, -2.391293925555878e-03, -7.878827321602327e-01, -6.119907380777133e-01, -6.393625415396376e-01, -6.805424558043172e-01, -6.569480253996551e-01, -6.569451591430626e-01, -9.895687420854824e-01, -5.078884038997276e-01, -5.151535267779717e-01, -5.402777457170550e-01, -5.181342454778105e-01, -5.223694241476908e-01, -6.836989973471430e-01, -2.510055841926219e-01, -2.902691949933439e-01, -3.581244581026283e-01, -3.215464585047905e-01, -3.215301565111590e-01, -4.645762784112621e-01, -9.418723955718594e-01, -6.809296276544645e-02, -3.386836403787575e-01, -9.181378430110271e-02, -1.690115551284131e-01, -7.237196349049327e-03, -4.970708551692707e-04, -1.202639895523523e-03, -5.538711673298510e-01, -2.175583874094105e-03, -2.175583874094049e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ft98_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ft98", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.308592389481517e+01, -2.308762454738956e+01, -2.308676962627997e+01, -2.308823796527890e+01, -2.308850137165518e+01, -2.309099316593049e+01, -2.307898381407563e+01, -2.307885110574090e+01, -2.308647733250783e+01, -2.308299509987891e+01, -2.308647733250783e+01, -2.308299509987891e+01, -4.115113346055280e+00, -4.115405238403438e+00, -4.115096600736724e+00, -4.115422749543127e+00, -4.115121037094537e+00, -4.115253535422690e+00, -4.113946201365463e+00, -4.114325633772233e+00, -4.114491727998000e+00, -4.114391331651223e+00, -4.114491727998000e+00, -4.114391331651223e+00, -8.018539733931083e-01, -8.050527863671382e-01, -8.006104529056329e-01, -8.045223917657269e-01, -7.846450393858185e-01, -7.798502850911609e-01, -7.879832816847298e-01, -7.894888514270737e-01, -8.114274694043643e-01, -7.483056894638043e-01, -8.114274694043643e-01, -7.483056894638043e-01, -1.565334091758130e-01, -1.578557050163243e-01, -1.635466832485411e-01, -1.656684785888222e-01, -9.232080836978430e-01, -9.558560075290073e-01, -1.278445422762806e-01, -9.608237381703447e-02, -1.620673499443629e-01, -1.480590277093779e-01, -1.620673499443628e-01, -1.480590277093778e-01, 3.381565811099539e-01, 3.381387386924703e-01, 3.354172746696459e-01, 3.346628099628586e-01, 3.096834616451273e-01, 3.029088361526886e-01, 3.638563924450349e-01, 3.634191128777710e-01, 3.460723383153518e-01, -3.467730882952989e-03, 3.460723383153518e-01, -3.467730882952987e-03, -6.864503181272155e+00, -6.829994556898125e+00, -6.619011687129188e+00, -6.613013066242702e+00, -6.995817072931785e+00, -6.991248712733702e+00, -6.926126860128410e+00, -6.926998287979225e+00, -7.256463084194691e+00, -7.253845399112082e+00, -6.292538090764917e+00, -6.279789786807800e+00, -2.360423100992877e+00, -2.360382759614601e+00, -2.365463781585507e+00, -2.364828811585455e+00, -2.178479884681931e+00, -2.187234783880674e+00, -2.186047797836560e+00, -2.201396552445925e+00, -2.245512760737119e+00, -2.222931302625716e+00, -1.984143462247728e+00, -1.981331888715054e+00, -7.326181681786070e-01, -7.317405163099893e-01, -1.048749498649191e+00, -1.063388420125846e+00, -6.566692566570226e-01, -6.840879440126456e-01, -6.738782186638251e-01, -6.950834914593822e-01, -7.317606970929414e-01, -6.960033399802185e-01, -7.355618412430049e-01, -6.990088158712843e-01, -1.478966563722233e-01, -1.484720799388741e-01, -2.294848690873727e-01, -2.303336574449075e-01, -1.374822092684150e-01, -1.424161110688362e-01, -2.343746965278117e+00, -2.342728975941057e+00, 9.418671852404943e-02, 3.935320551888967e-02, 1.735725771295444e-01, 1.310987672832144e-01, -2.865811088131460e-03, -2.980058368322019e-03, -3.875875439134292e-03, -3.929670698105461e-03, -3.005029039948491e-03, -3.250095315434723e-03, -1.021335538981997e-01, -1.028201026662734e-01, -2.953299104196558e-03, -4.386393814501524e-03, -2.953299104197067e-03, -4.386393814507095e-03, -1.725340802155211e+00, -1.755512699694773e+00, -1.029444056944568e+00, -1.042803586154385e+00, -1.166561054174614e+00, -1.185025522539049e+00, -1.349253695916930e+00, -1.369714406805018e+00, -1.247782632444481e+00, -1.267268609996774e+00, -1.247770588725730e+00, -1.267258210179072e+00, -2.184210051167805e+00, -2.195891649561175e+00, -5.549239898943271e-01, -5.567071119463188e-01, -6.309473741074213e-01, -6.344657641313287e-01, -7.358110886074077e-01, -7.366267362491467e-01, -6.324511386517651e-01, -6.348285887079791e-01, -6.606096546145263e-01, -6.635445278573777e-01, -1.090168388664913e+00, -1.110524535757749e+00, -2.768211215575482e-01, -2.780616923373330e-01, -3.214204405444296e-01, -3.240705556763105e-01, -4.198193807048470e-01, -4.221515249323279e-01, -3.643945400780276e-01, -3.642039554871073e-01, -3.643998684702447e-01, -3.641623486578090e-01, -5.246867585226787e-01, -5.287422023780161e-01, -6.104884451955732e-02, -1.344864160442655e+00, 2.242865267611701e-01, -2.643789707587382e-02, -3.931734024011151e-01, -3.952138785036879e-01, -1.200691244439978e-01, -1.226191765736885e-01, 1.865786663989713e-01, 1.715358253865552e-01, -1.176348197091679e-02, -1.231228219123970e-02, -8.125821467548224e-04, -8.446231521984487e-04, -1.916876529145909e-03, -2.078664831096832e-03, 1.904932190656452e-01, 8.373431173486423e-02, -2.887651985841243e-03, -3.942975238361603e-03, -2.887651985841159e-03, -3.942975238361029e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ft98_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ft98", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.299859202097354e-08, 0.000000000000000e+00, -4.299192049153591e-08, -4.299368578389143e-08, 0.000000000000000e+00, -4.298836056035315e-08, -4.298353157831627e-08, 0.000000000000000e+00, -4.297225365828001e-08, -4.303876533836961e-08, 0.000000000000000e+00, -4.304271816189636e-08, -4.299538661271225e-08, 0.000000000000000e+00, -4.301859902077794e-08, -4.299538661271225e-08, 0.000000000000000e+00, -4.301859902077794e-08, -1.698346797119462e-05, 0.000000000000000e+00, -1.697945094554417e-05, -1.698626490962753e-05, 0.000000000000000e+00, -1.698107176401355e-05, -1.703816726073823e-05, 0.000000000000000e+00, -1.704635678388099e-05, -1.702597142963471e-05, 0.000000000000000e+00, -1.702275181643348e-05, -1.698667888033035e-05, 0.000000000000000e+00, -1.706890023931021e-05, -1.698667888033035e-05, 0.000000000000000e+00, -1.706890023931021e-05, -7.662950546493345e-03, 0.000000000000000e+00, -7.743279132354779e-03, -7.641481333617387e-03, 0.000000000000000e+00, -7.740294211679081e-03, -7.385216789954016e-03, 0.000000000000000e+00, -7.246092513102753e-03, -7.065675108268661e-03, 0.000000000000000e+00, -7.108245911686817e-03, -7.817194610612067e-03, 0.000000000000000e+00, -8.435789442287485e-03, -7.817194610612067e-03, 0.000000000000000e+00, -8.435789442287485e-03, -2.582588602048868e+00, 0.000000000000000e+00, -2.474557958709440e+00, -2.407243076991308e+00, 0.000000000000000e+00, -2.290232668069720e+00, -4.410424706158497e-03, 0.000000000000000e+00, -4.233289078431478e-03, -4.408179276339276e+00, 0.000000000000000e+00, -6.092831716769503e+00, -2.239821172029551e+00, 0.000000000000000e+00, -7.935105054770030e-01, -2.239821172029551e+00, 0.000000000000000e+00, -7.935105054770072e-01, -3.286755221345559e+05, 0.000000000000000e+00, -2.730483545549723e+05, -2.895186692324875e+05, 0.000000000000000e+00, -2.349723090164351e+05, -1.265966308390300e+03, 0.000000000000000e+00, -1.070343491418991e+03, -1.498391840268381e+06, 0.000000000000000e+00, -1.561968190975019e+06, -4.648001376765848e+05, 0.000000000000000e+00, 2.753090730311884e+03, -4.648001376765852e+05, 0.000000000000000e+00, 2.753090730311888e+03, 4.862602360491079e-07, 0.000000000000000e+00, 3.404524531117835e-07, -7.389462800303633e-07, 0.000000000000000e+00, -7.671990712725001e-07, 9.919218145234764e-07, 0.000000000000000e+00, 9.799415292714928e-07, 7.764443268432206e-07, 0.000000000000000e+00, 7.852302766948294e-07, 9.101107751962465e-07, 0.000000000000000e+00, 8.921801577865622e-07, -3.244483632727941e-06, 0.000000000000000e+00, -3.437755158648289e-06, -8.562194255957721e-05, 0.000000000000000e+00, -8.562782739643922e-05, -8.625103579412752e-05, 0.000000000000000e+00, -8.631685864359903e-05, -1.552634998924481e-04, 0.000000000000000e+00, -1.538966347260410e-04, -1.553380286585509e-04, 0.000000000000000e+00, -1.516513165882693e-04, -1.434354993710841e-04, 0.000000000000000e+00, -1.476502502082315e-04, -2.267613170836536e-04, 0.000000000000000e+00, -2.246361146520915e-04, -1.178288333901350e-02, 0.000000000000000e+00, -1.174907911586829e-02, 1.286702742478999e-01, 0.000000000000000e+00, 1.398770315613245e-01, -1.915955017382135e-02, 0.000000000000000e+00, -1.610803595419015e-02, -2.768738896465532e-02, 0.000000000000000e+00, -2.656600948099708e-02, -1.754789648817665e-02, 0.000000000000000e+00, -2.050209979539807e-02, -1.548967299541636e-02, 0.000000000000000e+00, -1.859905878317536e-02, -3.677489098127769e-01, 0.000000000000000e+00, -4.154943253008654e-01, -4.014370009403569e-01, 0.000000000000000e+00, -3.980633098843707e-01, -1.390059751641003e-01, 0.000000000000000e+00, -3.124919027793951e-01, -1.535440167043755e-04, 0.000000000000000e+00, -1.536530038765500e-04, -2.927206703006509e+01, 0.000000000000000e+00, -2.287676521019850e+01, -3.651303854881937e+01, 0.000000000000000e+00, -3.067444157364031e+01, 2.311721990263909e+03, 0.000000000000000e+00, 1.992536671505187e+03, 1.375484326928242e+03, 0.000000000000000e+00, 1.280955551409858e+03, 6.087882387061346e+03, 0.000000000000000e+00, 5.846922309871502e+03, 2.409636189087984e+00, 0.000000000000000e+00, 2.361551558796206e+00, 3.959569395562618e+03, 0.000000000000000e+00, 2.250587774038244e+03, 3.959569395565143e+03, 0.000000000000000e+00, 2.250587774049836e+03, 1.959550450050570e+00, 0.000000000000000e+00, 2.026235003558898e+00, 2.300690268032647e-01, 0.000000000000000e+00, 2.386623388337708e-01, 4.322829956341070e-01, 0.000000000000000e+00, 4.494813293880431e-01, 7.947815186617008e-01, 0.000000000000000e+00, 8.181162481095172e-01, 5.795588825072777e-01, 0.000000000000000e+00, 5.995732614688751e-01, 5.795544878143525e-01, 0.000000000000000e+00, 5.995695617257777e-01, 6.111882451013257e+00, 0.000000000000000e+00, 6.089738508867456e+00, -4.690172602139755e-02, 0.000000000000000e+00, -4.671714000807620e-02, -2.262151663954608e-02, 0.000000000000000e+00, -2.213057018493591e-02, -6.392777290550073e-04, 0.000000000000000e+00, 1.881143516420142e-03, -2.749859163450130e-02, 0.000000000000000e+00, -2.717913889388561e-02, -1.687354691860840e-02, 0.000000000000000e+00, -1.644722598790173e-02, 8.699881788482165e-02, 0.000000000000000e+00, 9.735840423172266e-02, -2.425528766559203e-01, 0.000000000000000e+00, -2.401809762717607e-01, -1.705031894405719e-01, 0.000000000000000e+00, -1.682024324714767e-01, -9.631510951191892e-02, 0.000000000000000e+00, -9.466244200157466e-02, -1.330161008740503e-01, 0.000000000000000e+00, -1.338941312484004e-01, -1.322668551447380e-01, 0.000000000000000e+00, -1.335261064871181e-01, -5.347128799929000e-02, 0.000000000000000e+00, -5.239760831817836e-02, 1.314707252080875e+01, 0.000000000000000e+00, 2.038392777975074e+03, -4.291435420095790e+02, 0.000000000000000e+00, -7.415923521515438e+01, -1.711509363219033e-01, 0.000000000000000e+00, -1.829317897378376e-01, 2.141139514396696e-01, 0.000000000000000e+00, -4.787688082275464e-01, -1.293787192550907e+02, 0.000000000000000e+00, -1.150312583939311e+02, 2.328367895967407e+02, 0.000000000000000e+00, 2.211497920930786e+02, 2.795300443393918e+04, 0.000000000000000e+00, 3.841292969328860e+04, 6.154266683957578e+03, 0.000000000000000e+00, 5.723946992729321e+03, -1.642259077041066e+02, 0.000000000000000e+00, -1.116457259780721e+02, 6.541941364540087e+03, 0.000000000000000e+00, 2.677006929436244e+03, 6.541941364539561e+03, 0.000000000000000e+00, 2.677006929435167e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ft98_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ft98", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([-9.577290728307295e-05, -9.579243301441704e-05, -9.575840475632056e-05, -9.578189644603971e-05, -9.573145919174898e-05, -9.573784531495544e-05, -9.589492690349215e-05, -9.594638773888400e-05, -9.576327361772099e-05, -9.587737736861120e-05, -9.576327361772099e-05, -9.587737736861120e-05, 1.433347779684003e-04, 1.427069529856575e-04, 1.434403324011445e-04, 1.427219755627568e-04, 1.448821932023396e-04, 1.450027302923542e-04, 1.468902585951070e-04, 1.463560859722331e-04, 1.430926317824486e-04, 1.477269782289352e-04, 1.430926317824486e-04, 1.477269782289352e-04, -2.350496640138102e-05, -2.571694517021415e-05, -2.308878786145382e-05, -2.525537068087149e-05, -1.763548257258961e-05, -2.220368565992260e-05, -3.633455187660064e-05, -3.734822560004244e-05, -2.566661587252079e-05, 4.933711407631033e-04, -2.566661587252079e-05, 4.933711407631033e-04, 9.895147569866754e-03, 1.088616092952218e-02, 9.259810125738274e-03, 1.033130420606811e-02, -7.149329358516958e-06, -1.436264292945554e-05, 8.137296938996339e-03, 1.282363104454055e-02, 9.831263578290509e-03, 3.399276628917627e-09, 9.831263578290513e-03, 3.399276628919231e-09, 7.223838354571813e-02, 7.211795995046270e-02, 7.287645859495252e-02, 7.286390910232449e-02, 5.441933678034808e-02, 5.451093801881465e-02, 6.901122549936221e-02, 6.880305746719007e-02, 7.129379647290980e-02, 1.176707442324490e-17, 7.129379647290980e-02, 1.176707442324493e-17, -2.656389971947372e-06, -4.283610386375440e-06, -2.224847593694912e-05, -2.259984099564474e-05, -1.002614152897134e-07, -7.902914423937692e-08, -8.279781617934781e-07, -7.508517843573359e-07, -5.667155478425953e-05, -5.728384956896862e-05, -2.951863405647961e-05, -1.539541012036448e-05, -3.758447917454471e-09, -5.139875626877823e-09, -1.200166805389468e-06, -1.219093015825469e-06, 5.402308435131827e-04, 5.291429640454607e-04, 5.651157623827373e-04, 5.328129899287374e-04, 4.559473144049849e-04, 4.901869967373833e-04, 1.425842468022248e-03, 1.357575424998634e-03, -3.641238257182274e-06, -2.245260944353618e-06, -1.446758390695406e-04, -1.446111462515711e-04, -2.025528103883368e-06, -3.936217347757119e-06, -5.629542809778838e-04, -2.867652447283010e-04, 2.816001956409383e-04, 1.634187071576191e-04, -1.348254413162627e-04, -1.271902888654177e-04, -4.650504952638332e-07, -4.965734628682609e-07, -5.499805756846750e-08, -5.679702766099257e-08, -3.245435966112950e-10, -4.493639788461732e-10, -3.664200523293142e-04, -3.674455319806195e-04, 3.691805432927555e-02, 3.326120826162619e-02, 5.283901539259594e-02, 5.284735289711279e-02, -2.958769709092940e-19, -3.309276683177051e-19, -2.933961313010495e-24, -3.334998549526238e-24, -8.747582955840086e-24, -6.928302583989679e-23, -3.334753307785744e-08, -1.015629673003256e-08, -2.346868476316117e-18, -1.265037837224238e-17, -3.666790301306326e-21, -1.519123685906640e-19, -3.237666473999540e-13, -3.184944301766920e-13, -1.465318337419223e-12, -1.485338646844562e-12, -5.575789616521377e-15, -5.613360910708183e-15, -3.367058410763811e-09, -4.264403992817230e-09, -2.018535022465188e-11, -1.497347357473854e-11, -1.788944026501030e-15, -1.806250934361347e-15, -1.841259473444969e-14, -1.744991160956832e-14, 2.710189980450185e-03, 2.783376363775430e-03, -5.129838434960795e-06, -5.088127385814520e-06, -5.238646591080471e-04, -3.353411253976758e-04, -1.369416750911611e-04, -1.384990987750578e-04, -1.272892757129211e-06, -1.318301757928830e-06, -7.167988738124554e-06, -7.859120632005350e-06, -5.879362152197761e-09, -5.874604787514641e-09, -4.770347215886542e-09, -5.010877208389584e-09, -3.027150967876505e-06, -2.646380600546167e-06, -1.608200574387118e-06, -1.747883411919821e-06, -3.094098851261992e-05, -1.946308774363621e-05, 1.534908712454704e-03, 1.515949325678930e-03, -1.784804618005593e-08, 2.120726439096572e-01, 4.140094996439658e-02, 7.956428615644476e-03, 1.095618785501509e-03, 1.924034045402955e-03, -8.537255223680398e-10, -2.113659700119470e-09, 5.257904047512085e-02, 5.647902458214642e-02, -3.353812750154701e-17, -1.714232628586207e-16, -5.473906036992777e-19, -2.414368933473071e-20, -4.548779389944514e-21, -9.037924934815964e-21, 1.089265063066629e-01, 1.343549147187762e-01, -3.198400933287133e-19, -3.208159729692036e-18, -9.911845601541979e-20, -7.004102884446595e-19])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ft98_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ft98", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
