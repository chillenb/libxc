
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_regtm_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_regtm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.226237470475539e+01, -2.226242785732374e+01, -2.226272476214060e+01, -2.226193422370337e+01, -2.226233980392872e+01, -2.226233980392872e+01, -3.402866491658150e+00, -3.402871951513198e+00, -3.403259626582313e+00, -3.405133679186250e+00, -3.403853356610142e+00, -3.403853356610142e+00, -6.700713235577590e-01, -6.698300700469672e-01, -6.647212823883030e-01, -6.684736894109751e-01, -6.671974337874282e-01, -6.671974337874282e-01, -2.012686421662219e-01, -2.027879599311462e-01, -8.286153453133553e-01, -1.606141583276857e-01, -1.753285090610424e-01, -1.753285090610425e-01, -2.020868588818759e-02, -2.070066046763453e-02, -6.299201994901746e-02, -1.425797946726783e-02, -1.613482328874790e-02, -1.613482328874790e-02, -5.413324059956051e+00, -5.413861090337019e+00, -5.413370109733282e+00, -5.413843421807780e+00, -5.413584851903504e+00, -5.413584851903504e+00, -2.105194589540519e+00, -2.121889873276552e+00, -2.103590479555050e+00, -2.118403633778597e+00, -2.115231697490719e+00, -2.115231697490719e+00, -5.933121628583722e-01, -6.279392451053736e-01, -5.357443114219215e-01, -5.341897913518736e-01, -6.030395993947321e-01, -6.030395993947321e-01, -1.239987153665441e-01, -2.101099464249311e-01, -1.164694507982986e-01, -1.810391258711418e+00, -1.377370411211531e-01, -1.377370411211531e-01, -1.226904162514063e-02, -1.377004307874502e-02, -9.794851305594638e-03, -8.590355169449101e-02, -1.176955190396499e-02, -1.176955190396500e-02, -6.070619616725520e-01, -6.045338014309962e-01, -6.053549879725616e-01, -6.060826051518244e-01, -6.057107003866962e-01, -6.057107003866962e-01, -5.882590563497627e-01, -5.241573322562593e-01, -5.406985097333605e-01, -5.578764607204617e-01, -5.486964950970298e-01, -5.486964950970298e-01, -6.456355685376723e-01, -2.569152598826828e-01, -2.954923938213587e-01, -3.591051331701277e-01, -3.267593992776885e-01, -3.267593992776885e-01, -4.742164627366038e-01, -6.234192311743283e-02, -7.559625606083670e-02, -3.414500745083729e-01, -1.011932243933372e-01, -1.011932243933372e-01, -2.478253370074982e-02, -6.941609507125469e-03, -9.045944266429835e-03, -9.756228227247249e-02, -1.098454136553187e-02, -1.098454136553186e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_regtm_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_regtm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.806671014110005e+01, -2.806683139485960e+01, -2.806738017836915e+01, -2.806557900879027e+01, -2.806652135762216e+01, -2.806652135762216e+01, -4.154213899883108e+00, -4.154271963251279e+00, -4.155755291045753e+00, -4.154330324488920e+00, -4.154556143492536e+00, -4.154556143492536e+00, -7.773409374684993e-01, -7.764497118929214e-01, -7.569238235959128e-01, -7.624344539038463e-01, -7.613115345245925e-01, -7.613115345245925e-01, -1.985404278156407e-01, -2.016044444866432e-01, -8.918343885181875e-01, -1.563547261256909e-01, -1.699864614180448e-01, -1.699864614180448e-01, -1.068862867083503e-02, -1.113590555318419e-02, -4.677573903374108e-02, -9.378273934229393e-03, -9.615665336996102e-03, -9.615665336996119e-03, -6.946181562723818e+00, -6.949325030867696e+00, -6.946345302955439e+00, -6.949119231635605e+00, -6.947765438287561e+00, -6.947765438287561e+00, -2.328729662960543e+00, -2.359094481151057e+00, -2.318362272107937e+00, -2.345678068803104e+00, -2.350579475351791e+00, -2.350579475351791e+00, -7.291804636061190e-01, -8.812436431055222e-01, -6.506057350054469e-01, -7.022512061483799e-01, -7.518822788152971e-01, -7.518822788152971e-01, -1.120422220221250e-01, -1.974768087896387e-01, -1.052737035035560e-01, -2.413448209207857e+00, -1.244588970149449e-01, -1.244588970149449e-01, -1.397635784542104e-02, -1.227807309874771e-02, -6.718908661553225e-03, -7.405640148523136e-02, -9.926565220887777e-03, -9.926565220887786e-03, -8.093821264144225e-01, -7.971794374890666e-01, -8.015776355711249e-01, -8.051378603359088e-01, -8.033674175129395e-01, -8.033674175129395e-01, -7.904396824280027e-01, -6.152797211238904e-01, -6.606111723227623e-01, -7.116786402992236e-01, -6.848266366296628e-01, -6.848266366296626e-01, -8.964642025082814e-01, -2.510760612186756e-01, -3.030427385467421e-01, -4.039328930390610e-01, -3.502293561827555e-01, -3.502293561827553e-01, -5.414577911107208e-01, -4.196316015403647e-02, -6.020557228044999e-02, -3.973012665927935e-01, -8.788116412675970e-02, -8.788116412675960e-02, -2.273286126998392e-02, -8.623120034932919e-03, -5.243245025080417e-03, -7.974766556544303e-02, -8.164702007412771e-03, -8.164702007412764e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_regtm_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_regtm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.163227990643502e-09, -7.163129647516505e-09, -7.162306030564946e-09, -7.163755301495438e-09, -7.163051187376862e-09, -7.163051187376862e-09, -1.157768293821617e-05, -1.158108963668270e-05, -1.167775245616697e-05, -1.170360559063653e-05, -1.167663629046803e-05, -1.167663629046803e-05, -2.457502983635263e-03, -2.460768847248003e-03, -2.644815297451800e-03, -3.203503822408149e-03, -3.013370384524082e-03, -3.013370384524082e-03, -8.336412326064200e-01, -8.193703658451461e-01, 1.913415223951465e-04, -1.122647976629330e+00, -1.080825710780499e+00, -1.080825710780503e+00, -3.833684234770155e+03, -3.403272740471869e+03, -3.218249355724841e+01, -9.657913980363139e+03, -7.353321515452304e+03, -7.353321515452272e+03, -1.894365467292697e-06, -1.893307864866405e-06, -1.894076106877398e-06, -1.893153537265010e-06, -1.893954671234526e-06, -1.893954671234526e-06, -9.618895356835742e-05, -9.225251067581447e-05, -9.351812405868026e-05, -8.986252571974289e-05, -9.539646961653408e-05, -9.539646961653408e-05, -2.495813772259943e-02, -2.776574808402906e-02, -2.464774315237538e-02, -1.632502671779883e-02, -2.435754120851985e-02, -2.435754120851985e-02, -2.547295199004328e+00, -6.043902364043527e-01, -3.016482229500104e+00, -1.340203374076474e-04, -2.389018867516882e+00, -2.389018867516886e+00, 8.119455370865562e+03, -3.536932203151074e+03, -3.987502442239731e+04, -8.636138951667419e+00, -9.505310200186066e+03, -9.505310200186163e+03, -1.197940860404575e-02, -1.284515298252288e-02, -1.259942503492727e-02, -1.235640637609586e-02, -1.248394045378758e-02, -1.248394045378758e-02, -1.443457141615565e-02, -2.348838584100428e-02, -2.230184958499415e-02, -2.039661058473513e-02, -2.181540781722995e-02, -2.181540781722995e-02, -2.073295045108639e-02, -3.094982578105099e-01, -1.970639466274527e-01, -1.196967265306769e-01, -1.541652270356957e-01, -1.541652270356959e-01, -4.564009322956492e-02, -4.157204692367206e+01, -1.493955725032028e+01, -1.763378385281892e-01, -6.034004532229381e+00, -6.034004532229380e+00, -3.008384107080457e+02, 4.402888610371096e+05, -7.568525709772133e+04, -8.135532599770091e+00, -2.031024279610924e+04, -2.031024279610929e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_regtm_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_regtm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_regtm_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_regtm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [7.111030342834144e-04, 7.111017720230085e-04, 7.110410215802988e-04, 7.110579669792115e-04, 7.110569729714380e-04, 7.110569729714380e-04, 2.559797100287026e-03, 2.561386844995738e-03, 2.607787909144356e-03, 2.629703519539345e-03, 2.610394487244283e-03, 2.610394487244283e-03, -4.503729472111330e-03, -4.486045686252817e-03, -3.559548673912660e-03, -1.736928019694216e-03, -2.405500386851142e-03, -2.405500386851142e-03, 3.894102778990757e-02, 3.969407218451625e-02, -9.059572409650199e-03, 1.552717109059353e-02, 2.655510669747720e-02, 2.655510669747731e-02, 7.900645739753607e-03, 8.041074244827334e-03, 9.608344511525615e-03, 2.504582143907795e-03, 4.790366711232172e-03, 4.790366711232140e-03, 2.833882727640771e-03, 2.839024367847041e-03, 2.833663176703692e-03, 2.838222328807254e-03, 2.836720955717731e-03, 2.836720955717731e-03, 6.782272473694630e-03, 6.659815713019246e-03, 6.446812375784223e-03, 6.308830640228099e-03, 6.894546210689745e-03, 6.894546210689745e-03, 5.261537644610582e-02, 8.918645594568002e-02, 2.711010588399384e-02, 1.260406484110002e-02, 5.643655924144991e-02, 5.643655924144991e-02, 1.218846714564053e-02, 2.814466879787363e-02, 1.063324299165568e-02, 4.486565548859360e-03, 2.349587362476141e-02, 2.349587362476145e-02, -3.967000495160308e-03, -1.255647373116787e-03, 3.813525499205973e-03, 8.602324895910941e-03, -7.450164488826133e-04, -7.450164488825735e-04, 3.485721925923879e-02, 3.261215234164407e-02, 3.338392301821601e-02, 3.404726847017470e-02, 3.371527658041171e-02, 3.371527658041171e-02, 4.005401459070803e-02, 2.610090835053876e-02, 3.053749329819651e-02, 3.507236264655807e-02, 3.346672916123709e-02, 3.346672916123709e-02, 6.386617249622610e-02, 2.957633347164346e-02, 3.168507388458413e-02, 4.050226147877745e-02, 3.758816993542985e-02, 3.758816993542977e-02, 4.124803753031508e-02, 1.338599757505030e-02, 8.989253577814323e-03, 5.797514642822385e-02, 1.597399087303999e-02, 1.597399087304000e-02, -2.222944708783824e-03, -3.710228551851917e-03, 4.193755028540435e-03, 2.112456583972100e-02, 1.703334750875175e-03, 1.703334750875186e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
