
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_regtm_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_regtm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.995159438359776e+01, -1.995167249247864e+01, -1.995202792960169e+01, -1.995086737018950e+01, -1.995147415959026e+01, -1.995147415959026e+01, -3.236876660092711e+00, -3.236867763523832e+00, -3.236695478260606e+00, -3.237057100513374e+00, -3.236681901439053e+00, -3.767277380507541e+00, -6.533697742195647e-01, -7.617501251762985e-01, -7.501733859347239e-01, -7.523024253506068e-01, -7.519107289377888e-01, -7.519107289377888e-01, -2.041527988686344e-01, -2.062795678733537e-01, -8.270830219268323e-01, -1.698520745962280e-01, -1.828158355799253e-01, -1.828158355799253e-01, -2.029097566246288e-02, -2.085407438420382e-02, -6.574530922244322e-02, -1.497469569704344e-02, -1.665168875138908e-02, -1.665168875138908e-02, -5.414459167479523e+00, -5.414982361950120e+00, -5.414481497063521e+00, -5.033652676273534e+00, -5.414724788037376e+00, -5.414724788037376e+00, -1.832159452918616e+00, -1.842734991979539e+00, -1.824807150861972e+00, -1.833874708819765e+00, -1.841629678488601e+00, -2.154009114071374e+00, -6.226290624281117e-01, -6.656868313260705e-01, -5.843482100734758e-01, -5.985821197410159e-01, -6.305165501343618e-01, -5.536020513773915e-01, -1.362206750600624e-01, -2.140259584215771e-01, -1.296909987620584e-01, -2.026253997860323e+00, -1.426053544550025e-01, -1.426053544550024e-01, -1.633250480645409e-02, -1.495116296278135e-02, -1.034396046541144e-02, -1.001861357973170e-01, -1.561352894252672e-02, -1.272447608348234e-02, -6.094116481792475e-01, -6.069075746872459e-01, -5.972671226685023e-01, -6.084514605325804e-01, -6.080846129760659e-01, -6.080846129760659e-01, -5.929936513692800e-01, -5.267303379753994e-01, -5.442191377275075e-01, -5.622580814654226e-01, -5.529185244153699e-01, -4.902482374424484e-01, -7.004844274351891e-01, -2.303319287607660e-01, -3.022750830545424e-01, -3.257128211722953e-01, -3.378219024414237e-01, -3.378219024414238e-01, -4.216120816117162e-01, -6.377784389623166e-02, -7.937734858185297e-02, -3.618027725119519e-01, -1.119846506997358e-01, -1.057967488430039e-01, -2.691929860613316e-02, -6.614637781125880e-03, -9.311313543031462e-03, -1.004854681431104e-01, -1.172352834542589e-02, -1.172352834542587e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_regtm_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_regtm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.780995099814736e+01, -2.781030439419743e+01, -2.781178895698297e+01, -2.780655348061154e+01, -2.780930744848488e+01, -2.780930744848488e+01, -4.214709184173910e+00, -4.214803034443064e+00, -4.217340170806207e+00, -4.216699338948184e+00, -4.216330087421024e+00, -4.293358431106927e+00, -7.479045652493076e-01, -7.880795848228751e-01, -7.614235088913792e-01, -7.703201925915883e-01, -7.683699462931004e-01, -7.683699462931004e-01, -1.997350599878739e-01, -2.031683216606567e-01, -8.552847007028733e-01, -1.482336928005295e-01, -1.677326229002859e-01, -1.677326229002858e-01, -1.055789173811186e-02, -1.088499164425518e-02, -4.108469551485645e-02, -7.619171764502651e-03, -8.550781029708892e-03, -8.550781029708892e-03, -6.945829525118473e+00, -6.948964745337888e+00, -6.946000148211390e+00, -7.718639035065504e+00, -6.947405382365520e+00, -6.947405382365520e+00, -2.327773734191368e+00, -2.354462292009564e+00, -2.307512292825900e+00, -2.331512011368372e+00, -2.352318933627989e+00, -2.403066924852778e+00, -7.479984046903735e-01, -8.402148869799899e-01, -6.763858851310335e-01, -7.201201447610160e-01, -7.648269870173885e-01, -7.424494361558422e-01, -1.348713693087117e-01, -1.972084467492398e-01, -1.285295262074021e-01, -2.471783166947004e+00, -1.203097523092884e-01, -1.203097523092884e-01, -1.633232756813514e-02, -7.597442878674115e-03, -5.292419176236035e-03, -9.967995299141526e-02, -1.561306672888622e-02, -6.499985154434345e-03, -8.062292955196074e-01, -7.945934782409038e-01, -8.177405154606912e-01, -8.021418172938183e-01, -8.004501881542067e-01, -8.004501881542067e-01, -7.834743612383215e-01, -6.192802125975231e-01, -6.639888310785478e-01, -7.110028517079431e-01, -6.866689673046382e-01, -6.626735323980510e-01, -8.730068457469390e-01, -2.392766001248643e-01, -3.075335702717745e-01, -4.126024944725280e-01, -3.605256617607516e-01, -3.605256617607516e-01, -5.512851464205044e-01, -3.953653486673959e-02, -5.223405402147813e-02, -4.157119188405298e-01, -1.110117267590095e-01, -8.078164046083698e-02, -1.412781539221218e-02, -3.309508985651733e-03, -4.706523252026800e-03, -7.586590001348742e-02, -5.990602906187879e-03, -5.990602906187867e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_regtm_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_regtm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.336267049883179e-08, -1.336400433569723e-08, -1.336929327183823e-08, -1.334956858022560e-08, -1.335998868111393e-08, -1.335998868111393e-08, -4.982882895605876e-06, -4.983782951302027e-06, -5.007251301671522e-06, -4.995934831348149e-06, -4.999223988337581e-06, -7.773387711804043e-06, -2.130551614045764e-03, -4.366102419207807e-03, -4.544769018261066e-03, -4.539066229737303e-03, -4.538266216648948e-03, -4.538266216648948e-03, -7.895938875780459e-01, -7.647029457815845e-01, -8.133023887398329e-04, -1.370714615237846e+00, -1.109969646209804e+00, -1.109969646209803e+00, -3.884561045625165e+03, -3.489046657383210e+03, -4.058510375344657e+01, -1.290331252356158e+04, -8.490121006598494e+03, -8.490121006598494e+03, -1.882480557294889e-06, -1.881597619270063e-06, -1.882440835800866e-06, -8.640298766470631e-06, -1.882034605121613e-06, -1.882034605121613e-06, -4.284667702803539e-05, -4.284813819385270e-05, -4.278525687402693e-05, -4.279793547780041e-05, -4.289373522117596e-05, -7.214919664056968e-05, -1.057151324457426e-02, -8.232109923888469e-03, -1.349014723691202e-02, -1.238076935790660e-02, -1.008385597590932e-02, -8.858770983134052e-03, -1.355407513454133e+00, -5.950858179039018e-01, -1.627428359606178e+00, -9.473300466079261e-05, -2.612745473182775e+00, -2.612745473182774e+00, -8.526472399876228e+02, -1.297393842798298e+04, -5.688034449167979e+04, -4.099773416061708e+00, -1.552202448884911e+03, -2.481392814733972e+04, -1.108152663964827e-02, -1.169014427870200e-02, -1.843131177266675e-02, -1.133801061988284e-02, -1.142893358409928e-02, -1.142893358409928e-02, -1.244669689398323e-02, -2.051708666722319e-02, -1.820569271858735e-02, -1.618217400807621e-02, -1.720275144522595e-02, -2.074015528882745e-02, -6.686949095633913e-03, -1.345200503209152e-01, -1.728826170095805e-01, -4.242337364231592e-02, -1.160969476464323e-01, -1.160969476464321e-01, -1.784346695288266e-02, -4.550782714038541e+01, -2.003257345956128e+01, -9.160505262882623e-02, -2.914236978472420e+00, -7.485627336910185e+00, -1.261311795849154e+03, -3.353013816444587e+05, -8.594910536180095e+04, -9.068036699888756e+00, -3.444396250710341e+04, -3.444396250710353e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_regtm_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_regtm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [7.081860225413390e-04, 7.083501724316692e-04, 7.090128239347768e-04, 7.065845304404104e-04, 7.078653822881262e-04, 7.078653822881262e-04, -7.602920098603701e-04, -7.596929024186112e-04, -7.438982068778214e-04, -7.502106604955576e-04, -7.496115336083457e-04, 2.790846077293928e-03, -1.176385206948129e-02, 1.171500259859039e-02, 1.138512783584190e-02, 1.159127162225423e-02, 1.154322576009696e-02, 1.154322576009696e-02, 3.791976468684363e-02, 3.825669468440030e-02, -1.004147581169259e-02, 3.044185921932330e-02, 3.424001025928981e-02, 3.424001025928987e-02, 8.165457637466714e-03, 8.554772644986134e-03, 1.703792471591141e-02, 5.212308383127227e-03, 6.811381720816085e-03, 6.811381720816085e-03, 2.808152484962819e-03, 2.813636287015646e-03, 2.808471775285529e-03, 1.461295577245078e-02, 2.810896092417217e-03, 2.810896092417217e-03, -2.218091155157233e-03, -2.029559375448721e-03, -2.366928588517010e-03, -2.195687491876201e-03, -2.040773327472705e-03, 4.731323353938991e-03, 1.864901157580814e-02, 2.094560032280412e-02, 1.843012412776816e-02, 1.946934984055734e-02, 1.891594234433521e-02, 2.009808084122662e-03, -2.552535680993623e-02, 2.970357564468567e-02, -2.462739023691860e-02, 5.990112308808603e-03, 3.164229945468404e-02, 3.164229945468409e-02, -3.162117205340588e-03, 4.895641573355904e-03, 9.602878995220677e-03, -2.109420141134860e-02, -6.019268141864730e-03, 7.322959766169185e-03, 3.100652881862540e-02, 2.857266570477779e-02, 5.526273717600717e-02, 3.009340972227239e-02, 2.973511700983464e-02, 2.973511700983464e-02, 3.147650269764930e-02, 2.101386803974441e-02, 2.231429392370726e-02, 2.503102006646291e-02, 2.343903639981322e-02, 7.209418439030973e-03, 1.877738600439461e-02, -3.628247137996748e-02, 2.841630206228715e-02, -1.297123208373339e-02, 2.809314657742999e-02, 2.809314657743008e-02, -5.033667691567874e-03, 1.673703360853269e-02, 1.878340213700961e-02, 2.942123019036034e-02, -2.783490331099112e-02, 2.811352984578168e-02, 7.459760385549344e-03, 2.412588530388162e-03, 5.725676661517584e-03, 2.819634225972175e-02, 8.053502980811599e-03, 8.053502980811592e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
