
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_17_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_17", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.166151195562030e+01, -2.166164020812763e+01, -2.166220173540463e+01, -2.327686199220045e+01, -2.327764553726567e+01, -2.489416978790491e+01, -3.490697004426296e+00, -3.922518919992780e+00, -3.925127386752925e+00, -3.924430727520824e+00, -3.924096629375659e+00, -3.492654147359581e+00, -5.517132209253482e-01, -6.230105678079710e-01, -6.615886161219255e-01, -6.055001890708898e-01, -5.403636090782472e-01, -6.729603534898234e-01, -1.579525538758291e-01, -1.611676021152798e-01, -6.928808451566144e-01, -1.200434813368494e-01, -1.606621079806541e-01, -1.602992597865430e-01, -5.251756300063069e-03, -5.543202397735746e-03, -3.057423771929681e-02, -3.027639060144882e-03, -4.226377250541219e-03, -4.226377250541220e-03, -6.040012373433160e+00, -6.040385182475632e+00, -6.040025425251939e+00, -6.040354957212664e+00, -5.749230637882603e+00, -5.749491110845037e+00, -2.163202371548068e+00, -2.188440661522582e+00, -2.144121727549182e+00, -2.166724724775596e+00, -1.943427536022470e+00, -2.186443939576781e+00, -6.179055531515154e-01, -7.424538707728418e-01, -6.192400229283409e-01, -6.553059700674245e-01, -6.370972181286884e-01, -6.943387864002880e-01, -8.099743968784780e-02, -1.533681893936373e-01, -7.483914226038385e-02, -2.235624586713821e+00, -9.689211416547194e-02, -9.689211416547194e-02, -2.343310418155766e-03, -2.959690048106426e-03, -2.266623844626680e-03, -4.950744680108719e-02, -2.847292932046667e-03, -2.847292932046668e-03, -6.721091410129424e-01, -6.735197898291739e-01, -6.418912869012867e-01, -6.596770180187594e-01, -6.442935372503786e-01, -6.585737678033651e-01, -6.546612701190827e-01, -5.080900115489397e-01, -5.492141893796219e-01, -6.272275228547401e-01, -6.145663552326239e-01, -5.689694322003136e-01, -7.247227815957572e-01, -2.134023797734070e-01, -2.424274711027333e-01, -3.407931409535239e-01, -3.222132806650344e-01, -2.869634119909126e-01, -5.132819156792482e-01, -2.920935967358254e-02, -3.994244338266034e-02, -3.802686774015752e-01, -6.406268553490130e-02, -6.406268553490131e-02, -7.441593143635633e-03, -7.910325983740130e-04, -1.672716293449620e-03, -5.852057720818915e-02, -2.614727864207084e-03, -2.625420193672376e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_17_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_17", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.252964046108753e+01, -3.252971192842526e+01, -3.252976220150379e+01, -3.252980033261427e+01, -3.253016615628863e+01, -3.253037501511307e+01, -3.252879196943469e+01, -2.938475667025640e+01, -3.252971276786585e+01, -2.938553820693359e+01, -2.938582441267886e+01, -2.938553820693358e+01, -4.799666705299489e+00, -4.766157141384901e+00, -4.799648534486423e+00, -4.799612384241168e+00, -4.799265541260745e+00, -4.799245781260050e+00, -4.799811204276207e+00, -4.799877683145970e+00, -4.798937891820916e+00, -4.799614462222757e+00, -4.764968788996122e+00, -4.799614462222757e+00, -7.643706896644614e-01, -7.719409080233642e-01, -7.619076134209435e-01, -9.040094163290928e-01, -8.670454763015145e-01, -8.588903932862312e-01, -8.746974808605854e-01, -7.428706555701793e-01, -7.808977861014668e-01, -6.958541498032166e-01, -9.134770439334210e-01, -8.300524020822629e-01, -1.814951247076762e-01, -2.278420573292232e-01, -1.842095465597209e-01, -2.335808266785414e-01, -9.612792108149154e-01, -8.542019683385553e-01, -1.528407448363525e-01, -1.561939908415062e-01, -2.247580444451246e-01, -1.081395787970110e-01, -2.247580444451243e-01, -1.065980223397494e-01, -6.508400123930705e-03, -6.916045338286785e-03, -7.131414784658705e-03, -7.306203369526508e-03, -3.940745944663051e-02, -4.016687416651790e-02, -3.912081303092655e-03, -3.846890833397904e-03, -5.805970635750042e-03, -3.303799256745291e-03, -5.805970635750043e-03, -3.303799256745298e-03, -7.286808313133253e+00, -7.285080824738190e+00, -7.291054773824390e+00, -7.289183433346399e+00, -7.287091791163097e+00, -7.285256167657425e+00, -7.290733548683730e+00, -7.288981277301086e+00, -7.942982727425936e+00, -7.287133137593491e+00, -7.288944634183203e+00, -7.941047602672334e+00, -2.706855306249911e+00, -2.706767710385470e+00, -2.726940258566133e+00, -2.726180794947822e+00, -2.689335303343716e+00, -2.694376428842551e+00, -2.707353142138192e+00, -2.712377182540017e+00, -2.730610471972750e+00, -2.584352825345021e+00, -2.730610471972750e+00, -2.718759531326540e+00, -8.011627439752024e-01, -8.681166493098947e-01, -8.781561760260133e-01, -8.800543594604621e-01, -7.348908105823054e-01, -7.577405893233714e-01, -7.573968717960169e-01, -7.812968074928586e-01, -8.325652223623502e-01, -8.616144545753563e-01, -8.325652223623502e-01, -7.913594451016970e-01, -1.032982819309423e-01, -1.043244777611258e-01, -1.838899437919108e-01, -2.112028625114262e-01, -9.307007152275225e-02, -9.833116941568670e-02, -2.616161579572350e+00, -2.614995537432597e+00, -1.196966170297308e-01, -1.285262064471253e-01, -1.196966170297307e-01, -1.285262064471251e-01, -3.069858875881962e-03, -3.049918370090009e-03, -3.764098755531287e-03, -3.821064705933248e-03, -2.814735572730319e-03, -2.980928514954090e-03, -6.361105121960943e-02, -6.511264544255881e-02, -2.874751529729417e-03, -3.948150181319697e-03, -2.874751529729415e-03, -3.948150181319697e-03, -8.645876391806008e-01, -8.684962030561608e-01, -8.417819049119951e-01, -8.457631912547547e-01, -8.893586492846978e-01, -8.926834670129034e-01, -8.897540496714547e-01, -8.599973105554793e-01, -8.895655061428573e-01, -8.928864353063307e-01, -8.895655061428573e-01, -8.566815362648569e-01, -8.387872609889576e-01, -8.421859374401267e-01, -6.730604225382912e-01, -7.122406454830280e-01, -7.009603589258298e-01, -7.759429135729621e-01, -7.424600972569049e-01, -7.453486957286065e-01, -7.190236240159573e-01, -7.219181178076202e-01, -7.190236240159573e-01, -8.007235755947104e-01, -9.134427851127906e-01, -1.016572707059341e+00, -2.771839982574488e-01, -2.791800582181350e-01, -2.915225834638049e-01, -3.513280088657232e-01, -4.502182816957923e-01, -4.820888622980912e-01, -4.140855822207708e-01, -4.141133839456205e-01, -4.140855822207710e-01, -3.654564700474803e-01, -6.231739060304516e-01, -6.267553050292015e-01, -3.867334807927894e-02, -3.893707595825339e-02, -5.027976508684875e-02, -5.198499230177932e-02, -4.592164637675308e-01, -4.639162550972435e-01, -7.950294408986679e-02, -8.429520165932827e-02, -7.950294408986688e-02, -8.429520165932812e-02, -9.734147928466132e-03, -1.008679174497500e-02, -1.012651691937494e-03, -1.014966182440079e-03, -2.155402426317941e-03, -2.292428928024979e-03, -7.616071285971816e-02, -7.720614608092147e-02, -2.723025427897602e-03, -3.618733737072213e-03, -2.723025427897601e-03, -3.784750215681377e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_17_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_17", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.798738219042050e-08, 0.000000000000000e+00, -3.799053489089840e-08, -3.798732531415383e-08, 0.000000000000000e+00, -3.799049292512119e-08, -3.798688364896323e-08, 0.000000000000000e+00, -3.798993206251647e-08, -3.798756112291955e-08, 0.000000000000000e+00, -4.394211956192626e-08, -3.798737259359035e-08, 0.000000000000000e+00, -4.394053419896817e-08, -4.393758972600914e-08, 0.000000000000000e+00, -4.394053419896817e-08, -3.723390242857937e-05, 0.000000000000000e+00, -2.823534237853814e-05, -3.724355223716607e-05, 0.000000000000000e+00, -3.723409345812550e-05, -3.743182510458435e-05, 0.000000000000000e+00, -3.746395117487658e-05, -3.735076806358844e-05, 0.000000000000000e+00, -3.734893640428076e-05, -3.723626149174589e-05, 0.000000000000000e+00, -3.751578144073340e-05, -2.824040167856469e-05, 0.000000000000000e+00, -3.751578144073340e-05, -7.653181805538700e-03, 0.000000000000000e+00, -7.890647201762021e-03, -7.597239985412037e-03, 0.000000000000000e+00, -1.145139764945657e-02, -1.017582624711944e-02, 0.000000000000000e+00, -1.011207706402749e-02, -1.073401261360829e-02, 0.000000000000000e+00, -7.395660322458431e-03, -7.881711021423658e-03, 0.000000000000000e+00, -6.299855972160430e-03, -1.143559443722590e-02, 0.000000000000000e+00, -9.792489561631670e-03, -7.102663951046957e-01, 0.000000000000000e+00, -1.375623664481125e+00, -7.386617769392034e-01, 0.000000000000000e+00, -1.413043066001948e+00, -2.437916946738078e-03, 0.000000000000000e+00, -1.758828832565800e-03, -8.140298359886047e-01, 0.000000000000000e+00, -9.535733381110570e-01, -1.048724418285692e+00, 0.000000000000000e+00, -8.648180363518753e-01, -1.048724418285691e+00, 0.000000000000000e+00, 2.387494255477398e-01, -2.263859309836126e+02, 0.000000000000000e+00, -2.010254460905092e+02, 2.724163620405093e+02, 0.000000000000000e+00, -1.843909435690587e+02, 5.532700813184459e+00, 0.000000000000000e+00, -4.829566102777506e+00, -5.340546525265994e+02, 0.000000000000000e+00, -5.551027419397966e+02, -2.769195910288835e+02, 0.000000000000000e+00, -1.116141059681056e+03, -2.769195910288835e+02, 0.000000000000000e+00, -1.116141059681056e+03, -1.319056271380545e-05, 0.000000000000000e+00, -1.320328547648853e-05, -1.319290206379161e-05, 0.000000000000000e+00, -1.320555323468763e-05, -1.319081585326762e-05, 0.000000000000000e+00, -1.320345253843522e-05, -1.319281606978687e-05, 0.000000000000000e+00, -1.320550548580934e-05, -1.185946648238457e-05, 0.000000000000000e+00, -1.320442026430828e-05, -1.319168293299144e-05, 0.000000000000000e+00, -1.187081443962933e-05, -3.041996851185288e-04, 0.000000000000000e+00, -3.056000819625987e-04, -3.082784911295437e-04, 0.000000000000000e+00, -3.095267227757159e-04, -2.996762703617299e-04, 0.000000000000000e+00, -3.023662095984847e-04, -3.037249385653267e-04, 0.000000000000000e+00, -3.063334959337689e-04, -3.096986562000925e-04, 0.000000000000000e+00, -2.290808917075722e-04, -3.096986562000925e-04, 0.000000000000000e+00, -3.082968425524393e-04, -6.306696855892878e-02, 0.000000000000000e+00, -5.186896015921351e-02, -5.592362193129403e-02, 0.000000000000000e+00, -5.625172025604212e-02, -6.969611904147968e-02, 0.000000000000000e+00, -6.977131720909910e-02, -7.724144820255112e-02, 0.000000000000000e+00, -7.259791507395354e-02, -5.840573995861638e-02, 0.000000000000000e+00, -5.440442612769128e-02, -5.840573995861641e-02, 0.000000000000000e+00, -6.734540618860078e-02, -1.056206193093072e+00, 0.000000000000000e+00, -1.042269583275835e+00, -2.614267833165176e-01, 0.000000000000000e+00, -5.873473154830025e-01, -1.191559576039913e+00, 0.000000000000000e+00, -1.169615164185209e+00, -5.977122403498847e-04, 0.000000000000000e+00, -5.989670663753727e-04, -1.161530185705546e+00, 0.000000000000000e+00, -1.477842430172875e+00, -1.161530185705546e+00, 0.000000000000000e+00, -1.477842430172876e+00, 1.057184077092635e+03, 0.000000000000000e+00, -7.182051022686055e+02, -5.617396394290899e+02, 0.000000000000000e+00, -5.117605470970448e+02, -2.698051505091037e+03, 0.000000000000000e+00, -2.521456228706591e+03, -2.308407260172291e+00, 0.000000000000000e+00, 1.691382953064656e+00, -1.121249144226657e+03, 0.000000000000000e+00, -1.062128015392299e+03, -1.121249144226657e+03, 0.000000000000000e+00, -1.062128015392299e+03, -8.619051398981850e-02, 0.000000000000000e+00, -8.490859834935785e-02, -8.658159234554236e-02, 0.000000000000000e+00, -8.531963227547626e-02, -8.219194698542008e-02, 0.000000000000000e+00, -8.107838207094870e-02, -8.279828398365069e-02, 0.000000000000000e+00, -8.511460498728661e-02, -8.249796270536089e-02, 0.000000000000000e+00, -8.136708479611739e-02, -8.249796270536089e-02, 0.000000000000000e+00, -8.517802424975518e-02, -9.588420571113195e-02, 0.000000000000000e+00, -9.467858765958172e-02, -1.145036369710228e-01, 0.000000000000000e+00, -8.905609305297707e-02, -1.156538805887697e-01, 0.000000000000000e+00, -9.424678299378962e-02, -1.113199871861901e-01, 0.000000000000000e+00, -1.099376411496241e-01, -1.142123808468598e-01, 0.000000000000000e+00, -1.128971010414455e-01, -1.142123808468598e-01, 0.000000000000000e+00, -9.558380530622380e-02, -4.424570243412951e-02, 0.000000000000000e+00, -3.818095258807223e-02, -4.599054281288303e-01, 0.000000000000000e+00, -4.581323393200106e-01, -2.586832843979161e-01, 0.000000000000000e+00, -3.950723849531914e-01, -2.235940435209221e-01, 0.000000000000000e+00, -2.969498958025099e-01, -3.739894371487552e-01, 0.000000000000000e+00, -3.778533184636018e-01, -3.739894371487553e-01, 0.000000000000000e+00, -2.693432609386790e-01, -1.333522363311250e-01, 0.000000000000000e+00, -1.346265431338056e-01, 5.902315814312598e+00, 0.000000000000000e+00, 5.761794886386810e+00, -3.008084519922885e+00, 0.000000000000000e+00, -2.912328016033825e+00, -4.385387224678189e-01, 0.000000000000000e+00, -4.779261679677617e-01, -1.981014522708635e+00, 0.000000000000000e+00, -2.172641281487062e+00, -1.981014522708636e+00, 0.000000000000000e+00, -2.172641281487063e+00, 9.962130559045997e+01, 0.000000000000000e+00, 9.206692805755026e+01, -8.309605561149636e+03, 0.000000000000000e+00, -8.253548448657231e+03, 4.372436403409829e+03, 0.000000000000000e+00, 3.978144288563816e+03, 1.025927017274161e+00, 0.000000000000000e+00, 9.609651659137116e-01, -2.008616218452092e+03, 0.000000000000000e+00, -1.286623605820245e+03, -2.008616218452096e+03, 0.000000000000000e+00, 1.676653811075491e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_17_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_17", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.138651411430078e-03, 2.138825362085232e-03, 2.138669631835726e-03, 2.138838559777106e-03, 2.138717128663540e-03, 2.138909592101656e-03, 2.138513276319259e-03, 3.204977495952791e-03, 2.138663472529086e-03, 3.204858296147667e-03, 3.204840635084063e-03, 3.204858296147667e-03, 1.664651708890234e-02, 5.169283801747859e-03, 1.664951889127285e-02, 1.664622200833058e-02, 1.670773874796573e-02, 1.671794136336483e-02, 1.668520916729288e-02, 1.668505467307566e-02, 1.664249096859499e-02, 1.673700556214116e-02, 5.166183298082157e-03, 1.673700556214116e-02, 2.889582165189904e-03, 3.327795054035303e-03, 2.769195510438236e-03, 4.179134169931443e-02, 3.454025805882913e-02, 3.362795305611355e-02, 3.681244245486055e-02, 2.069216802825574e-03, 3.606441600345890e-03, 2.927433686530763e-04, 4.272841950732582e-02, 3.026745543134380e-02, -3.743571893676724e-03, 9.125552443346631e-02, -3.312705413631753e-03, 9.896561556832656e-02, 1.317297743206470e-02, -6.138062443091606e-04, 1.973624321045309e-02, 2.450185277934723e-02, 7.009021512544575e-02, 7.308805687707490e-03, 7.009021512544564e-02, -1.123390225608390e-03, 3.587920116230320e-04, 3.823925976276124e-04, -1.016996715629282e-06, 4.136555021679490e-04, -8.227661097034716e-05, 1.883023504928100e-03, 1.835591756740942e-04, 1.814103727644495e-04, 3.114247757371266e-04, 2.310701701924535e-04, 3.114247757371266e-04, 2.310701701924584e-04, 1.259432756552353e-02, 1.259726512017724e-02, 1.257915624380861e-02, 1.258259969021004e-02, 1.259329240902637e-02, 1.259662209755655e-02, 1.258028291223773e-02, 1.258330753851341e-02, 9.600792104133570e-03, 1.258993080535315e-02, 1.258671079663861e-02, 9.602986059541718e-03, 2.555387117496361e-02, 2.564347398233526e-02, 2.622199913972456e-02, 2.628851436084552e-02, 2.491199170876948e-02, 2.518648667380672e-02, 2.553276855634150e-02, 2.580334274002508e-02, 2.638863611424998e-02, 6.507356392869750e-03, 2.638863611424998e-02, 2.605929532023453e-02, 1.164516570232012e-01, 5.684100527810994e-02, 1.069902947905019e-01, 1.064931452796137e-01, 1.109490377043848e-01, 1.165907643596139e-01, 1.222893730542827e-01, 1.206176391503882e-01, 1.138168747188019e-01, 5.823714324369764e-02, 1.138168747188019e-01, 1.184375183980005e-01, 7.785274968130151e-03, 7.921635418570440e-03, -4.160239936621111e-03, 3.573302188472559e-02, 6.344373509984682e-03, 7.408552090408486e-03, 3.621214943730208e-02, 3.622955582326395e-02, 1.356026748223904e-02, 2.134443815419860e-02, 1.356026748223901e-02, 2.134443815419852e-02, -4.157612052707737e-08, 1.169347165260451e-04, 1.719721827124927e-04, 1.638898780438156e-04, 3.454820646317225e-04, 3.835594914626853e-04, 3.757691078021594e-03, -4.535748936149247e-04, 1.528849475057333e-04, 3.755012749456563e-04, 1.528849475057324e-04, 3.755012749456511e-04, 9.801621041882957e-02, 9.746665793594099e-02, 1.042582435327543e-01, 1.036276824330258e-01, 9.104649257014777e-02, 9.075925770622525e-02, 9.133739103106367e-02, 9.973419069992458e-02, 9.120556285205539e-02, 9.090556204428570e-02, 9.120556285205539e-02, 1.006309056941127e-01, 1.015635664643894e-01, 1.010263731378708e-01, 1.328206165015442e-01, 5.444638512066832e-02, 1.351096170106584e-01, 7.314668870927034e-02, 1.261715219223101e-01, 1.256128839328493e-01, 1.319850232934079e-01, 1.314186550917447e-01, 1.319850232934079e-01, 8.077189587634021e-02, 1.038308461192777e-01, 6.583674440731323e-02, 5.753847912165465e-02, 5.836013503676978e-02, 2.918551022656412e-03, 8.848616755523810e-02, 3.309942380917510e-02, 1.414822633267039e-01, 1.221626713649030e-01, 1.231878588026405e-01, 1.221626713649030e-01, 1.774311742949464e-02, 1.298452434809437e-01, 1.320795606606181e-01, -8.184986614829561e-05, -8.186858121624079e-05, 2.340037046309531e-03, 2.515324975605160e-03, 1.723335272257003e-01, 1.861019497479880e-01, 6.537574195853051e-03, 8.671015006719390e-03, 6.537574195853017e-03, 8.671015006719299e-03, -1.204035158615602e-06, -1.320405700862292e-06, 4.950794369778167e-05, 4.951190859407595e-05, -5.982221421361783e-08, -7.625137781558157e-08, -9.311050934926890e-04, -1.083128855760186e-03, 2.328022161476969e-04, 3.501824924419447e-04, 2.328022161476982e-04, -4.544187701070218e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
