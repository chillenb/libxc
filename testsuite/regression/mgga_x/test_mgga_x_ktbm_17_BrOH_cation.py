
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_17_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_17", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.467217560212247e+01, -2.467224797015530e+01, -2.467270444053045e+01, -2.467163156047622e+01, -2.467217449686027e+01, -2.467217449686027e+01, -3.409664865232108e+00, -3.409796836170043e+00, -3.413582696828435e+00, -3.414714316570540e+00, -3.413261404707387e+00, -3.413261404707387e+00, -5.953708354449635e-01, -5.947220838910456e-01, -5.801535873210724e-01, -5.907152476457478e-01, -5.891265728316855e-01, -5.891265728316855e-01, -1.678851265650683e-01, -1.709635062486399e-01, -6.589246541724005e-01, -1.172211166821461e-01, -1.571182857487239e-01, -1.571182857487239e-01, -5.249537525556710e-03, -5.526394426266984e-03, -3.041155835842339e-02, -3.012582904460080e-03, -4.216074958811602e-03, -4.216074958811602e-03, -6.036047537034507e+00, -6.036465959040104e+00, -6.036143010190912e+00, -6.036509266354741e+00, -6.036221375925386e+00, -6.036221375925386e+00, -2.093315794822628e+00, -2.126774821157119e+00, -2.084240465536473e+00, -2.114719070039508e+00, -2.116169087569840e+00, -2.116169087569840e+00, -6.292853932366449e-01, -6.784459934577541e-01, -5.488357638861110e-01, -5.602878705733645e-01, -6.444653547622491e-01, -6.444653547622492e-01, -7.998521341438461e-02, -1.607774619794103e-01, -7.392559108019739e-02, -1.920504988185855e+00, -9.573254367161545e-02, -9.573254367161545e-02, -2.310702019507047e-03, -2.933291440711787e-03, -2.254014716407034e-03, -4.936559601474982e-02, -2.836792117152070e-03, -2.836792117152071e-03, -6.634920802461881e-01, -6.652625983685234e-01, -6.647621130056743e-01, -6.642407442090748e-01, -6.645088891071647e-01, -6.645088891071647e-01, -6.381557848169211e-01, -5.596542501122215e-01, -5.905627917157865e-01, -6.140434868066003e-01, -6.023401229034995e-01, -6.023401229034995e-01, -6.982505312498861e-01, -2.112358390713913e-01, -2.605751994533554e-01, -3.518288268933464e-01, -3.074092123039440e-01, -3.074092123039440e-01, -4.849898888687718e-01, -2.913264689595490e-02, -3.966520320075306e-02, -3.487520871082714e-01, -6.343390467947924e-02, -6.343390467947925e-02, -7.334812760308359e-03, -7.826426648838241e-04, -1.658695135950243e-03, -5.961138144655626e-02, -2.604533030285410e-03, -2.604533030285408e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_17_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_17", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.963734771679328e+01, -2.963668748789099e+01, -2.963747475571407e+01, -2.963677983903194e+01, -2.963776899064408e+01, -2.963723295360994e+01, -2.963633112180330e+01, -2.963540093071415e+01, -2.963742675479872e+01, -2.963605110197279e+01, -2.963742675479872e+01, -2.963605110197279e+01, -4.830787925561363e+00, -4.830531741394539e+00, -4.830981634812755e+00, -4.830649644043470e+00, -4.834660192153089e+00, -4.835355460729523e+00, -4.833921260605776e+00, -4.833953116319770e+00, -4.829586500065465e+00, -4.837333561977792e+00, -4.829586500065465e+00, -4.837333561977792e+00, -8.174590549244218e-01, -8.233034633718296e-01, -8.155952873770711e-01, -8.222920842101199e-01, -7.899043324237102e-01, -7.852843678046110e-01, -8.032482486613948e-01, -8.071646072352816e-01, -8.290851143815356e-01, -7.754261663393154e-01, -8.290851143815356e-01, -7.754261663393154e-01, -2.124039215886266e-01, -2.267334382560574e-01, -2.155527865060809e-01, -2.320763051684784e-01, -8.484106758466260e-01, -8.873694236634998e-01, -1.508932218818740e-01, -1.547013715308990e-01, -2.214763597551574e-01, -1.083348530187734e-01, -2.214763597551573e-01, -1.083348530187734e-01, -6.513973344102455e-03, -6.918587618124662e-03, -6.829754738142718e-03, -7.312036927768399e-03, -3.828265373092977e-02, -4.040040148074434e-02, -3.943298780557389e-03, -3.873327345311288e-03, -5.820779007248355e-03, -3.349297439127387e-03, -5.820779007248352e-03, -3.349297439127391e-03, -7.291925653642881e+00, -7.289904170137814e+00, -7.296120574222217e+00, -7.293956696162871e+00, -7.292089349613372e+00, -7.289993531467885e+00, -7.295691254001389e+00, -7.293677425494558e+00, -7.294124139079901e+00, -7.291946099487975e+00, -7.294124139079901e+00, -7.291946099487975e+00, -2.699886429192436e+00, -2.700437980343349e+00, -2.724378288650706e+00, -2.723969529129167e+00, -2.681080592252262e+00, -2.686974438225663e+00, -2.702762062382153e+00, -2.708645879177689e+00, -2.728060322657661e+00, -2.714961733671686e+00, -2.728060322657661e+00, -2.714961733671686e+00, -8.357656304860485e-01, -8.331982748853179e-01, -9.461560033498680e-01, -9.467840373229434e-01, -7.435233345984656e-01, -7.823817638901568e-01, -8.092121708898151e-01, -8.424480305862402e-01, -8.703493300602936e-01, -8.291631578209449e-01, -8.703493300602939e-01, -8.291631578209447e-01, -1.034620730334787e-01, -1.044809115079136e-01, -2.086406705533481e-01, -2.096870640068535e-01, -9.339869921084668e-02, -9.853924744199646e-02, -2.846562169442052e+00, -2.845426468343385e+00, -1.194481661146789e-01, -1.279746209617551e-01, -1.194481661146788e-01, -1.279746209617551e-01, -3.001364239260669e-03, -3.115885948562463e-03, -3.818041711857300e-03, -3.879940096455502e-03, -2.837827657757746e-03, -3.006510028543736e-03, -6.411328312741732e-02, -6.437050326899106e-02, -2.953834537167640e-03, -3.955443744807387e-03, -2.953834537167642e-03, -3.955443744807384e-03, -8.761017081508031e-01, -8.797493532845017e-01, -8.526891914974768e-01, -8.564445245925529e-01, -8.605697660638501e-01, -8.643449006878717e-01, -8.674312623123164e-01, -8.710768448338010e-01, -8.639724335575398e-01, -8.676808985021450e-01, -8.639724335575398e-01, -8.676808985021450e-01, -8.606155300552337e-01, -8.633598757409989e-01, -6.765083244687036e-01, -6.792571745870617e-01, -7.097284792415688e-01, -7.129720566989185e-01, -7.576234122356907e-01, -7.605148741186860e-01, -7.317480236436380e-01, -7.343404934247716e-01, -7.317480236436378e-01, -7.343404934247718e-01, -9.905855152989635e-01, -9.929640779662345e-01, -2.754040095810230e-01, -2.773182372454792e-01, -3.413293829036179e-01, -3.460625565363877e-01, -4.739089903544431e-01, -4.765182519364386e-01, -4.071343595189702e-01, -4.072097153770479e-01, -4.071343595189701e-01, -4.072097153770479e-01, -6.281534234829396e-01, -6.330829671046684e-01, -3.742012810975507e-02, -3.770010086101053e-02, -5.063300906305192e-02, -5.232963957950303e-02, -4.620129514633914e-01, -4.729693551613008e-01, -7.976628562781059e-02, -8.445159632159099e-02, -7.976628562781049e-02, -8.445159632159105e-02, -9.449624753153432e-03, -9.799968704049292e-03, -1.045130657612093e-03, -1.052155418924725e-03, -2.069081563530709e-03, -2.200983012027976e-03, -7.638071367798552e-02, -7.761911369930247e-02, -2.789073581114350e-03, -3.625586826038494e-03, -2.789073581114346e-03, -3.625586826038496e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_17_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_17", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.351242353667612e-08, 0.000000000000000e+00, -4.351640648230557e-08, -4.351220413267374e-08, 0.000000000000000e+00, -4.351624637282573e-08, -4.351146590374591e-08, 0.000000000000000e+00, -4.351519775772356e-08, -4.351398107019134e-08, 0.000000000000000e+00, -4.351839473578900e-08, -4.351230882779968e-08, 0.000000000000000e+00, -4.351708754861955e-08, -4.351230882779968e-08, 0.000000000000000e+00, -4.351708754861955e-08, -3.174073476866212e-05, 0.000000000000000e+00, -3.172893903953871e-05, -3.175021575326064e-05, 0.000000000000000e+00, -3.173468348757361e-05, -3.192901355038694e-05, 0.000000000000000e+00, -3.195815807538727e-05, -3.187845658378683e-05, 0.000000000000000e+00, -3.187143146415054e-05, -3.174052254711995e-05, 0.000000000000000e+00, -3.203076215164154e-05, -3.174052254711995e-05, 0.000000000000000e+00, -3.203076215164154e-05, -8.753242578878497e-03, 0.000000000000000e+00, -8.972431662224712e-03, -8.707466754623505e-03, 0.000000000000000e+00, -8.940758513890047e-03, -7.960050137997131e-03, 0.000000000000000e+00, -7.964032758697425e-03, -8.565706227420828e-03, 0.000000000000000e+00, -8.770447794866328e-03, -8.877011342763912e-03, 0.000000000000000e+00, -8.070916697457197e-03, -8.877011342763912e-03, 0.000000000000000e+00, -8.070916697457197e-03, -1.173496859066105e+00, 0.000000000000000e+00, -1.353161348712910e+00, -1.187961725366401e+00, 0.000000000000000e+00, -1.383646396306184e+00, -1.513312604997799e-03, 0.000000000000000e+00, -1.945790994360370e-03, -6.495158155737679e-01, 0.000000000000000e+00, -8.411791940040138e-01, -9.925015618653951e-01, 0.000000000000000e+00, -4.883984547186181e-01, -9.925015618653945e-01, 0.000000000000000e+00, -4.883984547186178e-01, -2.206451981709641e+02, 0.000000000000000e+00, -1.988429094673920e+02, -2.012479547656647e+02, 0.000000000000000e+00, -1.800315400594632e+02, -4.041953926435795e+00, 0.000000000000000e+00, -3.931962491227134e+00, -4.025060842171280e+02, 0.000000000000000e+00, -4.381564375900144e+02, -2.558058941900835e+02, 0.000000000000000e+00, -6.230706789529979e+02, -2.558058941900827e+02, 0.000000000000000e+00, -6.230706789529972e+02, -1.318093486339835e-05, 0.000000000000000e+00, -1.319420017315401e-05, -1.318338334316274e-05, 0.000000000000000e+00, -1.319657335356259e-05, -1.318141423945329e-05, 0.000000000000000e+00, -1.319452971217223e-05, -1.318349963494303e-05, 0.000000000000000e+00, -1.319667019141178e-05, -1.318194434795483e-05, 0.000000000000000e+00, -1.319536012239660e-05, -1.318194434795483e-05, 0.000000000000000e+00, -1.319536012239660e-05, -2.920061880657467e-04, 0.000000000000000e+00, -2.937194141539540e-04, -2.976175210188962e-04, 0.000000000000000e+00, -2.991264922770008e-04, -2.894384567653753e-04, 0.000000000000000e+00, -2.918357157277023e-04, -2.948871017088190e-04, 0.000000000000000e+00, -2.972585565733931e-04, -2.969823583839925e-04, 0.000000000000000e+00, -2.970101767264583e-04, -2.969823583839925e-04, 0.000000000000000e+00, -2.970101767264583e-04, -5.780092514815238e-02, 0.000000000000000e+00, -5.917870086873026e-02, -5.073888886638847e-02, 0.000000000000000e+00, -5.122279311357161e-02, -6.004987031593156e-02, 0.000000000000000e+00, -6.167148355406459e-02, -6.458135855652408e-02, 0.000000000000000e+00, -6.209501430467465e-02, -5.437564789740365e-02, 0.000000000000000e+00, -6.141991046087383e-02, -5.437564789740369e-02, 0.000000000000000e+00, -6.141991046087383e-02, -8.575331740439412e-01, 0.000000000000000e+00, -8.307989747352273e-01, -5.687021972794628e-01, 0.000000000000000e+00, -5.607612390410915e-01, -9.054147730939891e-01, 0.000000000000000e+00, -9.410215954582347e-01, -5.090760460814313e-04, 0.000000000000000e+00, -5.101716572987771e-04, -1.017630242599766e+00, 0.000000000000000e+00, -1.348905833744888e+00, -1.017630242599766e+00, 0.000000000000000e+00, -1.348905833744888e+00, -1.776594614707751e+02, 0.000000000000000e+00, -1.890673949927091e+02, -3.025022353343921e+02, 0.000000000000000e+00, -2.558656903291878e+02, -2.013734152740079e+03, 0.000000000000000e+00, -1.850820255144969e+03, -1.592767231440567e+00, 0.000000000000000e+00, -1.984965533751143e+00, -1.201904985457177e+01, 0.000000000000000e+00, -1.003715411400953e+03, -1.201904985457385e+01, 0.000000000000000e+00, -1.003715411400954e+03, -8.499079956102884e-02, 0.000000000000000e+00, -8.375812037901734e-02, -8.542836635271252e-02, 0.000000000000000e+00, -8.421197341243428e-02, -8.533151387736301e-02, 0.000000000000000e+00, -8.410726188871888e-02, -8.520692413545597e-02, 0.000000000000000e+00, -8.397754762479614e-02, -8.527389391995333e-02, 0.000000000000000e+00, -8.404701651684036e-02, -8.527389391995333e-02, 0.000000000000000e+00, -8.404701651684036e-02, -9.325945746776849e-02, 0.000000000000000e+00, -9.217436544281445e-02, -1.129855784084062e-01, 0.000000000000000e+00, -1.120328246338855e-01, -1.135440643654372e-01, 0.000000000000000e+00, -1.123685097979971e-01, -1.087917046791255e-01, 0.000000000000000e+00, -1.074558710606605e-01, -1.117055793009980e-01, 0.000000000000000e+00, -1.105045437574629e-01, -1.117055793009979e-01, 0.000000000000000e+00, -1.105045437574629e-01, -3.925815223072857e-02, 0.000000000000000e+00, -3.991519290628959e-02, -4.488359388117890e-01, 0.000000000000000e+00, -4.468146066446147e-01, -3.733954366141158e-01, 0.000000000000000e+00, -3.772547312645131e-01, -2.726749229910878e-01, 0.000000000000000e+00, -2.671035760922426e-01, -3.505583581347558e-01, 0.000000000000000e+00, -3.540866024681622e-01, -3.505583581347560e-01, 0.000000000000000e+00, -3.540866024681625e-01, -1.245713980592485e-01, 0.000000000000000e+00, -1.264593657018196e-01, -5.003817633712885e+00, 0.000000000000000e+00, -4.780485237274206e+00, -2.298949656770874e+00, 0.000000000000000e+00, -2.258839490050307e+00, -3.905573054030032e-01, 0.000000000000000e+00, -4.398333171066950e-01, -1.615270583821723e+00, 0.000000000000000e+00, -1.816997339546939e+00, -1.615270583821724e+00, 0.000000000000000e+00, -1.816997339546939e+00, -3.966476250825733e+01, 0.000000000000000e+00, -3.463438220500543e+01, 1.758757544829539e+03, 0.000000000000000e+00, 3.887310404638213e+03, -2.926076999303559e+03, 0.000000000000000e+00, -2.648087167318043e+03, -1.947270835360353e+00, 0.000000000000000e+00, -2.266464288176099e+00, -3.098727785483098e+02, 0.000000000000000e+00, -1.214072187269639e+03, -3.098727785483106e+02, 0.000000000000000e+00, -1.214072187269642e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_17_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_17", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_17_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_17", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [3.127508892242298e-03, 3.127729666169937e-03, 3.127492671041654e-03, 3.127717851939349e-03, 3.127478005814275e-03, 3.127686338817013e-03, 3.127662363608440e-03, 3.127921190522030e-03, 3.127498170909132e-03, 3.127854565776700e-03, 3.127498170909132e-03, 3.127854565776700e-03, 9.597427822898522e-03, 9.587608721429974e-03, 9.601065032176375e-03, 9.589305375590509e-03, 9.663924099693900e-03, 9.673121421662259e-03, 9.672286768578866e-03, 9.665269405031591e-03, 9.591587313112999e-03, 9.722322645114589e-03, 9.591587313112999e-03, 9.722322645114589e-03, 1.417711487926528e-02, 1.461047670869570e-02, 1.409204258826399e-02, 1.452675489558556e-02, 1.256151224910521e-02, 1.281017188425017e-02, 1.488227277119878e-02, 1.536871888815361e-02, 1.424599789128776e-02, 1.489356268938334e-02, 1.424599789128776e-02, 1.489356268938334e-02, 6.297811539909047e-02, 8.691779577227278e-02, 6.523817375988857e-02, 9.290784200312681e-02, 1.037202360663878e-03, 1.982118737395600e-03, 1.192815557293921e-02, 1.839143353108382e-02, 5.961981648011529e-02, 2.707690828220314e-03, 5.961981648011531e-02, 2.707690828220349e-03, 3.454777185714767e-04, 3.762877690062464e-04, 3.597674448210480e-04, 3.993339221605737e-04, 1.184677435784976e-03, 1.390448440786543e-03, 1.222178206426644e-04, 1.289058890523178e-04, 2.772629317559281e-04, 1.021394672437284e-04, 2.772629317559238e-04, 1.021394672437333e-04, 1.257243623502819e-02, 1.257662251600256e-02, 1.255756380390204e-02, 1.256224286634830e-02, 1.257191904404510e-02, 1.257635076587836e-02, 1.255914578035139e-02, 1.256327637221213e-02, 1.256459369069812e-02, 1.256936872350638e-02, 1.256459369069812e-02, 1.256936872350638e-02, 2.251500151825753e-02, 2.268699755213649e-02, 2.354373859312203e-02, 2.368045268455967e-02, 2.237577345595777e-02, 2.257674591720167e-02, 2.332694602802970e-02, 2.353781807278506e-02, 2.319355448794021e-02, 2.323799811418082e-02, 2.319355448794021e-02, 2.323799811418082e-02, 9.032802992679238e-02, 9.185103972409746e-02, 8.263083963596951e-02, 8.322941555428988e-02, 6.708248098868212e-02, 7.895326388187648e-02, 6.842166320928746e-02, 7.464486658217108e-02, 9.324573945640303e-02, 9.060640859708718e-02, 9.324573945640302e-02, 9.060640859708712e-02, 5.425799938308652e-03, 5.339378327848488e-03, 3.182740892582161e-02, 3.174252423728068e-02, 4.018130177956767e-03, 5.108172593895110e-03, 2.224532827881278e-02, 2.226179087223882e-02, 1.050508666996903e-02, 1.759385035228287e-02, 1.050508666996904e-02, 1.759385035228285e-02, 1.639072504415165e-05, 2.018789528329820e-05, 7.248037396109913e-05, 6.266285874328903e-05, 2.269050024347917e-04, 2.461104803644574e-04, 2.136608439660213e-03, 2.940157056464966e-03, 8.961004004751429e-07, 3.455808687191218e-04, 8.961004004760798e-07, 3.455808687191202e-04, 9.512887246815467e-02, 9.467624948711278e-02, 1.011653302547386e-01, 1.006369078919711e-01, 9.910469550602462e-02, 9.858758859366132e-02, 9.733295248995387e-02, 9.686355440865356e-02, 9.822323529485524e-02, 9.773052693942613e-02, 9.822323529485524e-02, 9.773052693942613e-02, 9.564618487072321e-02, 9.534886420829350e-02, 1.279152519064928e-01, 1.279568373094099e-01, 1.286111100901328e-01, 1.282383715130193e-01, 1.191197050547296e-01, 1.186424447425388e-01, 1.245866367645765e-01, 1.243166520377701e-01, 1.245866367645764e-01, 1.243166520377701e-01, 7.432893314520028e-02, 7.567931846251903e-02, 5.364724729757545e-02, 5.429764273028644e-02, 7.350282202825735e-02, 7.648970119234900e-02, 1.002760489192630e-01, 9.936648307955834e-02, 9.894236112743425e-02, 9.968630571288427e-02, 9.894236112743439e-02, 9.968630571288432e-02, 1.052576826324136e-01, 1.091738166898652e-01, 1.483140508058983e-03, 1.431409689258486e-03, 1.570430390305821e-03, 1.722230961244629e-03, 1.179590442305196e-01, 1.443429527097715e-01, 4.675408267849588e-03, 6.386326790812884e-03, 4.675408267849559e-03, 6.386326790812903e-03, 1.420840328534612e-04, 1.356863879986859e-04, -4.650907604731914e-06, -7.760038724965692e-06, 1.382053606807520e-04, 1.501245546839081e-04, 5.055950247784502e-03, 6.621032428689031e-03, 2.178297900942257e-05, 3.215871295704948e-04, 2.178297900941814e-05, 3.215871295704964e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
