
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_rppscan_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rppscan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.172613007978637e+01, -2.172624992413132e+01, -2.172677756658494e+01, -2.248349150954069e+01, -2.248425072275117e+01, -2.324268142333106e+01, -3.407540384302722e+00, -3.766105205887187e+00, -3.766585173402737e+00, -3.766732617647796e+00, -3.766325669671105e+00, -3.407943365585970e+00, -5.319722407410117e-01, -6.257312303661740e-01, -6.986034280212388e-01, -6.108122104288647e-01, -5.177469819283755e-01, -7.053259413460424e-01, -1.604995007439950e-01, -1.635108240283742e-01, -7.066367412286230e-01, -1.361525816044937e-01, -1.759190536795791e-01, -1.726334783394200e-01, -3.275295249624566e-03, -4.022631866501270e-03, -2.806216493984614e-02, -1.499323900345496e-03, -2.454868368297461e-03, -2.454868368297462e-03, -5.669020401279267e+00, -5.670114039027997e+00, -5.669075296435043e+00, -5.670040670559274e+00, -5.553735391963057e+00, -5.553835032761107e+00, -2.115662312237330e+00, -2.131831046408172e+00, -2.103799081065715e+00, -2.118119877819924e+00, -1.912031606627248e+00, -2.130358572801335e+00, -5.967790743443817e-01, -6.936735914393457e-01, -5.889134131261431e-01, -6.133495613459321e-01, -6.121764061856774e-01, -6.486930980092167e-01, -9.062583806764841e-02, -1.564804402649794e-01, -8.325846759329422e-02, -2.086482507408975e+00, -1.098714301826628e-01, -1.098714301826628e-01, -1.447867472819402e-03, -1.435765374143070e-03, -1.212401502708698e-03, -4.723346532786867e-02, -1.545273379036277e-03, -1.545273379036270e-03, -6.423270168158682e-01, -6.385505838162961e-01, -6.297823095033515e-01, -6.368713176180762e-01, -6.312994300731196e-01, -6.358426942855047e-01, -6.249060974897975e-01, -4.919502468082798e-01, -5.304977061645119e-01, -5.862425118353438e-01, -5.730859212015429e-01, -5.496114412042834e-01, -6.999126479812849e-01, -2.330515659552025e-01, -2.446041727626343e-01, -3.365092947217097e-01, -3.257144539533124e-01, -2.867273734614657e-01, -4.911117199801327e-01, -2.441565437625136e-02, -4.088116920782862e-02, -3.631761142377015e-01, -7.113983171293523e-02, -7.113983171293523e-02, -6.197070081141992e-03, -2.266204238705578e-04, -1.392664637471702e-03, -4.972882070243227e-02, -1.401435200780603e-03, -1.965154627881092e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_rppscan_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rppscan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.215422986078698e+01, -3.215387386808984e+01, -3.215428757176635e+01, -3.215391585000872e+01, -3.215451001014741e+01, -3.215422399508745e+01, -3.215385420206935e+01, -3.018263359797085e+01, -3.215426117862647e+01, -3.018334663168684e+01, -3.018367642106179e+01, -3.018334663168683e+01, -4.708621281633143e+00, -4.724852913371450e+00, -4.708732338477790e+00, -4.708546794672352e+00, -4.710865572835634e+00, -4.711295974621106e+00, -4.710487992212000e+00, -4.710556617921821e+00, -4.707619197097327e+00, -4.712563880190730e+00, -4.723562810999268e+00, -4.712563880190730e+00, -8.050659295721520e-01, -8.166221648900879e-01, -8.014519463400923e-01, -8.446036616744143e-01, -8.026802208333054e-01, -7.938647326750816e-01, -8.122171263917447e-01, -7.754394986058900e-01, -8.283842007214239e-01, -7.144784445515269e-01, -8.544804591048991e-01, -7.620271752903223e-01, -1.834301519156096e-01, -2.068202561406866e-01, -1.866893177260601e-01, -2.134467563556841e-01, -8.330289548720700e-01, -8.678840605150825e-01, -8.440403040792514e-02, -9.872012560611677e-02, -1.994967396639942e-01, 2.827486676372357e-02, -1.994967396639941e-01, -9.390807754901696e-02, 1.545186439183142e-01, 1.638986914355414e-01, -5.939814650503290e-03, 1.722847198633831e-01, -3.310693583592712e-02, 2.326615712101757e-01, 8.534280986121784e-02, 8.360792064475281e-02, 1.372890023854084e-01, 7.263693856061121e-02, 1.372890023854084e-01, 7.263693856061097e-02, -7.414424287560121e+00, -7.412654745427587e+00, -7.416847847122238e+00, -7.414996097586457e+00, -7.414581076541623e+00, -7.412751143916971e+00, -7.416659884518674e+00, -7.414877426661654e+00, -7.729172284780676e+00, -7.413827996650378e+00, -7.415648949968878e+00, -7.727310059733323e+00, -2.609795166692391e+00, -2.610563466466967e+00, -2.637794206662830e+00, -2.637680678664462e+00, -2.585517990853269e+00, -2.593250354651765e+00, -2.610118217366879e+00, -2.618053822957635e+00, -2.643482758818462e+00, -2.581161085635120e+00, -2.643482758818462e+00, -2.627393730704618e+00, -8.152794380546241e-01, -8.851586522502799e-01, -9.013700173009620e-01, -9.026001892929848e-01, -7.233188102843869e-01, -7.581588461023897e-01, -7.685999504070946e-01, -7.986034382731109e-01, -8.536478400309371e-01, -8.781772968866448e-01, -8.536478400309371e-01, -8.068533298181991e-01, 2.534403271979758e-02, 2.299598063183548e-02, -1.797704418341776e-01, -1.676082976965107e-01, 5.246851078425407e-02, 3.341954062316826e-02, -2.681977259343693e+00, -2.680842700767863e+00, -3.202664253425359e-02, -6.636198137399213e-02, -3.202664253425379e-02, -6.636198137399213e-02, -2.555966924309068e-03, 5.986397546047361e-02, 8.098686002131583e-02, 8.183788152287794e-02, 6.363687837991659e-02, 6.846609189876687e-02, 1.281735807217219e-01, -5.572602865189542e-02, 5.839456955875533e-02, 9.247643105987473e-02, 5.839456955875523e-02, 9.247643105988618e-02, -8.495106112561640e-01, -8.529361439582083e-01, -8.400394272878114e-01, -8.435051518869916e-01, -8.570174597924772e-01, -8.601709911524128e-01, -8.571318449266472e-01, -8.494952898891177e-01, -8.570542881935600e-01, -8.602231512859669e-01, -8.570542881935600e-01, -8.481307814279396e-01, -8.260632592079614e-01, -8.289511705574373e-01, -6.755113541202306e-01, -7.232114944054214e-01, -7.184468318331191e-01, -7.858431340148097e-01, -7.613670784531741e-01, -7.641878077174068e-01, -7.395651327012522e-01, -7.425535030828856e-01, -7.395651327012521e-01, -7.999374906865484e-01, -9.395529947724391e-01, -1.010774180706496e+00, -2.463188946466725e-01, -2.485864287428506e-01, -3.015571157398971e-01, -3.257625278397663e-01, -4.540198423794378e-01, -4.642047823147271e-01, -3.913334429413609e-01, -3.915092162940612e-01, -3.913334429413607e-01, -3.935305307133548e-01, -6.125858297313961e-01, -6.185182790172662e-01, -3.248667177835732e-02, -3.270924410528992e-02, 2.011420878366100e-01, 1.892887439279006e-01, -4.498517391457364e-01, -4.616666278961662e-01, 5.698343339252259e-02, 2.837139971227862e-02, 5.698343339252229e-02, 2.837139971227898e-02, -8.108589265193884e-03, -8.402643468135306e-03, 1.351716027843155e-02, 1.355492645134789e-02, -1.794590279918178e-03, -1.908696489142424e-03, -6.620280702889492e-02, -6.736794106502288e-02, 5.841933213481772e-02, 8.383781319140329e-02, 5.841933213484495e-02, -3.151661359196923e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rppscan_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rppscan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.852182397993148e-08, 0.000000000000000e+00, -2.851943142527295e-08, -2.852108271728166e-08, 0.000000000000000e+00, -2.851889337988211e-08, -2.851877833229855e-08, 0.000000000000000e+00, -2.851557261079540e-08, -2.852712318116290e-08, 0.000000000000000e+00, -1.120253572475938e-08, -2.852136886276344e-08, 0.000000000000000e+00, -1.120201028005810e-08, -1.120130800382430e-08, 0.000000000000000e+00, -1.120201028005810e-08, -1.356450199222864e-05, 0.000000000000000e+00, -2.903886796820335e-05, -1.356488597385887e-05, 0.000000000000000e+00, -1.356508668017574e-05, -1.357262195168073e-05, 0.000000000000000e+00, -1.357344178179968e-05, -1.356522796613322e-05, 0.000000000000000e+00, -1.356448102652943e-05, -1.357234462715865e-05, 0.000000000000000e+00, -1.357045950882505e-05, -2.904180870247059e-05, 0.000000000000000e+00, -1.357045950882505e-05, -1.997927736001177e-02, 0.000000000000000e+00, -1.961443743150538e-02, -2.011832271535663e-02, 0.000000000000000e+00, -9.041060629360900e-03, -9.914849901627680e-03, 0.000000000000000e+00, -1.017657264910117e-02, -9.799948026099887e-03, 0.000000000000000e+00, -2.146093170516915e-02, -1.898923782111166e-02, 0.000000000000000e+00, -2.513705768963940e-02, -8.761599372517803e-03, 0.000000000000000e+00, -1.115209257961480e-02, -4.902896259353863e+00, 0.000000000000000e+00, -1.849792472730084e+00, -4.668202668857232e+00, 0.000000000000000e+00, -1.731622539380670e+00, -5.041285233296908e-03, 0.000000000000000e+00, -1.021780647387640e-02, -5.813924073760987e+00, 0.000000000000000e+00, -5.542195364111326e+00, -1.795283124064189e+00, 0.000000000000000e+00, -1.963590245611509e+01, -1.795283124064190e+00, 0.000000000000000e+00, -5.152350721916127e+01, -1.370411360412816e+05, 0.000000000000000e+00, -1.214840630188158e+05, -3.050192629386915e+06, 0.000000000000000e+00, -1.108959367693711e+05, -3.184029378541283e+03, 0.000000000000000e+00, -7.460451366356564e+02, -2.969035668284657e+05, 0.000000000000000e+00, -3.074542210526675e+05, -1.669245533955489e+05, 0.000000000000000e+00, -6.253691451482399e+05, -1.669245533955489e+05, 0.000000000000000e+00, -6.253691451482376e+05, -3.345323554983694e-06, 0.000000000000000e+00, -3.348553267960604e-06, -3.346415642461980e-06, 0.000000000000000e+00, -3.349610664880151e-06, -3.345421580744434e-06, 0.000000000000000e+00, -3.348616727614113e-06, -3.346356504863352e-06, 0.000000000000000e+00, -3.349575152778249e-06, -6.927107080024881e-06, 0.000000000000000e+00, -3.349078956400366e-06, -3.345854140482669e-06, 0.000000000000000e+00, -6.934141578767337e-06, -1.318146916275800e-04, 0.000000000000000e+00, -1.319050890556655e-04, -1.286215268859397e-04, 0.000000000000000e+00, -1.288061095349398e-04, -1.345517540131161e-04, 0.000000000000000e+00, -1.338474664778753e-04, -1.317041045761377e-04, 0.000000000000000e+00, -1.309876973486130e-04, -1.280692824860631e-04, 0.000000000000000e+00, -2.446120129178804e-04, -1.280692824860631e-04, 0.000000000000000e+00, -1.300022817777230e-04, -1.784462033666273e-02, 0.000000000000000e+00, -5.456890133113908e-02, -1.422739803555414e-02, 0.000000000000000e+00, -1.428801607684110e-02, -2.471533341010537e-02, 0.000000000000000e+00, -2.197362971234021e-02, -2.224041522456888e-02, 0.000000000000000e+00, -1.995568774095263e-02, -1.569930743312702e-02, 0.000000000000000e+00, -5.685777053098828e-02, -1.569930743312702e-02, 0.000000000000000e+00, -1.882258392524531e-02, -2.362739467783744e+01, 0.000000000000000e+00, -2.277719374825553e+01, -4.580086342751050e+00, 0.000000000000000e+00, -1.898315329789089e+00, -3.470853273037687e+01, 0.000000000000000e+00, -2.847653014817809e+01, -1.608658484853799e-04, 0.000000000000000e+00, -1.611751364293962e-04, -1.418800459591028e+01, 0.000000000000000e+00, -1.145960100785938e+01, -1.418800459591025e+01, 0.000000000000000e+00, -1.145960100785939e+01, -8.893275572239910e+07, 0.000000000000000e+00, -3.592509003119679e+05, -3.080036015314796e+05, 0.000000000000000e+00, -2.793207378569141e+05, -1.554579284514020e+06, 0.000000000000000e+00, -1.475998030347849e+06, -1.436831029814103e+02, 0.000000000000000e+00, -4.034372699162477e+02, -5.804176949737112e+05, 0.000000000000000e+00, -6.341178154080249e+05, -5.804176949737099e+05, 0.000000000000000e+00, -6.341178154081008e+05, -2.307380299776319e-02, 0.000000000000000e+00, -2.275437014024648e-02, -2.249278280180000e-02, 0.000000000000000e+00, -2.218764818552329e-02, -3.251907227749409e-02, 0.000000000000000e+00, -3.180985824045535e-02, -3.078570836268243e-02, 0.000000000000000e+00, -2.253566634387627e-02, -3.164626403846538e-02, 0.000000000000000e+00, -3.097779346908488e-02, -3.164626403846538e-02, 0.000000000000000e+00, -2.245189846888681e-02, -2.554385137621128e-02, 0.000000000000000e+00, -2.525197786478978e-02, -3.534309438631086e-02, 0.000000000000000e+00, -9.716950992640544e-02, -3.117603576591996e-02, 0.000000000000000e+00, -9.165616972422613e-02, -2.826872418715451e-02, 0.000000000000000e+00, -2.791011922335626e-02, -2.959947209024365e-02, 0.000000000000000e+00, -2.921771657706572e-02, -2.959947209024365e-02, 0.000000000000000e+00, -8.103529466184445e-02, -1.143525034851773e-02, 0.000000000000000e+00, -3.074307086066150e-02, -7.789311418908750e-01, 0.000000000000000e+00, -7.616917456479034e-01, -8.615095166812413e-01, 0.000000000000000e+00, -3.722729614764683e-01, -2.497723957423873e-01, 0.000000000000000e+00, -1.307102836488741e-01, -2.241733075842392e-01, 0.000000000000000e+00, -2.246334345932775e-01, -2.241733075842391e-01, 0.000000000000000e+00, -4.662348953477295e-01, -4.777520035091579e-02, 0.000000000000000e+00, -4.675911798548811e-02, -3.433924586442788e+03, 0.000000000000000e+00, -3.341501495679718e+03, -3.315262132505132e+02, 0.000000000000000e+00, -2.953647998533268e+02, -1.617549283825244e-01, 0.000000000000000e+00, -1.561394356004059e-01, -6.431495795064762e+01, 0.000000000000000e+00, -5.274641555956534e+01, -6.431495795064748e+01, 0.000000000000000e+00, -5.274641555956556e+01, -8.783756013976557e+05, 0.000000000000000e+00, -7.617472967621950e+05, -2.827538183669614e+06, 0.000000000000000e+00, -2.809886769594947e+06, -3.659498124887925e+08, 0.000000000000000e+00, -2.859820086411265e+08, -2.056645274857657e+02, 0.000000000000000e+00, -1.925584584583784e+02, -1.098167325539085e+06, 0.000000000000000e+00, -7.597325731112871e+05, -1.098167325539584e+06, 0.000000000000000e+00, -3.847512823213173e+07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rppscan_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rppscan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.868026390744956e-03, 1.867935817056984e-03, 1.868006713107035e-03, 1.867921533421760e-03, 1.867947678778722e-03, 1.867835809092251e-03, 1.868168863940644e-03, 9.130132772931180e-04, 1.868014104092600e-03, 9.130174044729744e-04, 9.129971755789039e-04, 9.130174044729744e-04, 4.890667096176427e-03, 4.958380655857394e-03, 4.890833149761215e-03, 4.890698180434819e-03, 4.894090855654096e-03, 4.894624064662042e-03, 4.892492176798774e-03, 4.892428279824488e-03, 4.891080994211184e-03, 4.895280450550678e-03, 4.954454059727026e-03, 4.895280450550678e-03, 9.289870211052605e-03, 1.010445576541111e-02, 9.066208136712594e-03, 2.350930047366690e-02, 2.381737151960407e-02, 2.393782123146930e-02, 2.381965072210482e-02, 7.795755366071840e-03, 1.059308168365646e-02, 4.881379206056600e-03, 2.336091697032673e-02, 2.435815509653511e-02, 9.478524222371323e-03, 8.679780648364974e-02, 1.031638527333732e-02, 8.571298866942711e-02, 1.948764208756448e-02, 2.453495520016526e-03, 1.081157087836866e-01, 1.077242105465460e-01, 8.530032992276708e-02, 1.387794316966565e-01, 8.530032992276709e-02, 4.390553280841747e-04, 2.174257539556435e-01, 2.312742005923839e-01, 3.183353201575856e-07, 2.488988513848633e-01, 2.653194328367659e-05, 2.779673214807645e-01, 1.023122053673876e-01, 1.007395583180259e-01, 1.880138679859294e-01, 1.297963458158201e-01, 1.880138679859294e-01, 1.297963458158195e-01, 3.906653432937303e-03, 3.907609798943012e-03, 3.909179163485156e-03, 3.910051779393880e-03, 3.906835860620481e-03, 3.907724182162947e-03, 3.909001045197550e-03, 3.909940569798423e-03, 6.905229743452813e-03, 3.908830518108778e-03, 3.907914870778939e-03, 6.907117493755397e-03, 8.487114632108422e-03, 8.491433036617585e-03, 8.463549327373230e-03, 8.468599047087995e-03, 8.505420950303441e-03, 8.504240555358400e-03, 8.484806519723904e-03, 8.483560550231202e-03, 8.461354364893980e-03, 6.547927072922614e-03, 8.461354364893980e-03, 8.478034819845081e-03, 3.075688398465939e-02, 6.357343110267560e-02, 3.075614584320828e-02, 3.089158054496139e-02, 3.205620185432628e-02, 3.166559231290472e-02, 3.234929137643316e-02, 3.190789384299354e-02, 3.030176656017220e-02, 6.491090199053208e-02, 3.030176656017220e-02, 3.127973234092140e-02, 1.454741048034839e-01, 1.443384657032892e-01, 3.811072321480525e-03, 8.434403879088435e-02, 1.576095282803268e-01, 1.516758870072766e-01, 9.635829487399293e-03, 9.641152552915045e-03, 1.320489413041148e-01, 1.276713490909909e-01, 1.320489413041145e-01, 1.276713490909910e-01, 1.299773963547400e-08, 5.866666083073452e-02, 9.454379236700704e-02, 8.969173422900770e-02, 1.995253084719230e-01, 2.250115434603663e-01, 2.113384099240919e-01, 1.566843094237176e-04, 7.937031705725628e-02, 2.245968743293752e-01, 7.937031705725610e-02, 2.245968743294019e-01, 3.772334367379584e-02, 3.761813000907673e-02, 3.663309214103545e-02, 3.654237385049777e-02, 4.904838701245319e-02, 4.860295275940230e-02, 4.710267228317426e-02, 3.721658729027557e-02, 4.807218583169347e-02, 4.766085039380586e-02, 4.807218583169347e-02, 3.705957512192272e-02, 3.856740650527206e-02, 3.848729517695111e-02, 3.578788186434215e-02, 6.036657578623834e-02, 3.592935307992551e-02, 7.780470684184650e-02, 3.665846340383019e-02, 3.656710514310084e-02, 3.621018508587109e-02, 3.613073792060070e-02, 3.621018508587109e-02, 7.751859518398278e-02, 2.860784251608895e-02, 6.071628917611293e-02, 6.925963464954725e-02, 6.892494900580313e-02, 1.547106306812911e-02, 5.904808641988848e-02, 3.599914235408529e-02, 4.756263375376087e-02, 5.325674101301893e-02, 5.331058070030359e-02, 5.325674101301896e-02, 3.773624784369858e-02, 3.775100830609818e-02, 3.769452667951112e-02, 2.638422944845509e-05, 2.639320508372033e-05, 2.419526490796504e-01, 2.381335500810647e-01, 5.103437683915184e-02, 5.139500384936555e-02, 1.825633289812464e-01, 1.769768201799519e-01, 1.825633289812458e-01, 1.769768201799528e-01, 3.770283392503605e-07, 4.135182668719233e-07, 1.690542623369983e-02, 1.691534228486935e-02, 1.870194504872170e-08, 2.383886921038798e-08, 3.427593643769228e-04, 4.053721453215692e-04, 1.276200713186591e-01, 2.072002104221490e-01, 1.276200713187168e-01, 1.421350379292826e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
