
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_rppscan_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rppscan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.318402600928363e+01, -2.318409491222225e+01, -2.318445104467857e+01, -2.318342691573090e+01, -2.318395642525547e+01, -2.318395642525547e+01, -3.411886634764700e+00, -3.412010792859492e+00, -3.415576298876251e+00, -3.416710378914918e+00, -3.415287721233644e+00, -3.415287721233644e+00, -5.977867943609327e-01, -5.971157186816159e-01, -5.816603905903661e-01, -5.924164102720819e-01, -5.908093635493650e-01, -5.908093635493650e-01, -1.798337843010938e-01, -1.819302488748832e-01, -6.575486316649245e-01, -1.154173146705675e-01, -1.651344091957050e-01, -1.651344091957049e-01, -2.658831754834871e-03, -2.829524012797843e-03, -2.413114760326627e-02, -1.215218252949201e-03, -1.970078377420452e-03, -1.970078377420451e-03, -5.668012199287626e+00, -5.669117319901136e+00, -5.668088099609781e+00, -5.669062709229971e+00, -5.668559497033694e+00, -5.668559497033694e+00, -2.078204000022508e+00, -2.101031164349819e+00, -2.071527690912636e+00, -2.091899872672951e+00, -2.094251970755242e+00, -2.094251970755242e+00, -6.163060151147344e-01, -6.693654297018072e-01, -5.470623126288796e-01, -5.606156385288312e-01, -6.292566296018224e-01, -6.292566296018225e-01, -7.452309832588784e-02, -1.732837272191043e-01, -6.823512156207467e-02, -1.922549922748334e+00, -9.509359273441942e-02, -9.509359273441940e-02, -8.710190208544915e-04, -1.195287203324650e-03, -9.849779423228510e-04, -4.333017977453892e-02, -1.262148234152346e-03, -1.262148234152347e-03, -6.398899219203429e-01, -6.362906571884814e-01, -6.375670198676618e-01, -6.386097859172464e-01, -6.380874858348986e-01, -6.380874858348986e-01, -6.199965043488953e-01, -5.320899332664496e-01, -5.575580404905610e-01, -5.825807481415295e-01, -5.696351510002138e-01, -5.696351510002138e-01, -6.928370064843088e-01, -2.285267350381682e-01, -2.725914820617816e-01, -3.528640544861502e-01, -3.128397208422535e-01, -3.128397208422535e-01, -4.774651138758373e-01, -2.287140632220785e-02, -3.308856062244569e-02, -3.456767043608546e-01, -5.851788826160290e-02, -5.851788826160291e-02, -4.039628708657388e-03, -2.206213780619477e-04, -5.849693154701501e-04, -5.578113773459942e-02, -1.142998828732560e-03, -1.142998828732559e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_rppscan_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rppscan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.019277700975608e+01, -3.019287615815312e+01, -3.019290107454329e+01, -3.019296625024142e+01, -3.019330118683432e+01, -3.019353864459169e+01, -3.019190134410335e+01, -3.019175418779581e+01, -3.019285136407982e+01, -3.019246976345122e+01, -3.019285136407982e+01, -3.019246976345122e+01, -4.801511601191653e+00, -4.801579869330096e+00, -4.801642655027160e+00, -4.801683747867442e+00, -4.804408558366198e+00, -4.805016509194025e+00, -4.802727398191324e+00, -4.803035641407194e+00, -4.800425756945658e+00, -4.805559341604095e+00, -4.800425756945658e+00, -4.805559341604095e+00, -8.256056439472201e-01, -8.298246283824100e-01, -8.241549117277436e-01, -8.290822266116465e-01, -8.040186418099663e-01, -7.996161564220184e-01, -8.128022858738368e-01, -8.155493364572591e-01, -8.353393264436795e-01, -7.830870042831423e-01, -8.353393264436795e-01, -7.830870042831423e-01, -1.615085159562006e-01, -1.955100877289498e-01, -1.677419815877443e-01, -2.003550567353987e-01, -8.398886361065531e-01, -8.739398820577422e-01, -1.499318687017272e-01, -1.320027883326686e-01, -1.700106837161776e-01, -1.122270783872893e-01, -1.700106837161775e-01, -1.122270783872893e-01, -1.868649967610224e-03, 1.424469810377343e-02, -3.804988745490827e-03, -1.467346584810370e-03, -3.653719267471851e-02, -3.829735955174276e-02, -2.255978408568395e-03, -2.197049928646079e-03, -3.646493065832141e-03, -1.966392896052265e-03, -3.646493065832155e-03, -1.966392896052266e-03, -7.414850845387797e+00, -7.413056535329875e+00, -7.417275513714829e+00, -7.415398636154259e+00, -7.414997900562672e+00, -7.413145908377663e+00, -7.417077923945029e+00, -7.415273155172867e+00, -7.416083556276997e+00, -7.414231419024225e+00, -7.416083556276997e+00, -7.414231419024225e+00, -2.560390745626600e+00, -2.562489148423139e+00, -2.596415323580070e+00, -2.597422841950456e+00, -2.537747131123020e+00, -2.546197919219518e+00, -2.570861217767725e+00, -2.579383784635091e+00, -2.598224064184221e+00, -2.583382153085888e+00, -2.598224064184221e+00, -2.583382153085888e+00, -8.202797733930973e-01, -8.182194522297963e-01, -9.252710533714874e-01, -9.254132535335020e-01, -7.362694151770151e-01, -7.687472635001841e-01, -8.110746209392928e-01, -8.371126755616086e-01, -8.581291238718101e-01, -8.140135083855193e-01, -8.581291238718103e-01, -8.140135083855196e-01, -9.964600710362249e-02, -1.023593676560734e-01, -1.167850484639756e-01, -1.183503439014762e-01, -9.368021656089048e-02, -9.572715495684717e-02, -2.833742605183742e+00, -2.832551791515835e+00, -9.171507103733802e-02, -8.077757632126617e-02, -9.171507103734076e-02, -8.077757632126566e-02, -1.582013807507143e-03, -1.645449201534585e-03, -2.183267983064563e-03, -2.212884941743043e-03, -1.709339931313736e-03, -1.861408819848460e-03, -6.479498083087350e-02, -6.248299045871142e-02, -1.663212220131341e-03, -2.272481515812228e-03, -1.663212220131341e-03, -2.272481515812227e-03, -8.523630790057335e-01, -8.557335245077585e-01, -8.420440528599430e-01, -8.454829454902604e-01, -8.455845311203429e-01, -8.490230537623480e-01, -8.486010272626159e-01, -8.519760544432382e-01, -8.470854296979129e-01, -8.504913350202822e-01, -8.470854296979129e-01, -8.504913350202822e-01, -8.323067610987243e-01, -8.349857994586826e-01, -6.738621426134372e-01, -6.773011610224032e-01, -7.177997072047403e-01, -7.214995450326007e-01, -7.625611434806543e-01, -7.654021269106588e-01, -7.397451691901140e-01, -7.427495258180673e-01, -7.397451691901139e-01, -7.427495258180674e-01, -9.727168357782049e-01, -9.735385402568709e-01, -2.204696141485834e-01, -2.225209169505527e-01, -2.952329288245026e-01, -3.015589291602526e-01, -4.571213856010554e-01, -4.601488215012629e-01, -3.758106972317958e-01, -3.762023979771226e-01, -3.758106972317958e-01, -3.762023979771227e-01, -6.057599254026229e-01, -6.121438270842922e-01, -3.012106306428317e-02, -3.269996721202841e-02, -4.955582830656790e-02, -5.116545822235367e-02, -4.510028875406673e-01, -4.600392915440745e-01, -7.644831615201221e-02, -7.788498367658829e-02, -7.644831615201224e-02, -7.788498367658832e-02, -6.963404790072567e-03, -7.297162977420614e-03, -4.057096740286068e-04, -4.307293856220795e-04, -1.019631971394355e-03, -1.116860709211413e-03, -6.968706651103314e-02, -1.729413848530214e-02, -1.644206566415638e-03, -2.047904305617819e-03, -1.644206566415635e-03, -2.047904305617825e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rppscan_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rppscan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.194943987886196e-08, 0.000000000000000e+00, -1.194698271568174e-08, -1.194930844512400e-08, 0.000000000000000e+00, -1.194688756520718e-08, -1.194846650958387e-08, 0.000000000000000e+00, -1.194579991680823e-08, -1.194993681832528e-08, 0.000000000000000e+00, -1.194767638611822e-08, -1.194937310145405e-08, 0.000000000000000e+00, -1.194661815557708e-08, -1.194937310145405e-08, 0.000000000000000e+00, -1.194661815557708e-08, -3.064034218080619e-05, 0.000000000000000e+00, -3.064475830649696e-05, -3.064372206484289e-05, 0.000000000000000e+00, -3.064764829421164e-05, -3.071526249666032e-05, 0.000000000000000e+00, -3.072826325283404e-05, -3.065096782936155e-05, 0.000000000000000e+00, -3.065553242282045e-05, -3.065181446980834e-05, 0.000000000000000e+00, -3.071469900817273e-05, -3.065181446980834e-05, 0.000000000000000e+00, -3.071469900817273e-05, -8.551570139193457e-03, 0.000000000000000e+00, -8.749533300370505e-03, -8.501313761098080e-03, 0.000000000000000e+00, -8.727724974624249e-03, -7.822175949231760e-03, 0.000000000000000e+00, -7.768947323958233e-03, -8.075454750886227e-03, 0.000000000000000e+00, -8.218219985984298e-03, -8.857965102148683e-03, 0.000000000000000e+00, -8.347050801921134e-03, -8.857965102148683e-03, 0.000000000000000e+00, -8.347050801921134e-03, -3.748966831145793e+00, 0.000000000000000e+00, -2.384317449605601e+00, -3.646070206439070e+00, 0.000000000000000e+00, -2.358843789786599e+00, -2.587540929455886e-03, 0.000000000000000e+00, -3.151856724062304e-03, -1.036375584358657e+00, 0.000000000000000e+00, -3.342434643981005e+00, -3.220951721213202e+00, 0.000000000000000e+00, 3.231989052410086e-01, -3.220951721213205e+00, 0.000000000000000e+00, 3.231989052410089e-01, -1.933524778986947e+03, 0.000000000000000e+00, -1.353978761101419e+04, -4.193270310754434e+02, 0.000000000000000e+00, -2.092830661016543e+03, 4.461497048399104e+00, 0.000000000000000e+00, 1.754348636203724e+00, 8.589742005547312e+02, 0.000000000000000e+00, 8.563694912337904e+02, 1.986481592635882e+02, 0.000000000000000e+00, 2.107457610993178e+03, 1.986481592636062e+02, 0.000000000000000e+00, 2.107457610993180e+03, -3.361106916972863e-06, 0.000000000000000e+00, -3.363442438886186e-06, -3.362024556407725e-06, 0.000000000000000e+00, -3.364331130341833e-06, -3.360832392077872e-06, 0.000000000000000e+00, -3.363238456996396e-06, -3.361631506490926e-06, 0.000000000000000e+00, -3.364057142918947e-06, -3.361822836871099e-06, 0.000000000000000e+00, -3.363929159039906e-06, -3.361822836871099e-06, 0.000000000000000e+00, -3.363929159039906e-06, -1.917363073603349e-04, 0.000000000000000e+00, -1.898010836185424e-04, -1.773438984675291e-04, 0.000000000000000e+00, -1.759957590479315e-04, -1.870145074145352e-04, 0.000000000000000e+00, -1.867185993428087e-04, -1.738500937422707e-04, 0.000000000000000e+00, -1.733913381061361e-04, -1.863077551139550e-04, 0.000000000000000e+00, -1.827563629631905e-04, -1.863077551139550e-04, 0.000000000000000e+00, -1.827563629631905e-04, -3.267853811358153e-02, 0.000000000000000e+00, -3.247066024535902e-02, -2.772966301295657e-02, 0.000000000000000e+00, -2.724196144744605e-02, -5.571429583750146e-02, 0.000000000000000e+00, -4.771610947983365e-02, -6.035642027823312e-02, 0.000000000000000e+00, -5.127341873169482e-02, -2.597808366462518e-02, 0.000000000000000e+00, -3.541250593067750e-02, -2.597808366462518e-02, 0.000000000000000e+00, -3.541250593067750e-02, -1.795145655264894e+00, 0.000000000000000e+00, -1.386444585424462e+00, -3.418309170835236e+00, 0.000000000000000e+00, -3.363880209291807e+00, -6.877263172636944e-01, 0.000000000000000e+00, -1.719858763989638e+00, -4.254608295129364e-04, 0.000000000000000e+00, -4.262281004158188e-04, -6.281164449952239e+00, 0.000000000000000e+00, -1.001798502791873e+01, -6.281164449952289e+00, 0.000000000000000e+00, -1.001798502791872e+01, 1.787608682751673e+03, 0.000000000000000e+00, 1.540161985887668e+03, 1.055702736973056e+03, 0.000000000000000e+00, 9.849624827286615e+02, 4.514497061523894e+03, 0.000000000000000e+00, 4.336107119682328e+03, 1.166184405665081e+00, 0.000000000000000e+00, -1.935768386507299e+00, 3.066377856661207e+03, 0.000000000000000e+00, -1.401234277179374e+02, 3.066377856661202e+03, 0.000000000000000e+00, -1.401234277179557e+02, -2.540642465814262e-02, 0.000000000000000e+00, -2.498794582250973e-02, -2.464671465268000e-02, 0.000000000000000e+00, -2.425512869862403e-02, -2.489925198610848e-02, 0.000000000000000e+00, -2.450020589283779e-02, -2.512427460081051e-02, 0.000000000000000e+00, -2.471603525150475e-02, -2.501171406691533e-02, 0.000000000000000e+00, -2.460763625488915e-02, -2.501171406691533e-02, 0.000000000000000e+00, -2.460763625488915e-02, -3.100838591231880e-02, 0.000000000000000e+00, -3.044349982011146e-02, -3.909946849619245e-02, 0.000000000000000e+00, -3.844596886519611e-02, -3.548071719683192e-02, 0.000000000000000e+00, -3.488432013009947e-02, -3.308787983704436e-02, 0.000000000000000e+00, -3.263485871203534e-02, -3.450789384648126e-02, 0.000000000000000e+00, -3.387019522253398e-02, -3.450789384648126e-02, 0.000000000000000e+00, -3.387019522253399e-02, -2.525291260536048e-02, 0.000000000000000e+00, -2.446320275106651e-02, -1.140326471892454e+00, 0.000000000000000e+00, -1.122283823265199e+00, -6.554444169763216e-01, 0.000000000000000e+00, -6.273088180485175e-01, -2.655363538875186e-01, 0.000000000000000e+00, -2.607137876196090e-01, -3.988342992682467e-01, 0.000000000000000e+00, -3.998257557767740e-01, -3.988342992682470e-01, 0.000000000000000e+00, -3.998257557767741e-01, -8.101804438761254e-02, 0.000000000000000e+00, -7.625843816354512e-02, -1.704827550641685e+01, 0.000000000000000e+00, -8.135252117779691e+00, 1.526206847516849e+00, 0.000000000000000e+00, 8.921951332825792e-01, -3.361937503530320e-01, 0.000000000000000e+00, -2.839117915279354e-01, -3.192265561066892e+00, 0.000000000000000e+00, -5.567403069478583e+00, -3.192265561066885e+00, 0.000000000000000e+00, -5.567403069478573e+00, 1.687366471779109e+02, 0.000000000000000e+00, 1.596789786206419e+02, 2.076942091852046e+04, 0.000000000000000e+00, 2.889931775428429e+04, 3.983277374610661e+03, 0.000000000000000e+00, 3.758647941303284e+03, -6.129164929884161e+00, 0.000000000000000e+00, -3.916864264527110e+01, 5.049532796585509e+03, 0.000000000000000e+00, 8.633989177269161e+00, 5.049532796585519e+03, 0.000000000000000e+00, 8.633989177353476e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rppscan_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rppscan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([9.618894178085054e-04, 9.617251425186445e-04, 9.618876398996517e-04, 9.617238721520412e-04, 9.618558879738047e-04, 9.616857175329905e-04, 9.618750037865259e-04, 9.617102687605530e-04, 9.618890381282848e-04, 9.616814091184027e-04, 9.618890381282848e-04, 9.616814091184027e-04, 9.096484248941864e-03, 9.093109138008759e-03, 9.098204227376960e-03, 9.094040926725125e-03, 9.128934550944465e-03, 9.133723848411390e-03, 9.125953320964423e-03, 9.123966969849484e-03, 9.094314947079052e-03, 9.150799055845196e-03, 9.094314947079052e-03, 9.150799055845196e-03, 1.437633079471482e-02, 1.462678934097396e-02, 1.432451630531141e-02, 1.458233096563192e-02, 1.340433724185191e-02, 1.359692574680769e-02, 1.477950097460346e-02, 1.506437391043574e-02, 1.449826126539766e-02, 1.595099445480709e-02, 1.449826126539766e-02, 1.595099445480709e-02, 1.509726386156676e-01, 1.098653706198473e-01, 1.520672203111603e-01, 1.141994264392065e-01, 1.913229851676506e-03, 2.849835518381780e-03, 2.226540087312446e-02, 6.576991560936221e-02, 1.473518479602045e-01, 2.258163467108598e-03, 1.473518479602044e-01, 2.258163467108598e-03, 3.624092419540729e-03, 2.623354502598475e-02, 1.392047194169886e-03, 5.341290409270663e-03, 1.221037110238269e-03, 2.089219410840273e-03, 1.166863307074116e-05, 1.588004699604223e-05, 2.905559288499350e-04, 4.295071947705615e-06, 2.905559288499154e-04, 4.295071947705596e-06, 3.921064590260290e-03, 3.921194654292632e-03, 3.923428481777458e-03, 3.923480375959811e-03, 3.920906602612848e-03, 3.921064866164088e-03, 3.922945645956009e-03, 3.923151679280808e-03, 3.922493999653429e-03, 3.922378652546257e-03, 3.922493999653429e-03, 3.922378652546257e-03, 1.188117811957100e-02, 1.177116940934160e-02, 1.128327295105402e-02, 1.119790970980598e-02, 1.143731473656731e-02, 1.147059420937766e-02, 1.088421946166267e-02, 1.090775657014498e-02, 1.183303615228640e-02, 1.150354073497722e-02, 1.183303615228640e-02, 1.150354073497722e-02, 5.103513770145956e-02, 5.046563971459009e-02, 5.224665191401306e-02, 5.156878335230245e-02, 6.078550709949969e-02, 5.987548511225264e-02, 6.679677659441641e-02, 6.555707404754021e-02, 4.607061689877753e-02, 5.289985731006233e-02, 4.607061689877751e-02, 5.289985731006232e-02, 1.485931931877633e-02, 1.269567413958105e-02, 1.451057240206721e-01, 1.448923854052062e-01, 7.194165384689737e-03, 1.309115054327475e-02, 2.009290545138930e-02, 2.010329003741088e-02, 6.053030078512029e-02, 1.112253094616006e-01, 6.053030078511933e-02, 1.112253094616013e-01, 4.943003338764471e-07, 5.691332067686627e-07, 2.784638783861825e-06, 2.206611691189385e-06, 2.236001600848778e-05, 2.349306919206253e-05, 2.287722226431552e-03, 6.771982199679568e-03, 3.829022737373836e-07, 6.474488630160657e-04, 3.829022737373861e-07, 6.474488630160726e-04, 4.058332398053958e-02, 4.038784315562780e-02, 3.929105059204100e-02, 3.912063690023916e-02, 3.972674083825160e-02, 3.954997508662262e-02, 4.010523275649357e-02, 3.991802189106172e-02, 3.991590327700525e-02, 3.973330126271261e-02, 3.991590327700525e-02, 3.973330126271264e-02, 4.477632201709759e-02, 4.444422468003325e-02, 3.904728016756399e-02, 3.889024747794924e-02, 4.003862047724238e-02, 3.987988119126695e-02, 4.161526444116323e-02, 4.147415155158492e-02, 4.108088259746550e-02, 4.079437841377650e-02, 4.108088259746551e-02, 4.079437841377651e-02, 5.345275354702388e-02, 5.240486320018298e-02, 9.891560581717890e-02, 9.902541624458581e-02, 9.703742890484643e-02, 9.572457470767862e-02, 8.682251332896940e-02, 8.651005580658787e-02, 8.992807691426558e-02, 9.003400772237541e-02, 8.992807691426556e-02, 9.003400772237539e-02, 6.003545753493430e-02, 5.789260662282326e-02, 7.499529216716473e-03, 4.935134047205098e-03, 1.981772787804086e-03, 2.472239673184376e-03, 9.464681495334482e-02, 8.603005244323350e-02, 1.328127145614917e-02, 2.294756794365610e-02, 1.328127145614913e-02, 2.294756794365605e-02, 8.791289066799197e-06, 8.217153315311016e-06, 4.367205897888313e-08, 2.425863570352371e-08, 3.669822149624445e-05, 3.849505583148346e-05, 1.944379579209106e-02, 1.044572556763844e-01, 9.441658503832943e-07, 5.477735922688832e-04, 9.441658503832909e-07, 5.477735922688610e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
