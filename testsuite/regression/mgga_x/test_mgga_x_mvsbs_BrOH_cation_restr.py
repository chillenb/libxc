
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mvsbs_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvsbs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.350008426009962e+01, -2.350012978815920e+01, -2.350022891990874e+01, -2.349954501027155e+01, -2.349991815513936e+01, -2.349991815513936e+01, -3.088807359540166e+00, -3.088727024063325e+00, -3.086733505879165e+00, -3.088624627615273e+00, -3.087762659898308e+00, -3.087762659898308e+00, -6.241592768241304e-01, -6.238728224788922e-01, -6.181599873568759e-01, -6.243321431848086e-01, -6.223378985280209e-01, -6.223378985280209e-01, -1.829535032652943e-01, -1.857320997504935e-01, -7.244412696439162e-01, -1.296002065694535e-01, -1.508665118130099e-01, -1.508665118130099e-01, -1.462006464930121e-03, -1.588101220942667e-03, -1.905701304434789e-02, -6.256405715764113e-04, -9.127525505660993e-04, -9.127525505660995e-04, -5.674713278880865e+00, -5.675719265155021e+00, -5.674706601203352e+00, -5.675597399756392e+00, -5.675250191574692e+00, -5.675250191574692e+00, -2.058516235922156e+00, -2.078190903738085e+00, -2.056936502993944e+00, -2.075263718756927e+00, -2.069435112382025e+00, -2.069435112382025e+00, -6.127808174299422e-01, -7.642612632676572e-01, -4.758250265213251e-01, -5.819391230581298e-01, -6.422715135409531e-01, -6.422715135409531e-01, -7.787093545989315e-02, -1.783968779296984e-01, -7.001135189984975e-02, -2.020491394822826e+00, -1.014328268176985e-01, -1.014328268176985e-01, -4.278164311048424e-04, -6.094196065614489e-04, -5.183397052473122e-04, -4.020969748297360e-02, -6.175487467389006e-04, -6.175487467389006e-04, -6.467089076036552e-01, -6.433969671780551e-01, -6.445537702931320e-01, -6.455143719632666e-01, -6.450352829179516e-01, -6.450352829179516e-01, -6.339702035875439e-01, -4.948392080467545e-01, -5.920967025638040e-01, -6.005899395207732e-01, -5.936674461035304e-01, -5.936674461035304e-01, -7.536404838073272e-01, -2.313408013838138e-01, -2.783157331025797e-01, -3.349053079278459e-01, -3.166858244996948e-01, -3.166858244996947e-01, -4.304747549409985e-01, -1.774036981453840e-02, -2.812191098807564e-02, -3.025284662910657e-01, -5.914593617352416e-02, -5.914593617352419e-02, -2.323764101417772e-03, -9.607621678450065e-05, -2.907084121908387e-04, -5.412711080308843e-02, -5.688739331878356e-04, -5.688739331878350e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mvsbs_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvsbs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.420836015901874e+01, -3.420826333518103e+01, -3.420810210136811e+01, -3.420953399081860e+01, -3.420874514212585e+01, -3.420874514212585e+01, -3.390945320119927e+00, -3.390732965871424e+00, -3.384718864724867e+00, -3.383196099027341e+00, -3.384809802610611e+00, -3.384809802610611e+00, -7.465890859378336e-01, -7.458124718799019e-01, -7.234906201669645e-01, -7.178153528520024e-01, -7.208081951936368e-01, -7.208081951936368e-01, -2.341828418783613e-01, -2.365514794678015e-01, -9.252571104237187e-01, -1.997824991689130e-01, -2.140484453115271e-01, -2.140484453115271e-01, -2.713029599636238e-03, -2.952060018437472e-03, -3.603884421129860e-02, -1.185717443520639e-03, -1.716449349595588e-03, -1.716449349595589e-03, -7.994417881815619e+00, -7.990659121846032e+00, -7.994245170987567e+00, -7.990927593159143e+00, -7.992504413087039e+00, -7.992504413087039e+00, -2.249311676007729e+00, -2.244785507200457e+00, -2.291428152319386e+00, -2.278037807409170e+00, -2.208403847946233e+00, -2.208403847946233e+00, -1.063955535764965e+00, -1.211214445982483e+00, -4.978153819712843e-01, -9.003632849810549e-01, -1.142240463296233e+00, -1.142240463296233e+00, -1.398521294920459e-01, -2.508229455709547e-01, -1.274488861459980e-01, -3.192682424210026e+00, -1.667937745177549e-01, -1.667937745177549e-01, -8.233812750957810e-04, -1.172605730895207e-03, -9.848007203975839e-04, -7.574181931556705e-02, -1.185763112922094e-03, -1.185763112922094e-03, -8.597489942080573e-01, -8.660238981570656e-01, -8.635278665908077e-01, -8.617014962194753e-01, -8.625859210116822e-01, -8.625859210116822e-01, -8.297082773169255e-01, 1.900716885027782e+00, -9.381387187668726e-01, -8.347007913166506e-01, -8.629883832407167e-01, -8.629883832407166e-01, -1.325435774533821e+00, -2.982960779948483e-01, -3.452483149974508e-01, -2.502146888077425e-01, -3.723485874340531e-01, -3.723485874340529e-01, -1.409096812327064e-01, -3.322089952450086e-02, -5.323201860026488e-02, -2.638991159930886e-01, -1.078223642016802e-01, -1.078223642016803e-01, -4.474313154659639e-03, -1.825379744264747e-04, -5.459659196609529e-04, -9.874444012149690e-02, -1.085846130740676e-03, -1.085846130740675e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mvsbs_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvsbs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [2.491120167412947e-08, 2.490985971187493e-08, 2.490224993915266e-08, 2.492207062350485e-08, 2.491191850993874e-08, 2.491191850993874e-08, -5.428537169198187e-06, -5.427059172103766e-06, -5.392803061514447e-06, -5.461506254214776e-06, -5.432488318176509e-06, -5.432488318176509e-06, -3.278328295016384e-03, -3.309368346896392e-03, -4.266902180266335e-03, -4.707352397048799e-03, -4.509653861742141e-03, -4.509653861742141e-03, -3.964688110274710e-01, -3.941217741223445e-01, -7.288720323459038e-04, 1.222014887280533e-01, -1.202755678351031e-01, -1.202755678351032e-01, 6.088868695490984e+01, 6.006287677171670e+01, 4.358445749023113e+00, 1.769894266769847e+02, 1.318967635817827e+02, 1.318967635817833e+02, 4.670132308593171e-06, 4.646902083139490e-06, 4.668078624238247e-06, 4.647622097879357e-06, 4.658825195444367e-06, 4.658825195444367e-06, -1.207635653903704e-04, -1.280079778695129e-04, -1.136757361151348e-04, -1.233159546415753e-04, -1.315940592577389e-04, -1.315940592577389e-04, -1.085131638275741e-02, -3.029784031594621e-02, -8.628416540033100e-03, -3.392069607211728e-03, -2.548226271731622e-02, -2.548226271731622e-02, 8.149195417789887e-01, -1.162863471114859e-01, 1.033239239323818e+00, -6.787563091035114e-05, 3.534059929409444e-01, 3.534059929409438e-01, 3.636580206790211e+02, 2.400799815398930e+02, 9.855980090425488e+02, 2.552244081451198e+00, 5.198966942674409e+02, 5.198966942674397e+02, 2.268592801981685e-02, 2.603150279998805e-02, 2.475995239473010e-02, 2.379001605578483e-02, 2.426842154478434e-02, 2.426842154478434e-02, 2.859179814094111e-02, -6.222982179512377e-01, 2.323633422293724e-01, 6.747005876496656e-02, 1.130499032413163e-01, 1.130499032413164e-01, -2.404071084342653e-02, -1.433916465577454e-01, -1.108365768763292e-01, -2.208009104442217e-01, -1.172623715557711e-01, -1.172623715557712e-01, -1.296271697042429e-01, 3.816159223017673e+00, 2.920521099616808e+00, -1.450384139288023e-01, 1.683995405567628e+00, 1.683995405567630e+00, 5.136891234094026e+01, 3.778228395313474e+03, 7.345835907565476e+02, 1.685396917212704e+00, 6.340416132291836e+02, 6.340416132291864e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mvsbs_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvsbs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mvsbs_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvsbs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-4.083359334757375e-03, -4.083153934519855e-03, -4.081862942826108e-03, -4.084888861718848e-03, -4.083357184374727e-03, -4.083357184374727e-03, -2.919089937642727e-03, -2.921821046738916e-03, -2.994343357280795e-03, -2.961971919759561e-03, -2.966860883727890e-03, -2.966860883727890e-03, 6.003118922686249e-04, 7.031992234956738e-04, 3.588555571751112e-03, 4.251571278834735e-03, 3.865701006308943e-03, 3.865701006308943e-03, 3.995676724619029e-02, 3.968099134892262e-02, -5.711962544337773e-05, 1.118526552047491e-02, 1.780884773003750e-02, 1.780884773003751e-02, 2.867569322519795e-04, 3.110026417054915e-04, 1.962027622282183e-03, 7.629216925593287e-05, 1.497505025354215e-04, 1.497505025354211e-04, -1.046366383325618e-02, -1.041690277488241e-02, -1.045862118832127e-02, -1.041749125750071e-02, -1.044136538353773e-02, -1.044136538353773e-02, 1.053820383389738e-02, 1.173857107161026e-02, 1.047770455762904e-02, 1.190586403816696e-02, 1.143146322972972e-02, 1.143146322972972e-02, 1.414189561251436e-01, 1.983509107511275e-01, -3.099220903522580e-02, 6.271116101968859e-02, 2.176784942193687e-01, 2.176784942193687e-01, 6.460240342660106e-03, 2.151272641363850e-02, 5.770835286050678e-03, 2.620328494529783e-02, 1.282384170222000e-02, 1.282384170222002e-02, 3.121842107350321e-05, 5.057965984966761e-05, 1.614078439965166e-04, 3.782802458353990e-03, 9.508088090693280e-05, 9.508088090693300e-05, -7.695379188831572e-02, -8.703726776333677e-02, -8.319881538474895e-02, -8.027524999815697e-02, -8.171910831515954e-02, -8.171910831515954e-02, -9.311873979222529e-02, 5.200332503291453e-01, -6.377901056291406e-01, -1.894377181088969e-01, -3.102102485621072e-01, -3.102102485621076e-01, 2.201256583416493e-01, 3.093864207324640e-02, 3.150381492922130e-02, 3.988922924162529e-02, 3.755230544712558e-02, 3.755230544712561e-02, 3.603506379611915e-02, 2.174156379604272e-03, 2.568582721125120e-03, -3.233394979537643e-02, 7.047717944307470e-03, 7.047717944307473e-03, 1.627157030806332e-04, 1.163739446123869e-05, 7.266548088909041e-05, 7.834705131556654e-03, 1.194196946693642e-04, 1.194196946693639e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
