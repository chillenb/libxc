
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mvsbs_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvsbs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.394596965333382e+01, -2.394620746737134e+01, -2.394721664306161e+01, -2.394369138799378e+01, -2.394554487168250e+01, -2.394554487168250e+01, -3.018149445160952e+00, -3.018103511540939e+00, -3.016939194363426e+00, -3.017684610007491e+00, -3.017291229861247e+00, -3.780615593708254e+00, -6.027488289507764e-01, -7.229275611335836e-01, -7.014753290850896e-01, -7.084215805618694e-01, -7.069367804550144e-01, -7.069367804550144e-01, -1.845325427862841e-01, -1.877215265064042e-01, -7.122835289329472e-01, -1.293049155578283e-01, -1.521647757105668e-01, -1.521647757105668e-01, -1.460738125231411e-03, -1.585536362191085e-03, -1.879394996893955e-02, -6.166981864790511e-04, -9.053839803068976e-04, -9.053839803068976e-04, -5.671917076477238e+00, -5.672969293394106e+00, -5.671969570380162e+00, -6.289718833372664e+00, -5.672448279026786e+00, -5.672448279026786e+00, -1.719759890268474e+00, -1.728325548727191e+00, -1.713586518259883e+00, -1.721238221483026e+00, -1.727378917949152e+00, -2.139626462057235e+00, -6.387142911532339e-01, -6.942835762111627e-01, -5.905014178794321e-01, -6.143696026328340e-01, -6.491133160566195e-01, -6.183480553570538e-01, -8.442115864238328e-02, -1.793171152901905e-01, -7.813580365760089e-02, -2.090219060195075e+00, -1.009973956343913e-01, -1.009973956343913e-01, -2.493210604000182e-03, -5.869624642644026e-04, -5.096607185207236e-04, -5.263175836417459e-02, -2.909886942083178e-03, -5.978590280032581e-04, -6.423393082730962e-01, -6.386383797164110e-01, -6.605533537038782e-01, -6.410146156738867e-01, -6.404778059963191e-01, -6.404778059963191e-01, -6.249261212806758e-01, -5.357825929657638e-01, -5.614311982686342e-01, -5.867278113314488e-01, -5.738234827429491e-01, -5.691324363842181e-01, -7.277851127370377e-01, -1.994538075777714e-01, -2.831970374550490e-01, -3.058190551249222e-01, -3.273798416254000e-01, -3.273798416254000e-01, -3.921998679060389e-01, -1.762992624896693e-02, -2.763657615017529e-02, -3.644301622628734e-01, -6.692431610838707e-02, -5.828243793533005e-02, -2.233273650964974e-03, -8.319531637151207e-05, -2.886173024115420e-04, -5.366092149834523e-02, -5.562465313680386e-04, -5.562465313680380e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mvsbs_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvsbs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-4.112354525289387e+01, -4.112435895583189e+01, -4.112773073356107e+01, -4.111567684843705e+01, -4.112202660925686e+01, -4.112202660925686e+01, -3.690485206605283e+00, -3.690334983130727e+00, -3.686418118960668e+00, -3.688340220278823e+00, -3.687751212947535e+00, -3.275933635422564e+00, -7.721703706594661e-01, -8.417670909675039e-01, -8.372345846054511e-01, -8.359860585221763e-01, -8.364043178152525e-01, -8.364043178152525e-01, -2.316550776539076e-01, -2.333682447114684e-01, -9.277640247344797e-01, -1.997669812601452e-01, -2.136058699818952e-01, -2.136058699818952e-01, -2.704924111112735e-03, -2.936010779530108e-03, -3.474376866211960e-02, -1.141988721001100e-03, -1.676562859190967e-03, -1.676562859190967e-03, -7.997182850034323e+00, -7.993389803985502e+00, -7.996951593678125e+00, -8.328623105885063e+00, -7.995281240269797e+00, -7.995281240269797e+00, -2.140048020651753e+00, -2.144062092000765e+00, -2.137324208437105e+00, -2.141143862728263e+00, -2.143274962945900e+00, -2.132746127127602e+00, -1.605747101145382e+00, -1.015972632507619e+00, -3.784733717900108e-01, -1.458891616516484e+00, -1.250584443122056e+00, -9.396435944635881e-01, -1.120693708022086e-01, -2.496509798306809e-01, -1.037844793631130e-01, -3.716792812698323e+00, -1.648731380176943e-01, -1.648731380176943e-01, -3.324267306039210e-03, -1.086925337996202e-03, -9.437763994209431e-04, -7.003968300418967e-02, -3.879806523941928e-03, -1.107100662387727e-03, -8.659251653070336e-01, -8.724541119016996e-01, -8.312391809307882e-01, -8.679689231669655e-01, -8.688935268111979e-01, -8.688935268111979e-01, -8.438583292709909e-01, 1.513694425308464e-01, -9.964420290077246e-01, -8.541683316351171e-01, -8.915919818819654e-01, -9.214925952633046e-01, -1.112773127441242e+00, -2.595846994491252e-01, -3.369733514149744e-01, -3.811194572232780e-01, -3.646509047466777e-01, -3.646509047466776e-01, -4.773436605114705e-01, -3.259905095442155e-02, -5.097453484615271e-02, -2.820647783400290e-01, -8.890596869871117e-02, -1.041917021601406e-01, -4.135432019116910e-03, -1.540600952868559e-04, -5.344567991476660e-04, -9.641730841463704e-02, -1.030043491667002e-03, -1.030043491667001e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mvsbs_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvsbs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.761237033764044e-08, -1.761415656270067e-08, -1.762124022136236e-08, -1.759481987666236e-08, -1.760878037557838e-08, -1.760878037557838e-08, -1.712993788498286e-06, -1.712447169172998e-06, -1.697684098274629e-06, -1.703087486270439e-06, -1.703219599180987e-06, -3.379756969556002e-05, -1.306855727886800e-03, -4.799738946525627e-03, -4.144881843884445e-03, -4.509006474748112e-03, -4.420565244310241e-03, -4.420565244310241e-03, -4.981131026562801e-01, -5.173700493137335e-01, -5.080773390965309e-04, -7.983831548635462e-02, -2.918874224503203e-01, -2.918874224503205e-01, 5.808111971893943e+01, 5.519267751156567e+01, 2.687889073744907e+00, 1.090091530793986e+02, 9.517593627096281e+01, 9.517593627096281e+01, 4.633722466148998e-06, 4.611274846202960e-06, 4.632450159192156e-06, 2.477612850511194e-07, 4.622433189905913e-06, 4.622433189905913e-06, -1.965458512324824e-05, -1.881484685373688e-05, -2.024427577363512e-05, -1.953888099224388e-05, -1.888445054764040e-05, -2.015298653878554e-04, 1.693392865300888e-01, 2.549691617436166e-02, -9.578391062508536e-02, 1.770617118642205e-01, 8.858698650044433e-02, -3.204920569877372e-03, -6.251198511540536e-01, -1.690013318425383e-01, -7.467825563164805e-01, 6.592101393787667e-04, 8.273435543177522e-02, 8.273435543177476e-02, -8.042913405165380e+02, 1.044120926676103e+02, 5.766680943999346e+02, -1.888819988682654e+00, -1.175535846430875e+03, 2.396860403840135e+02, 2.044045207406012e-02, 2.323527168293949e-02, 3.386587172904792e-02, 2.136776526499314e-02, 2.176710447316101e-02, 2.176710447316101e-02, 2.313223805000370e-02, -3.787349573233485e-01, 1.259341200145591e-01, 4.864927262115785e-02, 7.226674298410932e-02, -2.266305215216156e-02, 2.606061349505603e-02, -8.446818728501210e-02, -1.613318315549316e-01, -1.985092712203191e-02, -1.767396520372599e-01, -1.767396520372600e-01, -5.573513748277137e-03, 2.901126322089160e+00, 1.657719519767758e+00, -5.013250321050938e-01, -1.335933946210185e+00, 8.818873332823047e-01, 2.183892163901042e+01, 8.573201623352368e+02, 5.445621505048367e+02, 1.069848379178508e+00, 3.360369132479721e+02, 3.360369132479733e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mvsbs_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvsbs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [5.391662240552937e-03, 5.392090489837524e-03, 5.393811550500364e-03, 5.387474312942449e-03, 5.390819872334965e-03, 5.390819872334965e-03, -2.508941506180557e-03, -2.510256999638537e-03, -2.545187872996714e-03, -2.530772564064843e-03, -2.532576830570355e-03, 2.276627736883956e-02, -3.005955109101165e-03, 2.505051400374959e-02, 2.072867728834005e-02, 2.267971747652924e-02, 2.220961433899747e-02, 2.220961433899747e-02, 5.256145099050826e-02, 5.555752711541008e-02, -8.904658188165033e-04, 2.163443933782058e-02, 3.182275123449033e-02, 3.182275123449037e-02, 2.943275816679310e-04, 3.261580629315774e-04, 2.725015200680206e-03, 1.063674695771170e-04, 1.842892739243325e-04, 1.842892739243325e-04, -1.034745990934513e-02, -1.030313300606343e-02, -1.034490986007853e-02, -8.367669223107683e-04, -1.032518458664759e-02, -1.032518458664759e-02, -2.947648682142282e-03, -3.174909794908533e-03, -2.779637275843068e-03, -2.972044273478648e-03, -3.162340436480930e-03, 2.488013411344210e-02, -5.420955674689474e-01, -1.044240963962091e-01, 2.444177249755748e-01, -5.043352122814283e-01, -2.972707665887913e-01, 5.366774881657586e-02, -2.686899071574388e-04, 2.828745039490924e-02, -2.200187689129706e-04, -7.381505386533818e-02, 1.901939072126931e-02, 1.901939072126933e-02, -7.840492657404067e-09, 9.518266303616399e-05, 2.350493950066507e-04, -8.461858078205496e-05, -4.941743974908698e-08, 1.708013535278756e-04, -6.640816749038096e-02, -7.412774204961874e-02, -1.279173416879927e-01, -6.896919574778375e-02, -7.007290371373884e-02, -7.007290371373884e-02, -6.919637630286092e-02, 7.187061956241179e-01, -2.732570757438419e-01, -1.202479878600368e-01, -1.671919083777930e-01, 1.301564114499577e-01, -1.229874111033892e-01, -3.398486790735866e-03, 5.273247218153954e-02, -1.593745975079470e-02, 8.135877745714087e-02, 8.135877745714086e-02, -2.112261874421087e-02, 2.572872398546671e-03, 3.818861400717524e-03, 3.014803438011026e-01, -2.372457149703665e-04, 1.077216315671148e-02, 3.111627603175089e-04, 1.492523977392099e-05, 8.768432540850151e-05, 1.029532887373441e-02, 1.897157291870379e-04, 1.897157291870377e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
