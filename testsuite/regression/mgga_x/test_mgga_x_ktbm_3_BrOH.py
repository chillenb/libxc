
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_3_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.113462701655504e+01, -2.113471818387307e+01, -2.113515899254787e+01, -2.113366951277656e+01, -2.113467475742908e+01, -2.113467475742908e+01, -3.093075515267500e+00, -3.093162490795846e+00, -3.095893882426494e+00, -3.095082427533419e+00, -3.093114371016007e+00, -3.818837558783569e+00, -5.547272139945360e-01, -7.026001736285929e-01, -6.771724591380164e-01, -6.854941225591313e-01, -7.032335342806426e-01, -7.032335342806426e-01, -1.903269759633475e-01, -1.934827606551185e-01, -6.583033244493741e-01, -1.296872297392371e-01, -1.912628469241518e-01, -1.912628469241518e-01, -9.672615594083393e-03, -1.013198030692781e-02, -4.134099846622902e-02, -4.638721798287834e-03, -1.002640124270098e-02, -1.002640124270098e-02, -5.662225015674258e+00, -5.662470029049484e+00, -5.662247074671541e+00, -5.268904832021819e+00, -5.662354904363216e+00, -5.662354904363216e+00, -1.698646859052152e+00, -1.717785085735610e+00, -1.690734150286641e+00, -1.705659010729107e+00, -1.722073566624593e+00, -2.153546232371026e+00, -6.404747926780461e-01, -6.906020477711490e-01, -6.069893699913662e-01, -6.333664161096894e-01, -6.642971630669937e-01, -5.748606687455722e-01, -8.183262362084039e-02, -1.854516989156583e-01, -8.072081415527731e-02, -2.113197874020159e+00, -1.098011677763953e-01, -1.098011677763953e-01, -4.036395804181609e-03, -5.114194981690593e-03, -3.833146577802646e-03, -5.140201877815920e-02, -4.203079202025319e-03, -4.659798227140167e-03, -6.408122524439168e-01, -6.412009297402890e-01, -6.223258941944357e-01, -6.409976256650204e-01, -6.410569815150711e-01, -6.410569815150711e-01, -6.216182509478000e-01, -5.549255032526835e-01, -5.782263427898736e-01, -5.966712075699742e-01, -5.876540802438293e-01, -5.249159028187544e-01, -7.265039524365053e-01, -1.906087424129576e-01, -2.907373258277399e-01, -3.055687008101701e-01, -3.350642952041791e-01, -3.350642952041789e-01, -4.062486275206006e-01, -3.826063346253789e-02, -5.193199995519522e-02, -3.642366757678731e-01, -6.655286987204810e-02, -7.601283123825511e-02, -1.133560715251669e-02, -1.400085299547973e-03, -2.659713346837427e-03, -7.251443822955364e-02, -3.960174051615958e-03, -3.960174051615951e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_3_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.064271804306532e+01, -3.064279328186357e+01, -3.064318362773347e+01, -3.064195051717363e+01, -3.064275726319656e+01, -3.064275726319656e+01, -4.705809784454155e+00, -4.705972950091758e+00, -4.711031965923561e+00, -4.709453176431767e+00, -4.705877466082987e+00, -4.471288857234036e+00, -7.811573153747106e-01, -8.501226547957473e-01, -8.219046539652364e-01, -8.310192580757416e-01, -8.508049503091486e-01, -8.508049503091486e-01, -2.310589299284434e-01, -2.347030879461497e-01, -8.852036564707801e-01, -1.568210126489749e-01, -2.321458685443906e-01, -2.321458685443906e-01, -1.165080012966742e-02, -1.220410361801424e-02, -4.979705829016748e-02, -5.587442104264317e-03, -1.207693211322319e-02, -1.207693211322319e-02, -6.978411008929664e+00, -6.982027638517316e+00, -6.978804433634536e+00, -7.457008763916021e+00, -6.980232572114693e+00, -6.980232572114693e+00, -2.555375630412899e+00, -2.591607230661038e+00, -2.539961311507167e+00, -2.568644883491173e+00, -2.599855060077090e+00, -2.537993690535431e+00, -7.475619652996229e-01, -8.303234453608674e-01, -7.075964495914413e-01, -7.426892609449370e-01, -7.801358444079848e-01, -8.593258406705894e-01, -1.071891100059826e-01, -2.253817242643063e-01, -1.056644029842437e-01, -2.483824041654918e+00, -1.326864234732643e-01, -1.326864234732643e-01, -5.381435548755763e-03, -6.160157365545408e-03, -4.617106306904402e-03, -6.796099009515370e-02, -5.603620409933336e-03, -5.612827439718738e-03, -8.358776865385721e-01, -8.197997822238124e-01, -8.499235854998745e-01, -8.298964600311010e-01, -8.276549684110386e-01, -8.276549684110386e-01, -8.048860968537470e-01, -6.469437632051663e-01, -6.825176640526329e-01, -7.237498564876778e-01, -7.016453219715431e-01, -7.677403977941627e-01, -8.628653116142727e-01, -2.593450279755274e-01, -3.511171319493153e-01, -4.605419687999392e-01, -3.995179745187547e-01, -3.995179745187544e-01, -6.189034244839836e-01, -4.608575773710419e-02, -6.255906801573742e-02, -4.260097101769112e-01, -8.732875219588015e-02, -9.164648223249645e-02, -1.365391016372339e-02, -1.686435218117913e-03, -3.203684751313483e-03, -8.742803752626653e-02, -4.770116035768417e-03, -4.770116035768403e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_3_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.367688973142464e-08, -1.367683004462873e-08, -1.367645920048021e-08, -1.367744615336511e-08, -1.367685903211216e-08, -1.367685903211216e-08, -1.255827736013086e-05, -1.256017075548309e-05, -1.261528942409177e-05, -1.258993027389285e-05, -1.255856400597215e-05, -1.478928797830542e-05, -4.428909672977151e-03, -5.447604808907679e-03, -5.119347320934905e-03, -5.354693289494722e-03, -5.456229961930755e-03, -5.456229961930755e-03, -8.027840201781055e-01, -8.057785885836960e-01, -1.286065872148266e-03, -6.217253115082497e-01, -8.030516376290315e-01, -8.030516376290315e-01, -1.461096484661806e+02, -1.327781636098426e+02, -5.178539993801124e+00, -3.748098345129506e+02, -1.386697557055890e+02, -1.386697557055889e+02, -4.384178691482243e-06, -4.383388719673061e-06, -4.384108211374805e-06, -4.118238777712781e-06, -4.383764054873857e-06, -4.383764054873857e-06, -1.067128644357974e-04, -1.072359460524879e-04, -1.063365912779803e-04, -1.068449424246745e-04, -1.075270496901444e-04, -1.279266597214383e-04, -2.366279056912346e-02, -1.960384498930425e-02, -2.620998501684587e-02, -2.591312342509892e-02, -2.160865694239668e-02, -1.921887007506976e-02, -6.374555467293509e-01, -3.990968421921401e-01, -7.215297776345320e-01, -2.119704417549523e-04, -1.034881011200309e+00, -1.034881011200309e+00, -2.528727998283005e+02, -3.465936964668882e+02, -1.223427907766312e+03, -1.340019244186217e+00, -2.355738929619433e+02, -4.633429301237885e+02, -2.592128509732032e-02, -2.628365236317575e-02, -2.547032929524015e-02, -2.606395749457732e-02, -2.611486239847760e-02, -2.611486239847760e-02, -2.946689906512526e-02, -4.087787196227451e-02, -3.848269365263967e-02, -3.541847805602259e-02, -3.705959768551827e-02, -3.373021614709116e-02, -1.570873479460494e-02, -2.156473445071074e-01, -2.034038595377727e-01, -1.051737748027571e-01, -1.705793039989194e-01, -1.705793039989194e-01, -4.527001161286549e-02, -5.758692465433904e+00, -3.089561171798324e+00, -1.831252142535122e-01, -1.207674252345468e+00, -1.956073384617005e+00, -6.639340461590544e+01, -4.854756788046610e+03, -1.887230650215202e+03, -2.352886297409798e+00, -7.604148000808339e+02, -7.604148000808354e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_3_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.444208813199244e-03, 1.444213602699016e-03, 1.444231616511442e-03, 1.444154090421204e-03, 1.444211356088748e-03, 1.444211356088748e-03, 4.379326147534095e-03, 4.380673100729445e-03, 4.421053675016318e-03, 4.405060307891982e-03, 4.379679213101208e-03, 1.112054833222952e-02, 3.881280267542848e-03, 3.277196139955274e-02, 2.852874207549063e-02, 3.051173570285367e-02, 3.288195754204382e-02, 3.288195754204382e-02, 9.963977544926184e-02, 1.039916710703586e-01, 3.247696508678149e-04, 2.688801209714875e-02, 1.008589774991017e-01, 1.008589774991017e-01, 2.456984696367446e-03, 2.566696097370285e-03, 6.910947621985065e-03, 6.940899823052528e-04, 2.597664496858677e-03, 2.597664496858656e-03, 7.464657773254746e-03, 7.456341092300329e-03, 7.463745215695727e-03, 6.261641103288169e-03, 7.460479060227895e-03, 7.460479060227895e-03, 5.578724396166081e-03, 5.938014723109153e-03, 5.419305888792417e-03, 5.705032983500944e-03, 6.033309439269948e-03, 1.826766934563236e-02, 7.251246868103255e-02, 6.458119003419151e-02, 7.409994284560939e-02, 7.342728990655217e-02, 6.992008373412900e-02, 4.410967191930727e-02, -1.150628807788082e-03, 4.945028895019587e-02, -1.274102500416982e-03, 2.196024737938672e-02, 2.712944188793350e-02, 2.712944188793350e-02, -3.658474660744926e-07, 8.602052501531346e-04, 1.278530616099090e-03, -3.529193467505236e-04, -4.212970577519763e-07, 8.698448666225746e-04, 5.767187143561116e-02, 6.050937513578711e-02, 5.606891141560073e-02, 5.871907055804998e-02, 5.911439990416333e-02, 5.911439990416333e-02, 6.053501311064734e-02, 8.328563372883958e-02, 7.980864931294185e-02, 7.337129745891981e-02, 7.695892833197987e-02, 5.589754407878921e-02, 6.286800806689388e-02, 3.049492674102823e-03, 8.524104668668676e-02, 3.250564413659048e-02, 9.963957221872279e-02, 9.963957221872283e-02, 3.639189344588081e-02, 6.074708362415126e-03, 8.228370290070284e-03, 1.180710403425027e-01, -1.103125369162914e-03, 1.673991764292889e-02, 1.796551813788067e-03, 2.471403081656903e-04, 6.587031032488583e-04, 1.748002476445245e-02, 8.762169376554194e-04, 8.762169376554128e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
