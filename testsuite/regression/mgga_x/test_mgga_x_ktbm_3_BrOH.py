
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_3_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.324341106168286e+01, -2.324346243768656e+01, -2.324381039149725e+01, -2.324297202071326e+01, -2.324343709469232e+01, -2.324343709469232e+01, -3.398214301348020e+00, -3.398299993963128e+00, -3.401132796091602e+00, -3.402223092126042e+00, -3.398241945629055e+00, -3.398241945629055e+00, -6.055416742029205e-01, -6.050415252238821e-01, -5.933410639831098e-01, -6.030651300060442e-01, -6.053651634933339e-01, -6.053651634933339e-01, -1.851493099875345e-01, -1.875133937401987e-01, -6.838431915040342e-01, -1.226105838716520e-01, -1.857928289916484e-01, -1.857928289916484e-01, -9.647667155704630e-03, -1.009902059659468e-02, -4.061694814072244e-02, -4.468707314077018e-03, -9.998071952265876e-03, -9.998071952265875e-03, -5.659549548455073e+00, -5.659824594971512e+00, -5.659608668463962e+00, -5.659820895290624e+00, -5.659649107191928e+00, -5.659649107191928e+00, -2.073561361291099e+00, -2.099346349754327e+00, -2.071542116375502e+00, -2.092147787219417e+00, -2.093488114011428e+00, -2.093488114011428e+00, -5.982284257019411e-01, -6.412519509034921e-01, -5.502631687932052e-01, -5.685249443777519e-01, -6.287331071118931e-01, -6.287331071118931e-01, -9.110955641598088e-02, -1.822779659505744e-01, -8.999858624810392e-02, -1.882333447126062e+00, -1.069847518006862e-01, -1.069847518006862e-01, -4.381779917412221e-03, -4.962400750760342e-03, -3.778295534701495e-03, -5.554749315635233e-02, -4.487204002020188e-03, -4.487204002020188e-03, -6.348340296552147e-01, -6.354140149452819e-01, -6.352481303279485e-01, -6.350854955005533e-01, -6.351679611034240e-01, -6.351679611034240e-01, -6.100429600725230e-01, -5.494139262786542e-01, -5.704855530701037e-01, -5.870683669299155e-01, -5.785104629734386e-01, -5.785104629734387e-01, -6.631691779230586e-01, -2.360857591595921e-01, -2.815622514795781e-01, -3.542495444148467e-01, -3.194249446436753e-01, -3.194249446436753e-01, -4.734906898778830e-01, -3.786336856194655e-02, -5.080639950838046e-02, -3.340043884300646e-01, -7.418048179610159e-02, -7.418048179610159e-02, -1.093311394220702e-02, -1.335640778211378e-03, -2.631595621924985e-03, -7.064972139417625e-02, -3.807860712410056e-03, -3.807860712410050e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_3_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.833086585208988e+01, -2.833096371812897e+01, -2.833135715021443e+01, -2.832975153333051e+01, -2.833091787467265e+01, -2.833091787467265e+01, -4.631202371666240e+00, -4.631289153814571e+00, -4.634008677289897e+00, -4.632736778349900e+00, -4.631252237131242e+00, -4.631252237131242e+00, -8.103118476653459e-01, -8.090619747308264e-01, -7.792165743541674e-01, -7.926231345242849e-01, -8.098670488773452e-01, -8.098670488773452e-01, -2.287187067177629e-01, -2.321545980336016e-01, -9.073909308464803e-01, -1.531278569045073e-01, -2.297100092737806e-01, -2.297100092737806e-01, -1.165362177935987e-02, -1.220777619059229e-02, -4.978700701468553e-02, -5.603001230471681e-03, -1.208009816659054e-02, -1.208009816659054e-02, -6.981840443070004e+00, -6.985421586789009e+00, -6.982186713276663e+00, -6.984972368233556e+00, -6.983702409244979e+00, -6.983702409244979e+00, -2.529088606166980e+00, -2.547082233956426e+00, -2.520069971996009e+00, -2.534083462164439e+00, -2.553387074892046e+00, -2.553387074892046e+00, -7.821578450456957e-01, -8.858356922722532e-01, -7.407160124745197e-01, -8.005656617891341e-01, -8.142257648133367e-01, -8.142257648133367e-01, -1.123553681866494e-01, -2.235219919520324e-01, -1.109875066301130e-01, -2.696229850721012e+00, -1.314034929878233e-01, -1.314034929878233e-01, -5.400180336472380e-03, -6.175080123323637e-03, -4.623289335886222e-03, -6.937067178475834e-02, -5.628470604750731e-03, -5.628470604750730e-03, -8.438244706512764e-01, -8.274623334988465e-01, -8.332185463435056e-01, -8.377528278137943e-01, -8.354770245524533e-01, -8.354770245524533e-01, -8.201384663814957e-01, -6.513924894047904e-01, -6.906849352925178e-01, -7.354435970980570e-01, -7.120970208305138e-01, -7.120970208305142e-01, -9.286759751705059e-01, -2.892708488850746e-01, -3.483453623053421e-01, -4.573145421886971e-01, -3.992212949727720e-01, -3.992212949727718e-01, -5.951716365050731e-01, -4.609124599002805e-02, -6.248291355792117e-02, -4.391473828342787e-01, -9.115658850201634e-02, -9.115658850201636e-02, -1.368756679600122e-02, -1.691730024504016e-03, -3.206992284887957e-03, -8.692729132668926e-02, -4.783726709654785e-03, -4.783726709654781e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_3_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.481705359645187e-08, -1.481696534952846e-08, -1.481650222470517e-08, -1.481795753400839e-08, -1.481700752424546e-08, -1.481700752424546e-08, -1.349832216769984e-05, -1.350032981863584e-05, -1.355914995405043e-05, -1.353795761325199e-05, -1.349858482143199e-05, -1.349858482143199e-05, -4.791270086963681e-03, -4.781424732865284e-03, -4.531617339228218e-03, -4.773127327546371e-03, -4.788267641826644e-03, -4.788267641826644e-03, -7.828404808112241e-01, -7.834584264693895e-01, -1.345162857674315e-03, -5.603245954408042e-01, -7.821805347248740e-01, -7.821805347248740e-01, -1.447702396481115e+02, -1.312424153658281e+02, -4.881552521626524e+00, -3.211218872594391e+02, -1.372780018391213e+02, -1.372780018391213e+02, -4.382368994961844e-06, -4.381598959888789e-06, -4.382323532300812e-06, -4.381722172115124e-06, -4.381933659974512e-06, -4.381933659974512e-06, -1.246082184385004e-04, -1.252935828376754e-04, -1.245532100916797e-04, -1.252201165251380e-04, -1.251039533584243e-04, -1.251039533584243e-04, -2.239667735384755e-02, -1.841394257847846e-02, -2.425575178444953e-02, -2.373821434863721e-02, -2.065600918844917e-02, -2.065600918844917e-02, -9.405972192656227e-01, -3.910236366753894e-01, -1.057107156934640e+00, -1.929054921072778e-04, -9.852952211462580e-01, -9.852952211462580e-01, -4.586225052032334e+02, -3.071778331937762e+02, -1.158918908402261e+03, -2.078900435573495e+00, -3.962278210824575e+02, -3.962278210824571e+02, -2.569989174262521e-02, -2.606993300647329e-02, -2.594731174502784e-02, -2.584517295181951e-02, -2.589701487153807e-02, -2.589701487153807e-02, -2.896776608792535e-02, -4.054975145833831e-02, -3.805412882836095e-02, -3.492848364931687e-02, -3.657244656166733e-02, -3.657244656166733e-02, -1.456295366483358e-02, -2.679953155127283e-01, -1.979520287196028e-01, -1.179137574246422e-01, -1.641839965918717e-01, -1.641839965918718e-01, -5.095853950258678e-02, -5.561642470030485e+00, -2.879839105452906e+00, -1.710749134168184e-01, -1.839098034456994e+00, -1.839098034456994e+00, -5.729404069461416e+01, -3.955457405419274e+03, -1.814242849172099e+03, -2.202248483717431e+00, -6.455367680925918e+02, -6.455367680925932e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_3_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_3_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.871226698153562e-03, 1.871217866663921e-03, 1.871191726985764e-03, 1.871336867745253e-03, 1.871221919721683e-03, 1.871221919721683e-03, 7.104133936718105e-03, 7.105502661079391e-03, 7.147589318420587e-03, 7.148353437418120e-03, 7.104366938208904e-03, 7.104366938208904e-03, 1.344126352535795e-02, 1.339604388680537e-02, 1.250740043657594e-02, 1.429087308077663e-02, 1.342736632896913e-02, 1.342736632896913e-02, 8.699400020381688e-02, 8.932194025107634e-02, 2.837905588828963e-03, 1.604435736488866e-02, 8.748035162067173e-02, 8.748035162067173e-02, 2.385682133442825e-03, 2.472842185576701e-03, 5.639116081607591e-03, 4.125719341552766e-04, 2.515144630745102e-03, 2.515144630745085e-03, 7.456215210020742e-03, 7.448017452429411e-03, 7.455422225138323e-03, 7.449045542392487e-03, 7.451953234606623e-03, 7.451953234606623e-03, 1.619475884550733e-02, 1.668565945963069e-02, 1.623247583492617e-02, 1.664151600529220e-02, 1.646906229448402e-02, 1.646906229448402e-02, 5.834789076558844e-02, 5.288231211729386e-02, 5.243777442538061e-02, 5.232901329494311e-02, 5.930098275345939e-02, 5.930098275345939e-02, 1.215500868545607e-02, 4.452220625072595e-02, 1.319228542826803e-02, 1.534427798016542e-02, 2.176840527213963e-02, 2.176840527213963e-02, 6.343483130492008e-04, 5.762866395099686e-04, 1.073043344238492e-03, 5.342167362301705e-03, 5.134891631933691e-04, 5.134891631933715e-04, 5.666360389858790e-02, 5.938447755332160e-02, 5.842063805895296e-02, 5.766595836789531e-02, 5.804431580088788e-02, 5.804431580088788e-02, 5.835686785055394e-02, 8.073917093070089e-02, 7.680867210062176e-02, 7.039862888817193e-02, 7.375978633089630e-02, 7.375978633089642e-02, 4.837161827250287e-02, 6.397745662104912e-02, 7.378083434786267e-02, 7.486811777250514e-02, 8.200521325320331e-02, 8.200521325320333e-02, 7.254724939581408e-02, 5.402098119711378e-03, 6.408770196189001e-03, 8.595153893152194e-02, 1.310520094867513e-02, 1.310520094867513e-02, 1.093010260751255e-03, 1.221271029722910e-04, 5.802494058723041e-04, 1.343108397749851e-02, 5.038259353617492e-04, 5.038259353617508e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
