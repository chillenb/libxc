
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_modtpss_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_modtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.990391377412480e+01, -1.990397421011460e+01, -1.990425804443654e+01, -1.990335889573926e+01, -1.990382786975947e+01, -1.990382786975947e+01, -3.234944274553457e+00, -3.234940169035268e+00, -3.234891083518711e+00, -3.235203454901593e+00, -3.234833775077382e+00, -3.704409796758570e+00, -6.332783260003031e-01, -7.604392539987950e-01, -7.556339559705983e-01, -7.544751423213771e-01, -7.548116136704374e-01, -7.548116136704374e-01, -2.101943617653892e-01, -2.114682673746980e-01, -7.446297562288419e-01, -1.860980651865432e-01, -1.961815465167194e-01, -1.961815465167195e-01, -1.008829006956662e-02, -1.061760524553168e-02, -5.787202741612774e-02, -5.828512013975985e-03, -7.323013347979323e-03, -7.323013347979323e-03, -5.455737698364836e+00, -5.456727771070138e+00, -5.455786904391126e+00, -4.866507824758401e+00, -5.456237528161596e+00, -5.456237528161596e+00, -1.826757278562736e+00, -1.838583686591806e+00, -1.818240665491659e+00, -1.828627226147893e+00, -1.837414630838800e+00, -2.116734627569317e+00, -6.172241811352075e-01, -6.680489913015821e-01, -5.754830341900928e-01, -5.935703435209000e-01, -6.264231456531254e-01, -5.536247382153061e-01, -8.757031029975122e-02, -2.291156083075924e-01, -8.102718564975862e-02, -2.015826171372793e+00, -1.569865908777879e-01, -1.569865908777879e-01, -2.580266626392717e-03, -5.697973783051020e-03, -4.356551442501046e-03, -5.452631588912357e-02, -3.011503629504510e-03, -5.248413767738583e-03, -6.177132563798835e-01, -6.142230463081295e-01, -5.511033217035580e-01, -6.164746084568667e-01, -6.159686740888686e-01, -6.159686740888686e-01, -6.009827834559713e-01, -5.199448517601070e-01, -5.414398107686567e-01, -5.645248046108158e-01, -5.525603161902797e-01, -4.902445289179169e-01, -7.006699661057423e-01, -2.085659973049198e-01, -3.041061370822419e-01, -3.246225815311647e-01, -3.338037717875959e-01, -3.338037717875959e-01, -4.214536290800031e-01, -5.544527136097274e-02, -7.493176506799150e-02, -3.560165270940247e-01, -6.939555289989853e-02, -1.134142934843493e-01, -1.423482655099550e-02, -1.523295930357107e-03, -3.197243146746034e-03, -1.070531195718812e-01, -4.856402541121419e-03, -4.856402541121416e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_modtpss_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_modtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.680343652264653e+01, -2.680351656620545e+01, -2.680389335678717e+01, -2.680270236676317e+01, -2.680332345159164e+01, -2.680332345159164e+01, -4.242675846994047e+00, -4.242719571542516e+00, -4.243955546360267e+00, -4.243838452243452e+00, -4.243409925615888e+00, -4.385258560361553e+00, -8.236538745643285e-01, -7.404775102645174e-01, -7.047349237081421e-01, -7.173758961082782e-01, -7.144551445259083e-01, -7.144551445259083e-01, -1.843412419184360e-01, -1.869676915660655e-01, -9.792375961189348e-01, -1.786890582919282e-01, -1.736373886701490e-01, -1.736373886701491e-01, -1.343678104778427e-02, -1.413981923782765e-02, -7.521034680729556e-02, -7.768993822677154e-03, -9.758503977230286e-03, -9.758503977230286e-03, -6.723435541741384e+00, -6.723198242336609e+00, -6.723412559584871e+00, -6.542623349137469e+00, -6.723322607929897e+00, -6.723322607929897e+00, -2.377351668297459e+00, -2.395720998718805e+00, -2.364246107533603e+00, -2.380104571348953e+00, -2.394017260989055e+00, -2.426090660520000e+00, -7.653722020176156e-01, -8.297278324116316e-01, -6.940822875421224e-01, -7.364755064884039e-01, -7.794252149519547e-01, -7.428958865579510e-01, -1.165700060007698e-01, -2.017703238512560e-01, -1.078859935541236e-01, -2.511391463262048e+00, -1.601592549520263e-01, -1.601592549520263e-01, -3.440351105338703e-03, -7.595229266261883e-03, -5.806104947895542e-03, -7.265380963186556e-02, -4.015324251353923e-03, -6.995036167393080e-03, -7.400804968321179e-01, -7.448679470595432e-01, -7.378070358845130e-01, -7.419461684653132e-01, -7.426627314790600e-01, -7.426627314790600e-01, -7.213126822759584e-01, -6.362668695362740e-01, -6.745655363535490e-01, -7.006624780877411e-01, -6.888565216447576e-01, -6.600674121018475e-01, -8.730912992795833e-01, -2.741094687120513e-01, -2.850657847934146e-01, -4.222323364953199e-01, -3.497326225765317e-01, -3.497326225765318e-01, -5.538923964803655e-01, -7.219980472576110e-02, -9.585599815490704e-02, -4.258276216921713e-01, -9.240440760601658e-02, -1.323018154318331e-01, -1.895203918410256e-02, -2.031017506892230e-03, -4.262306027404787e-03, -1.262144314365695e-01, -6.472508907063782e-03, -6.472508907063776e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_modtpss_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_modtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.877498106595157e-09, -6.877536658722346e-09, -6.877638016104720e-09, -6.877073727113973e-09, -6.877379146805348e-09, -6.877379146805348e-09, -4.843114619905731e-06, -4.844174770204570e-06, -4.871865528111476e-06, -4.858894155661691e-06, -4.862303937793705e-06, -5.554222553229637e-06, -1.897748775123421e-03, -3.629973076480106e-03, -3.890356932301789e-03, -3.840211171287421e-03, -3.850923815878798e-03, -3.850923815878798e-03, -6.818712970577647e-01, -6.628963991136785e-01, -7.094481108122765e-04, -7.528396954118162e-01, -8.076014297098316e-01, -8.076014297098316e-01, -2.091433259657163e+00, -2.179452432113947e+00, -1.046210338154993e+00, -1.534096953376705e+00, -2.135789858889564e+00, -2.135789858889564e+00, -5.877835734125096e-06, -5.938229831159956e-06, -5.881322059037102e-06, -2.437632786954490e-06, -5.907966455333866e-06, -5.907966455333866e-06, -4.023780987864127e-05, -4.052607757330996e-05, -3.995954514808409e-05, -4.022470211041618e-05, -4.055275094488463e-05, -5.152372572264995e-05, -9.922932066186363e-03, -1.687543821769709e-02, -9.961089192064313e-03, -1.178915191011524e-02, -1.053687079298812e-02, -8.733045217018042e-03, -1.963894569898562e+00, -4.411622629129167e-01, -2.614534405574937e+00, -1.063885146435544e-04, -1.130362345502589e+00, -1.130362345502589e+00, -2.138099975380205e+06, -1.356106908346397e+00, -1.096596626598686e+01, -1.173139439197306e+01, -1.152647259240988e+06, -4.208267448161568e+00, -1.801986820701048e-01, -8.246990607880064e-02, -2.776842099759113e-02, -1.288187483956352e-01, -1.148276565376677e-01, -1.148276565376677e-01, -1.741981944551121e-01, -1.624389507779365e-02, -2.049025178339749e-02, -3.462831878581445e-02, -2.550133409640060e-02, -1.682774455465853e-02, -1.056997232384755e-02, -1.175921269832542e-01, -1.475694178800574e-01, -3.970167596718299e-02, -9.017213067639065e-02, -9.017213067639064e-02, -1.745445410776949e-02, -1.062892657851593e+00, -9.286258510532576e-01, -6.632421474400665e-02, -4.828149376122373e+00, -1.433311536054918e+00, -9.994898787111864e-01, -1.660327171730592e+00, -4.760634775179165e+00, -1.572994053572077e+00, -5.997702942980217e+00, -5.997702942980217e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_modtpss_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_modtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.553103355137545e-04, 1.553139682816644e-04, 1.553283468305688e-04, 1.552745988728305e-04, 1.553030139351567e-04, 1.553030139351567e-04, -5.306611526724353e-04, -5.304278808121622e-04, -5.241729159643874e-04, -5.266753939383726e-04, -5.264632254956952e-04, 1.747979052145159e-03, -1.977316349178808e-03, 1.733928616588566e-03, 1.247253781702396e-03, 1.459831658943555e-03, 1.408255114822199e-03, 1.408255114822199e-03, 2.271233948502715e-03, 2.563181532578871e-03, -5.518747293747750e-04, 2.466866341515577e-04, 6.714379167186370e-04, 6.714379167186352e-04, 1.478413205907680e-10, 2.031807304133809e-10, 3.508699727133228e-07, 5.964756817412439e-12, 3.070172589966720e-11, 3.070172589966720e-11, 1.313198152301391e-02, 1.327621587815612e-02, 1.314024671178354e-02, 7.827549275532276e-04, 1.320397282146586e-02, 1.320397282146586e-02, -1.123920813889822e-03, -1.103175360280430e-03, -1.132433002676997e-03, -1.121759323032141e-03, -1.104940080954716e-03, 2.165713529013229e-03, 2.596338687423230e-02, 6.822891954538250e-02, 1.454307534563974e-02, 2.771080594107428e-02, 3.069883686630388e-02, 2.203736535011386e-03, -1.039482586459168e-04, 6.282182075534980e-04, -8.335690186733466e-05, 1.065069034412802e-02, 1.422644861208214e-04, 1.422644861208214e-04, -2.553531180824801e-09, 4.426158302867056e-12, 2.660788776263955e-11, -2.983222779093524e-05, -1.609925139437391e-08, 1.604943797289670e-11, 5.853247290769745e-01, 2.635614949720707e-01, 7.759518702218329e-03, 4.159698772242446e-01, 3.699228832193802e-01, 3.699228832193800e-01, 5.210976184704856e-01, 2.097334425079541e-02, 3.978107641229599e-02, 8.469576931637976e-02, 5.639467951594009e-02, 5.127887292443394e-03, 4.811389673154626e-02, -2.128043682102258e-03, 3.232544324129957e-03, -6.340319611859287e-03, 6.675520717254476e-03, 6.675520717254487e-03, -3.727785199889203e-03, 2.882085132940088e-07, 1.122802931813627e-06, 2.080072471827785e-02, -8.938608469360378e-05, 2.335574107188187e-05, 2.735317376674332e-10, 8.182001632030641e-15, 1.618861526177203e-12, 1.937658189455550e-05, 1.852368607604205e-11, 1.852368607607297e-11]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
