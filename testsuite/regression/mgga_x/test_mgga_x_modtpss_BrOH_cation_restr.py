
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_modtpss_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_modtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.225938893441254e+01, -2.225945080638322e+01, -2.225981551081935e+01, -2.225889699917739e+01, -2.225936546798519e+01, -2.225936546798519e+01, -3.444213071470372e+00, -3.444216771498047e+00, -3.444561844487917e+00, -3.446509360387715e+00, -3.445196528158447e+00, -3.445196528158447e+00, -6.693157415761097e-01, -6.691304732545789e-01, -6.670285960584398e-01, -6.733597035064339e-01, -6.711609477046683e-01, -6.711609477046683e-01, -2.077004751664489e-01, -2.084471788781808e-01, -7.658032383618030e-01, -1.797580742441324e-01, -1.901437293501658e-01, -1.901437293501658e-01, -1.008824510284169e-02, -1.061750675081723e-02, -5.778482683425715e-02, -5.828404455475638e-03, -7.322864838574383e-03, -7.322864838574383e-03, -5.452194859927184e+00, -5.453190480559647e+00, -5.452315941023849e+00, -5.453192285997916e+00, -5.452660538243061e+00, -5.452660538243061e+00, -2.081462591297931e+00, -2.095574734639423e+00, -2.078189082209643e+00, -2.090522163119255e+00, -2.090942628752794e+00, -2.090942628752794e+00, -5.932313663215442e-01, -6.121461533079431e-01, -5.415783234284250e-01, -5.361955439452865e-01, -6.015089627716879e-01, -6.015089627716879e-01, -1.394612346500828e-01, -2.261042740858738e-01, -1.303903779572353e-01, -1.812786566469321e+00, -1.545811258396120e-01, -1.545811258396120e-01, -4.497244074221671e-03, -5.697745360351700e-03, -4.356412516007840e-03, -9.120350591316848e-02, -5.248139948067189e-03, -5.248139948067189e-03, -5.821606093772973e-01, -5.977325338081566e-01, -5.946583611214981e-01, -5.905562210324431e-01, -5.928233625766924e-01, -5.928233625766924e-01, -5.462568790703117e-01, -5.179567329905568e-01, -5.375756322730845e-01, -5.553089514197851e-01, -5.464477460735502e-01, -5.464477460735502e-01, -6.391882103262362e-01, -2.664418752260020e-01, -2.984728017097500e-01, -3.604670205973369e-01, -3.258714717373646e-01, -3.258714717373646e-01, -4.717890963109767e-01, -5.540837732593688e-02, -7.470678063178586e-02, -3.428000478965579e-01, -1.123222752315925e-01, -1.123222752315925e-01, -1.423159701232856e-02, -1.523269841279168e-03, -3.197226583486000e-03, -1.064768607401042e-01, -4.856217969399690e-03, -4.856217969399687e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_modtpss_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_modtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.755527230138792e+01, -2.755533848699553e+01, -2.755580942751216e+01, -2.755482853911112e+01, -2.755531728291618e+01, -2.755531728291618e+01, -4.184328462397993e+00, -4.184375128606471e+00, -4.185698284567391e+00, -4.185769744139179e+00, -4.185229486333588e+00, -4.185229486333588e+00, -7.802576065988375e-01, -7.786511570494052e-01, -7.366297824570169e-01, -7.460322235794243e-01, -7.446047061301615e-01, -7.446047061301615e-01, -1.829867694314810e-01, -1.857538712090622e-01, -9.298778135540222e-01, -1.635739452661736e-01, -1.637586500278415e-01, -1.637586500278415e-01, -1.343660141380851e-02, -1.413942571471476e-02, -7.486835937028020e-02, -7.768563683600726e-03, -9.757910187658004e-03, -9.757910187658004e-03, -6.717137640762497e+00, -6.716949777872558e+00, -6.717244153311825e+00, -6.717073981588679e+00, -6.716984297390771e+00, -6.716984297390771e+00, -2.391377208318541e+00, -2.423094144487274e+00, -2.369183152822631e+00, -2.397854769756103e+00, -2.419193194682653e+00, -2.419193194682653e+00, -7.232915747521421e-01, -7.879775632890818e-01, -6.573446915142337e-01, -6.945525924786254e-01, -7.351659025457953e-01, -7.351659025457953e-01, -1.542685191822294e-01, -1.966569013552129e-01, -1.473563871224411e-01, -2.378793489620895e+00, -1.532742683278268e-01, -1.532742683278268e-01, -5.994932344190552e-03, -7.594315764805796e-03, -5.805549425381679e-03, -1.117003055024665e-01, -6.993941223665250e-03, -6.993941223665250e-03, -7.319005075905566e-01, -7.311159367560526e-01, -7.300847817104852e-01, -7.299347788093175e-01, -7.298873307363125e-01, -7.298873307363125e-01, -7.185353560882620e-01, -6.328019061172352e-01, -6.652706442014071e-01, -6.829336130869006e-01, -6.748817080262385e-01, -6.748817080262384e-01, -8.256292092398423e-01, -2.322910997467958e-01, -2.858417158258417e-01, -4.189988147098256e-01, -3.522079607355419e-01, -3.522079607355419e-01, -5.631610405246230e-01, -7.205494117228378e-02, -9.498539182376949e-02, -4.106182654024950e-01, -1.284622695086537e-01, -1.284622695086537e-01, -1.893913552085979e-02, -2.030913153204097e-03, -4.262239782282879e-03, -1.241569515298028e-01, -6.471770845926993e-03, -6.471770845926988e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_modtpss_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_modtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.332168074869978e-08, -1.332206190164044e-08, -1.332291717888528e-08, -1.331726795798461e-08, -1.332034674871340e-08, -1.332034674871340e-08, -1.199194500169849e-05, -1.199422546267450e-05, -1.205262399837947e-05, -1.201367169653944e-05, -1.202754178114712e-05, -1.202754178114712e-05, -5.362619102504190e-03, -5.382723944341965e-03, -5.843478246279547e-03, -5.749128434965291e-03, -5.770812254670031e-03, -5.770812254670031e-03, -7.237577291162551e-01, -7.105728975577812e-01, -1.939881053256489e-03, -1.041556656026598e+00, -9.936909369438882e-01, -9.936909369438878e-01, -2.126662567583184e+00, -2.247276632808527e+00, -1.306030175830468e+00, -1.930371475361949e+00, -2.453494409153306e+00, -2.453494409153316e+00, -5.910282717857881e-06, -5.970538444154236e-06, -5.913105251764408e-06, -5.966282111536935e-06, -5.940682396737621e-06, -5.940682396737621e-06, -6.105114825425941e-05, -5.884459512697444e-05, -6.039354984724956e-05, -5.833052729280875e-05, -6.024039746574623e-05, -6.024039746574623e-05, -1.912352052342013e-02, -2.356035182298541e-02, -2.187759942211455e-02, -2.078755742445446e-02, -1.992328025125989e-02, -1.992328025125989e-02, -1.068444472714422e+00, -4.840451434897385e-01, -1.156304321766599e+00, -1.521289468002837e-04, -1.377213989854867e+00, -1.377213989854867e+00, -2.543091868457745e+00, -2.271938996947953e+00, -1.427166094041047e+01, -1.575355320805471e+00, -6.641372832398388e+00, -6.641372832398368e+00, -1.625944842479258e-01, -8.772704450249502e-02, -1.072222208080751e-01, -1.287398038903046e-01, -1.172602543239926e-01, -1.172602543239926e-01, -1.003344964843235e-01, -1.775136260912217e-02, -2.390832351237024e-02, -4.204289649948990e-02, -3.083263529961721e-02, -3.083263529961721e-02, -1.605745342361393e-02, -2.675659098017704e-01, -1.608399099624843e-01, -8.098063156947426e-02, -1.059710167622307e-01, -1.059710167622306e-01, -2.834941640896244e-02, -1.185383718190644e+00, -1.216159922972893e+00, -1.198390995219814e-01, -1.863407042690274e+00, -1.863407042690273e+00, -1.716110438818251e+00, -1.114427583906091e+01, -5.394448399999574e+00, -1.852574733684261e+00, -8.388402288169029e+00, -8.388402288169049e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_modtpss_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_modtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.839758455219723e-03, 1.839835378016284e-03, 1.840150613781291e-03, 1.839012760541763e-03, 1.839612570777632e-03, 1.839612570777632e-03, 2.566341983266922e-03, 2.567298600509676e-03, 2.594087821075381e-03, 2.597415423204779e-03, 2.591305175913728e-03, 2.591305175913728e-03, 3.644586670713425e-03, 3.651865105963801e-03, 3.635427008405520e-03, 4.119481540541219e-03, 3.973194691014450e-03, 3.973194691014450e-03, 3.336370692128762e-03, 3.971378687782448e-03, 5.391331888002338e-04, 4.163617170293441e-04, 1.288839897502428e-03, 1.288839897502425e-03, 1.419394592835288e-13, 1.145052569733993e-13, 1.952215928845178e-08, 3.736633993451719e-15, 1.919194325896191e-14, 1.919194325896226e-14, 1.308913396073346e-02, 1.323253687116957e-02, 1.309821494479256e-02, 1.322470049272340e-02, 1.316026009004608e-02, 1.316026009004608e-02, 2.755495553320510e-03, 2.839481131295045e-03, 2.511937338123967e-03, 2.575174141550919e-03, 2.927614049443489e-03, 2.927614049443489e-03, 3.154767911411693e-02, 2.975371099545917e-02, 2.115883085619816e-02, 1.242134076133433e-02, 3.489892351879985e-02, 3.489892351879985e-02, 2.001107464743869e-05, 1.011102642692329e-03, 1.299561013567256e-05, 3.279919842192107e-03, 1.642490033008221e-04, 1.642490033008224e-04, 2.312419042031388e-15, 8.006588743018405e-15, 2.987440801477668e-14, 1.236129376159975e-06, 3.576036445092372e-14, 3.576036445092345e-14, 2.880758959485487e-01, 2.113793457212172e-01, 2.441553326621097e-01, 2.718232105442177e-01, 2.582382944019181e-01, 2.582382944019179e-01, 7.382705340028990e-02, 2.239009238269122e-02, 4.150932375163013e-02, 8.121596071872249e-02, 5.721065048918881e-02, 5.721065048918879e-02, 2.111261189952062e-02, 2.098044832631229e-03, 5.377929062478229e-03, 2.083991022609173e-02, 1.185733933662226e-02, 1.185733933662227e-02, 2.123298670393142e-02, 1.004628406764657e-08, 1.307862952661715e-07, 3.324985904126270e-02, 1.084184818332614e-05, 1.084184818332613e-05, 2.863225679027832e-12, 1.327167981377547e-17, 2.533669420038312e-16, 8.223509102182429e-06, 2.671201650606424e-14, 2.671201650606426e-14])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
