
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mvsbs_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvsbs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.394487274214871e+01, -2.394507967253267e+01, -2.394603198138073e+01, -2.394265866399994e+01, -2.394498142957270e+01, -2.394498142957270e+01, -3.017758568247517e+00, -3.017718669606184e+00, -3.016620267284242e+00, -3.017288086593123e+00, -3.017761848584785e+00, -3.780305250330242e+00, -5.996089039302449e-01, -7.180249770478837e-01, -6.965586284131039e-01, -7.031646857032651e-01, -7.185468273759670e-01, -7.185468273759670e-01, -1.958943510870027e-01, -1.987463662196896e-01, -7.259514883322865e-01, -1.294210532582744e-01, -1.967478867895261e-01, -1.967478867895261e-01, -3.512622815902817e-03, -3.762330004659386e-03, -2.722385833734725e-02, -1.024303831956326e-03, -3.724522529513408e-03, -3.724522529513408e-03, -5.669442354399266e+00, -5.670461271544923e+00, -5.669549918018602e+00, -6.286928403176018e+00, -5.669960178478293e+00, -5.669960178478293e+00, -1.718360263308532e+00, -1.726700052707411e+00, -1.715071537223846e+00, -1.721600726439702e+00, -1.728124652333846e+00, -2.141316145935783e+00, -6.316915609975929e-01, -6.866155210046788e-01, -5.990573985442731e-01, -6.253540895398056e-01, -6.561524042084094e-01, -6.279623957156225e-01, -8.974917430723556e-02, -1.927642648843027e-01, -8.857738370234837e-02, -2.087764895215783e+00, -1.080820766641251e-01, -1.080820766641251e-01, -4.373986568598112e-03, -1.220794843401093e-03, -9.399801191150760e-04, -5.599662090312064e-02, -4.554631797220835e-03, -1.089824168390526e-03, -6.524117975115561e-01, -6.489153385650743e-01, -6.682124909070503e-01, -6.511367949850575e-01, -6.506528911693866e-01, -6.506528911693866e-01, -6.314696743597533e-01, -5.472325340526240e-01, -5.719234413036939e-01, -5.947168265784176e-01, -5.831129752676218e-01, -5.847231083590436e-01, -7.198221441894125e-01, -2.093605155822530e-01, -2.961924774751740e-01, -3.078780379895733e-01, -3.363121459980756e-01, -3.363121459980756e-01, -3.918717874965879e-01, -2.405101060687663e-02, -3.732809168064914e-02, -3.603067125520877e-01, -7.288947899386043e-02, -6.711175189949664e-02, -3.962119357629209e-03, -1.770693950135319e-04, -5.045022768058589e-04, -6.398371590067869e-02, -8.909651784450457e-04, -8.909651784450435e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mvsbs_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvsbs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-4.112051838338805e+01, -4.112122647315180e+01, -4.112440277738752e+01, -4.111287044065308e+01, -4.112089085624242e+01, -4.112089085624242e+01, -3.689556070910386e+00, -3.689424344677722e+00, -3.685573039789044e+00, -3.687363810886431e+00, -3.689537059198640e+00, -3.289356515527177e+00, -7.691378122778209e-01, -8.406561293352767e-01, -8.356532074673333e-01, -8.345431711045890e-01, -8.407424406018194e-01, -8.407424406018194e-01, -2.355946386976847e-01, -2.371317577234025e-01, -9.430112319866170e-01, -2.013654244308883e-01, -2.360824517475161e-01, -2.360824517475161e-01, -6.503919926712942e-03, -6.966176602808946e-03, -5.015064063747036e-02, -1.896773970049101e-03, -6.896172086844128e-03, -6.896172086844126e-03, -7.994258256899784e+00, -7.990576121755494e+00, -7.993841052627451e+00, -8.348035179786541e+00, -7.992414231786579e+00, -7.992414231786579e+00, -2.139192607650564e+00, -2.143178583922125e+00, -2.137812153122139e+00, -2.140999593190884e+00, -2.143246550381550e+00, -2.127932899183494e+00, -2.104478199515493e+00, -1.018723707657935e+00, -2.677342221775322e-01, -1.199449299086634e+00, -1.197381985894214e+00, -9.607366599390966e-01, -1.190168779154169e-01, -2.563760459893968e-01, -1.174275605274205e-01, -3.727416341404349e+00, -1.722490807041805e-01, -1.722490807041805e-01, -5.831874194434379e-03, -2.260620275996121e-03, -1.740615273902464e-03, -7.450062020438933e-02, -6.072719359667756e-03, -2.018096448457152e-03, -8.785183975808373e-01, -8.840147677535073e-01, -8.492927112445262e-01, -8.802937246401386e-01, -8.810380619908751e-01, -8.810380619908751e-01, -8.536577883895080e-01, -5.929969309510921e+03, -9.502662793535600e-01, -8.619376994789966e-01, -8.887205781167631e-01, -9.641746051059329e-01, -1.130099821509572e+00, -2.710808157196764e-01, -3.429336723601790e-01, -3.825622668798298e-01, -3.653420457325671e-01, -3.653420457325671e-01, -4.760566075891861e-01, -4.437353358655844e-02, -6.842243783353065e-02, -2.990155136635075e-01, -9.673150876916270e-02, -1.176828278999539e-01, -7.336348141236526e-03, -3.278947576782346e-04, -9.342263441811445e-04, -1.122301175232019e-01, -1.649860131915195e-03, -1.649860131915191e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mvsbs_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvsbs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.760858690979895e-08, -1.761014118934744e-08, -1.761679054236962e-08, -1.759152673087678e-08, -1.760940667934207e-08, -1.760940667934207e-08, -1.710754318625137e-06, -1.710269031436091e-06, -1.695195874655010e-06, -1.700542458598889e-06, -1.710587109090457e-06, -3.343884536226272e-05, -1.319377198154914e-03, -4.652112602626484e-03, -4.029703003798974e-03, -4.365277905496911e-03, -4.669706996755001e-03, -4.669706996755001e-03, -6.269473359294988e-01, -6.455688090080203e-01, -5.047660034852752e-04, -5.990114634623286e-02, -6.317270384192089e-01, -6.317270384192089e-01, 4.165133970753521e+01, 3.867869975105177e+01, 2.439420540368459e+00, 6.534453502056760e+01, 4.040964058698485e+01, 4.040964058698483e+01, 4.643858937797290e-06, 4.622039016042009e-06, 4.641450865245175e-06, 1.483747961401169e-07, 4.632863978304434e-06, 4.632863978304434e-06, -1.977550295505049e-05, -1.896820535532486e-05, -2.009493636392173e-05, -1.948319678685914e-05, -1.878185378025273e-05, -2.037995399391252e-04, 2.859205939696012e-01, 2.858963429287360e-02, -1.222787941533944e-01, 1.016489984469801e-01, 7.321693234261370e-02, -3.932280402444285e-03, -5.989468799825641e-01, -2.207631110442944e-01, -6.637162179987940e-01, 6.703164870749032e-04, -1.178975956289822e-02, -1.178975956289822e-02, -3.867634356456377e+02, 6.529998367603466e+01, 2.367601720867477e+02, -1.641364157703910e+00, -3.602319056441739e+02, 8.553822038433181e+01, 1.902824390588036e-02, 2.133868414495757e-02, 2.976455701872752e-02, 1.981722660142694e-02, 2.013289048529418e-02, 2.013289048529418e-02, 2.239372300423352e-02, 2.564396801644265e+03, 9.452971285304596e-02, 4.499058094298491e-02, 6.234558488179389e-02, -2.743301287866943e-02, 3.045968450471580e-02, -7.809815449374244e-02, -1.808082498280708e-01, -1.893125914727278e-02, -1.955296574426079e-01, -1.955296574426079e-01, -5.408379519405236e-03, 2.645767160866337e+00, 1.492130498047477e+00, -4.550865418748206e-01, -1.198558921917249e+00, 6.917252204043366e-01, 1.823444194454896e+01, 4.851385684705476e+02, 2.827455627108975e+02, 8.346443250679044e-01, 1.350625654767424e+02, 1.350625654767428e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mvsbs_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvsbs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([5.390550486144453e-03, 5.390923126524182e-03, 5.392540401784047e-03, 5.386479733502154e-03, 5.390746871028054e-03, 5.390746871028054e-03, -2.515396966444854e-03, -2.516557813421904e-03, -2.551677511396928e-03, -2.537807999611280e-03, -2.515707179403602e-03, 2.252298217684163e-02, -2.836173913242131e-03, 2.401047719029484e-02, 1.996820755034031e-02, 2.172183723785549e-02, 2.412758014265866e-02, 2.412758014265866e-02, 6.951640041923161e-02, 7.337344432250310e-02, -1.084209123966728e-03, 2.068389430076649e-02, 7.057583531091596e-02, 7.057583531091596e-02, 1.019364826971287e-03, 1.088152235386588e-03, 4.860693387684455e-03, 1.761788380050751e-04, 1.101681835902915e-03, 1.101681835902914e-03, -1.035652040755687e-02, -1.031348332533151e-02, -1.035174643287593e-02, -5.008129405547771e-04, -1.033486419445885e-02, -1.033486419445885e-02, -2.917980717240043e-03, -3.136064927911734e-03, -2.825862289963960e-03, -2.993026143100261e-03, -3.196233014190080e-03, 2.520886065770475e-02, -8.860896147177122e-01, -1.132641837806567e-01, 3.251516438932662e-01, -3.049917635836373e-01, -2.536689040955189e-01, 5.865146058314063e-02, -3.885359715842529e-04, 3.433734907424371e-02, -4.384376680907615e-04, -7.479726182494413e-02, 2.116123789934778e-02, 2.116123789934778e-02, -9.276539650948982e-08, 2.359500202019420e-04, 3.602144045570294e-04, -9.914344313696963e-05, -1.068337624476041e-07, 2.337916958197259e-04, -6.478025527701331e-02, -7.142694605078555e-02, -1.158816153165406e-01, -6.705025943798103e-02, -6.795882444920547e-02, -6.795882444920547e-02, -6.910770122564008e-02, -5.173586723392511e+03, -2.166918756457437e-01, -1.158074800844038e-01, -1.513267974541055e-01, 1.520288964514740e-01, -1.391209917780719e-01, -4.730513371713307e-03, 6.433240250191234e-02, -1.709932962856594e-02, 9.604178721048377e-02, 9.604178721048380e-02, -2.188034708379073e-02, 4.128952051374253e-03, 6.130270864406802e-03, 2.649520093283193e-01, -3.559551214630158e-04, 1.348032715874057e-02, 7.181234940530499e-04, 3.595990693372694e-05, 1.436873849170461e-04, 1.407572828395884e-02, 2.265858031958159e-04, 2.265858031958152e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
