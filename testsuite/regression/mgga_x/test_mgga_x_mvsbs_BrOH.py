
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mvsbs_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvsbs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.349962873785973e+01, -2.349966838332516e+01, -2.349975986152774e+01, -2.349910072870227e+01, -2.349965050858765e+01, -2.349965050858765e+01, -3.088396434097701e+00, -3.088328095982379e+00, -3.086423234852021e+00, -3.088180148554220e+00, -3.088387203986257e+00, -3.088387203986257e+00, -6.229426246514329e-01, -6.227079563223914e-01, -6.182645221263959e-01, -6.243994432563974e-01, -6.228556287864307e-01, -6.228556287864307e-01, -1.925289225461844e-01, -1.948514944066744e-01, -7.375760408833889e-01, -1.303571673119007e-01, -1.931963661423008e-01, -1.931963661423008e-01, -3.520182816573254e-03, -3.772695227130595e-03, -2.771361659459043e-02, -1.084027337490217e-03, -3.733347784900950e-03, -3.733347784900949e-03, -5.672288197902209e+00, -5.673262268851902e+00, -5.672354761400190e+00, -5.673114417647711e+00, -5.672831850050232e+00, -5.672831850050232e+00, -2.057801231954028e+00, -2.076937945468766e+00, -2.058207151996340e+00, -2.073702341638663e+00, -2.068967384226774e+00, -2.068967384226774e+00, -5.978457263526757e-01, -7.357500106068994e-01, -4.781583222021086e-01, -6.010042781281631e-01, -6.584843376119751e-01, -6.584843376119751e-01, -8.687525738895342e-02, -1.912550953120843e-01, -8.662715210821796e-02, -2.016762137931574e+00, -1.085023403590396e-01, -1.085023403590396e-01, -1.049046243481111e-03, -1.272327380153808e-03, -9.544589007331951e-04, -4.517250878711004e-02, -1.154398093254442e-03, -1.154398093254442e-03, -6.570675938974188e-01, -6.539196544787694e-01, -6.550424484050421e-01, -6.559123317842787e-01, -6.554789136992033e-01, -6.554789136992033e-01, -6.414337794426048e-01, -5.097353247821003e-01, -5.973450601635631e-01, -6.093166664291435e-01, -6.024939131630527e-01, -6.024939131630527e-01, -7.261265549129848e-01, -2.451809473290985e-01, -2.896209368768325e-01, -3.331627139745920e-01, -3.227119485866557e-01, -3.227119485866556e-01, -4.221054781489847e-01, -2.427989997318115e-02, -3.816651439470935e-02, -2.977637000197662e-01, -6.819971675600300e-02, -6.819971675600302e-02, -4.180544713689730e-03, -1.918365303888413e-04, -5.098335012885149e-04, -6.512286923813083e-02, -9.469726891282520e-04, -9.469726891282495e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mvsbs_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvsbs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.420791182527341e+01, -3.420782751494840e+01, -3.420768731812352e+01, -3.420905878207988e+01, -3.420786545558479e+01, -3.420786545558479e+01, -3.388949465880485e+00, -3.388752463170216e+00, -3.382627401656620e+00, -3.381169803902750e+00, -3.388937035273949e+00, -3.388937035273949e+00, -7.410713246302559e-01, -7.402597460501184e-01, -7.150732335209034e-01, -7.087978128254682e-01, -7.407651586250599e-01, -7.407651586250599e-01, -2.410072641839363e-01, -2.431907337992866e-01, -9.394659106110930e-01, -1.951729770633430e-01, -2.417170677185092e-01, -2.417170677185092e-01, -6.550600422230429e-03, -7.029199534041977e-03, -5.240477844982461e-02, -2.091567523342225e-03, -6.950363495597708e-03, -6.950363495597707e-03, -7.991444883049196e+00, -7.987795786461215e+00, -7.991067406836745e+00, -7.988230770790540e+00, -7.989568877668829e+00, -7.989568877668829e+00, -2.259411240286165e+00, -2.253128206630695e+00, -2.285518283466303e+00, -2.275453857341463e+00, -2.187807090948067e+00, -2.187807090948067e+00, -1.010965872413645e+00, -1.301688622746393e+00, -4.999266809631482e-01, -9.522755833485028e-01, -1.186470298095561e+00, -1.186470298095561e+00, -1.517386636155262e-01, -2.582665401814699e-01, -1.500656634515284e-01, -3.183240699763818e+00, -1.737014906913777e-01, -1.737014906913777e-01, -2.006010061170351e-03, -2.450970735224586e-03, -1.810548117184920e-03, -8.510889526433753e-02, -2.227197983142370e-03, -2.227197983142370e-03, -8.718750240359359e-01, -8.771428945411140e-01, -8.750255997704353e-01, -8.735670492189048e-01, -8.742752807916111e-01, -8.742752807916111e-01, -8.378600725455838e-01, -1.921573079989441e+00, -9.102298685687744e-01, -8.407807795332619e-01, -8.601495183027319e-01, -8.601495183027318e-01, -1.230472622504636e+00, -3.069878939515243e-01, -3.538684270664678e-01, -2.669766251443694e-01, -3.515056738134965e-01, -3.515056738134966e-01, -2.276911032819274e-01, -4.558087457339601e-02, -7.197607194314345e-02, -2.905005723865368e-01, -1.215726953293414e-01, -1.215726953293414e-01, -8.065957102498694e-03, -3.674107735214361e-04, -9.618951489850095e-04, -1.161310949113239e-01, -1.826291926799544e-03, -1.826291926799539e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mvsbs_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvsbs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([2.491813972769979e-08, 2.491697172797370e-08, 2.490972023990647e-08, 2.492864619388271e-08, 2.491754395796106e-08, 2.491754395796106e-08, -5.433125091015379e-06, -5.431946343529604e-06, -5.398717410636580e-06, -5.464478089491712e-06, -5.432346552560787e-06, -5.432346552560787e-06, -3.517808605344470e-03, -3.551920440311016e-03, -4.696837048925561e-03, -5.173476312604694e-03, -3.530606301560975e-03, -3.530606301560975e-03, -4.252764841466205e-01, -4.212883666522909e-01, -7.227182787089351e-04, 5.506462387178245e-02, -4.218902746795901e-01, -4.218902746795901e-01, 4.648723024904993e+01, 4.434340030182511e+01, 4.355559206666119e+00, 1.757406739067859e+02, 4.554863254350697e+01, 4.554863254350700e+01, 4.681013132189036e-06, 4.658428805061787e-06, 4.678049544999165e-06, 4.660531974418853e-06, 4.670263578180544e-06, 4.670263578180544e-06, -1.188830082451209e-04, -1.264648738681785e-04, -1.149790201709692e-04, -1.227211995565428e-04, -1.354776319759398e-04, -1.354776319759398e-04, -4.971213389447319e-03, -4.168450545175715e-02, -6.439764504310264e-03, -7.306424908784201e-03, -3.281400060765934e-02, -3.281400060765934e-02, 7.614574778581790e-01, -1.586842719696249e-01, 8.108976553304937e-01, -6.641391025873715e-05, 2.840374676122047e-01, 2.840374676122047e-01, 1.763837381150544e+02, 1.560320424854559e+02, 3.918100064014404e+02, 3.023915700879654e+00, 2.312585872771733e+02, 2.312585872771731e+02, 2.122248090709446e-02, 2.399794960841454e-02, 2.293379480913295e-02, 2.216575156521317e-02, 2.254586694323352e-02, 2.254586694323352e-02, 2.816293761010378e-02, 3.568629864140222e-04, 1.619719023766562e-01, 6.307819583398457e-02, 9.619586521428602e-02, 9.619586521428605e-02, -1.572753410598439e-02, -1.628838783318035e-01, -1.165798828371734e-01, -1.865483733477667e-01, -1.660510651291669e-01, -1.660510651291670e-01, -9.278691494557831e-02, 3.872155405614593e+00, 2.939729113235920e+00, -1.131866252129229e-01, 1.524125491832663e+00, 1.524125491832667e+00, 4.815861468155616e+01, 1.406703041930343e+03, 4.187663876202614e+02, 1.895149897906026e+00, 3.718323686450571e+02, 3.718323686450578e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mvsbs_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvsbs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-4.084325312670173e-03, -4.084146571739927e-03, -4.082913759219578e-03, -4.085798521664972e-03, -4.084235348592910e-03, -4.084235348592910e-03, -2.931865697635138e-03, -2.934274718806672e-03, -3.007325936143240e-03, -2.976162644926546e-03, -2.932537056174875e-03, -2.932537056174875e-03, 1.300136460024285e-03, 1.405728861692851e-03, 4.741789637391308e-03, 5.569405674275871e-03, 1.338413773672475e-03, 1.338413773672475e-03, 4.109500035225164e-02, 4.047424680823878e-02, -2.851015458547876e-04, 1.055076997665961e-02, 4.064277466062204e-02, 4.064277466062204e-02, 9.575574973299816e-04, 1.005602043643985e-03, 3.235675771062566e-03, 8.873553095847013e-05, 1.028738458116843e-03, 1.028738458116841e-03, -1.047494645443719e-02, -1.042953570965557e-02, -1.046840720627269e-02, -1.043322367885891e-02, -1.045410701612171e-02, -1.045410701612171e-02, 1.046766557641842e-02, 1.168242370317287e-02, 1.051924473929714e-02, 1.167588281472327e-02, 1.161468152509360e-02, 1.161468152509360e-02, 1.046886985044615e-01, 2.864229952964172e-01, -3.686939804512231e-02, 8.551362639801038e-02, 2.589436787477274e-01, 2.589436787477274e-01, 7.241389833813061e-03, 2.487806040633532e-02, 7.824139882819180e-03, 2.587592992846525e-02, 1.273065789451632e-02, 1.273065789451632e-02, 1.319339073548255e-04, 1.221234295732895e-04, 2.542702461511047e-04, 3.309229233524557e-03, 1.180581004155065e-04, 1.180581004155064e-04, -7.558487120779898e-02, -8.431428249169515e-02, -8.096405613912482e-02, -7.854727739003292e-02, -7.974538276001941e-02, -7.974538276001941e-02, -9.524606869494853e-02, 6.491049520818480e-01, -4.554164587464942e-01, -1.851707096478357e-01, -2.755831889059167e-01, -2.755831889059169e-01, 1.581928911386019e-01, 3.629532254071564e-02, 3.386779266794841e-02, 2.452265115263191e-02, 5.040457804869331e-02, 5.040457804869332e-02, 5.214987715475196e-03, 3.233105806825280e-03, 3.755651943878591e-03, -3.099859647855719e-02, 8.106616356649169e-03, 8.106616356649152e-03, 3.598075203307786e-04, 2.228226389606584e-05, 1.110074292707032e-04, 8.210370942734878e-03, 1.160454415855104e-04, 1.160454415855100e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
