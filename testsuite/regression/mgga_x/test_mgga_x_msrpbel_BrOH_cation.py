
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_msrpbel_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_msrpbel", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.187325696219030e+01, -2.187330080998108e+01, -2.187354703560727e+01, -2.187289389696922e+01, -2.187322882630763e+01, -2.187322882630763e+01, -3.380448943537122e+00, -3.380446199576603e+00, -3.380580212465945e+00, -3.382068145041304e+00, -3.381054544189554e+00, -3.381054544189554e+00, -6.543688408930296e-01, -6.541168446648966e-01, -6.506200503217616e-01, -6.589298016449612e-01, -6.600280941994517e-01, -6.600280941994517e-01, -2.099819515880841e-01, -2.103597854730921e-01, -7.350055659462212e-01, -1.784802706641417e-01, -2.034427371426923e-01, -2.034427371426922e-01, -1.011217354967865e-02, -1.064899078704721e-02, -5.870030518492426e-02, -5.830218135953091e-03, -8.138160784503223e-03, -8.138160784503223e-03, -5.293240162416861e+00, -5.293361448163064e+00, -5.293253620188642e+00, -5.293360546763390e+00, -5.293297243218214e+00, -5.293297243218214e+00, -2.109549175320625e+00, -2.126264730874452e+00, -2.111051178667822e+00, -2.125527855744975e+00, -2.118341015223606e+00, -2.118341015223606e+00, -5.915242162712698e-01, -6.281123558350018e-01, -5.331647580924979e-01, -5.367616002960955e-01, -6.015226853828408e-01, -6.015226853828409e-01, -1.450776150850526e-01, -2.258696864047863e-01, -1.362481581058602e-01, -1.825002620993194e+00, -1.573089893592019e-01, -1.573089893592019e-01, -4.501092174754964e-03, -5.699392574836056e-03, -4.364675792400219e-03, -9.481776557321819e-02, -5.482775671063140e-03, -5.482775671063142e-03, -5.888497213262600e-01, -5.887772085348121e-01, -5.888037100596374e-01, -5.888202785985251e-01, -5.888112383690478e-01, -5.888112383690478e-01, -5.713823105248357e-01, -5.207283955433508e-01, -5.343303213750754e-01, -5.483079488243525e-01, -5.409126376286437e-01, -5.409126376286437e-01, -6.520801477436273e-01, -2.701984408856217e-01, -3.008606103421735e-01, -3.544044474398843e-01, -3.263324687366561e-01, -3.263324687366561e-01, -4.721720390057310e-01, -5.610195336521664e-02, -7.652147285423855e-02, -3.390019416582239e-01, -1.174801101154219e-01, -1.174801101154219e-01, -1.425425101214373e-02, -1.523316300276004e-03, -3.203544973302094e-03, -1.115318764571353e-01, -5.034982857663592e-03, -5.034982857663587e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_msrpbel_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_msrpbel", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.747444773120703e+01, -2.747482789610087e+01, -2.747457185983771e+01, -2.747491798908107e+01, -2.747499815871482e+01, -2.747552058994447e+01, -2.747359965047009e+01, -2.747373745156213e+01, -2.747452187317882e+01, -2.747447145296425e+01, -2.747452187317882e+01, -2.747447145296425e+01, -4.178727850722814e+00, -4.178219766819903e+00, -4.178996137897798e+00, -4.178366847506060e+00, -4.183951904761050e+00, -4.184819996449193e+00, -4.183625240690892e+00, -4.183445114051562e+00, -4.177486572192850e+00, -4.188056329709578e+00, -4.177486572192850e+00, -4.188056329709578e+00, -7.860931251399157e-01, -7.940339424910071e-01, -7.833414367400978e-01, -7.928853092629498e-01, -7.459044222748338e-01, -7.348137763925863e-01, -7.504184316503604e-01, -7.550229573732220e-01, -8.052608531890688e-01, -6.884396382938550e-01, -8.052608531890688e-01, -6.884396382938550e-01, -1.293208667423248e-01, -1.676612540681810e-01, -1.389164531904727e-01, -1.661919733481914e-01, -8.383230710699100e-01, -8.921459470803047e-01, -1.318210800627461e-01, -1.292523745896730e-01, -1.443634856397412e-01, -1.324194462088737e-01, -1.443634856397410e-01, -1.324194462088736e-01, -1.303761629899009e-02, -1.385400848819942e-02, -1.366186325065716e-02, -1.463530105325926e-02, -7.596581640390797e-02, -8.022049216045871e-02, -7.837274757367561e-03, -7.706682731293256e-03, -1.163080014436929e-02, -6.618657626552290e-03, -1.163080014436929e-02, -6.618657626552290e-03, -6.773716870163128e+00, -6.772138115113521e+00, -6.776095480312673e+00, -6.774435345976626e+00, -6.773886231787016e+00, -6.772243886144278e+00, -6.775925621539931e+00, -6.774329318117396e+00, -6.774907448746263e+00, -6.773287498399180e+00, -6.774907448746263e+00, -6.773287498399180e+00, -2.177672033793674e+00, -2.182863764408934e+00, -2.229642644825550e+00, -2.233508204784662e+00, -2.163845360979493e+00, -2.172480637034945e+00, -2.214531653308258e+00, -2.223075985958086e+00, -2.219989151705600e+00, -2.211262019494943e+00, -2.219989151705600e+00, -2.211262019494943e+00, -7.375396151899253e-01, -7.355310257215567e-01, -8.490788877666898e-01, -8.489786633712697e-01, -6.463659071531893e-01, -6.887966112473946e-01, -7.058341012762673e-01, -7.519002456568422e-01, -7.739344429334403e-01, -7.344601203378962e-01, -7.739344429334404e-01, -7.344601203378963e-01, -1.469660635022465e-01, -1.456620524612879e-01, -1.245155043320952e-01, -1.295448950534244e-01, -1.454948215084147e-01, -1.449697861747195e-01, -2.541311918584578e+00, -2.540428328569251e+00, -1.302678246865950e-01, -1.194550542566909e-01, -1.302678246865950e-01, -1.194550542566910e-01, -5.879441569503017e-03, -6.110164258163266e-03, -7.540839044572501e-03, -7.654969939076097e-03, -5.638837180345527e-03, -5.971727633039896e-03, -1.221719877009210e-01, -1.230468214964765e-01, -5.759214710703059e-03, -7.909246535848055e-03, -5.759214710703061e-03, -7.909246535848059e-03, -7.787691298683540e-01, -7.818598868340479e-01, -7.690787425492043e-01, -7.722563080988786e-01, -7.724630026581013e-01, -7.756318734044593e-01, -7.752993719448145e-01, -7.784012847304398e-01, -7.738796978994785e-01, -7.770141107784696e-01, -7.738796978994785e-01, -7.770141107784696e-01, -7.603434149424355e-01, -7.627805292534147e-01, -6.047712879961071e-01, -6.081280009229375e-01, -6.479436262633818e-01, -6.515740064986419e-01, -6.930021803750950e-01, -6.956569625170178e-01, -6.698368811188452e-01, -6.727822783445910e-01, -6.698368811188452e-01, -6.727822783445910e-01, -8.925377253210663e-01, -8.938314047486887e-01, -1.801075505810313e-01, -1.807663025293771e-01, -2.291911261531830e-01, -2.347504865158710e-01, -3.964844745153523e-01, -3.995687419453865e-01, -3.071391949276485e-01, -3.077424980934254e-01, -3.071391949276484e-01, -3.077424980934253e-01, -5.244716428579510e-01, -5.316248918594583e-01, -7.454493959659093e-02, -7.505498676048940e-02, -1.002042174211253e-01, -1.034910688742392e-01, -3.976365681188119e-01, -4.051183928359858e-01, -1.326259233401697e-01, -1.259372829180004e-01, -1.326259233401697e-01, -1.259372829180004e-01, -1.864956171239904e-02, -1.932569049950109e-02, -2.028762023808494e-03, -2.033398898287572e-03, -4.128061189754679e-03, -4.390526307869538e-03, -1.288739901302651e-01, -1.282003946883913e-01, -5.455199472438233e-03, -7.249407432700401e-03, -5.455199472438227e-03, -7.249407432700393e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_msrpbel_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_msrpbel", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-9.680114392822150e-09, 0.000000000000000e+00, -9.673739063358656e-09, -9.679903989812512e-09, 0.000000000000000e+00, -9.673587150972451e-09, -9.678403041685746e-09, 0.000000000000000e+00, -9.671669932310640e-09, -9.680737171088313e-09, 0.000000000000000e+00, -9.674652952468060e-09, -9.680006085667575e-09, 0.000000000000000e+00, -9.672856203813644e-09, -9.680006085667575e-09, 0.000000000000000e+00, -9.672856203813644e-09, -1.652884034067716e-05, 0.000000000000000e+00, -1.647397311339304e-05, -1.654572086147847e-05, 0.000000000000000e+00, -1.648088199446766e-05, -1.683014010137921e-05, 0.000000000000000e+00, -1.686893197457225e-05, -1.691863994723636e-05, 0.000000000000000e+00, -1.687462565264874e-05, -1.650626929919762e-05, 0.000000000000000e+00, -1.713984815775869e-05, -1.650626929919762e-05, 0.000000000000000e+00, -1.713984815775869e-05, -1.262030627848567e-02, 0.000000000000000e+00, -1.255627466973500e-02, -1.266201351004249e-02, 0.000000000000000e+00, -1.256788630905268e-02, -1.312345483066508e-02, 0.000000000000000e+00, -1.343419082110617e-02, -1.336973516626575e-02, 0.000000000000000e+00, -1.336733967359744e-02, -1.221273489224234e-02, 0.000000000000000e+00, -1.465142861970366e-02, -1.221273489224234e-02, 0.000000000000000e+00, -1.465142861970366e-02, -4.038139518270728e+00, 0.000000000000000e+00, -2.522643305142608e+00, -3.669043184810837e+00, 0.000000000000000e+00, -2.693153923186013e+00, -5.600833016468486e-03, 0.000000000000000e+00, -5.151315370628777e-03, -3.224406474750326e+00, 0.000000000000000e+00, -3.862218254407083e+00, -3.077346740872823e+00, 0.000000000000000e+00, -4.371735808317524e+00, -3.077346740872828e+00, 0.000000000000000e+00, -4.371735808317536e+00, -9.608259992430759e-183, 0.000000000000000e+00, -3.953077513229605e-162, -1.455651429399612e-161, 0.000000000000000e+00, -1.507748885223392e-140, -1.473202235863365e-04, 0.000000000000000e+00, -6.943209489998843e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -4.174623520612868e-231, 0.000000000000000e+00, 0.000000000000000e+00, -4.174623520615240e-231, 0.000000000000000e+00, 0.000000000000000e+00, -2.323899122086424e-06, 0.000000000000000e+00, -2.324173815511696e-06, -2.322331132288636e-06, 0.000000000000000e+00, -2.322661219734396e-06, -2.323029644805140e-06, 0.000000000000000e+00, -2.323557560793270e-06, -2.321715050930202e-06, 0.000000000000000e+00, -2.322213168022239e-06, -2.323687754097857e-06, 0.000000000000000e+00, -2.323512676527724e-06, -2.323687754097857e-06, 0.000000000000000e+00, -2.323512676527724e-06, -2.554811897310473e-04, 0.000000000000000e+00, -2.511383595199511e-04, -2.272235540777243e-04, 0.000000000000000e+00, -2.238238426412366e-04, -2.416164167408943e-04, 0.000000000000000e+00, -2.418598557230477e-04, -2.146781417020809e-04, 0.000000000000000e+00, -2.146193716310576e-04, -2.477458498485507e-04, 0.000000000000000e+00, -2.377459372455894e-04, -2.477458498485507e-04, 0.000000000000000e+00, -2.377459372455894e-04, -4.119496436575550e-02, 0.000000000000000e+00, -4.098365780822924e-02, -3.021655936465730e-02, 0.000000000000000e+00, -2.963999051726202e-02, -3.714106493552586e-02, 0.000000000000000e+00, -5.010244807824003e-02, -3.296764119363388e-02, 0.000000000000000e+00, -4.065146649898006e-02, -3.177109387055278e-02, 0.000000000000000e+00, -4.391502793534276e-02, -3.177109387055276e-02, 0.000000000000000e+00, -4.391502793534275e-02, -3.249925429379236e+00, 0.000000000000000e+00, -3.347066169121090e+00, -2.756899832231080e+00, 0.000000000000000e+00, -2.593702689132132e+00, -3.074913949461263e+00, 0.000000000000000e+00, -3.367639639885196e+00, -3.255245828428094e-04, 0.000000000000000e+00, -3.263503591727729e-04, -4.895283204936308e+00, 0.000000000000000e+00, -5.998923416959368e+00, -4.895283204936312e+00, 0.000000000000000e+00, -5.998923416959352e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.251345904804465e+00, 0.000000000000000e+00, -1.185661866703793e+00, 0.000000000000000e+00, 0.000000000000000e+00, -3.305675563542712e-285, 0.000000000000000e+00, 0.000000000000000e+00, -3.305675563541211e-285, -1.826164181552860e-02, 0.000000000000000e+00, -1.787888791209213e-02, -1.845580956405617e-02, 0.000000000000000e+00, -1.807314860901716e-02, -1.838908233692425e-02, 0.000000000000000e+00, -1.800426474658204e-02, -1.833131875853375e-02, 0.000000000000000e+00, -1.795137652464157e-02, -1.836273572235873e-02, 0.000000000000000e+00, -1.797947007787712e-02, -1.836273572235873e-02, 0.000000000000000e+00, -1.797947007787712e-02, -2.477680112135585e-02, 0.000000000000000e+00, -2.414674939609681e-02, -3.730046674310801e-02, 0.000000000000000e+00, -3.653182907327314e-02, -3.374506065282956e-02, 0.000000000000000e+00, -3.298713975555466e-02, -3.005267730529644e-02, 0.000000000000000e+00, -2.956634557033501e-02, -3.266609015135085e-02, 0.000000000000000e+00, -3.178024503247582e-02, -3.266609015135086e-02, 0.000000000000000e+00, -3.178024503247585e-02, -2.655044958197461e-02, 0.000000000000000e+00, -2.618235558189548e-02, -1.280870750155481e+00, 0.000000000000000e+00, -1.271766133016117e+00, -8.478671204390085e-01, 0.000000000000000e+00, -8.204611825267774e-01, -2.799373106679266e-01, 0.000000000000000e+00, -2.696005055183481e-01, -5.322755743607852e-01, 0.000000000000000e+00, -5.338822593964764e-01, -5.322755743607858e-01, 0.000000000000000e+00, -5.338822593964767e-01, -1.110838346151407e-01, 0.000000000000000e+00, -1.038384286756469e-01, -3.797948437002472e-05, 0.000000000000000e+00, -4.767351916205909e-05, -3.592577221978667e-02, 0.000000000000000e+00, -6.630887412814016e-02, -3.492668124570563e-01, 0.000000000000000e+00, -3.764822995033708e-01, -3.855282812982340e+00, 0.000000000000000e+00, -5.978590177012798e+00, -3.855282812982351e+00, 0.000000000000000e+00, -5.978590177012795e+00, -2.412065057093215e-98, 0.000000000000000e+00, -2.662163078423457e-90, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -4.148058551239436e+00, 0.000000000000000e+00, -5.441784310121927e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_msrpbel_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_msrpbel", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.300265513657982e-04, 1.295312024217124e-04, 1.300186486809741e-04, 1.295255308116565e-04, 1.299325586114313e-04, 1.294193048835517e-04, 1.300184908745979e-04, 1.295295409126628e-04, 1.300230099255583e-04, 1.294411111965390e-04, 1.300230099255583e-04, 1.294411111965390e-04, 1.413533790234486e-03, 1.394470384763422e-03, 1.419239304214337e-03, 1.396759587760777e-03, 1.514980245585439e-03, 1.528169489873045e-03, 1.548162111892253e-03, 1.533287334204544e-03, 1.402584985988537e-03, 1.623075724148045e-03, 1.402584985988537e-03, 1.623075724148045e-03, 8.879316391964915e-03, 9.078881177368761e-03, 8.840020054397393e-03, 9.041420000397760e-03, 8.055994528321286e-03, 8.243809947293814e-03, 9.304212481783054e-03, 9.494410521243012e-03, 8.907121483891701e-03, 9.654182677003296e-03, 8.907121483891701e-03, 9.654182677003296e-03, 1.013360860820018e-01, 5.687726202991409e-02, 9.095951228782481e-02, 6.982425090618496e-02, 9.388257232464142e-04, 1.609018185740634e-03, 7.086330287127243e-03, 2.298587245674533e-02, 8.152291284904176e-02, 1.421981499392597e-04, 8.152291284904201e-02, 1.421981499392631e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 2.122771793292373e-11, 2.807715549507824e-10, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 3.764786737331053e-05, 3.549662853511931e-05, 3.718008658234866e-05, 3.504733360997517e-05, 3.675861823657305e-05, 3.485894545455904e-05, 3.639120848842873e-05, 3.448364061252123e-05, 3.806111927190368e-05, 3.537959547035090e-05, 3.806111927190368e-05, 3.537959547035090e-05, 9.003308287566954e-03, 8.748779117785785e-03, 7.676729330934415e-03, 7.461846268646540e-03, 7.955601749705518e-03, 8.035442251681157e-03, 6.668357604731229e-03, 6.727924415863664e-03, 8.937719101903024e-03, 8.162509825060355e-03, 8.937719101903024e-03, 8.162509825060355e-03, 4.322416519620322e-02, 4.236071814789884e-02, 4.006485846292433e-02, 3.901852781149472e-02, 1.797397431855912e-02, 4.176675719558088e-02, 1.803819663628539e-02, 3.533839200758158e-02, 3.548301070017371e-02, 4.469021850928711e-02, 3.548301070017364e-02, 4.469021850928710e-02, 1.070249671517306e-03, 9.472814772395971e-04, 6.986296556302313e-02, 6.451564102665007e-02, 2.654162565037602e-04, 7.795193882002198e-04, 1.062830371172774e-02, 1.064674646212162e-02, 1.049764905926897e-02, 1.949670038843681e-02, 1.049764905926901e-02, 1.949670038843666e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 4.384011678237030e-06, 1.959204931126544e-05, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 6.202038505660398e-03, 6.006919138448395e-03, 6.065921781775749e-03, 5.880634857468642e-03, 6.116170625576261e-03, 5.924990465691516e-03, 6.153935160823272e-03, 5.965961846300182e-03, 6.139028844003436e-03, 5.948049623790157e-03, 6.139028844003436e-03, 5.948049623790160e-03, 1.285816117212530e-02, 1.235937778560092e-02, 9.618147878227025e-03, 9.421289083581929e-03, 1.128051009144394e-02, 1.102180002061049e-02, 1.227518272039420e-02, 1.214123372908152e-02, 1.268434069478263e-02, 1.215836521858066e-02, 1.268434069478265e-02, 1.215836521858069e-02, 4.140674069531637e-02, 4.097538526716486e-02, 6.516819771079227e-02, 6.620158359074409e-02, 7.978533961029945e-02, 7.950799990690746e-02, 5.422523369133684e-02, 5.241423141295512e-02, 7.683356394822623e-02, 7.698714642789870e-02, 7.683356394822631e-02, 7.698714642789868e-02, 5.276535167931551e-02, 4.933424539722309e-02, 6.716344090179242e-11, 4.838897121592465e-11, 3.685069441435348e-08, 1.083253877579330e-07, 6.082453702488506e-02, 7.569752603963713e-02, 3.786015679833824e-04, 1.412884287531588e-03, 3.786015679833878e-04, 1.412884287531555e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 5.435160978284777e-04, 4.108901084367587e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
