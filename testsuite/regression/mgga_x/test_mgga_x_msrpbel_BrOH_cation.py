
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_msrpbel_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_msrpbel", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.037222226110903e+01, -2.037231900738632e+01, -2.037275059162164e+01, -2.114440604616079e+01, -2.114497971536368e+01, -2.191800732628650e+01, -3.481121142951241e+00, -3.759316051372199e+00, -3.757690304645910e+00, -3.758686906411867e+00, -3.758189418235189e+00, -3.480026008991878e+00, -5.909732567332695e-01, -6.851095295256651e-01, -7.744613895216048e-01, -6.757859280121310e-01, -5.778334034769603e-01, -7.752298325783615e-01, -1.836075064424602e-01, -1.857199319272183e-01, -8.304010546450898e-01, -1.913605978321370e-01, -2.135065077404046e-01, -2.037114511212871e-01, -1.011217354967865e-02, -8.414200023120228e-03, -4.597886710907637e-02, -5.830218135953091e-03, -8.138160784503223e-03, -8.138160784503223e-03, -5.293933661399274e+00, -5.294046453034257e+00, -5.293932569083297e+00, -5.294032631924384e+00, -5.181347645974228e+00, -5.181442401324443e+00, -2.151218978218100e+00, -2.159196226807188e+00, -2.145948560553237e+00, -2.152735272316310e+00, -1.977238295699846e+00, -2.158176340616222e+00, -5.804964972458071e-01, -6.529218372835277e-01, -5.816467009302604e-01, -5.919991167633609e-01, -5.912686277817604e-01, -6.232251989704326e-01, -1.485922595794504e-01, -1.920112503974065e-01, -1.388767967432236e-01, -1.998595970764353e+00, -1.627538947266525e-01, -1.627538947266525e-01, -3.490880518313493e-03, -5.699392574836056e-03, -4.364675792400219e-03, -7.166061842734746e-02, -5.482775671063140e-03, -5.482775671063142e-03, -5.904878578182990e-01, -5.903587754301763e-01, -5.822929622751181e-01, -5.872648150944104e-01, -5.832343881842562e-01, -5.868000837589695e-01, -5.749187778103078e-01, -4.895616090428203e-01, -5.085258854725057e-01, -5.512921758408680e-01, -5.438220980404402e-01, -5.201852828518517e-01, -6.611225085918340e-01, -2.744337156650333e-01, -2.715895675143515e-01, -3.496248935078548e-01, -3.423594283101801e-01, -3.060739935497785e-01, -4.884365395355903e-01, -2.882354664676229e-02, -7.652470010820750e-02, -3.604180809758216e-01, -1.191424360167233e-01, -1.191424360167233e-01, -7.323375105837866e-03, -1.523316300276004e-03, -1.645878198937779e-03, -5.843560537478414e-02, -5.034982857663592e-03, -3.181222102144409e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_msrpbel_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_msrpbel", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.930985617181442e+01, -2.931003001568426e+01, -2.930998195903702e+01, -2.931012128826347e+01, -2.931039133094526e+01, -2.931070549275508e+01, -2.930897231742272e+01, -2.754058378586978e+01, -2.930993164398534e+01, -2.754125839323819e+01, -2.754154974256241e+01, -2.754125839323819e+01, -4.274906227797406e+00, -4.533475198555372e+00, -4.275005216543948e+00, -4.274838905635041e+00, -4.276908991521232e+00, -4.277294401754599e+00, -4.276577565737491e+00, -4.276639826481275e+00, -4.274000593083481e+00, -4.278435259868428e+00, -4.533016690348121e+00, -4.278435259868428e+00, -8.274946435987794e-01, -8.336572047132661e-01, -8.253915101428975e-01, -7.829040773005106e-01, -7.548774194221581e-01, -7.485954458113171e-01, -7.600289557148562e-01, -8.080648709613315e-01, -8.419581696472275e-01, -7.648543458325338e-01, -7.907323999806924e-01, -7.269413503387213e-01, -2.006551102460863e-01, -2.011296487410976e-01, -2.036441041048646e-01, -2.052397051590724e-01, -8.737601024871026e-01, -9.440068886068350e-01, -1.711875455746881e-01, -1.660490836562487e-01, -2.013460931631078e-01, -1.762318957248845e-01, -2.013460931631077e-01, -1.092083564043618e-01, -1.303761629899009e-02, -1.385400848819942e-02, -7.019025513837771e-03, -1.463530105325925e-02, -3.902967251275096e-02, -8.022101514253319e-02, -7.837274757367561e-03, -7.706682731293256e-03, -1.163080014436929e-02, -6.618657626552290e-03, -1.163080014436929e-02, -6.618657626552290e-03, -6.774378538899411e+00, -6.772762651441001e+00, -6.776736268535597e+00, -6.775040448072109e+00, -6.774531828924046e+00, -6.772856981085848e+00, -6.776554125338996e+00, -6.774925499213148e+00, -7.110478063684009e+00, -6.773904096155728e+00, -6.775569539878114e+00, -7.108766334225376e+00, -2.372259382885529e+00, -2.372847467643343e+00, -2.396721626595987e+00, -2.396557814524657e+00, -2.351283315974284e+00, -2.357856810903395e+00, -2.372573656171515e+00, -2.379399124290524e+00, -2.401686692911054e+00, -2.584655831669792e+00, -2.401686692911054e+00, -2.387527609529157e+00, -7.414429134296541e-01, -7.335384117499031e-01, -8.226183428946126e-01, -8.238810805020855e-01, -6.566744592932806e-01, -6.885926166084997e-01, -6.987863567209199e-01, -7.266975772968730e-01, -7.772154090880593e-01, -7.291954477508266e-01, -7.772154090880593e-01, -7.339486715317826e-01, -1.675655994735376e-01, -1.679934908895294e-01, -2.011290907977662e-01, -2.015598207553670e-01, -1.628502688571591e-01, -1.636798916183825e-01, -2.441759516052788e+00, -2.440738214904528e+00, -1.583368570788133e-01, -1.472846626024515e-01, -1.583368570788134e-01, -1.472846626024515e-01, -3.020667662511065e-03, -6.110164258163266e-03, -7.540839044572501e-03, -7.654969939076097e-03, -5.638837180345527e-03, -5.971727633039896e-03, -1.251280945148597e-01, -6.535506998221287e-02, -5.759214710703059e-03, -7.909246535848055e-03, -5.759214710703061e-03, -7.909246535848059e-03, -7.769512344017431e-01, -7.800801128006571e-01, -7.682244788591113e-01, -7.714034511805142e-01, -7.839694412780853e-01, -7.867726003652744e-01, -7.835397482388571e-01, -7.769571621132753e-01, -7.837177171544140e-01, -7.865512954727392e-01, -7.837177171544141e-01, -7.757043714258333e-01, -7.555203041392176e-01, -7.581590434213356e-01, -6.136316885041090e-01, -6.139203110249188e-01, -6.540695997227186e-01, -6.719641586639371e-01, -6.949854891567869e-01, -6.975844246003110e-01, -6.741908146563848e-01, -6.769580833729919e-01, -6.741908146563848e-01, -7.151786611547495e-01, -8.566095689031255e-01, -9.128641335096701e-01, -2.481281250602384e-01, -2.496009461448456e-01, -3.187652214093270e-01, -3.055540280821064e-01, -4.550988541165281e-01, -4.220369404217627e-01, -3.582954915222302e-01, -3.583587958052676e-01, -3.582954915222301e-01, -3.857661462992769e-01, -5.561472774688525e-01, -5.615343458575310e-01, -3.829959215041328e-02, -3.856165334120691e-02, -1.002576172296950e-01, -1.035932170619923e-01, -4.084268469356599e-01, -4.192093934724176e-01, -1.428401798372366e-01, -1.401968792596093e-01, -1.428401798372364e-01, -1.401968792596095e-01, -9.581544681586887e-03, -9.928917995320500e-03, -2.028762023808494e-03, -2.033398898287572e-03, -2.120864847019066e-03, -2.255710969612208e-03, -7.729509603034963e-02, -7.856745883201785e-02, -5.455199472438233e-03, -7.249407432700401e-03, -5.455199472438228e-03, -3.724512024648032e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_msrpbel_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_msrpbel", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.514043626156013e-08, 0.000000000000000e+00, -2.514278544430635e-08, -2.514043742704765e-08, 0.000000000000000e+00, -2.514278539016975e-08, -2.514025425248997e-08, 0.000000000000000e+00, -2.514257200557712e-08, -2.514026506534066e-08, 0.000000000000000e+00, -7.973791817927802e-09, -2.514045480294169e-08, 0.000000000000000e+00, -7.973254865040598e-09, -7.972820024218906e-09, 0.000000000000000e+00, -7.973254865040598e-09, -1.038615221739189e-05, 0.000000000000000e+00, -1.911307029931271e-05, -1.038646417900219e-05, 0.000000000000000e+00, -1.038659693181001e-05, -1.039269455070173e-05, 0.000000000000000e+00, -1.039336880402568e-05, -1.038693059272914e-05, 0.000000000000000e+00, -1.038635905795640e-05, -1.039211642399025e-05, 0.000000000000000e+00, -1.039117102787739e-05, -1.912999852653387e-05, 0.000000000000000e+00, -1.039117102787739e-05, -1.177178068190759e-02, 0.000000000000000e+00, -1.169664374304115e-02, -1.181411480608384e-02, 0.000000000000000e+00, -6.444421028789021e-03, -6.820433816460719e-03, 0.000000000000000e+00, -6.958408532429790e-03, -6.820500426666582e-03, 0.000000000000000e+00, -1.235444001316060e-02, -1.141629688670632e-02, 0.000000000000000e+00, -1.375031918157717e-02, -6.273792656263379e-03, 0.000000000000000e+00, -7.441071995775706e-03, -2.577012816375979e+00, 0.000000000000000e+00, -1.189869505490043e+00, -2.463815826417079e+00, 0.000000000000000e+00, -1.137502768216492e+00, -2.883351292548879e-03, 0.000000000000000e+00, -5.416929661845862e-03, -1.776777537795364e+00, 0.000000000000000e+00, -1.961528505046578e+00, -1.085874348337240e+00, 0.000000000000000e+00, -1.376464789289073e+00, -1.085874348337241e+00, 0.000000000000000e+00, -2.544803356933265e+01, -3.971545803645089e-185, 0.000000000000000e+00, -4.418486376603723e-163, -1.485759419574711e+06, 0.000000000000000e+00, -2.713843545917295e-142, -1.554212025668459e+03, 0.000000000000000e+00, -1.189899778595570e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -4.183529100850081e-240, 0.000000000000000e+00, 0.000000000000000e+00, -4.183529100850081e-240, 0.000000000000000e+00, 0.000000000000000e+00, -2.289821542959459e-06, 0.000000000000000e+00, -2.292020521776598e-06, -2.288695855670489e-06, 0.000000000000000e+00, -2.290932112710680e-06, -2.289758186014559e-06, 0.000000000000000e+00, -2.291982588851328e-06, -2.288792002511595e-06, 0.000000000000000e+00, -2.290993524060991e-06, -6.970806341421859e-06, 0.000000000000000e+00, -2.291474099762158e-06, -2.289245885870617e-06, 0.000000000000000e+00, -6.977832331966453e-06, -1.003283702448198e-04, 0.000000000000000e+00, -1.004194003824554e-04, -9.809341033440244e-05, 0.000000000000000e+00, -9.824644347282222e-05, -1.021899068183225e-04, 0.000000000000000e+00, -1.017463386625179e-04, -1.002400579282243e-04, 0.000000000000000e+00, -9.977255466524560e-05, -9.771318475593136e-05, 0.000000000000000e+00, -1.949305213764666e-04, -9.771318475593136e-05, 0.000000000000000e+00, -9.909435797229361e-05, -1.342323517575810e-02, 0.000000000000000e+00, -1.845801357978398e-02, -1.008245277664806e-02, 0.000000000000000e+00, -1.008190165473407e-02, -1.892537535547512e-02, 0.000000000000000e+00, -1.675972726072161e-02, -1.678670970479675e-02, 0.000000000000000e+00, -1.490282811125773e-02, -1.163462886337698e-02, 0.000000000000000e+00, -1.985009679541124e-02, -1.163462886337697e-02, 0.000000000000000e+00, -1.411942701019320e-02, -1.706234587509782e+00, 0.000000000000000e+00, -1.722069923231137e+00, -2.342721357908128e+00, 0.000000000000000e+00, -9.202190778162309e-01, -1.383657323500162e+00, 0.000000000000000e+00, -1.726581183258183e+00, -1.192756661538350e-04, 0.000000000000000e+00, -1.194967318521027e-04, -2.597260891156022e+00, 0.000000000000000e+00, -3.280867659240769e+00, -2.597260891156008e+00, 0.000000000000000e+00, -3.280867659240778e+00, -4.331555857603475e+07, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -3.093158302214522e-01, 0.000000000000000e+00, -1.978244952065283e+02, 0.000000000000000e+00, 0.000000000000000e+00, -4.009304955929111e-293, 0.000000000000000e+00, 0.000000000000000e+00, -4.009304955928199e-293, -1.436561961160696e-02, 0.000000000000000e+00, -1.414902555709042e-02, -1.457885175943299e-02, 0.000000000000000e+00, -1.435845559243541e-02, -2.953596698171960e-02, 0.000000000000000e+00, -2.873589975139986e-02, -2.676778564190399e-02, 0.000000000000000e+00, -1.422405597184262e-02, -2.815595872865362e-02, 0.000000000000000e+00, -2.741400067319463e-02, -2.815595872865362e-02, 0.000000000000000e+00, -1.425413984219844e-02, -1.599831016937951e-02, 0.000000000000000e+00, -1.579292041448373e-02, -2.691401556474954e-02, 0.000000000000000e+00, -3.401835444239920e-02, -2.312998786814936e-02, 0.000000000000000e+00, -4.487676964645563e-02, -1.993193800810726e-02, 0.000000000000000e+00, -1.966114253238708e-02, -2.148763255643175e-02, 0.000000000000000e+00, -2.118513366618664e-02, -2.148763255643174e-02, 0.000000000000000e+00, -5.956326534387429e-02, -8.281401639764640e-03, 0.000000000000000e+00, -2.476046117221787e-02, -4.725271811892764e-01, 0.000000000000000e+00, -4.644131542323334e-01, -4.835319213311959e-01, 0.000000000000000e+00, -2.576476414293126e-01, -1.998984293668213e-01, 0.000000000000000e+00, -9.939586405955786e-02, -1.658293375974068e-01, 0.000000000000000e+00, -1.663258460089351e-01, -1.658293375974073e-01, 0.000000000000000e+00, -3.116787568544985e-01, -3.658347057770468e-02, 0.000000000000000e+00, -3.579945334712984e-02, -1.676148407307013e+03, 0.000000000000000e+00, -1.631047922520962e+03, -7.020834976182089e-03, 0.000000000000000e+00, -1.529670157896026e-02, -1.238384636418512e-01, 0.000000000000000e+00, -1.193408901074993e-01, -1.916577940224137e+00, 0.000000000000000e+00, -3.217726313826043e+00, -1.916577940224198e+00, 0.000000000000000e+00, -3.217726313825979e+00, -4.278718403715530e+05, 0.000000000000000e+00, -3.710634198475324e+05, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.782394072503520e+08, 0.000000000000000e+00, -1.392906287366620e+08, -1.012368146557429e+02, 0.000000000000000e+00, -9.487622884881392e+01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.874037157272632e+07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_msrpbel_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_msrpbel", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.258748556681470e-03, 1.258935882089467e-03, 1.258771766867334e-03, 1.258952672274823e-03, 1.258834949658553e-03, 1.259046064788857e-03, 1.258574738123438e-03, -3.432542337208824e-20, 1.258763662291954e-03, 1.253647450564461e-19, -3.726183429330807e-19, 1.253647450564461e-19, -3.588050409615513e-18, 1.977025015433018e-03, 7.223796928235699e-18, 2.632265829926920e-18, -3.357997957790469e-18, -3.344181005466340e-18, -7.248063517707377e-19, 9.321287758095222e-19, 2.387550091979059e-18, 3.715187205077216e-18, 1.978938488424632e-03, 3.715187205077216e-18, 3.928357149771993e-03, 4.210384430410503e-03, 3.851039121171483e-03, -5.479637778200349e-17, 4.863875373611407e-17, 2.994049664385289e-17, -4.299856361052260e-17, 3.405940277750399e-03, 4.377101809328145e-03, 2.185882928727699e-03, -1.357472886988748e-17, -3.623190402304877e-18, 3.652285507971736e-03, -1.047097058891590e-16, 4.090016128861882e-03, -3.313357944132828e-18, -5.230559110410791e-17, 9.989141526786543e-04, 1.322486353170478e-16, -3.321993079901842e-17, -1.075449550615714e-16, -1.354878567976805e-16, -8.127261707173711e-17, 3.664308484783255e-05, 0.000000000000000e+00, 0.000000000000000e+00, 1.900474713126711e-10, 0.000000000000000e+00, 3.388467625048916e-07, 8.961750373634974e-22, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 8.630700116277768e-20, 5.376123195709058e-19, -2.168213295221518e-19, -1.330950575120917e-19, -1.589544051969680e-19, -1.155819215672269e-18, 3.792057618598927e-19, -5.971296032523273e-19, 5.078309357882747e-03, -3.127476922861281e-20, -5.814824194525828e-19, 5.079780113497746e-03, -7.177820201775861e-18, 9.066297945243222e-18, 1.817928448809337e-18, 1.106063093238043e-17, -2.492260290102781e-18, 3.939974189221452e-18, -8.018964794189782e-18, 5.425802709961137e-18, -1.761707630258175e-18, 3.859294276498241e-03, -1.761707630258175e-18, 7.134408360065701e-19, 2.387550010963363e-17, 3.601711795093781e-03, -6.772456895619099e-19, 9.842530282782484e-19, 3.995000787619572e-17, 2.435842837383272e-17, 3.686663261015793e-18, -2.095150197423717e-18, 8.466003740640124e-18, 4.726405457420910e-03, -1.143614281000184e-17, -1.638662029572975e-17, 2.582492140006672e-16, 2.406211062678256e-16, 1.077935839796344e-03, 2.135293813940558e-16, 7.064204433573085e-17, 1.379263387388795e-16, -1.097751746662569e-18, 1.433584942545303e-18, 5.497796192343556e-17, -2.171035775124381e-16, -7.388175274336630e-17, -1.532313889934901e-16, 1.028880000134430e-12, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -4.370267456864242e-17, 6.201682194568915e-06, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.118614945558010e-18, 2.308644668481415e-19, 6.178771115044135e-18, 3.723404313799937e-18, 2.354770916275060e-02, 2.290843482505964e-02, 1.943126952142635e-02, -2.383416502081549e-18, 2.150272381346199e-02, 2.092531693494045e-02, 2.150272381346199e-02, -2.456473934323980e-18, 2.659573564102922e-19, -6.335117628108327e-20, 1.036093073135534e-17, 1.701246726654170e-03, -9.318059210411364e-18, 1.995361032168173e-02, -1.177868923004560e-17, -1.022184368367318e-17, 2.050844547344278e-18, 2.590789623178423e-17, -1.299326801740379e-18, 4.136417058144289e-02, 1.552884067349661e-18, 3.668892494852639e-02, 8.315811928803100e-17, -8.020790151727624e-17, 6.953288675284025e-03, -3.411514759591728e-17, 2.119470817435897e-02, -3.750155025465595e-17, -2.018071348504083e-17, 6.539902939735137e-17, 3.930219275666008e-17, 1.570430660951011e-02, 2.621950173156592e-17, -9.366357430213290e-18, 3.328903783296880e-07, 3.341898826335051e-07, -2.354650274347450e-19, 4.326514105262127e-19, -7.840999719181026e-17, -3.713537818594633e-17, 1.451177622878203e-17, 2.102324725927942e-16, 1.776030990881232e-16, -4.660209337099829e-18, 2.861799306667657e-10, 3.346125876352569e-10, 0.000000000000000e+00, 0.000000000000000e+00, 1.487983665517680e-12, 2.208405164989290e-12, 2.153191293252353e-05, 2.782398299828394e-05, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 4.130959506147413e-11]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
