
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_gx_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.431175255786589e+01, -2.431181686410314e+01, -2.431220865694497e+01, -2.431115878109351e+01, -2.431178552635016e+01, -2.431178552635016e+01, -3.425667917334223e+00, -3.425870591399102e+00, -3.432266984768212e+00, -3.433332827949077e+00, -3.425719292864054e+00, -3.425719292864054e+00, -5.876269829327947e-01, -5.869301166914175e-01, -5.696851265689438e-01, -5.783267545250227e-01, -5.873780164154503e-01, -5.873780164154503e-01, -1.935316025812607e-01, -1.948824962867500e-01, -6.760958367398604e-01, -1.116240716897791e-01, -1.937378197130129e-01, -1.937378197130129e-01, -8.175555459444732e-03, -8.546955586249551e-03, -3.513121011169763e-02, -3.863659994332144e-03, -8.474230602045045e-03, -8.474230602045043e-03, -5.951287599024759e+00, -5.952370692732538e+00, -5.951428058339349e+00, -5.952268584102807e+00, -5.951802888094988e+00, -5.951802888094988e+00, -2.157634410521855e+00, -2.185638009538251e+00, -2.158120887666378e+00, -2.180478633787069e+00, -2.176289697054286e+00, -2.176289697054286e+00, -6.228054060333496e-01, -6.794613754399038e-01, -5.662937330782729e-01, -5.948724330899614e-01, -6.571923689710830e-01, -6.571923689710830e-01, -8.159222698354231e-02, -1.919229853246643e-01, -8.075145699265752e-02, -1.973856850006699e+00, -9.854613460401070e-02, -9.854613460401070e-02, -3.727802626276917e-03, -4.260038988983654e-03, -3.193997561130115e-03, -4.869447566742491e-02, -3.881297032390343e-03, -3.881297032390343e-03, -6.805254248800200e-01, -6.769800676700634e-01, -6.782494532733195e-01, -6.792304369961780e-01, -6.787372466263550e-01, -6.787372466263550e-01, -6.542743587592855e-01, -5.698962968136696e-01, -5.941687022006417e-01, -6.168950311738104e-01, -6.049121770449141e-01, -6.049121770449141e-01, -7.000633132108676e-01, -2.538285486692350e-01, -2.933186790923811e-01, -3.609134311865683e-01, -3.291137596133236e-01, -3.291137596133236e-01, -4.897012977087739e-01, -3.281967055038310e-02, -4.422660304135324e-02, -3.423705472379809e-01, -6.634139009158878e-02, -6.634139009158876e-02, -9.446381446682648e-03, -1.166054448290542e-03, -2.215680654176006e-03, -6.307689376987605e-02, -3.298484693906954e-03, -3.298484693906949e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_gx_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.084698855672771e+01, -3.084710761005931e+01, -3.084760930234376e+01, -3.084565875030504e+01, -3.084705160765964e+01, -3.084705160765964e+01, -5.175740246733028e+00, -5.175569356587257e+00, -5.170294434160861e+00, -5.165098040647308e+00, -5.175767989932042e+00, -5.175767989932042e+00, -8.277228459678612e-01, -8.264955206945154e-01, -7.948341550834979e-01, -8.050559550261659e-01, -8.272823652724590e-01, -8.272823652724590e-01, -1.684243267216808e-01, -1.776865003268757e-01, -9.530660150095512e-01, -1.464542572110965e-01, -1.712418685660976e-01, -1.712418685660976e-01, -5.342230623178649e-03, -7.412169882674510e-03, -4.300634281514175e-02, -5.151216723723930e-03, -6.069128167436949e-03, -6.069128167437129e-03, -7.625143348390667e+00, -7.628923058842347e+00, -7.625520747745092e+00, -7.628460238347766e+00, -7.627094827243345e+00, -7.627094827243345e+00, -2.444628271347491e+00, -2.472355869441490e+00, -2.418393759139780e+00, -2.440169694778504e+00, -2.496886022254058e+00, -2.496886022254058e+00, -8.415961316936744e-01, -9.609027211801106e-01, -8.054371753308003e-01, -8.799199252096166e-01, -8.782442806152430e-01, -8.782442806152430e-01, -9.911623962156711e-02, -7.473355612274711e-02, -9.784910212427377e-02, -2.975809847463844e+00, -1.054014757497159e-01, -1.054014757497159e-01, -4.966758100616862e-03, -5.678565595008923e-03, -4.247350057021804e-03, -6.430611149300466e-02, -5.174675348090816e-03, -5.174675348090816e-03, -9.105562467178390e-01, -8.969317171776069e-01, -9.018219679200834e-01, -9.055957618769517e-01, -9.037095538063067e-01, -9.037095538063067e-01, -8.842274873666218e-01, -6.837011518906808e-01, -7.450801999228782e-01, -8.001259262910591e-01, -7.727342961708771e-01, -7.727342961708771e-01, -1.011696063389105e+00, -1.873588149577035e-01, -2.920010609334502e-01, -4.726123585115745e-01, -3.804143246135546e-01, -3.804143246135547e-01, -6.167702449355077e-01, -3.404031734367113e-02, -5.495547146583719e-02, -4.684583626665107e-01, -7.701693414229997e-02, -7.701693414230008e-02, -1.258880854477665e-02, -1.554741005836388e-03, -2.948410010616131e-03, -7.486573061813813e-02, -4.397771503920918e-03, -4.397771503920911e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gx_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.195937526466175e-08, -1.195925777808171e-08, -1.195863225109811e-08, -1.196055685816150e-08, -1.195931417127260e-08, -1.195931417127260e-08, -2.324371359024050e-05, -2.323564027174227e-05, -2.298758122025194e-05, -2.294822570328512e-05, -2.324188311111669e-05, -2.324188311111669e-05, -2.117402847073220e-03, -2.119543566855048e-03, -2.233401520551127e-03, -2.487743243160115e-03, -2.118548972572358e-03, -2.118548972572358e-03, -2.403572096591458e+00, -2.303565990431065e+00, -3.843868156731270e-04, -4.766872086079248e-01, -2.376715486030919e+00, -2.376715486030919e+00, -6.851208096525380e+02, -4.321783463237696e+02, -5.469511129373388e+00, -1.126271313654440e+00, -5.931080250539496e+02, -5.931080250539305e+02, -3.384950773323503e-06, -3.382536860015151e-06, -3.384688635571648e-06, -3.382812235954134e-06, -3.383733472135558e-06, -3.383733472135558e-06, -1.739500286855241e-04, -1.683494583927038e-04, -1.755095357618243e-04, -1.710646024407791e-04, -1.681619674919461e-04, -1.681619674919461e-04, -2.306194805726363e-02, -1.647474775152612e-02, -3.088633451378365e-02, -2.562041604899496e-02, -1.947403543465730e-02, -1.947403543465730e-02, -1.383458475423592e+00, -2.402136143193812e+00, -1.585720270912341e+00, -2.095292352534172e-04, -2.390323292330837e+00, -2.390323292330837e+00, -5.695485119046711e+00, -2.236865593437907e+00, -4.023028321797385e+01, -8.451230479717403e-01, -1.712742176195371e+00, -1.712742176195255e+00, -1.937378230225569e-02, -1.979170309153200e-02, -1.964062690169010e-02, -1.952503140277415e-02, -1.958281461949973e-02, -1.958281461949973e-02, -2.215784573013886e-02, -3.903390768768501e-02, -3.282415149773757e-02, -2.812739293096799e-02, -3.041903883784926e-02, -3.041903883784926e-02, -1.397078328764366e-02, -8.956273099541814e-01, -4.640745653435975e-01, -1.873548719055737e-01, -2.871540410594098e-01, -2.871540410594099e-01, -6.137343554357225e-02, -1.373194596525256e+01, -3.017139449451990e+00, -2.326279848523181e-01, -3.381260536439641e+00, -3.381260536439617e+00, -1.343270625742272e+00, -9.514043372496296e-01, -4.132714593476613e+01, -3.637003437332907e+00, -2.217539113851987e+00, -2.217539113851672e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gx_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gx_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.849562506232813e-03, 1.849557804871558e-03, 1.849531065814491e-03, 1.849607957757336e-03, 1.849560077789793e-03, 1.849560077789793e-03, 1.551213636923757e-02, 1.550684611803252e-02, 1.534584806641592e-02, 1.532148883186791e-02, 1.551116321812903e-02, 1.551116321812903e-02, 9.952932503297506e-03, 9.932345512630360e-03, 9.651789663176086e-03, 1.100687407626992e-02, 9.947139166438171e-03, 9.947139166438171e-03, 2.313141048175712e-01, 2.306636317139722e-01, 3.110475949486116e-03, 1.748201012460747e-02, 2.314810883213722e-01, 2.314810883213722e-01, 1.148673179755297e-02, 8.327153045132100e-03, 7.076607429199485e-03, 2.084827773036894e-06, 1.107436276465987e-02, 1.107436276465951e-02, 7.572879163298858e-03, 7.571517083663179e-03, 7.572718988360343e-03, 7.571660959353819e-03, 7.572208909989804e-03, 7.572208909989804e-03, 2.062492798807821e-02, 2.038577792071953e-02, 2.063252723788692e-02, 2.044453109652446e-02, 2.044880077644097e-02, 2.044880077644097e-02, 7.153539699136789e-02, 6.549875005834366e-02, 8.185649713210620e-02, 7.704770123041027e-02, 6.763984371070450e-02, 6.763984371070450e-02, 2.012195005866194e-02, 2.361803626650665e-01, 2.218825826212579e-02, 2.344175737573971e-02, 5.375463766359831e-02, 5.375463766359831e-02, 9.464924532601692e-06, 5.548540812049176e-06, 4.201610040097987e-05, 2.962100433993643e-03, 3.213717857923079e-06, 3.213717857923264e-06, 6.602668480902736e-02, 6.637644667053942e-02, 6.625071935786410e-02, 6.615396051076217e-02, 6.620246864989422e-02, 6.620246864989422e-02, 6.847504192049129e-02, 7.874964795052511e-02, 7.547124467194651e-02, 7.265258287965479e-02, 7.409053316322861e-02, 7.409053316322864e-02, 6.402344506546730e-02, 1.752070511803568e-01, 1.520871370481335e-01, 1.282957847128195e-01, 1.360488310505207e-01, 1.360488310505207e-01, 9.084815371592514e-02, 1.411530154503438e-02, 7.694588005928110e-03, 1.343641981949141e-01, 2.629677973742001e-02, 2.629677973741981e-02, 3.625491619002541e-05, 4.843085178933109e-08, 1.442126613073963e-05, 2.456076285172777e-02, 2.554117992385270e-06, 2.554117992385277e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
