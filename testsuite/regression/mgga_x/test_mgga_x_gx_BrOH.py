
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_gx_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.248506600074343e+01, -2.248517584634243e+01, -2.248570096507573e+01, -2.248390715564964e+01, -2.248512356335367e+01, -2.248512356335367e+01, -3.138743647667975e+00, -3.138803417445073e+00, -3.140715615509254e+00, -3.140225552312286e+00, -3.138775169042618e+00, -3.977862817396341e+00, -5.707751106886387e-01, -7.617198508326821e-01, -7.414339423777576e-01, -7.472712335249296e-01, -7.622170843651590e-01, -7.622170843651590e-01, -2.085965416969460e-01, -2.113740194200614e-01, -6.697064224666700e-01, -1.512323635996236e-01, -2.094296771609730e-01, -2.094296771609730e-01, -1.165024944133348e-02, -1.220309421992291e-02, -4.960030129467351e-02, -5.589005072429098e-03, -1.207592568817461e-02, -1.207592568817435e-02, -5.953353532141619e+00, -5.954412343618801e+00, -5.953465245414523e+00, -5.635475078340441e+00, -5.953891690469749e+00, -5.953891690469749e+00, -1.737212564868065e+00, -1.754474298221577e+00, -1.730081602357431e+00, -1.743585453607107e+00, -1.758236269098691e+00, -2.255132884898559e+00, -6.638456554970001e-01, -7.211022702903387e-01, -6.299233568606114e-01, -6.570271045025100e-01, -6.893519311477418e-01, -6.002728430462521e-01, -7.789281158630129e-02, -2.100910278574167e-01, -7.695209088109560e-02, -2.193346754155703e+00, -1.284828658657746e-01, -1.284828658657746e-01, -3.726878526574749e-03, -6.161764302713202e-03, -4.618273698208753e-03, -4.806854430202218e-02, -3.880822211651549e-03, -5.614322655583464e-03, -6.850051062918594e-01, -6.813481183009036e-01, -6.683351377983764e-01, -6.836704667094371e-01, -6.831642640841242e-01, -6.831642640841242e-01, -6.630206286279328e-01, -5.751674673190471e-01, -6.007882791616750e-01, -6.245482217828221e-01, -6.124413816820942e-01, -5.567122752913334e-01, -7.560749995994699e-01, -1.947762473203100e-01, -3.138294454479950e-01, -3.122485906240580e-01, -3.548559384397816e-01, -3.548559384397815e-01, -4.112233555504203e-01, -4.593864081313753e-02, -6.219022279547701e-02, -3.790815538565337e-01, -6.310388568210194e-02, -9.018481686215216e-02, -1.365400044306472e-02, -1.686984569437916e-03, -3.204656184850190e-03, -8.603823582584608e-02, -4.771431271838856e-03, -4.771431271838131e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_gx_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.339485050572217e+01, -3.339489794085801e+01, -3.339517238711241e+01, -3.339439098681951e+01, -3.339487504064432e+01, -3.339487504064432e+01, -4.569381859598782e+00, -4.569478749375580e+00, -4.572555408627657e+00, -4.571729546336167e+00, -4.569430491085910e+00, -4.400738920537695e+00, -8.165144688683572e-01, -6.343906562450412e-01, -5.584727327269415e-01, -5.902580542312227e-01, -6.362296777994837e-01, -6.362296777994837e-01, -1.553019867235632e-01, -1.632109007792008e-01, -9.453630240570762e-01, 9.838586068412943e-02, -1.576053795627270e-01, -1.576053795627270e-01, 1.962328197109482e+00, 1.878531515928966e+00, 6.960033856009091e-01, 6.943186972548347e+00, 1.856137753619960e+00, 1.856137753619981e+00, -7.622442191895164e+00, -7.626253240077897e+00, -7.622857134711233e+00, -8.058151238140050e+00, -7.624363553180856e+00, -7.624363553180856e+00, -2.521649977438636e+00, -2.548433738571904e+00, -2.510499467517687e+00, -2.531526411408168e+00, -2.554319809701398e+00, -2.403036689605887e+00, -7.886351463684256e-01, -9.050250237904052e-01, -7.219882927471145e-01, -7.942830177715012e-01, -8.365543261237981e-01, -9.777911521021427e-01, -1.056034540590589e-01, -6.879537167422972e-02, -1.044147797941198e-01, -2.666966340946257e+00, 1.143345593806966e-01, 1.143345593806966e-01, -4.969482676910932e-03, 5.602544593333763e+00, 3.769481884175000e+00, -6.454473003526096e-02, -5.174784596837046e-03, 5.540409643041885e+00, -9.045923968425275e-01, -8.911453860178092e-01, -9.151399425756563e-01, -8.996953534743380e-01, -8.978304912904050e-01, -8.978304912904050e-01, -8.725617035758374e-01, -6.770724018435598e-01, -7.365809675514867e-01, -7.901343276125889e-01, -7.629831121249051e-01, -8.416886913326099e-01, -9.357495583687008e-01, -2.760571011852686e-01, -2.714190943255178e-01, -4.534421432730102e-01, -3.518000790072813e-01, -3.518000790072812e-01, -5.989619604555110e-01, 7.930424152082838e-01, 5.809207723915903e-01, -4.222779175689386e-01, -8.537360344941317e-02, 2.626398631961730e-01, 2.683518987907569e+00, 1.949841215659647e+01, 7.315917576853185e+00, 2.516873110629350e-01, 5.500038339730330e+00, 5.500038339730750e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gx_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.294576122488992e-08, -1.294557789569085e-08, -1.294467287456590e-08, -1.294767108765447e-08, -1.294566534787891e-08, -1.294566534787891e-08, -4.336184859989458e-06, -4.337333365042910e-06, -4.371367891632246e-06, -4.356771221858208e-06, -4.336421142507706e-06, -1.697952878519990e-05, -1.103325117669715e-03, -1.262826671383660e-02, -1.406808504415827e-02, -1.363363878745179e-02, -1.259534666467646e-02, -1.259534666467646e-02, -2.245413991446965e+00, -2.129699931881669e+00, -2.818005347274451e-04, -8.127292336248392e+00, -2.209896568428811e+00, -2.209896568428811e+00, -2.307724412462569e+05, -1.917100951240509e+05, -7.024049801994522e+02, -4.356992631541944e+06, -1.999139559635972e+05, -1.999139559635994e+05, -3.384372419980332e-06, -3.381965830401891e-06, -3.384118404100399e-06, -3.525624650917279e-06, -3.383148963878359e-06, -3.383148963878359e-06, -3.326066254428441e-05, -3.404534071534014e-05, -3.287768788908979e-05, -3.351904034525883e-05, -3.430192328156229e-05, -1.643751978398982e-04, -2.189053476058219e-02, -1.572307148797565e-02, -2.700063595224839e-02, -2.281348831974574e-02, -1.882612137445740e-02, -2.426886690603159e-02, -7.191645834200940e-02, -2.182201335466758e+00, -8.403620725717319e-02, -1.836942893909512e-04, -1.560069620599329e+01, -1.560069620599329e+01, -1.610573558603148e-01, -2.949201955337656e+06, -9.345578090368792e+06, -7.938220704962889e-02, -1.642721086225379e-01, -4.278931841516641e+06, -1.930854750246892e-02, -1.972643460670539e-02, -1.981424724113898e-02, -1.945976369332094e-02, -1.951750405149208e-02, -1.951750405149208e-02, -2.199969587198117e-02, -3.884611456940520e-02, -3.263165006179857e-02, -2.794222181220124e-02, -3.021807050403401e-02, -3.362176963924136e-02, -1.300964149498481e-02, -4.902967319168098e-02, -4.382784155784832e-01, -3.316473863601840e-02, -2.681121718818231e-01, -2.681121718818232e-01, -1.612632632275831e-02, -9.545798753575560e+02, -2.842080598206438e+02, -2.058705534349751e-01, -1.243858263280480e-01, -6.426745908845852e+01, -1.223165407144343e+05, -5.249046254593719e+08, -4.030872583186644e+07, -7.758162167632359e+01, -8.202196135986694e+06, -8.202196135987350e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gx_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.002110816519829e-03, 2.002097043131747e-03, 2.002032850882035e-03, 2.002257567281148e-03, 2.002103587627022e-03, 2.002103587627022e-03, 2.893835815401812e-03, 2.894620516918744e-03, 2.918199477563918e-03, 2.908818419419163e-03, 2.894039859094313e-03, 1.133179446325431e-02, 5.186221620764504e-03, 5.917703707010049e-02, 6.079614281644369e-02, 6.032123521887618e-02, 5.913843283544414e-02, 5.913843283544414e-02, 2.160933421189934e-01, 2.132538519796859e-01, 2.280343003666982e-03, 2.980600367332302e-01, 2.152336978255008e-01, 2.152336978255008e-01, 3.869129504629519e+00, 3.693843793827757e+00, 9.087913313663228e-01, 8.065178554251494e+00, 3.732742732418317e+00, 3.732742732418357e+00, 7.571585259701784e-03, 7.570238883114005e-03, 7.571443183358752e-03, 7.891314286663748e-03, 7.570900881839960e-03, 7.570900881839960e-03, 3.943654249415621e-03, 4.122619470739168e-03, 3.865030967952339e-03, 4.005978167818442e-03, 4.171176193374544e-03, 1.998832270666155e-02, 6.790181343585031e-02, 6.251030638359781e-02, 7.155842589232876e-02, 6.860649057071716e-02, 6.538942129995469e-02, 8.429389840990356e-02, 1.046001313997284e-03, 2.145561583922050e-01, 1.175880200433388e-03, 2.055138968079332e-02, 3.508352926751186e-01, 3.508352926751186e-01, 2.676498466371475e-07, 7.315489790790989e+00, 9.760427119605742e+00, 2.782293898118151e-04, 3.082333210310677e-07, 8.028808925850772e+00, 6.580436180070082e-02, 6.615755241559206e-02, 6.683636626420876e-02, 6.593282296763985e-02, 6.598167705711021e-02, 6.598167705711021e-02, 6.798630676550564e-02, 7.837078140018144e-02, 7.502863390187209e-02, 7.217428899418389e-02, 7.360104199026060e-02, 8.189130668267927e-02, 5.961885245992287e-02, 9.591427555609581e-03, 1.436331883562108e-01, 2.271035775492403e-02, 1.270271086569583e-01, 1.270271086569583e-01, 2.387102758168072e-02, 9.812289404275569e-01, 7.248136736541065e-01, 1.189093043203482e-01, 9.673749307853888e-04, 4.998216486779188e-01, 3.301327258463080e+00, 2.672005699776883e+01, 1.406588452853473e+01, 5.239103686528170e-01, 9.447128394324606e+00, 9.447128394325318e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
