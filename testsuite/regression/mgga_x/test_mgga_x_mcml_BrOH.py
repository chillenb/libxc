
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mcml_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mcml", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.071066135803154e+01, -2.071076012720443e+01, -2.071123327659546e+01, -2.070962015941400e+01, -2.071071310963871e+01, -2.071071310963871e+01, -3.212051153914035e+00, -3.212077861702667e+00, -3.212992107669353e+00, -3.212895694114009e+00, -3.212073847485557e+00, -3.807443203644132e+00, -6.028689542670962e-01, -7.845970368912631e-01, -7.774187258862333e-01, -7.773224178942584e-01, -7.847640727656459e-01, -7.847640727656459e-01, -2.191224644367513e-01, -2.207350071057284e-01, -7.189352832648573e-01, -1.708453206047242e-01, -2.196261124711239e-01, -2.196261124711239e-01, -9.541748746295696e-03, -9.999320830989396e-03, -4.447060835625773e-02, -4.561106029706874e-03, -9.895202712235419e-03, -9.895202712235419e-03, -5.259058601157792e+00, -5.258306910864001e+00, -5.258970743017637e+00, -5.155623887348832e+00, -5.258688011013122e+00, -5.258688011013122e+00, -1.793901970512982e+00, -1.808861960016380e+00, -1.787778099983850e+00, -1.799476855039068e+00, -1.811994094489503e+00, -2.185187021505654e+00, -6.173715514671309e-01, -6.483607675147053e-01, -5.951014259661782e-01, -6.055138620481979e-01, -6.339371577494397e-01, -5.616572384377709e-01, -8.704877348013666e-02, -2.342936139444418e-01, -8.593486604939783e-02, -2.014736002707298e+00, -1.442699970612988e-01, -1.442699970612988e-01, -4.223218524288525e-03, -5.029344861045514e-03, -3.769786884913879e-03, -5.416107306277964e-02, -4.397643238227060e-03, -4.582291552626105e-03, -5.825959257011274e-01, -5.874011437401563e-01, -5.819582433427519e-01, -5.844456625002823e-01, -5.851218208599364e-01, -5.851218208599364e-01, -5.667545271274277e-01, -5.372192005752973e-01, -5.491221961773028e-01, -5.578581944993886e-01, -5.537596921550135e-01, -5.129576799871497e-01, -6.868107072094174e-01, -2.081147871172185e-01, -3.207886050774748e-01, -3.221157216906638e-01, -3.510876083243407e-01, -3.510876083243407e-01, -4.195521123871942e-01, -4.041936390380493e-02, -5.822720793622416e-02, -3.619678474929267e-01, -7.065052114714086e-02, -9.535762662148185e-02, -1.117507509860770e-02, -1.376211454400725e-03, -2.614765066992725e-03, -9.094051380338544e-02, -3.894028481959365e-03, -3.894028481959359e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mcml_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mcml", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.061074833350797e+01, -3.061073879814525e+01, -3.061075860144528e+01, -3.061090425121400e+01, -3.061074289491680e+01, -3.061074289491680e+01, -4.427084887608299e+00, -4.427055387516438e+00, -4.426277587898008e+00, -4.426943675111378e+00, -4.427097767394236e+00, -4.355891664110261e+00, -8.211071748408850e-01, -8.000980612709589e-01, -7.818789907003647e-01, -7.854167384403259e-01, -8.006617135458455e-01, -8.006617135458455e-01, -2.202321301733463e-01, -2.224509165688928e-01, -9.686969989276264e-01, -2.481300447309573e-01, -2.208731831063434e-01, -2.208731831063434e-01, -1.285048146969779e-02, -1.348436168586853e-02, -7.189208197492676e-02, -6.086788206116806e-03, -1.334426971888349e-02, -1.334426971721263e-02, -6.435240777830738e+00, -6.436710538921838e+00, -6.435396913782200e+00, -7.093579080806134e+00, -6.435984112259260e+00, -6.435984112259260e+00, -2.487202632407375e+00, -2.507864675103511e+00, -2.478443826617968e+00, -2.495017966468737e+00, -2.512016879076019e+00, -2.457726860968370e+00, -7.249528754225639e-01, -7.794394030271982e-01, -6.904027040145829e-01, -7.151872533237283e-01, -7.497824716458259e-01, -7.941850854365937e-01, -1.161184561071671e-01, -2.600003944281900e-01, -1.146386174283218e-01, -2.384638360009573e+00, -2.158852468454869e-01, -2.158852468454869e-01, -5.630958061921576e-03, -6.714088868802646e-03, -5.033411534759333e-03, -7.221999357514379e-02, -5.863524354520478e-03, -6.116614865821904e-03, -7.541118200635849e-01, -7.431495242848488e-01, -7.493003182210644e-01, -7.497572909966052e-01, -7.482124794714624e-01, -7.482124794714624e-01, -7.271463438282654e-01, -6.289630742360147e-01, -6.520519611017995e-01, -6.746704661648353e-01, -6.626684877770342e-01, -7.723112530752942e-01, -8.190342000654830e-01, -2.811376359737951e-01, -3.302214395516894e-01, -4.466178239734228e-01, -3.812444419376992e-01, -3.812444419376991e-01, -5.754962199016495e-01, -6.369847662250559e-02, -9.778256318037785e-02, -4.153103719011708e-01, -9.423287535590213e-02, -1.568880256931458e-01, -1.502185236980257e-02, -1.835104492994296e-03, -3.487934944380285e-03, -1.496645974107003e-01, -5.196964803145445e-03, -5.196964763192161e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mcml_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mcml", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.325791679962853e-08, -1.325745548749531e-08, -1.325533326683545e-08, -1.326285346510637e-08, -1.325767449635351e-08, -1.325767449635351e-08, -8.590356054560846e-06, -8.589356333580861e-06, -8.557573670705984e-06, -8.567253690635259e-06, -8.589915203570286e-06, -5.081426428001831e-06, -6.869152452985968e-03, -3.056129288026034e-03, -3.123809644425513e-03, -3.160113632412593e-03, -3.053357470748231e-03, -3.053357470748231e-03, -4.931190962291590e-01, -4.838263550805541e-01, -3.367376718242648e-03, 2.065786779719957e-01, -4.902849488629807e-01, -4.902849488629807e-01, 5.607085948009727e+00, 5.764572064273763e+00, 4.353967514691361e+00, 1.249038678586837e+00, 6.032935144931124e+00, 6.032934966519633e+00, -2.321414641344967e-06, -2.327530660196265e-06, -2.322099274099691e-06, -2.453379544073615e-06, -2.324470333787239e-06, -2.324470333787239e-06, -9.105311636359900e-05, -8.804192878390794e-05, -9.228027935348258e-05, -8.993329033365757e-05, -8.740105240124099e-05, -4.653683222905243e-05, -8.355004712872868e-03, -8.883359652196039e-03, -8.850570196685744e-03, -9.644563727297681e-03, -8.161359833486139e-03, -1.299896975913441e-02, -1.572473901265100e+01, -2.028759636049106e-01, -1.655486942778617e+01, -8.070448068095922e-05, 4.818177672741888e-01, 4.818177672741888e-01, -2.840266811263779e+06, 1.635196595567244e+00, 6.524437173035338e+00, -1.049860457231924e+02, -2.415757730297630e+06, 1.993567538501590e+00, -1.877502063386743e-02, -1.710751747379408e-02, 3.632454966415740e-03, -1.814538331655235e-02, -1.791192950094299e-02, -1.791192950094299e-02, -2.052531725246889e-02, -1.416371162076622e-02, -1.520561978424120e-02, -1.700784060380802e-02, -1.599770927346782e-02, -3.620077476366442e-02, -6.521419048470391e-03, -4.800662584451489e-01, -1.089919342159068e-01, -8.758127904845994e-02, -7.198156386651161e-02, -7.198156386651187e-02, -2.869699804061301e-02, 4.108920390584712e+00, 3.234435790147818e+00, -6.248719235534739e-02, -3.624463151824194e+01, 1.872231737572569e+00, 2.067056576794208e+00, 1.559822904524036e+00, 3.265772954166752e+00, 2.255842960372488e+00, 2.752081393527661e+00, 2.752021880127154e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mcml_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mcml", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.756898613704362e-03, 1.756854672123128e-03, 1.756659079935556e-03, 1.757374130071529e-03, 1.756875489393321e-03, 1.756875489393321e-03, 1.086721526351092e-03, 1.086477289422010e-03, 1.078690001365392e-03, 1.081711766377038e-03, 1.086648644867522e-03, -7.913865138380770e-18, 1.615468282484161e-03, 3.689262290096928e-17, -4.639181407318406e-17, 2.648534889125463e-16, 1.947986110343965e-16, 1.947986110343965e-16, -2.751198972719426e-16, -3.318189494747743e-16, 4.400776480184678e-04, -1.728006046574446e-15, -1.542816866195541e-16, -1.542816866195541e-16, 7.071494446513910e-13, -3.886563453899179e-12, -7.491630376838218e-14, -1.578974209993093e-11, -2.661124522632614e-12, 6.701278494634042e-13, 6.099784217766895e-18, -7.461670248249592e-19, 4.148952872770334e-19, 3.181759367174865e-03, -2.230468145730176e-19, -2.230468145730176e-19, 1.830686210159876e-03, 1.893384534503245e-03, 1.797391827387364e-03, 1.854616458354589e-03, 1.907271615358614e-03, -3.153262771407837e-17, -5.922991223008438e-17, 1.867724714924150e-17, 1.041770700852203e-16, -4.464096099613862e-17, -2.499640257639354e-17, 2.152572532669164e-02, 3.199914630167927e-05, 7.370260300722776e-17, 3.815529445943411e-05, -8.847078329231474e-18, 2.004053369854187e-15, 2.004053369854187e-15, 2.539458244898934e-11, -2.664566385942927e-11, -3.191132516479343e-11, 3.209524440920381e-06, 3.202703990187444e-11, 3.888635228966041e-11, -2.061072075654257e-17, 5.440344083763727e-18, -7.411791482275544e-02, 1.507680621098209e-17, 1.965352696240235e-19, 1.965352696240235e-19, -1.674572491838219e-17, 5.984603187892858e-17, -6.415863087474465e-17, -5.070134846682204e-17, 4.461195759745365e-17, 7.279811771196670e-02, 2.514404422798734e-17, 2.141228494612953e-03, 3.220384984223116e-16, 1.048304053117397e-02, 9.742905810651480e-17, 2.107523712573629e-16, 7.582601364698671e-03, -1.214901870205829e-14, -4.597882132783074e-15, -4.443991023875791e-17, 2.520514475229127e-05, -4.771254805523147e-15, 3.244078615166196e-12, 1.115683412962949e-09, -1.204475848902669e-11, -4.489751986659563e-15, -3.526058624866501e-12, 6.502030690672885e-11]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
