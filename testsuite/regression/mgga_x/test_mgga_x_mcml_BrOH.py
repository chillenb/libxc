
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mcml_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mcml", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.190121147318404e+01, -2.190123633815693e+01, -2.190140835348938e+01, -2.190099849303778e+01, -2.190122409412599e+01, -2.190122409412599e+01, -3.379937916961879e+00, -3.379940668725486e+00, -3.380254144895972e+00, -3.381588409396494e+00, -3.379947244451749e+00, -3.379947244451749e+00, -6.615259264021599e-01, -6.613066580160050e-01, -6.568869590848649e-01, -6.627331444573802e-01, -6.614452441805662e-01, -6.614452441805662e-01, -2.085667333137630e-01, -2.086098527125909e-01, -7.705426721878774e-01, -1.425257619699193e-01, -2.083109071196237e-01, -2.083109071196237e-01, -5.882661315742928e-03, -6.175028419082230e-03, -3.128807602968496e-02, -2.766248398091120e-03, -6.111560525117169e-03, -6.111560525117169e-03, -5.257661659613636e+00, -5.256921491753949e+00, -5.257592448135012e+00, -5.257016879072747e+00, -5.257273440421811e+00, -5.257273440421811e+00, -2.173062283714036e+00, -2.187142420809160e+00, -2.174141837738645e+00, -2.183404045105251e+00, -2.182009947382510e+00, -2.182009947382510e+00, -5.886206048191619e-01, -6.272042214403092e-01, -5.402815032244790e-01, -5.540299694301656e-01, -6.197056738752511e-01, -6.197056738752511e-01, -9.578474330281740e-02, -2.138281246632368e-01, -9.548370463436316e-02, -1.833434063407642e+00, -1.199944234176012e-01, -1.199944234176012e-01, -2.668051985054325e-03, -3.053309100138472e-03, -2.287814245447115e-03, -5.054586268993783e-02, -2.782182639926790e-03, -2.782182639926788e-03, -5.792879796563040e-01, -5.845294839982755e-01, -5.827563037678878e-01, -5.813027768057820e-01, -5.820388425159049e-01, -5.820388425159049e-01, -5.625137808751698e-01, -5.364337656717935e-01, -5.477265782965036e-01, -5.555468057814698e-01, -5.519466610934753e-01, -5.519466610934753e-01, -6.479430392164329e-01, -2.788044432002494e-01, -3.092946327924965e-01, -3.562163235997263e-01, -3.338017505585015e-01, -3.338017505585014e-01, -4.777116918755978e-01, -2.777265959306160e-02, -4.250048986553124e-02, -3.307031930842323e-01, -7.526312897474280e-02, -7.526312897474281e-02, -6.920248503261327e-03, -8.315800552440356e-04, -1.581818513622915e-03, -7.185492962865013e-02, -2.362728200034075e-03, -2.362728200034074e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mcml_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mcml", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.686228917382036e+01, -2.686232414113371e+01, -2.686233846034498e+01, -2.686175098381828e+01, -2.686230902649281e+01, -2.686230902649281e+01, -4.189792128106955e+00, -4.190009944250131e+00, -4.196949564219235e+00, -4.196369650566352e+00, -4.189861326828077e+00, -4.189861326828077e+00, -7.841608848202908e-01, -7.831532807034566e-01, -7.602715792060216e-01, -7.664702921772266e-01, -7.837949689021652e-01, -7.837949689021652e-01, -1.155927110664839e-01, -1.303076267870669e-01, -9.282988994702777e-01, -2.077561009617704e-01, -1.207890758843643e-01, -1.207890758843643e-01, -7.778705708309823e-03, -8.392611679732693e-03, -5.675716651384151e-02, -3.722443517182883e-03, -8.160833767181056e-03, -8.160833767181110e-03, -6.442157971880862e+00, -6.443518056746584e+00, -6.442215412358623e+00, -6.443278258888224e+00, -6.442962349551191e+00, -6.442962349551191e+00, -2.276189036384318e+00, -2.473565229379772e+00, -2.364988050751423e+00, -2.525650389212319e+00, -2.307509506187108e+00, -2.307509506187108e+00, -7.436109672426567e-01, -8.659398394990315e-01, -6.958479465294085e-01, -7.839843026704707e-01, -7.719703501025655e-01, -7.719703501025655e-01, -1.661738418194394e-01, -1.761917618340196e-02, -1.637522602143431e-01, -2.645897143166588e+00, -1.727210986666177e-01, -1.727210986666177e-01, -3.588937420210836e-03, -4.118235238151052e-03, -3.083975974736435e-03, -9.641665874806714e-02, -3.752931794301453e-03, -3.752931794301452e-03, -7.591239088669915e-01, -7.506097694088972e-01, -7.533772178389446e-01, -7.557273082641577e-01, -7.545279389508250e-01, -7.545279389508250e-01, -7.318772771445706e-01, -6.611684085891114e-01, -6.769337072214542e-01, -6.933501266828098e-01, -6.848255209370425e-01, -6.848255209370426e-01, -9.180142527727826e-01, -1.860559122013346e-01, -2.114017801946592e-01, -4.071384283853017e-01, -3.017019350185695e-01, -3.017019350185696e-01, -5.098268303236487e-01, -4.731960911816291e-02, -7.990701751691079e-02, -4.040691091534057e-01, -1.324037888902596e-01, -1.324037888902597e-01, -9.743540161271413e-03, -1.110039109684556e-03, -2.117140958039506e-03, -1.273214905434524e-01, -3.182453536887825e-03, -3.182453536887826e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mcml_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mcml", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.728304425148329e-09, -3.728480560052248e-09, -3.730700620360921e-09, -3.727922125643305e-09, -3.728383596999717e-09, -3.728383596999717e-09, -8.233241256612385e-06, -8.239996121865405e-06, -8.454587334995327e-06, -8.479539655277523e-06, -8.234272401366295e-06, -8.234272401366295e-06, -4.486513997114623e-03, -4.485042835997419e-03, -4.393874469785216e-03, -4.462662851819617e-03, -4.486247995602806e-03, -4.486247995602806e-03, -3.431899541150232e+00, -3.143903402750539e+00, -2.144130602998573e-03, 1.175457168315103e-01, -3.333722081075007e+00, -3.333722081075007e+00, -3.705577386750228e+01, -1.233952097969972e+01, 5.490924553524136e+00, 1.155598813498249e+01, -2.910041574883181e+01, -2.910041574883059e+01, -2.255792078428108e-06, -2.262641736495665e-06, -2.257387855339879e-06, -2.262659004711656e-06, -2.258099064464078e-06, -2.258099064464078e-06, -1.206158440275184e-04, -5.162553930000106e-05, -8.253804926040252e-05, -2.877122697412147e-05, -1.188116469666832e-04, -1.188116469666832e-04, -3.278293415990197e-02, -1.723616703926658e-02, -2.616790400276957e-02, -2.506658007980578e-02, -2.646151299095010e-02, -2.646151299095010e-02, 8.155016538235763e-01, -3.377886768766605e+00, 8.140055326122645e-01, -1.992130219689552e-04, -9.405298544143297e-01, -9.405298544143297e-01, 1.225050122479864e+01, 1.229341547428126e+01, 3.508007653787718e+01, 4.436746291342705e+00, 1.816094736094925e+01, 1.816094736095030e+01, -9.725585509206755e-03, -8.861228735438572e-03, -9.165858585692029e-03, -9.406737061631509e-03, -9.281644880474090e-03, -9.281644880474095e-03, -1.636138637382995e-03, 1.329206833434622e-03, -2.454801022238962e-04, -1.531266622788097e-03, -5.757513667762939e-04, -5.757513667762804e-04, -1.454194631464171e-02, -8.266441037047378e-01, -6.720116670652742e-01, -1.616943677929986e-01, -3.933252783739950e-01, -3.933252783739949e-01, -9.911803730280637e-02, 2.915065646164054e+00, 4.109853894484242e+00, -2.092056863046428e-01, 1.357814885749238e+00, 1.357814885749264e+00, 1.242595243403351e+01, 2.106419913453973e+01, 1.810335847506765e+01, 1.975240183477606e+00, 2.650860649449387e+01, 2.650860649449480e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mcml_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mcml", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mcml_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mcml", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-5.082501195492604e-04, -5.082313407178217e-04, -5.079031847341321e-04, -5.081951565339489e-04, -5.082425214202378e-04, -5.082425214202378e-04, 1.487868606062276e-03, 1.492399541512638e-03, 1.637465129806453e-03, 1.658857330693289e-03, 1.488636280796145e-03, 1.488636280796145e-03, 3.181477730422526e-03, 3.179219829695457e-03, 3.303943155058209e-03, 3.873782394181532e-03, 3.181297152088010e-03, 3.181297152088010e-03, 2.938206236840457e-01, 2.762888619554548e-01, 5.180646991174313e-04, 5.902902658130613e-03, 2.877183182671096e-01, 2.877183182671096e-01, 8.980397705717456e-04, 5.570601295571733e-04, 9.012320454156504e-04, 1.337760151191630e-09, 8.647671214319507e-04, 8.647671214319419e-04, -1.613151361259182e-04, -1.596480018558683e-04, -1.590916667886137e-04, -1.579176339332742e-04, -1.632237699650879e-04, -1.632237699650879e-04, 8.126845306965787e-03, 1.969665982943647e-04, 3.670629263892738e-03, -2.509753160149733e-03, 8.175009653266306e-03, 8.175009653266306e-03, 7.757074674255636e-02, 5.003585037458266e-02, 4.487792345876494e-02, 5.544117651573044e-02, 6.482725156655753e-02, 6.482725156655753e-02, 7.759848991544950e-03, 3.243609680202150e-01, 8.986788475935382e-03, 1.626596881006056e-02, 3.806825673828822e-02, 3.806825673828822e-02, 1.272853608201511e-08, 6.101666481670063e-09, 1.104209107701614e-07, 2.642582499121348e-04, 2.565781039158461e-09, 2.565781038680514e-09, -3.392907881403690e-02, -3.034817130861690e-02, -3.155980341678659e-02, -3.254767200021272e-02, -3.206144237051763e-02, -3.206144237051763e-02, -6.260028895492498e-02, -3.235029807955702e-02, -3.645465652628308e-02, -4.297135514801145e-02, -4.016982282703738e-02, -4.016982282703747e-02, 5.309962566473652e-02, 1.345950605742003e-01, 1.865266318238014e-01, 7.376785616856998e-02, 1.465479799289463e-01, 1.465479799289462e-01, 1.143433299600137e-01, 2.672620038343659e-03, 1.161829887555100e-03, 7.997600547115484e-02, 1.094759022267101e-02, 1.094759022267085e-02, 1.514403113501919e-07, 2.602771944463125e-12, 1.846957026209752e-08, 9.394721642635951e-03, 1.675840435840763e-09, 1.675840436498299e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
