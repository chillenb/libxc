
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_22_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_22", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.503289813510611e+01, -2.503296086048342e+01, -2.503340764636805e+01, -2.503238662223252e+01, -2.503292969665451e+01, -2.503292969665451e+01, -3.405522771557023e+00, -3.405664731189104e+00, -3.410224347560690e+00, -3.411099695560819e+00, -3.405563179194243e+00, -3.405563179194243e+00, -5.776518534733590e-01, -5.770031827489018e-01, -5.612935848228054e-01, -5.721008092661964e-01, -5.774235929185901e-01, -5.774235929185901e-01, -1.741610073921120e-01, -1.770794284257710e-01, -6.485448068024083e-01, -1.099333326495232e-01, -1.749619337256714e-01, -1.749619337256714e-01, -8.238614237876963e-03, -8.628375760566688e-03, -3.514914441199763e-02, -3.926598307179617e-03, -8.539561520210397e-03, -8.539561520210395e-03, -6.116702081777296e+00, -6.116899473093325e+00, -6.116774079265827e+00, -6.116924737012869e+00, -6.116734973835597e+00, -6.116734973835597e+00, -2.087824006643434e+00, -2.123257423066162e+00, -2.083647740026559e+00, -2.112018146436790e+00, -2.116946605182639e+00, -2.116946605182639e+00, -6.204582298652231e-01, -6.691670205644004e-01, -5.595426848450993e-01, -5.833121763980036e-01, -6.588709748732716e-01, -6.588709748732716e-01, -8.004588436901658e-02, -1.651597305945808e-01, -7.912777979768362e-02, -1.927157150210086e+00, -9.447736598703203e-02, -9.447736598703203e-02, -3.794215597630797e-03, -4.331055514469014e-03, -3.254207051248607e-03, -4.893122003198775e-02, -3.944391307361870e-03, -3.944391307361870e-03, -6.777384766600250e-01, -6.809457196561711e-01, -6.799248047037194e-01, -6.790342418249549e-01, -6.794866707896989e-01, -6.794866707896989e-01, -6.487713814784341e-01, -5.803854307749059e-01, -6.097713681039079e-01, -6.295836129254524e-01, -6.197069967335681e-01, -6.197069967335681e-01, -6.866706675675340e-01, -2.199995629361982e-01, -2.701072691165717e-01, -3.536539278136466e-01, -3.147961105459698e-01, -3.147961105459697e-01, -4.842969064677888e-01, -3.258453462706606e-02, -4.414371349825546e-02, -3.378501350425159e-01, -6.487744226116586e-02, -6.487744226116583e-02, -9.595842917491272e-03, -1.185358926135537e-03, -2.259889913296188e-03, -6.184674376602950e-02, -3.352080023639486e-03, -3.352080023639483e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_22_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_22", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.975240939340563e+01, -2.975249718556010e+01, -2.975280286954129e+01, -2.975135821228000e+01, -2.975245652450616e+01, -2.975245652450616e+01, -4.937725776441302e+00, -4.937861241793153e+00, -4.942107503596334e+00, -4.941191647784341e+00, -4.937784668735404e+00, -4.937784668735404e+00, -8.210811360914377e-01, -8.196833952403373e-01, -7.865226803766882e-01, -8.051473892832925e-01, -8.205895285470037e-01, -8.205895285470037e-01, -2.387383765203644e-01, -2.431802086099084e-01, -8.846686915818140e-01, -1.467654392959616e-01, -2.399927808979688e-01, -2.399927808979688e-01, -1.068211917530568e-02, -1.119436949392382e-02, -4.613112865153483e-02, -5.226222674089051e-03, -1.107486315247720e-02, -1.107486315247720e-02, -7.297115937628738e+00, -7.301025258664686e+00, -7.297470793622096e+00, -7.300512996619532e+00, -7.299176735634969e+00, -7.299176735634969e+00, -2.773663329264105e+00, -2.797859533969127e+00, -2.765409008821164e+00, -2.784735036861569e+00, -2.800898948830160e+00, -2.800898948830160e+00, -8.405266286025340e-01, -9.469656539982531e-01, -7.946438280471441e-01, -8.554586647468734e-01, -8.716122331206450e-01, -8.716122331206450e-01, -1.058141462997729e-01, -2.225306615882361e-01, -1.046338851981305e-01, -2.879275315482742e+00, -1.251756082335720e-01, -1.251756082335720e-01, -4.995501287436754e-03, -5.738837475923244e-03, -4.262439051480391e-03, -6.498161631221554e-02, -5.251077727965269e-03, -5.251077727965268e-03, -8.985286449215600e-01, -8.751793114143992e-01, -8.832189994128086e-01, -8.896902812018908e-01, -8.864283660203828e-01, -8.864283660203828e-01, -8.753572151977904e-01, -7.040696042086240e-01, -7.331549483461235e-01, -7.746423478089224e-01, -7.520416072399856e-01, -7.520416072399857e-01, -9.932500889734983e-01, -2.996533114947279e-01, -3.709021673263464e-01, -4.930690103456798e-01, -4.319728305457362e-01, -4.319728305457360e-01, -6.472616359759875e-01, -4.254143870498696e-02, -5.808829660310873e-02, -4.729640336585507e-01, -8.552679880836056e-02, -8.552679880836053e-02, -1.276079787015262e-02, -1.585827646473616e-03, -2.950817322391146e-03, -8.159092606260195e-02, -4.466311442426466e-03, -4.466311442426467e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_22_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_22", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.363199059091488e-08, -2.363190439217689e-08, -2.363146614636706e-08, -2.363290312470350e-08, -2.363194526654587e-08, -2.363194526654587e-08, -1.666785409741274e-05, -1.667157040413510e-05, -1.678198823818068e-05, -1.674713978220731e-05, -1.666848355613993e-05, -1.666848355613993e-05, -4.344324866459089e-03, -4.325994107052225e-03, -3.881298945368569e-03, -4.234744702983733e-03, -4.338384225681935e-03, -4.338384225681935e-03, -7.409647921313360e-01, -7.528757219006345e-01, -9.366313708517081e-04, -2.683097883726814e-01, -7.432696497741472e-01, -7.432696497741472e-01, -3.715850743474003e+01, -3.329929118883829e+01, -1.174532860724648e+00, -8.647140440029949e+00, -3.513734276970506e+01, -3.513734276970502e+01, -7.184822983077161e-06, -7.186122834883484e-06, -7.185067180259780e-06, -7.186070029087206e-06, -7.185350001711039e-06, -7.185350001711039e-06, -1.537726925051965e-04, -1.569959512533290e-04, -1.531657955750032e-04, -1.559029221739627e-04, -1.566925964046922e-04, -1.566925964046922e-04, -3.157041517349464e-02, -2.790278733875699e-02, -3.182756631206468e-02, -3.341636995924514e-02, -3.030386235226925e-02, -3.030386235226925e-02, -3.617226651364573e-01, -3.009413470211788e-01, -4.182037409274873e-01, -2.724735146705885e-04, -5.105160389729820e-01, -5.105160389729820e-01, -6.630200919460952e+01, -2.537438425613473e+01, -2.155556528949045e+02, -3.600069848733112e-01, -9.521539640716300e+00, -9.521539640716131e+00, -4.302747539865230e-02, -4.333655877629329e-02, -4.325057602432214e-02, -4.316576738894001e-02, -4.320992208909296e-02, -4.320992208909296e-02, -4.802642624349229e-02, -5.888960730359021e-02, -5.843142929658855e-02, -5.577697283264632e-02, -5.729610438624688e-02, -5.729610438624686e-02, -2.141671594326714e-02, -2.462280392245200e-01, -2.038627724579200e-01, -1.413469674705320e-01, -1.871248788791885e-01, -1.871248788791886e-01, -6.684477542685772e-02, -1.475006773850380e+00, -7.199318421575679e-01, -2.174400729456223e-01, -6.859870054090939e-01, -6.859870054090937e-01, -2.497649598931950e+00, 2.370429358292373e+02, -3.758256282165127e+02, -8.070483092045523e-01, -7.513063327520629e+00, -7.513063327520549e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_22_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_22", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_22_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_22", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [3.346940867829122e-03, 3.346922409934934e-03, 3.346879730668940e-03, 3.347183507787566e-03, 3.346930772197326e-03, 3.346930772197326e-03, 1.082929852600798e-02, 1.083188664918404e-02, 1.091160185840895e-02, 1.091250079394984e-02, 1.082975631620348e-02, 1.082975631620348e-02, 1.669568496050385e-02, 1.661183401987692e-02, 1.481121597491735e-02, 1.735935550018055e-02, 1.666889886091840e-02, 1.666889886091840e-02, 1.073582785032637e-01, 1.119823055750864e-01, 2.976792571702131e-03, 1.074961127453364e-02, 1.084267476316021e-01, 1.084267476316021e-01, 6.215602638478941e-04, 6.378837485037018e-04, 1.583459273117739e-03, 1.133602422102858e-05, 6.544146011488545e-04, 6.544146011488670e-04, 1.318305712298549e-02, 1.316234460327674e-02, 1.318109244142091e-02, 1.316497917479168e-02, 1.317224028871973e-02, 1.317224028871973e-02, 2.537568130058796e-02, 2.647974177602965e-02, 2.536439246003210e-02, 2.627537298213160e-02, 2.611565851281193e-02, 2.611565851281193e-02, 9.705450071702412e-02, 8.546296738132869e-02, 8.313944510785390e-02, 8.264446814634420e-02, 1.005161393171691e-01, 1.005161393171691e-01, 6.228771408156905e-03, 4.482666064911507e-02, 6.967843673546329e-03, 2.389410966863153e-02, 1.498655577378076e-02, 1.498655577378076e-02, 9.211379151501730e-05, 4.804456040430161e-05, 2.004836265546243e-04, 1.264278320666887e-03, 1.269309114187177e-05, 1.269309114187234e-05, 9.155188165940810e-02, 9.892926246905007e-02, 9.632262842997177e-02, 9.427563873748759e-02, 9.530222483212310e-02, 9.530222483212310e-02, 9.369627299393500e-02, 1.424318797201836e-01, 1.371773202992198e-01, 1.233508136008534e-01, 1.308700154615894e-01, 1.308700154615894e-01, 7.722752851621632e-02, 7.623264536417165e-02, 9.863287532631003e-02, 1.139396441217397e-01, 1.202532995158150e-01, 1.202532995158148e-01, 1.182276708639000e-01, 1.612236983385646e-03, 1.958967583221411e-03, 1.352979398674433e-01, 6.387842418280602e-03, 6.387842418280575e-03, 5.141320086859515e-05, -7.312241726520245e-06, 1.203731548185637e-04, 6.460849504815320e-03, 6.158567150424893e-06, 6.158567150426111e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
