
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_22_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_22", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.178426260339302e+01, -2.178437691593402e+01, -2.178492014675576e+01, -2.178305389528571e+01, -2.178432252872355e+01, -2.178432252872355e+01, -3.038906145230489e+00, -3.039022290580906e+00, -3.042632808724898e+00, -3.041475809115332e+00, -3.038952839884229e+00, -3.946805546363169e+00, -5.331745115571265e-01, -6.715055723619614e-01, -6.382151304207397e-01, -6.499859857884086e-01, -6.723574335116387e-01, -6.723574335116387e-01, -1.791343644333420e-01, -1.829092165594229e-01, -6.312753209774756e-01, -1.137845395402188e-01, -1.802401235348340e-01, -1.802401235348340e-01, -8.245182999309326e-03, -8.637014638642599e-03, -3.535454348365639e-02, -3.953075189479459e-03, -8.547018172852442e-03, -8.547018172852444e-03, -6.121089302533018e+00, -6.121238983590019e+00, -6.121100708030745e+00, -5.492887828308984e+00, -6.121172705361855e+00, -6.121172705361855e+00, -1.654518311597783e+00, -1.675643178497279e+00, -1.645765702504947e+00, -1.662210413626725e+00, -1.680485899809225e+00, -2.193014459767378e+00, -6.815342294456888e-01, -7.460271786815298e-01, -6.366394740721577e-01, -6.781507887097654e-01, -7.121402939541925e-01, -5.821358003032951e-01, -7.879653841587514e-02, -1.676388797808594e-01, -7.771560427966349e-02, -2.266773687657775e+00, -9.602233961967371e-02, -9.602233961967371e-02, -3.897403280936226e-03, -4.358338329278908e-03, -3.266645617751705e-03, -4.957349236010109e-02, -4.058342862772017e-03, -3.971080987948083e-03, -6.877844451723213e-01, -6.906000687763217e-01, -6.585549339787636e-01, -6.889447161314622e-01, -6.893486056807997e-01, -6.893486056807997e-01, -6.681038312074132e-01, -5.884214835507620e-01, -6.217208714672218e-01, -6.450171505698353e-01, -6.341210599613691e-01, -5.386071669689999e-01, -7.829420793195798e-01, -1.828331620150946e-01, -2.796976511015056e-01, -2.979080701974013e-01, -3.329692820363424e-01, -3.329692820363423e-01, -4.002479709123970e-01, -3.269981502266799e-02, -4.448254147716180e-02, -3.775103669091203e-01, -6.410551741293172e-02, -6.563706978663127e-02, -9.662321145173880e-03, -1.193093238505691e-03, -2.266537838531122e-03, -6.261358760913383e-02, -3.374834565331429e-03, -3.374834565331425e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_22_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_22", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.284152518796317e+01, -3.284161210616624e+01, -3.284205789229090e+01, -3.284063407717690e+01, -3.284157053116467e+01, -3.284157053116467e+01, -4.845219354262508e+00, -4.845468374347313e+00, -4.853113686139173e+00, -4.850544950267047e+00, -4.845311531905091e+00, -4.930921943702645e+00, -7.609983529799014e-01, -9.089821925462581e-01, -8.658069323249740e-01, -8.813043551260370e-01, -9.100415923667058e-01, -9.100415923667058e-01, -2.430234849540637e-01, -2.480883315319181e-01, -8.501518170984347e-01, -1.496326773158843e-01, -2.445159248909892e-01, -2.445159248909892e-01, -1.066535175134980e-02, -1.117228999047331e-02, -4.578161095233480e-02, -5.113011593272595e-03, -1.105587796073110e-02, -1.105587796073111e-02, -7.291570825928938e+00, -7.295533616934227e+00, -7.292001452987112e+00, -8.000283052732463e+00, -7.293564344135680e+00, -7.293564344135680e+00, -2.588340385532848e+00, -2.633272339613192e+00, -2.569157250715788e+00, -2.604677178376674e+00, -2.643776179529770e+00, -2.807616660757916e+00, -8.041527326033605e-01, -8.696599921948339e-01, -7.733398198125210e-01, -7.914321697675708e-01, -8.296068256698157e-01, -9.143747482664146e-01, -1.028958223586030e-01, -2.248158845886894e-01, -1.014065034443296e-01, -2.638515834846363e+00, -1.259836737074936e-01, -1.259836737074936e-01, -5.196057742254458e-03, -5.637214093730072e-03, -4.225191656685300e-03, -6.544995794041587e-02, -5.410576548531180e-03, -5.136316526745107e-03, -8.852392609065585e-01, -8.624708018943743e-01, -9.100522268111844e-01, -8.765837266355433e-01, -8.733934780110836e-01, -8.733934780110836e-01, -8.501952460577875e-01, -6.991348307025141e-01, -7.218797582939918e-01, -7.566596793747455e-01, -7.367264050358413e-01, -8.218853548750178e-01, -9.084937255214787e-01, -2.498226087765825e-01, -3.777788964643195e-01, -4.674103759485838e-01, -4.396247211583802e-01, -4.396247211583807e-01, -6.400696347559748e-01, -4.233402390664907e-02, -5.763885174514763e-02, -4.692205118399328e-01, -8.388641276607453e-02, -8.540448427942124e-02, -1.249829618440496e-02, -1.543161936990329e-03, -2.931583934499609e-03, -8.146843816003614e-02, -4.365103956196231e-03, -4.365103956196225e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_22_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_22", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.036858514706004e-08, -2.036857027294787e-08, -2.036834131821464e-08, -2.036860682337692e-08, -2.036857842038348e-08, -2.036857842038348e-08, -1.469242477716004e-05, -1.469574262782273e-05, -1.479353252730261e-05, -1.475092934361782e-05, -1.469306619812189e-05, -1.985493750545590e-05, -3.738991540523012e-03, -5.640981422538400e-03, -5.017786011287206e-03, -5.378208115780563e-03, -5.657699220877418e-03, -5.657699220877418e-03, -7.824534476299448e-01, -7.996674707554734e-01, -8.431238884011454e-04, -3.758459161134018e-01, -7.867698098182527e-01, -7.867698098182527e-01, -3.942807455983363e+01, -3.590130999687434e+01, -1.679103245124676e+00, -9.928603956117061e+01, -3.749561381365551e+01, -3.749561381365548e+01, -7.190528844833518e-06, -7.191766556968836e-06, -7.190694272144827e-06, -6.402245788167970e-06, -7.191121455858761e-06, -7.191121455858761e-06, -1.158371101910458e-04, -1.181314302106074e-04, -1.146661343223051e-04, -1.165926791280747e-04, -1.188952405754258e-04, -1.638575958363442e-04, -3.510037920811340e-02, -3.139726826853052e-02, -3.692677734549402e-02, -3.942199856913764e-02, -3.305424143228052e-02, -2.659883068422466e-02, 1.596155198615891e-01, -3.163302829735055e-01, 1.582778728690218e-01, -3.251603275588072e-04, -5.980230417958248e-01, -5.980230417958248e-01, 2.953355322137917e+02, -9.191143146596444e+01, -3.245842462974502e+02, 9.326657656096654e-01, 2.750185850298478e+02, -1.228324744246476e+02, -4.372050188692943e-02, -4.400747846520782e-02, -4.179087830682077e-02, -4.385154335864185e-02, -4.389304526153756e-02, -4.389304526153756e-02, -4.957858852365404e-02, -5.983776491721728e-02, -5.972512164237741e-02, -5.729238171193300e-02, -5.878630960499766e-02, -4.934428608716612e-02, -2.469935950840913e-02, -1.538867978130416e-01, -2.157852325919754e-01, -1.152412602633767e-01, -2.021134193232544e-01, -2.021134193232545e-01, -5.402912713837230e-02, -1.809928088087969e+00, -1.076874137452308e+00, -2.480999297395531e-01, 4.026388592359492e-01, -8.876908100643147e-01, -1.786253970623124e+01, -1.282598183699999e+03, -4.992449039381531e+02, -1.066638778533632e+00, -2.014781467441555e+02, -2.014781467441558e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_22_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_22", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.225541526950057e-03, 2.225552353706766e-03, 2.225595167241318e-03, 2.225419625699577e-03, 2.225547261036050e-03, 2.225547261036050e-03, 5.972597474794261e-03, 5.974658791821266e-03, 6.036543867655295e-03, 6.012078011719359e-03, 5.973141246405119e-03, 1.870557366870720e-02, 4.683127473980751e-03, 4.356501045709973e-02, 3.595523387352426e-02, 3.937911075084403e-02, 4.376944807202525e-02, 4.376944807202525e-02, 1.248923038782096e-01, 1.326578318058070e-01, 3.676392899851353e-04, 2.081418117700108e-02, 1.270590609291730e-01, 1.270590609291730e-01, 6.724328902104460e-04, 7.047339700107679e-04, 2.504522933986168e-03, 1.842286806832428e-04, 7.132774648271196e-04, 7.132774648271412e-04, 1.320780137202783e-02, 1.318676379524026e-02, 1.320548891634137e-02, 9.809067847617425e-03, 1.319724052697007e-02, 1.319724052697007e-02, 7.341614026624750e-03, 7.866992404908676e-03, 7.110724036545622e-03, 7.525707211722035e-03, 8.007051975812869e-03, 2.956858745793045e-02, 1.300562484022419e-01, 1.166339450454383e-01, 1.290873806276616e-01, 1.329038401221181e-01, 1.267238207462167e-01, 6.565438404412587e-02, -1.297477461463941e-03, 5.055336723112411e-02, -1.436956816341609e-03, 3.982380833048663e-02, 2.000991958670045e-02, 2.000991958670045e-02, -4.126545920941470e-07, 2.287330798268723e-04, 3.402288619258881e-04, -3.977201530742247e-04, -4.751979495998387e-07, 2.311738030993995e-04, 9.484397749451035e-02, 1.024537913124287e-01, 8.895867259614594e-02, 9.765987109092604e-02, 9.872118955468923e-02, 9.872118955468923e-02, 1.006653079701990e-01, 1.484292676586478e-01, 1.449465195836617e-01, 1.316953714991098e-01, 1.394894676332206e-01, 8.546400948662375e-02, 1.141438296354059e-01, 3.545044113266096e-03, 1.159900758014917e-01, 4.295954682627360e-02, 1.504903332595936e-01, 1.504903332595936e-01, 5.013431814704394e-02, 2.104451049401221e-03, 3.299330045711789e-03, 2.000042260397589e-01, -1.243484715186900e-03, 9.392112563165064e-03, 4.892577895961139e-04, 6.530706427387931e-05, 1.744416045765705e-04, 9.794992164775881e-03, 2.326590702882483e-04, 2.326590702882468e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
