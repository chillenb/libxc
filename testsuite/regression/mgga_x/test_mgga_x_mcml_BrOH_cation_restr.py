
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mcml_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mcml", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.190169557650660e+01, -2.190172414700986e+01, -2.190190281215808e+01, -2.190147557282637e+01, -2.190169211707366e+01, -2.190169211707366e+01, -3.379909696597045e+00, -3.379908211843952e+00, -3.380081062989323e+00, -3.381546078373466e+00, -3.380516705847783e+00, -3.380516705847783e+00, -6.625258535905693e-01, -6.622533325171945e-01, -6.568973511096560e-01, -6.631779467266823e-01, -6.611735770970252e-01, -6.611735770970252e-01, -2.090390731646007e-01, -2.089651654423141e-01, -7.598470119714171e-01, -1.421600696651263e-01, -1.649480106756602e-01, -1.649480106756602e-01, -3.418393830372552e-03, -3.600274295226208e-03, -2.275849024720628e-02, -1.965927093231291e-03, -2.473882494240056e-03, -2.473882494240054e-03, -5.259793734238812e+00, -5.259030213162871e+00, -5.259769623867712e+00, -5.259095515306813e+00, -5.259401150044195e+00, -5.259401150044195e+00, -2.173430894031627e+00, -2.188460513416454e+00, -2.173416610570427e+00, -2.183567250836504e+00, -2.182495283356213e+00, -2.182495283356213e+00, -6.016332928673332e-01, -6.384415319845643e-01, -5.329876021210656e-01, -5.375704865723924e-01, -6.125670283796296e-01, -6.125670283796296e-01, -8.594575755778305e-02, -2.007765901288858e-01, -7.730343555928870e-02, -1.836578370642575e+00, -1.130758251204450e-01, -1.130758251204451e-01, -1.515960897127721e-03, -1.921997355531280e-03, -1.470955041440262e-03, -4.472999074895809e-02, -1.771995121574028e-03, -1.771995121574030e-03, -5.713681402152501e-01, -5.770229057731540e-01, -5.751573131655818e-01, -5.735095321590792e-01, -5.743451601297639e-01, -5.743451601297639e-01, -5.559022463927472e-01, -5.285571539067805e-01, -5.403825166433252e-01, -5.489490337091374e-01, -5.450238836565250e-01, -5.450238836565249e-01, -6.615207843690667e-01, -2.688560354605142e-01, -3.024933818413886e-01, -3.549350371677334e-01, -3.297167139772230e-01, -3.297167139772230e-01, -4.829864439677745e-01, -2.146733718037287e-02, -3.205347727881082e-02, -3.410029624237230e-01, -6.532767142064200e-02, -6.532767142064203e-02, -4.845067748145206e-03, -5.129387762366427e-04, -1.077352290421656e-03, -6.014399168544282e-02, -1.639478890694744e-03, -1.639478890694743e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mcml_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mcml", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.686274449367969e+01, -2.686278462656574e+01, -2.686280379758650e+01, -2.686219680500301e+01, -2.686253767723505e+01, -2.686253767723505e+01, -4.188542199802919e+00, -4.188781744012911e+00, -4.195471932773738e+00, -4.194977783971385e+00, -4.193811562553343e+00, -4.193811562553343e+00, -7.905203522760272e-01, -7.893794395897539e-01, -7.647824854750717e-01, -7.717785592610359e-01, -7.703492387603819e-01, -7.703492387603819e-01, -6.854075998652873e-02, -7.145604062045331e-02, -9.050422523763504e-01, -2.051013480992626e-01, -2.075676691644965e-01, -2.075676691644965e-01, -4.390534527125176e-03, -4.815813681056849e-03, -3.773416029149007e-02, -2.630863008367708e-03, -3.319990908172412e-03, -3.319990908172398e-03, -6.444881350401002e+00, -6.446287500093054e+00, -6.444816965331181e+00, -6.446064678519732e+00, -6.445658159367545e+00, -6.445658159367545e+00, -2.261069848725895e+00, -2.463306575466952e+00, -2.376739024111262e+00, -2.563218408594170e+00, -2.325207344713724e+00, -2.325207344713724e+00, -7.447175644568694e-01, -8.619902030076956e-01, -6.786606671954030e-01, -7.521325285161955e-01, -7.626100885464877e-01, -7.626100885464877e-01, -1.529992893288048e-01, 2.385777690045173e-02, -1.410996147815171e-01, -2.651157776824959e+00, -1.562310609528954e-01, -1.562310609528953e-01, -2.026357134589729e-03, -2.572424042300273e-03, -1.972211173375615e-03, -8.416052607108110e-02, -2.375708912804296e-03, -2.375708912804300e-03, -7.467430070540657e-01, -7.378598080883614e-01, -7.406466034349213e-01, -7.432174053972948e-01, -7.419003856540233e-01, -7.419003856540233e-01, -7.249072525864674e-01, -6.513088757142033e-01, -6.670100653192680e-01, -6.841429819030309e-01, -6.751740849176019e-01, -6.751740849176017e-01, -9.222607402096294e-01, -1.055914971956930e-01, -1.732750517075100e-01, -3.985742413165709e-01, -2.761998841679315e-01, -2.761998841679317e-01, -5.024958401357461e-01, -3.324003407810473e-02, -5.711030939431232e-02, -4.015317643665117e-01, -1.170836910584751e-01, -1.170836910584751e-01, -6.592973355783555e-03, -6.843310006643353e-04, -1.439121931361440e-03, -9.482391769860297e-02, -2.197588693388111e-03, -2.197588693388107e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mcml_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mcml", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.729657027387249e-09, -3.729859754584854e-09, -3.732160002982646e-09, -3.729215132008765e-09, -3.730557675190777e-09, -3.730557675190777e-09, -8.175801516292255e-06, -8.183078187154379e-06, -8.390713745514237e-06, -8.417567328143898e-06, -8.369463254324182e-06, -8.369463254324182e-06, -4.494123118647908e-03, -4.493400228068736e-03, -4.424161964834032e-03, -4.476330672220662e-03, -4.468702776040850e-03, -4.468702776040850e-03, -4.045085039310617e+00, -4.072225690586213e+00, -2.187729903326609e-03, -2.647904761548718e-01, -5.434449354837582e-01, -5.434449354837573e-01, -8.010442511997734e+01, -8.750876662043700e+00, 4.085432663156515e+00, 7.027349469531235e+00, 8.856866149414770e+00, 8.856866149410322e+00, -2.253841417660632e-06, -2.260901963239174e-06, -2.255560442379391e-06, -2.261730393315870e-06, -2.256704257548151e-06, -2.256704257548151e-06, -1.280900070607711e-04, -5.670658417460847e-05, -7.665136806840855e-05, -1.526493019346448e-05, -1.103240445743382e-04, -1.103240445743382e-04, -3.294897739988677e-02, -1.545298825120296e-02, -2.613302028158450e-02, -2.244484082951226e-02, -2.894842840276990e-02, -2.894842840276990e-02, 7.993557016729232e-01, -4.049526490862023e+00, 1.247978509434347e+00, -1.993356982211182e-04, -1.770961244343462e+00, -1.770961244343473e+00, 9.266080752468451e+00, 8.280139018814550e+00, 5.198010217952895e+01, 3.570373068947724e+00, 2.421228031730940e+01, 2.421228031730870e+01, -1.071622265843448e-02, -9.613133352130009e-03, -9.994556934472990e-03, -1.031430738848137e-02, -1.014919441086178e-02, -1.014919441086178e-02, -2.786742736768439e-03, 1.948593506877670e-03, -1.043178494556137e-04, -2.035511125776073e-03, -6.910502945505903e-04, -6.910502945506465e-04, -1.417638751199788e-02, -1.323986884287631e+00, -7.947035128314797e-01, -1.715596695324764e-01, -4.415990965588092e-01, -4.415990965588091e-01, -9.631744585481508e-02, 6.486470562151401e-01, 3.498436074401840e+00, -2.523131351071852e-01, 1.380641367207670e+00, 1.380641367207665e+00, 6.275397465174736e+00, 4.058617475182120e+01, 1.957361007454265e+01, -2.647250054962215e+00, 3.057018065423910e+01, 3.057018065423695e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mcml_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mcml", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-5.080068484896086e-04, -5.079852109415534e-04, -5.076467081789347e-04, -5.079584202715277e-04, -5.078297924009593e-04, -5.078297924009593e-04, 1.449911656452497e-03, 1.454777116448064e-03, 1.594509422044142e-03, 1.617795546874663e-03, 1.581276570425605e-03, 1.581276570425605e-03, 3.164154503816846e-03, 3.157039922776992e-03, 3.146584292565293e-03, 3.728193934535161e-03, 3.540148703852095e-03, 3.540148703852095e-03, 3.065173886796133e-01, 3.233456969792030e-01, 3.953071091192006e-04, 2.182449668323553e-02, 2.799569893412714e-02, 2.799569893412709e-02, 3.056365442037668e-04, 6.878481901153642e-05, 3.363261295412247e-04, 5.569600339899907e-09, 1.218325125381857e-07, 1.218325125522513e-07, -1.584693751793096e-04, -1.567350192746208e-04, -1.551723550704345e-04, -1.537817639520529e-04, -1.592418858837642e-04, -1.592418858837642e-04, 9.030691825839099e-03, 8.137108426781889e-04, 2.975743784071607e-03, -4.083803978619310e-03, 7.151572062911903e-03, 7.151572062911903e-03, 7.996426705016604e-02, 4.000373034459379e-02, 4.134074033626343e-02, 4.066014929474300e-02, 7.073491996424829e-02, 7.073491996424829e-02, 8.012160978477890e-03, 3.348727996868635e-01, 5.217567010264649e-03, 1.641013400757044e-02, 5.269998072196493e-02, 5.269998072196509e-02, 2.530659487093943e-11, 4.492552573377176e-10, 1.688335338355141e-08, 1.287278607525734e-03, 2.256418256494266e-09, 2.256418254604486e-09, -3.232259147486166e-02, -2.871962580760723e-02, -2.990002044856290e-02, -3.095260755366486e-02, -3.043270567783577e-02, -3.043270567783577e-02, -6.078801909187913e-02, -3.211064634493433e-02, -3.530824426840756e-02, -4.167340771218110e-02, -3.898557415131024e-02, -3.898557415131011e-02, 5.197457704704086e-02, 2.005744583506305e-01, 2.016779492426990e-01, 7.758082794480391e-02, 1.559584496024253e-01, 1.559584496024252e-01, 1.103075803953529e-01, 2.127671068373899e-03, 5.939617580531246e-04, 1.089316420046074e-01, 1.031012407794163e-02, 1.031012407794158e-02, 2.448962421159642e-08, 4.222064783850949e-14, 8.694640415641051e-09, 3.032495302619050e-02, 6.002549792005574e-09, 6.002549788776763e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
