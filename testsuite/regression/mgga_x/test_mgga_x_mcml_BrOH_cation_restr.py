
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mcml_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mcml", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.071135011738279e+01, -2.071146360166550e+01, -2.071196350848424e+01, -2.071027882041896e+01, -2.071116220811016e+01, -2.071116220811016e+01, -3.212090549066425e+00, -3.212120216724929e+00, -3.212954769874433e+00, -3.212909474776018e+00, -3.212580558901122e+00, -3.806793657058708e+00, -6.070063131528619e-01, -7.864448667590662e-01, -7.793142606712077e-01, -7.792619965512491e-01, -7.793709350115945e-01, -7.793709350115945e-01, -2.144764135689814e-01, -2.163356477828275e-01, -7.032573450017608e-01, -1.701459253299437e-01, -1.911743871996462e-01, -1.911743871996462e-01, -5.630393237924280e-03, -5.926881173677396e-03, -3.411340397185938e-02, -3.249892051986020e-03, -4.084501090865004e-03, -4.084501090865004e-03, -5.261167861273520e+00, -5.260392256649589e+00, -5.261115768734235e+00, -5.158143315923725e+00, -5.260783250546209e+00, -5.260783250546209e+00, -1.796237922997165e+00, -1.811659613694946e+00, -1.784870928427363e+00, -1.798513724892553e+00, -1.810294027209190e+00, -2.184530955883114e+00, -6.224507226171910e-01, -6.531943989491694e-01, -5.888776935295347e-01, -5.981872103397686e-01, -6.286276725247569e-01, -5.547130720611558e-01, -8.180652219976893e-02, -2.242524311861481e-01, -7.567912127761441e-02, -2.016640742207387e+00, -1.364294542158193e-01, -1.364294542158193e-01, -2.407243685744126e-03, -3.176989035945355e-03, -2.429587668170305e-03, -5.089699185270886e-02, -2.809568483831756e-03, -2.926804376374257e-03, -5.744639690868045e-01, -5.796750407407759e-01, -5.745379366276068e-01, -5.764401827888810e-01, -5.772114165678464e-01, -5.772114165678464e-01, -5.600956330866643e-01, -5.292239550541969e-01, -5.416087150297242e-01, -5.511513766701160e-01, -5.466875519660422e-01, -5.015876807875378e-01, -6.915467563667447e-01, -1.971018711076737e-01, -3.137709386027380e-01, -3.188627586102440e-01, -3.457427125327001e-01, -3.457427125327001e-01, -4.192095128277755e-01, -3.250699913717916e-02, -4.615426778628715e-02, -3.650845087336996e-01, -6.481194471512400e-02, -8.484699345018019e-02, -7.948808790580523e-03, -8.490852172762754e-04, -1.782433657966505e-03, -7.877947882825657e-02, -2.708226935264593e-03, -2.708226935264590e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mcml_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mcml", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.061126227818333e+01, -3.061125126712879e+01, -3.061126729399761e+01, -3.061142268765892e+01, -3.061133253024097e+01, -3.061133253024097e+01, -4.427498707910257e+00, -4.427464824251824e+00, -4.426600544311996e+00, -4.427362252935565e+00, -4.426821295423495e+00, -4.356426058991859e+00, -8.276996985540985e-01, -8.055819907638007e-01, -7.852599332866924e-01, -7.901191967007528e-01, -7.889210790785403e-01, -7.889210790785403e-01, -2.188532877272162e-01, -2.190185486776069e-01, -9.456902189408286e-01, -2.447772213958137e-01, -2.348038917167597e-01, -2.348038917167605e-01, -7.519804313860009e-03, -7.917843810494528e-03, -5.070389383543177e-02, -4.335021321330461e-03, -5.450494190660343e-03, -5.450494190660343e-03, -6.438083577862154e+00, -6.439602813989717e+00, -6.438161508446707e+00, -7.095114628531680e+00, -6.438847660313847e+00, -6.438847660313847e+00, -2.490490111934402e+00, -2.511624414302603e+00, -2.474211380202676e+00, -2.493671530160817e+00, -2.509775380943609e+00, -2.455277949699920e+00, -7.322525491331385e-01, -7.877870963674880e-01, -6.807824597995982e-01, -7.041068206139472e-01, -7.424083639791169e-01, -7.722175259284850e-01, -1.091079049541991e-01, -2.711778617936063e-01, -1.009282646405013e-01, -2.387236722621949e+00, -2.096239590084518e-01, -2.096239590084528e-01, -3.209658248469893e-03, -4.237585641591391e-03, -3.241551885196775e-03, -6.786659457198650e-02, -3.746091318739363e-03, -3.904663558729420e-03, -7.416045539286912e-01, -7.302825650496074e-01, -7.375993606866688e-01, -7.371412779395200e-01, -7.354630800153008e-01, -7.354630800153008e-01, -7.203391954646063e-01, -6.168419396877703e-01, -6.411837106808431e-01, -6.656620118242520e-01, -6.526387052434766e-01, -7.567105906437208e-01, -8.271906273025091e-01, -2.651999534777603e-01, -3.166118890398878e-01, -4.420579053878249e-01, -3.685867185256264e-01, -3.685867185256265e-01, -5.758861944493066e-01, -4.785684080814957e-02, -7.314056893415415e-02, -4.201536776695457e-01, -8.643392620575510e-02, -1.424751303244496e-01, -1.062442348552312e-02, -1.132145219331982e-03, -2.377096898240031e-03, -1.329780929550464e-01, -3.613108223191862e-03, -3.613108135064216e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mcml_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mcml", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.325547784297400e-08, -1.325494774301042e-08, -1.325269901971365e-08, -1.326055705297642e-08, -1.325642527643662e-08, -1.325642527643662e-08, -8.593802237584017e-06, -8.592680858074842e-06, -8.562029669804449e-06, -8.571423563103068e-06, -8.573986944142935e-06, -5.086892349773092e-06, -6.694187219752036e-03, -3.024253870571485e-03, -3.112975368887167e-03, -3.137682465456823e-03, -3.132633344557177e-03, -3.132633344557177e-03, -4.650699290417676e-01, -4.709420798365054e-01, -3.676552638888621e-03, 1.931304296251143e-01, -1.826731274417463e-01, -1.826731274417279e-01, 1.848294062789141e+00, 1.967457682312232e+00, 2.796038108697898e+00, 1.192948268289574e+00, 1.740270462992729e+00, 1.740270462992729e+00, -2.318218871118561e-06, -2.324518729708882e-06, -2.318594493296204e-06, -2.442982625670616e-06, -2.321367389778381e-06, -2.321367389778381e-06, -9.058373389459289e-05, -8.747803132438696e-05, -9.286036743617051e-05, -9.012685559073747e-05, -8.775011984546591e-05, -4.660321903484427e-05, -8.244527749215403e-03, -8.858256784308018e-03, -9.097732719593903e-03, -9.726770632707261e-03, -8.291794736911516e-03, -1.180073006905588e-02, -2.016416233174883e+01, -1.170839071588338e-01, -2.753427270889771e+01, -8.054055179544270e-05, 6.348153610433918e-01, 6.348153610434539e-01, -2.690624756738639e+07, 1.048888995212901e+00, 8.761799428532148e+00, -1.346239447618239e+02, -1.450022920411995e+07, 3.334713130970262e+00, -1.973954412754976e-02, -1.779815233961629e-02, 4.091470968555624e-03, -1.901768523414214e-02, -1.873203189627913e-02, -1.873203189627913e-02, -2.164856703278544e-02, -1.452831674358641e-02, -1.549345954742456e-02, -1.767071006802066e-02, -1.643399163556518e-02, -3.813591992124762e-02, -6.548716680288801e-03, -5.958813774469652e-01, -1.188004694052233e-01, -9.119619821891042e-02, -7.817500893833251e-02, -7.817500893833217e-02, -2.905248108231322e-02, 2.777128440724799e+00, 2.656811451877580e+00, -6.076326369736085e-02, -5.118809141181855e+01, 2.219686406116398e+00, 9.375586345763143e-01, 1.158430872271327e+00, 3.605765483634639e+00, 2.655652078654406e+00, 4.761251528433235e+00, 4.760728423852285e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mcml_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mcml", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.756724906536600e-03, 1.756674385777573e-03, 1.756466526766263e-03, 1.757214346131360e-03, 1.756820439689482e-03, 1.756820439689482e-03, 1.087973988586691e-03, 1.087701988976712e-03, 1.080112434680845e-03, 1.083174809976986e-03, 1.082965067940819e-03, 3.851865306870950e-17, 1.752139439134929e-03, 1.739784853949304e-16, 6.608923637025352e-17, -3.760056903502295e-18, 8.731615400753707e-17, 8.731615400753707e-17, -1.447835211167835e-16, 1.703719785454312e-16, 3.251408180537591e-04, 2.343077202001776e-15, 9.693914003695061e-16, 5.620416254462046e-17, 1.974736371692489e-11, -2.610324918275758e-12, 8.280456195148274e-14, 1.393074707778627e-10, -2.418956522019366e-11, -2.418956522019366e-11, 4.385867112042126e-18, -5.032153800267248e-19, 2.517369497028996e-19, 3.157213127095853e-03, 4.013840622271037e-18, 4.013840622271037e-18, 1.840410952975578e-03, 1.902076851127778e-03, 1.779165285168082e-03, 1.847925350915982e-03, 1.899616454274985e-03, -2.102878119635351e-18, -5.636807716516374e-17, -4.825585956699987e-17, 1.224034063001440e-16, -9.054999389469067e-17, -6.420549878774879e-17, 1.518997284544647e-02, 1.776548879708202e-05, 4.793964347012221e-16, 1.263196910813623e-05, 5.669160970667421e-18, 2.093431742423176e-15, 8.939218306881597e-16, 4.710692969899691e-13, -7.303804856135507e-11, 6.477860854571407e-11, 2.450777190333687e-06, 8.053128490716286e-12, 2.582951310268823e-10, 5.132610757143433e-18, -2.161765537550113e-17, -7.352536950067395e-02, 4.692320996362402e-20, -5.147482959318834e-18, -5.147482959318834e-18, 1.166200978177650e-17, 1.307990831927848e-17, -2.357018137688251e-17, 3.419761239909067e-17, -3.094574308992470e-17, 7.036157927806877e-02, -3.262228224639063e-19, 1.282357988252311e-03, -3.730678613077322e-16, 1.011527099691778e-02, 5.947783970915309e-17, -1.083298322764860e-16, 7.848757574842415e-03, 2.172955005686297e-13, -1.131507769463723e-13, -9.070698813039270e-17, 1.308122922276845e-05, 1.804051167102305e-14, -2.187177217505424e-11, 7.864095584284823e-10, -1.977914161795400e-11, 1.144547233321742e-14, -5.120417080345862e-11, 1.515775840277975e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
