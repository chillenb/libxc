
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_gdme_0_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-8.907593904858507e+00, -8.907686424967107e+00, -8.908226321789863e+00, -8.906851672439053e+00, -8.907553904281098e+00, -8.907553904281098e+00, -3.777122215372845e+00, -3.777127703365647e+00, -3.777207314333402e+00, -3.777163810739131e+00, -3.777136675713786e+00, -3.777136675713786e+00, -9.029935798759817e-01, -9.041432681113286e-01, -9.382411790872898e-01, -9.237421276799290e-01, -9.264350311360587e-01, -9.264350311360587e-01, -3.897732035284213e-01, -3.786077419922860e-01, -1.086428109684443e+00, -5.441492490448809e-01, -4.469516446821130e-01, -4.469516446821130e-01, -1.149421354998854e+01, -1.074972167377689e+01, -2.104276003803361e+00, -2.104286385791253e+01, -1.497334232880901e+01, -1.497334232880901e+01, -5.482895766051971e+01, -2.261125658005146e+01, 3.035438842085391e+02, -1.087045802687044e+02, 5.084753575896212e+00, -1.101669962376405e+01, 4.068232642224730e+02, -6.547108205357317e+00, -3.213662619758508e+00, -3.208726067498054e+00, -3.245966406737200e+00, -1.611874302228475e+00, -1.440703742833981e+01, -4.850562842477286e+00, -1.266769382056768e+01, -8.706594964598604e-01, -9.755041088607856e-01, -1.287487369847157e+00, 7.731661839487709e+00, -6.604866040838726e+00, 5.130409385916434e+01, -3.167273768041159e+00, -1.753867478138392e-01, 3.190429126317557e-01, -3.900562551531383e+02, -3.550200459640569e+05, 1.662287656916062e+05, 1.247583578709885e+01, -7.576683531427990e+01, 4.709790562589785e+03, -8.544548504721098e+04, 3.467199345965298e+04, 5.997165248367710e+05, -7.674312175053713e+02, 1.106471416562825e+04, -1.084604276577021e+06, 3.283204797204132e+05, -6.750290047131140e-01, -8.728836006454099e+00, 8.546795994399854e-01, -1.199049368249901e+00, -2.102692624162875e+01, -1.707891123057797e+01, 6.278192964336890e+01, 9.572559006000884e+01, 8.672101383367618e+00, -1.549929951880018e+00, -9.093632389544200e-01, -6.939685830655125e-01, 1.510006603125744e+01, -2.353107931055146e+00, -4.832798148114968e-01, 2.753159837246704e+01, -8.469648486502560e-02, 6.661481941271913e+02, 5.817288240449392e+02, 3.169247966592135e+03, 2.319566096467657e+00, 8.286632942712324e+02, 1.531630129732165e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_gdme_0_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-5.576343506584931e+01, -5.576338106821159e+01, -5.576358911830685e+01, -5.576349293096290e+01, -5.576408086844219e+01, -5.576419876680339e+01, -5.576234024155222e+01, -5.576197976507934e+01, -5.576352458357151e+01, -5.576286784839848e+01, -5.576352458357151e+01, -5.576286784839848e+01, -8.303194430770127e+00, -8.303074597618142e+00, -8.303222829441168e+00, -8.303083818052549e+00, -8.303732179222395e+00, -8.303944092204144e+00, -8.304362673652042e+00, -8.304500644694841e+00, -8.301599398005870e+00, -8.305169827808488e+00, -8.301599398005870e+00, -8.305169827808488e+00, -1.538844590612518e+00, -1.547850280737906e+00, -1.535452466567763e+00, -1.546397332259076e+00, -1.488017518106796e+00, -1.473205788769097e+00, -1.497771156683612e+00, -1.502950117586124e+00, -1.563761140040360e+00, -1.422730282309698e+00, -1.563761140040360e+00, -1.422730282309698e+00, -3.326400502898499e-01, -3.591547879179019e-01, -3.419606501418826e-01, -3.715139381002798e-01, -1.737049659840988e+00, -1.837273942652309e+00, -1.736974816830273e-01, -1.864371750899366e-01, -3.589595231062278e-01, 1.908901264656658e-02, -3.589595231062276e-01, 1.908901264656588e-02, 3.925959931853892e+00, 3.722148598914804e+00, 3.691931812449599e+00, 3.463109236197042e+00, 6.342931573680479e-01, 5.801504408653280e-01, 6.897584271401414e+00, 7.117378805369049e+00, 4.651585429255083e+00, 6.747663861976368e+00, 4.651585429255078e+00, 6.747663861976372e+00, 5.983593890203167e+00, 1.934362955063533e+00, -6.751372246867636e+00, -6.812962649960007e+00, -1.094031222347265e+02, -1.215974191617042e+02, 2.107120182412826e+01, 2.276099887825677e+01, -1.602697018813605e+01, -1.599873566196025e+01, -1.045961977790988e+01, -1.083193051333330e+01, -1.513518749229611e+02, -1.306247278251394e+02, -3.237894119904140e+00, -3.238098873541633e+00, -4.277431294670516e+00, -4.285793521148713e+00, -4.322651836776426e+00, -4.312903484557642e+00, -4.344589271147219e+00, -4.324779977106869e+00, -4.912061162828339e+00, -4.846400968107075e+00, 2.596020568337418e+00, 3.786738161965354e+00, -1.470626992687270e-01, -1.245297116673501e-01, 3.352962191506831e+00, 2.168666504024090e+00, -1.239576018832218e+00, -1.283104496449931e+00, -1.349254339613399e+00, -1.277895419395005e+00, -1.243241458280831e+00, -1.176254012430771e+00, -2.846828607953013e+00, -2.810190254817694e+00, 1.740281009867831e+00, 1.709268812506184e+00, -1.782749171860538e+01, -1.691203608893663e+01, -4.223622044843460e+00, -4.221718572727882e+00, -2.317448413088400e-01, -2.406870275828029e-01, -4.012433122778769e-01, -4.015528805791622e-01, 1.363019188873177e+02, 1.244068329825176e+02, 1.223255381437430e+05, 1.145300946590464e+05, -8.035545167354823e+04, -3.440728405415751e+04, -3.946050637913886e+00, -4.676836502206085e+00, 4.602380309240533e+01, 1.722481426655486e+01, -3.027640722368310e+03, -1.007140499592731e+03, 2.834109140219923e+04, 2.861772201547549e+04, -1.155557022584109e+04, -1.156227662767493e+04, -1.995637843322071e+05, -2.002464732892238e+05, 2.687266545287259e+02, 2.398258110986769e+02, -3.402819666225307e+03, -3.973569860113250e+03, 3.613606085737158e+05, 3.617036807981320e+05, -1.079717587287144e+05, -1.108972334592218e+05, -1.124846083191359e+00, -1.132962528047988e+00, 1.465739340328528e+00, 1.517555624368764e+00, -1.707255484105370e+00, -1.824151586707176e+00, -1.046625475252157e+00, -1.051530223688621e+00, 5.602806511198950e+00, 5.518066390937902e+00, 3.931356235260201e+00, 3.780118316297406e+00, -2.141501337248203e+01, -2.164286460295466e+01, -3.262580136732734e+01, -3.263853618159585e+01, -3.748401070373190e+00, -3.943226613898522e+00, -3.190717547518813e-01, -3.102234659755257e-01, -5.322985752871704e-01, -5.240414335841407e-01, -1.012798702125504e+00, -1.017526995444377e+00, -5.581868877296125e+00, -4.678371110107311e+00, 5.374419367983668e-01, 7.685156235292364e-01, -7.508304124252962e-01, -7.697768090054204e-01, -1.051577841739988e+01, -8.408501035982988e+00, -1.299980561406536e-01, -2.057148850583554e-01, -2.948954961502499e+02, -1.566291580695763e+02, -1.339437044358622e+02, -2.534712022705426e+02, -1.150794170598152e+03, -9.779815330800623e+02, -8.196534272215404e-01, -1.093617132564040e+00, -4.306716623016199e+02, -2.104195595026694e+02, -7.438984118006834e+02, -4.111196484051688e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gdme_0_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gdme_0_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [-1.863561534678158e-03, -1.863563934408035e-03, -1.863555514045073e-03, -1.863559560604078e-03, -1.863535064941127e-03, -1.863530591224920e-03, -1.863603088809448e-03, -1.863617284425162e-03, -1.863558003841728e-03, -1.863581755541083e-03, -1.863558003841728e-03, -1.863581755541083e-03, -1.144626053536889e-02, -1.144641671103895e-02, -1.144622474985855e-02, -1.144640308571984e-02, -1.144558028369073e-02, -1.144534465500008e-02, -1.144484981188953e-02, -1.144468919255314e-02, -1.144817485376734e-02, -1.144389291533171e-02, -1.144817485376734e-02, -1.144389291533171e-02, -5.946203194288791e-02, -5.922726491369630e-02, -5.955471710646881e-02, -5.926605532052760e-02, -6.082114584805594e-02, -6.124304428013815e-02, -6.059385141503564e-02, -6.046286737457679e-02, -5.877648645031821e-02, -6.275192503128034e-02, -5.877648645031821e-02, -6.275192503128034e-02, -2.343833461356505e-01, -2.256075132898956e-01, -2.315303886430178e-01, -2.216947751108119e-01, -5.176290181205376e-02, -5.007938636743393e-02, -3.048350396504294e-01, -3.006854339444391e-01, -2.244668094813665e-01, -4.184052282473303e-01, -2.244668094813665e-01, -4.184052282473303e-01, -6.815129933419350e+00, -6.413526393849605e+00, -6.503728479013246e+00, -6.071145976180384e+00, -1.169643358113395e+00, -1.107601459890423e+00, -1.133723798775278e+01, -1.152935085012551e+01, -7.639461429719347e+00, -1.342463292605267e+01, -7.639461429719347e+00, -1.342463292605266e+01, -7.644181604671043e-03, -7.646013119004124e-03, -7.642754346839159e-03, -7.644633834176404e-03, -7.644094675623536e-03, -7.645960258175537e-03, -7.642870086227126e-03, -7.644707306726056e-03, -7.643456378521491e-03, -7.645321287418201e-03, -7.643456378521491e-03, -7.645321287418201e-03, -2.033866839251776e-02, -2.033969618492479e-02, -2.018996719191485e-02, -2.019546320581443e-02, -2.046515690424260e-02, -2.042982166441974e-02, -2.033485380009994e-02, -2.029828001367792e-02, -2.016228147022375e-02, -2.025096779621357e-02, -2.016228147022375e-02, -2.025096779621357e-02, -6.775261231728824e-02, -6.793246339953880e-02, -6.246381539986023e-02, -6.243547094089961e-02, -7.469113795078139e-02, -7.204258380455822e-02, -7.172320419717537e-02, -6.941672248845958e-02, -6.514470536356366e-02, -6.856152480356177e-02, -6.514470536356366e-02, -6.856152480356176e-02, -4.381231687474708e-01, -4.339846352619525e-01, -2.300536406174812e-01, -2.289112436148464e-01, -4.843176052498762e-01, -4.596218946561605e-01, -2.073104109869307e-02, -2.074035906430228e-02, -3.828974407360917e-01, -3.614504489342272e-01, -3.828974407360917e-01, -3.614504489342272e-01, -1.511249802371862e+01, -1.454184295961840e+01, -1.178291282634326e+01, -1.160723684179580e+01, -1.575733546791981e+01, -1.487895204866417e+01, -7.029297315142407e-01, -6.986340422618735e-01, -1.542797995264126e+01, -1.123407251208617e+01, -1.542797995264126e+01, -1.123407251208617e+01, -6.764523036488752e-02, -6.738474331343464e-02, -6.803682640392678e-02, -6.777220148707480e-02, -6.789893501482745e-02, -6.763493909829922e-02, -6.778460395329529e-02, -6.752345368849359e-02, -6.784177006984261e-02, -6.757922440108688e-02, -6.784177006984261e-02, -6.757922440108688e-02, -6.951045120493732e-02, -6.928142747602513e-02, -8.101577616385389e-02, -8.066630425698845e-02, -7.737125603117326e-02, -7.702940153971612e-02, -7.402876532351374e-02, -7.376936960744959e-02, -7.568901095728141e-02, -7.540888897890122e-02, -7.568901095728141e-02, -7.540888897890122e-02, -5.961697425547865e-02, -5.951998525956288e-02, -1.821583982606975e-01, -1.811097540111681e-01, -1.520019409981560e-01, -1.504925841432835e-01, -1.148182890099971e-01, -1.141869221558618e-01, -1.316413890652913e-01, -1.316878440789786e-01, -1.316413890652914e-01, -1.316878440789786e-01, -8.811210515272211e-02, -8.750950462477401e-02, -1.191938906556223e+00, -1.183838782163617e+00, -8.861112781627971e-01, -8.574096048114545e-01, -1.196772035808021e-01, -1.178993595371692e-01, -5.661474929744819e-01, -5.361775258861312e-01, -5.661474929744820e-01, -5.361775258861312e-01, -4.764350523080126e+00, -4.597664911480253e+00, -4.379668391706387e+01, -4.369681186239997e+01, -2.152415989380327e+01, -2.023744828505505e+01, -5.909050913123095e-01, -5.813972111991188e-01, -1.628777271089778e+01, -1.225659475268115e+01, -1.628777271089779e+01, -1.225659475268116e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gdme_0_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [7.454246138712632e-03, 7.454255737632140e-03, 7.454222056180292e-03, 7.454238242416313e-03, 7.454140259764507e-03, 7.454122364899679e-03, 7.454412355237792e-03, 7.454469137700647e-03, 7.454232015366913e-03, 7.454327022164334e-03, 7.454232015366913e-03, 7.454327022164334e-03, 4.578504214147556e-02, 4.578566684415582e-02, 4.578489899943419e-02, 4.578561234287937e-02, 4.578232113476293e-02, 4.578137862000033e-02, 4.577939924755812e-02, 4.577875677021256e-02, 4.579269941506935e-02, 4.577557166132685e-02, 4.579269941506935e-02, 4.577557166132685e-02, 2.378481277715516e-01, 2.369090596547852e-01, 2.382188684258753e-01, 2.370642212821104e-01, 2.432845833922238e-01, 2.449721771205526e-01, 2.423754056601426e-01, 2.418514694983072e-01, 2.351059458012728e-01, 2.510077001251214e-01, 2.351059458012728e-01, 2.510077001251214e-01, 9.375333845426020e-01, 9.024300531595824e-01, 9.261215545720713e-01, 8.867791004432475e-01, 2.070516072482151e-01, 2.003175454697357e-01, 1.219340158601717e+00, 1.202741735777756e+00, 8.978672379254662e-01, 1.673620912989321e+00, 8.978672379254661e-01, 1.673620912989321e+00, 2.726051973367740e+01, 2.565410557539842e+01, 2.601491391605298e+01, 2.428458390472154e+01, 4.678573432453581e+00, 4.430405839561693e+00, 4.534895195101110e+01, 4.611740340050203e+01, 3.055784571887739e+01, 5.369853170421069e+01, 3.055784571887739e+01, 5.369853170421065e+01, 3.057672641868417e-02, 3.058405247601649e-02, 3.057101738735664e-02, 3.057853533670562e-02, 3.057637870249414e-02, 3.058384103270215e-02, 3.057148034490850e-02, 3.057882922690422e-02, 3.057382551408596e-02, 3.058128514967281e-02, 3.057382551408596e-02, 3.058128514967281e-02, 8.135467357007103e-02, 8.135878473969915e-02, 8.075986876765939e-02, 8.078185282325773e-02, 8.186062761697040e-02, 8.171928665767894e-02, 8.133941520039978e-02, 8.119312005471169e-02, 8.064912588089501e-02, 8.100387118485428e-02, 8.064912588089501e-02, 8.100387118485428e-02, 2.710104492691530e-01, 2.717298535981552e-01, 2.498552615994409e-01, 2.497418837635984e-01, 2.987645518031256e-01, 2.881703352182329e-01, 2.868928167887015e-01, 2.776668899538383e-01, 2.605788214542546e-01, 2.742460992142471e-01, 2.605788214542546e-01, 2.742460992142470e-01, 1.752492674989883e+00, 1.735938541047810e+00, 9.202145624699248e-01, 9.156449744593854e-01, 1.937270420999505e+00, 1.838487578624642e+00, 8.292416439477229e-02, 8.296143625720913e-02, 1.531589762944367e+00, 1.445801795736909e+00, 1.531589762944367e+00, 1.445801795736909e+00, 6.044999209487447e+01, 5.816737183847359e+01, 4.713165130537303e+01, 4.642894736718319e+01, 6.302934187167923e+01, 5.951580819465670e+01, 2.811718926056963e+00, 2.794536169047494e+00, 6.171191981056504e+01, 4.493629004834469e+01, 6.171191981056504e+01, 4.493629004834469e+01, 2.705809214595501e-01, 2.695389732537385e-01, 2.721473056157071e-01, 2.710888059482992e-01, 2.715957400593098e-01, 2.705397563931969e-01, 2.711384158131812e-01, 2.700938147539744e-01, 2.713670802793705e-01, 2.703168976043475e-01, 2.713670802793705e-01, 2.703168976043475e-01, 2.780418048197493e-01, 2.771257099041005e-01, 3.240631046554155e-01, 3.226652170279538e-01, 3.094850241246930e-01, 3.081176061588645e-01, 2.961150612940550e-01, 2.950774784297984e-01, 3.027560438291256e-01, 3.016355559156049e-01, 3.027560438291256e-01, 3.016355559156049e-01, 2.384678970219146e-01, 2.380799410382515e-01, 7.286335930427900e-01, 7.244390160446724e-01, 6.080077639926241e-01, 6.019703365731340e-01, 4.592731560399886e-01, 4.567476886234474e-01, 5.265655562611653e-01, 5.267513763159143e-01, 5.265655562611655e-01, 5.267513763159143e-01, 3.524484206108884e-01, 3.500380184990960e-01, 4.767755626224892e+00, 4.735355128654470e+00, 3.544445112651188e+00, 3.429638419245818e+00, 4.787088143232082e-01, 4.715974381486768e-01, 2.264589971897927e+00, 2.144710103544525e+00, 2.264589971897928e+00, 2.144710103544525e+00, 1.905740209232050e+01, 1.839065964592101e+01, 1.751867356682555e+02, 1.747872474495999e+02, 8.609663957521308e+01, 8.094979314022018e+01, 2.363620365249238e+00, 2.325588844796475e+00, 6.515109084359113e+01, 4.902637901072459e+01, 6.515109084359118e+01, 4.902637901072465e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
