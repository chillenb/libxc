
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ms2b_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2b", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.010243445517517e+01, -2.010252447070397e+01, -2.010292834257632e+01, -2.129071937298493e+01, -2.129128744536524e+01, -2.248040225907043e+01, -3.497926263720994e+00, -3.772096567888651e+00, -3.771316584483538e+00, -3.771973154880640e+00, -3.771510593332020e+00, -3.497458765707261e+00, -6.159834198037680e-01, -6.856777968101793e-01, -7.426407439171796e-01, -6.743221237412164e-01, -6.034289401829689e-01, -7.461804137292674e-01, -1.807626645351978e-01, -1.833141451312168e-01, -8.117179502308387e-01, -1.636568339689952e-01, -1.961838921839249e-01, -1.909762831512377e-01, -8.426223520668559e-03, -7.518822517848853e-03, -4.088386696475716e-02, -4.859960923155554e-03, -6.782430495312611e-03, -6.782430495312611e-03, -5.449261271620029e+00, -5.449718255098314e+00, -5.449279794628784e+00, -5.449683509246551e+00, -5.238930482064515e+00, -5.239115041465110e+00, -2.142291547109381e+00, -2.153714398749184e+00, -2.134230894355493e+00, -2.144206383253441e+00, -1.988706340528654e+00, -2.152502330066902e+00, -5.854323735154634e-01, -6.701347839454024e-01, -5.860943384664151e-01, -6.019076081467221e-01, -5.979223013173612e-01, -6.347736314042446e-01, -1.197487911721315e-01, -1.835618285983482e-01, -1.116357222748283e-01, -2.037941732387172e+00, -1.359274742692408e-01, -1.359274742692408e-01, -3.139373748734802e-03, -4.750977304262930e-03, -3.638044113151645e-03, -6.395073225704952e-02, -4.569829259445693e-03, -4.569829259445695e-03, -6.112856025960334e-01, -6.098949606514333e-01, -5.944025553443422e-01, -6.047881505846722e-01, -5.966952701558452e-01, -6.035683359725642e-01, -5.950005654181193e-01, -4.925237708444259e-01, -5.129549027130993e-01, -5.660183551595863e-01, -5.564818687719382e-01, -5.239890384699027e-01, -6.654874779235136e-01, -2.558121085986925e-01, -2.706799617358789e-01, -3.515457482969371e-01, -3.361794324913649e-01, -3.074295311147259e-01, -4.908179395018094e-01, -3.022816698719769e-02, -6.261567998800405e-02, -3.624816865797557e-01, -9.576482106522646e-02, -9.576482106522646e-02, -7.677920132663652e-03, -1.269980035906642e-03, -1.725528314550225e-03, -6.135971986689982e-02, -4.196719244994472e-03, -3.072595408947994e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ms2b_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2b", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.862821523962507e+01, -2.862938479202352e+01, -2.862848480603636e+01, -2.862958037750354e+01, -2.862929904340242e+01, -2.863076044874744e+01, -2.862626770823934e+01, -2.892951461733769e+01, -2.862838302092287e+01, -2.893014642132617e+01, -2.893048311744504e+01, -2.893014642132617e+01, -4.619175847044422e+00, -4.337212707962250e+00, -4.619218344759876e+00, -4.619113707089217e+00, -4.620024990776744e+00, -4.620218153172849e+00, -4.620120878794459e+00, -4.620186456649867e+00, -4.618340956072734e+00, -4.621001819698926e+00, -4.336592016458170e+00, -4.621001819698926e+00, -8.337415074097595e-01, -8.375020672370622e-01, -8.323103751881034e-01, -8.846197970387033e-01, -8.629038268386809e-01, -8.572033985395427e-01, -8.657320307942767e-01, -8.189545547365221e-01, -8.442130325911124e-01, -7.861903316972110e-01, -8.919550729739187e-01, -8.377644312758553e-01, -2.092685313223495e-01, -2.336463572410906e-01, -2.120296675267064e-01, -2.373871551919863e-01, -1.030017807274064e+00, -9.811049690924848e-01, -1.874457881588253e-01, -1.872205552453803e-01, -2.361486176695797e-01, -1.503472143879014e-01, -2.361486176695796e-01, -1.149506400313188e-01, -1.085393597865153e-02, -1.153142255675224e-02, -7.358942986992329e-03, -1.217894784711470e-02, -4.094823448402422e-02, -6.445132490718491e-02, -6.531062127354781e-03, -6.422315452067904e-03, -9.685858141400036e-03, -5.515394033725942e-03, -9.685858141400036e-03, -5.515394033725942e-03, -7.086276038120667e+00, -7.084582528368872e+00, -7.088227183794634e+00, -7.086467411286084e+00, -7.086400412095293e+00, -7.084658788691145e+00, -7.088074127900569e+00, -7.086370654712268e+00, -7.321466335586395e+00, -7.085527234666170e+00, -7.087263309914943e+00, -7.319631624560823e+00, -2.589747718785075e+00, -2.589799578677105e+00, -2.610673785954170e+00, -2.610096708270971e+00, -2.572161951244153e+00, -2.577226872059438e+00, -2.590199906145751e+00, -2.595529729382901e+00, -2.614717926662554e+00, -2.459114922399862e+00, -2.614717926662554e+00, -2.602275834381304e+00, -7.878313439139856e-01, -7.267562499500256e-01, -8.636236618024747e-01, -8.644993275730357e-01, -7.083968824805082e-01, -7.372786365682732e-01, -7.435075162478091e-01, -7.703217364607554e-01, -8.221868835014322e-01, -7.206531458400844e-01, -8.221868835014323e-01, -7.790994046968618e-01, -1.433990185899705e-01, -1.444782671955001e-01, -2.116765200666362e-01, -2.373622606438609e-01, -1.326300205279639e-01, -1.376777421452104e-01, -2.583359668558837e+00, -2.582235260493373e+00, -1.557975061151276e-01, -1.590755402687097e-01, -1.557975061151276e-01, -1.590755402687097e-01, -3.166856445729743e-03, -5.092938336400793e-03, -6.284306303375195e-03, -6.379502403144567e-03, -4.698295784529172e-03, -4.975138882599878e-03, -9.675223950372386e-02, -6.866347906166080e-02, -4.800169672589167e-03, -6.587946403204775e-03, -4.800169672589168e-03, -6.587946403204778e-03, -8.076931788158460e-01, -8.108953946923156e-01, -8.003842204033805e-01, -8.036195291808710e-01, -8.257478245281784e-01, -8.284552021116949e-01, -8.231380177122865e-01, -8.082664544728773e-01, -8.245052466843020e-01, -8.272159064139122e-01, -8.245052466843020e-01, -8.072155706095316e-01, -7.856497601746202e-01, -7.883364209961340e-01, -6.561353447895760e-01, -6.110792913884298e-01, -6.921050026773695e-01, -6.491223601803795e-01, -7.291844153585774e-01, -7.318333705575121e-01, -7.102502620494930e-01, -7.130235098065246e-01, -7.102502620494930e-01, -6.852400461832994e-01, -9.020670853750619e-01, -8.801528000615517e-01, -2.909123378065510e-01, -2.924522683175206e-01, -3.252432591069001e-01, -3.486496266637656e-01, -4.339047755060846e-01, -4.611509511170575e-01, -3.985421897035665e-01, -3.984243039196110e-01, -3.985421897035664e-01, -3.779706610026792e-01, -6.003261623739830e-01, -6.049912451887496e-01, -4.018192163939634e-02, -4.045696351227777e-02, -7.934511644117412e-02, -8.165346943541718e-02, -4.416487418268079e-01, -4.499201960125490e-01, -1.144693771754701e-01, -1.179915954593126e-01, -1.144693771754701e-01, -1.179915954593126e-01, -1.004565517493467e-02, -1.040988509206748e-02, -1.691332252884271e-03, -1.695197784073661e-03, -2.223506661850544e-03, -2.364880640352621e-03, -8.129360084176318e-02, -8.265164994456077e-02, -4.546235122619451e-03, -6.039134940193366e-03, -4.546235122619446e-03, -3.904812636728304e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms2b_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2b", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.940617064795589e-08, 0.000000000000000e+00, -2.941889364656098e-08, -2.940763572473382e-08, 0.000000000000000e+00, -2.941995546036699e-08, -2.941155566022135e-08, 0.000000000000000e+00, -2.942578564220128e-08, -2.939515160715771e-08, 0.000000000000000e+00, -4.945311849210229e-09, -2.940713084759278e-08, 0.000000000000000e+00, -4.945037986174614e-09, -4.944744694924855e-09, 0.000000000000000e+00, -4.945037986174614e-09, -5.778055933434678e-06, 0.000000000000000e+00, -1.527033279364713e-05, -5.778505230404509e-06, 0.000000000000000e+00, -5.778257980835424e-06, -5.787328792918705e-06, 0.000000000000000e+00, -5.788661925023739e-06, -5.782173571812530e-06, 0.000000000000000e+00, -5.781862626439178e-06, -5.780759029267343e-06, 0.000000000000000e+00, -5.789363656079983e-06, -1.528275910443101e-05, 0.000000000000000e+00, -5.789363656079983e-06, -1.220209462325730e-02, 0.000000000000000e+00, -1.203367221045177e-02, -1.227115287456018e-02, 0.000000000000000e+00, -3.107987890176583e-03, -3.168649598335735e-03, 0.000000000000000e+00, -3.214225204190022e-03, -3.205525720383226e-03, 0.000000000000000e+00, -1.298513048041996e-02, -1.168489051212645e-02, 0.000000000000000e+00, -1.483470706303211e-02, -3.041884915785946e-03, 0.000000000000000e+00, -3.362486947634156e-03, -2.812052735258222e+00, 0.000000000000000e+00, -5.220714471915177e-01, -2.688246053396510e+00, 0.000000000000000e+00, -5.073725045783205e-01, -1.173962161590124e-03, 0.000000000000000e+00, -5.907047670962831e-03, -6.321913781497560e-01, 0.000000000000000e+00, -7.010622241755432e-01, -4.566694506668565e-01, 0.000000000000000e+00, -7.301485487841686e-01, -4.566694506668565e-01, 0.000000000000000e+00, -2.616987494070693e+01, -3.338551870667474e+00, 0.000000000000000e+00, -3.350944147215694e+00, -1.497851822630371e+06, 0.000000000000000e+00, -3.504235956335264e+00, -1.571291391945075e+03, 0.000000000000000e+00, -1.596206157305187e+00, -2.446798837571115e+00, 0.000000000000000e+00, -2.471893820729562e+00, -3.172585476834062e+00, 0.000000000000000e+00, -5.434756914918236e+00, -3.172585476834062e+00, 0.000000000000000e+00, -5.434756914918244e+00, -1.448189788670895e-06, 0.000000000000000e+00, -1.449583725868305e-06, -1.447988414868658e-06, 0.000000000000000e+00, -1.449389325686649e-06, -1.448185370749943e-06, 0.000000000000000e+00, -1.449581973935491e-06, -1.448012082806252e-06, 0.000000000000000e+00, -1.449404861768899e-06, -1.285285671479747e-05, 0.000000000000000e+00, -1.449485509203253e-06, -1.448081973271657e-06, 0.000000000000000e+00, -1.286468196518804e-05, -5.393798878637068e-05, 0.000000000000000e+00, -5.402704226277937e-05, -5.311943429207845e-05, 0.000000000000000e+00, -5.322902857837576e-05, -5.457122032563469e-05, 0.000000000000000e+00, -5.447966387220487e-05, -5.388311513127901e-05, 0.000000000000000e+00, -5.377500420999531e-05, -5.300443569387553e-05, 0.000000000000000e+00, -1.593807056632072e-04, -5.300443569387553e-05, 0.000000000000000e+00, -5.355208786719935e-05, -7.935989757432175e-03, 0.000000000000000e+00, -1.706590671663602e-02, -6.268871253390417e-03, 0.000000000000000e+00, -6.283437732034914e-03, -1.058804138449195e-02, 0.000000000000000e+00, -9.628639631958043e-03, -9.872950203681704e-03, 0.000000000000000e+00, -8.894034577029560e-03, -7.001216427691962e-03, 0.000000000000000e+00, -1.800641885114115e-02, -7.001216427691945e-03, 0.000000000000000e+00, -8.379848852653618e-03, -8.931709335117008e-01, 0.000000000000000e+00, -8.834826154306087e-01, -2.525047349479191e+00, 0.000000000000000e+00, -3.492694242395570e-01, -9.680063326657254e-01, 0.000000000000000e+00, -9.790438967826113e-01, -7.173928418239911e-05, 0.000000000000000e+00, -7.187723003931070e-05, -9.859593839531546e-01, 0.000000000000000e+00, -1.169492289355719e+00, -9.859593839531546e-01, 0.000000000000000e+00, -1.169492289355719e+00, -4.366289400522396e+07, 0.000000000000000e+00, -1.637978578400259e+00, -2.321017202237361e+00, 0.000000000000000e+00, -2.045905932771644e+00, -1.671245912889685e+01, 0.000000000000000e+00, -1.834391603335747e+01, -1.443989553565132e+00, 0.000000000000000e+00, -2.012720537961897e+02, -3.149675676027649e+00, 0.000000000000000e+00, -9.997838355864799e+00, -3.149675676027651e+00, 0.000000000000000e+00, -9.997838355864795e+00, -9.383158720951145e-03, 0.000000000000000e+00, -9.244910227633225e-03, -9.408901133724053e-03, 0.000000000000000e+00, -9.271348348169726e-03, -7.577529009760688e-02, 0.000000000000000e+00, -7.371849077731879e-02, -6.786731898066788e-02, 0.000000000000000e+00, -9.254597532921219e-03, -7.205724426964993e-02, 0.000000000000000e+00, -7.004718283160236e-02, -7.205724426964993e-02, 0.000000000000000e+00, -9.258316627763431e-03, -1.043212598618394e-02, 0.000000000000000e+00, -1.030235855567495e-02, -1.553850593943557e-02, 0.000000000000000e+00, -3.278811357241997e-02, -1.390309138928371e-02, 0.000000000000000e+00, -3.629399104872667e-02, -1.242741988942668e-02, 0.000000000000000e+00, -1.226457613434214e-02, -1.315720079096416e-02, 0.000000000000000e+00, -1.298313888400420e-02, -1.315720079096415e-02, 0.000000000000000e+00, -5.489547199307813e-02, -5.079552706182633e-03, 0.000000000000000e+00, -2.514890561395211e-02, -1.990930216341734e-01, 0.000000000000000e+00, -1.963062628203511e-01, -5.153059116776637e-01, 0.000000000000000e+00, -1.204122542331112e-01, -1.666134909359894e-01, 0.000000000000000e+00, -5.327785176353277e-02, -8.400153395893491e-02, 0.000000000000000e+00, -8.437754336815145e-02, -8.400153395893512e-02, 0.000000000000000e+00, -2.962372253863912e-01, -2.042313546817368e-02, 0.000000000000000e+00, -2.011716054621474e-02, -1.694506706282374e+03, 0.000000000000000e+00, -1.648929555357141e+03, -1.319188079684067e+00, 0.000000000000000e+00, -1.357405725016242e+00, -6.871859714843152e-02, 0.000000000000000e+00, -6.797641858302605e-02, -1.571583144876577e+00, 0.000000000000000e+00, -1.819340520517513e+00, -1.571583144876578e+00, 0.000000000000000e+00, -1.819340520517514e+00, -4.313703275440285e+05, 0.000000000000000e+00, -3.741017336744152e+05, -2.669274188299896e+00, 0.000000000000000e+00, -2.657537567419207e+00, -1.796686762616849e+08, 0.000000000000000e+00, -1.404079970821118e+08, -1.035821013199113e+02, 0.000000000000000e+00, -9.721239105181763e+01, -8.128246258478701e+00, 0.000000000000000e+00, -1.036616748235327e+01, -8.128246258478711e+00, 0.000000000000000e+00, -1.889156471670878e+07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms2b_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2b", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.069999463121994e-03, 1.070760618081107e-03, 1.070107510742360e-03, 1.070838976116071e-03, 1.070410691036186e-03, 1.071285330674447e-03, 1.069199036203564e-03, -8.783958262370892e-20, 1.070068931295591e-03, 3.208576798138611e-19, -9.536219659945923e-19, 3.208576798138611e-19, -2.976969855365592e-18, 2.927040557654739e-04, 5.996118150401167e-18, 2.183808743495203e-18, -2.810940108876606e-18, -2.803603756571091e-18, -6.048679846868155e-19, 7.778922856233025e-19, 1.979008783136187e-18, 3.124112632504418e-18, 2.930640109832309e-04, 3.124112632504418e-18, 1.344059876335338e-03, 1.389968257795775e-03, 1.331309694692203e-03, -1.402892789234838e-17, 9.389602212877860e-18, 5.536790930086595e-18, -9.053037433137508e-18, 1.257170889597056e-03, 1.412172253476709e-03, 1.002172987651924e-03, -3.620136332229371e-18, -5.688652387560490e-19, 2.343815301303739e-03, -1.320857363679144e-17, 2.494666044987168e-03, -4.722895616309036e-19, -3.747144109622194e-18, 5.797313313027336e-04, 1.871204112763229e-18, -6.116683111743300e-19, -9.877950160035277e-18, -5.841479333810025e-19, -7.464849098227163e-18, 1.543498672167046e-04, 2.082577174858747e-24, -3.038446040126712e-24, 1.188858416971286e-07, -1.339242024599389e-24, 9.826011494856745e-06, 2.897409947125949e-21, 4.338512868352243e-25, 1.230451734555492e-25, 3.549070456955255e-24, -3.686316807516321e-25, 3.549070456955255e-24, -3.809256580504069e-25, 2.820463633934222e-19, 1.756936759324389e-18, -7.118111560370755e-19, -4.368884915585823e-19, -5.196198758718563e-19, -3.778011414095286e-18, 1.244494356923595e-18, -1.959686152883061e-18, 8.904540647336418e-03, -1.024337189600341e-19, -1.904620781902190e-18, 8.905837558507273e-03, -4.401434745657061e-18, 5.595064481485678e-18, 1.186684178533944e-18, 7.251610788053198e-18, -1.443017197710399e-18, 2.333770059840560e-18, -4.911429171362651e-18, 3.400338694954644e-18, -1.167292622887246e-18, 6.616019546290317e-04, -1.167292622887246e-18, 4.575384103422266e-19, 3.577055661848042e-17, 7.308096232848519e-04, -1.786807207869020e-18, 2.673286215120059e-18, 3.489877495970154e-17, 2.735006089623367e-17, 5.233241952437962e-18, -3.466919729701341e-18, 1.532043160246429e-17, 9.954221062126755e-04, -2.069531848605105e-17, -2.556362661746772e-17, 1.123467175091577e-18, 1.062225007831059e-18, 1.102795634086323e-03, 8.486715856078518e-18, 2.744803305489713e-19, 5.722936490035538e-19, -1.975764545084755e-18, 2.582164266534861e-18, 4.102125250083892e-19, -2.770757776789490e-18, -5.512612560485350e-19, -1.955596805758049e-18, 4.855861729870157e-09, 2.567118749986997e-26, 5.757493264870415e-26, -1.248038891004267e-25, -6.546675939417599e-25, -6.374746922049096e-25, -3.154627974038365e-19, 5.693367198182266e-05, -1.112809107502330e-26, 2.800591025801209e-24, -1.274361350263674e-26, -9.385336403766491e-25, 5.724479755942440e-18, 1.187634443213902e-18, 2.655665986453001e-17, 1.611834250028608e-17, 8.996373596728430e-02, 8.872280764911274e-02, 8.189062216739292e-02, -1.151276455378001e-17, 8.632712346783751e-02, 8.501260090912562e-02, 8.632712346783751e-02, -1.157231201821372e-17, 1.327517913834796e-18, -3.181209033843619e-19, 1.220591097296689e-17, 2.537679040343337e-04, -1.665769900630808e-17, 6.038755514876892e-03, -3.215172797406129e-17, -2.807040446943159e-17, 4.512991463268199e-18, 5.758183626045257e-17, -2.859237074717945e-18, 2.258030839968965e-02, 3.485949291734292e-18, 2.437388822410308e-02, 7.746064589264451e-18, -7.655307629333138e-18, 2.824668985631755e-03, -6.885990963710240e-18, 3.824735583215927e-03, -2.241656904383297e-17, -7.572680692321886e-18, 2.483096201568221e-17, 1.474789067665467e-17, 3.936126754219813e-03, 2.245646935567430e-17, -8.523270373679492e-18, 9.772353005286556e-06, 9.775372356201821e-06, -2.244438727118492e-20, 2.314029020879119e-20, -6.356492161412836e-17, -3.838517387224476e-17, 5.569191718516773e-20, 8.735676252271202e-19, 6.815883135399515e-19, -1.936431586169271e-20, 1.407898517250728e-07, 1.544106366181177e-07, -2.276349111178425e-29, -2.741373953728849e-28, 6.986909785918923e-09, 8.905947772191101e-09, 1.224236743264624e-04, 1.441494802608185e-04, -1.931176899039786e-25, 1.980920935731527e-24, 2.913029857325602e-25, 5.309297877672376e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
