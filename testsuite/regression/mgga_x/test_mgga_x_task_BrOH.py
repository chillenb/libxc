
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_task_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_task", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.300469618860365e+01, -2.300476222582555e+01, -2.300519694270617e+01, -2.300412139401708e+01, -2.300472973225108e+01, -2.300472973225108e+01, -3.310616283066537e+00, -3.310799884454970e+00, -3.316597581004789e+00, -3.317187629827048e+00, -3.310666460099600e+00, -3.310666460099600e+00, -4.750979207917481e-01, -4.738538835722592e-01, -4.450054039165643e-01, -4.688855053926849e-01, -4.746700562396169e-01, -4.746700562396169e-01, -1.819705392277494e-01, -1.834767289164909e-01, -4.485673670945782e-01, -6.719396998004820e-02, -1.822468920090875e-01, -1.822468920090875e-01, -6.837816508462186e-03, -7.245595900148971e-03, -3.105872116892897e-02, -2.546145213394586e-03, -7.169161722100745e-03, -7.169161722100745e-03, -5.661838732678863e+00, -5.662953749897834e+00, -5.662015473319426e+00, -5.662878809549149e+00, -5.662326101150054e+00, -5.662326101150054e+00, -2.032678999388478e+00, -2.054514142790227e+00, -2.029684391715778e+00, -2.047115804164352e+00, -2.051505284250063e+00, -2.051505284250063e+00, -5.985462544822449e-01, -6.548009477876456e-01, -5.468187882031803e-01, -5.773993131269637e-01, -6.285520694788209e-01, -6.285520694788209e-01, -5.625113427454978e-02, -1.785340088585429e-01, -5.555778538794655e-02, -1.918933902684812e+00, -7.677759584935144e-02, -7.677759584935144e-02, -2.438035156478147e-03, -2.918748555547661e-03, -2.168657972004363e-03, -3.735343403771791e-02, -2.663486521377551e-03, -2.663486521377551e-03, -6.444427914885150e-01, -6.409991845737679e-01, -6.422390076857236e-01, -6.431922561250076e-01, -6.427127138789717e-01, -6.427127138789717e-01, -6.188460752022350e-01, -5.363897628137372e-01, -5.602087257585763e-01, -5.825616371318723e-01, -5.707823314135074e-01, -5.707823314135074e-01, -6.778257706826676e-01, -2.361185766344009e-01, -2.768619440350365e-01, -3.455270943536915e-01, -3.129481726571187e-01, -3.129481726571186e-01, -4.674415861437258e-01, -2.978325622083697e-02, -3.674742994704347e-02, -3.293760243343845e-01, -4.808818580504960e-02, -4.808818580504960e-02, -8.180638347229281e-03, -5.147364408736655e-04, -1.241689350212188e-03, -4.507496315514228e-02, -2.211351010494432e-03, -2.211351010494428e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_task_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_task", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.824494626374950e+01, -2.824504669310308e+01, -2.824492335884750e+01, -2.824324638350449e+01, -2.824500456468229e+01, -2.824500456468229e+01, -5.062702077048039e+00, -5.062665352245222e+00, -5.061428629198833e+00, -5.058075327909940e+00, -5.062743136164700e+00, -5.062743136164700e+00, -9.129728598941959e-01, -9.105304442643157e-01, -8.397807121285046e-01, -8.571313844509693e-01, -9.121051305812662e-01, -9.121051305812662e-01, -1.704678182048651e-01, -1.754431423405137e-01, -9.390326885225773e-01, -5.086290378692704e-02, -1.711382298433231e-01, -1.711382298433231e-01, -1.118308361806869e-02, -1.182162045274660e-02, -2.720799972942345e-02, -4.582568462629543e-03, -1.163374072002840e-02, -1.163374072002840e-02, -6.864497418342125e+00, -6.871082193307528e+00, -6.864908793568224e+00, -6.870045751382079e+00, -6.868227820658492e+00, -6.868227820658492e+00, -2.543094498069896e+00, -2.559532696484802e+00, -2.523617241755654e+00, -2.527581168451366e+00, -2.582396510824438e+00, -2.582396510824438e+00, -8.156451105269222e-01, -9.095594546965221e-01, -7.899785088115193e-01, -8.506074232801661e-01, -8.468541558768297e-01, -8.468541558768297e-01, -5.710961162731377e-03, -6.863255598525279e-02, -4.713355331213188e-03, -2.871564731601535e+00, 2.821737147820463e-02, 2.821737147820463e-02, -4.393340315600834e-03, -5.217092134340700e-03, -3.882611905842955e-03, -2.271346169112085e-02, -4.759454061369026e-03, -4.759454061369027e-03, -8.638206415239686e-01, -8.471908741205154e-01, -8.531896724336357e-01, -8.577941541881662e-01, -8.554958881699793e-01, -8.554958881699793e-01, -8.358162739299276e-01, -6.259068212868431e-01, -7.012742575315362e-01, -7.581286961651267e-01, -7.322031049758327e-01, -7.322031049758327e-01, -9.665469987883959e-01, -2.391052610887906e-01, -2.994750083326813e-01, -4.668393115898021e-01, -3.792467341303364e-01, -3.792467341303363e-01, -6.115303065702822e-01, -2.501674943138769e-02, -2.481989301272774e-02, -4.612442001083527e-01, 1.715951144213203e-03, 1.715951144213042e-03, -1.343752005908479e-02, -9.673612671493229e-04, -2.283934796755111e-03, -2.184080315854642e-03, -3.968374404226424e-03, -3.968374404226417e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_task_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_task", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.929158624708020e-08, -1.929167962305446e-08, -1.929556288063559e-08, -1.929426956969700e-08, -1.929160259782496e-08, -1.929160259782496e-08, -1.814296759352360e-05, -1.814223769812772e-05, -1.811689181072185e-05, -1.812578166006983e-05, -1.814238220182342e-05, -1.814238220182342e-05, -7.417193635910363e-03, -7.449715205371098e-03, -8.705802545192272e-03, -9.788648763672846e-03, -7.430498285834602e-03, -7.430498285834602e-03, -2.104038118829722e+00, -2.122269029279010e+00, 2.568380441943056e-04, -2.610954875306194e+00, -2.134983268376630e+00, -2.134983268376630e+00, 7.472755258215001e+01, 7.199206369210589e+01, -9.349824529512031e+00, 4.023725198356135e+02, 6.755566155169997e+01, 6.755566155170015e+01, -7.601270521911012e-06, -7.595918552847861e-06, -7.603215128809254e-06, -7.598900305671055e-06, -7.595175758258765e-06, -7.595175758258765e-06, -8.639588270624954e-05, -8.575357224327547e-05, -8.780233800174729e-05, -9.049178527202611e-05, -8.286111459358614e-05, -8.286111459358614e-05, -1.475580693137947e-02, -9.620368776095015e-03, -2.645041672890484e-02, -2.074239065557719e-02, -9.713898016071020e-03, -9.713898016071020e-03, -5.991404599505828e+00, -2.320522703898904e+00, -6.979594783130581e+00, -1.711990156644754e-04, -1.067628915463551e+01, -1.067628915463551e+01, 4.440851876751003e+02, 3.455841805529728e+02, 1.038190995361829e+03, -5.276261388461380e+00, 5.061078972275665e+02, 5.061078972275665e+02, -2.678138155350781e-02, -2.774677437900729e-02, -2.738650054667852e-02, -2.712167028438080e-02, -2.724705574478496e-02, -2.724705574478497e-02, -1.942585654225146e-02, -4.888816278189361e-02, -3.488601458053362e-02, -2.671736225425249e-02, -2.920121045051130e-02, -2.920121045051132e-02, -9.967076381562747e-03, -4.950988959273200e-01, -3.695270090419617e-01, -1.726267432034742e-01, -2.380747384296540e-01, -2.380747384296545e-01, -3.820972067856242e-02, -1.464758015366465e+01, -7.713546522780029e+00, -2.039257364285282e-01, -1.314847530983516e+01, -1.314847530983515e+01, 6.084931429485369e+01, 4.677262665498713e+03, 1.415949937942718e+03, -1.441160923731296e+01, 8.410001942207626e+02, 8.410001942207641e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_task_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_task", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_task_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_task", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [3.043582586484869e-03, 3.043617590786113e-03, 3.044320354343092e-03, 3.043782818010127e-03, 3.043595879066915e-03, 3.043595879066915e-03, 1.341669524130196e-02, 1.341595611444350e-02, 1.339223192425350e-02, 1.339649352988584e-02, 1.341644710041438e-02, 1.341644710041438e-02, 4.651274849553680e-02, 4.649115624393490e-02, 4.686878734550356e-02, 5.207459762872461e-02, 4.651134213574225e-02, 4.651134213574225e-02, 2.091274338423894e-01, 2.195193213239360e-01, 1.425277113149264e-02, 8.043231825947524e-02, 2.146913503085056e-01, 2.146913503085056e-01, 4.604329249118097e-04, 3.641200504653156e-04, 6.625662080117054e-03, 3.296801054325919e-09, 5.080627111566947e-04, 5.080627111566859e-04, 1.716861188997319e-02, 1.716488796736223e-02, 1.717377463907153e-02, 1.717054161260742e-02, 1.715924860086650e-02, 1.715924860086650e-02, 1.115643265914463e-02, 1.127584366742625e-02, 1.121441157804547e-02, 1.169088173212677e-02, 1.100037769073168e-02, 1.100037769073168e-02, 5.017213671147244e-02, 4.117225721033792e-02, 7.656120282093450e-02, 6.766659922374588e-02, 3.744208571112424e-02, 3.744208571112424e-02, 7.073306942623843e-02, 2.315648890502703e-01, 8.069705345363286e-02, 2.068178073224906e-02, 2.294155867720996e-01, 2.294155867720996e-01, 1.399963882262555e-08, 1.311507513994370e-08, 9.255455153939431e-08, 4.241248849704018e-03, 7.687058335430554e-09, 7.687058335408027e-09, 9.197280733187120e-02, 9.426615433380681e-02, 9.341289329552752e-02, 9.278192680679852e-02, 9.307513022177939e-02, 9.307513022177939e-02, 6.106048039852414e-02, 1.018280659560315e-01, 8.330911670287100e-02, 7.171234064631708e-02, 7.410771639323745e-02, 7.410771639323743e-02, 4.910396419868376e-02, 1.014258205260648e-01, 1.265112484780420e-01, 1.268179518732699e-01, 1.193309884364502e-01, 1.193309884364503e-01, 6.164397917421278e-02, 1.207458000842861e-02, 1.055511378813256e-02, 1.277272527027984e-01, 8.553280644883157e-02, 8.553280644883143e-02, 1.122262791815779e-06, 1.361804665183108e-12, 4.501186302144727e-09, 7.903524022854796e-02, 4.808661542860300e-09, 4.808661542863372e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
