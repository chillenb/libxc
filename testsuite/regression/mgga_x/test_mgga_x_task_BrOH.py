
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_task_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_task", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.182609953757394e+01, -2.182619614375702e+01, -2.182666209054906e+01, -2.182508385327919e+01, -2.182615013447400e+01, -2.182615013447400e+01, -2.939678543151108e+00, -2.939878199531460e+00, -2.945986488200371e+00, -2.943856927621762e+00, -2.939747950217543e+00, -3.765972045271937e+00, -4.379624761315549e-01, -7.146207022559946e-01, -6.938510123626118e-01, -7.001131915349201e-01, -7.151298450751128e-01, -7.151298450751128e-01, -1.951568294238651e-01, -1.979249444117674e-01, -4.654094487557640e-01, -1.367053727524856e-01, -1.959849579439674e-01, -1.959849579439674e-01, -6.927645765454357e-03, -7.351796071067077e-03, -3.931378465948418e-02, -2.387431496183355e-03, -7.276773635083654e-03, -7.276773635083654e-03, -5.666539668449681e+00, -5.667598739047939e+00, -5.666651688984983e+00, -5.426837838853505e+00, -5.667077661075034e+00, -5.667077661075034e+00, -1.548536136553891e+00, -1.579253022630716e+00, -1.535434559865477e+00, -1.559644027884118e+00, -1.586562534068271e+00, -2.132057181667255e+00, -6.301970807977137e-01, -6.859346818000703e-01, -5.971706949339897e-01, -6.241390954027553e-01, -6.549401715290775e-01, -5.866949161772229e-01, -4.505056195056838e-02, -1.942257370253402e-01, -4.460386088186825e-02, -2.084011196217588e+00, -1.155980433034554e-01, -1.155980433034554e-01, -2.091046295615510e-03, -2.784490472280666e-03, -2.127248862405816e-03, -2.723294220184401e-02, -2.177433738770108e-03, -2.500278702930859e-03, -6.523983454206095e-01, -6.488401107540622e-01, -6.333842913465859e-01, -6.511064730240514e-01, -6.506143629278193e-01, -6.506143629278193e-01, -6.314405334692437e-01, -5.458221362409039e-01, -5.710148504237895e-01, -5.942451672683454e-01, -5.824253103445299e-01, -5.414470297728635e-01, -7.188521723634034e-01, -1.391402037110636e-01, -2.947271734772591e-01, -2.800685048710497e-01, -3.346488419136797e-01, -3.346488419136796e-01, -3.901351039171192e-01, -3.577485649455048e-02, -5.084812538521551e-02, -3.589817619949625e-01, -3.630627980391084e-02, -7.857075441207061e-02, -7.936111503198229e-03, -4.640588151668716e-04, -1.221564563809617e-03, -7.494496147863106e-02, -2.066175918858498e-03, -2.066175918858494e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_task_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_task", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.179706157528440e+01, -3.179706638205868e+01, -3.179715136655381e+01, -3.179706394259474e+01, -3.179706367476855e+01, -3.179706367476855e+01, -5.318127969928971e+00, -5.318296837856602e+00, -5.323517425400063e+00, -5.321932317650454e+00, -5.318200153932290e+00, -5.098586554242086e+00, -8.192809341144076e-01, -9.832490480596313e-01, -9.583654575469402e-01, -9.653337167758256e-01, -9.838566632316258e-01, -9.838566632316258e-01, -2.696650573469971e-01, -2.731359856560057e-01, -8.293432173496085e-01, -1.968295614924040e-01, -2.707083126713409e-01, -2.707083126713409e-01, -1.195758160523602e-02, -1.265285451108093e-02, -6.185128084223807e-02, -4.347961041122480e-03, -1.252311850622877e-02, -1.252311850622877e-02, -7.572986554068111e+00, -7.574183928436626e+00, -7.573112094903771e+00, -7.551385807701148e+00, -7.573596067977978e+00, -7.573596067977978e+00, -2.880066199775744e+00, -2.924926767147920e+00, -2.860557044201009e+00, -2.896577570744750e+00, -2.935076058595205e+00, -2.894453529793889e+00, -8.481468319644753e-01, -9.184157813796346e-01, -8.062002021241323e-01, -8.386516508871851e-01, -8.797249204252008e-01, -9.309353870099790e-01, -6.398879740329116e-02, -2.727779182785757e-01, -6.362042247769852e-02, -2.798755832874958e+00, -1.671976154248164e-01, -1.671976154248164e-01, -2.788471798728086e-03, -5.035437424148578e-03, -3.837101933154449e-03, -3.708927088198426e-02, -2.903712707963467e-03, -4.530050130242261e-03, -8.699887571518669e-01, -8.656686743235900e-01, -8.587245105769983e-01, -8.683916320676724e-01, -8.677928490628724e-01, -8.677928490628724e-01, -8.421609531127836e-01, -7.351905446405259e-01, -7.662558574905672e-01, -7.950481500972274e-01, -7.803756400246130e-01, -8.057416173851571e-01, -9.637759202845679e-01, -2.523796712683311e-01, -4.048502989072147e-01, -5.195379909439404e-01, -4.564424310111861e-01, -4.564424310111859e-01, -6.985924432877458e-01, -5.675163357816749e-02, -7.872497980152338e-02, -4.857513687281680e-01, -5.104253736643058e-02, -1.167814557542822e-01, -1.376533260393164e-02, -8.783845589512221e-04, -2.252632437277470e-03, -1.114072491441618e-01, -3.756691124290120e-03, -3.756691124290112e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_task_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_task", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-9.720574325657083e-09, -9.720275756785263e-09, -9.718893164070518e-09, -9.723762222262997e-09, -9.720417563754052e-09, -9.720417563754052e-09, -1.321429672346065e-05, -1.321727666386445e-05, -1.330467917556606e-05, -1.326667284946365e-05, -1.321487256190134e-05, 5.449512305240323e-07, -1.317916611476966e-03, 3.778863122182089e-04, 4.075973534967314e-04, 4.009667052238217e-04, 3.771821169101656e-04, 3.771821169101656e-04, 6.482462511087807e-02, 6.218338766750213e-02, 7.876255314747099e-04, 1.478590526638854e-01, 6.400972579956163e-02, 6.400972579956163e-02, 1.190428171715852e+02, 1.081501823678592e+02, 3.260100746619375e+00, 2.737880814075887e+02, 1.129479243504652e+02, 1.129479243504652e+02, 7.083047194810333e-08, 7.045261330975341e-08, 7.078900943047905e-08, -1.946622452888108e-06, 7.064080981430629e-08, 7.064080981430629e-08, -1.008031186923230e-04, -1.040121261545697e-04, -9.917328675646107e-05, -1.019175664774983e-04, -1.049530277928866e-04, 5.278968252031149e-06, 6.707247626430258e-04, 4.007260694942600e-04, 8.563773795551037e-04, 6.766547003299631e-04, 5.532282808134577e-04, -1.898702314681253e-02, 1.062646729205349e+01, 5.347801601166475e-02, 1.114207246304570e+01, 5.370262372772698e-06, 2.676213856352628e-01, 2.676213856352628e-01, 2.008474559943072e+06, 2.607370950602216e+02, 9.289262508267263e+02, 7.332839875088813e+01, 1.708272808614847e+06, 3.460149630865418e+02, 1.028830831131076e-04, 2.342936432330635e-04, -1.137993381395038e-02, 1.535515429827347e-04, 1.721296157023865e-04, 1.721296157023865e-04, 1.728590561531651e-04, 1.204680179558070e-03, 9.305710955651655e-04, 6.694020122922819e-04, 8.051007528068090e-04, -2.688725711959117e-02, 3.578095163871660e-04, 6.216244784092273e-02, 1.328151817956861e-02, -1.010663392337425e-01, 8.488053831332104e-03, 8.488053831332108e-03, -4.847103748005988e-02, 3.792908444872911e+00, 1.754379437730172e+00, 6.599317478983557e-03, 2.472224679111459e+01, 7.566121383799923e-01, 5.405403320211982e+01, 2.620794941159047e+03, 1.288275660662315e+03, 9.115796899643339e-01, 5.595904441474930e+02, 5.595904441474943e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_task_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_task", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.580455727289873e-03, 1.580417982784760e-03, 1.580249900948645e-03, 1.580864444001648e-03, 1.580435864429081e-03, 1.580435864429081e-03, 1.052886300478611e-02, 1.053051391758264e-02, 1.057959176113110e-02, 1.055979081309033e-02, 1.052927124336424e-02, 2.939402275573072e-12, 2.199814005987723e-02, 1.611431936093121e-11, 1.655825523075922e-11, 1.643542874755859e-11, 1.610294133126271e-11, 1.610294133126271e-11, 5.884264539045790e-11, 5.809855807729665e-11, 9.082777362352273e-03, 6.713682177252809e-11, 5.861955508874453e-11, 5.861955508874453e-11, 1.454677872357158e-11, 1.582379599352829e-11, 5.973440403617109e-11, 1.110974420992234e-12, 1.602539543690027e-11, 1.602539543690027e-11, 1.761527448939367e-12, 1.760606375288767e-12, 1.761427066158446e-12, 4.576600216454590e-03, 1.761063121167402e-12, 1.761063121167402e-12, 1.565719296089000e-02, 1.614978978810498e-02, 1.543005291116616e-02, 1.583148567773910e-02, 1.628031268547309e-02, 5.260014865349570e-12, 1.690923186792119e-11, 1.484712371190920e-11, 1.823572331533260e-11, 1.685725009265443e-11, 1.601643168683611e-11, 7.063418681669394e-02, 2.348738012874483e-03, 5.621653932518807e-11, 2.692211718936773e-03, 5.025548927882497e-12, 7.610689623536809e-11, 7.610689623536809e-11, 3.525622653717212e-07, 1.769086732699952e-12, 2.857214228978751e-12, 4.779043293508347e-04, 4.061278535502368e-07, 1.677523984692523e-12, 1.480377379096941e-11, 1.503875930149978e-11, 3.953507768440435e-02, 1.488799484942530e-11, 1.492050324018327e-11, 1.492050324018327e-11, 1.535090408217381e-11, 1.964210311601133e-11, 1.821705190439513e-11, 1.700411261215748e-11, 1.760848310061580e-11, 6.904530759287718e-02, 1.435235383596477e-11, 3.920879921408370e-02, 3.906211887941494e-11, 8.941590143959049e-02, 3.404710659961572e-11, 3.404710659961575e-11, 8.406111205569232e-02, 5.419500482847122e-11, 6.461232883878323e-11, 3.074881897192263e-11, 2.063190649289055e-03, 8.172218527025060e-11, 9.883140045084040e-12, 4.514581872550036e-14, 6.204033483322068e-13, 8.552179265614340e-11, 1.491441938354368e-12, 1.491441938354360e-12])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
