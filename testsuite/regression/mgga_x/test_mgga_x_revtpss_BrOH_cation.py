
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_revtpss_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revtpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.990391377516071e+01, -1.990397421110901e+01, -1.990425804580818e+01, -2.133946079339681e+01, -2.133993758564717e+01, -2.277612391399035e+01, -3.470831893403969e+00, -3.706703411158848e+00, -3.706683702477815e+00, -3.707026558930845e+00, -3.706606747154274e+00, -3.470895356661667e+00, -6.332811782635147e-01, -6.844075802272941e-01, -7.253826795621747e-01, -6.744650685773781e-01, -6.221039504479020e-01, -7.283932365463264e-01, -1.822418807853388e-01, -1.844078446691749e-01, -8.276048949570813e-01, -1.735894929553933e-01, -1.969942079888872e-01, -1.903439573032982e-01, -1.010246492636513e-02, -8.682546395142739e-03, -4.677559896765433e-02, -5.828627494557879e-03, -8.132823845114375e-03, -8.132823845114377e-03, -5.556729723609073e+00, -5.557811335744318e+00, -5.556784112479242e+00, -5.557738867466087e+00, -5.211475357271306e+00, -5.211811452605875e+00, -2.093667535120233e+00, -2.106876732818786e+00, -2.084300955372136e+00, -2.095769125456526e+00, -1.972618663681349e+00, -2.105578441005873e+00, -5.847150311982487e-01, -6.797938570130690e-01, -5.784473751794854e-01, -6.009447082937538e-01, -5.990373992330742e-01, -6.354898845388488e-01, -1.350063145637766e-01, -1.898469817327604e-01, -1.267419072019194e-01, -2.043900374345209e+00, -1.472222486120485e-01, -1.472222486120485e-01, -3.615017176577599e-03, -5.697995023530643e-03, -4.362883213686965e-03, -7.191596499433713e-02, -5.480134689158252e-03, -5.480134689158253e-03, -6.287996380790735e-01, -6.256836418618807e-01, -5.511075003545892e-01, -5.903249917755315e-01, -5.517262688886089e-01, -5.897918369835227e-01, -6.118535119960875e-01, -4.901935355278686e-01, -5.136872466535489e-01, -5.745306932365986e-01, -5.614660442300319e-01, -5.255982248969487e-01, -6.670033636819175e-01, -2.537102202427333e-01, -2.709234614777253e-01, -3.486233038071661e-01, -3.270650781320211e-01, -3.055839121249269e-01, -4.829680782495972e-01, -3.217920495761773e-02, -7.383451186104401e-02, -3.570420982841933e-01, -1.089061691526991e-01, -1.089061691526991e-01, -8.177267155347655e-03, -1.523286780177339e-03, -1.837800925952907e-03, -6.517951021820359e-02, -5.032827093972131e-03, -3.409322826722814e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_revtpss_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revtpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.680343287462237e+01, -2.680344016391342e+01, -2.680352560701599e+01, -2.680350751920648e+01, -2.680383706052253e+01, -2.680394964362816e+01, -2.680278981870854e+01, -2.753193122800993e+01, -2.680348759406667e+01, -2.753229484223575e+01, -2.753271010828771e+01, -2.753229484223575e+01, -4.485720817268114e+00, -4.242629838779562e+00, -4.485815978794566e+00, -4.485651602178880e+00, -4.487633235711025e+00, -4.488003132095973e+00, -4.487353494778144e+00, -4.487418577065260e+00, -4.484789724496698e+00, -4.489128697658811e+00, -4.241919202376445e+00, -4.489128697658811e+00, -8.224737502302584e-01, -8.248305361958846e-01, -8.214564433317902e-01, -7.969398306514490e-01, -7.585256492252801e-01, -7.507328526992093e-01, -7.667609471701093e-01, -8.107764622012309e-01, -8.305802613933150e-01, -7.865106381388448e-01, -8.063810179237152e-01, -7.236743066202802e-01, -2.125518506515688e-01, -1.983920164077546e-01, -2.148959582440844e-01, -2.034661350474069e-01, -8.463274435521204e-01, -9.922298839490119e-01, -1.607474971395253e-01, -1.573028472341873e-01, -1.963669966728812e-01, -1.493010939446774e-01, -1.963669966728810e-01, -1.214892283790342e-01, -1.300267291276581e-02, -1.381200702427697e-02, -7.837375281264953e-03, -1.458467066631185e-02, -4.356371086460694e-02, -7.469005604965391e-02, -7.830773772470313e-03, -7.700469685073584e-03, -1.160661271740751e-02, -6.612822111742319e-03, -1.160661271740751e-02, -6.612822111742321e-03, -6.636122992467135e+00, -6.634523584862277e+00, -6.635793098517934e+00, -6.634204387206154e+00, -6.636089137623606e+00, -6.634501346134031e+00, -6.635807002896044e+00, -6.634212312262863e+00, -6.542885495228325e+00, -6.634365547586037e+00, -6.635966019626986e+00, -6.541288890321748e+00, -2.485382520618557e+00, -2.486221832124313e+00, -2.512965886384746e+00, -2.512909281865070e+00, -2.461167753023771e+00, -2.468992509261950e+00, -2.485669947924050e+00, -2.493602096420382e+00, -2.518554829191696e+00, -2.388409167287032e+00, -2.518554829191695e+00, -2.502832086665101e+00, -7.666306333123929e-01, -7.281853661773873e-01, -8.203807668029204e-01, -8.197282238849244e-01, -6.888389521920659e-01, -7.193264855544887e-01, -7.242365843063902e-01, -7.477234038878163e-01, -7.957389865138983e-01, -7.218997254056609e-01, -7.957389865138982e-01, -7.574370644353799e-01, -1.421396789662725e-01, -1.427942847466901e-01, -2.185770450021085e-01, -1.932958160860027e-01, -1.356587492961808e-01, -1.378904144469369e-01, -2.500747214942251e+00, -2.499591006808787e+00, -1.427258388767106e-01, -1.376720904669095e-01, -1.427258388767106e-01, -1.376720904669095e-01, -3.372898068601349e-03, -6.107643442844857e-03, -7.535198883545655e-03, -7.649430457224353e-03, -5.632509520601530e-03, -5.963853916426531e-03, -1.064167922445976e-01, -7.287237426076942e-02, -5.756287587364441e-03, -7.895742874099037e-03, -5.756287587364441e-03, -7.895742874099040e-03, -7.323617474864581e-01, -7.350146448542207e-01, -7.346581553979725e-01, -7.372420523299514e-01, -7.363729307989975e-01, -7.392355634866835e-01, -7.375256424232208e-01, -7.357349019320539e-01, -7.369500300597750e-01, -7.398021319787411e-01, -7.369500300597751e-01, -7.360600380499925e-01, -7.135522447172058e-01, -7.157046132480590e-01, -6.401876334619375e-01, -6.085248255671443e-01, -6.701332758482339e-01, -6.450668837727702e-01, -6.912028210112870e-01, -6.934488816426867e-01, -6.815947429018571e-01, -6.839110829449709e-01, -6.815947429018571e-01, -6.613351032544494e-01, -8.647933392340439e-01, -8.385480030140465e-01, -2.420992474458588e-01, -2.437263974887282e-01, -3.234835382695789e-01, -3.076612369753741e-01, -4.210613710773398e-01, -4.419934041125665e-01, -3.705511966047279e-01, -3.707752466178371e-01, -3.705511966047279e-01, -3.682638064686961e-01, -5.834712012715301e-01, -5.888154839045912e-01, -4.274903677617903e-02, -4.304147865022525e-02, -9.053571339999843e-02, -9.275372404096087e-02, -4.286048199523108e-01, -4.387328628528281e-01, -1.185037509879662e-01, -1.181330958501457e-01, -1.185037509879661e-01, -1.181330958501457e-01, -1.069860921541458e-02, -1.108646502234328e-02, -2.028644221150480e-03, -2.033280547100133e-03, -2.368172093979974e-03, -2.518741249047828e-03, -8.608921620557378e-02, -8.747871808585103e-02, -5.451203474526494e-03, -7.238818905085712e-03, -5.451203474526489e-03, -4.158790303702353e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revtpss_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revtpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.357011690892506e-08, 0.000000000000000e+00, -1.357192062257044e-08, -1.357019598557744e-08, 0.000000000000000e+00, -1.357197776572642e-08, -1.357031897597079e-08, 0.000000000000000e+00, -1.357219047250376e-08, -1.356944634278008e-08, 0.000000000000000e+00, -3.734122852990424e-08, -1.357017721026828e-08, 0.000000000000000e+00, -3.734758720994928e-08, -3.734200959659545e-08, 0.000000000000000e+00, -3.734758720994928e-08, -1.442816958036371e-05, 0.000000000000000e+00, -9.533107945908544e-06, -1.443242340717438e-05, 0.000000000000000e+00, -1.442815923634565e-05, -1.451592895208751e-05, 0.000000000000000e+00, -1.453037614958676e-05, -1.448055999873477e-05, 0.000000000000000e+00, -1.447986424067700e-05, -1.442794626905105e-05, 0.000000000000000e+00, -1.455457851219132e-05, -9.534818896493310e-06, 0.000000000000000e+00, -1.455457851219132e-05, -2.982733336966233e-03, 0.000000000000000e+00, -3.039993633818913e-03, -2.971083166389053e-03, 0.000000000000000e+00, -6.304326798410481e-03, -6.519486639482552e-03, 0.000000000000000e+00, -6.632825253260751e-03, -6.559642391256147e-03, 0.000000000000000e+00, -2.958132273757939e-03, -3.014808953023130e-03, 0.000000000000000e+00, -2.742429654614329e-03, -6.163621378610596e-03, 0.000000000000000e+00, -7.025819503489864e-03, -3.632848410558702e-01, 0.000000000000000e+00, -1.111253718866297e+00, -3.678514307823294e-01, 0.000000000000000e+00, -1.068665138896693e+00, -2.622892654368363e-03, 0.000000000000000e+00, -8.540017273168433e-04, -1.527607490855436e+00, 0.000000000000000e+00, -1.684547812602664e+00, -9.993967408379852e-01, 0.000000000000000e+00, -1.753189983246773e+00, -9.993967408379855e-01, 0.000000000000000e+00, 3.648119322956061e-01, -7.497324628942482e+00, 0.000000000000000e+00, -7.525858113435221e+00, 6.339022362949779e+04, 0.000000000000000e+00, -7.871031151070328e+00, 6.026697184930097e+01, 0.000000000000000e+00, -3.646981690253443e+00, -5.492022383028793e+00, 0.000000000000000e+00, -5.548315469866582e+00, -7.123477347627113e+00, 0.000000000000000e+00, -1.219888671531163e+01, -7.123477347627113e+00, 0.000000000000000e+00, -1.219888671531163e+01, -1.685039569048680e-05, 0.000000000000000e+00, -1.686758763438650e-05, -1.700452049604375e-05, 0.000000000000000e+00, -1.701667901341137e-05, -1.686118625290890e-05, 0.000000000000000e+00, -1.687432937038924e-05, -1.699332614055588e-05, 0.000000000000000e+00, -1.700966473987538e-05, -4.775780637419837e-06, 0.000000000000000e+00, -1.694193647864524e-05, -1.692734967737648e-05, 0.000000000000000e+00, -4.780157244045140e-06, -1.195574164854309e-04, 0.000000000000000e+00, -1.199828691432753e-04, -1.200857592247795e-04, 0.000000000000000e+00, -1.205100976444512e-04, -1.190388990631996e-04, 0.000000000000000e+00, -1.195692191064735e-04, -1.193941526860942e-04, 0.000000000000000e+00, -1.199840458433544e-04, -1.204344726995717e-04, 0.000000000000000e+00, -7.774873150987867e-05, -1.204344726995717e-04, 0.000000000000000e+00, -1.203609451123033e-04, -3.061098287093741e-02, 0.000000000000000e+00, -1.764266171864598e-02, -4.968322727691384e-02, 0.000000000000000e+00, -5.221233106058403e-02, -2.715471732892508e-02, 0.000000000000000e+00, -2.897070216176954e-02, -3.615252917090146e-02, 0.000000000000000e+00, -3.801624991836672e-02, -3.308625557110011e-02, 0.000000000000000e+00, -1.851060983326883e-02, -3.308625557110011e-02, 0.000000000000000e+00, -3.366527647367928e-02, -2.145376703016774e+00, 0.000000000000000e+00, -2.123249427746649e+00, -1.781787468402972e-01, 0.000000000000000e+00, -8.128331258219238e-01, -2.309643187214243e+00, 0.000000000000000e+00, -2.346865088838464e+00, -3.368882079676719e-04, 0.000000000000000e+00, -3.378331577807287e-04, -2.390849625100926e+00, 0.000000000000000e+00, -2.830210238065399e+00, -2.390849625100928e+00, 0.000000000000000e+00, -2.830210238065399e+00, 1.855146305672912e+06, 0.000000000000000e+00, -3.676156333097803e+00, -5.209582866771991e+00, 0.000000000000000e+00, -4.592058784974118e+00, -3.751528694312213e+01, 0.000000000000000e+00, -4.117965419772263e+01, -3.371614863862424e+00, 0.000000000000000e+00, 5.913171633066981e+00, -7.069076348383058e+00, 0.000000000000000e+00, -2.244614438707629e+01, -7.069076348383063e+00, 0.000000000000000e+00, -2.244614438707627e+01, -4.436469736973814e-01, 0.000000000000000e+00, -4.503463245840108e-01, -2.162663159582331e-01, 0.000000000000000e+00, -2.180296717731115e-01, -5.454198204864402e-02, 0.000000000000000e+00, -5.483075518441333e-02, -6.415442944509357e-02, 0.000000000000000e+00, -3.282601896024359e-01, -5.886417282626448e-02, 0.000000000000000e+00, -5.917198915626807e-02, -5.886417282626448e-02, 0.000000000000000e+00, -2.953092223056415e-01, -4.319618268433433e-01, 0.000000000000000e+00, -4.398584974469554e-01, -4.848608686228460e-02, 0.000000000000000e+00, -3.019386160106483e-02, -6.477957548701030e-02, 0.000000000000000e+00, -3.219661316238667e-02, -1.041237633444476e-01, 0.000000000000000e+00, -1.037939673797031e-01, -7.964486986306769e-02, 0.000000000000000e+00, -7.967611613209874e-02, -7.964486986306774e-02, 0.000000000000000e+00, -3.319125478141665e-02, -3.160735290122181e-02, 0.000000000000000e+00, -1.339381164346653e-02, -4.351771721881702e-01, 0.000000000000000e+00, -4.281832866052022e-01, -1.072107075926722e-01, 0.000000000000000e+00, -2.470339708644641e-01, -7.618135632101491e-02, 0.000000000000000e+00, -1.172282247601125e-01, -1.712417998470547e-01, 0.000000000000000e+00, -1.721468751684456e-01, -1.712417998470549e-01, 0.000000000000000e+00, -9.641671929352648e-02, -5.183274215175929e-02, 0.000000000000000e+00, -5.277320785905721e-02, 6.507877007919910e+01, 0.000000000000000e+00, 6.330400154375226e+01, -3.035442413197863e+00, 0.000000000000000e+00, -3.129435813811927e+00, -1.696535040321732e-01, 0.000000000000000e+00, -1.929582318069371e-01, -3.738599919653697e+00, 0.000000000000000e+00, -4.361446365871058e+00, -3.738599919653697e+00, 0.000000000000000e+00, -4.361446365871065e+00, 1.823334249559227e+04, 0.000000000000000e+00, 1.580662960942135e+04, -5.990152556412363e+00, 0.000000000000000e+00, -5.963814472930235e+00, 7.633728000942254e+06, 0.000000000000000e+00, 5.965035348520535e+06, 2.208456585097797e+00, 0.000000000000000e+00, 1.872473355321434e+00, -1.824398290975410e+01, 0.000000000000000e+00, -2.327155000184673e+01, -1.824398290975413e+01, 0.000000000000000e+00, 8.013741142614251e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revtpss_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revtpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.552941764330366e-04, 1.553264930670136e-04, 1.552983892909297e-04, 1.553295459531124e-04, 1.553099984338776e-04, 1.553466927600447e-04, 1.552627749804251e-04, 2.957671003902904e-03, 1.552969051773238e-04, 2.958322997678088e-03, 2.958002610527188e-03, 2.958322997678088e-03, 4.271273778914968e-03, -5.307793282169055e-04, 4.273287106383628e-03, 4.270993714616357e-03, 4.312629391439358e-03, 4.319662878150225e-03, 4.297921230070133e-03, 4.297914333879218e-03, 4.267474401369406e-03, 4.333482176278700e-03, -5.312573967003417e-04, 4.333482176278700e-03, -1.932551212611044e-03, -2.022212770953941e-03, -1.907558899976996e-03, 6.425789657818021e-03, 4.894753718493167e-03, 4.708117118340575e-03, 5.346710586597312e-03, -1.760626211686063e-03, -2.069636816706464e-03, -1.290809578402624e-03, 6.651076453300174e-03, 4.047338060796919e-03, -2.614767971174270e-03, 1.146776874933194e-02, -2.845396353190218e-03, 1.287786494403659e-02, 1.390617632538021e-03, -6.756851490556520e-04, 9.875203461836928e-04, 1.433858813754451e-03, 8.014249315327163e-03, 1.128231516478289e-04, 8.014249315327161e-03, -9.553298294149855e-05, 2.597515726636089e-10, 3.545146447371166e-10, -6.165232486226470e-08, 4.998597871929820e-10, -5.233692915122582e-06, 1.042077835847525e-06, 1.267237069315727e-11, 1.182947758970423e-11, 1.355410022109987e-10, 1.802480326476382e-11, 1.355410022109987e-10, 1.802480326476311e-11, 1.906585157103911e-02, 1.907155818478704e-02, 1.924554237702827e-02, 1.924525065222287e-02, 1.907833267277874e-02, 1.907934030621382e-02, 1.923239741135638e-02, 1.923701291958445e-02, 7.818535198944901e-04, 1.915818312960485e-02, 1.915563923185938e-02, 7.820205306940467e-04, 5.488294134694014e-03, 5.525739885179180e-03, 5.821234668817434e-03, 5.849885996192130e-03, 5.198151572260233e-03, 5.315095759199803e-03, 5.480432566435478e-03, 5.604981191058459e-03, 5.906268753602647e-03, -1.111685009120792e-03, 5.906268753602647e-03, 5.730154523636871e-03, 5.017817520052741e-02, 1.310973577905514e-03, 1.043480884607780e-01, 1.096379666116292e-01, 2.949036301757733e-02, 3.773003932072511e-02, 4.966896553136127e-02, 5.837948832891060e-02, 6.170418772916592e-02, 1.506538901738678e-03, 6.170418772916595e-02, 5.344226169354273e-02, 1.224359218739065e-04, 1.282516517145061e-04, -1.010256942926096e-03, 3.030632155915132e-03, 7.065900963304866e-05, 1.046590573438434e-04, 1.949220959179343e-02, 1.952097388232827e-02, 4.199299657700473e-04, 9.991433980064107e-04, 4.199299657700477e-04, 9.991433980064122e-04, -2.515295280612425e-09, 1.994974317832331e-12, 9.650953681979911e-12, 8.608874887795614e-12, 4.368093705795182e-11, 6.698176010192000e-11, 1.290731762510862e-05, -3.213330466839065e-05, 3.959477847012140e-12, 1.100560641346964e-10, 3.959477847011969e-12, 1.100560641345800e-10, 7.117872986465809e-01, 7.309726286090632e-01, 3.420444822029336e-01, 3.487992979554880e-01, 7.770601375195842e-03, 7.748398622941251e-03, 7.809532204781529e-03, 5.295971851104252e-01, 7.792056049999684e-03, 7.768074811866926e-03, 7.792056049999684e-03, 4.754227190318520e-01, 6.387007428095184e-01, 6.568448869228931e-01, 4.486452673586448e-02, -1.059628295781080e-03, 7.208586688929848e-02, 3.331342882063361e-03, 1.311324804188364e-01, 1.320565352552049e-01, 9.469909793938261e-02, 9.577212306835201e-02, 9.469909793938261e-02, 5.161503336056346e-03, 7.686703352923248e-02, 4.486824626146768e-03, 6.607666465014016e-03, 6.752330956749496e-03, -3.817342428739732e-03, 1.269859918935575e-02, -6.358275600470665e-03, 2.999390625307666e-02, 2.126491245501087e-02, 2.153416947570645e-02, 2.126491245501087e-02, -6.171297370433469e-03, 3.404299211523655e-02, 3.614480667061162e-02, -5.203358532737745e-06, -5.205477369600173e-06, 2.713444130868424e-06, 3.457479653210132e-06, 4.354441425965725e-02, 5.616837450819778e-02, 6.260861544864560e-05, 1.229435474992970e-04, 6.260861544864579e-05, 1.229435474992970e-04, -7.303752247875026e-08, -8.011244158602191e-08, 1.671741735855512e-14, 1.679794728639374e-14, -3.619163373365160e-09, -4.613342941488077e-09, -7.258203657012515e-05, -8.651110951634446e-05, 1.253050487792184e-11, 7.507114568890597e-11, 1.253050487795700e-11, -2.751456230995746e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
