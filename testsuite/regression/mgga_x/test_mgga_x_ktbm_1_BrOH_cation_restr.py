
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_1_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.081908851956119e+01, -2.081918600491941e+01, -2.081962145853264e+01, -2.081817366875510e+01, -2.081893193921079e+01, -2.081893193921079e+01, -3.151210325690728e+00, -3.151259560332418e+00, -3.152620397875409e+00, -3.152354240557250e+00, -3.152055124280531e+00, -3.876922420301196e+00, -6.028971114071298e-01, -7.497835972769856e-01, -7.284056099493299e-01, -7.351938663590908e-01, -7.337458837244405e-01, -7.337458837244405e-01, -1.923787672144975e-01, -1.955070234193990e-01, -7.220723550402640e-01, -1.433499472963927e-01, -1.621812374980882e-01, -1.621812374980882e-01, -6.451342407105184e-03, -6.790356704276356e-03, -3.751286649511907e-02, -3.725697332314907e-03, -4.681690894484019e-03, -4.681690894484019e-03, -5.579864481507320e+00, -5.579965966905853e+00, -5.579862361078263e+00, -5.182477056729753e+00, -5.579919225796503e+00, -5.579919225796503e+00, -1.758143471453806e+00, -1.773312708131751e+00, -1.747191674203323e+00, -1.760362423214108e+00, -1.771962599761629e+00, -2.202950519352683e+00, -6.454313323258829e-01, -6.880781318288580e-01, -6.033543869319737e-01, -6.205309045940974e-01, -6.537058574705915e-01, -5.623959276724646e-01, -9.065275703706389e-02, -1.906678355871759e-01, -8.410399867564883e-02, -2.100619599037265e+00, -1.163312676957550e-01, -1.163312676957550e-01, -2.728896628043833e-03, -3.642192628760792e-03, -2.785023061321924e-03, -5.711156800663548e-02, -3.184861518632660e-03, -3.355080920380280e-03, -6.215967482444468e-01, -6.218701207246566e-01, -6.009533397990384e-01, -6.217041253244711e-01, -6.217477614852469e-01, -6.217477614852471e-01, -6.052699482978108e-01, -5.451307611419191e-01, -5.641903386180569e-01, -5.810018711833441e-01, -5.726288890877002e-01, -5.074508769825048e-01, -7.252085926830447e-01, -2.019161973085134e-01, -2.940214799384457e-01, -3.121157878436639e-01, -3.388444618610855e-01, -3.388444618610854e-01, -4.117880978248805e-01, -3.590071976362873e-02, -4.899177756640356e-02, -3.730302382075166e-01, -7.208159122036152e-02, -7.794559743588722e-02, -9.105024496674531e-03, -9.735680609456014e-04, -2.043577990913279e-03, -7.315249395326073e-02, -3.104500859670995e-03, -3.104500859670993e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_1_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.987848041944782e+01, -2.987858175385357e+01, -2.987905071991239e+01, -2.987754382897366e+01, -2.987833079950322e+01, -2.987833079950322e+01, -4.471580471943246e+00, -4.471767558455689e+00, -4.476772163504796e+00, -4.475156372892259e+00, -4.474864733741566e+00, -4.301848414960276e+00, -7.728527017877782e-01, -8.720222487821302e-01, -8.586615099056004e-01, -8.613309437110309e-01, -8.608584815502149e-01, -8.608584815502149e-01, -2.322998941891055e-01, -2.351168011382375e-01, -8.917032426856858e-01, -1.811299566031469e-01, -2.019678956541117e-01, -2.019678956541118e-01, -8.369668274515667e-03, -8.809409923401502e-03, -4.858962663111994e-02, -4.833782589283743e-03, -6.074001546762548e-03, -6.074001546762548e-03, -6.842869471143819e+00, -6.847035908072280e+00, -6.843099471207112e+00, -7.314039153374027e+00, -6.844961288445859e+00, -6.844961288445859e+00, -2.433907246325152e+00, -2.468355454972541e+00, -2.407988067518395e+00, -2.438538890867485e+00, -2.465725220769586e+00, -2.453645420628986e+00, -7.295347354986826e-01, -8.226479360217546e-01, -6.701742121924392e-01, -7.021566751658730e-01, -7.449356698852124e-01, -8.184036865259834e-01, -1.175925291732608e-01, -2.370668810680458e-01, -1.094617830208470e-01, -2.406826683052057e+00, -1.479589191036793e-01, -1.479589191036794e-01, -3.638430378239011e-03, -4.725451617286803e-03, -3.613300776990823e-03, -7.519258083606484e-02, -4.246170389215292e-03, -4.352909197598784e-03, -8.092856168360490e-01, -7.913274640567348e-01, -8.242384659347478e-01, -8.027749316443191e-01, -8.001511651211209e-01, -8.001511651211212e-01, -7.855144797899040e-01, -6.083264209291946e-01, -6.465380873923388e-01, -6.965644972692500e-01, -6.696018151902409e-01, -7.334918831312864e-01, -8.518853289108492e-01, -2.495073945389244e-01, -3.460277952929141e-01, -4.308749197241218e-01, -3.857895906583789e-01, -3.857895906583788e-01, -5.869101354075091e-01, -4.650748324627524e-02, -6.339234809271174e-02, -4.139619967428645e-01, -9.389775004975734e-02, -1.002240319322487e-01, -1.181212344453114e-02, -1.263146727885583e-03, -2.651397100914261e-03, -9.413199950413746e-02, -4.027802234343358e-03, -4.027802234343358e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_1_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.412212963135753e-08, -1.412205212001897e-08, -1.412162669121924e-08, -1.412278687269928e-08, -1.412219038869349e-08, -1.412219038869349e-08, -1.345270062458552e-05, -1.345481839446129e-05, -1.350966332357303e-05, -1.348262049964324e-05, -1.349112628121990e-05, -1.377546051844245e-05, -5.045182362658606e-03, -4.697492903627662e-03, -4.300423651588767e-03, -4.561604640000804e-03, -4.499014080769675e-03, -4.499014080769675e-03, -5.698696221035088e-01, -5.808972357428446e-01, -1.384183675407482e-03, -3.988097265348639e-01, -4.785845080318403e-01, -4.785845080318401e-01, -9.094792864929555e+01, -8.386711996113408e+01, -2.162910555142780e+00, -2.325769352828851e+02, -1.740429236925204e+02, -1.740429236925204e+02, -4.348583811296045e-06, -4.348699782202429e-06, -4.348615839683063e-06, -4.227537959528700e-06, -4.348632197835705e-06, -4.348632197835705e-06, -1.159079824903222e-04, -1.161746954034624e-04, -1.154304486369760e-04, -1.158139580874308e-04, -1.162874317546454e-04, -1.170917244605319e-04, -2.205513948628024e-02, -1.863502123936980e-02, -2.529341911326508e-02, -2.591313882632150e-02, -2.148337853990751e-02, -2.064549674360215e-02, -7.133681854448859e-01, -2.656168651819358e-01, -8.137018146808809e-01, -2.040483272181228e-04, -5.944176466637371e-01, -5.944176466637372e-01, -5.961614562160477e+02, -2.287719355617461e+02, -1.113730877446995e+03, -1.735182031791603e+00, -8.720875911154722e+02, -4.752810047786795e+02, -2.798794582638988e-02, -2.814742557973476e-02, -2.769426041799279e-02, -2.805827396504340e-02, -2.808222297570217e-02, -2.808222297570217e-02, -3.117289868678997e-02, -4.043155268141798e-02, -3.922561883013205e-02, -3.671386960519962e-02, -3.814351134530464e-02, -3.671404171683911e-02, -1.489886998644711e-02, -2.351413222557013e-01, -1.662891057977570e-01, -1.145786624731370e-01, -1.507768985312362e-01, -1.507768985312363e-01, -4.794130344132237e-02, -2.356819058624917e+00, -1.289309936621828e+00, -1.673618665494661e-01, -1.437567335296984e+00, -9.277805328744501e-01, -3.163399324671634e+01, -3.537886142192151e+03, -1.360703769399222e+03, -1.060007804539635e+00, -6.627280087271457e+02, -6.627280087271463e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_1_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.242844530537761e-03, 1.242859327875943e-03, 1.242916689998393e-03, 1.242697914528698e-03, 1.242813734819330e-03, 1.242813734819330e-03, 2.029673795630781e-03, 2.031109936646085e-03, 2.069041977751418e-03, 2.053500943415909e-03, 2.055379204872771e-03, 8.161118670347080e-03, -2.959701360667287e-03, 2.374174903064622e-02, 2.057335876974765e-02, 2.211712963467318e-02, 2.175770612879343e-02, 2.175770612879343e-02, 5.305376193202151e-02, 5.624413649620779e-02, -2.883100594666468e-03, 1.679691136749882e-02, 2.851238635553972e-02, 2.851238635553967e-02, 3.168548971361936e-04, 3.407749981172371e-04, 1.523708446420029e-03, 1.559059742284301e-04, 2.315750070939645e-04, 2.315750070939645e-04, 6.987149264222359e-03, 6.988189998015985e-03, 6.987219512832659e-03, 5.863013400809879e-03, 6.987667480264152e-03, 6.987667480264152e-03, 1.728832198600569e-03, 2.057687449298583e-03, 1.477854870139372e-03, 1.765544528732086e-03, 2.039213223997039e-03, 1.316543953567516e-02, 5.639527062848367e-02, 5.612804804422804e-02, 5.521778546293413e-02, 5.880497473125169e-02, 5.658444474307212e-02, 3.193726583587677e-02, -1.789438936900536e-03, 2.563444219362390e-02, -1.485062704060493e-03, 1.775493619259452e-02, 1.344689290908775e-02, 1.344689290908764e-02, -5.718582345251258e-08, 1.432672012404625e-04, 3.119091225342047e-04, -5.949513523535420e-04, -3.603897310231612e-07, 2.326987350263836e-04, 6.333666872838900e-02, 6.315967112531128e-02, 5.935360690872477e-02, 6.328112194887547e-02, 6.325581688323474e-02, 6.325581688323478e-02, 6.502853250456152e-02, 6.378206222714029e-02, 6.612093216893751e-02, 6.655800151294809e-02, 6.653003508845488e-02, 4.552548967282068e-02, 5.271066151958988e-02, -1.054477584766202e-02, 5.212036795778784e-02, 8.806841739507076e-03, 6.661549586848299e-02, 6.661549586848284e-02, 1.754106596752453e-02, 1.452474957796712e-03, 2.051685349370441e-03, 8.725543760978714e-02, -1.606846020496630e-03, 6.222678505903493e-03, 3.099896762240737e-04, 4.230095720848778e-05, 1.504966117233283e-04, 5.858605858177083e-03, 2.570694967901877e-04, 2.570694967901909e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
