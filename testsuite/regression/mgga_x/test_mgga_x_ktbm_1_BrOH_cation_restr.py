
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_1_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.294681428557312e+01, -2.294686607689624e+01, -2.294719812993782e+01, -2.294642894417212e+01, -2.294681745233278e+01, -2.294681745233278e+01, -3.468664240714235e+00, -3.468703116241671e+00, -3.470001538452595e+00, -3.471808662054898e+00, -3.470406014613831e+00, -3.470406014613831e+00, -6.555728909137395e-01, -6.552382900723766e-01, -6.479138358634221e-01, -6.557615194089442e-01, -6.533327891026360e-01, -6.533327891026360e-01, -1.903435726777054e-01, -1.929325126845474e-01, -7.497394707973773e-01, -1.403934697931795e-01, -1.588887666321610e-01, -1.588887666321611e-01, -6.449396931425326e-03, -6.786601970526753e-03, -3.734528957281572e-02, -3.710539337995350e-03, -4.670102820519894e-03, -4.670102820519896e-03, -5.577250826507202e+00, -5.577382771906256e+00, -5.577303076999335e+00, -5.577417757499983e+00, -5.577293829164617e+00, -5.577293829164617e+00, -2.135277695010120e+00, -2.156806863810295e+00, -2.132188398204703e+00, -2.151770293352245e+00, -2.148586692166223e+00, -2.148586692166223e+00, -6.084639338135566e-01, -6.439561881586902e-01, -5.487738761614411e-01, -5.498645139263701e-01, -6.182204550489657e-01, -6.182204550489657e-01, -9.746522674856378e-02, -1.889201166349841e-01, -9.008119860077565e-02, -1.871195082577871e+00, -1.151592140305130e-01, -1.151592140305131e-01, -2.832894476699695e-03, -3.609735720584089e-03, -2.772053412510624e-03, -6.051872556672590e-02, -3.328475602599254e-03, -3.328475602599254e-03, -6.159304718280583e-01, -6.164355751817895e-01, -6.162696087139615e-01, -6.161167987394390e-01, -6.161916051179568e-01, -6.161916051179569e-01, -5.943644482982156e-01, -5.403995711697808e-01, -5.573567391535666e-01, -5.721729721359416e-01, -5.643425000591390e-01, -5.643425000591390e-01, -6.683053488032850e-01, -2.411582166858511e-01, -2.878965049074920e-01, -3.635244143231234e-01, -3.265065475889075e-01, -3.265065475889075e-01, -4.834902535522170e-01, -3.582173562160195e-02, -4.870663529843131e-02, -3.485762301287799e-01, -7.730309231524900e-02, -7.730309231524901e-02, -9.019712049072101e-03, -9.467723363782781e-04, -2.039024780456695e-03, -7.278633921225122e-02, -3.086204289663138e-03, -3.086204289663136e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_1_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.762385889164789e+01, -2.762398329112113e+01, -2.762445725412755e+01, -2.762260661910767e+01, -2.762358756321890e+01, -2.762358756321890e+01, -4.387965022152533e+00, -4.388065246573263e+00, -4.390730425109447e+00, -4.389545881331165e+00, -4.389428955619183e+00, -4.389428955619183e+00, -8.024150161362229e-01, -8.015881401807865e-01, -7.850149767295778e-01, -7.938727961073931e-01, -7.914082197662640e-01, -7.914082197662640e-01, -2.296365722486396e-01, -2.318661229910728e-01, -9.176580542064704e-01, -1.765050665634009e-01, -1.969234838808000e-01, -1.969234838808002e-01, -8.367495728659625e-03, -8.805230166872137e-03, -4.839305369042991e-02, -4.817833023095991e-03, -6.061505803087893e-03, -6.061505803087896e-03, -6.846011730409198e+00, -6.850146015295254e+00, -6.846176627811451e+00, -6.849827205205433e+00, -6.848119939230600e+00, -6.848119939230600e+00, -2.436867531522833e+00, -2.452480785056189e+00, -2.427187671871209e+00, -2.440587391443650e+00, -2.450675891127743e+00, -2.450675891127743e+00, -7.564554390059879e-01, -8.709327044581624e-01, -6.905054712306974e-01, -7.544109779829190e-01, -7.737706383044135e-01, -7.737706383044135e-01, -1.248981316509259e-01, -2.343508839176566e-01, -1.156371421677844e-01, -2.602534169470888e+00, -1.460993711951470e-01, -1.460993711951472e-01, -3.691421972995554e-03, -4.693512760146544e-03, -3.599756842850751e-03, -7.814632995710384e-02, -4.326360888213501e-03, -4.326360888213504e-03, -8.167180923658638e-01, -7.982944708569365e-01, -8.046928665230699e-01, -8.100535247158618e-01, -8.073658546178748e-01, -8.073658546178750e-01, -7.997287793712671e-01, -6.107556462885679e-01, -6.524386068725709e-01, -7.064543453837454e-01, -6.779040803075050e-01, -6.779040803075050e-01, -9.095061897515381e-01, -2.922935693473659e-01, -3.398424475845505e-01, -4.315658697883408e-01, -3.791963011530374e-01, -3.791963011530373e-01, -5.654705546743021e-01, -4.641307221819480e-02, -6.304415989621728e-02, -4.210165555138757e-01, -9.929425571751105e-02, -9.929425571751106e-02, -1.172807696216337e-02, -1.242065752310430e-03, -2.646479483012517e-03, -9.359982413819164e-02, -4.009028096335164e-03, -4.009028096335167e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_1_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.460101577021221e-08, -1.460092898394094e-08, -1.460047846550779e-08, -1.460177692995522e-08, -1.460110569020445e-08, -1.460110569020445e-08, -1.362993554980907e-05, -1.363217632241089e-05, -1.369034033408549e-05, -1.366275973168499e-05, -1.367103376442667e-05, -1.367103376442667e-05, -4.968081167752704e-03, -4.953155087325447e-03, -4.588113010242235e-03, -4.823928494729983e-03, -4.768958568339757e-03, -4.768958568339757e-03, -5.769050690120185e-01, -5.890973515734287e-01, -1.354874258293351e-03, -4.285495545307537e-01, -5.009567943223214e-01, -5.009567943223213e-01, -9.153933827471965e+01, -8.486392102718361e+01, -2.329582196976347e+00, -2.525245755734298e+02, -1.832137527120322e+02, -1.832137527120324e+02, -4.347821422237434e-06, -4.347944690003057e-06, -4.347869218521044e-06, -4.347975434868232e-06, -4.347865574456769e-06, -4.347865574456769e-06, -1.165097222918962e-04, -1.171504494590561e-04, -1.156737204077125e-04, -1.164100841329085e-04, -1.172586940548098e-04, -1.172586940548098e-04, -2.176909497099450e-02, -1.821276899097431e-02, -2.501434166121529e-02, -2.517797478126838e-02, -2.118893522129994e-02, -2.118893522129994e-02, -5.094683942359597e-01, -2.710939888921399e-01, -5.753307125018371e-01, -1.977121984877916e-04, -6.232731257349654e-01, -6.232731257349655e-01, -4.174977973893134e+02, -2.703213731331469e+02, -1.222461770894974e+03, -1.156549402265515e+00, -5.525201815281271e+02, -5.525201815281264e+02, -2.787413821641257e-02, -2.804383943057449e-02, -2.799656644185581e-02, -2.794801208289099e-02, -2.797340075264150e-02, -2.797340075264150e-02, -3.092328746761749e-02, -4.038170535391718e-02, -3.910437021866553e-02, -3.652114320365344e-02, -3.797678464468585e-02, -3.797678464468584e-02, -1.451544804975304e-02, -2.037135132164603e-01, -1.686843685206286e-01, -1.152327732861939e-01, -1.523903082027880e-01, -1.523903082027880e-01, -4.895446543891536e-02, -2.448897608676114e+00, -1.404203134702322e+00, -1.664311293013312e-01, -9.957320048584949e-01, -9.957320048584957e-01, -3.759907879442864e+01, -5.323268373427411e+03, -1.425588175513448e+03, -1.110361192359639e+00, -7.439089584669905e+02, -7.439089584669919e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_1_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.638833015172313e-03, 1.638833814434814e-03, 1.638848714571501e-03, 1.638837773727143e-03, 1.638841877161657e-03, 1.638841877161657e-03, 4.621701642778731e-03, 4.623070339441584e-03, 4.660863892215592e-03, 4.662067604909463e-03, 4.655315639586559e-03, 4.655315639586559e-03, 6.452496660750578e-03, 6.440166391820584e-03, 6.402045573699639e-03, 7.724689884047473e-03, 7.284329171961908e-03, 7.284329171961908e-03, 4.903611585830151e-02, 5.107437432235440e-02, -3.660315411768232e-04, 1.300673343328084e-02, 2.318274716736783e-02, 2.318274716736783e-02, 3.162454008625923e-04, 3.395465123733202e-04, 1.450433202713076e-03, 1.508793180207329e-04, 2.274013317743844e-04, 2.274013317743891e-04, 6.979490038919418e-03, 6.980639990147394e-03, 6.979720705150964e-03, 6.980727252192024e-03, 6.979984034825200e-03, 6.979984034825200e-03, 1.147269787418304e-02, 1.189605278190053e-02, 1.147908752466337e-02, 1.187968288023926e-02, 1.170367640984441e-02, 1.170367640984441e-02, 4.553006270320419e-02, 4.691859578692700e-02, 3.582673342701375e-02, 3.686235013204496e-02, 4.670013720146293e-02, 4.670013720146293e-02, 5.496319536690688e-03, 2.351973359625788e-02, 4.840176899145699e-03, 1.180921678755816e-02, 1.184765864384488e-02, 1.184765864384477e-02, 8.301583901405926e-05, 1.307445582355174e-04, 3.000128429174002e-04, 2.941517062705522e-03, 2.152367757515998e-04, 2.152367757516073e-04, 6.235724118655047e-02, 6.209080472875919e-02, 6.218949740170763e-02, 6.226720095256415e-02, 6.222820827975348e-02, 6.222820827975351e-02, 6.301141800143116e-02, 6.171069830240148e-02, 6.357876569983524e-02, 6.394902869838212e-02, 6.375201857589399e-02, 6.375201857589401e-02, 4.131223330823773e-02, 3.602746153873104e-02, 4.540884627127875e-02, 5.032793593725633e-02, 5.396727226647564e-02, 5.396727226647563e-02, 5.269622421386981e-02, 1.420676319531090e-03, 1.907947260477343e-03, 6.426958279014770e-02, 5.533192248299022e-03, 5.533192248298993e-03, 2.806418236958237e-04, 2.456445279214215e-05, 1.481131595332003e-04, 5.470414583817844e-03, 2.439145261290464e-04, 2.439145261290541e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
