
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mvsb_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvsb", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.393820540327419e+01, -2.393841970929657e+01, -2.393933380218753e+01, -2.360026241213258e+01, -2.360146446014387e+01, -2.326527074440046e+01, -3.396197129603816e+00, -3.780450307776596e+00, -3.780844773738576e+00, -3.781028100078362e+00, -3.780615627225890e+00, -3.396691993038968e+00, -6.023513096139907e-01, -6.632330307666749e-01, -7.014915483441557e-01, -6.498644268303346e-01, -5.923040589028246e-01, -7.083237213034043e-01, -1.725511653891052e-01, -1.755021492179913e-01, -7.646161001265748e-01, -1.293236421547025e-01, -1.737363904548215e-01, -1.748777040286053e-01, -1.465279393260274e-03, -3.466560181439731e-03, -2.509568137485514e-02, -6.168407343038872e-04, -1.067537858738764e-03, -1.067537858738764e-03, -5.671917239341434e+00, -5.672969464964183e+00, -5.671969739342094e+00, -5.672898581076308e+00, -5.913379654612632e+00, -5.913145168642912e+00, -2.125136081274231e+00, -2.141110489868782e+00, -2.113417808471917e+00, -2.127574427995643e+00, -1.934551711658141e+00, -2.139646311627539e+00, -6.215879836665568e-01, -6.942835802536730e-01, -5.908762692912558e-01, -6.146949596519597e-01, -6.347292976412486e-01, -6.499574897247514e-01, -7.658098880114811e-02, -1.692361919710546e-01, -6.883168242710314e-02, -2.090219271882422e+00, -1.012714828178910e-01, -1.012714828178910e-01, -1.367722093155434e-03, -5.871132625514931e-04, -5.112392783250475e-04, -4.589519555820830e-02, -6.573182461785457e-04, -6.573182461785458e-04, -6.423440878051423e-01, -6.386432264818629e-01, -6.592002653606324e-01, -6.485455817465240e-01, -6.575230879719327e-01, -6.490702131296915e-01, -6.249295228130181e-01, -4.756905501467504e-01, -5.513215039894253e-01, -5.867314254092435e-01, -5.738274222521131e-01, -5.725558864880895e-01, -7.310527143733484e-01, -2.328465822573716e-01, -2.608510518623532e-01, -3.418185875830415e-01, -3.273798435976433e-01, -2.982770067299116e-01, -4.929062329107706e-01, -3.108274177813653e-02, -2.766376490223020e-02, -3.644648121894345e-01, -5.846594091981196e-02, -5.846594091981197e-02, -7.901219040620766e-03, -8.319565876913940e-05, -1.775794759238002e-03, -6.286751517260551e-02, -5.921307906732737e-04, -2.239144764079463e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mvsb_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvsb", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.984932261181206e+01, -3.985227994884868e+01, -3.984989314751551e+01, -3.985269349962068e+01, -3.985157777078515e+01, -3.985514439152352e+01, -3.984516574120376e+01, -3.442951539880142e+01, -3.984968139537690e+01, -3.442885515498725e+01, -3.442981926231629e+01, -3.442885515498725e+01, -3.294291986851354e+00, -3.668804726713863e+00, -3.293031325831281e+00, -3.294459789636623e+00, -3.268060720311027e+00, -3.263533595330424e+00, -3.277516464772238e+00, -3.277528391379657e+00, -3.296564959531232e+00, -3.254613011470407e+00, -3.668521658043605e+00, -3.254613011470407e+00, -7.698465645903833e-01, -7.712472158471099e-01, -7.691158124950641e-01, -8.417134085278104e-01, -8.387711382110166e-01, -8.356847333926518e-01, -8.363559726640237e-01, -7.604013971531686e-01, -7.760694225731773e-01, -7.408686477856036e-01, -8.457652067962250e-01, -8.254767718797635e-01, -2.011728240543381e-01, -2.332642161330108e-01, -2.032621958462353e-01, -2.352985759485068e-01, -1.059422094589418e+00, -9.379106164540696e-01, -1.993830774169964e-01, -1.999019606076503e-01, -2.398932869146658e-01, -1.404020137673534e-01, -2.398932869146657e-01, -1.168056503262430e-01, -2.578391798656957e-03, -2.825796705181104e-03, -7.572684624084268e-03, -3.085594634913634e-03, -4.206077545086808e-02, -3.622918966928621e-02, -1.155572534009560e-03, -1.128244170644151e-03, -2.158515372583182e-03, -9.909025413544280e-04, -2.158515372583182e-03, -9.909025413544280e-04, -7.998157431279358e+00, -7.996207929313943e+00, -7.994299969397195e+00, -7.992479378629973e+00, -7.997873359191796e+00, -7.996029549356199e+00, -7.994566700092311e+00, -7.992645620073214e+00, -8.190532210617603e+00, -7.994336915870488e+00, -7.996225261576336e+00, -8.189339913701984e+00, -2.160783278547917e+00, -2.156596442822411e+00, -2.133520711395928e+00, -2.129658839430155e+00, -2.181260230786663e+00, -2.172118333163483e+00, -2.161934915340971e+00, -2.150886027449882e+00, -2.125044490709815e+00, -2.131578221069903e+00, -2.125044490709814e+00, -2.139983417657560e+00, -1.679977111565162e+00, -9.065848658309313e-01, -1.019267881698129e+00, -1.012806666422488e+00, -4.789863831805473e-01, -1.340501358892816e-01, -2.276455205810427e+00, -1.243489217181236e+00, -1.177017082575780e+00, -9.020797716991800e-01, -1.177017082575780e+00, -1.437094513969561e+00, -1.342897264870198e-01, -1.358912040648610e-01, -2.079555314602991e-01, -2.501759431157475e-01, -1.177504189106294e-01, -1.268461315216691e-01, -3.719074655929132e+00, -3.714509514978141e+00, -1.596969994328874e-01, -1.686928395906929e-01, -1.596969994328874e-01, -1.686928395906929e-01, -3.259090542083284e-03, -7.565067753986684e-04, -1.083448530618979e-03, -1.090795119069827e-03, -8.967267529981878e-04, -9.887722637765179e-04, -7.125551602791566e-02, -7.024385983158940e-02, -7.512421653411490e-04, -1.397103162888071e-03, -7.512421653411490e-04, -1.397103162888071e-03, -8.644036271263633e-01, -8.674426410330248e-01, -8.710264620091049e-01, -8.738797228669073e-01, -8.336668013038321e-01, -8.378028227757102e-01, -8.409017472300315e-01, -8.694665520662646e-01, -8.374605330088812e-01, -8.414125409199755e-01, -8.374605330088813e-01, -8.703703359317611e-01, -8.426402216674714e-01, -8.450744358489649e-01, 9.553900752074254e-02, -4.901775017757178e-01, -1.003602024368234e+00, -8.359880934918175e-01, -8.532390073725301e-01, -8.551003975850996e-01, -8.918164361290665e-01, -8.914106428185519e-01, -8.918164361290666e-01, -9.212170641370597e-01, -1.123003687459539e+00, -1.202408292523608e+00, -2.953090458604659e-01, -2.964934555279310e-01, -3.040302583398471e-01, -3.378419851406190e-01, -3.784525528029708e-01, -3.876677623840096e-01, -3.649686969611246e-01, -3.643304471483763e-01, -3.649686969611244e-01, -3.404123081307544e-01, -4.150280296751483e-01, -3.871162167796792e-01, -4.127459878378780e-02, -4.155683934546454e-02, -4.958844502773641e-02, -5.232320077885316e-02, -3.212557174624269e-01, -2.037131788878168e-01, -9.922339280293581e-02, -1.087699270120404e-01, -9.922339280293582e-02, -1.087699270120404e-01, -1.033718237389915e-02, -1.071190202321029e-02, -1.538386154135215e-04, -1.542813272206666e-04, -2.288265735379734e-03, -2.433752439194011e-03, -8.286966078542130e-02, -8.417853662286258e-02, -7.797105997692246e-04, -1.231476056117484e-03, -7.797105997692231e-04, -4.018412548380207e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mvsb_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvsb", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.037877892166461e-08, 0.000000000000000e+00, -3.039923514601638e-08, -3.038136597756389e-08, 0.000000000000000e+00, -3.040110999334845e-08, -3.038844668408650e-08, 0.000000000000000e+00, -3.041158508086091e-08, -3.035945498592146e-08, 0.000000000000000e+00, 4.283576806398346e-08, -3.038045922786120e-08, 0.000000000000000e+00, 4.282430029021411e-08, 4.282538898715773e-08, 0.000000000000000e+00, 4.282430029021411e-08, -6.660739167290694e-05, 0.000000000000000e+00, -3.564328003202950e-06, -6.667505403132871e-05, 0.000000000000000e+00, -6.659945482573959e-05, -6.801583621590639e-05, 0.000000000000000e+00, -6.825791906335822e-05, -6.750015364716061e-05, 0.000000000000000e+00, -6.749820022009984e-05, -6.649965654290832e-05, 0.000000000000000e+00, -6.872628470325298e-05, -3.568419970236120e-06, 0.000000000000000e+00, -6.872628470325298e-05, -2.706500772699067e-03, 0.000000000000000e+00, -2.700360911100657e-03, -2.712438663594466e-03, 0.000000000000000e+00, -9.779321954217858e-03, -8.337260518626969e-03, 0.000000000000000e+00, -8.241529853761800e-03, -8.894255900890963e-03, 0.000000000000000e+00, -2.805685946593459e-03, -2.641121267048665e-03, 0.000000000000000e+00, -2.940971823202125e-03, -9.838709725687489e-03, 0.000000000000000e+00, -7.831500534220250e-03, -4.727061865557960e-01, 0.000000000000000e+00, -1.072820587359515e+00, -4.643968817231521e-01, 0.000000000000000e+00, -1.117813894458584e+00, -1.731650704581932e-03, 0.000000000000000e+00, -1.047221877614139e-03, -8.703293611111880e-02, 0.000000000000000e+00, -2.416991699658095e-01, -7.823199207299885e-01, 0.000000000000000e+00, 6.380167445162795e-01, -7.823199207299875e-01, 0.000000000000000e+00, -1.045594921077554e+00, 1.216571598021769e+02, 0.000000000000000e+00, 1.113498483048950e+02, -4.425909088308998e+02, 0.000000000000000e+00, 1.054940429461904e+02, -9.882795216341155e+00, 0.000000000000000e+00, 5.235702471544508e+00, 2.146565631969077e+02, 0.000000000000000e+00, 2.215403188725106e+02, 1.397938428362358e+02, 0.000000000000000e+00, 4.554779492061402e+02, 1.397938428362358e+02, 0.000000000000000e+00, 4.554779492061399e+02, 9.263127859907279e-06, 0.000000000000000e+00, 9.271764784788599e-06, 9.217491975154763e-06, 0.000000000000000e+00, 9.227611824839249e-06, 9.259990548204662e-06, 0.000000000000000e+00, 9.269814131284329e-06, 9.220856617053607e-06, 0.000000000000000e+00, 9.229727583906244e-06, 1.358986579226389e-07, 0.000000000000000e+00, 9.249604076271656e-06, 9.240132337337496e-06, 0.000000000000000e+00, 1.291301434786275e-07, -3.750066400672246e-04, 0.000000000000000e+00, -3.788312700987694e-04, -4.026110267200478e-04, 0.000000000000000e+00, -4.059918216124695e-04, -3.525430861523416e-04, 0.000000000000000e+00, -3.621357799472709e-04, -3.740405694634219e-04, 0.000000000000000e+00, -3.849746840976206e-04, -4.105593700366676e-04, 0.000000000000000e+00, -3.982367020692169e-05, -4.105593700366676e-04, 0.000000000000000e+00, -3.958022769218619e-04, 3.655141596721503e-01, 0.000000000000000e+00, -3.382161994099651e-03, 5.196932706203786e-02, 0.000000000000000e+00, 5.005451455575882e-02, -1.372841077858343e-01, 0.000000000000000e+00, -3.138322849136229e-01, 8.229689429444728e-01, 0.000000000000000e+00, 2.252411110313284e-01, 1.264691559272980e-01, 0.000000000000000e+00, -4.135986104474086e-03, 1.264691559272978e-01, 0.000000000000000e+00, 2.893317135993185e-01, 7.700207914573955e-01, 0.000000000000000e+00, 7.454147920409130e-01, -3.187980806866362e-01, 0.000000000000000e+00, -3.370065048735887e-01, 1.035612134733199e+00, 0.000000000000000e+00, 9.091784937757701e-01, 1.318774651803364e-03, 0.000000000000000e+00, 1.318063164085012e-03, 3.587294767607535e-01, 0.000000000000000e+00, -6.669953892601904e-02, 3.587294767607548e-01, 0.000000000000000e+00, -6.669953892601893e-02, -1.711032476448100e+03, 0.000000000000000e+00, 2.425754780975156e+02, 2.200447886442132e+02, 0.000000000000000e+00, 1.988255078452787e+02, 1.169035968633002e+03, 0.000000000000000e+00, 1.137123426905414e+03, 2.533074734152523e+00, 0.000000000000000e+00, -3.880884599528776e+00, 3.989198697749742e+02, 0.000000000000000e+00, 5.106678060176275e+02, 3.989198697749744e+02, 0.000000000000000e+00, 5.106678060176268e+02, 4.125887653335882e-02, 0.000000000000000e+00, 4.050926779800212e-02, 4.694726175601151e-02, 0.000000000000000e+00, 4.600274602838116e-02, 5.988783014284341e-02, 0.000000000000000e+00, 5.830387416680152e-02, 5.470447365507294e-02, 0.000000000000000e+00, 4.233937889815760e-02, 5.725893849099487e-02, 0.000000000000000e+00, 5.580509160426942e-02, 5.725893849099487e-02, 0.000000000000000e+00, 4.311833893235816e-02, 4.665187419944783e-02, 0.000000000000000e+00, 4.588307098621653e-02, -7.102121889798145e-01, 0.000000000000000e+00, -3.227832261860951e-03, 2.613306569026546e-01, 0.000000000000000e+00, -1.785568659986049e-02, 9.833854435946027e-02, 0.000000000000000e+00, 9.627791774811222e-02, 1.469073066064624e-01, 0.000000000000000e+00, 1.422306842850439e-01, 1.469073066064625e-01, 0.000000000000000e+00, -4.428759133523021e-02, 5.461640451364759e-02, 0.000000000000000e+00, -2.284618976796011e-02, -3.438733056398711e-01, 0.000000000000000e+00, -3.438938463046078e-01, -1.074021121884674e-01, 0.000000000000000e+00, -3.255304931917263e-01, -4.178204854579916e-02, 0.000000000000000e+00, -3.582901743665556e-01, -3.509683648260457e-01, 0.000000000000000e+00, -3.560244690665083e-01, -3.509683648260458e-01, 0.000000000000000e+00, -7.153591356590400e-02, -2.527317329574427e-01, 0.000000000000000e+00, -2.893861520937335e-01, -1.052970701332877e+01, 0.000000000000000e+00, -1.028280160217900e+01, 3.364162763233642e+00, 0.000000000000000e+00, 3.267544538758846e+00, -7.544194950946963e-01, 0.000000000000000e+00, -1.480709910839959e+00, 1.817666175261261e+00, 0.000000000000000e+00, 1.685436967653464e+00, 1.817666175261263e+00, 0.000000000000000e+00, 1.685436967653465e+00, -1.620477037841665e+02, 0.000000000000000e+00, -1.498151654663867e+02, 1.719959908810901e+03, 0.000000000000000e+00, 1.709365929540252e+03, -7.076726911681746e+03, 0.000000000000000e+00, -6.439191481761230e+03, -3.140532330152918e+00, 0.000000000000000e+00, -3.212997274683263e+00, 7.827421671420047e+02, 0.000000000000000e+00, 5.951525641395310e+02, 7.827421671420055e+02, 0.000000000000000e+00, -2.717870765809110e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mvsb_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvsb", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [4.650483369610736e-03, 4.652481207137537e-03, 4.650760778062143e-03, 4.652682197599781e-03, 4.651535459746470e-03, 4.653822706044281e-03, 4.648424114117891e-03, -3.300670843556957e-03, 4.650662067605722e-03, -3.299975975251159e-03, -3.300186036523653e-03, -3.299975975251159e-03, 2.243618978967367e-02, -2.609120257173211e-03, 2.245891629490571e-02, 2.243272350204629e-02, 2.290899040302748e-02, 2.299098167385044e-02, 2.274160234487410e-02, 2.274189444426428e-02, 2.238927820362240e-02, 2.315559781469332e-02, -2.607179393537137e-03, 2.315559781469332e-02, -3.028818741625438e-03, -3.191768059153548e-03, -2.984405478455474e-03, 2.561558054666840e-02, 2.099314588013344e-02, 2.046539266213973e-02, 2.235780405579234e-02, -2.731645850146440e-03, -3.284232022541973e-03, -2.004564922135744e-03, 2.629734845851843e-02, 1.860585580636436e-02, -4.307277859129263e-03, 5.744771996331127e-02, -4.631777616683742e-03, 6.139860706208422e-02, 9.148238852663512e-03, -1.088061650430751e-03, 2.004821695310911e-02, 2.335859878697788e-02, 4.638841813153199e-02, 1.000608840218662e-02, 4.638841813153196e-02, -2.490882052282533e-04, 2.802349050731529e-04, 3.077775869449206e-04, -1.890952493663670e-07, 3.437890169749655e-04, -1.565742999923578e-05, 2.876459042412593e-03, 1.073666676672269e-04, 1.053618353166427e-04, 2.285884338075519e-04, 1.372181680356854e-04, 2.285884338075519e-04, 1.372181680356854e-04, -1.034635596234345e-02, -1.034856349792083e-02, -1.030128250283155e-02, -1.030498427193694e-02, -1.034321368596183e-02, -1.034660653377755e-02, -1.030456505920175e-02, -1.030704388790227e-02, -2.299240873006114e-04, -1.032669485304107e-02, -1.032367453143673e-02, -2.183233508602645e-04, 2.275740648040126e-02, 2.297973329462245e-02, 2.491200293828047e-02, 2.509636097256838e-02, 2.105383387523503e-02, 2.171653993198061e-02, 2.271270960390633e-02, 2.348036009251419e-02, 2.549366787487087e-02, -3.226611772929935e-03, 2.549366787487087e-02, 2.428728440378078e-02, -5.874324669977495e-01, 4.469666548281344e-02, -1.063484020683380e-01, -1.025714359607048e-01, 1.661966676369268e-01, 4.211125402507731e-01, -1.115501319241871e+00, -3.363044594059954e-01, -2.283402268851837e-01, 4.699683295751755e-02, -2.283402268851832e-01, -4.485705353094668e-01, 1.062651287873928e-02, 1.076130163939880e-02, -1.896909424582431e-03, 2.830662992293267e-02, 9.096042557812305e-03, 1.028264987030563e-02, -7.388481535081601e-02, -7.374516566213991e-02, 1.605540190864368e-02, 2.222496960603354e-02, 1.605540190864368e-02, 2.222496960603354e-02, -7.722963872361154e-09, 5.749107625079438e-05, 9.803773700578631e-05, 9.266669833945030e-05, 2.177968075646690e-04, 2.516398010905660e-04, 5.879374004223423e-03, -9.111956581586669e-05, 7.917323974182125e-05, 2.625723535234142e-04, 7.917323974182127e-05, 2.625723535234143e-04, -6.663326756208325e-02, -6.618629244121767e-02, -7.444912548874177e-02, -7.381175820300058e-02, -1.126848445381545e-01, -1.105215944226529e-01, -1.003115715829287e-01, -6.872652975025507e-02, -1.063452256647169e-01, -1.044669042017096e-01, -1.063452256647169e-01, -6.980833196049334e-02, -6.942919285655463e-02, -6.896681035387678e-02, 6.695835182470681e-01, -3.308276807607059e-02, -2.816537857543643e-01, 7.533613583384791e-02, -1.208930741218900e-01, -1.196134399727641e-01, -1.689944063931540e-01, -1.654415896349051e-01, -1.689944063931540e-01, 1.267763932494717e-01, -1.285655366722318e-01, 1.200795772064887e-01, 3.798535092002253e-02, 3.836215596117524e-02, -5.896430145375496e-03, 5.374282834190116e-02, -1.658121461107381e-02, 1.230047343141560e-01, 8.086029352522668e-02, 8.186413912468705e-02, 8.086029352522667e-02, -1.095729738620253e-02, 1.864617876183397e-01, 2.176066212632121e-01, -1.557155728381127e-05, -1.557647612173439e-05, 3.673083643960583e-03, 3.961076247208597e-03, 2.224772615312398e-01, 4.540142253709376e-01, 9.539489593071063e-03, 1.202827415905036e-02, 9.539489593071064e-03, 1.202827415905038e-02, -2.239402240742224e-07, -2.456072326299844e-07, 1.492027540504943e-05, 1.493028170727599e-05, -1.111227173212789e-08, -1.416441648350416e-08, -1.967596183192819e-04, -2.319366726776530e-04, 1.320299647567836e-04, 2.356241349383056e-04, 1.320299647567834e-04, -8.444387714320166e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
