
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mcml_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mcml", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.190169563179662e+01, -2.190172420190253e+01, -2.190190287130376e+01, -2.190147562751321e+01, -2.190169219514145e+01, -2.190169219514145e+01, -3.379909903578465e+00, -3.379908495226929e+00, -3.380081170104416e+00, -3.381546212188988e+00, -3.380542155692848e+00, -3.380542155692848e+00, -6.625338067331130e-01, -6.622646154880691e-01, -6.569152785366501e-01, -6.631797851278207e-01, -6.628196287763248e-01, -6.628196287763248e-01, -2.070746245199789e-01, -2.076428476996459e-01, -7.603065158733550e-01, -1.425812188297625e-01, -1.873897046406315e-01, -1.873897046406315e-01, -3.425554664753372e-03, -3.609093008929434e-03, -2.280822967526794e-02, -1.966206944288577e-03, -2.750849275559769e-03, -2.750849275559770e-03, -5.259793891463829e+00, -5.259030378167409e+00, -5.259769782753069e+00, -5.259095669711299e+00, -5.259401323326699e+00, -5.259401323326699e+00, -2.173401349475470e+00, -2.188443645622967e+00, -2.173418185874277e+00, -2.183568049982373e+00, -2.182247873865011e+00, -2.182247873865011e+00, -6.016405482635825e-01, -6.384236336619353e-01, -5.344086851447702e-01, -5.385522451871662e-01, -6.127769134912830e-01, -6.127769134912830e-01, -8.595446760328565e-02, -2.007983973878242e-01, -7.748757464721109e-02, -1.836578642140711e+00, -1.134517764419045e-01, -1.134517764419045e-01, -1.517084332697645e-03, -1.922213347732052e-03, -1.473399523426966e-03, -4.475114127886459e-02, -1.851482674372828e-03, -1.851482674372828e-03, -5.713726721700308e-01, -5.770273694666708e-01, -5.751618332698398e-01, -5.735140028110005e-01, -5.743496593013999e-01, -5.743496593013999e-01, -5.559061708835027e-01, -5.285613970848515e-01, -5.403869525969804e-01, -5.489521144732007e-01, -5.450275898353907e-01, -5.450275898353907e-01, -6.615177769429286e-01, -2.688601149736811e-01, -3.025086764245684e-01, -3.549443328983897e-01, -3.297287228180230e-01, -3.297287228180230e-01, -4.829755378919590e-01, -2.146971247037251e-02, -3.208228290125339e-02, -3.419622530131745e-01, -6.552611640886903e-02, -6.552611640886905e-02, -4.848250432812626e-03, -5.129425287128569e-04, -1.079397249623401e-03, -6.060740646521995e-02, -1.699770192069402e-03, -1.699770192069400e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mcml_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mcml", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.686353670961413e+01, -2.686195178330246e+01, -2.686358306494957e+01, -2.686198568907565e+01, -2.686358158957981e+01, -2.686202550902564e+01, -2.686304676105302e+01, -2.686134629859544e+01, -2.686356598758652e+01, -2.686150845911622e+01, -2.686356598758652e+01, -2.686150845911622e+01, -4.188897915356741e+00, -4.188187445935522e+00, -4.189215027807297e+00, -4.188349844680643e+00, -4.194985135788194e+00, -4.195959863998584e+00, -4.195156159068811e+00, -4.194799781070514e+00, -4.187564398062994e+00, -4.200245411707856e+00, -4.187564398062994e+00, -4.200245411707856e+00, -7.883565388000316e-01, -7.927147517835736e-01, -7.867804019025786e-01, -7.920235657128437e-01, -7.674161969361566e-01, -7.622241317007759e-01, -7.708641676577731e-01, -7.727049481349280e-01, -8.002885859625125e-01, -7.487513558979724e-01, -8.002885859625125e-01, -7.487513558979724e-01, -5.657315511680615e-02, -2.081712434118000e-01, -9.131489095581699e-02, -1.891677309420363e-01, -8.875609339484688e-01, -9.228590664162450e-01, -2.093827311793615e-01, -1.953088344292492e-01, -9.941914189103949e-02, -1.658657660713533e-01, -9.941914189103924e-02, -1.658657660713533e-01, -4.400529982155950e-03, -3.685681625134432e-03, -4.666950076249486e-03, -4.892055088473983e-03, -3.615838742476973e-02, -3.922452339083408e-02, -2.653122781548730e-03, -2.608233621946842e-03, -3.965047906329352e-03, -2.242935419876131e-03, -3.965047906329365e-03, -2.242935419876118e-03, -6.445851078449241e+00, -6.443911160059405e+00, -6.447280530715115e+00, -6.445293964944327e+00, -6.445781925421033e+00, -6.443851552931106e+00, -6.447014984348197e+00, -6.445113943660001e+00, -6.446693122173267e+00, -6.444622603578240e+00, -6.446693122173267e+00, -6.444622603578240e+00, -2.242038802345344e+00, -2.280347270471037e+00, -2.449036748038706e+00, -2.477460520805375e+00, -2.380459496185119e+00, -2.373402594726588e+00, -2.565714967860810e+00, -2.560966885422634e+00, -2.279985632411518e+00, -2.376162939414344e+00, -2.279985632411518e+00, -2.376162939414344e+00, -7.466075439496378e-01, -7.427661281914999e-01, -8.641381371675343e-01, -8.596676423010358e-01, -6.504317569337826e-01, -6.999430951464581e-01, -7.171619848613388e-01, -7.798436338238789e-01, -7.771131336377620e-01, -7.483143294779586e-01, -7.771131336377618e-01, -7.483143294779586e-01, -1.513673560469681e-01, -1.544920827148129e-01, 3.977410761213252e-02, 7.662102431169035e-03, -1.373106981982205e-01, -1.441413719661786e-01, -2.651557000931603e+00, -2.650758636256273e+00, -1.589675124819159e-01, -1.588884256725702e-01, -1.589675124819158e-01, -1.588884256725703e-01, -1.986618115167177e-03, -2.064614682753475e-03, -2.553030107589202e-03, -2.591524675027863e-03, -1.912741563347440e-03, -2.028488019914673e-03, -8.432996018983208e-02, -8.328047942804644e-02, -1.949638336458639e-03, -2.689182666194106e-03, -1.949638336458638e-03, -2.689182666194116e-03, -7.452330704912903e-01, -7.482471642568447e-01, -7.364167313567199e-01, -7.392984942746013e-01, -7.391704570768800e-01, -7.421180118238746e-01, -7.417400143058459e-01, -7.446894486274519e-01, -7.404234925610931e-01, -7.433722188247648e-01, -7.404234925610931e-01, -7.433722188247648e-01, -7.235596627615009e-01, -7.262504553386032e-01, -6.504156200650592e-01, -6.521995044993038e-01, -6.659937729461038e-01, -6.680240748934365e-01, -6.830354184328994e-01, -6.852467821893268e-01, -6.742262511501872e-01, -6.761100534621256e-01, -6.742262511501872e-01, -6.761100534621257e-01, -9.224773177533725e-01, -9.215204966697610e-01, -1.059419932454401e-01, -1.053919265518455e-01, -1.693623864169251e-01, -1.771571664232828e-01, -3.967112281284215e-01, -4.003912260885096e-01, -2.756754123047583e-01, -2.766492377946938e-01, -2.756754123047581e-01, -2.766492377946938e-01, -4.977206157713909e-01, -5.087655743698786e-01, -3.237036248258788e-02, -3.387066253888865e-02, -5.548946733287506e-02, -5.868030902315168e-02, -4.004101918179470e-01, -3.986050753097314e-01, -1.127621796318410e-01, -1.200558119731344e-01, -1.127621796318411e-01, -1.200558119731344e-01, -6.465419224556259e-03, -6.716404347142270e-03, -6.834677009833533e-04, -6.852112249488174e-04, -1.393157952674593e-03, -1.482367634316184e-03, -1.047862797254497e-01, -5.935966625575899e-02, -1.849714141584955e-03, -2.461524938568267e-03, -1.849714141584950e-03, -2.461524938568257e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mcml_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mcml", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.447557963566152e-09, 0.000000000000000e+00, -7.471075185655578e-09, -7.448029523584539e-09, 0.000000000000000e+00, -7.471414556409662e-09, -7.452107559855690e-09, 0.000000000000000e+00, -7.476537538916000e-09, -7.446946571277097e-09, 0.000000000000000e+00, -7.469919309352581e-09, -7.447799337015294e-09, 0.000000000000000e+00, -7.474439243139509e-09, -7.447799337015294e-09, 0.000000000000000e+00, -7.474439243139509e-09, -1.638454416833194e-05, 0.000000000000000e+00, -1.631882579211761e-05, -1.640517498229020e-05, 0.000000000000000e+00, -1.632736323282579e-05, -1.675697328018086e-05, 0.000000000000000e+00, -1.680595592112555e-05, -1.686181758606642e-05, 0.000000000000000e+00, -1.680855335118720e-05, -1.635442159805021e-05, 0.000000000000000e+00, -1.714218865468090e-05, -1.635442159805021e-05, 0.000000000000000e+00, -1.714218865468090e-05, -8.966034704825633e-03, 0.000000000000000e+00, -9.008586338914071e-03, -8.963526347117848e-03, 0.000000000000000e+00, -9.007629499431511e-03, -8.839851271699299e-03, 0.000000000000000e+00, -8.857335501747532e-03, -8.921306816370171e-03, 0.000000000000000e+00, -8.982872459612764e-03, -8.915794832091435e-03, 0.000000000000000e+00, -8.899464794251091e-03, -8.915794832091435e-03, 0.000000000000000e+00, -8.899464794251091e-03, -9.283706198529488e+00, 0.000000000000000e+00, -1.632634804875216e+00, -7.763623588378519e+00, 0.000000000000000e+00, -2.562439673950839e+00, -4.425489839766445e-03, 0.000000000000000e+00, -4.311222132447158e-03, 8.446903023981052e-02, 0.000000000000000e+00, -1.529705716874726e+00, -6.459400503251910e+00, 0.000000000000000e+00, 2.831531216980637e+00, -6.459400503251921e+00, 0.000000000000000e+00, 2.831531216980633e+00, -3.814089834083027e+01, 0.000000000000000e+00, -7.607276413548038e+02, 2.751719118476262e+00, 0.000000000000000e+00, -7.325752285295634e+01, 8.459224051371276e+00, 0.000000000000000e+00, 7.794484131155738e+00, 1.424761461517766e+01, 0.000000000000000e+00, 1.385187434705916e+01, 1.411045535146254e+01, 0.000000000000000e+00, 3.944395815452179e+01, 1.411045535148135e+01, 0.000000000000000e+00, 3.944395815446258e+01, -4.501668703799213e-06, 0.000000000000000e+00, -4.513706855663219e-06, -4.516025091043149e-06, 0.000000000000000e+00, -4.527592128093165e-06, -4.505719553197393e-06, 0.000000000000000e+00, -4.516530884506949e-06, -4.517910200868223e-06, 0.000000000000000e+00, -4.529020378621534e-06, -4.506559349399178e-06, 0.000000000000000e+00, -4.520269066196800e-06, -4.506559349399178e-06, 0.000000000000000e+00, -4.520269066196800e-06, -2.712009725768515e-04, 0.000000000000000e+00, -2.410423809364818e-04, -1.242269503755997e-04, 0.000000000000000e+00, -1.027239461689468e-04, -1.484570827812353e-04, 0.000000000000000e+00, -1.579296804371309e-04, -2.741076183298424e-05, 0.000000000000000e+00, -3.351114324582401e-05, -2.638908595420634e-04, 0.000000000000000e+00, -1.749139798200531e-04, -2.638908595420634e-04, 0.000000000000000e+00, -1.749139798200531e-04, -6.559996943592256e-02, 0.000000000000000e+00, -6.594656675351496e-02, -3.174202472016430e-02, 0.000000000000000e+00, -2.995504425098538e-02, -3.915097915550496e-02, 0.000000000000000e+00, -5.824215624397339e-02, -3.710006734719162e-02, 0.000000000000000e+00, -4.880149888575123e-02, -4.336024725633214e-02, 0.000000000000000e+00, -6.689326245336182e-02, -4.336024725633211e-02, 0.000000000000000e+00, -6.689326245336183e-02, 1.448380211624529e+00, 0.000000000000000e+00, 1.720049709923715e+00, -8.568947958375727e+00, 0.000000000000000e+00, -7.624735680750685e+00, 3.012754505898153e+00, 0.000000000000000e+00, 1.921028174146973e+00, -3.981847514594266e-04, 0.000000000000000e+00, -3.991590457998295e-04, -2.183748474180943e+00, 0.000000000000000e+00, -3.601907361302510e+00, -2.183748474180956e+00, 0.000000000000000e+00, -3.601907361302490e+00, 2.000981473074031e+01, 0.000000000000000e+00, 1.731923846955439e+01, 1.723750038224943e+01, 0.000000000000000e+00, 1.591519376943440e+01, 9.813201967059435e+01, 0.000000000000000e+00, 1.092046100510267e+02, 7.710844569379004e+00, 0.000000000000000e+00, 5.850535824733528e+00, 4.882988600672537e+01, 0.000000000000000e+00, 3.793725537810165e+01, 4.882988600674565e+01, 0.000000000000000e+00, 3.793725537804511e+01, -2.129907924985560e-02, 0.000000000000000e+00, -2.156147715350915e-02, -1.909563565441228e-02, 0.000000000000000e+00, -1.935302899984273e-02, -1.985155359240104e-02, 0.000000000000000e+00, -2.012254218634828e-02, -2.050525538624185e-02, 0.000000000000000e+00, -2.074802521558728e-02, -2.016597877853266e-02, 0.000000000000000e+00, -2.042670824045441e-02, -2.016597877853266e-02, 0.000000000000000e+00, -2.042670824045440e-02, -5.038154050485666e-03, 0.000000000000000e+00, -6.107956459788212e-03, 4.271759151829831e-03, 0.000000000000000e+00, 3.528916812430236e-03, 1.216863716668232e-04, 0.000000000000000e+00, -5.353894924539829e-04, -3.990107064041844e-03, 0.000000000000000e+00, -4.151901708762013e-03, -1.009496632056583e-03, 0.000000000000000e+00, -1.764102442948598e-03, -1.009496632056531e-03, 0.000000000000000e+00, -1.764102442948527e-03, -2.839215661117527e-02, 0.000000000000000e+00, -2.824942633486984e-02, -2.652190857868965e+00, 0.000000000000000e+00, -2.641858690413385e+00, -1.624920330274348e+00, 0.000000000000000e+00, -1.554598284280109e+00, -3.512676552365455e-01, 0.000000000000000e+00, -3.352992913045145e-01, -8.827758439217589e-01, 0.000000000000000e+00, -8.839959332009677e-01, -8.827758439217600e-01, 0.000000000000000e+00, -8.839959332009678e-01, -2.000447601050880e-01, 0.000000000000000e+00, -1.815150729006287e-01, -1.378074787990445e+00, 0.000000000000000e+00, 3.046761678593902e+00, 7.056628280787026e+00, 0.000000000000000e+00, 6.916396234054154e+00, -4.169470513236201e-01, 0.000000000000000e+00, -6.228742260898102e-01, 3.452742516362847e+00, 0.000000000000000e+00, 1.615665679701251e+00, 3.452742516362903e+00, 0.000000000000000e+00, 1.615665679701249e+00, 1.240609127984828e+01, 0.000000000000000e+00, 1.267278842424111e+01, 6.151767116041427e+01, 0.000000000000000e+00, 1.089770258801489e+02, 3.783570620574143e+01, 0.000000000000000e+00, 4.027781335383972e+01, 2.089751859418481e+00, 0.000000000000000e+00, -2.724949345284688e+01, 1.007149987724164e+02, 0.000000000000000e+00, 4.152891434543203e+01, 1.007149987723999e+02, 0.000000000000000e+00, 4.152891434531017e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mcml_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mcml", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-5.088981008977808e-04, -5.071151806660227e-04, -5.088729087289967e-04, -5.070970984682255e-04, -5.085689381750112e-04, -5.067240471937114e-04, -5.088416695666942e-04, -5.070747473011300e-04, -5.088875218996334e-04, -5.067714467128810e-04, -5.088875218996334e-04, -5.067714467128810e-04, 1.461494365477666e-03, 1.438384666167310e-03, 1.468453720377683e-03, 1.441177202954193e-03, 1.586313817159982e-03, 1.602731668792757e-03, 1.627006567734233e-03, 1.608618372054958e-03, 1.448105895234808e-03, 1.721022268113606e-03, 1.448105895234808e-03, 1.721022268113606e-03, 3.142800237052085e-03, 3.186843067581091e-03, 3.141220497816152e-03, 3.175139104151016e-03, 3.052311692005468e-03, 3.251111193927132e-03, 3.700575272873471e-03, 3.755220686696615e-03, 3.064647856871833e-03, 4.915954132099972e-03, 3.064647856871833e-03, 4.915954132099972e-03, 3.425234681243362e-01, 3.366917086338829e-02, 2.935120900570910e-01, 8.003731087989906e-02, 3.063392055612929e-04, 5.077415230418219e-04, 1.150019329288267e-02, 3.933263521929050e-02, 2.689068322386780e-01, 6.908929020202120e-04, 2.689068322386784e-01, 6.908929020202396e-04, 8.499070938145016e-05, 1.472555055847073e-03, 2.493560850843866e-05, 2.004882688941482e-04, 2.215616025068072e-04, 4.949872810123680e-04, 4.639212888036669e-09, 6.909665152635596e-09, 1.641764065159524e-06, 1.157794617547770e-09, 1.641764065147856e-06, 1.157794618527375e-09, -1.631304763736771e-04, -1.538019649010719e-04, -1.613679447265525e-04, -1.520959605887077e-04, -1.592919429131472e-04, -1.510472420669406e-04, -1.579217558807337e-04, -1.496361181214570e-04, -1.650594109093871e-04, -1.534167275656962e-04, -1.650594109093871e-04, -1.534167275656962e-04, 9.908625436669443e-03, 8.145721992795115e-03, 1.463657115888021e-03, 1.716292476402446e-04, 2.691541062597751e-03, 3.248635187043668e-03, -4.256244441506411e-03, -3.918674288911749e-03, 9.791302932551845e-03, 4.395321284470734e-03, 9.791302932551845e-03, 4.395321284470734e-03, 8.024686083474954e-02, 7.925780371961057e-02, 4.255987961998164e-02, 3.716293069859533e-02, 2.112333618848536e-02, 5.389544860079177e-02, 2.479425033852455e-02, 5.213385353879338e-02, 5.009506493464336e-02, 7.906808223044869e-02, 5.009506493464323e-02, 7.906808223044874e-02, 8.888914492564270e-03, 7.280486634807841e-03, 3.515268300021563e-01, 3.177181253977264e-01, 3.480586390756180e-03, 7.571289092794958e-03, 1.639629091997144e-02, 1.642401117965678e-02, 3.822956630761062e-02, 5.460313231277417e-02, 3.822956630761071e-02, 5.460313231277395e-02, 2.246139316145884e-11, 2.843534512743615e-11, 5.451977674675034e-10, 3.835186910336897e-10, 1.461576665183596e-08, 1.941594482787052e-08, 6.559011901569384e-04, 2.990319929825569e-03, 2.391199303735360e-11, 3.560930148534778e-06, 2.391199303735377e-11, 3.560930148558384e-06, -3.277360632269116e-02, -3.187486336944691e-02, -2.908974093682491e-02, -2.835161456010932e-02, -3.029797907717600e-02, -2.950441851892023e-02, -3.136665548058873e-02, -3.054139788863524e-02, -3.084180917125266e-02, -3.002623846545874e-02, -3.084180917125266e-02, -3.002623846545873e-02, -6.160128004819151e-02, -5.996405616081870e-02, -3.238553857343751e-02, -3.183722866891498e-02, -3.553470860933654e-02, -3.507981203804710e-02, -4.177965060702243e-02, -4.156554886510967e-02, -3.938025685482867e-02, -3.857392550089265e-02, -3.938025685482881e-02, -3.857392550089272e-02, 5.244774018708723e-02, 5.114720510625483e-02, 1.990815333509410e-01, 2.018987788593214e-01, 2.038960347921346e-01, 1.994339559280802e-01, 7.920209427329550e-02, 7.601902233527048e-02, 1.560852825157408e-01, 1.559125213510165e-01, 1.560852825157410e-01, 1.559125213510165e-01, 1.141908316128812e-01, 1.035629477613333e-01, 2.895519990887123e-03, 1.622578509336813e-03, 5.029278115494360e-04, 6.973598068072906e-04, 8.114663860722940e-02, 1.466479534221488e-01, 7.510203953200696e-03, 1.463542722812364e-02, 7.510203953200633e-03, 1.463542722812371e-02, 2.484530622500658e-08, 2.444946464996763e-08, 5.668708063424008e-14, 3.298073799541336e-14, 7.535101623385151e-09, 9.980715663769356e-09, 1.204202236043889e-02, 8.654452383895762e-02, 1.190083309522054e-10, 2.258150104071286e-06, 1.190083308641013e-10, 2.258150104130298e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
