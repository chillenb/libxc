
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mcml_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mcml", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.071135010626195e+01, -2.071146359155944e+01, -2.071196349319688e+01, -2.133237310565820e+01, -2.133298266630424e+01, -2.195494691391880e+01, -3.510008010614400e+00, -3.807892816433210e+00, -3.806311099103523e+00, -3.807294754380913e+00, -3.806792639743121e+00, -3.508971993494176e+00, -6.070139665925189e-01, -6.963973443308182e-01, -7.793268284845890e-01, -6.869094291932756e-01, -5.945928619252328e-01, -7.804184439038913e-01, -1.863587284864929e-01, -1.886451377013763e-01, -8.378544538199471e-01, -1.701123845536349e-01, -2.071710030338654e-01, -2.033436131019800e-01, -5.640761065035530e-03, -5.836877310012519e-03, -3.301182813848609e-02, -3.250350994748403e-03, -4.538436026542757e-03, -4.538436026542757e-03, -5.261167996038077e+00, -5.260392401787714e+00, -5.261115911134832e+00, -5.260432272108527e+00, -5.209010300615788e+00, -5.209044164047595e+00, -2.177029456459490e+00, -2.185610281085004e+00, -2.171269812397943e+00, -2.178623930611775e+00, -1.997805182446842e+00, -2.184549163707183e+00, -5.839909010983201e-01, -6.531910562459193e-01, -5.891729349215415e-01, -5.984407168049832e-01, -5.943629005358935e-01, -6.293324051577130e-01, -1.095375911398415e-01, -1.902924040428922e-01, -9.976467311467131e-02, -2.016640901524132e+00, -1.366075441131580e-01, -1.366075441131580e-01, -2.462907767303460e-03, -3.177347786703959e-03, -2.433574114094534e-03, -5.580365185459579e-02, -3.057163941747714e-03, -3.057163941747715e-03, -5.744682062333812e-01, -5.796792450127222e-01, -5.745418774740473e-01, -5.744650440746475e-01, -5.734923919650050e-01, -5.753870935410735e-01, -5.600986317378416e-01, -4.928670611876027e-01, -5.114266448346168e-01, -5.511544408162079e-01, -5.466908213170009e-01, -5.242166368917807e-01, -6.670956904897329e-01, -2.734361700068686e-01, -2.761291876864791e-01, -3.534633598533381e-01, -3.457426638159599e-01, -3.104612668156733e-01, -4.947919959901647e-01, -3.002632797182032e-02, -4.618994549715323e-02, -3.650876475112868e-01, -8.503579027588548e-02, -8.503579027588548e-02, -7.628998916648334e-03, -8.490874300180829e-04, -1.714565070963388e-03, -6.086841629417178e-02, -2.807352690382196e-03, -2.722003112775096e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mcml_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mcml", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.061166248251954e+01, -3.061086182037375e+01, -3.061164970535135e+01, -3.061085259411567e+01, -3.061167011960056e+01, -3.061086413791178e+01, -3.061180492758845e+01, -2.640738213282800e+01, -3.061164887886683e+01, -2.640785200417471e+01, -2.640820197694991e+01, -2.640785200417471e+01, -4.356012394715184e+00, -4.427489909527224e+00, -4.356049239660764e+00, -4.355954320300060e+00, -4.356734247049662e+00, -4.356900282163121e+00, -4.356855013612674e+00, -4.356916748135115e+00, -4.355232036029540e+00, -4.357604477892409e+00, -4.426883881908773e+00, -4.357604477892410e+00, -8.254258321683365e-01, -8.299787652243095e-01, -8.237802490239641e-01, -8.079330901630885e-01, -7.875331820089372e-01, -7.830387455827515e-01, -7.893769128771405e-01, -8.092367765860398e-01, -8.371962480053026e-01, -7.737637082902067e-01, -8.153517047605602e-01, -7.701956407712117e-01, -2.054045092516419e-01, -2.183785393317931e-01, -2.081546770423468e-01, -2.195840986483920e-01, -1.046228976900947e+00, -9.634189076145877e-01, -2.471070300231713e-01, -2.417048490049536e-01, -2.297900948494434e-01, -1.888521106237074e-01, -2.297900948494433e-01, -1.137031724832045e-01, -7.283542914537546e-03, -7.742287826508732e-03, -7.311947914460747e-03, -8.182448634710342e-03, -4.065799099505122e-02, -5.266074702996214e-02, -4.371174139469856e-03, -4.298257095644815e-03, -6.493955002843494e-03, -3.691656479429972e-03, -6.493955002843494e-03, -3.691656482275831e-03, -6.438853613819596e+00, -6.437313364201519e+00, -6.440399186024605e+00, -6.438806251682089e+00, -6.438950328818106e+00, -6.437372500649001e+00, -6.440276209538498e+00, -6.438728430464600e+00, -7.099282511788856e+00, -6.438060170307618e+00, -6.439634963471990e+00, -7.097655885707972e+00, -2.434747674565850e+00, -2.435126017896089e+00, -2.457371068000569e+00, -2.457008024368221e+00, -2.414975883264686e+00, -2.421081329272102e+00, -2.435111183143515e+00, -2.441281534401473e+00, -2.461780857984417e+00, -2.503526361899707e+00, -2.461780857984416e+00, -2.448703103617315e+00, -7.333709353105962e-01, -7.355828530196317e-01, -7.876801169591426e-01, -7.879054962098039e-01, -6.679101410257030e-01, -6.925200977288032e-01, -6.934649858556873e-01, -7.143605498988264e-01, -7.597822233416909e-01, -7.322546944732300e-01, -7.597822233416907e-01, -7.241429817591737e-01, -1.804217632936748e-01, -1.822442430443963e-01, -2.078701879332532e-01, -2.715107052251752e-01, -1.615516279421176e-01, -1.715591642477798e-01, -2.387791868570770e+00, -2.386681276292040e+00, -2.060671767003297e-01, -2.107539657146112e-01, -2.060671767003306e-01, -2.107539657146110e-01, -3.146728152126003e-03, -3.406774759849053e-03, -4.205564808748557e-03, -4.269133643381709e-03, -3.145767275035903e-03, -3.332027649785293e-03, -1.018330791003072e-01, -6.807438999771426e-02, -3.211337512638733e-03, -4.414583362900038e-03, -3.211337517119054e-03, -4.414583407578212e-03, -7.400400182824426e-01, -7.431627692021484e-01, -7.287422660684032e-01, -7.318173530979517e-01, -7.362346366305943e-01, -7.389738038418949e-01, -7.377391361064844e-01, -7.386803244195599e-01, -7.366374967636680e-01, -7.395559477638699e-01, -7.366374967636680e-01, -7.370121800107492e-01, -7.190098343805573e-01, -7.216641714626374e-01, -6.155579817970539e-01, -6.132841901963436e-01, -6.398813753156114e-01, -6.918268755194610e-01, -6.645002326746065e-01, -6.668201864425335e-01, -6.514801254787277e-01, -6.537938107259462e-01, -6.514801254787280e-01, -7.586615590856799e-01, -8.268455247806545e-01, -9.647949953971410e-01, -2.824681740111811e-01, -2.829237117425012e-01, -3.207344067272039e-01, -3.179983507228903e-01, -4.408108656291947e-01, -4.333039100458417e-01, -3.685557167416261e-01, -3.686183469645908e-01, -3.685557167416262e-01, -3.782801649416516e-01, -5.660714652322242e-01, -5.702437892154666e-01, -3.989746335856310e-02, -4.017045441178508e-02, -7.118815667218009e-02, -7.504854219506556e-02, -4.164946105436441e-01, -4.233423414966315e-01, -1.372811105672787e-01, -1.470778007284329e-01, -1.372811105672642e-01, -1.470778007284401e-01, -9.981407587037654e-03, -1.034327763723259e-02, -1.130852422780259e-03, -1.133441625275991e-03, -2.209374173718223e-03, -2.349847782998770e-03, -8.049613348310503e-02, -8.181616726454959e-02, -3.042355522054699e-03, -4.045421829565132e-03, -3.042355329058832e-03, -3.879945787762646e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mcml_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mcml", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.651390584951851e-08, 0.000000000000000e+00, -2.650800426857841e-08, -2.651267724002351e-08, 0.000000000000000e+00, -2.650711255398580e-08, -2.650901105061450e-08, 0.000000000000000e+00, -2.650178348425402e-08, -2.652281897217995e-08, 0.000000000000000e+00, -1.357712755808657e-08, -2.651313683577527e-08, 0.000000000000000e+00, -1.357757905833853e-08, -1.357629360954689e-08, 0.000000000000000e+00, -1.357757905833853e-08, -1.015609382758679e-05, 0.000000000000000e+00, -1.718910699516816e-05, -1.015725099487302e-05, 0.000000000000000e+00, -1.015638863797457e-05, -1.018013104063185e-05, 0.000000000000000e+00, -1.018383909140029e-05, -1.016833765123966e-05, 0.000000000000000e+00, -1.016780083531825e-05, -1.016002983996775e-05, 0.000000000000000e+00, -1.018785733452304e-05, -1.720324879802700e-05, 0.000000000000000e+00, -1.018785733452304e-05, -1.349965315568624e-02, 0.000000000000000e+00, -1.327875676681239e-02, -1.358675571083514e-02, 0.000000000000000e+00, -6.029874191258451e-03, -6.186548638236887e-03, 0.000000000000000e+00, -6.264262935907054e-03, -6.266256152054917e-03, 0.000000000000000e+00, -1.445394567626452e-02, -1.287373667924470e-02, 0.000000000000000e+00, -1.685393463781786e-02, -5.883249402267155e-03, 0.000000000000000e+00, -6.456901392320651e-03, -3.306663251431186e+00, 0.000000000000000e+00, -9.610318496674883e-01, -3.144919037505860e+00, 0.000000000000000e+00, -9.595476567873902e-01, -1.651319850992218e-03, 0.000000000000000e+00, -6.875548261659222e-03, 4.692161965071935e-01, 0.000000000000000e+00, 2.849636097300012e-01, -7.475463699015608e-01, 0.000000000000000e+00, 1.668627281847015e+00, -7.475463699015594e-01, 0.000000000000000e+00, -3.419256190922705e+01, 3.650334135437345e+00, 0.000000000000000e+00, 3.740355866834732e+00, -1.997956175483369e+06, 0.000000000000000e+00, 4.008179376532227e+00, -2.089973900770367e+03, 0.000000000000000e+00, 5.806361841034444e+00, 2.375744905167615e+00, 0.000000000000000e+00, 2.396690815492628e+00, 3.344246665560063e+00, 0.000000000000000e+00, 5.298059337487024e+00, 3.344246665560063e+00, 0.000000000000000e+00, 5.298083137830395e+00, -4.634166528240957e-06, 0.000000000000000e+00, -4.638711214624963e-06, -4.646973894824946e-06, 0.000000000000000e+00, -4.651102815832871e-06, -4.635089637451468e-06, 0.000000000000000e+00, -4.639290215340811e-06, -4.646068958664418e-06, 0.000000000000000e+00, -4.650537248791021e-06, -4.912880641538500e-06, 0.000000000000000e+00, -4.644906466242479e-06, -4.640565117482675e-06, 0.000000000000000e+00, -4.918431747032772e-06, -9.465103489607996e-05, 0.000000000000000e+00, -9.477067068582094e-05, -9.292532614805389e-05, 0.000000000000000e+00, -9.310229823239157e-05, -9.615734027749751e-05, 0.000000000000000e+00, -9.582649840269151e-05, -9.456164547741795e-05, 0.000000000000000e+00, -9.424665563913268e-05, -9.267700491554901e-05, 0.000000000000000e+00, -1.773629577921028e-04, -9.267700491554901e-05, 0.000000000000000e+00, -9.374995954512994e-05, -1.629679169889071e-02, 0.000000000000000e+00, -1.890728918304839e-02, -1.753785589118858e-02, 0.000000000000000e+00, -1.789802225912321e-02, -1.870490065394899e-02, 0.000000000000000e+00, -1.784372811558586e-02, -1.981700205913662e-02, 0.000000000000000e+00, -1.912131782613532e-02, -1.574671889096833e-02, 0.000000000000000e+00, -2.056638764243494e-02, -1.574671889096835e-02, 0.000000000000000e+00, -1.752228359712367e-02, 2.021372576237291e+00, 0.000000000000000e+00, 1.968934660462124e+00, -3.096266256049426e+00, 0.000000000000000e+00, -2.349893841493303e-01, 2.591994316907782e+00, 0.000000000000000e+00, 2.341373332529206e+00, -1.608948193757971e-04, 0.000000000000000e+00, -1.612678631579065e-04, 1.447046499196682e+00, 0.000000000000000e+00, 1.012922870926363e+00, 1.447046499196794e+00, 0.000000000000000e+00, 1.012922870926338e+00, -5.824805109994866e+07, 0.000000000000000e+00, 1.543656677697737e+00, 2.241405463920134e+00, 0.000000000000000e+00, 1.972871176078208e+00, 1.655901626796232e+01, 0.000000000000000e+00, 1.841465110480804e+01, 5.489052579783449e+00, 0.000000000000000e+00, -2.659782539360418e+02, 2.991445082560981e+00, 0.000000000000000e+00, 1.029353537061415e+01, 2.991488366850299e+00, 0.000000000000000e+00, 1.029383252274607e+01, -3.971086192216269e-02, 0.000000000000000e+00, -3.924922948831042e-02, -3.577979152185058e-02, 0.000000000000000e+00, -3.541395735054093e-02, 8.216507168329300e-03, 0.000000000000000e+00, 8.131679536758462e-03, 6.736572707597061e-03, 0.000000000000000e+00, -3.781878946667888e-02, 7.986336957578690e-03, 0.000000000000000e+00, 7.665036439990674e-03, 7.986336957578690e-03, 0.000000000000000e+00, -3.725927335828776e-02, -4.348980794010545e-02, 0.000000000000000e+00, -4.310541170585368e-02, -2.919180489995505e-02, 0.000000000000000e+00, -3.372640173676738e-02, -3.107201445867971e-02, 0.000000000000000e+00, -5.402220798348301e-02, -3.550898308279196e-02, 0.000000000000000e+00, -3.517522047203687e-02, -3.299137069411371e-02, 0.000000000000000e+00, -3.274527702181933e-02, -3.299137069411368e-02, 0.000000000000000e+00, -7.594036515604649e-02, -1.288668081834594e-02, 0.000000000000000e+00, -2.958761285563732e-02, -3.281417450704563e-01, 0.000000000000000e+00, -3.272756129112105e-01, -5.785588761774904e-01, 0.000000000000000e+00, -2.353357448348370e-01, -1.844513563829885e-01, 0.000000000000000e+00, -9.365087213253102e-02, -1.561283150149345e-01, 0.000000000000000e+00, -1.565719534793459e-01, -1.561283150149335e-01, 0.000000000000000e+00, -3.231517910845303e-01, -3.600320834844176e-02, 0.000000000000000e+00, -3.572178453690910e-02, -2.253944586928430e+03, 0.000000000000000e+00, -2.193296969929757e+03, 5.208395443373252e+00, 0.000000000000000e+00, 5.404326498266230e+00, -1.205726581697630e-01, 0.000000000000000e+00, -1.234629981755590e-01, 4.490172184039993e+00, 0.000000000000000e+00, 4.342922980972457e+00, 4.490172184033998e+00, 0.000000000000000e+00, 4.342922980975277e+00, -5.753752302586974e+05, 0.000000000000000e+00, -4.989828236246920e+05, 2.536399707844980e+00, 0.000000000000000e+00, 3.421467988209937e+00, -2.396851949457423e+08, 0.000000000000000e+00, -1.873093162216797e+08, -1.360766665485522e+02, 0.000000000000000e+00, -1.275150582987687e+02, 7.842949928350029e+00, 0.000000000000000e+00, 1.050334647913449e+01, 7.839424925163778e+00, 0.000000000000000e+00, -2.520087813445679e+07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mcml_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mcml", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.756903845721705e-03, 1.756545792044452e-03, 1.756845325232877e-03, 1.756503283936145e-03, 1.756676732514955e-03, 1.756256092497231e-03, 1.757333290928016e-03, 1.382431399877746e-19, 1.756866635084482e-03, -5.049140241144499e-19, 1.500722954657917e-18, -5.049140241144499e-19, 1.463771215378631e-17, 1.088114193228940e-03, -2.946853810348273e-17, -1.073860741120028e-17, 1.368522972710070e-17, 1.362654452751943e-17, 2.954929923756040e-18, -3.800148273684385e-18, -9.741263139494470e-18, -1.513296642929130e-17, 1.088739469616130e-03, -1.513296642929130e-17, 1.690367979607753e-03, 1.815610053238799e-03, 1.656141529436754e-03, 1.973871305990793e-16, -1.463452723378391e-16, -8.686768448257608e-17, 1.381298616374262e-16, 1.459983752830528e-03, 1.890344290721724e-03, 9.309224853468127e-04, 4.983246005991405e-17, 8.895087432835361e-18, 1.553252757882178e-03, 1.864383201024014e-16, 1.738962886709784e-03, 7.179270473719179e-18, -8.354268198071133e-18, 4.246606651317594e-04, 5.144191065654551e-16, -1.129190804247988e-16, 7.562451735155518e-17, -4.768286533411449e-15, 5.715007678815838e-17, 1.604916423620741e-05, 9.451992648308694e-12, -8.370079161226943e-12, 8.422145600527618e-11, -2.159300616820209e-12, 1.498956011763465e-07, 1.527260492302744e-14, 2.219817519720304e-10, 7.058862380009493e-11, 4.492737539684480e-11, -1.476292510434824e-10, 4.492737539684480e-11, -1.525527309171098e-10, -3.735441210772098e-19, -2.326856153668099e-18, 9.399624861342807e-19, 5.769670267886169e-19, 6.880468644945638e-19, 5.002891967228150e-18, -1.643733496132924e-18, 2.588362209121476e-18, 3.210749586342047e-03, 1.354686071025570e-19, 2.518775270515306e-18, 3.212991755923381e-03, 3.006119285362442e-17, -3.795824876709117e-17, -7.585975016884496e-18, -4.614086316991399e-17, 1.046113303951123e-17, -1.652538219600099e-17, 3.358587776186728e-17, -2.269792025838159e-17, 7.343757350844132e-18, 1.885187301951292e-03, 7.343757350844132e-18, -2.980512126209730e-18, -9.180536895355744e-17, 4.476828063219866e-03, 2.747365042070975e-18, -4.022278744713344e-18, -1.620001121478744e-16, -9.585798113997236e-17, -1.421245276567878e-17, 8.041059124505491e-18, -3.255504988760067e-17, 6.079674084092670e-03, 4.397638025059329e-17, 6.293122901648665e-17, 8.724249955690139e-15, 7.625782975904416e-15, 4.613980888640885e-04, 4.173887868562268e-16, 5.107062714680610e-15, 5.898954914213781e-15, 4.220331881360507e-18, -5.511618114364468e-18, 4.321741358016719e-16, -9.028429102582162e-16, -5.807742143632708e-16, -6.372252118870092e-16, 4.559933574024540e-13, 2.162995554770283e-10, 4.463023531144264e-11, -1.104593483135048e-10, -9.947382234228381e-11, -5.063905486695316e-11, -6.339750624694160e-14, 2.732865020370738e-06, -4.063561013395470e-11, 7.856750151085922e-11, -4.653489142924272e-11, -2.632952920612296e-11, -5.917118462213769e-18, -1.224510496602603e-18, -2.997901771257012e-17, -1.812670388270911e-17, -7.329614903354975e-02, -7.371631637163889e-02, -7.522513581420473e-02, 1.224122470759105e-17, -7.518108138241961e-02, -7.508817008535697e-02, -7.518108138241961e-02, 1.245940684746157e-17, -1.388899747358439e-18, 3.318565505016126e-19, -4.056313215989701e-17, 1.378591513710012e-03, 3.581419428696268e-17, 3.241558659794049e-02, 4.819835403210838e-17, 4.189465966376861e-17, -8.030311213716057e-18, -1.015941848606762e-16, 5.087659422947975e-18, 7.075559567987356e-02, -6.098704982205842e-18, 5.857609581558890e-02, -6.254541080209443e-17, 6.711803843281710e-17, 2.969892157039773e-03, 1.062920849489774e-16, 1.012540866703385e-02, 1.572369695471947e-16, 8.225154446636550e-17, -2.671169328047484e-16, -1.601859150097118e-16, 6.952901991729803e-03, -1.065706406409103e-16, 3.779509515327425e-17, 1.472639887480898e-07, 1.478378942412412e-07, -3.002063519322818e-14, 2.292024027994617e-14, 3.207192081235294e-16, 1.475467553952602e-16, 1.471261310543826e-15, 8.919202021490575e-15, 1.800610512466316e-14, -1.977113622239432e-16, 1.268204971570265e-10, 1.482823110598697e-10, -4.919771650305952e-10, -5.869062252724926e-09, 6.594651345140943e-13, 9.787496939637881e-13, 9.457429881882693e-06, 1.221125026055303e-05, -1.627682955121909e-10, 1.042194671099956e-10, 2.455232893939185e-10, 1.830759076814390e-11]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
