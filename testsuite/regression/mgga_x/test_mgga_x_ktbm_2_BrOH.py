
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_2_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.086094748857228e+01, -2.086103293172148e+01, -2.086144818497023e+01, -2.086005193097806e+01, -2.086099221755424e+01, -2.086099221755424e+01, -3.141771488263606e+00, -3.141822857173048e+00, -3.143487234678360e+00, -3.143092272046809e+00, -3.141800690987854e+00, -3.874052935011174e+00, -5.917251452306700e-01, -7.391648899663260e-01, -7.169547436610038e-01, -7.237732284416734e-01, -7.397075406920632e-01, -7.397075406920632e-01, -2.016320031821844e-01, -2.045663310760323e-01, -7.190065598686188e-01, -1.416597104223873e-01, -2.025089982654175e-01, -2.025089982654175e-01, -1.068277971724592e-02, -1.119000178355871e-02, -4.560606992545713e-02, -5.123661501431241e-03, -1.107339570152757e-02, -1.107339570152757e-02, -5.589817871535447e+00, -5.589894906265576e+00, -5.589821302072148e+00, -5.190759376647220e+00, -5.589863133512793e+00, -5.589863133512793e+00, -1.746255623099510e+00, -1.761718781454313e+00, -1.739990842823851e+00, -1.751967408921647e+00, -1.765048948659442e+00, -2.200142068212001e+00, -6.402113269350295e-01, -6.833950367123081e-01, -6.113298590967361e-01, -6.308664364961738e-01, -6.611803909764986e-01, -5.708532415947382e-01, -9.320672208326423e-02, -2.000307347255748e-01, -9.189016543993868e-02, -2.102482526926426e+00, -1.200969102667670e-01, -1.200969102667670e-01, -4.639070687995659e-03, -5.648810099101050e-03, -4.233836628384718e-03, -5.887753931003856e-02, -4.830628794471221e-03, -5.146921110205368e-03, -6.318711601555784e-01, -6.322405993433386e-01, -6.129856250193108e-01, -6.320206323431002e-01, -6.320750162208457e-01, -6.320750162208457e-01, -6.129128860367691e-01, -5.557570361670537e-01, -5.744035521856169e-01, -5.898103829880237e-01, -5.821713396551108e-01, -5.187280244854326e-01, -7.205018084369182e-01, -2.068440057946732e-01, -3.049541326839664e-01, -3.136558965124143e-01, -3.462427114663972e-01, -3.462427114663972e-01, -4.113700001679070e-01, -4.221734055865527e-02, -5.725687913969999e-02, -3.689972427719234e-01, -7.590471210266514e-02, -8.355511589176630e-02, -1.251964490667956e-02, -1.546473476873421e-03, -2.937784508133767e-03, -7.971087065114474e-02, -4.374172091891207e-03, -4.374172091891201e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_2_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.996517578147710e+01, -2.996526130102624e+01, -2.996569519526968e+01, -2.996429500000945e+01, -2.996522042692624e+01, -2.996522042692624e+01, -4.512613914321639e+00, -4.512776253353082e+00, -4.517812470335486e+00, -4.516225014218190e+00, -4.512680445581726e+00, -4.331443054849306e+00, -7.697904597556738e-01, -8.693261799529208e-01, -8.533854218743400e-01, -8.570277451963602e-01, -8.696917410094172e-01, -8.696917410094172e-01, -2.402804464138296e-01, -2.428563267744564e-01, -9.048242286535932e-01, -1.784344779416983e-01, -2.410671821809617e-01, -2.410671821809617e-01, -1.372713589511205e-02, -1.437859892691262e-02, -5.846861053301509e-02, -6.585088241135877e-03, -1.422876053950320e-02, -1.422876053950319e-02, -6.849470978886962e+00, -6.853444601325259e+00, -6.849904135739644e+00, -7.324412269781650e+00, -6.851471765833868e+00, -6.851471765833868e+00, -2.452214881258372e+00, -2.485842918496570e+00, -2.438048786433807e+00, -2.464500334568631e+00, -2.493525415552618e+00, -2.471582994678690e+00, -7.237694347595867e-01, -8.116208151691960e-01, -6.839737483311290e-01, -7.206950399817097e-01, -7.575009448044012e-01, -8.335337837622275e-01, -1.205734777116599e-01, -2.464641167301788e-01, -1.186983948102552e-01, -2.412563828666897e+00, -1.516194553087828e-01, -1.516194553087828e-01, -6.184722826153221e-03, -7.259942805021966e-03, -5.441369514296785e-03, -7.749769847381668e-02, -6.440034775769717e-03, -6.614928978235305e-03, -8.240859845279601e-01, -8.074278060897540e-01, -8.380121855856756e-01, -8.179318484738261e-01, -8.156126601583510e-01, -8.156126601583510e-01, -7.932857223455502e-01, -6.258465288542702e-01, -6.639303623532452e-01, -7.086543678614813e-01, -6.847572797272325e-01, -7.492776850486292e-01, -8.409392673747483e-01, -2.620573307457072e-01, -3.566594073377253e-01, -4.418128949565078e-01, -3.946660628056803e-01, -3.946660628056804e-01, -5.937816396266862e-01, -5.414786219825964e-02, -7.332393479477821e-02, -4.124078521451394e-01, -9.855653724964591e-02, -1.064085405873744e-01, -1.608798802345966e-02, -1.987630760487943e-03, -3.775785061337751e-03, -1.015157494731413e-01, -5.621807684021705e-03, -5.621807684021700e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_2_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.417136132437110e-08, -1.417129272017718e-08, -1.417087894149512e-08, -1.417201156837832e-08, -1.417132595411487e-08, -1.417132595411487e-08, -1.353575418595726e-05, -1.353761434701727e-05, -1.359157534651215e-05, -1.356635654616658e-05, -1.353601301223987e-05, -1.392955551832763e-05, -5.021261622443467e-03, -4.738969818717118e-03, -4.354770050468305e-03, -4.601781451496784e-03, -4.749008083009384e-03, -4.749008083009384e-03, -6.812441250056436e-01, -6.890469222689372e-01, -1.492846010621194e-03, -4.064033255288286e-01, -6.829854554458601e-01, -6.829854554458601e-01, -6.084313133139827e+01, -5.534434693497990e+01, -2.365231365936794e+00, -1.546942550793187e+02, -5.780103924834439e+01, -5.780103924834439e+01, -4.373360615298297e-06, -4.373342888245669e-06, -4.373375557301967e-06, -4.245023463647370e-06, -4.373333461303782e-06, -4.373333461303782e-06, -1.165442271760579e-04, -1.168167457875646e-04, -1.162659505733751e-04, -1.165822696653602e-04, -1.170575810666709e-04, -1.190729772686632e-04, -2.283662405858083e-02, -1.935714234662833e-02, -2.497630915581189e-02, -2.517588424305271e-02, -2.102587147911998e-02, -2.012671083582568e-02, -7.811282952064916e-01, -3.056912408312967e-01, -8.831375849199197e-01, -2.064176913227678e-04, -6.582845979809208e-01, -6.582845979809208e-01, -3.187271253163465e+02, -1.431230764652147e+02, -5.053162382068957e+02, -1.666383695849853e+00, -2.969192783667822e+02, -1.913045798202878e+02, -2.635374815349410e-02, -2.655132682281076e-02, -2.612439178592544e-02, -2.643595637027436e-02, -2.646392923612610e-02, -2.646392923612610e-02, -2.988841427308655e-02, -3.931901793568326e-02, -3.760251662833810e-02, -3.511012290533790e-02, -3.646682144311489e-02, -3.503407432154462e-02, -1.541188362198349e-02, -2.486893746247435e-01, -1.785779493895469e-01, -1.146770808418167e-01, -1.553786639790011e-01, -1.553786639790012e-01, -4.862101501275566e-02, -2.587935874412553e+00, -1.466327754468603e+00, -1.728641535219160e-01, -1.484269891181557e+00, -1.077028348672976e+00, -2.760745223484809e+01, -2.001145645367553e+03, -7.784067610930216e+02, -1.294714246905013e+00, -3.138786066690705e+02, -3.138786066690712e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_2_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.260906939234508e-03, 1.260918176803301e-03, 1.260964729619459e-03, 1.260782240052711e-03, 1.260912876576724e-03, 1.260912876576724e-03, 2.436072275301199e-03, 2.437330516108471e-03, 2.475176162057153e-03, 2.460305059581479e-03, 2.436409944918055e-03, 8.595378616259086e-03, -1.792561142565701e-03, 2.470673918613279e-02, 2.141335231962123e-02, 2.295104204882735e-02, 2.479194535388623e-02, 2.479194535388623e-02, 7.474781418032668e-02, 7.814371937268409e-02, -2.342551139839257e-03, 1.762112118358998e-02, 7.570039975077274e-02, 7.570039975077274e-02, 1.025838313543946e-03, 1.072920596675336e-03, 3.222530100379369e-03, 2.865760754292727e-04, 1.085888621349552e-03, 1.085888621349545e-03, 6.959236828489057e-03, 6.958602724749797e-03, 6.959173610378203e-03, 5.849770697459680e-03, 6.958912021788524e-03, 6.958912021788524e-03, 2.378753537866481e-03, 2.698370727338664e-03, 2.239841210604819e-03, 2.490708866967758e-03, 2.783239661263621e-03, 1.399200248033818e-02, 5.851481917537784e-02, 5.696960599378030e-02, 5.815942836155416e-02, 6.048391341738946e-02, 5.790207151034802e-02, 3.439464937739105e-02, -2.217428876098929e-03, 3.575760278588849e-02, -2.480148575327469e-03, 1.823797920962186e-02, 1.741494879955732e-02, 1.741494879955732e-02, -6.059215967500080e-07, 3.553943506375969e-04, 5.283725162267391e-04, -6.172259618021518e-04, -6.977874384023961e-07, 3.593080389029658e-04, 6.061567728056011e-02, 6.097191945480316e-02, 5.757745242009763e-02, 6.075141128074080e-02, 6.080129575953841e-02, 6.080129575953841e-02, 6.264332299545849e-02, 6.662818482266793e-02, 6.715087580971361e-02, 6.605036435955075e-02, 6.675862694194074e-02, 4.748463175575843e-02, 5.380755188214785e-02, -8.054517312298672e-03, 6.436080538141253e-02, 1.444539985039996e-02, 7.570733162702190e-02, 7.570733162702195e-02, 2.133813235049126e-02, 2.780183991986580e-03, 4.005810800180480e-03, 9.147403910729943e-02, -2.075394561049346e-03, 9.487176220144109e-03, 7.487337175074659e-04, 1.018760726257735e-04, 2.717434880042993e-04, 9.900830515575483e-03, 3.618230047735720e-04, 3.618230047735713e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
