
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_br89_1_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89_1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.880871247779404e+01, -1.880874762765341e+01, -1.880897538653295e+01, -1.880845151811659e+01, -1.880871587197068e+01, -1.880871587197068e+01, -3.542720120167866e+00, -3.542665306145866e+00, -3.541458674408283e+00, -3.544112140451765e+00, -3.542724278622549e+00, -3.542724278622549e+00, -7.460837124991564e-01, -7.464501571305309e-01, -7.568946318937027e-01, -7.593987956860746e-01, -7.580424724277979e-01, -7.580424724277979e-01, -2.436355494372910e-01, -2.438530233956071e-01, -8.652657734835962e-01, -2.208017855492369e-01, -2.419904455140222e-01, -2.419904455139819e-01, -7.933422745993182e-02, -7.951489615197083e-02, -1.348174815220673e-01, -7.231481067238621e-02, -7.471379535149808e-02, -7.471379535145849e-02, -8.648610254882819e+00, -7.005443121801910e+00, -3.817007444632620e+00, -1.036464280378510e+01, -4.143979665555607e+00, -5.950855106704501e+00, -1.430856267874996e+00, -2.629654085399544e+00, -2.332569013116372e+00, -2.339977399841394e+00, -2.338031437672574e+00, -2.128114002510044e+00, -1.222116652054443e+00, -9.739030880341414e-01, -1.115525297545115e+00, -5.897330932007709e-01, -6.524621837065949e-01, -6.934661603019148e-01, -6.689301408485443e-02, -4.248177518836833e-01, -6.178674939738941e-02, -2.025557182094250e+00, -1.830354923474537e-01, -1.615729677826938e-01, -1.437729965035371e-01, -3.067141903210650e+00, -1.904029603832744e-03, -4.153711401906723e-02, -8.390430874014075e-02, -2.391785782357314e-03, -3.027396870234452e+01, -4.281194102762421e-01, -4.289870040243108e-01, -4.588828766244458e+00, -4.293496236915534e-01, -8.944429813642051e+01, -4.189152287181619e-01, -5.478024803430737e-01, -9.734992617131438e-01, -4.224135878818608e-01, -6.205135992653865e-01, -1.262456350939895e+00, -1.404983446801184e+00, -1.601834972870789e-01, -1.923453757654202e-01, -2.561225068343093e-01, -4.438012116208046e-01, -4.037176539506371e-01, -5.152279391928754e-01, -2.449157405610069e-02, -1.553436877046626e-01, -3.702985712300579e-01, -5.293409743867508e-02, -1.471952674388416e-01, -6.218240997826797e-03, -6.645260194152705e-04, -1.397502496299358e-03, -5.112208232728328e-02, -2.196444044531544e-03, -2.196442952710333e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_br89_1_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89_1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.806063787487598e+01, -2.806059394891328e+01, -2.806073476838187e+01, -2.806066436277966e+01, -2.806108412013604e+01, -2.806115356349968e+01, -2.805998920947327e+01, -2.805975848981994e+01, -2.806069468368833e+01, -2.806034432717689e+01, -2.806069468368833e+01, -2.806034432717689e+01, -4.530999470182640e+00, -4.531413886861686e+00, -4.531073645761873e+00, -4.531509325532252e+00, -4.533090944405935e+00, -4.533650601611791e+00, -4.530348102463995e+00, -4.530938401510187e+00, -4.530029521023046e+00, -4.532811883014809e+00, -4.530029521023046e+00, -4.532811883014809e+00, -8.464863531950101e-01, -8.514725174192949e-01, -8.446577532336615e-01, -8.507349758846271e-01, -8.226007998011849e-01, -8.155870809148201e-01, -8.235441021129695e-01, -8.257097364077604e-01, -8.608984929513984e-01, -7.907070974836796e-01, -8.608984929513984e-01, -7.907070974836796e-01, -2.173835029711439e-01, -2.239538158507844e-01, -2.194230724436568e-01, -2.271361903075400e-01, -9.794633569770369e-01, -1.016075529781862e+00, -1.765729316425119e-01, -1.778671401332194e-01, -2.251628782785126e-01, -1.411659492220842e-01, -2.251628782786277e-01, -1.411659492220842e-01, -3.417676247407469e-02, -3.497708243638462e-02, -3.455882939726383e-02, -3.544718824957167e-02, -7.374492443658781e-02, -7.568700675361342e-02, -2.962606142997180e-02, -2.962978471137574e-02, -3.352997690068191e-02, -2.653207534247201e-02, -3.352997690077130e-02, -2.653207534247183e-02, -8.481272685782461e+00, -8.199368842229589e+00, -7.454569849488843e+00, -7.446128340666772e+00, -5.116474611040704e+00, -5.110150261894295e+00, -9.329460743305608e+00, -9.409088149357386e+00, -6.021123865467170e+00, -6.024421271407102e+00, -7.035258638946919e+00, -6.995047010187856e+00, -1.910093794080558e+00, -1.910707807067984e+00, -2.686256465967833e+00, -2.685343690620824e+00, -2.462697027966639e+00, -2.468148823570271e+00, -2.476276317988735e+00, -2.485876351905932e+00, -2.508745629110503e+00, -2.494646885291805e+00, -2.376397592038772e+00, -2.369962325834926e+00, -1.062078405431168e+00, -1.112468075866538e+00, -9.760083216702296e-01, -9.783038865893690e-01, -1.007653605343428e+00, -9.853722366733194e-01, -7.522359913627606e-01, -7.769867420456991e-01, -8.072588785194491e-01, -7.661533564102259e-01, -8.184704352747738e-01, -7.776150984720108e-01, -8.906187939380739e-02, -8.992495343229455e-02, -3.471577099069280e-01, -3.475100384608064e-01, -8.009672811024963e-02, -8.440799717615906e-02, -2.613162423056614e+00, -2.612050885253018e+00, -1.308287500377787e-01, -1.377518902143941e-01, -1.053436201115739e-01, -1.091965385609943e-01, -8.611619035409000e-02, -8.471061129328582e-02, -1.821511950853436e+00, -1.784504013330932e+00, -2.459864938950866e-03, -2.605083837759380e-03, -5.530047207641033e-02, -5.561308138230277e-02, -5.428180816535324e-02, -4.412969470704167e-02, -2.512378330165893e-03, -3.450301759130510e-03, -1.912120720747854e+01, -1.924049018546664e+01, -5.697098512601725e-01, -5.719343699631154e-01, -5.708622119950194e-01, -5.730904287220806e-01, -3.324093067786268e+00, -3.208016210127544e+00, -5.713596865505527e-01, -5.735770636761280e-01, -5.459442328751020e+01, -5.473894932508890e+01, -5.576276824818623e-01, -5.594710215538439e-01, -6.235918079235721e-01, -6.260963755084260e-01, -8.883776175847713e-01, -8.948380319049546e-01, -6.129699040598522e-01, -6.000326968517143e-01, -7.063189319138133e-01, -7.089169997849032e-01, -1.080577021620509e+00, -1.081034652188289e+00, -1.253014142017886e+00, -1.248278760889071e+00, -2.131670281438159e-01, -2.143993531254962e-01, -2.553579803007920e-01, -2.579225589589849e-01, -3.443485553770534e-01, -3.458727239547836e-01, -4.313038029784445e-01, -4.321699203369238e-01, -4.043220536828244e-01, -4.054642298830370e-01, -5.765976471279473e-01, -5.815727989630874e-01, -3.255964140694150e-02, -3.279237582046226e-02, -8.927851021546129e-02, -9.803691980555598e-02, -4.271187095184968e-01, -4.332478045800823e-01, -6.854621202066037e-02, -7.240615151377695e-02, -9.470193962633910e-02, -9.222357462611430e-02, -8.135653631146791e-03, -8.430646726718673e-03, -8.850205820106177e-04, -8.870427825631091e-04, -1.800810240677329e-03, -1.915307191709224e-03, -5.967916243390223e-02, -6.769065342930690e-02, -2.379757828401282e-03, -3.162462451219182e-03, -2.379756848077169e-03, -3.162458272578010e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_br89_1_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89_1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.156797017498467e-08, 0.000000000000000e+00, -1.156797908882321e-08, -1.156770464184687e-08, 0.000000000000000e+00, -1.156778639300221e-08, -1.156712984410726e-08, 0.000000000000000e+00, -1.156688401283760e-08, -1.157012371674203e-08, 0.000000000000000e+00, -1.157070312508325e-08, -1.156780296805878e-08, 0.000000000000000e+00, -1.156937444331983e-08, -1.156780296805878e-08, 0.000000000000000e+00, -1.156937444331983e-08, -2.589743939706378e-05, 0.000000000000000e+00, -2.590539076128564e-05, -2.589796587221227e-05, 0.000000000000000e+00, -2.590650607214764e-05, -2.591673285549588e-05, 0.000000000000000e+00, -2.592129752701542e-05, -2.586900787344557e-05, 0.000000000000000e+00, -2.587505247574854e-05, -2.591019869999794e-05, 0.000000000000000e+00, -2.589010683358789e-05, -2.591019869999794e-05, 0.000000000000000e+00, -2.589010683358789e-05, -1.368248400528650e-02, 0.000000000000000e+00, -1.384346685227375e-02, -1.363985799191506e-02, 0.000000000000000e+00, -1.383206397569374e-02, -1.311314732538297e-02, 0.000000000000000e+00, -1.293329782070122e-02, -1.280440760513431e-02, 0.000000000000000e+00, -1.288298272480568e-02, -1.398745128493586e-02, 0.000000000000000e+00, -1.195833254470666e-02, -1.398745128493586e-02, 0.000000000000000e+00, -1.195833254470666e-02, -1.440767462656395e+00, 0.000000000000000e+00, -1.330924705126624e+00, -1.423109621764452e+00, 0.000000000000000e+00, -1.298932018435764e+00, -7.502558134374846e-03, 0.000000000000000e+00, -7.700263360108110e-03, -2.650176499305060e+00, 0.000000000000000e+00, -2.561210437601688e+00, -1.256357555162717e+00, 0.000000000000000e+00, -6.131948837411924e+00, -1.256357555160648e+00, 0.000000000000000e+00, -6.131948837411922e+00, -1.679309823183680e+04, 0.000000000000000e+00, -1.408251484454563e+04, -1.489034086301730e+04, 0.000000000000000e+00, -1.222161082817320e+04, -1.039966691184336e+02, 0.000000000000000e+00, -8.974200623539971e+01, -6.957116198643541e+04, 0.000000000000000e+00, -7.239954912040710e+04, -2.294736443923794e+04, 0.000000000000000e+00, -1.399124832624901e+05, -2.294736443918794e+04, 0.000000000000000e+00, -1.399124832624908e+05, -1.016670882279033e-06, 0.000000000000000e+00, -1.168657642423835e-06, -1.923865957331576e-06, 0.000000000000000e+00, -1.937012432037761e-06, -1.423801680046936e-09, 0.000000000000000e+00, -1.125919185797126e-09, -7.233820470707779e-07, 0.000000000000000e+00, -7.038290481402617e-07, -6.945820795040136e-07, 0.000000000000000e+00, -7.028685117285146e-07, -3.249252693248059e-06, 0.000000000000000e+00, -3.567885663080308e-06, -4.492410948481476e-09, 0.000000000000000e+00, -6.097298546510398e-09, -9.641257292302659e-05, 0.000000000000000e+00, -9.653437709752945e-05, -1.454402020026445e-04, 0.000000000000000e+00, -1.455019534681117e-04, -1.441472497474657e-04, 0.000000000000000e+00, -1.428332144891482e-04, -1.435389609356112e-04, 0.000000000000000e+00, -1.438680317383153e-04, -2.122437624522736e-04, 0.000000000000000e+00, -2.030110877704695e-04, -4.305961233016960e-03, 0.000000000000000e+00, -3.743453943264403e-03, -6.029460741874979e-03, 0.000000000000000e+00, -5.965682450627482e-03, -5.522871927814108e-03, 0.000000000000000e+00, -5.739763212901713e-03, -3.715132676837173e-02, 0.000000000000000e+00, -3.274236010080035e-02, -2.162840468685448e-02, 0.000000000000000e+00, -2.600467198867858e-02, -1.696554487458046e-02, 0.000000000000000e+00, -2.047675812631341e-02, -1.005345109598227e-02, 0.000000000000000e+00, -1.010844026964899e-02, -3.761422705168837e-01, 0.000000000000000e+00, -3.725184789788487e-01, -1.873826200984670e-04, 0.000000000000000e+00, -1.879142555662272e-04, -2.510678323074085e-04, 0.000000000000000e+00, -2.515414263665664e-04, -5.917400617553880e+00, 0.000000000000000e+00, -5.452655933768801e+00, -7.874336876260902e+00, 0.000000000000000e+00, -7.708246428103959e+00, -5.666948631730126e+04, 0.000000000000000e+00, -5.193964216318996e+04, -5.823168803095892e+02, 0.000000000000000e+00, -5.731332586496573e+02, 1.215590798178476e-08, 0.000000000000000e+00, -1.175992810601206e-07, -1.219122382097065e-02, 0.000000000000000e+00, -7.902378645269752e-03, -1.076468988390975e+05, 0.000000000000000e+00, -5.868970133186644e+04, -6.022323707801393e-06, 0.000000000000000e+00, -2.928448006419190e-05, -2.493532539174629e-05, 0.000000000000000e+00, -2.447235646666798e-05, -8.068942853869417e-12, 0.000000000000000e+00, -7.997030313091306e-12, -2.692373609278247e-14, 0.000000000000000e+00, -2.653872473971200e-14, -3.645011690046929e-04, 0.000000000000000e+00, -3.843709963195993e-04, -9.256777069645011e-11, 0.000000000000000e+00, -6.735380847428955e-11, -6.044426709383331e-06, 0.000000000000000e+00, -5.961109242724401e-06, -9.646112087744831e-14, 0.000000000000000e+00, -9.083249369101513e-14, -4.741252038450765e-02, 0.000000000000000e+00, -4.729979784134907e-02, -8.468805616136284e-03, 0.000000000000000e+00, -8.245524362261076e-03, -5.044434078109572e-03, 0.000000000000000e+00, -3.355210769911090e-03, -2.907825662814047e-02, 0.000000000000000e+00, -2.874024218087787e-02, -4.609912976083855e-03, 0.000000000000000e+00, -4.583302235066778e-03, -2.322826988263916e-03, 0.000000000000000e+00, -2.347097704986746e-03, -1.804914802015761e-05, 0.000000000000000e+00, -1.745631063384234e-05, -5.297316637558864e-06, 0.000000000000000e+00, -5.188726362338079e-06, -3.656205628003819e-04, 0.000000000000000e+00, -3.182037399061189e-04, -1.324330833554773e-01, 0.000000000000000e+00, -1.316061306791886e-01, -1.746891394782126e-01, 0.000000000000000e+00, -1.729632713664823e-01, -6.131610867278536e-02, 0.000000000000000e+00, -5.978795345258334e-02, -2.093219667776171e-02, 0.000000000000000e+00, -3.432912740104413e-02, -4.538498281925779e+01, 0.000000000000000e+00, -3.828018511263171e+01, -2.281002431327425e-01, 0.000000000000000e+00, -2.255561433064289e-01, -7.782054151974200e-04, 0.000000000000000e+00, -1.110089557751206e-03, -1.840284468909953e+01, 0.000000000000000e+00, -1.812063745723983e+01, -6.294491803473940e-05, 0.000000000000000e+00, -2.138782767424223e-04, -3.523888129798079e-02, 0.000000000000000e+00, -7.874708941792282e-03, -8.337384972046356e-05, 0.000000000000000e+00, -1.018051980361688e-04, -7.393220782422286e+00, 0.000000000000000e+00, -5.410344639188103e-01, -3.425927159444729e-04, 0.000000000000000e+00, -8.419613307826163e-04, -1.136084464887380e-04, 0.000000000000000e+00, -2.137109743686638e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_br89_1_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89_1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [-2.236464313619898e-04, -2.236457397206575e-04, -2.236434653208648e-04, -2.236435889768361e-04, -2.236397145324801e-04, -2.236365722361722e-04, -2.236731034386710e-04, -2.236791930036975e-04, -2.236444699049155e-04, -2.236662995729512e-04, -2.236444699049155e-04, -2.236662995729512e-04, -2.160737305798011e-03, -2.161312253419321e-03, -2.160801498417441e-03, -2.161413023450890e-03, -2.162732614834880e-03, -2.163247134094111e-03, -2.159163375046186e-03, -2.159758819527035e-03, -2.160717588099645e-03, -2.161466516326678e-03, -2.160717588099645e-03, -2.161466516326678e-03, -8.142949417714701e-03, -8.337116263832413e-03, -8.079739824404245e-03, -8.313902906686833e-03, -7.292545921472209e-03, -7.044902586834124e-03, -7.201282418674822e-03, -7.292664469308769e-03, -8.619136308682027e-03, -6.055158176335192e-03, -8.619136308682027e-03, -6.055158176335192e-03, -1.400069734061025e-02, -1.450203123975177e-02, -1.434664586429986e-02, -1.491612706679345e-02, -6.768455073723694e-03, -7.671223009562996e-03, -1.170620609520914e-02, -1.178810832630844e-02, -1.389929845149519e-02, -1.047473971633770e-02, -1.389929845147229e-02, -1.047473971633769e-02, -6.638109822242769e-03, -6.679217473800653e-03, -6.772569331708451e-03, -6.833645568943443e-03, -8.131957087485353e-03, -8.263827465311546e-03, -5.973701158419587e-03, -5.910950478570658e-03, -6.439922053364125e-03, -7.235777967886541e-03, -6.439922053350097e-03, -7.235777967886580e-03, -2.847891389757362e-04, -3.271283721387042e-04, -5.392139673445827e-04, -5.424982842301639e-04, -3.988479411467989e-07, -3.151716433491857e-07, -2.027376085303185e-04, -1.971154318461286e-04, -1.946212356460859e-04, -1.967990013234920e-04, -9.104375029915507e-04, -9.989867572867152e-04, -6.681099751956422e-08, -9.066509086100112e-08, -1.465759976166887e-03, -1.466413898536687e-03, -2.123123505873871e-03, -2.135065105988678e-03, -2.144960126105246e-03, -2.136916330074515e-03, -2.191224139994434e-03, -2.167519326532620e-03, -3.240051710122723e-03, -3.058570072351331e-03, -1.732319549842519e-03, -1.494088866080288e-03, -3.095486917085274e-03, -3.066916714199959e-03, -1.658417108755857e-03, -1.920711607124163e-03, -1.259886156810993e-02, -1.224767609363242e-02, -9.788657656923296e-03, -1.009592237216386e-02, -7.678324552590500e-03, -7.949793043605350e-03, -1.495762135446721e-05, -1.547380474849432e-05, -3.865456908059685e-03, -3.885818148050037e-03, -2.063833055903441e-07, -2.421551040749822e-07, -3.525849419317067e-03, -3.527741324413136e-03, -1.318923503658057e-02, -1.444767003425354e-02, -1.755103068569162e-02, -2.042421203330625e-02, -2.054359904937228e-03, -2.113375302937653e-03, -4.453868714702171e-05, -4.585694284595648e-05, 3.887542033884117e-16, -4.467079224216634e-15, -4.391850939089665e-06, -2.899643657111525e-06, -3.667839733416001e-03, -5.179481147875780e-03, -2.051979056905023e-13, -2.584412747992355e-12, -1.007951243895035e-05, -1.000753414300764e-05, -3.205682618202564e-12, -3.214474521523065e-12, -1.076173919909474e-14, -1.073254618587519e-14, -1.464339448772239e-04, -1.562149854120520e-04, -3.709405558394774e-11, -2.730603067974933e-11, -2.422142162998184e-06, -2.416704200594293e-06, -3.593668452144899e-14, -3.417643676218160e-14, -1.115630237802271e-02, -1.127505917354903e-02, -2.287806284766746e-03, -2.257276361201306e-03, -1.555775607720562e-03, -1.045749380647822e-03, -8.390848886954586e-03, -8.386076546376662e-03, -1.330240793283911e-03, -1.337355584429359e-03, -1.371649335613634e-03, -1.392767902050843e-03, -3.736329214385684e-07, -3.676740381956256e-07, -1.887315719882577e-07, -1.904809264077089e-07, -3.022271152644328e-05, -2.674189654854620e-05, -7.263653977935726e-03, -7.210661082413340e-03, -9.581302728315640e-03, -9.476606622296302e-03, -1.121511880524851e-02, -1.116308000057796e-02, -1.546638598159451e-06, -2.588934722969078e-06, -8.161752265476442e-03, -7.598800141410150e-03, -1.665050751248339e-02, -1.722091995345313e-02, -5.365886826552896e-07, -9.010901115313750e-07, -1.268914093372563e-02, -1.470901794666504e-02, -7.282585299920644e-11, -2.753535973904789e-10, -5.248490933647667e-11, -1.180922183599583e-11, -1.046133841326529e-12, -1.536875624829772e-12, -4.483493096860640e-03, -3.444626381267013e-04, -9.920396939544973e-12, -5.721615778328110e-11, -3.289739776243110e-12, -1.452290073882412e-11]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_br89_1_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89_1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [8.945857254479592e-04, 8.945829588826300e-04, 8.945738612834584e-04, 8.945743559073446e-04, 8.945588581299205e-04, 8.945462889446888e-04, 8.946924137546842e-04, 8.947167720147901e-04, 8.945778796196650e-04, 8.946651982918050e-04, 8.945778796196650e-04, 8.946651982918050e-04, 8.642949223192045e-03, 8.645249013677282e-03, 8.643205993669764e-03, 8.645652093803561e-03, 8.650930459339510e-03, 8.652988536376445e-03, 8.636653500184745e-03, 8.639035278108123e-03, 8.642870352398579e-03, 8.645866065306710e-03, 8.642870352398579e-03, 8.645866065306710e-03, 3.257179767085882e-02, 3.334846505532963e-02, 3.231895929761698e-02, 3.325561162674733e-02, 2.917018368588884e-02, 2.817961034733650e-02, 2.880512967469929e-02, 2.917065787723508e-02, 3.447654523472810e-02, 2.422063270534077e-02, 3.447654523472810e-02, 2.422063270534077e-02, 5.600278936244100e-02, 5.800812495900708e-02, 5.738658345719939e-02, 5.966450826717380e-02, 2.707382029489479e-02, 3.068489203825198e-02, 4.682482438083657e-02, 4.715243330523378e-02, 5.559719380598076e-02, 4.189895886535078e-02, 5.559719380588918e-02, 4.189895886535076e-02, 2.655243928897108e-02, 2.671686989520261e-02, 2.709027732683379e-02, 2.733458227577377e-02, 3.252782834994141e-02, 3.305530986124618e-02, 2.389480463367835e-02, 2.364380191428263e-02, 2.575968821345650e-02, 2.894311187154616e-02, 2.575968821340037e-02, 2.894311187154632e-02, 1.139156555902945e-03, 1.308513488554816e-03, 2.156855869378331e-03, 2.169993136920657e-03, 1.595391764587314e-06, 1.260686573396743e-06, 8.109504341212738e-04, 7.884617273845142e-04, 7.784849425843434e-04, 7.871960052939679e-04, 3.641750011966203e-03, 3.995947029146861e-03, 2.672439900782569e-07, 3.626603634440045e-07, 5.863039904667545e-03, 5.865655594146748e-03, 8.492494023495485e-03, 8.540260423954704e-03, 8.579840504420986e-03, 8.547665320298058e-03, 8.764896559977736e-03, 8.670077306130479e-03, 1.296020684049089e-02, 1.223428028940532e-02, 6.929278199370076e-03, 5.976355464321153e-03, 1.238194766834110e-02, 1.226766685679984e-02, 6.633668435023428e-03, 7.682846428496652e-03, 5.039544627243966e-02, 4.899070437452969e-02, 3.915463062769318e-02, 4.038368948865546e-02, 3.071329821036200e-02, 3.179917217442137e-02, 5.983048541786349e-05, 6.189521899397727e-05, 1.546182763223874e-02, 1.554327259220015e-02, 8.255332223613764e-07, 9.686204163004596e-07, 1.410339767726826e-02, 1.411096529765254e-02, 5.275694014632228e-02, 5.779068013701415e-02, 7.020412274276647e-02, 8.169684813322496e-02, 8.217439619748914e-03, 8.453501211750612e-03, 1.781547485880868e-04, 1.834277713838259e-04, -1.555016813553647e-15, 1.786831689686653e-14, 1.756740375635349e-05, 1.159857462844610e-05, 1.467135893366400e-02, 2.071792459150312e-02, 8.207916227620091e-13, 1.033765099196942e-11, 4.031804975580140e-05, 4.003013657203055e-05, 1.282273047348724e-11, 1.285789808609226e-11, 4.304695679637895e-14, 4.293018474350078e-14, 5.857357795088956e-04, 6.248599416482082e-04, 1.483762223357910e-10, 1.092241227189973e-10, 9.688568651992735e-06, 9.666816802377171e-06, 1.437467382443624e-13, 1.367057470487264e-13, 4.462520951209082e-02, 4.510023669419613e-02, 9.151225139066979e-03, 9.029105444805223e-03, 6.223102430882248e-03, 4.182997522591286e-03, 3.356339554781836e-02, 3.354430618550665e-02, 5.320963173135642e-03, 5.349422337717435e-03, 5.486597342454536e-03, 5.571071608203370e-03, 1.494531685754273e-06, 1.470696152781633e-06, 7.549262879530308e-07, 7.619237056308356e-07, 1.208908461057731e-04, 1.069675861941848e-04, 2.905461591174291e-02, 2.884264432965336e-02, 3.832521091326256e-02, 3.790642648918521e-02, 4.486047522099405e-02, 4.465232000231184e-02, 6.186554392637804e-06, 1.035573889187631e-05, 3.264700906190577e-02, 3.039520056564060e-02, 6.660203004993356e-02, 6.888367981381241e-02, 2.146354730621158e-06, 3.604360446125500e-06, 5.075656373490252e-02, 5.883607178666016e-02, 2.913034119968257e-10, 1.101414389561916e-09, 2.099396373459067e-10, 4.723688734398333e-11, 4.184535365306117e-12, 6.147502499319087e-12, 1.793397238744256e-02, 1.377850552506805e-03, 3.968158775817989e-11, 2.288646311331244e-10, 1.315895910497244e-11, 5.809160297733185e-11]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
