
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_2d_js17_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_2d_js17", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.524506545560455e+02, -1.524512936043753e+02, -1.524543310559156e+02, -1.524448193281225e+02, -1.524497753344165e+02, -1.524497753344165e+02, -9.971718757808476e+00, -9.971763103650124e+00, -9.973193740062655e+00, -9.973975397468912e+00, -9.972332429203005e+00, -9.779678481746235e+00, -8.060902418773997e-01, -1.235828297170557e+00, -1.262842434394150e+00, -1.243638521338700e+00, -1.248107553125159e+00, -1.248107553125159e+00, -3.647035450520062e-01, -3.596969766718309e-01, -9.891107739125051e-01, -4.713422061209315e-01, -4.172216086612577e-01, -4.172216086612578e-01, -9.590814405526099e-01, -9.328293939625543e-01, -6.940904542861327e-01, -1.241130493170247e+00, -1.049369126659036e+00, -1.049369126659036e+00, -1.788727258583505e+01, -1.789427125368784e+01, -1.788763651978972e+01, -1.834366999618077e+01, -1.789079647271024e+01, -1.789079647271024e+01, -4.186949671673276e+00, -4.234614441939955e+00, -4.152116856480800e+00, -4.194200728268796e+00, -4.230180141686072e+00, -4.375730669958027e+00, -7.646491845980270e-01, -7.922185353496541e-01, -7.418210209316579e-01, -7.242529523282670e-01, -7.682186233190397e-01, -7.007037199689862e-01, 1.053071599671017e-01, -4.765070375398558e-01, 1.256656622469856e-01, -4.001904887552434e+00, -4.551970691987368e-01, -4.551970691987368e-01, 2.753777304944476e+01, -1.296704065736407e+00, -7.506827604836322e-01, 2.434982878645029e-01, 1.096854701562580e+01, -9.462012301594310e-01, -6.749971870272434e-01, -6.713566269334036e-01, -6.934829782319490e-01, -6.725042276992740e-01, -6.719442442876449e-01, -6.719442442876449e-01, -6.473352563800018e-01, -6.343572112808027e-01, -6.254536714985379e-01, -6.228343384615217e-01, -6.232173165438739e-01, -5.834901793291645e-01, -8.618095764363445e-01, -1.178913416778699e-01, -4.722269103502307e-01, -2.984599829335901e-01, -4.625264446103446e-01, -4.625264446103444e-01, -4.557136808083492e-01, -7.001415204179000e-01, -6.626531127124590e-01, -4.178783664522375e-01, 1.275104002766523e-01, -4.971021285180729e-01, -1.079319819820124e+00, -1.812957057242339e+00, -1.058101309440533e+00, -4.937684334441961e-01, -8.708246231935777e-01, -8.708246231935777e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_2d_js17_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_2d_js17", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.287529413273457e+02, -2.287538976215925e+02, -2.287584446638054e+02, -2.287442107891886e+02, -2.287516269922468e+02, -2.287516269922468e+02, -1.504894175682204e+01, -1.504898444864665e+01, -1.505050481906457e+01, -1.505193384836208e+01, -1.504943713499897e+01, -1.359115173798743e+01, -1.294094904652387e+00, -5.811116530465782e-01, -4.912606714967189e-01, -5.275440768120601e-01, -5.194022269842872e-01, -5.194022269842872e-01, 4.137132320470406e-02, 3.665865060722726e-02, -1.642391215484100e+00, 1.097111257671316e-01, 8.174453298068021e-02, 8.174453298068025e-02, 3.145837430645266e-01, 3.059408688892493e-01, 2.221623688223489e-01, 4.073301113659456e-01, 3.443327811443984e-01, 3.443327811443984e-01, -2.757267351297304e+01, -2.758384814714406e+01, -2.757325809229125e+01, -2.754133877038111e+01, -2.757830561783028e+01, -2.757830561783028e+01, -6.364856397254022e+00, -6.433219425209881e+00, -6.315177064259219e+00, -6.375378459067250e+00, -6.426732263258534e+00, -5.230780296908506e+00, -7.571091607088790e-01, -9.920157007685746e-01, -5.910637543799431e-01, -7.098117886998201e-01, -7.988993958079753e-01, -1.071823033892497e+00, -1.378662148613916e-01, 8.450791191729168e-02, -1.386565628913714e-01, -5.612382667603699e+00, 1.164242052748169e-01, 1.164242052748167e-01, -1.376931673411305e+01, 4.255771211833544e-01, 2.463642993514137e-01, -1.635728830890767e-01, -5.484815957215333e+00, 3.105266352184938e-01, -1.023305606230553e+00, -9.684622418986414e-01, -1.044053375930396e+00, -1.002851476843523e+00, -9.947724965357987e-01, -9.947724965357987e-01, -9.740312951130867e-01, -5.184468768685074e-01, -6.305592782956971e-01, -7.538860298770870e-01, -6.890994419791010e-01, -8.897903418207710e-01, -1.039092457170869e+00, -2.580109174918971e-01, -2.404186875887984e-02, -4.840150088841463e-01, -1.052061754439727e-01, -1.052061754439724e-01, -7.150707051491769e-01, 2.245567729924638e-01, 2.086595980341621e-01, -2.237431338408337e-01, -1.238487880202595e-01, 1.446954122380804e-01, 3.538527171288202e-01, 5.951197469785285e-01, 3.473052217220399e-01, 1.452754259718642e-01, 2.857921288690874e-01, 2.857921288690886e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_2d_js17_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_2d_js17", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.492212730975369e-08, 1.492194061365664e-08, 1.492105265136440e-08, 1.492383164702747e-08, 1.492238367605537e-08, 1.492238367605537e-08, 5.161296065495310e-05, 5.161274526404964e-05, 5.160300286706385e-05, 5.158600436068337e-05, 5.161184266209039e-05, -7.161633637083155e-06, 6.713526333851483e-02, -1.446332220170206e-02, -1.571166884564450e-02, -1.540137509389838e-02, -1.546358291778307e-02, -1.546358291778307e-02, -3.727485565749092e+00, -3.572648651817694e+00, 2.889078683005564e-02, -8.059854617233771e+00, -5.885194889801398e+00, -5.885194889801399e+00, -2.354219020579321e+05, -2.004695666240914e+05, -6.201579707615861e+02, -1.354171882670788e+06, -6.809430323874162e+05, -6.809430323874162e+05, 2.568881966023034e-06, 2.590333215496498e-06, 2.570126500556970e-06, 8.536630095470081e-06, 2.579610298473424e-06, 2.579610298473424e-06, 6.687885843507988e-04, 6.488359947144430e-04, 6.837121604506027e-04, 6.656276137300591e-04, 6.507329325917707e-04, -1.250012823129192e-04, -3.014610061296614e-02, -1.930712052054627e-02, -4.157343973832665e-02, -3.589353394848945e-02, -2.805804640508128e-02, 1.376292046817658e-01, -1.002967640161826e+04, -3.076469217396809e+00, -1.792893156391086e+04, -9.829653681930634e-05, -1.676288440848446e+01, -1.676288440848445e+01, -3.070397920253268e+15, -1.423785870553111e+06, -5.243080199487630e+06, -3.242497280184219e+05, -4.838416691393056e+14, -2.341560365982153e+06, 6.468840761610437e-03, -1.553597492931679e-02, 1.555681725604361e-01, -4.449259814504647e-03, -7.667621194002718e-03, -7.667621194002718e-03, 7.407406939307079e-04, -6.480815033279007e-02, -5.394679385040840e-02, -4.242093577290774e-02, -4.860377275059766e-02, 2.426541037697119e-01, -1.612276430801360e-02, -2.050656789356688e+00, -7.297646474025884e-01, 1.237454329560519e+00, -4.546724424958270e-01, -4.546724424958271e-01, 4.293770289725382e-01, -7.186540301299402e+02, -2.523737898551684e+02, -3.357534734191382e-01, -4.419052665103749e+04, -6.170215341900555e+01, -6.516135264227111e+04, -1.153122169880026e+08, -1.232278396058193e+07, -7.715594128863745e+01, -3.247358767586867e+06, -3.247358767586878e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_2d_js17_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_2d_js17", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([3.760315064806283e-05, 3.760299334311452e-05, 3.760224546837726e-05, 3.760458689449106e-05, 3.760336690698671e-05, 3.760336690698671e-05, 5.724111610123937e-04, 5.724093077779251e-04, 5.723454398095117e-04, 5.722934615917560e-04, 5.723882420033129e-04, 3.832576774419111e-04, 6.757335049451405e-03, 2.758890193622705e-03, 2.752893305017330e-03, 2.770490916141557e-03, 2.766024024819151e-03, 2.766024024819151e-03, 1.274920896480522e-02, 1.274244940579479e-02, 5.366602874239863e-03, 1.266247870915712e-02, 1.285488811999484e-02, 1.285488811999484e-02, 3.683841749626710e-02, 3.657809098744065e-02, 1.900019872425397e-02, 4.081773443522183e-02, 4.072439045870022e-02, 4.072439045870022e-02, 2.724048812464597e-04, 2.725533783919350e-04, 2.724139644469196e-04, 3.123713534295993e-04, 2.724789679491051e-04, 2.724789679491051e-04, 1.355839995233086e-03, 1.341220752043052e-03, 1.366681198377061e-03, 1.353575974406488e-03, 1.342587486626731e-03, 7.827117011896029e-04, 4.312913100956578e-03, 4.405199735899082e-03, 4.419318779755147e-03, 4.549273600464487e-03, 4.317350392636792e-03, 8.063806939728911e-03, 1.345826683471766e-01, 1.080760449390263e-02, 1.512474196582839e-01, 9.454270122990359e-04, 1.441487294966414e-02, 1.441487294966414e-02, 2.665712099171541e+01, 4.009477589533324e-02, 6.601076918756885e-02, 2.742017813316914e-01, 2.114140734064894e+01, 5.154181014899346e-02, 6.447021471369729e-03, 5.835671737579078e-03, 8.245747857554206e-03, 6.181951581099281e-03, 6.091466409603737e-03, 6.091466409603737e-03, 6.569018795480898e-03, 5.165565556447861e-03, 5.282453166340402e-03, 5.523859235193232e-03, 5.378888791542448e-03, 9.706136162447929e-03, 3.986344524618973e-03, 3.618206467689297e-02, 8.492452819769094e-03, 1.811012131544333e-02, 7.925889918732627e-03, 7.925889918732627e-03, 1.216227464436145e-02, 1.930641431814168e-02, 1.717183021322354e-02, 8.056535533396570e-03, 1.908380608141607e-01, 1.657277407547408e-02, 2.866240840326405e-02, 6.202181040388704e-02, 6.129762286255642e-02, 1.717636799050199e-02, 5.663047319463808e-02, 5.663047319463810e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
