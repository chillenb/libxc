
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ms2bs_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2bs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.229963179948217e+01, -2.229967537667059e+01, -2.229993621811145e+01, -2.229922216651819e+01, -2.229965421420009e+01, -2.229965421420009e+01, -3.400164296942885e+00, -3.400179810217352e+00, -3.400900789877039e+00, -3.402646548478589e+00, -3.400173602901807e+00, -3.400173602901807e+00, -6.654946013462174e-01, -6.652931382302246e-01, -6.616104929160548e-01, -6.662251936127617e-01, -6.654186779489807e-01, -6.654186779489807e-01, -2.074715083066061e-01, -2.088517098021266e-01, -7.815338513590889e-01, -1.620188173514055e-01, -2.078507966380002e-01, -2.078507966380002e-01, -1.532434737924375e-02, -1.604675241481934e-02, -6.320018982924380e-02, -7.369576420591971e-03, -1.587962952757281e-02, -1.587962952757281e-02, -5.406779356903797e+00, -5.407128549456886e+00, -5.406819958066998e+00, -5.407091374923886e+00, -5.406951431071644e+00, -5.406951431071644e+00, -2.118214384891776e+00, -2.133294430837365e+00, -2.117704226059534e+00, -2.129364824920509e+00, -2.129080118816472e+00, -2.129080118816472e+00, -5.857876247932396e-01, -6.133947432663327e-01, -5.429663415535343e-01, -5.478015782361859e-01, -6.127652901973087e-01, -6.127652901973087e-01, -1.297146456252096e-01, -2.204286988751201e-01, -1.274354455016187e-01, -1.810372905493902e+00, -1.441417890499933e-01, -1.441417890499933e-01, -7.109508647079973e-03, -8.123598205595306e-03, -6.088901604662075e-03, -8.533550765912062e-02, -7.401808073089516e-03, -7.401808073089516e-03, -6.128431239264898e-01, -6.120653524915047e-01, -6.123515894145806e-01, -6.125654050700412e-01, -6.124577792812714e-01, -6.124577792812714e-01, -5.899273419696885e-01, -5.348845570848672e-01, -5.511398281786440e-01, -5.659859763108824e-01, -5.582343774203995e-01, -5.582343774203995e-01, -6.339979446873351e-01, -2.677731821328236e-01, -3.058791576247003e-01, -3.619164775608946e-01, -3.344817050504017e-01, -3.344817050504016e-01, -4.748470669327086e-01, -5.896137469315426e-02, -7.805933126968614e-02, -3.341292082732219e-01, -1.070263103562120e-01, -1.070263103562120e-01, -1.794957324723965e-02, -2.225580077577445e-03, -4.227071699492430e-03, -1.019978069877478e-01, -6.291152329013177e-03, -6.291152329013168e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ms2bs_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2bs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.829744968399501e+01, -2.829754521980832e+01, -2.829813958199091e+01, -2.829658370175537e+01, -2.829749850794981e+01, -2.829749850794981e+01, -4.169605470872531e+00, -4.169673713221748e+00, -4.171808404443198e+00, -4.170145998125204e+00, -4.169651651218449e+00, -4.169651651218449e+00, -7.773580147341601e-01, -7.762245045046211e-01, -7.466563049885697e-01, -7.517471120124792e-01, -7.769458605080697e-01, -7.769458605080697e-01, -2.169407450911980e-01, -2.176611850650841e-01, -9.415147597410095e-01, -1.606663258233685e-01, -2.169530267516881e-01, -2.169530267516881e-01, -2.030949831526806e-02, -2.125433309222799e-02, -7.880219291080696e-02, -9.814548873234380e-03, -2.103324545081040e-02, -2.103324545081040e-02, -6.993909338444731e+00, -6.995935280937766e+00, -6.994177219575347e+00, -6.995748800627615e+00, -6.994866689038356e+00, -6.994866689038356e+00, -2.383357557388900e+00, -2.423531045054959e+00, -2.388061619970794e+00, -2.420584702585680e+00, -2.404956969716721e+00, -2.404956969716721e+00, -7.172761739817347e-01, -8.433571861585323e-01, -6.682968280513741e-01, -7.313003178886254e-01, -7.586674495266114e-01, -7.586674495266114e-01, -1.400228660623352e-01, -2.287123126280265e-01, -1.366693401078694e-01, -2.441049896494861e+00, -1.495501194036847e-01, -1.495501194036847e-01, -9.468663126346534e-03, -1.081551025688521e-02, -8.107174317674371e-03, -1.004083206167918e-01, -9.854410387670230e-03, -9.854410387670230e-03, -8.152716122206990e-01, -8.043556448491360e-01, -8.080972251071640e-01, -8.111146686849389e-01, -8.095907123647432e-01, -8.095907123647432e-01, -7.937207202848504e-01, -6.495695309357254e-01, -6.830158820390424e-01, -7.188380539916761e-01, -6.992249681831978e-01, -6.992249681831978e-01, -8.680433510152356e-01, -2.864613435268072e-01, -3.239784236587740e-01, -4.036259642972749e-01, -3.595791838379505e-01, -3.595791838379505e-01, -5.415800902349818e-01, -7.454612969846100e-02, -9.467330029669455e-02, -3.919379695117218e-01, -1.185336732563878e-01, -1.185336732563878e-01, -2.376091561987125e-02, -2.967009808386782e-03, -5.633360473393805e-03, -1.126913767127457e-01, -8.377319821075225e-03, -8.377319821075211e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms2bs_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2bs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.942479504035847e-09, -4.942390323740259e-09, -4.940905090465611e-09, -4.942302632239250e-09, -4.942442648748250e-09, -4.942442648748250e-09, -1.225196089646716e-05, -1.225691459011155e-05, -1.241291649647396e-05, -1.246449432945052e-05, -1.225235699468886e-05, -1.225235699468886e-05, -3.751540769395708e-03, -3.757905542610767e-03, -3.965909896857991e-03, -4.075468118321562e-03, -3.753947353767227e-03, -3.753947353767227e-03, -6.643959036676222e-01, -6.997055003961992e-01, -2.061904757844329e-03, -9.899009259219570e-01, -6.787644798908187e-01, -6.787644798908187e-01, -5.492656425639989e+00, -5.505016564593613e+00, -2.246199281332197e+00, -3.915350260351761e+00, -5.718067505590240e+00, -5.718067505590240e+00, -9.028726532160164e-07, -9.022827137369375e-07, -9.021739816618525e-07, -9.017521621095469e-07, -9.034309130615813e-07, -9.034309130615813e-07, -8.102927627261043e-05, -7.402159145489523e-05, -7.636713417931372e-05, -7.062871238961076e-05, -8.235868311095590e-05, -8.235868311095590e-05, -2.722506168219598e-02, -2.593534430906899e-02, -2.755588873106438e-02, -2.296046960939000e-02, -2.371152928735544e-02, -2.371152928735544e-02, -1.210889366699574e+00, -3.401904843417449e-01, -1.386444714882927e+00, -1.562234956606254e-04, -1.240306482886342e+00, -1.240306482886342e+00, -4.153787472221468e+00, -4.162622085411994e+00, -1.190845293129243e+01, -2.181880649596673e+00, -6.146966680716253e+00, -6.146966680716251e+00, -1.416686525433906e-02, -1.284893645761937e-02, -1.329244166836209e-02, -1.365616339673232e-02, -1.347558083935706e-02, -1.347558083935706e-02, -2.560533710828685e-02, -1.490111409857355e-02, -1.716830189356970e-02, -2.001719499657123e-02, -1.906281547031445e-02, -1.906281547031446e-02, -1.779520508648614e-02, -1.727482506718994e-01, -1.655330697799580e-01, -1.411540592813026e-01, -1.595310477771051e-01, -1.595310477771051e-01, -5.029044923368970e-02, -1.880623567440596e+00, -1.893134339095341e+00, -2.050622134927625e-01, -2.035632716658930e+00, -2.035632716658930e+00, -4.145815263668714e+00, -7.161187163517148e+00, -6.164386944034154e+00, -2.518895419093408e+00, -8.977171315713552e+00, -8.977171315713532e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms2bs_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2bs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms2bs_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2bs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [3.028881958154644e-04, 3.028805131268671e-04, 3.026922380670583e-04, 3.028087028675064e-04, 3.028855911601236e-04, 3.028855911601236e-04, 3.023213907433741e-03, 3.025699766955155e-03, 3.105306270891125e-03, 3.137876622903195e-03, 3.023482299917939e-03, 3.023482299917939e-03, 3.096508128446681e-05, 3.480513558786568e-05, 3.385284429693988e-04, 9.045173978416538e-04, 3.244038682463477e-05, 3.244038682463477e-05, 2.708278911554236e-02, 3.139078036988679e-02, 2.702929398180582e-04, 6.249597755215700e-03, 2.861570293358161e-02, 2.861570293358161e-02, 6.707021181015683e-08, 1.063369836191509e-07, 1.233109181488243e-04, 2.866799322870150e-09, 9.318431117646297e-08, 9.318431117646437e-08, 1.116593298238407e-04, 1.108048085762227e-04, 1.101558799217098e-04, 1.095729691030574e-04, 1.131305202032598e-04, 1.131305202032598e-04, 5.006584425691683e-03, 4.496632804815217e-03, 4.504333167592019e-03, 4.067866646945162e-03, 5.336482115900587e-03, 5.336482115900587e-03, 5.194517411205975e-02, 6.256885884305227e-02, 3.639617409500216e-02, 3.035276338028162e-02, 5.348533156955382e-02, 5.348533156955382e-02, 2.959569466586891e-03, 9.363541778350184e-03, 3.397535929967036e-03, 6.499078423967353e-03, 6.409992030339070e-03, 6.409992030339070e-03, 4.956631716757068e-09, 8.438128833152351e-09, 9.451560819591303e-09, 4.224199974533062e-04, 5.537398267388884e-09, 5.537398267388851e-09, 2.939477577182154e-02, 2.469757415626183e-02, 2.627615804490087e-02, 2.757227534503825e-02, 2.692676473908985e-02, 2.692676473908983e-02, 5.580371395368140e-02, 1.198191387257170e-02, 2.049645344964176e-02, 3.150574731259626e-02, 2.674453059906672e-02, 2.674453059906677e-02, 4.348243065187527e-02, 9.498117697988334e-03, 2.581010384409866e-02, 5.232448489550194e-02, 4.169663249219349e-02, 4.169663249219350e-02, 4.527041916692635e-02, 4.625601339977935e-05, 3.159165112038098e-04, 6.343956561070775e-02, 2.295651324017957e-03, 2.295651324017935e-03, 3.096508131887789e-07, 3.535576581757357e-12, 4.566970017369671e-10, 2.503983759266335e-03, 3.657686430506164e-09, 3.657686430506171e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
