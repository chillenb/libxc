
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ms2bs_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2bs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.003984473228987e+01, -2.003991905203723e+01, -2.004028408184722e+01, -2.003906915670041e+01, -2.003988361219667e+01, -2.003988361219667e+01, -3.225585444202495e+00, -3.225594411501267e+00, -3.225978705857704e+00, -3.226087818310691e+00, -3.225603276834198e+00, -3.770609620634444e+00, -6.160928154481771e-01, -7.592432332063036e-01, -7.478425647926011e-01, -7.497207192385414e-01, -7.595175894991347e-01, -7.595175894991347e-01, -2.106604040727434e-01, -2.126207506962995e-01, -7.371383248762278e-01, -1.710540950861043e-01, -2.112606138832558e-01, -2.112606138832558e-01, -1.532527053996313e-02, -1.604809179642895e-02, -6.347693724659990e-02, -7.370903605680537e-03, -1.588077757265459e-02, -1.588077757265459e-02, -5.407315069886423e+00, -5.407658112317433e+00, -5.407348042392184e+00, -5.002177656121959e+00, -5.407493413241594e+00, -5.407493413241594e+00, -1.811854837657953e+00, -1.824938091364937e+00, -1.806550713812403e+00, -1.816771432162832e+00, -1.827574747955387e+00, -2.156108699663473e+00, -6.175784023827374e-01, -6.594891109828392e-01, -5.918243493039209e-01, -6.080950100698216e-01, -6.372720383785088e-01, -5.594921729855070e-01, -8.934104952238454e-02, -2.226597113458517e-01, -8.820020852337922e-02, -2.026417397628077e+00, -1.468456027387004e-01, -1.468456027387004e-01, -4.331445385208797e-03, -8.125059055428575e-03, -6.089387329393622e-03, -5.556669227323237e-02, -4.510341297145615e-03, -7.403512289023561e-03, -6.150647916672487e-01, -6.140449969622250e-01, -6.010255810240052e-01, -6.146940062305638e-01, -6.145541018028605e-01, -6.145541018028605e-01, -5.961167425632060e-01, -5.364742202098889e-01, -5.536424176245900e-01, -5.696390805439315e-01, -5.614888923012268e-01, -4.997977269484284e-01, -6.946567123221580e-01, -2.132405460524979e-01, -3.112256124096717e-01, -3.251108744585025e-01, -3.442532017916135e-01, -3.442532017916133e-01, -4.207306292721384e-01, -5.908211347115333e-02, -7.864646754006313e-02, -3.587323470319915e-01, -7.250570740696895e-02, -1.085989623140291e-01, -1.796862792972991e-02, -2.225643575603642e-03, -4.227157510710710e-03, -1.036278856943465e-01, -6.292469884352901e-03, -6.292469884352892e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ms2bs_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2bs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.830618180662223e+01, -2.830638584642012e+01, -2.830733420872503e+01, -2.830400623001781e+01, -2.830628891287694e+01, -2.830628891287694e+01, -4.316671364189093e+00, -4.316672382191633e+00, -4.316853919785829e+00, -4.317129321286954e+00, -4.316692180709490e+00, -4.532155086571436e+00, -8.262724053908922e-01, -8.546032392912029e-01, -8.320638597741432e-01, -8.383502644870598e-01, -8.551725030721198e-01, -8.551725030721198e-01, -2.341225814926902e-01, -2.371637224916827e-01, -9.873520482954121e-01, -1.857891841778185e-01, -2.350315997109020e-01, -2.350315997109020e-01, -2.031318034312995e-02, -2.125967420604985e-02, -7.988720366281667e-02, -9.819852011242773e-03, -2.103782334435494e-02, -2.103782334435494e-02, -6.997918342560846e+00, -6.999881108820898e+00, -6.998129130217818e+00, -7.250834949316832e+00, -6.998911222219601e+00, -6.998911222219601e+00, -2.429153127757155e+00, -2.446079959684371e+00, -2.422279634858948e+00, -2.435539288523334e+00, -2.449439505262012e+00, -2.558077239425695e+00, -7.653810553607190e-01, -8.425527883372979e-01, -7.214766440161589e-01, -7.603888508201239e-01, -7.985026827170092e-01, -7.510909804879078e-01, -1.192503606784950e-01, -2.402970903371812e-01, -1.177345200768878e-01, -2.541813356021172e+00, -1.604464623928440e-01, -1.604464623928440e-01, -5.775282095000487e-03, -1.082134820232597e-02, -8.109116200707051e-03, -7.412118253744455e-02, -6.013813005758666e-03, -9.861218007656864e-03, -8.139097969981520e-01, -8.066902974626444e-01, -8.288568883194922e-01, -8.112622562221492e-01, -8.102604708211595e-01, -8.102604708211595e-01, -7.867723838277816e-01, -6.619291773618894e-01, -6.976299982966607e-01, -7.314325202228156e-01, -7.141218432589844e-01, -6.939908002515488e-01, -8.800576106087770e-01, -2.857380137115784e-01, -3.522263388380157e-01, -4.358087930520694e-01, -4.001754415333731e-01, -4.001754415333730e-01, -5.626393254537839e-01, -7.502152767625914e-02, -9.695229446183427e-02, -4.323070168046197e-01, -9.676473873931676e-02, -1.246080960502683e-01, -2.383667003550552e-02, -2.967263757341819e-03, -5.633703654447457e-03, -1.189354213764380e-01, -8.382583435283300e-03, -8.382583435283288e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms2bs_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2bs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.343255265294343e-08, -1.343313994787829e-08, -1.343559754368334e-08, -1.342605775304213e-08, -1.343286278107174e-08, -1.343286278107174e-08, -6.982965562699807e-06, -6.982631495182129e-06, -6.971505951099651e-06, -6.973602971450848e-06, -6.982739984726442e-06, -3.492378341103568e-06, -5.297912017752818e-03, -1.959165133771080e-03, -2.024564320909901e-03, -2.030390771881228e-03, -1.957575968499438e-03, -1.957575968499438e-03, -3.205459636096900e-01, -3.119289480553313e-01, -2.524573610795615e-03, -4.295157569685674e-01, -3.178278303948219e-01, -3.178278303948219e-01, -5.272975001899848e+00, -5.227611742348434e+00, -1.641200449221117e+00, -1.885118474087240e+00, -5.467571510635765e+00, -5.467571510635764e+00, -8.525055796668229e-07, -8.523300540623508e-07, -8.524893099345463e-07, -6.200406651866933e-06, -8.524136042754336e-07, -8.524136042754336e-07, -7.172653662881733e-05, -6.952205725954441e-05, -7.263468547806088e-05, -7.089773669637241e-05, -6.907016932085602e-05, -3.233437562257203e-05, -4.939099312526536e-03, -3.840541059914022e-03, -5.806942837141214e-03, -5.274580150732392e-03, -4.376456637908976e-03, -8.468419921826774e-03, -1.114249497096446e+01, -2.191066087383176e-01, -1.173872306786957e+01, -4.282368540706799e-05, -7.239513755380159e-01, -7.239513755380159e-01, -1.991329033529848e+06, -2.377939344190131e+00, -9.344216340420280e+00, -7.388800054704799e+01, -1.693707936940789e+06, -2.930361277080770e+00, -5.112504118660057e-03, -5.141124627432448e-03, -3.134919318439725e-02, -5.122987831179277e-03, -5.126911698753978e-03, -5.126911698753978e-03, -5.792101399841925e-03, -8.655916616583305e-03, -7.698550102642977e-03, -6.908929005406727e-03, -7.299384256800139e-03, -2.599048767860064e-02, -3.112000948797846e-03, -3.629685812425981e-01, -7.013856511705954e-02, -6.908968588047974e-02, -4.874496973377523e-02, -4.874496973377521e-02, -2.386277767111529e-02, -1.573267698157701e+00, -1.269876481566248e+00, -4.270447574974594e-02, -2.564033982692348e+01, -1.270866988078426e+00, -2.062783384009008e+00, -2.634630328855975e+00, -5.175488877125558e+00, -1.527295478985918e+00, -4.120393756125830e+00, -4.120393756125827e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms2bs_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2bs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([9.301162911988707e-04, 9.301983985900232e-04, 9.305552590117592e-04, 9.292197447736739e-04, 9.301595591178129e-04, 9.301595591178129e-04, 1.196317425276120e-04, 1.195764619549139e-04, 1.178772258221797e-04, 1.185331374700163e-04, 1.196158350004757e-04, 1.541538687732737e-18, 4.501236892492073e-04, -2.518394535476359e-18, 2.984434151598522e-18, -1.728102532120103e-17, -1.333283259878759e-17, -1.333283259878759e-17, 1.770007359097019e-17, 2.144098901038827e-17, 1.957933152885737e-04, -7.869987667742828e-18, 9.924673231640044e-18, 9.924673231640044e-18, 8.383974597551998e-23, -6.673138875069319e-22, -1.382384622200651e-19, -5.681644263662694e-25, -4.597718357180629e-22, 1.157803435702288e-22, -4.230614165895780e-18, 5.189137306911777e-19, -2.878439736158153e-19, 8.429021837626541e-03, 1.549075321404639e-19, 1.549075321404639e-19, 2.562962647542177e-04, 2.528982396459644e-04, 2.569809985276894e-04, 2.553294470292976e-04, 2.517182863566341e-04, 4.790543165087217e-18, 2.079011982475526e-17, -1.089421381484615e-17, -2.671045894559946e-17, 1.841841963438422e-17, 1.068850545588362e-17, 2.423630050504012e-03, 7.724225399930515e-05, 6.210457544343061e-18, 8.711548822879303e-05, 3.853482654002225e-18, 6.473015073591066e-18, 6.473015073591066e-18, 1.855478403516310e-08, -3.363915126899355e-24, -6.221834027344310e-24, 1.979880370720356e-05, 2.136869678341954e-08, 3.531007233600862e-24, 1.829820201196572e-17, -4.480851074485217e-18, 7.646974970019002e-02, -1.302769407725635e-17, -1.680691425052387e-19, -1.680691425052387e-19, 1.447509081990047e-17, -1.933631502549003e-17, 3.018857021831980e-17, 3.174143478258656e-17, -2.433775367035939e-17, 2.273205499782708e-02, -1.291377878277831e-17, 8.311481771849953e-04, -2.318799525897377e-17, 1.424420984903675e-03, -1.027839045397688e-17, -2.223356361011376e-17, 7.845569888095507e-04, -1.166706724135978e-20, -2.862003273067746e-20, 9.104015178455483e-18, 7.085387905160777e-05, -1.033916713846568e-18, 2.041576051279948e-22, 5.268527506383248e-27, -3.768260858998468e-26, -9.596307672606108e-19, -1.714133986957742e-25, 3.160852662096967e-24])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
