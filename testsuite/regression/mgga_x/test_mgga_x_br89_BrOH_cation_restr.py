
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_br89_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.882049740589756e+01, -1.882053189337885e+01, -1.882075113517279e+01, -1.882023685656413e+01, -1.882049697806270e+01, -1.882049697806270e+01, -3.617904830168764e+00, -3.617831243420438e+00, -3.616084452076205e+00, -3.618499515979593e+00, -3.617321630277501e+00, -3.617321630277501e+00, -7.712969833000426e-01, -7.715604899086652e-01, -7.791462018098951e-01, -7.799990910919414e-01, -7.786332149958110e-01, -7.786332149958110e-01, -2.440174198561112e-01, -2.443077823396948e-01, -9.261274822049800e-01, -2.226314004894532e-01, -2.264652371981575e-01, -2.264652371981575e-01, -7.933925030881135e-02, -7.953886005761385e-02, -1.354736952715609e-01, -7.275450162310465e-02, -7.335496870000852e-02, -7.335496870000845e-02, -8.657056582093100e+00, -7.005568230685700e+00, -3.816957462212766e+00, -1.036514777171780e+01, -4.144019027997534e+00, -5.952689485355768e+00, -1.430847448127448e+00, -2.633564292447536e+00, -2.338428666166593e+00, -2.344919508054448e+00, -2.344639684713337e+00, -2.137849071437655e+00, -1.224331191174953e+00, -9.753398355797729e-01, -1.117789133623299e+00, -5.987778798145379e-01, -6.555534936485269e-01, -6.957823698209390e-01, -6.689213921257364e-02, -4.250599609170662e-01, -6.170246021025260e-02, -2.053539780221683e+00, -1.838900390127948e-01, -1.628657899594399e-01, -1.443747612379629e-01, -3.067386485186201e+00, -1.900915898110831e-03, -4.153620691215914e-02, -8.446812537754304e-02, -2.290014593691746e-03, -3.027408292967510e+01, -4.281161594513081e-01, -4.289837488477247e-01, -4.590355833166520e+00, -4.293463657331597e-01, -8.944426731488025e+01, -4.189129473640951e-01, -5.483529816527165e-01, -9.736499104563682e-01, -4.222217805686693e-01, -6.211380757248380e-01, -1.262555028263361e+00, -1.405903508796412e+00, -1.601808376762779e-01, -1.923358039734789e-01, -2.561240353386378e-01, -4.448712674373739e-01, -4.051242203317284e-01, -5.178286750162633e-01, -2.449079805273111e-02, -1.562413255072893e-01, -3.735200445342682e-01, -5.285560333604628e-02, -1.484114686224674e-01, -6.214304645975730e-03, -6.645242587195092e-04, -1.394865447487312e-03, -5.067607621936474e-02, -2.118981227351308e-03, -2.118980409332970e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_br89_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.824653805498514e+01, -2.824661511556516e+01, -2.824701044903667e+01, -2.824586302387583e+01, -2.824645680406012e+01, -2.824645680406012e+01, -4.577876769909533e+00, -4.577943315917063e+00, -4.579615137878791e+00, -4.577739825303566e+00, -4.578137824170081e+00, -4.578137824170081e+00, -8.738717339633698e-01, -8.727855776782004e-01, -8.478805570164040e-01, -8.525522260186624e-01, -8.515425215866129e-01, -8.515425215866129e-01, -2.280906252948772e-01, -2.307067163441100e-01, -1.037314481655112e+00, -1.860475308538307e-01, -1.991142355520802e-01, -1.991142355520803e-01, -3.851066577038011e-02, -3.894135395824396e-02, -8.145150490238595e-02, -3.367034317637840e-02, -3.517496345631502e-02, -3.517496345631507e-02, -8.354384760862745e+00, -7.468177804578984e+00, -5.113176627480879e+00, -9.376109509243005e+00, -6.029328224037235e+00, -7.045864186954918e+00, -1.910376175508735e+00, -2.719745647625541e+00, -2.517291234633956e+00, -2.532274455849705e+00, -2.551741538412180e+00, -2.443406484070488e+00, -1.089575933507948e+00, -9.786054675343892e-01, -9.981895475325224e-01, -7.659837571650835e-01, -7.940164313468437e-01, -8.045478317859576e-01, -8.951226149802650e-02, -3.505941766542870e-01, -8.230883307229200e-02, -2.615008123486678e+00, -1.436252911285795e-01, -1.203476650440469e-01, -8.688215502258409e-02, -1.802758364571838e+00, -2.534554469779789e-03, -5.545928395910524e-02, -4.905419161414647e-02, -3.053353387494724e-03, -1.918125867772155e+01, -5.708242777935321e-01, -5.719784904609783e-01, -3.266733105309281e+00, -5.724704286765181e-01, -5.466707738498867e+01, -5.585508727882557e-01, -6.353416790675586e-01, -8.932102880608394e-01, -6.065403056072584e-01, -7.122542749913550e-01, -1.081567755091074e+00, -1.251574599413716e+00, -2.137853087771346e-01, -2.566468470814378e-01, -3.451429245211497e-01, -4.371895077725574e-01, -4.120824140339159e-01, -5.891768256234188e-01, -3.267765973888515e-02, -1.006702687749510e-01, -4.371728847406087e-01, -7.052798632615583e-02, -1.025390597857540e-01, -8.285770037985824e-03, -8.860327701928819e-04, -1.859820916659336e-03, -6.728140538016701e-02, -2.825311169709664e-03, -2.825308740233398e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_br89_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.654437645887178e-09, -4.654344123778391e-09, -4.654027242577412e-09, -4.655417144552952e-09, -4.654674806017032e-09, -4.654674806017032e-09, -9.782680118780190e-06, -9.783282729608071e-06, -9.797352145693501e-06, -9.776484644801571e-06, -9.787370106111297e-06, -9.787370106111297e-06, -4.825569868755253e-03, -4.819665468386315e-03, -4.669552686444855e-03, -4.639442096201514e-03, -4.672081283514985e-03, -4.672081283514985e-03, -5.503118874834151e-01, -5.394447276242311e-01, -2.333288379236739e-03, -1.021048629647830e+00, -8.247872382271392e-01, -8.247872382271384e-01, -6.122437205429193e+03, -5.362339478238709e+03, -3.817194252435315e+01, -2.813788434581026e+04, -1.548269617068266e+04, -1.548269617068264e+04, -4.342100776821005e-07, -7.721253364534504e-07, -5.047389703769001e-10, -2.853669358862608e-07, -2.795502870298613e-07, -1.359489156047033e-06, -2.081946301592171e-09, -3.841292750969907e-05, -5.765648127991139e-05, -5.695063784892627e-05, -5.688034220891429e-05, -8.160114489974553e-05, -1.597193002574567e-03, -2.389630933604316e-03, -2.243037506162439e-03, -1.319544481588532e-02, -9.235398662856957e-03, -7.301235713344674e-03, -4.112953572407710e-03, -1.495552299209723e-01, -7.527487593373509e-05, -9.562885460600345e-05, -2.241370475124877e+00, -3.046610796454987e+00, -2.155650448007708e+04, -2.310563467595062e+02, 3.892382093365320e-08, -3.938031982739402e-03, -2.990016672988724e+04, -6.577688370426028e-06, -9.880596074150136e-06, -3.213079566093159e-12, -1.070189014088015e-14, -1.496147806351996e-04, -3.135660777986343e-11, -2.400987629941951e-06, -3.743485273141012e-14, -1.886639198175390e-02, -3.341062331556116e-03, -1.638490755110178e-03, -1.151931931617008e-02, -1.838328078859402e-03, -9.326544523347742e-04, -7.100471835032303e-06, -2.097385112875921e-06, -1.371228823127050e-04, -5.245903393133365e-02, -6.878923535953320e-02, -2.373898871936334e-02, -1.069242558563633e-02, -1.643239423448611e+01, -8.763445113793489e-02, -3.755663369980306e-04, -7.173329062251612e+00, -4.382784287935344e-05, -6.202897588395096e-03, -3.723308989997831e-05, -5.695558165396779e-01, -2.465530501656383e-04, -6.925047669137678e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_br89_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [-2.249630538237725e-04, -2.249604157634635e-04, -2.249540478072857e-04, -2.249932084691735e-04, -2.249719288175073e-04, -2.249719288175073e-04, -2.040488342959122e-03, -2.040627249988426e-03, -2.044017999304868e-03, -2.040034939689437e-03, -2.041630076712509e-03, -2.041630076712509e-03, -7.222543286063141e-03, -7.189872373724232e-03, -6.425510070776883e-03, -6.544374379554041e-03, -6.555862382127764e-03, -6.555862382127764e-03, -1.417997895695982e-02, -1.454111897973880e-02, -5.536839719314690e-03, -1.151193487662763e-02, -1.316710408515519e-02, -1.316710408515518e-02, -6.654932385279588e-03, -6.796591884750523e-03, -8.124834656596290e-03, -5.891653993830580e-03, -6.432195377799320e-03, -6.432195377799308e-03, -3.039673299595668e-04, -5.408215442842319e-04, -3.533505407412334e-07, -1.998728038900181e-04, -1.957526758259027e-04, -9.519705484118431e-04, -7.740073659018367e-08, -1.459383155733653e-03, -2.109629287949929e-03, -2.124348525998352e-03, -2.156599309657291e-03, -3.093880344666003e-03, -1.600043368926180e-03, -3.069142946597850e-03, -1.780170464933381e-03, -1.176348987462227e-02, -9.706616149996395e-03, -7.673766458518889e-03, -1.551915208512017e-05, -3.871198084648364e-03, -2.248881395100756e-07, -3.355127370122201e-03, -1.366829006088803e-02, -1.857879388112304e-02, -2.073214816087268e-03, -4.519932086275976e-05, 3.404193633572478e-15, -3.579572366454068e-06, -4.571916325934986e-03, -1.005768332501684e-12, -1.004311220551750e-05, -3.210047604142213e-12, -1.075704136554848e-14, -1.511399411393758e-04, -3.159707587223385e-11, -2.419400365084113e-06, -3.503943398065793e-14, -1.117072556295482e-02, -2.271516711113994e-03, -1.270021817821743e-03, -8.356540253977475e-03, -1.333591175777322e-03, -1.380222106640954e-03, -3.706747209770552e-07, -1.896516045044618e-07, -2.857325163302580e-05, -7.189342396250809e-03, -9.427344141016942e-03, -1.096793967173459e-02, -1.995515702695698e-06, -7.771260349429992e-03, -1.635972587631964e-02, -7.047727765663592e-07, -1.346118259916099e-02, -1.339164576856150e-10, -2.317590600759589e-11, -1.286577539882172e-12, -8.850236130916596e-04, -2.986762950192568e-11, -8.389056952754886e-12]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_br89_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [7.198817722360722e-04, 7.198733304430830e-04, 7.198529529833151e-04, 7.199782671013551e-04, 7.199101722160232e-04, 7.199101722160232e-04, 6.529562697469181e-03, 6.530007199962959e-03, 6.540857597775578e-03, 6.528111807006198e-03, 6.533216245480027e-03, 6.533216245480027e-03, 2.311213851540204e-02, 2.300759159591752e-02, 2.056163222648603e-02, 2.094199801457293e-02, 2.097875962280886e-02, 2.097875962280886e-02, 4.537593266227143e-02, 4.653158073516418e-02, 1.771788710180698e-02, 3.683819160520842e-02, 4.213473307249663e-02, 4.213473307249661e-02, 2.129578363289468e-02, 2.174909403120168e-02, 2.599947090110813e-02, 1.885329278025786e-02, 2.058302520895782e-02, 2.058302520895778e-02, 9.726954558706138e-04, 1.730628941709541e-03, 1.130721730371864e-06, 6.395929724480578e-04, 6.264085626428899e-04, 3.046305754917899e-03, 2.476823570886885e-07, 4.670026098347692e-03, 6.750813721439776e-03, 6.797915283194728e-03, 6.901117790903334e-03, 9.900417102931209e-03, 5.120138780563777e-03, 9.821257429113116e-03, 5.696545487786820e-03, 3.764316759879136e-02, 3.106117167998843e-02, 2.455605266726045e-02, 4.966128667238775e-05, 1.238783387087477e-02, 7.196420464327196e-07, 1.073640758439104e-02, 4.373852819484172e-02, 5.945214041959364e-02, 6.634287411479262e-03, 1.446378267608313e-04, -1.089341975171701e-14, 1.145463157265431e-05, 1.463013224299196e-02, 3.218458660528708e-12, 3.213795905765601e-05, 1.027215233386437e-11, 3.442253235698415e-14, 4.836478116460026e-04, 1.011106427922408e-10, 7.742081168269161e-06, 1.121261887381054e-13, 3.574632180145543e-02, 7.268853475564783e-03, 4.064069817029608e-03, 2.674092881272793e-02, 4.267491762487432e-03, 4.416710741251055e-03, 1.186159107126924e-06, 6.068851344143278e-07, 9.143440522567745e-05, 2.300589566800258e-02, 3.016750125125420e-02, 3.509740694955069e-02, 6.385650248627083e-06, 2.486803311817598e-02, 5.235112280422286e-02, 2.255272885011950e-06, 4.307578431731517e-02, 4.285326645870206e-10, 7.416289915906240e-11, 4.117048137679687e-12, 2.832075561893297e-03, 9.557641443260462e-11, 2.684498225542625e-11]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
