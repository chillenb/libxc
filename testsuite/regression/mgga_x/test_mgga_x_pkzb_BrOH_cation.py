
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_pkzb_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_pkzb", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.989578641739059e+01, -1.989584634784266e+01, -1.989612812264042e+01, -2.046603317025828e+01, -2.046639866733401e+01, -2.103716725107801e+01, -3.478947196722496e+00, -3.720840422713611e+00, -3.718089386093737e+00, -3.719536537392458e+00, -3.718994821161795e+00, -3.477077909961428e+00, -6.590160883612239e-01, -7.324616555782872e-01, -8.066914278234536e-01, -7.288922876379340e-01, -6.584970873570148e-01, -8.044113984903767e-01, -2.094319816388022e-01, -2.100949745856191e-01, -9.514999127063997e-01, -2.021101600880925e-01, -2.254988760778263e-01, -2.253370518930227e-01, -1.011216185437967e-02, -1.064897447486801e-02, -5.866019780708116e-02, -5.830217594054538e-03, -8.138156272020585e-03, -8.138156272020585e-03, -5.055943110274466e+00, -5.055615195599001e+00, -5.055916952518137e+00, -5.055628212481320e+00, -4.959358463806106e+00, -4.959443613643229e+00, -2.150707044632075e+00, -2.154129278398903e+00, -2.149092831591995e+00, -2.151694267612246e+00, -1.997829703945381e+00, -2.153366498155000e+00, -5.719049767476887e-01, -6.260815183040227e-01, -5.723606238868832e-01, -5.752590671975524e-01, -5.801057607784934e-01, -6.040945379803440e-01, -1.496140832898716e-01, -2.355271610798383e-01, -1.392119093137459e-01, -1.934131318875379e+00, -1.693405957858934e-01, -1.693405957858934e-01, -4.501092068128612e-03, -5.699392146905905e-03, -4.364674867254500e-03, -9.459195753625002e-02, -5.482773894301649e-03, -5.482773894301650e-03, -5.596197052768916e-01, -5.610330070467492e-01, -5.508083154368701e-01, -5.560815923377764e-01, -5.514418146580935e-01, -5.558638475973452e-01, -5.450671145948822e-01, -4.841932124950542e-01, -4.991896574850022e-01, -5.283786830183566e-01, -5.236729228830692e-01, -5.068677639858244e-01, -6.426766044740131e-01, -2.911744400045393e-01, -2.950649213339711e-01, -3.547707772684863e-01, -3.482369445304027e-01, -3.185651196302453e-01, -4.824686549136062e-01, -5.606740428516863e-02, -7.639917502263495e-02, -3.555980651074215e-01, -1.193425218221539e-01, -1.193425218221539e-01, -1.425421753651434e-02, -1.523316299562154e-03, -3.203544880976000e-03, -1.117430049347291e-01, -5.034981636704275e-03, -5.034981544158710e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_pkzb_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_pkzb", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.676663447458874e+01, -2.676664453819470e+01, -2.676672748773409e+01, -2.676671209792096e+01, -2.676703966722286e+01, -2.676715531721788e+01, -2.676598929116487e+01, -2.520152711573619e+01, -2.676668938053223e+01, -2.520233452113691e+01, -2.520252527856714e+01, -2.520233452113691e+01, -3.597231288240025e+00, -4.212493800494229e+00, -3.597460253473933e+00, -3.597150678305283e+00, -3.601891723205211e+00, -3.602722046550887e+00, -3.600584683129714e+00, -3.600640915137545e+00, -3.596144617228829e+00, -3.604700421960835e+00, -4.211691671050651e+00, -3.604700421960835e+00, -7.071460322800316e-01, -7.159904507143785e-01, -7.042832603943833e-01, -5.987998029410202e-01, -5.746004313098148e-01, -5.700634842776250e-01, -5.785895073055978e-01, -6.825073398959389e-01, -7.253248211099131e-01, -6.209811467407220e-01, -6.057975392848061e-01, -5.562242200232952e-01, -1.547669712672043e-01, -1.561591104768265e-01, -1.577421711459377e-01, -1.578694726562349e-01, -7.350251418766055e-01, -7.355645538920021e-01, -1.948644366116198e-01, -1.833465164305420e-01, -1.623835033127943e-01, -1.891064672211341e-01, -1.623835033127941e-01, -1.920250267643309e-01, -1.303753711688924e-02, -1.385390078613492e-02, -1.366179852001662e-02, -1.463515283390128e-02, -7.579830900103103e-02, -7.987258390501370e-02, -7.837270207845195e-03, -7.706678505554553e-03, -1.163075764666886e-02, -6.618653285580168e-03, -1.163075764666886e-02, -6.618653285580168e-03, -6.271555642819271e+00, -6.270067413493618e+00, -6.274970810995185e+00, -6.273367081355437e+00, -6.271783651881891e+00, -6.270208382039139e+00, -6.274712566816478e+00, -6.273204498542942e+00, -6.536583778991663e+00, -6.271720672413708e+00, -6.273276966572390e+00, -6.534987874337045e+00, -1.939698394557238e+00, -1.941362883052998e+00, -1.971450486785108e+00, -1.972139240093717e+00, -1.912065785682820e+00, -1.921566907449132e+00, -1.939736957100943e+00, -1.949587824526640e+00, -1.978359317812216e+00, -2.338735264190199e+00, -1.978359317812216e+00, -1.960564877229857e+00, -6.559124751564598e-01, -7.279977974628105e-01, -7.539408507183538e-01, -7.562063019807300e-01, -5.552200683464026e-01, -5.953218693714469e-01, -6.156736522655438e-01, -6.474905786380276e-01, -6.967440180997663e-01, -7.216693545877096e-01, -6.967440180997663e-01, -6.512098065755312e-01, -1.801925320997747e-01, -1.812612365751439e-01, -1.714865690388028e-01, -1.921440177790673e-01, -1.688131889691165e-01, -1.738879282907437e-01, -2.188152937441485e+00, -2.187348205678941e+00, -1.825424097420625e-01, -1.690299737586151e-01, -1.825424097420625e-01, -1.690299737586152e-01, -5.879441080159931e-03, -6.110163381174499e-03, -7.540835485840617e-03, -7.654966557535360e-03, -5.638831187748497e-03, -5.971718869575764e-03, -1.231747885737425e-01, -1.244206119667915e-01, -5.759213456027907e-03, -7.909227065305485e-03, -5.759213456027906e-03, -7.909227065305486e-03, -7.307830089705342e-01, -7.338342539816591e-01, -7.186868974573839e-01, -7.218339727622819e-01, -7.362339574072102e-01, -7.391048791448863e-01, -7.374462403213278e-01, -7.295595750004837e-01, -7.368422313573805e-01, -7.397011192485330e-01, -7.368422313573805e-01, -7.278294486918171e-01, -7.101178315957222e-01, -7.127219264026814e-01, -5.326617898429107e-01, -6.083931572135819e-01, -5.858714950945804e-01, -6.445120229040719e-01, -6.380572036543942e-01, -6.406344964401536e-01, -6.118034975139156e-01, -6.146702466815755e-01, -6.118034975139156e-01, -6.604534446619288e-01, -7.782395183541738e-01, -8.373895133575489e-01, -1.996963665022947e-01, -2.001747029111649e-01, -2.647971045173226e-01, -2.325593378073800e-01, -4.099387219975392e-01, -3.442431631341287e-01, -2.803968888822289e-01, -2.807041753338764e-01, -2.803968888822286e-01, -3.406567287085744e-01, -4.693676085017381e-01, -4.765593483139670e-01, -7.438446158393135e-02, -7.489225612802175e-02, -9.937862076917851e-02, -1.025394756384740e-01, -3.429380119939272e-01, -3.598491510990432e-01, -1.461183383531315e-01, -1.490009576798627e-01, -1.461183383531315e-01, -1.490009576798627e-01, -1.864941883714865e-02, -1.932552222319562e-02, -2.028762018042590e-03, -2.033398892481117e-03, -4.128060842656288e-03, -4.390525807379131e-03, -1.421190968328291e-01, -1.428359109472089e-01, -5.455197003193633e-03, -7.249394375330288e-03, -5.455197003193627e-03, -7.249399296271447e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_pkzb_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_pkzb", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.231571675119898e-08, 0.000000000000000e+00, -1.231649787848168e-08, -1.231566294183369e-08, 0.000000000000000e+00, -1.231645862546208e-08, -1.231541986488591e-08, 0.000000000000000e+00, -1.231612997152146e-08, -1.231603626967127e-08, 0.000000000000000e+00, -1.616575265159918e-08, -1.231569096097044e-08, 0.000000000000000e+00, -1.616436847858881e-08, -1.616360484950356e-08, 0.000000000000000e+00, -1.616436847858881e-08, -2.370680055015629e-05, 0.000000000000000e+00, -8.824936674614979e-06, -2.370675251916013e-05, 0.000000000000000e+00, -2.370794062400299e-05, -2.370613807835267e-05, 0.000000000000000e+00, -2.370501065696237e-05, -2.369839238744389e-05, 0.000000000000000e+00, -2.369706839327790e-05, -2.372210791773187e-05, 0.000000000000000e+00, -2.369462563640710e-05, -8.824233724037837e-06, 0.000000000000000e+00, -2.369462563640710e-05, 3.987537343716837e-03, 0.000000000000000e+00, 3.468429481451993e-03, 4.147503291061271e-03, 0.000000000000000e+00, -1.503153919580321e-02, -1.561364834232984e-02, 0.000000000000000e+00, -1.586920047154725e-02, -1.572168264796607e-02, 0.000000000000000e+00, 5.312110602198262e-03, 3.079575799962893e-03, 0.000000000000000e+00, 9.489051603965390e-03, -1.466048267872640e-02, 0.000000000000000e+00, -1.668726546352269e-02, 2.581834266161326e+00, 0.000000000000000e+00, -2.593668766104418e+00, 2.384460255267126e+00, 0.000000000000000e+00, -2.521285087814499e+00, -5.656066919194578e-03, 0.000000000000000e+00, 5.032674289523786e-03, -2.068954826554961e+00, 0.000000000000000e+00, -2.524411009347991e+00, -2.243787167099162e+00, 0.000000000000000e+00, -1.142099229653245e+00, -2.243787167099161e+00, 0.000000000000000e+00, 1.753792082459173e+00, -2.884067613671987e-02, 0.000000000000000e+00, -3.276189621174365e-02, 3.747007139710103e-02, 0.000000000000000e+00, -3.911997567324711e-02, 3.895178118067480e-01, 0.000000000000000e+00, -3.930403594618063e-01, -6.523343730486679e-03, 0.000000000000000e+00, -6.404857025748672e-03, -2.124599334784452e-02, 0.000000000000000e+00, -1.540216432199927e-02, -2.124599334784452e-02, 0.000000000000000e+00, -1.540216432199923e-02, -4.498147774726239e-06, 0.000000000000000e+00, -4.502450593703517e-06, -4.493243121047394e-06, 0.000000000000000e+00, -4.497706777673471e-06, -4.497835319853425e-06, 0.000000000000000e+00, -4.502258812463631e-06, -4.493627993747398e-06, 0.000000000000000e+00, -4.497950393751279e-06, -3.744160429719792e-06, 0.000000000000000e+00, -4.500072570141287e-06, -4.495665427124846e-06, 0.000000000000000e+00, -3.747763910496635e-06, -2.333152692157303e-04, 0.000000000000000e+00, -2.334536873006535e-04, -2.273824597015699e-04, 0.000000000000000e+00, -2.276829333451793e-04, -2.382758139213852e-04, 0.000000000000000e+00, -2.370004835705343e-04, -2.331233123933735e-04, 0.000000000000000e+00, -2.317710950227096e-04, -2.263149630443965e-04, 0.000000000000000e+00, -6.007346930619856e-05, -2.263149630443965e-04, 0.000000000000000e+00, -2.299208099543610e-04, -2.900306154773730e-02, 0.000000000000000e+00, -1.757306533911627e-02, -2.036163782345779e-02, 0.000000000000000e+00, -2.028520308629294e-02, -4.302984877111864e-02, 0.000000000000000e+00, -3.729180240138904e-02, -3.648200739412352e-02, 0.000000000000000e+00, -3.184607102336330e-02, -2.460754150718408e-02, 0.000000000000000e+00, -1.841721644687569e-02, -2.460754150718409e-02, 0.000000000000000e+00, -3.037197670413207e-02, -1.413139428112826e+00, 0.000000000000000e+00, -1.422975704808772e+00, 2.350433606559723e+00, 0.000000000000000e+00, -1.542574713352307e+00, -1.242410912144641e+00, 0.000000000000000e+00, -1.450652145271518e+00, -2.524311817538459e-04, 0.000000000000000e+00, -2.528766819467717e-04, -2.384023642983105e+00, 0.000000000000000e+00, -3.671982801633707e+00, -2.384023642983107e+00, 0.000000000000000e+00, -3.671982801633709e+00, 2.544581471098927e-03, 0.000000000000000e+00, -2.170595975630113e-03, -5.578972988103273e-03, 0.000000000000000e+00, -4.757725000525018e-03, -6.030385799762981e-02, 0.000000000000000e+00, -7.779518016394897e-02, -9.419558926561742e-01, 0.000000000000000e+00, 1.498971905850132e+00, -5.142678739499133e-03, 0.000000000000000e+00, -5.493640454953361e-02, -5.142678739499144e-03, 0.000000000000000e+00, -5.493640454953356e-02, -2.659224311076890e-02, 0.000000000000000e+00, -2.617310412210561e-02, -2.762075690332160e-02, 0.000000000000000e+00, -2.717732550252782e-02, -2.514814343748469e-02, 0.000000000000000e+00, -2.479331607499500e-02, -2.522964181873642e-02, 0.000000000000000e+00, -2.653322389797945e-02, -2.518949123614947e-02, 0.000000000000000e+00, -2.483181892331581e-02, -2.518949123614947e-02, 0.000000000000000e+00, -2.667806222856477e-02, -2.971288710020831e-02, 0.000000000000000e+00, -2.930799407268300e-02, -5.961211615912505e-02, 0.000000000000000e+00, -3.011807788669152e-02, -4.899017708648837e-02, 0.000000000000000e+00, -3.159466127972499e-02, -4.007825746763993e-02, 0.000000000000000e+00, -3.950330395782910e-02, -4.439251375913638e-02, 0.000000000000000e+00, -4.371395973673822e-02, -4.439251375913638e-02, 0.000000000000000e+00, -3.145565457943005e-02, -1.706705171850462e-02, 0.000000000000000e+00, -1.248330012555966e-02, -9.790173772227460e-01, 0.000000000000000e+00, -9.666102447858018e-01, 2.642196569206283e-01, 0.000000000000000e+00, -5.919845075474669e-01, -5.368430987507990e-02, 0.000000000000000e+00, -2.314282242383228e-01, -3.903576044278411e-01, 0.000000000000000e+00, -3.915290731672063e-01, -3.903576044278416e-01, 0.000000000000000e+00, 5.758672563102232e-04, -8.330460856714808e-02, 0.000000000000000e+00, -8.113351507377950e-02, 4.049745517352397e-01, 0.000000000000000e+00, 3.983228913778100e-01, -4.784184040959243e-01, 0.000000000000000e+00, -5.387694838918446e-01, -2.831442531119221e-01, 0.000000000000000e+00, -2.675613043336418e-01, -1.843639656312295e+00, 0.000000000000000e+00, -2.701750508342409e+00, -1.843639656312298e+00, 0.000000000000000e+00, -2.701750508342413e+00, 2.218265908997596e-02, 0.000000000000000e+00, 2.330913472055514e-02, -4.975832938650692e-04, 0.000000000000000e+00, -4.965673489726657e-04, 1.063211440133735e-02, 0.000000000000000e+00, 1.311569427374899e-02, 3.044890634635012e+00, 0.000000000000000e+00, 3.704046568587884e+00, -1.913398126359691e-02, 0.000000000000000e+00, -4.871088234049242e-02, -1.913398126359695e-02, 0.000000000000000e+00, 5.450564440811938e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_pkzb_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_pkzb", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.400722777024064e-04, 1.401054282378814e-04, 1.400766646313436e-04, 1.401086080402398e-04, 1.400887942214180e-04, 1.401265148281516e-04, 1.400396174897109e-04, 3.307322212094214e-04, 1.400751153533050e-04, 3.307162069801604e-04, 3.307158659865758e-04, 3.307162069801604e-04, 2.402972883764018e-03, -7.777779541165897e-04, 2.402879553554192e-03, 2.403016920066533e-03, 2.401065165096796e-03, 2.400713026935239e-03, 2.401524814618235e-03, 2.401488843942311e-03, 2.403565839274232e-03, 2.399797375438478e-03, -7.789944206925806e-04, 2.399797375438478e-03, -1.621984472916545e-02, -1.567352852833613e-02, -1.638404939628082e-02, 1.220769551355227e-02, 1.197492198974608e-02, 1.195645919383866e-02, 1.211985534779901e-02, -1.750831519360071e-02, -1.524299215841344e-02, -2.079803067310840e-02, 1.216849280508272e-02, 1.181581698279298e-02, -8.482452163913154e-02, 4.006702957139375e-02, -8.358635624586977e-02, 4.073840846087533e-02, 7.465562455878116e-03, -1.796451631608486e-02, 1.427382870225534e-02, 1.798997441581993e-02, 3.584445518313494e-02, 3.159908978407817e-03, 3.584445518313491e-02, -7.093610656205928e-03, 1.907814793068965e-08, 2.600274257416370e-08, -3.835848231202231e-08, 3.660262442003073e-08, -6.902968891507972e-05, 6.022385808959977e-05, 9.374905305919736e-10, 8.752137054357767e-10, 9.978452521296219e-09, 1.333187012253800e-09, 9.978452521296219e-09, 1.333187012253797e-09, 1.288031807013008e-03, 1.288332289266726e-03, 1.286493040330721e-03, 1.286844756709635e-03, 1.287926584652898e-03, 1.288266925877472e-03, 1.286607072747078e-03, 1.286916405786871e-03, 7.484106701030940e-04, 1.287587466456090e-03, 1.287258300922545e-03, 7.485580538099823e-04, 4.347509903413966e-03, 4.346710775326552e-03, 4.304621072752932e-03, 4.304918535824880e-03, 4.382465239381321e-03, 4.372043323376027e-03, 4.346879487743816e-03, 4.335293846334404e-03, 4.295679309138776e-03, -2.217194662801262e-03, 4.295679309138776e-03, 4.321050177704181e-03, 1.324569535218652e-02, 1.231736263956138e-03, 1.101629855343353e-02, 1.094539600260956e-02, 1.561114490840297e-02, 1.466152953025781e-02, 1.413776415758345e-02, 1.335636247385564e-02, 1.234527055843552e-02, 1.406171580449464e-03, 1.234527055843553e-02, 1.331879013665051e-02, 3.404130577968843e-03, 3.524867820181539e-03, -6.849524062069026e-02, 2.419607844894249e-02, 2.228522523962833e-03, 3.032648546638445e-03, 3.932360732525761e-03, 3.933609912639469e-03, 8.461067247330541e-03, 1.524595505585594e-02, 8.461067247330546e-03, 1.524595505585595e-02, -2.075608416986215e-10, 1.478269873543207e-10, 7.141962255842185e-10, 6.371400987698231e-10, 3.227787010177594e-09, 4.945803530234351e-09, 5.596762632682088e-04, -1.266459020765265e-03, 2.932863939047781e-10, 8.114019897346792e-09, 2.932863939047787e-10, 8.114019897346782e-09, 1.027018042973465e-02, 1.021764701376303e-02, 1.076981825508222e-02, 1.070986981498704e-02, 8.441426767455384e-03, 8.442682552891030e-03, 8.676877344695504e-03, 1.039574927816791e-02, 8.559429933339425e-03, 8.556490929029395e-03, 8.559429933339425e-03, 1.046701729165484e-02, 1.061732086847232e-02, 1.056696652339472e-02, 1.638877767731084e-02, -1.126604874600134e-03, 1.469338366194967e-02, 2.994895617783135e-03, 1.296431191036554e-02, 1.290270148544372e-02, 1.383902361540593e-02, 1.376149259374190e-02, 1.383902361540593e-02, 4.589482597005201e-03, 1.085871377078486e-02, 4.006743434264330e-03, 2.924176117993761e-02, 2.933599873637717e-02, -4.703746966717558e-02, 2.987759966498593e-02, -1.401050487106806e-02, 2.442938173020713e-02, 2.805543051277903e-02, 2.808174899891509e-02, 2.805543051277905e-02, -2.630317578764045e-02, 1.844828917868790e-02, 1.822152807073057e-02, -6.781038321596108e-05, -6.807681851905747e-05, 1.427856653792960e-04, 1.773580622700446e-04, 2.517138757393674e-02, 2.422762104820425e-02, 2.074773203999133e-03, 3.557560361881740e-03, 2.074773203999136e-03, 3.557560361881746e-03, -5.777049949407081e-08, -6.755073475562522e-08, 1.240473955853280e-12, 1.246448807071649e-12, -3.001780588238658e-10, -4.455178901219100e-10, -4.313654403889858e-03, -5.529772235163209e-03, 9.273465755279158e-10, 5.540037596212545e-09, 9.273465755279147e-10, -8.335302800473149e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
