
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_pkzb_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_pkzb", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.095555377644379e+01, -2.095558726168704e+01, -2.095580643011834e+01, -2.095530747946281e+01, -2.095555891290356e+01, -2.095555891290356e+01, -3.399252551269847e+00, -3.399237723314196e+00, -3.399047397449960e+00, -3.400779644399891e+00, -3.399675455266401e+00, -3.399675455266401e+00, -6.719532642523911e-01, -6.718079415271792e-01, -6.704143501411084e-01, -6.753734598072469e-01, -6.790694825838242e-01, -6.790694825838242e-01, -2.224082135505356e-01, -2.223416280143856e-01, -8.324320311175057e-01, -1.912850475732079e-01, -2.168408365749529e-01, -2.168408365749528e-01, -1.011216153335196e-02, -1.064897413327580e-02, -5.864413904288486e-02, -5.830217321310839e-03, -8.138155555496379e-03, -8.138155555496379e-03, -5.054591163770877e+00, -5.054280468455415e+00, -5.054593204081273e+00, -5.054318426624983e+00, -5.054424756799020e+00, -5.054424756799020e+00, -2.096577925702466e+00, -2.108268936985665e+00, -2.101282320115750e+00, -2.111699406488657e+00, -2.100969702085276e+00, -2.100969702085276e+00, -5.750499962732865e-01, -6.033372764693221e-01, -5.322597688613728e-01, -5.336906109894071e-01, -5.824935926198831e-01, -5.824935926198831e-01, -1.474452679239626e-01, -2.444002483407097e-01, -1.374842497922467e-01, -1.806281805953490e+00, -1.659540690020081e-01, -1.659540690020081e-01, -4.501091672258439e-03, -5.699391486694894e-03, -4.364674313538049e-03, -9.429841423153047e-02, -5.482773440343590e-03, -5.482773440343592e-03, -5.569704906035737e-01, -5.584072742364716e-01, -5.578946542240313e-01, -5.574719053852459e-01, -5.576816337217014e-01, -5.576816337217014e-01, -5.399878846582445e-01, -5.080748755161150e-01, -5.152490259402251e-01, -5.236480269216888e-01, -5.189357873012783e-01, -5.189357873012783e-01, -6.321849838504834e-01, -2.864037299542449e-01, -3.131624074143740e-01, -3.580778253713254e-01, -3.323444850889062e-01, -3.323444850889062e-01, -4.649809274587065e-01, -5.606483835671366e-02, -7.632331884323172e-02, -3.364092413104448e-01, -1.183135248136246e-01, -1.183135248136247e-01, -1.425416831082581e-02, -1.523316295735266e-03, -3.203544867031108e-03, -1.117491111422876e-01, -5.034981071863898e-03, -5.034981071863894e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_pkzb_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_pkzb", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.533147441283824e+01, -2.533136552782612e+01, -2.533160828906010e+01, -2.533146276525535e+01, -2.533197165225451e+01, -2.533200163450678e+01, -2.533046059878899e+01, -2.533007531641337e+01, -2.533155722984879e+01, -2.533079762479636e+01, -2.533155722984879e+01, -2.533079762479636e+01, -4.099338097017559e+00, -4.099700935259663e+00, -4.099378526593396e+00, -4.099766765114360e+00, -4.100646136166677e+00, -4.101039014667694e+00, -4.098501274032158e+00, -4.099002494348420e+00, -4.098544957452003e+00, -4.100192859844871e+00, -4.098544957452003e+00, -4.100192859844871e+00, -7.636648035206806e-01, -7.696184277719116e-01, -7.614495542560442e-01, -7.687786221216958e-01, -7.309958021109718e-01, -7.186765512125776e-01, -7.273207684360344e-01, -7.308892372123793e-01, -7.794083172742561e-01, -6.505240814892107e-01, -7.794083172742561e-01, -6.505240814892107e-01, -1.494835908175290e-01, -1.547726885738889e-01, -1.500241917339044e-01, -1.568407134463672e-01, -8.194095738005552e-01, -8.599103556899296e-01, -1.450218059326231e-01, -1.528610657742654e-01, -1.551754237556399e-01, -1.471836892409535e-01, -1.551754237556397e-01, -1.471836892409534e-01, -1.303753352199927e-02, -1.385389872831539e-02, -1.366175155368116e-02, -1.463514656694926e-02, -7.557026371286882e-02, -7.971482229444236e-02, -7.837267527200299e-03, -7.706676480383016e-03, -1.163075147084944e-02, -6.618647127300779e-03, -1.163075147084944e-02, -6.618647127300779e-03, -6.273695396820275e+00, -6.272084171761811e+00, -6.277082104905920e+00, -6.275356606665076e+00, -6.273872833359001e+00, -6.272188900660140e+00, -6.276779290909894e+00, -6.275162167109398e+00, -6.275439170518021e+00, -6.273729908445199e+00, -6.275439170518021e+00, -6.273729908445199e+00, -2.014811672323734e+00, -2.014022621717138e+00, -2.035959595243348e+00, -2.034667300688664e+00, -1.974643068473886e+00, -1.985677115396183e+00, -1.992922098559663e+00, -2.003949175371835e+00, -2.056028014319645e+00, -2.028956207049343e+00, -2.056028014319645e+00, -2.028956207049343e+00, -6.941265184938201e-01, -6.921794188031951e-01, -7.880523831183570e-01, -7.887373809885151e-01, -6.263587633172902e-01, -6.515470269836429e-01, -6.819908127112165e-01, -7.050490520053824e-01, -7.269850102867476e-01, -6.901859625107259e-01, -7.269850102867476e-01, -6.901859625107261e-01, -1.668683640891073e-01, -1.659701021081848e-01, -1.783226123491741e-01, -1.780008114768358e-01, -1.570854845952913e-01, -1.619213118302724e-01, -2.374673552174496e+00, -2.373660991577067e+00, -1.651306262538808e-01, -1.521101693383458e-01, -1.651306262538809e-01, -1.521101693383458e-01, -5.879437609838717e-03, -6.110160178888328e-03, -7.540830046909302e-03, -7.654960606190519e-03, -5.638827511987076e-03, -5.971713129881216e-03, -1.197965084857899e-01, -1.213919674588235e-01, -5.759207430678577e-03, -7.909225079220527e-03, -5.759207430678576e-03, -7.909225079220530e-03, -7.344845582353718e-01, -7.374438422898552e-01, -7.225227978645526e-01, -7.255758637996663e-01, -7.267530301431601e-01, -7.297985162568332e-01, -7.302565372330095e-01, -7.332235292505396e-01, -7.285085319109521e-01, -7.315131510997996e-01, -7.285085319109521e-01, -7.315131510997996e-01, -7.171574605717376e-01, -7.195345375736939e-01, -5.380840604132573e-01, -5.414496237031632e-01, -5.926643866580005e-01, -5.962866217663736e-01, -6.454352890288303e-01, -6.479740969337713e-01, -6.194747036695798e-01, -6.220736688583774e-01, -6.194747036695798e-01, -6.220736688583774e-01, -8.244602380318522e-01, -8.263575501952726e-01, -1.949944283149823e-01, -1.955319862675981e-01, -2.329253496596060e-01, -2.365978787160697e-01, -3.786883162606731e-01, -3.815857766305936e-01, -2.979515751481027e-01, -2.984279821870533e-01, -2.979515751481025e-01, -2.984279821870533e-01, -4.977242854013760e-01, -5.023248750947338e-01, -7.425401632106764e-02, -7.474797910150338e-02, -9.880102425975934e-02, -1.018737719169240e-01, -3.791771820932381e-01, -3.842762868070022e-01, -1.401090137087273e-01, -1.408063110216083e-01, -1.401090137087272e-01, -1.408063110216083e-01, -1.864894907103304e-02, -1.932491960689565e-02, -2.028762003701345e-03, -2.033398887897752e-03, -4.128060491084539e-03, -4.390525291283217e-03, -1.356275219079961e-01, -1.385450439167130e-01, -5.455185776923071e-03, -7.249393007750412e-03, -5.455185776923066e-03, -7.249393007750407e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_pkzb_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_pkzb", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.598261138195514e-08, 0.000000000000000e+00, -1.598318522192588e-08, -1.598238515428345e-08, 0.000000000000000e+00, -1.598302081950117e-08, -1.598171747002114e-08, 0.000000000000000e+00, -1.598204826881561e-08, -1.598427581990865e-08, 0.000000000000000e+00, -1.598530842809016e-08, -1.598247551654959e-08, 0.000000000000000e+00, -1.598404600094897e-08, -1.598247551654959e-08, 0.000000000000000e+00, -1.598404600094897e-08, -1.821471229431842e-05, 0.000000000000000e+00, -1.820359214769818e-05, -1.821660010387867e-05, 0.000000000000000e+00, -1.820387234688182e-05, -1.824174810013128e-05, 0.000000000000000e+00, -1.824257773939375e-05, -1.827383934530068e-05, 0.000000000000000e+00, -1.826257456987980e-05, -1.822326598279559e-05, 0.000000000000000e+00, -1.828433288260436e-05, -1.822326598279559e-05, 0.000000000000000e+00, -1.828433288260436e-05, -8.409023154331121e-03, 0.000000000000000e+00, -8.209675589678637e-03, -8.510973215290162e-03, 0.000000000000000e+00, -8.224101214022204e-03, -9.756953915934905e-03, 0.000000000000000e+00, -1.067302073514387e-02, -1.099209077009613e-02, 0.000000000000000e+00, -1.094371062488127e-02, -7.470408213306971e-03, 0.000000000000000e+00, -1.530056871207131e-02, -7.470408213306971e-03, 0.000000000000000e+00, -1.530056871207131e-02, -2.905274606424608e+00, 0.000000000000000e+00, -2.667395942080613e+00, -2.884680777943079e+00, 0.000000000000000e+00, -2.601911326182558e+00, 3.026684706969863e-03, 0.000000000000000e+00, 1.550204484483663e-03, -4.054742920793929e+00, 0.000000000000000e+00, -3.771459717781351e+00, -2.493435100519851e+00, 0.000000000000000e+00, -4.674668816373847e+00, -2.493435100519850e+00, 0.000000000000000e+00, -4.674668816373849e+00, -3.062184302973237e-02, 0.000000000000000e+00, -3.361006580456214e-02, -3.694852686493402e-02, 0.000000000000000e+00, -4.136910985208674e-02, -5.972538927322593e-01, 0.000000000000000e+00, -6.501927377032384e-01, -1.211642588265780e-02, 0.000000000000000e+00, -1.081906344119640e-02, -2.550656752788304e-02, 0.000000000000000e+00, -4.945334845231279e-02, -2.550656752788322e-02, 0.000000000000000e+00, -4.945334845231256e-02, -4.494127134898301e-06, 0.000000000000000e+00, -4.498656994924428e-06, -4.489267066073805e-06, 0.000000000000000e+00, -4.493956296283922e-06, -4.493909285727984e-06, 0.000000000000000e+00, -4.498533150404941e-06, -4.489736692523163e-06, 0.000000000000000e+00, -4.494260467274792e-06, -4.491597884998991e-06, 0.000000000000000e+00, -4.496288999771493e-06, -4.491597884998991e-06, 0.000000000000000e+00, -4.496288999771493e-06, -2.286127089366295e-04, 0.000000000000000e+00, -2.289132418959970e-04, -2.232927423019538e-04, 0.000000000000000e+00, -2.237241014523528e-04, -2.349236047034252e-04, 0.000000000000000e+00, -2.333935908721980e-04, -2.302072959282878e-04, 0.000000000000000e+00, -2.286572723709087e-04, -2.209748552586735e-04, 0.000000000000000e+00, -2.255582609679920e-04, -2.209748552586735e-04, 0.000000000000000e+00, -2.255582609679920e-04, -2.586908823727147e-02, 0.000000000000000e+00, -2.626607004569766e-02, -1.745730092884644e-02, 0.000000000000000e+00, -1.750676659491650e-02, -3.408593475011638e-02, 0.000000000000000e+00, -3.121556759047739e-02, -2.560916167835868e-02, 0.000000000000000e+00, -2.397878952476232e-02, -2.242498667219241e-02, 0.000000000000000e+00, -2.680528613639939e-02, -2.242498667219242e-02, 0.000000000000000e+00, -2.680528613639939e-02, -2.718634080322357e+00, 0.000000000000000e+00, -2.891361140994493e+00, -1.779986403281202e+00, 0.000000000000000e+00, -1.768099969654100e+00, -2.814442358366026e+00, 0.000000000000000e+00, -2.847554315572607e+00, -1.869309953792648e-04, 0.000000000000000e+00, -1.872858679135091e-04, -3.725961822453022e+00, 0.000000000000000e+00, -5.017701358533706e+00, -3.725961822453019e+00, 0.000000000000000e+00, -5.017701358533706e+00, -1.743205228374592e-02, 0.000000000000000e+00, -1.536874461892128e-02, -1.895892076804867e-02, 0.000000000000000e+00, -1.807337046332729e-02, -1.142647886862894e-01, 0.000000000000000e+00, -1.524401215591137e-01, -2.481693202194664e+00, 0.000000000000000e+00, -2.069493623885089e+00, -3.112164757732680e-02, 0.000000000000000e+00, -6.262202119450028e-02, -3.112164757732717e-02, 0.000000000000000e+00, -6.262202119450005e-02, -2.605133309605454e-02, 0.000000000000000e+00, -2.565455537581035e-02, -2.711121826567775e-02, 0.000000000000000e+00, -2.668804208116958e-02, -2.673897274100603e-02, 0.000000000000000e+00, -2.632291382719413e-02, -2.642901604464598e-02, 0.000000000000000e+00, -2.602474572468156e-02, -2.658377475298412e-02, 0.000000000000000e+00, -2.617378823470659e-02, -2.658377475298412e-02, 0.000000000000000e+00, -2.617378823470659e-02, -2.849113088495985e-02, 0.000000000000000e+00, -2.814437510350703e-02, -5.897206597718720e-02, 0.000000000000000e+00, -5.794929003547172e-02, -4.806050014878060e-02, 0.000000000000000e+00, -4.718490836435432e-02, -3.895343046001461e-02, 0.000000000000000e+00, -3.839965645025938e-02, -4.327704355447102e-02, 0.000000000000000e+00, -4.265248973650115e-02, -4.327704355447102e-02, 0.000000000000000e+00, -4.265248973650115e-02, -1.400480231994637e-02, 0.000000000000000e+00, -1.405973198652473e-02, -1.029935376964622e+00, 0.000000000000000e+00, -1.017327681186168e+00, -6.319883644264257e-01, 0.000000000000000e+00, -6.144960577961189e-01, -2.143535052790110e-01, 0.000000000000000e+00, -2.090271941388629e-01, -3.860887544644045e-01, 0.000000000000000e+00, -3.868344547876194e-01, -3.860887544644050e-01, 0.000000000000000e+00, -3.868344547876195e-01, -7.824534727334834e-02, 0.000000000000000e+00, -7.658509505684412e-02, -4.358805564001533e-01, 0.000000000000000e+00, -4.523874682529477e-01, -9.367137261763682e-01, 0.000000000000000e+00, -1.025618103243906e+00, -2.453437236709598e-01, 0.000000000000000e+00, -2.437608627607651e-01, -3.403072746377107e+00, 0.000000000000000e+00, -4.736928068333492e+00, -3.403072746377116e+00, 0.000000000000000e+00, -4.736928068333500e+00, -7.234544938699493e-02, 0.000000000000000e+00, -8.265666736591597e-02, 2.678196798713995e-03, 0.000000000000000e+00, 3.677281963303412e-03, -1.287984857731371e-02, 0.000000000000000e+00, -1.608219583091249e-02, -3.551523747349506e+00, 0.000000000000000e+00, -3.208176786343043e+00, -1.566441793428363e-01, 0.000000000000000e+00, -5.571062848922344e-02, -1.566441793428359e-01, 0.000000000000000e+00, -5.571062848922372e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_pkzb_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_pkzb", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([3.207456480256172e-04, 3.207714257507908e-04, 3.207433220012408e-04, 3.207697334707227e-04, 3.207410408310046e-04, 3.207650149412065e-04, 3.207674283268765e-04, 3.207986263921016e-04, 3.207440978697555e-04, 3.207889670728234e-04, 3.207440978697555e-04, 3.207889670728234e-04, 1.024288701895905e-03, 1.021772389629313e-03, 1.024707049934419e-03, 1.021832901382340e-03, 1.030347854731783e-03, 1.030735556164802e-03, 1.038197346159017e-03, 1.036022502917509e-03, 1.023748406383593e-03, 1.041194993600484e-03, 1.023748406383593e-03, 1.041194993600484e-03, -1.161526401458945e-03, -1.277648531043420e-03, -1.087375872226379e-03, -1.284403224795183e-03, -3.126373021811907e-04, 5.586154165235221e-04, 1.492545915728100e-03, 1.522106193113600e-03, -1.975721656399617e-03, 5.448277973386761e-03, -1.975721656399617e-03, 5.448277973386761e-03, 3.867175200862941e-02, 4.043478919360598e-02, 3.917972726093855e-02, 4.098679637514824e-02, -1.438608114078061e-02, -1.239534425001499e-02, 2.294400609728859e-02, 2.444500436340174e-02, 3.729483873719903e-02, 8.080700933445328e-03, 3.729483873719902e-02, 8.080700933445321e-03, 2.017370991185590e-08, 2.662990096390329e-08, 2.792912613101670e-08, 3.855972338986264e-08, 7.387351718495239e-05, 9.550590031383739e-05, 1.654580954259599e-09, 1.417981310470270e-09, 1.182526850927750e-08, 3.784558474804677e-09, 1.182526850927757e-08, 3.784558474804667e-09, 1.284935058667902e-03, 1.285412432200751e-03, 1.283431088832428e-03, 1.283958503648777e-03, 1.284902712266153e-03, 1.285399361965718e-03, 1.283610336082933e-03, 1.284076720072183e-03, 1.284125681487857e-03, 1.284675542765341e-03, 1.284125681487857e-03, 1.284675542765341e-03, 3.966404373607102e-03, 3.978500185097813e-03, 3.979358674135310e-03, 3.989872201679272e-03, 4.074621095175052e-03, 4.054066270110803e-03, 4.086721363042417e-03, 4.067285106167101e-03, 3.894411993300197e-03, 3.974472585502783e-03, 3.894411993300197e-03, 3.974472585502783e-03, 9.547597729899961e-03, 9.696626721709404e-03, 7.078431640524160e-03, 7.177318429380041e-03, 7.474538213315290e-03, 8.603922020455014e-03, 4.270235671174728e-03, 5.472253357094747e-03, 9.510088982872074e-03, 9.315690041692718e-03, 9.510088982872079e-03, 9.315690041692718e-03, 6.020204644394368e-03, 6.510949390685910e-03, 2.652533260715339e-02, 2.666731860848150e-02, 4.540166544124729e-03, 5.466890189204820e-03, 1.503985601429528e-03, 1.505273694577515e-03, 1.238533206648173e-02, 1.974441611956410e-02, 1.238533206648172e-02, 1.974441611956410e-02, 6.162536197253572e-10, 6.827060040035371e-10, 2.124296545008981e-09, 2.072294257640262e-09, 5.799514244831297e-09, 9.157250250917757e-09, 1.317517597107934e-03, 1.179379802343661e-03, -8.267092622321639e-10, 9.165119925487747e-09, -8.267092622321264e-10, 9.165119925487716e-09, 9.707019203292328e-03, 9.671662037050629e-03, 1.023812172384481e-02, 1.019363469466180e-02, 1.005344398686688e-02, 1.001109002900352e-02, 9.897858596323189e-03, 9.860077116768026e-03, 9.975548370418823e-03, 9.935620338815621e-03, 9.975548370418823e-03, 9.935620338815619e-03, 9.450798636013389e-03, 9.444996298553084e-03, 1.584758219833718e-02, 1.574895615576021e-02, 1.392447862766461e-02, 1.382685934314869e-02, 1.199891808004202e-02, 1.194632439441915e-02, 1.290527299292869e-02, 1.286419316209634e-02, 1.290527299292869e-02, 1.286419316209634e-02, 6.062243583044021e-03, 6.262690209580514e-03, 2.996795779913477e-02, 3.004843499267703e-02, 2.907600302093456e-02, 2.898667252224674e-02, 1.734846386300194e-02, 1.708013156797901e-02, 2.467416114420502e-02, 2.464975746602328e-02, 2.467416114420504e-02, 2.464975746602327e-02, 1.506595117309897e-02, 1.516145196556962e-02, 5.266362340473757e-05, 5.553593048899641e-05, 2.627199736742892e-04, 3.181661412094889e-04, 1.604439038264582e-02, 1.829259067333856e-02, 3.576607975599733e-03, 5.836252723395963e-03, 3.576607975599742e-03, 5.836252723395973e-03, 1.208066767850368e-07, 1.508271094024099e-07, -2.055935239324337e-11, -1.586967227737140e-11, 2.645251509319402e-10, 3.969897905950451e-10, 3.328323657776829e-03, 3.251299187047263e-03, 3.286707837250289e-09, 6.277052328621812e-09, 3.286707837250247e-09, 6.277052328621821e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
