
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_rmspbel_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmspbel", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.215066486213382e+01, -2.215071244076692e+01, -2.215097177991362e+01, -2.215026326202591e+01, -2.215062770128287e+01, -2.215062770128287e+01, -3.377284146090109e+00, -3.377286927175559e+00, -3.377571478401335e+00, -3.379013055769973e+00, -3.378001877943150e+00, -3.378001877943150e+00, -6.498813250526305e-01, -6.495872090741974e-01, -6.449396418664948e-01, -6.537648434085795e-01, -6.541636334995136e-01, -6.541636334995136e-01, -2.039193100614756e-01, -2.048495590521344e-01, -7.262051635310355e-01, -1.669210316809278e-01, -1.960894597436766e-01, -1.960894597436765e-01, -1.010108137806243e-02, -1.063566574899257e-02, -5.706713989391233e-02, -5.828194691634170e-03, -8.131825396183907e-03, -8.131825396183907e-03, -5.367413344395702e+00, -5.367681363841148e+00, -5.367433027674484e+00, -5.367669502401057e+00, -5.367545133194337e+00, -5.367545133194337e+00, -2.109467115538394e+00, -2.127607812592494e+00, -2.109571645857415e+00, -2.125283689688863e+00, -2.119701109231231e+00, -2.119701109231231e+00, -5.961447880737420e-01, -6.352937185996497e-01, -5.337870534649277e-01, -5.378480560191292e-01, -6.068854725773436e-01, -6.068854725773438e-01, -1.311817398762788e-01, -2.144457028584541e-01, -1.232685184831142e-01, -1.830955292984951e+00, -1.444043217918481e-01, -1.444043217918481e-01, -4.500023878777660e-03, -5.697343613408215e-03, -4.362356892330662e-03, -8.801860528487926e-02, -5.479511914841349e-03, -5.479511914841351e-03, -5.987366779287134e-01, -5.981412796276606e-01, -5.983536992709215e-01, -5.985224253213258e-01, -5.984374460638304e-01, -5.984374460638304e-01, -5.809945541624288e-01, -5.241188981169103e-01, -5.398369623464024e-01, -5.556506477372497e-01, -5.473569614795464e-01, -5.473569614795464e-01, -6.578711377031090e-01, -2.614717691842066e-01, -2.959021561288765e-01, -3.536686008368661e-01, -3.242813838956398e-01, -3.242813838956398e-01, -4.739019887409456e-01, -5.473959236206404e-02, -7.312565642516622e-02, -3.398367472548367e-01, -1.064651686694467e-01, -1.064651686694467e-01, -1.422641718711078e-02, -1.523228224637593e-03, -3.202981425916808e-03, -1.014313123453815e-01, -5.032260793437581e-03, -5.032260793437576e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_rmspbel_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmspbel", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.807894659600208e+01, -2.807941560294732e+01, -2.807906934222970e+01, -2.807950468046734e+01, -2.807950890813792e+01, -2.808012132026843e+01, -2.807812644785665e+01, -2.807835858889680e+01, -2.807901936498220e+01, -2.807909738695402e+01, -2.807901936498220e+01, -2.807909738695402e+01, -4.207218367241015e+00, -4.206533004671851e+00, -4.207530845653738e+00, -4.206695012667770e+00, -4.213195678990481e+00, -4.214153241822301e+00, -4.213262034901958e+00, -4.212941818725062e+00, -4.205888993731043e+00, -4.218215488386694e+00, -4.205888993731043e+00, -4.218215488386694e+00, -7.928852636637078e-01, -8.008081024575824e-01, -7.901882684572613e-01, -7.996353694027623e-01, -7.537917990814136e-01, -7.440140440558289e-01, -7.605070752775406e-01, -7.650265868008649e-01, -8.114999538863953e-01, -7.072587601390486e-01, -8.114999538863953e-01, -7.072587601390486e-01, -1.471500169239527e-01, -1.855429373803296e-01, -1.551145036393248e-01, -1.830986044348725e-01, -8.302019728561861e-01, -8.843499566400742e-01, -1.475412179601649e-01, -1.458244124849416e-01, -1.615355366455980e-01, -1.292199021698283e-01, -1.615355366455978e-01, -1.292199021698281e-01, -1.299752576840225e-02, -1.380592582408024e-02, -1.361453772468222e-02, -1.457725877166932e-02, -7.021026691680259e-02, -7.346642201414340e-02, -7.828932029285415e-03, -7.698858289206415e-03, -1.160235916783670e-02, -6.610302565200292e-03, -1.160235916783669e-02, -6.610302565200308e-03, -6.916623057980551e+00, -6.915038172097063e+00, -6.918822007284399e+00, -6.917161603931619e+00, -6.916791299718895e+00, -6.915144358074541e+00, -6.918676154110442e+00, -6.917071553480843e+00, -6.917714794551627e+00, -6.916099048367675e+00, -6.917714794551627e+00, -6.916099048367675e+00, -2.244560860024784e+00, -2.250745793518222e+00, -2.300620686501020e+00, -2.305300854571819e+00, -2.238029253437444e+00, -2.245357766074792e+00, -2.292573039009479e+00, -2.299926971949914e+00, -2.284485237281391e+00, -2.280560976524503e+00, -2.284485237281391e+00, -2.280560976524503e+00, -7.504236752793200e-01, -7.484849863069620e-01, -8.669816981562469e-01, -8.667441782939946e-01, -6.523191593532229e-01, -6.989094011793338e-01, -7.130505431247903e-01, -7.649753629109662e-01, -7.881136915636022e-01, -7.474003229398851e-01, -7.881136915636023e-01, -7.474003229398853e-01, -1.328561673667003e-01, -1.329481465572353e-01, -1.496141176263719e-01, -1.541056421078378e-01, -1.263623179309807e-01, -1.289996548876041e-01, -2.588328960633802e+00, -2.587480666561364e+00, -1.318779105146221e-01, -1.299891231282051e-01, -1.318779105146221e-01, -1.299891231282052e-01, -5.875267321428711e-03, -6.105805427269490e-03, -7.532668644179882e-03, -7.646757279492659e-03, -5.630685682933487e-03, -5.961517540540196e-03, -1.008605654237303e-01, -1.015737317649002e-01, -5.753088810364467e-03, -7.893530651647147e-03, -5.753088810364470e-03, -7.893530651647142e-03, -7.926553735036918e-01, -7.957910724585137e-01, -7.833433183636445e-01, -7.865656255577476e-01, -7.865850265443545e-01, -7.897982074886687e-01, -7.893102309493686e-01, -7.924581342762685e-01, -7.879451218059361e-01, -7.911247992888867e-01, -7.879451218059361e-01, -7.911247992888867e-01, -7.739661304610144e-01, -7.764254570958484e-01, -6.226637271045951e-01, -6.260043153003778e-01, -6.633661087501305e-01, -6.670049786638650e-01, -7.070016183864245e-01, -7.096956073054388e-01, -6.843076546356647e-01, -6.873342656358125e-01, -6.843076546356647e-01, -6.873342656358125e-01, -9.119174149936654e-01, -9.132093753956182e-01, -2.053488253618745e-01, -2.058306104884299e-01, -2.461411728992467e-01, -2.511596788533650e-01, -4.024255920451983e-01, -4.054689104335274e-01, -3.167111622258840e-01, -3.172033745896360e-01, -3.167111622258839e-01, -3.172033745896360e-01, -5.344726681593112e-01, -5.422227985201612e-01, -6.930867058854338e-02, -6.971744238971031e-02, -8.814697716645159e-02, -9.019634938971698e-02, -4.029121059823918e-01, -4.118652652615131e-01, -1.120530721448776e-01, -1.111341606022908e-01, -1.120530721448775e-01, -1.111341606022908e-01, -1.854531536183534e-02, -1.920852348871273e-02, -2.028461086233854e-03, -2.032995635349449e-03, -4.126069910835104e-03, -4.388054545964646e-03, -1.081634941717634e-01, -1.057524264793479e-01, -5.447725759225036e-03, -7.237075038789818e-03, -5.447725759225036e-03, -7.237075038789805e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rmspbel_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmspbel", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-8.726609876049830e-09, 0.000000000000000e+00, -8.718869415800063e-09, -8.726398764631206e-09, 0.000000000000000e+00, -8.718717178665637e-09, -8.724721159008174e-09, 0.000000000000000e+00, -8.716596002314683e-09, -8.727054355687994e-09, 0.000000000000000e+00, -8.719579642652959e-09, -8.726504738311716e-09, 0.000000000000000e+00, -8.717655393698745e-09, -8.726504738311716e-09, 0.000000000000000e+00, -8.717655393698745e-09, -1.668841932584218e-05, 0.000000000000000e+00, -1.662384562903030e-05, -1.670863194516482e-05, 0.000000000000000e+00, -1.663223238658865e-05, -1.705054557318607e-05, 0.000000000000000e+00, -1.709772857876218e-05, -1.715100644088675e-05, 0.000000000000000e+00, -1.709981898548958e-05, -1.665926925917994e-05, 0.000000000000000e+00, -1.741858726000227e-05, -1.665926925917994e-05, 0.000000000000000e+00, -1.741858726000227e-05, -1.274921453306225e-02, 0.000000000000000e+00, -1.274143816657162e-02, -1.277155074071507e-02, 0.000000000000000e+00, -1.274664869549549e-02, -1.295131907286653e-02, 0.000000000000000e+00, -1.315107363944787e-02, -1.315373953749419e-02, 0.000000000000000e+00, -1.318625073413829e-02, -1.247279899946541e-02, 0.000000000000000e+00, -1.374943435430628e-02, -1.247279899946541e-02, 0.000000000000000e+00, -1.374943435430628e-02, -3.579474486351546e+00, 0.000000000000000e+00, -2.142812917750185e+00, -3.271292534115008e+00, 0.000000000000000e+00, -2.351382616483002e+00, -5.609371538405852e-03, 0.000000000000000e+00, -5.257287796405605e-03, -2.332301462334227e+00, 0.000000000000000e+00, -2.922470465173692e+00, -2.723118256556592e+00, 0.000000000000000e+00, -3.334323205957627e+00, -2.723118256556596e+00, 0.000000000000000e+00, -3.334323205957632e+00, -8.714996815676072e+00, 0.000000000000000e+00, -8.796506854965628e+00, -9.170816202046630e+00, 0.000000000000000e+00, -9.141883109517437e+00, -4.907286335708707e+00, 0.000000000000000e+00, -4.917737585849442e+00, -7.978297223934621e+00, 0.000000000000000e+00, -7.761895682300744e+00, -8.690539573148270e+00, 0.000000000000000e+00, -2.206169887552883e+01, -8.690539573152169e+00, 0.000000000000000e+00, -2.206169887546715e+01, -1.972806039420210e-06, 0.000000000000000e+00, -1.972306606683993e-06, -1.971680955665619e-06, 0.000000000000000e+00, -1.971222753847136e-06, -1.971791085297042e-06, 0.000000000000000e+00, -1.971582413501845e-06, -1.970863159886519e-06, 0.000000000000000e+00, -1.970633946951127e-06, -1.972950360603010e-06, 0.000000000000000e+00, -1.971882363325042e-06, -1.972950360603010e-06, 0.000000000000000e+00, -1.971882363325042e-06, -2.529306819878677e-04, 0.000000000000000e+00, -2.479743469045264e-04, -2.222462909269065e-04, 0.000000000000000e+00, -2.183321404928723e-04, -2.351669964067069e-04, 0.000000000000000e+00, -2.360128608251751e-04, -2.060461129732195e-04, 0.000000000000000e+00, -2.064929676625529e-04, -2.464576048718197e-04, 0.000000000000000e+00, -2.337008256351900e-04, -2.464576048718197e-04, 0.000000000000000e+00, -2.337008256351900e-04, -4.482946449325416e-02, 0.000000000000000e+00, -4.449033526572020e-02, -3.379265972813286e-02, 0.000000000000000e+00, -3.306626846146485e-02, -3.871914051895738e-02, 0.000000000000000e+00, -5.472999831419493e-02, -3.562488213196558e-02, 0.000000000000000e+00, -4.548690987705505e-02, -3.417637714683778e-02, 0.000000000000000e+00, -4.806038037002248e-02, -3.417637714683777e-02, 0.000000000000000e+00, -4.806038037002249e-02, -2.993107593198177e+00, 0.000000000000000e+00, -2.985248583348154e+00, -2.299076610648902e+00, 0.000000000000000e+00, -2.158986046794544e+00, -3.319964653627854e+00, 0.000000000000000e+00, -3.269109942646839e+00, -3.662121055364682e-04, 0.000000000000000e+00, -3.671679728483565e-04, -3.847771522593903e+00, 0.000000000000000e+00, -4.462245542570652e+00, -3.847771522593908e+00, 0.000000000000000e+00, -4.462245542570636e+00, -1.120186940726624e+01, 0.000000000000000e+00, -9.695595283316605e+00, -9.644067070516517e+00, 0.000000000000000e+00, -8.904186629024288e+00, -5.492448432900459e+01, 0.000000000000000e+00, -6.109248716901313e+01, -5.235188254950131e+00, 0.000000000000000e+00, -5.114013833707440e+00, -2.731771090889111e+01, 0.000000000000000e+00, -2.682366728271943e+01, -2.731771090891718e+01, 0.000000000000000e+00, -2.682366728272547e+01, -1.721044320684375e-02, 0.000000000000000e+00, -1.681877791906488e-02, -1.725389978923633e-02, 0.000000000000000e+00, -1.686812124271631e-02, -1.724065410938762e-02, 0.000000000000000e+00, -1.685058595224170e-02, -1.722672243322673e-02, 0.000000000000000e+00, -1.684022765796913e-02, -1.723687039452742e-02, 0.000000000000000e+00, -1.684746231250500e-02, -1.723687039452742e-02, 0.000000000000000e+00, -1.684746231250500e-02, -2.476801813303749e-02, 0.000000000000000e+00, -2.405897662946435e-02, -3.371305359503987e-02, 0.000000000000000e+00, -3.300154201085693e-02, -3.166842665480187e-02, 0.000000000000000e+00, -3.093103445989585e-02, -2.906470617984411e-02, 0.000000000000000e+00, -2.858158081263179e-02, -3.133654700051425e-02, 0.000000000000000e+00, -3.039100809314531e-02, -3.133654700051426e-02, 0.000000000000000e+00, -3.039100809314534e-02, -3.000072247052257e-02, 0.000000000000000e+00, -2.952555123697447e-02, -1.103475797622004e+00, 0.000000000000000e+00, -1.099278730420486e+00, -7.960961841441162e-01, 0.000000000000000e+00, -7.735664937230519e-01, -2.909118237407926e-01, 0.000000000000000e+00, -2.800592581887831e-01, -5.317993337661621e-01, 0.000000000000000e+00, -5.339151300303108e-01, -5.317993337661623e-01, 0.000000000000000e+00, -5.339151300303108e-01, -1.162217720798390e-01, 0.000000000000000e+00, -1.081431200972607e-01, -4.554458728923885e+00, 0.000000000000000e+00, -4.532646116746831e+00, -4.314808282119572e+00, 0.000000000000000e+00, -4.389197211616050e+00, -3.721578307293376e-01, 0.000000000000000e+00, -4.026353657882075e-01, -5.110333713742770e+00, 0.000000000000000e+00, -6.045226043326654e+00, -5.110333713742776e+00, 0.000000000000000e+00, -6.045226043326665e+00, -6.888260084551892e+00, 0.000000000000000e+00, -7.030400520959763e+00, -3.447502895064829e+01, 0.000000000000000e+00, -6.106585271586825e+01, -2.127415219533970e+01, 0.000000000000000e+00, -2.264691439540209e+01, -5.887790650532465e+00, 0.000000000000000e+00, -8.186333131244073e+00, -5.631302889234515e+01, 0.000000000000000e+00, -2.784957578065935e+01, -5.631302889231637e+01, 0.000000000000000e+00, -2.784957578065440e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rmspbel_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmspbel", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rmspbel_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmspbel", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.571836157796536e-04, 1.565848265035364e-04, 1.571742550299991e-04, 1.565781095153116e-04, 1.570705426274923e-04, 1.564502805054069e-04, 1.571722557583089e-04, 1.565807869227720e-04, 1.571794624728288e-04, 1.564748011476317e-04, 1.571794624728288e-04, 1.564748011476317e-04, 1.696957564401975e-03, 1.674248008850150e-03, 1.703792610373459e-03, 1.677003090154721e-03, 1.818647482066382e-03, 1.834517620334336e-03, 1.857689226434050e-03, 1.840015814916362e-03, 1.683828373056093e-03, 1.947703672938101e-03, 1.683828373056093e-03, 1.947703672938101e-03, 1.027201900797202e-02, 1.054281839848550e-02, 1.021301746320543e-02, 1.049480601988247e-02, 9.140570339691432e-03, 9.285403374029043e-03, 1.051173091549447e-02, 1.075069769401969e-02, 1.040295530179533e-02, 1.045544316032967e-02, 1.040295530179533e-02, 1.045544316032967e-02, 9.850613882633052e-02, 5.578662901487634e-02, 8.954185547401540e-02, 6.930176913277770e-02, 1.090052167473599e-03, 1.894579999670419e-03, 6.504736675241507e-03, 2.071241255707253e-02, 7.998648096329078e-02, 1.526825932112495e-04, 7.998648096329096e-02, 1.526825932112500e-04, 2.020259392835651e-08, 3.475879764858278e-07, 6.163476827878900e-09, 5.257627281224511e-08, 1.478599769057354e-06, 4.009045434517530e-06, 8.473131968310267e-13, 1.254943016798165e-12, 3.583322632446906e-10, 2.164341326918999e-13, 3.583322633280915e-10, 2.164341322152891e-13, 4.596043573779073e-05, 4.333382900886198e-05, 4.539916269054540e-05, 4.279425796943701e-05, 4.487533815597685e-05, 4.255563007855118e-05, 4.443502542592442e-05, 4.210543561015974e-05, 4.647010430044818e-05, 4.319548803610064e-05, 4.647010430044818e-05, 4.319548803610064e-05, 1.008171721400048e-02, 9.796377737531642e-03, 8.614938812933111e-03, 8.373216512491240e-03, 8.852733189440475e-03, 8.958092507417309e-03, 7.435194985251166e-03, 7.515075509365222e-03, 1.006495035603799e-02, 9.156020507103830e-03, 1.006495035603799e-02, 9.156020507103830e-03, 5.191566069508654e-02, 5.088260955139239e-02, 4.964720690690838e-02, 4.836737611988080e-02, 2.150134780821787e-02, 5.002858402081673e-02, 2.229028346460116e-02, 4.361913150927472e-02, 4.284021936469135e-02, 5.387392559471833e-02, 4.284021936469132e-02, 5.387392559471833e-02, 1.390511744139416e-03, 1.193541824687612e-03, 6.447001010625883e-02, 5.977771702090449e-02, 4.203346578998522e-04, 1.080523969503917e-03, 1.318649974686153e-02, 1.320960440482151e-02, 1.036508090350916e-02, 1.712559095050590e-02, 1.036508090350919e-02, 1.712559095050575e-02, 3.907247286314525e-15, 4.949035743144495e-15, 9.961942914156089e-14, 6.996957614714877e-14, 2.800806116702027e-12, 3.843680136400567e-12, 2.963614901890096e-05, 1.355656761582099e-04, 4.352767590483365e-15, 7.386828808169241e-10, 4.352767586213320e-15, 7.386828806914073e-10, 7.747821452017650e-03, 7.505009831222842e-03, 7.521050562129309e-03, 7.292982887284204e-03, 7.603372687403224e-03, 7.367244280891998e-03, 7.667201511045355e-03, 7.434091479079474e-03, 7.640211370278350e-03, 7.403838095144006e-03, 7.640211370278350e-03, 7.403838095144010e-03, 1.609944638692049e-02, 1.547520452346438e-02, 1.113878092259479e-02, 1.092145633588415e-02, 1.340822389525662e-02, 1.311287324035840e-02, 1.493705976368757e-02, 1.477793550404549e-02, 1.526294042679979e-02, 1.463472967372115e-02, 1.526294042679980e-02, 1.463472967372118e-02, 5.124879651852368e-02, 5.074101993735480e-02, 6.261072697578803e-02, 6.374450021085981e-02, 8.207042309998956e-02, 8.217575991750353e-02, 6.227495354462658e-02, 6.025947179439385e-02, 8.399513941469448e-02, 8.424363021797920e-02, 8.399513941469448e-02, 8.424363021797916e-02, 6.099268741874849e-02, 5.712498141407076e-02, 1.713111254640166e-05, 9.790364132403759e-06, 8.034707781269591e-06, 1.278241562447583e-05, 7.142256829175134e-02, 8.895479099273393e-02, 7.407830545342145e-04, 2.014322312021333e-03, 7.407830545342092e-04, 2.014322312021351e-03, 7.534919221496991e-12, 7.767371298431939e-12, 9.146630348058895e-18, 5.356836545412810e-18, 1.280591980610588e-12, 1.713963115514405e-12, 1.129890315852699e-03, 7.751861331334416e-03, 2.252379461889911e-14, 4.521970875098994e-10, 2.252379466505513e-14, 4.521970877445724e-10]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
