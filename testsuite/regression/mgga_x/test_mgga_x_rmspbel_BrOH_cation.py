
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_rmspbel_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmspbel", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.051224229161337e+01, -2.051234959463030e+01, -2.051282414289032e+01, -2.135014865279244e+01, -2.135078364273159e+01, -2.218962756713300e+01, -3.482103021647001e+00, -3.767487032534831e+00, -3.766264190278037e+00, -3.767099031761393e+00, -3.766617860827952e+00, -3.481289754245429e+00, -5.829528719211470e-01, -6.752705897095874e-01, -7.587542411377896e-01, -6.645634938612768e-01, -5.695106700254368e-01, -7.609518390728152e-01, -1.791393712395001e-01, -1.815026526882325e-01, -8.050049030536648e-01, -1.767348080845539e-01, -2.048195172121414e-01, -1.967024107809067e-01, -1.010117671342812e-02, -8.358828655687597e-03, -4.486140738267283e-02, -5.828414940513071e-03, -8.132113616774532e-03, -8.132113616774532e-03, -5.368000093020072e+00, -5.368261008017024e+00, -5.368007433197770e+00, -5.368238173766107e+00, -5.248520495594452e+00, -5.248620285011104e+00, -2.148050432139582e+00, -2.157710472050399e+00, -2.141412360485783e+00, -2.149761959386157e+00, -1.972496640672617e+00, -2.156596352481917e+00, -5.830533021280278e-01, -6.612142022330532e-01, -5.840791304078128e-01, -5.969724578340423e-01, -5.946540924246970e-01, -6.289683581059675e-01, -1.349544876944938e-01, -1.841203616912366e-01, -1.265393612858635e-01, -2.018060327970184e+00, -1.487985338324211e-01, -1.487985338324211e-01, -3.469050178739257e-03, -5.697808219119506e-03, -4.362644018133032e-03, -6.838234658098286e-02, -5.479782736291176e-03, -5.479782736291178e-03, -6.002177404744780e-01, -5.995607774562675e-01, -5.917590984934733e-01, -5.968860078946248e-01, -5.928245453654648e-01, -5.963253172915526e-01, -5.843224178051800e-01, -4.910858353489340e-01, -5.113658307427641e-01, -5.583778079780988e-01, -5.499911504933750e-01, -5.242410430732055e-01, -6.667191672683095e-01, -2.649278696415626e-01, -2.668554668472510e-01, -3.484013646106188e-01, -3.394903318896909e-01, -3.032290085042546e-01, -4.898414808880943e-01, -2.824431406693291e-02, -7.359576678270505e-02, -3.615981820667649e-01, -1.087085248379169e-01, -1.087085248379169e-01, -7.176194109940155e-03, -1.523282825264551e-03, -1.612800272023610e-03, -5.726387751832070e-02, -5.032539554319147e-03, -3.141517970425492e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_rmspbel_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmspbel", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.004313737165324e+01, -3.004336414050882e+01, -3.004327344463657e+01, -3.004346285794606e+01, -3.004371320278070e+01, -3.004409119507396e+01, -3.004217853032044e+01, -2.818082050188330e+01, -3.004321930969252e+01, -2.818147379710259e+01, -2.818178668031178e+01, -2.818147379710259e+01, -4.441684104045315e+00, -4.592166304872825e+00, -4.441751078351202e+00, -4.441620057079364e+00, -4.443033540606526e+00, -4.443309847875763e+00, -4.442941658938906e+00, -4.443005404852229e+00, -4.440823106079814e+00, -4.444245611344776e+00, -4.591759304970032e+00, -4.444245611344777e+00, -8.272855258414152e-01, -8.341811358985735e-01, -8.249751447082359e-01, -8.363870872120996e-01, -8.127576516358026e-01, -8.069474827707217e-01, -8.163452077558674e-01, -8.063997788097624e-01, -8.429717221548859e-01, -7.597533535256668e-01, -8.438068122491482e-01, -7.870894814640461e-01, -1.982402475549857e-01, -2.190004153406150e-01, -2.013309809739257e-01, -2.227870106224832e-01, -9.618026264917393e-01, -9.339506617239882e-01, -1.785377923868798e-01, -1.770341250363947e-01, -2.207730631046221e-01, -1.531865809832029e-01, -2.207730631046219e-01, -1.070421163758855e-01, -1.299806160511440e-02, -1.380647548982899e-02, -6.877961206051757e-03, -1.457801912718505e-02, -3.824550248525384e-02, -7.422933184092244e-02, -7.829906738362214e-03, -7.699640943253056e-03, -1.160340980289056e-02, -6.612044062446530e-03, -1.160340980289056e-02, -6.612044062446531e-03, -6.917801754364746e+00, -6.916150162387727e+00, -6.919970915274789e+00, -6.918245728637671e+00, -6.917941629615728e+00, -6.916236109453379e+00, -6.919802258193549e+00, -6.918139214752133e+00, -7.280197220767880e+00, -6.917200339894460e+00, -6.918898244027458e+00, -7.278449875488265e+00, -2.479773886840241e+00, -2.480049506332504e+00, -2.502033677151209e+00, -2.501635057496075e+00, -2.460910548192651e+00, -2.466562568628281e+00, -2.480165122181568e+00, -2.486081786202013e+00, -2.506438462262043e+00, -2.623483810391920e+00, -2.506438462262042e+00, -2.493359877615186e+00, -7.631903826492300e-01, -7.357035798134454e-01, -8.415106429744593e-01, -8.425871688196690e-01, -6.816489378843879e-01, -7.117520867079838e-01, -7.198041425909987e-01, -7.470629588354382e-01, -7.981383552613119e-01, -7.319485622242279e-01, -7.981383552613120e-01, -7.550784254121552e-01, -1.459515217482177e-01, -1.468047438282537e-01, -1.978279906258232e-01, -2.218544961194659e-01, -1.376076487635824e-01, -1.409858304000665e-01, -2.507651793475154e+00, -2.506580707428685e+00, -1.523666336889582e-01, -1.520259015996915e-01, -1.523666336889584e-01, -1.520259015996915e-01, -2.959959996828338e-03, -6.107306444055490e-03, -7.534446307833166e-03, -7.648691213020436e-03, -5.631667009299480e-03, -5.962806725572801e-03, -1.059656660068680e-01, -6.404531357867556e-02, -5.755896483546880e-03, -7.893950895914282e-03, -5.755896483546882e-03, -7.893950895914286e-03, -7.911569164583606e-01, -7.943214882689117e-01, -7.830359706135972e-01, -7.862423930361060e-01, -7.988830378745365e-01, -8.016790107025762e-01, -7.980324456915555e-01, -7.914062721838790e-01, -7.984116080944181e-01, -8.012485091947996e-01, -7.984116080944181e-01, -7.902393568867778e-01, -7.694348440014762e-01, -7.720976277758197e-01, -6.337969436556281e-01, -6.147703613381652e-01, -6.717733669538622e-01, -6.802523982161376e-01, -7.107341992586572e-01, -7.133549188029574e-01, -6.908664940432618e-01, -6.936323161494680e-01, -6.908664940432618e-01, -7.309708346655915e-01, -8.776208730008399e-01, -9.345951516348268e-01, -2.719959389490194e-01, -2.734804658157881e-01, -3.174245504945818e-01, -3.285779641155940e-01, -4.617517276611535e-01, -4.414070618950414e-01, -3.788962722876497e-01, -3.788496109274996e-01, -3.788962722876496e-01, -3.887577106748926e-01, -5.775059483700532e-01, -5.824642984753146e-01, -3.753008527829482e-02, -3.778688275801090e-02, -8.991695669292261e-02, -9.212139692260291e-02, -4.245448992624943e-01, -4.338874275824107e-01, -1.197163861869734e-01, -1.208016989052035e-01, -1.197163861869730e-01, -1.208016989052038e-01, -9.388980422519275e-03, -9.729372458866967e-03, -2.028628440794342e-03, -2.033264693277621e-03, -2.078240908055332e-03, -2.210376969925958e-03, -7.575292762126028e-02, -7.700218813787642e-02, -5.450670235268519e-03, -7.237411791374045e-03, -5.450670235268517e-03, -3.649658904375519e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rmspbel_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmspbel", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.886200703950679e-08, 0.000000000000000e+00, -2.886473761736266e-08, -2.886201334362553e-08, 0.000000000000000e+00, -2.886474110873335e-08, -2.886181702510278e-08, 0.000000000000000e+00, -2.886451637938211e-08, -2.886177347915245e-08, 0.000000000000000e+00, -6.656017018195492e-09, -2.886203151095791e-08, 0.000000000000000e+00, -6.655610517587339e-09, -6.655230894247290e-09, 0.000000000000000e+00, -6.655610517587339e-09, -8.190976831520597e-06, 0.000000000000000e+00, -2.079966347352966e-05, -8.191426219461477e-06, 0.000000000000000e+00, -8.191294101587281e-06, -8.200290193198758e-06, 0.000000000000000e+00, -8.201528224014283e-06, -8.194307795388333e-06, 0.000000000000000e+00, -8.193862228531982e-06, -8.195226946654048e-06, 0.000000000000000e+00, -8.201213557896934e-06, -2.081935767826640e-05, 0.000000000000000e+00, -8.201213557896934e-06, -1.302622190442033e-02, 0.000000000000000e+00, -1.294422273064349e-02, -1.307278433024115e-02, 0.000000000000000e+00, -4.723606340677537e-03, -4.907376022781731e-03, 0.000000000000000e+00, -4.992577871793148e-03, -4.935443668848770e-03, 0.000000000000000e+00, -1.366937853551375e-02, -1.263482914335079e-02, 0.000000000000000e+00, -1.521659956098117e-02, -4.610860629675753e-03, 0.000000000000000e+00, -5.282302874798071e-03, -2.855545452642590e+00, 0.000000000000000e+00, -8.329477003340771e-01, -2.729456647811973e+00, 0.000000000000000e+00, -8.024880801585470e-01, -1.952842639390211e-03, 0.000000000000000e+00, -5.999608178079546e-03, -1.198722899373385e+00, 0.000000000000000e+00, -1.299866448207365e+00, -7.456415322969128e-01, 0.000000000000000e+00, -1.562732034441842e+00, -7.456415322969127e-01, 0.000000000000000e+00, -2.833921357073756e+01, -8.483527620981324e+00, 0.000000000000000e+00, -8.513390100034684e+00, -1.655036182965534e+06, 0.000000000000000e+00, -8.900771928611684e+00, -1.731275848047323e+03, 0.000000000000000e+00, -3.911357125985614e+00, -6.223769805391683e+00, 0.000000000000000e+00, -6.287681992640782e+00, -8.064426474272990e+00, 0.000000000000000e+00, -1.382366062733922e+01, -8.064426474272990e+00, 0.000000000000000e+00, -1.382366062734258e+01, -1.931089919837447e-06, 0.000000000000000e+00, -1.932946635173568e-06, -1.930497311668822e-06, 0.000000000000000e+00, -1.932373865457115e-06, -1.931061400196221e-06, 0.000000000000000e+00, -1.932930184063231e-06, -1.930552448652877e-06, 0.000000000000000e+00, -1.932409375346984e-06, -7.910278340481862e-06, 0.000000000000000e+00, -1.932658656835834e-06, -1.930783498644389e-06, 0.000000000000000e+00, -7.918292859449493e-06, -7.773110426230940e-05, 0.000000000000000e+00, -7.783154746410815e-05, -7.628486976733254e-05, 0.000000000000000e+00, -7.642376597141285e-05, -7.889894137652490e-05, 0.000000000000000e+00, -7.866503002010469e-05, -7.765716659577326e-05, 0.000000000000000e+00, -7.740174694048776e-05, -7.605680633544680e-05, 0.000000000000000e+00, -2.153044262628628e-04, -7.605680633544680e-05, 0.000000000000000e+00, -7.698185843460157e-05, -1.092757518308661e-02, 0.000000000000000e+00, -1.902387225230550e-02, -8.427312926998762e-03, 0.000000000000000e+00, -8.437347967955184e-03, -1.496916169888021e-02, 0.000000000000000e+00, -1.344093445142549e-02, -1.362852562998912e-02, 0.000000000000000e+00, -1.219195222154052e-02, -9.559532458112786e-03, 0.000000000000000e+00, -2.061148438780678e-02, -9.559532458112776e-03, 0.000000000000000e+00, -1.151754825779733e-02, -1.908891819867495e+00, 0.000000000000000e+00, -1.883894487219394e+00, -2.601648922043692e+00, 0.000000000000000e+00, -6.081776490249807e-01, -2.120999231331229e+00, 0.000000000000000e+00, -2.109551385651404e+00, -9.797674430152140e-05, 0.000000000000000e+00, -9.816189804779480e-05, -1.980890368527790e+00, 0.000000000000000e+00, -2.237432001587647e+00, -1.980890368527776e+00, 0.000000000000000e+00, -2.237432001587652e+00, -4.825062311689188e+07, 0.000000000000000e+00, -4.167368246489874e+00, -5.904088549076697e+00, 0.000000000000000e+00, -5.204342873684839e+00, -4.250368018249500e+01, 0.000000000000000e+00, -4.664787711097627e+01, -3.364686852393070e+00, 0.000000000000000e+00, -2.203486909876146e+02, -8.013032666975660e+00, 0.000000000000000e+00, -2.541874787356008e+01, -8.013032666968549e+00, 0.000000000000000e+00, -2.541874787355109e+01, -1.232142677138021e-02, 0.000000000000000e+00, -1.213787083061940e-02, -1.242598885643304e-02, 0.000000000000000e+00, -1.224138107858260e-02, -3.141703274924221e-02, 0.000000000000000e+00, -3.049499630123407e-02, -2.794465466632889e-02, 0.000000000000000e+00, -1.217515390809861e-02, -2.968503714872148e-02, 0.000000000000000e+00, -2.883654885589184e-02, -2.968503714872148e-02, 0.000000000000000e+00, -1.218997299706936e-02, -1.370977883025828e-02, 0.000000000000000e+00, -1.353663502410648e-02, -2.163986754511650e-02, 0.000000000000000e+00, -3.448243051819624e-02, -1.899352718698587e-02, 0.000000000000000e+00, -4.933749626682678e-02, -1.668420655560051e-02, 0.000000000000000e+00, -1.646175171316867e-02, -1.781675180763934e-02, 0.000000000000000e+00, -1.757384725900588e-02, -1.781675180763934e-02, 0.000000000000000e+00, -6.794332870417612e-02, -6.872819563200760e-03, 0.000000000000000e+00, -2.836586735928658e-02, -3.247377852807790e-01, 0.000000000000000e+00, -3.196173544445757e-01, -5.349918352190154e-01, 0.000000000000000e+00, -1.859229670767801e-01, -2.211601556141303e-01, 0.000000000000000e+00, -7.689012846049684e-02, -1.246068980312077e-01, 0.000000000000000e+00, -1.250742111781428e-01, -1.246068980312080e-01, 0.000000000000000e+00, -3.453242193362954e-01, -2.890359736236789e-02, 0.000000000000000e+00, -2.838106952876580e-02, -1.867104158279311e+03, 0.000000000000000e+00, -1.816865498824660e+03, -3.182273522988042e+00, 0.000000000000000e+00, -3.260100128023014e+00, -9.753490360898687e-02, 0.000000000000000e+00, -9.528091803222319e-02, -3.477275167813687e+00, 0.000000000000000e+00, -3.919075929151500e+00, -3.477275167813813e+00, 0.000000000000000e+00, -3.919075929151399e+00, -4.766204821187419e+05, 0.000000000000000e+00, -4.133397171438180e+05, -6.792513471128472e+00, 0.000000000000000e+00, -6.762646736930893e+00, -1.985467288548292e+08, 0.000000000000000e+00, -1.551604054332564e+08, -1.127524406047418e+02, 0.000000000000000e+00, -1.056650060433413e+02, -2.067640352913369e+01, 0.000000000000000e+00, -2.635873150835312e+01, -2.067640352913785e+01, 0.000000000000000e+00, -2.087551523157972e+07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rmspbel_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmspbel", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.579221929131493e-03, 1.579456946991759e-03, 1.579251048556905e-03, 1.579478011904817e-03, 1.579330317485481e-03, 1.579595181855396e-03, 1.579003856922500e-03, -4.139356772535468e-20, 1.579240880582452e-03, 1.511804353470489e-19, -4.493483157313193e-19, 1.511804353470489e-19, -4.045182839837185e-18, 2.480369286019175e-03, 8.144379348670657e-18, 2.967612922291679e-18, -3.788106494279410e-18, -3.772906678025903e-18, -8.174725749229363e-19, 1.051301907090037e-18, 2.691556376100132e-18, 4.192340456670651e-18, 2.482769923138571e-03, 4.192340456670651e-18, 4.928504365269114e-03, 5.282334893084898e-03, 4.831501412904421e-03, -5.656429351920266e-17, 4.907674737917029e-17, 3.010502317695410e-17, -4.369170360707853e-17, 4.273081821929986e-03, 5.491497985552073e-03, 2.742401758665818e-03, -1.405856298373917e-17, -3.595100825751662e-18, 4.582145762966938e-03, -1.020844641859035e-16, 5.131321205427508e-03, -3.262111139740594e-18, -4.883614631979707e-17, 1.253234513641864e-03, 1.184191595860068e-16, -2.943479258303948e-17, -1.022762905089260e-16, -1.932253752365927e-16, -7.729104344588515e-17, 4.597229751372167e-05, 6.412574291008847e-19, -8.941620464112744e-19, 2.384329525693530e-10, -3.734713787809942e-19, 4.251160687512809e-07, 2.774885181076798e-17, 1.726104093187347e-19, 4.912290811946221e-20, 1.183518595461399e-18, -1.455405911607740e-19, 1.183518595461399e-18, -1.503944139785129e-19, 1.053448176107638e-19, 6.562010987247793e-19, -2.647059828172872e-19, -1.624879312813345e-19, -1.940199200430132e-19, -1.410788032669874e-18, 4.629454258205290e-19, -7.289931845915982e-19, 6.371230742084090e-03, -3.817751352325185e-20, -7.098248738778515e-19, 6.373075947393182e-03, -7.922603645083927e-18, 1.001163703357994e-17, 2.015572551441064e-18, 1.226695128873263e-17, -2.739452229430198e-18, 4.337922991152138e-18, -8.850274715401552e-18, 5.998180594677864e-18, -1.955317226807921e-18, 4.841858304478367e-03, -1.955317226807921e-18, 7.900066750224198e-19, 2.795143782273383e-17, 4.518696143906365e-03, -8.179746789670778e-19, 1.190524127666540e-18, 4.519718047571066e-17, 2.801486662546636e-17, 4.302129194898682e-18, -2.467163075948424e-18, 1.002039220898796e-17, 5.929733229648865e-03, -1.353585940012252e-17, -1.922997773480783e-17, 3.632666019686328e-16, 3.314395008894779e-16, 1.352374870554963e-03, 1.922209706736190e-16, 1.337747496261075e-16, 2.107526030309134e-16, -1.298903241403561e-18, 1.696347180068922e-18, 5.443506412596266e-17, -1.958958289109124e-16, -7.315218330436629e-17, -1.382629909004172e-16, 1.290829677595894e-12, 1.087105139027977e-20, 2.318439390134985e-20, -5.043789193563130e-20, -2.495759542527023e-19, -2.362736663400041e-19, -5.456173029211053e-16, 7.780610724188606e-06, -4.644659168720122e-21, 9.827979966737196e-19, -5.318948318316239e-21, -3.293551160021014e-19, 1.392795650604286e-18, 2.875128404560810e-19, 7.636538686522853e-18, 4.603308816746059e-18, 2.954288089804785e-02, 2.874084935056052e-02, 2.437840883806426e-02, -2.960495815258474e-18, 2.697724879367930e-02, 2.625283596337056e-02, 2.697724879367930e-02, -3.048024645854484e-18, 3.308043787372011e-19, -7.881740287882190e-20, 1.195253275511735e-17, 2.134378723482887e-03, -1.102126490874510e-17, 2.503373594200804e-02, -1.425074496770776e-17, -1.237089460775116e-17, 2.453660347155749e-18, 3.101308538335529e-17, -1.554533548413251e-18, 5.189535663482598e-02, 1.859870507104778e-18, 4.602980835801701e-02, 7.916908897281142e-17, -7.650304836286088e-17, 8.723573820446535e-03, -3.454689058387892e-17, 2.659081335412704e-02, -4.131656420470051e-17, -2.147022092786087e-17, 6.964127963381281e-17, 4.181352468337459e-17, 1.970257304201344e-02, 2.962376384094267e-17, -1.062563176137473e-17, 4.176432081424616e-07, 4.192735621001981e-07, -1.107991175382498e-16, 9.752391781000977e-17, -8.826004414038323e-17, -4.248306226464391e-17, 3.226282392513388e-17, 3.202853694004566e-16, 3.948501840231963e-16, -7.099744633206715e-18, 3.590404295958368e-10, 4.198038867569658e-10, -1.018049698983112e-23, -1.225995102243309e-22, 1.866819714289309e-12, 2.770658183343399e-12, 2.701386936946666e-05, 3.490788042889486e-05, -7.794334586678716e-20, 7.195665373709898e-19, 1.175714631697761e-19, 5.182688666726210e-11]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
