
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_b00_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_b00", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.343637638186030e+01, -2.343649371482518e+01, -2.343711275737013e+01, -2.343519789490077e+01, -2.343643732352293e+01, -2.343643732352293e+01, -2.975446277241029e+00, -2.975703089120942e+00, -2.983666770719352e+00, -2.982301753558263e+00, -2.975519796477705e+00, -2.975519796477705e+00, -5.569665920438946e-01, -5.576291673110393e-01, -5.791211903229665e-01, -5.744062970694331e-01, -5.571846423280401e-01, -5.571846423280401e-01, -1.842696407082849e-01, -1.828393188858716e-01, -6.900225495527768e-01, -2.028468001943818e-01, -1.837982926934784e-01, -1.837982926934784e-01, -7.792141750289193e-02, -7.865132993819772e-02, -1.332784750937203e-01, -7.063950232829955e-02, -7.796641331687618e-02, -7.796641331687615e-02, -1.158587368724394e+01, -8.359342468962165e+00, -4.815253621337288e+00, -1.260067650736712e+01, -5.413738902951348e+00, -7.582305634683531e+00, -1.109421762526004e+00, -2.067895882071039e+00, -1.801059082823558e+00, -1.832398008084988e+00, -1.843725151079612e+00, -1.635077771376998e+00, -1.281495673254313e+00, -1.220536566298056e+00, -9.750419095927189e-01, -6.569052045978799e-01, -7.345762682111828e-01, -7.838321831138685e-01, -6.972773373506216e-02, -3.597859464466606e-01, -6.844982549967038e-02, -2.278544484085119e+00, -1.754730546367665e-01, -1.542234064585562e-01, -1.398162777065283e-01, -2.297383248203755e+00, -2.948496506873960e-03, -4.406177696438628e-02, -9.597258113285013e-02, -3.584420915858990e-03, -3.147809656243389e+01, -5.024070504666533e-01, -4.892959203529027e-01, -5.126665914122176e+00, -4.839503830087142e-01, -9.757772114017762e+01, -4.638408782489128e-01, -5.560919639770443e-01, -1.119156203292701e+00, -5.606608168010931e-01, -7.666312009649616e-01, -1.481676415777914e+00, -1.666087310808340e+00, -1.318254642897986e-01, -1.481565564637324e-01, -2.016229124017039e-01, -3.347003401857025e-01, -3.029635461427094e-01, -4.401518918480820e-01, -2.428375387121587e-01, -1.621158106356912e-01, -3.074857186285529e-01, -5.669157295475990e-02, -1.484906796904152e-01, -8.717448991678669e-03, -2.308428850901078e-01, -2.045987283370889e-03, -5.589927883907917e-02, -3.046375437246978e-03, -3.046283289364408e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_b00_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_b00", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.985942950998911e+01, -3.985909635312915e+01, -3.985776469059051e+01, -3.986317262890550e+01, -3.985925304938105e+01, -3.985925304938105e+01, -5.923755924643118e+00, -5.924870584535475e+00, -5.958482783247904e+00, -5.945170109530723e+00, -5.924097464583425e+00, -5.924097464583425e+00, -5.143101799288033e-01, -5.111804484769655e-01, -4.456772809261387e-01, -4.646680691327972e-01, -5.132011288887517e-01, -5.132011288887517e-01, -1.191044012360140e-01, -1.243822400597365e-01, -5.707888853757351e-01, -1.338572944511879e-01, -1.205412766412534e-01, -1.205412766412534e-01, -3.751570696885491e-02, -3.805909231533038e-02, -7.851200242922521e-02, -3.070659810624971e-02, -3.776391635501165e-02, -3.776391635501164e-02, -1.003356521344502e+01, -8.496702797902749e+00, -6.081471275326622e+00, -1.051647090560697e+01, -7.617365877316561e+00, -8.273615995113008e+00, -2.030835279638198e+00, -3.232587921831564e+00, -2.757398808608428e+00, -2.880202563768284e+00, -2.998738018020354e+00, -2.763363569935992e+00, -2.082018754249456e+00, -1.483724047145695e+00, -1.663218592093658e+00, -1.278461059949704e+00, -1.338737348541725e+00, -1.381966233291207e+00, -8.899995808523475e-02, -1.815443713508432e-01, -8.664169392493611e-02, -4.290710831607691e+00, -1.090711725109083e-01, -8.514086412763583e-02, -8.458208091261085e-02, -1.369554643007914e+00, -3.931323417271745e-03, -5.833241436688620e-02, -5.494499101099072e-02, -4.779231776193202e-03, -1.531031273830450e+01, -5.456702301132070e-01, -5.404412620292418e-01, -2.615977318245285e+00, -5.405057252005414e-01, -3.856869425821095e+01, -5.254155097055530e-01, -1.071992325656508e+00, -1.611318872343066e+00, -8.841763049578730e-01, -1.127264646825953e+00, -1.767395967228231e+00, -2.162697763068544e+00, -1.306475028445553e-01, -1.758918365225814e-01, -3.770012390068262e-01, -4.077593580652427e-01, -3.797440029141318e-01, -8.307606849302339e-01, -1.660956697997635e-01, -1.050233655728929e-01, -5.889980213616179e-01, -7.289132662035522e-02, -9.284826553350597e-02, -1.162339051110708e-02, -1.393308100435244e-01, -2.727985137616251e-03, -7.029172834185614e-02, -4.061942885326488e-03, -4.061714637907964e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_b00_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_b00", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.207756950170680e-09, -7.207657044144154e-09, -7.207334260814663e-09, -7.208972186466257e-09, -7.207703110437642e-09, -7.207703110437642e-09, -1.087866865013011e-05, -1.088000503356785e-05, -1.091810680953215e-05, -1.088735768578368e-05, -1.087893228404722e-05, -1.087893228404722e-05, -5.040548891513027e-03, -5.034226622263864e-03, -4.866298020531762e-03, -4.753842542660483e-03, -5.038729010281788e-03, -5.038729010281788e-03, -5.148402599741378e-01, -5.036954124264229e-01, -3.092181099030838e-03, -1.294496055116820e+00, -5.118902380188020e-01, -5.118902380188020e-01, -2.147990813399932e+03, -1.891751554320672e+03, -3.070370758002194e+01, -1.544672387158072e+04, -1.967318668879984e+03, -1.967318668879984e+03, -5.948433824420613e-07, -1.453951031698149e-06, -8.160889145531909e-10, -4.893201045621616e-07, -8.906841493010030e-07, -2.067061236759535e-06, -3.757925628789102e-09, -3.784784302486117e-05, -5.606495463433276e-05, -5.490918816396715e-05, -5.658701459808383e-05, -8.999774311931492e-05, -2.047179751955360e-03, -3.714762719443112e-03, -2.804205540960841e-03, -1.826318297725259e-02, -1.279019526945631e-02, -9.895645830441760e-03, -5.814060698272150e-03, -1.449073910337869e-01, -1.235637474642652e-04, -1.422049510801751e-04, -2.460253408493736e+00, -3.457030355516759e+00, -6.400714003259705e+03, -1.158022729192058e+02, -9.486871423164855e-09, -9.594299665545702e-03, -9.794753749603024e+03, -1.105375176628826e-04, -1.293696060128338e-05, -6.745599841284044e-12, -1.807840182542906e-14, -1.916791955625774e-04, -1.060576262141887e-11, -3.260795297109661e-06, -3.634859696113103e-14, -2.229752812076942e-02, -4.799890282985092e-03, -5.964220372851744e-03, -1.685622400403333e-02, -2.955018420654027e-03, -1.458341093598369e-03, -7.612048252425959e-06, -1.543081137404744e-06, -7.161993123305949e-05, -4.570172942026082e-02, -6.135845188908835e-02, -2.723827355718873e-02, -1.291194049977427e+01, -1.309734165076589e+01, -1.073479368831131e-01, -4.932970491740261e-04, -7.287484923511046e+00, -1.281691275596019e-03, -7.307118972798805e+04, -3.094740225822057e-04, -1.165271239586070e+00, -1.061443951654414e-01, -1.709231070200219e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_b00_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_b00", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([-2.786767016264314e-04, -2.786748682110224e-04, -2.786729355244990e-04, -2.787030002336546e-04, -2.786756776916456e-04, -2.786756776916456e-04, -1.815021844093607e-03, -1.815256238324276e-03, -1.822153521358449e-03, -1.817248655169520e-03, -1.815094903133282e-03, -1.815094903133282e-03, -5.923322877144660e-03, -5.897694081773304e-03, -5.257505703778744e-03, -5.258274380740727e-03, -5.914536238733364e-03, -5.914536238733364e-03, -1.238675282809764e-02, -1.260916917407304e-02, -6.255518235678766e-03, -1.186857583608362e-02, -1.246393500758899e-02, -1.246393500758899e-02, -9.003300596593263e-03, -9.112502309632895e-03, -9.931330242564306e-03, -7.148312875297901e-03, -9.183318928656781e-03, -9.183318928656778e-03, -3.326988601889472e-04, -8.136360024220796e-04, -4.564682814895792e-07, -2.738081272263733e-04, -4.982991795056441e-04, -1.156431176049941e-03, -1.113925448360341e-07, -1.145768050057046e-03, -1.647719166030887e-03, -1.640597453952770e-03, -1.720270946677037e-03, -2.735972269509042e-03, -1.587526516680058e-03, -3.692200914947525e-03, -1.857961186030827e-03, -1.373061490157641e-02, -1.110615737501149e-02, -8.592722597653826e-03, -2.114090178471609e-05, -3.561858917132897e-03, -4.322427465396559e-07, -3.977409115270504e-03, -1.383181419000175e-02, -1.943580338578982e-02, -2.659223653882485e-03, -7.181182893880954e-05, -2.476998018268465e-15, -8.406846574408730e-06, -4.594616673272922e-03, -5.185199491123163e-11, -1.102242978011952e-05, -5.655765777486373e-12, -1.524527618443090e-14, -1.623600197152533e-04, -8.963569347128749e-12, -2.755894678894474e-06, -2.808228438747288e-14, -1.124613569135116e-02, -2.759048424836170e-03, -3.851370228433622e-03, -1.026402108096607e-02, -1.799357398013849e-03, -1.670772836611230e-03, -3.722766470291754e-07, -1.264251533840749e-07, -1.226087048760496e-05, -5.413180711017132e-03, -7.267654691348225e-03, -1.007987756088335e-02, -3.318100984140155e-03, -8.350512933188304e-03, -1.550084298363168e-02, -9.591189223255775e-07, -1.416907864745074e-02, -8.648221901015174e-09, -9.299148167716729e-04, -2.699803688310084e-11, -1.967275469115293e-03, -3.056375734144164e-08, -4.921646929293313e-11])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_b00_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_b00", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([3.984613714719892e-03, 3.984352041004081e-03, 3.983234495808122e-03, 3.987493199381947e-03, 3.984475601437348e-03, 3.984475601437348e-03, 2.320711830914189e-02, 2.321679448411927e-02, 2.350763463256553e-02, 2.339273620446891e-02, 2.320969647431757e-02, 2.320969647431757e-02, 1.327297820658071e-02, 1.295685357565788e-02, 6.365890847363903e-03, 7.571390278085988e-03, 1.316302386229486e-02, 1.316302386229486e-02, -9.866030487713794e-03, -5.106126730213941e-03, 1.422252718903485e-02, 2.823634991486782e-02, -8.515677426812347e-03, -8.515677426812357e-03, 3.600940393772484e-02, 3.644544517471797e-02, 3.927985511052829e-02, 2.859321316496305e-02, 3.672863477814692e-02, 3.672863477814711e-02, -1.138720299215109e-02, -6.539210163074734e-03, -5.323195011493360e-03, -1.356269141857536e-02, -4.149799129650070e-03, -3.977954354694897e-03, 1.054079133894440e-02, 2.672972289532441e-02, 2.273241259913143e-02, 2.475200376899319e-02, 2.721618785635022e-02, 2.897774657758815e-02, 4.077089976825037e-01, 1.935824712485936e-01, 2.898037810476957e-01, 2.666164115255842e-01, 2.572597110535328e-01, 2.614773105633494e-01, -2.532329143801801e-03, -5.773944893885161e-02, -3.041156410311089e-03, 8.063024625264807e-02, 3.778811323281994e-02, 6.232804642973762e-02, 1.063677087840961e-02, 2.846351820396548e-04, -8.244303105002080e-09, -2.974152929658026e-04, 1.837836383596934e-02, -3.634139431681263e-09, -2.104494469513692e+01, -2.846882577193580e-01, -3.114306518723111e-01, -3.438031011327445e+00, -3.176971166568893e-01, -6.405647440981498e+01, -3.310049789417553e-01, 2.701256478797355e-01, 4.131525600730874e-01, 7.340312264466033e-02, 2.455471850430326e-01, 4.024195922051653e-01, 3.428222885383910e-01, -2.657675104584153e-02, -1.277755727288304e-02, 6.493188410226550e-02, 7.098938772933867e-02, 7.372910623571537e-02, 1.961510729408954e-01, 1.273033191877574e-02, 3.241310146435345e-02, 2.559091961039217e-01, -2.164180512644694e-03, 5.099768724892838e-02, -1.610380350195273e-07, 3.719657553054504e-03, -4.373162723931505e-10, 5.539728340784632e-03, 1.194165082652513e-07, -2.641569360852588e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
