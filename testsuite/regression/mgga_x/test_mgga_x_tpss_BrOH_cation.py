
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_tpss_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.990391377516073e+01, -1.990397421110901e+01, -1.990425804580818e+01, -2.119268516563792e+01, -2.119315148761085e+01, -2.248254774606271e+01, -3.470198034724751e+00, -3.705424463345235e+00, -3.704820016161801e+00, -3.705398553555987e+00, -3.704953958912377e+00, -3.469845920859206e+00, -6.332811782635155e-01, -6.934034142426989e-01, -7.480115116357444e-01, -6.848784922332740e-01, -6.221039504479020e-01, -7.492151821225401e-01, -1.864654859626502e-01, -1.884378367755075e-01, -8.489485889276360e-01, -1.832499035282691e-01, -2.058373049833731e-01, -1.984837659723735e-01, -1.010597612137039e-02, -8.685073180637328e-03, -4.704310163042405e-02, -5.829203398671972e-03, -8.134754876479621e-03, -8.134754876479621e-03, -5.479812274514544e+00, -5.480818730220673e+00, -5.479862406990483e+00, -5.480750851434181e+00, -5.173016641510987e+00, -5.173314828532478e+00, -2.104278719310227e+00, -2.115077576339284e+00, -2.096869757561950e+00, -2.106102498635025e+00, -1.976496844434331e+00, -2.113912650462480e+00, -5.820377517694733e-01, -6.708780652639182e-01, -5.765881331181668e-01, -5.956569619035814e-01, -5.953927320512533e-01, -6.292880845942388e-01, -1.401089238720215e-01, -1.958296472791352e-01, -1.311121314366994e-01, -2.022721156167077e+00, -1.547996154187759e-01, -1.547996154187758e-01, -3.615137885901220e-03, -5.698501040222737e-03, -4.363532084956599e-03, -7.278347329720912e-02, -5.481090470584898e-03, -5.481090470584900e-03, -6.203134821356120e-01, -6.169243053687907e-01, -5.511075003545892e-01, -5.859820192052134e-01, -5.517262688886089e-01, -5.854271090337166e-01, -6.035326474289908e-01, -4.887344457289940e-01, -5.108857610460409e-01, -5.669343737052839e-01, -5.547289589733966e-01, -5.222643499982274e-01, -6.627087784312602e-01, -2.651894354919886e-01, -2.753444400953424e-01, -3.496817863962277e-01, -3.320849607589694e-01, -3.081176181335534e-01, -4.823087222204349e-01, -3.217920495761773e-02, -7.475248352935907e-02, -3.563541053080093e-01, -1.125663034407504e-01, -1.125663034407504e-01, -8.177267155347655e-03, -1.523297472493548e-03, -1.837800925952907e-03, -6.517951021820359e-02, -5.033607379406547e-03, -3.409430933038239e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_tpss_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.680343287462243e+01, -2.680344016391342e+01, -2.680352560701599e+01, -2.680350751920648e+01, -2.680383706052253e+01, -2.680394964362816e+01, -2.680278981870854e+01, -2.802147238221306e+01, -2.680348759406667e+01, -2.802186102172816e+01, -2.802227626840032e+01, -2.802186102172816e+01, -4.461883473751732e+00, -4.242629838779561e+00, -4.462041812032572e+00, -4.461804151038033e+00, -4.465084761147183e+00, -4.465673286342862e+00, -4.464357976639894e+00, -4.464424389518948e+00, -4.460815392487729e+00, -4.467236524145143e+00, -4.241919202376445e+00, -4.467236524145142e+00, -8.224737502302533e-01, -8.248305361958845e-01, -8.214564433317902e-01, -7.647067242055239e-01, -7.263089775183905e-01, -7.189179637713686e-01, -7.343086451375835e-01, -8.107764622012309e-01, -8.305802613933150e-01, -7.865106381388448e-01, -7.742796980315830e-01, -6.940412059290255e-01, -2.125518506515689e-01, -1.911966213450573e-01, -2.148959582440844e-01, -1.954744145300920e-01, -8.378924585951548e-01, -9.922298839490118e-01, -1.764841515339735e-01, -1.706948883137238e-01, -1.916815522349395e-01, -1.642499032226696e-01, -1.916815522349394e-01, -1.214892283790342e-01, -1.301529978691764e-02, -1.382717958402563e-02, -7.837375281264953e-03, -1.460295333135256e-02, -4.356371086460694e-02, -7.656434547617366e-02, -7.833126797144383e-03, -7.702718537262377e-03, -1.161535758790180e-02, -6.614934172178866e-03, -1.161535758790180e-02, -6.614934172178866e-03, -6.754137075738805e+00, -6.752508259844463e+00, -6.753643862948788e+00, -6.752031304786585e+00, -6.754091840960006e+00, -6.752478912791750e+00, -6.753669695046747e+00, -6.752046686758487e+00, -6.542885495228324e+00, -6.752272033010946e+00, -6.753899119529570e+00, -6.541288890321748e+00, -2.446563551985494e+00, -2.447943550263914e+00, -2.479188368175668e+00, -2.479513557111521e+00, -2.417799954125819e+00, -2.427446941364566e+00, -2.446744242876235e+00, -2.456548060697065e+00, -2.486007940298617e+00, -2.388409167287033e+00, -2.486007940298617e+00, -2.467650224860816e+00, -7.749060116112965e-01, -7.281853661773873e-01, -8.350713302182986e-01, -8.344798193075450e-01, -6.863254378391456e-01, -7.220852349412814e-01, -7.312216405019518e-01, -7.572299583963523e-01, -8.070498287081799e-01, -7.218997254056609e-01, -8.070498287081800e-01, -7.662285974256219e-01, -1.564445413650628e-01, -1.572780444671190e-01, -2.185770450021085e-01, -1.995081621044792e-01, -1.479394591892446e-01, -1.513500207265253e-01, -2.536081431369692e+00, -2.534938576498587e+00, -1.587007984953175e-01, -1.516938510201850e-01, -1.587007984953175e-01, -1.516938510201850e-01, -3.372898068601349e-03, -6.108556187575605e-03, -7.537240481987030e-03, -7.651435655638003e-03, -5.634799214096139e-03, -5.966702559896639e-03, -1.125027512292850e-01, -7.287237426076942e-02, -5.757347359252764e-03, -7.900626691604981e-03, -5.757347359252765e-03, -7.900626691604984e-03, -7.394476144906739e-01, -7.419916265220475e-01, -7.452587903935768e-01, -7.477705378541750e-01, -7.363729307989975e-01, -7.392355634866835e-01, -7.375256424232207e-01, -7.442168626855268e-01, -7.369500300597750e-01, -7.398021319787411e-01, -7.369500300597751e-01, -7.450701723168642e-01, -7.210536502687731e-01, -7.230880133699280e-01, -6.434701276083207e-01, -6.085248255671443e-01, -6.795303348514228e-01, -6.450668837727702e-01, -7.036498915251576e-01, -7.059456695624825e-01, -6.929703787248320e-01, -6.953902642863465e-01, -6.929703787248320e-01, -6.613351032544494e-01, -8.793880190484794e-01, -8.385480030140465e-01, -2.361572101971590e-01, -2.374627345566785e-01, -3.234835382695789e-01, -2.946004193928682e-01, -4.210613710773398e-01, -4.346964524430977e-01, -3.587522485219650e-01, -3.590961233156987e-01, -3.587522485219649e-01, -3.682638064686961e-01, -5.809723624929476e-01, -5.874281242939390e-01, -4.274903677617903e-02, -4.304147865022525e-02, -9.373515728402462e-02, -9.629518188311714e-02, -4.260010780422014e-01, -4.393896543913854e-01, -1.286859831901386e-01, -1.296766753052918e-01, -1.286859831901386e-01, -1.296766753052918e-01, -1.069860921541458e-02, -1.108646502234328e-02, -2.028686888940046e-03, -2.033323413560277e-03, -2.368172093979974e-03, -2.518741249047828e-03, -8.608921620557378e-02, -8.747871808585103e-02, -5.452649946544872e-03, -7.242649259183512e-03, -5.452649946544868e-03, -4.158790303702353e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_tpss_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.371182813405183e-08, 0.000000000000000e+00, -1.371369977666315e-08, -1.371191524205745e-08, 0.000000000000000e+00, -1.371376274080642e-08, -1.371205986504374e-08, 0.000000000000000e+00, -1.371400757369705e-08, -1.371109728651424e-08, 0.000000000000000e+00, -2.431419213849812e-08, -1.371189368530202e-08, 0.000000000000000e+00, -2.431932400360064e-08, -2.431529648026871e-08, 0.000000000000000e+00, -2.431932400360064e-08, -9.941267614616884e-06, 0.000000000000000e+00, -9.650445055492005e-06, -9.942518227615155e-06, 0.000000000000000e+00, -9.941536876940296e-06, -9.967383518096615e-06, 0.000000000000000e+00, -9.971490842212737e-06, -9.954902051045530e-06, 0.000000000000000e+00, -9.954379887375029e-06, -9.944860588727954e-06, 0.000000000000000e+00, -9.976417493213604e-06, -9.652516394575086e-06, 0.000000000000000e+00, -9.976417493213604e-06, -3.601571476124986e-03, 0.000000000000000e+00, -3.629621643112201e-03, -3.599479678908245e-03, 0.000000000000000e+00, -6.497780052254636e-03, -7.013027227765003e-03, 0.000000000000000e+00, -7.168690130455173e-03, -6.979726712132934e-03, 0.000000000000000e+00, -3.663143996966195e-03, -3.574329400193644e-03, 0.000000000000000e+00, -3.690590077459809e-03, -6.302122465312573e-03, 0.000000000000000e+00, -7.701466083773885e-03, -5.790292777642381e-01, 0.000000000000000e+00, -1.230872455958401e+00, -5.693675238607468e-01, 0.000000000000000e+00, -1.178141395832151e+00, -2.884291780642027e-03, 0.000000000000000e+00, -1.286278333738850e-03, -1.438413203244986e+00, 0.000000000000000e+00, -1.637629743174801e+00, -1.108133877304265e+00, 0.000000000000000e+00, -1.388027791901450e+00, -1.108133877304265e+00, 0.000000000000000e+00, -2.472130518357806e+00, -4.789437777970682e+00, 0.000000000000000e+00, -4.808689993147538e+00, -1.079253801602614e+05, 0.000000000000000e+00, -5.030544881446220e+00, -1.181453507355818e+02, 0.000000000000000e+00, -2.428575596538809e+00, -3.504482236320149e+00, 0.000000000000000e+00, -3.540353173830435e+00, -4.548961281120121e+00, 0.000000000000000e+00, -7.784405879962272e+00, -4.548961281120121e+00, 0.000000000000000e+00, -7.784405879962272e+00, -1.185106101361165e-05, 0.000000000000000e+00, -1.186326819077927e-05, -1.197816936549646e-05, 0.000000000000000e+00, -1.198622346073292e-05, -1.185994216750423e-05, 0.000000000000000e+00, -1.186881552568912e-05, -1.196892000168955e-05, 0.000000000000000e+00, -1.198042700067949e-05, -4.843460868763838e-06, 0.000000000000000e+00, -1.192456911294758e-05, -1.191451862424264e-05, 0.000000000000000e+00, -4.847897389534131e-06, -9.333796964438234e-05, 0.000000000000000e+00, -9.341983494601159e-05, -9.131805885723543e-05, 0.000000000000000e+00, -9.147228010925574e-05, -9.517918561775476e-05, 0.000000000000000e+00, -9.470564223089196e-05, -9.325654161440654e-05, 0.000000000000000e+00, -9.281937929708341e-05, -9.100849290695034e-05, 0.000000000000000e+00, -8.027991407788255e-05, -9.100849290695034e-05, 0.000000000000000e+00, -9.221247209427287e-05, -1.839675425575234e-02, 0.000000000000000e+00, -1.765624339651858e-02, -3.263564908633922e-02, 0.000000000000000e+00, -3.459349328414834e-02, -1.834663640310980e-02, 0.000000000000000e+00, -1.809843737030634e-02, -2.178011408978166e-02, 0.000000000000000e+00, -2.287682788003477e-02, -2.005513055338095e-02, 0.000000000000000e+00, -1.852873170534499e-02, -2.005513055338095e-02, 0.000000000000000e+00, -2.022497870848100e-02, -1.701915294153668e+00, 0.000000000000000e+00, -1.689671747757517e+00, -4.055041827561024e-01, 0.000000000000000e+00, -8.574007756180450e-01, -1.770993114480223e+00, 0.000000000000000e+00, -1.840976599684218e+00, -2.040819733233131e-04, 0.000000000000000e+00, -2.046711978114434e-04, -2.070199528208860e+00, 0.000000000000000e+00, -2.630806839111362e+00, -2.070199528208861e+00, 0.000000000000000e+00, -2.630806839111362e+00, -3.140287091413630e+06, 0.000000000000000e+00, -2.345179131692287e+00, -3.324092433232669e+00, 0.000000000000000e+00, -2.930024121407659e+00, -2.394289914644326e+01, 0.000000000000000e+00, -2.628468409037538e+01, -2.386464383297256e+00, 0.000000000000000e+00, -1.656138895267314e+01, -4.509930526939701e+00, 0.000000000000000e+00, -1.433058895721581e+01, -4.509930526939709e+00, 0.000000000000000e+00, -1.433058895721582e+01, -3.682216077071604e-01, 0.000000000000000e+00, -3.745564170336661e-01, -1.678422873207737e-01, 0.000000000000000e+00, -1.696660800231229e-01, -5.520073892234646e-02, 0.000000000000000e+00, -5.548404719758146e-02, -6.484373502631327e-02, 0.000000000000000e+00, -2.663591881142449e-01, -5.953823966823045e-02, 0.000000000000000e+00, -5.983987513227101e-02, -5.953823966823045e-02, 0.000000000000000e+00, -2.373145585176591e-01, -3.550200445112158e-01, 0.000000000000000e+00, -3.623637734891108e-01, -2.996709625914461e-02, 0.000000000000000e+00, -3.020859977673657e-02, -3.921445106464326e-02, 0.000000000000000e+00, -3.230388277259288e-02, -6.909155184017893e-02, 0.000000000000000e+00, -6.899833521426740e-02, -4.990765473196135e-02, 0.000000000000000e+00, -5.003894984559074e-02, -4.990765473196135e-02, 0.000000000000000e+00, -3.343872200864294e-02, -1.989575125507658e-02, 0.000000000000000e+00, -1.351177901371853e-02, -4.826474478576290e-01, 0.000000000000000e+00, -4.750699417679597e-01, -1.374412260870584e-01, 0.000000000000000e+00, -2.643132594365795e-01, -7.926831070360263e-02, 0.000000000000000e+00, -9.250024101125182e-02, -1.605240361442294e-01, 0.000000000000000e+00, -1.607865293025747e-01, -1.605240361442297e-01, 0.000000000000000e+00, -1.068684989842038e-01, -3.528053535247182e-02, 0.000000000000000e+00, -3.512895521546145e-02, -1.273420083032063e+02, 0.000000000000000e+00, -1.239361400914017e+02, -2.059226245699953e+00, 0.000000000000000e+00, -2.134227605626095e+00, -1.179620986488018e-01, 0.000000000000000e+00, -1.232273941481618e-01, -2.829429987490492e+00, 0.000000000000000e+00, -3.422573867372412e+00, -2.829429987490489e+00, 0.000000000000000e+00, -3.422573867372415e+00, -3.109957727236985e+04, 0.000000000000000e+00, -2.697560074443074e+04, -3.820558486646071e+00, 0.000000000000000e+00, -3.803760200510699e+00, -1.292200272339509e+07, 0.000000000000000e+00, -1.009879282057043e+07, -9.182006688610649e+00, 0.000000000000000e+00, -8.775273886801289e+00, -1.164087813189754e+01, 0.000000000000000e+00, -1.485534463324572e+01, -1.164087813189758e+01, 0.000000000000000e+00, -1.359723868170968e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_tpss_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.552941764330921e-04, 1.553264930670136e-04, 1.552983892909297e-04, 1.553295459531124e-04, 1.553099984338776e-04, 1.553466927600447e-04, 1.552627749804251e-04, 1.862389590004138e-03, 1.552969051773238e-04, 1.862911741070482e-03, 1.862665459710370e-03, 1.862911741070482e-03, 1.708830823658133e-03, -5.307793282169055e-04, 1.709911783128298e-03, 1.708673496400520e-03, 1.731068960794232e-03, 1.734864972972723e-03, 1.723200793107321e-03, 1.723205306293312e-03, 1.706697923455939e-03, 1.742381101475886e-03, -5.312573967003417e-04, 1.742381101475886e-03, -1.932551212611324e-03, -2.022212770953941e-03, -1.907558899976996e-03, 1.779993242396342e-03, 1.270056078618420e-03, 1.210541548958574e-03, 1.414053304835945e-03, -1.760626211686063e-03, -2.069636816706464e-03, -1.290809578402624e-03, 1.861347202808727e-03, 1.007200249102713e-03, -2.614767971174270e-03, 2.745886338985339e-03, -2.845396353190218e-03, 3.148331533646177e-03, 3.097396643746394e-04, -6.756851490556520e-04, 2.201338536105949e-04, 3.132792304653067e-04, 1.833777537641670e-03, 3.145683177506827e-05, 1.833777537641669e-03, -9.553298294149855e-05, 1.476290163453019e-10, 2.012417364986925e-10, -6.165232486226470e-08, 2.833272758793000e-10, -5.233692915122582e-06, 4.810795933462701e-07, 7.248869326524528e-12, 6.767267212681120e-12, 7.719525986058012e-11, 1.030869721066942e-11, 7.719525986058012e-11, 1.030869721066900e-11, 1.327993472003692e-02, 1.328406526178825e-02, 1.343022965143274e-02, 1.342934155235837e-02, 1.329036519467143e-02, 1.329056829158083e-02, 1.341922634055317e-02, 1.342244572666106e-02, 7.818535198944901e-04, 1.335650287428602e-02, 1.335502003604495e-02, 7.820205306940467e-04, 1.970914042508842e-03, 1.988718457143191e-03, 2.136220450099913e-03, 2.150011709008136e-03, 1.830613098268640e-03, 1.886282772803012e-03, 1.967294783423097e-03, 2.027960272400814e-03, 2.178782560527735e-03, -1.111685009120792e-03, 2.178782560527735e-03, 2.089869709901577e-03, 2.530775580239402e-02, 1.310973577905514e-03, 6.654371822328986e-02, 7.076346597940121e-02, 1.202721505793257e-02, 1.694717255191741e-02, 2.450579458650941e-02, 3.067050896526638e-02, 3.363917418214516e-02, 1.506538901738678e-03, 3.363917418214516e-02, 2.740415427004915e-02, 3.400814253227862e-05, 3.541366339431272e-05, -1.010256942926096e-03, 6.523223963677824e-04, 2.103468283444408e-05, 2.970952213181802e-05, 1.060261395753401e-02, 1.062159815823102e-02, 1.017449809747010e-04, 2.249570973444255e-04, 1.017449809747011e-04, 2.249570973444261e-04, -2.515295280612425e-09, 1.142832674172545e-12, 5.522126589172142e-12, 4.926283526795017e-12, 2.496092044895533e-11, 3.824967433057749e-11, 4.747342511834773e-06, -3.213330466839065e-05, 2.267451022882437e-12, 6.276198302242993e-11, 2.267451022882339e-12, 6.276198302236315e-11, 5.934259051127647e-01, 6.106705601303176e-01, 2.661523961123038e-01, 2.721844227251551e-01, 7.770601375195842e-03, 7.748398622941251e-03, 7.809532204781529e-03, 4.316231608956541e-01, 7.792056049999684e-03, 7.768074811866926e-03, 7.792056049999684e-03, 3.836607302106171e-01, 5.273084075390940e-01, 5.435694224206153e-01, 2.053783343479984e-02, -1.059628295781080e-03, 3.910057640610105e-02, 3.331342882063361e-03, 8.481185507599485e-02, 8.562245932705692e-02, 5.600126717817296e-02, 5.687100337142807e-02, 5.600126717817297e-02, 5.161503336056346e-03, 4.583471574364405e-02, 4.486824626146768e-03, 1.514575484463399e-03, 1.552517921193003e-03, -3.817342428739732e-03, 3.327023832700910e-03, -6.358275600470665e-03, 1.067761783288525e-02, 6.532039946689135e-03, 6.637557219445968e-03, 6.532039946689138e-03, -6.171297370433469e-03, 1.378173128160610e-02, 1.496969464819884e-02, -5.203358532737745e-06, -5.205477369600173e-06, 1.159580814465470e-06, 1.447516224780277e-06, 1.727233899792543e-02, 2.442653813819155e-02, 1.919720278072635e-05, 3.487408758006668e-05, 1.919720278072642e-05, 3.487408758006662e-05, -7.303752247875026e-08, -8.011244158602191e-08, 9.588559560450344e-15, 9.634744238263474e-15, -3.619163373365160e-09, -4.613342941488077e-09, -7.258203657012515e-05, -8.651110951634446e-05, 7.170148028263861e-12, 4.284785210235860e-11, 7.170148028284047e-12, -2.751456230995746e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
