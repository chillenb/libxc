
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_tpss_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.235325135584062e+01, -2.235331402797894e+01, -2.235368224433066e+01, -2.235275182763390e+01, -2.235322651852781e+01, -2.235322651852781e+01, -3.451381816184284e+00, -3.451387371541531e+00, -3.451785495131638e+00, -3.453756095494703e+00, -3.452426655530083e+00, -3.452426655530083e+00, -6.690608077012483e-01, -6.688539826442562e-01, -6.658393894505035e-01, -6.723327459385660e-01, -6.730527284083462e-01, -6.730527284083462e-01, -2.051750925536193e-01, -2.061050037010042e-01, -7.651322980118840e-01, -1.769143030147462e-01, -2.012971726301024e-01, -2.012971726301023e-01, -1.010592603822104e-02, -1.064148434125975e-02, -5.774779899087097e-02, -5.829079603316939e-03, -8.134593992621853e-03, -8.134593992621855e-03, -5.476237706871540e+00, -5.477248799402282e+00, -5.476360313927925e+00, -5.477250319373086e+00, -5.476710858530705e+00, -5.476710858530705e+00, -2.080457585674287e+00, -2.094986671929564e+00, -2.076246069490511e+00, -2.088958105590311e+00, -2.090632043299105e+00, -2.090632043299105e+00, -5.952427681600964e-01, -6.128844603082667e-01, -5.434454492328586e-01, -5.370086047807795e-01, -6.044391707965713e-01, -6.044391707965714e-01, -1.379982160958509e-01, -2.225186913539134e-01, -1.292670065582579e-01, -1.813550813563956e+00, -1.524111302108073e-01, -1.524111302108073e-01, -4.500491160817931e-03, -5.698239666354044e-03, -4.363370701169897e-03, -9.070055801762580e-02, -5.480938600503793e-03, -5.480938600503794e-03, -5.833586483260014e-01, -5.999358216938466e-01, -5.966399285226167e-01, -5.922679244261401e-01, -5.946820847431130e-01, -5.946820847431130e-01, -5.464684126022470e-01, -5.191048963342231e-01, -5.395499354827464e-01, -5.576447887883162e-01, -5.486728423921559e-01, -5.486728423921559e-01, -6.398665755475090e-01, -2.628483982601830e-01, -2.959900056548597e-01, -3.608319004147366e-01, -3.249420127105118e-01, -3.249420127105118e-01, -4.727403291976118e-01, -5.531101054503143e-02, -7.449842611800354e-02, -3.438096208158317e-01, -1.113867524333808e-01, -1.113867524333808e-01, -1.423855734343479e-02, -1.523266761033485e-03, -3.203227951062002e-03, -1.056225868897364e-01, -5.033450842767340e-03, -5.033450842767336e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_tpss_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.770668392728026e+01, -2.770759131796632e+01, -2.770675567048649e+01, -2.770764334322384e+01, -2.770716158666165e+01, -2.770817556413854e+01, -2.770635607616202e+01, -2.770714760116721e+01, -2.770672143243179e+01, -2.770768758870080e+01, -2.770672143243179e+01, -2.770768758870080e+01, -4.196099892816175e+00, -4.195889948524025e+00, -4.196157860196503e+00, -4.195912774265187e+00, -4.197131327585192e+00, -4.197316086572714e+00, -4.197686942221591e+00, -4.197623827334553e+00, -4.195310506977044e+00, -4.198592529490566e+00, -4.195310506977044e+00, -4.198592529490566e+00, -7.835713175397888e-01, -7.893137062398936e-01, -7.814380984399327e-01, -7.884929814567616e-01, -7.518139930699150e-01, -7.418846442394411e-01, -7.545999770809142e-01, -7.582033851690296e-01, -7.990762731644422e-01, -7.048176853174750e-01, -7.990762731644422e-01, -7.048176853174750e-01, -1.818350899620356e-01, -1.909474974404604e-01, -1.840703544182224e-01, -1.953725023773946e-01, -9.100058552634382e-01, -9.566201352754168e-01, -1.589348961815062e-01, -1.605860811711407e-01, -1.896321362047930e-01, -1.454537517011117e-01, -1.896321362047929e-01, -1.454537517011116e-01, -1.301502705348168e-02, -1.382704018229169e-02, -1.363518283766392e-02, -1.460258474747146e-02, -7.254221487373586e-02, -7.617758940035914e-02, -7.832579077581111e-03, -7.702278922071285e-03, -1.161477656397486e-02, -6.613954340682676e-03, -1.161477656397487e-02, -6.613954340682677e-03, -6.747025861235199e+00, -6.745805511856224e+00, -6.746586510413081e+00, -6.745381965872263e+00, -6.747145871373039e+00, -6.745894936179059e+00, -6.746764208014469e+00, -6.745505529526589e+00, -6.746692419042373e+00, -6.745575556243771e+00, -6.746692419042373e+00, -6.745575556243771e+00, -2.435968486220172e+00, -2.437558303747091e+00, -2.467913149957054e+00, -2.468519038129527e+00, -2.412280041167844e+00, -2.420712990263026e+00, -2.440611907856800e+00, -2.449322414055886e+00, -2.470360019485310e+00, -2.456292759553927e+00, -2.470360019485310e+00, -2.456292759553927e+00, -7.261069690268820e-01, -7.253298604016509e-01, -7.866532422531669e-01, -7.872346226832462e-01, -6.446956069298651e-01, -6.736946617232412e-01, -6.823843684705315e-01, -7.050438787574023e-01, -7.584663988537893e-01, -7.145264427561603e-01, -7.584663988537894e-01, -7.145264427561604e-01, -1.499737651016165e-01, -1.500331997044421e-01, -1.946015679690825e-01, -1.951179712043106e-01, -1.416053943686608e-01, -1.452992241585051e-01, -2.377945595653765e+00, -2.376942449342383e+00, -1.519211290930181e-01, -1.457944043043753e-01, -1.519211290930181e-01, -1.457944043043753e-01, -5.877092700428074e-03, -6.107711517517043e-03, -7.536240296344511e-03, -7.650347440134190e-03, -5.634247886036672e-03, -5.965978265189164e-03, -1.095290152657127e-01, -1.103098898248906e-01, -5.755766767645133e-03, -7.900395229100328e-03, -5.755766767645134e-03, -7.900395229100330e-03, -7.295912694537686e-01, -7.324979146526651e-01, -7.296966012602437e-01, -7.324887829560975e-01, -7.282336138331749e-01, -7.310511225857942e-01, -7.277843996702948e-01, -7.306313999757202e-01, -7.278728386553597e-01, -7.307093175129610e-01, -7.278728386553597e-01, -7.307093175129610e-01, -7.171410252156001e-01, -7.194408542302680e-01, -6.394265220646187e-01, -6.425687185018751e-01, -6.692213749731358e-01, -6.721165993113011e-01, -6.840922030515391e-01, -6.863557590602636e-01, -6.773411259515083e-01, -6.801227933337093e-01, -6.773411259515083e-01, -6.801227933337093e-01, -8.237870096958574e-01, -8.255118833478545e-01, -2.349436751678453e-01, -2.362773980361086e-01, -2.912782777062378e-01, -2.958838903612461e-01, -4.234776547979767e-01, -4.256593077332965e-01, -3.602137956326967e-01, -3.604797665448984e-01, -3.602137956326967e-01, -3.604797665448984e-01, -5.668517113922704e-01, -5.731902166153284e-01, -7.145107675793008e-02, -7.189528627568316e-02, -9.279865928465202e-02, -9.529168398862140e-02, -4.072806944712398e-01, -4.211148454730727e-01, -1.250228092552241e-01, -1.254214593285115e-01, -1.250228092552240e-01, -1.254214593285115e-01, -1.859069673901522e-02, -1.925950714841309e-02, -2.028592752630996e-03, -2.033172063120088e-03, -4.126940869897447e-03, -4.389135581996451e-03, -1.206817477818590e-01, -1.220110852573045e-01, -5.450991997416357e-03, -7.242463121964839e-03, -5.450991997416351e-03, -7.242463121964832e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_tpss_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.667231682784996e-08, 0.000000000000000e+00, -2.667273776578537e-08, -2.667324184971375e-08, 0.000000000000000e+00, -2.667340920657136e-08, -2.667446126968905e-08, 0.000000000000000e+00, -2.667564500863585e-08, -2.666406293633537e-08, 0.000000000000000e+00, -2.666237314574090e-08, -2.667295709086634e-08, 0.000000000000000e+00, -2.666639689473353e-08, -2.667295709086634e-08, 0.000000000000000e+00, -2.666639689473353e-08, -2.457577857845772e-05, 0.000000000000000e+00, -2.457957432245893e-05, -2.458128807874233e-05, 0.000000000000000e+00, -2.458394860316213e-05, -2.469744851794623e-05, 0.000000000000000e+00, -2.471934550007060e-05, -2.461216032184949e-05, 0.000000000000000e+00, -2.461863973170061e-05, -2.457849967437239e-05, 0.000000000000000e+00, -2.472088150866675e-05, -2.457849967437239e-05, 0.000000000000000e+00, -2.472088150866675e-05, -1.057446585957472e-02, 0.000000000000000e+00, -1.049087077875817e-02, -1.061934072339815e-02, 0.000000000000000e+00, -1.050313878418824e-02, -1.110837530208264e-02, 0.000000000000000e+00, -1.128404830139241e-02, -1.103768225193367e-02, 0.000000000000000e+00, -1.104074901831043e-02, -1.009577610576781e-02, 0.000000000000000e+00, -1.115318981077416e-02, -1.009577610576781e-02, 0.000000000000000e+00, -1.115318981077416e-02, -1.428177243358339e+00, 0.000000000000000e+00, -1.268196158428593e+00, -1.412552815367361e+00, 0.000000000000000e+00, -1.223735480491394e+00, -4.094069473748625e-03, 0.000000000000000e+00, -3.407322094894065e-03, -2.126733038341205e+00, 0.000000000000000e+00, -2.047915697236272e+00, -1.225965284054874e+00, 0.000000000000000e+00, -2.917249226621270e+00, -1.225965284054873e+00, 0.000000000000000e+00, -2.917249226621272e+00, -4.907224711679061e+00, 0.000000000000000e+00, -4.858763739706886e+00, -5.171280382363135e+00, 0.000000000000000e+00, -5.145842531488421e+00, -2.950664054878239e+00, 0.000000000000000e+00, -2.976934948864251e+00, -4.491241990281092e+00, 0.000000000000000e+00, -4.369237582781103e+00, -4.897801995625743e+00, 0.000000000000000e+00, -1.242135327658839e+01, -4.897801995625762e+00, 0.000000000000000e+00, -1.242135327658839e+01, -1.192631805424943e-05, 0.000000000000000e+00, -1.193426706570537e-05, -1.205316635110784e-05, 0.000000000000000e+00, -1.205693897253851e-05, -1.193346292464683e-05, 0.000000000000000e+00, -1.193856288401092e-05, -1.204227254219132e-05, 0.000000000000000e+00, -1.204997314977388e-05, -1.199095157583980e-05, 0.000000000000000e+00, -1.199564471854966e-05, -1.199095157583980e-05, 0.000000000000000e+00, -1.199564471854966e-05, -1.118156576351994e-04, 0.000000000000000e+00, -1.113576543947824e-04, -1.075515343513764e-04, 0.000000000000000e+00, -1.072545392149640e-04, -1.096214546278479e-04, 0.000000000000000e+00, -1.098223122146278e-04, -1.057347985774805e-04, 0.000000000000000e+00, -1.058595358202300e-04, -1.113853033286720e-04, 0.000000000000000e+00, -1.094235309107853e-04, -1.113853033286720e-04, 0.000000000000000e+00, -1.094235309107853e-04, -3.883148990808739e-02, 0.000000000000000e+00, -3.940414707860731e-02, -4.906767288113000e-02, 0.000000000000000e+00, -5.075182297014972e-02, -4.519075469526094e-02, 0.000000000000000e+00, -4.425870143170838e-02, -4.201225152046369e-02, 0.000000000000000e+00, -4.526962011918433e-02, -3.824163010514026e-02, 0.000000000000000e+00, -4.411761344735961e-02, -3.824163010514026e-02, 0.000000000000000e+00, -4.411761344735961e-02, -2.270762952909967e+00, 0.000000000000000e+00, -2.314555778292205e+00, -9.467510862327917e-01, 0.000000000000000e+00, -9.370880423052050e-01, -2.526237209488556e+00, 0.000000000000000e+00, -2.472842601512585e+00, -3.183396070980285e-04, 0.000000000000000e+00, -3.189204110157696e-04, -2.552574336079085e+00, 0.000000000000000e+00, -3.081369638687370e+00, -2.552574336079085e+00, 0.000000000000000e+00, -3.081369638687370e+00, -6.303983195944771e+00, 0.000000000000000e+00, -5.456325668262545e+00, -5.429047636694833e+00, 0.000000000000000e+00, -5.012492474189894e+00, -3.092886456240693e+01, 0.000000000000000e+00, -3.440995398282080e+01, -3.570045111899653e+00, 0.000000000000000e+00, -3.437639432019116e+00, -1.537801873238879e+01, 0.000000000000000e+00, -1.511068130087581e+01, -1.537801873238874e+01, 0.000000000000000e+00, -1.511068130087581e+01, -3.387839169177221e-01, 0.000000000000000e+00, -3.427106183189334e-01, -1.813783994251448e-01, 0.000000000000000e+00, -1.826683352897500e-01, -2.222159010549100e-01, 0.000000000000000e+00, -2.243501564597487e-01, -2.678750041812584e-01, 0.000000000000000e+00, -2.699491377331950e-01, -2.435072997129507e-01, 0.000000000000000e+00, -2.456156127787931e-01, -2.435072997129507e-01, 0.000000000000000e+00, -2.456156127787930e-01, -2.064660794691056e-01, 0.000000000000000e+00, -2.118604964586228e-01, -3.324561946319916e-02, 0.000000000000000e+00, -3.309429688924002e-02, -4.670054051810946e-02, 0.000000000000000e+00, -4.698869866774132e-02, -8.575403891566685e-02, 0.000000000000000e+00, -8.549619750419067e-02, -6.188074189593423e-02, 0.000000000000000e+00, -6.157761489699590e-02, -6.188074189593423e-02, 0.000000000000000e+00, -6.157761489699590e-02, -3.312042132536010e-02, 0.000000000000000e+00, -3.487177060357703e-02, -5.050264265787645e-01, 0.000000000000000e+00, -4.976470724756937e-01, -2.976996703232005e-01, 0.000000000000000e+00, -2.884990535236060e-01, -1.564548138377542e-01, 0.000000000000000e+00, -1.547338693751686e-01, -1.929686132289910e-01, 0.000000000000000e+00, -1.938439290143046e-01, -1.929686132289910e-01, 0.000000000000000e+00, -1.938439290143047e-01, -5.495601186900076e-02, 0.000000000000000e+00, -5.378711866092490e-02, -2.693078377585326e+00, 0.000000000000000e+00, -2.697240967377805e+00, -2.705548103445467e+00, 0.000000000000000e+00, -2.773326470104207e+00, -2.431303576933517e-01, 0.000000000000000e+00, -2.295566284398043e-01, -3.672784364286429e+00, 0.000000000000000e+00, -4.368104972266609e+00, -3.672784364286433e+00, 0.000000000000000e+00, -4.368104972266609e+00, -3.892721187817706e+00, 0.000000000000000e+00, -3.974666875944287e+00, -1.939190273971082e+01, 0.000000000000000e+00, -3.435047795673942e+01, -1.196993163230625e+01, 0.000000000000000e+00, -1.274319663157248e+01, -4.087215989424028e+00, 0.000000000000000e+00, -4.011654046544105e+00, -3.170873639067648e+01, 0.000000000000000e+00, -1.568505216222761e+01, -3.170873639067650e+01, 0.000000000000000e+00, -1.568505216222766e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_tpss_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.858462265273468e-03, 1.859137230031152e-03, 1.858553096627966e-03, 1.859203125286517e-03, 1.858808016488308e-03, 1.859578608562480e-03, 1.857789797448334e-03, 1.858277871261494e-03, 1.858520791164578e-03, 1.858770895528004e-03, 1.858520791164578e-03, 1.858770895528004e-03, 2.723877410713530e-03, 2.719449417576528e-03, 2.725276348834209e-03, 2.720037975023280e-03, 2.748812473282739e-03, 2.752082089823496e-03, 2.755070834632810e-03, 2.751817425643183e-03, 2.721543493289038e-03, 2.773348584611071e-03, 2.721543493289038e-03, 2.773348584611071e-03, 4.018961521210723e-03, 4.005948300520361e-03, 4.034442766205526e-03, 4.000088171647269e-03, 3.930229683055831e-03, 3.980579729763166e-03, 4.416340101044118e-03, 4.529684935125616e-03, 3.681100707220785e-03, 3.593309214556249e-03, 3.681100707220785e-03, 3.593309214556249e-03, 3.253030848728923e-03, 3.469144316731903e-03, 3.798334230933173e-03, 4.196623752931655e-03, 6.244980749482071e-04, 6.029865465305887e-04, 4.743509282939944e-04, 5.198970478696716e-04, 3.402102715780074e-03, 7.231507629835471e-05, 3.402102715780070e-03, 7.231507629835495e-05, 7.768294687620357e-14, 5.517815227677485e-13, 1.005632164303626e-13, 2.533750959284432e-13, 2.194546269237651e-08, 3.003097056718559e-08, 5.853434425295482e-15, 4.281495842542627e-15, 3.835417149205043e-14, 2.197828598302326e-14, 3.835417149205149e-14, 2.197828598302331e-14, 1.324131881413044e-02, 1.324764264741689e-02, 1.339071792054444e-02, 1.339212694788027e-02, 1.325256573026862e-02, 1.325474326206773e-02, 1.338065033556643e-02, 1.338588732214025e-02, 1.331528081476251e-02, 1.331957212050639e-02, 1.331528081476251e-02, 1.331957212050639e-02, 2.783558084980958e-03, 2.779414117051588e-03, 2.860901019613346e-03, 2.855449761034801e-03, 2.488715996241003e-03, 2.569516864155713e-03, 2.544590164822508e-03, 2.626265997637459e-03, 3.057814421273454e-03, 2.851405487958298e-03, 3.057814421273454e-03, 2.851405487958298e-03, 3.239398155786236e-02, 3.327061245947696e-02, 3.053447265069949e-02, 3.202638023202183e-02, 1.956246061117173e-02, 2.498185585316047e-02, 1.058659385787801e-02, 1.561675798912904e-02, 3.862933292132874e-02, 3.386412362896477e-02, 3.862933292132876e-02, 3.386412362896477e-02, 2.313378872649257e-05, 2.641751769490654e-05, 1.054350301980465e-03, 1.080358370231235e-03, 1.380988754983377e-05, 1.907420088442872e-05, 3.407434856627575e-03, 3.408436871169371e-03, 1.037090442786595e-04, 3.188013496341692e-04, 1.037090442786597e-04, 3.188013496341700e-04, 3.174099426127164e-15, 3.094627329495182e-15, 1.077684091112363e-14, 1.074517452811352e-14, 2.845137383578532e-14, 5.487055827787887e-14, 1.816870175009139e-06, 1.408751111379172e-06, 1.533769279483028e-14, 1.879663643001609e-14, 1.533769279483020e-14, 1.879663643001597e-14, 2.970354023044234e-01, 3.039822379994275e-01, 2.159557131163817e-01, 2.205787296601906e-01, 2.500257580817729e-01, 2.559226650985863e-01, 2.794120313568618e-01, 2.856072573714213e-01, 2.649373572826000e-01, 2.710074498847725e-01, 2.649373572826000e-01, 2.710074498847725e-01, 7.460417606932424e-02, 7.857050923900408e-02, 2.212843707946465e-02, 2.256200433843798e-02, 4.131551013003312e-02, 4.232343413243839e-02, 8.261910737597380e-02, 8.326210365371772e-02, 5.766530793574759e-02, 5.838966732994538e-02, 5.766530793574758e-02, 5.838966732994535e-02, 2.128875454821414e-02, 2.312247963953688e-02, 2.115198928528824e-03, 2.184063293125326e-03, 5.316885854269172e-03, 5.668883963953653e-03, 2.157064376520176e-02, 2.166318102468843e-02, 1.202350513960046e-02, 1.221530803484996e-02, 1.202350513960045e-02, 1.221530803484998e-02, 2.130274772765795e-02, 2.213526873966512e-02, 1.301744134247283e-08, 1.274502958954738e-08, 1.493098998024488e-07, 1.955576498280085e-07, 3.144721062401101e-02, 3.747547947914805e-02, 8.582433741524107e-06, 1.992709511526680e-05, 8.582433741524119e-06, 1.992709511526684e-05, 3.255410771593830e-12, 4.513180424182724e-12, 1.294972746605293e-17, 2.411432082104271e-17, 2.495037173673689e-16, 4.514914855773776e-16, 7.802177200876542e-06, 1.800756544063898e-05, 4.737461878753145e-14, 1.104645078282219e-14, 4.737461878753130e-14, 1.104645078282223e-14])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
