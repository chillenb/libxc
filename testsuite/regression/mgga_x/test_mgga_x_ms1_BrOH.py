
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ms1_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.076293548907169e+01, -2.076304536899557e+01, -2.076356718619897e+01, -2.076177338068646e+01, -2.076299309305726e+01, -2.076299309305726e+01, -3.185776539139822e+00, -3.185845242065358e+00, -3.188007746876098e+00, -3.187429166262792e+00, -3.185810768290094e+00, -3.771008206836894e+00, -5.635809488997421e-01, -7.450453620405736e-01, -7.304377806470450e-01, -7.338183308187021e-01, -7.453994068705441e-01, -7.453994068705441e-01, -2.056564292555463e-01, -2.078966703018485e-01, -6.610056784414376e-01, -1.591384062982795e-01, -2.063358458549071e-01, -2.063358458549071e-01, -1.325080967151583e-02, -1.387776132012101e-02, -5.566148039659504e-02, -6.364716271487289e-03, -1.373310891253940e-02, -1.373310891253940e-02, -5.490012910297018e+00, -5.490575577424478e+00, -5.490070124742642e+00, -5.235906708762188e+00, -5.490301568097211e+00, -5.490301568097211e+00, -1.751247422585560e+00, -1.771769671643578e+00, -1.742635961575107e+00, -1.758797336049767e+00, -1.776333579364698e+00, -2.149541051654470e+00, -6.218182685661247e-01, -6.679942616057193e-01, -5.937936649942467e-01, -6.133842353392391e-01, -6.430773658132479e-01, -5.621959410543905e-01, -7.891467315466828e-02, -2.131183413229376e-01, -7.791032975731552e-02, -2.045310693836333e+00, -1.359710097310415e-01, -1.359710097310415e-01, -3.826260247400440e-03, -7.016465420549504e-03, -5.258715885354402e-03, -4.907490376471120e-02, -3.984290045816304e-03, -6.393222686807731e-03, -6.269038238772251e-01, -6.250882295308184e-01, -6.193713692043109e-01, -6.262429298590441e-01, -6.259925244656027e-01, -6.259925244656027e-01, -6.073203341009080e-01, -5.396585054747082e-01, -5.593061067067795e-01, -5.775242620289035e-01, -5.682476666752798e-01, -5.134828131210514e-01, -7.024968461693440e-01, -1.920762121441156e-01, -3.060099149286958e-01, -3.151279410674754e-01, -3.413447069692143e-01, -3.413447069692142e-01, -4.174514229061826e-01, -5.167822135685963e-02, -6.937792252482743e-02, -3.589880745280652e-01, -6.403862906228054e-02, -9.812798950596888e-02, -1.553299012111740e-02, -1.921462691251256e-03, -3.649765170260014e-03, -9.362660869767254e-02, -5.433586499731300e-03, -5.433586499731293e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ms1_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.135903831347080e+01, -3.135915437051519e+01, -3.135972433900960e+01, -3.135782624490460e+01, -3.135909902911263e+01, -3.135909902911263e+01, -4.696102269376730e+00, -4.695900533219941e+00, -4.689856130760899e+00, -4.692604618357940e+00, -4.696068637829415e+00, -4.713228458867887e+00, -8.202769676282540e-01, -8.991004894367056e-01, -8.766663065410525e-01, -8.827756800633760e-01, -8.996605083348935e-01, -8.996605083348935e-01, -2.467015230621917e-01, -2.498063709315116e-01, -9.220756316495765e-01, -1.906205097326131e-01, -2.476327323604421e-01, -2.476327323604421e-01, -1.761739811911428e-02, -1.844609806771260e-02, -7.215646700613743e-02, -8.482949614040482e-03, -1.825374386985379e-02, -1.825374386985374e-02, -7.178357696131194e+00, -7.180095565670880e+00, -7.178543420507070e+00, -7.580385592852798e+00, -7.179237932588671e+00, -7.179237932588671e+00, -2.674249324637387e+00, -2.697863274529360e+00, -2.663184154352240e+00, -2.683531195333420e+00, -2.702125530625015e+00, -2.666844944236505e+00, -7.913571790485530e-01, -8.662724132802241e-01, -7.482892975890697e-01, -7.848834203269687e-01, -8.239120103467754e-01, -7.994128414617345e-01, -1.054289614666607e-01, -2.528123243567779e-01, -1.041110598752285e-01, -2.622177812300431e+00, -1.635081826270677e-01, -1.635081826270677e-01, -5.101680443952439e-03, -9.350263652779979e-03, -7.007428812274933e-03, -6.545352736904804e-02, -5.312386870220544e-03, -8.520078171379961e-03, -8.316848909129197e-01, -8.253274179926363e-01, -8.385245708217676e-01, -8.293531071778866e-01, -8.284712260112382e-01, -8.284712260112382e-01, -8.043122364279701e-01, -6.849648169470847e-01, -7.190800340689338e-01, -7.513430079204290e-01, -7.348267076972858e-01, -7.772205631302481e-01, -9.062171576088403e-01, -2.707927958819815e-01, -3.702693329239098e-01, -4.804334816847994e-01, -4.187731466123839e-01, -4.187731466123838e-01, -6.036429667565159e-01, -6.728722036408263e-02, -8.901942920009304e-02, -4.493569539799494e-01, -8.551073338350396e-02, -1.213460569163460e-01, -2.065992192432394e-02, -2.561841642163355e-03, -4.865310349003952e-03, -1.157958911949511e-01, -7.241710842295147e-03, -7.241710842295119e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms1_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.761156166677146e-08, -1.761155962561179e-08, -1.761140843396407e-08, -1.761145971902066e-08, -1.761156155582772e-08, -1.761156155582772e-08, -1.194233018204679e-05, -1.193955071690903e-05, -1.185250083066244e-05, -1.188280957166870e-05, -1.194133179227328e-05, -2.219433387358027e-06, -8.008974785628658e-03, -1.171284191280453e-03, -1.192844370543562e-03, -1.204163810292655e-03, -1.170752629994772e-03, -1.170752629994772e-03, -1.885726864830870e-01, -1.844025091264922e-01, -3.628442209841549e-03, -2.190503062645851e-01, -1.872369668374101e-01, -1.872369668374101e-01, -2.202938759699939e+00, -2.184800844860732e+00, -7.115548320695581e-01, -7.848325291179901e-01, -2.285103374505010e+00, -2.285103374509720e+00, -5.700922005504584e-07, -5.700519659911665e-07, -5.700898637410771e-07, -4.726517227565473e-06, -5.700694120434617e-07, -5.700694120434617e-07, -1.298581294934744e-04, -1.262642105506928e-04, -1.311447019860692e-04, -1.285663877219953e-04, -1.254488811841760e-04, -2.033667650432442e-05, -3.210152211187267e-03, -2.547399228226680e-03, -3.729942343668431e-03, -3.449333316800138e-03, -2.865965379852046e-03, -1.389910150753298e-02, -1.633412371564150e+01, -1.213802027738209e-01, -1.719692515683309e+01, -2.806369261821293e-05, -3.642830576018232e-01, -3.642830576018232e-01, -2.950193842481549e+06, -9.902091262967736e-01, -3.891404044133490e+00, -1.090462996132001e+02, -2.509254957114306e+06, -1.220173480176517e+00, -3.465570051855526e-03, -3.469835508897142e-03, -1.427327885670597e-02, -3.467170361683673e-03, -3.467728963709524e-03, -3.467728963709524e-03, -3.920101369028839e-03, -5.608423767276846e-03, -5.060527384190119e-03, -4.597385397173159e-03, -4.827537340538150e-03, -4.131236121034461e-02, -2.052937499026144e-03, -5.255908282391131e-01, -4.219403552748983e-02, -1.254000714318456e-01, -3.012183421572457e-02, -3.012183421572451e-02, -3.832662718872322e-02, -6.775889603810059e-01, -5.594225371641357e-01, -2.719350672603619e-02, -3.764730119224816e+01, -5.974156124231832e-01, -8.612985823089278e-01, -1.096335526435916e+00, -2.154171411725347e+00, -7.177568908032000e-01, -1.715519698865422e+00, -1.715519698889761e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms1_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.154763664833444e-03, 2.154793475996268e-03, 2.154919295516271e-03, 2.154434516458049e-03, 2.154779400047346e-03, 2.154779400047346e-03, 3.375726465984961e-03, 3.374281907090738e-03, 3.329428849010792e-03, 3.346824037359701e-03, 3.375309687469717e-03, 2.532306529713200e-18, 6.434586358417539e-03, -1.106171213871137e-17, 1.612579882037450e-17, -8.513497977585068e-17, -5.826088378410488e-17, -5.826088378410488e-17, 9.769790274415915e-17, 1.105261535230864e-16, 1.771979245873044e-03, -2.934473483153771e-16, 5.371662280056753e-17, 5.371662280056753e-17, 1.535078998378738e-17, -1.022688199076511e-16, -2.207502856500807e-16, -5.550631046348938e-18, -7.025123343561235e-17, 1.769075726594918e-17, -2.247242462404875e-18, 2.746150205652142e-19, -1.528356540318047e-19, 8.688765534240694e-03, 8.213110156044214e-20, 8.213110156044214e-20, 6.514671175449674e-03, 6.613700677684434e-03, 6.444175951594246e-03, 6.558274451585318e-03, 6.627664410579515e-03, 9.475590524685926e-18, 2.191470594506440e-17, -7.175033770575470e-18, -3.582676075667974e-17, 1.698084628480024e-17, 9.552886016874131e-18, 2.366813527312689e-02, 1.254199085810746e-04, 7.647370954718053e-17, 1.496594536196436e-04, 3.388427053583250e-18, 2.930897629073055e-16, 2.930897629073055e-16, 9.808571684132094e-11, -1.762421110645417e-17, -2.628043227879003e-17, 1.247254689692758e-05, 1.237039955985367e-10, 2.178460650797175e-17, 6.486551579529359e-18, -1.821907589818909e-18, 3.531776941392203e-02, -4.859393486955807e-18, -6.390043876412063e-20, -6.390043876412063e-20, 5.395616330722746e-18, -2.176048782510771e-17, 2.474547283263262e-17, 1.924872828028091e-17, -1.723690088727170e-17, 7.626564030814799e-02, -9.728765381571675e-18, 8.615445511940373e-03, -9.302325434216821e-17, 3.687864347971107e-02, -2.731319389828003e-17, -5.908217212139646e-17, 2.216396803161098e-02, -2.697756017553368e-17, -2.268627896607330e-17, 1.441015617633892e-17, 9.860608610564876e-05, -1.467292553814448e-16, 5.073202438016159e-17, 4.443273656644027e-18, -1.241457420810738e-18, -1.369472318471614e-16, -1.442119702588918e-18, 2.659259973651800e-17])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
