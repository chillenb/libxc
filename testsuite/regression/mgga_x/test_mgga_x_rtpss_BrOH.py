
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_rtpss_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.990359849706835e+01, -1.990365111873092e+01, -1.990392105795574e+01, -1.990305910288421e+01, -1.990362594815927e+01, -1.990362594815927e+01, -3.234753169556905e+00, -3.234750200437945e+00, -3.234779079348192e+00, -3.235025774122258e+00, -3.234767731618450e+00, -3.751631965412388e+00, -6.298646271428193e-01, -7.720344831754676e-01, -7.699151963162548e-01, -7.673664625622292e-01, -7.720998099279434e-01, -7.720998099279434e-01, -2.171836550513437e-01, -2.182349880627718e-01, -7.598593452615193e-01, -2.037939324288381e-01, -2.175200740952499e-01, -2.175200740952499e-01, -1.705040511768579e-02, -1.785950602918197e-02, -7.259116434695526e-02, -8.179636081577773e-03, -1.767339198969752e-02, -1.767339198969752e-02, -5.534212910601593e+00, -5.535197646628919e+00, -5.534316804242209e+00, -4.864415163469059e+00, -5.534713399555216e+00, -5.534713399555216e+00, -1.824955144252797e+00, -1.836411760261083e+00, -1.820393090883465e+00, -1.829289375008640e+00, -1.838635816007699e+00, -2.144183752958593e+00, -6.191862073629396e-01, -6.704188178865342e-01, -5.903329378035470e-01, -6.118658431797428e-01, -6.417921823333226e-01, -5.597239529443195e-01, -9.320906227515371e-02, -2.449256842584695e-01, -9.200534932435626e-02, -2.041753326240852e+00, -1.763212174720198e-01, -1.763212174720198e-01, -4.530112418476238e-03, -9.017882246212330e-03, -6.758948629840969e-03, -5.806089971776874e-02, -4.717210087205482e-03, -8.216688940537569e-03, -6.364990373692700e-01, -6.333138634184162e-01, -5.601366689453057e-01, -6.353613004455664e-01, -6.349217305040910e-01, -6.349217305040910e-01, -6.161694770723714e-01, -5.370214948414521e-01, -5.589948200319992e-01, -5.805972258761050e-01, -5.694846833610747e-01, -4.984038663814791e-01, -7.031883931758455e-01, -2.193466143497311e-01, -3.150120747235367e-01, -3.272654051606458e-01, -3.435164178776495e-01, -3.435164178776495e-01, -4.215409449640874e-01, -6.723224584249934e-02, -9.101593904276051e-02, -3.570404580451402e-01, -7.567202818733300e-02, -1.309557637768885e-01, -1.998294029699953e-02, -2.468940298752360e-03, -4.690087237165435e-03, -1.249478170467661e-01, -6.983098223408890e-03, -6.983098223408880e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_rtpss_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.680437340340339e+01, -2.680444316844200e+01, -2.680480188265138e+01, -2.680365897009271e+01, -2.680440979205120e+01, -2.680440979205120e+01, -4.242453104711292e+00, -4.242492891824467e+00, -4.243850025259040e+00, -4.243661566085859e+00, -4.242484327642606e+00, -4.429140262780589e+00, -8.192746791062413e-01, -7.028999024012109e-01, -6.539851831444234e-01, -6.721858962993507e-01, -7.041811429465326e-01, -7.041811429465326e-01, -1.831945462097166e-01, -1.882896315706318e-01, -9.967071874162506e-01, -1.786463131441957e-01, -1.846642090457683e-01, -1.846642090457683e-01, -2.273387349024772e-02, -2.381267470557596e-02, -9.678800102707273e-02, -1.090618144210370e-02, -2.356452265293002e-02, -2.356452265293002e-02, -6.727290618299786e+00, -6.726517767125982e+00, -6.727199496067119e+00, -6.540335499318442e+00, -6.726912204411242e+00, -6.726912204411242e+00, -2.374198617655198e+00, -2.392004322034237e+00, -2.367116869772940e+00, -2.380818109486449e+00, -2.395711060093104e+00, -2.448525310483308e+00, -7.641840190713943e-01, -8.261835012121195e-01, -7.155373838749078e-01, -7.583182034378136e-01, -7.957347237352790e-01, -7.516694057271437e-01, -1.240071242061173e-01, -1.736444032384556e-01, -1.223879375929626e-01, -2.531835594899445e+00, -1.648334016848255e-01, -1.648334016848255e-01, -6.040113170093470e-03, -1.202384299494977e-02, -9.011931506454626e-03, -7.735456619073043e-02, -6.289571572765647e-03, -1.095558525405009e-02, -7.441170126889455e-01, -7.511522202821991e-01, -7.496442705690799e-01, -7.468243417333782e-01, -7.478170626162555e-01, -7.478170626162555e-01, -7.242135548229809e-01, -6.604442614586924e-01, -6.931390138407643e-01, -7.123085672410322e-01, -7.039106962190163e-01, -6.711981200703906e-01, -8.707645654241200e-01, -2.870105906127554e-01, -2.956275046938875e-01, -4.260796718420650e-01, -3.656836167328805e-01, -3.656836167328804e-01, -5.544403454801321e-01, -8.964298618303722e-02, -1.213287390672968e-01, -4.238874264891194e-01, -1.007106874912776e-01, -1.624846551361240e-01, -2.664392039599937e-02, -3.291920398336480e-03, -6.253449649553913e-03, -1.551510798581635e-01, -9.310797631211854e-03, -9.310797631211841e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rtpss_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.891981201965437e-09, -6.892015862141579e-09, -6.892111837065928e-09, -6.891556034424889e-09, -6.891999836449995e-09, -6.891999836449995e-09, -4.846224406042451e-06, -4.847161624072872e-06, -4.874730969440479e-06, -4.862484695017034e-06, -4.846392341723408e-06, -5.963615766572911e-06, -1.844851845242055e-03, -4.332318243455386e-03, -4.792459150729931e-03, -4.667927367327920e-03, -4.320970161328631e-03, -4.320970161328631e-03, -7.636809732259210e-01, -7.276667838157339e-01, -6.567540714837431e-04, -9.509023627414025e-01, -7.527350197304111e-01, -7.527350197304111e-01, -1.142456053462592e-72, -3.819581599788425e-66, -7.542314597596497e-05, 0.000000000000000e+00, -5.087548180240473e-66, -5.087548180239895e-66, -6.994336820820160e-06, -7.065779117733887e-06, -7.002216231032405e-06, -2.450791141586430e-06, -7.030012624397145e-06, -7.030012624397145e-06, -4.008085658949906e-05, -4.038839702174188e-05, -3.990672749422423e-05, -4.016407861338797e-05, -4.053460773700981e-05, -5.531796336758235e-05, -1.094056665319435e-02, -1.854418174899243e-02, -1.057749296065837e-02, -1.384453958444440e-02, -1.202179055699952e-02, -8.569721566621360e-03, -1.270615408061143e+00, -6.017552730389852e-01, -1.361744589934700e+00, -1.205818194502317e-04, -1.446090767745412e+00, -1.446090767745412e+00, -1.600899493164751e+05, 0.000000000000000e+00, 0.000000000000000e+00, -6.893551441289071e+00, -1.361806189201320e+05, 0.000000000000000e+00, -2.295362654147165e-01, -1.057785720285447e-01, -2.882257039716236e-02, -1.636449425046115e-01, -1.468425881972547e-01, -1.468425881972547e-01, -1.857656483474548e-01, -1.793135675330863e-02, -2.428850398609056e-02, -4.030148766261171e-02, -3.023966576472139e-02, -1.632393937743354e-02, -1.142383961181479e-02, -1.027802460900197e-01, -1.501532740963648e-01, -3.956620161528199e-02, -8.977708195332343e-02, -8.977708195332336e-02, -1.768522308661371e-02, -3.468531324660980e-06, -4.153148877010827e-03, -7.335590084925034e-02, -2.799416619977595e+00, -7.648145943709018e-01, -9.555681041934666e-86, 0.000000000000000e+00, 0.000000000000000e+00, -9.109025673977903e-01, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rtpss_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.561005005152294e-04, 1.561037206590937e-04, 1.561174726657821e-04, 1.560651171803264e-04, 1.561021990847748e-04, 1.561021990847748e-04, -5.311355313065238e-04, -5.309263779639090e-04, -5.245217558223014e-04, -5.269813738881988e-04, -5.310749661448308e-04, 2.053735146381740e-03, -1.920477862203068e-03, 2.076016986112218e-03, 1.539596961051204e-03, 1.765679598923556e-03, 2.091713743693715e-03, 2.091713743693715e-03, 5.293085180093796e-03, 5.813501869611036e-03, -7.150868861945960e-04, 3.165230851179749e-04, 5.436186417476231e-03, 5.436186417476231e-03, 1.636761534348260e-81, 6.876387335285401e-75, 9.303634787761070e-11, 0.000000000000000e+00, 8.889105341632736e-75, 8.889105341632783e-75, 1.564911132654934e-02, 1.581778148766479e-02, 1.566766797331228e-02, 7.895688999899241e-04, 1.573339904294302e-02, 1.573339904294302e-02, -1.134415528672577e-03, -1.114651348745518e-03, -1.139716264778614e-03, -1.128369667552514e-03, -1.108382615208579e-03, 2.611610342575866e-03, 2.837478611495082e-02, 7.297135979185583e-02, 1.879044325209862e-02, 3.766143325427270e-02, 3.830935960055768e-02, 2.551612208625512e-03, -1.626919309535243e-04, 1.507880226550011e-03, -1.855079348938579e-04, 1.246209791211095e-02, 2.544792795833744e-04, 2.544792795833744e-04, -3.157137359905054e-08, 0.000000000000000e+00, 0.000000000000000e+00, -3.680373213389028e-05, -3.636202222537410e-08, 0.000000000000000e+00, 7.797560385494539e-01, 3.538422341514516e-01, 7.776144257392799e-03, 5.526408842403093e-01, 4.948369766314414e-01, 4.948369766314414e-01, 5.721971257853414e-01, 2.878121677998570e-02, 5.291228812210134e-02, 1.037083956234133e-01, 7.220496451625749e-02, 5.486266513643969e-03, 5.072569602762581e-02, -3.196995414655474e-03, 5.819695615301113e-03, -6.287428285171015e-03, 1.005673586490383e-02, 1.005673586490383e-02, -3.587544810575530e-03, 2.802151595227640e-12, 1.463415711201872e-08, 2.303865612518909e-02, -1.451741552742847e-04, 2.172241452129937e-05, 1.890687098366225e-94, 0.000000000000000e+00, 0.000000000000000e+00, 2.238860559957093e-05, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
