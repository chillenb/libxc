
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_rtpss_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.256348787459993e+01, -2.256354296396852e+01, -2.256390987082784e+01, -2.256301149043202e+01, -2.256351583495626e+01, -2.256351583495626e+01, -3.461532431901962e+00, -3.461542727682652e+00, -3.462111761917371e+00, -3.464070105890221e+00, -3.461539528669864e+00, -3.461539528669864e+00, -6.711036324525925e-01, -6.710106836746957e-01, -6.715152091807618e-01, -6.775758547665576e-01, -6.710687284759574e-01, -6.710687284759574e-01, -2.120233228883026e-01, -2.125546273331400e-01, -7.779167485459830e-01, -1.879903288992977e-01, -2.121363225454728e-01, -2.121363225454728e-01, -1.705040511768579e-02, -1.785950602918197e-02, -7.259112642457471e-02, -8.179636081577773e-03, -1.767339198969752e-02, -1.767339198969752e-02, -5.529932241300685e+00, -5.530921211849885e+00, -5.530090782320475e+00, -5.530856862920826e+00, -5.530361591944288e+00, -5.530361591944288e+00, -2.104669953136736e+00, -2.118767701073424e+00, -2.103779544895061e+00, -2.114702191166957e+00, -2.115543707624595e+00, -2.115543707624595e+00, -5.885774901977925e-01, -6.028851955130566e-01, -5.508922450884608e-01, -5.493529296926163e-01, -6.127395463023108e-01, -6.127395463023108e-01, -1.577328313960321e-01, -2.399021634429071e-01, -1.548682415485462e-01, -1.811473463563095e+00, -1.715261217102121e-01, -1.715261217102121e-01, -7.890788560303988e-03, -9.017882246212330e-03, -6.758948629840969e-03, -1.011173743025230e-01, -8.216688940537569e-03, -8.216688940537569e-03, -5.878305116417675e-01, -6.095848564604264e-01, -6.047147706499706e-01, -5.991181276971898e-01, -6.021557857134340e-01, -6.021557857134340e-01, -5.527013973547207e-01, -5.344483613856740e-01, -5.536129175162906e-01, -5.683902146090418e-01, -5.611341714747320e-01, -5.611341714747320e-01, -6.295870374282341e-01, -2.776026781581481e-01, -3.078544431440962e-01, -3.653665883515390e-01, -3.342374611527811e-01, -3.342374611527810e-01, -4.750200240773391e-01, -6.723224526743461e-02, -9.101153833411997e-02, -3.384975710034864e-01, -1.298804713363520e-01, -1.298804713363520e-01, -1.998294029699953e-02, -2.468940298752360e-03, -4.690087237165435e-03, -1.238300738939409e-01, -6.983098223408890e-03, -6.983098223408880e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_rtpss_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.763079585966555e+01, -2.763084718182435e+01, -2.763130474333148e+01, -2.763047157041594e+01, -2.763082086168295e+01, -2.763082086168295e+01, -4.172773992961750e+00, -4.172813690072871e+00, -4.174172387612727e+00, -4.174246955130186e+00, -4.172803274226101e+00, -4.172803274226101e+00, -7.691737846124216e-01, -7.675684883477077e-01, -7.211260017783476e-01, -7.310165654711069e-01, -7.685940287716635e-01, -7.685940287716635e-01, -1.863864844592930e-01, -1.921158933185163e-01, -9.610777293980149e-01, -1.349514779155935e-01, -1.880900685421262e-01, -1.880900685421262e-01, -2.273387349024772e-02, -2.381267470557596e-02, -9.678656749809571e-02, -1.090618144210370e-02, -2.356452265293002e-02, -2.356452265293002e-02, -6.719600169311167e+00, -6.718888497815575e+00, -6.719612630578045e+00, -6.719054763089035e+00, -6.719121896089820e+00, -6.719121896089820e+00, -2.400131283714383e+00, -2.433270870882962e+00, -2.387761666325761e+00, -2.414239602932636e+00, -2.437323957397961e+00, -2.437323957397961e+00, -7.099072523736918e-01, -7.796176780640824e-01, -6.651695292934136e-01, -7.048891352052898e-01, -7.408228328949619e-01, -7.408228328949619e-01, -1.709538684958481e-01, -1.703873524558844e-01, -1.633792127996342e-01, -2.374299699165626e+00, -1.456854219476727e-01, -1.456854219476727e-01, -1.052105141373865e-02, -1.202384299494977e-02, -9.011931506454626e-03, -1.334497784320970e-01, -1.095558525405009e-02, -1.095558525405009e-02, -7.426223075178525e-01, -7.364423997807693e-01, -7.363031671714914e-01, -7.375456359842478e-01, -7.367236706643799e-01, -7.367236706643799e-01, -7.255197590777596e-01, -6.543718432456069e-01, -6.791657482928263e-01, -6.891079167170976e-01, -6.844782840918419e-01, -6.844782840918419e-01, -8.170841352052979e-01, -2.264231798078438e-01, -3.010293069943276e-01, -4.240920993318694e-01, -3.680717574631148e-01, -3.680717574631147e-01, -5.639747782142719e-01, -8.964295852027569e-02, -1.212171736196800e-01, -4.020967696703800e-01, -1.525241647320064e-01, -1.525241647320063e-01, -2.664392039599937e-02, -3.291920398336480e-03, -6.253449649553913e-03, -1.448536022358679e-01, -9.310797631211854e-03, -9.310797631211841e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rtpss_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.560496599321261e-08, -1.560537278599198e-08, -1.560635043621351e-08, -1.559971325155511e-08, -1.560518743887477e-08, -1.560518743887477e-08, -1.340874840826219e-05, -1.341108350166506e-05, -1.347905705091818e-05, -1.343977759077159e-05, -1.340919220968214e-05, -1.340919220968214e-05, -5.923502356701593e-03, -5.944073888089317e-03, -6.460740325520461e-03, -6.351914773976296e-03, -5.931283965978955e-03, -5.931283965978955e-03, -8.174943793701799e-01, -7.859831006817631e-01, -1.732606382330720e-03, -1.767110122791734e+00, -8.084973189413340e-01, -8.084973189413340e-01, -4.034599761585691e-71, -2.338408438695710e-64, -6.380285207922815e-04, 0.000000000000000e+00, -1.798914510136006e-64, -1.798914510136006e-64, -7.031929525928946e-06, -7.103169202093529e-06, -7.039310756717789e-06, -7.094684237112158e-06, -7.068146389853229e-06, -7.068146389853229e-06, -6.659834277962475e-05, -6.413741789695384e-05, -6.588310886926455e-05, -6.387021942387380e-05, -6.607276276643331e-05, -6.607276276643331e-05, -2.291950336752474e-02, -2.368927606908632e-02, -2.460761696365024e-02, -2.462536636946701e-02, -2.284618655627501e-02, -2.284618655627501e-02, -1.261526808620209e+00, -6.486948084962655e-01, -1.557685314276464e+00, -1.624730200550390e-04, -2.018452315606569e+00, -2.018452315606569e+00, 0.000000000000000e+00, -7.927702538134838e-308, 0.000000000000000e+00, -2.132626030452810e-01, -7.169318582911432e-305, -7.169318582907104e-305, -1.775063823091419e-01, -1.080522695515494e-01, -1.297476493733508e-01, -1.502885335143612e-01, -1.396136939571273e-01, -1.396136939571272e-01, -9.852956898176343e-02, -2.013816425993754e-02, -2.906894350356884e-02, -4.933569320135478e-02, -3.722248590780635e-02, -3.722248590780635e-02, -1.589639525681177e-02, -3.014250935744015e-01, -1.636116949773990e-01, -9.136468298017153e-02, -1.108915316714208e-01, -1.108915316714209e-01, -3.383440644216643e-02, -1.599149690406967e-05, -2.519058844892090e-02, -1.503751897886601e-01, -1.553581950934932e+00, -1.553581950934938e+00, -3.393003704997943e-59, 0.000000000000000e+00, 0.000000000000000e+00, -1.948511516138019e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rtpss_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rtpss_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.174744364030001e-03, 2.174824185821959e-03, 2.175179898700348e-03, 2.173882572953622e-03, 2.174786339035864e-03, 2.174786339035864e-03, 2.975200364452920e-03, 2.976197194190349e-03, 3.007400824447766e-03, 3.012175276125611e-03, 2.975352101826464e-03, 2.975352101826464e-03, 4.536119863712908e-03, 4.543941973909958e-03, 4.494906011801247e-03, 5.011187164639519e-03, 4.539904081315533e-03, 4.539904081315533e-03, 9.182693050932243e-03, 1.046880713016872e-02, 5.895051748877224e-04, 1.095315684985125e-03, 9.586648238235566e-03, 9.586648238235566e-03, 2.323167854625989e-82, 1.613498871259891e-75, 9.556189074679147e-11, 0.000000000000000e+00, 1.349944220457831e-75, 1.349944220457806e-75, 1.559023023377477e-02, 1.575777530855314e-02, 1.560940721940209e-02, 1.573955130206751e-02, 1.567294110522898e-02, 1.567294110522898e-02, 3.275873782581879e-03, 3.362189706987377e-03, 3.098108843582852e-03, 3.158396144868672e-03, 3.578716415452817e-03, 3.578716415452817e-03, 3.478993719908813e-02, 2.557520022463507e-02, 2.534672555661300e-02, 1.818097009342114e-02, 4.206018604352889e-02, 4.206018604352889e-02, 5.890206886664092e-05, 2.522616746143317e-03, 7.852018972215445e-05, 3.440153177832272e-03, 3.898783054245830e-04, 3.898783054245830e-04, 0.000000000000000e+00, 1.264313987707750e-320, 0.000000000000000e+00, 5.738429478947218e-07, 9.871802153142487e-318, 9.871802153142487e-318, 2.873367209772628e-01, 2.588448363840880e-01, 2.891168770162952e-01, 3.060448534046993e-01, 2.989172556357725e-01, 2.989172556357726e-01, 7.622413724656930e-02, 3.071572022753153e-02, 5.480342412893389e-02, 9.748920814485361e-02, 7.227212212662421e-02, 7.227212212662419e-02, 1.775359307158018e-02, 4.505244292322515e-03, 9.943865036037627e-03, 2.653988889877135e-02, 1.797711323633412e-02, 1.797711323633411e-02, 2.678540717715459e-02, 9.129183581753772e-13, 1.898434550960315e-08, 3.798401399082809e-02, 2.507235983513262e-05, 2.507235983513275e-05, 1.573363893552584e-69, 0.000000000000000e+00, 0.000000000000000e+00, 2.822877619825830e-05, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
