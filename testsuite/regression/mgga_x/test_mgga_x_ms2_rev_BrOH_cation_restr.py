
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ms2_rev_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2_rev", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.064178970741036e+01, -2.064191208728521e+01, -2.064244785049377e+01, -2.064063160728342e+01, -2.064158437438524e+01, -2.064158437438524e+01, -3.215081139789744e+00, -3.215106291784425e+00, -3.215822615707602e+00, -3.215825188005339e+00, -3.215490824814045e+00, -3.771510807503059e+00, -6.099575865036290e-01, -7.556480144369440e-01, -7.426258517192855e-01, -7.454524814659433e-01, -7.449010669114654e-01, -7.449010669114654e-01, -2.012159975376630e-01, -2.034842807724355e-01, -7.074055335935140e-01, -1.636698586355255e-01, -1.783537585650819e-01, -1.783537585650819e-01, -8.410811890287615e-03, -8.852137824704268e-03, -4.829119825572861e-02, -4.859275469505490e-03, -6.105283953763883e-03, -6.105283953763883e-03, -5.449261120304977e+00, -5.449718094530279e+00, -5.449279636751059e+00, -5.198400348763457e+00, -5.449493812452945e+00, -5.449493812452945e+00, -1.800192791733496e+00, -1.815170444402907e+00, -1.789169523411391e+00, -1.802419110752144e+00, -1.813829382356401e+00, -2.152483552082611e+00, -6.257142043943013e-01, -6.701349009862947e-01, -5.857364827145367e-01, -6.015972586149457e-01, -6.339782980736960e-01, -5.544351571636070e-01, -8.232811842249729e-02, -2.089776483464807e-01, -7.616194354600968e-02, -2.037941544415219e+00, -1.358366368559680e-01, -1.358366368559680e-01, -2.422630549539762e-03, -4.750441914337000e-03, -3.632101151901014e-03, -5.122216294382227e-02, -2.827526967745203e-03, -4.375651919354964e-03, -6.112810374798602e-01, -6.098903315272088e-01, -6.026582725342975e-01, -6.107838428160834e-01, -6.105837698084001e-01, -6.105837698084001e-01, -5.949973055673118e-01, -5.285955692515132e-01, -5.473623444248764e-01, -5.660149469580590e-01, -5.564781391898906e-01, -4.996461879451846e-01, -7.050549273507490e-01, -1.982573249642739e-01, -2.993122534830236e-01, -3.196064263000342e-01, -3.361794760646273e-01, -3.361794760646273e-01, -4.195007390137448e-01, -4.626171034750069e-02, -6.258439854512798e-02, -3.624511836554415e-01, -6.522549602965676e-02, -9.566978024682596e-02, -1.186796127283032e-02, -1.269976726513856e-03, -2.665558986412307e-03, -9.016991515392062e-02, -4.048829184847775e-03, -4.048829184847771e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ms2_rev_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2_rev", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.100716802059650e+01, -3.100729905778587e+01, -3.100789017562828e+01, -3.100594257294465e+01, -3.100696231721619e+01, -3.100696231721619e+01, -4.402701711227827e+00, -4.402676723519170e+00, -4.402056514747262e+00, -4.402715030654151e+00, -4.402187548319526e+00, -4.619670156597540e+00, -8.285630583725279e-01, -8.825203607302522e-01, -8.600596979775114e-01, -8.665945213873175e-01, -8.651920450633964e-01, -8.651920450633964e-01, -2.299476907431477e-01, -2.330200443122838e-01, -9.500769036235719e-01, -1.873292937818086e-01, -2.021562953256732e-01, -2.021562953256734e-01, -1.120300098140015e-02, -1.178926898617383e-02, -6.292407734137367e-02, -6.477146129569790e-03, -8.135962735521069e-03, -8.135962735521069e-03, -7.085429378456499e+00, -7.087347402988300e+00, -7.085529703173135e+00, -7.484730280395664e+00, -7.086395373795599e+00, -7.086395373795599e+00, -2.476944306878324e+00, -2.497277737147495e+00, -2.461440182608728e+00, -2.480018235152194e+00, -2.495471639553498e+00, -2.608507415987095e+00, -7.869372334594126e-01, -8.640609111474988e-01, -7.230723917051782e-01, -7.571390806194809e-01, -8.012033040293481e-01, -7.656062412494181e-01, -1.097992195774822e-01, -2.368222257921337e-01, -1.015691291733151e-01, -2.582797564941127e+00, -1.574733237739548e-01, -1.574733237739549e-01, -3.230174066761180e-03, -6.332264131866368e-03, -4.840694348139044e-03, -6.829965589822751e-02, -3.770035963073847e-03, -5.831920003743257e-03, -8.092975370448311e-01, -8.020052133705365e-01, -8.174736144756425e-01, -8.066705569184347e-01, -8.056093789744886e-01, -8.056093789744886e-01, -7.869954638893079e-01, -6.576497327316907e-01, -6.937595557599253e-01, -7.305112605235036e-01, -7.116395471807379e-01, -7.468952116909667e-01, -9.032539372425057e-01, -2.663957388714032e-01, -3.469890875890423e-01, -4.397282915162762e-01, -3.984831376150077e-01, -3.984831376150076e-01, -5.729132653333889e-01, -6.038042670421836e-02, -8.052170548689465e-02, -4.457846451515704e-01, -8.698303722842939e-02, -1.163135895539741e-01, -1.580179480456183e-02, -1.693267224892244e-03, -3.553529576310493e-03, -1.102065848400062e-01, -5.396280099172428e-03, -5.396280099172404e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms2_rev_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2_rev", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.713229493084033e-08, -1.713230178345298e-08, -1.713219289583639e-08, -1.713210413021829e-08, -1.713217201725583e-08, -1.713217201725583e-08, -7.925424646938435e-06, -7.924906203085320e-06, -7.910233596529343e-06, -7.913399861353342e-06, -7.916356982217111e-06, -2.892531547210992e-06, -5.359013542802136e-03, -1.555743168987633e-03, -1.595674701409299e-03, -1.605320522013441e-03, -1.602486316111590e-03, -1.602486316111590e-03, -2.656761278455966e-01, -2.597397961853932e-01, -2.818241087310783e-03, -3.330648928141361e-01, -3.240591235142309e-01, -3.240591235142243e-01, -1.672681306134049e+00, -1.742413275906582e+00, -7.843732582746540e-01, -1.229491565929388e+00, -1.710484822497238e+00, -1.710484822497238e+00, -7.244432277601187e-07, -7.243442844061840e-07, -7.244416860017748e-07, -4.536375197573498e-06, -7.243917185344567e-07, -7.243917185344567e-07, -7.957323506797171e-05, -7.755101666658734e-05, -8.100272106073911e-05, -7.925412781100986e-05, -7.775120820867047e-05, -2.663877393533237e-05, -3.996293876404280e-03, -3.138078090981398e-03, -5.047006808922741e-03, -4.681550671792478e-03, -3.818609946040511e-03, -1.115852241540460e-02, -1.512547623787828e+01, -1.759480484799834e-01, -2.065035056801008e+01, -3.590409716672204e-05, -5.414682088645236e-01, -5.414682088645156e-01, -2.016862741296168e+07, -1.086934499408773e+00, -8.784985467049914e+00, -1.009263047347268e+02, -1.086921245991998e+07, -3.371723916544925e+00, -4.656796378296010e-03, -4.669845173288570e-03, -1.623263808286158e-02, -4.661582796798073e-03, -4.663415214956686e-03, -4.663415214956686e-03, -5.183447769622291e-03, -7.714023944470471e-03, -6.900167991399208e-03, -6.172764151587029e-03, -6.534835905024497e-03, -3.926208025642076e-02, -2.541528423015715e-03, -4.575114117376725e-01, -6.082378947112414e-02, -7.975605784103092e-02, -4.209457239461196e-02, -4.209457239461209e-02, -2.710549779292110e-02, -8.009026824636530e-01, -6.696469831330532e-01, -3.418541151268085e-02, -3.838883019784211e+01, -8.506446966138977e-01, -7.984936798283179e-01, -1.331688043292906e+00, -3.816872188224097e+00, -9.524232348438523e-01, -4.805326103140351e+00, -4.805326103252168e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms2_rev_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2_rev", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.043237562898273e-03, 2.043270660419995e-03, 2.043400325513485e-03, 2.042910408192726e-03, 2.043169829382649e-03, 2.043169829382649e-03, 8.715656503230571e-04, 8.713500763644478e-04, 8.653342442329370e-04, 8.677609290111550e-04, 8.675957170228587e-04, -1.182700514584397e-17, 1.458969606131311e-03, -5.124050005068812e-17, -2.235903737883478e-17, 1.179134789715112e-18, -2.780595303000674e-17, -2.780595303000674e-17, 1.061303692526993e-16, -9.871212587208088e-17, 2.787160379411854e-04, 4.609283173892702e-16, 3.493159271668578e-16, 2.025292275383020e-17, 2.816580845284842e-17, -4.788171993659832e-18, 1.059179733419763e-16, 1.572528367852827e-17, -9.579448130812725e-18, -9.579448130812725e-18, -1.484193794189047e-18, 1.700884361817906e-19, -8.518293792823628e-20, 8.031664756583509e-03, -1.357494656250782e-18, -1.357494656250782e-18, 1.477768307622348e-03, 1.525380729543914e-03, 1.430382981741712e-03, 1.483559694827814e-03, 1.523499397330025e-03, 6.096213043194289e-19, 1.978851039997530e-17, 1.702261545392220e-17, -3.929879641259363e-17, 3.186343399258483e-17, 2.285911047856622e-17, 1.228211207537737e-02, 1.550153578733169e-05, 1.901993275293198e-16, 1.102396317651158e-05, -2.029879334859529e-18, 2.813641325315643e-16, 1.201460431432396e-16, 4.113072417157300e-13, -6.648018258664625e-18, 1.641999551817196e-17, 2.139587602156367e-06, 7.031470915827237e-12, 5.282099158143340e-17, -1.477414886373421e-18, 6.682224455072830e-18, 3.599681420843535e-02, -1.387564258735605e-20, 1.538264369143824e-18, 1.538264369143824e-18, -3.392669275973397e-18, -4.381243314298583e-18, 8.440578680199548e-18, -1.202033565729479e-17, 1.111941469040833e-17, 6.457856078657823e-02, 1.169645203932613e-19, 1.097920039447078e-03, 1.233742810056666e-16, 8.128317146693903e-03, -1.627212179568764e-17, 2.963719317193228e-17, 6.291425301555200e-03, 2.372913665390165e-16, -3.287293077461114e-16, 2.851383583839864e-17, 1.141646813038876e-05, 3.564300336990606e-16, -6.009003668769769e-17, 4.428466894508147e-19, -6.235284740084678e-19, 1.876420451372576e-16, -1.094438150808384e-17, 3.239819885066466e-17]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
