
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ms2_rev_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2_rev", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.244916767479749e+01, -2.244921993260731e+01, -2.244949528859298e+01, -2.244871730837237e+01, -2.244911882883472e+01, -2.244911882883472e+01, -3.371458039923259e+00, -3.371459379361029e+00, -3.371698109340111e+00, -3.373052519252923e+00, -3.372070871784724e+00, -3.372070871784724e+00, -6.597603907044431e-01, -6.594713659853979e-01, -6.539877671300697e-01, -6.599123250558609e-01, -6.580246833896589e-01, -6.580246833896589e-01, -1.981056421012996e-01, -1.993560066256028e-01, -7.572501765788791e-01, -1.578866677870202e-01, -1.715625121176863e-01, -1.715625121176863e-01, -8.410773523613262e-03, -8.852055801017927e-03, -4.821688605899768e-02, -4.859189130872258e-03, -6.105164463802512e-03, -6.105164463802512e-03, -5.448818374886214e+00, -5.449280670941012e+00, -5.448846255550843e+00, -5.449254265625429e+00, -5.449049084625156e+00, -5.449049084625156e+00, -2.107211348584633e+00, -2.126823184274231e+00, -2.105783752202902e+00, -2.122755091238066e+00, -2.118992202693593e+00, -2.118992202693593e+00, -6.008441391867633e-01, -6.432559463003746e-01, -5.318906613533296e-01, -5.370069000815253e-01, -6.119311158280392e-01, -6.119311158280392e-01, -1.179868382679037e-01, -2.040635652859187e-01, -1.100197398243649e-01, -1.833574038104803e+00, -1.331938412227059e-01, -1.331938412227059e-01, -3.749381935820790e-03, -4.750258702535344e-03, -3.631989622460358e-03, -7.635473797264117e-02, -4.375432274598170e-03, -4.375432274598170e-03, -6.100413713574200e-01, -6.087112448974190e-01, -6.091829260276661e-01, -6.095655291176550e-01, -6.093736442404470e-01, -6.093736442404470e-01, -5.920276427882672e-01, -5.273010720422711e-01, -5.455320365132689e-01, -5.636558935523487e-01, -5.542197703665338e-01, -5.542197703665338e-01, -6.639267120189309e-01, -2.530513933393124e-01, -2.906459128531559e-01, -3.521625663470795e-01, -3.216991810886442e-01, -3.216991810886441e-01, -4.753214941678487e-01, -4.622724293351088e-02, -6.239223464007724e-02, -3.398665754478858e-01, -9.464838209668591e-02, -9.464838209668591e-02, -1.186537186854275e-02, -1.269955801394331e-03, -2.665545687355093e-03, -8.954484861470173e-02, -4.048681076089473e-03, -4.048681076089470e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ms2_rev_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2_rev", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.878897820307748e+01, -2.878908295225847e+01, -2.878962680116846e+01, -2.878807188670056e+01, -2.878887544283066e+01, -2.878887544283066e+01, -4.213437032993939e+00, -4.213675263591277e+00, -4.220364952858092e+00, -4.220142397930430e+00, -4.218829878276880e+00, -4.218829878276880e+00, -7.905484417691379e-01, -7.892032093295475e-01, -7.579429141574925e-01, -7.669436931585711e-01, -7.651659366385434e-01, -7.651659366385434e-01, -1.722446824282823e-01, -1.708569631066443e-01, -9.026559933033135e-01, -1.686386378972214e-01, -1.802681941396605e-01, -1.802681941396605e-01, -1.120284126174877e-02, -1.178893304943796e-02, -6.262104372074945e-02, -6.476800674523688e-03, -8.135483974706700e-03, -8.135483974706700e-03, -7.083719268656692e+00, -7.085675419132510e+00, -7.083855737690795e+00, -7.085580348123141e+00, -7.084687101552125e+00, -7.084687101552125e+00, -2.318821440449556e+00, -2.379310729111141e+00, -2.319021047751595e+00, -2.378312368576451e+00, -2.353311462207452e+00, -2.353311462207452e+00, -7.642683478238811e-01, -8.881076759891899e-01, -6.850850058595487e-01, -7.486351896755229e-01, -7.837361161450229e-01, -7.837361161450229e-01, -1.372933828897632e-01, -1.729822440296112e-01, -1.296051037373292e-01, -2.637777226582587e+00, -1.461260275196240e-01, -1.461260275196240e-01, -4.998058941537395e-03, -6.331531456121467e-03, -4.840248117802025e-03, -9.480135567110014e-02, -5.831041657449805e-03, -5.831041657449805e-03, -8.103506227107301e-01, -8.016596891001831e-01, -8.046879021375024e-01, -8.072118865447940e-01, -8.059463455670852e-01, -8.059463455670852e-01, -7.909502668260712e-01, -6.444400641128178e-01, -6.831486797573626e-01, -7.248747181078914e-01, -7.028782089008095e-01, -7.028782089008095e-01, -9.367462512818222e-01, -2.265958486067230e-01, -2.617632545276768e-01, -4.090941310997958e-01, -3.242524839507304e-01, -3.242524839507303e-01, -5.492856692463951e-01, -6.023137067130940e-02, -7.974692130737310e-02, -4.134751339635117e-01, -1.122524666107715e-01, -1.122524666107714e-01, -1.579145133345885e-02, -1.693183529765757e-03, -3.553476349865616e-03, -1.073362523208071e-01, -5.395687674330889e-03, -5.395687674330885e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms2_rev_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2_rev", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.699605448472627e-09, -3.699514006128554e-09, -3.698462138678518e-09, -3.699796221254542e-09, -3.699189552564541e-09, -3.699189552564541e-09, -7.611544072282516e-06, -7.618930995085440e-06, -7.829618614388863e-06, -7.853903320543821e-06, -7.806465318963050e-06, -7.806465318963050e-06, -4.243470790137828e-03, -4.245792453050477e-03, -4.261172183490168e-03, -4.217680407539890e-03, -4.237366814939259e-03, -4.237366814939259e-03, -1.432278255379874e+00, -1.512767998045428e+00, -2.163683770714734e-03, -6.189096838144101e-01, -5.984298151500805e-01, -5.984298151500805e-01, -1.702838569669290e+00, -1.798886387671550e+00, -1.000508443406759e+00, -1.547483232057635e+00, -1.965964409021715e+00, -1.965964409021721e+00, -7.487172228114049e-07, -7.483109379193220e-07, -7.482085543752487e-07, -7.478718825238806e-07, -7.487627055350352e-07, -7.487627055350352e-07, -1.231087230750327e-04, -1.065750982979583e-04, -1.138546565202933e-04, -9.794475559362414e-05, -1.180856464671312e-04, -1.180856464671312e-04, -2.454120256322726e-02, -1.882739139239854e-02, -2.610104325270712e-02, -2.226097471950305e-02, -2.219379702721017e-02, -2.219379702721017e-02, -6.867674311653958e-01, -8.995396645857736e-01, -7.532264469905988e-01, -2.075146979388161e-04, -9.295965652139443e-01, -9.295965652139445e-01, -2.039041648797655e+00, -1.821262516592093e+00, -1.143747331474433e+01, -1.115968397177843e+00, -5.322518907279058e+00, -5.322518907279045e+00, -7.593510270198684e-03, -7.549150677120470e-03, -7.565287037501670e-03, -7.578980829046668e-03, -7.573721485128689e-03, -7.573721485128689e-03, -1.183218964952958e-02, -1.447886876511727e-02, -1.418026359214953e-02, -1.350564067979538e-02, -1.432745939707262e-02, -1.432745939707263e-02, -1.722233372504069e-02, -4.711962925711097e-01, -3.757558380461600e-01, -1.481200850217382e-01, -2.730606219668697e-01, -2.730606219668696e-01, -5.900651613615618e-02, -9.149798935711404e-01, -9.060727131018633e-01, -2.294114274336352e-01, -1.240809238694068e+00, -1.240809238694069e+00, -1.372073811118026e+00, -8.938104806986811e+00, -4.325696858364871e+00, -1.310667542420011e+00, -6.722839756193395e+00, -6.722839756193409e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms2_rev_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2_rev", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.864451205628198e-04, 1.864357645931461e-04, 1.862987315039200e-04, 1.864338097627829e-04, 1.863766987348947e-04, 1.863766987348947e-04, 1.456728102423842e-03, 1.461660193284091e-03, 1.603367699816344e-03, 1.626322443050678e-03, 1.589622652739284e-03, 1.589622652739284e-03, 2.848041850230737e-03, 2.828503697763796e-03, 2.421291603291689e-03, 2.877381949466280e-03, 2.750505169503899e-03, 2.750505169503899e-03, 9.255440877738531e-02, 1.032738150370956e-01, 3.864246287290198e-04, 2.328912639201819e-03, 4.920791320168656e-03, 4.920791320168657e-03, 3.407545978511984e-10, 9.945257381840973e-11, 2.588753009391740e-07, 6.272700780269152e-16, 4.347500193320006e-14, 4.347500193988534e-14, 5.358499834966605e-05, 5.293568255767664e-05, 5.246721677660234e-05, 5.194260400553322e-05, 5.381392942063072e-05, 5.381392942063072e-05, 1.101653983615519e-02, 9.408654546569700e-03, 9.799998820713068e-03, 8.226664407764150e-03, 1.069876295096431e-02, 1.069876295096431e-02, 6.213105923919474e-02, 6.089834364928343e-02, 4.406939091114195e-02, 3.916052166434688e-02, 5.858200557712274e-02, 5.858200557712274e-02, 1.987606302665062e-04, 5.523843083626913e-02, 1.043198423958504e-04, 1.623544587607070e-02, 3.111522832215136e-03, 3.111522832215146e-03, 1.330764337548365e-18, 5.438776294641471e-17, 4.388917823291442e-15, 7.850562653430680e-06, 5.749153354414398e-16, 5.749153338015540e-16, 9.368090683894154e-03, 9.030049948347297e-03, 9.149765874083305e-03, 9.250019709181425e-03, 9.204784026270866e-03, 9.204784026270866e-03, 1.943834832937522e-02, 1.256903553710749e-02, 1.550393855621778e-02, 1.777774177999967e-02, 1.768575617006361e-02, 1.768575617006362e-02, 6.451903357385541e-02, 6.025359486710900e-02, 8.617370881315622e-02, 6.938285885422471e-02, 9.428224568919601e-02, 9.428224568919596e-02, 6.859730120983715e-02, 1.249435870439354e-06, 1.218243284254362e-06, 1.065716942988254e-01, 1.804880184058033e-04, 1.804880184058037e-04, 8.737554849781396e-14, 1.280226024180302e-22, 2.477258289028705e-16, 4.179389813595013e-04, 1.416118723915037e-15, 1.416118721597465e-15])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
