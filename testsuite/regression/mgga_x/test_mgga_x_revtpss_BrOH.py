
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_revtpss_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.990338901221755e+01, -1.990344161135224e+01, -1.990371145172059e+01, -1.990284986317251e+01, -1.990341645144343e+01, -1.990341645144343e+01, -3.234741860871859e+00, -3.234738920464273e+00, -3.234768638086799e+00, -3.235015012814634e+00, -3.234756430855024e+00, -3.706498309164480e+00, -6.297387846829025e-01, -7.331842714493457e-01, -7.229677091536357e-01, -7.242759084760952e-01, -7.334453271217783e-01, -7.334453271217783e-01, -2.036958541719114e-01, -2.054666125715832e-01, -7.595787439483167e-01, -1.754455404655079e-01, -2.042368762969290e-01, -2.042368762969290e-01, -1.698393847384648e-02, -1.778343124747381e-02, -6.965952202450312e-02, -8.175258596681860e-03, -1.759799749962212e-02, -1.759799749962212e-02, -5.554299626909557e+00, -5.555347170810707e+00, -5.554410518936323e+00, -4.864268007904076e+00, -5.554831817901666e+00, -5.554831817901666e+00, -1.824915457841453e+00, -1.836381423473254e+00, -1.820348712960410e+00, -1.829253192508462e+00, -1.838607631551097e+00, -2.106882343164301e+00, -6.175265484386110e-01, -6.721564269661622e-01, -5.860965086772837e-01, -6.114173237967143e-01, -6.415775801972168e-01, -5.597237005376324e-01, -9.314592199875676e-02, -2.193113082052403e-01, -9.194338434813180e-02, -2.041481576908750e+00, -1.516383318104770e-01, -1.516383318104770e-01, -4.526749921166493e-03, -9.011293134334675e-03, -6.753448829455155e-03, -5.801922208956858e-02, -4.713708806792633e-03, -8.211156120820910e-03, -6.385748827751180e-01, -6.356879420252867e-01, -5.600922525115027e-01, -6.375783626699975e-01, -6.371823117600062e-01, -6.371823117600062e-01, -6.183179285680014e-01, -5.349962787627172e-01, -5.593719672669063e-01, -5.823900257076264e-01, -5.706541679197903e-01, -4.984008617177044e-01, -7.042570754218570e-01, -2.192761172270668e-01, -3.005635148100505e-01, -3.272594092610478e-01, -3.339713295551905e-01, -3.339713295551904e-01, -4.215402528328613e-01, -6.496141586113890e-02, -8.588326465344728e-02, -3.530900277889984e-01, -7.562004254826979e-02, -1.157545736962258e-01, -1.991604268162350e-02, -2.468798033214433e-03, -4.688720145225114e-03, -1.104690876756659e-01, -6.979071240207631e-03, -6.979071240207620e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_revtpss_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.680273363826896e+01, -2.680280330404684e+01, -2.680316158131530e+01, -2.680202028425340e+01, -2.680276997464684e+01, -2.680276997464684e+01, -4.242645917843479e+00, -4.242685350725913e+00, -4.244032010619688e+00, -4.243847581855046e+00, -4.242677043322308e+00, -4.485811094591841e+00, -8.195621520961215e-01, -7.841849769601914e-01, -7.465058655707981e-01, -7.597157628979734e-01, -7.851471108107921e-01, -7.851471108107921e-01, -2.095690234951609e-01, -2.138619550527210e-01, -9.968271858569109e-01, -1.611832309411837e-01, -2.108258954185769e-01, -2.108258954185769e-01, -2.246915697579166e-02, -2.350981425546016e-02, -8.560025584319310e-02, -1.088868187793699e-02, -2.326437264049642e-02, -2.326437264049642e-02, -6.632593644626787e+00, -6.632278964588345e+00, -6.632552937433157e+00, -6.539668052473914e+00, -6.632444028803445e+00, -6.632444028803445e+00, -2.374579346718907e+00, -2.392325730276114e+00, -2.367524543661647e+00, -2.381177587107881e+00, -2.396017506153175e+00, -2.513851281880931e+00, -7.573129180577471e-01, -8.128720105279827e-01, -7.161905140859610e-01, -7.487465306007135e-01, -7.851677858494012e-01, -7.516633823879463e-01, -1.239339620259787e-01, -2.019755780233966e-01, -1.223168871421789e-01, -2.497411168904678e+00, -1.413800539287336e-01, -1.413800539287336e-01, -6.035631399655858e-03, -1.199750787273127e-02, -8.989952128583036e-03, -7.730150067512800e-02, -6.284904977093653e-03, -1.093347047676959e-02, -7.446149214547113e-01, -7.464780158504375e-01, -7.495459360562514e-01, -7.452141085241415e-01, -7.454745140885438e-01, -7.454745140885438e-01, -7.226777765668974e-01, -6.559936271942933e-01, -6.829159654199707e-01, -7.010973190281475e-01, -6.926239111083656e-01, -6.711683507775006e-01, -8.571158037265713e-01, -2.870695585338809e-01, -3.263704513812382e-01, -4.261409132050040e-01, -3.856911730681901e-01, -3.856911730681899e-01, -5.544548026119507e-01, -8.090701310905116e-02, -1.021536865272000e-01, -4.282816995273152e-01, -1.006489487652081e-01, -1.207105084583953e-01, -2.637732362887565e-02, -3.291351372479487e-03, -6.247983046348943e-03, -1.152615857655071e-01, -9.294699983624945e-03, -9.294699983624933e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revtpss_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.785896470374903e-09, -6.785926094966038e-09, -6.786000924863807e-09, -6.785526929017132e-09, -6.785912446251900e-09, -6.785912446251900e-09, -4.773710427737326e-06, -4.774737271691605e-06, -4.804990308287521e-06, -4.791732644084089e-06, -4.773904626826722e-06, -7.223785267382232e-06, -1.482785385868127e-03, -3.189679494514463e-03, -3.323674058213246e-03, -3.317781250845248e-03, -3.186784795445422e-03, -3.186784795445422e-03, -5.268818258075005e-01, -5.107946691249933e-01, -4.267188905552509e-04, -7.573535674150736e-01, -5.218196298127017e-01, -5.218196298127017e-01, -7.705337038435479e+00, -7.642942484400648e+00, -2.518258941404478e+00, -2.741600127990040e+00, -7.993843373580315e+00, -7.993843373580308e+00, -8.435532414052063e-06, -8.509010209755639e-06, -8.443644560064411e-06, -2.395608671901565e-06, -8.472228253787918e-06, -8.472228253787918e-06, -3.833740006300354e-05, -3.890089396063523e-05, -3.804509041140225e-05, -3.851492850493130e-05, -3.910719253071852e-05, -6.030096030928166e-05, -1.535441107044172e-02, -2.421438194459943e-02, -1.405204336699406e-02, -1.944490795297492e-02, -1.683985444647434e-02, -8.537425193007367e-03, 7.300052099446017e-02, -3.802636260353524e-01, 5.002953424656097e-02, -1.686054305821953e-04, -1.270723478084909e+00, -1.270723478084909e+00, 9.026804588069374e+04, -3.459291187611456e+00, -1.359504208088853e+01, 2.255062045127595e+00, 7.675671039610234e+04, -4.262575515472022e+00, -2.328415140052923e-01, -1.140311423676104e-01, -2.810229072889652e-02, -1.698374669744014e-01, -1.536989697376507e-01, -1.536989697376507e-01, -1.927369663549747e-01, -2.496291488520285e-02, -3.360163629896363e-02, -5.113642232714162e-02, -4.038839061287006e-02, -1.612479547859590e-02, -1.551565541575895e-02, -7.178471736409110e-02, -1.141170130220704e-01, -3.801521485298143e-02, -8.248055851305973e-02, -8.248055851305980e-02, -1.751143696824225e-02, -2.393730113449661e+00, -1.987242400988639e+00, -9.058571294089604e-02, 3.123063732394417e-01, -2.131182239496107e+00, -3.011979058899641e+00, -3.829037282195048e+00, -7.524299500580303e+00, -2.560549954885154e+00, -5.992800952791366e+00, -5.992800952791359e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revtpss_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.553028533403804e-04, 1.553060152525317e-04, 1.553195144523438e-04, 1.552681061196581e-04, 1.553045212217794e-04, 1.553045212217794e-04, -5.295704463602061e-04, -5.293638943106338e-04, -5.230365792572778e-04, -5.254666120393311e-04, -5.295106109493756e-04, 4.279084503073727e-03, -1.877921041005190e-03, 5.903670531897774e-03, 4.539324803216047e-03, 5.129102260066010e-03, 5.942170441041598e-03, 5.942170441041598e-03, 1.565526527718837e-02, 1.701536529050418e-02, -6.935918520053238e-04, 1.080194867021929e-03, 1.603203178912889e-02, 1.603203178912889e-02, 1.286437345603454e-08, 1.610318029015946e-08, 5.237610748504437e-06, 6.621112092987373e-11, 1.634723460791890e-08, 1.634723460792073e-08, 1.905797749191077e-02, 1.922902253074654e-02, 1.907680562761701e-02, 7.827353745426298e-04, 1.914346682063933e-02, 1.914346682063933e-02, -1.126088257071842e-03, -1.107518146544142e-03, -1.130859339293568e-03, -1.120469525483508e-03, -1.101549483788544e-03, 5.866495473106898e-03, 4.831393371412092e-02, 9.865558876189222e-02, 3.581859917003231e-02, 6.009004956977189e-02, 6.020065524631334e-02, 2.548910470401492e-03, -1.560885192826283e-04, 4.727492371556382e-03, -1.779999729764478e-04, 1.942742379939603e-02, 9.137961514315225e-04, 9.137961514315225e-04, -3.023074456143677e-08, 1.532682640060441e-10, 2.827624954618842e-10, -3.526653629042714e-05, -3.481798560312385e-08, 1.315501510624157e-10, 7.875340849602370e-01, 3.801571230185117e-01, 7.667341384037245e-03, 5.709864817408281e-01, 5.156796164225327e-01, 5.156796164225327e-01, 5.910118005318855e-01, 5.056235876581297e-02, 7.968405578213289e-02, 1.346590202312255e-01, 1.011724303000534e-01, 5.465042652873639e-03, 7.327529742160263e-02, -3.107291676449878e-03, 1.623731738944239e-02, -6.245058499013256e-03, 2.508652586646522e-02, 2.508652586646521e-02, -3.580298350339336e-03, 3.073404258046365e-06, 1.347986847687035e-05, 4.725005725004590e-02, -1.392407300421027e-04, 1.798320273793095e-04, 6.899565510186475e-09, 2.719679263046509e-13, 1.859378139878053e-11, 1.866785654342842e-04, 9.709436687718417e-11, 9.709436687726236e-11]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
