
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_revtpss_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.257876052331223e+01, -2.257881942239979e+01, -2.257922611276523e+01, -2.257826702988058e+01, -2.257879027475488e+01, -2.257879027475488e+01, -3.398049906025144e+00, -3.398066692034360e+00, -3.398807077469184e+00, -3.400383545632768e+00, -3.398060530140685e+00, -3.398060530140685e+00, -6.535970704892241e-01, -6.533247838952631e-01, -6.484618959990804e-01, -6.545054414493769e-01, -6.534972221689226e-01, -6.534972221689226e-01, -2.000253358012206e-01, -2.013329283103903e-01, -7.679595970687031e-01, -1.641477881547186e-01, -2.003815243469289e-01, -2.003815243469289e-01, -1.698259001351644e-02, -1.778147408187121e-02, -6.924628266180470e-02, -8.173329697761618e-03, -1.759631980372505e-02, -1.759631980372505e-02, -5.549136514601493e+00, -5.550196798089071e+00, -5.549314158092624e+00, -5.550134990717864e+00, -5.549586791908635e+00, -5.549586791908635e+00, -2.061329785949276e+00, -2.078238534560762e+00, -2.059584247443469e+00, -2.072819009634935e+00, -2.075023752175635e+00, -2.075023752175635e+00, -5.801210199574952e-01, -6.004167452078029e-01, -5.415082620944851e-01, -5.460229974713516e-01, -6.054680576250653e-01, -6.054680576250653e-01, -1.363666844477944e-01, -2.161200056881183e-01, -1.336160780623483e-01, -1.806768248956811e+00, -1.477087439976901e-01, -1.477087439976901e-01, -7.884957199198798e-03, -9.009169697729261e-03, -6.752742453741504e-03, -9.237428757199830e-02, -8.208679194796734e-03, -8.208679194796734e-03, -5.878939983739851e-01, -6.097970497698449e-01, -6.048459869766118e-01, -5.991974318558381e-01, -6.022579267503667e-01, -6.022579267503667e-01, -5.525180418031856e-01, -5.314437506465529e-01, -5.520614256673785e-01, -5.671698895874373e-01, -5.597306923073205e-01, -5.597306923073204e-01, -6.270741462623183e-01, -2.587802557554003e-01, -2.948961454016460e-01, -3.569732925105615e-01, -3.250079657422508e-01, -3.250079657422507e-01, -4.670596246675580e-01, -6.478010256208708e-02, -8.500688033808325e-02, -3.318384033777378e-01, -1.134012278597640e-01, -1.134012278597640e-01, -1.988833421553942e-02, -2.468705754594739e-03, -4.688595404394891e-03, -1.080473702571780e-01, -6.977156330071967e-03, -6.977156330071957e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_revtpss_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.717698543845658e+01, -2.717703830596950e+01, -2.717749689795763e+01, -2.717663847593294e+01, -2.717701130565460e+01, -2.717701130565460e+01, -4.213041520580432e+00, -4.213068756614500e+00, -4.214000713895849e+00, -4.213472493324307e+00, -4.213072440015744e+00, -4.213072440015744e+00, -7.884209366551900e-01, -7.869661276544341e-01, -7.467888998343194e-01, -7.546837870538380e-01, -7.878932253617263e-01, -7.878932253617263e-01, -2.078365210246509e-01, -2.118611224367686e-01, -9.788708139370879e-01, -1.439273073983077e-01, -2.089991921260542e-01, -2.089991921260542e-01, -2.246381670714757e-02, -2.350206870827417e-02, -8.411373083582997e-02, -1.088097755872772e-02, -2.325773412656374e-02, -2.325773412656374e-02, -6.624837736753411e+00, -6.624585877366122e+00, -6.624901318322902e+00, -6.624700652564267e+00, -6.624588427377827e+00, -6.624588427377827e+00, -2.435899764474194e+00, -2.466195428219324e+00, -2.430295948685754e+00, -2.454600392553798e+00, -2.462894218496837e+00, -2.462894218496837e+00, -7.080860799028930e-01, -7.852314319187513e-01, -6.689698975004050e-01, -7.116936586545971e-01, -7.372432631564768e-01, -7.372432631564768e-01, -1.326983920828611e-01, -1.994160420982742e-01, -1.287149699399431e-01, -2.386522056551293e+00, -1.340574937559210e-01, -1.340574937559210e-01, -1.049774516053700e-02, -1.198903029042284e-02, -8.987132182862083e-03, -1.032324649826565e-01, -1.092358104489420e-02, -1.092358104489420e-02, -7.436873046951049e-01, -7.333438792798496e-01, -7.348481179959511e-01, -7.373712836316789e-01, -7.359182812022249e-01, -7.359182812022248e-01, -7.264552214921552e-01, -6.478845446653672e-01, -6.680852499520336e-01, -6.796351394906600e-01, -6.734904935296135e-01, -6.734904935296134e-01, -8.229476995056328e-01, -2.601792909762047e-01, -3.227940958022107e-01, -4.244179850949117e-01, -3.760099301128060e-01, -3.760099301128059e-01, -5.601202895804440e-01, -8.024151829165918e-02, -9.915247361418143e-02, -4.018077022318491e-01, -1.143704710020620e-01, -1.143704710020619e-01, -2.626749456953543e-02, -3.290982320894738e-03, -6.247484431213915e-03, -1.087450832691356e-01, -9.287052573525773e-03, -9.287052573525759e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revtpss_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.006679708223451e-08, -2.006723065544015e-08, -2.006826684187249e-08, -2.006119781938341e-08, -2.006703308935615e-08, -2.006703308935615e-08, -1.118485289195693e-05, -1.118751528179418e-05, -1.126880418472528e-05, -1.126863877229551e-05, -1.118515146349871e-05, -1.118515146349871e-05, -4.076254111848994e-03, -4.099985259578979e-03, -4.676924586009586e-03, -4.735179027845178e-03, -4.085244232219369e-03, -4.085244232219369e-03, -5.982827371309176e-01, -5.910526577390742e-01, -9.145524735336645e-04, -1.171887513588624e+00, -5.966507689966285e-01, -5.966507689966285e-01, -8.020398827085845e+00, -8.040427785141333e+00, -3.274915688347781e+00, -5.689969842538974e+00, -8.352699163905053e+00, -8.352699163905053e+00, -8.482094954951773e-06, -8.555425831715384e-06, -8.489605074672481e-06, -8.546607995005137e-06, -8.519508620124692e-06, -8.519508620124692e-06, -7.277120251465226e-05, -7.155116676035740e-05, -7.117172227031143e-05, -7.014016709559478e-05, -7.417730953243116e-05, -7.417730953243116e-05, -2.370274143812657e-02, -1.886181864400142e-02, -2.218997751446722e-02, -1.807569796086549e-02, -2.460609637218515e-02, -2.460609637218515e-02, -1.586203263989274e+00, -4.144096706651884e-01, -1.800939993023564e+00, -1.202386355219199e-04, -1.557343052830963e+00, -1.557343052830963e+00, -6.036295421351886e+00, -6.048059915710050e+00, -1.731116646998341e+01, -3.099214220689413e+00, -8.933248544606260e+00, -8.933248544606256e+00, -1.822946408711356e-01, -1.176638540047016e-01, -1.387553020126986e-01, -1.582118655401333e-01, -1.481733278308932e-01, -1.481733278308932e-01, -9.560469809004980e-02, -2.753658366056160e-02, -3.866741099958428e-02, -5.991996449931260e-02, -4.745086118657438e-02, -4.745086118657440e-02, -1.210657673811981e-02, -2.060670396279763e-01, -1.342053677652992e-01, -9.355699519331649e-02, -1.098987794847872e-01, -1.098987794847873e-01, -3.923021438375823e-02, -2.788916547571330e+00, -2.719780176584849e+00, -1.495695733802853e-01, -2.785871479266779e+00, -2.785871479266782e+00, -6.023283178831209e+00, -1.040731757976577e+01, -8.959996709192215e+00, -3.416204558241508e+00, -1.304709571082441e+01, -1.304709571082440e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revtpss_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.929906830890332e-03, 2.929993331292010e-03, 2.930386728682937e-03, 2.928981521084707e-03, 2.929952240914779e-03, 2.929952240914779e-03, 2.869488764218453e-03, 2.870617645831327e-03, 2.906655705352345e-03, 2.921201407718247e-03, 2.869603995268487e-03, 2.869603995268487e-03, 3.440389066920232e-03, 3.464252231331423e-03, 3.957472584421794e-03, 4.675289774027315e-03, 3.450019041446878e-03, 3.450019041446878e-03, 1.898793014280210e-02, 2.088840501661341e-02, 9.877565665286144e-05, 1.795371231041722e-03, 1.955311334254538e-02, 1.955311334254538e-02, 6.698888918978807e-10, 9.158413908329509e-10, 2.939830184714964e-06, 1.332956170128513e-12, 9.306200293997597e-10, 9.306200293997577e-10, 1.901320793813142e-02, 1.918339867831712e-02, 1.903251708452343e-02, 1.916472276798584e-02, 1.909748610619035e-02, 1.909748610619035e-02, 6.098854714779691e-03, 6.357778442859066e-03, 5.907199355653509e-03, 6.103597063492601e-03, 6.532751543427010e-03, 6.532751543427010e-03, 4.105072879664443e-02, 2.299975466383259e-02, 2.631522498132270e-02, 1.531333610862062e-02, 5.099312517447024e-02, 5.099312517447024e-02, 2.907860475174690e-04, 5.723846705069229e-03, 3.532740317605396e-04, 2.921266315673034e-03, 1.158459310498818e-03, 1.158459310498818e-03, 1.482324801440459e-12, 3.395668006457488e-12, 4.340958909849118e-12, 2.389202211518055e-05, 3.364992153250998e-12, 3.364992153250987e-12, 3.045227044649609e-01, 2.896833068259870e-01, 3.181697403184207e-01, 3.320171787814289e-01, 3.266869493157249e-01, 3.266869493157250e-01, 7.695366411803582e-02, 5.190020904995220e-02, 8.020649220848075e-02, 1.254215874409119e-01, 9.904175930879208e-02, 9.904175930879215e-02, 1.544035505228089e-02, 1.093105918987867e-02, 1.951206751278725e-02, 3.515069249254023e-02, 3.009561152818158e-02, 3.009561152818155e-02, 3.945539709504461e-02, 1.283766511984166e-06, 1.026509102663886e-05, 4.492335270155044e-02, 1.999592318238536e-04, 1.999592318238540e-04, 8.064844764012869e-10, 7.874607458363132e-16, 9.165932933633261e-14, 2.129591425887644e-04, 2.223873123426715e-12, 2.223873123426685e-12])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
