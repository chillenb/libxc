
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_pbe_gx_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_pbe_gx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.390262247298027e+01, -2.390270708745845e+01, -2.390314434838353e+01, -2.390188804392355e+01, -2.390253758209319e+01, -2.390253758209319e+01, -3.344853120800417e+00, -3.345084697330742e+00, -3.351500755688528e+00, -3.352063395426675e+00, -3.350436163805518e+00, -3.350436163805518e+00, -5.689705489996937e-01, -5.679558111497695e-01, -5.433501881363050e-01, -5.523674680076511e-01, -5.518655229772963e-01, -5.518655229772963e-01, -1.612832483453926e-01, -1.639518471497445e-01, -6.363765518814646e-01, -8.420200938053247e-02, -1.416977600273857e-01, -1.416977600273857e-01, -2.946289438530199e-05, -3.520145325985129e-05, -3.978329718594869e-03, -5.329435975150156e-06, -1.668055661895154e-05, -1.668055661895156e-05, -5.880593170439887e+00, -5.882278050479522e+00, -5.880712754910380e+00, -5.882198341086488e+00, -5.881425769913461e+00, -5.881425769913461e+00, -2.040336491757230e+00, -2.070241579317750e+00, -2.031971917791542e+00, -2.059102589976714e+00, -2.061186385421222e+00, -2.061186385421222e+00, -6.225099121534672e-01, -6.887319026165191e-01, -5.432167531337406e-01, -5.698780307648005e-01, -6.380130725647006e-01, -6.380130725647006e-01, -4.023918621587426e-02, -1.415055985217666e-01, -3.475377612768991e-02, -1.967319942806434e+00, -6.263689857423976e-02, -6.263689857423979e-02, -2.814355467968862e-06, -5.395772607790238e-06, -6.103876078290119e-06, -1.518237861332932e-02, -8.599104081459428e-06, -8.599104081459424e-06, -6.690053652065022e-01, -6.630204009147658e-01, -6.651256147681711e-01, -6.668622341265160e-01, -6.659911959952931e-01, -6.659911959952931e-01, -6.474963048446367e-01, -5.375197141274239e-01, -5.693277625259532e-01, -6.006682274418272e-01, -5.843989318457289e-01, -5.843989318457289e-01, -7.108225814519190e-01, -2.034487565055250e-01, -2.524547813889917e-01, -3.426715999996219e-01, -2.989512959148121e-01, -2.989512959148121e-01, -4.736523911552756e-01, -3.400116786862474e-03, -7.893230310131416e-03, -3.425297216211908e-01, -2.885208956551109e-02, -2.885208956551109e-02, -7.290317387294042e-05, -2.321729064042454e-07, -1.485199224897868e-06, -2.562227231742718e-02, -7.171362468519623e-06, -7.171362468519612e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_pbe_gx_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_pbe_gx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.140238403060338e+01, -3.140223222136664e+01, -3.140252547427787e+01, -3.140233496573689e+01, -3.140292814604933e+01, -3.140292593376948e+01, -3.140133091736752e+01, -3.140089002594984e+01, -3.140247046749705e+01, -3.140166727722018e+01, -3.140247046749705e+01, -3.140166727722018e+01, -5.264126304305733e+00, -5.265997932446378e+00, -5.263818984369187e+00, -5.265954272684880e+00, -5.259863912102996e+00, -5.259688053942577e+00, -5.254324515164879e+00, -5.255982871052276e+00, -5.263796270996451e+00, -5.252720174934667e+00, -5.263796270996451e+00, -5.252720174934667e+00, -8.591894450766191e-01, -8.632668083421671e-01, -8.577431395698807e-01, -8.625533592196791e-01, -8.378164814327588e-01, -8.329156315316023e-01, -8.454238648624831e-01, -8.479557431570388e-01, -8.689789400789781e-01, -8.164288655901180e-01, -8.689789400789781e-01, -8.164288655901180e-01, -1.529047650410377e-01, -1.774215328991234e-01, -1.585488783983193e-01, -1.866296794580007e-01, -9.310731640757949e-01, -9.717629759100191e-01, -1.610729621673613e-01, -1.537160222141697e-01, -1.586287689673004e-01, -1.104314667009192e-01, -1.586287689673004e-01, -1.104314667009191e-01, -9.334454104916808e-05, -3.998304830257080e-05, -1.185518694515829e-04, -1.268954312799712e-04, -1.296614148714278e-02, -1.482364652884439e-02, -2.194745753741596e-05, -2.058414120547944e-05, -7.401566677639064e-05, -2.197434825938874e-05, -7.401566677639080e-05, -2.197434825938878e-05, -7.728847882170818e+00, -7.726893255853658e+00, -7.732025626864034e+00, -7.729963462601468e+00, -7.729011518186759e+00, -7.726989448702301e+00, -7.731738774175724e+00, -7.729779124336037e+00, -7.730485937172249e+00, -7.728437433719015e+00, -7.730485937172249e+00, -7.728437433719015e+00, -2.616584106572212e+00, -2.616367792753115e+00, -2.644596843274853e+00, -2.643585262676860e+00, -2.575617450165187e+00, -2.587433502417830e+00, -2.600286899676495e+00, -2.612071100548285e+00, -2.662078865862807e+00, -2.634893799575443e+00, -2.662078865862807e+00, -2.634893799575443e+00, -8.656914726452113e-01, -8.630383285313651e-01, -9.728029673327212e-01, -9.729517136949318e-01, -7.953890732029578e-01, -8.172871592200976e-01, -8.746576456737380e-01, -8.870599283546373e-01, -9.035847081857260e-01, -8.597502581046685e-01, -9.035847081857261e-01, -8.597502581046685e-01, -9.651006029724610e-02, -9.904956956056307e-02, -9.578855790285783e-02, -9.523783126760366e-02, -8.507413225958201e-02, -9.088102301024720e-02, -2.990420668343151e+00, -2.989036677361909e+00, -1.121550708642109e-01, -1.131887841232585e-01, -1.121550708642109e-01, -1.131887841232584e-01, -1.099049290050487e-05, -1.147642470309717e-05, -2.149630568610124e-05, -2.160799951643699e-05, -2.142764869824332e-05, -2.682515496673725e-05, -4.621691717256175e-02, -4.511595332831699e-02, -1.611763994153083e-05, -4.069794038273002e-05, -1.611763994153081e-05, -4.069794038273001e-05, -8.951849978658042e-01, -8.987171561479037e-01, -8.834026186701349e-01, -8.870207468562377e-01, -8.875397450446870e-01, -8.911527419244653e-01, -8.909883471556567e-01, -8.945271855375790e-01, -8.892653072590094e-01, -8.928396148097525e-01, -8.892653072590094e-01, -8.928396148097525e-01, -8.744833330151472e-01, -8.772901234311452e-01, -6.872619730782882e-01, -6.910824180301227e-01, -7.428999046217583e-01, -7.469734616037399e-01, -7.972186071136133e-01, -8.002321072034516e-01, -7.702703218706259e-01, -7.733421535040000e-01, -7.702703218706259e-01, -7.733421535040000e-01, -1.022733739276545e+00, -1.023380616742016e+00, -2.011612642253684e-01, -2.039645307584211e-01, -2.933834392855316e-01, -3.003588851577449e-01, -4.805533612260385e-01, -4.840215663196790e-01, -3.860647717176723e-01, -3.866334223675546e-01, -3.860647717176723e-01, -3.866334223675546e-01, -6.328960905648398e-01, -6.385326801772632e-01, -1.067070540183191e-02, -1.136642249158744e-02, -2.511081016567543e-02, -2.729434192591002e-02, -4.782831259195365e-01, -4.841424620096506e-01, -6.788143601776578e-02, -7.551416322016107e-02, -6.788143601776581e-02, -7.551416322016108e-02, -2.718553694261568e-04, -3.052690690036186e-04, -7.932236979712995e-07, -1.062829635014050e-06, -5.242692938195114e-06, -6.506506320731390e-06, -6.272359861046940e-02, -4.698059744487278e-02, -1.965205580931839e-05, -3.203948533102292e-05, -1.965205580931835e-05, -3.203948533102291e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_pbe_gx_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_pbe_gx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.807273025147115e-08, 0.000000000000000e+00, -1.807248800758568e-08, -1.807249882303611e-08, 0.000000000000000e+00, -1.807231992705232e-08, -1.807166158659555e-08, 0.000000000000000e+00, -1.807114745485036e-08, -1.807427441170217e-08, 0.000000000000000e+00, -1.807447773837477e-08, -1.807259582723930e-08, 0.000000000000000e+00, -1.807307541825619e-08, -1.807259582723930e-08, 0.000000000000000e+00, -1.807307541825619e-08, -3.887746469978220e-05, 0.000000000000000e+00, -3.896471015168080e-05, -3.885236404895027e-05, 0.000000000000000e+00, -3.895468573315144e-05, -3.844850203903733e-05, 0.000000000000000e+00, -3.839366731946672e-05, -3.829708287127729e-05, 0.000000000000000e+00, -3.835524608155935e-05, -3.895182626120766e-05, 0.000000000000000e+00, -3.800288411951318e-05, -3.895182626120766e-05, 0.000000000000000e+00, -3.800288411951318e-05, 1.685527774211785e-04, 0.000000000000000e+00, 9.776895814643749e-05, 1.813461851628426e-04, 0.000000000000000e+00, 1.129712339720839e-04, 4.503997981598626e-04, 0.000000000000000e+00, 3.540640233797298e-04, -1.456145308450749e-04, 0.000000000000000e+00, -2.371503925042911e-04, 1.766970183113144e-04, 0.000000000000000e+00, -7.847240319593497e-04, 1.766970183113144e-04, 0.000000000000000e+00, -7.847240319593497e-04, -4.576639599009064e+00, 0.000000000000000e+00, -3.609143205842159e+00, -4.532934976306726e+00, 0.000000000000000e+00, -3.415421053114403e+00, 1.662815947702006e-03, 0.000000000000000e+00, 1.299196117912889e-03, 5.804502179893605e-01, 0.000000000000000e+00, -7.080570856198860e-01, -4.043781334313346e+00, 0.000000000000000e+00, 3.094328406226934e+00, -4.043781334313342e+00, 0.000000000000000e+00, 3.094328406226935e+00, 1.200341780120771e+01, 0.000000000000000e+00, -4.051959764302092e+01, 1.937062484626135e+01, 0.000000000000000e+00, 7.284148448865754e+00, 9.615106502831726e+00, 0.000000000000000e+00, 8.743945068375183e+00, 2.095500132056838e+01, 0.000000000000000e+00, 2.037906656702845e+01, 2.187473212079597e+01, 0.000000000000000e+00, 5.797233438247399e+01, 2.187473212079609e+01, 0.000000000000000e+00, 5.797233438247412e+01, -5.109985924117198e-06, 0.000000000000000e+00, -5.114772769001669e-06, -5.106504923589013e-06, 0.000000000000000e+00, -5.111406688553048e-06, -5.109731477007238e-06, 0.000000000000000e+00, -5.114613178267102e-06, -5.106746373399151e-06, 0.000000000000000e+00, -5.111556944791006e-06, -5.108249158798129e-06, 0.000000000000000e+00, -5.113089645539819e-06, -5.108249158798129e-06, 0.000000000000000e+00, -5.113089645539819e-06, -2.585770858457416e-04, 0.000000000000000e+00, -2.581887902539898e-04, -2.493256817047505e-04, 0.000000000000000e+00, -2.492898251161622e-04, -2.626967959986160e-04, 0.000000000000000e+00, -2.611958137862645e-04, -2.545352859273174e-04, 0.000000000000000e+00, -2.529635929562934e-04, -2.501934267566770e-04, 0.000000000000000e+00, -2.529927384526285e-04, -2.501934267566770e-04, 0.000000000000000e+00, -2.529927384526285e-04, -3.367478700012318e-02, 0.000000000000000e+00, -3.387612734196275e-02, -2.443783565050141e-02, 0.000000000000000e+00, -2.429680623953807e-02, -6.325336673117274e-02, 0.000000000000000e+00, -4.674924593322818e-02, -5.449538758809556e-02, 0.000000000000000e+00, -4.224750126103858e-02, -2.821269450031176e-02, 0.000000000000000e+00, -3.551481418671627e-02, -2.821269450031175e-02, 0.000000000000000e+00, -3.551481418671627e-02, 1.537610901340275e+00, 0.000000000000000e+00, 1.739091747248866e+00, -4.110599430535628e+00, 0.000000000000000e+00, -4.104773743619345e+00, 2.861614100080768e+00, 0.000000000000000e+00, 1.936367653119100e+00, -3.366359588628193e-04, 0.000000000000000e+00, -3.371589441606267e-04, -6.288191013451664e-01, 0.000000000000000e+00, -2.989679108579755e+00, -6.288191013451758e-01, 0.000000000000000e+00, -2.989679108579785e+00, 2.948375481069121e+01, 0.000000000000000e+00, 2.551878753650286e+01, 2.535504338367740e+01, 0.000000000000000e+00, 2.341172819446127e+01, 1.440778724637220e+02, 0.000000000000000e+00, 1.601419724771712e+02, 7.531066321014675e+00, 0.000000000000000e+00, 5.578128480964567e+00, 7.184100869932625e+01, 0.000000000000000e+00, 6.588858504263233e+01, 7.184100869932605e+01, 0.000000000000000e+00, 6.588858504263213e+01, -3.174902254974901e-02, 0.000000000000000e+00, -3.125854689945976e-02, -3.241062969486284e-02, 0.000000000000000e+00, -3.190632456423787e-02, -3.217669923845258e-02, 0.000000000000000e+00, -3.167582083544788e-02, -3.198356698983296e-02, 0.000000000000000e+00, -3.148966365879802e-02, -3.208018406068538e-02, 0.000000000000000e+00, -3.158279192778776e-02, -3.208018406068538e-02, 0.000000000000000e+00, -3.158279192778776e-02, -3.565586424393483e-02, 0.000000000000000e+00, -3.517164893046865e-02, -6.384782525575781e-02, 0.000000000000000e+00, -6.276588273545540e-02, -5.369543140827247e-02, 0.000000000000000e+00, -5.275829762321675e-02, -4.541015486511088e-02, 0.000000000000000e+00, -4.477664087314703e-02, -4.945319282019422e-02, 0.000000000000000e+00, -4.870710717005845e-02, -4.945319282019423e-02, 0.000000000000000e+00, -4.870710717005844e-02, -2.089704569871395e-02, 0.000000000000000e+00, -2.054804486537888e-02, -1.540631743513966e+00, 0.000000000000000e+00, -1.509772366880332e+00, -8.124697236073587e-01, 0.000000000000000e+00, -7.800421128944619e-01, -3.061150853239202e-01, 0.000000000000000e+00, -3.013151634750744e-01, -4.782737093221228e-01, 0.000000000000000e+00, -4.791241736287382e-01, -4.782737093221233e-01, 0.000000000000000e+00, -4.791241736287385e-01, -9.468983229505459e-02, 0.000000000000000e+00, -9.130175430252875e-02, 3.791131917381214e+00, 0.000000000000000e+00, 5.734116998694065e+00, 7.311459865859724e+00, 0.000000000000000e+00, 7.055821271304138e+00, -3.616162854349957e-01, 0.000000000000000e+00, -3.095747446302454e-01, 3.427576202794721e+00, 0.000000000000000e+00, 2.276687472350294e+00, 3.427576202794734e+00, 0.000000000000000e+00, 2.276687472350292e+00, 1.789881996777960e+01, 0.000000000000000e+00, 1.824920176883825e+01, 9.086501052793231e+01, 0.000000000000000e+00, 1.609304526514697e+02, 5.587371859521070e+01, 0.000000000000000e+00, 5.945551433937424e+01, 2.734872079082230e+00, 0.000000000000000e+00, -8.824421694895513e+00, 1.479809790032414e+02, 0.000000000000000e+00, 6.932458200275572e+01, 1.479809790032416e+02, 0.000000000000000e+00, 6.932458200275623e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_pbe_gx_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_pbe_gx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_pbe_gx_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_pbe_gx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.818344666573371e-03, 1.818329049878161e-03, 1.818339566821055e-03, 1.818325347040861e-03, 1.818318480803088e-03, 1.818296473085784e-03, 1.818376018411973e-03, 1.818369813966386e-03, 1.818341796760748e-03, 1.818337000927251e-03, 1.818341796760748e-03, 1.818337000927251e-03, 1.518204015164483e-02, 1.521012335865333e-02, 1.517399073873392e-02, 1.520692578883574e-02, 1.504495814983397e-02, 1.502796174920695e-02, 1.499699163926908e-02, 1.501657368073187e-02, 1.520026867502422e-02, 1.490474972539311e-02, 1.520026867502422e-02, 1.490474972539311e-02, 9.526245320239457e-03, 9.704530807094654e-03, 9.496871562847668e-03, 9.668043954015725e-03, 8.892651121368667e-03, 9.120668854964613e-03, 1.021907008560531e-02, 1.044593112342529e-02, 9.478727947568967e-03, 1.138999009725079e-02, 9.478727947568967e-03, 1.138999009725079e-02, 2.144392900885649e-01, 1.957427082074399e-01, 2.191107869553196e-01, 1.951726234652528e-01, 2.230552589737293e-03, 2.986562428816254e-03, 1.842093483008291e-02, 4.273435703134590e-02, 2.136638694442697e-01, 2.800699567502975e-03, 2.136638694442694e-01, 2.800699567502972e-03, 1.724448517067457e-05, 1.202508226584698e-04, 8.542411133361988e-06, 3.740133658589748e-05, 4.158072197062793e-04, 7.529233221304347e-04, 1.054519485109870e-08, 1.318899325366576e-08, 1.053371047679230e-06, 5.246294472062721e-09, 1.053371047679129e-06, 5.246294472062636e-09, 7.475486277394224e-03, 7.477172651339697e-03, 7.474823905722318e-03, 7.476532996852966e-03, 7.475409071775902e-03, 7.477121598740785e-03, 7.474842044327325e-03, 7.476541755623828e-03, 7.475177995941658e-03, 7.476856712792061e-03, 7.475177995941658e-03, 7.476856712792061e-03, 1.949219273463337e-02, 1.947222858785969e-02, 1.927785187900749e-02, 1.926819657568481e-02, 1.946659848701315e-02, 1.945831351118411e-02, 1.928419114099699e-02, 1.927210890203468e-02, 1.937882825514747e-02, 1.936355102485837e-02, 1.937882825514747e-02, 1.936355102485837e-02, 6.862588340587054e-02, 6.859818480379934e-02, 6.393993608882553e-02, 6.375113033025240e-02, 9.060655611218719e-02, 7.731136085805768e-02, 8.845081421913908e-02, 7.766411699684832e-02, 6.521990417475276e-02, 6.977425705601151e-02, 6.521990417475274e-02, 6.977425705601149e-02, 1.136375822425141e-02, 1.026499976876227e-02, 1.993022879563568e-01, 2.014035616102585e-01, 6.209320071633577e-03, 1.020253742484101e-02, 2.324718905271474e-02, 2.325338376344096e-02, 3.192381286657500e-02, 6.305405110651725e-02, 3.192381286657509e-02, 6.305405110651757e-02, 2.217725828282049e-10, 2.574446076305505e-10, 2.610037246836570e-09, 2.034095180291584e-09, 3.432814605476748e-08, 4.812062490729148e-08, 1.747986722071599e-03, 4.395343845796044e-03, 3.487580673260600e-10, 1.629137824847323e-06, 3.487580673261442e-10, 1.629137824847382e-06, 6.705460582164188e-02, 6.679389966138063e-02, 6.721124716907481e-02, 6.695082784434743e-02, 6.715643953744681e-02, 6.689550033599248e-02, 6.711094472628118e-02, 6.685078619490210e-02, 6.713391470473974e-02, 6.687330674353276e-02, 6.713391470473974e-02, 6.687330674353276e-02, 6.921811615119522e-02, 6.897250392109811e-02, 7.755692634773044e-02, 7.725461695935694e-02, 7.511251860265783e-02, 7.480572889126025e-02, 7.272530089136936e-02, 7.247557437764450e-02, 7.397564893255494e-02, 7.369366626867098e-02, 7.397564893255497e-02, 7.369366626867098e-02, 6.225741401356845e-02, 6.172458188038218e-02, 1.569011385254847e-01, 1.564595223474553e-01, 1.424695868910412e-01, 1.412044800572593e-01, 1.234420245038033e-01, 1.233789105014635e-01, 1.297917597111332e-01, 1.299058855180647e-01, 1.297917597111332e-01, 1.299058855180647e-01, 8.737389058994963e-02, 8.630506474868191e-02, 1.940321060702819e-03, 1.373603975323013e-03, 9.942904865737079e-04, 1.288206071308850e-03, 1.293824299527908e-01, 1.189771157754736e-01, 9.595357132770956e-03, 1.572215311584835e-02, 9.595357132770932e-03, 1.572215311584837e-02, 1.265550070025968e-07, 1.341746911222722e-07, 1.225007801258851e-12, 1.140528207049028e-12, 8.178122098925118e-09, 1.127574069708189e-08, 1.259545792674397e-02, 4.291133556436789e-02, 1.333008085594655e-09, 1.061794033471503e-06, 1.333008085595058e-09, 1.061794033471441e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
