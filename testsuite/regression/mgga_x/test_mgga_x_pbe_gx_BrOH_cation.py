
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_pbe_gx_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_pbe_gx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.248582224385771e+01, -2.248594845896935e+01, -2.248650336738478e+01, -2.323893922284633e+01, -2.323977216276312e+01, -2.399403349286595e+01, -3.456586169435464e+00, -3.774619560044607e+00, -3.776230000288779e+00, -3.775922000224170e+00, -3.775563123763768e+00, -3.457800780947215e+00, -5.754891425564912e-01, -6.319183546470194e-01, -6.583221246109987e-01, -6.147429791045522e-01, -5.616189215210510e-01, -6.683035679435843e-01, -1.584094070958601e-01, -1.619244072045256e-01, -6.924806404084245e-01, -1.033838978722521e-01, -1.541910183100802e-01, -1.574316921570169e-01, -4.180898159148953e-05, -2.200928872517347e-03, -1.537250211227156e-02, -6.871923797347196e-06, -2.301350317306188e-05, -2.301350317306189e-05, -5.882129369749591e+00, -5.883795291729395e+00, -5.882216928963171e+00, -5.883687176260020e+00, -5.759882052982117e+00, -5.759989968891414e+00, -2.099322838533090e+00, -2.119908817681579e+00, -2.083904338830842e+00, -2.102288826058200e+00, -1.938796522466891e+00, -2.118191529387733e+00, -6.090284292718229e-01, -7.167877173685646e-01, -5.935786938005816e-01, -6.256544544961031e-01, -6.268058708639874e-01, -6.632826012692368e-01, -5.027718108545608e-02, -1.481338231222828e-01, -4.331652584974462e-02, -2.136672593230119e+00, -7.710269317295700e-02, -7.710269317295701e-02, -9.826835660159143e-04, -6.038507755992601e-06, -7.739279847340930e-06, -3.193672565311698e-02, -1.139553587021505e-05, -1.139553587021712e-05, -6.721892322615564e-01, -6.661194893952256e-01, -6.562515087903130e-01, -6.650567083855292e-01, -6.581927860949095e-01, -6.636403465471044e-01, -6.536696126826671e-01, -4.971279926796726e-01, -5.450104559108943e-01, -6.060669547330306e-01, -5.897046267698335e-01, -5.669063255531184e-01, -7.222288458618038e-01, -2.105342677340048e-01, -2.457255329653935e-01, -3.408768956101013e-01, -3.171814609060216e-01, -2.901858457986414e-01, -4.931826088720490e-01, -2.654172973536792e-02, -1.000618051423174e-02, -3.651269496715107e-01, -3.635617822963352e-02, -3.635617822963354e-02, -6.732774704751305e-03, -1.276840638681598e-07, -1.513000398659372e-03, -5.418836275960685e-02, -9.305555316194716e-06, -1.801944028866518e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_pbe_gx_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_pbe_gx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.339577278856164e+01, -3.339542462452263e+01, -3.339583588177208e+01, -3.339547053551939e+01, -3.339607583974180e+01, -3.339580383631463e+01, -3.339535944336593e+01, -3.128829562022744e+01, -3.339580733739150e+01, -3.128914374753739e+01, -3.128944213768371e+01, -3.128914374753739e+01, -4.689624407839939e+00, -4.569037136128965e+00, -4.689832377713012e+00, -4.689534205767459e+00, -4.693845233544590e+00, -4.694610996373220e+00, -4.692783691219666e+00, -4.692854602343038e+00, -4.688409357781855e+00, -4.696551682438290e+00, -4.568165673283066e+00, -4.696551682438290e+00, -8.213966514405060e-01, -8.268084127687473e-01, -8.194998798263554e-01, -7.783695255702716e-01, -7.196529046649711e-01, -7.084678417194124e-01, -7.347581330867868e-01, -8.033561719545549e-01, -8.345524485292937e-01, -7.621218349038194e-01, -7.903199557314423e-01, -6.673909325334786e-01, -1.993949555935333e-01, -1.760406469528292e-01, -2.025348518782598e-01, -1.846939444684750e-01, -6.423085443360328e-01, -9.395095116982257e-01, -1.523276843959350e-02, -3.553921510670983e-02, -1.615146350296910e-01, 9.879454961876163e-02, -1.615146350296909e-01, -1.028037007310649e-01, 2.786750806413659e-02, 2.956970382857878e-02, -6.453460619067722e-03, 3.118231672875946e-02, -3.601772080401943e-02, 1.298604904078710e-01, 1.687998643053119e-02, 1.660030749166129e-02, 2.492200722481181e-02, 1.425225963543136e-02, 2.492200722481181e-02, 1.425225963543131e-02, -7.726853876833390e+00, -7.725014003937088e+00, -7.730055079170917e+00, -7.728106797049665e+00, -7.727064492867622e+00, -7.725143884117103e+00, -7.729810104408573e+00, -7.727952358726190e+00, -8.062419521177565e+00, -7.726563774754688e+00, -7.728469389029431e+00, -8.060466668960983e+00, -2.558967430439304e+00, -2.560631414148527e+00, -2.595315992349324e+00, -2.595815862837299e+00, -2.526938270339889e+00, -2.537793794718957e+00, -2.559115774449379e+00, -2.570168211964167e+00, -2.603004825373984e+00, -2.543011138360545e+00, -2.603004825373984e+00, -2.582600327638068e+00, -8.319300161927324e-01, -9.928694955543746e-01, -9.350694882289077e-01, -9.369775234384258e-01, -7.221526645459980e-01, -7.652679806975227e-01, -7.828044426546780e-01, -8.176515346135371e-01, -8.765052906359178e-01, -9.753216603916434e-01, -8.765052906359178e-01, -8.244760569519227e-01, 9.269562043620816e-02, 9.097355241690067e-02, -1.974167631115304e-01, -1.087961128910346e-01, 1.113276171419573e-01, 9.742154441610223e-02, -2.753325676469122e+00, -2.752225825073493e+00, 3.670589198074731e-02, -5.708236349869273e-03, 3.670589198074729e-02, -5.708236349869269e-03, -2.776832645296603e-03, 1.318270755480959e-02, 1.624696918351520e-02, 1.649451640376118e-02, 1.213036211633589e-02, 1.283610983650682e-02, 1.363643832631674e-01, -6.078711836437564e-02, 1.242064347779954e-02, 1.697359375093728e-02, 1.242064347779949e-02, 1.697359375093564e-02, -8.909226798157780e-01, -8.945551870879365e-01, -8.793191176883329e-01, -8.830287676366247e-01, -8.996254645608528e-01, -9.029971744890958e-01, -9.001306200132702e-01, -8.904236653573147e-01, -8.998750935040531e-01, -9.032481184133876e-01, -8.998750935040533e-01, -8.887604554746523e-01, -8.661388845440678e-01, -8.692149935083591e-01, -6.831658032325195e-01, -6.629321114805468e-01, -7.374039615058535e-01, -8.332457774331612e-01, -7.904556347898724e-01, -7.934928636218231e-01, -7.636960860263146e-01, -7.669882826228620e-01, -7.636960860263147e-01, -8.324564166836401e-01, -9.707299771504974e-01, -1.050218015160519e+00, -1.999170007169837e-01, -2.026124872137434e-01, -3.173550599971368e-01, -2.934315374889374e-01, -4.465455868505230e-01, -4.545122636013803e-01, -3.719137824640714e-01, -3.723961878191804e-01, -3.719137824640714e-01, -3.795098312805605e-01, -6.110337419802480e-01, -6.186834891607635e-01, -3.534234399361572e-02, -3.558465088753833e-02, 1.435534061296012e-01, 1.432653495375460e-01, -4.475378473855876e-01, -4.643905593199110e-01, 1.053413243384706e-01, 8.324685436587217e-02, 1.053413243384707e-01, 8.324685436587180e-02, -8.809940503497168e-03, -9.129480263493063e-03, 4.383448730645971e-03, 4.393464921502332e-03, -1.949664158333597e-03, -2.073633549865989e-03, -7.236099044951812e-02, -7.366850864729142e-02, 1.175414097426592e-02, 1.557334992079525e-02, 1.175414097426890e-02, -3.424083609938154e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_pbe_gx_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_pbe_gx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.068323210016750e-08, 0.000000000000000e+00, -2.068217654014014e-08, -2.068279420939141e-08, 0.000000000000000e+00, -2.068185873813800e-08, -2.068140468490970e-08, 0.000000000000000e+00, -2.067986514823006e-08, -2.068633887690356e-08, 0.000000000000000e+00, -1.797363569653930e-08, -2.068296595559148e-08, 0.000000000000000e+00, -1.797230915480988e-08, -1.797137535463549e-08, 0.000000000000000e+00, -1.797230915480988e-08, -2.496769826321030e-05, 0.000000000000000e+00, -2.304438715678957e-06, -2.496767349903457e-05, 0.000000000000000e+00, -2.496889477380279e-05, -2.496762486694604e-05, 0.000000000000000e+00, -2.496656386676940e-05, -2.495922826335251e-05, 0.000000000000000e+00, -2.495783466857635e-05, -2.498376396327963e-05, 0.000000000000000e+00, -2.495589814836309e-05, -2.301461397345783e-06, 0.000000000000000e+00, -2.495589814836309e-05, 2.161673656148783e-03, 0.000000000000000e+00, 2.037077200940792e-03, 2.201372365439555e-03, 0.000000000000000e+00, -1.725446911318203e-02, -1.890411938332950e-02, 0.000000000000000e+00, -1.939553200900245e-02, -1.869620170765262e-02, 0.000000000000000e+00, 2.508119335720688e-03, 1.917480356788987e-03, 0.000000000000000e+00, 3.470020530900271e-03, -1.671930409976542e-02, 0.000000000000000e+00, -2.121116129728726e-02, 7.988099146825013e-01, 0.000000000000000e+00, -3.503951521239850e+00, 7.458110752193307e-01, 0.000000000000000e+00, -3.288201185644299e+00, -9.385322453439147e-03, 0.000000000000000e+00, 1.598631951804124e-03, -9.652245578665131e+00, 0.000000000000000e+00, -9.454999715003332e+00, -3.371840118886633e+00, 0.000000000000000e+00, -2.561600854835186e+01, -3.371840118886631e+00, 0.000000000000000e+00, 9.948817301338504e+00, -2.402486309128006e+04, 0.000000000000000e+00, -2.130188680118237e+04, 5.800680668261463e+05, 0.000000000000000e+00, -1.950394697037166e+04, 6.076613892369490e+02, 0.000000000000000e+00, -3.881394133926467e+02, -5.712038905299799e+04, 0.000000000000000e+00, -5.937745491020711e+04, -2.946228302056587e+04, 0.000000000000000e+00, -1.193517581597528e+05, -2.946228302056587e+04, 0.000000000000000e+00, -1.193517581597524e+05, -5.107992824860457e-06, 0.000000000000000e+00, -5.112892251957358e-06, -5.104537945686219e-06, 0.000000000000000e+00, -5.109551210489067e-06, -5.107785557156709e-06, 0.000000000000000e+00, -5.112766505000602e-06, -5.104821041956164e-06, 0.000000000000000e+00, -5.109731257930647e-06, -5.523289339806901e-06, 0.000000000000000e+00, -5.111215952408980e-06, -5.106234871799360e-06, 0.000000000000000e+00, -5.528734031561589e-06, -2.467889948731084e-04, 0.000000000000000e+00, -2.468857064622267e-04, -2.400911882885971e-04, 0.000000000000000e+00, -2.403831712414975e-04, -2.525496390710469e-04, 0.000000000000000e+00, -2.509827762359712e-04, -2.465952530909146e-04, 0.000000000000000e+00, -2.449924684905349e-04, -2.388802883597138e-04, 0.000000000000000e+00, -6.522189842958362e-06, -2.388802883597138e-04, 0.000000000000000e+00, -2.428806276542506e-04, -3.108177123389335e-02, 0.000000000000000e+00, -5.650222748388731e-02, -2.269587294833658e-02, 0.000000000000000e+00, -2.266567907744667e-02, -4.533016871269428e-02, 0.000000000000000e+00, -3.947905585179729e-02, -3.898896554129815e-02, 0.000000000000000e+00, -3.432011898339280e-02, -2.666745473157540e-02, 0.000000000000000e+00, -5.637832686340365e-02, -2.666745473157540e-02, 0.000000000000000e+00, -3.262046453986714e-02, -3.095507043437682e+01, 0.000000000000000e+00, -3.003996681791224e+01, 8.361111390727723e-01, 0.000000000000000e+00, -3.433477350556485e+00, -4.191853500640055e+01, 0.000000000000000e+00, -3.639378859531367e+01, -2.734660070107241e-04, 0.000000000000000e+00, -2.739620630747473e-04, -2.150644545490862e+01, 0.000000000000000e+00, -1.879877803263802e+01, -2.150644545490861e+01, 0.000000000000000e+00, -1.879877803263804e+01, 1.691001064205816e+07, 0.000000000000000e+00, -7.695180202732276e+04, -6.010216455804366e+04, 0.000000000000000e+00, -5.476037667779354e+04, -2.882165171959560e+05, 0.000000000000000e+00, -2.691286550478784e+05, -1.275045048303956e+02, 0.000000000000000e+00, 7.747306963136606e+01, -1.200872460520808e+05, 0.000000000000000e+00, -1.131806701956133e+05, -1.200872460520803e+05, 0.000000000000000e+00, -1.131806701956023e+05, -3.152155677449697e-02, 0.000000000000000e+00, -3.104089093216640e-02, -3.218341745860617e-02, 0.000000000000000e+00, -3.168873796670517e-02, -3.289826257531499e-02, 0.000000000000000e+00, -3.236695979554886e-02, -3.251388174247822e-02, 0.000000000000000e+00, -3.127186311421046e-02, -3.270451386882297e-02, 0.000000000000000e+00, -3.218167525407147e-02, -3.270451386882297e-02, 0.000000000000000e+00, -3.136498947620230e-02, -3.513342883808867e-02, 0.000000000000000e+00, -3.467536211593231e-02, -6.320845252336116e-02, 0.000000000000000e+00, -1.339293022054588e-02, -5.304932185314944e-02, 0.000000000000000e+00, -7.280004896833633e-02, -4.480032030927115e-02, 0.000000000000000e+00, -4.418008623710680e-02, -4.877441505679383e-02, 0.000000000000000e+00, -4.806498412803061e-02, -4.877441505679383e-02, 0.000000000000000e+00, -5.851313730091158e-02, -1.878002028199228e-02, 0.000000000000000e+00, -2.211664848064507e-02, -1.463608392639198e+00, 0.000000000000000e+00, -1.432291022286186e+00, 1.092669178091773e-01, 0.000000000000000e+00, -7.100341289653309e-01, -2.604516412156727e-03, 0.000000000000000e+00, -2.450022385089871e-01, -4.262222098432460e-01, 0.000000000000000e+00, -4.270035152446934e-01, -4.262222098432464e-01, 0.000000000000000e+00, 2.965380713267944e-02, -8.774648560341902e-02, 0.000000000000000e+00, -8.550453765997434e-02, 6.553255956492786e+02, 0.000000000000000e+00, 6.376954866517697e+02, -2.148874081135117e+02, 0.000000000000000e+00, -2.013222802283353e+02, -2.981959566355031e-01, 0.000000000000000e+00, -2.826146935681336e-01, -7.485268910689841e+01, 0.000000000000000e+00, -6.746905958398023e+01, -7.485268910689845e+01, 0.000000000000000e+00, -6.746905958398020e+01, 1.670527567036710e+05, 0.000000000000000e+00, 1.448741865055382e+05, -8.916637268756380e+05, 0.000000000000000e+00, -8.856479943827365e+05, 6.958309066883230e+07, 0.000000000000000e+00, 5.437792842540593e+07, 3.963794978115185e+01, 0.000000000000000e+00, 3.713640783842379e+01, -2.149217285492800e+05, 0.000000000000000e+00, -1.372459029442453e+05, -2.149217285493354e+05, 0.000000000000000e+00, 7.316285710017917e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_pbe_gx_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_pbe_gx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.002069703489722e-03, 2.001991394304068e-03, 2.002051360039913e-03, 2.001978090021931e-03, 2.001995859724363e-03, 2.001897715623016e-03, 2.002202179992908e-03, 1.811693382542404e-03, 2.002058295715370e-03, 1.811665219272534e-03, 1.811639585304718e-03, 1.811665219272534e-03, 1.075176516841835e-02, 2.888975582008851e-03, 1.075190598988219e-02, 1.075187037485283e-02, 1.075468392795195e-02, 1.075506657237438e-02, 1.075276907893004e-02, 1.075262273032338e-02, 1.075317441623211e-02, 1.075491655760637e-02, 2.887883969045284e-03, 1.075491655760637e-02, 5.313998885962738e-03, 5.529269578545103e-03, 5.255075895018435e-03, 5.271495069371644e-02, 5.319727068478580e-02, 5.342166795685555e-02, 5.328201569819837e-02, 4.919059132030335e-03, 5.642368282346395e-03, 3.864884772803084e-03, 5.239957161692659e-02, 5.415686994269943e-02, 9.087927678495729e-03, 1.917602805277022e-01, 9.651299195187703e-03, 1.900725540481977e-01, 4.205037207070473e-02, 2.238836477662356e-03, 2.028855461148269e-01, 2.087981853347639e-01, 1.862164982592098e-01, 1.973215119356015e-01, 1.862164982592098e-01, 6.765743246048147e-04, 3.803781099312920e-02, 4.047439958435314e-02, 5.454932096324059e-07, 4.369742847230333e-02, 4.477181118409289e-05, 1.476828116493182e-01, 1.962661971853247e-02, 1.939894430003610e-02, 3.310741274302548e-02, 2.470068657871771e-02, 3.310741274302548e-02, 2.470068657871762e-02, 7.473579777021866e-03, 7.475375157788329e-03, 7.472941337243979e-03, 7.474758476445487e-03, 7.473547647203610e-03, 7.475356424883606e-03, 7.472999428196016e-03, 7.474795783223552e-03, 7.888443215555690e-03, 7.475065254335255e-03, 7.473250672119876e-03, 7.890417026042840e-03, 1.887807923349006e-02, 1.888404861696018e-02, 1.878837308673999e-02, 1.879682639341526e-02, 1.894967457168270e-02, 1.893519537118175e-02, 1.887361159284076e-02, 1.885761585755654e-02, 1.877399447871674e-02, 4.094856094587073e-03, 1.877399447871674e-02, 1.883151570341963e-02, 6.491596123691643e-02, 1.037005080765739e-01, 6.076841978938688e-02, 6.078311883385154e-02, 7.029311822664966e-02, 6.839877390356555e-02, 6.860809080208267e-02, 6.670513210063948e-02, 6.275918877963722e-02, 1.012333057593291e-01, 6.275918877963722e-02, 6.577007467196580e-02, 2.078371553100319e-01, 2.077626677886447e-01, 4.412913114389472e-03, 1.754845436808356e-01, 2.055781143571166e-01, 2.107396002060923e-01, 1.996886384982023e-02, 1.997826279999099e-02, 2.227933954373537e-01, 2.362189625750600e-01, 2.227933954373537e-01, 2.362189625750601e-01, 2.228719263477663e-08, 1.252697130007535e-02, 1.839460916636656e-02, 1.753206448758502e-02, 3.689012679758056e-02, 4.091900882815627e-02, 1.969502522092649e-01, 2.555407106775523e-04, 1.637103374455184e-02, 3.998775754007189e-02, 1.637103374455178e-02, 3.998775754006802e-02, 6.673929199692520e-02, 6.648870648945845e-02, 6.690174684708911e-02, 6.665098597923876e-02, 6.816144996651446e-02, 6.786894840337548e-02, 6.785113468443593e-02, 6.654728623166668e-02, 6.800440481785196e-02, 6.771769249589997e-02, 6.800440481785196e-02, 6.657056230457568e-02, 6.854779745093399e-02, 6.832959628106021e-02, 7.704053105998933e-02, 2.803089242170825e-02, 7.451257042680587e-02, 9.555932955456738e-02, 7.207816522624858e-02, 7.183586726460525e-02, 7.330166838334169e-02, 7.304915051946850e-02, 7.330166838334169e-02, 8.428619720618120e-02, 5.776621441233612e-02, 6.522574200904531e-02, 1.512888405677056e-01, 1.507112788284665e-01, 1.095523947510789e-02, 1.319924159802173e-01, 2.177511526118428e-02, 1.058736949828182e-01, 1.194877161631018e-01, 1.195994443600464e-01, 1.194877161631019e-01, 1.703140481518915e-02, 8.286363304300685e-02, 8.247914227151631e-02, 4.453123179263269e-05, 4.454384987068567e-05, 1.616385816453570e-01, 1.677114591526269e-01, 1.123181800430232e-01, 1.116224869768450e-01, 2.285498328871460e-01, 2.461289142322464e-01, 2.285498328871463e-01, 2.461289142322464e-01, 6.459366838918943e-07, 7.084076537048123e-07, 5.312342262139072e-03, 5.312764348176359e-03, 3.206816350897708e-08, 4.087575788235329e-08, 5.425582196268853e-04, 6.368499250105777e-04, 2.490292262825656e-02, 3.733386105497182e-02, 2.490292262826289e-02, 2.436537574203906e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
