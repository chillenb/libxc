
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_scanl_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_scanl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.324580096702264e+01, -2.324586708742471e+01, -2.324617898051714e+01, -2.324519486708767e+01, -2.324570797308381e+01, -2.324570797308381e+01, -3.385051388445615e+00, -3.385164099182263e+00, -3.388574065332937e+00, -3.390837425672493e+00, -3.388789677376976e+00, -3.388789677376976e+00, -6.056264818896918e-01, -6.049176798384479e-01, -5.888302283378229e-01, -6.013505334128453e-01, -5.980349436985609e-01, -5.980349436985609e-01, -1.725265810567237e-01, -1.751179490622174e-01, -6.633007256982029e-01, -1.132451985969612e-01, -1.383322191968284e-01, -1.383322191968284e-01, -2.591696410604886e-03, -2.789824624248938e-03, -2.394689727987857e-02, -1.214118367948485e-03, -1.699268736412958e-03, -1.699268736412958e-03, -4.118657518233257e+00, -4.255987025977976e+00, -5.669116631231431e+00, -4.178305299334101e+00, -5.669614688500466e+00, -4.834139891201986e+00, -2.096435247845770e+00, -1.740838837938392e+00, -1.958698807944281e+00, -1.983356110895395e+00, -1.964179327326298e+00, -2.132793316706599e+00, -4.804614964276763e-01, -4.939957674308253e-01, -4.455724805165845e-01, -5.245169963135312e-01, -5.675754198573425e-01, -5.422129206146755e-01, -9.153169642404385e-02, -1.446879735554003e-01, -8.405464384170167e-02, -1.758501360152141e+00, -1.102609773514828e-01, -1.102609773514828e-01, -8.817005656838726e-04, -1.368455751422390e-03, -1.124504295165919e-03, -5.400133795568249e-02, -1.185076325106164e-03, -1.427003794032761e-03, -5.493957931563711e-01, -5.495696889193692e-01, -5.495503169094944e-01, -5.492633561235729e-01, -5.495856554660242e-01, -5.495289550414626e-01, -5.334782101308981e-01, -5.163624583242578e-01, -4.205080337280504e-01, -5.864045363494035e-01, -4.827509693152832e-01, -4.398569374679799e-01, -5.335331316280782e-01, -2.333218432895196e-01, -2.787029988309696e-01, -3.769482717382608e-01, -2.590138055970490e-01, -2.706022023253780e-01, -4.455061342456089e-01, -2.848282858952529e-02, -3.282715471738427e-02, -3.238277206034538e-01, -7.164956997527733e-02, -7.164956997527730e-02, -5.093184635296623e-03, -2.781342337921025e-04, -7.348518826966182e-04, -6.669856620032594e-02, -1.368988042149679e-03, -1.368988042149466e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_scanl_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_scanl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.111037863094956e+01, -3.111046211041324e+01, -3.111086528537639e+01, -3.110962261520761e+01, -3.111026919235731e+01, -3.111026919235731e+01, -3.767938026469945e+00, -3.767698066328743e+00, -3.760776277659297e+00, -3.754542225996394e+00, -3.758771141402276e+00, -3.758771141402276e+00, -7.939849767252453e-01, -7.929160682346996e-01, -7.686037641550004e-01, -7.757074247942094e-01, -7.745959004974146e-01, -7.745959004974146e-01, -8.292959858990998e-02, -9.198369738732096e-02, -8.606602868977304e-01, -1.477984166849648e-01, -1.151796964892680e-01, -1.151796964892679e-01, -4.658743585112046e-03, -4.998665900729941e-03, -3.851089270869955e-02, -2.238477985949427e-03, -3.095873661595503e-03, -3.095873661595503e-03, -5.108939168382569e+00, -5.621201188701565e+00, -7.576216698804751e+00, -5.030283976159965e+00, -7.576778195835129e+00, -6.451340963501806e+00, -2.840317726663171e+00, -2.298469039578051e+00, -1.813553522433936e+00, -1.861959579919313e+00, -1.856758591017603e+00, -2.887946565102268e+00, -5.778640389992037e-01, -6.438353630813577e-01, -5.377819176225748e-01, -7.067409883511534e-01, -7.319022925970534e-01, -7.246063496518041e-01, -1.354100939855421e-01, -2.009888549620654e-01, -1.250585043451884e-01, -2.437173323965051e+00, -1.594756907019615e-01, -1.594756907019615e-01, -1.649719789959475e-03, -2.519468096102326e-03, -2.053967507426686e-03, -8.283180129130473e-02, -2.173180642018792e-03, -2.531299442987112e-03, -7.272406957600484e-01, -7.200126048296321e-01, -7.223251977019945e-01, -7.240748499593659e-01, -7.235232147867797e-01, -7.233588393464462e-01, -7.087947695412365e-01, -5.617816069403074e-01, -5.111657587764074e-01, -7.840158773605056e-01, -6.408023276421304e-01, -5.282605474796989e-01, -6.453476228124078e-01, -3.248211407544930e-01, -3.774939630833077e-01, -5.090311123348805e-01, -3.440954410617009e-01, -3.549040293076858e-01, -4.612704139216310e-01, -4.608272175493972e-02, -5.169281199382779e-02, -3.763374473919451e-01, -1.069724071051918e-01, -1.069724071051921e-01, -9.010921842486978e-03, -5.274120284259136e-04, -1.366282236556966e-03, -1.002017469246492e-01, -2.503362222322638e-03, -2.503362222321203e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_scanl_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_scanl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([2.936362243906470e-10, 2.936289934800355e-10, 2.936021815337097e-10, 2.937096510034634e-10, 2.936525804544921e-10, 2.936525804544921e-10, -2.180334832208159e-05, -2.181338817582220e-05, -2.208594374277365e-05, -2.215653915722765e-05, -2.207915254550445e-05, -2.207915254550445e-05, -5.438242786688189e-03, -5.410726630700213e-03, -4.862534093418388e-03, -5.660411728204405e-03, -5.455809894288199e-03, -5.455809894288199e-03, -2.762575106721882e+00, -2.627869429687300e+00, -1.529092271478891e-03, -5.849607285600227e-01, -2.466579539905344e+00, -2.466579539905344e+00, 1.784765749933956e+02, 1.672847899032683e+02, 3.819913457800415e+00, 4.547177967709775e+02, 3.462755490557918e+02, 3.462755490557922e+02, -1.551298989494097e-06, -1.793910577397611e-06, 7.038291921649138e-08, -1.196309341737568e-06, 7.020197499203786e-08, -3.086031540839273e-06, -1.513834158477574e-05, -3.853299742784823e-05, -1.911791165124356e-04, -1.801252235275438e-04, -1.905961418785194e-04, 5.124728492926937e-06, -4.764198026912163e-03, -9.724462914727221e-03, -5.820232014370176e-03, -2.262514566128679e-02, -3.809674453569222e-03, -1.445837391720778e-02, 4.503274081672216e-01, 4.545033481271109e-02, 5.661713020555256e-01, -1.868193551536684e-04, 3.234145588352071e-01, 3.234145588352071e-01, 9.074186752116445e+02, 5.896091404902238e+02, 2.636232273228240e+03, 1.722240345816232e+00, 1.125021354549035e+03, 9.313725484470737e+02, -7.620201709317270e-03, -6.801022109128009e-03, -7.097309983982812e-03, -7.268058486429963e-03, -7.230097373957444e-03, -7.219089138716790e-03, -8.802819961600008e-03, -3.226223161058935e-02, -7.791187098803771e-03, 6.547019341148247e-04, -2.439585666619538e-02, -5.478757595321258e-03, -4.865959016268078e-03, 2.894252814337823e-02, -2.397247236899089e-02, 5.401154517330858e-03, -2.379278699241709e-02, -7.318705492483665e-02, -6.986222902445528e-02, 5.270832889658094e+00, 2.021144829841150e+00, -1.636760160639596e-01, 1.000048621680028e+00, 1.000048621680035e+00, 1.048741449470678e+02, 1.539974146323050e+04, 2.805392119949245e+03, 1.171465933227631e+00, 1.784970374761906e+03, 1.784970374748236e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_scanl_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_scanl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 2.501370653855777e-03, 2.502670196195697e-03, 2.538537976569680e-03, 2.551619337717680e-03, 2.538799033281068e-03, 2.538799033281068e-03, 3.839466846094665e-03, 3.817521160647053e-03, 3.423769010236272e-03, 4.251086964924485e-03, 4.022878599522989e-03, 4.022878599522989e-03, 4.397170327382024e-02, 4.371200313026232e-02, 6.381830668585384e-04, 4.851325090157458e-03, 2.486404606399797e-02, 2.486404606399797e-02, -5.995591627784951e-07, -6.744955182246939e-07, 2.142490690883891e-05, -3.133051824160135e-07, -4.950415574411939e-07, -4.950415574411883e-07, 8.642491996726176e-08, 1.160942986652956e-04, 0.000000000000000e+00, -1.117353058800270e-05, 0.000000000000000e+00, 9.508714994684597e-04, -5.262128404370006e-06, 6.628984431853509e-04, 4.216975107094449e-03, 4.055946980607827e-03, 4.322807703318735e-03, 3.885744047070062e-06, -8.173173287695482e-05, 1.339777679359643e-04, -8.331693272912035e-05, 8.313150827919544e-03, 2.682825866751788e-04, 6.472519969296439e-03, 0.000000000000000e+00, -3.656969182678929e-05, 0.000000000000000e+00, 2.679076295396434e-03, 0.000000000000000e+00, 0.000000000000000e+00, -4.523184497237261e-07, -2.798171327284026e-12, -2.032587662377502e-11, 0.000000000000000e+00, -9.993890887126471e-07, -2.136674420176978e-07, -4.918212702272780e-12, -3.517877849742476e-11, -1.083475184233266e-13, -6.656561005361541e-09, -3.749932044678901e-10, -3.257758242724688e-14, -3.238227688038142e-13, 1.154299933342320e-02, -7.055264842235598e-05, 0.000000000000000e+00, 7.838032972748382e-03, -7.998051400377176e-05, -1.005831254872213e-04, 0.000000000000000e+00, -2.288629046327378e-05, 0.000000000000000e+00, 1.082793951933990e-03, 5.422988598616498e-03, 1.873575993309429e-02, 0.000000000000000e+00, 2.061510805884610e-05, 1.665121051402545e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.945255574902765e-08, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
