
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_rmsrpbel_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmsrpbel", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.187326090584639e+01, -2.187330475313785e+01, -2.187355097276714e+01, -2.187289784137213e+01, -2.187323276745893e+01, -2.187323276745893e+01, -3.380489224203206e+00, -3.380486574175562e+00, -3.380623264663495e+00, -3.382112037911075e+00, -3.381097552460873e+00, -3.381097552460873e+00, -6.544083651642034e-01, -6.541567223359237e-01, -6.506692840806042e-01, -6.589808552030083e-01, -6.600788145222269e-01, -6.600788145222269e-01, -2.099997376946713e-01, -2.103784804857962e-01, -7.350200597964957e-01, -1.785052335532688e-01, -2.034702826940586e-01, -2.034702826940585e-01, -1.011217354967865e-02, -1.064899078704721e-02, -5.870030518772258e-02, -5.830218135953091e-03, -8.138160784503223e-03, -8.138160784503223e-03, -5.293240165722615e+00, -5.293361451361657e+00, -5.293253623356360e+00, -5.293360549844754e+00, -5.293297246539240e+00, -5.293297246539240e+00, -2.109603748642693e+00, -2.126303372140982e+00, -2.111096726437296e+00, -2.125559204083554e+00, -2.118390208855555e+00, -2.118390208855555e+00, -5.915366166687812e-01, -6.281157822489916e-01, -5.331802197026956e-01, -5.367668554970275e-01, -6.015324941424762e-01, -6.015324941424763e-01, -1.450820072482153e-01, -2.259081969981911e-01, -1.362507555714196e-01, -1.825017778660413e+00, -1.573284060616935e-01, -1.573284060616936e-01, -4.501092174754964e-03, -5.699392574836056e-03, -4.364675792400219e-03, -9.481785481075641e-02, -5.482775671063140e-03, -5.482775671063142e-03, -5.888497406233162e-01, -5.887772596645604e-01, -5.888037503313965e-01, -5.888203096109302e-01, -5.888112740796252e-01, -5.888112740796252e-01, -5.713823459587628e-01, -5.207290089650827e-01, -5.343309296535605e-01, -5.483083950941769e-01, -5.409132445989000e-01, -5.409132445989000e-01, -6.520856448442671e-01, -2.702166886710478e-01, -3.008920300093290e-01, -3.544261522866864e-01, -3.263608326338986e-01, -3.263608326338986e-01, -4.721882323387895e-01, -5.610195336586546e-02, -7.652147390627251e-02, -3.390162353388869e-01, -1.174829635075356e-01, -1.174829635075356e-01, -1.425425101214373e-02, -1.523316300276004e-03, -3.203544973302094e-03, -1.115358182663798e-01, -5.034982857663592e-03, -5.034982857663587e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_rmsrpbel_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmsrpbel", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.747454552802186e+01, -2.747492538610047e+01, -2.747466964501302e+01, -2.747501547068371e+01, -2.747509587904898e+01, -2.747561798639568e+01, -2.747369749996078e+01, -2.747383501292214e+01, -2.747461966327358e+01, -2.747456892820930e+01, -2.747461966327358e+01, -2.747456892820930e+01, -4.178971148547069e+00, -4.178463384512688e+00, -4.179239348804775e+00, -4.178610438190566e+00, -4.184193409197312e+00, -4.185061244103692e+00, -4.183865688316988e+00, -4.183685981477311e+00, -4.177729989661193e+00, -4.188294985533005e+00, -4.177729989661193e+00, -4.188294985533005e+00, -7.860681988812303e-01, -7.940063287400378e-01, -7.833168867173446e-01, -7.928583441749661e-01, -7.458892465621006e-01, -7.347933765017711e-01, -7.503746461280162e-01, -7.549747817341076e-01, -8.052380978234959e-01, -6.883737867687307e-01, -8.052380978234959e-01, -6.883737867687307e-01, -1.294032363607369e-01, -1.679271768870533e-01, -1.388300256063411e-01, -1.664669947961547e-01, -8.383445356466982e-01, -8.921689143778728e-01, -1.318022295289173e-01, -1.293227915486938e-01, -1.442092987250899e-01, -1.324230623779939e-01, -1.442092987250896e-01, -1.324230623779937e-01, -1.303761629899009e-02, -1.385400848819942e-02, -1.366186325065716e-02, -1.463530105325926e-02, -7.596581641829264e-02, -8.022049226468241e-02, -7.837274757367561e-03, -7.706682731293256e-03, -1.163080014436929e-02, -6.618657626552290e-03, -1.163080014436929e-02, -6.618657626552290e-03, -6.773717903345863e+00, -6.772139090278610e+00, -6.776096484545394e+00, -6.774436294110630e+00, -6.773887240098015e+00, -6.772244843574187e+00, -6.775926606221218e+00, -6.774330252094041e+00, -6.774908484469464e+00, -6.773288462831995e+00, -6.774908484469464e+00, -6.773288462831995e+00, -2.178148267098718e+00, -2.183338758928512e+00, -2.230080589005396e+00, -2.233941557262360e+00, -2.164375570653555e+00, -2.172992395623244e+00, -2.215000253110743e+00, -2.223529792518043e+00, -2.220406226508485e+00, -2.211712395223872e+00, -2.220406226508485e+00, -2.211712395223872e+00, -7.375229597511445e-01, -7.355168585082357e-01, -8.490675748746226e-01, -8.489682554388744e-01, -6.463928002669016e-01, -6.887766102124456e-01, -7.058531206029869e-01, -7.519017015503046e-01, -7.739272797325184e-01, -7.344406466729765e-01, -7.739272797325185e-01, -7.344406466729767e-01, -1.469556027982686e-01, -1.456550945353595e-01, -1.243723154832457e-01, -1.292417015517333e-01, -1.454953105516321e-01, -1.449632277400219e-01, -2.541316771606252e+00, -2.540433040141876e+00, -1.302182007770058e-01, -1.198941841420542e-01, -1.302182007770058e-01, -1.198941841420543e-01, -5.879441569503017e-03, -6.110164258163266e-03, -7.540839044572501e-03, -7.654969939076097e-03, -5.638837180345527e-03, -5.971727633039896e-03, -1.221723256393924e-01, -1.230470285927962e-01, -5.759214710703059e-03, -7.909246535848055e-03, -5.759214710703061e-03, -7.909246535848059e-03, -7.787690877526231e-01, -7.818598479345001e-01, -7.690788829624955e-01, -7.722564415691103e-01, -7.724630425565576e-01, -7.756319113564916e-01, -7.752993579295725e-01, -7.784012723776101e-01, -7.738797072666778e-01, -7.770141203440454e-01, -7.738797072666778e-01, -7.770141203440454e-01, -7.603432649581549e-01, -7.627803910194485e-01, -6.047919094312212e-01, -6.081478408514790e-01, -6.479536574062532e-01, -6.515835391951721e-01, -6.930047313229221e-01, -6.956594558000361e-01, -6.698427593582954e-01, -6.727879470846659e-01, -6.698427593582954e-01, -6.727879470846659e-01, -8.925225645770770e-01, -8.938168396239815e-01, -1.806500344830247e-01, -1.813016842717662e-01, -2.293920569657551e-01, -2.349520231968911e-01, -3.964534904651261e-01, -3.995384045026538e-01, -3.071805733035326e-01, -3.077827394596551e-01, -3.071805733035325e-01, -3.077827394596551e-01, -5.244945522459479e-01, -5.316539392727925e-01, -7.454493960327638e-02, -7.505498677022970e-02, -1.002042256015975e-01, -1.034910860313255e-01, -3.976207951493546e-01, -4.051135735513952e-01, -1.326227590079433e-01, -1.259230953819604e-01, -1.326227590079432e-01, -1.259230953819605e-01, -1.864956171239904e-02, -1.932569049950109e-02, -2.028762023808494e-03, -2.033398898287572e-03, -4.128061189754679e-03, -4.390526307869538e-03, -1.288669455883862e-01, -1.282158187549453e-01, -5.455199472438233e-03, -7.249407432700401e-03, -5.455199472438227e-03, -7.249407432700393e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rmsrpbel_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmsrpbel", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-9.678600677488293e-09, 0.000000000000000e+00, -9.672230941308375e-09, -9.678390432339946e-09, 0.000000000000000e+00, -9.672079142615439e-09, -9.676890606822263e-09, 0.000000000000000e+00, -9.670163357770501e-09, -9.679222992716574e-09, 0.000000000000000e+00, -9.673144150543767e-09, -9.678492454737839e-09, 0.000000000000000e+00, -9.671348743217598e-09, -9.678492454737839e-09, 0.000000000000000e+00, -9.671348743217598e-09, -1.655429706784586e-05, 0.000000000000000e+00, -1.649928154794254e-05, -1.657121006827377e-05, 0.000000000000000e+00, -1.650619996108423e-05, -1.685610182996620e-05, 0.000000000000000e+00, -1.689494068879236e-05, -1.694496244805685e-05, 0.000000000000000e+00, -1.690083184039706e-05, -1.653168228197672e-05, 0.000000000000000e+00, -1.716644720396832e-05, -1.653168228197672e-05, 0.000000000000000e+00, -1.716644720396832e-05, -1.262870196822642e-02, 0.000000000000000e+00, -1.256430169886487e-02, -1.267050710701192e-02, 0.000000000000000e+00, -1.257598498212803e-02, -1.313359168349475e-02, 0.000000000000000e+00, -1.344447203938512e-02, -1.337742404326229e-02, 0.000000000000000e+00, -1.337439288116790e-02, -1.222073622066544e-02, 0.000000000000000e+00, -1.465426687994470e-02, -1.222073622066544e-02, 0.000000000000000e+00, -1.465426687994470e-02, -4.034499556977114e+00, 0.000000000000000e+00, -2.511938328336841e+00, -3.673939915883619e+00, 0.000000000000000e+00, -2.681979386067182e+00, -5.602491595979586e-03, 0.000000000000000e+00, -5.153412282551284e-03, -3.230923652545845e+00, 0.000000000000000e+00, -3.858692434160237e+00, -3.084390774555613e+00, 0.000000000000000e+00, -4.372375353824835e+00, -3.084390774555618e+00, 0.000000000000000e+00, -4.372375353824844e+00, -9.584868284908687e-183, 0.000000000000000e+00, -3.898573444942897e-162, -1.454340181296327e-161, 0.000000000000000e+00, -1.503158092534948e-140, -1.473208126956315e-04, 0.000000000000000e+00, -6.943917117012517e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -4.173628905885632e-231, 0.000000000000000e+00, 0.000000000000000e+00, -4.173628905888002e-231, 0.000000000000000e+00, 0.000000000000000e+00, -2.323876568960504e-06, 0.000000000000000e+00, -2.324152525452154e-06, -2.322309052904369e-06, 0.000000000000000e+00, -2.322640375605317e-06, -2.323007632942426e-06, 0.000000000000000e+00, -2.323536657815421e-06, -2.321693421675810e-06, 0.000000000000000e+00, -2.322192647877348e-06, -2.323665056626734e-06, 0.000000000000000e+00, -2.323491546465188e-06, -2.323665056626734e-06, 0.000000000000000e+00, -2.323491546465188e-06, -2.550776858846316e-04, 0.000000000000000e+00, -2.507412818588315e-04, -2.268771367531580e-04, 0.000000000000000e+00, -2.234841911962004e-04, -2.412108768503048e-04, 0.000000000000000e+00, -2.414611876003058e-04, -2.143389667698298e-04, 0.000000000000000e+00, -2.142858065003541e-04, -2.473786618758654e-04, 0.000000000000000e+00, -2.373786585293744e-04, -2.473786618758654e-04, 0.000000000000000e+00, -2.373786585293744e-04, -4.118235528652594e-02, 0.000000000000000e+00, -4.096981980101329e-02, -3.021825985516287e-02, 0.000000000000000e+00, -2.964133820299004e-02, -3.719651387794777e-02, 0.000000000000000e+00, -5.012329738107569e-02, -3.298948000601373e-02, 0.000000000000000e+00, -4.067109325731891e-02, -3.175959030364350e-02, 0.000000000000000e+00, -4.390498896685971e-02, -3.175959030364347e-02, 0.000000000000000e+00, -4.390498896685971e-02, -3.257199326736021e+00, 0.000000000000000e+00, -3.353192630273367e+00, -2.761730690605637e+00, 0.000000000000000e+00, -2.602909419881597e+00, -3.077757161092051e+00, 0.000000000000000e+00, -3.374167145646759e+00, -3.256681959520690e-04, 0.000000000000000e+00, -3.264941330804243e-04, -4.912806441873252e+00, 0.000000000000000e+00, -5.929265764403066e+00, -4.912806441873258e+00, 0.000000000000000e+00, -5.929265764403048e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.251525881596797e+00, 0.000000000000000e+00, -1.186730771311818e+00, 0.000000000000000e+00, 0.000000000000000e+00, -3.304197983582019e-285, 0.000000000000000e+00, 0.000000000000000e+00, -3.304197983580518e-285, -1.826139797545095e-02, 0.000000000000000e+00, -1.787866163540824e-02, -1.845486028128520e-02, 0.000000000000000e+00, -1.807225598420442e-02, -1.838838081353938e-02, 0.000000000000000e+00, -1.800360799186279e-02, -1.833082436943588e-02, 0.000000000000000e+00, -1.795091206245266e-02, -1.836213761697126e-02, 0.000000000000000e+00, -1.797890927908845e-02, -1.836213761697126e-02, 0.000000000000000e+00, -1.797890927908845e-02, -2.477707269679382e-02, 0.000000000000000e+00, -2.414698814256333e-02, -3.727938492591175e-02, 0.000000000000000e+00, -3.651171681415066e-02, -3.373129137378284e-02, 0.000000000000000e+00, -3.297410502410822e-02, -3.004582692656417e-02, 0.000000000000000e+00, -2.955970106665357e-02, -3.265532297434823e-02, 0.000000000000000e+00, -3.177009535162902e-02, -3.265532297434824e-02, 0.000000000000000e+00, -3.177009535162904e-02, -2.655466398329116e-02, 0.000000000000000e+00, -2.618559931636255e-02, -1.274216773345657e+00, 0.000000000000000e+00, -1.265276024471756e+00, -8.460625128501044e-01, 0.000000000000000e+00, -8.186683887800500e-01, -2.802326734849966e-01, 0.000000000000000e+00, -2.699087141421384e-01, -5.318309994135857e-01, 0.000000000000000e+00, -5.334402606070474e-01, -5.318309994135861e-01, 0.000000000000000e+00, -5.334402606070476e-01, -1.109888014158607e-01, 0.000000000000000e+00, -1.037422633160053e-01, -3.803428374680278e-05, 0.000000000000000e+00, -4.770608466309117e-05, -3.592981724979179e-02, 0.000000000000000e+00, -6.632093096361533e-02, -3.495309528434126e-01, 0.000000000000000e+00, -3.763001834334644e-01, -3.862733277640947e+00, 0.000000000000000e+00, -5.997254471240893e+00, -3.862733277640956e+00, 0.000000000000000e+00, -5.997254471240892e+00, -2.412052987623891e-98, 0.000000000000000e+00, -2.662151190610189e-90, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -4.160513068904993e+00, 0.000000000000000e+00, -5.450954092573375e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rmsrpbel_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmsrpbel", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rmsrpbel_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmsrpbel", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.299055367083140e-04, 1.294106506683548e-04, 1.298976455617243e-04, 1.294049873616382e-04, 1.298116436183795e-04, 1.292988732175885e-04, 1.298974488208093e-04, 1.294089468198297e-04, 1.299020013363953e-04, 1.293206194061970e-04, 1.299020013363953e-04, 1.293206194061970e-04, 1.420940814714061e-03, 1.401840524811190e-03, 1.426653339680526e-03, 1.404131353894818e-03, 1.522488135208658e-03, 1.535684620521451e-03, 1.555770428943567e-03, 1.540867070384998e-03, 1.409980660250255e-03, 1.630728137344833e-03, 1.409980660250255e-03, 1.630728137344833e-03, 8.883195191856541e-03, 9.081902001018084e-03, 8.844095485895513e-03, 9.044602264788669e-03, 8.063521162887083e-03, 8.251282190758377e-03, 9.306042764654073e-03, 9.494807397356531e-03, 8.910465603897785e-03, 9.646212504802871e-03, 8.910465603897785e-03, 9.646212504802871e-03, 1.011664074795075e-01, 5.640518052914153e-02, 9.112692799234536e-02, 6.930221197005464e-02, 9.407223716036912e-04, 1.611484102669484e-03, 7.199280110881641e-03, 2.291678053259168e-02, 8.180721766820345e-02, 1.477093199617253e-04, 8.180721766820369e-02, 1.477093199617219e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 2.939864784362371e-11, 3.761606150747956e-10, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 3.762251519521522e-05, 3.547271783938682e-05, 3.715525336398647e-05, 3.502391139186457e-05, 3.673387551109984e-05, 3.483547026860710e-05, 3.636688436906378e-05, 3.446058427453344e-05, 3.803559630266517e-05, 3.535585796746720e-05, 3.803559630266517e-05, 3.535585796746720e-05, 8.977538833516549e-03, 8.723503244299454e-03, 7.654398555054909e-03, 7.440017339967109e-03, 7.930580114468459e-03, 8.010669093134146e-03, 6.647234476061432e-03, 6.707008182436094e-03, 8.913541650006395e-03, 8.138940939594821e-03, 8.913541650006395e-03, 8.138940939594821e-03, 4.318973475837136e-02, 4.232541417230104e-02, 4.005556717440905e-02, 3.900941115199491e-02, 1.802801510260698e-02, 4.177293647162943e-02, 1.805467527296545e-02, 3.534664335835574e-02, 3.545325046710853e-02, 4.465931457089489e-02, 3.545325046710847e-02, 4.465931457089488e-02, 1.119791965897716e-03, 9.903553208237307e-04, 7.004898672453605e-02, 6.488726863852111e-02, 2.809308484172420e-04, 8.186476557692725e-04, 1.062998395210825e-02, 1.064841744609718e-02, 1.066696611219880e-02, 1.876317744645231e-02, 1.066696611219884e-02, 1.876317744645213e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 4.884559984110885e-06, 2.181192524751667e-05, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 6.201396539827804e-03, 6.006315668813452e-03, 6.064177674913169e-03, 5.878977334134930e-03, 6.114809023850822e-03, 5.923701904540310e-03, 6.152897337801804e-03, 5.964977095556704e-03, 6.137828169213789e-03, 5.946912086187257e-03, 6.137828169213789e-03, 5.946912086187261e-03, 1.285753906423123e-02, 1.235878490525450e-02, 9.597814400238798e-03, 9.401638717602872e-03, 1.126492274068432e-02, 1.100684691588931e-02, 1.226585375476711e-02, 1.213208790675938e-02, 1.267099706659319e-02, 1.214567411849912e-02, 1.267099706659320e-02, 1.214567411849915e-02, 4.139963745688436e-02, 4.096740476544881e-02, 6.460814437311402e-02, 6.564526339196183e-02, 7.950536913016061e-02, 7.922230695866943e-02, 5.429387662004313e-02, 5.248934599108965e-02, 7.670807477150460e-02, 7.686222749245243e-02, 7.670807477150463e-02, 7.686222749245242e-02, 5.267996449803665e-02, 4.924912716963642e-02, 9.522147995159111e-11, 6.840379697192405e-11, 4.495751825103395e-08, 1.301991910600468e-07, 6.086869905993699e-02, 7.561550851671962e-02, 4.034558551831539e-04, 1.482186927392817e-03, 4.034558551831603e-04, 1.482186927392793e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 5.793335944726909e-04, 4.150009514745106e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
