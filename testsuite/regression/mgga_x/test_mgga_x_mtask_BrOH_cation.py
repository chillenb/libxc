
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mtask_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mtask", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.218648403834052e+01, -2.218661827547139e+01, -2.218720503220069e+01, -2.386181695149309e+01, -2.386265806661116e+01, -2.553923256831106e+01, -3.519836208284802e+00, -4.138224629589615e+00, -4.138752021496198e+00, -4.138914034336715e+00, -4.138466876849714e+00, -3.520312375318051e+00, -3.968454269172038e-01, -5.928705823981222e-01, -7.676306830774814e-01, -5.724982204721891e-01, -3.688870667990518e-01, -7.750174311170386e-01, -1.426222284299560e-01, -1.467149990462830e-01, -6.101081089142922e-01, -1.496054771300105e-01, -1.933011747501299e-01, -1.805213913130744e-01, -3.598918968216221e-03, -2.188310982955688e-03, -1.835000356570669e-02, -1.647468339670937e-03, -2.697427762448986e-03, -2.697427762448986e-03, -6.229162110308457e+00, -6.230363807665411e+00, -6.229222429517163e+00, -6.230283189841965e+00, -5.911485426861246e+00, -5.911776521895264e+00, -2.324705606871125e+00, -2.342471933184296e+00, -2.311670199528150e+00, -2.327405998355597e+00, -1.943283909406299e+00, -2.340853968147353e+00, -6.304250296627192e-01, -7.622137418497341e-01, -6.471024726329291e-01, -6.739530954795219e-01, -6.495389001348607e-01, -7.127888384926295e-01, -9.958035006219809e-02, -1.271982552744701e-01, -9.148502816323123e-02, -2.292642618767205e+00, -1.207275509544571e-01, -1.207275509544571e-01, -5.813273433599173e-04, -1.577629754727244e-03, -1.332195858406110e-03, -2.980441803291007e-02, -1.697957970979978e-03, -1.697957970979978e-03, -7.057937407905579e-01, -7.016441678997352e-01, -6.613424899499987e-01, -6.861226729907037e-01, -6.645822901804126e-01, -6.841314031482222e-01, -6.866515040519734e-01, -5.164844787682229e-01, -5.612677166848226e-01, -6.441676663092236e-01, -6.297111058969629e-01, -5.824871081307345e-01, -7.422499413246095e-01, -2.560788074803353e-01, -2.276128296434962e-01, -3.402867126888335e-01, -3.578974834174409e-01, -2.806869904908522e-01, -5.396372391121742e-01, -5.184278043512882e-05, -4.492053507888745e-02, -3.990606365638171e-01, -7.816898023444652e-02, -7.816898023444654e-02, 1.103060722553173e-04, -2.490122204281448e-04, 2.643653352841423e-05, -4.399787342401214e-03, -1.539907502679637e-03, -3.072472068257722e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mtask_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mtask", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.347278379278782e+01, -3.347260334408300e+01, -3.347287176787177e+01, -3.347266729436771e+01, -3.347318213569933e+01, -3.347310402378497e+01, -3.347218659418009e+01, -3.419167943965881e+01, -3.347283428212453e+01, -3.419230590807996e+01, -3.419275183219702e+01, -3.419230590807996e+01, -5.602687999919306e+00, -5.503789236079305e+00, -5.602691228725686e+00, -5.602620575600820e+00, -5.602729128518710e+00, -5.602794829664006e+00, -5.603187616152167e+00, -5.603265879378258e+00, -5.601782977285791e+00, -5.603405694351746e+00, -5.502776913133645e+00, -5.603405694351746e+00, -9.054006513605315e-01, -9.183205722360774e-01, -9.012622956175382e-01, -1.089228877758412e+00, -1.062897212594324e+00, -1.055797018442539e+00, -1.066425015346811e+00, -8.702679627900909e-01, -9.312834069519069e-01, -7.781484743137665e-01, -1.098067520767959e+00, -1.031216099889740e+00, -1.803651082984611e-01, -2.871146339894999e-01, -1.870261736987869e-01, -2.920218473283810e-01, -1.254222634064757e+00, -8.845463065601984e-01, -2.136124611012183e-01, -2.165595908565780e-01, -2.889575813871016e-01, -1.546449476103445e-01, -2.889575813871014e-01, -2.554162212043863e-02, -6.187673541009535e-03, -6.697453652721611e-03, 1.001265456395721e-04, -7.213583075487276e-03, -9.555233377008080e-04, -5.461628225014419e-02, -3.074097822847852e-03, -3.007954655180663e-03, -5.309112586473787e-03, -2.623626433486832e-03, -5.309112586473787e-03, -2.623626433486831e-03, -8.325867961115993e+00, -8.323872515686890e+00, -8.327250423501308e+00, -8.325207792054242e+00, -8.325950602239178e+00, -8.323922561424173e+00, -8.327136851676654e+00, -8.325135632873343e+00, -8.147609522395086e+00, -8.324542320823753e+00, -8.326571403631268e+00, -8.145616618902753e+00, -3.158665114304733e+00, -3.158388747981927e+00, -3.180775432894209e+00, -3.179829138821127e+00, -3.140183133718239e+00, -3.145201293277642e+00, -3.159279203799464e+00, -3.164550957171151e+00, -3.184866554973560e+00, -3.057536465175585e+00, -3.184866554973560e+00, -3.171520232752138e+00, -9.432634197044565e-01, -9.329709951240989e-01, -1.019954541693137e+00, -1.020267824601461e+00, -8.583405317911331e-01, -8.885851128898478e-01, -8.913221529793401e-01, -9.201267706677692e-01, -9.799697498598302e-01, -9.239767039912818e-01, -9.799697498598310e-01, -9.319178346702133e-01, -1.477109890282542e-01, -1.491597402758966e-01, -1.421382161765810e-01, -2.841225933936246e-01, -1.331404139041317e-01, -1.406552303245837e-01, -3.079526625606360e+00, -3.078129959490622e+00, -1.698313834340543e-01, -1.801406204005674e-01, -1.698313834340543e-01, -1.801406204005674e-01, 4.812448218666718e-05, -2.114831470854209e-03, -2.904965472722717e-03, -2.931894540230225e-03, -2.328880732860590e-03, -2.533492545446624e-03, -9.009932614493552e-02, -6.989060204849826e-03, -2.070930001373864e-03, -3.499468650870207e-03, -2.070930001373864e-03, -3.499468650870207e-03, -9.394060536148049e-01, -9.430285652925217e-01, -9.344246028872558e-01, -9.380513919122256e-01, -9.293351878912991e-01, -9.333374659641369e-01, -9.336474584876339e-01, -9.412154543446892e-01, -9.314915599942601e-01, -9.354453446684600e-01, -9.314915599942603e-01, -9.404974830466055e-01, -9.142430690582830e-01, -9.172539501373660e-01, -7.899443013124579e-01, -7.880534873422610e-01, -8.251672616903110e-01, -8.186311330908267e-01, -8.604669446806684e-01, -8.634666056750920e-01, -8.425395850621935e-01, -8.456240164920454e-01, -8.425395850621935e-01, -8.305212147575338e-01, -1.069563689684312e+00, -1.050187742656972e+00, -3.560514770727087e-01, -3.580781771862977e-01, -3.355041957406549e-01, -4.294722847766841e-01, -5.356490707212850e-01, -5.626959781447182e-01, -4.893750985856341e-01, -4.891706987444561e-01, -4.893750985856342e-01, -4.416586754860976e-01, -7.276851000940368e-01, -7.324352511725369e-01, -9.190453110030742e-04, -9.307921677209671e-04, -6.973961042467162e-02, -7.238971533182402e-02, -5.359295449613636e-01, -5.432350674733639e-01, -1.136896996739186e-01, -1.205768627997953e-01, -1.136896996739186e-01, -1.205768627997953e-01, 1.316869299860117e-04, 1.348599990492553e-04, -4.767468070166344e-04, -4.780720659672179e-04, 3.378629710554505e-05, 3.583947985104308e-05, -1.355480862092552e-02, -1.509058594311822e-02, -2.093843167334837e-03, -3.127633039777241e-03, -2.093843167334834e-03, 5.680215438116684e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mtask_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mtask", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.738016237088561e-08, 0.000000000000000e+00, -2.738106440710574e-08, -2.737992018871946e-08, 0.000000000000000e+00, -2.738088838970389e-08, -2.737903381190187e-08, 0.000000000000000e+00, -2.737964992006678e-08, -2.738177957162858e-08, 0.000000000000000e+00, 6.645394619480349e-10, -2.738002645084034e-08, 0.000000000000000e+00, 6.644334570324538e-10, 6.644216625500840e-10, 0.000000000000000e+00, 6.644334570324538e-10, 1.197399897840074e-06, 0.000000000000000e+00, -2.993031544882214e-05, 1.197373665802564e-06, 0.000000000000000e+00, 1.197461396083611e-06, 1.196877414240693e-06, 0.000000000000000e+00, 1.196736731819002e-06, 1.196655992724479e-06, 0.000000000000000e+00, 1.196588509562304e-06, 1.198226094102531e-06, 0.000000000000000e+00, 1.196043479759380e-06, -2.993923022822688e-05, 0.000000000000000e+00, 1.196043479759380e-06, -6.685524550813269e-03, 0.000000000000000e+00, -7.171405398087932e-03, -6.553243355136277e-03, 0.000000000000000e+00, 8.100445301437409e-04, 8.702526473963182e-04, 0.000000000000000e+00, 8.899418471358917e-04, 8.662151035851609e-04, 0.000000000000000e+00, -5.800569485609539e-03, -7.325949067828276e-03, 0.000000000000000e+00, -2.440258304877337e-03, 7.868992953238586e-04, 0.000000000000000e+00, 9.605096182408189e-04, 6.815864414956760e-01, 0.000000000000000e+00, 1.556745176452412e-01, 4.947048469700233e-01, 0.000000000000000e+00, 1.476802457225584e-01, 3.945049964781177e-04, 0.000000000000000e+00, 7.428140573959791e-04, 3.353278979544804e-01, 0.000000000000000e+00, 3.396777023783302e-01, 1.453623778549933e-01, 0.000000000000000e+00, 7.412415742493942e-01, 1.453623778549932e-01, 0.000000000000000e+00, 3.671863951251022e+01, 5.162720445421850e+02, 0.000000000000000e+00, 4.626248809273033e+02, 2.400709610543897e+06, 0.000000000000000e+00, 4.281450930931381e+02, 2.478811890470418e+03, 0.000000000000000e+00, 9.460257594512704e+00, 1.081861197090835e+03, 0.000000000000000e+00, 1.120561619027241e+03, 6.184406392271268e+02, 0.000000000000000e+00, 2.277860638148848e+03, 6.184406392271268e+02, 0.000000000000000e+00, 2.277860638148847e+03, 1.552332484249086e-07, 0.000000000000000e+00, 1.553773669698431e-07, 1.543632186285183e-07, 0.000000000000000e+00, 1.545357382369166e-07, 1.551737310282590e-07, 0.000000000000000e+00, 1.553403512795917e-07, 1.544276842463364e-07, 0.000000000000000e+00, 1.545762567036613e-07, -8.418649523702719e-06, 0.000000000000000e+00, 1.549565303419401e-07, 1.547966271131735e-07, 0.000000000000000e+00, -8.426599818426893e-06, 1.192751031079643e-05, 0.000000000000000e+00, 1.193172605456431e-05, 1.159698276774427e-05, 0.000000000000000e+00, 1.161040087854333e-05, 1.220756570813619e-05, 0.000000000000000e+00, 1.213172480160022e-05, 1.191822490679502e-05, 0.000000000000000e+00, 1.183889642020622e-05, 1.153604783332547e-05, 0.000000000000000e+00, -2.519115797618554e-04, 1.153604783332547e-05, 0.000000000000000e+00, 1.173424053422734e-05, 1.393491936331081e-03, 0.000000000000000e+00, -4.574929850197207e-02, 8.235390222470592e-04, 0.000000000000000e+00, 8.069072694697231e-04, 2.168070163621890e-03, 0.000000000000000e+00, 1.849686149079991e-03, 1.766175284307632e-03, 0.000000000000000e+00, 1.504901690704896e-03, 1.141566275653670e-03, 0.000000000000000e+00, -4.762108597517684e-02, 1.141566275653673e-03, 0.000000000000000e+00, 1.450081010289541e-03, 8.976669277624790e-01, 0.000000000000000e+00, 8.740963356253109e-01, 1.794207802775335e+00, 0.000000000000000e+00, 1.352846611542539e-01, 1.171623037531922e+00, 0.000000000000000e+00, 1.042645936157622e+00, 1.172494094017345e-05, 0.000000000000000e+00, 1.174362708982143e-05, 6.846237931560517e-01, 0.000000000000000e+00, 6.443663420972648e-01, 6.846237931560517e-01, 0.000000000000000e+00, 6.443663420972644e-01, 7.002680075600168e+07, 0.000000000000000e+00, 1.325490288252494e+03, 1.123399894699004e+03, 0.000000000000000e+00, 1.019181139159038e+03, 5.663163945777110e+03, 0.000000000000000e+00, 5.386624916531052e+03, 3.273439956782604e+00, 0.000000000000000e+00, 3.052860683151850e+02, 2.130916644874725e+03, 0.000000000000000e+00, 2.329280552174154e+03, 2.130916644874725e+03, 0.000000000000000e+00, 2.329280552174153e+03, 2.821584179171335e-04, 0.000000000000000e+00, 2.674609337271379e-04, 6.145358210273498e-04, 0.000000000000000e+00, 5.934147827359905e-04, -7.806687160498661e-02, 0.000000000000000e+00, -7.787180485690656e-02, -8.580974124016305e-02, 0.000000000000000e+00, 3.927430544024318e-04, -8.171757069407644e-02, 0.000000000000000e+00, -8.146240331744534e-02, -8.171757069407644e-02, 0.000000000000000e+00, 4.407801328537082e-04, 3.700481546028423e-04, 0.000000000000000e+00, 3.521059719707662e-04, 2.944930286690232e-03, 0.000000000000000e+00, -8.581521873831058e-02, 2.278944034715740e-03, 0.000000000000000e+00, -7.741116252102784e-02, 1.589481222922192e-03, 0.000000000000000e+00, 1.560970960720518e-03, 1.946953566868731e-03, 0.000000000000000e+00, 1.910321080821515e-03, 1.946953566868731e-03, 0.000000000000000e+00, -7.228434125409572e-02, 7.430972176916204e-04, 0.000000000000000e+00, -2.821309945317484e-02, 6.318477842746051e-02, 0.000000000000000e+00, 6.198091430612236e-02, -1.651828322741729e-01, 0.000000000000000e+00, 3.279557587142731e-02, -2.472225478176156e-01, 0.000000000000000e+00, 1.184241060419469e-02, 2.041018214339222e-02, 0.000000000000000e+00, 2.045701277863661e-02, 2.041018214339225e-02, 0.000000000000000e+00, -2.888626914470189e-01, 4.201356823333322e-03, 0.000000000000000e+00, 4.079415583563828e-03, 2.673749404862494e+03, 0.000000000000000e+00, 2.601675520881712e+03, 5.306986990652046e+00, 0.000000000000000e+00, 4.993279620658178e+00, 1.431618658456737e-02, 0.000000000000000e+00, 1.335152011171288e-02, 2.062640389334346e+00, 0.000000000000000e+00, 1.933703546229552e+00, 2.062640389334347e+00, 0.000000000000000e+00, 1.933703546229554e+00, 6.912464694703681e+05, 0.000000000000000e+00, 5.994391309658471e+05, 1.107480640138733e+04, 0.000000000000000e+00, 1.100490475630486e+04, 2.881535118388789e+08, 0.000000000000000e+00, 2.251833676153239e+08, 1.510893932000940e+02, 0.000000000000000e+00, 1.403107884330751e+02, 4.006381693907369e+03, 0.000000000000000e+00, 2.778169385769111e+03, 4.006381693907377e+03, 0.000000000000000e+00, 3.029040389216772e+07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mtask_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mtask", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.281231902991426e-03, 2.281266021462534e-03, 2.281229105591817e-03, 2.281263989500030e-03, 2.281216994201697e-03, 2.281247559097877e-03, 2.281249005058344e-03, 7.490262322944291e-13, 2.281230512575076e-03, 7.490056419594426e-13, 7.489986137309539e-13, 7.490056419594426e-13, 4.871071760717456e-12, 1.229274552737557e-02, 4.870977604175146e-12, 4.871145404277392e-12, 4.869164594516989e-12, 4.868788045534755e-12, 4.869414293211186e-12, 4.869343879105063e-12, 4.872062251224719e-12, 4.867613637900020e-12, 1.229227541716112e-02, 4.867613637900020e-12, 3.605731974655554e-02, 3.701288285578606e-02, 3.579579348881374e-02, 2.567068526852573e-11, 2.622651269393819e-11, 2.638205558178120e-11, 2.617453628971763e-11, 3.432005573593622e-02, 3.743651399013847e-02, 2.901046264188766e-02, 2.546758408172157e-11, 2.690836152970190e-11, 7.510213656675852e-02, 9.596258553189367e-11, 7.870578230660161e-02, 9.475132848912662e-11, 2.133285995767748e-11, 1.801441189108314e-02, 1.037401255962539e-10, 1.069085960980421e-10, 9.398268494518975e-11, 9.872271401885408e-11, 9.398268494518968e-11, 7.262582637354502e-03, 3.534349071230724e-12, 4.123023577638251e-12, 6.214952436870976e-06, 4.898798673940168e-12, 5.057123943542954e-04, 6.339721152432086e-11, 6.784084779515830e-13, 6.530676200763942e-13, 2.526568585743458e-12, 9.031204861550927e-13, 2.526568585743458e-12, 9.031204861550903e-13, 3.028854575299178e-12, 3.029575250899471e-12, 3.027486432099462e-12, 3.028252784576181e-12, 3.028764110043846e-12, 3.029519386847567e-12, 3.027590705083954e-12, 3.028318521445893e-12, 9.956980708357417e-03, 3.028912631332917e-12, 3.028164467383260e-12, 9.959141021560973e-03, 8.739752002903219e-12, 8.738697126700926e-12, 8.660757419339796e-12, 8.662015279067703e-12, 8.807045342096561e-12, 8.786842994993502e-12, 8.738387677982234e-12, 8.717251232758367e-12, 8.645100749344367e-12, 1.985774648236364e-02, 8.645100749344367e-12, 8.691335457804003e-12, 2.806479241214207e-11, 8.219421036269191e-02, 2.506076293614610e-11, 2.500692315045234e-11, 3.172322180562741e-11, 3.027226331293763e-11, 2.979334518088680e-11, 2.860129339157643e-11, 2.670902136637753e-11, 8.306192284626635e-02, 2.670902136637751e-11, 2.833894182754602e-11, 1.040277558552645e-10, 1.040586128635488e-10, 4.042285454232101e-02, 8.970934151398243e-11, 1.020601007523101e-10, 1.052212104348118e-10, 8.502204855307037e-12, 8.505667026703112e-12, 1.130863803599726e-10, 1.206896012680903e-10, 1.130863803599726e-10, 1.206896012680904e-10, 2.540171255411236e-07, 2.202738491454673e-13, 5.774137577118063e-13, 5.335144339283494e-13, 1.676025546995725e-12, 2.140159774428698e-12, 9.431469547664867e-11, 2.831690245229104e-03, 3.544157968735714e-13, 2.600929234630105e-12, 3.544157968735712e-13, 2.600929234630095e-12, 2.614160908766990e-11, 2.603378270576665e-11, 2.654213283066190e-11, 2.642844234251202e-11, 1.275248793267856e-01, 1.286195983098820e-01, 1.402395567820255e-01, 2.617476421939522e-11, 1.335162886350532e-01, 1.345820154262836e-01, 1.335162886350532e-01, 2.623170904020564e-11, 2.689786296653329e-11, 2.680069720290344e-11, 3.396629870019343e-11, 9.476005898012797e-02, 3.174342498187919e-11, 9.384993709645634e-02, 2.964166557252819e-11, 2.952741856480425e-11, 3.068901374823266e-11, 3.055786499343158e-11, 3.068901374823268e-11, 9.189463680399906e-02, 2.414460294096945e-11, 7.258948335206185e-02, 7.632962948152308e-11, 7.599399092635655e-11, 7.903513036422949e-02, 6.495496993865537e-11, 1.092504507937452e-01, 4.910022923537027e-11, 5.704457795385287e-11, 5.705978836871781e-11, 5.704457795385283e-11, 1.016243808800364e-01, 3.745199433297965e-11, 3.710747893348712e-11, 5.030501055744632e-04, 5.031765768659201e-04, 7.332310719744673e-11, 7.687005005778461e-11, 5.097343208111698e-11, 4.972645383968850e-11, 1.130313352999632e-10, 1.229013880621546e-10, 1.130313352999633e-10, 1.229013880621546e-10, 7.358488233276167e-06, 8.069868913406925e-06, 1.068456079974012e-14, 1.071549101304337e-14, 3.654951306264108e-07, 4.658748922535803e-07, 5.912255785368883e-03, 6.910498800303506e-03, 7.665514320976409e-13, 2.131188980240250e-12, 7.665514320976395e-13, 2.776615506596421e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
