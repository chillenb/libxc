
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mtask_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mtask", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.509492818820364e+01, -2.509502064963010e+01, -2.509565444548398e+01, -2.509428735932381e+01, -2.509497187162158e+01, -2.509497187162158e+01, -3.309239701391492e+00, -3.309460997779357e+00, -3.315638949276741e+00, -3.316374952886320e+00, -3.314720465817417e+00, -3.314720465817417e+00, -4.619809220421170e-01, -4.604630603392268e-01, -4.279031972790223e-01, -4.575301153696835e-01, -4.588884504112624e-01, -4.588884504112624e-01, -1.810964620959447e-01, -1.816190632932543e-01, -3.207938263705890e-01, -8.373740414486636e-02, -1.542977084560528e-01, -1.542977084560527e-01, -3.593626461957222e-03, -3.868072696818532e-03, -2.734650541434956e-02, -1.683371622653759e-03, -2.718867976825574e-03, -2.718867976825574e-03, -6.221135221926946e+00, -6.222437694289271e+00, -6.221361869723240e+00, -6.222504322233116e+00, -6.221709963662541e+00, -6.221709963662541e+00, -2.120067402747905e+00, -2.159320059119208e+00, -2.122811024334095e+00, -2.160288013626466e+00, -2.140859980527324e+00, -2.140859980527324e+00, -6.253386926075100e-01, -6.866452970945945e-01, -5.393657481740510e-01, -5.620514614958714e-01, -6.415116004668493e-01, -6.415116004668493e-01, -5.403620864212814e-02, -1.690623253785666e-01, -4.944420227373277e-02, -1.940400138229904e+00, -8.188445758024415e-02, -8.188445758024424e-02, -1.207829164854704e-03, -1.656718613079215e-03, -1.363898570609518e-03, -3.716864174971154e-02, -1.741818098954021e-03, -1.741818098954021e-03, -6.913366191583299e-01, -6.874080338748185e-01, -6.887971414301963e-01, -6.899334833476386e-01, -6.893586910829372e-01, -6.893586910829372e-01, -6.614289135955773e-01, -5.693547607881720e-01, -5.949568594624550e-01, -6.209804856345886e-01, -6.066004350121035e-01, -6.066004350121034e-01, -7.059917181900830e-01, -2.311225449375520e-01, -2.694607165958046e-01, -3.440043582097119e-01, -3.083168441737842e-01, -3.083168441737842e-01, -4.820320890758014e-01, -2.689712732704297e-02, -3.352427266000710e-02, -3.437925214482036e-01, -4.620251222269262e-02, -4.620251222269263e-02, -5.558973751634180e-03, -3.060469215792416e-04, -8.099027261953627e-04, -5.058647822850417e-02, -1.578229309330469e-03, -1.578229309330467e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mtask_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mtask", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.836156330883769e+01, -2.835737867920466e+01, -2.836179822696480e+01, -2.835754982601065e+01, -2.836178213742143e+01, -2.835774168407294e+01, -2.835910781844655e+01, -2.835433638811261e+01, -2.836172623300126e+01, -2.835513516705128e+01, -2.836172623300126e+01, -2.835513516705128e+01, -5.139945494971650e+00, -5.140890330505381e+00, -5.139911389661744e+00, -5.140958642311416e+00, -5.140326762284483e+00, -5.140725854796116e+00, -5.136135604218314e+00, -5.137182152603153e+00, -5.139095950856366e+00, -5.137587316036201e+00, -5.139095950856366e+00, -5.137587316036201e+00, -9.421685742752198e-01, -9.541731447349714e-01, -9.379619284242773e-01, -9.525113896444256e-01, -8.772165080253951e-01, -8.559815731838931e-01, -8.779014663514996e-01, -8.859303358218367e-01, -9.702897584907342e-01, -7.389349058191288e-01, -9.702897584907342e-01, -7.389349058191288e-01, -6.613121557231183e-02, -7.293810374576271e-03, -7.953907441191915e-02, -5.165535612952932e-02, -8.683159478135405e-01, -9.856028835850629e-01, 6.398762755689506e-03, 4.465455819738397e-02, -7.561987079848224e-02, 2.307026649138447e-02, -7.561987079848217e-02, 2.307026649138462e-02, -6.109966348364485e-03, -6.392962720504174e-03, -6.522719680145218e-03, -7.047936199800228e-03, -2.575619135420617e-02, -2.319204261929650e-02, -3.135059574816682e-03, -3.058272596428379e-03, -5.303001121981677e-03, -2.723779387191361e-03, -5.303001121981676e-03, -2.723779387191362e-03, -7.092601734291258e+00, -7.089348773054841e+00, -7.103897753486606e+00, -7.100273485520565e+00, -7.092736937134944e+00, -7.089368878976047e+00, -7.102450937863996e+00, -7.099313367490661e+00, -7.098763162740817e+00, -7.094900984947539e+00, -7.098763162740817e+00, -7.094900984947539e+00, -2.197116986572582e+00, -2.183050286273556e+00, -2.159758480666962e+00, -2.143825183623348e+00, -2.057569561971840e+00, -2.085846791897855e+00, -1.996518769837839e+00, -2.025935221757432e+00, -2.269660229336133e+00, -2.177943508714526e+00, -2.269660229336133e+00, -2.177943508714526e+00, -8.507269002528726e-01, -8.476395677654379e-01, -9.774327674406993e-01, -9.784948705947897e-01, -7.816277319791005e-01, -8.055817000937542e-01, -8.613321495743953e-01, -8.827729292967116e-01, -8.891765476758753e-01, -8.478646120683975e-01, -8.891765476758751e-01, -8.478646120683976e-01, 4.940559114063003e-02, 4.377234524910602e-02, 2.814942079853949e-02, 2.601961266296637e-02, 2.774771625701522e-02, 4.386976265945711e-02, -2.977653736938324e+00, -2.976332159026206e+00, 8.805611084900111e-02, 9.400520082718285e-02, 8.805611084900156e-02, 9.400520082718335e-02, -2.193084277931323e-03, -2.281069470235979e-03, -3.025466171315682e-03, -3.066169568933600e-03, -2.372309397528145e-03, -2.580204324109030e-03, -3.090053344040587e-03, 9.083762635598078e-03, -2.303495986580835e-03, -3.496454467139218e-03, -2.303495986580835e-03, -3.496454467139219e-03, -9.250322440111770e-01, -9.289999351508393e-01, -8.902108714130542e-01, -8.943282090750447e-01, -9.025134175619576e-01, -9.066484104798886e-01, -9.127153822351731e-01, -9.166628756304819e-01, -9.076290355049815e-01, -9.116641475796362e-01, -9.076290355049815e-01, -9.116641475796364e-01, -9.083615087797784e-01, -9.115384944467565e-01, -5.096481187931077e-01, -5.144256301564292e-01, -6.484719211996074e-01, -6.536032591822141e-01, -7.652703573434250e-01, -7.685833533156433e-01, -7.126164354451408e-01, -7.146203943479662e-01, -7.126164354451408e-01, -7.146203943479662e-01, -1.023519938497325e+00, -1.025283712490769e+00, -3.670030579450287e-02, -4.327584352401932e-02, -1.999579848841275e-01, -2.086812981186146e-01, -4.564712241687616e-01, -4.605705461381956e-01, -3.303841535433115e-01, -3.316410384611389e-01, -3.303841535433115e-01, -3.316410384611389e-01, -5.932456100534832e-01, -5.962877199017267e-01, -1.484074476884745e-02, -1.919089042074171e-02, -1.886896675595784e-02, -1.593899410559099e-02, -4.650519195033495e-01, -4.663267553753798e-01, 3.549813286247255e-02, 5.096827630866210e-02, 3.549813286247248e-02, 5.096827630866213e-02, -9.445145493998920e-03, -9.868478656906873e-03, -5.628235482449694e-04, -5.975063138894370e-04, -1.436276747540991e-03, -1.571187084154261e-03, 4.512225779655008e-02, 1.351305442536471e-01, -2.275208234987088e-03, -3.129198468160506e-03, -2.275208234987086e-03, -3.129198468160503e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mtask_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mtask", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.953069258912978e-08, 0.000000000000000e+00, -7.958502505792876e-08, -7.953039352133055e-08, 0.000000000000000e+00, -7.958480044863604e-08, -7.953595398475307e-08, 0.000000000000000e+00, -7.959094105428559e-08, -7.953969452765609e-08, 0.000000000000000e+00, -7.959562807170225e-08, -7.953039168540035e-08, 0.000000000000000e+00, -7.959851426673264e-08, -7.953039168540035e-08, 0.000000000000000e+00, -7.959851426673264e-08, -3.963538790104517e-05, 0.000000000000000e+00, -3.962600868917624e-05, -3.963638209516085e-05, 0.000000000000000e+00, -3.962579139235610e-05, -3.964430243265566e-05, 0.000000000000000e+00, -3.964114504632598e-05, -3.967466466577104e-05, 0.000000000000000e+00, -3.966238761922863e-05, -3.965965541691320e-05, 0.000000000000000e+00, -3.966629941463757e-05, -3.965965541691320e-05, 0.000000000000000e+00, -3.966629941463757e-05, -1.991901163827868e-02, 0.000000000000000e+00, -1.963345892218788e-02, -2.007994057493211e-02, 0.000000000000000e+00, -1.965516012641217e-02, -2.196752179426035e-02, 0.000000000000000e+00, -2.345267733665053e-02, -2.412190236434175e-02, 0.000000000000000e+00, -2.410792471044287e-02, -1.838349646991287e-02, 0.000000000000000e+00, -3.188351639434066e-02, -1.838349646991287e-02, 0.000000000000000e+00, -3.188351639434066e-02, -8.088308167990773e+00, 0.000000000000000e+00, -1.028813321732944e+01, -7.715723059279017e+00, 0.000000000000000e+00, -8.639825610947437e+00, -1.675691550625164e-03, 0.000000000000000e+00, -2.472636815183772e-03, -1.078259528174692e+01, 0.000000000000000e+00, -1.593202307059964e+01, -6.802813774498979e+00, 0.000000000000000e+00, -9.995258651423965e+00, -6.802813774498974e+00, 0.000000000000000e+00, -9.995258651423962e+00, 4.796638451946960e+02, 0.000000000000000e+00, 2.749486621743889e+02, 4.633582702254739e+02, 0.000000000000000e+00, 3.627945131442956e+02, -2.359526894507280e+01, 0.000000000000000e+00, -3.217818122570468e+01, 1.237266616379794e+03, 0.000000000000000e+00, 1.255323996601731e+03, 6.291697460380290e+02, 0.000000000000000e+00, 2.938533912195644e+03, 6.291697460380296e+02, 0.000000000000000e+00, 2.938533912195646e+03, -2.650461939348015e-05, 0.000000000000000e+00, -2.655113268794466e-05, -2.648310568954078e-05, 0.000000000000000e+00, -2.653028154068323e-05, -2.651166751336881e-05, 0.000000000000000e+00, -2.655636988522737e-05, -2.649287489698422e-05, 0.000000000000000e+00, -2.653710654757377e-05, -2.648736679684019e-05, 0.000000000000000e+00, -2.653961727726734e-05, -2.648736679684019e-05, 0.000000000000000e+00, -2.653961727726734e-05, -5.588242547361304e-04, 0.000000000000000e+00, -5.686403506346638e-04, -5.943009470465857e-04, 0.000000000000000e+00, -6.050349160959305e-04, -6.181494339591187e-04, 0.000000000000000e+00, -6.099291700739218e-04, -6.652916591857673e-04, 0.000000000000000e+00, -6.567901785741359e-04, -5.396191890228663e-04, 0.000000000000000e+00, -5.810560211619838e-04, -5.396191890228663e-04, 0.000000000000000e+00, -5.810560211619838e-04, -5.373364973399586e-02, 0.000000000000000e+00, -5.517221961354513e-02, -3.826842038829967e-02, 0.000000000000000e+00, -3.887122466379141e-02, -7.269793060512228e-02, 0.000000000000000e+00, -6.358291284971444e-02, -5.846451437132203e-02, 0.000000000000000e+00, -5.211662884452221e-02, -5.077680468540061e-02, 0.000000000000000e+00, -5.535369378968388e-02, -5.077680468540061e-02, 0.000000000000000e+00, -5.535369378968379e-02, -2.277242552096028e+01, 0.000000000000000e+00, -2.089555080154445e+01, -7.086781864506416e+00, 0.000000000000000e+00, -6.961674057107257e+00, -2.070776752108873e+01, 0.000000000000000e+00, -2.453643954032222e+01, -4.126442260607933e-04, 0.000000000000000e+00, -4.133981726405522e-04, -2.938655396334396e+01, 0.000000000000000e+00, -3.421859295112435e+01, -2.938655396334402e+01, 0.000000000000000e+00, -3.421859295112441e+01, 2.480722437885878e+03, 0.000000000000000e+00, 2.138224777273311e+03, 1.472297632068366e+03, 0.000000000000000e+00, 1.371315377883038e+03, 6.475034933342239e+03, 0.000000000000000e+00, 6.183002356821547e+03, -2.620025284488656e+01, 0.000000000000000e+00, -4.347420079817367e+01, 4.239412221230078e+03, 0.000000000000000e+00, 2.355830923985218e+03, 4.239412221230071e+03, 0.000000000000000e+00, 2.355830923985217e+03, -1.274079365307641e-01, 0.000000000000000e+00, -1.262080859829519e-01, -1.318440346263746e-01, 0.000000000000000e+00, -1.305326695634467e-01, -1.302460556127032e-01, 0.000000000000000e+00, -1.289784169106270e-01, -1.289601472983598e-01, 0.000000000000000e+00, -1.277133697833074e-01, -1.295823725227269e-01, 0.000000000000000e+00, -1.283320331891652e-01, -1.295823725227269e-01, 0.000000000000000e+00, -1.283320331891651e-01, -1.153492035573869e-01, 0.000000000000000e+00, -1.154040677486862e-01, -2.587179204557372e-01, 0.000000000000000e+00, -2.553791784330966e-01, -1.990094668586691e-01, 0.000000000000000e+00, -1.966287754258715e-01, -1.569886719141640e-01, 0.000000000000000e+00, -1.551916468531098e-01, -1.721700486597648e-01, 0.000000000000000e+00, -1.720042937821808e-01, -1.721700486597648e-01, 0.000000000000000e+00, -1.720042937821808e-01, -2.954670576795118e-02, 0.000000000000000e+00, -2.983936810921747e-02, -3.431549156202430e+00, 0.000000000000000e+00, -3.328459450546203e+00, -1.478569352668774e+00, 0.000000000000000e+00, -1.426688341900409e+00, -4.366889063921893e-01, 0.000000000000000e+00, -4.264615469095120e-01, -8.046947547991798e-01, 0.000000000000000e+00, -8.053627497959679e-01, -8.046947547991800e-01, 0.000000000000000e+00, -8.053627497959681e-01, -1.632243028916125e-01, 0.000000000000000e+00, -1.649188628241180e-01, -7.249112692628074e+01, 0.000000000000000e+00, -5.398367978067887e+01, -2.595900464598907e+01, 0.000000000000000e+00, -2.881508684973499e+01, -4.987509597409099e-01, 0.000000000000000e+00, -4.946613884039623e-01, -4.379467344291391e+01, 0.000000000000000e+00, -5.379732917248177e+01, -4.379467344291378e+01, 0.000000000000000e+00, -5.379732917248180e+01, 2.202647219497000e+02, 0.000000000000000e+00, 2.061211502275957e+02, 2.883029352901714e+04, 0.000000000000000e+00, 4.009788588912622e+04, 6.581578070685527e+03, 0.000000000000000e+00, 6.133335255908940e+03, -5.967132173790358e+01, 0.000000000000000e+00, -1.189857789873397e+02, 6.968739984572792e+03, 0.000000000000000e+00, 2.825290137437915e+03, 6.968739984572811e+03, 0.000000000000000e+00, 2.825290137437925e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mtask_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mtask", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mtask_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mtask", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [6.219525794626468e-03, 6.223637455170968e-03, 6.219560418785888e-03, 6.223662078645272e-03, 6.220179652836915e-03, 6.224407049553338e-03, 6.219815886986125e-03, 6.223936779771642e-03, 6.219536490807296e-03, 6.224496159288971e-03, 6.219536490807296e-03, 6.224496159288971e-03, 1.478351085085194e-02, 1.478181608276169e-02, 1.478361741040668e-02, 1.478172752727449e-02, 1.478360674037474e-02, 1.478294207285565e-02, 1.479028524198058e-02, 1.478837555545198e-02, 1.478582416755198e-02, 1.478792141478330e-02, 1.478582416755198e-02, 1.478792141478330e-02, 5.806635253649196e-02, 5.827858884856460e-02, 5.809681537905694e-02, 5.821087834001295e-02, 5.763773333710644e-02, 5.900150862997213e-02, 6.213187017769079e-02, 6.262398588362195e-02, 5.699012344964659e-02, 6.855567936265314e-02, 5.699012344964659e-02, 6.855567936265314e-02, 3.166809090760979e-01, 4.534067259403489e-01, 3.134568164193951e-01, 4.018759546876339e-01, 2.039602605461045e-02, 2.498221420275711e-02, 1.695685023601571e-01, 2.813641700559301e-01, 3.029059525735823e-01, 3.549478924583941e-02, 3.029059525735820e-01, 3.549478924583964e-02, 4.620931354281546e-05, 3.341611894105381e-04, 2.527424491315834e-05, 1.193703875988075e-04, 4.859402095051897e-03, 8.745278018716688e-03, 1.202582783636238e-08, 1.440360444997598e-08, 2.420420338595712e-06, 6.974538083581639e-09, 2.420420338595463e-06, 6.974538083583714e-09, 2.987754513392851e-02, 2.990799681822212e-02, 2.986911731275649e-02, 2.989981433758781e-02, 2.988625944951514e-02, 2.991434228927014e-02, 2.987866442416675e-02, 2.990655745624343e-02, 2.986628560134197e-02, 2.990272891054703e-02, 2.986628560134197e-02, 2.990272891054703e-02, 3.432361376702862e-02, 3.489423612537797e-02, 3.718690426408214e-02, 3.780241622417484e-02, 3.710800621706967e-02, 3.682554117079607e-02, 4.058227218605508e-02, 4.029819598748954e-02, 3.406081670514625e-02, 3.607845486470929e-02, 3.406081670514625e-02, 3.607845486470929e-02, 9.255661460420919e-02, 9.406036672040757e-02, 8.369723283902704e-02, 8.489471936962777e-02, 9.684805329903518e-02, 9.307976839638898e-02, 8.922509134311650e-02, 8.642403351384252e-02, 9.718718663133667e-02, 9.229235503140043e-02, 9.718718663133667e-02, 9.229235503140029e-02, 1.165040828401474e-01, 1.076878990596465e-01, 2.911288787327054e-01, 2.900965858139624e-01, 7.048003231136714e-02, 1.070476687234473e-01, 2.563536190303149e-02, 2.564627422117308e-02, 2.469313272422089e-01, 3.527673472640477e-01, 2.469313272422095e-01, 3.527673472640486e-01, 1.733518883503058e-10, 2.021573972977738e-10, 3.026223333078760e-09, 2.337562873216479e-09, 5.135629634971833e-08, 8.308730365008954e-08, 2.190525987424652e-02, 5.053790190962616e-02, 3.977825624480925e-10, 3.163313418768090e-06, 3.977825624475059e-10, 3.163313418768143e-06, 2.071804825637707e-01, 2.075776241798963e-01, 2.112577533161046e-01, 2.115681906117389e-01, 2.097992714885018e-01, 2.101512668821373e-01, 2.086200777138235e-01, 2.089666972988717e-01, 2.091801667477576e-01, 2.095396835236298e-01, 2.091801667477576e-01, 2.095396835236298e-01, 1.737259005346556e-01, 1.754603767264812e-01, 2.471544169104589e-01, 2.471270194747081e-01, 2.187789932792526e-01, 2.190086373562028e-01, 1.971336125029219e-01, 1.969148281341150e-01, 2.024723535844196e-01, 2.044350704004516e-01, 2.024723535844195e-01, 2.044350704004514e-01, 7.548264822921627e-02, 7.625169571411529e-02, 2.870483768196451e-01, 2.833327392374917e-01, 2.146808251678426e-01, 2.136638662088395e-01, 1.541528832316484e-01, 1.532084900774155e-01, 1.830514486550945e-01, 1.830746749694325e-01, 1.830514486550946e-01, 1.830746749694324e-01, 1.258603797864903e-01, 1.294028834956328e-01, 2.018594213173808e-02, 1.477063253816067e-02, 1.208362259594046e-02, 1.556734171571912e-02, 1.577545713035021e-01, 1.610631975216038e-01, 1.023242801206197e-01, 1.548898065915449e-01, 1.023242801206194e-01, 1.548898065915450e-01, 5.323931905732919e-07, 5.950057757676600e-07, 1.860361701279718e-13, 2.391572000228044e-13, 4.368232857548550e-09, 7.024782019933015e-09, 1.278383722484081e-01, 2.946207118306833e-01, 1.905132874208842e-09, 1.814299833007155e-06, 1.905132874211417e-09, 1.814299833007092e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
