
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mn12_l_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mn12_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-8.783435898026381e+00, -8.783509943137918e+00, -8.783825086244658e+00, -8.782728131397883e+00, -8.783304292929518e+00, -8.783304292929518e+00, -3.362088736368620e+00, -3.361613196272103e+00, -3.349047392245492e+00, -3.354473760707221e+00, -3.353518801678441e+00, -4.119338915019728e+00, -4.027367151381995e-01, -5.816531797380344e-01, -5.319635580650527e-01, -5.540463031708960e-01, -5.492032820428473e-01, -5.492032820428473e-01, -2.368002894054616e-01, -2.390151016490111e-01, 2.129590256417564e-02, -1.891539009919889e-01, -2.081188525585421e-01, -2.081188525585422e-01, -2.552119720853546e-02, -2.681065656827113e-02, -1.185704604780397e-01, -1.494518154944592e-02, -1.868903978242223e-02, -1.868903978242223e-02, -7.529268892098499e+00, -7.532589136621254e+00, -7.529456408813346e+00, -3.089252174038754e+00, -7.530972343977076e+00, -7.530972343977076e+00, -1.894922182679228e+00, -1.900272798168209e+00, -1.887618325367155e+00, -1.896436186756064e+00, -1.899528209969939e+00, -2.134465118768900e+00, -6.105837056714293e-01, -7.145506781856182e-01, -5.393627837808972e-01, -5.850818760319347e-01, -6.311009421761579e-01, -5.406451915371266e-01, -3.029284990724520e-03, -2.278507550772890e-01, -2.088721908381073e-03, -2.345936791113715e+00, -1.699939846672784e-01, -1.699939846672789e-01, 6.417046228265786e-04, -1.461690657441394e-02, -1.120556209267003e-02, 8.594165261120713e-04, 7.384916071080605e-04, -1.347191602876658e-02, -2.381325513420930e-01, -4.559106222392907e-01, -3.344371123480490e-01, -3.325536430635176e-01, -3.653027718714840e-01, -3.653027718714840e-01, -2.685637906148361e-01, -4.911607540684789e-01, -5.347009373653023e-01, -5.691327252572487e-01, -5.568779995940414e-01, -4.990292877758797e-01, -7.546053984485837e-01, -8.632014724445847e-02, -3.056921507117868e-01, -2.711888871078063e-01, -3.276767054955489e-01, -3.276767054955488e-01, -3.806485350399041e-01, -1.151026574037866e-01, -1.393509589251484e-01, -3.328514207048160e-01, -2.468080501958566e-03, -1.532951355649944e-01, -3.558440406545162e-02, -3.952166358534320e-03, -8.256485875389748e-03, -1.499633521621614e-01, -1.247743039767910e-02, -1.247743039767910e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mn12_l_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mn12_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.420063997647747e+01, -1.420183998979441e+01, -1.420671754165502e+01, -1.418894928591988e+01, -1.419832420617214e+01, -1.419832420617214e+01, -1.492464234094171e+00, -1.490276907450377e+00, -1.433227450570037e+00, -1.456144523735798e+00, -1.453674483876988e+00, -5.035489904646179e+00, -1.341167785664659e+00, -9.654833533757258e-01, -1.005414627662448e+00, -9.798843051070314e-01, -9.858441153682892e-01, -9.858441153682892e-01, -2.372979920063867e-01, -2.299660248897669e-01, -1.811821969018889e+00, -2.268458960965365e-01, -2.662517072935772e-01, -2.662517072935785e-01, -3.353136377504231e-02, -3.517498824063043e-02, -1.242147702885080e-01, -1.980720090468509e-02, -2.469466550850903e-02, -2.469466550850903e-02, -6.455429018699290e+00, -6.403490733583598e+00, -6.452456239023087e+00, -5.285034957315075e+00, -6.429535071409887e+00, -6.429535071409887e+00, -2.313883300356832e+00, -2.101001775614589e+00, -2.489359177196993e+00, -2.289408511298417e+00, -2.112390976129674e+00, -3.122804019172362e+00, -9.072298184874752e-01, -9.029120214923996e-01, -7.067658841959666e-01, -8.654946033570250e-01, -9.481475475101526e-01, -8.301109417485637e-01, -2.203106993984763e-02, -3.068417098630584e-01, -1.742128824340124e-02, -3.161879225232346e+00, -1.660087642974205e-01, -1.660087642974233e-01, 8.383408208045884e-04, -1.937841900232691e-02, -1.484724593535218e-02, -4.875512282753071e-03, 9.601896348276556e-04, -1.784655172565819e-02, 2.192642048902420e-01, -1.003629055396905e-01, 5.383016719240022e-02, 1.106315948864171e-01, 6.357890584288668e-02, 6.357890584288668e-02, 1.608655164111367e-01, -6.604288329728496e-01, -7.833999423060972e-01, -7.040163574694581e-01, -7.875552168866724e-01, -7.092118819536900e-01, -1.065693264838307e+00, -2.838217385086587e-01, -2.746323397964693e-01, -5.087148630549831e-01, -2.576051839932328e-01, -2.576051839932330e-01, -6.369687968475011e-01, -1.226695862189188e-01, -1.280447623752077e-01, -3.282916004892016e-01, -1.607940572597593e-02, -9.789404281125673e-02, -4.648087722560180e-02, -5.263689029594587e-03, -1.097290925091771e-02, -9.600497123477530e-02, -1.653203894728154e-02, -1.653203894728139e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mn12_l_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mn12_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.447639131658668e-07, -1.447676978794549e-07, -1.447818659762070e-07, -1.447259722335618e-07, -1.447556309637634e-07, -1.447556309637634e-07, 3.330748038925276e-06, 3.308658293525392e-06, 2.721640679744442e-06, 2.958692812967768e-06, 2.934732022376294e-06, -2.054079645245359e-05, 3.166411608542439e-03, -4.993546546062533e-03, -4.205913690013835e-03, -4.695864159604797e-03, -4.585742458077054e-03, -4.585742458077054e-03, -9.399523956421947e-01, -9.941984130051416e-01, -6.773852407808409e-03, -2.369076900439624e-01, -3.665525221045060e-01, -3.665525221045080e-01, -3.537948805487567e+01, -3.676936874903943e+01, -1.255488578806174e+01, -2.644499430872861e+01, -3.657575668423296e+01, -3.657575668423296e+01, -4.377700200223427e-05, -4.407385789058511e-05, -4.379428312652061e-05, -5.194469796810072e-05, -4.392540447879909e-05, -4.392540447879909e-05, 1.542049074705888e-04, 1.329952912844109e-04, 1.695873601249273e-04, 1.516812188214973e-04, 1.343761955736606e-04, -1.298284554851105e-04, -1.684909319361782e-02, -2.453683494014531e-02, -2.024995282146701e-02, -1.836870956603022e-02, -1.707846874272096e-02, -2.129581399410357e-02, -1.567873797078483e+02, -1.477675042830895e-01, -2.188432250746115e+02, -6.158189923174174e-04, -9.640970416290487e-01, -9.640970416290610e-01, -2.414173324134366e+08, -2.339163860788993e+01, -1.896621992540968e+02, -1.144153292744797e+03, -1.300848932929458e+08, -7.261239130676066e+01, -9.086526060069527e-02, -6.120976834084234e-02, -9.251326519888700e-02, -7.844107725080031e-02, -7.401150720061128e-02, -7.401150720061128e-02, -8.742165970213263e-02, -2.666976082181874e-02, -2.089827128827642e-02, -2.563752636091933e-02, -2.123668157357759e-02, -4.302256740346594e-02, -1.878684748818546e-02, -1.817742445559107e+00, -2.642017711406801e-01, -1.624299773402646e-02, -2.152161858720746e-01, -2.152161858720748e-01, -5.169694451353633e-04, -1.306215337555821e+01, -9.267415115489843e+00, -1.205498127151684e-01, -4.075480192105496e+02, -5.707443103918044e+00, -1.664432245190747e+01, -2.906218113835632e+01, -8.281613097508820e+01, -7.067104924744480e+00, -1.036049697644745e+02, -1.036049697647369e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mn12_l_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mn12_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.645223943432986e-03, 1.645912191029947e-03, 1.648691477968689e-03, 1.638503646436349e-03, 1.643881087559532e-03, 1.643881087559532e-03, -2.311925019808518e-02, -2.313621569278706e-02, -2.358033083377919e-02, -2.340058767153460e-02, -2.342099149464202e-02, 1.746602146595565e-02, 7.571933193976645e-02, 6.031081286701542e-02, 6.063108252713800e-02, 6.074260986949033e-02, 6.074810500045917e-02, 6.074810500045917e-02, 7.895275740816396e-02, 8.128224514702143e-02, 7.860707936733867e-02, 1.691440573313042e-02, 4.375863234594488e-02, 4.375863234594538e-02, -3.295178854396510e-05, -3.997420378234796e-05, -2.504479510077222e-03, -4.704886700619380e-06, -1.294952902671460e-05, -1.294952902671460e-05, 1.041269875398005e-01, 1.040324079111005e-01, 1.041221971474241e-01, 1.997170872850871e-02, 1.040821000201710e-01, 1.040821000201710e-01, -6.012417871138008e-03, -1.040999008286601e-02, -2.467961144250832e-03, -6.527268966330242e-03, -1.016183004832614e-02, 2.884172058293087e-02, 1.140650315985098e-01, 7.577612990356050e-02, 7.495242957959919e-02, 1.103966790142461e-01, 1.247993204062941e-01, 5.965047678237775e-02, 1.241509691165159e-02, 4.242341996303974e-02, 1.008203033087526e-02, 1.099131734279615e-01, 4.254611874707825e-03, 4.254611874708120e-03, 3.964520708156907e-07, -3.887064818326666e-06, -1.405237698064316e-05, 3.733573090186490e-03, 2.490255655142265e-06, -9.422972340814599e-06, -1.812577159598643e+00, -9.125704013624867e-01, -1.267523457648151e+00, -1.434634263122597e+00, -1.299774960053105e+00, -1.299774960053105e+00, -1.676058471886894e+00, 7.714450323230299e-02, 9.397372631119129e-02, -2.658344550010261e-02, 7.117232117643099e-02, 4.148280662080878e-02, 1.420705658834729e-01, 9.801645773366298e-02, 7.123018485686521e-02, 8.788882340026730e-02, 6.197529246759179e-02, 6.197529246759160e-02, 5.992963053870438e-02, -2.274399691817336e-03, -4.238227124965755e-03, 1.886348294197826e-02, 1.038048522762697e-02, -1.027224928367215e-02, -4.392708777610504e-05, -9.146347038179179e-08, -2.418692214129671e-06, -1.064939956094513e-02, -1.064340577726942e-05, -1.064340577737670e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
