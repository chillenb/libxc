
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mn12_l_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mn12_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.851083886620355e+01, -2.851112266788580e+01, -2.851296954322082e+01, -2.850878434360355e+01, -2.851089315883263e+01, -2.851089315883263e+01, -3.547193628904364e+00, -3.547093010346804e+00, -3.544697710599112e+00, -3.548382208886143e+00, -3.546597483326323e+00, -3.546597483326323e+00, -4.436012086516851e-01, -4.417470132084610e-01, -4.020620150065531e-01, -4.317097189412890e-01, -4.237643564654041e-01, -4.237643564654041e-01, -2.331545216653325e-01, -2.341790597957591e-01, -1.139687417543136e-01, -1.863960874024053e-01, -2.043018927485055e-01, -2.043018927485055e-01, -2.552043653897580e-02, -2.680899492178572e-02, -1.175324367222783e-01, -1.494332761949205e-02, -1.868649679419856e-02, -1.868649679419856e-02, -7.502940483130540e+00, -7.506391980511671e+00, -7.503666055537548e+00, -7.506691629106551e+00, -7.504436210670566e+00, -7.504436210670566e+00, -2.043624424594221e+00, -2.084008376037653e+00, -2.025235644367847e+00, -2.063513575257814e+00, -2.073989519307750e+00, -2.073989519307750e+00, -5.791281675245525e-01, -6.423911910429404e-01, -4.927750861188142e-01, -5.253423520905854e-01, -5.992097200724340e-01, -5.992097200724340e-01, -1.650292176854546e-01, -2.265974805714783e-01, -1.620864007241068e-01, -1.574631995297844e+00, -1.679416372735248e-01, -1.679416372735253e-01, -1.157383075004839e-02, -1.461296734422801e-02, -1.120315969006690e-02, -1.454757890357644e-01, -1.346719268608292e-02, -1.346719268608290e-02, -2.189679582071800e-01, -4.435739327854761e-01, -3.806668503349039e-01, -3.162656893074964e-01, -3.500282739588960e-01, -3.500282739588960e-01, -2.351998278572945e-01, -4.879855364940999e-01, -5.308785907218561e-01, -5.623465701604561e-01, -5.518897724976273e-01, -5.518897724976273e-01, -6.660583304063866e-01, -2.686261355708932e-01, -2.949239783312188e-01, -3.237728833944578e-01, -3.082853584183988e-01, -3.082853584183989e-01, -4.287649788354932e-01, -1.146508126212954e-01, -1.371415709150404e-01, -3.131961940704239e-01, -1.491348303598295e-01, -1.491348303598293e-01, -3.553069000137075e-02, -3.951709741373244e-03, -8.256197747870991e-03, -1.474397477366752e-01, -1.247424273377822e-02, -1.247424273377820e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mn12_l_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mn12_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.970764582725499e+01, -2.970788012623886e+01, -2.970948609494731e+01, -2.970602999521290e+01, -2.970776144203774e+01, -2.970776144203774e+01, -3.636811830623628e+00, -3.635290907000236e+00, -3.596570144291039e+00, -3.621034591698712e+00, -3.614476548438402e+00, -3.614476548438402e+00, -9.988804602109267e-01, -9.952221640971841e-01, -8.926211652077283e-01, -9.073411933997068e-01, -9.070978976791527e-01, -9.070978976791527e-01, -2.196918620069899e-01, -2.090328199507423e-01, -1.181489619638482e+00, -2.143658168465647e-01, -2.345252644376775e-01, -2.345252644376783e-01, -3.352834597062405e-02, -3.516840191347592e-02, -1.207274279428309e-01, -1.979980856130037e-02, -2.468454358104507e-02, -2.468454358104496e-02, -6.443573894545466e+00, -6.391982809086222e+00, -6.440859047425236e+00, -6.395335067252138e+00, -6.417732955501270e+00, -6.417732955501270e+00, -3.093239764532170e+00, -3.041076355242953e+00, -3.156910996129591e+00, -3.106566982577132e+00, -3.033231299426284e+00, -3.033231299426284e+00, -8.931247280364905e-01, -7.991950658538026e-01, -7.530757316112463e-01, -8.311195682201791e-01, -9.209231792743712e-01, -9.209231792743712e-01, -1.121113420724985e-01, -2.909157132685987e-01, -1.037380475774391e-01, -1.794607832257818e+00, -1.664311010688365e-01, -1.664311010688385e-01, -1.536189769394006e-02, -1.936271016553142e-02, -1.483767114093532e-02, -1.028695168008464e-01, -1.782772823636876e-02, -1.782772823636874e-02, 2.278040725175424e-01, -8.422109424768072e-02, 3.057772507159978e-02, 1.232667711247480e-01, 7.738267912086341e-02, 7.738267912086341e-02, 1.788795408157237e-01, -6.640587223853621e-01, -7.812555196343836e-01, -6.861141156889433e-01, -7.783740575893493e-01, -7.783740575893504e-01, -9.386910412792410e-01, -2.942606031680477e-01, -2.455916190230572e-01, -3.566005904916893e-01, -2.526875853462897e-01, -2.526875853462892e-01, -5.533318335850428e-01, -1.211243007376995e-01, -1.214834341724855e-01, -3.860264320832641e-01, -9.399423544077318e-02, -9.399423544077309e-02, -4.626867067044164e-02, -5.261863610646842e-03, -1.097175867430769e-02, -9.294036149422182e-02, -1.651933399648406e-02, -1.651933399648409e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mn12_l_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mn12_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.216415683197287e-07, -1.216448705398324e-07, -1.216564547420448e-07, -1.216076562060332e-07, -1.216336599921448e-07, -1.216336599921448e-07, -1.567902598868241e-05, -1.569329164267544e-05, -1.607809427464281e-05, -1.597832261479435e-05, -1.596929186463697e-05, -1.596929186463697e-05, -7.649946374843240e-03, -7.740924496831170e-03, -9.548316126665351e-03, -9.042340053419607e-03, -9.150803733027013e-03, -9.150803733027013e-03, -1.117227336142242e+00, -1.207424562209735e+00, -6.227551763002794e-03, -5.783063548004626e-01, -8.016751573567662e-01, -8.016751573567678e-01, -3.597437856921976e+01, -3.791056522664747e+01, -1.541644964799464e+01, -3.326939290860860e+01, -4.200745914882739e+01, -4.200745914880828e+01, -4.382542778542512e-05, -4.412210397211093e-05, -4.384172334217650e-05, -4.410345816369478e-05, -4.397424344568575e-05, -4.397424344568575e-05, -1.253678312433591e-04, -1.305339364584327e-04, -1.218357891466981e-04, -1.260802429167492e-04, -1.301713749038444e-04, -1.301713749038444e-04, -2.004017369243869e-02, -3.565627564391625e-02, -2.077532408988316e-02, -2.227088661813321e-02, -2.096974850332568e-02, -2.096974850332568e-02, -2.583701325680487e+00, -2.401737648324094e-01, -3.530505319016811e+00, -7.205680626405735e-04, -1.181474401890237e+00, -1.181474401890260e+00, -4.404835748740746e+01, -3.917165164770697e+01, -2.467506625014503e+02, -1.079035059143384e+01, -1.145293227712802e+02, -1.145293227711326e+02, -9.809811297749819e-02, -6.636173446886458e-02, -7.572268107417010e-02, -8.484730796527948e-02, -8.011114884864613e-02, -8.011114884864613e-02, -1.026575515453046e-01, -2.755084834980363e-02, -2.289632530153581e-02, -3.065152397405372e-02, -2.456984344357257e-02, -2.456984344357257e-02, -2.672681370370859e-02, -3.052631974730058e-01, -3.254989929500586e-01, -1.513198334639149e-01, -2.604961481582004e-01, -2.604961481582007e-01, -4.353226360458605e-02, -1.446481047306368e+01, -1.174590241927550e+01, -1.425017221687875e-01, -6.791951193324703e+00, -6.791951193324757e+00, -2.850626837321859e+01, -1.950312220709351e+02, -9.383686250812471e+01, -7.914041106220258e+00, -1.448421240154826e+02, -1.448421240151844e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mn12_l_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mn12_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.329802217029843e-02, 2.329885055120081e-02, 2.330281579026635e-02, 2.329058044865300e-02, 2.329695023704304e-02, 2.329695023704304e-02, -1.619047640203893e-03, -1.624214853795711e-03, -1.744654179730753e-03, -1.580102688328546e-03, -1.646449901940672e-03, -1.646449901940672e-03, 6.110908673428975e-02, 6.121110364189838e-02, 6.190631028423954e-02, 6.148995147010887e-02, 6.166587501131320e-02, 6.166587501131320e-02, 8.035922665503986e-02, 8.306135742793415e-02, 5.986627587765416e-02, 2.247662727367547e-02, 4.729990990364953e-02, 4.729990990364989e-02, -3.294940146929475e-05, -3.996817769978450e-05, -2.442193078158208e-03, -4.703474028459936e-06, -1.294525814362479e-05, -1.294525814362479e-05, 1.036494227025857e-01, 1.035567090205315e-01, 1.036543639396766e-01, 1.035722324989132e-01, 1.036005058361433e-01, 1.036005058361433e-01, 2.623078492310990e-02, 2.599587691046086e-02, 2.729087727288156e-02, 2.695740890470164e-02, 2.560169898909572e-02, 2.560169898909572e-02, 1.108878857127930e-01, 2.526429369002344e-02, 7.543657964081563e-02, 8.781441986701090e-02, 1.191557991281808e-01, 1.191557991281808e-01, -4.625049674025499e-03, 4.380865207435106e-02, -5.842305321801368e-03, 1.357351324894497e-02, 8.011835660836311e-03, 8.011835660836590e-03, -1.498535008577513e-06, -3.884529706794555e-06, -1.404507851638133e-05, -6.632325558259277e-03, -9.414971293918220e-06, -9.414971293983214e-06, -1.846645443181277e+00, -9.283367252469166e-01, -1.196214668262120e+00, -1.460627218691039e+00, -1.323032559276895e+00, -1.323032559276895e+00, -1.736697415015425e+00, 8.001451272152396e-02, 9.862341860595518e-02, -2.405809173698142e-02, 7.609240194650628e-02, 7.609240194650672e-02, 8.477688331595565e-02, 6.487737332336413e-02, 7.359260508515066e-02, 7.203289520027525e-02, 7.110789845649496e-02, 7.110789845649476e-02, 7.215329411554530e-02, -2.249364081614920e-03, -4.023862554568061e-03, 6.491888805650940e-02, -8.051677246968061e-03, -8.051677246967577e-03, -4.376559035190615e-05, -9.143792659770837e-08, -2.418488048500537e-06, -9.405569868190069e-03, -1.063682010738064e-05, -1.063682010748786e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
