
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ms2_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.064081616009074e+01, -2.064092264542270e+01, -2.064142938684361e+01, -2.063969084813752e+01, -2.064087197740987e+01, -2.064087197740987e+01, -3.215023792414255e+00, -3.215046530013540e+00, -3.215842246942022e+00, -3.215791780366207e+00, -3.215045397860662e+00, -3.771686105475023e+00, -6.058649377216464e-01, -7.525218392136992e-01, -7.395081600101349e-01, -7.421426122517877e-01, -7.528360237127423e-01, -7.528360237127423e-01, -2.082616430768089e-01, -2.103640794910545e-01, -7.230894913492292e-01, -1.649374649717359e-01, -2.089021517494677e-01, -2.089021517494677e-01, -1.418539764671863e-02, -1.485567695613653e-02, -5.923191261935322e-02, -6.817435900359406e-03, -1.470081587957360e-02, -1.470081587957360e-02, -5.446781062598342e+00, -5.447223060115985e+00, -5.446824956298321e+00, -5.195444096822926e+00, -5.447009113976201e+00, -5.447009113976201e+00, -1.797922102690613e+00, -1.812451707668371e+00, -1.791986486117561e+00, -1.803345890409493e+00, -1.815470447341299e+00, -2.153494321645891e+00, -6.197090443518438e-01, -6.635881109853552e-01, -5.928909045496996e-01, -6.107075434243444e-01, -6.401306017315174e-01, -5.611938454816017e-01, -8.760384711827500e-02, -2.179303761572687e-01, -8.648259247005985e-02, -2.035706290303245e+00, -1.412345998307367e-01, -1.412345998307367e-01, -4.250252360439338e-03, -7.515299031226930e-03, -5.632504921282469e-03, -5.450756160056835e-02, -4.425793608621459e-03, -6.847812377072993e-03, -6.206404413061904e-01, -6.192664377654412e-01, -6.130763294148928e-01, -6.201407210795664e-01, -6.199516488313012e-01, -6.199516488313012e-01, -6.014004899325083e-01, -5.380936995562133e-01, -5.564104349114416e-01, -5.734237218186040e-01, -5.647594873627518e-01, -5.108105215943529e-01, -6.984652634803026e-01, -2.092809209917723e-01, -3.087707366627939e-01, -3.227852526335961e-01, -3.429407288088963e-01, -3.429407288088962e-01, -4.198092180427409e-01, -5.505217435740085e-02, -7.363783125155472e-02, -3.589377048084021e-01, -7.110148040656966e-02, -1.030617816413213e-01, -1.663006264354376e-02, -2.058299249182681e-03, -3.909530117746497e-03, -9.833857182298063e-02, -5.820035025058707e-03, -5.820035025058698e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ms2_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.100478855873893e+01, -3.100490263406397e+01, -3.100546321008067e+01, -3.100359736203141e+01, -3.100484823543346e+01, -3.100484823543346e+01, -4.402300477735145e+00, -4.402278927317822e+00, -4.401749381846261e+00, -4.402315067686723e+00, -4.402315444261314e+00, -4.618881880886155e+00, -8.222396576378546e-01, -8.771723614510475e-01, -8.550288020422243e-01, -8.610685988580001e-01, -8.777287578130363e-01, -8.777287578130363e-01, -2.406096066830863e-01, -2.436504476736657e-01, -9.727520915524669e-01, -1.890224008805276e-01, -2.415205009723933e-01, -2.415205009723933e-01, -1.883563034533066e-02, -1.971810628481158e-02, -7.582353756848201e-02, -9.084719515415621e-03, -1.951242624666304e-02, -1.951242624666298e-02, -7.082026348345150e+00, -7.083884029237275e+00, -7.082225422532270e+00, -7.481653298133482e+00, -7.082966587502939e+00, -7.082966587502939e+00, -2.473769061357419e+00, -2.493618443589104e+00, -2.465429870277783e+00, -2.481269749538169e+00, -2.497603725385996e+00, -2.610634778314390e+00, -7.776186684516039e-01, -8.536225874398423e-01, -7.342114684595380e-01, -7.718871835477356e-01, -8.104216992747176e-01, -7.850336655550684e-01, -1.168517147177674e-01, -2.472146035709798e-01, -1.153613861863438e-01, -2.579496858651290e+00, -1.626869230974430e-01, -1.626869230974430e-01, -5.667003173033925e-03, -1.001258276035821e-02, -7.503484070529042e-03, -7.268131267495709e-02, -5.901058177023424e-03, -9.123852599546472e-03, -8.222229154280967e-01, -8.153894841716285e-01, -8.289220670074787e-01, -8.197160397336607e-01, -8.187678978130830e-01, -8.187678978130830e-01, -7.949687721461366e-01, -6.728032161738744e-01, -7.076733441447488e-01, -7.407180803835285e-01, -7.237930010544492e-01, -7.677827730143759e-01, -8.922877281845860e-01, -2.821400400404768e-01, -3.613205597294248e-01, -4.441218862134300e-01, -4.093076633078084e-01, -4.093076633078084e-01, -5.726455170269480e-01, -7.092038325898116e-02, -9.288260643446948e-02, -4.404598779996585e-01, -9.483004183092876e-02, -1.233510516541354e-01, -2.209457015041211e-02, -2.744229966771019e-03, -5.211083448268832e-03, -1.177212129620363e-01, -7.755268127727666e-03, -7.755268127727634e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms2_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.712947340854472e-08, -1.712947950762139e-08, -1.712936767071703e-08, -1.712928555528630e-08, -1.712947756070010e-08, -1.712947756070010e-08, -7.924279802922818e-06, -7.923812002030190e-06, -7.908157561967230e-06, -7.911794277043153e-06, -7.923999271364892e-06, -2.891014634758159e-06, -5.477179988851016e-03, -1.567496489859878e-03, -1.606581538329099e-03, -1.617174347886797e-03, -1.566539415447084e-03, -1.566539415447084e-03, -2.541485531645369e-01, -2.479980245746317e-01, -2.595940779636726e-03, -3.138275880950520e-01, -2.521932919022004e-01, -2.521932919022004e-01, -3.423026484365272e+00, -3.394343222968341e+00, -1.089480857330247e+00, -1.221182160919063e+00, -3.550165710784634e+00, -3.550165710790517e+00, -7.257911009662757e-07, -7.256954389366047e-07, -7.257832048713832e-07, -4.546951778369892e-06, -7.257397857873041e-07, -7.257397857873041e-07, -7.988171889536739e-05, -7.792586278583218e-05, -8.064853096615905e-05, -7.914497066056435e-05, -7.753796111182484e-05, -2.661309051173155e-05, -4.139683824364289e-03, -3.255104365906750e-03, -4.835483509204134e-03, -4.435854926914770e-03, -3.683348224564972e-03, -1.218600906068703e-02, -1.179966259138614e+01, -1.679015590763549e-01, -1.242416032345776e+01, -3.605587801024854e-05, -5.248404282227177e-01, -5.248404282227177e-01, -2.128979094544410e+06, -1.540620687776135e+00, -6.054250810741165e+00, -7.870772022279021e+01, -1.810779782149470e+06, -1.898456019616785e+00, -4.385003154827833e-03, -4.399081739729621e-03, -1.416680263612866e-02, -4.390189927237629e-03, -4.392102267222656e-03, -4.392102267222656e-03, -4.963650685094788e-03, -7.242495047192595e-03, -6.492771702723443e-03, -5.866087232100722e-03, -6.176813292409713e-03, -3.980280291383428e-02, -2.629735757418348e-03, -3.729168009498865e-01, -5.631301417980422e-02, -7.726532071145971e-02, -3.972810100747731e-02, -3.972810100747724e-02, -2.689302642799194e-02, -1.040227316380246e+00, -8.510893473101764e-01, -3.539033646242402e-02, -2.718982703813749e+01, -8.852822121058812e-01, -1.338625176533775e+00, -1.706206579304014e+00, -3.352176801768526e+00, -1.063732764935908e+00, -2.669265711519379e+00, -2.669265711549842e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms2_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.042529790328698e-03, 2.042558610666207e-03, 2.042680314168699e-03, 2.042211563581180e-03, 2.042545002172066e-03, 2.042545002172066e-03, 8.702962499033842e-04, 8.701027338330105e-04, 8.639317006326591e-04, 8.663257144464349e-04, 8.702384598498469e-04, 2.426335386596034e-18, 1.347920677351409e-03, -1.111032006165447e-17, 1.637125204773274e-17, -8.601674960757161e-17, -5.850138427332640e-17, -5.850138427332640e-17, 9.929526406844712e-17, 1.119338875299731e-16, 3.755294300778870e-04, -3.281062285874003e-16, 5.453905277243957e-17, 5.453905277243957e-17, 1.918021690260272e-17, -1.277568796082224e-16, -2.706155671997787e-16, -6.947453801142506e-18, -8.775938386775292e-17, 2.209968255200274e-17, -2.063784161664038e-18, 2.521667994476558e-19, -1.403567832532852e-19, 8.039371797873184e-03, 7.542173787016319e-20, 7.542173787016319e-20, 1.469789858724081e-03, 1.518200410759723e-03, 1.444037606041067e-03, 1.488269236699814e-03, 1.528928914711478e-03, 9.154504721812037e-18, 2.061625087081717e-17, -6.635565515613515e-18, -3.403237893536524e-17, 1.589321769433699e-17, 8.930674076423783e-18, 1.747151827616469e-02, 2.790253733997017e-05, 8.106516716768922e-17, 3.326671552028224e-05, 3.165818230859780e-18, 3.304082518229404e-16, 3.304082518229404e-16, 2.216584426333809e-11, -2.205711903612580e-17, -3.288916362218444e-17, 2.801011525245032e-06, 2.795503281578004e-11, 2.726476624582298e-17, 5.886975943186480e-18, -1.659828556789228e-18, 3.195426387443464e-02, -4.416379063892267e-18, -5.810567774669316e-20, -5.810567774669316e-20, 4.903624234409658e-18, -2.052385813483354e-17, 2.306054336467401e-17, 1.775264527605093e-17, -1.598048403774095e-17, 7.142597910169457e-02, -9.039072997594651e-18, 1.817256812907418e-03, -9.300021133429235e-17, 8.409315746302012e-03, -2.675475664070051e-17, -5.787419599476012e-17, 6.077940364514965e-03, -3.318611104515565e-17, -2.757809850100527e-17, 1.378486692662389e-17, 2.198402865658587e-05, -1.721369206825224e-16, 6.340587205364343e-17, 5.562811377784735e-18, -1.554068780756648e-18, -1.606865921608715e-16, -1.804991793725332e-18, 3.328393906002951e-17])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
