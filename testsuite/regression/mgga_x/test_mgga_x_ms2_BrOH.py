
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ms2_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.244796402095992e+01, -2.244800949684322e+01, -2.244827250066564e+01, -2.244752715111434e+01, -2.244798749397335e+01, -2.244798749397335e+01, -3.371483345261479e+00, -3.371488378912178e+00, -3.371864887745264e+00, -3.373094258781132e+00, -3.371493780909964e+00, -3.371493780909964e+00, -6.586497583105630e-01, -6.584185007739045e-01, -6.540026140711520e-01, -6.594296781082212e-01, -6.585644737473387e-01, -6.585644737473387e-01, -2.014096596249740e-01, -2.023653468846042e-01, -7.680377033931149e-01, -1.565388578676948e-01, -2.015817602885593e-01, -2.015817602885593e-01, -1.418472932431654e-02, -1.485472015568379e-02, -5.901428425795825e-02, -6.816575533270289e-03, -1.469998447071393e-02, -1.469998447071393e-02, -5.446330508619341e+00, -5.446777631706202e+00, -5.446380746143424e+00, -5.446728326403153e+00, -5.446553356215802e+00, -5.446553356215802e+00, -2.106404158209262e+00, -2.125306329566410e+00, -2.106898681128272e+00, -2.121497612328470e+00, -2.118838089509484e+00, -2.118838089509484e+00, -5.890814984023698e-01, -6.305037553213558e-01, -5.394388879257944e-01, -5.535563439182950e-01, -6.191891081893476e-01, -6.191891081893476e-01, -1.233395379249722e-01, -2.121665663917334e-01, -1.212610660650621e-01, -1.830426494930384e+00, -1.376152177961182e-01, -1.376152177961182e-01, -6.575974247292658e-03, -7.514351246724804e-03, -5.632188892723335e-03, -8.035503920549024e-02, -6.846707311166138e-03, -6.846707311166138e-03, -6.192895171233392e-01, -6.179802149666922e-01, -6.184523702502998e-01, -6.188132325880151e-01, -6.186322401500857e-01, -6.186322401500857e-01, -5.981031420020672e-01, -5.366695011897684e-01, -5.543725437320395e-01, -5.708287907732638e-01, -5.622745140501985e-01, -5.622745140501985e-01, -6.487661965338523e-01, -2.627942122106848e-01, -2.985504887815816e-01, -3.537611134301662e-01, -3.270848501718997e-01, -3.270848501718996e-01, -4.721345444001185e-01, -5.495077414643423e-02, -7.316321891479265e-02, -3.296187560908325e-01, -1.014452134371368e-01, -1.014452134371368e-01, -1.661763851937824e-02, -2.058258124933172e-03, -3.909474422081841e-03, -9.671133854991786e-02, -5.819180878687651e-03, -5.819180878687643e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ms2_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.878714822272069e+01, -2.878723937315520e+01, -2.878775746564545e+01, -2.878626953307308e+01, -2.878719527207303e+01, -2.878719527207303e+01, -4.214706546475524e+00, -4.214923919238911e+00, -4.221875999781045e+00, -4.221553951688559e+00, -4.214774124176127e+00, -4.214774124176127e+00, -7.829077253963885e-01, -7.816801029685524e-01, -7.511804805732605e-01, -7.595998414277725e-01, -7.824644602127170e-01, -7.824644602127170e-01, -1.784011475838523e-01, -1.828969142353639e-01, -9.289681451784947e-01, -1.661336119334822e-01, -1.796706503849856e-01, -1.796706503849856e-01, -1.883279258476392e-02, -1.971408424415722e-02, -7.494829945955792e-02, -9.081280874038497e-03, -1.950889997353242e-02, -1.950889997353242e-02, -7.080286116046508e+00, -7.082180931911489e+00, -7.080510936289799e+00, -7.081982363837617e+00, -7.081216083307353e+00, -7.081216083307353e+00, -2.317502108149390e+00, -2.376755262080359e+00, -2.322023839269869e+00, -2.371785221415980e+00, -2.353511213860164e+00, -2.353511213860164e+00, -7.570714244625492e-01, -8.847688699035585e-01, -7.025353361915319e-01, -7.850448830717138e-01, -7.944763451101475e-01, -7.944763451101475e-01, -1.400050167575827e-01, -1.755549745088567e-01, -1.368960263369864e-01, -2.631542639634586e+00, -1.490821101254053e-01, -1.490821101254053e-01, -8.761042787495444e-03, -1.000879466582898e-02, -7.502219046672195e-03, -9.786357001853931e-02, -9.119436967170326e-03, -9.119436967170326e-03, -8.235683955744552e-01, -8.153600322471387e-01, -8.182761485761733e-01, -8.205487141999899e-01, -8.194096966940405e-01, -8.194096966940405e-01, -7.993274737959531e-01, -6.600591443085788e-01, -6.975005308559142e-01, -7.352081491397853e-01, -7.153995881905612e-01, -7.153995881905612e-01, -9.303657690778743e-01, -2.439343914270017e-01, -2.813853535923403e-01, -4.164341450987749e-01, -3.414134828548552e-01, -3.414134828548553e-01, -5.511387430831340e-01, -7.048923858996610e-02, -9.102375976286682e-02, -4.105330038462244e-01, -1.172661815547557e-01, -1.172661815547557e-01, -2.204511683029104e-02, -2.744065488909522e-03, -5.210860526126446e-03, -1.116988834985856e-01, -7.751854760509998e-03, -7.751854760509986e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms2_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.700624777829183e-09, -3.700545326845177e-09, -3.699528538052903e-09, -3.700789564995537e-09, -3.700589097763384e-09, -3.700589097763384e-09, -7.668390117090310e-06, -7.675240226158461e-06, -7.892953284909300e-06, -7.915378371839272e-06, -7.669468003046360e-06, -7.669468003046360e-06, -4.249589373460999e-03, -4.250948710904282e-03, -4.240316409188273e-03, -4.206061741055727e-03, -4.250253184525430e-03, -4.250253184525430e-03, -1.592259639029569e+00, -1.549700682693010e+00, -2.068069520952485e-03, -6.594756519210496e-01, -1.580462683701285e+00, -1.580462683701285e+00, -3.580504775899323e+00, -3.589638633871707e+00, -1.490620625312640e+00, -2.536292505883802e+00, -3.729406362212700e+00, -3.729406362212700e+00, -7.505285719686979e-07, -7.501360915412326e-07, -7.501753560180386e-07, -7.498890943816378e-07, -7.507486072044804e-07, -7.507486072044804e-07, -1.218658459364239e-04, -1.057473250430121e-04, -1.147820090733410e-04, -1.013771808182162e-04, -1.196404217901993e-04, -1.196404217901993e-04, -2.721029292079776e-02, -2.110184035038246e-02, -2.669039723011811e-02, -2.719665493274102e-02, -2.084107797922579e-02, -2.084107797922579e-02, -7.973553474729028e-01, -9.460125656966435e-01, -9.136512394648038e-01, -2.064544332343880e-04, -9.272566127526410e-01, -9.272566127526410e-01, -2.690633880118553e+00, -2.696111172862987e+00, -7.716851894832381e+00, -1.440168394721006e+00, -3.982286818855233e+00, -3.982286818855232e+00, -7.309981982068276e-03, -7.265954027310635e-03, -7.282833570736647e-03, -7.294799959493362e-03, -7.290287610834801e-03, -7.290287610834800e-03, -1.179475605400914e-02, -1.388118033580877e-02, -1.376079063600577e-02, -1.325783082995368e-02, -1.395375196836095e-02, -1.395375196836096e-02, -1.825125677199680e-02, -4.280838974906133e-01, -3.538284685646992e-01, -1.429620504315956e-01, -2.596974331203988e-01, -2.596974331203989e-01, -6.290799570137778e-02, -1.266307386288926e+00, -1.251625651308912e+00, -2.050806042129645e-01, -1.380823082041854e+00, -1.380823082041856e+00, -2.688964337589264e+00, -4.637847901909285e+00, -3.993212037863384e+00, -1.686561111754906e+00, -5.815893473498623e+00, -5.815893473498610e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms2_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms2_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.864830404839442e-04, 1.864749199446281e-04, 1.863421942711169e-04, 1.864689334584485e-04, 1.864796694259726e-04, 1.864796694259726e-04, 1.494601638681682e-03, 1.499193550673818e-03, 1.646310642883136e-03, 1.667365963341981e-03, 1.495383702068949e-03, 1.495383702068949e-03, 2.771662263637645e-03, 2.755477416683118e-03, 2.401045658746271e-03, 2.830827837431608e-03, 2.766387750761659e-03, 2.766387750761659e-03, 1.207468170764873e-01, 1.210332727699456e-01, 5.211773272467565e-04, 7.631762142826878e-04, 1.208023308564147e-01, 1.208023308564147e-01, 1.720263290195958e-08, 1.288658268746492e-08, 2.476029813315030e-06, 9.574588488082394e-16, 1.992841451453488e-08, 1.992841451453787e-08, 5.453602805182457e-05, 5.391041581197756e-05, 5.377793862426293e-05, 5.333340995253740e-05, 5.514895801667626e-05, 5.514895801667626e-05, 1.083474816167702e-02, 9.267591098959657e-03, 9.947192836632876e-03, 8.627382158189685e-03, 1.090210242213061e-02, 1.090210242213061e-02, 6.685044555069292e-02, 6.642464560833100e-02, 4.879654794878979e-02, 5.906707527135865e-02, 5.659774261475599e-02, 5.659774261475599e-02, 2.934932552473990e-04, 7.109025710502916e-02, 3.715433306059828e-04, 1.601143266498445e-02, 2.929264605838137e-03, 2.929264605838137e-03, 8.369554249530235e-15, 6.860045841757165e-15, 1.121248998145866e-13, 2.672922630470908e-06, 2.936751451935183e-15, 2.936751447982614e-15, 9.773600547758585e-03, 9.429157444169937e-03, 9.555395029377094e-03, 9.649775739213841e-03, 9.607361841454769e-03, 9.607361841454765e-03, 2.059154053650454e-02, 1.312807303643177e-02, 1.634868838579483e-02, 1.865152837346069e-02, 1.850882903623829e-02, 1.850882903623832e-02, 6.538671015690459e-02, 6.366055691729736e-02, 9.184677243350223e-02, 6.810587123845827e-02, 9.673486596619960e-02, 9.673486596619960e-02, 7.365838164770397e-02, 4.546931189516998e-06, 6.666303687908269e-06, 8.456113264444087e-02, 3.038046965324659e-04, 3.038046965324626e-04, 4.116173720493505e-12, 2.824902062672113e-20, 2.248237166177549e-15, 2.653700753665334e-04, 1.461153088847095e-15, 1.461153091357427e-15]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
