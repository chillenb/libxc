
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_gdme_0_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-8.907593904813726e+00, -8.907686424831459e+00, -8.908226321603248e+00, -8.906851670638080e+00, -8.907553898726876e+00, -8.907553898726876e+00, -3.777122214498158e+00, -3.777127702199713e+00, -3.777207311861843e+00, -3.777163809658864e+00, -3.777135938249736e+00, -3.777135938249736e+00, -9.029739263235090e-01, -9.041140574102863e-01, -9.381868076513067e-01, -9.237358851420495e-01, -9.215248421934511e-01, -9.215248421934511e-01, -3.892993196884280e-01, -3.780041730282540e-01, -1.084539880341861e+00, -5.440694383097662e-01, -3.997897095256660e-01, -3.997897095256661e-01, -1.150611682571135e+01, -1.076336005292690e+01, -2.105192183550284e+00, -2.104306557904997e+01, -1.621067477122303e+01, -1.621067477122303e+01, -5.482968678089306e+01, -2.261126862181799e+01, 3.035416614560301e+02, -1.087042787957092e+02, 5.084758893232562e+00, -1.101676807268914e+01, 4.068240502898564e+02, -6.547108489662147e+00, -3.213656580227166e+00, -3.208744428275304e+00, -3.245932463758088e+00, -1.611673699266158e+00, -1.440472064360363e+01, -4.850571012495915e+00, -1.264397262280796e+01, -8.700578219167682e-01, -9.740444111393950e-01, -1.286600430932303e+00, 7.731749289060287e+00, -6.604832098651105e+00, 5.133843146163044e+01, -3.167273446307902e+00, -1.752899594041941e-01, 3.195875741737090e-01, -3.900025744552418e+02, -3.549723152838013e+05, 1.645411256813896e+05, 1.247942955904704e+01, -7.380067653094841e+01, 4.544925361092903e+03, -8.544692144298542e+04, 3.467227633266866e+04, 5.997230699821977e+05, -7.673532682127785e+02, 1.106645708135647e+04, -1.084613427496965e+06, 3.283295085653259e+05, -6.750089974699980e-01, -8.729093662825555e+00, 8.549925962565985e-01, -1.199043971063496e+00, -2.102683513470945e+01, -1.707874918651194e+01, 6.278396245251531e+01, 9.573045140457495e+01, 8.673038852914990e+00, -1.549927706908894e+00, -9.093611105419597e-01, -6.939605868505603e-01, 1.509579694729537e+01, -2.360072000637175e+00, -4.831213237524788e-01, 2.748686082324891e+01, -8.175418535749084e-02, 6.628889765892937e+02, 5.819349946563981e+02, 3.167328182871335e+03, 2.323201933974768e+00, 8.206043990733713e+02, 1.529675223009766e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_gdme_0_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-5.576340806704884e+01, -5.576354102469828e+01, -5.576413981772802e+01, -5.576216000427163e+01, -5.576319621934382e+01, -5.576319621934382e+01, -8.303134514821899e+00, -8.303153324599297e+00, -8.303838137782611e+00, -8.304431660043955e+00, -8.303385191368731e+00, -8.303385191368731e+00, -1.543366274681869e+00, -1.540952773729806e+00, -1.480663719836888e+00, -1.500366889439218e+00, -1.497938175727751e+00, -1.497938175727751e+00, -3.464673152829575e-01, -3.574449034056918e-01, -1.789100640141417e+00, -1.801909208825836e-01, -2.727255664455885e-01, -2.727255664455885e-01, 3.818794062310969e+00, 3.570337428616557e+00, 6.054613790376904e-01, 7.004780756840482e+00, 5.391527245181631e+00, 5.391527245181631e+00, 3.959949420656895e+00, -6.782151643393767e+00, -1.154972975638983e+02, 2.191569566082337e+01, -1.601285943745050e+01, -1.064568378214326e+01, -1.409893489376065e+02, -3.237996159384781e+00, -4.281617266507848e+00, -4.317749649395975e+00, -4.334708974547724e+00, -4.879461896045035e+00, 3.188245332700464e+00, -1.357856311993526e-01, 2.721841490276951e+00, -1.261779222503860e+00, -1.314657187041305e+00, -1.210471847110336e+00, -2.828266495117772e+00, 1.724653721405951e+00, -1.734503253211910e+01, -4.222670524608725e+00, -2.361465312505358e-01, -4.011057091098373e-01, 1.299934708370701e+02, 1.183240957347421e+05, -5.484704905079426e+04, -4.315998182508346e+00, 2.459160354711094e+01, -1.514983742327506e+03, 2.848068598596613e+04, -1.155903730653748e+04, -1.999093051286906e+05, 2.541665928278385e+02, -3.690435507918307e+03, 3.615361926848550e+05, -1.094447467393042e+05, -1.128924638848266e+00, 1.491919353137789e+00, -1.766106481710369e+00, -1.049083329246313e+00, 5.560180391969009e+00, 3.855501013497804e+00, -2.153059313159607e+01, -3.263384849873926e+01, -3.846917484801050e+00, -3.146506483898266e-01, -5.281728471788044e-01, -1.015160500156920e+00, -5.124074304535259e+00, 6.610698880297323e-01, -7.604658993248222e-01, -9.361164339993699e+00, -1.716260037915590e-01, -2.209863891454982e+02, -1.939808335022527e+02, -1.055781312661109e+03, -9.611550261026343e-01, -2.735427777040548e+02, -5.098997190161869e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gdme_0_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gdme_0_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([-1.863562734541553e-03, -1.863557537320182e-03, -1.863532828077654e-03, -1.863610186563239e-03, -1.863569879540046e-03, -1.863569879540046e-03, -1.144633862213847e-02, -1.144631391639994e-02, -1.144546246691995e-02, -1.144476950109425e-02, -1.144603308361725e-02, -1.144603308361725e-02, -5.934418406262475e-02, -5.940968494816137e-02, -6.103063685512339e-02, -6.052821766959758e-02, -6.063436939642650e-02, -6.063436939642650e-02, -2.298280932832460e-01, -2.263992860724094e-01, -5.089332594776395e-02, -3.027318017314171e-01, -2.695933856143694e-01, -2.695933856143694e-01, -6.602152861558369e+00, -6.272582500900507e+00, -1.136934000906329e+00, -1.143168056017227e+01, -9.097480485101535e+00, -9.097480485101535e+00, -7.645097142452238e-03, -7.643693859436753e-03, -7.645027239274574e-03, -7.643788475684309e-03, -7.644388605490245e-03, -7.644388605490245e-03, -2.033918226275274e-02, -2.019271445091747e-02, -2.044745875300876e-02, -2.031653398695138e-02, -2.020643001368806e-02, -2.020643001368806e-02, -6.784229946575038e-02, -6.244963673793085e-02, -7.331907763291579e-02, -7.053228634934261e-02, -6.676588477582486e-02, -6.676588477582486e-02, -4.360342635141298e-01, -2.294795986332996e-01, -4.713243135587918e-01, -2.073569798789881e-02, -3.715567580118131e-01, -3.715567580118131e-01, -1.481619515206365e+01, -1.169375549918270e+01, -1.529299032604220e+01, -7.007687211038884e-01, -1.269454453761194e+01, -1.269454453761194e+01, -6.751448433498838e-02, -6.790399832478761e-02, -6.776642284232889e-02, -6.765352479267227e-02, -6.770998823137850e-02, -6.770998823137850e-02, -6.939556142460697e-02, -8.084028484063935e-02, -7.719957189984682e-02, -7.389861221057156e-02, -7.554843064970058e-02, -7.554843064970058e-02, -5.956840079918559e-02, -1.816310490579731e-01, -1.512397316144498e-01, -1.145008649257732e-01, -1.316646083768117e-01, -1.316646083768117e-01, -8.780873725604610e-02, -1.187861227772954e+00, -8.712881492417238e-01, -1.187749786307061e-01, -5.503485891781317e-01, -5.503485891781316e-01, -4.678041380456178e+00, -4.374663388802565e+01, -2.084121571523158e+01, -5.860740458318591e-01, -1.371919259242209e+01, -1.371919259242211e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gdme_0_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([7.454250938166212e-03, 7.454230149280729e-03, 7.454131312310615e-03, 7.454440746252956e-03, 7.454279518160183e-03, 7.454279518160183e-03, 4.578535448855392e-02, 4.578525566559976e-02, 4.578184986767982e-02, 4.577907800437699e-02, 4.578413233446902e-02, 4.578413233446902e-02, 2.373767362504990e-01, 2.376387397926455e-01, 2.441225474204936e-01, 2.421128706783904e-01, 2.425374775857061e-01, 2.425374775857061e-01, 9.193123731329843e-01, 9.055971442896379e-01, 2.035733037910558e-01, 1.210927206925668e+00, 1.078373542457478e+00, 1.078373542457478e+00, 2.640861144623348e+01, 2.509033000360203e+01, 4.547736003625316e+00, 4.572672224068909e+01, 3.638992194040615e+01, 3.638992194040615e+01, 3.058038856980896e-02, 3.057477543774701e-02, 3.058010895709830e-02, 3.057515390273725e-02, 3.057755442196099e-02, 3.057755442196099e-02, 8.135672905101098e-02, 8.077085780366990e-02, 8.178983501203506e-02, 8.126613594780555e-02, 8.082572005475228e-02, 8.082572005475228e-02, 2.713691978630016e-01, 2.497985469517235e-01, 2.932763105316632e-01, 2.821291453973705e-01, 2.670635391032995e-01, 2.670635391032995e-01, 1.744137054056520e+00, 9.179183945331988e-01, 1.885297254235168e+00, 8.294279195159525e-02, 1.486227032047253e+00, 1.486227032047253e+00, 5.926478060825460e+01, 4.677502199673082e+01, 6.117196130416880e+01, 2.803074884415554e+00, 5.077817815044775e+01, 5.077817815044775e+01, 2.700579373399536e-01, 2.716159932991505e-01, 2.710656913693156e-01, 2.706140991706891e-01, 2.708399529255140e-01, 2.708399529255140e-01, 2.775822456984279e-01, 3.233611393625574e-01, 3.087982875993873e-01, 2.955944488422863e-01, 3.021937225988025e-01, 3.021937225988025e-01, 2.382736031967424e-01, 7.265241962318927e-01, 6.049589264577993e-01, 4.580034597030927e-01, 5.266584335072468e-01, 5.266584335072467e-01, 3.512349490241845e-01, 4.751444911091818e+00, 3.485152596966895e+00, 4.750999145228244e-01, 2.201394356712527e+00, 2.201394356712527e+00, 1.871216552182472e+01, 1.749865355521026e+02, 8.336486286092632e+01, 2.344296183327437e+00, 5.487677036968839e+01, 5.487677036968844e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
