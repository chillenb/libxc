
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_2d_prhg07_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_2d_prhg07", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.636127247789852e+02, -1.636134061971275e+02, -1.636166627964525e+02, -1.636065201316285e+02, -1.636118023641932e+02, -1.636118023641932e+02, -1.076096342785533e+01, -1.076097123720167e+01, -1.076153671871818e+01, -1.076357364893798e+01, -1.076135572474351e+01, -1.076135572474351e+01, -9.622421786329752e-01, -9.618123707587098e-01, -9.534312220221524e-01, -9.612551349921675e-01, -9.581369805063539e-01, -9.581369805063539e-01, -1.898467406907152e-01, -1.902915970876056e-01, -1.199684569603141e+00, -1.651216704176049e-01, -1.704186021594752e-01, -1.704186021594752e-01, -4.825537118118813e-02, -4.840249244640558e-02, -8.880499613835341e-02, -4.341974707031478e-02, -4.405235307902974e-02, -4.405235307902974e-02, -2.195715097266969e+01, -2.063076782097691e+01, -1.976673953653223e+01, -2.358901330030213e+01, -1.873100696698431e+01, -2.000044220945479e+01, -4.555157136987689e+00, -5.035044565383125e+00, -4.730317492229810e+00, -4.769159749684177e+00, -4.796174459072099e+00, -4.651677087673466e+00, -1.343054048996923e+00, -1.147705421020055e+00, -1.202236136849846e+00, -7.096552137558393e-01, -7.994712503544711e-01, -8.390636089594250e-01, -4.589048728746591e-02, -3.496385842863326e-01, -4.083417915395212e-02, -4.445741317723969e+00, -1.306035537927501e-01, -1.120440494217554e-01, -8.893812870574325e-02, -2.069335469799910e+00, -2.209352306816191e-04, -2.252379324782138e-02, -5.084625534215055e-02, -2.921311779951624e-04, -2.797754436886919e+01, -7.467247989753792e-01, -7.489998891054188e-01, -4.534758106341876e+00, -7.499364936938052e-01, -8.074374510075759e+01, -7.227798804988588e-01, -6.143669688166544e-01, -1.043203146458259e+00, -6.577323026512076e-01, -7.113977583173247e-01, -1.327980700363802e+00, -1.595651565328940e+00, -1.706940796787526e-01, -2.246491337974921e-01, -3.410283190998137e-01, -4.116652253055307e-01, -3.731676189271769e-01, -5.562487928383667e-01, -1.020598756471131e-02, -1.048386631403485e-01, -3.502604697905528e-01, -3.236285363910522e-02, -9.999559360574650e-02, -1.305892737732667e-03, -4.566533342677497e-05, -1.388733852654350e-04, -2.944929223079948e-02, -2.600224021673388e-04, -2.600224021673385e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_2d_prhg07_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_2d_prhg07", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.464614381317625e+02, -2.464624785541028e+02, -2.464674023456024e+02, -2.464519167078967e+02, -2.464599884165511e+02, -2.464599884165511e+02, -1.606761635064124e+01, -1.606770757829650e+01, -1.607041499360478e+01, -1.607032996324406e+01, -1.606831264802656e+01, -1.606831264802656e+01, -1.292678190934908e+00, -1.290085116808038e+00, -1.229915329651806e+00, -1.244756840866966e+00, -1.241664664446662e+00, -1.241664664446662e+00, -1.745273748985043e-01, -1.770813767748392e-01, -1.644466206243468e+00, -1.313668433560612e-01, -1.438087480938743e-01, -1.438087480938743e-01, -1.942553504156510e-02, -1.968301911024540e-02, -4.601203845428009e-02, -1.643687562012853e-02, -1.752392538616099e-02, -1.752392538616101e-02, -2.951492148548407e+01, -2.937896536466497e+01, -2.965010930479835e+01, -3.003983826957911e+01, -3.097866647887463e+01, -2.948141448490264e+01, -6.832735705481534e+00, -6.735161973484680e+00, -6.544524967512843e+00, -6.611606478373659e+00, -6.677466950348847e+00, -6.668208888418266e+00, -1.387749074226840e+00, -1.348870929234399e+00, -1.238599019643597e+00, -1.040328965500996e+00, -1.109640129306091e+00, -1.119298059267631e+00, -6.883573093119885e-02, -3.015239714269007e-01, -6.125126873092818e-02, -6.607858784101281e+00, -9.084303878252463e-02, -6.368301628717031e-02, -5.190759814341121e-02, -1.222282777785644e+00, -3.314028460224287e-04, -3.378568987173208e-02, -2.762476335622251e-02, -4.381967669927436e-04, -1.905678968634572e+01, -1.120087198463069e+00, -1.123499833658128e+00, -3.595117714918090e+00, -1.124904740540708e+00, -5.243563114461935e+01, -1.084169820748288e+00, -8.040563597859572e-01, -1.099948706541098e+00, -9.865984539768115e-01, -9.311228852291779e-01, -1.304556779987641e+00, -1.667668267978665e+00, -2.560411195181289e-01, -3.369737006962381e-01, -5.115424786497205e-01, -4.396001103679404e-01, -4.101763142277462e-01, -7.126646646511179e-01, -1.530898134706697e-02, -6.034032635966990e-02, -4.481910448060388e-01, -4.854428045865783e-02, -5.748328296168052e-02, -1.958839106599000e-03, -6.849800014016247e-05, -2.083100778981525e-04, -4.417393834619922e-02, -3.900336032510083e-04, -3.900336032510077e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_2d_prhg07_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_2d_prhg07", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.607660078275708e-09, -1.607640140063039e-09, -1.607544025793902e-09, -1.607840818876884e-09, -1.607686359790203e-09, -1.607686359790203e-09, -5.617276818962910e-06, -5.617333917069429e-06, -5.618078514928274e-06, -5.612174034806577e-06, -5.616761465727308e-06, -5.616761465727308e-06, -6.460663614295897e-03, -6.448518442961414e-03, -6.154628844882862e-03, -6.057466965383705e-03, -6.124698001514795e-03, -6.124698001514795e-03, -6.474202675105105e-01, -6.396322358549849e-01, -3.427758342635256e-03, -1.135706023189181e+00, -9.444900408835445e-01, -9.444900408835444e-01, -4.976404668210604e+03, -4.369324540173698e+03, -3.502546553952192e+01, -2.258059409762777e+04, -1.247024449516608e+04, -1.247024449516608e+04, -4.850387070093911e-07, -6.721324700151926e-07, 0.000000000000000e+00, -3.573470213453276e-07, -1.668665729065061e-06, -8.207265914389594e-07, 0.000000000000000e+00, -4.137961389409169e-05, -5.525352274626774e-05, -5.413927289289136e-05, -5.361878905807012e-05, -6.536539377389044e-05, -1.924406934296758e-03, -2.902890166436919e-03, -2.690932815634946e-03, -1.881149413797609e-02, -1.153752195035086e-02, -8.909070777899198e-03, 0.000000000000000e+00, -1.605933426077046e-01, 0.000000000000000e+00, -7.698637056496586e-05, -2.425952916823060e+00, -3.443606211581952e+00, -1.746371238680974e+04, -1.980250041714979e+02, 0.000000000000000e+00, 0.000000000000000e+00, -2.398181399440901e+04, 0.000000000000000e+00, -1.113054121911763e-05, 0.000000000000000e+00, 0.000000000000000e+00, -1.751425819420812e-04, 0.000000000000000e+00, -2.659319540187031e-06, 0.000000000000000e+00, -2.390700128915807e-02, -3.994679336453894e-03, 0.000000000000000e+00, -1.411216349077768e-02, -2.187389933744983e-03, -1.134530382225825e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -6.272368738932198e-02, -8.453388447534259e-02, -3.058483822514531e-02, 0.000000000000000e+00, -1.547845323623856e+01, -1.247918768062058e-01, 0.000000000000000e+00, -7.304969064211794e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_2d_prhg07_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_2d_prhg07", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [-6.216246055659123e-05, -6.216220970150745e-05, -6.216096585296124e-05, -6.216470031607494e-05, -6.216276175995022e-05, -6.216276175995022e-05, -9.373290533144824e-04, -9.373446504834137e-04, -9.376781346840933e-04, -9.368628119074297e-04, -9.373181165378362e-04, -9.373181165378362e-04, -7.735861070101012e-03, -7.695807920050137e-03, -6.775232195492783e-03, -6.835706671836039e-03, -6.875338812567154e-03, -6.875338812567154e-03, -1.334574953354611e-02, -1.379339601416603e-02, -6.507193438617655e-03, -1.024372269709193e-02, -1.206245499378718e-02, -1.206245499378718e-02, -4.327379502968336e-03, -4.430382049789933e-03, -5.964089799147555e-03, -3.782432133513696e-03, -4.144551988495063e-03, -4.144551988495065e-03, -2.716397951585601e-04, -3.766266467222517e-04, 0.000000000000000e+00, -2.002304882202733e-04, -9.347750202483608e-04, -4.597653698806254e-04, 0.000000000000000e+00, -1.257674755303184e-03, -1.617364740411897e-03, -1.615584146730391e-03, -1.626350882947702e-03, -1.982645780441973e-03, -1.542272999881031e-03, -2.982681468934606e-03, -1.708511465671924e-03, -1.341607343480835e-02, -9.700960487574198e-03, -7.490910437208204e-03, 0.000000000000000e+00, -3.325533400008739e-03, 0.000000000000000e+00, -2.160846368582742e-03, -1.183512623520127e-02, -1.679979604541030e-02, -1.343669695527232e-03, -3.099017474456323e-05, 0.000000000000000e+00, 0.000000000000000e+00, -2.933571519304721e-03, 0.000000000000000e+00, -9.050893167402431e-06, 0.000000000000000e+00, 0.000000000000000e+00, -1.415423765664856e-04, 0.000000000000000e+00, -2.143770700412771e-06, 0.000000000000000e+00, -1.132420234638059e-02, -2.172717529414194e-03, 0.000000000000000e+00, -8.189988248062822e-03, -1.269450843806452e-03, -1.343180347477133e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -6.876864192161771e-03, -9.268078255102520e-03, -1.130469926882892e-02, 0.000000000000000e+00, -5.856095621310965e-03, -1.863706220219350e-02, 0.000000000000000e+00, -1.096657037213475e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_2d_prhg07_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_2d_prhg07", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.486498422263649e-04, 2.486488388060298e-04, 2.486438634118449e-04, 2.486588012642998e-04, 2.486510470398009e-04, 2.486510470398009e-04, 3.749316213257929e-03, 3.749378601933655e-03, 3.750712538736373e-03, 3.747451247629719e-03, 3.749272466151345e-03, 3.749272466151345e-03, 3.094344428040405e-02, 3.078323168020055e-02, 2.710092878197113e-02, 2.734282668734416e-02, 2.750135525026862e-02, 2.750135525026862e-02, 5.338299813418446e-02, 5.517358405666414e-02, 2.602877375447062e-02, 4.097489078836770e-02, 4.824981997514873e-02, 4.824981997514871e-02, 1.730951801187334e-02, 1.772152819915973e-02, 2.385635919659022e-02, 1.512972853405478e-02, 1.657820795398025e-02, 1.657820795398026e-02, 1.086559180634240e-03, 1.506506586889007e-03, 0.000000000000000e+00, 8.009219528810932e-04, 3.739100080993443e-03, 1.839061479522502e-03, 0.000000000000000e+00, 5.030699021212737e-03, 6.469458961647587e-03, 6.462336586921566e-03, 6.505403531790807e-03, 7.930583121767891e-03, 6.169091999524126e-03, 1.193072587573843e-02, 6.834045862687698e-03, 5.366429373923338e-02, 3.880384195029679e-02, 2.996364174883282e-02, 0.000000000000000e+00, 1.330213360003495e-02, 0.000000000000000e+00, 8.643385474330969e-03, 4.734050494080506e-02, 6.719918418164118e-02, 5.374678782108927e-03, 1.239606989782529e-04, 0.000000000000000e+00, 0.000000000000000e+00, 1.173428607721888e-02, 0.000000000000000e+00, 3.620357266960972e-05, 0.000000000000000e+00, 0.000000000000000e+00, 5.661695062659424e-04, 0.000000000000000e+00, 8.575082801651083e-06, 0.000000000000000e+00, 4.529680938552236e-02, 8.690870117656775e-03, 0.000000000000000e+00, 3.275995299225129e-02, 5.077803375225808e-03, 5.372721389908530e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 2.750745676864708e-02, 3.707231302041008e-02, 4.521879707531570e-02, 0.000000000000000e+00, 2.342438248524386e-02, 7.454824880877400e-02, 0.000000000000000e+00, 4.386628148853901e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
