
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_6_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_6", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.290693309600495e+01, -2.290698714538406e+01, -2.290732798997745e+01, -2.290652538037131e+01, -2.290693157594079e+01, -2.290693157594079e+01, -3.453894157630970e+00, -3.453933448588673e+00, -3.455236286060857e+00, -3.456974688522711e+00, -3.455608380199824e+00, -3.455608380199824e+00, -6.537480019597798e-01, -6.534068829970617e-01, -6.459352496435106e-01, -6.535224064288704e-01, -6.511801675618013e-01, -6.511801675618013e-01, -1.907902658274346e-01, -1.932400179661267e-01, -7.508536086075973e-01, -1.409654274259246e-01, -1.594205863805046e-01, -1.594205863805046e-01, -6.554265197130040e-03, -6.894681197622649e-03, -3.777535126086527e-02, -3.754223802426862e-03, -4.733361755142291e-03, -4.733361755142291e-03, -5.573985228739481e+00, -5.574245013992338e+00, -5.574044465624479e+00, -5.574271932743578e+00, -5.574092444793217e+00, -5.574092444793217e+00, -2.126165747558836e+00, -2.147689694360400e+00, -2.123521357178910e+00, -2.143102938241080e+00, -2.139279465916951e+00, -2.139279465916951e+00, -6.062651549264714e-01, -6.435654720806615e-01, -5.464100468563374e-01, -5.487864187679876e-01, -6.162257474507910e-01, -6.162257474507910e-01, -9.822181407547025e-02, -1.899949684032206e-01, -9.078129490640269e-02, -1.868676176923304e+00, -1.160470561605439e-01, -1.160470561605439e-01, -2.843984822832526e-03, -3.636428488421508e-03, -2.803001565592738e-03, -6.105770296927534e-02, -3.355675781416126e-03, -3.355675781416125e-03, -6.172326356371720e-01, -6.170859988801579e-01, -6.171424156613352e-01, -6.171793072749696e-01, -6.171585493452053e-01, -6.171585493452053e-01, -5.956595785403841e-01, -5.382647268862667e-01, -5.556236316963348e-01, -5.713847445593370e-01, -5.630093469533174e-01, -5.630093469533174e-01, -6.675809000801128e-01, -2.419392934467108e-01, -2.876176973500424e-01, -3.616826134120443e-01, -3.252505290134633e-01, -3.252505290134633e-01, -4.811735020656647e-01, -3.631593170972699e-02, -4.921338004308114e-02, -3.468952328884084e-01, -7.799965746742181e-02, -7.799965746742185e-02, -9.083531009902468e-03, -9.474848602248335e-04, -2.067239263590163e-03, -7.358994418564790e-02, -3.116930921203879e-03, -3.116930921203876e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_6_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_6", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.770586785071502e+01, -2.770599558467778e+01, -2.770647815803899e+01, -2.770457795823563e+01, -2.770558576262877e+01, -2.770558576262877e+01, -4.385394054251273e+00, -4.385501703367253e+00, -4.388358088739524e+00, -4.387046640765574e+00, -4.386964529667578e+00, -4.386964529667578e+00, -8.004916609654623e-01, -7.996465276504509e-01, -7.823181662768514e-01, -7.906799135892549e-01, -7.884208541968555e-01, -7.884208541968555e-01, -2.232719759856749e-01, -2.256588946316703e-01, -9.201068565847607e-01, -1.734337456000354e-01, -1.927763036347523e-01, -1.927763036347524e-01, -8.193215323337232e-03, -8.624467247252163e-03, -4.756662985361521e-02, -4.738116247209983e-03, -5.950658952720123e-03, -5.950658952720121e-03, -6.871105634472600e+00, -6.875328920093314e+00, -6.871273365890963e+00, -6.875002587923676e+00, -6.873259851345053e+00, -6.873259851345053e+00, -2.406596840326515e+00, -2.422480637159146e+00, -2.393604553052610e+00, -2.407102227322792e+00, -2.422136247867333e+00, -2.422136247867333e+00, -7.579428724594522e-01, -8.740594643052473e-01, -6.906150889240031e-01, -7.556760048789921e-01, -7.757459952834983e-01, -7.757459952834983e-01, -1.227879898964691e-01, -2.282143076624589e-01, -1.137539440965770e-01, -2.607773446199685e+00, -1.430724963747413e-01, -1.430724963747414e-01, -3.664443091124409e-03, -4.637919861214437e-03, -3.542386956695621e-03, -7.692495145725867e-02, -4.271242186706709e-03, -4.271242186706705e-03, -8.195409763938688e-01, -8.013785739283978e-01, -8.077124289402011e-01, -8.129971650150072e-01, -8.103500153104388e-01, -8.103500153104388e-01, -8.023887060541995e-01, -6.075776064093159e-01, -6.528744145904263e-01, -7.090120188864183e-01, -6.796228858385130e-01, -6.796228858385129e-01, -9.124612367262260e-01, -2.839211176247619e-01, -3.318741505050636e-01, -4.290030302075100e-01, -3.733704201156644e-01, -3.733704201156642e-01, -5.628603671536687e-01, -4.551773727680736e-02, -6.201053498999532e-02, -4.202487485499298e-01, -9.753888139954864e-02, -9.753888139954885e-02, -1.159319846036900e-02, -1.242488299092231e-03, -2.597382298304403e-03, -9.175430311591930e-02, -3.950156010459617e-03, -3.950156010459612e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_6_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_6", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.455186651082836e-08, -1.455177317825815e-08, -1.455131779589868e-08, -1.455271387200241e-08, -1.455198802331604e-08, -1.455198802331604e-08, -1.318416084254268e-05, -1.318640472778481e-05, -1.324513092780415e-05, -1.322172835347852e-05, -1.322758513252560e-05, -1.322758513252560e-05, -4.685096172386036e-03, -4.672813091182232e-03, -4.385578354765088e-03, -4.637849758954115e-03, -4.573409589071305e-03, -4.573409589071305e-03, -6.656984796041131e-01, -6.710432768010942e-01, -1.196302288236230e-03, -5.362109145143713e-01, -6.011080002692097e-01, -6.011080002692099e-01, -2.152442638224711e+02, -1.976564192167107e+02, -4.534943499738056e+00, -5.212569313196509e+02, -3.992488398087682e+02, -3.992488398087680e+02, -4.317094173925584e-06, -4.316739053493321e-06, -4.317130765244495e-06, -4.316814222923795e-06, -4.316890118665388e-06, -4.316890118665388e-06, -1.201015026123484e-04, -1.208025427733434e-04, -1.198021423752691e-04, -1.206063377250930e-04, -1.206328477313440e-04, -1.206328477313440e-04, -2.144815476362785e-02, -1.769845773578644e-02, -2.437291913096136e-02, -2.413202908468039e-02, -2.086164024264613e-02, -2.086164024264613e-02, -7.624491002923383e-01, -3.385975957025426e-01, -8.746280397806373e-01, -1.896131100077239e-04, -8.692352888952760e-01, -8.692352888952762e-01, -6.207868076411171e+02, -4.765638764415973e+02, -2.473141248191239e+03, -1.942919545200106e+00, -1.004644879595772e+03, -1.004644879595772e+03, -2.729495482311062e-02, -2.757197571921105e-02, -2.748673341418003e-02, -2.740690144944744e-02, -2.744788427488615e-02, -2.744788427488615e-02, -3.019882858027900e-02, -4.111885298306128e-02, -3.923822282595285e-02, -3.619954648070389e-02, -3.785637567895989e-02, -3.785637567895989e-02, -1.405871214898782e-02, -2.387685023666634e-01, -1.840160851043752e-01, -1.150735872774329e-01, -1.582522118668119e-01, -1.582522118668119e-01, -4.925072356690328e-02, -5.110125788861948e+00, -2.573653293660502e+00, -1.648290791911676e-01, -1.572195781618653e+00, -1.572195781618653e+00, -6.528051926283477e+01, -5.461592612623118e+03, -3.136607055077020e+03, -1.864256195451157e+00, -1.444617217734470e+03, -1.444617217734474e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_6_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_6", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_6_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_6", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.706713455158774e-03, 1.706714832909849e-03, 1.706733695732487e-03, 1.706714268074642e-03, 1.706722618635891e-03, 1.706722618635891e-03, 4.541021149655926e-03, 4.542462701335036e-03, 4.582293879610583e-03, 4.583651182876719e-03, 4.576464490208525e-03, 4.576464490208525e-03, 5.743918189398452e-03, 5.735523386013274e-03, 5.813536939539728e-03, 7.125200450874556e-03, 6.681167440218140e-03, 6.681167440218140e-03, 5.361925159616766e-02, 5.528897998517493e-02, -6.734654829315882e-04, 1.555913434835634e-02, 2.642663813863776e-02, 2.642663813863780e-02, 7.428086686293378e-04, 7.898907799013649e-04, 2.780403879050927e-03, 3.113762719551177e-04, 4.953072852047907e-04, 4.953072852047907e-04, 7.294272185936874e-03, 7.295751070884812e-03, 7.294540876404065e-03, 7.295836704731377e-03, 7.294921562351806e-03, 7.294921562351806e-03, 1.172084443605061e-02, 1.217486795067121e-02, 1.175325287766473e-02, 1.218263468740164e-02, 1.195711183432156e-02, 1.195711183432156e-02, 4.642195855753283e-02, 4.839327704901157e-02, 3.568898156742962e-02, 3.703400083197814e-02, 4.777480998367165e-02, 4.777480998367165e-02, 7.893327140340252e-03, 2.759088752050649e-02, 7.085895193421125e-03, 1.194932301613501e-02, 1.561340462741343e-02, 1.561340462741345e-02, 1.234367377256727e-04, 2.304737767261453e-04, 6.067705992368448e-04, 4.811248777101578e-03, 3.912964248650179e-04, 3.912964248650149e-04, 6.525001557745432e-02, 6.493282220056126e-02, 6.505288270852576e-02, 6.514545100252897e-02, 6.509928161710564e-02, 6.509928161710564e-02, 6.585992239762083e-02, 6.366674023937610e-02, 6.583287784435021e-02, 6.653895857559261e-02, 6.615860069144373e-02, 6.615860069144373e-02, 4.236641311429228e-02, 3.988404831006084e-02, 4.759244874691465e-02, 5.015042083303126e-02, 5.486099834649080e-02, 5.486099834649093e-02, 5.345899239252695e-02, 2.912779972029496e-03, 3.425631936942273e-03, 6.456829064617019e-02, 8.374806836832262e-03, 8.374806836832277e-03, 4.870190210452046e-04, 2.520271137846931e-05, 3.258367521548947e-04, 8.749418587439189e-03, 4.735531835258655e-04, 4.735531835258616e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
