
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_6_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_6", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.082717134701115e+01, -2.082726984220356e+01, -2.082770939539344e+01, -2.082624665714743e+01, -2.082701281348862e+01, -2.082701281348862e+01, -3.154233016243608e+00, -3.154278989715813e+00, -3.155554391522876e+00, -3.155322919274546e+00, -3.155019768076786e+00, -3.862709253370110e+00, -6.059444501317213e-01, -7.499549191956465e-01, -7.294930672584614e-01, -7.358548776918520e-01, -7.345042960534214e-01, -7.345042960534214e-01, -1.931678039998806e-01, -1.962150813662800e-01, -7.271778768293387e-01, -1.449175160951613e-01, -1.635420183019163e-01, -1.635420183019163e-01, -6.558865009636128e-03, -6.903514683347016e-03, -3.812359662583177e-02, -3.787836933800734e-03, -4.759755875806756e-03, -4.759755875806756e-03, -5.576580660968126e+00, -5.576809911692236e+00, -5.576585894535625e+00, -5.187641378318191e+00, -5.576699388048872e+00, -5.576699388048872e+00, -1.761558579638524e+00, -1.776373232990410e+00, -1.750894024243169e+00, -1.763737210110164e+00, -1.775042196163836e+00, -2.195764500516783e+00, -6.432292485003046e-01, -6.870164142387674e-01, -6.010743215825830e-01, -6.184333605898764e-01, -6.516343908732606e-01, -5.623417545329900e-01, -9.131161863912399e-02, -1.922191539470530e-01, -8.471132695592290e-02, -2.094319843653173e+00, -1.177532801604315e-01, -1.177532801604315e-01, -2.747557596724382e-03, -3.702941249760581e-03, -2.831466914924693e-03, -5.751403843318285e-02, -3.206643046742604e-03, -3.411033641779543e-03, -6.227904443173466e-01, -6.224379738058754e-01, -6.021734770632966e-01, -6.226675928745646e-01, -6.226194134145850e-01, -6.226194134145850e-01, -6.063447567396290e-01, -5.430947876647354e-01, -5.625012596636908e-01, -5.801643221982046e-01, -5.712969204407518e-01, -5.075175327386701e-01, -7.236352953843925e-01, -2.033288138283253e-01, -2.944129632694855e-01, -3.127566273864988e-01, -3.383180110433748e-01, -3.383180110433748e-01, -4.121102596582872e-01, -3.648632268532995e-02, -4.977725299525991e-02, -3.716332926326940e-01, -7.260118563981370e-02, -7.908113258668155e-02, -9.256717800793504e-03, -9.898101811865612e-04, -2.077666700196323e-03, -7.423075697706738e-02, -3.156274213301296e-03, -3.156274213301293e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_6_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_6", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.994234038795728e+01, -2.994244442173633e+01, -2.994292442787729e+01, -2.994137755954107e+01, -2.994218561382665e+01, -2.994218561382665e+01, -4.454811537410295e+00, -4.455004004880259e+00, -4.460151927788538e+00, -4.458476298174216e+00, -4.458192782137769e+00, -4.246316899378146e+00, -7.714838662767126e-01, -8.465416780865544e-01, -8.322767019243618e-01, -8.353899021654222e-01, -8.348005005755622e-01, -8.348005005755622e-01, -2.248940110169722e-01, -2.276346417512148e-01, -8.955132200851272e-01, -1.760453137703945e-01, -1.958515573572935e-01, -1.958515573572932e-01, -8.192273497674445e-03, -8.622668995257574e-03, -4.753475142612009e-02, -4.731408129429285e-03, -5.945326997211219e-03, -5.945326997211219e-03, -6.867847908343590e+00, -6.872106151202609e+00, -6.868083207779357e+00, -7.334777800175306e+00, -6.869985969055209e+00, -6.869985969055209e+00, -2.423008700293970e+00, -2.457498251168602e+00, -2.397119750701319e+00, -2.427637198081415e+00, -2.454866049004487e+00, -2.411175879617186e+00, -7.274754206593624e-01, -8.250028992253599e-01, -6.636699132101311e-01, -7.003323964829784e-01, -7.439342837735649e-01, -8.185106039532982e-01, -1.184997768675150e-01, -2.298452008406208e-01, -1.102974003164176e-01, -2.405485897777031e+00, -1.440069551701393e-01, -1.440069551701392e-01, -3.663313117261759e-03, -4.625374562506355e-03, -3.536763423975739e-03, -7.574099093516061e-02, -4.275217005604384e-03, -4.260709575537472e-03, -8.121953888038537e-01, -7.943885838438854e-01, -8.268500558775154e-01, -8.057652598421922e-01, -8.031659313165158e-01, -8.031659313165158e-01, -7.883813197326790e-01, -6.042918121431632e-01, -6.461919943882040e-01, -6.986413052748466e-01, -6.706285598030799e-01, -7.346204490675251e-01, -8.534778530093520e-01, -2.504931179436028e-01, -3.354471673388905e-01, -4.289346440272759e-01, -3.760117424734168e-01, -3.760117424734168e-01, -5.848572739609053e-01, -4.549973670454099e-02, -6.199532753899884e-02, -4.093198087081736e-01, -9.461238848179716e-02, -9.782610088130357e-02, -1.156166619002466e-02, -1.236402109797060e-03, -2.595251257460825e-03, -9.190018593634022e-02, -3.942487984478071e-03, -3.942487984478066e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_6_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_6", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.354549886355249e-08, -1.354543330344501e-08, -1.354506076884116e-08, -1.354604350645250e-08, -1.354554003213508e-08, -1.354554003213508e-08, -1.240154481179044e-05, -1.240367930279067e-05, -1.245905459183944e-05, -1.243217450793523e-05, -1.244022589798648e-05, -1.429665157340964e-05, -4.410125990245129e-03, -5.212366501684799e-03, -4.865119073112787e-03, -5.113261118708821e-03, -5.053534810440449e-03, -5.053534810440449e-03, -6.740135200493614e-01, -6.810395222654352e-01, -1.148164892758486e-03, -5.697824560110032e-01, -6.251699677522862e-01, -6.251699677522863e-01, -2.162214515702951e+02, -1.993028593541927e+02, -4.799238854392108e+00, -5.542175277267688e+02, -4.144018373877256e+02, -4.144018373877256e+02, -4.318678661163840e-06, -4.318305465211527e-06, -4.318682328562786e-06, -4.081911189181146e-06, -4.318481915958160e-06, -4.318481915958160e-06, -1.055166983672413e-04, -1.060386771083067e-04, -1.048589705893541e-04, -1.054634339067827e-04, -1.061258501182898e-04, -1.228824441707969e-04, -2.238727547171487e-02, -1.860247610172931e-02, -2.606132852060743e-02, -2.628984486006893e-02, -2.173115307619582e-02, -1.954798968009062e-02, -4.725820862432357e-01, -3.444454185175289e-01, -5.287861854663817e-01, -2.059949394570653e-04, -9.033727127605224e-01, -9.033727127605226e-01, -3.104970852492669e+02, -5.452018822213172e+02, -2.652738666127946e+03, -1.038316085598753e+00, -4.545066756505848e+02, -1.132206219002863e+03, -2.749815005514251e-02, -2.776589129380654e-02, -2.694390473799707e-02, -2.760698192218335e-02, -2.764670573923358e-02, -2.764670573923358e-02, -3.064445314694186e-02, -4.138392356252266e-02, -3.959760578981911e-02, -3.662787412614197e-02, -3.827632065054928e-02, -3.506428383248264e-02, -1.493352325899468e-02, -1.957579410868498e-01, -1.876495090466268e-01, -1.041674434644099e-01, -1.629144358213301e-01, -1.629144358213301e-01, -4.430787111428458e-02, -5.256640069874393e+00, -2.751465825142303e+00, -1.730203582533270e-01, -9.291734635722391e-01, -1.664998474012683e+00, -7.511560376485042e+01, -8.437873057253668e+03, -3.243897407631546e+03, -1.933884315057637e+00, -1.578695576345141e+03, -1.578695576345146e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_6_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_6", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.273968690435349e-03, 1.273985072253103e-03, 1.274048779034116e-03, 1.273806555078603e-03, 1.273934759939503e-03, 1.273934759939503e-03, 1.873300556273042e-03, 1.874769577258835e-03, 1.913588580535804e-03, 1.897699154656031e-03, 1.899598321572796e-03, 8.441466742022142e-03, -3.478143872161436e-03, 2.523058458673727e-02, 2.214675242751681e-02, 2.365925121844701e-02, 2.330705243571082e-02, 2.330705243571082e-02, 5.906114157068951e-02, 6.217684109784026e-02, -3.004712963325008e-03, 2.220183971059834e-02, 3.460117804181861e-02, 3.460117804181862e-02, 7.524579030343612e-04, 8.088025257325450e-04, 3.305501108121068e-03, 3.713960703961169e-04, 5.510593586658332e-04, 5.510593586658332e-04, 7.302855183825839e-03, 7.304211696777342e-03, 7.302944129294791e-03, 6.064017434553656e-03, 7.303531699818675e-03, 7.303531699818675e-03, 1.431070700915588e-03, 1.761959363983951e-03, 1.179928543313090e-03, 1.468004619321630e-03, 1.743238967444506e-03, 1.363911030695333e-02, 5.847841500538894e-02, 5.855589425675461e-02, 5.711132185124536e-02, 6.098627132891382e-02, 5.873811341250586e-02, 3.202073974542723e-02, -1.773735112028801e-03, 3.090085549166763e-02, -1.470723890707824e-03, 1.844321302969251e-02, 1.891152079447393e-02, 1.891152079447393e-02, -5.634513426845398e-08, 3.413315193344259e-04, 7.425654709911422e-04, -5.876198286781344e-04, -3.550944704880124e-07, 5.540927389570554e-04, 6.634944121171418e-02, 6.612988383160757e-02, 6.189843231478987e-02, 6.628246202400855e-02, 6.625124053935201e-02, 6.625124053935201e-02, 6.811878421693154e-02, 6.601445008587817e-02, 6.868550231715349e-02, 6.945278085973688e-02, 6.926611904948371e-02, 4.635747903940601e-02, 5.490330347449663e-02, -1.102497452835382e-02, 5.600799208734059e-02, 7.134842090982207e-03, 6.974439583832338e-02, 6.974439583832355e-02, 1.639091043656392e-02, 3.171970812881235e-03, 4.236712697026010e-03, 9.024088282122759e-02, -1.590969789581315e-03, 1.046287525124626e-02, 7.349513555415206e-04, 1.008856580084828e-04, 3.587207209990551e-04, 1.003609443325117e-02, 6.121006614569949e-04, 6.121006614569904e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
