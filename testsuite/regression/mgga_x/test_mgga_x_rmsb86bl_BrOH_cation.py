
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_rmsb86bl_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmsb86bl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.198368932065642e+01, -2.198373497381386e+01, -2.198398733624281e+01, -2.198330739896188e+01, -2.198365663836035e+01, -2.198365663836035e+01, -3.378414426580001e+00, -3.378414256616625e+00, -3.378617192647687e+00, -3.380074678693211e+00, -3.379066923570368e+00, -3.379066923570368e+00, -6.522420584568800e-01, -6.519661950205990e-01, -6.477820123675144e-01, -6.562938195232741e-01, -6.570181203161165e-01, -6.570181203161165e-01, -2.067218628738794e-01, -2.073546719724795e-01, -7.311957405821063e-01, -1.730197779528256e-01, -1.999482544241801e-01, -1.999482544241800e-01, -2.055884092301997e-02, -2.123771799015826e-02, -7.528442374700312e-02, -1.409906477859876e-02, -1.745484500043220e-02, -1.745484500043220e-02, -5.323466056228979e+00, -5.323660317618634e+00, -5.323482596159288e+00, -5.323653951981755e+00, -5.323560300986786e+00, -5.323560300986786e+00, -2.106893138005585e+00, -2.124220347928941e+00, -2.107608114422109e+00, -2.122618577349203e+00, -2.116389884044889e+00, -2.116389884044889e+00, -5.932991548198854e-01, -6.311137143216747e-01, -5.333051840795953e-01, -5.372043813918989e-01, -6.036271285198154e-01, -6.036271285198155e-01, -1.433075301826558e-01, -2.202325302015478e-01, -1.359947208797931e-01, -1.827484932593299e+00, -1.525583025382970e-01, -1.525583025382970e-01, -1.154897769179403e-02, -1.370713823588006e-02, -9.893468091636357e-03, -1.032660430303538e-01, -1.227506728738176e-02, -1.227506728738177e-02, -5.930234617750160e-01, -5.926943184733808e-01, -5.928122750115152e-01, -5.929035308016425e-01, -5.928572388881146e-01, -5.928572388881146e-01, -5.754497619957810e-01, -5.217353170548177e-01, -5.363951249780270e-01, -5.512798021192732e-01, -5.434438368101402e-01, -5.434438368101402e-01, -6.544954133359910e-01, -2.655971206292492e-01, -2.980104135202789e-01, -3.538523146573484e-01, -3.249803065783967e-01, -3.249803065783967e-01, -4.725561888854433e-01, -7.341569033394581e-02, -9.115070338132562e-02, -3.391971106939609e-01, -1.182400715384814e-01, -1.182400715384814e-01, -2.664403596146678e-02, -4.920462927461381e-03, -8.623244363332987e-03, -1.140692998688297e-01, -1.138417648987020e-02, -1.138417648987020e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_rmsb86bl_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmsb86bl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.774365343522968e+01, -2.774406982884888e+01, -2.774377642037373e+01, -2.774415908695969e+01, -2.774420717427061e+01, -2.774476579212999e+01, -2.774282173587137e+01, -2.774299929965719e+01, -2.774372662641726e+01, -2.774373259079711e+01, -2.774372662641726e+01, -2.774373259079711e+01, -4.193237723640142e+00, -4.192651276369967e+00, -4.193523230374133e+00, -4.192803270780431e+00, -4.198745059088369e+00, -4.199643708281428e+00, -4.198617733238443e+00, -4.198373869822613e+00, -4.191962541980391e+00, -4.203234804029641e+00, -4.191962541980391e+00, -4.203234804029641e+00, -7.899327126192652e-01, -7.977559472004162e-01, -7.872427554109314e-01, -7.966095186960627e-01, -7.508235949486447e-01, -7.405223372338586e-01, -7.563663123782697e-01, -7.608541102410840e-01, -8.086087938511405e-01, -6.994001547894343e-01, -8.086087938511405e-01, -6.994001547894343e-01, -1.368227385433179e-01, -1.754841007502551e-01, -1.460830427229476e-01, -1.738801070872437e-01, -8.361562225966512e-01, -8.896212670069610e-01, -1.335803860370336e-01, -1.302997185793857e-01, -1.518074785884609e-01, -1.134413233450965e-01, -1.518074785884607e-01, -1.134413233450964e-01, -1.886997135161449e-02, -1.970265681527749e-02, -1.947486534835687e-02, -2.049955801799033e-02, -7.037320087348882e-02, -7.279772691879699e-02, -1.305004500084590e-02, -1.291524856843951e-02, -1.734328721263027e-02, -1.077039021363242e-02, -1.734328721263025e-02, -1.077039021363247e-02, -6.836343418965643e+00, -6.834762155995137e+00, -6.838625410122087e+00, -6.836965941603846e+00, -6.836511155232662e+00, -6.834867413128804e+00, -6.838467483427894e+00, -6.836867809552761e+00, -6.837481610804828e+00, -6.835864078751845e+00, -6.837481610804828e+00, -6.835864078751845e+00, -2.212850907943384e+00, -2.218428455993750e+00, -2.266233320307258e+00, -2.270412948647574e+00, -2.202397130605767e+00, -2.210364038681941e+00, -2.254374905361696e+00, -2.262307904634685e+00, -2.253736269763698e+00, -2.247229096526135e+00, -2.253736269763698e+00, -2.247229096526135e+00, -7.433808756837972e-01, -7.414104993664643e-01, -8.567012789579488e-01, -8.565459405670893e-01, -6.492558683418690e-01, -6.933794884995544e-01, -7.089115838781603e-01, -7.574365930659157e-01, -7.803030681574717e-01, -7.402501165586254e-01, -7.803030681574719e-01, -7.402501165586254e-01, -1.160129450556627e-01, -1.161849712783757e-01, -1.298122047395608e-01, -1.349716284831200e-01, -1.109787170781353e-01, -1.128154751172359e-01, -2.561180505995362e+00, -2.560311751138693e+00, -1.137316744026684e-01, -1.137274791092818e-01, -1.137316744026684e-01, -1.137274791092820e-01, -1.034831678769959e-02, -1.074729950544958e-02, -1.252640920070202e-02, -1.273298697868958e-02, -9.011014928502752e-03, -9.332659972543908e-03, -9.142444588031080e-02, -9.202423667095436e-02, -9.590821062505297e-03, -1.211812137480685e-02, -9.590821062505308e-03, -1.211812137480685e-02, -7.846830893616829e-01, -7.877921935606962e-01, -7.752087943374988e-01, -7.784037696393313e-01, -7.785116919604693e-01, -7.816979970032348e-01, -7.812845717691724e-01, -7.844051217805132e-01, -7.798960725529568e-01, -7.830485849855237e-01, -7.798960725529568e-01, -7.830485849855237e-01, -7.661303558265976e-01, -7.685768787242515e-01, -6.132417417286306e-01, -6.165794858250567e-01, -6.550227951481040e-01, -6.586453790186941e-01, -6.991923854287266e-01, -7.018616530538969e-01, -6.763578675047949e-01, -6.793343422371030e-01, -6.763578675047949e-01, -6.793343422371030e-01, -9.007600798821939e-01, -9.020608766423640e-01, -1.903124391308292e-01, -1.910076241999634e-01, -2.379160026487836e-01, -2.432805013356878e-01, -3.997648043829714e-01, -4.028178788267782e-01, -3.126382636797592e-01, -3.131810397581432e-01, -3.126382636797593e-01, -3.131810397581432e-01, -5.296750635652153e-01, -5.370612011615870e-01, -6.998038764226004e-02, -7.032882508990755e-02, -8.405231732297078e-02, -8.538362353684131e-02, -4.002785573894413e-01, -4.084433325284929e-01, -9.865124252557057e-02, -9.692879434846942e-02, -9.865124252557053e-02, -9.692879434846938e-02, -2.501170404762634e-02, -2.565275554235550e-02, -4.475752203895665e-03, -4.296000105345144e-03, -7.669292641160083e-03, -7.981466678793056e-03, -9.513702685040337e-02, -8.900114607664401e-02, -8.780295328789130e-03, -1.133689869486812e-02, -8.780295328789132e-03, -1.133689869486809e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rmsb86bl_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmsb86bl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-9.157432718321282e-09, 0.000000000000000e+00, -9.150502588398743e-09, -9.157224970559321e-09, 0.000000000000000e+00, -9.150352680756555e-09, -9.155660472498593e-09, 0.000000000000000e+00, -9.148364712471892e-09, -9.157961019798230e-09, 0.000000000000000e+00, -9.151305665240084e-09, -9.157327515979547e-09, 0.000000000000000e+00, -9.149473159101562e-09, -9.157327515979547e-09, 0.000000000000000e+00, -9.149473159101562e-09, -1.647976892367631e-05, 0.000000000000000e+00, -1.642111242235909e-05, -1.649801330642393e-05, 0.000000000000000e+00, -1.642864457523467e-05, -1.680616036040330e-05, 0.000000000000000e+00, -1.684847826362697e-05, -1.689861902263251e-05, 0.000000000000000e+00, -1.685187537114459e-05, -1.645441139933172e-05, 0.000000000000000e+00, -1.713914197333335e-05, -1.645441139933172e-05, 0.000000000000000e+00, -1.713914197333335e-05, -1.254403962137026e-02, 0.000000000000000e+00, -1.251054620780514e-02, -1.257497899817250e-02, 0.000000000000000e+00, -1.251865899707091e-02, -1.288322510602946e-02, 0.000000000000000e+00, -1.313254364750189e-02, -1.310289130041198e-02, 0.000000000000000e+00, -1.311843920769508e-02, -1.221168918245415e-02, 0.000000000000000e+00, -1.402920783563928e-02, -1.221168918245415e-02, 0.000000000000000e+00, -1.402920783563928e-02, -3.843634618034033e+00, 0.000000000000000e+00, -2.344615985055071e+00, -3.492303436476039e+00, 0.000000000000000e+00, -2.525736418019433e+00, -5.547784057122469e-03, 0.000000000000000e+00, -5.157784162639967e-03, -2.996218920051197e+00, 0.000000000000000e+00, -3.690460386013047e+00, -2.924532578358889e+00, 0.000000000000000e+00, -5.352461399964378e+00, -2.924532578358891e+00, 0.000000000000000e+00, -5.352461399964377e+00, -2.574041228799249e+03, 0.000000000000000e+00, -2.255668554318735e+03, -2.349675326056036e+03, 0.000000000000000e+00, -1.994325885564309e+03, -3.638075170284266e+01, 0.000000000000000e+00, -3.266449838311038e+01, -8.372835223214755e+03, 0.000000000000000e+00, -8.620774559133875e+03, -3.373246587561734e+03, 0.000000000000000e+00, -1.887851359310671e+04, -3.373246587561744e+03, 0.000000000000000e+00, -1.887851359310655e+04, -2.145328270766185e-06, 0.000000000000000e+00, -2.145250185799825e-06, -2.144019271338051e-06, 0.000000000000000e+00, -2.143988198094914e-06, -2.144403320753090e-06, 0.000000000000000e+00, -2.144592157528871e-06, -2.143313661731004e-06, 0.000000000000000e+00, -2.143478059837550e-06, -2.145302505193396e-06, 0.000000000000000e+00, -2.144723788898510e-06, -2.145302505193396e-06, 0.000000000000000e+00, -2.144723788898510e-06, -2.510214854994940e-04, 0.000000000000000e+00, -2.464532593595098e-04, -2.220224316754070e-04, 0.000000000000000e+00, -2.184312925377555e-04, -2.355404804364191e-04, 0.000000000000000e+00, -2.360583617036452e-04, -2.079562161872585e-04, 0.000000000000000e+00, -2.081320115513649e-04, -2.439802159499542e-04, 0.000000000000000e+00, -2.328342633529395e-04, -2.439802159499542e-04, 0.000000000000000e+00, -2.328342633529395e-04, -4.244499824218351e-02, 0.000000000000000e+00, -4.217630661632775e-02, -3.161984608569149e-02, 0.000000000000000e+00, -3.097931615450943e-02, -3.756065207870488e-02, 0.000000000000000e+00, -5.174727958170939e-02, -3.401457563485196e-02, 0.000000000000000e+00, -4.259176240649657e-02, -3.256084847573983e-02, 0.000000000000000e+00, -4.538366904765585e-02, -3.256084847573983e-02, 0.000000000000000e+00, -4.538366904765586e-02, -5.349838968599433e+00, 0.000000000000000e+00, -5.259392969591559e+00, -2.655808085646592e+00, 0.000000000000000e+00, -2.494405334281839e+00, -6.470517062391818e+00, 0.000000000000000e+00, -6.023225049817118e+00, -3.421132779122737e-04, 0.000000000000000e+00, -3.429929037275890e-04, -5.729476423930708e+00, 0.000000000000000e+00, -6.075075987814956e+00, -5.729476423930715e+00, 0.000000000000000e+00, -6.075075987814936e+00, -1.909660704577679e+04, 0.000000000000000e+00, -1.643440022038398e+04, -9.908912131462172e+03, 0.000000000000000e+00, -9.257392822510761e+03, -3.996207582916055e+04, 0.000000000000000e+00, -3.636574015279490e+04, -1.486765003585290e+01, 0.000000000000000e+00, -1.457659976876062e+01, -2.869520787405742e+04, 0.000000000000000e+00, -1.334115029322051e+04, -2.869520787405747e+04, 0.000000000000000e+00, -1.334115029322051e+04, -1.766736278868114e-02, 0.000000000000000e+00, -1.728337488333751e-02, -1.777864206733119e-02, 0.000000000000000e+00, -1.739780415568571e-02, -1.774122482697624e-02, 0.000000000000000e+00, -1.735716011431750e-02, -1.770761175413986e-02, 0.000000000000000e+00, -1.732761218035222e-02, -1.772722521537191e-02, 0.000000000000000e+00, -1.734420338850930e-02, -1.772722521537191e-02, 0.000000000000000e+00, -1.734420338850931e-02, -2.461428409980722e-02, 0.000000000000000e+00, -2.395271185189658e-02, -3.522232494256965e-02, 0.000000000000000e+00, -3.449057988931658e-02, -3.244432248829291e-02, 0.000000000000000e+00, -3.170585020938729e-02, -2.933628555429141e-02, 0.000000000000000e+00, -2.885641451523547e-02, -3.174310156165509e-02, 0.000000000000000e+00, -3.083976735149392e-02, -3.174310156165511e-02, 0.000000000000000e+00, -3.083976735149395e-02, -2.792844812585100e-02, 0.000000000000000e+00, -2.751272899264963e-02, -1.205365386075359e+00, 0.000000000000000e+00, -1.197600353546433e+00, -8.168200164125532e-01, 0.000000000000000e+00, -7.914043939022215e-01, -2.818110569386830e-01, 0.000000000000000e+00, -2.713764642668565e-01, -5.254968435491627e-01, 0.000000000000000e+00, -5.273066073165141e-01, -5.254968435491623e-01, 0.000000000000000e+00, -5.273066073165144e-01, -1.120985721705525e-01, 0.000000000000000e+00, -1.045603404222073e-01, -3.660656608966853e+01, 0.000000000000000e+00, -3.593900370782778e+01, -1.988292187862051e+01, 0.000000000000000e+00, -1.889797461729207e+01, -3.561158954382482e-01, 0.000000000000000e+00, -3.842266685270421e-01, -1.071111784825663e+01, 0.000000000000000e+00, -1.125092909413197e+01, -1.071111784825664e+01, 0.000000000000000e+00, -1.125092909413199e+01, -9.989852447734264e+02, 0.000000000000000e+00, -9.259607745330943e+02, -3.842090239013975e+05, 0.000000000000000e+00, -4.803637191923996e+05, -5.763719765227223e+04, 0.000000000000000e+00, -5.098244759623358e+04, -1.255826194424734e+01, 0.000000000000000e+00, -1.674485810912056e+01, -4.369150346196572e+04, 0.000000000000000e+00, -1.667782946661337e+04, -4.369150346196586e+04, 0.000000000000000e+00, -1.667782946661347e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rmsb86bl_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmsb86bl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rmsb86bl_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmsb86bl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.410143611671585e-04, 1.404771624860069e-04, 1.410058877888962e-04, 1.404710818284985e-04, 1.409127036065407e-04, 1.403561736567486e-04, 1.410048042267062e-04, 1.404743358777645e-04, 1.410105849379842e-04, 1.403788943079582e-04, 1.410105849379842e-04, 1.403788943079582e-04, 1.531488638386598e-03, 1.510951489312504e-03, 1.537651853399660e-03, 1.513429915457873e-03, 1.641139231713794e-03, 1.655416052412462e-03, 1.676667491511536e-03, 1.660665439958922e-03, 1.519656313996426e-03, 1.757698307897654e-03, 1.519656313996426e-03, 1.757698307897654e-03, 9.413933095174343e-03, 9.643643235649375e-03, 9.366094843741910e-03, 9.601832725091823e-03, 8.461406310994277e-03, 8.628178490520494e-03, 9.748568618412192e-03, 9.957794382778639e-03, 9.489395892477000e-03, 9.918527240863723e-03, 9.489395892477000e-03, 9.918527240863723e-03, 1.009053317389415e-01, 5.636386372778852e-02, 9.097495306709441e-02, 6.939291506397893e-02, 9.979768493821703e-04, 1.722434707394417e-03, 7.619320551300149e-03, 2.415411706537382e-02, 8.162511671256108e-02, 2.192170228769443e-04, 8.162511671256117e-02, 2.192170228769486e-04, 5.076812680479593e-06, 7.605572672802608e-05, 1.343459336035794e-06, 9.761749784247058e-06, 9.439941945147846e-06, 2.296343907435638e-05, 7.561113374160900e-10, 1.185162453753849e-09, 1.182993845465476e-07, 1.574890493270634e-10, 1.182993845467404e-07, 1.574890493194252e-10, 4.105715082723701e-05, 3.871090940555685e-05, 4.055199380531906e-05, 3.822547166811918e-05, 4.008762634675082e-05, 3.801562379958137e-05, 3.969112926405792e-05, 3.761039271439587e-05, 4.151045780059233e-05, 3.858558525097587e-05, 4.151045780059233e-05, 3.858558525097587e-05, 9.378376614125255e-03, 9.112972600059709e-03, 8.004571893748726e-03, 7.780189491851449e-03, 8.261433846150501e-03, 8.351792921893123e-03, 6.931077657613979e-03, 6.999084305750316e-03, 9.335878662493845e-03, 8.509398823990705e-03, 9.335878662493845e-03, 8.509398823990705e-03, 4.671415950041467e-02, 4.578219794714623e-02, 4.407131281658859e-02, 4.292879206139098e-02, 1.941667356507936e-02, 4.509169674789808e-02, 1.982043739723436e-02, 3.879359795558821e-02, 3.845656774258729e-02, 4.839789088632471e-02, 3.845656774258727e-02, 4.839789088632471e-02, 2.221692876037252e-03, 1.878995335797395e-03, 7.085540587903147e-02, 6.557860567224418e-02, 7.273256396453132e-04, 1.775731822715476e-03, 1.170129136043821e-02, 1.172170303322370e-02, 1.412341335766466e-02, 2.132677035210091e-02, 1.412341335766471e-02, 2.132677035210070e-02, 5.663524075837593e-12, 7.132641542934175e-12, 8.703437332580568e-11, 6.185628127246158e-11, 1.732909928802807e-09, 1.945738734946115e-09, 7.371323615060174e-05, 3.387593359894779e-04, 3.887853730773120e-12, 3.124591321602946e-07, 3.887853730781416e-12, 3.124591321630658e-07, 6.854302466483672e-03, 6.639149294699135e-03, 6.674543715847948e-03, 6.471525556141276e-03, 6.740164618722773e-03, 6.530274586803287e-03, 6.790509112371505e-03, 6.583653625997873e-03, 6.769707120493421e-03, 6.559783492389975e-03, 6.769707120493421e-03, 6.559783492389977e-03, 1.422940519341166e-02, 1.367757222807620e-02, 1.019009145146649e-02, 9.986651999833640e-03, 1.211951838148008e-02, 1.184759880029220e-02, 1.336213690451265e-02, 1.321829196823305e-02, 1.372066927535165e-02, 1.315407533725438e-02, 1.372066927535166e-02, 1.315407533725441e-02, 4.551761232038586e-02, 4.505617517320846e-02, 6.442390332517359e-02, 6.546440168498541e-02, 8.028303249946032e-02, 8.012181681029294e-02, 5.730349410031239e-02, 5.542385121712594e-02, 7.921831285801667e-02, 7.941033254886369e-02, 7.921831285801648e-02, 7.941033254886373e-02, 5.586303487075481e-02, 5.227364780232308e-02, 1.186353675163676e-04, 6.684833598375085e-05, 3.209467928305896e-05, 4.776746964202223e-05, 6.499324709703845e-02, 8.084815095611166e-02, 1.377386636096246e-03, 3.352609933933176e-03, 1.377386636096256e-03, 3.352609933933201e-03, 9.299897787087050e-10, 8.707129811972063e-10, 8.666178946934681e-14, 3.582514598688316e-14, 2.949801276780850e-09, 3.280584058531074e-09, 2.141463288066554e-03, 1.449344093259682e-02, 1.486053029750704e-11, 2.302948112063507e-07, 1.486053029943286e-11, 2.302948112060671e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
