
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_rmsb86bl_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmsb86bl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.043159216495555e+01, -2.043169338739683e+01, -2.043214318881154e+01, -2.122775193593104e+01, -2.122835243943616e+01, -2.202539606690133e+01, -3.479267079664933e+00, -3.758240675257051e+00, -3.756822349333979e+00, -3.757735194518668e+00, -3.757246710701560e+00, -3.478315983032073e+00, -5.875725327554735e-01, -6.799456155631103e-01, -7.655921099552495e-01, -6.699703664493737e-01, -5.743044806294403e-01, -7.670661179182312e-01, -1.813488089385150e-01, -1.835716921333714e-01, -8.181133174865008e-01, -1.858937494899431e-01, -2.102520989162660e-01, -2.001025259219553e-01, -2.058545896241019e-02, -1.433045486518633e-02, -5.545059431035047e-02, -1.435284623137107e-02, -1.760872477055990e-02, -1.760872477055990e-02, -5.324105370332505e+00, -5.324291851622862e+00, -5.324108482944661e+00, -5.324273555745531e+00, -5.209216004295728e+00, -5.209312360743640e+00, -2.146614954671632e+00, -2.155435544187485e+00, -2.140658118803244e+00, -2.148228238751317e+00, -1.973665553209993e+00, -2.154369235268986e+00, -5.813644263828640e-01, -6.562217206437775e-01, -5.820752700388300e-01, -5.937057907212626e-01, -5.925107776134234e-01, -6.252792632989483e-01, -1.501728703616348e-01, -1.883977852263173e-01, -1.423784780452048e-01, -2.005713668161974e+00, -1.588818605624988e-01, -1.588818605624988e-01, -7.704586661798250e-03, -1.426611912840707e-02, -1.009426054788049e-02, -7.758386667041606e-02, -1.260522234077583e-02, -1.260522234077583e-02, -5.945798155683466e-01, -5.941910639403164e-01, -5.863066994172796e-01, -5.913213573273695e-01, -5.873007114643656e-01, -5.908133619093467e-01, -5.788686379867514e-01, -4.899775487349630e-01, -5.095775887545664e-01, -5.541205385793119e-01, -5.461996965995450e-01, -5.217859498559502e-01, -6.633481499468693e-01, -2.694969442553154e-01, -2.691404499579588e-01, -3.488068203167803e-01, -3.404341486958670e-01, -3.045117481735712e-01, -4.884716537045513e-01, -2.857794619627404e-02, -9.334048379888313e-02, -3.605170465639217e-01, -1.227168190698814e-01, -1.227168190698815e-01, -7.260968880507042e-03, -5.778487727489933e-03, -1.631852824616240e-03, -5.793878095672080e-02, -1.164796934285890e-02, -5.003861029944035e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_rmsb86bl_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmsb86bl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.962077478945851e+01, -2.962097107405562e+01, -2.962090493794733e+01, -2.962106550332965e+01, -2.962132719392577e+01, -2.962166842050375e+01, -2.961985913984819e+01, -2.782561751671608e+01, -2.962085300322279e+01, -2.782627994664113e+01, -2.782658195586767e+01, -2.782627994664113e+01, -4.353872408395711e+00, -4.558360819035261e+00, -4.353955136116810e+00, -4.353806818325736e+00, -4.355543225477189e+00, -4.355873114668779e+00, -4.355333052477309e+00, -4.355395987196812e+00, -4.352990364194948e+00, -4.356909074838597e+00, -4.557924150868123e+00, -4.356909074838597e+00, -8.274059755624803e-01, -8.338793568152322e-01, -8.252149670030920e-01, -8.078644563509126e-01, -7.812224791964772e-01, -7.750260742148647e-01, -7.858920036702890e-01, -8.073588551107550e-01, -8.423879261235425e-01, -7.626914736942422e-01, -8.155695761974385e-01, -7.536026946786604e-01, -1.996311841316811e-01, -2.087563045678685e-01, -2.026633165891473e-01, -2.128993893618626e-01, -9.052640038198031e-01, -9.397429470768769e-01, -1.616834398160972e-01, -1.612234405455327e-01, -2.089960465155583e-01, -1.374470372311375e-01, -2.089960465155582e-01, -1.082898488041571e-01, -1.890830464278082e-02, -1.977708494461292e-02, -6.959212825901152e-03, -2.054318554606542e-02, -3.869717651939816e-02, -7.474223084488101e-02, -1.327293740624480e-02, -1.310258467261541e-02, -1.743058799713898e-02, -1.111650133421071e-02, -1.743058799713898e-02, -1.111650133421071e-02, -6.837236610214773e+00, -6.835604962466320e+00, -6.839493817269074e+00, -6.837785616184612e+00, -6.837382771112161e+00, -6.835694839593048e+00, -6.839318883832945e+00, -6.837675178358956e+00, -7.182440696463683e+00, -6.836697750529037e+00, -6.838377210805250e+00, -7.180713865538072e+00, -2.423516172522409e+00, -2.423951085969828e+00, -2.446881839694540e+00, -2.446602442673224e+00, -2.403579175532787e+00, -2.409702038018073e+00, -2.423867900237390e+00, -2.430244471891107e+00, -2.451567001780893e+00, -2.601119285898336e+00, -2.451567001780893e+00, -2.437950231867608e+00, -7.514595613831857e-01, -7.344564648261740e-01, -8.310124514760744e-01, -8.321767558460010e-01, -6.684789460482183e-01, -6.994254109836570e-01, -7.084970907630330e-01, -7.360220228384565e-01, -7.867420419826997e-01, -7.303627960293232e-01, -7.867420419826999e-01, -7.436575907199113e-01, -1.309283920491775e-01, -1.316538055960487e-01, -1.997293910613065e-01, -2.058217231466800e-01, -1.240812312453716e-01, -1.266390805252328e-01, -2.471771850956751e+00, -2.470726443024561e+00, -1.366094834075376e-01, -1.373973992510495e-01, -1.366094834075378e-01, -1.373973992510494e-01, -2.994927000540429e-03, -1.140168252111368e-02, -1.295273938638068e-02, -1.320847384581211e-02, -9.167590703188507e-03, -9.502042022405618e-03, -9.878082167515954e-02, -6.479972006934473e-02, -1.043602278018633e-02, -1.216262928194712e-02, -1.043602278018634e-02, -1.216262928194736e-02, -7.830237959741045e-01, -7.861664352377489e-01, -7.746124350632235e-01, -7.778007652982787e-01, -7.902929565119271e-01, -7.930930685528244e-01, -7.896847979945547e-01, -7.831510795920786e-01, -7.899480749760568e-01, -7.927830621874559e-01, -7.899480749760569e-01, -7.819429359633864e-01, -7.614754902447571e-01, -7.641227952762011e-01, -6.230418672731723e-01, -6.142807409232725e-01, -6.621366694938141e-01, -6.754784557505659e-01, -7.019673764390123e-01, -7.045732395370724e-01, -6.816885815344759e-01, -6.844503253149052e-01, -6.816885815344759e-01, -7.218747018532785e-01, -8.660444364459619e-01, -9.220783041674722e-01, -2.575681783818723e-01, -2.591157795636990e-01, -3.181967634321964e-01, -3.160834491432395e-01, -4.579197395371697e-01, -4.312742812986620e-01, -3.680856414446529e-01, -3.680997795247756e-01, -3.680856414446528e-01, -3.870345997390545e-01, -5.662495919262691e-01, -5.714125200623852e-01, -3.797331348269440e-02, -3.823314280695132e-02, -8.754771725498632e-02, -8.903804167471285e-02, -4.160640077284588e-01, -4.261010953557841e-01, -1.082791186459059e-01, -1.085035443739168e-01, -1.082791186459053e-01, -1.085035443739173e-01, -9.499895495367299e-03, -9.844308677142397e-03, -5.067763932154551e-03, -5.077477976448459e-03, -2.102791867398064e-03, -2.236488896936915e-03, -7.664120108522643e-02, -7.790376828524227e-02, -9.397106266941724e-03, -1.137954620440846e-02, -9.397106266941620e-03, -3.692773547394565e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rmsb86bl_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmsb86bl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.669243188820745e-08, 0.000000000000000e+00, -2.669492463112471e-08, -2.669243292343806e-08, 0.000000000000000e+00, -2.669492440642437e-08, -2.669223784693092e-08, 0.000000000000000e+00, -2.669469684864139e-08, -2.669225148648951e-08, 0.000000000000000e+00, -7.301590545626377e-09, -2.669245144504179e-08, 0.000000000000000e+00, -7.301122571774561e-09, -7.300714925903286e-09, 0.000000000000000e+00, -7.301122571774561e-09, -9.253944463044520e-06, 0.000000000000000e+00, -1.984502967012600e-05, -9.254323458097559e-06, 0.000000000000000e+00, -9.254324078966496e-06, -9.261839064428407e-06, 0.000000000000000e+00, -9.262791354391386e-06, -9.255988668628076e-06, 0.000000000000000e+00, -9.255482009369139e-06, -9.259033200134376e-06, 0.000000000000000e+00, -9.261539535313025e-06, -1.986318180709246e-05, 0.000000000000000e+00, -9.261539535313025e-06, -1.236525690722166e-02, 0.000000000000000e+00, -1.228503798672340e-02, -1.241011497720197e-02, 0.000000000000000e+00, -5.592044682634460e-03, -5.893868791425859e-03, 0.000000000000000e+00, -6.010118945024191e-03, -5.900513428096398e-03, 0.000000000000000e+00, -1.298040507325112e-02, -1.198980641037802e-02, 0.000000000000000e+00, -1.445848046739351e-02, -5.447844405502376e-03, 0.000000000000000e+00, -6.417374800113515e-03, -2.713380149427788e+00, 0.000000000000000e+00, -1.025263094916507e+00, -2.593677779453045e+00, 0.000000000000000e+00, -9.804588083639663e-01, -2.499074037204955e-03, 0.000000000000000e+00, -5.701315275461917e-03, -1.823884172190001e+00, 0.000000000000000e+00, -1.905650851540698e+00, -9.371343152836995e-01, 0.000000000000000e+00, -3.241768585417356e+00, -9.371343152836998e-01, 0.000000000000000e+00, -2.687859070241936e+01, -2.544658724220581e+03, 0.000000000000000e+00, -2.205207565326164e+03, -1.569518755741110e+06, 0.000000000000000e+00, -1.970708444766751e+03, -1.641824538501691e+03, 0.000000000000000e+00, -2.917914514712593e+01, -7.578422215989472e+03, 0.000000000000000e+00, -7.921974893105919e+03, -3.273104074370800e+03, 0.000000000000000e+00, -1.564703103935970e+04, -3.273104074370800e+03, 0.000000000000000e+00, -1.564703103935970e+04, -2.108076018288917e-06, 0.000000000000000e+00, -2.110101754499549e-06, -2.107245894042632e-06, 0.000000000000000e+00, -2.109299243538809e-06, -2.108032089065357e-06, 0.000000000000000e+00, -2.110075814012793e-06, -2.107319408062319e-06, 0.000000000000000e+00, -2.109346367922401e-06, -7.354739236011943e-06, 0.000000000000000e+00, -2.109698610576863e-06, -2.107649550659267e-06, 0.000000000000000e+00, -7.362171726219033e-06, -8.872113588589690e-05, 0.000000000000000e+00, -8.881555615943531e-05, -8.687846040069046e-05, 0.000000000000000e+00, -8.702339275519350e-05, -9.024065830974532e-05, 0.000000000000000e+00, -8.989883038266818e-05, -8.864047610941074e-05, 0.000000000000000e+00, -8.827684249083235e-05, -8.657369784220072e-05, 0.000000000000000e+00, -2.039117810622353e-04, -8.657369784220072e-05, 0.000000000000000e+00, -8.772660242630604e-05, -1.213761025531773e-02, 0.000000000000000e+00, -1.869830649192718e-02, -9.238816578634726e-03, 0.000000000000000e+00, -9.244297678865433e-03, -1.688414980815172e-02, 0.000000000000000e+00, -1.504666017396963e-02, -1.515887525405379e-02, 0.000000000000000e+00, -1.350808178314939e-02, -1.056844210338232e-02, 0.000000000000000e+00, -2.017325830176588e-02, -1.056844210338231e-02, 0.000000000000000e+00, -1.277972129783336e-02, -3.938439703303011e+00, 0.000000000000000e+00, -3.854260423132309e+00, -2.470468909228195e+00, 0.000000000000000e+00, -8.182001633710080e-01, -4.853448800992220e+00, 0.000000000000000e+00, -4.491741760101745e+00, -1.083312854111766e-04, 0.000000000000000e+00, -1.085340331385246e-04, -3.394982409079045e+00, 0.000000000000000e+00, -3.459303503959305e+00, -3.394982409079025e+00, 0.000000000000000e+00, -3.459303503959315e+00, -4.575746330388305e+07, 0.000000000000000e+00, -1.171537011867543e+04, -8.137428890965310e+03, 0.000000000000000e+00, -7.462415057726440e+03, -3.604961895724970e+04, 0.000000000000000e+00, -3.262623585645051e+04, -1.152400774901063e+01, 0.000000000000000e+00, -2.089696806546844e+02, -1.754391098794294e+04, 0.000000000000000e+00, -1.305520637692812e+04, -1.754391098794295e+04, 0.000000000000000e+00, -1.305520637692648e+04, -1.334618044887456e-02, 0.000000000000000e+00, -1.314626971871473e-02, -1.349809926525563e-02, 0.000000000000000e+00, -1.329594525733789e-02, -3.020234360480131e-02, 0.000000000000000e+00, -2.935206620709286e-02, -2.713288258674266e-02, 0.000000000000000e+00, -1.319996731779293e-02, -2.867165241971384e-02, 0.000000000000000e+00, -2.788614237828263e-02, -2.867165241971384e-02, 0.000000000000000e+00, -1.322143438970988e-02, -1.485590191131056e-02, 0.000000000000000e+00, -1.466687340158844e-02, -2.419207216476155e-02, 0.000000000000000e+00, -3.421677268022697e-02, -2.100424842192834e-02, 0.000000000000000e+00, -4.676209679977000e-02, -1.827802297841570e-02, 0.000000000000000e+00, -1.803210654807728e-02, -1.960850951503539e-02, 0.000000000000000e+00, -1.933691374298965e-02, -1.960850951503539e-02, 0.000000000000000e+00, -6.308120746284665e-02, -7.560660317177690e-03, 0.000000000000000e+00, -2.626996219056819e-02, -4.077386954671745e-01, 0.000000000000000e+00, -4.006379662220914e-01, -5.082006739035523e-01, 0.000000000000000e+00, -2.227694700593958e-01, -2.093207279082995e-01, 0.000000000000000e+00, -8.784159417889301e-02, -1.449747870643552e-01, 0.000000000000000e+00, -1.454459344926092e-01, -1.449747870643557e-01, 0.000000000000000e+00, -3.271200277296182e-01, -3.262150190124183e-02, 0.000000000000000e+00, -3.197108420277994e-02, -1.770634749064862e+03, 0.000000000000000e+00, -1.722991857364996e+03, -1.695741149088609e+01, 0.000000000000000e+00, -1.614144479149601e+01, -1.102744453435117e-01, 0.000000000000000e+00, -1.069206458596774e-01, -8.342830220760010e+00, 0.000000000000000e+00, -8.335590221362361e+00, -8.342830220760280e+00, 0.000000000000000e+00, -8.335590221362191e+00, -4.519930120928626e+05, 0.000000000000000e+00, -3.919820299020609e+05, -2.005727041657950e+05, 0.000000000000000e+00, -1.991255392958384e+05, -1.882876131502731e+08, 0.000000000000000e+00, -1.471431061308544e+08, -1.069348393194012e+02, 0.000000000000000e+00, -1.002145880362619e+02, -2.921830188691244e+04, 0.000000000000000e+00, -1.631274979811623e+04, -2.921830188691451e+04, 0.000000000000000e+00, -1.979685570884473e+07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rmsb86bl_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmsb86bl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.394632495852143e-03, 1.394840043340489e-03, 1.394658211615134e-03, 1.394858646053466e-03, 1.394728215090685e-03, 1.394962120440188e-03, 1.394439913300195e-03, -3.717527124227009e-20, 1.394649232137755e-03, 1.357736412939075e-19, -4.035557646785585e-19, 1.357736412939075e-19, -3.749552212597890e-18, 2.190448058113139e-03, 7.549058408834678e-18, 2.750740141227110e-18, -3.510198925011451e-18, -3.495934238495117e-18, -7.575795017906486e-19, 9.742766791245731e-19, 2.494934370456212e-18, 3.884175036767289e-18, 2.192568093603844e-03, 3.884175036767289e-18, 4.352429647132229e-03, 4.664902228099773e-03, 4.266765012500470e-03, -5.510446975380509e-17, 4.854399957729164e-17, 2.985124658208182e-17, -4.300889258061482e-17, 3.773617030239560e-03, 4.849617017266905e-03, 2.421852520386822e-03, -1.366723074080472e-17, -3.599399703486895e-18, 4.046555625832198e-03, -1.036252336607650e-16, 4.531539974042592e-03, -3.285542086567770e-18, -5.163885361988508e-17, 1.106748548387717e-03, 1.498462750606062e-16, -3.584611159654302e-17, -1.061192858987626e-16, -3.356952154969509e-16, -8.019522702704744e-17, 4.059876502403838e-05, 1.634908187532274e-16, -1.968612255944112e-16, 2.105634021556220e-10, -7.028065922914938e-17, 3.754258176483694e-07, 1.752185211439804e-16, 1.786724928863750e-16, 5.261300756633032e-17, 4.083080393208712e-16, -1.400415227198435e-16, 4.083080393208712e-16, -1.447119495825056e-16, 9.411327412340645e-20, 5.862385927908813e-19, -2.364616709716168e-19, -1.451507263448979e-19, -1.733329728716115e-19, -1.260368230749464e-18, 4.135516484304576e-19, -6.512135503192073e-19, 5.626521052914271e-03, -3.410557594950424e-20, -6.341156755469159e-19, 5.628150578972711e-03, -7.424236326309349e-18, 9.379581776805284e-18, 1.884341267418482e-18, 1.146640263793872e-17, -2.572800778872411e-18, 4.070443389485942e-18, -8.293925170441437e-18, 5.616227726585964e-18, -1.826994895289963e-18, 4.275911325174190e-03, -1.826994895289963e-18, 7.390591059739236e-19, 2.544121157172917e-17, 3.990522398988659e-03, -7.341150084485134e-19, 1.067783472542084e-18, 4.182095484901813e-17, 2.571400241956430e-17, 3.921663980910775e-18, -2.239557569683001e-18, 9.074707141146606e-18, 5.236628558185145e-03, -1.225839841375374e-17, -1.748362254336982e-17, 6.276418220324468e-16, 5.677660945612623e-16, 1.194300754224547e-03, 2.141412175707083e-16, 2.567648958879021e-16, 3.759834204495537e-16, -1.176482559391820e-18, 1.536437670723406e-18, 7.783644036386978e-17, -2.520091795545301e-16, -1.045999604240665e-16, -1.778677121063967e-16, 1.139949575564287e-12, 2.598029920842767e-17, 2.716427225451659e-17, -6.148075177484361e-17, -1.799422683755798e-16, -1.404755029835079e-16, -1.574566277419426e-15, 6.871163801210266e-06, -8.644877167949208e-18, 4.290737405697074e-16, -9.899898613026540e-18, -1.437911269506522e-16, 1.233867113064171e-18, 2.546826553103971e-19, 6.786143125615713e-18, 4.090152484193490e-18, 2.608972238890091e-02, 2.538143735423228e-02, 2.152890644156010e-02, -2.625307639561195e-18, 2.382397756915822e-02, 2.318423868577256e-02, 2.382397756915822e-02, -2.704119577914528e-18, 2.931829505801199e-19, -6.984647165765451e-20, 1.095485192129121e-17, 1.884899057766733e-03, -9.984263524737439e-18, 2.210763477461665e-02, -1.278011732839014e-17, -1.109279596678701e-17, 2.211345692827994e-18, 2.794371600118963e-17, -1.401013416802001e-18, 4.582949958563733e-02, 1.675402283695806e-18, 4.064955363761863e-02, 8.206000411908458e-17, -7.915736111990099e-17, 7.703907415121904e-03, -3.408646711427120e-17, 2.348271114446715e-02, -3.875537020996732e-17, -2.053410329900782e-17, 6.656958294962466e-17, 3.999042385399301e-17, 1.739961186544742e-02, 2.742912443313637e-17, -9.818513000775542e-18, 3.688264321821777e-07, 3.702662200707459e-07, -4.989781950930465e-16, 4.079136865098781e-16, -8.187500871073133e-17, -3.909454857493454e-17, 6.497065237125575e-17, 5.707595569878521e-16, 7.951465781305984e-16, -1.265198940919935e-17, 3.170735170150867e-10, 3.707345576504698e-10, -2.555641302280707e-19, -3.068941518655591e-18, 1.648614172575290e-12, 2.446806092140700e-12, 2.385631770075838e-05, 3.082762688979962e-05, -9.363268605053576e-17, 3.785466352748795e-16, 1.412376101981394e-16, 4.576903238280458e-11]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
