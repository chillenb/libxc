
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_gdme_vt_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_vt", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.403674639249554e+01, -1.403682565866775e+01, -1.403726181330225e+01, -1.403608343852082e+01, -1.403668910479793e+01, -1.403668910479793e+01, -3.664684900619338e+00, -3.664691230758632e+00, -3.664844477031796e+00, -3.664905013976835e+00, -3.664731090913781e+00, -3.664731090913781e+00, -8.102548914241926e-01, -8.106275981239548e-01, -8.235308596358681e-01, -8.171836938677109e-01, -8.154010144672471e-01, -8.154010144672471e-01, -3.017775763087144e-01, -2.961571076466167e-01, -9.635464179713878e-01, -3.764270657508338e-01, -2.975236169522344e-01, -2.975236169522344e-01, -6.823305578047911e+00, -6.383128714204608e+00, -1.262311965564148e+00, -1.247577118007862e+01, -9.611492831285533e+00, -9.611492831285533e+00, -3.463750921718292e+01, -1.553880062813609e+01, 1.778052529752231e+02, -6.657476984540584e+01, 8.796175506519897e-01, -8.665378708755609e+00, 2.403632855070067e+02, -4.689241136509460e+00, -2.703100718896977e+00, -2.705331577440210e+00, -2.731753194847417e+00, -1.762963475276455e+00, -8.779655957083101e+00, -3.136719573687830e+00, -7.717916418560773e+00, -7.471251936260453e-01, -8.218196905741098e-01, -1.007103114071321e+00, 4.545962748513054e+00, -3.986457506246363e+00, 3.039883599111617e+01, -2.664511467479045e+00, -1.478297913931956e-01, 1.455339508694656e-01, -2.311948957247389e+02, -2.104278340319459e+05, 9.754009140194621e+04, 7.374528641530378e+00, -4.375037723485615e+01, 2.694233594450189e+03, -5.065323549402806e+04, 2.055350894715578e+04, 3.555160075548769e+05, -4.551287439530764e+02, 6.559962371245868e+03, -6.429598267731476e+05, 1.946337233459100e+05, -6.019999733212266e-01, -5.385986295804004e+00, 2.860248340189597e-01, -9.267873137692954e-01, -1.268071555236862e+01, -1.039823059277401e+01, 3.712853493529266e+01, 5.664118284102572e+01, 4.998869634807684e+00, -1.042733938200449e+00, -6.630056193171321e-01, -5.972154537617295e-01, 8.935061560657944e+00, -1.417780838348592e+00, -4.237800621232730e-01, 1.626457979443791e+01, -7.811414329406037e-02, 3.929575530305158e+02, 3.449710920543654e+02, 1.877593542206973e+03, 1.349352893023984e+00, 4.864536627258673e+02, 9.067913348269262e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_gdme_vt_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_vt", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-4.473167811996442e+01, -4.473178949767320e+01, -4.473229926720222e+01, -4.473064099143183e+01, -4.473150777375010e+01, -4.473150777375010e+01, -6.822909523103228e+00, -6.822924776253590e+00, -6.823472138793916e+00, -6.823939079306488e+00, -6.823108864126023e+00, -6.823108864126023e+00, -1.281537024924512e+00, -1.279702081510059e+00, -1.234235904544669e+00, -1.248875091748167e+00, -1.246806053096480e+00, -1.246806053096480e+00, -3.000536252564034e-01, -3.079948831074149e-01, -1.488087331283625e+00, -1.786870732020003e-01, -2.423759062730402e-01, -2.423759062730401e-01, 2.260488266153398e+00, 2.113029853616755e+00, 3.397811335257893e-01, 4.150535607327840e+00, 3.193709488591284e+00, 3.193709488591284e+00, -4.984501715684108e-01, -6.866897542658052e+00, -7.131281436401046e+01, 1.014524131024069e+01, -1.233860877869086e+01, -9.156943358888325e+00, -8.464830475419717e+01, -2.996967311570888e+00, -3.602202844196090e+00, -3.630479193087545e+00, -3.646368058563493e+00, -3.969297965087146e+00, 1.569290489252204e+00, -4.288908041558897e-01, 1.316761838449083e+00, -1.056456015438802e+00, -1.105203676302592e+00, -1.043442535136855e+00, -1.726496386999536e+00, 9.275645847101336e-01, -1.032830919819312e+01, -3.552468111416913e+00, -1.985448700054153e-01, -2.963327840929693e-01, 7.705875043811963e+01, 7.014260346971601e+04, -3.251336982169097e+04, -2.589574402892065e+00, 1.457620558914899e+01, -8.980851183058641e+02, 1.688304797969215e+04, -6.852525677314860e+03, -1.185066946328190e+05, 1.503485326335751e+02, -2.188014037452638e+03, 2.143185823440114e+05, -6.487923466425185e+04, -9.383662028412207e-01, 6.025793933619030e-01, -1.341369623781670e+00, -9.098882831851429e-01, 3.008087796347963e+00, 1.920295213926694e+00, -1.288313866558331e+01, -1.948922728944624e+01, -2.470473680327437e+00, -3.517727575225499e-01, -4.783488638169887e-01, -8.495680301444486e-01, -3.055871107876706e+00, 3.669113066765566e-01, -6.339852536463237e-01, -5.588838266978384e+00, -1.412736210677345e-01, -1.310055344061505e+02, -1.149924688598595e+02, -6.258689322249247e+02, -6.068971088455865e-01, -1.621579326549788e+02, -3.022704900219986e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gdme_vt_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_vt", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gdme_vt_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_vt", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [-1.104721270722804e-03, -1.104718189806401e-03, -1.104703542150436e-03, -1.104749400313895e-03, -1.104725506282824e-03, -1.104725506282824e-03, -6.785397407553910e-03, -6.785382761975111e-03, -6.784878022137781e-03, -6.784467231519709e-03, -6.785216284108390e-03, -6.785216284108390e-03, -3.517927312696485e-02, -3.521810209695993e-02, -3.617900350223523e-02, -3.588116906351100e-02, -3.594409588018223e-02, -3.594409588018223e-02, -1.362422517652064e-01, -1.342096524924211e-01, -3.016959862430111e-02, -1.794596202736410e-01, -1.598151444081306e-01, -1.598151444081306e-01, -3.913760757037895e+00, -3.718391220574132e+00, -6.739752576766262e-01, -6.776708098339091e+00, -5.392992688464379e+00, -5.392992688464379e+00, -4.532018844048631e-03, -4.531186976911927e-03, -4.531977405396835e-03, -4.531243065488552e-03, -4.531598822850256e-03, -4.531598822850256e-03, -1.205708123386491e-02, -1.197025501427405e-02, -1.212126761175707e-02, -1.204365532039325e-02, -1.197838560931749e-02, -1.197838560931749e-02, -4.021696178261373e-02, -3.702018760869688e-02, -4.346359964682617e-02, -4.181158785727643e-02, -3.957886241410938e-02, -3.957886241410938e-02, -2.584814112987248e-01, -1.360356638970370e-01, -2.794013772363358e-01, -1.229213602843972e-02, -2.202591016918101e-01, -2.202591016918101e-01, -8.783050676150896e+00, -6.932066302429512e+00, -9.065695183206714e+00, -4.154161798320829e-01, -7.525334732714461e+00, -7.525334732714461e+00, -4.002263274763942e-02, -4.025353690868510e-02, -4.017198206806446e-02, -4.010505602658109e-02, -4.013852759187952e-02, -4.013852759187952e-02, -4.113773654009759e-02, -4.792217645236092e-02, -4.576395931711717e-02, -4.380714814304205e-02, -4.478516164843922e-02, -4.478516164843922e-02, -3.531218896260575e-02, -1.076710108003965e-01, -8.965501691789994e-02, -6.787619147727696e-02, -7.805087039961331e-02, -7.805087039961331e-02, -5.205307983684683e-02, -7.041649527889442e-01, -5.165002141088774e-01, -7.040988902113172e-02, -3.262470221733292e-01, -3.262470221733292e-01, -2.773146147710852e+00, -2.593303465606909e+01, -1.235468700977360e+01, -3.474250974482500e-01, -8.132746804319336e+00, -8.132746804319343e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gdme_vt_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_vt", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [4.418885082891216e-03, 4.418872759225603e-03, 4.418814168601744e-03, 4.418997601255579e-03, 4.418902025131298e-03, 4.418902025131298e-03, 2.714158963021564e-02, 2.714153104790045e-02, 2.713951208855113e-02, 2.713786892607883e-02, 2.714086513643356e-02, 2.714086513643356e-02, 1.407170925078594e-01, 1.408724083878398e-01, 1.447160140089409e-01, 1.435246762540440e-01, 1.437763835207289e-01, 1.437763835207289e-01, 5.449690070608255e-01, 5.368386099696844e-01, 1.206783944972044e-01, 7.178384810945636e-01, 6.392605776325224e-01, 6.392605776325224e-01, 1.565504302815158e+01, 1.487356488229653e+01, 2.695901030706505e+00, 2.710683239335636e+01, 2.157197075385752e+01, 2.157197075385752e+01, 1.812807537619452e-02, 1.812474790764771e-02, 1.812790962158734e-02, 1.812497226195421e-02, 1.812639529140102e-02, 1.812639529140102e-02, 4.822832493545963e-02, 4.788102005709619e-02, 4.848507044702827e-02, 4.817462128157300e-02, 4.791354243726995e-02, 4.791354243726995e-02, 1.608678471304549e-01, 1.480807504347876e-01, 1.738543985873047e-01, 1.672463514291057e-01, 1.583154496564375e-01, 1.583154496564375e-01, 1.033925645194899e+00, 5.441426555881479e-01, 1.117605508945343e+00, 4.916854411375886e-02, 8.810364067672406e-01, 8.810364067672406e-01, 3.513220270460359e+01, 2.772826520971805e+01, 3.626278073282685e+01, 1.661664719328332e+00, 3.010133893085784e+01, 3.010133893085784e+01, 1.600905309905576e-01, 1.610141476347404e-01, 1.606879282722578e-01, 1.604202241063244e-01, 1.605541103675181e-01, 1.605541103675181e-01, 1.645509461603903e-01, 1.916887058094437e-01, 1.830558372684687e-01, 1.752285925721682e-01, 1.791406465937569e-01, 1.791406465937569e-01, 1.412487558504230e-01, 4.306840432015861e-01, 3.586200676715998e-01, 2.715047659091078e-01, 3.122034815984532e-01, 3.122034815984532e-01, 2.082123193473873e-01, 2.816659811155777e+00, 2.066000856435510e+00, 2.816395560845269e-01, 1.304988088693317e+00, 1.304988088693317e+00, 1.109258459084341e+01, 1.037321386242764e+02, 4.941874803909442e+01, 1.389700389793000e+00, 3.253098721727734e+01, 3.253098721727737e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
