
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_gdme_nv_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_nv", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.825956740329499e+01, -1.825977039110943e+01, -1.826070140928357e+01, -1.825769087166332e+01, -1.825926427457925e+01, -1.825926427457925e+01, -2.930242085201554e+00, -2.930725509911713e+00, -2.943420885802682e+00, -2.938387551879545e+00, -2.938802430212689e+00, -2.938802430212689e+00, -2.586636036050450e-01, -2.547353273296731e-01, -1.595192027317565e-01, -2.065826759151706e-01, -1.932783893328554e-01, -1.932783893328554e-01, -3.583684863556053e-02, -4.382838860016997e-02, 3.177897239337609e-01, 2.032921751565220e-01, 1.137119101428893e-01, 1.137119101428893e-01, 3.956802643860729e+00, 3.654068009349439e+00, 1.255476419931280e+00, 9.123346019879101e+00, 5.141081025978446e+00, 5.141081025978446e+00, -3.107296823373438e+01, -1.496954935979646e+01, 1.481123774510465e+02, -5.801570099512143e+01, -1.118650413640501e+00, -9.169413896601350e+00, 2.030642023751045e+02, -3.675687577452873e+00, -1.911011042909372e+00, -1.958610118025051e+00, -2.021938676912633e+00, -1.204809294666668e+00, -7.498303681789516e+00, -2.844121043817828e+00, -6.521392118881918e+00, -7.223637690809138e-01, -8.068755595973477e-01, -9.631535694938017e-01, 4.749019103970065e+00, -2.951698156060742e+00, 2.661904507084893e+01, -2.648422563903415e+00, 4.475024945441473e-01, 6.949412613330986e-01, -1.643919301231852e+02, -1.774647836548383e+05, 8.228039100073546e+04, 7.544347442987258e+00, -2.373027750573494e+01, 2.285632741306192e+03, -4.272392786834789e+04, 1.733569275193389e+04, 2.998610819180136e+05, -3.841360293575901e+02, 5.532772309484205e+03, -5.423071699796764e+05, 1.641643023518212e+05, -5.481158911787815e-01, -4.650813553151671e+00, 7.067674095004634e-02, -9.208608926253135e-01, -1.083475647444829e+01, -8.953927203937408e+00, 3.161868599385669e+01, 4.798386348020441e+01, 4.279412340468037e+00, -7.581982802328747e-01, -4.379149820494077e-01, -4.935006480107668e-01, 9.945081609545960e+00, 6.678257180944203e-01, -3.545058562935227e-01, 1.459251022971425e+01, 8.082027254110503e-01, 3.413929792491664e+02, 3.632496058380029e+02, 1.603997756515512e+03, 2.035571744717361e+00, 4.222243510578962e+02, 7.767597630260939e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_gdme_nv_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_nv", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-5.264608356755507e+01, -5.264617970260562e+01, -5.264664812183459e+01, -5.264521360392988e+01, -5.264595942739302e+01, -5.264595942739302e+01, -8.585427891254099e+00, -8.585287388695297e+00, -8.581766946468996e+00, -8.584023745970395e+00, -8.582829694047748e+00, -8.582829694047748e+00, -1.758136382254691e+00, -1.757412350423344e+00, -1.740219588143405e+00, -1.739417959181511e+00, -1.740686993347949e+00, -1.740686993347949e+00, -4.642881389672465e-01, -4.688368315483866e-01, -2.256543841566625e+00, -4.293114587046795e-01, -4.438927730017737e-01, -4.438927730017739e-01, -1.335512427546392e+00, -1.235471925475558e+00, -5.147614887894969e-01, -3.050689776135877e+00, -1.725724687218859e+00, -1.725724687218859e+00, -3.958956761729322e+00, -9.329391397400940e+00, -6.368753622890377e+01, 5.019503060627413e+00, -1.394505633515948e+01, -1.126146850750586e+01, -7.306939963268923e+01, -4.195136463454539e+00, -4.715832445613780e+00, -4.734461086146061e+00, -4.742706903496209e+00, -5.015083364244864e+00, 8.861063454290857e-01, -8.046022874253828e-01, 6.809813223016081e-01, -1.311010573449145e+00, -1.370380137555320e+00, -1.318287467589836e+00, -1.834023100087697e+00, 5.069424072091618e-01, -9.105237068525268e+00, -4.395620818743555e+00, -4.437440158999831e-01, -5.262236048296336e-01, 5.478992272638438e+01, 5.915491852508769e+04, -2.742680415724281e+04, -2.670970810488420e+00, 7.901470538706453e+00, -7.618862023986004e+02, 1.423968812775360e+04, -5.780176112959218e+03, -9.995530910729572e+04, 1.264275132094418e+02, -1.845873917294222e+03, 1.807674401790925e+05, -5.472301133480261e+04, -1.171222340945339e+00, 1.324926499131572e-01, -1.504667863274852e+00, -1.141811022059040e+00, 2.162820838548620e+00, 1.147227019306294e+00, -1.114216764537651e+01, -1.671831919061578e+01, -2.382375313985399e+00, -5.785604572818328e-01, -6.853215566763218e-01, -1.081980479770184e+00, -3.407169191952126e+00, -3.482293515474665e-01, -8.033377218111409e-01, -5.063047475482143e+00, -4.682783073810729e-01, -1.138210566987889e+02, -1.210857038961210e+02, -5.346711705425023e+02, -8.652782963501652e-01, -1.407494283655634e+02, -2.589278990216289e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gdme_nv_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_nv", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gdme_nv_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_nv", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([-9.317813672707765e-04, -9.317787686600909e-04, -9.317664140388268e-04, -9.318050932816194e-04, -9.317849397700228e-04, -9.317849397700228e-04, -5.723169311069237e-03, -5.723156958199968e-03, -5.722731233459975e-03, -5.722384750547124e-03, -5.723016541808626e-03, -5.723016541808626e-03, -2.967209203131238e-02, -2.970484247408068e-02, -3.051531842756169e-02, -3.026410883479879e-02, -3.031718469821325e-02, -3.031718469821325e-02, -1.149140466416230e-01, -1.131996430362047e-01, -2.544666297388197e-02, -1.513659008657085e-01, -1.347966928071847e-01, -1.347966928071847e-01, -3.301076430779184e+00, -3.136291250450253e+00, -5.684670004531645e-01, -5.715840280086134e+00, -4.548740242550767e+00, -4.548740242550767e+00, -3.822548571226119e-03, -3.821846929718376e-03, -3.822513619637287e-03, -3.821894237842155e-03, -3.822194302745122e-03, -3.822194302745122e-03, -1.016959113137637e-02, -1.009635722545874e-02, -1.022372937650438e-02, -1.015826699347569e-02, -1.010321500684403e-02, -1.010321500684403e-02, -3.392114973287519e-02, -3.122481836896543e-02, -3.665953881645789e-02, -3.526614317467130e-02, -3.338294238791243e-02, -3.338294238791243e-02, -2.180171317570649e-01, -1.147397993166498e-01, -2.356621567793959e-01, -1.036784899394940e-02, -1.857783790059066e-01, -1.857783790059066e-01, -7.408097576031824e+00, -5.846877749591351e+00, -7.646495163021100e+00, -3.503843605519442e-01, -6.347272268805968e+00, -6.347272268805968e+00, -3.375724216749419e-02, -3.395199916239380e-02, -3.388321142116445e-02, -3.382676239633613e-02, -3.385499411568925e-02, -3.385499411568925e-02, -3.469778071230348e-02, -4.042014242031967e-02, -3.859978594992341e-02, -3.694930610528578e-02, -3.777421532485029e-02, -3.777421532485029e-02, -2.978420039959280e-02, -9.081552452898657e-02, -7.561986580722489e-02, -5.725043246288659e-02, -6.583230418840584e-02, -6.583230418840583e-02, -4.390436862802305e-02, -5.939306138864772e-01, -4.356440746208619e-01, -5.938748931535303e-02, -2.751742945890658e-01, -2.751742945890658e-01, -2.339020690228089e+00, -2.187331694401282e+01, -1.042060785761579e+01, -2.930370229159295e-01, -6.859596296211047e+00, -6.859596296211054e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gdme_nv_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_nv", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([7.454250938166212e-03, 7.454230149280729e-03, 7.454131312310615e-03, 7.454440746252956e-03, 7.454279518160183e-03, 7.454279518160183e-03, 4.578535448855392e-02, 4.578525566559976e-02, 4.578184986767982e-02, 4.577907800437699e-02, 4.578413233446902e-02, 4.578413233446902e-02, 2.373767362504990e-01, 2.376387397926455e-01, 2.441225474204936e-01, 2.421128706783904e-01, 2.425374775857061e-01, 2.425374775857061e-01, 9.193123731329843e-01, 9.055971442896379e-01, 2.035733037910558e-01, 1.210927206925668e+00, 1.078373542457478e+00, 1.078373542457478e+00, 2.640861144623348e+01, 2.509033000360203e+01, 4.547736003625316e+00, 4.572672224068909e+01, 3.638992194040615e+01, 3.638992194040615e+01, 3.058038856980896e-02, 3.057477543774701e-02, 3.058010895709830e-02, 3.057515390273725e-02, 3.057755442196099e-02, 3.057755442196099e-02, 8.135672905101098e-02, 8.077085780366990e-02, 8.178983501203506e-02, 8.126613594780555e-02, 8.082572005475228e-02, 8.082572005475228e-02, 2.713691978630016e-01, 2.497985469517235e-01, 2.932763105316632e-01, 2.821291453973705e-01, 2.670635391032995e-01, 2.670635391032995e-01, 1.744137054056520e+00, 9.179183945331988e-01, 1.885297254235168e+00, 8.294279195159525e-02, 1.486227032047253e+00, 1.486227032047253e+00, 5.926478060825460e+01, 4.677502199673082e+01, 6.117196130416880e+01, 2.803074884415554e+00, 5.077817815044775e+01, 5.077817815044775e+01, 2.700579373399536e-01, 2.716159932991505e-01, 2.710656913693156e-01, 2.706140991706891e-01, 2.708399529255140e-01, 2.708399529255140e-01, 2.775822456984279e-01, 3.233611393625574e-01, 3.087982875993873e-01, 2.955944488422863e-01, 3.021937225988025e-01, 3.021937225988025e-01, 2.382736031967424e-01, 7.265241962318927e-01, 6.049589264577993e-01, 4.580034597030927e-01, 5.266584335072468e-01, 5.266584335072467e-01, 3.512349490241845e-01, 4.751444911091818e+00, 3.485152596966895e+00, 4.750999145228244e-01, 2.201394356712527e+00, 2.201394356712527e+00, 1.871216552182472e+01, 1.749865355521026e+02, 8.336486286092632e+01, 2.344296183327437e+00, 5.487677036968839e+01, 5.487677036968844e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
