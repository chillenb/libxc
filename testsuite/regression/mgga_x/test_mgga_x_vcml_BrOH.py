
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_vcml_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_vcml", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.173010152144856e+01, -2.173012876900232e+01, -2.173031530040837e+01, -2.172986699285242e+01, -2.173011535830279e+01, -2.173011535830279e+01, -3.383209145080989e+00, -3.383208468660738e+00, -3.383416920791444e+00, -3.384803023908062e+00, -3.383217452774759e+00, -3.383217452774759e+00, -6.645491630474629e-01, -6.643843622097088e-01, -6.618215491098476e-01, -6.674374815412227e-01, -6.644878226196539e-01, -6.644878226196539e-01, -2.121014739726468e-01, -2.118143811631312e-01, -7.735554998725851e-01, -1.480931438470689e-01, -2.117287614613298e-01, -2.117287614613298e-01, -6.472221576622210e-03, -6.789918552208385e-03, -3.339450715702574e-02, -3.060106307296474e-03, -6.720066864272634e-03, -6.720066864272634e-03, -5.227269653214602e+00, -5.226803991376119e+00, -5.227227987205226e+00, -5.226865826698536e+00, -5.227022364154823e+00, -5.227022364154823e+00, -2.181423744459849e+00, -2.193906822141672e+00, -2.183812037507267e+00, -2.191866393079041e+00, -2.187561864552539e+00, -2.187561864552539e+00, -5.853660225888944e-01, -6.225706490279401e-01, -5.399666635882745e-01, -5.528202740019691e-01, -6.129234503910890e-01, -6.129234503910890e-01, -1.006657562958052e-01, -2.194421437675875e-01, -1.002630394466554e-01, -1.829437233078359e+00, -1.250063516814302e-01, -1.250063516814302e-01, -2.951646957478055e-03, -3.376490114565494e-03, -2.530185161883147e-03, -5.361698441303264e-02, -3.076618770558231e-03, -3.076618770558229e-03, -5.820480753021696e-01, -5.847013712438427e-01, -5.837797607324414e-01, -5.830424359128198e-01, -5.834134098786525e-01, -5.834134098786525e-01, -5.635961959714861e-01, -5.332925958144115e-01, -5.427787441269084e-01, -5.508528100918419e-01, -5.467616764907386e-01, -5.467616764907386e-01, -6.457424554155977e-01, -2.835868482906991e-01, -3.133015551283114e-01, -3.569626553442886e-01, -3.356696787348878e-01, -3.356696787348877e-01, -4.765915138756717e-01, -2.972693398041013e-02, -4.519301108770465e-02, -3.307576649471537e-01, -7.930020071792532e-02, -7.930020071792532e-02, -7.605617010476311e-03, -9.210443972600212e-04, -1.751282564464202e-03, -7.570519541588509e-02, -2.613348218667566e-03, -2.613348218667563e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_vcml_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_vcml", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.667070328019688e+01, -2.667076907151417e+01, -2.667099188343272e+01, -2.666990708219484e+01, -2.667073868126310e+01, -2.667073868126310e+01, -4.166136907117134e+00, -4.166337156699652e+00, -4.172699804591569e+00, -4.171856117076534e+00, -4.166204230325643e+00, -4.166204230325643e+00, -7.744169419499710e-01, -7.732251077257322e-01, -7.448907412187484e-01, -7.513666653268926e-01, -7.739847211789866e-01, -7.739847211789866e-01, -1.023595823172294e-01, -1.167299499497447e-01, -9.257771387774143e-01, -2.103107371224218e-01, -1.070793162562479e-01, -1.070793162562479e-01, -8.506634403761608e-03, -9.141297829043963e-03, -5.965490951288855e-02, -4.106666517494589e-03, -8.905733279545277e-03, -8.905733279545252e-03, -6.493768046071581e+00, -6.496068452193622e+00, -6.493963049404380e+00, -6.495754457692150e+00, -6.495000854835050e+00, -6.495000854835050e+00, -2.172414093950756e+00, -2.362338848039181e+00, -2.260186777886338e+00, -2.414911320483874e+00, -2.201912846991656e+00, -2.201912846991656e+00, -7.317460178722672e-01, -8.434701519623375e-01, -6.897273395822697e-01, -7.781814388457168e-01, -7.564470766003740e-01, -7.564470766003740e-01, -1.711723606611024e-01, -1.850670082450957e-02, -1.684833947270004e-01, -2.623700034880474e+00, -1.776048058692397e-01, -1.776048058692397e-01, -3.960036962934755e-03, -4.538761973694561e-03, -3.399725187517306e-03, -1.011278610219064e-01, -4.135973530428314e-03, -4.135973530428313e-03, -7.677160196737487e-01, -7.582436710511553e-01, -7.615356926175477e-01, -7.641579524577304e-01, -7.628376696110006e-01, -7.628376696110006e-01, -7.424937970692450e-01, -6.349592105131154e-01, -6.596729423482937e-01, -6.876185022865291e-01, -6.727647451165036e-01, -6.727647451165037e-01, -9.073161161078889e-01, -2.096474112681997e-01, -1.910465132902159e-01, -4.022543327406444e-01, -2.882112346489696e-01, -2.882112346489696e-01, -4.981015785011622e-01, -4.981277993479400e-02, -8.404115840201473e-02, -4.001732740429275e-01, -1.370888217332877e-01, -1.370888217332878e-01, -1.056437262433178e-02, -1.229033115079832e-03, -2.341257539476192e-03, -1.317555603498039e-01, -3.509492880570857e-03, -3.509492880570856e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_vcml_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_vcml", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.588188425008319e-09, -4.588265939042905e-09, -4.589360293890347e-09, -4.588148858218727e-09, -4.588222110764620e-09, -4.588222110764620e-09, -8.325866200318628e-06, -8.331853602370908e-06, -8.522246742984992e-06, -8.547005577668122e-06, -8.326741904621391e-06, -8.326741904621391e-06, -4.843018729250074e-03, -4.847746616375455e-03, -4.906771490713604e-03, -4.934710876868761e-03, -4.844977899317857e-03, -4.844977899317857e-03, -3.706172866179665e+00, -3.414668759709168e+00, -2.246429109542544e-03, 6.193299658638327e-02, -3.614938417764579e+00, -3.614938417764579e+00, -3.876497832537331e+01, -1.461643953606604e+01, 5.535028537468753e+00, 8.985476204548739e+00, -3.102970135243867e+01, -3.102970135243741e+01, -1.905618279143444e-06, -1.907358472049780e-06, -1.906236307391129e-06, -1.907561562814876e-06, -1.905920255382271e-06, -1.905920255382271e-06, -1.286584528152702e-04, -6.123199907712403e-05, -9.130619062721463e-05, -3.891685996510629e-05, -1.262533535546938e-04, -1.262533535546938e-04, -2.761473931395458e-02, -1.138886660586855e-02, -2.525951274362175e-02, -2.445717753778498e-02, -2.165708473526299e-02, -2.165708473526299e-02, 7.835766477211380e-01, -3.392546530839979e+00, 7.777717875958364e-01, -1.934909474523071e-04, -8.716666042734411e-01, -8.716666042734411e-01, 9.519467211424443e+00, 9.586663582591550e+00, 2.731654098290374e+01, 4.531650874366672e+00, 1.416458385479596e+01, 1.416458385479648e+01, -9.553246781418872e-03, -9.272830080483695e-03, -9.379431460719678e-03, -9.457910623668254e-03, -9.417674690293438e-03, -9.417674690293450e-03, -7.412073040619442e-03, -4.272551760082236e-03, -6.311447404836008e-03, -7.778348780333554e-03, -7.021510945221271e-03, -7.021510945221264e-03, -1.293584519176511e-02, -7.152121833104866e-01, -7.381701034611631e-01, -1.584273804927827e-01, -4.193002733873490e-01, -4.193002733873488e-01, -9.429919153222791e-02, 2.912892018972252e+00, 4.213517601942677e+00, -2.026219338606047e-01, 1.327958628775875e+00, 1.327958628775900e+00, 1.018816805735992e+01, 1.620823274967157e+01, 1.396776701388821e+01, 1.930598884245699e+00, 2.063699229040056e+01, 2.063699229040180e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_vcml_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_vcml", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-2.877006152698700e-04, -2.876863122211093e-04, -2.874904634970216e-04, -2.877158259927068e-04, -2.876943236658646e-04, -2.876943236658646e-04, 1.320516521641884e-03, 1.324543971750064e-03, 1.453572370468131e-03, 1.473120649500230e-03, 1.321195750823350e-03, 1.321195750823350e-03, 2.873628581160944e-03, 2.872026728817621e-03, 2.971356609416965e-03, 3.483069448787809e-03, 2.873626180684720e-03, 2.873626180684720e-03, 3.120670515585626e-01, 2.945634360570687e-01, 4.639973862403699e-04, 5.205842044696927e-03, 3.066519933533055e-01, 3.066519933533055e-01, 8.747181181628544e-04, 5.422382898235495e-04, 8.858386346478720e-04, 1.313795175731458e-09, 8.416596478846574e-04, 8.416596478846494e-04, -7.935239736686212e-05, -7.829172509282577e-05, -7.823466780181599e-05, -7.747225947829007e-05, -8.016414889003673e-05, -8.016414889003673e-05, 7.257311245941650e-03, -5.131435073854277e-04, 2.903634744972271e-03, -3.124731396226964e-03, 7.191347977352484e-03, 7.191347977352484e-03, 5.942089614958538e-02, 2.892369377391261e-02, 4.093412104368779e-02, 5.253788154856460e-02, 4.529412342816947e-02, 4.529412342816947e-02, 7.453765831020137e-03, 3.224566236842586e-01, 8.574279482657394e-03, 1.526790055178626e-02, 3.464213790962529e-02, 3.464213790962529e-02, 1.250160858121261e-08, 5.989180652797596e-09, 1.083992381421028e-07, 2.671933327264298e-04, 2.518421467135024e-09, 2.518421466665899e-09, -1.221832832301905e-02, -1.172409322031500e-02, -1.186436821216011e-02, -1.199903577900436e-02, -1.193375750008194e-02, -1.193375750008194e-02, -2.311539269526043e-02, -2.685552237794925e-02, -2.386988664322194e-02, -2.124156122755433e-02, -2.280771357421443e-02, -2.280771357421445e-02, 4.634998556275245e-02, 1.118684659089915e-01, 2.014252137153657e-01, 6.784102322621473e-02, 1.521347735751405e-01, 1.521347735751404e-01, 1.010515571748664e-01, 2.598365560162005e-03, 1.163576379164968e-03, 7.305926754999666e-02, 1.071240358842291e-02, 1.071240358842275e-02, 1.473642764907289e-07, 2.561015037738952e-12, 1.816163802813239e-08, 9.193235006593232e-03, 1.645459816663567e-09, 1.645459817309182e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
