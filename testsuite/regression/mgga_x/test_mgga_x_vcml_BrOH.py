
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_vcml_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_vcml", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.065320257917984e+01, -2.065330099156720e+01, -2.065377245896175e+01, -2.065216512880023e+01, -2.065325414368996e+01, -2.065325414368996e+01, -3.215084905765568e+00, -3.215107337775655e+00, -3.215894208340081e+00, -3.215847093341511e+00, -3.215106426598731e+00, -3.813722228046951e+00, -6.067933360633441e-01, -7.967973383651571e-01, -7.899764794648161e-01, -7.897443768893886e-01, -7.969469143652187e-01, -7.969469143652187e-01, -2.226664600752496e-01, -2.242850864502203e-01, -7.247114291748872e-01, -1.750294958139201e-01, -2.231741742424749e-01, -2.231741742424749e-01, -9.632160411077185e-03, -1.010872761834890e-02, -4.723407371603112e-02, -4.535397333544026e-03, -1.000372318864960e-02, -1.000372318864960e-02, -5.228442942087125e+00, -5.227965224333942e+00, -5.228385269269105e+00, -5.117009348700834e+00, -5.228209355598783e+00, -5.228209355598783e+00, -1.798336729972799e+00, -1.812762279730088e+00, -1.792451763256893e+00, -1.803722003260426e+00, -1.815756502456926e+00, -2.196550569143845e+00, -6.139014139731603e-01, -6.433421303413396e-01, -5.938826459179984e-01, -6.012819525246237e-01, -6.293548479341492e-01, -5.612324503841742e-01, -8.786018433405664e-02, -2.379149695646500e-01, -8.673533273328340e-02, -1.999945339842963e+00, -1.481332469312701e-01, -1.481332469312701e-01, -4.262824534319076e-03, -5.005794449100130e-03, -3.753650828888521e-03, -5.466852015886343e-02, -4.438885030193543e-03, -4.559557784718875e-03, -5.846371769614994e-01, -5.870973168563242e-01, -5.805219218131399e-01, -5.855605844242626e-01, -5.859058370036871e-01, -5.859058370036871e-01, -5.678473047834335e-01, -5.346540838518236e-01, -5.448805039100547e-01, -5.538182376087951e-01, -5.493606482496460e-01, -5.114826146300894e-01, -6.813501591224410e-01, -2.097144052850790e-01, -3.256066560347233e-01, -3.228472337563760e-01, -3.547261339795401e-01, -3.547261339795400e-01, -4.198096562213653e-01, -4.290624281900170e-02, -6.162287033735452e-02, -3.623102680056270e-01, -7.131011400989125e-02, -9.895506886898506e-02, -1.125536844454814e-02, -1.365191733435077e-03, -2.596882637712488e-03, -9.437611460815476e-02, -3.872871537081416e-03, -3.872871537081410e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_vcml_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_vcml", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.052072983030222e+01, -3.052067955542274e+01, -3.052052099530318e+01, -3.052132860175180e+01, -3.052070293281974e+01, -3.052070293281974e+01, -4.400169531887735e+00, -4.400153030491657e+00, -4.399773385132230e+00, -4.400281303904234e+00, -4.400185890251693e+00, -4.152204407892219e+00, -8.212514621134294e-01, -7.983980522030982e-01, -7.912014405283981e-01, -7.902091633313107e-01, -7.986499328159559e-01, -7.986499328159559e-01, -2.231239910438670e-01, -2.244680421859881e-01, -9.733612159225233e-01, -2.449748170829387e-01, -2.235282732598385e-01, -2.235282732598385e-01, -1.337603158653917e-02, -1.408481093263730e-02, -7.616615823245415e-02, -6.084371944369020e-03, -1.393931680161804e-02, -1.393931680085910e-02, -6.489484122466332e+00, -6.491859278642009e+00, -6.489740843874984e+00, -6.881591806873042e+00, -6.490682870890550e+00, -6.490682870890550e+00, -2.469597277877993e+00, -2.489935630072757e+00, -2.461063716365367e+00, -2.477263096219154e+00, -2.494058225833106e+00, -2.342689308350108e+00, -7.030179621548548e-01, -7.780637919338421e-01, -6.616307160386248e-01, -6.992308202026776e-01, -7.344991183918396e-01, -7.862086098099539e-01, -1.171843389364883e-01, -2.627480978399606e-01, -1.156882985147497e-01, -2.338456835293805e+00, -2.140754045681097e-01, -2.140754045681097e-01, -5.683766066455586e-03, -6.730164156096070e-03, -5.051353403969388e-03, -7.289502443413932e-02, -5.918513399436699e-03, -6.126286992025665e-03, -7.640249683603381e-01, -7.536162349468253e-01, -7.632659550516437e-01, -7.601187227221461e-01, -7.586671479602879e-01, -7.586671479602879e-01, -7.371906177782315e-01, -6.077007282476733e-01, -6.423006813012017e-01, -6.764270248896485e-01, -6.587236719812647e-01, -7.700835156284647e-01, -8.110953128070649e-01, -2.821768479353763e-01, -3.272350280109844e-01, -4.434307060401824e-01, -3.670531794868650e-01, -3.670531794868648e-01, -5.725229284166309e-01, -6.847645527764125e-02, -1.006236614659347e-01, -3.961224729750661e-01, -9.510269724601721e-02, -1.584432426767855e-01, -1.554878503178636e-02, -1.821473596979690e-03, -3.474168436766865e-03, -1.511465107228180e-01, -5.198003426627999e-03, -5.198003420101282e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_vcml_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_vcml", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.309543628172235e-08, -1.309475111199360e-08, -1.309165142411470e-08, -1.310280996251989e-08, -1.309507604627046e-08, -1.309507604627046e-08, -8.087310267552550e-06, -8.086666641949518e-06, -8.065709907242100e-06, -8.071346526741239e-06, -8.086977825628060e-06, -6.576590517845396e-06, -5.961519696846737e-03, -3.279311084958280e-03, -3.214835820031097e-03, -3.308293631786005e-03, -3.280231550297953e-03, -3.280231550297953e-03, -5.056883008643375e-01, -5.021144109262898e-01, -2.868439892311649e-03, 1.178562443616449e-01, -5.044267110155100e-01, -5.044267110155100e-01, 2.332757072179589e+01, 2.301168816310543e+01, 4.557689061060757e+00, 8.738768174203500e+00, 2.406586382896765e+01, 2.406586374792843e+01, -1.938839765836400e-06, -1.940108276247689e-06, -1.938987171467981e-06, -1.117047640840767e-06, -1.939466882780796e-06, -1.939466882780796e-06, -8.315573514854999e-05, -8.081719933291539e-05, -8.409272047705224e-05, -8.227966258762234e-05, -8.033759924121088e-05, -5.982739657570339e-05, -9.827463100191877e-03, -8.328065702772966e-03, -1.118175880688901e-02, -1.072386078415039e-02, -8.945599935918220e-03, -1.211715623442158e-02, -1.316407043684141e+01, -2.109334093260827e-01, -1.386034848688314e+01, -8.778323432973281e-05, 3.392536163293101e-01, 3.392536163293101e-01, -2.375738380756776e+06, 1.099326975020392e+01, 4.314849810955985e+01, -8.782733235409783e+01, -2.020658181484819e+06, 1.355796537059353e+01, -1.282247082851895e-02, -1.246381102762923e-02, -3.899026375286083e-03, -1.268713603070692e-02, -1.263683607673255e-02, -1.263683607673255e-02, -1.434661897410770e-02, -1.705749352400482e-02, -1.598301030651881e-02, -1.525069491011123e-02, -1.559171398090256e-02, -3.651158330281826e-02, -6.565798769939682e-03, -4.107346055157718e-01, -1.195119452011499e-01, -8.024191057761546e-02, -8.776009391147577e-02, -8.776009391147603e-02, -2.729735171384406e-02, 4.721588403582338e+00, 2.963680208918835e+00, -8.072318511306091e-02, -3.033588207580684e+01, 1.668207598545024e+00, 9.195509862444126e+00, 1.229223987959782e+01, 2.407362520456011e+01, 2.009786583312828e+00, 1.908967318924061e+01, 1.908966346721995e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_vcml_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_vcml", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.749038068382692e-03, 1.748970345313321e-03, 1.748670749590404e-03, 1.749772163778741e-03, 1.749002416801925e-03, 1.749002416801925e-03, 8.536402375176477e-04, 8.534840379691846e-04, 8.484263886524689e-04, 8.503928144441669e-04, 8.535928874013084e-04, -7.670300749381837e-18, 1.139834253081574e-03, 3.559343812855363e-17, -4.191275959317408e-17, 2.477660873180517e-16, 1.881539085208906e-16, 1.881539085208906e-16, -2.461365578687366e-16, -3.055729043159607e-16, 3.079532362437495e-04, -1.417312915757022e-15, -1.392818140709922e-16, -1.392818140709922e-16, 2.989071367073272e-13, -1.763228399047338e-12, -1.656854070601661e-13, -2.533146171060595e-12, -1.208743615505090e-12, 3.043873943973546e-13, 3.008411478836214e-18, -3.668709736408180e-19, 2.045560334886980e-19, 8.543030244601448e-04, -1.098357147159734e-19, -1.098357147159734e-19, 1.379062978032665e-03, 1.437439057628622e-03, 1.349433790574472e-03, 1.400918014547348e-03, 1.450931556511985e-03, -3.150299994065818e-17, -4.880917416019309e-17, 1.104319802184436e-17, 9.543387908263307e-17, -3.399615293240122e-17, -1.865308929902955e-17, 1.800526771562308e-02, 2.241685053523785e-05, 1.551636383560118e-16, 2.672881254096318e-05, -6.530107590148697e-18, 1.349318131722607e-15, 1.349318131722607e-15, 1.779426626481919e-11, -4.644183754663125e-12, -5.751585523427761e-12, 2.248863247577269e-06, 2.244170293075551e-11, 6.618909947145669e-12, -7.632501186637066e-18, 2.188082099020811e-18, -2.994112150003723e-02, 5.744645264869862e-18, 7.574142078237296e-20, 7.574142078237296e-20, -6.378011871944931e-18, 5.098551881221160e-17, -4.507472405428540e-17, -2.796402845058233e-17, 2.800156154964172e-17, 7.258311696045568e-02, 1.657590331120308e-17, 1.499894234507159e-03, 3.162271595305208e-16, 7.935765742426099e-03, 9.889272868337439e-17, 2.139184907991897e-16, 6.019905989396437e-03, -2.750720979112652e-14, -8.752566346695945e-15, -4.271379337630490e-17, 1.765839498121635e-05, -4.076524985271003e-15, 1.221298084892951e-12, 1.420454495549335e-10, -1.727206947261515e-12, -3.851662131822656e-15, -5.760115362773641e-13, 1.062161774805676e-11])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
