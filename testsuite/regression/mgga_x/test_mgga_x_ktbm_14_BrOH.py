
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_14_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_14", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.166821261738983e+01, -2.166831905697952e+01, -2.166882765702398e+01, -2.166708952407877e+01, -2.166826839672188e+01, -2.166826839672188e+01, -3.027455030813226e+00, -3.027584304827764e+00, -3.031586114037757e+00, -3.030277436701480e+00, -3.027505316116587e+00, -3.929682787714427e+00, -5.163445230971103e-01, -6.551588465746306e-01, -6.194515616834553e-01, -6.323328496950470e-01, -6.560754990198097e-01, -6.560754990198097e-01, -1.737761126936688e-01, -1.777397640053602e-01, -6.005990946258881e-01, -1.067597360404263e-01, -1.749337258398724e-01, -1.749337258398724e-01, -7.598842736850242e-03, -7.960119680120916e-03, -3.265406346186234e-02, -3.642512012714970e-03, -7.877179171463990e-03, -7.877179171463989e-03, -6.045513926783570e+00, -6.045164757225694e+00, -6.045470257726102e+00, -5.437423473338225e+00, -6.045347126003619e+00, -6.045347126003619e+00, -1.639420912283024e+00, -1.662321947511725e+00, -1.629852449354078e+00, -1.647750511727546e+00, -1.667613411306562e+00, -2.178034111151998e+00, -6.796606818493126e-01, -7.400086834154751e-01, -6.348607824890824e-01, -6.757239335213726e-01, -7.093951004874562e-01, -5.816744966119815e-01, -7.224636999492626e-02, -1.597794780444233e-01, -7.129459063117426e-02, -2.257679688711476e+00, -8.992479215982205e-02, -8.992479215982205e-02, -3.539106161616137e-03, -4.015980136950052e-03, -3.010056407280399e-03, -4.518550127131572e-02, -3.685261377897518e-03, -3.659131207128976e-03, -6.726621552222655e-01, -6.777656754656995e-01, -6.462481283995808e-01, -6.746727014515986e-01, -6.753958215820806e-01, -6.753958215820806e-01, -6.542522620204413e-01, -5.869128795844054e-01, -6.187477076338448e-01, -6.388208519326427e-01, -6.297839369514625e-01, -5.365471764766313e-01, -7.783234359440928e-01, -1.748281522144659e-01, -2.735130299899514e-01, -2.954141661072474e-01, -3.288300738570787e-01, -3.288300738570787e-01, -3.991832447880420e-01, -3.018957017915801e-02, -4.112798660422705e-02, -3.760161410883934e-01, -5.869646651892317e-02, -6.100194669940915e-02, -8.904617406981143e-03, -1.099331925266979e-03, -2.088444990392280e-03, -5.819045384989865e-02, -3.109706514384116e-03, -3.109706514384112e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_14_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_14", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.221776340263976e+01, -3.221783311144463e+01, -3.221820246522276e+01, -3.221705886200910e+01, -3.221779968806462e+01, -3.221779968806462e+01, -4.925044700924968e+00, -4.925257531200883e+00, -4.931809214402165e+00, -4.929672097691306e+00, -4.925127213918171e+00, -5.008710434685388e+00, -7.761794785700017e-01, -9.256623498514495e-01, -8.768386657783727e-01, -8.948696979095451e-01, -9.268531818582803e-01, -9.268531818582803e-01, -2.459645195042010e-01, -2.515909695114692e-01, -8.498418308237154e-01, -1.428199846357943e-01, -2.476191296597506e-01, -2.476191296597506e-01, -9.772704527586122e-03, -1.023769641284805e-02, -4.216308712208559e-02, -4.683032136257520e-03, -1.013103098984102e-02, -1.013103098984102e-02, -7.112648733175053e+00, -7.116193674256390e+00, -7.113033071005155e+00, -7.810043148263680e+00, -7.114431870769372e+00, -7.114431870769372e+00, -2.647847878920647e+00, -2.691210445917366e+00, -2.629243465270251e+00, -2.663683732145781e+00, -2.701221214246787e+00, -2.866654185508035e+00, -8.016589445041011e-01, -8.517022620976330e-01, -7.794085741066181e-01, -7.842598276713887e-01, -8.210038515417603e-01, -9.070149199491286e-01, -9.553010035488770e-02, -2.214530031991525e-01, -9.426726126049276e-02, -2.609385426411740e+00, -1.197538577712469e-01, -1.197538577712469e-01, -4.718560469365796e-03, -5.163281826027027e-03, -3.870012468712878e-03, -5.994505794912547e-02, -4.913399371349288e-03, -4.704461005651103e-03, -8.621430175874643e-01, -8.399324289641447e-01, -8.858825662673887e-01, -8.536621123614477e-01, -8.505463535360688e-01, -8.505463535360688e-01, -8.279640758991590e-01, -6.990744364550247e-01, -7.119206867861184e-01, -7.396570684861312e-01, -7.229547776126064e-01, -8.082776203707955e-01, -8.932547061575181e-01, -2.514851160016725e-01, -3.854725928627312e-01, -4.778703525141015e-01, -4.504175738063909e-01, -4.504175738063910e-01, -6.491277892183436e-01, -3.895028010229858e-02, -5.321308219238393e-02, -4.760113567874890e-01, -7.763657291166846e-02, -7.979693582355739e-02, -1.145141818560058e-02, -1.413302634369024e-03, -2.684967705317675e-03, -7.611475233373184e-02, -3.998041279605205e-03, -3.998041279605200e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_14_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_14", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.998943543490259e-08, -1.998940699503624e-08, -1.998912182884179e-08, -1.998960761755726e-08, -1.998942154090151e-08, -1.998942154090151e-08, -1.487229714776836e-05, -1.487555694416135e-05, -1.497155425776530e-05, -1.492959285509454e-05, -1.487291903572397e-05, -1.936233969792429e-05, -3.898324354319953e-03, -5.478805902185735e-03, -4.870399835865850e-03, -5.221487343203280e-03, -5.495156024451766e-03, -5.495156024451766e-03, -7.594374323710245e-01, -7.762661312945631e-01, -9.118620763300556e-04, -3.706530327260065e-01, -7.636574457541424e-01, -7.636574457541424e-01, -4.326019105541741e+01, -3.937559733032825e+01, -1.782788011270070e+00, -1.093312409990861e+02, -4.112391079421220e+01, -4.112391079421219e+01, -6.916441993968497e-06, -6.917068084905987e-06, -6.916538699745699e-06, -6.227392991900673e-06, -6.916728962236459e-06, -6.916728962236459e-06, -1.179962532523207e-04, -1.201885794876937e-04, -1.168665141800158e-04, -1.187149065025927e-04, -1.209285838114637e-04, -1.597507285954883e-04, -3.415585958379191e-02, -3.033596250818242e-02, -3.599488218616764e-02, -3.830181581688979e-02, -3.210157865948592e-02, -2.642429979227924e-02, 3.626989087295474e-02, -3.076424475948690e-01, 2.262895731715674e-02, -3.157169204096462e-04, -5.918066297249845e-01, -5.918066297249845e-01, 2.037513357711189e+02, -1.011888684485124e+02, -3.573150033310790e+02, 5.651076419598272e-01, 1.897208723143824e+02, -1.352395191226725e+02, -4.167015697374594e-02, -4.207534906924251e-02, -4.010164237975557e-02, -4.184356668982775e-02, -4.190147307894430e-02, -4.190147307894430e-02, -4.730763513562902e-02, -5.826268079505641e-02, -5.792989523874551e-02, -5.526415628541972e-02, -5.687740484333620e-02, -4.858534744840044e-02, -2.392365753692470e-02, -1.641089266849292e-01, -2.096627505482792e-01, -1.172995132698394e-01, -1.968021606376642e-01, -1.968021606376643e-01, -5.459244211165229e-02, -1.931694387098351e+00, -1.130333298806801e+00, -2.419402459905646e-01, 1.510813474872158e-01, -8.994397360963154e-01, -1.961011205554389e+01, -1.413104700199658e+03, -5.499025736918763e+02, -1.080887739453365e+00, -2.218524879053120e+02, -2.218524879053124e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_14_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_14", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.950545250328374e-03, 1.950546058553653e-03, 1.950545658186420e-03, 1.950533045265621e-03, 1.950545702730813e-03, 1.950545702730813e-03, 6.688497311033224e-03, 6.690316393222402e-03, 6.744797173244131e-03, 6.723162902202007e-03, 6.688970455024296e-03, 1.893711100823887e-02, 8.199853155029416e-03, 4.593248834512276e-02, 3.799355145259066e-02, 4.157634653006575e-02, 4.614472994709401e-02, 4.614472994709401e-02, 1.319944179765244e-01, 1.401215973504339e-01, 2.133394568749665e-03, 2.203164314911348e-02, 1.342639106934114e-01, 1.342639106934114e-01, 7.390101008293616e-04, 7.743333301309617e-04, 2.706368308904035e-03, 2.029135518112757e-04, 7.837174533198930e-04, 7.837174533198866e-04, 1.110083340621256e-02, 1.107224113434808e-02, 1.109768178925973e-02, 8.122763436886324e-03, 1.108648185730490e-02, 1.108648185730490e-02, 8.870890328647412e-03, 9.359242575956214e-03, 8.653213083038524e-03, 9.042611986749469e-03, 9.488944808999389e-03, 3.033888933831924e-02, 1.253703949955675e-01, 1.032825457239933e-01, 1.282092025267094e-01, 1.255318163378156e-01, 1.190813208585551e-01, 6.245002010555110e-02, -4.782028824603348e-04, 5.352171012518454e-02, -5.140883554184565e-04, 3.731905961591282e-02, 2.118659815245480e-02, 2.118659815245480e-02, -2.130018530235058e-07, 2.518985607998811e-04, 3.746654748654256e-04, -1.855181685462344e-04, -2.452675276682725e-07, 2.545962730541993e-04, 7.042487256975087e-02, 7.964996590995489e-02, 6.737038442697935e-02, 7.379742160620079e-02, 7.508085906691170e-02, 7.508085906691170e-02, 7.605101894680213e-02, 1.443664314057433e-01, 1.341562184118437e-01, 1.144270268259333e-01, 1.254691039650959e-01, 7.651655019017345e-02, 1.039664569559376e-01, 1.077924020924383e-02, 1.221233129875642e-01, 5.139556412742919e-02, 1.567098066199253e-01, 1.567098066199253e-01, 5.507105511333521e-02, 2.279389338502696e-03, 3.548239087832394e-03, 2.018467269746846e-01, -4.898264012366112e-04, 9.986807970250913e-03, 5.378867292954700e-04, 7.195390820191529e-05, 1.921654772236626e-04, 1.041550902331783e-02, 2.562486920512386e-04, 2.562486920512358e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
