
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_14_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_14", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.483342752616364e+01, -2.483348200105420e+01, -2.483388831648326e+01, -2.483300135677185e+01, -2.483345478150612e+01, -2.483345478150612e+01, -3.395833966026048e+00, -3.395987049479613e+00, -3.400877008873038e+00, -3.401617815868322e+00, -3.395877456710345e+00, -3.395877456710345e+00, -5.621037304296486e-01, -5.613528970041980e-01, -5.431475167500700e-01, -5.551861859691786e-01, -5.618404080951701e-01, -5.618404080951701e-01, -1.689259755092772e-01, -1.720509183933310e-01, -6.190552849466141e-01, -1.028417017677723e-01, -1.697850932852360e-01, -1.697850932852360e-01, -7.591579823151440e-03, -7.950551968752299e-03, -3.242685520402155e-02, -3.607042209350804e-03, -7.868931776453994e-03, -7.868931776453994e-03, -6.041293767163260e+00, -6.040990833662594e+00, -6.041308422697378e+00, -6.041070464033423e+00, -6.041078551789359e+00, -6.041078551789359e+00, -2.072549730438251e+00, -2.109330056448158e+00, -2.067530835427638e+00, -2.097006135210254e+00, -2.103639168337406e+00, -2.103639168337406e+00, -6.198659478527365e-01, -6.652996785570680e-01, -5.590263004937358e-01, -5.827493883390726e-01, -6.574127475596742e-01, -6.574127475596742e-01, -7.436777714275460e-02, -1.573572551600460e-01, -7.355545521334841e-02, -1.924796271984303e+00, -8.837259343950687e-02, -8.837259343950687e-02, -3.490841905873924e-03, -3.981524169244102e-03, -2.995640103676830e-03, -4.513436067321228e-02, -3.623262894040495e-03, -3.623262894040495e-03, -6.630800054827626e-01, -6.685283110826276e-01, -6.667211159242864e-01, -6.652088720935433e-01, -6.659742461362629e-01, -6.659742461362629e-01, -6.357773001966361e-01, -5.790808719398242e-01, -6.071434205028310e-01, -6.239131210065051e-01, -6.158188872904070e-01, -6.158188872904069e-01, -6.843818033679283e-01, -2.125397572935936e-01, -2.641504740761697e-01, -3.514108322569236e-01, -3.110306851273278e-01, -3.110306851273277e-01, -4.830582797885128e-01, -3.006351075393993e-02, -4.075619710321368e-02, -3.370105045530637e-01, -6.021197573591036e-02, -6.021197573591035e-02, -8.817524550265472e-03, -1.087653315584348e-03, -2.080851291496274e-03, -5.739123222241219e-02, -3.078666352172542e-03, -3.078666352172538e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_14_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_14", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.912973168962057e+01, -2.912980573486841e+01, -2.913005395431356e+01, -2.912883338525242e+01, -2.912977155119492e+01, -2.912977155119492e+01, -5.006922636095821e+00, -5.007019180264855e+00, -5.010087457673551e+00, -5.009605080062301e+00, -5.006971247190380e+00, -5.006971247190380e+00, -8.353073654801710e-01, -8.337183165474490e-01, -7.952013018773523e-01, -8.162418748386666e-01, -8.347492853701994e-01, -8.347492853701994e-01, -2.414186788458457e-01, -2.463812055482755e-01, -8.835391961391119e-01, -1.395483391986182e-01, -2.428207599041009e-01, -2.428207599041009e-01, -9.785623589888104e-03, -1.025470166371427e-02, -4.241521131519694e-02, -4.770693063298187e-03, -1.014565247239644e-02, -1.014565247239644e-02, -7.118004868644272e+00, -7.121497756763075e+00, -7.118315964454622e+00, -7.121034459514098e+00, -7.119852798024367e+00, -7.119852798024367e+00, -2.832213965807758e+00, -2.854629183192867e+00, -2.825051185833184e+00, -2.843164952431839e+00, -2.856565139999051e+00, -2.856565139999051e+00, -8.372606440348003e-01, -9.282116431687408e-01, -7.997693938808895e-01, -8.483329561653191e-01, -8.622607310328706e-01, -8.622607310328706e-01, -9.892657973626577e-02, -2.190151575018119e-01, -9.794515779374442e-02, -2.851139617372257e+00, -1.187512299715129e-01, -1.187512299715129e-01, -4.566535373125564e-03, -5.241964772954680e-03, -3.898840093628605e-03, -5.985770372903455e-02, -4.793304956461058e-03, -4.793304956461055e-03, -8.748617329874711e-01, -8.521491879515166e-01, -8.599312505364185e-01, -8.662270342549081e-01, -8.630503536513873e-01, -8.630503536513873e-01, -8.521427769482864e-01, -7.037481620172754e-01, -7.228624099706071e-01, -7.571426809441577e-01, -7.378568222009986e-01, -7.378568222009986e-01, -9.776793143223778e-01, -3.015547302047028e-01, -3.780958577126970e-01, -5.027353276126343e-01, -4.419315822280803e-01, -4.419315822280800e-01, -6.548386002275459e-01, -3.910246822294889e-02, -5.352032525773005e-02, -4.789049134808548e-01, -7.974201616239177e-02, -7.974201616239177e-02, -1.165393789026165e-02, -1.446340458162594e-03, -2.699859581888396e-03, -7.605739437445158e-02, -4.076397043069076e-03, -4.076397043069077e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_14_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_14", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.285523088882866e-08, -2.285513893537823e-08, -2.285466458371352e-08, -2.285619333063728e-08, -2.285518265123107e-08, -2.285518265123107e-08, -1.662346082881069e-05, -1.662708449588070e-05, -1.673458504950737e-05, -1.669923268920294e-05, -1.662407600534353e-05, -1.662407600534353e-05, -4.413675477849210e-03, -4.395121937204209e-03, -3.942218985797778e-03, -4.285522325386845e-03, -4.407646938001926e-03, -4.407646938001926e-03, -7.261112622877434e-01, -7.385820445468396e-01, -9.899857446503280e-04, -2.842310505301731e-01, -7.286878577402205e-01, -7.286878577402205e-01, -4.141945104131944e+01, -3.726500547912588e+01, -1.373538390305834e+00, -3.539373580482594e+01, -3.921118740226203e+01, -3.921118740226199e+01, -6.911510058458211e-06, -6.912189925300156e-06, -6.911674861639037e-06, -6.912196694237657e-06, -6.911740357676623e-06, -6.911740357676623e-06, -1.508273930188772e-04, -1.538708089948514e-04, -1.501394005125093e-04, -1.527270219547628e-04, -1.537289435619785e-04, -1.537289435619785e-04, -3.109421718820810e-02, -2.728208956617674e-02, -3.158725250410122e-02, -3.304816541933667e-02, -2.971211239255532e-02, -2.971211239255532e-02, -3.889345547885704e-01, -2.954277910135884e-01, -4.475082675705778e-01, -2.695415169521333e-04, -5.217344341607707e-01, -5.217344341607707e-01, -9.182343372186382e+01, -4.696481150055823e+01, -2.686797681053207e+02, -4.906815422997100e-01, -4.280374876922211e+01, -4.280374876922198e+01, -4.107213668336879e-02, -4.149564837509104e-02, -4.136812193099330e-02, -4.125150048134234e-02, -4.131158788485473e-02, -4.131158788485473e-02, -4.596561778695875e-02, -5.744914559007968e-02, -5.681154908033981e-02, -5.395082958187218e-02, -5.558679464079480e-02, -5.558679464079479e-02, -2.105055421630949e-02, -2.401606776501002e-01, -1.999745480965339e-01, -1.401106897954451e-01, -1.843551120585892e-01, -1.843551120585892e-01, -6.586413048852793e-02, -1.660253587661466e+00, -8.409749087150699e-01, -2.156610705036087e-01, -7.368009181460773e-01, -7.368009181460766e-01, -7.080527784379394e+00, -1.720546519530648e+02, -4.496303754758635e+02, -8.715078177378114e-01, -6.359170534424185e+01, -6.359170534424192e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_14_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_14", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_14_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_14", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.957928609732336e-03, 2.957901068182132e-03, 2.957814607782434e-03, 2.958265800641143e-03, 2.957913768937580e-03, 2.957913768937580e-03, 1.142661137335207e-02, 1.142888960783318e-02, 1.149908299035880e-02, 1.150257117324026e-02, 1.142698715519514e-02, 1.142698715519514e-02, 2.015398099543529e-02, 2.005293651658068e-02, 1.778095278035047e-02, 2.052096805954394e-02, 2.012127458463552e-02, 2.012127458463552e-02, 1.155416675322889e-01, 1.206860411470717e-01, 4.758223311150020e-03, 1.271507673997791e-02, 1.167702478436670e-01, 1.167702478436670e-01, 6.939226889036897e-04, 7.150580693801044e-04, 1.879104949926250e-03, 4.579459093877509e-05, 7.315381502132765e-04, 7.315381502132748e-04, 1.107933689772841e-02, 1.105103701806723e-02, 1.107648852473455e-02, 1.105448278393283e-02, 1.106476807450963e-02, 1.106476807450963e-02, 2.640136079162082e-02, 2.742477921246722e-02, 2.639764132491714e-02, 2.724776218218817e-02, 2.707164102235750e-02, 2.707164102235750e-02, 9.462940521121005e-02, 7.533575262303518e-02, 8.476239940170034e-02, 7.895490084376734e-02, 9.497040667872535e-02, 9.497040667872535e-02, 7.147756323922464e-03, 4.822710354735924e-02, 7.976542534127926e-03, 2.259999297488877e-02, 1.659281522733534e-02, 1.659281522733534e-02, 1.275339337105365e-04, 8.870404490669080e-05, 2.499109797466580e-04, 1.743402587427530e-03, 5.597513817883715e-05, 5.597513817883423e-05, 6.773492360067530e-02, 7.670094209914186e-02, 7.349503192570726e-02, 7.100667764176408e-02, 7.225206851674761e-02, 7.225206851674761e-02, 7.030132526677432e-02, 1.387967374512764e-01, 1.270879630050642e-01, 1.070512036719691e-01, 1.177265399560156e-01, 1.177265399560155e-01, 7.037429154695563e-02, 8.139351362374386e-02, 1.057443939325106e-01, 1.208040031837391e-01, 1.279959285902402e-01, 1.279959285902400e-01, 1.208519100310080e-01, 1.839531322852028e-03, 2.339545290418058e-03, 1.404059204633677e-01, 7.259036806118477e-03, 7.259036806118487e-03, 1.403676418817502e-04, 5.322790007470817e-06, 1.440218808368594e-04, 7.385895166204700e-03, 5.005736310963954e-05, 5.005736310964559e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
