
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mn12_l_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mn12_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-8.783087732973723e+00, -8.783152118206704e+00, -8.783449350981929e+00, -8.782400359491763e+00, -8.783121543576129e+00, -8.783121543576129e+00, -3.359602703212415e+00, -3.359183819424205e+00, -3.346621749264612e+00, -3.351794651767710e+00, -3.359503627380007e+00, -4.118023508346337e+00, -3.838575714629102e-01, -5.711814879214291e-01, -5.205874694088394e-01, -5.422131116287420e-01, -5.723701539901085e-01, -5.723701539901085e-01, -2.427109586802143e-01, -2.438882226353626e-01, -1.021256269470616e-01, -1.894339684348162e-01, -2.430957068619181e-01, -2.430957068619181e-01, -4.178013866420919e-02, -4.359940847894908e-02, -1.306721290464840e-01, -2.082215575459295e-02, -4.316406259869855e-02, -4.316406259869852e-02, -7.525662750389118e+00, -7.528909717801046e+00, -7.526027547244556e+00, -3.086904159139851e+00, -7.527332923501029e+00, -7.527332923501029e+00, -1.893486522090392e+00, -1.899495631263520e+00, -1.889703251789136e+00, -1.896552896367781e+00, -1.899336501292588e+00, -2.138567842527462e+00, -5.992218605077759e-01, -7.049422451952414e-01, -5.499826570441686e-01, -6.042911543185662e-01, -6.427120071640544e-01, -5.490001745544958e-01, -5.711870747418056e-03, -2.410087498739905e-01, -6.807242944937834e-03, -2.340981544337966e+00, -1.735178577086705e-01, -1.735178577086705e-01, 1.059201846940971e-03, -2.288678961311867e-02, -1.724406049934564e-02, 4.906296534178392e-04, 1.096416198801869e-03, -2.090088551500595e-02, -2.122656992929729e-01, -4.332591477575653e-01, -3.075397612532862e-01, -3.079886254730308e-01, -3.395247955748738e-01, -3.395247955748738e-01, -2.952946194543625e-01, -5.061483054785021e-01, -5.505190738887685e-01, -5.780869589055593e-01, -5.693348573649800e-01, -5.082781708459537e-01, -7.390102031071405e-01, -1.113572780993159e-01, -3.116983572653506e-01, -2.771191181906810e-01, -3.302111653762472e-01, -3.302111653762471e-01, -3.821591741678188e-01, -1.263018575632667e-01, -1.459626061806731e-01, -3.307663329672691e-01, -4.788706127562997e-03, -1.531915125619292e-01, -4.872997064839184e-02, -6.389392786851177e-03, -1.205735667787602e-02, -1.486176821463114e-01, -1.782593101667353e-02, -1.782593101667352e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mn12_l_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mn12_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.419702308768226e+01, -1.419806748171512e+01, -1.420265603454068e+01, -1.418565786238918e+01, -1.419757311856216e+01, -1.419757311856216e+01, -1.481990568377502e+00, -1.480072550711760e+00, -1.423003293731480e+00, -1.444960706189316e+00, -1.481458341225653e+00, -5.046335153182979e+00, -1.351655348607504e+00, -9.732632300847701e-01, -1.013279851812762e+00, -9.887665886833561e-01, -9.722720375894418e-01, -9.722720375894418e-01, -1.989619643622987e-01, -1.922319089514424e-01, -1.925798303655359e+00, -2.250577527639036e-01, -1.970558604462671e-01, -1.970558604462671e-01, -5.324387570576368e-02, -5.535484903834277e-02, -1.151556528415355e-01, -2.749175596039372e-02, -5.480585205531351e-02, -5.480585205531427e-02, -6.458117847274234e+00, -6.407908231693217e+00, -6.452602500326608e+00, -5.283528052946218e+00, -6.433055705615257e+00, -6.433055705615257e+00, -2.343859487749766e+00, -2.135606738801381e+00, -2.439547170981055e+00, -2.269125108314896e+00, -2.083045487004043e+00, -3.114725227992283e+00, -8.816627747228920e-01, -9.342354234621786e-01, -7.401268306503205e-01, -9.032046618029458e-01, -9.666454107321892e-01, -8.390051581206385e-01, -3.146150888431586e-02, -3.022830999971432e-01, -3.397788354284768e-02, -3.155442070653191e+00, -1.847159319233209e-01, -1.847159319233209e-01, 1.358608729097139e-03, -3.014983759426161e-02, -2.273251076081469e-02, -6.205889173922776e-03, 1.403694374870926e-03, -2.756163059042717e-02, 2.574368285260402e-01, -3.224352230249031e-02, 1.072645797730240e-01, 1.589353620047090e-01, 1.184688251832655e-01, 1.184688251832655e-01, 1.410542223991021e-01, -7.077187142535705e-01, -8.036886057345057e-01, -7.005440304849719e-01, -7.895598972357566e-01, -7.026778647027602e-01, -1.074971653746362e+00, -3.222277751413033e-01, -2.530176376817309e-01, -5.114960755777754e-01, -2.606550884728406e-01, -2.606550884728403e-01, -6.372783474646140e-01, -1.184178298666014e-01, -1.114489198137877e-01, -3.169852304233894e-01, -2.374407617941876e-02, -1.033891360618557e-01, -6.228193102099872e-02, -8.501856804417710e-03, -1.598873451650428e-02, -9.979146840833107e-02, -2.354511880856154e-02, -2.354511880856151e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mn12_l_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mn12_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.447634246633101e-07, -1.447667183671766e-07, -1.447799560747980e-07, -1.447265326636662e-07, -1.447651676308171e-07, -1.447651676308171e-07, 3.225561146315478e-06, 3.206059538927466e-06, 2.614640381770524e-06, 2.843607689098111e-06, 3.220080151751816e-06, -2.040511207914658e-05, 2.503825585066637e-03, -4.854441886334075e-03, -4.012528711290507e-03, -4.505920487933139e-03, -4.872297173273498e-03, -4.872297173273498e-03, -1.227177086235180e+00, -1.249170512085314e+00, -3.981879220189892e-03, -2.193125159354351e-01, -1.233070386540781e+00, -1.233070386540781e+00, -6.971208067840988e+01, -6.881482844554965e+01, -1.471254895863668e+01, -2.604119282570988e+01, -7.201208513593554e+01, -7.201208513592981e+01, -4.381473126475398e-05, -4.410273352285801e-05, -4.384666793055719e-05, -5.197021832763429e-05, -4.395880251863873e-05, -4.395880251863873e-05, 1.570871420706276e-04, 1.366996210339686e-04, 1.654903935623429e-04, 1.499263489360395e-04, 1.314317843932045e-04, -1.307069251706887e-04, -1.702792687559922e-02, -2.303403829581404e-02, -1.926818717361109e-02, -1.826484441969762e-02, -1.713915698154928e-02, -2.267317640110615e-02, -1.170457097760264e+02, -2.844719259853727e-01, -1.216149990048621e+02, -6.143871898592444e-04, -7.136726830875683e-01, -7.136726830875683e-01, -2.548372436023424e+07, -3.273375203433782e+01, -1.294618692529664e+02, -8.854456782471478e+02, -2.167460942085821e+07, -4.044796798233460e+01, -9.313147697451715e-02, -6.521981166327807e-02, -9.404842098088199e-02, -8.141238339646452e-02, -7.745254439959055e-02, -7.745254439959055e-02, -8.356228796651603e-02, -2.408987743497453e-02, -2.067363296111287e-02, -2.676761884525018e-02, -2.205038273025969e-02, -4.516342659112137e-02, -1.767093215461770e-02, -1.141642760664517e+00, -2.756985850191154e-01, -1.406872581034146e-02, -2.021341514868252e-01, -2.021341514868251e-01, -1.388755214132233e-03, -1.498043036794016e+01, -9.557766889969427e+00, -1.318974973727769e-01, -2.771430082317394e+02, -4.480279307831799e+00, -2.710568256714039e+01, -3.712037990315741e+01, -7.234450501544238e+01, -5.590543817114446e+00, -5.711509948163385e+01, -5.711509948164716e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mn12_l_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mn12_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.643313933371477e-03, 1.643912904152240e-03, 1.646526052816015e-03, 1.636780822491299e-03, 1.643629505790895e-03, 1.643629505790895e-03, -2.320108575679023e-02, -2.321598314746130e-02, -2.366066942840438e-02, -2.348834094016248e-02, -2.320517262993716e-02, 1.742376256595549e-02, 7.783307840349048e-02, 6.052627974195487e-02, 6.048317754439514e-02, 6.076088890685653e-02, 6.050607784556497e-02, 6.050607784556497e-02, 8.648014439801574e-02, 8.618011414035516e-02, 8.081884586086055e-02, 1.518722681322493e-02, 8.644152532465210e-02, 8.644152532465210e-02, -3.172052889105615e-04, -3.604068492228937e-04, -5.715903340044943e-03, -1.285935335171160e-05, -3.653545068996193e-04, -3.653545068995070e-04, 1.041659575338857e-01, 1.040765233325452e-01, 1.041570672488230e-01, 1.998730621261824e-02, 1.041234010572258e-01, 1.041234010572258e-01, -5.393687210357458e-03, -9.684697452990209e-03, -3.460907349159279e-03, -6.931963593362719e-03, -1.076416364046794e-02, 2.881315063609414e-02, 1.083328927840745e-01, 9.773244358497304e-02, 8.000810395641494e-02, 1.189722490272973e-01, 1.288955739739235e-01, 6.024774773421153e-02, 1.761470323544147e-02, 5.559874628459580e-02, 1.948909814526383e-02, 1.092736172227648e-01, 9.715749337347758e-03, 9.715749337347758e-03, 4.621021744379782e-06, -2.169600747535873e-05, -3.596726097527781e-05, 4.389787313020459e-03, 5.314440745303730e-06, -2.024760678349873e-05, -1.916204146201631e+00, -1.037492873576253e+00, -1.398653998867992e+00, -1.546046685564467e+00, -1.421031970254667e+00, -1.421031970254667e+00, -1.573505105792490e+00, 8.498457821275146e-02, 9.346688593705514e-02, -3.550114375737972e-02, 6.244363356905476e-02, 2.670300795334398e-02, 1.468107885679472e-01, 1.083133561178309e-01, 6.951076934850446e-02, 8.684124348802857e-02, 5.651037653997640e-02, 5.651037653997651e-02, 6.034667008193124e-02, -4.582600950307322e-03, -7.522670450210347e-03, 2.148534453627344e-02, 1.535305172769995e-02, -9.200603165278593e-03, -1.996370586075001e-04, -4.983527846763393e-07, -6.687896474124049e-06, -9.877597317675702e-03, -1.750743645047175e-05, -1.750743645048115e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
