
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mn12_l_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mn12_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.850908559031899e+01, -2.850933241607922e+01, -2.851109825793622e+01, -2.850710925637206e+01, -2.850920935201034e+01, -2.850920935201034e+01, -3.546924684267366e+00, -3.546842196805100e+00, -3.544605489304630e+00, -3.548060072273759e+00, -3.546905750380202e+00, -3.546905750380202e+00, -4.349803202102535e-01, -4.333953691040784e-01, -3.974424284932994e-01, -4.253487835390317e-01, -4.344370881936055e-01, -4.344370881936055e-01, -2.337055587979422e-01, -2.332670193800088e-01, -1.936664368905251e-01, -1.838284309353536e-01, -2.334984974562269e-01, -2.334984974562269e-01, -4.176793976642239e-02, -4.358178902826424e-02, -1.282870801652729e-01, -2.080384232546622e-02, -4.314895072257434e-02, -4.314895072257430e-02, -7.498904020216683e+00, -7.502272856118677e+00, -7.499620103315839e+00, -7.502219911960848e+00, -7.500179045570511e+00, -7.500179045570511e+00, -2.039957584036408e+00, -2.079461323715477e+00, -2.031318642992774e+00, -2.063729014533400e+00, -2.076273555893247e+00, -2.076273555893247e+00, -5.646443832727104e-01, -6.300110963266085e-01, -5.037504124816344e-01, -5.463223666662609e-01, -6.102122900013059e-01, -6.102122900013059e-01, -1.633819871351988e-01, -2.382424360357627e-01, -1.607910624991487e-01, -1.571777410662634e+00, -1.711212579665838e-01, -1.711212579665838e-01, -2.008448557390903e-02, -2.286670546473632e-02, -1.723733512891263e-02, -1.435840113712280e-01, -2.087739534047640e-02, -2.087739534047642e-02, -1.898315057798393e-01, -4.182356575333317e-01, -3.512290403521152e-01, -2.886853555058131e-01, -3.212628821142366e-01, -3.212628821142367e-01, -2.591852036246521e-01, -5.028175767860020e-01, -5.460954687635716e-01, -5.700549190788941e-01, -5.633937561942086e-01, -5.633937561942086e-01, -6.480862305103562e-01, -2.782106946784182e-01, -2.977326997417021e-01, -3.248169036178062e-01, -3.093792752474486e-01, -3.093792752474484e-01, -4.270381778742156e-01, -1.251733819178794e-01, -1.418385439891210e-01, -3.054800643318525e-01, -1.484276771811077e-01, -1.484276771811076e-01, -4.848129168469276e-02, -6.388498261170647e-03, -1.205615737601326e-02, -1.435373276087219e-01, -1.780769033978665e-02, -1.780769033978665e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mn12_l_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mn12_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.970605213346899e+01, -2.970625606758724e+01, -2.970779478146185e+01, -2.970449923101911e+01, -2.970615367189938e+01, -2.970615367189938e+01, -3.630967700673159e+00, -3.629656253620841e+00, -3.591329534477529e+00, -3.614617587229326e+00, -3.630564161484982e+00, -3.630564161484982e+00, -9.747772945751071e-01, -9.710447271406304e-01, -8.653819463581249e-01, -8.822822793596030e-01, -9.734188018700825e-01, -9.734188018700825e-01, -1.737377228638636e-01, -1.662168720458939e-01, -1.374341373761988e+00, -2.006509943737209e-01, -1.712106227909340e-01, -1.712106227909340e-01, -5.319642671251310e-02, -5.528648851207486e-02, -1.083985687590038e-01, -2.741892561744089e-02, -5.474721749410190e-02, -5.474721749410245e-02, -6.446037154895425e+00, -6.396166470857430e+00, -6.440711099331044e+00, -6.401953856730095e+00, -6.420942377657234e+00, -6.420942377657234e+00, -3.103463788434975e+00, -3.052056203180223e+00, -3.139821795076237e+00, -3.096923724985151e+00, -3.021939167327533e+00, -3.021939167327533e+00, -8.731872752789841e-01, -8.259426941515233e-01, -7.768542670177555e-01, -8.529937889764621e-01, -9.339563315490759e-01, -9.339563315490759e-01, -1.278477307492741e-01, -2.786482235860344e-01, -1.297228557667186e-01, -1.785146677219610e+00, -1.821880045035326e-01, -1.821880045035326e-01, -2.647941645766735e-02, -3.007007465207701e-02, -2.270579032636283e-02, -9.152014920395488e-02, -2.746830500750974e-02, -2.746830500751006e-02, 2.640557825823194e-01, -1.613030396759680e-02, 9.114278148547228e-02, 1.704234840626539e-01, 1.313355773480868e-01, 1.313355773480868e-01, 1.612502722941409e-01, -7.105049956456730e-01, -7.987936819580481e-01, -6.801067677061193e-01, -7.773104227466756e-01, -7.773104227466754e-01, -9.449449795795546e-01, -2.608195238112772e-01, -2.315800620425514e-01, -3.705953551850450e-01, -2.678302412324241e-01, -2.678302412324244e-01, -5.623799336016814e-01, -1.149800721029990e-01, -1.018935881728904e-01, -3.880772214804376e-01, -1.020004514416483e-01, -1.020004514416465e-01, -6.131539615426671e-02, -8.498282471289077e-03, -1.598395149261053e-02, -9.798883153217318e-02, -2.347258005139451e-02, -2.347258005139459e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mn12_l_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mn12_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.216413724885415e-07, -1.216442463690830e-07, -1.216550355951728e-07, -1.216083736099869e-07, -1.216429004952182e-07, -1.216429004952182e-07, -1.576251347984685e-05, -1.577524682677839e-05, -1.616344483633786e-05, -1.606676544101065e-05, -1.576537548253912e-05, -1.576537548253912e-05, -8.166185619846392e-03, -8.244537469152493e-03, -9.767146850996739e-03, -9.314854412564407e-03, -8.194510341376174e-03, -8.194510341376174e-03, -1.535980783219163e+00, -1.584114035224679e+00, -4.968924642454879e-03, -8.482430398238616e-01, -1.553794081800356e+00, -1.553794081800356e+00, -7.254627577596018e+01, -7.236917042191642e+01, -1.866055544166410e+01, -5.399679011429619e+01, -7.522380834791743e+01, -7.522380834792023e+01, -4.386404619131489e-05, -4.415188490672220e-05, -4.389534255181420e-05, -4.411899886937922e-05, -4.400887648934744e-05, -4.400887648934744e-05, -1.248228013072291e-04, -1.297463296612085e-04, -1.228936640840591e-04, -1.266165029918331e-04, -1.309860687263895e-04, -1.309860687263895e-04, -2.007986473541487e-02, -3.448686163831759e-02, -2.003198225465530e-02, -2.441162342559398e-02, -2.121217607699909e-02, -2.121217607699909e-02, -2.110104665712985e+00, -4.079349178565984e-01, -2.287079975267291e+00, -7.181676942626617e-04, -1.033599088605033e+00, -1.033599088605033e+00, -5.732987358998741e+01, -5.717786808182761e+01, -1.647849108298744e+02, -1.200294316330980e+01, -8.466892928754974e+01, -8.466892928747832e+01, -1.006115473347797e-01, -7.071212305979593e-02, -7.988961869765951e-02, -8.809472841459691e-02, -8.385769866748138e-02, -8.385769866748136e-02, -9.882969545022725e-02, -2.510131099428916e-02, -2.304539709986206e-02, -3.207100553182778e-02, -2.577678619987319e-02, -2.577678619987319e-02, -2.531135738537851e-02, -3.898706476586441e-01, -3.354194789821004e-01, -1.436324587055259e-01, -2.422246854610450e-01, -2.422246854610452e-01, -4.335671297588985e-02, -1.725708408697360e+01, -1.251059545595058e+01, -1.555400409671339e-01, -5.433424005241749e+00, -5.433424005241730e+00, -5.390653626905225e+01, -1.008785497273863e+02, -8.614004261442658e+01, -6.888785517575887e+00, -1.242143447264137e+02, -1.242143447264082e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mn12_l_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mn12_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mn12_l_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mn12_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.329562566942450e-02, 2.329634647424594e-02, 2.330009766904043e-02, 2.328841157773522e-02, 2.329599966503300e-02, 2.329599966503300e-02, -1.621780099176940e-03, -1.625993857687921e-03, -1.741232139350115e-03, -1.585199373445571e-03, -1.623695205213079e-03, -1.623695205213079e-03, 6.152572599628581e-02, 6.158752923212304e-02, 6.157993612509748e-02, 6.147902491022483e-02, 6.154731692090960e-02, 6.154731692090960e-02, 9.046729441248952e-02, 9.123283205071567e-02, 6.339570784660968e-02, 2.287990663481950e-02, 9.075234233721251e-02, 9.075234233721251e-02, -3.169759814916000e-04, -3.600454055492042e-04, -5.368403836656700e-03, -1.283193825424992e-05, -3.650370678601202e-04, -3.650370678600081e-04, 1.036802392507436e-01, 1.035925096206440e-01, 1.036776705912644e-01, 1.036091847986252e-01, 1.036302499620876e-01, 1.036302499620876e-01, 2.641134904447212e-02, 2.615103837320132e-02, 2.705169418327655e-02, 2.678060286688135e-02, 2.543936921425615e-02, 2.543936921425615e-02, 1.051002518827932e-01, 4.645522055494170e-02, 7.883033735754050e-02, 9.562609338755289e-02, 1.217921303754703e-01, 1.217921303754703e-01, -8.351287503107780e-04, 5.685789938197348e-02, 1.640120125808957e-04, 1.295713508902981e-02, 1.471987131515958e-02, 1.471987131515958e-02, -1.757757940179809e-05, -2.164980224991539e-05, -3.593319780325327e-05, -5.849192064169576e-03, -2.019240274409753e-05, -2.019240274412093e-05, -1.955881910294429e+00, -1.057745977233407e+00, -1.330385363256015e+00, -1.577172579276332e+00, -1.449407220761408e+00, -1.449407220761408e+00, -1.636060432941118e+00, 8.818159090298859e-02, 9.801362152297688e-02, -3.423992837038258e-02, 6.663448329800535e-02, 6.663448329800525e-02, 8.843643675847460e-02, 7.237521877307758e-02, 7.403333307494067e-02, 7.255166186595341e-02, 6.933076600206646e-02, 6.933076600206659e-02, 7.386691884778326e-02, -4.454227521235508e-03, -6.677937108180544e-03, 7.222511208042932e-02, -5.376557680508200e-03, -5.376557680507955e-03, -1.971245128184045e-04, -4.981841043639846e-07, -6.686286078628193e-06, -5.550208484246803e-03, -1.746400108696827e-05, -1.746400108697772e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
