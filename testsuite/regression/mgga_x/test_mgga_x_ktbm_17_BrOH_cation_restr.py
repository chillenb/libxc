
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_17_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_17", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.467217559485792e+01, -2.467224796251897e+01, -2.467270443426526e+01, -2.467163155037108e+01, -2.467217447539147e+01, -2.467217447539147e+01, -3.409664774735920e+00, -3.409796712920675e+00, -3.413582618720294e+00, -3.414714257976017e+00, -3.413249001424168e+00, -3.413249001424168e+00, -5.953605371226045e-01, -5.947088486053219e-01, -5.801371171420958e-01, -5.907090611827942e-01, -5.876909864331727e-01, -5.876909864331727e-01, -1.675296131505868e-01, -1.705094726493262e-01, -6.583525873635097e-01, -1.171135170139720e-01, -1.347040489898033e-01, -1.347040489898033e-01, -5.239880606981029e-03, -5.513356053954585e-03, -3.036546624676950e-02, -3.012146785241031e-03, -3.791765355799404e-03, -3.791765355799403e-03, -6.036047353885704e+00, -6.036465767986165e+00, -6.036142823233735e+00, -6.036509083701072e+00, -6.036221182502898e+00, -6.036221182502898e+00, -2.093312771559666e+00, -2.126772809989315e+00, -2.084232957062814e+00, -2.114711118141280e+00, -2.116146713807378e+00, -2.116146713807378e+00, -6.292704555382218e-01, -6.784409012933360e-01, -5.480706147413392e-01, -5.597885431988866e-01, -6.435101390736412e-01, -6.435101390736412e-01, -7.998149428794545e-02, -1.607751496003266e-01, -7.381327747836176e-02, -1.920504698860567e+00, -9.544952125089717e-02, -9.544952125089719e-02, -2.308973207356371e-03, -2.932895921135406e-03, -2.250326318141744e-03, -4.935701346233436e-02, -2.703497928633018e-03, -2.703497928633018e-03, -6.634868543051009e-01, -6.652574241438840e-01, -6.647568941493820e-01, -6.642355559469985e-01, -6.645036850218176e-01, -6.645036850218176e-01, -6.381516031993981e-01, -5.596490892422847e-01, -5.905576641487083e-01, -6.140394173591398e-01, -6.023356953979022e-01, -6.023356953979022e-01, -6.982293017545038e-01, -2.112313083759243e-01, -2.605533428931175e-01, -3.518206453555002e-01, -3.074042574892211e-01, -3.074042574892210e-01, -4.849458098254156e-01, -2.913190813973277e-02, -3.964302059151036e-02, -3.483260439704457e-01, -6.332044016809371e-02, -6.332044016809373e-02, -7.330139822460572e-03, -7.825224795293550e-04, -1.655563821066127e-03, -5.959198539686515e-02, -2.505602743847054e-03, -2.505602743847051e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_17_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_17", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.963701762896589e+01, -2.963712732469790e+01, -2.963750099693546e+01, -2.963586605822607e+01, -2.963673897964877e+01, -2.963673897964877e+01, -4.830659902496310e+00, -4.830815744415164e+00, -4.835007837413704e+00, -4.833937202350518e+00, -4.833474053700288e+00, -4.833474053700288e+00, -8.203641660287172e-01, -8.189217709255365e-01, -7.875798052736406e-01, -8.051979743362210e-01, -8.005293239492819e-01, -8.005293239492819e-01, -2.196063339609150e-01, -2.238878160628091e-01, -8.672352757888494e-01, -1.527245879346012e-01, -1.759713442349661e-01, -1.759713442349659e-01, -6.722370655130152e-03, -7.079114317015469e-03, -3.936973770280627e-02, -3.908648444466739e-03, -4.898081938637351e-03, -4.898081938637345e-03, -7.290915064134154e+00, -7.295038808876756e+00, -7.291041600725694e+00, -7.294684487722126e+00, -7.293035304911472e+00, -7.293035304911472e+00, -2.700165777960362e+00, -2.724176082725080e+00, -2.684033376045426e+00, -2.705711592239133e+00, -2.721495191129534e+00, -2.721495191129534e+00, -8.344986364501290e-01, -9.464791298362406e-01, -7.641615991630547e-01, -8.265829512901932e-01, -8.505355842783319e-01, -8.505355842783319e-01, -1.039742861577259e-01, -2.091647594391821e-01, -9.602856821413633e-02, -2.845994381711687e+00, -1.237249879987258e-01, -1.237249879987258e-01, -3.059719394610476e-03, -3.849408838879721e-03, -2.924617997577634e-03, -6.424420484495293e-02, -3.540998029800691e-03, -3.540998029800693e-03, -8.779299272985452e-01, -8.545712477658053e-01, -8.624618803461550e-01, -8.692583623827075e-01, -8.658310953225844e-01, -8.658310953225844e-01, -8.619908686673545e-01, -6.778856490885046e-01, -7.113521420385122e-01, -7.590719276467611e-01, -7.330466000536064e-01, -7.330466000536066e-01, -9.918151444902787e-01, -2.763633455543503e-01, -3.437069283670621e-01, -4.752150806682193e-01, -4.071694040872449e-01, -4.071694040872447e-01, -6.306724623362376e-01, -3.756072109753945e-02, -5.149521693418276e-02, -4.682160758549618e-01, -8.216470434125195e-02, -8.216470434125205e-02, -9.628097176231655e-03, -1.048820511252597e-03, -2.137074569276983e-03, -7.700219300612324e-02, -3.266549440040688e-03, -3.266549440040683e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_17_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_17", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.175720748552213e-08, -2.175711260332335e-08, -2.175666591227189e-08, -2.175809390644497e-08, -2.175734902255676e-08, -2.175734902255676e-08, -1.586741791086818e-05, -1.587122399925173e-05, -1.597179125066420e-05, -1.593747159727554e-05, -1.594268145735220e-05, -1.594268145735220e-05, -4.431305988426000e-03, -4.411984145619871e-03, -3.980921011597401e-03, -4.333796322973356e-03, -4.241063829929425e-03, -4.241063829929425e-03, -6.323367595865295e-01, -6.440344888387440e-01, -8.622930038882765e-04, -3.697974958771826e-01, -4.787642771551173e-01, -4.787642771551172e-01, -1.045228529051540e+02, -9.496115906706177e+01, -1.994479744144811e+00, -2.098162497749243e+02, -1.749145637179632e+02, -1.749145637179627e+02, -6.593782207317552e-06, -6.594987665045399e-06, -6.593984491985098e-06, -6.595040933950970e-06, -6.594324536126831e-06, -6.594324536126831e-06, -1.464305022065012e-04, -1.491851743025792e-04, -1.453194954673357e-04, -1.480376926570420e-04, -1.485025433046164e-04, -1.485025433046164e-04, -2.924084378639415e-02, -2.549047152868095e-02, -3.054835201285331e-02, -3.170513877103742e-02, -2.889216216216713e-02, -2.889216216216713e-02, -4.219369032079890e-01, -2.823430361862225e-01, -4.626358205759222e-01, -2.548116180458630e-04, -5.861294873600108e-01, -5.861294873600112e-01, -9.217922103119379e+01, -1.384837621003314e+02, -9.636694995327217e+02, -8.903872123560868e-01, -3.157677671221604e+02, -3.157677671221610e+02, -4.218530424153357e-02, -4.240826606874298e-02, -4.235784047143103e-02, -4.229421358020462e-02, -4.232834786742857e-02, -4.232834786742857e-02, -4.635711997606898e-02, -5.625447436920868e-02, -5.647775759925290e-02, -5.406010889995516e-02, -5.555136647139645e-02, -5.555136647139645e-02, -1.979382521384938e-02, -2.239103359661526e-01, -1.876848125313606e-01, -1.349266077249721e-01, -1.761538977565672e-01, -1.761538977565672e-01, -6.276668984248922e-02, -2.444914864822425e+00, -1.139188766014856e+00, -2.076125154559687e-01, -8.560504024740434e-01, -8.560504024740438e-01, -1.847543311809871e+01, 1.431539043286415e+03, -1.389043701357069e+03, -1.052076939754983e+00, -5.223455046085733e+02, -5.223455046085743e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_17_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_17", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_17_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_17", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [3.127619282788258e-03, 3.127605264282561e-03, 3.127582179034711e-03, 3.127791775047807e-03, 3.127676356868214e-03, 3.127676356868214e-03, 9.592517054629398e-03, 9.595183527278634e-03, 9.668521779978892e-03, 9.668777111170672e-03, 9.656817394164683e-03, 9.656817394164683e-03, 1.439173657506211e-02, 1.430709624661794e-02, 1.268292847827061e-02, 1.512352697675463e-02, 1.437641657711760e-02, 1.437641657711760e-02, 7.450819529198816e-02, 7.857253000280207e-02, 1.455532890073188e-03, 1.482929722020288e-02, 3.005611503134809e-02, 3.005611503134811e-02, 3.614481079540102e-04, 3.803841885831487e-04, 1.289451596371994e-03, 1.254279968677824e-04, 2.172695375330060e-04, 2.172695375330036e-04, 1.257452868864367e-02, 1.255990247013758e-02, 1.257413413274772e-02, 1.256121040811710e-02, 1.256698029523065e-02, 1.256698029523065e-02, 2.260080838508679e-02, 2.361193948754025e-02, 2.247643062720252e-02, 2.343261759999538e-02, 2.321590436744699e-02, 2.321590436744699e-02, 9.108001159568031e-02, 8.293239302369750e-02, 7.339707207900989e-02, 7.179477327610632e-02, 9.229329834907737e-02, 9.229329834907737e-02, 5.381376271338881e-03, 3.178343119563021e-02, 4.561253098321604e-03, 2.225354935674000e-02, 1.361682483959297e-02, 1.361682483959299e-02, 1.834398898080739e-05, 6.703445552176764e-05, 2.367019932494261e-04, 2.509971820522561e-03, 1.231450003769992e-04, 1.231450003770028e-04, 9.490138912491436e-02, 1.008997887219474e-01, 9.884479507671234e-02, 9.709706445498620e-02, 9.797561455843641e-02, 9.797561455843641e-02, 9.549698109279836e-02, 1.279388033766396e-01, 1.284264933646589e-01, 1.188801447508602e-01, 1.244521059565398e-01, 1.244521059565398e-01, 7.501072738341169e-02, 5.397287423636218e-02, 7.499988572945525e-02, 9.981192916468917e-02, 9.930574143385763e-02, 9.930574143385762e-02, 1.072255659167343e-01, 1.456708043862394e-03, 1.646377402942824e-03, 1.310442349575060e-01, 5.472258348091594e-03, 5.472258348091496e-03, 1.385275195952002e-04, -6.606758448643043e-06, 1.443471047068865e-04, 5.798696602369768e-03, 1.714232066067300e-04, 1.714232066067248e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
