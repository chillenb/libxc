
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_17_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_17", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.166151195006158e+01, -2.166164020284692e+01, -2.166220172855386e+01, -2.166029829317628e+01, -2.166129680805302e+01, -2.166129680805302e+01, -3.058957991498536e+00, -3.059072672992214e+00, -3.062158767985094e+00, -3.061186738317320e+00, -3.060972759601050e+00, -3.924097796754359e+00, -5.516988442051673e-01, -6.924888058366603e-01, -6.615633979860817e-01, -6.728013793154021e-01, -6.702969094395020e-01, -6.702969094395020e-01, -1.698088897527738e-01, -1.733959061793933e-01, -6.418815489051969e-01, -1.200062329591096e-01, -1.380986730162295e-01, -1.380986730162295e-01, -5.242129030154723e-03, -5.517652013028925e-03, -3.053309409080179e-02, -3.027211797521454e-03, -3.804045409662695e-03, -3.804045409662695e-03, -6.040012206962109e+00, -6.040385006356424e+00, -6.040025251734935e+00, -5.460355710701842e+00, -6.040204138895176e+00, -6.040204138895176e+00, -1.677053303307195e+00, -1.697410424280073e+00, -1.662071514945953e+00, -1.679839657196163e+00, -1.695782200105043e+00, -2.186420385988811e+00, -6.807471844233834e-01, -7.424596239034477e-01, -6.189724340063424e-01, -6.550690489437692e-01, -6.935400744972913e-01, -5.710185571864094e-01, -7.833058150850135e-02, -1.626562431206707e-01, -7.262856418224649e-02, -2.235624360753778e+00, -9.664545414828352e-02, -9.664545414828353e-02, -2.348491578874484e-03, -2.959356189085863e-03, -2.262916086261051e-03, -4.922953560921356e-02, -2.740909957315365e-03, -2.726096995885753e-03, -6.721042046728852e-01, -6.735149209508470e-01, -6.418864714821003e-01, -6.727319797308986e-01, -6.729517479601991e-01, -6.729517479601991e-01, -6.546577956549481e-01, -5.662797226979122e-01, -6.005024653463792e-01, -6.272239227807507e-01, -6.145626959965388e-01, -5.236813867281345e-01, -7.793740973921448e-01, -1.797433874535628e-01, -2.675777800473264e-01, -2.972086984317966e-01, -3.222130063929167e-01, -3.222130063929167e-01, -4.012690326739562e-01, -2.921687980695216e-02, -3.992031781295094e-02, -3.802930727195966e-01, -6.223700626216003e-02, -6.395338568131510e-02, -7.398617110369449e-03, -7.910305369847138e-04, -1.660436420721534e-03, -5.997009773172327e-02, -2.522495240878169e-03, -2.522495240878167e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_17_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_17", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.252967620922848e+01, -3.252978128030740e+01, -3.253027060551800e+01, -3.252870776969291e+01, -3.252952354324658e+01, -3.252952354324658e+01, -4.766321355124649e+00, -4.766598250564408e+00, -4.773967788506593e+00, -4.771424877343774e+00, -4.771201984863678e+00, -4.799282754280872e+00, -7.681341923593430e-01, -9.004058846474544e-01, -8.629845903618115e-01, -8.766308306486259e-01, -8.736409852313635e-01, -8.736409852313635e-01, -2.215203924940636e-01, -2.262995008917166e-01, -8.352945649746856e-01, -1.544951434955442e-01, -1.787307235974887e-01, -1.787307235974886e-01, -6.718402588116114e-03, -7.071506538482885e-03, -3.912287736602051e-02, -3.879759870904242e-03, -4.875357231498821e-03, -4.875357231498821e-03, -7.285944643829001e+00, -7.290119204160849e+00, -7.286174074474892e+00, -7.942548746490930e+00, -7.288038975909040e+00, -7.288038975909040e+00, -2.555508669931245e+00, -2.600319932397868e+00, -2.521396130661754e+00, -2.561372567498631e+00, -2.597068166181181e+00, -2.724722981190318e+00, -8.000017216207014e-01, -8.790899815288826e-01, -7.466165881672063e-01, -7.693554820618275e-01, -8.122653666144573e-01, -8.905203097947850e-01, -1.022174183708166e-01, -2.106310662607933e-01, -9.500117495499608e-02, -2.615578661812500e+00, -1.241483461733085e-01, -1.241483461733085e-01, -3.131249434107176e-03, -3.792795538643195e-03, -2.900212039078545e-03, -6.495866724504150e-02, -3.654316625901220e-03, -3.493838536808606e-03, -8.665466414309650e-01, -8.437770909124441e-01, -8.910241716417198e-01, -8.580572469620075e-01, -8.547090912372820e-01, -8.547090912372820e-01, -8.404902334626192e-01, -6.743935539179112e-01, -7.025470351714113e-01, -7.439065872795311e-01, -7.204724739835047e-01, -7.990964358566253e-01, -9.150292101441115e-01, -2.345018878251129e-01, -3.489550681154502e-01, -4.516283886390718e-01, -4.140997259316745e-01, -4.140997259316740e-01, -6.273223545810925e-01, -3.743692689244953e-02, -5.114612090307590e-02, -4.617068601097378e-01, -8.146087397809730e-02, -8.195171809611547e-02, -9.482152216439501e-03, -1.013810258149715e-03, -2.128065515109650e-03, -7.684116789341405e-02, -3.232896772441426e-03, -3.232896772441419e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_17_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_17", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.899447925856434e-08, -1.899445454576300e-08, -1.899420392686169e-08, -1.899458688255643e-08, -1.899440610352860e-08, -1.899440610352860e-08, -1.411905851513225e-05, -1.412252557386947e-05, -1.421302497189269e-05, -1.417129260142113e-05, -1.418165800456142e-05, -1.868794620123150e-05, -3.885869225740482e-03, -5.649218668987033e-03, -5.072270723979220e-03, -5.427024795297893e-03, -5.341724462515264e-03, -5.341724462515264e-03, -6.520816269188795e-01, -6.678817294793495e-01, -7.691483139141021e-04, -4.401055105567418e-01, -5.316023371664556e-01, -5.316023371664556e-01, -1.063808269973595e+02, -9.809060036653632e+01, -2.498389107162866e+00, -2.721625556326134e+02, -2.036347810941818e+02, -2.036347810941818e+02, -6.598460647934096e-06, -6.599612465952724e-06, -6.598565735469224e-06, -5.934979902344838e-06, -6.599024408720232e-06, -6.599024408720232e-06, -1.129150706946384e-04, -1.149418205681698e-04, -1.110597700064597e-04, -1.130265634164352e-04, -1.149530172163308e-04, -1.545073871460265e-04, -3.185246675244707e-02, -2.804444541326865e-02, -3.499524581000180e-02, -3.747890191715612e-02, -3.133032527656311e-02, -2.555791909124856e-02, 1.385788918578436e-01, -2.953776133022045e-01, 2.042293751176043e-01, -2.991694961149017e-04, -6.565100783501194e-01, -6.565100783501199e-01, 4.969273330898498e+02, -2.677147284661513e+02, -1.303179133058379e+03, 8.379262553660433e-01, 7.255670369736382e+02, -5.561422298290515e+02, -4.277272917777796e-02, -4.297337832242324e-02, -4.081605732604804e-02, -4.287446958110959e-02, -4.290564091247113e-02, -4.290564091247113e-02, -4.763910183848372e-02, -5.700620645960333e-02, -5.752003925655558e-02, -5.531258165632080e-02, -5.677597456014322e-02, -4.803481509579031e-02, -2.223493731916800e-02, -1.339349441386496e-01, -1.965813715338938e-01, -1.107507797658001e-01, -1.879567261642554e-01, -1.879567261642554e-01, -5.109173038737345e-02, -2.724835531842458e+00, -1.479484225892371e+00, -2.294260314394729e-01, 3.834616219482155e-01, -1.038736697563450e+00, -3.699340011446412e+01, -4.140730467831439e+03, -1.592433875738564e+03, -1.189112678141548e+00, -7.754761769407729e+02, -7.754761769407752e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_17_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_17", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.138738388698388e-03, 2.138754097357615e-03, 2.138813364115852e-03, 2.138581287424664e-03, 2.138704387725723e-03, 2.138704387725723e-03, 5.170372360091753e-03, 5.172636763941026e-03, 5.232369512108405e-03, 5.207727235550947e-03, 5.210908897931518e-03, 1.668984094087298e-02, 3.105311262854172e-03, 4.097028876669287e-02, 3.408555588006075e-02, 3.733454013507963e-02, 3.657029795634257e-02, 3.657029795634257e-02, 8.155606548909372e-02, 8.759402494056903e-02, -8.336700773954179e-04, 2.197485192460856e-02, 3.943862516009036e-02, 3.943862516009038e-02, 3.709540418933187e-04, 3.989728024519388e-04, 1.795673546706384e-03, 1.824886633308675e-04, 2.710782473724204e-04, 2.710782473724204e-04, 1.259579612276899e-02, 1.258087758524034e-02, 1.259495690604486e-02, 9.606637264163345e-03, 1.258832048987382e-02, 1.258832048987382e-02, 6.155583258715917e-03, 6.673742471438042e-03, 5.755038591698826e-03, 6.212728847629279e-03, 6.645694802692021e-03, 2.622578151730776e-02, 1.167681667715783e-01, 1.067465640147119e-01, 1.143375087305473e-01, 1.216398191244478e-01, 1.161977875182211e-01, 6.018297582050002e-02, -1.213785191762807e-03, 3.566436486929427e-02, -1.019069042529192e-03, 3.622084911446205e-02, 1.712836843348972e-02, 1.712836843348967e-02, -4.220790268755241e-08, 1.676935666417485e-04, 3.651054283616228e-04, -4.235530310632434e-04, -2.659638733927428e-07, 2.723823854901023e-04, 9.773988389222642e-02, 1.039412372463032e-01, 9.090276837093537e-02, 1.000157682031497e-01, 1.009258045647496e-01, 1.009258045647496e-01, 1.012936003122647e-01, 1.328128652107215e-01, 1.348613488582414e-01, 1.258912767462237e-01, 1.317014142443652e-01, 8.070657134218803e-02, 1.035488207116447e-01, -2.757832404889662e-03, 8.678577184812721e-02, 3.311426874135831e-02, 1.226736280137387e-01, 1.226736280137386e-01, 4.276322425327929e-02, 1.710796647749102e-03, 2.428465895104523e-03, 1.797550455174402e-01, -1.105950993229493e-03, 7.567788523508787e-03, 3.629548992963901e-04, 4.950980605203075e-05, 1.761503902833723e-04, 7.101800987924886e-03, 3.009099671551093e-04, 3.009099671551090e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
