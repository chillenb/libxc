
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_13_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_13", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.161430645073890e+01, -2.161442985436201e+01, -2.161497167756184e+01, -2.161314002595699e+01, -2.161410067436595e+01, -2.161410067436595e+01, -3.048293176903736e+00, -3.048419883788274e+00, -3.051820790837553e+00, -3.050721051988095e+00, -3.050521884971289e+00, -3.891736219239728e+00, -5.393414538015957e-01, -6.833326397568764e-01, -6.518527954025710e-01, -6.633819252571173e-01, -6.608089855980953e-01, -6.608089855980953e-01, -1.668291958783547e-01, -1.704426530715656e-01, -6.177614674616979e-01, -1.170788951298143e-01, -1.350682247595905e-01, -1.350682247595905e-01, -5.087334322608305e-03, -5.354731695673636e-03, -2.964156703254354e-02, -2.937790504254023e-03, -3.691690470166853e-03, -3.691690470166853e-03, -5.973623441549087e+00, -5.973857255824383e+00, -5.973628582687002e+00, -5.433544843822832e+00, -5.973745706147819e+00, -5.973745706147819e+00, -1.664578844135005e+00, -1.686304340374075e+00, -1.648477481572935e+00, -1.667521786489765e+00, -1.684602725220490e+00, -2.167068550465213e+00, -6.751460140799048e-01, -7.349954118149252e-01, -6.140086110133842e-01, -6.496605086376582e-01, -6.876774928013343e-01, -5.711101263008721e-01, -7.379364904514565e-02, -1.591277067304068e-01, -6.837997437316176e-02, -2.216362621333869e+00, -9.417206455560194e-02, -9.417206455560193e-02, -2.202333221192339e-03, -2.871938071197415e-03, -2.196075996310447e-03, -4.625770080259284e-02, -2.570347497748632e-03, -2.645574188420111e-03, -6.631153066947399e-01, -6.651408627261772e-01, -6.357169978975664e-01, -6.639659503894269e-01, -6.642756305928004e-01, -6.642756305928004e-01, -6.459898184358509e-01, -5.617620805548480e-01, -5.953256323640868e-01, -6.208552857936168e-01, -6.088614348457169e-01, -5.231554139302668e-01, -7.720228456323058e-01, -1.731382309527761e-01, -2.636992535355381e-01, -2.948602253393983e-01, -3.186439984222249e-01, -3.186439984222248e-01, -4.001425256153309e-01, -2.836300292009982e-02, -3.876320177658236e-02, -3.772110477220763e-01, -5.858693154743819e-02, -6.218141353515346e-02, -7.180183293984515e-03, -7.676611687957409e-04, -1.611385347472133e-03, -5.829940606294982e-02, -2.447986679443206e-03, -2.447986679443203e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_13_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_13", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.221309311371111e+01, -3.221318548372252e+01, -3.221362283023265e+01, -3.221224809496562e+01, -3.221296467314887e+01, -3.221296467314887e+01, -4.828793003838665e+00, -4.829045863083681e+00, -4.835777353659950e+00, -4.833499201734916e+00, -4.833241552712840e+00, -4.809448560553582e+00, -7.786545287421228e-01, -8.983984612193483e-01, -8.585341396052742e-01, -8.733490089815273e-01, -8.700954631858349e-01, -8.700954631858349e-01, -2.188737201130967e-01, -2.238912477682182e-01, -8.293411835598594e-01, -1.495763053547216e-01, -1.743916703471559e-01, -1.743916703471558e-01, -6.394030819163824e-03, -6.730128314702009e-03, -3.727498088724723e-02, -3.692315828867504e-03, -4.639866792822413e-03, -4.639866792822413e-03, -7.216813224935930e+00, -7.220662353048389e+00, -7.217024014077245e+00, -7.839921076409940e+00, -7.218744436637956e+00, -7.218744436637956e+00, -2.598614017438378e+00, -2.642657338713889e+00, -2.564918154488805e+00, -2.604416526880658e+00, -2.639445646210121e+00, -2.732184292518180e+00, -7.982678205799936e-01, -8.723344346370393e-01, -7.475098951126381e-01, -7.675734427833194e-01, -8.096576151406962e-01, -8.890159354112946e-01, -9.687726540023467e-02, -2.056759153648695e-01, -8.990874695316603e-02, -2.605545523490135e+00, -1.197223342663283e-01, -1.197223342663283e-01, -2.936391202258938e-03, -3.609548074389345e-03, -2.760111648533209e-03, -6.119324591863328e-02, -3.426961988868949e-03, -3.325055073524506e-03, -8.552086616213997e-01, -8.338384284851101e-01, -8.778263657440881e-01, -8.472285492814531e-01, -8.440850514230769e-01, -8.440850514230769e-01, -8.296436591908686e-01, -6.743587571616815e-01, -6.998393905858868e-01, -7.380336398768214e-01, -7.162528304345710e-01, -7.933260456514493e-01, -9.093039310575665e-01, -2.331844359269355e-01, -3.472916981411498e-01, -4.593616104035357e-01, -4.145956142631594e-01, -4.145956142631592e-01, -6.348846187152614e-01, -3.566547825627797e-02, -4.876504079370363e-02, -4.624816100501726e-01, -7.706543290762925e-02, -7.847257655371917e-02, -9.024504968203959e-03, -9.648176002793775e-04, -2.025238744282928e-03, -7.354151050475946e-02, -3.076720355703242e-03, -3.076720355703234e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_13_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_13", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.797968313828146e-08, -1.797964318634996e-08, -1.797933900418656e-08, -1.797994663309634e-08, -1.797964613391544e-08, -1.797964613391544e-08, -1.400456385365561e-05, -1.400778304533628e-05, -1.409172838328525e-05, -1.405269423514931e-05, -1.406272139796626e-05, -1.789771994871085e-05, -4.110084683220236e-03, -5.612094893386457e-03, -5.085766615768430e-03, -5.417761120148590e-03, -5.337856296675396e-03, -5.337856296675396e-03, -6.673937503330507e-01, -6.808206048175218e-01, -9.018825733497205e-04, -4.911807357226189e-01, -5.692518595196832e-01, -5.692518595196830e-01, -1.525178515076361e+02, -1.406017753714131e+02, -3.458441095035435e+00, -3.906605316916425e+02, -2.921766397635497e+02, -2.921766397635497e+02, -6.109319032979295e-06, -6.109825298223497e-06, -6.109384047409066e-06, -5.562524843965115e-06, -6.109560189878810e-06, -6.109560189878810e-06, -1.135245239514917e-04, -1.152312495231761e-04, -1.119197958571901e-04, -1.135985710213671e-04, -1.152609812504330e-04, -1.490151845649337e-04, -3.002217155113297e-02, -2.607550048912273e-02, -3.335206963237268e-02, -3.531101980651696e-02, -2.944859619769372e-02, -2.460551455847152e-02, -1.015692311832739e-01, -3.152422466754733e-01, -8.564640440273869e-02, -2.807541405817403e-04, -7.543044913666771e-01, -7.543044913666775e-01, 1.628871815393739e+02, -3.842946426872322e+02, -1.870137703711005e+03, 7.963074841439485e-02, 2.373994713350941e+02, -7.981534322326994e+02, -3.927287129089597e-02, -3.957595450734238e-02, -3.776953476492995e-02, -3.940821945718905e-02, -3.945412929598942e-02, -3.945412929598942e-02, -4.375899342917873e-02, -5.407234105978297e-02, -5.397694034792365e-02, -5.140382336231929e-02, -5.301876298798126e-02, -4.573809649768096e-02, -2.074371377979887e-02, -1.556077597036703e-01, -1.968693935935229e-01, -1.115114684022550e-01, -1.842495032374249e-01, -1.842495032374249e-01, -5.053985935611401e-02, -3.781812991612131e+00, -2.008039110822353e+00, -2.191560721448909e-01, -1.365072403298502e-01, -1.293225551236684e+00, -5.300433904571710e+01, -5.946201799887242e+03, -2.286280036571500e+03, -1.492488813320223e+00, -1.112917179509056e+03, -1.112917179509059e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_13_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_13", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.990019823783214e-03, 1.990028095752298e-03, 1.990057588732568e-03, 1.989935563402006e-03, 1.990000539798662e-03, 1.990000539798662e-03, 5.746956529464300e-03, 5.749068140320668e-03, 5.804702539264007e-03, 5.781678587065516e-03, 5.784747266441116e-03, 1.624854972415150e-02, 5.681974981422438e-03, 4.165635832735370e-02, 3.491482984754869e-02, 3.811231256699588e-02, 3.736139452319050e-02, 3.736139452319050e-02, 8.478860085579937e-02, 9.081153267508781e-02, 2.296108096506019e-04, 2.429116602455068e-02, 4.229422383982243e-02, 4.229422383982234e-02, 5.315074491573401e-04, 5.714838637727797e-04, 2.457082965152472e-03, 2.618966095346223e-04, 3.888166032581384e-04, 3.888166032581384e-04, 1.112186937762349e-02, 1.110379495593207e-02, 1.112084595620540e-02, 8.636217063162210e-03, 1.111281168765418e-02, 1.111281168765418e-02, 7.306737619327463e-03, 7.805061504808075e-03, 6.917116129263916e-03, 7.361587394208198e-03, 7.778610625395583e-03, 2.581748772454987e-02, 1.098627733027277e-01, 9.603873986719470e-02, 1.103207710166573e-01, 1.143234558947549e-01, 1.084988942730707e-01, 5.942512583968228e-02, -8.266753696572656e-04, 3.815736392310035e-02, -7.015398550026271e-04, 3.366346744228012e-02, 1.937504831679070e-02, 1.937504831679074e-02, -3.083662244952173e-08, 2.406794995764631e-04, 5.238086182069336e-04, -3.009602477400258e-04, -1.942923048944819e-07, 3.908192844990265e-04, 8.225667469308215e-02, 8.918345261345267e-02, 7.805423546943774e-02, 8.477570684473013e-02, 8.579019883199983e-02, 8.579019883199983e-02, 8.548591395917343e-02, 1.268893789463592e-01, 1.253222673364288e-01, 1.130324189426249e-01, 1.204526370489911e-01, 7.665014575079600e-02, 9.438182709126890e-02, 1.248126947361159e-03, 8.881535987761240e-02, 3.961417484487421e-02, 1.231916290611599e-01, 1.231916290611598e-01, 4.696290198985680e-02, 2.348703605170508e-03, 3.243472456934495e-03, 1.741964456747317e-01, -7.634209400076811e-04, 9.201502245798064e-03, 5.196037034517308e-04, 7.109653064690573e-05, 2.528777753845825e-04, 8.704699723756822e-03, 4.317428252491752e-04, 4.317428252491737e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
