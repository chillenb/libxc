
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_13_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_13", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.444201077523680e+01, -2.444207958234853e+01, -2.444251336290447e+01, -2.444149296304669e+01, -2.444200937480443e+01, -2.444200937480443e+01, -3.393719958031478e+00, -3.393858518106493e+00, -3.397811369306898e+00, -3.398822135562702e+00, -3.397393562798167e+00, -3.397393562798167e+00, -5.849892558229984e-01, -5.842811621712266e-01, -5.685473313156661e-01, -5.799162283670795e-01, -5.766910072165624e-01, -5.766910072165624e-01, -1.644896738529162e-01, -1.674904569566653e-01, -6.367664077746398e-01, -1.137782629096415e-01, -1.313903801866327e-01, -1.313903801866327e-01, -5.084098763043252e-03, -5.348531748810477e-03, -2.939906599434512e-02, -2.914982736745196e-03, -3.673505490912156e-03, -3.673505490912155e-03, -5.969952344932415e+00, -5.970228728835761e+00, -5.970033825987596e+00, -5.970275040141580e+00, -5.970058016302900e+00, -5.970058016302900e+00, -2.075947535874715e+00, -2.109480994785187e+00, -2.066304476284587e+00, -2.096854171763819e+00, -2.099106360360215e+00, -2.099106360360215e+00, -6.263684636951752e-01, -6.751334204814140e-01, -5.458445577261337e-01, -5.589753453482730e-01, -6.404169201890088e-01, -6.404169201890088e-01, -7.749739141425373e-02, -1.571100413261757e-01, -7.148281042473004e-02, -1.917781626769112e+00, -9.277627570691963e-02, -9.277627570691965e-02, -2.218534283287590e-03, -2.828851916081741e-03, -2.176864563055743e-03, -4.775464505031407e-02, -2.609363765279021e-03, -2.609363765279021e-03, -6.551966774980578e-01, -6.575302544510511e-01, -6.568352893752490e-01, -6.561501953731309e-01, -6.565009883463701e-01, -6.565009883463701e-01, -6.308039262614760e-01, -5.554672768856640e-01, -5.859827508338169e-01, -6.085855015745918e-01, -5.974282741958866e-01, -5.974282741958865e-01, -6.957941159858840e-01, -2.072886462187724e-01, -2.566370400065938e-01, -3.491372289196359e-01, -3.040565218835034e-01, -3.040565218835034e-01, -4.818826571834378e-01, -2.824249356064186e-02, -3.836776594467257e-02, -3.464749260668436e-01, -6.136794480692774e-02, -6.136794480692775e-02, -7.068273182577485e-03, -7.452559515024640e-04, -1.604187632896150e-03, -5.781495177333017e-02, -2.421744452474233e-03, -2.421744452474231e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_13_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_13", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.940847888863602e+01, -2.940858158944281e+01, -2.940893402036630e+01, -2.940740293914426e+01, -2.940822003915879e+01, -2.940822003915879e+01, -4.862955739081015e+00, -4.863092753560681e+00, -4.866768150498941e+00, -4.865746819407714e+00, -4.865343729067387e+00, -4.865343729067387e+00, -8.254780683580789e-01, -8.238743347501849e-01, -7.884522654601899e-01, -8.073386622431781e-01, -8.024504869694200e-01, -8.024504869694200e-01, -2.170139815820094e-01, -2.215609268300689e-01, -8.588593056816617e-01, -1.475699218174319e-01, -1.715521269143995e-01, -1.715521269143996e-01, -6.396855336103168e-03, -6.735539825950936e-03, -3.744168989268921e-02, -3.712749169588962e-03, -4.655984960183102e-03, -4.655984960183097e-03, -7.221436925806739e+00, -7.225238134598123e+00, -7.221551949002627e+00, -7.224910010859295e+00, -7.223391915143882e+00, -7.223391915143882e+00, -2.710093385457935e+00, -2.733593658964685e+00, -2.693575495824897e+00, -2.714913150462630e+00, -2.731259524745604e+00, -2.731259524745604e+00, -8.323525206068141e-01, -9.366895356967788e-01, -7.671562804273302e-01, -8.255827019008209e-01, -8.470647937980450e-01, -8.470647937980450e-01, -9.944681843131792e-02, -2.041655150674893e-01, -9.174354578902791e-02, -2.834650046035585e+00, -1.191448593263399e-01, -1.191448593263401e-01, -2.894702582342057e-03, -3.649204692450699e-03, -2.777350127817644e-03, -6.117924572394078e-02, -3.358148236556589e-03, -3.358148236556588e-03, -8.656961609167027e-01, -8.438239665519919e-01, -8.511991296033798e-01, -8.575629767644963e-01, -8.543525933944733e-01, -8.543525933944734e-01, -8.495107327711955e-01, -6.778077913656431e-01, -7.082657898280876e-01, -7.522887865272343e-01, -7.281735500973266e-01, -7.281735500973264e-01, -9.835098120275305e-01, -2.726352623813553e-01, -3.423422279683178e-01, -4.780125216968331e-01, -4.083926800231254e-01, -4.083926800231253e-01, -6.324985554607493e-01, -3.574991460566209e-02, -4.899115211317778e-02, -4.698761954599837e-01, -7.851542024965190e-02, -7.851542024965204e-02, -9.126441300439112e-03, -9.883986981063756e-04, -2.031635669197179e-03, -7.359736777206818e-02, -3.100432434418474e-03, -3.100432434418471e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_13_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_13", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.027374874632156e-08, -2.027364890680839e-08, -2.027317406903786e-08, -2.027467342120166e-08, -2.027389204570239e-08, -2.027389204570239e-08, -1.551843980600958e-05, -1.552194247047429e-05, -1.561432348213331e-05, -1.558170105637376e-05, -1.558731609576413e-05, -1.558731609576413e-05, -4.582443085138123e-03, -4.564603004432921e-03, -4.164355315822530e-03, -4.494520998629232e-03, -4.408282749834420e-03, -4.408282749834420e-03, -6.509497395117637e-01, -6.609490199431415e-01, -9.804441559878899e-04, -4.328153300959093e-01, -5.252995221028239e-01, -5.252995221028239e-01, -1.509800361552274e+02, -1.380117376983416e+02, -3.041674076315201e+00, -3.391093416278646e+02, -2.684184804111733e+02, -2.684184804111729e+02, -6.105508707465710e-06, -6.106058864749971e-06, -6.105652900963375e-06, -6.106132230425938e-06, -6.105732510915859e-06, -6.105732510915859e-06, -1.422612266771483e-04, -1.445618650200605e-04, -1.412872013179101e-04, -1.435831378896850e-04, -1.440132508560234e-04, -1.440132508560234e-04, -2.785421307867617e-02, -2.396917857459200e-02, -2.962373247136711e-02, -3.047857260723039e-02, -2.742845639236417e-02, -2.742845639236417e-02, -5.566802878418894e-01, -3.044088625828582e-01, -6.263815658353646e-01, -2.437300531969342e-04, -6.959455594952734e-01, -6.959455594952738e-01, -3.085201529254211e+02, -2.776089280831845e+02, -1.589462057768103e+03, -1.316673184281959e+00, -5.996448648038618e+02, -5.996448648038624e+02, -3.879604401549901e-02, -3.911650235356576e-02, -3.902907077525582e-02, -3.893694756040217e-02, -3.898515438481955e-02, -3.898515438481955e-02, -4.271666066772111e-02, -5.345127225971551e-02, -5.311986824059422e-02, -5.037906690408517e-02, -5.201411615468313e-02, -5.201411615468311e-02, -1.872211942458113e-02, -2.314232053848822e-01, -1.894425414119132e-01, -1.323820613207464e-01, -1.743757009337825e-01, -1.743757009337825e-01, -6.054001213227431e-02, -3.550185951156285e+00, -1.726614410767031e+00, -2.009200808103018e-01, -1.141999521764513e+00, -1.141999521764513e+00, -3.771893367069409e+01, -1.383827354973060e+03, -2.118019596793692e+03, -1.379029977642813e+00, -9.037324816585813e+02, -9.037324816585834e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_13_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_13", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.830013081401476e-03, 2.829994438162529e-03, 2.829946908377265e-03, 2.830224678714951e-03, 2.830074100186700e-03, 2.830074100186700e-03, 9.831221465580879e-03, 9.833630614836743e-03, 9.899852212674040e-03, 9.900391706490683e-03, 9.889513417657576e-03, 9.889513417657576e-03, 1.660407330959474e-02, 1.650892782812620e-02, 1.462196017878933e-02, 1.713012069942112e-02, 1.637505099452418e-02, 1.637505099452418e-02, 7.813824592850709e-02, 8.231116104059168e-02, 2.541633909994307e-03, 1.727940875764251e-02, 3.323924408028545e-02, 3.323924408028550e-02, 5.217699276660854e-04, 5.524269455186593e-04, 1.935678868119377e-03, 2.026673858316218e-04, 3.332781026373148e-04, 3.332781026373102e-04, 1.110435105648941e-02, 1.108652397467323e-02, 1.110369430234254e-02, 1.108795038217237e-02, 1.109523676082649e-02, 1.109523676082649e-02, 2.254489564898674e-02, 2.345465502062833e-02, 2.243358289906776e-02, 2.329903599390136e-02, 2.309673408624589e-02, 2.309673408624589e-02, 8.741392773206147e-02, 7.596538715052550e-02, 7.364522294413432e-02, 7.053076389693257e-02, 8.774560602873241e-02, 8.774560602873241e-02, 6.901495480701272e-03, 3.443140880438588e-02, 5.991415666646999e-03, 2.151095955328529e-02, 1.591608101985372e-02, 1.591608101985378e-02, 6.136933472071138e-05, 1.343290598752374e-04, 3.902552094381737e-04, 3.600198979858622e-03, 2.337356201286573e-04, 2.337356201286578e-04, 8.001947884467067e-02, 8.673972109396590e-02, 8.441643694883295e-02, 8.245835290299887e-02, 8.344119141338141e-02, 8.344119141338141e-02, 8.090003161366544e-02, 1.226021184965481e-01, 1.197859936421682e-01, 1.071650936848674e-01, 1.142938248471893e-01, 1.142938248471893e-01, 7.002668713005084e-02, 5.669628626137609e-02, 7.780591819790186e-02, 1.018128237381665e-01, 1.016630415275784e-01, 1.016630415275783e-01, 1.058983572773260e-01, 2.088524833090831e-03, 2.439146930230615e-03, 1.305248988332086e-01, 7.089280735259524e-03, 7.089280735259529e-03, 2.822319207260288e-04, 6.386139769115528e-06, 2.200757694335568e-04, 7.394389035491484e-03, 2.964627815825314e-04, 2.964627815825315e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
