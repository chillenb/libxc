
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_pbe_gx_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_pbe_gx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.248582224620559e+01, -2.248594846097577e+01, -2.248650337102722e+01, -2.248462987574818e+01, -2.248561238515835e+01, -2.248561238515835e+01, -3.138598981690025e+00, -3.138666150772609e+00, -3.140494180562373e+00, -3.140039340107897e+00, -3.139761815986283e+00, -3.775562743963885e+00, -5.754795686657895e-01, -6.874769900734466e-01, -6.583036431784075e-01, -6.690045087918519e-01, -6.666615201868155e-01, -6.666615201868155e-01, -1.680814218818691e-01, -1.719932259435830e-01, -6.523356698070891e-01, -1.033351344700575e-01, -1.296654036163871e-01, -1.296654036163871e-01, -4.146532530525764e-05, -4.932207447937536e-05, -5.102706071633866e-03, -6.867965509543942e-06, -1.605669151636241e-05, -1.605669151636241e-05, -5.882129195500328e+00, -5.883795109377875e+00, -5.882216749122867e+00, -5.638504049298530e+00, -5.882968155403790e+00, -5.882968155403790e+00, -1.739863825922657e+00, -1.757671192553305e+00, -1.726658098924846e+00, -1.742393170303828e+00, -1.756181569460604e+00, -2.118170221271090e+00, -6.498022774425354e-01, -7.167876102606797e-01, -5.931848888395095e-01, -6.253146662041533e-01, -6.623908249227708e-01, -5.893818343813664e-01, -7.301320324157655e-02, -1.535662681563564e-01, -6.744887937377257e-02, -2.136672357619659e+00, -7.672860311120322e-02, -7.672860311120326e-02, -2.124245709782677e-03, -6.033738787725963e-06, -7.663715922163083e-06, -4.514509123415267e-02, -2.479319508584169e-03, -8.302270805138094e-06, -6.721842486641444e-01, -6.661144362278114e-01, -6.562466256247101e-01, -6.700118975752190e-01, -6.691298622434142e-01, -6.691298622434142e-01, -6.536660776458298e-01, -5.412016583533598e-01, -5.739368733962620e-01, -6.060631409636144e-01, -5.897004852291182e-01, -5.441403411557511e-01, -7.486841029713630e-01, -1.830646480293088e-01, -2.662247323813794e-01, -3.086076596107086e-01, -3.171813939569206e-01, -3.171813939569206e-01, -4.105248381358449e-01, -4.550111438196052e-03, -9.983442148153655e-03, -3.650861589690277e-01, -5.774194403708244e-02, -3.614286393201495e-02, -8.041114500932790e-05, -1.276828934096446e-07, -1.998102772305053e-06, -3.230557602949752e-02, -7.852049167951537e-06, -7.852049167949113e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_pbe_gx_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_pbe_gx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.339559869330752e+01, -3.339565319676299e+01, -3.339593981906606e+01, -3.339512550870654e+01, -3.339554587891138e+01, -3.339554587891138e+01, -4.569117304685746e+00, -4.569226365957388e+00, -4.572180730015758e+00, -4.571401088779585e+00, -4.571009715744656e+00, -4.692482798044582e+00, -8.241032642161789e-01, -7.725100670503148e-01, -7.140944610429154e-01, -7.383121556058252e-01, -7.329437080787439e-01, -7.329437080787439e-01, -1.653841436002794e-01, -1.729089589524961e-01, -9.173962918207035e-01, -2.549959473750946e-02, -8.775260517869835e-02, -8.775260517869828e-02, 2.874535075427928e-02, 3.020920783094334e-02, 1.287020306669080e-01, 1.674133278420376e-02, 2.097583795263159e-02, 2.097583795263159e-02, -7.725934033171038e+00, -7.729081050559042e+00, -7.726104296107765e+00, -8.061564575403860e+00, -7.727516685913563e+00, -7.727516685913563e+00, -2.525750894515838e+00, -2.553360180705475e+00, -2.505113358982687e+00, -2.529631003723260e+00, -2.551100441101915e+00, -2.592844209142232e+00, -8.314543590899111e-01, -9.360241873492927e-01, -7.443968135525771e-01, -8.006438884589173e-01, -8.512920992485195e-01, -9.761374881421805e-01, -9.869368498485107e-02, -1.081628485369081e-01, -9.102164203943647e-02, -2.752775783946092e+00, 1.442696423518179e-02, 1.442696423518182e-02, -2.832366568974393e-03, 1.637171820186624e-02, 1.249357344767651e-02, -6.057621105528916e-02, -3.305882649072520e-03, 1.505851344058131e-02, -8.927428603041936e-01, -8.811781168482460e-01, -9.013142512678762e-01, -8.886107458399932e-01, -8.869291530887271e-01, -8.869291530887271e-01, -8.676799048126522e-01, -6.851018584515977e-01, -7.394814994679516e-01, -7.919771359726221e-01, -7.653458399365913e-01, -8.312279395186316e-01, -9.730227163952678e-01, -2.577442059952069e-01, -2.901811429768429e-01, -4.478406807988423e-01, -3.721547429709948e-01, -3.721547429709947e-01, -5.978689490107015e-01, 1.257082187252765e-01, 1.434432211718028e-01, -4.561202906818098e-01, -7.788802266323679e-02, 9.402710592112937e-02, 4.038946796085922e-02, 4.388462546764367e-03, 9.197365290599217e-03, 9.800782195338664e-02, 1.393244167458442e-02, 1.393244167458652e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_pbe_gx_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_pbe_gx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.034135212889034e-08, -1.034116320923170e-08, -1.034031741076698e-08, -1.034312370927662e-08, -1.034165396630341e-08, -1.034165396630341e-08, -1.152821589595956e-06, -1.154094816170803e-06, -1.187692759904364e-06, -1.173662489392880e-06, -1.175653287104417e-06, -1.248491295524934e-05, 1.049638725225148e-03, -8.700463574242905e-03, -9.573549912672077e-03, -9.315759100794926e-03, -9.369212125506128e-03, -9.369212125506128e-03, -1.870011161270590e+00, -1.771409302544774e+00, 8.926911075705730e-04, -4.777108680611809e+00, -3.280615408985874e+00, -3.280615408985873e+00, -1.128100004523412e+04, -1.038549541338246e+04, -2.041775594930238e+02, -2.911086699160969e+04, -2.171628173449251e+04, -2.171628173449251e+04, -2.555220753744361e-06, -2.553521749739953e-06, -2.555137483339322e-06, -2.761170608374881e-06, -2.554362173484783e-06, -2.554362173484783e-06, -2.167022034107446e-06, -3.773039629141769e-06, -8.806835072846219e-07, -2.350488790157717e-06, -3.686372950693276e-06, -1.204330901977721e-04, -1.562678798654303e-02, -1.134038486558999e-02, -2.111524065157731e-02, -1.826261971930248e-02, -1.469125331633663e-02, -2.233637493815895e-02, 5.866249604657346e+00, -1.733073579104839e+00, 8.016575061589508e+00, -1.368569180837568e-04, -1.004940356948935e+01, -1.004940356948935e+01, 7.811162958132490e+06, -2.864515537333528e+04, -1.391523532984660e+05, 3.921079650765281e+01, 4.209646128637869e+06, -5.941530373593949e+04, -1.563980543207700e-02, -1.596720243763980e-02, -1.631533685236071e-02, -1.575619439409883e-02, -1.580358369743242e-02, -1.580358369743242e-02, -1.745154184450579e-02, -3.133725651738604e-02, -2.629464976184036e-02, -2.224415588332352e-02, -2.420871469974924e-02, -2.954215364663389e-02, -9.363818556625146e-03, 1.426417247026839e-01, -3.616063456820206e-01, -1.345359407596063e-03, -2.133062571914613e-01, -2.133062571914613e-01, -4.789315805362523e-03, -2.271462311959051e+02, -1.039468429069191e+02, -1.451166387641282e-01, 1.490563678082704e+01, -3.552833782682175e+01, -3.905163216984166e+03, -4.443217025925156e+05, -1.706055325358857e+05, -4.373333298534676e+01, -8.283927892629713e+04, -8.283927892630984e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_pbe_gx_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_pbe_gx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.002030544022152e-03, 2.002014720648992e-03, 2.001946780634627e-03, 2.002181504270051e-03, 2.002058160072147e-03, 2.002058160072147e-03, 2.889398973005863e-03, 2.890290007891482e-03, 2.913811575736103e-03, 2.904023153178557e-03, 2.905373303662632e-03, 1.075404710106473e-02, 5.420898238036658e-03, 5.275369864131929e-02, 5.330921787978317e-02, 5.328746554326255e-02, 5.328725726503968e-02, 5.328725726503968e-02, 1.930217238942928e-01, 1.916645072404549e-01, 1.931891116094022e-03, 2.058943119049273e-01, 2.048909755585723e-01, 2.048909755585724e-01, 3.929492610384014e-02, 4.219046845728334e-02, 1.434007129153413e-01, 1.951320084626443e-02, 2.889206462759213e-02, 2.889206462759213e-02, 7.474477244565054e-03, 7.473849681541149e-03, 7.474451812153411e-03, 7.886991736374048e-03, 7.474157737165977e-03, 7.474157737165977e-03, 3.968331866544009e-03, 4.153416510581051e-03, 3.824792309710098e-03, 3.988217768224942e-03, 4.143853403582707e-03, 1.880270311044077e-02, 6.502234033943488e-02, 6.077578421957210e-02, 6.932730425205372e-02, 6.763239818829990e-02, 6.419538000878548e-02, 8.866772906511872e-02, 7.330387535116554e-04, 1.758183671434129e-01, 6.045935816741857e-04, 1.997356088455987e-02, 2.302967822394648e-01, 2.302967822394648e-01, 2.262590038562842e-08, 1.793803105553578e-02, 3.896767318287676e-02, 2.381581683198155e-04, 1.425947394503446e-07, 2.908783453063291e-02, 6.661353634645799e-02, 6.677590595807982e-02, 6.801450867929282e-02, 6.667202106902405e-02, 6.669543929996626e-02, 6.669543929996626e-02, 6.843835835888624e-02, 7.689445753337991e-02, 7.436595511723067e-02, 7.195660854647168e-02, 7.317498267453890e-02, 8.458999153414928e-02, 5.775781326515731e-02, 7.305425823717690e-03, 1.323916039493138e-01, 2.175533857738365e-02, 1.195435243549700e-01, 1.195435243549700e-01, 2.339892062035658e-02, 1.395833753007879e-01, 1.647722865069296e-01, 1.119761519553431e-01, 6.531661203453550e-04, 2.380008599942198e-01, 3.825820704323422e-02, 5.312540420479114e-03, 1.886879510269763e-02, 2.412474414557832e-01, 3.213071313195653e-02, 3.213071313196136e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
