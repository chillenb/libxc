
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_pbe_gx_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_pbe_gx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.390262247324243e+01, -2.390270708757087e+01, -2.390314434905909e+01, -2.390188804279354e+01, -2.390253757649615e+01, -2.390253757649615e+01, -3.344853307170371e+00, -3.345084966715890e+00, -3.351500804885312e+00, -3.352063462452621e+00, -3.350463363090684e+00, -3.350463363090684e+00, -5.689643005389240e-01, -5.679471391002617e-01, -5.433334261012301e-01, -5.523641228287675e-01, -5.503363072640095e-01, -5.503363072640095e-01, -1.612400714262915e-01, -1.639102765198475e-01, -6.358097890660953e-01, -8.385116542150181e-02, -1.070309807677073e-01, -1.070309807677073e-01, -2.916293790719659e-05, -3.481158988789144e-05, -3.953870426934398e-03, -5.325144709485117e-06, -1.190009737938107e-05, -1.190009737938108e-05, -5.880592990562040e+00, -5.882277862529674e+00, -5.880712570074830e+00, -5.882198160748094e+00, -5.881425582921000e+00, -5.881425582921000e+00, -2.040336699859882e+00, -2.070241431434686e+00, -2.031962510730029e+00, -2.059093396723669e+00, -2.061137992809058e+00, -2.061137992809058e+00, -6.225028705358949e-01, -6.887307913936249e-01, -5.432321472896461e-01, -5.697603171362402e-01, -6.371838963887613e-01, -6.371838963887613e-01, -4.023260737346388e-02, -1.415031153389210e-01, -3.461392333367216e-02, -1.967319649835779e+00, -6.212790704847670e-02, -6.212790704847670e-02, -2.808537028407231e-06, -5.396330385818204e-06, -6.042690728060285e-06, -1.515801522296222e-02, -7.206201013178928e-06, -7.206201013178920e-06, -6.690002903633014e-01, -6.630152580005388e-01, -6.651204685540089e-01, -6.668571609064923e-01, -6.659860880083820e-01, -6.659860880083820e-01, -6.474925724965072e-01, -5.375142980983232e-01, -5.693217932157489e-01, -6.006642301227055e-01, -5.843946385402374e-01, -5.843946385402374e-01, -7.108199902503494e-01, -2.034437494700994e-01, -2.524355401290820e-01, -3.426629180210484e-01, -2.989446107902519e-01, -2.989446107902519e-01, -4.736345819103397e-01, -3.399070684504586e-03, -7.876332539231323e-03, -3.426130711858485e-01, -2.868361350451851e-02, -2.868361350451853e-02, -7.269213995441470e-05, -2.286062206756644e-07, -1.470357863625048e-06, -2.542749707226775e-02, -6.417244360434952e-06, -6.417244360434942e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_pbe_gx_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_pbe_gx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.140230812580429e+01, -3.140243021991480e+01, -3.140292703963651e+01, -3.140111047269989e+01, -3.140206887936473e+01, -3.140206887936473e+01, -5.265060240701674e+00, -5.264884049891173e+00, -5.259775628637578e+00, -5.255152748513984e+00, -5.258073106491968e+00, -5.258073106491968e+00, -8.612247808005425e-01, -8.601445140594413e-01, -8.353755962844087e-01, -8.466878872857162e-01, -8.438977689572406e-01, -8.438977689572406e-01, -1.668808113125690e-01, -1.748862319283017e-01, -9.513826422191233e-01, -1.593707095477661e-01, -1.728764281199626e-01, -1.728764281199626e-01, -8.614134059745322e-05, -1.264086742396559e-04, -1.391751514946717e-02, -2.126599250966293e-05, -4.740156337519182e-05, -4.740156337519189e-05, -7.727870689032050e+00, -7.730994684326427e+00, -7.728000615247174e+00, -7.730759069914892e+00, -7.729461823303001e+00, -7.729461823303001e+00, -2.616476648350989e+00, -2.644091487269885e+00, -2.581542658987707e+00, -2.606196410453559e+00, -2.648559142405675e+00, -2.648559142405675e+00, -8.643710233945759e-01, -9.728784310425325e-01, -8.051637691123527e-01, -8.793282581547937e-01, -8.820716206572615e-01, -8.820716206572615e-01, -9.781764374836525e-02, -9.553248441606635e-02, -8.818902335218849e-02, -2.989728895758999e+00, -1.145729149248267e-01, -1.145729149248267e-01, -1.122423238558862e-05, -2.155565256007920e-05, -2.411465032009607e-05, -4.592378662785326e-02, -2.876660386114553e-05, -2.876660386114550e-05, -8.969548429422546e-01, -8.852157206103399e-01, -8.893502654458663e-01, -8.927615532091642e-01, -8.910563593565501e-01, -8.910563593565501e-01, -8.758892927570325e-01, -6.891777990764462e-01, -7.449431156181983e-01, -7.987284180942833e-01, -7.718095189900990e-01, -7.718095189900990e-01, -1.023054753254602e+00, -2.025676108472286e-01, -2.969086544184482e-01, -4.822929638907135e-01, -3.863535097861182e-01, -3.863535097861182e-01, -6.357446030663370e-01, -1.105536854694172e-02, -2.621942507861826e-02, -4.811013037397924e-01, -7.210988283374073e-02, -7.210988283374080e-02, -2.886241829845120e-04, -9.142317828388617e-07, -5.873664946166982e-06, -5.876104413275236e-02, -2.561629791500230e-05, -2.561629791500225e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_pbe_gx_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_pbe_gx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-9.036304560813470e-09, -9.036204683854898e-09, -9.035702254552163e-09, -9.037188034396088e-09, -9.036417808028059e-09, -9.036417808028059e-09, -1.946049890362967e-05, -1.945169999809815e-05, -1.921052486264092e-05, -1.916306199200498e-05, -1.923300714355537e-05, -1.923300714355537e-05, 6.668779217455543e-05, 7.374404047717827e-05, 2.027269199684485e-04, -9.560048234280596e-05, -6.341600573968167e-07, -6.341600573968167e-07, -1.999041013490471e+00, -1.921673181965732e+00, 7.384762669253420e-04, 5.243118014290498e-02, -5.529071222938491e-01, -5.529071222938504e-01, -5.829535802411140e-01, 7.660837260296777e+00, 4.602084643612653e+00, 1.033699277729145e+01, 1.301672321924547e+01, 1.301672321924550e+01, -2.556189187377451e-06, -2.554477393717417e-06, -2.556085658282108e-06, -2.554575338134361e-06, -2.555334205538176e-06, -2.555334205538176e-06, -1.291909890499530e-04, -1.246536930200985e-04, -1.309730093407667e-04, -1.268743324894540e-04, -1.257943231647330e-04, -1.257943231647330e-04, -1.688758461315325e-02, -1.218342053511427e-02, -2.655749491628418e-02, -2.364894611177013e-02, -1.573157074097271e-02, -1.573157074097271e-02, 8.231394473166888e-01, -2.053544011815221e+00, 1.199933064216260e+00, -1.684486643244956e-04, -7.793236588621599e-01, -7.793236588621666e-01, 1.365315754569413e+01, 1.217991204273047e+01, 7.627084616004738e+01, 3.413654649160250e+00, 3.553811820884249e+01, 3.553811820884242e+01, -1.575105901346357e-02, -1.607837588831688e-02, -1.596227279719301e-02, -1.586746891351823e-02, -1.591489595922211e-02, -1.591489595922211e-02, -1.770615353568173e-02, -3.165141811819140e-02, -2.661164788263934e-02, -2.254573582856338e-02, -2.453882977151836e-02, -2.453882977151836e-02, -1.035973548900495e-02, -7.625371973870259e-01, -3.979933296195899e-01, -1.518531531698988e-01, -2.393644441571192e-01, -2.393644441571194e-01, -4.648095890142018e-02, 2.455437803369286e+00, 3.595551705888733e+00, -1.656356184097295e-01, 1.489816201189103e+00, 1.489816201189110e+00, 9.045165757542662e+00, 5.994223920598125e+01, 2.889885008857143e+01, -3.946229301806043e-01, 4.487485705423657e+01, 4.487485705423665e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_pbe_gx_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_pbe_gx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.818336857588960e-03, 1.818332456323037e-03, 1.818307476154701e-03, 1.818372915715335e-03, 1.818339398510808e-03, 1.818339398510808e-03, 1.519605228609256e-02, 1.519041718272756e-02, 1.503644861210570e-02, 1.500676898403463e-02, 1.504883434986124e-02, 1.504883434986124e-02, 9.614557826634468e-03, 9.581355445535199e-03, 9.001080227472862e-03, 1.033180785738227e-02, 9.905507758144597e-03, 9.905507758144597e-03, 2.024545343971277e-01, 2.032314829969122e-01, 2.591070667517182e-03, 2.719617221087278e-02, 6.024468157458755e-02, 6.024468157458761e-02, 4.175637574433713e-05, 1.764106858084358e-05, 5.666619643863839e-04, 1.166940631922641e-08, 1.500369218475358e-07, 1.500369218475319e-07, 7.476329278356047e-03, 7.475678263336644e-03, 7.476265144713821e-03, 7.475691710691298e-03, 7.476017173964536e-03, 7.476017173964536e-03, 1.948215283524146e-02, 1.927299995498850e-02, 1.946255196095551e-02, 1.927823065913586e-02, 1.937141168735286e-02, 1.937141168735286e-02, 6.861193270136937e-02, 6.384465391369794e-02, 8.215903443020611e-02, 8.196725069398318e-02, 6.729033375097340e-02, 6.729033375097340e-02, 1.077629065350812e-02, 2.003281202143620e-01, 8.052860173301446e-03, 2.325028854305417e-02, 4.416544269818054e-02, 4.416544269818067e-02, 2.388411907184651e-10, 2.277274958596322e-09, 4.087395397619416e-08, 2.642508394618307e-03, 9.948681032156331e-09, 9.948681032154505e-09, 6.692375415820732e-02, 6.708054330011803e-02, 6.702547340220920e-02, 6.698036946131779e-02, 6.700311402965525e-02, 6.700311402965525e-02, 6.909487481520536e-02, 7.740521560012013e-02, 7.495855210127909e-02, 7.260003016755467e-02, 7.383410976792371e-02, 7.383410976792372e-02, 6.198485918756022e-02, 1.566806758435276e-01, 1.418339608690049e-01, 1.234134732315144e-01, 1.298549935328507e-01, 1.298549935328508e-01, 8.682795468192780e-02, 1.614965488201725e-03, 1.135198267939813e-03, 1.230872352559775e-01, 1.222586041872890e-02, 1.222586041872887e-02, 1.299201899947701e-07, 1.158371874428827e-12, 9.655709444578529e-09, 2.166912678805529e-02, 1.885679780800513e-08, 1.885679780800643e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
