
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_revscan_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.318890339927287e+01, -2.318896314732548e+01, -2.318929888234639e+01, -2.318832159315425e+01, -2.318893429805913e+01, -2.318893429805913e+01, -3.359208663928923e+00, -3.359340555775039e+00, -3.363688642439642e+00, -3.364850044442655e+00, -3.359245065830394e+00, -3.359245065830394e+00, -5.853786327061331e-01, -5.847652762362924e-01, -5.700123009701151e-01, -5.819299145447857e-01, -5.851640383613135e-01, -5.851640383613135e-01, -1.879389445364775e-01, -1.897427086181377e-01, -6.571512480241827e-01, -1.109139051508962e-01, -1.883489273692695e-01, -1.883489273692695e-01, -5.448657828693000e-03, -5.782262726550770e-03, -3.133122938045809e-02, -1.988917052228607e-03, -5.724634036676978e-03, -5.724634036676978e-03, -5.665612537599754e+00, -5.666681599686847e+00, -5.665737418775121e+00, -5.666567888787261e+00, -5.666139720581616e+00, -5.666139720581616e+00, -2.079862501764259e+00, -2.101465973796110e+00, -2.076954772039558e+00, -2.093950196978984e+00, -2.098428403573496e+00, -2.098428403573496e+00, -6.069751724079026e-01, -6.592863521362834e-01, -5.537565812488624e-01, -5.778464220592963e-01, -6.377794446604664e-01, -6.377794446604664e-01, -7.905335720171865e-02, -1.852108894816185e-01, -7.837004898541625e-02, -1.910876627146677e+00, -9.709117733522561e-02, -9.709117733522561e-02, -1.904379261079545e-03, -2.281498438134039e-03, -1.695086824415493e-03, -4.603255423166562e-02, -2.081984466967343e-03, -2.081984466967343e-03, -6.500009859968712e-01, -6.466115914393620e-01, -6.478344540538513e-01, -6.487721439667915e-01, -6.483023579500939e-01, -6.483023579500939e-01, -6.265982473225965e-01, -5.437092058630438e-01, -5.681571582633370e-01, -5.906495758822252e-01, -5.790313405315629e-01, -5.790313405315630e-01, -6.801274237814601e-01, -2.425200735681309e-01, -2.850563692496396e-01, -3.543691787100631e-01, -3.215345214970693e-01, -3.215345214970693e-01, -4.768016450935960e-01, -2.848416732684635e-02, -4.063925869037951e-02, -3.355743386531224e-01, -6.366271988276934e-02, -6.366271988276931e-02, -6.517134620331369e-03, -4.014899672532905e-04, -9.688852351706204e-04, -6.062678722386720e-02, -1.727829163814574e-03, -1.727829163814570e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_revscan_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.027374625897479e+01, -3.027383761676964e+01, -3.027429191260619e+01, -3.027279636724569e+01, -3.027379402933220e+01, -3.027379402933220e+01, -4.766450534130969e+00, -4.767137116935885e+00, -4.787519010962051e+00, -4.787597011464208e+00, -4.766609513833259e+00, -4.766609513833259e+00, -8.259927797630912e-01, -8.245247215372584e-01, -7.925337483417959e-01, -8.168594658608189e-01, -8.254855220761099e-01, -8.254855220761099e-01, -1.960464490402983e-01, -1.999858367278459e-01, -8.540001335705525e-01, -1.527708936254940e-01, -1.967003913892769e-01, -1.967003913892769e-01, -7.970086460244059e-03, -8.925656576531348e-03, -4.749762169551590e-02, -3.592132743218529e-03, -8.482465333381588e-03, -8.482465333381633e-03, -7.425145933888116e+00, -7.427355808330089e+00, -7.425379127294981e+00, -7.427097061298111e+00, -7.426269447534211e+00, -7.426269447534211e+00, -2.580291568255331e+00, -2.616249904627342e+00, -2.572099562712137e+00, -2.600918113833275e+00, -2.615887318013071e+00, -2.615887318013071e+00, -8.137517370252355e-01, -9.222461241513128e-01, -7.777752708099220e-01, -8.570840690743130e-01, -8.493616103042018e-01, -8.493616103042018e-01, -1.085137174523134e-01, -1.261738938275133e-01, -1.068472149113078e-01, -2.923298671889401e+00, -1.021904654072530e-01, -1.021904654072530e-01, -3.442325875687536e-03, -4.097889060612252e-03, -3.046646851462758e-03, -6.935076355624742e-02, -3.738875446161881e-03, -3.738875446161881e-03, -8.683433734504469e-01, -8.591076091074177e-01, -8.623518939264420e-01, -8.649067239426773e-01, -8.636233651876731e-01, -8.636233651876731e-01, -8.423243902725602e-01, -6.968964780091086e-01, -7.380430589856873e-01, -7.768649683058587e-01, -7.569930153620735e-01, -7.569930153620738e-01, -9.776827156509874e-01, -2.584215680449247e-01, -3.225535824278518e-01, -4.615153315230161e-01, -3.901213239844334e-01, -3.901213239844335e-01, -6.126489629994660e-01, -4.101502295417596e-02, -6.070924778465706e-02, -4.537487764384314e-01, -8.577078795004560e-02, -8.577078795004563e-02, -1.117536730473102e-02, -7.546117333082681e-04, -1.782814488148773e-03, -8.302328528583250e-02, -3.113250261049503e-03, -3.113250261049496e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revscan_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.416689084910589e-09, -5.416644807252001e-09, -5.416224778360888e-09, -5.416941220814047e-09, -5.416667762143477e-09, -5.416667762143477e-09, -1.773124342034535e-05, -1.775457497225812e-05, -1.844115968759264e-05, -1.849716782590681e-05, -1.773511449265208e-05, -1.773511449265208e-05, -5.251047832864816e-03, -5.218273644853299e-03, -4.563705836076251e-03, -5.584388809611871e-03, -5.240480135342365e-03, -5.240480135342365e-03, -1.594218002823398e+00, -1.613823651995912e+00, -1.711339550082940e-03, -2.558607923754720e-01, -1.616205464700663e+00, -1.616205464700663e+00, -8.080444667426659e+01, -2.344843089866463e+01, 7.749599183956967e-01, 3.183656465683854e+02, -6.393779796791843e+01, -6.393779796791350e+01, -1.526922685147727e-06, -1.527350035303700e-06, -1.526882577828915e-06, -1.527219549928053e-06, -1.527254345683029e-06, -1.527254345683029e-06, -8.811650400035632e-05, -8.081284940810434e-05, -8.591878758714508e-05, -8.011912123498936e-05, -8.572930905937249e-05, -8.572930905937249e-05, -1.854640979833013e-02, -1.535289921500887e-02, -3.346328719288116e-02, -3.176717220601457e-02, -1.373741149533448e-02, -1.373741149533448e-02, -6.142619366293859e-01, -1.703209255357623e+00, -7.658404796266286e-01, -2.799143706448919e-04, -3.089736141821268e+00, -3.089736141821268e+00, 3.502978112576780e+02, 2.749841103224036e+02, 8.190003320070955e+02, 9.526431302037065e-01, 4.031011975279525e+02, 4.031011975279524e+02, -1.088587604092362e-02, -1.058167559542214e-02, -1.068766222298062e-02, -1.077331623488015e-02, -1.073063032769212e-02, -1.073063032769212e-02, -1.351818555615566e-02, -1.646449504970190e-02, -1.513776886220430e-02, -1.431611332755797e-02, -1.480639884413395e-02, -1.480639884413395e-02, -1.522850588563211e-02, -4.305460518186249e-01, -2.966179160551441e-01, -1.753037516095328e-01, -2.058925988634595e-01, -2.058925988634596e-01, -4.124735739592324e-02, -2.450870545363170e+00, 3.207208410369903e-01, -2.300353438010115e-01, -1.630296443081822e+00, -1.630296443081804e+00, 5.955136023850486e+01, 3.649416906660457e+03, 1.102313269485207e+03, -1.556644252890374e+00, 6.671343725197731e+02, 6.671343725197744e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revscan_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([8.762331901939587e-04, 8.762319919673130e-04, 8.762011854741725e-04, 8.762195995897218e-04, 8.762327931588099e-04, 8.762327931588099e-04, 1.050497006197460e-02, 1.052088619664492e-02, 1.099267393975063e-02, 1.104732537524164e-02, 1.050770016467077e-02, 1.050770016467077e-02, 1.868375531372110e-02, 1.855805390747076e-02, 1.637060327213288e-02, 2.156493002606804e-02, 1.864439786262954e-02, 1.864439786262954e-02, 1.585983559637523e-01, 1.665082782919671e-01, 2.888160529054691e-03, 1.305635826706970e-02, 1.624870382900726e-01, 1.624870382900726e-01, 2.951968923988904e-03, 2.126916227179908e-03, 2.702848305012392e-03, 3.531598705563343e-07, 2.884599593453937e-03, 2.884599593453845e-03, 3.571528911216174e-03, 3.573567851421765e-03, 3.571587860748575e-03, 3.573181830066661e-03, 3.572775287553807e-03, 3.572775287553807e-03, 1.094875036361031e-02, 1.030593648539810e-02, 1.062356696544869e-02, 1.011339922429489e-02, 1.090883908190343e-02, 1.090883908190343e-02, 5.560906130094364e-02, 5.571318858398332e-02, 8.316978054333192e-02, 8.498464871501259e-02, 4.656813641000357e-02, 4.656813641000357e-02, 1.336907846946848e-02, 1.721385833630364e-01, 1.532112112398107e-02, 2.728925277458930e-02, 7.415154301735799e-02, 7.415154301735799e-02, 1.593636066845213e-06, 9.788534886279433e-07, 7.370509180061457e-06, 1.126163337742284e-03, 5.674735610859727e-07, 5.674735610859704e-07, 3.657383775063889e-02, 3.551309249864310e-02, 3.588084305780416e-02, 3.617476101397725e-02, 3.602780654546921e-02, 3.602780654546921e-02, 4.043589565775163e-02, 3.535018752117108e-02, 3.637136901534278e-02, 3.772408972421472e-02, 3.722557833360019e-02, 3.722557833360018e-02, 6.262840988431073e-02, 8.873425345978392e-02, 1.006155390962821e-01, 1.182535666233934e-01, 9.961183473203697e-02, 9.961183473203690e-02, 6.163073397791063e-02, 5.807105233930457e-03, 3.176236802800212e-03, 1.281357673782855e-01, 1.769362984648476e-02, 1.769362984648463e-02, 8.297040008836503e-06, 5.480051779596968e-09, 2.078146802344068e-06, 1.578048390397186e-02, 4.402759639851830e-07, 4.402759639851814e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
