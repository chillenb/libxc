
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_revscan_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.174951414757899e+01, -2.174962732394428e+01, -2.175016550043528e+01, -2.174831765095308e+01, -2.174957347504674e+01, -2.174957347504674e+01, -3.072379454692797e+00, -3.072559690393485e+00, -3.078107130262549e+00, -3.076201123255901e+00, -3.072444097841662e+00, -3.765974006981416e+00, -5.122426797634901e-01, -7.146210966597492e-01, -6.938513963493353e-01, -7.001135786908397e-01, -7.151302397147177e-01, -7.151302397147177e-01, -1.951569374341467e-01, -1.979250539134912e-01, -5.946179835884297e-01, -1.367054375752378e-01, -1.959850664055233e-01, -1.959850664055233e-01, -6.927645856155435e-03, -7.351796178558653e-03, -3.931379090709159e-02, -2.387431498604227e-03, -7.276773741675604e-03, -7.276773741675548e-03, -5.666542301438776e+00, -5.667601371595872e+00, -5.666654321922782e+00, -5.452973864272882e+00, -5.667080293845722e+00, -5.667080293845722e+00, -1.646304351851498e+00, -1.671421913795532e+00, -1.635902223353741e+00, -1.655365409441252e+00, -1.677365789796505e+00, -2.132058309946530e+00, -6.301973950768262e-01, -6.859350073953744e-01, -5.971710001205305e-01, -6.241394023091413e-01, -6.549404925248582e-01, -5.727802987593276e-01, -6.931378710777825e-02, -1.942258417220568e-01, -6.846289147027904e-02, -2.084012215862873e+00, -1.155980963486767e-01, -1.155980963486767e-01, -3.331470295211886e-03, -2.784490476470190e-03, -2.127248866081236e-03, -4.288251538936629e-02, -3.469075015011114e-03, -2.500278706319745e-03, -6.523986383663397e-01, -6.488404051827572e-01, -6.418088658362312e-01, -6.511067664901988e-01, -6.506146565996668e-01, -6.506146565996668e-01, -6.314408180569842e-01, -5.458224102951187e-01, -5.710151277364587e-01, -5.942454469897521e-01, -5.824255888894184e-01, -5.373183668045326e-01, -7.188525183816071e-01, -1.732278864044849e-01, -2.947273357607676e-01, -2.968841307957305e-01, -3.346490227504230e-01, -3.346490227504230e-01, -4.068897328324430e-01, -3.577486136498494e-02, -5.084813598301510e-02, -3.589819483615526e-01, -5.618305694503271e-02, -7.857078250518597e-02, -7.936111588989606e-03, -4.640588152050981e-04, -1.221564564401199e-03, -7.494498823676608e-02, -2.066175921159675e-03, -2.066175921159662e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_revscan_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.273026004520060e+01, -3.273023690870307e+01, -3.273020174223139e+01, -3.273056891242235e+01, -3.273024741048644e+01, -3.273024741048644e+01, -5.352528049959184e+00, -5.352971626509584e+00, -5.366147195240454e+00, -5.361558041528959e+00, -5.352676718165355e+00, -4.743309613997473e+00, -7.789882550613166e-01, -8.443660834244451e-01, -8.034932704264826e-01, -8.183601428476025e-01, -8.453601247454701e-01, -8.453601247454701e-01, -2.254883653653453e-01, -2.303133331285666e-01, -8.503497914793001e-01, -9.750277233915146e-02, -2.269143595633948e-01, -2.269143595633948e-01, 4.124882243895617e-01, 3.993152044803308e-01, 1.562441351719968e-01, 1.067160033236317e+00, 3.946282292585093e-01, 3.946282292585883e-01, -7.424791518896140e+00, -7.426999992231815e+00, -7.425029101575881e+00, -7.742935525052233e+00, -7.425908155554541e+00, -7.425908155554541e+00, -2.736956270838112e+00, -2.803262936134705e+00, -2.710117676488863e+00, -2.760273890791711e+00, -2.820062235393407e+00, -2.661248004902140e+00, -8.080366486424851e-01, -8.930217573309028e-01, -7.587321962613661e-01, -8.039743755407781e-01, -8.445225348121409e-01, -9.551291845513994e-01, -9.355044433180486e-02, -1.996513074979217e-01, -9.246757150391978e-02, -2.688702556930768e+00, -7.329452425500617e-02, -7.329452425500617e-02, -4.442135972967009e-03, 9.099973649374197e-01, 6.237925762779097e-01, -5.744689158884715e-02, -4.625633573644458e-03, 8.871182889277478e-01, -8.654862479225841e-01, -8.570331875513926e-01, -8.711382564009053e-01, -8.623563742339965e-01, -8.611817069793932e-01, -8.611817069793932e-01, -8.363279652372705e-01, -6.981980646748365e-01, -7.383781562610591e-01, -7.755710918758323e-01, -7.565871908830480e-01, -8.339276605072539e-01, -9.320274096911715e-01, -2.505178704030860e-01, -3.509999517033483e-01, -4.962623558100652e-01, -4.107308136699065e-01, -4.107308136699064e-01, -7.082582325980260e-01, 1.834109276364260e-01, 1.173158954602544e-01, -4.529035924341778e-01, -7.569614344774382e-02, 4.122512178787932e-03, 5.529491371584522e-01, 1.935033109721071e+00, 1.004752330834820e+00, 4.269404690124738e-03, 8.567627227679181e-01, 8.567627227680074e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revscan_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.628759614883203e-08, -1.628703952348824e-08, -1.628447695736579e-08, -1.629355340645273e-08, -1.628730379328667e-08, -1.628730379328667e-08, -2.103055214870434e-05, -2.103529692919849e-05, -2.117124265840676e-05, -2.111274409949325e-05, -2.103146986021633e-05, -6.134951613705115e-06, -1.080920575538669e-02, -4.222567234739067e-03, -4.658044911953873e-03, -4.533221767258093e-03, -4.212670755193600e-03, -4.212670755193600e-03, -7.427787938431551e-01, -7.066485823973515e-01, -5.318763875181152e-03, -2.542743513126334e+00, -7.316582611216311e-01, -7.316582611216311e-01, -4.940433226445203e+04, -4.157347301883435e+04, -1.977422051212369e+02, -6.713986221301131e+05, -4.336186336426287e+04, -4.336186336427138e+04, -1.519588123563886e-06, -1.520092958036878e-06, -1.519649360952188e-06, -3.415023845690017e-06, -1.519833770772527e-06, -1.519833770772527e-06, -1.607994951295572e-04, -1.637557528529696e-04, -1.596698646462473e-04, -1.616306405408666e-04, -1.649401103535398e-04, -5.820723802394325e-05, -8.428868253462033e-03, -6.673074719269825e-03, -1.001361936555897e-02, -9.000259912205297e-03, -7.471946326587491e-03, -3.273021911756138e-02, -2.503298165280543e+01, -7.016460296207948e-01, -2.633702588630404e+01, -7.314118196846266e-05, -4.860964569814595e+00, -4.860964569814595e+00, -4.587968661378993e+06, -4.807108952228823e+05, -1.552599169218131e+06, -1.685087251588480e+02, -3.902224692622715e+06, -6.873566524228515e+05, -9.836176574820079e-03, -9.602137391376754e-03, -1.337735688559777e-02, -9.745269313995546e-03, -9.712095991045883e-03, -9.712095991045883e-03, -1.101974374140900e-02, -1.479471670108885e-02, -1.317994983596991e-02, -1.210724058636801e-02, -1.260495402563640e-02, -4.629854016539956e-02, -5.351101125680893e-03, -7.604174286917305e-01, -1.472511307050647e-01, -1.596959033651668e-01, -9.251558883264301e-02, -9.251558883264296e-02, -7.583238184482269e-02, -2.645624566097082e+02, -8.217595766188529e+01, -7.471498524281296e-02, -5.779865810692660e+01, -1.953712804987609e+01, -2.560309869427905e+04, -5.210683710342163e+07, -5.543797913477428e+06, -2.358150308489825e+01, -1.281248613397076e+06, -1.281248613397213e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revscan_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.187470123743625e-03, 2.187416468920297e-03, 2.187177682069715e-03, 2.188051376082833e-03, 2.187441887064811e-03, 2.187441887064811e-03, 9.455809603309709e-03, 9.459481124880011e-03, 9.567289000321739e-03, 9.525325884309824e-03, 9.456784269544827e-03, 4.458029979877601e-03, 8.973650277173711e-03, 2.155808119897485e-02, 2.189150256892651e-02, 2.183102752028774e-02, 2.155055368269194e-02, 2.155055368269194e-02, 7.772184949096274e-02, 7.698567257528413e-02, 2.502399174682766e-03, 9.867508525473608e-02, 7.749438175046278e-02, 7.749438175046278e-02, 8.303086396391948e-01, 8.031157938613219e-01, 2.600624467983103e-01, 1.243325012561616e+00, 8.117506612298628e-01, 8.117506612300206e-01, 3.558113297156508e-03, 3.560296305715018e-03, 3.558357845765864e-03, 6.848958779340108e-03, 3.559203585866058e-03, 3.559203585866058e-03, 1.040579528671651e-02, 1.132892478397367e-02, 1.003451613140047e-02, 1.071744441569511e-02, 1.159112701003890e-02, 7.720034910486008e-03, 2.822582657849677e-02, 2.812332835772130e-02, 2.880818788115701e-02, 2.910114627558580e-02, 2.787409688657278e-02, 9.094266280515065e-02, 6.780559221764640e-04, 7.424454508217472e-02, 7.681648102689441e-04, 8.783713851401417e-03, 1.153339109193224e-01, 1.153339109193224e-01, 1.509558526693162e-07, 1.193049211005233e+00, 1.622489011125788e+00, 1.658340291603717e-04, 1.738530074162821e-07, 1.290376551620935e+00, 3.387272090244509e-02, 3.298891786092877e-02, 4.282031047724689e-02, 3.353878097052561e-02, 3.341499633257594e-02, 3.341499633257594e-02, 3.458880551018079e-02, 3.227824478314870e-02, 3.244372545678655e-02, 3.300182661799742e-02, 3.266235094622178e-02, 9.680020714520293e-02, 2.616201489629648e-02, 1.146328458019100e-02, 5.260997042238462e-02, 6.145136615387505e-02, 4.785384159577802e-02, 4.785384159577796e-02, 7.808973774444129e-02, 2.758470635240722e-01, 2.140469154499021e-01, 4.696651373070648e-02, 6.151596929722719e-04, 1.578287374021771e-01, 6.924873545174192e-01, 2.652610812771202e+00, 1.934979100123672e+00, 1.654023378169237e-01, 1.476361510732005e+00, 1.476361510732156e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
