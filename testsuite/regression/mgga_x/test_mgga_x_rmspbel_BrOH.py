
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_rmspbel_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmspbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.051157451412114e+01, -2.051166789835224e+01, -2.051211714359490e+01, -2.051059179814134e+01, -2.051162343132754e+01, -2.051162343132754e+01, -3.196808723381747e+00, -3.196860886764544e+00, -3.198531051741941e+00, -3.198142874126373e+00, -3.196838412724929e+00, -3.767094512074090e+00, -5.782725818946564e-01, -7.659312729558247e-01, -7.563741724517792e-01, -7.573865011965634e-01, -7.661606976418586e-01, -7.661606976418586e-01, -2.131223196008485e-01, -2.149171743543473e-01, -6.824711741217672e-01, -1.784316560096921e-01, -2.136753823674638e-01, -2.136753823674638e-01, -1.697538309950105e-02, -1.777367613412393e-02, -6.941760382875288e-02, -8.174675206888421e-03, -1.758833026569716e-02, -1.758833026569716e-02, -5.365736103009600e+00, -5.365988220580218e+00, -5.365759044294601e+00, -5.127638014337196e+00, -5.365868763004189e+00, -5.365868763004189e+00, -1.768051678386354e+00, -1.786506818150418e+00, -1.760360067327955e+00, -1.774869565229697e+00, -1.790535593421291e+00, -2.157390420037655e+00, -6.150693538410147e-01, -6.550775274709454e-01, -5.903750757026167e-01, -6.051289894316054e-01, -6.340483485649322e-01, -5.614084711862722e-01, -8.191289478693416e-02, -2.279101201319781e-01, -8.086821979515688e-02, -2.015976633863804e+00, -1.536992398301125e-01, -1.536992398301125e-01, -3.972557313359509e-03, -9.010416753485028e-03, -6.752717953220687e-03, -5.094942624672240e-02, -4.136629379173095e-03, -8.210419799924948e-03, -6.093545582053084e-01, -6.086525727515232e-01, -6.018641228937333e-01, -6.090991243031486e-01, -6.090033066691677e-01, -6.090033066691677e-01, -5.906894823342248e-01, -5.345194097229091e-01, -5.505710972549648e-01, -5.656020649979764e-01, -5.579375893803853e-01, -5.090413986446453e-01, -6.904862885009870e-01, -1.980300396751646e-01, -3.136322383746941e-01, -3.178952832826276e-01, -3.453928549175173e-01, -3.453928549175172e-01, -4.183606987650139e-01, -6.475597796120278e-02, -8.555477134539467e-02, -3.582941741962934e-01, -6.647566894563146e-02, -1.157990826227312e-01, -1.990738220612927e-02, -2.468778980815137e-03, -4.688537498284239e-03, -1.105074596659200e-01, -6.978534789571908e-03, -6.978534789571897e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_rmspbel_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmspbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.004238490705255e+01, -3.004248710191074e+01, -3.004299390158961e+01, -3.004132191738335e+01, -3.004243833734738e+01, -3.004243833734738e+01, -4.591058824222153e+00, -4.590913376871538e+00, -4.586596829085001e+00, -4.588659129655531e+00, -4.591040310132270e+00, -4.441671609746545e+00, -8.214820481466449e-01, -8.283559318814353e-01, -8.045602494398963e-01, -8.115029526055580e-01, -8.289586691027208e-01, -8.289586691027208e-01, -2.263290758712888e-01, -2.294480709886661e-01, -9.398173799999646e-01, -1.796740881246530e-01, -2.272583397555578e-01, -2.272583397555578e-01, -2.243601508427782e-02, -2.347214127793317e-02, -8.503111186294939e-02, -1.088635826596689e-02, -2.322704107841774e-02, -2.322704107841771e-02, -6.913867707845060e+00, -6.915933091931871e+00, -6.914089940307092e+00, -7.276006858998864e+00, -6.914912001436781e+00, -6.914912001436781e+00, -2.606051688548980e+00, -2.627910740976684e+00, -2.596101677174234e+00, -2.614567086257381e+00, -2.631946338549219e+00, -2.502349769769668e+00, -7.529765321703793e-01, -8.314872009476381e-01, -7.083875539296863e-01, -7.488009514437782e-01, -7.865044879426970e-01, -7.850580564563949e-01, -1.093706671539310e-01, -2.307753479668881e-01, -1.079933221509464e-01, -2.503900979398551e+00, -1.557190328848510e-01, -1.557190328848510e-01, -5.296743168096110e-03, -1.199402276953131e-02, -8.987047596107847e-03, -6.794746324391028e-02, -5.515505943315064e-03, -1.093054100006670e-02, -8.055217414328630e-01, -7.979541412624992e-01, -8.117908686388036e-01, -8.027486865516468e-01, -8.016986339632952e-01, -8.016986339632952e-01, -7.785178284378276e-01, -6.508699805301342e-01, -6.875477926528649e-01, -7.221557822123976e-01, -7.044449837945090e-01, -7.465744401659096e-01, -8.678059758820448e-01, -2.748076992627865e-01, -3.417781714731824e-01, -4.680290245250659e-01, -3.901964314657060e-01, -3.901964314657059e-01, -5.922922043078652e-01, -8.035397094791338e-02, -1.017216377874082e-01, -4.238261080999369e-01, -8.872649755784510e-02, -1.246409995281598e-01, -2.634361777669334e-02, -3.291275197782983e-03, -6.247254152891763e-03, -1.189867710483842e-01, -9.292564039253083e-03, -9.292564039253067e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rmspbel_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmspbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.443270705431918e-08, -1.443270925456229e-08, -1.443260231593892e-08, -1.443258152672075e-08, -1.443270900328883e-08, -1.443270900328883e-08, -1.039072788744872e-05, -1.038884256508804e-05, -1.032932157681247e-05, -1.034936605818785e-05, -1.039000713236838e-05, -4.097303944240451e-06, -6.586083134577779e-03, -2.395970699438415e-03, -2.501441957233757e-03, -2.497060392133084e-03, -2.393430434765396e-03, -2.393430434765396e-03, -3.964771296308567e-01, -3.844906867500141e-01, -2.944116565127448e-03, -5.915567103147811e-01, -3.927243868836999e-01, -3.927243868836999e-01, -8.655841940941770e+00, -8.578286602143576e+00, -2.600951457441345e+00, -3.104936102444953e+00, -8.971993410249647e+00, -8.971993410252391e+00, -9.676512845333209e-07, -9.673688818139670e-07, -9.676236054778662e-07, -3.959899844926820e-06, -9.675051409203632e-07, -9.675051409203632e-07, -1.096658336501735e-04, -1.070129764979150e-04, -1.105968358826669e-04, -1.087054803860074e-04, -1.064310084001150e-04, -3.819787305402502e-05, -5.709791248063062e-03, -4.382001602876885e-03, -6.765003794694037e-03, -6.073357161432164e-03, -5.034714961909931e-03, -1.217719111435941e-02, -1.303807099943823e+01, -2.830864749294242e-01, -1.372814660330636e+01, -4.924185628803464e-05, -1.007931275505903e+00, -1.007931275505903e+00, -2.352776475343934e+06, -3.915882376008383e+00, -1.538634952530515e+01, -8.697677963396195e+01, -2.001128183890612e+06, -4.825863012178397e+00, -5.753501490304782e-03, -5.801581595953316e-03, -1.367511421914540e-02, -5.771054071155832e-03, -5.777671750978181e-03, -5.777671750978181e-03, -6.524723842196794e-03, -1.002685311884521e-02, -8.834945644487302e-03, -7.866825327409096e-03, -8.344041146229811e-03, -3.392185634967766e-02, -3.563182115463968e-03, -4.279767019764549e-01, -8.540577983816448e-02, -1.061338701589509e-01, -5.827254960975325e-02, -5.827254960975320e-02, -3.389250397274366e-02, -2.508820740614596e+00, -1.982984863110910e+00, -5.003497861759067e-02, -3.004366418408949e+01, -1.873065979567754e+00, -3.388017556895499e+00, -4.341520286570736e+00, -8.526515355679495e+00, -2.251549680858587e+00, -6.786325038158551e+00, -6.786325038159885e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rmspbel_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmspbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.579296804456209e-03, 1.579318654032941e-03, 1.579410871276588e-03, 1.579055560840454e-03, 1.579308337309342e-03, 1.579308337309342e-03, 2.474180397347732e-03, 2.473121632861060e-03, 2.440247358780883e-03, 2.452996861578196e-03, 2.473874926734859e-03, 2.187675190310184e-18, 4.716118913501063e-03, -1.100035708692491e-17, 1.657421905543825e-17, -8.621503478488877e-17, -5.789075473943035e-17, -5.789075473943035e-17, 1.007606826942316e-16, 1.127427966355826e-16, 1.298741577205049e-03, -4.117777878800797e-16, 5.522539462717325e-17, 5.522539462717325e-17, 7.897299150561032e-18, -5.757776001918167e-17, -3.778085679709440e-16, -1.560084778992675e-19, -3.961048493595844e-17, 9.974763999430328e-18, -1.720474620457256e-18, 2.101751314500453e-19, -1.170057951993060e-19, 6.368280599327649e-03, 6.286878617034386e-20, 6.286878617034386e-20, 4.774815696674315e-03, 4.847397659596139e-03, 4.723147440159090e-03, 4.806773964668477e-03, 4.857632136397184e-03, 8.386593534502405e-18, 1.795729578397216e-17, -5.601713759904221e-18, -3.018582350495148e-17, 1.371309102640829e-17, 7.689226718977595e-18, 1.734715087985030e-02, 9.192435535738331e-05, 9.009677829506909e-17, 1.096903111536747e-04, 2.722722872372590e-18, 4.225785921541568e-16, 4.225785921541568e-16, 7.189023130519685e-11, -8.525714913788299e-19, -1.525570826214530e-18, 9.141537784045885e-06, 9.066670557602420e-11, 9.158854186969610e-19, 4.806088616506476e-18, -1.364197744753703e-18, 2.588554897515279e-02, -3.614336094641909e-18, -4.759765900578929e-20, -4.759765900578929e-20, 4.012962115336594e-18, -1.796251906077153e-17, 1.973993106301209e-17, 1.491269764106091e-17, -1.355131815298743e-17, 5.589758356992229e-02, -7.695108045908901e-18, 6.314541955590855e-03, -9.120835108782808e-17, 2.702956465747111e-02, -2.518302057369543e-17, -5.447431602517339e-17, 1.624469748476890e-02, -4.513727946913347e-17, -3.961848847705295e-17, 1.239071642900749e-17, 7.227162738454496e-05, -2.400539402641456e-16, 2.214837884323206e-17, 1.784742246847643e-21, -1.148638171176527e-20, -2.241537688396760e-16, -4.626130706212631e-20, 8.530556926589838e-19])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
