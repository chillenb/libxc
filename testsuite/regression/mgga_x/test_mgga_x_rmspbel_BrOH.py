
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_rmspbel_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmspbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.215012042007823e+01, -2.215016182627394e+01, -2.215040987930415e+01, -2.214973102571309e+01, -2.215014172116570e+01, -2.215014172116570e+01, -3.377336536207666e+00, -3.377343017538259e+00, -3.377768979207886e+00, -3.379080282411663e+00, -3.377346749037490e+00, -3.377346749037490e+00, -6.490500590050876e-01, -6.488345664219816e-01, -6.459906063567123e-01, -6.541320021262544e-01, -6.489739296803346e-01, -6.489739296803346e-01, -2.054397931396692e-01, -2.060831396383149e-01, -7.360159250334666e-01, -1.632233542814228e-01, -2.055149898207282e-01, -2.055149898207282e-01, -1.697367210522082e-02, -1.777123061209184e-02, -6.888962761320548e-02, -8.172487657160828e-03, -1.758620270916168e-02, -1.758620270916168e-02, -5.365139164146610e+00, -5.365398124018528e+00, -5.365170470041778e+00, -5.365371736213980e+00, -5.365265019540023e+00, -5.365265019540023e+00, -2.108957055297597e+00, -2.126439912288371e+00, -2.110312083945264e+00, -2.123817635229893e+00, -2.119343902538369e+00, -2.119343902538369e+00, -5.852808764691054e-01, -6.236531120664481e-01, -5.397452730053154e-01, -5.524709108703809e-01, -6.131922157024491e-01, -6.131922157024491e-01, -1.351249275702206e-01, -2.208898091452232e-01, -1.324252942392084e-01, -1.827992908625991e+00, -1.473743316523112e-01, -1.473743316523112e-01, -7.884178468933262e-03, -9.008007434443464e-03, -6.751914359179496e-03, -9.162675988163826e-02, -8.207610729353828e-03, -8.207610729353828e-03, -6.077485659731239e-01, -6.071124643707699e-01, -6.073426356206264e-01, -6.075168841556552e-01, -6.074291959829731e-01, -6.074291959829731e-01, -5.870206469264342e-01, -5.327743614241001e-01, -5.481656045246492e-01, -5.626230452421171e-01, -5.550619099390810e-01, -5.550619099390810e-01, -6.443240057901997e-01, -2.694553123850669e-01, -3.024602801516428e-01, -3.551095881719381e-01, -3.289764086850643e-01, -3.289764086850643e-01, -4.707633899020057e-01, -6.450591619285859e-02, -8.443233912007532e-02, -3.300734476612241e-01, -1.123711813960879e-01, -1.123711813960879e-01, -1.987593361028321e-02, -2.468674339502752e-03, -4.688395793228097e-03, -1.070519030634236e-01, -6.976363251144215e-03, -6.976363251144205e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_rmspbel_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmspbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.807835189392418e+01, -2.807844406269621e+01, -2.807894654868542e+01, -2.807744120343792e+01, -2.807839966332693e+01, -2.807839966332693e+01, -4.208091599260317e+00, -4.208306162060869e+00, -4.215082388121841e+00, -4.214427143164738e+00, -4.208160683102854e+00, -4.208160683102854e+00, -7.859163485941028e-01, -7.841357813043525e-01, -7.386495184982304e-01, -7.515877573300150e-01, -7.852796204590305e-01, -7.852796204590305e-01, -1.692523129070766e-01, -1.747846396745311e-01, -8.916451981941672e-01, -1.453082896106026e-01, -1.709261235626518e-01, -1.709261235626518e-01, -2.242848111029331e-02, -2.346167374229450e-02, -8.296504426736859e-02, -1.087762031137040e-02, -2.321774061446014e-02, -2.321774061446014e-02, -6.912701335535318e+00, -6.914794846254098e+00, -6.912941121207022e+00, -6.914567366764152e+00, -6.913740490853725e+00, -6.913740490853725e+00, -2.245383069808234e+00, -2.299665232043549e+00, -2.245622601717872e+00, -2.291377999871787e+00, -2.283220383043390e+00, -2.283220383043390e+00, -7.427408229655669e-01, -8.624119181257228e-01, -6.942384610052625e-01, -7.693742866032794e-01, -7.783845514294517e-01, -7.783845514294517e-01, -1.311290302840821e-01, -1.570776102274901e-01, -1.272923658146884e-01, -2.582916441166291e+00, -1.303810682333598e-01, -1.303810682333598e-01, -1.049463991268414e-02, -1.198440011897055e-02, -8.983832580684931e-03, -1.014363542265608e-01, -1.091932469840239e-02, -1.091932469840240e-02, -8.072899574170923e-01, -7.985748813060198e-01, -8.016778839071296e-01, -8.040910435727242e-01, -8.028821937725752e-01, -8.028821937725752e-01, -7.833744589162653e-01, -6.404228536894625e-01, -6.797849450379080e-01, -7.186502973991912e-01, -6.984258340908972e-01, -6.984258340908973e-01, -9.056033507095210e-01, -2.253646761494181e-01, -2.710132275078681e-01, -4.114427132608279e-01, -3.350453220948598e-01, -3.350453220948598e-01, -5.411651481120506e-01, -7.929318842779345e-02, -9.750915602398869e-02, -4.056720233332308e-01, -1.124418949364518e-01, -1.124418949364517e-01, -2.621888302105104e-02, -3.290856710670491e-03, -6.246687051979652e-03, -1.070428484871085e-01, -9.283891604787504e-03, -9.283891604787502e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rmspbel_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmspbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.362316286902605e-09, -4.362237330794403e-09, -4.361320039860077e-09, -4.362579557954106e-09, -4.362279945058381e-09, -4.362279945058381e-09, -8.384384198926967e-06, -8.390979766405833e-06, -8.598521705583090e-06, -8.622171945264455e-06, -8.385383905094323e-06, -8.385383905094323e-06, -6.420167023989987e-03, -6.426539044442043e-03, -6.571516181161268e-03, -6.634624282144276e-03, -6.422875715564727e-03, -6.422875715564727e-03, -1.665594811894836e+00, -1.602893605040187e+00, -2.595453302055141e-03, -1.187186877020621e+00, -1.646228470739042e+00, -1.646228470739042e+00, -9.087685534034589e+00, -9.093330616777857e+00, -3.552658878464047e+00, -6.446986660509085e+00, -9.457205720850478e+00, -9.457205720850478e+00, -9.883148031896900e-07, -9.877802672659412e-07, -9.879982782077492e-07, -9.875984608519745e-07, -9.883930728482417e-07, -9.883930728482417e-07, -1.243109471930874e-04, -1.095704879219705e-04, -1.184873597684684e-04, -1.061532508976569e-04, -1.214526178110374e-04, -1.214526178110374e-04, -2.438508466221405e-02, -1.843878492047376e-02, -2.464192537799075e-02, -2.383125043495446e-02, -1.914978169137566e-02, -1.914978169137566e-02, -1.663929889390667e+00, -1.103111452085186e+00, -1.900525595270244e+00, -1.828464864221452e-04, -2.117145900595450e+00, -2.117145900595450e+00, -6.839629961624789e+00, -6.851257594485256e+00, -1.961118550669310e+01, -3.221894877589197e+00, -1.011950947537574e+01, -1.011950947537442e+01, -8.134227966539752e-03, -8.151189383889588e-03, -8.146029126247034e-03, -8.141162183168951e-03, -8.144800915511969e-03, -8.144800915511969e-03, -1.206803302905236e-02, -1.581474780578205e-02, -1.502168851984368e-02, -1.403289390459899e-02, -1.489431989005082e-02, -1.489431989005083e-02, -1.560877116849614e-02, -4.860758465007831e-01, -3.592976820823336e-01, -1.375664905333049e-01, -2.494853038232908e-01, -2.494853038232906e-01, -5.896179503667164e-02, -3.079036957224968e+00, -2.899262884306512e+00, -1.899987001027027e-01, -2.994309193080387e+00, -2.994309193080394e+00, -6.795223902427695e+00, -1.180067126234196e+01, -1.015711048258106e+01, -3.617147935848954e+00, -1.478164301190959e+01, -1.478164301191202e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rmspbel_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmspbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.569671722201276e-04, 1.569601927856139e-04, 1.568480414873271e-04, 1.569570774737678e-04, 1.569642569252077e-04, 1.569642569252077e-04, 1.722841625266554e-03, 1.727277939086801e-03, 1.867944183258881e-03, 1.888286504709683e-03, 1.723593177735616e-03, 1.723593177735616e-03, 1.021485754919652e-02, 1.017047108677493e-02, 9.197872423905662e-03, 1.053730009581219e-02, 1.020063743049177e-02, 1.020063743049177e-02, 1.153609718429932e-01, 1.143086045854086e-01, 1.942563189368076e-03, 3.959794692815130e-03, 1.149136662971477e-01, 1.149136662971477e-01, 5.400529828659345e-07, 3.667907649998665e-07, 2.002494391320673e-05, 2.945188480687265e-13, 5.692264946298402e-07, 5.692264946297956e-07, 4.545599083857865e-05, 4.492526015868534e-05, 4.482319459746953e-05, 4.444554654155993e-05, 4.596196844550916e-05, 4.596196844550916e-05, 9.791058755635223e-03, 8.378887826244314e-03, 9.030849951913875e-03, 7.832962340446923e-03, 9.799589252798334e-03, 9.799589252798334e-03, 5.475465170898752e-02, 5.295348794615833e-02, 4.141432066934635e-02, 4.752277752563234e-02, 4.695902685001136e-02, 4.695902685001136e-02, 1.798513070989241e-03, 7.541272111670341e-02, 2.254065543462119e-03, 1.305308840679515e-02, 1.585295803736578e-02, 1.585295803736578e-02, 2.771065701845322e-12, 1.449529791361392e-12, 2.582201740592428e-11, 1.847912149259076e-05, 6.112445053566972e-13, 6.112445052486137e-13, 7.951050776125224e-03, 7.723504989845168e-03, 7.807745288203781e-03, 7.869921295180392e-03, 7.842765433519003e-03, 7.842765433518998e-03, 1.673048598980725e-02, 1.144282534076431e-02, 1.392099390558121e-02, 1.557081806581949e-02, 1.560037205659042e-02, 1.560037205659046e-02, 5.128277362444135e-02, 6.464360576072048e-02, 8.518800707374291e-02, 6.010461107243292e-02, 8.500781310670805e-02, 8.500781310670795e-02, 6.288360324947667e-02, 3.941408816878809e-05, 4.969920755605519e-05, 7.182510253331754e-02, 1.938455115364835e-03, 1.938455115364838e-03, 1.059978732310190e-10, 4.301314171816001e-16, 3.386137139511251e-12, 1.686083647137526e-03, 3.806480075755559e-13, 3.806480074764074e-13])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
