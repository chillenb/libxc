
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_revtm_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revtm", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.990284384387659e+01, -1.990290414924193e+01, -1.990318745367200e+01, -2.111671499869374e+01, -2.111714247940723e+01, -2.233161033985436e+01, -3.501474839332611e+00, -3.768027422723396e+00, -3.766990469664276e+00, -3.767750378262762e+00, -3.767277123434599e+00, -3.500834206177399e+00, -6.327256229266524e-01, -6.971739927570368e-01, -7.501878279208590e-01, -6.867581585793066e-01, -6.214490926066807e-01, -7.531335496638354e-01, -1.852281617526102e-01, -1.876491973925593e-01, -8.346108307342658e-01, -1.698430443260223e-01, -2.005613715323742e-01, -1.944988966997215e-01, -2.031163432404340e-02, -1.435393170491490e-02, -5.107146790959012e-02, -1.497588326163293e-02, -1.770915557065932e-02, -1.770915557065932e-02, -5.414459318472469e+00, -5.414982522217799e+00, -5.414481654581387e+00, -5.414943780290436e+00, -5.139868129241583e+00, -5.140131952344394e+00, -2.144749925856069e+00, -2.155184443469633e+00, -2.137476957169845e+00, -2.146550997915853e+00, -1.996549690737688e+00, -2.154027411566321e+00, -5.839379243922752e-01, -6.656876150061841e-01, -5.847069572606914e-01, -5.988973934493217e-01, -5.959554520226964e-01, -6.313123433225621e-01, -1.304724755377964e-01, -1.898877024054236e-01, -1.230050898281508e-01, -2.026254182901182e+00, -1.427123619878508e-01, -1.427123619878508e-01, -8.315220661634379e-03, -1.495133306899344e-02, -1.035205670539059e-02, -7.259042915486821e-02, -1.290849008501027e-02, -1.290849008501027e-02, -6.094162590842086e-01, -6.069122835285797e-01, -5.509055684186251e-01, -5.804916958789861e-01, -5.515136189685960e-01, -5.800026320452248e-01, -5.929969748519923e-01, -4.916453572587838e-01, -5.114018417982554e-01, -5.622615014007448e-01, -5.529222858812506e-01, -5.213953573919321e-01, -6.614300954526540e-01, -2.598209620576354e-01, -2.759307473928574e-01, -3.533167780491866e-01, -3.378218397178244e-01, -3.109131739005890e-01, -4.900692333960520e-01, -3.207716929412834e-02, -7.940392451406189e-02, -3.618339187089028e-01, -1.058822225004840e-01, -1.058822225004841e-01, -8.151124787393080e-03, -6.614647469910029e-03, -1.831922768075389e-03, -6.498105662017653e-02, -1.194744356678316e-02, -5.389521775471450e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_revtm_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revtm", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.679514767863520e+01, -2.679515073960660e+01, -2.679523976206048e+01, -2.679521762431982e+01, -2.679554936747617e+01, -2.679565703731580e+01, -2.679450940766638e+01, -2.833018337067658e+01, -2.679520198343048e+01, -2.789927150773092e+01, -2.789951631219972e+01, -2.789927150773092e+01, -4.242237291798765e+00, -4.243627807803503e+00, -4.296185365179354e+00, -4.242169688782681e+00, -4.244328307514439e+00, -4.244729334472478e+00, -4.243962549236638e+00, -4.244024469756721e+00, -4.241327855495793e+00, -4.245899668790148e+00, -4.242920519608152e+00, -4.245899668790148e+00, -8.237489339324623e-01, -8.261406561095228e-01, -8.227197739764001e-01, -7.906940598017244e-01, -7.620543552776903e-01, -7.583708763311610e-01, -7.660996227867899e-01, -8.119470620162813e-01, -8.319160288565763e-01, -7.872868606269173e-01, -7.936707124070350e-01, -7.372475291311458e-01, -2.125669964717637e-01, -2.042370392078352e-01, -2.149417515847995e-01, -2.082350150390526e-01, -8.809319430361661e-01, -9.925794451982419e-01, -1.509247958681478e-01, -1.527795305171195e-01, -2.047075313662474e-01, -1.116773958233349e-01, -2.047075313662473e-01, -1.211570863229331e-01, -1.202422781946783e-02, -1.076091029281210e-02, -7.812329014611304e-03, -1.290600410979756e-02, -4.342713643428473e-02, -4.644938964390265e-02, -8.961539637619444e-03, -8.859625736146137e-03, -1.122456019624820e-02, -7.481814968001539e-03, -1.122456019624820e-02, -7.481814968001527e-03, -7.025821512805387e+00, -6.915380238289594e+00, -6.920473185513494e+00, -6.918713042412113e+00, -6.917252835694635e+00, -6.915521836859277e+00, -6.920211296254339e+00, -7.027399418169047e+00, -6.539587974234727e+00, -7.025863560181413e+00, -6.918762452183707e+00, -6.537992400174162e+00, -2.355179157618977e+00, -2.355683213895217e+00, -2.406318899680823e+00, -2.378577977223913e+00, -2.360730930105715e+00, -2.367269913550528e+00, -2.355506157747043e+00, -2.362004404748961e+00, -2.383578197875635e+00, -2.390056123823669e+00, -2.383578197875635e+00, -2.369824357496893e+00, -7.514608274366830e-01, -7.281809261004393e-01, -8.341103432598941e-01, -8.361641529532876e-01, -6.517686949871124e-01, -6.847734127043492e-01, -6.973242172593969e-01, -7.274330691261379e-01, -7.796371578558370e-01, -7.218933778076857e-01, -7.796371578558371e-01, -7.337594854685674e-01, -1.066193783994317e-01, -1.024790268196309e-01, -2.183369248910990e-01, -2.002505592989798e-01, -9.179715599705560e-02, -9.673808969393453e-02, -2.485713270368424e+00, -2.448062457663410e+00, -1.165255327254861e-01, -1.273729039082460e-01, -1.208209565594630e-01, -1.239233343409541e-01, -3.362110610029756e-03, -7.979581235650469e-03, -8.792451766473593e-03, -8.981414210366342e-03, -6.093269322785468e-03, -5.365146985051600e-03, -6.862348448036260e-02, -7.265427700967503e-02, -7.226616605102013e-03, -7.910854785567547e-03, -7.226616605102015e-03, -7.910854785567545e-03, -8.168839507805516e-01, -8.071016191686331e-01, -8.039013423801259e-01, -7.946528259654008e-01, -7.359086224378234e-01, -7.387688824239401e-01, -7.370576000632426e-01, -8.027208882854110e-01, -7.364835254683280e-01, -7.393334757869547e-01, -7.364835254683280e-01, -8.009255861628665e-01, -7.938808570689725e-01, -7.840110741038825e-01, -6.105825691074239e-01, -6.085264791861857e-01, -6.559119348070886e-01, -6.450303738595963e-01, -7.054598093730789e-01, -7.082346946436276e-01, -6.902413933297911e-01, -6.932835523880350e-01, -6.798477712775650e-01, -6.612104103582125e-01, -8.642973958559201e-01, -8.383460850490081e-01, -2.522777532803414e-01, -2.537825263223109e-01, -3.238928541827392e-01, -3.093129956957281e-01, -4.214169638213821e-01, -4.237187038298998e-01, -3.605363488128780e-01, -3.575759052827113e-01, -3.605363488128781e-01, -3.688411857973974e-01, -5.519510666746473e-01, -5.574456339476402e-01, -4.261498287525210e-02, -4.290651753043931e-02, -5.635057763706392e-02, -5.788104996835968e-02, -4.052840423538142e-01, -4.165336996910425e-01, -8.322901799263073e-02, -8.726868072475828e-02, -8.322901799263070e-02, -8.726868072475838e-02, -1.066442764574003e-02, -1.105104699002681e-02, -3.885511051811818e-03, -3.892575094796363e-03, -2.360598030945098e-03, -2.510685785330329e-03, -8.584301216918140e-02, -8.723158042750002e-02, -6.385752781277163e-03, -7.460996230080516e-03, -6.385752781277159e-03, -4.145493638190111e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revtm_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revtm", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.541342033488019e-08, 0.000000000000000e+00, -1.541628568649300e-08, -1.541362999758153e-08, 0.000000000000000e+00, -1.541643750781764e-08, -1.541410815927364e-08, 0.000000000000000e+00, -1.541717668859994e-08, -1.541177269614685e-08, 0.000000000000000e+00, -9.822720014390138e-09, -1.541356567064040e-08, 0.000000000000000e+00, -1.527686602997605e-08, -1.527599428774946e-08, 0.000000000000000e+00, -1.527686602997605e-08, -1.739693593505938e-05, 0.000000000000000e+00, -1.070153205223680e-05, -1.537615705475146e-05, 0.000000000000000e+00, -1.739748544400259e-05, -1.743217321727750e-05, 0.000000000000000e+00, -1.743743393747112e-05, -1.741411755632351e-05, 0.000000000000000e+00, -1.741319045703117e-05, -1.740427716037774e-05, 0.000000000000000e+00, -1.744205327887031e-05, -1.070676192499763e-05, 0.000000000000000e+00, -1.744205327887031e-05, -8.743227346386870e-03, 0.000000000000000e+00, -8.534405487627732e-03, -8.818885663169768e-03, 0.000000000000000e+00, -8.709427850696415e-03, -9.169958150333227e-03, 0.000000000000000e+00, -9.166605134886483e-03, -9.272552044114443e-03, 0.000000000000000e+00, -9.508540471865414e-03, -8.232551017474912e-03, 0.000000000000000e+00, -1.152789076322020e-02, -8.808658736096162e-03, 0.000000000000000e+00, -9.692342079455959e-03, -2.365453501790591e+00, 0.000000000000000e+00, -1.525094515017878e+00, -2.236903938641763e+00, 0.000000000000000e+00, -1.472733324991501e+00, -3.642357421591556e-03, 0.000000000000000e+00, -4.861490982718121e-03, -2.484507141573036e+00, 0.000000000000000e+00, -2.584640349864802e+00, -1.354871807929834e+00, 0.000000000000000e+00, -4.934727954850103e+00, -1.354871807929835e+00, 0.000000000000000e+00, -2.683585096850956e+01, -6.935397006316764e+03, 0.000000000000000e+00, -7.249044017779661e+03, -1.599200017039642e+06, 0.000000000000000e+00, -5.351765343242444e+03, -1.668015398488597e+03, 0.000000000000000e+00, -6.482200000690695e+01, -2.085660067596974e+04, 0.000000000000000e+00, -2.180521212516177e+04, -8.946866522269955e+03, 0.000000000000000e+00, -4.304860164729472e+04, -8.946866522269955e+03, 0.000000000000000e+00, -4.304860164729470e+04, -2.067293865971260e-06, 0.000000000000000e+00, -4.402136427355492e-06, -4.395135843376339e-06, 0.000000000000000e+00, -4.399447601048722e-06, -4.397753011149226e-06, 0.000000000000000e+00, -4.402037347922285e-06, -4.395366731378473e-06, 0.000000000000000e+00, -2.049215408474302e-06, -5.819121235346298e-06, 0.000000000000000e+00, -2.058704242169674e-06, -4.396504968448665e-06, 0.000000000000000e+00, -5.824372446196025e-06, -1.601476004619334e-04, 0.000000000000000e+00, -1.604572186121807e-04, -1.432422690226543e-04, 0.000000000000000e+00, -1.585158952478316e-04, -1.479494374925291e-04, 0.000000000000000e+00, -1.475572809386137e-04, -1.599763649513682e-04, 0.000000000000000e+00, -1.598176926990661e-04, -1.579227945578956e-04, 0.000000000000000e+00, -1.023971961206065e-04, -1.579227945578956e-04, 0.000000000000000e+00, -1.593192913321665e-04, -1.970449977704006e-02, 0.000000000000000e+00, -1.779026736207783e-02, -1.934172068889525e-02, 0.000000000000000e+00, -1.935905041149779e-02, -3.195688093462781e-02, 0.000000000000000e+00, -2.939694767640273e-02, -3.041914921118594e-02, 0.000000000000000e+00, -2.752169552950248e-02, -2.170000392431530e-02, 0.000000000000000e+00, -1.870839225607347e-02, -2.170000392431531e-02, 0.000000000000000e+00, -2.589279182577893e-02, -5.981422212615048e+00, 0.000000000000000e+00, -6.591062174395694e+00, -2.305290909723357e+00, 0.000000000000000e+00, -1.123758827421683e+00, -8.776523417655705e+00, 0.000000000000000e+00, -7.838305341537311e+00, -1.701887472965436e-04, 0.000000000000000e+00, -2.227659960148581e-04, -5.301701411949515e+00, 0.000000000000000e+00, -4.726681947111084e+00, -4.782496295084377e+00, 0.000000000000000e+00, -5.152523525808291e+00, -4.662853980250704e+07, 0.000000000000000e+00, -3.233083308692890e+04, -2.240635551927321e+04, 0.000000000000000e+00, -2.055085339167397e+04, -9.904121853874713e+04, 0.000000000000000e+00, -1.083252018949714e+05, -2.125298971804504e+01, 0.000000000000000e+00, -2.109337909794055e+02, -4.838302275935275e+04, 0.000000000000000e+00, -3.575352552117075e+04, -4.838302275935278e+04, 0.000000000000000e+00, -3.575352552117076e+04, 3.062428501652872e-02, 0.000000000000000e+00, -2.535070917996855e-02, 9.383113652785166e-04, 0.000000000000000e+00, -2.684633565517424e-02, -7.087897866340183e-02, 0.000000000000000e+00, -7.130431085364893e-02, -8.374061919083312e-02, 0.000000000000000e+00, -2.596512001362052e-02, -7.668154943424189e-02, 0.000000000000000e+00, -7.712307409569664e-02, -7.668154943424189e-02, 0.000000000000000e+00, -2.618590238999998e-02, 2.614926650156018e-02, 0.000000000000000e+00, -2.851294290468087e-02, -4.753738026203419e-02, 0.000000000000000e+00, -3.034715941415857e-02, -4.308445736631841e-02, 0.000000000000000e+00, -3.341440577451318e-02, -3.827828531279956e-02, 0.000000000000000e+00, -3.776432689154560e-02, -2.881481346149899e-02, 0.000000000000000e+00, -2.828669005951690e-02, -4.079745035482182e-02, 0.000000000000000e+00, -3.620330488855408e-02, -1.574648179502060e-02, 0.000000000000000e+00, -1.486944765292535e-02, -5.901780029760234e-01, 0.000000000000000e+00, -5.810818797958939e-01, -3.876238766970845e-01, 0.000000000000000e+00, -3.416317890415863e-01, -1.060736290105981e-01, 0.000000000000000e+00, -1.442451698861577e-01, -2.316164314228135e-01, 0.000000000000000e+00, -2.460964440448071e-01, -2.316164314228127e-01, 0.000000000000000e+00, -1.950255736828421e-01, -6.158374265742630e-02, 0.000000000000000e+00, -6.083464608692483e-02, -1.798946875936350e+03, 0.000000000000000e+00, -1.750523342810155e+03, -3.526271045248642e+01, 0.000000000000000e+00, -3.299820647018841e+01, -2.066755390555657e-01, 0.000000000000000e+00, -2.067767819710889e-01, -1.349876284785477e+01, 0.000000000000000e+00, -1.282420410813648e+01, -1.349876284785476e+01, 0.000000000000000e+00, -1.282420410813648e+01, -4.605228917816840e+05, 0.000000000000000e+00, -3.993746264419286e+05, -5.552705770242128e+05, 0.000000000000000e+00, -5.512632279570579e+05, -1.918719916609039e+08, 0.000000000000000e+00, -1.499437609540930e+08, -1.073235330536635e+02, 0.000000000000000e+00, -1.004324080620797e+02, -8.046020412837353e+04, 0.000000000000000e+00, -4.473311748736221e+04, -8.046020412837372e+04, 0.000000000000000e+00, -2.017270813836809e+07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revtm_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revtm", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.512728544709875e-04, 1.513024834834793e-04, 1.512766866421334e-04, 1.513052602967925e-04, 1.512872280570404e-04, 1.513208350405987e-04, 1.512442736128864e-04, 3.683893420660707e-04, 1.512753384114850e-04, 7.902315745724656e-04, 7.902064782504873e-04, 7.902315745724656e-04, 3.410755638100432e-03, -5.226833986312409e-04, 2.736205531712781e-03, 3.410724494504212e-03, 3.419708242166313e-03, 3.421197691142537e-03, 3.416322548669220e-03, 3.416286343268183e-03, 3.410328531924501e-03, 3.423903900360768e-03, -5.231346266403043e-04, 3.423903900360768e-03, -1.740060658994496e-03, -1.826522398233009e-03, -1.716021267603981e-03, 1.175340081608183e-02, 1.174444459783295e-02, 1.137322386548166e-02, 1.200565185678240e-02, -1.575135658214848e-03, -1.873214927066016e-03, -1.136152482903152e-03, 1.249047909850968e-02, 1.125759286177857e-02, -2.256834144690362e-03, 3.837659097842670e-02, -2.462164244841406e-03, 3.895114470728893e-02, 7.771676959502294e-03, -5.862197448917505e-04, 2.562997828435984e-02, 2.778899823839594e-02, 3.470635859056667e-02, 1.942590983754076e-02, 3.470635859056665e-02, -7.935135390717954e-05, 5.721291789110714e-03, 8.312350638815167e-03, -5.092242799796649e-08, 6.254250979943171e-03, -4.326068736428613e-06, 1.304820082573106e-02, 3.720028655265038e-03, 3.697737016000182e-03, 5.233247939505916e-03, 4.625424801645056e-03, 5.233247939505916e-03, 4.625424801645056e-03, 9.076237424712576e-04, 3.519911282481114e-03, 3.523904057543184e-03, 3.524620009810482e-03, 3.519378819918139e-03, 3.520127080161094e-03, 3.523554478308804e-03, 8.913982706743228e-04, 7.483680360636185e-04, 8.991842805077319e-04, 3.521471275973470e-03, 7.485307914750420e-04, 5.534427140416780e-03, 5.545283229888012e-03, 4.690639834466266e-03, 5.606561198602032e-03, 4.675703475057418e-03, 4.682980242260469e-03, 5.531439063164891e-03, 5.559516176430853e-03, 5.615102090271582e-03, -1.075116353103082e-03, 5.615102090271582e-03, 5.584945139613430e-03, 1.649323818452545e-02, 1.309077952946459e-03, 2.675477802411573e-02, 2.700187711647459e-02, 2.260579719073039e-02, 2.353556336992317e-02, 2.518991442629214e-02, 2.557851399849442e-02, 2.469342424117739e-02, 1.503738818854290e-03, 2.469342424117739e-02, 2.479986642651287e-02, 2.051410771519179e-02, 2.523482190977196e-02, -8.565318008271948e-04, 2.731477584005822e-02, 2.418162891795230e-02, 2.526836218860908e-02, 4.915346491421370e-03, 7.850065641973977e-03, 2.943200626777695e-02, 2.924099314039142e-02, 2.480300190514149e-02, 3.375433026682193e-02, -2.077471177130616e-09, 2.728258700020461e-03, 3.558901268279408e-03, 3.414354728500641e-03, 6.585551723816985e-03, 9.930129680868944e-03, 1.720338374576151e-02, -2.660700366295809e-05, 3.420366065662001e-03, 6.570743727381791e-03, 3.420366065662002e-03, 6.570743727381789e-03, -5.463094445836650e-02, 3.650502346007937e-02, -1.037305397855249e-02, 3.444458316332017e-02, 7.264390227891540e-03, 7.240235785640826e-03, 7.275720689716885e-03, 3.572663761506505e-02, 7.271932990972262e-03, 7.246528394736941e-03, 7.271932990972262e-03, 3.542583395929179e-02, -4.485676823470146e-02, 3.719248946230500e-02, 2.686002044908765e-02, -1.058791404254593e-03, 2.921452193209024e-02, 3.308472041451188e-03, 3.206900621540568e-02, 3.202077938261574e-02, 1.671675385610294e-02, 1.656656471688367e-02, 3.054763742314815e-02, 5.073541467201647e-03, 2.421708335701056e-02, 4.393324200923015e-03, 2.828466021537452e-02, 2.832943156647008e-02, -3.389405302349561e-03, 2.845747845097148e-02, -6.113099591557140e-03, 2.620828777979270e-02, 2.803446117184874e-02, 3.107182893696208e-02, 2.803446117184866e-02, -5.724537821005032e-03, 2.650893952109551e-02, 2.681509470647544e-02, -4.300953418056319e-06, -4.302716887919048e-06, 1.400628938266371e-02, 1.450450232180060e-02, 3.541272567289547e-02, 3.755448517172854e-02, 2.128163203483175e-02, 2.395662426050680e-02, 2.128163203483176e-02, 2.395662426050681e-02, -6.032675168571193e-08, -6.617061879077694e-08, 1.711436076544073e-03, 1.710763928485415e-03, -2.989194881157276e-09, -3.810325920959104e-09, -6.019633554649150e-05, -7.177862675887663e-05, 4.838102328077833e-03, 6.326360858636124e-03, 4.838102328077833e-03, -2.272553923200538e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
