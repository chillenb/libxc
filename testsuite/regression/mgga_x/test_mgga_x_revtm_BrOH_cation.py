
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_revtm_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revtm", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.226539884714074e+01, -2.226545243096842e+01, -2.226575652298897e+01, -2.226495979606014e+01, -2.226536784059585e+01, -2.226536784059585e+01, -3.402824373102741e+00, -3.402829688625934e+00, -3.403211628174583e+00, -3.405084343728285e+00, -3.403814269520055e+00, -3.403814269520055e+00, -6.675539111164273e-01, -6.672972719864750e-01, -6.621002844806217e-01, -6.669406566311152e-01, -6.679811034600196e-01, -6.679811034600196e-01, -2.014097748942758e-01, -2.029714056859677e-01, -7.855646362821354e-01, -1.607496249579123e-01, -1.943664062369612e-01, -1.943664062369611e-01, -2.023007329547199e-02, -2.072885087518372e-02, -6.305689189193174e-02, -1.426004163055384e-02, -1.728562665160444e-02, -1.728562665160443e-02, -5.413798480655082e+00, -5.414335617253259e+00, -5.413835703405097e+00, -5.414309389731715e+00, -5.414063870668722e+00, -5.414063870668722e+00, -2.105102064664714e+00, -2.121805651290473e+00, -2.103542256529128e+00, -2.118366888504457e+00, -2.115124577942263e+00, -2.115124577942263e+00, -5.908064992165266e-01, -6.106644464020887e-01, -5.362612430777733e-01, -5.344746196415323e-01, -6.002145725954846e-01, -6.002145725954847e-01, -1.239835074838579e-01, -2.101124164373178e-01, -1.165732219415133e-01, -1.809077480133616e+00, -1.380124291214410e-01, -1.380124291214410e-01, -1.210918192465715e-02, -1.374220227953302e-02, -9.802207723256344e-03, -8.595308230430174e-02, -1.253339091105532e-02, -1.253339091105532e-02, -5.887970152255824e-01, -6.014279699774521e-01, -5.999395263964435e-01, -5.970668998435111e-01, -5.987627476917685e-01, -5.987627476917685e-01, -5.470465906254013e-01, -5.241744890699739e-01, -5.406055065001059e-01, -5.566558943295330e-01, -5.482425854566140e-01, -5.482425854566140e-01, -6.371538365106970e-01, -2.569192633733425e-01, -2.955062220100118e-01, -3.590912695714187e-01, -3.267589144273902e-01, -3.267589144273902e-01, -4.740443639462962e-01, -6.234571056347024e-02, -7.562000619840918e-02, -3.415609514560706e-01, -1.013283001359581e-01, -1.013283001359581e-01, -2.472771992015711e-02, -6.281582557511893e-03, -9.055223219557065e-03, -9.762071224653406e-02, -1.156213441248440e-02, -1.156213441248440e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_revtm_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revtm", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.792912710593778e+01, -2.793089191262813e+01, -2.792927648549601e+01, -2.793100021888798e+01, -2.792994976012413e+01, -2.793191028551491e+01, -2.792827536641192e+01, -2.792977219953941e+01, -2.792921322389321e+01, -2.793076917331583e+01, -2.792921322389321e+01, -2.793076917331583e+01, -4.153624567003289e+00, -4.153817749300934e+00, -4.153676763366559e+00, -4.153875737758656e+00, -4.154991917050729e+00, -4.155349997486431e+00, -4.153564572210636e+00, -4.153907133616411e+00, -4.152813165252049e+00, -4.155146191620656e+00, -4.152813165252049e+00, -4.155146191620656e+00, -7.829725841572409e-01, -7.867444266802791e-01, -7.815200543138344e-01, -7.861603562483912e-01, -7.632032760272254e-01, -7.569003989148672e-01, -7.638410184748395e-01, -7.655411072033428e-01, -7.941942347078155e-01, -7.329084345970950e-01, -7.941942347078155e-01, -7.329084345970950e-01, -1.940234032702318e-01, -2.032853770221907e-01, -1.964158550011856e-01, -2.070655182621157e-01, -9.113253804974897e-01, -9.440447672363319e-01, -1.574297407560290e-01, -1.539384447407628e-01, -2.025163262365722e-01, -1.292556299397028e-01, -2.025163262365722e-01, -1.292556299397027e-01, -1.053956058837762e-02, -1.084710276874798e-02, -1.097699502910493e-02, -1.131550926736860e-02, -4.620858820326359e-02, -4.710151547066962e-02, -9.546607822564347e-03, -9.120541579153747e-03, -1.023856776374896e-02, -9.574085242568666e-03, -1.023856776374898e-02, -9.574085242568663e-03, -7.015395360415417e+00, -7.014328627807656e+00, -7.018959583402350e+00, -7.017777071481132e+00, -7.015870769308822e+00, -7.014646940714448e+00, -7.018920110534672e+00, -7.017770535246238e+00, -7.017010584374962e+00, -7.016025755173007e+00, -7.017010584374962e+00, -7.016025755173007e+00, -2.325326916389111e+00, -2.327425333837810e+00, -2.355882039717521e+00, -2.357083146106674e+00, -2.314098269813690e+00, -2.319171499071568e+00, -2.341087529508728e+00, -2.346695026592115e+00, -2.351133872364550e+00, -2.344240856559243e+00, -2.351133872364550e+00, -2.344240856559243e+00, -7.093644939953393e-01, -7.082094863589513e-01, -7.941912184318304e-01, -7.946093233485053e-01, -6.357140985138624e-01, -6.621285295941187e-01, -6.868394145568638e-01, -7.116024107854443e-01, -7.446981873430201e-01, -7.025406789912223e-01, -7.446981873430204e-01, -7.025406789912224e-01, -1.104079257137676e-01, -1.123023054547629e-01, -1.969523545615597e-01, -1.979861815677846e-01, -1.031619109570161e-01, -1.057732534309393e-01, -2.392215018048560e+00, -2.391186269453776e+00, -1.217513921995320e-01, -1.267769282511511e-01, -1.217513921995319e-01, -1.267769282511509e-01, -1.256078492380067e-02, -1.268746769304344e-02, -1.145646010279518e-02, -1.209501807901813e-02, -6.534112527056021e-03, -6.793908150865178e-03, -7.581974064998825e-02, -7.091543493968538e-02, -1.247593554999459e-02, -7.084640269468824e-03, -1.247593554999459e-02, -7.084640269468805e-03, -7.345270172996406e-01, -7.373490496100635e-01, -7.588283714451312e-01, -7.622591026940448e-01, -7.528594582649429e-01, -7.561217772674951e-01, -7.452691206162425e-01, -7.484233879769587e-01, -7.493383605939126e-01, -7.525582552685184e-01, -7.493383605939126e-01, -7.525582552685185e-01, -7.172344293880968e-01, -7.194810360651123e-01, -6.128098699660066e-01, -6.160874507393685e-01, -6.532455910099607e-01, -6.569177127240904e-01, -6.896642453095362e-01, -6.923141987979188e-01, -6.711573912867087e-01, -6.745878987024962e-01, -6.711573912867087e-01, -6.745878987024961e-01, -8.320000826779682e-01, -8.336322765848408e-01, -2.503310887598944e-01, -2.518279453098862e-01, -3.013498279940897e-01, -3.046802763298224e-01, -4.026449549232921e-01, -4.049071960837891e-01, -3.501959529388096e-01, -3.501318643774929e-01, -3.501959529388096e-01, -3.501318643774928e-01, -5.357947030268079e-01, -5.421081403943071e-01, -4.159961864334333e-02, -4.241864159606285e-02, -5.926330979726668e-02, -6.044423290276462e-02, -3.911603391326658e-01, -4.013764673028679e-01, -8.573980606768832e-02, -8.914664034849754e-02, -8.573980606768834e-02, -8.914664034849754e-02, -2.123929922063167e-02, -2.225754047952528e-02, -6.761128751180566e-03, -6.305617823532766e-03, -5.148485029885844e-03, -5.342616664622701e-03, -8.095368961797614e-02, -7.871830227731370e-02, -1.060907394916649e-02, -6.685754390790716e-03, -1.060907394916648e-02, -6.685754390790714e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revtm_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revtm", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.639960376676259e-08, 0.000000000000000e+00, -1.637589271957106e-08, -1.639930584105229e-08, 0.000000000000000e+00, -1.637567832485367e-08, -1.639502671313736e-08, 0.000000000000000e+00, -1.637047521906841e-08, -1.639824404026984e-08, 0.000000000000000e+00, -1.637462946195982e-08, -1.639950276897894e-08, 0.000000000000000e+00, -1.637054146311319e-08, -1.639950276897894e-08, 0.000000000000000e+00, -1.637054146311319e-08, -2.312843289785420e-05, 0.000000000000000e+00, -2.309070260929560e-05, -2.313822522221837e-05, 0.000000000000000e+00, -2.309414908979148e-05, -2.329456006176741e-05, 0.000000000000000e+00, -2.331301188133838e-05, -2.337074165862415e-05, 0.000000000000000e+00, -2.333909223943349e-05, -2.312465276464553e-05, 0.000000000000000e+00, -2.348124973825461e-05, -2.312465276464553e-05, 0.000000000000000e+00, -2.348124973825461e-05, -6.558263023327592e-03, 0.000000000000000e+00, -6.508464747830767e-03, -6.593271770155422e-03, 0.000000000000000e+00, -6.511597768583705e-03, -6.911289840849977e-03, 0.000000000000000e+00, -7.234594446413101e-03, -7.590183421892502e-03, 0.000000000000000e+00, -7.652430006014046e-03, -6.181371537403543e-03, 0.000000000000000e+00, -9.164705534633258e-03, -6.181371537403543e-03, 0.000000000000000e+00, -9.164705534633258e-03, -1.734189932993560e+00, 0.000000000000000e+00, -1.586039054639893e+00, -1.711300988934804e+00, 0.000000000000000e+00, -1.548741633609018e+00, -3.384547883231045e-03, 0.000000000000000e+00, -3.047711620641720e-03, -2.041111305719453e+00, 0.000000000000000e+00, -2.551113164674652e+00, -1.476699768981169e+00, 0.000000000000000e+00, -1.952149664537239e+00, -1.476699768981168e+00, 0.000000000000000e+00, -1.952149664537228e+00, -8.210407818766356e+03, 0.000000000000000e+00, -7.187585687977408e+03, -7.331940126472781e+03, 0.000000000000000e+00, -6.341778565198967e+03, -6.681246503375476e+01, 0.000000000000000e+00, -6.275768181605570e+01, -1.845742053462521e+04, 0.000000000000000e+00, -2.056884736425163e+04, -1.009926500351347e+04, 0.000000000000000e+00, -2.203729157449267e+04, -1.009926500351345e+04, 0.000000000000000e+00, -2.203729157449245e+04, -2.336434045911335e-06, 0.000000000000000e+00, -2.323041417170347e-06, -2.315676095561958e-06, 0.000000000000000e+00, -2.302745619024744e-06, -2.328848091196512e-06, 0.000000000000000e+00, -2.317704054836367e-06, -2.311210713234995e-06, 0.000000000000000e+00, -2.299454411309579e-06, -2.330744057297435e-06, 0.000000000000000e+00, -2.313700117337233e-06, -2.330744057297435e-06, 0.000000000000000e+00, -2.313700117337233e-06, -1.936906915604136e-04, 0.000000000000000e+00, -1.927611461729864e-04, -1.859533752689687e-04, 0.000000000000000e+00, -1.852138200566924e-04, -1.871957524034264e-04, 0.000000000000000e+00, -1.882629493547761e-04, -1.801309114242591e-04, 0.000000000000000e+00, -1.809260184161615e-04, -1.942235080259809e-04, 0.000000000000000e+00, -1.894959359382422e-04, -1.942235080259809e-04, 0.000000000000000e+00, -1.894959359382422e-04, -4.999601767909782e-02, 0.000000000000000e+00, -5.112447660730322e-02, -4.275404035901341e-02, 0.000000000000000e+00, -4.481996038205175e-02, -4.602115831718670e-02, 0.000000000000000e+00, -5.056930241896184e-02, -2.936296829444601e-02, 0.000000000000000e+00, -3.292597265019679e-02, -4.819727605134909e-02, 0.000000000000000e+00, -5.395385332202324e-02, -4.819727605134909e-02, 0.000000000000000e+00, -5.395385332202315e-02, -5.369887513927685e+00, 0.000000000000000e+00, -5.072097996470101e+00, -1.219007570037906e+00, 0.000000000000000e+00, -1.199071228901095e+00, -6.272553780637470e+00, 0.000000000000000e+00, -6.142692895137532e+00, -2.363842088935781e-04, 0.000000000000000e+00, -2.368810404335813e-04, -4.714074495188513e+00, 0.000000000000000e+00, -4.875548698154144e+00, -4.714074495188510e+00, 0.000000000000000e+00, -4.875548698154149e+00, 6.517606317431990e+03, 0.000000000000000e+00, 3.247904984087849e+03, -1.053338340760727e+04, 0.000000000000000e+00, -7.981502429535522e+03, -8.645130167753978e+04, 0.000000000000000e+00, -7.627527896261924e+04, -1.541185532809770e+01, 0.000000000000000e+00, -2.026254411978705e+01, 2.085884610847227e+04, 0.000000000000000e+00, -4.123203890015239e+04, 2.085884610847213e+04, 0.000000000000000e+00, -4.123203890015245e+04, -3.896545938214086e-01, 0.000000000000000e+00, -3.950227062745680e-01, -1.181723622949532e-01, 0.000000000000000e+00, -1.176868211388232e-01, -1.691051754501927e-01, 0.000000000000000e+00, -1.696079328743791e-01, -2.418338005960250e-01, 0.000000000000000e+00, -2.426217852365881e-01, -2.009918424537571e-01, 0.000000000000000e+00, -2.015832859671673e-01, -2.009918424537571e-01, 0.000000000000000e+00, -2.015832859671673e-01, -2.316203703843624e-01, 0.000000000000000e+00, -2.393826849787518e-01, -4.818099875609411e-02, 0.000000000000000e+00, -4.748008397510010e-02, -5.091096766875140e-02, 0.000000000000000e+00, -5.025013172385728e-02, -7.134173821895755e-02, 0.000000000000000e+00, -7.071206236310879e-02, -5.877148512610132e-02, 0.000000000000000e+00, -5.734889045621991e-02, -5.877148512610132e-02, 0.000000000000000e+00, -5.734889045622014e-02, -2.662024637180467e-02, 0.000000000000000e+00, -2.863772286563598e-02, -6.235143456366774e-01, 0.000000000000000e+00, -6.144365847486867e-01, -3.978036883552924e-01, 0.000000000000000e+00, -3.907989586189845e-01, -2.412306047255558e-01, 0.000000000000000e+00, -2.366644014697467e-01, -3.073603484336981e-01, 0.000000000000000e+00, -3.096185998223276e-01, -3.073603484336984e-01, 0.000000000000000e+00, -3.096185998223282e-01, -9.301960386450872e-02, 0.000000000000000e+00, -9.097630737743405e-02, -8.494829565490970e+01, 0.000000000000000e+00, -8.107211877538855e+01, -3.111156514385242e+01, 0.000000000000000e+00, -2.964302431890956e+01, -3.342263054037839e-01, 0.000000000000000e+00, -3.536119723804351e-01, -1.242124643012220e+01, 0.000000000000000e+00, -1.209577482224595e+01, -1.242124643012219e+01, 0.000000000000000e+00, -1.209577482224597e+01, -9.382399021409035e+02, 0.000000000000000e+00, -7.361334733769470e+02, 2.376296323473897e+05, 0.000000000000000e+00, -1.249412813526601e+04, -1.618467928030794e+05, 0.000000000000000e+00, -1.419423600071953e+05, -1.530794145787916e+01, 0.000000000000000e+00, -1.708859270716709e+01, 2.221306452772843e+04, 0.000000000000000e+00, -5.152674025575323e+04, 2.221306452772870e+04, 0.000000000000000e+00, -5.152674025575323e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revtm_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revtm", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revtm_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revtm", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [8.680962725681939e-04, 8.664377925980221e-04, 8.680917735740855e-04, 8.664346465733424e-04, 8.678420092382944e-04, 8.661422127365532e-04, 8.678826736319782e-04, 8.661980915668248e-04, 8.680991090446679e-04, 8.660038802623669e-04, 8.680991090446679e-04, 8.660038802623669e-04, 2.551214618088881e-03, 2.540308946881788e-03, 2.553591024502289e-03, 2.540978578870165e-03, 2.589707441835361e-03, 2.593633726862017e-03, 2.617841315320705e-03, 2.608824629739616e-03, 2.547270282488792e-03, 2.642280206982867e-03, 2.547270282488792e-03, 2.642280206982867e-03, -1.246884332412000e-03, -1.351217351064924e-03, -1.195772479512531e-03, -1.348537116234551e-03, -6.615005727103864e-04, -1.608671751501946e-04, 5.256685682408347e-04, 5.729087526174101e-04, -1.728807442904993e-03, 3.564148453962850e-03, -1.728807442904993e-03, 3.564148453962850e-03, 3.727060009393084e-02, 3.965873331303516e-02, 3.759506157456811e-02, 4.058558020737047e-02, -1.206585746224619e-03, -1.424817929489788e-03, 1.120760846655630e-02, 2.202953998991443e-02, 3.551114579097242e-02, -4.285031205372452e-03, 3.551114579097233e-02, -4.285031205372422e-03, 7.613223546806079e-03, 8.139877205458017e-03, 7.662753787566146e-03, 8.342127813106856e-03, 8.776932038382361e-03, 1.061003158213132e-02, 2.336591289033452e-03, 2.780290817232539e-03, 6.203371099016169e-03, -3.324585740943298e-04, 6.203371099016129e-03, -3.324585740943691e-04, 1.225285702057023e-03, 1.207296162611940e-03, 1.208818518721116e-03, 1.191111966278937e-03, 1.216922263328393e-03, 1.201367647229801e-03, 1.202988312977610e-03, 1.186878519993094e-03, 1.222569982645066e-03, 1.200150875186055e-03, 1.222569982645066e-03, 1.200150875186055e-03, 6.825376686842004e-03, 6.794197966734225e-03, 6.721013563109564e-03, 6.686301263854108e-03, 6.431385995637263e-03, 6.515649813390912e-03, 6.306536211357131e-03, 6.383542846834457e-03, 7.076288764944238e-03, 6.784977287818282e-03, 7.076288764944238e-03, 6.784977287818282e-03, 4.554521038247730e-02, 4.699318806652832e-02, 3.121061646362524e-02, 3.307706597246032e-02, 2.064037715623096e-02, 3.115955377643805e-02, 8.098691036549003e-03, 1.325739308748517e-02, 5.288155714511178e-02, 4.578455109377642e-02, 5.288155714511165e-02, 4.578455109377634e-02, 1.341202267361884e-02, 1.227533707673775e-02, 2.824375641842288e-02, 2.806161540445566e-02, 9.633868949724870e-03, 1.305656303530766e-02, 2.998413280553253e-03, 3.000426702870430e-03, 2.054874930507669e-02, 2.716137689895178e-02, 2.054874930507676e-02, 2.716137689895181e-02, -2.937002632297393e-03, -2.655316189727995e-03, -5.081724497041042e-04, -9.445988974827700e-04, 3.973412473171956e-03, 3.965732909329950e-03, 5.833677116414716e-03, 1.305505867449736e-02, -4.481503301713183e-03, 8.204064178326451e-03, -4.481503301713177e-03, 8.204064178326460e-03, 3.615404944370872e-01, 3.703231633520037e-01, 1.475978850383451e-01, 1.490204219978614e-01, 2.019812881795380e-01, 2.052342693902658e-01, 2.686322259725299e-01, 2.730887274571809e-01, 2.327089562879348e-01, 2.364740709959564e-01, 2.327089562879348e-01, 2.364740709959556e-01, 8.595519340713087e-02, 9.119764006440050e-02, 2.691628035722777e-02, 2.689828160425181e-02, 3.635751440471734e-02, 3.647848974862578e-02, 6.580762233497645e-02, 6.600305615514707e-02, 4.813432341123998e-02, 4.752556934332814e-02, 4.813432341123974e-02, 4.752556934332815e-02, 2.034286327160557e-02, 2.250219123802866e-02, 2.955080012582720e-02, 2.959290494545053e-02, 3.148032800669084e-02, 3.192543814107024e-02, 4.046764858503976e-02, 4.005749608762572e-02, 3.747693482565490e-02, 3.772499105034106e-02, 3.747693482565498e-02, 3.772499105034108e-02, 4.053588925723531e-02, 4.120232461451412e-02, 1.373035375112077e-02, 1.295806845044823e-02, 8.907798892480931e-03, 9.694685215663716e-03, 4.751724782832267e-02, 6.243687601299700e-02, 1.504391028596964e-02, 1.798320474670774e-02, 1.504391028596956e-02, 1.798320474670771e-02, -1.082548702374548e-03, -1.613775241255771e-03, -2.137693652428127e-03, -1.502711687750423e-03, 4.085009147324511e-03, 4.273082849194344e-03, 1.761837004555753e-02, 2.453602588626952e-02, -5.664154409262988e-03, 7.876395265301050e-03, -5.664154409262996e-03, 7.876395265301027e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
