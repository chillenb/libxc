
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_bloc_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_bloc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.241684890894419e+01, -2.241690979342149e+01, -2.241724299065481e+01, -2.241633806135488e+01, -2.241680325917827e+01, -2.241680325917827e+01, -3.413577142126164e+00, -3.413589153789147e+00, -3.414197183506567e+00, -3.416475887020129e+00, -3.414952354381830e+00, -3.414952354381830e+00, -6.595990488184698e-01, -6.594090716050722e-01, -6.576656121941211e-01, -6.646342117528192e-01, -6.669071980651886e-01, -6.669071980651886e-01, -2.054490887651740e-01, -2.064624286423859e-01, -7.596364364973598e-01, -1.770246780536479e-01, -2.016868335530602e-01, -2.016868335530601e-01, -1.010592603823149e-02, -1.064148434128997e-02, -5.774781134711440e-02, -5.829079603319113e-03, -8.134593992636590e-03, -8.134593992636590e-03, -5.477670767812904e+00, -5.478668737360892e+00, -5.477764094408958e+00, -5.478643719402179e+00, -5.478151998101905e+00, -5.478151998101905e+00, -2.092416126386335e+00, -2.106067018952323e+00, -2.086879949135218e+00, -2.098586585845236e+00, -2.102737642265979e+00, -2.102737642265979e+00, -5.957587703073659e-01, -6.094137458503259e-01, -5.394172689491030e-01, -5.340406033830498e-01, -6.047816904644718e-01, -6.047816904644718e-01, -1.380071613229448e-01, -2.226733814823367e-01, -1.292730094709838e-01, -1.808023055365576e+00, -1.524457002049263e-01, -1.524457002049263e-01, -4.500491160818166e-03, -5.698239666357018e-03, -4.363370701176379e-03, -9.070112399514503e-02, -5.480938600506645e-03, -5.480938600506646e-03, -5.830510091013010e-01, -6.015861234903817e-01, -5.978518750465627e-01, -5.929083607668826e-01, -5.956349444561755e-01, -5.956349444561755e-01, -5.460191359725860e-01, -5.206151911686674e-01, -5.418974746523907e-01, -5.604556840926028e-01, -5.514580906534912e-01, -5.514580906534912e-01, -6.361821857187056e-01, -2.631197161106139e-01, -2.970232814697499e-01, -3.621989422725215e-01, -3.269474127213231e-01, -3.269474127213231e-01, -4.760938043476182e-01, -5.531101501199383e-02, -7.449850618131132e-02, -3.446232202217347e-01, -1.113906564830671e-01, -1.113906564830671e-01, -1.423855734461448e-02, -1.523266761033480e-03, -3.203227951062101e-03, -1.056242518677827e-01, -5.033450842769177e-03, -5.033450842769172e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_bloc_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_bloc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.852299185549927e+01, -2.852501703691033e+01, -2.852305807232250e+01, -2.852506492684299e+01, -2.852361777208418e+01, -2.852576931458485e+01, -2.852288125873707e+01, -2.852482752621628e+01, -2.852302170213870e+01, -2.852545827991866e+01, -2.852302170213870e+01, -2.852545827991866e+01, -4.103072753285646e+00, -4.103459764793977e+00, -4.103094584473213e+00, -4.103514375079827e+00, -4.104007482739924e+00, -4.104338548021733e+00, -4.101994229878913e+00, -4.102488929789610e+00, -4.102319681640735e+00, -4.103360618141220e+00, -4.102319681640735e+00, -4.103360618141220e+00, -7.695829673689427e-01, -7.774480343733617e-01, -7.666633854261843e-01, -7.764249985119636e-01, -7.284611400481704e-01, -7.150833244116613e-01, -7.265772093435133e-01, -7.306051343086727e-01, -7.915071673449346e-01, -6.763168454181442e-01, -7.915071673449346e-01, -6.763168454181442e-01, -1.862701844320366e-01, -1.965327152901156e-01, -1.886534492973949e-01, -2.014837189004439e-01, -9.113500399750660e-01, -9.601310736531358e-01, -1.594079132189684e-01, -1.616104777439472e-01, -1.941916944456920e-01, -1.454092348768646e-01, -1.941916944456920e-01, -1.454092348768644e-01, -1.301502705463580e-02, -1.382704018397306e-02, -1.363518283945793e-02, -1.460258475024459e-02, -7.254236364747658e-02, -7.617781071118598e-02, -7.832579077616052e-03, -7.702278922101171e-03, -1.161477656454393e-02, -6.613954340720492e-03, -1.161477656454393e-02, -6.613954340720492e-03, -6.965836859534937e+00, -6.964916739910788e+00, -6.964383144128582e+00, -6.963514275277706e+00, -6.966028764435189e+00, -6.965064739606861e+00, -6.964772360826958e+00, -6.963781705536068e+00, -6.964887270861722e+00, -6.964179567037050e+00, -6.964887270861722e+00, -6.964179567037050e+00, -2.508869834571888e+00, -2.512521904233480e+00, -2.550035177874931e+00, -2.552262384899905e+00, -2.495758716909209e+00, -2.502992606060047e+00, -2.531853199053733e+00, -2.539738417565435e+00, -2.540054555440954e+00, -2.534895488434874e+00, -2.540054555440954e+00, -2.534895488434874e+00, -7.041887878072223e-01, -7.040763997768885e-01, -7.909433659054214e-01, -7.913379673132910e-01, -6.270210144401205e-01, -6.525439865442512e-01, -6.875471015144275e-01, -7.107568058299610e-01, -7.386931153792452e-01, -6.927809676931839e-01, -7.386931153792453e-01, -6.927809676931839e-01, -1.500623418288518e-01, -1.501264495178872e-01, -1.971597286245928e-01, -1.977243797014558e-01, -1.416524593060755e-01, -1.453709657850167e-01, -2.391153981405389e+00, -2.390119725318786e+00, -1.522082600808331e-01, -1.463821446292568e-01, -1.522082600808331e-01, -1.463821446292568e-01, -5.877092700426161e-03, -6.107711517516250e-03, -7.536240296370253e-03, -7.650347440156379e-03, -5.634247886099557e-03, -5.965978265298883e-03, -1.095346848035376e-01, -1.103166652275788e-01, -5.755766767622132e-03, -7.900395229300474e-03, -5.755766767622134e-03, -7.900395229300475e-03, -7.259234757824586e-01, -7.289239326056297e-01, -7.276308555887673e-01, -7.305234289727729e-01, -7.236956306504985e-01, -7.266151357597134e-01, -7.222360866285717e-01, -7.251876473404743e-01, -7.226392479252480e-01, -7.255867912983268e-01, -7.226392479252480e-01, -7.255867912983268e-01, -7.182667943364498e-01, -7.205744181533642e-01, -6.664757483178452e-01, -6.697006512755040e-01, -6.895034992364062e-01, -6.923398352528340e-01, -6.894237256963507e-01, -6.916356983369117e-01, -6.901008152920726e-01, -6.933596322894104e-01, -6.901008152920726e-01, -6.933596322894104e-01, -8.295177123515324e-01, -8.309949210631276e-01, -2.407725088791369e-01, -2.422368069647740e-01, -3.003570258189878e-01, -3.052057454794089e-01, -4.133219679866891e-01, -4.148933476557953e-01, -3.670218614987760e-01, -3.671640185299135e-01, -3.670218614987759e-01, -3.671640185299134e-01, -5.661664479879729e-01, -5.747053725273031e-01, -7.145118344589015e-02, -7.189540111197404e-02, -9.279955408336699e-02, -9.529285892113783e-02, -3.928094833089913e-01, -4.123814758386433e-01, -1.250546500560711e-01, -1.254820992870535e-01, -1.250546500560711e-01, -1.254820992870535e-01, -1.859069674711815e-02, -1.925950715795532e-02, -2.028592752630965e-03, -2.033172063120018e-03, -4.126940869899086e-03, -4.389135581999234e-03, -1.207101818613196e-01, -1.220411176271506e-01, -5.450991997392043e-03, -7.242463122080153e-03, -5.450991997392038e-03, -7.242463122080147e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_bloc_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_bloc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.611635934399586e-08, 0.000000000000000e+00, -1.610009198805988e-08, -1.611713134366193e-08, 0.000000000000000e+00, -1.610065410921608e-08, -1.611590090081262e-08, 0.000000000000000e+00, -1.609993026758059e-08, -1.610711809005752e-08, 0.000000000000000e+00, -1.608875210294205e-08, -1.611694359189199e-08, 0.000000000000000e+00, -1.609051125850803e-08, -1.611694359189199e-08, 0.000000000000000e+00, -1.609051125850803e-08, -2.982642745834782e-05, 0.000000000000000e+00, -2.978290212981351e-05, -2.983719205097745e-05, 0.000000000000000e+00, -2.978648803238827e-05, -3.000681778864862e-05, 0.000000000000000e+00, -3.002596549947631e-05, -3.009723856354220e-05, 0.000000000000000e+00, -3.006095332299633e-05, -2.982531769483887e-05, 0.000000000000000e+00, -3.021480341959813e-05, -2.982531769483887e-05, 0.000000000000000e+00, -3.021480341959813e-05, -1.072046915383371e-02, 0.000000000000000e+00, -1.033077483850617e-02, -1.088080580596480e-02, 0.000000000000000e+00, -1.037095001749856e-02, -1.256323106892564e-02, 0.000000000000000e+00, -1.327908804287640e-02, -1.331217205723229e-02, 0.000000000000000e+00, -1.329111284019219e-02, -9.255182550006281e-03, 0.000000000000000e+00, -1.405765576870025e-02, -9.255182550006281e-03, 0.000000000000000e+00, -1.405765576870025e-02, -1.299297230372538e+00, 0.000000000000000e+00, -1.080817404879810e+00, -1.288072669000655e+00, 0.000000000000000e+00, -1.028010061996626e+00, -3.244780393930237e-03, 0.000000000000000e+00, -2.430838959755511e-03, -2.129315149387069e+00, 0.000000000000000e+00, -2.014142756024218e+00, -1.124172707262349e+00, 0.000000000000000e+00, -2.931680513481407e+00, -1.124172707262349e+00, 0.000000000000000e+00, -2.931680513481410e+00, -4.907223779506522e+00, 0.000000000000000e+00, -4.858762566073651e+00, -5.171279146505177e+00, 0.000000000000000e+00, -5.145840902027907e+00, -2.950374682652750e+00, 0.000000000000000e+00, -2.976536708045108e+00, -4.491241916041250e+00, 0.000000000000000e+00, -4.369237511399584e+00, -4.897801428760967e+00, 0.000000000000000e+00, -1.242135316178610e+01, -4.897801428760986e+00, 0.000000000000000e+00, -1.242135316178610e+01, -7.218439368228141e-06, 0.000000000000000e+00, -7.215218950262592e-06, -7.332861322847418e-06, 0.000000000000000e+00, -7.325805689547288e-06, -7.222082201793743e-06, 0.000000000000000e+00, -7.217074661656019e-06, -7.320317494514062e-06, 0.000000000000000e+00, -7.317597462918748e-06, -7.278848289883367e-06, 0.000000000000000e+00, -7.270884853189502e-06, -7.278848289883367e-06, 0.000000000000000e+00, -7.270884853189502e-06, -7.959779096288235e-05, 0.000000000000000e+00, -7.762147147891053e-05, -6.898204928333250e-05, 0.000000000000000e+00, -6.743692924266331e-05, -7.093101670744148e-05, 0.000000000000000e+00, -7.161254664209374e-05, -6.165141375971239e-05, 0.000000000000000e+00, -6.199057475655597e-05, -8.070371862245083e-05, 0.000000000000000e+00, -7.306376119953177e-05, -8.070371862245083e-05, 0.000000000000000e+00, -7.306376119953177e-05, -5.477722669743803e-02, 0.000000000000000e+00, -5.531335269287168e-02, -4.153021051231351e-02, 0.000000000000000e+00, -4.339782234576033e-02, -5.835885930539919e-02, 0.000000000000000e+00, -6.100869871139301e-02, -2.769381315842831e-02, 0.000000000000000e+00, -3.201774041336139e-02, -5.221458060312091e-02, 0.000000000000000e+00, -6.187345320600596e-02, -5.221458060312092e-02, 0.000000000000000e+00, -6.187345320600594e-02, -2.263362136654377e+00, 0.000000000000000e+00, -2.307542197027035e+00, -9.001488093273495e-01, 0.000000000000000e+00, -8.910826604856281e-01, -2.521778170318821e+00, 0.000000000000000e+00, -2.465776226047170e+00, -2.191056292144905e-04, 0.000000000000000e+00, -2.195577666784189e-04, -2.530620498785991e+00, 0.000000000000000e+00, -3.030947148417649e+00, -2.530620498785991e+00, 0.000000000000000e+00, -3.030947148417649e+00, -6.303983228135176e+00, 0.000000000000000e+00, -5.456325691768272e+00, -5.429047606076783e+00, 0.000000000000000e+00, -5.012492457848747e+00, -3.092886363696922e+01, 0.000000000000000e+00, -3.440995259018229e+01, -3.568377787707027e+00, 0.000000000000000e+00, -3.434592052078217e+00, -1.537801899521804e+01, 0.000000000000000e+00, -1.511068012668202e+01, -1.537801899521798e+01, 0.000000000000000e+00, -1.511068012668202e+01, -3.673570607751833e-01, 0.000000000000000e+00, -3.708621424045802e-01, -1.873242415220530e-01, 0.000000000000000e+00, -1.883016392270723e-01, -2.384536643757006e-01, 0.000000000000000e+00, -2.402556405852634e-01, -2.938830518890296e-01, 0.000000000000000e+00, -2.955014045387870e-01, -2.647093506972105e-01, 0.000000000000000e+00, -2.664050387182954e-01, -2.647093506972105e-01, 0.000000000000000e+00, -2.664050387182953e-01, -1.876914955872726e-01, 0.000000000000000e+00, -1.931337278371181e-01, -9.984886452643447e-03, 0.000000000000000e+00, -9.925578989338818e-03, -2.615380775530588e-02, 0.000000000000000e+00, -2.653952212540567e-02, -7.905069658041422e-02, 0.000000000000000e+00, -7.890863932649460e-02, -4.741633152665971e-02, 0.000000000000000e+00, -4.657790446576108e-02, -4.741633152665969e-02, 0.000000000000000e+00, -4.657790446576112e-02, -2.576606370608238e-02, 0.000000000000000e+00, -2.765633393549615e-02, -4.498659735400684e-01, 0.000000000000000e+00, -4.423654652535233e-01, -2.537397107589391e-01, 0.000000000000000e+00, -2.439770601736796e-01, -2.116142028023092e-01, 0.000000000000000e+00, -2.110158599051508e-01, -1.783691021853824e-01, 0.000000000000000e+00, -1.797487458383406e-01, -1.783691021853824e-01, 0.000000000000000e+00, -1.797487458383409e-01, -6.174097023867713e-02, 0.000000000000000e+00, -5.758011679078106e-02, -2.692791526293810e+00, 0.000000000000000e+00, -2.696953047500595e+00, -2.704869846976500e+00, 0.000000000000000e+00, -2.772487271648126e+00, -3.531842262040956e-01, 0.000000000000000e+00, -3.080070958989088e-01, -3.664988136109435e+00, 0.000000000000000e+00, -4.353563934120626e+00, -3.664988136109437e+00, 0.000000000000000e+00, -4.353563934120629e+00, -3.892720762395983e+00, 0.000000000000000e+00, -3.974666585702177e+00, -1.939190274592126e+01, 0.000000000000000e+00, -3.435047796928168e+01, -1.196993158136947e+01, 0.000000000000000e+00, -1.274319655816319e+01, -4.077984840254902e+00, 0.000000000000000e+00, -3.999476678078814e+00, -3.170873712194022e+01, 0.000000000000000e+00, -1.568505127029046e+01, -3.170873712194025e+01, 0.000000000000000e+00, -1.568505127029052e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_bloc_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_bloc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_bloc_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_bloc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.065095450700338e-03, 1.064462139042007e-03, 1.065165865056760e-03, 1.064513337776752e-03, 1.065200131509521e-03, 1.064616141526397e-03, 1.064403684523922e-03, 1.063600965482895e-03, 1.065144634511954e-03, 1.063866660860405e-03, 1.065144634511954e-03, 1.063866660860405e-03, 3.637199530697736e-03, 3.625235306550020e-03, 3.639534405974282e-03, 3.625770775626167e-03, 3.673619012894896e-03, 3.676865249390929e-03, 3.707143434300896e-03, 3.697122657535895e-03, 3.633635893445889e-03, 3.728814498645554e-03, 3.633635893445889e-03, 3.728814498645554e-03, 4.083296549234798e-03, 3.868245652162225e-03, 4.179312907990624e-03, 3.879151071132429e-03, 4.948194371132581e-03, 5.497214330600028e-03, 6.351558440661562e-03, 6.459087999119371e-03, 3.088806825941274e-03, 6.657135679395939e-03, 3.088806825941274e-03, 6.657135679395939e-03, -5.618266828374036e-04, -4.024222173019787e-03, 1.988901367304974e-04, -3.847525885648199e-03, 6.270678280071789e-05, -3.924626180164383e-05, 7.247384756146511e-04, 2.542008793739797e-04, 1.996765533340913e-04, 1.482306675287991e-04, 1.996765533340868e-04, 1.482306675287996e-04, -1.325929195270708e-12, -1.628954660741950e-12, -1.971616473608955e-12, -3.228661356931738e-12, -2.851198790281743e-08, -6.172976488449342e-08, -8.127186941446844e-15, -1.012443986348116e-14, -5.087748059584250e-13, 2.526223084154958e-14, -5.087748059584223e-13, 2.526223084154983e-14, 7.980049807054024e-03, 7.976904344968562e-03, 8.112453931684796e-03, 8.104882706765387e-03, 7.986885562373838e-03, 7.980941283290103e-03, 8.100495913621096e-03, 8.097202634511429e-03, 8.047947871285306e-03, 8.040986976986721e-03, 8.047947871285306e-03, 8.040986976986721e-03, 1.202419752427467e-03, 1.110830693309378e-03, 8.558043006383643e-04, 7.758658227598424e-04, 5.638105031959057e-04, 6.638119543513339e-04, 2.424399384603475e-04, 3.271587421656077e-04, 1.513565477772094e-03, 1.000766403632385e-03, 1.513565477772094e-03, 1.000766403632385e-03, 4.809175174998232e-02, 4.897236817859826e-02, 2.881640764214710e-02, 3.045745303314370e-02, 2.779127154575906e-02, 3.735172585119018e-02, 7.878310771250133e-03, 1.261069895597784e-02, 5.450327767619813e-02, 5.020540960844196e-02, 5.450327767619814e-02, 5.020540960844196e-02, 5.834429403608718e-06, 1.318989354890451e-05, -4.742664388892011e-04, -4.289531231585681e-04, 1.004476612423066e-05, 5.225493159647735e-06, 2.724198315120665e-03, 2.725764621290629e-03, -5.251225848209923e-06, -3.172279199789720e-05, -5.251225848209892e-06, -3.172279199789769e-05, 6.650475505396534e-15, 6.433604137091307e-15, 1.375954584356263e-14, 1.600802985683169e-14, -3.466031009919599e-14, -5.242243189885373e-14, 1.636491255578020e-06, -9.493064589484263e-07, 2.957749213254296e-14, -3.534728137671126e-13, 2.957749213254284e-14, -3.534728137671124e-13, 3.249647726509037e-01, 3.318264912681446e-01, 2.187303746556015e-01, 2.230244114189337e-01, 2.648069545980483e-01, 2.705172649128645e-01, 3.048513480516234e-01, 3.108747331247025e-01, 2.852459224970005e-01, 2.911162874017954e-01, 2.852459224970005e-01, 2.911162874017953e-01, 7.091865546071799e-02, 7.482621233497905e-02, 1.279017106087373e-03, 1.509342925449000e-03, 2.032465311664427e-02, 2.112742341369947e-02, 7.316038965838033e-02, 7.383535492106812e-02, 4.153626457890469e-02, 4.149784747029939e-02, 4.153626457890468e-02, 4.149784747029941e-02, 1.878890469107516e-02, 2.072585247131898e-02, -1.897611011688181e-03, -1.891986846957872e-03, 5.806035238732957e-04, 7.106293750690546e-04, 3.391030360118207e-02, 3.433565122330928e-02, 1.028464829166939e-02, 1.056911599900701e-02, 1.028464829166939e-02, 1.056911599900703e-02, 2.505197529213902e-02, 2.424767638472393e-02, -5.612310504336796e-08, -5.470594669392777e-08, -8.870771223427985e-08, -1.440050855770519e-07, 5.078400077863496e-02, 5.363700128089456e-02, -1.830444258604633e-06, -4.203509224392502e-06, -1.830444258604571e-06, -4.203509224392501e-06, 4.640631273625516e-12, 7.078663541631008e-12, 1.916309262257215e-17, 2.071880075122032e-17, -1.728338166775478e-15, -2.939931861444615e-15, -5.059018483377642e-06, -6.798363483661743e-06, 9.862957851956476e-14, -2.060994408025236e-13, 9.862957851956448e-14, -2.060994408025228e-13]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
