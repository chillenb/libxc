
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_bloc_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_bloc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.990391377516073e+01, -1.990397421110901e+01, -1.990425804580818e+01, -2.119268516563792e+01, -2.119315148761085e+01, -2.248254774606271e+01, -3.470198034724751e+00, -3.705424463345235e+00, -3.704820016161801e+00, -3.705398553555987e+00, -3.704953958912377e+00, -3.469845920859206e+00, -6.332811782635155e-01, -6.934034142426989e-01, -7.480115116357444e-01, -6.848784922332740e-01, -6.221039504479020e-01, -7.492151821225401e-01, -1.864654859626502e-01, -1.884378367755075e-01, -8.489485889276360e-01, -1.832499035282691e-01, -2.058373049833731e-01, -1.984837659723735e-01, -1.010597612137039e-02, -8.685073180637328e-03, -4.704310163042405e-02, -5.829203398671972e-03, -8.134754876479621e-03, -8.134754876479621e-03, -5.479812274514544e+00, -5.480818730220673e+00, -5.479862406990483e+00, -5.480750851434181e+00, -5.173016641510987e+00, -5.173314828532478e+00, -2.104278719310227e+00, -2.115077576339284e+00, -2.096869757561950e+00, -2.106102498635025e+00, -1.976496844434331e+00, -2.113912650462480e+00, -5.820377517694733e-01, -6.708780652639182e-01, -5.765881331181668e-01, -5.956569619035814e-01, -5.953927320512533e-01, -6.292880845942388e-01, -1.401089238720215e-01, -1.958296472791352e-01, -1.311121314366994e-01, -2.022721156167077e+00, -1.547996154187759e-01, -1.547996154187758e-01, -3.615137885901220e-03, -5.698501040222737e-03, -4.363532084956599e-03, -7.278347329720912e-02, -5.481090470584898e-03, -5.481090470584900e-03, -6.203134821356120e-01, -6.169243053687907e-01, -5.511075003545892e-01, -5.859820192052134e-01, -5.517262688886089e-01, -5.854271090337166e-01, -6.035326474289908e-01, -4.887344457289940e-01, -5.108857610460409e-01, -5.669343737052839e-01, -5.547289589733966e-01, -5.222643499982274e-01, -6.627087784312602e-01, -2.651894354919886e-01, -2.753444400953424e-01, -3.496817863962277e-01, -3.320849607589694e-01, -3.081176181335534e-01, -4.823087222204349e-01, -3.217920495761773e-02, -7.475248352935907e-02, -3.563541053080093e-01, -1.125663034407504e-01, -1.125663034407504e-01, -8.177267155347655e-03, -1.523297472493548e-03, -1.837800925952907e-03, -6.517951021820359e-02, -5.033607379406547e-03, -3.409430933038239e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_bloc_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_bloc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.680343287462243e+01, -2.680344016391342e+01, -2.680352560701599e+01, -2.680350751920648e+01, -2.680383706052253e+01, -2.680394964362816e+01, -2.680278981870854e+01, -2.914983359558752e+01, -2.680348759406667e+01, -2.915014241525926e+01, -2.915061247875822e+01, -2.915014241525926e+01, -4.685423901627815e+00, -4.242629838779562e+00, -4.685594351526998e+00, -4.685339916353337e+00, -4.688868555500994e+00, -4.689500182485609e+00, -4.688077246202317e+00, -4.688147092520249e+00, -4.684292954649385e+00, -4.691168703919056e+00, -4.241919202376445e+00, -4.691168703919056e+00, -8.224737502302533e-01, -8.248305361958845e-01, -8.214564433317902e-01, -7.947654537627118e-01, -7.516476632880148e-01, -7.434897685346334e-01, -7.609578125036317e-01, -8.107764622012309e-01, -8.305802613933150e-01, -7.865106381388448e-01, -8.051778965718792e-01, -7.158523714176700e-01, -2.125518506515689e-01, -1.964876254965212e-01, -2.148959582440844e-01, -2.012942947550379e-01, -8.532824941955263e-01, -9.922298839490118e-01, -1.770266467752298e-01, -1.714400316814710e-01, -1.959580135592585e-01, -1.643013372011332e-01, -1.959580135592583e-01, -1.214892283790342e-01, -1.301529978796378e-02, -1.382717958563571e-02, -7.837375281264953e-03, -1.460295333388198e-02, -4.356371086460694e-02, -7.656447199277147e-02, -7.833126797162953e-03, -7.702718537279142e-03, -1.161535758833721e-02, -6.614934172197703e-03, -1.161535758833721e-02, -6.614934172197703e-03, -6.979141749475063e+00, -6.977452159536991e+00, -6.977587758369459e+00, -6.975950230990486e+00, -6.979022360053210e+00, -6.977376576385272e+00, -6.977690715807901e+00, -6.976013915287292e+00, -6.542885495228324e+00, -6.976703729471520e+00, -6.978372762056008e+00, -6.541288890321748e+00, -2.566004406967307e+00, -2.567548141518806e+00, -2.601123084487925e+00, -2.601522616597350e+00, -2.534926886618055e+00, -2.545415176242305e+00, -2.566175998727469e+00, -2.576800966704106e+00, -2.608475704973451e+00, -2.388409167287033e+00, -2.608475704973451e+00, -2.588775852755032e+00, -8.124792693069735e-01, -7.281853661773873e-01, -8.680815662808230e-01, -8.668540833033396e-01, -7.207733274168659e-01, -7.582231916246720e-01, -7.669833875725087e-01, -7.932320456695672e-01, -8.445710236205175e-01, -7.218997254056609e-01, -8.445710236205176e-01, -8.031081188465494e-01, -1.564951621076769e-01, -1.573316116451990e-01, -2.185770450021085e-01, -2.016263626179233e-01, -1.479658467523380e-01, -1.513906108003202e-01, -2.654165348549692e+00, -2.652944729026377e+00, -1.588812146765072e-01, -1.520972160398330e-01, -1.588812146765071e-01, -1.520972160398331e-01, -3.372898068601349e-03, -6.108556187577384e-03, -7.537240482000127e-03, -7.651435655650045e-03, -5.634799214129240e-03, -5.966702559953526e-03, -1.125057453378745e-01, -7.287237426076942e-02, -5.757347359255901e-03, -7.900626691768702e-03, -5.757347359255901e-03, -7.900626691768704e-03, -7.488972690025354e-01, -7.512410788265943e-01, -7.617885486323850e-01, -7.640965259679964e-01, -7.363729307989975e-01, -7.392355634866835e-01, -7.375256424232207e-01, -7.562099037513134e-01, -7.369500300597750e-01, -7.398021319787411e-01, -7.369500300597751e-01, -7.581014031687788e-01, -7.313273789305358e-01, -7.331376858576203e-01, -6.755779469333546e-01, -6.085248255671443e-01, -7.112286539194771e-01, -6.450668837727702e-01, -7.308573702280908e-01, -7.331308766948607e-01, -7.230708058638907e-01, -7.254666373243690e-01, -7.230708058638907e-01, -6.613351032544494e-01, -9.172561135305204e-01, -8.385480030140465e-01, -2.414805776906809e-01, -2.429111552457828e-01, -3.234835382695789e-01, -3.050919846253616e-01, -4.210613710773398e-01, -4.558477062767406e-01, -3.746773811717853e-01, -3.750853363571307e-01, -3.746773811717851e-01, -3.682638064686961e-01, -6.101146495714714e-01, -6.169383897024272e-01, -4.274903677617903e-02, -4.304147865022525e-02, -9.373562907754927e-02, -9.629580909237444e-02, -4.473207699019707e-01, -4.614506385983092e-01, -1.287037923350602e-01, -1.297116753009482e-01, -1.287037923350602e-01, -1.297116753009482e-01, -1.069860921541458e-02, -1.108646502234328e-02, -2.028686888940047e-03, -2.033323413560279e-03, -2.368172093979974e-03, -2.518741249047828e-03, -8.608921620557378e-02, -8.747871808585103e-02, -5.452649946553772e-03, -7.242649259277419e-03, -5.452649946553768e-03, -4.158790303702353e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_bloc_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_bloc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.371182813405183e-08, 0.000000000000000e+00, -1.371369977666315e-08, -1.371191524205745e-08, 0.000000000000000e+00, -1.371376274080642e-08, -1.371205986504374e-08, 0.000000000000000e+00, -1.371400757369705e-08, -1.371109728651424e-08, 0.000000000000000e+00, -1.005662016205571e-08, -1.371189368530202e-08, 0.000000000000000e+00, -1.006133114080562e-08, -1.005863223586215e-08, 0.000000000000000e+00, -1.006133114080562e-08, -1.547325148717181e-06, 0.000000000000000e+00, -9.650445055492005e-06, -1.545588382322209e-06, 0.000000000000000e+00, -1.547684840849043e-06, -1.512105708942876e-06, 0.000000000000000e+00, -1.506100624721224e-06, -1.523710587401434e-06, 0.000000000000000e+00, -1.523580484947690e-06, -1.552194662660952e-06, 0.000000000000000e+00, -1.493553723663670e-06, -9.652516394575086e-06, 0.000000000000000e+00, -1.493553723663670e-06, -3.601571476124986e-03, 0.000000000000000e+00, -3.629621643112201e-03, -3.599479678908245e-03, 0.000000000000000e+00, -4.493934344909289e-03, -5.365191444037637e-03, 0.000000000000000e+00, -5.552102442903968e-03, -5.197372511628817e-03, 0.000000000000000e+00, -3.663143996966195e-03, -3.574329400193644e-03, 0.000000000000000e+00, -3.690590077459809e-03, -4.280355635770977e-03, 0.000000000000000e+00, -6.214970674795089e-03, -5.790292777642381e-01, 0.000000000000000e+00, -1.037451392360713e+00, -5.693675238607468e-01, 0.000000000000000e+00, -9.705551924590226e-01, -2.614810208756635e-03, 0.000000000000000e+00, -1.286278333738850e-03, -1.408235150821691e+00, 0.000000000000000e+00, -1.593304636486520e+00, -9.782728466754055e-01, 0.000000000000000e+00, -1.381846938283045e+00, -9.782728466754064e-01, 0.000000000000000e+00, -2.472130518357806e+00, -4.789436879714281e+00, 0.000000000000000e+00, -4.808688838531911e+00, -1.079253801602614e+05, 0.000000000000000e+00, -5.030543307565186e+00, -1.181453507355818e+02, 0.000000000000000e+00, -2.428237467531020e+00, -3.504482173555121e+00, 0.000000000000000e+00, -3.540353113938282e+00, -4.548960767990683e+00, 0.000000000000000e+00, -7.784405722438268e+00, -4.548960767990683e+00, 0.000000000000000e+00, -7.784405722438266e+00, -7.031104513070990e-06, 0.000000000000000e+00, -7.038591236861813e-06, -7.145923079957460e-06, 0.000000000000000e+00, -7.149655537997281e-06, -7.039097256509553e-06, 0.000000000000000e+00, -7.043581084387392e-06, -7.137539632444128e-06, 0.000000000000000e+00, -7.144400077939709e-06, -4.843460868763838e-06, 0.000000000000000e+00, -7.093946986485889e-06, -7.088423388975783e-06, 0.000000000000000e+00, -4.847897389534131e-06, -2.899379840477189e-05, 0.000000000000000e+00, -2.869566219668618e-05, -2.527478916508890e-05, 0.000000000000000e+00, -2.510218441207595e-05, -3.252259169016683e-05, 0.000000000000000e+00, -3.119571071878458e-05, -2.902814535974101e-05, 0.000000000000000e+00, -2.773669500042241e-05, -2.445713228399619e-05, 0.000000000000000e+00, -8.027991407788255e-05, -2.445713228399619e-05, 0.000000000000000e+00, -2.640413540233169e-05, -1.759268140747049e-03, 0.000000000000000e+00, -1.765624339651858e-02, -1.423471575170448e-02, 0.000000000000000e+00, -1.583235125717056e-02, -2.451086926057716e-03, 0.000000000000000e+00, -1.176959365379631e-03, -1.747418954643978e-03, 0.000000000000000e+00, -3.080806762020428e-03, -3.614601389564919e-03, 0.000000000000000e+00, -1.852873170534499e-02, -3.614601389564916e-03, 0.000000000000000e+00, -2.222973709871769e-03, -1.694170589449762e+00, 0.000000000000000e+00, -1.681717235258602e+00, -4.055041827561024e-01, 0.000000000000000e+00, -8.103300249778346e-01, -1.765556416458175e+00, 0.000000000000000e+00, -1.833577700422159e+00, -3.616702649323741e-05, 0.000000000000000e+00, -3.635715904034553e-05, -2.048391900356637e+00, 0.000000000000000e+00, -2.581012337679398e+00, -2.048391900356638e+00, 0.000000000000000e+00, -2.581012337679399e+00, -3.140287091413630e+06, 0.000000000000000e+00, -2.345179121309308e+00, -3.324092384834992e+00, 0.000000000000000e+00, -2.930024081476398e+00, -2.394289836128451e+01, 0.000000000000000e+00, -2.628468290002310e+01, -2.384375024563916e+00, 0.000000000000000e+00, -1.656138895267314e+01, -4.509930496631306e+00, 0.000000000000000e+00, -1.433058786831938e+01, -4.509930496631313e+00, 0.000000000000000e+00, -1.433058786831939e+01, -3.275581249339012e-01, 0.000000000000000e+00, -3.343677257167854e-01, -1.310597474406272e-01, 0.000000000000000e+00, -1.332681885296929e-01, -5.520073892234646e-02, 0.000000000000000e+00, -5.548404719758146e-02, -6.484373502631327e-02, 0.000000000000000e+00, -2.276002896959420e-01, -5.953823966823045e-02, 0.000000000000000e+00, -5.983987513227101e-02, -5.953823966823045e-02, 0.000000000000000e+00, -1.991093526160818e-01, -3.104733556969307e-01, 0.000000000000000e+00, -3.182144554396432e-01, -1.836567506918162e-03, 0.000000000000000e+00, -3.020859977673657e-02, -6.803871625019754e-03, 0.000000000000000e+00, -3.230388277259288e-02, -3.187660648028175e-02, 0.000000000000000e+00, -3.214100750212825e-02, -1.520536452659420e-02, 0.000000000000000e+00, -1.559369531926112e-02, -1.520536452659417e-02, 0.000000000000000e+00, -3.343872200864294e-02, -6.339692826357687e-03, 0.000000000000000e+00, -1.351177901371853e-02, -4.253532956910528e-01, 0.000000000000000e+00, -4.174013424440297e-01, -1.374412260870584e-01, 0.000000000000000e+00, -1.994979653560102e-01, -7.926831070360263e-02, 0.000000000000000e+00, -3.001312053261359e-02, -8.898268337292303e-02, 0.000000000000000e+00, -8.832336996134114e-02, -8.898268337292330e-02, 0.000000000000000e+00, -1.068684989842038e-01, -5.002964843693040e-03, 0.000000000000000e+00, -4.134335925499160e-03, -1.273420083032063e+02, 0.000000000000000e+00, -1.239361400914017e+02, -2.058626531966278e+00, 0.000000000000000e+00, -2.133490424587476e+00, -1.960475291719264e-02, 0.000000000000000e+00, -9.757971214438544e-03, -2.822082988430565e+00, 0.000000000000000e+00, -3.408760403313004e+00, -2.822082988430562e+00, 0.000000000000000e+00, -3.408760403313007e+00, -3.109957727236985e+04, 0.000000000000000e+00, -2.697560074443074e+04, -3.820558486311187e+00, 0.000000000000000e+00, -3.803760200175711e+00, -1.292200272339509e+07, 0.000000000000000e+00, -1.009879282057043e+07, -9.182006688610649e+00, 0.000000000000000e+00, -8.775273886801289e+00, -1.164087796933826e+01, 0.000000000000000e+00, -1.485534380746819e+01, -1.164087796933829e+01, 0.000000000000000e+00, -1.359723868170968e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_bloc_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_bloc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.552941764330921e-04, 1.553264930670136e-04, 1.552983892909297e-04, 1.553295459531124e-04, 1.553099984338776e-04, 1.553466927600447e-04, 1.552627749804251e-04, 7.599078620029014e-04, 1.552969051773238e-04, 7.603344086200642e-04, 7.601487151369653e-04, 7.603344086200642e-04, -1.092543374108774e-03, -5.307793282169055e-04, -1.092485699568705e-03, -1.092565861342540e-03, -1.091278313811187e-03, -1.091032319844687e-03, -1.091645436073206e-03, -1.091628539106094e-03, -1.092845389579170e-03, -1.090426985149061e-03, -5.312573967003417e-04, -1.090426985149061e-03, -1.932551212611324e-03, -2.022212770953941e-03, -1.907558899976996e-03, -3.037734229114963e-03, -2.395553046542845e-03, -2.311747333508740e-03, -2.595577242318718e-03, -1.760626211686063e-03, -2.069636816706464e-03, -1.290809578402624e-03, -3.121943472014402e-03, -2.003575641636987e-03, -2.614767971174270e-03, -5.684337537436912e-03, -2.845396353190218e-03, -6.386831640037465e-03, -6.627147330905290e-04, -6.756851490556520e-04, -3.130691256049492e-04, -5.027554874096113e-04, -3.912921607079126e-03, -1.077628829441223e-05, -3.912921607079125e-03, -9.553298294149855e-05, 1.462087365237014e-10, 1.990512388593665e-10, -6.165232486226470e-08, 2.798071686497061e-10, -5.233692915122582e-06, 3.565341369382374e-07, 7.227312146463407e-12, 6.747707999399673e-12, 7.661924362929121e-11, 1.027611087661304e-11, 7.661924362929121e-11, 1.027611087661264e-11, 7.879283297376275e-03, 7.882008540517103e-03, 8.012773864802739e-03, 8.011039106283861e-03, 7.888534042807776e-03, 7.887775311075616e-03, 8.002987406078714e-03, 8.004905556563463e-03, 7.818535198944901e-04, 7.946321058509816e-03, 7.945950923844220e-03, 7.820205306940467e-04, -1.856784103887944e-03, -1.861001518651282e-03, -1.880001852658441e-03, -1.882791265593348e-03, -1.828009085527204e-03, -1.841442812268221e-03, -1.855666783205537e-03, -1.866827123543020e-03, -1.885032503924572e-03, -1.111685009120792e-03, -1.885032503924572e-03, -1.876010406848774e-03, -1.465771312770887e-03, 1.310973577905514e-03, 2.875602818731004e-02, 3.218356466134468e-02, -7.065352396371561e-03, -5.702736866438597e-03, -2.668379236926355e-03, 1.050743762058568e-03, 3.876329624114359e-03, 1.506538901738678e-03, 3.876329624114354e-03, -5.518753369984181e-04, -1.208244242495066e-05, -1.329279180322731e-05, -1.010256942926096e-03, -1.311696973425177e-03, -2.917244162765350e-06, -8.428749292965466e-06, 1.170217742783915e-03, 1.179520984248707e-03, -9.268223321796978e-05, -3.027963754201307e-04, -9.268223321797013e-05, -3.027963754201300e-04, -2.515295280612425e-09, 1.141142779606650e-12, 5.507319743523343e-12, 4.913503772847513e-12, 2.486048080718205e-11, 3.806880934752075e-11, 1.736602244944467e-06, -3.213330466839065e-05, 2.263320245974877e-12, 6.237759404881903e-11, 2.263320245974780e-12, 6.237759404875226e-11, 5.276769206523851e-01, 5.449327631079065e-01, 2.076995599081392e-01, 2.136626513877991e-01, 7.770601375195842e-03, 7.748398622941251e-03, 7.809532204781529e-03, 3.686140284795550e-01, 7.792056049999684e-03, 7.768074811866926e-03, 7.792056049999684e-03, 3.217053606125160e-01, 4.609247583752931e-01, 4.771233164319743e-01, -5.938943776651376e-03, -1.059628295781080e-03, 4.078340357314955e-03, 3.331342882063361e-03, 3.890136970771058e-02, 3.967181089333770e-02, 1.594636610646444e-02, 1.666806572055204e-02, 1.594636610646440e-02, 5.161503336056346e-03, 1.381483887594987e-02, 4.486824626146768e-03, -3.229577853174609e-03, -3.306068119181897e-03, -3.817342428739732e-03, -6.190592938511126e-03, -6.358275600470665e-03, -1.032809519800808e-02, -9.163483210446821e-03, -9.243383289146189e-03, -9.163483210446820e-03, -6.171297370433469e-03, -8.370134369382706e-03, -8.178474488964128e-03, -5.203358532737745e-06, -5.205477369600173e-06, 7.281857035360029e-07, 8.621803530728397e-07, -1.144660845289386e-02, -1.022643687480103e-02, -1.066426693162051e-06, -9.976981535991550e-06, -1.066426693162025e-06, -9.976981535991713e-06, -7.303752247875026e-08, -8.011244158602191e-08, 9.586564457923084e-15, 9.632734783976472e-15, -3.619163373365160e-09, -4.613342941488077e-09, -7.258203657012515e-05, -8.651110951634446e-05, 7.151319225783750e-12, 4.262338660417614e-11, 7.151319225803936e-12, -2.751456230995746e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
