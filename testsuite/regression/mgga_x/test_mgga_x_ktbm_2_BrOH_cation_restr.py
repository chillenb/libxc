
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_2_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.086159574042080e+01, -2.086169391768414e+01, -2.086213225254985e+01, -2.086067420821258e+01, -2.086143788055664e+01, -2.086143788055664e+01, -3.141672929732925e+00, -3.141730490954751e+00, -3.143310015633586e+00, -3.142954777095310e+00, -3.142666199175305e+00, -3.874125995446767e+00, -5.950806626486097e-01, -7.442610831111063e-01, -7.220162904021137e-01, -7.292172238195203e-01, -7.276723355194807e-01, -7.276723355194807e-01, -1.902036399777906e-01, -1.933819221427251e-01, -7.076111589215224e-01, -1.409776431175804e-01, -1.597843873978221e-01, -1.597843873978221e-01, -6.322768135235256e-03, -6.655033719172879e-03, -3.677288935594842e-02, -3.651421444889436e-03, -4.588366325213344e-03, -4.588366325213344e-03, -5.592155929782495e+00, -5.592235977841691e+00, -5.592152569183622e+00, -5.193461229292872e+00, -5.592199995097207e+00, -5.592199995097207e+00, -1.748639245526006e+00, -1.764628215035788e+00, -1.737027468059432e+00, -1.750950573820830e+00, -1.763234224130914e+00, -2.198566441297465e+00, -6.464366341929351e-01, -6.896553899908531e-01, -6.034087378023283e-01, -6.215228326260293e-01, -6.548932281344271e-01, -5.629954446345782e-01, -8.801296598303524e-02, -1.878857217267623e-01, -8.163410786686948e-02, -2.104699702373268e+00, -1.143096528072779e-01, -1.143096528072779e-01, -2.644468480228878e-03, -3.569580575730859e-03, -2.729503993298113e-03, -5.538907145177588e-02, -3.086335119796534e-03, -3.288196558514673e-03, -6.225115654515340e-01, -6.230065381820329e-01, -6.019921480452397e-01, -6.227052569527962e-01, -6.227818359623624e-01, -6.227818359623624e-01, -6.061940596924074e-01, -5.455626683751013e-01, -5.652880714475342e-01, -5.823326934826147e-01, -5.738974125561761e-01, -5.083767869932206e-01, -7.268373795382426e-01, -1.979490456462430e-01, -2.914929244013798e-01, -3.103478823839870e-01, -3.371308449653153e-01, -3.371308449653151e-01, -4.107317120260181e-01, -3.519194827000855e-02, -4.803186243759672e-02, -3.729252207575310e-01, -6.996012919079796e-02, -7.648165726799680e-02, -8.923592824864268e-03, -9.541566465705634e-04, -2.002834607492374e-03, -7.177143137737109e-02, -3.042612103876351e-03, -3.042612103876349e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_2_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.996598633783195e+01, -2.996608459587209e+01, -2.996654129737378e+01, -2.996507992863339e+01, -2.996584284758797e+01, -2.996584284758797e+01, -4.511989372395110e+00, -4.512172898026700e+00, -4.517082509783732e+00, -4.515509189428122e+00, -4.515208830972652e+00, -4.331323962485206e+00, -7.772583093257570e-01, -8.729137678852197e-01, -8.572984349709698e-01, -8.610272525618887e-01, -8.603151106912427e-01, -8.603151106912427e-01, -2.306611393185248e-01, -2.336936629129776e-01, -8.869378063428521e-01, -1.774513512058513e-01, -1.988064353495898e-01, -1.988064353495898e-01, -8.126018942739595e-03, -8.552984325965362e-03, -4.719982002480314e-02, -4.692991458258413e-03, -5.897119670978219e-03, -5.897119670978219e-03, -6.852761878597664e+00, -6.856864496900790e+00, -6.852988169435732e+00, -7.327733496041475e+00, -6.854821631171291e+00, -6.854821631171291e+00, -2.457275727573144e+00, -2.491946042102541e+00, -2.431123029122472e+00, -2.461944370462017e+00, -2.489299383949986e+00, -2.470430282270493e+00, -7.329263512132229e-01, -8.243073050232584e-01, -6.745056330410066e-01, -7.053638440996238e-01, -7.479790483564618e-01, -8.227408938499734e-01, -1.144566083557800e-01, -2.334712458977314e-01, -1.064773711950598e-01, -2.415869657136366e+00, -1.446288457224813e-01, -1.446288457224814e-01, -3.525869773120814e-03, -4.587812817238622e-03, -3.508069057620496e-03, -7.300086768568677e-02, -4.114834333441932e-03, -4.226133474595078e-03, -8.100608622136497e-01, -7.921406555991035e-01, -8.251280976109838e-01, -8.035525834995462e-01, -8.009333432941275e-01, -8.009333432941275e-01, -7.862688011742184e-01, -6.118631219745326e-01, -6.489612100041195e-01, -6.979164518481150e-01, -6.714577013664185e-01, -7.362048232461849e-01, -8.540948012432088e-01, -2.483632101542318e-01, -3.455950661282345e-01, -4.350148751989731e-01, -3.875084354891007e-01, -3.875084354891005e-01, -5.920845341815886e-01, -4.517530083594647e-02, -6.160025190657632e-02, -4.167290606951746e-01, -9.132317491950129e-02, -9.759891554579969e-02, -1.146835756084484e-02, -1.226348427485694e-03, -2.574163485362415e-03, -9.164264997021694e-02, -3.910495788415313e-03, -3.910495788415311e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_2_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.417013001086356e-08, -1.417005119975153e-08, -1.416962013472773e-08, -1.417079959960244e-08, -1.417019299243070e-08, -1.417019299243070e-08, -1.352250652901958e-05, -1.352463217238558e-05, -1.357967926629230e-05, -1.355252951690531e-05, -1.356107583606010e-05, -1.395811827809170e-05, -5.081796417708577e-03, -4.817204026816267e-03, -4.427416320032584e-03, -4.687395969720761e-03, -4.625030591992111e-03, -4.625030591992111e-03, -5.924697511787378e-01, -6.027204456116915e-01, -1.403065178915869e-03, -4.358754669091736e-01, -5.100843949223408e-01, -5.100843949223408e-01, -1.191994168806768e+02, -1.098995242437257e+02, -2.755531041069584e+00, -3.051201521476949e+02, -2.282518782109903e+02, -2.282518782109903e+02, -4.366076708659534e-06, -4.366054232251405e-06, -4.366100868195583e-06, -4.238090073495732e-06, -4.366055689383109e-06, -4.366055689383109e-06, -1.165344032334884e-04, -1.167966417138210e-04, -1.160594491407526e-04, -1.164391565507787e-04, -1.169103006903157e-04, -1.188670027404676e-04, -2.225862681719687e-02, -1.873603154991108e-02, -2.559713226431929e-02, -2.614953904253152e-02, -2.166624357479364e-02, -2.073714923982153e-02, -7.573258914574206e-01, -2.825491313496842e-01, -8.672630367889828e-01, -2.056992647052812e-04, -6.618646329806511e-01, -6.618646329806515e-01, -6.617719887388736e+02, -3.001402297820671e+02, -1.460833663565903e+03, -1.879643475219791e+00, -9.679607839719644e+02, -6.234426739981908e+02, -2.800921948293494e-02, -2.820445537235830e-02, -2.772152945724935e-02, -2.809254136697016e-02, -2.812172290793418e-02, -2.812172290793418e-02, -3.120218510206970e-02, -4.086903743347568e-02, -3.954251257372790e-02, -3.690714234889220e-02, -3.839994381346246e-02, -3.685468930776886e-02, -1.499489515985248e-02, -2.382132707878564e-01, -1.711095902617080e-01, -1.152010687676431e-01, -1.538418617092344e-01, -1.538418617092344e-01, -4.818812577460205e-02, -3.008838796642066e+00, -1.617318126099074e+00, -1.694690096069410e-01, -1.533879694659122e+00, -1.091278201845550e+00, -4.143937458291490e+01, -4.643076765979872e+03, -1.785449663464874e+03, -1.254062465175332e+00, -8.693133513279387e+02, -8.693133513279412e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_2_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.260920912428689e-03, 1.260933824535164e-03, 1.260983528136163e-03, 1.260792663247499e-03, 1.260893758466744e-03, 1.260893758466744e-03, 2.429083382652221e-03, 2.430512152137707e-03, 2.468226841569116e-03, 2.452741195708876e-03, 2.454655246587388e-03, 8.606994937340316e-03, -1.544515050442090e-03, 2.544074227963085e-02, 2.208638657740723e-02, 2.372351019869286e-02, 2.334250885974959e-02, 2.334250885974959e-02, 5.718851472112750e-02, 6.057631592180820e-02, -2.294139074845543e-03, 1.861576723804192e-02, 3.111260533002242e-02, 3.111260533002232e-02, 4.151892053665101e-04, 4.464407409368508e-04, 1.934164300875734e-03, 2.045216811187190e-04, 3.036675336316503e-04, 3.036675336316503e-04, 6.956268711988524e-03, 6.955612533102361e-03, 6.956241197934006e-03, 5.849211278572537e-03, 6.955936633704998e-03, 6.955936633704998e-03, 2.423340415827539e-03, 2.753951850564247e-03, 2.169423569907420e-03, 2.460151903785230e-03, 2.735613866075993e-03, 1.395762982226014e-02, 5.832697386574152e-02, 5.648144580661944e-02, 5.796018661476050e-02, 6.077909036275513e-02, 5.824887144494618e-02, 3.358572311230006e-02, -1.579912767396271e-03, 2.794196274705253e-02, -1.313762055714401e-03, 1.822432109708675e-02, 1.509898862987233e-02, 1.509898862987233e-02, -5.122753031362962e-08, 1.879504556151004e-04, 4.090791718003006e-04, -5.296501206985937e-04, -3.228329859793004e-07, 3.052129872614243e-04, 6.157186015243193e-02, 6.195169032118679e-02, 5.807324539022910e-02, 6.171544703691985e-02, 6.177138730093595e-02, 6.177138730093595e-02, 6.329499696005028e-02, 6.657698973710909e-02, 6.786319002160883e-02, 6.689692314103109e-02, 6.761414074096468e-02, 4.670854013024359e-02, 5.345799312855503e-02, -8.327501259137017e-03, 5.594058272376221e-02, 1.269389343355569e-02, 7.114282711788862e-02, 7.114282711788852e-02, 2.059107474686487e-02, 1.847917621577882e-03, 2.561890824834331e-03, 9.180359275252821e-02, -1.422224779761593e-03, 7.304324653778903e-03, 4.059527145636425e-04, 5.551498592253179e-05, 1.974676953326349e-04, 6.912498318609967e-03, 3.371736862113987e-04, 3.371736862114025e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
