
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_2_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.299884039715695e+01, -2.299889244180608e+01, -2.299922605152520e+01, -2.299845311678422e+01, -2.299884352906192e+01, -2.299884352906192e+01, -3.461300369500600e+00, -3.461347308855137e+00, -3.462859297969001e+00, -3.464596859071083e+00, -3.463195176037223e+00, -3.463195176037223e+00, -6.482878025276827e-01, -6.479120386678011e-01, -6.396965430081082e-01, -6.480810520486546e-01, -6.455159995015320e-01, -6.455159995015320e-01, -1.880898595307174e-01, -1.907137917249112e-01, -7.357207713107288e-01, -1.377679687843715e-01, -1.562888409019390e-01, -1.562888409019390e-01, -6.320220904774402e-03, -6.650122570896823e-03, -3.656171928123590e-02, -3.631791548287497e-03, -4.573290854533112e-03, -4.573290854533112e-03, -5.589531774128353e+00, -5.589642486899726e+00, -5.589583007328223e+00, -5.589678948270529e+00, -5.589564092701983e+00, -5.589564092701983e+00, -2.129418944639144e+00, -2.151769645235608e+00, -2.125857415376492e+00, -2.146197917657779e+00, -2.143415541578903e+00, -2.143415541578903e+00, -6.091623729578624e-01, -6.453276129819246e-01, -5.482744650158619e-01, -5.503386334036400e-01, -6.191350268091589e-01, -6.191350268091589e-01, -9.547982918898856e-02, -1.860297619079369e-01, -8.822133788863686e-02, -1.873780671772810e+00, -1.130106997760331e-01, -1.130106997760331e-01, -2.764723011712367e-03, -3.528112390169162e-03, -2.712740162523450e-03, -5.923668072037257e-02, -3.254120721467058e-03, -3.254120721467058e-03, -6.168414278432224e-01, -6.175614270971237e-01, -6.173268850682273e-01, -6.171115531497240e-01, -6.172183113609363e-01, -6.172183113609363e-01, -5.952800263405003e-01, -5.407810628900918e-01, -5.584004893565648e-01, -5.734588965224553e-01, -5.655568984490602e-01, -5.655568984490602e-01, -6.696241312126786e-01, -2.382053277984921e-01, -2.851985787976702e-01, -3.622042379812525e-01, -3.245601164127735e-01, -3.245601164127734e-01, -4.830063381047016e-01, -3.509168107511593e-02, -4.767849008005125e-02, -3.481983792895493e-01, -7.573225000412237e-02, -7.573225000412237e-02, -8.814853832281094e-03, -9.212537725127820e-04, -1.996903629883417e-03, -7.134066057401069e-02, -3.019046259473725e-03, -3.019046259473722e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_2_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.768614386666761e+01, -2.768626607535372e+01, -2.768673003432750e+01, -2.768491177358331e+01, -2.768587579372740e+01, -2.768587579372740e+01, -4.425836953170663e+00, -4.425933501659276e+00, -4.428497739760680e+00, -4.427331051172446e+00, -4.427219596513093e+00, -4.427219596513093e+00, -8.061440441813512e-01, -8.052243842302909e-01, -7.862844777924316e-01, -7.960981706247461e-01, -7.934348681535200e-01, -7.934348681535200e-01, -2.280891400655669e-01, -2.305566136805738e-01, -9.123633182535528e-01, -1.729422684070489e-01, -1.939083138982337e-01, -1.939083138982336e-01, -8.123794108717698e-03, -8.548704404904177e-03, -4.700089648535925e-02, -4.676652947007432e-03, -5.884321020280755e-03, -5.884321020280755e-03, -6.855938118028549e+00, -6.860007973377147e+00, -6.856098588220966e+00, -6.859692362246991e+00, -6.858014304816066e+00, -6.858014304816066e+00, -2.454876983153548e+00, -2.470628587797909e+00, -2.444669852650476e+00, -2.458260147100719e+00, -2.468982882515681e+00, -2.468982882515681e+00, -7.605767097427026e-01, -8.731758029597980e-01, -6.959483961089400e-01, -7.587679571750272e-01, -7.774887252868551e-01, -7.774887252868551e-01, -1.216848870675494e-01, -2.308348253621869e-01, -1.126032625715386e-01, -2.615096900486130e+00, -1.428098028061375e-01, -1.428098028061374e-01, -3.581798332347477e-03, -4.555084676831833e-03, -3.494195963001564e-03, -7.597138915166823e-02, -4.198934089420084e-03, -4.198934089420086e-03, -8.175116634031814e-01, -7.991461238152627e-01, -8.055134864645503e-01, -8.108571919191750e-01, -8.081770392627211e-01, -8.081770392627211e-01, -8.005209181189196e-01, -6.144090354732120e-01, -6.550044078477683e-01, -7.079415320729591e-01, -6.799124372169459e-01, -6.799124372169459e-01, -9.125397614741534e-01, -2.899483860263871e-01, -3.396545488148865e-01, -4.351181081380565e-01, -3.813127234496149e-01, -3.813127234496146e-01, -5.697814668359708e-01, -4.507967202765113e-02, -6.124983322242208e-02, -4.243353682539945e-01, -9.667950514521481e-02, -9.667950514521478e-02, -1.138229339103090e-02, -1.204634643115088e-03, -2.569125411618814e-03, -9.111560734818890e-02, -3.891264097516940e-03, -3.891264097516929e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_2_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.468237861484588e-08, -1.468228918091202e-08, -1.468182859126858e-08, -1.468316636838433e-08, -1.468247428815578e-08, -1.468247428815578e-08, -1.374646836430911e-05, -1.374871473809369e-05, -1.380704919169264e-05, -1.377966817199066e-05, -1.378783888101740e-05, -1.378783888101740e-05, -5.032783015470506e-03, -5.018228330311826e-03, -4.663318233131382e-03, -4.899856134692637e-03, -4.844253710202135e-03, -4.844253710202135e-03, -5.985850260467902e-01, -6.098189744872686e-01, -1.379813075519582e-03, -4.622923646304845e-01, -5.298546387229293e-01, -5.298546387229293e-01, -1.197328382730515e+02, -1.107983556203971e+02, -2.905256809529615e+00, -3.230449903900835e+02, -2.365055086364053e+02, -2.365055086364053e+02, -4.365267320887430e-06, -4.365252805493491e-06, -4.365308232055834e-06, -4.365292848988534e-06, -4.365241915751237e-06, -4.365241915751237e-06, -1.181659813877114e-04, -1.187840204402810e-04, -1.173837480764741e-04, -1.181014368574134e-04, -1.188769757415845e-04, -1.188769757415845e-04, -2.192997102389790e-02, -1.828418423927497e-02, -2.522289792422248e-02, -2.531865225990805e-02, -2.133461469578185e-02, -2.133461469578185e-02, -5.813774028400566e-01, -2.873995538906214e-01, -6.615779810076973e-01, -1.986971513106238e-04, -6.876335295837687e-01, -6.876335295837691e-01, -5.087003492064928e+02, -3.373098434195281e+02, -1.558483880938930e+03, -1.380032538332564e+00, -6.926008322139544e+02, -6.926008322139536e+02, -2.789094420123825e-02, -2.809606653109116e-02, -2.803654902434777e-02, -2.797768191613641e-02, -2.800825154095879e-02, -2.800825154095879e-02, -3.094264851685384e-02, -4.080539168554190e-02, -3.940629532700470e-02, -3.670035313061488e-02, -3.821761314801047e-02, -3.821761314801048e-02, -1.458032798217314e-02, -2.119875744712606e-01, -1.731269376906401e-01, -1.166333541989022e-01, -1.550478289768311e-01, -1.550478289768312e-01, -4.949072749110731e-02, -3.091717902642123e+00, -1.720419319634277e+00, -1.680546403458109e-01, -1.152143165177889e+00, -1.152143165177890e+00, -4.677367390649280e+01, -6.216828058258111e+03, -1.843859176427843e+03, -1.299250922674273e+00, -9.421365267752443e+02, -9.421365267752474e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_2_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.653522183786575e-03, 1.653520964160511e-03, 1.653527559642488e-03, 1.653546503756366e-03, 1.653534854948063e-03, 1.653534854948063e-03, 5.034993146103754e-03, 5.036351858831056e-03, 5.073869511932080e-03, 5.075269169866076e-03, 5.068489841664098e-03, 5.068489841664098e-03, 7.908623925952997e-03, 7.888913251995901e-03, 7.675074052098797e-03, 9.096583040124152e-03, 8.632152731056318e-03, 8.632152731056318e-03, 5.304115761274047e-02, 5.525010163282357e-02, 2.320142126501353e-04, 1.451576979033091e-02, 2.549528707390881e-02, 2.549528707390877e-02, 4.135613717371204e-04, 4.432142437816348e-04, 1.808114723836969e-03, 1.930113844317074e-04, 2.935282141581714e-04, 2.935282141581737e-04, 6.948729381417868e-03, 6.948182018056931e-03, 6.948859847691476e-03, 6.948369173474022e-03, 6.948374128651190e-03, 6.948374128651190e-03, 1.224572434528433e-02, 1.267101624392810e-02, 1.225330421736825e-02, 1.265750213224346e-02, 1.247665363256556e-02, 1.247665363256556e-02, 4.742293698209909e-02, 4.735915330342205e-02, 3.841045642233219e-02, 3.878101069924541e-02, 4.834731168955111e-02, 4.834731168955111e-02, 6.352629080020088e-03, 2.571113988047661e-02, 5.630225750057750e-03, 1.227957121188863e-02, 1.331708166606831e-02, 1.331708166606834e-02, 1.011554893731633e-04, 1.631500079020044e-04, 3.824740789271917e-04, 3.526271330927786e-03, 2.698158999478250e-04, 2.698158999478282e-04, 6.062986486375166e-02, 6.091296473207981e-02, 6.081871149601882e-02, 6.073634093513280e-02, 6.077754166812602e-02, 6.077754166812602e-02, 6.135212641089358e-02, 6.448939996928228e-02, 6.531832949492662e-02, 6.431307545454487e-02, 6.484604100611684e-02, 6.484604100611681e-02, 4.212074854078542e-02, 3.897776013605442e-02, 4.907434311920572e-02, 5.450429200408018e-02, 5.828664038593160e-02, 5.828664038593152e-02, 5.597164380236662e-02, 1.790169816431342e-03, 2.339795323984313e-03, 6.860076062350921e-02, 6.455355716436683e-03, 6.455355716436626e-03, 3.491927551566379e-04, 2.868836170770204e-05, 1.915662891869499e-04, 6.423719287783840e-03, 3.089124049580590e-04, 3.089124049580588e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
