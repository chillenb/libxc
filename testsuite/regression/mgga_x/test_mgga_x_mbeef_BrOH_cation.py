
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mbeef_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbeef", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.247688597958749e+01, -2.247691855047673e+01, -2.247713021551993e+01, -2.247664422260114e+01, -2.247688936769622e+01, -2.247688936769622e+01, -3.479689241918266e+00, -3.479705561871243e+00, -3.480370771563000e+00, -3.481778799351527e+00, -3.480723151904219e+00, -3.480723151904219e+00, -6.610194389251463e-01, -6.607024839805058e-01, -6.559755549418633e-01, -6.660660264404178e-01, -6.655717517773450e-01, -6.655717517773450e-01, -2.061878579423977e-01, -2.081404674403708e-01, -7.298012397895262e-01, -1.519914959513132e-01, -1.910308658139846e-01, -1.910308658139845e-01, -6.438290924261409e-03, -6.782623498411383e-03, -3.921283002340716e-02, -3.705210722880908e-03, -5.177442668916193e-03, -5.177442668916194e-03, -5.411947269187836e+00, -5.411539050758988e+00, -5.411938682194716e+00, -5.411578097690386e+00, -5.411734352934651e+00, -5.411734352934651e+00, -2.220930501682874e+00, -2.243730876022027e+00, -2.227657378037802e+00, -2.247977709899873e+00, -2.230855677108180e+00, -2.230855677108180e+00, -6.177374693051001e-01, -6.588088660983762e-01, -5.524475410309551e-01, -5.595856131914319e-01, -6.272412731605645e-01, -6.272412731605645e-01, -1.027764489661069e-01, -1.997479182131325e-01, -9.527818615747183e-02, -1.913651438159583e+00, -1.212688134632594e-01, -1.212688134632594e-01, -2.859750803427391e-03, -3.622179995782001e-03, -2.775092040935502e-03, -6.475801622372829e-02, -3.486536164539812e-03, -3.486536164539813e-03, -5.975955989891751e-01, -5.986449318203573e-01, -5.982242896821834e-01, -5.979128780626196e-01, -5.980633287012063e-01, -5.980633287012063e-01, -5.811174740453864e-01, -5.467197266601139e-01, -5.539837824210776e-01, -5.622875593861323e-01, -5.575798430648611e-01, -5.575798430648611e-01, -6.880648365877861e-01, -2.622183367515498e-01, -3.047412962236837e-01, -3.649009317978541e-01, -3.362820228175672e-01, -3.362820228175672e-01, -4.932572844140035e-01, -3.725411644583725e-02, -5.186045600880622e-02, -3.522034472387332e-01, -8.157053553058502e-02, -8.157053553058502e-02, -9.094313078838463e-03, -9.674022432832498e-04, -2.035049810301988e-03, -7.578476683846876e-02, -3.201351924661830e-03, -3.201351924661826e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mbeef_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbeef", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.728751482747754e+01, -2.728729358291468e+01, -2.728765805916060e+01, -2.728739762124791e+01, -2.728803277669255e+01, -2.728795801494806e+01, -2.728641547100755e+01, -2.728589655316517e+01, -2.728760373918309e+01, -2.728665937442258e+01, -2.728760373918309e+01, -2.728665937442258e+01, -4.406252503977418e+00, -4.405182637443313e+00, -4.406715181167073e+00, -4.405416705036335e+00, -4.415031634981397e+00, -4.416397783261353e+00, -4.415342164519244e+00, -4.414768732285125e+00, -4.404584277793379e+00, -4.422487820145772e+00, -4.404584277793379e+00, -4.422487820145772e+00, -8.166208957442347e-01, -8.265498724546526e-01, -8.133945292885260e-01, -8.250492176992684e-01, -7.695887723316603e-01, -7.598930317794017e-01, -7.827248916183861e-01, -7.885609914690809e-01, -8.380153832689581e-01, -7.372744696208621e-01, -8.380153832689581e-01, -7.372744696208621e-01, -1.721678131999031e-01, -1.934181352369307e-01, -1.846877870006688e-01, -1.725847155901555e-01, -8.161698871573865e-01, -8.795495625815766e-01, -2.213823642948095e-01, -2.271049356865826e-01, -1.988362977612080e-01, -1.539166193505972e-01, -1.988362977612078e-01, -1.539166193505972e-01, -8.341157484483042e-03, -8.870993707204981e-03, -8.748715502185722e-03, -9.386523616179423e-03, -5.412055454586490e-02, -5.763728504531906e-02, -4.989557698232257e-03, -4.905823656713423e-03, -7.429634330451882e-03, -4.215778144487495e-03, -7.429634330451882e-03, -4.215778144487484e-03, -6.750690676266024e+00, -6.748923866845652e+00, -6.754296912531064e+00, -6.752407930116926e+00, -6.750865838523324e+00, -6.749025475827990e+00, -6.753961059395949e+00, -6.752191417138618e+00, -6.752557799800082e+00, -6.750677624476853e+00, -6.752557799800082e+00, -6.750677624476853e+00, -2.051545537718321e+00, -2.053291273987595e+00, -2.096087475138669e+00, -2.098737133986242e+00, -2.012398269837941e+00, -2.025515550085869e+00, -2.067694175673986e+00, -2.078858259439039e+00, -2.109873288348625e+00, -2.080284915998993e+00, -2.109873288348625e+00, -2.080284915998993e+00, -7.762101176995154e-01, -7.720462619818240e-01, -8.719706837147940e-01, -8.686318490364913e-01, -6.868914418056126e-01, -7.412640383929887e-01, -7.643978859087083e-01, -8.286762151670787e-01, -8.033722202477459e-01, -7.748242674686788e-01, -8.033722202477457e-01, -7.748242674686791e-01, -1.402883151267079e-01, -1.416690473174223e-01, -2.540671356315825e-01, -2.577781426997154e-01, -1.219062125486837e-01, -1.320067537611885e-01, -2.815401014224724e+00, -2.814464952124036e+00, -1.830940580361111e-01, -1.971401432647268e-01, -1.830940580361112e-01, -1.971401432647267e-01, -3.739849355584219e-03, -3.886642159347650e-03, -4.801057629910795e-03, -4.873594543393543e-03, -3.593289714256011e-03, -3.807876430830241e-03, -8.563630264872824e-02, -8.856689123569762e-02, -3.666564921456406e-03, -5.046708779552623e-03, -3.666564921456407e-03, -5.046708779552631e-03, -7.885960217074663e-01, -7.917338846248216e-01, -7.779970798252609e-01, -7.812157219063620e-01, -7.819505330752810e-01, -7.851583206242760e-01, -7.850629184746573e-01, -7.882017948396891e-01, -7.835297489622698e-01, -7.867006523262967e-01, -7.835297489622698e-01, -7.867006523262967e-01, -7.674697489908897e-01, -7.701331212495941e-01, -5.841679781907199e-01, -5.876555976565433e-01, -6.381882538348851e-01, -6.421460910884961e-01, -6.973761673345010e-01, -7.001024980729533e-01, -6.683660777567197e-01, -6.710917308533465e-01, -6.683660777567197e-01, -6.710917308533465e-01, -9.449139933646422e-01, -9.361520328788768e-01, -2.093861417687659e-01, -2.069062236268063e-01, -2.211866632481277e-01, -2.228794791464201e-01, -4.175964621331519e-01, -4.211063347861259e-01, -3.051010766570995e-01, -3.058867931563603e-01, -3.051010766570995e-01, -3.058867931563604e-01, -5.361058178258720e-01, -5.394387242266120e-01, -5.571431319164823e-02, -5.478738874297791e-02, -7.200138879488072e-02, -7.437964063526975e-02, -4.229868041856649e-01, -4.247092703221078e-01, -1.060547201813902e-01, -1.151684974863735e-01, -1.060547201813902e-01, -1.151684974863735e-01, -1.200248619203754e-02, -1.245131906022389e-02, -1.288681879543722e-03, -1.291787426917381e-03, -2.624339692142508e-03, -2.791753099400241e-03, -1.044329607412972e-01, -1.483021829395031e-01, -3.475625760896110e-03, -4.622465370001904e-03, -3.475625760896103e-03, -4.622465370001902e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbeef_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbeef", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.339902999599184e-08, 0.000000000000000e+00, -1.340070366024819e-08, -1.339876124506273e-08, 0.000000000000000e+00, -1.340050847587153e-08, -1.339822581429363e-08, 0.000000000000000e+00, -1.339965073866025e-08, -1.340126833819843e-08, 0.000000000000000e+00, -1.340352322419585e-08, -1.339885952224758e-08, 0.000000000000000e+00, -1.340221158269512e-08, -1.339885952224758e-08, 0.000000000000000e+00, -1.340221158269512e-08, -1.808593246989867e-05, 0.000000000000000e+00, -1.799168634438374e-05, -1.811489272054917e-05, 0.000000000000000e+00, -1.800354820387230e-05, -1.860271425063658e-05, 0.000000000000000e+00, -1.866978508879184e-05, -1.875493882178669e-05, 0.000000000000000e+00, -1.868080645260347e-05, -1.804057403357036e-05, 0.000000000000000e+00, -1.913511140853230e-05, -1.804057403357036e-05, 0.000000000000000e+00, -1.913511140853230e-05, -1.486678006698307e-02, 0.000000000000000e+00, -1.494215865198259e-02, -1.486362806609044e-02, 0.000000000000000e+00, -1.493851556049829e-02, -1.465913593296817e-02, 0.000000000000000e+00, -1.468994396853781e-02, -1.477988573890516e-02, 0.000000000000000e+00, -1.487831015113732e-02, -1.474898231378962e-02, 0.000000000000000e+00, -1.404294542649508e-02, -1.474898231378962e-02, 0.000000000000000e+00, -1.404294542649508e-02, -4.193840914985414e+00, 0.000000000000000e+00, -3.946208830900555e+00, -3.466399087690780e+00, 0.000000000000000e+00, -4.702806965808141e+00, -6.651131765478925e-03, 0.000000000000000e+00, -6.152248750230011e-03, 1.141229947417769e+00, 0.000000000000000e+00, 1.597883763242783e+00, -2.620382922426625e+00, 0.000000000000000e+00, 7.297482467510070e-01, -2.620382922426628e+00, 0.000000000000000e+00, 7.297482467510131e-01, 1.376259730371296e+01, 0.000000000000000e+00, 1.349293573412833e+01, 1.443090733791629e+01, 0.000000000000000e+00, 1.647735988747585e+01, 5.206077262055432e+00, 0.000000000000000e+00, 5.783487708006889e+00, 1.252256503071837e+01, 0.000000000000000e+00, 1.218559285869166e+01, 1.352632398968080e+01, 0.000000000000000e+00, 3.459361550149764e+01, 1.352632398967923e+01, 0.000000000000000e+00, 3.459361550145044e+01, -3.756428557417267e-06, 0.000000000000000e+00, -3.761345786761745e-06, -3.749909579495420e-06, 0.000000000000000e+00, -3.755057314975951e-06, -3.756531650547229e-06, 0.000000000000000e+00, -3.761464578648191e-06, -3.750925997889779e-06, 0.000000000000000e+00, -3.755738730694067e-06, -3.752738255615641e-06, 0.000000000000000e+00, -3.758131191126275e-06, -3.752738255615641e-06, 0.000000000000000e+00, -3.758131191126275e-06, -4.392998680807652e-04, 0.000000000000000e+00, -4.342046952899788e-04, -3.955069154024026e-04, 0.000000000000000e+00, -3.908152951028076e-04, -4.349794164449400e-04, 0.000000000000000e+00, -4.317127417434701e-04, -3.874157959311177e-04, 0.000000000000000e+00, -3.846115303614927e-04, -4.140676282213386e-04, 0.000000000000000e+00, -4.117853079417951e-04, -4.140676282213386e-04, 0.000000000000000e+00, -4.117853079417951e-04, -3.399207899533237e-02, 0.000000000000000e+00, -3.267626493719946e-02, -8.567118578875261e-03, 0.000000000000000e+00, -6.550897352006218e-03, -4.473585575977702e-02, 0.000000000000000e+00, -6.164431286782504e-02, -4.202959620549343e-02, 0.000000000000000e+00, -5.349164977980453e-02, -2.025139921680105e-02, 0.000000000000000e+00, -3.539035293772427e-02, -2.025139921680104e-02, 0.000000000000000e+00, -3.539035293772425e-02, 6.864274508073840e-01, 0.000000000000000e+00, 5.641860889674244e-01, -6.338709244821106e-01, 0.000000000000000e+00, -5.145260309056864e-01, 1.368963903762029e-01, 0.000000000000000e+00, 6.143976495350275e-01, -4.333102938226358e-04, 0.000000000000000e+00, -4.342884561751297e-04, 3.103344446996431e+00, 0.000000000000000e+00, 3.401948741195504e+00, 3.103344446996442e+00, 0.000000000000000e+00, 3.401948741195482e+00, 1.761544313196705e+01, 0.000000000000000e+00, 1.524648918850356e+01, 1.513635571634085e+01, 0.000000000000000e+00, 1.397590714458414e+01, 8.603770511997953e+01, 0.000000000000000e+00, 9.556866870414717e+01, 3.256269105529557e-01, 0.000000000000000e+00, 2.701067049107877e+00, 4.287978414377337e+01, 0.000000000000000e+00, 4.166414597786826e+01, 4.287978414379155e+01, 0.000000000000000e+00, 4.166414597787015e+01, -1.237508777837198e-02, 0.000000000000000e+00, -1.231057369549120e-02, -1.606903684153723e-02, 0.000000000000000e+00, -1.587151212779064e-02, -1.481795209670545e-02, 0.000000000000000e+00, -1.465954697097884e-02, -1.373739828024151e-02, 0.000000000000000e+00, -1.362704486876241e-02, -1.427794835234029e-02, 0.000000000000000e+00, -1.414517428629764e-02, -1.427794835234029e-02, 0.000000000000000e+00, -1.414517428629764e-02, -4.772797701958673e-03, 0.000000000000000e+00, -5.227631497209592e-03, -5.956652791736482e-02, 0.000000000000000e+00, -5.822386440215378e-02, -4.558402472767810e-02, 0.000000000000000e+00, -4.439629700373183e-02, -2.833543255491522e-02, 0.000000000000000e+00, -2.784126294971925e-02, -3.697984209205844e-02, 0.000000000000000e+00, -3.633635851436701e-02, -3.697984209205844e-02, 0.000000000000000e+00, -3.633635851436702e-02, -1.920353795372231e-02, 0.000000000000000e+00, -1.515821168998262e-02, -1.886154285398228e+00, 0.000000000000000e+00, -1.899386905238648e+00, -1.363668631033858e+00, 0.000000000000000e+00, -1.351361866341103e+00, -3.587155169837363e-01, 0.000000000000000e+00, -3.441496159718034e-01, -8.048558093053804e-01, 0.000000000000000e+00, -8.062970976958678e-01, -8.048558093053816e-01, 0.000000000000000e+00, -8.062970976958682e-01, -1.430484967376492e-01, 0.000000000000000e+00, -1.334989475157916e-01, 1.631195450755829e+01, 0.000000000000000e+00, 1.097249070687759e+01, 3.103852148656828e+00, 0.000000000000000e+00, 3.136928400433427e+00, -4.444616235467321e-01, 0.000000000000000e+00, -4.227611083729760e-01, 1.459893503918834e+00, 0.000000000000000e+00, 2.242880944406969e+00, 1.459893503918824e+00, 0.000000000000000e+00, 2.242880944406981e+00, 1.055467767953136e+01, 0.000000000000000e+00, 1.074450365477699e+01, 5.437045388930520e+01, 0.000000000000000e+00, 9.628206949992745e+01, 3.348414030137869e+01, 0.000000000000000e+00, 3.562998103332023e+01, 3.423371300597051e+00, 0.000000000000000e+00, 2.739281570892016e+01, 8.825222498012907e+01, 0.000000000000000e+00, 4.330962162890017e+01, 8.825222498011924e+01, 0.000000000000000e+00, 4.330962162890078e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbeef_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbeef", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-2.085621452845394e-05, -2.078270533685566e-05, -2.086175667503878e-05, -2.078671897133486e-05, -2.086138939282926e-05, -2.079117957968787e-05, -2.079854728807385e-05, -2.071149225563944e-05, -2.086014960896856e-05, -2.073015225745672e-05, -2.086014960896856e-05, -2.073015225745672e-05, 2.495179193389274e-03, 2.462370571791652e-03, 2.505221148115013e-03, 2.466474899797924e-03, 2.674547810424990e-03, 2.698134035590555e-03, 2.728763284845919e-03, 2.703465186501528e-03, 2.475829560823511e-03, 2.861867247499223e-03, 2.475829560823511e-03, 2.861867247499223e-03, 1.397138231945993e-02, 1.450987595368007e-02, 1.383934531589127e-02, 1.442100969753530e-02, 1.166995348014710e-02, 1.162246370441275e-02, 1.358368931429339e-02, 1.403553000698062e-02, 1.447471724336363e-02, 1.212326473110063e-02, 1.447471724336363e-02, 1.212326473110063e-02, 1.572529283875614e-01, 1.766900490772400e-01, 1.284237985376451e-01, 2.139704194636213e-01, 1.455586974470540e-03, 2.512117692466895e-03, -1.320014177847817e-02, -2.353669453058617e-02, 1.057823832675683e-01, -1.095722807423548e-04, 1.057823832675685e-01, -1.095722807423586e-04, -4.332757065352983e-07, -6.308998650677806e-07, -4.273836081696652e-07, -5.450349537248861e-06, -3.077647950955755e-04, -7.270343984705702e-04, 2.218807576206320e-10, 3.399461483937753e-10, 1.613455076740091e-08, 4.900130897821804e-11, 1.613455076725528e-08, 4.900130909182100e-11, -2.227469857394558e-05, -2.098832633530879e-05, -2.235206834901905e-05, -2.104532203902268e-05, -2.176654759089072e-05, -2.062130622822418e-05, -2.184643262177038e-05, -2.068770763910745e-05, -2.270615435524261e-05, -2.108296807816439e-05, -2.270615435524261e-05, -2.108296807816439e-05, 1.899323483496759e-02, 1.861598412538744e-02, 1.649695096971234e-02, 1.614131164948024e-02, 1.832244598863238e-02, 1.817768989909689e-02, 1.563692806859295e-02, 1.550039545867898e-02, 1.789052948871988e-02, 1.738409235765404e-02, 1.789052948871988e-02, 1.738409235765404e-02, 3.330610503740376e-02, 2.986965275430803e-02, 4.639117923876905e-03, -1.812102562648722e-04, 3.119474880603753e-02, 6.328340116217929e-02, 3.680865659743242e-02, 6.426720557407382e-02, 1.204027454957585e-02, 3.463549659618198e-02, 1.204027454957582e-02, 3.463549659618195e-02, -3.367724685410212e-03, -2.443359795796113e-03, 3.222312679527801e-02, 2.666954771358814e-02, -1.706213317430506e-03, -3.136036373364719e-03, 1.991460584506429e-02, 1.993991092223005e-02, -2.156831095787943e-02, -2.727940292662896e-02, -2.156831095787951e-02, -2.727940292662870e-02, 1.295835817130995e-12, 1.637791209548026e-12, 2.578344397086352e-11, 1.825050925387770e-11, 5.444062906715937e-10, 5.812135792559755e-10, -9.357283283434154e-04, -4.229596427995619e-03, 1.143932516866479e-12, 8.019363534451972e-08, 1.143932516866565e-12, 8.019363534552899e-08, -1.003693081933182e-02, -9.764177039519591e-03, -7.723848873537546e-03, -7.555589011240297e-03, -8.524574023796843e-03, -8.321975723794750e-03, -9.200174820051230e-03, -8.966674961518746e-03, -8.866901614914140e-03, -8.646595150819414e-03, -8.866901614914140e-03, -8.646595150819419e-03, -2.114763789034134e-02, -2.042840003395324e-02, 1.404622996228271e-02, 1.345891402796363e-02, 6.000640860608043e-03, 5.467316386442669e-03, -5.022172466142962e-03, -5.109127886269248e-03, 6.853549253551823e-04, 4.754581787469966e-04, 6.853549253551745e-04, 4.754581787470027e-04, 3.558685136627903e-02, 2.586680556513568e-02, 1.628761012695141e-01, 1.659100935579431e-01, 1.774138916803399e-01, 1.802931490210826e-01, 8.643909535688063e-02, 8.359637363188081e-02, 1.459888776964861e-01, 1.458824313680490e-01, 1.459888776964862e-01, 1.458824313680490e-01, 7.407124909022665e-02, 6.719080072892984e-02, -3.649326698790194e-03, -2.106743298073625e-03, -8.486532918640768e-04, -1.185068207328258e-03, 9.572047135830222e-02, 9.110623568101786e-02, -5.387832752081967e-03, -7.141637454053953e-03, -5.387832752081936e-03, -7.141637454053983e-03, -1.877767409047799e-09, -2.156309805992595e-09, 4.160660226352166e-15, 2.374479326824419e-15, 4.827025579279609e-10, 6.169070064120208e-10, -9.420379912825853e-03, -6.848782490929553e-02, 4.680760034824185e-12, 6.854837324512514e-08, 4.680760032570017e-12, 6.854837324511855e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
