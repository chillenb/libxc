
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mbeef_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbeef", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.165356466725763e+01, -2.165368240318833e+01, -2.165420133183364e+01, -2.209907496277867e+01, -2.209970871089222e+01, -2.254618502993894e+01, -3.639148891297174e+00, -3.989256807969102e+00, -3.986785683434427e+00, -3.988145779942689e+00, -3.987581883139747e+00, -3.637445816455913e+00, -5.785317822279974e-01, -6.989698553659668e-01, -8.009941819221532e-01, -6.850743724647625e-01, -5.650126422272739e-01, -8.052426235073258e-01, -1.820209332216514e-01, -1.853969587237858e-01, -7.935931042279659e-01, -1.444294168440583e-01, -2.000449651586358e-01, -1.975943630823014e-01, -6.032492908223046e-03, -5.910984051929562e-03, -3.289855917555884e-02, -3.474554540657343e-03, -4.852729422507812e-03, -4.852729422507812e-03, -5.413080346650292e+00, -5.412656995982894e+00, -5.413048143978868e+00, -5.412675249540068e+00, -5.385897844412197e+00, -5.385915261954066e+00, -2.292607925778674e+00, -2.299740263116542e+00, -2.287799097144562e+00, -2.294078538294549e+00, -2.058798382253531e+00, -2.298727667861818e+00, -6.045993286641564e-01, -6.708416263923062e-01, -6.145775173653091e-01, -6.180592738920357e-01, -6.140428765381436e-01, -6.488125472340878e-01, -9.409629416225633e-02, -1.743892782090943e-01, -8.697448912229490e-02, -2.076764876201047e+00, -1.145963399335422e-01, -1.145963399335422e-01, -2.483265127329951e-03, -3.396448475632552e-03, -2.601687980317311e-03, -5.286242065890490e-02, -3.268503236622452e-03, -3.268503236622452e-03, -5.992298246833468e-01, -6.004788693915708e-01, -5.971877798753076e-01, -5.982492585584831e-01, -5.970045247919978e-01, -5.984152895822903e-01, -5.835916525302762e-01, -5.116123986593099e-01, -5.293318488079812e-01, -5.660927024063807e-01, -5.616765203622673e-01, -5.429362731809526e-01, -6.910843011347907e-01, -2.669210243406815e-01, -2.750170842651252e-01, -3.636237804402560e-01, -3.641537179735265e-01, -3.152946964522387e-01, -5.176414184874616e-01, -2.806368933216957e-02, -4.678583578914276e-02, -3.815741198857541e-01, -7.447606914549881e-02, -7.447606914549884e-02, -7.130314802305079e-03, -9.074853460040312e-04, -1.602489224330018e-03, -5.689483002048647e-02, -3.001320026210500e-03, -2.635618081254463e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mbeef_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbeef", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.195557457458694e+01, -3.195402010629254e+01, -3.195545580016178e+01, -3.195393394671945e+01, -3.195517925512365e+01, -3.195350772473052e+01, -3.195650229679365e+01, -2.714592210807847e+01, -3.195549277061082e+01, -2.714675438681343e+01, -2.714697478971847e+01, -2.714675438681343e+01, -4.250127643360508e+00, -5.018051645613203e+00, -4.250045952905919e+00, -4.250090351849262e+00, -4.248473824220805e+00, -4.248244067470314e+00, -4.249395984188821e+00, -4.249453192103320e+00, -4.249629206005635e+00, -4.248150894129191e+00, -5.017860735963624e+00, -4.248150894129192e+00, -8.313673262571040e-01, -8.406390746291783e-01, -8.284218108136979e-01, -9.922369363887045e-01, -1.033369133964366e+00, -1.036573194029240e+00, -1.016314739799823e+00, -8.063562360191334e-01, -8.511588943267341e-01, -7.533462122537385e-01, -9.910157785045582e-01, -1.049980179686427e+00, -1.959630346346570e-01, -3.058690553316576e-01, -1.990272213335500e-01, -3.035131721605842e-01, -1.458665496035882e+00, -9.233977582812349e-01, -2.353688862954671e-01, -2.476570329961462e-01, -3.253216439235478e-01, -1.360660730941946e-01, -3.253216439235477e-01, -1.063265574592611e-01, -7.797088431610638e-03, -8.289420130148257e-03, -6.833988531238092e-03, -8.762111862789766e-03, -3.800073952862901e-02, -4.992832844792141e-02, -4.674543524283954e-03, -4.596493677803687e-03, -6.949813322290084e-03, -3.948003115129589e-03, -6.949813322290085e-03, -3.948003114970846e-03, -6.747832644959987e+00, -6.746231135639792e+00, -6.751466460320382e+00, -6.749742033327262e+00, -6.748075070656336e+00, -6.746381003060272e+00, -6.751191508383088e+00, -6.749568924521989e+00, -7.164366233867643e+00, -6.747990037749052e+00, -6.749664042688052e+00, -7.162729425744376e+00, -2.453091503387760e+00, -2.451167130628617e+00, -2.454362333309153e+00, -2.452601911672831e+00, -2.455002731407173e+00, -2.452250584696952e+00, -2.453886637222904e+00, -2.451912705700461e+00, -2.454031845621852e+00, -2.878558722527115e+00, -2.454031845621852e+00, -2.451493474759909e+00, -7.194261592318241e-01, -7.719520162495955e-01, -8.118935097770172e-01, -8.141612760770581e-01, -6.497772958246208e-01, -6.709212855837744e-01, -6.779337897152302e-01, -7.059626015697267e-01, -7.565137603603743e-01, -7.704538809324910e-01, -7.565137603603744e-01, -7.124044657496188e-01, -1.301952792251438e-01, -1.318509103194073e-01, -1.958818627391449e-01, -3.414920186221286e-01, -1.145486571933357e-01, -1.228130681793834e-01, -2.376390691249910e+00, -2.375442512945024e+00, -1.665556051550106e-01, -1.952016206265270e-01, -1.665556051550099e-01, -1.952016206265272e-01, -2.941036209423772e-03, -3.642154151094708e-03, -4.497192384859817e-03, -4.565093378620359e-03, -3.364733490810054e-03, -3.564394816308930e-03, -7.771846797643993e-02, -6.363176655380279e-02, -3.433449116418139e-03, -4.723523740315057e-03, -3.433449116168432e-03, -4.723523737818228e-03, -7.852641668668912e-01, -7.885078977624979e-01, -7.729923578955885e-01, -7.763607656404815e-01, -7.814905713866332e-01, -7.847443447454934e-01, -7.844681342952562e-01, -7.842794564846888e-01, -7.829343045817787e-01, -7.861823787417258e-01, -7.829343045817787e-01, -7.825335152226310e-01, -7.632086395008278e-01, -7.659727481121353e-01, -5.969253451956640e-01, -6.411308259917083e-01, -6.364512089857688e-01, -7.377571305309312e-01, -6.869350664126840e-01, -6.896838474008935e-01, -6.604448374845033e-01, -6.634097244781871e-01, -6.604448374845034e-01, -8.016538536248058e-01, -8.397913378819341e-01, -1.014949111036789e+00, -4.000031878937726e-01, -4.007639564202828e-01, -3.159348855354072e-01, -4.132924480176838e-01, -5.043045233724665e-01, -4.382590745929622e-01, -4.104500031059787e-01, -4.093328747694659e-01, -4.104500031059784e-01, -4.044510504210282e-01, -5.512712944463846e-01, -5.537683942193912e-01, -3.728990674446665e-02, -3.754505909078326e-02, -6.232360471956701e-02, -6.433464175916383e-02, -4.070022639400837e-01, -4.099809357796205e-01, -9.727052724474090e-02, -1.053123894429654e-01, -9.727052724474600e-02, -1.053123894429622e-01, -9.328954037723068e-03, -9.667169821965346e-03, -1.208664929156498e-03, -1.211427418259357e-03, -2.064954178107186e-03, -2.196245459868908e-03, -7.525625658125937e-02, -7.649483764117894e-02, -3.253287994712019e-03, -4.327909777948510e-03, -3.253288005473635e-03, -3.626325682715998e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbeef_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbeef", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.578616226669674e-08, 0.000000000000000e+00, -2.577445812715787e-08, -2.578409256384353e-08, 0.000000000000000e+00, -2.577295558474769e-08, -2.577805539883675e-08, 0.000000000000000e+00, -2.576413399439110e-08, -2.580129262338880e-08, 0.000000000000000e+00, -1.381291506566848e-08, -2.578485345666165e-08, 0.000000000000000e+00, -1.381172105633365e-08, -1.381107309384461e-08, 0.000000000000000e+00, -1.381172105633365e-08, -1.505253251718243e-05, 0.000000000000000e+00, -2.682088268575460e-05, -1.505607012548493e-05, 0.000000000000000e+00, -1.505266940029522e-05, -1.512483206503209e-05, 0.000000000000000e+00, -1.513644729471003e-05, -1.509480029402074e-05, 0.000000000000000e+00, -1.509405008215444e-05, -1.505429164861115e-05, 0.000000000000000e+00, -1.515459070942964e-05, -2.685589895236374e-05, 0.000000000000000e+00, -1.515459070942964e-05, -1.738340229543153e-02, 0.000000000000000e+00, -1.737547508829490e-02, -1.741579196612023e-02, 0.000000000000000e+00, -2.545485099419509e-03, -9.288721789451348e-04, 0.000000000000000e+00, -6.878616505937210e-04, -1.455560155438399e-03, 0.000000000000000e+00, -1.801302627349046e-02, -1.702361444746952e-02, 0.000000000000000e+00, -1.932627713336258e-02, -2.722115898198454e-03, 0.000000000000000e+00, 2.749518080158971e-04, -3.431974091802150e+00, 0.000000000000000e+00, 2.383715809773986e-01, -3.306393135179674e+00, 0.000000000000000e+00, 1.272476183655788e-01, 1.463277141393532e-03, 0.000000000000000e+00, -7.325534633502731e-03, 9.562939833240438e-01, 0.000000000000000e+00, 1.163563745250849e+00, 4.280459519908176e-01, 0.000000000000000e+00, 2.424883909876080e-01, 4.280459519908166e-01, 0.000000000000000e+00, -3.028848096441677e+01, 6.485227341264425e+00, 0.000000000000000e+00, 6.478367967092585e+00, -1.759955267501985e+06, 0.000000000000000e+00, 6.735515110958670e+00, -1.841237960112321e+03, 0.000000000000000e+00, 1.086038138991936e+00, 4.873196482454333e+00, 0.000000000000000e+00, 4.924695842091823e+00, 6.213101965110352e+00, 0.000000000000000e+00, 1.081648672325524e+01, 6.213101965110352e+00, 0.000000000000000e+00, 1.081648539567942e+01, -3.779394418165368e-06, 0.000000000000000e+00, -3.782995146263789e-06, -3.772931522021300e-06, 0.000000000000000e+00, -3.776743975179057e-06, -3.778969732973519e-06, 0.000000000000000e+00, -3.782732873546267e-06, -3.773426689376060e-06, 0.000000000000000e+00, -3.777056428984561e-06, -9.698130521998476e-07, 0.000000000000000e+00, -3.779867615861112e-06, -3.776138580114501e-06, 0.000000000000000e+00, -9.720314133205227e-07, -1.221072837322037e-04, 0.000000000000000e+00, -1.227577128630729e-04, -1.244721072590910e-04, 0.000000000000000e+00, -1.250153221409120e-04, -1.193596317198995e-04, 0.000000000000000e+00, -1.208379627738600e-04, -1.219001414169052e-04, 0.000000000000000e+00, -1.232516675308950e-04, -1.251736158885914e-04, 0.000000000000000e+00, -3.036836049785468e-04, -1.251736158885914e-04, 0.000000000000000e+00, -1.243056988726552e-04, -2.320833492169723e-02, 0.000000000000000e+00, -1.784041055651399e-02, -1.739105916076468e-02, 0.000000000000000e+00, -1.731153923528399e-02, -2.807924139474195e-02, 0.000000000000000e+00, -2.724234647809393e-02, -2.878575392472628e-02, 0.000000000000000e+00, -2.605858860989382e-02, -2.046402074788384e-02, 0.000000000000000e+00, -2.008014464148888e-02, -2.046402074788385e-02, 0.000000000000000e+00, -2.453908637435974e-02, 3.076466433280479e-01, 0.000000000000000e+00, 3.217630256335217e-01, -2.947343359382962e+00, 0.000000000000000e+00, 5.914425360613187e-01, 1.510614616160595e-01, 0.000000000000000e+00, 2.710065044858890e-01, -2.097417079861110e-04, 0.000000000000000e+00, -2.101377495270012e-04, 9.481013458725706e-01, 0.000000000000000e+00, 1.684450796718696e+00, 9.481013458724814e-01, 0.000000000000000e+00, 1.684450796718716e+00, -5.130940247219975e+07, 0.000000000000000e+00, 3.280675748603614e+00, 4.627726656056910e+00, 0.000000000000000e+00, 4.080506405529122e+00, 3.315448233191960e+01, 0.000000000000000e+00, 3.629493570842710e+01, 6.472157627746124e-02, 0.000000000000000e+00, -2.345782344989122e+02, 6.300165534282372e+00, 0.000000000000000e+00, 1.967814256719712e+01, 6.300163121841169e+00, 0.000000000000000e+00, 1.967812596089931e+01, -1.976233006079249e-02, 0.000000000000000e+00, -1.940679749491067e-02, -2.187665978528448e-02, 0.000000000000000e+00, -2.147854681310071e-02, 7.654528358180161e-03, 0.000000000000000e+00, 7.136560044090169e-03, 4.225678606704579e-03, 0.000000000000000e+00, -2.018923934948756e-02, 6.053349301306673e-03, 0.000000000000000e+00, 5.547276706796273e-03, 6.053349301306673e-03, 0.000000000000000e+00, -2.049180339995559e-02, -2.231474576150303e-02, 0.000000000000000e+00, -2.195599064842069e-02, -4.433629907605694e-02, 0.000000000000000e+00, -2.954092694947882e-02, -4.066005432655325e-02, 0.000000000000000e+00, -5.999572126568582e-02, -3.419676040130263e-02, 0.000000000000000e+00, -3.369811526884696e-02, -3.775175551055991e-02, 0.000000000000000e+00, -3.719899839850026e-02, -3.775175551055993e-02, 0.000000000000000e+00, -8.034365008412998e-02, -1.453225740914128e-02, 0.000000000000000e+00, -3.061807985691767e-02, 1.827565612828282e-01, 0.000000000000000e+00, 1.735191076265520e-01, -6.936630136208950e-01, 0.000000000000000e+00, -4.523314142159013e-02, -3.147712033755646e-01, 0.000000000000000e+00, -1.188208675479246e-01, -1.268640689112178e-01, 0.000000000000000e+00, -1.291397004374425e-01, -1.268640689112188e-01, 0.000000000000000e+00, -4.834240056853300e-01, -5.380327975675435e-02, 0.000000000000000e+00, -5.404776241276962e-02, -1.985687950222542e+03, 0.000000000000000e+00, -1.932260068510322e+03, 4.966283147803078e-01, 0.000000000000000e+00, 4.220474536006300e-01, -1.774942391751867e-01, 0.000000000000000e+00, -1.890005185515148e-01, 1.559653752193561e-01, 0.000000000000000e+00, 5.075618881286826e-01, 1.559653752214580e-01, 0.000000000000000e+00, 5.075618881274133e-01, -5.068353580798013e+05, 0.000000000000000e+00, -4.395429967389227e+05, 5.367005427968379e+00, 0.000000000000000e+00, 5.293492302503225e+00, -2.111333152346383e+08, 0.000000000000000e+00, -1.649965780476724e+08, -1.202406786200877e+02, 0.000000000000000e+00, -1.127455937234938e+02, 1.620964283128590e+01, 0.000000000000000e+00, 2.047110397769477e+01, 1.620983938861748e+01, 0.000000000000000e+00, -2.219888991968810e+07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbeef_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbeef", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.808279922664888e-03, 1.807483474021917e-03, 1.808156917187166e-03, 1.807394148733453e-03, 1.807806050413889e-03, 1.806878712180876e-03, 1.809185672668656e-03, 2.148960624511779e-21, 1.808201375192726e-03, -7.887544824173581e-21, 2.339766402203061e-20, -7.887544824173581e-21, -8.177777195947271e-18, 4.756828159001049e-03, 1.645857712801968e-17, 5.999722249241304e-18, -7.599368032542722e-18, -7.558917478002653e-18, -1.644324093215632e-18, 2.114644614275499e-18, 5.445818904774858e-18, 8.376967275574589e-18, 4.761490531102676e-03, 8.376967275574589e-18, 5.881884253979758e-03, 6.462515613154728e-03, 5.725495524673953e-03, -1.962910588315077e-16, 1.740583551898953e-16, 1.067618532840219e-16, -1.545587781921142e-16, 4.848297306897195e-03, 6.828411169704343e-03, 2.745652095773808e-03, -4.847959347733019e-17, -1.263507195862512e-17, 4.015849236554408e-03, -3.464871169662952e-16, 4.568427436864742e-03, -1.132774309373988e-17, -1.296465373644945e-16, 1.134640623959100e-03, -3.243053941144436e-16, 4.539722834270172e-17, -3.125651736975192e-16, 2.299186244346757e-15, -2.362081016011937e-16, 3.470008211544529e-05, -5.295599208054984e-13, 4.694094065817997e-13, 1.792899848813138e-10, 1.212505634450610e-13, 3.196931236741189e-07, -1.789667796238873e-15, -1.238046624922791e-11, -3.936703475363542e-12, -2.513095549434387e-12, 8.234573024340426e-12, -2.513095549434387e-12, 8.509198508563173e-12, -5.039467877326155e-20, -3.139443030565154e-19, 1.286860799461713e-19, 7.895872164494370e-20, 9.292013437743674e-20, 6.754357657983906e-19, -2.247978764052323e-19, 3.539855932664421e-19, 2.636968872973721e-04, 1.840868007427487e-20, 3.423320195413387e-19, 2.653585778693943e-04, -1.998053832639414e-17, 2.514966620690277e-17, 4.884676425364276e-18, 2.964287408638906e-17, -7.149076169186841e-18, 1.117103241151120e-17, -2.233627847455974e-17, 1.492348958624343e-17, -4.691805672491332e-18, 9.056347842782161e-03, -4.691805672491332e-18, 1.936821960356780e-18, 2.618040800817698e-17, 8.463869522569308e-03, 8.694940648475300e-20, -1.877848593809896e-19, 8.728233825114939e-17, 4.134935186712903e-17, 4.465782248526665e-18, -1.850498744316863e-18, 5.838227666327385e-18, 1.109530818742133e-02, -7.886460648359635e-18, -1.655065470238546e-17, -4.266936239148760e-15, -3.814240142380374e-15, 1.081090019474173e-03, 2.376824842238572e-16, -1.959851443070758e-15, -2.662496069482957e-15, -7.699659544975378e-19, 1.003162152562565e-18, -3.482733894806056e-16, 6.360599134148771e-16, 4.680247784473036e-16, 4.489301610428618e-16, 9.706408665562913e-13, -1.205307583660651e-11, -2.488703602340032e-12, 6.159196882161928e-12, 5.551469498036850e-12, 2.827345948242566e-12, 1.420750352833570e-14, 5.855414543328842e-06, 2.264819251000401e-12, -4.390732846414234e-12, 2.593614753285009e-12, 1.471421726449691e-12, -1.664762522793827e-18, -3.458951654356362e-19, -7.082402942473488e-18, -4.321181683073957e-18, -3.415910486010468e-02, -3.366828370539841e-02, -3.068729946800708e-02, 3.281088567678056e-18, -3.264421564196370e-02, -3.209029002634192e-02, -3.264421564196370e-02, 3.261603203257643e-18, -3.830433571063234e-19, 9.197552958527494e-20, 1.657679641379066e-17, 4.009208529111916e-03, -6.672561841353461e-18, 4.566209522273821e-02, 2.373489662190089e-18, 2.191663962983856e-18, 5.422808374059109e-19, 6.290211952471559e-18, -3.435657895300456e-19, 8.126528276818623e-02, 3.433968662037376e-19, 6.473935263853595e-02, 2.434600596826328e-16, -2.377243628164880e-16, 9.330088921163405e-03, -1.224195823580671e-16, 4.875780037391571e-02, -1.058238398944484e-16, -6.805767242239407e-17, 2.198887050371669e-16, 1.325431710874493e-16, 2.949355639802568e-02, 5.823918214878614e-17, -1.974860433316654e-17, 3.140728001303719e-07, 3.152990296392272e-07, 4.668071582864405e-15, -3.785717881162396e-15, -1.819834515464303e-16, -6.917092927225564e-17, -5.152425957192004e-16, -4.036469803868437e-15, -6.305822274219237e-15, 8.947615959093057e-17, 2.699809713593369e-10, 3.156721542839031e-10, 2.739587277206825e-11, 3.268203003945690e-10, 1.403756957086805e-12, 2.083399516685121e-12, 2.035580941977569e-05, 2.631529244890761e-05, 9.076106527494646e-12, -5.820846791124778e-12, -1.369059940394348e-11, 3.897129209424964e-11]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
