
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mvs_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.201954446951340e+01, -2.201962642672033e+01, -2.202002877258056e+01, -2.201868885650345e+01, -2.201958734637489e+01, -2.201958734637489e+01, -3.082621188137808e+00, -3.082692385113083e+00, -3.084955256439391e+00, -3.084322868352207e+00, -3.082655612766108e+00, -3.780305250330242e+00, -5.633807027853569e-01, -7.180249770478837e-01, -6.965586284131039e-01, -7.031646857032651e-01, -7.185468273759672e-01, -7.185468273759672e-01, -1.958943510870027e-01, -1.987463662196896e-01, -6.661769252464301e-01, -1.294210532582745e-01, -1.967478867895261e-01, -1.967478867895261e-01, -3.512622815902802e-03, -3.762330004659477e-03, -2.722385833734731e-02, -1.024303831956365e-03, -3.724522529513470e-03, -3.724522529513392e-03, -5.669442354399266e+00, -5.670461271544923e+00, -5.669549918018602e+00, -5.447232136141706e+00, -5.669960178478293e+00, -5.669960178478293e+00, -1.703315185776668e+00, -1.720299766748039e+00, -1.696352917641014e+00, -1.709564120085436e+00, -1.724034230597159e+00, -2.141316145935783e+00, -6.316915609975927e-01, -6.866155210046788e-01, -5.990573985442730e-01, -6.253540895398055e-01, -6.561524042084094e-01, -5.910435779363362e-01, -7.917528861138583e-02, -1.927642648843027e-01, -7.818691518764033e-02, -2.087764895215783e+00, -1.080820766641251e-01, -1.080820766641251e-01, -3.818526760873103e-03, -1.220794843401181e-03, -9.399801191151373e-04, -4.908885623604766e-02, -3.976245087221788e-03, -1.089824168390422e-03, -6.524117975115561e-01, -6.489153385650743e-01, -6.385727398421283e-01, -6.511367949850575e-01, -6.506528911693866e-01, -6.506528911693866e-01, -6.314696743597533e-01, -5.472325340531862e-01, -5.719234413036939e-01, -5.947168265784176e-01, -5.831129752676218e-01, -5.481749626685990e-01, -7.198221441894125e-01, -1.932979852218019e-01, -2.961924774751740e-01, -3.061587809947392e-01, -3.363121459980756e-01, -3.363121459980756e-01, -4.044055274273813e-01, -2.405101060687664e-02, -3.732809168064914e-02, -3.603067125520877e-01, -6.420930528165876e-02, -6.711175189949665e-02, -3.962119357629123e-03, -1.770693950133898e-04, -5.045022768058673e-04, -6.398371590067874e-02, -8.909651784450523e-04, -8.909651784449229e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mvs_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.112085276066796e+01, -3.112088878237778e+01, -3.112110890835449e+01, -3.112051440306724e+01, -3.112087131250319e+01, -3.112087131250319e+01, -4.577931354250004e+00, -4.578177055098978e+00, -4.585788175960350e+00, -4.583193956066315e+00, -4.578021323084283e+00, -4.269770514910950e+00, -7.888191435153991e-01, -6.542665034420897e-01, -5.934163667399185e-01, -6.181018977651781e-01, -6.557558821228441e-01, -6.557558821228441e-01, -1.656322613919980e-01, -1.720886817084278e-01, -9.188556539881929e-01, 2.150069528612292e-02, -1.675151378412785e-01, -1.675151378412785e-01, 5.589542909187923e-01, 5.469214760369105e-01, 3.427879203825543e-01, 1.206954238558792e+00, 5.406007178422306e-01, 5.406007178421030e-01, -7.277866740686895e+00, -7.281337505776038e+00, -7.278244304363676e+00, -7.563613746595132e+00, -7.279616884954200e+00, -7.279616884954200e+00, -2.471217056158839e+00, -2.505109443923835e+00, -2.457273713605472e+00, -2.483472718523611e+00, -2.513041781010931e+00, -2.345296334001946e+00, -7.581493658833895e-01, -8.654408827879998e-01, -6.970752615044237e-01, -7.621630541413134e-01, -8.024157373458710e-01, -1.011665332933373e+00, -1.063664084391226e-01, -1.061699935556937e-01, -1.050815762042603e-01, -2.557630427568820e+00, 3.857877230887394e-02, 3.857877230887394e-02, -5.091502636047743e-03, 1.052595231322436e+00, 7.274731351028311e-01, -6.565142482752936e-02, -5.301812486692479e-03, 1.019925627795043e+00, -8.619994167199324e-01, -8.496618842592828e-01, -8.689181900738283e-01, -8.575020163581446e-01, -8.557907479499812e-01, -8.557907479499812e-01, -8.316386086206523e-01, -6.515730609469175e-01, -7.058205727906107e-01, -7.550920522760030e-01, -7.300655617514551e-01, -7.898623533613773e-01, -8.958948677367188e-01, -2.676574105922022e-01, -2.770892164570939e-01, -4.452136255288088e-01, -3.479390665882405e-01, -3.479390665882404e-01, -6.059244872826358e-01, 3.765249195836589e-01, 3.041321241983395e-01, -4.092994625036422e-01, -8.617275137306915e-02, 1.424133936010688e-01, 7.361514008329271e-01, 1.942275604606923e+00, 1.092726640307267e+00, 1.365371626704155e-01, 9.740794531031287e-01, 9.740794531015615e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mvs_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.677899935573755e-09, -6.677721304120558e-09, -6.676887688725995e-09, -6.679804162842205e-09, -6.677806187561491e-09, -6.677806187561491e-09, -5.276761770310449e-06, -5.279624459603880e-06, -5.365936918613241e-06, -5.330588656587704e-06, -5.277455809669326e-06, -1.500526088484243e-05, -7.486264325096901e-04, -1.082618606916028e-02, -1.195288847046282e-02, -1.163160651884416e-02, -1.080024231882326e-02, -1.080024231882326e-02, -1.905940058382501e+00, -1.813339173899516e+00, -1.646027732850147e-04, -6.096977673726006e+00, -1.877484269393218e+00, -1.877484269393218e+00, -6.593473163153106e+04, -5.600191936940963e+04, -3.597027644954243e+02, -7.577002321115506e+05, -5.842021950588665e+04, -5.842021950587299e+04, -3.044231922279138e-06, -3.042186766001970e-06, -3.044016688694976e-06, -1.947749843390334e-06, -3.043191465689387e-06, -3.043191465689387e-06, -3.241258551700889e-05, -3.441027805276182e-05, -3.154560051031792e-05, -3.308260874774580e-05, -3.500831271702964e-05, -1.446264129040480e-04, -1.951133512034346e-02, -1.410840639539198e-02, -2.396203859260872e-02, -2.037722453328889e-02, -1.682351429590008e-02, -3.058544092778111e-02, -3.291791391637554e-02, -1.771825687696880e+00, -3.860284112498133e-02, -1.641935399183543e-04, -1.152629462789221e+01, -1.152629462789221e+01, -6.913000493612941e-02, -5.544019710095387e+05, -1.804735324667015e+06, -3.495407883942701e-02, -7.051133750318635e-02, -7.881102047482349e+05, -1.743344205116554e-02, -1.778995158537034e-02, -1.442199487284086e-02, -1.756256349242410e-02, -1.761182232620929e-02, -1.761182232620929e-02, -1.985498227342040e-02, -3.458571907147787e-02, -2.919694962804665e-02, -2.509722740899903e-02, -2.709034429552731e-02, -1.994273146298375e-02, -1.165370746256198e-02, -2.975805196391714e-02, -3.770956336586591e-01, -3.306753266017327e-02, -2.339828094044925e-01, -2.339828094044927e-01, -2.123596154875078e-02, -4.676621396341838e+02, -1.580084098041331e+02, -1.820816903223862e-01, -5.643227408100795e-02, -4.296542286661728e+01, -3.364206493916600e+04, -5.228910328654303e+07, -6.021975325094104e+06, -5.183868487609406e+01, -1.453286926792711e+06, -1.453286926790381e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mvs_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.032762420099639e-03, 1.032742314446069e-03, 1.032652475965140e-03, 1.032980243509553e-03, 1.032751841355557e-03, 1.032751841355557e-03, 3.521547787587767e-03, 3.523480442053647e-03, 3.582145154726651e-03, 3.558992125369351e-03, 3.522067383648898e-03, 1.022078032179160e-02, 3.518946979434045e-03, 5.294266421816871e-02, 5.420876791662060e-02, 5.387128202634346e-02, 5.291204007389819e-02, 5.291204007389819e-02, 1.926036408984969e-01, 1.903061280366854e-01, 1.331973279638030e-03, 2.420874290901595e-01, 1.919068239399568e-01, 1.919068239399568e-01, 1.107179045697861e+00, 1.080870702268638e+00, 4.734104442580926e-01, 1.402867253795612e+00, 1.092663736757360e+00, 1.092663736757105e+00, 6.843429304756706e-03, 6.842225198577333e-03, 6.843302313556366e-03, 4.359597996909357e-03, 6.842817175906832e-03, 6.842817175906832e-03, 3.843099350125989e-03, 4.166810474302144e-03, 3.708433612677844e-03, 3.953818695668441e-03, 4.257074432149291e-03, 1.801330090001295e-02, 6.132359803587773e-02, 5.649066389296725e-02, 6.458769720649016e-02, 6.197495360314324e-02, 5.907170679154742e-02, 1.062334743674305e-01, 4.787802681665828e-04, 1.868393306575846e-01, 5.401518945331370e-04, 1.856623256636611e-02, 2.801044691595956e-01, 2.801044691595956e-01, 1.148822735871643e-07, 1.375590951713942e+00, 1.885454781764775e+00, 1.225117364253619e-04, 1.323045275985480e-07, 1.479171351547442e+00, 5.948274142298113e-02, 5.980076036909860e-02, 4.864750701103718e-02, 5.959850781664466e-02, 5.964250432580263e-02, 5.964250432580263e-02, 6.145471446257970e-02, 7.076851299829452e-02, 6.778783793337213e-02, 6.522815011577611e-02, 6.650900307919601e-02, 4.857377692634650e-02, 5.387065239997283e-02, 5.821417542232478e-03, 1.286599663781171e-01, 2.264379360944448e-02, 1.142602540491242e-01, 1.142602540491242e-01, 3.143457559446402e-02, 4.875664735959734e-01, 4.129032970734299e-01, 1.072664324814421e-01, 4.388857544685348e-04, 3.530112195096703e-01, 9.092106562768634e-01, 2.661816244060661e+00, 2.101633746292412e+00, 3.697798592840169e-01, 1.674249483690133e+00, 1.674249483687443e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
