
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mvs_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.315876551521224e+01, -2.315882652852280e+01, -2.315919232849403e+01, -2.315819584152241e+01, -2.315879685133522e+01, -2.315879685133522e+01, -3.363234057486669e+00, -3.363461874772090e+00, -3.370720397308147e+00, -3.371905955677968e+00, -3.363289528225545e+00, -3.363289528225545e+00, -5.755879304974233e-01, -5.748951486130798e-01, -5.574999357476389e-01, -5.656420102112611e-01, -5.753399687396971e-01, -5.753399687396971e-01, -1.867132246826504e-01, -1.888304115014015e-01, -6.695471472902894e-01, -1.042564124708974e-01, -1.872545869445562e-01, -1.872545869445562e-01, -2.642565334276483e-03, -2.831751911256140e-03, -2.119599110431421e-02, -8.345859853521244e-04, -2.803338263088683e-03, -2.803338263088682e-03, -5.667587629981863e+00, -5.668628232680518e+00, -5.667720943826301e+00, -5.668528593384607e+00, -5.668084925368859e+00, -5.668084925368859e+00, -2.064846422923013e+00, -2.088006986256510e+00, -2.062904179914897e+00, -2.081469576632958e+00, -2.083147690156627e+00, -2.083147690156627e+00, -6.041709695872522e-01, -6.580305223895013e-01, -5.593883362453168e-01, -5.865925395093119e-01, -6.331912909153357e-01, -6.331912909153357e-01, -6.823191743404745e-02, -1.826305824022648e-01, -6.814787631879754e-02, -1.949963438598712e+00, -8.753298472001635e-02, -8.753298472001635e-02, -7.966743635783255e-04, -9.736301848323507e-04, -7.206053345172891e-04, -3.504053296734030e-02, -8.890906460044372e-04, -8.890906460044374e-04, -6.485078222752514e-01, -6.451106225175119e-01, -6.463281810662045e-01, -6.472681269984469e-01, -6.467959121694463e-01, -6.467959121694463e-01, -6.241083805170956e-01, -5.427669324939887e-01, -5.663407224594753e-01, -5.882774236333909e-01, -5.767916816450853e-01, -5.767916816450853e-01, -6.835506554102613e-01, -2.401421126962460e-01, -2.831838298346865e-01, -3.561009146205339e-01, -3.200999627002103e-01, -3.200999627002102e-01, -4.733745897163758e-01, -1.852754978230838e-02, -2.934260279103051e-02, -3.376650602072276e-01, -5.342538620758513e-02, -5.342538620758512e-02, -3.215940244014165e-03, -1.491998626117578e-04, -3.834731236487811e-04, -5.097435399310021e-02, -7.303110604714158e-04, -7.303110604714140e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mvs_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.956343014942902e+01, -2.956353551650488e+01, -2.956395142236512e+01, -2.956222261550699e+01, -2.956348622623998e+01, -2.956348622623998e+01, -5.177063985776738e+00, -5.177422599124888e+00, -5.187813385892809e+00, -5.184246202887020e+00, -5.177184738791577e+00, -5.177184738791577e+00, -8.109469589912979e-01, -8.097845177485594e-01, -7.813766445021808e-01, -7.934237395586934e-01, -8.105325336623475e-01, -8.105325336623475e-01, -2.145190356758190e-01, -2.195828411726910e-01, -9.273852854398870e-01, -1.641858756833132e-01, -2.161062104972238e-01, -2.161062104972238e-01, -4.471477360159847e-03, -5.071760695963597e-03, -4.106247220542694e-02, -1.669139928252393e-03, -4.823143754760650e-03, -4.823143754760668e-03, -7.281357121374874e+00, -7.284779278805543e+00, -7.281685496893198e+00, -7.284347809597945e+00, -7.283141711334702e+00, -7.283141711334702e+00, -2.505671121110882e+00, -2.514887248719207e+00, -2.480016532381355e+00, -2.485574976859318e+00, -2.544288839813956e+00, -2.544288839813956e+00, -8.124265620726888e-01, -9.069705787072966e-01, -7.856464183257307e-01, -8.380531336535584e-01, -8.462004837563983e-01, -8.462004837563983e-01, -1.202218798177115e-01, -1.746164683312570e-01, -1.188974043848413e-01, -2.857374073276906e+00, -1.289601603683898e-01, -1.289601603683898e-01, -1.593020050124140e-03, -1.947113935602437e-03, -1.440135898695038e-03, -6.837161022805263e-02, -1.778140393818732e-03, -1.778140393818732e-03, -8.673675556126494e-01, -8.553889034935265e-01, -8.596863381444939e-01, -8.630039606456766e-01, -8.613455299423193e-01, -8.613455299423193e-01, -8.414681650248650e-01, -6.640454823469120e-01, -7.184604430118903e-01, -7.670234767418438e-01, -7.429942068774781e-01, -7.429942068774782e-01, -9.512004861333562e-01, -2.472415072018864e-01, -3.368410498330057e-01, -4.708806505430173e-01, -4.025364258266034e-01, -4.025364258266034e-01, -6.142382468789136e-01, -3.418944994161944e-02, -5.670309563702115e-02, -4.596036921333616e-01, -9.464444683230143e-02, -9.464444683230147e-02, -6.430648657382651e-03, -2.983998126688796e-04, -7.665228238515970e-04, -9.109641632837404e-02, -1.460600494870677e-03, -1.460600494870673e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mvs_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.016589776111223e-08, -1.016582360884726e-08, -1.016567997686652e-08, -1.016691304643332e-08, -1.016585680249693e-08, -1.016585680249693e-08, -2.605891016186529e-05, -2.607100032550118e-05, -2.642359067868951e-05, -2.646984891523271e-05, -2.606044740359903e-05, -2.606044740359903e-05, -1.729311225763280e-03, -1.725584525894120e-03, -1.690793894952049e-03, -2.095944996866210e-03, -1.728468995121156e-03, -1.728468995121156e-03, -1.124049183797055e+00, -1.093830318264015e+00, -1.896289633407142e-04, 1.242367289309724e-01, -1.114688111768349e+00, -1.114688111768349e+00, -2.161685854584502e+01, 9.304768726666035e+00, 3.968460580399606e+00, 1.883924257080832e+02, -1.233085876398071e+01, -1.233085876397766e+01, -3.033048010248912e-06, -3.031143586509894e-06, -3.032988890202862e-06, -3.031499447460086e-06, -3.031889240441805e-06, -3.031889240441805e-06, -1.077023349128569e-04, -1.098414014448107e-04, -1.114954631092242e-04, -1.135278836056189e-04, -1.044845057749096e-04, -1.044845057749096e-04, -1.195467733613139e-02, -8.824861070654050e-03, -2.356501656605235e-02, -1.641281595553781e-02, -1.121090483127316e-02, -1.121090483127316e-02, 4.002031563189558e-01, -1.162569197538363e+00, 3.798485346964557e-01, -1.563592374814266e-04, -1.049195187872719e+00, -1.049195187872719e+00, 2.059115185856710e+02, 1.690258172894718e+02, 4.994607623302394e+02, 3.110993609262090e+00, 2.481383088758133e+02, 2.481383088758132e+02, -1.629997762382858e-02, -1.665362745621462e-02, -1.652541317632946e-02, -1.642773021429002e-02, -1.647599932303332e-02, -1.647599932303332e-02, -1.740479418373243e-02, -3.147722393403598e-02, -2.610686260348789e-02, -2.218474513195569e-02, -2.393287685805816e-02, -2.393287685805815e-02, -7.063698757233446e-03, -5.063887838539479e-01, -2.248954755595714e-01, -1.392603820984672e-01, -1.397073785972814e-01, -1.397073785972815e-01, -3.258205777806513e-02, 1.683293360371651e+00, 2.638919963129978e+00, -1.564518149147529e-01, 5.342137770269649e-01, 5.342137770269785e-01, 5.139568406375601e+01, 1.655305261005059e+03, 5.730937286078565e+02, 9.132963650624119e-01, 4.012635041274218e+02, 4.012635041274223e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mvs_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mvs_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.583048025258929e-03, 1.583047702459760e-03, 1.583084050626574e-03, 1.583092060422088e-03, 1.583047494503643e-03, 1.583047494503643e-03, 1.747303041554465e-02, 1.748120037403528e-02, 1.772153190710491e-02, 1.775527765521541e-02, 1.747432848981685e-02, 1.747432848981685e-02, 8.818664645898543e-03, 8.784675922826241e-03, 8.269853824327577e-03, 1.022058981390758e-02, 8.808637182627917e-03, 8.808637182627917e-03, 1.160701881887805e-01, 1.168858364784753e-01, 1.934585704260124e-03, 1.008160982889787e-02, 1.162862397918354e-01, 1.162862397918354e-01, 1.681042597395912e-03, 1.236401582789812e-03, 2.033229860357546e-03, 1.887458163481724e-07, 1.658654915396378e-03, 1.658654915396322e-03, 6.818183240684905e-03, 6.817283596658813e-03, 6.818407269173763e-03, 6.817688347844486e-03, 6.817297147924864e-03, 6.817297147924864e-03, 1.315706169060288e-02, 1.367848507298456e-02, 1.350803229945175e-02, 1.396143241795570e-02, 1.306888371697452e-02, 1.306888371697452e-02, 3.753174177906349e-02, 3.519122057837436e-02, 6.294777475838903e-02, 4.953519993307793e-02, 3.931981453431745e-02, 3.931981453431745e-02, 1.002020292479485e-02, 1.257496788612761e-01, 1.135071046279659e-02, 1.752745616413401e-02, 4.102977763260313e-02, 4.102977763260313e-02, 8.484312127927696e-07, 5.317576916446647e-07, 3.981649015164735e-06, 9.837009834478146e-04, 3.085937507625194e-07, 3.085937507626307e-07, 5.558446206648681e-02, 5.595454693618490e-02, 5.582012608049133e-02, 5.571815696176688e-02, 5.576733857354474e-02, 5.576733857354474e-02, 5.380936988448614e-02, 6.443233740006242e-02, 6.061040939588311e-02, 5.762977770573082e-02, 5.874022813805358e-02, 5.874022813805358e-02, 3.248019085703178e-02, 1.063765646517638e-01, 7.797213376747246e-02, 9.687708507769481e-02, 6.879862877791039e-02, 6.879862877791039e-02, 4.929984675583575e-02, 3.985974130119054e-03, 2.486966399014153e-03, 9.151251791064169e-02, 1.276604902909229e-02, 1.276604902909220e-02, 5.193327589744710e-06, 2.595521125463188e-09, 1.046818832908564e-06, 1.168678601971600e-02, 2.370152614014797e-07, 2.370152614015902e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
