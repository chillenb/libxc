
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_m11_l_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_m11_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.435350066175690e+01, -2.435352802297243e+01, -2.435368656293252e+01, -2.733047281882156e+01, -2.733140001770132e+01, -3.030919560587682e+01, -3.016295136926082e+00, -2.997473438855470e+00, -3.004487839934680e+00, -3.001892482083713e+00, -3.001929190536229e+00, -3.021309545154474e+00, -6.578247143092900e-01, -6.824407294044812e-01, -6.973519788502900e-01, -6.716102202854195e-01, -6.322105818757342e-01, -7.000478020988554e-01, -1.978196860994660e-01, -2.012168550800783e-01, -7.495385491156809e-01, -2.633667384067294e-01, -3.095827849907232e-01, -2.725562556259083e-01, -4.100633781781602e-02, -2.705577467439969e-02, -1.316435364564518e-01, -2.371623650216996e-02, -3.304685256365545e-02, -3.304685256365545e-02, -7.233088874522563e+00, -7.225920204176851e+00, -7.232678439661628e+00, -7.226355984234875e+00, -6.261779468527308e+00, -6.262843488735899e+00, -1.686527637579058e+00, -1.704831495123400e+00, -1.674290864802818e+00, -1.688982241146861e+00, -1.749090375876381e+00, -1.703421451418662e+00, -5.745798450396880e-01, -6.475372296677543e-01, -5.677653863094146e-01, -5.600468427213371e-01, -5.815083295846324e-01, -5.895181254759645e-01, -2.972828495175166e-01, -1.845917733951808e-01, -3.017306816783728e-01, -2.198358960424337e+00, -2.433131333087370e-01, -2.433131333087357e-01, -1.101502342133124e-02, -2.318717172619069e-02, -1.773989632952477e-02, -1.599681333154283e-01, -2.227803722079285e-02, -2.227803722079289e-02, -4.354997884125655e-01, -6.060134260271599e-01, -4.673719392603974e-01, -4.585147182138658e-01, -4.366933178413179e-01, -4.887376822582099e-01, -4.551069127976465e-01, -4.781083759306644e-01, -4.979076077487761e-01, -5.125432348644117e-01, -4.838650217173529e-01, -5.105520968832884e-01, -6.870134318523990e-01, -3.522089612044366e-01, -2.837926605184016e-01, -3.509755628492973e-01, -4.018416225598638e-01, -3.146728821958763e-01, -4.948489795932766e-01, -2.737185603380260e-02, -2.635502910912877e-01, -3.856614168160908e-01, -2.634903386866304e-01, -2.634903386866306e-01, -7.839481602740270e-03, -6.203383952041808e-03, -1.774256537177192e-03, -3.274860234605513e-02, -2.046352738737809e-02, -7.080166611723534e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_m11_l_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_m11_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.030766180589024e+01, -3.029429739136625e+01, -3.030580368436411e+01, -3.029294963339079e+01, -3.030061116199915e+01, -3.028529633682751e+01, -3.032144353072392e+01, -4.467632214498842e+01, -3.030646507390378e+01, -4.466881558916487e+01, -4.467272517899692e+01, -4.466881558916487e+01, -5.516414939715912e+00, -3.271182292020343e+00, -5.518313064744880e+00, -5.516032391272863e+00, -5.555311421620444e+00, -5.562020798511005e+00, -5.542331010409621e+00, -5.542463694907393e+00, -5.511243116358527e+00, -5.576056436522494e+00, -3.266742406898675e+00, -5.576056436522494e+00, -8.783510727055205e-01, -8.372689239168267e-01, -8.900439737897525e-01, -7.585431925502528e-01, -7.547159350550348e-01, -7.501546377102036e-01, -7.549658556109146e-01, -9.592046814894637e-01, -8.159222009196015e-01, -1.182603453277336e+00, -7.611937790731126e-01, -7.298794719221813e-01, -1.843865007511641e-01, -2.850471109047329e-01, -1.862651956477413e-01, -2.740752571426945e-01, -6.913401846461219e-01, -1.833662987693373e+00, -1.903035224436090e-01, -2.488710465596271e-01, -3.205077729912576e-01, 9.838523521176146e-02, -3.205077729912656e-01, -5.614423743060260e-03, -5.246423176831422e-02, -5.566098683022232e-02, -7.471691042691659e-03, -5.868463696132674e-02, -3.109093112784463e-02, -2.263489682198836e-01, -3.180235009911850e-02, -3.127557730484182e-02, -4.693075990109123e-02, -2.684769613897809e-02, -4.693075990109123e-02, -2.684769613897614e-02, -6.250944145742757e+00, -6.248846516743474e+00, -6.135418433234954e+00, -6.137229402823177e+00, -6.242915926237149e+00, -6.243844352323562e+00, -6.143864130384106e+00, -6.142520603217323e+00, -2.306605611082061e+00, -6.193125031939802e+00, -6.193152639905963e+00, -2.307540685685074e+00, -2.435186574439211e+00, -2.442877417724765e+00, -2.537539173233357e+00, -2.543077912439322e+00, -2.355373271385078e+00, -2.383743944656830e+00, -2.434244678177965e+00, -2.467665258207707e+00, -2.563100227830611e+00, -1.265956092868660e+00, -2.563100227830611e+00, -2.504542768728099e+00, -6.402636959356942e-01, -9.754626176042553e-01, -1.151672837713031e+00, -1.176407889066794e+00, -5.526773438252059e-01, -5.701260580755505e-01, -5.598119656208439e-01, -6.250329664050950e-01, -7.537656491962268e-01, -9.638636015178282e-01, -7.537656491962214e-01, -6.291113201004318e-01, 8.969168160623875e-02, 9.056429574992329e-02, -1.758840236341592e-01, -3.581676912423383e-01, 5.716994382227304e-02, 8.138892933962284e-02, -4.109081291122526e+00, -4.107066957368996e+00, -1.172954216460021e-02, -1.579143128520825e-01, -1.172954216458996e-02, -1.579143128520785e-01, -3.253304415595517e-03, -2.484052901467485e-02, -3.061071879594328e-02, -3.107800923435304e-02, -2.284479764923941e-02, -2.417093820572175e-02, -1.416919990867713e-01, -2.450129273540464e-02, -2.340230798740914e-02, -3.195790215489275e-02, -2.340230798741221e-02, -3.195790215489357e-02, -7.620284408970633e-02, -8.030110057320181e-02, -4.351088477357526e-01, -4.086088424655978e-01, 1.177592378586056e-02, 2.563388170726179e-02, 7.112172284766720e-02, -9.916770426672328e-02, 5.075682975471584e-02, 5.911673723785076e-02, 5.075682975471568e-02, -1.471928203678844e-01, -7.737497991050310e-02, -7.525215096119009e-02, -4.364224294629476e-01, -7.908633093086380e-01, -5.103568414660981e-01, -8.222770591605040e-01, -9.895418780016200e-01, -9.993092565190085e-01, -7.062949286152170e-01, -7.220343907240568e-01, -7.062949286152135e-01, -8.555762115949833e-01, -1.058448876882643e+00, -1.100968942939989e+00, -3.567794925958250e-01, -3.557582457288047e-01, -3.234135853625282e-01, -3.258079266105479e-01, -4.463271956654556e-01, -3.237015574419416e-01, -3.116771903488203e-01, -3.106635121988813e-01, -3.116771903488166e-01, -3.350979811432496e-01, -4.202254461689069e-01, -4.156512063821770e-01, -3.063354915613601e-02, -3.080609977259625e-02, -2.299896769505890e-01, -2.219740325847157e-01, -2.472155523663922e-01, -1.760525295335355e-01, 2.409827184050749e-02, 6.075413124225770e-02, 2.409827184050419e-02, 6.075413124228709e-02, -1.016203703866616e-02, -1.051848545332677e-02, -8.260294482784390e-03, -8.279169412166342e-03, -2.284182766779884e-03, -2.428696641927344e-03, -1.307663736194318e-02, -1.081480483094957e-02, -2.214239695463149e-02, -2.932518662811393e-02, -2.214239695463090e-02, -3.992264857659621e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_m11_l_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_m11_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-8.519119966370112e-08, 0.000000000000000e+00, -8.523498482802508e-08, -8.519647109793447e-08, 0.000000000000000e+00, -8.523880788522852e-08, -8.521073660931880e-08, 0.000000000000000e+00, -8.525998591255564e-08, -8.515170306553583e-08, 0.000000000000000e+00, -6.618261776242971e-08, -8.519463927326576e-08, 0.000000000000000e+00, -6.620688186801778e-08, -6.619186293939348e-08, 0.000000000000000e+00, -6.620688186801778e-08, -2.073501989790259e-06, 0.000000000000000e+00, 6.297700403054925e-06, -2.083159447531654e-06, 0.000000000000000e+00, -2.072056922759582e-06, -2.271974494213656e-06, 0.000000000000000e+00, -2.305838329204663e-06, -2.202044807684292e-06, 0.000000000000000e+00, -2.202125632337795e-06, -2.053905793764026e-06, 0.000000000000000e+00, -2.373049134571594e-06, 6.337710589995617e-06, 0.000000000000000e+00, -2.373049134571594e-06, 4.511091303069104e-04, 0.000000000000000e+00, 2.701139894356682e-04, 4.660443988682788e-04, 0.000000000000000e+00, -4.927527173063308e-03, -5.537097602392799e-03, 0.000000000000000e+00, -5.718483204911002e-03, -5.449882906531052e-03, 0.000000000000000e+00, 7.487936447034026e-05, 3.449543663696126e-04, 0.000000000000000e+00, -4.166570189573045e-03, -4.740551941590241e-03, 0.000000000000000e+00, -6.332626591882169e-03, -2.576642896939042e+01, 0.000000000000000e+00, -1.736147378736157e+00, -2.418074230060516e+01, 0.000000000000000e+00, -1.905071522335284e+00, -1.979804301483447e-03, 0.000000000000000e+00, -3.938718582254148e-04, -1.273944822939676e+00, 0.000000000000000e+00, -3.705308295963718e-01, -1.007743481383924e+00, 0.000000000000000e+00, -1.811231444861872e+01, -1.007743481383919e+00, 0.000000000000000e+00, -4.312142466678649e+02, -1.100536806566733e+02, 0.000000000000000e+00, -1.104845931463963e+02, -2.573094736853282e+07, 0.000000000000000e+00, -1.155646457033207e+02, -2.714173107800035e+04, 0.000000000000000e+00, -5.501635615127871e+01, -8.057416314060855e+01, 0.000000000000000e+00, -8.139920995753263e+01, -1.045479314920550e+02, 0.000000000000000e+00, -1.789549166704331e+02, -1.045479314920550e+02, 0.000000000000000e+00, -1.789549166704332e+02, -3.759927548633319e-05, 0.000000000000000e+00, -3.763785383372205e-05, -3.819506396312094e-05, 0.000000000000000e+00, -3.821414769882103e-05, -3.764074551329667e-05, 0.000000000000000e+00, -3.766374263467859e-05, -3.815155913553579e-05, 0.000000000000000e+00, -3.818687566781528e-05, -4.555119276606484e-05, 0.000000000000000e+00, -3.792507886918866e-05, -3.789669480187678e-05, 0.000000000000000e+00, -4.558598471913942e-05, -5.539168200350696e-07, 0.000000000000000e+00, -1.308420932121136e-06, -7.698291874261839e-06, 0.000000000000000e+00, -8.303755222838231e-06, 5.316956012619837e-06, 0.000000000000000e+00, 3.034797821358095e-06, -4.031875260688891e-07, 0.000000000000000e+00, -3.001397890285331e-06, -9.552925942191495e-06, 0.000000000000000e+00, 1.308208806148303e-04, -9.552925942191495e-06, 0.000000000000000e+00, -5.685343869102396e-06, -1.169009887509364e-02, 0.000000000000000e+00, -9.414288005687612e-03, 1.495269023678759e-02, 0.000000000000000e+00, 1.459884609334413e-02, -3.773321949647341e-02, 0.000000000000000e+00, -2.947365922827285e-02, -1.778568221436704e-02, 0.000000000000000e+00, -4.742175320750488e-03, 4.893597626568571e-04, 0.000000000000000e+00, -7.292398827769143e-03, 4.893597626568746e-04, 0.000000000000000e+00, -9.351048212052892e-03, -2.177263784307299e+01, 0.000000000000000e+00, -2.104991588829903e+01, -2.600130051271766e+01, 0.000000000000000e+00, -7.296097135619570e-04, -2.902399211273394e+01, 0.000000000000000e+00, -2.573635505632503e+01, -2.632668608761354e-04, 0.000000000000000e+00, -2.640171256443363e-04, -9.986977165903772e+00, 0.000000000000000e+00, -3.407514648838257e+00, -9.986977165903772e+00, 0.000000000000000e+00, -3.407514648838195e+00, -7.501021787741187e+08, 0.000000000000000e+00, -5.392687370681730e+01, -7.642872060488219e+01, 0.000000000000000e+00, -6.736977937813397e+01, -5.503048461378072e+02, 0.000000000000000e+00, -6.040675264144201e+02, -5.186451327704093e+01, 0.000000000000000e+00, -3.440405870351019e+03, -1.036964811592828e+02, 0.000000000000000e+00, -3.293087414065338e+02, -1.036964811592830e+02, 0.000000000000000e+00, -3.293087414065336e+02, -4.720202694857984e-01, 0.000000000000000e+00, -4.809207899735665e-01, -1.570207220609545e-01, 0.000000000000000e+00, -1.652809428493028e-01, -2.614198677551386e-01, 0.000000000000000e+00, -2.713297687914149e-01, -3.548124150977753e-01, 0.000000000000000e+00, -3.393682093344396e-01, -3.056191114454984e-01, 0.000000000000000e+00, -3.148606197050090e-01, -3.056191114454984e-01, 0.000000000000000e+00, -2.922461190039231e-01, -4.373282725647407e-01, 0.000000000000000e+00, -4.493560564282889e-01, -4.685557314351758e-02, 0.000000000000000e+00, -6.436473997798674e-02, 1.187101369057169e-02, 0.000000000000000e+00, 3.334399191884997e-02, 6.803851900703496e-02, 0.000000000000000e+00, 6.657355417469335e-02, 4.731244668291123e-02, 0.000000000000000e+00, 4.790656834493776e-02, 4.731244668291117e-02, 0.000000000000000e+00, 7.534125458599177e-02, 6.364296420591034e-03, 0.000000000000000e+00, 1.343364335522058e-02, -4.336192264675450e-01, 0.000000000000000e+00, -4.403302701255021e-01, -2.774955802120568e+00, 0.000000000000000e+00, -4.683615845001439e-01, -6.756747348296214e-01, 0.000000000000000e+00, -2.764044029895692e-01, -4.130800292762883e-01, 0.000000000000000e+00, -4.176754927336270e-01, -4.130800292762890e-01, 0.000000000000000e+00, -1.361285987670431e+00, -8.465872937540013e-02, 0.000000000000000e+00, -8.149007035018090e-02, -2.925255164140032e+04, 0.000000000000000e+00, -2.847230954019032e+04, -4.637184495028696e+01, 0.000000000000000e+00, -4.790229008751198e+01, -3.787567597593966e-01, 0.000000000000000e+00, -3.097232201476999e-01, -4.954268770642218e+01, 0.000000000000000e+00, -4.725429279246256e+01, -4.954268770642209e+01, 0.000000000000000e+00, -4.725429279246256e+01, -7.414310773319153e+06, 0.000000000000000e+00, -6.430296525897287e+06, -8.785689637995357e+01, 0.000000000000000e+00, -8.747060710523075e+01, -3.086330709386976e+09, 0.000000000000000e+00, -2.411892818156672e+09, -1.727810056749556e+03, 0.000000000000000e+00, -1.608741299343717e+03, -2.676160301476161e+02, 0.000000000000000e+00, -3.414015676900673e+02, -2.676160301476165e+02, 0.000000000000000e+00, -3.244690573950217e+08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_m11_l_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_m11_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.279825679573829e-03, -1.287697274166728e-03, -1.280976736834032e-03, -1.288532439216399e-03, -1.284225921334087e-03, -1.293312182237779e-03, -1.271317063555536e-03, 1.063139054875942e-02, -1.280563921335648e-03, 1.062952267987892e-02, 1.063005760739635e-02, 1.062952267987892e-02, 1.288286097678761e-02, -5.870992728966759e-03, 1.290257940189559e-02, 1.287974934957263e-02, 1.328836704917530e-02, 1.335778037488777e-02, 1.314662350139017e-02, 1.314698897850234e-02, 1.284070956126134e-02, 1.349694243074111e-02, -5.901144563363128e-03, 1.349694243074111e-02, -4.231645212233744e-03, -8.499934904032893e-03, -2.988070806600278e-03, 7.183469296399750e-03, 1.013763965047039e-02, 1.044587180871482e-02, 9.473774130562140e-03, 4.916316828608027e-03, -1.120706633841864e-02, 2.861520155232146e-02, 6.603594062842178e-03, 1.098624096982987e-02, 5.535257296174357e-02, 3.997039845432194e-02, 5.308060485959686e-02, 4.364255796660890e-02, -2.750837412680393e-04, 3.727918935203054e-02, -5.184298232092791e-02, -4.225597628256532e-02, 2.800130646961955e-02, -5.809645184958865e-02, 2.800130646962051e-02, -2.079123083794364e-02, -7.936016720022883e-05, -9.556018140958696e-05, -4.665095501517323e-05, -1.177788844577188e-04, -3.382114708035937e-03, -8.760288356817386e-03, -1.264563631369196e-05, -1.214729212368525e-05, -5.355816302434769e-05, -1.691110403535649e-05, -5.355816302434769e-05, -1.691110403662700e-05, 1.736149485689698e-02, 1.736090665175063e-02, 1.655094471134951e-02, 1.657750798101041e-02, 1.730556217127706e-02, 1.732605292013869e-02, 1.661060214798845e-02, 1.661490186263564e-02, -6.850787071889017e-02, 1.697088468671577e-02, 1.695710197542885e-02, -6.850195887698739e-02, 4.758368141518936e-03, 4.981230648052008e-03, 7.083184852460571e-03, 7.265799667362170e-03, 2.974821699310402e-03, 3.645565382824109e-03, 4.716844595285445e-03, 5.524958980963072e-03, 7.701424836640160e-03, -2.235725043134969e-02, 7.701424836640160e-03, 6.389283424964726e-03, -3.859449593974953e-02, 9.731422945406136e-02, 9.418017138674872e-02, 1.139081580641802e-01, 1.778265849317029e-02, -2.529647318163152e-03, -4.931893075649271e-02, -6.663472490873075e-02, -4.569261595358989e-02, 9.710448272573670e-02, -4.569261595359149e-02, -5.091495659393873e-02, -5.949581587534145e-02, -5.998013311525906e-02, 5.023762229609881e-02, -1.079451376752619e-02, -5.261752922692683e-02, -5.786885906853616e-02, 7.763733157611105e-02, 7.768922326224485e-02, -6.547708825603153e-02, -5.469749794559204e-02, -6.547708825603261e-02, -5.469749794559377e-02, -1.916418903751411e-06, -4.012409637546374e-06, -1.068571484650707e-05, -9.853965402473572e-06, -3.213995809729556e-05, -4.189183948229838e-05, -2.924097143337263e-02, -1.423316891361816e-02, -6.459529964808589e-06, -5.303910880414008e-05, -6.459529964461851e-06, -5.303910880370492e-05, -7.958775916377855e-01, -7.546465988216551e-01, -4.058168606310334e-01, -4.392993556351400e-01, -1.426299026340855e+00, -1.458631927662754e+00, -1.635897128757767e+00, -8.855340977408155e-01, -1.549607041414584e+00, -1.569796083557847e+00, -1.549607041414584e+00, -8.208556027182413e-01, -9.374440016941037e-01, -9.189483839940326e-01, -4.367502979329681e-02, 9.716051740119443e-02, -1.398110267660894e-01, 8.803568456750685e-02, 9.713949032967376e-02, 1.040973429274173e-01, -9.210375609243504e-02, -8.485591656277298e-02, -9.210375609242848e-02, 9.680540420041883e-02, 2.149882994081847e-02, 7.824278617259088e-02, 2.167773264094207e-02, 2.237712583854421e-02, 2.630885436341013e-02, 3.462520444207497e-02, 3.774543335799229e-02, 2.951987641492077e-02, 3.959353812696007e-02, 3.992187833420619e-02, 3.959353812696180e-02, 1.372549072775682e-03, 5.431210880037452e-03, -2.518520727663536e-03, -3.367812437615115e-03, -3.367792728014500e-03, -1.412086260936765e-02, -1.593804282513104e-02, -2.163848110001695e-02, -1.373576850730810e-01, -5.194173500528623e-02, -6.171803862745817e-02, -5.194173500530411e-02, -6.171803862746154e-02, -5.516992981629406e-05, -6.047612139741263e-05, -2.393355288476520e-07, -2.399207896987116e-07, -2.757267535883257e-06, -3.514053872502509e-06, -2.232548747082519e-02, -2.412741159699672e-02, -1.416129738425163e-05, -4.235421124308158e-05, -1.416129738529847e-05, -2.090125440527152e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
