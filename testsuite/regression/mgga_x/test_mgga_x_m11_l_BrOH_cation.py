
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_m11_l_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_m11_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.997069599467022e+01, -2.997094849561876e+01, -2.997220692908480e+01, -2.996846759807256e+01, -2.997040787338988e+01, -2.997040787338988e+01, -2.991062404674658e+00, -2.991163840332752e+00, -2.993984457591052e+00, -2.992985073634753e+00, -2.992901052330178e+00, -2.992901052330178e+00, -6.661275902972574e-01, -6.655679266516979e-01, -6.490043021442446e-01, -6.578598370786414e-01, -6.574631673088671e-01, -6.574631673088671e-01, -3.002939522569537e-01, -3.010882203395365e-01, -6.758677074590302e-01, -2.624789571978258e-01, -2.985350935320664e-01, -2.985350935320655e-01, -4.100518701736670e-02, -4.315510864204214e-02, -2.136773234991346e-01, -2.371339027333295e-02, -3.304315481492709e-02, -3.304315481492709e-02, -7.221776194752580e+00, -7.214565477587170e+00, -7.221591344203425e+00, -7.215224828924059e+00, -7.218110440793544e+00, -7.218110440793544e+00, -1.687591841778977e+00, -1.704011513219970e+00, -1.676207559911740e+00, -1.689361562907941e+00, -1.702689133736959e+00, -1.702689133736959e+00, -5.761770238897195e-01, -6.680594673719406e-01, -5.267307118318432e-01, -5.453714764547060e-01, -5.865383523282539e-01, -5.865383523282539e-01, -2.740965213845260e-01, -3.074560752322553e-01, -2.768001223237795e-01, -2.030831258660132e+00, -2.378579718385874e-01, -2.378579718385860e-01, -1.831611126607359e-02, -2.318116230546267e-02, -1.773618741655136e-02, -2.697562893691986e-01, -2.227454607941321e-02, -2.227454607941325e-02, -3.866263688289100e-01, -5.902656542463993e-01, -5.384670341115312e-01, -4.776367325142875e-01, -5.100224946680714e-01, -5.100224946680726e-01, -3.755075240031420e-01, -5.064995304841845e-01, -4.876344530806350e-01, -5.208791460188782e-01, -4.892047172552435e-01, -4.892047172552424e-01, -6.903828165817714e-01, -3.499491617244239e-01, -3.743924740742975e-01, -3.885551091087226e-01, -3.830551792843203e-01, -3.830551792843210e-01, -4.755085437447126e-01, -2.072261381623166e-01, -2.578542358607169e-01, -3.570521092036782e-01, -2.467714838763615e-01, -2.467714838763619e-01, -5.765132855544175e-02, -6.202677732111443e-03, -1.303742680263433e-02, -2.507768781749108e-01, -2.045992924905500e-02, -2.045992924905483e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_m11_l_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_m11_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-4.376418750885986e+01, -4.375666822909655e+01, -4.376278372268906e+01, -4.375564967278939e+01, -4.375933869481462e+01, -4.375041798982773e+01, -4.377508932523611e+01, -4.377053131295249e+01, -4.376326927380159e+01, -4.376327034802708e+01, -4.376326927380159e+01, -4.376327034802708e+01, -4.596332462671664e+00, -4.593050012024610e+00, -4.598528157110806e+00, -4.594334556522844e+00, -4.639795196262990e+00, -4.646879203699331e+00, -4.631705308385136e+00, -4.630402045488171e+00, -4.590837928506400e+00, -4.668004061683179e+00, -4.590837928506400e+00, -4.668004061683179e+00, -8.535639328403968e-01, -8.356981453500949e-01, -8.577972980809287e-01, -8.384084996506594e-01, -8.973637322716516e-01, -8.892280957631493e-01, -8.691747617256964e-01, -8.611616468971121e-01, -8.295830147951195e-01, -8.213310114839203e-01, -8.295830147951195e-01, -8.213310114839203e-01, -2.865151397964014e-01, -2.743531663950100e-01, -2.740252572037321e-01, -2.601374457494220e-01, -1.099389175578836e+00, -1.404207644246305e+00, -2.616187861058022e-01, -2.775320316554545e-01, -2.861359027761111e-01, -2.120130011833327e-02, -2.861359027761174e-01, -2.120130011833886e-02, -5.245796748428505e-02, -5.565778353906720e-02, -5.488453358664218e-02, -5.867617406671443e-02, -2.174952638078076e-01, -2.177863912132771e-01, -3.178976051236845e-02, -3.126547234786788e-02, -4.691741378258115e-02, -2.682517895769945e-02, -4.691741378258115e-02, -2.682517895769750e-02, -6.224791171632036e+00, -6.224196864823691e+00, -6.109362581762969e+00, -6.112684237921323e+00, -6.217364225841290e+00, -6.219627730902359e+00, -6.118376634302699e+00, -6.118379371794956e+00, -6.166595934943322e+00, -6.168451704988142e+00, -6.166595934943322e+00, -6.168451704988142e+00, -2.382339740194781e+00, -2.391031465068128e+00, -2.485358964074934e+00, -2.492170408640745e+00, -2.320031319653164e+00, -2.344127288765579e+00, -2.398246465194377e+00, -2.428318810359690e+00, -2.497264268757768e+00, -2.451080186420873e+00, -2.497264268757768e+00, -2.451080186420873e+00, -7.516962472411237e-01, -7.474577945294847e-01, -1.076223944903169e+00, -1.078397411309978e+00, -6.151825163402527e-01, -6.817220807022542e-01, -8.218739204616230e-01, -8.533613914885608e-01, -8.393133327403532e-01, -7.513157346275370e-01, -8.393133327403485e-01, -7.513157346275326e-01, 6.222440643122865e-02, 5.567486451977879e-02, -3.467484035039753e-01, -3.465441441625936e-01, 6.372197511464520e-02, 6.552122745537382e-02, -3.831314722387237e+00, -3.829030241879472e+00, -6.981776795597004e-02, -1.938318042319890e-01, -6.981776795595977e-02, -1.938318042319848e-01, -2.388412992755637e-02, -2.482110979358267e-02, -3.058772886510703e-02, -3.105299517691699e-02, -2.283213117317980e-02, -2.415430090612316e-02, -8.738493919479016e-02, -8.527313392044326e-02, -2.336597691350536e-02, -3.195258572264768e-02, -2.336597691350841e-02, -3.195258572264849e-02, -3.427629647200552e-02, -4.158521583806554e-02, -3.707838321915862e-01, -3.455870320142648e-01, -1.682878253901068e-01, -1.489355899944955e-01, -5.047962321973779e-02, -4.280863710834168e-02, -1.007162688213118e-01, -8.709384582785852e-02, -1.007162688213118e-01, -8.709384582787209e-02, 2.187684793507524e-02, 1.712777840306986e-02, -4.483138426644116e-01, -4.501662656704369e-01, -5.346485194170503e-01, -5.487319959608586e-01, -9.792183959615776e-01, -9.877331219070817e-01, -7.254622815966033e-01, -7.395873666191354e-01, -7.254622815965995e-01, -7.395873666191278e-01, -1.097101835874825e+00, -1.109908605432541e+00, -3.417826119635429e-01, -3.402725754213957e-01, -3.027671090173608e-01, -2.998198103568001e-01, -3.187949913892860e-01, -3.212074581264323e-01, -2.857083127611213e-01, -2.848790277484129e-01, -2.857083127611192e-01, -2.848790277484244e-01, -4.458514273910865e-01, -4.458780737647064e-01, -2.193779211698052e-01, -2.198849092429020e-01, -2.096429120653865e-01, -2.003321331081882e-01, -3.053516445586258e-01, -2.531821688747610e-01, 4.162839297866901e-02, 5.159570222487120e-02, 4.162839297866536e-02, 5.159570222490078e-02, -7.440413820460416e-02, -7.697039496580724e-02, -8.258129836334886e-03, -8.275689194773785e-03, -1.677978023761874e-02, -1.784086697469411e-02, 3.480409400998246e-02, 4.281272480792701e-02, -2.210429749927897e-02, -2.932091056905994e-02, -2.210429749927838e-02, -2.932091056905755e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_m11_l_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_m11_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.725737808531881e-08, 0.000000000000000e+00, -6.729096922492033e-08, -6.726192958097527e-08, 0.000000000000000e+00, -6.729427067131817e-08, -6.727377355559245e-08, 0.000000000000000e+00, -6.731201088845462e-08, -6.722277467918333e-08, 0.000000000000000e+00, -6.724686124354900e-08, -6.726035581650728e-08, 0.000000000000000e+00, -6.727086892536653e-08, -6.726035581650728e-08, 0.000000000000000e+00, -6.727086892536653e-08, 1.576989252889530e-06, 0.000000000000000e+00, 1.596719890864499e-06, 1.559396106001425e-06, 0.000000000000000e+00, 1.585783533259069e-06, 1.223295550635155e-06, 0.000000000000000e+00, 1.164547088372451e-06, 1.321623688133068e-06, 0.000000000000000e+00, 1.326382224741216e-06, 1.615719222974822e-06, 0.000000000000000e+00, 1.023649060770787e-06, 1.615719222974822e-06, 0.000000000000000e+00, 1.023649060770787e-06, -3.101842675264705e-03, 0.000000000000000e+00, -3.024948689441457e-03, -3.156411325232736e-03, 0.000000000000000e+00, -3.031862694849034e-03, -4.321813760454418e-03, 0.000000000000000e+00, -4.833148933707799e-03, -4.226127525164310e-03, 0.000000000000000e+00, -4.108487780849571e-03, -2.712054729992059e-03, 0.000000000000000e+00, -6.707611887384749e-03, -2.712054729992059e-03, 0.000000000000000e+00, -6.707611887384749e-03, -1.647754471829820e+00, 0.000000000000000e+00, -1.920264048411813e+00, -1.891489405586997e+00, 0.000000000000000e+00, -2.148316478871731e+00, -6.351551858304426e-03, 0.000000000000000e+00, -1.516004783695869e-03, 3.558076721426111e-01, 0.000000000000000e+00, 3.493195428219675e-01, -1.492507727469669e+00, 0.000000000000000e+00, -1.555855534705345e+01, -1.492507727469665e+00, 0.000000000000000e+00, -1.555855534705345e+01, -1.127607815616680e+02, 0.000000000000000e+00, -1.116367538729832e+02, -1.188141804089208e+02, 0.000000000000000e+00, -1.182142179783224e+02, -6.683257476259612e+01, 0.000000000000000e+00, -6.725542285835986e+01, -1.032570649627202e+02, 0.000000000000000e+00, -1.004533607113563e+02, -1.125630403861305e+02, 0.000000000000000e+00, -2.855254845385722e+02, -1.125630403861308e+02, 0.000000000000000e+00, -2.855254845385729e+02, -3.764506675665252e-05, 0.000000000000000e+00, -3.768106430240011e-05, -3.824105595097685e-05, 0.000000000000000e+00, -3.825751287674933e-05, -3.768550873142339e-05, 0.000000000000000e+00, -3.770620859089087e-05, -3.819652082765781e-05, 0.000000000000000e+00, -3.822951108029849e-05, -3.794338157616947e-05, 0.000000000000000e+00, -3.796849980694347e-05, -3.794338157616947e-05, 0.000000000000000e+00, -3.796849980694347e-05, 1.093420057314813e-05, 0.000000000000000e+00, 9.647440596804232e-06, 5.573691958685293e-07, 0.000000000000000e+00, -3.863924471006140e-07, 1.631142431849049e-05, 0.000000000000000e+00, 1.373676405454178e-05, 7.706988320768387e-06, 0.000000000000000e+00, 4.818794309124288e-06, 4.184935616919104e-09, 0.000000000000000e+00, 3.580554920599856e-06, 4.184935616919104e-09, 0.000000000000000e+00, 3.580554920599856e-06, -1.174110852447280e-02, 0.000000000000000e+00, -1.020861274622283e-02, 1.999381605908387e-02, 0.000000000000000e+00, 1.932852567813692e-02, -5.011385381038033e-02, 0.000000000000000e+00, -3.544987709388846e-02, -1.954844735871119e-02, 0.000000000000000e+00, -1.189440890813310e-03, 2.261133096170895e-03, 0.000000000000000e+00, -8.702028502744206e-03, 2.261133096170926e-03, 0.000000000000000e+00, -8.702028502744182e-03, -2.214960809503825e+01, 0.000000000000000e+00, -2.112654946000390e+01, -6.955521203903889e-02, 0.000000000000000e+00, -8.385725120474026e-02, -3.297390391700647e+01, 0.000000000000000e+00, -2.706110472781423e+01, -3.260815551142483e-04, 0.000000000000000e+00, -3.270013896908304e-04, -7.917503052034385e+00, 0.000000000000000e+00, -1.833555468397867e+00, -7.917503052034388e+00, 0.000000000000000e+00, -1.833555468397826e+00, -1.449435525984089e+02, 0.000000000000000e+00, -1.254552368127447e+02, -1.248156970462653e+02, 0.000000000000000e+00, -1.152409284941100e+02, -7.108278136473106e+02, 0.000000000000000e+00, -7.907407763754420e+02, -7.462154350960806e+01, 0.000000000000000e+00, -7.181419498433752e+01, -3.535189965992576e+02, 0.000000000000000e+00, -3.472320136676530e+02, -3.535189965992570e+02, 0.000000000000000e+00, -3.472320136676524e+02, -4.828792367413501e-01, 0.000000000000000e+00, -4.916863307619662e-01, -1.603379933317782e-01, 0.000000000000000e+00, -1.687004452188898e-01, -2.459514990146098e-01, 0.000000000000000e+00, -2.555865537852799e-01, -3.385329554309032e-01, 0.000000000000000e+00, -3.468285444625568e-01, -2.895319196371979e-01, 0.000000000000000e+00, -2.986083111090754e-01, -2.895319196371979e-01, 0.000000000000000e+00, -2.986083111090754e-01, -4.575192064102412e-01, 0.000000000000000e+00, -4.693812912610431e-01, -4.770808606709908e-02, 0.000000000000000e+00, -4.553059312629967e-02, 1.312622734706287e-02, 0.000000000000000e+00, 1.596801386810498e-02, 7.181413854209687e-02, 0.000000000000000e+00, 7.024674023589408e-02, 5.028215917501345e-02, 0.000000000000000e+00, 5.077691081742559e-02, 5.028215917501339e-02, 0.000000000000000e+00, 5.077691081742568e-02, 1.022119419868868e-02, 0.000000000000000e+00, 1.153168424418617e-02, -5.060283501369001e-01, 0.000000000000000e+00, -5.145824027988674e-01, -5.632337274521142e-01, 0.000000000000000e+00, -5.670189574267067e-01, -3.735726290493332e-01, 0.000000000000000e+00, -3.654344653877963e-01, -5.090635126780654e-01, 0.000000000000000e+00, -5.147986876166964e-01, -5.090635126780657e-01, 0.000000000000000e+00, -5.147986876166967e-01, -9.694495859719383e-02, 0.000000000000000e+00, -9.180783030689543e-02, -6.109865778192128e+01, 0.000000000000000e+00, -6.118567443122009e+01, -6.058966505210411e+01, 0.000000000000000e+00, -6.188299020412622e+01, -4.956237330680632e-01, 0.000000000000000e+00, -3.626034710055310e-01, -5.658902644421739e+01, 0.000000000000000e+00, -4.952449842977223e+01, -5.658902644421731e+01, 0.000000000000000e+00, -4.952449842977230e+01, -8.942549995253484e+01, 0.000000000000000e+00, -9.129916904618426e+01, -4.459185174707928e+02, 0.000000000000000e+00, -7.898767910319012e+02, -2.752166284850892e+02, 0.000000000000000e+00, -2.929867652746249e+02, -6.513413898682984e+01, 0.000000000000000e+00, -6.195632187724121e+01, -7.288116098990749e+02, 0.000000000000000e+00, -3.604670322597383e+02, -7.288116098990765e+02, 0.000000000000000e+00, -3.604670322597390e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_m11_l_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_m11_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([9.962284868930676e-03, 9.962236159066299e-03, 9.961910994476490e-03, 9.961964609119488e-03, 9.961161700417885e-03, 9.960765055361831e-03, 9.965370283613394e-03, 9.966135493987182e-03, 9.962039185286866e-03, 9.964319144064466e-03, 9.962039185286866e-03, 9.964319144064466e-03, 4.373379914923765e-03, 4.344407118828330e-03, 4.394177233266545e-03, 4.356762990201784e-03, 4.787792684918537e-03, 4.855415923781131e-03, 4.698961103604411e-03, 4.687413387256783e-03, 4.329029703003326e-03, 5.045996483789062e-03, 4.329029703003326e-03, 5.045996483789062e-03, 2.685173603446585e-03, 3.376682970848158e-04, 3.356101324140338e-03, 6.810612675524574e-04, 1.114276403426425e-02, 1.209151448806182e-02, 8.702589610596875e-03, 7.519702309472096e-03, -1.611389816150642e-03, 1.315115737256458e-02, -1.611389816150642e-03, 1.315115737256458e-02, 2.833821386719543e-02, 3.976921694384963e-02, 3.124629295534501e-02, 4.334892887606037e-02, 1.696870458128021e-02, 2.200625412165822e-02, -5.193973903983136e-02, -4.299838398485099e-02, 2.732074875454761e-02, -5.218093300016860e-02, 2.732074875454831e-02, -5.218093300016683e-02, -7.935923258234203e-05, -9.555963918592957e-05, -9.464274008090116e-05, -1.177772109251741e-04, -7.166177369481377e-03, -8.729504919843274e-03, -1.264514142268189e-05, -1.214690413242458e-05, -5.355665958723519e-05, -1.690970319081061e-05, -5.355665958723519e-05, -1.690970319208111e-05, 1.685131665571580e-02, 1.687981371466793e-02, 1.603699100545267e-02, 1.609329084484612e-02, 1.680673566243643e-02, 1.685318902486685e-02, 1.610827353457455e-02, 1.613889983316602e-02, 1.643615979053390e-02, 1.648674473900737e-02, 1.643615979053390e-02, 1.648674473900737e-02, 2.636174640292105e-03, 2.916053242822092e-03, 5.176725671596698e-03, 5.410741847344818e-03, 1.299164225107126e-03, 1.890077278004676e-03, 3.223851346230320e-03, 3.968320048569718e-03, 5.370869052331246e-03, 4.388386650576206e-03, 5.370869052331246e-03, 4.388386650576206e-03, 5.378225003056615e-03, 7.843732956539922e-04, 8.193500514206449e-02, 8.549166980122649e-02, 2.811498686216705e-02, 3.030252853625226e-02, 5.950225211024057e-02, 4.674786555307377e-02, -3.490137012182367e-03, 1.767286445124896e-03, -3.490137012183968e-03, 1.767286445127765e-03, -5.695854274205028e-02, -5.717977570947798e-02, -1.223757158323243e-02, -1.188787802208425e-02, -5.021575660315229e-02, -5.546001714342785e-02, 5.829349274171371e-02, 5.830201989792318e-02, -6.358187217662456e-02, -5.419003445018280e-02, -6.358187217662555e-02, -5.419003445018458e-02, -3.883837540056146e-06, -4.012099373478144e-06, -1.068492135047997e-05, -9.853181080969974e-06, -3.213820062628151e-05, -4.188899732028730e-05, -2.854126205890638e-02, -3.188311218124025e-02, -6.458538519953412e-06, -5.303823939893786e-05, -6.458538519606683e-06, -5.303823939850269e-05, -1.113025690400942e+00, -1.069625306535936e+00, -5.435329410088349e-01, -5.781602705411818e-01, -8.832078801175668e-01, -9.115073757480265e-01, -1.117712912322285e+00, -1.122530717051968e+00, -1.013764056860930e+00, -1.031610124793787e+00, -1.013764056860930e+00, -1.031610124793775e+00, -1.515795291794237e+00, -1.490980768587901e+00, -3.854154024236098e-02, -4.168251418960162e-02, -1.232929860446668e-01, -1.220898157720909e-01, 1.013721912424082e-01, 1.071479201382902e-01, -7.177237393360549e-02, -6.568233827702211e-02, -7.177237393359887e-02, -6.568233827702286e-02, 6.235967800450586e-02, 6.659831510779478e-02, 2.136205868003096e-02, 2.206954373633723e-02, 3.332234647359680e-02, 3.390202785593067e-02, 3.129843061944904e-02, 3.094052424110641e-02, 3.592899433726501e-02, 3.624236008413671e-02, 3.592899433726662e-02, 3.624236008413600e-02, 1.437836818750695e-02, 8.807259060775145e-03, -7.135539347377847e-03, -7.139048006359793e-03, -1.401169258228811e-02, -1.580691956696779e-02, 1.887958673311189e-02, -7.245968604758725e-02, -5.045769556581484e-02, -5.981090118901025e-02, -5.045769556583263e-02, -5.981090118901351e-02, -1.120868159159159e-04, -1.228893035606496e-04, -2.393293261727830e-07, -2.399108155901077e-07, -5.586993887818835e-06, -7.120465536704206e-06, -5.117100382723191e-02, -5.603564680688090e-02, -1.415889070538747e-05, -4.235360240997399e-05, -1.415889070643437e-05, -4.235360241213340e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
