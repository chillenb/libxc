
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ms0_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.283883688969086e+01, -2.283888899830153e+01, -2.283917553964122e+01, -2.283832180815218e+01, -2.283886390973440e+01, -2.283886390973440e+01, -3.366504347060308e+00, -3.366523225844309e+00, -3.367331627368608e+00, -3.368493660091689e+00, -3.366517996952426e+00, -3.366517996952426e+00, -6.369710438709362e-01, -6.366594791435494e-01, -6.307891071722572e-01, -6.398344530847755e-01, -6.368618792790812e-01, -6.368618792790812e-01, -1.960246670594750e-01, -1.974138307223523e-01, -7.146367366077797e-01, -1.449540855935617e-01, -1.963397469273698e-01, -1.963397469273698e-01, -1.218229154176575e-02, -1.275933655630886e-02, -5.137552356494048e-02, -5.848142972098536e-03, -1.262639343392396e-02, -1.262639343392396e-02, -5.556399931892567e+00, -5.557171698214792e+00, -5.556482784054968e+00, -5.557082803847347e+00, -5.556790158836434e+00, -5.556790158836434e+00, -2.097251449712495e+00, -2.117862500422404e+00, -2.096423370467433e+00, -2.112345709596693e+00, -2.112522871546703e+00, -2.112522871546703e+00, -5.945117720028014e-01, -6.408316554726291e-01, -5.411754788752259e-01, -5.577953080462328e-01, -6.271728158179357e-01, -6.271728158179357e-01, -1.112277617477468e-01, -2.018971175669075e-01, -1.095592686455663e-01, -1.843660153676446e+00, -1.264200656869693e-01, -1.264200656869693e-01, -5.641664796699399e-03, -6.447198164240369e-03, -4.832255769895561e-03, -7.085391016430194e-02, -5.874386611894108e-03, -5.874386611894108e-03, -6.359740209000101e-01, -6.334342079049677e-01, -6.343460429617913e-01, -6.350479965045331e-01, -6.346962687276657e-01, -6.346962687276657e-01, -6.141674692442601e-01, -5.408141785580423e-01, -5.621396256847525e-01, -5.818933754078547e-01, -5.716872924773516e-01, -5.716872924773516e-01, -6.568429611121345e-01, -2.539645117293637e-01, -2.929435647163219e-01, -3.527954747654611e-01, -3.243174568866136e-01, -3.243174568866135e-01, -4.734330084281096e-01, -4.769213320056721e-02, -6.409423990778108e-02, -3.300515374372401e-01, -9.093644390536212e-02, -9.093644390536212e-02, -1.427528499953533e-02, -1.765449307426450e-03, -3.353556135397959e-03, -8.671560054044135e-02, -4.992579273492806e-03, -4.992579273492799e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ms0_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.985001008721470e+01, -2.985009993042197e+01, -2.985063992231447e+01, -2.984917438207815e+01, -2.985005619562483e+01, -2.985005619562483e+01, -4.285238840175730e+00, -4.285523500352128e+00, -4.294556074282231e+00, -4.294558279510334e+00, -4.285317956865597e+00, -4.285317956865597e+00, -8.010175335321482e-01, -7.993067192744970e-01, -7.592616279179620e-01, -7.758420444458374e-01, -8.004103953160302e-01, -8.004103953160302e-01, -1.930919123886614e-01, -1.968735174075019e-01, -8.670954058361655e-01, -1.654743216828465e-01, -1.941417625424104e-01, -1.941417625424104e-01, -1.621617916284513e-02, -1.698151254444933e-02, -6.708725646404388e-02, -7.795039689544899e-03, -1.680462745857869e-02, -1.680462745857869e-02, -7.331350336347004e+00, -7.332946843627868e+00, -7.331552071074966e+00, -7.332791113537295e+00, -7.332117314048233e+00, -7.332117314048233e+00, -2.421079713767424e+00, -2.485063988216308e+00, -2.429252017375166e+00, -2.483018529126093e+00, -2.455605340143371e+00, -2.455605340143371e+00, -7.786633568310956e-01, -9.143474741793425e-01, -7.187349233208807e-01, -8.074324073701621e-01, -8.188190505305163e-01, -8.188190505305163e-01, -1.356284424946309e-01, -1.951260927833662e-01, -1.330022041553279e-01, -2.711717513789204e+00, -1.465139676383793e-01, -1.465139676383793e-01, -7.519922702466566e-03, -8.592830980477769e-03, -6.440562300736927e-03, -9.055246182873680e-02, -7.829359143128340e-03, -7.829359143128340e-03, -8.474532969564602e-01, -8.402638183462124e-01, -8.428156642694165e-01, -8.448056590008324e-01, -8.438079612014945e-01, -8.438079612014945e-01, -8.226737203167737e-01, -6.885841964169946e-01, -7.240183840684684e-01, -7.601445674309876e-01, -7.409617789847909e-01, -7.409617789847910e-01, -9.599604417605909e-01, -2.632027890663665e-01, -2.994837533407362e-01, -4.268078051578953e-01, -3.559502560070311e-01, -3.559502560070311e-01, -5.687419940604674e-01, -6.256210172525903e-02, -8.285053965324524e-02, -4.200188895739497e-01, -1.123254451164863e-01, -1.123254451164863e-01, -1.899620248907694e-02, -2.353840119069165e-03, -4.470820942337951e-03, -1.070894592795199e-01, -6.654431366525435e-03, -6.654431366525425e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms0_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.498814194259838e-09, -2.498734040872110e-09, -2.497590551630280e-09, -2.498854117894703e-09, -2.498779323336723e-09, -2.498779323336723e-09, -8.329827966491298e-06, -8.339018309689769e-06, -8.628124332934682e-06, -8.653935987497506e-06, -8.331335861451732e-06, -8.331335861451732e-06, -6.395064215213034e-03, -6.384462712496462e-03, -6.028181487252150e-03, -6.107626118648324e-03, -6.391651396296409e-03, -6.391651396296409e-03, -1.376977518454392e+00, -1.351668322113120e+00, -2.818201664643152e-03, -4.881897671109582e-01, -1.369759381440468e+00, -1.369759381440468e+00, -1.201706211318416e+00, -1.205319179201880e+00, -5.670710382594857e-01, -8.416270040940240e-01, -1.253077500808850e+00, -1.253077500808850e+00, -3.314802546725708e-07, -3.311087431382823e-07, -3.310600477648431e-07, -3.307942795965859e-07, -3.318039637537891e-07, -3.318039637537891e-07, -1.145218404680573e-04, -9.753623162828396e-05, -1.063963385430973e-04, -9.223447823590895e-05, -1.131000909875763e-04, -1.131000909875763e-04, -2.883316459724818e-02, -2.341323265104831e-02, -2.881777208894315e-02, -3.031981021844546e-02, -2.210104927755856e-02, -2.210104927755856e-02, -4.562962581810051e-01, -7.396817368964130e-01, -5.389174219535233e-01, -2.349666583965752e-04, -8.595662665347185e-01, -8.595662665347185e-01, -8.927586864357999e-01, -8.951738419913490e-01, -2.561819813520240e+00, -6.101548728445330e-01, -1.322248849459396e+00, -1.322248849459396e+00, -5.522763513590715e-03, -5.416083805912747e-03, -5.455447807216023e-03, -5.484665240056424e-03, -5.471889509745317e-03, -5.471889509745317e-03, -1.072562703064337e-02, -1.059573168450907e-02, -1.129433268493435e-02, -1.143835589023936e-02, -1.190582447295874e-02, -1.190582447295875e-02, -2.020269470286878e-02, -3.568916662445810e-01, -3.191065910773763e-01, -1.454708373238690e-01, -2.469045617441202e-01, -2.469045617441203e-01, -6.365910292494316e-02, -4.755450890226901e-01, -5.049860106037781e-01, -2.142600456264824e-01, -7.633104041627384e-01, -7.633104041627378e-01, -9.027232347970687e-01, -1.535935219103439e+00, -1.323317234239152e+00, -9.141393165901954e-01, -1.930362357484920e+00, -1.930362357484916e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms0_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms0_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.257966031683779e-04, 2.257870506335016e-04, 2.256271890824748e-04, 2.257760717128416e-04, 2.257926724437717e-04, 2.257926724437717e-04, 2.386704539370303e-03, 2.392919112352164e-03, 2.589900950824820e-03, 2.615856615017090e-03, 2.387773057126542e-03, 2.387773057126542e-03, 1.306297435560720e-02, 1.297933747077061e-02, 1.104433261212363e-02, 1.270720786682813e-02, 1.303510263466857e-02, 1.303510263466857e-02, 1.146422118340380e-01, 1.157826327187840e-01, 2.616271347267874e-03, 2.786175668113625e-03, 1.148697285992273e-01, 1.148697285992273e-01, 4.582065847296996e-08, 3.426101521650394e-08, 6.928804663575606e-06, 2.500677097463297e-15, 5.309918883123504e-08, 5.309918883123276e-08, 6.692086407253771e-05, 6.617192095532150e-05, 6.599248596901594e-05, 6.546140982559597e-05, 6.768288408385012e-05, 6.768288408385012e-05, 1.183691720846984e-02, 1.017920181032678e-02, 1.084453967067146e-02, 9.442682472305121e-03, 1.198911990472076e-02, 1.198911990472076e-02, 7.761148590858384e-02, 8.099502451754104e-02, 5.822678911364720e-02, 7.156084100683179e-02, 6.742060794955659e-02, 6.742060794955659e-02, 9.557347501543372e-04, 6.158758597657779e-02, 1.220377921418708e-03, 1.995408344582421e-02, 9.972113475822737e-03, 9.972113475822737e-03, 2.186252259038743e-14, 1.792210365871521e-14, 2.930242309431453e-13, 7.724359113237044e-06, 7.671870440786194e-15, 7.671870432293311e-15, 1.240757001057418e-02, 1.185432471133574e-02, 1.205483555837917e-02, 1.220680499104669e-02, 1.213674830477659e-02, 1.213674830477659e-02, 2.617994544747432e-02, 1.518438965945631e-02, 1.948921467371103e-02, 2.283162146645770e-02, 2.236456176334861e-02, 2.236456176334865e-02, 7.823131527043768e-02, 6.089478313399057e-02, 9.111288145632122e-02, 7.703054841290059e-02, 1.004879304015447e-01, 1.004879304015446e-01, 8.245701253542813e-02, 1.273740872096170e-05, 1.909580938350465e-05, 9.710088955486550e-02, 9.698892346876828e-04, 9.698892346876748e-04, 1.079846636664470e-11, 7.372483026596898e-20, 5.870399038144887e-15, 8.457515908352214e-04, 3.816508141628689e-15, 3.816508151549005e-15]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
