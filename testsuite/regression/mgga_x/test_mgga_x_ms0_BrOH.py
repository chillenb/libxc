
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ms0_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.090714410146328e+01, -2.090726344515124e+01, -2.090782689770300e+01, -2.090587907364170e+01, -2.090720668915155e+01, -2.090720668915155e+01, -3.179447251224348e+00, -3.179525443071178e+00, -3.181970408769912e+00, -3.181282591819882e+00, -3.179484084912899e+00, -3.766989024467890e+00, -5.551521941641280e-01, -7.334064493951811e-01, -7.166222662018908e-01, -7.210202975935671e-01, -7.338157185880452e-01, -7.338157185880452e-01, -2.016965523890569e-01, -2.041207834614811e-01, -6.486906826591095e-01, -1.514757244674048e-01, -2.024276345716333e-01, -2.024276345716333e-01, -1.218256264665310e-02, -1.275971653527764e-02, -5.147811604503208e-02, -5.848428801405410e-03, -1.262673086491514e-02, -1.262673086491514e-02, -5.556593071293377e+00, -5.557362585905383e+00, -5.556673124008269e+00, -5.298021673869831e+00, -5.556985603100885e+00, -5.556985603100885e+00, -1.741606632435925e+00, -1.763314805295368e+00, -1.732467443184364e+00, -1.749576517788169e+00, -1.768185724509067e+00, -2.141737299737428e+00, -6.246950608619047e-01, -6.746376833132923e-01, -5.947517911853148e-01, -6.171980340709677e-01, -6.473075070214648e-01, -5.626477213556240e-01, -7.719455975473991e-02, -2.062783244600611e-01, -7.621335504575610e-02, -2.059148432745823e+00, -1.290910350317762e-01, -1.290910350317762e-01, -3.742327978745498e-03, -6.447513625445824e-03, -4.832361488772451e-03, -4.799946917873042e-02, -3.896891260542003e-03, -5.874754050318441e-03, -6.368205109189541e-01, -6.342308365018102e-01, -6.294154728991778e-01, -6.358763279027423e-01, -6.355183470826294e-01, -6.355183470826294e-01, -6.166662088806085e-01, -5.417239147932599e-01, -5.635367820691899e-01, -5.837624157548221e-01, -5.734600653013218e-01, -5.160309024528359e-01, -7.084693261367793e-01, -1.886604344688408e-01, -3.016654948859907e-01, -3.135402857803400e-01, -3.386467762614672e-01, -3.386467762614671e-01, -4.169297611410299e-01, -4.774279762272966e-02, -6.433189818088937e-02, -3.587850921873624e-01, -6.264047192993280e-02, -9.200706360563572e-02, -1.427948849618865e-02, -1.765462927468284e-03, -3.353574664849796e-03, -8.778209785917941e-02, -4.992863086115168e-03, -4.992863086115161e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ms0_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.211441714973440e+01, -3.211454115967061e+01, -3.211514736882344e+01, -3.211311955293185e+01, -3.211448204506157e+01, -3.211448204506157e+01, -4.756366872780474e+00, -4.756132843103845e+00, -4.749097151027211e+00, -4.752239311822543e+00, -4.756324568178165e+00, -4.856746746596366e+00, -8.195855994100510e-01, -9.283558122184973e-01, -9.044665800216484e-01, -9.111523083202331e-01, -9.289466773319964e-01, -9.289466773319964e-01, -2.544963947243541e-01, -2.577865197444000e-01, -9.118969915026186e-01, -1.907420987560904e-01, -2.554832953977416e-01, -2.554832953977416e-01, -1.621746910325900e-02, -1.698327811202701e-02, -6.757453118885418e-02, -7.796184672803262e-03, -1.680622964433439e-02, -1.680622964433436e-02, -7.333899485736374e+00, -7.335447029483195e+00, -7.334064011001319e+00, -7.755011088553628e+00, -7.334684433451128e+00, -7.334684433451128e+00, -2.713375073853750e+00, -2.737995828116454e+00, -2.701670124386107e+00, -2.723096678705030e+00, -2.742388120750647e+00, -2.750721404951362e+00, -8.130124351740705e-01, -8.866308429098571e-01, -7.700951812070032e-01, -8.055281999080991e-01, -8.453758400645336e-01, -8.076483427252334e-01, -1.031675606755113e-01, -2.586470123705253e-01, -1.018837624364292e-01, -2.690140263794041e+00, -1.628688789868992e-01, -1.628688789868992e-01, -4.989770769892590e-03, -8.594096252878028e-03, -6.440988371395920e-03, -6.402272836781790e-02, -5.195855178349962e-03, -7.830831543820364e-03, -8.468786903829570e-01, -8.413439989714521e-01, -8.538619958005402e-01, -8.448525462234874e-01, -8.440854315301670e-01, -8.440854315301670e-01, -8.193391786663680e-01, -7.040521972866893e-01, -7.373019875427067e-01, -7.684723606294289e-01, -7.525483942407230e-01, -7.948025878209890e-01, -9.285435723054076e-01, -2.684894007525424e-01, -3.823918052648809e-01, -4.875500579744481e-01, -4.324009258808981e-01, -4.324009258808980e-01, -6.101550265646403e-01, -6.282245465327048e-02, -8.397546700662945e-02, -4.629390505148416e-01, -8.366581338567396e-02, -1.177560948078976e-01, -1.901317332163852e-02, -2.353894605066680e-03, -4.470895345203299e-03, -1.123570092596035e-01, -6.655568267050425e-03, -6.655568267050402e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms0_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.935625469751101e-08, -1.935624578042946e-08, -1.935605042930954e-08, -1.935621525845033e-08, -1.935625106003109e-08, -1.935625106003109e-08, -1.286704069627677e-05, -1.286369872161198e-05, -1.275937394394958e-05, -1.279613113796399e-05, -1.286586861556897e-05, -1.169746571535272e-06, -8.988950428167228e-03, -6.151162048483896e-04, -6.259138315107800e-04, -6.320914402972369e-04, -6.148497255341143e-04, -6.148497255341143e-04, -9.893992761097552e-02, -9.677900313580862e-02, -4.117095333737741e-03, -1.140304666471772e-01, -9.824701284708509e-02, -9.824701284708509e-02, -1.135322147977527e+00, -1.125994499344917e+00, -3.673680462904534e-01, -4.044098448881102e-01, -1.177688411502167e+00, -1.177688411506019e+00, -3.013912023279250e-07, -3.013724272718868e-07, -3.013902432901484e-07, -5.125816256975285e-06, -3.013804072505328e-07, -3.013804072505328e-07, -1.423374329955621e-04, -1.380709867235098e-04, -1.438882721285698e-04, -1.408070360393177e-04, -1.370901966275584e-04, -1.071179006497970e-05, -1.694181273198916e-03, -1.346065346104898e-03, -1.967109537214612e-03, -1.821086465418586e-03, -1.513222188546992e-03, -1.487481815196302e-02, -1.872777850730561e+01, -6.347052281673611e-02, -1.971596377341528e+01, -1.481820120587655e-05, -1.894993360545697e-01, -1.894993360545697e-01, -3.384093650256747e+06, -5.102415657811995e-01, -2.005196848720799e+00, -1.250751952669718e+02, -2.878303668076978e+06, -6.287373563154293e-01, -1.833673678154551e-03, -1.835438729665772e-03, -1.428180771660161e-02, -1.834341091321460e-03, -1.834568338934777e-03, -1.834568338934777e-03, -2.073971492375516e-03, -2.959332518795969e-03, -2.672555860411113e-03, -2.429769861539699e-03, -2.550455502404424e-03, -4.541342191601990e-02, -1.084428095591247e-03, -5.947917714280622e-01, -2.216675233183603e-02, -1.372488022059603e-01, -1.584935719600752e-02, -1.584935719600746e-02, -4.094783853369772e-02, -3.497189779249005e-01, -2.890492704989290e-01, -1.433397966053257e-02, -4.316943325308142e+01, -3.096826014431572e-01, -4.438729140282215e-01, -5.649083406925722e-01, -1.109991786081372e+00, -3.720586480852058e-01, -8.839777266744179e-01, -8.839777266943025e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms0_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.484915461183954e-03, 2.484949839998091e-03, 2.485094937521164e-03, 2.484535880861404e-03, 2.484933607339411e-03, 2.484933607339411e-03, 3.892953563750802e-03, 3.891287670275136e-03, 3.839562249374810e-03, 3.859622719663903e-03, 3.892472926642742e-03, 2.691526851098736e-18, 7.420490418187633e-03, -1.109309417858191e-17, 1.597281149305351e-17, -8.479249458449012e-17, -5.844426127381410e-17, -5.844426127381410e-17, 9.664873258654218e-17, 1.097844827225815e-16, 2.043481007606213e-03, -2.632245894942772e-16, 5.320167094653801e-17, 5.320167094653801e-17, 1.255729790738945e-17, -8.366994146253206e-17, -1.832006163892116e-16, -4.534647801669249e-18, -5.747529969516782e-17, 1.447350496168600e-17, -2.531849170957682e-18, 3.094465431868790e-19, -1.721950681643841e-19, 1.002005378455570e-02, 9.254061944431989e-20, 9.254061944431989e-20, 7.512845790285793e-03, 7.627048542649145e-03, 7.431549323969364e-03, 7.563129938285900e-03, 7.643151791619369e-03, 9.964367032198435e-18, 2.386875117874255e-17, -8.002945453038381e-18, -3.851497450267137e-17, 1.862519357305769e-17, 1.049472904045709e-17, 2.729455496091900e-02, 1.446366833912141e-04, 7.227532945501807e-17, 1.725901992321734e-04, 3.725610955955963e-18, 2.609299092675802e-16, 2.609299092675802e-16, 1.131143596944686e-10, -1.439937475489464e-17, -2.147238885335527e-17, 1.438358420942786e-05, 1.426578583396637e-10, 1.779811744401720e-17, 7.436202366411415e-18, -2.076828872429440e-18, 4.072914013888866e-02, -5.559257637880965e-18, -7.304594608762219e-20, -7.304594608762219e-20, 6.172881192966216e-18, -2.361814515159280e-17, 2.730515830048715e-17, 2.155413892486558e-17, -1.915835916819018e-17, 8.795102305266705e-02, -1.078048192011313e-17, 9.935499705608726e-03, -9.379569606131520e-17, 4.252917053773993e-02, -2.822747122517022e-17, -6.105987896136507e-17, 2.555991997720801e-02, -2.232926054861148e-17, -1.895070962697234e-17, 1.534851306549223e-17, 1.137144606295849e-04, -1.261556888608860e-16, 4.149111983906430e-17, 3.629311923062598e-18, -1.014126711731309e-18, -1.177295226801060e-16, -1.178174078483679e-18, 2.172545845730558e-17])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
