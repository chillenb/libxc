
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_gvt4_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gvt4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.200238619296795e+01, -2.200243918753127e+01, -2.200271744742004e+01, -2.200192870149433e+01, -2.200233590687147e+01, -2.200233590687147e+01, -3.469153613789431e+00, -3.469207635069548e+00, -3.470827164271272e+00, -3.471861057397106e+00, -3.470812721931391e+00, -3.470812721931391e+00, -6.042009307373731e-01, -6.034597673283062e-01, -5.913270028271793e-01, -6.121774546902723e-01, -6.058370164275311e-01, -6.058370164275311e-01, -2.197014008814065e-01, -2.191395834715242e-01, -4.119220450347192e-01, -1.727560750518045e-01, -1.934511396153607e-01, -1.934511396153608e-01, -1.249098296992865e-04, -1.486312329803181e-04, -1.483170412995683e-02, -2.061411614333968e-05, -4.842266126991498e-05, -4.842266126991495e-05, -5.348145485724924e+00, -5.348771251981354e+00, -5.348184683742550e+00, -5.348736765433417e+00, -5.348456863723892e+00, -5.348456863723892e+00, -2.107772247464645e+00, -2.122363278441063e+00, -2.109502052532925e+00, -2.122413729066273e+00, -2.115310309851981e+00, -2.115310309851981e+00, -5.996581173080439e-01, -6.468476788180230e-01, -5.475804954384403e-01, -5.635244924497601e-01, -6.090766089112111e-01, -6.090766089112111e-01, -1.147299779236468e-01, -2.408584086062090e-01, -1.011209589372158e-01, -1.922836397862981e+00, -1.526631822615249e-01, -1.526631822615249e-01, -6.044574741476783e-06, -1.712172703437355e-05, -2.292432898631268e-05, -4.984128422181608e-02, -2.397546191113867e-05, -2.397546191113867e-05, -6.023362090979255e-01, -5.994352236006403e-01, -6.004183630331943e-01, -6.012579696588295e-01, -6.008338704124647e-01, -6.008338704124647e-01, -5.855018295804095e-01, -5.191949272269433e-01, -5.346661679385983e-01, -5.528988841608290e-01, -5.431046920735014e-01, -5.431046920735014e-01, -6.759299633709546e-01, -2.838118623434817e-01, -3.084743208985220e-01, -3.599292650740332e-01, -3.299037715653151e-01, -3.299037715653153e-01, -4.734575591265474e-01, -1.340240606298618e-02, -2.812528029770975e-02, -3.439924239732058e-01, -8.762600149188229e-02, -8.762600149188234e-02, -2.257512781654409e-04, 3.576984649401037e-07, -6.030014170884248e-06, -8.200335703395559e-02, -2.326383206043780e-05, -2.326383206043774e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_gvt4_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gvt4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.827563433975701e+01, -2.827575290054390e+01, -2.827623650136113e+01, -2.827447315596138e+01, -2.827540332950240e+01, -2.827540332950240e+01, -4.623277035542123e+00, -4.623307919824469e+00, -4.623840795465448e+00, -4.620554160799947e+00, -4.621893371751267e+00, -4.621893371751267e+00, -8.963532324874842e-01, -8.932697683235339e-01, -8.045610019236947e-01, -8.038486184465315e-01, -8.078758775145624e-01, -8.078758775145624e-01, -1.163381327078561e-01, -1.218507413921371e-01, -1.330068730605470e+00, -7.725107915978567e-02, -8.392844462958880e-02, -8.392844462958890e-02, -3.825431887136200e-04, -4.528011487137697e-04, -3.658707049166922e-02, -5.831134602435656e-05, -1.422957451523397e-04, -1.422957451523395e-04, -6.972979708163148e+00, -6.975825975776274e+00, -6.973106699994429e+00, -6.975619684138233e+00, -6.974426065980926e+00, -6.974426065980926e+00, -2.182384832813236e+00, -2.212378119112235e+00, -2.134819885788457e+00, -2.161676981716057e+00, -2.221669771410062e+00, -2.221669771410062e+00, -7.735648929932115e-01, -8.691927360439483e-01, -7.167393112834202e-01, -7.788763811997372e-01, -7.905755819871672e-01, -7.905755819871672e-01, -1.252741754755754e-01, -1.110786826189085e-01, -1.201700672068585e-01, -2.650547181550420e+00, -1.103140332732961e-01, -1.103140332732963e-01, -6.848610207209010e-06, -4.005694736193765e-05, -6.372971592100503e-05, -8.756156719724159e-02, -5.899923570749255e-05, -5.899923570749258e-05, -8.027048605736359e-01, -7.954212775858936e-01, -7.981507330394829e-01, -8.002677626819591e-01, -7.992242658741369e-01, -7.992242658741369e-01, -7.817135260580186e-01, -6.020044723151626e-01, -6.655168192681488e-01, -7.193331078424835e-01, -6.934183180384650e-01, -6.934183180384650e-01, -9.132134743283044e-01, -1.429479157070100e-01, -2.155443663428070e-01, -4.171659463908208e-01, -3.108045710107991e-01, -3.108045710107993e-01, -5.538971362305632e-01, -3.537242268597480e-02, -6.168070041270981e-02, -4.249549045007777e-01, -1.164340915796251e-01, -1.164340915796251e-01, -5.112459281001573e-04, 3.246973466411344e-06, -1.785365524867525e-05, -1.267653119192762e-01, -6.218548014021841e-05, -6.218548014021821e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gvt4_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gvt4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.852429099408709e-09, -3.852319352507619e-09, -3.851881288124890e-09, -3.853510715931542e-09, -3.852649821484428e-09, -3.852649821484428e-09, -9.316336158003054e-06, -9.314659981195004e-06, -9.270460527708934e-06, -9.290141527826995e-06, -9.289706595843079e-06, -9.289706595843079e-06, -1.118255650410588e-02, -1.127261987919193e-02, -1.348497927388383e-02, -1.241771567084233e-02, -1.267026013132850e-02, -1.267026013132850e-02, -2.041405997008854e+00, -1.958703235668071e+00, -9.931238619409101e-03, -5.035587990859942e+00, -3.700886616930338e+00, -3.700886616930339e+00, 3.635009672030166e+00, 3.062400702373182e+00, -6.221575760774182e+00, -6.739675400518656e+00, -2.954195724525990e+00, -2.954195724526171e+00, -8.987664454518953e-07, -8.942298050707088e-07, -8.985425527012938e-07, -8.945386763939616e-07, -8.964732490373365e-07, -8.964732490373365e-07, -1.080018309533993e-04, -1.030302972926025e-04, -1.117508180224313e-04, -1.071844542325440e-04, -1.034388420850831e-04, -1.034388420850831e-04, -8.745453554949332e-03, -3.770008476402271e-03, -1.448637685659014e-02, -8.788650604963333e-03, -7.671935963036486e-03, -7.671935963036486e-03, -7.228972501378987e+00, -1.717273934272673e+00, -8.244620691652427e+00, -5.776904944556105e-05, -7.076168054486985e+00, -7.076168054486978e+00, -5.487829328331627e+01, -2.545129522008001e+01, -6.244221774415791e+01, -1.187424772477177e+01, -6.338286328999382e+01, -6.338286328999349e+01, -2.867909610321212e-03, -3.891263906715073e-03, -3.531221161252327e-03, -3.233411973857199e-03, -3.382396323792871e-03, -3.382396323792871e-03, -3.081704963028896e-03, -2.143863810034224e-02, -1.428854857869823e-02, -8.766273735148768e-03, -1.138417761299108e-02, -1.138417761299108e-02, -3.456352245207121e-03, -7.759346542495417e-01, -3.986461397919877e-01, -1.098381845424694e-01, -2.152658923831255e-01, -2.152658923831255e-01, -3.299752180917698e-02, -2.737068189418342e+00, -7.566818716622679e+00, -1.068848734710597e-01, -1.225094564484289e+01, -1.225094564484291e+01, -2.039518983200912e+01, -5.702496665032656e+02, -4.452921736141164e+00, -1.046920654284558e+01, -5.259086517674694e+01, -5.259086517674732e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gvt4_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gvt4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.701295607551570e-04, 2.701250584583968e-04, 2.701002164253056e-04, 2.701667133215294e-04, 2.701325647474097e-04, 2.701325647474097e-04, 4.359530431304593e-03, 4.358710074300252e-03, 4.335996405095938e-03, 4.334696873697437e-03, 4.339520079072004e-03, 4.339520079072004e-03, 3.858500250311079e-02, 3.867302624531527e-02, 4.023916684495042e-02, 3.761812389985229e-02, 3.840622210508547e-02, 3.840622210508547e-02, 9.021256423721859e-02, 8.934833877009803e-02, 5.338295386124571e-02, 1.357056512815977e-01, 1.239189940076671e-01, 1.239189940076671e-01, 1.560869688850383e-04, 1.924191729307962e-04, 1.587208691773434e-02, 2.796352144761794e-05, 6.990789207133314e-05, 6.990789207133331e-05, 9.263258670984120e-04, 9.236429799130219e-04, 9.261042924574885e-04, 9.237404798721529e-04, 9.250154616419502e-04, 9.250154616419502e-04, 5.860564512938294e-03, 5.608082495383237e-03, 5.882970701874699e-03, 5.650155118207789e-03, 5.707413171295996e-03, 5.707413171295996e-03, 1.658021861628789e-02, 1.263939237934292e-02, 2.446226242249359e-02, 2.240898035488288e-02, 1.540222385273665e-02, 1.540222385273665e-02, 1.020282356315172e-01, 9.381315187628064e-02, 9.677459592318434e-02, 6.104254852672734e-03, 1.282896074512279e-01, 1.282896074512279e-01, 1.675695309834905e-05, 3.100263994997614e-05, 8.642026790964685e-05, 5.959349003372515e-02, 7.075811254940972e-05, 7.075811254940957e-05, 6.648828975241924e-03, 7.444184516791245e-03, 7.164661589127366e-03, 6.933326263142397e-03, 7.049476861406645e-03, 7.049476861406645e-03, 7.544721164402026e-03, 1.690153138637079e-02, 1.375291153302646e-02, 1.097514183143425e-02, 1.241052722655876e-02, 1.241052722655876e-02, 1.380391232769941e-02, 7.087287499547516e-02, 5.773151186631206e-02, 4.073649347239391e-02, 4.669721290386109e-02, 4.669721290386108e-02, 2.439684445803052e-02, 1.276320750347437e-02, 2.936084629240773e-02, 3.639035379704929e-02, 1.015537494155150e-01, 1.015537494155150e-01, 3.619933637823008e-04, 2.198804485273401e-06, 1.280945823885479e-05, 8.934717306113209e-02, 7.060994958625456e-05, 7.060994958625452e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
