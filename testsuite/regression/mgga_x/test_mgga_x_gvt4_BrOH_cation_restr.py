
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_gvt4_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gvt4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.151684075052059e+01, -2.151691537564664e+01, -2.151725977467428e+01, -2.151615019697465e+01, -2.151672979198963e+01, -2.151672979198963e+01, -3.263320772084218e+00, -3.263457120839063e+00, -3.267090102279500e+00, -3.265922058755326e+00, -3.265708243792536e+00, -3.756627621163076e+00, -4.815395691501744e-01, -8.009576434862311e-01, -8.024563487394996e-01, -7.981934500126312e-01, -7.992426122058381e-01, -7.992426122058381e-01, -2.267457290734663e-01, -2.274905307619399e-01, -1.936097061337160e-01, -2.013046707834529e-01, -2.153455531675317e-01, -2.153455531675317e-01, -1.248240947233653e-04, -1.484613061913063e-04, -1.505121501981401e-02, -2.068546301628534e-05, -4.835221491141680e-05, -4.835221491141680e-05, -5.348686207237857e+00, -5.349302957233110e+00, -5.348714010372990e+00, -5.278721226407447e+00, -5.348998626580702e+00, -5.348998626580702e+00, -1.766489505256486e+00, -1.795449381063853e+00, -1.743733438285392e+00, -1.770363994512879e+00, -1.793343631918484e+00, -2.163233671219374e+00, -6.151424643156488e-01, -6.571257419858387e-01, -5.804509907989350e-01, -5.913185790136449e-01, -6.225307360868090e-01, -5.908640599244959e-01, 6.671234894145511e-01, -2.514320331454856e-01, 7.157019289443527e-01, -2.000079325926948e+00, -1.641536932007449e-01, -1.641536932007448e-01, 5.201187288125771e-04, -1.817325205794224e-05, -2.307983083315512e-05, 7.812931653757658e-01, 1.631016863608541e-03, -2.500365766670499e-05, -6.029422580380014e-01, -6.002089502604602e-01, -5.986552708550622e-01, -6.019261968603942e-01, -6.015270175011936e-01, -6.015270175011936e-01, -5.866778113438106e-01, -5.217144026226325e-01, -5.371857820408342e-01, -5.550643575066949e-01, -5.456258138936145e-01, -5.282246697442770e-01, -6.912668402315429e-01, -6.377148954680691e-02, -3.226202098420000e-01, -3.122946303585928e-01, -3.470731827575217e-01, -3.470731827575217e-01, -4.282421728678505e-01, -1.344642372515720e-02, -2.898055656257397e-02, -3.600013770969615e-01, 6.375108356771260e-01, -9.350459884780922e-02, -2.419970408735475e-04, -3.846378942049147e-07, -6.018615790560386e-06, -8.478190942083547e-02, -2.364759677319326e-05, -2.364759677319322e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_gvt4_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gvt4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.947507286193142e+01, -2.947513414763215e+01, -2.947544040445716e+01, -2.947452653067787e+01, -2.947500058096593e+01, -2.947500058096593e+01, -5.174130875649837e+00, -5.173935088951833e+00, -5.168894004741342e+00, -5.171392997794626e+00, -5.170587270845926e+00, -3.956875822497745e+00, -1.228910715938845e+00, -5.542498006231552e-01, -4.969752657209197e-01, -5.204297339704127e-01, -5.150179316259258e-01, -5.150179316259258e-01, -1.151755709953478e-01, -1.192186420039205e-01, -1.946961357530268e+00, -1.422211213483739e-01, -1.079800486243780e-01, -1.079800486243780e-01, -3.843317542089405e-04, -4.568009152195849e-04, -4.118339303216162e-02, -6.392610889736256e-05, -1.492366015551429e-04, -1.492366015551429e-04, -6.971624641527093e+00, -6.974494397728144e+00, -6.971780234593023e+00, -7.140751064869676e+00, -6.973068846098545e+00, -6.973068846098545e+00, -3.023797458280173e+00, -3.019960361070683e+00, -3.029145027596089e+00, -3.024129423456164e+00, -3.019327152368227e+00, -2.126289452223442e+00, -7.349640681350494e-01, -8.434232079439515e-01, -6.384767766469348e-01, -7.083402775510192e-01, -7.566877542882652e-01, -8.372673045691931e-01, -3.590915140538981e-01, -1.237708159786507e-01, -2.386294478574098e-01, -2.453785824140543e+00, -1.516085925020198e-01, -1.516085925020199e-01, 1.555574302148262e-03, -5.617082642543164e-05, -7.127357813783182e-05, 4.752840990047514e-01, 4.852504405738848e-03, -7.723182698095857e-05, -8.015295551923448e-01, -7.936637688399635e-01, -8.016191852574612e-01, -7.988732085751485e-01, -7.977432995628604e-01, -7.977432995628604e-01, -7.794439873965864e-01, -5.961388175527617e-01, -6.592141332375324e-01, -7.138327500263579e-01, -6.870078221814647e-01, -7.307595853228298e-01, -8.743298479138364e-01, -5.331444159647816e-01, -2.025910832589846e-01, -5.395076219775107e-01, -2.832536619298587e-01, -2.832536619298588e-01, -6.699135180154759e-01, -3.714093063955803e-02, -7.361685088131945e-02, -3.882071529516666e-01, -1.757684590457874e-01, -1.562108375237949e-01, -7.436541435045473e-04, -1.190313781366130e-06, -1.861278519470097e-05, -1.485072844185953e-01, -7.303998430818962e-05, -7.303998430818947e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gvt4_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gvt4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.632602214095084e-09, -2.632527494799387e-09, -2.632204523660112e-09, -2.633313064001994e-09, -2.632730894745955e-09, -2.632730894745955e-09, -8.118484317632481e-06, -8.116561252899480e-06, -8.065480574988849e-06, -8.083151858305748e-06, -8.084614439226218e-06, -9.886879748942305e-06, -1.206150874919597e-02, -8.885609715440414e-03, -9.946911595495579e-03, -9.618220789247383e-03, -9.689815071966229e-03, -9.689815071966229e-03, -1.928907140679255e+00, -1.837648183256210e+00, -1.172980310588392e-02, -3.098616792734957e+00, -2.849060594874539e+00, -2.849060594874538e+00, 4.400538692744167e+00, 4.550883034412348e+00, -2.323834142284845e-01, 3.362669213704573e+00, 4.616523045894234e+00, 4.616523045894234e+00, -9.003739423314138e-07, -8.958210635907084e-07, -9.001167343488238e-07, -6.145165215401927e-07, -8.980892488567865e-07, -8.980892488567865e-07, -9.761883629001631e-05, -9.128981985522169e-05, -1.027839878059620e-04, -9.675761189192379e-05, -9.173585357390726e-05, -1.031019708193959e-04, -9.569975153238052e-03, -4.774164573978131e-03, -1.566368122724686e-02, -1.109032618861271e-02, -8.472465865591965e-03, -5.860595906017142e-03, -2.934069201539901e+02, -1.533161562147026e+00, -4.260121305548425e+02, -7.601953143580298e-05, -4.968128322129502e+00, -4.968128322129502e+00, -2.192327192815307e+04, 2.977388722081687e+00, 2.384564031977242e+01, -2.220012745471744e+03, -8.586180302744244e+04, 9.173326885482998e+00, -3.105850218026110e-03, -4.107802172372198e-03, -2.871090158940669e-03, -3.463712957658641e-03, -3.609667735629131e-03, -3.609667735629131e-03, -3.609554412053664e-03, -2.159476545225713e-02, -1.458964300681815e-02, -9.192196244147102e-03, -1.177150048325738e-02, -7.924975278184138e-03, -4.422078363497385e-03, -1.832765003274887e+00, -3.751768468620525e-01, -9.993656809358721e-02, -2.065311447959841e-01, -2.065311447959843e-01, -2.701652539496086e-02, -7.099523933117051e-02, -1.201271597482894e+00, -1.111427148512176e-01, -8.037716633277042e+02, -5.881341213296919e+00, 2.057076892520842e+00, 3.694002393434858e+00, 1.051427198378230e+01, -6.231658310319896e+00, 1.306770122560960e+01, 1.306770122560959e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gvt4_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gvt4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [4.608283914053982e-04, 4.608176990246022e-04, 4.607735542852155e-04, 4.609319442970941e-04, 4.608484749589933e-04, 4.608484749589933e-04, 6.187783960280269e-03, 6.186538564206345e-03, 6.153665527410155e-03, 6.166376798799034e-03, 6.165653525148656e-03, 2.613876831351040e-03, 5.601154276485921e-02, 1.903926342631694e-02, 2.057186416192262e-02, 1.995165329230857e-02, 2.009211651954930e-02, 2.009211651954930e-02, 8.338524630149895e-02, 8.127184846992661e-02, 6.851999439228494e-02, 1.003491759427111e-01, 9.976395107679277e-02, 9.976395107679273e-02, 1.532098375211272e-04, 1.859758210533423e-04, 1.258031405146026e-02, 2.177138687896905e-05, 6.002161338738948e-05, 6.002161338738948e-05, 9.229345175306385e-04, 9.202926754412718e-04, 9.227836098605425e-04, 1.486628172685619e-03, 9.216096367742559e-04, 9.216096367742559e-04, 1.288161671120715e-02, 1.239357429814599e-02, 1.327382434752641e-02, 1.282094444426703e-02, 1.242418848043935e-02, 5.022791908836319e-03, 1.219065776143439e-02, 8.452117678318194e-03, 1.567716352212006e-02, 1.258417785717325e-02, 1.141351061019071e-02, 2.304049170533823e-02, 6.816356812878737e-01, 8.526017724259301e-02, 6.617883897654685e-01, 3.439283641083771e-03, 1.070198502427128e-01, 1.070198502427128e-01, -5.007041562365349e-04, 1.798438173227571e-05, 6.493010597944748e-05, 3.524499024562988e-01, -3.096748355179765e-03, 4.357898656648226e-05, 6.064821074667261e-03, 6.881331646248263e-03, 8.817903916841547e-03, 6.356722087604974e-03, 6.475708893498403e-03, 6.475708893498403e-03, 6.344709453673295e-03, 1.611935919177926e-02, 1.279326850530948e-02, 9.877524476595942e-03, 1.131834128378239e-02, 2.117402901436315e-02, 8.736347692495308e-03, 2.396891493605685e-01, 5.068159082429254e-02, 7.365576915308697e-02, 3.835527800928843e-02, 3.835527800928842e-02, 4.583364854776327e-02, 1.136182530933227e-02, 2.230314653168283e-02, 2.621312012755902e-02, 7.454756541718769e-01, 7.942775068693622e-02, 2.052046082786604e-04, 4.213469026921352e-07, 1.116150803150366e-05, 7.639775107818415e-02, 4.920339990225356e-05, 4.920339990225349e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
