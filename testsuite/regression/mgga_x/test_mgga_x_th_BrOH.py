
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_th_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_th", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-4.977789973443381e+01, -4.977937439696584e+01, -4.978625760686609e+01, -4.976227169674090e+01, -4.977867275382636e+01, -4.977867275382636e+01, -2.473129064771571e+00, -2.473721378631168e+00, -2.491813562782079e+00, -2.486531956807381e+00, -2.473295368541868e+00, -2.473295368541868e+00, -2.125094073319690e-01, -2.111866346848157e-01, -1.800313684893166e-01, -1.946700130343139e-01, -2.120486599114201e-01, -2.120486599114201e-01, -5.512688564588854e-02, -5.841999600844606e-02, -1.625250056774268e-01, -1.134917318724785e-02, -5.604192747541981e-02, -5.604192747541981e-02, -1.090265247020426e-05, -1.247275463187272e-05, -5.009106713850317e-04, -6.717716063511506e-07, -1.236988863103992e-05, -1.236988863103991e-05, -1.790515696603017e+01, -1.804894506624671e+01, -1.792126089142205e+01, -1.803296346087315e+01, -1.797665417251368e+01, -1.797665417251368e+01, -1.234469433975940e+00, -1.298455447550097e+00, -1.212371354987700e+00, -1.262226781511198e+00, -1.307931485751776e+00, -1.307931485751776e+00, -6.661608088663694e-01, -1.250777667260977e+00, -4.799477536200081e-01, -7.158960161891725e-01, -8.454895096613083e-01, -8.454895096613083e-01, -4.651877645268154e-03, -3.275152157908198e-02, -4.848291239243482e-03, -2.480908963322933e+00, -8.930598237192135e-03, -8.930598237192135e-03, -7.673602829148030e-07, -1.025306247924092e-06, -8.800504139220164e-07, -1.124093184985252e-03, -8.486225627912760e-07, -8.486225627912752e-07, -7.656687215271630e+00, -4.054642563046514e+00, -4.887973793907897e+00, -5.801076632924373e+00, -5.305677724257765e+00, -5.305677724257765e+00, -5.159194862140385e+00, -5.805122998431640e-01, -8.743460497514446e-01, -1.406991942816522e+00, -1.084099383586925e+00, -1.084099383586925e+00, -1.065125976512246e+00, -6.304775241362705e-02, -1.038723368795689e-01, -2.163632346852672e-01, -1.585190567952835e-01, -1.585190567952834e-01, -3.674098841971528e-01, -3.877310231490952e-04, -8.985670508644875e-04, -2.516714794265388e-01, -3.275739133937063e-03, -3.275739133937064e-03, -1.034099605490699e-05, -2.139610526302200e-08, -2.199612918953530e-07, -3.108062583030460e-03, -6.157930026494833e-07, -6.157930026494802e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_th_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_th", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.396148392907316e+02, -1.396189664578280e+02, -1.396379596986700e+02, -1.395708147478460e+02, -1.396170052856914e+02, -1.396170052856914e+02, -7.165884833642330e+00, -7.167585996925849e+00, -7.219453448614247e+00, -7.202980104444595e+00, -7.166371372083677e+00, -7.166371372083677e+00, -6.191372847055041e-01, -6.151846465660802e-01, -5.219845544265886e-01, -5.635429732205059e-01, -6.177579129088105e-01, -6.177579129088105e-01, -1.551342104037597e-01, -1.645574139432617e-01, -4.805622570718504e-01, -3.235578654416387e-02, -1.577670613021324e-01, -1.577670613021324e-01, -3.049911785896908e-05, -3.490212674818959e-05, -1.410772379123054e-03, -1.912894195669184e-06, -3.460746454125381e-05, -3.460746454125378e-05, -5.004831664712381e+01, -5.045015076956933e+01, -5.009307844747050e+01, -5.040525738068073e+01, -5.024845339827058e+01, -5.024845339827058e+01, -3.474826464752674e+00, -3.651480328425881e+00, -3.410057282556409e+00, -3.547513972387100e+00, -3.682905719158370e+00, -3.682905719158370e+00, -1.910919647891256e+00, -3.668651351151913e+00, -1.386241675616346e+00, -2.100748761219875e+00, -2.419990878447147e+00, -2.419990878447147e+00, -1.315243553891346e-02, -9.196353303108035e-02, -1.370816615599792e-02, -7.328717917021521e+00, -2.518268744158328e-02, -2.518268744158328e-02, -2.165932727621445e-06, -2.907895568886393e-06, -2.475757300049105e-06, -3.198514255715546e-03, -2.417029260434547e-06, -2.417029260434545e-06, -2.210896660975969e+01, -1.150520029432949e+01, -1.392139420327877e+01, -1.659274285728548e+01, -1.514035987351192e+01, -1.514035987351192e+01, -1.517558395748517e+01, -1.627644438325810e+00, -2.457976732668685e+00, -3.974075963297985e+00, -3.054653042654393e+00, -3.054653042654395e+00, -3.131229581837387e+00, -1.767779699288218e-01, -2.926131232766804e-01, -6.178598627824800e-01, -4.485096588500506e-01, -4.485096588500503e-01, -1.042938716560712e+00, -1.088419109838888e-03, -2.535235294255710e-03, -7.222526195646845e-01, -9.242596900785134e-03, -9.242596900785138e-03, -2.942406838768080e-05, -6.128100846511512e-08, -6.176589527561309e-07, -8.775638814475373e-03, -1.755385853060401e-06, -1.755385853060392e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_th_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_th", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.562217933458581e-08, -6.562508255643916e-08, -6.563723961289236e-08, -6.559008872285647e-08, -6.562371235255005e-08, -6.562371235255005e-08, -1.081927855449611e-05, -1.082417840901621e-05, -1.097113382037936e-05, -1.091048323725301e-05, -1.082043259186740e-05, -1.082043259186740e-05, -1.668050537397660e-03, -1.655834735482063e-03, -1.373090852708032e-03, -1.516228753454971e-03, -1.663925048708466e-03, -1.663925048708466e-03, -2.127134190663894e-01, -2.221097511238744e-01, -3.612293869834532e-04, -6.782330227844355e-02, -2.151825917500238e-01, -2.151825917500238e-01, -2.629859542918401e-01, -2.611723375205011e-01, -9.771473447085645e-02, -9.252869659961624e-02, -2.731690434267442e-01, -2.731690434267439e-01, -3.961424839759025e-05, -4.020966964190590e-05, -3.967966895700370e-05, -4.014226112572572e-05, -3.991120781481269e-05, -3.991120781481269e-05, -7.039367700147773e-05, -7.418051518166732e-05, -6.870953508653149e-05, -7.167029147299919e-05, -7.531025643262524e-05, -7.531025643262524e-05, -3.403098462553472e-02, -8.428597478821465e-02, -2.531172685814536e-02, -4.839713517678969e-02, -4.308702658642137e-02, -4.308702658642137e-02, -6.848357169195514e-02, -7.083926442859795e-02, -8.039130153695327e-02, -4.377633060722997e-04, -1.036695201643186e-01, -1.036695201643186e-01, -1.411069696465788e-01, -1.168264887248268e-01, -4.592556621826078e-01, -7.190480214400370e-02, -1.439274562057618e-01, -1.439274562057616e-01, -3.888795270702501e+00, -1.002819148521341e+00, -1.477211791933593e+00, -2.122003583659810e+00, -1.755407558684837e+00, -1.755407558684837e+00, -2.416195181291999e+00, -5.232193960291207e-02, -9.307557138186104e-02, -1.972933206711338e-01, -1.295534044545255e-01, -1.295534044545255e-01, -4.666408913237668e-02, -6.565042961462728e-02, -6.559242951158473e-02, -7.149000827595459e-02, -7.531377001647369e-02, -7.531377001647367e-02, -4.237757379008829e-02, -9.066172634714280e-02, -8.192613288794426e-02, -1.404938327738998e-01, -1.171085052878657e-01, -1.171085052878658e-01, -1.026107885346530e-01, -1.290250418932742e-01, -2.537390264754878e-01, -1.405041772746924e-01, -2.022842258730102e-01, -2.022842258730099e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_th_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_th", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([5.813928292816371e-02, 5.814230010089481e-02, 5.815603100341419e-02, 5.810700415276273e-02, 5.814086699186957e-02, 5.814086699186957e-02, 3.421185477091753e-02, 3.422798550624848e-02, 3.471858647066162e-02, 3.456385875076102e-02, 3.421592135292769e-02, 3.421592135292769e-02, 3.597329474972596e-02, 3.563356901973323e-02, 2.800753219802309e-02, 3.195572421968017e-02, 3.585664159592059e-02, 3.585664159592059e-02, 1.150135739925921e-01, 1.242666878799767e-01, 1.229161716046975e-02, 1.295532373548729e-02, 1.174970387670337e-01, 1.174970387670337e-01, 2.564894019125171e-05, 2.922026463397955e-05, 7.069533558861519e-04, 8.983344677684107e-07, 2.965096131380865e-05, 2.965096131380861e-05, 5.179328058938966e-01, 5.260030586139204e-01, 5.188325598737412e-01, 5.251019689659564e-01, 5.219394120179103e-01, 5.219394120179103e-01, 4.682495882490243e-02, 5.067298510587342e-02, 4.551447374690609e-02, 4.848585398831842e-02, 5.127186402779051e-02, 5.127186402779051e-02, 5.303961913267495e-01, 1.477862496516626e+00, 3.238072039523620e-01, 6.401645840199940e-01, 7.617010274659534e-01, 7.617010274659534e-01, 5.445590291429985e-03, 3.963932641596713e-02, 6.148737323534593e-03, 2.071067905019561e-01, 1.294508937769713e-02, 1.294508937769713e-02, 1.294665162534535e-06, 1.555901299540594e-06, 2.699998977951070e-06, 1.327569667686166e-03, 1.414562992254116e-06, 1.414562992254113e-06, 6.407448236064592e+01, 1.800503090757694e+01, 2.610474489602053e+01, 3.673907978417184e+01, 3.074054021825749e+01, 3.074054021825749e+01, 3.238208159184298e+01, 6.059065400368071e-01, 1.209636047501716e+00, 2.802298021271481e+00, 1.759855085730614e+00, 1.759855085730614e+00, 9.305546490234314e-01, 7.370827806931575e-02, 1.200454625276618e-01, 2.525295482189513e-01, 1.942620480932010e-01, 1.942620480932009e-01, 3.350754078443597e-01, 5.312261446489228e-04, 1.156303170686417e-03, 4.066868221858175e-01, 5.039332536591201e-03, 5.039332536591203e-03, 1.458978226654843e-05, 3.330084831146311e-08, 5.037957751244215e-07, 5.228468234556073e-03, 1.214322679921189e-06, 1.214322679921183e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
