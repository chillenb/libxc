
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_th_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_th", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-4.005903982187074e+01, -4.006021766389627e+01, -4.006544448493787e+01, -4.004627135436417e+01, -4.005965977803869e+01, -4.005965977803869e+01, -2.219626704099187e+00, -2.220143239663515e+00, -2.235826323050090e+00, -2.229916190829834e+00, -2.219780634999941e+00, -2.795279318148074e+00, -1.941184700415660e-01, -2.427995120251578e-01, -2.039015478974253e-01, -2.193666741912541e-01, -2.438688949971479e-01, -2.438688949971479e-01, -5.651610851138553e-02, -6.008860538876171e-02, -1.555122457169966e-01, -1.216122095439694e-02, -5.752700059051673e-02, -5.752700059051673e-02, -1.094776441596515e-05, -1.253796275818895e-05, -5.149753791111735e-04, -7.169604970694074e-07, -1.242597657377463e-05, -1.242597657377462e-05, -1.792933675230214e+01, -1.807321709854004e+01, -1.794514542952953e+01, -1.433933045893444e+01, -1.800129377075073e+01, -1.800129377075073e+01, -1.005887596800794e+00, -1.054569433325687e+00, -9.853145725810080e-01, -1.023060409364704e+00, -1.067042747654817e+00, -1.343683460009770e+00, -7.286049268662805e-01, -1.469676465385873e+00, -5.368803601776007e-01, -8.423899548374820e-01, -9.180149337123716e-01, -7.290118591245305e-01, -3.848680248377152e-03, -3.332061687700583e-02, -4.011583677510958e-03, -2.980540728621193e+00, -9.219655292028381e-03, -9.219655292028381e-03, -6.312121617918391e-07, -1.079541647529597e-06, -9.011970390730539e-07, -9.503278857450425e-04, -7.197841348519953e-07, -9.063948364802896e-07, -8.557412373828088e+00, -4.276337619260733e+00, -4.145446615462973e+00, -6.284446152179595e+00, -5.703190757402857e+00, -5.703190757402857e+00, -6.116466812183317e+00, -5.875953523608292e-01, -8.931732417643357e-01, -1.460856690392889e+00, -1.116275754308833e+00, -8.864542754805443e-01, -1.260490347394016e+00, -5.068246510156772e-02, -1.068713808739426e-01, -1.851333934119455e-01, -1.655567606971276e-01, -1.655567606971275e-01, -3.081189481664060e-01, -3.940940800142117e-04, -9.294607609595927e-04, -2.756640171923939e-01, -2.691118632911009e-03, -3.388816056258309e-03, -1.100854049805451e-05, -2.328218999734880e-08, -2.238161683268314e-07, -3.223091260966351e-03, -6.595998082921765e-07, -6.595998082921733e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_th_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_th", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.201771194656054e+02, -1.201806529916888e+02, -1.201963334548136e+02, -1.201388140630925e+02, -1.201789793341161e+02, -1.201789793341161e+02, -6.658880112297561e+00, -6.660429718990543e+00, -6.707478969150269e+00, -6.689748572489502e+00, -6.659341904999822e+00, -7.810339271296087e+00, -5.823554101246980e-01, -6.784104012467643e-01, -5.697249132428061e-01, -6.129362955343864e-01, -6.813983830802662e-01, -6.813983830802662e-01, -1.579126561347537e-01, -1.678946327038930e-01, -4.665367371509898e-01, -3.397988207846204e-02, -1.607372075323262e-01, -1.607372075323262e-01, -3.058934175049085e-05, -3.503254300082206e-05, -1.438901794575338e-03, -2.003271977105697e-06, -3.471964042672323e-05, -3.471964042672322e-05, -5.009667621966775e+01, -5.049869483415598e+01, -5.014084752368545e+01, -4.301799137680330e+01, -5.029773259474467e+01, -5.029773259474467e+01, -3.017662790402381e+00, -3.163708299977061e+00, -2.955943717743024e+00, -3.069181228094111e+00, -3.201128242964452e+00, -3.754409667674357e+00, -2.035807883891078e+00, -4.106448947401705e+00, -1.500106888731531e+00, -2.353736638516494e+00, -2.565041726549274e+00, -2.187035577373591e+00, -1.154604074513146e-02, -9.310172362692803e-02, -1.203475103253287e-02, -8.327981447618040e+00, -2.576080155125577e-02, -2.576080155125577e-02, -1.893636485375518e-06, -3.016366368097404e-06, -2.518050550351180e-06, -2.850983657235128e-03, -2.159352404555986e-06, -2.532573807812574e-06, -2.391041692687260e+01, -1.194859040675794e+01, -1.243633984638892e+01, -1.755948189579593e+01, -1.593538593980210e+01, -1.593538593980210e+01, -1.709012785757103e+01, -1.641810543361141e+00, -2.495631116694468e+00, -4.081805458450720e+00, -3.119005784098210e+00, -2.659362826441633e+00, -3.521958323600926e+00, -1.520473953047032e-01, -2.986112112654277e-01, -5.554001802358365e-01, -4.625850666537389e-01, -4.625850666537386e-01, -9.243568444992181e-01, -1.101145223569121e-03, -2.597022714445921e-03, -7.702376950963944e-01, -8.073355898733028e-03, -9.468750745427627e-03, -3.075915727397583e-05, -6.505317793376871e-08, -6.253687056190879e-07, -9.005696170347155e-03, -1.842999464345788e-06, -1.842999464345778e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_th_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_th", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.562217933458581e-08, -6.562508255643916e-08, -6.563723961289236e-08, -6.559008872285647e-08, -6.562371235255005e-08, -6.562371235255005e-08, -1.081927855449611e-05, -1.082417840901621e-05, -1.097113382037936e-05, -1.091048323725301e-05, -1.082043259186740e-05, -1.082043259186740e-05, -1.668050537397660e-03, -1.655834735482063e-03, -1.373090852708032e-03, -1.516228753454971e-03, -1.663925048708466e-03, -1.663925048708466e-03, -2.127134190663894e-01, -2.221097511238744e-01, -3.612293869834532e-04, -6.782330227844355e-02, -2.151825917500238e-01, -2.151825917500238e-01, -2.629859542918401e-01, -2.611723375205011e-01, -9.771473447085645e-02, -9.252869659961624e-02, -2.731690434267442e-01, -2.731690434267439e-01, -3.961424839759025e-05, -4.020966964190590e-05, -3.967966895700370e-05, -4.014226112572572e-05, -3.991120781481269e-05, -3.991120781481269e-05, -7.039367700147773e-05, -7.418051518166732e-05, -6.870953508653149e-05, -7.167029147299919e-05, -7.531025643262524e-05, -7.531025643262524e-05, -3.403098462553472e-02, -8.428597478821465e-02, -2.531172685814536e-02, -4.839713517678969e-02, -4.308702658642137e-02, -4.308702658642137e-02, -6.848357169195514e-02, -7.083926442859795e-02, -8.039130153695327e-02, -4.377633060722997e-04, -1.036695201643186e-01, -1.036695201643186e-01, -1.411069696465788e-01, -1.168264887248268e-01, -4.592556621826078e-01, -7.190480214400370e-02, -1.439274562057618e-01, -1.439274562057616e-01, -3.888795270702501e+00, -1.002819148521341e+00, -1.477211791933593e+00, -2.122003583659810e+00, -1.755407558684837e+00, -1.755407558684837e+00, -2.416195181291999e+00, -5.232193960291207e-02, -9.307557138186104e-02, -1.972933206711338e-01, -1.295534044545255e-01, -1.295534044545255e-01, -4.666408913237668e-02, -6.565042961462728e-02, -6.559242951158473e-02, -7.149000827595459e-02, -7.531377001647369e-02, -7.531377001647367e-02, -4.237757379008829e-02, -9.066172634714280e-02, -8.192613288794426e-02, -1.404938327738998e-01, -1.171085052878657e-01, -1.171085052878658e-01, -1.026107885346530e-01, -1.290250418932742e-01, -2.537390264754878e-01, -1.405041772746924e-01, -2.022842258730102e-01, -2.022842258730099e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_th_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_th", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [3.914505367775951e-02, 3.914707057945545e-02, 3.915580456398020e-02, 3.912300704298038e-02, 3.914611673265841e-02, 3.914611673265841e-02, 2.785031586508890e-02, 2.786310419469535e-02, 2.824976594343161e-02, 2.809710450723706e-02, 2.785373267095804e-02, 4.229640887071406e-02, 3.024283463323383e-02, 4.544773840085699e-02, 3.475570738494284e-02, 3.929243899754941e-02, 4.575928846236148e-02, 4.575928846236148e-02, 1.199017900741466e-01, 1.302662495509545e-01, 1.127475628174372e-02, 1.456876095324775e-02, 1.227527613256718e-01, 1.227527613256718e-01, 2.582543781590096e-05, 2.947450607294671e-05, 7.404955731938245e-04, 1.003204386461094e-06, 2.987460996334072e-05, 2.987460996334069e-05, 5.190938780130384e-01, 5.271772865872019e-01, 5.199804013027040e-01, 3.465619049227511e-01, 5.231269898603104e-01, 5.231269898603104e-01, 3.219343452374011e-02, 3.464743865897230e-02, 3.115547979169091e-02, 3.303861983707676e-02, 3.532318975900778e-02, 5.363891778219699e-02, 6.182801925811207e-01, 1.962706537760798e+00, 3.929111716656228e-01, 8.524697545867039e-01, 8.765546156190529e-01, 5.772432834564496e-01, 3.841988539737029e-03, 4.079491447965658e-02, 4.338817851669392e-03, 2.868604735740931e-01, 1.365514136303166e-02, 1.365514136303166e-02, 9.044834474011678e-07, 1.697329017845914e-06, 2.809331497173669e-06, 9.720832361968637e-04, 1.041657937481769e-06, 1.581776868027869e-06, 7.762577930175421e+01, 1.969877715490494e+01, 1.921957333958374e+01, 4.211104690350347e+01, 3.475864615638142e+01, 3.475864615638142e+01, 4.373434262791999e+01, 6.182672497687152e-01, 1.253457264627058e+00, 2.984831213373070e+00, 1.848212398786816e+00, 1.217115482127904e+00, 1.252526413863636e+00, 4.953675444635770e-02, 1.259053695302977e-01, 1.888245542309890e-01, 2.089970166399761e-01, 2.089970166399759e-01, 2.419566059570540e-01, 5.458431641088413e-04, 1.223765653913962e-03, 4.752965736032879e-01, 3.512999556784779e-03, 5.334554882525037e-03, 1.622117200427295e-05, 3.846952340312899e-08, 5.186102112007021e-07, 5.557419661716641e-03, 1.364638130598822e-06, 1.364638130598814e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
