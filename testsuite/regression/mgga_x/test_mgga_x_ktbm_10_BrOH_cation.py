
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_10_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_10", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.340696206738357e+01, -2.340702230242719e+01, -2.340739996848741e+01, -2.340650605241648e+01, -2.340695876159899e+01, -2.340695876159899e+01, -3.450507220500270e+00, -3.450565513547508e+00, -3.452382113825689e+00, -3.454035751612345e+00, -3.452635597900567e+00, -3.452635597900567e+00, -6.445590268772329e-01, -6.441771340589943e-01, -6.357003258072960e-01, -6.436058121022457e-01, -6.422407797873220e-01, -6.422407797873220e-01, -1.869935648524689e-01, -1.896371880597300e-01, -7.394858371252720e-01, -1.370194215641876e-01, -1.769623231527488e-01, -1.769623231527488e-01, -6.325116143324707e-03, -6.658157612576876e-03, -3.653616974140020e-02, -3.625475864175767e-03, -5.077216268393109e-03, -5.077216268393109e-03, -5.708871317572628e+00, -5.709274769980711e+00, -5.708946553323825e+00, -5.709300419959172e+00, -5.709046739302782e+00, -5.709046739302782e+00, -2.126516357394890e+00, -2.150710030497476e+00, -2.122667152236874e+00, -2.144687995549239e+00, -2.141706812805325e+00, -2.141706812805325e+00, -6.128594520465371e-01, -6.534205930883890e-01, -5.484259308063818e-01, -5.522630762047938e-01, -6.247729555530048e-01, -6.247729555530049e-01, -9.510390387525154e-02, -1.847794541565921e-01, -8.801939207198353e-02, -1.882522826414471e+00, -1.126959427186573e-01, -1.126959427186573e-01, -2.766993870884176e-03, -3.522782256740790e-03, -2.711946646834504e-03, -5.907457822713517e-02, -3.410817449737128e-03, -3.410817449737129e-03, -6.322605789920082e-01, -6.320021128612069e-01, -6.321169997433964e-01, -6.321862790022982e-01, -6.321506330353233e-01, -6.321506330353233e-01, -6.094388295084192e-01, -5.448682169268980e-01, -5.654508111913931e-01, -5.835507563153884e-01, -5.740470156862372e-01, -5.740470156862372e-01, -6.760603657862851e-01, -2.365305883926626e-01, -2.831250404889887e-01, -3.606223828961627e-01, -3.226637602468426e-01, -3.226637602468427e-01, -4.834369948203417e-01, -3.502801014352626e-02, -4.758670747487741e-02, -3.483566332406132e-01, -7.558287393815538e-02, -7.558287393815541e-02, -8.806382183149598e-03, -9.294210585330050e-04, -1.997480756442477e-03, -7.112723251147370e-02, -3.132316099376778e-03, -3.132316099376775e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_10_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_10", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.830550152945994e+01, -2.830520963245880e+01, -2.830565021231716e+01, -2.830531764465659e+01, -2.830603023227489e+01, -2.830588899107510e+01, -2.830435104491427e+01, -2.830374861616038e+01, -2.830559403947807e+01, -2.830453398645014e+01, -2.830559403947807e+01, -2.830453398645014e+01, -4.475254734666069e+00, -4.475156330847375e+00, -4.475407566497531e+00, -4.475259588952112e+00, -4.478442633115205e+00, -4.479054952602164e+00, -4.477355552643870e+00, -4.477500876583643e+00, -4.474189028792789e+00, -4.480301798514549e+00, -4.474189028792789e+00, -4.480301798514549e+00, -7.999002930066897e-01, -8.033341490610600e-01, -7.987130220410588e-01, -8.026993054732791e-01, -7.834430905302140e-01, -7.803874783848249e-01, -7.910730570216746e-01, -7.929549607558239e-01, -8.081417732079066e-01, -7.758253669305203e-01, -8.081417732079066e-01, -7.758253669305203e-01, -2.192433418714138e-01, -2.284312452147769e-01, -2.212346826706027e-01, -2.317314120050476e-01, -8.983154746167510e-01, -9.197570137291892e-01, -1.698632644677502e-01, -1.728292667843794e-01, -2.283780892156725e-01, -1.255038260679673e-01, -2.283780892156722e-01, -1.255038260679672e-01, -7.784904193210148e-03, -8.270386161886795e-03, -8.159833031260225e-03, -8.738586595023280e-03, -4.545147235579908e-02, -4.796913111166901e-02, -4.695999092625152e-03, -4.615286348207512e-03, -6.950643565642900e-03, -3.976809423647133e-03, -6.950643565642908e-03, -3.976809423647132e-03, -7.015936374850960e+00, -7.014056602205669e+00, -7.020379105945259e+00, -7.018348880465092e+00, -7.016147549567778e+00, -7.014178461414949e+00, -7.019960847653736e+00, -7.018078928902764e+00, -7.018238438236190e+00, -7.016216443482285e+00, -7.018238438236190e+00, -7.016216443482285e+00, -2.468797712762569e+00, -2.468642563818668e+00, -2.486939547984653e+00, -2.486144715330458e+00, -2.453189093794391e+00, -2.457388504331587e+00, -2.468446237184591e+00, -2.472869621464224e+00, -2.491602779369078e+00, -2.479570617583899e+00, -2.491602779369078e+00, -2.479570617583899e+00, -7.778230451103902e-01, -7.759695543412974e-01, -8.956816573844598e-01, -8.969273023239737e-01, -6.877928153343212e-01, -7.237655003319893e-01, -7.566776952056460e-01, -7.889990256397283e-01, -8.158031906118965e-01, -7.729279652278126e-01, -8.158031906118967e-01, -7.729279652278130e-01, -1.203302790131168e-01, -1.214260235419235e-01, -2.259788250681527e-01, -2.269911091909254e-01, -1.090333338728571e-01, -1.147723838894398e-01, -2.671840764564050e+00, -2.670813212927812e+00, -1.371055100779408e-01, -1.447777695838699e-01, -1.371055100779409e-01, -1.447777695838699e-01, -3.547423613647203e-03, -3.684826514418763e-03, -4.532113360450813e-03, -4.603051367057989e-03, -3.379072095721510e-03, -3.579195905030567e-03, -7.548311791408281e-02, -7.587562815139968e-02, -3.482396454550121e-03, -4.725022095748723e-03, -3.482396454550123e-03, -4.725022095748726e-03, -8.381144404098911e-01, -8.415686400363263e-01, -8.182204077724090e-01, -8.218138431636403e-01, -8.250873680571211e-01, -8.286779342925708e-01, -8.309181545318112e-01, -8.343839437488124e-01, -8.279944237457029e-01, -8.315203598548679e-01, -8.279944237457029e-01, -8.315203598548679e-01, -8.216183954684799e-01, -8.242783106410854e-01, -6.221625643664023e-01, -6.251336429825672e-01, -6.664632855171175e-01, -6.701350657107107e-01, -7.234170153054837e-01, -7.263054596258146e-01, -6.936651736008878e-01, -6.964735950373550e-01, -6.936651736008880e-01, -6.964735950373551e-01, -9.338616400991737e-01, -9.373287210785379e-01, -2.835574808567849e-01, -2.850574151652314e-01, -3.339783648980865e-01, -3.370050401827156e-01, -4.370645453606102e-01, -4.395254447519040e-01, -3.807113946012288e-01, -3.805421292776387e-01, -3.807113946012288e-01, -3.805421292776390e-01, -5.751146030516706e-01, -5.797248878624239e-01, -4.452676857965147e-02, -4.484357288280580e-02, -5.995749407389669e-02, -6.194540343850070e-02, -4.253337464539851e-01, -4.349962373400780e-01, -9.337408708976139e-02, -9.841825310421672e-02, -9.337408708976132e-02, -9.841825310421680e-02, -1.121119165051643e-02, -1.162190496006847e-02, -1.229167664162379e-03, -1.234280115790398e-03, -2.468915116539165e-03, -2.626087227900099e-03, -8.947819223321765e-02, -9.091971798584103e-02, -3.293750190669954e-03, -4.330940098673674e-03, -3.293750190669950e-03, -4.330940098673664e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_10_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_10", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.319875054566114e-08, 0.000000000000000e+00, -3.320109061468811e-08, -3.319853555394636e-08, 0.000000000000000e+00, -3.320093400306385e-08, -3.319778438894785e-08, 0.000000000000000e+00, -3.319987481269203e-08, -3.320023500444269e-08, 0.000000000000000e+00, -3.320299296086097e-08, -3.319863377562274e-08, 0.000000000000000e+00, -3.320169843100453e-08, -3.319863377562274e-08, 0.000000000000000e+00, -3.320169843100453e-08, -2.802562163313824e-05, 0.000000000000000e+00, -2.801827091729086e-05, -2.803228339254596e-05, 0.000000000000000e+00, -2.802239383822413e-05, -2.815868659210466e-05, 0.000000000000000e+00, -2.817923446856995e-05, -2.811781036649325e-05, 0.000000000000000e+00, -2.811324499681178e-05, -2.802906898914602e-05, 0.000000000000000e+00, -2.822528386870094e-05, -2.802906898914602e-05, 0.000000000000000e+00, -2.822528386870094e-05, -9.103844714988494e-03, 0.000000000000000e+00, -9.283818899268520e-03, -9.068459580703360e-03, 0.000000000000000e+00, -9.258852242117524e-03, -8.463916145137593e-03, 0.000000000000000e+00, -8.478473323468273e-03, -8.963216163731197e-03, 0.000000000000000e+00, -9.138483116718223e-03, -9.175565789011859e-03, 0.000000000000000e+00, -8.558142133802397e-03, -9.175565789011859e-03, 0.000000000000000e+00, -8.558142133802397e-03, -1.222918082346582e+00, 0.000000000000000e+00, -1.359250482286530e+00, -1.233987554696848e+00, 0.000000000000000e+00, -1.379353259789808e+00, -1.937141823704436e-03, 0.000000000000000e+00, -2.336835054240767e-03, -8.227628375474320e-01, 0.000000000000000e+00, -1.001865714990204e+00, -1.036597977469610e+00, 0.000000000000000e+00, -8.145520661550024e-01, -1.036597977469610e+00, 0.000000000000000e+00, -8.145520661550026e-01, -3.203612509121560e+02, 0.000000000000000e+00, -2.865195974069662e+02, -2.947080616798340e+02, 0.000000000000000e+00, -2.610575625339844e+02, -6.398588678299824e+00, 0.000000000000000e+00, -6.056362072484746e+00, -6.712227128330950e+02, 0.000000000000000e+00, -7.120175427961942e+02, -3.818415811704904e+02, 0.000000000000000e+00, -1.244342059262695e+03, -3.818415811704900e+02, 0.000000000000000e+00, -1.244342059262694e+03, -9.931394217173620e-06, 0.000000000000000e+00, -9.941239144113749e-06, -9.931859719990004e-06, 0.000000000000000e+00, -9.941692701815941e-06, -9.931602635599094e-06, 0.000000000000000e+00, -9.941386659756683e-06, -9.931993364238470e-06, 0.000000000000000e+00, -9.941790016319343e-06, -9.931503553990388e-06, 0.000000000000000e+00, -9.941450561194310e-06, -9.931503553990388e-06, 0.000000000000000e+00, -9.941450561194310e-06, -2.553513544983161e-04, 0.000000000000000e+00, -2.565533149125703e-04, -2.579639551246442e-04, 0.000000000000000e+00, -2.590526016148162e-04, -2.540934445956687e-04, 0.000000000000000e+00, -2.556371429623372e-04, -2.568168093578955e-04, 0.000000000000000e+00, -2.582956023452789e-04, -2.576384131114496e-04, 0.000000000000000e+00, -2.581297148031640e-04, -2.576384131114496e-04, 0.000000000000000e+00, -2.581297148031640e-04, -4.695131862506831e-02, 0.000000000000000e+00, -4.792905263284373e-02, -3.981435197430575e-02, 0.000000000000000e+00, -4.009183972307204e-02, -5.253251105247077e-02, 0.000000000000000e+00, -5.209965305542326e-02, -5.436046050347272e-02, 0.000000000000000e+00, -5.120125801109512e-02, -4.327803875230256e-02, 0.000000000000000e+00, -4.980536812111181e-02, -4.327803875230258e-02, 0.000000000000000e+00, -4.980536812111182e-02, -1.177418315115018e+00, 0.000000000000000e+00, -1.149043067421519e+00, -6.248587177886034e-01, 0.000000000000000e+00, -6.163582138726416e-01, -1.310838525584768e+00, 0.000000000000000e+00, -1.306118110914613e+00, -4.175926749042570e-04, 0.000000000000000e+00, -4.184601970295587e-04, -1.287217384281070e+00, 0.000000000000000e+00, -1.618133820056139e+00, -1.287217384281070e+00, 0.000000000000000e+00, -1.618133820056140e+00, -7.020393887513627e+02, 0.000000000000000e+00, -6.464357742527143e+02, -6.182485812723575e+02, 0.000000000000000e+00, -5.488883266877941e+02, -3.376165281471925e+03, 0.000000000000000e+00, -3.132284088161820e+03, -2.560932181218657e+00, 0.000000000000000e+00, -2.925364416215816e+00, -8.022590396606074e+02, 0.000000000000000e+00, -1.481108381862399e+03, -8.022590396606097e+02, 0.000000000000000e+00, -1.481108381862398e+03, -6.387170003219692e-02, 0.000000000000000e+00, -6.293676477228927e-02, -6.427215885205000e-02, 0.000000000000000e+00, -6.334429951814136e-02, -6.416270013956772e-02, 0.000000000000000e+00, -6.323087114818006e-02, -6.404785987149031e-02, 0.000000000000000e+00, -6.311433215574043e-02, -6.410788359161679e-02, 0.000000000000000e+00, -6.317517227193865e-02, -6.410788359161679e-02, 0.000000000000000e+00, -6.317517227193865e-02, -7.040519386009488e-02, 0.000000000000000e+00, -6.956280215007959e-02, -9.139008409932978e-02, 0.000000000000000e+00, -9.047325972659355e-02, -8.880068274145941e-02, 0.000000000000000e+00, -8.775990363023439e-02, -8.313934174577609e-02, 0.000000000000000e+00, -8.209330199787368e-02, -8.628686489765419e-02, 0.000000000000000e+00, -8.528667501600035e-02, -8.628686489765419e-02, 0.000000000000000e+00, -8.528667501600035e-02, -3.130221866347113e-02, 0.000000000000000e+00, -3.166015681789559e-02, -4.624557734405724e-01, 0.000000000000000e+00, -4.597027869125966e-01, -3.673819957053506e-01, 0.000000000000000e+00, -3.691160635076993e-01, -2.448460936224039e-01, 0.000000000000000e+00, -2.398702843983795e-01, -3.257769420455954e-01, 0.000000000000000e+00, -3.286932985281180e-01, -3.257769420455956e-01, 0.000000000000000e+00, -3.286932985281182e-01, -1.061387859591292e-01, 0.000000000000000e+00, -1.068497246815966e-01, -7.316914351540005e+00, 0.000000000000000e+00, -7.069808612083343e+00, -3.609719814598689e+00, 0.000000000000000e+00, -3.504162419500176e+00, -3.404683601823245e-01, 0.000000000000000e+00, -3.694517596678084e-01, -2.274598618900946e+00, 0.000000000000000e+00, -2.474056366380382e+00, -2.274598618900947e+00, 0.000000000000000e+00, -2.474056366380383e+00, -8.328481171860564e+01, 0.000000000000000e+00, -7.552405425915389e+01, -4.598877789924855e+03, 0.000000000000000e+00, -3.009213148348178e+03, -4.497479691687735e+03, 0.000000000000000e+00, -4.082018211471004e+03, -2.701187785932361e+00, 0.000000000000000e+00, -2.980124801770641e+00, -1.647551418572421e+03, 0.000000000000000e+00, -1.793098995537212e+03, -1.647551418572423e+03, 0.000000000000000e+00, -1.793098995537218e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_10_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_10", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.141503655017377e-03, 2.141707393262064e-03, 2.141504360098778e-03, 2.141707873351606e-03, 2.141523689462891e-03, 2.141730740662169e-03, 2.141517253925710e-03, 2.141722215210708e-03, 2.141503982043096e-03, 2.141738045194874e-03, 2.141503982043096e-03, 2.141738045194874e-03, 5.642039864421912e-03, 5.635179764913970e-03, 5.644536754519491e-03, 5.636333222590584e-03, 5.687603122769070e-03, 5.693892236493514e-03, 5.693916757792105e-03, 5.689010698360966e-03, 5.637890775660306e-03, 5.728143178301833e-03, 5.637890775660306e-03, 5.728143178301833e-03, 6.715648409227090e-03, 6.854643093688540e-03, 6.708074620561886e-03, 6.816607595438082e-03, 6.333675739399028e-03, 6.724163216615538e-03, 7.979915833750338e-03, 8.220195737984288e-03, 6.420521074035438e-03, 9.228326331112239e-03, 6.420521074035438e-03, 9.228326331112239e-03, 4.871707273279147e-02, 6.537602937022222e-02, 4.980071882792077e-02, 6.877637817452519e-02, -8.267839564287824e-04, -6.905128408022599e-04, 1.125675959474218e-02, 1.690625184816387e-02, 4.586735853049544e-02, 3.418262876460985e-03, 4.586735853049526e-02, 3.418262876460984e-03, 5.008164023070440e-04, 5.412556444693716e-04, 5.258929851778686e-04, 5.778831810720819e-04, 1.794471851988725e-03, 2.043015732795118e-03, 2.036750313722823e-04, 2.093466337571229e-04, 4.133263031139009e-04, 2.037858774708980e-04, 4.133263031138997e-04, 2.037858774709011e-04, 9.093383871506149e-03, 9.096289394549768e-03, 9.093606292537323e-03, 9.096503522118479e-03, 9.093699144390011e-03, 9.096515123961287e-03, 9.093877457464381e-03, 9.096697533324538e-03, 9.093273704172646e-03, 9.096362615350200e-03, 9.093273704172646e-03, 9.096362615350200e-03, 1.416441555862697e-02, 1.427300162911160e-02, 1.478287779384828e-02, 1.486948228294193e-02, 1.416131813539901e-02, 1.426234448902314e-02, 1.473067563981880e-02, 1.483892576195731e-02, 1.452053300824051e-02, 1.459658360407927e-02, 1.452053300824051e-02, 1.459658360407927e-02, 5.749911078273674e-02, 5.862100690186724e-02, 5.917284787645626e-02, 5.997170473159917e-02, 3.989282562426155e-02, 4.848717393030247e-02, 4.299804545827245e-02, 4.854247019940517e-02, 6.092550412424727e-02, 5.802022290926508e-02, 6.092550412424724e-02, 5.802022290926517e-02, 6.241010282181234e-03, 6.145582029211344e-03, 2.708753324065672e-02, 2.697197903518209e-02, 4.907160924191177e-03, 5.967823736477005e-03, 1.475778302119656e-02, 1.477130361535835e-02, 1.085080432723864e-02, 1.692911666742962e-02, 1.085080432723865e-02, 1.692911666742972e-02, 6.471093194982982e-05, 6.896656388165371e-05, 1.480077850775781e-04, 1.343069493009888e-04, 3.800737412650118e-04, 4.160552515273313e-04, 3.042661977184980e-03, 3.892759054463705e-03, 5.918178470029273e-05, 5.094129076882568e-04, 5.918178470029383e-05, 5.094129076882588e-04, 7.940909084447061e-02, 7.914860982647974e-02, 7.979543535673725e-02, 7.954037127097981e-02, 7.968178928735400e-02, 7.942416445888890e-02, 7.956958368225103e-02, 7.931014609217439e-02, 7.962676297584684e-02, 7.936850251028808e-02, 7.962676297584684e-02, 7.936850251028807e-02, 7.990296007548012e-02, 7.976334519263377e-02, 7.974254022818639e-02, 7.981155807321598e-02, 8.295061513698002e-02, 8.290420735467699e-02, 8.322146494814123e-02, 8.300130072383485e-02, 8.313714411714423e-02, 8.309014137844126e-02, 8.313714411714425e-02, 8.309014137844119e-02, 5.150033820732535e-02, 5.300977922810544e-02, 4.167416961904816e-02, 4.205321593796877e-02, 5.199527189883577e-02, 5.370604727767608e-02, 6.122536110743195e-02, 6.059230827807863e-02, 6.409704679936515e-02, 6.449407749969308e-02, 6.409704679936529e-02, 6.449407749969313e-02, 6.488661586909635e-02, 6.740563704961140e-02, 2.091403519449041e-03, 2.039047860430419e-03, 2.299980345900198e-03, 2.482521590715291e-03, 7.131178945360570e-02, 8.899490121732409e-02, 5.685987867385564e-03, 7.384588218519808e-03, 5.685987867385579e-03, 7.384588218519830e-03, 2.969951216521933e-04, 2.943868000610725e-04, 1.215959195613513e-05, 6.004589376404089e-06, 2.123686771650044e-04, 2.313429242025512e-04, 6.102204609933924e-03, 7.653527102563614e-03, 1.155755500300346e-04, 4.745341334722704e-04, 1.155755500300303e-04, 4.745341334722590e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
