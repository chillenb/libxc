
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_10_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_10", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.105705558706871e+01, -2.105716359149205e+01, -2.105764205334828e+01, -2.231573359294688e+01, -2.231639305084765e+01, -2.357604933764206e+01, -3.512610120088260e+00, -3.890567820870927e+00, -3.890876912523741e+00, -3.891105457625118e+00, -3.890674868094004e+00, -3.512945708804496e+00, -5.981195507386385e-01, -6.702428121818202e-01, -7.181226971735792e-01, -6.563906587537054e-01, -5.892226597908506e-01, -7.255931114347520e-01, -1.755025432750509e-01, -1.783524365924126e-01, -7.772261949647661e-01, -1.403558356324806e-01, -1.807197622549089e-01, -1.799415537604120e-01, -6.328312419731072e-03, -6.585796826978483e-03, -3.625879632152908e-02, -3.648474461411008e-03, -5.092865188151889e-03, -5.092865188151889e-03, -5.711858306544533e+00, -5.712226996433420e+00, -5.711871418348972e+00, -5.712197273496476e+00, -5.488961402702596e+00, -5.489160420652123e+00, -2.187138433852558e+00, -2.203793910320744e+00, -2.174833590359941e+00, -2.189676521558168e+00, -1.982693719167011e+00, -2.202273913307045e+00, -6.027015582718118e-01, -7.027857950179959e-01, -6.075113169327150e-01, -6.291885328553609e-01, -6.176619514004862e-01, -6.642794335086578e-01, -9.642424368735061e-02, -1.752239704876672e-01, -8.923320222252162e-02, -2.134078428114206e+00, -1.140851983134077e-01, -1.140851983134077e-01, -2.781469444357355e-03, -3.566599964204026e-03, -2.731378471221122e-03, -5.846020525556835e-02, -3.431090028796824e-03, -3.431090028796826e-03, -6.387213880513555e-01, -6.382001913437969e-01, -6.148172103567516e-01, -6.287175133668430e-01, -6.168730108259866e-01, -6.276400821284469e-01, -6.218421997569802e-01, -5.014388828258103e-01, -5.320572495565973e-01, -5.935850644790874e-01, -5.834514346233060e-01, -5.475248856603988e-01, -6.964817726405701e-01, -2.387499396834415e-01, -2.636822350467656e-01, -3.495728355550992e-01, -3.362437391839451e-01, -3.022896528358768e-01, -5.071611284240540e-01, -3.403059464106965e-02, -4.798885142925344e-02, -3.748962421344111e-01, -7.641107417701945e-02, -7.641107417701945e-02, -8.676522398849152e-03, -9.532578192173852e-04, -1.950389163247033e-03, -6.792290624910649e-02, -3.150854272522113e-03, -3.086008156151086e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_10_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_10", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.072560996646497e+01, -3.072576025595340e+01, -3.072573710583612e+01, -3.072585256868472e+01, -3.072615297410593e+01, -3.072644582564436e+01, -3.072471870600855e+01, -2.811115499892259e+01, -3.072568605399174e+01, -2.811204542469196e+01, -2.811226226745302e+01, -2.811204542469196e+01, -4.366198329311525e+00, -4.506247578002066e+00, -4.366206489367841e+00, -4.366144861572373e+00, -4.366355283707806e+00, -4.366429754181835e+00, -4.366667123840402e+00, -4.366728279948179e+00, -4.365480638682736e+00, -4.366954430342402e+00, -4.505185512646294e+00, -4.366954430342402e+00, -7.611712919088874e-01, -7.664825979584132e-01, -7.593632801032060e-01, -8.623346835365995e-01, -8.451246674673142e-01, -8.399743347542467e-01, -8.468742164476698e-01, -7.444520597885494e-01, -7.739528126599947e-01, -7.106802161654309e-01, -8.687403107484843e-01, -8.221249835553067e-01, -1.909876522458731e-01, -2.294440012471527e-01, -1.929887384673871e-01, -2.330684710304538e-01, -1.006705502574713e+00, -8.910015786714183e-01, -1.726209015276926e-01, -1.748153436512880e-01, -2.315481781579833e-01, -1.262892027604247e-01, -2.315481781579834e-01, -1.225336369894039e-01, -7.781659989650925e-03, -8.268906700070213e-03, -8.314576561824192e-03, -8.735194555331744e-03, -4.586339546207429e-02, -4.785010969791365e-02, -4.677852847907840e-03, -4.599907063788379e-03, -6.942023209764170e-03, -3.950492036358338e-03, -6.942023209764170e-03, -3.950492036358339e-03, -7.012109794172170e+00, -7.010449947109373e+00, -7.016592122523887e+00, -7.014780637478776e+00, -7.012410643980898e+00, -7.010636164638756e+00, -7.016254627990111e+00, -7.014568309334042e+00, -7.531450289575402e+00, -7.012618036703556e+00, -7.014365892128536e+00, -7.529609151712960e+00, -2.464934539311348e+00, -2.464552465157695e+00, -2.480696021174472e+00, -2.479866729769859e+00, -2.452136445844820e+00, -2.455380854174225e+00, -2.465444848032067e+00, -2.468972794628588e+00, -2.483581356732634e+00, -2.460669343435069e+00, -2.483581356732634e+00, -2.473864848719457e+00, -7.459133686168080e-01, -8.159145330977501e-01, -8.409642636804401e-01, -8.435469475053025e-01, -6.690638120697446e-01, -6.952298785126028e-01, -7.030389086031037e-01, -7.315593113017855e-01, -7.835330150942842e-01, -8.098438939023610e-01, -7.835330150942842e-01, -7.384834973452117e-01, -1.206008169182058e-01, -1.217433838810182e-01, -2.006419966750113e-01, -2.287014559293478e-01, -1.091682757871003e-01, -1.149846804176533e-01, -2.461338978380681e+00, -2.460346487585448e+00, -1.377380007855875e-01, -1.456396474844554e-01, -1.377380007855875e-01, -1.456396474844555e-01, -3.579438411831040e-03, -3.647002321628008e-03, -4.500921945549911e-03, -4.569044600386421e-03, -3.365657082817050e-03, -3.564343200382076e-03, -7.532245852963335e-02, -7.545462481202748e-02, -3.437526389222627e-03, -4.720772542306105e-03, -3.437526389222625e-03, -4.720772542306109e-03, -8.295051847522392e-01, -8.331548716961532e-01, -8.100825558994210e-01, -8.138461667074662e-01, -8.471269407407154e-01, -8.503565736696391e-01, -8.479423074109734e-01, -8.261118620153158e-01, -8.475489694836129e-01, -8.507661578920908e-01, -8.475489694836129e-01, -8.233113192645415e-01, -8.051966476930013e-01, -8.083541788699192e-01, -6.188388131829468e-01, -6.697906179000859e-01, -6.592274012092220e-01, -7.299372031607587e-01, -7.117661408652500e-01, -7.146608940375657e-01, -6.835920328995597e-01, -6.866610614881565e-01, -6.835920328995598e-01, -7.548308288612419e-01, -8.692284001958640e-01, -9.591079689138303e-01, -2.852820246514652e-01, -2.868527247620785e-01, -2.945631324026827e-01, -3.412642264170904e-01, -4.297538660414409e-01, -4.392364237707452e-01, -3.848354362955297e-01, -3.845929710371250e-01, -3.848354362955296e-01, -3.555635787954373e-01, -5.671584664864742e-01, -5.710953026101604e-01, -4.501006700032559e-02, -4.531669969085384e-02, -5.979294037910926e-02, -6.178925651787501e-02, -4.176299677137341e-01, -4.242852932201711e-01, -9.341167890025052e-02, -9.856641897000740e-02, -9.341167890025050e-02, -9.856641897000734e-02, -1.134886260385105e-02, -1.175991928915644e-02, -1.210920637560218e-03, -1.213688278030899e-03, -2.513187122078892e-03, -2.672954279662421e-03, -8.789423253435617e-02, -8.900367927877678e-02, -3.256060814405102e-03, -4.326945862106225e-03, -3.256060814405096e-03, -4.412864877519739e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_10_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_10", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.032464460146034e-08, 0.000000000000000e+00, -3.032661434512419e-08, -3.032451891299969e-08, 0.000000000000000e+00, -3.032652263531335e-08, -3.032393961702283e-08, 0.000000000000000e+00, -3.032574170488943e-08, -3.032538107916414e-08, 0.000000000000000e+00, -3.341410483982153e-08, -3.032458546195146e-08, 0.000000000000000e+00, -3.341267100069620e-08, -3.341052309185648e-08, 0.000000000000000e+00, -3.341267100069620e-08, -3.105113475920247e-05, 0.000000000000000e+00, -2.593218470926684e-05, -3.105776363847500e-05, 0.000000000000000e+00, -3.105152735423204e-05, -3.118710294984374e-05, 0.000000000000000e+00, -3.120892448758091e-05, -3.112959380470660e-05, 0.000000000000000e+00, -3.112803003723139e-05, -3.105626358243259e-05, 0.000000000000000e+00, -3.124214499406325e-05, -2.593906215779348e-05, 0.000000000000000e+00, -3.124214499406325e-05, -8.389264612754565e-03, 0.000000000000000e+00, -8.581845458039855e-03, -8.347110593971793e-03, 0.000000000000000e+00, -1.077091154426233e-02, -9.812994649405814e-03, 0.000000000000000e+00, -9.787001307580026e-03, -1.027430254302546e-02, 0.000000000000000e+00, -8.247006909916168e-03, -8.529459202669596e-03, 0.000000000000000e+00, -7.407812177076241e-03, -1.071561086481929e-02, 0.000000000000000e+00, -9.605958183066410e-03, -9.235083288966854e-01, 0.000000000000000e+00, -1.372649179152283e+00, -9.441172241411033e-01, 0.000000000000000e+00, -1.396786781128445e+00, -2.532098298704791e-03, 0.000000000000000e+00, -2.212391384930810e-03, -9.329610064143625e-01, 0.000000000000000e+00, -1.076048828156965e+00, -1.070918980711494e+00, 0.000000000000000e+00, -1.078402570816462e+00, -1.070918980711494e+00, 0.000000000000000e+00, -3.008484741758102e-01, -3.244908478793773e+02, 0.000000000000000e+00, -2.880891499284392e+02, 4.844269384751907e+01, 0.000000000000000e+00, -2.641931798404972e+02, 5.131628061205660e-01, 0.000000000000000e+00, -6.699868049117534e+00, -7.662055070803170e+02, 0.000000000000000e+00, -7.964124900610278e+02, -3.970439363502294e+02, 0.000000000000000e+00, -1.601279634273026e+03, -3.970439363502294e+02, 0.000000000000000e+00, -1.601279634273026e+03, -9.936178093447251e-06, 0.000000000000000e+00, -9.945753384877582e-06, -9.936589592739224e-06, 0.000000000000000e+00, -9.946154762397499e-06, -9.936274091359892e-06, 0.000000000000000e+00, -9.945820163001391e-06, -9.936622682584337e-06, 0.000000000000000e+00, -9.946180207993440e-06, -9.253442444877171e-06, 0.000000000000000e+00, -9.945952403460727e-06, -9.936342582437427e-06, 0.000000000000000e+00, -9.262338682039505e-06, -2.619869289243373e-04, 0.000000000000000e+00, -2.630133295967322e-04, -2.637296381208135e-04, 0.000000000000000e+00, -2.646738176962663e-04, -2.596781857309961e-04, 0.000000000000000e+00, -2.613732069890350e-04, -2.616110437640409e-04, 0.000000000000000e+00, -2.632109600036172e-04, -2.645214825501653e-04, 0.000000000000000e+00, -2.181865311010226e-04, -2.645214825501653e-04, 0.000000000000000e+00, -2.642454180607964e-04, -4.968494865966643e-02, 0.000000000000000e+00, -4.388930054388886e-02, -4.246497672676237e-02, 0.000000000000000e+00, -4.265947852212824e-02, -5.781034509869074e-02, 0.000000000000000e+00, -5.642375878624679e-02, -6.113125586358022e-02, 0.000000000000000e+00, -5.673779257016385e-02, -4.534203233868342e-02, 0.000000000000000e+00, -4.592469183751947e-02, -4.534203233868345e-02, 0.000000000000000e+00, -5.287939168693215e-02, -1.315686715359702e+00, 0.000000000000000e+00, -1.296198821206324e+00, -4.210156342918939e-01, 0.000000000000000e+00, -6.332405028698506e-01, -1.511554285384559e+00, 0.000000000000000e+00, -1.465588876600883e+00, -4.642026149017877e-04, 0.000000000000000e+00, -4.651517045267436e-04, -1.385265761954799e+00, 0.000000000000000e+00, -1.704212959340302e+00, -1.385265761954799e+00, 0.000000000000000e+00, -1.704212959340303e+00, 1.914533346953538e+02, 0.000000000000000e+00, -1.030622751052238e+03, -8.059582867397527e+02, 0.000000000000000e+00, -7.342596096064010e+02, -3.870307506399722e+03, 0.000000000000000e+00, -3.616625334300388e+03, -3.070434972031279e+00, 0.000000000000000e+00, -2.939342861517020e-01, -1.608912113328116e+03, 0.000000000000000e+00, -1.523152963833374e+03, -1.608912113328116e+03, 0.000000000000000e+00, -1.523152963833374e+03, -6.447765228971182e-02, 0.000000000000000e+00, -6.351791648819187e-02, -6.485072581026900e-02, 0.000000000000000e+00, -6.390007709241594e-02, -6.256053885079867e-02, 0.000000000000000e+00, -6.168550560163436e-02, -6.281940810803098e-02, 0.000000000000000e+00, -6.368717587543210e-02, -6.269172394753225e-02, 0.000000000000000e+00, -6.180823477682944e-02, -6.269172394753225e-02, 0.000000000000000e+00, -6.374440268102562e-02, -7.173479876481480e-02, 0.000000000000000e+00, -7.083131964767479e-02, -9.217189929306684e-02, 0.000000000000000e+00, -7.778015332635314e-02, -8.986458054705133e-02, 0.000000000000000e+00, -7.808692338137163e-02, -8.440340028559430e-02, 0.000000000000000e+00, -8.333401586055961e-02, -8.754386599884595e-02, 0.000000000000000e+00, -8.648582771349779e-02, -8.754386599884596e-02, 0.000000000000000e+00, -7.742871361912998e-02, -3.387548720377623e-02, 0.000000000000000e+00, -3.072467070739006e-02, -4.691756401669971e-01, 0.000000000000000e+00, -4.665653146186322e-01, -2.950594079334633e-01, 0.000000000000000e+00, -3.795360196780797e-01, -2.152453188267174e-01, 0.000000000000000e+00, -2.564416133968030e-01, -3.390483443152450e-01, 0.000000000000000e+00, -3.421457124999404e-01, -3.390483443152453e-01, 0.000000000000000e+00, -2.766633697019941e-01, -1.108389568463988e-01, 0.000000000000000e+00, -1.111953043534258e-01, 5.544468994059240e-01, 0.000000000000000e+00, 5.392569691489504e-01, -4.117154381152250e+00, 0.000000000000000e+00, -3.971307169217682e+00, -3.666121983340540e-01, 0.000000000000000e+00, -3.896608478485323e-01, -2.531358305636614e+00, 0.000000000000000e+00, -2.721893863274425e+00, -2.531358305636617e+00, 0.000000000000000e+00, -2.721893863274425e+00, 1.761274562049001e+01, 0.000000000000000e+00, 1.624779140671123e+01, -1.192640674976193e+04, 0.000000000000000e+00, -1.184594964890184e+04, 7.918259248218346e+02, 0.000000000000000e+00, 7.200942628182821e+02, -5.889259992367412e-01, 0.000000000000000e+00, -6.929937784943924e-01, -2.881893004081238e+03, 0.000000000000000e+00, -1.845322919320120e+03, -2.881893004081245e+03, 0.000000000000000e+00, 3.014028672758722e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_10_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_10", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.553455898052887e-03, 1.553645292839318e-03, 1.553478385397209e-03, 1.553661588823841e-03, 1.553539016667672e-03, 1.553751595878833e-03, 1.553287156084250e-03, 2.186058350620825e-03, 1.553470591556113e-03, 2.186043591824801e-03, 2.186004990981904e-03, 2.186043591824801e-03, 1.040563006111569e-02, 2.456339268566980e-03, 1.040733297857630e-02, 1.040547416757967e-02, 1.044040331424531e-02, 1.044619640110672e-02, 1.042751743040152e-02, 1.042741642821048e-02, 1.040350093160862e-02, 1.045694686240588e-02, 2.453714618441175e-03, 1.045694686240588e-02, -3.317527467026612e-03, -3.104827348290794e-03, -3.375901958242335e-03, 2.909911946110683e-02, 2.486079184090033e-02, 2.432650353653060e-02, 2.622747899425160e-02, -3.720211147112830e-03, -2.939760531286991e-03, -4.322601946669516e-03, 2.961029250168493e-02, 2.231783876537761e-02, -1.463072878153855e-02, 6.900357874583099e-02, -1.488539083265866e-02, 7.379324316750946e-02, 1.060293569893663e-02, -3.299529357750747e-03, 1.871501056009409e-02, 2.263140120252152e-02, 5.491589456577135e-02, 8.012987409617410e-03, 5.491589456577142e-02, -1.805107907694143e-03, 5.134894880773785e-04, 5.470592205939604e-04, -1.511815767687091e-06, 5.915130520624910e-04, -1.236043130942590e-04, 2.519091380895683e-03, 2.632264943608878e-04, 2.601516137481540e-04, 4.459870659840396e-04, 3.313393121531793e-04, 4.459870659840396e-04, 3.313393121531782e-04, 9.105876788380514e-03, 9.108069572244150e-03, 9.105928252170567e-03, 9.108120260051788e-03, 9.105896394075415e-03, 9.108083377565468e-03, 9.105939571955043e-03, 9.108128418243338e-03, 7.361176348549624e-03, 9.108096664398813e-03, 9.105895299843979e-03, 7.362774048311687e-03, 1.625912274128619e-02, 1.630822547871422e-02, 1.660823881789645e-02, 1.664532113936371e-02, 1.592276829858268e-02, 1.606867446330669e-02, 1.624715754961888e-02, 1.639101425110808e-02, 1.669660356958328e-02, 2.366772155447653e-03, 1.669660356958328e-02, 1.652583988160681e-02, 7.348613526818477e-02, 3.617934340637436e-02, 7.345569532578852e-02, 7.358587144012479e-02, 6.923064528175805e-02, 7.259669676720171e-02, 7.686714108091540e-02, 7.680844310763378e-02, 7.322396048282717e-02, 3.728668100681665e-02, 7.322396048282723e-02, 7.499392087907894e-02, 8.519729631689453e-03, 8.643995678187345e-03, -9.305591748677754e-03, 3.057432698686894e-02, 7.170527627008013e-03, 8.192356698349558e-03, 2.328122713589721e-02, 2.329461448313752e-02, 1.376047002413071e-02, 2.045233803983247e-02, 1.376047002413067e-02, 2.045233803983256e-02, -6.177758227316744e-08, 1.677614462969244e-04, 2.466322532062026e-04, 2.350472502896508e-04, 4.952700656184216e-04, 5.497401849906598e-04, 4.632355881034839e-03, -6.980763757648498e-04, 2.193151392994624e-04, 5.379654893202154e-04, 2.193151392994618e-04, 5.379654893202194e-04, 8.107989348988903e-02, 8.076364946729263e-02, 8.157169015432832e-02, 8.125822761509026e-02, 7.499202475402364e-02, 7.486848562085201e-02, 7.607925647280299e-02, 8.096627431792545e-02, 7.554216907478874e-02, 7.539625803601462e-02, 7.554216907478874e-02, 8.103987932212121e-02, 8.333280203186218e-02, 8.305448286511170e-02, 8.278244509594142e-02, 3.176216869469771e-02, 8.679103408889519e-02, 4.892574406240579e-02, 8.728161402600879e-02, 8.701365825743740e-02, 8.744175103541962e-02, 8.721889046508248e-02, 8.744175103541960e-02, 5.679603591790890e-02, 6.903211264837041e-02, 4.697474211894920e-02, 4.501193197869424e-02, 4.553230652830242e-02, -1.007474646825007e-02, 6.335649625558092e-02, 1.068411573273968e-02, 9.019890706860878e-02, 8.144308003929292e-02, 8.202180428244234e-02, 8.144308003929294e-02, -1.265453937207117e-03, 8.107272976732388e-02, 8.232477555429547e-02, -1.229465975049765e-04, -1.229795511860842e-04, 3.047856995984052e-03, 3.252404784658501e-03, 1.078248404371076e-01, 1.158113118004936e-01, 7.485852592836728e-03, 9.585029114146743e-03, 7.485852592836672e-03, 9.585029114146701e-03, -1.790105893789870e-06, -1.963204712322974e-06, 7.105418404561490e-05, 7.105986396399151e-05, -8.888931896563754e-08, -1.133025400197366e-07, -1.465196970986297e-03, -1.714287194491911e-03, 3.338766158490131e-04, 5.018255163069399e-04, 3.338766158490102e-04, -6.753388697924340e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
