
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_gdme_kos_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_kos", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-9.144733602614682e+00, -9.144828923784491e+00, -9.145378738293008e+00, -9.143962605851547e+00, -9.144686924479336e+00, -9.144686924479336e+00, -3.755647720588648e+00, -3.755665327426106e+00, -3.756064837373617e+00, -3.755894807097564e+00, -3.755878162574408e+00, -3.755878162574408e+00, -8.866360319481339e-01, -8.876476425049517e-01, -9.184419911643904e-01, -9.055509004069382e-01, -9.030585640561118e-01, -9.030585640561118e-01, -3.803365073383856e-01, -3.695304167088478e-01, -1.048980752781324e+00, -5.251184535583432e-01, -3.867687552930351e-01, -3.867687552930352e-01, -1.111402075628490e+01, -1.039777469981288e+01, -2.019975096785847e+00, -2.027813037778245e+01, -1.566925440491313e+01, -1.566925440491313e+01, -5.422728333546729e+01, -2.241749615264132e+01, 2.996004127512144e+02, -1.074189592828231e+02, 4.927457911936323e+00, -1.096992437588868e+01, 4.016572746604858e+02, -6.474297345844081e+00, -3.180625159734852e+00, -3.177044544545790e+00, -3.214895430048581e+00, -1.601356764346661e+00, -1.422959336897246e+01, -4.799693094663670e+00, -1.248872123221123e+01, -8.663127168796141e-01, -9.698054800792448e-01, -1.278398729870099e+00, 7.656115655706969e+00, -6.512198914937208e+00, 5.071161747210332e+01, -3.154116849844370e+00, -1.594976975520824e-01, 3.291054860835222e-01, -3.842817241955323e+02, -3.504712244269120e+05, 1.624552252277342e+05, 1.235428978167113e+01, -7.253103229002528e+01, 4.487636066037998e+03, -8.436358670223929e+04, 3.423266942061912e+04, 5.921194148560276e+05, -7.576359587883029e+02, 1.092613842725200e+04, -1.070862068808438e+06, 3.241667414876365e+05, -6.717913458284691e-01, -8.625679970206264e+00, 8.351045560543781e-01, -1.191990032002946e+00, -2.076839273708605e+01, -1.687272659353227e+01, 6.199369885280667e+01, 9.451973246559903e+01, 8.561628864041397e+00, -1.529851679425223e+00, -8.974065650700002e-01, -6.888774876175069e-01, 1.496518931898558e+01, -2.283293045894753e+00, -4.798599978846607e-01, 2.715989642331911e+01, -5.918738564299221e-02, 6.547367439438701e+02, 5.763897493639150e+02, 3.127686528098760e+03, 2.315908442802022e+00, 8.105026035313221e+02, 1.510583408359181e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_gdme_kos_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_kos", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-5.568436150111518e+01, -5.568449352504727e+01, -5.568508901216477e+01, -5.568312302586713e+01, -5.568415187742633e+01, -5.568415187742633e+01, -8.310292679458403e+00, -8.310307449523833e+00, -8.310885629278687e+00, -8.311521327564389e+00, -8.310471116593840e+00, -8.310471116593840e+00, -1.548812239473661e+00, -1.546441578698250e+00, -1.487245325332527e+00, -1.506428551017588e+00, -1.504093601773530e+00, -1.504093601773530e+00, -3.494549193996382e-01, -3.602694888454940e-01, -1.800953682661598e+00, -1.865079157997243e-01, -2.770658845231325e-01, -2.770658845231325e-01, 3.688095372502148e+00, 3.448475644245220e+00, 5.770556834495461e-01, 6.749802356417980e+00, 5.211053789744999e+00, 5.211053789744999e+00, 3.759148272181636e+00, -6.846742466452652e+00, -1.141835479956264e+02, 2.148725582319463e+01, -1.596042577701842e+01, -1.066129834774341e+01, -1.392670903944829e+02, -3.262266540657470e+00, -4.292627740005286e+00, -4.328316277305814e+00, -4.345054652450894e+00, -4.882900874351534e+00, 3.129869574490070e+00, -1.527449371434351e-01, 2.670091026744712e+00, -1.263027590849578e+00, -1.316070164061355e+00, -1.213205747464404e+00, -2.803055283999998e+00, 1.693775993501320e+00, -1.713609453561007e+01, -4.227056056763235e+00, -2.414106185345733e-01, -4.042783464131082e-01, 1.280865207505002e+02, 1.168237321157789e+05, -5.415174889957574e+04, -4.274284923383036e+00, 2.416838880013657e+01, -1.495887310642538e+03, 2.811957440571745e+04, -1.141250166918764e+04, -1.973747534199675e+05, 2.509274896863466e+02, -3.643662623216821e+03, 3.569524064553459e+05, -1.080571577134076e+05, -1.129997189395443e+00, 1.457448122264686e+00, -1.759477134976297e+00, -1.051434642266496e+00, 5.474032926094545e+00, 3.786826815837916e+00, -2.126717193169321e+01, -3.223027551908066e+01, -3.809780821843190e+00, -3.213426575510509e-01, -5.321576956694578e-01, -1.016854866567938e+00, -5.080538428431991e+00, 6.354769031155947e-01, -7.615530079474281e-01, -9.252176206683760e+00, -1.791482703630587e-01, -2.182689782636903e+02, -1.921324184047582e+02, -1.042567427736918e+03, -9.587238623783838e-01, -2.701755125233718e+02, -5.035357807993239e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gdme_kos_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_kos", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gdme_kos_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_kos", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([-1.839935384454746e-03, -1.839930253126821e-03, -1.839905857162677e-03, -1.839982234851648e-03, -1.839942438864724e-03, -1.839942438864724e-03, -1.130121517401161e-02, -1.130119078150703e-02, -1.130035012720693e-02, -1.129966594721164e-02, -1.130091350928839e-02, -1.130091350928839e-02, -5.859178341279718e-02, -5.865645383938283e-02, -6.025685435976162e-02, -5.976080514170014e-02, -5.986561101417942e-02, -5.986561101417942e-02, -2.269141968422323e-01, -2.235288620763255e-01, -5.024807027326390e-02, -2.988935889740250e-01, -2.661753212879408e-01, -2.661753212879408e-01, -6.518446864386760e+00, -6.193054991603315e+00, -1.122519279487457e+00, -1.128674295562086e+01, -8.982137249080953e+00, -8.982137249080953e+00, -7.548168081098797e-03, -7.546782589735003e-03, -7.548099064194947e-03, -7.546876006381837e-03, -7.547468527387296e-03, -7.547468527387296e-03, -2.008131008550101e-02, -1.993669927917596e-02, -2.018821378240051e-02, -2.005894895792992e-02, -1.995024094793310e-02, -1.995024094793310e-02, -6.698215468475616e-02, -6.165786332314212e-02, -7.238949502044699e-02, -6.963803632431796e-02, -6.591938741664587e-02, -6.591938741664587e-02, -4.305059633378410e-01, -2.265701206134880e-01, -4.653485852645594e-01, -2.047279854986358e-02, -3.668459417693841e-01, -3.668459417693841e-01, -1.462834667059121e+01, -1.154549515361581e+01, -1.509909675347276e+01, -6.918839609632654e-01, -1.253359559694936e+01, -1.253359559694936e+01, -6.665849578802627e-02, -6.704307128918215e-02, -6.690724007002467e-02, -6.679577340858692e-02, -6.685152097043603e-02, -6.685152097043603e-02, -6.851572347020990e-02, -7.981534391665333e-02, -7.622079008691365e-02, -7.296168191610641e-02, -7.459058298169149e-02, -7.459058298169149e-02, -5.881315739701497e-02, -1.793282232377399e-01, -1.493222248841125e-01, -1.130491552673329e-01, -1.299952866316940e-01, -1.299952866316940e-01, -8.669544617258847e-02, -1.172800820863691e+00, -8.602414429800833e-01, -1.172690792318586e-01, -5.433709443984454e-01, -5.433709443984454e-01, -4.618730406176690e+00, -4.319198820058330e+01, -2.057697846106714e+01, -5.786434525918269e-01, -1.354525255794871e+01, -1.354525255794872e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gdme_kos_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_kos", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([7.454250938166212e-03, 7.454230149280729e-03, 7.454131312310615e-03, 7.454440746252956e-03, 7.454279518160183e-03, 7.454279518160183e-03, 4.578535448855392e-02, 4.578525566559976e-02, 4.578184986767982e-02, 4.577907800437699e-02, 4.578413233446902e-02, 4.578413233446902e-02, 2.373767362504990e-01, 2.376387397926455e-01, 2.441225474204936e-01, 2.421128706783904e-01, 2.425374775857061e-01, 2.425374775857061e-01, 9.193123731329843e-01, 9.055971442896379e-01, 2.035733037910558e-01, 1.210927206925668e+00, 1.078373542457478e+00, 1.078373542457478e+00, 2.640861144623348e+01, 2.509033000360203e+01, 4.547736003625316e+00, 4.572672224068909e+01, 3.638992194040615e+01, 3.638992194040615e+01, 3.058038856980896e-02, 3.057477543774701e-02, 3.058010895709830e-02, 3.057515390273725e-02, 3.057755442196099e-02, 3.057755442196099e-02, 8.135672905101098e-02, 8.077085780366990e-02, 8.178983501203506e-02, 8.126613594780555e-02, 8.082572005475228e-02, 8.082572005475228e-02, 2.713691978630016e-01, 2.497985469517235e-01, 2.932763105316632e-01, 2.821291453973705e-01, 2.670635391032995e-01, 2.670635391032995e-01, 1.744137054056520e+00, 9.179183945331988e-01, 1.885297254235168e+00, 8.294279195159525e-02, 1.486227032047253e+00, 1.486227032047253e+00, 5.926478060825460e+01, 4.677502199673082e+01, 6.117196130416880e+01, 2.803074884415554e+00, 5.077817815044775e+01, 5.077817815044775e+01, 2.700579373399536e-01, 2.716159932991505e-01, 2.710656913693156e-01, 2.706140991706891e-01, 2.708399529255140e-01, 2.708399529255140e-01, 2.775822456984279e-01, 3.233611393625574e-01, 3.087982875993873e-01, 2.955944488422863e-01, 3.021937225988025e-01, 3.021937225988025e-01, 2.382736031967424e-01, 7.265241962318927e-01, 6.049589264577993e-01, 4.580034597030927e-01, 5.266584335072468e-01, 5.266584335072467e-01, 3.512349490241845e-01, 4.751444911091818e+00, 3.485152596966895e+00, 4.750999145228244e-01, 2.201394356712527e+00, 2.201394356712527e+00, 1.871216552182472e+01, 1.749865355521026e+02, 8.336486286092632e+01, 2.344296183327437e+00, 5.487677036968839e+01, 5.487677036968844e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
