
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_lta_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_lta", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.129002736105319e+01, -1.128981112983293e+01, -1.128888920743789e+01, -1.129240416800399e+01, -1.128991329295206e+01, -1.128991329295206e+01, -4.353462595471918e+00, -4.352668722816080e+00, -4.328996449486879e+00, -4.338497906645169e+00, -4.353262918622166e+00, -4.353262918622166e+00, -1.563414599021744e+00, -1.568984554649995e+00, -1.718618332782402e+00, -1.644030151470921e+00, -1.565315612452215e+00, -1.565315612452215e+00, -4.893283864225518e-01, -4.771386685776377e-01, -2.586202073067474e+00, -9.374847495640407e-01, -4.859111228826911e-01, -4.859111228826911e-01, -2.538215384025133e+00, -2.475425035867404e+00, -1.581350050688819e+00, -5.989510740034095e+00, -2.446683404538652e+00, -2.446683404538652e+00, -2.033785074886767e+00, -2.021468984453589e+00, -2.032420273540583e+00, -2.022851361520327e+00, -2.027608586802940e+00, -2.027608586802940e+00, -2.907905643955932e+00, -2.835621802812766e+00, -2.941238296905490e+00, -2.882493186501255e+00, -2.816162393646747e+00, -2.816162393646747e+00, -5.085252848261752e-01, -3.366684230735847e-01, -5.907466817632170e-01, -4.444519281146831e-01, -4.523758584695300e-01, -4.523758584695300e-01, -1.123600721433264e+00, -7.563947527352061e-01, -1.061999732174922e+00, -1.416258430440045e+00, -8.724389845954531e-01, -8.724389845954531e-01, -5.169525538292461e+00, -5.145920226716297e+00, -3.538286698830327e+00, -1.464698487279718e+00, -5.005722238205645e+00, -5.005722238205648e+00, -7.498256812728461e-02, -1.293576580595839e-01, -1.106631941082372e-01, -9.565244841178364e-02, -1.032372335187904e-01, -1.032372335187904e-01, -9.249826740935384e-02, -4.666083496544196e-01, -3.610235005171518e-01, -2.611668730999738e-01, -3.126686795223303e-01, -3.126686795223303e-01, -4.145439527427185e-01, -6.795281909118914e-01, -6.131192157380451e-01, -5.111869282568787e-01, -5.389166810361808e-01, -5.389166810361810e-01, -5.400895674261298e-01, -1.706185117182784e+00, -1.481495641849965e+00, -4.036455162006644e-01, -1.027512694949920e+00, -1.027512694949920e+00, -3.362555571727332e+00, -1.075886253148072e+01, -5.585716053458582e+00, -9.826798152093134e-01, -4.816467314330163e+00, -4.816467314330169e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_lta_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_lta", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.662385368526944e-15, -3.312497025788796e-15, -9.252725376694064e-15, -3.697103348742251e-15, -4.011785043115447e-15, -4.011785043115447e-15, -5.535422776588694e-16, 4.544351507181273e-17, -8.262249832652325e-16, 8.077625758705129e-16, 9.564598051315684e-16, 9.564598051315684e-16, 1.078025808521706e-15, -6.659346898784038e-16, 8.713997636659255e-16, 2.332073061500890e-16, 2.905812500729279e-17, 2.905812500729279e-17, -1.883540102851156e-16, -3.058504169812443e-16, 2.961573965355786e-16, 1.131933044946998e-16, 1.754792347413324e-16, 1.754792347413324e-16, 2.040025640109559e-16, -3.147441815591655e-16, -6.106960268650731e-16, 1.466183396139473e-15, -5.827948435181750e-16, -7.551743793255470e-16, 1.901736066570029e-15, 3.477149468591039e-17, 4.191868711844682e-16, 1.012345651267072e-15, 5.011746266021901e-17, 5.011746266021901e-17, -1.290481137427591e-16, -1.202373878792057e-15, 1.164010747903527e-15, -1.796198947300611e-15, -2.562024306732561e-15, -2.562024306732561e-15, 2.195974191451467e-17, 1.591104851252513e-16, 1.480687718380764e-16, 2.026064828275703e-17, 4.142518566473763e-17, 4.142518566473763e-17, -8.484711687833438e-18, 2.938834312855750e-16, -1.908412039228431e-16, 2.912006707276974e-16, -3.324540107969636e-17, -3.324540107969636e-17, -2.062841248083745e-15, -1.437366621019574e-15, 1.469692927903789e-15, 9.256524932193854e-16, 1.877163118415674e-15, 2.707617392623103e-15, 1.677054239443316e-17, -4.697895824589364e-17, 5.745129470598783e-19, 2.757531080643696e-17, -1.951383080344197e-17, -1.951383080344197e-17, 2.609606564486858e-17, 1.561887398098705e-16, 3.157350127710861e-17, 1.832884934211739e-16, -1.498182755081603e-16, -9.281007034192571e-17, -1.291860528090912e-16, 4.962902487702862e-16, -3.793195317618391e-17, -1.001707799887161e-16, -7.551841604441886e-17, -1.235076638818575e-16, -3.826610110287939e-17, 3.978808778378814e-16, 1.076723422390881e-15, -4.228255151796999e-17, 6.545564245822141e-17, 5.166891151791107e-16, 2.856669274899704e-16, -3.213772816006226e-15, -1.997171443799289e-15, -2.755484334329004e-16, 8.851985709070785e-16, 1.305081436853052e-15])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_lta_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_lta", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_lta_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_lta", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-8.825947482254693e-03, -8.825973674658382e-03, -8.826070350314722e-03, -8.825646790186976e-03, -8.825961400895980e-03, -8.825961400895980e-03, -4.369935112668375e-02, -4.370127475818077e-02, -4.375765155179668e-02, -4.373230871679545e-02, -4.369967722750213e-02, -4.369967722750213e-02, -1.948586929261241e-01, -1.948355413513959e-01, -1.943435345128226e-01, -1.953588824158885e-01, -1.948542203145874e-01, -1.948542203145874e-01, -6.887139413203187e-01, -6.862295996917468e-01, -1.500012963467313e-01, -7.450659171638436e-01, -6.878621729977495e-01, -6.878621729977495e-01, -3.972242638375180e+00, -3.860596270606780e+00, -1.508513026292463e+00, -5.559946210961614e+00, -3.902424746407475e+00, -3.902424746407474e+00, -3.906355697636266e-02, -3.911770386559135e-02, -3.906956342276238e-02, -3.911162927623387e-02, -3.909062165026143e-02, -3.909062165026143e-02, -7.445402070581388e-02, -7.453053681874180e-02, -7.440116516839806e-02, -7.446957829668477e-02, -7.458058364885341e-02, -7.458058364885341e-02, -2.862798816029820e-01, -2.982778895097723e-01, -2.868158834918983e-01, -2.983840756810900e-01, -2.865587687014842e-01, -2.865587687014842e-01, -8.973176915504204e-01, -6.143651166241695e-01, -9.189036085195460e-01, -9.042805830580440e-02, -8.572384209009341e-01, -8.572384209009341e-01, -5.926058543650318e+00, -5.367533098598593e+00, -7.317475876210009e+00, -1.198583240100357e+00, -5.795348966204255e+00, -5.795348966204253e+00, -4.512413299205177e-01, -3.953160736067058e-01, -4.104550505554287e-01, -4.252165577534945e-01, -4.174133741028114e-01, -4.174133741028114e-01, -4.387737369589677e-01, -3.257132629853281e-01, -3.361199947964750e-01, -3.540098128226931e-01, -3.434391608449912e-01, -3.434391608449913e-01, -2.732769490485683e-01, -5.313336052636288e-01, -4.791955826582473e-01, -4.171031150151676e-01, -4.513358592605609e-01, -4.513358592605610e-01, -3.392929631232270e-01, -1.567758490219116e+00, -1.294054674330870e+00, -4.617105334595640e-01, -1.073056118093228e+00, -1.073056118093228e+00, -3.287055241673039e+00, -1.179354538405090e+01, -8.586447310061246e+00, -1.124081171601906e+00, -6.610748667070474e+00, -6.610748667070478e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
