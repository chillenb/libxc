
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mn15_l_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mn15_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.305258628470497e+01, -2.305222825068194e+01, -2.305103644303144e+01, -2.305687227178066e+01, -2.305239430915432e+01, -2.305239430915432e+01, -3.501317102341026e+00, -3.501548333590023e+00, -3.508877268550325e+00, -3.510142652238168e+00, -3.501374396220525e+00, -3.501374396220525e+00, -4.544291838665280e-01, -4.538068509349454e-01, -4.448957556845491e-01, -4.687539758657168e-01, -4.542288291865102e-01, -4.542288291865102e-01, -2.207754016625761e-01, -2.212564137486757e-01, -3.077881062821932e-01, -1.241248958351058e-01, -2.207800511992206e-01, -2.207800511992206e-01, -1.948289119367889e-02, -2.030246513109718e-02, -5.847516307063926e-02, -9.876579240431520e-03, -2.011336011582383e-02, -2.011336011582385e-02, -4.435301537628741e+00, -4.402938962667590e+00, -4.431875748043614e+00, -4.406723609962528e+00, -4.418920097896407e+00, -4.418920097896407e+00, -2.154057516811882e+00, -2.198810044647216e+00, -2.150611021463033e+00, -2.186341297789439e+00, -2.188758804791370e+00, -2.188758804791370e+00, -5.815170686970812e-01, -6.340236159960712e-01, -5.261820914042614e-01, -5.589853879558979e-01, -6.145845936590294e-01, -6.145845936590294e-01, -9.481894590123953e-02, -2.097469428738956e-01, -9.576338160446726e-02, -1.865656139984868e+00, -1.194465521808397e-01, -1.194465521808397e-01, -9.545483060244509e-03, -1.083295824908294e-02, -8.229603667872480e-03, -6.802210458895129e-02, -9.916371055037119e-03, -9.916371055037079e-03, -6.293845162429790e-01, -6.056371260520150e-01, -6.113233831817514e-01, -6.176786615814265e-01, -6.142599332267791e-01, -6.142599332267791e-01, -6.195260649726856e-01, -5.327773090977075e-01, -5.477161255363548e-01, -5.579038489300073e-01, -5.525465320281511e-01, -5.525465320281510e-01, -6.589702137685750e-01, -2.685747878544126e-01, -3.007382697397110e-01, -3.393392084539286e-01, -3.217692528352560e-01, -3.217692528352559e-01, -4.546617409526655e-01, -5.617858362286177e-02, -6.603279245126988e-02, -3.157800141604561e-01, -8.509277562135319e-02, -8.509277562135323e-02, -2.239280882031188e-02, -3.085933385362871e-03, -5.784658461734987e-03, -8.308512779091012e-02, -8.490366863241392e-03, -8.490366863241384e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mn15_l_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mn15_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [4.863429945285610e+00, 4.864823329033753e+00, 4.871030825913891e+00, 4.848364242490807e+00, 4.864162920888066e+00, 4.864162920888066e+00, -5.417017775155776e+00, -5.416870332145268e+00, -5.412378642028895e+00, -5.413498953296459e+00, -5.417009865600783e+00, -5.417009865600783e+00, -7.687504041889730e-01, -7.642140335765844e-01, -6.575730025086548e-01, -6.834672448859731e-01, -7.671311351316012e-01, -7.671311351316012e-01, -1.797640079093897e-01, -1.747771284784449e-01, -8.001830474905930e-01, -1.625436296196284e-01, -1.780762089932633e-01, -1.780762089932633e-01, -2.503871710978877e-02, -2.603093371496803e-02, -6.423557726445082e-02, -1.297696703995464e-02, -2.579697552967651e-02, -2.579697552967642e-02, 3.012452296380216e+00, 3.079048783220748e+00, 3.019931748821499e+00, 3.071669310250722e+00, 3.045716896096009e+00, 3.045716896096009e+00, -2.859082064443048e+00, -2.905442138089136e+00, -2.842097747920163e+00, -2.880100414503892e+00, -2.911918132310035e+00, -2.911918132310035e+00, -7.939981212280408e-01, -8.769751670867049e-01, -7.692271255740053e-01, -8.333428465031186e-01, -8.153172722660940e-01, -8.153172722660940e-01, -1.282027207031026e-01, -2.654827847868328e-01, -1.300232471493483e-01, -2.267130943211308e+00, -1.746699146261627e-01, -1.746699146261627e-01, -1.255045173168217e-02, -1.420775970128583e-02, -1.083331998213572e-02, -7.030217233917112e-02, -1.301969608597633e-02, -1.301969608597620e-02, -8.025563647717248e-01, -8.127588099093926e-01, -8.160238784704080e-01, -8.141058458697604e-01, -8.156648878933195e-01, -8.156648878933195e-01, -8.075149156904005e-01, -5.946534020514981e-01, -6.499544868401754e-01, -7.118135894331158e-01, -6.783527799845911e-01, -6.783527799845910e-01, -9.310762273357525e-01, -2.676794647458487e-01, -2.574197308812257e-01, -3.834948276289008e-01, -2.922476985135107e-01, -2.922476985135108e-01, -5.379519242199310e-01, -6.295270458877379e-02, -7.122353075293285e-02, -3.831312929338793e-01, -1.083350275397851e-01, -1.083350275397847e-01, -2.852793465302941e-02, -4.098290890594305e-03, -7.652293828933053e-03, -1.044051904511607e-01, -1.117239389286376e-02, -1.117239389286380e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mn15_l_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mn15_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.304087223604265e-08, -6.304138367539546e-08, -6.304331737726964e-08, -6.303507903262691e-08, -6.304114318864284e-08, -6.304114318864284e-08, -2.678259149869097e-05, -2.678697667520778e-05, -2.691823826211671e-05, -2.688746003366934e-05, -2.678313787501945e-05, -2.678313787501945e-05, -1.460012993974314e-02, -1.464414554092292e-02, -1.526755233521329e-02, -1.485391777811599e-02, -1.461631025183098e-02, -1.461631025183098e-02, -2.136238099282849e+00, -2.147952291745032e+00, -7.454373183400731e-03, -2.052730932873968e+00, -2.142581424972178e+00, -2.142581424972178e+00, -1.946867433275647e+01, -1.942882725823987e+01, -5.527422358561334e+00, -1.447763161003902e+01, -2.019668089029605e+01, -2.019668089029604e+01, -1.852361095782065e-05, -1.856039574319167e-05, -1.852793775685195e-05, -1.855650196814028e-05, -1.854178906403632e-05, -1.854178906403632e-05, -2.206964385854885e-04, -2.215388320349704e-04, -2.194340721572353e-04, -2.201822052255088e-04, -2.227505716002990e-04, -2.227505716002990e-04, -2.313434893527363e-02, -6.916254011519591e-03, -2.711699473048261e-02, -1.346424760467012e-02, -2.014671889232177e-02, -2.014671889232177e-02, -1.783214068613822e+00, -9.253896518125228e-01, -2.094528594962026e+00, -3.484254068114130e-04, -2.100156335600946e+00, -2.100156335600946e+00, -1.537001242433618e+01, -1.532861291295666e+01, -4.422615175335473e+01, -4.466850463505533e+00, -2.271342710610810e+01, -2.271342710609108e+01, 7.756380815212234e-02, 3.410701667512201e-02, 4.718333515419309e-02, 5.908856961909994e-02, 5.291583056458572e-02, 5.291583056458572e-02, 7.672495192507721e-02, -4.943645523875469e-02, -3.799817793662946e-02, -1.865557511596689e-02, -3.008855992666808e-02, -3.008855992666807e-02, -7.981326264466876e-03, -6.213866893917319e-01, -4.535989981010223e-01, -1.989321143434582e-01, -3.246188771977233e-01, -3.246188771977235e-01, -6.897226986591247e-02, -4.921393616852249e+00, -4.041680467491117e+00, -2.269063812934499e-01, -3.322194873752322e+00, -3.322194873752346e+00, -1.449979217244308e+01, -2.709969758092450e+01, -2.311728324207964e+01, -4.225401278559540e+00, -3.333805714300940e+01, -3.333805714302793e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mn15_l_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mn15_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mn15_l_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mn15_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-6.244240338187189e-03, -6.244990615992718e-03, -6.248020491731996e-03, -6.235803255406997e-03, -6.244637882440076e-03, -6.244637882440076e-03, 1.777684788793457e-02, 1.777758152763027e-02, 1.780101883987054e-02, 1.783268346147324e-02, 1.777670340753238e-02, 1.777670340753238e-02, 5.569748293824227e-02, 5.553740565394880e-02, 5.152343351518593e-02, 5.343287072334491e-02, 5.564271209060600e-02, 5.564271209060600e-02, 1.884408487657082e-01, 1.875294524417334e-01, 3.328592984545185e-02, 9.278063346589147e-02, 1.882040075078793e-01, 1.882040075078793e-01, 1.733839808031868e-04, 1.983665750150830e-04, 5.835600228704981e-03, 6.588861273692990e-06, 2.010023620347615e-04, 2.010023620347202e-04, -6.033313025196498e-02, -6.140270798149616e-02, -6.044942157054643e-02, -6.128052531402782e-02, -6.087038337006601e-02, -6.087038337006601e-02, 3.535846471579313e-02, 3.660514918422766e-02, 3.513375842840363e-02, 3.615674179366284e-02, 3.644548308290693e-02, 3.644548308290693e-02, 6.816085977240700e-02, 3.065336619072023e-02, 7.747404298085613e-02, 5.668696874376672e-02, 5.761990646867116e-02, 5.761990646867116e-02, 4.658150604448329e-02, 1.405379819969311e-01, 5.200058754618155e-02, 1.695087122931729e-03, 9.100786488774805e-02, 9.100786488774805e-02, 9.012119738445788e-06, 1.116792401117904e-05, 1.841960418721193e-05, 1.278370666027045e-02, 1.040075602263739e-05, 1.040075602261935e-05, 1.046505741545905e-02, -4.067399312580399e-02, -3.020677883379852e-02, -1.668865648114481e-02, -2.410398022494927e-02, -2.410398022494927e-02, 7.995832007796193e-02, 8.047652156919456e-02, 5.082347531490257e-02, 7.976707267169522e-03, 3.066975687071700e-02, 3.066975687071709e-02, 3.748513523212654e-02, 1.445157420510555e-01, 1.329619226593260e-01, 1.034204382597734e-01, 1.175557049835034e-01, 1.175557049835034e-01, 8.750387191003298e-02, 4.179961420747062e-03, 1.002739410030184e-02, 8.887558991256865e-02, 4.336251125892433e-02, 4.336251125892462e-02, 1.101311628231017e-04, 2.499100185558279e-07, 3.381920035063701e-06, 4.534752509627424e-02, 8.953810695657869e-06, 8.953810695721886e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
