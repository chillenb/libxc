
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mn15_l_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mn15_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.427311030713913e+01, -1.427279154325119e+01, -1.427142619416438e+01, -1.427660779095426e+01, -1.427294219336872e+01, -1.427294219336872e+01, -2.961506286561943e+00, -2.961731667937683e+00, -2.968577004402312e+00, -2.966178087230865e+00, -2.961583254484293e+00, -4.344195743071006e+00, -2.943673065719162e-01, -6.793879553462927e-01, -6.450665678661314e-01, -6.580915787227642e-01, -6.802041282844886e-01, -6.802041282844886e-01, -2.338089343210059e-01, -2.362704849708957e-01, -1.593493255541554e-01, -1.400460755636432e-01, -2.345648246645704e-01, -2.345648246645704e-01, -1.948616438742823e-02, -2.030719433207089e-02, -5.916950224506504e-02, -9.881487168077754e-03, -2.011741668197828e-02, -2.011741668197830e-02, -4.446612236255838e+00, -4.414146870182635e+00, -4.443032466033120e+00, -2.812002230741524e+00, -4.430371413084562e+00, -4.430371413084562e+00, -1.495149446984384e+00, -1.536994643393103e+00, -1.476753010215989e+00, -1.510340646751136e+00, -1.546973236063466e+00, -2.293644381554190e+00, -6.311618138043908e-01, -6.707325757941854e-01, -5.981262180404739e-01, -6.206338634039413e-01, -6.544112059913451e-01, -5.811739677019969e-01, 7.272218029810233e-02, -2.165878685630403e-01, 6.982290648281823e-02, -2.352599131991836e+00, -1.242179367662813e-01, -1.242179367662813e-01, 4.930284416610644e-03, -1.083834004171890e-02, -8.231408300615341e-03, 5.827011343812819e-02, 5.135795022364618e-03, -9.922668834700632e-03, -6.120896212773472e-01, -5.985796967642614e-01, -6.378476418140364e-01, -6.048124366989387e-01, -6.028446889002064e-01, -6.028446889002064e-01, -5.915665855794608e-01, -5.395556259540979e-01, -5.557081210863953e-01, -5.637463480771076e-01, -5.605571197292613e-01, -5.317016545405275e-01, -7.184019122801718e-01, -5.776337309265511e-02, -3.203111387088324e-01, -2.663148664342008e-01, -3.509082654248478e-01, -3.509082654248475e-01, -3.840192138149363e-01, -5.649794345279465e-02, -6.731965111312925e-02, -3.575390093587279e-01, 6.243204917671948e-02, -8.773079425323743e-02, -2.245950884994688e-02, -3.086173670529295e-03, -5.784980300025220e-03, -8.589402753716993e-02, -8.495259871911437e-03, -8.495259871911430e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mn15_l_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mn15_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [2.921683107891118e+00, 2.922817693837300e+00, 2.927785871490113e+00, 2.909324908680744e+00, 2.922280748658476e+00, 2.922280748658476e+00, -5.553715089766565e+00, -5.553284141670282e+00, -5.540379044183019e+00, -5.545835291126932e+00, -5.553621032830101e+00, -5.454855427470511e+00, -1.077690600368303e+00, -8.075408898534507e-01, -8.222613579980834e-01, -8.101332564704665e-01, -8.073464933880409e-01, -8.073464933880409e-01, -1.984995583437167e-01, -1.933509680687394e-01, -1.047866071132536e+00, -2.305018558416274e-01, -1.970565089449192e-01, -1.970565089449192e-01, -2.505153579208518e-02, -2.604942183489208e-02, -6.653823831404367e-02, -1.299650226900522e-02, -2.581283492349110e-02, -2.581283492349098e-02, 3.021537897089434e+00, 3.088136966141518e+00, 3.028903092103600e+00, 1.958262280099869e+00, 3.054959002507489e+00, 3.054959002507489e+00, -3.311655940310013e+00, -3.319678561850082e+00, -3.307602530736682e+00, -3.315491882751649e+00, -3.319734509641981e+00, -2.942914248041566e+00, -7.072336507144980e-01, -7.610319648542170e-01, -6.508690092923853e-01, -6.986636996007015e-01, -7.390461537590850e-01, -8.951110830996231e-01, 3.939119726028017e-02, -2.900182896413810e-01, 3.381540244964717e-02, -2.176472965349949e+00, -1.960196624246128e-01, -1.960196624246128e-01, 6.581792547538699e-03, -1.422915870713607e-02, -1.084049923772618e-02, 6.193255381162108e-02, 6.855726483560329e-03, -1.304474735423204e-02, -8.105732785969018e-01, -8.011190767339469e-01, -8.179395768836318e-01, -8.125365467101912e-01, -8.112717361943053e-01, -8.112717361943053e-01, -8.097522759102176e-01, -5.834182682802909e-01, -6.302186623293035e-01, -6.815278176165289e-01, -6.523841079560813e-01, -7.859443645478625e-01, -8.036871580311911e-01, -3.527997153280198e-01, -2.716706399552488e-01, -5.892894348636406e-01, -2.801160425440944e-01, -2.801160425440947e-01, -7.366927385173592e-01, -6.403984044825101e-02, -7.527391140420235e-02, -3.021008466610905e-01, 4.183958467944026e-02, -1.174213734390036e-01, -2.878910422263429e-02, -4.099251037919384e-03, -7.653577789232281e-03, -1.140414525569930e-01, -1.119187285735599e-02, -1.119187285735602e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mn15_l_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mn15_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.450587823506304e-08, -5.450650810787341e-08, -5.450882792498082e-08, -5.449864141517847e-08, -5.450621298461921e-08, -5.450621298461921e-08, -1.759698223003023e-05, -1.760045050120168e-05, -1.770368733143624e-05, -1.765822198065585e-05, -1.759763585313971e-05, -2.873415301509530e-05, -1.271712004121536e-02, -8.705491273973574e-03, -7.970148141849634e-03, -8.467381682190809e-03, -8.722240192791744e-03, -8.722240192791744e-03, -1.859833258918651e+00, -1.854174537711138e+00, -7.510357563210432e-03, -8.066729453259980e-01, -1.857157550436952e+00, -1.857157550436952e+00, -1.870204237134001e+01, -1.846629910559968e+01, -4.209953012025689e+00, -6.975708472391145e+00, -1.932684957481406e+01, -1.932684957481471e+01, -1.853748929786994e-05, -1.857421013030636e-05, -1.854163372613705e-05, -1.591943388982429e-05, -1.855587209094290e-05, -1.855587209094290e-05, -1.296684309031355e-04, -1.270877002475174e-04, -1.308939542303644e-04, -1.286059985915096e-04, -1.267132483237094e-04, -2.187843448433345e-04, -3.031136777437402e-02, -2.047879568065912e-02, -3.534184412315887e-02, -3.151898410127861e-02, -2.675965600199159e-02, -2.953115898448165e-03, -7.123471852268713e+01, -7.813244199719007e-01, -7.547930074527640e+01, -4.847495013213918e-04, -1.376955317754834e+00, -1.376955317754834e+00, -1.659504545266456e+07, -8.767343750484912e+00, -3.473165043663689e+01, -5.100746336209736e+02, -1.410280091633663e+07, -1.083778813671884e+01, 7.180537589221166e-02, 2.976497546666795e-02, 5.849452833483235e-02, 5.390596383764009e-02, 4.793062642747859e-02, 4.793062642747859e-02, 6.455209667992184e-02, -5.068533562769069e-02, -4.097919210044546e-02, -2.407216601397441e-02, -3.435671302009021e-02, 5.862702348090699e-03, -1.940416366618967e-02, -1.509514831122538e+00, -4.029494842424263e-01, -9.917124440280255e-02, -2.981292522441922e-01, -2.981292522441924e-01, -1.899654013450058e-02, -4.207161210667154e+00, -2.881097808673574e+00, -2.548190823990441e-01, -1.716884392960272e+02, -2.237719950039015e+00, -7.249639363180376e+00, -9.970457714494721e+00, -1.941298177304124e+01, -2.773725378790153e+00, -1.531272787838974e+01, -1.531272787838813e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mn15_l_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mn15_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.274608105321479e-02, -1.274677257660401e-02, -1.274977068412073e-02, -1.273852403267397e-02, -1.274644551363036e-02, -1.274644551363036e-02, 1.192114537450835e-02, 1.191842817875187e-02, 1.183482643357122e-02, 1.186640630437529e-02, 1.192032522237240e-02, 2.737335383479040e-02, 6.354696230460515e-02, 5.748775390940329e-02, 5.341956177640408e-02, 5.543480195961895e-02, 5.759416913127632e-02, 5.759416913127632e-02, 1.881028504518278e-01, 1.870589782345223e-01, 3.556050810011586e-02, 8.867053259202370e-02, 1.878292612905581e-01, 1.878292612905581e-01, 1.732751497471169e-04, 1.981948581223512e-04, 5.660299137576888e-03, 6.575999315611506e-06, 2.008515941570468e-04, 2.008515941570053e-04, -6.020939127859120e-02, -6.128056838725476e-02, -6.032741851995126e-02, -7.839332002862404e-02, -6.074534852618071e-02, -6.074534852618071e-02, 2.496163278206758e-02, 2.469967623418099e-02, 2.504260375179160e-02, 2.487460084469824e-02, 2.462870567067442e-02, 3.901373610396246e-02, 8.341011541180425e-02, 2.220244126837374e-02, 9.138066701000554e-02, 7.261052351996858e-02, 7.104727220179567e-02, 5.617600703187287e-02, 3.509464636069207e-02, 1.400371168066258e-01, 3.916085884449625e-02, 3.796124135771996e-02, 8.838131383358078e-02, 8.838131383358078e-02, 1.044197699617879e-05, 1.114622119853217e-05, 1.840366062211693e-05, 1.029270985597637e-02, 1.202585063526398e-05, 1.037485782465737e-05, -7.084331301976583e-02, -8.293654021939373e-02, 9.618034589259115e-02, -8.095966355283449e-02, -8.284660022858277e-02, -8.284660022858277e-02, -5.938715677291595e-02, 8.283029588719690e-02, 5.326200297840062e-02, 2.262444524092531e-04, 3.050578586124868e-02, 6.120830806842962e-02, 4.989755913585608e-02, 1.627905206114792e-01, 1.330080989624961e-01, 1.439640664050505e-01, 1.176070425981241e-01, 1.176070425981241e-01, 1.054250088616123e-01, 4.115437109534883e-03, 9.593736570991628e-03, 8.678488918964368e-02, 3.331961731811642e-02, 4.137388645361426e-02, 1.089332385695082e-04, 2.498315506475412e-07, 3.381168423715938e-06, 4.312141784385810e-02, 8.933471009815168e-06, 8.933471009879300e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
