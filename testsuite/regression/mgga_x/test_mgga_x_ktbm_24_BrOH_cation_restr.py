
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_24_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_24", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.184233940454116e+01, -2.184246622607155e+01, -2.184302231741248e+01, -2.184114000316261e+01, -2.184212733620281e+01, -2.184212733620281e+01, -2.997983274271807e+00, -2.998152901344083e+00, -3.002681678769009e+00, -3.001122255676240e+00, -3.000977573606911e+00, -3.899234286554456e+00, -5.010899040611683e-01, -6.455752856505301e-01, -6.077280683931245e-01, -6.222567538165431e-01, -6.189768366758956e-01, -6.189768366758956e-01, -1.517280326169398e-01, -1.556923088580073e-01, -5.506814459365317e-01, -1.006499800344391e-01, -1.184554789717090e-01, -1.184554789717090e-01, -4.193309396226325e-03, -4.413783769119958e-03, -2.449929776995024e-02, -2.421312557130080e-03, -3.042761693395652e-03, -3.042761693395652e-03, -6.098030532702141e+00, -6.097822411951825e+00, -6.098010183108260e+00, -5.491182049498097e+00, -6.097932058655415e+00, -6.097932058655415e+00, -1.615332081851381e+00, -1.641131782194359e+00, -1.595974791951867e+00, -1.618731803652205e+00, -1.639211681230503e+00, -2.148051184862792e+00, -6.887723201345558e-01, -7.521105112828746e-01, -6.193224606576408e-01, -6.629627630058247e-01, -7.027846990135728e-01, -5.743542655457831e-01, -6.239017144788772e-02, -1.398420551237601e-01, -5.773171346204790e-02, -2.266801180171465e+00, -8.017048351919090e-02, -8.017048351919090e-02, -1.842962224884152e-03, -2.367029213466696e-03, -1.810025207741667e-03, -3.887919262542516e-02, -2.150957559364372e-03, -2.180494502667862e-03, -6.696090772078473e-01, -6.749881300663709e-01, -6.407686749137218e-01, -6.717409104092397e-01, -6.725469673515364e-01, -6.725469673515364e-01, -6.528050974589308e-01, -5.698146713463997e-01, -6.088854962040869e-01, -6.351938336035466e-01, -6.234523612194566e-01, -5.281530581017938e-01, -7.905226302771025e-01, -1.546826213333303e-01, -2.462516959390365e-01, -2.857176040758561e-01, -3.074572011579366e-01, -3.074572011579367e-01, -3.945510716800543e-01, -2.343736108772901e-02, -3.209490343183079e-02, -3.793192599570580e-01, -4.944557684644818e-02, -5.202886169267690e-02, -5.918633950401343e-03, -6.326827827729238e-04, -1.328074892929594e-03, -4.872007420451308e-02, -2.017643985279748e-03, -2.017643985279745e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_24_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_24", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.266672524938966e+01, -3.266679922824520e+01, -3.266716311635046e+01, -3.266606053598446e+01, -3.266663334239685e+01, -3.266663334239685e+01, -5.035563495237592e+00, -5.035809461074916e+00, -5.042351084591979e+00, -5.040171116636947e+00, -5.039881642567374e+00, -5.282298871205144e+00, -7.933079587003743e-01, -9.896260713250873e-01, -9.368247497743877e-01, -9.574234479299760e-01, -9.528822878894339e-01, -9.528822878894339e-01, -2.332971176899357e-01, -2.397496952150613e-01, -7.979345643075149e-01, -1.479468722578660e-01, -1.776352181591909e-01, -1.776352181591908e-01, -5.905266176305698e-03, -6.215833369738069e-03, -3.458384721966238e-02, -3.409589912324666e-03, -4.284794725786249e-03, -4.284794725786249e-03, -7.241238568075032e+00, -7.244134833225865e+00, -7.241394027470815e+00, -7.904902200836161e+00, -7.242690370656810e+00, -7.242690370656810e+00, -2.711960054712520e+00, -2.758500404133352e+00, -2.675970871653889e+00, -2.718108573871776e+00, -2.755129723061853e+00, -3.028477570182236e+00, -8.416084218570589e-01, -8.824622549962287e-01, -8.130403229663477e-01, -8.081946094549612e-01, -8.459887966580732e-01, -9.125263211800091e-01, -8.303809113020762e-02, -2.101004681267036e-01, -7.680685403005730e-02, -2.708341313974759e+00, -1.166205051080401e-01, -1.166205051080402e-01, -2.457265779709896e-03, -3.333140674596644e-03, -2.548837153283237e-03, -5.172489437206127e-02, -2.867889074666192e-03, -3.070510428490394e-03, -8.553986903937101e-01, -8.331724859811428e-01, -8.812422196787690e-01, -8.468741003453861e-01, -8.435840833382829e-01, -8.435840833382829e-01, -8.295936960205710e-01, -7.247213989845838e-01, -7.273420106351320e-01, -7.457516693038053e-01, -7.330395266132564e-01, -8.077688590032440e-01, -9.280333791994869e-01, -2.252384141532868e-01, -3.794521740255909e-01, -4.793122344253639e-01, -4.609859586327882e-01, -4.609859586327882e-01, -6.616067501382211e-01, -3.307827072079191e-02, -4.537813776595854e-02, -5.055076702536192e-01, -6.577792628114011e-02, -7.431645882698047e-02, -8.335287485503655e-03, -8.908933300621138e-04, -1.870113600546377e-03, -6.950287223373230e-02, -2.841191388478604e-03, -2.841191388478597e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_24_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_24", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.121447203697666e-08, -2.121440068700373e-08, -2.121394389292055e-08, -2.121501923318223e-08, -2.121447551393747e-08, -2.121447551393747e-08, -1.759539620353403e-05, -1.759902229970429e-05, -1.769342634593328e-05, -1.764886568103529e-05, -1.766098078397073e-05, -1.596379933813724e-05, -5.743557588559461e-03, -3.810078988348307e-03, -3.197611197201796e-03, -3.533521303832417e-03, -3.452998300602907e-03, -3.452998300602907e-03, -3.487849675311152e-01, -3.695900605451548e-01, -1.473067778202717e-03, -6.204785222629428e-02, -1.752827736893026e-01, -1.752827736893024e-01, 1.220541178738469e+02, 1.124199529577288e+02, 2.368658007805805e+00, 3.141222857582203e+02, 2.345478212569223e+02, 2.345478212569223e+02, -6.598786104962945e-06, -6.602037873544073e-06, -6.599012307791169e-06, -6.483116243558091e-06, -6.600402990799647e-06, -6.600402990799647e-06, -1.456904337350650e-04, -1.472010067643749e-04, -1.441751781747039e-04, -1.457066723502801e-04, -1.472767649505652e-04, -1.266604417219096e-04, -2.959079414531903e-02, -2.761840996594773e-02, -3.071963028308406e-02, -3.488461688763686e-02, -2.948324872880907e-02, -2.965640181259224e-02, -7.417065705261202e-01, -1.018581920377177e-01, -8.483674612782073e-01, -2.835625213611161e-04, -3.693001582720594e-03, -3.693001582720434e-03, -6.440172670210081e+02, 3.090632621732347e+02, 1.502327487915454e+03, -1.832767280293712e+00, -9.419949174939541e+02, 6.413602888450400e+02, -4.391491717431171e-02, -4.373187015844066e-02, -4.331487460067165e-02, -4.388512911475913e-02, -4.386081596590950e-02, -4.386081596590950e-02, -4.885425211016182e-02, -5.131707602499175e-02, -5.453042612757141e-02, -5.457383877380937e-02, -5.496536055293871e-02, -5.436471350601228e-02, -2.160974179035362e-02, -2.509942300458746e-01, -1.250351590807143e-01, -1.434462896668646e-01, -1.389439369977003e-01, -1.389439369977003e-01, -6.323938437083083e-02, 2.623307947664582e+00, 1.241444405847027e+00, -1.988657727684410e-01, -1.500015419863622e+00, 4.002313923379466e-01, 4.231080535607666e+01, 4.789677643347469e+03, 1.839996293267405e+03, 5.069730175544026e-01, 8.942396703075841e+02, 8.942396703075867e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_24_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_24", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.077728106852284e-03, 2.077725152725410e-03, 2.077709080307499e-03, 2.077753249944850e-03, 2.077730540370893e-03, 2.077730540370893e-03, 7.805828582368667e-03, 7.807988407927434e-03, 7.864766958219633e-03, 7.841115111413435e-03, 7.844466499780385e-03, 1.767904199487083e-02, 1.194833908751297e-02, 4.134947012702057e-02, 3.346037908679730e-02, 3.715091844727082e-02, 3.628189957798791e-02, 3.628189957798791e-02, 7.434784095131287e-02, 8.111501426073221e-02, 2.584190023622883e-03, 1.213611837858380e-02, 2.896047923672560e-02, 2.896047923672558e-02, -4.230449815416113e-04, -4.541430253658807e-04, -1.461521692042829e-03, -2.102606406206969e-04, -3.112285493315275e-04, -3.112285493315275e-04, 1.083860181869273e-02, 1.081030861186420e-02, 1.083698974344176e-02, 8.464006506281903e-03, 1.082442470167441e-02, 1.082442470167441e-02, 1.075624085266092e-02, 1.129080989312298e-02, 1.033009798206653e-02, 1.081477006586590e-02, 1.126349108817756e-02, 2.783930158744711e-02, 1.185474500094945e-01, 9.729191831718857e-02, 1.203219651071537e-01, 1.232463930236413e-01, 1.162282572408551e-01, 6.836428972349728e-02, -8.123583212803070e-05, 2.668479637381242e-02, -9.362572337370657e-05, 3.587292817378354e-02, 7.070567962912244e-03, 7.070567962912291e-03, -9.982225264399249e-09, -1.932943680724719e-04, -4.198175938518351e-04, -7.095110973565613e-05, -6.283874636988076e-08, -3.133935271967198e-04, 7.068450973177967e-02, 8.097108596774774e-02, 6.947522584594742e-02, 7.439525589713422e-02, 7.589959250898498e-02, 7.589959250898498e-02, 7.407187680250683e-02, 1.381925728002379e-01, 1.335259461936106e-01, 1.140611150514820e-01, 1.255478587683939e-01, 8.287534248584001e-02, 9.783860564785328e-02, 1.016004425847016e-02, 8.551791764647206e-02, 5.884301368590605e-02, 1.277949483951838e-01, 1.277949483951840e-01, 6.279804632479234e-02, -1.431818118339280e-03, -1.572633808807336e-03, 1.898585964726669e-01, -1.086542796997652e-04, -2.519568807053366e-04, -4.116860653730341e-04, -5.726211888410182e-05, -2.033492833524041e-04, -5.980517655291300e-04, -3.461740972114249e-04, -3.461740972114274e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
