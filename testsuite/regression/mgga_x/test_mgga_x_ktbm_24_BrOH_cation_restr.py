
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_24_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_24", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.501160814898017e+01, -2.501167504294046e+01, -2.501210890493778e+01, -2.501111690217565e+01, -2.501161722624241e+01, -2.501161722624241e+01, -3.404242332837998e+00, -3.404421285989867e+00, -3.409459166663444e+00, -3.410256432850150e+00, -3.408756091259351e+00, -3.408756091259351e+00, -5.585373192368047e-01, -5.576547536561592e-01, -5.379505343381056e-01, -5.518079574499488e-01, -5.479586167106413e-01, -5.479586167106413e-01, -1.504455816268565e-01, -1.540001139496576e-01, -5.791089017320173e-01, -9.986232907533493e-02, -1.170320162474758e-01, -1.170320162474758e-01, -4.195889060061264e-03, -4.418707042153298e-03, -2.465384701753274e-02, -2.438683185131800e-03, -3.056901054610501e-03, -3.056901054610502e-03, -6.094064270420087e+00, -6.093900548891821e+00, -6.094126328233733e+00, -6.093979080282268e+00, -6.093947046239029e+00, -6.093947046239029e+00, -2.060388027412845e+00, -2.098318023810474e+00, -2.045480682884713e+00, -2.079959884867498e+00, -2.088484906593084e+00, -2.088484906593084e+00, -6.385565106598431e-01, -6.862831471705800e-01, -5.510393347261310e-01, -5.656231423327127e-01, -6.535780505609137e-01, -6.535780505609137e-01, -6.630486399501490e-02, -1.391209674808981e-01, -6.107224812049584e-02, -1.942082902314890e+00, -8.007345564277653e-02, -8.007345564277653e-02, -1.898342911187652e-03, -2.397370622992323e-03, -1.824515739442071e-03, -4.047917222870409e-02, -2.206414748776697e-03, -2.206414748776697e-03, -6.607153161672403e-01, -6.665408041954202e-01, -6.647001969678187e-01, -6.629986319345337e-01, -6.638655393777800e-01, -6.638655393777800e-01, -6.357022131826823e-01, -5.637943638186554e-01, -5.993644386699002e-01, -6.220487711246014e-01, -6.114869490238292e-01, -6.114869490238292e-01, -7.071704869661507e-01, -1.884207380789073e-01, -2.414959849827749e-01, -3.470864620632373e-01, -2.957339824222906e-01, -2.957339824222906e-01, -4.855954044714928e-01, -2.351820542291478e-02, -3.231476231513616e-02, -3.495615101855724e-01, -5.221959977636881e-02, -5.221959977636882e-02, -5.996104121323791e-03, -6.415109464698974e-04, -1.333704882693680e-03, -4.886242263474121e-02, -2.037070088995378e-03, -2.037070088995376e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_24_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_24", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.977878459008648e+01, -2.977885490074377e+01, -2.977909610824954e+01, -2.977804514795766e+01, -2.977860599888478e+01, -2.977860599888478e+01, -5.085428472841434e+00, -5.085541725787874e+00, -5.088637932349535e+00, -5.088417593934282e+00, -5.087676353213388e+00, -5.087676353213388e+00, -8.477448255290703e-01, -8.458317736290092e-01, -8.033636053380420e-01, -8.283912926662019e-01, -8.218009274588971e-01, -8.218009274588971e-01, -2.290584635205990e-01, -2.344572804286361e-01, -8.310124841304233e-01, -1.416543160414640e-01, -1.706187045030864e-01, -1.706187045030864e-01, -5.900668647257279e-03, -6.206992221966541e-03, -3.420930471461343e-02, -3.375619177007978e-03, -4.258236323923872e-03, -4.258236323923872e-03, -7.245575370328758e+00, -7.248435178458210e+00, -7.245641415758982e+00, -7.248168602430535e+00, -7.247053841004529e+00, -7.247053841004529e+00, -2.954664784768001e+00, -2.982705757559617e+00, -2.945911470436982e+00, -2.972471544671760e+00, -2.974324863584492e+00, -2.974324863584492e+00, -8.582938862904735e-01, -9.446651713696946e-01, -8.004169709495158e-01, -8.468010972864983e-01, -8.689434136556525e-01, -8.689434136556525e-01, -9.244778134315740e-02, -2.062932805313867e-01, -8.487848391583909e-02, -2.894659785627821e+00, -1.140517675653499e-01, -1.140517675653499e-01, -2.549650247130045e-03, -3.265132698957429e-03, -2.520008480626675e-03, -5.595924310646178e-02, -3.013999578232213e-03, -3.013999578232209e-03, -8.669347251369393e-01, -8.436643527425132e-01, -8.512954114804131e-01, -8.580660623175783e-01, -8.546305722936272e-01, -8.546305722936272e-01, -8.516054628463368e-01, -7.243640541414136e-01, -7.322554337208191e-01, -7.583453577664188e-01, -7.420465571915332e-01, -7.420465571915332e-01, -9.959970461861556e-01, -2.867503341868342e-01, -3.677815381662999e-01, -5.097158387453448e-01, -4.422724138280806e-01, -4.422724138280804e-01, -6.746671200701978e-01, -3.289703687348204e-02, -4.474889063711626e-02, -4.954173621092343e-01, -7.290872070216936e-02, -7.290872070216935e-02, -8.157504773098930e-03, -8.472815608985364e-04, -1.859641278163401e-03, -6.868499447097318e-02, -2.801217152806005e-03, -2.801217152806002e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_24_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_24", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.154044692038097e-08, -2.154038517840214e-08, -2.153997182096252e-08, -2.154090541181419e-08, -2.154043587994888e-08, -2.154043587994888e-08, -1.703223061846189e-05, -1.703610883731628e-05, -1.713676135547283e-05, -1.708540314736665e-05, -1.709989344511249e-05, -1.709989344511249e-05, -5.166245492009143e-03, -5.139230332023463e-03, -4.492353079142166e-03, -4.774176062313079e-03, -4.715671378713582e-03, -4.715671378713582e-03, -3.738471692582868e-01, -3.994371572803727e-01, -1.340560533985000e-03, -1.590691378401583e-01, -2.484876890410825e-01, -2.484876890410825e-01, 1.199189723191962e+02, 1.088183655444852e+02, 1.769640325132416e+00, 2.411368010538861e+02, 2.011748482670426e+02, 2.011748482670422e+02, -6.598144449188871e-06, -6.601397480208543e-06, -6.598383658316578e-06, -6.601250093738611e-06, -6.599755277104119e-06, -6.599755277104119e-06, -1.273360330140085e-04, -1.296918820314789e-04, -1.243369980307588e-04, -1.266030994273019e-04, -1.300925022036476e-04, -1.300925022036476e-04, -2.991758694112762e-02, -2.733867818993158e-02, -3.214959965859494e-02, -3.539322821469702e-02, -2.967106829188524e-02, -2.967106829188524e-02, 2.366282325415889e-02, -1.196134616277534e-01, 5.315802158127710e-02, -2.844077223025903e-04, -9.760517912142681e-02, -9.760517912142673e-02, 8.984266842922948e+01, 1.548263916492041e+02, 1.103801776089457e+03, 4.167873513634550e-01, 3.554614878248760e+02, 3.554614878248765e+02, -4.376557521028130e-02, -4.361008232266257e-02, -4.369864717793754e-02, -4.374540698649339e-02, -4.372504398086621e-02, -4.372504398086621e-02, -4.852835389483391e-02, -5.151456498141450e-02, -5.460284919622177e-02, -5.446140641718961e-02, -5.494902448648194e-02, -5.494902448648194e-02, -2.145379265317016e-02, -1.246815495560449e-01, -1.350402553519182e-01, -1.301543252865278e-01, -1.490560838437457e-01, -1.490560838437457e-01, -5.946259921921734e-02, 2.294162743295520e+00, 8.314946150718142e-01, -2.070811580397420e-01, 1.689311267432326e-01, 1.689311267432325e-01, 2.016178663892357e+01, -2.116191637830243e+03, 1.604002776997500e+03, 3.358695731689511e-01, 5.955455336978770e+02, 5.955455336978781e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_24_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_24", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.895183620510294e-03, 2.895153344134668e-03, 2.895055912566784e-03, 2.895505801810408e-03, 2.895264795647547e-03, 2.895264795647547e-03, 1.210947735988531e-02, 1.211192860455357e-02, 1.217904923095060e-02, 1.217839005827320e-02, 1.216815685713692e-02, 1.216815685713692e-02, 2.365768224054397e-02, 2.351241479475864e-02, 2.038022320987909e-02, 2.333167204537868e-02, 2.249244347485745e-02, 2.249244347485745e-02, 7.210775005646491e-02, 7.800375150268672e-02, 5.317852633931117e-03, 1.258826216289349e-02, 2.783135186669199e-02, 2.783135186669203e-02, -4.121561169624342e-04, -4.328444431629674e-04, -9.421294345826621e-04, -1.438441284924076e-04, -2.489811503893380e-04, -2.489811503893337e-04, 1.082260209827616e-02, 1.079453627431539e-02, 1.082132507937279e-02, 1.079655030431063e-02, 1.080837397947802e-02, 1.080837397947802e-02, 2.517537594116984e-02, 2.610745364102505e-02, 2.488316863112559e-02, 2.576984445237786e-02, 2.582227778133087e-02, 2.582227778133087e-02, 9.817447496040821e-02, 7.822017481680245e-02, 8.806207226977342e-02, 8.162321103830980e-02, 9.719763910933335e-02, 9.719763910933335e-02, 1.822772416932636e-03, 2.629250884699592e-02, 1.236918713637185e-03, 2.420292964997356e-02, 7.900119857450816e-03, 7.900119857450864e-03, -1.782430305613266e-05, -7.474390873000722e-05, -2.702282948002870e-04, -3.944143736538843e-04, -1.381112717100852e-04, -1.381112717100875e-04, 6.871836280899343e-02, 7.876797383987347e-02, 7.526545653355748e-02, 7.233658274363824e-02, 7.380478948063246e-02, 7.380478948063246e-02, 7.000624434683411e-02, 1.346171072561992e-01, 1.285836612647902e-01, 1.086537088216064e-01, 1.199326106230687e-01, 1.199326106230687e-01, 7.458466511596834e-02, 5.062667214243239e-02, 8.015094279859902e-02, 1.208283131665284e-01, 1.138581298511654e-01, 1.138581298511655e-01, 1.211751916015761e-01, -1.168992635915197e-03, -8.311100189802994e-04, 1.529928844516514e-01, 9.812195341382872e-04, 9.812195341382822e-04, -1.489143948340955e-04, 9.767123015233382e-06, -1.665152049379699e-04, 2.297389886753041e-04, -1.948057808405883e-04, -1.948057808405885e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
