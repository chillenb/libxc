
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_regtpss_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_regtpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.265858996274926e+01, -2.265865916443625e+01, -2.265904929053162e+01, -2.265802201815537e+01, -2.265854848020704e+01, -2.265854848020704e+01, -3.398028914732741e+00, -3.398043390089728e+00, -3.398660506834051e+00, -3.400387037351892e+00, -3.399154137344026e+00, -3.399154137344026e+00, -6.547366223450940e-01, -6.544067233999196e-01, -6.482542427348146e-01, -6.547673457952877e-01, -6.561124640195592e-01, -6.561124640195592e-01, -1.968921170364125e-01, -1.981981871679291e-01, -7.531050069800966e-01, -1.670953539982398e-01, -1.926323917628947e-01, -1.926323917628947e-01, -1.010238653398351e-02, -1.063723306642128e-02, -5.724065924634543e-02, -5.828433494484976e-03, -8.132571873727011e-03, -8.132571873727011e-03, -5.554428938364016e+00, -5.555529989946337e+00, -5.554531046650649e+00, -5.555501022783343e+00, -5.554960702626468e+00, -5.554960702626468e+00, -2.063222776452031e+00, -2.080782046664455e+00, -2.058426339546628e+00, -2.073936904890775e+00, -2.075287683600022e+00, -2.075287683600022e+00, -5.930029558976175e-01, -6.230781438713938e-01, -5.360768455740033e-01, -5.352917100892983e-01, -6.038532963945751e-01, -6.038532963945751e-01, -1.323910482308077e-01, -2.108199953079760e-01, -1.244002285367344e-01, -1.813731759247118e+00, -1.445979199592597e-01, -1.445979199592597e-01, -4.500150006913003e-03, -5.697585417076378e-03, -4.362630379116022e-03, -8.862887530244774e-02, -5.479896711911908e-03, -5.479896711911909e-03, -6.199028430240232e-01, -6.187576759090535e-01, -6.193133148273280e-01, -6.196464019795862e-01, -6.194899210071694e-01, -6.194899210071694e-01, -5.938591477977708e-01, -5.213569040868798e-01, -5.444087682840349e-01, -5.664128183241064e-01, -5.550138660415246e-01, -5.550138660415245e-01, -6.447482258769552e-01, -2.515934001628081e-01, -2.873601605848443e-01, -3.552117149243488e-01, -3.191552437955228e-01, -3.191552437955228e-01, -4.695934753277240e-01, -5.488622134861036e-02, -7.346276548524169e-02, -3.400581115815217e-01, -1.073974665780573e-01, -1.073974665780573e-01, -1.422968302533421e-02, -1.523238629952538e-03, -3.203047975489216e-03, -1.021938891228247e-01, -5.032581815720692e-03, -5.032581815720687e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_regtpss_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_regtpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.857142819611947e+01, -2.857230796401561e+01, -2.857155283445913e+01, -2.857239837696745e+01, -2.857205718184098e+01, -2.857309135093662e+01, -2.857065591654131e+01, -2.857130383163694e+01, -2.857150070693363e+01, -2.857209534204272e+01, -2.857150070693363e+01, -2.857209534204272e+01, -4.216221413783828e+00, -4.216231674357940e+00, -4.216269541827753e+00, -4.216268733103219e+00, -4.217300742488352e+00, -4.217556916233507e+00, -4.216857896252987e+00, -4.217008156942904e+00, -4.215428669591465e+00, -4.218023568907337e+00, -4.215428669591465e+00, -4.218023568907337e+00, -7.934811589988721e-01, -7.994101433214815e-01, -7.912708013137474e-01, -7.985745582892118e-01, -7.613380469110564e-01, -7.510235972762134e-01, -7.624845822194274e-01, -7.659003324049802e-01, -8.097425305678660e-01, -7.133615013299696e-01, -8.097425305678660e-01, -7.133615013299696e-01, -1.860971404716945e-01, -1.978086953088800e-01, -1.888762850278938e-01, -2.027405594795774e-01, -9.186097301901901e-01, -9.621905866913595e-01, -1.472549509791493e-01, -1.497459655857319e-01, -1.941569182207468e-01, -1.302159202913773e-01, -1.941569182207468e-01, -1.302159202913772e-01, -1.300224646853699e-02, -1.381178914843110e-02, -1.362009481997162e-02, -1.458409481714142e-02, -7.078514287656158e-02, -7.412806467125936e-02, -7.829915754434594e-03, -7.699780992504404e-03, -1.160570367067287e-02, -6.611287353058101e-03, -1.160570367067287e-02, -6.611287353058101e-03, -7.064450332915822e+00, -7.062951109431951e+00, -7.066997928689495e+00, -7.065411525489401e+00, -7.064689665802660e+00, -7.063106142585691e+00, -7.066871720181979e+00, -7.065337549941041e+00, -7.065680017413913e+00, -7.064173548992717e+00, -7.065680017413913e+00, -7.064173548992717e+00, -2.444335161841569e+00, -2.446619381185211e+00, -2.477761451129854e+00, -2.479004853508464e+00, -2.429209450999480e+00, -2.435695958490956e+00, -2.458946728873990e+00, -2.465858440668705e+00, -2.473845870088319e+00, -2.465271271626703e+00, -2.473845870088319e+00, -2.465271271626703e+00, -7.346140948752197e-01, -7.342825825599582e-01, -8.495060001955366e-01, -8.529568146249830e-01, -6.465119196676371e-01, -6.765801720106339e-01, -6.916306087609634e-01, -7.230786706231271e-01, -7.757310175584615e-01, -7.263390368816585e-01, -7.757310175584615e-01, -7.263390368816585e-01, -1.352911166322644e-01, -1.351879321428287e-01, -1.894979287606089e-01, -1.902085954158014e-01, -1.285682040398648e-01, -1.313591553993485e-01, -2.438981893040993e+00, -2.438072631615898e+00, -1.365390946583390e-01, -1.328742832429565e-01, -1.365390946583390e-01, -1.328742832429565e-01, -5.875759873905722e-03, -6.106319756627619e-03, -7.533632012331734e-03, -7.647725651047965e-03, -5.631646124324436e-03, -5.962719895397888e-03, -1.025723844230482e-01, -1.033444599098976e-01, -5.753811141044111e-03, -7.895380595547896e-03, -5.753811141044111e-03, -7.895380595547898e-03, -8.238257988938248e-01, -8.273610571680761e-01, -8.020336171595598e-01, -8.056705294450457e-01, -8.084752257716832e-01, -8.121407670375963e-01, -8.147463148260425e-01, -8.182887152111435e-01, -8.114943061188667e-01, -8.151008509088356e-01, -8.114943061188666e-01, -8.151008509088357e-01, -8.116882225386476e-01, -8.142989203921033e-01, -6.419469017546763e-01, -6.451504498737083e-01, -6.772979078648972e-01, -6.807297346608113e-01, -7.140784632503939e-01, -7.168320128020520e-01, -6.938034542248314e-01, -6.969948571318552e-01, -6.938034542248313e-01, -6.969948571318549e-01, -8.720917715395572e-01, -8.795793359919702e-01, -2.408374296249637e-01, -2.424448163545109e-01, -3.006727138776489e-01, -3.051921412620974e-01, -4.198299713411778e-01, -4.219679752213489e-01, -3.635103389274459e-01, -3.636201147491981e-01, -3.635103389274459e-01, -3.636201147491980e-01, -5.624952863132819e-01, -5.692866676797020e-01, -6.985023273450230e-02, -7.026260224214827e-02, -8.922121031834168e-02, -9.135799054599700e-02, -4.043263430919180e-01, -4.184354130934330e-01, -1.142750304229462e-01, -1.135233424665577e-01, -1.142750304229462e-01, -1.135233424665577e-01, -1.855749566188168e-02, -1.922220029260836e-02, -2.028496636204756e-03, -2.033043268322707e-03, -4.126304985203940e-03, -4.388346295195119e-03, -1.105058926094659e-01, -1.116035817771567e-01, -5.448606474392078e-03, -7.238527494298672e-03, -5.448606474392070e-03, -7.238527494298665e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_regtpss_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_regtpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.475501603019628e-08, 0.000000000000000e+00, -2.474707436234688e-08, -2.475516183147494e-08, 0.000000000000000e+00, -2.474718082296352e-08, -2.475378381205666e-08, 0.000000000000000e+00, -2.474572306911015e-08, -2.475210509594444e-08, 0.000000000000000e+00, -2.474359318441132e-08, -2.475516502699811e-08, 0.000000000000000e+00, -2.474309445731569e-08, -2.475516502699811e-08, 0.000000000000000e+00, -2.474309445731569e-08, -2.246746497707211e-05, 0.000000000000000e+00, -2.244348159636537e-05, -2.247611274687628e-05, 0.000000000000000e+00, -2.244743228308939e-05, -2.262515516069294e-05, 0.000000000000000e+00, -2.264601163365241e-05, -2.264455426311181e-05, 0.000000000000000e+00, -2.262596001072756e-05, -2.246447428778711e-05, 0.000000000000000e+00, -2.276093749125262e-05, -2.246447428778711e-05, 0.000000000000000e+00, -2.276093749125262e-05, -8.113478043241465e-03, 0.000000000000000e+00, -7.952197607715254e-03, -8.186141780028544e-03, 0.000000000000000e+00, -7.969687740012383e-03, -8.972593536808253e-03, 0.000000000000000e+00, -9.342236930373777e-03, -9.317252744692870e-03, 0.000000000000000e+00, -9.313520853989012e-03, -7.422189074358911e-03, 0.000000000000000e+00, -1.016607965403092e-02, -7.422189074358911e-03, 0.000000000000000e+00, -1.016607965403092e-02, -1.300826372918747e+00, 0.000000000000000e+00, -1.153774851931652e+00, -1.290303496524833e+00, 0.000000000000000e+00, -1.123411558992348e+00, -2.871368669485462e-03, 0.000000000000000e+00, -2.383977728135253e-03, -2.133949678637546e+00, 0.000000000000000e+00, -2.043407498307180e+00, -1.118533871951420e+00, 0.000000000000000e+00, -3.392275910431573e+00, -1.118533871951419e+00, 0.000000000000000e+00, -3.392275910431577e+00, -7.681537599429603e+00, 0.000000000000000e+00, -7.604134898472878e+00, -8.093185988202553e+00, 0.000000000000000e+00, -8.051216353637484e+00, -4.433102185697857e+00, 0.000000000000000e+00, -4.450026854786137e+00, -7.037943886390875e+00, 0.000000000000000e+00, -6.846938520670949e+00, -7.669370438881877e+00, 0.000000000000000e+00, -1.946266578719474e+01, -7.669370438881903e+00, 0.000000000000000e+00, -1.946266578719473e+01, -7.700615687821239e-06, 0.000000000000000e+00, -7.702713121768000e-06, -7.725897841504291e-06, 0.000000000000000e+00, -7.727133254795570e-06, -7.700251525787573e-06, 0.000000000000000e+00, -7.702278322825397e-06, -7.721994904118931e-06, 0.000000000000000e+00, -7.724514330530286e-06, -7.714902863079500e-06, 0.000000000000000e+00, -7.715195095077998e-06, -7.714902863079500e-06, 0.000000000000000e+00, -7.715195095077998e-06, -1.454275562099399e-04, 0.000000000000000e+00, -1.450233919440937e-04, -1.420126605947262e-04, 0.000000000000000e+00, -1.417102426583400e-04, -1.396433736068927e-04, 0.000000000000000e+00, -1.409506846392776e-04, -1.364514195188048e-04, 0.000000000000000e+00, -1.376298346625768e-04, -1.480694337851024e-04, 0.000000000000000e+00, -1.439242805141082e-04, -1.480694337851024e-04, 0.000000000000000e+00, -1.439242805141082e-04, -4.789430371007765e-02, 0.000000000000000e+00, -4.896401629765428e-02, -4.905958534051222e-02, 0.000000000000000e+00, -5.064818867323859e-02, -4.372783736424864e-02, 0.000000000000000e+00, -4.799360327602523e-02, -3.162117426848645e-02, 0.000000000000000e+00, -3.754236555504051e-02, -4.680626928587768e-02, 0.000000000000000e+00, -5.272662809052889e-02, -4.680626928587767e-02, 0.000000000000000e+00, -5.272662809052887e-02, -2.779698552979661e+00, 0.000000000000000e+00, -2.815399700698405e+00, -8.928190543856924e-01, 0.000000000000000e+00, -8.826325444681200e-01, -3.191454682469149e+00, 0.000000000000000e+00, -3.062878845738066e+00, -2.760015939833408e-04, 0.000000000000000e+00, -2.766679940124892e-04, -2.870442346550937e+00, 0.000000000000000e+00, -3.245203734371856e+00, -2.870442346550937e+00, 0.000000000000000e+00, -3.245203734371856e+00, -9.880448767665097e+00, 0.000000000000000e+00, -8.551870557237450e+00, -8.507434027899306e+00, 0.000000000000000e+00, -7.854727810108487e+00, -4.845681097010093e+01, 0.000000000000000e+00, -5.390308042378994e+01, -4.934598600964804e+00, 0.000000000000000e+00, -4.754383784430663e+00, -2.409794037130611e+01, 0.000000000000000e+00, -2.366732084628482e+01, -2.409794037130606e+01, 0.000000000000000e+00, -2.366732084628477e+01, -1.013832774691770e-01, 0.000000000000000e+00, -9.993504795450919e-02, -8.292384615857237e-02, 0.000000000000000e+00, -8.186145295094506e-02, -8.935577236340120e-02, 0.000000000000000e+00, -8.819518212884428e-02, -9.517695507413727e-02, 0.000000000000000e+00, -9.383007088182974e-02, -9.225188118538002e-02, 0.000000000000000e+00, -9.099316192659040e-02, -9.225188118538002e-02, 0.000000000000000e+00, -9.099316192659039e-02, -1.032132623627155e-01, 0.000000000000000e+00, -1.022629508219107e-01, -4.698008580117801e-02, 0.000000000000000e+00, -4.668808982846687e-02, -5.818727886576197e-02, 0.000000000000000e+00, -5.796127280404732e-02, -7.920910102207589e-02, 0.000000000000000e+00, -7.847713865886088e-02, -6.814623799319143e-02, 0.000000000000000e+00, -6.719053468458271e-02, -6.814623799319144e-02, 0.000000000000000e+00, -6.719053468458272e-02, -3.217071319980808e-02, 0.000000000000000e+00, -3.443891229142006e-02, -4.579684748597279e-01, 0.000000000000000e+00, -4.513577286372782e-01, -2.864439647862755e-01, 0.000000000000000e+00, -2.802983373243411e-01, -1.872929736487582e-01, 0.000000000000000e+00, -1.844852057170903e-01, -2.185563773503669e-01, 0.000000000000000e+00, -2.202690790887564e-01, -2.185563773503670e-01, 0.000000000000000e+00, -2.202690790887565e-01, -7.504504660360856e-02, 0.000000000000000e+00, -7.457029847081900e-02, -4.059678019980011e+00, 0.000000000000000e+00, -4.063676520378007e+00, -3.953234820343540e+00, 0.000000000000000e+00, -4.029656370653012e+00, -2.832007428648018e-01, 0.000000000000000e+00, -3.032540086267598e-01, -4.749405574630917e+00, 0.000000000000000e+00, -5.436303443160925e+00, -4.749405574630917e+00, 0.000000000000000e+00, -5.436303443160933e+00, -6.085257687049814e+00, 0.000000000000000e+00, -6.211777748608739e+00, -3.040271095766849e+01, 0.000000000000000e+00, -5.385339430935282e+01, -1.876316473542078e+01, 0.000000000000000e+00, -1.997441687587944e+01, -5.314758420358999e+00, 0.000000000000000e+00, -5.193553325030440e+00, -4.968065908949436e+01, 0.000000000000000e+00, -2.457069557264072e+01, -4.968065908949445e+01, 0.000000000000000e+00, -2.457069557264080e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_regtpss_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_regtpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_regtpss_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_regtpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.904773451323213e-03, 1.904468307986109e-03, 1.904804570799994e-03, 1.904490916278477e-03, 1.904808688828080e-03, 1.904523476231260e-03, 1.904456672920175e-03, 1.904075143276075e-03, 1.904795639470105e-03, 1.904184399385422e-03, 1.904795639470105e-03, 1.904184399385422e-03, 2.914600874305501e-03, 2.905649683221490e-03, 2.916708764928885e-03, 2.906312323158118e-03, 2.949706585280351e-03, 2.953576078933655e-03, 2.970929775196376e-03, 2.963653650388269e-03, 2.911134493588409e-03, 2.994362436249121e-03, 2.911134493588409e-03, 2.994362436249121e-03, 3.478830931281659e-03, 3.412759362840836e-03, 3.516504647699053e-03, 3.411247265616364e-03, 3.720797522361643e-03, 3.986202300361586e-03, 4.576803111864356e-03, 4.673718204938783e-03, 3.000772054478904e-03, 4.924196456169439e-03, 3.000772054478904e-03, 4.924196456169439e-03, 9.957890848169053e-03, 1.237652392590821e-02, 1.106962362846162e-02, 1.415468394583298e-02, 3.059344220280014e-04, 3.426295207344235e-04, 1.467096323035974e-03, 1.879995160211686e-03, 9.971373379767090e-03, 1.961236507705286e-04, 9.971373379767084e-03, 1.961236507705290e-04, 3.037154967199005e-12, 5.354579289753520e-12, 4.594009590752743e-12, 7.614830355833942e-12, 2.317998455664731e-07, 3.508272222362655e-07, 6.721581582331472e-14, 5.722335851395383e-14, 1.320016539387004e-12, 1.423814029693235e-13, 1.320016539387010e-12, 1.423814029693235e-13, 8.784928307271657e-03, 8.782765633747896e-03, 8.814608685120717e-03, 8.811418328075495e-03, 8.785237487309720e-03, 8.782785674024138e-03, 8.810738797746813e-03, 8.808851260087557e-03, 8.801146683605897e-03, 8.797322129610919e-03, 8.801146683605897e-03, 8.797322129610919e-03, 6.181314092885979e-03, 6.197639754387878e-03, 6.412593488190452e-03, 6.420015655232372e-03, 5.763132358832307e-03, 5.897893817147624e-03, 5.945458513671547e-03, 6.082739506565594e-03, 6.638494245800970e-03, 6.363773868092869e-03, 6.638494245800970e-03, 6.363773868092869e-03, 5.181052073812802e-02, 5.363461539790285e-02, 6.493519410911575e-02, 6.859307763853931e-02, 2.244146698694024e-02, 3.360235335864182e-02, 1.114534094236097e-02, 2.087117524899770e-02, 6.219239398860086e-02, 5.323371627983511e-02, 6.219239398860083e-02, 5.323371627983514e-02, 1.306124011132199e-04, 1.420203787411046e-04, 3.617330715252178e-03, 3.672785732883294e-03, 7.558282634468626e-05, 1.097831780415354e-04, 5.609623976038704e-03, 5.621076553411312e-03, 4.860048366162189e-04, 1.228269912306778e-03, 4.860048366162191e-04, 1.228269912306780e-03, 1.132322489583667e-14, 1.177760588182115e-14, 6.685610262899771e-14, 6.149241892122691e-14, 3.172805700204244e-13, 5.839783670317080e-13, 1.084645700641510e-05, 1.152070427636039e-05, 4.095957694229129e-14, 8.478191120970518e-13, 4.095957694229121e-14, 8.478191120970489e-13, 1.432494000582474e-01, 1.429654982186379e-01, 1.201873310612040e-01, 1.201167620959466e-01, 1.284155417874790e-01, 1.283205589023810e-01, 1.356341279727382e-01, 1.353849488610100e-01, 1.320300185545763e-01, 1.318526222298638e-01, 1.320300185545763e-01, 1.318526222298639e-01, 1.405624927577064e-01, 1.406176352469280e-01, 4.155803923339184e-02, 4.199051416491577e-02, 6.053437345965646e-02, 6.119745072266054e-02, 9.041590374398140e-02, 9.054043124759181e-02, 7.423370714890090e-02, 7.425872311129229e-02, 7.423370714890090e-02, 7.425872311129232e-02, 4.205320560638520e-02, 4.769057244806509e-02, 7.392746013589768e-03, 7.573491236042374e-03, 1.437303403807598e-02, 1.518018785323158e-02, 3.479656250881122e-02, 3.460006096571850e-02, 2.589845561792341e-02, 2.622040744829380e-02, 2.589845561792341e-02, 2.622040744829381e-02, 3.941722901272301e-02, 4.142065885767877e-02, 1.843104951153789e-07, 1.891989062345787e-07, 1.335733180732568e-06, 1.775668189294369e-06, 4.551614633594579e-02, 6.329561159503541e-02, 5.735500288710574e-05, 1.219505451628167e-04, 5.735500288710582e-05, 1.219505451628170e-04, 1.906047166607048e-11, 2.490885837296793e-11, 2.585043439468274e-17, 3.358889468662574e-17, 5.546347178678008e-15, 9.669373239743605e-15, 5.460337016469948e-05, 7.853297260583738e-05, 1.537202316344564e-13, 4.960820056561379e-13, 1.537202316344560e-13, 4.960820056561375e-13]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
