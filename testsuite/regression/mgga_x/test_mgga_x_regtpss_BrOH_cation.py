
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_regtpss_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_regtpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.009641940527182e+01, -2.009650379501485e+01, -2.009688489790885e+01, -2.143556608994322e+01, -2.143615494361753e+01, -2.277612391399035e+01, -3.469168633291614e+00, -3.706703411158848e+00, -3.706683702477815e+00, -3.707026558930846e+00, -3.706606747154274e+00, -3.469228013287268e+00, -6.260599336514829e-01, -6.807193067263517e-01, -7.253826795621747e-01, -6.705274392810496e-01, -6.141378925552766e-01, -7.283932365463265e-01, -1.807859391108850e-01, -1.829883651012718e-01, -8.204566309824058e-01, -1.735894929553934e-01, -1.969942079888872e-01, -1.899680501356751e-01, -1.010246492636513e-02, -8.593618563411783e-03, -4.627592666594080e-02, -5.828627494557879e-03, -8.132823845114375e-03, -8.132823845114377e-03, -5.556729723609074e+00, -5.557811335744318e+00, -5.556784112479242e+00, -5.557738867466088e+00, -5.282064881084525e+00, -5.282318164463033e+00, -2.093667535120233e+00, -2.106876732818786e+00, -2.084300955372136e+00, -2.095769125456526e+00, -1.970104703045455e+00, -2.105578441005873e+00, -5.847309876273493e-01, -6.797938570130690e-01, -5.784473751794854e-01, -6.009447082937538e-01, -5.990593483785689e-01, -6.354898845388490e-01, -1.350063145637766e-01, -1.879212897561965e-01, -1.267419072019194e-01, -2.043900374345209e+00, -1.472222486120485e-01, -1.472222486120485e-01, -3.574796235740008e-03, -5.697995023530643e-03, -4.362883213686965e-03, -7.102325233138804e-02, -5.480134689158252e-03, -5.480134689158253e-03, -6.287996380790735e-01, -6.256836418618809e-01, -5.937814993695363e-01, -6.138364130060177e-01, -5.968637008043299e-01, -6.120341912729539e-01, -6.118535119960875e-01, -4.901895443994937e-01, -5.138768816576862e-01, -5.745306932365986e-01, -5.614660442300321e-01, -5.266273018080220e-01, -6.689383012086109e-01, -2.537102202427333e-01, -2.692358689398638e-01, -3.480812812810794e-01, -3.270650781320211e-01, -3.045115699598077e-01, -4.829680782495972e-01, -3.110761367332430e-02, -7.383451186104401e-02, -3.570420982841934e-01, -1.089061691526991e-01, -1.089061691526991e-01, -7.901525901038781e-03, -1.523286780177339e-03, -1.775783914722377e-03, -6.313159438710658e-02, -5.032827093972131e-03, -3.335533093776713e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_regtpss_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_regtpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.831874412762910e+01, -2.831964263510074e+01, -2.831897284356923e+01, -2.831980861348488e+01, -2.831967115655659e+01, -2.832081856712588e+01, -2.831709821680349e+01, -2.877405846540154e+01, -2.831888577030826e+01, -2.877471670695679e+01, -2.877503968866703e+01, -2.877471670695679e+01, -4.510535851703561e+00, -4.277138764551874e+00, -4.510655626079737e+00, -4.510462293911031e+00, -4.512954941857501e+00, -4.513412132248120e+00, -4.512501224397283e+00, -4.512567308918831e+00, -4.509546009832899e+00, -4.514716264884255e+00, -4.276476428745844e+00, -4.514716264884255e+00, -8.297343907973789e-01, -8.326154485109059e-01, -8.285596912677335e-01, -7.971050137392272e-01, -7.585814166692165e-01, -7.507794958828693e-01, -7.668394407037348e-01, -8.168304167328408e-01, -8.387352129766086e-01, -7.890804788112178e-01, -8.065733542554127e-01, -7.236973462885626e-01, -2.118207268886069e-01, -1.983944177444806e-01, -2.143710574368671e-01, -2.034704067030689e-01, -8.463279775959313e-01, -9.907834442189379e-01, -1.607474971395770e-01, -1.573028472355426e-01, -1.963674919290513e-01, -1.493010939446774e-01, -1.963674919290511e-01, -1.181847482528896e-01, -1.300267291276581e-02, -1.381200702427697e-02, -7.573250055860526e-03, -1.458467066631185e-02, -4.213773950573917e-02, -7.469005604965391e-02, -7.830773772470313e-03, -7.700469685073584e-03, -1.160661271740751e-02, -6.612822111742319e-03, -1.160661271740751e-02, -6.612822111742321e-03, -7.067688691352505e+00, -7.066003054858011e+00, -7.070187874927393e+00, -7.068417412005251e+00, -7.067851028242603e+00, -7.066102966973340e+00, -7.069994626918056e+00, -7.068295475690908e+00, -7.219491838752085e+00, -7.067211696786895e+00, -7.068949710461703e+00, -7.217668725077352e+00, -2.492125011459090e+00, -2.493074456084480e+00, -2.520916389474064e+00, -2.520944385966414e+00, -2.466947717010521e+00, -2.475134514877980e+00, -2.492393466474697e+00, -2.500741813943959e+00, -2.526816924697163e+00, -2.417898888313346e+00, -2.526816924697163e+00, -2.510415868559388e+00, -7.806449728096303e-01, -7.294932683146096e-01, -8.591805455482391e-01, -8.602591774486769e-01, -6.931097400351692e-01, -7.268834181843684e-01, -7.362192572214482e-01, -7.640752789903907e-01, -8.160928333930723e-01, -7.236095741609267e-01, -8.160928333930725e-01, -7.723410218847240e-01, -1.421396789662726e-01, -1.427942847466901e-01, -2.159819136104074e-01, -1.932958183965893e-01, -1.356587492961807e-01, -1.378904144469368e-01, -2.564114446228079e+00, -2.563012070275679e+00, -1.427258388767106e-01, -1.376720904669199e-01, -1.427258388767106e-01, -1.376720904669200e-01, -3.259089752190920e-03, -6.107643442844857e-03, -7.535198883545655e-03, -7.649430457224353e-03, -5.632509520601530e-03, -5.963853916426531e-03, -1.064167922445976e-01, -7.064113793960121e-02, -5.756287587364441e-03, -7.895742874099037e-03, -5.756287587364441e-03, -7.895742874099040e-03, -8.191181310840239e-01, -8.226479966766526e-01, -8.043331349016897e-01, -8.078224527174551e-01, -8.382421195241792e-01, -8.416065853642850e-01, -8.399583431435678e-01, -8.168351275042171e-01, -8.392067170784379e-01, -8.424970982714510e-01, -8.392067170784379e-01, -8.146637221312636e-01, -7.955084461759169e-01, -7.985246710072514e-01, -6.475902817758297e-01, -6.089512628985803e-01, -6.869160290491403e-01, -6.519418175153485e-01, -7.256398423441736e-01, -7.283152198371040e-01, -7.057895758733753e-01, -7.085834646840169e-01, -7.057895758733752e-01, -6.831732062209893e-01, -8.964984242106916e-01, -8.744095493658111e-01, -2.420999049232350e-01, -2.437271491152639e-01, -3.253118311373268e-01, -3.076880881018441e-01, -4.265657902954686e-01, -4.431184030811001e-01, -3.708144341567692e-01, -3.710480487389481e-01, -3.708144341567691e-01, -3.730875872070384e-01, -5.869349043876915e-01, -5.928057054791288e-01, -4.134920928454672e-02, -4.163222847401352e-02, -9.053571339999843e-02, -9.275372404096088e-02, -4.308557846728904e-01, -4.426257878819615e-01, -1.185037509879662e-01, -1.181330958501458e-01, -1.185037509879661e-01, -1.181330958501457e-01, -1.033819647930660e-02, -1.071303057094190e-02, -2.028644221150480e-03, -2.033280547100133e-03, -2.288265314744058e-03, -2.433756595869629e-03, -8.360967830326946e-02, -8.499875979339198e-02, -5.451203474526494e-03, -7.238818905085712e-03, -5.451203474526490e-03, -4.018534514210500e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_regtpss_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_regtpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.045712719506388e-08, 0.000000000000000e+00, -2.046355653082919e-08, -2.045779090825961e-08, 0.000000000000000e+00, -2.046403755236220e-08, -2.045951408482663e-08, 0.000000000000000e+00, -2.046661878181834e-08, -2.045209078122308e-08, 0.000000000000000e+00, -2.164614943546431e-08, -2.045756723181056e-08, 0.000000000000000e+00, -2.164721123872690e-08, -2.164502535929563e-08, 0.000000000000000e+00, -2.164721123872690e-08, -1.349636510401223e-05, 0.000000000000000e+00, -1.077283986918482e-05, -1.349941331430272e-05, 0.000000000000000e+00, -1.349650843308829e-05, -1.355919273850942e-05, 0.000000000000000e+00, -1.356937858838643e-05, -1.353283062473134e-05, 0.000000000000000e+00, -1.353215571293922e-05, -1.349822773092410e-05, 0.000000000000000e+00, -1.358528572369262e-05, -1.077756526069995e-05, 0.000000000000000e+00, -1.358528572369262e-05, -6.333029077112663e-03, 0.000000000000000e+00, -6.267840428690137e-03, -6.362714526320179e-03, 0.000000000000000e+00, -6.293314975015197e-03, -6.515859948243673e-03, 0.000000000000000e+00, -6.629756581783859e-03, -6.554392573224387e-03, 0.000000000000000e+00, -6.695788325406427e-03, -6.101191628135671e-03, 0.000000000000000e+00, -7.558080573962653e-03, -6.151036204266719e-03, 0.000000000000000e+00, -7.024249281983658e-03, -1.426880938818019e+00, 0.000000000000000e+00, -1.111165934186817e+00, -1.363626591378660e+00, 0.000000000000000e+00, -1.068512775489424e+00, -2.622883303190141e-03, 0.000000000000000e+00, -2.996330555813408e-03, -1.527607490852567e+00, 0.000000000000000e+00, -1.684547812522051e+00, -9.993817016568028e-01, 0.000000000000000e+00, -1.753189983246771e+00, -9.993817016568035e-01, 0.000000000000000e+00, -1.450999624126651e+01, -7.497324628942464e+00, 0.000000000000000e+00, -7.525858113435218e+00, -8.711659898687798e+05, 0.000000000000000e+00, -7.871031151070314e+00, -9.069410804660527e+02, 0.000000000000000e+00, -3.646981690253446e+00, -5.492022383028797e+00, 0.000000000000000e+00, -5.548315469866586e+00, -7.123477347627110e+00, 0.000000000000000e+00, -1.219888671531166e+01, -7.123477347627110e+00, 0.000000000000000e+00, -1.219888671531164e+01, -7.605574855382048e-06, 0.000000000000000e+00, -7.613062137929702e-06, -7.631179281186941e-06, 0.000000000000000e+00, -7.637834522772082e-06, -7.607408146036939e-06, 0.000000000000000e+00, -7.614210912424644e-06, -7.629358615803839e-06, 0.000000000000000e+00, -7.636695851366392e-06, -8.639006395871418e-06, 0.000000000000000e+00, -7.625444117457267e-06, -7.618370218732170e-06, 0.000000000000000e+00, -8.646781617026746e-06, -1.159251586177958e-04, 0.000000000000000e+00, -1.162745631967354e-04, -1.157795432790976e-04, 0.000000000000000e+00, -1.161391875629345e-04, -1.159469299598697e-04, 0.000000000000000e+00, -1.162625801928268e-04, -1.157783571163264e-04, 0.000000000000000e+00, -1.161199231623847e-04, -1.159446896211785e-04, 0.000000000000000e+00, -9.888966693029806e-05, -1.159446896211785e-04, 0.000000000000000e+00, -1.162406273812504e-04, -2.440541558463100e-02, 0.000000000000000e+00, -1.796324995651043e-02, -2.805502259704128e-02, 0.000000000000000e+00, -2.872432291938948e-02, -2.518401548628022e-02, 0.000000000000000e+00, -2.543219359578876e-02, -2.944018279314129e-02, 0.000000000000000e+00, -2.902504720300288e-02, -2.416788252901783e-02, 0.000000000000000e+00, -1.895100545386671e-02, -2.416788252901783e-02, 0.000000000000000e+00, -2.639020602360839e-02, -2.145376703016772e+00, 0.000000000000000e+00, -2.123249427746650e+00, -1.299501900669611e+00, 0.000000000000000e+00, -8.128330744759608e-01, -2.309643187214244e+00, 0.000000000000000e+00, -2.346865088838464e+00, -2.467802108226456e-04, 0.000000000000000e+00, -2.473746934836515e-04, -2.390849625100925e+00, 0.000000000000000e+00, -2.830210238064120e+00, -2.390849625100928e+00, 0.000000000000000e+00, -2.830210238064117e+00, -2.540313413748499e+07, 0.000000000000000e+00, -3.676156333097806e+00, -5.209582866771988e+00, 0.000000000000000e+00, -4.592058784974122e+00, -3.751528694312207e+01, 0.000000000000000e+00, -4.117965419772261e+01, -3.371614863862425e+00, 0.000000000000000e+00, -1.143217271940703e+02, -7.069076348383062e+00, 0.000000000000000e+00, -2.244614438707631e+01, -7.069076348383062e+00, 0.000000000000000e+00, -2.244614438707626e+01, -7.031938743889880e-02, 0.000000000000000e+00, -6.958110633168035e-02, -6.122335191615128e-02, 0.000000000000000e+00, -6.067455568722381e-02, -7.298968567913056e-02, 0.000000000000000e+00, -7.200162691814531e-02, -7.319071076332101e-02, 0.000000000000000e+00, -6.616191215884397e-02, -7.319370939363268e-02, 0.000000000000000e+00, -7.214469363649888e-02, -7.319370939363268e-02, 0.000000000000000e+00, -6.485747380436606e-02, -7.660132210564963e-02, 0.000000000000000e+00, -7.602086240324145e-02, -4.200042649623790e-02, 0.000000000000000e+00, -3.043723772558321e-02, -4.761971427589155e-02, 0.000000000000000e+00, -3.549179609193466e-02, -5.702010183821543e-02, 0.000000000000000e+00, -5.652266844509415e-02, -5.175104259712485e-02, 0.000000000000000e+00, -5.141983444222133e-02, -5.175104259712479e-02, 0.000000000000000e+00, -4.332764383826570e-02, -2.025753479419339e-02, 0.000000000000000e+00, -1.863037918512083e-02, -4.351700959138236e-01, 0.000000000000000e+00, -4.281753310430307e-01, -2.640204730647419e-01, 0.000000000000000e+00, -2.468680886895947e-01, -1.005428724599269e-01, 0.000000000000000e+00, -1.139046418350530e-01, -1.700592432563286e-01, 0.000000000000000e+00, -1.709105351735087e-01, -1.700592432563288e-01, 0.000000000000000e+00, -1.607839750658027e-01, -4.823410505651451e-02, 0.000000000000000e+00, -4.858227982525452e-02, -9.781535182052191e+02, 0.000000000000000e+00, -9.518176882302532e+02, -3.035442413197864e+00, 0.000000000000000e+00, -3.129435813811922e+00, -1.592687894355483e-01, 0.000000000000000e+00, -1.729351923796499e-01, -3.738599919653697e+00, 0.000000000000000e+00, -4.361446365871055e+00, -3.738599919653697e+00, 0.000000000000000e+00, -4.361446365871061e+00, -2.508636296856562e+05, 0.000000000000000e+00, -2.175521338333529e+05, -5.990152556412355e+00, 0.000000000000000e+00, -5.963814472930234e+00, -1.045314657825820e+08, 0.000000000000000e+00, -8.168887415945160e+07, -5.806751581156393e+01, 0.000000000000000e+00, -5.432444102725989e+01, -1.824398290975412e+01, 0.000000000000000e+00, -2.327155000184670e+01, -1.824398290975412e+01, 0.000000000000000e+00, -1.098966387713321e+07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_regtpss_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_regtpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([8.932537472722062e-04, 8.938468593585679e-04, 8.933377324607001e-04, 8.939077749307744e-04, 8.935732893127744e-04, 8.942546589821132e-04, 8.926315325864195e-04, 1.744032528169123e-03, 8.933077554250975e-04, 1.744205497171392e-03, 1.744100980788117e-03, 1.744205497171392e-03, 3.960295591011109e-03, -2.380201322102174e-04, 3.961903638405729e-03, 3.960078429651108e-03, 3.993273610842163e-03, 3.998864859768402e-03, 3.981511329263047e-03, 3.981498071065293e-03, 3.957347995845029e-03, 4.009791907972991e-03, -2.380765340459096e-04, 4.009791907972991e-03, -3.204272036346376e-04, -3.599017720944208e-04, -3.093963614834993e-04, 6.399314583470526e-03, 4.886686147300295e-03, 4.701430968550980e-03, 5.334900458879041e-03, -2.436523218185902e-04, -3.840296925014193e-04, -6.145654078097809e-05, 6.620056267870047e-03, 4.044157704486739e-03, 3.367186782175739e-04, 1.146394266913590e-02, 2.833274788311380e-04, 1.287086635777993e-02, 1.390583887765347e-03, 4.853471602846053e-05, 9.875203461329977e-04, 1.433858812270353e-03, 8.013583791195572e-03, 1.128231516478288e-04, 8.013583791195570e-03, 1.226067300811681e-04, 2.597515726636088e-10, 3.545146447371172e-10, 1.122804949114526e-07, 4.998597871929817e-10, 9.068151804686892e-06, 1.042077835847526e-06, 1.267237069315728e-11, 1.182947758970424e-11, 1.355410022109987e-10, 1.802480326476385e-11, 1.355410022109987e-10, 1.802480326476312e-11, 8.707240494414091e-03, 8.709523143307904e-03, 8.737042063944690e-03, 8.738334000416579e-03, 8.709331434815039e-03, 8.710827934027207e-03, 8.734882909794279e-03, 8.736981327989276e-03, 7.843671385731554e-03, 8.723933411911317e-03, 8.722170599100453e-03, 7.844537649232479e-03, 5.272218825317380e-03, 5.305174076883070e-03, 5.559365130828807e-03, 5.584299228638238e-03, 5.017606380701828e-03, 5.121012059445810e-03, 5.265215492647740e-03, 5.373737866096319e-03, 5.632109849272090e-03, -3.997841380026839e-04, 5.632109849272090e-03, 5.481847288023702e-03, 4.019199562649555e-02, 1.865702562575369e-03, 5.993295583598632e-02, 6.133786659948893e-02, 2.712330059439166e-02, 3.299363872544574e-02, 4.056372701992268e-02, 4.492641552524634e-02, 4.555895615436811e-02, 2.255388341106763e-03, 4.555895615436810e-02, 4.214451541965541e-02, 1.224359218739066e-04, 1.282516517145062e-04, 4.312791151835830e-04, 3.030630013513219e-03, 7.065900963304867e-05, 1.046590573438436e-04, 1.443051408919136e-02, 1.444643697994606e-02, 4.199299657700470e-04, 9.991433979928545e-04, 4.199299657700474e-04, 9.991433979928562e-04, 4.590506070228046e-09, 1.994974317832331e-12, 9.650953681979917e-12, 8.608874887795622e-12, 4.368093705795179e-11, 6.698176010192003e-11, 1.290731762510861e-05, 4.980620704882582e-05, 3.959477847012141e-12, 1.100560641346965e-10, 3.959477847011972e-12, 1.100560641345800e-10, 1.081520959166830e-01, 1.081440215936353e-01, 9.565853356289337e-02, 9.579837552558171e-02, 1.244461370569917e-01, 1.248093707454085e-01, 1.300108851938336e-01, 1.035121893181773e-01, 1.273638179059313e-01, 1.275625698268959e-01, 1.273638179059313e-01, 1.017112596640668e-01, 1.091411346526613e-01, 1.092578543512168e-01, 3.876014860300173e-02, -8.423063724435400e-04, 5.354325764592634e-02, 7.596976626456522e-03, 7.302270915729223e-02, 7.312261429071634e-02, 6.250282256284087e-02, 6.279267360150610e-02, 6.250282256284080e-02, 2.048730709319704e-02, 5.005837228240125e-02, 2.106076603677209e-02, 6.607080525100619e-03, 6.751660699733306e-03, -3.838841544836612e-04, 1.267424069508402e-02, -2.176096813823480e-03, 2.887664835059348e-02, 2.100547027736997e-02, 2.126321466106019e-02, 2.100547027736998e-02, -1.591596265379189e-03, 3.141013471878814e-02, 3.301483401114552e-02, 9.021311981827896e-06, 9.023318160932938e-06, 2.713444130868425e-06, 3.457479653210129e-06, 4.051222514786447e-02, 5.005344180634358e-02, 6.260861544864564e-05, 1.229435474992970e-04, 6.260861544864580e-05, 1.229435474992971e-04, 1.329272376931138e-07, 1.457736812226120e-07, 1.671741735855511e-14, 1.679794728639375e-14, 6.605094902184263e-09, 8.419057385139168e-09, 1.019160082123044e-04, 1.184601076360824e-04, 1.253050487792185e-11, 7.507114568890588e-11, 1.253050487795701e-11, 5.017182068527283e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
