
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_2d_js17_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_2d_js17", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.524506545562619e+02, -1.524512936049894e+02, -1.524543310566476e+02, -1.515076739377919e+02, -1.515127689379760e+02, -1.505756605374602e+02, -9.876297949504448e+00, -9.780875850778461e+00, -9.779523247724157e+00, -9.781364218811976e+00, -9.779684520475147e+00, -9.874851979878830e+00, -8.061003099427461e-01, -1.018140125221155e+00, -1.262867767954078e+00, -1.012503137783857e+00, -7.779030113788169e-01, -1.250637005508763e+00, -2.217476895160475e-01, -2.214643250028104e-01, -1.409812667290273e+00, -4.712114938488339e-01, -4.147745964179244e-01, -3.224384624359896e-01, -9.587304645818246e-01, 2.006383203156584e+00, -9.150625560166237e-02, -1.241089303649526e+00, -1.019650095174742e+00, -1.019650095174742e+00, -1.788727348138025e+01, -1.789427219716775e+01, -1.788763744837027e+01, -1.789381432618045e+01, -1.811623416386521e+01, -1.811602719760008e+01, -4.353215557597386e+00, -4.378865482747433e+00, -4.336241153373020e+00, -4.357838170405644e+00, -4.300581936419587e+00, -4.375808952956918e+00, -7.245643341998390e-01, -7.922229822692937e-01, -7.425526135432152e-01, -7.248697435420857e-01, -7.335885263540982e-01, -7.696812298811685e-01, -5.534949357106225e-01, -2.679593887619926e-01, -5.592704895773488e-01, -4.001905506655111e+00, -4.548253922532233e-01, -4.548253922532232e-01, 1.227595256380432e+01, -1.296464592969008e+00, -7.504748023053840e-01, -1.756662776218162e-01, -9.358135958365494e-01, -9.358135958365493e-01, -6.750080650873072e-01, -6.713669615533140e-01, -6.934918440080891e-01, -6.839207760169346e-01, -6.945296483350039e-01, -6.831042327854815e-01, -6.473436974273847e-01, -5.776966330577178e-01, -5.944994957347073e-01, -6.228403528185217e-01, -6.232239962513411e-01, -6.035376348457083e-01, -8.503698017295963e-01, -4.747344744001241e-01, -3.256510728977478e-01, -3.915166372836810e-01, -4.625259766562171e-01, -3.488157123507479e-01, -6.062709580297639e-01, 6.081488533118984e-01, -6.625973226540602e-01, -4.179159577014835e-01, -4.969169456570754e-01, -4.969169456570754e-01, 5.028891344879671e+00, -1.812955426206669e+00, 2.168763819708960e+01, 1.390920794293885e-01, -8.651035913162926e-01, 5.595506881836155e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_2d_js17_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_2d_js17", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.287531645959806e+02, -2.287527180584884e+02, -2.287542724006606e+02, -2.287535228418955e+02, -2.287580355263108e+02, -2.287588538005876e+02, -2.287455191634234e+02, -2.303663739784722e+02, -2.287538142357490e+02, -2.303728960352921e+02, -2.303773203557929e+02, -2.303728960352921e+02, -1.358411703029899e+01, -1.504879086903381e+01, -1.358464633096872e+01, -1.358376933717876e+01, -1.359482853386738e+01, -1.359687860079762e+01, -1.359296920035447e+01, -1.359328777033665e+01, -1.357943952523731e+01, -1.360286906583084e+01, -1.504533809542052e+01, -1.360286906583084e+01, -1.290601141913443e+00, -1.297581994683311e+00, -1.287803905973885e+00, -5.904635898611503e-01, -4.996297006323300e-01, -4.828382791372772e-01, -5.221528029796867e-01, -1.260397436064261e+00, -1.311989515385806e+00, -1.197206698053254e+00, -6.098117742076103e-01, -4.229623447428965e-01, -1.804235084836282e-01, 3.428697863657974e-02, -1.827651102218033e-01, 2.857065873356564e-02, -4.546449541377366e-01, -1.678213281821493e+00, 1.152860174118605e-01, 1.042327819039084e-01, 4.750112119429648e-02, 1.630831898428865e-01, 4.750112119429628e-02, -1.450227962867587e-01, 3.178262632056787e-01, 3.116682321481209e-01, -2.804749623791791e+00, 3.024096587970955e-01, -3.225344166862689e-01, 2.185985031090278e-01, 4.069204202171054e-01, 4.077331867382702e-01, 3.341030721182667e-01, 3.369381469933799e-01, 3.341030721182667e-01, 3.369381469933804e-01, -2.757766840145916e+01, -2.756767779983483e+01, -2.758903577530284e+01, -2.757865956726990e+01, -2.757839315005035e+01, -2.756812211599728e+01, -2.758814431823291e+01, -2.757809593497221e+01, -2.754315607661903e+01, -2.757318559242881e+01, -2.758342474557769e+01, -2.753308106418578e+01, -5.136191758210549e+00, -5.139698997087535e+00, -5.238725283536452e+00, -5.239043823185820e+00, -5.047664537059263e+00, -5.076427459600728e+00, -5.137082206775235e+00, -5.166839613688062e+00, -5.260042406394418e+00, -6.405814601333540e+00, -5.260042406394419e+00, -5.201382290911210e+00, -7.569597116827438e-01, -1.044936804578559e+00, -9.885056616083208e-01, -9.955519033067793e-01, -5.499262508302278e-01, -6.306019814266164e-01, -6.754385125899147e-01, -7.430022229709882e-01, -8.469212685925086e-01, -1.030538702589483e+00, -8.469212685925086e-01, -7.485926274484259e-01, 1.558530422213567e-01, 1.551948457505271e-01, -1.944427490805552e-01, 8.433845315474785e-02, 1.645477475023068e-01, 1.565183181958000e-01, -5.614177931245925e+00, -5.610587488100024e+00, 1.278847114863445e-01, 1.063598167570639e-01, 1.278847114863446e-01, 1.063598167570634e-01, -1.387354693772102e+01, 4.947031323838537e-01, 4.182457364190325e-01, 4.324316511642005e-01, 2.523589414627972e-01, 2.411911654447719e-01, 1.820608374149917e-01, -1.590686452525582e-01, 4.138495771317181e-01, 2.658967117636177e-01, 4.138495771317171e-01, 2.658967117636170e-01, -1.019520943737223e+00, -1.027071907703115e+00, -9.645666863288697e-01, -9.723415887050618e-01, -1.041012155710364e+00, -1.047085856293319e+00, -1.043473807182601e+00, -1.006612106769656e+00, -1.042241607937130e+00, -1.048296889571890e+00, -1.042241607937131e+00, -9.986139251812634e-01, -9.707151279938381e-01, -9.773332184685928e-01, -5.151503665776459e-01, -8.096312293819710e-01, -6.266617388146859e-01, -8.651976528388423e-01, -7.511179583095948e-01, -7.566460222456480e-01, -6.860603456092282e-01, -6.921279027103411e-01, -6.860603456092280e-01, -8.922329956482407e-01, -1.031945091404660e+00, -1.270993280558351e+00, 4.051626419016625e-02, 3.888061550704289e-02, -3.259903296419318e-01, -2.702146503823330e-02, -4.820473678559678e-01, -1.997793969428744e-01, -1.047716726037274e-01, -1.056425976210801e-01, -1.047716726037273e-01, -3.963040246974513e-01, -3.976886591180850e-01, -4.112656603349141e-01, -3.229777815921290e-01, -3.230739441071477e-01, 2.113580614970178e-01, 2.061628922922469e-01, -2.084857476459487e-01, -2.390170589483836e-01, 1.528636524076693e-01, 1.375688401340464e-01, 1.528636524076694e-01, 1.375688401340471e-01, -2.578056818719874e+00, -2.461889119650712e+00, 5.949290142372993e-01, 5.953081106332317e-01, -1.156578705562679e+01, -1.024421640322146e+01, -1.272461271025820e-01, -1.213799030775133e-01, 3.164735896524178e-01, 2.700320302135340e-01, 3.164735896524180e-01, -4.195919078651879e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_2d_js17_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_2d_js17", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [2.984416401294311e-08, 0.000000000000000e+00, 2.984434522652537e-08, 2.984373146552723e-08, 0.000000000000000e+00, 2.984403099037752e-08, 2.984226165372772e-08, 0.000000000000000e+00, 2.984194895305984e-08, 2.984714896731657e-08, 0.000000000000000e+00, 1.869832485261540e-08, 2.984391040917892e-08, 0.000000000000000e+00, 1.869846324549635e-08, 1.869686080960163e-08, 0.000000000000000e+00, 1.869846324549635e-08, -1.437519904584709e-05, 0.000000000000000e+00, 1.032287953976197e-04, -1.437145308933723e-05, 0.000000000000000e+00, -1.437671945542906e-05, -1.429866825007306e-05, 0.000000000000000e+00, -1.428478703756966e-05, -1.431883060066988e-05, 0.000000000000000e+00, -1.431767795651593e-05, -1.439568991914576e-05, 0.000000000000000e+00, -1.425036258556721e-05, 1.032988602665023e-04, 0.000000000000000e+00, -1.425036258556721e-05, 1.348195736278094e-01, 0.000000000000000e+00, 1.337152577279132e-01, 1.353644455326461e-01, 0.000000000000000e+00, -2.872476195960668e-02, -3.104556551843705e-02, 0.000000000000000e+00, -3.180868009460130e-02, -3.087351562780136e-02, 0.000000000000000e+00, 1.418176570742458e-01, 1.301496722832465e-01, 0.000000000000000e+00, 1.543946422288964e-01, -2.784734369342872e-02, 0.000000000000000e+00, -3.457292434309193e-02, -4.378075976771655e+01, 0.000000000000000e+00, -7.114505552292674e+00, -3.491616008299657e+01, 0.000000000000000e+00, -6.769263659642808e+00, -1.380358381535293e-02, 0.000000000000000e+00, 5.665144353514617e-02, -1.614436359213285e+01, 0.000000000000000e+00, -1.610643398238291e+01, -6.569449761149322e+00, 0.000000000000000e+00, -4.274857880438334e+01, -6.569449761149318e+00, 0.000000000000000e+00, -1.628673541637696e+04, -5.226144728946953e+05, 0.000000000000000e+00, -4.280544632105698e+05, -8.945137800616934e+12, 0.000000000000000e+00, -3.604187880780880e+05, -3.313120040955803e+07, 0.000000000000000e+00, -1.143101392936961e+03, -2.632596957682113e+06, 0.000000000000000e+00, -2.788367742035029e+06, -7.539199837634320e+05, 0.000000000000000e+00, -5.394003150859619e+06, -7.539199837634320e+05, 0.000000000000000e+00, -5.394003150859619e+06, 5.135534307439529e-06, 0.000000000000000e+00, 5.139996221124874e-06, 5.179143479740194e-06, 0.000000000000000e+00, 5.182190451639554e-06, 5.138597370627642e-06, 0.000000000000000e+00, 5.141910014565806e-06, 5.175986806060542e-06, 0.000000000000000e+00, 5.180211817078089e-06, 1.706973464252416e-05, 0.000000000000000e+00, 5.161083769078761e-06, 5.157359239271674e-06, 0.000000000000000e+00, 1.708846575455146e-05, -2.593338754739061e-04, 0.000000000000000e+00, -2.592360124074100e-04, -2.490183835694237e-04, 0.000000000000000e+00, -2.492131502539614e-04, -2.682503769886482e-04, 0.000000000000000e+00, -2.656027568270163e-04, -2.591371988132401e-04, 0.000000000000000e+00, -2.564033679434978e-04, -2.470108660790272e-04, 0.000000000000000e+00, 1.313633370790179e-03, -2.470108660790272e-04, 0.000000000000000e+00, -2.530308284560080e-04, -5.992511158421971e-02, 0.000000000000000e+00, 2.950702957931381e-01, -3.885193851233520e-02, 0.000000000000000e+00, -3.836500956359268e-02, -8.913798313762826e-02, 0.000000000000000e+00, -7.766965567420517e-02, -7.716845675553104e-02, 0.000000000000000e+00, -6.688800007542679e-02, -5.010623760224895e-02, 0.000000000000000e+00, 3.077856811156423e-01, -5.010623760224897e-02, 0.000000000000000e+00, -6.323906647290660e-02, -5.186492411567509e+01, 0.000000000000000e+00, -5.023785448741724e+01, -9.589369701573615e+01, 0.000000000000000e+00, -6.096524449924124e+00, -7.211557317813835e+01, 0.000000000000000e+00, -6.151786133324553e+01, -1.964236344912817e-04, 0.000000000000000e+00, -1.967625404242159e-04, -3.556416068550249e+01, 0.000000000000000e+00, -3.176938335407331e+01, -3.556416068550249e+01, 0.000000000000000e+00, -3.176938335407332e+01, -6.967830548362384e+15, 0.000000000000000e+00, -5.523931440416846e+06, -2.958358280916872e+06, 0.000000000000000e+00, -2.745116397971021e+06, -1.145847866689667e+07, 0.000000000000000e+00, -9.661305375557704e+06, -2.569616467426670e+02, 0.000000000000000e+00, -6.138979063574017e+05, -7.652913011798498e+06, 0.000000000000000e+00, -3.385693154911120e+06, -7.652913011798494e+06, 0.000000000000000e+00, -3.385693154911119e+06, 1.175927819837910e-02, 0.000000000000000e+00, 1.410404636093487e-02, -3.194035215530165e-02, 0.000000000000000e+00, -3.021366815525699e-02, 3.138270971286347e-01, 0.000000000000000e+00, 3.084834335367472e-01, 3.121646459686746e-01, 0.000000000000000e+00, -7.953246688270500e-03, 3.129958183129116e-01, 0.000000000000000e+00, 3.076793612123292e-01, 3.129958183129116e-01, 0.000000000000000e+00, -1.437686170184128e-02, 1.659502936673849e-04, 0.000000000000000e+00, 2.791392146324243e-03, -1.307691257408093e-01, 0.000000000000000e+00, 6.150715337146870e-01, -1.089678986770408e-01, 0.000000000000000e+00, 5.212948615901547e-01, -8.561222636185291e-02, 0.000000000000000e+00, -8.408102836852827e-02, -9.807359842450493e-02, 0.000000000000000e+00, -9.635200711257293e-02, -9.807359842450493e-02, 0.000000000000000e+00, 4.815067186854323e-01, -3.254538177699972e-02, 0.000000000000000e+00, 1.686339234807935e-01, -2.777181651912977e+00, 0.000000000000000e+00, -2.723435576562204e+00, 3.892572466338959e+00, 0.000000000000000e+00, -1.437281225668597e+00, 2.502251479909226e+00, 0.000000000000000e+00, -5.328524908360399e-01, -9.078059211209570e-01, 0.000000000000000e+00, -9.108903989840147e-01, -9.078059211209576e-01, 0.000000000000000e+00, 3.790276714690987e+00, -1.828114905947444e-01, 0.000000000000000e+00, -1.786481880405970e-01, -3.721202989466736e+07, 0.000000000000000e+00, -3.571331303653414e+07, -5.313861937798748e+02, 0.000000000000000e+00, -4.805588051878194e+02, -6.815369381247437e-01, 0.000000000000000e+00, -6.615069788905830e-01, -1.321456537096121e+02, 0.000000000000000e+00, -1.158026365255692e+02, -1.321456537096121e+02, 0.000000000000000e+00, -1.158026365255693e+02, -1.270274364871045e+12, 0.000000000000000e+00, -9.795839709099799e+11, -2.315987367710473e+08, 0.000000000000000e+00, -2.296579969291384e+08, -4.848730863224707e+16, 0.000000000000000e+00, -2.966928726682928e+16, -1.502922071343449e+05, 0.000000000000000e+00, -1.250569379583878e+05, -1.106427616162668e+07, 0.000000000000000e+00, -4.545785366436143e+06, -1.106427616162671e+07, 0.000000000000000e+00, -5.996549928644742e+14]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_2d_js17_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_2d_js17", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [3.760311433162258e-05, 3.760318696460483e-05, 3.760293210445276e-05, 3.760305458207546e-05, 3.760231317132837e-05, 3.760217776579183e-05, 3.760437206320796e-05, 3.541463631885980e-05, 3.760300746337165e-05, 3.541401813408812e-05, 3.541322107787747e-05, 3.541401813408812e-05, 3.829592022928833e-04, 5.724170186541991e-04, 3.829791432977874e-04, 3.829619711468916e-04, 3.833693393011562e-04, 3.834339039186055e-04, 3.831846631874278e-04, 3.831781131605949e-04, 3.829959569433145e-04, 3.835205450666212e-04, 5.725489065831705e-04, 3.835205450666212e-04, 6.777473488681035e-03, 6.737375066720868e-03, 6.793326023718142e-03, 2.761289868957624e-03, 2.748700270547350e-03, 2.757094745638270e-03, 2.767113844160113e-03, 6.949304110892180e-03, 6.660604407211973e-03, 7.347655540974197e-03, 2.747353729980462e-03, 2.782244060288042e-03, 5.303936717585094e-02, 1.280291601162470e-02, 5.207391259178078e-02, 1.279070048290710e-02, 1.979167488769222e-03, 5.238376467271127e-03, 1.244789061957827e-02, 1.288286530931448e-02, 1.208998923637690e-02, 1.301603534253524e-02, 1.208998923637690e-02, 1.265038848602952e-01, 3.717400735161795e-02, 3.653336260342144e-02, 7.752679160287329e+00, 3.626416600356094e-02, 5.912734756456172e-01, 1.893873834779105e-02, 4.067597496906658e-02, 4.096479585230366e-02, 3.807288976848619e-02, 5.019716021514791e-02, 3.807288976848619e-02, 5.019716021514793e-02, 2.723585074688772e-04, 2.724512839644055e-04, 2.725094799639052e-04, 2.725973011469309e-04, 2.723696543749613e-04, 2.724582997013198e-04, 2.724990597776000e-04, 2.725908114932959e-04, 3.123509964075983e-04, 2.725242408355940e-04, 2.724337217340993e-04, 3.124653180546801e-04, 7.830563408909582e-04, 7.837637341371312e-04, 7.820136770201470e-04, 7.827444244190363e-04, 7.835265545540984e-04, 7.840802487412191e-04, 7.827439691854006e-04, 7.832648815313631e-04, 7.821636447365265e-04, 1.347028806070809e-03, 7.821636447365265e-04, 7.832608202096991e-04, 4.296777473674621e-03, 8.276071877000649e-03, 4.389367066871848e-03, 4.421364764868207e-03, 4.427411612828037e-03, 4.410600567736865e-03, 4.577054147962646e-03, 4.521853724976925e-03, 4.242238010312534e-03, 8.391293473157457e-03, 4.242238010312534e-03, 4.397802283827168e-03, 1.375916782067588e-02, 1.370856464644288e-02, 5.157650080702723e-02, 1.078614081395092e-02, 1.420100021946175e-02, 1.415084342299877e-02, 9.450808071129355e-04, 9.457737887187328e-04, 1.402358826782386e-02, 1.477980013537529e-02, 1.402358826782386e-02, 1.477980013537529e-02, 2.746076263614201e+01, 4.044493385363502e-02, 4.071626514833783e-02, 3.952295032776578e-02, 6.594076162906796e-02, 6.603809037652007e-02, 1.662813269765375e-02, 2.729498274331153e-01, 4.692171976034554e-02, 5.376663748358319e-02, 4.692171976034553e-02, 5.376663748358317e-02, 6.450747523289692e-03, 6.443289613170255e-03, 5.840356039771157e-03, 5.830994480182784e-03, 8.269945592155568e-03, 8.221761294091891e-03, 8.249066468129873e-03, 6.176915087366032e-03, 8.259503937945027e-03, 8.211604296855669e-03, 8.259503937945027e-03, 6.087073508962532e-03, 6.569317910331017e-03, 6.568720464493670e-03, 5.172238170326262e-03, 1.070893909921078e-02, 5.287486209356007e-03, 9.992933428596508e-03, 5.531867402619740e-03, 5.515896061275818e-03, 5.385429866318178e-03, 5.372376776644903e-03, 5.385429866318178e-03, 9.679257016770554e-03, 3.965722850045784e-03, 6.787384168044842e-03, 9.468173742378074e-03, 9.439400472195743e-03, 2.770013650232106e-02, 8.481961285696810e-03, 1.818548193771479e-02, 7.134390191661066e-03, 7.916925671978542e-03, 7.934900262784261e-03, 7.916925671978546e-03, 2.233709751429903e-02, 5.449523602268773e-03, 5.457261563200158e-03, 6.082599229492325e-01, 6.020700911530426e-01, 1.718694934417019e-02, 1.715470098065342e-02, 7.962189292437439e-03, 8.155089904125893e-03, 1.631735584469719e-02, 1.680118299261316e-02, 1.631735584469719e-02, 1.680118299261317e-02, 4.860867326381435e+00, 4.608018162145288e+00, 6.207054308835563e-02, 6.197340576695225e-02, 4.667641827569313e+01, 4.255414181425387e+01, 2.123170183083662e-01, 2.072132989505286e-01, 5.765176294960359e-02, 5.558732730974370e-02, 5.765176294960359e-02, 2.005686027847180e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
