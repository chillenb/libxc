
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_gx_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.248582224620586e+01, -2.248594846097577e+01, -2.248650337102722e+01, -2.248462987574818e+01, -2.248561238515835e+01, -2.248561238515835e+01, -3.138598981690025e+00, -3.138666150772609e+00, -3.140494180562373e+00, -3.140039340107897e+00, -3.139761815986283e+00, -3.978131400135051e+00, -5.754795686657894e-01, -7.664377223453297e-01, -7.460814103089265e-01, -7.522743171701447e-01, -7.509573212384386e-01, -7.509573212384386e-01, -1.981212260278614e-01, -2.011217632654516e-01, -6.523356698070891e-01, -1.504097797340759e-01, -1.688981482730244e-01, -1.688981482730244e-01, -6.896814504560215e-03, -7.259182898014633e-03, -4.004966302408417e-02, -3.983125960985107e-03, -5.005102642593550e-03, -5.005102642593550e-03, -5.955950953726796e+00, -5.957044389043297e+00, -5.956005412642983e+00, -5.638504049298531e+00, -5.956502994133468e+00, -5.956502994133468e+00, -1.739863825922657e+00, -1.757671192553305e+00, -1.726658098924846e+00, -1.742393170303828e+00, -1.756181569460604e+00, -2.253432377024406e+00, -6.711715843285909e-01, -7.291287186826170e-01, -6.210365035536194e-01, -6.455741898312474e-01, -6.819923643610527e-01, -5.893818343813664e-01, -7.301320324157655e-02, -1.984220989059853e-01, -6.744887937377257e-02, -2.195914680253136e+00, -1.225487698314848e-01, -1.225487698314848e-01, -2.124245709782677e-03, -3.893858018504895e-03, -2.977431008988447e-03, -4.514509123415267e-02, -2.479319508584169e-03, -3.586881237211278e-03, -6.744304435622442e-01, -6.705617451145111e-01, -6.562466256247101e-01, -6.730443647461557e-01, -6.724831122599561e-01, -6.724831122599561e-01, -6.561489334788575e-01, -5.632565954793868e-01, -5.898196388445613e-01, -6.161661532584040e-01, -6.027103835955441e-01, -5.441403411557511e-01, -7.643956024675573e-01, -1.830646480293088e-01, -3.010705132233388e-01, -3.086076596107086e-01, -3.458319147284357e-01, -3.458319147284357e-01, -4.105248381358449e-01, -3.833261205291681e-02, -5.226034998473281e-02, -3.833620863742329e-01, -5.774194403708244e-02, -8.273633204896690e-02, -9.733523052437560e-03, -1.040853194178426e-03, -2.184796906240234e-03, -7.769295354530294e-02, -3.318987127717480e-03, -3.318987127716458e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_gx_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.339559869330720e+01, -3.339565319676299e+01, -3.339593981906606e+01, -3.339512550870653e+01, -3.339554587891138e+01, -3.339554587891138e+01, -4.569117304685746e+00, -4.569226365957387e+00, -4.572180730015758e+00, -4.571401088779585e+00, -4.571009715744656e+00, -4.404063491334904e+00, -8.241032642161787e-01, -6.506753902377241e-01, -5.752372928012193e-01, -6.081557419018022e-01, -6.008317362109471e-01, -6.008317362109471e-01, -1.148357410897612e-01, -1.245164840383179e-01, -9.173962918207035e-01, 8.841637211175923e-02, -9.683179656616824e-03, -9.683179656616737e-03, 4.799416749115622e+00, 4.465392989930212e+00, 1.103336872271127e+00, 9.719859631726534e+00, 6.551775753528508e+00, 6.551775753528508e+00, -7.626037845174243e+00, -7.629971482846457e+00, -7.626253585392305e+00, -8.061564575403862e+00, -7.628014768386674e+00, -7.628014768386674e+00, -2.525750894515838e+00, -2.553360180705475e+00, -2.505113358982687e+00, -2.529631003723260e+00, -2.551100441101915e+00, -2.397719023763199e+00, -8.018126325843148e-01, -9.192303233334268e-01, -7.050772593935704e-01, -7.725584942529837e-01, -8.242128533658694e-01, -9.761374881421805e-01, -9.869368498485107e-02, -2.014105080115147e-02, -9.102164203943647e-02, -2.671120935598993e+00, 1.452294533238593e-01, 1.452294533238594e-01, -2.832366568974393e-03, 1.057581433642178e+01, 4.861798799562092e+00, -6.057621105528916e-02, -3.305882649072520e-03, 6.515365270665007e+00, -8.897362286764724e-01, -8.752018066952352e-01, -9.013142512678762e-01, -8.845460100970731e-01, -8.824318735168043e-01, -8.824318735168043e-01, -8.643547122542075e-01, -6.542078208555375e-01, -7.175914008310214e-01, -7.782379499580511e-01, -7.475377418446496e-01, -8.312279395186316e-01, -9.515447386534319e-01, -2.577442059952069e-01, -2.352404624676333e-01, -4.478406807988423e-01, -3.293695353876319e-01, -3.293695353876318e-01, -5.978689490107015e-01, 1.149121033883939e+00, 8.636210153103580e-01, -4.302175090642734e-01, -7.788802266323679e-02, 3.394911248750344e-01, 4.914763140240644e+00, 3.577691178197483e+01, 1.006254836407106e+01, 3.567358820003164e-01, 5.897941387386645e+00, 5.897941387387537e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gx_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.294424541875608e-08, -1.294403481378479e-08, -1.294308068981372e-08, -1.294621036133778e-08, -1.294457286133791e-08, -1.294457286133791e-08, -4.328937051083696e-06, -4.330243972460531e-06, -4.364509954075930e-06, -4.349058135727399e-06, -4.352521445931743e-06, -1.697494377172229e-05, -1.131826169249795e-03, -1.232018854355292e-02, -1.372081675736608e-02, -1.327455282063165e-02, -1.336791938356262e-02, -1.336791938356262e-02, -2.759312022158708e+00, -2.598295666569667e+00, -2.544129029173661e-04, -8.306547244203806e+00, -5.224266076493949e+00, -5.224266076493949e+00, -1.879016781387930e+06, -1.530995398808651e+06, -1.652453987182403e+03, -1.688996222010747e+07, -6.774431996727461e+06, -6.774431996727461e+06, -3.378472510294732e-06, -3.375992673695237e-06, -3.378348947325865e-06, -3.518935889108916e-06, -3.377220235877647e-06, -3.377220235877647e-06, -3.335665063168882e-05, -3.416359651501433e-05, -3.266629406526078e-05, -3.341194120825957e-05, -3.415443799119762e-05, -1.648719296399717e-04, -2.095031683868142e-02, -1.504208445960562e-02, -2.857961198516410e-02, -2.447598649963678e-02, -1.965200162567129e-02, -2.636352018150473e-02, -6.071035532886832e-02, -2.742613967356290e+00, -6.324075570134818e-02, -1.828365391899373e-04, -1.884903045924426e+01, -1.884903045924426e+01, -7.351736407781768e-02, -1.849287326017443e+07, -5.409511048826061e+07, -8.187731555096528e-02, -2.914263804018020e-01, -2.568365641091674e+07, -2.054831320050088e-02, -2.102663353566442e-02, -2.114556221448623e-02, -2.071810697432174e-02, -2.078735870179323e-02, -2.078735870179323e-02, -2.293586541406641e-02, -4.223764515345826e-02, -3.512755520932687e-02, -2.949398718789187e-02, -3.221737454354807e-02, -3.643924002259012e-02, -1.245237299342652e-02, -4.373103910983171e-02, -5.174304098050048e-01, -3.262617309159033e-02, -2.972107843204637e-01, -2.972107843204637e-01, -1.582643166346605e-02, -1.969024795174656e+03, -5.699484608170865e+02, -1.968285987890268e-01, -1.087705212524265e-01, -9.072767608769999e+01, -4.736358786393992e+05, -3.622154103365450e+09, -1.865866433576923e+08, -1.166805086291161e+02, -3.503503601961730e+07, -3.503503601962271e+07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gx_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.002030544022174e-03, 2.002014720648992e-03, 2.001946780634627e-03, 2.002181504270050e-03, 2.002058160072147e-03, 2.002058160072147e-03, 2.889398973005863e-03, 2.890290007891484e-03, 2.913811575736103e-03, 2.904023153178557e-03, 2.905373303662633e-03, 1.133102939943782e-02, 5.420898238036660e-03, 5.881276786823814e-02, 6.041743330810573e-02, 5.992006216471957e-02, 6.002514733516357e-02, 6.002514733516357e-02, 2.275189022069652e-01, 2.241245458367566e-01, 1.931891116094023e-03, 2.996901127669479e-01, 2.668846539210780e-01, 2.668846539210781e-01, 6.535817922890467e+00, 6.209558910836302e+00, 1.125510689631770e+00, 1.131682108255572e+01, 9.006073814782072e+00, 9.006073814782072e+00, 7.568283251485069e-03, 7.566894067914830e-03, 7.568214050657550e-03, 7.886991736374046e-03, 7.567581833527577e-03, 7.567581833527577e-03, 3.968331866544010e-03, 4.153416510581051e-03, 3.824792309710099e-03, 3.988217768224941e-03, 4.143853403582708e-03, 2.000340649639509e-02, 6.716065593696033e-02, 6.182217583090202e-02, 7.258240633493650e-02, 6.982361525565324e-02, 6.609505649229418e-02, 8.866772906511859e-02, 7.330387535116508e-04, 2.271739090468684e-01, 6.045935816741892e-04, 2.052735666604352e-02, 3.678235523028170e-01, 3.678235523028170e-01, 2.262590038567518e-08, 1.157626283124409e+01, 1.513933445096660e+01, 2.381581683198154e-04, 1.425947394504115e-07, 1.256699647094902e+01, 6.683613451918095e-02, 6.722173487850759e-02, 6.801450867929282e-02, 6.697377797191414e-02, 6.702967409586380e-02, 6.702967409586380e-02, 6.869831154150538e-02, 8.002804443220528e-02, 7.642391144869334e-02, 7.315611805579525e-02, 7.478935999218828e-02, 8.458999153414926e-02, 5.896988902636993e-02, 7.305425823717696e-03, 1.497201548140941e-01, 2.175533857738365e-02, 1.303417120572958e-01, 1.303417120572959e-01, 2.339892062035658e-02, 1.175926226669099e+00, 8.625339069280170e-01, 1.175815904908086e-01, 6.531661203453558e-04, 5.448189777506562e-01, 4.631038895877573e+00, 4.330709085763876e+01, 2.063181420708266e+01, 5.801854839187303e-01, 1.358134940425591e+01, 1.358134940425796e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
