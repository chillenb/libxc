
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_gx_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.431243754742600e+01, -2.431251144873614e+01, -2.431292164345344e+01, -2.431182437232633e+01, -2.431238764814926e+01, -2.431238764814926e+01, -3.424165054757775e+00, -3.424386012428219e+00, -3.430579119974395e+00, -3.431807142598283e+00, -3.429888685890355e+00, -3.429888685890355e+00, -5.916399217577993e-01, -5.908626066759178e-01, -5.729556072989802e-01, -5.820668857062428e-01, -5.796898546257391e-01, -5.796898546257391e-01, -1.881671665661344e-01, -1.894601860984914e-01, -6.583913123889842e-01, -1.142027494927478e-01, -1.341384268321906e-01, -1.341384268321906e-01, -4.810421170164230e-03, -5.046059931318747e-03, -2.814655398372943e-02, -2.753692360471396e-03, -3.461651126014061e-03, -3.461651126014061e-03, -5.953920022101692e+00, -5.955038656909108e+00, -5.954016824226106e+00, -5.955002459600069e+00, -5.954463715898555e+00, -5.954463715898555e+00, -2.158712321407886e+00, -2.187589661655535e+00, -2.156221556585224e+00, -2.182468408281987e+00, -2.176168716284886e+00, -2.176168716284886e+00, -6.352024220253450e-01, -6.925212544160820e-01, -5.558830351694219e-01, -5.740596203998921e-01, -6.487995204377982e-01, -6.487995204377982e-01, -7.658831812084890e-02, -1.798149488454661e-01, -7.027746922124355e-02, -1.977529212509535e+00, -9.486699218213754e-02, -9.486699218213755e-02, -2.124288383067012e-03, -2.691663488899957e-03, -2.058547631980008e-03, -4.626873421561175e-02, -2.479608043091319e-03, -2.479608043091319e-03, -6.702553432613763e-01, -6.664883075260991e-01, -6.678132144134412e-01, -6.689041486933152e-01, -6.683558828297824e-01, -6.683558828297824e-01, -6.480669017448583e-01, -5.582998596304344e-01, -5.836740033182566e-01, -6.090334191586689e-01, -5.956747847138837e-01, -5.956747847138837e-01, -7.151155715919878e-01, -2.402770412949603e-01, -2.817146307192052e-01, -3.581769540705751e-01, -3.209901094009629e-01, -3.209901094009629e-01, -4.924525597695721e-01, -2.727467280481570e-02, -3.691710580563358e-02, -3.536543014141525e-01, -6.067797402497291e-02, -6.067797402497292e-02, -6.730830604485173e-03, -7.194376063033438e-04, -1.510420834548647e-03, -5.809617951194805e-02, -2.294530468499426e-03, -2.294530468499424e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_gx_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.084786655970138e+01, -3.084800333493816e+01, -3.084853544251219e+01, -3.084650086692545e+01, -3.084757777510010e+01, -3.084757777510010e+01, -5.178405129765671e+00, -5.178227810126612e+00, -5.173003984054677e+00, -5.167520024888562e+00, -5.170918931398474e+00, -5.170918931398474e+00, -8.350798885550085e-01, -8.337416150676713e-01, -8.019272414148546e-01, -8.130102137180059e-01, -8.106330162550059e-01, -8.106330162550059e-01, -1.229443230861939e-01, -1.340139528121237e-01, -9.249547065168480e-01, -1.361205254201239e-01, -1.443738491214246e-01, -1.443738491214245e-01, -1.458976117226452e-03, -4.960044084145641e-03, -3.456127301843586e-02, -3.667905219604372e-03, -4.589431359852703e-03, -4.589431359852704e-03, -7.628693277780752e+00, -7.632594383334034e+00, -7.628853671956885e+00, -7.632298314604554e+00, -7.630681329553377e+00, -7.630681329553377e+00, -2.452610254529705e+00, -2.481038850063106e+00, -2.408052302764900e+00, -2.433352245496702e+00, -2.489624848754779e+00, -2.489624848754779e+00, -8.481394060877356e-01, -9.681248128675081e-01, -7.901788666646861e-01, -8.744986936700418e-01, -8.671764588386456e-01, -8.671764588386456e-01, -8.926081657618179e-02, -1.923292409813245e-02, -8.394947599116592e-02, -2.978018832525863e+00, -8.764433218037673e-02, -8.764433218037662e-02, -2.832374000451587e-03, -3.588476120950903e-03, -2.741728288038393e-03, -5.721708675797419e-02, -3.305334276868906e-03, -3.305334276868906e-03, -8.952907336990817e-01, -8.805912496088779e-01, -8.857701519150963e-01, -8.900433440521675e-01, -8.879075744518622e-01, -8.879075744518622e-01, -8.751346664109195e-01, -6.603999912696145e-01, -7.254500579691492e-01, -7.875394423221858e-01, -7.566268089776423e-01, -7.566268089776423e-01, -1.017782327922070e+00, -1.410201670985298e-01, -2.532684467112700e-01, -4.627579762363815e-01, -3.560569311508957e-01, -3.560569311508956e-01, -6.108221006670352e-01, -2.504172751209069e-02, -4.545083067872785e-02, -4.671622484640744e-01, -6.722460566476277e-02, -6.722460566476281e-02, -8.969730833394904e-03, -9.592520613730619e-04, -2.009837277294306e-03, -4.713943961005597e-02, -3.057650677507880e-03, -3.057650677507877e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gx_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.195813170351664e-08, -1.195799672804102e-08, -1.195733980415173e-08, -1.195934819155865e-08, -1.195830388853222e-08, -1.195830388853222e-08, -2.330677322463122e-05, -2.329786940692153e-05, -2.305405953622909e-05, -2.300874744390703e-05, -2.307900025812774e-05, -2.307900025812774e-05, -2.087421948654847e-03, -2.088099921125976e-03, -2.155593552013355e-03, -2.411967189351379e-03, -2.323672187408248e-03, -2.323672187408248e-03, -2.865376542490418e+00, -2.723340278324822e+00, -3.533398557659663e-04, -1.026652250967059e+00, -1.477964839641863e+00, -1.477964839641865e+00, -1.980183054502971e+03, -6.304731092878566e+02, -5.922521042426776e+00, -9.006104789072007e+00, -3.282980568370523e+01, -3.282980568370245e+01, -3.379039800362832e-06, -3.376552392642727e-06, -3.378904354426854e-06, -3.376709084247111e-06, -3.377789599386245e-06, -3.377789599386245e-06, -1.732624003817244e-04, -1.675144539226075e-04, -1.763881833465018e-04, -1.711835138303000e-04, -1.685735859915215e-04, -1.685735859915215e-04, -2.183967172533987e-02, -1.561967097769666e-02, -3.310383052900107e-02, -2.894963172350661e-02, -2.037211994521582e-02, -2.037211994521582e-02, -1.698984785159351e+00, -3.073321120354771e+00, -1.710208115393902e+00, -2.081643183922283e-04, -3.455894512944193e+00, -3.455894512944203e+00, -5.869844606263148e-01, -1.814569963237956e+00, -4.975404948236328e+01, -2.773063210324404e+00, -6.996285592886516e+00, -6.996285592882498e+00, -2.061385068852571e-02, -2.109238122540669e-02, -2.092243642331211e-02, -2.078374868369439e-02, -2.085306071287178e-02, -2.085306071287178e-02, -2.308872512370462e-02, -4.243314435971990e-02, -3.532257812963164e-02, -2.967761456517132e-02, -3.241980257007872e-02, -3.241980257007872e-02, -1.316812775475974e-02, -1.107713941963470e+00, -5.470295868621077e-01, -1.934609848045798e-01, -3.179367420986500e-01, -3.179367420986501e-01, -6.106153934125419e-02, -2.169869962197382e+01, -3.515885562190848e+00, -2.126850207263889e-01, -4.306894195069235e+00, -4.306894195069221e+00, -1.230336812279656e+00, -3.049025158501771e-01, -8.970202379641994e+01, -9.956732195588652e+00, -1.739293373386360e+01, -1.739293373386105e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gx_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.849512593850440e-03, 1.849507191800468e-03, 1.849479154117856e-03, 1.849559452839750e-03, 1.849517951431572e-03, 1.849517951431572e-03, 1.555637465378981e-02, 1.555053239037787e-02, 1.539123206298110e-02, 1.536377146900759e-02, 1.540557859579560e-02, 1.540557859579560e-02, 9.997738408012304e-03, 9.967942902232008e-03, 9.491813204066890e-03, 1.088738926862936e-02, 1.043384250052457e-02, 1.043384250052457e-02, 2.362644456740284e-01, 2.349106804478180e-01, 2.683095552500056e-03, 3.704036344095339e-02, 7.550268859966959e-02, 7.550268859966966e-02, 6.887706393268512e-03, 2.557133690191044e-03, 4.033916099646665e-03, 6.034381558730000e-06, 4.364464112344874e-05, 4.364464112344636e-05, 7.569554066004961e-03, 7.568148612694049e-03, 7.569458279685126e-03, 7.568218769208684e-03, 7.568857647553139e-03, 7.568857647553139e-03, 2.061246233323917e-02, 2.036545825546655e-02, 2.065273048236269e-02, 2.043332733137971e-02, 2.045251712954959e-02, 2.045251712954959e-02, 7.001167045901475e-02, 6.419602603596324e-02, 8.407236879024528e-02, 8.258576001768002e-02, 6.851701136071110e-02, 6.851701136071110e-02, 2.051415582073302e-02, 2.545667676812334e-01, 1.634991293869407e-02, 2.337094777506206e-02, 6.743898042307653e-02, 6.743898042307675e-02, 1.806519058535618e-07, 1.135893731849862e-06, 1.392442290263373e-05, 8.066063846400049e-03, 3.423278015749322e-06, 3.423278015748662e-06, 6.704930395663969e-02, 6.743192895266754e-02, 6.729682659988280e-02, 6.718597270933242e-02, 6.724153287278758e-02, 6.724153287278758e-02, 6.915616232521420e-02, 8.039845852864280e-02, 7.684820554781356e-02, 7.361158262235090e-02, 7.525927607825061e-02, 7.525927607825063e-02, 6.235944207527050e-02, 1.850475589337809e-01, 1.582847719826701e-01, 1.290010083046658e-01, 1.394310754429906e-01, 1.394310754429906e-01, 9.027771656835243e-02, 1.295873471610120e-02, 5.320780243744761e-03, 1.270539096677936e-01, 2.586286559758989e-02, 2.586286559758983e-02, 1.202978467143361e-05, 3.645466366097723e-09, 9.918799414912562e-06, 4.950913871578112e-02, 6.742379544647183e-06, 6.742379544646805e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
