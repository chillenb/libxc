
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mtask_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mtask", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.509407496284818e+01, -2.509415539135468e+01, -2.509476329098381e+01, -2.509345893703389e+01, -2.509411506901650e+01, -2.509411506901650e+01, -3.310657005882686e+00, -3.310859277033398e+00, -3.317238579759125e+00, -3.317844509906386e+00, -3.310710831276031e+00, -3.310710831276031e+00, -4.552914416190917e-01, -4.539941622719075e-01, -4.250070127725548e-01, -4.533941838455016e-01, -4.548502026728431e-01, -4.548502026728431e-01, -1.843178074831785e-01, -1.853501291451896e-01, -3.611812499875305e-01, -5.894194725877831e-02, -1.843660352358513e-01, -1.843660352358513e-01, -7.467954963378443e-03, -7.904585262456741e-03, -3.103646845482595e-02, -2.795698977440050e-03, -7.823545222592182e-03, -7.823545222592182e-03, -6.218274633710944e+00, -6.219535476286113e+00, -6.218510749242448e+00, -6.219484788360975e+00, -6.218776976952375e+00, -6.218776976952375e+00, -2.119678956885999e+00, -2.157932343452510e+00, -2.124217015725152e+00, -2.155768196872137e+00, -2.139963969289538e+00, -2.139963969289538e+00, -6.114616574869949e-01, -6.722180328561178e-01, -5.501766923134943e-01, -5.831828696992239e-01, -6.495131852037590e-01, -6.495131852037590e-01, -5.311808095432294e-02, -1.808429448222546e-01, -5.268518960158752e-02, -1.936659686770937e+00, -7.793018367826619e-02, -7.793018367826619e-02, -2.677125496959150e-03, -3.203831477660855e-03, -2.380681170256423e-03, -3.262336853134386e-02, -2.923590647420130e-03, -2.923590647420130e-03, -7.014552895590170e-01, -6.977985431823052e-01, -6.991120404699651e-01, -7.001250613341932e-01, -6.996119233862895e-01, -6.996119233862895e-01, -6.668986801575483e-01, -5.811737314072127e-01, -6.052953552881162e-01, -6.283848842049925e-01, -6.155595530870320e-01, -6.155595530870320e-01, -6.897445549927720e-01, -2.451996078277843e-01, -2.812331715705427e-01, -3.469575000958576e-01, -3.167802374509449e-01, -3.167802374509448e-01, -4.784653377197086e-01, -3.083049606108003e-02, -3.547692702828915e-02, -3.313769629293214e-01, -4.668379931625741e-02, -4.668379931625739e-02, -8.897449399381998e-03, -5.655852890863423e-04, -1.364150849023987e-03, -4.318224563757771e-02, -2.427791810750317e-03, -2.427791810750312e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mtask_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mtask", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.835894110318867e+01, -2.835911795626774e+01, -2.835917385053202e+01, -2.835624461821697e+01, -2.835904111007735e+01, -2.835904111007735e+01, -5.139412643282812e+00, -5.139418331460844e+00, -5.139481447769791e+00, -5.135746439067783e+00, -5.139465154919602e+00, -5.139465154919602e+00, -9.307936271821243e-01, -9.279433644739814e-01, -8.436808412290778e-01, -8.578173819575934e-01, -9.297733733985052e-01, -9.297733733985052e-01, -1.349370632117406e-01, -1.480767046029798e-01, -9.957224013040205e-01, -1.590192298763871e-02, -1.392729956817643e-01, -1.392729956817643e-01, -1.140735711545112e-02, -1.214791645201357e-02, -1.146257499804856e-02, -5.023087444126099e-03, -1.181127256284382e-02, -1.181127256284386e-02, -7.087286815579189e+00, -7.098053024873495e+00, -7.088120559324632e+00, -7.096508701499328e+00, -7.093170851468002e+00, -7.093170851468002e+00, -2.172043277440684e+00, -2.132312613925225e+00, -2.094143501059150e+00, -2.048335886884866e+00, -2.244553434961903e+00, -2.244553434961903e+00, -8.439236426567268e-01, -9.686494176398484e-01, -8.091483484877587e-01, -8.818939406965161e-01, -8.804116346632168e-01, -8.804116346632168e-01, 3.865667100418565e-02, -2.453653196059410e-02, 3.800701998588811e-02, -2.974222356823178e+00, 5.797265345606917e-02, 5.797265345606917e-02, -4.816423928130148e-03, -5.712814891890747e-03, -4.252583604831582e-03, 3.564534116329260e-03, -5.211436279553250e-03, -5.211436279553251e-03, -9.452007816034715e-01, -9.135945433600516e-01, -9.249989361001352e-01, -9.337551831540273e-01, -9.293855623595580e-01, -9.293855623595580e-01, -9.185778906700919e-01, -5.553982108180748e-01, -6.835545083167606e-01, -7.836814060083911e-01, -7.375260608437474e-01, -7.375260608437476e-01, -1.016520707662077e+00, -9.370735820443703e-02, -2.534157758213888e-01, -4.698146225129393e-01, -3.611395735815552e-01, -3.611395735815551e-01, -6.059246256059951e-01, -7.889761953692417e-03, -1.223796573264490e-03, -4.695141801033461e-01, 4.136122435820808e-02, 4.136122435820781e-02, -1.429299855936457e-02, -1.062869264701719e-03, -2.508140039289342e-03, 3.508686760674466e-02, -4.348096113738791e-03, -4.348096113738784e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mtask_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mtask", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.977951544341128e-08, -3.977940069195215e-08, -3.978227568039721e-08, -3.978439653519471e-08, -3.977942264753044e-08, -3.977942264753044e-08, -1.982496625244292e-05, -1.982517162768273e-05, -1.982971009539503e-05, -1.984302747864150e-05, -1.982450653088845e-05, -1.982450653088845e-05, -1.026273279996604e-02, -1.031293470282578e-02, -1.198661779080295e-02, -1.265966655865615e-02, -1.028215229171153e-02, -1.028215229171153e-02, -3.104725409685955e+00, -2.925714238892684e+00, -1.202434171257836e-03, -4.313172569886467e+00, -3.045707380908658e+00, -3.045707380908658e+00, -4.965379597340499e+00, 1.131284352167910e+01, -2.340204248967741e+01, 4.388762067984939e+02, -1.272455235056897e+01, -1.272455235056610e+01, -1.328425205469601e-05, -1.327396307287173e-05, -1.328546386806978e-05, -1.327732367328766e-05, -1.327593141101394e-05, -1.327593141101394e-05, -2.856542508901631e-04, -3.038471578584931e-04, -3.029193925877894e-04, -3.214407489542015e-04, -2.757886932891189e-04, -2.757886932891189e-04, -2.729440050128079e-02, -1.923344047533720e-02, -3.192529402238996e-02, -2.599229200077780e-02, -2.553489552289362e-02, -2.553489552289362e-02, -1.005767444419615e+01, -2.888320391236074e+00, -1.146219018856236e+01, -2.073911916058959e-04, -1.291257048126457e+01, -1.291257048126457e+01, 4.845801228136229e+02, 3.757003400090696e+02, 1.129225227926000e+03, -1.117323783180169e+01, 5.501442708578522e+02, 5.501442708578522e+02, -5.880616632568780e-02, -6.071901490501787e-02, -6.001704498126512e-02, -5.948999537604859e-02, -5.974599517699401e-02, -5.974599517699401e-02, -5.388495542034283e-02, -1.160561859451535e-01, -8.967723527213875e-02, -7.227095046602709e-02, -7.889211989180787e-02, -7.889211989180789e-02, -1.511011551272454e-02, -1.419754716396737e+00, -6.104455100899927e-01, -2.066873263183013e-01, -3.587191093150637e-01, -3.587191093150642e-01, -7.866456102451251e-02, -3.572727242242230e+01, -1.760311197574809e+01, -2.507477796517655e-01, -2.171216570151088e+01, -2.171216570151082e+01, 5.820875695527256e+01, 5.138413898579524e+03, 1.553181235366548e+03, -2.453597346189049e+01, 9.161232286687728e+02, 9.161232286687745e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mtask_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mtask", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mtask_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mtask", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [6.221210174352832e-03, 6.221235836324941e-03, 6.221898789304611e-03, 6.221514631867540e-03, 6.221218519134207e-03, 6.221218519134207e-03, 1.478498031727494e-02, 1.478500110658290e-02, 1.478540531236370e-02, 1.479133232791236e-02, 1.478486808802073e-02, 1.478486808802073e-02, 5.846770670421184e-02, 5.847040572936320e-02, 5.924713110918964e-02, 6.318699190006684e-02, 5.847390003303095e-02, 5.847390003303095e-02, 3.040066194585214e-01, 2.986664156954156e-01, 2.507352912479056e-02, 1.336399834094000e-01, 3.019851625315219e-01, 3.019851625315219e-01, 1.832541600621544e-03, 1.541440557971420e-03, 2.061266828596025e-02, 2.476725173290362e-08, 2.022474371729987e-03, 2.022474371729924e-03, 2.989963537298280e-02, 2.989155998664125e-02, 2.990384835881250e-02, 2.989726243240915e-02, 2.988871883920242e-02, 2.988871883920242e-02, 3.493671962795451e-02, 3.782853311433951e-02, 3.663951328932703e-02, 3.941930651337408e-02, 3.463285602363790e-02, 3.463285602363790e-02, 9.116575808153186e-02, 8.191681662669756e-02, 9.316933788875530e-02, 8.637374798257429e-02, 9.429141114603898e-02, 9.429141114603898e-02, 1.228330255790904e-01, 2.847398511346535e-01, 1.361959476469795e-01, 2.566966809746268e-02, 2.745668312470755e-01, 2.745668312470755e-01, 1.041978772962064e-07, 9.793083182624765e-08, 6.774707591140714e-07, 1.530719458267225e-02, 5.762930103545577e-08, 5.762930103542798e-08, 2.015301148248630e-01, 2.052619879395223e-01, 2.038968746288280e-01, 2.028675513414787e-01, 2.033590982603038e-01, 2.033590982603038e-01, 1.684207212421056e-01, 2.377737882352102e-01, 2.098891328887766e-01, 1.901228229137520e-01, 1.958455304936549e-01, 1.958455304936550e-01, 7.527617475957057e-02, 2.814143196500839e-01, 2.052039832477683e-01, 1.517527941084236e-01, 1.773201464830342e-01, 1.773201464830342e-01, 1.231925875046629e-01, 3.125943412682380e-02, 3.004602283226572e-02, 1.575113755232166e-01, 1.452394042317758e-01, 1.452394042317755e-01, 8.053198170295499e-06, 1.031102374792345e-11, 3.352975656840168e-08, 1.396541839983862e-01, 3.611828481621488e-08, 3.611828481620880e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
