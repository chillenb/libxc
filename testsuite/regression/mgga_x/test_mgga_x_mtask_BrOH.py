
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mtask_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mtask", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.218571049686337e+01, -2.218582732275420e+01, -2.218638233714633e+01, -2.218447505617233e+01, -2.218577174085199e+01, -2.218577174085199e+01, -2.902651509420842e+00, -2.902883638361082e+00, -2.909960615811300e+00, -2.907454586899542e+00, -2.902729755988944e+00, -4.138080467248971e+00, -3.867497663151175e-01, -7.852310174577910e-01, -7.624091150520612e-01, -7.692900479585393e-01, -7.857904676634944e-01, -7.857904676634944e-01, -2.144399056451501e-01, -2.174815327834479e-01, -3.569170297268622e-01, -1.502129594118551e-01, -2.153498599668207e-01, -2.153498599668207e-01, -7.612149183309685e-03, -8.078208735854896e-03, -4.319828805858106e-02, -2.623327624783533e-03, -7.995773519978922e-03, -7.995773519978922e-03, -6.226439155628478e+00, -6.227602869856600e+00, -6.226562244576089e+00, -5.592256098081693e+00, -6.227030305718378e+00, -6.227030305718378e+00, -1.506204058054906e+00, -1.541396839756894e+00, -1.491015942142039e+00, -1.518927570727250e+00, -1.549826302182701e+00, -2.342721652064670e+00, -6.924656214664442e-01, -7.537105276943052e-01, -6.561759711214639e-01, -6.858090536106448e-01, -7.196535224163974e-01, -5.898395019617536e-01, -1.064467869311684e-02, -2.134168106639922e-01, -1.111609109626874e-02, -2.289928243899357e+00, -1.270200546657956e-01, -1.270200546657956e-01, 6.349218062323777e-05, -3.059619005308354e-03, -2.337436997681246e-03, -2.264139823962992e-03, 6.590374426194390e-05, -2.747324982189147e-03, -7.168605140447813e-01, -7.129507007476666e-01, -6.750044852115741e-01, -7.154409955425111e-01, -7.149002615055942e-01, -7.149002615055942e-01, -6.938319039933938e-01, -5.997537557379110e-01, -6.274357025117704e-01, -6.529613514451290e-01, -6.399736027612063e-01, -5.483596083713189e-01, -7.898805355003801e-01, -1.120780663235433e-01, -3.238486056693784e-01, -2.730199148976646e-01, -3.677148545875755e-01, -3.677148545875754e-01, -3.863823719535563e-01, -3.930968575527083e-02, -5.587231287256513e-02, -3.944520556597177e-01, -7.381522807816506e-03, -8.633416466717042e-02, -8.720258888757998e-03, -5.099113045622901e-04, -1.342264299406313e-03, -8.235011475128923e-02, -2.270329588372417e-03, -2.270329588372411e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mtask_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mtask", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.347188346937117e+01, -3.347194958106049e+01, -3.347230577123297e+01, -3.347122045592038e+01, -3.347191784241110e+01, -3.347191784241110e+01, -5.504087006525536e+00, -5.504183890898367e+00, -5.507257515049577e+00, -5.506515836344398e+00, -5.504140090442419e+00, -5.602367478858429e+00, -8.954010393992653e-01, -1.080401985628267e+00, -1.053059724445226e+00, -1.060716491092312e+00, -1.081069637353776e+00, -1.081069637353776e+00, -2.963101492768404e-01, -3.001240306876837e-01, -8.957409959455043e-01, -2.162779520671324e-01, -2.974564859009527e-01, -2.974564859009527e-01, -1.313908076861964e-02, -1.390305193585094e-02, -6.796267613798294e-02, -4.777572191350065e-03, -1.376049703658438e-02, -1.376049703658438e-02, -8.321257906188036e+00, -8.322573592022120e+00, -8.321395851606463e+00, -8.143702416150825e+00, -8.321927645599255e+00, -8.321927645599255e+00, -3.027391033079178e+00, -3.064799221959894e+00, -3.011190439588084e+00, -3.041287505879494e+00, -3.072968535559643e+00, -3.180448611357953e+00, -9.319504751804921e-01, -1.009162562501658e+00, -8.858591894413643e-01, -9.215170948642624e-01, -9.666487299198124e-01, -9.557407548195539e-01, -3.264479145583737e-02, -2.997306156721922e-01, -3.388691118114910e-02, -3.075295139294555e+00, -1.837181244400889e-01, -1.837181244400889e-01, 8.110884498975485e-05, -5.532976402424870e-03, -4.216236381106787e-03, -8.031666106471554e-03, 8.382670189471015e-05, -4.977653052031462e-03, -9.559505879364911e-01, -9.512036412230442e-01, -9.477809080932028e-01, -9.541956522836256e-01, -9.535377040142636e-01, -9.535377040142636e-01, -9.253731730364946e-01, -8.078332100759227e-01, -8.419680233791986e-01, -8.736052310702777e-01, -8.574829556636592e-01, -8.411730178071776e-01, -1.059004639455150e+00, -2.751223003175126e-01, -4.448527690649595e-01, -5.450105418022307e-01, -5.015425951419177e-01, -5.015425951419173e-01, -7.204320901001514e-01, -6.235914064314805e-02, -8.650363758893158e-02, -5.337474683384481e-01, -2.302794405984793e-02, -1.283204233768443e-01, -1.512545109028779e-02, -9.651755374877842e-04, -2.475209408488882e-03, -1.224152009250203e-01, -4.127880374643613e-03, -4.127880374643604e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mtask_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mtask", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.369157641786973e-08, -1.369148539560225e-08, -1.369097761556835e-08, -1.369247476939451e-08, -1.369152921048158e-08, -1.369152921048158e-08, -1.498213148599857e-05, -1.498443709017428e-05, -1.505132701287882e-05, -1.502069733824096e-05, -1.498248649755846e-05, 5.987928419592649e-07, -3.202817391094846e-03, 4.152241104626409e-04, 4.478711942701627e-04, 4.405852229795960e-04, 4.144503262607181e-04, 4.144503262607181e-04, 7.122981636988349e-02, 6.832758531069159e-02, 3.066486776407240e-04, 1.624692411556656e-01, 7.033439319472966e-02, 7.033439319472966e-02, 1.308051549974039e+02, 1.188362466012010e+02, 3.582228681002216e+00, 3.008403974815012e+02, 1.241080421768353e+02, 1.241080421768353e+02, 7.782767713689624e-08, 7.741248399403572e-08, 7.778211789003072e-08, -4.220468080424984e-06, 7.761927534868517e-08, 7.761927534868517e-08, -1.243987055647895e-04, -1.259822152068424e-04, -1.234619729250285e-04, -1.249219877122567e-04, -1.265406600710473e-04, 5.800541702479376e-06, 7.369904476593832e-04, 4.403146154920500e-04, 9.409867732178357e-04, 7.435054018737555e-04, 6.078847913666192e-04, -2.085145166481845e-02, 1.624228412087426e+01, 5.876220392193036e-02, 1.691392324592724e+01, 5.900819703436105e-06, 2.940654845352128e-01, 2.940654845352128e-01, 3.413616622170719e+06, 2.864998768543547e+02, 1.020711137716453e+03, 1.200218281663961e+02, 2.903310828384406e+06, 3.802038377997986e+02, 1.130414041260210e-04, 2.574357916108754e-04, -3.867454688538802e-02, 1.687160719482694e-04, 1.891297241559967e-04, 1.891297241559967e-04, 1.899303334706821e-04, 1.323699827553722e-03, 1.022506584465926e-03, 7.355327482999156e-04, 8.846390810673952e-04, -3.428541688407076e-02, 3.931588636923517e-04, -2.880269670584377e-02, 1.459381861382874e-02, -1.232345668087294e-01, 9.326708732572079e-03, 9.326708732572081e-03, -5.397700054920097e-02, 4.167681760494197e+00, 1.927729167055791e+00, 7.251333375703622e-03, 3.842208889483749e+01, 8.313738179242965e-01, 5.939498243894999e+01, 2.879749125706323e+03, 1.415566954210629e+03, 1.001653880490896e+00, 6.148821778538124e+02, 6.148821778538137e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mtask_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mtask", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.281296377692215e-03, 2.281294273581474e-03, 2.281280500078728e-03, 2.281315438286245e-03, 2.281295300163317e-03, 2.281295300163317e-03, 1.230050433753591e-02, 1.230168830677489e-02, 1.233668114058453e-02, 1.232218787646885e-02, 1.230077452501570e-02, 4.871007664975036e-12, 3.549663231851775e-02, 2.586582481473121e-11, 2.643095038253168e-11, 2.629862057418898e-11, 2.585129514323297e-11, 2.585129514323297e-11, 9.387563237674731e-11, 9.285292077799083e-11, 1.826373750206447e-02, 1.036923345608504e-10, 9.356681017714710e-11, 9.356681017714710e-11, 2.205319388538624e-11, 2.398971772116567e-11, 9.077660053517564e-11, 1.683912088204924e-12, 2.429536287916901e-11, 2.429536287916901e-11, 3.030620599157310e-12, 3.029316197028760e-12, 3.030478976262631e-12, 9.967541577678041e-03, 3.029962517869541e-12, 3.029962517869541e-12, 1.957014251435108e-02, 1.990205974117446e-02, 1.941146170203717e-02, 1.968735022231979e-02, 1.999206087807112e-02, 8.659458527478371e-12, 2.847194569962734e-11, 2.539322803140263e-11, 3.044076305999126e-11, 2.851802960399097e-11, 2.712454642865155e-11, 8.042701291272128e-02, 1.105188251808769e-02, 8.814685704721069e-11, 1.237240189934140e-02, 8.515729267384705e-12, 1.173286982776464e-10, 1.173286982776464e-10, 3.049903991698870e-06, 2.681447139115302e-12, 4.330768948128834e-12, 3.076541200706672e-03, 3.512271100236661e-06, 2.542654941090291e-12, 2.566185799388774e-11, 2.601875165082436e-11, 1.328996097212490e-01, 2.579141755942831e-11, 2.584089535079693e-11, 2.584089535079693e-11, 2.659358772762389e-11, 3.299648993672026e-11, 3.094166861892627e-11, 2.915202256910762e-11, 3.004937813794420e-11, 9.064116311177117e-02, 2.444487992815237e-11, 7.370621323188763e-02, 6.286197607306103e-11, 1.107554515418248e-01, 5.549255534088060e-11, 5.549255534088059e-11, 9.670865205667212e-02, 8.232105090446225e-11, 9.830170907874315e-11, 5.102307175281256e-11, 1.032777408763893e-02, 1.250162320596040e-10, 1.498251469116923e-11, 6.842828136951006e-14, 9.403391204279358e-13, 1.308252109534862e-10, 2.260594608406623e-12, 2.260594608406612e-12]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
