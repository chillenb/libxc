
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_19_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_19", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.170584715658389e+01, -2.170597120874460e+01, -2.170651583362468e+01, -2.170467455222138e+01, -2.170564026298355e+01, -2.170564026298355e+01, -3.025112798370107e+00, -3.025259559765050e+00, -3.029187362252247e+00, -3.027872932125686e+00, -3.027699180566911e+00, -3.962379439699092e+00, -5.212583854814397e-01, -6.649635942283375e-01, -6.276382760167500e-01, -6.418640718494706e-01, -6.386588942973146e-01, -6.386588942973146e-01, -1.574713006780054e-01, -1.614456329193214e-01, -5.854594348946669e-01, -1.056588347710844e-01, -1.238416305801196e-01, -1.238416305801196e-01, -4.440876434706200e-03, -4.674352140997535e-03, -2.593083044793202e-02, -2.564308776597293e-03, -3.222439361093843e-03, -3.222439361093843e-03, -6.095439237560110e+00, -6.094964225261474e+00, -6.095403497080405e+00, -5.453943572852851e+00, -6.095206906358641e+00, -6.095206906358641e+00, -1.641698341481274e+00, -1.665348069393334e+00, -1.624056524835354e+00, -1.644857329669831e+00, -1.663543269373873e+00, -2.189369381289742e+00, -6.946851058126429e-01, -7.533531801867109e-01, -6.279700286951287e-01, -6.685192174580299e-01, -7.078370645181246e-01, -5.725345030159222e-01, -6.808872227298417e-02, -1.461396330418014e-01, -6.304504709410635e-02, -2.281260501024800e+00, -8.433106246805427e-02, -8.433106246805427e-02, -2.020420253876326e-03, -2.506821403053883e-03, -1.916913741523615e-03, -4.254255863919530e-02, -2.358057183725255e-03, -2.309263051243499e-03, -6.669248035154368e-01, -6.730766286907915e-01, -6.367381540286660e-01, -6.693150793226386e-01, -6.702323792622291e-01, -6.702323792622288e-01, -6.502863428116918e-01, -5.764879423835485e-01, -6.127552613537733e-01, -6.360862534227867e-01, -6.258530223469204e-01, -5.252477624202097e-01, -7.931808699854658e-01, -1.642613438483123e-01, -2.542366385434153e-01, -2.906094198806911e-01, -3.153192670290069e-01, -3.153192670290069e-01, -3.975719118315654e-01, -2.480799443008718e-02, -3.395771147367529e-02, -3.850175933121224e-01, -5.400521071024749e-02, -5.492722641246130e-02, -6.268003162917644e-03, -6.700517303347547e-04, -1.406512104961162e-03, -5.144753570178908e-02, -2.136794988221978e-03, -2.136794988221977e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_19_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_19", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.235629654645903e+01, -3.235637826943220e+01, -3.235677285227810e+01, -3.235555569967902e+01, -3.235618906532522e+01, -3.235618906532522e+01, -4.925839219297716e+00, -4.926086936665185e+00, -4.932678861746683e+00, -4.930467224212103e+00, -4.930192453705559e+00, -5.040197964733781e+00, -7.865575450812538e-01, -9.447866986092690e-01, -8.951885189224801e-01, -9.144691404044812e-01, -9.102204102992297e-01, -9.102204102992297e-01, -2.234303769033635e-01, -2.295059076820355e-01, -8.160269106786540e-01, -1.429104246306938e-01, -1.709612083565970e-01, -1.709612083565969e-01, -5.761040511307380e-03, -6.063997930303445e-03, -3.371501753435948e-02, -3.326390690464398e-03, -4.180207084728267e-03, -4.180207084728267e-03, -7.115699926401537e+00, -7.119484489693890e+00, -7.115906793652698e+00, -7.849069357051352e+00, -7.117597111249826e+00, -7.117597111249826e+00, -2.652622080677912e+00, -2.697684499855615e+00, -2.617969574708574e+00, -2.658569727077901e+00, -2.694406765384219e+00, -2.887410557878208e+00, -8.089302513622095e-01, -8.618513206647769e-01, -7.767143191337771e-01, -7.770752954122215e-01, -8.151581300110962e-01, -8.990336465842357e-01, -9.006013363610046e-02, -2.021388270922203e-01, -8.343219680549258e-02, -2.613871332934074e+00, -1.128817522724072e-01, -1.128817522724071e-01, -2.693862204974162e-03, -3.251809864984304e-03, -2.486630697827908e-03, -5.645821171095233e-02, -3.143976694739494e-03, -2.995576127470619e-03, -8.492682379557384e-01, -8.245866071200350e-01, -8.766557056714110e-01, -8.399436464679749e-01, -8.363014452314921e-01, -8.363014452314916e-01, -8.233343922558549e-01, -6.936850397868476e-01, -7.020054968644869e-01, -7.288537155621271e-01, -7.116414044792125e-01, -7.986788357815507e-01, -9.020860273066389e-01, -2.298624570845557e-01, -3.625434918354694e-01, -4.688831056706887e-01, -4.396352796597681e-01, -4.396352796597685e-01, -6.473818102422226e-01, -3.224912716877952e-02, -4.421787807996724e-02, -4.826070153073457e-01, -7.148065180577676e-02, -7.222388225409640e-02, -8.131617403212636e-03, -8.691613448127891e-04, -1.824487584828070e-03, -6.756657042875563e-02, -2.771852772682671e-03, -2.771852772682674e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_19_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_19", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.095120713378670e-08, -2.095118029259643e-08, -2.095090554013230e-08, -2.095132175224778e-08, -2.095112562889461e-08, -2.095112562889461e-08, -1.525678071570790e-05, -1.526070464774915e-05, -1.536319173238740e-05, -1.531619422845514e-05, -1.532759987947668e-05, -2.030817443177364e-05, -4.016479394199683e-03, -5.739525429344723e-03, -5.069336495468459e-03, -5.465548103041140e-03, -5.370281435484237e-03, -5.370281435484237e-03, -6.302314337594594e-01, -6.495490025173769e-01, -7.633351674543001e-04, -3.789071752843119e-01, -4.823013667318902e-01, -4.823013667318904e-01, -6.326032837289399e+01, -5.835457734580580e+01, -1.583952659860694e+00, -1.614777165184240e+02, -1.209140170129917e+02, -1.209140170129917e+02, -7.314558674639550e-06, -7.315327982311061e-06, -7.314646078091739e-06, -6.541474519608048e-06, -7.314929936973262e-06, -7.314929936973262e-06, -1.207608393018628e-04, -1.232006705692719e-04, -1.185637328323387e-04, -1.209112892220430e-04, -1.231974099824382e-04, -1.659265075147153e-04, -3.528813088567370e-02, -3.116082485434300e-02, -3.830675115945996e-02, -4.153365797808822e-02, -3.477139475895471e-02, -2.810063337709335e-02, 1.653032577816913e-01, -2.691567674128237e-01, 2.354367603040343e-01, -3.322831269960618e-04, -5.450631060171157e-01, -5.450631060171159e-01, 5.232026486390267e+02, -1.588240988417463e+02, -7.735409443689095e+02, 9.094577973602541e-01, 7.639948429605311e+02, -3.300696263553394e+02, -4.695818809980176e-02, -4.738071377040504e-02, -4.482077551468081e-02, -4.714606444126251e-02, -4.721016149103115e-02, -4.721016149103112e-02, -5.233403537905901e-02, -6.277657888621514e-02, -6.388787918004166e-02, -6.144752168325358e-02, -6.313046255564272e-02, -5.295796714249511e-02, -2.472307630541451e-02, -1.332960638568876e-01, -1.968751727666431e-01, -1.183128742363478e-01, -1.957859137710508e-01, -1.957859137710509e-01, -5.531888318784124e-02, -1.719603869585058e+00, -9.699840710623566e-01, -2.503101939453055e-01, 4.389289468266029e-01, -7.761877114410796e-01, -2.202461359138849e+01, -2.454673149707624e+03, -9.444083779225940e+02, -8.785342357353398e-01, -4.602564580010953e+02, -4.602564580010966e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_19_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_19", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.002420243038450e-03, 2.002422080356223e-03, 2.002425530833220e-03, 2.002398757188374e-03, 2.002413467655426e-03, 2.002413467655426e-03, 6.708940478357637e-03, 6.711060165068323e-03, 6.766844941521122e-03, 6.743683666621274e-03, 6.746867728629018e-03, 1.985441005552839e-02, 8.737468828649637e-03, 4.936705239524615e-02, 4.075591666789879e-02, 4.481343488416846e-02, 4.385926797905349e-02, 4.385926797905349e-02, 9.545792775616885e-02, 1.029819606940966e-01, 1.436859354235909e-03, 2.313726310560954e-02, 4.376033158353106e-02, 4.376033158353092e-02, 2.214765843683811e-04, 2.384266444949154e-04, 1.224431560885446e-03, 1.083981369281533e-04, 1.613061767106323e-04, 1.613061767106323e-04, 1.164545668346539e-02, 1.161413913185686e-02, 1.164367131875891e-02, 8.374312928158921e-03, 1.162976222279988e-02, 1.162976222279988e-02, 8.935354863799701e-03, 9.447609314256667e-03, 8.530948799018993e-03, 8.991579781764075e-03, 9.420931078401119e-03, 3.158226422592931e-02, 1.302102642720142e-01, 1.049845953727360e-01, 1.342039655514813e-01, 1.352962376073103e-01, 1.271806607232745e-01, 6.320795009628985e-02, -3.957021728854324e-04, 3.973441430653741e-02, -3.483233111184794e-04, 3.916856571365241e-02, 1.733321959278427e-02, 1.733321959278427e-02, -1.827619173862054e-08, 9.958903102290908e-05, 2.170928795721403e-04, -1.650124044977922e-04, -1.151244481156083e-07, 1.619092517323584e-04, 7.575715298026436e-02, 8.673869598370465e-02, 7.151036679977878e-02, 7.970017467360005e-02, 8.130446524577063e-02, 8.130446524577055e-02, 7.937164267398078e-02, 1.531236962996491e-01, 1.457839688938699e-01, 1.230113214632081e-01, 1.361901968321231e-01, 7.870112146411672e-02, 1.060036791608699e-01, 5.802044877836603e-03, 1.038823760426752e-01, 4.870142527794652e-02, 1.487824255749333e-01, 1.487824255749333e-01, 5.434115567169799e-02, 1.156293775965120e-03, 1.761427252825622e-03, 2.124439334570665e-01, -3.824792840101781e-04, 6.721837665355316e-03, 2.172801831377468e-04, 2.935240580329424e-05, 1.045317970336129e-04, 6.210495320207586e-03, 1.788775326077968e-04, 1.788775326078025e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
