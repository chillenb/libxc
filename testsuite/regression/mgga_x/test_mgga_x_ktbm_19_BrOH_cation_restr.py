
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_19_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_19", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.503802107665167e+01, -2.503808314259678e+01, -2.503851142056240e+01, -2.503759136969483e+01, -2.503805172601027e+01, -2.503805172601027e+01, -3.404209616359237e+00, -3.404379907135941e+00, -3.409192730465510e+00, -3.410102668788019e+00, -3.408580699224608e+00, -3.408580699224608e+00, -5.661768122417408e-01, -5.653147266850189e-01, -5.459377102703651e-01, -5.589241119577490e-01, -5.553281846995008e-01, -5.553281846995008e-01, -1.552672414104753e-01, -1.586367300510911e-01, -6.017076517270469e-01, -1.031694883762759e-01, -1.207577255576136e-01, -1.207577255576135e-01, -4.439544302395478e-03, -4.671813712389792e-03, -2.582850289203605e-02, -2.555857127351294e-03, -3.215379842769133e-03, -3.215379842769132e-03, -6.091044189583584e+00, -6.090620041563988e+00, -6.091099832181285e+00, -6.090722438779576e+00, -6.090791944308860e+00, -6.090791944308860e+00, -2.086559205970954e+00, -2.125467535662195e+00, -2.074239208048466e+00, -2.109777469940540e+00, -2.113939512254652e+00, -2.113939512254652e+00, -6.377815064288943e-01, -6.824104393458762e-01, -5.505591138160192e-01, -5.633596192128875e-01, -6.524326249611853e-01, -6.524326249611853e-01, -6.898586011497378e-02, -1.444245024135589e-01, -6.354104244870834e-02, -1.932705018227313e+00, -8.334005531564970e-02, -8.334005531564967e-02, -1.966699698101019e-03, -2.493226482683484e-03, -1.909911131687051e-03, -4.220114345313811e-02, -2.297405617953106e-03, -2.297405617953105e-03, -6.574676019282828e-01, -6.639755348601314e-01, -6.618762606115880e-01, -6.599755182914540e-01, -6.609401153248714e-01, -6.609401153248712e-01, -6.321662271911249e-01, -5.691884797365727e-01, -6.017152444679402e-01, -6.214492137890603e-01, -6.122662051629796e-01, -6.122662051629797e-01, -7.032446492703602e-01, -1.948768269958500e-01, -2.471978312091433e-01, -3.488874580974792e-01, -2.998934573757610e-01, -2.998934573757609e-01, -4.883018003730305e-01, -2.475534801735755e-02, -3.378271804942106e-02, -3.502041434559601e-01, -5.446045874077910e-02, -5.446045874077911e-02, -6.232897200644633e-03, -6.692294815333719e-04, -1.403705403226018e-03, -5.117070576843503e-02, -2.127591379893821e-03, -2.127591379893820e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_19_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_19", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.913362803698677e+01, -2.913371231602866e+01, -2.913396607724314e+01, -2.913270699247355e+01, -2.913338396262865e+01, -2.913338396262865e+01, -5.026047965583060e+00, -5.026157349541056e+00, -5.029137735699883e+00, -5.028810917735877e+00, -5.028149984502369e+00, -5.028149984502369e+00, -8.463564897965054e-01, -8.445693162796899e-01, -8.044942127778648e-01, -8.273596618867338e-01, -8.213917053202915e-01, -8.213917053202915e-01, -2.211185246207629e-01, -2.265782027096574e-01, -8.500624564966365e-01, -1.408140550075823e-01, -1.677565620682831e-01, -1.677565620682830e-01, -5.764569360850185e-03, -6.070764625855245e-03, -3.393157572523715e-02, -3.352179362312970e-03, -4.200461916256113e-03, -4.200461916256108e-03, -7.121300476553866e+00, -7.125027292616585e+00, -7.121391383810631e+00, -7.124684633999623e+00, -7.123226604188670e+00, -7.123226604188670e+00, -2.856041161920101e+00, -2.878837703223054e+00, -2.842568125394258e+00, -2.863880426784884e+00, -2.875153131237590e+00, -2.875153131237590e+00, -8.456465080710556e-01, -9.373159748826848e-01, -7.904531702100163e-01, -8.375162645596551e-01, -8.567222922891675e-01, -8.567222922891675e-01, -9.202429754056671e-02, -2.004187147626041e-01, -8.464125924923334e-02, -2.864314576750330e+00, -1.123256767460354e-01, -1.123256767460352e-01, -2.626082731976636e-03, -3.302554368011761e-03, -2.508426861759920e-03, -5.586950071382758e-02, -3.037809553101562e-03, -3.037809553101560e-03, -8.618414824652215e-01, -8.366218609272276e-01, -8.450203863293051e-01, -8.523610799497343e-01, -8.486484367825903e-01, -8.486484367825899e-01, -8.470941762613486e-01, -6.971765306658697e-01, -7.117156178407192e-01, -7.459334048220911e-01, -7.257237781002303e-01, -7.257237781002305e-01, -9.875855341634232e-01, -2.765100481028055e-01, -3.559263689651308e-01, -5.003713116350755e-01, -4.299324215745982e-01, -4.299324215745981e-01, -6.581688318051654e-01, -3.235771569600732e-02, -4.451990231171629e-02, -4.869352168840934e-01, -7.235665390727165e-02, -7.235665390727172e-02, -8.262385747862222e-03, -9.009907320595121e-04, -1.832517612296733e-03, -6.767855626680934e-02, -2.801939115863739e-03, -2.801939115863738e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_19_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_19", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.416861046110875e-08, -2.416850235694780e-08, -2.416800233828058e-08, -2.416962888481981e-08, -2.416877917740906e-08, -2.416877917740906e-08, -1.716340383747322e-05, -1.716776090990009e-05, -1.728291611209296e-05, -1.724344328676721e-05, -1.724923455813654e-05, -1.724923455813654e-05, -4.541060621509985e-03, -4.518604825998297e-03, -4.017597303726149e-03, -4.399410900607541e-03, -4.299964718045921e-03, -4.299964718045921e-03, -6.118057172692148e-01, -6.271367813137939e-01, -8.461070086531933e-04, -3.180799726890746e-01, -4.356044137467815e-01, -4.356044137467813e-01, -6.169453481963882e+01, -5.571702627549466e+01, -1.158408649103897e+00, -1.088716180170492e+02, -9.669305409320127e+01, -9.669305409320091e+01, -7.309070433235727e-06, -7.309903233049845e-06, -7.309271884590528e-06, -7.309998550523257e-06, -7.309416845123066e-06, -7.309416845123066e-06, -1.566431234340202e-04, -1.601015045160783e-04, -1.550780694936485e-04, -1.584531350577334e-04, -1.593238949103252e-04, -1.593238949103252e-04, -3.225555771669992e-02, -2.817500095774855e-02, -3.327691664932952e-02, -3.486432012542479e-02, -3.192926200532008e-02, -3.192926200532008e-02, -3.142978967977924e-01, -2.575958173424582e-01, -3.350262083133449e-01, -2.807846885052196e-04, -4.846529720088747e-01, -4.846529720088750e-01, 1.826902334350334e+01, -4.961917621563479e+01, -4.870171455782192e+02, -5.682385285375015e-01, -1.270037978291972e+02, -1.270037978291982e+02, -4.628022436325774e-02, -4.672395016422790e-02, -4.660243592619727e-02, -4.647460328143375e-02, -4.654144196463372e-02, -4.654144196463370e-02, -5.085424930091133e-02, -6.190908042637396e-02, -6.266530389030482e-02, -5.997603850215930e-02, -6.169050480638044e-02, -6.169050480638045e-02, -2.187172801714980e-02, -2.149499747262865e-01, -1.881827631575817e-01, -1.439813363902483e-01, -1.835138969436116e-01, -1.835138969436116e-01, -6.821611183997907e-02, -1.483375097481324e+00, -6.823663899023217e-01, -2.257243639711384e-01, -6.210872233385435e-01, -6.210872233385433e-01, -6.373853119241632e+00, 2.277588807023677e+03, -7.728970088620582e+02, -7.623022267591322e-01, -2.465478784052243e+02, -2.465478784052245e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_19_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_19", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_19_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_19", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [3.104897156767302e-03, 3.104863861123800e-03, 3.104767825948217e-03, 3.105262950346531e-03, 3.104996123924088e-03, 3.104996123924088e-03, 1.172498973476441e-02, 1.172761273355709e-02, 1.180008029813543e-02, 1.180480161192174e-02, 1.179078883376266e-02, 1.179078883376266e-02, 2.088006335067569e-02, 2.075638857137573e-02, 1.819011269777153e-02, 2.120453073662251e-02, 2.031208333302574e-02, 2.031208333302574e-02, 8.830639889780084e-02, 9.376430818909627e-02, 3.787739477079752e-03, 1.661487221352520e-02, 3.481593628049945e-02, 3.481593628049934e-02, 2.142280948158653e-04, 2.242565604699869e-04, 8.322046755730009e-04, 6.520562230709527e-05, 1.204473994357164e-04, 1.204473994357128e-04, 1.162211050098487e-02, 1.159112613174470e-02, 1.162081393855098e-02, 1.159345755126167e-02, 1.160634243935498e-02, 1.160634243935498e-02, 2.747651659667514e-02, 2.859756314949286e-02, 2.734558825143981e-02, 2.841882771384928e-02, 2.814896198272796e-02, 2.814896198272796e-02, 1.005857660718062e-01, 7.844680573519643e-02, 8.703226118860440e-02, 7.808451798963423e-02, 9.970075729561077e-02, 9.970075729561077e-02, 5.116944492805989e-03, 3.602351421277152e-02, 4.218493968016140e-03, 2.322530744959144e-02, 1.421519620869871e-02, 1.421519620869868e-02, -3.595882369628359e-06, 2.411814006503620e-05, 1.199878847735474e-04, 1.975285402155285e-03, 4.977125950540325e-05, 4.977125950540125e-05, 7.284620938726043e-02, 8.352709214323044e-02, 7.978643387592095e-02, 7.667340054806882e-02, 7.823181432214348e-02, 7.823181432214342e-02, 7.340674861799186e-02, 1.474649455777578e-01, 1.383793408481533e-01, 1.151790160307149e-01, 1.279466470199349e-01, 1.279466470199349e-01, 7.383490791423884e-02, 6.344212177093432e-02, 9.143511189249258e-02, 1.236543914253102e-01, 1.229796968999758e-01, 1.229796968999757e-01, 1.278418609382523e-01, 9.592274576538767e-04, 1.148191572824208e-03, 1.563235459206136e-01, 4.976254389464444e-03, 4.976254389464451e-03, 4.893288727012948e-05, -1.050972616880362e-05, 8.038139132646670e-05, 5.130872418037584e-03, 8.118636102261825e-05, 8.118636102262177e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
