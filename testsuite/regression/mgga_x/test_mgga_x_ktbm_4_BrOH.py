
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_4_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.116651461729092e+01, -2.116660631527637e+01, -2.116704950605997e+01, -2.116555138107896e+01, -2.116656263729998e+01, -2.116656263729998e+01, -3.086619805865290e+00, -3.086711610850485e+00, -3.089587678837022e+00, -3.088719775529534e+00, -3.086659971609405e+00, -3.626658350178879e+00, -5.496537043183072e-01, -6.720680804181809e-01, -6.502542317963134e-01, -6.570846723366792e-01, -6.726122741490439e-01, -6.726122741490439e-01, -1.828369276574330e-01, -1.856234810613759e-01, -6.499343746306145e-01, -1.285913480960592e-01, -1.836659805855447e-01, -1.836659805855447e-01, -9.788793018002668e-03, -1.025342583171833e-02, -4.172896105504805e-02, -4.695493718232287e-03, -1.014657691174364e-02, -1.014657691174364e-02, -5.544480845396719e+00, -5.545540755402557e+00, -5.544593147476218e+00, -5.277448154263754e+00, -5.545019311282729e+00, -5.545019311282729e+00, -1.692247833707683e+00, -1.711893402051735e+00, -1.684107257371348e+00, -1.699439680003033e+00, -1.716313885952214e+00, -2.043460958856549e+00, -6.127445585804562e-01, -6.706496685841027e-01, -5.778456547717876e-01, -6.081498742309686e-01, -6.384384175250092e-01, -5.753583173083835e-01, -8.025611983664736e-02, -1.809511534090522e-01, -7.917281916786725e-02, -2.031945112092191e+00, -1.090960560492686e-01, -1.090960560492686e-01, -3.952712462259870e-03, -5.176718684435320e-03, -3.879987333731808e-03, -5.036483175737152e-02, -4.115941987011981e-03, -4.716784695141044e-03, -6.377389880176206e-01, -6.346434318206485e-01, -6.232025718664157e-01, -6.366360195832950e-01, -6.362097846241690e-01, -6.362097846241690e-01, -6.174051998972365e-01, -5.300748619161407e-01, -5.572296150735322e-01, -5.812446881526195e-01, -5.691619924774801e-01, -5.256509619152115e-01, -7.021116143112137e-01, -1.883730236745585e-01, -2.776687347714187e-01, -3.044832573207461e-01, -3.182966300525130e-01, -3.182966300525131e-01, -4.055728968801939e-01, -3.863875227996508e-02, -5.235429217107375e-02, -3.460192135049450e-01, -6.525638274707876e-02, -7.617176413361300e-02, -1.147218303808961e-02, -1.417265542375899e-03, -2.692308434313588e-03, -7.266823026960098e-02, -4.008630353354551e-03, -4.008630353354546e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_4_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.071324141451427e+01, -3.071331490843756e+01, -3.071369777374048e+01, -3.071249303436672e+01, -3.071327971445135e+01, -3.071327971445135e+01, -4.732210597429238e+00, -4.732373072967452e+00, -4.737410920977137e+00, -4.735842747055568e+00, -4.732278213363347e+00, -4.408622732491553e+00, -7.828823159735639e-01, -7.847917695892404e-01, -7.534893553106936e-01, -7.639600858604940e-01, -7.855848180452460e-01, -7.855848180452460e-01, -2.117052895288746e-01, -2.154567882461925e-01, -8.826174409991444e-01, -1.441730786276138e-01, -2.128122737284825e-01, -2.128122737284825e-01, -1.099121626922211e-02, -1.151278204299344e-02, -4.680026823405341e-02, -5.272876802477885e-03, -1.139280716499038e-02, -1.139280716499039e-02, -7.123815730270661e+00, -7.126859076298751e+00, -7.124145933023222e+00, -7.469075363731640e+00, -7.125350747659461e+00, -7.125350747659461e+00, -2.569824980691348e+00, -2.606360543046087e+00, -2.554260978217548e+00, -2.583211100639902e+00, -2.614671092485803e+00, -2.465521102650236e+00, -7.587449539980305e-01, -8.505260323862500e-01, -7.082252481223237e-01, -7.577256656085763e-01, -7.966561013708625e-01, -8.624208997317113e-01, -1.053379516182348e-01, -2.050964656037094e-01, -1.038620400028179e-01, -2.537519973163280e+00, -1.222384622787273e-01, -1.222384622787273e-01, -5.269897542750505e-03, -5.813236893780559e-03, -4.357049870416010e-03, -6.663909334247281e-02, -5.487482823035311e-03, -5.296760790819680e-03, -8.417187924346834e-01, -8.298720339417128e-01, -8.508248256701556e-01, -8.373574045596136e-01, -8.357105879660550e-01, -8.357105879660550e-01, -8.121008799388398e-01, -6.544913153392891e-01, -6.983270896335422e-01, -7.407308574173793e-01, -7.188574494819890e-01, -7.697476625519094e-01, -8.837909884094738e-01, -2.590120812897336e-01, -3.254002172491229e-01, -4.631585215021052e-01, -3.793967714900146e-01, -3.793967714900149e-01, -6.223069849079715e-01, -4.334312450933993e-02, -5.869022854000675e-02, -4.212548683266015e-01, -8.577513440506090e-02, -8.528144461107440e-02, -1.288162904996410e-02, -1.591566134442430e-03, -3.023394331840062e-03, -8.135911877012951e-02, -4.501546642580341e-03, -4.501546642580337e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_4_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-9.100903004644984e-09, -9.100862005814387e-09, -9.100609638064654e-09, -9.101287237282139e-09, -9.100881901303435e-09, -9.100881901303435e-09, -8.436698029174233e-06, -8.437946149480522e-06, -8.474254219438483e-06, -8.457497790729127e-06, -8.436883973621966e-06, -1.198845383396512e-05, -3.004256915476745e-03, -5.240781626173816e-03, -5.106667374273931e-03, -5.256294035282381e-03, -5.244294999774521e-03, -5.244294999774521e-03, -8.037488102424821e-01, -7.972464144187843e-01, -8.759558254198477e-04, -8.143113870384026e-01, -8.012966161468569e-01, -8.012966161468569e-01, -2.406551419244817e+02, -2.186235704439045e+02, -8.237936606847278e+00, -6.192727231839262e+02, -2.283229172226188e+02, -2.283229172226187e+02, -3.056548718467290e-06, -3.054816650238275e-06, -3.056368720556603e-06, -2.735892431248606e-06, -3.055666655384731e-06, -3.055666655384731e-06, -7.188457466898164e-05, -7.219991386521769e-05, -7.164739145040512e-05, -7.196044068815443e-05, -7.238637702732233e-05, -1.069508628355536e-04, -1.793035191397988e-02, -1.399168996706070e-02, -2.057621060284223e-02, -1.927943989526897e-02, -1.601112859015542e-02, -1.282581174105747e-02, -4.396393470112133e-01, -4.547498770359248e-01, -4.974361608092588e-01, -1.567275485520638e-04, -1.382051450679520e+00, -1.382051450679520e+00, -1.763270823946042e+02, -5.725495024127970e+02, -2.020865356487757e+03, -9.291451546320173e-01, -1.642636915813135e+02, -7.654520002142663e+02, -1.738795916624575e-02, -1.785018877139809e-02, -1.688803227646687e-02, -1.756262232066222e-02, -1.762714134455697e-02, -1.762714134455697e-02, -1.985441460866501e-02, -3.126452745707227e-02, -2.819846511939689e-02, -2.504557068807151e-02, -2.667478362304240e-02, -2.246046700291998e-02, -1.139092638537428e-02, -1.467129955765576e-01, -1.925675401135318e-01, -7.082477734032790e-02, -1.500986138874837e-01, -1.500986138874837e-01, -3.038951980377916e-02, -9.219982636117505e+00, -4.837444459378889e+00, -1.475550521778493e-01, -8.337435660244481e-01, -2.852791908613974e+00, -1.094115955342351e+02, -8.024728373510964e+03, -3.118845686729842e+03, -3.432655721698656e+00, -1.256333240092253e+03, -1.256333240092255e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_4_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.460629357113171e-03, 1.460633071926247e-03, 1.460646357664647e-03, 1.460586321673181e-03, 1.460631334063454e-03, 1.460631334063454e-03, 4.642882818562680e-03, 4.644235760228680e-03, 4.684776575983196e-03, 4.668702500044990e-03, 4.643236295053546e-03, 9.587163276024524e-03, 4.674873973477534e-03, 2.892815289139608e-02, 2.568264735532411e-02, 2.721458707698514e-02, 2.901255308143609e-02, 2.901255308143609e-02, 8.990061668222028e-02, 9.316777758418959e-02, 6.976722855400558e-04, 3.152063771125951e-02, 9.081304357416337e-02, 9.081304357416337e-02, 4.037234752771561e-03, 4.215162638560014e-03, 1.073011973193823e-02, 1.146421951314860e-03, 4.265978753309042e-03, 4.265978753309059e-03, 7.068513298417486e-03, 7.062812645204856e-03, 7.067890405480090e-03, 6.271436697775631e-03, 7.065648829057688e-03, 7.065648829057688e-03, 6.020035941736480e-03, 6.383698123274195e-03, 5.858230696170777e-03, 6.147950239565938e-03, 6.480123730703340e-03, 1.566248003356181e-02, 6.439505784175764e-02, 5.998289605405600e-02, 6.458914358914317e-02, 6.600861382296198e-02, 6.304163854887486e-02, 4.526486547356292e-02, -1.000382501657081e-03, 4.950354188137722e-02, -1.104319223813459e-03, 1.983083422092799e-02, 3.261453772585656e-02, 3.261453772585656e-02, -3.316434983529370e-07, 1.420365982219651e-03, 2.110832914787600e-03, -3.154696526583617e-04, -3.819049758734291e-07, 1.436409424145726e-03, 5.599912603294195e-02, 5.838060740048807e-02, 5.532432922550722e-02, 5.689741063370458e-02, 5.723062909784370e-02, 5.723062909784370e-02, 5.865877800588436e-02, 7.355249499274989e-02, 7.256240427356699e-02, 6.867617903991921e-02, 7.098012322150352e-02, 5.674374944269444e-02, 5.763469415938162e-02, 4.602383620423142e-03, 7.469831971539762e-02, 3.499254472489928e-02, 8.551838068985207e-02, 8.551838068985217e-02, 3.842002691371429e-02, 9.529849997007981e-03, 1.245717758212352e-02, 1.019578885420912e-01, -9.660330145312760e-04, 2.274692126725007e-02, 2.954536546052817e-03, 4.084991217418406e-04, 1.088381436313727e-03, 2.376418497510608e-02, 1.447146992130202e-03, 1.447146992130205e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
