
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_4_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.261789650185107e+01, -2.261795936559557e+01, -2.261833399947404e+01, -2.261730765742225e+01, -2.261792880301057e+01, -2.261792880301057e+01, -3.301384045121635e+00, -3.301472758544801e+00, -3.304358525700664e+00, -3.304911638866332e+00, -3.301415335168022e+00, -3.301415335168022e+00, -5.869705273661767e-01, -5.864236992951765e-01, -5.736852028243636e-01, -5.825451966416132e-01, -5.867763198845570e-01, -5.867763198845570e-01, -1.777463346837035e-01, -1.798348627341136e-01, -6.682981623842136e-01, -1.199048546844187e-01, -1.783104558161221e-01, -1.783104558161221e-01, -9.747850879613447e-03, -1.019940685805566e-02, -4.060580760361716e-02, -4.430444805164193e-03, -1.010011876166032e-02, -1.010011876166033e-02, -5.542615852516803e+00, -5.543697407461533e+00, -5.542754063677664e+00, -5.543593511732807e+00, -5.543133545413639e+00, -5.543133545413639e+00, -1.974164587299368e+00, -1.998037091063415e+00, -1.971455695255603e+00, -1.990448872151607e+00, -1.993861925365702e+00, -1.993861925365702e+00, -5.814913389987961e-01, -6.362670619018409e-01, -5.349287337402503e-01, -5.616567971349458e-01, -6.125734809313819e-01, -6.125734809313819e-01, -9.010747898710282e-02, -1.773883450187300e-01, -8.896414182417721e-02, -1.867815146327927e+00, -1.054460057052219e-01, -1.054460057052219e-01, -4.380497952328725e-03, -4.937202715417016e-03, -3.791269148140931e-03, -5.493375180277605e-02, -4.447935283358567e-03, -4.447935283358568e-03, -6.337410335047938e-01, -6.307247821709490e-01, -6.318296002416296e-01, -6.326642111653890e-01, -6.322466396602013e-01, -6.322466396602013e-01, -6.096534027333882e-01, -5.258744588461227e-01, -5.515828762628038e-01, -5.744895308384425e-01, -5.626141421365096e-01, -5.626141421365096e-01, -6.575493264724561e-01, -2.273597232153904e-01, -2.691424849505199e-01, -3.400335992299609e-01, -3.048526744061516e-01, -3.048526744061515e-01, -4.541071793542897e-01, -3.801201092477490e-02, -5.064578498083219e-02, -3.224856345944203e-01, -7.358351279498883e-02, -7.358351279498880e-02, -1.084496337742610e-02, -1.318518820101671e-03, -2.646549598260656e-03, -7.003935965494304e-02, -3.771967193604408e-03, -3.771967193604403e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_4_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.898138656098996e+01, -2.898148360194265e+01, -2.898189171682152e+01, -2.898030024316332e+01, -2.898143798157541e+01, -2.898143798157541e+01, -4.649546383707386e+00, -4.649660067504089e+00, -4.653175692666579e+00, -4.651413748528449e+00, -4.649605000151620e+00, -4.649605000151620e+00, -7.967044308965703e-01, -7.952340275142619e-01, -7.593008345582014e-01, -7.723988212403055e-01, -7.961802776152171e-01, -7.961802776152171e-01, -2.129077851179343e-01, -2.169078481971907e-01, -8.960728035144581e-01, -1.452443522255621e-01, -2.140954712143185e-01, -2.140954712143185e-01, -1.101097793180346e-02, -1.153878304315862e-02, -4.726514385177080e-02, -5.389820169449424e-03, -1.141519440871218e-02, -1.141519440871218e-02, -7.126445865394873e+00, -7.129459054106150e+00, -7.126739591301234e+00, -7.129083413192626e+00, -7.128010341514057e+00, -7.128010341514057e+00, -2.468162993183070e+00, -2.491013675472356e+00, -2.453755238171401e+00, -2.471519641058458e+00, -2.502603740482132e+00, -2.502603740482132e+00, -7.927382964504778e-01, -8.935736919913581e-01, -7.468876924427135e-01, -8.083531458547355e-01, -8.273924567992373e-01, -8.273924567992373e-01, -1.061526821525457e-01, -2.056008525443215e-01, -1.048043910926074e-01, -2.717435892372991e+00, -1.229437725859649e-01, -1.229437725859649e-01, -5.155741842852277e-03, -5.921190517540162e-03, -4.398865097255551e-03, -6.640470713967316e-02, -5.415180164693896e-03, -5.415180164693904e-03, -8.471330435453511e-01, -8.352829628947555e-01, -8.394984810564439e-01, -8.427808006624259e-01, -8.411371993931982e-01, -8.411371993931982e-01, -8.225354723196548e-01, -6.592944987587315e-01, -7.056238935464207e-01, -7.499739070658785e-01, -7.276085294462180e-01, -7.276085294462181e-01, -9.368317691253860e-01, -2.662463965176531e-01, -3.283132213758793e-01, -4.528639519803091e-01, -3.865240447950753e-01, -3.865240447950752e-01, -5.952480686179469e-01, -4.361450226343747e-02, -5.934939989251140e-02, -4.403308286502055e-01, -8.603125689564278e-02, -8.603125689564285e-02, -1.315691700775783e-02, -1.633850744679376e-03, -3.045217754412066e-03, -8.211463002675383e-02, -4.605339284784321e-03, -4.605339284784316e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_4_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.052130626698701e-08, -1.052122529244416e-08, -1.052083900073010e-08, -1.052217162839708e-08, -1.052126369419694e-08, -1.052126369419694e-08, -9.914224343308655e-06, -9.915535140297915e-06, -9.954144774254686e-06, -9.945346938850042e-06, -9.914339743323581e-06, -9.914339743323581e-06, -3.771576949966788e-03, -3.769546489797763e-03, -3.734951271312337e-03, -3.927170637561324e-03, -3.771273173498435e-03, -3.771273173498435e-03, -7.554490394451272e-01, -7.441618993815393e-01, -1.016154192762966e-03, -6.388110686517480e-01, -7.510149507432834e-01, -7.510149507432834e-01, -2.367028380829266e+02, -2.140954933650963e+02, -7.372320446470063e+00, -4.674670971805418e+02, -2.242172011914416e+02, -2.242172011914415e+02, -3.054364970374066e-06, -3.052658246062979e-06, -3.054215302467476e-06, -3.052886388541767e-06, -3.053458592392550e-06, -3.053458592392550e-06, -1.026797633819750e-04, -1.028028481592000e-04, -1.032316890329023e-04, -1.034310138674734e-04, -1.020337370616644e-04, -1.020337370616644e-04, -1.615635394101258e-02, -1.250506263879738e-02, -1.763610120807941e-02, -1.635172156144616e-02, -1.473396959700231e-02, -1.473396959700231e-02, -1.243902098635272e+00, -4.323150922725258e-01, -1.388353322757302e+00, -1.313824081018014e-04, -1.237013070173350e+00, -1.237013070173350e+00, -7.099414746895923e+02, -4.601440309671424e+02, -1.833372544851544e+03, -2.848917563583099e+00, -5.757636529333676e+02, -5.757636529333671e+02, -1.713403541971630e-02, -1.760158101031232e-02, -1.743979356073303e-02, -1.731045364630732e-02, -1.737556429970377e-02, -1.737556429970377e-02, -1.927920400232910e-02, -3.079244920363407e-02, -2.763425425322827e-02, -2.444115534381643e-02, -2.605489311874798e-02, -2.605489311874797e-02, -9.920106505693351e-03, -2.708716395680558e-01, -1.804705692575401e-01, -9.238382402987544e-02, -1.377583290909148e-01, -1.377583290909148e-01, -3.919180486392920e-02, -8.641463715779228e+00, -4.227446793017258e+00, -1.283607576901039e-01, -2.510337214182810e+00, -2.510337214182809e+00, -8.363095024314458e+01, -5.510750769039830e+03, -2.905736434483494e+03, -2.992337619466500e+00, -9.322173839586663e+02, -9.322173839586683e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_4_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_4_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.746910569354954e-03, 1.746904835578273e-03, 1.746887470444186e-03, 1.746981889837720e-03, 1.746907467921518e-03, 1.746907467921518e-03, 6.528293559774087e-03, 6.529635831265534e-03, 6.570620838606836e-03, 6.566955718370303e-03, 6.528553408737180e-03, 6.528553408737180e-03, 1.168145931169831e-02, 1.163129065645604e-02, 1.066471478164240e-02, 1.221292063294819e-02, 1.166545701952110e-02, 1.166545701952110e-02, 7.700925770689844e-02, 7.847257596720955e-02, 2.506255413377990e-03, 1.660744944526128e-02, 7.724673712987978e-02, 7.724673712987978e-02, 3.891393546737525e-03, 4.023496413611039e-03, 8.317666741229943e-03, 6.004166155084659e-04, 4.097345225563357e-03, 4.097345225563355e-03, 7.062788928570882e-03, 7.057171128393509e-03, 7.062247345348035e-03, 7.057877348955004e-03, 7.059869159450518e-03, 7.059869159450518e-03, 1.392344640164387e-02, 1.435615402704696e-02, 1.394149611347669e-02, 1.429966483828796e-02, 1.419027676209365e-02, 1.419027676209365e-02, 5.415908628340060e-02, 5.204539128406573e-02, 4.851816064918955e-02, 5.124194231317173e-02, 5.551066122228122e-02, 5.551066122228122e-02, 1.492185169235304e-02, 4.353349523978921e-02, 1.604096165163035e-02, 1.524066729333819e-02, 2.472403296872089e-02, 2.472403296872089e-02, 9.816071986674343e-04, 8.629018015466316e-04, 1.696693842873215e-03, 7.069561026742368e-03, 7.458813036336504e-04, 7.458813036336501e-04, 5.534540002879255e-02, 5.764072138034959e-02, 5.684724616891577e-02, 5.621092478312811e-02, 5.653168443176749e-02, 5.653168443176749e-02, 5.724384115654286e-02, 7.165573489469200e-02, 7.043064342135220e-02, 6.664139090230173e-02, 6.874997941011529e-02, 6.874997941011531e-02, 4.769380988185228e-02, 5.814531369637924e-02, 6.382829451289709e-02, 6.554417727515689e-02, 7.033799253656486e-02, 7.033799253656486e-02, 6.407568949443750e-02, 8.226709180195538e-03, 9.107385345490935e-03, 7.735580669026795e-02, 1.671312341694872e-02, 1.671312341694875e-02, 1.592484269451054e-03, 1.701426638733596e-04, 9.291785522944411e-04, 1.705735682917450e-02, 7.273445312404111e-04, 7.273445312404096e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
