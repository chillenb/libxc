
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_gdme_nv_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_nv", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.825824699888357e+01, -1.825842365279901e+01, -1.825930584658749e+01, -1.825642387444765e+01, -1.825833913012247e+01, -1.825833913012247e+01, -2.932462531596470e+00, -2.932887336950110e+00, -2.945655050018915e+00, -2.940797790969815e+00, -2.932588125399924e+00, -2.932588125399924e+00, -2.382753810160076e-01, -2.346355684785237e-01, -1.388229526225588e-01, -1.844258741920524e-01, -2.369644382992782e-01, -2.369644382992782e-01, -7.475594341102984e-02, -8.154580936267869e-02, 1.977133460575047e-01, 2.493230919402284e-01, -7.636811113488039e-02, -7.636811113488030e-02, 1.600174237222324e+00, 1.574120021235525e+00, 8.715588427618373e-01, 7.919351034180854e+00, 1.531479987053603e+00, 1.531479987053606e+00, -3.818821120161709e+01, -1.251707760480583e+01, 1.462755872705066e+02, -5.113511030024620e+01, -3.150090286292077e+00, -9.405847845627038e+00, 1.487572835729159e+02, -3.691343283234630e+00, -1.927258600799429e+00, -2.024770912632195e+00, -2.035056273994816e+00, -1.051883887600374e+00, -8.062422509026824e+00, -2.993257678107968e+00, -5.297621551938211e+00, -7.379295637955712e-01, -8.211058680465914e-01, -9.884286273719090e-01, 4.036958936119373e+00, -2.535413086509628e+00, 2.010742374313934e+01, -2.643294715528370e+00, 3.974634241517946e-01, 6.298305863962941e-01, -6.955746829931672e+01, -5.225913012068402e+04, 6.773119275506522e+04, 5.525922650922609e+00, -1.508521867703871e+01, 4.136378484006900e+02, -3.979910200866827e+04, 1.414787183060693e+04, 2.690433363900803e+05, -3.932895662081779e+02, 1.102959256301003e+04, -5.108693060718969e+05, 1.929332822957837e+05, -5.848800917648942e-01, -4.313362642622407e+00, -2.497317718675415e-01, -9.370215418092247e-01, -9.153299043920551e+00, -8.873676509165891e+00, 2.852635620547675e+01, 5.146041253443126e+01, 5.836221196878721e+00, -7.878143044716944e-01, -4.602129629758058e-01, -4.860343481768984e-01, -9.856324533215016e+00, 1.674106017949533e-01, -3.328156947323317e-01, 1.282422507146882e+01, 6.341144670244061e-01, 5.694975648067302e+01, -1.389261315470251e+03, 4.416175879537997e+02, 1.472129127860930e+00, 3.364065133093063e+01, 3.921333120910065e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_gdme_nv_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_nv", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-5.264501622974444e+01, -5.264509990471056e+01, -5.264554681959745e+01, -5.264417091280708e+01, -5.264505982282284e+01, -5.264505982282284e+01, -8.584246334952292e+00, -8.584124800358657e+00, -8.580814080888363e+00, -8.582831269730914e+00, -8.584255523419509e+00, -8.584255523419509e+00, -1.753439852700506e+00, -1.752771689770590e+00, -1.735946990468562e+00, -1.734777401026677e+00, -1.753190624577935e+00, -1.753190624577935e+00, -4.764951399130429e-01, -4.809082113503296e-01, -2.262587534828250e+00, -4.466323830102942e-01, -4.779603994467608e-01, -4.779603994467609e-01, -5.613956911586709e-01, -5.540398527370174e-01, -4.097463029695471e-01, -2.653218245000545e+00, -5.395208267425927e-01, -5.395208267425916e-01, -1.580965555493194e+00, -1.014055520509363e+01, -6.306916691023423e+01, 2.732420092806294e+00, -1.326163279163072e+01, -1.117638027185240e+01, -5.496107632025557e+01, -4.182740603502499e+00, -4.717585379556652e+00, -4.714640177258566e+00, -4.742421965720151e+00, -5.070146094518299e+00, 1.091755650690630e+00, -7.355965064205733e-01, 2.516960327147084e-01, -1.333351910649919e+00, -1.383327254798491e+00, -1.327553001690052e+00, -1.612737834895546e+00, 3.401315377485403e-01, -6.966136148325956e+00, -4.391157451017563e+00, -4.413284048618943e-01, -5.187841256100607e-01, 2.317286261441413e+01, 1.741969522889148e+04, -2.257707535286048e+04, -2.008178124192712e+00, 5.014910801616937e+00, -1.378927782242926e+02, 1.326472075568909e+04, -4.717595066920392e+03, -8.968275307128781e+04, 1.294531496746534e+02, -3.678173009947220e+03, 1.702881265350222e+05, -6.431268783395586e+04, -1.187598357071196e+00, -6.356848236952821e-03, -1.418013416881705e+00, -1.159815018679385e+00, 1.578944148691054e+00, 1.140477430901116e+00, -1.014395451139546e+01, -1.790783814955573e+01, -2.909821607206798e+00, -5.903799397357804e-01, -6.995803869010767e-01, -1.084969565732183e+00, 3.175016536116251e+00, -2.052932374384818e-01, -8.002784486909736e-01, -4.491523379435761e+00, -4.281531779542871e-01, -1.901607295401098e+01, 4.630830500688011e+02, -1.472135658412762e+02, -6.975240570367002e-01, -1.122501976814614e+01, -1.307225733548381e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gdme_nv_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_nv", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gdme_nv_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_nv", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [-9.318052836443530e-04, -9.318030218533497e-04, -9.317912659599381e-04, -9.318283373583150e-04, -9.318041047748964e-04, -9.318041047748964e-04, -5.723433515231221e-03, -5.723421503498428e-03, -5.722855795904161e-03, -5.722617558949030e-03, -5.723402956204254e-03, -5.723402956204254e-03, -2.985814479566815e-02, -2.988882564052035e-02, -3.070659502780296e-02, -3.046673120423507e-02, -2.986932761737225e-02, -2.986932761737225e-02, -1.091432850384332e-01, -1.077091303412116e-01, -2.491299191048553e-02, -1.505425906635627e-01, -1.087091004345195e-01, -1.087091004345195e-01, -1.954199515049629e+00, -1.865667133118768e+00, -4.590075304826053e-01, -4.073517828919621e+00, -1.885314003774980e+00, -1.885314003774980e+00, -3.824216332113439e-03, -3.823536311330529e-03, -3.824144572943754e-03, -3.823615848987307e-03, -3.823870670154052e-03, -3.823870670154052e-03, -1.018097481519367e-02, -1.010974388274502e-02, -1.021005555809066e-02, -1.015405881356476e-02, -1.009559656591381e-02, -1.009559656591381e-02, -3.429548965175699e-02, -3.157237571765586e-02, -3.614235217745551e-02, -3.465140426086369e-02, -3.302654388819257e-02, -3.302654388819257e-02, -2.049009769248094e-01, -1.083668923925324e-01, -2.075613390288061e-01, -1.037998746223098e-02, -1.771980384703255e-01, -1.771980384703255e-01, -4.222631636589899e+00, -3.694868983943123e+00, -4.929745029466998e+00, -3.292699243406989e-01, -4.055148448908102e+00, -4.055148448908102e+00, -3.323611984690947e-02, -3.341450749909704e-02, -3.335033937557413e-02, -3.330100233529209e-02, -3.332567730102712e-02, -3.332567730102712e-02, -3.433816509687711e-02, -3.958310075251931e-02, -3.789506652864397e-02, -3.645340906338865e-02, -3.717402593850042e-02, -3.717402593850041e-02, -3.011197542640870e-02, -8.615964965932550e-02, -7.254549290606299e-02, -5.674525382547333e-02, -6.415818179219988e-02, -6.415818179219990e-02, -4.388675311909479e-02, -4.955939358560720e-01, -3.660850658685373e-01, -6.005808401080235e-02, -2.524472810457721e-01, -2.524472810457721e-01, -1.667416952518460e+00, -1.349562540220959e+01, -7.104322740171236e+00, -2.646138846285128e-01, -4.771505762397216e+00, -4.771505762397223e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gdme_nv_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_nv", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [7.454442269154826e-03, 7.454424174826798e-03, 7.454330127679505e-03, 7.454626698866522e-03, 7.454432838199174e-03, 7.454432838199174e-03, 4.578746812184977e-02, 4.578737202798742e-02, 4.578284636723329e-02, 4.578094047159225e-02, 4.578722364963404e-02, 4.578722364963404e-02, 2.388651583653452e-01, 2.391106051241629e-01, 2.456527602224237e-01, 2.437338496338806e-01, 2.389546209389781e-01, 2.389546209389781e-01, 8.731462803074663e-01, 8.616730427296933e-01, 1.993039352838843e-01, 1.204340725308501e+00, 8.696728034761558e-01, 8.696728034761558e-01, 1.563359612039704e+01, 1.492533706495015e+01, 3.672060243860844e+00, 3.258814263135697e+01, 1.508251203019984e+01, 1.508251203019984e+01, 3.059373065690751e-02, 3.058829049064424e-02, 3.059315658355003e-02, 3.058892679189847e-02, 3.059096536123243e-02, 3.059096536123243e-02, 8.144779852154940e-02, 8.087795106196019e-02, 8.168044446472530e-02, 8.123247050851810e-02, 8.076477252731049e-02, 8.076477252731049e-02, 2.743639172140560e-01, 2.525790057412469e-01, 2.891388174196441e-01, 2.772112340869096e-01, 2.642123511055406e-01, 2.642123511055406e-01, 1.639207815398475e+00, 8.669351391402592e-01, 1.660490712230449e+00, 8.303989969784782e-02, 1.417584307762604e+00, 1.417584307762604e+00, 3.378105309271920e+01, 2.955895187154500e+01, 3.943796023573599e+01, 2.634159394725592e+00, 3.244118759126482e+01, 3.244118759126482e+01, 2.658889587752757e-01, 2.673160599927764e-01, 2.668027150045931e-01, 2.664080186823367e-01, 2.666054184082171e-01, 2.666054184082171e-01, 2.747053207750169e-01, 3.166648060201546e-01, 3.031605322291518e-01, 2.916272725071093e-01, 2.973922075080034e-01, 2.973922075080033e-01, 2.408958034112696e-01, 6.892771972746041e-01, 5.803639432485040e-01, 4.539620306037867e-01, 5.132654543375993e-01, 5.132654543375993e-01, 3.510940249527584e-01, 3.964751486848577e+00, 2.928680526948299e+00, 4.804646720864189e-01, 2.019578248366177e+00, 2.019578248366177e+00, 1.333933562014768e+01, 1.079650032176767e+02, 5.683458192136990e+01, 2.116911077028103e+00, 3.817204609917773e+01, 3.817204609917779e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
