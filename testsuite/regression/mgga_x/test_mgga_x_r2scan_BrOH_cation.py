
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_r2scan_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.170118473753291e+01, -2.170130437150348e+01, -2.170183111527732e+01, -2.247101985058030e+01, -2.247177800709419e+01, -2.324268142333106e+01, -3.402421709712929e+00, -3.766105205887187e+00, -3.766585173402737e+00, -3.766732617647796e+00, -3.766325669671105e+00, -3.402815681541147e+00, -5.310264771628607e-01, -6.253605860827112e-01, -6.986034280212388e-01, -6.106096895246553e-01, -5.170379359830533e-01, -7.053259413460424e-01, -1.604995002435254e-01, -1.635108211708104e-01, -7.066366730239970e-01, -1.361525816044937e-01, -1.759190536795791e-01, -1.726334783394200e-01, -3.275295249624566e-03, -4.022631866501243e-03, -2.806216493984614e-02, -1.499323900345496e-03, -2.454868368297461e-03, -2.454868368297462e-03, -5.669020401279267e+00, -5.670114039027997e+00, -5.669075296435043e+00, -5.670040670559274e+00, -5.551049840027974e+00, -5.551151929141071e+00, -2.115662312237330e+00, -2.131831046408172e+00, -2.103799081065715e+00, -2.118119877819924e+00, -1.906248938599584e+00, -2.130358572801335e+00, -5.967291313918994e-01, -6.936735914393457e-01, -5.889134131261431e-01, -6.133495613459321e-01, -6.121190659696811e-01, -6.486930980092167e-01, -9.062583806764843e-02, -1.564804402649794e-01, -8.325846759329424e-02, -2.086482507408975e+00, -1.098714301826628e-01, -1.098714301826628e-01, -1.447867472808901e-03, -1.435765374143070e-03, -1.212401502708698e-03, -4.723346532786866e-02, -1.545273379036277e-03, -1.545273379036270e-03, -6.423270168158682e-01, -6.385505838162961e-01, -6.294965078400637e-01, -6.367536026561689e-01, -6.310392597779767e-01, -6.357120221486452e-01, -6.249060974897975e-01, -4.919190347650521e-01, -5.303374458632935e-01, -5.862425118353438e-01, -5.730859212015429e-01, -5.493340122933619e-01, -6.995372198366879e-01, -2.330515659552025e-01, -2.445775588610761e-01, -3.353794851855812e-01, -3.257144539533124e-01, -2.858548109739889e-01, -4.911117199801327e-01, -2.441565437625136e-02, -4.088116920782864e-02, -3.631761142377015e-01, -7.113983171293523e-02, -7.113983171293523e-02, -6.197070081141986e-03, -2.266204238705578e-04, -1.392664637257447e-03, -4.972882070243227e-02, -1.401435200780603e-03, -1.965154627877486e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_r2scan_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.211338043825075e+01, -3.211306196554728e+01, -3.211344351751922e+01, -3.211310783832025e+01, -3.211368103965322e+01, -3.211343816863145e+01, -3.211296501604462e+01, -3.013314901536658e+01, -3.211341520545244e+01, -3.013387212763151e+01, -3.013419688869686e+01, -3.013387212763151e+01, -4.683877271261225e+00, -4.804653973609756e+00, -4.683994315373520e+00, -4.683802095016079e+00, -4.686244136162837e+00, -4.686695163485944e+00, -4.685822066191426e+00, -4.685890504813112e+00, -4.682865813426021e+00, -4.688002498491519e+00, -4.803389908801442e+00, -4.688002498491519e+00, -7.904133089521045e-01, -7.990520046370309e-01, -7.876417377287626e-01, -8.373047534501461e-01, -7.951294332707238e-01, -7.863019599672084e-01, -8.047700521879187e-01, -7.666177765336913e-01, -8.088762702538506e-01, -7.137024136555252e-01, -8.471894717230130e-01, -7.544108592884369e-01, -1.834300755831105e-01, -2.046141790514966e-01, -1.866889208134532e-01, -2.112516984219882e-01, -8.223433779807865e-01, -8.678764276838024e-01, -8.188450024788499e-02, -9.629330521465902e-02, -1.971460398732041e-01, 3.053418636974789e-02, -1.971460398732040e-01, -9.390807754901694e-02, 1.545362047565819e-01, 1.639197779620416e-01, -5.939814650503372e-03, 1.723100372076554e-01, -3.310693583592710e-02, 2.334698824923293e-01, 8.534579991211272e-02, 8.361076748651175e-02, 1.373010926643492e-01, 7.263964380724355e-02, 1.373010926643492e-01, 7.263964380724330e-02, -7.405795076498229e+00, -7.404027857329354e+00, -7.408257568604807e+00, -7.406406838008829e+00, -7.405954620184454e+00, -7.404125973751553e+00, -7.408066809526379e+00, -7.406286415140840e+00, -7.727997555113981e+00, -7.405220028885075e+00, -7.407039353051723e+00, -7.726134542327873e+00, -2.593618385783459e+00, -2.594432385714431e+00, -2.621946136699576e+00, -2.621868608196560e+00, -2.569045613759952e+00, -2.576905532302971e+00, -2.593930125221328e+00, -2.601998689443930e+00, -2.627721742951616e+00, -2.613060742909139e+00, -2.627721742951616e+00, -2.611465831657040e+00, -8.125908132471685e-01, -8.828070570482615e-01, -8.999615551937473e-01, -9.012523123374928e-01, -7.196379138091177e-01, -7.549271589060597e-01, -7.659268642266301e-01, -7.962325815232276e-01, -8.513627190838566e-01, -8.756712072054842e-01, -8.513627190838569e-01, -8.043009089834395e-01, 2.749795590222797e-02, 2.516445130926163e-02, -1.797704418341775e-01, -1.648875337521044e-01, 5.446958351765920e-02, 3.549223008076742e-02, -2.674750760195307e+00, -2.673625835018578e+00, -2.977774056204423e-02, -6.419548110441377e-02, -2.977774056204438e-02, -6.419548110441377e-02, -2.555966924338784e-03, 5.986501789626835e-02, 8.098941813013004e-02, 8.184038240776219e-02, 6.363989628770785e-02, 6.846990845639959e-02, 1.295878631205306e-01, -5.572602865189540e-02, 5.839582243082546e-02, 9.248311170651627e-02, 5.839582243082533e-02, 9.248311170652779e-02, -8.491703000091394e-01, -8.526070755634513e-01, -8.393343116137502e-01, -8.428085712379797e-01, -8.571240037440079e-01, -8.602762348867312e-01, -8.572235365762285e-01, -8.490163801057357e-01, -8.571540915049357e-01, -8.603214607558027e-01, -8.571540915049357e-01, -8.475953433461443e-01, -8.256737488243637e-01, -8.285744760099715e-01, -6.727403151913876e-01, -7.256211640205658e-01, -7.164952477805679e-01, -7.832280865668578e-01, -7.602388605027438e-01, -7.630658597908494e-01, -7.380381374054109e-01, -7.410424190838333e-01, -7.380381374054109e-01, -7.981370051955801e-01, -9.376688291563086e-01, -1.008951357011601e+00, -2.434297850820915e-01, -2.456937039564989e-01, -3.000742089490105e-01, -3.227380982359754e-01, -4.575169115440603e-01, -4.612916832592314e-01, -3.883550019962414e-01, -3.885421010991142e-01, -3.883550019962413e-01, -3.825730012508736e-01, -6.094293337348945e-01, -6.154527776570973e-01, -3.248667177835732e-02, -3.270924410528992e-02, 2.022165655274234e-01, 1.904108959565434e-01, -4.474543264599740e-01, -4.595718117013494e-01, 5.870979973805582e-02, 3.014760826632413e-02, 5.870979973805544e-02, 3.014760826632459e-02, -8.108589265193892e-03, -8.402643468135313e-03, 1.351719340313503e-02, 1.355495974715720e-02, -1.794590280271471e-03, -1.908696489371902e-03, -6.620280702889492e-02, -6.736794106502286e-02, 5.842113927467589e-02, 8.384299185258103e-02, 5.842113927470308e-02, -3.151661359203783e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_r2scan_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.419924458232631e-08, 0.000000000000000e+00, -2.419841825978885e-08, -2.419879234294124e-08, 0.000000000000000e+00, -2.419808982219423e-08, -2.419733610131026e-08, 0.000000000000000e+00, -2.419600532923446e-08, -2.420243403300046e-08, 0.000000000000000e+00, -1.182780535459233e-08, -2.419897172860149e-08, 0.000000000000000e+00, -1.182721524200783e-08, -1.182648786902893e-08, 0.000000000000000e+00, -1.182721524200783e-08, -1.449363951518555e-05, 0.000000000000000e+00, -1.736008722775744e-05, -1.449407892772807e-05, 0.000000000000000e+00, -1.449425945617114e-05, -1.450289971254418e-05, 0.000000000000000e+00, -1.450387270638861e-05, -1.449479985913246e-05, 0.000000000000000e+00, -1.449400247816281e-05, -1.450195419370099e-05, 0.000000000000000e+00, -1.450087895616255e-05, -1.735746740116397e-05, 0.000000000000000e+00, -1.450087895616255e-05, -3.750780689531121e-03, 0.000000000000000e+00, -3.926672497110671e-03, -3.707908742940772e-03, 0.000000000000000e+00, -9.527637611454613e-03, -1.040589580882549e-02, 0.000000000000000e+00, -1.067413012854093e-02, -1.029802452531410e-02, 0.000000000000000e+00, -3.525442069791764e-03, -3.963822779268125e-03, 0.000000000000000e+00, -2.879652123055515e-03, -9.238671730768064e-03, 0.000000000000000e+00, -1.167116703146051e-02, -3.445899271321274e-01, 0.000000000000000e+00, -1.930439125946481e+00, -3.513221629962109e-01, 0.000000000000000e+00, -1.809916889956284e+00, -5.228391106989345e-03, 0.000000000000000e+00, -8.236847654912883e-04, -5.954081087997075e+00, 0.000000000000000e+00, -5.686555600571421e+00, -1.866665576606226e+00, 0.000000000000000e+00, -1.990740631755343e+01, -1.866665576606226e+00, 0.000000000000000e+00, -1.164761672102153e+00, -1.370562144649663e+05, 0.000000000000000e+00, -1.214991844729246e+05, -6.512156367502207e+04, 0.000000000000000e+00, -1.109116899763511e+05, -6.807752400014184e+01, 0.000000000000000e+00, -7.482054341505063e+02, -2.969136722957963e+05, 0.000000000000000e+00, -3.074643915631350e+05, -1.669388016301838e+05, 0.000000000000000e+00, -6.253917695258501e+05, -1.669388016301838e+05, 0.000000000000000e+00, -6.253917695258477e+05, -3.530174923898162e-06, 0.000000000000000e+00, -3.533585839408239e-06, -3.531776093478643e-06, 0.000000000000000e+00, -3.535135569172423e-06, -3.530308933501320e-06, 0.000000000000000e+00, -3.533671865489999e-06, -3.531680246752258e-06, 0.000000000000000e+00, -3.535077126799784e-06, -6.256167161115904e-06, 0.000000000000000e+00, -3.534355101466864e-06, -3.530957095964674e-06, 0.000000000000000e+00, -6.262443059659795e-06, -1.405293107674754e-04, 0.000000000000000e+00, -1.406344433915320e-04, -1.372052870351242e-04, 0.000000000000000e+00, -1.374075087633887e-04, -1.433635876417862e-04, 0.000000000000000e+00, -1.426469415995067e-04, -1.404097891699958e-04, 0.000000000000000e+00, -1.396769774708910e-04, -1.366341244550794e-04, 0.000000000000000e+00, -1.283527289381155e-04, -1.366341244550794e-04, 0.000000000000000e+00, -1.386560123014866e-04, -1.903514680803774e-02, 0.000000000000000e+00, -3.955125222344481e-02, -1.501251866571651e-02, 0.000000000000000e+00, -1.506912143263112e-02, -2.641383723021725e-02, 0.000000000000000e+00, -2.348685649188962e-02, -2.373780069674796e-02, 0.000000000000000e+00, -2.125932133120265e-02, -1.670057079004015e-02, 0.000000000000000e+00, -4.145922772568026e-02, -1.670057079004016e-02, 0.000000000000000e+00, -2.006849739851023e-02, -2.395693348231467e+01, 0.000000000000000e+00, -2.309920300327651e+01, -1.892341335960300e-01, 0.000000000000000e+00, -1.958776273106396e+00, -3.512081893252304e+01, 0.000000000000000e+00, -2.885434716264784e+01, -1.711419068110797e-04, 0.000000000000000e+00, -1.714686660082462e-04, -1.445983840240525e+01, 0.000000000000000e+00, -1.172705057716014e+01, -1.445983840240524e+01, 0.000000000000000e+00, -1.172705057716014e+01, -1.898689555196313e+06, 0.000000000000000e+00, -3.592569815837194e+05, -3.080130540770054e+05, 0.000000000000000e+00, -2.793290315587204e+05, -1.554650868956790e+06, 0.000000000000000e+00, -1.476077891873603e+06, -1.446700221905944e+02, 0.000000000000000e+00, -8.724369006999158e+00, -5.804297989480222e+05, 0.000000000000000e+00, -6.341622480309235e+05, -5.804297989480209e+05, 0.000000000000000e+00, -6.341622480309993e+05, -2.453822061361961e-02, 0.000000000000000e+00, -2.418416594907799e-02, -2.406182846033758e-02, 0.000000000000000e+00, -2.374063638460795e-02, -3.150876581213189e-02, 0.000000000000000e+00, -3.086402608832600e-02, -3.013344695580445e-02, 0.000000000000000e+00, -2.408339852821633e-02, -3.081843759771363e-02, 0.000000000000000e+00, -3.020463396804654e-02, -3.081843759771363e-02, 0.000000000000000e+00, -2.402170583359432e-02, -2.723276086752779e-02, 0.000000000000000e+00, -2.690683849869946e-02, -3.777087652474399e-02, 0.000000000000000e+00, -6.542653268303894e-02, -3.317147185931389e-02, 0.000000000000000e+00, -7.018413128595527e-02, -2.981192375510229e-02, 0.000000000000000e+00, -2.943124069959586e-02, -3.135991999530855e-02, 0.000000000000000e+00, -3.094830001185076e-02, -3.135991999530855e-02, 0.000000000000000e+00, -6.602105717320920e-02, -1.210974584481908e-02, 0.000000000000000e+00, -2.551155154882024e-02, -8.100259485561003e-01, 0.000000000000000e+00, -7.923096799407007e-01, -1.201967330768875e-01, 0.000000000000000e+00, -3.909574275071959e-01, -1.252285029011063e-01, 0.000000000000000e+00, -1.393164482327172e-01, -2.375535223082715e-01, 0.000000000000000e+00, -2.380804091628269e-01, -2.375535223082717e-01, 0.000000000000000e+00, -1.574346698668106e-01, -5.105466259206530e-02, 0.000000000000000e+00, -4.997881276884868e-02, -7.341813384416251e+01, 0.000000000000000e+00, -7.144277894191417e+01, -3.328920205243449e+02, 0.000000000000000e+00, -2.966837044905627e+02, -1.728152734356272e-01, 0.000000000000000e+00, -1.669140040670056e-01, -6.502715452008286e+01, 0.000000000000000e+00, -5.344743259008536e+01, -6.502715452008273e+01, 0.000000000000000e+00, -5.344743259008557e+01, -1.875339245312666e+04, 0.000000000000000e+00, -1.626339316259562e+04, -2.827544921177853e+06, 0.000000000000000e+00, -2.809893480878802e+06, -7.812926600083571e+06, 0.000000000000000e+00, -6.105637851205569e+06, -4.534650665520796e+00, 0.000000000000000e+00, -4.272491942846817e+00, -1.098200332328368e+06, 0.000000000000000e+00, -7.597781118711687e+05, -1.098200332328868e+06, 0.000000000000000e+00, -8.214369993793224e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_r2scan_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.863576868547789e-03, 1.863508040116474e-03, 1.863560397933790e-03, 1.863496081603653e-03, 1.863510428511186e-03, 1.863423676600403e-03, 1.863695635979355e-03, 9.613629081491938e-04, 1.863566637436669e-03, 9.613647999173975e-04, 9.613444788429669e-04, 9.613647999173975e-04, 5.200755221459941e-03, 5.660887214950159e-03, 5.200942682988110e-03, 5.200786485431169e-03, 5.204614881269966e-03, 5.205218397988418e-03, 5.202840002375273e-03, 5.202772331104977e-03, 5.201171050061485e-03, 5.205989169442508e-03, 5.657293408489194e-03, 5.205989169442508e-03, 8.008534892949089e-03, 8.548151374036181e-03, 7.862284724001120e-03, 2.467914867357818e-02, 2.490970267060375e-02, 2.502192028264661e-02, 2.494013661963535e-02, 7.035133407552602e-03, 8.869696465177750e-03, 4.819492098851227e-03, 2.453681430890531e-02, 2.540949829993567e-02, 9.478458935622741e-03, 9.031277702952847e-02, 1.031604008021916e-02, 8.930932308946642e-02, 2.016283456321605e-02, 2.453172327434770e-03, 1.105920825569308e-01, 1.103819134520466e-01, 8.845919503407032e-02, 1.406345889107520e-01, 8.845919503407032e-02, 4.390553280841748e-04, 2.174495952340026e-01, 2.313028885026407e-01, 3.183353201575943e-07, 2.489340846563488e-01, 2.653194328367660e-05, 2.787630391913596e-01, 1.023156761757039e-01, 1.007428797411256e-01, 1.880298624188741e-01, 1.298010260264555e-01, 1.880298624188741e-01, 1.298010260264550e-01, 4.113775179450310e-03, 4.114785627664806e-03, 4.116987703993055e-03, 4.117891317428522e-03, 4.114004993863080e-03, 4.114929575410646e-03, 4.116758992116961e-03, 4.117748427767237e-03, 6.991748227315147e-03, 4.116335391123984e-03, 4.115377556504287e-03, 6.993639898097636e-03, 9.005528823879012e-03, 9.010645076495275e-03, 8.985544817805202e-03, 8.991240276241709e-03, 9.019958494923723e-03, 9.020727154621223e-03, 9.002980716095701e-03, 9.003559057757569e-03, 8.984347936964352e-03, 7.479544007365223e-03, 8.984347936964352e-03, 8.999544092759328e-03, 3.267271384875967e-02, 6.260098302743439e-02, 3.236844965812328e-02, 3.249782431743813e-02, 3.409631998951222e-02, 3.369109206394569e-02, 3.438048152968968e-02, 3.385845353496531e-02, 3.211438739229514e-02, 6.384638630257745e-02, 3.211438739229514e-02, 3.321456093079812e-02, 1.474352688304093e-01, 1.463101678478282e-01, 3.811072321480527e-03, 8.686676175952351e-02, 1.594258971453463e-01, 1.536233777537231e-01, 1.021307323778425e-02, 1.021859874448526e-02, 1.344724919111938e-01, 1.305059479910464e-01, 1.344724919111937e-01, 1.305059479910465e-01, 1.299773963577807e-08, 5.866765059569985e-02, 9.454668429050889e-02, 8.969438857721707e-02, 1.995344657483087e-01, 2.250236778123255e-01, 2.127605483801848e-01, 1.566843094237176e-04, 7.937196672625330e-02, 2.246125593935297e-01, 7.937196672625312e-02, 2.246125593935565e-01, 4.009116768939559e-02, 3.995688809212433e-02, 3.912653520326555e-02, 3.903932124353147e-02, 5.030839661677373e-02, 4.985979274474906e-02, 4.836727706646347e-02, 3.973268723448063e-02, 4.933620878120417e-02, 4.892068685022609e-02, 4.933620878120417e-02, 3.960524902115065e-02, 4.108422600690502e-02, 4.097791224501062e-02, 3.807293833673949e-02, 6.160600616101761e-02, 3.808558215979420e-02, 7.633844001090866e-02, 3.856224266507712e-02, 3.846351279168481e-02, 3.824217105169545e-02, 3.815059635640119e-02, 3.824217105169545e-02, 7.666463403020748e-02, 3.020102410740083e-02, 6.027157964959975e-02, 7.183439184981343e-02, 7.150451344614094e-02, 1.471380498910060e-02, 6.179175347837840e-02, 3.992490341389211e-02, 5.045568790892310e-02, 5.619223862262988e-02, 5.625760378211461e-02, 5.619223862262990e-02, 3.259363057298514e-02, 4.015034899799324e-02, 4.009913887100234e-02, 2.638422944845509e-05, 2.639320508372034e-05, 2.429351221285700e-01, 2.391807856379927e-01, 5.426384044459261e-02, 5.468550134371643e-02, 1.845276258700708e-01, 1.792529591087660e-01, 1.845276258700704e-01, 1.792529591087667e-01, 3.770283392503617e-07, 4.135182668719240e-07, 1.690546637317033e-02, 1.691538254288545e-02, 1.870194505612990e-08, 2.383886921615496e-08, 3.427593643769229e-04, 4.053721453215692e-04, 1.276238944057955e-01, 2.072125889140138e-01, 1.276238944058530e-01, 1.421350379299050e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
