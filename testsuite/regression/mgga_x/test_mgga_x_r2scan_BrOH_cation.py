
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_r2scan_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.318080644189761e+01, -2.318087550822831e+01, -2.318123399576173e+01, -2.318020750841986e+01, -2.318073802061098e+01, -2.318073802061098e+01, -3.397605735275355e+00, -3.397733139075457e+00, -3.401381835504051e+00, -3.402460677511306e+00, -3.401054383102287e+00, -3.401054383102287e+00, -5.932274783329564e-01, -5.925411962321558e-01, -5.768968016078738e-01, -5.878477648637854e-01, -5.865334761703249e-01, -5.865334761703249e-01, -1.796411493791786e-01, -1.816920259239261e-01, -6.494575806719798e-01, -1.148966683224138e-01, -1.647528936871824e-01, -1.647528936871823e-01, -2.658758175368621e-03, -2.829428753691562e-03, -2.411272204682568e-02, -1.215206331141319e-03, -1.970035328498652e-03, -1.970035328498651e-03, -5.667956382047411e+00, -5.669062002890997e+00, -5.668033439848582e+00, -5.669008443645423e+00, -5.668503350758938e+00, -5.668503350758938e+00, -2.075726698109188e+00, -2.098975477167532e+00, -2.069402367279353e+00, -2.090158084708530e+00, -2.091848721507920e+00, -2.091848721507920e+00, -6.151927565657607e-01, -6.677679638022029e-01, -5.451444901937650e-01, -5.581007431972664e-01, -6.282571034496214e-01, -6.282571034496215e-01, -7.426480405219638e-02, -1.729986503047412e-01, -6.801375592550327e-02, -1.913898845865128e+00, -9.478302219977061e-02, -9.478302219977058e-02, -8.710131550202892e-04, -1.195275022335268e-03, -9.849631244652198e-04, -4.324431405647067e-02, -1.262127131834944e-03, -1.262127131834944e-03, -6.397660363877005e-01, -6.361314893371854e-01, -6.374113098467361e-01, -6.384642390473629e-01, -6.379359123602463e-01, -6.379359123602463e-01, -6.198012677886027e-01, -5.319430648997593e-01, -5.573802230434006e-01, -5.823835500015861e-01, -5.694404465053149e-01, -5.694404465053149e-01, -6.907087819334172e-01, -2.283442107852843e-01, -2.721157285035115e-01, -3.515023900557112e-01, -3.120667311695587e-01, -3.120667311695587e-01, -4.765775071220580e-01, -2.285665103304121e-02, -3.304856929598451e-02, -3.446649646090245e-01, -5.834398860820771e-02, -5.834398860820772e-02, -4.039405141222498e-03, -2.206210142605024e-04, -5.849664155778016e-04, -5.565339758560697e-02, -1.142981575964168e-03, -1.142981575964166e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_r2scan_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.014668739879143e+01, -3.014678665152250e+01, -3.014681275010867e+01, -3.014687767819845e+01, -3.014721501911941e+01, -3.014745371550954e+01, -3.014580069060224e+01, -3.014565076271496e+01, -3.014676261910283e+01, -3.014637229144905e+01, -3.014676261910283e+01, -3.014637229144905e+01, -4.808012112529091e+00, -4.808120761209828e+00, -4.808138828062474e+00, -4.808225379505663e+00, -4.810861205145156e+00, -4.811471286442165e+00, -4.809025416242610e+00, -4.809371497007212e+00, -4.806931004571808e+00, -4.811854520017618e+00, -4.806931004571808e+00, -4.811854520017618e+00, -8.248479592485367e-01, -8.295544799138277e-01, -8.232159990837945e-01, -8.287626943569660e-01, -8.007734188163644e-01, -7.952937421367974e-01, -8.084637657961659e-01, -8.114531718103047e-01, -8.359391023878455e-01, -7.749210146845217e-01, -8.359391023878455e-01, -7.749210146845217e-01, -1.578709550362156e-01, -1.926829637758176e-01, -1.641135225439052e-01, -1.973989665522834e-01, -8.357277219450662e-01, -8.774611363451780e-01, -1.481501746306013e-01, -1.302770572959856e-01, -1.662382785446841e-01, -1.111444057169956e-01, -1.662382785446840e-01, -1.111444057169955e-01, -1.868047542682949e-03, 1.424744073486215e-02, -3.804486136735112e-03, -1.466339321916235e-03, -3.646507099761491e-02, -3.821047709947980e-02, -2.255922374754458e-03, -2.196997726495198e-03, -3.646256529961403e-03, -1.966335194304747e-03, -3.646256529961417e-03, -1.966335194304747e-03, -7.406182226874255e+00, -7.404392582526368e+00, -7.408643991981405e+00, -7.406770661790775e+00, -7.406332841943986e+00, -7.404484268440783e+00, -7.408444679102504e+00, -7.406644172039304e+00, -7.407432892497225e+00, -7.405585429589456e+00, -7.407432892497225e+00, -7.405585429589456e+00, -2.540533600795102e+00, -2.542762085436885e+00, -2.577500808626743e+00, -2.578615611213884e+00, -2.517474337765542e+00, -2.526160121396720e+00, -2.551549733398547e+00, -2.560294558448517e+00, -2.579332113567350e+00, -2.564198582232667e+00, -2.579332113567350e+00, -2.564198582232667e+00, -8.196110228946097e-01, -8.174822934135837e-01, -9.249792736967138e-01, -9.252661527471175e-01, -7.369702337245785e-01, -7.689326858597179e-01, -8.059741130071613e-01, -8.330229095118841e-01, -8.571743868115849e-01, -8.134721586484013e-01, -8.571743868115850e-01, -8.134721586484014e-01, -9.865249728130827e-02, -1.013618343847819e-01, -1.124454178399256e-01, -1.140184740741305e-01, -9.290202159632187e-02, -9.482156935474279e-02, -2.832208493932238e+00, -2.831068889094887e+00, -9.002912737329022e-02, -7.885383051114996e-02, -9.002912737329305e-02, -7.885383051114948e-02, -1.581987894248694e-03, -1.645422118007212e-03, -2.183213103545493e-03, -2.212829884130935e-03, -1.709282086484615e-03, -1.861334215867309e-03, -6.445481036681308e-02, -6.212655851949794e-02, -1.663171223327107e-03, -2.272346577175732e-03, -1.663171223327106e-03, -2.272346577175729e-03, -8.523617900250352e-01, -8.557318902584820e-01, -8.415074072312100e-01, -8.449629099733684e-01, -8.452771961763684e-01, -8.487281786021937e-01, -8.484621354457561e-01, -8.518415931012293e-01, -8.468671537660568e-01, -8.502812474916719e-01, -8.468671537660568e-01, -8.502812474916719e-01, -8.324564790828231e-01, -8.351274728515800e-01, -6.710573412717868e-01, -6.745270263878599e-01, -7.160313848667872e-01, -7.197666234243979e-01, -7.614634349246409e-01, -7.643001630075376e-01, -7.384859225287213e-01, -7.414944459698399e-01, -7.384859225287213e-01, -7.414944459698399e-01, -9.715683521033167e-01, -9.727982669263943e-01, -2.163476174481302e-01, -2.183708698955963e-01, -2.904544040284412e-01, -2.968256008641963e-01, -4.547292195944269e-01, -4.578222368319155e-01, -3.715550850346996e-01, -3.719788615604441e-01, -3.715550850346996e-01, -3.719788615604442e-01, -6.027705334692919e-01, -6.092262026452171e-01, -3.004301865775304e-02, -3.262597757459786e-02, -4.939751617987630e-02, -5.098826502595877e-02, -4.501379911921294e-01, -4.587383687663105e-01, -7.580487201485142e-02, -7.706647512714281e-02, -7.580487201485146e-02, -7.706647512714283e-02, -6.962480912837367e-03, -7.296111657204637e-03, -4.057083046260120e-04, -4.307274374854222e-04, -1.019620256227079e-03, -1.116845752278608e-03, -6.904915684706693e-02, -1.608590707400479e-02, -1.644154207835988e-03, -2.047802186646914e-03, -1.644154207835986e-03, -2.047802186646920e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_r2scan_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.259342879967507e-08, 0.000000000000000e+00, -1.259088673024988e-08, -1.259328753924960e-08, 0.000000000000000e+00, -1.259078444987137e-08, -1.259240194762011e-08, 0.000000000000000e+00, -1.258963767328465e-08, -1.259398272926577e-08, 0.000000000000000e+00, -1.259165514599561e-08, -1.259335644042529e-08, 0.000000000000000e+00, -1.259053161095969e-08, -1.259335644042529e-08, 0.000000000000000e+00, -1.259053161095969e-08, -3.034762466166977e-05, 0.000000000000000e+00, -3.034567023027932e-05, -3.035187465161604e-05, 0.000000000000000e+00, -3.034857490141372e-05, -3.043400636830228e-05, 0.000000000000000e+00, -3.044735484767095e-05, -3.039186705804511e-05, 0.000000000000000e+00, -3.039082035673451e-05, -3.035756130987004e-05, 0.000000000000000e+00, -3.046003051456987e-05, -3.035756130987004e-05, 0.000000000000000e+00, -3.046003051456987e-05, -8.561504640888333e-03, 0.000000000000000e+00, -8.708743376708782e-03, -8.528213784682956e-03, 0.000000000000000e+00, -8.692970596482174e-03, -8.070941658004633e-03, 0.000000000000000e+00, -8.071349810085237e-03, -8.291799953975821e-03, 0.000000000000000e+00, -8.407999996307924e-03, -8.745620087375118e-03, 0.000000000000000e+00, -8.695402809479839e-03, -8.745620087375118e-03, 0.000000000000000e+00, -8.695402809479839e-03, -3.893373225502802e+00, 0.000000000000000e+00, -2.489669412686772e+00, -3.788102747484727e+00, 0.000000000000000e+00, -2.467221788600527e+00, -2.426760099453497e-03, 0.000000000000000e+00, -2.866198461436031e-03, -1.104557645309754e+00, 0.000000000000000e+00, -3.423952921580287e+00, -3.342936213370294e+00, 0.000000000000000e+00, 2.738838959096026e-01, -3.342936213370293e+00, 0.000000000000000e+00, 2.738838959096024e-01, -1.933852084770291e+03, 0.000000000000000e+00, -1.354158430754885e+04, -4.195013383626554e+02, 0.000000000000000e+00, -2.093251868554063e+03, 4.388944812667577e+00, 0.000000000000000e+00, 1.674707212366421e+00, 8.589165072256387e+02, 0.000000000000000e+00, 8.563133236415398e+02, 1.985546021077918e+02, 0.000000000000000e+00, 2.107295869516379e+03, 1.985546021078099e+02, 0.000000000000000e+00, 2.107295869516382e+03, -3.547570530950236e-06, 0.000000000000000e+00, -3.549995065426162e-06, -3.549018501982586e-06, 0.000000000000000e+00, -3.551394474772261e-06, -3.547296174039132e-06, 0.000000000000000e+00, -3.549787629371868e-06, -3.548550583448220e-06, 0.000000000000000e+00, -3.551070689668846e-06, -3.548577345253252e-06, 0.000000000000000e+00, -3.550739394021807e-06, -3.548577345253252e-06, 0.000000000000000e+00, -3.550739394021807e-06, -2.042000970164974e-04, 0.000000000000000e+00, -2.021716223564088e-04, -1.890303782738271e-04, 0.000000000000000e+00, -1.876139140740471e-04, -1.992170290776725e-04, 0.000000000000000e+00, -1.989201557196262e-04, -1.853241093510947e-04, 0.000000000000000e+00, -1.848541895061100e-04, -1.984508516996018e-04, 0.000000000000000e+00, -1.947464854364915e-04, -1.984508516996018e-04, 0.000000000000000e+00, -1.947464854364915e-04, -3.385113202042423e-02, 0.000000000000000e+00, -3.368022709191323e-02, -2.922786260827588e-02, 0.000000000000000e+00, -2.865953186097761e-02, -5.572398285209972e-02, 0.000000000000000e+00, -4.855233267471763e-02, -6.431171512422926e-02, 0.000000000000000e+00, -5.481837883663442e-02, -2.704710995311444e-02, 0.000000000000000e+00, -3.658431983665506e-02, -2.704710995311446e-02, 0.000000000000000e+00, -3.658431983665506e-02, -1.868080787322369e+00, 0.000000000000000e+00, -1.453849906267205e+00, -3.521861187058516e+00, 0.000000000000000e+00, -3.465346718165730e+00, -7.514856622479184e-01, 0.000000000000000e+00, -1.795441309252590e+00, -4.300638806782351e-04, 0.000000000000000e+00, -4.307184464158399e-04, -6.447346500512396e+00, 0.000000000000000e+00, -1.022874294919178e+01, -6.447346500512444e+00, 0.000000000000000e+00, -1.022874294919176e+01, 1.787535024648658e+03, 0.000000000000000e+00, 1.540098162348172e+03, 1.055633975192606e+03, 0.000000000000000e+00, 9.848991672132778e+02, 4.514078144298647e+03, 0.000000000000000e+00, 4.335628311309226e+03, 1.083658742438832e+00, 0.000000000000000e+00, -2.038218295829703e+00, 3.066184575223513e+03, 0.000000000000000e+00, -1.404655442489185e+02, 3.066184575223507e+03, 0.000000000000000e+00, -1.404655442489382e+02, -2.633932140807691e-02, 0.000000000000000e+00, -2.589694283580298e-02, -2.634662600584611e-02, 0.000000000000000e+00, -2.591764044886432e-02, -2.642431649547324e-02, 0.000000000000000e+00, -2.598537765292059e-02, -2.641701662900130e-02, 0.000000000000000e+00, -2.597625642097188e-02, -2.642939584203299e-02, 0.000000000000000e+00, -2.598844906667410e-02, -2.642939584203299e-02, 0.000000000000000e+00, -2.598844906667410e-02, -3.124846463862928e-02, 0.000000000000000e+00, -3.070843545908888e-02, -4.173486134825141e-02, 0.000000000000000e+00, -4.103292624622040e-02, -3.760165803047749e-02, 0.000000000000000e+00, -3.695695409283695e-02, -3.488775138601916e-02, 0.000000000000000e+00, -3.441754449501699e-02, -3.635541328873409e-02, 0.000000000000000e+00, -3.568386865159442e-02, -3.635541328873410e-02, 0.000000000000000e+00, -3.568386865159442e-02, -2.671469340924878e-02, 0.000000000000000e+00, -2.581518946912041e-02, -1.186120630742267e+00, 0.000000000000000e+00, -1.167676985046209e+00, -6.879636488962425e-01, 0.000000000000000e+00, -6.590876164610278e-01, -2.775963417468650e-01, 0.000000000000000e+00, -2.723050670285073e-01, -4.218505709035897e-01, 0.000000000000000e+00, -4.229326453981633e-01, -4.218505709035898e-01, 0.000000000000000e+00, -4.229326453981634e-01, -8.572293437054736e-02, 0.000000000000000e+00, -8.077653095675391e-02, -1.716888867989393e+01, 0.000000000000000e+00, -8.233553930769817e+00, 1.457733887846590e+00, 0.000000000000000e+00, 8.199681630986418e-01, -3.472619380654849e-01, 0.000000000000000e+00, -2.976460066532572e-01, -3.311964458357778e+00, 0.000000000000000e+00, -5.738916563178595e+00, -3.311964458357767e+00, 0.000000000000000e+00, -5.738916563178583e+00, 1.686722113198665e+02, 0.000000000000000e+00, 1.596124570952094e+02, 2.076925424733473e+04, 0.000000000000000e+00, 2.889900458997226e+04, 3.983134898652224e+03, 0.000000000000000e+00, 3.758492750602838e+03, -6.291872092658738e+00, 0.000000000000000e+00, -3.969984482032528e+01, 5.049115895439347e+03, 0.000000000000000e+00, 8.297268811388699e+00, 5.049115895439357e+03, 0.000000000000000e+00, 8.297268811471788e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_r2scan_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_r2scan_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.011950069073501e-03, 1.011778018072977e-03, 1.011947874315403e-03, 1.011776446081452e-03, 1.011913980738664e-03, 1.011735450800983e-03, 1.011937750289414e-03, 1.011765946022265e-03, 1.011949451584035e-03, 1.011734120128818e-03, 1.011949451584035e-03, 1.011734120128818e-03, 9.219736107757160e-03, 9.215213210588873e-03, 9.221640036826165e-03, 9.216167135595399e-03, 9.254824493031206e-03, 9.259772257663765e-03, 9.255558372935728e-03, 9.252567490412580e-03, 9.217281375865697e-03, 9.281714728645288e-03, 9.217281375865697e-03, 9.281714728645288e-03, 1.489731166196524e-02, 1.512779184787011e-02, 1.485122427329420e-02, 1.508645291007929e-02, 1.402994536725142e-02, 1.421078896553685e-02, 1.527651784112196e-02, 1.554239963278750e-02, 1.498925949708175e-02, 1.634286955751028e-02, 1.498925949708175e-02, 1.634286955751028e-02, 1.562841900154193e-01, 1.143588849103780e-01, 1.574180966664019e-01, 1.190399664711121e-01, 2.015010479552198e-03, 3.124990878896335e-03, 2.312339186860001e-02, 6.705751480058023e-02, 1.523915258512968e-01, 2.298305689250563e-03, 1.523915258512967e-01, 2.298305689250563e-03, 3.624494664672255e-03, 2.623681602325096e-02, 1.392221326543654e-03, 5.342055114337011e-03, 1.224492725161207e-03, 2.095816239995162e-03, 1.166908116911947e-05, 1.588062861488039e-05, 2.905815760718179e-04, 4.295267561314041e-06, 2.905815760717984e-04, 4.295267561314021e-06, 4.129395898927509e-03, 4.129510519967115e-03, 4.132456219849551e-03, 4.132467984468973e-03, 4.129258192221554e-03, 4.129390659928646e-03, 4.131894935962598e-03, 4.132087945839081e-03, 4.131192340005640e-03, 4.131031154847933e-03, 4.131192340005640e-03, 4.131031154847933e-03, 1.259837420293136e-02, 1.248356861249131e-02, 1.197453977883022e-02, 1.188506701604739e-02, 1.212772532609520e-02, 1.216473107968969e-02, 1.154948807656803e-02, 1.157617118812801e-02, 1.255235939665467e-02, 1.220510937113701e-02, 1.255235939665467e-02, 1.220510937113701e-02, 5.325822615763340e-02, 5.270914126453628e-02, 5.510887538402234e-02, 5.445015305266134e-02, 6.197041143368406e-02, 6.174765204716371e-02, 6.789636446211228e-02, 6.727290754230350e-02, 4.816620630050761e-02, 5.505152004056719e-02, 4.816620630050761e-02, 5.505152004056717e-02, 1.508777636327114e-02, 1.289304451967388e-02, 1.492120119333272e-01, 1.489661899013043e-01, 7.289798789843374e-03, 1.328104970026451e-02, 2.064994473317633e-02, 2.066099737776035e-02, 6.178562214604287e-02, 1.132400226316339e-01, 6.178562214604191e-02, 1.132400226316345e-01, 4.943129921509770e-07, 5.691478512215676e-07, 2.784747628396187e-06, 2.206697095200403e-06, 2.236118229293471e-05, 2.349451864927094e-05, 2.306183080646910e-03, 6.826306985805953e-03, 3.829169665465289e-07, 6.474952922252346e-04, 3.829169665465314e-07, 6.474952922252407e-04, 4.263521703773147e-02, 4.240804534403207e-02, 4.199675527433196e-02, 4.181134556372750e-02, 4.235093510444945e-02, 4.214761184114293e-02, 4.253802992132488e-02, 4.232178656884551e-02, 4.245889886127967e-02, 4.224766837077478e-02, 4.245889886127967e-02, 4.224766837077479e-02, 4.651670328101824e-02, 4.617085862852312e-02, 4.152268702257841e-02, 4.135283134871686e-02, 4.236533705832205e-02, 4.218532268862284e-02, 4.374016278326832e-02, 4.359486231467152e-02, 4.326622480095946e-02, 4.296098463497128e-02, 4.326622480095946e-02, 4.296098463497129e-02, 5.593033752797564e-02, 5.498358033170103e-02, 1.026019011439767e-01, 1.027395822824499e-01, 1.013872185800867e-01, 1.001068196824574e-01, 9.074535938160762e-02, 9.036272861278662e-02, 9.462159054292793e-02, 9.474250095976056e-02, 9.462159054292792e-02, 9.474250095976053e-02, 6.345435713179461e-02, 6.125268948672039e-02, 7.519105893014942e-03, 4.948197907291728e-03, 1.990928278198311e-03, 2.484536294740028e-03, 9.838841170154156e-02, 9.045061265081375e-02, 1.344046419006293e-02, 2.328671554181133e-02, 1.344046419006291e-02, 2.328671554181129e-02, 8.793065454746475e-06, 8.218954578852565e-06, 4.367229258338318e-08, 2.425880919336182e-08, 3.669885994794145e-05, 3.849583747320369e-05, 1.967307904550334e-02, 1.056797508586752e-01, 9.442125210421756e-07, 5.478072181953838e-04, 9.442125210421730e-07, 5.478072181953619e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
