
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_scanl_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_scanl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.324580096703794e+01, -2.324586708747453e+01, -2.324617898057841e+01, -2.324519486773701e+01, -2.324570797472163e+01, -2.324570797472163e+01, -3.385051756044106e+00, -3.385164585244527e+00, -3.388574164976558e+00, -3.390837642724024e+00, -3.388816503731890e+00, -3.388816503731890e+00, -6.056362288337580e-01, -6.049298689321183e-01, -5.888511976429603e-01, -6.013567364773342e-01, -6.003143590358094e-01, -6.003143590358094e-01, -1.726639922012958e-01, -1.754905508410783e-01, -6.639329379190422e-01, -1.135957363004494e-01, -1.604273770590360e-01, -1.604273770590359e-01, -2.598543532818622e-03, -2.799265116194331e-03, -2.399161057356562e-02, -1.214387140636389e-03, -1.964065562594622e-03, -1.964065562594623e-03, -4.120586398082990e+00, -4.255996513409933e+00, -5.669116800180298e+00, -4.178307656332072e+00, -5.669614857299782e+00, -4.831917932487391e+00, -2.096316269750161e+00, -1.740839291249243e+00, -1.958706235843943e+00, -1.983287436773705e+00, -1.964218488327117e+00, -2.132803692879964e+00, -4.804548725395189e-01, -4.939982319361124e-01, -4.458146619234838e-01, -5.245079632441999e-01, -5.682953983723564e-01, -5.430227427768881e-01, -9.153635300171056e-02, -1.446898084208204e-01, -8.418362967058111e-02, -1.758501581020212e+00, -1.104519910029113e-01, -1.104519910029113e-01, -8.825877191991113e-04, -1.368553987007279e-03, -1.127528260144594e-03, -5.400227356955094e-02, -1.261785892192395e-03, -1.532166111888189e-03, -5.493999556774727e-01, -5.495738672556443e-01, -5.495545183255488e-01, -5.492673420315424e-01, -5.495902251361062e-01, -5.495331270961566e-01, -5.334812790752632e-01, -5.163602502831144e-01, -4.205119199826824e-01, -5.864081456698848e-01, -4.827550824916242e-01, -4.398594146084006e-01, -5.335346960879634e-01, -2.333258734849494e-01, -2.787166367591853e-01, -3.769540112518036e-01, -2.590155686887707e-01, -2.706162891809051e-01, -4.455320346558649e-01, -2.848365761497269e-02, -3.285075198248232e-02, -3.264069971922851e-01, -7.176699248366311e-02, -7.176699248366308e-02, -5.097675726076864e-03, -2.785317568551845e-04, -7.371211037608314e-04, -6.670816313961028e-02, -1.437753619840141e-03, -1.433947133118296e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_scanl_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_scanl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.111039881329518e+01, -3.111035844859763e+01, -3.111049551754925e+01, -3.111042870323106e+01, -3.111082981797086e+01, -3.111090075272069e+01, -3.110973707338642e+01, -3.110950815628019e+01, -3.111045523114146e+01, -3.111008315218390e+01, -3.111045523114146e+01, -3.111008315218390e+01, -3.766679625102885e+00, -3.769206442154601e+00, -3.766263132903758e+00, -3.769146560670446e+00, -3.760945085909738e+00, -3.760609161119107e+00, -3.753540525856323e+00, -3.755549660659381e+00, -3.767136019688864e+00, -3.751304418727178e+00, -3.767136019688864e+00, -3.751304418727178e+00, -7.919743826659907e-01, -7.960160096520564e-01, -7.905294936724920e-01, -7.953271261537612e-01, -7.713138655357747e-01, -7.657407863409380e-01, -7.746599738921314e-01, -7.767571810425338e-01, -8.021482881061331e-01, -7.285712894136041e-01, -8.021482881061331e-01, -7.285712894136041e-01, -1.700756558311409e-01, -1.257275053330898e-01, -1.997633084060997e-01, -1.350046959025508e-01, -8.450097649322124e-01, -8.785126214965487e-01, -1.507931821566004e-01, -1.392056923516806e-01, -8.759567277698448e-02, -1.122811383355104e-01, -8.759567277698488e-02, -1.122811383355104e-01, -4.472283724773725e-03, -4.835569132247372e-03, -4.770974016032260e-03, -5.212936668505207e-03, -3.729644888718191e-02, -3.965992083598395e-02, -2.266189862258880e-03, -2.210301730137418e-03, -3.852757948283554e-03, -1.971441656913959e-03, -3.852757948283555e-03, -1.971441656913960e-03, -5.077709859260371e+00, -5.152223795877905e+00, -5.617746842738113e+00, -5.624740938481832e+00, -7.577136191739323e+00, -7.575296982387379e+00, -5.029218391514500e+00, -5.031576775613470e+00, -7.577696845724574e+00, -7.575859323311328e+00, -6.443548932144210e+00, -6.406647992021636e+00, -2.827509475554515e+00, -2.852523044327777e+00, -2.298561298651618e+00, -2.298376557791353e+00, -1.810536769985441e+00, -1.816739344906086e+00, -1.875263100312420e+00, -1.851083740061676e+00, -1.869769413510591e+00, -1.847614022365009e+00, -2.895012351124228e+00, -2.876439581158449e+00, -5.768826695056365e-01, -5.792965933913531e-01, -6.440093147622437e-01, -6.436651433814758e-01, -5.317352043808935e-01, -5.443859513238470e-01, -6.983098098119793e-01, -7.128473604055749e-01, -7.497846337606243e-01, -7.130798443872819e-01, -7.445591703708579e-01, -7.036262713801620e-01, -1.347375655692352e-01, -1.360755120409235e-01, -2.005293423102993e-01, -2.014461548499356e-01, -1.216008564389745e-01, -1.283346391207521e-01, -2.437684439225909e+00, -2.436661977780036e+00, -1.546755398382833e-01, -1.639583646902400e-01, -1.546755398382833e-01, -1.639583646902400e-01, -1.619288287986314e-03, -1.679899363236257e-03, -2.502486828830140e-03, -2.536069127262301e-03, -1.964537582662925e-03, -2.138688845763681e-03, -8.258605161972514e-02, -8.307604218766423e-02, -1.685405317620279e-03, -2.547386228727992e-03, -1.920286532610963e-03, -3.018596198644048e-03, -7.258008762734054e-01, -7.286746342496049e-01, -7.185726482942443e-01, -7.214470245933775e-01, -7.208753772255442e-01, -7.237692958841115e-01, -7.226443191344240e-01, -7.254998756902039e-01, -7.220961981342586e-01, -7.249471232781756e-01, -7.219166494843626e-01, -7.247952843986800e-01, -7.076177862594888e-01, -7.099674330149116e-01, -5.578647014580659e-01, -5.656265853693212e-01, -5.103449287858718e-01, -5.119895907551684e-01, -7.826474980886868e-01, -7.853795304635109e-01, -6.394403951406366e-01, -6.421587424277703e-01, -5.275704026431512e-01, -5.289499689710513e-01, -6.450510393381460e-01, -6.456528595341680e-01, -3.238994208892285e-01, -3.257374654388741e-01, -3.757924620848592e-01, -3.791859709501450e-01, -5.076454304744455e-01, -5.104093121734216e-01, -3.444356276077924e-01, -3.437585887734556e-01, -3.549868159559361e-01, -3.547717666159548e-01, -4.593595007910724e-01, -4.631046364217723e-01, -4.590291701056057e-02, -4.626129280446660e-02, -5.070717015033507e-02, -5.263615065147120e-02, -4.136911875932409e-01, -3.504419608638096e-01, -1.037737052256365e-01, -1.099703324399870e-01, -1.037737052256364e-01, -1.099703324399867e-01, -8.796862153975271e-03, -9.217481881988732e-03, -5.144323684038904e-04, -5.455606595794268e-04, -1.298543493568565e-03, -1.429502377258391e-03, -9.935766957925092e-02, -1.010319389407265e-01, -2.076104100683185e-03, -2.859026316200138e-03, -2.000457589398647e-03, -2.859026316199222e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_scanl_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_scanl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([5.872713019703828e-10, 0.000000000000000e+00, 5.872735956428533e-10, 5.872545458586720e-10, 0.000000000000000e+00, 5.872614281515751e-10, 5.872117026111797e-10, 0.000000000000000e+00, 5.871970235556477e-10, 5.874006555427432e-10, 0.000000000000000e+00, 5.874379489231363e-10, 5.872607648391324e-10, 0.000000000000000e+00, 5.873495574145870e-10, 5.872607648391324e-10, 0.000000000000000e+00, 5.873495574145870e-10, -4.366428944906956e-05, 0.000000000000000e+00, -4.354832292445907e-05, -4.369376650105028e-05, 0.000000000000000e+00, -4.355873803180010e-05, -4.414408873987373e-05, 0.000000000000000e+00, -4.419958437076536e-05, -4.435131300561176e-05, 0.000000000000000e+00, -4.427439965308156e-05, -4.361447666239369e-05, 0.000000000000000e+00, -4.463977290694066e-05, -4.361447666239369e-05, 0.000000000000000e+00, -4.463977290694066e-05, -1.072909910388545e-02, 0.000000000000000e+00, -1.102536582555689e-02, -1.066841425367471e-02, 0.000000000000000e+00, -1.097713309562130e-02, -9.636374414796789e-03, 0.000000000000000e+00, -9.838366838726164e-03, -1.118254050929933e-02, 0.000000000000000e+00, -1.145946900917150e-02, -1.092119260356645e-02, 0.000000000000000e+00, -1.329362532028072e-02, -1.092119260356645e-02, 0.000000000000000e+00, -1.329362532028072e-02, -2.140707496215319e+00, 0.000000000000000e+00, -3.935366723678940e+00, -1.026515918184397e+00, 0.000000000000000e+00, -3.681926424883861e+00, -2.734548772673694e-03, 0.000000000000000e+00, -3.377225084918323e-03, -6.815636993482047e-01, 0.000000000000000e+00, -2.127239499708160e+00, -4.840471882512694e+00, 0.000000000000000e+00, 4.311959215172602e-01, -4.840471882512675e+00, 0.000000000000000e+00, 4.311959215172610e-01, 3.795411314167515e+02, 0.000000000000000e+00, 3.375357538079699e+02, 3.582760508435765e+02, 0.000000000000000e+00, 3.145135955336909e+02, 8.187749511044244e+00, 0.000000000000000e+00, 7.154304882608968e+00, 9.031222810825136e+02, 0.000000000000000e+00, 9.157039402140742e+02, 4.674786327083169e+02, 0.000000000000000e+00, 2.157689590254291e+03, 4.674786327083176e+02, 0.000000000000000e+00, 2.157689590254298e+03, -3.003941616576783e-06, 0.000000000000000e+00, -3.202129212684725e-06, -3.584535377343851e-06, 0.000000000000000e+00, -3.591168212108603e-06, 1.406761114260220e-07, 0.000000000000000e+00, 1.408556518566753e-07, -2.418666262699977e-06, 0.000000000000000e+00, -2.367194395906651e-06, 1.403114266530055e-07, 0.000000000000000e+00, 1.404965643341927e-07, -5.958596407803484e-06, 0.000000000000000e+00, -4.917268484935053e-06, -3.420823634492774e-05, 0.000000000000000e+00, -2.462144985149625e-05, -7.686590039278822e-05, 0.000000000000000e+00, -7.726730510664437e-05, -3.816831274208021e-04, 0.000000000000000e+00, -3.829468602690331e-04, -3.518785853181616e-04, 0.000000000000000e+00, -3.676588781906867e-04, -3.795667408718184e-04, 0.000000000000000e+00, -3.808046135887170e-04, 1.049533199257152e-05, 0.000000000000000e+00, 8.736455787133256e-06, -1.015993857662962e-02, 0.000000000000000e+00, -8.988595365547828e-03, -1.943243002092445e-02, 0.000000000000000e+00, -1.946396304143375e-02, -1.084907625015888e-02, 0.000000000000000e+00, -1.233464634527603e-02, -5.161441359459044e-02, 0.000000000000000e+00, -3.597118678787815e-02, -7.119750365515377e-03, 0.000000000000000e+00, -8.203141167325428e-03, -2.724067935108167e-02, 0.000000000000000e+00, -3.087616765597242e-02, 9.084585033191567e-01, 0.000000000000000e+00, 8.929452286816512e-01, 9.204586794601678e-02, 0.000000000000000e+00, 8.977376423417857e-02, 1.217516153299227e+00, 0.000000000000000e+00, 1.058353359486597e+00, -3.732817618499904e-04, 0.000000000000000e+00, -3.739962121152669e-04, 6.717896645570981e-01, 0.000000000000000e+00, 6.202898277542245e-01, 6.717896645570981e-01, 0.000000000000000e+00, 6.202898277542245e-01, 1.971380846800206e+03, 0.000000000000000e+00, 1.683774950494428e+03, 1.222229542606432e+03, 0.000000000000000e+00, 1.138306537205643e+03, 5.388489532355872e+03, 0.000000000000000e+00, 5.153592952274592e+03, 3.496179952398696e+00, 0.000000000000000e+00, 3.394047677399963e+00, 3.261648626931724e+03, 0.000000000000000e+00, 1.782341562982444e+03, 2.855437343114493e+03, 0.000000000000000e+00, 1.487067889048045e+03, -1.534287000076398e-02, 0.000000000000000e+00, -1.513892107665239e-02, -1.367725875936387e-02, 0.000000000000000e+00, -1.352725179983782e-02, -1.427733622688951e-02, 0.000000000000000e+00, -1.411243969282645e-02, -1.463945571026984e-02, 0.000000000000000e+00, -1.443265627286917e-02, -1.455111231573274e-02, 0.000000000000000e+00, -1.437034960931515e-02, -1.452689824231566e-02, 0.000000000000000e+00, -1.435015097683845e-02, -1.772019505484171e-02, 0.000000000000000e+00, -1.749219456883076e-02, -6.630882430720268e-02, 0.000000000000000e+00, -6.280824161196216e-02, -1.561355690196267e-02, 0.000000000000000e+00, -1.555121447627073e-02, 1.321866457144409e-03, 0.000000000000000e+00, 1.297123288016536e-03, -4.895715835990873e-02, 0.000000000000000e+00, -4.862677476182503e-02, -1.089984900569763e-02, 0.000000000000000e+00, -1.101275830291793e-02, -9.622411185877191e-03, 0.000000000000000e+00, -9.839027920354609e-03, 5.843525251255220e-02, 0.000000000000000e+00, 5.734386249896779e-02, -4.716134967332224e-02, 0.000000000000000e+00, -4.865805117366177e-02, 1.092794950967180e-02, 0.000000000000000e+00, 1.067904813712268e-02, -4.780634296755672e-02, 0.000000000000000e+00, -4.737688017121752e-02, -1.521007610085436e-01, 0.000000000000000e+00, -1.410133115330721e-01, -1.407301081064427e-01, 0.000000000000000e+00, -1.387611900382024e-01, 1.061867237289994e+01, 0.000000000000000e+00, 1.046586440757372e+01, 4.080723722587660e+00, 0.000000000000000e+00, 3.965388663245823e+00, -4.127743621300349e-02, 0.000000000000000e+00, -4.925476492713365e-01, 2.071782380287883e+00, 0.000000000000000e+00, 1.926469538933354e+00, 2.071782380287785e+00, 0.000000000000000e+00, 1.926469538933285e+00, 2.158412066470831e+02, 0.000000000000000e+00, 2.039738987128231e+02, 2.624142814628438e+04, 0.000000000000000e+00, 3.650089864405564e+04, 5.630181934182878e+03, 0.000000000000000e+00, 5.541874908277977e+03, 2.400226539851705e+00, 0.000000000000000e+00, 2.288170793212553e+00, 6.390612919711641e+03, 0.000000000000000e+00, 2.605408045539480e+03, 4.746374961912780e+03, 0.000000000000000e+00, 2.605408045534779e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_scanl_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_scanl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 2.505536189268950e-03, 2.497156439395187e-03, 2.507493329036005e-03, 2.497781765341081e-03, 2.536776376139537e-03, 2.540293498205946e-03, 2.554412674752679e-03, 2.548798037336080e-03, 2.500818659738504e-03, 2.572947551714251e-03, 2.500818659738504e-03, 2.572947551714251e-03, 3.786247839501456e-03, 3.893896988803008e-03, 3.765875528174105e-03, 3.870846954421252e-03, 3.366982576136326e-03, 3.487969879415866e-03, 4.190146845348691e-03, 4.312532998741060e-03, 3.801976570571718e-03, 4.974173613725910e-03, 3.801976570571718e-03, 4.974173613725910e-03, 1.654277970593505e-02, 3.338974409097156e-02, 8.591451570784970e-03, 3.290291524731868e-02, 5.196320933572735e-04, 7.966612596534813e-04, 3.103357437251630e-03, 8.330417255290448e-03, 4.134021800697941e-02, 3.104710641291760e-04, 4.134021800697928e-02, 3.104710641291758e-04, -5.797829953040539e-07, -6.183705012000527e-07, -6.487334923207793e-07, -6.987237027090622e-07, 1.657303977398327e-05, 2.679333772147314e-05, -3.226451296644870e-07, -3.037496618293793e-07, -5.388099585162672e-07, -5.940097663900746e-07, -5.388099585162740e-07, -5.940097663901560e-07, -3.862768768075720e-06, 5.971654458746951e-06, 1.146218538010495e-04, 1.176064636905590e-04, 0.000000000000000e+00, 0.000000000000000e+00, -1.115343581850288e-05, -1.117934214203376e-05, 0.000000000000000e+00, 0.000000000000000e+00, 8.862011578882860e-04, 7.058251689505191e-04, -5.303498447059515e-06, -4.963664742057682e-06, 6.606649843979048e-04, 6.651450741197081e-04, 4.201408398264602e-03, 4.231596864515938e-03, 3.957953775843549e-03, 4.143380623490243e-03, 4.322703480843660e-03, 4.299610198110922e-03, 0.000000000000000e+00, 2.199159121697860e-05, -8.131654276070748e-05, -7.980919771035162e-05, 1.387624714605624e-04, 1.292828063235194e-04, -8.195318816024724e-05, -8.140769004226357e-05, 9.156158209684908e-03, 6.443939592907206e-03, 2.900352089461862e-04, 2.453282937370109e-04, 6.668820981635629e-03, 6.265554167718298e-03, 0.000000000000000e+00, 0.000000000000000e+00, -3.673554756783454e-05, -3.639883379166052e-05, 0.000000000000000e+00, 0.000000000000000e+00, 2.678376970757250e-03, 2.679775994617111e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -4.580975765170275e-07, -4.480395635958964e-07, -2.723408729600969e-12, -3.007067318116416e-12, -9.001903371777560e-12, -6.217936268431454e-11, 0.000000000000000e+00, 0.000000000000000e+00, -7.810119564416706e-07, -1.135794321660704e-06, -7.371470721315641e-08, -3.487194399624863e-07, -4.960922903290906e-12, -4.876984026589413e-12, -3.516978320665856e-11, -3.518937948866745e-11, -1.086366671481246e-13, -1.080694441856077e-13, -6.171948071004156e-09, -7.189756327049163e-09, -4.470163845987884e-10, -3.198492740454989e-10, -3.257910396957027e-14, -3.257768602112263e-14, -3.322366707457199e-13, -3.158550970628123e-13, 1.177513674070833e-02, 1.131860511136928e-02, -6.950738953756319e-05, -7.153820073339341e-05, 0.000000000000000e+00, 0.000000000000000e+00, 7.814218124553671e-03, 7.861631395045825e-03, -7.988186586960898e-05, -8.007990267218666e-05, -1.000423992006161e-04, -1.011171930719779e-04, 0.000000000000000e+00, 0.000000000000000e+00, -2.268626507513752e-05, -2.307484244627019e-05, 0.000000000000000e+00, 0.000000000000000e+00, 1.106800669844899e-03, 1.059560887203302e-03, 5.686570184994209e-03, 5.175486293581342e-03, 1.868907944142655e-02, 1.878698655582296e-02, 0.000000000000000e+00, 0.000000000000000e+00, 3.541661094753941e-05, 1.257344996698789e-05, 4.699770569370323e-04, 2.690206519222547e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -5.403888187098617e-08, -9.359275754601917e-09, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -3.860146076329824e-07, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
