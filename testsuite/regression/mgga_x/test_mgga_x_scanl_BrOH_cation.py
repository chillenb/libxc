
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_scanl_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_scanl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.221803160277508e+01, -2.221804189451236e+01, -2.221818956083446e+01, -2.221803474726252e+01, -2.274455990829856e+01, -2.274455990829856e+01, -3.746419840963712e+00, -3.788781067767232e+00, -3.789062922660022e+00, -3.785737184348518e+00, -3.746614786400614e+00, -3.788874291619534e+00, -7.307863017195207e-01, -7.299834931918350e-01, -7.106039821003214e-01, -7.164869654195771e-01, -7.136934102209059e-01, -7.167543078074442e-01, -1.848500162832601e-01, -1.879532094098479e-01, -8.509985876516242e-01, -1.432675711399805e-01, -1.812245764800494e-01, -1.802812159884666e-01, -4.831595570602168e-03, -3.235815826008796e-03, -3.820075942861595e-02, -2.471157938464564e-03, -4.962334630066734e-03, -2.321945984311900e-03, -5.672600085168801e+00, -5.475400899242194e+00, -5.672651959349361e+00, -5.673571272615735e+00, -5.673125868599428e+00, -5.476048386143894e+00, -2.125212210997748e+00, -2.140832265646797e+00, -2.120930661127320e+00, -2.127240903475222e+00, -2.146247264612791e+00, -2.139643915575011e+00, -6.392432182789721e-01, -6.462107204536811e-01, -5.918758968438186e-01, -5.818143750767671e-01, -6.503928347033312e-01, -6.503928347033312e-01, -9.135302941229259e-02, -1.889846202731029e-01, -9.213775200114224e-02, -1.839874017308890e+00, -1.169116576358870e-01, -1.136425233979884e-01, -1.826818046150014e-03, -3.709028205575127e-03, -2.016000305590413e-03, -6.188688348471526e-02, -3.568059111878118e-03, -3.568059111878119e-03, -5.965436107653102e-01, -6.007909171415531e-01, -5.992712981007235e-01, -6.410294316270490e-01, -5.986988100510596e-01, -6.404949195186695e-01, -6.249364186342161e-01, -5.364649909212400e-01, -5.617648073266222e-01, -5.868560088335203e-01, -5.637205732052051e-01, -5.740407204582494e-01, -7.280308747409774e-01, -2.360350961384786e-01, -2.867615289062423e-01, -3.778534238287382e-01, -3.293791755501025e-01, -3.293791755501025e-01, -4.929136611322526e-01, -3.111373129184609e-02, -4.580363684953172e-02, -3.641000070031878e-01, -7.891630680087461e-02, -7.891630680087461e-02, -6.514489581850727e-03, -9.913377696918121e-04, -1.250707856250570e-03, -7.026584496094537e-02, -3.276646272115884e-03, -2.752532411896124e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_scanl_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_scanl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.497873983350862e+01, -2.497869911550474e+01, -2.497871140554985e+01, -2.497867840646218e+01, -2.497878202910972e+01, -2.497873423051909e+01, -2.497910098569642e+01, -2.497914212056640e+01, -2.497871476006362e+01, "nan", -2.497871476006362e+01, "nan", -4.294371259822197e+00, "nan", "nan", "nan", "nan", "nan", "nan", "nan", -4.294118885586824e+00, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", -9.333289197842199e-01, "nan", "nan", -2.516605080981123e-01, -2.612120975367642e-01, -2.546275835918736e-01, -2.656462329919715e-01, -1.124242449845535e+00, "nan", "nan", "nan", "nan", "nan", "nan", -1.414325376975152e-01, -4.532704463619854e-03, "nan", -4.837067332962662e-03, "nan", "nan", "nan", -2.292370740832619e-03, "nan", "nan", -1.993078489753162e-03, -3.902162968819100e-03, "nan", "nan", "nan", -5.920063691047769e+00, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", -5.919338835781759e+00, "nan", -2.871145081920857e+00, "nan", -2.891101905342413e+00, "nan", "nan", -2.872813412767281e+00, "nan", "nan", "nan", -2.895012351124229e+00, "nan", "nan", "nan", -7.824304718663180e-01, "nan", "nan", "nan", "nan", -6.533721737279516e-01, "nan", "nan", "nan", "nan", -1.219783140580188e-01, "nan", "nan", "nan", "nan", "nan", -2.239055195263473e+00, -2.238288586234519e+00, "nan", "nan", "nan", -1.639583646902400e-01, "nan", -1.666061431540450e-03, "nan", "nan", -1.737149148263775e-03, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", -7.218548605628562e-01, -6.814132561795631e-01, "nan", -6.940787974436570e-01, "nan", "nan", "nan", -6.998129768645338e-01, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", -6.258104961534493e-01, "nan", "nan", "nan", "nan", "nan", "nan", -3.257374654388741e-01, "nan", "nan", "nan", -5.104093121734216e-01, "nan", "nan", "nan", "nan", "nan", -6.638655648736598e-01, "nan", -4.197070455249415e-02, -6.391656714075424e-02, "nan", -4.517150162264776e-01, "nan", "nan", "nan", "nan", "nan", "nan", -7.429728406225076e-03, "nan", "nan", "nan", -1.147108841895634e-03, "nan", -1.010319389407265e-01, "nan", "nan", -1.665540510948281e-03, "nan"]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_scanl_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_scanl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.352234159464270e-08, 0.000000000000000e+00, -2.352253822014926e-08, -2.352299462660073e-08, 0.000000000000000e+00, -2.352301276385637e-08, -2.352374569274333e-08, 0.000000000000000e+00, -2.352446447714351e-08, -2.351639432341309e-08, 0.000000000000000e+00, -2.351508357983461e-08, -2.352279841403409e-08, 0.000000000000000e+00, "nan", -2.352279841403409e-08, 0.000000000000000e+00, "nan", -2.061265972152403e-05, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", -2.060626725523473e-05, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 9.711448924031622e-04, "nan", 0.000000000000000e+00, "nan", 1.617625503556723e-01, 0.000000000000000e+00, 1.431493020659085e-01, 1.568384512592115e-01, 0.000000000000000e+00, 1.361382302456944e-01, 4.194850581621577e-04, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 8.828249840258316e-01, 3.841749810348828e+02, 0.000000000000000e+00, "nan", 3.629536846687012e+02, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", 9.087551840202020e+02, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 2.162815144602112e+03, 4.720875882520538e+02, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", -9.100772068212530e-06, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, -9.082072008770307e-06, "nan", 0.000000000000000e+00, 1.087959678438165e-05, "nan", 0.000000000000000e+00, 1.057187040156363e-05, "nan", 0.000000000000000e+00, "nan", 1.086914549411472e-05, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", 1.049533199257152e-05, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", -9.587280497312126e-03, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, -7.722552644547818e-02, "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", 8.099919922314771e-01, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", -6.115612212509407e-04, 0.000000000000000e+00, -6.124728206523706e-04, "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 6.202898277542245e-01, "nan", 0.000000000000000e+00, 1.565444190032018e+03, "nan", 0.000000000000000e+00, "nan", 4.776022624059414e+03, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, -4.299235404420416e-02, -7.118593445938348e-02, 0.000000000000000e+00, "nan", -6.584959100362794e-02, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", -6.233202515725982e-02, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", -5.469487741748510e-02, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 5.734386249896779e-02, "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 1.067904813712268e-02, "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 2.878434724227392e-03, "nan", 0.000000000000000e+00, 9.493451475810458e+00, 5.420262818765440e+00, 0.000000000000000e+00, "nan", -8.214400296079756e-02, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 1.662600948541572e+02, "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 4.485334977871827e+03, "nan", 0.000000000000000e+00, 2.288170793212553e+00, "nan", 0.000000000000000e+00, "nan", 5.135367392605768e+03, 0.000000000000000e+00, "nan"]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_scanl_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_scanl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [3.249678689656594e-04, 3.249692134436001e-04, 3.249785683741750e-04, 3.249769882472823e-04, 3.249969005043278e-04, 3.250077189343096e-04, 3.248763408850583e-04, 3.248539262035223e-04, 3.249750501093978e-04, "nan", 3.249750501093978e-04, "nan", 1.292898842972035e-03, "nan", "nan", "nan", "nan", "nan", 0.000000000000000e+00, "nan", 1.291976458582005e-03, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.713725025050648e-05, "nan", "nan", "nan", "nan", "nan", "nan", 0.000000000000000e+00, 8.432766288525299e-05, "nan", 9.414535980914606e-05, 0.000000000000000e+00, "nan", "nan", 3.682625199816027e-05, "nan", "nan", 5.383662117569114e-05, 7.032677421563299e-05, "nan", "nan", "nan", 1.753911398924607e-03, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 1.749396748145881e-03, "nan", 0.000000000000000e+00, "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", "nan", 0.000000000000000e+00, "nan", "nan", "nan", -6.869055726383098e-63, "nan", "nan", "nan", "nan", 1.889541890258071e-02, "nan", "nan", "nan", "nan", -6.747480770731561e-65, "nan", "nan", "nan", "nan", "nan", 5.358068138061585e-03, 5.357591750211139e-03, "nan", "nan", "nan", 0.000000000000000e+00, "nan", 2.889651661111087e-05, "nan", "nan", 7.478000047754605e-05, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 8.602202424555767e-03, 1.768997729313746e-02, "nan", 1.581068691424883e-02, "nan", "nan", "nan", 1.463929781731323e-02, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 1.147220126089049e-02, "nan", "nan", "nan", "nan", "nan", "nan", 0.000000000000000e+00, "nan", "nan", "nan", 0.000000000000000e+00, "nan", "nan", "nan", "nan", "nan", 1.043844152353419e-04, "nan", 5.489172232187147e-66, 0.000000000000000e+00, "nan", 5.098240377369917e-03, "nan", "nan", "nan", "nan", "nan", "nan", 1.439126326168412e-04, "nan", "nan", "nan", 3.012386395158427e-05, "nan", 0.000000000000000e+00, "nan", "nan", 7.230499145655739e-05, "nan"]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_scanl_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_scanl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
