
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ms1_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.076366119509406e+01, -2.076378745435683e+01, -2.076433914505243e+01, -2.076246544843894e+01, -2.076344850325109e+01, -2.076344850325109e+01, -3.185585183749614e+00, -3.185662751047671e+00, -3.187745848565482e+00, -3.187196834236504e+00, -3.186924811114177e+00, -3.770866893590292e+00, -5.685358805930437e-01, -7.485032227656708e-01, -7.338805340127638e-01, -7.374866285154582e-01, -7.367574131656672e-01, -7.367574131656672e-01, -1.978446631375501e-01, -2.002687457876945e-01, -6.447261317989869e-01, -1.580134867337054e-01, -1.735965246474191e-01, -1.735965246474191e-01, -7.852829800218678e-03, -8.265049317303638e-03, -4.524601972415986e-02, -4.536391422539988e-03, -5.699829743544643e-03, -5.699829743544643e-03, -5.492362693105258e+00, -5.492944068240599e+00, -5.492388315680868e+00, -5.238805079330655e+00, -5.492657770122594e+00, -5.492657770122594e+00, -1.754373105777990e+00, -1.775511230914474e+00, -1.738451517037298e+00, -1.757298331962000e+00, -1.773832774546183e+00, -2.148353437990321e+00, -6.280210584104068e-01, -6.747572779170797e-01, -5.863385566982394e-01, -6.038727612087893e-01, -6.367290905761686e-01, -5.551230543631422e-01, -7.414633282474148e-02, -2.035465450151798e-01, -6.858608978458243e-02, -2.047547559687098e+00, -1.304693359315538e-01, -1.304693359315538e-01, -2.180976595828979e-03, -4.434769090409545e-03, -3.390835137110337e-03, -4.611647528393159e-02, -2.545485177404448e-03, -4.084966819626904e-03, -6.173859598582122e-01, -6.155147365956171e-01, -6.087525144154031e-01, -6.167168023892891e-01, -6.164467004606704e-01, -6.164467004606704e-01, -6.008767340232233e-01, -5.297454872006653e-01, -5.499482492678867e-01, -5.699855321715945e-01, -5.597474332949000e-01, -5.020401294325780e-01, -7.093556312474776e-01, -1.808464653938268e-01, -2.958763795439088e-01, -3.108895742163768e-01, -3.341426315852659e-01, -3.341426315852659e-01, -4.167697688440468e-01, -4.333269609071802e-02, -5.876134194982912e-02, -3.626204201378289e-01, -5.873609241866722e-02, -9.077595015521352e-02, -1.108129045585368e-02, -1.185540612086728e-03, -2.488387595747992e-03, -8.546424825947301e-02, -3.779860813432987e-03, -3.779860813432984e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ms1_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.135997260763062e+01, -3.136010591084702e+01, -3.136070691607153e+01, -3.135872579513156e+01, -3.135976306243208e+01, -3.135976306243208e+01, -4.697466005089716e+00, -4.697237636856711e+00, -4.691154900927146e+00, -4.694071970199277e+00, -4.693273621330578e+00, -4.713747017963534e+00, -8.310004529716023e-01, -9.044523436875037e-01, -8.817595354065707e-01, -8.883405808896206e-01, -8.869352931379373e-01, -8.869352931379373e-01, -2.356684845572100e-01, -2.388627857288747e-01, -8.918867948484211e-01, -1.890821105754932e-01, -2.060047088952141e-01, -2.060047088952144e-01, -1.046310233724020e-02, -1.101133525704935e-02, -5.937870050791398e-02, -6.047308751229787e-03, -7.596935019888102e-03, -7.596935019888102e-03, -7.181540250352104e+00, -7.183334693491423e+00, -7.181633319562918e+00, -7.583186148408193e+00, -7.182444378390622e+00, -7.182444378390622e+00, -2.678184854163381e+00, -2.701797750987709e+00, -2.657566655489136e+00, -2.681890007327846e+00, -2.699858162803185e+00, -2.664669166228404e+00, -8.006065623494639e-01, -8.766046072402024e-01, -7.371668430062326e-01, -7.702296514084757e-01, -8.146748718162135e-01, -7.781703803014342e-01, -9.898898701774683e-02, -2.414798354515631e-01, -9.153699741941457e-02, -2.625385195563295e+00, -1.576459540613649e-01, -1.576459540613650e-01, -2.907968797571194e-03, -5.911959741949821e-03, -4.519759333704199e-03, -6.150393060727852e-02, -3.393980263435686e-03, -5.445155568479636e-03, -8.186419003912354e-01, -8.118685756584305e-01, -8.270539704914771e-01, -8.162022647066826e-01, -8.152169374372470e-01, -8.152169374372470e-01, -7.961644963551839e-01, -6.698864116013423e-01, -7.051924312754031e-01, -7.410363826987860e-01, -7.226385083545406e-01, -7.570496691985668e-01, -9.170300530867680e-01, -2.507797349440353e-01, -3.557334438967712e-01, -4.750646200038107e-01, -4.079374882700282e-01, -4.079374882700281e-01, -6.061262121710570e-01, -5.693342000550796e-02, -7.644267331912800e-02, -4.546591269425753e-01, -7.838502243449409e-02, -1.135105804256431e-01, -1.476081170719669e-02, -1.580698277403203e-03, -3.317497304735012e-03, -1.072669199197132e-01, -5.038427076619868e-03, -5.038427076619849e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms1_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.761030096052940e-08, -1.761029846860345e-08, -1.761014810707360e-08, -1.761019851808079e-08, -1.761019321770110e-08, -1.761019321770110e-08, -1.195464680529347e-05, -1.195152357704872e-05, -1.186659992144147e-05, -1.189701501901373e-05, -1.189872562987511e-05, -2.221146837670541e-06, -7.884792819899993e-03, -1.164246330274744e-03, -1.186537047374072e-03, -1.197288010988442e-03, -1.194364790527587e-03, -1.194364790527587e-03, -1.948858101389905e-01, -1.910264098938767e-01, -3.919016676556684e-03, -2.328706410508217e-01, -2.314158543673113e-01, -2.314158543673052e-01, -1.075187301962121e+00, -1.120067563147741e+00, -5.085591963516966e-01, -7.900882650902106e-01, -1.099286830911241e+00, -1.099286830911241e+00, -5.691384563279712e-07, -5.690966985526027e-07, -5.691393182443800e-07, -4.714594649305516e-06, -5.691160231048921e-07, -5.691160231048921e-07, -1.293183766327180e-04, -1.255286180465070e-04, -1.317018560330316e-04, -1.287670740684948e-04, -1.258957358361245e-04, -2.035594621597965e-05, -3.102180075065933e-03, -2.458246695589403e-03, -3.888593578987307e-03, -3.635102477659236e-03, -2.969718115045800e-03, -1.272229816400994e-02, -2.094423723266738e+01, -1.258789792160762e-01, -2.859903283890262e+01, -2.795208693916244e-05, -3.736141636846970e-01, -3.736141636846899e-01, -2.794760191470174e+07, -6.984712289394591e-01, -5.645663609937748e+00, -1.398309235381327e+02, -1.506143255395106e+07, -2.166799176605134e+00, -3.680280543471038e-03, -3.682513422941023e-03, -1.646613648615053e-02, -3.681177172778713e-03, -3.681447929157991e-03, -3.681447929157991e-03, -4.095254025092173e-03, -5.962664749644749e-03, -5.372087302115586e-03, -4.837114344169494e-03, -5.104278522449186e-03, -4.122919946316930e-02, -1.986423478496921e-03, -6.370623358611871e-01, -4.526518371115353e-02, -1.296853350390884e-01, -3.179842134964503e-02, -3.179842134964513e-02, -3.931142794420849e-02, -5.189276503699831e-01, -4.364336799874169e-01, -2.629759064027697e-02, -5.316743584846023e+01, -5.691090776273369e-01, -5.133411602246393e-01, -8.556725446384700e-01, -2.452646352734185e+00, -6.354651447460056e-01, -3.088097190603670e+00, -3.088097190692960e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms1_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.154821896679241e-03, 2.154856126532215e-03, 2.154990163979442e-03, 2.154483573645795e-03, 2.154751784665988e-03, 2.154751784665988e-03, 3.383350415880093e-03, 3.381726912959319e-03, 3.337585830285466e-03, 3.355418905932337e-03, 3.353874654945665e-03, -1.234143305225647e-17, 6.962823469864713e-03, -5.111666935161406e-17, -2.206694428037388e-17, 1.169583314690451e-18, -2.754933589940656e-17, -2.754933589940656e-17, 1.024245706947792e-16, -9.566826291288754e-17, 1.308552738340503e-03, 4.130632466812109e-16, 3.231464502272387e-16, 1.873564754893204e-17, 2.249858725935622e-17, -3.824995979172493e-18, 8.554876905251367e-17, 1.255675527707994e-17, -7.650197376223490e-18, -7.650197376223490e-18, -1.615630378948639e-18, 1.851733660525072e-19, -9.272717509939454e-20, 8.678558289541543e-03, -1.477800332578913e-18, -1.477800332578913e-18, 6.532951141496932e-03, 6.621149525995166e-03, 6.402182306462411e-03, 6.545773191130247e-03, 6.620430481043247e-03, 6.305997756386487e-19, 2.106183138964568e-17, 1.842894275998543e-17, -4.125796619200074e-17, 3.393068421153126e-17, 2.441323878159366e-17, 1.770899001659681e-02, 6.944701936792697e-05, 1.764490085190537e-16, 4.930698225266540e-05, -2.172162719594638e-18, 2.473499298684528e-16, 1.056215484115359e-16, 1.819412049777981e-12, -5.308415226519688e-18, 1.311240728743210e-17, 9.518021546043166e-06, 3.110425501653662e-11, 4.218000699302453e-17, -1.626709750121760e-18, 7.326411263084951e-18, 3.975613849244453e-02, -1.525465770474849e-20, 1.690100051148061e-18, 1.690100051148061e-18, -3.733314157601472e-18, -4.626771373091584e-18, 9.032726962194712e-18, -1.302162209641191e-17, 1.197229018247120e-17, 7.015017024306842e-02, 1.260870301269328e-19, 5.162209400428517e-03, 1.219285354632002e-16, 3.622231478119681e-02, -1.649560219763861e-17, 3.004422870951765e-17, 2.336680725191804e-02, 1.914914070397497e-16, -2.673049687023717e-16, 2.985012778532909e-17, 5.104067396040898e-05, 3.001134472286347e-16, -4.800834192139139e-17, 3.535698359072076e-19, -4.978588626007247e-19, 1.574099609764099e-16, -8.739632197783916e-18, 2.587157087098372e-17])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
