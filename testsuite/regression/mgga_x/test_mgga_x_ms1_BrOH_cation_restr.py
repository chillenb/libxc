
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ms1_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.260389898490732e+01, -2.260395409003119e+01, -2.260423894968443e+01, -2.260341870428203e+01, -2.260384281931879e+01, -2.260384281931879e+01, -3.371089862246104e+00, -3.371101379409206e+00, -3.371625030001331e+00, -3.372976497821528e+00, -3.371947153692875e+00, -3.371947153692875e+00, -6.425705130702956e-01, -6.422090447535288e-01, -6.358821098409475e-01, -6.454062700308176e-01, -6.423548248378662e-01, -6.423548248378662e-01, -1.950686848664945e-01, -1.965531549379104e-01, -7.117062265622196e-01, -1.522871512847779e-01, -1.676083419501564e-01, -1.676083419501564e-01, -7.852803613771388e-03, -8.264994507312377e-03, -4.519193117052165e-02, -4.536335850580477e-03, -5.699752594734439e-03, -5.699752594734439e-03, -5.492012676132951e+00, -5.492598262813325e+00, -5.492045744392652e+00, -5.492562604280062e+00, -5.492306165786753e+00, -5.492306165786753e+00, -2.104405045099386e+00, -2.124695857254456e+00, -2.102068450930007e+00, -2.119632097745801e+00, -2.116993801597666e+00, -2.116993801597666e+00, -6.034502316951897e-01, -6.478142543669952e-01, -5.330329175906973e-01, -5.386917821577449e-01, -6.149680953252080e-01, -6.149680953252080e-01, -1.122838805887355e-01, -1.993059545779411e-01, -1.045277346240250e-01, -1.841289733821347e+00, -1.280600511630176e-01, -1.280600511630176e-01, -3.500209794647859e-03, -4.434651261853636e-03, -3.390763308124226e-03, -7.203026214693882e-02, -4.084825483116849e-03, -4.084825483116849e-03, -6.163149327798102e-01, -6.145003771727475e-01, -6.151422196214728e-01, -6.156658005779398e-01, -6.154033798186588e-01, -6.154033798186588e-01, -5.981728919197833e-01, -5.286343771469757e-01, -5.483406815558596e-01, -5.678756409889457e-01, -5.577361517227413e-01, -5.577361517227413e-01, -6.679174193977392e-01, -2.487933498677649e-01, -2.879037352798108e-01, -3.521047618077969e-01, -3.204457048038014e-01, -3.204457048038014e-01, -4.759301685594950e-01, -4.330611037161219e-02, -5.861593493154432e-02, -3.404952555641181e-01, -8.985022648637021e-02, -8.985022648637024e-02, -1.107961873263122e-02, -1.185527165995483e-03, -2.488379037643149e-03, -8.489136898054976e-02, -3.779765475775677e-03, -3.779765475775674e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ms1_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.919468559712658e+01, -2.919478970577439e+01, -2.919534196295429e+01, -2.919379679570331e+01, -2.919459363712024e+01, -2.919459363712024e+01, -4.254293515930912e+00, -4.254579874257587e+00, -4.262570114477711e+00, -4.262447708986095e+00, -4.260866309653156e+00, -4.260866309653156e+00, -8.059350735113097e-01, -8.039939824903213e-01, -7.600579795216863e-01, -7.766701053430048e-01, -7.731193920844838e-01, -7.731193920844838e-01, -1.802576962671275e-01, -1.792097011872045e-01, -8.404482281611857e-01, -1.644707611385683e-01, -1.797155401459676e-01, -1.797155401459676e-01, -1.046298885909585e-02, -1.101110520077826e-02, -5.914239895292225e-02, -6.047086143708694e-03, -7.596624920823141e-03, -7.596624920823141e-03, -7.179521166727569e+00, -7.181358577906571e+00, -7.179656849541870e+00, -7.181276428079376e+00, -7.180426391661219e+00, -7.180426391661219e+00, -2.360600405498225e+00, -2.422457535737463e+00, -2.362768987668303e+00, -2.423565464548798e+00, -2.394856046163067e+00, -2.394856046163067e+00, -7.730654856942921e-01, -8.990258502875609e-01, -6.923245099333860e-01, -7.595099788871839e-01, -7.928980550995363e-01, -7.928980550995363e-01, -1.339169692602272e-01, -1.829436585001927e-01, -1.261917998707571e-01, -2.670964329134675e+00, -1.413659140787625e-01, -1.413659140787625e-01, -4.666228457996167e-03, -5.911488252186600e-03, -4.519471501704019e-03, -9.105199732180692e-02, -5.444589824757111e-03, -5.444589824757111e-03, -8.194152887892669e-01, -8.111289904630807e-01, -8.140142356857609e-01, -8.164203172966753e-01, -8.152136267456704e-01, -8.152136267456704e-01, -7.997761490931014e-01, -6.556327878326947e-01, -6.933889600952801e-01, -7.343445211741098e-01, -7.126541055204836e-01, -7.126541055204836e-01, -9.473683154538914e-01, -2.363822258973458e-01, -2.721444535769354e-01, -4.139361797323737e-01, -3.322572180098121e-01, -3.322572180098120e-01, -5.569219609842629e-01, -5.680581115687498e-02, -7.580298174443402e-02, -4.182028265113165e-01, -1.090604037630641e-01, -1.090604037630642e-01, -1.475411288605922e-02, -1.580644494293547e-03, -3.317463018516524e-03, -1.036464449238212e-01, -5.038045275706295e-03, -5.038045275706291e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms1_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.261341279133063e-09, -3.261249651571236e-09, -3.260146615912987e-09, -3.261481151352251e-09, -3.260881458203719e-09, -3.260881458203719e-09, -8.341468091052531e-06, -8.350469357486397e-06, -8.604566921775496e-06, -8.632320543598734e-06, -8.576139550974994e-06, -8.576139550974994e-06, -6.475482517499587e-03, -6.471701657626682e-03, -6.312808865591307e-03, -6.380598017934011e-03, -6.384015476768101e-03, -6.384015476768101e-03, -1.306559541647792e+00, -1.381075068464335e+00, -2.817836516345216e-03, -7.219707380831684e-01, -6.914051236945707e-01, -6.914051236945696e-01, -1.096028933511479e+00, -1.157886010142644e+00, -6.685546041875877e-01, -9.947949518017869e-01, -1.264281623793617e+00, -1.264281623793620e+00, -5.954895485408250e-07, -5.951172164469060e-07, -5.949399878252935e-07, -5.946351747329100e-07, -5.955740099635093e-07, -5.955740099635093e-07, -1.200262866626687e-04, -1.033456510274990e-04, -1.102681822014468e-04, -9.413046201397235e-05, -1.151993879790865e-04, -1.151993879790865e-04, -2.486830532124479e-02, -1.944752602036958e-02, -2.713104491882005e-02, -2.404745829402133e-02, -2.258156220693723e-02, -2.258156220693723e-02, -5.769548425515592e-01, -7.837588393004156e-01, -6.041355705059340e-01, -2.175109287961736e-04, -1.171034732859008e+00, -1.171034732859010e+00, -1.310595009912090e+00, -1.170813556554887e+00, -7.354355072135865e+00, -8.001390848899304e-01, -3.422382845678865e+00, -3.422382845678857e+00, -6.913422012295310e-03, -6.838765017675544e-03, -6.865529241927328e-03, -6.888080153262607e-03, -6.878541313279419e-03, -6.878541313279419e-03, -1.143092504827033e-02, -1.310950050720281e-02, -1.317231916545106e-02, -1.279606719171494e-02, -1.350977112905587e-02, -1.350977112905588e-02, -1.764631055576994e-02, -4.276754085732518e-01, -3.490254708726314e-01, -1.480078063314591e-01, -2.599887890175109e-01, -2.599887890175109e-01, -5.865660620230481e-02, -6.130500305616197e-01, -6.204410914809069e-01, -2.266350007486607e-01, -1.017432345206545e+00, -1.017432345206544e+00, -8.839669465258798e-01, -5.743556633024207e+00, -2.780106002996142e+00, -1.200559786455181e+00, -4.322673706931182e+00, -4.322673706931191e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms1_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms1_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.018644784639377e-04, 2.018544672332993e-04, 2.017064390149083e-04, 2.018509297948477e-04, 2.017900442433445e-04, 2.017900442433445e-04, 2.110483572547326e-03, 2.116536051732472e-03, 2.288595458522105e-03, 2.315095426210452e-03, 2.271577950980984e-03, 2.271577950980984e-03, 1.247675979791817e-02, 1.239460365576985e-02, 1.060005762157976e-02, 1.227267616299413e-02, 1.185042643964638e-02, 1.185042643964638e-02, 8.808355900747512e-02, 9.786322231740219e-02, 1.755753477467200e-03, 9.108416321837180e-03, 1.478873392019058e-02, 1.478873392019053e-02, 1.099686287926736e-09, 3.197674639922493e-10, 8.531796187012181e-07, 2.003996471693934e-15, 1.389726898335939e-13, 1.389726898244132e-13, 5.833599000027019e-05, 5.763598324344943e-05, 5.711938459728714e-05, 5.655421497996077e-05, 5.858878245234763e-05, 5.858878245234763e-05, 1.138108788005382e-02, 9.760066133381786e-03, 1.011915734274794e-02, 8.520898484699488e-03, 1.108343265692882e-02, 1.108343265692882e-02, 6.547594961039806e-02, 6.559332033446208e-02, 4.816975530383669e-02, 4.515768123517971e-02, 6.224967340771372e-02, 6.224967340771372e-02, 7.270936854449036e-04, 5.010792674481679e-02, 3.760683249443235e-04, 1.766997698769800e-02, 1.125449635816960e-02, 1.125449635816963e-02, 4.250502332662395e-18, 1.737366025211188e-16, 1.402380373638354e-14, 2.687190484579027e-05, 1.836765720912383e-15, 1.836765717149487e-15, 1.033425083203863e-02, 9.918449698301319e-03, 1.006516671215857e-02, 1.018824310535864e-02, 1.013204885800420e-02, 1.013204885800420e-02, 2.146863443973723e-02, 1.330001434857810e-02, 1.663464636091831e-02, 1.931867850275146e-02, 1.909962643302051e-02, 1.909962643302053e-02, 6.821671074094977e-02, 5.748555704456736e-02, 8.279536609605233e-02, 7.224580627418542e-02, 9.253802085891666e-02, 9.253802085891663e-02, 7.112046411731933e-02, 4.170287025371368e-06, 4.071035916535300e-06, 1.082537688041878e-01, 6.530490913198026e-04, 6.530490913197940e-04, 2.794267635812358e-13, 4.088609432700492e-22, 7.913606305847312e-16, 1.518641012802683e-03, 4.524489836051026e-15, 4.524489838528381e-15]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
