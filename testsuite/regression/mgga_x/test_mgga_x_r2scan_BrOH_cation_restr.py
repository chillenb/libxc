
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_r2scan_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.170118473959021e+01, -2.170130437325252e+01, -2.170183111849915e+01, -2.170005522448575e+01, -2.170098644021385e+01, -2.170098644021385e+01, -3.038788789372974e+00, -3.038913708177608e+00, -3.042271157209254e+00, -3.041187217159286e+00, -3.040987287658321e+00, -3.766325441934736e+00, -5.310097880717942e-01, -7.194181627176343e-01, -6.985863068674087e-01, -7.052126301367840e-01, -7.037928610605996e-01, -7.037928610605996e-01, -1.844445176345545e-01, -1.874540182037779e-01, -5.956302386932534e-01, -1.361348958646294e-01, -1.550772367155599e-01, -1.550772367155599e-01, -3.266592248877516e-03, -3.512129854117033e-03, -2.983887182016579e-02, -1.499012184282194e-03, -2.117620244635245e-03, -2.117620244635245e-03, -5.669020238107875e+00, -5.670113867240779e+00, -5.669075127231132e+00, -5.434081705850260e+00, -5.669572219297150e+00, -5.669572219297150e+00, -1.660647689479467e+00, -1.682169225262645e+00, -1.644539907257742e+00, -1.663576593000823e+00, -1.680485159869410e+00, -2.130338031114095e+00, -6.372884967710133e-01, -6.936736504139552e-01, -5.885323787494607e-01, -6.130235478238717e-01, -6.478475773775266e-01, -5.728570700138857e-01, -6.695256595206162e-02, -1.823822910979960e-01, -6.187657095235120e-02, -2.086482294341687e+00, -1.096591404144310e-01, -1.096591404144310e-01, -1.955295467192375e-03, -1.435447759839265e-03, -1.209202939332979e-03, -4.147936162524839e-02, -2.282112994589390e-03, -1.427901351070340e-03, -6.423222446650778e-01, -6.385457484253162e-01, -6.294919679163506e-01, -6.409770585945976e-01, -6.404297020408238e-01, -6.404297020408238e-01, -6.249027054028327e-01, -5.342430517468889e-01, -5.604301062593527e-01, -5.862388968371893e-01, -5.730819819835090e-01, -5.255965782490410e-01, -7.269126642340168e-01, -1.671884571474826e-01, -2.819955461907219e-01, -2.941624809323540e-01, -3.257144272995348e-01, -3.257144272995348e-01, -3.988860267785309e-01, -2.831373003341612e-02, -4.085366351593658e-02, -3.631370888591166e-01, -5.297767414868954e-02, -7.101296358457462e-02, -4.869645795054215e-03, -2.266195359241893e-04, -7.258370710918888e-04, -6.631515269511655e-02, -1.326719251986705e-03, -1.326719251986691e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_r2scan_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.211322121518084e+01, -3.211327569042703e+01, -3.211355962061894e+01, -3.211274587376291e+01, -3.211316639912725e+01, -3.211316639912725e+01, -4.804838654428106e+00, -4.805156620368974e+00, -4.813648010825020e+00, -4.810646464835225e+00, -4.810468112059104e+00, -4.685435265965932e+00, -7.947035025412736e-01, -8.331608187776699e-01, -7.907395517682518e-01, -8.071198035556483e-01, -8.035229591052006e-01, -8.035229591052006e-01, -1.967781520583610e-01, -2.025200370916632e-01, -8.434898051768447e-01, -8.923677954290726e-02, -1.372586987714879e-01, -1.372586987714880e-01, 1.594245287320886e-01, 1.672697410884353e-01, 2.410078308941786e-01, 8.448498393199873e-02, 1.133211707676418e-01, 1.133211707676418e-01, -7.404911562068323e+00, -7.407332312475532e+00, -7.405040402608513e+00, -7.726854142649186e+00, -7.406129794418293e+00, -7.406129794418293e+00, -2.590547289367115e+00, -2.626552476552965e+00, -2.565653847350210e+00, -2.595238023084484e+00, -2.623703383227524e+00, -2.619621556810499e+00, -8.118589600894853e-01, -9.006068920529635e-01, -7.377475738608332e-01, -7.813902440721947e-01, -8.284986012996539e-01, -9.022508785233858e-01, -9.014332709384190e-02, -1.642638521091197e-01, -8.320090711418213e-02, -2.674188372453420e+00, -4.831948717713030e-02, -4.831948717713047e-02, -2.607083341797433e-03, 8.140971687328447e-02, 6.613995829474556e-02, -5.554007224762605e-02, -3.042889248953812e-03, 7.881329505921980e-02, -8.508922842622265e-01, -8.410750771627854e-01, -8.587024192062849e-01, -8.473050047469596e-01, -8.458702824196856e-01, -8.458702824196856e-01, -8.271267603385482e-01, -6.744445114464768e-01, -7.183335247081208e-01, -7.616549567240553e-01, -7.395433586187700e-01, -7.967839742498949e-01, -9.393035220485663e-01, -2.373388549145639e-01, -3.201767828677682e-01, -4.588708581422953e-01, -3.884484368084949e-01, -3.884484368084949e-01, -6.334639324050223e-01, 2.476941462405108e-01, 1.961205120277580e-01, -4.536019415560458e-01, -7.121108445698487e-02, 4.342012603919882e-02, 2.218325287574397e-01, 1.353608860668772e-02, 4.212117383241244e-02, 5.212222560064951e-02, 7.309725559194012e-02, 7.309725559195610e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_r2scan_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.209941577764173e-08, -1.209922060391995e-08, -1.209833544210786e-08, -1.210123537163268e-08, -1.209971853133439e-08, -1.209971853133439e-08, -8.681723798725086e-06, -8.685531500243640e-06, -8.785957697134783e-06, -8.742051436562470e-06, -8.750384511435334e-06, -7.250695011925271e-06, -1.918720919323178e-03, -4.801982207629752e-03, -5.269222580637649e-03, -5.132142845502511e-03, -5.160212862403678e-03, -5.160212862403678e-03, -1.032325302502048e+00, -9.764951072381847e-01, -3.756125612009296e-04, -2.908553086394869e+00, -1.879323989808923e+00, -1.879323989808920e+00, -6.436854547341678e+04, -5.917171422006605e+04, -4.086627938164979e+02, -1.510332966943320e+05, -1.206393188112411e+05, -1.206393188112411e+05, -1.765939810342734e-06, -1.766727552211923e-06, -1.765994834570104e-06, -3.125549966565763e-06, -1.766327675343942e-06, -1.766327675343942e-06, -6.314495575477710e-05, -6.455829038441782e-05, -6.230425732725025e-05, -6.320866072555211e-05, -6.453256767427344e-05, -6.881885535982423e-05, -9.581384434179892e-03, -7.520170322344696e-03, -1.243232480717136e-02, -1.121744775188167e-02, -9.122504027940116e-03, -1.932365680578480e-02, -6.883156648014088e-01, -9.889770194667290e-01, -9.279803586567522e-01, -8.565256915377554e-05, -6.482639168013977e+00, -6.482639168013969e+00, -8.770525248511205e+05, -1.464385546206100e+05, -7.574225072785392e+05, -4.412837470830233e+00, -4.726483975098261e+05, -3.197210594673693e+05, -1.218008148960712e-02, -1.195020000980027e-02, -1.559173836465069e-02, -1.212727043596154e-02, -1.209491016066604e-02, -1.209491016066604e-02, -1.353453901649819e-02, -1.874046866625763e-02, -1.646045325043814e-02, -1.481023493038630e-02, -1.557644142282162e-02, -3.325936429026305e-02, -6.061438840713163e-03, -6.429815658234450e-02, -1.990644250500862e-01, -6.201721982676612e-02, -1.189082247911532e-01, -1.189082247911532e-01, -3.251548491072410e-02, -4.766539275497573e+02, -1.569336705323298e+02, -8.487007613586373e-02, -1.719986935563949e+00, -2.937084520374612e+01, -2.207708517512431e+04, -1.409340880677710e+06, -8.032431617982173e+05, -3.746147893051491e+01, -4.468569413467224e+05, -4.468569413468186e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_r2scan_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.863542464652920e-03, 1.863528249367088e-03, 1.863467065825399e-03, 1.863677869984931e-03, 1.863567165041428e-03, 1.863567165041428e-03, 5.662137031969752e-03, 5.664734334058725e-03, 5.733559865939889e-03, 5.705122947092613e-03, 5.708758394504335e-03, 5.203573023698506e-03, 8.274005470326279e-03, 2.469436724968259e-02, 2.496544837660729e-02, 2.494154877128460e-02, 2.494325957758735e-02, 2.494325957758735e-02, 9.126231314373603e-02, 9.037809279011552e-02, 2.000895540190107e-03, 1.104780530994263e-01, 1.019623580964465e-01, 1.019623580964463e-01, 2.246659655784672e-01, 2.408312914754600e-01, 2.814261279007996e-01, 1.015328054567783e-01, 1.609147249122918e-01, 1.609147249122918e-01, 4.114280241604107e-03, 4.117439385661558e-03, 4.114467152979127e-03, 6.985240230359229e-03, 4.115856331440752e-03, 4.115856331440752e-03, 7.252296053013114e-03, 7.595382340150698e-03, 7.029950639407740e-03, 7.285890779027453e-03, 7.575849567247850e-03, 8.991910201251457e-03, 3.275471567141698e-02, 3.243230978207070e-02, 3.388679224613471e-02, 3.411456312489933e-02, 3.264322581348267e-02, 6.450661559325588e-02, 4.767227085086333e-04, 8.706258779510828e-02, 3.876825514916110e-04, 1.021583394754271e-02, 1.324042307935554e-01, 1.324042307935552e-01, 1.319529482528606e-08, 9.197268566900883e-02, 2.126794043230507e-01, 1.457590389531562e-04, 8.317486419851644e-08, 1.569578628812029e-01, 4.002394552930875e-02, 3.908303843110137e-02, 5.008244065786878e-02, 3.979270477497029e-02, 3.966065631758744e-02, 3.966065631758744e-02, 4.103113112767173e-02, 3.802272667106920e-02, 3.804231487301774e-02, 3.851271631829729e-02, 3.819626164480532e-02, 7.681262612937302e-02, 3.028235245138656e-02, 7.713489294842003e-03, 6.198793869529450e-02, 3.987715815446984e-02, 5.622483988236304e-02, 5.622483988236306e-02, 4.708088485023348e-02, 2.876626301208594e-01, 2.410394177742518e-01, 5.446204046882312e-02, 4.172826210113687e-04, 1.818291963974738e-01, 2.166320324051108e-01, 1.691038116418224e-02, 8.911645433198005e-02, 1.917572683142059e-01, 1.737985869175010e-01, 1.737985869175377e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
