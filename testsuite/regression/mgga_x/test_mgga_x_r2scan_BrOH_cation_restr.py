
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_r2scan_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.318080644707313e+01, -2.318087551331115e+01, -2.318123400133796e+01, -2.318020751283635e+01, -2.318073802484103e+01, -2.318073802484103e+01, -3.397605679041882e+00, -3.397733065873563e+00, -3.401381776380511e+00, -3.402460633182800e+00, -3.401048125051986e+00, -3.401048125051986e+00, -5.932193003809815e-01, -5.925302498526231e-01, -5.768788340580550e-01, -5.878435944355609e-01, -5.847974042393610e-01, -5.847974042393610e-01, -1.797571946710339e-01, -1.817759533581030e-01, -6.488371494778797e-01, -1.141824345916971e-01, -1.364856604662056e-01, -1.364856604662056e-01, -2.639027681523747e-03, -2.816655287317441e-03, -2.406475901289740e-02, -1.214929650320639e-03, -1.701764114688210e-03, -1.701764114688210e-03, -5.667956216914368e+00, -5.669061829733380e+00, -5.668033269102463e+00, -5.669008277436959e+00, -5.668503180230235e+00, -5.668503180230235e+00, -2.075728531354558e+00, -2.098976443781811e+00, -2.069395054573171e+00, -2.090150887476467e+00, -2.091826883911713e+00, -2.091826883911713e+00, -6.151876891926876e-01, -6.677677020394642e-01, -5.447689313652767e-01, -5.577733543496072e-01, -6.275261033781323e-01, -6.275261033781323e-01, -7.425734701904359e-02, -1.729953903620199e-01, -6.786882207880231e-02, -1.913898561451212e+00, -9.414168248027695e-02, -9.414168248027695e-02, -8.701425735154152e-04, -1.195189102840300e-03, -9.823714709761022e-04, -4.320276923896971e-02, -1.180765646145556e-03, -1.180765646145556e-03, -6.397611924572483e-01, -6.361265648546249e-01, -6.374063826362910e-01, -6.384593963139915e-01, -6.379310294569897e-01, -6.379310294569897e-01, -6.197977823219813e-01, -5.319379661937137e-01, -5.573745693592067e-01, -5.823797985079739e-01, -5.694364405816517e-01, -5.694364405816517e-01, -6.907061804713825e-01, -2.283398446296160e-01, -2.720983820387894e-01, -3.514944855788474e-01, -3.120608844856801e-01, -3.120608844856801e-01, -4.765653149937022e-01, -2.285255829143431e-02, -3.302557271867686e-02, -3.447138409275788e-01, -5.818746413195280e-02, -5.818746413195280e-02, -4.035843803445649e-03, -2.203058368525025e-04, -5.832033387441646e-04, -5.505690166053804e-02, -1.085025097529806e-03, -1.085025097529805e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_r2scan_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.014673702236806e+01, -3.014684521097601e+01, -3.014733436606080e+01, -3.014572572124077e+01, -3.014656744378175e+01, -3.014656744378175e+01, -4.808066718723296e+00, -4.808182484696497e+00, -4.811166318527168e+00, -4.809198636236210e+00, -4.809418963440177e+00, -4.809418963440177e+00, -8.271947264552069e-01, -8.259823154895055e-01, -7.980595845437110e-01, -8.099490303989431e-01, -8.070843270309609e-01, -8.070843270309609e-01, -1.738087750110483e-01, -1.787259242342176e-01, -8.557234343699748e-01, -1.408763197854409e-01, -1.426761122089371e-01, -1.426761122089370e-01, 1.543362521078415e-03, -3.146957921875328e-03, -3.740377266591842e-02, -2.226936789560704e-03, -3.051778467311758e-03, -3.051778467311760e-03, -7.405287502893018e+00, -7.407707437245101e+00, -7.405408662515412e+00, -7.407544525794922e+00, -7.406509266216823e+00, -7.406509266216823e+00, -2.541641236609684e+00, -2.578054182527441e+00, -2.521816481767806e+00, -2.555922772015649e+00, -2.571636553007241e+00, -2.571636553007241e+00, -8.185479019964341e-01, -9.251292571899252e-01, -7.537997723432177e-01, -8.202532728644710e-01, -8.357266670386593e-01, -8.357266670386593e-01, -1.000866914722109e-01, -1.131933217412921e-01, -9.418135969795181e-02, -2.831638831701960e+00, -9.051099532836654e-02, -9.051099532836732e-02, -1.613960748580051e-03, -2.198214696563820e-03, -1.787395679197908e-03, -6.386718759423145e-02, -2.154606407665382e-03, -2.154606407665382e-03, -8.540504422447377e-01, -8.432390330920717e-01, -8.470065802392732e-01, -8.501555132342208e-01, -8.485779705352714e-01, -8.485779705352714e-01, -8.337942378792121e-01, -6.727968606840620e-01, -7.179043596768472e-01, -7.628844944361278e-01, -7.399934738744200e-01, -7.399934738744200e-01, -9.722161909598075e-01, -2.173568527708370e-01, -2.936677374881675e-01, -4.562809325739353e-01, -3.717683173000854e-01, -3.717683173000854e-01, -6.060065039523652e-01, -3.153647177109989e-02, -5.021607353757015e-02, -4.543273083256458e-01, -7.696120876066015e-02, -7.696120876066018e-02, -7.132305967170374e-03, -4.177279349011043e-04, -1.069631213025326e-03, -5.542307202064352e-02, -1.979283624748449e-03, -1.979283624748447e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_r2scan_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.296078833791451e-09, -6.296017950880817e-09, -6.295509844081340e-09, -6.296409432855153e-09, -6.295971969404654e-09, -6.295971969404654e-09, -1.517332750131680e-05, -1.517511795669225e-05, -1.522034233903631e-05, -1.519567327014817e-05, -1.520511442450522e-05, -1.520511442450522e-05, -4.317374705899372e-03, -4.305011754504675e-03, -4.033934771910675e-03, -4.174406323030280e-03, -4.136996995919221e-03, -4.136996995919221e-03, -1.608766391863842e+00, -1.590256232063475e+00, -1.325379611539181e-03, -1.104468363338112e+00, -1.907003484692603e+00, -1.907003484692608e+00, -2.301982566973652e+03, -4.944742815151051e+02, 1.527639745685970e+00, 4.293995466248094e+02, 2.923417962206858e+02, 2.923417962206880e+02, -1.774391248734033e-06, -1.775103098372733e-06, -1.774270784738647e-06, -1.774905149958946e-06, -1.774829078235764e-06, -1.774829078235764e-06, -1.015943105130722e-04, -9.416198962812135e-05, -9.953772891212367e-05, -9.254747531583422e-05, -9.834086061404415e-05, -9.834086061404415e-05, -1.688643789110402e-02, -1.447258016788414e-02, -2.626573918316652e-02, -2.975734345658957e-02, -1.564349730627240e-02, -1.564349730627240e-02, -8.212905165918063e-01, -1.747261661988571e+00, -6.185077925736957e-01, -2.151955192974006e-04, -3.682053132142608e+00, -3.682053132142675e+00, 8.266916712042582e+02, 5.097750738429320e+02, 2.213189172291696e+03, 4.699365310148029e-02, 1.067793124358696e+03, 1.067793124358695e+03, -1.305825224898565e-02, -1.306534467016036e-02, -1.310164851242947e-02, -1.309751772442798e-02, -1.310366680148069e-02, -1.310366680148069e-02, -1.548823844773632e-02, -2.069065293991432e-02, -1.863848421212720e-02, -1.732568897386853e-02, -1.800848593677692e-02, -1.800848593677692e-02, -1.313521285257502e-02, -5.884481097100511e-01, -3.366608254578317e-01, -1.374680704981624e-01, -2.112147458982028e-01, -2.112147458982030e-01, -4.162401727280902e-02, -5.958794688679043e+00, 5.691971491835242e-01, -1.633008114063715e-01, -2.142768975766647e+00, -2.142768975766637e+00, 8.201811508898413e+01, 1.219088903194949e+04, 1.935275616397140e+03, -7.836241290363514e+00, 1.380237956473958e+03, 1.380237956473962e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_r2scan_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.011864036371344e-03, 1.011862153262836e-03, 1.011824707144498e-03, 1.011851842468187e-03, 1.011841779479039e-03, 1.011841779479039e-03, 9.217477862722319e-03, 9.218908104397702e-03, 9.257299493100101e-03, 9.254064471370324e-03, 9.249946072017514e-03, 9.249946072017514e-03, 1.501128661097892e-02, 1.496731188250206e-02, 1.411653538493085e-02, 1.540661421930611e-02, 1.499756872717069e-02, 1.499756872717069e-02, 1.381060338665336e-01, 1.424270194741663e-01, 2.515175985765332e-03, 4.358585747583935e-02, 1.012699938777589e-01, 1.012699938777587e-01, 8.576318536581435e-03, 2.653322696923061e-03, 1.616978281486886e-03, 1.345872084244104e-05, 6.477010634488214e-05, 6.477010634487986e-05, 4.129453309274552e-03, 4.132462223501055e-03, 4.129324522189943e-03, 4.131991525213233e-03, 4.131111902114524e-03, 4.131111902114524e-03, 1.254113902874212e-02, 1.192990087492787e-02, 1.214664932659832e-02, 1.156320874355060e-02, 1.238318712198907e-02, 1.238318712198907e-02, 5.299345045510680e-02, 5.478476244088634e-02, 6.265517183110658e-02, 6.799401435190844e-02, 5.140404694422132e-02, 5.140404694422132e-02, 1.389741308544262e-02, 1.491356090549979e-01, 9.916921368699145e-03, 2.065546912208303e-02, 7.641151098424091e-02, 7.641151098424007e-02, 5.312529413163712e-07, 2.449592431487740e-06, 2.286361583450254e-05, 3.713393823081896e-03, 5.633447582605288e-06, 5.633447582605331e-06, 4.252111236456538e-02, 4.190383415413801e-02, 4.224897194461154e-02, 4.242947606319941e-02, 4.235290648607919e-02, 4.235290648607919e-02, 4.634285136226809e-02, 4.143743532998553e-02, 4.227506194979359e-02, 4.366739537184894e-02, 4.311269865733856e-02, 4.311269865733857e-02, 5.547776652324383e-02, 1.026771354164685e-01, 1.007485091493853e-01, 9.055545925903961e-02, 9.468943047591374e-02, 9.468943047591379e-02, 6.237109363115177e-02, 6.013689784738411e-03, 2.227927935041359e-03, 9.586982387621851e-02, 1.736123304799114e-02, 1.736123304799109e-02, 8.455597130112119e-06, 3.214229256859311e-08, 3.750725442308451e-05, 4.341046379850937e-02, 1.143368448239160e-05, 1.143368448239153e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
