
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_rlda_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rlda", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.499721021767942e+01, -2.499750379455962e+01, -2.499884948986433e+01, -2.499449579913174e+01, -2.499677118260137e+01, -2.499677118260137e+01, -4.008037898213801e+00, -4.008727914914305e+00, -4.026927859095448e+00, -4.019674767555879e+00, -4.020334871798562e+00, -4.020334871798562e+00, -4.936715308880255e-01, -4.910327672327908e-01, -4.318447724983057e-01, -4.580833638145742e-01, -4.565581938291229e-01, -4.565581938291229e-01, -1.122527647001322e-01, -1.175482474931505e-01, -3.560822464940525e-01, -3.848889166926480e-02, -8.984791768947768e-02, -8.984791768947763e-02, -8.602588678865110e-06, -1.034574795311837e-05, -8.754156182739493e-04, -1.236166507374308e-06, -4.918551152729986e-06, -4.918551152729986e-06, 1.142611383497245e+00, 3.955945614775052e+00, -1.614986782472795e-01, 5.107939866322389e-01, -3.375910699867871e+00, 5.708565615831817e+01, -1.737156283091380e-02, 8.537079258234968e+00, -2.710723009397570e+00, -2.804501005654312e+00, -2.940132390224250e+00, -1.765490299892762e+00, 4.998558488554711e-02, 2.108823954616991e-01, 5.005917657930875e-02, -1.425149195840970e+00, -1.882518133504735e+00, -1.932805329042155e+01, -1.582757607428724e-03, 1.050275223335242e-02, -2.495299099540644e-04, -6.610263293038615e+00, -1.756106798367928e-02, -1.248086120016054e-02, 4.111728876736564e-08, 6.084795662136799e-11, -9.254132302348674e-11, -3.946430115061084e-04, 5.554512224673142e-07, -5.920724357806043e-09, 7.569713768228896e-06, -1.844048655992604e-05, -1.070478358480940e-06, 8.433328800299461e-04, -5.844515197850587e-05, 5.928956232003779e-07, -1.864871207110548e-06, -8.536644247103204e-01, 6.509507404970571e-02, -2.835214400829736e-01, 5.005059125088815e+00, 2.591780604179664e-02, 5.292024387876317e-02, -1.397287637617349e-03, -1.331230956838523e-03, -2.318781985634276e-02, 3.280435243242016e-01, -1.415837433333543e+00, -7.520607682550738e-01, -1.049731991289395e-04, -2.886282334410309e-03, -5.278454394835291e-01, -3.376901262382959e-04, -5.283522166025165e-03, -2.180116517250867e-07, -2.257634018417959e-09, -2.148714297991383e-09, -2.010420521749094e-03, -2.362433334588732e-08, -1.244271566120584e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_rlda_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rlda", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-7.498967578242934e+01, -7.499358553119913e+01, -7.499069632880928e+01, -7.499432645037218e+01, -7.499402488571508e+01, -7.499907203529611e+01, -7.498254413156151e+01, -7.498443068478448e+01, -7.499031290076167e+01, -7.499031419487135e+01, -7.499031290076167e+01, -7.499031419487135e+01, -1.202518703830796e+01, -1.202304030703933e+01, -1.202769222364985e+01, -1.202467519532712e+01, -1.207645634145197e+01, -1.208511054587347e+01, -1.205897628510450e+01, -1.205907231820913e+01, -1.201897147571368e+01, -1.210299060799751e+01, -1.201897147571368e+01, -1.210299060799751e+01, -1.462937429838452e+00, -1.498878483863601e+00, -1.452408547870929e+00, -1.493488661603517e+00, -1.308784318107690e+00, -1.282006665680689e+00, -1.361673809115236e+00, -1.386744992548125e+00, -1.524053113213589e+00, -1.181804682461297e+00, -1.524053113213589e+00, -1.181804682461297e+00, -3.080270999950956e-01, -3.623815374861241e-01, -3.190437366958650e-01, -3.821428835674126e-01, -9.671021957821029e-01, -1.159840019446931e+00, -1.057590709610615e-01, -1.247832131495102e-01, -3.053980660759338e-01, -3.733621570080326e-02, -3.053980660759336e-01, -3.733621570080331e-02, -2.304548357022969e-05, -2.810993038975155e-05, -2.715652608082284e-05, -3.419396981106581e-05, -2.353809159430755e-03, -2.857590396159565e-03, -3.749569258239689e-06, -3.665306390898617e-06, -1.663561402183075e-05, -4.554065701502777e-06, -1.663561402183076e-05, -4.554065701502782e-06, 2.965434944201049e+00, 3.890565803241234e+00, 1.178091527853254e+01, 1.195482255250146e+01, -5.128854007348124e-01, -4.560858779417153e-01, 1.571966906296876e+00, 1.492768459920051e+00, -1.010428620913666e+01, -1.015119515578068e+01, 8.803678998851723e+01, 2.545380759101726e+02, -4.818976235900194e-02, -5.604020968212432e-02, 2.567521536563812e+01, 2.554720792254938e+01, -8.068416037402626e+00, -8.195592360153647e+00, -8.254702109871541e+00, -8.571448617583417e+00, -8.932306632660488e+00, -8.707004460070433e+00, -5.257574941252334e+00, -5.335882385347626e+00, 1.707342642012329e-01, 1.290133421683813e-01, 6.392649080916202e-01, 6.260384694424997e-01, 1.216073536645656e-01, 1.758149031845856e-01, -3.963248946645290e+00, -4.558485278275024e+00, -6.059305543543523e+00, -5.167557045794094e+00, -8.045002992106953e+01, -3.179465590035706e+01, -4.670354378343864e-03, -4.824003993424135e-03, 3.109071682384649e-02, 3.191960717329299e-02, -6.846339341726920e-04, -8.032524530803975e-04, -1.982728387791283e+01, -1.983430060996331e+01, -4.217385098389963e-02, -6.152366455843999e-02, -3.111337282412345e-02, -4.276671142445898e-02, 1.113297191145898e-07, 1.340629057900505e-07, 1.736097104699083e-10, 1.910843490972079e-10, -1.477504670106458e-10, -3.869665298342799e-10, -1.255178827049500e-03, -1.113977524099589e-03, 4.073422451317785e-07, 2.152440818012660e-06, -4.069961353284797e-09, -2.304854940239324e-08, 2.273194487928225e-05, 2.268660015176312e-05, -5.512074668958052e-05, -5.551983978585546e-05, -3.204367114907721e-06, -3.218420913895179e-06, 2.376401139713224e-03, 2.681827699560661e-03, -1.883112103275636e-04, -1.625097666661752e-04, 1.772598932744128e-06, 1.784704399222934e-06, -5.651214346180556e-06, -5.538570521074083e-06, -2.566009518875050e+00, -2.556041664410727e+00, 1.966711229875371e-01, 1.939176105132810e-01, -9.228215796923205e-01, -7.790639675646414e-01, 1.496176245546347e+01, 1.506800142785581e+01, 7.699389385137556e-02, 7.850454066458727e-02, 1.563267244311327e-01, 1.611828787260317e-01, -4.189599317465752e-03, -4.194087639852719e-03, -3.953348511781915e-03, -4.032847283252655e-03, -7.124847352573398e-02, -6.790608988462177e-02, 1.012691968075316e+00, 9.555389300514699e-01, -3.760759609662170e+00, -4.734780483610407e+00, -2.187339195971175e+00, -2.323622592992490e+00, -2.913543367650347e-04, -3.380076843154219e-04, -5.724742953227868e-03, -1.131697415137550e-02, -1.495471206545194e+00, -1.667734736264699e+00, -8.343097373275304e-04, -1.164918337353632e-03, -1.439949150970711e-02, -1.708317996995277e-02, -4.306186681762741e-07, -8.548127403919806e-07, -8.438752519346232e-09, -5.118421822526670e-09, -5.462157820839816e-09, -7.263999446422340e-09, -6.419809276991667e-03, -5.661169313680390e-03, -2.520300944148226e-08, -9.033355864036642e-08, -1.473537316958356e-08, -4.695521265773292e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rlda_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rlda", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rlda_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rlda", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([-1.371653745960730e-03, -1.371802077395417e-03, -1.371677785742102e-03, -1.371819524630430e-03, -1.371754397294308e-03, -1.371929162882445e-03, -1.371484605932346e-03, -1.371584962455372e-03, -1.371669256805014e-03, -1.371721752032207e-03, -1.371669256805014e-03, -1.371721752032207e-03, -8.173063813678378e-03, -8.170480401574592e-03, -8.176392839094729e-03, -8.172673404807731e-03, -8.241434441564740e-03, -8.252740876937588e-03, -8.216020321796035e-03, -8.215805264318284e-03, -8.168714167416853e-03, -8.274029735712901e-03, -8.168714167416853e-03, -8.274029735712901e-03, -1.695825142387306e-02, -1.759171629859300e-02, -1.679331442254306e-02, -1.749976653495643e-02, -1.452480423425093e-02, -1.422856843664344e-02, -1.554684147160557e-02, -1.602026734103111e-02, -1.777548246781285e-02, -1.300717253696549e-02, -1.777548246781285e-02, -1.300717253696549e-02, -4.604351105187858e-02, -5.683333368854510e-02, -4.761401205939888e-02, -5.996919996859822e-02, -4.888897273394655e-03, -6.367713344223110e-03, -1.194098743409221e-02, -1.595364148697336e-02, -3.975568995603337e-02, -3.848240720410543e-03, -3.975568995603335e-02, -3.848240720410554e-03, -6.335842906955471e-06, -7.856344667566239e-06, -7.646205412061463e-06, -9.861010077409826e-06, -3.341282552424361e-04, -4.181776740226647e-04, -7.721379150017435e-07, -7.759709508725702e-07, -4.650249206080671e-06, -1.891107300241174e-06, -4.650249206080671e-06, -1.891107300241180e-06, -1.480403554428477e-04, -2.550004669972309e-04, -2.335167817480176e-03, -2.406393589531830e-03, -4.428219857368616e-06, -3.504287166496628e-06, -4.157828378303034e-05, -3.752129477566810e-05, -1.718268314985822e-03, -1.735529124076630e-03, -1.304391922563511e-01, -1.091196754312452e+00, -7.363553469445403e-07, -9.959630276597672e-07, -2.044774210189796e-01, -2.026089706489178e-01, -2.102965426852507e-02, -2.158563124665222e-02, -2.159415938941548e-02, -2.315775734203364e-02, -2.464657609005132e-02, -2.372931556490072e-02, -8.538867852175678e-03, -8.911692125611059e-03, -3.416880874620358e-04, -1.966580241352245e-04, -3.753682910624044e-03, -3.595063340753704e-03, -2.322401123238187e-04, -4.356016756933615e-04, -2.184198398136048e-01, -2.619652924597998e-01, -3.825545807580649e-01, -3.243562652874912e-01, -6.743729182876586e+01, -1.227891492495330e+01, -6.913511024997628e-05, -7.168837043370331e-05, -4.435668998921292e-04, -4.606030179136810e-04, -2.006863989500200e-06, -2.361111932122764e-06, -1.320079589007770e-01, -1.322796153930647e-01, -3.763086817264221e-03, -6.736604105383500e-03, -2.048103528141921e-03, -3.255130067994419e-03, -1.612283193182288e-09, -2.082984012530941e-09, -1.858302231749228e-15, -2.152023958453422e-15, -3.218966053326182e-15, -1.858977644724926e-14, -2.062325810133292e-05, -1.594822730110440e-05, -2.296447027863661e-08, -2.475622582752168e-07, -2.292546204088067e-12, -2.838632641001897e-11, -6.028302787699202e-12, -5.935180038890033e-12, -3.606389716242190e-11, -3.616275568494364e-11, -1.211389342621770e-13, -1.207839761340275e-13, -6.628923721966519e-08, -8.345185899400768e-08, -4.173055783908930e-10, -3.071912716507290e-10, -3.697624517642290e-14, -3.704951495007844e-14, -4.042445857033318e-13, -3.844644518789289e-13, -1.319579762157363e-01, -1.292476533362178e-01, -6.751969403723116e-04, -6.477604116239275e-04, -1.302108970139399e-02, -9.183004183761225e-03, -3.658257993580877e+00, -3.669351032682678e+00, -9.687715752238416e-05, -9.960187391989039e-05, -1.951580978213563e-04, -2.064603170199000e-04, -3.998553449181528e-06, -3.938318663384659e-06, -2.068654363369559e-06, -2.089195975276755e-06, -2.895974075525328e-04, -2.587479262028014e-04, -8.817438286461100e-02, -7.858581528184094e-02, -1.216014757494167e+00, -1.929510248398485e+00, -1.233528908459595e-01, -1.363663405459142e-01, -5.417704215385520e-06, -7.143995395211116e-06, -8.593836834685281e-04, -3.042537988519430e-03, -1.444776731103958e-01, -1.717902911040571e-01, -4.760512600830367e-06, -7.883645937553115e-06, -1.418056081086289e-03, -1.695405471517853e-03, -7.558004628408231e-10, -2.676481518040520e-09, -2.254709097333260e-10, -8.238188655089406e-11, -1.121288701771336e-11, -1.648273170890005e-11, -3.204850510286743e-04, -2.373785373250704e-04, -1.034427920196348e-10, -5.662628215427735e-10, -3.536044381282300e-11, -1.529985917509401e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rlda_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rlda", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.097322996768584e-02, 1.097441661916333e-02, 1.097342228593682e-02, 1.097455619704344e-02, 1.097403517835446e-02, 1.097543330305956e-02, 1.097187684745876e-02, 1.097267969964298e-02, 1.097335405444011e-02, 1.097377401625766e-02, 1.097335405444011e-02, 1.097377401625766e-02, 6.538451050942702e-02, 6.536384321259674e-02, 6.541114271275783e-02, 6.538138723846185e-02, 6.593147553251792e-02, 6.602192701550071e-02, 6.572816257436828e-02, 6.572644211454627e-02, 6.534971333933483e-02, 6.619223788570321e-02, 6.534971333933483e-02, 6.619223788570321e-02, 1.356660113909844e-01, 1.407337303887440e-01, 1.343465153803445e-01, 1.399981322796515e-01, 1.161984338740075e-01, 1.138285474931475e-01, 1.243747317728446e-01, 1.281621387282489e-01, 1.422038597425028e-01, 1.040573802957240e-01, 1.422038597425028e-01, 1.040573802957240e-01, 3.683480884150286e-01, 4.546666695083608e-01, 3.809120964751910e-01, 4.797535997487858e-01, 3.911117818715724e-02, 5.094170675378488e-02, 9.552789947273764e-02, 1.276291318957868e-01, 3.180455196482670e-01, 3.078592576328434e-02, 3.180455196482668e-01, 3.078592576328443e-02, 5.068674325564377e-05, 6.285075734052991e-05, 6.116964329649170e-05, 7.888808061927861e-05, 2.673026041939489e-03, 3.345421392181317e-03, 6.177103320013948e-06, 6.207767606980561e-06, 3.720199364864537e-05, 1.512885840192940e-05, 3.720199364864537e-05, 1.512885840192944e-05, 1.184322843542781e-03, 2.040003735977847e-03, 1.868134253984140e-02, 1.925114871625464e-02, 3.542575885894893e-05, 2.803429733197302e-05, 3.326262702642427e-04, 3.001703582053448e-04, 1.374614651988658e-02, 1.388423299261304e-02, 1.043513538050808e+00, 8.729574034499615e+00, 5.890842775556322e-06, 7.967704221278138e-06, 1.635819368151837e+00, 1.620871765191342e+00, 1.682372341482005e-01, 1.726850499732177e-01, 1.727532751153238e-01, 1.852620587362691e-01, 1.971726087204106e-01, 1.898345245192057e-01, 6.831094281740542e-02, 7.129353700488847e-02, 2.733504699696286e-03, 1.573264193081796e-03, 3.002946328499235e-02, 2.876050672602963e-02, 1.857920898590550e-03, 3.484813405546892e-03, 1.747358718508839e+00, 2.095722339678398e+00, 3.060436646064519e+00, 2.594850122299929e+00, 5.394983346301269e+02, 9.823131939962637e+01, 5.530808819998103e-04, 5.735069634696264e-04, 3.548535199137034e-03, 3.684824143309448e-03, 1.605491191600160e-05, 1.888889545698211e-05, 1.056063671206216e+00, 1.058236923144518e+00, 3.010469453811377e-02, 5.389283284306800e-02, 1.638482822513537e-02, 2.604104054395535e-02, 1.289826554545830e-08, 1.666387210024753e-08, 1.486641785399382e-14, 1.721619166762738e-14, 2.575172842660946e-14, 1.487182115779941e-13, 1.649860648106633e-04, 1.275858184088352e-04, 1.837157622290929e-07, 1.980498066201735e-06, 1.834036963270453e-11, 2.270906112801518e-10, 4.822642230159361e-11, 4.748144031112026e-11, 2.885111772993752e-10, 2.893020454795491e-10, 9.691114740974156e-13, 9.662718090722202e-13, 5.303138977573215e-07, 6.676148719520615e-07, 3.338444627127144e-09, 2.457530173205832e-09, 2.958099614113832e-13, 2.963961196006275e-13, 3.233956685626654e-12, 3.075715615031431e-12, 1.055663809725890e+00, 1.033981226689743e+00, 5.401575522978493e-03, 5.182083292991420e-03, 1.041687176111520e-01, 7.346403347008980e-02, 2.926606394864702e+01, 2.935480826146142e+01, 7.750172601790733e-04, 7.968149913591231e-04, 1.561264782570850e-03, 1.651682536159200e-03, 3.198842759345222e-05, 3.150654930707727e-05, 1.654923490695647e-05, 1.671356780221404e-05, 2.316779260420262e-03, 2.069983409622412e-03, 7.053950629168880e-01, 6.286865222547275e-01, 9.728118059953337e+00, 1.543608198718788e+01, 9.868231267676759e-01, 1.090930724367313e+00, 4.334163372308416e-05, 5.715196316168893e-05, 6.875069467748225e-03, 2.434030390815544e-02, 1.155821384883166e+00, 1.374322328832457e+00, 3.808410080664294e-05, 6.306916750042492e-05, 1.134444864869031e-02, 1.356324377214282e-02, 6.046403702726585e-09, 2.141185214432416e-08, 1.803767277866608e-09, 6.590550924071525e-10, 8.970309614170690e-11, 1.318618536712004e-10, 2.563880408229394e-03, 1.899028298600563e-03, 8.275423361570781e-10, 4.530102572342188e-09, 2.828835505025840e-10, 1.223988734007521e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
