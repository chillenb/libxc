
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_gap_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_gap", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.190857504256368e+01, -2.190868911243910e+01, -2.190919376578692e+01, -2.190750015626391e+01, -2.190838790522268e+01, -2.190838790522268e+01, -2.908610549428265e+00, -2.908867349805126e+00, -2.915682530576726e+00, -2.913193453776242e+00, -2.913157744206332e+00, -3.982449001063600e+00, -4.190029169386545e-01, -6.185364258484963e-01, -5.715920899826888e-01, -5.903336007761528e-01, -5.860691526380996e-01, -5.860691526380996e-01, -1.375231877517845e-01, -1.420661229887732e-01, -4.030827979190450e-01, -8.316856203089192e-02, -1.012559363592128e-01, -1.012559363592129e-01, -3.215833915028340e-03, -3.385009979107664e-03, -1.888177445251389e-02, -1.856611500497990e-03, -2.333248937436036e-03, -2.333248937436036e-03, -6.073478329231387e+00, -6.071799262813472e+00, -6.073373386566297e+00, -5.459704751377631e+00, -6.072643109850380e+00, -6.072643109850380e+00, -1.520374038923845e+00, -1.555240948890649e+00, -1.493689419394179e+00, -1.524800931407434e+00, -1.552834171115534e+00, -2.175884489508058e+00, -7.058162583299786e-01, -7.566728532499606e-01, -6.347865200753611e-01, -6.792001002885315e-01, -7.187055431606723e-01, -5.779167729785225e-01, -3.766019620344047e-02, -1.199463539785974e-01, -3.466287514630888e-02, -2.314543024853208e+00, -6.513111287869933e-02, -6.513111287869935e-02, -1.070082738106167e-03, -1.814976898340678e-03, -1.387931209090093e-03, -2.294983497307710e-02, -1.248985934149948e-03, -1.671992414700329e-03, -6.495994946409726e-01, -6.617177031816994e-01, -6.261802669331870e-01, -6.541764346313449e-01, -6.559688229980729e-01, -6.559688229980729e-01, -6.342464915476378e-01, -5.848631415859210e-01, -6.216791204847977e-01, -6.383650446234596e-01, -6.323613297877969e-01, -5.313145327058902e-01, -8.005307318487795e-01, -1.140896499275281e-01, -2.321516882670730e-01, -2.679724669143240e-01, -3.026831604153414e-01, -3.026831604153414e-01, -3.848380557760637e-01, -1.805609765007061e-02, -2.481468290234084e-02, -3.882403693791185e-01, -2.964668842064851e-02, -4.099523132033839e-02, -4.539346174331718e-03, -4.851002485843328e-04, -1.018310567315727e-03, -3.830281824220520e-02, -1.547122261941283e-03, -1.547122261941282e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_gap_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_gap", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.205951180536083e+01, -3.205952875385992e+01, -3.205966086406477e+01, -3.205940271702580e+01, -3.205952997566274e+01, -3.205952997566274e+01, -5.472469714036103e+00, -5.472620927747148e+00, -5.476637646948698e+00, -5.475525576872164e+00, -5.475076881162530e+00, -5.524053308563824e+00, -8.382626368074714e-01, -1.025264050547455e+00, -9.501440798043498e-01, -9.812421485491228e-01, -9.743445389974260e-01, -9.743445389974260e-01, -2.242201826073008e-01, -2.329110335869743e-01, -7.312198557047654e-01, -1.180018314907749e-01, -1.529024843124070e-01, -1.529024843124072e-01, -3.878354735902866e-03, -4.082641322456570e-03, -2.302693248526046e-02, -2.238338511263462e-03, -2.813308021887504e-03, -2.813308021887504e-03, -6.906220439910706e+00, -6.908741741060294e+00, -6.906354465814465e+00, -7.639206575145182e+00, -6.907482648432805e+00, -6.907482648432805e+00, -2.982020831492884e+00, -3.028959779230116e+00, -2.944575588760260e+00, -2.988381390821019e+00, -3.025541111175344e+00, -3.206414842484907e+00, -8.363133885439591e-01, -8.448176851473732e-01, -8.392465919507281e-01, -8.019528536947323e-01, -8.325873596150013e-01, -9.305927713458312e-01, -5.270989894966097e-02, -1.821536912994474e-01, -4.815951283533410e-02, -2.651421000002220e+00, -8.925142924655967e-02, -8.925142924655972e-02, -1.426826430959820e-03, -2.188113175205289e-03, -1.673409116162537e-03, -3.118501273670625e-02, -1.665471203443963e-03, -2.015855955297546e-03, -8.182489376480008e-01, -7.952319943601845e-01, -8.438615380601089e-01, -8.093952859106261e-01, -8.059821913785886e-01, -8.059821913785886e-01, -7.932948982136714e-01, -7.366516028879044e-01, -7.119512485831480e-01, -7.134646325059811e-01, -7.076153183353294e-01, -8.024129134742591e-01, -8.938826442422442e-01, -2.086144397585158e-01, -3.859719898823139e-01, -5.273041991040037e-01, -4.880581685375052e-01, -4.880581685375049e-01, -7.161889011702989e-01, -2.200013124329740e-02, -3.048046208091654e-02, -5.252217483671481e-01, -4.111268030021487e-02, -5.254873532597577e-02, -5.475527862975372e-03, -5.847642824312008e-04, -1.227600213497434e-03, -4.885313448860779e-02, -1.865312512459269e-03, -1.865312512459267e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_gap_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_gap", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.236241726922745e-08, -2.236227243908374e-08, -2.236150944534975e-08, -2.236367357097904e-08, -2.236255648818283e-08, -2.236255648818283e-08, -2.123214213608729e-05, -2.123575245100396e-05, -2.132937837761805e-05, -2.128383949797473e-05, -2.129757228688527e-05, -1.829474323386756e-05, -7.713214787334334e-03, -5.236022189406139e-03, -4.683789245799799e-03, -5.017551644024944e-03, -4.936922898341427e-03, -4.936922898341427e-03, -6.049510194304253e-01, -6.183295151476835e-01, -2.175809538727589e-03, -4.532564058010016e-01, -5.162472343857114e-01, -5.162472343857114e-01, -1.609862308345211e+02, -1.483931139494989e+02, -3.588099764072590e+00, -4.125857352381954e+02, -3.085140530320999e+02, -3.085140530320999e+02, -6.585213303141381e-06, -6.585372609503356e-06, -6.585261366793325e-06, -6.604612304578802e-06, -6.585280710739310e-06, -6.585280710739310e-06, -1.809318652547335e-04, -1.817635614233076e-04, -1.798613273671110e-04, -1.808327755463504e-04, -1.819163553816940e-04, -1.492023040031639e-04, -3.194660327182110e-02, -2.814019482318079e-02, -3.456878127250142e-02, -3.760284571587355e-02, -3.148685555352232e-02, -3.302153546581348e-02, -1.541572162902586e+00, -2.856144915828944e-01, -1.802369649107077e+00, -3.008946278218444e-04, -7.068550925588372e-01, -7.068550925588372e-01, -1.661785650951976e+03, -4.058719389814399e+02, -1.974874400016145e+03, -4.233789983236456e+00, -2.429567157893915e+03, -8.428827599468218e+02, -4.185272988340757e-02, -4.241014276185006e-02, -4.216404601120968e-02, -4.208744794690635e-02, -4.217120392640526e-02, -4.217120392640526e-02, -4.667337549284485e-02, -5.674440512984933e-02, -5.785272568021010e-02, -5.547463654272666e-02, -5.711959040983598e-02, -5.844737278948675e-02, -2.236196352616416e-02, -3.682927560007494e-01, -1.815702573611146e-01, -1.786531815869501e-01, -1.765371965654713e-01, -1.765371965654714e-01, -7.582780919312325e-02, -3.928758162912094e+00, -2.062564907650024e+00, -2.256968398072977e-01, -3.205943632009827e+00, -1.267981585214607e+00, -5.593062499867953e+01, -6.281250865952860e+03, -2.414852108444423e+03, -1.469991625884357e+00, -1.175278234705651e+03, -1.175278234705653e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_gap_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_gap", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.669918298359245e-03, 1.669881507094152e-03, 1.669729431237166e-03, 1.670274403618065e-03, 1.669987265790567e-03, 1.669987265790567e-03, 1.198649378581610e-02, 1.198814401223879e-02, 1.203108257412620e-02, 1.201272334522879e-02, 1.201594571057842e-02, 2.115650032901456e-02, 2.668513497470595e-02, 5.905502538681918e-02, 4.924502101722941e-02, 5.391286604914421e-02, 5.281943664966784e-02, 5.281943664966784e-02, 1.171597574584616e-01, 1.260506023161209e-01, 7.862044308162640e-03, 3.058933122302433e-02, 5.549242789337601e-02, 5.549242789337611e-02, 5.620472414434044e-04, 6.044023019811975e-04, 2.655795045304092e-03, 2.767402005999179e-04, 4.109587018715993e-04, 4.109587018715993e-04, 6.435506349295420e-03, 6.385460131671585e-03, 6.432632863581381e-03, 5.217765138622908e-03, 6.410420653942675e-03, 6.410420653942675e-03, 1.840012641143968e-02, 1.891233062244796e-02, 1.796422703545097e-02, 1.845570710326186e-02, 1.888927649714687e-02, 3.500036943550417e-02, 1.185004832091856e-01, 7.008533830408642e-02, 1.379415824104850e-01, 1.224062783497985e-01, 1.108746970377474e-01, 7.456906785336100e-02, 1.362793685055130e-03, 5.024657569542029e-02, 1.077561765160716e-03, 3.320262859045191e-02, 2.379323485685565e-02, 2.379323485685573e-02, 2.871908746078447e-08, 2.543129127545462e-04, 5.535776726578404e-04, 3.641430502370629e-04, 1.811278435140605e-07, 4.130118495967979e-04, 1.577515485830564e-02, 3.095895570522974e-02, 2.314080117560789e-02, 2.111860898806902e-02, 2.332715053389797e-02, 2.332715053389797e-02, 1.830919763619167e-02, 1.506107356154288e-01, 1.234749196269134e-01, 8.063451263644454e-02, 1.036984427003580e-01, 7.521617306808460e-02, 7.869747265617956e-02, 3.021812040183752e-02, 1.253782949432213e-01, 1.017102793040386e-01, 1.740230332823655e-01, 1.740230332823656e-01, 9.408749920861290e-02, 2.534493693342674e-03, 3.549307035610785e-03, 2.223200817152228e-01, 1.150980688081442e-03, 1.064819013578358e-02, 5.496731016922064e-04, 7.510538770810869e-05, 2.671729643158701e-04, 1.001831085043124e-02, 4.562632440896856e-04, 4.562632440896848e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
