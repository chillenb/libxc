
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_6_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_6", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.082652281187574e+01, -2.082660853141978e+01, -2.082702492383624e+01, -2.082562418705901e+01, -2.082656768692573e+01, -2.082656768692573e+01, -3.154275350270113e+00, -3.154316536022383e+00, -3.155676233852480e+00, -3.155399964787993e+00, -3.154301785440063e+00, -3.862741776096279e+00, -6.029220933077510e-01, -7.452553201920816e-01, -7.247854062859402e-01, -7.308181998120595e-01, -7.457524844123897e-01, -7.457524844123897e-01, -2.038889919750135e-01, -2.066771966742889e-01, -7.377357096319040e-01, -1.456593358805993e-01, -2.047251904966513e-01, -2.047251904966513e-01, -1.108080863890995e-02, -1.160681624739334e-02, -4.725569328721090e-02, -5.315042116594097e-03, -1.148586475453889e-02, -1.148586475453889e-02, -5.574233254378623e+00, -5.574454769262679e+00, -5.574252653608275e+00, -5.184928813258419e+00, -5.574350895621976e+00, -5.574350895621976e+00, -1.759337550587009e+00, -1.773656737859402e+00, -1.753589859514215e+00, -1.764642618055470e+00, -1.776691722915189e+00, -2.197196938373830e+00, -6.370639632314905e-01, -6.806214748538244e-01, -6.087823942936241e-01, -6.277279108534998e-01, -6.579058394260270e-01, -5.701152693261450e-01, -9.666119368284433e-02, -2.040781945334962e-01, -9.528454376739827e-02, -2.092105637095981e+00, -1.236023399553418e-01, -1.236023399553418e-01, -4.819895113018842e-03, -5.859775729549946e-03, -4.391947651060932e-03, -6.113179858916418e-02, -5.018917330216706e-03, -5.339150883399142e-03, -6.322422379766238e-01, -6.318201723755568e-01, -6.132619357124854e-01, -6.320918352392879e-01, -6.320353604309031e-01, -6.320353604309031e-01, -6.129857714084966e-01, -5.530924767094022e-01, -5.716344310619619e-01, -5.876718478087406e-01, -5.796235698621497e-01, -5.178456445098822e-01, -7.171896301488606e-01, -2.118379928651160e-01, -3.071052390585858e-01, -3.158625833253478e-01, -3.468814272395329e-01, -3.468814272395327e-01, -4.126545947262864e-01, -4.375316611398465e-02, -5.929781515253247e-02, -3.678209495342246e-01, -7.874055747823831e-02, -8.631616539290092e-02, -1.298630576193769e-02, -1.604258213244428e-03, -3.047537315290373e-03, -8.234593870386166e-02, -4.537552530023134e-03, -4.537552530023126e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_6_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_6", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.994151396218841e+01, -2.994160450842927e+01, -2.994206031362776e+01, -2.994057833132122e+01, -2.994156125612392e+01, -2.994156125612392e+01, -4.455482261747853e+00, -4.455652500943629e+00, -4.460927871859853e+00, -4.459242439574266e+00, -4.455550713516190e+00, -4.246049841147415e+00, -7.647462456870052e-01, -8.431870297996920e-01, -8.287553895035540e-01, -8.317437578127055e-01, -8.435252281076874e-01, -8.435252281076874e-01, -2.333859649621247e-01, -2.357633323609029e-01, -9.103112709037622e-01, -1.771047376433471e-01, -2.341127560460931e-01, -2.341127560460931e-01, -1.383711283274502e-02, -1.449354354164113e-02, -5.882662341759556e-02, -6.638910947197386e-03, -1.434250293623285e-02, -1.434250293623285e-02, -6.864534012457141e+00, -6.868658718542445e+00, -6.864983991298977e+00, -7.331419786371840e+00, -6.866610909936888e+00, -6.866610909936888e+00, -2.417991880866926e+00, -2.451416267260574e+00, -2.403964745826337e+00, -2.430179218246761e+00, -2.459089116579907e+00, -2.412632879608563e+00, -7.176679459152685e-01, -8.118878684779542e-01, -6.740054243592069e-01, -7.168357520708828e-01, -7.539421059626408e-01, -8.296452049848155e-01, -1.247024543578436e-01, -2.416604136600556e-01, -1.227248836419874e-01, -2.402036983974298e+00, -1.507291726187831e-01, -1.507291726187831e-01, -6.425751606346912e-03, -7.319213489247280e-03, -5.485771614892256e-03, -8.039213192050637e-02, -6.691005814161950e-03, -6.668951862024527e-03, -8.262246290577779e-01, -8.097131112273295e-01, -8.397897931692716e-01, -8.201551910550771e-01, -8.178588912900137e-01, -8.178588912900137e-01, -7.954409766122656e-01, -6.195587271108350e-01, -6.619383415235567e-01, -7.095102109810159e-01, -6.843354968516207e-01, -7.480336469522642e-01, -8.396390988036447e-01, -2.626151397890911e-01, -3.458502379234632e-01, -4.356732627025175e-01, -3.834285932085802e-01, -3.834285932085799e-01, -5.866467912456557e-01, -5.449898486911685e-02, -7.370584665141591e-02, -4.046518274440500e-01, -1.020079468147783e-01, -1.064822856868885e-01, -1.621730743718864e-02, -2.003921855306274e-03, -3.806690124433901e-03, -1.015884160985933e-01, -5.667745932627067e-03, -5.667745932627058e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_6_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_6", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.354664832196870e-08, -1.354659125150184e-08, -1.354623288612273e-08, -1.354717712217931e-08, -1.354661899388589e-08, -1.354661899388589e-08, -1.241458189983410e-05, -1.241645093357833e-05, -1.247085556323789e-05, -1.244581938256131e-05, -1.241486451767655e-05, -1.426971549623647e-05, -4.344155733590430e-03, -5.144420633059763e-03, -4.801658217747901e-03, -5.038206473112828e-03, -5.153381692941211e-03, -5.153381692941211e-03, -7.524023746883354e-01, -7.570018916821676e-01, -1.238142643933789e-03, -5.339963387554892e-01, -7.531725549032978e-01, -7.531725549032978e-01, -1.097293301009546e+02, -9.974186312742016e+01, -3.986128001882518e+00, -2.808394535649873e+02, -1.041680304935863e+02, -1.041680304935863e+02, -4.325920967287213e-06, -4.325562583725771e-06, -4.325897995068328e-06, -4.088489782537263e-06, -4.325723025372619e-06, -4.325723025372619e-06, -1.054858191265346e-04, -1.060098824037920e-04, -1.051095953999398e-04, -1.056192683092852e-04, -1.062989008519577e-04, -1.230539760598808e-04, -2.299946751244750e-02, -1.924004176772051e-02, -2.537158403129745e-02, -2.524946715145906e-02, -2.106800452151840e-02, -1.899979331927211e-02, -5.058863245798807e-01, -3.616693360766730e-01, -5.773868885613128e-01, -2.067335421854722e-04, -8.808619542665672e-01, -8.808619542665672e-01, -1.497820096359429e+02, -2.597321997618382e+02, -9.168708078885356e+02, -9.336798767943111e-01, -1.395606702282587e+02, -3.472087617185283e+02, -2.586614799071822e-02, -2.612460069593313e-02, -2.540992535949016e-02, -2.597022621144306e-02, -2.600663496407783e-02, -2.600663496407783e-02, -2.936150465424222e-02, -3.968631245855415e-02, -3.758556705450954e-02, -3.483048103393720e-02, -3.631075463491230e-02, -3.338682413753272e-02, -1.537015661656181e-02, -2.090649137094757e-01, -1.926022840112881e-01, -1.039691842401844e-01, -1.631721331907514e-01, -1.631721331907514e-01, -4.474897874307118e-02, -4.413100000397300e+00, -2.403697155833850e+00, -1.767970901494976e-01, -9.368974715816607e-01, -1.589980804290769e+00, -4.984318104880801e+01, -3.636410784994921e+03, -1.413838585484387e+03, -1.912162921753815e+00, -5.697836926845986e+02, -5.697836926845996e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_6_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_6", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.273945163423527e-03, 1.273959420595582e-03, 1.274019138753804e-03, 1.273787522166774e-03, 1.273952691723414e-03, 1.273952691723414e-03, 1.880451843766993e-03, 1.881746012535586e-03, 1.920725647785814e-03, 1.905452082882741e-03, 1.880802122398635e-03, 8.429242981839190e-03, -3.659631073397450e-03, 2.455593387357658e-02, 2.152896464334356e-02, 2.295003430264638e-02, 2.463432695653749e-02, 2.463432695653749e-02, 7.525031790544576e-02, 7.834416452101392e-02, -3.190164394355310e-03, 2.113675776433227e-02, 7.611698393552718e-02, 7.611698393552718e-02, 1.843417684081438e-03, 1.926030102081245e-03, 5.260489230778524e-03, 5.200025674041470e-04, 1.949273881540722e-03, 1.949273881540720e-03, 7.305753209137688e-03, 7.307071177055251e-03, 7.305906435250849e-03, 6.064121284581123e-03, 7.306407595623236e-03, 7.306407595623236e-03, 1.386619528689589e-03, 1.705953510516474e-03, 1.249203375817647e-03, 1.498225420073162e-03, 1.790919629344204e-03, 1.367366885736520e-02, 5.851868043889226e-02, 5.885945552819508e-02, 5.744256008650392e-02, 6.100181836490123e-02, 5.851972551181264e-02, 3.301469657149095e-02, -2.503122566636853e-03, 3.834997804849979e-02, -2.804197768091098e-03, 1.845297820611972e-02, 2.132318342326629e-02, 2.132318342326629e-02, -6.664943142365940e-07, 6.445086744820014e-04, 9.579735129856429e-04, -6.855013287654009e-04, -7.675496113399411e-07, 6.517148996351563e-04, 6.537642135051951e-02, 6.520483513764098e-02, 6.149752622516207e-02, 6.532292363361056e-02, 6.529966350036850e-02, 6.529966350036850e-02, 6.735999577261273e-02, 6.638190013451023e-02, 6.827566981207481e-02, 6.866350385165686e-02, 6.860145837557476e-02, 4.742899870807596e-02, 5.504223690939659e-02, -1.163227342270138e-02, 6.369719122418181e-02, 8.887627164651550e-03, 7.402185372536997e-02, 7.402185372536993e-02, 1.716945938143126e-02, 4.612727637806479e-03, 6.298196616178693e-03, 8.980035450464979e-02, -2.333643553101839e-03, 1.304445034521224e-02, 1.347591573280879e-03, 1.851155358977326e-04, 4.934388058265869e-04, 1.362036595027647e-02, 6.564614179258499e-04, 6.564614179258521e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
