
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_6_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_6", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.290631962139748e+01, -2.290636664827705e+01, -2.290669356032577e+01, -2.290592598759613e+01, -2.290634338052713e+01, -2.290634338052713e+01, -3.454249706338280e+00, -3.454289764069243e+00, -3.455752423109007e+00, -3.457334355656295e+00, -3.454265221519917e+00, -3.454265221519917e+00, -6.523912810878644e-01, -6.521012783189104e-01, -6.453485381036752e-01, -6.525035707159225e-01, -6.522866472720359e-01, -6.522866472720359e-01, -1.990259571998047e-01, -2.010557875537542e-01, -7.622266052125733e-01, -1.395676514287681e-01, -1.995834914859973e-01, -1.995834914859973e-01, -1.106208737638506e-02, -1.158208248601120e-02, -4.670062899601103e-02, -5.189476053183278e-03, -1.146460278062070e-02, -1.146460278062071e-02, -5.571593287135803e+00, -5.571844183147057e+00, -5.571649228314791e+00, -5.571842709968380e+00, -5.571680869941177e+00, -5.571680869941177e+00, -2.125166526508262e+00, -2.146048743283420e+00, -2.125026599957954e+00, -2.141686318404243e+00, -2.139328756334313e+00, -2.139328756334313e+00, -5.958630024708783e-01, -6.320303587527104e-01, -5.535855715480442e-01, -5.642227556332073e-01, -6.231411325967109e-01, -6.231411325967109e-01, -1.041738771871406e-01, -2.011982005815842e-01, -1.028406951826187e-01, -1.865723737756336e+00, -1.212033090624270e-01, -1.212033090624270e-01, -5.058072820773565e-03, -5.747285830027173e-03, -4.351042638176384e-03, -6.421043300747653e-02, -5.211689025592906e-03, -5.211689025592905e-03, -6.262745973335008e-01, -6.260662285628332e-01, -6.261431378452834e-01, -6.261988612887721e-01, -6.261686503508830e-01, -6.261686503508830e-01, -6.014435274470181e-01, -5.477388430972302e-01, -5.640693546179587e-01, -5.782218315119309e-01, -5.706584209458426e-01, -5.706584209458426e-01, -6.549648997806526e-01, -2.550418952858782e-01, -2.983972384035710e-01, -3.635320458304629e-01, -3.318747050650234e-01, -3.318747050650233e-01, -4.785339740900417e-01, -4.344949004385715e-02, -5.842580337137025e-02, -3.384926283104049e-01, -8.482894495625805e-02, -8.482894495625805e-02, -1.268819296224216e-02, -1.556911768114546e-03, -3.026547948091246e-03, -8.083292470408927e-02, -4.425155831849146e-03, -4.425155831849137e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_6_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_6", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.770507595887159e+01, -2.770518714272429e+01, -2.770564152204609e+01, -2.770381960877379e+01, -2.770513496845292e+01, -2.770513496845292e+01, -4.385560637188522e+00, -4.385654830362765e+00, -4.388605635752957e+00, -4.387278796085981e+00, -4.385611022404178e+00, -4.385611022404178e+00, -7.962180429553117e-01, -7.954988905079233e-01, -7.797587342463848e-01, -7.873244601488167e-01, -7.959578371080330e-01, -7.959578371080330e-01, -2.306162812451584e-01, -2.327288342743316e-01, -9.342849467464545e-01, -1.729784886363128e-01, -2.312256330238512e-01, -2.312256330238512e-01, -1.384065841387656e-02, -1.449817278963113e-02, -5.882746990846551e-02, -6.661391236158653e-03, -1.434648799975709e-02, -1.434648799975711e-02, -6.867847247763676e+00, -6.871938407031672e+00, -6.868251748814044e+00, -6.871433563824955e+00, -6.869963560049055e+00, -6.869963560049055e+00, -2.403818077268247e+00, -2.419153563391871e+00, -2.396674516736733e+00, -2.408333636726016e+00, -2.424228613095747e+00, -2.424228613095747e+00, -7.499772095999477e-01, -8.653267926034415e-01, -7.042692087088005e-01, -7.717493302043464e-01, -7.860973563289412e-01, -7.860973563289412e-01, -1.300905554848782e-01, -2.395270317634653e-01, -1.283024968489782e-01, -2.604386192611813e+00, -1.492888475922596e-01, -1.492888475922596e-01, -6.417785984599797e-03, -7.339958790915382e-03, -5.493803565740534e-03, -8.167724438808498e-02, -6.691630193733662e-03, -6.691630193733663e-03, -8.341131961575676e-01, -8.172490285478758e-01, -8.232524436558603e-01, -8.279266822520929e-01, -8.255863817620245e-01, -8.255863817620245e-01, -8.105452148921424e-01, -6.236505002655280e-01, -6.696401983413028e-01, -7.207398665779575e-01, -6.942815444578814e-01, -6.942815444578815e-01, -9.026648552059771e-01, -2.958783521816026e-01, -3.423821639967686e-01, -4.336216399698566e-01, -3.821189802989031e-01, -3.821189802989034e-01, -5.646487172143204e-01, -5.451113166372588e-02, -7.363865237784868e-02, -4.161907300880862e-01, -1.059483151882223e-01, -1.059483151882223e-01, -1.626657942569583e-02, -2.012064645897427e-03, -3.810922764044960e-03, -1.010433124706721e-01, -5.687645298585094e-03, -5.687645298585078e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_6_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_6", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.455314003004120e-08, -1.455305878004095e-08, -1.455262337961131e-08, -1.455396425929167e-08, -1.455309767594060e-08, -1.455309767594060e-08, -1.319884680852443e-05, -1.320082396061661e-05, -1.325870212798808e-05, -1.323698240294331e-05, -1.319911303675806e-05, -1.319911303675806e-05, -4.631261604048663e-03, -4.620412376956110e-03, -4.341594056095739e-03, -4.582335789957545e-03, -4.627887719373607e-03, -4.627887719373607e-03, -7.368550499092513e-01, -7.395803606453304e-01, -1.284976045220748e-03, -4.834138568625289e-01, -7.368967056085839e-01, -7.368967056085839e-01, -1.085461088530371e+02, -9.838511568262986e+01, -3.725636199885666e+00, -2.329528367366495e+02, -1.029386199526960e+02, -1.029386199526959e+02, -4.324305994181710e-06, -4.323965023562284e-06, -4.324305305961879e-06, -4.324037486129678e-06, -4.324089386470549e-06, -4.324089386470549e-06, -1.201399797166386e-04, -1.208405287550772e-04, -1.200054772835607e-04, -1.206801019952983e-04, -1.207480548548253e-04, -1.207480548548253e-04, -2.191803669293700e-02, -1.819101203396488e-02, -2.372856838572007e-02, -2.337282632836338e-02, -2.024540540074612e-02, -2.024540540074612e-02, -7.699724469758618e-01, -3.553196559448408e-01, -8.689558562913917e-01, -1.902275227940924e-04, -8.398833222826630e-01, -8.398833222826630e-01, -3.382715450578690e+02, -2.246443541558091e+02, -8.596739430380368e+02, -1.598984417126317e+00, -2.873417961217132e+02, -2.873417961217128e+02, -2.566361266831049e-02, -2.593066007715192e-02, -2.584424446834927e-02, -2.577067019585045e-02, -2.580815691437055e-02, -2.580815691437055e-02, -2.890614548675158e-02, -3.940778188190217e-02, -3.721375310922337e-02, -3.439676179603729e-02, -3.588393088053374e-02, -3.588393088053374e-02, -1.436849111921967e-02, -2.501683103561108e-01, -1.883173843712200e-01, -1.144370639819941e-01, -1.580414736366771e-01, -1.580414736366771e-01, -4.950767618508837e-02, -4.240197293210048e+00, -2.220512324687039e+00, -1.667845654682474e-01, -1.490207275341926e+00, -1.490207275341926e+00, -4.173624947688284e+01, -2.832015519556916e+03, -1.349174455391698e+03, -1.783623702410307e+00, -4.672682572829721e+02, -4.672682572829729e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_6_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_6", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_6_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_6", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.706728393000406e-03, 1.706729588733174e-03, 1.706747729600625e-03, 1.706729683564484e-03, 1.706728893501805e-03, 1.706728893501805e-03, 4.551506880663820e-03, 4.552818971683335e-03, 4.593364611533117e-03, 4.594442929749363e-03, 4.551739248658731e-03, 4.551739248658731e-03, 5.844876882820188e-03, 5.845233780949101e-03, 6.105502706448894e-03, 7.331838540378280e-03, 5.846623666543265e-03, 5.846623666543265e-03, 6.323070744651621e-02, 6.438275751009669e-02, -6.740189135207507e-04, 1.135064386564784e-02, 6.339539171909638e-02, 6.339539171909638e-02, 1.786858139130419e-03, 1.851572871927889e-03, 4.228232710830396e-03, 2.991675779130345e-04, 1.883802892894051e-03, 1.883802892894076e-03, 7.297013344168860e-03, 7.298449703626813e-03, 7.297289835366816e-03, 7.298398315268363e-03, 7.297579110757201e-03, 7.297579110757201e-03, 1.172490118233903e-02, 1.216671303251869e-02, 1.177818141115947e-02, 1.214229532166901e-02, 1.195170991339699e-02, 1.195170991339699e-02, 4.470556335697755e-02, 4.703248102222418e-02, 3.646907068831123e-02, 4.023202476317824e-02, 4.807346733897079e-02, 4.807346733897079e-02, 9.148074019068485e-03, 3.375369278250569e-02, 9.928186831907562e-03, 1.191758359094478e-02, 1.654250582942743e-02, 1.654250582942743e-02, 4.677480499462596e-04, 4.212557085304352e-04, 7.957229262967835e-04, 3.908037295322898e-03, 3.721787052808505e-04, 3.721787052808512e-04, 6.424567851807708e-02, 6.398325075525989e-02, 6.408361559929157e-02, 6.415679407333370e-02, 6.412009498582819e-02, 6.412009498582819e-02, 6.494613982611545e-02, 6.391420901415315e-02, 6.531242163359458e-02, 6.563801123942650e-02, 6.540048594724658e-02, 6.540048594724661e-02, 4.056726672799340e-02, 4.777932920463206e-02, 5.276424851670752e-02, 5.031641075673864e-02, 5.714152475624696e-02, 5.714152475624702e-02, 5.244727933199349e-02, 4.068865593573765e-03, 4.805587238918018e-03, 5.883463356603473e-02, 9.932459228908102e-03, 9.932459228908093e-03, 7.941994241556958e-04, 8.743461462761537e-05, 4.314634203395821e-04, 1.015390578948716e-02, 3.645152495011137e-04, 3.645152495011035e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
