
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_11_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.116990272750932e+01, -2.117000003131824e+01, -2.117046772276602e+01, -2.116887840377531e+01, -2.116995370067739e+01, -2.116995370067739e+01, -3.120361579300020e+00, -3.120423079872769e+00, -3.122393698498011e+00, -3.121877938260849e+00, -3.120393492185718e+00, -3.889167300023773e+00, -5.858293231859197e-01, -7.269115186511463e-01, -7.031917401367141e-01, -7.106741843499915e-01, -7.274989620850176e-01, -7.274989620850176e-01, -1.977133993188049e-01, -2.007510371508779e-01, -7.138893135595759e-01, -1.378052318676446e-01, -1.986176784607099e-01, -1.986176784607099e-01, -1.039579260756879e-02, -1.088936622206731e-02, -4.437210675933186e-02, -4.986112019836048e-03, -1.077589254399205e-02, -1.077589254399205e-02, -5.760022772189601e+00, -5.760441014105464e+00, -5.760063868769288e+00, -5.300948701831975e+00, -5.760239573850034e+00, -5.760239573850034e+00, -1.729985239312997e+00, -1.745956024038481e+00, -1.723519614188128e+00, -1.735864548980846e+00, -1.749437598940649e+00, -2.198262572625769e+00, -6.502298694481355e-01, -7.015410186239128e-01, -6.170087227021203e-01, -6.428684504216126e-01, -6.742599199556247e-01, -5.741311668943915e-01, -9.348120241224767e-02, -1.950097972606821e-01, -9.214318600522273e-02, -2.144899842835890e+00, -1.168175135038454e-01, -1.168175135038454e-01, -4.669623959734513e-03, -5.497156413146848e-03, -4.120168814323332e-03, -5.917764947066851e-02, -4.862437673876089e-03, -5.008743274053028e-03, -6.544254258469543e-01, -6.538693081429175e-01, -6.316872508126624e-01, -6.542529118515270e-01, -6.541799744358544e-01, -6.541799744358544e-01, -6.344774090980903e-01, -5.635086326195271e-01, -5.869435281442154e-01, -6.064076889373410e-01, -5.967633883237957e-01, -5.251525226436606e-01, -7.376035672887732e-01, -2.051714259287354e-01, -3.003045190385663e-01, -3.108053241040464e-01, -3.435776261070063e-01, -3.435776261070062e-01, -4.089574832840432e-01, -4.107648068859755e-02, -5.570322102566894e-02, -3.707975768876528e-01, -7.616469784803734e-02, -8.126760918059091e-02, -1.218334928041579e-02, -1.504961032135574e-03, -2.858920892664964e-03, -7.752865933954287e-02, -4.256742351082241e-03, -4.256742351082234e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_11_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.106360397724733e+01, -3.106369881676927e+01, -3.106417563304816e+01, -3.106262345820099e+01, -3.106365351771544e+01, -3.106365351771544e+01, -4.557607249635556e+00, -4.557814603849884e+00, -4.564207307869939e+00, -4.562098055184237e+00, -4.557686490656855e+00, -4.433991629033330e+00, -7.572099298809942e-01, -8.602360486441341e-01, -8.387597500994457e-01, -8.447966171521051e-01, -8.607524877460996e-01, -8.607524877460996e-01, -2.360101771555515e-01, -2.390430554030485e-01, -8.884323674554541e-01, -1.711585126712619e-01, -2.369234746545364e-01, -2.369234746545364e-01, -1.319332666494031e-02, -1.381934119843850e-02, -5.614919542692910e-02, -6.329504057187380e-03, -1.367532879422980e-02, -1.367532879422979e-02, -7.071077734133618e+00, -7.075295983863533e+00, -7.071537675708746e+00, -7.605456128936173e+00, -7.073201295736165e+00, -7.073201295736165e+00, -2.454450673643495e+00, -2.492272514191342e+00, -2.438483826399774e+00, -2.468205690505278e+00, -2.501057818415912e+00, -2.517383812057546e+00, -7.456831946554554e-01, -8.373240427388129e-01, -7.029036630881278e-01, -7.429999079735385e-01, -7.810229825594741e-01, -8.591429708548729e-01, -1.203945496194787e-01, -2.380445561902522e-01, -1.184732816651326e-01, -2.487595092193397e+00, -1.453943848048375e-01, -1.453943848048375e-01, -6.225354742687456e-03, -6.978134241015448e-03, -5.230142311492842e-03, -7.774869152780561e-02, -6.482325999282003e-03, -6.358166283084796e-03, -8.532326874259456e-01, -8.349519700310047e-01, -8.701027054621480e-01, -8.464498593160004e-01, -8.439025115830182e-01, -8.439025115830182e-01, -8.209495744380617e-01, -6.444806119713018e-01, -6.846917657604920e-01, -7.312400277372024e-01, -7.063483657200902e-01, -7.758972395897004e-01, -8.673666656622587e-01, -2.572386393927843e-01, -3.540674972697629e-01, -4.426835129577888e-01, -3.979161204750357e-01, -3.979161204750353e-01, -6.012312342782505e-01, -5.200728057362961e-02, -7.039163420823591e-02, -4.225281604782613e-01, -9.851293305606722e-02, -1.020401923997741e-01, -1.546256803264523e-02, -1.910506809090576e-03, -3.629257600153736e-03, -9.734858745892983e-02, -5.403605705985944e-03, -5.403605705985933e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_11_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.560393468896320e-08, -1.560388903913136e-08, -1.560356400185717e-08, -1.560432478114600e-08, -1.560391148953547e-08, -1.560391148953547e-08, -1.317941236083292e-05, -1.318171785013148e-05, -1.324917442575676e-05, -1.321882949809337e-05, -1.317980157331065e-05, -1.585006290796751e-05, -4.170662236014826e-03, -5.275410849051886e-03, -4.843173582890397e-03, -5.119207386571803e-03, -5.286798226328404e-03, -5.286798226328404e-03, -7.576301954118113e-01, -7.664023729059564e-01, -1.108315273347619e-03, -4.675795292256853e-01, -7.595830006403334e-01, -7.595830006403334e-01, -7.842058117871430e+01, -7.131276450820202e+01, -2.967671198088781e+00, -1.999219753511402e+02, -7.447790668409020e+01, -7.447790668409014e+01, -5.145802423566078e-06, -5.146120075137833e-06, -5.145857561426866e-06, -4.782431512588656e-06, -5.145940543704362e-06, -5.145940543704362e-06, -1.093231119497496e-04, -1.103819593237669e-04, -1.087045646159408e-04, -1.096445927009882e-04, -1.108148195587333e-04, -1.346789427411303e-04, -2.638547151365154e-02, -2.267473932535362e-02, -2.861905357928746e-02, -2.921549153314291e-02, -2.442327033087449e-02, -2.133326579371626e-02, -2.448264582377224e-01, -3.424852343682662e-01, -2.896098818399966e-01, -2.398912997086322e-04, -7.615607548580354e-01, -7.615607548580354e-01, 3.401757696800315e+01, -1.849386398241468e+02, -6.529083716011432e+02, -1.786846515228761e-01, 3.162604219951346e+01, -2.472084967356453e+02, -3.116198749580823e-02, -3.135815538932131e-02, -3.032184186070326e-02, -3.124702631296512e-02, -3.127501256150041e-02, -3.127501256150041e-02, -3.532799358570026e-02, -4.532868653363282e-02, -4.379217929802869e-02, -4.120437932578355e-02, -4.264027223597475e-02, -3.821569128540160e-02, -1.799155955178065e-02, -1.914355418323882e-01, -1.989573138564042e-01, -1.080726745136269e-01, -1.743328874148646e-01, -1.743328874148646e-01, -4.781529873813986e-02, -3.262012387496542e+00, -1.820355621941268e+00, -1.969448517556451e-01, -4.077522844440877e-01, -1.286971659330810e+00, -3.559875799434005e+01, -2.587213393342998e+03, -1.006185898044743e+03, -1.547321738546678e+00, -4.056332509298349e+02, -4.056332509298356e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_11_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.663401930444586e-03, 1.663418263675399e-03, 1.663486266770056e-03, 1.663220980087848e-03, 1.663410557759755e-03, 1.663410557759755e-03, 2.989708316777613e-03, 2.991329154279665e-03, 3.040110895935449e-03, 3.020948936486940e-03, 2.990143995758112e-03, 1.126645314435746e-02, -2.233721810273447e-03, 2.940383695411535e-02, 2.510634118394203e-02, 2.708044296013409e-02, 2.951721731014046e-02, 2.951721731014046e-02, 8.751736723524013e-02, 9.191107620048931e-02, -2.758801189698506e-03, 1.993725646543430e-02, 8.874598230912416e-02, 8.874598230912416e-02, 1.319942921252322e-03, 1.379915374634025e-03, 3.987345576636264e-03, 3.702730286921298e-04, 1.396583117028146e-03, 1.396583117028139e-03, 9.647406211610671e-03, 9.645821193428827e-03, 9.647241235142151e-03, 7.794737322406779e-03, 9.646603757367036e-03, 9.646603757367036e-03, 2.838274393885907e-03, 3.239418791088890e-03, 2.664748710904891e-03, 2.978524559396059e-03, 3.346286674645426e-03, 1.798782844961863e-02, 7.974017302613801e-02, 7.907568925138285e-02, 7.774200737420210e-02, 8.309430706648349e-02, 7.967236841640478e-02, 4.448489738093076e-02, -2.543801541367204e-03, 4.049499045021120e-02, -2.845162294030660e-03, 2.511464103402962e-02, 1.976578155778677e-02, 1.976578155778677e-02, -6.968661000840915e-07, 4.590779503980274e-04, 6.824503498317358e-04, -7.087669574130578e-04, -8.025190843198851e-07, 4.641666913056555e-04, 8.265648368739566e-02, 8.375342700098663e-02, 7.748118126107453e-02, 8.308157354696018e-02, 8.323590860264296e-02, 8.323590860264296e-02, 8.566569413799893e-02, 9.037168790547775e-02, 9.274349373407076e-02, 9.170003909042335e-02, 9.257579217173958e-02, 6.235732017479646e-02, 7.451471343735874e-02, -9.572558227211448e-03, 7.716148865638098e-02, 1.730411094133393e-02, 9.434903379326688e-02, 9.434903379326681e-02, 2.636368079348984e-02, 3.461931362823193e-03, 4.886520949319707e-03, 1.203509539244891e-01, -2.381056579876783e-03, 1.106703407492643e-02, 9.640424033100490e-04, 1.317087086984052e-04, 3.512157037293883e-04, 1.155133774548579e-02, 4.674721646110643e-04, 4.674721646110669e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
