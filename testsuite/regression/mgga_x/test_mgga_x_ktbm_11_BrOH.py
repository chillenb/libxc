
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_11_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.359130678720770e+01, -2.359136165394150e+01, -2.359173753941694e+01, -2.359084294759352e+01, -2.359133454260355e+01, -2.359133454260355e+01, -3.441654941237611e+00, -3.441722999940545e+00, -3.444038668332868e+00, -3.445441816990575e+00, -3.441677195399030e+00, -3.441677195399030e+00, -6.338536579424098e-01, -6.334866995116201e-01, -6.247982952466342e-01, -6.326988089722454e-01, -6.337225042892131e-01, -6.337225042892131e-01, -1.928402001777296e-01, -1.950900269752085e-01, -7.359887606782549e-01, -1.326261909309614e-01, -1.934582855393396e-01, -1.934582855393396e-01, -1.038247749572292e-02, -1.087178976321435e-02, -4.397024897954660e-02, -4.904056536780460e-03, -1.076077082583490e-02, -1.076077082583491e-02, -5.756882643619175e+00, -5.757335382095303e+00, -5.756967153132507e+00, -5.757317103311099e+00, -5.757063463592814e+00, -5.757063463592814e+00, -2.117053929590095e+00, -2.141839845052582e+00, -2.115891909643659e+00, -2.135686267923862e+00, -2.135158478949061e+00, -2.135158478949061e+00, -6.033470656292079e-01, -6.447756376420221e-01, -5.554640463571409e-01, -5.703007981526658e-01, -6.342244244529364e-01, -6.342244244529364e-01, -9.846642761953517e-02, -1.922951532824201e-01, -9.722675716790757e-02, -1.885679632745659e+00, -1.147734751165815e-01, -1.147734751165815e-01, -4.762848411748611e-03, -5.422182730915236e-03, -4.091874644250983e-03, -6.071407586819151e-02, -4.925522803454143e-03, -4.925522803454143e-03, -6.472443022499990e-01, -6.469704284703134e-01, -6.470965212112624e-01, -6.471706941713833e-01, -6.471328547605684e-01, -6.471328547605684e-01, -6.206217410037657e-01, -5.574014745939074e-01, -5.781439161286269e-01, -5.952507157356188e-01, -5.862558618790672e-01, -5.862558618790672e-01, -6.655388500120462e-01, -2.463152690256132e-01, -2.913534014826607e-01, -3.610878167986448e-01, -3.276472753722370e-01, -3.276472753722370e-01, -4.804325358242779e-01, -4.085573716665271e-02, -5.506343687052454e-02, -3.384665638703982e-01, -8.009075801849962e-02, -8.009075801849960e-02, -1.198692668370949e-02, -1.474946061867164e-03, -2.844295414961624e-03, -7.633374214994856e-02, -4.183679528036339e-03, -4.183679528036333e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_11_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.859156779724111e+01, -2.859167768429324e+01, -2.859211524374559e+01, -2.859031346525817e+01, -2.859162623235051e+01, -2.859162623235051e+01, -4.534351433214931e+00, -4.534469815325385e+00, -4.538165130719418e+00, -4.536810803244456e+00, -4.534407638637241e+00, -4.534407638637241e+00, -7.987811675260522e-01, -7.979084178393520e-01, -7.784632117972234e-01, -7.888583804702792e-01, -7.984691131037911e-01, -7.984691131037911e-01, -2.326687289113861e-01, -2.353175062038438e-01, -9.167718149761194e-01, -1.673324674751127e-01, -2.334232344862278e-01, -2.334232344862278e-01, -1.320215973064131e-02, -1.383094773665468e-02, -5.628489358496634e-02, -6.388591776473062e-03, -1.368531086748198e-02, -1.368531086748199e-02, -7.074977521603202e+00, -7.079157408660790e+00, -7.075384067597527e+00, -7.078635265687415e+00, -7.077148039938230e+00, -7.077148039938230e+00, -2.500276760066924e+00, -2.518747396570912e+00, -2.492647161984738e+00, -2.506927592075741e+00, -2.523346438204774e+00, -2.523346438204774e+00, -7.788555006136987e-01, -8.971435657257615e-01, -7.304501944641715e-01, -8.002069846066845e-01, -8.156056507514911e-01, -8.156056507514911e-01, -1.250612036689866e-01, -2.357869282496256e-01, -1.233850143471903e-01, -2.699911049934377e+00, -1.441299804106710e-01, -1.441299804106710e-01, -6.139298338820409e-03, -7.031478236510518e-03, -5.249919400551781e-03, -7.839352281382155e-02, -6.417994173601982e-03, -6.417994173601981e-03, -8.626937153434867e-01, -8.439401814103202e-01, -8.505557989133958e-01, -8.557531698154386e-01, -8.531461419500712e-01, -8.531461419500712e-01, -8.389675056511881e-01, -6.487455031757587e-01, -6.932705856740297e-01, -7.442221514306963e-01, -7.176500922463780e-01, -7.176500922463781e-01, -9.361370458218378e-01, -2.970521809318977e-01, -3.494271061938576e-01, -4.489108314095420e-01, -3.946054883179009e-01, -3.946054883179009e-01, -5.875491501502469e-01, -5.209542332466099e-02, -7.052069573450707e-02, -4.317381643072607e-01, -1.017321217089498e-01, -1.017321217089498e-01, -1.559762907068285e-02, -1.932597057258331e-03, -3.639519104479514e-03, -9.703328592247494e-02, -5.456315579546084e-03, -5.456315579546074e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_11_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.713011903176107e-08, -1.713003808189528e-08, -1.712960372526986e-08, -1.713094383376204e-08, -1.713007678493340e-08, -1.713007678493340e-08, -1.426685060532622e-05, -1.426932945334702e-05, -1.434232462062269e-05, -1.431648936583746e-05, -1.426722239488439e-05, -1.426722239488439e-05, -4.546616894107618e-03, -4.533055994474882e-03, -4.191719908694360e-03, -4.471106059128227e-03, -4.542310190222429e-03, -4.542310190222429e-03, -7.348306062575592e-01, -7.408386380480300e-01, -1.168658479485429e-03, -3.976765226096196e-01, -7.357138750499426e-01, -7.357138750499426e-01, -7.682318186148619e+01, -6.948125087309471e+01, -2.615372650997740e+00, -1.356464585081990e+02, -7.281815316427365e+01, -7.281815316427361e+01, -5.143274203549024e-06, -5.143619101472328e-06, -5.143364220767228e-06, -5.143628291122033e-06, -5.143383101702101e-06, -5.143383101702101e-06, -1.299320634749667e-04, -1.313200178756060e-04, -1.296483798402355e-04, -1.308861960857287e-04, -1.311962988722497e-04, -1.311962988722497e-04, -2.474151722964747e-02, -2.106892380625354e-02, -2.616022609598663e-02, -2.638558743599521e-02, -2.316313962503641e-02, -2.316313962503641e-02, -5.991322665414557e-01, -3.333588864641467e-01, -6.807733017509022e-01, -2.150275284797600e-04, -7.046639108119946e-01, -7.046639108119946e-01, -2.190066924734704e+02, -1.377983077043791e+02, -5.758809790587670e+02, -1.071279912430462e+00, -1.668551504705073e+02, -1.668551504705070e+02, -3.084643373895778e-02, -3.105557976579243e-02, -3.099332975857017e-02, -3.093593941811879e-02, -3.096554634064880e-02, -3.096554634064880e-02, -3.462010011030820e-02, -4.489850567623287e-02, -4.321461868280584e-02, -4.052887562822809e-02, -4.197631622337079e-02, -4.197631622337077e-02, -1.646813275944245e-02, -2.473784060547267e-01, -1.926267757129964e-01, -1.225752136529995e-01, -1.667029598914549e-01, -1.667029598914550e-01, -5.457753721249497e-02, -3.028054540076496e+00, -1.572276779299032e+00, -1.819901954965247e-01, -1.150496323758564e+00, -1.150496323758563e+00, -2.471270907519378e+01, -1.508676376346054e+03, -9.190513633409896e+02, -1.371575303670224e+00, -2.680618893680729e+02, -2.680618893680734e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_11_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_11_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.287722762432675e-03, 2.287721814895389e-03, 2.287737011762892e-03, 2.287754426770029e-03, 2.287722070886546e-03, 2.287722070886546e-03, 6.300457927497548e-03, 6.302225701057361e-03, 6.356724247747360e-03, 6.356656630173475e-03, 6.300780329434309e-03, 6.300780329434309e-03, 8.162305377002826e-03, 8.140427530657942e-03, 7.872425990416361e-03, 9.465096542065935e-03, 8.156538992633780e-03, 8.156538992633780e-03, 7.382902023373160e-02, 7.592953278557131e-02, -1.759843749843719e-04, 1.010273593510857e-02, 7.423831737386370e-02, 7.423831737386370e-02, 1.267050553426727e-03, 1.310330103214890e-03, 3.020261326883593e-03, 1.742226711124211e-04, 1.335364114450011e-03, 1.335364114449994e-03, 9.634250849292036e-03, 9.632837973416858e-03, 9.634270730267446e-03, 9.633161861790314e-03, 9.633311907422934e-03, 9.633311907422934e-03, 1.541316210802776e-02, 1.605175110067605e-02, 1.544218204180383e-02, 1.596748901411696e-02, 1.580098297790591e-02, 1.580098297790591e-02, 6.086505425388607e-02, 6.194498852827333e-02, 5.009070674413866e-02, 5.440375746574239e-02, 6.506458367065888e-02, 6.506458367065888e-02, 7.493434619489011e-03, 3.553850233262353e-02, 8.205148667466397e-03, 1.604263240444577e-02, 1.493409150393702e-02, 1.493409150393702e-02, 3.029168490782564e-04, 2.584683820974369e-04, 5.332484932088657e-04, 2.666705961526616e-03, 2.161482896898427e-04, 2.161482896898490e-04, 8.086091418377091e-02, 8.185174395143878e-02, 8.151819777247257e-02, 8.124380485761237e-02, 8.138212007734472e-02, 8.138212007734472e-02, 8.186595507712867e-02, 8.699338638143801e-02, 8.852484107923235e-02, 8.723198632280882e-02, 8.793761180651773e-02, 8.793761180651778e-02, 5.395139264856925e-02, 5.446942801084242e-02, 6.435073939891335e-02, 6.746874177347688e-02, 7.373510187479926e-02, 7.373510187479942e-02, 7.095663725046882e-02, 2.950165613159202e-03, 3.481870948818499e-03, 8.031416917199474e-02, 8.036260989080411e-03, 8.036260989080394e-03, 4.706501576542666e-04, 4.657782589128677e-05, 2.939526140394553e-04, 8.179851695376385e-03, 2.091340144746962e-04, 2.091340144746962e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
