
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_2d_js17_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_2d_js17", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.524447808824303e+02, -1.524453370643203e+02, -1.524482270710689e+02, -1.524391113532214e+02, -1.524450707757313e+02, -1.524450707757313e+02, -9.971083508426371e+00, -9.971125512602109e+00, -9.972924023518356e+00, -9.973426731568324e+00, -9.971166530389930e+00, -9.779888253170812e+00, -7.968693206578397e-01, -1.240818273278244e+00, -1.268389528703800e+00, -1.249568132200177e+00, -1.240156020564412e+00, -1.240156020564412e+00, -3.372253058129394e-01, -3.333986496081625e-01, -1.031283792072491e+00, -4.824840259237089e-01, -3.361856238744721e-01, -3.361856238744721e-01, -6.589027816162921e-01, -6.511835107573271e-01, -5.779355844394553e-01, -1.123161170764447e+00, -6.444890161526655e-01, -6.444890161526659e-01, -1.787524854693376e+01, -1.788202352869371e+01, -1.787597278239957e+01, -1.833125709987523e+01, -1.787867738585808e+01, -1.787867738585808e+01, -4.179639916060812e+00, -4.225870441491810e+00, -4.160913442193303e+00, -4.196984904004506e+00, -4.235235504601131e+00, -4.377835341017665e+00, -7.596676416698295e-01, -7.849227779652821e-01, -7.458496921799008e-01, -7.302569212687622e-01, -7.747623420747727e-01, -7.126074644488288e-01, 7.607372774311640e-02, -4.504704847344510e-01, 6.972328713822493e-02, -3.995543394045038e+00, -4.426361726790711e-01, -4.426361726790711e-01, 8.005263214368149e+00, -1.017094661876642e+00, -7.354790331804515e-01, 2.212479414159754e-01, 7.459497263893507e+00, -9.824227006258506e-01, -6.914808840061728e-01, -6.863602202964726e-01, -7.103937059652244e-01, -6.884455565553307e-01, -6.877087665412202e-01, -6.877087665412202e-01, -6.574800839635384e-01, -6.383292791143859e-01, -6.328902202108226e-01, -6.330174187031288e-01, -6.322687505996820e-01, -5.982311796535125e-01, -8.554478319190676e-01, -1.372871070826499e-01, -4.566604066458296e-01, -3.033384259299390e-01, -4.551240727628764e-01, -4.551240727628762e-01, -4.562689658278486e-01, -6.041345503256865e-01, -5.712467357171580e-01, -4.175022153920128e-01, 9.426452702200258e-02, -4.652062711500746e-01, -8.332332769898253e-01, -1.456006850035834e+00, -9.805242257863777e-01, -4.464073995097412e-01, -9.314090853878275e-01, -9.314090853878283e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_2d_js17_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_2d_js17", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.287441365575168e+02, -2.287449688476532e+02, -2.287492952736934e+02, -2.287356539464060e+02, -2.287445703524197e+02, -2.287445703524197e+02, -1.504787213291228e+01, -1.504791419698352e+01, -1.504998549604980e+01, -1.505098535404712e+01, -1.504799106907805e+01, -1.358480603409563e+01, -1.282867214849669e+00, -5.608886808455069e-01, -4.720943095272499e-01, -5.063692468364420e-01, -5.631290345190585e-01, -5.631290345190585e-01, 1.954673621512642e-02, 1.489575000455201e-02, -1.690335695574870e+00, 1.130272339728200e-01, 1.821827527721800e-02, 1.821827527721800e-02, 2.156168705903832e-01, 2.130235682126815e-01, 1.814771137230046e-01, 3.685282307438954e-01, 2.108381800016360e-01, 2.108381800016355e-01, -2.755407343570581e+01, -2.756489994923123e+01, -2.755523456265634e+01, -2.752275244526286e+01, -2.755955721682836e+01, -2.755955721682836e+01, -6.354328932548868e+00, -6.420613981933672e+00, -6.327641359118858e+00, -6.379253832655053e+00, -6.433875279893684e+00, -5.242675353668294e+00, -7.335670160505398e-01, -9.623945600319159e-01, -6.187110213136550e-01, -7.493110820111105e-01, -8.215599297169049e-01, -1.088953775283379e+00, -1.315610383617971e-01, 6.624385188259595e-02, -1.265935102913388e-01, -5.599575565308945e+00, 1.098922432260641e-01, 1.098922432260641e-01, -4.003631296685583e+00, 3.336750400582782e-01, 2.413038860384064e-01, -1.565344504796098e-01, -3.730810889410179e+00, 3.223231224888234e-01, -1.052960140228133e+00, -1.001676358958636e+00, -1.069064009883509e+00, -1.033645508645501e+00, -1.026448437056142e+00, -1.026448437056142e+00, -9.856003291484633e-01, -5.558941906636100e-01, -6.642695962832393e-01, -7.749581480750406e-01, -7.169505932665146e-01, -9.111495679300710e-01, -1.006271311077472e+00, -2.743484858513936e-01, -5.293504316631409e-02, -4.900508428076070e-01, -1.282971703559075e-01, -1.282971703559073e-01, -7.153608358536786e-01, 1.910758720906479e-01, 1.756687068314257e-01, -2.136680821906076e-01, -1.155208898819056e-01, 1.316932874308395e-01, 2.726607697401190e-01, 4.779355075940831e-01, 3.218081327114370e-01, 1.269486849337814e-01, 3.056190634170095e-01, 3.056190634170088e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_2d_js17_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_2d_js17", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.492384901835788e-08, 1.492368650622985e-08, 1.492284147468118e-08, 1.492550520545740e-08, 1.492376431771513e-08, 1.492376431771513e-08, 5.162499265197894e-05, 5.162475679113100e-05, 5.160938200114118e-05, 5.159687007607112e-05, 5.162382729813405e-05, -7.182817699102232e-06, 6.823874423799585e-02, -1.475019231849232e-02, -1.602111535723530e-02, -1.572599899008064e-02, -1.472061520200538e-02, -1.472061520200538e-02, -3.291329050841059e+00, -3.168224161065139e+00, 2.791103156752433e-02, -7.781497585875710e+00, -3.252974437699605e+00, -3.252974437699605e+00, -4.827336522394390e+04, -4.136739848600986e+04, -3.320222852321111e+02, -4.422940715578868e+05, -4.320885717401125e+04, -4.320885717401125e+04, 2.570228501140525e-06, 2.591048005360487e-06, 2.572534982992233e-06, 8.553894905159943e-06, 2.580649325755771e-06, 2.580649325755771e-06, 6.719466563283453e-04, 6.524742847021406e-04, 6.799527626923086e-04, 6.645182236857455e-04, 6.487177953650470e-04, -1.244435335085030e-04, -3.162819527488342e-02, -2.070102014653821e-02, -3.927557983211735e-02, -3.319612992201367e-02, -2.670500649189335e-02, 1.316044267950114e-01, -5.614106401268722e+03, -2.627279944320707e+00, -5.685753545258320e+03, -9.926799146299936e-05, -1.451277763493650e+01, -1.451277763493650e+01, -3.061391988117683e+13, -3.358452862929715e+05, -1.143633011159796e+06, -2.055567026505436e+05, -2.237676008085429e+13, -4.759990321842753e+05, 1.032820886325908e-02, -1.173423493096099e-02, 1.450653450073703e-01, -6.740466337479729e-04, -3.743447030562012e-03, -3.743447030562012e-03, -1.777851502556524e-03, -5.959357297874116e-02, -4.961702044631364e-02, -3.957960155646033e-02, -4.495058963248900e-02, 2.267650317070007e-01, -1.717622119998740e-02, 1.061878165811329e+00, -6.452628721911298e-01, 1.208979632001443e+00, -4.194271459515946e-01, -4.194271459515947e-01, 4.299561078599889e-01, -4.213265042427186e+02, -1.519005068502009e+02, -3.497952075995654e-01, -2.110417756855620e+04, -4.783310560632919e+01, -2.368689062206417e+04, -2.462255371323235e+07, -3.392045177106780e+06, -5.794442313727525e+01, -8.715891310063633e+05, -8.715891310063670e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_2d_js17_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_2d_js17", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [3.760459841811008e-05, 3.760446150051923e-05, 3.760374985980254e-05, 3.760599398492105e-05, 3.760452705518984e-05, 3.760452705518984e-05, 5.724507986191780e-04, 5.724489965219569e-04, 5.723641266389125e-04, 5.723283865628490e-04, 5.724462139107170e-04, 3.830640931789852e-04, 6.820990298089896e-03, 2.758775485258722e-03, 2.753424907817209e-03, 2.770391225944092e-03, 2.758981158982687e-03, 2.758981158982687e-03, 1.296083644552492e-02, 1.294614534695909e-02, 5.198667394612042e-03, 1.243656719843992e-02, 1.295372414185889e-02, 1.295372414185889e-02, 3.641139806882728e-02, 3.585863399303116e-02, 1.931212913921074e-02, 3.683154698316640e-02, 3.629607062885014e-02, 3.629607062885014e-02, 2.725480693686469e-04, 2.726921256362912e-04, 2.725643386615760e-04, 3.125824434785974e-04, 2.726198375900506e-04, 2.726198375900506e-04, 1.358117191840134e-03, 1.343889102456039e-03, 1.363940295337226e-03, 1.352734959703630e-03, 1.341069183542428e-03, 7.828262351528824e-04, 4.332024647513342e-03, 4.405377877573233e-03, 4.392685977909629e-03, 4.533729737309485e-03, 4.293367821563391e-03, 7.935017613940097e-03, 1.226222400920568e-01, 1.082986800622765e-02, 1.250181009995167e-01, 9.462283558520801e-04, 1.432722837487553e-02, 1.432722837487553e-02, 1.147170572606417e+01, 3.747669465852636e-02, 5.373184843471345e-02, 2.497935947478834e-01, 1.079601148838226e+01, 4.017947798063747e-02, 6.398649853409460e-03, 5.810495131559072e-03, 8.051996707734779e-03, 6.140643813818524e-03, 6.057855221021212e-03, 6.057855221021212e-03, 6.403681949185448e-03, 5.133181520167036e-03, 5.247478463930298e-03, 5.459144105183229e-03, 5.332784521918528e-03, 9.475728277602572e-03, 3.982371083611662e-03, 3.343559751141257e-02, 8.452325294714721e-03, 1.787094493243916e-02, 7.892908869530370e-03, 7.892908869530370e-03, 1.215495567453714e-02, 1.947486833681518e-02, 1.739825887064127e-02, 8.098518282116558e-03, 1.676908045580012e-01, 1.659384116780983e-02, 2.876152843231077e-02, 5.638549717976664e-02, 5.324866202287674e-02, 1.746262880663584e-02, 4.516093247889170e-02, 4.516093247889171e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
