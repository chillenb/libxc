
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_2d_js17_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_2d_js17", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.506669963523814e+02, -1.506675862437559e+02, -1.506705712183386e+02, -1.506609046066597e+02, -1.506673044862188e+02, -1.506673044862188e+02, -9.642647613308307e+00, -9.642685103735054e+00, -9.644335619685526e+00, -9.644889997398133e+00, -9.642726727253704e+00, -9.642726727253704e+00, -9.356946380792910e-01, -9.365106366626316e-01, -9.672812730701994e-01, -9.744942442852083e-01, -9.359824650120756e-01, -9.359824650120756e-01, -3.152391519207206e-01, -3.089868969791962e-01, -1.117880209507051e+00, -3.818575126004042e-01, -3.131976915933619e-01, -3.131976915933619e-01, -6.505871157912109e-01, -6.407999160206771e-01, -5.287289772519311e-01, -8.907697907315968e-01, -6.355761508329297e-01, -6.355761508329297e-01, -1.787682307920137e+01, -1.788359320601777e+01, -1.787752683891246e+01, -1.788279067205313e+01, -1.788027644133068e+01, -1.788027644133068e+01, -4.289944307588324e+00, -4.324303841935109e+00, -4.285711033952746e+00, -4.312218437840984e+00, -4.319457053765035e+00, -4.319457053765035e+00, -7.016735657143008e-01, -7.423340364449020e-01, -6.558555553985280e-01, -6.491531565191211e-01, -7.304881802908944e-01, -7.304881802908944e-01, -4.522148943417493e-01, -4.290077883283695e-01, -4.328734802144905e-01, -3.978842057489059e+00, -4.007874923353415e-01, -4.007874923353415e-01, -8.906894300618828e-01, -8.521120529378678e-01, -6.814906724389529e-01, -4.635765662143543e-01, -7.766684127911376e-01, -7.766684127911379e-01, -6.969646872832518e-01, -6.845644369325610e-01, -6.869259834688973e-01, -6.900369966993606e-01, -6.883064689013957e-01, -6.883064689013957e-01, -6.666453459831193e-01, -6.302419734033616e-01, -6.228653578255087e-01, -6.224432409416187e-01, -6.211864210135848e-01, -6.211864210135848e-01, -7.963554714751152e-01, -4.378882012332151e-01, -4.264995840096524e-01, -4.170316738527178e-01, -4.147822274419473e-01, -4.147822274419472e-01, -5.588064118105350e-01, -5.740603595839653e-01, -5.118676487795978e-01, -3.549547684448951e-01, -4.173215782688294e-01, -4.173215782688293e-01, -6.679744877381187e-01, -1.058854988425540e+00, -9.280515786115101e-01, -3.970916361395658e-01, -7.274088584188244e-01, -7.274088584188250e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_2d_js17_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_2d_js17", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.303448615813462e+02, -2.303456889193987e+02, -2.303500113392188e+02, -2.303364506675815e+02, -2.303452926133649e+02, -2.303452926133649e+02, -1.451590561387926e+01, -1.451609052404775e+01, -1.452210015999600e+01, -1.451651811335851e+01, -1.451609714001713e+01, -1.451609714001713e+01, -8.801735299130339e-01, -8.756262568871309e-01, -7.530661399845039e-01, -7.689763275741762e-01, -8.785288846212458e-01, -8.785288846212458e-01, 9.734810175889948e-03, 3.644176113726319e-03, -1.305767366538685e+00, 8.339683688103904e-02, 7.859810553248216e-03, 7.859810553248216e-03, 2.132718058459923e-01, 2.100956585786193e-01, 1.675941012840865e-01, 3.038001365089090e-01, 2.083247187035009e-01, 2.083247187035009e-01, -2.755694889981256e+01, -2.756772375164595e+01, -2.755806815561425e+01, -2.756644624614638e+01, -2.756245524541265e+01, -2.756245524541265e+01, -5.240897966934951e+00, -5.322282414343091e+00, -5.188369134432491e+00, -5.251841608918531e+00, -5.364211099394228e+00, -5.364211099394228e+00, -8.261497114271439e-01, -1.108145191195039e+00, -7.462269849676437e-01, -9.219638596509905e-01, -9.013355404985162e-01, -9.013355404985162e-01, 1.227798838751218e-01, 5.857689931460129e-02, 1.168663288038597e-01, -6.152020651701735e+00, 9.789684275260888e-02, 9.789684275260888e-02, 2.974773112267552e-01, 2.875765573453104e-01, 2.261363263866787e-01, 1.435887272767750e-01, 2.650237651697402e-01, 2.650237651697395e-01, -1.075113748245139e+00, -1.022513688197392e+00, -1.041593325824063e+00, -1.056594548259559e+00, -1.049099246357096e+00, -1.049099246357096e+00, -1.028440692156044e+00, -5.662262346088902e-01, -6.803111074833786e-01, -7.988300365409995e-01, -7.374333387610734e-01, -7.374333387610734e-01, -1.186401810697498e+00, 7.412391113462743e-03, -7.125903495291019e-02, -2.671087253279958e-01, -1.588959472621694e-01, -1.588959472621693e-01, -4.579303619647594e-01, 1.825779848957375e-01, 1.589237286651644e-01, -2.767155666886809e-01, 1.181991922420351e-01, 1.181991922420349e-01, 2.265748154546091e-01, 3.678999275264721e-01, 3.070511887593040e-01, 1.130570012758077e-01, 2.488502057837513e-01, 2.488502057837513e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_2d_js17_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_2d_js17", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([9.614101651852661e-09, 9.614107943267191e-09, 9.613919012866804e-09, 9.613820285769471e-09, 9.614106783257451e-09, 9.614106783257451e-09, -2.547558222540831e-07, -2.527607381979590e-07, -1.971279942633742e-07, -2.879848007309635e-07, -2.536863901328053e-07, -2.536863901328053e-07, -1.716466826572055e-02, -1.723025980024741e-02, -1.883398503775044e-02, -1.821225709254901e-02, -1.718864149466432e-02, -1.718864149466432e-02, -3.445471246330509e+00, -3.335456990630457e+00, -7.759158254276316e-03, -9.154760989654394e+00, -3.413037126783011e+00, -3.413037126783011e+00, -4.868316239838784e+04, -4.181235946667218e+04, -3.524120517931557e+02, -5.159820433131248e+05, -4.361122116404698e+04, -4.361122116404698e+04, 2.588971715140218e-06, 2.609709014567889e-06, 2.591031870500675e-06, 2.607156135475673e-06, 2.599671736869090e-06, 2.599671736869090e-06, -1.277272351455725e-04, -1.229707496273838e-04, -1.302160995099404e-04, -1.264571279418627e-04, -1.212558640573132e-04, -1.212558640573132e-04, -3.110357131735771e-02, -5.148390815240090e-03, -4.004050597784010e-02, -2.255440954529188e-02, -2.544195082866448e-02, -2.544195082866448e-02, -2.363130446844384e+01, -2.717653973094994e+00, -2.546816531912668e+01, 1.965462444529308e-04, -1.554600795537892e+01, -1.554600795537892e+01, -5.853610607304521e+05, -3.777883493595130e+05, -1.203126818993123e+06, -1.208011825106048e+02, -5.564814680145122e+05, -5.564814680145120e+05, 4.187112644168169e-02, -3.815218635664247e-03, 5.621752987500607e-03, 1.673908405787441e-02, 1.061870266548636e-02, 1.061870266548636e-02, 6.912210540233092e-02, -5.988321001596750e-02, -4.947234642660985e-02, -3.769702945307307e-02, -4.421227862784445e-02, -4.421227862784445e-02, -4.981030006529296e-03, -1.210332450930842e+00, -6.747681803519670e-01, -2.853314426090200e-01, -4.448278259921879e-01, -4.448278259921880e-01, -9.414621291915136e-02, -4.359672637440400e+02, -1.635300110977451e+02, -3.838744299473566e-01, -5.150886253584243e+01, -5.150886253584242e+01, -2.743829620988832e+04, -3.042524840108220e+07, -3.518447030716090e+06, -6.275386071327203e+01, -1.027243292813654e+06, -1.027243292813658e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_2d_js17_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_2d_js17", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([3.553389209264164e-05, 3.553381231340849e-05, 3.553329869701783e-05, 3.553460825443268e-05, 3.553385133805475e-05, 3.553385133805475e-05, 4.381607228738186e-04, 4.381702099440498e-04, 4.384068260590550e-04, 4.378740463334119e-04, 4.381630804700415e-04, 4.381630804700415e-04, 3.456638304502067e-03, 3.452747575231006e-03, 3.345974402390001e-03, 3.324137147452721e-03, 3.455256211920408e-03, 3.455256211920408e-03, 1.347079568198129e-02, 1.352121442794153e-02, 2.930714664548093e-03, 1.433785496841841e-02, 1.348941287694262e-02, 1.348941287694262e-02, 3.670702736653609e-02, 3.622747160587923e-02, 2.043852612643928e-02, 4.262950734900262e-02, 3.661931367796490e-02, 3.661931367796490e-02, 2.727263876099200e-04, 2.728690677680433e-04, 2.727402513428512e-04, 2.728512004732711e-04, 2.728005037282121e-04, 2.728005037282121e-04, 8.040674101793429e-04, 8.002234818001319e-04, 8.021113454379760e-04, 7.991139558515990e-04, 8.040763477336158e-04, 8.040763477336158e-04, 4.831163224715556e-03, 5.525440742310934e-03, 5.103957378335509e-03, 5.815242050307068e-03, 4.725486018073708e-03, 4.725486018073708e-03, 1.515582055710179e-02, 1.114405483292440e-02, 1.570258773548288e-02, 1.204964090027144e-03, 1.523876833495768e-02, 1.523876833495768e-02, 4.360309453556106e-02, 4.191375320287768e-02, 5.639659124898454e-02, 1.883739049468365e-02, 4.659724074804459e-02, 4.659724074804458e-02, 6.966438218987853e-03, 6.084108270893560e-03, 6.321496759144338e-03, 6.553855030902070e-03, 6.431111308679219e-03, 6.431111308679219e-03, 7.571726884482989e-03, 5.199530155417718e-03, 5.363697065487918e-03, 5.668821375089048e-03, 5.494026245422438e-03, 5.494026245422439e-03, 5.113355002046566e-03, 9.605468218283885e-03, 8.795113547589913e-03, 7.902236470334167e-03, 8.362848147324247e-03, 8.362848147324247e-03, 5.843899071351746e-03, 2.011952147507734e-02, 1.865771007052239e-02, 9.172942727135411e-03, 1.777618910226574e-02, 1.777618910226575e-02, 3.306851743543335e-02, 6.886970107330072e-02, 5.514236112636428e-02, 1.880732602392013e-02, 5.277401484804305e-02, 5.277401484804305e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
