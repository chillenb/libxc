
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_22_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_22", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.503363360127628e+01, -2.503370569737425e+01, -2.503417168022406e+01, -2.503310306766568e+01, -2.503364223010026e+01, -2.503364223010026e+01, -3.404521140977488e+00, -3.404674783795974e+00, -3.409043886353676e+00, -3.410054979695244e+00, -3.408554645067881e+00, -3.408554645067881e+00, -5.811181003967879e-01, -5.803780155698481e-01, -5.637874169402042e-01, -5.753208145545827e-01, -5.720753056614057e-01, -5.720753056614057e-01, -1.617353655270991e-01, -1.648823625772605e-01, -6.333188200427400e-01, -1.107608100346385e-01, -1.282612278814657e-01, -1.282612278814657e-01, -4.876836949206012e-03, -5.131812347467759e-03, -2.832127739980501e-02, -2.806842505764808e-03, -3.531501661975499e-03, -3.531501661975500e-03, -6.119343824871367e+00, -6.119547409341835e+00, -6.119433875832399e+00, -6.119610324215590e+00, -6.119406744850527e+00, -6.119406744850527e+00, -2.090247647290065e+00, -2.126754308989648e+00, -2.079589984778279e+00, -2.112873947508572e+00, -2.115520326153990e+00, -2.115520326153990e+00, -6.350065285361574e-01, -6.843933308972086e-01, -5.492716901953802e-01, -5.622890094428673e-01, -6.499327370498661e-01, -6.499327370498661e-01, -7.501621876281317e-02, -1.531880004068785e-01, -6.918265997271394e-02, -1.930856408075583e+00, -8.992610030205046e-02, -8.992610030205046e-02, -2.159004260521220e-03, -2.737358122533241e-03, -2.097362395064472e-03, -4.614047321447628e-02, -2.522445217114627e-03, -2.522445217114627e-03, -6.685386640737906e-01, -6.719186009203855e-01, -6.708877776841391e-01, -6.698978338493827e-01, -6.704035348013743e-01, -6.704035348013743e-01, -6.426152134566575e-01, -5.657618184005956e-01, -5.988675410288309e-01, -6.223171693823740e-01, -6.108726717092023e-01, -6.108726717092023e-01, -7.038381267009083e-01, -2.035281968175491e-01, -2.541119816502403e-01, -3.501494151750446e-01, -3.036135057102802e-01, -3.036135057102803e-01, -4.868493940950495e-01, -2.715161452234417e-02, -3.700580229266435e-02, -3.493026145043948e-01, -5.931628501936458e-02, -5.931628501936460e-02, -6.842626227945074e-03, -7.348123387103006e-04, -1.541780963062061e-03, -5.577342077262225e-02, -2.336235529621076e-03, -2.336235529621074e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_22_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_22", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.975312610303728e+01, -2.975322694930674e+01, -2.975355322805765e+01, -2.975204887394774e+01, -2.975285452286037e+01, -2.975285452286037e+01, -4.937208881389640e+00, -4.937361183334152e+00, -4.941472904067550e+00, -4.940611337218811e+00, -4.940045238993274e+00, -4.940045238993274e+00, -8.289892705280925e-01, -8.273901209233311e-01, -7.922496739893631e-01, -8.123201816653385e-01, -8.070228439080339e-01, -8.070228439080339e-01, -2.197269227261565e-01, -2.245206383830412e-01, -8.562894400525609e-01, -1.474339695205476e-01, -1.720786967619116e-01, -1.720786967619115e-01, -6.314193048480716e-03, -6.649766122555840e-03, -3.707285566591642e-02, -3.674456231457401e-03, -4.602987757332195e-03, -4.602987757332198e-03, -7.300496421593229e+00, -7.304534548626096e+00, -7.300608170176065e+00, -7.304175939593426e+00, -7.302578009807704e+00, -7.302578009807704e+00, -2.777023221006546e+00, -2.801825392182778e+00, -2.761092508185597e+00, -2.783767465094838e+00, -2.798607127331185e+00, -2.798607127331185e+00, -8.475749414998931e-01, -9.541418159022947e-01, -7.804307696455448e-01, -8.388364767913237e-01, -8.621544963094473e-01, -8.621544963094473e-01, -9.885889630178354e-02, -2.049293631690836e-01, -9.117360246754107e-02, -2.882830891043755e+00, -1.187114972418400e-01, -1.187114972418398e-01, -2.882179689449536e-03, -3.622416821353853e-03, -2.749770937574021e-03, -6.070633373638872e-02, -3.331574462750419e-03, -3.331574462750418e-03, -8.819480371806170e-01, -8.571800457472664e-01, -8.654867799378629e-01, -8.726940835380539e-01, -8.690542568668375e-01, -8.690542568668375e-01, -8.665622268533949e-01, -6.917997926508042e-01, -7.189582052775905e-01, -7.622414347574853e-01, -7.380774812110121e-01, -7.380774812110120e-01, -1.001639593438593e+00, -2.757418798741244e-01, -3.483893644249538e-01, -4.874384038767761e-01, -4.171747700083859e-01, -4.171747700083862e-01, -6.464357642174607e-01, -3.534962686236944e-02, -4.855074255836686e-02, -4.792069999190635e-01, -7.797098577695878e-02, -7.797098577695880e-02, -9.061723228878342e-03, -9.898349730143078e-04, -2.008151012863958e-03, -7.299944631609989e-02, -3.072074093903326e-03, -3.072074093903320e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_22_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_22", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.363011960515500e-08, -2.363002061119936e-08, -2.362956399897473e-08, -2.363105529034809e-08, -2.363027602890824e-08, -2.363027602890824e-08, -1.664141230297067e-05, -1.664560840899791e-05, -1.675660920326823e-05, -1.671948728318264e-05, -1.672460558554895e-05, -1.672460558554895e-05, -4.439421158669429e-03, -4.418323511276449e-03, -3.949263865910419e-03, -4.324748550493859e-03, -4.225975754276961e-03, -4.225975754276961e-03, -6.255848102176572e-01, -6.392913782282008e-01, -8.165273021100198e-04, -3.326571514106569e-01, -4.513377458705052e-01, -4.513377458705051e-01, -7.472413983684433e+01, -6.749160151447134e+01, -1.365920065309667e+00, -1.328515517402232e+02, -1.175366592002147e+02, -1.175366592002141e+02, -7.173094361901884e-06, -7.174424917259621e-06, -7.173325824653583e-06, -7.174491558716625e-06, -7.173689048831910e-06, -7.173689048831910e-06, -1.538995276183729e-04, -1.571914787361552e-04, -1.525673827709447e-04, -1.557883518929698e-04, -1.563770114101737e-04, -1.563770114101737e-04, -3.132204161322710e-02, -2.746243816007344e-02, -3.226672910866269e-02, -3.371649746845011e-02, -3.101911722219822e-02, -3.101911722219822e-02, -3.417097868196370e-01, -2.686167822213631e-01, -3.659964429735980e-01, -2.718338209044271e-04, -5.175634645731471e-01, -5.175634645731473e-01, 1.688393129396711e+01, -6.226795355671228e+01, -5.951050576032989e+02, -6.410375390956824e-01, -1.577464565585759e+02, -1.577464565585770e+02, -4.576999182871561e-02, -4.605443494285739e-02, -4.598687371617859e-02, -4.590543746748319e-02, -4.594884740131632e-02, -4.594884740131632e-02, -5.024201795105138e-02, -6.040100354455916e-02, -6.107880956452012e-02, -5.865517491249261e-02, -6.019465731606695e-02, -6.019465731606695e-02, -2.126138602808920e-02, -2.205942840714424e-01, -1.894667980767238e-01, -1.407896811256223e-01, -1.816906107067144e-01, -1.816906107067145e-01, -6.652678315463560e-02, -1.755731305707045e+00, -7.908679984040298e-01, -2.195383079173010e-01, -6.834765424064069e-01, -6.834765424064073e-01, -7.997902108693009e+00, 2.645239882564113e+03, -9.396321109888792e+02, -8.480864917412839e-01, -3.026115936024102e+02, -3.026115936024107e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_22_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_22", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_22_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_22", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [3.346853089496540e-03, 3.346831889449571e-03, 3.346785115207926e-03, 3.347101268427184e-03, 3.346928848948238e-03, 3.346928848948238e-03, 1.080873790871912e-02, 1.081158635126464e-02, 1.089000182755612e-02, 1.089131729789332e-02, 1.087801951603713e-02, 1.087801951603713e-02, 1.704911505348444e-02, 1.694530187421521e-02, 1.487884696055898e-02, 1.761180214519358e-02, 1.678728917086407e-02, 1.678728917086407e-02, 8.084876544137495e-02, 8.558623816888648e-02, 2.265674718041225e-03, 1.510438140426631e-02, 3.167016620328578e-02, 3.167016620328570e-02, 2.588724847075654e-04, 2.709218968025746e-04, 9.277465601376780e-04, 7.948585567761675e-05, 1.461825138204376e-04, 1.461825138204374e-04, 1.317569150390463e-02, 1.315432274869373e-02, 1.317497070801641e-02, 1.315609604109882e-02, 1.316473356746914e-02, 1.316473356746914e-02, 2.540278067294376e-02, 2.653532882742472e-02, 2.525600874256466e-02, 2.632994955393755e-02, 2.609344198122717e-02, 2.609344198122717e-02, 1.000520283118290e-01, 8.688559324388263e-02, 8.205483482553776e-02, 7.816933760404822e-02, 1.007678448931059e-01, 1.007678448931059e-01, 4.902851536807825e-03, 3.337672017489920e-02, 4.063444022489484e-03, 2.393077246384793e-02, 1.340891101652474e-02, 1.340891101652481e-02, -3.334740777554569e-06, 3.019894134189443e-05, 1.463744871255328e-04, 2.001529123017480e-03, 6.165698801325421e-05, 6.165698801325078e-05, 9.390817593834659e-02, 1.021328174731466e-01, 9.929281064562384e-02, 9.689607552413340e-02, 9.809916110642847e-02, 9.809916110642848e-02, 9.443229360050864e-02, 1.427260049490617e-01, 1.407025090315305e-01, 1.261500907259166e-01, 1.344583010703782e-01, 1.344583010703782e-01, 7.943985836302311e-02, 5.829300334018099e-02, 8.290452993573647e-02, 1.126359750701467e-01, 1.114174004935435e-01, 1.114174004935437e-01, 1.202184538793940e-01, 1.086041523210575e-03, 1.229105889405006e-03, 1.468282290744190e-01, 4.869840964106700e-03, 4.869840964106705e-03, 6.062978395848017e-05, -1.220728784739571e-05, 9.767925215101461e-05, 5.137861172234694e-03, 9.946458389531760e-05, 9.946458389531400e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
