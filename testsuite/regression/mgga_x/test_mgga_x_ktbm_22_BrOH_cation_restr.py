
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_22_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_22", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.178502085344764e+01, -2.178515220390743e+01, -2.178572649824449e+01, -2.178377717504509e+01, -2.178479987688447e+01, -2.178479987688447e+01, -3.038448924069127e+00, -3.038580086065370e+00, -3.042099683805873e+00, -3.040950762650359e+00, -3.040757863072966e+00, -3.948528786183914e+00, -5.375702747525483e-01, -6.793192070505883e-01, -6.454021236784263e-01, -6.580301579109500e-01, -6.551985169640127e-01, -6.551985169640127e-01, -1.639934934821849e-01, -1.677523151340424e-01, -6.178019920302039e-01, -1.133955617948744e-01, -1.314795036114144e-01, -1.314795036114144e-01, -4.878450173739880e-03, -5.134886326310162e-03, -2.844217599170107e-02, -2.817111946437193e-03, -3.540066587773132e-03, -3.540066587773132e-03, -6.123657172189210e+00, -6.123811142160457e+00, -6.123657557394475e+00, -5.495971833908460e+00, -6.123739790177232e+00, -6.123739790177232e+00, -1.657688308700716e+00, -1.679529653125304e+00, -1.641529517355452e+00, -1.660639952652013e+00, -1.677821836740216e+00, -2.189670487713704e+00, -6.903861802633704e-01, -7.536819864441596e-01, -6.246601444031253e-01, -6.644240378363524e-01, -7.038659742092923e-01, -5.725396490783972e-01, -7.430220463712824e-02, -1.549818197899994e-01, -6.886761948023229e-02, -2.269599124450711e+00, -9.099175214646282e-02, -9.099175214646282e-02, -2.221656462022977e-03, -2.753962461812183e-03, -2.105873545278708e-03, -4.662463684178940e-02, -2.592891860512997e-03, -2.536905951905769e-03, -6.778942164121958e-01, -6.808916909687263e-01, -6.461000833606634e-01, -6.791255566085286e-01, -6.795799972652425e-01, -6.795799972652425e-01, -6.605270226220437e-01, -5.728862335937563e-01, -6.096328361888810e-01, -6.366388649697154e-01, -6.241365772585712e-01, -5.262336320510498e-01, -7.914885748525936e-01, -1.731110590066099e-01, -2.612182820699621e-01, -2.936250261664160e-01, -3.189353512099681e-01, -3.189353512099681e-01, -3.989692860251417e-01, -2.721397363073631e-02, -3.720968861264063e-02, -3.832751230060307e-01, -5.900843423141506e-02, -5.983483945418960e-02, -6.885437090950034e-03, -7.361219527946293e-04, -1.545187305013967e-03, -5.608304268390572e-02, -2.347434979740335e-03, -2.347434979740333e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_22_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_22", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.284239147605700e+01, -3.284249133833544e+01, -3.284296022315365e+01, -3.284147442343208e+01, -3.284224945109852e+01, -3.284224945109852e+01, -4.844141501828693e+00, -4.844423566352226e+00, -4.851926941444730e+00, -4.849337879570701e+00, -4.849111897368368e+00, -4.930582867766446e+00, -7.716955522826265e-01, -9.186509291665979e-01, -8.754033176598071e-01, -8.917163681649326e-01, -8.881245260941422e-01, -8.881245260941422e-01, -2.218027855173813e-01, -2.271472834385653e-01, -8.227670344601834e-01, -1.492264373379375e-01, -1.749600846430412e-01, -1.749600846430411e-01, -6.309974757448120e-03, -6.641677623623612e-03, -3.680842835760516e-02, -3.643705636128413e-03, -4.578812622403267e-03, -4.578812622403267e-03, -7.295043860695521e+00, -7.299137789519462e+00, -7.295268475793734e+00, -8.003803403805010e+00, -7.297097061259820e+00, -7.297097061259820e+00, -2.595035021320981e+00, -2.641320837227418e+00, -2.559672555164907e+00, -2.601087225462082e+00, -2.637978192056361e+00, -2.805652104121972e+00, -8.114103167658887e-01, -8.813872032112918e-01, -7.647925208379934e-01, -7.800099009656486e-01, -8.215696451589576e-01, -9.022378038491019e-01, -9.731934723635996e-02, -2.064655124190340e-01, -9.036677187884858e-02, -2.641406071160120e+00, -1.191223340310628e-01, -1.191223340310630e-01, -2.962148526892982e-03, -3.562024726656394e-03, -2.723784607184997e-03, -6.161433557025132e-02, -3.456998994425160e-03, -3.281288712716854e-03, -8.695606962944968e-01, -8.453924041964640e-01, -8.964244744316313e-01, -8.604877681760652e-01, -8.569277774723875e-01, -8.569277774723875e-01, -8.431950420283415e-01, -6.881861188575301e-01, -7.094530333172824e-01, -7.456735890603082e-01, -7.243962616753535e-01, -8.077788733676488e-01, -9.193461193369252e-01, -2.312788459289143e-01, -3.542471424924317e-01, -4.585345575856501e-01, -4.253888483983805e-01, -4.253888483983804e-01, -6.375599621261233e-01, -3.521723620948181e-02, -4.817478998563041e-02, -4.736637373479491e-01, -7.746882157490154e-02, -7.772430071091939e-02, -8.905960218858327e-03, -9.521086744485492e-04, -1.998568701087034e-03, -7.281730967285938e-02, -3.036223427844308e-03, -3.036223427844308e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_22_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_22", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.036708670782615e-08, -2.036706963359914e-08, -2.036683900723521e-08, -2.036711011901203e-08, -2.036698991600284e-08, -2.036698991600284e-08, -1.467097985905862e-05, -1.467476017500607e-05, -1.477350547963505e-05, -1.472823256259300e-05, -1.473920878822095e-05, -1.990922691887228e-05, -3.858745566152838e-03, -5.776731449151877e-03, -5.135950192768873e-03, -5.520448903546276e-03, -5.428013160257907e-03, -5.428013160257907e-03, -6.469383786007095e-01, -6.651677151329329e-01, -7.205269371852860e-04, -4.051499580417942e-01, -5.066477678091794e-01, -5.066477678091793e-01, -7.659744770319261e+01, -7.064678279670370e+01, -1.874427338388076e+00, -1.956835222280343e+02, -1.464853154120399e+02, -1.464853154120399e+02, -7.178692484417008e-06, -7.179958550848296e-06, -7.178807633621293e-06, -6.392759310713029e-06, -7.179312657484321e-06, -7.179312657484321e-06, -1.161150435213287e-04, -1.184581285322848e-04, -1.140056264183667e-04, -1.162592999213363e-04, -1.184551106873231e-04, -1.633637170205091e-04, -3.441886086658572e-02, -3.049574187680747e-02, -3.746527417306120e-02, -4.050989016773807e-02, -3.391562368984837e-02, -2.713894678527701e-02, 2.276614172481468e-01, -2.823128597193486e-01, 3.111780601267587e-01, -3.241562386601548e-04, -5.897708176406412e-01, -5.897708176406417e-01, 6.152124907908309e+02, -1.924742728338379e+02, -9.372464971175556e+02, 1.112366179069450e+00, 8.984435107563604e+02, -3.999427144918382e+02, -4.646645253471569e-02, -4.672685446165371e-02, -4.416326426201034e-02, -4.659433777844709e-02, -4.663459387912491e-02, -4.663459387912491e-02, -5.176084376994250e-02, -6.129488590346630e-02, -6.232570781395184e-02, -6.015310207213340e-02, -6.166042163519775e-02, -5.134521840478382e-02, -2.415610354283045e-02, -1.261022422252527e-01, -1.992973692932702e-01, -1.137631637126018e-01, -1.950810327442803e-01, -1.950810327442805e-01, -5.320030693476271e-02, -2.038247264191449e+00, -1.134522481554956e+00, -2.450665557163403e-01, 5.750240620295493e-01, -8.689524334943662e-01, -2.665650279476537e+01, -2.975565240694827e+03, -1.144641006362104e+03, -9.871804384026748e-01, -5.576835508348552e+02, -5.576835508348572e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_22_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_22", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.225536996920637e-03, 2.225549436143900e-03, 2.225595310813826e-03, 2.225411648384730e-03, 2.225509222985385e-03, 2.225509222985385e-03, 5.961032089875458e-03, 5.963373809135082e-03, 6.025107939720744e-03, 5.999590410126873e-03, 6.002948561393619e-03, 1.873987954793726e-02, 5.243184453451647e-03, 4.534754872764809e-02, 3.746914955657061e-02, 4.117590583687587e-02, 4.030339937080524e-02, 4.030339937080524e-02, 8.822414294077464e-02, 9.505747476333862e-02, -3.931323560214433e-05, 2.216329285856106e-02, 4.115480626007526e-02, 4.115480626007524e-02, 2.675686552499810e-04, 2.879195708149832e-04, 1.392087128833979e-03, 1.312749720549316e-04, 1.951847030789170e-04, 1.951847030789170e-04, 1.319999285651125e-02, 1.317828787605554e-02, 1.319876386726439e-02, 9.806387763392250e-03, 1.318911692445926e-02, 1.318911692445926e-02, 7.414811551839937e-03, 7.957428669877045e-03, 6.992863648126346e-03, 7.474535520332037e-03, 7.928399083024906e-03, 2.945986020639184e-02, 1.293066936544629e-01, 1.139917046971705e-01, 1.281255414675894e-01, 1.346105206053246e-01, 1.280300896508240e-01, 6.469772596530420e-02, -9.555093563336308e-04, 3.731622681156500e-02, -8.081498437510610e-04, 3.977529468393962e-02, 1.684105769438475e-02, 1.684105769438480e-02, -3.490022735997088e-08, 1.206187198488754e-04, 2.627824483833765e-04, -3.433697112418154e-04, -2.199015627924616e-07, 1.960136390497153e-04, 9.710698774622807e-02, 1.055803183503816e-01, 9.033979655955253e-02, 1.001926042493691e-01, 1.014341145132964e-01, 1.014341145132964e-01, 1.009642718119725e-01, 1.482863329571114e-01, 1.480806079966391e-01, 1.341714883731486e-01, 1.427682924839172e-01, 8.493132518415161e-02, 1.119152142682967e-01, 2.482391470830823e-04, 9.548729810680059e-02, 4.010468336078091e-02, 1.369685035490563e-01, 1.369685035490563e-01, 4.892723124941700e-02, 1.319766721949428e-03, 1.949645744686933e-03, 2.016613289772602e-01, -8.786924599829724e-04, 6.855084294315964e-03, 2.621676742842235e-04, 3.557946633765513e-05, 1.266509279377508e-04, 6.371628866598951e-03, 2.165498154464813e-04, 2.165498154464834e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
