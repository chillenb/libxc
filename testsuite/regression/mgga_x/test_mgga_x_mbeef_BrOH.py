
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mbeef_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbeef", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.165284716556468e+01, -2.165294963757973e+01, -2.165344084367590e+01, -2.165176713442338e+01, -2.165290085523694e+01, -2.165290085523694e+01, -3.289350275099664e+00, -3.289444346417871e+00, -3.292366077755789e+00, -3.291503563690598e+00, -3.289392040623120e+00, -3.988661436439909e+00, -5.736757308279380e-01, -8.152169381952211e-01, -7.963013530121348e-01, -8.017466738695955e-01, -8.156323321089634e-01, -8.156323321089634e-01, -2.240580888642491e-01, -2.269222474439053e-01, -6.765566044460494e-01, -1.445434834660671e-01, -2.249302183005836e-01, -2.249302183005836e-01, -1.021222209388555e-02, -1.070171265392415e-02, -4.442803373189441e-02, -4.876598818928095e-03, -1.059027450616015e-02, -1.059027450616015e-02, -5.410870574515055e+00, -5.410459358467707e+00, -5.410819939791779e+00, -5.356970024721217e+00, -5.410670173517241e+00, -5.410670173517241e+00, -1.794003602679396e+00, -1.817806559703721e+00, -1.784008152882980e+00, -1.802706324751339e+00, -1.823217661796296e+00, -2.299124156565836e+00, -6.384674656031187e-01, -6.658185574470256e-01, -6.197548802469520e-01, -6.241949857438008e-01, -6.530809895841433e-01, -5.840413235501494e-01, -8.137824010816154e-02, -2.194804929874795e-01, -8.033914827311371e-02, -2.074927883093264e+00, -1.211555341327470e-01, -1.211555341327470e-01, -3.947159725165018e-03, -5.377892512420142e-03, -4.031245732231064e-03, -5.062261790289695e-02, -4.110182834493186e-03, -4.899683345107229e-03, -6.081911359268591e-01, -6.091778573762254e-01, -6.059443347456004e-01, -6.085092354301124e-01, -6.086450278397026e-01, -6.086450278397026e-01, -5.901096089314314e-01, -5.565739752067188e-01, -5.648578516651254e-01, -5.730374934014355e-01, -5.687778796104209e-01, -5.360856937084950e-01, -7.057612201453307e-01, -1.962766464611878e-01, -3.349007271697391e-01, -3.231332136475599e-01, -3.703109341286367e-01, -3.703109341286367e-01, -4.317585060571677e-01, -4.109028400598642e-02, -5.578297662750933e-02, -3.788082232382940e-01, -6.604406118693262e-02, -8.139698168435569e-02, -1.196015423618603e-02, -1.470906613133017e-03, -2.795164115513754e-03, -7.764778212552106e-02, -4.163491857068891e-03, -4.163491857068885e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mbeef_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbeef", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.195451762781432e+01, -3.195442852144777e+01, -3.195410329402741e+01, -3.195554270477106e+01, -3.195447025275485e+01, -3.195447025275485e+01, -5.016051813862653e+00, -5.015760632431376e+00, -5.006961498145762e+00, -5.010819347050645e+00, -5.015994891262485e+00, -4.249569819474370e+00, -8.241676379862695e-01, -1.004534058484074e+00, -1.042523597951935e+00, -1.021293229030360e+00, -1.003577866000813e+00, -1.003577866000813e+00, -2.952068126697022e-01, -2.929592783995902e-01, -9.292685756109482e-01, -2.407924489690773e-01, -2.946284730905842e-01, -2.946284730905842e-01, -1.375060629683828e-02, -1.442023714277833e-02, -5.997458218271105e-02, -6.512370974751624e-03, -1.427025778507206e-02, -1.427025778517007e-02, -6.743840983453240e+00, -6.747301976058093e+00, -6.744217945632236e+00, -7.158521117159570e+00, -6.745585577322013e+00, -6.745585577322013e+00, -2.851197975396148e+00, -2.884678315464868e+00, -2.834851626177512e+00, -2.864372618430029e+00, -2.890861931098722e+00, -2.452408618505642e+00, -7.093110113047671e-01, -8.005590624669323e-01, -6.685871530995651e-01, -7.081152813941299e-01, -7.447111941061725e-01, -8.459523916139094e-01, -1.086204355886960e-01, -3.544419239710513e-01, -1.072468408289154e-01, -2.372529643494602e+00, -1.975938022025497e-01, -1.975938022025497e-01, -5.262879696429092e-03, -7.185807003840117e-03, -5.387705863663442e-03, -6.750803471169189e-02, -5.480243857841203e-03, -6.545776283053392e-03, -7.999049388131321e-01, -7.887421878172072e-01, -7.965465229313494e-01, -7.959505246097875e-01, -7.944086979297266e-01, -7.944086979297266e-01, -7.719416479824239e-01, -6.126600823635600e-01, -6.536741378208756e-01, -6.988348691894475e-01, -6.752570263645730e-01, -8.135207710211635e-01, -8.288469496261375e-01, -2.720971634034199e-01, -4.024522439562033e-01, -5.132236465054451e-01, -4.067166110009337e-01, -4.067166110009339e-01, -6.415397140820340e-01, -5.571404790112282e-02, -7.461348627448160e-02, -4.041032986886567e-01, -8.812844734013266e-02, -1.146344258587502e-01, -1.608537224901158e-02, -1.961548497159015e-03, -3.730116736005240e-03, -1.092950011368251e-01, -5.560725103827810e-03, -5.560725106060702e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbeef_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbeef", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.289359257954836e-08, -1.289281549576296e-08, -1.288931609297179e-08, -1.290197078457690e-08, -1.289318390906077e-08, -1.289318390906077e-08, -1.338381147113431e-05, -1.337889625211926e-05, -1.322675076390572e-05, -1.328196587477167e-05, -1.338219294142505e-05, -7.534686548104885e-06, -8.755376801928552e-03, -1.023820285635760e-03, -2.356421962231927e-04, -6.005454353572225e-04, -1.043077556594086e-03, -1.043077556594086e-03, -2.424975699407287e-02, -6.465871264569593e-02, -3.604546357535542e-03, 4.882791522748698e-01, -3.596307430599237e-02, -3.596307430599237e-02, 5.876627455331940e+00, 5.740024900905336e+00, 2.547846992349181e-01, 2.406910936420709e+00, 6.001929690782882e+00, 6.001929701247639e+00, -1.894088551823015e-06, -1.891005173949443e-06, -1.893755069223691e-06, -4.725942090009952e-07, -1.892534801634046e-06, -1.892534801634046e-06, -1.557190091260617e-04, -1.506979980705303e-04, -1.574395267828522e-04, -1.539670934731967e-04, -1.494659446443786e-04, -6.258838052740138e-05, -1.207865269880636e-02, -9.108718776272614e-03, -1.354668925931434e-02, -1.299112621025565e-02, -1.077700642023507e-02, -1.434521012610321e-02, -1.397700445202132e+01, 2.393153363602663e-01, -1.473020429159330e+01, -1.054138574358230e-04, 7.383989022643600e-01, 7.383989022643600e-01, -2.501927604046279e+06, 3.012598175748538e+00, 1.179900855903366e+01, -9.260972882684381e+01, -2.127987077593179e+06, 3.720947317442624e+00, -9.118667691731405e-03, -1.003546270272852e-02, 2.623745814729310e-03, -9.468352129511174e-03, -9.596776521172841e-03, -9.596776521172841e-03, -1.070011624718255e-02, -2.099332703439612e-02, -1.888003541862590e-02, -1.604224795153707e-02, -1.756956255264276e-02, -3.773327746090546e-02, -7.563528203281605e-03, -5.365820916692967e-01, -4.927950218372851e-02, -1.499794740918901e-01, -7.211325331711839e-02, -7.211325331711815e-02, -4.118318940219331e-02, 3.884339235019341e-01, 3.791876691957356e-02, -9.373468291030460e-02, -3.214100477635320e+01, 3.842789310920908e-01, 2.351391765193931e+00, 3.429481622534210e+00, 6.672341387867570e+00, 4.577199448737629e-01, 5.252219588047747e+00, 5.252222914120370e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbeef_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbeef", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.808213410428896e-03, 1.808121054865500e-03, 1.807713775295510e-03, 1.809216200556503e-03, 1.808164782334062e-03, 1.808164782334062e-03, 4.744771319263876e-03, 4.742708501246791e-03, 4.678555423128248e-03, 4.703465209923853e-03, 4.744176547190822e-03, 4.416404624490502e-18, 5.540096945723965e-03, -3.859570228029003e-17, 5.872918848417254e-17, -3.055305711141756e-16, -2.029710155705197e-16, -2.029710155705197e-16, 3.566456478511722e-16, 3.998887421801891e-16, 1.182912410422504e-03, 9.951698922151340e-16, 1.956719324476408e-16, 1.956719324476408e-16, -4.119707511362712e-14, 2.279424913427503e-13, 1.330745198343356e-14, 8.821879160559537e-13, 1.560908932570846e-13, -3.930701240380560e-14, 8.216791878765845e-19, -1.019337604482226e-19, 5.597658121362418e-20, 2.304877330104227e-04, -3.025906677679059e-20, -3.025906677679059e-20, 8.817887023084468e-03, 9.086320607998242e-03, 8.654488428468115e-03, 8.927926025223042e-03, 9.134768035595365e-03, 2.022751748318953e-17, 1.817653643014140e-17, 1.958836127436582e-19, -4.723590000950684e-17, 9.686783576976070e-18, 4.890866254875220e-18, 3.194057324872808e-02, 6.954813258424398e-05, 2.067298682046545e-16, 8.304948088558139e-05, 1.631758374336331e-18, -1.467564432216660e-15, -1.467564432216660e-15, 5.405795276681670e-11, 1.490899517392960e-12, 1.786699689903893e-12, 6.880490989259621e-06, 6.817694763946537e-11, -2.174841432828385e-12, -5.884861663982789e-18, 1.343067802549503e-18, -3.165465334121233e-02, 4.109574896527360e-18, 5.253312760274357e-20, 5.253312760274357e-20, -4.567549857313548e-18, -2.088126205471443e-17, 8.722882382346653e-18, -3.106119058964301e-18, -1.636134995962103e-18, 8.134280493880437e-02, -1.964292734342958e-18, 6.095989794070040e-03, -3.150624326166271e-16, 5.041309712919597e-02, -7.447388919038528e-17, -1.610972029153002e-16, 3.103153819498467e-02, 1.894407680670357e-15, 1.030946491221022e-15, 2.400208537912052e-17, 5.459132252458108e-05, 2.574918944953127e-15, -1.872338621777856e-13, -6.214083680062516e-11, 6.718304822792337e-13, 2.413366977004939e-15, 1.970636338849544e-13, -3.633841441260819e-12])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
