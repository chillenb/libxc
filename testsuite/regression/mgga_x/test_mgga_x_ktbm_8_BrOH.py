
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_8_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_8", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.130514144673522e+01, -2.130523815836168e+01, -2.130570353130835e+01, -2.130412379204921e+01, -2.130519210612857e+01, -2.130519210612857e+01, -3.075897002511457e+00, -3.075994159699193e+00, -3.079031839982241e+00, -3.078100276664377e+00, -3.075938602772015e+00, -3.826237358168787e+00, -5.463852700308990e-01, -6.911726219532647e-01, -6.641319260378254e-01, -6.731756368236739e-01, -6.918516308437912e-01, -6.918516308437912e-01, -1.866073624204334e-01, -1.898818161263493e-01, -6.467825995739017e-01, -1.254055950591963e-01, -1.875752720946747e-01, -1.875752720946747e-01, -9.310352735923599e-03, -9.752554307177738e-03, -3.981125614581320e-02, -4.464816557262804e-03, -9.650929723585501e-03, -9.650929723585500e-03, -5.752888455730242e+00, -5.753208383041770e+00, -5.752918784276353e+00, -5.325520093977469e+00, -5.753056192698291e+00, -5.753056192698291e+00, -1.683897359271764e+00, -1.703840681174163e+00, -1.675636337882491e+00, -1.691188728767448e+00, -1.708347939397104e+00, -2.149851972819270e+00, -6.466861415055476e-01, -7.008926827985491e-01, -6.104654201016670e-01, -6.406866269533396e-01, -6.722341601488820e-01, -5.768898995216568e-01, -8.021338968770302e-02, -1.803241353254080e-01, -7.912451142567117e-02, -2.138865230968402e+00, -1.061160742493949e-01, -1.061160742493949e-01, -3.956225746306876e-03, -4.922475356104923e-03, -3.689454088318653e-03, -5.038101769715713e-02, -4.119598436274324e-03, -4.485109955199511e-03, -6.512130105779330e-01, -6.517122506044356e-01, -6.310285520591454e-01, -6.514558684066593e-01, -6.515319770965019e-01, -6.515319770965019e-01, -6.317597181491601e-01, -5.597492071849099e-01, -5.857140206333044e-01, -6.058716434364498e-01, -5.960847990383573e-01, -5.285644497944175e-01, -7.365310117222765e-01, -1.873835418979060e-01, -2.864243636684227e-01, -3.030245284228066e-01, -3.325475428707649e-01, -3.325475428707649e-01, -4.043730668979931e-01, -3.684151887430640e-02, -5.002207611508369e-02, -3.652029088473426e-01, -6.523428823134164e-02, -7.330817336289443e-02, -1.091099120958804e-02, -1.347588850111991e-03, -2.559993783333041e-03, -6.993379508943361e-02, -3.811709318989236e-03, -3.811709318989229e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_8_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_8", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.118706041328210e+01, -3.118713660610829e+01, -3.118753221370190e+01, -3.118628341596971e+01, -3.118710012861850e+01, -3.118710012861850e+01, -4.756754582691030e+00, -4.756937989099860e+00, -4.762606009547823e+00, -4.760795877850253e+00, -4.756828125710297e+00, -4.563956464762910e+00, -7.768806819437418e-01, -8.533532236603185e-01, -8.208404248746892e-01, -8.318182723730164e-01, -8.541470555157906e-01, -8.541470555157906e-01, -2.306409693407409e-01, -2.346678304128442e-01, -8.745269548463868e-01, -1.521534124796925e-01, -2.318357969588972e-01, -2.318357969588972e-01, -1.120099318680344e-02, -1.173301646501057e-02, -4.791258406289600e-02, -5.371383140248027e-03, -1.161075529181943e-02, -1.161075529181943e-02, -7.072566230345112e+00, -7.076196656502974e+00, -7.072960977155232e+00, -7.586572359630441e+00, -7.074394524614715e+00, -7.074394524614715e+00, -2.572573039869855e+00, -2.611178447082660e+00, -2.556114133228597e+00, -2.586687134417358e+00, -2.620029101698028e+00, -2.587682787590745e+00, -7.615817143899368e-01, -8.422333907626275e-01, -7.221225372394566e-01, -7.556049110496044e-01, -7.934493867990557e-01, -8.741278991738018e-01, -1.050954192208067e-01, -2.213213037666431e-01, -1.036051158662709e-01, -2.525791128096997e+00, -1.285803958969669e-01, -1.285803958969669e-01, -5.274549297321762e-03, -5.921973974228664e-03, -4.438592129840299e-03, -6.661275469550916e-02, -5.492320887429620e-03, -5.395800839089924e-03, -8.481687646848015e-01, -8.312245116164778e-01, -8.638691906752148e-01, -8.418339902203403e-01, -8.394691542380643e-01, -8.394691542380643e-01, -8.164670993902559e-01, -6.594648079356371e-01, -6.935614957923796e-01, -7.338016228518720e-01, -7.120748686325139e-01, -7.813906083943161e-01, -8.761391080687282e-01, -2.566499954220909e-01, -3.532379641150595e-01, -4.638824097942711e-01, -4.056230789776851e-01, -4.056230789776853e-01, -6.262360561735746e-01, -4.433467258393174e-02, -6.021679101981370e-02, -4.348700305077078e-01, -8.561447044882921e-02, -8.842437894039157e-02, -1.312663009033799e-02, -1.621208523074608e-03, -3.079788464804049e-03, -8.435313097557727e-02, -4.585665552580019e-03, -4.585665552580006e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_8_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_8", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.457521688595843e-08, -1.457516633535745e-08, -1.457482816946002e-08, -1.457566749721271e-08, -1.457519104870225e-08, -1.457519104870225e-08, -1.259269129201827e-05, -1.259483010417043e-05, -1.265734979823657e-05, -1.262910674129460e-05, -1.259304540215947e-05, -1.576655567639465e-05, -4.104426021683353e-03, -5.617766020161416e-03, -5.248966811453761e-03, -5.503991377718428e-03, -5.627508978389033e-03, -5.627508978389033e-03, -8.226497693035569e-01, -8.272199553995726e-01, -1.132659670685154e-03, -6.174477299098088e-01, -8.233478401376098e-01, -8.233478401376098e-01, -1.422893916406119e+02, -1.293100792199915e+02, -5.057680743094797e+00, -3.649155003819920e+02, -1.350478527796400e+02, -1.350478527796400e+02, -4.807434836106067e-06, -4.806769175642845e-06, -4.807379831016564e-06, -4.435129031430206e-06, -4.807081006800032e-06, -4.807081006800032e-06, -1.049975546852461e-04, -1.059035851716126e-04, -1.044535480581131e-04, -1.052666176943819e-04, -1.062910352819615e-04, -1.354824231558339e-04, -2.559187831299820e-02, -2.143185605279529e-02, -2.813609689902503e-02, -2.812771296212588e-02, -2.347373264263551e-02, -2.011080762452612e-02, -4.245157581876028e-01, -4.020493452025652e-01, -4.857151804771271e-01, -2.303581954334113e-04, -1.025934030212701e+00, -1.025934030212701e+00, -1.147973960551248e+02, -3.374492824574510e+02, -1.191156979878851e+03, -7.540518869103404e-01, -1.069701971368291e+02, -4.511162586703219e+02, -2.850102684522112e-02, -2.888389419792801e-02, -2.778923617858965e-02, -2.865333250514003e-02, -2.870723043124268e-02, -2.870723043124268e-02, -3.239442468663083e-02, -4.412566146572249e-02, -4.189001451875165e-02, -3.877141805759120e-02, -4.046304076213212e-02, -3.578738501090955e-02, -1.713066346030929e-02, -1.929757176361203e-01, -2.103235724256193e-01, -1.037271806408570e-01, -1.787734695150288e-01, -1.787734695150289e-01, -4.562474122299099e-02, -5.621298492410484e+00, -3.021423428683561e+00, -1.954797157551798e-01, -7.809583556189414e-01, -1.924318903019552e+00, -6.465470791658785e+01, -4.726426426084588e+03, -1.837376660420222e+03, -2.314624898369259e+00, -7.403435169094568e+02, -7.403435169094580e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_8_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_8", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.630063231978405e-03, 1.630068357694468e-03, 1.630087465623192e-03, 1.630004519774398e-03, 1.630065954529764e-03, 1.630065954529764e-03, 4.935292984817001e-03, 4.936816007096520e-03, 4.982480019114173e-03, 4.964394406533328e-03, 4.935692279351818e-03, 1.278747434473284e-02, 4.521223055259696e-03, 3.576772712706389e-02, 3.080937824058015e-02, 3.310363894103574e-02, 3.589754828681230e-02, 3.589754828681230e-02, 1.074927446272869e-01, 1.125677758468353e-01, 5.285373140323413e-04, 2.725765835402967e-02, 1.089127607443715e-01, 1.089127607443715e-01, 2.393483889354995e-03, 2.500501317328827e-03, 6.771779739923395e-03, 6.757958748614476e-04, 2.530673568648623e-03, 2.530673568648621e-03, 8.594675503304859e-03, 8.583480170017954e-03, 8.593445916074104e-03, 7.045815059737542e-03, 8.589052535651417e-03, 8.589052535651417e-03, 6.286612486061226e-03, 6.690327286456206e-03, 6.107667795448071e-03, 6.428467445993780e-03, 6.797508671321407e-03, 2.082251524189286e-02, 8.450922844269465e-02, 7.500610248264823e-02, 8.586922102117994e-02, 8.567188094037874e-02, 8.158234784544821e-02, 4.985655434664413e-02, -1.111524241998895e-03, 5.160601833330142e-02, -1.229249790647549e-03, 2.562258788765035e-02, 2.740253798931686e-02, 2.740253798931686e-02, -3.596923980047850e-07, 8.375583995771642e-04, 1.244886535928163e-03, -3.448797955236616e-04, -4.142071753006937e-07, 8.469366567656193e-04, 6.462294321275236e-02, 6.852517470129840e-02, 6.258402414062823e-02, 6.606542434962780e-02, 6.660934868722881e-02, 6.660934868722881e-02, 6.810492801150322e-02, 9.695735394102471e-02, 9.308389663702396e-02, 8.497593581838737e-02, 8.955390542113247e-02, 6.313510540804497e-02, 7.324669441024441e-02, 3.990861117274890e-03, 9.348349268699184e-02, 3.662578760990243e-02, 1.117936466582680e-01, 1.117936466582680e-01, 4.102500880705375e-02, 5.945957861256833e-03, 8.084167385291732e-03, 1.359843707269989e-01, -1.068798095804356e-03, 1.664562877894673e-02, 1.749969091737095e-03, 2.406085144098645e-04, 6.413173048771719e-04, 1.738057341097853e-02, 8.531280411964182e-04, 8.531280411964175e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
