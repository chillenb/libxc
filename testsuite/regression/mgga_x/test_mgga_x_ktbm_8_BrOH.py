
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_8_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_8", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.357936125435924e+01, -2.357941647612868e+01, -2.357978892645101e+01, -2.357888827280336e+01, -2.357938924328240e+01, -2.357938924328240e+01, -3.385786184115417e+00, -3.385887545170937e+00, -3.389195448800938e+00, -3.390156243912407e+00, -3.385817766937263e+00, -3.385817766937263e+00, -5.944190070071170e-01, -5.938707535267761e-01, -5.809508298912955e-01, -5.909883111287194e-01, -5.942256990169675e-01, -5.942256990169675e-01, -1.813392186304611e-01, -1.838014679190981e-01, -6.695915925372399e-01, -1.186007666791308e-01, -1.820084850549951e-01, -1.820084850549951e-01, -9.286124834146285e-03, -9.720569275141462e-03, -3.911675316882378e-02, -4.306807974720068e-03, -9.623425202140675e-03, -9.623425202140672e-03, -5.749954877138301e+00, -5.750307611829567e+00, -5.750025826183280e+00, -5.750298228893911e+00, -5.750089297934798e+00, -5.750089297934798e+00, -2.064418737758297e+00, -2.092413107880102e+00, -2.061844502218706e+00, -2.084225436694704e+00, -2.086554554052675e+00, -2.086554554052675e+00, -6.014337790182512e-01, -6.474557176976329e-01, -5.504411324965605e-01, -5.713148108947340e-01, -6.338922018189342e-01, -6.338922018189342e-01, -8.790268024905187e-02, -1.771471386194985e-01, -8.684169639637374e-02, -1.891780266083778e+00, -1.033667434415514e-01, -1.033667434415514e-01, -4.218680315439683e-03, -4.779970275260099e-03, -3.636920994625864e-03, -5.356288790034981e-02, -4.324791644511111e-03, -4.324791644511111e-03, -6.446475698571362e-01, -6.453601776848641e-01, -6.451632657861424e-01, -6.449639932776382e-01, -6.450659253770181e-01, -6.450659253770182e-01, -6.190644336536630e-01, -5.538085496274431e-01, -5.773036512263601e-01, -5.953823512029749e-01, -5.861226960679973e-01, -5.861226960679973e-01, -6.682812858698485e-01, -2.308560313504352e-01, -2.770051511462507e-01, -3.521090478428188e-01, -3.163038733384790e-01, -3.163038733384788e-01, -4.735858656780244e-01, -3.645784380800198e-02, -4.894473028415281e-02, -3.333607340189404e-01, -7.153972443398006e-02, -7.153972443398005e-02, -1.053604652555028e-02, -1.288580113874398e-03, -2.532945178671555e-03, -6.813663836858584e-02, -3.670536228547477e-03, -3.670536228547471e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_8_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_8", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.875115673709493e+01, -2.875125266157336e+01, -2.875162966555587e+01, -2.875005503366876e+01, -2.875120781317846e+01, -2.875120781317846e+01, -4.714709463239909e+00, -4.714809549719759e+00, -4.717938127813501e+00, -4.716655391411392e+00, -4.714762511998904e+00, -4.714762511998904e+00, -8.114285866285900e-01, -8.100864640140464e-01, -7.779127658167889e-01, -7.927782357691139e-01, -8.109524148651490e-01, -8.109524148651490e-01, -2.284941606965878e-01, -2.323059222637718e-01, -8.986701916531716e-01, -1.494938853079048e-01, -2.295938386010866e-01, -2.295938386010866e-01, -1.121049572572232e-02, -1.174550064820398e-02, -4.808062064814379e-02, -5.430341628193436e-03, -1.162150022796272e-02, -1.162150022796270e-02, -7.076355564775791e+00, -7.079946862934103e+00, -7.076698226612608e+00, -7.079492047237234e+00, -7.078228532132505e+00, -7.078228532132505e+00, -2.577222583471068e+00, -2.596961826554347e+00, -2.567422100700738e+00, -2.582887724920153e+00, -2.603634510438071e+00, -2.603634510438071e+00, -7.977824813217015e-01, -9.015525202979664e-01, -7.552861709054645e-01, -8.154892327002801e-01, -8.297341455721871e-01, -8.297341455721871e-01, -1.089943808767252e-01, -2.197740798648948e-01, -1.076954674352524e-01, -2.745503539370843e+00, -1.277661968851081e-01, -1.277661968851081e-01, -5.216119204775624e-03, -5.976043120517426e-03, -4.459259841868930e-03, -6.728801103600955e-02, -5.455466068149292e-03, -5.455466068149303e-03, -8.569016571568084e-01, -8.396595224490381e-01, -8.456959018646136e-01, -8.504739195987138e-01, -8.480734590707624e-01, -8.480734590707626e-01, -8.331807393273432e-01, -6.642644582156385e-01, -7.024631514136376e-01, -7.466227233961689e-01, -7.235018867261230e-01, -7.235018867261230e-01, -9.456012164963162e-01, -2.877859361637122e-01, -3.506125965465673e-01, -4.656143514471339e-01, -4.052628974798421e-01, -4.052628974798418e-01, -6.076140008700536e-01, -4.444020497894705e-02, -6.040764733961768e-02, -4.478146362448940e-01, -8.831062881129005e-02, -8.831062881129008e-02, -1.326272536593193e-02, -1.642739067972038e-03, -3.090571284154185e-03, -8.423417750569333e-02, -4.638048948786245e-03, -4.638048948786236e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_8_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_8", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.617260614523850e-08, -1.617251550666596e-08, -1.617204917598692e-08, -1.617354597751513e-08, -1.617255871739309e-08, -1.617255871739309e-08, -1.388401226949369e-05, -1.388630679907801e-05, -1.395389020281544e-05, -1.393158384889138e-05, -1.388433177069198e-05, -1.388433177069198e-05, -4.616319070771299e-03, -4.605685344824352e-03, -4.344138028575242e-03, -4.610525900455091e-03, -4.613054211434477e-03, -4.613054211434477e-03, -7.908192940477042e-01, -7.917359872724941e-01, -1.217517492360055e-03, -5.198758640698176e-01, -7.900781503127455e-01, -7.900781503127455e-01, -1.401901804308618e+02, -1.269037897635067e+02, -4.592733210719207e+00, -2.821110645248018e+02, -1.328667350882113e+02, -1.328667350882111e+02, -4.804851514655658e-06, -4.804214726259898e-06, -4.804832263186778e-06, -4.804333679226750e-06, -4.804468355955890e-06, -4.804468355955890e-06, -1.304306458633517e-04, -1.315556159820648e-04, -1.303850075586225e-04, -1.314139670363217e-04, -1.312132640800971e-04, -1.312132640800971e-04, -2.376136940003077e-02, -1.974983722521682e-02, -2.530087336052412e-02, -2.503500533963329e-02, -2.210204723731842e-02, -2.210204723731842e-02, -8.843509903033449e-01, -3.889181191690170e-01, -9.949201888183731e-01, -2.033563297005252e-04, -9.463945029586421e-01, -9.463945029586421e-01, -4.240321411301122e+02, -2.764702139847708e+02, -1.090658331256150e+03, -1.865893649256828e+00, -3.476177209572155e+02, -3.476177209572151e+02, -2.819105423049366e-02, -2.858295104117027e-02, -2.845450710848009e-02, -2.834636804664628e-02, -2.840133788257677e-02, -2.840133788257678e-02, -3.169581598230054e-02, -4.364183016445720e-02, -4.126836303339760e-02, -3.807081896715369e-02, -3.976156080202750e-02, -3.976156080202749e-02, -1.550868373244817e-02, -2.714470518301823e-01, -2.017542009959060e-01, -1.215350497041190e-01, -1.689947004594738e-01, -1.689947004594738e-01, -5.357436723380681e-02, -5.312135256165663e+00, -2.692820760575909e+00, -1.777919345856052e-01, -1.739030575845262e+00, -1.739030575845261e+00, -5.060734495427124e+01, -3.344979161658208e+03, -1.723479895444958e+03, -2.076194882312678e+00, -5.633000122639295e+02, -5.633000122639307e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_8_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_8", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_8_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_8", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.168909413383462e-03, 2.168898167656016e-03, 2.168865418588813e-03, 2.169050178186478e-03, 2.168903324787038e-03, 2.168903324787038e-03, 8.038981346187290e-03, 8.040611632538216e-03, 8.090721867560992e-03, 8.091061315772015e-03, 8.039264877865406e-03, 8.039264877865406e-03, 1.445112028257837e-02, 1.439428239137946e-02, 1.323870690516151e-02, 1.521813818270827e-02, 1.443329792103745e-02, 1.443329792103745e-02, 9.320144517502509e-02, 9.597103032911038e-02, 2.997693467009044e-03, 1.546140316938092e-02, 9.379056891216055e-02, 9.379056891216055e-02, 2.310972173166426e-03, 2.391975305074267e-03, 5.330790973235701e-03, 3.624837404515235e-04, 2.435211552154496e-03, 2.435211552154477e-03, 8.583699689667681e-03, 8.572656190195434e-03, 8.582625237185289e-03, 8.574035457143320e-03, 8.577967065740728e-03, 8.577967065740728e-03, 1.832132978548635e-02, 1.893340627972618e-02, 1.835113347987802e-02, 1.885981709269889e-02, 1.868574268971778e-02, 1.868574268971778e-02, 6.709400368222103e-02, 6.017958678737449e-02, 5.980597414526054e-02, 5.965902394167023e-02, 6.835326011031578e-02, 6.835326011031578e-02, 1.164931977004457e-02, 4.610273997677975e-02, 1.266740653780784e-02, 1.744826087836827e-02, 2.145637880723032e-02, 2.145637880723032e-02, 5.865505592589618e-04, 5.187340089948639e-04, 1.009932991848908e-03, 4.845536195724670e-03, 4.505438513936369e-04, 4.505438513936402e-04, 6.326881376686182e-02, 6.703426705437095e-02, 6.570293504171038e-02, 6.465842530432847e-02, 6.518233123027829e-02, 6.518233123027831e-02, 6.519802371419685e-02, 9.380711595502408e-02, 8.929913251769367e-02, 8.115476288308271e-02, 8.548200480427821e-02, 8.548200480427824e-02, 5.508381590215816e-02, 6.821255740884047e-02, 8.039347043575812e-02, 8.427538715397864e-02, 9.130770293712004e-02, 9.130770293711984e-02, 8.294816164816392e-02, 5.177598501725470e-03, 6.035451527788002e-03, 9.770665465311337e-02, 1.259054632702926e-02, 1.259054632702930e-02, 9.659752700355877e-04, 1.032792950263238e-04, 5.512372602370445e-04, 1.286941405601805e-02, 4.396851845284202e-04, 4.396851845284224e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
