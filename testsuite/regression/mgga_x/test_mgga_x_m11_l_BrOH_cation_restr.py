
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_m11_l_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_m11_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.435350090831402e+01, -2.435352825008695e+01, -2.435368689126946e+01, -2.435327528392002e+01, -2.435348654345590e+01, -2.435348654345590e+01, -3.035193554546185e+00, -3.035077801545884e+00, -3.032219150854393e+00, -3.033618255652206e+00, -3.033149387756706e+00, -3.001871795377753e+00, -6.579163249168554e-01, -7.079470483238939e-01, -6.973430938655336e-01, -7.003178651014760e-01, -6.997334598716020e-01, -6.997334598716020e-01, -3.030941060155182e-01, -3.050069971648810e-01, -6.329335813220263e-01, -2.629465355348451e-01, -2.753545948383968e-01, -2.753545948383924e-01, -4.093234354880500e-02, -4.305809068237224e-02, -2.157489667481032e-01, -2.371290195064555e-02, -2.976451413584764e-02, -2.976451413584764e-02, -7.233088738730710e+00, -7.225920097656644e+00, -7.232678312304714e+00, -5.285360977710251e+00, -7.229562067054880e+00, -7.229562067054880e+00, -1.801590572736582e+00, -1.786039159965583e+00, -1.816678847488451e+00, -1.800165289567498e+00, -1.786341470031355e+00, -1.703312510260895e+00, -5.855146222137165e-01, -6.474535083665900e-01, -5.678369125466739e-01, -5.595309853826265e-01, -5.878736385101948e-01, -5.843659473595026e-01, -3.590085063363282e-02, -3.075611634435193e-01, -3.683120970381419e-02, -2.198358474194121e+00, -2.411777383722621e-01, -2.411777383722637e-01, -2.491208632921660e-03, -2.318457477598167e-02, -1.771118370854265e-02, -3.576867312117260e-02, -2.903553201855050e-03, -2.134242910221934e-02, -4.354893622204840e-01, -6.060502349238157e-01, -4.673968693653614e-01, -5.114621352216177e-01, -5.388772982942153e-01, -5.388772982942153e-01, -4.551092980274962e-01, -5.092027008819259e-01, -4.864031255949189e-01, -5.125334745602999e-01, -4.838495561084349e-01, -5.365519622297816e-01, -6.730631984931547e-01, -1.188449925741568e-01, -3.837837488209771e-01, -2.766031608397130e-01, -4.018421632701107e-01, -4.018421632701115e-01, -3.872173640117151e-01, -2.081752722851863e-01, -2.635276663310394e-01, -3.871187227373589e-01, -3.297713278303685e-02, -2.641205252344480e-01, -5.770088331145111e-02, -6.203367789637561e-03, -1.301334062394599e-02, -2.611227844015560e-01, -1.974701051464483e-02, -1.974701051464489e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_m11_l_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_m11_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.030098046673865e+01, -3.029937747046204e+01, -3.029295484714230e+01, -3.031667304489980e+01, -3.030414943407239e+01, -3.030414943407239e+01, -3.272351709451552e+00, -3.274685045388937e+00, -3.336578367817757e+00, -3.311764894400678e+00, -3.314104452630716e+00, -5.543523304384485e+00, -8.576409225068925e-01, -7.592183590054511e-01, -7.525058790639870e-01, -7.548870921309145e-01, -7.548552253567422e-01, -7.548552253567422e-01, -2.999869745189064e-01, -2.907163623372925e-01, -1.860630139672124e+00, -2.213411579858751e-01, -3.342701700326259e-01, -3.342701700326273e-01, -5.411302667752752e-02, -5.685881820297124e-02, -2.264204828848848e-01, -3.154119851763654e-02, -3.950678671916395e-02, -3.950678671916395e-02, -6.249896606790136e+00, -6.136324445872927e+00, -6.243380799026309e+00, -2.257746186423720e+00, -6.193139679157462e+00, -6.193139679157462e+00, -1.191466826920301e+00, -1.307269204304713e+00, -1.121768795851750e+00, -1.203525541616564e+00, -1.299651592182852e+00, -2.533461766930880e+00, -6.396181561160847e-01, -1.164464917794197e+00, -5.619851840230045e-01, -5.876939936517983e-01, -6.874662162897823e-01, -9.914649316545259e-01, -5.602304062764758e-03, -3.577342922474948e-01, -8.844344558380072e-03, -4.108074488254376e+00, -8.757907175627769e-02, -8.757907175627092e-02, -3.318261643462716e-03, -3.084621880233480e-02, -2.352736168251418e-02, -2.549207823702833e-02, -3.860817414237116e-03, -2.836281049844961e-02, -7.809651534693760e-02, -4.217557537569073e-01, 1.889725601745755e-02, -1.040803570660615e-01, -1.549792262054108e-01, -1.549792262054108e-01, -7.611320529513831e-02, -4.371934138714790e-01, -5.176300637976889e-01, -9.944703995829066e-01, -7.141752331860051e-01, -8.530635316282196e-01, -1.085437307257471e+00, -2.994471183313953e-01, -3.275575727017580e-01, -4.474922763497479e-01, -3.111709818240253e-01, -3.111709818240310e-01, -6.603575212032186e-01, -2.232864623793180e-01, -2.260793428632460e-01, -2.144590465509651e-01, -9.941658503670238e-03, 4.859280069509821e-02, -7.605106964229071e-02, -8.269742728301841e-03, -1.732853019013239e-02, 2.886357094733727e-02, -2.624023529927221e-02, -2.624023529927128e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_m11_l_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_m11_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.260654416684614e-08, -4.260881789980439e-08, -4.261767824005804e-08, -4.258406526233132e-08, -4.260184831221048e-08, -4.260184831221048e-08, 3.143393316458724e-06, 3.132443320253318e-06, 2.844185995888517e-06, 2.959865446993708e-06, 2.948241938533392e-06, -1.106335732456492e-06, 1.860785666128054e-04, -2.486684114318156e-03, -2.813650633613633e-03, -2.712212520159804e-03, -2.733178553546965e-03, -2.733178553546965e-03, -7.329868369556557e-01, -8.125569609371708e-01, -2.026298138143859e-03, -3.916770017847361e-01, 7.043775691169292e-02, 7.043775691170787e-02, -5.514477565655378e+01, -5.745494008517706e+01, -2.697470948349606e+01, -4.048736616571126e+01, -5.634689952723805e+01, -5.634689952723805e+01, -1.880927502103360e-05, -1.910230034369180e-05, -1.882611860407353e-05, -2.292661198931424e-05, -1.895543875461691e-05, -1.895543875461691e-05, 7.718208352491811e-05, 5.978152559504919e-05, 9.149518782756718e-05, 7.507225316899741e-05, 6.078326667056219e-05, -3.804187439851702e-06, -5.546926275178478e-03, 7.416957180806541e-03, -1.710828641521719e-02, -5.477442763580480e-03, -1.842658276885250e-03, 4.468699045423869e-04, -2.530029754309644e+02, 1.360786674633899e-03, -3.495485122819037e+02, -1.318206635315312e-04, -3.184521735834267e+00, -3.184521735834284e+00, -3.464929179155006e+08, -3.579168399352810e+01, -2.892806906840751e+02, -1.744390096112209e+03, -1.867092156403306e+08, -1.110327701802993e+02, -2.382609981653548e-01, -8.058690529921753e-02, -1.332069415668898e-01, -1.676285801340291e-01, -1.438817486773408e-01, -1.438817486773408e-01, -2.216914463845035e-01, -2.290050585727126e-02, 6.637279310582971e-03, 3.365429900886437e-02, 2.381076138181387e-02, 3.759120083059971e-02, 3.535417393379027e-03, -3.679438355804169e+00, -2.327624863210621e-01, -3.328871635489552e-01, -2.076846815264742e-01, -2.076846815264745e-01, -7.487715304241901e-02, -2.745534392010443e+01, -2.358628722140745e+01, -1.766658774460094e-01, -6.456826969225616e+02, -2.457140585533161e+01, -2.635622314644662e+01, -4.383138559968983e+01, -1.256503313974513e+02, -2.929685377240843e+01, -1.582372820744666e+02, -1.582372820744669e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_m11_l_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_m11_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.283760675211118e-03, -1.284753839037016e-03, -1.288768035785431e-03, -1.274070047583135e-03, -1.281825318190441e-03, -1.281825318190441e-03, -5.862425766465344e-03, -5.845115228567376e-03, -5.384336934916457e-03, -5.571256172895218e-03, -5.551634822167733e-03, 1.316681726988428e-02, -6.374074498894647e-03, 7.551264063082175e-03, 1.029839860007273e-02, 9.291842486576121e-03, 9.559305637425944e-03, 9.559305637425944e-03, 3.487808249618489e-02, 3.813702325110165e-02, 3.982360945190758e-02, -4.743354317041270e-02, -1.029642272289968e-02, -1.029642272289616e-02, -8.746204140672672e-05, -1.062126725970201e-04, -7.978412005288590e-03, -1.239622752381094e-05, -3.420204873780574e-05, -3.420204873780574e-05, 1.736120906091704e-02, 1.656422712866019e-02, 1.731580952182327e-02, -6.925885047982977e-02, 1.696399707894268e-02, 1.696399707894268e-02, -2.371353628705586e-02, -2.159330503922366e-02, -2.494056281477262e-02, -2.349661485469182e-02, -2.173402212227464e-02, 7.035201574994745e-03, -4.106877508924590e-02, 1.039905939675575e-01, 9.831347654216522e-03, -6.044821403116020e-02, -5.146362192395407e-02, 9.499532706967462e-02, -2.188446070632988e-02, -1.100024612899486e-02, -2.134365424118867e-02, 7.766324708646358e-02, -6.186900188750950e-02, -6.186900188752605e-02, -1.945522183481854e-06, -1.023928166266669e-05, -3.695703431177888e-05, -1.351084443694387e-02, -1.224222706667519e-05, -2.481004797078744e-05, -7.758240627505110e-01, -4.226852396266707e-01, -1.442877854455184e+00, -8.831222649207502e-01, -8.123058499162160e-01, -8.123058499162160e-01, -9.288484433302463e-01, -4.533233339727147e-02, -1.392550427771054e-01, 1.006471362717616e-01, -8.849686394051227e-02, 9.624840700335165e-02, 3.138944293600785e-02, 6.321393535216568e-02, 3.426944947446205e-02, 3.757046426759458e-02, 3.975754760686235e-02, 3.975754760686697e-02, 6.574382179355537e-02, -7.147835962429148e-03, -1.503315493990249e-02, -7.000968511787899e-02, -2.382437473647846e-02, -5.727980492540082e-02, -1.175361827130891e-04, -2.396272871748113e-07, -6.349908060150381e-06, -5.457177489440655e-02, -2.800888828433905e-05, -2.800888828612743e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
