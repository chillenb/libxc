
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_sa_tpss_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_sa_tpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.990389233513574e+01, -1.990395276800803e+01, -1.990423658967935e+01, -1.990333748712323e+01, -1.990380643680535e+01, -1.990380643680535e+01, -3.234945438461302e+00, -3.234941328679883e+00, -3.234892135167805e+00, -3.235204549293120e+00, -3.234834864707757e+00, -3.704943251355104e+00, -6.333225750646336e-01, -7.541942370257035e-01, -7.479920220411362e-01, -7.474996420537908e-01, -7.476817232722972e-01, -7.476817232722972e-01, -2.073833418234546e-01, -2.087514814261318e-01, -7.448163319140885e-01, -1.833047170608861e-01, -1.930398701211235e-01, -1.930398701211235e-01, -1.008704521686782e-02, -1.061618632638805e-02, -5.776405250425989e-02, -5.828118852765272e-03, -7.322377910365276e-03, -7.322377910365276e-03, -5.479801359427585e+00, -5.480807802523645e+00, -5.479851485764736e+00, -4.866490482265720e+00, -5.480309464224534e+00, -5.480309464224534e+00, -1.826763765081079e+00, -1.838588177440073e+00, -1.818249151203034e+00, -1.828633455858417e+00, -1.837419219419296e+00, -2.113880921061160e+00, -6.189978310777245e-01, -6.708762397041531e-01, -5.761099847959223e-01, -5.953084095720788e-01, -6.284466667986963e-01, -5.536247322333429e-01, -8.764674606344913e-02, -2.254525667422239e-01, -8.110105202484848e-02, -2.022717041351925e+00, -1.548779508480343e-01, -1.548779508480343e-01, -2.584147035613813e-03, -5.697602372238147e-03, -4.356209402203539e-03, -5.458476590292890e-02, -3.015983814038426e-03, -5.248019424239859e-03, -6.203076631114069e-01, -6.169184275895842e-01, -5.510993660785255e-01, -6.191162506689529e-01, -6.186258671390146e-01, -6.186258671390145e-01, -6.035281966104518e-01, -5.209423898726950e-01, -5.432934712519850e-01, -5.669297641385228e-01, -5.547240065072370e-01, -4.902443487372017e-01, -7.034696876080586e-01, -2.086154452049417e-01, -3.011010540589033e-01, -3.246239538310328e-01, -3.320837745751506e-01, -3.320837745751506e-01, -4.214537051669163e-01, -5.534936533837389e-02, -7.471313736427380e-02, -3.562501237384803e-01, -6.945956012420711e-02, -1.124904999809116e-01, -1.423265036656283e-02, -1.523224867993396e-03, -3.197061125631452e-03, -1.062377876117941e-01, -4.856034416617899e-03, -4.856034416615522e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_sa_tpss_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_sa_tpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.680324353913801e+01, -2.680332356629293e+01, -2.680370029016472e+01, -2.680250954301035e+01, -2.680313049971447e+01, -2.680313049971447e+01, -4.242650213235556e+00, -4.242694012317384e+00, -4.243931895950440e+00, -4.243814041000567e+00, -4.243385599317545e+00, -4.398664290196355e+00, -8.234619888137795e-01, -7.033583264338926e-01, -6.424158697668554e-01, -6.680979650180625e-01, -6.623888991142443e-01, -6.623888991142443e-01, -1.430489454459290e-01, -1.510971264633025e-01, -9.789947519699462e-01, 8.825754445879211e-02, -4.244706715920715e-02, -4.244706715920545e-02, 1.117100263288041e+01, 1.039078529334248e+01, 2.450886739702867e+00, 2.265640375568454e+01, 1.526418236376721e+01, 1.526418236376721e+01, -6.733187358467516e+00, -6.732856433863633e+00, -6.733158972776028e+00, -6.542542317137534e+00, -6.733027524872528e+00, -6.733027524872528e+00, -2.377266586655905e+00, -2.395656327793568e+00, -2.364142488071437e+00, -2.380021988919912e+00, -2.393951538670429e+00, -2.427822511196272e+00, -7.680908868609134e-01, -8.314324392164029e-01, -6.966582396013673e-01, -7.390684671158336e-01, -7.820103000367571e-01, -7.428956763199095e-01, -1.166301036119067e-01, -5.922968196436047e-02, -1.079478405928587e-01, -2.519330193823007e+00, 1.904411842269889e-01, 1.904411842269922e-01, -3.445469887878722e-03, 2.465302669465720e+01, 1.132932642808025e+01, -7.271310657879608e-02, -4.021196469573396e-03, 1.518391292553071e+01, -7.401103680893262e-01, -7.453000789836850e-01, -7.378010442166476e-01, -7.421195459238891e-01, -7.428949400053863e-01, -7.428949400053860e-01, -7.213955591340330e-01, -6.387149506960018e-01, -6.766947700613746e-01, -7.020548843205791e-01, -6.906534994814403e-01, -6.600649918096267e-01, -8.752667751711882e-01, -2.740393257246764e-01, -2.614819767466400e-01, -4.222151335059522e-01, -3.440597448144700e-01, -3.440597448144699e-01, -5.538904685664393e-01, 2.562242744262397e+00, 1.861677202293978e+00, -4.273103718066759e-01, -9.245886277274709e-02, 6.119349764577610e-01, 1.143076050485181e+01, 8.343855288111263e+01, 2.346155635708218e+01, 6.568018061225435e-01, 1.374478416588743e+01, 1.374478416564082e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_sa_tpss_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_sa_tpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.852686195801811e-09, -6.852723394479510e-09, -6.852819476292795e-09, -6.852275199563133e-09, -6.852570029627323e-09, -6.852570029627323e-09, -4.827038322986597e-06, -4.828120930346325e-06, -4.856399975286507e-06, -4.843197669344697e-06, -4.846625764609057e-06, -6.212883031208359e-06, -1.820965828860078e-03, -5.173739102121583e-03, -6.168095356520331e-03, -5.777294093964269e-03, -5.860361686207452e-03, -5.860361686207452e-03, -1.451085149850777e+00, -1.324421699422665e+00, -6.491612873819216e-04, -8.294878152122596e+00, -3.911058570495467e+00, -3.911058570495509e+00, -4.370440290337884e+06, -3.559696311056011e+06, -3.609254928454628e+03, -3.936147188455442e+07, -1.577694284499742e+07, -1.577694284499742e+07, -6.144222714264677e-06, -6.206622969218156e-06, -6.147825199386838e-06, -2.425009384551510e-06, -6.175353862995694e-06, -6.175353862995694e-06, -3.986128415431813e-05, -4.020726996744865e-05, -3.953458592803038e-05, -3.985549438632502e-05, -4.023045291202184e-05, -5.912580903902528e-05, -1.069248768015442e-02, -1.774789089582123e-02, -1.099136549129397e-02, -1.269362656831428e-02, -1.129491486213880e-02, -8.727405538384100e-03, -1.543982956269928e+00, -2.001806156025416e+00, -2.038591881500657e+00, -1.137058361088329e-04, -2.229104896498129e+01, -2.229104896498150e+01, -1.582796100736091e+06, -4.310041512833929e+07, -1.260181688009210e+08, -8.883426665970310e+00, -8.526596498924778e+05, -5.983883817796189e+07, -1.870070456681430e-01, -8.573093115188329e-02, -2.763679558916906e-02, -1.337477245778733e-01, -1.192493096340463e-01, -1.192493096340463e-01, -1.808086865531187e-01, -1.772820039234545e-02, -2.189771565088983e-02, -3.639060880006819e-02, -2.701391245266301e-02, -1.678641464676975e-02, -1.117843343091696e-02, -1.079530901312506e-01, -2.305486764711595e-01, -3.929861358999612e-02, -1.138629043358742e-01, -1.138629043358735e-01, -1.741161438521778e-02, -4.322513113044771e+03, -1.195976497976364e+03, -7.362858771339251e-02, -3.756247231851260e+00, -1.510802294709908e+02, -1.100503621468789e+06, -8.447429211349621e+09, -4.349933046538402e+08, -1.995189087946430e+02, -8.162416986435692e+07, -8.162416986289339e+07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_sa_tpss_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_sa_tpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.552139436644783e-04, 1.552175668008859e-04, 1.552319065949210e-04, 1.551783011776471e-04, 1.552066409919303e-04, 1.552066409919303e-04, -5.308655407371102e-04, -5.306317182808733e-04, -5.243625940286449e-04, -5.268706937923875e-04, -5.266579374479354e-04, 2.547326514820871e-03, -2.001261543921266e-03, 1.078825099065495e-02, 1.279039607365352e-02, 1.181014340989286e-02, 1.201709859352651e-02, 1.201709859352651e-02, 6.942963256945260e-02, 6.367316634373317e-02, -5.718208047511494e-04, 2.718224410835001e-01, 1.599742890269255e-01, 1.599742890269277e-01, 1.520177285329463e+01, 1.443774974095232e+01, 2.457507216924244e+00, 2.637345833781967e+01, 2.097419973067064e+01, 2.097419973067064e+01, 1.376506265048786e-02, 1.391285437382887e-02, 1.377353163397056e-02, 7.819146781898024e-04, 1.383882701061104e-02, 1.383882701061104e-02, -1.125727003482829e-03, -1.104574202405774e-03, -1.134599548526760e-03, -1.123515202580624e-03, -1.106360895521342e-03, 3.750956711578923e-03, 3.006371433211252e-02, 7.251921290406603e-02, 1.934576737331301e-02, 3.197004299379784e-02, 3.472542643035335e-02, 2.203642291251651e-03, -1.267770445473465e-04, 1.306945042123190e-01, -1.036846078191212e-04, 1.190521840791537e-02, 4.121385768828627e-01, 4.121385768828666e-01, -3.455395106383969e-08, 2.698021603378122e+01, 3.526808609207090e+01, -4.142815613023953e-05, -1.333179438068484e-07, 2.927910245669541e+01, 6.062875320519354e-01, 2.734880642677495e-01, 7.757664492282268e-03, 4.309882806556324e-01, 3.833667195874597e-01, 3.833667195874597e-01, 5.397928596992455e-01, 2.602765074315477e-02, 4.445239514733439e-02, 8.985122855848460e-02, 6.114215343178770e-02, 5.126142756388474e-03, 5.190962080832682e-02, -2.200826987470829e-03, 3.106671241309141e-02, -6.351706301577534e-03, 2.129264151878006e-02, 2.129264151877994e-02, -3.728725448566836e-03, 2.580737334574657e+00, 1.808349983120600e+00, 2.880333020450857e-02, -1.118334290854474e-04, 8.978588630326098e-01, 1.076031186921214e+01, 1.009989011640764e+02, 4.809937500729999e+01, 9.835385504449289e-01, 3.164164799662541e+01, 3.164164799605797e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
