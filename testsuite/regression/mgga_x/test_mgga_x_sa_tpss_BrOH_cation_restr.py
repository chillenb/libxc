
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_sa_tpss_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_sa_tpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.234710831557893e+01, -2.234717123105758e+01, -2.234754284474475e+01, -2.234660895065964e+01, -2.234708515467562e+01, -2.234708515467562e+01, -3.451060905761037e+00, -3.451065996632002e+00, -3.451450944410498e+00, -3.453413668413480e+00, -3.452085748159422e+00, -3.452085748159422e+00, -6.693744544360302e-01, -6.691723427084356e-01, -6.665051040624844e-01, -6.729376824234228e-01, -6.707390239597762e-01, -6.707390239597762e-01, -2.042071717781498e-01, -2.051810140172497e-01, -7.649008795789277e-01, -1.818409935304128e-01, -1.880108166982953e-01, -1.880108166982953e-01, -1.872294121008577e-02, -2.268834931243218e-02, -8.733001207305688e-02, -4.270770319778120e-02, -3.436230019245213e-02, -3.436230019245236e-02, -5.476099737123866e+00, -5.477112372881516e+00, -5.476224947789550e+00, -5.477116186805468e+00, -5.476572379060429e+00, -5.476572379060429e+00, -2.078014761652653e+00, -2.092663644360643e+00, -2.073764674149094e+00, -2.086642598903946e+00, -2.088241063433517e+00, -2.088241063433517e+00, -5.949147916809713e-01, -6.128252120285983e-01, -5.428173704948540e-01, -5.365837191824664e-01, -6.032697918406902e-01, -6.032697918406902e-01, -1.527464605605786e-01, -2.212565633141964e-01, -1.464937455367774e-01, -1.813528518919583e+00, -1.559175418268109e-01, -1.559175418268109e-01, -7.378771557600391e-02, -5.950652336028399e-02, -2.846892873127988e-02, -1.159492711148978e-01, -4.405416491291593e-02, -4.405416491291587e-02, -5.832964259398183e-01, -5.997971703429312e-01, -5.965206437768079e-01, -5.921700814480958e-01, -5.945727727381985e-01, -5.945727727381985e-01, -5.464465003776555e-01, -5.188525794910138e-01, -5.392789045357240e-01, -5.573893814188448e-01, -5.483949732621199e-01, -5.483949732621199e-01, -6.398068662869294e-01, -2.616428501775718e-01, -2.952559329849190e-01, -3.606201743188515e-01, -3.245116184182191e-01, -3.245116184182191e-01, -4.722908132959691e-01, -7.411005749598126e-02, -1.041061900499858e-01, -3.434639121000327e-01, -1.242938485588203e-01, -1.242938485588203e-01, -7.430140084955641e-02, -7.730881441300198e-02, -2.400741416175696e-02, -1.141799087588275e-01, -3.601461859432709e-02, -3.601461859432712e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_sa_tpss_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_sa_tpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.763966736898745e+01, -2.763972995303720e+01, -2.764017988740220e+01, -2.763925206181271e+01, -2.763971372111043e+01, -2.763971372111043e+01, -4.195498681469457e+00, -4.195540513449724e+00, -4.196770767012056e+00, -4.197209996239448e+00, -4.196490262639898e+00, -4.196490262639898e+00, -7.845104560485302e-01, -7.829865410285590e-01, -7.429079358444252e-01, -7.530290515269663e-01, -7.512810663833704e-01, -7.512810663833704e-01, -1.888769341359827e-01, -1.931393632272370e-01, -9.328510235946982e-01, -1.675282119272120e-01, -1.725721381674789e-01, -1.725721381674789e-01, -6.460792071051119e-01, -4.673763663303465e-01, -2.353178635436451e-01, -1.714797211188629e-01, -2.081824039435828e-01, -2.081824039435810e-01, -6.727236809523863e+00, -6.726946580231253e+00, -6.727330764119121e+00, -6.727070661160465e+00, -6.727035559322966e+00, -6.727035559322966e+00, -2.436617271524375e+00, -2.465481784791192e+00, -2.414519943988374e+00, -2.439794526583517e+00, -2.462719054492341e+00, -2.462719054492341e+00, -7.261082803156297e-01, -7.870174612492863e-01, -6.594861418404642e-01, -6.939821992740121e-01, -7.374006078180033e-01, -7.374006078180033e-01, -1.995978495692021e-01, -2.131097197593233e-01, -1.951954456531920e-01, -2.377409614315559e+00, -1.869983622896006e-01, -1.869983622896007e-01, -1.014934787769739e-01, -1.215555297649970e-01, -1.001039148939314e-01, -1.912168306815975e-01, -9.842650531543887e-02, -9.842650531543898e-02, -7.311362820279540e-01, -7.310202751170911e-01, -7.296735995027303e-01, -7.292929692208809e-01, -7.293538324528690e-01, -7.293538324528690e-01, -7.183106752235385e-01, -6.377790829090114e-01, -6.690154676904176e-01, -6.847589943830777e-01, -6.777799681632716e-01, -6.777799681632717e-01, -8.246996001384584e-01, -2.358823392968691e-01, -2.969770665948467e-01, -4.250184434010071e-01, -3.618475820678873e-01, -3.618475820678873e-01, -5.704448890329001e-01, -3.225405312860091e-01, -2.228103333311093e-01, -4.142296461342971e-01, -1.886195884476496e-01, -1.886195884476496e-01, -1.390924782938405e-01, -6.482938480846492e-02, -1.695568765445568e-01, -2.210315786192070e-01, -1.035817134759374e-01, -1.035817134759373e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_sa_tpss_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_sa_tpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.379784041254767e-08, -1.379824211267700e-08, -1.379924355162909e-08, -1.379329297596164e-08, -1.379652177007269e-08, -1.379652177007269e-08, -1.220167201051732e-05, -1.220408568802800e-05, -1.226520281299411e-05, -1.221748022899688e-05, -1.223557424867404e-05, -1.223557424867404e-05, -5.330450862379836e-03, -5.346224873369628e-03, -5.693245222882500e-03, -5.580340466637561e-03, -5.613521095191172e-03, -5.613521095191172e-03, -6.411622139157735e-01, -6.021573057444032e-01, -1.900358586494379e-03, -2.434504281343237e-01, -4.960838408323973e-01, -4.960838408323968e-01, 2.482579510333834e+05, 1.559333354555931e+05, 2.536479921547778e+02, 2.811570571956362e+05, 2.046974965828322e+05, 2.046974965828302e+05, -6.172259162099533e-06, -6.234582004604892e-06, -6.175287623184234e-06, -6.230283898182954e-06, -6.203645639755807e-06, -6.203645639755807e-06, -5.603445194793895e-05, -5.479905849842778e-05, -5.581022125776928e-05, -5.483902680034033e-05, -5.557935741765966e-05, -5.557935741765966e-05, -1.928888169579187e-02, -2.481783128528592e-02, -2.214751249708478e-02, -2.182843879960261e-02, -2.022597557929453e-02, -2.022597557929453e-02, 4.927466990884028e+00, -2.324716716380781e-01, 6.781808545538149e+00, -1.590434220111028e-04, 2.051103428627755e+00, 2.051103428627758e+00, 2.830276274196997e+05, 1.929414599335482e+05, 1.037347673262919e+06, 3.677201682524647e+01, 3.515199391410022e+05, 3.515199391410027e+05, -1.700703348498906e-01, -9.116047415605970e-02, -1.116363125374027e-01, -1.343095257166998e-01, -1.222054599063967e-01, -1.222054599063967e-01, -1.043638943947362e-01, -1.810793483323635e-02, -2.435776400473869e-02, -4.319507534678774e-02, -3.148791057991165e-02, -3.148791057991165e-02, -1.690680788137246e-02, -2.581201372633010e-01, -1.359845918999630e-01, -7.563101423084194e-02, -9.210875865087573e-02, -9.210875865087567e-02, -2.669981722928809e-02, 4.369622155018984e+02, 9.122534691515324e+01, -1.164249519260117e-01, 1.602214787993389e+01, 1.602214787993386e+01, 1.143546064361108e+04, 5.650809103389870e+06, 3.044095059635758e+06, 2.889504675309484e+01, 5.672580641173631e+05, 5.672580641173641e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_sa_tpss_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_sa_tpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.930935605875237e-03, 1.931014941942437e-03, 1.931353329712896e-03, 1.930180250657005e-03, 1.930796733335101e-03, 1.930796733335101e-03, 2.680200823660137e-03, 2.681180000213302e-03, 2.708484605351998e-03, 2.710802580733306e-03, 2.705148249459012e-03, 2.705148249459012e-03, 3.956941312228202e-03, 3.960718516880768e-03, 3.805432494941985e-03, 4.281092086656485e-03, 4.147568702403076e-03, 4.147568702403076e-03, 2.797113888764669e-03, 1.190459261569332e-03, 6.222137927877047e-04, -3.545833350418332e-02, -2.409501054097362e-02, -2.409501054097359e-02, -8.635925952253146e-01, -6.325815484785273e-01, -1.775575070905350e-01, -1.887274055247392e-01, -2.724522357874928e-01, -2.724522357874902e-01, 1.370841103544525e-02, 1.385548100950081e-02, 1.371797454256206e-02, 1.384768372997142e-02, 1.378122523395458e-02, 1.378122523395458e-02, 2.881536138162423e-03, 3.055309753108775e-03, 2.712409308916298e-03, 2.880778528144805e-03, 3.068908615746753e-03, 3.068908615746753e-03, 3.232152041412411e-02, 3.108987724030641e-02, 2.187613804852584e-02, 1.301112980628948e-02, 3.584967639425746e-02, 3.584967639425746e-02, -8.207127277952213e-02, -1.711386100682734e-02, -8.636511728871515e-02, 3.398566689282736e-03, -7.145098686636378e-02, -7.145098686636381e-02, -8.824251317215842e-02, -1.215827396660528e-01, -2.911436097344834e-01, -1.210943104830256e-01, -1.731535728569282e-01, -1.731535728569284e-01, 3.003036144347051e-01, 2.190735850492674e-01, 2.534076400322240e-01, 2.826225126738940e-01, 2.682439740721078e-01, 2.682439740721077e-01, 7.646384299977541e-02, 2.529219207885226e-02, 4.391628179423791e-02, 8.407667371078942e-02, 5.958169598386603e-02, 5.958169598386603e-02, 2.204821798692964e-02, 5.045509102688591e-03, 3.518614620451006e-03, 2.050691002581202e-02, 1.071503868916163e-02, 1.071503868916167e-02, 2.128589166601251e-02, -2.635002698519953e-01, -1.457461255252914e-01, 3.352554083384948e-02, -1.165574385202798e-01, -1.165574385202798e-01, -1.139281285908131e-01, -6.950267799494826e-02, -3.367675215218376e-01, -1.582018821571126e-01, -2.207833033386161e-01, -2.207833033386160e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
