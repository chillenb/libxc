
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_tm_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.989439397818460e+01, -1.989444604480062e+01, -1.989471354065517e+01, -1.989386061907562e+01, -1.989442113699284e+01, -1.989442113699284e+01, -3.236662635006009e+00, -3.236655473045320e+00, -3.236561408482665e+00, -3.236855148058696e+00, -3.236676041570671e+00, -3.767663416444095e+00, -6.522298679325680e-01, -7.589499309517347e-01, -7.473656319548664e-01, -7.493361426747536e-01, -7.592278920746069e-01, -7.592278920746069e-01, -2.105194657302525e-01, -2.124991629237649e-01, -8.294411769270621e-01, -1.713760720397708e-01, -2.111253663657351e-01, -2.111253663657351e-01, -2.618598074319085e-02, -2.697687149761136e-02, -7.359323752810308e-02, -1.840511937076980e-02, -2.668829207074232e-02, -2.668829207074232e-02, -5.412148145803089e+00, -5.412654214319200e+00, -5.412199076545577e+00, -4.860659785326638e+00, -5.412408084416886e+00, -5.412408084416886e+00, -1.830586281764762e+00, -1.840778940397050e+00, -1.826662460036905e+00, -1.834445868895848e+00, -1.842712765458701e+00, -2.154928470340843e+00, -6.168364472747231e-01, -6.592195460911939e-01, -5.912145144580249e-01, -6.073808090878807e-01, -6.365388777349652e-01, -5.596885622530327e-01, -1.387005698323625e-01, -2.222341255360821e-01, -1.353967021596695e-01, -2.024117825777095e+00, -1.474293392178278e-01, -1.474293392178278e-01, -2.115671971299683e-02, -1.909359327440902e-02, -1.401379392537160e-02, -1.042707999165893e-01, -2.163383370906193e-02, -1.767664742802364e-02, -6.189015572447260e-01, -6.164341059589467e-01, -5.596071892810285e-01, -6.179461759047398e-01, -6.176016647540445e-01, -6.176016647540445e-01, -5.992777863463443e-01, -5.358426086969181e-01, -5.530661629737491e-01, -5.696376238934923e-01, -5.611049824885682e-01, -4.982362508775309e-01, -6.940565038294454e-01, -2.351542573324323e-01, -3.111286547978111e-01, -3.281233362643430e-01, -3.441555623841894e-01, -3.441555623841894e-01, -4.216715363481837e-01, -7.022196238270502e-02, -8.734989218613820e-02, -3.584347644423628e-01, -1.160862781423880e-01, -1.117137947605547e-01, -3.158118565702290e-02, -8.629454082496218e-03, -1.189095169556524e-02, -1.066184785470655e-01, -1.548476722014205e-02, -1.548476722014204e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_tm_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.675918696147265e+01, -2.675925642196934e+01, -2.675961371616583e+01, -2.675847577795400e+01, -2.675922319028294e+01, -2.675922319028294e+01, -4.214639607502507e+00, -4.214723708992369e+00, -4.217392314239395e+00, -4.216698554239454e+00, -4.214683003932441e+00, -4.242372134486867e+00, -7.393864344682343e-01, -7.781827836927178e-01, -7.555815483047087e-01, -7.612123178141581e-01, -7.787996957597222e-01, -7.787996957597222e-01, -2.124313565645433e-01, -2.150940995709360e-01, -8.699361869993653e-01, -1.527400927268851e-01, -2.134142254812896e-01, -2.134142254812896e-01, -1.643773950010694e-02, -1.699114118383390e-02, -5.366725640355363e-02, -9.459957228164133e-03, -1.681035316009731e-02, -1.681035316009736e-02, -6.912960004679435e+00, -7.025057793427663e+00, -7.022056928509662e+00, -6.530534893327989e+00, -6.914616242054883e+00, -6.914616242054883e+00, -2.322793624259918e+00, -2.348958832638203e+00, -2.311742169149905e+00, -2.332464822043370e+00, -2.354701845388814e+00, -2.379374381686117e+00, -7.297810551136852e-01, -8.228408926711357e-01, -6.806619200006497e-01, -7.405623531194465e-01, -7.674822182061974e-01, -7.510790551008145e-01, -1.372877001663281e-01, -2.098682824327879e-01, -1.339766682666671e-01, -2.445069368991008e+00, -1.299494614122372e-01, -1.299494614122372e-01, -2.115570287529414e-02, -1.149613843594138e-02, -7.264325520117900e-03, -1.037435853895756e-01, -2.163269515844845e-02, -9.125732848804947e-03, -8.321679918709630e-01, -8.072958656732072e-01, -7.489838833715449e-01, -8.146781904466199e-01, -8.262602566810732e-01, -8.262602566810732e-01, -8.029363120342619e-01, -6.292415266932244e-01, -6.734846667669424e-01, -7.174897935944321e-01, -6.947128007513663e-01, -6.701243058109124e-01, -8.533434634024731e-01, -2.515735590670700e-01, -3.232740565989633e-01, -4.178608610878272e-01, -3.690029276448096e-01, -3.725011972682899e-01, -5.521695242970550e-01, -5.036244200134266e-02, -6.588011775714515e-02, -4.052173288758255e-01, -1.150059020287016e-01, -8.811002719817562e-02, -1.971701857412918e-02, -5.088467396874042e-03, -6.055231281810434e-03, -8.809867037428279e-02, -9.291385026575281e-03, -7.969890214811176e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_tm_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.519647925485639e-09, -7.519723758515973e-09, -7.519994565873582e-09, -7.518769661101175e-09, -7.519688284560439e-09, -7.519688284560439e-09, -4.930791167567438e-06, -4.931697563106030e-06, -4.958273409130930e-06, -4.946397397703928e-06, -4.930948950119200e-06, -8.703742213926676e-06, -1.362463032473550e-03, -4.534025755232747e-03, -4.591652754360788e-03, -4.678137777143131e-03, -4.531384392061100e-03, -4.531384392061100e-03, -7.276666135698389e-01, -7.177092758691915e-01, -2.697643541536125e-04, -1.211875718412969e+00, -7.208764919783928e-01, -7.208764919783928e-01, -1.206785012441803e+03, -1.075416164580143e+03, -2.353389134630553e+01, -5.691909193163567e+03, -1.122762871155191e+03, -1.122762871155190e+03, -2.203827318918282e-06, -1.026643065911945e-06, -1.035831465185861e-06, -2.858029843223066e-06, -2.203154377368577e-06, -2.203154377368577e-06, -4.054473766568800e-05, -4.102064289890898e-05, -4.027400442326286e-05, -4.069498750482885e-05, -4.120081822429345e-05, -7.925176609591329e-05, -1.275825638987542e-02, -1.005802322558543e-02, -1.472946521729430e-02, -1.070476338278841e-02, -1.140944467535927e-02, -8.701420086691468e-03, 1.356396380199926e-01, -5.328598184233314e-01, 1.435433856402691e-01, -1.117204815834791e-04, -2.147981558653953e+00, -2.147981558653953e+00, 4.049915767615269e+02, -4.081672535195661e+03, -1.703086321739003e+04, 5.908418995757091e-01, 3.703894426714286e+02, -6.709357450061366e+03, 1.758912970433622e-02, -1.264041833823833e-02, -3.634877963391048e-02, -1.223548897656300e-02, 7.361443148449103e-03, 7.361443148449103e-03, 1.078984394683710e-02, -2.225890976178022e-02, -2.013549170732246e-02, -1.804099014065127e-02, -1.913292325722514e-02, -1.740201452312517e-02, -8.154301392511644e-03, -5.206983674739368e-02, -1.575585425115884e-01, -4.013425633915482e-02, -1.164938540614893e-01, -1.087641721306122e-01, -1.793630245470373e-02, -2.768525851462607e+01, -1.251573574622594e+01, -1.067813026207708e-01, 3.026127804234912e-01, -6.285231020365146e+00, -5.669718542061796e+02, -9.577364371941550e+04, -3.247158710506860e+04, -6.715803724503028e+00, -9.402250468872287e+03, -1.137071609985005e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_tm_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.368028260892098e-04, 1.368058747145808e-04, 1.368189169928041e-04, 1.367693499849230e-04, 1.368044340291504e-04, 1.368044340291504e-04, -7.596929645552782e-04, -7.591597725853386e-04, -7.431142224598985e-04, -7.492631024954346e-04, -7.595413376982541e-04, 3.412597397565941e-03, -1.217575550579430e-02, 1.222463251515053e-02, 1.131753770278727e-02, 1.191469738432339e-02, 1.224128170391432e-02, 1.224128170391432e-02, 3.998961942725946e-02, 4.138055495753472e-02, -1.026547198970451e-02, 2.595237435305855e-02, 4.004819758843729e-02, 4.004819758843729e-02, 1.068581029009029e-02, 1.095540321977442e-02, 1.691107230024833e-02, 6.358970008687909e-03, 1.108407233047657e-02, 1.108407233047657e-02, 3.520429379711909e-03, 8.930131507595175e-04, 9.080435548071926e-04, 7.200584573978026e-04, 3.522753808699871e-03, 3.522753808699871e-03, -2.265725331563401e-03, -2.077981808203114e-03, -2.348868566049873e-03, -2.198498344204231e-03, -2.030889659242639e-03, 5.610191745648180e-03, 2.419317404070196e-02, 2.669093308454092e-02, 2.326904724539245e-02, 1.662465757629175e-02, 2.481159649287490e-02, 2.293561085133732e-03, -2.853813003445201e-02, 3.116695516449679e-02, -3.020978657378066e-02, 7.846883298605493e-03, 2.819094040906574e-02, 2.819094040906574e-02, -6.064097962242844e-03, 5.276877517115096e-03, 1.074469699038725e-02, -2.165513342878543e-02, -6.262603314170225e-03, 7.601558295270967e-03, -6.447082150288136e-02, 3.432808279586416e-02, 7.902953871639522e-03, 3.548896216377532e-02, -3.135359150079595e-02, -3.135359150079595e-02, -3.947829801808665e-02, 2.723758233999553e-02, 2.942988110615509e-02, 3.183380814207468e-02, 3.054836585277011e-02, 4.785759275605417e-03, 2.415922685737514e-02, -3.633880841987402e-02, 2.894362984019164e-02, -1.201706308098336e-02, 3.185911391041837e-02, 2.819691857021555e-02, -4.739509245993683e-03, 1.571566037560581e-02, 1.793045341503142e-02, 3.631693465858851e-02, -3.115411717358420e-02, 3.055668497878088e-02, 8.067786232466050e-03, 2.524528499829838e-03, 6.831929736336393e-03, 2.618458124223850e-02, 5.638139886260956e-03, 7.905379933602807e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
