
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_tm_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.226483310535124e+01, -2.226487973311539e+01, -2.226517067718230e+01, -2.226440795128859e+01, -2.226485697035172e+01, -2.226485697035172e+01, -3.402968011312336e+00, -3.402977494607623e+00, -3.403504777407516e+00, -3.405223246445123e+00, -3.402976268357481e+00, -3.402976268357481e+00, -6.688269347995711e-01, -6.686222982756804e-01, -6.641972526232052e-01, -6.678800871173625e-01, -6.687479642352826e-01, -6.687479642352826e-01, -2.054334326214381e-01, -2.067532833072141e-01, -8.310774089178407e-01, -1.581622081193682e-01, -2.057788678827990e-01, -2.057788678827990e-01, -2.594085674599664e-02, -2.666044536513812e-02, -7.005752634422741e-02, -1.689960849831108e-02, -2.641585476642733e-02, -2.641585476642733e-02, -5.411474728936257e+00, -5.411994342922063e+00, -5.411536152694377e+00, -5.411939804731913e+00, -5.411729389083742e+00, -5.411729389083742e+00, -2.104325151966202e+00, -2.120477354929686e+00, -2.104517102273380e+00, -2.117180858760629e+00, -2.115016599938000e+00, -2.115016599938000e+00, -5.804248748420252e-01, -6.002671011337751e-01, -5.416863687308413e-01, -5.457200907097349e-01, -6.055737214279627e-01, -6.055737214279627e-01, -1.274847374871663e-01, -2.178641612027789e-01, -1.250545560925693e-01, -1.806251047845644e+00, -1.411593259437493e-01, -1.411593259437493e-01, -1.612853410825225e-02, -1.755670937202128e-02, -1.332137560660579e-02, -8.774943687912795e-02, -1.623555581075263e-02, -1.623555581075263e-02, -5.912673895091285e-01, -6.090139609106124e-01, -6.064298430536148e-01, -6.023655887006319e-01, -6.047046092006153e-01, -6.047046092006152e-01, -5.528322819058024e-01, -5.330404644031326e-01, -5.489976254163247e-01, -5.632816190948037e-01, -5.558316308489233e-01, -5.558316308489233e-01, -6.268157629114812e-01, -2.659694760356256e-01, -3.031741802829332e-01, -3.603897604892677e-01, -3.318187239528332e-01, -3.318187239528333e-01, -4.712973276591860e-01, -6.806841578320230e-02, -8.258890061022138e-02, -3.330347009616832e-01, -1.061954784444160e-01, -1.061954784444160e-01, -2.900682289721406e-02, -8.060942391409080e-03, -1.143743485969767e-02, -1.010452984236993e-01, -1.423948382015108e-02, -1.423948382015107e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_tm_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.792914275110397e+01, -2.792925484561576e+01, -2.793001211383167e+01, -2.792819194715063e+01, -2.792919945129534e+01, -2.792919945129534e+01, -4.152939170447372e+00, -4.152983525498843e+00, -4.154378643845567e+00, -4.152954927352021e+00, -4.152979022516947e+00, -4.152979022516947e+00, -7.722714106841860e-01, -7.714736337013330e-01, -7.524975794721894e-01, -7.571649868946827e-01, -7.719813163570441e-01, -7.719813163570441e-01, -2.094393666733049e-01, -2.122044880411356e-01, -9.011097455397820e-01, -1.664214320014852e-01, -2.102388271809602e-01, -2.102388271809602e-01, -1.473932565216075e-02, -1.536645209312930e-02, -5.662851987739163e-02, -1.781631794305302e-02, -1.512946684108727e-02, -1.512946684108728e-02, -7.011416142796159e+00, -7.014810432353789e+00, -7.011915746375776e+00, -7.014546641296309e+00, -7.012951055538529e+00, -7.012951055538529e+00, -2.324165252325914e+00, -2.353341937757124e+00, -2.320087897805960e+00, -2.343314223933279e+00, -2.349025795954086e+00, -2.349025795954086e+00, -6.993069939136599e-01, -7.860258195263776e-01, -6.606786554168650e-01, -7.117073197718221e-01, -7.322764961297686e-01, -7.322764961297686e-01, -1.203875344218165e-01, -2.094020766185303e-01, -1.183782774577840e-01, -2.385713520504595e+00, -1.317255127282912e-01, -1.317255127282912e-01, -1.245855627660628e-02, -1.631791994562001e-02, -8.982815161883715e-03, -9.148098393291632e-02, -1.722501505285492e-02, -1.722501505285493e-02, -7.442569503122900e-01, -7.664498900679844e-01, -7.589831779307470e-01, -7.516201893272257e-01, -7.553861581201665e-01, -7.553861581201666e-01, -7.256640734584779e-01, -6.307092567552961e-01, -6.687041648267754e-01, -6.987648262744504e-01, -6.835801335173344e-01, -6.835801335173348e-01, -8.234668726018223e-01, -2.659677780489582e-01, -3.169065147148222e-01, -4.081629023496111e-01, -3.601748024643900e-01, -3.601748024643900e-01, -5.378023417626776e-01, -4.975385439143187e-02, -7.128973774837789e-02, -3.912369968036125e-01, -9.639775737378967e-02, -9.639775737378976e-02, -3.001773523671150e-02, -9.649402665470267e-03, -7.060667216908667e-03, -9.277672825057774e-02, -1.544912786282711e-02, -1.544912786282709e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_tm_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-8.195190802645656e-09, -8.195079633257179e-09, -8.192773702018021e-09, -8.194494495585707e-09, -8.195149058374828e-09, -8.195149058374828e-09, -1.158272198532169e-05, -1.158577732229769e-05, -1.168085987383973e-05, -1.170518345979195e-05, -1.158293170684191e-05, -1.158293170684191e-05, -2.581236011539145e-03, -2.586935554933513e-03, -2.848795616665761e-03, -3.378248126091713e-03, -2.584005783962492e-03, -2.584005783962492e-03, -8.243373378226554e-01, -8.165995587681769e-01, -2.208264773331557e-06, -6.579584202358056e-01, -8.223852191066896e-01, -8.223852191066896e-01, -1.405309826838999e+03, -1.240076361878663e+03, -2.048947970296487e+01, 7.105596595399586e+02, -1.302599280229934e+03, -1.302599280229934e+03, -1.169883691516247e-06, -1.159977243573985e-06, -1.167108420643073e-06, -1.159494929364147e-06, -1.167213578923238e-06, -1.167213578923238e-06, -9.623083631519009e-05, -9.253043414488502e-05, -9.421757582203056e-05, -9.119217176689508e-05, -9.650512218994536e-05, -9.650512218994536e-05, -2.561844634349066e-02, -1.901558277431189e-02, -2.364816977631412e-02, -1.746288138721772e-02, -2.544043380260295e-02, -2.544043380260295e-02, -2.139395930079994e+00, -5.519173774433069e-01, -2.363769359355332e+00, -1.168271154931619e-04, -2.067645856258076e+00, -2.067645856258076e+00, -3.952903478124008e+03, -9.800340370824225e+02, -1.250385943598496e+04, -2.030290757353809e+00, 9.464054359063153e+02, 9.464054359063321e+02, -2.073961261480565e-01, -7.082333410167131e-02, -1.020132929768253e-01, -1.401321716894451e-01, -1.192500525940769e-01, -1.192500525940760e-01, -1.073826998230825e-01, -2.309559225808172e-02, -2.545608623209330e-02, -3.643166302212826e-02, -2.972446780203918e-02, -2.972446780203941e-02, -1.191249049587069e-02, -2.835179210730117e-01, -1.892107419661763e-01, -1.191237529116333e-01, -1.530466104348445e-01, -1.530466104348449e-01, -4.833271907359542e-02, -2.837964004274317e+01, -9.891874883685047e+00, -1.747016244767267e-01, -4.835080197693808e+00, -4.835080197693790e+00, 2.365159541916951e+01, 6.985315392126933e+04, -2.668388380420085e+04, -5.612645509180282e+00, 2.413220600935899e+03, 2.413220600935872e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_tm_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_tm_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [8.673432322513884e-04, 8.673399485724263e-04, 8.670747221397885e-04, 8.671145962839109e-04, 8.673438394863047e-04, 8.673438394863047e-04, 2.554800222023834e-03, 2.556216124328152e-03, 2.601540306430175e-03, 2.621897109139702e-03, 2.554937062709881e-03, 2.554937062709881e-03, -4.076242495798384e-03, -4.048395782198106e-03, -2.790747870507610e-03, -1.046013446460042e-03, -4.064372828702810e-03, -4.064372828702810e-03, 4.372027089769650e-02, 4.472480665777088e-02, -8.999337384232205e-03, -4.155766238116251e-04, 4.399472378559283e-02, 4.399472378559283e-02, 1.364697188026977e-02, 1.365903650302238e-02, 1.047358114754946e-02, -4.743900022759387e-03, 1.402726952084838e-02, 1.402726952084832e-02, 1.223186982133825e-03, 1.207490702767833e-03, 1.217507501796093e-03, 1.205506402279042e-03, 1.220704801027689e-03, 1.220704801027689e-03, 6.753284166291373e-03, 6.648730301395039e-03, 6.532646206547610e-03, 6.431086665288624e-03, 6.994672168917896e-03, 6.994672168917896e-03, 4.272281678636269e-02, 2.393069407690512e-02, 2.620810469031673e-02, 1.472552553169963e-02, 5.142400531183944e-02, 5.142400531183944e-02, 1.037310329706883e-02, 3.022771411158638e-02, 1.119044453623140e-02, 2.802112010515994e-03, 2.144058655737325e-02, 2.144058655737325e-02, 9.667817934558978e-04, -2.606875616399239e-03, 4.896050757985408e-03, -7.631505227305615e-03, -5.801653064290839e-03, -5.801653064290853e-03, 3.536910104839340e-01, 1.798992433386147e-01, 2.424323440815960e-01, 3.040449697600498e-01, 2.723467230097081e-01, 2.723467230097069e-01, 8.661477745137496e-02, 2.829783233201088e-02, 3.986514705967364e-02, 7.045275883028895e-02, 5.222736532656874e-02, 5.222736532656898e-02, 1.551560465081930e-02, 3.151729861418714e-02, 3.450206876695785e-02, 4.064162115343783e-02, 4.040034439666708e-02, 4.040034439666723e-02, 4.227901976250200e-02, 1.475667618550283e-02, 8.409976601118767e-03, 4.789368510106613e-02, 1.501477377859020e-02, 1.501477377859003e-02, -7.068266598263518e-03, -4.353854112638303e-03, 4.210494156222572e-03, 1.414130688619628e-02, -6.653434098520344e-03, -6.653434098520313e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
