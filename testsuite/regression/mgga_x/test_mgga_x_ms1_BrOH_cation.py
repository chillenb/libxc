
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ms1_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.076366120524720e+01, -2.076378746386645e+01, -2.076433915800608e+01, -2.169598665608925e+01, -2.169673472343918e+01, -2.263016652693766e+01, -3.478434476905262e+00, -3.771295200872131e+00, -3.770761353096936e+00, -3.771318505254664e+00, -3.770866747239490e+00, -3.478099532616621e+00, -5.685515292766257e-01, -6.583142872906975e-01, -7.338958425747575e-01, -6.457077208662374e-01, -5.545664324380766e-01, -7.380819411996982e-01, -1.720953029597063e-01, -1.747624650778978e-01, -7.669772768051403e-01, -1.580075353199035e-01, -1.921028262140318e-01, -1.865505160904534e-01, -7.867227105941633e-03, -6.937433073743780e-03, -3.779024973778193e-02, -4.537031419722145e-03, -6.332162618781599e-03, -6.332162618781599e-03, -5.492362846741372e+00, -5.492944231008352e+00, -5.492388475777643e+00, -5.492901937356120e+00, -5.364835949967087e+00, -5.364940912286922e+00, -2.137276946744751e+00, -2.149636016567502e+00, -2.128464889341580e+00, -2.139298978358457e+00, -1.961229953419768e+00, -2.148372500216197e+00, -5.867368103391810e-01, -6.747571825092878e-01, -5.867002304627689e-01, -6.041860715489313e-01, -5.997995508700840e-01, -6.375341501186316e-01, -1.139031989666364e-01, -1.729701081398819e-01, -1.059882931871297e-01, -2.047547752521192e+00, -1.305893844942462e-01, -1.305893844942462e-01, -2.893460313296795e-03, -4.435269025842827e-03, -3.396385228417220e-03, -5.914181532195565e-02, -4.266326505425400e-03, -4.266326505425401e-03, -6.173905667672506e-01, -6.155194080122695e-01, -6.087564214890233e-01, -6.139642919278905e-01, -6.100445594691093e-01, -6.132118613864814e-01, -6.008800212508709e-01, -4.930316205866108e-01, -5.157353987013668e-01, -5.699889811758820e-01, -5.597512042194838e-01, -5.308674372653522e-01, -6.759453859437747e-01, -2.512255166456807e-01, -2.589456684638223e-01, -3.457609795980990e-01, -3.341426004758583e-01, -2.980274850288011e-01, -4.909232276080635e-01, -2.720424840320252e-02, -5.879144961099250e-02, -3.626521244039606e-01, -9.087838827668726e-02, -9.087838827668727e-02, -6.911917020706081e-03, -1.185543701475189e-03, -1.553405795247210e-03, -5.515993179223086e-02, -3.917961472368101e-03, -2.800026005603281e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ms1_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.135981157881875e+01, -3.136013337938080e+01, -3.135996612083681e+01, -3.136024546474916e+01, -3.136046044027760e+01, -3.136095304610683e+01, -3.135871809149867e+01, -2.935582775490533e+01, -3.135990512692278e+01, -2.935644848492178e+01, -2.935679827624910e+01, -2.935644848492178e+01, -4.713382132348750e+00, -4.697551613940061e+00, -4.713415761720908e+00, -4.713320326220664e+00, -4.714049551189625e+00, -4.714212755528446e+00, -4.714216230560098e+00, -4.714282888787640e+00, -4.712551903442025e+00, -4.714944144561686e+00, -4.697237101961339e+00, -4.714944144561687e+00, -8.269100355691361e-01, -8.351219027942417e-01, -8.242275220653883e-01, -9.065513432619887e-01, -8.846600604229240e-01, -8.788448428965516e-01, -8.874787106511659e-01, -8.034099518661465e-01, -8.447916494143539e-01, -7.505940501058072e-01, -9.139904894911932e-01, -8.589559856996639e-01, -1.939041382698739e-01, -2.395226235784023e-01, -1.971775544778217e-01, -2.433840371695170e-01, -1.054251126391821e+00, -9.158937763695553e-01, -1.888329236878801e-01, -1.893244204310175e-01, -2.419279761830853e-01, -1.474743777813318e-01, -2.419279761830851e-01, -1.031524320738040e-01, -1.013678980008742e-02, -1.077014383941186e-02, -6.624667195985290e-03, -1.137573151756455e-02, -3.683745268189766e-02, -6.086039615948859e-02, -6.097658569300696e-03, -5.996105080036069e-03, -9.044984719039490e-03, -5.149435328719114e-03, -9.044984719039490e-03, -5.149435328719114e-03, -7.182398869039238e+00, -7.180681435531514e+00, -7.184224319818247e+00, -7.182444852620026e+00, -7.182514313475603e+00, -7.180752116002799e+00, -7.184080266380678e+00, -7.182353726388463e+00, -7.584943662710412e+00, -7.181565355349687e+00, -7.183323193767527e+00, -7.583132365930517e+00, -2.646219461188719e+00, -2.646198730027713e+00, -2.666866822802096e+00, -2.666225420614797e+00, -2.628900249419309e+00, -2.633820288946327e+00, -2.646695104754292e+00, -2.651874919483232e+00, -2.670819811349693e+00, -2.693203036946533e+00, -2.670819811349693e+00, -2.658497165186404e+00, -8.015584451025265e-01, -7.395913393033543e-01, -8.762217805867105e-01, -8.769884572394672e-01, -7.226664798151384e-01, -7.512072166868800e-01, -7.566670312637337e-01, -7.833537263150201e-01, -8.357228206575731e-01, -7.368920338655286e-01, -8.357228206575730e-01, -7.925137276211879e-01, -1.407107225316405e-01, -1.418517563990227e-01, -1.919005599858140e-01, -2.420410608719001e-01, -1.293019318958101e-01, -1.348142334959083e-01, -2.625961520643837e+00, -2.624808650325516e+00, -1.551440443211990e-01, -1.599919551405291e-01, -1.551440443211990e-01, -1.599919551405291e-01, -2.850953768932066e-03, -4.754638904426591e-03, -5.867197838904049e-03, -5.956051369386864e-03, -4.386729113665868e-03, -4.645365354347320e-03, -9.272629887098796e-02, -6.169352483162100e-02, -4.481388897146862e-03, -6.151667545119670e-03, -4.481388897146863e-03, -6.151667545119689e-03, -8.170280451392095e-01, -8.202492904714535e-01, -8.102404205371802e-01, -8.134901138237847e-01, -8.256617797527368e-01, -8.284448489878979e-01, -8.240554242329637e-01, -8.178074824006861e-01, -8.247958481483855e-01, -8.276387156112355e-01, -8.247958481483854e-01, -8.168314868384127e-01, -7.948132583224939e-01, -7.975110406348365e-01, -6.683713489112935e-01, -6.162967052871043e-01, -7.035421662957267e-01, -6.951346988173136e-01, -7.397010749807208e-01, -7.423669514799173e-01, -7.212454301819620e-01, -7.240263113933009e-01, -7.212454301819620e-01, -7.593271426431872e-01, -9.159423741295791e-01, -9.736152043337535e-01, -2.980442540285798e-01, -2.996425575032988e-01, -3.150172518837211e-01, -3.574247852992324e-01, -4.736975773592889e-01, -4.712588955835127e-01, -4.080057914151191e-01, -4.078693385660981e-01, -4.080057914151189e-01, -3.941293411671438e-01, -6.124767840258168e-01, -6.170564331207736e-01, -3.614836452644981e-02, -3.639571052614526e-02, -7.527600331791641e-02, -7.756703116799320e-02, -4.507055311271389e-01, -4.586075439159608e-01, -1.113052917479587e-01, -1.155456663788265e-01, -1.113052917479585e-01, -1.155456663788266e-01, -9.043213487280759e-03, -9.371069994462930e-03, -1.578891924907668e-03, -1.582500510515353e-03, -2.001705683841637e-03, -2.128975581062230e-03, -7.298382162508860e-02, -7.419159985242560e-02, -4.244476796826295e-03, -5.638968688589898e-03, -4.244476796826276e-03, -3.515253204610749e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms1_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.521897809187648e-08, 0.000000000000000e+00, -3.522222407590561e-08, -3.521897320763316e-08, 0.000000000000000e+00, -3.522221913810765e-08, -3.521869804378441e-08, 0.000000000000000e+00, -3.522189209254445e-08, -3.521878557409621e-08, 0.000000000000000e+00, -3.871359710535162e-09, -3.521899989091439e-08, 0.000000000000000e+00, -3.871153709534858e-09, -3.870920763706039e-09, 0.000000000000000e+00, -3.871153709534858e-09, -4.436379128376380e-06, 0.000000000000000e+00, -2.391292586611268e-05, -4.436761394985629e-06, 0.000000000000000e+00, -4.436528125122501e-06, -4.444261240745989e-06, 0.000000000000000e+00, -4.445414582847896e-06, -4.440039223805328e-06, 0.000000000000000e+00, -4.439801429937855e-06, -4.438371392983401e-06, 0.000000000000000e+00, -4.446214122123702e-06, -2.393793522519199e-05, 0.000000000000000e+00, -4.446214122123702e-06, -1.582931786798476e-02, 0.000000000000000e+00, -1.571255733881061e-02, -1.589088666059020e-02, 0.000000000000000e+00, -2.327455110313458e-03, -2.357378005210523e-03, 0.000000000000000e+00, -2.388863794176576e-03, -2.389665981462316e-03, 0.000000000000000e+00, -1.664889017785222e-02, -1.532621047352680e-02, 0.000000000000000e+00, -1.864929608608521e-02, -2.280078009406400e-03, 0.000000000000000e+00, -2.489350948153449e-03, -3.528434747160869e+00, 0.000000000000000e+00, -3.844713263354781e-01, -3.368961818298623e+00, 0.000000000000000e+00, -3.747526299790537e-01, -8.525677925645810e-04, 0.000000000000000e+00, -7.397026132629920e-03, -4.405211042972027e-01, 0.000000000000000e+00, -4.918567753822340e-01, -3.337019339503582e-01, 0.000000000000000e+00, -4.911643562015726e-01, -3.337019339503585e-01, 0.000000000000000e+00, -3.551523237812115e+01, -2.145944446205411e+00, 0.000000000000000e+00, -2.154013228535113e+00, -2.075283190952103e+06, 0.000000000000000e+00, -2.252681909523076e+00, -2.170853905725789e+03, 0.000000000000000e+00, -1.035510460605083e+00, -1.572349224141816e+00, 0.000000000000000e+00, -1.588470586779055e+00, -2.039097996764211e+00, 0.000000000000000e+00, -3.492480240529568e+00, -2.039097996764211e+00, 0.000000000000000e+00, -3.492480240527076e+00, -1.137729367754273e-06, 0.000000000000000e+00, -1.138824933459074e-06, -1.137644300726823e-06, 0.000000000000000e+00, -1.138742966355801e-06, -1.137731002706692e-06, 0.000000000000000e+00, -1.138826741914042e-06, -1.137657573295733e-06, 0.000000000000000e+00, -1.138751832910648e-06, -9.443414457120070e-06, 0.000000000000000e+00, -1.138783201980522e-06, -1.137681368775310e-06, 0.000000000000000e+00, -9.453065704578575e-06, -4.116540205124272e-05, 0.000000000000000e+00, -4.123873308061082e-05, -4.059212919134076e-05, 0.000000000000000e+00, -4.067945972287950e-05, -4.159975981231865e-05, 0.000000000000000e+00, -4.154938750274051e-05, -4.112253390586219e-05, 0.000000000000000e+00, -4.105920182979553e-05, -4.051644549993122e-05, 0.000000000000000e+00, -2.541955926364964e-04, -4.051644549993122e-05, 0.000000000000000e+00, -4.090811203341273e-05, -6.159317258106920e-03, 0.000000000000000e+00, -2.002540438118378e-02, -4.909728886193205e-03, 0.000000000000000e+00, -4.923257863337029e-03, -8.137543528259510e-03, 0.000000000000000e+00, -7.435002563656101e-03, -7.655516698082811e-03, 0.000000000000000e+00, -6.914506735251015e-03, -5.451044995797553e-03, 0.000000000000000e+00, -2.195788252948107e-02, -5.451044995797538e-03, 0.000000000000000e+00, -6.508292846644512e-03, -6.010706672013871e-01, 0.000000000000000e+00, -5.949299371625371e-01, -3.238970470113426e+00, 0.000000000000000e+00, -2.499122464578415e-01, -6.469415687162244e-01, 0.000000000000000e+00, -6.573614865333490e-01, -5.585017892920583e-05, 0.000000000000000e+00, -5.595826849632929e-05, -6.753315444620287e-01, 0.000000000000000e+00, -8.127270183138747e-01, -6.753315444620194e-01, 0.000000000000000e+00, -8.127270183138787e-01, -6.050242942206446e+07, 0.000000000000000e+00, -1.052529523840668e+00, -1.491503502903703e+00, 0.000000000000000e+00, -1.314710530839376e+00, -1.074010254078712e+01, 0.000000000000000e+00, -1.178885830263228e+01, -9.491410568186550e-01, 0.000000000000000e+00, -2.762654166441683e+02, -2.023939696156329e+00, 0.000000000000000e+00, -6.425528120979208e+00, -2.023939696154830e+00, 0.000000000000000e+00, -6.425528120860733e+00, -7.415298982259085e-03, 0.000000000000000e+00, -7.306513986736920e-03, -7.419257650025719e-03, 0.000000000000000e+00, -7.311470837160737e-03, -3.350123082274642e-02, 0.000000000000000e+00, -3.237604374939790e-02, -2.874479891560812e-02, 0.000000000000000e+00, -7.308458127257800e-03, -3.112668619711891e-02, 0.000000000000000e+00, -3.010362902474710e-02, -3.112668619711891e-02, 0.000000000000000e+00, -7.309093739902224e-03, -8.241735297040297e-03, 0.000000000000000e+00, -8.139820519245491e-03, -1.200892010684280e-02, 0.000000000000000e+00, -3.531394752399865e-02, -1.082257462932794e-02, 0.000000000000000e+00, -5.716554123167621e-02, -9.737966562629869e-03, 0.000000000000000e+00, -9.611217014068080e-03, -1.027612248639192e-02, 0.000000000000000e+00, -1.014174963566066e-02, -1.027612248639191e-02, 0.000000000000000e+00, -8.245712101175323e-02, -3.968496533265116e-03, 0.000000000000000e+00, -3.457601439456086e-02, -1.455336771115833e-01, 0.000000000000000e+00, -1.435828273148038e-01, -6.534457087727354e-01, 0.000000000000000e+00, -8.967680446281692e-02, -2.622192108067305e-01, 0.000000000000000e+00, -4.064039652162144e-02, -6.344696701934091e-02, 0.000000000000000e+00, -6.374737926387497e-02, -6.344696701934126e-02, 0.000000000000000e+00, -4.155578788719793e-01, -1.569045369260038e-02, 0.000000000000000e+00, -1.547330110813697e-02, -2.341170303556262e+03, 0.000000000000000e+00, -2.278175618905991e+03, -8.592677911819671e-01, 0.000000000000000e+00, -8.851711389676373e-01, -5.273828469568947e-02, 0.000000000000000e+00, -5.240994627808475e-02, -1.047513599925245e+00, 0.000000000000000e+00, -1.221656257383961e+00, -1.047513599925322e+00, 0.000000000000000e+00, -1.221656257383901e+00, -5.976440081356225e+05, 0.000000000000000e+00, -5.182949810657826e+05, -1.715134882475911e+00, 0.000000000000000e+00, -1.707593580142479e+00, -2.489617475065369e+08, 0.000000000000000e+00, -1.945587615393334e+08, -1.413380757823313e+02, 0.000000000000000e+00, -1.324456144382433e+02, -5.223262563235789e+00, 0.000000000000000e+00, -6.662026092070273e+00, -5.223262563490296e+00, 0.000000000000000e+00, -2.617622939625645e+07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms1_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.154661506310054e-03, 2.154982160379039e-03, 2.154701236321688e-03, 2.155010900961007e-03, 2.154809389397516e-03, 2.155170765497811e-03, 2.154363972578380e-03, -5.305958064649271e-20, 2.154687363323380e-03, 1.937900745854790e-19, -5.759928167584897e-19, 1.937900745854790e-19, -4.681659812857341e-18, 3.384170472454994e-03, 9.426247087212670e-18, 3.434518055067770e-18, -4.388077560850991e-18, -4.371138021837833e-18, -9.466521569377885e-19, 1.217433336596251e-18, 3.114745305973881e-18, 4.858569426734327e-18, 3.387445857818104e-03, 4.858569426734327e-18, 6.724361182957762e-03, 7.207121081347911e-03, 6.592012129539544e-03, -5.748399050225335e-17, 4.821448208562617e-17, 2.942206755371919e-17, -4.337656548966648e-17, 5.830114656583387e-03, 7.492499377815529e-03, 3.741682783929526e-03, -1.435623846047721e-17, -3.443879225809753e-18, 6.251795843031340e-03, -9.517642932856250e-17, 7.001080768888154e-03, -3.087852148587638e-18, -4.240033364518895e-17, 1.709890240954811e-03, 8.367087685298734e-17, -2.149995995199006e-17, -9.163596411148752e-17, -1.166241841874007e-16, -6.925006028380009e-17, 6.272376160833161e-05, 9.438125766226293e-18, -1.075619247742391e-17, 3.253135565659953e-10, -3.638655020453651e-18, 5.800205861868731e-07, 1.782761291513376e-17, 2.058528118736414e-17, 6.180873729932794e-18, 2.674058609161289e-17, -1.548045451802648e-17, 2.674058609161289e-17, -1.599673232689827e-17, 1.376036344966593e-19, 8.571456206482312e-19, -3.458825972195631e-19, -2.123156620474010e-19, -2.534389713348249e-19, -1.842832538719828e-18, 6.049005292395730e-19, -9.525277329532860e-19, 8.692790655041112e-03, -4.987662151676592e-20, -9.273471138725384e-19, 8.695308219404551e-03, -8.885459107302103e-18, 1.123601206185333e-17, 2.275558648983389e-18, 1.385562523425709e-17, -3.053587597220989e-18, 4.847172732626005e-18, -9.924626281788186e-18, 6.742744314527737e-18, -2.211007106251991e-18, 6.606142882911029e-03, -2.211007106251991e-18, 8.902427524856853e-19, 3.423596481825109e-17, 6.165226343673539e-03, -1.051045408802734e-18, 1.533244303956291e-18, 5.258122705591697e-17, 3.340471704549005e-17, 5.243648344779177e-18, -3.048810794634151e-18, 1.248003028375322e-17, 8.090419526811428e-03, -1.685841548982803e-17, -2.363935678304142e-17, 2.195948487080183e-16, 2.008499095669890e-16, 1.845155530033014e-03, 1.548204859459276e-16, 7.888662662495380e-17, 1.263112071546635e-16, -1.616974618836760e-18, 2.111882177849554e-18, 3.547380008497421e-17, -1.366277406195480e-16, -4.767122015900854e-17, -9.643166045467917e-17, 1.761184034374596e-12, 4.927077761931276e-18, 3.360375325866678e-18, -7.781994103629146e-18, -1.696540355857259e-17, -1.196255395695988e-17, -3.124347985507564e-16, 1.061572291628868e-05, -1.407089291835666e-18, 3.132419439121384e-17, -1.611363708111505e-18, -1.049735927987656e-17, 1.877379585074498e-18, 3.876775928796139e-19, 1.017325239506210e-17, 6.135470102786160e-18, 4.030776617415960e-02, 3.921348900491594e-02, 3.326145498585047e-02, -3.975303900826667e-18, 3.680726467233627e-02, 3.581888906068170e-02, 3.680726467233627e-02, -4.085979926256538e-18, 4.451672804526144e-19, -1.061075645860786e-19, 1.431755786051415e-17, 2.912107279250969e-03, -1.371206102664213e-17, 3.415557129646051e-02, -1.836033233603783e-17, -1.594587361437501e-17, 3.106921915284148e-18, 3.930225668157412e-17, -1.968411950418573e-18, 7.080507510353906e-02, 2.358910980995855e-18, 6.280222835204019e-02, 7.105848755858738e-17, -6.887652552896307e-17, 1.190228451216532e-02, -3.412354960661001e-17, 3.628001922892014e-02, -4.621190959838868e-17, -2.281049648762919e-17, 7.408766266649539e-17, 4.442372815492685e-17, 2.688183017585319e-02, 3.439511483253590e-17, -1.241222207622965e-17, 5.698247518937197e-07, 5.720491770062857e-07, -6.625924983274665e-17, 5.765858465394111e-17, -1.019068154384087e-16, -5.025321227999917e-17, 1.886662379016813e-17, 1.920116716365237e-16, 2.309001187475401e-16, -4.256310045526833e-18, 4.898681925803916e-10, 5.727727432670400e-10, -2.206709415812278e-19, -2.644977732139206e-18, 2.547053678670342e-12, 3.780235438181591e-12, 3.685722911594029e-05, 4.762767337482043e-05, -1.175170942416496e-17, 3.028499312524337e-17, 1.772653786625411e-17, 7.071165525010626e-11])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
