
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ms1_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.260389896110427e+01, -2.260395406647628e+01, -2.260423892418665e+01, -2.260341868170132e+01, -2.260384278907324e+01, -2.260384278907324e+01, -3.371090108551120e+00, -3.371101718188628e+00, -3.371625157767963e+00, -3.372976649767001e+00, -3.371978108207119e+00, -3.371978108207119e+00, -6.425866068315957e-01, -6.422308428018995e-01, -6.359062649465326e-01, -6.454125811555049e-01, -6.447728499964362e-01, -6.447728499964362e-01, -1.949862685731459e-01, -1.966212983224049e-01, -7.124540330062761e-01, -1.524665255052444e-01, -1.858095751383432e-01, -1.858095751383431e-01, -7.867201547886539e-03, -8.284425322871079e-03, -4.525654873415012e-02, -4.536975698194798e-03, -6.332089198092972e-03, -6.332089198092972e-03, -5.492012824254944e+00, -5.492598420065633e+00, -5.492045900252476e+00, -5.492562754945956e+00, -5.492306316551838e+00, -5.492306316551838e+00, -2.104399662503728e+00, -2.124692391239007e+00, -2.102074971580738e+00, -2.119638432165922e+00, -2.116973329520370e+00, -2.116973329520370e+00, -6.034548266032229e-01, -6.478116198749262e-01, -5.345823073268010e-01, -5.396923823559026e-01, -6.155325055507479e-01, -6.155325055507479e-01, -1.122875645641993e-01, -1.993099473110503e-01, -1.046511987825056e-01, -1.841290011278057e+00, -1.282736456477319e-01, -1.282736456477319e-01, -3.502797478843085e-03, -4.435151567676173e-03, -3.396312529122775e-03, -7.203206338822490e-02, -4.266257854101786e-03, -4.266257854101787e-03, -6.163195239895025e-01, -6.145050408982826e-01, -6.151468894628311e-01, -6.156703884561209e-01, -6.154080064518515e-01, -6.154080064518515e-01, -5.981759182581228e-01, -5.286391786689946e-01, -5.483460462872585e-01, -5.678791892775611e-01, -5.577397110570809e-01, -5.577397110570809e-01, -6.679246307214153e-01, -2.487968963444772e-01, -2.879207643363478e-01, -3.521130828000923e-01, -3.204528278669748e-01, -3.204528278669748e-01, -4.759380661916698e-01, -4.330709064976439e-02, -5.864576060169339e-02, -3.408673421455412e-01, -8.994969880943610e-02, -8.994969880943612e-02, -1.108661696699308e-02, -1.185529913574572e-03, -2.493082254329158e-03, -8.492493069663226e-02, -3.917890872061790e-03, -3.917890872061787e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ms1_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.919437633228486e+01, -2.919499493037368e+01, -2.919449700253587e+01, -2.919508248114168e+01, -2.919495987892261e+01, -2.919572410425515e+01, -2.919360159128277e+01, -2.919399209940577e+01, -2.919444693167145e+01, -2.919474054909817e+01, -2.919444693167145e+01, -2.919474054909817e+01, -4.254782232309915e+00, -4.253805240856897e+00, -4.255168124618274e+00, -4.253992294358909e+00, -4.262016488557686e+00, -4.263124739301835e+00, -4.262723184586537e+00, -4.262172297798211e+00, -4.253306227695065e+00, -4.268555945929781e+00, -4.253306227695065e+00, -4.268555945929781e+00, -8.019313956989504e-01, -8.099448916814550e-01, -7.992892837998741e-01, -8.087150332467767e-01, -7.640195711851508e-01, -7.561584630554623e-01, -7.744080148753513e-01, -7.789249027235897e-01, -8.198160903763592e-01, -7.328250892504391e-01, -8.198160903763592e-01, -7.328250892504391e-01, -1.701043543928478e-01, -2.074978707620464e-01, -1.762396851471148e-01, -2.045190949808576e-01, -8.140068970249261e-01, -8.684204922740371e-01, -1.641499355679064e-01, -1.642633781353020e-01, -1.837602271751058e-01, -1.346239928905094e-01, -1.837602271751056e-01, -1.346239928905093e-01, -1.013664997229941e-02, -1.077005363339564e-02, -1.062064610098829e-02, -1.137553315461778e-02, -5.758149929665705e-02, -6.061343511156461e-02, -6.097411672764648e-03, -5.995906789545907e-03, -9.044714610687895e-03, -5.148994470395278e-03, -9.044714610687895e-03, -5.148994470395278e-03, -7.180320736497676e+00, -7.178721499885500e+00, -7.182190497034936e+00, -7.180526561109643e+00, -7.180485888911321e+00, -7.178827696993038e+00, -7.182087656779937e+00, -7.180465087092282e+00, -7.181232257264880e+00, -7.179620468318183e+00, -7.181232257264880e+00, -7.179620468318183e+00, -2.356783213612144e+00, -2.364473611970186e+00, -2.419529528525334e+00, -2.425419119948436e+00, -2.359920805912942e+00, -2.365697902513737e+00, -2.420603190053312e+00, -2.426598474480985e+00, -2.394139861487134e+00, -2.396814426028207e+00, -2.394139861487134e+00, -2.396814426028207e+00, -7.739361198535875e-01, -7.721954609424501e-01, -8.992318572467395e-01, -8.987847118770571e-01, -6.622817387519663e-01, -7.165123111123817e-01, -7.255966740617407e-01, -7.879139765921538e-01, -8.142703615529407e-01, -7.709047201744319e-01, -8.142703615529406e-01, -7.709047201744320e-01, -1.335626146548821e-01, -1.342594902102891e-01, -1.811154391126115e-01, -1.848577566097478e-01, -1.237280285513350e-01, -1.284527637374951e-01, -2.671355683226876e+00, -2.670573302117482e+00, -1.417369563901111e-01, -1.436570062711759e-01, -1.417369563901110e-01, -1.436570062711760e-01, -4.574741462373079e-03, -4.754259493624750e-03, -5.866748016217785e-03, -5.955562063297234e-03, -4.386480278818979e-03, -4.645038255553162e-03, -9.075164025870856e-02, -9.133948725935923e-02, -4.480678998334581e-03, -6.151559390960823e-03, -4.480678998334582e-03, -6.151559390960824e-03, -8.178062149533208e-01, -8.210176601429201e-01, -8.094768847284154e-01, -8.127737471218396e-01, -8.123674031202310e-01, -8.156537869754419e-01, -8.148040715598920e-01, -8.180297540302697e-01, -8.135824239013418e-01, -8.168377909108766e-01, -8.135824239013418e-01, -8.168377909108766e-01, -7.985250901285550e-01, -8.010242088545363e-01, -6.539453264179298e-01, -6.573116690033317e-01, -6.915440955107155e-01, -6.952231869829485e-01, -7.329591455614062e-01, -7.357247448530221e-01, -7.110631381936864e-01, -7.142373484897342e-01, -7.110631381936864e-01, -7.142373484897342e-01, -9.465336065759863e-01, -9.479167542640717e-01, -2.361937371168548e-01, -2.365936288691447e-01, -2.699278795673252e-01, -2.743865630990215e-01, -4.124499508979745e-01, -4.154037123062244e-01, -3.320821287150532e-01, -3.324303395476698e-01, -3.320821287150531e-01, -3.324303395476699e-01, -5.525338893801915e-01, -5.614059382979498e-01, -5.662032671706881e-02, -5.698954153976646e-02, -7.467118293272197e-02, -7.689272166539743e-02, -4.119765105244301e-01, -4.241426599085365e-01, -1.075621576017137e-01, -1.103592537558321e-01, -1.075621576017137e-01, -1.103592537558321e-01, -1.448797282073903e-02, -1.501089748326992e-02, -1.578849661684157e-03, -1.582432561223040e-03, -3.212245322245695e-03, -3.416392783977221e-03, -1.033806822433020e-01, -1.028913229249909e-01, -4.243731891829836e-03, -5.638882279361234e-03, -4.243731891829832e-03, -5.638882279361229e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms1_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.527693403417148e-09, 0.000000000000000e+00, -6.517671903522404e-09, -6.527480255096110e-09, 0.000000000000000e+00, -6.517518504568208e-09, -6.525518430625511e-09, 0.000000000000000e+00, -6.515068394238521e-09, -6.527859401325385e-09, 0.000000000000000e+00, -6.518065147772782e-09, -6.527592375688376e-09, 0.000000000000000e+00, -6.515933112045833e-09, -6.527592375688376e-09, 0.000000000000000e+00, -6.515933112045833e-09, -1.672253655288131e-05, 0.000000000000000e+00, -1.664346071748362e-05, -1.674788185611660e-05, 0.000000000000000e+00, -1.665416745413959e-05, -1.717897759993019e-05, 0.000000000000000e+00, -1.723935349459767e-05, -1.729555728516676e-05, 0.000000000000000e+00, -1.723380115703733e-05, -1.668307034762373e-05, 0.000000000000000e+00, -1.763570135223781e-05, -1.668307034762373e-05, 0.000000000000000e+00, -1.763570135223781e-05, -1.290622641426389e-02, 0.000000000000000e+00, -1.299278296364199e-02, -1.289551507469129e-02, 0.000000000000000e+00, -1.298762416748644e-02, -1.261757151627341e-02, 0.000000000000000e+00, -1.263193057905617e-02, -1.271753995024496e-02, 0.000000000000000e+00, -1.280227942031954e-02, -1.286543119890359e-02, 0.000000000000000e+00, -1.228293626678278e-02, -1.286543119890359e-02, 0.000000000000000e+00, -1.228293626678278e-02, -2.874782600144114e+00, 0.000000000000000e+00, -1.616876446008969e+00, -2.642633306812470e+00, 0.000000000000000e+00, -1.859883372545618e+00, -5.736772160069696e-03, 0.000000000000000e+00, -5.541305730967089e-03, -1.258227715412784e+00, 0.000000000000000e+00, -1.710276437353710e+00, -2.167363826989368e+00, 0.000000000000000e+00, -1.352860666635402e+00, -2.167363826989371e+00, 0.000000000000000e+00, -1.352860666635402e+00, -2.203454423063605e+00, 0.000000000000000e+00, -2.184682367265588e+00, -2.321928248339565e+00, 0.000000000000000e+00, -2.310961297528598e+00, -1.329488008979647e+00, 0.000000000000000e+00, -1.343739330664379e+00, -2.016378130479357e+00, 0.000000000000000e+00, -1.961600054661839e+00, -2.199011436436608e+00, 0.000000000000000e+00, -5.576700540880569e+00, -2.199011436436614e+00, 0.000000000000000e+00, -5.576700540880579e+00, -1.191962061687866e-06, 0.000000000000000e+00, -1.189993414945970e-06, -1.191202718143514e-06, 0.000000000000000e+00, -1.189263412095648e-06, -1.190682025407218e-06, 0.000000000000000e+00, -1.189075537119136e-06, -1.190079000407331e-06, 0.000000000000000e+00, -1.188459310662255e-06, -1.192509671447044e-06, 0.000000000000000e+00, -1.189782877713920e-06, -1.192509671447044e-06, 0.000000000000000e+00, -1.189782877713920e-06, -2.429446665739306e-04, 0.000000000000000e+00, -2.371256156384611e-04, -2.090040196623080e-04, 0.000000000000000e+00, -2.043585609067577e-04, -2.196631535356060e-04, 0.000000000000000e+00, -2.213583665644336e-04, -1.876650993084537e-04, 0.000000000000000e+00, -1.888103654500331e-04, -2.384515689939928e-04, 0.000000000000000e+00, -2.217051787545417e-04, -2.384515689939928e-04, 0.000000000000000e+00, -2.217051787545417e-04, -4.999525473652113e-02, 0.000000000000000e+00, -4.941943940408456e-02, -3.938380829976038e-02, 0.000000000000000e+00, -3.837976952526299e-02, -4.073925146973163e-02, 0.000000000000000e+00, -6.156284560286111e-02, -3.999528714091606e-02, 0.000000000000000e+00, -5.346019082479880e-02, -3.738923150682810e-02, 0.000000000000000e+00, -5.408946717000081e-02, -3.738923150682810e-02, 0.000000000000000e+00, -5.408946717000080e-02, -1.153777166333890e+00, 0.000000000000000e+00, -1.155498490229991e+00, -1.620777847197033e+00, 0.000000000000000e+00, -1.512626481218557e+00, -1.195022343550795e+00, 0.000000000000000e+00, -1.230768206104657e+00, -4.344346337258844e-04, 0.000000000000000e+00, -4.356107972526338e-04, -1.842219114075309e+00, 0.000000000000000e+00, -2.403892741822983e+00, -1.842219114075312e+00, 0.000000000000000e+00, -2.403892741822973e+00, -2.830188640842691e+00, 0.000000000000000e+00, -2.449631006937924e+00, -2.437414829956676e+00, 0.000000000000000e+00, -2.250398213969640e+00, -1.388593316472269e+01, 0.000000000000000e+00, -1.544895279889504e+01, -1.622683283285971e+00, 0.000000000000000e+00, -1.592787843959356e+00, -6.904081109504649e+00, 0.000000000000000e+00, -6.784281876848660e+00, -6.904081109504629e+00, 0.000000000000000e+00, -6.784281876848655e+00, -1.402330614224566e-02, 0.000000000000000e+00, -1.363404452746910e-02, -1.386656379115842e-02, 0.000000000000000e+00, -1.349195449310745e-02, -1.392397654715588e-02, 0.000000000000000e+00, -1.354170893789848e-02, -1.396805611579732e-02, 0.000000000000000e+00, -1.358779306684531e-02, -1.395027256283979e-02, 0.000000000000000e+00, -1.356746772990785e-02, -1.395027256283979e-02, 0.000000000000000e+00, -1.356746772990786e-02, -2.328216358634003e-02, 0.000000000000000e+00, -2.244913794265829e-02, -2.652810719600401e-02, 0.000000000000000e+00, -2.591453217322569e-02, -2.669259911207223e-02, 0.000000000000000e+00, -2.600189873826678e-02, -2.582301161265593e-02, 0.000000000000000e+00, -2.536354492656357e-02, -2.753774016930359e-02, 0.000000000000000e+00, -2.651172266625076e-02, -2.753774016930361e-02, 0.000000000000000e+00, -2.651172266625079e-02, -3.558494360447152e-02, 0.000000000000000e+00, -3.489519571315403e-02, -8.544615171012274e-01, 0.000000000000000e+00, -8.559214110715312e-01, -7.055831416102540e-01, 0.000000000000000e+00, -6.902602591094118e-01, -3.018083877377678e-01, 0.000000000000000e+00, -2.904159435568953e-01, -5.185541160485412e-01, 0.000000000000000e+00, -5.213933643250366e-01, -5.185541160485416e-01, 0.000000000000000e+00, -5.213933643250367e-01, -1.218075438351162e-01, 0.000000000000000e+00, -1.125032560745750e-01, -1.229978068105771e+00, 0.000000000000000e+00, -1.223865488557076e+00, -1.223568568440328e+00, 0.000000000000000e+00, -1.256390048866606e+00, -4.022392792163139e-01, 0.000000000000000e+00, -4.368284755021816e-01, -1.793465965018673e+00, 0.000000000000000e+00, -2.298121623415570e+00, -1.793465965018673e+00, 0.000000000000000e+00, -2.298121623415569e+00, -1.747933316867252e+00, 0.000000000000000e+00, -1.784757340380702e+00, -8.705877540185567e+00, 0.000000000000000e+00, -1.542146541756685e+01, -5.373888906372383e+00, 0.000000000000000e+00, -5.721060985263914e+00, -2.073811673880630e+00, 0.000000000000000e+00, -3.379826052741644e+00, -1.423603047247433e+01, 0.000000000000000e+00, -7.042085261577966e+00, -1.423603047247436e+01, 0.000000000000000e+00, -7.042085261577989e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms1_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms1_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.022497032026238e-04, 2.014792633218509e-04, 2.022380434829739e-04, 2.014708988020175e-04, 2.021053111609639e-04, 2.013075847306981e-04, 2.022318540362450e-04, 2.014700035073760e-04, 2.022446146403581e-04, 2.013354557790120e-04, 2.022446146403581e-04, 2.013354557790120e-04, 2.124667983851787e-03, 2.096343789127168e-03, 2.133285920025760e-03, 2.099847597465737e-03, 2.278514453477819e-03, 2.298699585505631e-03, 2.326083707059132e-03, 2.304133722071910e-03, 2.108080165286760e-03, 2.440307420414609e-03, 2.108080165286760e-03, 2.440307420414609e-03, 1.227477558074107e-02, 1.267771730180504e-02, 1.217795920215704e-02, 1.261076458592570e-02, 1.058039265927611e-02, 1.062598805867571e-02, 1.210895212209228e-02, 1.243284349567309e-02, 1.262271364220735e-02, 1.130308046806880e-02, 1.262271364220735e-02, 1.130308046806880e-02, 8.959105833959291e-02, 5.247160289910072e-02, 8.244691108288604e-02, 6.634206367960964e-02, 1.304792761149732e-03, 2.321836877383810e-03, 4.766851954819713e-03, 1.554670869283760e-02, 7.289981941209749e-02, 9.202056443762877e-05, 7.289981941209765e-02, 9.202056443762265e-05, 2.698327691598841e-10, 5.963690401230677e-09, 1.003845381835142e-10, 1.062586322762739e-09, 4.978002189284363e-07, 1.403824400762136e-06, 1.748769182958293e-15, 2.369209968025692e-15, 3.278906387348725e-12, 6.139259471558445e-16, 3.278906387257003e-12, 6.139259454940938e-16, 6.005114697591334e-05, 5.661848712247107e-05, 5.933785099734715e-05, 5.593177351160803e-05, 5.863439021566685e-05, 5.560228417951367e-05, 5.807591869732304e-05, 5.503040227919463e-05, 6.072766117553283e-05, 5.644701365653177e-05, 6.072766117553283e-05, 5.644701365653177e-05, 1.154324274152089e-02, 1.121673413443114e-02, 9.898655688576301e-03, 9.620283590180877e-03, 1.004421910909076e-02, 1.019151921918961e-02, 8.462844645587182e-03, 8.576512769013486e-03, 1.162181189570401e-02, 1.051246191995058e-02, 1.162181189570401e-02, 1.051246191995058e-02, 6.608248987430083e-02, 6.478205344253946e-02, 6.640201836986218e-02, 6.472760025189646e-02, 2.692298599321283e-02, 6.324440963548546e-02, 2.958634262211495e-02, 5.789264884251136e-02, 5.499775741641581e-02, 6.896463682256768e-02, 5.499775741641576e-02, 6.896463682256765e-02, 7.846457218920279e-04, 6.789046560608603e-04, 5.196250943784688e-02, 4.815897392351615e-02, 2.264304505626216e-04, 5.995768409926569e-04, 1.765426494404440e-02, 1.768574441090394e-02, 6.614929291485887e-03, 1.243027181343644e-02, 6.614929291485913e-03, 1.243027181343635e-02, 3.763233377351667e-18, 4.809909935514440e-18, 2.128982855379937e-16, 1.468333624621274e-16, 1.016845626863970e-14, 1.890527842779959e-14, 1.369304649030309e-05, 6.262856377867594e-05, 8.998170424233617e-18, 4.692896760764314e-12, 8.998170438991424e-18, 4.692896760757629e-12, 1.049880824217904e-02, 1.017181514023877e-02, 1.007031088082828e-02, 9.768482558872247e-03, 1.022326881012796e-02, 9.909069618875327e-03, 1.034533378847377e-02, 1.003313535970935e-02, 1.029084814642289e-02, 9.975271122493504e-03, 1.029084814642289e-02, 9.975271122493511e-03, 2.189522868693637e-02, 2.104685976355068e-02, 1.342158978814567e-02, 1.317913985466708e-02, 1.680843928764471e-02, 1.646162344950954e-02, 1.941805823784063e-02, 1.921906719506797e-02, 1.949880603576071e-02, 1.870555088404738e-02, 1.949880603576073e-02, 1.870555088404742e-02, 6.839817733519406e-02, 6.778220231812029e-02, 5.685968501147216e-02, 5.808714914948256e-02, 8.238793383732120e-02, 8.313959025064042e-02, 7.340831881752620e-02, 7.112172535552405e-02, 9.233645655456470e-02, 9.274558862743598e-02, 9.233645655456471e-02, 9.274558862743600e-02, 7.317995756535993e-02, 6.874584391154234e-02, 5.610823786528268e-06, 3.218151633471769e-06, 3.175626937656287e-06, 5.162340898810360e-06, 8.732856127935372e-02, 1.094100317833924e-01, 3.859788892859185e-04, 1.112699893367336e-03, 3.859788892859208e-04, 1.112699893367332e-03, 2.605068072855957e-13, 3.018473306902344e-13, 4.141426925307699e-22, 4.307322442939292e-22, 5.826259004193992e-16, 1.051346208877998e-15, 5.848244357580845e-04, 4.253573553847268e-03, 7.433794565091832e-17, 2.179457855961454e-12, 7.433794572294237e-17, 2.179457855970696e-12]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
