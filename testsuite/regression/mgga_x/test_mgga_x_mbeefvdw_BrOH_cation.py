
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mbeefvdw_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbeefvdw", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.275082844279105e+01, -2.275089175067884e+01, -2.275119597256641e+01, -2.275025377853297e+01, -2.275074422636796e+01, -2.275074422636796e+01, -3.395411044841476e+00, -3.395448533468509e+00, -3.396631256568653e+00, -3.397414424380872e+00, -3.396610348670257e+00, -3.396610348670257e+00, -6.281526687551846e-01, -6.275162055839559e-01, -6.147466911391972e-01, -6.268223021783079e-01, -6.266015194760304e-01, -6.266015194760304e-01, -1.891063069998876e-01, -1.904884532915921e-01, -6.829627562909658e-01, -1.416366721566723e-01, -1.774759540209338e-01, -1.774759540209337e-01, -6.874627227559445e-03, -7.240951054275472e-03, -4.003043322157522e-02, -3.964020344025979e-03, -5.533596621302992e-03, -5.533596621302992e-03, -5.545999638846901e+00, -5.547022991274917e+00, -5.546050676429116e+00, -5.546954022518978e+00, -5.546516194606578e+00, -5.546516194606578e+00, -2.084978829552468e+00, -2.104049974133788e+00, -2.078987237092933e+00, -2.095396247716657e+00, -2.098718046587008e+00, -2.098718046587008e+00, -6.135293710688758e-01, -6.675927760768825e-01, -5.409336657731394e-01, -5.550537030455706e-01, -6.260878591375822e-01, -6.260878591375824e-01, -1.026081969468642e-01, -1.896722189433997e-01, -9.543732830929028e-02, -1.902485499890105e+00, -1.188503965420462e-01, -1.188503965420462e-01, -3.060278422192157e-03, -3.875079157919605e-03, -2.967676381676660e-03, -6.479889578268869e-02, -3.727933702684789e-03, -3.727933702684790e-03, -6.283217419204938e-01, -6.245073519093591e-01, -6.258404208019611e-01, -6.269460440155425e-01, -6.263916972471094e-01, -6.263916972471094e-01, -6.110170096687790e-01, -5.256378387118344e-01, -5.492883451635289e-01, -5.733967504337322e-01, -5.609626194534139e-01, -5.609626194534139e-01, -6.902920028122334e-01, -2.422180309749564e-01, -2.806773580604696e-01, -3.503773312056765e-01, -3.157386117980868e-01, -3.157386117980867e-01, -4.768729832383097e-01, -3.821160935691793e-02, -5.221881250508321e-02, -3.431932309621999e-01, -8.180221619190445e-02, -8.180221619190448e-02, -9.694187340908881e-03, -1.035666414390592e-03, -2.178057359330375e-03, -7.682679828814182e-02, -3.423436059499808e-03, -3.423436059499805e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mbeefvdw_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbeefvdw", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.023266501496056e+01, -3.023288008581503e+01, -3.023277500846183e+01, -3.023295994680883e+01, -3.023316585153675e+01, -3.023350902572727e+01, -3.023192514936279e+01, -3.023192744487118e+01, -3.023272962089713e+01, -3.023258815300506e+01, -3.023272962089713e+01, -3.023258815300506e+01, -4.519464337281050e+00, -4.518104903604053e+00, -4.519961575713944e+00, -4.518336021239192e+00, -4.528654927225191e+00, -4.530017199830828e+00, -4.530027431941974e+00, -4.529197993611023e+00, -4.517728139762575e+00, -4.537275508722855e+00, -4.517728139762575e+00, -4.537275508722855e+00, -8.580102721547690e-01, -8.681520562640480e-01, -8.547073166062995e-01, -8.666133308239014e-01, -8.091467914837226e-01, -7.990101165023328e-01, -8.227596992673328e-01, -8.288276963285089e-01, -8.796253311517390e-01, -7.635513848098167e-01, -8.796253311517390e-01, -7.635513848098167e-01, -1.319391743498531e-01, -1.923193609118479e-01, -1.468943342929768e-01, -1.919172009721408e-01, -8.233049879441886e-01, -8.892962118845257e-01, -1.561858245128563e-01, -1.477833013901307e-01, -1.533580900538176e-01, -1.288894101151934e-01, -1.533580900538174e-01, -1.288894101151933e-01, -8.924852232024905e-03, -1.042818277375458e-02, -9.309427955127857e-03, -1.008689687032776e-02, -5.215839749558900e-02, -5.524536709955515e-02, -5.329285853751566e-03, -5.240442346182344e-03, -7.911695113158531e-03, -4.500783591394939e-03, -7.911695113158526e-03, -4.500783591394940e-03, -7.396248828636963e+00, -7.394522243091432e+00, -7.397821082817849e+00, -7.396040648015800e+00, -7.396363763184185e+00, -7.394594272920450e+00, -7.397711859805103e+00, -7.395972750845415e+00, -7.397033584140615e+00, -7.395281677388703e+00, -7.397033584140615e+00, -7.395281677388703e+00, -2.521642328198554e+00, -2.529226070174268e+00, -2.583947378882927e+00, -2.588684444239320e+00, -2.517568768352813e+00, -2.525270960106076e+00, -2.573746505633177e+00, -2.581658918256041e+00, -2.563692180799773e+00, -2.562263463129146e+00, -2.563692180799773e+00, -2.562263463129146e+00, -8.154644945778616e-01, -8.133009699303435e-01, -9.245173044312329e-01, -9.228398280838594e-01, -7.061118903105252e-01, -7.636533352084465e-01, -7.702552413505153e-01, -8.388599190301620e-01, -8.539182417648123e-01, -8.109888978007803e-01, -8.539182417648125e-01, -8.109888978007804e-01, -1.301056181423507e-01, -1.303557407065510e-01, -1.039950248867805e-01, -1.161965743656229e-01, -1.192900320406257e-01, -1.249254764376302e-01, -2.839892503851632e+00, -2.838995423777929e+00, -1.330831720288612e-01, -1.224116323277796e-01, -1.330831720288611e-01, -1.224116323277797e-01, -3.997733902651970e-03, -4.154616479559706e-03, -5.127726180354309e-03, -5.205325153402787e-03, -3.834611796157432e-03, -4.061169160680474e-03, -8.555024555844877e-02, -8.705341256173077e-02, -3.916218957334683e-03, -5.380351534379641e-03, -3.916218957334684e-03, -5.380351534379652e-03, -8.366091151318110e-01, -8.398438795082607e-01, -8.313169580931539e-01, -8.345924078102211e-01, -8.332049069919069e-01, -8.364770827432330e-01, -8.347511766462887e-01, -8.379890387295595e-01, -8.339804184107230e-01, -8.372349018686644e-01, -8.339804184107230e-01, -8.372349018686644e-01, -8.148678233695675e-01, -8.174983686148497e-01, -6.829796248901783e-01, -6.863657435074636e-01, -7.221562676074514e-01, -7.257223798256451e-01, -7.604310719384850e-01, -7.631840902944194e-01, -7.409796059515774e-01, -7.439801197964869e-01, -7.409796059515774e-01, -7.439801197964869e-01, -9.844916821699361e-01, -9.816001807417882e-01, -1.923091860512621e-01, -1.936875145565816e-01, -2.551720618328289e-01, -2.629656809848276e-01, -4.358969228570793e-01, -4.392574748209099e-01, -3.418646533948211e-01, -3.425488363776464e-01, -3.418646533948209e-01, -3.425488363776463e-01, -5.898273442312905e-01, -6.000595602244552e-01, -5.314729016856791e-02, -5.254792002541912e-02, -6.887319371107767e-02, -7.121675347980297e-02, -4.387020468884328e-01, -4.507994040274122e-01, -1.046319114314256e-01, -1.082889030606763e-01, -1.046319114314256e-01, -1.082889030606763e-01, -1.269097650470353e-02, -1.315207104596552e-02, -1.379328131793960e-03, -1.382492418559791e-03, -2.806775342089582e-03, -2.985273459102579e-03, -1.015947528292174e-01, -8.977225578351598e-02, -3.709681932967512e-03, -4.930870893663918e-03, -3.709681932967508e-03, -4.930870893663909e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbeefvdw_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbeefvdw", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.188156239599436e-09, 0.000000000000000e+00, -1.184224742487834e-09, -1.188054601485935e-09, 0.000000000000000e+00, -1.184151510494560e-09, -1.187280020352061e-09, 0.000000000000000e+00, -1.183168702447378e-09, -1.188400640437185e-09, 0.000000000000000e+00, -1.184602181914327e-09, -1.188103235226196e-09, 0.000000000000000e+00, -1.183701487927973e-09, -1.188103235226196e-09, 0.000000000000000e+00, -1.183701487927973e-09, -1.249432365216247e-05, 0.000000000000000e+00, -1.238321218909211e-05, -1.252797853070844e-05, 0.000000000000000e+00, -1.239685017303050e-05, -1.309323139282606e-05, 0.000000000000000e+00, -1.317087080642685e-05, -1.327936723981851e-05, 0.000000000000000e+00, -1.319242517321458e-05, -1.243627179087311e-05, 0.000000000000000e+00, -1.371955265756626e-05, -1.243627179087311e-05, 0.000000000000000e+00, -1.371955265756626e-05, -1.208427794733271e-02, 0.000000000000000e+00, -1.214213730798525e-02, -1.208726255938297e-02, 0.000000000000000e+00, -1.213702385161950e-02, -1.192422829554794e-02, 0.000000000000000e+00, -1.209645899358269e-02, -1.237614172750614e-02, 0.000000000000000e+00, -1.245328876514039e-02, -1.190187068298527e-02, 0.000000000000000e+00, -1.272044400564678e-02, -1.190187068298527e-02, 0.000000000000000e+00, -1.272044400564678e-02, -4.653667884398335e+00, 0.000000000000000e+00, -2.015402534638863e+00, -4.075121723876761e+00, 0.000000000000000e+00, -2.209464186448934e+00, -4.358672443258460e-03, 0.000000000000000e+00, -4.216612511604576e-03, -1.047916304563037e+00, 0.000000000000000e+00, -2.578670711141294e+00, -3.377942514985089e+00, 0.000000000000000e+00, -8.509619254335913e-01, -3.377942514985091e+00, 0.000000000000000e+00, -8.509619254335933e-01, 5.145619406399077e+01, 0.000000000000000e+00, 7.334575148267684e+02, 1.387712591932538e+01, 0.000000000000000e+00, 8.522246482978301e+01, 8.817669499211357e-01, 0.000000000000000e+00, 1.371331176251773e+00, 9.294967222534384e-01, 0.000000000000000e+00, 9.120786555350554e-01, 2.358866177687041e+00, 0.000000000000000e+00, 2.537294201188019e+00, 2.358866177687535e+00, 0.000000000000000e+00, 2.537294201189466e+00, -6.917151540574477e-09, 0.000000000000000e+00, -5.836536831831031e-09, -5.214205879821459e-09, 0.000000000000000e+00, -4.191060605686396e-09, -6.371129492562302e-09, 0.000000000000000e+00, -5.454364305682059e-09, -4.927976215838879e-09, 0.000000000000000e+00, -3.976997982407210e-09, -6.385598010308660e-09, 0.000000000000000e+00, -5.066475598557161e-09, -6.385598010308660e-09, 0.000000000000000e+00, -5.066475598557161e-09, -1.604811889682503e-04, 0.000000000000000e+00, -1.540091964866967e-04, -1.259390861353608e-04, 0.000000000000000e+00, -1.216302431309089e-04, -1.399548527293090e-04, 0.000000000000000e+00, -1.404070321659129e-04, -1.106202882560695e-04, 0.000000000000000e+00, -1.105634487412142e-04, -1.531678768269395e-04, 0.000000000000000e+00, -1.377302423031272e-04, -1.531678768269395e-04, 0.000000000000000e+00, -1.377302423031272e-04, -3.509854353499985e-02, 0.000000000000000e+00, -3.330690529664621e-02, -2.436462759427426e-02, 0.000000000000000e+00, -2.271902136689940e-02, -3.659595002152494e-02, 0.000000000000000e+00, -5.973475990959070e-02, -3.382247728074331e-02, 0.000000000000000e+00, -5.057419978964035e-02, -2.063269954939570e-02, 0.000000000000000e+00, -3.901882697324786e-02, -2.063269954939568e-02, 0.000000000000000e+00, -3.901882697324784e-02, -9.301393618725681e-02, 0.000000000000000e+00, -2.025835010126946e-01, -3.584658189525574e+00, 0.000000000000000e+00, -3.226669479756668e+00, -1.750682490007860e-01, 0.000000000000000e+00, -5.324082114854366e-02, -4.078976912829741e-04, 0.000000000000000e+00, -4.089863798798747e-04, -2.000975625784580e+00, 0.000000000000000e+00, -4.905698791747556e+00, -2.000975625784590e+00, 0.000000000000000e+00, -4.905698791747535e+00, 1.290354169415282e+00, 0.000000000000000e+00, 1.116858831103819e+00, 1.109802615331815e+00, 0.000000000000000e+00, 1.024310963022368e+00, 6.403333790431905e+00, 0.000000000000000e+00, 7.111153516111175e+00, 2.666984057952492e-02, 0.000000000000000e+00, 1.054094247000837e+00, 3.139452336020939e+00, 0.000000000000000e+00, 1.251524276775333e+01, 3.139452336023020e+00, 0.000000000000000e+00, 1.251524276785405e+01, -1.253881050952255e-03, 0.000000000000000e+00, -1.161680315516725e-03, -1.561623439339900e-03, 0.000000000000000e+00, -1.463325990283757e-03, -1.454633053446069e-03, 0.000000000000000e+00, -1.356709705346564e-03, -1.363520105281404e-03, 0.000000000000000e+00, -1.271326784631706e-03, -1.410625836188637e-03, 0.000000000000000e+00, -1.315043790341444e-03, -1.410625836188637e-03, 0.000000000000000e+00, -1.315043790341445e-03, -4.299441857630295e-03, 0.000000000000000e+00, -4.015200571888452e-03, -9.900948640679686e-03, 0.000000000000000e+00, -9.562532193828402e-03, -8.086478116513562e-03, 0.000000000000000e+00, -7.760022175576530e-03, -6.374143239989177e-03, 0.000000000000000e+00, -6.219218121914501e-03, -7.710739542647398e-03, 0.000000000000000e+00, -7.289202334897243e-03, -7.710739542647400e-03, 0.000000000000000e+00, -7.289202334897256e-03, -2.770904128037746e-02, 0.000000000000000e+00, -2.550341945938837e-02, -1.319531865983584e+00, 0.000000000000000e+00, -1.306413025518959e+00, -8.628089560565257e-01, 0.000000000000000e+00, -8.203635474723886e-01, -3.193743983248259e-01, 0.000000000000000e+00, -3.069169128811551e-01, -5.468944104731950e-01, 0.000000000000000e+00, -5.484093229639111e-01, -5.468944104731952e-01, 0.000000000000000e+00, -5.484093229639112e-01, -9.183679608520616e-02, 0.000000000000000e+00, -7.766885429727458e-02, 8.547669733755205e+00, 0.000000000000000e+00, 4.837245729951027e+00, 6.362726477764838e-01, 0.000000000000000e+00, 7.343210674718615e-01, -4.094865536358969e-01, 0.000000000000000e+00, -3.478345723014060e-01, 5.765315480745079e-01, 0.000000000000000e+00, 3.603878593719336e-01, 5.765315480745011e-01, 0.000000000000000e+00, 3.603878593719338e-01, 7.735660411091934e-01, 0.000000000000000e+00, 7.863814779628766e-01, 3.985016596001700e+00, 0.000000000000000e+00, 7.056431810254114e+00, 2.594637264463949e+00, 0.000000000000000e+00, 2.765828716647672e+00, 1.388135001939454e+00, 0.000000000000000e+00, -7.388880861102778e+00, 6.459622368369897e+00, 0.000000000000000e+00, 1.097180756198780e+01, 6.459622368363442e+00, 0.000000000000000e+00, 1.097180756191737e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbeefvdw_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbeefvdw", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbeefvdw_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbeefvdw", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [7.789282628155925e-05, 7.758953267705747e-05, 7.788800177495296e-05, 7.758607112566705e-05, 7.783532136703710e-05, 7.752109526504584e-05, 7.788777519634658e-05, 7.758837022570739e-05, 7.789066701380748e-05, 7.753431025799739e-05, 7.789066701380748e-05, 7.753431025799739e-05, 2.877319998758539e-03, 2.839296937014595e-03, 2.888836465605579e-03, 2.843965451778171e-03, 3.082476919267199e-03, 3.109295718991356e-03, 3.146750144837064e-03, 3.117322456453793e-03, 2.855171690703211e-03, 3.298428107141366e-03, 2.855171690703211e-03, 3.298428107141366e-03, 1.836420061726795e-02, 1.893423379285040e-02, 1.822790368178072e-02, 1.883938700576612e-02, 1.590740201205034e-02, 1.601156157768206e-02, 1.823303216558327e-02, 1.869213337243660e-02, 1.883247066436579e-02, 1.735907454422127e-02, 1.883247066436579e-02, 1.735907454422127e-02, 1.647860523643755e-01, 7.076053383719932e-02, 1.474769531056958e-01, 8.475333917777010e-02, 1.810221410869170e-03, 3.310086290428999e-03, 4.370964645019898e-03, 3.550360155562082e-02, 1.332714368079147e-01, -2.397942633567055e-04, 1.332714368079148e-01, -2.397942633567094e-04, -7.979595948951105e-05, -1.389614322379686e-03, -2.335797596371559e-05, -1.882973639140048e-04, -1.862305797408239e-04, -4.102743242508956e-04, -4.345615305404837e-09, -6.473066356577014e-09, -1.536683663103661e-06, -1.084091114550497e-09, -1.536683663089655e-06, -1.084091116503155e-09, 2.236067431536864e-05, 2.108274760267434e-05, 2.208489468216918e-05, 2.081776753682532e-05, 2.183255795472410e-05, 2.070402524068260e-05, 2.161606568073108e-05, 2.048279357829980e-05, 2.260724822442834e-05, 2.101419111885325e-05, 2.260724822442834e-05, 2.101419111885325e-05, 8.362559903752991e-03, 7.978137841384608e-03, 6.508568760504901e-03, 6.240267559410593e-03, 6.938702857134976e-03, 7.023572629081569e-03, 5.374561290766243e-03, 5.423353273794324e-03, 8.224455425454717e-03, 7.140989059491818e-03, 8.224455425454717e-03, 7.140989059491818e-03, 5.440914939498726e-02, 5.125188524336028e-02, 4.980814178805137e-02, 4.666382859013637e-02, 3.596218406923633e-02, 7.470337538448850e-02, 3.857625519680497e-02, 7.037929710906106e-02, 3.622859788474814e-02, 5.850527337535715e-02, 3.622859788474811e-02, 5.850527337535711e-02, -2.581790690748138e-03, -2.192479670148894e-03, 1.359007410483452e-01, 1.230688616104803e-01, -1.512553829997557e-03, -2.543516939579326e-03, 2.137506314344041e-02, 2.140662293447483e-02, 1.170356504201954e-02, 4.304444760318386e-02, 1.170356504201964e-02, 4.304444760318363e-02, -2.104804153015998e-11, -2.664602881390424e-11, -5.106242969483551e-10, -3.592002532733625e-10, -1.368340668581508e-08, -1.817035883322312e-08, -4.285621264380662e-04, -1.886179289854568e-03, -2.239480267784491e-11, -3.336157365171211e-06, -2.239480267784509e-11, -3.336157365207935e-06, 3.823764900856552e-03, 3.700287441539443e-03, 3.707088410762219e-03, 3.591282381214423e-03, 3.748654231141915e-03, 3.628729063372959e-03, 3.781495137858977e-03, 3.663061250423384e-03, 3.767516526193812e-03, 3.647442061390930e-03, 3.767516526193812e-03, 3.647442061390932e-03, 8.390673153824746e-03, 8.026166282928293e-03, 6.044875137174693e-03, 5.907542898921088e-03, 7.030682216356428e-03, 6.854861671612068e-03, 7.737479396296129e-03, 7.647024542411140e-03, 7.995562376737139e-03, 7.629791230070827e-03, 7.995562376737151e-03, 7.629791230070846e-03, 6.399563432750155e-02, 5.952220262195568e-02, 9.658579152468035e-02, 9.742653159280630e-02, 1.115288830049587e-01, 1.091642953340075e-01, 9.512172798527126e-02, 9.261385092714107e-02, 1.099996520646385e-01, 1.102169536265910e-01, 1.099996520646385e-01, 1.102169536265910e-01, 6.276306812522527e-02, 5.393846946179372e-02, -2.434771363784667e-03, -1.369891041924996e-03, -3.903546251247587e-04, -5.316419348099665e-04, 1.092739140322470e-01, 1.006018841357528e-01, -3.274869271706640e-03, -4.097211322749527e-03, -3.274869271706627e-03, -4.097211322749541e-03, -2.311333827788870e-08, -2.272820677341368e-08, -5.316597711649587e-14, -3.092967660440067e-14, -7.064683861461631e-09, -9.356642811818648e-09, -4.866305265446427e-03, 1.805546264158745e-02, -1.114056873080422e-10, -2.115944048872147e-06, -1.114056872544068e-10, -2.115944048875749e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
