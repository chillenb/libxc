
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mbeefvdw_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbeefvdw", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.164557079885124e+01, -2.164570330930392e+01, -2.164628200521938e+01, -2.219896339884336e+01, -2.219977211147442e+01, -2.275431669227715e+01, -3.504967415072490e+00, -3.726005534742737e+00, -3.725936161789908e+00, -3.726301366528107e+00, -3.725875866253543e+00, -3.504891508641190e+00, -5.667875760470488e-01, -6.489112186864001e-01, -7.172299313500065e-01, -6.358282911168989e-01, -5.514125076327852e-01, -7.216645873251639e-01, -1.686503764890502e-01, -1.712815221366817e-01, -7.532936191422640e-01, -1.563145213553804e-01, -1.880705599193810e-01, -1.825116408479266e-01, -7.216594979091794e-03, -6.498291282867187e-03, -3.599366654348053e-02, -4.158271189698231e-03, -5.806298902218241e-03, -5.806298902218241e-03, -5.545998815824479e+00, -5.547021715871884e+00, -5.546049789488954e+00, -5.546952746970996e+00, -5.492065104630731e+00, -5.492105041511117e+00, -2.104042034245253e+00, -2.117664626990917e+00, -2.094258109845873e+00, -2.106198791544496e+00, -1.966313783371296e+00, -2.116339303069748e+00, -5.951801036860382e-01, -6.789861694958195e-01, -5.811379368377340e-01, -6.023656465501300e-01, -6.084453629879262e-01, -6.365851060603691e-01, -1.123216746393139e-01, -1.698667173898892e-01, -1.042157432613366e-01, -2.046554938080079e+00, -1.293717598753727e-01, -1.293717598753727e-01, -2.712777848774937e-03, -4.064864493977634e-03, -3.113381658638505e-03, -5.730587417798436e-02, -3.911178915348014e-03, -3.911178915348015e-03, -6.283324386780296e-01, -6.245481747230004e-01, -6.244025261434984e-01, -6.265184532984855e-01, -6.252659383381807e-01, -6.258282479691576e-01, -6.112705791132136e-01, -4.992002746341989e-01, -5.245627816053045e-01, -5.737851315147560e-01, -5.614147377699097e-01, -5.420248529159972e-01, -6.905863107821386e-01, -2.457741086205370e-01, -2.546551246800276e-01, -3.460316212518593e-01, -3.274921020365045e-01, -2.956269391657671e-01, -4.854271895203185e-01, -2.658482420200186e-02, -5.581547993719177e-02, -3.587961774331332e-01, -8.927380830732384e-02, -8.927380830732386e-02, -6.754506144528764e-03, -1.086229265137593e-03, -1.518028803760106e-03, -5.391069274015232e-02, -3.591575167911416e-03, -2.678473813045084e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mbeefvdw_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbeefvdw", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.273992245357104e+01, -3.273956648123955e+01, -3.273998224862201e+01, -3.273960984674439e+01, -3.274021151058944e+01, -3.273992687602622e+01, -3.273953148168255e+01, -3.028920734505714e+01, -3.273995500722163e+01, -3.028982339125749e+01, -3.029019404954503e+01, -3.028982339125749e+01, -4.833430695047127e+00, -4.997171437474847e+00, -4.833501551956665e+00, -4.833361330570339e+00, -4.834854306775851e+00, -4.835146625285891e+00, -4.834770649491000e+00, -4.834839958308496e+00, -4.832498206650103e+00, -4.836147454701095e+00, -4.997023413006566e+00, -4.836147454701095e+00, -8.579250314870301e-01, -8.687347150073380e-01, -8.544940168057052e-01, -8.998831854631366e-01, -8.695327281098214e-01, -8.625266254055809e-01, -8.749525906160935e-01, -8.289917055972321e-01, -8.802979735446640e-01, -7.635985986360206e-01, -9.085490464585351e-01, -8.382987328775235e-01, -1.940393000602142e-01, -2.321096451545860e-01, -1.977219014859720e-01, -2.367710905223835e-01, -1.007118805089604e+00, -9.204061656327324e-01, -1.833622001573270e-01, -1.822110729019992e-01, -2.323575039474392e-01, -1.514423791341862e-01, -2.323575039474391e-01, -1.008776996354140e-01, -9.318214222437969e-03, -9.904680569471884e-03, -6.473798216116190e-03, -1.046706442760732e-02, -3.599910967693763e-02, -5.966151762281972e-02, -5.592483349078468e-03, -5.499184393715093e-03, -8.308449800572139e-03, -4.723123791721977e-03, -8.308449800572141e-03, -4.723123793806018e-03, -7.397025695787637e+00, -7.395254929308276e+00, -7.398582800345951e+00, -7.396759053920421e+00, -7.397122143580061e+00, -7.395313738248454e+00, -7.398458037618679e+00, -7.396679989933488e+00, -7.712792432592249e+00, -7.396009387477915e+00, -7.397815964249406e+00, -7.710978941439834e+00, -2.696897314807736e+00, -2.697279308890594e+00, -2.721828017468594e+00, -2.721437225012415e+00, -2.675556779604255e+00, -2.682049863571712e+00, -2.697307391825503e+00, -2.704030053589858e+00, -2.726762505476175e+00, -2.893904031434387e+00, -2.726762505476175e+00, -2.712209013315713e+00, -8.273215507258490e-01, -7.696302020054252e-01, -9.039202377129701e-01, -9.045444335498583e-01, -7.417132663947277e-01, -7.736275515000665e-01, -7.807668457586493e-01, -8.088242988785411e-01, -8.630291434066552e-01, -7.679397347192393e-01, -8.630291434066554e-01, -8.181266269426410e-01, -1.444305090940522e-01, -1.454931470984990e-01, -1.895324256807878e-01, -2.300621227395927e-01, -1.335347183897892e-01, -1.387155978692478e-01, -2.711748907201428e+00, -2.710560283481566e+00, -1.549813214293794e-01, -1.559810440059193e-01, -1.549813214293806e-01, -1.559810440059190e-01, -2.786026557102680e-03, -4.358471244768619e-03, -5.380571326801743e-03, -5.461890656152739e-03, -4.024759506928079e-03, -4.263089818349163e-03, -9.500986255346967e-02, -6.029817853372454e-02, -4.108478158595190e-03, -5.648146351157583e-03, -4.108478161856463e-03, -5.648146384311823e-03, -8.367412501265021e-01, -8.399735725105635e-01, -8.318480727032748e-01, -8.351053045206277e-01, -8.379010220477864e-01, -8.409075101985625e-01, -8.376173474696597e-01, -8.382577373873596e-01, -8.376931233930945e-01, -8.407454379233775e-01, -8.376931233930947e-01, -8.375591725726698e-01, -8.142953269469999e-01, -8.169859964436265e-01, -6.886597564522045e-01, -6.395187763720553e-01, -7.265212066552774e-01, -7.337629254191755e-01, -7.629180600021230e-01, -7.656366513500846e-01, -7.446566282720860e-01, -7.475054708447449e-01, -7.446566282720860e-01, -8.030497064142014e-01, -9.456151233770289e-01, -1.024925594528812e+00, -2.863543208843644e-01, -2.880681334546171e-01, -3.229187006790455e-01, -3.518600664049862e-01, -5.093070173573877e-01, -4.799934986273907e-01, -4.101963917909068e-01, -4.102104716198620e-01, -4.101963917909067e-01, -4.182915735458131e-01, -6.284154218177587e-01, -6.337282779208571e-01, -3.532568980538613e-02, -3.556741069891446e-02, -7.517276642729924e-02, -7.779884773003432e-02, -4.619966984958679e-01, -4.718378627546846e-01, -1.150870429231005e-01, -1.188804983304101e-01, -1.150870429230888e-01, -1.188804983304164e-01, -8.837265161663808e-03, -9.157655202150032e-03, -1.446696335811660e-03, -1.450006248042653e-03, -1.956119054308739e-03, -2.080490552611414e-03, -7.135101577490890e-02, -7.253772551153491e-02, -3.892364572011701e-03, -5.175836464778437e-03, -3.892364431018625e-03, -3.435197365874064e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbeefvdw_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbeefvdw", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.027856606396004e-08, 0.000000000000000e+00, -3.027690800343816e-08, -3.027790916786765e-08, 0.000000000000000e+00, -3.027643010727119e-08, -3.027582893444079e-08, 0.000000000000000e+00, -3.027343675892931e-08, -3.028322395272933e-08, 0.000000000000000e+00, -2.327186502556917e-10, -3.027816630842941e-08, 0.000000000000000e+00, -2.325408111418728e-10, -2.325928334014937e-10, 0.000000000000000e+00, -2.325408111418728e-10, -1.895459626967754e-06, 0.000000000000000e+00, -1.854585853154291e-05, -1.894951502031027e-06, 0.000000000000000e+00, -1.895633725356920e-06, -1.885093572429188e-06, 0.000000000000000e+00, -1.883247190593191e-06, -1.888044325947967e-06, 0.000000000000000e+00, -1.887925623791748e-06, -1.897807902002295e-06, 0.000000000000000e+00, -1.878887045614407e-06, -1.857241162853138e-05, 0.000000000000000e+00, -1.878887045614407e-06, -1.155031185564102e-02, 0.000000000000000e+00, -1.156745090069193e-02, -1.156630156470864e-02, 0.000000000000000e+00, -1.945028162249121e-03, -2.183425489975369e-03, 0.000000000000000e+00, -2.244212905239033e-03, -2.148355184589192e-03, 0.000000000000000e+00, -1.193762775514426e-02, -1.134989817552816e-02, 0.000000000000000e+00, -1.286468579772476e-02, -1.874599810775236e-03, 0.000000000000000e+00, -2.460230035575899e-03, -2.361438485587197e+00, 0.000000000000000e+00, -4.033947747181620e-01, -2.260934931897798e+00, 0.000000000000000e+00, -3.807021701578020e-01, -1.003181331640482e-03, 0.000000000000000e+00, -4.980244507731131e-03, -5.108199371695289e-01, 0.000000000000000e+00, -5.968277046278965e-01, -3.759813020045600e-01, 0.000000000000000e+00, -2.105409693711635e-01, -3.759813020045608e-01, 0.000000000000000e+00, -2.370279020574923e+01, 4.634940259881340e+00, 0.000000000000000e+00, 4.643617909072005e+00, -1.386895982714435e+06, 0.000000000000000e+00, 4.845187727996478e+00, -1.450714494250831e+03, 0.000000000000000e+00, 1.488557375894733e+00, 3.429308238276106e+00, 0.000000000000000e+00, 3.465218489138661e+00, 4.418318046015302e+00, 0.000000000000000e+00, 7.616589438239493e+00, 4.418318046015302e+00, 0.000000000000000e+00, 7.616606867402385e+00, 1.185030566659222e-08, 0.000000000000000e+00, 1.187086429047977e-08, 1.330922449654516e-08, 0.000000000000000e+00, 1.328233262967702e-08, 1.195222113118277e-08, 0.000000000000000e+00, 1.193444394037763e-08, 1.320313315286086e-08, 0.000000000000000e+00, 1.321577210335146e-08, -5.921702188656225e-06, 0.000000000000000e+00, 1.257755778299659e-08, 1.258235120829685e-08, 0.000000000000000e+00, -5.928291023637708e-06, -2.195487303636361e-05, 0.000000000000000e+00, -2.190113670890179e-05, -2.075474098131511e-05, 0.000000000000000e+00, -2.073685605517086e-05, -2.302853713061944e-05, 0.000000000000000e+00, -2.266699628004095e-05, -2.194910685992324e-05, 0.000000000000000e+00, -2.158307582818646e-05, -2.050297425660432e-05, 0.000000000000000e+00, -2.137202416970417e-04, -2.050297425660432e-05, 0.000000000000000e+00, -2.117137457800928e-05, -1.399022054902443e-03, 0.000000000000000e+00, -9.752574360246411e-03, -2.508810845128825e-04, 0.000000000000000e+00, -2.096381615792955e-04, -3.331049351265863e-03, 0.000000000000000e+00, -2.402901531850926e-03, -1.874277582416763e-03, 0.000000000000000e+00, -1.347937145010258e-03, -9.069856999267517e-04, 0.000000000000000e+00, -1.167471182531098e-02, -9.069856999267464e-04, 0.000000000000000e+00, -1.392636725243802e-03, -2.657719994947005e-01, 0.000000000000000e+00, -2.755802803251444e-01, -2.148144946365991e+00, 0.000000000000000e+00, -3.119295121045978e-01, -1.237247683664995e-01, 0.000000000000000e+00, -2.393948437459098e-01, -9.388993397309459e-06, 0.000000000000000e+00, -9.393711739260900e-06, -6.133066097106946e-01, 0.000000000000000e+00, -9.196486023132718e-01, -6.133066097105454e-01, 0.000000000000000e+00, -9.196486023133070e-01, -4.043331653304084e+07, 0.000000000000000e+00, 2.300023271328667e+00, 3.254736923700902e+00, 0.000000000000000e+00, 2.869658942976205e+00, 2.339158798228008e+01, 0.000000000000000e+00, 2.564851175294609e+01, 5.678267595556230e-01, 0.000000000000000e+00, -1.845663707983122e+02, 4.422606514270896e+00, 0.000000000000000e+00, 1.395047947093228e+01, 4.422638021337161e+00, 0.000000000000000e+00, 1.395069997799569e+01, 9.592695264048710e-04, 0.000000000000000e+00, 9.547295667212894e-04, 6.285850626351151e-04, 0.000000000000000e+00, 6.331449072937532e-04, -1.012656084561680e-02, 0.000000000000000e+00, -9.595065522716648e-03, -7.434932212322308e-03, 0.000000000000000e+00, 8.392045921893736e-04, -8.733620315399409e-03, 0.000000000000000e+00, -8.287373121047135e-03, -8.733620315399409e-03, 0.000000000000000e+00, 7.926854447502636e-04, 1.014683397431935e-03, 0.000000000000000e+00, 1.014424768093764e-03, -3.686110246032646e-03, 0.000000000000000e+00, -1.343512938184605e-02, -1.842636724243070e-03, 0.000000000000000e+00, -4.711307649527596e-02, -4.004391046826652e-04, 0.000000000000000e+00, -3.783485493062611e-04, -1.084406151592699e-03, 0.000000000000000e+00, -1.039425336483509e-03, -1.084406151592699e-03, 0.000000000000000e+00, -7.603089946038336e-02, -3.946815670536053e-04, 0.000000000000000e+00, -3.126678363491858e-02, -1.635180002716960e-01, 0.000000000000000e+00, -1.605388408622894e-01, -4.596253215794803e-01, 0.000000000000000e+00, -8.181369264251619e-02, -2.212020189616979e-01, 0.000000000000000e+00, -2.204055700240374e-02, -4.478286296243383e-02, 0.000000000000000e+00, -4.473447904367879e-02, -4.478286296243412e-02, 0.000000000000000e+00, -3.301847993671794e-01, -6.530366173918448e-03, 0.000000000000000e+00, -6.114907434618088e-03, -1.564532976578057e+03, 0.000000000000000e+00, -1.522435174872907e+03, 9.937688211075842e-01, 0.000000000000000e+00, 9.568226986352578e-01, -2.295875377396098e-02, 0.000000000000000e+00, -1.841475478325883e-02, -8.632580576618559e-02, 0.000000000000000e+00, -4.481580002434891e-01, -8.632580577103210e-02, 0.000000000000000e+00, -4.481580002410061e-01, -3.994009289337953e+05, 0.000000000000000e+00, -3.463725738607801e+05, 3.816284137167081e+00, 0.000000000000000e+00, 4.447115053423288e+00, -1.663792372690417e+08, 0.000000000000000e+00, -1.300221423399966e+08, -9.438096407046947e+01, 0.000000000000000e+00, -8.843018629611379e+01, 1.140046249835936e+01, 0.000000000000000e+00, 1.448288260398684e+01, 1.139788730832390e+01, 0.000000000000000e+00, -1.749337616131462e+07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbeefvdw_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbeefvdw", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.274405285057952e-03, 2.274335589381451e-03, 2.274387327690815e-03, 2.274322475321219e-03, 2.274332315342019e-03, 2.274242430457912e-03, 2.274533906987411e-03, -2.032971972968070e-20, 2.274394175101210e-03, 7.424906041066210e-20, -2.206885239159382e-19, 7.424906041066210e-20, -2.297721262652441e-18, 4.650568302376168e-03, 4.625669080979340e-18, 1.685673472693151e-18, -2.147405574664676e-18, -2.138066112604274e-18, -4.637288270077754e-19, 5.963719991813796e-19, 1.529176851680317e-18, 2.374142678014187e-18, 4.655522169855019e-03, 2.374142678014187e-18, 9.913360782652127e-03, 1.063792827085067e-02, 9.714627911857683e-03, -4.836537520205608e-17, 4.823074151606185e-17, 3.025652031359818e-17, -4.107878895604474e-17, 8.569936473024049e-03, 1.106698700226480e-02, 5.446544842090545e-03, -1.179553074868677e-17, -3.945855601174148e-18, 8.965910322928957e-03, -1.268503692493901e-16, 1.006118698772031e-02, -3.778874037728715e-18, -8.608283497779727e-17, 2.462423117626067e-03, 6.868931512688109e-16, -1.377032013251101e-16, -1.538967619794047e-16, -4.358698635250449e-15, -1.163010631021384e-16, 8.753872634616064e-05, 7.123308691400957e-12, -6.343042387547400e-12, 4.535500205862476e-10, -1.647408473906066e-12, 8.086793275057038e-07, 1.911936385325997e-14, 1.624223729074619e-10, 5.162977407218631e-11, 3.353760139804258e-11, -1.081100219192436e-10, 3.353760139804258e-11, -1.117155236290644e-10, 5.125457643898867e-20, 3.192685118822598e-19, -1.287743882307152e-19, -7.904752922418679e-20, -9.439783218260151e-20, -6.864020153211299e-19, 2.252160941588848e-19, -3.546443908541755e-19, 6.675032435320239e-03, -1.857379656733528e-20, -3.453374154949828e-19, 6.677515517548236e-03, -4.863266210452940e-18, 6.134346370220279e-18, 1.215669076077778e-18, 7.389808283592220e-18, -1.710223676378180e-18, 2.689847382819031e-18, -5.434560449094879e-18, 3.659128955078745e-18, -1.174521204529858e-18, 9.439494172391127e-03, -1.174521204529858e-18, 4.788236107001444e-19, 1.435240855918286e-17, 8.140775857273476e-03, -4.011351384643509e-19, 5.830580239450808e-19, 2.538229867639620e-17, 1.499378633608214e-17, 2.223920478548241e-18, -1.252732142254034e-18, 5.043177922265919e-18, 1.067156015526242e-02, -6.812482571726407e-18, -9.827517720517191e-18, 8.035985977561085e-15, 7.111410908401352e-15, 2.608087008397066e-03, 5.056356966743623e-16, 4.229124391024711e-15, 5.215054283879577e-15, -6.540573180835769e-19, 8.541281509580021e-19, 5.720866244579201e-16, -1.240494220816637e-15, -7.687946416574958e-16, -8.755390153957270e-16, 2.455431299962705e-12, 1.572032568862586e-10, 3.261272084099043e-11, -8.068450775831671e-11, -7.312770317692683e-11, -3.734454053838823e-11, -5.626333296165698e-14, 1.480367950929304e-05, -2.957906857016918e-11, 5.830242241419337e-11, -3.387321464974862e-11, -1.953829896869054e-11, 6.743710310476722e-19, 1.392118409227472e-19, 3.698620688962892e-18, 2.229422833187403e-18, 1.810105854568795e-02, 1.743783868880926e-02, 1.394408194447956e-02, -1.433296094032075e-18, 1.595551282049283e-02, 1.539870730690805e-02, 1.595551282049283e-02, -1.475697591799854e-18, 1.601606799062289e-19, -3.816031371768604e-20, 6.346846386176243e-18, 3.856749532908236e-03, -5.553237729274670e-18, 4.406797090995680e-02, -6.977752679200037e-18, -6.055715109215802e-18, 1.215807724941113e-18, 1.535700707328811e-17, -7.702834253452517e-19, 8.384636509901006e-02, 9.203650238827149e-19, 7.111174322741796e-02, 1.180909091860559e-16, -1.124061353301562e-16, 1.742296721295095e-02, -3.318246946106726e-17, 5.231522678247785e-02, -2.555087511556714e-17, -1.557421952015660e-17, 5.028540130052097e-17, 3.033098795389266e-17, 3.979532908688058e-02, 1.670806039075955e-17, -5.915874637738653e-18, 7.944636004894430e-07, 7.975650758505725e-07, -3.462830512687882e-14, 2.553421744713208e-14, -5.039887587362264e-17, -2.307067847650951e-17, 1.189333755368313e-15, 7.895275116020156e-15, 1.455572064187325e-14, -1.750140421261895e-16, 6.829710327361251e-10, 7.985560265669699e-10, -3.555140939644778e-10, -4.241129767292284e-09, 3.551085046040928e-12, 5.270377662176279e-12, 5.141552106744791e-05, 6.644775540380358e-05, -1.189103297809940e-10, 7.703341413990606e-11, 1.793669659000552e-10, 9.858571959406947e-11])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
