
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_m06_l_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_m06_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.157167515392176e+01, -2.157174744370721e+01, -2.157208254885691e+01, -2.235728753969778e+01, -2.235770790323628e+01, -2.314394683757295e+01, -3.333628848178090e+00, -3.662149123406039e+00, -3.662145829427873e+00, -3.662476974914492e+00, -3.662065524391252e+00, -3.333644404034693e+00, -4.742469964082534e-01, -5.886546719161846e-01, -6.908264634817887e-01, -5.732716585331151e-01, -4.502475595041732e-01, -6.955459224590756e-01, -1.445722375698387e-01, -1.481761186812641e-01, -6.373163027616453e-01, -1.695678282977165e-01, -2.015420026683756e-01, -1.764584289771539e-01, -4.467969962201553e-02, -3.782246076336976e-02, -1.670443803310018e-01, -2.588701662360354e-02, -3.603597966584298e-02, -3.603597966584300e-02, -5.689954004476205e+00, -5.696080332216764e+00, -5.690294062866609e+00, -5.695698910524788e+00, -5.558279338899849e+00, -5.558399745332244e+00, -2.065648555536974e+00, -2.080181627718305e+00, -2.054739305877468e+00, -2.067918101520615e+00, -1.863884491408216e+00, -2.078811699552670e+00, -5.958117998997291e-01, -6.888433620660904e-01, -5.728431728538225e-01, -6.090690829402218e-01, -6.157861248230494e-01, -6.485318341787055e-01, -2.583210040598074e-01, -1.298995356173294e-01, -2.672202453578920e-01, -2.095030746753771e+00, -1.744316505098493e-01, -1.744316505098491e-01, -1.588115897191083e-02, -2.531111838291542e-02, -1.936073853569585e-02, -1.854154376779837e-01, -2.430807311217579e-02, -2.430807311217587e-02, -5.118251497740653e-01, -6.605249878885604e-01, -6.170387328068568e-01, -5.798950299724942e-01, -5.982250937910383e-01, -6.041788870043225e-01, -5.265843816578307e-01, -4.844004060237670e-01, -5.348569035459683e-01, -5.815385152826238e-01, -5.760903519190744e-01, -5.528380045770174e-01, -7.017857536666299e-01, -2.352664810397850e-01, -2.283235283947792e-01, -3.275025323571965e-01, -3.178852853846580e-01, -2.744916253253356e-01, -4.772218171128864e-01, -9.766739644826883e-02, -2.616381818302919e-01, -3.530879040235803e-01, -2.354321915586274e-01, -2.354321915586267e-01, -3.426446314819796e-02, -6.775982851966650e-03, -7.877604750569219e-03, -7.917837169408357e-02, -2.233129377296544e-02, -1.474178725167578e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_m06_l_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_m06_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.941394296387002e+01, -2.941485935783664e+01, -2.941417767823018e+01, -2.941503031039730e+01, -2.941489564846437e+01, -2.941607234678827e+01, -2.941225841647509e+01, -2.755750532813947e+01, -2.941408824428844e+01, -2.755914654869175e+01, -2.755905206295975e+01, -2.755914654869175e+01, -4.350930681356824e+00, -4.875704061835275e+00, -4.351178964823652e+00, -4.350837992718475e+00, -4.356185510018743e+00, -4.357167568949948e+00, -4.354688182810328e+00, -4.354755787573413e+00, -4.349683846651875e+00, -4.359553602183126e+00, -4.874735948244845e+00, -4.359553602183126e+00, -8.949013963172728e-01, -9.050313871235031e-01, -8.916929774920995e-01, -8.028238048704565e-01, -7.603515052664813e-01, -7.546536233619905e-01, -7.667064744741372e-01, -8.680716882413687e-01, -9.164105718238439e-01, -8.223926096697235e-01, -8.148534248219320e-01, -7.424030493180944e-01, -2.250687789622385e-01, -2.132292431328748e-01, -2.273185636920985e-01, -2.126167774035147e-01, -1.018376623382453e+00, -1.047059450399552e+00, -4.625792864677399e-03, -4.979992609627176e-02, -2.279286646109888e-01, 1.304876933588799e-02, -2.279286646109919e-01, 4.522388456734778e-02, -5.718024865510814e-02, -6.064665758273256e-02, -3.224412173946035e-02, -6.392023358701299e-02, -8.296753682788813e-02, -2.361512590467733e-01, -3.471330143884586e-02, -3.413910257596616e-02, -5.117409718696488e-02, -2.930760668690878e-02, -5.117409718696488e-02, -2.930760668690993e-02, -8.373331388240086e+00, -8.371560916591410e+00, -8.412096263989850e+00, -8.409027451654497e+00, -8.376048789128211e+00, -8.373252680657382e+00, -8.409289372790921e+00, -8.407266877586302e+00, -8.667293213600963e+00, -8.390414083334280e+00, -8.392893544582853e+00, -8.664778890439010e+00, -2.459235513452453e+00, -2.457653463828575e+00, -2.463860027675330e+00, -2.462351658891480e+00, -2.457284538078884e+00, -2.456269262149519e+00, -2.459967413367000e+00, -2.459210380602484e+00, -2.464448997282235e+00, -2.768118889517955e+00, -2.464448997282235e+00, -2.459994126599865e+00, -8.798975091068293e-01, -9.403399126506322e-01, -8.319891698382459e-01, -8.469437424459939e-01, -6.721461230377941e-01, -7.557502194143996e-01, -8.243105977776513e-01, -8.566713424278737e-01, -8.912663633704623e-01, -9.317245220346630e-01, -8.912663633704622e-01, -8.712208013128074e-01, 1.488972856956102e-02, 1.873541126655387e-02, -1.896348844411961e-01, -2.038353756086966e-01, -3.479329514908049e-02, 1.069165329116851e-04, -2.806361687190597e+00, -2.804321467284567e+00, 5.835046349444750e-02, 1.015336252282969e-02, 5.835046349446304e-02, 1.015336252282978e-02, -1.441434348083820e-02, -2.712346015093746e-02, -3.341478331347133e-02, -3.392489617013485e-02, -2.493703503945129e-02, -2.638163169923364e-02, -1.746240939591965e-01, -2.593220313009486e-02, -2.555259149040628e-02, -3.486885091343710e-02, -2.555259149040500e-02, -3.486885091343670e-02, -3.219545271755588e-01, -3.338840901168171e-01, -6.967386749845245e-01, -6.755402738137460e-01, -5.144215969563333e-01, -4.928337357338809e-01, -3.645272607693313e-01, -3.345821789246448e-01, -4.320363303029430e-01, -4.154128592908901e-01, -4.320363303029430e-01, -3.934990736488542e-01, -2.925244791128666e-01, -2.944453437821870e-01, -6.855048243913089e-01, -7.528892755288144e-01, -7.537663813035339e-01, -8.047415781467271e-01, -7.168569992112479e-01, -7.226259266616527e-01, -6.952526737922027e-01, -6.946101616315019e-01, -6.952526737922026e-01, -7.464685594706781e-01, -8.747705280074540e-01, -9.244787843472430e-01, -2.801753597568500e-01, -2.805584681370550e-01, -3.411335706236429e-01, -3.078501654715246e-01, -4.910030056014299e-01, -4.390861096732633e-01, -3.832780613414302e-01, -3.835961092743977e-01, -3.832780613414298e-01, -4.287996007161068e-01, -5.677932097050995e-01, -5.787245677832468e-01, -8.213075562142386e-02, -8.248213431599954e-02, -2.408030385269356e-01, -2.340274376897518e-01, -4.150766962596739e-01, -4.469103548138494e-01, -5.122027954689072e-02, 5.288928375842070e-04, -5.122027954689528e-02, 5.288928375669012e-04, -4.350016392862549e-02, -4.491362922246291e-02, -9.022765758927605e-03, -9.043381325090603e-03, -1.012026558732314e-02, -1.075331155546909e-02, 1.443865157079409e-02, 2.147588267663315e-02, -2.417492978820490e-02, -3.200189439178012e-02, -2.417492978820557e-02, -1.749789279838760e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_m06_l_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_m06_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.222994696426711e-08, 0.000000000000000e+00, -2.222962302722124e-08, -2.222959532984809e-08, 0.000000000000000e+00, -2.222936768388386e-08, -2.222843789097058e-08, 0.000000000000000e+00, -2.222771846208813e-08, -2.223240578930673e-08, 0.000000000000000e+00, -1.767454112935482e-08, -2.222973722226485e-08, 0.000000000000000e+00, -1.767368257819842e-08, -1.767258636836190e-08, 0.000000000000000e+00, -1.767368257819842e-08, -1.739946895540433e-05, 0.000000000000000e+00, -3.357198672631350e-05, -1.740198294806696e-05, 0.000000000000000e+00, -1.739988641840567e-05, -1.745114230585286e-05, 0.000000000000000e+00, -1.745920272357616e-05, -1.742739533298626e-05, 0.000000000000000e+00, -1.742648856173752e-05, -1.740502018279000e-05, 0.000000000000000e+00, -1.746944936268965e-05, -3.359455566573186e-05, 0.000000000000000e+00, -1.746944936268965e-05, -2.775898604269628e-02, 0.000000000000000e+00, -2.714405498653253e-02, -2.798672629572868e-02, 0.000000000000000e+00, -7.304408225300508e-03, -6.887180966048545e-03, 0.000000000000000e+00, -6.897230865535725e-03, -7.143935839041946e-03, 0.000000000000000e+00, -3.011198636741813e-02, -2.621873712122285e-02, 0.000000000000000e+00, -3.656595087311408e-02, -7.225426133233492e-03, 0.000000000000000e+00, -6.850145788419626e-03, -7.674589115247336e+00, 0.000000000000000e+00, -9.824285617475651e-01, -7.224136926677880e+00, 0.000000000000000e+00, -9.996217763812054e-01, -1.659633167139942e-03, 0.000000000000000e+00, -1.563554438212406e-02, 2.541634062335298e-02, 0.000000000000000e+00, -1.135113034476859e-01, -7.448248869715994e-01, 0.000000000000000e+00, 5.517974047447468e-01, -7.448248869715984e-01, 0.000000000000000e+00, -1.550688063740411e+02, 6.353059145962732e+00, 0.000000000000000e+00, 6.369388930034192e+00, -1.070060042223670e+07, 0.000000000000000e+00, 6.651546683066567e+00, -1.095883298112635e+04, 0.000000000000000e+00, 2.458599944117189e+00, 4.684096590128303e+00, 0.000000000000000e+00, 4.732495135840810e+00, 6.048986214515794e+00, 0.000000000000000e+00, 1.040241777000428e+01, 6.048986214515794e+00, 0.000000000000000e+00, 1.040241777000409e+01, -5.344858041722090e-06, 0.000000000000000e+00, -5.350043700278308e-06, -5.350738312649042e-06, 0.000000000000000e+00, -5.355732737499074e-06, -5.345299144431588e-06, 0.000000000000000e+00, -5.350322504382505e-06, -5.350338569414825e-06, 0.000000000000000e+00, -5.355484546808099e-06, -6.257194492564960e-06, 0.000000000000000e+00, -5.352871132663339e-06, -5.347764911700523e-06, 0.000000000000000e+00, -6.263264442604430e-06, -1.545423612404645e-04, 0.000000000000000e+00, -1.549758045572550e-04, -1.538883029014349e-04, 0.000000000000000e+00, -1.543220712051812e-04, -1.547110792182346e-04, 0.000000000000000e+00, -1.551090422575608e-04, -1.543522389963813e-04, 0.000000000000000e+00, -1.546779993922793e-04, -1.539501910756471e-04, 0.000000000000000e+00, -3.372442397381570e-04, -1.539501910756471e-04, 0.000000000000000e+00, -1.546646586237333e-04, -2.649686105937392e-02, 0.000000000000000e+00, -4.036601732615046e-02, -2.243946493930506e-02, 0.000000000000000e+00, -2.253135939784068e-02, -3.213633560002973e-02, 0.000000000000000e+00, -3.042315078491020e-02, -3.260749916397351e-02, 0.000000000000000e+00, -3.028383012042683e-02, -2.422445741682408e-02, 0.000000000000000e+00, -4.187865731930494e-02, -2.422445741682408e-02, 0.000000000000000e+00, -2.820650673086767e-02, 6.692936623249571e-01, 0.000000000000000e+00, 6.531153242071350e-01, -7.981312090832631e+00, 0.000000000000000e+00, -2.987067234734653e-01, 8.321439898665972e-01, 0.000000000000000e+00, 7.689083710150151e-01, -2.479956950859067e-04, 0.000000000000000e+00, -2.485041156013422e-04, 4.390277063206700e-01, 0.000000000000000e+00, 1.326487869985791e-01, 4.390277063206744e-01, 0.000000000000000e+00, 1.326487869985783e-01, -3.137617878891064e+08, 0.000000000000000e+00, 3.139947525615087e+00, 4.444476965514632e+00, 0.000000000000000e+00, 3.917979454120859e+00, 3.196364002004811e+01, 0.000000000000000e+00, 3.506160100486595e+01, 1.694498505954401e+00, 0.000000000000000e+00, -1.405831224827601e+03, 6.035946391411634e+00, 0.000000000000000e+00, 1.908529658777108e+01, 6.035946391411553e+00, 0.000000000000000e+00, 1.908529658777096e+01, -2.961703703700112e-02, 0.000000000000000e+00, -2.889617204288892e-02, -3.664836392410383e-02, 0.000000000000000e+00, -3.602472613557613e-02, -3.792082590961162e-02, 0.000000000000000e+00, -3.706316670292647e-02, -3.521631056307000e-02, 0.000000000000000e+00, -3.241788804828016e-02, -3.669193428775243e-02, 0.000000000000000e+00, -3.582554084493915e-02, -3.669193428775243e-02, 0.000000000000000e+00, -3.361474169262995e-02, -3.452154067976970e-02, 0.000000000000000e+00, -3.370983789834070e-02, -4.951434019887200e-02, 0.000000000000000e+00, -8.063355242179043e-02, -4.800673286698687e-02, 0.000000000000000e+00, -6.662000968839987e-02, -4.457808373548217e-02, 0.000000000000000e+00, -4.401316600713451e-02, -4.663483235368576e-02, 0.000000000000000e+00, -4.605250315322958e-02, -4.663483235368576e-02, 0.000000000000000e+00, -6.050540585434928e-02, -1.803051261635262e-02, 0.000000000000000e+00, -2.333518457513815e-02, -3.270610974728266e-01, 0.000000000000000e+00, -3.264560836487472e-01, -1.226503543005059e+00, 0.000000000000000e+00, -2.651431934522300e-01, -3.510470730189895e-01, 0.000000000000000e+00, -1.519425091829417e-01, -2.170753041865374e-01, 0.000000000000000e+00, -2.186489737117936e-01, -2.170753041865376e-01, 0.000000000000000e+00, -6.347619101912005e-01, -6.180038312918466e-02, 0.000000000000000e+00, -6.144222109327371e-02, -1.181525029978717e+04, 0.000000000000000e+00, -1.149828536025414e+04, 1.861652623237895e+00, 0.000000000000000e+00, 1.869988993410200e+00, -2.061954636910387e-01, 0.000000000000000e+00, -2.118220186620960e-01, 1.420612899910333e+00, 0.000000000000000e+00, 1.426664174607354e+00, 1.420612899910324e+00, 0.000000000000000e+00, 1.426664174607387e+00, -3.076507345979796e+06, 0.000000000000000e+00, -2.666718061402495e+06, 5.122785494333719e+00, 0.000000000000000e+00, 5.100258677824396e+00, -1.291093755207478e+09, 0.000000000000000e+00, -1.008808731452045e+09, -6.715608041830425e+02, 0.000000000000000e+00, -6.152330380960783e+02, 1.556542098015622e+01, 0.000000000000000e+00, 1.980423304671895e+01, 1.556542098015617e+01, 0.000000000000000e+00, -1.354176062739872e+08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_m06_l_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_m06_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [3.820971354511607e-04, 3.826758724106438e-04, 3.821805406079509e-04, 3.827367330399285e-04, 3.824158098595011e-04, 3.830851409286577e-04, 3.814823483029987e-04, 2.518174460376029e-04, 3.821506726692513e-04, 2.523233817997991e-04, 2.521160735739628e-04, 2.523233817997991e-04, 5.291070242385710e-03, 6.532145869711026e-03, 5.293138945083316e-03, 5.290793909166826e-03, 5.334950138384237e-03, 5.342696100452863e-03, 5.318951034681077e-03, 5.318933701720952e-03, 5.287335784213463e-03, 5.358123833947864e-03, 6.530914656644070e-03, 5.358123833947864e-03, 2.521161560989223e-02, 2.588542188832970e-02, 2.503748535345649e-02, 1.469122689861533e-02, 1.033244610230260e-02, 9.958978054046802e-03, 1.141169558328837e-02, 2.419038984125405e-02, 2.621033950101988e-02, 2.295010145493406e-02, 1.545649810311617e-02, 9.114855903586889e-03, 8.576346055968349e-02, 3.171352838812207e-02, 8.499700228131463e-02, 3.132325715536152e-02, 6.480907169907598e-03, 1.837386653285636e-02, -1.368567885827687e-01, -1.065744666226887e-01, 3.184357979930925e-02, -1.923330468787721e-01, 3.184357979931151e-02, -7.896192777114348e-02, -3.845463308208423e-04, -4.629127497500045e-04, -6.610224892204505e-04, -5.703901846197721e-04, -2.814938877607566e-02, -3.910218535483538e-02, -6.136044783444394e-05, -5.894403189678207e-05, -2.596347759716748e-04, -8.208367876022125e-05, -2.596347759716748e-04, -8.208367875777348e-05, 2.089927552616644e-02, 2.090775146276693e-02, 2.144622553969810e-02, 2.143659905696752e-02, 2.093769080226193e-02, 2.093170169556318e-02, 2.140667794534699e-02, 2.141180105098117e-02, 2.074425395908060e-02, 2.117328323587479e-02, 2.117452071805806e-02, 2.074313211247160e-02, 9.036232653415473e-03, 9.023160137600647e-03, 8.844377613676129e-03, 8.839082193309119e-03, 9.207180195079103e-03, 9.148374990294058e-03, 9.037031550684225e-03, 8.972346723714705e-03, 8.806967624941939e-03, 1.137848959876414e-02, 8.806967624941939e-03, 8.904494743503379e-03, 8.399474531237085e-02, 8.545768042541063e-02, 1.403365053624315e-02, 2.331778096293568e-02, 3.652337639660600e-02, 5.681473873137351e-02, 8.517114490316746e-02, 8.583817307717731e-02, 7.106404216411447e-02, 8.656885340129469e-02, 7.106404216411441e-02, 8.612794005595560e-02, -2.031913968016336e-01, -2.040183117409895e-01, 5.315733404704559e-02, -6.123799367898695e-03, -1.867335731175780e-01, -2.021576437705309e-01, 2.288451200804496e-02, 2.285781452382994e-02, -2.135402567917951e-01, -1.732237933219118e-01, -2.135402567918077e-01, -1.732237933218934e-01, -2.793624212234125e-05, -1.947539501196008e-05, -5.185328959320244e-05, -4.781543971090718e-05, -1.560437630500162e-04, -2.033871857923167e-04, -1.182637519013684e-01, -6.835062096941499e-02, -3.135621093805862e-05, -2.574146424413207e-04, -3.135621093777794e-05, -2.574146424393245e-04, -1.439662345569594e+00, -1.399197140512642e+00, -2.967234614629545e-01, -3.489820497807746e-01, -7.940141583630569e-01, -8.556925792068142e-01, -1.254123908370261e+00, -1.312691012363201e+00, -1.031965407308858e+00, -1.084595407660282e+00, -1.031965407308858e+00, -1.104917842942365e+00, -1.519599076841810e+00, -1.521902320861370e+00, 7.078534193963415e-02, 7.642901192228252e-02, 8.660481039111119e-02, 8.455596029822074e-02, 3.003700041007693e-02, 3.299728797370999e-02, 2.896289217500846e-02, 2.603320128738518e-02, 2.896289217500846e-02, 3.107891339585679e-02, 1.843690673850570e-02, 1.382085540604185e-02, 2.589206717914398e-02, 2.580686047571298e-02, 5.755741077645422e-02, 2.689629141142124e-02, 6.557434959099723e-02, 5.103008113086319e-02, 5.217740771828214e-02, 5.271452886024853e-02, 5.217740771828235e-02, 7.197902271375956e-02, 4.207196792820315e-02, 4.534347531304443e-02, -2.819146413975627e-02, -2.814287487022527e-02, -6.035551738961018e-02, -6.765479994366934e-02, 5.427642048886282e-02, 7.769038676782433e-02, -1.990908987047646e-01, -2.362741441327773e-01, -1.990908987047667e-01, -2.362741441327720e-01, -7.745882318984006e-04, -8.467635047625183e-04, -1.162241731126147e-06, -1.165083490308648e-06, -4.019528742812392e-05, -5.119093642823634e-05, -9.085587214913640e-02, -9.612955737334469e-02, -6.875052355176615e-05, -2.055799092016627e-04, -6.875052355334745e-05, -3.012029429909141e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
