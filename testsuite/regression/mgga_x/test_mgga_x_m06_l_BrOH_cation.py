
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_m06_l_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_m06_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.305354072123277e+01, -2.305357384296337e+01, -2.305380090333089e+01, -2.305330709758201e+01, -2.305355440544053e+01, -2.305355440544053e+01, -3.347410744682013e+00, -3.347481740938179e+00, -3.349610927375101e+00, -3.350914229778140e+00, -3.349650554923083e+00, -3.349650554923083e+00, -5.906688601775167e-01, -5.903464561263023e-01, -5.867535705025581e-01, -5.981240405979131e-01, -5.975059903653080e-01, -5.975059903653080e-01, -1.840159659678801e-01, -1.860742416066530e-01, -5.796105137608416e-01, -1.678770419554080e-01, -1.985354361976912e-01, -1.985354361976907e-01, -4.467976570267777e-02, -4.700877340211634e-02, -2.216796823652753e-01, -2.588717107371858e-02, -3.603618264440697e-02, -3.603618264440699e-02, -5.688346045157328e+00, -5.694489445925065e+00, -5.688719477089725e+00, -5.694137984817473e+00, -5.691390594568066e+00, -5.691390594568066e+00, -2.027489802540041e+00, -2.047463406631328e+00, -2.021872059800117e+00, -2.040121055338818e+00, -2.041158253356627e+00, -2.041158253356627e+00, -6.075943138807878e-01, -6.598408159944674e-01, -5.334177127127546e-01, -5.581941359719662e-01, -6.252260446160254e-01, -6.252260446160255e-01, -2.585817085380645e-01, -1.864150773504776e-01, -2.675080816206095e-01, -1.931514268731190e+00, -1.743794272122698e-01, -1.743794272122696e-01, -2.000529173006167e-02, -2.531140488343363e-02, -1.936093704422773e-02, -2.698210860962291e-01, -2.430818098491177e-02, -2.430818098491185e-02, -5.088280980840574e-01, -6.569790784092548e-01, -6.270885291642763e-01, -5.818714008450433e-01, -6.068278589732953e-01, -6.068278589732956e-01, -5.204753364510171e-01, -5.182828270951867e-01, -5.585496964013795e-01, -5.761056145449639e-01, -5.709576614523755e-01, -5.709576614523755e-01, -6.906380753445471e-01, -2.335961133751160e-01, -2.731810130562751e-01, -3.472899158139786e-01, -3.080400492916819e-01, -3.080400492916819e-01, -4.627355281108692e-01, -2.147085467274705e-01, -2.618158640237173e-01, -3.359911078205869e-01, -2.357063355793136e-01, -2.357063355793130e-01, -6.282508865312594e-02, -6.775965767979191e-03, -1.423713193253107e-02, -2.363081956402576e-01, -2.233142488229864e-02, -2.233142488229873e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_m06_l_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_m06_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.763916014873195e+01, -2.764022232878132e+01, -2.763945107022522e+01, -2.764043409147080e+01, -2.764028470782800e+01, -2.764166001663067e+01, -2.763701588216657e+01, -2.763747754044702e+01, -2.763934272371821e+01, -2.763907315537085e+01, -2.763934272371821e+01, -2.763907315537085e+01, -4.464719111279960e+00, -4.464801981468548e+00, -4.464981798269346e+00, -4.465002343507709e+00, -4.470637790961404e+00, -4.471829270719323e+00, -4.467341038283449e+00, -4.467753033758717e+00, -4.463385452841212e+00, -4.473093885530884e+00, -4.463385452841212e+00, -4.473093885530884e+00, -7.520241874023808e-01, -7.673255108042686e-01, -7.472450041441472e-01, -7.650819973328539e-01, -6.895163196308688e-01, -6.777037903031882e-01, -7.017585000401388e-01, -7.098771153015874e-01, -7.842933284226267e-01, -6.514810466415454e-01, -7.842933284226267e-01, -6.514810466415454e-01, -2.091907177064329e-01, -2.100321123595978e-01, -2.071593517125965e-01, -2.087039591238149e-01, -7.967888877925506e-01, -8.637598186397208e-01, 2.161987584966612e-02, -3.361701477395154e-02, -2.160035869636714e-01, 3.736146275855406e-02, -2.160035869636746e-01, 3.736146275853515e-02, -5.718051480528073e-02, -6.064679448287870e-02, -5.981739540083438e-02, -6.392059029827206e-02, -2.362264384921396e-01, -2.362016510132577e-01, -3.471375375106871e-02, -3.413947955737875e-02, -5.117464755809775e-02, -2.930821695618594e-02, -5.117464755809776e-02, -2.930821695618709e-02, -8.374660488581661e+00, -8.372813398045194e+00, -8.413409244826806e+00, -8.410264436119851e+00, -8.377346479710068e+00, -8.374482649018772e+00, -8.410574424738444e+00, -8.408483922615432e+00, -8.394237423091123e+00, -8.391662584655821e+00, -8.394237423091123e+00, -8.391662584655821e+00, -2.444898568303731e+00, -2.443909559471611e+00, -2.453421684668331e+00, -2.452287084848423e+00, -2.442173086010508e+00, -2.441873369788509e+00, -2.448596684183076e+00, -2.448472093931087e+00, -2.453555632462982e+00, -2.448434080520718e+00, -2.453555632462982e+00, -2.448434080520718e+00, -8.916297292279477e-01, -8.903102125631610e-01, -8.639584288278190e-01, -8.773523943074741e-01, -6.880076509064905e-01, -7.703552809866139e-01, -8.619282958908708e-01, -8.919835858201075e-01, -9.043637687145941e-01, -8.847735905763191e-01, -9.043637687145941e-01, -8.847735905763193e-01, 2.095494784810360e-02, 2.573486353345412e-02, -1.921252068130850e-01, -1.936948287935861e-01, -2.895665731003802e-02, 5.665548116109699e-03, -2.944804716471155e+00, -2.942766056101275e+00, 6.570775661283942e-02, 1.788237464248738e-02, 6.570775661285466e-02, 1.788237464248737e-02, -2.610136261886212e-02, -2.712363141235135e-02, -3.341538475406413e-02, -3.392549884741048e-02, -2.493748444735477e-02, -2.638221188968116e-02, -1.726391941083099e-01, -1.559793988001398e-01, -2.555206812768664e-02, -3.486907474013021e-02, -2.555206812768536e-02, -3.486907474012981e-02, -3.276028780309713e-01, -3.392796196924034e-01, -7.016910797081395e-01, -6.804852651821055e-01, -4.965834487630668e-01, -4.751774466987863e-01, -3.504965495341137e-01, -3.406673377207352e-01, -4.158892372999777e-01, -3.995078700797481e-01, -4.158892372999778e-01, -3.995078700797489e-01, -3.045745771505705e-01, -3.059373043199806e-01, -6.858552245701323e-01, -6.934792620724831e-01, -7.558390738417671e-01, -7.542626892005477e-01, -7.218799995576282e-01, -7.276289104307736e-01, -6.993244347113012e-01, -6.986019046980533e-01, -6.993244347113013e-01, -6.986019046980533e-01, -9.153299573018592e-01, -9.005593735663778e-01, -2.736538752342500e-01, -2.738716785459607e-01, -2.936809131274862e-01, -2.978105440918883e-01, -4.336994374846846e-01, -4.360838640577244e-01, -3.745656355939009e-01, -3.749966434201251e-01, -3.745656355939005e-01, -3.749966434201253e-01, -5.689478733006441e-01, -5.801832379462855e-01, -2.328528438950636e-01, -2.341413048993348e-01, -2.406459338395896e-01, -2.338171555248555e-01, -4.189844237355047e-01, -4.503694301964564e-01, -4.830691875307281e-02, 4.248484972350458e-03, -4.830691875307744e-02, 4.248484972333098e-03, -8.130822290572072e-02, -8.414320704044535e-02, -9.022674629023043e-03, -9.043077772895966e-03, -1.832602359373539e-02, -1.948442059921974e-02, -5.006855508794732e-02, -2.995779677743101e-02, -2.417491230410901e-02, -3.200207477057675e-02, -2.417491230410969e-02, -3.200207477057621e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_m06_l_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_m06_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.793672652798582e-08, 0.000000000000000e+00, -1.793644025119958e-08, -1.793657069480695e-08, 0.000000000000000e+00, -1.793632706078150e-08, -1.793586986548969e-08, 0.000000000000000e+00, -1.793537962408792e-08, -1.793763116426796e-08, 0.000000000000000e+00, -1.793762363976180e-08, -1.793664232571246e-08, 0.000000000000000e+00, -1.793657801366510e-08, -1.793664232571246e-08, 0.000000000000000e+00, -1.793657801366510e-08, -2.522924607424315e-05, 0.000000000000000e+00, -2.524103051528398e-05, -2.522891257636645e-05, 0.000000000000000e+00, -2.524191029198994e-05, -2.523469393229118e-05, 0.000000000000000e+00, -2.523756588322694e-05, -2.517657113139615e-05, 0.000000000000000e+00, -2.518549367136082e-05, -2.524508289877015e-05, 0.000000000000000e+00, -2.518820678409192e-05, -2.524508289877015e-05, 0.000000000000000e+00, -2.518820678409192e-05, -1.755215719616840e-02, 0.000000000000000e+00, -1.755744958922607e-02, -1.755557880389398e-02, 0.000000000000000e+00, -1.757534439104246e-02, -1.761712067929452e-02, 0.000000000000000e+00, -1.739065206237138e-02, -1.668058795448371e-02, 0.000000000000000e+00, -1.668534521068629e-02, -1.755129331856352e-02, 0.000000000000000e+00, -1.513037802792381e-02, -1.755129331856352e-02, 0.000000000000000e+00, -1.513037802792381e-02, -1.118372957596962e+00, 0.000000000000000e+00, -1.063750065168488e+00, -1.179698110930276e+00, 0.000000000000000e+00, -1.101245290808480e+00, -1.259424591020404e-02, 0.000000000000000e+00, -1.120031967554229e-02, -1.196953488136292e+00, 0.000000000000000e+00, -8.134482503266627e-01, -9.951810887055290e-01, 0.000000000000000e+00, -2.585123366856605e+00, -9.951810887055276e-01, 0.000000000000000e+00, -2.585123366856584e+00, 6.429097090177300e+00, 0.000000000000000e+00, 6.402250497852584e+00, 6.707058771742329e+00, 0.000000000000000e+00, 6.724948402425607e+00, 2.215122558632791e+00, 0.000000000000000e+00, 2.255724419483386e+00, 5.088739928647863e+00, 0.000000000000000e+00, 5.112052977810603e+00, 6.258209903083502e+00, 0.000000000000000e+00, 1.088597603700287e+01, 6.258209903083512e+00, 0.000000000000000e+00, 1.088597603700261e+01, -5.350470514724161e-06, 0.000000000000000e+00, -5.355339567819395e-06, -5.356285732443784e-06, 0.000000000000000e+00, -5.360965842612358e-06, -5.350779498095879e-06, 0.000000000000000e+00, -5.355523510956976e-06, -5.355768069961685e-06, 0.000000000000000e+00, -5.360633365491505e-06, -5.353441284095616e-06, 0.000000000000000e+00, -5.358151670854534e-06, -5.353441284095616e-06, 0.000000000000000e+00, -5.358151670854534e-06, -1.718678561116374e-04, 0.000000000000000e+00, -1.717393264824647e-04, -1.682130696929671e-04, 0.000000000000000e+00, -1.682263753702933e-04, -1.697003050312444e-04, 0.000000000000000e+00, -1.702947537671068e-04, -1.666556579225813e-04, 0.000000000000000e+00, -1.671166320821138e-04, -1.710655938376245e-04, 0.000000000000000e+00, -1.700852941084961e-04, -1.710655938376245e-04, 0.000000000000000e+00, -1.700852941084961e-04, -3.106688959624089e-02, 0.000000000000000e+00, -3.141400707998353e-02, -2.608380148467373e-02, 0.000000000000000e+00, -2.601589698609274e-02, -4.511548526236230e-02, 0.000000000000000e+00, -3.919991242558942e-02, -4.582126955077184e-02, 0.000000000000000e+00, -4.005204839959915e-02, -2.735792738446690e-02, 0.000000000000000e+00, -3.329220081791603e-02, -2.735792738446691e-02, 0.000000000000000e+00, -3.329220081791604e-02, -2.381860505815070e-01, 0.000000000000000e+00, -3.629594121930177e-01, -4.324512381987733e-01, 0.000000000000000e+00, -4.375875556737152e-01, -3.814052149883944e-01, 0.000000000000000e+00, -2.326548383433678e-01, -3.279532566233448e-04, 0.000000000000000e+00, -3.285716871458453e-04, -3.309157371045361e-01, 0.000000000000000e+00, -5.851950717813375e-01, -3.309157371045262e-01, 0.000000000000000e+00, -5.851950717813353e-01, 9.822541371720550e-01, 0.000000000000000e+00, 1.493427571642677e+00, 4.594051913678254e+00, 0.000000000000000e+00, 3.916794724471107e+00, 3.472687320586047e+01, 0.000000000000000e+00, 3.811137039469374e+01, 1.273574781656007e-01, 0.000000000000000e+00, 9.480382175960279e-01, -8.311107822004313e+00, 0.000000000000000e+00, 1.957518609326591e+01, -8.311107822004569e+00, 0.000000000000000e+00, 1.957518609326572e+01, -3.021929241495822e-02, 0.000000000000000e+00, -2.946957814530914e-02, -3.732468742604021e-02, 0.000000000000000e+00, -3.667235600485820e-02, -3.599852532148066e-02, 0.000000000000000e+00, -3.522233070112884e-02, -3.382624617157643e-02, 0.000000000000000e+00, -3.303116070584624e-02, -3.503752407686990e-02, 0.000000000000000e+00, -3.424087084404488e-02, -3.503752407686990e-02, 0.000000000000000e+00, -3.424087084404490e-02, -3.590963656779515e-02, 0.000000000000000e+00, -3.502209643311591e-02, -5.083737584122015e-02, 0.000000000000000e+00, -5.024529010249122e-02, -4.952225557330262e-02, 0.000000000000000e+00, -4.891074457935976e-02, -4.614910784897698e-02, 0.000000000000000e+00, -4.555246245640163e-02, -4.830629224827175e-02, 0.000000000000000e+00, -4.764008226823482e-02, -4.830629224827175e-02, 0.000000000000000e+00, -4.764008226823482e-02, -2.187463859473684e-02, 0.000000000000000e+00, -2.167961917667778e-02, -3.729604447036347e-01, 0.000000000000000e+00, -3.730552799789474e-01, -3.215651246176977e-01, 0.000000000000000e+00, -3.192365547671632e-01, -2.042048421704830e-01, 0.000000000000000e+00, -2.008856187755670e-01, -2.666867163483678e-01, 0.000000000000000e+00, -2.685856506050269e-01, -2.666867163483679e-01, 0.000000000000000e+00, -2.685856506050270e-01, -7.212294518577056e-02, 0.000000000000000e+00, -7.055954077691494e-02, 2.528383563611075e+00, 0.000000000000000e+00, 2.458411682429035e+00, 1.392191288000443e+00, 0.000000000000000e+00, 1.374749934062157e+00, -2.702263403224262e-01, 0.000000000000000e+00, -2.523336365569436e-01, 1.855487510881006e-01, 0.000000000000000e+00, -2.206713782007817e-02, 1.855487510880957e-01, 0.000000000000000e+00, -2.206713782004016e-02, 3.013611936489942e+00, 0.000000000000000e+00, 2.861481053941269e+00, -2.987803245921274e+01, 0.000000000000000e+00, -1.070829603217088e+02, 1.496718347173802e+01, 0.000000000000000e+00, 1.587782550666479e+01, 5.262280894263708e-01, 0.000000000000000e+00, 1.202355040259583e+00, -1.378183731029466e+00, 0.000000000000000e+00, 2.032694508624689e+01, -1.378183731029506e+00, 0.000000000000000e+00, 2.032694508624654e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_m06_l_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_m06_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.599314201659967e-04, 2.605414617099345e-04, 2.600237362036733e-04, 2.606088084225241e-04, 2.602806111337352e-04, 2.609902431295238e-04, 2.592470995266058e-04, 2.596634013351418e-04, 2.599907389777369e-04, 2.601625864597410e-04, 2.599907389777369e-04, 2.601625864597410e-04, 5.939250025648361e-03, 5.938696075628239e-03, 5.940992015983270e-03, 5.939907709966261e-03, 5.977262351051889e-03, 5.984211425731200e-03, 5.959612855209931e-03, 5.960368305224097e-03, 5.936262898768836e-03, 5.994415608642432e-03, 5.936262898768836e-03, 5.994415608642432e-03, 2.035706527690755e-02, 2.130988398479394e-02, 2.008782347504820e-02, 2.117499008302962e-02, 1.697708033232838e-02, 1.638971716340962e-02, 1.742073863961205e-02, 1.794480027490965e-02, 2.202311129992835e-02, 1.406192838585386e-02, 2.202311129992835e-02, 1.406192838585386e-02, 3.631586242165353e-02, 3.291912530974609e-02, 3.680903446533555e-02, 3.290939304175758e-02, 1.517264227150810e-02, 1.560652156258359e-02, -1.244778901508890e-01, -9.935095655000022e-02, 3.547438645827636e-02, -1.789373074641870e-01, 3.547438645827857e-02, -1.789373074641764e-01, -3.844229790849181e-04, -4.628502754899940e-04, -4.582651931494220e-04, -5.702184296302235e-04, -3.214598141557500e-02, -3.889090402188304e-02, -6.109924105756438e-05, -5.874073115483460e-05, -2.593663901703444e-04, -8.124069569806418e-05, -2.593663901703444e-04, -8.124069569561653e-05, 2.089665475651202e-02, 2.090527947226537e-02, 2.144349636494286e-02, 2.143402989896753e-02, 2.093512211407305e-02, 2.092926830370525e-02, 2.140401662129660e-02, 2.140927911807265e-02, 2.117179863982066e-02, 2.117075433130952e-02, 2.117179863982066e-02, 2.117075433130952e-02, 9.307654558451048e-03, 9.286255988321897e-03, 9.077317534764800e-03, 9.065298487925580e-03, 9.435886800634037e-03, 9.382191829133288e-03, 9.231024793861993e-03, 9.170380935808338e-03, 9.086183388146422e-03, 9.151898614482330e-03, 9.086183388146422e-03, 9.151898614482330e-03, 8.422778479767602e-02, 8.519477146582725e-02, 1.664453818331381e-02, 2.550116540779950e-02, 4.031003460599396e-02, 5.870880548170514e-02, 8.591502195075403e-02, 8.628635122711689e-02, 7.152000560430079e-02, 8.634184341318560e-02, 7.152000560430076e-02, 8.634184341318563e-02, -1.984159435185953e-01, -1.986567612066401e-01, -4.846846834573529e-03, -3.769625255620513e-03, -1.820553782726973e-01, -1.975472990341744e-01, 2.320346031307359e-02, 2.317920877611704e-02, -2.079811483933632e-01, -1.679686692828373e-01, -2.079811483933757e-01, -1.679686692828191e-01, -1.828012132147703e-05, -1.895259950234106e-05, -5.128071604924546e-05, -4.720888893740907e-05, -1.553501086997667e-04, -2.024193660060365e-04, -1.160333127298233e-01, -1.297385763041877e-01, -2.967243527508397e-05, -2.572295695916862e-04, -2.967243527480332e-05, -2.572295695896900e-04, -1.431829897238308e+00, -1.391775304002335e+00, -2.948396019764041e-01, -3.469023715384487e-01, -8.067317061823163e-01, -8.689801643390552e-01, -1.268808332125960e+00, -1.305838521916680e+00, -1.046159981219225e+00, -1.099125629404472e+00, -1.046159981219225e+00, -1.099125629404472e+00, -1.503126260924433e+00, -1.505976187705152e+00, 7.096630944997105e-02, 7.306936301918601e-02, 8.672665789076793e-02, 8.308109959314727e-02, 3.062255830612218e-02, 3.355264925900431e-02, 2.954853395754546e-02, 2.661757321377336e-02, 2.954853395754546e-02, 2.661757321377342e-02, 2.130312943543797e-02, 1.246230420658618e-02, 2.716944190985612e-02, 2.712532996559456e-02, 2.793975810655122e-02, 2.948500092331048e-02, 5.546467047670221e-02, 5.518265289340723e-02, 5.505842133009409e-02, 5.560000484565458e-02, 5.505842133009427e-02, 5.560000484565456e-02, 4.401085203079765e-02, 4.702002012136652e-02, -3.216389139488914e-02, -3.213701816943724e-02, -5.981781551259769e-02, -6.705665101136217e-02, 5.906838507928420e-02, 8.020439944390771e-02, -1.957828096058812e-01, -2.318899260337504e-01, -1.957828096058835e-01, -2.318899260337451e-01, -5.351692108264294e-04, -5.857671175661502e-04, -1.053022365052182e-06, -9.616507045231874e-07, -2.707916459132564e-05, -3.450804211191367e-05, -2.020943799193037e-01, -2.208074060581207e-01, -6.623281918074700e-05, -2.054284856665470e-04, -6.623281918232813e-05, -2.054284856672508e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
