
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_r2scanl_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scanl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.324580096703794e+01, -2.324586708747453e+01, -2.324617898057841e+01, -2.324519486773701e+01, -2.324570797472163e+01, -2.324570797472163e+01, -3.427749802222564e+00, -3.427841787100570e+00, -3.430606115046315e+00, -3.432380339163294e+00, -3.430715660957194e+00, -3.430715660957194e+00, -5.986026886521474e-01, -5.979464463276971e-01, -5.827694052395581e-01, -5.931472410153522e-01, -5.922060845290740e-01, -5.922060845290740e-01, -1.734610172443886e-01, -1.761381168108770e-01, -6.565370795578762e-01, -1.130938600969292e-01, -1.619089719164764e-01, -1.619089719164763e-01, -2.601597536173714e-03, -2.802251475145872e-03, -2.397853125310296e-02, -1.220470347962535e-03, -1.968745502631957e-03, -1.968745502631958e-03, -4.083388873150355e+00, -4.224791173113873e+00, -5.669116800180298e+00, -4.142426076665969e+00, -5.669614857299782e+00, -4.710177718175500e+00, -2.094881403676904e+00, -1.725657599997192e+00, -1.966118824344156e+00, -1.988121860260432e+00, -1.976124438984148e+00, -2.132803010842236e+00, -4.759353295797006e-01, -4.864260154577187e-01, -4.411489536336550e-01, -5.082946344765712e-01, -5.656157720724792e-01, -5.332703047898752e-01, -9.153635300171056e-02, -1.436329022088659e-01, -8.418362967058111e-02, -1.701438273027281e+00, -1.104519910029113e-01, -1.104519910029113e-01, -1.060029684126375e-03, -1.502316676631496e-03, -1.235204864554475e-03, -5.400227356955094e-02, -1.317621572437639e-03, -1.582896964989524e-03, -5.559028882551196e-01, -5.544648021367306e-01, -5.546693555789709e-01, -5.498123881564732e-01, -5.552502644455495e-01, -5.548658520330262e-01, -5.407881303715363e-01, -5.154822658283449e-01, -4.156803782782064e-01, -5.864081456698848e-01, -4.731681867288628e-01, -4.367222339130901e-01, -5.263686730926689e-01, -2.333258734849494e-01, -2.785200362437508e-01, -3.769540112518036e-01, -2.558508383296084e-01, -2.683875303036735e-01, -4.499095920838279e-01, -2.848365761497269e-02, -3.281575443338833e-02, -3.280544088654758e-01, -7.176699248366311e-02, -7.176699248366308e-02, -5.097675726076814e-03, -2.785317568552206e-04, -7.371789704916517e-04, -6.670816313961028e-02, -1.437753619840080e-03, -1.437457154711271e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_r2scanl_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scanl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.111039881329518e+01, -3.111035844859763e+01, -3.111049551754925e+01, -3.111042870323106e+01, -3.111082981797086e+01, -3.111090075272069e+01, -3.110973707338642e+01, -3.110950815628019e+01, -3.111045523114146e+01, -3.111008315218390e+01, -3.111045523114146e+01, -3.111008315218390e+01, -3.993905017790205e+00, -3.994409022105919e+00, -3.993908917806089e+00, -3.994461974356937e+00, -3.994602270171766e+00, -3.994915966262154e+00, -3.992171942619166e+00, -3.992764890310673e+00, -3.993236064060067e+00, -3.993450615239107e+00, -3.993236064060067e+00, -3.993450615239107e+00, -7.796150472060301e-01, -7.830829377545429e-01, -7.783019835049865e-01, -7.825067116585838e-01, -7.607612998038511e-01, -7.551437431308547e-01, -7.635066443886251e-01, -7.653662290137632e-01, -7.892422145030541e-01, -7.274602662265747e-01, -7.892422145030541e-01, -7.274602662265747e-01, -1.226133979417509e-01, -1.377237411011241e-01, -1.310684851068471e-01, -1.461579226601375e-01, -8.426212725072599e-01, -8.837475232359456e-01, -1.488774536362671e-01, -1.368799333573673e-01, -1.244434612895608e-01, -1.111803870970947e-01, -1.244434612895608e-01, -1.111803870970946e-01, -4.482444665018578e-03, -4.845157992932269e-03, -4.780786311054460e-03, -5.222050836262144e-03, -3.722050105575502e-02, -3.956711726590180e-02, -2.285213887593079e-03, -2.229202635669438e-03, -3.865127486397532e-03, -1.991635334847675e-03, -3.865127486397534e-03, -1.991635334847678e-03, -4.967088735565248e+00, -5.043634918688102e+00, -5.539028536917420e+00, -5.546110808865725e+00, -7.577136191739323e+00, -7.575296982387380e+00, -4.915616606897404e+00, -4.917982800918905e+00, -7.577696845724574e+00, -7.575859323311328e+00, -6.116141558264171e+00, -6.176558837877907e+00, -2.823702089838278e+00, -2.850921031256340e+00, -2.280707448291217e+00, -2.280405760372965e+00, -2.006061724759785e+00, -2.015556789313490e+00, -2.032017715908824e+00, -2.036918669090372e+00, -2.078081332331926e+00, -2.054407057240023e+00, -2.895012351124229e+00, -2.876019308994033e+00, -5.796959928640156e-01, -5.816464840822623e-01, -6.339604252309965e-01, -6.345861884816310e-01, -5.334445644560996e-01, -5.470294855167954e-01, -6.615649828018659e-01, -6.866758020522684e-01, -7.196545780447151e-01, -6.859660220751488e-01, -7.198674359062630e-01, -6.821479278494321e-01, -1.347375655692335e-01, -1.360755120409220e-01, -1.978431243313846e-01, -1.987311554326929e-01, -1.216008564389703e-01, -1.283346391207496e-01, -2.326671087469291e+00, -2.325832356650831e+00, -1.546755398382837e-01, -1.639583646902407e-01, -1.546755398382837e-01, -1.639583646902407e-01, -1.868636358399642e-03, -1.923203998781822e-03, -2.730957558116652e-03, -2.767862015565861e-03, -2.137250497984484e-03, -2.321637356288492e-03, -8.258605161967952e-02, -8.307604218761856e-02, -1.774371505318356e-03, -2.576832090066381e-03, -2.084537634493390e-03, -3.171490763475403e-03, -7.388270885760981e-01, -7.417373838685183e-01, -7.270542642336365e-01, -7.302193650024110e-01, -7.318693397224424e-01, -7.349954680603994e-01, -7.215881836157820e-01, -7.228467602638059e-01, -7.349726880976366e-01, -7.378645151436971e-01, -7.338076392723776e-01, -7.368587603300342e-01, -7.197412387777924e-01, -7.221216467290451e-01, -5.593023456011246e-01, -5.652748454171667e-01, -5.120225440404031e-01, -5.138334138446751e-01, -7.826474980886868e-01, -7.853795304635109e-01, -6.199661874882511e-01, -6.224310558790813e-01, -5.286431586440590e-01, -5.299487815122997e-01, -6.289556867961710e-01, -6.309436887238654e-01, -3.238994208892288e-01, -3.257374654388743e-01, -3.749567405806600e-01, -3.783081335176717e-01, -5.076454304744455e-01, -5.104093121734217e-01, -3.384528601085419e-01, -3.377393138171603e-01, -3.503449848943458e-01, -3.502404724889726e-01, -4.959837584862535e-01, -5.006346125815256e-01, -4.590291700912246e-02, -4.626129280308421e-02, -5.054416488664835e-02, -5.246310819262897e-02, -3.783919401510346e-01, -3.788984554071049e-01, -1.037737052256274e-01, -1.099703324399831e-01, -1.037737052256275e-01, -1.099703324399829e-01, -8.796861165324067e-03, -9.217481042155045e-03, -5.122611655206630e-04, -5.438478187316182e-04, -1.307392537949718e-03, -1.430681144305429e-03, -9.935766957924015e-02, -1.010319389407169e-01, -2.076057267775347e-03, -2.859004545264904e-03, -2.068119570931925e-03, -2.859004545264868e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_r2scanl_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scanl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([5.872713019703835e-10, 0.000000000000000e+00, 5.872735956428534e-10, 5.872545458586694e-10, 0.000000000000000e+00, 5.872614281515739e-10, 5.872117026111779e-10, 0.000000000000000e+00, 5.871970235556443e-10, 5.874006555427471e-10, 0.000000000000000e+00, 5.874379489231395e-10, 5.872607648391247e-10, 0.000000000000000e+00, 5.873495574145855e-10, 5.872607648391247e-10, 0.000000000000000e+00, 5.873495574145855e-10, -3.408230308341527e-05, 0.000000000000000e+00, -3.408615566970526e-05, -3.408440460696154e-05, 0.000000000000000e+00, -3.408804382275353e-05, -3.412966463346958e-05, 0.000000000000000e+00, -3.413761461469374e-05, -3.408150400123642e-05, 0.000000000000000e+00, -3.408443289049619e-05, -3.409794208883826e-05, 0.000000000000000e+00, -3.412029486710119e-05, -3.409794208883826e-05, 0.000000000000000e+00, -3.412029486710119e-05, -8.403465613735062e-03, 0.000000000000000e+00, -8.543126655817267e-03, -8.373145575749169e-03, 0.000000000000000e+00, -8.526599855022415e-03, -7.983564707840042e-03, 0.000000000000000e+00, -7.982882660484034e-03, -8.283117601754778e-03, 0.000000000000000e+00, -8.405489606466750e-03, -8.566918441398239e-03, 0.000000000000000e+00, -9.176094299619044e-03, -8.566918441398239e-03, 0.000000000000000e+00, -9.176094299619044e-03, -4.167887414187608e+00, 0.000000000000000e+00, -3.532392269414586e+00, -3.929615619476606e+00, 0.000000000000000e+00, -3.314499653490310e+00, -2.621429534784144e-03, 0.000000000000000e+00, -3.169533943337824e-03, -7.493583475089773e-01, 0.000000000000000e+00, -2.246944711195123e+00, -3.702344589252012e+00, 0.000000000000000e+00, 3.760924512873497e-01, -3.702344589252009e+00, 0.000000000000000e+00, 3.760924512873501e-01, 3.885376633530950e+02, 0.000000000000000e+00, 3.446016136502412e+02, 3.660638569204139e+02, 0.000000000000000e+00, 3.204169744128511e+02, 8.070398814526584e+00, 0.000000000000000e+00, 7.024720272828127e+00, 9.771334427617419e+02, 0.000000000000000e+00, 9.919159053541343e+02, 4.828550426969490e+02, 0.000000000000000e+00, 2.379240205938550e+03, 4.828550426969497e+02, 0.000000000000000e+00, 2.379240205938586e+03, -3.488329691060385e-06, 0.000000000000000e+00, -3.690444293623251e-06, -4.134837424230820e-06, 0.000000000000000e+00, -4.142762163659165e-06, 1.406761114260259e-07, 0.000000000000000e+00, 1.408556518566790e-07, -2.895740982156982e-06, 0.000000000000000e+00, -2.837419491207094e-06, 1.403114266530089e-07, 0.000000000000000e+00, 1.404965643341926e-07, -5.363994360518650e-06, 0.000000000000000e+00, -6.521641627370995e-06, -3.740243676552406e-05, 0.000000000000000e+00, -2.711544848276972e-05, -8.063966349158085e-05, 0.000000000000000e+00, -8.097526195937748e-05, -2.930264146768110e-04, 0.000000000000000e+00, -2.922287054702784e-04, -2.828332050188768e-04, 0.000000000000000e+00, -2.847437214083850e-04, -2.828648367904534e-04, 0.000000000000000e+00, -2.858328941449209e-04, 1.049533199257137e-05, 0.000000000000000e+00, 8.616555320955049e-06, -7.535630708835341e-03, 0.000000000000000e+00, -6.246976964132150e-03, -1.977381735213254e-02, 0.000000000000000e+00, -1.913078559161698e-02, -7.467550998504633e-03, 0.000000000000000e+00, -9.131915684797574e-03, -5.456206451838919e-02, 0.000000000000000e+00, -5.208326086113405e-02, -3.536650562712492e-02, 0.000000000000000e+00, -4.003732558481905e-02, -2.073810474246061e-02, 0.000000000000000e+00, -2.347717474022196e-02, 9.084585033191712e-01, 0.000000000000000e+00, 8.929452286816374e-01, 8.094512520620684e-02, 0.000000000000000e+00, 7.869735852288030e-02, 1.217516153299226e+00, 0.000000000000000e+00, 1.058353359486597e+00, -3.437461417716899e-04, 0.000000000000000e+00, -3.442061095726681e-04, 6.717896645571019e-01, 0.000000000000000e+00, 6.202898277542108e-01, 6.717896645571019e-01, 0.000000000000000e+00, 6.202898277542108e-01, 2.245657791027453e+03, 0.000000000000000e+00, 1.952767591120356e+03, 1.313109329308242e+03, 0.000000000000000e+00, 1.223245262072471e+03, 5.744587688469392e+03, 0.000000000000000e+00, 5.466351608047372e+03, 3.496179952398898e+00, 0.000000000000000e+00, 3.394047677400048e+00, 4.135448650496162e+03, 0.000000000000000e+00, 2.031276665659070e+03, 3.787838357627344e+03, 0.000000000000000e+00, 2.098368251606326e+03, -2.486576079015112e-03, 0.000000000000000e+00, -2.331672906860010e-03, -1.175300796128912e-02, 0.000000000000000e+00, -1.134182996786166e-02, -8.558053689681072e-03, 0.000000000000000e+00, -8.158497821798696e-03, -4.156131277053924e-03, 0.000000000000000e+00, -3.725419978684882e-03, -7.195146661035429e-03, 0.000000000000000e+00, -6.839842171245086e-03, -7.079964250792871e-03, 0.000000000000000e+00, -6.741142605131417e-03, -9.396701351458848e-04, 0.000000000000000e+00, -9.177959850250007e-04, -6.497590240403076e-02, 0.000000000000000e+00, -6.239419059188407e-02, -1.200247247302384e-02, 0.000000000000000e+00, -1.190036001136719e-02, 1.321866457144426e-03, 0.000000000000000e+00, 1.297123288016516e-03, -3.649503266104918e-02, 0.000000000000000e+00, -3.631716569267232e-02, -6.626323255660972e-03, 0.000000000000000e+00, -6.783704503138403e-03, -1.143433006876244e-02, 0.000000000000000e+00, -1.096648649123133e-02, 5.843525251255279e-02, 0.000000000000000e+00, 5.734386249896763e-02, -5.191809680075667e-02, 0.000000000000000e+00, -5.344717238881183e-02, 1.092794950967183e-02, 0.000000000000000e+00, 1.067904813712264e-02, -5.486631829921978e-02, 0.000000000000000e+00, -5.423886875240227e-02, -1.434308365534098e-01, 0.000000000000000e+00, -1.403942055817103e-01, -1.084154262081865e-01, 0.000000000000000e+00, -1.060691853738872e-01, 1.061867237289944e+01, 0.000000000000000e+00, 1.046586440757323e+01, 3.990812409373371e+00, 0.000000000000000e+00, 3.895666878361939e+00, -3.507410553421217e-01, 0.000000000000000e+00, -3.650892715895460e-01, 2.071782380287871e+00, 0.000000000000000e+00, 1.926469538933354e+00, 2.071782380287849e+00, 0.000000000000000e+00, 1.926469538933372e+00, 2.158412066470638e+02, 0.000000000000000e+00, 2.039738987130211e+02, 2.624142814622280e+04, 0.000000000000000e+00, 3.650089864452284e+04, 5.985222868427176e+03, 0.000000000000000e+00, 5.589112445960234e+03, 2.400226539851731e+00, 0.000000000000000e+00, 2.288170793212527e+00, 6.390612919749271e+03, 0.000000000000000e+00, 2.605408045539426e+03, 6.246847643031774e+03, 0.000000000000000e+00, 2.605408045538781e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_r2scanl_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scanl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.981741206104658e-03, 1.981252596687246e-03, 1.981942105805393e-03, 1.981351283646886e-03, 1.985413892890246e-03, 1.985937545959499e-03, 1.985485033127556e-03, 1.985176103005403e-03, 1.981517393307475e-03, 1.988181116175285e-03, 1.981517393307475e-03, 1.988181116175285e-03, 2.799084430450815e-03, 2.837961421948729e-03, 2.791754105662753e-03, 2.830118659687450e-03, 2.666368337050133e-03, 2.696462612426888e-03, 2.925660119594791e-03, 2.977172103280044e-03, 2.810315518406323e-03, 3.305380225300058e-03, 2.810315518406323e-03, 3.305380225300058e-03, 3.140245525872491e-02, 3.001119892180750e-02, 3.067355483551061e-02, 2.965072950553320e-02, 5.712045940085975e-04, 9.027477916494471e-04, 3.251181746329926e-03, 8.685595634318883e-03, 3.175523846452055e-02, 3.226156467832642e-04, 3.175523846452053e-02, 3.226156467832638e-04, -3.352328889570578e-06, -3.245914091819308e-06, -3.398351205276288e-06, -3.281118083008718e-06, 1.958250961044722e-05, 3.115936160173755e-05, -4.961652971129288e-06, -4.882317728184714e-06, -3.800118641812369e-06, -8.046123362202258e-06, -3.800118641812412e-06, -8.046123362203381e-06, -3.957235637105451e-06, 6.117674808093637e-06, 1.237498161383631e-04, 1.268138153995025e-04, 0.000000000000000e+00, 0.000000000000000e+00, -1.147767319750267e-05, -1.154119192707975e-05, 0.000000000000000e+00, 0.000000000000000e+00, 6.143527660629892e-04, 9.164322949926576e-04, -5.654612338706933e-06, -5.298996163548507e-06, 7.005105426204858e-04, 7.041240262503331e-04, 3.226022896974978e-03, 3.229605745950053e-03, 3.181349642585761e-03, 3.209286269873215e-03, 3.221863799664129e-03, 3.227581683286844e-03, 0.000000000000000e+00, 2.334024164404489e-05, -8.385491011406946e-05, -8.438568257927182e-05, 1.440415281866429e-04, 1.341920526579966e-04, -8.600311415945379e-05, -8.403443670452876e-05, 7.486748713709655e-03, 8.816268606925155e-03, 1.027207511845200e-02, 9.760717499093111e-03, 4.446616205490282e-03, 4.182560482546584e-03, 0.000000000000000e+00, 0.000000000000000e+00, -3.806274892885100e-05, -3.771470644899762e-05, 0.000000000000000e+00, 0.000000000000000e+00, 2.135794578385945e-03, 2.137727200140736e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.492678546063711e-06, -1.962765376780570e-06, -1.905620534530389e-12, -2.202410330844304e-12, -3.498300094841932e-12, -2.088503563676464e-11, 0.000000000000000e+00, 0.000000000000000e+00, -1.069520048491184e-05, -1.165342042436695e-05, -2.271319996092600e-09, -2.735769231285442e-08, -3.781980813942833e-11, -3.718638821185384e-11, -2.414534243259311e-10, -2.417603429786113e-10, -7.953574360113408e-13, -7.917224343962303e-13, -4.095557627101744e-07, -5.120079253403346e-07, -2.723569825399458e-09, -2.001021027087778e-09, -2.405820030209851e-13, -2.406962267370710e-13, -2.474443712292643e-12, -2.352883215038084e-12, 1.154142086763834e-02, 1.124533598690305e-02, -7.198415656948826e-05, -7.405076502734369e-05, 0.000000000000000e+00, 0.000000000000000e+00, 5.213408376771574e-03, 5.253503707548764e-03, -8.738481241449572e-05, -8.775764180305052e-05, -1.060536241663184e-04, -1.072884863946746e-04, 0.000000000000000e+00, 0.000000000000000e+00, -2.383775867438935e-05, -2.423548306318761e-05, 0.000000000000000e+00, 0.000000000000000e+00, 1.189461915136892e-03, 1.134383454847135e-03, 5.192331113609111e-03, 5.018372477065728e-03, 1.444430370604784e-02, 1.440644739098535e-02, 0.000000000000000e+00, 0.000000000000000e+00, 3.936133266110044e-05, 1.386811190701127e-05, 1.781821883618274e-02, 2.001473271729118e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.732560460437117e-09, -3.497332389286142e-10, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.714584272343139e-08, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
