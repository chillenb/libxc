
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_r2scanl_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scanl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.219373717365978e+01, -2.219375093061895e+01, -2.219390832416882e+01, -2.219370208180157e+01, -2.273241370785216e+01, -2.273241370785216e+01, -3.744087110696520e+00, -3.788781067767232e+00, -3.789062922660022e+00, -3.785737184348518e+00, -3.744286688516419e+00, -3.788874291619534e+00, -7.307863017195207e-01, -7.299834931918350e-01, -7.106039821003214e-01, -7.164869654195771e-01, -7.136934102209059e-01, -7.167543078074442e-01, -1.848500162832601e-01, -1.879532094098479e-01, -8.509985322974796e-01, -1.432675711399805e-01, -1.812245764800494e-01, -1.802812159884666e-01, -4.921728167439221e-03, -3.321984451012152e-03, -3.820075942861595e-02, -2.578790886032041e-03, -4.988350507248696e-03, -2.494563611590809e-03, -5.672600085168801e+00, -5.481008568636131e+00, -5.672651959349361e+00, -5.673571272615735e+00, -5.673125868599428e+00, -5.481492039889289e+00, -2.125212210997748e+00, -2.140832265646797e+00, -2.120930661127320e+00, -2.127240903475222e+00, -2.146247264612791e+00, -2.139643915575011e+00, -6.392432182789721e-01, -6.487893916124561e-01, -5.918758968438186e-01, -5.845178437910395e-01, -6.503928347033312e-01, -6.503928347033312e-01, -9.176542370619045e-02, -1.889846202731029e-01, -9.213775200114224e-02, -1.865625161482534e+00, -1.169116576358870e-01, -1.136425233979884e-01, -1.920280269361845e-03, -3.709028205575127e-03, -2.077381008328198e-03, -6.188688348471526e-02, -3.568059111878118e-03, -3.568059111878119e-03, -6.015704325428188e-01, -6.046398885771302e-01, -6.037073130929187e-01, -6.410294316270490e-01, -6.033388438751923e-01, -6.404949195186695e-01, -6.249364186342161e-01, -5.364649909212400e-01, -5.617648073266222e-01, -5.868560088335203e-01, -5.633090943250676e-01, -5.740407204582494e-01, -7.280308747409774e-01, -2.360350961384786e-01, -2.867615289062423e-01, -3.778534238287382e-01, -3.293791755501025e-01, -3.293791755501025e-01, -4.929134777689930e-01, -3.143486279497305e-02, -4.580363684953172e-02, -3.640676584752027e-01, -7.891630680087461e-02, -7.891630680087461e-02, -6.606168965914755e-03, -9.913377696918121e-04, -1.320965001508062e-03, -7.026584496094537e-02, -3.276646272115884e-03, -2.792317576567403e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_r2scanl_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scanl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.526392886825750e+01, -2.526389323820651e+01, -2.526397076354779e+01, -2.526392364003947e+01, -2.526417390120358e+01, -2.526419531840761e+01, -2.526370010838741e+01, -2.526359204135812e+01, -2.526395038488198e+01, "nan", -2.526395038488198e+01, "nan", -4.258113522216101e+00, "nan", "nan", "nan", "nan", "nan", "nan", "nan", -4.257811868390056e+00, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", -9.333289197842201e-01, "nan", "nan", -2.516605080981126e-01, -2.612120975367645e-01, -2.546275835918740e-01, -2.656462329919719e-01, -1.124198164863845e+00, "nan", "nan", "nan", "nan", "nan", "nan", -1.414325376975150e-01, -4.459075163798132e-03, "nan", -4.747484301505535e-03, "nan", "nan", "nan", -2.406972386433465e-03, "nan", "nan", -2.039929332741843e-03, -3.832296988993728e-03, "nan", "nan", "nan", -6.121156251580395e+00, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", -6.119145550849002e+00, "nan", -2.871145081920857e+00, "nan", -2.891101905342412e+00, "nan", "nan", -2.872813412767281e+00, "nan", "nan", "nan", -2.895012351124229e+00, "nan", "nan", "nan", -7.905553451645665e-01, "nan", "nan", "nan", "nan", -6.807141846530712e-01, "nan", "nan", "nan", "nan", -1.225222916589731e-01, "nan", "nan", "nan", "nan", "nan", -2.320445467581101e+00, -2.319574134818585e+00, "nan", "nan", "nan", -1.639583646902407e-01, "nan", -1.855400002278164e-03, "nan", "nan", -1.746858554191961e-03, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", -7.343617675846023e-01, -7.064473476551997e-01, "nan", -7.155218530949122e-01, "nan", "nan", "nan", -7.193195250473812e-01, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", -6.269044577110882e-01, "nan", "nan", "nan", "nan", "nan", "nan", -3.257374654388743e-01, "nan", "nan", "nan", -5.104093121734217e-01, "nan", "nan", "nan", "nan", "nan", -6.637724383010750e-01, "nan", -4.204345267290851e-02, -6.391656714049387e-02, "nan", -4.495827813858508e-01, "nan", "nan", "nan", "nan", "nan", "nan", -7.292964325643722e-03, "nan", "nan", "nan", -1.313484009144930e-03, "nan", -1.010319389407169e-01, "nan", "nan", -1.685915081974470e-03, "nan"]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_r2scanl_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scanl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.191421528382513e-08, 0.000000000000000e+00, -2.191437380389892e-08, -2.191451001777310e-08, 0.000000000000000e+00, -2.191458794668551e-08, -2.191462501715337e-08, 0.000000000000000e+00, -2.191498493203810e-08, -2.191131140249702e-08, 0.000000000000000e+00, -2.191075454629356e-08, -2.191443275390890e-08, 0.000000000000000e+00, "nan", -2.191443275390890e-08, 0.000000000000000e+00, "nan", -2.157344064553373e-05, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", -2.156921587637938e-05, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 9.711448924031586e-04, "nan", 0.000000000000000e+00, "nan", 1.617625503556704e-01, 0.000000000000000e+00, 1.431493020659071e-01, 1.568384512592119e-01, 0.000000000000000e+00, 1.361382302456927e-01, 4.178934576382251e-04, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 8.828249840258195e-01, 2.740099863852577e+02, 0.000000000000000e+00, "nan", 2.624160468032531e+02, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", 6.714960964449565e+02, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 1.465276334855917e+03, 3.150546600647589e+02, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", -7.584531853031242e-06, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, -7.577143289042600e-06, "nan", 0.000000000000000e+00, 1.087959678438167e-05, "nan", 0.000000000000000e+00, 1.057187040156360e-05, "nan", 0.000000000000000e+00, "nan", 1.086914549411478e-05, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", 1.049533199257137e-05, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", -8.769392537803756e-03, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, -6.054629222837059e-02, "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", 7.712105409936606e-01, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", -4.775240530874516e-04, 0.000000000000000e+00, -4.782807332654980e-04, "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 6.202898277542108e-01, "nan", 0.000000000000000e+00, 1.410950364498668e+03, "nan", 0.000000000000000e+00, "nan", 3.064073311044107e+03, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, -4.537554081495460e-02, -5.552899462893766e-02, 0.000000000000000e+00, "nan", -5.286084417781208e-02, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", -5.144000090218578e-02, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", -5.360699231841623e-02, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 5.734386249896763e-02, "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 1.067904813712264e-02, "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 2.831629868868228e-03, "nan", 0.000000000000000e+00, 8.495318376174655e+00, 5.420262818765807e+00, 0.000000000000000e+00, "nan", -8.802658145551326e-02, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 1.330172554998670e+02, "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 4.414548751120981e+03, "nan", 0.000000000000000e+00, 2.288170793212527e+00, "nan", 0.000000000000000e+00, "nan", 3.358665598092351e+03, 0.000000000000000e+00, "nan"]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_r2scanl_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scanl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [3.035039826944285e-04, 3.035048598233487e-04, 3.035091667856118e-04, 3.035086266419484e-04, 3.035173239407876e-04, 3.035226792861621e-04, 3.034589137376809e-04, 3.034481587708047e-04, 3.035074987135830e-04, "nan", 3.035074987135830e-04, "nan", 1.357061917984071e-03, "nan", "nan", "nan", "nan", "nan", 0.000000000000000e+00, "nan", 1.356232045430803e-03, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.820968046043829e-05, "nan", "nan", "nan", "nan", "nan", "nan", 0.000000000000000e+00, 5.261894681761425e-04, "nan", 5.675384705317837e-04, 0.000000000000000e+00, "nan", "nan", 2.591461176403671e-04, "nan", "nan", 4.203746194656272e-04, 5.038171595387873e-04, "nan", "nan", "nan", 1.416179139721216e-03, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 1.415010836445165e-03, "nan", 0.000000000000000e+00, "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", "nan", 0.000000000000000e+00, "nan", "nan", "nan", -4.989278716693938e-62, "nan", "nan", "nan", "nan", 1.382466685850106e-02, "nan", "nan", "nan", "nan", -5.758367676660441e-64, "nan", "nan", "nan", "nan", "nan", 4.180651338175769e-03, 4.182536348235239e-03, "nan", "nan", "nan", 0.000000000000000e+00, "nan", 1.402428682076267e-04, "nan", "nan", 6.137932063489822e-04, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 1.324153264224058e-02, 1.371986501210481e-02, "nan", 1.365712008892808e-02, "nan", "nan", "nan", 1.360361347881650e-02, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 1.130491369855338e-02, "nan", "nan", "nan", "nan", "nan", "nan", 0.000000000000000e+00, "nan", "nan", "nan", 0.000000000000000e+00, "nan", "nan", "nan", "nan", "nan", 1.109108429832913e-04, "nan", 4.284042048069582e-65, 0.000000000000000e+00, "nan", 5.420245688111678e-03, "nan", "nan", "nan", "nan", "nan", "nan", 6.747951672591222e-04, "nan", "nan", "nan", 1.116260853819486e-04, "nan", 0.000000000000000e+00, "nan", "nan", 5.840838728497982e-04, "nan"]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_r2scanl_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scanl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
