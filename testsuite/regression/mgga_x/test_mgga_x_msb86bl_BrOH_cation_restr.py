
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_msb86bl_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_msb86bl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.198368505633719e+01, -2.198373070983848e+01, -2.198398308016581e+01, -2.198330313272746e+01, -2.198365237966918e+01, -2.198365237966918e+01, -3.378370824827512e+00, -3.378370485390844e+00, -3.378570688650581e+00, -3.380027254028906e+00, -3.378998363383552e+00, -3.378998363383552e+00, -6.521838584963144e-01, -6.519009990358142e-01, -6.476941134320320e-01, -6.562344734491093e-01, -6.533961082512686e-01, -6.533961082512686e-01, -2.068570740661510e-01, -2.073372364604811e-01, -7.304747850021996e-01, -1.727242966384618e-01, -1.837013758124530e-01, -1.837013758124530e-01, -2.053369357007187e-02, -2.120452687060155e-02, -7.521258011087871e-02, -1.409779565811374e-02, -1.622113957295022e-02, -1.622113957295021e-02, -5.323465909460218e+00, -5.323660161517231e+00, -5.323482442104202e+00, -5.323653803364874e+00, -5.323560149971454e+00, -5.323560149971454e+00, -2.106840486958249e+00, -2.124182691463284e+00, -2.107553062567528e+00, -2.122578624274087e+00, -2.116338016561853e+00, -2.116338016561853e+00, -5.932812536725695e-01, -6.311114831085936e-01, -5.321053762744917e-01, -5.364354012175421e-01, -6.030246858346324e-01, -6.030246858346324e-01, -1.432963712048086e-01, -2.201888222953948e-01, -1.358840635983180e-01, -1.827468002933076e+00, -1.522757626992735e-01, -1.522757626992735e-01, -1.154285446295680e-02, -1.370510210854592e-02, -9.883792686893393e-03, -1.032603494646769e-01, -1.192507126527456e-02, -1.192507126527457e-02, -5.930189759432476e-01, -5.926897287500720e-01, -5.928076874197246e-01, -5.928990394338587e-01, -5.928527013570434e-01, -5.928527013570434e-01, -5.754466521732013e-01, -5.217300281064424e-01, -5.363892281948620e-01, -5.512758984396408e-01, -5.434396646188012e-01, -5.434396646188012e-01, -6.544837298785300e-01, -2.655755681558161e-01, -2.979621108946756e-01, -3.538216225495037e-01, -3.249437900738308e-01, -3.249437900738308e-01, -4.725300216047856e-01, -7.341379644124879e-02, -9.112007215107207e-02, -3.389032581095477e-01, -1.181539747358997e-01, -1.181539747358997e-01, -2.663222673911083e-02, -4.922801420805235e-03, -8.613354017796004e-03, -1.139670386832305e-01, -1.109919074044481e-02, -1.109919074044480e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_msb86bl_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_msb86bl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.774375539379003e+01, -2.774386152495747e+01, -2.774438034125555e+01, -2.774280420194611e+01, -2.774362333363318e+01, -2.774362333363318e+01, -4.192679082391453e+00, -4.192897818384631e+00, -4.198930799665204e+00, -4.198233282458207e+00, -4.197295472762079e+00, -4.197295472762079e+00, -7.938815336764306e-01, -7.919665030610598e-01, -7.457097129690745e-01, -7.586604825392307e-01, -7.564643537406913e-01, -7.564643537406913e-01, -1.464764021435488e-01, -1.477813657827280e-01, -8.627592971860264e-01, -1.326573154592267e-01, -1.491381754115093e-01, -1.491381754115093e-01, -1.933050494035156e-02, -2.001086759278845e-02, -7.163350259977103e-02, -1.298309901892373e-02, -1.510557958977654e-02, -1.510557958977655e-02, -6.835551751892696e+00, -6.837794677107855e+00, -6.835688281482707e+00, -6.837666665550572e+00, -6.836671804791919e+00, -6.836671804791919e+00, -2.215110890976679e+00, -2.267847695577679e+00, -2.205806556940523e+00, -2.257834339432785e+00, -2.249528645861597e+00, -2.249528645861597e+00, -7.424131819129509e-01, -8.566467846643918e-01, -6.736461510819365e-01, -7.350918313278826e-01, -7.605379546143344e-01, -7.605379546143344e-01, -1.161547202851883e-01, -1.325781539077669e-01, -1.120112864444469e-01, -2.560740515616046e+00, -1.108772606274033e-01, -1.108772606274032e-01, -1.055345082960861e-02, -1.263020499607657e-02, -9.175942534218108e-03, -9.176727789958079e-02, -1.106888420247103e-02, -1.106888420247104e-02, -7.862409951531121e-01, -7.768097455781898e-01, -7.801083888865468e-01, -7.828482103751310e-01, -7.814757824593800e-01, -7.814757824593800e-01, -7.673555488483702e-01, -6.148936813921962e-01, -6.568291119900486e-01, -7.005268336786034e-01, -6.778433499936758e-01, -6.778433499936758e-01, -9.015214285316526e-01, -1.901090521965833e-01, -2.403922588270808e-01, -4.013320053160581e-01, -3.128700766696404e-01, -3.128700766696403e-01, -5.333035995978258e-01, -7.018179158552255e-02, -8.473720999171730e-02, -4.045207377563073e-01, -9.783508568127297e-02, -9.783508568127310e-02, -2.533763994295424e-02, -4.387450304557896e-03, -7.830119600104228e-03, -9.396653171872692e-02, -1.029464339534355e-02, -1.029464339534356e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_msb86bl_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_msb86bl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.577804415205969e-09, -4.577714934979368e-09, -4.576826086994025e-09, -4.578137611896869e-09, -4.577520664497372e-09, -4.577520664497372e-09, -8.211563788642770e-06, -8.217987723414263e-06, -8.399692729671637e-06, -8.423506179279404e-06, -8.381809926115597e-06, -8.381809926115597e-06, -6.259722973508696e-03, -6.269445819284428e-03, -6.497981258051942e-03, -6.552098264172286e-03, -6.539618312166943e-03, -6.539618312166943e-03, -1.748184248339849e+00, -1.777260589439891e+00, -2.668209653430451e-03, -1.635605265694629e+00, -1.324719347843452e+00, -1.324719347843452e+00, -1.189292685585921e+03, -1.076351822821531e+03, -1.719026914287119e+01, -4.247545177190221e+03, -2.707998307611951e+03, -2.707998307611957e+03, -1.072656915815868e-06, -1.072013920878756e-06, -1.072260858977127e-06, -1.071709712873387e-06, -1.072519007324983e-06, -1.072519007324983e-06, -1.245859282657486e-04, -1.102975880591041e-04, -1.181200873189970e-04, -1.042070446228136e-04, -1.195351593082875e-04, -1.195351593082875e-04, -2.117253028019450e-02, -1.565334478800335e-02, -2.340287651887420e-02, -1.958024714782727e-02, -1.927792878524343e-02, -1.927792878524343e-02, -2.643500027164538e+00, -1.284380085789969e+00, -3.101999722822062e+00, -1.711975522462598e-04, -3.176827198197199e+00, -3.176827198197202e+00, -8.830016347449573e+03, -4.787497393217751e+03, -1.903674379066940e+04, -7.334606926000816e+00, -8.965772049466816e+03, -8.965772049466801e+03, -8.736995470184521e-03, -8.793814492329195e-03, -8.774152858927005e-03, -8.758268848895709e-03, -8.767362772550824e-03, -8.767362772550824e-03, -1.214021150118057e-02, -1.743773541067806e-02, -1.604328853878844e-02, -1.455119988919592e-02, -1.564924251991399e-02, -1.564924251991400e-02, -1.387564467801474e-02, -6.040910712060044e-01, -4.029684133794989e-01, -1.380947660767787e-01, -2.634294790711760e-01, -2.634294790711761e-01, -5.427245112633056e-02, -1.808287026444465e+01, -9.682908455426857e+00, -1.975534543924012e-01, -5.461435299207914e+00, -5.461435299207906e+00, -4.805292989124154e+02, -2.140576057607925e+05, -2.704160756678412e+04, -6.738074006582894e+00, -1.185762604510603e+04, -1.185762604510605e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_msb86bl_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_msb86bl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.408768703910573e-04, 1.408695833891779e-04, 1.407654250119909e-04, 1.408707204257475e-04, 1.408258242660017e-04, 1.408258242660017e-04, 1.513239882811339e-03, 1.517549827318059e-03, 1.640172746230707e-03, 1.660472075930754e-03, 1.628708039139473e-03, 1.628708039139473e-03, 9.525612638334699e-03, 9.480341696888512e-03, 8.532875508394809e-03, 9.853596576461251e-03, 9.500034645140052e-03, 9.500034645140052e-03, 9.727361548895898e-02, 1.053070214077141e-01, 1.318682024146143e-03, 1.426118256352880e-02, 1.945637988410409e-02, 1.945637988410405e-02, 5.800095312811373e-07, 1.444952042293779e-07, 1.100150462851129e-05, 4.154737453394175e-12, 1.445837994020920e-10, 1.445837994119431e-10, 3.991172299064413e-05, 3.941588549660988e-05, 3.907866543895565e-05, 3.867734722312798e-05, 4.007591247772077e-05, 4.007591247772077e-05, 9.273232969165541e-03, 7.915959727281433e-03, 8.333654474704747e-03, 6.988025942811689e-03, 8.962120559853232e-03, 8.962120559853232e-03, 4.631647880382161e-02, 4.352874646390771e-02, 3.447901816653152e-02, 3.024021263788466e-02, 4.363999011982476e-02, 4.363999011982476e-02, 1.945885859554833e-03, 6.799251145359585e-02, 1.098271940296269e-03, 1.170963475855789e-02, 2.162764495714621e-02, 2.162764495714627e-02, 1.390327579628675e-14, 3.449539340796335e-13, 1.762997058692617e-11, 1.301981345027657e-04, 2.336941130498618e-12, 2.336941125342642e-12, 6.746698805955870e-03, 6.574242074896763e-03, 6.635984030172762e-03, 6.687521702192132e-03, 6.665339799129663e-03, 6.665339799129663e-03, 1.395257837642365e-02, 1.010917052937958e-02, 1.199949677636762e-02, 1.330031626156883e-02, 1.344955167336644e-02, 1.344955167336646e-02, 4.537867096483846e-02, 6.551506765531914e-02, 8.051271972237102e-02, 5.627146458873207e-02, 7.943990063483952e-02, 7.943990063483955e-02, 5.427323144643374e-02, 6.173250762585546e-05, 3.246932720606987e-05, 8.028289529088679e-02, 2.013288592962609e-03, 2.013288592962589e-03, 7.389933290913140e-11, 7.396316248816605e-18, 3.736769109994875e-12, 5.169178742113924e-03, 6.027530019160531e-12, 6.027530015092960e-12])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
