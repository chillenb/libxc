
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_msb86bl_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_msb86bl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.043159215837780e+01, -2.043169338122512e+01, -2.043214318040698e+01, -2.043064016155460e+01, -2.043142768306846e+01, -2.043142768306846e+01, -3.200276317788318e+00, -3.200328981272868e+00, -3.201761978360254e+00, -3.201475553540776e+00, -3.201173796238405e+00, -3.757246819934166e+00, -5.875606858625357e-01, -7.731823462438350e-01, -7.655777625790782e-01, -7.657559747512340e-01, -7.658017797681007e-01, -7.658017797681007e-01, -2.110596669068584e-01, -2.127035201256200e-01, -6.733352504665946e-01, -1.859230628717194e-01, -1.947893970733413e-01, -1.947893970733414e-01, -2.056057017215566e-02, -2.125400289946720e-02, -7.656453292990650e-02, -1.435152238855261e-02, -1.639265998345917e-02, -1.639265998345917e-02, -5.324105224912732e+00, -5.324291696730003e+00, -5.324108330774894e+00, -5.095551143103681e+00, -5.324202226393738e+00, -5.324202226393738e+00, -1.776181605999331e+00, -1.794510418350592e+00, -1.762483732710533e+00, -1.778789164164561e+00, -1.792986012343865e+00, -2.154350370966907e+00, -6.173311065415592e-01, -6.562217826519576e-01, -5.817165820979588e-01, -5.934003209733419e-01, -6.245071855422015e-01, -5.544718108874773e-01, -7.787540372794136e-02, -2.275344471173168e-01, -7.203898029202939e-02, -2.005713492134584e+00, -1.588804017473883e-01, -1.588804017473882e-01, -2.291115965522301e-03, -1.426565742823507e-02, -1.008450657801708e-02, -4.844351211495317e-02, -2.674032236280583e-03, -1.234827476747690e-02, -5.945753654885475e-01, -5.941865490662113e-01, -5.863027115146664e-01, -5.944346195860684e-01, -5.943803551123202e-01, -5.943803551123202e-01, -5.788654540494560e-01, -5.234506543278169e-01, -5.386927120503514e-01, -5.541172355426182e-01, -5.461960686244862e-01, -4.974256021026187e-01, -6.916700733458921e-01, -1.887946690934800e-01, -3.082609326797102e-01, -3.150265473498901e-01, -3.404342042406602e-01, -3.404342042406602e-01, -4.181516043589343e-01, -7.411060606938946e-02, -9.331070260515884e-02, -3.604824452411979e-01, -6.169380332467457e-02, -1.226755149772535e-01, -2.769363967376323e-02, -5.778478319439850e-03, -8.699650638205146e-03, -1.168726553522713e-01, -1.138767314365508e-02, -1.138767314365507e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_msb86bl_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_msb86bl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.962087301495432e+01, -2.962098529706148e+01, -2.962149791912656e+01, -2.961982862032001e+01, -2.962070164042956e+01, -2.962070164042956e+01, -4.558315762362035e+00, -4.558171224138015e+00, -4.554347008468739e+00, -4.556327028303997e+00, -4.555642704255328e+00, -4.354948844555366e+00, -8.306337685195115e-01, -8.052221153052769e-01, -7.781320782691722e-01, -7.871521909407148e-01, -7.851738205314076e-01, -7.851738205314076e-01, -2.044498682360521e-01, -2.078480720781276e-01, -9.186558268388633e-01, -1.614021478637696e-01, -1.750585710940949e-01, -1.750585710940953e-01, -1.935727543712824e-02, -2.005671385710935e-02, -7.358292372113318e-02, -1.318861273743490e-02, -1.524666483837211e-02, -1.524666483837211e-02, -6.836420874356632e+00, -6.838639817553840e+00, -6.836538902949345e+00, -7.181204368868062e+00, -6.837537576275587e+00, -6.837537576275587e+00, -2.587677677683658e+00, -2.609157280572910e+00, -2.569809056511352e+00, -2.591028109571758e+00, -2.607317852478415e+00, -2.444773953948071e+00, -7.507459840955388e-01, -8.315942472340078e-01, -6.842675312009259e-01, -7.225189707971732e-01, -7.657904645323375e-01, -7.638958215850085e-01, -1.039162099001542e-01, -2.053339421343476e-01, -9.610950096653098e-02, -2.471249219651056e+00, -1.367873944775356e-01, -1.367873944775358e-01, -3.054821289390656e-03, -1.308293699618070e-02, -9.339382208819136e-03, -6.460125059975161e-02, -3.565376332449835e-03, -1.141233383663333e-02, -7.845983919402851e-01, -7.762100077747874e-01, -7.916944098903236e-01, -7.815841368217730e-01, -7.803634829634083e-01, -7.803634829634083e-01, -7.628015691813452e-01, -6.245810688749379e-01, -6.638167155027089e-01, -7.032726865863121e-01, -6.830722381178499e-01, -7.199750353340859e-01, -8.675131583495146e-01, -2.579730339475715e-01, -3.142732438483928e-01, -4.592240513934939e-01, -3.680925229038234e-01, -3.680925229038233e-01, -5.901790043360290e-01, -7.135107522800187e-02, -8.830917686208170e-02, -4.211076915934734e-01, -8.230386335364430e-02, -1.083709136352440e-01, -2.622941018993066e-02, -5.072628890686831e-03, -7.899741624559009e-03, -1.038020154442691e-01, -1.052900588390904e-02, -1.052900588388454e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_msb86bl_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_msb86bl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.334237768482792e-08, -1.334237796855073e-08, -1.334227289332843e-08, -1.334227920820004e-08, -1.334229184367794e-08, -1.334229184367794e-08, -9.916607215459751e-06, -9.914780061252038e-06, -9.864729667735422e-06, -9.881650922347501e-06, -9.883962284686942e-06, -4.630144569371410e-06, -6.159164780562508e-03, -2.808664528113605e-03, -2.975769680156301e-03, -2.948069921872005e-03, -2.953056003906488e-03, -2.953056003906488e-03, -5.333091867716779e-01, -5.138629428357481e-01, -3.012177256430930e-03, -9.324000927047291e-01, -7.695942782956424e-01, -7.695942782956344e-01, -1.180607955303982e+03, -1.062522388916931e+03, -1.526928271932706e+01, -3.872954877848284e+03, -2.560463500164736e+03, -2.560463500164736e+03, -1.054544226841500e-06, -1.054136063491300e-06, -1.054526756683056e-06, -3.672530330360852e-06, -1.054336819681884e-06, -1.054336819681884e-06, -1.033733350427431e-04, -1.007933794284219e-04, -1.049744471803465e-04, -1.029805407638318e-04, -1.010596807501738e-04, -4.357361911721460e-05, -6.107505582188593e-03, -4.620780818096575e-03, -7.961845634861128e-03, -7.146731529843795e-03, -5.791482613318728e-03, -1.093983051965165e-02, -1.585132436672633e+01, -4.125560661659042e-01, -2.164102249523462e+01, -5.421628603439902e-05, -1.718913790607982e+00, -1.718913790607967e+00, -2.113652924816229e+07, -3.891745824647834e+03, -1.712075965919540e+04, -1.057680724317983e+02, -1.139083102568587e+07, -7.462714332969545e+03, -6.622785459583402e-03, -6.698181041276562e-03, -1.488518422657736e-02, -6.649769854029326e-03, -6.660647324891298e-03, -6.660647324891298e-03, -7.380432549566360e-03, -1.200245075276951e-02, -1.041816471190776e-02, -9.077168006595191e-03, -9.735945062612838e-03, -3.155352045983133e-02, -3.776720035005093e-03, -4.900776408751434e-01, -1.129531969895379e-01, -1.034718584645934e-01, -7.260498757336603e-02, -7.260498757336616e-02, -3.311172971680709e-02, -1.689532578641556e+01, -8.268245606868312e+00, -5.429702407687326e-02, -4.023038908113767e+01, -4.175001632195263e+00, -3.855020912873494e+02, -9.992308711276563e+04, -2.571908451004913e+04, -4.945410522251041e+00, -1.036062901670211e+04, -1.036062901684750e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_msb86bl_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_msb86bl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.394736310590439e-03, 1.394758466304912e-03, 1.394845223774248e-03, 1.394517326636196e-03, 1.394690929684012e-03, 1.394690929684012e-03, 2.189917265900791e-03, 2.188866432661423e-03, 2.160295546645799e-03, 2.171838235242254e-03, 2.170838698841083e-03, -9.904591627864074e-18, 4.506777443006785e-03, -4.955449341390740e-17, -2.246323577158475e-17, 1.163469610338820e-18, -2.754807960891642e-17, -2.754807960891642e-17, 1.161341922218184e-16, -1.062200123812461e-16, 8.469776649747997e-04, 7.313007161372057e-16, 4.624113194275768e-16, 2.681005933173474e-17, 1.198514983119262e-14, -1.760218387572466e-15, 1.234482182965293e-15, 2.987083703422711e-14, -8.646416461390208e-15, -8.646416461390208e-15, -1.105749458653222e-18, 1.266791396553461e-19, -6.346158467100139e-20, 5.617308970477930e-03, -1.011197935653896e-18, -1.011197935653896e-18, 4.228537024985902e-03, 4.285624568779972e-03, 4.143895207118110e-03, 4.236836262258053e-03, 4.285159157645561e-03, 5.240854150469586e-19, 1.565975443389005e-17, 1.286504491103414e-17, -3.233155012309399e-17, 2.518041551651088e-17, 1.792002247669884e-17, 1.146237256921027e-02, 4.495048046615739e-05, 2.482187548655151e-16, 3.191458125582969e-05, -1.582728031986534e-18, 5.112969734106590e-16, 2.183302742737229e-16, 1.177638229978308e-12, -1.435388699494920e-14, 1.929596855151975e-14, 6.160662408206065e-06, 2.013263244687908e-11, 7.049676184210838e-14, -1.069079894726777e-18, 4.887359207314709e-18, 2.573267424547872e-02, -1.007903080283476e-20, 1.119111888765104e-18, 1.119111888765104e-18, -2.458610040395045e-18, -3.544236520037132e-18, 6.580234440529204e-18, -9.069406475250735e-18, 8.526870740406219e-18, 4.540560395403632e-02, 8.940638080776475e-20, 3.341306724580884e-03, 1.233394398506783e-16, 2.344536119519929e-02, -1.490803894323876e-17, 2.715272387480217e-17, 1.512446786764184e-02, 2.998553847723814e-15, -2.420665050320534e-15, 2.365400725173839e-17, 3.303673561109864e-05, 1.024006693350976e-15, -1.748768230519254e-14, 2.003952527541988e-14, -2.533702895342215e-15, 5.714267416000219e-16, -1.422889116143959e-14, 4.212119660966665e-14])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
