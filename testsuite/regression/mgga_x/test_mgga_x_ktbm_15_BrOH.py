
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_15_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_15", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.403592266841846e+01, -2.403598154641779e+01, -2.403638771058284e+01, -2.403542838313504e+01, -2.403595242024887e+01, -2.403595242024887e+01, -3.441870167472295e+00, -3.441950401562838e+00, -3.444640088412819e+00, -3.445996360448987e+00, -3.441895179062172e+00, -3.441895179062172e+00, -6.282258489520161e-01, -6.278258376860563e-01, -6.182188531013258e-01, -6.262522400887529e-01, -6.280830037042404e-01, -6.280830037042404e-01, -1.906348264637581e-01, -1.929851921743621e-01, -7.305945675713207e-01, -1.300051296843385e-01, -1.912797211695371e-01, -1.912797211695371e-01, -1.010561154361317e-02, -1.058244561686505e-02, -4.286957622856893e-02, -4.794157850245919e-03, -1.047404868682291e-02, -1.047404868682291e-02, -5.874826025933707e+00, -5.875345582989833e+00, -5.874923493345340e+00, -5.875325037374419e+00, -5.875033101627356e+00, -5.875033101627356e+00, -2.121252618674885e+00, -2.148287362992734e+00, -2.119751595376894e+00, -2.141360861600383e+00, -2.141294021113506e+00, -2.141294021113506e+00, -6.082905617836369e-01, -6.516326466429909e-01, -5.573146835805265e-01, -5.735782453590299e-01, -6.411828212547899e-01, -6.411828212547899e-01, -9.620746933282309e-02, -1.888626809374674e-01, -9.500614710137531e-02, -1.895759558847613e+00, -1.122257171285325e-01, -1.122257171285325e-01, -4.644262663494146e-03, -5.294081289292727e-03, -3.986886070863228e-03, -5.936518710150209e-02, -4.815502655837039e-03, -4.815502655837039e-03, -6.595927430485384e-01, -6.595232591590726e-01, -6.595921648379860e-01, -6.596098434742870e-01, -6.596011695369655e-01, -6.596011695369655e-01, -6.316845630178232e-01, -5.647320058869517e-01, -5.875868245174929e-01, -6.059209093032271e-01, -5.963308828537948e-01, -5.963308828537947e-01, -6.710953238384395e-01, -2.431627905171776e-01, -2.890707406430874e-01, -3.608830270284417e-01, -3.267182312489109e-01, -3.267182312489108e-01, -4.828196718157424e-01, -3.980367565719634e-02, -5.371561159428284e-02, -3.392030611483993e-01, -7.820113456558983e-02, -7.820113456558982e-02, -1.171562002829622e-02, -1.444816610663201e-03, -2.770236072318886e-03, -7.454295596199084e-02, -4.091385618439564e-03, -4.091385618439558e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_15_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_15", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.900253590058557e+01, -2.900264642973350e+01, -2.900307413715078e+01, -2.900126104972529e+01, -2.900259479423775e+01, -2.900259479423775e+01, -4.598958964609803e+00, -4.599091742009158e+00, -4.603235579212656e+00, -4.601925482353424e+00, -4.599018098153143e+00, -4.599018098153143e+00, -8.009904680102329e-01, -8.001015952251487e-01, -7.802461619272341e-01, -7.915509107008137e-01, -8.006737991777785e-01, -8.006737991777785e-01, -2.339302000012515e-01, -2.368362160860571e-01, -9.133491649904610e-01, -1.660031742874385e-01, -2.347585916826157e-01, -2.347585916826157e-01, -1.294390931207908e-02, -1.356276885127489e-02, -5.539862162056153e-02, -6.316507614320858e-03, -1.341850052372319e-02, -1.341850052372318e-02, -7.174288087313148e+00, -7.178657022215731e+00, -7.174707999371120e+00, -7.178106517417008e+00, -7.176563061430008e+00, -7.176563061430008e+00, -2.545522721929713e+00, -2.565224908018690e+00, -2.537568062553586e+00, -2.552867797837308e+00, -2.569805789093779e+00, -2.569805789093779e+00, -7.928497568542144e-01, -9.142031351945848e-01, -7.424729594454041e-01, -8.139220219994601e-01, -8.302101499063940e-01, -8.302101499063940e-01, -1.234944559276279e-01, -2.345868150380490e-01, -1.218571310886560e-01, -2.745970210735551e+00, -1.424472359855697e-01, -1.424472359855697e-01, -6.046647995808714e-03, -6.940412260362855e-03, -5.162341814992590e-03, -7.751451175816278e-02, -6.346162869061602e-03, -6.346162869061596e-03, -8.793516774168115e-01, -8.587906677826470e-01, -8.660109694693839e-01, -8.717092446759884e-01, -8.688483696920032e-01, -8.688483696920032e-01, -8.556752357059614e-01, -6.600100916210226e-01, -7.041218704844868e-01, -7.558766730715986e-01, -7.287509040694220e-01, -7.287509040694218e-01, -9.533955296374971e-01, -2.978618602827018e-01, -3.530138858186609e-01, -4.560875921975135e-01, -4.006373279137330e-01, -4.006373279137327e-01, -5.983788444362463e-01, -5.118864728439734e-02, -6.948015306943878e-02, -4.389318436311201e-01, -1.003432281606512e-01, -1.003432281606512e-01, -1.541702767219808e-02, -1.915099444209715e-03, -3.575443161087121e-03, -9.573495174225058e-02, -5.397098217717841e-03, -5.397098217717830e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_15_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_15", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.942020135610512e-08, -1.942012027409554e-08, -1.941969682503771e-08, -1.942104339673067e-08, -1.942015888503556e-08, -1.942015888503556e-08, -1.495025988865346e-05, -1.495317944695946e-05, -1.503960274050441e-05, -1.501165318413979e-05, -1.495071976811919e-05, -1.495071976811919e-05, -4.348858957151744e-03, -4.333910688844657e-03, -3.967507652551405e-03, -4.282910064056578e-03, -4.344086667719464e-03, -4.344086667719464e-03, -7.456627524112780e-01, -7.527187214993032e-01, -1.005749036446689e-03, -3.350500716495441e-01, -7.466412770578258e-01, -7.466412770578258e-01, -6.369251905032036e+01, -5.734614572118890e+01, -2.025206969528189e+00, -6.841044205164395e+01, -6.028688798100956e+01, -6.028688798100955e+01, -5.872294610936465e-06, -5.873155237464195e-06, -5.872461229213009e-06, -5.873124725227848e-06, -5.872637203748735e-06, -5.872637203748735e-06, -1.389548685306843e-04, -1.410138474719059e-04, -1.386506362498263e-04, -1.404395964830539e-04, -1.407008469015149e-04, -1.407008469015149e-04, -2.699194797800907e-02, -2.335355193521526e-02, -2.791610565344700e-02, -2.858750503630397e-02, -2.556041419369954e-02, -2.556041419369954e-02, -4.982602024198922e-01, -3.272723650683513e-01, -5.696223196129188e-01, -2.328920896251192e-04, -6.326221477114342e-01, -6.326221477114342e-01, -1.511947523959007e+02, -8.238639194751116e+01, -4.295971596135904e+02, -7.097952201687002e-01, -8.325816904684172e+01, -8.325816904684167e+01, -3.533176003096989e-02, -3.551686870081232e-02, -3.546652502044153e-02, -3.541591965703060e-02, -3.544232443118297e-02, -3.544232443118297e-02, -3.950978437353631e-02, -4.985661842923453e-02, -4.852723437621202e-02, -4.588382668788626e-02, -4.732582734410724e-02, -4.732582734410721e-02, -1.807792779282298e-02, -2.513857700085540e-01, -1.983668515324953e-01, -1.286397040923418e-01, -1.743721248006996e-01, -1.743721248006996e-01, -5.877704868521708e-02, -2.452601911970511e+00, -1.209369468040694e+00, -1.931898589010689e-01, -9.616873255985292e-01, -9.616873255985291e-01, -1.311190945347152e+01, -5.023960099933958e+02, -7.107811244287908e+02, -1.137500410650660e+00, -1.277265319288616e+02, -1.277265319288619e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_15_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_15", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_15_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_15", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.711388789229230e-03, 2.711387158188867e-03, 2.711406810364904e-03, 2.711435930322960e-03, 2.711387665938288e-03, 2.711387665938288e-03, 7.106153236800895e-03, 7.108247425783626e-03, 7.172850242004794e-03, 7.172961111573694e-03, 7.106535810288107e-03, 7.106535810288107e-03, 8.526750369996363e-03, 8.498784835170090e-03, 8.098863414387635e-03, 9.867354577097556e-03, 8.519015692719359e-03, 8.519015692719359e-03, 7.973341823055030e-02, 8.224154808988170e-02, -3.788768475920841e-04, 8.910514081622257e-03, 8.022941216848536e-02, 8.022941216848536e-02, 1.052034332951840e-03, 1.083242051792236e-03, 2.376500017304016e-03, 8.788105846707834e-05, 1.107351496543606e-03, 1.107351496543587e-03, 1.139196456855651e-02, 1.138904228915746e-02, 1.139188106403882e-02, 1.138959555606990e-02, 1.139018564741878e-02, 1.139018564741878e-02, 1.767484950817316e-02, 1.847384711716368e-02, 1.770182384194193e-02, 1.835828849826254e-02, 1.817152908552986e-02, 1.817152908552986e-02, 7.051029375050795e-02, 7.122477558047244e-02, 5.718073903006672e-02, 6.197662520897330e-02, 7.580549664027685e-02, 7.580549664027685e-02, 6.469440009978892e-03, 3.671731704159286e-02, 7.133088038742996e-03, 1.819881814933141e-02, 1.399996159623948e-02, 1.399996159623948e-02, 2.091920105377005e-04, 1.545915267504270e-04, 3.979516056706250e-04, 1.801339840602876e-03, 1.078770857138814e-04, 1.078770857138786e-04, 9.368757404759580e-02, 9.543886363648613e-02, 9.484361094857295e-02, 9.435833084009340e-02, 9.460281145540196e-02, 9.460281145540196e-02, 9.462763363641198e-02, 1.028412118652946e-01, 1.048535091815898e-01, 1.027841641824238e-01, 1.039446517907854e-01, 1.039446517907853e-01, 6.173899682545345e-02, 5.858958735979748e-02, 7.083687438562122e-02, 7.635102074869297e-02, 8.291512975748769e-02, 8.291512975748765e-02, 8.194181335374433e-02, 2.419759742944959e-03, 2.735737266058570e-03, 9.161779112143854e-02, 6.953126193205351e-03, 6.953126193205263e-03, 2.500370068725967e-04, 1.550954066574083e-05, 2.273689654294920e-04, 7.023729922963329e-03, 9.966066153987537e-05, 9.966066153987768e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
