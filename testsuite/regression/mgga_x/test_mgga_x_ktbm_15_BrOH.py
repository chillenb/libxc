
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_15_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_15", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.133276048634682e+01, -2.133286434147552e+01, -2.133336098204839e+01, -2.133166502539696e+01, -2.133281490863948e+01, -2.133281490863948e+01, -3.110421893304186e+00, -3.110487707744315e+00, -3.112588953866890e+00, -3.112021542043911e+00, -3.110454956149462e+00, -3.921325176219600e+00, -5.834647807485034e-01, -7.213257883534852e-01, -6.959437736504808e-01, -7.041513898950480e-01, -7.219593931788350e-01, -7.219593931788350e-01, -1.956258913384898e-01, -1.987956549104437e-01, -7.119888332894482e-01, -1.346905670077196e-01, -1.965665014946301e-01, -1.965665014946301e-01, -1.011675132647834e-02, -1.059712083586376e-02, -4.320089679882524e-02, -4.852088929142050e-03, -1.048669330095546e-02, -1.048669330095545e-02, -5.878411536267925e+00, -5.878891982482725e+00, -5.878459467689999e+00, -5.360285235825215e+00, -5.878659835218478e+00, -5.878659835218478e+00, -1.722715583970384e+00, -1.738861045890763e+00, -1.716184395862655e+00, -1.728650819371266e+00, -1.742397518777393e+00, -2.209376004191922e+00, -6.600582696681710e-01, -7.153282746290865e-01, -6.241719156330918e-01, -6.536383116962006e-01, -6.857867442749169e-01, -5.757948004934634e-01, -9.360461046170829e-02, -1.915523970955572e-01, -9.225821106922874e-02, -2.181940906509916e+00, -1.141179438411384e-01, -1.141179438411384e-01, -4.682174255570069e-03, -5.349408726175964e-03, -4.009434369918227e-03, -5.930354267272474e-02, -4.875503902259300e-03, -4.874119540133563e-03, -6.678309126506792e-01, -6.674252224160291e-01, -6.420181193492699e-01, -6.677302323121598e-01, -6.676795725879624e-01, -6.676795725879624e-01, -6.475464990676402e-01, -5.715262317134774e-01, -5.974919380102989e-01, -6.185873130582527e-01, -6.082099903041138e-01, -5.285083995251507e-01, -7.514058312596255e-01, -2.045355085206936e-01, -2.983728031334626e-01, -3.095257007805334e-01, -3.435686719144797e-01, -3.435686719144797e-01, -4.078256769131804e-01, -3.998869860995012e-02, -5.424529718928366e-02, -3.740971077307175e-01, -7.627896689010645e-02, -7.923472930271791e-02, -1.185625153937771e-02, -1.464500814934139e-03, -2.782067451702228e-03, -7.558883328311264e-02, -4.142326147451249e-03, -4.142326147451242e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_15_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_15", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.166110278694666e+01, -3.166120380614457e+01, -3.166170881922103e+01, -3.166005591239371e+01, -3.166115557487054e+01, -3.166115557487054e+01, -4.575676655947850e+00, -4.575907260222335e+00, -4.583001384813687e+00, -4.580621676355463e+00, -4.575762436679988e+00, -4.517863938126752e+00, -7.514206008483302e-01, -8.678882238631335e-01, -8.432881933907174e-01, -8.506708746805995e-01, -8.684842753436464e-01, -8.684842753436464e-01, -2.372005575092688e-01, -2.405223874738082e-01, -8.817044483155373e-01, -1.687066656148375e-01, -2.381959352712427e-01, -2.381959352712427e-01, -1.292674362751072e-02, -1.354016746418653e-02, -5.504211490025365e-02, -6.201364770275821e-03, -1.339906537142124e-02, -1.339906537142122e-02, -7.169806388555513e+00, -7.174219086647118e+00, -7.170287613629611e+00, -7.761191246814410e+00, -7.172027252183722e+00, -7.172027252183722e+00, -2.453216697000506e+00, -2.493012122370340e+00, -2.436414153577814e+00, -2.467658459063463e+00, -2.502323723012321e+00, -2.564450315321929e+00, -7.578003355119655e-01, -8.486357867370133e-01, -7.156345139857718e-01, -7.542473269603848e-01, -7.926602928396419e-01, -8.724359937891804e-01, -1.203525343505917e-01, -2.365617711061510e-01, -1.184134272279067e-01, -2.524362325420891e+00, -1.431949359236583e-01, -1.431949359236583e-01, -6.242047873220672e-03, -6.836879174806714e-03, -5.124275983471969e-03, -7.785974273682578e-02, -6.499701346067003e-03, -6.229456770541653e-03, -8.685016418620409e-01, -8.484785163976419e-01, -8.881002809183588e-01, -8.610370721598125e-01, -8.582439612776337e-01, -8.582439612776337e-01, -8.351043842069262e-01, -6.553101847817915e-01, -6.944895571889935e-01, -7.411336726347254e-01, -7.159867696630148e-01, -7.902375514076102e-01, -8.793945404071096e-01, -2.552036336897289e-01, -3.577545052445028e-01, -4.426840633602405e-01, -4.044400494516030e-01, -4.044400494516031e-01, -6.044150454160169e-01, -5.097673701191604e-02, -6.902204297621524e-02, -4.304901608300061e-01, -9.851731061925927e-02, -1.002078995952427e-01, -1.515003356565166e-02, -1.871818662678917e-03, -3.555774067565822e-03, -9.559971569926917e-02, -5.294213568877049e-03, -5.294213568877040e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_15_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_15", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.715591081014377e-08, -1.715588152176285e-08, -1.715561546469325e-08, -1.715611181296633e-08, -1.715589631476494e-08, -1.715589631476494e-08, -1.338407875359425e-05, -1.338675166863808e-05, -1.346526931701987e-05, -1.343056473081917e-05, -1.338456605590249e-05, -1.736089683943127e-05, -3.781853415965754e-03, -5.508655375037295e-03, -5.010449715136455e-03, -5.317822844578020e-03, -5.521852720896445e-03, -5.521852720896445e-03, -7.830627972229222e-01, -7.945275106713869e-01, -9.114924865561662e-04, -4.482114603323449e-01, -7.857593665917509e-01, -7.857593665917509e-01, -6.618863785783564e+01, -6.020787892673021e+01, -2.577874216307526e+00, -1.682557139056764e+02, -6.288048046429036e+01, -6.288048046429034e+01, -5.876138830241058e-06, -5.876957647207820e-06, -5.876252378340918e-06, -5.335042240763898e-06, -5.876525651162349e-06, -5.876525651162349e-06, -1.082866440380831e-04, -1.098766706962275e-04, -1.074341515035509e-04, -1.087972585170039e-04, -1.104454277282446e-04, -1.461737744539045e-04, -2.948953707972259e-02, -2.575856835151318e-02, -3.165014499000227e-02, -3.282558317641496e-02, -2.747297192663665e-02, -2.289170987701332e-02, 6.639783782511212e-02, -3.424021940278086e-01, 5.422388508554969e-02, -2.700070551074524e-04, -7.249053135886219e-01, -7.249053135886219e-01, 2.453368811123198e+02, -1.556717261050256e+02, -5.496234054055600e+02, 7.012748255177770e-01, 2.284461176370760e+02, -2.080770314005043e+02, -3.580487712041649e-02, -3.597236476249489e-02, -3.446575959182349e-02, -3.588304269690718e-02, -3.590727534389438e-02, -3.590727534389438e-02, -4.056980000897684e-02, -5.052242774410184e-02, -4.941225001325599e-02, -4.690984720997749e-02, -4.833862707448806e-02, -4.176661224945340e-02, -2.035716695483366e-02, -1.628333272541945e-01, -2.086248754165151e-01, -1.073852658778668e-01, -1.864576181279986e-01, -1.864576181279986e-01, -4.887777543370096e-02, -2.819642405451883e+00, -1.599483495721634e+00, -2.161060788800793e-01, 2.196825576460631e-01, -1.179302223289371e+00, -3.003210382434949e+01, -2.176524094785944e+03, -8.466359339868632e+02, -1.417632808688251e+00, -3.413958954617684e+02, -3.413958954617689e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_15_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_15", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.886408104765100e-03, 1.886427872701091e-03, 1.886510431599311e-03, 1.886189322720170e-03, 1.886418544583735e-03, 1.886418544583735e-03, 3.225514598381460e-03, 3.227320589201940e-03, 3.281696010160609e-03, 3.260341353920893e-03, 3.226000545474101e-03, 1.318837659897019e-02, -2.480185011836199e-03, 3.255895444445765e-02, 2.746664343506674e-02, 2.978508694141794e-02, 3.269447688562643e-02, 3.269447688562643e-02, 9.562815167654118e-02, 1.008250647218817e-01, -2.941239733554233e-03, 1.981469594069253e-02, 9.707977039645796e-02, 9.707977039645796e-02, 1.115609564626110e-03, 1.166801339947287e-03, 3.505614810982970e-03, 3.116848713392497e-04, 1.180903881390953e-03, 1.180903881390935e-03, 1.140998706679864e-02, 1.140683360248339e-02, 1.140965084863650e-02, 8.905813583115667e-03, 1.140839748465926e-02, 1.140839748465926e-02, 3.000710605834222e-03, 3.440480538978974e-03, 2.811033776800106e-03, 3.154288836417560e-03, 3.557873270854409e-03, 2.086482730046296e-02, 9.472877791218853e-02, 9.399363216945529e-02, 9.175297038284140e-02, 9.889764597140678e-02, 9.484764944813885e-02, 4.974644123434045e-02, -2.667521655171588e-03, 4.238685499797536e-02, -2.983530775394603e-03, 2.990113554075755e-02, 1.947855283271451e-02, 1.947855283271451e-02, -7.317699317496232e-07, 3.865303234858319e-04, 5.746615174161762e-04, -7.436310567668143e-04, -8.427140097234523e-07, 3.907876086192825e-04, 9.621585666246743e-02, 9.808927762478166e-02, 8.922889603487170e-02, 9.693602212240991e-02, 9.719925236819692e-02, 9.719925236819692e-02, 9.994800689799599e-02, 1.072098179409131e-01, 1.104393712002492e-01, 1.088281238053268e-01, 1.101497463360263e-01, 7.048486578170883e-02, 8.870799675881973e-02, -1.026872639942896e-02, 8.590172687298489e-02, 1.834855677064494e-02, 1.076455081251677e-01, 1.076455081251677e-01, 2.857479084910692e-02, 3.023707859738292e-03, 4.361493097035989e-03, 1.411151023920945e-01, -2.496961781887483e-03, 1.041509994197447e-02, 8.142672746668620e-04, 1.108038437428442e-04, 2.955550623629076e-04, 1.086863252364192e-02, 3.935241440837408e-04, 3.935241440837408e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
