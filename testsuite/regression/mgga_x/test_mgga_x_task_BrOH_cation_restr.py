
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_task_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_task", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.182680114305719e+01, -2.182691214222243e+01, -2.182740421554305e+01, -2.182575607202992e+01, -2.182661985348913e+01, -2.182661985348913e+01, -2.938760384215789e+00, -2.938986588398124e+00, -2.944999656904534e+00, -2.942836517889085e+00, -2.942762719416991e+00, -3.766323480687926e+00, -4.454871055411764e-01, -7.194177660919172e-01, -6.985859203665578e-01, -7.052122404322940e-01, -7.037924720084445e-01, -7.037924720084445e-01, -1.844444160434970e-01, -1.874539147422593e-01, -4.425856401665386e-01, -1.361348307513083e-01, -1.550771557587051e-01, -1.550771557587051e-01, -3.266592241945640e-03, -3.512129845372743e-03, -2.983886906646798e-02, -1.499012183610859e-03, -2.117620242623466e-03, -2.117620242623466e-03, -5.669017604070019e+00, -5.670111233657780e+00, -5.669072493223270e+00, -5.429566649477892e+00, -5.669569585485569e+00, -5.669569585485569e+00, -1.553072553661553e+00, -1.584753465246143e+00, -1.528945183409585e+00, -1.557139418182429e+00, -1.582518370495825e+00, -2.130336903140117e+00, -6.372881803351782e-01, -6.936733226847076e-01, -5.885320762962536e-01, -6.130232438517876e-01, -6.478472587309296e-01, -5.767314669171617e-01, -4.192115938724205e-02, -1.823821953521774e-01, -3.858335324585067e-02, -2.086481273834763e+00, -1.096590920537773e-01, -1.096590920537773e-01, -1.191791552962303e-03, -1.435447759271580e-03, -1.209202938458051e-03, -2.554635801555244e-02, -1.391038169411195e-03, -1.427901350162378e-03, -6.423219559336462e-01, -6.385454579927269e-01, -6.225308042473562e-01, -6.409767692784181e-01, -6.404294124768395e-01, -6.404294124768395e-01, -6.249024240579132e-01, -5.342427810064551e-01, -5.604298321951419e-01, -5.862386203990274e-01, -5.730817067047392e-01, -5.296657315456768e-01, -7.269123163176107e-01, -1.250983164045518e-01, -2.819953902112636e-01, -2.740871449749262e-01, -3.257142499298160e-01, -3.257142499298160e-01, -3.880907482624249e-01, -2.831372761164579e-02, -4.085365776445702e-02, -3.631369010498636e-01, -3.299958580813987e-02, -7.101294114857569e-02, -4.869645779383853e-03, -2.266195359180346e-04, -7.258370709332827e-04, -6.631513269893813e-02, -1.326719251120420e-03, -1.326719251120419e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_task_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_task", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.179764316132501e+01, -3.179764867529868e+01, -3.179773402896822e+01, -3.179764519081183e+01, -3.179768317626951e+01, -3.179768317626951e+01, -5.317512730069627e+00, -5.317704024999500e+00, -5.322791917256423e+00, -5.321228973329694e+00, -5.320844397578850e+00, -5.098793361278431e+00, -8.353124857074654e-01, -9.890376153674535e-01, -9.640987995238924e-01, -9.714855416705781e-01, -9.699259655046069e-01, -9.699259655046069e-01, -2.566755560099982e-01, -2.604449965812368e-01, -7.743645077129161e-01, -1.957601456806213e-01, -2.195950606992941e-01, -2.195950606992941e-01, -5.869483938188341e-03, -6.291273535957153e-03, -4.822606333332844e-02, -2.767773158338021e-03, -3.860974780968799e-03, -3.860974780968799e-03, -7.576274165201751e+00, -7.577510844472141e+00, -7.576334545890415e+00, -7.554259860731861e+00, -7.576899048604492e+00, -7.576899048604492e+00, -2.886868125491650e+00, -2.932861501020289e+00, -2.850837493516873e+00, -2.893042131736317e+00, -2.929495694053751e+00, -2.892414237552383e+00, -8.572557426516689e-01, -9.283798524611964e-01, -7.951593220650842e-01, -8.244863086507301e-01, -8.705327786811142e-01, -9.234611347044894e-01, -5.869517392966585e-02, -2.579363614883399e-01, -5.361902076545691e-02, -2.801971425747895e+00, -1.594151094839602e-01, -1.594151094839602e-01, -1.589106607748252e-03, -2.655716555495396e-03, -2.215014216020658e-03, -3.470392413482851e-02, -1.854879799935904e-03, -2.621315299829350e-03, -8.565834714625287e-01, -8.520519329848798e-01, -8.443110216881357e-01, -8.549374099674579e-01, -8.542791436343068e-01, -8.542791436343068e-01, -8.334039733501001e-01, -7.204360560634703e-01, -7.525978155829540e-01, -7.844586325718003e-01, -7.681821105045743e-01, -7.972753918870856e-01, -9.740425951536338e-01, -2.201432658437468e-01, -3.889821575299465e-01, -5.104911968447574e-01, -4.452761014788047e-01, -4.452761014788046e-01, -6.970028527137887e-01, -4.591410845203259e-02, -6.469523703006072e-02, -4.910882053901784e-01, -4.577116105012257e-02, -1.066992231691272e-01, -8.678725550619170e-03, -4.344799867302163e-04, -1.355285607065150e-03, -1.000203519241465e-01, -2.434487384970793e-03, -2.434487384970791e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_task_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_task", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-9.718914673912080e-09, -9.718571624242981e-09, -9.717107468709079e-09, -9.722194328968694e-09, -9.719520552851770e-09, -9.719520552851770e-09, -1.319501582075077e-05, -1.319841666313016e-05, -1.328682748493591e-05, -1.324636940151868e-05, -1.325621982132820e-05, 5.447482979694696e-07, -1.584129957094435e-03, 3.710318593370170e-04, 4.004379602398516e-04, 3.933506089797248e-04, 3.947836767587558e-04, 3.947836767587558e-04, 7.448897620279026e-02, 7.126600801390455e-02, 1.163093611280676e-03, 1.535799537815936e-01, 1.165883962907989e-01, 1.165883962907988e-01, 2.218584329395428e+02, 2.063518230372387e+02, 4.521840294034852e+00, 5.008873076157802e+02, 4.018677896067002e+02, 4.018677896067002e+02, 7.067117500332432e-08, 7.028173223658659e-08, 7.064920663601194e-08, -1.940433016904591e-06, 7.047608266753365e-08, 7.047608266753365e-08, -1.012316869805196e-04, -1.044805159031479e-04, -9.826981295785207e-05, -1.015086553630299e-04, -1.044172050007789e-04, 5.294226143449106e-06, 6.362359764380740e-04, 3.710090693294860e-04, 9.107412938337649e-04, 7.410865462213590e-04, 5.832919466392168e-04, -1.991882718953709e-02, 1.380176126793248e+01, 6.210769802276952e-02, 1.895993807461692e+01, 5.339610798500846e-06, 3.023830242463541e-01, 3.023830242463541e-01, 1.902776314717931e+07, 4.861692084012152e+02, 2.512872471465542e+03, 9.418046982230459e+01, 1.025407019828403e+07, 1.059791427823877e+03, 1.250143968320325e-04, 2.747930118804102e-04, -1.108257963026198e-02, 1.824727231235564e-04, 2.047287202662689e-04, 2.047287202662689e-04, 1.642700350082978e-04, 1.327387779843217e-03, 1.025361794185913e-03, 7.167555183398716e-04, 8.775582124368757e-04, -2.971092629507285e-02, 3.331366172615757e-04, 1.742878663032732e-01, 1.516487726358928e-02, -9.849683406335689e-02, 9.298097359588401e-03, 9.298097359588408e-03, -4.778471366688070e-02, 5.021566616871649e+00, 2.341276511589132e+00, 6.298039509063598e-03, 3.529990293737875e+01, 9.088249859125029e-01, 7.878639167061068e+01, 5.023494999429584e+03, 2.693723573386195e+03, 1.102625808983031e+00, 1.481406444682430e+03, 1.481406444682435e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_task_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_task", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.580305269825272e-03, 1.580261896617629e-03, 1.580083381696541e-03, 1.580725749181969e-03, 1.580387194530071e-03, 1.580387194530071e-03, 1.051925889018958e-02, 1.052113932734295e-02, 1.057033324509356e-02, 1.054954125095630e-02, 1.055287002103331e-02, 2.938313394587730e-12, 2.303325265461174e-02, 1.600634902589384e-11, 1.645983086160003e-11, 1.632446044188078e-11, 1.635427539783041e-11, 1.635427539783041e-11, 6.134753388295348e-11, 6.062801822409171e-11, 7.475555541330605e-03, 6.817965568128762e-11, 6.724937175041132e-11, 6.724937175041130e-11, 2.528318822516176e-12, 2.971252665559450e-12, 4.010009094333006e-11, 4.392331312725150e-13, 1.127238979739989e-12, 1.127238979739989e-12, 1.760692433500831e-12, 1.759742593960924e-12, 1.760640210518700e-12, 4.568264398930258e-03, 1.760215067686408e-12, 1.760215067686408e-12, 1.572639092439438e-02, 1.623083879774014e-02, 1.531111424008631e-02, 1.578085079488115e-02, 1.620698377709591e-02, 5.266526848879579e-12, 1.665569103646230e-11, 1.461726118038627e-11, 1.859321559941335e-11, 1.729362238671557e-11, 1.624417101782191e-11, 7.198248007921502e-02, 1.528749695195424e-03, 5.762808718264162e-11, 1.206382241639087e-03, 5.018040028830104e-12, 7.625618413632970e-11, 7.625618413632978e-11, 2.973955492642156e-08, 3.654295407811838e-13, 1.258416787229448e-12, 3.995352965341455e-04, 1.876226095328444e-07, 8.554441770390145e-13, 1.505193436341900e-11, 1.531571124752552e-11, 3.687726728837963e-02, 1.514456415050831e-11, 1.518283085316889e-11, 1.518283085316889e-11, 1.549552755411257e-11, 2.023378308947498e-11, 1.867940376893803e-11, 1.726482029014070e-11, 1.796842118442811e-11, 7.286420962711508e-02, 1.411868123669684e-11, 2.853356457408266e-02, 4.079253310678276e-11, 8.677394906257649e-02, 3.515913007490191e-11, 3.515913007490190e-11, 8.318878787230595e-02, 3.844826863799265e-11, 4.947089113786750e-11, 3.029885664726590e-11, 1.287571792462074e-03, 7.749762407018333e-11, 3.097198861707617e-12, 7.058811031769218e-15, 2.301382959150587e-13, 7.830833908313708e-11, 9.634399154097249e-13, 9.634399154097259e-13]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
