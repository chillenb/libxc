
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_task_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_task", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.300539039258787e+01, -2.300546629365827e+01, -2.300592075194351e+01, -2.300479550986912e+01, -2.300536836932497e+01, -2.300536836932497e+01, -3.309343214479988e+00, -3.309544030600612e+00, -3.315153471231466e+00, -3.315868878801086e+00, -3.314322560318408e+00, -3.314322560318408e+00, -4.817371946077948e-01, -4.802980248044405e-01, -4.487583474595089e-01, -4.736287602211168e-01, -4.666119292780897e-01, -4.666119292780897e-01, -1.752877306276113e-01, -1.770653134919735e-01, -4.171430137770566e-01, -8.290301181099696e-02, -1.174536229405516e-01, -1.174536229405516e-01, -3.264607295678856e-03, -3.512445938884940e-03, -2.628368732533291e-02, -1.531899415221781e-03, -2.142901306172008e-03, -2.142901306172008e-03, -5.664395414900566e+00, -5.665547094610627e+00, -5.664545538080677e+00, -5.665558006548055e+00, -5.664929374393648e+00, -5.664929374393648e+00, -2.034453348124779e+00, -2.056945823300189e+00, -2.027207644242028e+00, -2.047718436983131e+00, -2.050545795207771e+00, -2.050545795207771e+00, -6.087591164385976e-01, -6.653051393267663e-01, -5.364040657620202e-01, -5.581170786530582e-01, -6.209477002128562e-01, -6.209477002128562e-01, -5.581871798048791e-02, -1.666032768319216e-01, -5.154612379425787e-02, -1.922368900071650e+00, -7.792966585879203e-02, -7.792966585879206e-02, -1.098209119571216e-03, -1.507887688121468e-03, -1.238402680197679e-03, -3.823125559029401e-02, -1.489137977190473e-03, -1.489137977190473e-03, -6.348141978003036e-01, -6.311370171525738e-01, -6.324388283488613e-01, -6.335037653512120e-01, -6.329683962727052e-01, -6.329683962727052e-01, -6.129617240111465e-01, -5.251846463245817e-01, -5.501366685540021e-01, -5.751010525850149e-01, -5.619456935583610e-01, -5.619456935583609e-01, -6.905750110697738e-01, -2.228147628290770e-01, -2.649867297380648e-01, -3.425546036169509e-01, -3.045323389381466e-01, -3.045323389381466e-01, -4.689009876893099e-01, -2.538410488360676e-02, -3.323427353889717e-02, -3.395979826215554e-01, -4.632395135981298e-02, -4.632395135981297e-02, -5.067361050497857e-03, -2.781308983976466e-04, -7.348898623543038e-04, -4.773972139523459e-02, -1.368171719358489e-03, -1.368171719358488e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_task_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_task", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.824533671821211e+01, -2.824545197500019e+01, -2.824534262055298e+01, -2.824360798703712e+01, -2.824460582010898e+01, -2.824460582010898e+01, -5.063952144016210e+00, -5.063921689014777e+00, -5.062731870451622e+00, -5.059258692152434e+00, -5.060964640774113e+00, -5.060964640774113e+00, -9.274000670327509e-01, -9.248659149215593e-01, -8.580827265398584e-01, -8.770595633542909e-01, -8.742411899307613e-01, -8.742411899307613e-01, -1.570390587028676e-01, -1.552930235628706e-01, -8.846895098556111e-01, -1.356592511676927e-02, -1.328539567228704e-02, -1.328539567228698e-02, -5.819755232523915e-03, -6.245923775801685e-03, -3.140550708754642e-02, -2.820038097910068e-03, -3.893243252074507e-03, -3.893243252074507e-03, -6.867685456989549e+00, -6.874481779749430e+00, -6.867578311461717e+00, -6.873598946431303e+00, -6.871346988008573e+00, -6.871346988008573e+00, -2.548610664112879e+00, -2.567327510044780e+00, -2.515517213822681e+00, -2.515297618915624e+00, -2.577490554307063e+00, -2.577490554307063e+00, -8.217628308165473e-01, -9.141570518353274e-01, -7.765783983402361e-01, -8.468509973175513e-01, -8.372184772003143e-01, -8.372184772003143e-01, -4.980543736481087e-04, -1.217632797184143e-02, -8.392940882370001e-03, -2.873399122060020e+00, 6.591841895640162e-02, 6.591841895640183e-02, -2.036818010722377e-03, -2.773746383101481e-03, -2.258690526738927e-03, -2.475873378530970e-02, -2.716648133643387e-03, -2.716648133643387e-03, -8.488910977888446e-01, -8.305357289843759e-01, -8.370385542896271e-01, -8.423739119985817e-01, -8.397121503567511e-01, -8.397121503567511e-01, -8.277758546024987e-01, -5.977365653730585e-01, -6.793588797819202e-01, -7.450946422079433e-01, -7.152555999998070e-01, -7.152555999998070e-01, -9.679499295296153e-01, -2.035913353328322e-01, -2.649094964694443e-01, -4.569682653425357e-01, -3.561668928875479e-01, -3.561668928875478e-01, -6.094936305216307e-01, -2.786400364156729e-02, -3.202183692775936e-02, -4.588750414695037e-01, 2.400689330637195e-03, 2.400689330637237e-03, -8.863939938354670e-03, -5.273888059045836e-04, -1.370435946137962e-03, 3.746019459442031e-02, -2.498229952337561e-03, -2.498229952337558e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_task_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_task", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.929308327507040e-08, -1.929319143617916e-08, -1.929717906716870e-08, -1.929572479540840e-08, -1.929598449221678e-08, -1.929598449221678e-08, -1.814160512362270e-05, -1.814079834499117e-05, -1.811778550263191e-05, -1.812599873454456e-05, -1.813055406694013e-05, -1.813055406694013e-05, -7.133304056439846e-03, -7.157717614512181e-03, -8.114031084501466e-03, -9.236954387634770e-03, -8.832557578712975e-03, -8.832557578712975e-03, -1.851437115809554e+00, -1.993175858839040e+00, 5.110337412224305e-04, -5.036472666876561e+00, -6.023794889739065e+00, -6.023794889739072e+00, 2.125147304098602e+02, 2.020697799155852e+02, -3.963274678762201e+00, 5.680256272421029e+02, 4.301155171862010e+02, 4.301155171862011e+02, -7.591215286139552e-06, -7.585711381979408e-06, -7.594873041642415e-06, -7.589834864599914e-06, -7.586420031996126e-06, -7.586420031996126e-06, -8.612349715857688e-05, -8.476429096916873e-05, -8.859906364043187e-05, -9.335915298154521e-05, -8.308852616907659e-05, -8.308852616907659e-05, -1.232677471101408e-02, -8.096282021350203e-03, -2.865331887893973e-02, -2.380688905797043e-02, -1.052467405655962e-02, -1.052467405655962e-02, -6.417382176250018e+00, -2.991374317338131e+00, -6.181130042347968e+00, -1.699086668698088e-04, -1.401403272214704e+01, -1.401403272214706e+01, 1.045174118698302e+03, 6.474898606156480e+02, 2.889352724506539e+03, -7.124522340564043e+00, 1.356830857452925e+03, 1.356830857452922e+03, -2.923914305517783e-02, -3.034439116908874e-02, -2.994000343890552e-02, -2.961729491256139e-02, -2.977048732261002e-02, -2.977048732261002e-02, -2.141154803873402e-02, -5.507369900791993e-02, -3.941061462016079e-02, -2.956048497157423e-02, -3.259343261337781e-02, -3.259343261337777e-02, -8.446454804467596e-03, -6.254322220713904e-01, -4.351196780921748e-01, -1.794423863906309e-01, -2.659432255615566e-01, -2.659432255615564e-01, -3.487035440367056e-02, -1.063439821977695e+01, -5.200043013633773e+00, -1.693642948973200e-01, -1.424438720427102e+01, -1.424438720427104e+01, 9.955083419555379e+01, 1.539789473330222e+04, 2.890244026620772e+03, -2.895590445900393e+01, 1.774317424325107e+03, 1.774317424325113e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_task_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_task", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([3.044035104960836e-03, 3.044075462348736e-03, 3.044799752951403e-03, 3.044222781146672e-03, 3.044447059124023e-03, 3.044447059124023e-03, 1.342046227349634e-02, 1.341964950959978e-02, 1.339691208581418e-02, 1.340112600803237e-02, 1.340378273596903e-02, 1.340378273596903e-02, 4.629725763668392e-02, 4.624471798054417e-02, 4.581676783750702e-02, 5.117814755832850e-02, 4.944007520862702e-02, 4.944007520862702e-02, 1.581385983038321e-01, 1.775518000442087e-01, 1.221139524956611e-02, 1.706675928899216e-01, 3.056495645641753e-01, 3.056495645641756e-01, 2.345847838870121e-05, 9.647363589767305e-06, 1.734056199424535e-03, 1.740749858732508e-09, 3.782196450400960e-08, 3.782196450401798e-08, 1.716812722743715e-02, 1.716431299948848e-02, 1.717665308616288e-02, 1.717289241236819e-02, 1.716173232659156e-02, 1.716173232659156e-02, 1.116299572587609e-02, 1.120051638258525e-02, 1.126164600210887e-02, 1.201191897526403e-02, 1.099989283573347e-02, 1.099989283573347e-02, 4.358762662947350e-02, 3.599455579226357e-02, 7.948389637460450e-02, 7.408331265748401e-02, 3.921716584100615e-02, 3.921716584100615e-02, 6.363904594096241e-02, 2.503883279158866e-01, 4.517770590241278e-02, 2.059422363584869e-02, 2.646741766234288e-01, 2.646741766234292e-01, 2.471493507571864e-11, 3.487950378022223e-10, 8.849961660869004e-09, 1.156399368249864e-02, 2.121444001008166e-09, 2.121444001013229e-09, 9.585803873649343e-02, 9.832401803570996e-02, 9.743186723833118e-02, 9.670610616007180e-02, 9.704508653407634e-02, 9.704508653407633e-02, 6.511476954126443e-02, 1.075794094412227e-01, 8.889571164055717e-02, 7.605866901706421e-02, 7.870505958285941e-02, 7.870505958285934e-02, 4.310734493653087e-02, 1.086358036209770e-01, 1.307220822917091e-01, 1.280092418279245e-01, 1.227382098872598e-01, 1.227382098872598e-01, 5.639031702755066e-02, 6.097396652804126e-03, 4.147823612855726e-03, 1.095111351981172e-01, 7.178493710523462e-02, 7.178493710523486e-02, 7.615910374091419e-08, 2.718107576619111e-14, 7.471682742431266e-10, 1.342022925121314e-01, 3.901411292629037e-09, 3.901411292628712e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
