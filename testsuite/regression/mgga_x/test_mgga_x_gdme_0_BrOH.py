
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_gdme_0_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-8.906328671090350e+00, -8.906409184459807e+00, -8.906926278046912e+00, -8.905608949862488e+00, -8.906369596309297e+00, -8.906369596309297e+00, -3.777074497543414e+00, -3.777078365865349e+00, -3.777171744211504e+00, -3.777124480249328e+00, -3.777080965614974e+00, -3.777080965614974e+00, -9.100259886543769e-01, -9.111015864279136e-01, -9.461978955627764e-01, -9.320014025392852e-01, -9.102902724103999e-01, -9.102902724103999e-01, -3.449570501978372e-01, -3.375377858660045e-01, -1.035554368439317e+00, -4.955355677260032e-01, -3.421611994530145e-01, -3.421611994530144e-01, -4.774593228319060e+00, -4.490294066660843e+00, -1.264835865633899e+00, -1.223797368096864e+01, -4.484588241468767e+00, -4.484588241468764e+00, -6.906445392096083e+01, -1.771096505249843e+01, 2.998643789075268e+02, -9.494829671424529e+01, 1.017428208001444e+00, -1.149408691066848e+01, 2.981949103089611e+02, -6.596468216104840e+00, -3.221717361604211e+00, -3.331215043944862e+00, -3.257389976801426e+00, -1.291045204012541e+00, -1.555730086166928e+01, -5.174576125242286e+00, -1.016316134434543e+01, -8.585935506533729e-01, -9.816731675127233e-01, -1.316318686163358e+00, 6.592105912297354e+00, -5.621705841810870e+00, 3.883778812744974e+01, -3.163673777154056e+00, -1.739455396710689e-01, 2.907887848179301e-01, -1.626819551722929e+02, -1.045409221801424e+05, 1.354471363298862e+05, 8.576361084545988e+00, -5.257915401112458e+01, 8.048669801443327e+02, -7.959725141513495e+04, 2.829665635705401e+04, 5.380875997985613e+05, -7.856410517584071e+02, 2.206011766859774e+04, -1.021737679601216e+06, 3.858674745040928e+05, -7.031417633591923e-01, -8.020736275431128e+00, 2.291749925341518e-01, -1.207347611756217e+00, -1.763990261597887e+01, -1.694924320734453e+01, 5.672859473412915e+01, 1.027793960929852e+02, 1.180600318219173e+01, -1.554128656455706e+00, -8.989259734639288e-01, -6.709797696707297e-01, -2.309825227129515e+01, -2.257799731548092e+00, -4.549340790195848e-01, 2.423142967708711e+01, -1.487915318017149e-01, 1.030026241172898e+02, -2.857314527497943e+03, 8.536618524697190e+02, 1.587851797970746e+00, 4.503903559071066e+01, 7.620243571108625e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_gdme_0_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-5.576232233900884e+01, -5.576243806082363e+01, -5.576300667577764e+01, -5.576110922100214e+01, -5.576238300076057e+01, -5.576238300076057e+01, -8.302709012969975e+00, -8.302727790720244e+00, -8.303641849490834e+00, -8.304055706637740e+00, -8.302757910014494e+00, -8.302757910014494e+00, -1.529522983487716e+00, -1.527283017120794e+00, -1.466822009488489e+00, -1.485585558244266e+00, -1.528748679874227e+00, -1.528748679874227e+00, -3.864281043174405e-01, -3.955775525158876e-01, -1.851498296662644e+00, -1.983461631215499e-01, -3.893627033407160e-01, -3.893627033407162e-01, 1.563526797355123e+00, 1.467431509895107e+00, 3.023852664956999e-01, 4.065889993382615e+00, 1.465835249431529e+00, 1.465835249431531e+00, 8.711115350954692e+00, -8.409259389196089e+00, -1.142654307892410e+02, 1.733681556413933e+01, -1.465080562306189e+01, -1.048030058350525e+01, -1.047736185656040e+02, -3.214365625879095e+00, -4.286099125955058e+00, -4.279158800154344e+00, -4.334977398117948e+00, -4.990425655714242e+00, 3.590048434904782e+00, -8.490357375799878e-03, 1.873542630183783e+00, -1.293130581697318e+00, -1.329804821643114e+00, -1.218256315426235e+00, -2.464453493621535e+00, 1.368895789515622e+00, -1.320959094309609e+01, -4.217697763808999e+00, -2.508587502542731e-01, -4.057701917506062e-01, 5.421435823873949e+01, 3.484695924871090e+04, -4.514905654446748e+04, -3.024990935400503e+00, 1.751288924631224e+01, -2.683024888055071e+02, 2.653077055784466e+04, -9.433856575736094e+03, -1.793641742074480e+05, 2.602369781913966e+02, -7.355014711809807e+03, 3.405775843781287e+05, -1.286240852367256e+05, -1.148177799873096e+00, 1.229434362699285e+00, -1.577649005015602e+00, -1.069706328697055e+00, 4.407812006043825e+00, 3.832332996960667e+00, -1.954470068761290e+01, -3.501416600240703e+01, -4.899748935644473e+00, -3.349418224077765e-01, -5.533427167383690e-01, -1.023321091900906e+00, 7.588992448809616e+00, 6.031102070091988e-01, -7.595723205952225e-01, -8.293924914641856e+00, -1.671845116789133e-01, -3.436702883288321e+01, 9.524341207447002e+02, -2.845616540132490e+02, -7.360982804066394e-01, -1.502448118807281e+01, -2.540195883614568e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gdme_0_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gdme_0_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([-1.863610567288706e-03, -1.863606043706699e-03, -1.863582531919876e-03, -1.863656674716630e-03, -1.863608209549793e-03, -1.863608209549793e-03, -1.144686703046244e-02, -1.144684300699686e-02, -1.144571159180832e-02, -1.144523511789806e-02, -1.144680591240851e-02, -1.144680591240851e-02, -5.971628959133631e-02, -5.977765128104071e-02, -6.141319005560592e-02, -6.093346240847014e-02, -5.973865523474450e-02, -5.973865523474450e-02, -2.182865700768665e-01, -2.154182606824233e-01, -4.982598382097106e-02, -3.010851813271253e-01, -2.174182008690389e-01, -2.174182008690389e-01, -3.908399030099258e+00, -3.731334266237535e+00, -9.180150609652107e-01, -8.147035657839242e+00, -3.770628007549959e+00, -3.770628007549959e+00, -7.648432664226879e-03, -7.647072622661058e-03, -7.648289145887508e-03, -7.647231697974614e-03, -7.647741340308104e-03, -7.647741340308104e-03, -2.036194963038734e-02, -2.021948776549004e-02, -2.042011111618133e-02, -2.030811762712952e-02, -2.019119313182762e-02, -2.019119313182762e-02, -6.859097930351397e-02, -6.314475143531172e-02, -7.228470435491102e-02, -6.930280852172738e-02, -6.605308777638515e-02, -6.605308777638515e-02, -4.098019538496187e-01, -2.167337847850648e-01, -4.151226780576122e-01, -2.075997492446195e-02, -3.543960769406511e-01, -3.543960769406511e-01, -8.445263273179798e+00, -7.389737967886247e+00, -9.859490058933996e+00, -6.585398486813978e-01, -8.110296897816204e+00, -8.110296897816204e+00, -6.647223969381894e-02, -6.682901499819409e-02, -6.670067875114827e-02, -6.660200467058418e-02, -6.665135460205425e-02, -6.665135460205425e-02, -6.867633019375423e-02, -7.916620150503863e-02, -7.579013305728795e-02, -7.290681812677731e-02, -7.434805187700083e-02, -7.434805187700082e-02, -6.022395085281740e-02, -1.723192993186510e-01, -1.450909858121260e-01, -1.134905076509467e-01, -1.283163635843998e-01, -1.283163635843998e-01, -8.777350623818958e-02, -9.911878717121440e-01, -7.321701317370746e-01, -1.201161680216047e-01, -5.048945620915442e-01, -5.048945620915443e-01, -3.334833905036921e+00, -2.699125080441917e+01, -1.420864548034247e+01, -5.292277692570256e-01, -9.543011524794432e+00, -9.543011524794446e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gdme_0_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([7.454442269154826e-03, 7.454424174826798e-03, 7.454330127679505e-03, 7.454626698866522e-03, 7.454432838199174e-03, 7.454432838199174e-03, 4.578746812184977e-02, 4.578737202798742e-02, 4.578284636723329e-02, 4.578094047159225e-02, 4.578722364963404e-02, 4.578722364963404e-02, 2.388651583653452e-01, 2.391106051241629e-01, 2.456527602224237e-01, 2.437338496338806e-01, 2.389546209389781e-01, 2.389546209389781e-01, 8.731462803074663e-01, 8.616730427296933e-01, 1.993039352838843e-01, 1.204340725308501e+00, 8.696728034761558e-01, 8.696728034761558e-01, 1.563359612039704e+01, 1.492533706495015e+01, 3.672060243860844e+00, 3.258814263135697e+01, 1.508251203019984e+01, 1.508251203019984e+01, 3.059373065690751e-02, 3.058829049064424e-02, 3.059315658355003e-02, 3.058892679189847e-02, 3.059096536123243e-02, 3.059096536123243e-02, 8.144779852154940e-02, 8.087795106196019e-02, 8.168044446472530e-02, 8.123247050851810e-02, 8.076477252731049e-02, 8.076477252731049e-02, 2.743639172140560e-01, 2.525790057412469e-01, 2.891388174196441e-01, 2.772112340869096e-01, 2.642123511055406e-01, 2.642123511055406e-01, 1.639207815398475e+00, 8.669351391402592e-01, 1.660490712230449e+00, 8.303989969784782e-02, 1.417584307762604e+00, 1.417584307762604e+00, 3.378105309271920e+01, 2.955895187154500e+01, 3.943796023573599e+01, 2.634159394725592e+00, 3.244118759126482e+01, 3.244118759126482e+01, 2.658889587752757e-01, 2.673160599927764e-01, 2.668027150045931e-01, 2.664080186823367e-01, 2.666054184082171e-01, 2.666054184082171e-01, 2.747053207750169e-01, 3.166648060201546e-01, 3.031605322291518e-01, 2.916272725071093e-01, 2.973922075080034e-01, 2.973922075080033e-01, 2.408958034112696e-01, 6.892771972746041e-01, 5.803639432485040e-01, 4.539620306037867e-01, 5.132654543375993e-01, 5.132654543375993e-01, 3.510940249527584e-01, 3.964751486848577e+00, 2.928680526948299e+00, 4.804646720864189e-01, 2.019578248366177e+00, 2.019578248366177e+00, 1.333933562014768e+01, 1.079650032176767e+02, 5.683458192136990e+01, 2.116911077028103e+00, 3.817204609917773e+01, 3.817204609917779e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
