
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_r2scan01_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scan01", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.170046102286746e+01, -2.170056514091156e+01, -2.170106365961349e+01, -2.169936327154446e+01, -2.170051557877418e+01, -2.170051557877418e+01, -3.039216125998620e+00, -3.039326804164061e+00, -3.042775371329544e+00, -3.041680520818654e+00, -3.039261303949503e+00, -3.765974006981416e+00, -5.260182864222785e-01, -7.146210966597492e-01, -6.938513963493353e-01, -7.001135786908397e-01, -7.151302397147177e-01, -7.151302397147177e-01, -1.951569374341467e-01, -1.979250539134912e-01, -6.120237630934190e-01, -1.367054375752378e-01, -1.959850664055233e-01, -1.959850664055233e-01, -6.927645856155445e-03, -7.351796178558668e-03, -3.931379090709158e-02, -2.387431498604334e-03, -7.276773741675564e-03, -7.276773741675556e-03, -5.666542301438776e+00, -5.667601371595872e+00, -5.666654321922782e+00, -5.431200753470875e+00, -5.667080293845722e+00, -5.667080293845722e+00, -1.657500497456621e+00, -1.678352342087411e+00, -1.648782270529971e+00, -1.665124882175423e+00, -1.683087318933570e+00, -2.132058309946530e+00, -6.301973950768262e-01, -6.859350073953744e-01, -5.971710001205305e-01, -6.241394023091413e-01, -6.549404925248582e-01, -5.824290802786355e-01, -7.137399436341753e-02, -1.942258417220568e-01, -7.049780577346000e-02, -2.084012215862873e+00, -1.155980963486768e-01, -1.155980963486768e-01, -3.430414959781201e-03, -2.784490476470115e-03, -2.127248866081059e-03, -4.415673249523029e-02, -3.572106588604474e-03, -2.500278706319953e-03, -6.523986383663397e-01, -6.488404051827572e-01, -6.407191092901650e-01, -6.511067664901988e-01, -6.506146565996668e-01, -6.506146565996668e-01, -6.314408180569842e-01, -5.458224102951187e-01, -5.710151277364587e-01, -5.942454469897521e-01, -5.824255888894184e-01, -5.375468292233455e-01, -7.188525183816071e-01, -1.782653895505082e-01, -2.947273357607676e-01, -2.984148756492192e-01, -3.346490227504230e-01, -3.346490227504230e-01, -4.001253759648467e-01, -3.577486136498494e-02, -5.084813598301510e-02, -3.589819483615526e-01, -5.785294914062155e-02, -7.857078250518597e-02, -7.936111588989667e-03, -4.640588152052396e-04, -1.221564564401191e-03, -7.494498823676610e-02, -2.066175921159771e-03, -2.066175921159766e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_r2scan01_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scan01", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.211249591649678e+01, -3.211254333535429e+01, -3.211281509957483e+01, -3.211203419771413e+01, -3.211252046062165e+01, -3.211252046062165e+01, -4.806091897522760e+00, -4.806373003533844e+00, -4.815023880599169e+00, -4.812053208963159e+00, -4.806192786726601e+00, -4.689384382843963e+00, -7.836191202931747e-01, -8.282029872177564e-01, -7.869287046553890e-01, -8.020166003077637e-01, -8.292100853935854e-01, -8.292100853935854e-01, -2.208069979162500e-01, -2.256402563318361e-01, -8.739657101852962e-01, -9.772502225400438e-02, -2.222337394323010e-01, -2.222337394323010e-01, 2.734874595784306e-02, 2.873637652000926e-02, 5.953121287011811e-02, 1.025443915341046e-02, 2.843814957360831e-02, 2.843814957360902e-02, -7.402065052728797e+00, -7.404401592486620e+00, -7.402316860735293e+00, -7.723721637060406e+00, -7.403245994201699e+00, -7.403245994201699e+00, -2.585545287869011e+00, -2.619976212916612e+00, -2.572024392166182e+00, -2.597779374361882e+00, -2.628323365596153e+00, -2.626960961510909e+00, -8.017415707542388e-01, -8.891751641809774e-01, -7.513581388089972e-01, -7.985488052415178e-01, -8.390238470268490e-01, -9.129139973551611e-01, -9.633113137787259e-02, -1.947869781694700e-01, -9.521575631890909e-02, -2.671529188465074e+00, -7.489392985497821e-02, -7.489392985497821e-02, -4.574068231605229e-03, 1.191902668722814e-02, 9.090816300818068e-03, -5.915466441979966e-02, -4.763015891578308e-03, 1.071395320665709e-02, -8.647435323825131e-01, -8.555335569686274e-01, -8.716462181496083e-01, -8.613225307336457e-01, -8.600398477337072e-01, -8.600398477337072e-01, -8.353291215611978e-01, -6.923969882204382e-01, -7.340513373637320e-01, -7.726368622427384e-01, -7.529534385622273e-01, -8.082686621718750e-01, -9.271420643507621e-01, -2.572075629668948e-01, -3.445172229999623e-01, -4.656540124515958e-01, -4.044597422609834e-01, -4.044597422609834e-01, -6.364461718023597e-01, 6.419575577608344e-02, 5.009194734685608e-02, -4.478919023443970e-01, -7.794659620817339e-02, -1.083451908557451e-02, 3.180493769147238e-02, 1.991563414942180e-03, 5.261126501469199e-03, -1.011076023072283e-02, 8.868702369703996e-03, 8.868702369703997e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_r2scan01_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scan01", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.211316530263328e-08, -1.211299499765634e-08, -1.211215346085777e-08, -1.211493827558368e-08, -1.211307624290458e-08, -1.211307624290458e-08, -8.640797560065869e-06, -8.644194587266800e-06, -8.745771371931355e-06, -8.703512123230360e-06, -8.641575983789027e-06, -7.148845034808272e-06, -1.702217621865891e-03, -4.757962608534903e-03, -5.199845764313950e-03, -5.081904321968722e-03, -4.747890111203048e-03, -4.747890111203048e-03, -8.283595749587024e-01, -7.905480676373726e-01, -3.336896800497663e-04, -2.536723128574951e+00, -8.166975610674634e-01, -8.166975610674634e-01, -4.467130471308890e+03, -4.079481138547094e+03, -1.086091128823861e+02, -8.879694106208339e+03, -4.260814866343812e+03, -4.260814866343886e+03, -1.763481487553791e-06, -1.764297424711154e-06, -1.763577509705154e-06, -3.134637505409879e-06, -1.763880704726758e-06, -1.763880704726758e-06, -6.207357074349843e-05, -6.343949053241025e-05, -6.156513955799939e-05, -6.246133092871074e-05, -6.397746845308611e-05, -6.754124388348926e-05, -9.856987250209235e-03, -7.744571091848296e-03, -1.170223828997478e-02, -1.051428386970581e-02, -8.725482055103873e-03, -1.880087803981742e-02, -9.642122051048163e-02, -7.518762238082434e-01, -1.081494973760485e-01, -8.539243923901900e-05, -4.773611958173803e+00, -4.773611958173803e+00, -6.842798115520351e+03, -8.651092366265555e+03, -3.107065074613726e+04, -3.285467562422992e-01, -5.820574073148024e+03, -1.141124550139191e+04, -1.147554288957738e-02, -1.131024724518111e-02, -1.433193978027505e-02, -1.144083563815448e-02, -1.141917458284273e-02, -1.141917458284273e-02, -1.293624801322265e-02, -1.730368370227911e-02, -1.536997750654606e-02, -1.403201459044396e-02, -1.465334822493834e-02, -3.114447358575473e-02, -6.229555914539517e-03, -6.203357341320842e-02, -1.665766432302805e-01, -6.177372546161435e-02, -1.063719785835761e-01, -1.063719785835761e-01, -3.326071770686606e-02, -1.313525635498843e+02, -5.339559328557797e+01, -8.712128483016948e-02, -1.895484279019518e-01, -1.702659050695407e+01, -2.009072028753828e+03, -7.463037773111973e+04, -4.008633762440728e+04, -2.053668481035152e+01, -1.824688005136266e+04, -1.824688005136271e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_r2scan01_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scan01", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.863615725715605e-03, 1.863603356802940e-03, 1.863545561360852e-03, 1.863747306405980e-03, 1.863609235026510e-03, 1.863609235026510e-03, 5.674919641786057e-03, 5.677210060828310e-03, 5.746342998167685e-03, 5.719015279391703e-03, 5.675528350586176e-03, 5.134681964802018e-03, 7.689586888355157e-03, 2.406698543739752e-02, 2.423293012603614e-02, 2.425864130404560e-02, 2.406354794797585e-02, 2.406354794797585e-02, 8.595794184758665e-02, 8.538680371057003e-02, 2.520156613686975e-03, 9.845429388089433e-02, 8.577681598259816e-02, 8.577681598259816e-02, 7.689175686762229e-02, 8.068670569457995e-02, 1.447395435615748e-01, 1.694390477602119e-02, 8.166579093135892e-02, 8.166579093136031e-02, 4.103756379703487e-03, 4.106926946518396e-03, 4.104109471024358e-03, 6.991315748956222e-03, 4.105338316323301e-03, 4.105338316323301e-03, 7.211583871426243e-03, 7.533682437058222e-03, 7.088812456827517e-03, 7.316757312475939e-03, 7.631230158634864e-03, 8.855066981736780e-03, 3.265568042820432e-02, 3.238328269234460e-02, 3.328344958895135e-02, 3.365423648731788e-02, 3.222804607430694e-02, 6.477461741191415e-02, 6.982671428061611e-04, 7.918322664422597e-02, 7.908555987674054e-04, 1.015436267821932e-02, 1.133694871098799e-01, 1.133694871098799e-01, 1.561481173721541e-07, 2.210577588703296e-02, 3.342003418874392e-02, 1.712451445126919e-04, 1.798325938609723e-07, 2.206083230457596e-02, 3.945975193553428e-02, 3.871749321869963e-02, 4.827531005507768e-02, 3.928363358243236e-02, 3.918601644139127e-02, 3.918601644139127e-02, 4.051143499102146e-02, 3.734000466750568e-02, 3.747916755117787e-02, 3.797348549868135e-02, 3.765154929544471e-02, 7.541113935006012e-02, 3.018768051282129e-02, 1.144746351901661e-02, 5.894335322644276e-02, 4.147118981854746e-02, 5.441876967841937e-02, 5.441876967841933e-02, 4.850409593612038e-02, 1.389183416896636e-01, 1.406485690206716e-01, 5.413230033062614e-02, 6.339025662778581e-04, 1.383037549060752e-01, 5.568383707939379e-02, 3.932439603097834e-03, 1.443783004691841e-02, 1.448406141737399e-01, 2.166092330985980e-02, 2.166092330985978e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
