
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_r2scan01_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scan01", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.318045041120155e+01, -2.318051049688654e+01, -2.318085211092144e+01, -2.317986957868449e+01, -2.318048144669842e+01, -2.318048144669842e+01, -3.400800394197344e+00, -3.400917885152809e+00, -3.404721158755937e+00, -3.405679381343917e+00, -3.400835300666211e+00, -3.400835300666211e+00, -5.906225888608702e-01, -5.900218099785394e-01, -5.753781606651255e-01, -5.856877949510841e-01, -5.904106888594052e-01, -5.904106888594052e-01, -1.876220248088892e-01, -1.894852969016908e-01, -6.635374552334645e-01, -1.124065195908522e-01, -1.880616075357624e-01, -1.880616075357624e-01, -5.966591326559468e-03, -6.223752835507420e-03, -3.205221126337559e-02, -2.025046544625177e-03, -6.227710416509536e-03, -6.227710416509529e-03, -5.665463267605439e+00, -5.666533789669758e+00, -5.665590198512652e+00, -5.666421691367381e+00, -5.665988641090049e+00, -5.665988641090049e+00, -2.074780390712587e+00, -2.097159535274047e+00, -2.072366859548085e+00, -2.090007638996087e+00, -2.093236208026535e+00, -2.093236208026535e+00, -6.044176973065616e-01, -6.556312915910932e-01, -5.544228588737067e-01, -5.770395944783957e-01, -6.354034632140718e-01, -6.354034632140718e-01, -8.048856653265656e-02, -1.855869045932647e-01, -7.979037839597997e-02, -1.910569849041567e+00, -9.899376318099251e-02, -9.899376318099251e-02, -1.945291866617809e-03, -2.325247770373056e-03, -1.737621863428326e-03, -4.677286003004206e-02, -2.119699930471089e-03, -2.119699930471089e-03, -6.496410539147415e-01, -6.462205720736757e-01, -6.474465236693611e-01, -6.483930145117055e-01, -6.479179581324314e-01, -6.479179581324314e-01, -6.258992926425274e-01, -5.433543138875866e-01, -5.676911620727683e-01, -5.900783454978010e-01, -5.784917093840602e-01, -5.784917093840602e-01, -6.765257527613288e-01, -2.421291564631415e-01, -2.843013425930723e-01, -3.545633764815084e-01, -3.205181408687081e-01, -3.205181408687080e-01, -4.749144634256487e-01, -2.937963817769441e-02, -4.148180680761761e-02, -3.354801607539812e-01, -6.495811759678180e-02, -6.495811759678179e-02, -6.635787426830006e-03, -4.084394670702803e-04, -9.972865724855705e-04, -6.180972404966291e-02, -1.758862489763082e-03, -1.758862489763078e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_r2scan01_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scan01", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.014928686801003e+01, -3.014938086135090e+01, -3.014984475161560e+01, -3.014830626071634e+01, -3.014933604409919e+01, -3.014933604409919e+01, -4.804526869630478e+00, -4.804626401893903e+00, -4.807680720798170e+00, -4.805709877163555e+00, -4.804584739964335e+00, -4.804584739964335e+00, -8.200450309663592e-01, -8.189511969231589e-01, -7.916306778142410e-01, -8.026006201059679e-01, -8.196534711671309e-01, -8.196534711671309e-01, -2.002689077149839e-01, -2.059736345074396e-01, -8.824022298578854e-01, -1.530425858428687e-01, -2.018637356515519e-01, -2.018637356515519e-01, 1.255445639625895e-02, 8.120645676163553e-03, -4.618806575806921e-02, -3.639371615686775e-03, 1.139754462523925e-02, 1.139754462523847e-02, -7.402431870887625e+00, -7.404767904441215e+00, -7.402678952847239e+00, -7.404494928626481e+00, -7.403618874050824e+00, -7.403618874050824e+00, -2.541480928628771e+00, -2.576923617143279e+00, -2.531868951213950e+00, -2.560666391881553e+00, -2.578323065745872e+00, -2.578323065745872e+00, -8.102966576914279e-01, -9.188972491274439e-01, -7.678028491572364e-01, -8.322406803491981e-01, -8.458958851975669e-01, -8.458958851975669e-01, -1.069178120473055e-01, -1.534127856049544e-01, -1.052166441390299e-01, -2.828195746677175e+00, -1.069999528888476e-01, -1.069999528888476e-01, -3.445694112109389e-03, -4.140727502781253e-03, -2.972395697016515e-03, -6.971686478819812e-02, -3.788223486490944e-03, -3.788223486490944e-03, -8.682211164841469e-01, -8.580883987048368e-01, -8.617031194951564e-01, -8.645130788599753e-01, -8.631068540160447e-01, -8.631068540160447e-01, -8.425348220560357e-01, -6.909648948849481e-01, -7.338793819900515e-01, -7.739992770391121e-01, -7.536182357136129e-01, -7.536182357136130e-01, -9.665967375163713e-01, -2.526445133775765e-01, -3.226411462592352e-01, -4.634037751459595e-01, -3.903885284182962e-01, -3.903885284182962e-01, -6.084130863455177e-01, -3.501274575506402e-02, -5.982863278262310e-02, -4.516018309366364e-01, -8.327361557930274e-02, -8.327361557930285e-02, -1.131149620261516e-02, -7.657780474348207e-04, -1.663535050485426e-03, -8.119989900860226e-02, -3.155408663011684e-03, -3.155408663011677e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_r2scan01_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scan01", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.270339618545536e-09, -6.270287653161682e-09, -6.269801724347854e-09, -6.270642840159083e-09, -6.270314529773758e-09, -6.270314529773758e-09, -1.522888757494212e-05, -1.523038156366256e-05, -1.527209111896093e-05, -1.524861312484053e-05, -1.522902546512542e-05, -1.522902546512542e-05, -4.290647605356831e-03, -4.279931004765054e-03, -4.044118844782636e-03, -4.196384256907708e-03, -4.287088240176268e-03, -4.287088240176268e-03, -1.443354645614019e+00, -1.406780945147091e+00, -1.474592177002537e-03, -3.322998403580099e-01, -1.437088016679295e+00, -1.437088016679295e+00, -2.623519067986523e+03, -1.867870040206785e+03, -1.744938735807399e+00, 3.079432449415228e+02, -2.323164523505890e+03, -2.323164523505884e+03, -1.772143572287809e-06, -1.772887055077977e-06, -1.772121685808043e-06, -1.772705025125785e-06, -1.772654573573910e-06, -1.772654573573910e-06, -9.972952881010799e-05, -9.264639143603862e-05, -9.784404721192851e-05, -9.205987384637174e-05, -9.719923487088595e-05, -9.719923487088595e-05, -1.846780663047981e-02, -1.590167356110297e-02, -2.513540600188438e-02, -2.694822136042250e-02, -1.483991790561275e-02, -1.483991790561275e-02, -9.276034872367740e-01, -1.330992670911079e+00, -1.122101431795620e+00, -2.172520966651613e-04, -2.723468044348560e+00, -2.723468044348560e+00, 2.847205135745626e+02, 2.554765962177007e+02, 4.186072832193246e+02, 7.097205999236164e-01, 3.899802302282491e+02, 3.899802302282490e+02, -1.232590455323047e-02, -1.238588686666253e-02, -1.239153269180502e-02, -1.237265936551661e-02, -1.238469373608388e-02, -1.238469373608388e-02, -1.498127865371846e-02, -1.921832547992020e-02, -1.757503493177813e-02, -1.663361957431794e-02, -1.713136383968665e-02, -1.713136383968665e-02, -1.438168132408406e-02, -4.579634526705815e-01, -2.857117463894104e-01, -1.336782465057316e-01, -1.919760851967931e-01, -1.919760851967931e-01, -4.299849539250742e-02, -1.144206241863258e+01, -7.421643846772166e-01, -1.789034221796212e-01, -2.519086869519369e+00, -2.519086869519344e+00, 5.640954083890546e+01, 3.628553022889866e+03, 1.037615631448997e+02, -2.467959430747929e+00, 6.490245331940301e+02, 6.490245331940311e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_r2scan01_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scan01", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_r2scan01_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scan01", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.007539620117699e-03, 1.007538119432879e-03, 1.007502312946990e-03, 1.007525497127197e-03, 1.007539097407989e-03, 1.007539097407989e-03, 9.197060320055676e-03, 9.198312731554133e-03, 9.235920527883804e-03, 9.232336259030281e-03, 9.197286523978932e-03, 9.197286523978932e-03, 1.483468072175607e-02, 1.480004110370430e-02, 1.413739314083560e-02, 1.539478794943850e-02, 1.482371081651074e-02, 1.482371081651074e-02, 1.430451747675425e-01, 1.446403868415287e-01, 3.220105624170135e-03, 1.506264878354994e-02, 1.439632890192958e-01, 1.439632890192958e-01, 4.489575557757255e-02, 3.692423762984343e-02, 5.602653928492551e-03, 2.112149841003780e-05, 4.431515027116947e-02, 4.431515027116954e-02, 4.119219848722261e-03, 4.122247340271367e-03, 4.119361040724722e-03, 4.121724374111074e-03, 4.120994154333936e-03, 4.120994154333936e-03, 1.226463195205095e-02, 1.168905836925447e-02, 1.197009416963268e-02, 1.149421492798571e-02, 1.224344807280176e-02, 1.224344807280176e-02, 5.536229796233936e-02, 5.769163213781053e-02, 6.209030650756441e-02, 6.674177793930526e-02, 5.020258719276687e-02, 5.020258719276687e-02, 1.713675856066503e-02, 1.347291259921918e-01, 1.945067260009757e-02, 2.067060707783638e-02, 6.465440978941256e-02, 6.465440978941256e-02, 1.026543242078582e-04, 4.738695668629441e-05, 3.970469896704107e-04, 1.705827777645298e-03, 2.694825953635097e-05, 2.694825953635085e-05, 4.202591801811323e-02, 4.161559281674475e-02, 4.186823218466266e-02, 4.197878702479045e-02, 4.193371060019316e-02, 4.193371060019316e-02, 4.623504198852151e-02, 4.086130034547138e-02, 4.194612557359816e-02, 4.344749685929226e-02, 4.283014357609988e-02, 4.283014357609987e-02, 5.798679112060392e-02, 9.372778861067776e-02, 9.631774772607984e-02, 8.957666255136378e-02, 9.225960123092609e-02, 9.225960123092609e-02, 6.389881245905471e-02, 1.447564046999451e-02, 5.500268924892891e-03, 9.912428227180345e-02, 2.365215792119121e-02, 2.365215792119103e-02, 8.782817292788546e-05, 2.598452280100752e-06, 3.317780960542708e-04, 2.100274714117265e-02, 2.385175347188114e-05, 2.385175347188114e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
