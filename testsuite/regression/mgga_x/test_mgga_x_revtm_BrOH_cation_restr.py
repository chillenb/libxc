
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_revtm_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revtm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.226539889831326e+01, -2.226545248199450e+01, -2.226575657670697e+01, -2.226495984801216e+01, -2.226536791670441e+01, -2.226536791670441e+01, -3.402824241866779e+00, -3.402829517342053e+00, -3.403211595508780e+00, -3.405084245493783e+00, -3.403805679916048e+00, -3.403805679916048e+00, -6.675470118509564e-01, -6.672867241531426e-01, -6.620709428829565e-01, -6.669390508806662e-01, -6.653452361125962e-01, -6.653452361125962e-01, -2.012690366524570e-01, -2.027883038354492e-01, -7.851801918322400e-01, -1.605809088862794e-01, -1.753276568977669e-01, -1.753276568977670e-01, -2.020871544484298e-02, -2.070075903240850e-02, -6.299260212742981e-02, -1.425805445179859e-02, -1.613562798540718e-02, -1.613562798540718e-02, -5.413798361777051e+00, -5.414335486746660e+00, -5.413835569108398e+00, -5.414309262533524e+00, -5.414063762933397e+00, -5.414063762933397e+00, -2.105102504803775e+00, -2.121805955535322e+00, -2.103537316546399e+00, -2.118361482422823e+00, -2.115117445849915e+00, -2.115117445849915e+00, -5.907936281323356e-01, -6.106574775188355e-01, -5.356238849899791e-01, -5.340593555776671e-01, -5.993154953649841e-01, -5.993154953649841e-01, -1.239776220098967e-01, -2.101101761403547e-01, -1.164404634297427e-01, -1.809077286978737e+00, -1.377367266870165e-01, -1.377367266870165e-01, -1.210329368983784e-02, -1.373930191348930e-02, -9.794261553591071e-03, -8.588083350197066e-02, -1.175338590115104e-02, -1.175338590115105e-02, -5.887911081069619e-01, -6.014226465244309e-01, -5.999339337640891e-01, -5.970609728277205e-01, -5.987570044462609e-01, -5.987570044462609e-01, -5.470390843356266e-01, -5.241696805674446e-01, -5.405998957491600e-01, -5.566522016428820e-01, -5.482387269487708e-01, -5.482387269487708e-01, -6.371335105460786e-01, -2.569157358860061e-01, -2.954922895935190e-01, -3.590850111645917e-01, -3.267547935931330e-01, -3.267547935931329e-01, -4.740182632742379e-01, -6.234376339586915e-02, -7.559078352717810e-02, -3.412915106636604e-01, -1.011875795799685e-01, -1.011875795799685e-01, -2.471721902451563e-02, -6.300131975877084e-03, -9.046364431324123e-03, -9.756361736181503e-02, -1.098085451437882e-02, -1.098085451437881e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_revtm_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revtm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.793000941865748e+01, -2.793013826462903e+01, -2.793092991944525e+01, -2.792902371524286e+01, -2.792999115308098e+01, -2.792999115308098e+01, -4.153721226085036e+00, -4.153776340564828e+00, -4.155170946854692e+00, -4.153735900032676e+00, -4.153983069901755e+00, -4.153983069901755e+00, -7.848543133130065e-01, -7.838353509347945e-01, -7.600606205119448e-01, -7.646877362114026e-01, -7.640027077649240e-01, -7.640027077649240e-01, -1.985396364383739e-01, -2.015987736454809e-01, -9.281201205817632e-01, -1.556077172367971e-01, -1.699404810375201e-01, -1.699404810375203e-01, -1.069572168585796e-02, -1.114821032833792e-02, -4.664000401360045e-02, -9.336822638831215e-03, -9.623021201958607e-03, -9.623021201958638e-03, -7.014861963944700e+00, -7.018368364710646e+00, -7.015258881109413e+00, -7.018345310505821e+00, -7.016518169203906e+00, -7.016518169203906e+00, -2.326371440138322e+00, -2.356479540397123e+00, -2.316631760682314e+00, -2.343888089173747e+00, -2.347666314484239e+00, -2.347666314484239e+00, -7.087718577919814e-01, -7.944051414148161e-01, -6.491667122265445e-01, -6.996000059933392e-01, -7.237142207710956e-01, -7.237142207710956e-01, -1.113646756006032e-01, -1.974704591093215e-01, -1.044415745171633e-01, -2.391700740681599e+00, -1.244102501758026e-01, -1.244102501758026e-01, -1.262969930617229e-02, -1.179649972628103e-02, -6.670233658550687e-03, -7.334749244830159e-02, -9.624967884945506e-03, -9.624967884945521e-03, -7.359397463743295e-01, -7.605449282399348e-01, -7.544914684111556e-01, -7.468466164214006e-01, -7.509488343540125e-01, -7.509488343540125e-01, -7.183616695021623e-01, -6.144518718467405e-01, -6.550853737555780e-01, -6.909908997674697e-01, -6.728744337502196e-01, -6.728744337502196e-01, -8.328331364071059e-01, -2.510815772779543e-01, -3.030200615021813e-01, -4.037769516634639e-01, -3.501611317805229e-01, -3.501611317805227e-01, -5.389224326293361e-01, -4.201044702160227e-02, -5.986392459871153e-02, -3.957259851056404e-01, -8.757442055530153e-02, -8.757442055530154e-02, -2.177244057418073e-02, -6.570530153183747e-03, -5.249535560906922e-03, -7.974676783497443e-02, -8.044568830620576e-03, -8.044568830620562e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revtm_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revtm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-8.193875290775244e-09, -8.193747172984901e-09, -8.191376809808750e-09, -8.193219268229154e-09, -8.192511618602598e-09, -8.192511618602598e-09, -1.155478481903785e-05, -1.155809428008905e-05, -1.165189058290603e-05, -1.167745973611138e-05, -1.165114197021730e-05, -1.165114197021730e-05, -3.266715599130679e-03, -3.276214903658001e-03, -3.534102429712334e-03, -3.810551822429648e-03, -3.705468939242849e-03, -3.705468939242849e-03, -8.336671215208934e-01, -8.194925737013501e-01, -1.607459789354010e-03, -1.152929417711857e+00, -1.082455089350622e+00, -1.082455089350624e+00, -3.830899495727334e+03, -3.399029672198778e+03, -3.240022121771970e+01, -9.738815269111768e+03, -7.346061404175171e+03, -7.346061404175157e+03, -1.164872416649166e-06, -1.154607872397595e-06, -1.161640434814318e-06, -1.152669348725355e-06, -1.161114584399730e-06, -1.161114584399730e-06, -9.661513691010293e-05, -9.279328418606572e-05, -9.386484572486866e-05, -9.026474097587310e-05, -9.593877704102357e-05, -9.593877704102357e-05, -2.528213313832188e-02, -2.187900319451431e-02, -2.427276763108539e-02, -1.554168717299089e-02, -2.564386653673481e-02, -2.564386653673481e-02, -2.609089322814505e+00, -6.044808295148898e-01, -3.113827914385729e+00, -1.183161425690207e-04, -2.392487481721698e+00, -2.392487481721700e+00, 2.370356118288294e+03, -4.556931446139656e+03, -4.048493616611999e+04, -8.932374036710730e+00, -1.091802274812526e+04, -1.091802274812532e+04, -1.961657956517540e-01, -5.896770392690551e-02, -8.468197665490440e-02, -1.211191416168267e-01, -1.006483319619198e-01, -1.006483319619198e-01, -1.177117837368646e-01, -2.391445980664366e-02, -2.528994353868906e-02, -3.551342771805609e-02, -2.902927017164374e-02, -2.902927017164374e-02, -1.379185384620832e-02, -3.094700586560549e-01, -1.971414355557540e-01, -1.194661181613724e-01, -1.542522963907350e-01, -1.542522963907347e-01, -4.603006484049258e-02, -4.149167236301492e+01, -1.517672711627211e+01, -1.745510758689500e-01, -6.106123986732973e+00, -6.106123986732973e+00, -4.136538311566308e+02, 7.015802497996415e+04, -7.556939686131907e+04, -8.135267844175381e+00, -2.112777472086195e+04, -2.112777472086199e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revtm_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revtm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revtm_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revtm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [8.672673062442665e-04, 8.672634768291520e-04, 8.669924181157716e-04, 8.670406102173420e-04, 8.670517190531279e-04, 8.670517190531279e-04, 2.545759750286303e-03, 2.547281949957210e-03, 2.591669455441723e-03, 2.613331686223679e-03, 2.594515536885192e-03, 2.594515536885192e-03, -1.300023790569754e-03, -1.273731147989859e-03, -4.214230427685701e-04, 5.486455418207693e-04, 1.560859922136887e-04, 1.560859922136887e-04, 3.894301494315217e-02, 3.970385785789309e-02, -1.306837142926730e-03, 1.647884774269191e-02, 2.663326617971947e-02, 2.663326617971947e-02, 7.891029245840689e-03, 8.024093350259809e-03, 9.740634538506189e-03, 2.552886905906185e-03, 4.781135421729609e-03, 4.781135421729573e-03, 1.216298177139169e-03, 1.199969995771748e-03, 1.209149595156337e-03, 1.194939538567217e-03, 1.211367858045592e-03, 1.211367858045592e-03, 6.810073732305669e-03, 6.703855036000943e-03, 6.473425032161854e-03, 6.344980402484574e-03, 6.931949918349264e-03, 6.931949918349264e-03, 4.626494526810055e-02, 3.211369561339074e-02, 2.590160915618317e-02, 1.059473586823882e-02, 4.988951784380028e-02, 4.988951784380028e-02, 1.283534289088612e-02, 2.815208594183861e-02, 1.143169015198449e-02, 2.999417258772096e-03, 2.355695372782408e-02, 2.355695372782411e-02, -2.791646043901555e-03, -7.556139171479000e-04, 3.963515440755244e-03, 9.339160666603612e-03, -1.885367750639517e-04, -1.885367750639223e-04, 3.659017036864022e-01, 1.483165944617929e-01, 2.036111919151887e-01, 2.708623046388189e-01, 2.345948171731452e-01, 2.345948171731452e-01, 8.850331361508475e-02, 2.690776493336691e-02, 3.641940163080626e-02, 6.590692021820564e-02, 4.783315937324919e-02, 4.783315937324915e-02, 2.136988021033473e-02, 2.957179155515024e-02, 3.170468115819829e-02, 4.026068400771652e-02, 3.760119307030003e-02, 3.760119307030004e-02, 4.090781994007996e-02, 1.333969333442445e-02, 9.303867301452245e-03, 5.568682751460469e-02, 1.635608355980821e-02, 1.635608355980820e-02, -1.368801350592117e-03, -1.846821527875230e-03, 4.181546448850937e-03, 2.112061456573922e-02, 1.973011622501631e-03, 1.973011622501632e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
