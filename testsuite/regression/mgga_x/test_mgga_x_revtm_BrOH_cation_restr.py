
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_revtm_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revtm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.990284384292491e+01, -1.990290414832544e+01, -1.990318745241165e+01, -1.990229023665228e+01, -1.990275819108814e+01, -1.990275819108814e+01, -3.234885111927923e+00, -3.234881175166949e+00, -3.234836413994232e+00, -3.235147061058704e+00, -3.234777573821765e+00, -3.767277380507541e+00, -6.327226958405345e-01, -7.617501251762985e-01, -7.501733859347239e-01, -7.523024253506068e-01, -7.519107289377888e-01, -7.519107289377888e-01, -2.041527988686344e-01, -2.062795678733537e-01, -7.432491533491977e-01, -1.698520745962280e-01, -1.828158355799253e-01, -1.828158355799253e-01, -2.029097566246288e-02, -2.085407438420382e-02, -6.574530922244322e-02, -1.497469569704344e-02, -1.665168875138908e-02, -1.665168875138908e-02, -5.414459167479523e+00, -5.414982361950120e+00, -5.414481497063521e+00, -4.865766894238440e+00, -5.414724788037376e+00, -5.414724788037376e+00, -1.826563924991372e+00, -1.838436959564466e+00, -1.818004476360177e+00, -1.828439610747778e+00, -1.837265514022692e+00, -2.154009114071374e+00, -6.226290624281117e-01, -6.656868313260705e-01, -5.843482100734758e-01, -5.985821197410159e-01, -6.305165501343618e-01, -5.536240283020432e-01, -8.730802198330978e-02, -2.140259584215771e-01, -8.078222312603796e-02, -2.026253997860323e+00, -1.426053544550025e-01, -1.426053544550024e-01, -2.572013675976807e-03, -1.495116296278135e-02, -1.034396046541144e-02, -5.435661600571691e-02, -3.001872273808379e-03, -1.272447608348234e-02, -6.094116481792475e-01, -6.069075746872459e-01, -5.509013935164437e-01, -6.084514605325804e-01, -6.080846129760659e-01, -6.080846129760659e-01, -5.929936513692800e-01, -5.267303379753994e-01, -5.442191377275075e-01, -5.622580814654226e-01, -5.529185244153699e-01, -4.902336727440728e-01, -7.004844274351891e-01, -2.081901524671133e-01, -3.022750830545424e-01, -3.245834195025964e-01, -3.378219024414237e-01, -3.378219024414238e-01, -4.214491301806519e-01, -6.377784389623166e-02, -7.937734858185297e-02, -3.618027725119519e-01, -6.918525092876952e-02, -1.057967488430039e-01, -2.691929860613316e-02, -6.614637781125880e-03, -9.311313543031462e-03, -1.004854681431104e-01, -1.172352834542589e-02, -1.172352834542587e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_revtm_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revtm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.679514921253195e+01, -2.679522869631830e+01, -2.679560320713228e+01, -2.679442050531596e+01, -2.679503721815955e+01, -2.679503721815955e+01, -4.243672813528907e+00, -4.243714498524978e+00, -4.244897552674182e+00, -4.244801740840931e+00, -4.244370819577617e+00, -4.243609884717562e+00, -8.249473810798220e-01, -7.880878685850429e-01, -7.591640202461264e-01, -7.672134095615455e-01, -7.683729929822719e-01, -7.683729929822719e-01, -2.001741862232941e-01, -2.031682985189041e-01, -9.792671824307142e-01, -1.482336928004111e-01, -1.700421398175285e-01, -1.700421398175285e-01, -1.055789173811186e-02, -1.088499164425518e-02, -4.550924456743952e-02, -8.911132096628503e-03, -9.974995719553586e-03, -9.974995719553586e-03, -6.916202013249565e+00, -6.919593212893838e+00, -7.025177198877472e+00, -6.539317695030229e+00, -6.917906168970921e+00, -6.917906168970921e+00, -2.379195606056713e+00, -2.397275797931917e+00, -2.366321742965875e+00, -2.381915413512347e+00, -2.395587840178262e+00, -2.376709998330796e+00, -7.401511604748622e-01, -8.351349767769609e-01, -6.684834027093478e-01, -7.230749052527329e-01, -7.685511182941813e-01, -7.428756752803370e-01, -1.162525202652605e-01, -1.997551202156341e-01, -1.075849127323528e-01, -2.448551948556100e+00, -1.241721907573304e-01, -1.241721907573303e-01, -3.429347936729121e-03, -8.888918188500954e-03, -6.180198445864600e-03, -7.243579252229959e-02, -4.002484866872259e-03, -7.593725721063396e-03, -8.054424884478550e-01, -8.056559231660830e-01, -7.373415314466281e-01, -8.010550753246140e-01, -7.992376280917054e-01, -8.121545393966662e-01, -7.825968494346353e-01, -6.121967320816476e-01, -6.676089717483431e-01, -7.178404862842676e-01, -6.917655769849244e-01, -6.599455939733533e-01, -8.665513292407442e-01, -2.741485945882333e-01, -3.065308979860649e-01, -4.225870112858249e-01, -3.605506363469447e-01, -3.575753929651289e-01, -5.539803667842991e-01, -4.388243003162347e-02, -5.712665499862295e-02, -4.108571812035038e-01, -9.214492972303123e-02, -8.529160657001475e-02, -1.638169077335435e-02, -3.889049427460601e-03, -5.514790973262908e-03, -8.031082000777889e-02, -6.998000644903292e-03, -6.998000644903275e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revtm_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revtm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.707426424642853e-09, -7.707516799106504e-09, -7.707821118345345e-09, -7.706490520596611e-09, -7.707201270065161e-09, -7.707201270065161e-09, -5.350814532029945e-06, -5.351162648455074e-06, -5.360201469119047e-06, -5.354552581844036e-06, -5.357380828687827e-06, -8.711581015352892e-06, -4.319059668295285e-03, -4.365827510579000e-03, -4.618664673741045e-03, -4.643506824535067e-03, -4.538164509981243e-03, -4.538164509981243e-03, -7.814795125603273e-01, -7.647033643743110e-01, -2.634280535693930e-03, -1.370714615241246e+00, -1.053984832173467e+00, -1.053984832173468e+00, -3.884561045625168e+03, -3.489046657383210e+03, -3.426442120361112e+01, -1.065953065104775e+04, -7.019004095271313e+03, -7.019004095271313e+03, -2.200012850624649e-06, -2.198645398958572e-06, -1.033507888221382e-06, -2.917958023092471e-06, -2.199323648407188e-06, -2.199323648407188e-06, -5.214526958581532e-05, -5.060985393642231e-05, -5.339550538806455e-05, -5.190104995002353e-05, -5.074688366645502e-05, -7.930988508207510e-05, -1.233770666950814e-02, -9.675452570280107e-03, -1.532675200250325e-02, -1.156087295150178e-02, -9.223952595633448e-03, -8.908942857141007e-03, -1.581954200230911e+01, -5.665100373778018e-01, -2.165721471746616e+01, -1.112754093134929e-04, -2.376852216437616e+00, -2.376852216437616e+00, -2.153889435835979e+07, -1.071677224820636e+04, -4.701047180229576e+04, -1.067995932067984e+02, -1.160729083920594e+07, -2.050555081170039e+04, -1.278259367394223e-02, 6.297480717818414e-04, -3.554536220877631e-02, -1.309064970677063e-02, -1.320246518996959e-02, 5.690248794289999e-03, -1.436158492179850e-02, -2.360785659284604e-02, -1.635827367680369e-02, -1.152650823852323e-02, -1.427459891079990e-02, -1.815656026624516e-02, -7.875230171483746e-03, -4.250568821025683e-01, -1.760044826175567e-01, -5.244656489734720e-02, -1.160406038317894e-01, -1.227528896861700e-01, -1.880583105515157e-02, -3.837822123109289e+01, -1.704476035712230e+01, -1.034119018561958e-01, -4.028941569646997e+01, -6.575949539801122e+00, -1.044677802818372e+03, -2.766293705751591e+05, -7.096599086283961e+04, -7.941367823116514e+00, -2.846429065094676e+04, -2.846429065094686e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revtm_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revtm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.512876698603946e-04, 1.512909742429678e-04, 1.513040329238508e-04, 1.512551447606752e-04, 1.512809940600774e-04, 1.512809940600774e-04, -5.225726566097737e-04, -5.223543308762094e-04, -5.164889225259821e-04, -5.188357462897971e-04, -5.186395242454984e-04, 3.417104169681604e-03, -1.783151990649067e-03, 1.171369026986162e-02, 1.171051559632804e-02, 1.206270648091680e-02, 1.154276907289392e-02, 1.154276907289392e-02, 3.725069439638687e-02, 3.825673079149406e-02, -4.759877219736932e-04, 3.044185921944608e-02, 3.137999365597193e-02, 3.137999365597192e-02, 8.165457637466724e-03, 8.554772644986141e-03, 1.273281496351288e-02, 3.708901941560940e-03, 4.855647645990772e-03, 4.855647645990772e-03, 3.519472269300398e-03, 3.524261929678727e-03, 9.066829541447270e-04, 7.491246436051065e-04, 3.521868617820570e-03, 3.521868617820570e-03, -1.083420099123554e-03, -1.068521711539211e-03, -1.087370123306083e-03, -1.081942927911303e-03, -1.069945973538299e-03, 5.600107761340872e-03, 2.431091682733604e-02, 2.687766267154886e-02, 2.309446993631265e-02, 1.713039891691839e-02, 1.602385208402249e-02, 2.194760160547095e-03, -8.635200724392642e-05, 2.733661046349499e-02, -6.919027833287595e-05, 7.847355078358218e-03, 2.703903374041335e-02, 2.703903374041335e-02, -2.109051734803023e-09, 3.482689211477076e-03, 6.840645915662192e-03, -2.469929194470896e-05, -1.329705219855343e-08, 5.214873522285209e-03, 3.653947665822926e-02, -1.081378842784765e-02, 7.252314009870239e-03, 3.575902681825525e-02, 3.545394099539221e-02, -2.546637501580180e-02, 3.721204273187322e-02, 2.686997748994704e-02, 1.829502789689258e-02, 1.348322788441531e-02, 1.664162794825811e-02, 5.041988333154972e-03, 2.440465104150771e-02, -1.839072324197883e-03, 2.931962392601593e-02, -6.096889403263850e-03, 2.806843701219265e-02, 3.101210822546410e-02, -3.684247366638658e-03, 1.247914381704917e-02, 1.426178257736928e-02, 3.647441310880058e-02, -7.417927240826981e-05, 2.265092186468051e-02, 5.341592203745201e-03, 1.711095981570952e-03, 4.068919087539445e-03, 2.259406185173975e-02, 5.735480166284283e-03, 5.735480166284283e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
