
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_revscanl_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revscanl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.324580096702264e+01, -2.324586708742471e+01, -2.324617898051714e+01, -2.324519486708767e+01, -2.324570797308381e+01, -2.324570797308381e+01, -3.396753061251745e+00, -3.396876849307973e+00, -3.400601603378004e+00, -3.403001385741061e+00, -3.400825363741092e+00, -3.400825363741092e+00, -5.959566521204637e-01, -5.952572883139597e-01, -5.795245971783859e-01, -5.926593523394423e-01, -5.891273118358700e-01, -5.891273118358700e-01, -1.731538030285208e-01, -1.757563849761373e-01, -6.501535198326807e-01, -1.114904367171376e-01, -1.372804151701005e-01, -1.372804151701005e-01, -2.552188476744324e-03, -2.747295846767874e-03, -2.358129908719122e-02, -1.195608587521479e-03, -1.673362436892074e-03, -1.673362436892075e-03, -4.019502587278433e+00, -4.155635205044261e+00, -5.669116631231431e+00, -4.078262615440517e+00, -5.669614688500466e+00, -4.790585081277736e+00, -2.098304041494569e+00, -1.710563583393397e+00, -1.966441258309734e+00, -1.991114325088003e+00, -1.971858845396374e+00, -2.132793534839323e+00, -4.698411835003345e-01, -4.809944560287447e-01, -4.359323196828123e-01, -5.210013771098162e-01, -5.675754198573425e-01, -5.343202977495762e-01, -9.153169642404384e-02, -1.423677641052908e-01, -8.405464384170167e-02, -1.740083478375621e+00, -1.102609773514828e-01, -1.102609773514828e-01, -8.681207643403189e-04, -1.368550564353739e-03, -1.124746073159127e-03, -5.400133795568249e-02, -1.166937122388990e-03, -1.431240238548801e-03, -5.495066689130439e-01, -5.496881294147221e-01, -5.496619345458515e-01, -5.492633652844875e-01, -5.497264004895871e-01, -5.496404900305427e-01, -5.335914959242356e-01, -5.177316807556894e-01, -4.115068014736999e-01, -5.864045363494035e-01, -4.763090003978355e-01, -4.302292753325503e-01, -5.198762855101292e-01, -2.333218432895196e-01, -2.790270528429936e-01, -3.769482717382608e-01, -2.543902928073558e-01, -2.662207923624075e-01, -4.470730991834685e-01, -2.848282858952529e-02, -3.232563082998602e-02, -3.244138669579596e-01, -7.164956997527733e-02, -7.164956997527730e-02, -5.093184635296616e-03, -2.781342337921351e-04, -7.348615860741568e-04, -6.669856620032594e-02, -1.368988042149675e-03, -1.368988042149482e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_revscanl_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revscanl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.111037863094956e+01, -3.111046211041324e+01, -3.111086528537639e+01, -3.110962261520762e+01, -3.111026919235731e+01, -3.111026919235731e+01, -3.728422970524653e+00, -3.728280283231774e+00, -3.724162311344905e+00, -3.718969853665846e+00, -3.722134103947762e+00, -3.722134103947762e+00, -7.793744285030285e-01, -7.782797434904825e-01, -7.537099368520995e-01, -7.608472549587251e-01, -7.598066833301179e-01, -7.598066833301179e-01, -8.298163130992775e-02, -9.160140307101536e-02, -8.381744109849423e-01, -1.449781313735651e-01, -9.489791996878816e-02, -9.489791996878798e-02, -4.587673986166997e-03, -4.922407961276444e-03, -3.792267679022918e-02, -2.204321907246998e-03, -3.048633735505602e-03, -3.048633735505602e-03, -4.948129134385161e+00, -5.460329445954717e+00, -7.576216698804750e+00, -4.870045047763508e+00, -7.576778195835129e+00, -6.442928079204142e+00, -2.842990011787669e+00, -2.250382853319693e+00, -1.824452333874394e+00, -1.883065363989453e+00, -1.850147695826139e+00, -2.888055625355531e+00, -5.600374807860581e-01, -6.242916750156445e-01, -5.214787819166468e-01, -7.103531377842962e-01, -7.319022925970534e-01, -7.164169389222738e-01, -1.354100939855419e-01, -1.974167172856462e-01, -1.250585043451883e-01, -2.447519149253069e+00, -1.594756907019615e-01, -1.594756907019615e-01, -1.624228286924135e-03, -2.519705509539976e-03, -2.054293089607793e-03, -8.283180129130478e-02, -2.139803154587872e-03, -2.541984849332545e-03, -7.273896909847055e-01, -7.202003146172230e-01, -7.224878745161480e-01, -7.240745313548501e-01, -7.237699428594482e-01, -7.235188399377530e-01, -7.089502754136057e-01, -5.717649784731293e-01, -4.958596174520589e-01, -7.840158773605057e-01, -6.341490748851656e-01, -5.120117503238334e-01, -6.248621936806363e-01, -3.248211407544929e-01, -3.783918950725403e-01, -5.090311123348804e-01, -3.365322575833367e-01, -3.478394765029243e-01, -4.548731641618083e-01, -4.608272175493978e-02, -5.090111927231875e-02, -3.682822272423242e-01, -1.069724071051921e-01, -1.069724071051920e-01, -9.010921842486877e-03, -5.274120284280099e-04, -1.366697196317881e-03, -1.002017469246492e-01, -2.503362222321484e-03, -2.503362222320837e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revscanl_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revscanl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([2.936362243906490e-10, 2.936289934800413e-10, 2.936021815337042e-10, 2.937096510034635e-10, 2.936525804544874e-10, 2.936525804544874e-10, -2.361407780093353e-05, -2.362124929399129e-05, -2.380952011214520e-05, -2.383566295650328e-05, -2.379763567790920e-05, -2.379763567790920e-05, -5.942426048247051e-03, -5.910012095698778e-03, -5.275527877171246e-03, -6.275053042153906e-03, -6.007130617781784e-03, -6.007130617781784e-03, -2.778220747814089e+00, -2.651495327984946e+00, -1.620400018811862e-03, -5.989777332444988e-01, -3.085920784186895e+00, -3.085920784186902e+00, 1.757359502229246e+02, 1.647152537048861e+02, 3.763560440972735e+00, 4.477281908111218e+02, 3.409506138863198e+02, 3.409506138863200e+02, -1.666938795953106e-06, -1.907804798999114e-06, 7.038291921649308e-08, -1.314405249347388e-06, 7.020197499204038e-08, -3.790290848455297e-06, -1.345645249562092e-05, -4.080019450297339e-05, -1.913393835012132e-04, -1.779386380690652e-04, -1.951661650183175e-04, 5.140142981082587e-06, -5.294053593408312e-03, -1.038857858329149e-02, -6.467725314779037e-03, -2.886881978128047e-02, -3.809674453569222e-03, -1.636030314444269e-02, 4.503274081672056e-01, 4.304757241278930e-02, 5.661713020555217e-01, -2.254436353644198e-04, 3.234145588352046e-01, 3.234145588352046e-01, 8.930396660456628e+02, 5.897922003300831e+02, 2.635327057058568e+03, 1.722240345816200e+00, 1.107237198546602e+03, 9.498309120662295e+02, -7.610422430602582e-03, -6.793302798401710e-03, -7.088434631504996e-03, -7.268016446285577e-03, -7.224290168613685e-03, -7.210016703237292e-03, -8.792082988964308e-03, -3.023084988148713e-02, -8.529611397792167e-03, 6.547019341148246e-04, -2.801707033286676e-02, -6.258810379247750e-03, -5.394660271830339e-03, 2.894252814337753e-02, -2.088719059395973e-02, 5.401154517330873e-03, -2.513300262723010e-02, -7.809477590829050e-02, -7.466938263449439e-02, 5.270832889657282e+00, 1.990791217215548e+00, -1.934530962783063e-01, 1.000048621680057e+00, 1.000048621680024e+00, 1.048741449469415e+02, 1.539974146378993e+04, 2.813261994137617e+03, 1.171465933227538e+00, 1.784970374755689e+03, 1.784970374746168e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revscanl_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revscanl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 2.736645703036839e-03, 2.737596548957953e-03, 2.763207805708731e-03, 2.770795427592704e-03, 2.762772544825523e-03, 2.762772544825523e-03, 4.182597967120549e-03, 4.156147892999155e-03, 3.689059300550896e-03, 4.701590860965409e-03, 4.414161905402477e-03, 4.414161905402477e-03, 4.423026467519911e-02, 4.411285759541513e-02, 6.377642235514253e-04, 4.918475106130858e-03, 3.087289873047262e-02, 3.087289873047264e-02, -5.797495149499013e-07, -6.522163434992697e-07, 2.073782123251565e-05, -3.029741938654988e-07, -4.787204510067224e-07, -4.787204510067171e-07, 8.488637556695877e-08, 1.163604378618844e-04, 0.000000000000000e+00, -1.107604809534673e-05, 0.000000000000000e+00, 1.227868014416357e-03, -4.832857381703985e-06, 6.884283034319224e-04, 4.226370901502148e-03, 4.012865330570281e-03, 4.433511127898086e-03, 3.536205250063581e-06, -8.105900733665060e-05, 1.319590474547516e-04, -8.247151845717430e-05, 1.150435245814382e-02, 2.682825866751788e-04, 7.455001135149121e-03, 0.000000000000000e+00, -3.561290651408917e-05, 0.000000000000000e+00, 3.422134306692638e-03, 0.000000000000000e+00, 0.000000000000000e+00, -4.426328118306133e-07, -4.869077146358230e-12, -3.111965908559674e-11, 0.000000000000000e+00, -9.696406090515949e-07, -2.053917974849923e-07, -7.578228660796899e-12, -5.314168151099052e-11, -1.649690060186402e-13, -6.676578843384322e-09, -5.642233599855198e-10, -4.971645243226735e-14, -5.006203492076007e-13, 1.085060154650504e-02, -6.935685876923088e-05, 0.000000000000000e+00, 9.193867538899963e-03, -8.052354341366532e-05, -1.007385491006730e-04, 0.000000000000000e+00, -2.110383519488135e-05, 0.000000000000000e+00, 1.077545620383792e-03, 5.717341175789760e-03, 2.010997567286283e-02, 0.000000000000000e+00, 1.996000986520890e-05, 2.002626361288846e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.680696789287510e-08, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
