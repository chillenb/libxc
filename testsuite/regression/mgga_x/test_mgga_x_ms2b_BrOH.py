
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ms2b_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2b", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.010182272097036e+01, -2.010190105631752e+01, -2.010228375318962e+01, -2.010100347140485e+01, -2.010186371552724e+01, -2.010186371552724e+01, -3.223612207089524e+00, -3.223624331784473e+00, -3.224102325897000e+00, -3.224175278798593e+00, -3.223630907065525e+00, -3.771771769394601e+00, -6.118562076733390e-01, -7.525337979865000e-01, -7.395188695289803e-01, -7.421538234619466e-01, -7.528480142422166e-01, -7.528480142422166e-01, -2.082646293405088e-01, -2.103671927184477e-01, -7.295992807454588e-01, -1.649382036094402e-01, -2.089051746894500e-01, -2.089051746894500e-01, -1.418539766857706e-02, -1.485567698346644e-02, -5.923192235065469e-02, -6.817435900557553e-03, -1.470081590669946e-02, -1.470081590669946e-02, -5.446942541000473e+00, -5.447384660858331e+00, -5.446986448094143e+00, -5.027435886256887e+00, -5.447170653952236e+00, -5.447170653952236e+00, -1.808468906316707e+00, -1.822041930119907e+00, -1.802938895096666e+00, -1.813561871743310e+00, -1.824801254356321e+00, -2.153540501812857e+00, -6.197249224890059e-01, -6.636069928266848e-01, -5.929051729810066e-01, -6.107237015152379e-01, -6.401476603529058e-01, -5.596552224978145e-01, -8.783415732111455e-02, -2.179324207281551e-01, -8.672168484739580e-02, -2.035760741655071e+00, -1.412351465584675e-01, -1.412351465584675e-01, -4.250253615381254e-03, -7.515299031634079e-03, -5.632504921660906e-03, -5.456668572014329e-02, -4.425798944133900e-03, -6.847812377388073e-03, -6.206601171003563e-01, -6.192856554478439e-01, -6.059566606487334e-01, -6.201602289945443e-01, -6.199710931013436e-01, -6.199710931013436e-01, -6.014194103127580e-01, -5.381072625892830e-01, -5.564255542658167e-01, -5.734403052059202e-01, -5.647753210646609e-01, -5.008810796216731e-01, -6.984845934896250e-01, -2.112564951198462e-01, -3.087758367826100e-01, -3.245620856973622e-01, -3.429473793831160e-01, -3.429473793831159e-01, -4.205719032397118e-01, -5.505218068952240e-02, -7.363785480824052e-02, -3.589459470706741e-01, -7.126410623059723e-02, -1.030619387760308e-01, -1.663006266244504e-02, -2.058299249183375e-03, -3.909530117780207e-03, -9.833872103825904e-02, -5.820035025255119e-03, -5.820035025255111e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ms2b_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2b", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.862763443795105e+01, -2.862783684244421e+01, -2.862877869139601e+01, -2.862547715395476e+01, -2.862774067849436e+01, -2.862774067849436e+01, -4.336901511642791e+00, -4.336887164092290e+00, -4.336604074927945e+00, -4.337061704616096e+00, -4.336918159702225e+00, -4.619061030435780e+00, -8.298908196894942e-01, -8.772053686871396e-01, -8.550600687677732e-01, -8.611005257682454e-01, -8.777618058482549e-01, -8.777618058482549e-01, -2.406183749880938e-01, -2.436594226220577e-01, -9.863800321870417e-01, -1.890257156873549e-01, -2.415293305186082e-01, -2.415293305186082e-01, -1.883563049012008e-02, -1.971810646573575e-02, -7.582359819405506e-02, -9.084719516735429e-03, -1.951242642623449e-02, -1.951242642623449e-02, -7.082273704037543e+00, -7.084131331863266e+00, -7.082472772132371e+00, -7.318867813163111e+00, -7.083213916879407e+00, -7.083213916879407e+00, -2.446450935176770e+00, -2.462773328794615e+00, -2.439785099333034e+00, -2.452648411654702e+00, -2.465937801989863e+00, -2.610736607606174e+00, -7.776479600523072e-01, -8.536532044776667e-01, -7.342396380850588e-01, -7.719159009683193e-01, -8.104517578862437e-01, -7.542599501275007e-01, -1.175150831324799e-01, -2.472219454912049e-01, -1.160481257695785e-01, -2.579592375830916e+00, -1.626894559990792e-01, -1.626894559990792e-01, -5.667072658596756e-03, -1.001258276306926e-02, -7.503484073048556e-03, -7.285674889953732e-02, -5.901142615440048e-03, -9.123852601644694e-03, -8.222501186741765e-01, -8.154169742115998e-01, -8.380902399620795e-01, -8.197433514391792e-01, -8.187952497298870e-01, -8.187952497298870e-01, -7.949952568346200e-01, -6.728286998386778e-01, -7.076993590040911e-01, -7.407443847191796e-01, -7.238191824460821e-01, -7.018562955253944e-01, -8.923202304669042e-01, -2.859208793727403e-01, -3.613342895410269e-01, -4.388342847499728e-01, -4.093236138382317e-01, -4.093236138382317e-01, -5.647099259492037e-01, -7.092042315527138e-02, -9.288274918479048e-02, -4.404769338071061e-01, -9.530167069187248e-02, -1.233518947191761e-01, -2.209457027572736e-02, -2.744229966775646e-03, -5.211083448493460e-03, -1.177220139878503e-01, -7.755268129035837e-03, -7.755268129035825e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms2b_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2b", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.470553123821159e-08, -1.470608103653379e-08, -1.470836449154773e-08, -1.469943587517620e-08, -1.470582168268879e-08, -1.470582168268879e-08, -7.631663105154823e-06, -7.630814637148776e-06, -7.604057352772023e-06, -7.612018358364834e-06, -7.631282408806840e-06, -2.890556826541330e-06, -6.197788102512595e-03, -1.567284548119024e-03, -1.606373177072566e-03, -1.616960596536400e-03, -1.566327391269234e-03, -1.566327391269234e-03, -2.541157388194764e-01, -2.479655462953218e-01, -2.898034573084037e-03, -3.138039200863580e-01, -2.521605959011070e-01, -2.521605959011070e-01, -3.423021424422772e+00, -3.394337741049053e+00, -1.089464388860972e+00, -1.221181912781120e+00, -3.550159968654287e+00, -3.550159968654286e+00, -7.256621148276181e-07, -7.255664324276825e-07, -7.256542159974351e-07, -6.446674434494477e-06, -7.256107900121542e-07, -7.256107900121542e-07, -8.210996021945544e-05, -7.906175118960367e-05, -8.336893785662705e-05, -8.097950675077461e-05, -7.840238393953804e-05, -2.660898093523123e-05, -4.138992963234585e-03, -3.254535978626993e-03, -4.834698196707654e-03, -4.435104276761737e-03, -3.682722978460637e-03, -9.172535797079162e-03, -1.210626469801043e+01, -1.678836850433108e-01, -1.276548605444356e+01, -3.604974768594776e-05, -5.248034821270566e-01, -5.248034821270566e-01, -2.129212597569802e+06, -1.540620260405426e+00, -6.054248940478249e+00, -7.950425317642151e+01, -1.810992929785766e+06, -1.898455534251631e+00, -4.384201212683977e-03, -4.398284512243934e-03, -3.321910810802641e-02, -4.389389688899922e-03, -4.391302691180321e-03, -4.391302691180321e-03, -4.962745876648599e-03, -7.241294920522351e-03, -6.491660246230849e-03, -5.865055759782098e-03, -6.175741577247102e-03, -2.924950041115986e-02, -2.629282022871801e-03, -4.192917051638787e-01, -5.630526749551651e-02, -7.876909594699938e-02, -3.972223202421644e-02, -3.972223202421644e-02, -2.561542140877303e-02, -1.040214136706359e+00, -8.510714717259871e-01, -3.538470526649606e-02, -2.779623613165550e+01, -8.852423339636885e-01, -1.338623476848065e+00, -1.706206541858565e+00, -3.352176430739284e+00, -1.063684959499459e+00, -2.669265127073975e+00, -2.669265127073972e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms2b_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2b", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.070136196191433e-03, 1.070217302820710e-03, 1.070569499857098e-03, 1.069250265439391e-03, 1.070178938899902e-03, 1.070178938899902e-03, 2.917389796330940e-04, 2.915752622743141e-04, 2.865701998457069e-04, 2.885013246518830e-04, 2.916921606123409e-04, 1.612422612110239e-18, 1.316400276925396e-03, -2.514243840861864e-18, 2.946959086436884e-18, -1.714852094577986e-17, -1.331445028881017e-17, -1.331445028881017e-17, 1.745777832854854e-17, 2.122525628298089e-17, 5.907793243960759e-04, -6.990886084984020e-18, 9.799160723831095e-18, 9.799160723831095e-18, 6.482122887847143e-23, -5.160681647199078e-22, -1.096107281349861e-19, -4.382482937742958e-25, -3.555667975204697e-22, 8.953929488697612e-23, -4.604296022277481e-18, 5.648084847143376e-19, -3.132723600914532e-19, 8.927212954372054e-03, 1.685992175937741e-19, 1.685992175937741e-19, 6.751594725615435e-04, 6.580921805272583e-04, 6.804569669328340e-04, 6.697611289559686e-04, 6.528628450989189e-04, 4.970958285861603e-18, 2.212791189198137e-17, -1.178075644920525e-17, -2.817005701918948e-17, 1.969767731357325e-17, 1.144322573747282e-17, 3.825890469843184e-03, 2.413037365173652e-04, 5.858057256106622e-18, 2.720452715542181e-04, 4.127895720768114e-18, 5.694997016452979e-18, 5.694997016452979e-18, 5.832437819476451e-08, -2.595079354111327e-24, -4.800088760270007e-24, 6.209035387948076e-05, 6.716939743769767e-08, 2.723872679133997e-24, 2.012870054051306e-17, -4.912181808285712e-18, 8.386534614375091e-02, -1.431298151461932e-17, -1.845623420269885e-19, -1.845623420269885e-19, 1.590344431284120e-17, -2.053087162136025e-17, 3.241554837810577e-17, 3.441111471183781e-17, -2.625828418554481e-17, 2.802175523863231e-02, -1.390514251964522e-17, 2.489747413263979e-03, -2.325888176526873e-17, 3.723693414464548e-03, -1.052227234844209e-17, -2.276111348654891e-17, 1.859859668300323e-03, -9.209073910087756e-21, -2.294271795700177e-20, 9.537391793311885e-18, 2.215499723221366e-04, -8.669631356950467e-19, 1.577850545630441e-22, 4.062470861852816e-27, -2.906116933950185e-26, -8.045143857466810e-19, -1.322219558994017e-25, 2.438164837009295e-24])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
