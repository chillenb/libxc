
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ms2b_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2b", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.244375550856878e+01, -2.244380119050017e+01, -2.244407008025521e+01, -2.244332166039776e+01, -2.244377904355020e+01, -2.244377904355020e+01, -3.405538495502346e+00, -3.405558660304300e+00, -3.406424770719823e+00, -3.408192141990780e+00, -3.405548610636350e+00, -3.405548610636350e+00, -6.641584462427323e-01, -6.639315559542743e-01, -6.594309464432790e-01, -6.641934240116119e-01, -6.640734232143677e-01, -6.640734232143677e-01, -2.055233374272288e-01, -2.070899615041782e-01, -7.787128200533053e-01, -1.578096269632372e-01, -2.059620903490370e-01, -2.059620903490370e-01, -1.418479832861327e-02, -1.485480719342073e-02, -5.904684321634915e-02, -6.816575970184639e-03, -1.470007038051145e-02, -1.470007038051145e-02, -5.446482905119806e+00, -5.446930295463669e+00, -5.446533400782543e+00, -5.446881174228093e+00, -5.446705575167414e+00, -5.446705575167414e+00, -2.116867044515038e+00, -2.132476211259884e+00, -2.115830338829698e+00, -2.127904976441948e+00, -2.128748473805398e+00, -2.128748473805398e+00, -5.879444438243762e-01, -6.163233257203986e-01, -5.443975216740835e-01, -5.493921454375221e-01, -6.155549655347619e-01, -6.155549655347619e-01, -1.240422140175351e-01, -2.161431135063689e-01, -1.220070288642163e-01, -1.814534218680274e+00, -1.391862502499744e-01, -1.391862502499744e-01, -6.575975064696726e-03, -7.514352354168225e-03, -5.632190174109289e-03, -8.042977650941074e-02, -6.846707997813097e-03, -6.846707997813097e-03, -6.185018867328064e-01, -6.173880142124236e-01, -6.177955355932874e-01, -6.181025553288270e-01, -6.179483121337198e-01, -6.179483121337198e-01, -5.951628397736719e-01, -5.366830828213159e-01, -5.540958783707545e-01, -5.699194740967801e-01, -5.616830674122690e-01, -5.616830674122690e-01, -6.364925410982925e-01, -2.644899642530589e-01, -3.040487348110905e-01, -3.621704683688624e-01, -3.338698379259439e-01, -3.338698379259439e-01, -4.757623580043424e-01, -5.497206472340878e-02, -7.323936303441583e-02, -3.348136342748422e-01, -1.019350478057253e-01, -1.019350478057253e-01, -1.661768182097980e-02, -2.058258126216695e-03, -3.909474535846894e-03, -9.716901497453320e-02, -5.819181289082285e-03, -5.819181289082276e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ms2b_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2b", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.864200205054864e+01, -2.864209733063747e+01, -2.864270631143631e+01, -2.864115533800842e+01, -2.864205059465806e+01, -2.864205059465806e+01, -4.191024760713375e+00, -4.191099741942503e+00, -4.193452070263740e+00, -4.191911416071783e+00, -4.191071623434652e+00, -4.191071623434652e+00, -7.817288767954085e-01, -7.806660073808108e-01, -7.530807447739463e-01, -7.577328217165389e-01, -7.813419901312449e-01, -7.813419901312449e-01, -2.231177540109525e-01, -2.236817047714259e-01, -9.421345289080454e-01, -1.662849142596370e-01, -2.230813763767173e-01, -2.230813763767173e-01, -1.883323175869613e-02, -1.971462477650616e-02, -7.507099731129221e-02, -9.081281881979686e-03, -1.950944232533307e-02, -1.950944232533307e-02, -7.077755105110143e+00, -7.079682687072300e+00, -7.078018416820548e+00, -7.079513189068313e+00, -7.078654587118073e+00, -7.078654587118073e+00, -2.426054553029943e+00, -2.467079937211739e+00, -2.432250673912200e+00, -2.465479710748027e+00, -2.446269697296287e+00, -2.446269697296287e+00, -7.230563508196310e-01, -8.500570005243340e-01, -6.727268382436921e-01, -7.367412810375430e-01, -7.649778887851654e-01, -7.649778887851654e-01, -1.413238422333270e-01, -2.361052554188383e-01, -1.382632807946702e-01, -2.461857705257585e+00, -1.532424491549523e-01, -1.532424491549523e-01, -8.761045618319965e-03, -1.000879725162049e-02, -7.502224773487379e-03, -9.797495721640562e-02, -9.119438578312163e-03, -9.119438578312163e-03, -8.233631310320552e-01, -8.124818825540939e-01, -8.161918273513754e-01, -8.191988187044273e-01, -8.176784212967970e-01, -8.176784212967970e-01, -8.018877845907191e-01, -6.593459746812030e-01, -6.914763986741328e-01, -7.264215977619929e-01, -7.071063740912416e-01, -7.071063740912416e-01, -8.747539207652925e-01, -2.949275391405191e-01, -3.319831628592510e-01, -4.085721414768104e-01, -3.660688560622069e-01, -3.660688560622069e-01, -5.478367608460624e-01, -7.059504676263280e-02, -9.125873199127341e-02, -3.954095777002820e-01, -1.185597813129215e-01, -1.185597813129215e-01, -2.204521091917849e-02, -2.744065494994631e-03, -5.210861101252223e-03, -1.127970700096678e-01, -7.751855807586260e-03, -7.751855807586249e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms2b_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2b", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.665172039885381e-09, -4.665082324691591e-09, -4.663507653681381e-09, -4.664908569296299e-09, -4.665135721701252e-09, -4.665135721701252e-09, -1.280880492900766e-05, -1.281359738914325e-05, -1.296350865061163e-05, -1.300341577264395e-05, -1.280923226577723e-05, -1.280923226577723e-05, -3.551078379577536e-03, -3.556247983815884e-03, -3.764496832064240e-03, -3.958485169239360e-03, -3.553080877282118e-03, -3.553080877282118e-03, -5.946640860636143e-01, -6.336935524346964e-01, -2.177110226005600e-03, -8.069993097381476e-01, -6.101120585382676e-01, -6.101120585382676e-01, -3.566322765771737e+00, -3.575423814226379e+00, -1.511794771673248e+00, -2.537222229731287e+00, -3.713676716970270e+00, -3.713676716970270e+00, -7.804445718330938e-07, -7.799039990105550e-07, -7.796950014320198e-07, -7.793147721458582e-07, -7.811036116372988e-07, -7.811036116372988e-07, -7.710345164947252e-05, -7.002524573820602e-05, -7.212392532348454e-05, -6.632035975905070e-05, -7.881555530463379e-05, -7.881555530463379e-05, -2.759663820595480e-02, -2.673235871545381e-02, -2.794282892745108e-02, -2.454269740657785e-02, -2.429777737954041e-02, -2.429777737954041e-02, -9.016166289219665e-01, -2.815627959542379e-01, -1.038033550680976e+00, -1.721138935547004e-04, -9.664779450614204e-01, -9.664779450614204e-01, -2.691649757084387e+00, -2.697902408209157e+00, -7.717538936653563e+00, -1.523231341029323e+00, -3.984062458410853e+00, -3.984062458410851e+00, -1.436544637842693e-02, -1.286470185685974e-02, -1.336963534936333e-02, -1.378381371497650e-02, -1.357803114690615e-02, -1.357803114690614e-02, -2.681070635409447e-02, -1.388201138220783e-02, -1.668733958321682e-02, -2.012513966474169e-02, -1.890937276500333e-02, -1.890937276500335e-02, -1.854607315081740e-02, -1.465947536354137e-01, -1.525305651166875e-01, -1.383277674723408e-01, -1.535792327566117e-01, -1.535792327566118e-01, -5.012454496920171e-02, -1.252205120239871e+00, -1.297302884519755e+00, -2.039132853675256e-01, -1.487251458814058e+00, -1.487251458814058e+00, -2.695820965688875e+00, -4.637843639778079e+00, -3.992944983628989e+00, -1.843139376663275e+00, -5.817798063974178e+00, -5.817798063974165e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms2b_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2b", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([3.280215850716413e-04, 3.280134188833767e-04, 3.278099912251014e-04, 3.279336038812202e-04, 3.280188473039567e-04, 3.280188473039567e-04, 3.392452417579129e-03, 3.394909756541459e-03, 3.473263831593905e-03, 3.502063591618759e-03, 3.392737056873493e-03, 3.392737056873493e-03, 5.513741475581058e-05, 6.175326343866467e-05, 5.290754396305550e-04, 1.304119314003421e-03, 5.768461491189899e-05, 5.768461491189899e-05, 2.688987776609978e-02, 3.126916235819605e-02, 7.203174705043924e-04, 5.692329688961508e-03, 2.843906430508471e-02, 2.843906430508471e-02, 5.185826484357679e-08, 8.224072726748168e-08, 9.721995339486669e-05, 2.206780390772615e-09, 7.206860705084655e-08, 7.206860705084762e-08, 1.215328647997945e-04, 1.206154988425281e-04, 1.198977358584637e-04, 1.192730528626380e-04, 1.231408489118167e-04, 1.231408489118167e-04, 5.208197212590995e-03, 4.685928358321373e-03, 4.680684652552634e-03, 4.232613259661027e-03, 5.565559649177994e-03, 5.565559649177994e-03, 5.424794870343926e-02, 6.582823189341387e-02, 3.811010788576445e-02, 3.408500805379349e-02, 5.672403427139265e-02, 5.672403427139265e-02, 2.475343321267720e-03, 8.890158208945963e-03, 2.853625849084335e-03, 7.758288022351405e-03, 5.647829231935725e-03, 5.647829231935725e-03, 3.744047625396778e-09, 6.242036994144597e-09, 7.249965941889317e-09, 3.383971004045893e-04, 4.284446569826494e-09, 4.284446569826472e-09, 3.239063061316864e-02, 2.712014635583728e-02, 2.888958637416261e-02, 3.034388223016449e-02, 2.961918684094090e-02, 2.961918684094089e-02, 6.145389269762922e-02, 1.274775001454656e-02, 2.206377651153303e-02, 3.424971422456745e-02, 2.893496681441757e-02, 2.893496681441763e-02, 4.651666488852500e-02, 9.326736866942022e-03, 2.604428411827197e-02, 5.312930226438509e-02, 4.270509983587043e-02, 4.270509983587042e-02, 4.735168333032747e-02, 3.652687990228766e-05, 2.503824194494517e-04, 6.502201786560512e-02, 1.915168714262318e-03, 1.915168714262306e-03, 2.355441632197118e-07, 3.385228041608832e-12, 3.515600383602227e-10, 2.082528050847701e-03, 2.892226054896623e-09, 2.892226054896627e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
