
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_12_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_12", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.140672611587175e+01, -2.140684499964755e+01, -2.140736813850749e+01, -2.140560345166677e+01, -2.140652880929073e+01, -2.140652880929073e+01, -3.086156471036380e+00, -3.086252119442589e+00, -3.088836346311419e+00, -3.088069716385674e+00, -3.087830929016986e+00, -3.879455449089222e+00, -5.664287876453176e-01, -7.086554176947391e-01, -6.816238914140810e-01, -6.910659171801441e-01, -6.889854054340775e-01, -6.889854054340775e-01, -1.770610968224039e-01, -1.804337009510462e-01, -6.647800243702613e-01, -1.281626983909442e-01, -1.463079950876145e-01, -1.463079950876145e-01, -5.685076902330448e-03, -5.983849355657924e-03, -3.308205759358418e-02, -3.283098758078068e-03, -4.125556303166402e-03, -4.125556303166402e-03, -5.866437202602250e+00, -5.866924045225771e+00, -5.866456976706939e+00, -5.376174526916822e+00, -5.866685765477672e+00, -5.866685765477672e+00, -1.700776791406146e+00, -1.719650090877524e+00, -1.686944355044162e+00, -1.703401266901595e+00, -1.718101408857766e+00, -2.176704070150867e+00, -6.641025623550264e-01, -7.208209784020247e-01, -6.091182944398509e-01, -6.388907618813600e-01, -6.754929981543122e-01, -5.684290037113601e-01, -8.186559564849344e-02, -1.721788542752845e-01, -7.592241412270757e-02, -2.175709165588468e+00, -1.036016350828399e-01, -1.036016350828399e-01, -2.458157616692678e-03, -3.209511135125085e-03, -2.454184002036129e-03, -5.149640619265811e-02, -2.868894478338417e-03, -2.956519372887715e-03, -6.556276747515325e-01, -6.555914571699847e-01, -6.295033841326542e-01, -6.556872101706890e-01, -6.556913804130159e-01, -6.556913804130159e-01, -6.383948416124310e-01, -5.549876939441758e-01, -5.843963623406001e-01, -6.089404173746789e-01, -5.970160388057236e-01, -5.187820422273687e-01, -7.569569560335839e-01, -1.860761624290358e-01, -2.754647359784447e-01, -3.015665897278523e-01, -3.259720155738276e-01, -3.259720155738275e-01, -4.043755840930826e-01, -3.165837349642356e-02, -4.322665670107071e-02, -3.750347407783722e-01, -6.506315292319097e-02, -6.899406419804385e-02, -8.023661299953123e-03, -8.579046665763429e-04, -1.800801064836238e-03, -6.472558461036927e-02, -2.735707315171842e-03, -2.735707315171840e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_12_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_12", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.172441919642144e+01, -3.172452312013613e+01, -3.172500621170706e+01, -3.172346055318796e+01, -3.172426747987297e+01, -3.172426747987297e+01, -4.681094894479383e+00, -4.681343212916831e+00, -4.687959934848677e+00, -4.685713032035030e+00, -4.685467274530673e+00, -4.605093428237281e+00, -7.700508731830386e-01, -8.767958530597740e-01, -8.470587520616436e-01, -8.572215348895573e-01, -8.550231243897783e-01, -8.550231243897783e-01, -2.210905569052018e-01, -2.251706173060318e-01, -8.516188933903240e-01, -1.605989723260262e-01, -1.831439410925074e-01, -1.831439410925075e-01, -7.177847774594275e-03, -7.555031820845003e-03, -4.173188833266218e-02, -4.145282724473995e-03, -5.208929469999846e-03, -5.208929469999846e-03, -7.185393580499461e+00, -7.189523604177189e+00, -7.185620802935406e+00, -7.751979005428456e+00, -7.187466506180109e+00, -7.187466506180109e+00, -2.521383246397951e+00, -2.563025034688573e+00, -2.489762907657584e+00, -2.526872200245957e+00, -2.559963095459286e+00, -2.610500943135060e+00, -7.780550087727551e-01, -8.659553908870593e-01, -7.184220848328501e-01, -7.485889559784007e-01, -7.924340733121911e-01, -8.687666654585630e-01, -1.066048928932035e-01, -2.155097476686939e-01, -9.913183651336750e-02, -2.556197241107975e+00, -1.299348039731667e-01, -1.299348039731667e-01, -3.277462395033320e-03, -4.052374710235420e-03, -3.098666929757538e-03, -6.789361831344772e-02, -3.824935987954754e-03, -3.732924862959673e-03, -8.508697103444333e-01, -8.307014705930510e-01, -8.708819193943111e-01, -8.434348984513661e-01, -8.404774090303552e-01, -8.404774090303552e-01, -8.256385545247007e-01, -6.515203721480664e-01, -6.866310525779540e-01, -7.329651436235409e-01, -7.075720371727137e-01, -7.791876465022136e-01, -8.993583954590328e-01, -2.388565477338967e-01, -3.421637616045244e-01, -4.458261884871231e-01, -3.991082668564915e-01, -3.991082668564914e-01, -6.155762081337069e-01, -3.993869777721363e-02, -5.450009295003850e-02, -4.436073184180185e-01, -8.501444778043504e-02, -8.676076147391652e-02, -1.013033952015376e-02, -1.083212887379888e-03, -2.273726714847944e-03, -8.141452709124121e-02, -3.454124637636437e-03, -3.454124637636438e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_12_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_12", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.650542102770853e-08, -1.650537561097725e-08, -1.650506103277872e-08, -1.650574823930765e-08, -1.650540407696121e-08, -1.650540407696121e-08, -1.338814835755548e-05, -1.339101304324488e-05, -1.346562799648599e-05, -1.343059666223025e-05, -1.343993636484828e-05, -1.658120599821555e-05, -4.139846928969028e-03, -5.430506659412209e-03, -4.961589269917920e-03, -5.265978110917897e-03, -5.192763606882993e-03, -5.192763606882993e-03, -6.602979365815745e-01, -6.719956902139604e-01, -9.458633138638026e-04, -4.990895782340702e-01, -5.734075086433300e-01, -5.734075086433301e-01, -1.575182139416007e+02, -1.452106344537723e+02, -3.568225854469603e+00, -4.034810777024002e+02, -3.017619342129500e+02, -3.017619342129500e+02, -5.516231629014109e-06, -5.516755222273883e-06, -5.516294068137154e-06, -5.081574843451530e-06, -5.516482262308716e-06, -5.516482262308716e-06, -1.099920828837801e-04, -1.113366621617663e-04, -1.086777655559599e-04, -1.100284900610438e-04, -1.113828135200472e-04, -1.393137212352752e-04, -2.731904044882671e-02, -2.354660464210812e-02, -3.071128343340569e-02, -3.212020813860289e-02, -2.673537931829280e-02, -2.285988603798870e-02, -1.489591284243012e-01, -3.172461278183519e-01, -1.408893512938811e-01, -2.545875808369899e-04, -7.695189883823776e-01, -7.695189883823780e-01, 1.147935031500476e+02, -3.969067771990900e+02, -1.931499270981723e+03, -4.765669837248783e-02, 1.670731003399962e+02, -8.243433982567448e+02, -3.559880027883424e-02, -3.579870957056117e-02, -3.437207408690335e-02, -3.569176429450578e-02, -3.572219471584256e-02, -3.572219471584256e-02, -3.965203120587384e-02, -4.951791388384330e-02, -4.894467523683455e-02, -4.641493739807610e-02, -4.794098012225246e-02, -4.214263839020959e-02, -1.874962912462128e-02, -1.627741166165432e-01, -1.918739098292009e-01, -1.081923346927799e-01, -1.757912294342638e-01, -1.757912294342639e-01, -4.818231417247570e-02, -3.902181342387762e+00, -2.070436449636441e+00, -2.023730646479855e-01, -2.346731419626109e-01, -1.328195897578927e+00, -5.474120808575037e+01, -6.141413020372961e+03, -2.361324115847002e+03, -1.533565006806685e+00, -1.149435124221928e+03, -1.149435124221931e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_12_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_12", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.865776082781337e-03, 1.865791504467842e-03, 1.865850153444761e-03, 1.865622267909948e-03, 1.865743076565369e-03, 1.865743076565369e-03, 4.256973418100303e-03, 4.258978449101556e-03, 4.311879670190232e-03, 4.290083745494231e-03, 4.292864979943634e-03, 1.342264704679644e-02, 1.413749933557535e-03, 3.500666530797979e-02, 2.961856308558919e-02, 3.218705444373311e-02, 3.158459009389290e-02, 3.158459009389290e-02, 7.340727503088304e-02, 7.832037879295234e-02, -1.410087037286779e-03, 2.241061372302336e-02, 3.800186019818357e-02, 3.800186019818350e-02, 5.485931215563908e-04, 5.898035785953505e-04, 2.500588883337526e-03, 2.704434375656423e-04, 4.014396954783928e-04, 4.014396954783928e-04, 1.060222116911506e-02, 1.059463474125460e-02, 1.060180074299777e-02, 8.470103104327250e-03, 1.059841829445324e-02, 1.059841829445324e-02, 4.888446592621017e-03, 5.348366352467856e-03, 4.533589713608428e-03, 4.939300192346904e-03, 5.323300534221500e-03, 2.127354618446429e-02, 9.362214736024817e-02, 8.818120819565183e-02, 9.159798724536775e-02, 9.756279692780624e-02, 9.344294186245022e-02, 5.165569214563281e-02, -1.391689814307969e-03, 3.420273216990787e-02, -1.163941644216210e-03, 2.919599389240228e-02, 1.816228491309444e-02, 1.816228491309441e-02, -4.709994714044459e-08, 2.485387060026169e-04, 5.408521123823316e-04, -4.780239905581548e-04, -2.968016322404495e-07, 4.035471590809880e-04, 8.695206137102157e-02, 9.036053278617395e-02, 8.151810597069134e-02, 8.821508594351715e-02, 8.871615140019473e-02, 8.871615140019475e-02, 8.981051612634917e-02, 1.062342598948531e-01, 1.087137059225494e-01, 1.041955671595531e-01, 1.072846159714256e-01, 7.000246985909910e-02, 8.457724340867546e-02, -4.944987184381034e-03, 7.525097227808571e-02, 2.616673610866449e-02, 1.022626261556748e-01, 1.022626261556748e-01, 3.540186401857382e-02, 2.392821033924577e-03, 3.274663629010669e-03, 1.442317101841277e-01, -1.261924820874667e-03, 8.959486150654792e-03, 5.361732615508214e-04, 7.342967234125421e-05, 2.611535760198673e-04, 8.505752008745425e-03, 4.458009478800045e-04, 4.458009478800073e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
