
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_12_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_12", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.398308740564821e+01, -2.398315563749773e+01, -2.398357592602535e+01, -2.398256380511583e+01, -2.398307743167062e+01, -2.398307743167062e+01, -3.414292870696624e+00, -3.414394644412379e+00, -3.417366401311822e+00, -3.418645351047713e+00, -3.417240461394965e+00, -3.417240461394965e+00, -6.120900958101569e-01, -6.115388998375001e-01, -5.993245149286590e-01, -6.089699829728773e-01, -6.061557763692005e-01, -6.061557763692005e-01, -1.747428168829632e-01, -1.775143021986058e-01, -6.845981385309671e-01, -1.247869130771480e-01, -1.425864783623794e-01, -1.425864783623793e-01, -5.681733845535013e-03, -5.977441196710019e-03, -3.283050895548641e-02, -3.259405194353287e-03, -4.106708657749110e-03, -4.106708657749109e-03, -5.863122360299266e+00, -5.863647603573385e+00, -5.863211066569505e+00, -5.863672117089942e+00, -5.863355919785782e+00, -5.863355919785782e+00, -2.093655958407942e+00, -2.122656612126934e+00, -2.086677539547352e+00, -2.113067064511503e+00, -2.113018224130724e+00, -2.113018224130724e+00, -6.194939435845820e-01, -6.664723376027589e-01, -5.458520957197911e-01, -5.556008553022443e-01, -6.323833433437880e-01, -6.323833433437880e-01, -8.596114510628379e-02, -1.701442873768937e-01, -7.937970593280390e-02, -1.902453108807426e+00, -1.021719588879403e-01, -1.021719588879403e-01, -2.482299395563482e-03, -3.164429203805423e-03, -2.434209663956249e-03, -5.321701854438188e-02, -2.918688490770968e-03, -2.918688490770968e-03, -6.484445792750120e-01, -6.487022685438193e-01, -6.486841409596577e-01, -6.486033621586654e-01, -6.486470059271349e-01, -6.486470059271349e-01, -6.246142443911404e-01, -5.492185293302917e-01, -5.759153905772141e-01, -5.978469395246895e-01, -5.866647540830142e-01, -5.866647540830142e-01, -6.875982381305890e-01, -2.208199044490865e-01, -2.685644051401967e-01, -3.536633270339214e-01, -3.120026712063077e-01, -3.120026712063078e-01, -4.814197178759851e-01, -3.153369608488472e-02, -4.281632594306583e-02, -3.464856277666893e-01, -6.815389324049524e-02, -6.815389324049526e-02, -7.906505446464682e-03, -8.336649527418727e-04, -1.793343502661767e-03, -6.422601554521436e-02, -2.708373540676427e-03, -2.708373540676425e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_12_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_12", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.914245489353135e+01, -2.914257243830585e+01, -2.914299674714400e+01, -2.914124639129975e+01, -2.914217754012375e+01, -2.914217754012375e+01, -4.683872549732436e+00, -4.684015235397649e+00, -4.687829404098394e+00, -4.686559953092703e+00, -4.686274772742006e+00, -4.686274772742006e+00, -8.119496296086433e-01, -8.106611039274655e-01, -7.829447011303805e-01, -7.976441936389196e-01, -7.937711149927855e-01, -7.937711149927855e-01, -2.193072769443662e-01, -2.229535821831632e-01, -8.802304896490494e-01, -1.584530236695664e-01, -1.802471011932101e-01, -1.802471011932099e-01, -7.180425861700372e-03, -7.559970926738485e-03, -4.188001593512928e-02, -4.163962915684023e-03, -5.223656297701132e-03, -5.223656297701129e-03, -7.189519701246321e+00, -7.193607009807708e+00, -7.189661456427340e+00, -7.193271479306837e+00, -7.191613873865811e+00, -7.191613873865811e+00, -2.593366938514672e+00, -2.615106480769691e+00, -2.577561228268083e+00, -2.596867725317443e+00, -2.613367192168103e+00, -2.613367192168103e+00, -8.103064481802860e-01, -9.244592708836664e-01, -7.399816318862755e-01, -8.046140364447654e-01, -8.273186202701699e-01, -8.273186202701699e-01, -1.095284926766594e-01, -2.139719756145192e-01, -1.012823413091168e-01, -2.772470026361875e+00, -1.292817601789066e-01, -1.292817601789067e-01, -3.240336079891036e-03, -4.088651561357464e-03, -3.114425781013286e-03, -6.806511257093310e-02, -3.763191348028244e-03, -3.763191348028245e-03, -8.603431965915594e-01, -8.396685733883701e-01, -8.467329853642561e-01, -8.527478439198263e-01, -8.497219202657641e-01, -8.497219202657641e-01, -8.436055446920542e-01, -6.548495256153227e-01, -6.943299087776272e-01, -7.457511673196029e-01, -7.183340281915138e-01, -7.183340281915137e-01, -9.674576052161061e-01, -2.769376382262014e-01, -3.376581159438269e-01, -4.587762015077317e-01, -3.940718200453524e-01, -3.940718200453524e-01, -6.073125261000331e-01, -4.001394668165984e-02, -5.469597921135616e-02, -4.519796622929539e-01, -8.674600685882272e-02, -8.674600685882269e-02, -1.022347887995653e-02, -1.104745057013917e-03, -2.279573284857497e-03, -8.143580025626390e-02, -3.475806259945411e-03, -3.475806259945409e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_12_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_12", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.833174135630152e-08, -1.833164792496198e-08, -1.833119520313479e-08, -1.833259728567028e-08, -1.833186780164480e-08, -1.833186780164480e-08, -1.464797758409404e-05, -1.465105781072916e-05, -1.473214420789847e-05, -1.470257685153342e-05, -1.470827061480387e-05, -1.470827061480387e-05, -4.553046413951929e-03, -4.536815027539015e-03, -4.168606076780058e-03, -4.475536256274992e-03, -4.395853797339280e-03, -4.395853797339280e-03, -6.460593399042938e-01, -6.548435613052146e-01, -1.016887399024345e-03, -4.458357771862859e-01, -5.340591340843911e-01, -5.340591340843911e-01, -1.560629245805010e+02, -1.427593121137477e+02, -3.174176665749656e+00, -3.546042379595652e+02, -2.792533832881260e+02, -2.792533832881258e+02, -5.513232162810018e-06, -5.513790045154782e-06, -5.513356920364659e-06, -5.513844038719197e-06, -5.513469000097383e-06, -5.513469000097383e-06, -1.339212878256470e-04, -1.356854584167107e-04, -1.331697948681933e-04, -1.349644774875281e-04, -1.352662985574667e-04, -1.352662985574667e-04, -2.560086066167059e-02, -2.187851655944045e-02, -2.771251433621159e-02, -2.826147132358220e-02, -2.513743625286802e-02, -2.513743625286802e-02, -5.790224348467213e-01, -3.075861697303828e-01, -6.528816384771398e-01, -2.250978258904247e-04, -7.158827515668765e-01, -7.158827515668769e-01, -3.378672073416608e+02, -2.955569102459504e+02, -1.665320440755890e+03, -1.377957406330950e+00, -6.358357320772376e+02, -6.358357320772383e+02, -3.521824492607124e-02, -3.543408224386097e-02, -3.537820939221559e-02, -3.531644740392836e-02, -3.534901793632177e-02, -3.534901793632177e-02, -3.881981760257018e-02, -4.902664253922360e-02, -4.827128665852939e-02, -4.560879208996963e-02, -4.715188917985701e-02, -4.715188917985701e-02, -1.714713752931112e-02, -2.301597286890860e-01, -1.855690367588730e-01, -1.256993983642558e-01, -1.676067773273644e-01, -1.676067773273644e-01, -5.640871401517143e-02, -3.683341433111204e+00, -1.804700500245364e+00, -1.877159638321312e-01, -1.186835383658391e+00, -1.186835383658392e+00, -4.021996277765416e+01, -1.785408626324627e+03, -2.201924994665204e+03, -1.427480809249599e+00, -9.509501071322878e+02, -9.509501071322899e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_12_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_12", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_12_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_12", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.583073803117542e-03, 2.583066597665153e-03, 2.583060602762886e-03, 2.583168825693000e-03, 2.583108401500552e-03, 2.583108401500552e-03, 7.869685575776886e-03, 7.871881530803423e-03, 7.932221398876392e-03, 7.931820498303436e-03, 7.922300822805692e-03, 7.922300822805692e-03, 1.178543051282427e-02, 1.172383406366059e-02, 1.061255569978449e-02, 1.266125903190660e-02, 1.202345528212177e-02, 1.202345528212177e-02, 6.713419578975686e-02, 7.032751837056957e-02, 9.008024852709374e-04, 1.551503222550304e-02, 2.920722224849458e-02, 2.920722224849456e-02, 5.389951167441547e-04, 5.710155693165336e-04, 1.984746197941310e-03, 2.118786621523615e-04, 3.465964155317636e-04, 3.465964155317609e-04, 1.058727461282395e-02, 1.057989517660463e-02, 1.058716681328016e-02, 1.058064196839616e-02, 1.058342137834130e-02, 1.058342137834130e-02, 1.845356736713965e-02, 1.922490363956295e-02, 1.837913095451788e-02, 1.910854939839923e-02, 1.891430992709008e-02, 1.891430992709008e-02, 7.466816969554130e-02, 7.109283788334106e-02, 6.016600773454434e-02, 6.035169943922820e-02, 7.594114079888337e-02, 7.594114079888337e-02, 6.606635703647224e-03, 3.059882228132665e-02, 5.779161832639188e-03, 1.888223713771005e-02, 1.475585836218834e-02, 1.475585836218834e-02, 6.719064974385384e-05, 1.429721457309273e-04, 4.087331074498091e-04, 3.592780672198634e-03, 2.477420428894604e-04, 2.477420428894612e-04, 8.496602850614406e-02, 8.822905343600167e-02, 8.712231729872527e-02, 8.617189729215531e-02, 8.665044991585405e-02, 8.665044991585411e-02, 8.574596820978327e-02, 1.026186624880717e-01, 1.040694396246385e-01, 9.922577550333228e-02, 1.021038149812101e-01, 1.021038149812101e-01, 6.391003806677864e-02, 4.902688974507802e-02, 6.508837670746294e-02, 8.193176542122775e-02, 8.299464544344791e-02, 8.299464544344802e-02, 8.697197094361450e-02, 2.135865459334183e-03, 2.478128609469786e-03, 1.067871746067997e-01, 6.868015736411205e-03, 6.868015736411229e-03, 3.004659783119376e-04, 8.238455373292905e-06, 2.287691541235796e-04, 7.210231513435021e-03, 3.118398442683022e-04, 3.118398442683006e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
