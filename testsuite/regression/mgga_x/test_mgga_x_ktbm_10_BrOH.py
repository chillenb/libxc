
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_10_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.105637613385843e+01, -2.105647012897629e+01, -2.105692313769952e+01, -2.105538768759059e+01, -2.105642536549194e+01, -2.105642536549194e+01, -3.134767773383014e+00, -3.134819674899315e+00, -3.136502204008989e+00, -3.136099106736446e+00, -3.134797090130261e+00, -3.890404096844375e+00, -5.950866035751120e-01, -7.355968723496187e-01, -7.129802566310783e-01, -7.199621803938108e-01, -7.361534193236859e-01, -7.361534193236859e-01, -2.005030868642247e-01, -2.034596592088052e-01, -7.284088231416340e-01, -1.410233866367847e-01, -2.013854643692603e-01, -2.013854643692603e-01, -1.067212055264534e-02, -1.117878084214929e-02, -4.553677233736078e-02, -5.118785505944612e-03, -1.106229071789714e-02, -1.106229071789714e-02, -5.709439473853980e+00, -5.709796224190443e+00, -5.709473774915582e+00, -5.264739540027157e+00, -5.709625272522365e+00, -5.709625272522365e+00, -1.743288143516431e+00, -1.758356412494173e+00, -1.737222954354348e+00, -1.748850056795712e+00, -1.761599567913516e+00, -2.204018414882639e+00, -6.472556252484225e-01, -6.959478326862333e-01, -6.157349497150112e-01, -6.391633192090438e-01, -6.702040900784766e-01, -5.726847684551591e-01, -9.604459428382724e-02, -1.988298690383607e-01, -9.466230093584381e-02, -2.131722649596488e+00, -1.195912196900096e-01, -1.195912196900096e-01, -4.803691744534849e-03, -5.643419241340012e-03, -4.229791321850365e-03, -6.084913766656073e-02, -5.002039534547670e-03, -5.142013255814129e-03, -6.484164928293189e-01, -6.478598675871527e-01, -6.264114889305498e-01, -6.482334956830953e-01, -6.481596620359713e-01, -6.481596620359713e-01, -6.286400197037080e-01, -5.612906687597013e-01, -5.830307753370115e-01, -6.013515924282788e-01, -5.922317363547372e-01, -5.226828252928440e-01, -7.322717238615215e-01, -2.090979718737127e-01, -3.036119964559386e-01, -3.130794671913449e-01, -3.457400571918667e-01, -3.457400571918666e-01, -4.104998711521197e-01, -4.215730796873579e-02, -5.715602112018375e-02, -3.707488015914501e-01, -7.826847647711618e-02, -8.331589865944980e-02, -1.250724774081857e-02, -1.545011845949752e-03, -2.934998512196248e-03, -7.948307284505407e-02, -4.370006875442534e-03, -4.370006875442528e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_10_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.072482869972439e+01, -3.072492419960220e+01, -3.072540321948766e+01, -3.072384040041815e+01, -3.072487859268611e+01, -3.072487859268611e+01, -4.507213196362535e+00, -4.507412870483257e+00, -4.513574486107411e+00, -4.511550282668471e+00, -4.507290065358021e+00, -4.365969961641902e+00, -7.565563613146415e-01, -8.565754010524909e-01, -8.382072557826374e-01, -8.428867389821749e-01, -8.570126834267122e-01, -8.570126834267122e-01, -2.359413300894355e-01, -2.386908957991423e-01, -8.951967959168921e-01, -1.747242989756688e-01, -2.367743141267701e-01, -2.367743141267701e-01, -1.356785635831063e-02, -1.421155501756550e-02, -5.770329782587867e-02, -6.509551896507209e-03, -1.406345380444082e-02, -1.406345380444084e-02, -7.007890680111567e+00, -7.012158717365048e+00, -7.008356255794038e+00, -7.527815371190868e+00, -7.010039314808655e+00, -7.010039314808655e+00, -2.431101313270876e+00, -2.467669749292106e+00, -2.415699890716208e+00, -2.444401844859495e+00, -2.476151113329017e+00, -2.480290853331592e+00, -7.355455287087345e-01, -8.289714165218007e-01, -6.923461838210355e-01, -7.336881195144063e-01, -7.714342340332002e-01, -8.490516239328040e-01, -1.234676353280514e-01, -2.408178426947500e-01, -1.214718614321955e-01, -2.457388112631093e+00, -1.485630083350531e-01, -1.485630083350531e-01, -6.404059487802359e-03, -7.176609580572498e-03, -5.378893026022472e-03, -7.989543834139730e-02, -6.668402171053423e-03, -6.539014433341213e-03, -8.458289110006789e-01, -8.278240423705356e-01, -8.619687103656956e-01, -8.391689785013016e-01, -8.366616758523584e-01, -8.366616758523584e-01, -8.138873536211061e-01, -6.354168229111057e-01, -6.767700664317704e-01, -7.242911099835361e-01, -6.989616409104751e-01, -7.672375547514133e-01, -8.579049365012111e-01, -2.585483560311705e-01, -3.520095917029130e-01, -4.383699084447072e-01, -3.931267227889564e-01, -3.931267227889563e-01, -5.944108341145466e-01, -5.345404614098190e-02, -7.231423913634243e-02, -4.160398949998198e-01, -1.010785368261421e-01, -1.046227969785890e-01, -1.590166451948946e-02, -1.964868270248796e-03, -3.732509844898179e-03, -9.981351409062486e-02, -5.557311791042762e-03, -5.557311791042752e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_10_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.516404773775095e-08, -1.516400042201930e-08, -1.516367164888139e-08, -1.516445902825935e-08, -1.516402363673596e-08, -1.516402363673596e-08, -1.298211910716125e-05, -1.298433849716056e-05, -1.304922578239841e-05, -1.301994109463491e-05, -1.298248817517421e-05, -1.554168919431135e-05, -4.159825478998652e-03, -5.241777033998518e-03, -4.821155683117147e-03, -5.091992817396753e-03, -5.252825346880096e-03, -5.252825346880096e-03, -7.543125659142194e-01, -7.626245533029847e-01, -1.108928617210698e-03, -4.673717815895770e-01, -7.561399795432401e-01, -7.561399795432401e-01, -7.765795904178349e+01, -7.062110458721689e+01, -2.945986495495349e+00, -1.979293893163296e+02, -7.375558198803540e+01, -7.375558198803529e+01, -4.978749583770203e-06, -4.978951714532348e-06, -4.978791248883756e-06, -4.637311516906765e-06, -4.978830336516763e-06, -4.978830336516763e-06, -1.080924643234497e-04, -1.090625612145127e-04, -1.075142916932644e-04, -1.083832647017264e-04, -1.094703716284950e-04, -1.324407278887331e-04, -2.570166199086309e-02, -2.197179313317623e-02, -2.797453497934688e-02, -2.840897130950965e-02, -2.374008567474669e-02, -2.081657619816478e-02, -2.369873795267957e-01, -3.422947347926281e-01, -2.812413443025896e-01, -2.331357270121574e-04, -7.609995514489032e-01, -7.609995514489032e-01, 4.275162837197104e+01, -1.830980095619883e+02, -6.464141262256211e+02, -1.480771137479115e-01, 3.975976227089727e+01, -2.447470900076544e+02, -3.010875708041756e-02, -3.030656879325025e-02, -2.932977740612452e-02, -3.019334197936671e-02, -3.022148525549645e-02, -3.022148525549645e-02, -3.413665257037317e-02, -4.419395228294334e-02, -4.252484505295263e-02, -3.990112236688007e-02, -4.134485360487054e-02, -3.717433423523209e-02, -1.745537429407239e-02, -1.914282918622642e-01, -1.975061773074876e-01, -1.068084513719687e-01, -1.721841463262496e-01, -1.721841463262496e-01, -4.704928203209847e-02, -3.236836423967012e+00, -1.808782203990738e+00, -1.930012813140370e-01, -3.906071690803119e-01, -1.283020715158246e+00, -3.525116609969779e+01, -2.561337464619819e+03, -9.961396448500799e+02, -1.542552684233447e+00, -4.015915982026028e+02, -4.015915982026036e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_10_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.553523556132056e-03, 1.553540432598602e-03, 1.553611030364004e-03, 1.553336874684298e-03, 1.553532468133963e-03, 1.553532468133963e-03, 2.465715780925713e-03, 2.467256522358994e-03, 2.513652830310833e-03, 2.495455396187935e-03, 2.466131717389369e-03, 1.041263374316379e-02, -3.448611766725136e-03, 2.773218525245548e-02, 2.380034293949168e-02, 2.561389040724289e-02, 2.783551658762092e-02, 2.783551658762092e-02, 8.300744752720775e-02, 8.703036759727525e-02, -3.306685864174686e-03, 1.949286922517737e-02, 8.413296807917228e-02, 8.413296807917228e-02, 1.306636008987619e-03, 1.365993797060234e-03, 3.943324781357445e-03, 3.665644678171045e-04, 1.382493203470697e-03, 1.382493203470714e-03, 9.110761033883979e-03, 9.110814873110384e-03, 9.110776645393117e-03, 7.368955624494647e-03, 9.110780691023277e-03, 9.110780691023277e-03, 2.049289018701365e-03, 2.428502976272951e-03, 1.885856365133287e-03, 2.181810776339562e-03, 2.529496349940529e-03, 1.666317142378261e-02, 7.374047158369643e-02, 7.400942087822773e-02, 7.178307157981481e-02, 7.701244740276592e-02, 7.388934401128869e-02, 4.060682835325802e-02, -2.750303941956786e-03, 3.905165846313483e-02, -3.078937751980956e-03, 2.330018608138647e-02, 1.935527119222152e-02, 1.935527119222152e-02, -7.418325787896996e-07, 4.544782377409828e-04, 6.756114879047560e-04, -7.590344183471549e-04, -8.543071436387013e-07, 4.595164979349295e-04, 7.965814737524288e-02, 8.013824679334157e-02, 7.442220199442773e-02, 7.985339960310515e-02, 7.992159525809167e-02, 7.992159525809167e-02, 8.234004751516751e-02, 8.351186705214514e-02, 8.619261141949450e-02, 8.610307022974339e-02, 8.641983671241067e-02, 5.793613738495371e-02, 6.942009154442583e-02, -1.187471947171843e-02, 7.260925615681753e-02, 1.280875816881541e-02, 8.790086986872445e-02, 8.790086986872453e-02, 2.218121399130351e-02, 3.424427614125973e-03, 4.829821891911486e-03, 1.111960931712732e-01, -2.568591890566874e-03, 1.090159944853841e-02, 9.543340979367295e-04, 1.303907346363130e-04, 3.476996348183369e-04, 1.137887814843062e-02, 4.627897138937175e-04, 4.627897138937250e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
