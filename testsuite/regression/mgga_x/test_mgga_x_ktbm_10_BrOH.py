
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_10_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.340631474205115e+01, -2.340636715012646e+01, -2.340672918440740e+01, -2.340587450016149e+01, -2.340634123025909e+01, -2.340634123025909e+01, -3.450976642552504e+00, -3.451033716996484e+00, -3.453017135799859e+00, -3.454515593000526e+00, -3.450996109321441e+00, -3.450996109321441e+00, -6.429617271812179e-01, -6.426325428668164e-01, -6.348452004719540e-01, -6.423045510684442e-01, -6.428435000924204e-01, -6.428435000924204e-01, -1.956498022919784e-01, -1.978246593270299e-01, -7.505185585770779e-01, -1.358476309815399e-01, -1.962478678962391e-01, -1.962478678962391e-01, -1.065893803263328e-02, -1.116138003610424e-02, -4.513834184985466e-02, -5.037930260681307e-03, -1.104731951483956e-02, -1.104731951483956e-02, -5.706401262668209e+00, -5.706791453676590e+00, -5.706477574984528e+00, -5.706778999277950e+00, -5.706552279855447e+00, -5.706552279855447e+00, -2.125296660004839e+00, -2.148770017664916e+00, -2.124576388365043e+00, -2.143319679275044e+00, -2.141940880963457e+00, -2.141940880963457e+00, -6.015442635984856e-01, -6.408807570734107e-01, -5.554998104173391e-01, -5.684929080820399e-01, -6.312572495873952e-01, -6.312572495873952e-01, -1.009748987914934e-01, -1.961163474001431e-01, -9.969429423842488e-02, -1.879395616956801e+00, -1.175489290752141e-01, -1.175489290752141e-01, -4.891411783233352e-03, -5.569455076749349e-03, -4.201820176697437e-03, -6.233541117696702e-02, -5.060014322291593e-03, -5.060014322291593e-03, -6.414770070902056e-01, -6.411913441954887e-01, -6.413116999634914e-01, -6.413890517680297e-01, -6.413488942181321e-01, -6.413488942181321e-01, -6.152474741055479e-01, -5.553355347890525e-01, -5.744840588749306e-01, -5.905447120724330e-01, -5.820409334012504e-01, -5.820409334012505e-01, -6.622615678952146e-01, -2.501887679464099e-01, -2.947229875768505e-01, -3.627089662605846e-01, -3.299972307915244e-01, -3.299972307915243e-01, -4.807208386150496e-01, -4.193843051456570e-02, -5.652113973881047e-02, -3.390305739381183e-01, -8.214338421633466e-02, -8.214338421633466e-02, -1.231359335327635e-02, -1.515492521040914e-03, -2.920534528226375e-03, -7.829263555631297e-02, -4.298035986150832e-03, -4.298035986150825e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_10_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.830455862124908e+01, -2.830467034120771e+01, -2.830511791510559e+01, -2.830328653716215e+01, -2.830461800174747e+01, -2.830461800174747e+01, -4.475503727807515e+00, -4.475616375372685e+00, -4.479136245324855e+00, -4.477795843708694e+00, -4.475558375785075e+00, -4.475558375785075e+00, -7.970568324810806e-01, -7.962783156060241e-01, -7.792681533490579e-01, -7.884533450649798e-01, -7.967773032189759e-01, -7.967773032189759e-01, -2.326804202122479e-01, -2.350667670131012e-01, -9.233997322977020e-01, -1.708763475339106e-01, -2.333614167233794e-01, -2.333614167233794e-01, -1.357690635318165e-02, -1.422344794045842e-02, -5.784348818352480e-02, -6.570355528112755e-03, -1.407368161419082e-02, -1.407368161419084e-02, -7.011670577931108e+00, -7.015901206661081e+00, -7.012084373460050e+00, -7.015374903401222e+00, -7.013864611604094e+00, -7.013864611604094e+00, -2.465844687641457e+00, -2.483080738794531e+00, -2.458566548741122e+00, -2.471806778100587e+00, -2.487684659186917e+00, -2.487684659186917e+00, -7.686810598281413e-01, -8.874468655675718e-01, -7.206493910745497e-01, -7.904976387699597e-01, -8.056033592888439e-01, -8.056033592888439e-01, -1.281684402527896e-01, -2.385671881552397e-01, -1.264217277140098e-01, -2.667781333237206e+00, -1.472914025537341e-01, -1.472914025537341e-01, -6.313871425416790e-03, -7.231449002465139e-03, -5.399182255301236e-03, -8.052604447540194e-02, -6.600584175495180e-03, -6.600584175495179e-03, -8.549724354335947e-01, -8.365146895742237e-01, -8.430454205893776e-01, -8.481610157287934e-01, -8.455965673207519e-01, -8.455965673207519e-01, -8.313105557943523e-01, -6.396776015470127e-01, -6.851910936115485e-01, -7.369167917218487e-01, -7.099986299537401e-01, -7.099986299537404e-01, -9.254885085227127e-01, -2.978425412782974e-01, -3.475706134452196e-01, -4.431215537310820e-01, -3.902356347111308e-01, -3.902356347111305e-01, -5.791115442107307e-01, -5.354479963759640e-02, -7.244895423797819e-02, -4.258425106401991e-01, -1.043154908023661e-01, -1.043154908023661e-01, -1.604066907202239e-02, -1.987630694527603e-03, -3.743031541981597e-03, -9.949901714100189e-02, -5.611567034124069e-03, -5.611567034124055e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_10_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.660136642548149e-08, -1.660128554482701e-08, -1.660085225046160e-08, -1.660219042984937e-08, -1.660132421896477e-08, -1.660132421896477e-08, -1.402836223320336e-05, -1.403074174138780e-05, -1.410075491077647e-05, -1.407586835780200e-05, -1.402871280506337e-05, -1.402871280506337e-05, -4.529941869251670e-03, -4.516720586451522e-03, -4.182697462133082e-03, -4.458018042466902e-03, -4.525751060642735e-03, -4.525751060642735e-03, -7.320394938906251e-01, -7.376788343432520e-01, -1.169075786214413e-03, -3.972705950122524e-01, -7.328291305603712e-01, -7.328291305603712e-01, -7.603978834111761e+01, -6.876572295930309e+01, -2.589299993969124e+00, -1.326666082732548e+02, -7.207424353604691e+01, -7.207424353604685e+01, -4.976380255081831e-06, -4.976607960211148e-06, -4.976454612458833e-06, -4.976627811927792e-06, -4.976433642470436e-06, -4.976433642470436e-06, -1.279756123372068e-04, -1.292386192944933e-04, -1.277285187485639e-04, -1.288648231481912e-04, -1.291077119343462e-04, -1.291077119343462e-04, -2.414591867708241e-02, -2.046103529287488e-02, -2.563520673480034e-02, -2.573327515963814e-02, -2.255112850749086e-02, -2.255112850749086e-02, -5.968117515753649e-01, -3.332675308791169e-01, -6.783570825226399e-01, -2.096372319088164e-04, -7.039463913371412e-01, -7.039463913371412e-01, -2.157009185886693e+02, -1.352563674742574e+02, -5.683189975494633e+02, -1.058547657645185e+00, -1.631578053065398e+02, -1.631578053065395e+02, -2.981308516403961e-02, -3.002309582578090e-02, -2.995953649712685e-02, -2.990187911305629e-02, -2.993154696028620e-02, -2.993154696028620e-02, -3.347319343560236e-02, -4.378716006100265e-02, -4.198128901109095e-02, -3.926723558958647e-02, -4.072098583561462e-02, -4.072098583561460e-02, -1.601945662645199e-02, -2.466545722402573e-01, -1.913576740954539e-01, -1.208139722487450e-01, -1.648314058963744e-01, -1.648314058963744e-01, -5.353169825617435e-02, -3.000001396887341e+00, -1.557731739549337e+00, -1.787306053242440e-01, -1.145401252481340e+00, -1.145401252481340e+00, -2.419995867060120e+01, -1.465503641909115e+03, -9.078164577621488e+02, -1.365313029441046e+00, -2.618901389332676e+02, -2.618901389332682e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_10_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.141626069576625e-03, 2.141626580554464e-03, 2.141647008563569e-03, 2.141640571502831e-03, 2.141626157806383e-03, 2.141626157806383e-03, 5.651678955393489e-03, 5.653337472800448e-03, 5.704522177578632e-03, 5.704941990231746e-03, 5.651979522212437e-03, 5.651979522212437e-03, 6.820091447038122e-03, 6.807861359597898e-03, 6.777664639287076e-03, 8.245568484864494e-03, 6.817625916682058e-03, 6.817625916682058e-03, 6.950847346224996e-02, 7.128810989856799e-02, -7.294643001857407e-04, 9.638776590815251e-03, 6.983054487562312e-02, 6.983054487562312e-02, 1.253654156930694e-03, 1.296290975724027e-03, 2.974261353339490e-03, 1.703724031011875e-04, 1.321170487969871e-03, 1.321170487969888e-03, 9.098403059523969e-03, 9.098618523730976e-03, 9.098592316548337e-03, 9.098749273503362e-03, 9.098294457632387e-03, 9.098294457632387e-03, 1.421559298831234e-02, 1.480678983252249e-02, 1.425495497649223e-02, 1.474122955542652e-02, 1.455919465617907e-02, 1.455919465617907e-02, 5.585863364373960e-02, 5.788308101833144e-02, 4.542492060133803e-02, 4.987921163756844e-02, 6.009612361834150e-02, 6.009612361834150e-02, 7.307777800696019e-03, 3.411529565136377e-02, 7.997229145206548e-03, 1.472598743193707e-02, 1.451486393344907e-02, 1.451486393344907e-02, 2.983168447900229e-04, 2.536639663536982e-04, 5.261919300330152e-04, 2.598391759851694e-03, 2.113222707494765e-04, 2.113222707494738e-04, 7.796451681304625e-02, 7.834816570649854e-02, 7.822736683957099e-02, 7.812142196711253e-02, 7.817502462537809e-02, 7.817502462537809e-02, 7.875819483958779e-02, 8.031082865465827e-02, 8.221795786876798e-02, 8.190389879857619e-02, 8.205681937995481e-02, 8.205681937995486e-02, 5.003383010985239e-02, 5.169097153506187e-02, 6.005418241572701e-02, 6.134758373256415e-02, 6.789646571713136e-02, 6.789646571713140e-02, 6.496157278175949e-02, 2.911632703969849e-03, 3.422049272284280e-03, 7.287231602280758e-02, 7.862934688038727e-03, 7.862934688038680e-03, 4.605165106199027e-04, 4.524395728727061e-05, 2.903493738313946e-04, 7.998552943212507e-03, 2.042871383826628e-04, 2.042871383826624e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
