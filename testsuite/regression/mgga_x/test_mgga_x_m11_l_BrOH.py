
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_m11_l_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_m11_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.996932211073338e+01, -2.996954186022376e+01, -2.997073681387374e+01, -2.996716134223076e+01, -2.996943584249112e+01, -2.996943584249112e+01, -2.991364820278136e+00, -2.991455738287151e+00, -2.994397996203056e+00, -2.993378027892994e+00, -2.991404628549077e+00, -2.991404628549077e+00, -6.630830970490654e-01, -6.625129992010840e-01, -6.454831409749491e-01, -6.544115562492335e-01, -6.628784170762096e-01, -6.628784170762096e-01, -2.984300622305551e-01, -2.975589199772344e-01, -7.171552029191358e-01, -2.659006069690477e-01, -2.981172680275210e-01, -2.981172680275210e-01, -6.814474299030333e-02, -7.124697120426939e-02, -2.348523904525940e-01, -3.320701813478100e-02, -7.050263384140504e-02, -7.050263384140498e-02, -7.219222225591754e+00, -7.212289004367449e+00, -7.218615500508495e+00, -7.213222675913406e+00, -7.215612487274706e+00, -7.215612487274706e+00, -1.685244837528787e+00, -1.700869850828650e+00, -1.679000269310189e+00, -1.690482370035486e+00, -1.704686008884189e+00, -1.704686008884189e+00, -5.688126842610893e-01, -6.549610435120751e-01, -5.326972689836696e-01, -5.612050908583451e-01, -5.924354160498332e-01, -5.924354160498332e-01, -2.506403080358380e-01, -3.160653588543620e-01, -2.402718114896389e-01, -2.025309801294605e+00, -2.365099308376203e-01, -2.365099308376203e-01, -3.203278390641582e-02, -3.657625282289713e-02, -2.740799336830117e-02, -2.563339270657823e-01, -3.332540299790639e-02, -3.332540299790597e-02, -3.617602439948632e-01, -5.712037132125560e-01, -5.103520151991432e-01, -4.501168773751581e-01, -4.815099075363807e-01, -4.815099075363807e-01, -3.984451925759447e-01, -5.064656307320919e-01, -4.923803972015485e-01, -5.348846173463092e-01, -5.010999094837695e-01, -5.010999094837689e-01, -6.764782384329996e-01, -3.557807709697486e-01, -3.745126543270791e-01, -3.870455278863034e-01, -3.812219071860380e-01, -3.812219071860368e-01, -4.720669276791541e-01, -2.293210464258070e-01, -2.612861138872380e-01, -3.509816713625588e-01, -2.261991853523835e-01, -2.261991853523816e-01, -7.977675486838252e-02, -1.005114382985836e-02, -1.907302745860710e-02, -2.149919033266914e-01, -2.833554181964176e-02, -2.833554181964164e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_m11_l_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_m11_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-4.376273365223287e+01, -4.376167975866927e+01, -4.375762696751644e+01, -4.377478319045604e+01, -4.376217352521098e+01, -4.376217352521098e+01, -4.603949032450116e+00, -4.605499977814439e+00, -4.653025997120502e+00, -4.640979034544753e+00, -4.604362944649054e+00, -4.604362944649054e+00, -8.612727856290636e-01, -8.639086408274447e-01, -8.872526108404991e-01, -8.678975000988959e-01, -8.621678471717088e-01, -8.621678471717088e-01, -2.208181162483596e-01, -2.101363225027803e-01, -1.428037880077479e+00, -2.721254488310478e-01, -2.172579169867816e-01, -2.172579169867816e-01, -8.758193217090963e-02, -9.123082971390030e-02, -1.635985956861231e-01, -4.399144609567084e-02, -9.028026651105951e-02, -9.028026651106386e-02, -6.233712040538788e+00, -6.123906812394254e+00, -6.221936441432319e+00, -6.136605593717222e+00, -6.178330700435228e+00, -6.178330700435228e+00, -2.375935675662636e+00, -2.472849220217398e+00, -2.347148957830469e+00, -2.418422520285098e+00, -2.485519795072650e+00, -2.485519795072650e+00, -7.415150080554701e-01, -1.055138966816896e+00, -6.819630831337669e-01, -8.512892405481458e-01, -8.179907877870766e-01, -8.179907877870766e-01, -1.760805104358728e-02, -3.366794823051092e-01, -4.025151084499908e-02, -3.826354180403815e+00, -2.025817094620051e-01, -2.025817094620051e-01, -4.243800687153768e-02, -4.836878888403532e-02, -3.624637645669285e-02, -1.652417857194028e-02, -4.407010497880896e-02, -4.407010497880978e-02, -6.413447660095144e-02, -2.348847399509413e-01, -7.765741003121709e-02, -1.649036391493934e-02, -3.850911484033413e-02, -3.850911484033413e-02, 3.019503454525889e-02, -4.592693439617519e-01, -6.148685880449364e-01, -1.011384830335974e+00, -8.062144402086848e-01, -8.062144402086784e-01, -1.078722359096938e+00, -3.130606544662801e-01, -2.837021001309792e-01, -3.252008808477332e-01, -2.847254802376513e-01, -2.847254802376492e-01, -4.501682408092793e-01, -1.935907347181584e-01, -9.310948479444342e-02, -3.035377093282853e-01, 2.769074149835406e-02, 2.769074149836919e-02, -1.020940291609858e-01, -1.339106132250526e-02, -2.535915473127183e-02, 2.134091384834339e-02, -3.751033824208479e-02, -3.751033824208360e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_m11_l_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_m11_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.363411382557259e-08, -3.363582222286242e-08, -3.364274433725867e-08, -3.361497709877201e-08, -3.363501820050405e-08, -3.363501820050405e-08, 7.570536332047975e-07, 7.507471172833667e-07, 5.602712711103172e-07, 6.231118194605719e-07, 7.553751037920776e-07, 7.553751037920776e-07, -1.642611288800894e-03, -1.663157787486966e-03, -2.552749693498533e-03, -2.298132102471795e-03, -1.650143933972382e-03, -1.650143933972382e-03, -1.471764976417604e+00, -1.563364537707425e+00, -5.863318251938588e-04, 2.832496518503759e-01, -1.502295779675064e+00, -1.502295779675064e+00, -1.179446762410823e+02, -1.182706868650618e+02, -5.002099512319434e+01, -8.351291550645938e+01, -1.228558758010049e+02, -1.228558758010048e+02, -1.883116527200001e-05, -1.911518051173051e-05, -1.886214712213771e-05, -1.908281939789755e-05, -1.897337308883052e-05, -1.897337308883052e-05, 5.603976766932534e-06, 6.896892504278132e-07, 6.775679085530252e-06, 2.975144456101596e-06, 3.898110204328797e-07, 3.898110204328797e-07, -7.586387522988376e-03, 1.122408763452888e-02, -1.925340768729801e-02, 7.198497665094174e-04, 3.880705663835399e-04, 3.880705663835399e-04, -6.763289546076254e+00, -2.474001156804787e-01, -6.497788761687107e+00, -1.629625929705940e-04, -6.485942264705173e-01, -6.485942264705173e-01, -8.858740385852303e+01, -8.878025036705091e+01, -2.540132923950404e+02, -4.290403834450104e+01, -1.311198497903775e+02, -1.311198497903773e+02, -2.566922722126305e-01, -1.023826542227576e-01, -1.459614113336430e-01, -1.879938386008805e-01, -1.659448647171758e-01, -1.659448647171758e-01, -2.070678114338363e-01, -1.639073318952774e-02, 1.338198850192544e-02, 3.250120841020387e-02, 2.691111978145815e-02, 2.691111978145817e-02, 4.971083093305370e-03, -3.389838759211621e-01, -3.040367522559483e-01, -1.824235005621882e-01, -2.576977485634658e-01, -2.576977485634654e-01, -4.764852035521280e-02, -4.239013332498482e+01, -4.120539071993954e+01, -2.485879073889904e-01, -1.870195720490871e+01, -1.870195720490868e+01, -8.871894255755711e+01, -1.526510291320610e+02, -1.314405226881459e+02, -2.242748315139638e+01, -1.914664143735997e+02, -1.914664143735992e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_m11_l_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_m11_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_m11_l_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_m11_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [9.963100693136768e-03, 9.962819855063714e-03, 9.961916329776044e-03, 9.966505542819195e-03, 9.962949675317391e-03, 9.962949675317391e-03, 4.448562503934913e-03, 4.463323753523460e-03, 4.914371720648163e-03, 4.789491813129765e-03, 4.452310563899627e-03, 4.452310563899627e-03, 4.221955314635459e-03, 4.653215396092009e-03, 1.276165621234559e-02, 9.940799282435747e-03, 4.373080332584899e-03, 4.373080332584899e-03, 4.962326137201256e-02, 5.260762966804994e-02, 2.222084261553615e-02, -5.062820580054119e-02, 5.042687733022332e-02, 5.042687733022332e-02, -8.560840932578537e-04, -9.747694858949318e-04, -1.982300479991655e-02, -3.400085829634575e-05, -9.877648774142211e-04, -9.877648774155598e-04, 1.694919469788638e-02, 1.617489446312088e-02, 1.687068923217995e-02, 1.626880155679012e-02, 1.655411264880460e-02, 1.655411264880460e-02, 2.547429941281561e-03, 4.935916306839022e-03, 1.940220072334828e-03, 3.699071471323145e-03, 5.149303384870459e-03, 5.149303384870459e-03, 1.111008105412203e-02, 7.690784827434657e-02, 3.383013460680832e-02, 4.235081803521194e-02, -2.719843291532245e-03, -2.719843291532245e-03, -6.168963635774205e-02, 7.147284064898144e-03, -6.296568398093058e-02, 5.832620524425222e-02, -5.534637483864509e-02, -5.534637483864509e-02, -4.651721281998889e-05, -5.745475899503941e-05, -9.493842676367331e-05, -3.292696056319630e-02, -5.354344421952418e-05, -5.354344422009636e-05, -9.621146622108743e-01, -7.456611880755764e-01, -1.031411272525257e+00, -1.155843439043868e+00, -1.111339162211661e+00, -1.111339162211661e+00, -1.500605817830173e+00, -6.429704906601702e-02, -1.088588209304153e-01, 1.233261498446626e-01, -3.168126042747389e-02, -3.168126042747901e-02, 6.228885576556900e-02, 3.196025338962832e-02, 3.634930351866524e-02, 3.078731539603224e-02, 3.778616701614843e-02, 3.778616701614770e-02, 1.131239250358043e-02, -1.539088019406709e-02, -2.945624222326788e-02, 8.322356026133499e-03, -6.303301379066908e-02, -6.303301379066302e-02, -5.412866682289940e-04, -1.307039118278136e-06, -1.759362783710465e-05, -6.404861918697333e-02, -4.620670545014719e-05, -4.620670544963659e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
