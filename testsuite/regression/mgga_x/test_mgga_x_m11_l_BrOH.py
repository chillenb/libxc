
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_m11_l_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_m11_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.435298908429348e+01, -2.435301296355984e+01, -2.435316612639717e+01, -2.435276925776237e+01, -2.435300133500683e+01, -2.435300133500683e+01, -3.034469848940371e+00, -3.034370188818735e+00, -3.031621941432402e+00, -3.032897328636058e+00, -3.034456660922328e+00, -2.998381564442504e+00, -6.537518674074718e-01, -7.056157399430700e-01, -6.946872369453008e-01, -6.976034912447974e-01, -7.058594044195894e-01, -7.058594044195894e-01, -3.069064462262739e-01, -3.078394141912555e-01, -7.112810214375986e-01, -2.661625700500142e-01, -3.072257098100823e-01, -3.072257098100823e-01, -6.816457224888203e-02, -7.127575900904543e-02, -2.411566970291597e-01, -3.323532740592765e-02, -7.052730934637164e-02, -7.052730934637158e-02, -7.230709500665397e+00, -7.223820765676533e+00, -7.229962533797925e+00, -5.287297180481974e+00, -7.227318771515403e+00, -7.227318771515403e+00, -1.803761859946861e+00, -1.788186635250727e+00, -1.812036570695374e+00, -1.798181550970954e+00, -1.783943104729475e+00, -1.705649562518160e+00, -5.824333867170918e-01, -6.299318360350658e-01, -5.715874301393616e-01, -5.622279585362859e-01, -5.925695302670393e-01, -5.959187682199903e-01, -3.254368950490786e-02, -3.176646428037583e-01, -3.107092401613244e-02, -2.192454459619768e+00, -2.398567141834048e-01, -2.398567141834048e-01, -4.358003994845570e-03, -3.660742126738981e-02, -2.741835802640510e-02, -3.638066126428114e-02, -4.536409729800050e-03, -3.336175604090374e-02, -4.205143496317079e-01, -5.935865203438969e-01, -4.350613777402946e-01, -4.924428941504433e-01, -5.186552075311573e-01, -5.186552075311573e-01, -4.785696418643349e-01, -5.086702817145652e-01, -4.897655352757042e-01, -5.262612433956041e-01, -4.946148645555445e-01, -5.505821425811585e-01, -6.602772434108580e-01, -1.416829920059441e-01, -3.871415889869258e-01, -2.811751233569290e-01, -4.029195483086084e-01, -4.029195483086065e-01, -3.889081603335049e-01, -2.320743204945989e-01, -2.746632842532812e-01, -3.882014442486516e-01, -3.038839514679388e-02, -2.446939795506481e-01, -8.018474513377173e-02, -1.005249732951647e-02, -1.907485735834492e-02, -2.338705955068456e-01, -2.836364132670892e-02, -2.836364132670880e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_m11_l_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_m11_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.030496420961816e+01, -3.030356946509150e+01, -3.029753609671334e+01, -3.032021684006799e+01, -3.030422903245687e+01, -3.030422903245687e+01, -3.283374840182798e+00, -3.285432924215633e+00, -3.347766377463895e+00, -3.323800796141049e+00, -3.283960413025367e+00, -5.523187370284416e+00, -9.039425613007702e-01, -7.590571993511068e-01, -7.480573933650538e-01, -7.524659831149600e-01, -7.590703085660208e-01, -7.590703085660208e-01, -2.545736949897538e-01, -2.471907214264199e-01, -1.830892026975065e+00, -2.074729051299298e-01, -2.524487946554564e-01, -2.524487946554564e-01, -8.766062390413210e-02, -9.134498633468745e-02, -1.864663595798386e-01, -4.410454131642509e-02, -9.037811515642669e-02, -9.037811515643104e-02, -6.259527287139885e+00, -6.149630255741135e+00, -6.247415967487885e+00, -2.277989152517121e+00, -6.204540471062026e+00, -6.204540471062026e+00, -1.177702831765034e+00, -1.285804871930866e+00, -1.139149273480571e+00, -1.213003085631065e+00, -1.317643749588838e+00, -2.547819990041884e+00, -6.199581790134018e-01, -1.099162220173720e+00, -5.708760387135290e-01, -6.347066872662620e-01, -7.192413551137056e-01, -1.001762443999699e+00, -4.233447086014916e-03, -3.588630479848682e-01, -4.888674272664761e-03, -4.101083079371115e+00, -1.477923903963084e-01, -1.477923903963084e-01, -5.783980650421529e-03, -4.849325774130361e-02, -3.628776261522503e-02, -2.349284215450386e-02, -6.018121301177028e-03, -4.421528354635625e-02, -9.845208877825710e-02, -3.031538391119682e-01, 6.488479055068153e-02, -7.250265249560521e-02, -9.951898591926887e-02, -9.951898591926887e-02, -8.141116915555127e-02, -4.433271354029811e-01, -5.911383985111107e-01, -1.028189590273976e+00, -7.923242483233053e-01, -8.759396011655424e-01, -1.005960938071378e+00, -2.973246348682560e-01, -3.106274954864705e-01, -4.668144205243913e-01, -3.060656528397799e-01, -3.060656528397770e-01, -6.686834645199234e-01, -2.038154738536861e-01, -1.359063536619387e-01, -2.249420679037862e-01, -5.517605349265536e-03, 6.306173726418267e-02, -1.037132352614667e-01, -1.339647452025830e-02, -2.536646988686439e-02, 5.780532877680711e-02, -3.762257837630326e-02, -3.762257837630206e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_m11_l_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_m11_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.260313482507432e-08, -4.260511327166737e-08, -4.261341828601098e-08, -4.258128304235157e-08, -4.260417938701798e-08, -4.260417938701798e-08, 3.091374734314418e-06, 3.081739165076627e-06, 2.792243831070313e-06, 2.903609801076454e-06, 3.088661382670740e-06, -1.055236221624407e-06, 2.176030143393887e-04, -2.555368656817801e-03, -2.892771376218787e-03, -2.797837099548123e-03, -2.547928370119877e-03, -2.547928370119877e-03, -1.136991712293744e+00, -1.189107806370036e+00, 4.607327332331103e-05, -4.856321153180440e-01, -1.151373448647433e+00, -1.151373448647433e+00, -1.132965274597300e+02, -1.124063609075170e+02, -3.834399991770481e+01, -4.023400436516372e+01, -1.175601436412264e+02, -1.175601436412263e+02, -1.880852444056270e-05, -1.909244585715866e-05, -1.883978192203916e-05, -2.290295471039332e-05, -1.895029754992334e-05, -1.895029754992334e-05, 7.969208882359085e-05, 6.263342695575185e-05, 8.748282130157020e-05, 7.349710654699045e-05, 5.846034295530429e-05, -4.332522887818368e-06, -7.260365063744419e-03, 8.166906570872757e-03, -1.551050774705001e-02, -1.358403806564794e-03, -5.161768951404975e-04, 2.293877518250402e-03, -1.918880374721348e+02, -1.561176440437047e-01, -2.003479666633411e+02, -1.315059749895111e-04, -1.738591752825037e+00, -1.738591752825037e+00, -3.657612001421417e+07, -5.077276922665475e+01, -1.994713021431385e+02, -1.358858530857338e+03, -3.110942564316955e+07, -6.255492051286326e+01, -2.506631891724337e-01, -1.001198953478087e-01, -1.536809414070349e-01, -1.836483423242595e-01, -1.621360543887750e-01, -1.621360543887750e-01, -1.974867476322295e-01, -1.618114000544244e-02, 1.247869439953175e-02, 3.068380867295629e-02, 2.532366315199965e-02, 3.853463948138873e-02, 2.872979160277982e-03, -2.711555501068532e+00, -2.501999075327835e-01, -3.161498039387636e-01, -2.085595762918584e-01, -2.085595762918579e-01, -7.353112211916576e-02, -3.630337510484426e+01, -3.046409659557034e+01, -1.902924875184514e-01, -4.479869653644477e+02, -1.925303460974456e+01, -4.433114261321273e+01, -5.616195042733695e+01, -1.103770870421311e+02, -2.319627562954308e+01, -8.793173903057183e+01, -8.793173903057172e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_m11_l_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_m11_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.280980652398667e-03, -1.281844769279361e-03, -1.285618197861236e-03, -1.271562171378025e-03, -1.281435892318776e-03, -1.281435892318776e-03, -5.779540535932226e-03, -5.764251695204880e-03, -5.299947436342937e-03, -5.480453490708520e-03, -5.775280174760806e-03, 1.295753910430381e-02, -1.431755975731657e-03, 8.279911324480556e-03, 1.061927561031072e-02, 9.889330561938404e-03, 8.199354486848873e-03, 8.199354486848873e-03, 5.073588021950268e-02, 5.413410808471361e-02, 3.661644353905767e-02, -4.966410850142811e-02, 5.166431366006383e-02, 5.166431366006383e-02, -8.561584200533081e-04, -9.748870666611217e-04, -2.000850315672278e-02, -3.400947780465060e-05, -9.878680337117337e-04, -9.878680337130725e-04, 1.745274573190470e-02, 1.668198103455868e-02, 1.736826668726522e-02, -6.896385289200525e-02, 1.706807252856479e-02, 1.706807252856479e-02, -2.395986408442573e-02, -2.199159561894029e-02, -2.463994510460304e-02, -2.332550247749857e-02, -2.139738990623090e-02, 7.384360432662153e-03, -3.536825313932754e-02, 6.588682273520340e-02, 3.709207625524831e-03, -6.920875896220985e-02, -5.045517497781166e-02, 9.357021902809695e-02, -2.197938314081548e-02, 8.132858005680811e-03, -2.217590225776261e-02, 7.750705323393343e-02, -5.612095231195535e-02, -5.612095231195535e-02, -2.294432388863925e-05, -5.746932226181461e-05, -9.494907687258121e-05, -1.497627544274709e-02, -2.641356890394941e-05, -5.356080078977734e-05, -6.046480965281076e-01, -5.743261869224316e-01, -1.553341819544265e+00, -8.805856085828052e-01, -8.625035427579266e-01, -8.625035427579266e-01, -9.281939317830308e-01, -7.180787321484072e-02, -1.271138083302735e-01, 1.240129108870059e-01, -5.013243698734723e-02, 1.023048206207390e-01, 6.374279387488763e-03, 4.650518538214206e-02, 3.818026304169086e-02, 4.797325444464967e-02, 4.110059211983397e-02, 4.110059211983311e-02, 7.001641064092648e-02, -1.545477407868757e-02, -3.002429193480658e-02, -4.931975698972962e-02, -2.616251599137163e-02, -6.566755419682177e-02, -5.421183971947416e-04, -1.307091345371226e-06, -1.759412884387012e-05, -6.681722368113777e-02, -4.622030892475874e-05, -4.622030892424837e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
