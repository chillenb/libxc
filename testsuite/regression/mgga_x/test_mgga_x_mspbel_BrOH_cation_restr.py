
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mspbel_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mspbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.051224228416725e+01, -2.051234958764791e+01, -2.051282413338091e+01, -2.051123108744152e+01, -2.051206609843305e+01, -2.051206609843305e+01, -3.196708259110136e+00, -3.196766971022784e+00, -3.198357859017458e+00, -3.198007658673524e+00, -3.197713122957918e+00, -3.766618058184592e+00, -5.829401016813754e-01, -7.683152493586330e-01, -7.587398972383782e-01, -7.598836491392779e-01, -7.597132858990887e-01, -7.597132858990887e-01, -2.078312608452765e-01, -2.097260712735240e-01, -6.663869091153976e-01, -1.767632044197750e-01, -1.886406649236770e-01, -1.886406649236770e-01, -1.008273885827915e-02, -1.061100122477448e-02, -5.717583230827449e-02, -5.827593310171406e-03, -7.320864890216802e-03, -7.320864890216802e-03, -5.367999945722928e+00, -5.368260851292423e+00, -5.368007279190940e+00, -5.130343450422628e+00, -5.368134294337665e+00, -5.368134294337665e+00, -1.770884941475824e+00, -1.789896056012650e+00, -1.756646990940774e+00, -1.773569652169116e+00, -1.788334235553913e+00, -2.156577681281816e+00, -6.206861329374941e-01, -6.612142978945822e-01, -5.837225540298934e-01, -5.966657869345328e-01, -6.281890105809091e-01, -5.546299794079491e-01, -7.696971845118424e-02, -2.206496718373775e-01, -7.120037137950759e-02, -2.018060148288296e+00, -1.487820584595395e-01, -1.487820584595395e-01, -2.264366244717326e-03, -5.697166697890648e-03, -4.355526127072291e-03, -4.787834104391793e-02, -2.642811811242635e-03, -5.247303076280060e-03, -6.002132511836534e-01, -5.995562238539318e-01, -5.917551302219238e-01, -5.999774364484369e-01, -5.998841753391856e-01, -5.998841753391856e-01, -5.843192077131526e-01, -5.257157492405635e-01, -5.420127478423677e-01, -5.583744707047640e-01, -5.499874899614597e-01, -4.985463395652267e-01, -6.965740467139013e-01, -1.868642764422528e-01, -3.056150548481598e-01, -3.140217942211288e-01, -3.394903888412514e-01, -3.394903888412514e-01, -4.178159958083810e-01, -5.482511282928958e-02, -7.356207206700745e-02, -3.615662237285122e-01, -6.097545945564913e-02, -1.086417028625437e-01, -1.422405684606509e-02, -1.523278855915752e-03, -3.196975909037539e-03, -1.027472428610736e-01, -4.855352070761779e-03, -4.855352070761774e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mspbel_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mspbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.004325085028851e+01, -3.004336823782530e+01, -3.004390232564641e+01, -3.004215729411111e+01, -3.004307020519256e+01, -3.004307020519256e+01, -4.592111399228981e+00, -4.591946501079700e+00, -4.587573755065976e+00, -4.589781357562063e+00, -4.589069340127195e+00, -4.442533134653426e+00, -8.307228257453180e-01, -8.340570483082669e-01, -8.098582042259177e-01, -8.173720888334145e-01, -8.157345692658196e-01, -8.157345692658196e-01, -2.152217256006561e-01, -2.182995012671486e-01, -9.121543902139979e-01, -1.777475297000522e-01, -1.890608444677839e-01, -1.890608444677842e-01, -1.341464852137189e-02, -1.411350044283973e-02, -7.263863112188683e-02, -7.765322428236052e-03, -9.749925047577998e-03, -9.749925047577998e-03, -6.916976048607480e+00, -6.919108424242212e+00, -6.917088968757370e+00, -7.278834311742497e+00, -6.918049389407151e+00, -6.918049389407151e+00, -2.609659297048473e+00, -2.631657016368907e+00, -2.591122881692186e+00, -2.613095880647198e+00, -2.629793262236851e+00, -2.499911742244268e+00, -7.624157802229522e-01, -8.420484104507653e-01, -6.969761313282378e-01, -7.336782886496293e-01, -7.771861375048564e-01, -7.673627059637897e-01, -1.027195275801512e-01, -2.213578297113132e-01, -9.499896988572222e-02, -2.507116332060227e+00, -1.520506575918256e-01, -1.520506575918258e-01, -3.019154995252388e-03, -7.592003625912485e-03, -5.802009389050051e-03, -6.384899965376362e-02, -3.523749101370115e-03, -6.990598955766735e-03, -7.927424763127425e-01, -7.846425725505214e-01, -8.002822416211671e-01, -7.898286633231404e-01, -7.886498563344965e-01, -7.886498563344965e-01, -7.707686504509618e-01, -6.353245447958206e-01, -6.734443183894661e-01, -7.120469333451637e-01, -6.922521432996191e-01, -7.289794095881148e-01, -8.790008480626788e-01, -2.562259861793931e-01, -3.268803361589736e-01, -4.630712750420211e-01, -3.788727694451313e-01, -3.788727694451313e-01, -5.940521276196805e-01, -6.989460977691953e-02, -9.104448864780140e-02, -4.292262930140320e-01, -8.135208833660665e-02, -1.203087432198340e-01, -1.890915349714614e-02, -2.030949213644154e-03, -4.261237604007899e-03, -1.149078747084125e-01, -6.468312395049125e-03, -6.468312395049085e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mspbel_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mspbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.442663421645587e-08, -1.442663675717303e-08, -1.442653215562516e-08, -1.442650583243472e-08, -1.442653704433467e-08, -1.442653704433467e-08, -1.039314095369211e-05, -1.039103049121708e-05, -1.033333326203303e-05, -1.035320759680315e-05, -1.035540049333870e-05, -4.099111838650850e-06, -6.488780675684229e-03, -2.369055344296726e-03, -2.474858621972610e-03, -2.468402170065899e-03, -2.468855910998431e-03, -2.468855910998431e-03, -4.288384699108729e-01, -4.160417509744836e-01, -3.169995755012378e-03, -6.245454214022356e-01, -5.677833233330200e-01, -5.677833233330123e-01, -4.250004651513964e+00, -4.426283360383953e+00, -1.926296805461486e+00, -3.127400864696130e+00, -4.349214124566407e+00, -4.349214124566407e+00, -9.660089395404698e-07, -9.657175923921144e-07, -9.659976955271547e-07, -3.949507987230281e-06, -9.658603365302058e-07, -9.658603365302058e-07, -1.091895189659877e-04, -1.063932295815088e-04, -1.109167974215967e-04, -1.087679498005809e-04, -1.066793136167572e-04, -3.825871039586237e-05, -5.500113224429764e-03, -4.216167904129881e-03, -7.087352765342058e-03, -6.438591283149973e-03, -5.229825521382825e-03, -1.137826301677686e-02, -1.671261172900487e+01, -3.065041605271039e-01, -2.281765531527415e+01, -4.903461994302628e-05, -1.060973633410282e+00, -1.060973633410272e+00, -2.228818280362498e+07, -2.764909677597545e+00, -2.234106012916508e+01, -1.115276914497778e+02, -1.201147648164926e+07, -8.575191398728489e+00, -6.114526435532937e-03, -6.166544389326000e-03, -1.547419758677588e-02, -6.133224944220530e-03, -6.140710326564204e-03, -6.140710326564204e-03, -6.811366809707765e-03, -1.073871310786708e-02, -9.422876684380932e-03, -8.286163012213603e-03, -8.847289413157960e-03, -3.397604796623122e-02, -3.435101013147479e-03, -5.157348964926227e-01, -9.411438421422078e-02, -1.093180226434590e-01, -6.242006767748873e-02, -6.242006767748885e-02, -3.457135926711956e-02, -1.972054155139592e+00, -1.611799712767366e+00, -4.821066860258962e-02, -4.241807718834512e+01, -1.856699158028267e+00, -2.027654578264680e+00, -3.388752146815797e+00, -9.710829110499860e+00, -2.099562661666828e+00, -1.222106184648344e+01, -1.222106184668403e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mspbel_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mspbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.579339484481628e-03, 1.579364572660972e-03, 1.579462813092411e-03, 1.579091516458746e-03, 1.579288097092634e-03, 1.579288097092634e-03, 2.479768239719132e-03, 2.478578321299472e-03, 2.446225877293767e-03, 2.459296322021589e-03, 2.458164489937948e-03, -1.068778493418602e-17, 5.103281179005562e-03, -5.078949014997784e-17, -2.268227940930774e-17, 1.183212745734760e-18, -2.797097237356359e-17, -2.797097237356359e-17, 1.131765095834506e-16, -1.042629427052598e-16, 9.590811242323563e-04, 5.893411922042264e-16, 4.118582518766704e-16, 2.387905249107438e-17, 5.076037267744953e-17, -8.627338843359695e-18, 1.839503278430332e-16, 2.837414000265449e-17, -1.727764427601353e-17, -1.727764427601353e-17, -1.237710728916888e-18, 1.418102278080476e-19, -7.103553239996270e-20, 6.360799375656230e-03, -1.131927633315932e-18, -1.131927633315932e-18, 4.788213682001037e-03, 4.852857164286144e-03, 4.692368923402678e-03, 4.797611381778022e-03, 4.852330152710185e-03, 5.605573269619570e-19, 1.720984888140962e-17, 1.433926248000539e-17, -3.509284581496103e-17, 2.768493763248243e-17, 1.975186931647254e-17, 1.297949830870145e-02, 5.089999314390886e-05, 2.226941153423977e-16, 3.613870086074121e-05, -1.747438248930807e-18, 3.787975113733951e-16, 1.617513281971509e-16, 1.333506784150513e-12, -1.199603190872048e-17, 2.962061824791481e-17, 6.976069467723697e-06, 2.279732883728606e-11, 9.529258799257202e-17, -1.206837422468638e-18, 5.500175688562343e-18, 2.913857491813914e-02, -1.136533247722277e-20, 1.261369516603559e-18, 1.261369516603559e-18, -2.774245616425279e-18, -3.867979267759545e-18, 7.265367466207657e-18, -1.011370822269132e-17, 9.462356676531181e-18, 5.141535543086840e-02, 9.931174554341204e-20, 3.783552202538345e-03, 1.247866793275122e-16, 2.654851987601637e-02, -1.559179913207535e-17, 2.839808898786307e-17, 1.712629771216657e-02, 4.132915403595514e-16, -5.584694865243434e-16, 2.560449341591121e-17, 3.740938024829136e-05, 5.430602410190588e-16, -1.082256732254069e-16, 7.994139435896496e-19, -1.125326867582110e-18, 2.891056769231061e-16, -1.974411093604603e-17, 5.844767292945533e-17])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
