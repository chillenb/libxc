
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mspbel_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mspbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.215066010886256e+01, -2.215070768788408e+01, -2.215096703581861e+01, -2.215025850674242e+01, -2.215062295484281e+01, -2.215062295484281e+01, -3.377235835800703e+00, -3.377238429390514e+00, -3.377519945408414e+00, -3.378960513552586e+00, -3.377925922270555e+00, -3.377925922270555e+00, -6.498191546887545e-01, -6.495181832835472e-01, -6.448502351330345e-01, -6.537011118311934e-01, -6.507839998360461e-01, -6.507839998360461e-01, -2.040361407684324e-01, -2.048130557987815e-01, -7.254667770379096e-01, -1.666646204084808e-01, -1.793507499671140e-01, -1.793507499671140e-01, -1.008264055671483e-02, -1.061079174025932e-02, -5.699086545344027e-02, -5.827373652314597e-03, -7.320560882906558e-03, -7.320560882906558e-03, -5.367413196083198e+00, -5.367681206262925e+00, -5.367432871998887e+00, -5.367669352150251e+00, -5.367544981014219e+00, -5.367544981014219e+00, -2.109410524316349e+00, -2.127567304181778e+00, -2.109513494206122e+00, -2.125241636438712e+00, -2.119651145112393e+00, -2.119651145112393e+00, -5.961253369543170e-01, -6.352912977708848e-01, -5.324878901047639e-01, -5.370182858681550e-01, -6.062909389716218e-01, -6.062909389716218e-01, -1.311736133222711e-01, -2.144057886838691e-01, -1.231481429763085e-01, -1.830936237251467e+00, -1.441784240964335e-01, -1.441784240964335e-01, -4.496700455054254e-03, -5.696700626227530e-03, -4.355242427162436e-03, -8.801549238350187e-02, -5.246744405781953e-03, -5.246744405781954e-03, -5.987321559869830e-01, -5.981366490063479e-01, -5.983490728107526e-01, -5.985178955069724e-01, -5.984328699112405e-01, -5.984328699112405e-01, -5.809914456409481e-01, -5.241135156550121e-01, -5.398309697343454e-01, -5.556466538111809e-01, -5.473527060221329e-01, -5.473527060221329e-01, -6.578583603382725e-01, -2.614507013033190e-01, -2.958530627526150e-01, -3.536357304898210e-01, -3.242430084839642e-01, -3.242430084839642e-01, -4.738746584027813e-01, -5.473831511693052e-02, -7.309238764979596e-02, -3.395158863423252e-01, -1.063855570124575e-01, -1.063855570124575e-01, -1.421747991943611e-02, -1.523225608674573e-03, -3.196942067337242e-03, -1.013711265274430e-01, -4.854975332642241e-03, -4.854975332642238e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mspbel_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mspbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.807906248204778e+01, -2.807916840453062e+01, -2.807969660426200e+01, -2.807812381494543e+01, -2.807893971764697e+01, -2.807893971764697e+01, -4.206578834944234e+00, -4.206816051226836e+00, -4.213379433317028e+00, -4.212808054708503e+00, -4.211711831166125e+00, -4.211711831166125e+00, -7.968783258821294e-01, -7.949444460724747e-01, -7.489186991183158e-01, -7.628122776343023e-01, -7.602874187212024e-01, -7.602874187212024e-01, -1.568480739197556e-01, -1.570293317205007e-01, -8.569968569442565e-01, -1.471585032643131e-01, -1.607707009071790e-01, -1.607707009071790e-01, -1.341423650012501e-02, -1.411264027263716e-02, -7.189467043906188e-02, -7.764443688800408e-03, -9.748707166101774e-03, -9.748707166101774e-03, -6.915829445098036e+00, -6.917990674535333e+00, -6.915966694292787e+00, -6.917872744744085e+00, -6.916905744779094e+00, -6.916905744779094e+00, -2.247077288189248e+00, -2.302443768367794e+00, -2.241067525881592e+00, -2.295697895073202e+00, -2.281479191116528e+00, -2.281479191116528e+00, -7.494724598297470e-01, -8.668890160080062e-01, -6.781274851323572e-01, -7.411414877291840e-01, -7.680224221445708e-01, -7.680224221445708e-01, -1.329310201737675e-01, -1.520072717986956e-01, -1.277854726013475e-01, -2.587898233218037e+00, -1.285685278467893e-01, -1.285685278467893e-01, -5.992759027145889e-03, -7.590140209607805e-03, -5.800874619074030e-03, -1.012326996883438e-01, -6.988365606759179e-03, -6.988365606759182e-03, -7.942266004080829e-01, -7.849579392038565e-01, -7.881951778427256e-01, -7.908875687290448e-01, -7.895384343563852e-01, -7.895384343563852e-01, -7.751976848395387e-01, -6.243148983918796e-01, -6.651793247204756e-01, -7.083480846353170e-01, -6.858175480261723e-01, -6.858175480261723e-01, -9.126881189841908e-01, -2.050466546882536e-01, -2.484253756277799e-01, -4.039877292488261e-01, -3.169083648970020e-01, -3.169083648970020e-01, -5.382746134270232e-01, -6.951743823629121e-02, -8.919659416858687e-02, -4.075517632656768e-01, -1.116499550173348e-01, -1.116499550173348e-01, -1.888291508054279e-02, -2.030736245444332e-03, -4.261102164434024e-03, -1.079154079025919e-01, -6.466805913022025e-03, -6.466805913022023e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mspbel_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mspbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.362285003383799e-09, -4.362194092503508e-09, -4.361243582590910e-09, -4.362574067123445e-09, -4.361955104387882e-09, -4.361955104387882e-09, -8.312978252397420e-06, -8.320105876687222e-06, -8.521637555077510e-06, -8.547112597545858e-06, -8.501157062730579e-06, -8.501157062730579e-06, -6.368621134841925e-03, -6.375517351370785e-03, -6.519809182291204e-03, -6.581742431157358e-03, -6.571606014106848e-03, -6.571606014106848e-03, -1.630252847144542e+00, -1.677599986010966e+00, -2.709405361294765e-03, -1.284372134884048e+00, -1.113253664836379e+00, -1.113253664836378e+00, -4.327676877557028e+00, -4.570505900458841e+00, -2.456193117236686e+00, -3.936236035016838e+00, -4.998942547023907e+00, -4.998942547020379e+00, -9.862919743114939e-07, -9.857394651681253e-07, -9.858568394354067e-07, -9.853875098849237e-07, -9.862221424429246e-07, -9.862221424429246e-07, -1.254606701098563e-04, -1.103434073151691e-04, -1.180322743525818e-04, -1.033340817400130e-04, -1.203959211064685e-04, -1.203959211064685e-04, -2.234927725090865e-02, -1.671876197056084e-02, -2.456092141222573e-02, -2.076585731785238e-02, -2.033309696923553e-02, -2.033309696923553e-02, -1.489481268503418e+00, -1.111760851823420e+00, -1.638815718939369e+00, -1.832563502399645e-04, -2.258256633054384e+00, -2.258256633054386e+00, -5.187322977074182e+00, -4.632554396646793e+00, -2.908597423922498e+01, -2.577030557349487e+00, -1.353548127124499e+01, -1.353548127125153e+01, -8.506599342460295e-03, -8.530247206512735e-03, -8.522385926345842e-03, -8.516204534440129e-03, -8.520599969828121e-03, -8.520599969828121e-03, -1.220506417710550e-02, -1.668924785307073e-02, -1.565641163775262e-02, -1.441504504919466e-02, -1.543592334567384e-02, -1.543592334567385e-02, -1.489890198812847e-02, -5.539692135278569e-01, -3.933848461950558e-01, -1.425274351775372e-01, -2.666782730815841e-01, -2.666782730815840e-01, -5.621041754846288e-02, -2.264402647963277e+00, -2.176490518035745e+00, -2.074160330728294e-01, -2.778234853939601e+00, -2.778234853939606e+00, -3.482790726037326e+00, -2.274386801927749e+01, -1.100546991112025e+01, -3.209509899035429e+00, -1.709701777045879e+01, -1.709701777045835e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mspbel_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mspbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.570303631332764e-04, 1.570223131812858e-04, 1.569064176989191e-04, 1.570227090191117e-04, 1.569732463364553e-04, 1.569732463364553e-04, 1.676760428900444e-03, 1.681543443093130e-03, 1.817600795147401e-03, 1.839773423986099e-03, 1.804715504042713e-03, 1.804715504042713e-03, 1.040396207822596e-02, 1.035000034853517e-02, 9.200665675712939e-03, 1.063163563326013e-02, 1.025404888906161e-02, 1.025404888906161e-02, 9.565568155820815e-02, 1.044556377690257e-01, 1.445824585323833e-03, 1.220241937542254e-02, 1.794151938640494e-02, 1.794151938640490e-02, 2.481020931765219e-09, 7.212131538059902e-10, 1.824136179151627e-06, 4.528030000933215e-15, 3.138377579492005e-13, 3.138377579417902e-13, 4.467812997200742e-05, 4.412710412926782e-05, 4.374575057534662e-05, 4.329999205086222e-05, 4.486401412977073e-05, 4.486401412977073e-05, 9.968672460823771e-03, 8.519452809963602e-03, 8.934400837251026e-03, 7.499760731581795e-03, 9.652684824038369e-03, 9.652684824038369e-03, 5.147511827639931e-02, 4.903970189078893e-02, 3.821940319599021e-02, 3.400476170734692e-02, 4.859604624142866e-02, 4.859604624142866e-02, 1.227056805230755e-03, 6.192190531025853e-02, 6.522220025561444e-04, 1.319595314292966e-02, 1.669036526011717e-02, 1.669036526011721e-02, 9.606135435459122e-18, 3.925477642829943e-16, 3.167529251490665e-14, 5.222346284281794e-05, 4.148710924898467e-15, 4.148710914651817e-15, 7.626390298323614e-03, 7.408386028584357e-03, 7.486179082138055e-03, 7.551149491460564e-03, 7.522702694727505e-03, 7.522702694727505e-03, 1.578629926442885e-02, 1.105290375435746e-02, 1.327824106020902e-02, 1.486880088927993e-02, 1.496241397987591e-02, 1.496241397987593e-02, 5.109841487505892e-02, 6.373297368773395e-02, 8.244336366533324e-02, 6.116734919592238e-02, 8.425291953391044e-02, 8.425291953391043e-02, 5.928418110717244e-02, 8.977870407842080e-06, 8.414348542861249e-06, 8.828165460132635e-02, 1.150446126315438e-03, 1.150446126315463e-03, 6.293300900580803e-13, 9.243674126737261e-22, 1.788700540430019e-15, 2.746348561153777e-03, 1.021989061436000e-14, 1.021989060053042e-14])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
