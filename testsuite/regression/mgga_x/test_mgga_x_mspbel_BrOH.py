
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mspbel_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mspbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.215011564337846e+01, -2.215015705009488e+01, -2.215040511012997e+01, -2.214972624833756e+01, -2.215013694469603e+01, -2.215013694469603e+01, -3.377287477451854e+00, -3.377293853975622e+00, -3.377716499408943e+00, -3.379026884701686e+00, -3.377297674801785e+00, -3.377297674801785e+00, -6.490016479759378e-01, -6.487857899019005e-01, -6.459313893637172e-01, -6.540708751504681e-01, -6.489253848577157e-01, -6.489253848577157e-01, -2.054138068420830e-01, -2.060564975609800e-01, -7.359975928584072e-01, -1.632123892672105e-01, -2.054885169348942e-01, -2.054885169348942e-01, -1.697366999619167e-02, -1.777122885448058e-02, -6.888945939637170e-02, -8.172487657122906e-03, -1.758620039182095e-02, -1.758620039182095e-02, -5.365139159966592e+00, -5.365398119966822e+00, -5.365170465980377e+00, -5.365371732244532e+00, -5.365265015283428e+00, -5.365265015283428e+00, -2.108897294988638e+00, -2.126397328324616e+00, -2.110260238952758e+00, -2.123779383471832e+00, -2.119286749028654e+00, -2.119286749028654e+00, -5.852632769409425e-01, -6.236483166998533e-01, -5.397248563317800e-01, -5.524620054917184e-01, -6.131814553657059e-01, -6.131814553657059e-01, -1.351184765172350e-01, -2.208535200480527e-01, -1.324182023120121e-01, -1.827974312292083e+00, -1.473508470724817e-01, -1.473508470724817e-01, -7.884178468774473e-03, -9.008007434312534e-03, -6.751914358628944e-03, -9.162655139751454e-02, -8.207610729290743e-03, -8.207610729290743e-03, -6.077485443745834e-01, -6.071124023647910e-01, -6.073425875705994e-01, -6.075168473196441e-01, -6.074291534576067e-01, -6.074291534576067e-01, -5.870205899617702e-01, -5.327736382180106e-01, -5.481648488718904e-01, -5.626224550527564e-01, -5.550611429691504e-01, -5.550611429691504e-01, -6.443169094183310e-01, -2.694397690714377e-01, -3.024294816200857e-01, -3.550860679075640e-01, -3.289472814793299e-01, -3.289472814793299e-01, -4.707424583890798e-01, -6.450566314791015e-02, -8.443195159423802e-02, -3.300562391322908e-01, -1.123658705295259e-01, -1.123658705295259e-01, -1.987593360107482e-02, -2.468674339502690e-03, -4.688395793154874e-03, -1.070474395532661e-01, -6.976363251109436e-03, -6.976363251109426e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mspbel_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mspbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.807823324434428e+01, -2.807832542361153e+01, -2.807882799692958e+01, -2.807732248328796e+01, -2.807828101888826e+01, -2.807828101888826e+01, -4.207795395488689e+00, -4.208010015345274e+00, -4.214788597139686e+00, -4.214134162521104e+00, -4.207864485497918e+00, -4.207864485497918e+00, -7.859361668800554e-01, -7.841550010291132e-01, -7.386578117104757e-01, -7.516266755122911e-01, -7.852992563053731e-01, -7.852992563053731e-01, -1.691368171174396e-01, -1.747262660678886e-01, -8.916157920996552e-01, -1.453062671041776e-01, -1.708362574833803e-01, -1.708362574833803e-01, -2.242867537435530e-02, -2.346179900095061e-02, -8.296614448127666e-02, -1.087762031133897e-02, -2.321793373661500e-02, -2.321793373661500e-02, -6.912700085819599e+00, -6.914793629721841e+00, -6.912939890519539e+00, -6.914566160764771e+00, -6.913739237383916e+00, -6.913739237383916e+00, -2.244824204325392e+00, -2.299157299093182e+00, -2.245038530610175e+00, -2.290848821412757e+00, -2.282725066214449e+00, -2.282725066214449e+00, -7.427657310671055e-01, -8.624263784557178e-01, -6.942415268723976e-01, -7.693775088094467e-01, -7.783976926598760e-01, -7.783976926598760e-01, -1.311458056632586e-01, -1.570665337884066e-01, -1.273106774723408e-01, -2.582908334285446e+00, -1.304106099682970e-01, -1.304106099682970e-01, -1.049463991340972e-02, -1.198440011906423e-02, -8.983832586254358e-03, -1.014360781073633e-01, -1.091932469833758e-02, -1.091932469833759e-02, -8.072900167136140e-01, -7.985747976399256e-01, -8.016778909376361e-01, -8.040910907488166e-01, -8.028822242919961e-01, -8.028822242919961e-01, -7.833746888192011e-01, -6.404025327017467e-01, -6.797749471689883e-01, -7.186475263112199e-01, -6.984197876668046e-01, -6.984197876668046e-01, -9.056190121951257e-01, -2.249671239988614e-01, -2.708662003468710e-01, -4.114683533607012e-01, -3.350140056228878e-01, -3.350140056228878e-01, -5.411481086614818e-01, -7.929743210966787e-02, -9.751072359147897e-02, -4.056844073739116e-01, -1.124643986953430e-01, -1.124643986953429e-01, -2.621888300587641e-02, -3.290856710670386e-03, -6.246687053220192e-03, -1.070589999410198e-01, -9.283891604745298e-03, -9.283891604745296e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mspbel_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mspbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.363232094673255e-09, -4.363153067833640e-09, -4.362235032682402e-09, -4.363495678591925e-09, -4.363195719611177e-09, -4.363195719611177e-09, -8.369201661848042e-06, -8.375785756355617e-06, -8.582981735934919e-06, -8.606483888137201e-06, -8.370200379802521e-06, -8.370200379802521e-06, -6.415580043445664e-03, -6.421917582249958e-03, -6.566095322259284e-03, -6.630955958599903e-03, -6.418277392482686e-03, -6.418277392482686e-03, -1.668488060335437e+00, -1.604358391968106e+00, -2.594283286353720e-03, -1.185473934597169e+00, -1.648484783053483e+00, -1.648484783053483e+00, -9.063117429995541e+00, -9.079277281917465e+00, -3.550437964956869e+00, -6.446986514072205e+00, -9.434664470339753e+00, -9.434664470339753e+00, -9.883284645101426e-07, -9.877936572520794e-07, -9.880117385842532e-07, -9.876117217639792e-07, -9.884068265926655e-07, -9.884068265926655e-07, -1.245383895267499e-04, -1.097654653455358e-04, -1.187120693088133e-04, -1.063478613220646e-04, -1.216616247935972e-04, -1.216616247935972e-04, -2.439061478278841e-02, -1.843658077710941e-02, -2.462160604755831e-02, -2.382010970021138e-02, -1.915665650183483e-02, -1.915665650183483e-02, -1.659855875202141e+00, -1.102896070069417e+00, -1.895549349836159e+00, -1.827574759900053e-04, -2.111445066783285e+00, -2.111445066783285e+00, -6.839628371964492e+00, -6.851257057911358e+00, -1.961116200904362e+01, -3.221526171204735e+00, -1.011950918261263e+01, -1.011950918261131e+01, -8.134318831870170e-03, -8.151661599962326e-03, -8.146365174049297e-03, -8.141392452372880e-03, -8.145084198195455e-03, -8.145084198195455e-03, -1.206786829164335e-02, -1.582522459189708e-02, -1.502882459046923e-02, -1.403679818653639e-02, -1.490006778902205e-02, -1.490006778902207e-02, -1.560493838432023e-02, -4.883882454087916e-01, -3.599693002193541e-01, -1.374002841566859e-01, -2.496697883078813e-01, -2.496697883078812e-01, -5.901010705100844e-02, -3.072074535414584e+00, -2.897327329827502e+00, -1.898467479771744e-01, -2.984569937857658e+00, -2.984569937857664e+00, -6.795221461713781e+00, -1.180067125400797e+01, -1.015710088032382e+01, -3.607334944319485e+00, -1.478164271200226e+01, -1.478164271200578e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mspbel_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mspbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.571134041206606e-04, 1.571064143834040e-04, 1.569941468712299e-04, 1.571033465387888e-04, 1.571104840621549e-04, 1.571104840621549e-04, 1.713962490635386e-03, 1.718393978135840e-03, 1.858917248732718e-03, 1.879171033727357e-03, 1.714713719726297e-03, 1.714713719726297e-03, 1.021013732180184e-02, 1.016558090462383e-02, 9.189102590156343e-03, 1.053626398336739e-02, 1.019586221135641e-02, 1.019586221135641e-02, 1.156679421567234e-01, 1.144869813938236e-01, 1.939712412382128e-03, 3.899390092403982e-03, 1.151632495615773e-01, 1.151632495615773e-01, 1.255040872319424e-07, 9.374397471313575e-08, 1.698489012898498e-05, 6.908247338865535e-15, 1.452916372977239e-07, 1.452916372977486e-07, 4.548664943957488e-05, 4.495532551948724e-05, 4.485340270841548e-05, 4.447531915153422e-05, 4.599284430436744e-05, 4.599284430436744e-05, 9.819676588569656e-03, 8.403691805489007e-03, 9.058648514990587e-03, 7.857252838609110e-03, 9.826674343425091e-03, 9.826674343425091e-03, 5.479109720904955e-02, 5.296346744635783e-02, 4.138356688213697e-02, 4.751587047261237e-02, 4.699563140755138e-02, 4.699563140755138e-02, 1.737395429408461e-03, 7.540437697570913e-02, 2.182457476205114e-03, 1.305092729437939e-02, 1.572391601984210e-02, 1.572391601984210e-02, 6.040148358742038e-14, 4.948493517725835e-14, 8.091762215842078e-13, 1.702200008003266e-05, 2.118240304929609e-14, 2.118240302860780e-14, 7.951690553453426e-03, 7.725398577140499e-03, 7.809196099953361e-03, 7.871024287461991e-03, 7.844043461015441e-03, 7.844043461015441e-03, 1.673137878421849e-02, 1.146452992691645e-02, 1.393828075380398e-02, 1.558204667990605e-02, 1.561549719810179e-02, 1.561549719810183e-02, 5.128824831186863e-02, 6.510373322803570e-02, 8.543005911572044e-02, 6.002100756124838e-02, 8.512351034514355e-02, 8.512351034514348e-02, 6.297365154519338e-02, 3.201829061669436e-05, 4.444173609923068e-05, 7.177434869033407e-02, 1.860078073134913e-03, 1.860078073134910e-03, 2.951772362192536e-11, 2.040364990920398e-19, 1.623689682478030e-14, 1.617397847267465e-03, 1.054104854604415e-14, 1.054104854680214e-14])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
