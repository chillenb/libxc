
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_rscan_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.173390369099494e+01, -2.173402374619984e+01, -2.173455225991047e+01, -2.173277011483259e+01, -2.173370462283178e+01, -2.173370462283178e+01, -3.049205962893803e+00, -3.049316377688716e+00, -3.052293838598211e+00, -3.051363874009759e+00, -3.051146342719976e+00, -3.766325441934736e+00, -5.319606475773714e-01, -7.194181627176343e-01, -6.985863068674087e-01, -7.052126301367840e-01, -7.037928610605996e-01, -7.037928610605996e-01, -1.844445176345545e-01, -1.874540182037779e-01, -5.956324063307447e-01, -1.361348958646294e-01, -1.550772367155599e-01, -1.550772367155599e-01, -3.266592248877531e-03, -3.512129854117052e-03, -2.983887182016581e-02, -1.499012184282203e-03, -2.117620244635239e-03, -2.117620244635239e-03, -5.669020238107875e+00, -5.670113867240779e+00, -5.669075127231132e+00, -5.441933680008033e+00, -5.669572219297150e+00, -5.669572219297150e+00, -1.673051212501602e+00, -1.693519356556972e+00, -1.657618907147249e+00, -1.675873044524454e+00, -1.691897282066557e+00, -2.130338031114095e+00, -6.372884967710133e-01, -6.936736504139552e-01, -5.885323787494607e-01, -6.130235478238717e-01, -6.478475773775266e-01, -5.732491730828115e-01, -6.790610323264706e-02, -1.823822910979960e-01, -6.301461664693463e-02, -2.086482294341687e+00, -1.096591404144310e-01, -1.096591404144310e-01, -2.927038740407701e-03, -1.435447759839261e-03, -1.209202939332982e-03, -4.468127110009481e-02, -3.416237360493435e-03, -1.427901351070359e-03, -6.423222446650778e-01, -6.385457484253162e-01, -6.302694613671359e-01, -6.409770585945976e-01, -6.404297020408238e-01, -6.404297020408238e-01, -6.249027054028327e-01, -5.342430517468889e-01, -5.604301062593527e-01, -5.862388968371893e-01, -5.730819819835090e-01, -5.263231208439666e-01, -7.269126642340168e-01, -1.673796354076045e-01, -2.819955461907219e-01, -2.965311109457239e-01, -3.257144272995348e-01, -3.257144272995348e-01, -3.999579844775374e-01, -2.831373003341618e-02, -4.085366351593655e-02, -3.631370888591166e-01, -5.511830603498351e-02, -7.101296358457465e-02, -4.869645795054199e-03, -2.266195359241894e-04, -7.258370710918886e-04, -6.631515269511658e-02, -1.326719251986702e-03, -1.326719251986701e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_rscan_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.217460776371890e+01, -3.217465793304801e+01, -3.217492457707923e+01, -3.217417456631297e+01, -3.217456143015518e+01, -3.217456143015518e+01, -4.726265814100523e+00, -4.726607391786591e+00, -4.735768180228178e+00, -4.732477882597551e+00, -4.732337895460905e+00, -5.098795503712225e+00, -8.108839011013511e-01, -9.890381235122284e-01, -9.640993211901643e-01, -9.714860548876936e-01, -9.699264807145491e-01, -9.699264807145491e-01, -2.566757092779247e-01, -2.604451494285215e-01, -8.434989513509170e-01, -1.957602854441272e-01, -2.195952106198826e-01, -2.195952106198826e-01, -5.869483976453330e-03, -6.291273584085066e-03, -4.822607467161108e-02, -2.767773162048322e-03, -3.860974792138375e-03, -3.860974792138375e-03, -7.576277365992440e+00, -7.577514047051221e+00, -7.576337746779430e+00, -7.734108880506620e+00, -7.576902250293158e+00, -7.576902250293158e+00, -2.565338826650840e+00, -2.592223991184403e+00, -2.549184639854844e+00, -2.568855330030785e+00, -2.589838677916514e+00, -2.892415491010348e+00, -8.572560908545899e-01, -9.283802382661236e-01, -7.951596507188234e-01, -8.244866435284072e-01, -8.705331324813521e-01, -9.057245162307058e-01, -9.148158395857459e-02, -2.579365364457324e-01, -8.478778971114725e-02, -2.801972565974938e+00, -1.594152229968187e-01, -1.594152229968187e-01, -3.902718320543602e-03, -2.655716558629066e-03, -2.215014220874052e-03, -5.994425500616608e-02, -4.554983147324582e-03, -2.621315304862119e-03, -8.565838476557006e-01, -8.520523019390209e-01, -8.598124112573087e-01, -8.549377835977895e-01, -8.542795162105391e-01, -8.542795162105391e-01, -8.334043386778651e-01, -7.204363505378141e-01, -7.525981218574954e-01, -7.844589591320269e-01, -7.681824257334022e-01, -7.990493709970419e-01, -9.740429958083847e-01, -2.376732645243897e-01, -3.889823666510196e-01, -4.552294103509793e-01, -4.452763128292518e-01, -4.452763128292517e-01, -6.240643605898828e-01, -4.591411855313019e-02, -6.469525882106963e-02, -4.910884098230126e-01, -7.419195913933700e-02, -1.066992887620679e-01, -8.678725636342630e-03, -4.344799867646415e-04, -1.355285607936230e-03, -1.000204116665109e-01, -2.434487389773284e-03, -2.434487389773281e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rscan_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.428189657517882e-08, -1.428157769770209e-08, -1.428017510113133e-08, -1.428490836863902e-08, -1.428242626447149e-08, -1.428242626447149e-08, -1.452172150259613e-05, -1.452596286682147e-05, -1.463783981190645e-05, -1.458708915121912e-05, -1.459857988756517e-05, 5.447449587551920e-07, -9.891747105963675e-03, 3.710316039533679e-04, 4.004380402307704e-04, 3.933505306996209e-04, 3.947836348915564e-04, 3.947836348915564e-04, 7.448910010284572e-02, 7.126610951149039e-02, -5.448346630903410e-03, 1.535805257062334e-01, 1.165887787090994e-01, 1.165887787090994e-01, 2.218584376466574e+02, 2.063518281738183e+02, 4.521844437918052e+00, 5.008873098589389e+02, 4.018677934241653e+02, 4.018677934241653e+02, 7.066992452425139e-08, 7.028048247411160e-08, 7.064795619057687e-08, -3.472116274331512e-06, 7.047483254877884e-08, 7.047483254877884e-08, -1.233216912401067e-04, -1.215507654251450e-04, -1.254457030019868e-04, -1.229126617026705e-04, -1.217475266981693e-04, 5.294200648753404e-06, 6.362297582905403e-04, 3.710036197757245e-04, 9.107347952799513e-04, 7.410792225353135e-04, 5.832857965758449e-04, -2.585884594654706e-02, -2.956412438772261e+01, 6.210789747144182e-02, -4.009546588318140e+01, 5.339551960267215e-06, 3.023841496497900e-01, 3.023841496497900e-01, -7.769376475256983e-01, 4.861692103238078e+02, 2.512872489646415e+03, -1.641256090039832e+02, -2.132500083699726e-01, 1.059791434562503e+03, 1.250072797022361e-04, 2.747853767908440e-04, -1.648734899670491e-02, 1.824653933531442e-04, 2.047213136440181e-04, 2.047213136440181e-04, 1.642620197196468e-04, 1.327376903304530e-03, 1.025350481155283e-03, 7.167447925733513e-04, 8.775470549857352e-04, -4.091421252832812e-02, 3.331322542815199e-04, -8.827051464052461e-01, 1.516487869262130e-02, -1.233604256570868e-01, 9.298076138697426e-03, 9.298076138697431e-03, -5.311041964338197e-02, 5.021570884818455e+00, 2.341279766112846e+00, 6.297997607004092e-03, -7.134598805827608e+01, 9.088276926463315e-01, 7.878639420528145e+01, 5.023495000793957e+03, 2.693723579272238e+03, 1.102628963238465e+00, 1.481406454354655e+03, 1.481406454354659e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rscan_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.873956463904781e-03, 1.873939659029454e-03, 1.873867985017581e-03, 1.874117127847675e-03, 1.873986189921375e-03, 1.873986189921375e-03, 4.966982821431097e-03, 4.969724031220138e-03, 5.042738798673689e-03, 5.012582922474655e-03, 5.016324994086106e-03, 0.000000000000000e+00, 9.698103068274089e-03, 0.000000000000000e+00, 9.577558487148856e-30, 9.508594357902892e-33, 0.000000000000000e+00, 0.000000000000000e+00, 2.640229335403325e-29, 1.142060262730614e-29, 2.001225388148910e-03, 1.340298039136368e-27, 4.785636446727941e-28, 1.608712143086721e-30, 2.265608119310850e-40, 5.195756598884171e-40, 2.865503560295172e-32, 1.286250568508281e-42, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 5.648275948159539e-34, 0.000000000000000e+00, 6.938597277115596e-03, 0.000000000000000e+00, 0.000000000000000e+00, 6.447840913160976e-03, 6.616177749666157e-03, 6.390776546237702e-03, 6.459465557797024e-03, 6.605161632764867e-03, 4.267264331433512e-33, 9.993465863360800e-31, 2.244731615279651e-30, 0.000000000000000e+00, 2.481510467000085e-30, 1.317666214362772e-30, 6.589127812051218e-02, 1.413323273701681e-03, 1.698230437651400e-30, 1.529339431004833e-03, 0.000000000000000e+00, 2.972430860724279e-28, 5.419924519967032e-29, 5.122661272399810e-11, 0.000000000000000e+00, 2.889398090083723e-45, 4.549718709954041e-03, 6.061033032371843e-11, 8.826631880350673e-43, 1.487426084983604e-32, 9.549576147874025e-32, 5.027994922995166e-02, 6.392260869218259e-32, 5.044584422067222e-33, 5.044584422067222e-33, 0.000000000000000e+00, 2.641461745656233e-30, 1.528646720946659e-31, 0.000000000000000e+00, 1.465292938427229e-30, 7.787157780422010e-02, 9.619082150082318e-31, 7.926607960117068e-03, 4.302442184469919e-29, 3.588757178303200e-02, 0.000000000000000e+00, 1.977785650205443e-30, 4.208807296896278e-02, 9.673340564020569e-32, 0.000000000000000e+00, 1.378028096412716e-30, 3.370802338727439e-03, 6.102952369616805e-29, 0.000000000000000e+00, 1.094041430041030e-50, 0.000000000000000e+00, 6.052599971952737e-29, 0.000000000000000e+00, 8.822252998774542e-44]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
