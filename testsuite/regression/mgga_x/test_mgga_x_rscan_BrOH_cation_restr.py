
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_rscan_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.321511281651723e+01, -2.321518185273435e+01, -2.321553779982630e+01, -2.321451167001699e+01, -2.321504234019213e+01, -2.321504234019213e+01, -3.412237309083187e+00, -3.412361827494646e+00, -3.415937506164258e+00, -3.417070595339419e+00, -3.415641154046915e+00, -3.415641154046915e+00, -5.977357305715467e-01, -5.970618996494531e-01, -5.815821554825944e-01, -5.923518129677404e-01, -5.893611234941964e-01, -5.893611234941964e-01, -1.803592674449940e-01, -1.824696302344886e-01, -6.570018215568254e-01, -1.169128721502421e-01, -1.389117470866016e-01, -1.389117470866017e-01, -3.271344032943640e-03, -3.521389463341372e-03, -3.002788350160236e-02, -1.532387617490104e-03, -2.144702477410942e-03, -2.144702477410942e-03, -5.669057656596302e+00, -5.670150739765678e+00, -5.669111956025885e+00, -5.670076876181412e+00, -5.669609646725499e+00, -5.669609646725499e+00, -2.079021767875460e+00, -2.101988741598042e+00, -2.072408275508055e+00, -2.092937992580083e+00, -2.095087536359298e+00, -2.095087536359298e+00, -6.165235121325807e-01, -6.696630894940985e-01, -5.468119236829433e-01, -5.604439946684175e-01, -6.287721011013077e-01, -6.287721011013077e-01, -7.910004849373836e-02, -1.739919910085038e-01, -7.313323788985343e-02, -1.923071305654822e+00, -9.932491480164191e-02, -9.932491480164193e-02, -1.098389526032440e-03, -1.508399077563715e-03, -1.239203830541266e-03, -5.152695818665574e-02, -1.490085540259614e-03, -1.490085540259614e-03, -6.408583314732226e-01, -6.372210431942242e-01, -6.385102680231911e-01, -6.395641253050429e-01, -6.390361611282955e-01, -6.390361611282955e-01, -6.207163972350976e-01, -5.326569825657259e-01, -5.581367813659567e-01, -5.831964620259414e-01, -5.702114943689154e-01, -5.702114943689154e-01, -6.930965361476809e-01, -2.286993165219865e-01, -2.727181962455782e-01, -3.529623136791440e-01, -3.129575448637366e-01, -3.129575448637366e-01, -4.776162267777522e-01, -2.843680534869316e-02, -4.058639497172181e-02, -3.458707160505159e-01, -6.700442184030486e-02, -6.700442184030488e-02, -5.093175484596562e-03, -2.781342337924561e-04, -7.349598296568596e-04, -6.470976428523172e-02, -1.368988042146723e-03, -1.368988042146721e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_rscan_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.026013523263481e+01, -3.026026187028366e+01, -3.026103300931305e+01, -3.025915817741396e+01, -3.026011069844929e+01, -3.026011069844929e+01, -4.803727908946681e+00, -4.803845871315604e+00, -4.806905487911631e+00, -4.805070180475546e+00, -4.805207138995592e+00, -4.805207138995592e+00, -8.278309136392417e-01, -8.267315431226302e-01, -8.019644971199563e-01, -8.142996354110774e-01, -8.111828596499352e-01, -8.111828596499352e-01, -1.824878356077177e-01, -1.869917832005703e-01, -8.563613947460942e-01, -1.406233944437607e-01, -1.416123146799842e-01, -1.416123146799842e-01, -5.876806555250347e-03, -6.305406145081931e-03, -4.653071820180445e-02, -2.823174935139940e-03, -3.904441370816226e-03, -3.904441370816227e-03, -7.573874058374879e+00, -7.575184574800027e+00, -7.574030713741308e+00, -7.575182078045062e+00, -7.574488679737791e+00, -7.574488679737791e+00, -2.559281252265232e+00, -2.593677038243052e+00, -2.538755126020838e+00, -2.570305250967411e+00, -2.588487245926924e+00, -2.588487245926924e+00, -8.196612565764149e-01, -9.260366403045244e-01, -7.536935501335186e-01, -8.252859684023675e-01, -8.369502216145932e-01, -8.369502216145932e-01, -8.809627070774849e-02, -1.253206192209338e-01, -8.176584878692178e-02, -2.834793034924519e+00, -7.898636774361607e-02, -7.898636774361598e-02, -2.038000442756696e-03, -2.777024580950187e-03, -2.263713304852609e-03, -6.337884466268706e-02, -2.722590775869256e-03, -2.722590775869256e-03, -8.554653865191867e-01, -8.448833321409428e-01, -8.485209824311335e-01, -8.515921056216842e-01, -8.500478149085120e-01, -8.500478149085120e-01, -8.352187496586124e-01, -6.723336360435098e-01, -7.179849717761154e-01, -7.637683003245845e-01, -7.404217613758743e-01, -7.404217613758745e-01, -9.737934039906143e-01, -2.227362885139118e-01, -2.987612670238898e-01, -4.587923356807188e-01, -3.761325809492534e-01, -3.761325809492534e-01, -6.090468488111273e-01, -4.457246913856977e-02, -5.746130302721248e-02, -4.556068058884595e-01, -6.720560868380158e-02, -6.720560868380165e-02, -9.010817835171287e-03, -5.274120284291476e-04, -1.370901716884445e-03, -7.148489396811071e-02, -2.503362222268392e-03, -2.503362222268390e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rscan_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.826888214147001e-09, -5.826681457390551e-09, -5.824030864887693e-09, -5.827037301579365e-09, -5.825710271555448e-09, -5.825710271555448e-09, -1.534170077278771e-05, -1.534328321327304e-05, -1.538168768162742e-05, -1.534754271458957e-05, -1.536319007166543e-05, -1.536319007166543e-05, -4.321439022804612e-03, -4.303319096991541e-03, -3.890654849420708e-03, -4.068860505981151e-03, -4.024763395175665e-03, -4.024763395175665e-03, -1.426212731413954e+00, -1.415093516749758e+00, -1.440458396589628e-03, -1.190013491245214e+00, -1.993998197621894e+00, -1.993998197621896e+00, 2.238682549528444e+02, 2.097750730514573e+02, 2.119200490750793e+00, 5.698435886618619e+02, 4.337866504854871e+02, 4.337866504854875e+02, 4.562153528559931e-08, 4.584647399046638e-08, 4.662032076363742e-08, 4.676474203044821e-08, 4.522522170416173e-08, 4.522522170416173e-08, -9.683329382391932e-05, -9.019122885704637e-05, -9.521476354008610e-05, -8.915484602213617e-05, -9.380246606268086e-05, -9.380246606268086e-05, -1.637719095662929e-02, -1.380878303697593e-02, -2.606552906398082e-02, -2.791609885990992e-02, -1.516943053367345e-02, -1.516943053367345e-02, -2.528541735052673e+00, -1.587543894237806e+00, -2.957881150026019e+00, -2.131854647618319e-04, -4.786803774516190e+00, -4.786803774516203e+00, 1.046893620017816e+03, 6.496929307226040e+02, 2.908184332707451e+03, -5.100043493037277e+00, 1.365517976973897e+03, 1.365517976973895e+03, -1.328827764878535e-02, -1.285031910075517e-02, -1.299829282082553e-02, -1.312800528621250e-02, -1.306484928591374e-02, -1.306484928591374e-02, -1.651722667507617e-02, -2.147955756890832e-02, -1.932314802887772e-02, -1.785400947579993e-02, -1.859311342118823e-02, -1.859311342118822e-02, -1.246654066162874e-02, -5.586288600028776e-01, -3.195690200065561e-01, -1.316575791346392e-01, -1.997373476377204e-01, -1.997373476377202e-01, -3.958372692491671e-02, 2.771715339733184e+00, -1.955498390368452e+00, -1.568715460779398e-01, -7.018503028418046e+00, -7.018503028418027e+00, 1.048628937072081e+02, 1.539974146323562e+04, 2.893004820472279e+03, -6.120515659445292e+00, 1.784970374412558e+03, 1.784970374412563e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rscan_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([9.428765083583341e-04, 9.428516402715881e-04, 9.424804708467591e-04, 9.428397922395324e-04, 9.426889020573807e-04, 9.426889020573807e-04, 9.117282297352111e-03, 9.118618979413757e-03, 9.154083543163204e-03, 9.147762600392739e-03, 9.145765767800608e-03, 9.145765767800608e-03, 1.450890575567700e-02, 1.446042929439777e-02, 1.350009229117278e-02, 1.492688549044706e-02, 1.447954802049269e-02, 1.447954802049269e-02, 1.233408124059388e-01, 1.276797592617771e-01, 2.350922311899704e-03, 4.722623561691547e-02, 1.063995700757467e-01, 1.063995700757464e-01, 1.877054631202878e-12, 1.026511851490189e-11, 1.932661129059454e-03, 1.455438148316743e-12, 4.354409245189066e-12, 4.354409245189219e-12, 5.549387032219402e-05, 5.415014872053218e-05, 5.322181420530122e-05, 5.215587068819625e-05, 5.595488788511012e-05, 5.595488788511012e-05, 1.200464643249507e-02, 1.147244977849749e-02, 1.166834612047157e-02, 1.118182954905212e-02, 1.186050252374934e-02, 1.186050252374934e-02, 5.108712313852324e-02, 5.225829717271813e-02, 6.125663757378087e-02, 6.674566004677172e-02, 4.963134544542385e-02, 4.963134544542385e-02, 3.509559999135881e-02, 1.361951101551609e-01, 3.289098230109064e-02, 2.015253359179150e-02, 9.878480697040390e-02, 9.878480697040434e-02, 1.552660276052896e-12, 5.802120749354888e-12, 1.551955923901162e-14, 1.960770618748442e-02, 7.097244931778460e-13, 7.097244931778415e-13, 4.299397760701182e-02, 4.143750111098769e-02, 4.196893045728060e-02, 4.242477817630555e-02, 4.220227210089648e-02, 4.220227210089648e-02, 4.828418009452098e-02, 4.300236314034778e-02, 4.382404367235126e-02, 4.521388631576656e-02, 4.452982307600863e-02, 4.452982307600862e-02, 5.317990507586062e-02, 9.784167824764825e-02, 9.613862612406360e-02, 8.680945575727210e-02, 9.006810746217175e-02, 9.006810746217166e-02, 5.941314317439676e-02, 1.487407178661806e-03, 6.848099286592295e-03, 9.177027211593079e-02, 4.772000594483011e-02, 4.772000594483007e-02, 1.081681747987941e-07, 4.438683028569459e-17, 3.150192172144584e-16, 3.607143978898068e-02, 1.303900160507427e-13, 1.303900160507420e-13])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
