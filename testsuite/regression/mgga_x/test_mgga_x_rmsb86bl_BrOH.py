
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_rmsb86bl_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmsb86bl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.043094297302667e+01, -2.043103106577158e+01, -2.043145703139004e+01, -2.043001780251954e+01, -2.043098910368918e+01, -2.043098910368918e+01, -3.200347626018640e+00, -3.200394483849053e+00, -3.201906716118269e+00, -3.201579615951735e+00, -3.200375859083089e+00, -3.757818635307934e+00, -5.829853620301058e-01, -7.712077171533179e-01, -7.636517443059045e-01, -7.637216722210518e-01, -7.713894924651949e-01, -7.713894924651949e-01, -2.152366128905928e-01, -2.168456972817608e-01, -6.893568730549526e-01, -1.879921767394190e-01, -2.157363289810077e-01, -2.157363289810077e-01, -2.839846664823818e-02, -2.938095560308260e-02, -8.663507537262494e-02, -1.816112199349746e-02, -2.906873629827226e-02, -2.906873629827226e-02, -5.321867598009204e+00, -5.322047582587696e+00, -5.321882590308830e+00, -5.092907596516810e+00, -5.321964001120466e+00, -5.321964001120466e+00, -1.773442145392739e+00, -1.791234198104348e+00, -1.766045603683208e+00, -1.780025212831143e+00, -1.795091313656914e+00, -2.155048391370439e+00, -6.118796824679722e-01, -6.502502796064411e-01, -5.881326048830863e-01, -6.015750390193605e-01, -6.302285325563713e-01, -5.611558667036379e-01, -8.287466393506826e-02, -2.333635643705911e-01, -8.181705137963821e-02, -2.003673641246044e+00, -1.629417972347538e-01, -1.629417972347538e-01, -4.019486467291214e-03, -1.910881223563090e-02, -1.409493618194168e-02, -5.155073532650502e-02, -4.185496770860597e-03, -1.762456776236511e-02, -6.036058968096830e-01, -6.031494558100574e-01, -5.962481506823750e-01, -6.034393168280455e-01, -6.033775358827341e-01, -6.033775358827341e-01, -5.851996043243179e-01, -5.319381552513031e-01, -5.470302055113545e-01, -5.612518425764271e-01, -5.539921365573957e-01, -5.076166822822812e-01, -6.857855082244787e-01, -1.999399077019478e-01, -3.154475569684347e-01, -3.187829909611460e-01, -3.458915337211655e-01, -3.458915337211654e-01, -4.186523761576242e-01, -8.250551397414031e-02, -1.028232754469942e-01, -3.573197779681342e-01, -6.725742228479602e-02, -1.281803783492902e-01, -3.399853529880171e-02, -7.798957873882547e-03, -1.142789036391675e-02, -1.223518745370207e-01, -1.533085683755919e-02, -1.533085683755917e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_rmsb86bl_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmsb86bl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.962002899731889e+01, -2.962012674546680e+01, -2.962061328186117e+01, -2.961901382915905e+01, -2.962008009062107e+01, -2.962008009062107e+01, -4.557363001446357e+00, -4.557235610411720e+00, -4.553473323623966e+00, -4.555315509208718e+00, -4.557349336732518e+00, -4.353924188179458e+00, -8.218686137197611e-01, -7.989265614448071e-01, -7.722043041369512e-01, -7.806126791987046e-01, -7.995996942741675e-01, -7.995996942741675e-01, -2.171118858313079e-01, -2.204746916025987e-01, -9.455085757453796e-01, -1.629382879891074e-01, -2.181098603366084e-01, -2.181098603366084e-01, -2.737188912116158e-02, -2.834944447805823e-02, -8.145288574151362e-02, -1.690864909585282e-02, -2.804867826635220e-02, -2.804867826635117e-02, -6.833336858500334e+00, -6.835486164538517e+00, -6.833568465975469e+00, -7.178368288047858e+00, -6.834423196628742e+00, -6.834423196628742e+00, -2.584175259648712e+00, -2.605471376294383e+00, -2.574582968805280e+00, -2.592444788251092e+00, -2.609434266375132e+00, -2.447373838706279e+00, -7.412140325565578e-01, -8.209730001697978e-01, -6.958633360652849e-01, -7.378340606413009e-01, -7.751509813920062e-01, -7.804533303755548e-01, -1.106350869954276e-01, -2.162835114196674e-01, -1.092386737425592e-01, -2.468026938734806e+00, -1.406188458086234e-01, -1.406188458086234e-01, -5.359315363564727e-03, -1.789872034975149e-02, -1.322975895441841e-02, -6.874746767188669e-02, -5.580662453360079e-03, -1.648241442171369e-02, -7.972810896740808e-01, -7.894538207415983e-01, -8.032152351038174e-01, -7.944155636003639e-01, -7.933295944086497e-01, -7.933295944086497e-01, -7.704378390174447e-01, -6.403650001238285e-01, -6.780058093769722e-01, -7.133173171908918e-01, -6.952673444770010e-01, -7.367437807977597e-01, -8.561998790902261e-01, -2.760955994509654e-01, -3.302846339829143e-01, -4.640499243587561e-01, -3.799811287416310e-01, -3.799811287416310e-01, -5.886511081949468e-01, -7.821027185842731e-02, -9.481925854280336e-02, -4.156251736670054e-01, -8.975804997454184e-02, -1.116828533210339e-01, -3.270349263224849e-02, -6.967126092642351e-03, -1.051530707665216e-02, -1.066204688219435e-01, -1.429430396145814e-02, -1.429430396145789e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rmsb86bl_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmsb86bl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.334778908804814e-08, -1.334778932458301e-08, -1.334768258449891e-08, -1.334769269016280e-08, -1.334778994295821e-08, -1.334778994295821e-08, -9.914818427338472e-06, -9.913185003291075e-06, -9.861452705241991e-06, -9.878598688207648e-06, -9.914176619774470e-06, -4.628781959539845e-06, -6.252631205460855e-03, -2.848923686146850e-03, -3.017327913071504e-03, -2.992293092730971e-03, -2.844936173572672e-03, -2.844936173572672e-03, -4.789907992079991e-01, -4.622176903922062e-01, -2.797756647945356e-03, -8.910505837675607e-01, -4.737763255166089e-01, -4.737763255166089e-01, -4.591006213578124e+02, -4.107208872256044e+02, -1.177165070951653e+01, -1.717448578274290e+03, -4.288326449828999e+02, -4.288326449830082e+02, -1.056346718444984e-06, -1.055950910378151e-06, -1.056306806314573e-06, -3.681996802101274e-06, -1.056143244255209e-06, -1.056143244255209e-06, -1.038125176675216e-04, -1.013624665208380e-04, -1.046747939541416e-04, -1.029221448345190e-04, -1.008318359348636e-04, -4.349139943897392e-05, -6.348659958058930e-03, -4.807971713495847e-03, -7.583738588204007e-03, -6.725116801680382e-03, -5.569910263558101e-03, -1.161212120956578e-02, -1.236702901008849e+01, -3.673605166997074e-01, -1.302188286625172e+01, -5.445048640416152e-05, -1.569590591503213e+00, -1.569590591503213e+00, -2.231206077038128e+06, -1.494052480008296e+03, -5.164094300673480e+03, -8.248562062532116e+01, -1.897727818218893e+06, -2.029506382188283e+03, -6.230079193083971e-03, -6.298264803954571e-03, -1.322509853350512e-02, -6.254900529592784e-03, -6.264300608934618e-03, -6.264300608934618e-03, -7.071669299594786e-03, -1.117243400406758e-02, -9.749965991497351e-03, -8.614183459094607e-03, -9.172072909049700e-03, -3.143301654509886e-02, -3.923151604794045e-03, -4.066896427996838e-01, -1.009602514575511e-01, -1.005041661450399e-01, -6.728777942195133e-02, -6.728777942195129e-02, -3.251637865489145e-02, -1.332365747134876e+01, -6.787698069485569e+00, -5.644187773042944e-02, -2.849589733467323e+01, -3.727800424379992e+00, -2.143907969631988e+02, -3.463732575806785e+04, -9.750410727927929e+03, -4.487405405063154e+00, -3.433566347453746e+03, -3.433566347454090e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rmsb86bl_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmsb86bl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.394698619275954e-03, 1.394717914936143e-03, 1.394799353245917e-03, 1.394485573737662e-03, 1.394708804096357e-03, 1.394708804096357e-03, 2.184982565837996e-03, 2.184047556431573e-03, 2.155015835136405e-03, 2.166275095522224e-03, 2.184712800559676e-03, 2.027682140890243e-18, 4.164869148371310e-03, -1.076626901601412e-17, 1.646945571908880e-17, -8.507686342178660e-17, -5.663846277941373e-17, -5.663846277941373e-17, 1.002886585436098e-16, 1.116300916606785e-16, 1.146936458943716e-03, -5.156804551960461e-16, 5.488344674614281e-17, 5.488344674614281e-17, 3.558054127653649e-16, -2.341555242272326e-15, -1.443731963848017e-15, -7.335345233121082e-17, -1.608095718221016e-15, 4.049527619686067e-16, -1.537057509035129e-18, 1.877519100511016e-19, -1.045309556016738e-19, 5.623915741476001e-03, 5.616392391731465e-20, 5.616392391731465e-20, 4.216705080804456e-03, 4.280803205479803e-03, 4.171076136442103e-03, 4.244927864590348e-03, 4.289841411992444e-03, 7.838443813370584e-18, 1.636289627829547e-17, -5.031936463427102e-18, -2.774801149110898e-17, 1.244032758741339e-17, 6.968701330957922e-18, 1.531950632220091e-02, 8.117965611848047e-05, 9.666817178023080e-17, 9.686901479336508e-05, 2.466330694827425e-18, 5.476531512734772e-16, 5.476531512734772e-16, 6.348724659299041e-11, -2.764967962160816e-16, -4.352174638334734e-16, 8.073017110840685e-06, 8.006900804802242e-11, 3.274047593620237e-16, 4.256251206808521e-18, -1.211477425684098e-18, 2.285988252048434e-02, -3.204058673276843e-18, -4.221087803779809e-20, -4.221087803779809e-20, 3.557386811859393e-18, -1.640495029021283e-17, 1.784269131122085e-17, 1.336682552364757e-17, -1.219716232175728e-17, 4.936392095890781e-02, -6.938277513464893e-18, 5.576458409826883e-03, -8.871718598967502e-17, 2.387017842436845e-02, -2.389248024206985e-17, -5.168270087072931e-17, 1.434591464291835e-02, -2.025837182757089e-16, -1.142648714769770e-16, 1.146643028943143e-17, 6.382406311570002e-05, -3.998316898558814e-16, 1.190657580032629e-15, 1.210497749730600e-17, -1.116602562717422e-17, -3.738864354601458e-16, -1.989601501760740e-17, 3.668813086509811e-16]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
