
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_rmsb86bl_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmsb86bl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.198315249041927e+01, -2.198319222067070e+01, -2.198343373297887e+01, -2.198278225958501e+01, -2.198317290043695e+01, -2.198317290043695e+01, -3.378449662657009e+00, -3.378453472445091e+00, -3.378795470028888e+00, -3.380122156205880e+00, -3.378459238325457e+00, -3.378459238325457e+00, -6.514924521672032e-01, -6.512936090094397e-01, -6.489455263501387e-01, -6.568009283348372e-01, -6.514218836876701e-01, -6.514218836876701e-01, -2.071097785674109e-01, -2.075750270051540e-01, -7.410214776333850e-01, -1.682000441935121e-01, -2.071285870294481e-01, -2.071285870294481e-01, -2.831041509018524e-02, -2.926748389039410e-02, -8.446858747217555e-02, -1.719356271664918e-02, -2.897019128345055e-02, -2.897019128345055e-02, -5.321217195309008e+00, -5.321404673740507e+00, -5.321241290234513e+00, -5.321386973345710e+00, -5.321306225549413e+00, -5.321306225549413e+00, -2.106485399569763e+00, -2.123182808060251e+00, -2.108169337932499e+00, -2.121066161251737e+00, -2.115930124241575e+00, -2.115930124241575e+00, -5.828634684721504e-01, -6.199816835657712e-01, -5.391872306182640e-01, -5.512791029724584e-01, -6.097445880554891e-01, -6.097445880554891e-01, -1.449534222100263e-01, -2.253984335019402e-01, -1.415575363902885e-01, -1.824611479233461e+00, -1.542602381989146e-01, -1.542602381989146e-01, -1.669126615692115e-02, -1.833339289274796e-02, -1.384436240913110e-02, -1.046215342634639e-01, -1.668261112112280e-02, -1.668261112112281e-02, -6.019212008663295e-01, -6.015287573970733e-01, -6.016709348489673e-01, -6.017776424795045e-01, -6.017236990364719e-01, -6.017236990364719e-01, -5.814401087470359e-01, -5.300724641187197e-01, -5.445005603925664e-01, -5.581571333339466e-01, -5.509932114555086e-01, -5.509932114555086e-01, -6.416299905158527e-01, -2.724498312497003e-01, -3.038546736388528e-01, -3.552299824850235e-01, -3.293471818277525e-01, -3.293471818277524e-01, -4.694717676708595e-01, -8.128030351651316e-02, -9.938399700131594e-02, -3.298288713272071e-01, -1.221422989668687e-01, -1.221422989668687e-01, -3.238311136893588e-02, -7.186522659147277e-03, -1.127421352490507e-02, -1.162652304394514e-01, -1.446530863077534e-02, -1.446530863077532e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_rmsb86bl_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmsb86bl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.774304442886663e+01, -2.774313678198883e+01, -2.774363002807085e+01, -2.774212125212915e+01, -2.774309238743837e+01, -2.774309238743837e+01, -4.194009462407780e+00, -4.194206824352166e+00, -4.200434808773131e+00, -4.199664937821149e+00, -4.194075798654231e+00, -4.194075798654231e+00, -7.828994139874955e-01, -7.811221777102854e-01, -7.349181798036485e-01, -7.470105489944182e-01, -7.822629182533554e-01, -7.822629182533554e-01, -1.632892174905009e-01, -1.695764330490751e-01, -8.969206783478071e-01, -1.333827968779756e-01, -1.652328624723276e-01, -1.652328624723276e-01, -2.725972998651535e-02, -2.821567063415328e-02, -7.776000949223255e-02, -1.611865227387652e-02, -2.792471763507890e-02, -2.792471763507890e-02, -6.832452739973818e+00, -6.834625447050736e+00, -6.832697843116013e+00, -6.834385840160652e+00, -6.833536306758326e+00, -6.833536306758326e+00, -2.212884483998453e+00, -2.264609577966383e+00, -2.210844138813784e+00, -2.254430689997186e+00, -2.251751408529509e+00, -2.251751408529509e+00, -7.358481372553107e-01, -8.518316605919865e-01, -6.892774155350591e-01, -7.613964978674403e-01, -7.707194904763190e-01, -7.707194904763190e-01, -1.148375358138885e-01, -1.415258389585510e-01, -1.115785616495741e-01, -2.556026844729862e+00, -1.146534906356093e-01, -1.146534906356093e-01, -1.563508656106703e-02, -1.726092649166569e-02, -1.302200383553483e-02, -9.040296161921334e-02, -1.570935046395195e-02, -1.570935046395197e-02, -7.991987480630596e-01, -7.903478235427396e-01, -7.935032207724483e-01, -7.959540950862605e-01, -7.947267063553358e-01, -7.947267063553358e-01, -7.754227133895882e-01, -6.312503324693588e-01, -6.715259529629072e-01, -7.107886477041728e-01, -6.904594712303164e-01, -6.904594712303164e-01, -8.943895416666998e-01, -2.136877629146930e-01, -2.650725893952853e-01, -4.088158082453733e-01, -3.315936658359006e-01, -3.315936658359007e-01, -5.365121320299681e-01, -7.592608914175746e-02, -8.859698762238331e-02, -4.029725169945727e-01, -9.814956158000052e-02, -9.814956158000049e-02, -3.125239886733125e-02, -6.476051765406781e-03, -1.039055755235302e-02, -9.353178148202348e-02, -1.358646295272412e-02, -1.358646295272411e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rmsb86bl_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmsb86bl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.577901757673132e-09, -4.577824028500047e-09, -4.576966785447150e-09, -4.578209765781415e-09, -4.577865547135277e-09, -4.577865547135277e-09, -8.276347261116496e-06, -8.282294091015873e-06, -8.469398286193819e-06, -8.491577427073018e-06, -8.277228359658054e-06, -8.277228359658054e-06, -6.329579560691474e-03, -6.338886282070231e-03, -6.577794011493498e-03, -6.632502764661759e-03, -6.333331955601015e-03, -6.333331955601015e-03, -1.714133055281326e+00, -1.639027277650489e+00, -2.543248838761425e-03, -1.479678894914229e+00, -1.690581659567039e+00, -1.690581659567039e+00, -4.691472140688069e+02, -4.211651560017440e+02, -1.393054119549868e+01, -2.305783381392965e+03, -4.389118901194445e+02, -4.389118901194445e+02, -1.074799319256499e-06, -1.074176759172372e-06, -1.074501315593886e-06, -1.074031386249504e-06, -1.074795392054894e-06, -1.074795392054894e-06, -1.236003069544374e-04, -1.096604316191713e-04, -1.184461729988589e-04, -1.067730747646286e-04, -1.204457444323242e-04, -1.204457444323242e-04, -2.302143540576741e-02, -1.719434340679677e-02, -2.338872162972949e-02, -2.227458257050142e-02, -1.816897296848012e-02, -1.816897296848012e-02, -2.644874631442590e+00, -1.224216393725798e+00, -2.955310482231081e+00, -1.708599302196686e-04, -2.840670445323064e+00, -2.840670445323064e+00, -2.572893870034573e+03, -1.873032933217719e+03, -5.696017374679817e+03, -7.627730686014670e+00, -2.737268189734491e+03, -2.737268189734489e+03, -8.333415878505748e-03, -8.379935149171276e-03, -8.364013028365013e-03, -8.350986339625610e-03, -8.358563838347969e-03, -8.358563838347969e-03, -1.196346728735711e-02, -1.644119411246563e-02, -1.532066450980048e-02, -1.411775687804996e-02, -1.504285718236763e-02, -1.504285718236764e-02, -1.451066370221803e-02, -5.175921360508225e-01, -3.619873722236414e-01, -1.330121938106550e-01, -2.444659318839749e-01, -2.444659318839749e-01, -5.666027258836640e-02, -1.486209408816049e+01, -8.444868325124419e+00, -1.813765514035049e-01, -5.146864066790635e+00, -5.146864066790632e+00, -2.869850126586298e+02, -5.169074268911040e+04, -1.045994786759063e+04, -6.195400008471694e+00, -4.700667234752399e+03, -4.700667234752427e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rmsb86bl_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmsb86bl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.408203092695468e-04, 1.408139911126554e-04, 1.407132058328692e-04, 1.408119519372756e-04, 1.408176632867415e-04, 1.408176632867415e-04, 1.554833586311177e-03, 1.558831802560251e-03, 1.685617489249113e-03, 1.704257688939638e-03, 1.555509037795984e-03, 1.555509037795984e-03, 9.379465532330562e-03, 9.342857771579139e-03, 8.565993685112190e-03, 9.805417891488481e-03, 9.367902535145503e-03, 9.367902535145503e-03, 1.132974638289132e-01, 1.115533088046942e-01, 1.764159416814580e-03, 4.492744998595762e-03, 1.126298751500854e-01, 1.126298751500854e-01, 2.377277726375707e-05, 1.448605027978379e-05, 6.827288593284107e-05, 8.959468165081580e-11, 2.253033519993155e-05, 2.253033519993046e-05, 4.060694507953897e-05, 4.012927978578426e-05, 4.004129837769682e-05, 3.970120761225665e-05, 4.105707155266877e-05, 4.105707155266877e-05, 9.112105788654705e-03, 7.788997884239622e-03, 8.418353297903200e-03, 7.295016634416417e-03, 9.094367766508609e-03, 9.094367766508609e-03, 4.925478777855722e-02, 4.698665957878221e-02, 3.730179425810322e-02, 4.227878148135946e-02, 4.214223194861828e-02, 4.214223194861828e-02, 2.567219451407831e-03, 7.974799831608388e-02, 3.152785495774494e-03, 1.158267402677199e-02, 1.956591389391517e-02, 1.956591389391517e-02, 8.866140171514092e-10, 3.371040115698521e-10, 6.379784705679567e-09, 3.851612058791058e-05, 1.406490884770271e-10, 1.406490884641750e-10, 7.031329662676056e-03, 6.849273026757514e-03, 6.916997510240167e-03, 6.966665157447077e-03, 6.945321002476109e-03, 6.945321002476105e-03, 1.478841170550188e-02, 1.043049134789643e-02, 1.255352687973358e-02, 1.391993047759332e-02, 1.400453229644223e-02, 1.400453229644226e-02, 4.552416869812253e-02, 6.473744361213248e-02, 8.183403916841778e-02, 5.515212772882738e-02, 7.950992715976957e-02, 7.950992715976951e-02, 5.745687700844646e-02, 1.649526608595719e-04, 1.267257202618739e-04, 6.518932398084062e-02, 2.984121975358663e-03, 2.984121975358644e-03, 3.817064300256273e-09, 1.601862991062640e-12, 2.965136987105977e-09, 2.584179176261933e-03, 1.029650891181640e-10, 1.029650891161407e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
