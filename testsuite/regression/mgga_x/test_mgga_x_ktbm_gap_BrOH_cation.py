
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_gap_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_gap", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.190857503477297e+01, -2.190868910539783e+01, -2.190919375497818e+01, -2.367140581427723e+01, -2.367202570530792e+01, -2.543586831173005e+01, -3.443807391688204e+00, -3.979202234515493e+00, -3.984416040149152e+00, -3.982675815497120e+00, -3.982441741093520e+00, -3.447560752971410e+00, -4.190340303623747e-01, -5.194275934077001e-01, -5.716287203784850e-01, -4.929790565086898e-01, -3.975843672162374e-01, -5.903156729729240e-01, -1.174674888514398e-01, -1.217414456321678e-01, -4.942152105638999e-01, -8.323808691378060e-02, -1.262831190557611e-01, -1.242394804226276e-01, -3.221747126024856e-03, -3.022313397333522e-03, -1.674212696076652e-02, -1.856873624121894e-03, -2.592429869208177e-03, -2.592429869208177e-03, -6.073478477503458e+00, -6.071799423049468e+00, -6.073373544033025e+00, -6.071893004687219e+00, -5.765439899750386e+00, -5.765712687864439e+00, -2.141361269555567e+00, -2.178570824300365e+00, -2.112537929132109e+00, -2.146274467948168e+00, -1.866789755038161e+00, -2.175902280298703e+00, -6.327736675303540e-01, -7.566585454382807e-01, -6.346592235786745e-01, -6.792113371633453e-01, -6.529017623527458e-01, -7.192851939996812e-01, -5.237073471582627e-02, -1.008674733125052e-01, -4.807360539502695e-02, -2.314543224485563e+00, -6.544261880215799e-02, -6.544261880215799e-02, -1.266096747059049e-03, -1.815181764247822e-03, -1.390207013698807e-03, -2.705238783792846e-02, -1.746398680788831e-03, -1.746398680788831e-03, -6.496042548633253e-01, -6.617222364830060e-01, -6.261846353839717e-01, -6.410942196549118e-01, -6.271626454480694e-01, -6.415103870603555e-01, -6.342498349214627e-01, -5.153837851458893e-01, -5.632617696948845e-01, -6.383681935023160e-01, -6.323640393793717e-01, -5.816986876639259e-01, -7.402575066918116e-01, -1.704636649168534e-01, -1.949630313162203e-01, -3.238089089367632e-01, -3.026837336190091e-01, -2.552432216196920e-01, -5.228115948551465e-01, -1.340699296836923e-02, -2.482928203959857e-02, -3.880056464006691e-01, -4.109022711424670e-02, -4.109022711424671e-02, -3.392114194878292e-03, -4.851015127557384e-04, -7.621706551449433e-04, -2.777208821638199e-02, -1.603722703819960e-03, -1.296458180540294e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_gap_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_gap", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.205981862683321e+01, -3.205920498152702e+01, -3.205983819018729e+01, -3.205921931426681e+01, -3.205995273201393e+01, -3.205936899804827e+01, -3.205972492917518e+01, -2.836312313973552e+01, -3.205982550113100e+01, -2.836345784021682e+01, -2.836390152940001e+01, -2.836345784021682e+01, -5.528480991874271e+00, -5.472363459463545e+00, -5.528183100166263e+00, -5.528463958181188e+00, -5.522321836464112e+00, -5.521321703444917e+00, -5.524928735733717e+00, -5.524997937251324e+00, -5.528257944917946e+00, -5.519771968808222e+00, -5.471283897260882e+00, -5.519771968808222e+00, -8.306403577638781e-01, -8.458723527169200e-01, -8.258987443531751e-01, -1.032664489790646e+00, -9.573363786526147e-01, -9.428750953589399e-01, -9.766794129968074e-01, -7.919017408839795e-01, -8.600532243148155e-01, -6.945715562854285e-01, -1.047915557902438e+00, -8.904339336662662e-01, -1.598218633012195e-01, -2.365018080686453e-01, -1.655099764672570e-01, -2.470150729395359e-01, -9.120315455209280e-01, -7.825163042021572e-01, -1.148588373000729e-01, -1.213543510519880e-01, -2.219062189024325e-01, -7.058257857515500e-02, -2.219062189024322e-01, -5.482494667758816e-02, -3.756928410540452e-03, -3.992652139171030e-03, -3.251767378583838e-03, -4.218423292076164e-03, -1.826020285051916e-02, -2.367294108680118e-02, -2.256993315860282e-03, -2.219367861075459e-03, -3.350863575674992e-03, -1.906086928344287e-03, -3.350863575674992e-03, -1.906086928344287e-03, -6.907043694579047e+00, -6.905397013243967e+00, -6.909608704927959e+00, -6.907874584360531e+00, -6.907209586073023e+00, -6.905499155655724e+00, -6.909409558934868e+00, -6.907748995765708e+00, -7.640765863046823e+00, -6.906632581500785e+00, -6.908332527443711e+00, -7.638935617750048e+00, -3.196100238409865e+00, -3.195004792656224e+00, -3.208767289137128e+00, -3.206997614551303e+00, -3.182973772199744e+00, -3.186215295446229e+00, -3.196868084776205e+00, -3.199110778196571e+00, -3.210027443107051e+00, -3.012355597237132e+00, -3.210027443107051e+00, -3.202543928597927e+00, -8.391400430015876e-01, -9.211300859551227e-01, -8.450670338866740e-01, -8.446342958666103e-01, -8.412397492307928e-01, -8.356932494201533e-01, -8.011940351877190e-01, -8.037371331055164e-01, -8.432516159061380e-01, -9.115162714098362e-01, -8.432516159061384e-01, -8.227767315021659e-01, -6.751392720417804e-02, -6.833116980340553e-02, -1.343968649667105e-01, -1.827931035923008e-01, -5.947892958824053e-02, -6.378360484827839e-02, -2.652182207393392e+00, -2.650659088109984e+00, -8.346677812056154e-02, -9.537914320996541e-02, -8.346677812056162e-02, -9.537914320996543e-02, -1.398849879696713e-03, -1.759371274405540e-03, -2.171565920302123e-03, -2.204414724739408e-03, -1.624042212478203e-03, -1.720031162163163e-03, -3.874338712388338e-02, -3.132377921984673e-02, -1.658371336293177e-03, -2.278389846825345e-03, -1.658371336293176e-03, -2.278389846825346e-03, -8.163586880677488e-01, -8.201302364225305e-01, -7.933481363695972e-01, -7.971085637164023e-01, -8.423351374736668e-01, -8.453842651520055e-01, -8.421284214505843e-01, -8.112559717758043e-01, -8.421974866834299e-01, -8.452733453862293e-01, -8.421974866834299e-01, -8.078705176395080e-01, -7.916471232497241e-01, -7.949360145267642e-01, -7.362496998840879e-01, -7.838762095667159e-01, -7.114306029060757e-01, -8.015956816870059e-01, -7.122647096540627e-01, -7.146629110240911e-01, -7.066711644907282e-01, -7.085634355115462e-01, -7.066711644907282e-01, -8.035030664361279e-01, -8.953580277287583e-01, -1.011673616408016e+00, -2.742824606574762e-01, -2.773340836574024e-01, -3.024234467423733e-01, -3.901851986656638e-01, -5.256745122522853e-01, -5.698772244957162e-01, -4.878941553837121e-01, -4.882193657655380e-01, -4.878941553837123e-01, -4.198392565368506e-01, -7.151022080564414e-01, -7.136596044157327e-01, -1.791631914176495e-02, -1.803958793344954e-02, -2.992183332246515e-02, -3.102351451893334e-02, -5.303320189505123e-01, -5.185484352301765e-01, -5.038870776515193e-02, -5.469263696826186e-02, -5.038870776515188e-02, -5.469263696826186e-02, -4.439488087869357e-03, -4.600618630171336e-03, -5.840960113811483e-04, -5.854310296747075e-04, -9.821578529716937e-04, -1.044614740533561e-03, -3.792908473914353e-02, -3.879531644493906e-02, -1.570947740458404e-03, -2.088139522814206e-03, -1.570947740458403e-03, -1.725077974985226e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_gap_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_gap", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.472389284111914e-08, 0.000000000000000e+00, -4.472577619127647e-08, -4.472355752271493e-08, 0.000000000000000e+00, -4.472553220035518e-08, -4.472227968794077e-08, 0.000000000000000e+00, -4.472375800193235e-08, -4.472608765817987e-08, 0.000000000000000e+00, -4.412998802851284e-08, -4.472370947402834e-08, 0.000000000000000e+00, -4.412828464255939e-08, -4.412537198203202e-08, 0.000000000000000e+00, -4.412828464255939e-08, -3.643832927363855e-05, 0.000000000000000e+00, -4.246169534162546e-05, -3.644862279747813e-05, 0.000000000000000e+00, -3.643837644856648e-05, -3.664944259678110e-05, 0.000000000000000e+00, -3.668385656950949e-05, -3.656407834072664e-05, 0.000000000000000e+00, -3.656230752802122e-05, -3.643874364048881e-05, 0.000000000000000e+00, -3.674056425291824e-05, -4.247479344136145e-05, 0.000000000000000e+00, -3.674056425291824e-05, -1.530026891057538e-02, 0.000000000000000e+00, -1.555245722880507e-02, -1.525215879292762e-02, 0.000000000000000e+00, -1.062066805985248e-02, -9.397827441359098e-03, 0.000000000000000e+00, -9.336460243895417e-03, -9.921675183390301e-03, 0.000000000000000e+00, -1.525891905324779e-02, -1.539670601843194e-02, 0.000000000000000e+00, -1.439294352600778e-02, -1.061625885935268e-02, 0.000000000000000e+00, -9.040278930565119e-03, -1.988270197927037e+00, 0.000000000000000e+00, -1.272465609382348e+00, -1.996732157562417e+00, 0.000000000000000e+00, -1.305254123962171e+00, -2.289818669373026e-03, 0.000000000000000e+00, -4.601970268550877e-03, -8.474903157263192e-01, 0.000000000000000e+00, -9.716541297255563e-01, -9.767865955455539e-01, 0.000000000000000e+00, -1.030180374139193e+00, -9.767865955455537e-01, 0.000000000000000e+00, -2.555977046736114e+00, -3.426425385798082e+02, 0.000000000000000e+00, -3.041669159893099e+02, -9.154809475000092e+02, 0.000000000000000e+00, -2.788953486201002e+02, -2.097335127808203e+01, 0.000000000000000e+00, -6.913095851720808e+00, -8.095938589195526e+02, 0.000000000000000e+00, -8.415183000980146e+02, -4.193428588272643e+02, 0.000000000000000e+00, -1.691925093276700e+03, -4.193428588272643e+02, 0.000000000000000e+00, -1.691925093276700e+03, -1.316408704114768e-05, 0.000000000000000e+00, -1.317677170979141e-05, -1.316440849441063e-05, 0.000000000000000e+00, -1.317708738604368e-05, -1.316419974895093e-05, 0.000000000000000e+00, -1.317685116238912e-05, -1.316446979983054e-05, 0.000000000000000e+00, -1.317713203497564e-05, -1.320336167204217e-05, 0.000000000000000e+00, -1.317693129325883e-05, -1.316419708892807e-05, 0.000000000000000e+00, -1.321615453473852e-05, -2.927525127176066e-04, 0.000000000000000e+00, -2.942047082609897e-04, -2.977151448077498e-04, 0.000000000000000e+00, -2.989936731164809e-04, -2.874856493474553e-04, 0.000000000000000e+00, -2.904301389514848e-04, -2.922764696902485e-04, 0.000000000000000e+00, -2.951637341986560e-04, -2.993369000413398e-04, 0.000000000000000e+00, -3.638030959791327e-04, -2.993369000413398e-04, 0.000000000000000e+00, -2.974381426097208e-04, -6.323799606334590e-02, 0.000000000000000e+00, -6.847550124022452e-02, -5.613092215508483e-02, 0.000000000000000e+00, -5.642643188039728e-02, -6.839355316264796e-02, 0.000000000000000e+00, -6.929268619406079e-02, -7.734464554436017e-02, 0.000000000000000e+00, -7.293802411019736e-02, -5.874528063174105e-02, 0.000000000000000e+00, -7.152282020422765e-02, -5.874528063174107e-02, 0.000000000000000e+00, -6.758812139007601e-02, -1.255939076947149e+00, 0.000000000000000e+00, -1.235921884379491e+00, -1.114005978862407e+00, 0.000000000000000e+00, -5.677591751709126e-01, -1.461637649946859e+00, 0.000000000000000e+00, -1.404847901629639e+00, -6.011567357666840e-04, 0.000000000000000e+00, -6.024231111082890e-04, -1.284997926494075e+00, 0.000000000000000e+00, -1.552362603583896e+00, -1.284997926494075e+00, 0.000000000000000e+00, -1.552362603583897e+00, -3.535305802857769e+03, 0.000000000000000e+00, -1.089144405585020e+03, -8.516222107581290e+02, 0.000000000000000e+00, -7.758678794247684e+02, -4.089051943354550e+03, 0.000000000000000e+00, -3.820767710815216e+03, -3.073075358901224e+00, 0.000000000000000e+00, -8.702156605236421e+00, -1.700213330917396e+03, 0.000000000000000e+00, -1.608907771777760e+03, -1.700213330917398e+03, 0.000000000000000e+00, -1.608907771777758e+03, -8.434814465001124e-02, 0.000000000000000e+00, -8.307112797621553e-02, -8.546107047095371e-02, 0.000000000000000e+00, -8.418748233061256e-02, -8.497133163418939e-02, 0.000000000000000e+00, -8.369305994204382e-02, -8.464639922653786e-02, 0.000000000000000e+00, -8.354073692317346e-02, -8.481382233115281e-02, 0.000000000000000e+00, -8.353771304336573e-02, -8.481382233115281e-02, 0.000000000000000e+00, -8.370724094898865e-02, -9.395499397623995e-02, 0.000000000000000e+00, -9.274511748261204e-02, -1.139409165260594e-01, 0.000000000000000e+00, -1.239378663105262e-01, -1.163126926272195e-01, 0.000000000000000e+00, -1.197759955143461e-01, -1.116535786885707e-01, 0.000000000000000e+00, -1.102523836244786e-01, -1.149073093663265e-01, 0.000000000000000e+00, -1.135765368381040e-01, -1.149073093663265e-01, 0.000000000000000e+00, -1.161742590694134e-01, -4.450870298384419e-02, 0.000000000000000e+00, -4.575718517067332e-02, -4.281870397171834e-01, 0.000000000000000e+00, -4.262498305900035e-01, -5.570238834057867e-01, 0.000000000000000e+00, -3.650060317572338e-01, -3.608512336774677e-01, 0.000000000000000e+00, -2.853712905368577e-01, -3.511812582195408e-01, 0.000000000000000e+00, -3.549842278154963e-01, -3.511812582195411e-01, 0.000000000000000e+00, -4.812384010105556e-01, -1.307240661132375e-01, 0.000000000000000e+00, -1.323900883306567e-01, -2.233903015918068e+01, 0.000000000000000e+00, -2.181726371093347e+01, -4.207224054871519e+00, 0.000000000000000e+00, -4.047299339994431e+00, -4.286324089590958e-01, 0.000000000000000e+00, -4.729167156757583e-01, -2.460603223771732e+00, 0.000000000000000e+00, -2.608721169703593e+00, -2.460603223771732e+00, 0.000000000000000e+00, -2.608721169703593e+00, -3.353043811533602e+02, 0.000000000000000e+00, -3.100261946955553e+02, -1.260519625895594e+04, 0.000000000000000e+00, -1.252015934918121e+04, -1.462182371708865e+04, 0.000000000000000e+00, -1.330492782773430e+04, -7.375489666642753e+00, 0.000000000000000e+00, -7.632113422821536e+00, -3.045191644721084e+03, 0.000000000000000e+00, -1.949385580507932e+03, -3.045191644721092e+03, 0.000000000000000e+00, -5.618143389768682e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_gap_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_gap", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.670044122775659e-03, 1.669792453821379e-03, 1.670001475935320e-03, 1.669761519035700e-03, 1.669877943220517e-03, 1.669580895855698e-03, 1.670356749763910e-03, 2.205764022689930e-03, 1.670017073350159e-03, 2.205359128932975e-03, 2.205475802908897e-03, 2.205359128932975e-03, 2.113395373666829e-02, 1.198574732673452e-02, 2.113551130578132e-02, 2.113394958394546e-02, 2.116526687645053e-02, 2.117024590316450e-02, 2.115280050202411e-02, 2.115254513630692e-02, 2.113385834374905e-02, 2.117834248126504e-02, 1.198471582476406e-02, 2.117834248126504e-02, 2.609456627253532e-02, 2.728063104036599e-02, 2.576638006993108e-02, 6.020454947179631e-02, 4.990103895935793e-02, 4.858365669213074e-02, 5.316615854155354e-02, 2.385729624886113e-02, 2.791275782352332e-02, 1.780301598117330e-02, 6.149939154012605e-02, 4.369714106289849e-02, 3.720692646755926e-02, 1.314252953712125e-01, 4.031901561683595e-02, 1.427479360772320e-01, 1.877748539400802e-02, 9.532539661740893e-03, 2.744824973171513e-02, 3.414699943202910e-02, 1.004034639498108e-01, 1.023905445887368e-02, 1.004034639498108e-01, 1.249887953888643e-03, 5.436619354803549e-04, 5.793350254731315e-04, 6.942885111293571e-07, 6.265836930968809e-04, 6.066651489294210e-05, 2.781120753975246e-03, 2.783622052173317e-04, 2.751063924699928e-04, 4.720108895466045e-04, 3.504033193804757e-04, 4.720108895466045e-04, 3.504033193804735e-04, 6.434890610564753e-03, 6.436121361103858e-03, 6.383999108699417e-03, 6.386921608886318e-03, 6.431350221516183e-03, 6.433915704093750e-03, 6.387713991680432e-03, 6.389251552893129e-03, 5.231661607664556e-03, 6.411491289910316e-03, 6.409349917840526e-03, 5.233323592761822e-03, 3.444782519580310e-02, 3.453398629914451e-02, 3.498753442745035e-02, 3.504981257257041e-02, 3.387113024975565e-02, 3.413156272419192e-02, 3.442570956698714e-02, 3.466399347988543e-02, 3.511829739858898e-02, 1.876000335644451e-02, 3.511829739858898e-02, 3.487523165019159e-02, 1.188330448223234e-01, 7.740956675091452e-02, 7.134156309794049e-02, 6.881850235820430e-02, 1.390248454622718e-01, 1.350689128175568e-01, 1.282370717035548e-01, 1.164928304210158e-01, 1.039889591135623e-01, 7.788656161453550e-02, 1.039889591135624e-01, 1.182761729895235e-01, 1.090346534415305e-02, 1.108960740612298e-02, 1.466362464452063e-02, 5.034811791568683e-02, 8.935444527666833e-03, 1.039315570602286e-02, 3.320282454742410e-02, 3.320240322070672e-02, 1.884870673614950e-02, 2.966870738471860e-02, 1.884870673614954e-02, 2.966870738471864e-02, 2.828895667187470e-08, 1.773602700855054e-04, 2.608001025920822e-04, 2.485457105924209e-04, 5.238470436216610e-04, 5.815334993566908e-04, 5.405188513993398e-03, 3.932561904696748e-04, 2.318779913240198e-04, 5.692201212779193e-04, 2.318779913240184e-04, 5.692201212779197e-04, 1.602341035527863e-02, 1.553167182585091e-02, 3.134724389123926e-02, 3.057755775201185e-02, 2.343955545089540e-02, 2.284701403197536e-02, 1.967520291047907e-02, 2.084399065728343e-02, 2.156803503469205e-02, 2.103331050003183e-02, 2.156803503469205e-02, 2.301467820994399e-02, 1.860016133394800e-02, 1.802319544393351e-02, 1.511066621873959e-01, 9.249555717552026e-02, 1.244260575465417e-01, 8.410477739418920e-02, 8.108606239846025e-02, 8.018758810631835e-02, 1.043568087692129e-01, 1.030463059913055e-01, 1.043568087692129e-01, 7.485057201337855e-02, 8.072888468401482e-02, 5.668625602392222e-02, 8.244516121415388e-02, 8.366064578653712e-02, 5.208083715031483e-02, 1.278229544230145e-01, 1.018595938405060e-01, 1.914706940240897e-01, 1.733617672236098e-01, 1.746873088392879e-01, 1.733617672236100e-01, 8.489113299417879e-02, 1.635396514098443e-01, 1.636815669325692e-01, 6.029389392705868e-05, 6.032456898100475e-05, 3.424284009676460e-03, 3.671894371974453e-03, 2.200173195736845e-01, 2.218852012488689e-01, 9.231835114673039e-03, 1.216350450396737e-02, 9.231835114673011e-03, 1.216350450396742e-02, 8.228337250843628e-07, 9.026518770009817e-07, 7.510256479776246e-05, 7.510857497392540e-05, 4.070395253329939e-08, 5.188697712906432e-08, 9.230020338617574e-04, 1.109537449344094e-03, 3.530527328154227e-04, 5.308962742541213e-04, 3.530527328154229e-04, 3.096140059276531e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
