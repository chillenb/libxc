
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_gap_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_gap", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.521154142903521e+01, -2.521158339480021e+01, -2.521191984763484e+01, -2.521129692685096e+01, -2.521160201248851e+01, -2.521160201248851e+01, -3.398718423184099e+00, -3.398966951994867e+00, -3.405878975460769e+00, -3.406426144299846e+00, -3.404748134495629e+00, -3.404748134495629e+00, -4.974954139584996e-01, -4.962795532295973e-01, -4.696946478599787e-01, -4.897968420051299e-01, -4.867733347776185e-01, -4.867733347776185e-01, -1.357875948697658e-01, -1.398629241988418e-01, -4.475262182482068e-01, -7.961493072128782e-02, -1.224588432884808e-01, -1.224588432884807e-01, -3.218323641001301e-03, -3.386344208927213e-03, -1.861712923539145e-02, -1.828355690936964e-03, -2.573250160281568e-03, -2.573250160281568e-03, -6.069520033296820e+00, -6.067887127335494e+00, -6.069497454240953e+00, -6.068054104645269e+00, -6.068667044194471e+00, -6.068667044194471e+00, -2.071122786257065e+00, -2.116796452907503e+00, -2.052808449729584e+00, -2.094567180041330e+00, -2.105140387167221e+00, -2.105140387167221e+00, -6.508592532113470e-01, -6.888082157248966e-01, -5.565086132450527e-01, -5.720211090431930e-01, -6.661969129955096e-01, -6.661969129955098e-01, -5.086681220399351e-02, -1.180120352181990e-01, -4.665996800518624e-02, -1.962482673844171e+00, -6.402209174358152e-02, -6.402209174358153e-02, -1.346043550555729e-03, -1.750824655948020e-03, -1.365612877720662e-03, -3.047749246893747e-02, -1.709057623286365e-03, -1.709057623286365e-03, -6.411164746099700e-01, -6.535185897734163e-01, -6.494022772651720e-01, -6.457852644264266e-01, -6.476148001632296e-01, -6.476148001632296e-01, -6.178660353962623e-01, -5.781925420569431e-01, -6.115500665232094e-01, -6.249656553474283e-01, -6.198901978310573e-01, -6.198901978310573e-01, -7.129739437605248e-01, -1.683738451576375e-01, -2.252669433208258e-01, -3.445306945936848e-01, -2.876312694208010e-01, -2.876312694208010e-01, -4.932951753091948e-01, -1.792085251295044e-02, -2.434108136667399e-02, -3.540375478380378e-01, -4.016037450426232e-02, -4.016037450426231e-02, -4.372336689584167e-03, -4.239309303352343e-04, -1.011868928701336e-03, -3.778612368526044e-02, -1.572180996479193e-03, -1.572180996479192e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_gap_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_gap", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.858529340296881e+01, -2.858420436217606e+01, -2.858534168548698e+01, -2.858423961143711e+01, -2.858542345674512e+01, -2.858437741069862e+01, -2.858486994249769e+01, -2.858367370733253e+01, -2.858532184755442e+01, -2.858390212129623e+01, -2.858532184755442e+01, -2.858390212129623e+01, -5.411191676383425e+00, -5.411146835442227e+00, -5.411191439831428e+00, -5.411143988693004e+00, -5.411127404897601e+00, -5.411168450819874e+00, -5.411533776102237e+00, -5.411627103230415e+00, -5.410322453795645e+00, -5.411598929621910e+00, -5.410322453795645e+00, -5.411598929621910e+00, -8.805716435461584e-01, -8.932136081677496e-01, -8.767068131791905e-01, -8.911961246562338e-01, -8.210950367750270e-01, -8.112645364538139e-01, -8.477770846909042e-01, -8.569414602735860e-01, -9.034288226315106e-01, -7.858438895354860e-01, -9.034288226315106e-01, -7.858438895354860e-01, -2.055424365015279e-01, -2.338975649197131e-01, -2.109678025017321e-01, -2.435015401932799e-01, -7.154969152339414e-01, -8.161331486157425e-01, -1.062668732122692e-01, -1.155015467475957e-01, -2.142832260573869e-01, -6.392653528623220e-02, -2.142832260573866e-01, -6.392653528623216e-02, -3.746093651699267e-03, -3.987712220404333e-03, -3.918440891662483e-03, -4.207059650720335e-03, -2.172401738990333e-02, -2.310218952266769e-02, -2.195393112220815e-03, -2.167359676725416e-03, -3.321978484217190e-03, -1.814979832847626e-03, -3.321978484217190e-03, -1.814979832847629e-03, -6.911783290266425e+00, -6.909863981036081e+00, -6.914304803134919e+00, -6.912299031245379e+00, -6.911838387005089e+00, -6.909886566938156e+00, -6.914005009738912e+00, -6.912101690150006e+00, -6.913131995828791e+00, -6.911091906008412e+00, -6.913131995828791e+00, -6.911091906008412e+00, -3.138568627941257e+00, -3.139527392723603e+00, -3.162221291832354e+00, -3.161979809233324e+00, -3.130574018309799e+00, -3.134015539435626e+00, -3.154286456096458e+00, -3.156894984892167e+00, -3.156542466108880e+00, -3.152395987908390e+00, -3.156542466108880e+00, -3.152395987908390e+00, -8.651459648355990e-01, -8.596560003593012e-01, -9.181085034221580e-01, -9.161560365560734e-01, -8.284007723216567e-01, -8.455242904697767e-01, -8.561969078012350e-01, -8.694509390664484e-01, -8.758261114328894e-01, -8.533609834321535e-01, -8.758261114328895e-01, -8.533609834321537e-01, -6.463714815513026e-02, -6.516690045878891e-02, -1.774468366672633e-01, -1.784651233997666e-01, -5.657730416938948e-02, -6.105528743565045e-02, -2.912277404418943e+00, -2.910820469034991e+00, -8.042164968183796e-02, -9.237272401922267e-02, -8.042164968183793e-02, -9.237272401922274e-02, -1.557182810250029e-03, -1.625214685147702e-03, -2.063451279133068e-03, -2.086130114488727e-03, -1.578409259674423e-03, -1.669399098248492e-03, -3.686195826824164e-02, -3.792042535185797e-02, -1.495736608507351e-03, -2.264207345906438e-03, -1.495736608507350e-03, -2.264207345906438e-03, -8.277307923105127e-01, -8.312395156290635e-01, -8.040382007673577e-01, -8.075762106088064e-01, -8.117393694199911e-01, -8.153335214529474e-01, -8.186892828651511e-01, -8.221748392142212e-01, -8.151602751252003e-01, -8.186998258725351e-01, -8.151602751252003e-01, -8.186998258725351e-01, -8.136328259263750e-01, -8.162349986381993e-01, -7.364692022027650e-01, -7.374281643783581e-01, -7.176240745133619e-01, -7.188509631430055e-01, -7.263222540294926e-01, -7.287438155855260e-01, -7.174338653313754e-01, -7.191069374352026e-01, -7.174338653313755e-01, -7.191069374352027e-01, -9.793032635677259e-01, -9.754054070929500e-01, -2.700389903479039e-01, -2.729105216176936e-01, -3.696798000665582e-01, -3.779889069506996e-01, -5.433190992203600e-01, -5.460906285923285e-01, -4.689906263067211e-01, -4.693201329532306e-01, -4.689906263067211e-01, -4.693201329532308e-01, -7.053908246098481e-01, -7.066466418970769e-01, -2.166343491604756e-02, -2.175711969170509e-02, -2.895237082450778e-02, -3.004828876051150e-02, -5.185015989328027e-01, -5.174892564179125e-01, -4.856011254776800e-02, -5.272355572035382e-02, -4.856011254776803e-02, -5.272355572035369e-02, -5.093843154032000e-03, -5.262661026784385e-03, -5.168864857240175e-04, -5.078341593545533e-04, -1.171979782170494e-03, -1.245844780816149e-03, -4.672224103787703e-02, -4.874720167314012e-02, -1.435809480875303e-03, -2.074820940668878e-03, -1.435809480875301e-03, -2.074820940668874e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_gap_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_gap", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.421810723339640e-08, 0.000000000000000e+00, -4.422005195378036e-08, -4.421783174903292e-08, 0.000000000000000e+00, -4.421985139228829e-08, -4.421668386769638e-08, 0.000000000000000e+00, -4.421828059748786e-08, -4.421981814284799e-08, 0.000000000000000e+00, -4.422226988165874e-08, -4.421796288533894e-08, 0.000000000000000e+00, -4.422047813166657e-08, -4.421796288533894e-08, 0.000000000000000e+00, -4.422047813166657e-08, -4.091214078917154e-05, 0.000000000000000e+00, -4.091021271994454e-05, -4.092100074561630e-05, 0.000000000000000e+00, -4.091645819784306e-05, -4.109786678398079e-05, 0.000000000000000e+00, -4.112875369178145e-05, -4.100374409032171e-05, 0.000000000000000e+00, -4.100517582305339e-05, -4.091825444985575e-05, 0.000000000000000e+00, -4.116117606430091e-05, -4.091825444985575e-05, 0.000000000000000e+00, -4.116117606430091e-05, -1.415258942152389e-02, 0.000000000000000e+00, -1.445533008396743e-02, -1.408385480409544e-02, 0.000000000000000e+00, -1.441742177327151e-02, -1.302899759700191e-02, 0.000000000000000e+00, -1.290069033805769e-02, -1.343062120568752e-02, 0.000000000000000e+00, -1.368389057293267e-02, -1.441840020817774e-02, 0.000000000000000e+00, -1.202500038478920e-02, -1.441840020817774e-02, 0.000000000000000e+00, -1.202500038478920e-02, -1.247723536936288e+00, 0.000000000000000e+00, -1.312351707902264e+00, -1.284482876995623e+00, 0.000000000000000e+00, -1.356941644952835e+00, -3.886248836889201e-03, 0.000000000000000e+00, -4.390459367678769e-03, -1.130740673111743e+00, 0.000000000000000e+00, -1.167600786914497e+00, -1.079031070621379e+00, 0.000000000000000e+00, -1.620379888340486e+00, -1.079031070621378e+00, 0.000000000000000e+00, -1.620379888340486e+00, -3.505826071360384e+02, 0.000000000000000e+00, -3.071832747287891e+02, -3.300749778808515e+02, 0.000000000000000e+00, -2.849256373017876e+02, -9.089078177609046e+00, 0.000000000000000e+00, -8.191488933425321e+00, -9.934142889056485e+02, 0.000000000000000e+00, -1.004701162520901e+03, -4.486253201627812e+02, 0.000000000000000e+00, -2.384768032620786e+03, -4.486253201627824e+02, 0.000000000000000e+00, -2.384768032620787e+03, -1.316520024522447e-05, 0.000000000000000e+00, -1.317782235928765e-05, -1.316549154518234e-05, 0.000000000000000e+00, -1.317810985437666e-05, -1.316528570010536e-05, 0.000000000000000e+00, -1.317788238583950e-05, -1.316553119203888e-05, 0.000000000000000e+00, -1.317813885628639e-05, -1.316531399749453e-05, 0.000000000000000e+00, -1.317797093663767e-05, -1.316531399749453e-05, 0.000000000000000e+00, -1.317797093663767e-05, -3.064391950404858e-04, 0.000000000000000e+00, -3.074959383582045e-04, -3.092577534906126e-04, 0.000000000000000e+00, -3.102279713716535e-04, -2.993958995412050e-04, 0.000000000000000e+00, -3.025193834678118e-04, -3.022475355560716e-04, 0.000000000000000e+00, -3.052606896764622e-04, -3.129327094274143e-04, 0.000000000000000e+00, -3.097831824930390e-04, -3.129327094274143e-04, 0.000000000000000e+00, -3.097831824930390e-04, -6.566742996360257e-02, 0.000000000000000e+00, -6.689136920522322e-02, -5.680899670042096e-02, 0.000000000000000e+00, -5.703239498504961e-02, -7.598139184046024e-02, 0.000000000000000e+00, -7.437037334743841e-02, -8.247241768117702e-02, 0.000000000000000e+00, -7.640616431172594e-02, -6.018113514576577e-02, 0.000000000000000e+00, -7.013953093512801e-02, -6.018113514576577e-02, 0.000000000000000e+00, -7.013953093512802e-02, -1.566432269467171e+00, 0.000000000000000e+00, -1.567249084758007e+00, -6.207236353440270e-01, 0.000000000000000e+00, -6.156572080531965e-01, -1.901705577965764e+00, 0.000000000000000e+00, -1.760050401501744e+00, -6.254744317584334e-04, 0.000000000000000e+00, -6.267491367199660e-04, -1.520101426499915e+00, 0.000000000000000e+00, -1.770850146970108e+00, -1.520101426499915e+00, 0.000000000000000e+00, -1.770850146970108e+00, -2.113005621862859e+03, 0.000000000000000e+00, -1.833430543764750e+03, -1.216004794337939e+03, 0.000000000000000e+00, -1.135754648495229e+03, -5.045637342086246e+03, 0.000000000000000e+00, -4.758709791377149e+03, -4.130259891784293e+00, 0.000000000000000e+00, -3.975014289255454e+00, -3.251360294374595e+03, 0.000000000000000e+00, -1.689815181474937e+03, -3.251360294374592e+03, 0.000000000000000e+00, -1.689815181474935e+03, -8.429529975373620e-02, 0.000000000000000e+00, -8.301914804107383e-02, -8.546973719293502e-02, 0.000000000000000e+00, -8.419357454736710e-02, -8.512764655878664e-02, 0.000000000000000e+00, -8.384643638325172e-02, -8.478612502327265e-02, 0.000000000000000e+00, -8.350929464864025e-02, -8.496359653279556e-02, 0.000000000000000e+00, -8.368418903530836e-02, -8.496359653279556e-02, 0.000000000000000e+00, -8.368418903530836e-02, -9.383088142086154e-02, 0.000000000000000e+00, -9.262433700944801e-02, -1.149765546495693e-01, 0.000000000000000e+00, -1.140351330020453e-01, -1.171711750437938e-01, 0.000000000000000e+00, -1.159151575542347e-01, -1.121007254458430e-01, 0.000000000000000e+00, -1.106846612379650e-01, -1.156228441662977e-01, 0.000000000000000e+00, -1.142481479037745e-01, -1.156228441662977e-01, 0.000000000000000e+00, -1.142481479037745e-01, -4.546027742250904e-02, 0.000000000000000e+00, -4.573973167617505e-02, -4.481995718066025e-01, 0.000000000000000e+00, -4.466967318620103e-01, -3.913951171565784e-01, 0.000000000000000e+00, -3.949745594603062e-01, -3.239419315431002e-01, 0.000000000000000e+00, -3.182688627046808e-01, -3.843833489453518e-01, 0.000000000000000e+00, -3.885064100356244e-01, -3.843833489453520e-01, 0.000000000000000e+00, -3.885064100356246e-01, -1.383705729562070e-01, 0.000000000000000e+00, -1.391766267001054e-01, -8.672763180079306e+00, 0.000000000000000e+00, -8.624340587599603e+00, -5.229130074438360e+00, 0.000000000000000e+00, -4.991132268638283e+00, -4.705319408305244e-01, 0.000000000000000e+00, -5.004518455557591e-01, -3.017625712923318e+00, 0.000000000000000e+00, -3.160444664700450e+00, -3.017625712923320e+00, 0.000000000000000e+00, -3.160444664700451e+00, -1.690339406828300e+02, 0.000000000000000e+00, -1.592283574160873e+02, -2.653967161197512e+04, 0.000000000000000e+00, -2.902785828689314e+04, -5.652049857539758e+03, 0.000000000000000e+00, -5.163723070690920e+03, -3.429730626024799e+00, 0.000000000000000e+00, -3.278933265198554e+00, -5.430634764243228e+03, 0.000000000000000e+00, -2.049877330293262e+03, -5.430634764243238e+03, 0.000000000000000e+00, -2.049877330293270e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_gap_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_gap", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_gap_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_gap", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.170730156094235e-03, 2.170414069907881e-03, 2.170659127659656e-03, 2.170362539581640e-03, 2.170471280459141e-03, 2.170082349338032e-03, 2.171269335979957e-03, 2.171100803089486e-03, 2.170684600590615e-03, 2.170722911357036e-03, 2.170684600590615e-03, 2.170722911357036e-03, 1.622585004421239e-02, 1.621822581260495e-02, 1.622812045282070e-02, 1.621913859198382e-02, 1.626515398285899e-02, 1.626986076649903e-02, 1.627773032658140e-02, 1.627161519700992e-02, 1.622400466854657e-02, 1.630470373380779e-02, 1.622400466854657e-02, 1.630470373380779e-02, 3.991332496302083e-02, 4.104734069487297e-02, 3.963593696657813e-02, 4.086176185663455e-02, 3.520413773113638e-02, 3.497037189820098e-02, 3.877627307379646e-02, 3.982241825284356e-02, 4.094803171775000e-02, 3.490028941154646e-02, 4.094803171775000e-02, 3.490028941154646e-02, 1.004340684972662e-01, 1.300180367786858e-01, 1.059709760304714e-01, 1.406501523996540e-01, 9.628529078789999e-03, 1.342011407585767e-02, 2.588625901897291e-02, 3.314134321021014e-02, 9.699385722764352e-02, 9.694079481641929e-03, 9.699385722764341e-02, 9.694079481641927e-03, 5.495001146643480e-04, 5.820312147971566e-04, 5.907144644847273e-04, 6.328585420837617e-04, 2.691194378511469e-03, 2.939940168753153e-03, 3.016631626613298e-04, 2.956149877613196e-04, 4.865759450846291e-04, 3.908640714445695e-04, 4.865759450846282e-04, 3.908640714445688e-04, 6.426877004809513e-03, 6.428565344271540e-03, 6.376132256909705e-03, 6.379504221388080e-03, 6.423528900640041e-03, 6.426497179452181e-03, 6.380010454527667e-03, 6.381951306509996e-03, 6.401272746619905e-03, 6.403981915341814e-03, 6.401272746619905e-03, 6.403981915341814e-03, 3.273406419963380e-02, 3.286876276109142e-02, 3.347738587198971e-02, 3.358093571451158e-02, 3.247195644491654e-02, 3.268376872493340e-02, 3.320823572333375e-02, 3.340716199988326e-02, 3.329055791510994e-02, 3.328287244561931e-02, 3.329055791510994e-02, 3.328287244561931e-02, 1.031208149129035e-01, 1.030962962300041e-01, 5.978689514695871e-02, 5.804561994328038e-02, 1.089217414658749e-01, 1.103962177101722e-01, 9.224112526549696e-02, 8.767751796872246e-02, 9.243739815586707e-02, 1.016091797598391e-01, 9.243739815586710e-02, 1.016091797598391e-01, 1.102277490369102e-02, 1.118488276309872e-02, 4.939233637705358e-02, 4.953485602422679e-02, 9.097775909458074e-03, 1.053631178367282e-02, 2.467067047390845e-02, 2.467251227403440e-02, 1.877560471041160e-02, 2.935807465166208e-02, 1.877560471041156e-02, 2.935807465166217e-02, 1.948606641438598e-04, 1.956954379312339e-04, 2.913075402520218e-04, 2.780925603904860e-04, 5.685825418684833e-04, 6.328303004638140e-04, 5.672217706180307e-03, 6.158021764303422e-03, 2.400575869190078e-04, 5.821496606399704e-04, 2.400575869190086e-04, 5.821496606399723e-04, 1.558195863205212e-02, 1.511384241377173e-02, 3.057788376525262e-02, 2.984459917857556e-02, 2.524268613121214e-02, 2.456686259245107e-02, 2.083588792251776e-02, 2.030893068438068e-02, 2.303389619426918e-02, 2.243358558461326e-02, 2.303389619426918e-02, 2.243358558461326e-02, 1.760213499116099e-02, 1.708621292114596e-02, 1.483240002615393e-01, 1.473661987292116e-01, 1.209600489417595e-01, 1.191503673155955e-01, 7.801366729969926e-02, 7.716428962166970e-02, 1.006980063655336e-01, 9.955338693139662e-02, 1.006980063655335e-01, 9.955338693139663e-02, 6.497780156723118e-02, 6.242328552975755e-02, 8.130516270859624e-02, 8.245444321177328e-02, 1.180879811141470e-01, 1.227251981988866e-01, 1.660202400565353e-01, 1.649173223400079e-01, 1.609727061472455e-01, 1.621049130266644e-01, 1.609727061472457e-01, 1.621049130266645e-01, 1.484756776073075e-01, 1.497300056059472e-01, 2.621565965755349e-03, 2.629649998599523e-03, 3.633620064374692e-03, 3.883925752193133e-03, 1.843628925139224e-01, 1.957200842964527e-01, 9.456470325198156e-03, 1.234707219108458e-02, 9.456470325198186e-03, 1.234707219108460e-02, 6.048896125508531e-04, 6.230118708969792e-04, 7.018353298515654e-05, 5.794454291256595e-05, 2.669858262289279e-04, 2.927731397750850e-04, 9.690197023191120e-03, 1.074310269183898e-02, 3.813272308527993e-04, 5.432503213694848e-04, 3.813272308528009e-04, 5.432503213694863e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
