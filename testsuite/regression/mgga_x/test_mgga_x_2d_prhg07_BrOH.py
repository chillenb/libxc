
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_2d_prhg07_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_2d_prhg07", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.636063887570538e+02, -1.636069818130669e+02, -1.636100810587483e+02, -1.636003606615198e+02, -1.636066977167752e+02, -1.636066977167752e+02, -1.076025280068720e+01, -1.076026476366485e+01, -1.076124595590932e+01, -1.076292697464905e+01, -1.076032688191638e+01, -1.076032688191638e+01, -9.605680068385983e-01, -9.602063565152685e-01, -9.530517509938683e-01, -9.601884229392773e-01, -9.604162765612979e-01, -9.604162765612979e-01, -1.887246444496719e-01, -1.890946814451055e-01, -1.217879491876010e+00, -1.604219470630561e-01, -1.887724629787769e-01, -1.887724629787769e-01, -4.767265162204848e-02, -4.818268649235050e-02, -8.837386334170240e-02, -4.252974530913549e-02, -4.772153958723131e-02, -4.772153958723131e-02, -2.242534846198981e+01, -2.036752929069441e+01, -1.975409545718498e+01, -2.320388880385233e+01, -1.913063849438095e+01, -2.001630672910423e+01, -4.547519365785586e+00, -5.030393114137294e+00, -4.737694905879657e+00, -4.779968904556554e+00, -4.800574572177990e+00, -4.622448653506159e+00, -1.353381969650523e+00, -1.148199377646134e+00, -1.157083604231848e+00, -7.243102803705738e-01, -8.104690812858234e-01, -8.528737941243912e-01, -5.036659113601868e-02, -3.502313419095544e-01, -4.940136013522729e-02, -4.437911408825788e+00, -1.322154923584802e-01, -1.125605771792377e-01, -8.743465103564575e-02, -1.564198906147863e+00, -4.267975475330388e-04, -2.472467013068468e-02, -5.889966694594002e-02, -5.720690680577265e-04, -2.746749340913219e+01, -7.648143102448604e-01, -7.670226969872697e-01, -4.629831270046266e+00, -7.678742867394083e-01, -7.953025316514785e+01, -7.341638147763607e-01, -6.299354247940840e-01, -1.042085340054032e+00, -6.711991197979751e-01, -7.248988237656159e-01, -1.288030607170825e+00, -1.574719608479636e+00, -1.847152343783080e-01, -2.390798353837686e-01, -3.455924828960004e-01, -4.208661513008379e-01, -3.796955010920202e-01, -5.509423790619585e-01, -1.689484722035068e-01, -1.110111804011828e-01, -3.385705023434812e-01, -3.683007095814343e-02, -1.031332284397639e-01, -2.169663000360776e-03, -1.435358004022780e-01, -2.467030836209027e-04, -3.431939784169450e-02, -4.482036850655173e-04, -4.482036850655161e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_2d_prhg07_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_2d_prhg07", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.464519496165716e+02, -2.464528551279540e+02, -2.464575390670643e+02, -2.464426980703523e+02, -2.464524217712118e+02, -2.464524217712118e+02, -1.606645690784325e+01, -1.606653916593244e+01, -1.606980297478776e+01, -1.606933747815117e+01, -1.606660280748936e+01, -1.606660280748936e+01, -1.277780270172268e+00, -1.275410800407556e+00, -1.216182315666190e+00, -1.230087709283042e+00, -1.276910400157230e+00, -1.276910400157230e+00, -1.828688814237218e-01, -1.854011660057494e-01, -1.704743770293166e+00, -1.299398758984627e-01, -1.835829818000345e-01, -1.835829818000345e-01, -2.103043889526894e-02, -2.135105010547898e-02, -4.879410517672660e-02, -1.703063464289543e-02, -2.116338862501805e-02, -2.116338862501806e-02, -2.962089223054916e+01, -2.938246734453626e+01, -2.963114318577747e+01, -2.988084934710868e+01, -3.005514190823823e+01, -2.945300135786074e+01, -6.821279048678379e+00, -6.721924670521525e+00, -6.559724819332723e+00, -6.618792421445327e+00, -6.686638890595348e+00, -6.679912526091368e+00, -1.386387241487577e+00, -1.337396359015105e+00, -1.219289209485763e+00, -1.068678283385513e+00, -1.128923686776608e+00, -1.138729507614737e+00, -7.554988670402803e-02, -3.086601123124135e-01, -7.410204020284095e-02, -6.596329431010745e+00, -9.505178660835785e-02, -6.596625993709986e-02, -5.191864977293108e-02, -9.383250548922680e-01, -6.401963212995582e-04, -3.708700519602701e-02, -3.262450518940176e-02, -8.581036020865897e-04, -1.875173610145641e+01, -1.147221465367291e+00, -1.150534045480905e+00, -3.671835724632004e+00, -1.151811430109112e+00, -5.172313459230649e+01, -1.101245722164541e+00, -8.341096138696314e-01, -1.111966116757540e+00, -1.006798679696963e+00, -9.543780495545193e-01, -1.287857785311158e+00, -1.643882449010278e+00, -2.770728515674620e-01, -3.586197530756530e-01, -5.183887243440006e-01, -4.553751406467768e-01, -4.249196678545881e-01, -7.125232922225719e-01, -1.159731240020987e-01, -7.014062723149146e-02, -4.391484545729357e-01, -5.524510643721514e-02, -6.361309009688666e-02, -3.254494500541164e-03, -8.576616494190577e-02, -3.700546254313540e-04, -5.147909676254175e-02, -6.723055275982758e-04, -6.723055275982743e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_2d_prhg07_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_2d_prhg07", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.607848681090536e-09, -1.607831325689075e-09, -1.607739807891095e-09, -1.608024288219164e-09, -1.607839646798207e-09, -1.607839646798207e-09, -5.618301357882426e-06, -5.618338827143822e-06, -5.618378376558778e-06, -5.613159705322444e-06, -5.618216350932220e-06, -5.618216350932220e-06, -6.367396069380726e-03, -6.356181375934714e-03, -6.056471136698121e-03, -5.970689831273016e-03, -6.364004106433083e-03, -6.364004106433083e-03, -6.497800322725282e-01, -6.456667212979443e-01, -3.457785609085828e-03, -1.206786296280136e+00, -6.491167680887124e-01, -6.491167680887124e-01, -1.425864291637776e+03, -1.258909211019899e+03, -2.286075833757002e+01, -9.928449483453775e+03, -1.308217024204672e+03, -1.308217024204672e+03, -4.403364004738286e-07, -7.255027981948319e-07, 0.000000000000000e+00, -3.813520305733038e-07, -1.204457946820999e-06, -8.139821577601216e-07, 0.000000000000000e+00, -4.141048237613323e-05, -5.506602551971028e-05, -5.352149991705730e-05, -5.350533469900541e-05, -6.877885010483924e-05, -1.905280563979969e-03, -2.890998590470817e-03, -2.933569854579975e-03, -1.817695587184610e-02, -1.115406410824575e-02, -8.479669505152400e-03, 0.000000000000000e+00, -1.471225969917498e-01, 0.000000000000000e+00, -7.739720602992107e-05, -2.235112869376457e+00, -3.270104331896939e+00, -4.192283715554801e+03, -8.022717207997074e+01, 0.000000000000000e+00, 0.000000000000000e+00, -6.356383501038323e+03, 0.000000000000000e+00, -1.100219047002261e-05, 0.000000000000000e+00, 0.000000000000000e+00, -1.639772932215999e-04, 0.000000000000000e+00, -2.607769732814762e-06, 0.000000000000000e+00, -2.251997495578078e-02, -3.963117535359339e-03, 0.000000000000000e+00, -1.345195984750275e-02, -2.308484516481656e-03, -1.182213933332120e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -5.860797760258447e-02, -8.070043924923780e-02, -3.211532095687407e-02, -9.533851095921381e+00, -9.985132045295211e+00, -1.434794355917902e-01, 0.000000000000000e+00, -6.024025975968744e+00, 0.000000000000000e+00, -4.689997063562001e+04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_2d_prhg07_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_2d_prhg07", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([-6.216496619660689e-05, -6.216474785741702e-05, -6.216356222861841e-05, -6.216714144307872e-05, -6.216485284225043e-05, -6.216485284225043e-05, -9.373701892405209e-04, -9.373823425197343e-04, -9.376669528670254e-04, -9.369129976383896e-04, -9.373710210726121e-04, -9.373710210726121e-04, -7.482546765711974e-03, -7.446389703185481e-03, -6.543358300625041e-03, -6.604241746206767e-03, -7.470164169206124e-03, -7.470164169206124e-03, -1.563332411648893e-02, -1.616318258627001e-02, -6.995140400891608e-03, -1.106440967412197e-02, -1.580524223534177e-02, -1.580524223534178e-02, -5.976508254820559e-03, -6.064122461977563e-03, -7.394473128502253e-03, -4.594609437208423e-03, -6.106674201393806e-03, -6.106674201393807e-03, -2.462823372698711e-04, -4.059938633420395e-04, 0.000000000000000e+00, -2.133925917445850e-04, -6.738420203401748e-04, -4.553877394836517e-04, 0.000000000000000e+00, -1.253619859204590e-03, -1.618361171212108e-03, -1.599135580614520e-03, -1.626586477987594e-03, -2.090908283845325e-03, -1.477487950994199e-03, -2.873439960237495e-03, -1.943673117646052e-03, -1.366578769265623e-02, -9.685449576596679e-03, -7.363182658923674e-03, 0.000000000000000e+00, -3.616309218379549e-03, 0.000000000000000e+00, -2.164765364507718e-03, -1.256604941432623e-02, -1.838488480274508e-02, -1.741715067180349e-03, -4.975083659774861e-05, 0.000000000000000e+00, 0.000000000000000e+00, -2.981713105015146e-03, 0.000000000000000e+00, -9.373984788304457e-06, 0.000000000000000e+00, 0.000000000000000e+00, -1.388953896753032e-04, 0.000000000000000e+00, -2.203983407611182e-06, 0.000000000000000e+00, -1.135833051748166e-02, -2.278058986501160e-03, 0.000000000000000e+00, -8.191110857451816e-03, -1.405672690193364e-03, -1.354423142531705e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -6.941872395082412e-03, -9.558633046409795e-03, -1.188469241246482e-02, -2.450002050782023e-03, -6.366251756054233e-03, -2.071816438270367e-02, 0.000000000000000e+00, -1.171253165168321e-02, 0.000000000000000e+00, -5.968559943059829e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_2d_prhg07_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_2d_prhg07", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.486598647864276e-04, 2.486589914296681e-04, 2.486542489144736e-04, 2.486685657723149e-04, 2.486594113690017e-04, 2.486594113690017e-04, 3.749480756962084e-03, 3.749529370078937e-03, 3.750667811468102e-03, 3.747651990553558e-03, 3.749484084290448e-03, 3.749484084290448e-03, 2.993018706284790e-02, 2.978555881274192e-02, 2.617343320250017e-02, 2.641696698482707e-02, 2.988065667682449e-02, 2.988065667682449e-02, 6.253329646595573e-02, 6.465273034508004e-02, 2.798056160356643e-02, 4.425763869648787e-02, 6.322096894136710e-02, 6.322096894136711e-02, 2.390603301928224e-02, 2.425648984791025e-02, 2.957789251400901e-02, 1.837843774883369e-02, 2.442669680557522e-02, 2.442669680557523e-02, 9.851293490794845e-04, 1.623975453368158e-03, 0.000000000000000e+00, 8.535703669783399e-04, 2.695368081360699e-03, 1.821550957934607e-03, 0.000000000000000e+00, 5.014479436818361e-03, 6.473444684848432e-03, 6.396542322458081e-03, 6.506345911950377e-03, 8.363633135381300e-03, 5.909951803976796e-03, 1.149375984094998e-02, 7.774692470584208e-03, 5.466315077062490e-02, 3.874179830638672e-02, 2.945273063569469e-02, 0.000000000000000e+00, 1.446523687351819e-02, 0.000000000000000e+00, 8.659061458030873e-03, 5.026419765730490e-02, 7.353953921098030e-02, 6.966860268721395e-03, 1.990033463909945e-04, 0.000000000000000e+00, 0.000000000000000e+00, 1.192685242006059e-02, 0.000000000000000e+00, 3.749593915321783e-05, 0.000000000000000e+00, 0.000000000000000e+00, 5.555815587012128e-04, 0.000000000000000e+00, 8.815933630444727e-06, 0.000000000000000e+00, 4.543332206992663e-02, 9.112235946004641e-03, 0.000000000000000e+00, 3.276444342980726e-02, 5.622690760773457e-03, 5.417692570126818e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 2.776748958032965e-02, 3.823453218563918e-02, 4.753876964985929e-02, 9.800008203128093e-03, 2.546500702421693e-02, 8.287265753081467e-02, 0.000000000000000e+00, 4.685012660673285e-02, 0.000000000000000e+00, 2.387423977223932e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
