
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mvsb_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvsb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.349483634391019e+01, -2.349488274108533e+01, -2.349499107699799e+01, -2.349429450728932e+01, -2.349467352337636e+01, -2.349467352337636e+01, -3.085459516971653e+00, -3.085375778748413e+00, -3.083295078497230e+00, -3.085253150855595e+00, -3.084370941488207e+00, -3.084370941488207e+00, -6.241509295737675e-01, -6.238613169434615e-01, -6.178297705707309e-01, -6.239477592980861e-01, -6.220016178795282e-01, -6.220016178795282e-01, -1.828903758312931e-01, -1.856353657462785e-01, -7.244407333067904e-01, -1.292703753577640e-01, -1.506046621874606e-01, -1.506046621874606e-01, -1.462001133085954e-03, -1.588081979864840e-03, -1.904604028247811e-02, -6.252709963969813e-04, -9.125446878305763e-04, -9.125446878305764e-04, -5.674709996451525e+00, -5.675716090641933e+00, -5.674703455954694e+00, -5.675594341592469e+00, -5.675246896021771e+00, -5.675246896021771e+00, -2.049811999139174e+00, -2.070760706991472e+00, -2.051077987033125e+00, -2.070517761621706e+00, -2.059746190334291e+00, -2.059746190334291e+00, -6.148056068534260e-01, -7.502708799194864e-01, -4.750467522220856e-01, -5.837601509867180e-01, -6.441487233360310e-01, -6.441487233360310e-01, -7.776213255228170e-02, -1.783339055441115e-01, -6.990571947357470e-02, -2.027217975504897e+00, -1.013530798646547e-01, -1.013530798646547e-01, -4.250544256765261e-04, -6.078126946588211e-04, -5.179442002426346e-04, -4.015698296705535e-02, -6.162479636128803e-04, -6.162479636128802e-04, -6.466413088841967e-01, -6.433168332004403e-01, -6.444784874695708e-01, -6.454426948597720e-01, -6.449617614469525e-01, -6.449617614469525e-01, -6.336857118147585e-01, -4.914620903176029e-01, -5.887551534182397e-01, -5.999066956888645e-01, -5.922735321989911e-01, -5.922735321989911e-01, -7.527291119344905e-01, -2.312937691636996e-01, -2.779641897615532e-01, -3.343703791528842e-01, -3.150894267696703e-01, -3.150894267696703e-01, -4.302260465688406e-01, -1.773771262472460e-02, -2.809796506245221e-02, -3.023824858813533e-01, -5.908896996300415e-02, -5.908896996300418e-02, -2.317085166383735e-03, -9.561387928368920e-05, -2.906541548203812e-04, -5.410608379459002e-02, -5.681941010326644e-04, -5.681941010326638e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mvsb_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvsb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.407755229767530e+01, -3.407747332277297e+01, -3.407744093850617e+01, -3.407861060239093e+01, -3.407795210363608e+01, -3.407795210363608e+01, -3.357991589758809e+00, -3.357765270989226e+00, -3.351371421741518e+00, -3.349880533848713e+00, -3.351543943115938e+00, -3.351543943115938e+00, -7.471975251126066e-01, -7.465324228966584e-01, -7.283687504592997e-01, -7.237864226963967e-01, -7.261079437156143e-01, -7.261079437156143e-01, -2.322716676760643e-01, -2.341232294441425e-01, -9.251869692431549e-01, -1.965282395525265e-01, -2.108041696303134e-01, -2.108041696303134e-01, -2.711754680133127e-03, -2.949549528985679e-03, -3.583547825642427e-02, -1.178995279838663e-03, -1.710348968509307e-03, -1.710348968509308e-03, -7.993415888712618e+00, -7.989685481965826e+00, -7.993264713700946e+00, -7.989970988192832e+00, -7.991506588247865e+00, -7.991506588247865e+00, -2.077779385410379e+00, -2.076186730324415e+00, -2.161134452581636e+00, -2.156813575859798e+00, -2.015668919890678e+00, -2.015668919890678e+00, -1.069279747462852e+00, -1.109533045902666e+00, -4.911836882093809e-01, -9.055373989261981e-01, -1.135225097091049e+00, -1.135225097091049e+00, -1.384960281117856e-01, -2.491267774043667e-01, -1.261836361851802e-01, -3.202867725461734e+00, -1.654518262449131e-01, -1.654518262449131e-01, -8.089912103736473e-04, -1.158184872337775e-03, -9.784544470343159e-04, -7.507718355707116e-02, -1.172815653998625e-03, -1.172815653998625e-03, -8.597356146829438e-01, -8.656510187354926e-01, -8.632973910611850e-01, -8.615750859398472e-01, -8.624089235778406e-01, -8.624089235778406e-01, -8.302749246911830e-01, 1.544481073025610e+00, -9.018348811682105e-01, -8.306103013620636e-01, -8.515029162541847e-01, -8.515029162541846e-01, -1.273478237023177e+00, -2.964713761187927e-01, -3.388204475428592e-01, -2.672638810188338e-01, -3.524863970492264e-01, -3.524863970492262e-01, -1.629820687973384e-01, -3.312388183944685e-02, -5.286400043552084e-02, -2.593209150213283e-01, -1.069802538460589e-01, -1.069802538460589e-01, -4.416724787263518e-03, -1.829968248273156e-04, -5.442042767466564e-04, -9.825995131371902e-02, -1.077047008460581e-03, -1.077047008460580e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mvsb_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvsb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([2.383091715601967e-08, 2.382971988296747e-08, 2.382334794256041e-08, 2.384104846942791e-08, 2.383192249299681e-08, 2.383192249299681e-08, -5.643540016633560e-06, -5.642044935691609e-06, -5.607452141074454e-06, -5.678080683939800e-06, -5.648166814644187e-06, -5.648166814644187e-06, -3.254678748989563e-03, -3.281181205639072e-03, -4.046032335702244e-03, -4.445619986170869e-03, -4.275855538237251e-03, -4.275855538237251e-03, -4.314546536953685e-01, -4.374602963460218e-01, -7.301201470333821e-04, 2.620029240502043e-02, -1.996602972269868e-01, -1.996602972269866e-01, 6.038999115283987e+01, 5.920242100879192e+01, 4.064253881040999e+00, 1.651534418201101e+02, 1.255457069810889e+02, 1.255457069810893e+02, 4.659192224131793e-06, 4.636196928361169e-06, 4.657373339651901e-06, 4.637112422958506e-06, 4.647890341247380e-06, 4.647890341247380e-06, -1.586536368824336e-04, -1.656174966477343e-04, -1.434415342415534e-04, -1.513565754932408e-04, -1.735533644976239e-04, -1.735533644976239e-04, -1.096803038908085e-02, -1.719040280884833e-02, -8.986707085768441e-03, -3.468135340447237e-03, -2.462658299312343e-02, -2.462658299312343e-02, 7.106870574961717e-01, -1.353421032188247e-01, 9.082137571144618e-01, -6.804089984839791e-05, 2.705391544064882e-01, 2.705391544064880e-01, 3.171377818883833e+02, 2.138183921730384e+02, 9.138858659457600e+02, 2.310317336688497e+00, 4.670894222891758e+02, 4.670894222891747e+02, 2.200049873549036e-02, 2.517668349214711e-02, 2.397135204154820e-02, 2.305029910404280e-02, 2.350439152404004e-02, 2.350439152404004e-02, 2.685703961133246e-02, -5.346534598174321e-01, 1.821522853966533e-01, 6.106953591926276e-02, 9.765278009690347e-02, 9.765278009690352e-02, -2.022994656984581e-02, -1.530726652592253e-01, -1.301091799696069e-01, -2.008931989046235e-01, -1.561034849027526e-01, -1.561034849027528e-01, -1.229273231223408e-01, 3.656058427920107e+00, 2.692198976036317e+00, -1.496120897685681e-01, 1.511581945360378e+00, 1.511581945360379e+00, 4.558753965556006e+01, 4.110793737635145e+03, 7.016950407761029e+02, 1.561603704324379e+00, 5.806243873120942e+02, 5.806243873120969e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mvsb_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvsb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-3.905777820978854e-03, -3.905595565313434e-03, -3.904509866388119e-03, -3.907197061524904e-03, -3.905828260307013e-03, -3.905828260307013e-03, -3.032282306746948e-03, -3.035141036954072e-03, -3.111027760941415e-03, -3.076976385682517e-03, -3.082186000878968e-03, -3.082186000878968e-03, 5.961617527540449e-04, 6.974611553622001e-04, 3.411842444096785e-03, 4.025214339179225e-03, 3.674136926184424e-03, 3.674136926184424e-03, 4.259943668716580e-02, 4.303368871283438e-02, -5.720901193168451e-05, 1.383721913981728e-02, 2.108908282262838e-02, 2.108908282262839e-02, 2.884752874902504e-04, 3.144327352418105e-04, 2.138276597797994e-03, 8.325423608939563e-05, 1.575565036220431e-04, 1.575565036220427e-04, -1.043907548476231e-02, -1.039283050612087e-02, -1.043456157347673e-02, -1.039386084630981e-02, -1.041678179831102e-02, -1.041678179831102e-02, 1.375789082090975e-02, 1.510606807749828e-02, 1.313930319568987e-02, 1.454148898474649e-02, 1.499380572375546e-02, 1.499380572375546e-02, 1.429264912440119e-01, 1.126256813694049e-01, -3.225116840352477e-02, 6.409627907566916e-02, 2.104068670809039e-01, 2.104068670809039e-01, 7.488259289099081e-03, 2.295456847624324e-02, 6.737896582043981e-03, 2.626719554978155e-02, 1.422340868510915e-02, 1.422340868510916e-02, 3.980047688291666e-05, 6.284028353920835e-05, 1.786918502388106e-04, 4.359578293852528e-03, 1.150204867634979e-04, 1.150204867634980e-04, -7.462735147904022e-02, -8.417495125726997e-02, -8.054581145992216e-02, -7.777688996837732e-02, -7.914366799722217e-02, -7.914366799722217e-02, -8.746752076230606e-02, 4.468492366949280e-01, -4.997852200937060e-01, -1.714285136767890e-01, -2.678788033005288e-01, -2.678788033005290e-01, 1.852715890822449e-01, 3.245183206240229e-02, 3.618928476262427e-02, 3.632951681360081e-02, 4.927526894289219e-02, 4.927526894289221e-02, 3.418241579862088e-02, 2.263939976911892e-03, 2.863578758242010e-03, -3.334085959324986e-02, 7.924235357042517e-03, 7.924235357042519e-03, 2.042725139212285e-04, 9.962767492711348e-06, 7.605398273339620e-05, 8.390172638253210e-03, 1.365371610730196e-04, 1.365371610730194e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
