
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mvsb_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvsb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.393820534048459e+01, -2.393841965115978e+01, -2.393933371979638e+01, -2.393615613769457e+01, -2.393782629192000e+01, -2.393782629192000e+01, -3.011906386235924e+00, -3.011858331249172e+00, -3.010637767770812e+00, -3.011405395631204e+00, -3.011010289391656e+00, -3.780615593708254e+00, -6.023504016694093e-01, -7.229275611335836e-01, -7.014753290850896e-01, -7.084215805618694e-01, -7.069367804550144e-01, -7.069367804550144e-01, -1.845325427862841e-01, -1.877215265064042e-01, -7.121019423850898e-01, -1.293049155578283e-01, -1.521647757105668e-01, -1.521647757105668e-01, -1.460738125231411e-03, -1.585536362191085e-03, -1.879394996893955e-02, -6.166981864790511e-04, -9.053839803068976e-04, -9.053839803068976e-04, -5.671917076477238e+00, -5.672969293394106e+00, -5.671969570380162e+00, -6.154494780590475e+00, -5.672448279026786e+00, -5.672448279026786e+00, -1.717106837276057e+00, -1.725494637952804e+00, -1.711066213130884e+00, -1.718564424981176e+00, -1.724559129834413e+00, -2.139626462057235e+00, -6.387142911532339e-01, -6.942835762111627e-01, -5.905014178794321e-01, -6.143696026328340e-01, -6.491133160566195e-01, -6.203423374961160e-01, -8.442031507588099e-02, -1.793171152901905e-01, -7.813521108637593e-02, -2.090219060195075e+00, -1.009973956343913e-01, -1.009973956343913e-01, -2.493210604179088e-03, -5.869624642644026e-04, -5.096607185207236e-04, -5.263165503695552e-02, -2.909886942529730e-03, -5.978590280032581e-04, -6.423393082730962e-01, -6.386383797164110e-01, -6.591939098294013e-01, -6.410146156738867e-01, -6.404778059963191e-01, -6.404778059963191e-01, -6.249261212806758e-01, -5.357825929657638e-01, -5.614311982686342e-01, -5.867278113314488e-01, -5.738234827429491e-01, -5.707424752791866e-01, -7.277851127370377e-01, -1.993997071982579e-01, -2.831970374550490e-01, -3.053612343453408e-01, -3.273798416254000e-01, -3.273798416254000e-01, -3.913367627759853e-01, -1.762992624896693e-02, -2.763657615017529e-02, -3.644301622628734e-01, -6.692384721008389e-02, -5.828243793533005e-02, -2.233273650964974e-03, -8.319531637151207e-05, -2.886173024115420e-04, -5.366092149834523e-02, -5.562465313680386e-04, -5.562465313680380e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mvsb_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvsb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.985080162181986e+01, -3.985129363554802e+01, -3.985336155122111e+01, -3.984606723949984e+01, -3.984990711212659e+01, -3.984990711212659e+01, -3.668748808900475e+00, -3.668592798681270e+00, -3.664522824364384e+00, -3.666504866857317e+00, -3.665911703621966e+00, -3.275933635422565e+00, -7.705560476178556e-01, -8.417670909675039e-01, -8.372345846054511e-01, -8.359860585221763e-01, -8.364043178152525e-01, -8.364043178152525e-01, -2.316550776539076e-01, -2.333682447114684e-01, -9.269818674978385e-01, -1.997669812601452e-01, -2.136058699818952e-01, -2.136058699818952e-01, -2.704924111112735e-03, -2.936010779530108e-03, -3.474376866211960e-02, -1.141988721001100e-03, -1.676562859190967e-03, -1.676562859190967e-03, -7.997182850034323e+00, -7.993389803985502e+00, -7.996951593678125e+00, -8.160822113032291e+00, -7.995281240269797e+00, -7.995281240269797e+00, -2.130311703699836e+00, -2.133772708681680e+00, -2.128006860482217e+00, -2.131342111268661e+00, -2.133020284643117e+00, -2.132746127127602e+00, -1.605747101145381e+00, -1.015972632507619e+00, -3.784733717900110e-01, -1.458891616516483e+00, -1.250584443122056e+00, -9.443131526948411e-01, -1.120654770297398e-01, -2.496509798306809e-01, -1.037817378209452e-01, -3.716792812698324e+00, -1.648731380176943e-01, -1.648731380176943e-01, -3.324267306539093e-03, -1.086925337996202e-03, -9.437763994209431e-04, -7.003920041439429e-02, -3.879806524965367e-03, -1.107100662387727e-03, -8.659251653070336e-01, -8.724541119016996e-01, -8.357440436192827e-01, -8.679689231669655e-01, -8.688935268111979e-01, -8.688935268111979e-01, -8.438583292709909e-01, 1.513694425308464e-01, -9.964420290077246e-01, -8.541683316351171e-01, -8.915919818819654e-01, -9.174411870140697e-01, -1.112773127441242e+00, -2.593523579248564e-01, -3.369733514149744e-01, -3.794314806517088e-01, -3.646509047466777e-01, -3.646509047466776e-01, -4.743783420258922e-01, -3.259905095442155e-02, -5.097453484615271e-02, -2.820647783400289e-01, -8.890379797112122e-02, -1.041917021601406e-01, -4.135432019116910e-03, -1.540600952868559e-04, -5.344567991476660e-04, -9.641730841463704e-02, -1.030043491667002e-03, -1.030043491667001e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mvsb_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvsb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.519450351982830e-08, -1.519561897505480e-08, -1.520000805067012e-08, -1.518350794135712e-08, -1.519223454334153e-08, -1.519223454334153e-08, -1.781840812243435e-06, -1.781269053867345e-06, -1.765827269869192e-06, -1.771482762980255e-06, -1.771616443564543e-06, -3.379756969556000e-05, -1.351797780311134e-03, -4.799738946525627e-03, -4.144881843884445e-03, -4.509006474748112e-03, -4.420565244310241e-03, -4.420565244310241e-03, -4.981131026562802e-01, -5.173700493137335e-01, -5.205792154559434e-04, -7.983831548635474e-02, -2.918874224503204e-01, -2.918874224503205e-01, 5.808111971893943e+01, 5.519267751156567e+01, 2.687889073744907e+00, 1.090091530793985e+02, 9.517593627096281e+01, 9.517593627096281e+01, 4.633722466148999e-06, 4.611274846202960e-06, 4.632450159192156e-06, 1.940673632674566e-07, 4.622433189905914e-06, 4.622433189905914e-06, -2.045108713329918e-05, -1.957916765241873e-05, -2.106209582596926e-05, -2.033098701432764e-05, -1.965153074203638e-05, -2.015298653878554e-04, 1.693392865300887e-01, 2.549691617436166e-02, -9.578391062508530e-02, 1.770617118642203e-01, 8.858698650044429e-02, -3.260864040193623e-03, -6.286368337388267e-01, -1.690013318425384e-01, -7.504571288411475e-01, 6.592101393787667e-04, 8.273435543177499e-02, 8.273435543177453e-02, -8.042757697268818e+02, 1.044120926676103e+02, 5.766680943999346e+02, -1.893609165614814e+00, -1.175524071459659e+03, 2.396860403840134e+02, 2.044045207406012e-02, 2.323527168293949e-02, 2.954360805494368e-02, 2.136776526499314e-02, 2.176710447316101e-02, 2.176710447316101e-02, 2.313223805000370e-02, -3.787349573233484e-01, 1.259341200145591e-01, 4.864927262115785e-02, 7.226674298410932e-02, -2.179942451901744e-02, 2.606061349505603e-02, -8.659803761497167e-02, -1.613318315549317e-01, -2.065388957579719e-02, -1.767396520372599e-01, -1.767396520372600e-01, -5.795345668685236e-03, 2.901126322089159e+00, 1.657719519767758e+00, -5.013250321050939e-01, -1.342258676543711e+00, 8.818873332823044e-01, 2.183892163901043e+01, 8.573201623352368e+02, 5.445621505048367e+02, 1.069848379178508e+00, 3.360369132479722e+02, 3.360369132479732e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mvsb_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvsb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [4.651482413853354e-03, 4.651721600799990e-03, 4.652679264426056e-03, 4.649138757192913e-03, 4.651009220093658e-03, 4.651009220093658e-03, -2.609778506647811e-03, -2.611142224533227e-03, -2.647348913526153e-03, -2.632407325170323e-03, -2.634278492207656e-03, 2.276627736883955e-02, -3.109328258268032e-03, 2.505051400374958e-02, 2.072867728834005e-02, 2.267971747652924e-02, 2.220961433899747e-02, 2.220961433899747e-02, 5.256145099050826e-02, 5.555752711541008e-02, -9.123768404513647e-04, 2.163443933782058e-02, 3.182275123449035e-02, 3.182275123449037e-02, 2.943275816679310e-04, 3.261580629315774e-04, 2.725015200680207e-03, 1.063674695771170e-04, 1.842892739243325e-04, 1.842892739243325e-04, -1.034745990934513e-02, -1.030313300606343e-02, -1.034490986007853e-02, -6.554258477016301e-04, -1.032518458664760e-02, -1.032518458664760e-02, -3.067102137177219e-03, -3.303885045626844e-03, -2.891927936562108e-03, -3.092530915874214e-03, -3.290793668977293e-03, 2.488013411344210e-02, -5.420955674689470e-01, -1.044240963962091e-01, 2.444177249755747e-01, -5.043352122814279e-01, -2.972707665887912e-01, 5.460454585956001e-02, -2.702015816346330e-04, 2.828745039490924e-02, -2.211013797965809e-04, -7.381505386533818e-02, 1.901939072126932e-02, 1.901939072126933e-02, -7.840340868300019e-09, 9.518266303616397e-05, 2.350493950066507e-04, -8.483313450212442e-05, -4.941694475020424e-08, 1.708013535278756e-04, -6.640816749038096e-02, -7.412774204961872e-02, -1.115913931434066e-01, -6.896919574778375e-02, -7.007290371373884e-02, -7.007290371373884e-02, -6.919637630286092e-02, 7.187061956241177e-01, -2.732570757438418e-01, -1.202479878600368e-01, -1.671919083777930e-01, 1.251965025725323e-01, -1.229874111033892e-01, -3.484179031155192e-03, 5.273247218153954e-02, -1.658212393749055e-02, 8.135877745714086e-02, 8.135877745714086e-02, -2.196332198667168e-02, 2.572872398546671e-03, 3.818861400717524e-03, 3.014803438011026e-01, -2.383689106000822e-04, 1.077216315671149e-02, 3.111627603175089e-04, 1.492523977392099e-05, 8.768432540850151e-05, 1.029532887373441e-02, 1.897157291870379e-04, 1.897157291870378e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
