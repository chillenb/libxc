
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_21_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_21", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.175671393915013e+01, -2.175684556053956e+01, -2.175742089784510e+01, -2.347620785919380e+01, -2.347700826237839e+01, -2.519770921577172e+01, -3.494956548675874e+00, -3.942023296107791e+00, -3.945079174108618e+00, -3.944203754768567e+00, -3.943886772811464e+00, -3.497234722316406e+00, -5.453743590612092e-01, -6.162856809941872e-01, -6.525811240780756e-01, -5.980494646853313e-01, -5.337352261404811e-01, -6.647803486941586e-01, -1.552816543583578e-01, -1.585720137517919e-01, -6.797543733570277e-01, -1.163066345608124e-01, -1.571688283257517e-01, -1.569918234923435e-01, -5.045927036513350e-03, -5.370247692007829e-03, -2.963755078705159e-02, -2.908931288262277e-03, -4.060705962708948e-03, -4.060705962708948e-03, -6.110940121141086e+00, -6.111227219027839e+00, -6.110948175889552e+00, -6.111202105782392e+00, -5.800135056670987e+00, -5.800413653140938e+00, -2.165916153009373e+00, -2.192916970664076e+00, -2.145442254226658e+00, -2.169643013912018e+00, -1.941234350284383e+00, -2.190820253259848e+00, -6.217941518899790e-01, -7.514850382637721e-01, -6.235699843379156e-01, -6.622980398624996e-01, -6.418147132262408e-01, -7.021128367147247e-01, -7.809420905000100e-02, -1.499224454562897e-01, -7.212482765244074e-02, -2.261362917129442e+00, -9.370064616873808e-02, -9.370064616873808e-02, -2.271463241383698e-03, -2.843644573997718e-03, -2.177761055264002e-03, -4.806821026561901e-02, -2.735669641369590e-03, -2.735669641369591e-03, -6.783261674861334e-01, -6.805422832926120e-01, -6.463712882724402e-01, -6.652453784046629e-01, -6.488407594976729e-01, -6.641682785832037e-01, -6.608348972775155e-01, -5.103409298221575e-01, -5.531989053879232e-01, -6.348431131476560e-01, -6.220059217008510e-01, -5.735985121383211e-01, -7.307576389098432e-01, -2.090387808368620e-01, -2.393056106676603e-01, -3.400733702764376e-01, -3.205464010605235e-01, -2.849711292547245e-01, -5.162025394470835e-01, -2.860601024020156e-02, -3.841006663593625e-02, -3.825863140087862e-01, -6.173305641419160e-02, -6.173305641419160e-02, -7.287279881145457e-03, -7.600132319935463e-04, -1.638022126913675e-03, -5.733586309822854e-02, -2.512218721636587e-03, -2.559244699786168e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_21_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_21", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.282344070444279e+01, -3.282350504229795e+01, -3.282356240338903e+01, -3.282359341728578e+01, -3.282396678387310e+01, -3.282416855138444e+01, -3.282259298310547e+01, -2.953762009942077e+01, -3.282351293268569e+01, -2.953837345794458e+01, -2.953867401636213e+01, -2.953837345794458e+01, -4.894199137743644e+00, -4.802269101970174e+00, -4.894163675534805e+00, -4.894146530257757e+00, -4.893440477100501e+00, -4.893360086770002e+00, -4.894118590095156e+00, -4.894185925410249e+00, -4.893493635746903e+00, -4.893614102698820e+00, -4.801059341151089e+00, -4.893614102698819e+00, -7.640718182841973e-01, -7.719556643586674e-01, -7.615184967285079e-01, -9.189222505409707e-01, -8.786578060779525e-01, -8.699647335775256e-01, -8.872786043184103e-01, -7.419210678720097e-01, -7.811163003463070e-01, -6.931420988893316e-01, -9.289234984364448e-01, -8.391479630235582e-01, -1.800555230858711e-01, -2.297408635797681e-01, -1.828571582789133e-01, -2.358699077160669e-01, -9.629977225377300e-01, -8.484319607701180e-01, -1.509638406268345e-01, -1.545575891803528e-01, -2.257895769322214e-01, -1.060544218681841e-01, -2.257895769322210e-01, -1.045562247562499e-01, -6.347976688109643e-03, -6.745603459540486e-03, -6.983559874889703e-03, -7.126184191359911e-03, -3.859787861777812e-02, -3.921151157750580e-02, -3.815566119297338e-03, -3.751982885220929e-03, -5.662818926494445e-03, -3.222293115566975e-03, -5.662818926494445e-03, -3.222293115566972e-03, -7.316999592874819e+00, -7.315264732995482e+00, -7.321231427029813e+00, -7.319353164348571e+00, -7.317281867332904e+00, -7.315439319622853e+00, -7.320911081698217e+00, -7.319151558642210e+00, -8.011587110631243e+00, -7.317309475895661e+00, -7.319128099499095e+00, -8.009636026053753e+00, -2.764174287886958e+00, -2.764054356910285e+00, -2.784284540447109e+00, -2.783472854675350e+00, -2.746455239092977e+00, -2.751556562348083e+00, -2.764688046874379e+00, -2.769699574583375e+00, -2.787903152885824e+00, -2.600709651974318e+00, -2.787903152885824e+00, -2.776067200729901e+00, -8.108148845960992e-01, -8.760864328669126e-01, -8.825312022726124e-01, -8.842747505272365e-01, -7.490375108016653e-01, -7.701369479471568e-01, -7.671598579142527e-01, -7.895061123581391e-01, -8.402019317078098e-01, -8.695394696740236e-01, -8.402019317078098e-01, -8.003943695422324e-01, -1.013129521025900e-01, -1.023298248140493e-01, -1.815575568139319e-01, -2.103185878488837e-01, -9.118547637592352e-02, -9.640695723003731e-02, -2.640364671553176e+00, -2.639159021897458e+00, -1.177673610850788e-01, -1.268623556781999e-01, -1.177673610850788e-01, -1.268623556781999e-01, -3.006188125556156e-03, -2.974658314657405e-03, -3.671230752794412e-03, -3.726790116100975e-03, -2.745303015627081e-03, -2.907403460248429e-03, -6.218728974849497e-02, -6.380549698416300e-02, -2.803817224748241e-03, -3.850787014695668e-03, -2.803817224748239e-03, -3.850787014695670e-03, -8.697678229541267e-01, -8.737372084046067e-01, -8.458124423230625e-01, -8.498458844210344e-01, -8.965289769231902e-01, -8.998713270530808e-01, -8.968617064306424e-01, -8.647619533338521e-01, -8.967040183717326e-01, -9.000436065606041e-01, -8.967040183717326e-01, -8.612731590285133e-01, -8.436447001930405e-01, -8.471031076835454e-01, -6.836221541872355e-01, -7.184960587835786e-01, -7.075143954371422e-01, -7.831335304902617e-01, -7.459985129497458e-01, -7.488747850837784e-01, -7.237910611532155e-01, -7.266250202634734e-01, -7.237910611532153e-01, -8.080788004087621e-01, -9.192993498849331e-01, -1.025850003660781e+00, -2.785011615400085e-01, -2.805855280910516e-01, -2.908156227779504e-01, -3.562132085886413e-01, -4.528794822122635e-01, -4.923150031204690e-01, -4.222858390179602e-01, -4.223461420346321e-01, -4.222858390179602e-01, -3.665388536061090e-01, -6.352804915610453e-01, -6.385749253457544e-01, -3.787875248561876e-02, -3.813708994540955e-02, -4.910443092607028e-02, -5.077598361209497e-02, -4.683448142864472e-01, -4.720035802744487e-01, -7.786325503547985e-02, -8.264662171062828e-02, -7.786325503547983e-02, -8.264662171062825e-02, -9.532354354698836e-03, -9.877695249691372e-03, -9.876590813135380e-04, -9.899164510320687e-04, -2.110698074917906e-03, -2.244883009628875e-03, -7.466712082013481e-02, -7.570166968225842e-02, -2.655842322748778e-03, -3.529483334472837e-03, -2.655842322748772e-03, -3.706264088479574e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_21_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_21", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.029903781643059e-08, 0.000000000000000e+00, -4.030252984258508e-08, -4.029899912387730e-08, 0.000000000000000e+00, -4.030250101689136e-08, -4.029859170689923e-08, 0.000000000000000e+00, -4.030199586063287e-08, -4.029906759711389e-08, 0.000000000000000e+00, -4.694370409500688e-08, -4.029904151416042e-08, 0.000000000000000e+00, -4.694210970957852e-08, -4.693892449395208e-08, 0.000000000000000e+00, -4.694210970957852e-08, -3.871304247773591e-05, 0.000000000000000e+00, -2.914318279250699e-05, -3.872361278518180e-05, 0.000000000000000e+00, -3.871315275880559e-05, -3.892984151166761e-05, 0.000000000000000e+00, -3.896512530459671e-05, -3.884174507560514e-05, 0.000000000000000e+00, -3.883985438048471e-05, -3.871429809961659e-05, 0.000000000000000e+00, -3.902280134152200e-05, -2.914791507531452e-05, 0.000000000000000e+00, -3.902280134152200e-05, -7.607272284005513e-03, 0.000000000000000e+00, -7.858066083404582e-03, -7.547479676361050e-03, 0.000000000000000e+00, -1.141561024738758e-02, -1.003312367964813e-02, 0.000000000000000e+00, -9.953333661257403e-03, -1.061962791206263e-02, 0.000000000000000e+00, -7.320591669644076e-03, -7.858432015584040e-03, 0.000000000000000e+00, -6.150303230643221e-03, -1.141771000169988e-02, 0.000000000000000e+00, -9.575904274477440e-03, -6.728104802194538e-01, 0.000000000000000e+00, -1.333231991964401e+00, -7.035849628622370e-01, 0.000000000000000e+00, -1.376386066115874e+00, -2.306035381924098e-03, 0.000000000000000e+00, -1.683719728176806e-03, -7.065911235171886e-01, 0.000000000000000e+00, -8.413405540346636e-01, -1.002884190348109e+00, 0.000000000000000e+00, -6.741459954663193e-01, -1.002884190348109e+00, 0.000000000000000e+00, 3.850455539281440e-01, -1.363757615844347e+02, 0.000000000000000e+00, -1.211481389775379e+02, 3.392893441185893e+02, 0.000000000000000e+00, -1.111787101358319e+02, 7.010348807609349e+00, 0.000000000000000e+00, -3.124515190146858e+00, -3.210213286846653e+02, 0.000000000000000e+00, -3.336642650899969e+02, -1.667005428948537e+02, 0.000000000000000e+00, -6.709556628531759e+02, -1.667005428948537e+02, 0.000000000000000e+00, -6.709556628531759e+02, -1.413490874503315e-05, 0.000000000000000e+00, -1.414854662335229e-05, -1.413809369172831e-05, 0.000000000000000e+00, -1.415163283288240e-05, -1.413522746030698e-05, 0.000000000000000e+00, -1.414875524631250e-05, -1.413795231811521e-05, 0.000000000000000e+00, -1.415155077865121e-05, -1.264049193513865e-05, 0.000000000000000e+00, -1.415009157799258e-05, -1.413644990613081e-05, 0.000000000000000e+00, -1.265257522555474e-05, -3.131194024137025e-04, 0.000000000000000e+00, -3.146300199692346e-04, -3.179976266702123e-04, 0.000000000000000e+00, -3.193325874711737e-04, -3.078507701540497e-04, 0.000000000000000e+00, -3.108599276283270e-04, -3.126180356149183e-04, 0.000000000000000e+00, -3.155518492225799e-04, -3.196245825984720e-04, 0.000000000000000e+00, -2.347564894385804e-04, -3.196245825984720e-04, 0.000000000000000e+00, -3.178248316637522e-04, -6.667842259264463e-02, 0.000000000000000e+00, -5.439457380383936e-02, -5.976988584579022e-02, 0.000000000000000e+00, -6.014476102488243e-02, -7.258313982375050e-02, 0.000000000000000e+00, -7.320965923427419e-02, -8.155675995919462e-02, 0.000000000000000e+00, -7.693246138903402e-02, -6.201274490256642e-02, 0.000000000000000e+00, -5.708008444447057e-02, -6.201274490256645e-02, 0.000000000000000e+00, -7.127016202178696e-02, -8.245955797099890e-01, 0.000000000000000e+00, -8.156647977980185e-01, -2.277063688974447e-01, 0.000000000000000e+00, -5.403471439452481e-01, -9.051001609644834e-01, 0.000000000000000e+00, -9.052018813050488e-01, -6.345535271851058e-04, 0.000000000000000e+00, -6.358957877709913e-04, -9.622109076648007e-01, 0.000000000000000e+00, -1.274143340259802e+00, -9.622109076648011e-01, 0.000000000000000e+00, -1.274143340259803e+00, 1.315825461221279e+03, 0.000000000000000e+00, -4.315035587602075e+02, -3.376305632006674e+02, 0.000000000000000e+00, -3.075821392266433e+02, -1.622360254736952e+03, 0.000000000000000e+00, -1.516520594035228e+03, -1.619749948155714e+00, 0.000000000000000e+00, 2.257881150801647e+00, -6.737313593649775e+02, 0.000000000000000e+00, -6.391036040347888e+02, -6.737313593649782e+02, 0.000000000000000e+00, -6.391036040347896e+02, -9.266149603790219e-02, 0.000000000000000e+00, -9.128539178692545e-02, -9.299469969137107e-02, 0.000000000000000e+00, -9.164348068527217e-02, -8.807434369427898e-02, 0.000000000000000e+00, -8.688970389649353e-02, -8.878816487372104e-02, 0.000000000000000e+00, -9.148016650346896e-02, -8.843431428156960e-02, 0.000000000000000e+00, -8.722969471273288e-02, -8.843431428156960e-02, 0.000000000000000e+00, -9.153652248517508e-02, -1.030714659015917e-01, 0.000000000000000e+00, -1.017782800432662e-01, -1.203083682700046e-01, 0.000000000000000e+00, -9.282072202546619e-02, -1.227650045214172e-01, 0.000000000000000e+00, -9.924335615835511e-02, -1.190322327020861e-01, 0.000000000000000e+00, -1.175636477978125e-01, -1.217196826797346e-01, 0.000000000000000e+00, -1.203386153605754e-01, -1.217196826797346e-01, 0.000000000000000e+00, -1.011018682215509e-01, -4.717014988682840e-02, 0.000000000000000e+00, -4.043881267480946e-02, -4.400689922790912e-01, 0.000000000000000e+00, -4.388310519997316e-01, -2.545948678315138e-01, 0.000000000000000e+00, -3.902162783506856e-01, -2.286441214581720e-01, 0.000000000000000e+00, -3.053878182376783e-01, -3.782379171380361e-01, 0.000000000000000e+00, -3.823120122778599e-01, -3.782379171380363e-01, 0.000000000000000e+00, -2.717285892447783e-01, -1.387897386838956e-01, 0.000000000000000e+00, -1.403818323494646e-01, 7.476899964559902e+00, 0.000000000000000e+00, 7.299397227729923e+00, -1.999787853342265e+00, 0.000000000000000e+00, -1.950310999587309e+00, -4.556214103402200e-01, 0.000000000000000e+00, -5.002800126167049e-01, -1.487689984520287e+00, 0.000000000000000e+00, -1.681971847453108e+00, -1.487689984520288e+00, 0.000000000000000e+00, -1.681971847453108e+00, 1.241024155531095e+02, 0.000000000000000e+00, 1.146990584783866e+02, -4.990403112851965e+03, 0.000000000000000e+00, -4.956738344468087e+03, 5.442161167943707e+03, 0.000000000000000e+00, 4.951487755913091e+03, 1.474417465860483e+00, 0.000000000000000e+00, 1.417211628658565e+00, -1.207246040081449e+03, 0.000000000000000e+00, -7.739637267466591e+02, -1.207246040081452e+03, 0.000000000000000e+00, 2.087415903215428e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_21_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_21", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.236486629347633e-03, 2.236661538504873e-03, 2.236504656035549e-03, 2.236674595018721e-03, 2.236551424551103e-03, 2.236744612196973e-03, 2.236349769331864e-03, 3.428695934884581e-03, 2.236498583543885e-03, 3.428553878667930e-03, 3.428540785287179e-03, 3.428553878667930e-03, 1.795169251346676e-02, 5.550779083131433e-03, 1.795501687938848e-02, 1.795135994815876e-02, 1.801948578775152e-02, 1.803078755964848e-02, 1.799457967402617e-02, 1.799441531690825e-02, 1.794715616289601e-02, 1.805194636641139e-02, 5.547583721986228e-03, 1.805194636641139e-02, 3.667133205183962e-03, 4.136783447028760e-03, 3.538104039540696e-03, 4.398732273031122e-02, 3.606968567999758e-02, 3.507319350640489e-02, 3.853798169504813e-02, 2.788473552000687e-03, 4.431821816817560e-03, 8.532098092962649e-04, 4.502282112769927e-02, 3.141513904070643e-02, -2.464049911926996e-03, 9.407602761889144e-02, -1.946181576710875e-03, 1.024152145134199e-01, 1.332349455445785e-02, -2.951777957938557e-04, 1.855274831485223e-02, 2.337062655914030e-02, 7.150855274905643e-02, 6.187308147565252e-03, 7.150855274905640e-02, -1.051690789072144e-03, 2.165788935485914e-04, 2.309805686097185e-04, -9.666780960226153e-07, 2.500691681288518e-04, -7.805182196862507e-05, 1.268230924154881e-03, 1.104080033967146e-04, 1.091106083173585e-04, 1.877696601077821e-04, 1.389991703369426e-04, 1.877696601077821e-04, 1.389991703369398e-04, 1.335999673099903e-02, 1.336309768992494e-02, 1.334147425952185e-02, 1.334519264477273e-02, 1.335872936475264e-02, 1.336231006373865e-02, 1.334284644683014e-02, 1.334605451403248e-02, 9.996108763087420e-03, 1.335414279369440e-02, 1.335069909152455e-02, 9.998402836500893e-03, 2.743771984448592e-02, 2.753695769455721e-02, 2.818458699690422e-02, 2.825807201073977e-02, 2.672127148654589e-02, 2.702680187657809e-02, 2.741450250205784e-02, 2.771589813242949e-02, 2.837049467392170e-02, 7.072903855994254e-03, 2.837049467392170e-02, 2.800160319763125e-02, 1.257868367531231e-01, 5.999872546064219e-02, 1.143536714574787e-01, 1.137188626755899e-01, 1.197131604056874e-01, 1.260074925518187e-01, 1.321359183102274e-01, 1.301701013055361e-01, 1.226904845462036e-01, 6.144853248524603e-02, 1.226904845462037e-01, 1.278911796989359e-01, 6.601249948856631e-03, 6.733738316295683e-03, -3.578708286287529e-03, 3.532887604444358e-02, 5.223634271972358e-03, 6.224159702442724e-03, 3.903846412267627e-02, 3.905680298756536e-02, 1.220401654116486e-02, 1.994184422974656e-02, 1.220401654116478e-02, 1.994184422974667e-02, -3.952227962299670e-08, 7.027761546428371e-05, 1.034222746316637e-04, 9.855702162225074e-05, 2.079197983795761e-04, 2.309233407873973e-04, 2.820514207733665e-03, -4.282999890784483e-04, 9.190071252162244e-05, 2.262415264139421e-04, 9.190071252162181e-05, 2.262415264139439e-04, 1.017667205928752e-01, 1.011670138636462e-01, 1.092439607275486e-01, 1.085444394901008e-01, 9.417451608510423e-02, 9.386342857292125e-02, 9.437012408523766e-02, 1.038751159948258e-01, 9.428711504641447e-02, 9.396423112091332e-02, 9.428711504641447e-02, 1.049483546269683e-01, 1.055936252030738e-01, 1.050007849255135e-01, 1.435629504206226e-01, 5.779095045947218e-02, 1.456687976148294e-01, 7.695255319553924e-02, 1.347108849615439e-01, 1.340883978363929e-01, 1.417557784251725e-01, 1.411150732388891e-01, 1.417557784251724e-01, 8.467325311440134e-02, 1.114656435495416e-01, 6.894211413973657e-02, 5.873076626024558e-02, 5.961838605757813e-02, 4.516357146311453e-03, 9.252273215646556e-02, 3.613695358888829e-02, 1.518446206483419e-01, 1.298366534390342e-01, 1.309626629793619e-01, 1.298366534390343e-01, 2.021068248440516e-02, 1.400738717857826e-01, 1.425676690039340e-01, -7.764896480512709e-05, -7.766614386041696e-05, 1.637182203946877e-03, 1.777322797268461e-03, 1.857960506331036e-01, 2.010636776948792e-01, 5.315297507542564e-03, 7.287082796019140e-03, 5.315297507542614e-03, 7.287082796019141e-03, -1.144432850377757e-06, -1.255032800526518e-06, 2.973373806879600e-05, 2.973612726388787e-05, -5.686702117166978e-08, -7.248444045595361e-08, -8.753795260356644e-04, -1.017125622212053e-03, 1.400006356125470e-04, 2.108864495416547e-04, 1.400006356125432e-04, -4.319562028066255e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
