
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_21_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_21", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.496060803473952e+01, -2.496068151683886e+01, -2.496115084923926e+01, -2.496006167804608e+01, -2.496061202414928e+01, -2.496061202414928e+01, -3.410288179474569e+00, -3.410432451859324e+00, -3.414550896381200e+00, -3.415629261583073e+00, -3.414148717313239e+00, -3.414148717313239e+00, -5.887723539229365e-01, -5.880805250183299e-01, -5.724898251780062e-01, -5.834733534048158e-01, -5.817682760317064e-01, -5.817682760317064e-01, -1.647100561402109e-01, -1.679052025386077e-01, -6.479803470422014e-01, -1.138608645823450e-01, -1.538421694696026e-01, -1.538421694696024e-01, -5.044598136066730e-03, -5.311366447767841e-03, -2.929379138543767e-02, -2.900566799724360e-03, -4.054937129232373e-03, -4.054937129232372e-03, -6.106691514689629e+00, -6.107027291003392e+00, -6.106787876693635e+00, -6.107080987164132e+00, -6.106821240732199e+00, -6.106821240732199e+00, -2.094022116832251e+00, -2.129341516241783e+00, -2.083939000176595e+00, -2.116120863523664e+00, -2.118381348300001e+00, -2.118381348300001e+00, -6.336484471032746e-01, -6.832299125261780e-01, -5.501673228708173e-01, -5.621625522372541e-01, -6.493525153264800e-01, -6.493525153264800e-01, -7.732159958819142e-02, -1.565883846556338e-01, -7.144441545646456e-02, -1.928069959045551e+00, -9.272518187082127e-02, -9.272518187082129e-02, -2.235367187241857e-03, -2.830708505436506e-03, -2.170838253923315e-03, -4.763826755183206e-02, -2.731949406947350e-03, -2.731949406947350e-03, -6.690655172986417e-01, -6.716764851958137e-01, -6.709037260027628e-01, -6.701376262964920e-01, -6.705301519037512e-01, -6.705301519037512e-01, -6.431049576719921e-01, -5.642616790929874e-01, -5.968723025635433e-01, -6.207538506416416e-01, -6.089824818270990e-01, -6.089824818270990e-01, -7.025775632015143e-01, -2.069652199345596e-01, -2.571340412444388e-01, -3.513146445557075e-01, -3.055830801696058e-01, -3.055830801696058e-01, -4.867679272822462e-01, -2.803289258831307e-02, -3.823524065272468e-02, -3.497963010040667e-01, -6.126372319234102e-02, -6.126372319234107e-02, -7.079834737642895e-03, -7.608846962238033e-04, -1.595529548415797e-03, -5.751023902838272e-02, -2.508032025716644e-03, -2.508032025716641e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_21_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_21", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.980484349070983e+01, -2.980409494452082e+01, -2.980496514968170e+01, -2.980418340219927e+01, -2.980523767743540e+01, -2.980460668503033e+01, -2.980385983445527e+01, -2.980285135117321e+01, -2.980491921087498e+01, -2.980346761238260e+01, -2.980491921087498e+01, -2.980346761238260e+01, -4.892492024500061e+00, -4.892192676390342e+00, -4.892691458186256e+00, -4.892310585888032e+00, -4.896435855780976e+00, -4.897132618003649e+00, -4.895851396542958e+00, -4.895846655986210e+00, -4.891271860723578e+00, -4.899287201706493e+00, -4.891271860723578e+00, -4.899287201706493e+00, -8.216800758633722e-01, -8.278030345342099e-01, -8.197458662685922e-01, -8.267426428497295e-01, -7.928508177853170e-01, -7.881838445360029e-01, -8.073321585248038e-01, -8.115287457074697e-01, -8.335549743339790e-01, -7.785870655737241e-01, -8.335549743339790e-01, -7.785870655737241e-01, -2.130733842543112e-01, -2.285008029495610e-01, -2.163912331752828e-01, -2.341797833687670e-01, -8.421088157702442e-01, -8.833952431500683e-01, -1.488610940611063e-01, -1.529385799235457e-01, -2.221669917695985e-01, -1.062302277141085e-01, -2.221669917695980e-01, -1.062302277141085e-01, -6.353642585461087e-03, -6.748187333249177e-03, -6.661837107106529e-03, -7.132114413620536e-03, -3.737878449381379e-02, -3.944903123793131e-02, -3.847428089520176e-03, -3.778948082451073e-03, -5.677887183463481e-03, -3.268895250464184e-03, -5.677887183463480e-03, -3.268895250464185e-03, -7.322466676582827e+00, -7.320417751862900e+00, -7.326644105734514e+00, -7.324453276437791e+00, -7.322621035959344e+00, -7.320500512409123e+00, -7.326208224522394e+00, -7.324169253102188e+00, -7.324661928181358e+00, -7.322451703662891e+00, -7.324661928181358e+00, -7.322451703662891e+00, -2.751504532088893e+00, -2.752218806656806e+00, -2.776961961147421e+00, -2.776654308765722e+00, -2.733266756604035e+00, -2.739162137511348e+00, -2.755990716502347e+00, -2.761829618341313e+00, -2.779715159251831e+00, -2.767181007693952e+00, -2.779715159251831e+00, -2.767181007693952e+00, -8.453686334831164e-01, -8.426471513392330e-01, -9.539970053108233e-01, -9.545217761814446e-01, -7.532567190099293e-01, -7.924451684417804e-01, -8.174365639383260e-01, -8.508556829391827e-01, -8.789687737981479e-01, -8.383588102928715e-01, -8.789687737981479e-01, -8.383588102928715e-01, -1.014624965044555e-01, -1.024702558060352e-01, -2.076121287514038e-01, -2.086654238025934e-01, -9.150776103800659e-02, -9.660381323414366e-02, -2.873970072691256e+00, -2.872817888737562e+00, -1.174830563256720e-01, -1.262574735345212e-01, -1.174830563256721e-01, -1.262574735345210e-01, -2.930996561943315e-03, -3.042600502733133e-03, -3.726502680910025e-03, -3.787158925171897e-03, -2.768874766463038e-03, -2.933522007457522e-03, -6.269677143879507e-02, -6.295161953981118e-02, -2.885666460729042e-03, -3.858205927346601e-03, -2.885666460729047e-03, -3.858205927346596e-03, -8.821361339000587e-01, -8.858259162465348e-01, -8.575125575588760e-01, -8.613049159939101e-01, -8.657584578357249e-01, -8.695762598771235e-01, -8.729751758314729e-01, -8.766599234559580e-01, -8.693334198118592e-01, -8.730828771524269e-01, -8.693334198118592e-01, -8.730828771524269e-01, -8.670632497468649e-01, -8.698221932506209e-01, -6.869380612118258e-01, -6.895830377901915e-01, -7.165602890740006e-01, -7.196689006431346e-01, -7.620686682555985e-01, -7.649520950800583e-01, -7.371294063147555e-01, -7.396559526777845e-01, -7.371294063147557e-01, -7.396559526777846e-01, -9.994612504034196e-01, -1.001655841627360e+00, -2.765301850076453e-01, -2.785227473162221e-01, -3.451871220401495e-01, -3.502107259312947e-01, -4.814459890455252e-01, -4.840573311078415e-01, -4.138493352075336e-01, -4.139490478066121e-01, -4.138493352075336e-01, -4.139490478066122e-01, -6.386025334523734e-01, -6.435093759955387e-01, -3.652988558060290e-02, -3.680428462598244e-02, -4.946362342087308e-02, -5.112617044817656e-02, -4.688535678631287e-01, -4.799570522403862e-01, -7.812343267173626e-02, -8.279437416974686e-02, -7.812343267173623e-02, -8.279437416974698e-02, -9.223754880873535e-03, -9.566212416432823e-03, -1.021422530598439e-03, -1.028782159550465e-03, -2.018392916720082e-03, -2.147080240761788e-03, -7.480334959793832e-02, -7.604392271295092e-02, -2.724010179310662e-03, -3.536454429286237e-03, -2.724010179310659e-03, -3.536454429286237e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_21_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_21", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.646020308041002e-08, 0.000000000000000e+00, -4.646466867272339e-08, -4.645998805658693e-08, 0.000000000000000e+00, -4.646451165748178e-08, -4.645926583369770e-08, 0.000000000000000e+00, -4.646348531110906e-08, -4.646173600755179e-08, 0.000000000000000e+00, -4.646662386474244e-08, -4.646009266347782e-08, 0.000000000000000e+00, -4.646534119241206e-08, -4.646009266347782e-08, 0.000000000000000e+00, -4.646534119241206e-08, -3.282814626692074e-05, 0.000000000000000e+00, -3.281544549815240e-05, -3.283839693412305e-05, 0.000000000000000e+00, -3.282166262019424e-05, -3.303184934309769e-05, 0.000000000000000e+00, -3.306348617254668e-05, -3.297709739234785e-05, 0.000000000000000e+00, -3.296970143661960e-05, -3.282694997814976e-05, 0.000000000000000e+00, -3.314223571569299e-05, -3.282694997814976e-05, 0.000000000000000e+00, -3.314223571569299e-05, -8.688338263621018e-03, 0.000000000000000e+00, -8.923295741451466e-03, -8.637941134749683e-03, 0.000000000000000e+00, -8.889271534394873e-03, -7.827970149919023e-03, 0.000000000000000e+00, -7.818254755160443e-03, -8.452628172419444e-03, 0.000000000000000e+00, -8.667937927978887e-03, -8.839429265413092e-03, 0.000000000000000e+00, -7.871043406179305e-03, -8.839429265413092e-03, 0.000000000000000e+00, -7.871043406179305e-03, -1.120012768275900e+00, 0.000000000000000e+00, -1.310985750094310e+00, -1.137932748524584e+00, 0.000000000000000e+00, -1.347155578956136e+00, -1.413783447285575e-03, 0.000000000000000e+00, -1.862720173801172e-03, -5.495792498086844e-01, 0.000000000000000e+00, -7.338973514818840e-01, -9.478041385735272e-01, 0.000000000000000e+00, -3.154635579011397e-01, -9.478041385735267e-01, 0.000000000000000e+00, -3.154635579011397e-01, -1.309186615026665e+02, 0.000000000000000e+00, -1.190735971365860e+02, -1.182068983318187e+02, 0.000000000000000e+00, -1.070347384457632e+02, -2.240468475914604e+00, 0.000000000000000e+00, -2.270618183408208e+00, -1.958183490797566e+02, 0.000000000000000e+00, -2.223818321427238e+02, -1.466244797265936e+02, 0.000000000000000e+00, -2.011268978179046e+02, -1.466244797265928e+02, 0.000000000000000e+00, -2.011268978179048e+02, -1.412402188720884e-05, 0.000000000000000e+00, -1.413827322743727e-05, -1.412732966739089e-05, 0.000000000000000e+00, -1.414147812837861e-05, -1.412459637216618e-05, 0.000000000000000e+00, -1.413866554331133e-05, -1.412741707274314e-05, 0.000000000000000e+00, -1.414155959312703e-05, -1.412543755083001e-05, 0.000000000000000e+00, -1.413984637355980e-05, -1.412543755083001e-05, 0.000000000000000e+00, -1.413984637355980e-05, -3.001559423009181e-04, 0.000000000000000e+00, -3.019939524940594e-04, -3.066226694706430e-04, 0.000000000000000e+00, -3.082326152215201e-04, -2.969945979522288e-04, 0.000000000000000e+00, -2.996806643475645e-04, -3.032158569624674e-04, 0.000000000000000e+00, -3.058862861922807e-04, -3.060521170722369e-04, 0.000000000000000e+00, -3.057948687742745e-04, -3.060521170722369e-04, 0.000000000000000e+00, -3.057948687742745e-04, -6.086539887720730e-02, 0.000000000000000e+00, -6.235524842245913e-02, -5.396292693671148e-02, 0.000000000000000e+00, -5.450810673645168e-02, -6.221632637691579e-02, 0.000000000000000e+00, -6.439029692459798e-02, -6.769127825019619e-02, 0.000000000000000e+00, -6.535121986012347e-02, -5.753186398217771e-02, 0.000000000000000e+00, -6.472204916761000e-02, -5.753186398217772e-02, 0.000000000000000e+00, -6.472204916760999e-02, -6.355513781705072e-01, 0.000000000000000e+00, -6.144242004419801e-01, -5.217882534847124e-01, 0.000000000000000e+00, -5.147213210939997e-01, -6.327934156554541e-01, 0.000000000000000e+00, -6.876939028973671e-01, -5.365861897363933e-04, 0.000000000000000e+00, -5.377499122551482e-04, -8.251756695313469e-01, 0.000000000000000e+00, -1.151122637525934e+00, -8.251756695313477e-01, 0.000000000000000e+00, -1.151122637525936e+00, 1.166612095459047e+02, 0.000000000000000e+00, 7.363216872174358e+01, -9.058294998395816e+01, 0.000000000000000e+00, -6.366213715417132e+01, -9.710257196116452e+02, 0.000000000000000e+00, -8.781628168218751e+02, -9.385037169696654e-01, 0.000000000000000e+00, -1.286504681047878e+00, 3.869759990931487e+02, 0.000000000000000e+00, -5.835680248154450e+02, 3.869759990931469e+02, 0.000000000000000e+00, -5.835680248154464e+02, -9.130266212504849e-02, 0.000000000000000e+00, -8.998228865608160e-02, -9.168901075379472e-02, 0.000000000000000e+00, -9.038931642112506e-02, -9.161760527927638e-02, 0.000000000000000e+00, -9.030846285626548e-02, -9.150838170684891e-02, 0.000000000000000e+00, -9.019233616001807e-02, -9.156827257196942e-02, 0.000000000000000e+00, -9.025560092654747e-02, -9.156827257196942e-02, 0.000000000000000e+00, -9.025560092654747e-02, -1.001013617806410e-01, 0.000000000000000e+00, -9.894436478277568e-02, -1.186400794852179e-01, 0.000000000000000e+00, -1.176933806127943e-01, -1.204117331601385e-01, 0.000000000000000e+00, -1.192107306883299e-01, -1.161848696381643e-01, 0.000000000000000e+00, -1.147683593575912e-01, -1.189086310112584e-01, 0.000000000000000e+00, -1.176549069876275e-01, -1.189086310112584e-01, 0.000000000000000e+00, -1.176549069876275e-01, -4.161054003221210e-02, 0.000000000000000e+00, -4.235436223013944e-02, -4.292090996611273e-01, 0.000000000000000e+00, -4.277204485616216e-01, -3.675554797530225e-01, 0.000000000000000e+00, -3.722814397476133e-01, -2.795114464285001e-01, 0.000000000000000e+00, -2.738289438624332e-01, -3.539874960896301e-01, 0.000000000000000e+00, -3.576999908714183e-01, -3.539874960896303e-01, 0.000000000000000e+00, -3.576999908714187e-01, -1.293128584696301e-01, 0.000000000000000e+00, -1.315385112216083e-01, -3.050527197819334e+00, 0.000000000000000e+00, -2.878267746578999e+00, -1.325011041333026e+00, 0.000000000000000e+00, -1.328532371263069e+00, -4.041332314301361e-01, 0.000000000000000e+00, -4.588457198340953e-01, -1.139757135713669e+00, 0.000000000000000e+00, -1.343628701806579e+00, -1.139757135713670e+00, 0.000000000000000e+00, -1.343628701806580e+00, -1.085427225647741e+01, 0.000000000000000e+00, -8.089834483099008e+00, 4.652463607234498e+03, 0.000000000000000e+00, 6.692814098483625e+03, -1.611572160330945e+03, 0.000000000000000e+00, -1.452719451282944e+03, -1.386547491792727e+00, 0.000000000000000e+00, -1.685072218234277e+00, 4.156096222189905e+02, 0.000000000000000e+00, -7.049851564541261e+02, 4.156096222189909e+02, 0.000000000000000e+00, -7.049851564541268e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_21_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_21", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([3.341551148088261e-03, 3.341784682472415e-03, 3.341531350524079e-03, 3.341770269368878e-03, 3.341510782090109e-03, 3.341728739811081e-03, 3.341735509723247e-03, 3.342015075305647e-03, 3.341538062837559e-03, 3.341931939327236e-03, 3.341538062837559e-03, 3.341931939327236e-03, 1.031060245166844e-02, 1.030004551917232e-02, 1.031448762703982e-02, 1.030185107294172e-02, 1.038154889781439e-02, 1.039133650923878e-02, 1.039083484789430e-02, 1.038326694017137e-02, 1.030438037164955e-02, 1.044414227470220e-02, 1.030438037164955e-02, 1.044414227470220e-02, 1.533223178374951e-02, 1.581464947742073e-02, 1.523449841037962e-02, 1.572309110617441e-02, 1.350790141834064e-02, 1.373419665288756e-02, 1.595580478530387e-02, 1.648650552333516e-02, 1.545493427301158e-02, 1.574174802866039e-02, 1.545493427301158e-02, 1.574174802866039e-02, 6.438321803888584e-02, 8.968135880711525e-02, 6.692166088374706e-02, 9.625150809854796e-02, 1.264912851574504e-03, 2.329124571925256e-03, 1.120561453461933e-02, 1.756577308253589e-02, 6.101998725501890e-02, 2.089124104649872e-03, 6.101998725501867e-02, 2.089124104649859e-03, 2.054278939909912e-04, 2.258643625586192e-04, 2.118413878316482e-04, 2.380714941788377e-04, 6.962233466450740e-04, 8.515634391449786e-04, 5.952837652323808e-05, 6.549179325331595e-05, 1.592197430193661e-04, 3.306486243260568e-05, 1.592197430193685e-04, 3.306486243260472e-05, 1.333528248574668e-02, 1.333979314095775e-02, 1.331709630267188e-02, 1.332220968564128e-02, 1.333459977821435e-02, 1.333942460390743e-02, 1.331898259714956e-02, 1.332343925958872e-02, 1.332572938280871e-02, 1.333092862464494e-02, 1.332572938280871e-02, 1.333092862464494e-02, 2.416852771406591e-02, 2.435547091128148e-02, 2.529568718561258e-02, 2.544431183391576e-02, 2.399846410866341e-02, 2.422259644559860e-02, 2.504070603744784e-02, 2.527568446709150e-02, 2.492290753771411e-02, 2.496074935121844e-02, 2.492290753771411e-02, 2.496074935121844e-02, 9.684534310585212e-02, 9.847473071404640e-02, 8.704999096847407e-02, 8.762813000784332e-02, 7.205930441765228e-02, 8.473222257874052e-02, 7.276088499015511e-02, 7.924652200193427e-02, 9.977379750074859e-02, 9.703032144699195e-02, 9.977379750074865e-02, 9.703032144699196e-02, 4.485283799260259e-03, 4.416592641911308e-03, 3.150678990405326e-02, 3.144025584282429e-02, 3.161673423210467e-03, 4.168465328662819e-03, 2.353858166809734e-02, 2.355556733321071e-02, 9.391828190968721e-03, 1.642128726074021e-02, 9.391828190968746e-03, 1.642128726074027e-02, -1.073740664956145e-05, -7.836928032754948e-06, 2.176365368312472e-05, 1.564663656204494e-05, 1.095911766946383e-04, 1.170036734301114e-04, 1.424616779284531e-03, 2.101698543206785e-03, -2.854321212064647e-05, 2.012174370588766e-04, -2.854321212064440e-05, 2.012174370588741e-04, 9.849989977505569e-02, 9.800975412885697e-02, 1.057470345433290e-01, 1.051628100838114e-01, 1.032662908587595e-01, 1.026967563892539e-01, 1.011388499786919e-01, 1.006277693363174e-01, 1.022073434791186e-01, 1.016676783051847e-01, 1.022073434791186e-01, 1.016676783051847e-01, 9.890332767389680e-02, 9.858127531910438e-02, 1.381509979162741e-01, 1.381970375759718e-01, 1.384139187551295e-01, 1.379762598279007e-01, 1.267757451491717e-01, 1.262441108110553e-01, 1.334602589417040e-01, 1.331500633351465e-01, 1.334602589417040e-01, 1.331500633351465e-01, 7.851874933740723e-02, 7.987031884466118e-02, 5.483003527096895e-02, 5.554260805728686e-02, 7.690113989337609e-02, 8.016499353218408e-02, 1.076422447337996e-01, 1.066728298606420e-01, 1.053527641969981e-01, 1.061709762687650e-01, 1.053527641969982e-01, 1.061709762687649e-01, 1.133080534815143e-01, 1.175723783098376e-01, 9.442230783190892e-04, 9.017675123517278e-04, 9.828573185027755e-04, 1.101408330433094e-03, 1.268218109576424e-01, 1.553257501827354e-01, 3.668992179143751e-03, 5.243649420900619e-03, 3.668992179143766e-03, 5.243649420900670e-03, 3.950860746066412e-05, 3.238457499124578e-05, -1.230263230910613e-05, -1.335979814203732e-05, 7.614910702420506e-05, 8.239643109210185e-05, 3.983638544738091e-03, 5.383954774833380e-03, -2.911034155130490e-05, 1.869733171796128e-04, -2.911034155130955e-05, 1.869733171796090e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
