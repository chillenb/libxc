
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mn15_l_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mn15_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.427231985073648e+01, -1.427195348535218e+01, -1.427049894957893e+01, -1.427591816740979e+01, -1.427305487679536e+01, -1.427305487679536e+01, -2.960451522503264e+00, -2.960707451117709e+00, -2.967466108001997e+00, -2.965018647760863e+00, -2.964966964442235e+00, -4.346698595832531e+00, -3.099127138795944e-01, -6.867787470032097e-01, -6.528757984502990e-01, -6.662740489497496e-01, -6.633615304401198e-01, -6.633615304401198e-01, -2.211801191078634e-01, -2.249405186392901e-01, -1.013304970072423e-01, -1.415982450405545e-01, -1.761721538032851e-01, -1.761721538032851e-01, -1.205196204460461e-02, -1.264406348580602e-02, -5.190836085080660e-02, -7.142320227737148e-03, -8.894010331094963e-03, -8.894010331094963e-03, -4.444708075137942e+00, -4.411153831096018e+00, -4.442779913377358e+00, -2.807982969679456e+00, -4.427941787227993e+00, -4.427941787227993e+00, -1.501339917344893e+00, -1.544292284908140e+00, -1.467471108282239e+00, -1.506766863285467e+00, -1.541446461581248e+00, -2.289599086657389e+00, -6.381889410346517e-01, -6.749821930889457e-01, -5.893210931981404e-01, -6.106171858463249e-01, -6.475483820510568e-01, -5.719227039745991e-01, 7.475283645656049e-02, -1.957474424547493e-01, 7.232227231628849e-02, -2.354731543584685e+00, -1.161302438059142e-01, -1.161302438059142e-01, 2.798354022817008e-03, -6.987825412232977e-03, -5.384680841081251e-03, 5.557441683413009e-02, 3.268202783131349e-03, -6.453166111634364e-03, -6.036531213355751e-01, -5.899882551523191e-01, -6.283898458435049e-01, -5.961332827649705e-01, -5.940328893959987e-01, -5.940328893959987e-01, -5.890214457193903e-01, -5.293535053034715e-01, -5.468616670425894e-01, -5.561507957857920e-01, -5.525215139639268e-01, -5.203441379573382e-01, -7.233821718482737e-01, -2.360695088521993e-02, -3.085502698764649e-01, -2.582073230191992e-01, -3.452632570877844e-01, -3.452632570877845e-01, -3.814731744303627e-01, -5.044709217365971e-02, -6.096681638619600e-02, -3.599124468255314e-01, 6.224404060854043e-02, -8.095659133403593e-02, -1.659265834257411e-02, -1.914855406841180e-03, -3.979389861910811e-03, -7.787926898521802e-02, -5.984948257964174e-03, -5.984948257964172e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mn15_l_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mn15_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([2.925460194886138e+00, 2.926764031130992e+00, 2.932047277670569e+00, 2.912746484353137e+00, 2.922930596202531e+00, 2.922930596202531e+00, -5.556366446231997e+00, -5.555877351616547e+00, -5.542942648556892e+00, -5.548687380895582e+00, -5.547516251220753e+00, -5.453494679199047e+00, -1.095116048341572e+00, -8.066590954605009e-01, -8.184387467616953e-01, -8.071238387152421e-01, -8.095544400136553e-01, -8.095544400136553e-01, -2.294910428777251e-01, -2.237683019847808e-01, -9.444987027942587e-01, -2.310543575244151e-01, -2.554381584579946e-01, -2.554381584579946e-01, -1.578692284538201e-02, -1.654346354069893e-02, -6.019873694797234e-02, -9.433900120602419e-03, -1.171355504908342e-02, -1.171355504908342e-02, 3.031386475073293e+00, 3.100127842124489e+00, 3.035336763501153e+00, 1.971614612999942e+00, 3.065838845283666e+00, 3.065838845283666e+00, -3.313445191653057e+00, -3.321015868383986e+00, -3.305605917350862e+00, -3.315467238240215e+00, -3.319831825056984e+00, -2.938329335180764e+00, -7.173453768840983e-01, -7.665508439978169e-01, -6.347424764587057e-01, -6.832986672266954e-01, -7.305965598510542e-01, -8.906998981116702e-01, 5.427474580511175e-02, -2.944993413105142e-01, 5.915388917931705e-02, -2.170288614114015e+00, -1.813215118163097e-01, -1.813215118163108e-01, 3.736447416180779e-03, -9.232365717576374e-03, -7.125110541001020e-03, 6.081701773892825e-02, 4.362017633472386e-03, -8.528670695505176e-03, -8.112639296106606e-01, -7.923680237693539e-01, -8.208837045607613e-01, -8.098377552010160e-01, -8.070868550444775e-01, -8.070868550444775e-01, -8.091921214800659e-01, -5.622414992059049e-01, -6.135902763698713e-01, -6.713240157090690e-01, -6.384197016823057e-01, -7.748172628346299e-01, -8.058393659974578e-01, -2.963335888490635e-01, -2.875681151892726e-01, -5.879285080768458e-01, -2.790382937596215e-01, -2.790382937596216e-01, -7.390094305285049e-01, -5.887235156870035e-02, -6.820175477099745e-02, -3.084644675727578e-01, 5.222976027152725e-02, -1.009804467431504e-01, -2.157761737732461e-02, -2.547268692852660e-03, -5.278658837669974e-03, -9.482191784571231e-02, -7.914279616791916e-03, -7.914279616791888e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mn15_l_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mn15_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.450410003723808e-08, -5.450482380211260e-08, -5.450732458097160e-08, -5.449665910856302e-08, -5.450234835455700e-08, -5.450234835455700e-08, -1.757440544164101e-05, -1.757834328576868e-05, -1.768226909894832e-05, -1.763408197301447e-05, -1.764599167701762e-05, -2.882408851357689e-05, -1.206611133077268e-02, -8.829828868020488e-03, -8.125154176204073e-03, -8.628096351568550e-03, -8.511294361069109e-03, -8.511294361069109e-03, -1.673894868969878e+00, -1.696453031732728e+00, -8.555827633152794e-03, -8.914641422693976e-01, -1.295830151725316e+00, -1.295830151725313e+00, -9.473889891246674e+00, -9.845317023022004e+00, -3.427531113255060e+00, -7.090725096986223e+00, -9.802470019420859e+00, -9.802470019420859e+00, -1.851238624845173e-05, -1.855016356028301e-05, -1.851467131952469e-05, -1.590325920115565e-05, -1.853131291293740e-05, -1.853131291293740e-05, -1.292053255605027e-04, -1.266539547315967e-04, -1.315106748030429e-04, -1.287440403839678e-04, -1.269044920886579e-04, -2.182363007277549e-04, -2.926549782732522e-02, -1.882822226726334e-02, -3.683145763527989e-02, -3.356086874730603e-02, -2.777513275488454e-02, -3.123870114837351e-03, -9.176139494629068e+01, -6.652904138739958e-01, -1.269077042874300e+02, -4.840495516602240e-04, -1.330706625882857e+00, -1.330706625882865e+00, -1.586141564798497e+08, -6.272190716350373e+00, -5.091771106791931e+01, -6.599525724151492e+02, -8.531566515294659e+07, -1.948084998106513e+01, 7.200413596949080e-02, 2.594443313878969e-02, 5.753139467044732e-02, 5.244960111661912e-02, 4.555726298644278e-02, 4.555726298644278e-02, 7.427913994250966e-02, -5.456745765846191e-02, -4.475563830402679e-02, -2.600153099608256e-02, -3.761473716800059e-02, 5.301955636373818e-03, -1.842505332357085e-02, -2.032045408118623e+00, -4.071233395480848e-01, -1.110660394837104e-01, -3.123877319753623e-01, -3.123877319753626e-01, -1.991594116819875e-02, -3.556066816690788e+00, -2.597639826172843e+00, -2.436322010027615e-01, -2.443771679912379e+02, -2.268920842441073e+00, -4.448583935917363e+00, -7.810268112650068e+00, -2.223771647313315e+01, -2.654744485749644e+00, -2.780329723435405e+01, -2.780329723437320e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mn15_l_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mn15_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.274811659665777e-02, -1.274891131186191e-02, -1.275210204643614e-02, -1.274034211193278e-02, -1.274655091022013e-02, -1.274655091022013e-02, 1.193509006964978e-02, 1.193202423939598e-02, 1.184958225526973e-02, 1.188196235608628e-02, 1.187995461782366e-02, 2.742888939147267e-02, 6.460678539322616e-02, 5.839697487374489e-02, 5.424027907848369e-02, 5.637306829147951e-02, 5.587554562387843e-02, 5.587554562387843e-02, 1.814996169938294e-01, 1.834543563754163e-01, 3.201648641407296e-02, 9.343999230969714e-02, 1.394344234864238e-01, 1.394344234864237e-01, 1.702266791711369e-05, 2.071080997721293e-05, 1.899931422736125e-03, 2.384308194780643e-06, 6.606641677473706e-06, 6.606641677473706e-06, -6.031012141522553e-02, -6.141629768339636e-02, -6.037355591954695e-02, -7.854747987014224e-02, -6.086290871595769e-02, -6.086290871595769e-02, 2.492649611133878e-02, 2.464231878046260e-02, 2.507429119483675e-02, 2.489090474556950e-02, 2.466836768336155e-02, 3.884774765791514e-02, 8.099553164001917e-02, 1.127185687701362e-02, 9.216609131113435e-02, 7.894708817329477e-02, 7.408546153504567e-02, 5.861861740918620e-02, 2.533993638801191e-02, 1.223641243062596e-01, 2.126695383518446e-02, 3.763977919163695e-02, 7.612520572616414e-02, 7.612520572616463e-02, 8.821490398283438e-07, 1.968507392907185e-06, 7.110311646354636e-06, 8.869783604188941e-03, 5.559819234095450e-06, 4.775071147400465e-06, -6.230422081868774e-02, -7.489786109083674e-02, 1.073114360581445e-01, -7.342024740326358e-02, -7.551066175223956e-02, -7.551066175223956e-02, -4.742983317183001e-02, 8.710200086883352e-02, 6.076605073590880e-02, 3.413619944382633e-03, 3.686188761366527e-02, 6.179874255299757e-02, 4.000295555224585e-02, 1.423196782713175e-01, 1.347902044858308e-01, 1.465558418813178e-01, 1.221912259419444e-01, 1.221912259419444e-01, 1.063940937165796e-01, 1.679838814149556e-03, 3.943729984102927e-03, 8.332020951386453e-02, 2.315696945947662e-02, 2.808313619343194e-02, 2.301904131770756e-05, 4.572558652188625e-08, 1.216069739259362e-06, 2.525801043297517e-02, 5.389219363753222e-06, 5.389219363783976e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
