
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mn15_l_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mn15_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.305206435532405e+01, -2.305165292291628e+01, -2.305036752923316e+01, -2.305646304085656e+01, -2.305319280247533e+01, -2.305319280247533e+01, -3.499586376409737e+00, -3.499837608324406e+00, -3.506914300039998e+00, -3.508357825515615e+00, -3.506153562514491e+00, -3.506153562514491e+00, -4.568268553088652e-01, -4.559530084752787e-01, -4.422573028222438e-01, -4.680927825769721e-01, -4.601134515043599e-01, -4.601134515043599e-01, -2.149294919747327e-01, -2.170258099437795e-01, -2.723592440743916e-01, -1.329782844760176e-01, -1.655846981755124e-01, -1.655846981755125e-01, -1.205175834992379e-02, -1.264361855091171e-02, -5.162314306435670e-02, -7.141823099279528e-03, -8.893328749939210e-03, -8.893328749939209e-03, -4.433584583683363e+00, -4.400137814607460e+00, -4.431886493015616e+00, -4.402372321511724e+00, -4.416757048039317e+00, -4.416757048039317e+00, -2.156598451877035e+00, -2.202767765313803e+00, -2.146045067539029e+00, -2.187918885515033e+00, -2.187340437377466e+00, -2.187340437377466e+00, -5.938126709245335e-01, -6.435434814121681e-01, -5.158174435429613e-01, -5.412918545172567e-01, -6.065662847737145e-01, -6.065662847737145e-01, -8.872246620318848e-02, -1.910136617654264e-01, -8.397263723896665e-02, -1.868178321673515e+00, -1.131063886773913e-01, -1.131063886773914e-01, -5.554101916491320e-03, -6.986769005741090e-03, -5.384035807370842e-03, -6.753979601686304e-02, -6.451898675419133e-03, -6.451898675419144e-03, -6.188290602027798e-01, -5.954056691061124e-01, -6.005664106785260e-01, -6.070981330960036e-01, -6.035390276925989e-01, -6.035390276925989e-01, -6.172319978007998e-01, -5.230184637250695e-01, -5.392762152610542e-01, -5.505022621519794e-01, -5.447560891235647e-01, -5.447560891235647e-01, -6.705315142029417e-01, -2.517753844615150e-01, -2.926666934680592e-01, -3.383191978363148e-01, -3.184323470572461e-01, -3.184323470572462e-01, -4.581503710341678e-01, -5.032373455266749e-02, -6.033865402704273e-02, -3.256007942614846e-01, -7.919030557020292e-02, -7.919030557020311e-02, -1.657829036076469e-02, -1.914732686692903e-03, -3.979312492756189e-03, -7.689679558450591e-02, -5.984092706545335e-03, -5.984092706545329e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mn15_l_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mn15_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [4.868154566844445e+00, 4.869755826470755e+00, 4.876352448495224e+00, 4.852652059080702e+00, 4.865142299769478e+00, 4.865142299769478e+00, -5.418328864284725e+00, -5.418165383050082e+00, -5.413655282025990e+00, -5.414862791018205e+00, -5.414654523309885e+00, -5.414654523309885e+00, -7.978601049376259e-01, -7.928604991626087e-01, -6.802684720354015e-01, -7.077947998675007e-01, -7.032079817056446e-01, -7.032079817056446e-01, -2.141709132391497e-01, -2.061650852380332e-01, -6.915933232676986e-01, -1.919533211354721e-01, -2.139050600509796e-01, -2.139050600509799e-01, -1.578611370900158e-02, -1.654169732320431e-02, -5.918075305658860e-02, -9.431917409714680e-03, -1.171084050355916e-02, -1.171084050355916e-02, 3.022442507580330e+00, 3.091183932652214e+00, 3.026572785101716e+00, 3.087208543760169e+00, 3.056801757295679e+00, 3.056801757295679e+00, -2.865417528813123e+00, -2.912661748648120e+00, -2.833044344625856e+00, -2.877841928161618e+00, -2.907063785637233e+00, -2.907063785637233e+00, -7.954218137495497e-01, -8.756709819154659e-01, -7.517457725982345e-01, -8.306115612889885e-01, -8.075432455911167e-01, -8.075432455911167e-01, -1.144551674518824e-01, -2.741126243127747e-01, -1.028196424889347e-01, -2.261815429639706e+00, -1.679986242351653e-01, -1.679986242351659e-01, -7.351250403615857e-03, -9.228151971412663e-03, -7.122538219188746e-03, -7.284073763065070e-02, -8.523617076204493e-03, -8.523617076204455e-03, -8.065384858432622e-01, -8.051726140103860e-01, -8.123270113803980e-01, -8.138088384338308e-01, -8.137135644278225e-01, -8.137135644278225e-01, -8.028465222923875e-01, -5.717825845112924e-01, -6.308414850312797e-01, -6.993747299479049e-01, -6.618712041134935e-01, -6.618712041134933e-01, -9.270569067283160e-01, -2.907285126811877e-01, -2.657448031307463e-01, -3.723642126426636e-01, -2.801399302455911e-01, -2.801399302455910e-01, -5.295553300188554e-01, -5.842811294939711e-02, -6.608779160162408e-02, -3.749943263789584e-01, -9.536881700997077e-02, -9.536881700997038e-02, -2.152072519631763e-02, -2.546778098300075e-03, -5.278349847516373e-03, -9.176165752203025e-02, -7.910867895573331e-03, -7.910867895573312e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mn15_l_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mn15_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.303823754602310e-08, -6.303882529147089e-08, -6.304091240043195e-08, -6.303227531471273e-08, -6.303687443274229e-08, -6.303687443274229e-08, -2.674774018168100e-05, -2.675264686336275e-05, -2.688433831780425e-05, -2.685126981165136e-05, -2.685303345084888e-05, -2.685303345084888e-05, -1.431998605277358e-02, -1.437622397702171e-02, -1.528516612541145e-02, -1.480235073942097e-02, -1.494954773619892e-02, -1.494954773619892e-02, -1.850799141974156e+00, -1.903916315023856e+00, -8.007972406156848e-03, -1.589301225940986e+00, -1.890149383257960e+00, -1.890149383257957e+00, -9.633493624220646e+00, -1.015155088793821e+01, -4.263470575263478e+00, -8.921714333249014e+00, -1.125979966295987e+01, -1.125979966295233e+01, -1.849876192550885e-05, -1.853660791177479e-05, -1.850132561422540e-05, -1.853469445328340e-05, -1.851758140935865e-05, -1.851758140935865e-05, -2.208646818211757e-04, -2.217358535456600e-04, -2.188015126313255e-04, -2.196565521207840e-04, -2.222816336119159e-04, -2.222816336119159e-04, -2.284665139093032e-02, -6.766237883738643e-03, -2.941273026618805e-02, -1.369979806350298e-02, -2.106525194466864e-02, -2.106525194466864e-02, -1.493251604530840e+00, -7.917788416650988e-01, -1.742656635250961e+00, -3.485843620114959e-04, -1.841602010343364e+00, -1.841602010343367e+00, -1.182093450834865e+01, -1.050636984212999e+01, -6.625878773647034e+01, -3.515860214005940e+00, -3.073780526749303e+01, -3.073780526746410e+01, 7.763993000611254e-02, 3.009234078529603e-02, 4.384181929675924e-02, 5.748651820020768e-02, 5.037504705876645e-02, 5.037504705876645e-02, 8.647879096399427e-02, -5.362488277083870e-02, -4.215645729833017e-02, -2.078736001673207e-02, -3.366499938672565e-02, -3.366499938672566e-02, -8.125765211612977e-03, -5.811100954186663e-01, -4.623629374312986e-01, -2.077898384946311e-01, -3.466138976782351e-01, -3.466138976782353e-01, -6.985442990473323e-02, -3.960160618845924e+00, -3.387638170695602e+00, -2.201425897093680e-01, -3.076637155832432e+00, -3.076637155832447e+00, -7.631333279474353e+00, -5.241959839859712e+01, -2.519790600174736e+01, -3.192436022544209e+00, -3.888000923642049e+01, -3.888000923638375e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mn15_l_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mn15_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mn15_l_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mn15_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-6.246406829406289e-03, -6.247269026616772e-03, -6.250502796040104e-03, -6.237734572690567e-03, -6.244508128690302e-03, -6.244508128690302e-03, 1.776439710759029e-02, 1.776512335578826e-02, 1.778752448373659e-02, 1.782067685735907e-02, 1.780062873600391e-02, 1.780062873600391e-02, 5.663847514957907e-02, 5.646134403303559e-02, 5.232739166886794e-02, 5.431896087074424e-02, 5.386959712928154e-02, 5.386959712928154e-02, 1.816997452019980e-01, 1.836491304713221e-01, 3.035510599000530e-02, 9.643888872630056e-02, 1.410652204731188e-01, 1.410652204731188e-01, 1.702379088868600e-05, 2.071364696372620e-05, 1.931047887255160e-03, 2.384968694443585e-06, 6.608642863764819e-06, 6.608642863764808e-06, -6.043166569197307e-02, -6.153618515495728e-02, -6.049255967782729e-02, -6.146702248164891e-02, -6.098487797841884e-02, -6.098487797841884e-02, 3.544171957374884e-02, 3.672032803877725e-02, 3.494390701808280e-02, 3.614639834594641e-02, 3.636770908206412e-02, 3.636770908206412e-02, 6.660320699267359e-02, 2.474410047830157e-02, 7.960515327173462e-02, 6.210993072530550e-02, 6.025886272830144e-02, 6.025886272830144e-02, 3.293196608573676e-02, 1.230810922074984e-01, 2.733702872222779e-02, 1.409947232089751e-03, 7.811907659052429e-02, 7.811907659052474e-02, 7.566010805054001e-07, 1.969692464762970e-06, 7.113715991717833e-06, 1.034002587861767e-02, 4.778808440828779e-06, 4.778808440833888e-06, 1.138155913124828e-02, -3.919585894532803e-02, -3.017827753981613e-02, -1.629040424760656e-02, -2.405542873238027e-02, -2.405542873238027e-02, 9.318821782194421e-02, 8.512267738065414e-02, 5.809655831437216e-02, 9.903990098863537e-03, 3.609078397276645e-02, 3.609078397276653e-02, 3.215035041073946e-02, 1.376384022354916e-01, 1.346959690264113e-01, 1.053934415062061e-01, 1.221351642166468e-01, 1.221351642166468e-01, 8.854937150062159e-02, 1.692313722700446e-03, 4.052855878338019e-03, 8.342733731315871e-02, 2.924071581432801e-02, 2.924071581432797e-02, 2.309547794884052e-05, 4.573745200206361e-08, 1.216164817307961e-06, 2.590282276912833e-02, 5.392293666873076e-06, 5.392293666903831e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
