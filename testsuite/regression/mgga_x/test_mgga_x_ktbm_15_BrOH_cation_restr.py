
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_15_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_15", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.133347680890092e+01, -2.133359614392989e+01, -2.133412096441774e+01, -2.133234962396822e+01, -2.133327850744975e+01, -2.133327850744975e+01, -3.110242985341412e+00, -3.110316920512404e+00, -3.112331059898427e+00, -3.111796536052383e+00, -3.111530366760304e+00, -3.922017346588144e+00, -5.866270749623722e-01, -7.272265487996639e-01, -7.015998209856463e-01, -7.103423121637918e-01, -7.084285463618240e-01, -7.084285463618240e-01, -1.832286839368014e-01, -1.865478234633802e-01, -7.016562937497864e-01, -1.340682662558676e-01, -1.524975360418395e-01, -1.524975360418395e-01, -5.987652913823490e-03, -6.302312481635840e-03, -3.482861537117097e-02, -3.457877744537718e-03, -4.345165656505401e-03, -4.345165656505401e-03, -5.880914320010595e+00, -5.881410427618245e+00, -5.880934578214504e+00, -5.363253431348655e+00, -5.881167403152629e+00, -5.881167403152629e+00, -1.725185428079707e+00, -1.741898559502215e+00, -1.713091697950463e+00, -1.727566286591088e+00, -1.740465674100237e+00, -2.207167682557293e+00, -6.675275413249350e-01, -7.226927504177214e-01, -6.145889369549987e-01, -6.421121960804632e-01, -6.784740300617722e-01, -5.671024087959107e-01, -8.847092402091805e-02, -1.793938401539943e-01, -8.210069427055136e-02, -2.184479443202383e+00, -1.085577900020420e-01, -1.085577900020420e-01, -2.669076688985002e-03, -3.380374321074889e-03, -2.584828535797411e-03, -5.580160388411132e-02, -3.115034154734382e-03, -3.113907261679203e-03, -6.578687226925914e-01, -6.574748424660382e-01, -6.298252639298331e-01, -6.577834320180530e-01, -6.577339665133061e-01, -6.577339665133061e-01, -6.405202089763835e-01, -5.589854382955770e-01, -5.867459800356777e-01, -6.105011260426861e-01, -5.988588141349743e-01, -5.169868086992793e-01, -7.591898333341508e-01, -1.962011785170522e-01, -2.834337048245041e-01, -3.061118204881552e-01, -3.328328478852766e-01, -3.328328478852766e-01, -4.070292937995621e-01, -3.333087144068368e-02, -4.549675349909672e-02, -3.787473796849319e-01, -7.036945225039645e-02, -7.249941495468475e-02, -8.450647810708823e-03, -9.035802450374883e-04, -1.896672918674474e-03, -6.802739988954094e-02, -2.881340027526308e-03, -2.881340027526305e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_15_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_15", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.166199376270104e+01, -3.166210982872764e+01, -3.166264188918427e+01, -3.166091649165951e+01, -3.166181830403269e+01, -3.166181830403269e+01, -4.574684042366809e+00, -4.574945082696631e+00, -4.581901775599007e+00, -4.579506357245216e+00, -4.579287462803054e+00, -4.518103072248601e+00, -7.592462028547475e-01, -8.735060533067661e-01, -8.489426935798176e-01, -8.567134692838941e-01, -8.550609463288853e-01, -8.550609463288853e-01, -2.243203915720395e-01, -2.279496277581155e-01, -8.652938241872736e-01, -1.678380703368977e-01, -1.894143995837268e-01, -1.894143995837264e-01, -7.652466323580053e-03, -8.054538362087620e-03, -4.443963969289274e-02, -4.419536774297057e-03, -5.553486948123612e-03, -5.553486948123612e-03, -7.173278813235322e+00, -7.177835225992395e+00, -7.173530644855739e+00, -7.764752436977504e+00, -7.175565567018524e+00, -7.175565567018524e+00, -2.459137358695472e+00, -2.500205463566997e+00, -2.428163609915264e+00, -2.464526956782012e+00, -2.497184704950361e+00, -2.562660051433707e+00, -7.673101247766926e-01, -8.619783553847131e-01, -7.052963071272613e-01, -7.384251359996973e-01, -7.828096490788619e-01, -8.599609337869599e-01, -1.144790651554958e-01, -2.226466334264083e-01, -1.066175837009001e-01, -2.527785706992010e+00, -1.364648932117082e-01, -1.364648932117080e-01, -3.558662396971769e-03, -4.320488134802325e-03, -3.303653192217913e-03, -7.337637876849025e-02, -4.153041729124953e-03, -3.979877735924123e-03, -8.534327265585286e-01, -8.319704650646734e-01, -8.745553845506180e-01, -8.455579367202951e-01, -8.424137260199870e-01, -8.424137260199870e-01, -8.279714909365989e-01, -6.405404761111272e-01, -6.790200138330438e-01, -7.298549331030877e-01, -7.021292671425274e-01, -7.755836361019318e-01, -8.930552112172925e-01, -2.422022620383160e-01, -3.426623348477524e-01, -4.348008025739002e-01, -3.943706375745427e-01, -3.943706375745425e-01, -6.020355760182701e-01, -4.253413601436390e-02, -5.799216304451987e-02, -4.353258595670528e-01, -9.147052953532400e-02, -9.188419286521299e-02, -1.079998229077539e-02, -1.154894023192579e-03, -2.424173806396042e-03, -8.627179621849466e-02, -3.682631835360413e-03, -3.682631835360409e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_15_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_15", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.715459440279944e-08, -1.715456076556920e-08, -1.715428866368020e-08, -1.715480208154370e-08, -1.715455037190625e-08, -1.715455037190625e-08, -1.336644429958322e-05, -1.336949173665993e-05, -1.344894361853033e-05, -1.341196011703342e-05, -1.342150115346669e-05, -1.740173890839804e-05, -3.883619543591888e-03, -5.613333069799396e-03, -5.104485981232048e-03, -5.429930748672989e-03, -5.351734105621709e-03, -5.351734105621709e-03, -6.716009396440975e-01, -6.850846732194609e-01, -7.965007464129528e-04, -4.809402467593962e-01, -5.673362251395564e-01, -5.673362251395563e-01, -1.296520175576838e+02, -1.195373966272371e+02, -3.000459993811813e+00, -3.318643208388608e+02, -2.482615012712839e+02, -2.482615012712839e+02, -5.866444648140174e-06, -5.867281714741486e-06, -5.866527183259744e-06, -5.326971439979024e-06, -5.866851590193070e-06, -5.866851590193070e-06, -1.084681615930971e-04, -1.100861017715438e-04, -1.069392112838638e-04, -1.085378416659177e-04, -1.101154244448466e-04, -1.458421197174420e-04, -2.883167337059557e-02, -2.498935230874150e-02, -3.228566220848828e-02, -3.390371289029134e-02, -2.824475867511191e-02, -2.341911169163479e-02, 1.330410741861741e-01, -3.145481681092702e-01, 1.999995247983699e-01, -2.691251161176042e-04, -7.278010706476226e-01, -7.278010706476229e-01, 5.113053517611735e+02, -3.264474292616492e+02, -1.588888784775327e+03, 8.482822625903220e-01, 7.465276328123227e+02, -6.780915351917092e+02, -3.804417228798539e-02, -3.818542980891765e-02, -3.644392986928335e-02, -3.811723137845548e-02, -3.813915781671767e-02, -3.813915781671767e-02, -4.236446979879816e-02, -5.214187415677624e-02, -5.174044526793027e-02, -4.927032558195108e-02, -5.078028779344397e-02, -4.357931361869263e-02, -1.986822637796196e-02, -1.384090669104880e-01, -1.975235605763225e-01, -1.065480818509960e-01, -1.828376513811134e-01, -1.828376513811135e-01, -4.822071914228757e-02, -3.276003579109359e+00, -1.762240691349549e+00, -2.125789324143734e-01, 3.770327396624452e-01, -1.193295954916950e+00, -4.507404065529637e+01, -5.049981365959017e+03, -1.941933566286082e+03, -1.370749339016952e+00, -9.455147999790421e+02, -9.455147999790447e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_15_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_15", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.886438588549715e-03, 1.886461302303791e-03, 1.886549394759462e-03, 1.886213571729388e-03, 1.886391351459114e-03, 1.886391351459114e-03, 3.215500515017325e-03, 3.217550626960773e-03, 3.271715917212900e-03, 3.249490077303172e-03, 3.252208412054970e-03, 1.321331923000065e-02, -2.187864177314956e-03, 3.373671239482372e-02, 2.848672461321027e-02, 3.098484570169201e-02, 3.039853373071355e-02, 3.039853373071355e-02, 7.033337377813442e-02, 7.509673073194310e-02, -2.850155602639884e-03, 2.096778501621085e-02, 3.603275752385870e-02, 3.603275752385840e-02, 4.515605720793483e-04, 4.855478934774212e-04, 2.103112890915574e-03, 2.224430698503216e-04, 3.302741159216373e-04, 3.302741159216373e-04, 1.140488994879260e-02, 1.140163074810135e-02, 1.140471989963891e-02, 8.905422859747728e-03, 1.140325506862237e-02, 1.140325506862237e-02, 3.061822947216501e-03, 3.517441820116686e-03, 2.715235486725577e-03, 3.112393158784201e-03, 3.491967431788853e-03, 2.079137209882547e-02, 9.475215222081103e-02, 9.313347820867432e-02, 9.076381295172800e-02, 9.883602852213219e-02, 9.522877217952352e-02, 4.837683976735226e-02, -1.901000439725820e-03, 3.246044779576775e-02, -1.581108826117437e-03, 2.988368662163858e-02, 1.680387847554259e-02, 1.680387847554252e-02, -6.186859752082125e-08, 2.044199633513902e-04, 4.449231168620060e-04, -6.382473766881640e-04, -3.898886132513068e-07, 3.319565160805614e-04, 9.788489979170108e-02, 9.991542048318669e-02, 8.990220206561772e-02, 9.865826498949545e-02, 9.895848447636418e-02, 9.895848447636418e-02, 1.008452231037502e-01, 1.060984183620384e-01, 1.112886882746443e-01, 1.102671821497423e-01, 1.115088416723897e-01, 6.903390245503917e-02, 8.819906883785940e-02, -1.037634542239733e-02, 7.239257997139213e-02, 1.594489363105092e-02, 9.896412118782594e-02, 9.896412118782591e-02, 2.748882774807807e-02, 2.009307559587111e-03, 2.786405632057691e-03, 1.424524509844343e-01, -1.711764168282748e-03, 7.990132796064338e-03, 4.415099901023059e-04, 6.038004361029829e-05, 2.147718851088392e-04, 7.554378069758888e-03, 3.667175941239485e-04, 3.667175941239457e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
