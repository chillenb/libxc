
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_15_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_15", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.403661248992095e+01, -2.403668016222808e+01, -2.403710403817466e+01, -2.403610039356069e+01, -2.403660870708950e+01, -2.403660870708950e+01, -3.441250606765049e+00, -3.441334794274773e+00, -3.443849502212139e+00, -3.445357403863314e+00, -3.443907389972222e+00, -3.443907389972222e+00, -6.302468206163490e-01, -6.297859720779093e-01, -6.194851550911543e-01, -6.280170765434019e-01, -6.254801803537524e-01, -6.254801803537524e-01, -1.808807333108835e-01, -1.835863064513704e-01, -7.187296026205111e-01, -1.309037767512133e-01, -1.488734457079149e-01, -1.488734457079149e-01, -5.984910470279306e-03, -6.297069622633135e-03, -3.462555195665794e-02, -3.439294098742246e-03, -4.330092177332374e-03, -4.330092177332374e-03, -5.877389200791101e+00, -5.877925976441889e+00, -5.877482750810604e+00, -5.877953791386499e+00, -5.877626244792914e+00, -5.877626244792914e+00, -2.122766574466262e+00, -2.150630661212286e+00, -2.117282045948907e+00, -2.142657779930534e+00, -2.140757731004303e+00, -2.140757731004303e+00, -6.207687292005474e-01, -6.654027480188658e-01, -5.488651262762985e-01, -5.553398762033518e-01, -6.332167366264992e-01, -6.332167366264992e-01, -9.051713381635156e-02, -1.773903331845429e-01, -8.363256771265065e-02, -1.899101029824160e+00, -1.072305389880404e-01, -1.072305389880404e-01, -2.633656786020199e-03, -3.347189017143958e-03, -2.569271862291142e-03, -5.613436835965355e-02, -3.085671675943671e-03, -3.085671675943671e-03, -6.501991832511097e-01, -6.501328764110262e-01, -6.502117113617635e-01, -6.502250219298349e-01, -6.502197373621803e-01, -6.502197373621803e-01, -6.258233264684544e-01, -5.529174482101576e-01, -5.777932843917732e-01, -5.987444939937883e-01, -5.879122612195177e-01, -5.879122612195176e-01, -6.863099947309658e-01, -2.288117561360564e-01, -2.763719179907819e-01, -3.584392058677551e-01, -3.184086796099204e-01, -3.184086796099204e-01, -4.855425596003919e-01, -3.322827777621232e-02, -4.516342563292034e-02, -3.490263902824006e-01, -7.176932208984202e-02, -7.176932208984205e-02, -8.364735325563956e-03, -8.913867041989002e-04, -1.890694321306098e-03, -6.759033113891573e-02, -2.860382622670987e-03, -2.860382622670985e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_15_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_15", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.900333007416529e+01, -2.900345705033261e+01, -2.900391218016139e+01, -2.900202199514152e+01, -2.900302798907468e+01, -2.900302798907468e+01, -4.598510795145627e+00, -4.598661020459677e+00, -4.602686693612029e+00, -4.601404416432479e+00, -4.601095123131336e+00, -4.601095123131336e+00, -8.060832767025975e-01, -8.050406805793540e-01, -7.833520060185089e-01, -7.957265833847923e-01, -7.923357106715117e-01, -7.923357106715117e-01, -2.226268589651957e-01, -2.258324748967391e-01, -8.966111629915484e-01, -1.661727204517427e-01, -1.868281337522484e-01, -1.868281337522486e-01, -7.656786236691462e-03, -8.062820656505720e-03, -4.470965015170814e-02, -4.450967705490077e-03, -5.578217728400059e-03, -5.578217728400058e-03, -7.177685634646156e+00, -7.182196394983256e+00, -7.177846196308322e+00, -7.181830016678230e+00, -7.179995057442383e+00, -7.179995057442383e+00, -2.548653605714672e+00, -2.568980411703847e+00, -2.533831874188098e+00, -2.551639263545789e+00, -2.567482849915380e+00, -2.567482849915380e+00, -8.012648848086689e-01, -9.231359789980127e-01, -7.277248441006291e-01, -7.957123764398862e-01, -8.195180449818706e-01, -8.195180449818706e-01, -1.162340196358434e-01, -2.212842061347459e-01, -1.076220930719123e-01, -2.749700849211799e+00, -1.360892526443550e-01, -1.360892526443549e-01, -3.481973639586328e-03, -4.382044287460900e-03, -3.330205692068749e-03, -7.257950897830594e-02, -4.031162604155396e-03, -4.031162604155395e-03, -8.635359210861370e-01, -8.415257074848748e-01, -8.490823208867809e-01, -8.554864202774625e-01, -8.522680015029729e-01, -8.522680015029729e-01, -8.470783504701513e-01, -6.441828645893893e-01, -6.872633342543099e-01, -7.434512585652653e-01, -7.135981296022402e-01, -7.135981296022402e-01, -9.638653950843791e-01, -2.818627853402225e-01, -3.383030408088812e-01, -4.509395368092596e-01, -3.895497985457159e-01, -3.895497985457161e-01, -5.968106672570226e-01, -4.266950328227925e-02, -5.837568827765938e-02, -4.443173183619236e-01, -9.214003896003009e-02, -9.214003896003022e-02, -1.095869374103923e-02, -1.192854322993633e-03, -2.433977777404321e-03, -8.646014451534599e-02, -3.719238193907933e-03, -3.719238193907930e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_15_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_15", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.941861749899188e-08, -1.941852437347459e-08, -1.941808261624307e-08, -1.941948179422817e-08, -1.941875244100181e-08, -1.941875244100181e-08, -1.492907598578466e-05, -1.493237517741167e-05, -1.501946006169533e-05, -1.498956679731230e-05, -1.499448690750223e-05, -1.499448690750223e-05, -4.424392039774601e-03, -4.407191827261388e-03, -4.021022099134386e-03, -4.354308763389095e-03, -4.266451847629141e-03, -4.266451847629141e-03, -6.515090889681173e-01, -6.609463529759404e-01, -8.945226327213330e-04, -4.050073640677628e-01, -5.112928486688988e-01, -5.112928486688986e-01, -1.275911247897242e+02, -1.160661520130419e+02, -2.442179322004413e+00, -2.626920351596699e+02, -2.163999451914606e+02, -2.163999451914602e+02, -5.862673018335024e-06, -5.863553475766318e-06, -5.862833924003706e-06, -5.863604769668584e-06, -5.863062756235716e-06, -5.863062756235716e-06, -1.389833432654580e-04, -1.410792015811995e-04, -1.382603506285364e-04, -1.403719478427761e-04, -1.405002957256636e-04, -1.405002957256636e-04, -2.665331548922565e-02, -2.290832624872682e-02, -2.844918014175058e-02, -2.906386655576815e-02, -2.622463461964749e-02, -2.622463461964749e-02, -4.853448411553212e-01, -3.007640010114638e-01, -5.365713175941832e-01, -2.322794606676382e-04, -6.512618314405583e-01, -6.512618314405586e-01, -1.439219842454308e+02, -1.830340196162959e+02, -1.212199978825002e+03, -1.067273477199266e+00, -4.113512641204204e+02, -4.113512641204212e+02, -3.756909128060554e-02, -3.772939947882493e-02, -3.769393628377716e-02, -3.764840334170521e-02, -3.767288084281461e-02, -3.767288084281461e-02, -4.132694999428287e-02, -5.150766540359500e-02, -5.088399215342792e-02, -4.825613134420628e-02, -4.978265899084423e-02, -4.978265899084421e-02, -1.786772739969347e-02, -2.317875113855185e-01, -1.887785225855381e-01, -1.287154206871666e-01, -1.717977650861690e-01, -1.717977650861691e-01, -5.853049485742878e-02, -2.965882869284241e+00, -1.385552789973203e+00, -1.936745737897624e-01, -9.922723268922905e-01, -9.922723268922904e-01, -2.452473829030030e+01, 1.138551877101978e+03, -1.716294936720293e+03, -1.219874977812628e+00, -6.646464906873648e+02, -6.646464906873664e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_15_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_15", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.711358042665834e-03, 2.711356175490624e-03, 2.711376124172690e-03, 2.711405515015235e-03, 2.711386072723797e-03, 2.711386072723797e-03, 7.089734189917765e-03, 7.092039572714722e-03, 7.155550727169272e-03, 7.156008227718610e-03, 7.145439052935007e-03, 7.145439052935007e-03, 8.570683156538217e-03, 8.529211654249354e-03, 7.899948852360185e-03, 9.796189706074781e-03, 9.184875200186206e-03, 9.184875200186206e-03, 6.335914364108561e-02, 6.621871496792346e-02, -5.483963390502677e-04, 1.337094784770604e-02, 2.631097763558488e-02, 2.631097763558508e-02, 4.406797995624018e-04, 4.642685043510791e-04, 1.526733502702570e-03, 1.569620406187470e-04, 2.685917870543499e-04, 2.685917870543489e-04, 1.138718946029503e-02, 1.138416951054940e-02, 1.138738928355611e-02, 1.138470769618962e-02, 1.138549195816908e-02, 1.138549195816908e-02, 1.768585582611148e-02, 1.850683395435360e-02, 1.763565233578180e-02, 1.840888052204446e-02, 1.816333012520063e-02, 1.816333012520063e-02, 7.336694543932416e-02, 7.332955700909125e-02, 5.588733706071865e-02, 5.714209843951432e-02, 7.539278169380577e-02, 7.539278169380577e-02, 5.432944006298400e-03, 2.845071689320613e-02, 4.670496136143927e-03, 1.824590615126799e-02, 1.302028094933007e-02, 1.302028094932998e-02, 2.861681070047204e-05, 8.853818846548797e-05, 2.975238304142760e-04, 2.765797430925647e-03, 1.602724561589634e-04, 1.602724561589642e-04, 9.543455655862196e-02, 9.733324943149434e-02, 9.670792145322654e-02, 9.615498310709163e-02, 9.643443911112395e-02, 9.643443911112394e-02, 9.584884462571443e-02, 1.020182518314901e-01, 1.059790545487834e-01, 1.044640028430869e-01, 1.055320331088916e-01, 1.055320331088916e-01, 6.450189026232353e-02, 4.637456108359799e-02, 6.112657628036901e-02, 7.558289651850933e-02, 7.764062001811586e-02, 7.764062001811591e-02, 8.343334373288618e-02, 1.720131482120789e-03, 1.899573479068814e-03, 1.008212344541531e-01, 5.667324849737843e-03, 5.667324849737952e-03, 1.831803881001632e-04, -5.255731124405610e-06, 1.783157787834139e-04, 6.107105260325152e-03, 2.179547477461536e-04, 2.179547477461518e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
