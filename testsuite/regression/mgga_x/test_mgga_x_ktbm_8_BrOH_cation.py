
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_8_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_8", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.130583412758783e+01, -2.130594525248149e+01, -2.130643681781966e+01, -2.252447484953642e+01, -2.252515938525270e+01, -2.374480663465257e+01, -3.450846649134808e+00, -3.826210690662131e+00, -3.827737441271927e+00, -3.827468841791073e+00, -3.827098173531133e+00, -3.452002810952443e+00, -5.508370758796834e-01, -6.247238534042607e-01, -6.701254270735264e-01, -6.081993210421415e-01, -5.383488643234231e-01, -6.798211318271695e-01, -1.588888959970918e-01, -1.620319421559865e-01, -6.985865216415199e-01, -1.249064936540489e-01, -1.648998350084545e-01, -1.636253865983291e-01, -5.519941671856635e-03, -5.608433653937269e-03, -3.089707054640366e-02, -3.182305742343025e-03, -4.442236484847990e-03, -4.442236484847990e-03, -5.755321491484852e+00, -5.755651807177320e+00, -5.755332414855495e+00, -5.755624426149152e+00, -5.541102830588928e+00, -5.541293724550476e+00, -2.128197655922083e+00, -2.149238006639986e+00, -2.112386732211490e+00, -2.131226757018744e+00, -1.928236786225024e+00, -2.147486588398555e+00, -6.038281108336838e-01, -7.079625411589452e-01, -6.009887393098103e-01, -6.294956630164072e-01, -6.201020795677555e-01, -6.658038474014822e-01, -8.479184821265412e-02, -1.546035625269780e-01, -7.838608674484239e-02, -2.141361247557474e+00, -1.010573603452305e-01, -1.010573603452305e-01, -2.364496420932100e-03, -3.110887825507729e-03, -2.382405467976171e-03, -4.978630763811941e-02, -2.992730158312994e-03, -2.992730158312995e-03, -6.416022460547055e-01, -6.421731878066997e-01, -6.196322853209144e-01, -6.325449056407453e-01, -6.214538020403058e-01, -6.316733652091313e-01, -6.248188721491372e-01, -4.990395916445409e-01, -5.349798105355733e-01, -5.980088085378352e-01, -5.869847540608337e-01, -5.520638186716107e-01, -7.024985309816647e-01, -2.186223310453372e-01, -2.434741936050742e-01, -3.386656526125889e-01, -3.212865573245973e-01, -2.868956768765277e-01, -4.998082798532733e-01, -2.806901662789433e-02, -4.194134458894412e-02, -3.698966078106239e-01, -6.710676600620392e-02, -6.710676600620394e-02, -7.146174428334718e-03, -8.314479832808474e-04, -1.606247709424935e-03, -5.641346981331131e-02, -2.748289754411385e-03, -2.578773758643548e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_8_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_8", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.118788034429044e+01, -3.118784462236115e+01, -3.118798176008390e+01, -3.118791828862577e+01, -3.118832583946117e+01, -3.118840577999719e+01, -3.118718002109725e+01, -2.855270302283179e+01, -3.118793985623219e+01, -2.855348353215236e+01, -2.855375321770901e+01, -2.855348353215236e+01, -4.564195698147929e+00, -4.755899058640006e+00, -4.564204177721799e+00, -4.564139808128400e+00, -4.564346427958338e+00, -4.564419432602744e+00, -4.564679946662433e+00, -4.564743853734440e+00, -4.563445351004205e+00, -4.564955892078767e+00, -4.754830890817820e+00, -4.564955892078767e+00, -7.831175566475744e-01, -7.908194940908777e-01, -7.805975151560384e-01, -8.637710422802357e-01, -8.318035115892379e-01, -8.244891637217616e-01, -8.380956124506165e-01, -7.609954393192668e-01, -7.999252888777451e-01, -7.112478066896556e-01, -8.723241977165526e-01, -7.986570017356682e-01, -1.840937590629257e-01, -2.198745774672990e-01, -1.871074611321536e-01, -2.250455953446943e-01, -9.337608058605494e-01, -8.687666783438261e-01, -1.500233899140929e-01, -1.531503697902740e-01, -2.177432431773313e-01, -1.065092750789647e-01, -2.177432431773313e-01, -1.035237308305073e-01, -6.421398013110390e-03, -6.823586944963413e-03, -6.848529141503384e-03, -7.208520043730977e-03, -3.790436317890673e-02, -3.962119498978316e-02, -3.859806725464765e-03, -3.795487610112244e-03, -5.728368414844006e-03, -3.259652259377461e-03, -5.728368414844005e-03, -3.259652259377468e-03, -7.076751891767645e+00, -7.075072287651975e+00, -7.080565479599194e+00, -7.078756724865481e+00, -7.077005831460145e+00, -7.075229267067765e+00, -7.080276425262123e+00, -7.078574748634998e+00, -7.590436889166913e+00, -7.076916374916004e+00, -7.078672008106728e+00, -7.588590971100978e+00, -2.568198620456167e+00, -2.568153644630587e+00, -2.587785192179768e+00, -2.587114518098220e+00, -2.551389475340395e+00, -2.556213350839903e+00, -2.568664295577849e+00, -2.573582441265718e+00, -2.591446730412728e+00, -2.603828117714707e+00, -2.591446730412728e+00, -2.579837113759703e+00, -7.713403298818176e-01, -8.447175421519023e-01, -8.534008217635820e-01, -8.553071192141596e-01, -6.993374929394655e-01, -7.244836330987249e-01, -7.282312615914074e-01, -7.540123855571488e-01, -8.050928646599591e-01, -8.377906899098905e-01, -8.050928646599586e-01, -7.626542841292541e-01, -1.017384162735191e-01, -1.027450011550576e-01, -1.838959539074513e-01, -2.061886734256618e-01, -9.170116008250315e-02, -9.685969902894623e-02, -2.529544229483252e+00, -2.528457525605369e+00, -1.177281255838350e-01, -1.262045406653576e-01, -1.177281255838349e-01, -1.262045406653576e-01, -2.947887612841795e-03, -3.009167950561077e-03, -3.713802450882566e-03, -3.770007481890625e-03, -2.777121745446167e-03, -2.941092141751425e-03, -6.272127837745857e-02, -6.285312369680315e-02, -2.836340753817538e-03, -3.895383693710659e-03, -2.836340753817538e-03, -3.895383693710658e-03, -8.319050278059936e-01, -8.355362751491765e-01, -8.137514498554962e-01, -8.174617964214058e-01, -8.491972105215049e-01, -8.523871554047017e-01, -8.497096292987311e-01, -8.288627947325006e-01, -8.494554296228917e-01, -8.526434496658963e-01, -8.494554296228918e-01, -8.262343946703209e-01, -8.076684252726679e-01, -8.107999115204793e-01, -6.442212485270240e-01, -6.998738388834910e-01, -6.776545735040959e-01, -7.504601606565237e-01, -7.215873222558585e-01, -7.243996855905525e-01, -6.976822348965765e-01, -7.005816910583382e-01, -6.976822348965763e-01, -7.700303829492401e-01, -8.865566117533167e-01, -9.761896249037816e-01, -2.684898068337096e-01, -2.703472714703472e-01, -2.984385504077966e-01, -3.368314916778688e-01, -4.547369373636118e-01, -4.573732642438847e-01, -3.937799959144553e-01, -3.937598672255001e-01, -3.937799959144552e-01, -3.731373150483153e-01, -5.928561580433673e-01, -5.968111267332540e-01, -3.719749956396828e-02, -3.745138398168442e-02, -4.959110803486864e-02, -5.127124732414468e-02, -4.365601853588092e-01, -4.427783912011542e-01, -7.834438124392792e-02, -8.303339902988609e-02, -7.834438124392797e-02, -8.303339902988617e-02, -9.348214350684086e-03, -9.686939642659357e-03, -9.991225260008272e-04, -1.001406094193633e-03, -2.069764345106319e-03, -2.201350256608717e-03, -7.375164226209778e-02, -7.482430496546735e-02, -2.686640180789799e-03, -3.570372420208060e-03, -2.686640180789796e-03, -3.634474408797306e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_8_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_8", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.914713005554911e-08, 0.000000000000000e+00, -2.914893123818957e-08, -2.914699573512372e-08, 0.000000000000000e+00, -2.914883328963429e-08, -2.914640077136161e-08, 0.000000000000000e+00, -2.914802658016926e-08, -2.914793783019937e-08, 0.000000000000000e+00, -3.258096958231192e-08, -2.914706454836030e-08, 0.000000000000000e+00, -3.257938847254849e-08, -3.257736715554531e-08, 0.000000000000000e+00, -3.257938847254849e-08, -3.150218052844192e-05, 0.000000000000000e+00, -2.515445878859266e-05, -3.150843111848421e-05, 0.000000000000000e+00, -3.150265687594724e-05, -3.163039929218380e-05, 0.000000000000000e+00, -3.165087783615395e-05, -3.157542557209079e-05, 0.000000000000000e+00, -3.157382697116635e-05, -3.150844166472944e-05, 0.000000000000000e+00, -3.168124105532255e-05, -2.516118451337231e-05, 0.000000000000000e+00, -3.168124105532255e-05, -8.269145179716926e-03, 0.000000000000000e+00, -8.446539876233164e-03, -8.231261886176695e-03, 0.000000000000000e+00, -1.148822826017380e-02, -1.063316395791183e-02, 0.000000000000000e+00, -1.063199909277028e-02, -1.107725264947516e-02, 0.000000000000000e+00, -8.157318019002454e-03, -8.387506968335340e-03, 0.000000000000000e+00, -7.423989757323283e-03, -1.140468215980801e-02, 0.000000000000000e+00, -1.054028332699983e-02, -9.556392968734374e-01, 0.000000000000000e+00, -1.527633708513176e+00, -9.712096437362515e-01, 0.000000000000000e+00, -1.542093617878545e+00, -2.933850512658975e-03, 0.000000000000000e+00, -2.263656913610859e-03, -1.240358938233508e+00, 0.000000000000000e+00, -1.396352909811686e+00, -1.218324282226973e+00, 0.000000000000000e+00, -1.638179518110396e+00, -1.218324282226972e+00, 0.000000000000000e+00, -6.464318557137565e-01, -5.978550093440653e+02, 0.000000000000000e+00, -5.306717832324348e+02, -1.317527776445291e+02, 0.000000000000000e+00, -4.865258367889772e+02, -3.398346452798862e+00, 0.000000000000000e+00, -1.184594234186613e+01, -1.413302819488831e+03, 0.000000000000000e+00, -1.469042197206171e+03, -7.318012376588210e+02, 0.000000000000000e+00, -2.953541912837597e+03, -7.318012376588210e+02, 0.000000000000000e+00, -2.953541912837597e+03, -9.594099195733330e-06, 0.000000000000000e+00, -9.603333548122910e-06, -9.592693897439286e-06, 0.000000000000000e+00, -9.601977146383456e-06, -9.594066175800249e-06, 0.000000000000000e+00, -9.603319612852575e-06, -9.592857145164413e-06, 0.000000000000000e+00, -9.602084095009433e-06, -8.850222973012311e-06, 0.000000000000000e+00, -9.602652956920333e-06, -9.593353888113136e-06, 0.000000000000000e+00, -8.858742188200614e-06, -2.687000427947945e-04, 0.000000000000000e+00, -2.696880198264769e-04, -2.698584299084462e-04, 0.000000000000000e+00, -2.707810033595513e-04, -2.669134749884688e-04, 0.000000000000000e+00, -2.684220593695318e-04, -2.683264305320508e-04, 0.000000000000000e+00, -2.697352161889792e-04, -2.705200454431916e-04, 0.000000000000000e+00, -2.118779009469430e-04, -2.705200454431916e-04, 0.000000000000000e+00, -2.705631766754576e-04, -4.940425482700202e-02, 0.000000000000000e+00, -4.245289317901575e-02, -4.135680817434899e-02, 0.000000000000000e+00, -4.149880650091289e-02, -5.854593739898174e-02, 0.000000000000000e+00, -5.665759089421346e-02, -6.089884868534457e-02, 0.000000000000000e+00, -5.622222899550051e-02, -4.478750309698505e-02, 0.000000000000000e+00, -4.441504487719036e-02, -4.478750309698507e-02, 0.000000000000000e+00, -5.250700908211831e-02, -1.995428874814977e+00, 0.000000000000000e+00, -1.960905607116004e+00, -4.703603075234992e-01, 0.000000000000000e+00, -7.687603166440961e-01, -2.356975288699593e+00, 0.000000000000000e+00, -2.243035055509072e+00, -4.586147828206693e-04, 0.000000000000000e+00, -4.595399682965161e-04, -1.962027896687610e+00, 0.000000000000000e+00, -2.287850048040385e+00, -1.962027896687611e+00, 0.000000000000000e+00, -2.287850048040386e+00, -5.059994033252730e+02, 0.000000000000000e+00, -1.901522751198957e+03, -1.486703613523958e+03, 0.000000000000000e+00, -1.354465634857121e+03, -7.137677428220443e+03, 0.000000000000000e+00, -6.669024165157619e+03, -5.129273251215979e+00, 0.000000000000000e+00, -1.733339411878531e+00, -2.968304521369865e+03, 0.000000000000000e+00, -2.808005625813753e+03, -2.968304521369865e+03, 0.000000000000000e+00, -2.808005625813753e+03, -6.108654937653484e-02, 0.000000000000000e+00, -6.016368973887540e-02, -6.190272614895629e-02, 0.000000000000000e+00, -6.097664832046778e-02, -5.932867527431518e-02, 0.000000000000000e+00, -5.848735188604609e-02, -5.948668532533361e-02, 0.000000000000000e+00, -6.048823384141955e-02, -5.940992462033369e-02, 0.000000000000000e+00, -5.856221373046776e-02, -5.940992462033369e-02, 0.000000000000000e+00, -6.060789146855285e-02, -6.803526307351612e-02, 0.000000000000000e+00, -6.716095048309272e-02, -9.240420859534214e-02, 0.000000000000000e+00, -7.534500835680301e-02, -8.880435262002999e-02, 0.000000000000000e+00, -7.541291617098717e-02, -8.209077313310771e-02, 0.000000000000000e+00, -8.103141240355848e-02, -8.585515061586137e-02, 0.000000000000000e+00, -8.478580091597579e-02, -8.585515061586137e-02, 0.000000000000000e+00, -7.459034636028417e-02, -3.319713590107201e-02, 0.000000000000000e+00, -2.957030561269870e-02, -5.332173479409723e-01, 0.000000000000000e+00, -5.293298584679205e-01, -2.933668111355753e-01, 0.000000000000000e+00, -4.101903052833057e-01, -2.091145604628110e-01, 0.000000000000000e+00, -2.632663207468215e-01, -3.548716444917520e-01, 0.000000000000000e+00, -3.579219614406698e-01, -3.548716444917522e-01, 0.000000000000000e+00, -2.700682817275408e-01, -1.123255784950304e-01, 0.000000000000000e+00, -1.124527693651775e-01, -3.614615815614077e+00, 0.000000000000000e+00, -3.531617307656003e+00, -7.151674991566456e+00, 0.000000000000000e+00, -6.864185110990662e+00, -3.722372512643113e-01, 0.000000000000000e+00, -3.923681887561573e-01, -3.990413307523291e+00, 0.000000000000000e+00, -4.164505456486058e+00, -3.990413307523293e+00, 0.000000000000000e+00, -4.164505456486062e+00, -4.833849291192126e+01, 0.000000000000000e+00, -4.471795887728378e+01, -2.200931404340291e+04, 0.000000000000000e+00, -2.186083447582706e+04, -2.092793774946883e+03, 0.000000000000000e+00, -1.904574288652054e+03, -1.686375116211573e+00, 0.000000000000000e+00, -1.798577615657263e+00, -5.316108373714585e+03, 0.000000000000000e+00, -3.402459950203049e+03, -5.316108373714596e+03, 0.000000000000000e+00, -8.059219305106589e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_8_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_8", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.630008561937017e-03, 1.630093085976374e-03, 1.630015395672824e-03, 1.630098030523427e-03, 1.630031676965528e-03, 1.630122891312077e-03, 1.629955427615015e-03, 2.209939000576545e-03, 1.630013232010066e-03, 2.209839341553669e-03, 2.209834132825070e-03, 2.209839341553669e-03, 1.278069284053789e-02, 4.925889629500309e-03, 1.278229960989040e-02, 1.278058107189481e-02, 1.281341400339798e-02, 1.281881246851737e-02, 1.280106069967357e-02, 1.280092389613648e-02, 1.277915690912869e-02, 1.282854807298890e-02, 4.923665226804009e-03, 1.282854807298890e-02, 4.792209608742878e-03, 5.239364945361097e-03, 4.668979302989283e-03, 3.748212539131091e-02, 3.214827889104281e-02, 3.147519649872571e-02, 3.387657160119965e-02, 3.950962988406635e-03, 5.510917322647548e-03, 1.995099423922704e-03, 3.811655649876370e-02, 2.893965611701349e-02, 7.874197753637117e-04, 8.976403243169211e-02, 1.435225004039379e-03, 9.581847426452786e-02, 1.394717496687879e-02, 4.715450299798540e-04, 2.626937683159910e-02, 3.132025568412661e-02, 7.184090019710535e-02, 1.235923571947334e-02, 7.184090019710539e-02, -7.622015339746623e-04, 9.460130131674939e-04, 1.007632160767880e-03, -7.327918189494418e-07, 1.089213304015459e-03, -5.885257400325807e-05, 4.451318361335168e-03, 4.855240851057741e-04, 4.798596133938183e-04, 8.219683378109403e-04, 6.111384371293369e-04, 8.219683378109403e-04, 6.111384371293428e-04, 8.588870220010663e-03, 8.590864718943539e-03, 8.577125142370376e-03, 8.579510963833969e-03, 8.588066152329347e-03, 8.590365031199644e-03, 8.577994775825064e-03, 8.580057205983418e-03, 7.041226509466403e-03, 8.585184061864636e-03, 8.582972046030642e-03, 7.042891224479538e-03, 2.040115895699450e-02, 2.045545926444454e-02, 2.076313715627768e-02, 2.080390263589741e-02, 2.004024391712395e-02, 2.020005773358467e-02, 2.038748293157986e-02, 2.054129994374621e-02, 2.085426087566082e-02, 6.627147416802366e-03, 2.085426087566082e-02, 2.068227892442474e-02, 8.363668948305079e-02, 4.748352771197864e-02, 7.365285574278449e-02, 7.320178554154479e-02, 8.463715219504819e-02, 8.632047060139401e-02, 8.829573371528117e-02, 8.583331054546263e-02, 8.037335448966086e-02, 4.846988743289314e-02, 8.037335448966078e-02, 8.473712836487653e-02, 1.312398621962964e-02, 1.328859017086668e-02, -1.805737170368066e-03, 4.093031135982762e-02, 1.129870779391205e-02, 1.271214116985171e-02, 2.558321734512023e-02, 2.559390477509581e-02, 2.013361482866487e-02, 2.887954485889020e-02, 2.013361482866484e-02, 2.887954485889028e-02, -2.996648521593514e-08, 3.095206149123352e-04, 4.549396424012850e-04, 4.335766260382753e-04, 9.133593582209134e-04, 1.013683476364725e-03, 7.754150996077794e-03, -3.187363631442809e-04, 4.046125503717448e-04, 9.917242955404971e-04, 4.046125503717443e-04, 9.917242955404958e-04, 6.621257653359111e-02, 6.583840885249016e-02, 7.058867453218383e-02, 7.015298984286508e-02, 6.376641741357483e-02, 6.350840451626430e-02, 6.355223684197873e-02, 6.741195976739309e-02, 6.366880533577539e-02, 6.340894313255097e-02, 6.366880533577539e-02, 6.803850106979717e-02, 6.862465654983613e-02, 6.825772988032204e-02, 9.780749459083424e-02, 4.778346389615865e-02, 9.550627580241525e-02, 5.914232946880368e-02, 8.670683287491701e-02, 8.629729474565299e-02, 9.184847239604270e-02, 9.139372284810753e-02, 9.184847239604275e-02, 6.303247571487315e-02, 7.216071572273963e-02, 5.083550443741334e-02, 5.886807143021237e-02, 5.952019986945162e-02, 7.413655660404502e-03, 8.188006163456955e-02, 3.443623193395669e-02, 1.133349377106183e-01, 1.041360810294130e-01, 1.048448884616090e-01, 1.041360810294130e-01, 2.173007671592621e-02, 9.929556964263120e-02, 1.002501963555405e-01, -5.855290318849979e-05, -5.856466543112023e-05, 5.293220545841142e-03, 5.621508174134465e-03, 1.326995079088236e-01, 1.391081471997856e-01, 1.190421318445930e-02, 1.486950882400671e-02, 1.190421318445929e-02, 1.486950882400673e-02, -8.674795395406418e-07, -9.512940291909755e-07, 1.311251288793675e-04, 1.311355991735565e-04, -4.311756493247243e-08, -5.495866056821955e-08, -6.429376998655173e-04, -7.443691279625639e-04, 6.158773289980289e-04, 9.252477170445583e-04, 6.158773289980323e-04, -3.274875069255499e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
