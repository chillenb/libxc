
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_8_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_8", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.358001920324988e+01, -2.358008267007020e+01, -2.358047147461258e+01, -2.357952959211803e+01, -2.358000790517616e+01, -2.358000790517616e+01, -3.385075341281828e+00, -3.385184076001816e+00, -3.388323383954555e+00, -3.389416066258279e+00, -3.388091493603466e+00, -3.388091493603466e+00, -5.972986945403422e-01, -5.966681839724132e-01, -5.827477427417200e-01, -5.934415588089994e-01, -5.922008492170128e-01, -5.922008492170128e-01, -1.713625806112215e-01, -1.741899073788808e-01, -6.552744849762837e-01, -1.205298433657893e-01, -1.604904934926350e-01, -1.604904934926349e-01, -5.514044286666461e-03, -5.801701335086635e-03, -3.168042611632184e-02, -3.139101274480597e-03, -4.412892164902474e-03, -4.412892164902474e-03, -5.752437426267454e+00, -5.752801832369951e+00, -5.752508361385097e+00, -5.752827873472484e+00, -5.752594765165690e+00, -5.752594765165690e+00, -2.066233831841855e+00, -2.095075558528956e+00, -2.058946021593606e+00, -2.085215255784809e+00, -2.085708685153735e+00, -2.085708685153735e+00, -6.134528059764296e-01, -6.601273852089760e-01, -5.419763095987149e-01, -5.538292140301819e-01, -6.268576150626961e-01, -6.268576150626961e-01, -8.277926898211393e-02, -1.657307307999070e-01, -7.649586638790729e-02, -1.895052682434093e+00, -9.914602581630465e-02, -9.914602581630466e-02, -2.358439805817122e-03, -3.026671988278157e-03, -2.345817346869773e-03, -5.117521877069914e-02, -2.952270302155210e-03, -2.952270302155210e-03, -6.354850133090033e-01, -6.362607899645719e-01, -6.360605049723622e-01, -6.358291004354626e-01, -6.359486867407362e-01, -6.359486867407362e-01, -6.130685355735409e-01, -5.417685008367943e-01, -5.675247039124458e-01, -5.882608344352471e-01, -5.777734811742031e-01, -5.777734811742031e-01, -6.824943430289524e-01, -2.161075142736833e-01, -2.635071649751775e-01, -3.492308397698033e-01, -3.071609147213862e-01, -3.071609147213863e-01, -4.759043985817874e-01, -3.047555698018131e-02, -4.123365907939825e-02, -3.432462449906075e-01, -6.581403324741789e-02, -6.581403324741790e-02, -7.561735062981298e-03, -7.803681891324424e-04, -1.735072619460581e-03, -6.208412326737550e-02, -2.711814268363122e-03, -2.711814268363120e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_8_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_8", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.875213972399056e+01, -2.875167770387232e+01, -2.875226735921250e+01, -2.875177046256164e+01, -2.875258643216792e+01, -2.875225273396395e+01, -2.875114314002642e+01, -2.875041345570977e+01, -2.875221871460198e+01, -2.875108327817020e+01, -2.875221871460198e+01, -2.875108327817020e+01, -4.714543181033433e+00, -4.714484444945904e+00, -4.714677754589601e+00, -4.714578323466128e+00, -4.717376689197245e+00, -4.717936724378032e+00, -4.716308355434584e+00, -4.716484044373175e+00, -4.713476733999286e+00, -4.718973561155662e+00, -4.713476733999286e+00, -4.718973561155662e+00, -8.162161709133995e-01, -8.223668789139578e-01, -8.142059221980624e-01, -8.213455225577836e-01, -7.868702445112699e-01, -7.811247724411685e-01, -7.980996541204943e-01, -8.020029249074735e-01, -8.292873694579180e-01, -7.654019556699194e-01, -8.292873694579180e-01, -7.654019556699194e-01, -2.066117298586035e-01, -2.191996921780330e-01, -2.096646458999885e-01, -2.241614713843971e-01, -8.501136317796111e-01, -8.933611891772073e-01, -1.481668745647378e-01, -1.518217031311898e-01, -2.155602239571412e-01, -1.061374371916115e-01, -2.155602239571413e-01, -1.061374371916114e-01, -6.424784490698865e-03, -6.825134236484807e-03, -6.734783541116278e-03, -7.212063815497354e-03, -3.765274919213730e-02, -3.975216148931368e-02, -3.878255313907982e-03, -3.811186517388496e-03, -5.737311405250771e-03, -3.285809608189118e-03, -5.737311405250778e-03, -3.285809608189123e-03, -7.080587844385464e+00, -7.078687782529330e+00, -7.084360011848062e+00, -7.082332141444431e+00, -7.080751777384301e+00, -7.078780180378172e+00, -7.083990162295004e+00, -7.082092503384875e+00, -7.082553147653251e+00, -7.080522806752954e+00, -7.082553147653251e+00, -7.080522806752954e+00, -2.580868110197443e+00, -2.580775678600026e+00, -2.601546199017366e+00, -2.600690386537880e+00, -2.560110148245059e+00, -2.565983015210854e+00, -2.578143921570862e+00, -2.584026028716023e+00, -2.608280842504048e+00, -2.593514009410594e+00, -2.608280842504048e+00, -2.593514009410594e+00, -8.060105066062285e-01, -8.034339609747589e-01, -9.087664585559314e-01, -9.091921080137804e-01, -7.239121716851447e-01, -7.574331833799137e-01, -7.860121037722629e-01, -8.146896014888984e-01, -8.392709465797827e-01, -7.997963448455550e-01, -8.392709465797824e-01, -7.997963448455554e-01, -1.016669443414780e-01, -1.026476042431251e-01, -2.039947346257639e-01, -2.050230516431156e-01, -9.173799197627207e-02, -9.682814427759329e-02, -2.749300986927505e+00, -2.748159194374502e+00, -1.173718523220318e-01, -1.256598922180029e-01, -1.173718523220319e-01, -1.256598922180029e-01, -2.931907181642854e-03, -3.045437430989532e-03, -3.744729346744468e-03, -3.803571812379745e-03, -2.790751879895917e-03, -2.956163926522568e-03, -6.294821924851102e-02, -6.329594086643778e-02, -2.878010022917678e-03, -3.899801441023032e-03, -2.878010022917676e-03, -3.899801441023029e-03, -8.401447762842852e-01, -8.435849230910478e-01, -8.216793226988182e-01, -8.252186057412964e-01, -8.279743867501851e-01, -8.315227929928118e-01, -8.333852519024517e-01, -8.368271173692476e-01, -8.306648011816820e-01, -8.341581841007457e-01, -8.306648011816820e-01, -8.341581841007456e-01, -8.234027036963381e-01, -8.260495857668469e-01, -6.480817096546618e-01, -6.509190635726806e-01, -6.853934700744060e-01, -6.887265429192093e-01, -7.334489903040604e-01, -7.362478823167415e-01, -7.081766981572202e-01, -7.107942600134787e-01, -7.081766981572202e-01, -7.107942600134788e-01, -9.528218104821972e-01, -9.545379897928730e-01, -2.673187698898460e-01, -2.691286999564827e-01, -3.297695876532629e-01, -3.341071929083604e-01, -4.586758462081645e-01, -4.613419899854654e-01, -3.920396601981195e-01, -3.920959478246019e-01, -3.920396601981194e-01, -3.920959478246021e-01, -6.035612578020728e-01, -6.079231869575275e-01, -3.686723780094216e-02, -3.713310608175695e-02, -4.977989521876981e-02, -5.145371913823443e-02, -4.474795437432676e-01, -4.556372809789122e-01, -7.841201551379982e-02, -8.301777593818487e-02, -7.841201551379989e-02, -8.301777593818488e-02, -9.265196793771217e-03, -9.605155651717006e-03, -1.015566891502520e-03, -1.019285588302198e-03, -2.038140719775217e-03, -2.167934173944601e-03, -7.511186289123342e-02, -7.640516964821238e-02, -2.722297014541551e-03, -3.574523265853346e-03, -2.722297014541550e-03, -3.574523265853345e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_8_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_8", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.234132433812257e-08, 0.000000000000000e+00, -3.234348868513532e-08, -3.234108334998801e-08, 0.000000000000000e+00, -3.234331322787241e-08, -3.234027673355370e-08, 0.000000000000000e+00, -3.234216683426024e-08, -3.234301858509322e-08, 0.000000000000000e+00, -3.234565690097395e-08, -3.234119001792277e-08, 0.000000000000000e+00, -3.234423420895663e-08, -3.234119001792277e-08, 0.000000000000000e+00, -3.234423420895663e-08, -2.773764235076830e-05, 0.000000000000000e+00, -2.772968970408637e-05, -2.774410404926942e-05, 0.000000000000000e+00, -2.773360811011659e-05, -2.786574942878177e-05, 0.000000000000000e+00, -2.788524576395886e-05, -2.783015672496259e-05, 0.000000000000000e+00, -2.782485005780482e-05, -2.774142962226211e-05, 0.000000000000000e+00, -2.793266742857568e-05, -2.774142962226211e-05, 0.000000000000000e+00, -2.793266742857568e-05, -9.255380807004020e-03, 0.000000000000000e+00, -9.412156123510569e-03, -9.227771073996053e-03, 0.000000000000000e+00, -9.390170510420811e-03, -8.729087451460562e-03, 0.000000000000000e+00, -8.780854593097775e-03, -9.234371996979658e-03, 0.000000000000000e+00, -9.396060521953128e-03, -9.274241235927721e-03, 0.000000000000000e+00, -9.045262417864774e-03, -9.274241235927721e-03, 0.000000000000000e+00, -9.045262417864774e-03, -1.382205864791116e+00, 0.000000000000000e+00, -1.508230583941030e+00, -1.384155584736492e+00, 0.000000000000000e+00, -1.516948125661068e+00, -2.083447541117358e-03, 0.000000000000000e+00, -2.439211235189069e-03, -1.086763179120292e+00, 0.000000000000000e+00, -1.291592573846557e+00, -1.168436257387862e+00, 0.000000000000000e+00, -1.288544433193348e+00, -1.168436257387861e+00, 0.000000000000000e+00, -1.288544433193348e+00, -5.925000430730263e+02, 0.000000000000000e+00, -5.286353620860469e+02, -5.463421607805184e+02, 0.000000000000000e+00, -4.824591907195293e+02, -1.176500537753114e+01, 0.000000000000000e+00, -1.101025349637082e+01, -1.291118896216340e+03, 0.000000000000000e+00, -1.360342963618603e+03, -7.121249902732369e+02, 0.000000000000000e+00, -2.497473436763616e+03, -7.121249902732359e+02, 0.000000000000000e+00, -2.497473436763615e+03, -9.588883465739605e-06, 0.000000000000000e+00, -9.598411803317546e-06, -9.587539137278619e-06, 0.000000000000000e+00, -9.597114198974546e-06, -9.588973157555904e-06, 0.000000000000000e+00, -9.598485978082560e-06, -9.587811821945251e-06, 0.000000000000000e+00, -9.597299383981849e-06, -9.588079102059345e-06, 0.000000000000000e+00, -9.597745693323560e-06, -9.588079102059345e-06, 0.000000000000000e+00, -9.597745693323560e-06, -2.601378889455702e-04, 0.000000000000000e+00, -2.613575952259445e-04, -2.624661240930463e-04, 0.000000000000000e+00, -2.635769771268189e-04, -2.596620082808210e-04, 0.000000000000000e+00, -2.609920180467502e-04, -2.621366903308838e-04, 0.000000000000000e+00, -2.634045838142077e-04, -2.617114172997194e-04, 0.000000000000000e+00, -2.627080079596352e-04, -2.617114172997194e-04, 0.000000000000000e+00, -2.627080079596352e-04, -4.620013497839252e-02, 0.000000000000000e+00, -4.715119198252513e-02, -3.841591001559600e-02, 0.000000000000000e+00, -3.865730006649676e-02, -5.201278891612227e-02, 0.000000000000000e+00, -5.144147779757040e-02, -5.293922302634638e-02, 0.000000000000000e+00, -4.980898451409966e-02, -4.241256284391726e-02, 0.000000000000000e+00, -4.891912025883661e-02, -4.241256284391728e-02, 0.000000000000000e+00, -4.891912025883661e-02, -1.809776125603198e+00, 0.000000000000000e+00, -1.763345723919752e+00, -7.554984243081243e-01, 0.000000000000000e+00, -7.443430721174702e-01, -2.090029842921456e+00, 0.000000000000000e+00, -2.029489703005875e+00, -4.050732294454168e-04, 0.000000000000000e+00, -4.059086114198581e-04, -1.827358558007429e+00, 0.000000000000000e+00, -2.167361024975141e+00, -1.827358558007431e+00, 0.000000000000000e+00, -2.167361024975142e+00, -1.561841217875257e+03, 0.000000000000000e+00, -1.415484211412152e+03, -1.247026276608620e+03, 0.000000000000000e+00, -1.118084498429929e+03, -6.502166863495947e+03, 0.000000000000000e+00, -6.046374646625019e+03, -4.463837595153004e+00, 0.000000000000000e+00, -4.973577695972421e+00, -1.956060080103090e+03, 0.000000000000000e+00, -2.753548752787955e+03, -1.956060080103092e+03, 0.000000000000000e+00, -2.753548752787955e+03, -6.045031238747781e-02, 0.000000000000000e+00, -5.955374020107652e-02, -6.128666325332278e-02, 0.000000000000000e+00, -6.038519796219390e-02, -6.102541886643514e-02, 0.000000000000000e+00, -6.012306593397261e-02, -6.078247682099185e-02, 0.000000000000000e+00, -5.988400889292641e-02, -6.090670387307656e-02, 0.000000000000000e+00, -6.000627446067169e-02, -6.090670387307656e-02, 0.000000000000000e+00, -6.000627446067169e-02, -6.663664057649364e-02, 0.000000000000000e+00, -6.582720472963580e-02, -9.146248366356850e-02, 0.000000000000000e+00, -9.049749415439287e-02, -8.757692011995799e-02, 0.000000000000000e+00, -8.649870085056137e-02, -8.069060396437190e-02, 0.000000000000000e+00, -7.965785680248308e-02, -8.443428484367131e-02, 0.000000000000000e+00, -8.343159303785888e-02, -8.443428484367131e-02, 0.000000000000000e+00, -8.343159303785888e-02, -3.030034830814818e-02, 0.000000000000000e+00, -3.061503691712567e-02, -5.234346592832085e-01, 0.000000000000000e+00, -5.193426108534887e-01, -3.950002423043392e-01, 0.000000000000000e+00, -3.954120819107545e-01, -2.470019574174211e-01, 0.000000000000000e+00, -2.418780551726745e-01, -3.369095163466627e-01, 0.000000000000000e+00, -3.397344740736413e-01, -3.369095163466630e-01, 0.000000000000000e+00, -3.397344740736414e-01, -1.064793329349081e-01, 0.000000000000000e+00, -1.070815503523063e-01, -1.318275174859973e+01, 0.000000000000000e+00, -1.277493288903283e+01, -6.491836608790117e+00, 0.000000000000000e+00, -6.255895060555559e+00, -3.395804848087476e-01, 0.000000000000000e+00, -3.677443175250438e-01, -3.648876295338763e+00, 0.000000000000000e+00, -3.832055524440607e+00, -3.648876295338763e+00, 0.000000000000000e+00, -3.832055524440609e+00, -1.686228926561190e+02, 0.000000000000000e+00, -1.540338628926419e+02, -1.287763691741615e+04, 0.000000000000000e+00, -1.093286182003330e+04, -8.464658147947526e+03, 0.000000000000000e+00, -7.688718569821966e+03, -4.327994180705989e+00, 0.000000000000000e+00, -4.679639210746588e+00, -3.760026438452766e+03, 0.000000000000000e+00, -3.334823797716353e+03, -3.760026438452773e+03, 0.000000000000000e+00, -3.334823797716360e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_8_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_8", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.168806034039534e-03, 2.168892030604034e-03, 2.168791076177590e-03, 2.168881154276906e-03, 2.168764454351117e-03, 2.168837023312778e-03, 2.168933652454349e-03, 2.169052718615686e-03, 2.168796362339951e-03, 2.168982068176202e-03, 2.168796362339951e-03, 2.168982068176202e-03, 8.029344553804968e-03, 8.022622604039875e-03, 8.031800169317038e-03, 8.023759181663363e-03, 8.074070015333373e-03, 8.080194793321194e-03, 8.080132319829809e-03, 8.075269968052018e-03, 8.025660201817346e-03, 8.113536653208122e-03, 8.025660201817346e-03, 8.113536653208122e-03, 1.448854434000106e-02, 1.486141708181618e-02, 1.441597867514018e-02, 1.478983486126236e-02, 1.310245323065333e-02, 1.333595998216562e-02, 1.512733094468798e-02, 1.554218729227552e-02, 1.454464139044514e-02, 1.528502892262428e-02, 1.454464139044514e-02, 1.528502892262428e-02, 6.547987822911727e-02, 8.585457708467220e-02, 6.720622425201286e-02, 9.044380622637377e-02, 1.924441591029171e-03, 2.973049531129885e-03, 1.725702194381458e-02, 2.449030411863111e-02, 6.199145777667722e-02, 6.191825847978979e-03, 6.199145777667703e-02, 6.191825847979037e-03, 9.262026640580856e-04, 9.985647050499561e-04, 9.748821680555451e-04, 1.067915796491598e-03, 3.312140520331608e-03, 3.727419155582052e-03, 3.917921318593250e-04, 3.999785600434293e-04, 7.708350568305192e-04, 4.090655842133823e-04, 7.708350568305204e-04, 4.090655842133830e-04, 8.577775463882881e-03, 8.580402968546693e-03, 8.566190997170774e-03, 8.569202367310375e-03, 8.577234571424786e-03, 8.580091839244948e-03, 8.567290574843183e-03, 8.569913156261447e-03, 8.571767529335595e-03, 8.574767322623141e-03, 8.571767529335595e-03, 8.574767322623141e-03, 1.826903751243591e-02, 1.838406122171527e-02, 1.890797073520157e-02, 1.899916288702288e-02, 1.824303067074945e-02, 1.835849090081385e-02, 1.884219970795957e-02, 1.896099536874040e-02, 1.864511471613437e-02, 1.872074952747931e-02, 1.864511471613437e-02, 1.872074952747931e-02, 6.810485564873851e-02, 6.898737365719099e-02, 6.058766927344737e-02, 6.079795110415612e-02, 5.540457058416046e-02, 6.251937556448714e-02, 5.543649105597506e-02, 5.868959265496626e-02, 6.860472727544889e-02, 6.830263981739254e-02, 6.860472727544886e-02, 6.830263981739254e-02, 1.005535127141388e-02, 9.932056339084120e-03, 3.694382951122979e-02, 3.681658088853634e-02, 8.183962077602200e-03, 9.694923148103935e-03, 1.745960029708811e-02, 1.747095632882549e-02, 1.641555334368700e-02, 2.455328161892439e-02, 1.641555334368707e-02, 2.455328161892449e-02, 1.439924717688067e-04, 1.510415373535340e-04, 2.985727969693113e-04, 2.736208493744610e-04, 7.320294664596571e-04, 8.031908876649834e-04, 5.439402037930869e-03, 6.725255903052552e-03, 1.443675225171869e-04, 9.470389984539975e-04, 1.443675225171855e-04, 9.470389984539937e-04, 6.486934953690057e-02, 6.454185458916449e-02, 6.909658864239683e-02, 6.871231507775589e-02, 6.764027359387871e-02, 6.726536971357759e-02, 6.639954270790772e-02, 6.605983035485759e-02, 6.702215623403789e-02, 6.666516476773496e-02, 6.702215623403789e-02, 6.666516476773496e-02, 6.585060322468435e-02, 6.560002656525842e-02, 9.479260677700546e-02, 9.464772259841518e-02, 9.181708613957359e-02, 9.140738307933231e-02, 8.299893432205532e-02, 8.263625833453955e-02, 8.780400564276923e-02, 8.751891320672972e-02, 8.780400564276929e-02, 8.751891320672978e-02, 5.580085459387240e-02, 5.639137619564598e-02, 5.522297218711873e-02, 5.572563687238880e-02, 6.948227581286735e-02, 7.171722116580626e-02, 8.409660175653279e-02, 8.336155120508067e-02, 8.627004014133875e-02, 8.679828737220190e-02, 8.627004014133874e-02, 8.679828737220194e-02, 8.305248531375437e-02, 8.530991929338758e-02, 3.771571587099131e-03, 3.689413685821374e-03, 4.170650743691239e-03, 4.470659398939093e-03, 9.612135343080651e-02, 1.124503004674304e-01, 9.404019657566988e-03, 1.188393197806033e-02, 9.404019657567054e-03, 1.188393197806033e-02, 6.017299331247195e-04, 6.009096599680928e-04, 3.405286947868522e-05, 2.182222744949744e-05, 3.996981468072136e-04, 4.357498519700183e-04, 1.003526169226514e-02, 1.223993758138619e-02, 2.638848222392553e-04, 8.825298750213845e-04, 2.638848222392569e-04, 8.825298750213883e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
