
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_r4scan_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r4scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.318080644707313e+01, -2.318087551331115e+01, -2.318123400133796e+01, -2.318020751283635e+01, -2.318073802484102e+01, -2.318073802484102e+01, -3.400504478841456e+00, -3.400590062901037e+00, -3.403166011261186e+00, -3.404197336558052e+00, -3.402978981385566e+00, -3.402978981385566e+00, -5.932193003809817e-01, -5.925302498526233e-01, -5.768788340580550e-01, -5.878435944355896e-01, -5.847974042393616e-01, -5.847974042393616e-01, -1.797571946710338e-01, -1.817759533580958e-01, -6.488371494778797e-01, -1.141824345916971e-01, -1.364856604662056e-01, -1.364856604662056e-01, -2.639027681523747e-03, -2.816655287317441e-03, -2.406475901289740e-02, -1.214929650320639e-03, -1.701764114688210e-03, -1.701764114688210e-03, -5.667956216914368e+00, -5.669061829733382e+00, -5.668033269102462e+00, -5.669008277436959e+00, -5.668503180230235e+00, -5.668503180230235e+00, -2.075728531341618e+00, -2.098976443780069e+00, -2.069395054570713e+00, -2.090150887476132e+00, -2.091826883902540e+00, -2.091826883902540e+00, -6.151876808205629e-01, -6.677676963515004e-01, -5.446555508039623e-01, -5.572156395577775e-01, -6.275261011156731e-01, -6.275261011156731e-01, -7.425734701904359e-02, -1.729953903620199e-01, -6.786882207880231e-02, -1.913338086440325e+00, -9.414168248027695e-02, -9.414168248027695e-02, -8.701425735154152e-04, -1.195189102840300e-03, -9.823714709761022e-04, -4.320276923896971e-02, -1.180765646145556e-03, -1.180765646145556e-03, -6.397611924572483e-01, -6.361265648546249e-01, -6.374063826362909e-01, -6.384593963139914e-01, -6.379310294569895e-01, -6.379310294569895e-01, -6.197977823219784e-01, -5.319379661937136e-01, -5.573745693592063e-01, -5.823797985079725e-01, -5.694364405816504e-01, -5.694364405816504e-01, -6.907059134859315e-01, -2.283398446296160e-01, -2.720983820104522e-01, -3.514856788382076e-01, -3.120608707880598e-01, -3.120608707880598e-01, -4.765653140156824e-01, -2.285255829143431e-02, -3.302557271867686e-02, -3.447131147267433e-01, -5.818746413195280e-02, -5.818746413195280e-02, -4.035843803445649e-03, -2.203058368525025e-04, -5.832033387441646e-04, -5.505690166053804e-02, -1.085025097529806e-03, -1.085025097529805e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_r4scan_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r4scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.014673702236802e+01, -3.014684521097597e+01, -3.014733436606075e+01, -3.014572572124073e+01, -3.014656744378171e+01, -3.014656744378171e+01, -4.662056650771982e+00, -4.662786171329983e+00, -4.682592645265273e+00, -4.684348306297375e+00, -4.679868780109909e+00, -4.679868780109909e+00, -8.271947264552356e-01, -8.259823154895249e-01, -7.980595845437110e-01, -8.099490304021595e-01, -8.070843270310363e-01, -8.070843270310363e-01, -1.738087750110225e-01, -1.787259242325050e-01, -8.557234343699748e-01, -1.408763197854409e-01, -1.426761122089371e-01, -1.426761122089370e-01, 1.543362521078415e-03, -3.146957921875328e-03, -3.740377266591842e-02, -2.226936789560704e-03, -3.051778467311758e-03, -3.051778467311760e-03, -7.405287502893018e+00, -7.407707437245103e+00, -7.405408662515410e+00, -7.407544525794922e+00, -7.406509266216823e+00, -7.406509266216823e+00, -2.541641235597253e+00, -2.578054182380583e+00, -2.521816481546632e+00, -2.555922771983113e+00, -2.571636552308188e+00, -2.571636552308188e+00, -8.185478760186303e-01, -9.251293497464282e-01, -7.540586976931180e-01, -8.283048459679596e-01, -8.357266618544605e-01, -8.357266618544605e-01, -1.000866914722109e-01, -1.131933217412921e-01, -9.418135969795181e-02, -2.842289740424206e+00, -9.051099532836654e-02, -9.051099532836732e-02, -1.613960748580051e-03, -2.198214696563820e-03, -1.787395679197907e-03, -6.386718759423145e-02, -2.154606407665382e-03, -2.154606407665382e-03, -8.540504422447378e-01, -8.432390330920712e-01, -8.470065802392727e-01, -8.501555132342205e-01, -8.485779705352710e-01, -8.485779705352710e-01, -8.337942378792346e-01, -6.727968606840526e-01, -7.179043596768208e-01, -7.628844944360937e-01, -7.399934738743748e-01, -7.399934738743748e-01, -9.722211764036585e-01, -2.173568527708369e-01, -2.936677334351968e-01, -4.561673428074196e-01, -3.717674763711682e-01, -3.717674763711682e-01, -6.060064718584125e-01, -3.153647177109989e-02, -5.021607353757016e-02, -4.543211623594271e-01, -7.696120876066015e-02, -7.696120876066018e-02, -7.132305967170374e-03, -4.177279349011043e-04, -1.069631213025326e-03, -5.542307202064351e-02, -1.979283624748449e-03, -1.979283624748447e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_r4scan_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r4scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.296078833791770e-09, -6.296017950881135e-09, -6.295509844081656e-09, -6.296409432855471e-09, -6.295971969404971e-09, -6.295971969404971e-09, -1.152505093806687e-05, -1.154861227483239e-05, -1.217795418808037e-05, -1.221341623056106e-05, -1.209483666637800e-05, -1.209483666637800e-05, -4.317374705900607e-03, -4.305011754505495e-03, -4.033934771910675e-03, -4.174406323208348e-03, -4.136996995923240e-03, -4.136996995923240e-03, -1.608766391864297e+00, -1.590256232094087e+00, -1.325379611539181e-03, -1.104468363338112e+00, -1.907003484692603e+00, -1.907003484692608e+00, -2.301982566973652e+03, -4.944742815151052e+02, 1.527639745685970e+00, 4.293995466248094e+02, 2.923417962206859e+02, 2.923417962206880e+02, -1.774391248734033e-06, -1.775103098372734e-06, -1.774270784738648e-06, -1.774905149958947e-06, -1.774829078235765e-06, -1.774829078235765e-06, -1.015943108762694e-04, -9.416198967863080e-05, -9.953772898651562e-05, -9.254747532637665e-05, -9.834086086707809e-05, -9.834086086707809e-05, -1.688651612457289e-02, -1.447261650237747e-02, -2.696147576244498e-02, -3.249583904557791e-02, -1.564351791139108e-02, -1.564351791139108e-02, -8.212905165918064e-01, -1.747261661988571e+00, -6.185077925736957e-01, -2.227613458893458e-04, -3.682053132142608e+00, -3.682053132142676e+00, 8.266916712042582e+02, 5.097750738429320e+02, 2.213189172291697e+03, 4.699365310148000e-02, 1.067793124358697e+03, 1.067793124358695e+03, -1.305825224898738e-02, -1.306534467016192e-02, -1.310164851243109e-02, -1.309751772442964e-02, -1.310366680148234e-02, -1.310366680148234e-02, -1.548823844779205e-02, -2.069065293991875e-02, -1.863848421214388e-02, -1.732568897390602e-02, -1.800848593681316e-02, -1.800848593681317e-02, -1.313636013324102e-02, -5.884481097100519e-01, -3.366608398542107e-01, -1.379687763836632e-01, -2.112176819160883e-01, -2.112176819160885e-01, -4.162405184301415e-02, -5.958794688679044e+00, 5.691971491835238e-01, -1.633833070142501e-01, -2.142768975766647e+00, -2.142768975766637e+00, 8.201811508898415e+01, 1.219088903194949e+04, 1.935275616397140e+03, -7.836241290363512e+00, 1.380237956473958e+03, 1.380237956473962e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_r4scan_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r4scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_r4scan_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r4scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.011864036371393e-03, 1.011862153262885e-03, 1.011824707144546e-03, 1.011851842468235e-03, 1.011841779479088e-03, 1.011841779479088e-03, 6.376832164120918e-03, 6.393124762461765e-03, 6.833078955243188e-03, 6.881748601517879e-03, 6.784275896900983e-03, 6.784275896900983e-03, 1.501128661098502e-02, 1.496731188250609e-02, 1.411653538493085e-02, 1.540661422015102e-02, 1.499756872718959e-02, 1.499756872718959e-02, 1.381060338665662e-01, 1.424270194764604e-01, 2.515175985765332e-03, 4.358585747583935e-02, 1.012699938777589e-01, 1.012699938777587e-01, 8.576318536581435e-03, 2.653322696923061e-03, 1.616978281486886e-03, 1.345872084244104e-05, 6.477010634488214e-05, 6.477010634487986e-05, 4.129453309274553e-03, 4.132462223501058e-03, 4.129324522189943e-03, 4.131991525213235e-03, 4.131111902114525e-03, 4.131111902114525e-03, 1.254113906996818e-02, 1.192990088080825e-02, 1.214664933491318e-02, 1.156320874475612e-02, 1.238318715133420e-02, 1.238318715133420e-02, 5.299369297012869e-02, 5.478490897982894e-02, 6.420262218669742e-02, 7.508249463375349e-02, 5.140411424028744e-02, 5.140411424028744e-02, 1.389741308544262e-02, 1.491356090549979e-01, 9.916921368699143e-03, 2.145659465637519e-02, 7.641151098424093e-02, 7.641151098424008e-02, 5.312529413163712e-07, 2.449592431487740e-06, 2.286361583450254e-05, 3.713393823081896e-03, 5.633447582605290e-06, 5.633447582605331e-06, 4.252111236457096e-02, 4.190383415414296e-02, 4.224897194461671e-02, 4.242947606320477e-02, 4.235290648608447e-02, 4.235290648608447e-02, 4.634285136243397e-02, 4.143743532999377e-02, 4.227506194982924e-02, 4.366739537194076e-02, 4.311269865742141e-02, 4.311269865742141e-02, 5.548306348058563e-02, 1.026771354164686e-01, 1.007485128851635e-01, 9.085133488470361e-02, 9.469062402131453e-02, 9.469062402131459e-02, 6.237114248550710e-02, 6.013689784738411e-03, 2.227927935041359e-03, 9.591607158556754e-02, 1.736123304799114e-02, 1.736123304799109e-02, 8.455597130112117e-06, 3.214229256859312e-08, 3.750725442308451e-05, 4.341046379850937e-02, 1.143368448239160e-05, 1.143368448239153e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
