
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_5_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_5", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.067441551825148e+01, -2.067449629545629e+01, -2.067489079036746e+01, -2.067357051294785e+01, -2.067445779166042e+01, -2.067445779166042e+01, -3.170523603591171e+00, -3.170554693423002e+00, -3.171610988361121e+00, -3.171453558038469e+00, -3.170547313551666e+00, -3.845267684494651e+00, -6.117554185333179e-01, -7.531899379812677e-01, -7.344668950916952e-01, -7.397217751132292e-01, -7.536393679046779e-01, -7.536393679046779e-01, -2.066660771110871e-01, -2.093157033831881e-01, -7.504424961624041e-01, -1.495825767771772e-01, -2.074641423297484e-01, -2.074641423297484e-01, -1.143418380021763e-02, -1.197691086127389e-02, -4.873796154904764e-02, -5.484776511940122e-03, -1.185210174764170e-02, -1.185210174764170e-02, -5.490670409071073e+00, -5.490840917166428e+00, -5.490684196969175e+00, -5.134289292526832e+00, -5.490762252811586e+00, -5.490762252811586e+00, -1.773703637349116e+00, -1.787159960401141e+00, -1.768333631704904e+00, -1.778707511367177e+00, -1.789963500434200e+00, -2.193597696723061e+00, -6.304212241114372e-01, -6.709478191492811e-01, -6.042510078209535e-01, -6.203221987693425e-01, -6.499563016188058e-01, -5.682916355928140e-01, -9.845734059443563e-02, -2.084425399493821e-01, -9.705717822887866e-02, -2.066523863036147e+00, -1.270042562971039e-01, -1.270042562971039e-01, -4.906340462175630e-03, -6.046891164507871e-03, -4.532187391346453e-03, -6.224747888677075e-02, -5.108933622065244e-03, -5.509645604872963e-03, -6.227044433276751e-01, -6.221998278554911e-01, -6.053699261598642e-01, -6.225118853562650e-01, -6.224429648713176e-01, -6.224429648713176e-01, -6.036958836586896e-01, -5.477391374158868e-01, -5.643108527693489e-01, -5.791039515697954e-01, -5.716144666894244e-01, -5.145891176369767e-01, -7.075598303033624e-01, -2.153611898017410e-01, -3.099846658018147e-01, -3.183314751148617e-01, -3.479546654715018e-01, -3.479546654715017e-01, -4.144153065677292e-01, -4.513002076060398e-02, -6.114235183067158e-02, -3.659522996899423e-01, -8.019895838184853e-02, -8.888385041518862e-02, -1.340054272338314e-02, -1.655499688187290e-03, -3.144869208557764e-03, -8.479611040030670e-02, -4.682455566125917e-03, -4.682455566125912e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_5_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_5", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.945614749883630e+01, -2.945623684092896e+01, -2.945668640990827e+01, -2.945522416512697e+01, -2.945619416500120e+01, -2.945619416500120e+01, -4.403928326248947e+00, -4.404083672893873e+00, -4.408910911222681e+00, -4.407394482492279e+00, -4.403992398354769e+00, -4.139231133405365e+00, -7.673746977370018e-01, -8.248946386153946e-01, -8.133200452916619e-01, -8.150858092482495e-01, -8.251645051712232e-01, -8.251645051712232e-01, -2.291158556091921e-01, -2.312026090809674e-01, -9.205755731756791e-01, -1.776284007143508e-01, -2.297585510358273e-01, -2.297585510358273e-01, -1.398629994576969e-02, -1.464971867392897e-02, -5.941952011737886e-02, -6.710865957968772e-03, -1.449704897104923e-02, -1.449704897104924e-02, -6.777942238834080e+00, -6.782053731612081e+00, -6.778390946868837e+00, -7.214472799676895e+00, -6.780012690606465e+00, -6.780012690606465e+00, -2.397748055178595e+00, -2.429249870873226e+00, -2.384575929310558e+00, -2.409246459712704e+00, -2.436442127457372e+00, -2.348540773444569e+00, -7.039816920730356e-01, -8.009094184551389e-01, -6.587287633254250e-01, -7.045625352179959e-01, -7.413525476548098e-01, -8.164563577063936e-01, -1.270844095315350e-01, -2.400512662599400e-01, -1.250709351660703e-01, -2.362446075463935e+00, -1.513276118426921e-01, -1.513276118426921e-01, -6.541022700335041e-03, -7.398517992744524e-03, -5.545202959732544e-03, -8.188763131214712e-02, -6.811039651269914e-03, -6.741217088883333e-03, -8.149038707008702e-01, -7.991957452373262e-01, -8.269662407010676e-01, -8.091624594876310e-01, -8.069805083483336e-01, -8.069805083483336e-01, -7.847765276506271e-01, -6.071285337018337e-01, -6.516107313193462e-01, -7.002605617640382e-01, -6.746934911963886e-01, -7.358965770979120e-01, -8.273205356576748e-01, -2.650343546386810e-01, -3.379235886340274e-01, -4.318390789339771e-01, -3.732081866550750e-01, -3.732081866550749e-01, -5.794219479815915e-01, -5.505590858533677e-02, -7.442166227624115e-02, -3.946308020882667e-01, -1.039502882801459e-01, -1.072976818884352e-01, -1.639230893807913e-02, -2.025657049761975e-03, -3.847963921743254e-03, -1.023674905871913e-01, -5.729171167835748e-03, -5.729171167835751e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_5_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_5", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.239929352177441e-08, -1.239923728730877e-08, -1.239889181075423e-08, -1.239982112104232e-08, -1.239926457162728e-08, -1.239926457162728e-08, -1.158551267146251e-05, -1.158719594386760e-05, -1.163612592996230e-05, -1.161347702774405e-05, -1.158575950020466e-05, -1.385731442718732e-05, -4.124870536033380e-03, -5.321275872948817e-03, -5.034081896802251e-03, -5.250514812081952e-03, -5.328747862061774e-03, -5.328747862061774e-03, -7.899104043481341e-01, -7.912271833771422e-01, -1.184306608299477e-03, -6.271916096806323e-01, -7.897160992449237e-01, -7.897160992449237e-01, -1.471989488769469e+02, -1.337696013299237e+02, -5.222673808518290e+00, -3.775637178561276e+02, -1.397052132874243e+02, -1.397052132874242e+02, -3.975522170726627e-06, -3.974673177722037e-06, -3.975443483772772e-06, -3.727794085195595e-06, -3.975079386869297e-06, -3.975079386869297e-06, -9.893095076081193e-05, -9.933015593680793e-05, -9.861857959026098e-05, -9.902348176517053e-05, -9.957713949510730e-05, -1.208742929775135e-04, -2.178016921049300e-02, -1.782599854422988e-02, -2.434582087529698e-02, -2.374921974461591e-02, -1.978627133447530e-02, -1.750125892323045e-02, -4.977145804976313e-01, -3.993366648470953e-01, -5.674449366807055e-01, -1.940043006422581e-04, -1.044495401492498e+00, -1.044495401492498e+00, -1.538005373493986e+02, -3.491424531698663e+02, -1.232427947105140e+03, -9.350772041518232e-01, -1.433007129992316e+02, -4.667493716682276e+02, -2.347972625815236e-02, -2.380405144909946e-02, -2.305315381586287e-02, -2.360619988654982e-02, -2.365165891409253e-02, -2.365165891409253e-02, -2.668828408229691e-02, -3.771278462752628e-02, -3.515506863650391e-02, -3.216558037889076e-02, -3.374362404591539e-02, -3.060725604330548e-02, -1.432166722711893e-02, -1.995609697386037e-01, -1.980472980130706e-01, -9.745120126076610e-02, -1.633345919907601e-01, -1.633345919907601e-01, -4.170145965855734e-02, -5.806745099854954e+00, -3.117127265065909e+00, -1.713040453791116e-01, -9.245198977490582e-01, -1.975575674254889e+00, -6.688722511650383e+01, -4.890351702283827e+03, -1.901082046667712e+03, -2.376340491776594e+00, -7.660029030377017e+02, -7.660029030377034e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_5_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_5", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.108279205194443e-03, 1.108292955479384e-03, 1.108350792977624e-03, 1.108127377476128e-03, 1.108286464198241e-03, 1.108286464198241e-03, 1.329236983998828e-03, 1.330395571317485e-03, 1.365314597634396e-03, 1.351658143868245e-03, 1.329552248927192e-03, 7.360074876945759e-03, -4.514885757804889e-03, 2.319297623079978e-02, 2.073217789147599e-02, 2.191039358388458e-02, 2.325578269493279e-02, 2.325578269493279e-02, 7.260962378737408e-02, 7.511327414715589e-02, -3.480663916661932e-03, 2.379944251486172e-02, 7.331146066720795e-02, 7.331146066720795e-02, 2.470644743042909e-03, 2.580543284889539e-03, 6.830489604508115e-03, 6.990095225056615e-04, 2.611671218274826e-03, 2.611671218274824e-03, 6.409103909748186e-03, 6.411468295001209e-03, 6.409371800439315e-03, 5.347362625274923e-03, 6.410283526356200e-03, 6.410283526356200e-03, 6.300480118169047e-04, 9.140786952092938e-04, 5.084042582266592e-04, 7.292567510216825e-04, 9.896213205171419e-04, 1.207188621425350e-02, 5.042827592794673e-02, 5.114017851589968e-02, 4.973019038651184e-02, 5.257526343466150e-02, 5.045119278620103e-02, 2.790399802944591e-02, -2.510853526446493e-03, 3.975046914844123e-02, -2.815529027823345e-03, 1.591186520340772e-02, 2.430932540099343e-02, 2.430932540099343e-02, -6.573564168702469e-07, 8.662259717949689e-04, 1.287431151319973e-03, -6.806370690962048e-04, -7.570303622940470e-07, 8.759556480649905e-04, 5.866572918565967e-02, 5.804672122948411e-02, 5.509699049799139e-02, 5.844383540154387e-02, 5.835796630315254e-02, 5.835796630315254e-02, 6.026877128278681e-02, 5.724070333077148e-02, 5.894130423592675e-02, 5.986042109152461e-02, 5.945131793326504e-02, 4.100737707015124e-02, 4.761210831386765e-02, -1.296839947542251e-02, 5.965540987104341e-02, 4.526756751371964e-03, 6.682658755675784e-02, 6.682658755675772e-02, 1.265927969239959e-02, 6.023467252829188e-03, 8.067099272309471e-03, 7.826450165770739e-02, -2.335361261925542e-03, 1.579977354172844e-02, 1.806990543384340e-03, 2.489454253522334e-04, 6.634445354179499e-04, 1.650137579757837e-02, 8.824108716793724e-04, 8.824108716793750e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
