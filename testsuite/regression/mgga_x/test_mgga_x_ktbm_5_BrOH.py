
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_5_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_5", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.258872424290025e+01, -2.258876847987656e+01, -2.258907694925987e+01, -2.258835455171877e+01, -2.258874658900418e+01, -2.258874658900418e+01, -3.452943575247972e+00, -3.452971641471252e+00, -3.454066940622586e+00, -3.455696463570654e+00, -3.452956361708968e+00, -3.452956361708968e+00, -6.595156503008027e-01, -6.592557204952082e-01, -6.532664595960106e-01, -6.599880454380371e-01, -6.594211672995637e-01, -6.594211672995637e-01, -2.015879074657651e-01, -2.034745851113579e-01, -7.741416795159324e-01, -1.425838396771759e-01, -2.021029841519413e-01, -2.021029841519413e-01, -1.140909771070755e-02, -1.194378570211701e-02, -4.801662179936303e-02, -5.318942630682459e-03, -1.182362104281845e-02, -1.182362104281845e-02, -5.488244341410359e+00, -5.488442162893430e+00, -5.488291744281457e+00, -5.488444139573832e+00, -5.488308723848268e+00, -5.488308723848268e+00, -2.124599593719340e+00, -2.143819812489276e+00, -2.125025944299605e+00, -2.140353648651452e+00, -2.136929217318697e+00, -2.136929217318697e+00, -5.916011801183358e-01, -6.261222602603451e-01, -5.517220980684556e-01, -5.610273660685988e-01, -6.174285585026081e-01, -6.174285585026081e-01, -1.068126340619584e-01, -2.052777385302265e-01, -1.054326911356922e-01, -1.855701122696977e+00, -1.241886304722384e-01, -1.241886304722384e-01, -5.198828794669057e-03, -5.897782767473040e-03, -4.477554634906332e-03, -6.578997956360645e-02, -5.341360206311287e-03, -5.341360206311286e-03, -6.172898447793351e-01, -6.169593690705110e-01, -6.170683073079274e-01, -6.171577759547276e-01, -6.171099308279910e-01, -6.171099308279910e-01, -5.932141611250873e-01, -5.426557055480797e-01, -5.572412617395246e-01, -5.703850758100215e-01, -5.632911589872190e-01, -5.632911589872190e-01, -6.499053556655997e-01, -2.588852371129082e-01, -3.010774779103750e-01, -3.637396028867946e-01, -3.330254692058683e-01, -3.330254692058683e-01, -4.766718910185987e-01, -4.473232704163500e-02, -6.002305905619539e-02, -3.377643481031239e-01, -8.705614106649312e-02, -8.705614106649312e-02, -1.300731734145990e-02, -1.593292746399075e-03, -3.116777668721878e-03, -8.293780519165143e-02, -4.534170239367609e-03, -4.534170239367602e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_5_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_5", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.732875299426294e+01, -2.732886550726853e+01, -2.732932782758127e+01, -2.732748454825851e+01, -2.732881268220305e+01, -2.732881268220305e+01, -4.320194888691591e+00, -4.320280933139986e+00, -4.322977795601416e+00, -4.321614634208658e+00, -4.320243532159814e+00, -4.320243532159814e+00, -7.941339281508227e-01, -7.934706346913393e-01, -7.789336036064238e-01, -7.850693476682015e-01, -7.938921869038430e-01, -7.938921869038430e-01, -2.274104605156054e-01, -2.293862570736774e-01, -9.424294190629567e-01, -1.746886386843703e-01, -2.279930550761767e-01, -2.279930550761767e-01, -1.399393590225818e-02, -1.465974218627867e-02, -5.953579659464556e-02, -6.758407054523725e-03, -1.450567598564300e-02, -1.450567598564302e-02, -6.781073920885523e+00, -6.785152496740029e+00, -6.781479512472781e+00, -6.784651418874438e+00, -6.783181003366838e+00, -6.783181003366838e+00, -2.348552966859435e+00, -2.362576800327290e+00, -2.340709113980232e+00, -2.351232826867646e+00, -2.369008392845206e+00, -2.369008392845206e+00, -7.378359894824067e-01, -8.520975169991090e-01, -6.930582658410162e-01, -7.598026876911558e-01, -7.738456958863773e-01, -7.738456958863773e-01, -1.314706498595066e-01, -2.385487832855053e-01, -1.296396255624621e-01, -2.563760817664782e+00, -1.503782683200753e-01, -1.503782683200753e-01, -6.501657680044851e-03, -7.442175579461249e-03, -5.561922218458563e-03, -8.279896418093607e-02, -6.789304067468980e-03, -6.789304067468974e-03, -8.220983029700462e-01, -8.061388022725604e-01, -8.118521281385657e-01, -8.162758405147785e-01, -8.140635535497649e-01, -8.140635535497649e-01, -7.985821978069100e-01, -6.115602991782102e-01, -6.593266904825990e-01, -7.110085798572925e-01, -6.844152756239114e-01, -6.844152756239115e-01, -8.886693534595111e-01, -2.918665960779351e-01, -3.362854933057689e-01, -4.260701724337994e-01, -3.745965570016025e-01, -3.745965570016023e-01, -5.537771369712281e-01, -5.513243304640213e-02, -7.453331336687666e-02, -4.092136644167884e-01, -1.070652286882356e-01, -1.070652286882355e-01, -1.650123969094931e-02, -2.042977422904189e-03, -3.856698388587364e-03, -1.021280821685166e-01, -5.771380282200826e-03, -5.771380282200813e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_5_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_5", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.346879808401102e-08, -1.346871425890711e-08, -1.346827887914092e-08, -1.346966055735402e-08, -1.346875429051967e-08, -1.346875429051967e-08, -1.253397892842916e-05, -1.253574922292655e-05, -1.258756608826070e-05, -1.256948552470076e-05, -1.253419345702018e-05, -1.253419345702018e-05, -4.542627140444413e-03, -4.534129492808594e-03, -4.319281850710114e-03, -4.551168702728679e-03, -4.540083480823130e-03, -4.540083480823130e-03, -7.652866067958338e-01, -7.639190673976106e-01, -1.257365133826353e-03, -5.420242045916108e-01, -7.640147129629216e-01, -7.640147129629216e-01, -1.452859127386620e+02, -1.315763820974605e+02, -4.799846431463132e+00, -3.012255064210127e+02, -1.377175040585350e+02, -1.377175040585349e+02, -3.973832515135076e-06, -3.973002351351985e-06, -3.973777209603755e-06, -3.973129377907490e-06, -3.973370516927708e-06, -3.973370516927708e-06, -1.177204621790789e-04, -1.181721403976033e-04, -1.178070934224393e-04, -1.182815851124268e-04, -1.178793312116295e-04, -1.178793312116295e-04, -2.054614824541170e-02, -1.670783519994991e-02, -2.239235440079925e-02, -2.166051388114420e-02, -1.887129288868733e-02, -1.887129288868733e-02, -9.217024181619797e-01, -3.885715471539754e-01, -1.036291771323328e+00, -1.757741704710812e-04, -9.751887744736518e-01, -9.751887744736518e-01, -4.458047007893518e+02, -2.930529065109832e+02, -1.140445516123706e+03, -1.978656372283236e+00, -3.713235492781849e+02, -3.713235492781845e+02, -2.327465448433486e-02, -2.360583232599532e-02, -2.349488692126565e-02, -2.340347508280057e-02, -2.344976824156484e-02, -2.344976824156484e-02, -2.622592208072351e-02, -3.738955761884105e-02, -3.474543253244813e-02, -3.170591481173538e-02, -3.328275906672167e-02, -3.328275906672165e-02, -1.323716498157142e-02, -2.639609579717285e-01, -1.916024729456717e-01, -1.107126459088719e-01, -1.562453722609549e-01, -1.562453722609550e-01, -4.742145300796109e-02, -5.525851640577631e+00, -2.818907132298842e+00, -1.589857302270188e-01, -1.810092510234975e+00, -1.810092510234975e+00, -5.394809690697561e+01, -3.612840896104299e+03, -1.796953136626793e+03, -2.163275780023161e+00, -6.026912087332079e+02, -6.026912087332091e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_5_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_5", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_5_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_5", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.483276864072767e-03, 1.483278921057354e-03, 1.483299168193700e-03, 1.483266928126632e-03, 1.483277834915330e-03, 1.483277834915330e-03, 3.759775358261758e-03, 3.760918052867793e-03, 3.796301911750104e-03, 3.798023332565356e-03, 3.759973555967809e-03, 3.759973555967809e-03, 4.518504378146579e-03, 4.530094062375773e-03, 5.073600417156747e-03, 6.141497668691378e-03, 4.524071742793741e-03, 4.524071742793741e-03, 6.009598305017050e-02, 6.067192110098695e-02, -1.072991998035995e-03, 1.229662547604375e-02, 6.009269980955085e-02, 6.009269980955085e-02, 2.389543542764908e-03, 2.473846968364939e-03, 5.408387406479769e-03, 3.868327401425158e-04, 2.517833564679663e-03, 2.517833564679662e-03, 6.401590664233627e-03, 6.404058658728090e-03, 6.401964720347618e-03, 6.403875764097337e-03, 6.402695044289655e-03, 6.402695044289655e-03, 1.027583811434549e-02, 1.064884290198639e-02, 1.034889153142840e-02, 1.065675447509028e-02, 1.043244251092386e-02, 1.043244251092386e-02, 3.800412352998566e-02, 4.086707080947753e-02, 3.054384481251813e-02, 3.413207329019088e-02, 4.116536059201550e-02, 4.116536059201550e-02, 1.070966606414137e-02, 3.464128408893148e-02, 1.156706631407951e-02, 1.013139731444577e-02, 1.853913498327461e-02, 1.853913498327461e-02, 6.163786944253940e-04, 5.494901072029948e-04, 1.055444334940753e-03, 4.805543941889838e-03, 4.809358842989654e-04, 4.809358842989697e-04, 5.771987243668832e-02, 5.701541814213338e-02, 5.726921817300508e-02, 5.746499904613404e-02, 5.736657653252755e-02, 5.736657653252755e-02, 5.824392518128523e-02, 5.499955255959286e-02, 5.631715033428255e-02, 5.723862940561595e-02, 5.664715803422957e-02, 5.664715803422957e-02, 3.493254894082944e-02, 4.648412031334523e-02, 4.858348534975520e-02, 4.287076453035764e-02, 5.037240570827981e-02, 5.037240570827979e-02, 4.482744624248241e-02, 5.266927422454932e-03, 6.044048918196273e-03, 4.952168431259718e-02, 1.181673741115825e-02, 1.181673741115828e-02, 1.026317887901548e-03, 1.115417143756982e-04, 5.746280253307300e-04, 1.206779044046945e-02, 4.701450656841334e-04, 4.701450656841294e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
