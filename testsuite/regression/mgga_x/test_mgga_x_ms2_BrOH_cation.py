
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ms2_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.064152870048146e+01, -2.064165105836440e+01, -2.064218673797343e+01, -2.155975027370049e+01, -2.156047064010902e+01, -2.247976158089811e+01, -3.493557197575660e+00, -3.772010926049751e+00, -3.771230768237984e+00, -3.771887401304587e+00, -3.771424841813802e+00, -3.493082203907359e+00, -6.099686928474300e-01, -6.826910384222475e-01, -7.426297673408792e-01, -6.713485883269914e-01, -5.976126670011903e-01, -7.461689428383369e-01, -1.801401858263662e-01, -1.826751271970808e-01, -8.083368249410995e-01, -1.636560676359820e-01, -1.961818484708218e-01, -1.909500996907667e-01, -8.426223519877528e-03, -7.518806930011014e-03, -4.087932030983982e-02, -4.859960923118833e-03, -6.782430495007172e-03, -6.782430495007173e-03, -5.449099712468650e+00, -5.449556569673029e+00, -5.449118228434642e+00, -5.449521831640539e+00, -5.322962191721871e+00, -5.323066331976969e+00, -2.142246383095058e+00, -2.153668273945354e+00, -2.134186470812238e+00, -2.144161095628273e+00, -1.983842146957156e+00, -2.152456271345417e+00, -5.855052638681446e-01, -6.701155416394455e-01, -5.860804500319383e-01, -6.018919770402829e-01, -5.980252572053284e-01, -6.347568400105399e-01, -1.197486270155672e-01, -1.830476406447760e-01, -1.116355985888119e-01, -2.037887182814058e+00, -1.359270150831544e-01, -1.359270150831544e-01, -3.139381822046833e-03, -4.750977304233930e-03, -3.638044113088979e-03, -6.392454990808269e-02, -4.569829259325388e-03, -4.569829259325389e-03, -6.112662673827587e-01, -6.098761210379835e-01, -6.026438682717785e-01, -6.078569867784698e-01, -6.038527170146577e-01, -6.071764763160562e-01, -5.949818065852975e-01, -4.925009485524571e-01, -5.139063096968949e-01, -5.660020418115876e-01, -5.564664036931815e-01, -5.280246586282402e-01, -6.721212708691238e-01, -2.558091961652054e-01, -2.695275126430822e-01, -3.505790874264759e-01, -3.361732364147276e-01, -3.061864699953563e-01, -4.908066314239837e-01, -3.021852366286841e-02, -6.261567217037226e-02, -3.624732600020859e-01, -9.576472028567673e-02, -9.576472028567673e-02, -7.677833963447921e-03, -1.269980035906593e-03, -1.725540414258144e-03, -6.125747563593485e-02, -4.196719244911780e-03, -3.072598892241621e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ms2_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.100555395584638e+01, -3.100586598324580e+01, -3.100570586163387e+01, -3.100597613935127e+01, -3.100619206276479e+01, -3.100667189502861e+01, -3.100447929247442e+01, -2.892847801837165e+01, -3.100564587665172e+01, -2.892910981472129e+01, -2.892944649279049e+01, -2.892910981472129e+01, -4.618996683282393e+00, -4.402656905578742e+00, -4.619039181948007e+00, -4.618934545310250e+00, -4.619845847678717e+00, -4.620039011809063e+00, -4.619941713328917e+00, -4.620007288710176e+00, -4.618161818912724e+00, -4.620822666604779e+00, -4.402039444191958e+00, -4.620822666604779e+00, -8.264094248954053e-01, -8.307197153907141e-01, -8.248311856725379e-01, -8.845862619642957e-01, -8.628719798936030e-01, -8.571719164020958e-01, -8.656997837544307e-01, -8.106802951234927e-01, -8.377771206846351e-01, -7.762198772528016e-01, -8.919211539931901e-01, -8.377342924558238e-01, -2.063489825366293e-01, -2.336382230714681e-01, -2.090766776140903e-01, -2.373787317363041e-01, -1.029985809367676e+00, -9.675135130550712e-01, -1.874426176823970e-01, -1.872169358606279e-01, -2.361408639015188e-01, -1.503463107815858e-01, -2.361408639015186e-01, -1.144249029289130e-01, -1.085393597424972e-02, -1.153142255076756e-02, -7.358753432389021e-03, -1.217894783888287e-02, -4.091820391208741e-02, -6.445130703417153e-02, -6.531062127101276e-03, -6.422315451832449e-03, -9.685858139035801e-03, -5.515394033484105e-03, -9.685858139035802e-03, -5.515394033484107e-03, -7.086028555212493e+00, -7.084335105379271e+00, -7.087979756575780e+00, -7.086220042124663e+00, -7.086152933476552e+00, -7.084411368416679e+00, -7.087826697003955e+00, -7.086123283275460e+00, -7.486177418794540e+00, -7.085279838555363e+00, -7.087015854626528e+00, -7.484390940115124e+00, -2.589646628080142e+00, -2.589698491507291e+00, -2.610571948764626e+00, -2.609994899782409e+00, -2.572061513524788e+00, -2.577126246368392e+00, -2.590098796802344e+00, -2.595428433452613e+00, -2.614615953620943e+00, -2.489403334062902e+00, -2.614615953620943e+00, -2.602174301448766e+00, -7.878017552304332e-01, -7.335258847856718e-01, -8.635928117148421e-01, -8.644685375858729e-01, -7.083694559242553e-01, -7.372504236165227e-01, -7.434794832699857e-01, -7.702930248417319e-01, -8.221564623969612e-01, -7.295538812027572e-01, -8.221564623969613e-01, -7.790702324953533e-01, -1.433981422710401e-01, -1.444773610500211e-01, -2.090387149308914e-01, -2.373560233294879e-01, -1.326294259472659e-01, -1.376769778645949e-01, -2.583264039938811e+00, -2.582139679582984e+00, -1.557957695597682e-01, -1.590729994973481e-01, -1.557957695597683e-01, -1.590729994973481e-01, -3.166871115580014e-03, -5.092938336351900e-03, -6.284306303176892e-03, -6.379502402956144e-03, -4.698295784195413e-03, -4.975138882111906e-03, -9.675209102056491e-02, -6.850935411167559e-02, -4.800169672519236e-03, -6.587946402121094e-03, -4.800169672519236e-03, -6.587946402121118e-03, -8.076663937606487e-01, -8.108685203936413e-01, -8.003571217005598e-01, -8.035923437146555e-01, -8.160511299855062e-01, -8.188367084081447e-01, -8.147052465643944e-01, -8.082394640165562e-01, -8.153201427650304e-01, -8.181596414524694e-01, -8.153201427650304e-01, -8.071885346922348e-01, -7.856236278550899e-01, -7.883102182344207e-01, -6.561103056794721e-01, -6.127552070307507e-01, -6.920793683801756e-01, -6.821663676857851e-01, -7.291584580652259e-01, -7.318073350946215e-01, -7.102244367217108e-01, -7.129976078863285e-01, -7.102244367217108e-01, -7.492291574081765e-01, -9.020343469334431e-01, -9.620971500528547e-01, -2.909027584057975e-01, -2.924425907203594e-01, -3.215207121700505e-01, -3.486366966845536e-01, -4.384903255320376e-01, -4.611329467928612e-01, -3.985267416048251e-01, -3.984088535723201e-01, -3.985267416048250e-01, -3.775962496040814e-01, -6.003029031302131e-01, -6.049678593010156e-01, -4.015281001652406e-02, -4.042754789608602e-02, -7.934507212960730e-02, -8.165341593984131e-02, -4.416315987249221e-01, -4.499029040887533e-01, -1.144689293629517e-01, -1.179909383042586e-01, -1.144689293629514e-01, -1.179909383042588e-01, -1.004530093534905e-02, -1.040948739530966e-02, -1.691332252883949e-03, -1.695197784073340e-03, -2.223516908992041e-03, -2.364889723580375e-03, -8.100899648347493e-02, -8.233695245215733e-02, -4.546235122481865e-03, -6.039134939466401e-03, -4.546235122481843e-03, -3.904782251376655e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms2_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.425489404694634e-08, 0.000000000000000e+00, -3.425819749574054e-08, -3.425491085998513e-08, 0.000000000000000e+00, -3.425820818146832e-08, -3.425470396045612e-08, 0.000000000000000e+00, -3.425797844268556e-08, -3.425454641869306e-08, 0.000000000000000e+00, -4.946176115068788e-09, -3.425492907921062e-08, 0.000000000000000e+00, -4.945902213194721e-09, -4.945608867087339e-09, 0.000000000000000e+00, -4.945902213194721e-09, -5.778970910705793e-06, 0.000000000000000e+00, -1.585084534347305e-05, -5.779420320126311e-06, 0.000000000000000e+00, -5.779172983307825e-06, -5.788246082788699e-06, 0.000000000000000e+00, -5.789579569663067e-06, -5.783089753209444e-06, 0.000000000000000e+00, -5.782778759647816e-06, -5.781674342484079e-06, 0.000000000000000e+00, -5.790281700497696e-06, -1.586211938146361e-05, 0.000000000000000e+00, -5.790281700497696e-06, -1.078789954126682e-02, 0.000000000000000e+00, -1.064880804527040e-02, -1.084674467705067e-02, 0.000000000000000e+00, -3.108413650240184e-03, -3.169065756363235e-03, 0.000000000000000e+00, -3.214644535002456e-03, -3.205952347546489e-03, 0.000000000000000e+00, -1.147005438684250e-02, -1.034822821467981e-02, 0.000000000000000e+00, -1.315444860728187e-02, -3.042304061642370e-03, 0.000000000000000e+00, -3.362914305371926e-03, -2.536110279514891e+00, 0.000000000000000e+00, -5.221354119953958e-01, -2.417139392782683e+00, 0.000000000000000e+00, -5.074359694767583e-01, -1.174091728242564e-03, 0.000000000000000e+00, -5.296227656035097e-03, -6.322380634875385e-01, 0.000000000000000e+00, -7.011182578979176e-01, -4.567223134162657e-01, 0.000000000000000e+00, -7.301793061916616e-01, -4.567223134162661e-01, 0.000000000000000e+00, -2.564704999605868e+01, -3.338553004125016e+00, 0.000000000000000e+00, -3.350945434184776e+00, -1.497608252062133e+06, 0.000000000000000e+00, -3.504237492230525e+00, -1.566605237914836e+03, 0.000000000000000e+00, -1.596220344048217e+00, -2.446799094624341e+00, 0.000000000000000e+00, -2.471894073071359e+00, -3.172586312482229e+00, 0.000000000000000e+00, -5.434757521531209e+00, -3.172586312482229e+00, 0.000000000000000e+00, -5.434757521528094e+00, -1.448447211758352e-06, 0.000000000000000e+00, -1.449841397225592e-06, -1.448245880410251e-06, 0.000000000000000e+00, -1.449647038192753e-06, -1.448442798515032e-06, 0.000000000000000e+00, -1.449839648388972e-06, -1.448269546861709e-06, 0.000000000000000e+00, -1.449662573464433e-06, -9.085057797792325e-06, 0.000000000000000e+00, -1.449743201009391e-06, -1.448339416464262e-06, 0.000000000000000e+00, -9.094362511890441e-06, -5.394625411970639e-05, 0.000000000000000e+00, -5.403532723741073e-05, -5.312763162490697e-05, 0.000000000000000e+00, -5.323724681858555e-05, -5.457952797762705e-05, 0.000000000000000e+00, -5.448797931848772e-05, -5.389137095115595e-05, 0.000000000000000e+00, -5.378326488631110e-05, -5.301262887758824e-05, 0.000000000000000e+00, -1.567555538932289e-04, -5.301262887758824e-05, 0.000000000000000e+00, -5.356033563791555e-05, -7.937319040535589e-03, 0.000000000000000e+00, -1.844600334309210e-02, -6.269969240968136e-03, 0.000000000000000e+00, -6.284540549727453e-03, -1.058972696893683e-02, 0.000000000000000e+00, -9.630210846022421e-03, -9.874596161584282e-03, 0.000000000000000e+00, -8.895536986804656e-03, -7.002407863925772e-03, 0.000000000000000e+00, -1.993812921284857e-02, -7.002407863925757e-03, 0.000000000000000e+00, -8.381257367596056e-03, -8.932088856844749e-01, 0.000000000000000e+00, -8.835206672743864e-01, -2.344156652810466e+00, 0.000000000000000e+00, -3.493034221072187e-01, -9.680413741059970e-01, 0.000000000000000e+00, -9.790834724609795e-01, -7.175148705580922e-05, 0.000000000000000e+00, -7.188945713280275e-05, -9.860170149352423e-01, 0.000000000000000e+00, -1.169575837180562e+00, -9.860170149352323e-01, 0.000000000000000e+00, -1.169575837180567e+00, -4.366099732613486e+07, 0.000000000000000e+00, -1.637978663991467e+00, -2.321017422050061e+00, 0.000000000000000e+00, -2.045906120190668e+00, -1.671246150342888e+01, 0.000000000000000e+00, -1.834391909597556e+01, -1.444019860530713e+00, 0.000000000000000e+00, -1.993984706191038e+02, -3.149675878686847e+00, 0.000000000000000e+00, -9.997840517689504e+00, -3.149675878684972e+00, 0.000000000000000e+00, -9.997840517541217e+00, -9.384873160256109e-03, 0.000000000000000e+00, -9.246599905009405e-03, -9.410602871112790e-03, 0.000000000000000e+00, -9.273025929041393e-03, -3.299497467586342e-02, 0.000000000000000e+00, -3.193647823971284e-02, -2.868517748671649e-02, 0.000000000000000e+00, -9.256282920136976e-03, -3.084234525051589e-02, 0.000000000000000e+00, -2.987696803162705e-02, -3.084234525051589e-02, 0.000000000000000e+00, -9.260000248386262e-03, -1.043402939386049e-02, 0.000000000000000e+00, -1.030423892931099e-02, -1.554105301279320e-02, 0.000000000000000e+00, -3.340198024370138e-02, -1.390545500306851e-02, 0.000000000000000e+00, -5.048248396077148e-02, -1.242960182037084e-02, 0.000000000000000e+00, -1.226673039004123e-02, -1.315947457519717e-02, 0.000000000000000e+00, -1.298538428633907e-02, -1.315947457519717e-02, 0.000000000000000e+00, -7.861626198919287e-02, -5.080431866522402e-03, 0.000000000000000e+00, -3.341033328198274e-02, -1.991161282759861e-01, 0.000000000000000e+00, -1.963291487677188e-01, -4.554955191470935e-01, 0.000000000000000e+00, -1.204281775036379e-01, -1.612540646797240e-01, 0.000000000000000e+00, -5.328599225190279e-02, -8.401365964442542e-02, 0.000000000000000e+00, -8.438974195152002e-02, -8.401365964442579e-02, 0.000000000000000e+00, -2.676901526768433e-01, -2.042638019088970e-02, 0.000000000000000e+00, -2.012037646453427e-02, -1.689513982576392e+03, 0.000000000000000e+00, -1.644053853826214e+03, -1.319204733011840e+00, 0.000000000000000e+00, -1.357424290473719e+00, -6.872945273724645e-02, 0.000000000000000e+00, -6.798742334432321e-02, -1.571636193147511e+00, 0.000000000000000e+00, -1.819414188764709e+00, -1.571636193147603e+00, 0.000000000000000e+00, -1.819414188764639e+00, -4.312840894834962e+05, 0.000000000000000e+00, -3.740226255256407e+05, -2.669274207874502e+00, 0.000000000000000e+00, -2.657537586448076e+00, -1.796608548798307e+08, 0.000000000000000e+00, -1.404014624007193e+08, -1.020373185080071e+02, 0.000000000000000e+00, -9.562457316647681e+01, -8.128247012202285e+00, 0.000000000000000e+00, -1.036616939984146e+01, -8.128247012520889e+00, 0.000000000000000e+00, -1.888982480676294e+07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms2_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.042432221731133e-03, 2.042741237418832e-03, 2.042470633172457e-03, 2.042769012677346e-03, 2.042575259129467e-03, 2.042923567450300e-03, 2.042144552504495e-03, -4.905699373886647e-20, 2.042457213671129e-03, 1.791706504540585e-19, -5.325410826414008e-19, 1.791706504540585e-19, -4.485997648741623e-18, 8.713991993987491e-04, 9.032156215469779e-18, 3.290986287459797e-18, -4.203387348266380e-18, -4.186941097161511e-18, -9.069051515194821e-19, 1.166316602864819e-18, 2.984670326346467e-18, 4.653341412094495e-18, 8.718959943132522e-04, 4.653341412094495e-18, 1.408543081946646e-03, 1.509761540091956e-03, 1.380842392575576e-03, -5.753720543634264e-17, 4.879485624689931e-17, 2.982664205200114e-17, -4.374941797785203e-17, 1.221760909793207e-03, 1.569771466977732e-03, 7.874901703931212e-04, -1.434679157055836e-17, -3.513866422788992e-18, 1.330467168617535e-03, -9.795679837536968e-17, 1.487200421458457e-03, -3.162686895468115e-18, -4.463072043380830e-17, 3.625834740713310e-04, 9.379563282509195e-17, -2.386071999203452e-17, -9.550947949953253e-17, -1.374267683108890e-16, -7.217730808146590e-17, 1.399983216186607e-05, 1.181103251015335e-17, -1.345966089969820e-17, 7.351330355096218e-11, -4.552858120245094e-18, 1.308356192975745e-07, 2.204720415458704e-17, 2.576906025454212e-17, 7.737370700592856e-18, 3.346712262187612e-17, -1.937856207928096e-17, 3.346712262187612e-17, -2.002484294640452e-17, 1.263685024854884e-19, 7.871603523594072e-19, -3.176028812137667e-19, -1.949571654113482e-19, -2.327440659792232e-19, -1.692357686742456e-18, 5.554481944367959e-19, -8.746558922176828e-19, 8.044190676190839e-03, -4.580151870572347e-20, -8.515782429039559e-19, 8.046572865621911e-03, -8.605957566753766e-18, 1.088006052572564e-17, 2.199020531961202e-18, 1.338749596580394e-17, -2.963695224594857e-18, 4.700590639322593e-18, -9.612846389164092e-18, 6.525512493251086e-18, -2.135496177120293e-18, 1.511901269278336e-03, -2.135496177120293e-18, 8.608468434459023e-19, 3.216635546910822e-17, 3.603905534765107e-03, -9.709210187720969e-19, 1.415206670297432e-18, 5.029374866743312e-17, 3.168063347407755e-17, 4.935125466305105e-18, -2.855594638804737e-18, 1.165694940157950e-17, 4.896168065014891e-03, -1.574657207455342e-17, -2.218202971980267e-17, 2.586211866585575e-16, 2.363377407946744e-16, 3.992614819936952e-04, 1.667904786017553e-16, 9.378804687836018e-17, 1.492242848136525e-16, -1.510583022281135e-18, 1.972881574734868e-18, 4.076185834857642e-17, -1.537641294269473e-16, -5.477754057277784e-17, -1.085264987313071e-16, 3.980170932850544e-13, 6.168259454425339e-18, 4.206643525786328e-18, -9.741832414279946e-18, -2.123654672502164e-17, -1.497368873176448e-17, -3.798131350015241e-16, 2.385073660162494e-06, -1.761520328569211e-18, 3.920626417375659e-17, -2.017249328117681e-18, -1.313879731154762e-17, 1.704641198290212e-18, 3.519634398349472e-19, 9.276614621113265e-18, 5.593710386820869e-18, 3.648690887788694e-02, 3.549208449328897e-02, 3.008710653392391e-02, -3.614542057213591e-18, 3.330478302400956e-02, 3.240776925491528e-02, 3.330478302400956e-02, -3.717433230470976e-18, 4.044481973892739e-19, -9.638811555619423e-20, 1.355700616546940e-17, 1.108769458586373e-03, -1.281250598493986e-17, 2.645762340930864e-02, -1.694448613865432e-17, -1.471374528937276e-17, 2.885079573254205e-18, 3.648533843867400e-17, -1.827862194400437e-18, 6.530106008462279e-02, 2.189202528396681e-18, 5.905574202660352e-02, 7.402085469443154e-17, -7.167857143410153e-17, 2.497855239938804e-03, -3.447387832184888e-17, 8.134334083201961e-03, -4.479962657997249e-17, -2.249884715535931e-17, 7.304288271623328e-17, 4.381678716949368e-17, 5.684555087771023e-03, 3.292128376386510e-17, -1.185554832462232e-17, 1.285386732016260e-07, 1.290395912041619e-07, -8.151330836114161e-17, 7.082722486264892e-17, -9.772673261005455e-17, -4.779175409734617e-17, 2.251207857606780e-17, 2.268193886727889e-16, 2.755151994485071e-16, -5.027890410515075e-18, 1.106961818071933e-10, 1.294292784930931e-10, -2.762770774350446e-19, -3.311477947348290e-18, 5.756189494843800e-13, 8.543089090305623e-13, 8.252089720771944e-06, 1.065419624656166e-05, -1.471126891642730e-17, 3.790719489571267e-17, 2.219080272453435e-17, 1.597991253020755e-11])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
