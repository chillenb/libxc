
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ms2_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.244852452630228e+01, -2.244857678044234e+01, -2.244885211779580e+01, -2.244807419831900e+01, -2.244847568161689e+01, -2.244847568161689e+01, -3.371456843848823e+00, -3.371458253216912e+00, -3.371696616561846e+00, -3.373051017214277e+00, -3.372095070938997e+00, -3.372095070938997e+00, -6.597722453510850e-01, -6.594874354441644e-01, -6.540105249803926e-01, -6.599169233539925e-01, -6.600234831201626e-01, -6.600234831201626e-01, -1.979722873068627e-01, -1.993720352008768e-01, -7.577695658415814e-01, -1.579444728360554e-01, -1.891227331432891e-01, -1.891227331432891e-01, -8.426186169180184e-03, -8.872853765630089e-03, -4.828489136000157e-02, -4.859874352093953e-03, -6.782317256427853e-03, -6.782317256427853e-03, -5.448656887318991e+00, -5.449119067165204e+00, -5.448684770125833e+00, -5.449092664221769e+00, -5.448887536399357e+00, -5.448887536399357e+00, -2.107166216080691e+00, -2.126777253342334e+00, -2.105750041864911e+00, -2.122718816149359e+00, -2.118934136513329e+00, -2.118934136513329e+00, -6.008365335623245e-01, -6.432384425990034e-01, -5.335573647976525e-01, -5.380530462070410e-01, -6.124647786332105e-01, -6.124647786332105e-01, -1.179904252033009e-01, -2.040677479679080e-01, -1.101428083580488e-01, -1.833563437315111e+00, -1.333306680013587e-01, -1.333306680013587e-01, -3.752153657451316e-03, -4.750794668803749e-03, -3.637931235984148e-03, -7.635633769647421e-02, -4.569722833070693e-03, -4.569722833070695e-03, -6.100265140894718e-01, -6.086969577580167e-01, -6.091684717767063e-01, -6.095508466361128e-01, -6.093590739087182e-01, -6.093590739087182e-01, -5.920119503358804e-01, -5.272927853361455e-01, -5.455226994942748e-01, -5.636431059408861e-01, -5.542078688475296e-01, -5.542078688475296e-01, -6.639190283133651e-01, -2.530524699367028e-01, -2.906602118539851e-01, -3.521694720422569e-01, -3.217035975935942e-01, -3.217035975935942e-01, -4.753191052049993e-01, -4.622827506465085e-02, -6.242327104876043e-02, -3.402270806644804e-01, -9.474301495842791e-02, -9.474301495842793e-02, -1.187285863432276e-02, -1.269958578893271e-03, -2.670583201028431e-03, -8.956192682892364e-02, -4.196609678179192e-03, -4.196609678179189e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ms2_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.878771657507529e+01, -2.878828327835247e+01, -2.878783797759700e+01, -2.878837136747104e+01, -2.878829268754628e+01, -2.878900424259590e+01, -2.878692588079734e+01, -2.878726140843155e+01, -2.878778794018753e+01, -2.878800649077589e+01, -2.878778794018753e+01, -2.878800649077589e+01, -4.213802012676963e+00, -4.213031145535250e+00, -4.214121021406982e+00, -4.213188946430808e+00, -4.219865518936320e+00, -4.220819602789032e+00, -4.220328506959684e+00, -4.219910540127546e+00, -4.212466531758834e+00, -4.225350780362672e+00, -4.212466531758834e+00, -4.225350780362672e+00, -7.879166114898257e-01, -7.931809248161927e-01, -7.860330776624352e-01, -7.923765259701084e-01, -7.614772138539830e-01, -7.544363298505852e-01, -7.655629726468500e-01, -7.683259065136048e-01, -8.016449312076903e-01, -7.316748852857630e-01, -8.016449312076903e-01, -7.316748852857630e-01, -1.606172409510206e-01, -2.008371223341262e-01, -1.680633849730215e-01, -1.977789832270710e-01, -8.823305168572759e-01, -9.228332213630555e-01, -1.679033900860781e-01, -1.690942948644568e-01, -1.757833922094363e-01, -1.375072593300191e-01, -1.757833922094361e-01, -1.375072593300190e-01, -1.085373229608620e-02, -1.153130576213198e-02, -1.137131598853304e-02, -1.217866560477559e-02, -6.100588918533854e-02, -6.414076829432058e-02, -6.530678931977345e-03, -6.422007782535636e-03, -9.685445629820801e-03, -5.514709233911459e-03, -9.685445629820801e-03, -5.514709233911459e-03, -7.084269312724486e+00, -7.082675795815648e+00, -7.086259842131244e+00, -7.084597643616702e+00, -7.084435840200564e+00, -7.082782163228969e+00, -7.086141449856258e+00, -7.084525849204140e+00, -7.085246751237507e+00, -7.083634112709511e+00, -7.085246751237507e+00, -7.083634112709511e+00, -2.315129760271100e+00, -2.322543914304653e+00, -2.376505496936501e+00, -2.382099585412393e+00, -2.315940931910971e+00, -2.322149054710994e+00, -2.375128569840582e+00, -2.381505379712797e+00, -2.353344595623181e+00, -2.354425650287240e+00, -2.353344595623181e+00, -2.354425650287240e+00, -7.651609520178687e-01, -7.633382800663621e-01, -8.883166464541409e-01, -8.878027234461244e-01, -6.548226630117782e-01, -7.096370257514778e-01, -7.143154816305184e-01, -7.785545768543706e-01, -8.046189903680786e-01, -7.623090196232269e-01, -8.046189903680786e-01, -7.623090196232269e-01, -1.369930774952729e-01, -1.375881496302229e-01, -1.706925993509666e-01, -1.754297348067124e-01, -1.271811910624692e-01, -1.318546300419399e-01, -2.638055742171535e+00, -2.637316558935786e+00, -1.460105052546225e-01, -1.468556726990942e-01, -1.460105052546225e-01, -1.468556726990942e-01, -4.900066648271263e-03, -5.092348264382931e-03, -6.283607345570042e-03, -6.378742001007514e-03, -4.697909920518839e-03, -4.974631897610794e-03, -9.447926356505630e-02, -9.511832071538842e-02, -4.799065742624108e-03, -6.587781586646932e-03, -4.799065742624110e-03, -6.587781586646935e-03, -8.087282024246000e-01, -8.119132417633500e-01, -7.999940102314073e-01, -8.032650832098510e-01, -8.030271845893632e-01, -8.062883408163738e-01, -8.055826971734822e-01, -8.087812283791609e-01, -8.043017642960266e-01, -8.075308703981018e-01, -8.043017642960266e-01, -8.075308703981018e-01, -7.896800716375665e-01, -7.921648275599781e-01, -6.427399763072520e-01, -6.460905662713186e-01, -6.812905267205646e-01, -6.849526616024493e-01, -7.234787971656845e-01, -7.262186785219302e-01, -7.012913494385589e-01, -7.044128054080760e-01, -7.012913494385589e-01, -7.044128054080760e-01, -9.361066221670102e-01, -9.370373515606577e-01, -2.264531792612572e-01, -2.267888738544005e-01, -2.593992765209508e-01, -2.641822543273518e-01, -4.075643690951632e-01, -4.106002654888853e-01, -3.240520320136588e-01, -3.244684405048573e-01, -3.240520320136588e-01, -3.244684405048575e-01, -5.449311431418242e-01, -5.537067439286333e-01, -6.003973981374613e-02, -6.042145918089957e-02, -7.860484223292782e-02, -8.084522069188191e-02, -4.077112058469993e-01, -4.190041844185951e-01, -1.109269257145715e-01, -1.134527230109133e-01, -1.109269257145715e-01, -1.134527230109133e-01, -1.550714563260085e-02, -1.606574062023971e-02, -1.691266484186563e-03, -1.695092044957780e-03, -3.440793882729607e-03, -3.659422936256708e-03, -1.067582642406534e-01, -1.075930467120538e-01, -4.545077195842461e-03, -6.039002815025863e-03, -4.545077195842457e-03, -6.039002815025857e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms2_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.403919213426600e-09, 0.000000000000000e+00, -7.394685646185311e-09, -7.403706605776668e-09, 0.000000000000000e+00, -7.394532530298625e-09, -7.401840240805457e-09, 0.000000000000000e+00, -7.392192766391297e-09, -7.404180413846320e-09, 0.000000000000000e+00, -7.395187364085244e-09, -7.403816777025795e-09, 0.000000000000000e+00, -7.393124536517744e-09, -7.403816777025795e-09, 0.000000000000000e+00, -7.393124536517744e-09, -1.525438624906484e-05, 0.000000000000000e+00, -1.518915096538262e-05, -1.527524098139189e-05, 0.000000000000000e+00, -1.519789667800400e-05, -1.563259101250584e-05, 0.000000000000000e+00, -1.568288034996841e-05, -1.573254210601734e-05, 0.000000000000000e+00, -1.568004504878869e-05, -1.522297235788698e-05, 0.000000000000000e+00, -1.601937793816968e-05, -1.522297235788698e-05, 0.000000000000000e+00, -1.601937793816968e-05, -8.479810729015090e-03, 0.000000000000000e+00, -8.491938279494009e-03, -8.485054841893526e-03, 0.000000000000000e+00, -8.495497939777297e-03, -8.512145317948775e-03, 0.000000000000000e+00, -8.529559816004020e-03, -8.421000699991181e-03, 0.000000000000000e+00, -8.448132786905507e-03, -8.396497393993953e-03, 0.000000000000000e+00, -8.300341193229057e-03, -8.396497393993953e-03, 0.000000000000000e+00, -8.300341193229057e-03, -3.218950881894647e+00, 0.000000000000000e+00, -1.789832817169868e+00, -2.920497134168980e+00, 0.000000000000000e+00, -2.029027187356953e+00, -4.476505802976341e-03, 0.000000000000000e+00, -4.182347728075190e-03, -1.204110420816213e+00, 0.000000000000000e+00, -1.306950817434425e+00, -2.385710286724404e+00, 0.000000000000000e+00, -1.660468096762358e+00, -2.385710286724407e+00, 0.000000000000000e+00, -1.660468096762360e+00, -3.424258314762959e+00, 0.000000000000000e+00, -3.390808539785690e+00, -3.607882175961435e+00, 0.000000000000000e+00, -3.589503767227720e+00, -1.994775161408103e+00, 0.000000000000000e+00, -2.005438934513142e+00, -3.136602587475342e+00, 0.000000000000000e+00, -3.051460366017756e+00, -3.418541110248600e+00, 0.000000000000000e+00, -8.674124193589053e+00, -3.418541110248610e+00, 0.000000000000000e+00, -8.674124193589071e+00, -1.498389211095253e-06, 0.000000000000000e+00, -1.496961989085643e-06, -1.497561040676328e-06, 0.000000000000000e+00, -1.496165472269175e-06, -1.497204288917930e-06, 0.000000000000000e+00, -1.496113183822834e-06, -1.496538378421972e-06, 0.000000000000000e+00, -1.495432797856982e-06, -1.498826734341520e-06, 0.000000000000000e+00, -1.496705597623359e-06, -1.498826734341520e-06, 0.000000000000000e+00, -1.496705597623359e-06, -2.490102949240022e-04, 0.000000000000000e+00, -2.432871929483781e-04, -2.153416187755568e-04, 0.000000000000000e+00, -2.108538077383314e-04, -2.269097388694077e-04, 0.000000000000000e+00, -2.283627162728243e-04, -1.953623513780902e-04, 0.000000000000000e+00, -1.962958059426098e-04, -2.437677204230542e-04, 0.000000000000000e+00, -2.278713016836867e-04, -2.437677204230542e-04, 0.000000000000000e+00, -2.278713016836867e-04, -4.935809794987566e-02, 0.000000000000000e+00, -4.872936539702045e-02, -3.813614545895227e-02, 0.000000000000000e+00, -3.713399944630216e-02, -3.719371583121710e-02, 0.000000000000000e+00, -6.119597917413806e-02, -3.569338985309014e-02, 0.000000000000000e+00, -5.115352689881665e-02, -3.673529620194541e-02, 0.000000000000000e+00, -5.335969111981147e-02, -3.673529620194540e-02, 0.000000000000000e+00, -5.335969111981145e-02, -1.365955801973791e+00, 0.000000000000000e+00, -1.381170999553069e+00, -1.867526838087684e+00, 0.000000000000000e+00, -1.727144512371235e+00, -1.524767400099875e+00, 0.000000000000000e+00, -1.491208939600903e+00, -4.143480324770598e-04, 0.000000000000000e+00, -4.155327203279602e-04, -1.611860456400195e+00, 0.000000000000000e+00, -2.005941724653204e+00, -1.611860456400196e+00, 0.000000000000000e+00, -2.005941724653201e+00, -4.403247899643224e+00, 0.000000000000000e+00, -3.811164988354485e+00, -3.791518718161727e+00, 0.000000000000000e+00, -3.500622151987689e+00, -2.159668343797848e+01, 0.000000000000000e+00, -2.402473895740819e+01, -2.271495625228894e+00, 0.000000000000000e+00, -2.197562613734717e+00, -1.073973503509351e+01, 0.000000000000000e+00, -1.054891720176905e+01, -1.073973503509348e+01, 0.000000000000000e+00, -1.054891720176905e+01, -1.538530805703541e-02, 0.000000000000000e+00, -1.499208308123248e-02, -1.529067297265728e-02, 0.000000000000000e+00, -1.490914904273153e-02, -1.532623822609797e-02, 0.000000000000000e+00, -1.493821167052092e-02, -1.535236228647445e-02, 0.000000000000000e+00, -1.496680602197033e-02, -1.534318341425521e-02, 0.000000000000000e+00, -1.495499789487123e-02, -1.534318341425521e-02, 0.000000000000000e+00, -1.495499789487124e-02, -2.406151909684513e-02, 0.000000000000000e+00, -2.326986404793144e-02, -2.928324017465706e-02, 0.000000000000000e+00, -2.863356310420681e-02, -2.871613656381619e-02, 0.000000000000000e+00, -2.800581843353130e-02, -2.724571782737431e-02, 0.000000000000000e+00, -2.677438654148169e-02, -2.915849609060600e-02, 0.000000000000000e+00, -2.815601483985939e-02, -2.915849609060602e-02, 0.000000000000000e+00, -2.815601483985942e-02, -3.478020599837977e-02, 0.000000000000000e+00, -3.398998353369977e-02, -9.417672465483057e-01, 0.000000000000000e+00, -9.422195116501596e-01, -7.608904192198310e-01, 0.000000000000000e+00, -7.415213934521204e-01, -3.026113169007209e-01, 0.000000000000000e+00, -2.899623981450513e-01, -5.446251962787247e-01, 0.000000000000000e+00, -5.473229846747234e-01, -5.446251962787249e-01, 0.000000000000000e+00, -5.473229846747233e-01, -1.227061314079976e-01, 0.000000000000000e+00, -1.130183383505854e-01, -1.830349587000205e+00, 0.000000000000000e+00, -1.830006144424884e+00, -1.791836589844472e+00, 0.000000000000000e+00, -1.829653539548552e+00, -4.000452786928868e-01, 0.000000000000000e+00, -4.380204929276805e-01, -2.267302421843680e+00, 0.000000000000000e+00, -2.676365637660616e+00, -2.267302421843682e+00, 0.000000000000000e+00, -2.676365637660618e+00, -2.713401016904732e+00, 0.000000000000000e+00, -2.769964424018676e+00, -1.354819784722166e+01, 0.000000000000000e+00, -2.399853462940161e+01, -8.361640946695717e+00, 0.000000000000000e+00, -8.901505098608741e+00, -2.554206996825671e+00, 0.000000000000000e+00, -2.886838504655706e+00, -2.214195087855504e+01, 0.000000000000000e+00, -1.095121319778123e+01, -2.214195087855508e+01, 0.000000000000000e+00, -1.095121319778126e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms2_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.867405705429769e-04, 1.860291919171651e-04, 1.867296779272372e-04, 1.860213769803600e-04, 1.866068865152660e-04, 1.858702004776399e-04, 1.867251553104293e-04, 1.860219810530251e-04, 1.867357878914438e-04, 1.858971476426801e-04, 1.867357878914438e-04, 1.858971476426801e-04, 1.467913880318222e-03, 1.444652891061128e-03, 1.474958238053629e-03, 1.447491073652753e-03, 1.594505126682702e-03, 1.611216894932320e-03, 1.635060589740766e-03, 1.616562104286757e-03, 1.454348364410361e-03, 1.730758126290511e-03, 1.454348364410361e-03, 1.730758126290511e-03, 2.798785668274264e-03, 2.895594910384297e-03, 2.776786567494242e-03, 2.878685674582394e-03, 2.407929773650030e-03, 2.435229734365777e-03, 2.832375301022220e-03, 2.920163166836371e-03, 2.863944530230162e-03, 2.774297015078416e-03, 2.863944530230162e-03, 2.774297015078416e-03, 9.719417373743802e-02, 5.394746522087227e-02, 8.782813490347802e-02, 6.796737472854908e-02, 2.894473482500072e-04, 5.072177997359864e-04, 1.211948735116589e-03, 4.245845039211003e-03, 7.700018777487526e-02, 2.557719370336286e-05, 7.700018777487541e-02, 2.557719370336211e-05, 8.387342331525800e-11, 1.834481638290484e-09, 3.126650216095074e-11, 3.294335528255273e-10, 1.514736333552631e-07, 4.243512030838239e-07, 5.471614573223663e-16, 7.412719370579758e-16, 1.024191313028511e-12, 1.920978349711960e-16, 1.024191313017231e-12, 1.920978353159730e-16, 5.514257746759328e-05, 5.199075895294934e-05, 5.448097378545417e-05, 5.135414957241287e-05, 5.384129174321296e-05, 5.105742928721616e-05, 5.332291906238872e-05, 5.052690704266349e-05, 5.576030224160634e-05, 5.183024197820150e-05, 5.576030224160634e-05, 5.183024197820150e-05, 1.117411385567006e-02, 1.084980112991559e-02, 9.540796690947368e-03, 9.269228278161738e-03, 9.727984784924490e-03, 9.862937492710958e-03, 8.171345521488427e-03, 8.274119808956209e-03, 1.121559260551146e-02, 1.014451809640133e-02, 1.121559260551146e-02, 1.014451809640133e-02, 6.279042003635790e-02, 6.135060211035397e-02, 6.172250038354515e-02, 5.998721122750893e-02, 2.141071202579241e-02, 6.104803898899405e-02, 2.307808476663809e-02, 5.332179584676824e-02, 5.136169346000836e-02, 6.559734838574206e-02, 5.136169346000832e-02, 6.559734838574202e-02, 2.143131398373450e-04, 1.855840329031140e-04, 5.765117310362482e-02, 5.264485186456867e-02, 6.336385130403223e-05, 1.648239870294010e-04, 1.621378952634277e-02, 1.624677347246868e-02, 1.767678563270913e-03, 3.983257594913266e-03, 1.767678563270918e-03, 3.983257594913254e-03, 1.177726235440569e-18, 1.505284452959848e-18, 6.661939007240643e-17, 4.594715114004534e-17, 3.181150918751557e-15, 5.913987517675811e-15, 4.024143312108715e-06, 1.811333731690658e-05, 2.815876943082300e-18, 1.465625420695054e-12, 2.815877011407697e-18, 1.465625420724849e-12, 9.514580837501929e-03, 9.217564328638989e-03, 9.165986520446494e-03, 8.890087588259696e-03, 9.291087565826972e-03, 9.004444969778144e-03, 9.390049320634197e-03, 9.105901628405475e-03, 9.346548293762781e-03, 9.058997801264066e-03, 9.346548293762781e-03, 9.058997801264073e-03, 1.981854513391072e-02, 1.905015038144921e-02, 1.268305778593859e-02, 1.244752642561321e-02, 1.566483703812205e-02, 1.533382374171068e-02, 1.786477799219790e-02, 1.767906415436321e-02, 1.805127514667915e-02, 1.731361216524247e-02, 1.805127514667917e-02, 1.731361216524251e-02, 6.486492067327725e-02, 6.388295565977012e-02, 5.958752957206509e-02, 6.085153312872888e-02, 8.591694069619746e-02, 8.630473403393615e-02, 7.070974538732459e-02, 6.805579269910193e-02, 9.406799449295876e-02, 9.443626485819771e-02, 9.406799449295876e-02, 9.443626485819771e-02, 7.084217314572440e-02, 6.604190358826993e-02, 1.675076771169010e-06, 9.662306262844217e-07, 9.520102680138926e-07, 1.540783300308245e-06, 8.377683164478106e-02, 1.059735505244928e-01, 1.077860903352481e-04, 3.041902334208277e-04, 1.077860903352470e-04, 3.041902334208309e-04, 8.142899019284990e-14, 9.434399186522008e-14, 1.296235719231577e-22, 1.348151505066911e-22, 1.823123612303763e-16, 3.289700197620141e-16, 1.625566950769952e-04, 1.216135130598843e-03, 2.326162688572246e-17, 6.809052267737703e-13, 2.326162697326231e-17, 6.809052267776962e-13])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
