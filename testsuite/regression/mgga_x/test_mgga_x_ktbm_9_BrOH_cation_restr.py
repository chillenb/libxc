
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_9_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_9", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.378159369089601e+01, -2.378166400703674e+01, -2.378208133958136e+01, -2.378103801658762e+01, -2.378156974465227e+01, -2.378156974465227e+01, -3.337634602829631e+00, -3.337774190992756e+00, -3.341717596039265e+00, -3.342400431832599e+00, -3.341150319820255e+00, -3.341150319820255e+00, -5.707408526160075e-01, -5.699706855538450e-01, -5.529560386446783e-01, -5.645482324374455e-01, -5.613082467267395e-01, -5.613082467267395e-01, -1.601850660908680e-01, -1.630417314513337e-01, -6.148083400887105e-01, -1.105682736910362e-01, -1.278278587590368e-01, -1.278278587590368e-01, -4.998292428560473e-03, -5.256226300719884e-03, -2.874125628469137e-02, -2.850040871673832e-03, -3.599793812454548e-03, -3.599793812454546e-03, -5.814515702860003e+00, -5.815058538890024e+00, -5.814597406430737e+00, -5.815074324061707e+00, -5.814762514879070e+00, -5.814762514879070e+00, -2.016526041462665e+00, -2.048281459635863e+00, -2.006477549744486e+00, -2.035358803779066e+00, -2.038949242862073e+00, -2.038949242862073e+00, -6.135375257602527e-01, -6.664298229122436e-01, -5.362808865945761e-01, -5.543576805778906e-01, -6.274840905191746e-01, -6.274840905191746e-01, -7.549369871785552e-02, -1.532432460595246e-01, -6.961840026726170e-02, -1.903923977039274e+00, -9.049381837164158e-02, -9.049381837164158e-02, -2.141908749584252e-03, -2.748510889425890e-03, -2.126653988440298e-03, -4.654500227743548e-02, -2.538332825184535e-03, -2.538332825184536e-03, -6.430961036512336e-01, -6.438616019136801e-01, -6.437005549820459e-01, -6.434724433531411e-01, -6.435936666998914e-01, -6.435936666998914e-01, -6.204386929492588e-01, -5.384776530162981e-01, -5.693503519998918e-01, -5.937459549283497e-01, -5.816130378302475e-01, -5.816130378302476e-01, -6.879189663227321e-01, -2.019681716718824e-01, -2.495606271594946e-01, -3.407253452266729e-01, -2.956778745165867e-01, -2.956778745165867e-01, -4.693832698906719e-01, -2.768916057128110e-02, -3.746012053900113e-02, -3.387703870453740e-01, -5.986396378362683e-02, -5.986396378362686e-02, -6.864123319949685e-03, -7.110733849364215e-04, -1.572559898103102e-03, -5.653771977314360e-02, -2.361970330943716e-03, -2.361970330943714e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_9_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_9", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.934571678663434e+01, -2.934581515118300e+01, -2.934616906157361e+01, -2.934470282012248e+01, -2.934548299596165e+01, -2.934548299596165e+01, -4.866011856597400e+00, -4.866136890447234e+00, -4.869460605338989e+00, -4.868256389888858e+00, -4.868009668487002e+00, -4.868009668487002e+00, -8.251150684099868e-01, -8.233033676893646e-01, -7.825089151001766e-01, -8.018901219236254e-01, -7.970981128424378e-01, -7.970981128424378e-01, -2.079900795104075e-01, -2.127467670199710e-01, -8.492969550173582e-01, -1.401497662803684e-01, -1.635782867869539e-01, -1.635782867869539e-01, -6.011207442608113e-03, -6.330003661453353e-03, -3.523119449584972e-02, -3.492645069390004e-03, -4.378171452804341e-03, -4.378171452804339e-03, -7.193235328722982e+00, -7.196488848452157e+00, -7.193336314692783e+00, -7.196210513750040e+00, -7.194907630184653e+00, -7.194907630184653e+00, -2.668324932720922e+00, -2.692227947955511e+00, -2.647953548501162e+00, -2.669550978159990e+00, -2.691523977035750e+00, -2.691523977035750e+00, -8.288048845916570e-01, -9.253423160160037e-01, -7.660124263879977e-01, -8.216011466654609e-01, -8.430553910673314e-01, -8.430553910673314e-01, -9.384923484146174e-02, -1.941117576078561e-01, -8.655237310526663e-02, -2.812673422479793e+00, -1.126507807730297e-01, -1.126507807730297e-01, -2.727389292421398e-03, -3.436085720292959e-03, -2.613061121393245e-03, -5.763815329449959e-02, -3.161534928406207e-03, -3.161534928406206e-03, -8.517300520039167e-01, -8.338861354676488e-01, -8.399153815085538e-01, -8.451052438785468e-01, -8.424881022926008e-01, -8.424881022926008e-01, -8.344311879646615e-01, -6.732475307361472e-01, -7.067080347297955e-01, -7.488586320201440e-01, -7.263281841490303e-01, -7.263281841490304e-01, -9.729800518279986e-01, -2.607623752544767e-01, -3.313171341661725e-01, -4.745470335063269e-01, -4.004378831987521e-01, -4.004378831987520e-01, -6.277893596516383e-01, -3.361869946158912e-02, -4.611915641261263e-02, -4.678839554266705e-01, -7.402783157772878e-02, -7.402783157772881e-02, -8.594136573956227e-03, -9.315629295203400e-04, -1.910276082368920e-03, -6.932483388294286e-02, -2.917807894719544e-03, -2.917807894719544e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_9_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_9", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.625333695244255e-08, -1.625323842427073e-08, -1.625278070122661e-08, -1.625425633586314e-08, -1.625348581984602e-08, -1.625348581984602e-08, -1.331744543244773e-05, -1.332013680207762e-05, -1.339117379044000e-05, -1.336736155505479e-05, -1.337137630503502e-05, -1.337137630503502e-05, -4.256105994153467e-03, -4.243714958626385e-03, -3.970769777253751e-03, -4.251511688673188e-03, -4.175879860899502e-03, -4.175879860899502e-03, -6.788421116501046e-01, -6.819102457271009e-01, -9.686108697064928e-04, -5.359201320724459e-01, -6.011023237564092e-01, -6.011023237564092e-01, -2.578095009058954e+02, -2.360885527412126e+02, -5.152929859595849e+00, -5.991936494901133e+02, -4.671353862477575e+02, -4.671353862477571e+02, -4.840008245069627e-06, -4.839564113513293e-06, -4.840069115017126e-06, -4.839672652655415e-06, -4.839745480034851e-06, -4.839745480034851e-06, -1.262464578648545e-04, -1.276599619753291e-04, -1.259754153615479e-04, -1.274451319810718e-04, -1.271669154077593e-04, -1.271669154077593e-04, -2.302189361621709e-02, -1.921206615321698e-02, -2.513706808910817e-02, -2.511985114394644e-02, -2.251820439950850e-02, -2.251820439950850e-02, -8.059323752503570e-01, -3.479916870453219e-01, -9.270513303548030e-01, -1.991748593699033e-04, -9.093183274681642e-01, -9.093183274681645e-01, -6.256500127851344e+02, -5.173886368857426e+02, -2.823877592131533e+03, -2.115090236957674e+00, -1.103895849008649e+03, -1.103895849008649e+03, -3.032054422693911e-02, -3.072063261684443e-02, -3.059732460666822e-02, -3.048174653885488e-02, -3.054103318845674e-02, -3.054103318845674e-02, -3.342591572835778e-02, -4.498784791877853e-02, -4.343081689853497e-02, -4.027411359952350e-02, -4.202791538554328e-02, -4.202791538554328e-02, -1.511355333618747e-02, -2.444945175428448e-01, -1.863872376226157e-01, -1.171043715800920e-01, -1.611544119567542e-01, -1.611544119567543e-01, -5.204537312493358e-02, -5.942488938482771e+00, -2.874748126404337e+00, -1.718974089935012e-01, -1.693235937873617e+00, -1.693235937873618e+00, -7.047379060122904e+01, -4.337041797902608e+03, -3.680548594778154e+03, -2.056258826513372e+00, -1.626175365318638e+03, -1.626175365318642e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_9_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_9", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_9_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_9", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.378452239950785e-03, 2.378433351543351e-03, 2.378375691742261e-03, 2.378656642093229e-03, 2.378505690409875e-03, 2.378505690409875e-03, 9.382455543403636e-03, 9.384467537536552e-03, 9.439550672853765e-03, 9.438597016062065e-03, 9.430373631423619e-03, 9.430373631423619e-03, 1.750939925965530e-02, 1.740734409710982e-02, 1.534699847481706e-02, 1.774140677343456e-02, 1.703401648039945e-02, 1.703401648039945e-02, 7.857411548563230e-02, 8.227531706202665e-02, 3.315671541021679e-03, 2.005452147714779e-02, 3.603020307519404e-02, 3.603020307519391e-02, 8.901557971762616e-04, 9.440343111409606e-04, 3.212804111924693e-03, 3.580050018694720e-04, 5.797188332653403e-04, 5.797188332653388e-04, 9.176937000536253e-03, 9.159782056422710e-03, 9.176205095829596e-03, 9.161059366864078e-03, 9.168216143293289e-03, 9.168216143293289e-03, 2.060334599265547e-02, 2.132592557747973e-02, 2.052043567096208e-02, 2.121238504081110e-02, 2.103912464219763e-02, 2.103912464219763e-02, 7.790849460034907e-02, 6.614634779151771e-02, 6.871339838080659e-02, 6.586730542195250e-02, 7.763463885631047e-02, 7.763463885631047e-02, 9.343404625999013e-03, 3.705390451269915e-02, 8.316380789350654e-03, 1.984503423253111e-02, 1.932729215080498e-02, 1.932729215080497e-02, 1.244308842337167e-04, 2.502838420208796e-04, 6.930422882915940e-04, 5.524396396450660e-03, 4.301122816982722e-04, 4.301122816982761e-04, 6.440421255072122e-02, 7.074776456611166e-02, 6.855361841772031e-02, 6.670566147808568e-02, 6.763347300254777e-02, 6.763347300254777e-02, 6.556414037715698e-02, 1.072303585191867e-01, 1.027969394763282e-01, 9.021985156703255e-02, 9.723989299944254e-02, 9.723989299944254e-02, 6.213757597203046e-02, 5.745574291385992e-02, 7.569305976560060e-02, 9.556259476867049e-02, 9.599874491466205e-02, 9.599874491466218e-02, 9.592820250196352e-02, 3.432058504489384e-03, 3.938220664089376e-03, 1.198848392498268e-01, 9.867864692388704e-03, 9.867864692388716e-03, 5.265359471887848e-04, 2.001492866602743e-05, 3.823776508638488e-04, 1.037835424724595e-02, 5.332410815912717e-04, 5.332410815912762e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
