
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_9_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_9", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.151148439622318e+01, -2.151160100699439e+01, -2.151211515868765e+01, -2.151038407695751e+01, -2.151129168126404e+01, -2.151129168126404e+01, -3.042839475064563e+00, -3.042975076636841e+00, -3.046607942563378e+00, -3.045414542212036e+00, -3.045226006228748e+00, -3.767579941274909e+00, -5.289501894831010e-01, -6.641660251138509e-01, -6.342170844986466e-01, -6.451303298214076e-01, -6.426975859675375e-01, -6.426975859675375e-01, -1.626302114955069e-01, -1.660956383392776e-01, -5.962714798810934e-01, -1.146701124248988e-01, -1.320585868137287e-01, -1.320585868137287e-01, -5.003810802742899e-03, -5.266808839435386e-03, -2.914597193526295e-02, -2.889585662990332e-03, -3.631103260068730e-03, -3.631103260068730e-03, -5.817425844700398e+00, -5.817934412282870e+00, -5.817447001633087e+00, -5.388931883380413e+00, -5.817685544357463e+00, -5.817685544357463e+00, -1.656260763285533e+00, -1.679170670427893e+00, -1.639173469595427e+00, -1.659341251252120e+00, -1.677405564490421e+00, -2.099047218726957e+00, -6.538691255043266e-01, -7.143625989238527e-01, -5.943182262560154e-01, -6.292205155729964e-01, -6.662864103212527e-01, -5.706359555762817e-01, -6.972771111075483e-02, -1.555550495715233e-01, -6.457522294131543e-02, -2.148073939377103e+00, -9.231802108013183e-02, -9.231802108013179e-02, -2.072229387277095e-03, -2.824814867079140e-03, -2.160037527811945e-03, -4.360356668132797e-02, -2.418518266124891e-03, -2.602160777861815e-03, -6.492828327140941e-01, -6.498369606877001e-01, -6.271317328649895e-01, -6.495891083146758e-01, -6.496824777319858e-01, -6.496824777319858e-01, -6.323144927816813e-01, -5.437763851329873e-01, -5.769883979880652e-01, -6.035513135570345e-01, -5.908490568527462e-01, -5.215518075858037e-01, -7.494122565359475e-01, -1.672629672163084e-01, -2.565324448869774e-01, -2.932677885833142e-01, -3.092116693963320e-01, -3.092116693963320e-01, -3.996213532345217e-01, -2.788947160595439e-02, -3.810767450854469e-02, -3.651347550490434e-01, -5.531881969246843e-02, -6.106135605298735e-02, -7.062263905951789e-03, -7.550676526911597e-04, -1.584947719009147e-03, -5.725665621339666e-02, -2.407815371624681e-03, -2.407815371624679e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_9_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_9", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.172618658307780e+01, -3.172626699151515e+01, -3.172665501248597e+01, -3.172545747354879e+01, -3.172608065651340e+01, -3.172608065651340e+01, -4.878221701504251e+00, -4.878440261946109e+00, -4.884263205056061e+00, -4.882357871149658e+00, -4.882055247636944e+00, -4.739396759447664e+00, -7.909026522053931e-01, -8.662217922387191e-01, -8.248804525114720e-01, -8.404457887019007e-01, -8.370064993274278e-01, -8.370064993274278e-01, -2.090297582427650e-01, -2.140397130729071e-01, -8.256559025429763e-01, -1.412227356479477e-01, -1.652505871023373e-01, -1.652505871023374e-01, -6.007940508227397e-03, -6.323748281338150e-03, -3.502942718321606e-02, -3.469348590203323e-03, -4.359686185155627e-03, -4.359686185155627e-03, -7.189472503291743e+00, -7.192766875185823e+00, -7.189651534784256e+00, -7.699894276709034e+00, -7.191126397858932e+00, -7.191126397858932e+00, -2.639024788386186e+00, -2.681365006114619e+00, -2.606455511801688e+00, -2.644659345359833e+00, -2.678248430084902e+00, -2.678169161097099e+00, -7.958249758165824e-01, -8.712671236230547e-01, -7.394534652981174e-01, -7.653923015880328e-01, -8.082683678255130e-01, -8.826892308785952e-01, -9.205474990629120e-02, -1.949738490918181e-01, -8.531642461085003e-02, -2.602628484908220e+00, -1.128640171814345e-01, -1.128640171814345e-01, -2.762935246237966e-03, -3.391578349065017e-03, -2.593439381765105e-03, -5.781684243258029e-02, -3.224573103525539e-03, -3.124267319495897e-03, -8.434919202241291e-01, -8.259546585123284e-01, -8.610516070535448e-01, -8.369572190508525e-01, -8.343798963145654e-01, -8.343798963145654e-01, -8.187883844875865e-01, -6.695102759832482e-01, -6.990663152613381e-01, -7.369749680669841e-01, -7.160231506207959e-01, -7.832135020802130e-01, -9.089588514293044e-01, -2.325039045788464e-01, -3.338186903880455e-01, -4.666948654931016e-01, -4.022639067763366e-01, -4.022639067763366e-01, -6.405149449780889e-01, -3.351644676174070e-02, -4.583236125871472e-02, -4.566726686355041e-01, -7.310321428328165e-02, -7.381839617033527e-02, -8.479597588986816e-03, -9.065539362486890e-04, -1.902939524462361e-03, -6.917129296391115e-02, -2.890928757375743e-03, -2.890928757375741e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_9_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_9", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.444675463066915e-08, -1.444670801340370e-08, -1.444640491302282e-08, -1.444710802892332e-08, -1.444675316081812e-08, -1.444675316081812e-08, -1.187575401533738e-05, -1.187827382926056e-05, -1.194389345277160e-05, -1.191304987379640e-05, -1.192130974552361e-05, -1.550790263357985e-05, -3.701739898504314e-03, -5.434795137457806e-03, -5.053386571635040e-03, -5.319181486166701e-03, -5.255027665627745e-03, -5.255027665627745e-03, -6.990262048034909e-01, -7.060936997784547e-01, -8.672979748295930e-04, -6.124628577405729e-01, -6.580352682609729e-01, -6.580352682609731e-01, -2.598183723145214e+02, -2.394709517212894e+02, -5.696180302160689e+00, -6.662311021164917e+02, -4.980883340624490e+02, -4.980883340624490e+02, -4.842897065254558e-06, -4.842418685600477e-06, -4.842897845084151e-06, -4.422769048815341e-06, -4.842646963962232e-06, -4.842646963962232e-06, -9.769752759295532e-05, -9.886574953345944e-05, -9.655071980648155e-05, -9.772687061108655e-05, -9.890820157428576e-05, -1.319517047714557e-04, -2.482814114850529e-02, -2.085303762721519e-02, -2.847331784676622e-02, -2.917001024008440e-02, -2.417491444189768e-02, -2.015293020288123e-02, -2.247336353330626e-01, -3.619981661888345e-01, -2.384477076602704e-01, -2.295275139110726e-04, -9.861272506754702e-01, -9.861272506754704e-01, -4.204786976998650e+01, -6.554039343536266e+02, -3.188634936099118e+03, -3.537781409015869e-01, -6.202314498382546e+01, -1.360963083741313e+03, -3.067350341529378e-02, -3.106338216196223e-02, -2.965498377152648e-02, -3.083149095196741e-02, -3.088946103830933e-02, -3.088946103830933e-02, -3.419943334448185e-02, -4.552135025759348e-02, -4.412311433581641e-02, -4.106455001915971e-02, -4.281980398078323e-02, -3.699199345498139e-02, -1.671582839723675e-02, -1.488829346088650e-01, -1.949822831378838e-01, -9.611180308215413e-02, -1.715660326491725e-01, -1.715660326491726e-01, -4.272555621123114e-02, -6.245037893253195e+00, -3.241720655532685e+00, -1.883975582110721e-01, -4.125070953078830e-01, -1.891602992337845e+00, -9.024222815475136e+01, -1.014477010238287e+04, -3.899818739737319e+03, -2.205254250423474e+00, -1.897654452526544e+03, -1.897654452526550e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_9_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_9", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.784914907588453e-03, 1.784916262659288e-03, 1.784918196008029e-03, 1.784898517500523e-03, 1.784909418710496e-03, 1.784909418710496e-03, 6.173242851061731e-03, 6.175117163533819e-03, 6.224421428546155e-03, 6.203933046923979e-03, 6.206774721275116e-03, 1.441741059560848e-02, 8.173339830233346e-03, 3.967279572995416e-02, 3.381059897633984e-02, 3.662028378908685e-02, 3.596223990869547e-02, 3.596223990869547e-02, 8.508080423385551e-02, 9.050296633275844e-02, 1.242634489752568e-03, 2.809265755645299e-02, 4.574074347281736e-02, 4.574074347281741e-02, 9.046254006638309e-04, 9.723565164601976e-04, 3.970546164735163e-03, 4.465226409273902e-04, 6.625180850116587e-04, 6.625180850116587e-04, 9.188948529304316e-03, 9.171619819261598e-03, 9.187964965564148e-03, 7.467547966393620e-03, 9.180264360846407e-03, 9.180264360846407e-03, 8.299175741462602e-03, 8.759665319400018e-03, 7.933957163736093e-03, 8.349758402747093e-03, 8.735815440280015e-03, 2.323050552561357e-02, 9.444562632694573e-02, 8.022361728104332e-02, 9.694068724624680e-02, 9.820162744859348e-02, 9.276217129401064e-02, 5.677179168643596e-02, -4.998111778944062e-04, 4.104223983388353e-02, -4.348716457680244e-04, 2.868899401013895e-02, 2.347664747170912e-02, 2.347664747170911e-02, -2.164677533424516e-08, 4.103773479610282e-04, 8.927647166918368e-04, -1.998857156889558e-04, -1.363657528024414e-07, 6.661713009073697e-04, 6.588503416395734e-02, 7.238880865054947e-02, 6.428597062150745e-02, 6.824784683191085e-02, 6.920003703390169e-02, 6.920003703390169e-02, 6.860902197318268e-02, 1.104571505181098e-01, 1.067934790334833e-01, 9.430638632200963e-02, 1.016061433295686e-01, 7.026881351861647e-02, 7.944969011782925e-02, 5.074221564892704e-03, 8.582422246073157e-02, 4.527170901202248e-02, 1.144371772351301e-01, 1.144371772351303e-01, 4.989351712571199e-02, 3.810259428776314e-03, 5.089139978670721e-03, 1.537694737531126e-01, -4.761675899443276e-04, 1.265365244018831e-02, 8.835579095571364e-04, 1.212950349290047e-04, 4.312870180063785e-04, 1.212191110893342e-02, 7.359123196124338e-04, 7.359123196124342e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
