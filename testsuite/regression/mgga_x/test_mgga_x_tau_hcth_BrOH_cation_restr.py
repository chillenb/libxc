
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_tau_hcth_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tau_hcth", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.116987960963772e+01, -2.116994417913071e+01, -2.117024177440039e+01, -2.116928099651355e+01, -2.116978290874074e+01, -2.116978290874074e+01, -3.413437173239126e+00, -3.413461830277072e+00, -3.414142814119873e+00, -3.413901654646206e+00, -3.413687523640401e+00, -3.413687523640401e+00, -6.541503362724677e-01, -6.535506587855116e-01, -6.436307548151212e-01, -6.476470969841684e-01, -6.464246080935346e-01, -6.464246080935346e-01, -2.140760295469692e-01, -2.113631699590152e-01, -7.664526108294353e-01, -2.472895259640598e-01, -2.288761776128183e-01, -2.288761776128184e-01, -2.150645692446421e-02, -2.263139122487631e-02, -1.197860664974980e-01, -1.243425466213669e-02, -1.561838230890892e-02, -1.561838230890892e-02, -5.180966663482812e+00, -5.182572677562606e+00, -5.181040811718336e+00, -5.182458466847787e+00, -5.181779349299179e+00, -5.181779349299179e+00, -1.945729191450330e+00, -1.960123993938631e+00, -1.940512919342155e+00, -1.953068158298593e+00, -1.956456767495811e+00, -1.956456767495811e+00, -5.793699726474520e-01, -6.431044646225846e-01, -5.337314569533188e-01, -5.666977806731369e-01, -5.896676708723111e-01, -5.896676708723111e-01, -2.442671977694321e-01, -2.746737264185302e-01, -2.338955036192142e-01, -1.939062304422076e+00, -2.372414175879715e-01, -2.372414175879714e-01, -9.595403095005797e-03, -1.215535651399031e-02, -9.292284699077259e-03, -1.783211418784395e-01, -1.119440902799150e-02, -1.119440902799150e-02, -6.017992163596574e-01, -5.919885642102128e-01, -5.952935053482058e-01, -5.981492138550055e-01, -5.967075352309944e-01, -5.967075352309944e-01, -5.875440511051624e-01, -4.886114867810275e-01, -5.101988645183657e-01, -5.351023287944364e-01, -5.216348585885084e-01, -5.216348585885084e-01, -6.732884488296175e-01, -2.805162276454017e-01, -2.864345345636716e-01, -3.410314598890929e-01, -3.041256682907226e-01, -3.041256682907226e-01, -4.465620293362532e-01, -1.152888838267307e-01, -1.518821780445419e-01, -3.290043929060064e-01, -2.039107344733928e-01, -2.039107344733929e-01, -3.031379355165193e-02, -3.250649198818212e-03, -6.822079018486775e-03, -1.971845900996763e-01, -1.035862945568336e-02, -1.035862945568335e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_tau_hcth_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tau_hcth", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.868780940616681e+01, -2.868794910242988e+01, -2.868848134952528e+01, -2.868640376157214e+01, -2.868750502066231e+01, -2.868750502066231e+01, -4.721537038329682e+00, -4.721579745062982e+00, -4.722582335820224e+00, -4.720740053096102e+00, -4.721233725529927e+00, -4.721233725529927e+00, -8.458353075634978e-01, -8.423319840936925e-01, -7.404192095865921e-01, -7.570717292086935e-01, -7.564011617453027e-01, -7.564011617453027e-01, -5.990937094006026e-02, -7.228835065888185e-02, -9.806057326820580e-01, -2.720211622633602e-02, -9.443817293743589e-03, -9.443817293743230e-03, -2.858329358348171e-02, -3.006494370884349e-02, -1.459519258205047e-01, -1.656211906787990e-02, -2.078674133157083e-02, -2.078674133157083e-02, -7.124892857188303e+00, -7.128828909493844e+00, -7.125067569390453e+00, -7.128542963245730e+00, -7.126895187240862e+00, -7.126895187240862e+00, -2.355449195654535e+00, -2.387352955000687e+00, -2.310733529025826e+00, -2.341008511767816e+00, -2.393745926331496e+00, -2.393745926331496e+00, -7.907655743757535e-01, -8.830816253292223e-01, -7.351181912280365e-01, -7.816854515732706e-01, -8.068262808546763e-01, -8.068262808546763e-01, -1.547266133235365e-01, -1.031243923138867e-02, -1.652330324978965e-01, -2.657736745471678e+00, -7.027197788106190e-02, -7.027197788106228e-02, -1.278496779031275e-02, -1.619002726059237e-02, -1.237053664987892e-02, -1.779951876041551e-01, -1.490300922146093e-02, -1.490300922146089e-02, -8.128489549874870e-01, -8.128062459575121e-01, -8.135553125085857e-01, -8.135456858799059e-01, -8.136176161850315e-01, -8.136176161850315e-01, -7.884646975481595e-01, -6.230383206543123e-01, -6.736390552503647e-01, -7.334395489744563e-01, -7.028892854205651e-01, -7.028892854205651e-01, -9.255803380076357e-01, -5.994538221459951e-02, -1.886499429961324e-01, -4.398676645439487e-01, -3.270376775897357e-01, -3.270376775897358e-01, -5.823907040956577e-01, -1.421557044735753e-01, -1.736702514133148e-01, -4.420136836148613e-01, -1.519413871881450e-01, -1.519413871881452e-01, -4.018639706049508e-02, -4.333474772581266e-03, -9.091445956105710e-03, -1.599039118600140e-01, -1.379114227249827e-02, -1.379114227249828e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_tau_hcth_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tau_hcth", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.034164154377530e-09, 1.034347085405780e-09, 1.034816650695348e-09, 1.032100544892163e-09, 1.033572620903456e-09, 1.033572620903456e-09, 1.881141758129442e-06, 1.881800012368699e-06, 1.893776359585299e-06, 1.838251692060306e-06, 1.865971414206437e-06, 1.865971414206437e-06, -6.781848667050282e-04, -7.540832305007690e-04, -2.859231420595347e-03, -2.565849164996688e-03, -2.565306440720964e-03, -2.565306440720964e-03, -1.326898888165537e+00, -1.231676984887889e+00, -4.812606980092878e-04, -3.525711500890801e+00, -2.636281635994372e+00, -2.636281635994371e+00, -1.357884957262210e+01, -1.434688695697431e+01, -8.093875971415914e+00, -1.233430890843385e+01, -1.567280823986259e+01, -1.567280823988773e+01, 8.816758600615408e-07, 8.952761210676952e-07, 8.822384910240402e-07, 8.942457321063321e-07, 8.886038398835719e-07, 8.886038398835719e-07, -4.364100329914330e-05, -4.279125041340825e-05, -4.672726665488499e-05, -4.589821773110147e-05, -4.169252132641282e-05, -4.169252132641282e-05, 1.482969475271282e-03, 8.627662182546476e-03, 2.509592399982852e-03, 1.201500695802837e-02, 2.201275973042900e-03, 2.201275973042900e-03, -5.276957400576650e+00, -1.305006215262987e+00, -5.912842391730289e+00, 1.071969159471888e-04, -5.559327625328824e+00, -5.559327625328820e+00, -1.625105068478967e+01, -1.451661410488036e+01, -9.117459053691907e+01, -9.080107059905288e+00, -4.242866553484981e+01, -4.242866553491706e+01, 1.497717993452347e-02, 1.230062482943724e-02, 1.330442949230811e-02, 1.408538048211675e-02, 1.370106064976046e-02, 1.370106064976046e-02, 1.782699933956543e-02, -1.012113451726917e-02, -3.537354755263119e-03, 5.995490847003411e-03, 9.762580557682582e-04, 9.762580557682590e-04, 6.823612461441092e-03, -5.232264374577088e-01, -2.142094275559540e-01, -2.446818182421535e-02, -8.697928939306239e-02, -8.697928939306249e-02, -9.551059613269410e-03, -7.376973582394051e+00, -7.366196434136857e+00, -1.210773492769580e-02, -9.692639155336201e+00, -9.692639155336122e+00, -1.094837861083464e+01, -7.122716270184920e+01, -3.447404791003308e+01, -9.908094014829853e+00, -5.359063581677070e+01, -5.359063581673342e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_tau_hcth_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tau_hcth", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([3.098176048841716e-05, 3.097538322324473e-05, 3.095344506640940e-05, 3.104802463048667e-05, 3.099754197997549e-05, 3.099754197997549e-05, 3.965587555608278e-04, 3.965965409788247e-04, 3.982327318514401e-04, 4.042853942885320e-04, 4.008421669127827e-04, 4.008421669127827e-04, -7.016190338411703e-04, -7.397834715665057e-04, -1.938188864984388e-03, -1.686562771226117e-03, -1.713993301969602e-03, -1.713993301969602e-03, -4.259789613039559e-02, -3.969525165079009e-02, -6.252505351170620e-04, -2.653311524092051e-02, -3.935809166508222e-02, -3.935809166508244e-02, -7.200565931347960e-08, -9.890305443411352e-08, -1.543599330388775e-04, -2.913366298150783e-09, -1.498041961459978e-08, -1.498041961459978e-08, -1.474171685117412e-05, -1.481322711640088e-05, -1.476309111353394e-05, -1.482628808615634e-05, -1.478239151651568e-05, -1.478239151651568e-05, 2.655140893325129e-03, 2.928913496576451e-03, 2.588408754965688e-03, 2.864906946058949e-03, 2.823948949948123e-03, 2.823948949948123e-03, 3.191621710303873e-03, -1.925138550113041e-04, 3.256007694719954e-03, -3.819085541035102e-04, 2.302572028952012e-03, 2.302572028952012e-03, -7.816607406834267e-03, -3.816852879665398e-02, -6.108777383552380e-03, -1.351796618125389e-04, -2.277598999491590e-02, -2.277598999491608e-02, -4.588599327050694e-10, -2.161863243811411e-09, -1.298764052172898e-08, -1.659841952560130e-03, -7.834420349195936e-09, -7.834420416076244e-09, 3.331630510396197e-04, 8.102030563496193e-04, 8.167173408475387e-04, 6.808369522217348e-04, 7.659845112018988e-04, 7.659845112018988e-04, -5.752434793466114e-05, 1.500589758508659e-02, 6.803076579644049e-03, 3.481543026385663e-04, 2.730096677268572e-03, 2.730096677268572e-03, -3.160938116692973e-04, -3.527428562456187e-02, -1.658749480110395e-02, 8.557379549515793e-03, 3.247995405788508e-03, 3.247995405788527e-03, 1.140387675908912e-02, -1.283365384597686e-04, -4.617744685908931e-04, 1.036263695914898e-02, -6.587599547183004e-03, -6.587599547183383e-03, -1.328533023226125e-07, -4.000686072965737e-12, -7.911923080020929e-10, -5.812397544707496e-03, -9.042608207309624e-09, -9.042608268807649e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
