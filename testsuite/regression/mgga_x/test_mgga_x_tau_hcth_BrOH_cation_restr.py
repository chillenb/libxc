
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_tau_hcth_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tau_hcth", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.195575749317330e+01, -2.195581883862938e+01, -2.195611041814526e+01, -2.195519733636822e+01, -2.195567309257707e+01, -2.195567309257707e+01, -3.573031277894414e+00, -3.573039348781691e+00, -3.573314671141290e+00, -3.573527171020582e+00, -3.573133085179080e+00, -3.474416591832543e+00, -6.890955257473296e-01, -7.226567954454587e-01, -7.337253181814292e-01, -7.245140627247822e-01, -7.265511194080024e-01, -7.265511194080024e-01, -2.187429156988091e-01, -2.167395375769879e-01, -8.035884846779942e-01, -2.696445014829896e-01, -2.454908891056087e-01, -2.454908891056087e-01, -2.150674404006552e-02, -2.263202003203617e-02, -1.203273411536757e-01, -1.243494193064905e-02, -1.561933099874423e-02, -1.561933099874423e-02, -5.180440062463160e+00, -5.182044111301289e+00, -5.180524770458554e+00, -5.352922784131586e+00, -5.181246221240787e+00, -5.181246221240787e+00, -2.010670939466109e+00, -2.025277560615787e+00, -2.000008110601132e+00, -2.012914795503327e+00, -2.023901531066116e+00, -1.977998960229570e+00, -5.823487948334369e-01, -6.317644974853295e-01, -5.411404173276919e-01, -5.600569193400516e-01, -5.911670287343729e-01, -6.127317866081138e-01, -9.381035626117214e-02, -2.829342516757262e-01, -8.678667400648081e-02, -1.902529254758413e+00, -2.471233139997224e-01, -2.471233139997223e-01, -2.760840799222053e-03, -1.215681608366946e-02, -9.293172259302035e-03, -5.837163988898836e-02, -3.222262597898979e-03, -1.119615842419260e-02, -5.988973942524478e-01, -5.897411767226700e-01, -6.037099312537287e-01, -5.954742000293531e-01, -5.941263632955207e-01, -5.941263632955207e-01, -5.818212538977163e-01, -4.898741655640514e-01, -5.110099949154741e-01, -5.340310634889622e-01, -5.217323796670499e-01, -5.415621446047487e-01, -6.617111335583894e-01, -2.251653860432365e-01, -2.943485983808000e-01, -3.571606018117420e-01, -3.119175220998827e-01, -3.119175220998827e-01, -4.657722421321971e-01, -1.155186261562049e-01, -1.532495024549876e-01, -3.343824204112945e-01, -7.432508169266128e-02, -2.096573175466895e-01, -3.033440182461067e-02, -3.250815946472343e-03, -6.822184869065833e-03, -2.002845117269280e-01, -1.035980866489181e-02, -1.035980866489182e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_tau_hcth_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tau_hcth", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.928045603094355e+01, -2.928053705234548e+01, -2.928092271340649e+01, -2.927971670493965e+01, -2.928034501070295e+01, -2.928034501070295e+01, -4.766324860762572e+00, -4.766336495763797e+00, -4.766726536839265e+00, -4.767000835889245e+00, -4.766476120035033e+00, -4.243402397775986e+00, -9.187000638342618e-01, -5.249001845996466e-01, -4.064318715564739e-01, -4.594992927719267e-01, -4.474687720809656e-01, -4.474687720809656e-01, -5.308966990377777e-02, -6.342557870048839e-02, -1.071198979653488e+00, -5.180086178437789e-02, -1.004690580750828e-02, -1.004690580750757e-02, -2.858444045208563e-02, -3.006745497297111e-02, -1.480321205663022e-01, -1.656486699541610e-02, -2.079053320752230e-02, -2.079053320752230e-02, -7.122769516096602e+00, -7.126757076453986e+00, -7.122989710173744e+00, -7.136644411158111e+00, -7.124776021962124e+00, -7.124776021962124e+00, -2.681734293468260e+00, -2.701311567555539e+00, -2.667437232157441e+00, -2.684738064983392e+00, -2.699470836022842e+00, -2.321277285424792e+00, -7.460369600561191e-01, -8.549305321902058e-01, -6.727867757461272e-01, -7.183444760280924e-01, -7.639975475529456e-01, -8.174395040512059e-01, -1.250761690338583e-01, -1.075766201040644e-02, -1.157124273036548e-01, -2.472723054199889e+00, -8.822520712245188e-02, -8.822520712245173e-02, -3.681121065482704e-03, -1.619586317374921e-02, -1.237408465693338e-02, -7.782823255251679e-02, -4.296350129273045e-03, -1.491000263516621e-02, -8.155283978218877e-01, -8.128958314190761e-01, -8.047694470766010e-01, -8.153220641475231e-01, -8.150155487314945e-01, -8.150155487314945e-01, -7.940627492280500e-01, -6.170667342003313e-01, -6.642737792430559e-01, -7.242408148042511e-01, -6.921662104191576e-01, -7.223494789959077e-01, -8.817077019632429e-01, -3.001499033244755e-01, -1.694187039256479e-01, -4.763548082384891e-01, -3.017193359929496e-01, -3.017193359929498e-01, -6.213463454384223e-01, -1.430426624383051e-01, -1.787708168756851e-01, -4.125805822717334e-01, -9.909760165178852e-02, -1.691320600565868e-01, -4.026864841718605e-02, -4.334141729807331e-03, -9.091869267435255e-03, -1.695329004861651e-01, -1.379585632921534e-02, -1.379585632921536e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_tau_hcth_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tau_hcth", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.024917292925140e-08, 1.024907292458976e-08, 1.024858727555808e-08, 1.025007692493353e-08, 1.024930220899592e-08, 1.024930220899592e-08, 1.287335609962931e-05, 1.287364037253708e-05, 1.288029337054358e-05, 1.287292425716176e-05, 1.287906523693374e-05, -5.055497684302271e-06, 9.001110263341812e-03, -4.845479006855468e-03, -5.829623746471122e-03, -5.448614862037128e-03, -5.531621359534557e-03, -5.531621359534557e-03, -1.302034415278450e+00, -1.210437828366844e+00, 4.999743198678496e-03, -2.768220977606570e+00, -2.311668271206122e+00, -2.311668271206121e+00, -1.335375417900154e+01, -1.391382212054011e+01, -6.502257769108642e+00, -9.802566204640474e+00, -1.364371724323111e+01, -1.364371724323111e+01, 8.704857516240015e-07, 8.842111404739731e-07, 8.712810259557360e-07, 2.913978058576093e-06, 8.773606412759605e-07, 8.773606412759605e-07, 1.257257005536674e-04, 1.225615054541874e-04, 1.281113032837236e-04, 1.252135962363018e-04, 1.228697589765416e-04, -5.082723696500028e-05, -4.682384743746902e-03, 1.213366518360135e-03, -8.227916830135611e-03, -5.362493515280450e-03, -3.715385040831365e-03, 1.617836781075164e-02, 2.840679454636485e+01, -1.232254675656097e+00, 3.881974306842339e+01, -3.000208280021334e-05, -4.737475127886004e+00, -4.737475127885999e+00, 3.803853209878627e+07, -8.665510346859186e+00, -7.005987721173700e+01, 1.901752748778608e+02, 2.049960401991223e+07, -2.688719571275813e+01, 1.363948175629163e-02, 1.094493887760737e-02, 1.736916666271042e-02, 1.273691912992000e-02, 1.234865144589826e-02, 1.234865144589826e-02, 1.479690682702478e-02, -1.143460799962096e-02, -5.736908770630299e-03, 2.926409531513041e-03, -1.838881364462159e-03, 2.736130962226251e-02, -3.796307214206175e-04, 8.094620984192772e-01, -2.178617903938274e-01, 1.260797758424067e-01, -1.030659132076207e-01, -1.030659132076207e-01, 4.483261103446809e-02, -6.621453355589420e+00, -5.659963125746584e+00, -5.770462775926031e-02, 7.218232894368585e+01, -7.630852184979029e+00, -6.379165696805139e+00, -1.061210917367547e+01, -3.042377724135023e+01, -8.517669027485368e+00, -3.831980051110187e+01, -3.831980051098483e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_tau_hcth_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tau_hcth", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [3.584072942721650e-06, 3.583711077865873e-06, 3.582240572175018e-06, 3.587596929078685e-06, 3.584771715514856e-06, 3.584771715514856e-06, 1.716531580852649e-05, 1.717630923653832e-05, 1.746654886020462e-05, 1.734751035766788e-05, 1.736206687803754e-05, 2.460087769029885e-03, -8.968835413265332e-06, -4.684991954514792e-03, -8.340979163165629e-03, -6.765449976140066e-03, -7.140208539217630e-03, -7.140208539217630e-03, -4.631996827425831e-02, -4.410297551348056e-02, -1.023787215472325e-05, -3.169095363648600e-02, -4.679147581604488e-02, -4.679147581604513e-02, -7.200744882097291e-08, -9.890816941646783e-08, -1.556366545718256e-04, -2.913666260568594e-09, -1.498211426232121e-08, -1.498211426232121e-08, -1.546462826408322e-05, -1.556579247017724e-05, -1.547324354407952e-05, -8.502335132372463e-06, -1.552803402642220e-05, -1.552803402642220e-05, 1.618121827401546e-05, 1.863876461560935e-05, 1.432160903983517e-05, 1.645343693724776e-05, 1.850096207628003e-05, 3.616011438833621e-03, 1.084399360511053e-02, 8.336835852811269e-04, 1.617501708782072e-02, 1.098873852569548e-02, 8.705688941946517e-03, 2.161016866285840e-04, -2.350740830728929e-06, -4.106532838165470e-02, -1.740900002804332e-06, 2.320320175500514e-03, -2.461282525600422e-02, -2.461282525600441e-02, -8.520415955576937e-14, -2.162346821192466e-09, -1.298995108003419e-08, -3.861696265589540e-07, -1.455880394763136e-12, -7.836700895428949e-09, 7.390178775890101e-04, 7.833986131809192e-04, -4.577447189713622e-04, 9.260308297660708e-04, 9.425134409403219e-04, 9.425134409403219e-04, 8.586967027853580e-04, 1.675807036252593e-02, 8.596941927190821e-03, 7.480835182912649e-04, 4.047682336993878e-03, 2.133561616912807e-04, 2.576354484492888e-03, -3.776878153219622e-05, -1.970484114914889e-02, 8.416000326356530e-05, 4.543752932379587e-03, 4.543752932379612e-03, 1.467291159078679e-04, -1.288049835988098e-04, -4.693289876579119e-04, 2.615931506545038e-02, -1.822130241515882e-06, -6.922785261646255e-03, -1.330213939974436e-07, -4.001068452753885e-12, -7.912151784540433e-10, -5.976444597146842e-03, -9.044525588789200e-09, -9.044525650300264e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
