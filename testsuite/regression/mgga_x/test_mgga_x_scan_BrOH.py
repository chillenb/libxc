
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_scan_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.164261480451904e+01, -2.164272993477754e+01, -2.164327643361403e+01, -2.164139683097634e+01, -2.164267516277071e+01, -2.164267516277071e+01, -3.116832696339883e+00, -3.116982243921972e+00, -3.121593652963578e+00, -3.120056959446130e+00, -3.116889035213816e+00, -3.765974006981416e+00, -5.266856564807042e-01, -7.146210966597492e-01, -6.938513963493353e-01, -7.001135786908398e-01, -7.151302397147177e-01, -7.151302397147177e-01, -1.951569374341467e-01, -1.979250539134912e-01, -6.120239740535027e-01, -1.367054375752378e-01, -1.959850664055233e-01, -1.959850664055233e-01, -6.927645856155434e-03, -7.351796178558650e-03, -3.931379090709159e-02, -2.387431498604217e-03, -7.276773741675608e-03, -7.276773741675546e-03, -5.666542301438776e+00, -5.667601371595872e+00, -5.666654321922782e+00, -5.434851121635073e+00, -5.667080293845722e+00, -5.667080293845722e+00, -1.681685259376664e+00, -1.705790675619823e+00, -1.671668188857897e+00, -1.690419977659997e+00, -1.711418761459963e+00, -2.132058309946530e+00, -6.301973950768262e-01, -6.859350073953744e-01, -5.971710001205305e-01, -6.241394023091413e-01, -6.549404925248582e-01, -5.704275636766402e-01, -7.137399436341753e-02, -1.942258417220568e-01, -7.049780577346003e-02, -2.084012215862873e+00, -1.155980963486767e-01, -1.155980963486767e-01, -3.430414959781201e-03, -2.784490476470198e-03, -2.127248866081254e-03, -4.415673249523032e-02, -3.572106588604475e-03, -2.500278706319723e-03, -6.523986383663397e-01, -6.488404051827572e-01, -6.410229832262366e-01, -6.511067664901988e-01, -6.506146565996668e-01, -6.506146565996668e-01, -6.314408180569842e-01, -5.458224102951187e-01, -5.710151277364587e-01, -5.942454469897521e-01, -5.824255888894184e-01, -5.344196863558993e-01, -7.188525183816071e-01, -1.782672854433976e-01, -2.947273357607676e-01, -3.030943229821872e-01, -3.346490227504230e-01, -3.346490227504230e-01, -4.114562849282259e-01, -3.577486136498493e-02, -5.084813598301510e-02, -3.589819483615526e-01, -5.785294914062154e-02, -7.857078250518597e-02, -7.936111588989599e-03, -4.640588152050842e-04, -1.221564564401199e-03, -7.494498823676608e-02, -2.066175921159665e-03, -2.066175921159652e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_scan_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.272447974059477e+01, -3.272446480019642e+01, -3.272446541130515e+01, -3.272469915079476e+01, -3.272447142398745e+01, -3.272447142398745e+01, -5.189420155650911e+00, -5.189609325044084e+00, -5.195058896307764e+00, -5.193463306125259e+00, -5.189497441144123e+00, -4.708191417920003e+00, -7.963846934373227e-01, -8.306378980324959e-01, -7.881846004441856e-01, -8.038322261991524e-01, -8.316701363711463e-01, -8.316701363711463e-01, -2.211216266260300e-01, -2.260804368963721e-01, -8.739776839186756e-01, -8.768462441556324e-02, -2.225854533453671e-01, -2.225854533453671e-01, 4.544433288171638e-01, 4.400369237097445e-01, 1.778021686833474e-01, 1.173075156230416e+00, 4.348738320564943e-01, 4.348738320565785e-01, -7.410142599511709e+00, -7.412451016560899e+00, -7.410391257149159e+00, -7.749954055122330e+00, -7.411309363538432e+00, -7.411309363538432e+00, -2.736751998279304e+00, -2.791975309995947e+00, -2.714074863806044e+00, -2.756415613919126e+00, -2.805511405250111e+00, -2.638196264105014e+00, -8.040718518078769e-01, -8.905116020565462e-01, -7.540401036060229e-01, -8.005466045815122e-01, -8.410428567155946e-01, -9.336540157131070e-01, -9.633113137787259e-02, -1.924229594547931e-01, -9.521575631890913e-02, -2.677824031584507e+00, -6.401249353783155e-02, -6.401249353783155e-02, -4.574068231605231e-03, 1.000445417891465e+00, 6.858317536978815e-01, -5.915466441979970e-02, -4.763015891578311e-03, 9.752548628067490e-01, -8.650411515342558e-01, -8.561795602687955e-01, -8.714563465315907e-01, -8.617597708075274e-01, -8.605281793362285e-01, -8.605281793362285e-01, -8.357513566792193e-01, -6.945414472902903e-01, -7.356225041515084e-01, -7.736458144728344e-01, -7.542357473599459e-01, -8.322561817859448e-01, -9.288891323682664e-01, -2.572876334618829e-01, -3.456769975511929e-01, -4.950227638951462e-01, -4.062123464052229e-01, -4.062123464052229e-01, -6.776299801157110e-01, 2.071502271229461e-01, 1.366939097785277e-01, -4.496566751843071e-01, -7.794659620817339e-02, 1.607348860717259e-02, 6.089670419565247e-01, 2.126391741774440e+00, 1.104291536430416e+00, 1.570367755741314e-02, 9.418223023960401e-01, 9.418223023961341e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_scan_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.695665350025749e-08, -1.695612112613524e-08, -1.695365905776669e-08, -1.696234142501744e-08, -1.695637395776085e-08, -1.695637395776085e-08, -1.809608034425132e-05, -1.809809711917601e-05, -1.815147890366954e-05, -1.812611605352873e-05, -1.809629683615962e-05, -6.795238221704949e-06, -1.017148028310507e-02, -4.677307270649982e-03, -5.158767391463823e-03, -5.020950446757298e-03, -4.666362947629486e-03, -4.666362947629486e-03, -8.226078002823619e-01, -7.826451539075848e-01, -5.004822958334034e-03, -2.808700987717355e+00, -8.103074879338501e-01, -8.103074879338501e-01, -5.429955879794747e+04, -4.569356757076179e+04, -2.176106378365425e+02, -7.377912821183112e+05, -4.765920879804996e+04, -4.765920879805885e+04, -1.676795768658291e-06, -1.677313154353140e-06, -1.676858960736080e-06, -3.646558789221320e-06, -1.677046949846474e-06, -1.677046949846474e-06, -1.477818424372599e-04, -1.493620354704400e-04, -1.471645650066198e-04, -1.481737468366202e-04, -1.501081488461124e-04, -6.448264302804286e-05, -9.328333165297228e-03, -7.372296645335492e-03, -1.108808298400821e-02, -9.956791127709166e-03, -8.265208462587267e-03, -3.040575202351752e-02, -2.362450017172247e+01, -7.762876300028124e-01, -2.485330440712595e+01, -8.090178018817382e-05, -5.367908914944704e+00, -5.367908914944704e+00, -4.336284025461513e+06, -5.282533959466405e+05, -1.706160430715979e+06, -1.591658545250075e+02, -3.688156345107478e+06, -7.553338518353656e+05, -1.081862003598139e-02, -1.057443629594547e-02, -1.456791723447246e-02, -1.072373527954609e-02, -1.068911925639921e-02, -1.068911925639921e-02, -1.212609580744440e-02, -1.637620462422237e-02, -1.457472842818816e-02, -1.337016965440339e-02, -1.393049381135869e-02, -4.745364578496837e-02, -5.915408160491520e-03, -7.154815929628652e-01, -1.631192661531668e-01, -1.460916617479903e-01, -1.024994718748933e-01, -1.024994718748933e-01, -6.293678603361375e-02, -2.910885228525099e+02, -9.047220220896880e+01, -8.275263869217339e-02, -5.455699770880086e+01, -2.154309931969112e+01, -2.813922581783599e+04, -5.725768961394983e+07, -6.091911869570818e+06, -2.600256592903847e+01, -1.407951236512075e+06, -1.407951236512220e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_scan_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.267649335017877e-03, 2.267600731878251e-03, 2.267383844215109e-03, 2.268175328964783e-03, 2.267623760836604e-03, 2.267623760836604e-03, 7.781657244284166e-03, 7.783342117316699e-03, 7.830700665765189e-03, 7.812453071191944e-03, 7.782088562927396e-03, 4.898691921875385e-03, 8.799701452204219e-03, 2.368902826971369e-02, 2.405540727096207e-02, 2.398895445804271e-02, 2.368075668262858e-02, 2.368075668262858e-02, 8.540440463010242e-02, 8.459545899129252e-02, 2.520665240748416e-03, 1.084288004364234e-01, 8.515445243419882e-02, 8.515445243419882e-02, 9.123819812839234e-01, 8.825012100584846e-01, 2.857687842083578e-01, 1.366223695846061e+00, 8.919896063267247e-01, 8.919896063268918e-01, 3.909821366068188e-03, 3.912220158009749e-03, 3.910090087521963e-03, 7.301137134380210e-03, 3.911019426314105e-03, 3.911019426314105e-03, 9.495979828309008e-03, 1.020307757401030e-02, 9.204860472741872e-03, 9.737045879248823e-03, 1.040028746090603e-02, 8.483135560616424e-03, 3.101585885973203e-02, 3.090322901911055e-02, 3.165578470631258e-02, 3.197770109689574e-02, 3.062936181770025e-02, 8.223037961672791e-02, 6.982671428061610e-04, 8.158337985141760e-02, 7.908555987674052e-04, 9.651955747750811e-03, 1.267342975011335e-01, 1.267342975011335e-01, 1.561481173721539e-07, 1.310978292817981e+00, 1.782866837596373e+00, 1.712451445126917e-04, 1.798325938609721e-07, 1.417926128387291e+00, 3.722093054683834e-02, 3.624976641390363e-02, 4.662004502592116e-02, 3.685398172543754e-02, 3.671796137368721e-02, 3.671796137368721e-02, 3.800779781761213e-02, 3.546884558543688e-02, 3.565068349205375e-02, 3.626395116013887e-02, 3.589091940878075e-02, 9.860717401069473e-02, 2.874804602278378e-02, 1.149293736012007e-02, 5.781029698802395e-02, 5.562557410405822e-02, 5.258404010606908e-02, 5.258404010606904e-02, 6.079008513057933e-02, 3.031136595890545e-01, 2.352047654120010e-01, 5.160900273209429e-02, 6.339025662778579e-04, 1.734296010663133e-01, 7.609375048815714e-01, 2.914812870045828e+00, 2.126245568010708e+00, 1.817518275517101e-01, 1.622295103226026e+00, 1.622295103226184e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
