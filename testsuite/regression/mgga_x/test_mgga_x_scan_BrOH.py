
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_scan_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.318339914148628e+01, -2.318345910197267e+01, -2.318379861363345e+01, -2.318281803007507e+01, -2.318343012556344e+01, -2.318343012556344e+01, -3.351789253062242e+00, -3.351901113861656e+00, -3.355632250953928e+00, -3.356709597427921e+00, -3.351822169886218e+00, -3.351822169886218e+00, -5.954553945743075e-01, -5.948268435476736e-01, -5.795878181467576e-01, -5.911131669707188e-01, -5.952347299533233e-01, -5.952347299533233e-01, -1.873694734021050e-01, -1.891257588365813e-01, -6.708514147685095e-01, -1.127025978478009e-01, -1.877586969211137e-01, -1.877586969211137e-01, -5.533458700071742e-03, -5.872195039734410e-03, -3.182061978498674e-02, -2.019697325836086e-03, -5.813730031795093e-03, -5.813730031795093e-03, -5.665516439713310e+00, -5.666586557485823e+00, -5.665642651540197e+00, -5.666473868994697e+00, -5.666042518767213e+00, -5.666042518767213e+00, -2.076648788439879e+00, -2.098765651870328e+00, -2.074042279473390e+00, -2.091457155248559e+00, -2.095183858584909e+00, -2.095183858584909e+00, -6.050352524210153e-01, -6.570536446458534e-01, -5.512462952586503e-01, -5.749595321398566e-01, -6.362327360759351e-01, -6.362327360759351e-01, -8.030095381609284e-02, -1.845863088872587e-01, -7.960657998379492e-02, -1.900869852464601e+00, -9.849180633483870e-02, -9.849180633483870e-02, -1.933853077745648e-03, -2.316808114245659e-03, -1.721324430755661e-03, -4.675175480372637e-02, -2.114205496194594e-03, -2.114205496194594e-03, -6.497659087756019e-01, -6.463900009164198e-01, -6.476080832769212e-01, -6.485420630856350e-01, -6.480740287194895e-01, -6.480740287194895e-01, -6.261305957170107e-01, -5.434889102378934e-01, -5.678638737442878e-01, -5.902873546131684e-01, -5.786865972317389e-01, -5.786865972317389e-01, -6.771967728490444e-01, -2.421271598356948e-01, -2.842549722365002e-01, -3.529094477009883e-01, -3.205007807113797e-01, -3.205007807113797e-01, -4.755323869450900e-01, -2.892989264231764e-02, -4.127520957192723e-02, -3.341341477261902e-01, -6.466373972613924e-02, -6.466373972613924e-02, -6.618025556422120e-03, -4.077030572689022e-04, -9.838804502928715e-04, -6.158160221488759e-02, -1.754568904173751e-03, -1.754568904173748e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_scan_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.019283204116238e+01, -3.019292513471113e+01, -3.019338507781345e+01, -3.019186121468399e+01, -3.019288074359753e+01, -3.019288074359753e+01, -4.692092322278951e+00, -4.692807765363681e+00, -4.714314291967351e+00, -4.715127296524649e+00, -4.692252103091816e+00, -4.692252103091816e+00, -8.378871595825323e-01, -8.364798461736194e-01, -8.051944099982570e-01, -8.272148143509894e-01, -8.373985001097999e-01, -8.373985001097999e-01, -1.923225767091775e-01, -1.967338053479508e-01, -8.776203144085480e-01, -1.554842487120437e-01, -1.931683265366635e-01, -1.931683265366635e-01, -8.074310252165737e-03, -9.049648218795841e-03, -4.822625736697728e-02, -3.647723190539697e-03, -8.595580618316386e-03, -8.595580618316433e-03, -7.410566053093105e+00, -7.412875443797663e+00, -7.410809397943653e+00, -7.412604700205801e+00, -7.411740662446503e+00, -7.411740662446503e+00, -2.556658805847201e+00, -2.593119212325683e+00, -2.547953575593522e+00, -2.577216686854430e+00, -2.593234818365954e+00, -2.593234818365954e+00, -8.110178921907742e-01, -9.218517928018375e-01, -7.734569750549539e-01, -8.537680657818232e-01, -8.469041261216701e-01, -8.469041261216701e-01, -1.103479340321920e-01, -1.218155800226146e-01, -1.086755814493835e-01, -2.908704834380713e+00, -1.061174408115453e-01, -1.061174408115453e-01, -3.495590740899241e-03, -4.161305266790308e-03, -3.093767551254229e-03, -7.044068843476199e-02, -3.796737468278027e-03, -3.796737468278027e-03, -8.681887552670614e-01, -8.584905869024095e-01, -8.618969081656929e-01, -8.645798499911749e-01, -8.632321563992299e-01, -8.632321563992299e-01, -8.423365619213369e-01, -6.932873692027992e-01, -7.354197055695626e-01, -7.751961462905863e-01, -7.548395750440334e-01, -7.548395750440334e-01, -9.767004276392172e-01, -2.519134742058556e-01, -3.177370412159807e-01, -4.590669598145446e-01, -3.864782740320531e-01, -3.864782740320532e-01, -6.089544865192442e-01, -4.163209420258954e-02, -6.164984655696119e-02, -4.513862131417877e-01, -8.724036158289812e-02, -8.724036158289820e-02, -1.134834830976102e-02, -7.662894153008429e-04, -1.810390864446439e-03, -8.441618056573688e-02, -3.161430017322410e-03, -3.161430017322404e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_scan_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.968847656418268e-09, -5.968799039896208e-09, -5.968344805545572e-09, -5.969131879423949e-09, -5.968824178813764e-09, -5.968824178813764e-09, -1.541414652286881e-05, -1.543910575731685e-05, -1.618428071269727e-05, -1.625293474541150e-05, -1.541832228524137e-05, -1.541832228524137e-05, -4.882085527633570e-03, -4.853086215029665e-03, -4.268076721257800e-03, -5.139253691100130e-03, -4.872716900526661e-03, -4.872716900526661e-03, -1.671372823369598e+00, -1.679146820360523e+00, -1.612829417278740e-03, -2.516651151035340e-01, -1.688607604113018e+00, -1.688607604113018e+00, -8.450512493317973e+01, -2.542218511463780e+01, 7.663554485718586e-01, 3.232890460485415e+02, -6.707680730608801e+01, -6.707680730608273e+01, -1.684593633906527e-06, -1.685028766139678e-06, -1.684549102662780e-06, -1.684892407306775e-06, -1.684936313467024e-06, -1.684936313467024e-06, -9.562696728159734e-05, -8.803686901050564e-05, -9.343387376925467e-05, -8.739332803276968e-05, -9.304526073843705e-05, -9.304526073843705e-05, -1.968279657192603e-02, -1.634580960031328e-02, -3.356369847410361e-02, -3.233565065526400e-02, -1.476789723799730e-02, -1.476789723799730e-02, -6.129840318518475e-01, -1.748882603680905e+00, -7.627191428732290e-01, -2.821828217057011e-04, -2.917393882398286e+00, -2.917393882398286e+00, 3.557012609960631e+02, 2.792324808340134e+02, 8.315449820587828e+02, 9.649625881297865e-01, 4.093339483074855e+02, 4.093339483074853e+02, -1.193398489032421e-02, -1.161471389809626e-02, -1.172581420237113e-02, -1.181565818528611e-02, -1.177087884816934e-02, -1.177087884816934e-02, -1.477557441935113e-02, -1.813786774564090e-02, -1.664371857277571e-02, -1.570854751840652e-02, -1.625847574820320e-02, -1.625847574820321e-02, -1.595794469264724e-02, -4.657086981430126e-01, -3.135175958830415e-01, -1.756125770484851e-01, -2.158557938090326e-01, -2.158557938090327e-01, -4.401643372139526e-02, -2.525115013493599e+00, 3.160404176741504e-01, -2.324532301148037e-01, -1.627832253420331e+00, -1.627832253420313e+00, 6.046762333733073e+01, 3.705889894603873e+03, 1.119261269939624e+03, -1.557581454475413e+00, 6.774516934763201e+02, 6.774516934763213e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_scan_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_scan_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [9.609523745064802e-04, 9.609511455339339e-04, 9.609187279509979e-04, 9.609375937217004e-04, 9.609519746224392e-04, 9.609519746224392e-04, 8.929719507420018e-03, 8.946630872714295e-03, 9.454577112337100e-03, 9.517363580251393e-03, 8.932612994250751e-03, 8.932612994250751e-03, 1.752564482366704e-02, 1.741555432785857e-02, 1.547974187441581e-02, 1.996855379354149e-02, 1.749115883817827e-02, 1.749115883817827e-02, 1.659308298327499e-01, 1.729417841312763e-01, 2.899186318425657e-03, 1.308577675657830e-02, 1.694404538584988e-01, 1.694404538584988e-01, 3.038874379795668e-03, 2.191001660825017e-03, 2.772754681134098e-03, 3.652974100834008e-07, 2.969526988559535e-03, 2.969526988559438e-03, 3.924038716945898e-03, 3.926285172096469e-03, 3.924110805578220e-03, 3.925866572876368e-03, 3.925402339995050e-03, 3.925402339995050e-03, 1.182607110034918e-02, 1.116945095347534e-02, 1.149555452841084e-02, 1.097281913228083e-02, 1.178429046458882e-02, 1.178429046458882e-02, 5.883902343748303e-02, 5.917603644341642e-02, 8.302259095866601e-02, 8.599342100966932e-02, 4.990962744960471e-02, 4.990962744960471e-02, 1.344741439938243e-02, 1.765799144496533e-01, 1.538149064524595e-02, 2.730476611762589e-02, 7.041242421637767e-02, 7.041242421637767e-02, 1.648332748366614e-06, 1.012465455296137e-06, 7.622854825519424e-06, 1.157832603980422e-03, 5.869708272318266e-07, 5.869708272318243e-07, 4.008397897665890e-02, 3.892351663057991e-02, 3.932578795710749e-02, 3.964734849538423e-02, 3.948652129102227e-02, 3.948652129102227e-02, 4.418856206043283e-02, 3.869977750349608e-02, 3.978552132546533e-02, 4.124252596452486e-02, 4.069678676827634e-02, 4.069678676827634e-02, 6.539677096392246e-02, 9.558199014549423e-02, 1.060721269082187e-01, 1.181664786994507e-01, 1.041825372228946e-01, 1.041825372228946e-01, 6.555513207143843e-02, 5.935329111691303e-03, 3.252957011281647e-03, 1.290461867082557e-01, 1.777358045503832e-02, 1.777358045503821e-02, 8.580242565414463e-06, 5.668605527016056e-09, 2.149481781084467e-06, 1.589164109628219e-02, 4.554071199162166e-07, 4.554071199162149e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
