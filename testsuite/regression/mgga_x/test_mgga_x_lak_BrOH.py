
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_lak_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_lak", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.197250564825087e+01, -2.197261340690039e+01, -2.197312837245223e+01, -2.197136864696623e+01, -2.197256211844471e+01, -2.197256211844471e+01, -2.955330512158162e+00, -2.955492801915454e+00, -2.960504705583820e+00, -2.958794704985543e+00, -2.955389615113903e+00, -3.765974006954211e+00, -5.180399194731530e-01, -7.146210966487425e-01, -6.938513963369081e-01, -7.001135786791132e-01, -7.151302397037448e-01, -7.151302397037448e-01, -1.951569374305970e-01, -1.979250539100651e-01, -6.155071887932569e-01, -1.367054375665095e-01, -1.959850664020088e-01, -1.959850664020088e-01, -6.927645853803150e-03, -7.351796176099260e-03, -3.931379089881958e-02, -2.387431497456520e-03, -7.276773739241859e-03, -7.276773739241857e-03, -5.666542301428722e+00, -5.667601371585899e+00, -5.666654321912737e+00, -5.496854590909560e+00, -5.667080293835708e+00, -5.667080293835708e+00, -1.592881732294660e+00, -1.614790657217765e+00, -1.583976349457858e+00, -1.600764976200302e+00, -1.619972679262615e+00, -2.132058309928615e+00, -6.301973950737875e-01, -6.859350073935526e-01, -5.971710001169078e-01, -6.241394023065356e-01, -6.549404925222198e-01, -5.870020378984276e-01, -7.446794549755516e-02, -1.942258417158559e-01, -7.351482037644987e-02, -2.084012215854636e+00, -1.155980963404706e-01, -1.155980963404706e-01, -3.612966386502603e-03, -2.784490475205918e-03, -2.127248865133930e-03, -4.633455200406193e-02, -3.762186850288747e-03, -2.500278705167745e-03, -6.523986383660714e-01, -6.488404051822199e-01, -6.446098098867415e-01, -6.511067664898336e-01, -6.506146565992640e-01, -6.506146565992640e-01, -6.314408180566310e-01, -5.458224102923087e-01, -5.710151277343872e-01, -5.942454469883811e-01, -5.824255888876878e-01, -5.438870032457215e-01, -7.188525183792741e-01, -1.782773451569431e-01, -2.947273357565211e-01, -2.869731880040211e-01, -3.346490227468834e-01, -3.346490227468834e-01, -3.911240128027202e-01, -3.577486135704617e-02, -5.084813597351698e-02, -3.589819483590388e-01, -6.044008104197816e-02, -7.857078249590463e-02, -7.936111586225101e-03, -4.640588148579451e-04, -1.221564563742242e-03, -7.494498822789525e-02, -2.066175920180068e-03, -2.066175920180064e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_lak_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_lak", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.265937535073682e+01, -3.265939689328813e+01, -3.265955669939276e+01, -3.265919660222196e+01, -3.265938625546899e+01, -3.265938625546899e+01, -5.068460779310708e+00, -5.069011889951034e+00, -5.085648473795327e+00, -5.079640526397438e+00, -5.068637898834819e+00, -5.098588697649811e+00, -7.209975331455284e-01, -9.832495589765896e-01, -9.583659817519476e-01, -9.653342329451964e-01, -9.838571738026153e-01, -9.838571738026153e-01, -2.696652056127350e-01, -2.731361333454969e-01, -8.331802334494127e-01, -1.968297021669132e-01, -2.707084608037326e-01, -2.707084608037326e-01, -1.195758206431613e-02, -1.265285505164559e-02, -6.185130383635177e-02, -4.347961051894450e-03, -1.252311904220836e-02, -1.252311904220836e-02, -7.572989753339809e+00, -7.574187129440393e+00, -7.573115294364068e+00, -7.771009554667256e+00, -7.573599268122011e+00, -7.573599268122011e+00, -2.542701892395964e+00, -2.616633945295789e+00, -2.511864039942349e+00, -2.568912540812032e+00, -2.635154386963153e+00, -2.894454782635005e+00, -8.481471766195753e-01, -9.184161615238059e-01, -8.062005336247967e-01, -8.386519917457579e-01, -8.797252782226547e-01, -9.375773798803475e-01, -9.933008595521242e-02, -2.727780952034963e-01, -9.806352899566306e-02, -2.798756971685267e+00, -1.671977350103024e-01, -1.671977350103024e-01, -4.817288534629318e-03, -5.035437444435194e-03, -3.837101951300705e-03, -6.178298820606169e-02, -5.016249157810953e-03, -4.530050146365365e-03, -8.699891397179368e-01, -8.656690502272149e-01, -8.710713092907220e-01, -8.683920122319129e-01, -8.677932283028971e-01, -8.677932283028971e-01, -8.421613218163542e-01, -7.351908438820568e-01, -7.662561701031391e-01, -7.950484816033861e-01, -7.803759611923149e-01, -8.248725846071188e-01, -9.637763152752062e-01, -2.426257979471396e-01, -4.048505045439494e-01, -4.624677958312553e-01, -4.564426408316327e-01, -4.564426408316327e-01, -6.785083514067360e-01, -5.675165215394899e-02, -7.872501604462866e-02, -4.857515719455353e-01, -8.061015324636922e-02, -1.167815326815595e-01, -1.376533304244509e-02, -8.783845583520555e-04, -2.252632439014299e-03, -1.114073224774003e-01, -3.756691134787869e-03, -3.756691134787862e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_lak_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_lak", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.230019526825397e-08, -1.229994453712915e-08, -1.229875007338650e-08, -1.230284335992563e-08, -1.230006384954733e-08, -1.230006384954733e-08, -1.020971062875279e-05, -1.021678058192699e-05, -1.042738583318669e-05, -1.034266960771638e-05, -1.021147901042713e-05, 5.449479038428699e-07, 1.825943443739959e-03, 3.778861285587621e-04, 4.075975057602164e-04, 4.009667070113226e-04, 3.771819249483787e-04, 3.771819249483787e-04, 6.482465463440344e-02, 6.218339938176634e-02, 1.134897562015572e-03, 1.478596047980070e-01, 6.400975012946629e-02, 6.400975012946629e-02, 1.190428324748113e+02, 1.081501979219413e+02, 3.260105842530130e+00, 2.737880834661096e+02, 1.129479406251277e+02, 1.129479406251277e+02, 7.082921931251529e-08, 7.045136136730252e-08, 7.078775686617626e-08, -2.792802788943843e-06, 7.063955753021916e-08, 7.063955753021916e-08, -3.897226750350899e-05, -4.795563356429494e-05, -3.510191297616662e-05, -4.208676184243671e-05, -5.041001805073108e-05, 5.278942600453103e-06, 6.707184378770592e-04, 4.007204327668923e-04, 8.563709076667779e-04, 6.766475512605335e-04, 5.532222825739216e-04, -1.984545055952949e-02, 5.564549875540831e+00, 5.347816091264120e-02, 5.858646969351752e+00, 5.370203353946185e-06, 2.676223883598343e-01, 2.676223883598343e-01, 1.004317402129080e+06, 2.607370983205954e+02, 9.289262645385704e+02, 3.712919887834733e+01, 8.542111343233619e+05, 3.460149668905027e+02, 1.028764406016387e-04, 2.342865265254131e-04, -9.446411380587881e-03, 1.535447041668737e-04, 1.721227101224810e-04, 1.721227101224810e-04, 1.728513266596281e-04, 1.204669454496873e-03, 9.305602552612139e-04, 6.693918186152278e-04, 8.050901399151080e-04, -3.234266025819078e-02, 3.578050431443883e-04, 1.565059565082654e-01, 1.328150624476767e-02, -4.383365619911779e-02, 8.488027944373729e-03, 8.488027944373732e-03, -4.173775420137495e-02, 3.792913539277819e+00, 1.754383003195994e+00, 6.599275485925337e-03, 1.282406893580612e+01, 7.566146291291529e-01, 5.405403891818673e+01, 2.620794933980374e+03, 1.288275663277622e+03, 9.115826875662322e-01, 5.595904489243708e+02, 5.595904489243720e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_lak_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_lak", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.971586703893882e-03, 1.971558705372812e-03, 1.971432400344282e-03, 1.971888425216355e-03, 1.971571980849916e-03, 1.971571980849916e-03, 8.492162018905234e-03, 8.496605275801131e-03, 8.629550170567523e-03, 8.577480751580460e-03, 8.493355111052600e-03, 3.413632453038169e-13, 2.830276814895214e-03, 1.708505878840797e-12, 1.756631390646549e-12, 1.741820031395808e-12, 1.707409417920116e-12, 1.707409417920116e-12, 6.245003727350799e-12, 6.159438416963808e-12, 5.439289202656033e-04, 8.671011701936019e-12, 6.219012649961737e-12, 6.219012649961737e-12, 4.601604754267361e-12, 4.794524937753328e-12, 9.863725837580970e-12, 1.331869683743669e-12, 4.852149596564044e-12, 4.852149596564046e-12, 2.414004937782323e-13, 2.412759972636532e-13, 2.413869726892607e-13, 6.407635728807136e-03, 2.413378408964694e-13, 2.413378408964694e-13, 8.043361062731263e-03, 9.138431257914892e-03, 7.586778164781733e-03, 8.420169934980395e-03, 9.438378370428177e-03, 5.930640023602552e-13, 2.138275631955733e-12, 2.017468312785627e-12, 2.198533575429932e-12, 2.186672997148656e-12, 2.089163947696049e-12, 7.359518158828571e-02, 2.365397623135276e-05, 6.295643228929907e-12, 2.840327469682068e-05, 6.573887821155377e-13, 1.007892923022187e-11, 1.007892923022187e-11, 1.658690442476367e-11, 1.648301490461374e-12, 2.448420544286006e-12, 2.200569419998859e-06, 2.091983216704955e-11, 1.667460618188094e-12, 2.018597133251055e-12, 2.053115321546583e-12, 3.224524325723110e-02, 2.030679959189830e-12, 2.035427309689168e-12, 2.035427309689168e-12, 2.093808983102490e-12, 2.451873845529718e-12, 2.410667401852931e-12, 2.322900547377720e-12, 2.376186943746644e-12, 8.212547942490496e-02, 1.922459059801039e-12, 2.886834500882801e-03, 4.148633784143203e-12, 4.885719225922864e-02, 3.705492538518496e-12, 3.705492538518493e-12, 7.397700112485182e-02, 9.118346210039630e-12, 1.037050244944911e-11, 3.594282566864025e-12, 1.831106421767050e-05, 1.211585670290508e-11, 3.378123177823730e-12, 4.758743602180773e-13, 1.266187810428479e-12, 1.268415431567825e-11, 1.680845488040870e-12, 1.680845488040879e-12])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
