
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mk00b_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mk00b", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.052876926507810e+01, -2.052899073384305e+01, -2.053003206690625e+01, -2.052674787445840e+01, -2.052846057634394e+01, -2.052846057634394e+01, -3.323606266238114e+00, -3.324136243689070e+00, -3.338189820707191e+00, -3.333290246134796e+00, -3.333420273723377e+00, -3.333420273723377e+00, -4.313896139560577e-01, -4.296494491888538e-01, -3.924697351323780e-01, -4.132637011085808e-01, -4.126810847873398e-01, -4.126810847873398e-01, -1.222680160733360e-01, -1.251900595199893e-01, -3.231985698802734e-01, -7.588852104877139e-02, -1.083775872513932e-01, -1.083775872513931e-01, -5.796563737962547e-02, -5.756734087536606e-02, -7.141391673945451e-02, -5.569439223173975e-02, -5.490837307915977e-02, -5.490837307915973e-02, 8.184083822961341e-01, 3.069789217764169e+00, -2.248503388602866e-01, 3.136136934476793e-01, -2.796045638998499e+00, 4.557320784755035e+01, -1.628965554036491e-01, 6.682653150794639e+00, -2.323863323320972e+00, -2.397089521084173e+00, -2.497007395414280e+00, -1.557293723149090e+00, 2.280964367692163e-02, 1.633815206848755e-01, 2.206175109113229e-02, -1.146520439239241e+00, -1.521702712288852e+00, -1.547813083782231e+01, -6.097145797575781e-02, -3.931084012971647e-02, -6.039659843857848e-02, -5.303352967607461e+00, -6.243798729993828e-02, -5.837382187312329e-02, -5.085898776634096e-02, -5.359207935456463e-02, -3.459365775778745e-02, -6.258974580771869e-02, -4.205562427220964e-02, -4.205607336976712e-02, -1.707036620759724e-03, -4.681061367748119e-03, -3.636965515673183e-03, -2.102017213236058e-03, -3.253887741447772e-03, -3.206657303366407e-03, -7.951266022186431e-04, -7.089641243112468e-01, 3.368348391266565e-02, -2.378192358544230e-01, 3.989402661061791e+00, 6.089605824175594e-03, 3.622138733421840e-02, -4.498387272819022e-02, -3.755817364898065e-02, -3.975142876569555e-02, 2.340050490660140e-01, -1.161099717060182e+00, -6.262159848401299e-01, -7.284430177634450e-02, -7.247798570154164e-02, -4.372836717744231e-01, -5.459045705534992e-02, -5.854712268717940e-02, -6.298243834001747e-02, -3.235883681925555e-02, -4.139928944687100e-02, -5.742956429150797e-02, -3.961800738174048e-02, -3.961799843644631e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mk00b_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mk00b", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-5.936343350347128e+01, -5.936656360519602e+01, -5.936426663414741e+01, -5.936716845691129e+01, -5.936695744540943e+01, -5.937101212057853e+01, -5.935758496656300e+01, -5.935905937022366e+01, -5.936395443918460e+01, -5.936384326826702e+01, -5.936395443918460e+01, -5.936384326826702e+01, -9.485196265621898e+00, -9.483627768746656e+00, -9.487218407360501e+00, -9.484963290056271e+00, -9.526763241963609e+00, -9.533825705768844e+00, -9.511832406199980e+00, -9.512069171839606e+00, -9.480188418656429e+00, -9.547671402464717e+00, -9.480188418656429e+00, -9.547671402464717e+00, -1.129912383464580e+00, -1.160196609826637e+00, -1.120973450975137e+00, -1.155714793201709e+00, -9.992959854151167e-01, -9.752905356069339e-01, -1.039994326140697e+00, -1.060915666708194e+00, -1.182559048132998e+00, -8.821875093069668e-01, -1.182559048132998e+00, -8.821875093069668e-01, -2.189917384792328e-01, -2.630439033848495e-01, -2.284011771850735e-01, -2.795289831775386e-01, -7.282553223553004e-01, -8.884966227389345e-01, -5.500825159971923e-02, -7.003135934948594e-02, -2.161172831023546e-01, -3.664818533836982e-03, -2.161172831023543e-01, -3.664818533836940e-03, -8.277056071622093e-03, -8.235774620171943e-03, -8.106005036011063e-03, -8.027478233125714e-03, 2.599709759753152e-03, 3.294550364216607e-03, -8.538588671050751e-03, -8.585448640176494e-03, -8.366476808756849e-03, -6.649076040488647e-03, -8.366476808756856e-03, -6.649076040488655e-03, 2.488131658213026e+00, 3.228242697431164e+00, 9.539697928709726e+00, 9.678857670349213e+00, -2.945662464008210e-01, -2.491030784289423e-01, 1.372613652318886e+00, 1.309262280564184e+00, -7.968067317239423e+00, -8.005563659639440e+00, 7.054479364088371e+01, 2.037458531931232e+02, 1.154309792628287e-01, 1.091500306209757e-01, 2.069262300172342e+01, 2.059023858450987e+01, -6.294639058971318e+00, -6.398199669605889e+00, -6.445033281597235e+00, -6.700202977596407e+00, -6.997136652082482e+00, -6.813053503806486e+00, -4.057351298955957e+00, -4.116155844028239e+00, 1.566794131357986e-01, 1.232008003231743e-01, 5.182189767822877e-01, 5.074558357515726e-01, 1.184627928633313e-01, 1.609927467470230e-01, -3.162879155584869e+00, -3.638600861352452e+00, -4.828868356889258e+00, -4.115684925746216e+00, -6.434144785891006e+01, -2.541736400939659e+01, 2.236937076499162e-02, 2.238233558603889e-02, 5.955952174781397e-02, 6.024599686216177e-02, 2.345384337813770e-02, 2.441709673720852e-02, -1.584266501168716e+01, -1.584831596922903e+01, -6.010340276806941e-03, -2.212520254911629e-02, 2.838042251014011e-03, -7.119640041931483e-03, -7.720929192862801e-03, -8.006553719322356e-03, -8.144384101069614e-03, -8.306293448047288e-03, -5.300355177081989e-03, -5.164013251700535e-03, 1.500421409560333e-02, 1.519467312914943e-02, -6.274338094023182e-03, -6.333533240576840e-03, -6.274667223788341e-03, -6.335273632070729e-03, 2.273909203816025e-03, 2.218201613381782e-03, 5.896536755178592e-03, 5.809782364761928e-03, 4.676622732602892e-03, 4.592460088170418e-03, 5.500888722436645e-03, 5.686050889614295e-03, 3.991390850772997e-03, 3.940770518841345e-03, 4.143457898181243e-03, 4.072206095693663e-03, 1.042217743632241e-03, 1.036620095240548e-03, -2.024280881020037e+00, -2.016486480671138e+00, 1.785013762598674e-01, 1.760685507291855e-01, -7.250119659622908e-01, -6.100634220892012e-01, 1.198660244601307e+01, 1.207153828263612e+01, 7.878759672339593e-02, 7.994077288313978e-02, 1.328879859322386e-01, 1.364881189384182e-01, 3.257275130867602e-02, 3.250679667801183e-02, 3.027408417092494e-02, 2.981646391058140e-02, -3.426457950804868e-02, -3.166373827779673e-02, 8.385045589094997e-01, 7.926038519318919e-01, -2.980256703280490e+00, -3.759651678997610e+00, -1.722947614245267e+00, -1.832326900658019e+00, 3.547645224389479e-03, 3.646096596579390e-03, 5.452082316810609e-03, 1.809173441720749e-03, -1.179467915187602e+00, -1.317603955265029e+00, 1.998760575116670e-02, 2.060743793937588e-02, 9.135460333262986e-03, 7.872828633296580e-03, -8.211350517124969e-03, -8.056896318301853e-03, -5.227574476761656e-03, -4.641599540077939e-03, -6.440271027401513e-03, -6.397887743211920e-03, 1.466139607436095e-02, 1.558756118579057e-02, -5.264247644869448e-03, -6.284884211627854e-03, -5.264239270760423e-03, -6.284849508951029e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mk00b_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mk00b", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.766618397591266e-09, 0.000000000000000e+00, -6.766654971435183e-09, -6.766552514258077e-09, 0.000000000000000e+00, -6.766607096381703e-09, -6.766295657321536e-09, 0.000000000000000e+00, -6.766251943604864e-09, -6.767040890158813e-09, 0.000000000000000e+00, -6.767201445900095e-09, -6.766581430726020e-09, 0.000000000000000e+00, -6.766787973889457e-09, -6.766581430726020e-09, 0.000000000000000e+00, -6.766787973889457e-09, -9.317090093471253e-06, 0.000000000000000e+00, -9.318949278841717e-06, -9.317142689164657e-06, 0.000000000000000e+00, -9.319160048456008e-06, -9.320015871238481e-06, 0.000000000000000e+00, -9.320552697067023e-06, -9.309024560382255e-06, 0.000000000000000e+00, -9.309986059247128e-06, -9.322791879873711e-06, 0.000000000000000e+00, -9.311771391629334e-06, -9.322791879873711e-06, 0.000000000000000e+00, -9.311771391629334e-06, -6.320859889038819e-03, 0.000000000000000e+00, -6.271736133489271e-03, -6.342902098065702e-03, 0.000000000000000e+00, -6.282338777515597e-03, -6.652048835433333e-03, 0.000000000000000e+00, -6.744216914612799e-03, -6.508903771617366e-03, 0.000000000000000e+00, -6.482414185521847e-03, -6.156147758750798e-03, 0.000000000000000e+00, -6.941540039524905e-03, -6.156147758750798e-03, 0.000000000000000e+00, -6.941540039524905e-03, -1.112105172193829e+00, 0.000000000000000e+00, -9.841242866805429e-01, -1.078049692460431e+00, 0.000000000000000e+00, -9.367573857325110e-01, -3.645316705920669e-03, 0.000000000000000e+00, -3.293566125362207e-03, -2.497036775584733e+00, 0.000000000000000e+00, -2.380235134305237e+00, -9.432166623281447e-01, 0.000000000000000e+00, -6.750831168983477e+00, -9.432166623281445e-01, 0.000000000000000e+00, -6.750831168983477e+00, -2.237680706097579e+04, 0.000000000000000e+00, -1.875171605865069e+04, -1.986561844227090e+04, 0.000000000000000e+00, -1.629107519859753e+04, -1.289232243895842e+02, 0.000000000000000e+00, -1.107630530094318e+02, -9.408282227898152e+04, 0.000000000000000e+00, -9.798275853352495e+04, -3.102240069045404e+04, 0.000000000000000e+00, -2.035817202416020e+05, -3.102240069045404e+04, 0.000000000000000e+00, -2.035817202416020e+05, -1.967929776869333e-06, 0.000000000000000e+00, -1.969766465223778e-06, -1.967691449438119e-06, 0.000000000000000e+00, -1.969536334542689e-06, -1.967903210437214e-06, 0.000000000000000e+00, -1.969749018263633e-06, -1.967698850620161e-06, 0.000000000000000e+00, -1.969540067315956e-06, -1.967817894301463e-06, 0.000000000000000e+00, -1.969652512723918e-06, -1.967817894301463e-06, 0.000000000000000e+00, -1.969652512723918e-06, -8.171390229351147e-05, 0.000000000000000e+00, -8.172949338495354e-05, -7.968260628399581e-05, 0.000000000000000e+00, -7.976151666436409e-05, -8.283296032245926e-05, 0.000000000000000e+00, -8.253547656186662e-05, -8.104783941773036e-05, 0.000000000000000e+00, -8.072719727229500e-05, -7.973903125425106e-05, 0.000000000000000e+00, -8.057912951855459e-05, -7.973903125425106e-05, 0.000000000000000e+00, -8.057912951855459e-05, -1.162188306896570e-02, 0.000000000000000e+00, -1.174921187828652e-02, -9.210845800843592e-03, 0.000000000000000e+00, -9.206622720840787e-03, -1.683918587190233e-02, 0.000000000000000e+00, -1.472191425489390e-02, -1.578037674509749e-02, 0.000000000000000e+00, -1.382425742447969e-02, -1.006844891622794e-02, 0.000000000000000e+00, -1.229868780012520e-02, -1.006844891622795e-02, 0.000000000000000e+00, -1.229868780012520e-02, -7.207144115266308e+00, 0.000000000000000e+00, -7.048634776036304e+00, -9.001226018302431e-01, 0.000000000000000e+00, -8.852388459910865e-01, -9.919942435620055e+00, 0.000000000000000e+00, -8.476384160101061e+00, -1.121249476380817e-04, 0.000000000000000e+00, -1.123347057483987e-04, -5.043263181641238e+00, 0.000000000000000e+00, -4.509544193750497e+00, -5.043263181641238e+00, 0.000000000000000e+00, -4.509544193750497e+00, -2.366784203214699e+05, 0.000000000000000e+00, -2.034478771270992e+05, -1.108687442329590e+05, 0.000000000000000e+00, -1.038260095485268e+05, -4.170896477456546e+05, 0.000000000000000e+00, -3.645214183539549e+05, -3.196126786754328e+01, 0.000000000000000e+00, -3.107195308002078e+01, -3.224991061875637e+05, 0.000000000000000e+00, -1.289700979617351e+05, -3.224991061875636e+05, 0.000000000000000e+00, -1.289700979617351e+05, -1.312772347233766e-02, 0.000000000000000e+00, -1.293515018282143e-02, -1.299679796072384e-02, 0.000000000000000e+00, -1.280707461089730e-02, -1.302857020199635e-02, 0.000000000000000e+00, -1.283835604517696e-02, -1.306569672685038e-02, 0.000000000000000e+00, -1.287407797118556e-02, -1.304586880649350e-02, 0.000000000000000e+00, -1.285497297477631e-02, -1.304586880649350e-02, 0.000000000000000e+00, -1.285497297477631e-02, -1.482647519740625e-02, 0.000000000000000e+00, -1.463366179838191e-02, -2.194532540000142e-02, 0.000000000000000e+00, -2.161157224685697e-02, -1.929717324043603e-02, 0.000000000000000e+00, -1.899875311252234e-02, -1.715132241701766e-02, 0.000000000000000e+00, -1.692456091083712e-02, -1.819774635768307e-02, 0.000000000000000e+00, -1.794423960115098e-02, -1.819774635768307e-02, 0.000000000000000e+00, -1.794423960115098e-02, -7.606522504092248e-03, 0.000000000000000e+00, -7.572529260130473e-03, -4.018563119681236e-01, 0.000000000000000e+00, -3.942949786473923e-01, -2.192330563208610e-01, 0.000000000000000e+00, -2.124707164160956e-01, -8.645002558731202e-02, 0.000000000000000e+00, -8.471598498672736e-02, -1.369136155222610e-01, 0.000000000000000e+00, -1.373410206533038e-01, -1.369136155222611e-01, 0.000000000000000e+00, -1.373410206533039e-01, -3.055459998531806e-02, 0.000000000000000e+00, -2.983957791379410e-02, -1.324244768902342e+02, 0.000000000000000e+00, -1.299509436388261e+02, -5.718902242536681e+01, 0.000000000000000e+00, -5.244869679072841e+01, -1.069623917670554e-01, 0.000000000000000e+00, -1.013147117036392e-01, -1.728218035777489e+01, 0.000000000000000e+00, -1.549485111805380e+01, -1.728218035777489e+01, 0.000000000000000e+00, -1.549485111805381e+01, -7.524383014637798e+03, 0.000000000000000e+00, -6.837573841592922e+03, -6.985302546598904e+06, 0.000000000000000e+00, -8.129956864990918e+06, -7.846891252510808e+05, 0.000000000000000e+00, -6.684761776238470e+05, -2.014624350421968e+01, 0.000000000000000e+00, -1.912143823752704e+01, -4.619536545605701e+05, 0.000000000000000e+00, -1.673691070927936e+05, -4.619536545605714e+05, 0.000000000000000e+00, -1.673691070927942e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mk00b_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mk00b", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [-1.097322996768584e-03, -1.097441661916333e-03, -1.097342228593681e-03, -1.097455619704344e-03, -1.097403517835446e-03, -1.097543330305956e-03, -1.097187684745877e-03, -1.097267969964298e-03, -1.097335405444011e-03, -1.097377401625766e-03, -1.097335405444011e-03, -1.097377401625766e-03, -6.538451050942702e-03, -6.536384321259673e-03, -6.541114271275784e-03, -6.538138723846184e-03, -6.593147553251792e-03, -6.602192701550072e-03, -6.572816257436829e-03, -6.572644211454628e-03, -6.534971333933482e-03, -6.619223788570321e-03, -6.534971333933482e-03, -6.619223788570321e-03, -1.356660113909844e-02, -1.407337303887441e-02, -1.343465153803445e-02, -1.399981322796515e-02, -1.161984338740075e-02, -1.138285474931476e-02, -1.243747317728446e-02, -1.281621387282489e-02, -1.422038597425028e-02, -1.040573802957240e-02, -1.422038597425028e-02, -1.040573802957240e-02, -3.683480884150286e-02, -4.546666695083608e-02, -3.809120964751910e-02, -4.797535997487857e-02, -3.911117818715724e-03, -5.094170675378488e-03, -9.552789947273764e-03, -1.276291318957868e-02, -3.180455196482670e-02, -3.078592576328434e-03, -3.180455196482668e-02, -3.078592576328444e-03, -5.068674325564377e-06, -6.285075734052991e-06, -6.116964329649169e-06, -7.888808061927859e-06, -2.673026041939489e-04, -3.345421392181318e-04, -6.177103320013949e-07, -6.207767606980562e-07, -3.720199364864537e-06, -1.512885840192940e-06, -3.720199364864537e-06, -1.512885840192944e-06, -1.184322843542781e-04, -2.040003735977847e-04, -1.868134253984140e-03, -1.925114871625465e-03, -3.542575885894893e-06, -2.803429733197302e-06, -3.326262702642428e-05, -3.001703582053448e-05, -1.374614651988658e-03, -1.388423299261304e-03, -1.043513538050809e-01, -8.729574034499615e-01, -5.890842775556324e-07, -7.967704221278139e-07, -1.635819368151837e-01, -1.620871765191342e-01, -1.682372341482005e-02, -1.726850499732177e-02, -1.727532751153238e-02, -1.852620587362691e-02, -1.971726087204106e-02, -1.898345245192058e-02, -6.831094281740543e-03, -7.129353700488848e-03, -2.733504699696286e-04, -1.573264193081796e-04, -3.002946328499235e-03, -2.876050672602964e-03, -1.857920898590549e-04, -3.484813405546892e-04, -1.747358718508839e-01, -2.095722339678398e-01, -3.060436646064519e-01, -2.594850122299929e-01, -5.394983346301270e+01, -9.823131939962639e+00, -5.530808819998103e-05, -5.735069634696263e-05, -3.548535199137033e-04, -3.684824143309448e-04, -1.605491191600160e-06, -1.888889545698211e-06, -1.056063671206217e-01, -1.058236923144518e-01, -3.010469453811377e-03, -5.389283284306799e-03, -1.638482822513537e-03, -2.604104054395536e-03, -1.289826554545830e-09, -1.666387210024753e-09, -1.486641785399382e-15, -1.721619166762738e-15, -2.575172842660946e-15, -1.487182115779941e-14, -1.649860648106634e-05, -1.275858184088352e-05, -1.837157622290929e-08, -1.980498066201735e-07, -1.834036963270453e-12, -2.270906112801518e-11, -4.822642230159362e-12, -4.748144031112026e-12, -2.885111772993753e-11, -2.893020454795491e-11, -9.691114740974156e-14, -9.662718090722202e-14, -5.303138977573215e-08, -6.676148719520615e-08, -3.338444627127144e-10, -2.457530173205832e-10, -2.958099614113833e-14, -2.963961196006275e-14, -3.233956685626654e-13, -3.075715615031431e-13, -1.055663809725890e-01, -1.033981226689743e-01, -5.401575522978493e-04, -5.182083292991419e-04, -1.041687176111520e-02, -7.346403347008979e-03, -2.926606394864702e+00, -2.935480826146142e+00, -7.750172601790734e-05, -7.968149913591231e-05, -1.561264782570850e-04, -1.651682536159200e-04, -3.198842759345222e-06, -3.150654930707727e-06, -1.654923490695647e-06, -1.671356780221404e-06, -2.316779260420262e-04, -2.069983409622412e-04, -7.053950629168880e-02, -6.286865222547276e-02, -9.728118059953338e-01, -1.543608198718788e+00, -9.868231267676758e-02, -1.090930724367313e-01, -4.334163372308416e-06, -5.715196316168894e-06, -6.875069467748225e-04, -2.434030390815543e-03, -1.155821384883166e-01, -1.374322328832457e-01, -3.808410080664294e-06, -6.306916750042493e-06, -1.134444864869031e-03, -1.356324377214282e-03, -6.046403702726586e-10, -2.141185214432416e-09, -1.803767277866608e-10, -6.590550924071527e-11, -8.970309614170690e-12, -1.318618536712004e-11, -2.563880408229395e-04, -1.899028298600564e-04, -8.275423361570781e-11, -4.530102572342188e-10, -2.828835505025840e-11, -1.223988734007521e-10]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mk00b_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mk00b", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [8.778583974148673e-03, 8.779533295330667e-03, 8.778737828749451e-03, 8.779644957634751e-03, 8.779228142683572e-03, 8.780346642447649e-03, 8.777501477967013e-03, 8.778143759714384e-03, 8.778683243552089e-03, 8.779019213006126e-03, 8.778683243552089e-03, 8.779019213006126e-03, 5.230760840754162e-02, 5.229107457007739e-02, 5.232891417020627e-02, 5.230510979076947e-02, 5.274518042601434e-02, 5.281754161240058e-02, 5.258253005949463e-02, 5.258115369163702e-02, 5.227977067146786e-02, 5.295379030856257e-02, 5.227977067146786e-02, 5.295379030856257e-02, 1.085328091127875e-01, 1.125869843109953e-01, 1.074772123042756e-01, 1.119985058237212e-01, 9.295874709920598e-02, 9.106283799451804e-02, 9.949978541827569e-02, 1.025297109825991e-01, 1.137630877940023e-01, 8.324590423657918e-02, 1.137630877940023e-01, 8.324590423657918e-02, 2.946784707320229e-01, 3.637333356066886e-01, 3.047296771801528e-01, 3.838028797990286e-01, 3.128894254972579e-02, 4.075336540302790e-02, 7.642231957819011e-02, 1.021033055166295e-01, 2.544364157186136e-01, 2.462874061062748e-02, 2.544364157186135e-01, 2.462874061062755e-02, 4.054939460451501e-05, 5.028060587242393e-05, 4.893571463719335e-05, 6.311046449542288e-05, 2.138420833551591e-03, 2.676337113745054e-03, 4.941682656011159e-06, 4.966214085584449e-06, 2.976159491891630e-05, 1.210308672154352e-05, 2.976159491891630e-05, 1.210308672154355e-05, 9.474582748342251e-04, 1.632002988782278e-03, 1.494507403187312e-02, 1.540091897300372e-02, 2.834060708715914e-05, 2.242743786557841e-05, 2.661010162113942e-04, 2.401362865642759e-04, 1.099691721590926e-02, 1.110738639409043e-02, 8.348108304406469e-01, 6.983659227599692e+00, 4.712674220445059e-06, 6.374163377022511e-06, 1.308655494521469e+00, 1.296697412153074e+00, 1.345897873185604e-01, 1.381480399785742e-01, 1.382026200922590e-01, 1.482096469890153e-01, 1.577380869763285e-01, 1.518676196153646e-01, 5.464875425392434e-02, 5.703482960391078e-02, 2.186803759757029e-03, 1.258611354465437e-03, 2.402357062799388e-02, 2.300840538082371e-02, 1.486336718872439e-03, 2.787850724437514e-03, 1.397886974807071e+00, 1.676577871742719e+00, 2.448349316851615e+00, 2.075880097839943e+00, 4.315986677041016e+02, 7.858505551970111e+01, 4.424647055998482e-04, 4.588055707757011e-04, 2.838828159309627e-03, 2.947859314647559e-03, 1.284392953280128e-05, 1.511111636558569e-05, 8.448509369649734e-01, 8.465895385156141e-01, 2.408375563049102e-02, 4.311426627445439e-02, 1.310786258010829e-02, 2.083283243516429e-02, 1.031861243636664e-08, 1.333109768019803e-08, 1.189313428319506e-14, 1.377295333410190e-14, 2.060138274128757e-14, 1.189745692623953e-13, 1.319888518485307e-04, 1.020686547270682e-04, 1.469726097832743e-07, 1.584398452961388e-06, 1.467229570616362e-11, 1.816724890241214e-10, 3.858113784127490e-11, 3.798515224889621e-11, 2.308089418395002e-10, 2.314416363836393e-10, 7.752891792779325e-13, 7.730174472577761e-13, 4.242511182058572e-07, 5.340918975616492e-07, 2.670755701701715e-09, 1.966024138564665e-09, 2.366479691291066e-13, 2.371168956805020e-13, 2.587165348501324e-12, 2.460572492025145e-12, 8.445310477807123e-01, 8.271849813517941e-01, 4.321260418382794e-03, 4.145666634393135e-03, 8.333497408892158e-02, 5.877122677607183e-02, 2.341285115891761e+01, 2.348384660916914e+01, 6.200138081432587e-04, 6.374519930872985e-04, 1.249011826056680e-03, 1.321346028927360e-03, 2.559074207476178e-05, 2.520523944566182e-05, 1.323938792556518e-05, 1.337085424177123e-05, 1.853423408336210e-03, 1.655986727697930e-03, 5.643160503335104e-01, 5.029492178037821e-01, 7.782494447962670e+00, 1.234886558975031e+01, 7.894585014141406e-01, 8.727445794938506e-01, 3.467330697846733e-05, 4.572157052935115e-05, 5.500055574198580e-03, 1.947224312652435e-02, 9.246571079065329e-01, 1.099457863065965e+00, 3.046728064531435e-05, 5.045533400033994e-05, 9.075558918952247e-03, 1.085059501771426e-02, 4.837122962181269e-09, 1.712948171545933e-08, 1.443013822293286e-09, 5.272440739257221e-10, 7.176247691336552e-11, 1.054894829369603e-10, 2.051104326583516e-03, 1.519222638880451e-03, 6.620338689256625e-10, 3.624082057873751e-09, 2.263068404020672e-10, 9.791909872060168e-10]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
