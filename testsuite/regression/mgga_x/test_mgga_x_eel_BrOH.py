
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_eel_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_eel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.267585314531835e+01, -2.267596582307513e+01, -2.267650367972658e+01, -2.267466364895123e+01, -2.267591219756221e+01, -2.267591219756221e+01, -2.776850695566533e+00, -2.777175861866914e+00, -2.787041077642728e+00, -2.783446784649465e+00, -2.776954171547569e+00, -3.766579079218324e+00, -3.015623418183465e-01, -7.136884411733653e-01, -6.926905254057447e-01, -6.990585303799617e-01, -7.142033319406226e-01, -7.142033319406226e-01, -1.948228631298595e-01, -1.976107358033296e-01, -2.553514766121994e-01, -1.359335080731710e-01, -1.956565664778199e-01, -1.956565664778199e-01, -6.769349960930886e-03, -7.185903239932331e-03, -3.876433974439940e-02, -2.320081843449116e-03, -7.112608850552165e-03, -7.112608850552160e-03, -5.669711978426489e+00, -5.670745046450921e+00, -5.669821140402187e+00, -5.651463041758541e+00, -5.670236985117546e+00, -5.670236985117546e+00, -1.383070005978274e+00, -1.427665541470223e+00, -1.363694847241663e+00, -1.399110460693193e+00, -1.438560255655502e+00, -2.131905612112113e+00, -6.305683752699657e-01, -6.864276976835172e-01, -5.973989111243899e-01, -6.245577163427549e-01, -6.553891052829389e-01, -5.992794450495137e-01, -2.348952953456563e-02, -1.935902868015110e-01, -2.318849806763568e-02, -2.085454362076000e+00, -1.148955158707991e-01, -1.148955158707991e-01, -1.139815548674825e-03, -2.707935447261208e-03, -2.069312325054406e-03, -1.461725119701886e-02, -1.186891492716464e-03, -2.431057033801956e-03, -6.524163719572357e-01, -6.489333631220664e-01, -6.501819512019061e-01, -6.511452271055599e-01, -6.506631067866769e-01, -6.506631067866769e-01, -6.314777935070441e-01, -5.461168350072854e-01, -5.714242601558790e-01, -5.946499588818165e-01, -5.828520095139540e-01, -5.607816991539912e-01, -7.193786970578041e-01, -8.123514805847777e-02, -2.943885838783211e-01, -2.520900599356139e-01, -3.344854681139868e-01, -3.344854681139867e-01, -3.731883848348201e-01, -3.524698868972167e-02, -5.021404049451793e-02, -3.590551367201710e-01, -1.906545276233434e-02, -7.789147462639527e-02, -7.750963886595242e-03, -4.491155054536874e-04, -1.185543603108358e-03, -7.429608783973135e-02, -2.008236016574906e-03, -2.008236016574894e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_eel_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_eel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.379565792109066e+01, -3.379560760366029e+01, -3.379545575844024e+01, -3.379626451747201e+01, -3.379563095330946e+01, -3.379563095330946e+01, -6.010787145079698e+00, -6.010888946020314e+00, -6.014093073568756e+00, -6.013349485029734e+00, -6.010844011681097e+00, -3.367934317797695e+00, -8.555556993236859e-01, -3.107863402379796e-01, -2.276496909215273e-01, -2.633358533398006e-01, -3.128825823795774e-01, -3.128825823795774e-01, -6.185071522817091e-02, -6.979798984018709e-02, -6.592679481688618e-01, 1.091720485331036e-01, -6.412862925456195e-02, -6.412862925456195e-02, 4.078833397153640e-02, 4.265332843136945e-02, 1.267227335121149e-01, 1.791781393272293e-02, 4.220745095998921e-02, 4.220745095998922e-02, -7.402234570732038e+00, -7.409321818010613e+00, -7.403013833667561e+00, -7.795426525076580e+00, -7.405803310638844e+00, -7.405803310638844e+00, -3.288105099778697e+00, -3.335701159712203e+00, -3.266861614705756e+00, -3.305869795221912e+00, -3.346087662942952e+00, -1.735249076543194e+00, -6.765576816275208e-01, -8.513046264603722e-01, -5.843432176327666e-01, -7.014557888382414e-01, -7.435345790271096e-01, -1.011480451123062e+00, -3.132017963658409e-02, 2.463788412042091e-02, -3.091972080349008e-02, -2.378278746365330e+00, 1.064952077717054e-01, 1.064952077717054e-01, -1.519754064899767e-03, 2.029631042562835e-02, 1.534021200101804e-02, -1.948966826269182e-02, -1.582521990288619e-03, 1.836954056136897e-02, -8.698884959429809e-01, -8.652444841627551e-01, -8.669092682692081e-01, -8.681936361407465e-01, -8.675508090489026e-01, -8.675508090489026e-01, -8.419703913427256e-01, -5.721955121035051e-01, -6.660482749266723e-01, -7.531386814147399e-01, -7.088244713522521e-01, -8.624212131300907e-01, -8.597284684764709e-01, -2.221929366703775e-01, -1.416427090063087e-01, -5.927703532798411e-01, -2.275044882769135e-01, -2.275044882769137e-01, -7.863016326676238e-01, 1.236115929166384e-01, 1.412200342506000e-01, -3.266786133373679e-01, -2.542066543342546e-02, 1.303133210101589e-01, 4.787563918745269e-02, 4.039695014936993e-03, 9.637806563148476e-03, 1.245719369178464e-01, 1.540218676141540e-02, 1.540218676141540e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_eel_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_eel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [3.706267683137820e-10, 3.705912201780863e-10, 3.704329656021752e-10, 3.710118942398669e-10, 3.706080608453034e-10, 3.706080608453034e-10, 6.609789858675550e-06, 6.607011981457544e-06, 6.522869987569956e-06, 6.553274842526410e-06, 6.608892919759101e-06, -3.216172777335681e-05, 1.462669696463216e-02, -2.194977230064674e-02, -2.353903336293605e-02, -2.321626343060371e-02, -2.191198453581238e-02, -2.191198453581238e-02, -3.741422114102356e+00, -3.595890920515487e+00, 9.445402346921750e-03, -8.135100113336913e+00, -3.696430874371066e+00, -3.696430874371066e+00, -6.010342474572332e+03, -5.465091520454244e+03, -1.700312332485730e+02, -1.361986376895931e+04, -5.707616921629050e+03, -5.707616921629049e+03, -1.746546393527216e-06, -1.694879266946064e-06, -1.740851488119669e-06, 2.134082292212620e-08, -1.720658846966323e-06, -1.720658846966323e-06, 9.521179976301553e-05, 8.678204859041496e-05, 9.904923686589637e-05, 9.208945777751082e-05, 8.485251570015358e-05, -3.117157451984742e-04, -3.852081708613773e-02, -1.841592141657896e-02, -5.024651677984009e-02, -3.788527810833246e-02, -3.072127581355125e-02, 1.941820655042150e-03, 5.019126956634454e+01, -3.019366587936668e+00, 5.284909943371191e+01, -2.967994374311094e-04, -1.466661412461207e+01, -1.466661412461207e+01, 9.052845525314195e+06, -1.299464886388389e+04, -4.632718895182294e+04, 3.347037487468919e+02, 7.699798325232078e+06, -1.723612395423248e+04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -6.975237188485083e-02, -5.016894814114337e-02, -2.694884985829068e-02, -3.982088860891911e-02, 1.370144681919257e-03, -1.849087948376109e-02, 1.265905114660396e+00, -7.733745986606255e-01, 8.821544583702343e-02, -4.991958863723071e-01, -4.991958863723073e-01, 2.040325232042466e-02, -1.971341729105949e+02, -9.216232429502305e+01, -3.892567671476477e-01, 1.156471915152451e+02, -4.064514373923038e+01, -2.725224766051585e+03, -1.291126318784138e+05, -6.388094672762475e+04, -4.896579389236382e+01, -2.784937666052697e+04, -2.784937666052702e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_eel_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_eel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.087961058470274e-03, 2.087889655438136e-03, 2.087573482583405e-03, 2.088735692714412e-03, 2.087923470904882e-03, 2.087923470904882e-03, 1.737790282319105e-02, 1.737933930980025e-02, 1.742149026430286e-02, 1.740387793601644e-02, 1.737821901031558e-02, 2.188864961129241e-02, 4.238946294270618e-02, 1.048928855561924e-01, 1.037376029145767e-01, 1.047507902755729e-01, 1.049175019493053e-01, 1.049175019493053e-01, 3.671877747881588e-01, 3.671905698695758e-01, 1.386791581620796e-02, 3.042477068279021e-01, 3.671364051430265e-01, 3.671364051430265e-01, 1.027625999774966e-01, 1.073834925705756e-01, 2.243426476171773e-01, 2.571025992582655e-02, 1.086791679349525e-01, 1.086791679349524e-01, 3.984697328596921e-03, 3.868883730787680e-03, 3.971928147785683e-03, 3.772371520591658e-03, 3.926700286048873e-03, 3.926700286048873e-03, 2.772935951043085e-02, 2.823155728749984e-02, 2.748272639100414e-02, 2.790947834460912e-02, 2.836349737190381e-02, 3.865497048690091e-02, 1.218504213066303e-01, 7.466451254362715e-02, 1.357998494551414e-01, 1.161851251149215e-01, 1.088159178031438e-01, 1.009286055903945e-01, 4.833124978269803e-07, 3.027391273530797e-01, 1.118376043797848e-06, 3.386219877053927e-02, 3.363533084145089e-01, 3.363533084145089e-01, 0.000000000000000e+00, 3.287077824913945e-02, 4.934068147838615e-02, 0.000000000000000e+00, 0.000000000000000e+00, 3.298085460100445e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.435066785526887e-01, 1.176330999715865e-01, 7.098528914287301e-02, 9.890875204721537e-02, 9.450104554669005e-02, 8.641365886893762e-02, 6.678305196720986e-02, 2.584646564410463e-01, 1.570603959720132e-01, 2.411889587515836e-01, 2.411889587515835e-01, 1.360325577082979e-01, 2.066457759048519e-01, 2.396900187173743e-01, 2.292790218058176e-01, 4.836549817445346e-08, 3.223585096238637e-01, 7.500880683946344e-02, 6.702429537780124e-03, 2.273243007929870e-02, 3.372076999759686e-01, 3.271083942632933e-02, 3.271083942632923e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
