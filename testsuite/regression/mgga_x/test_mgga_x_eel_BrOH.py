
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_eel_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_eel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.312480404040168e+01, -2.312487186479519e+01, -2.312527990411125e+01, -2.312417334238011e+01, -2.312483884789409e+01, -2.312483884789409e+01, -2.893559077568165e+00, -2.893851778999960e+00, -2.902963564103100e+00, -2.902878495126276e+00, -2.893633459928988e+00, -2.893633459928988e+00, -3.256684178338525e-01, -3.247508449837616e-01, -3.102350564088815e-01, -3.404642050408387e-01, -3.253688848601841e-01, -3.253688848601841e-01, -1.701571573810813e-01, -1.703388353095525e-01, -1.789243296175174e-01, -6.557145148104306e-02, -1.699032765612588e-01, -1.699032765612588e-01, -6.642200012860318e-03, -7.042966427990096e-03, -3.292717179385857e-02, -2.467659872750542e-03, -6.967871857612052e-03, -6.967871857612052e-03, -5.668658850347019e+00, -5.669734706117989e+00, -5.668785849442697e+00, -5.669621227362435e+00, -5.669188002267042e+00, -5.669188002267042e+00, -1.965640449202394e+00, -2.004026819182486e+00, -1.971945201150903e+00, -2.002868991062266e+00, -1.984109535566205e+00, -1.984109535566205e+00, -5.677673901970789e-01, -6.680317335366609e-01, -4.960503352628791e-01, -5.645415941401567e-01, -6.108904187270613e-01, -6.108904187270613e-01, -6.106998622507030e-02, -1.691710767625336e-01, -5.996922967065405e-02, -1.910928429012212e+00, -7.818115637554320e-02, -7.818115637554320e-02, -2.362860673741682e-03, -2.828910009630279e-03, -2.101881234757945e-03, -4.287799420608748e-02, -2.581510785463982e-03, -2.581510785463982e-03, -6.524163719572357e-01, -6.489333631220664e-01, -6.501819512019061e-01, -6.511452271055599e-01, -6.506631067866769e-01, -6.506631067866769e-01, -6.314777935070441e-01, -5.367511284533253e-01, -5.616220558418258e-01, -5.885301432391894e-01, -5.736827030369903e-01, -5.736827030369903e-01, -6.832670246561249e-01, -2.294948750756131e-01, -2.587278097656145e-01, -3.076115765321831e-01, -2.877124245141960e-01, -2.877124245141959e-01, -4.388403125950411e-01, -3.074984698064884e-02, -4.013947062400628e-02, -2.959699473939865e-01, -5.220687295749209e-02, -5.220687295749229e-02, -7.960964484192069e-03, -4.982067038102162e-04, -1.203025055812609e-03, -4.918235503114029e-02, -2.143228711093060e-03, -2.143228711093044e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_eel_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_eel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.955941558486187e+01, -2.955959374793598e+01, -2.956009434933805e+01, -2.955716800742680e+01, -2.955951219010428e+01, -2.955951219010428e+01, -5.145881859679077e+00, -5.146064849393104e+00, -5.150995918978706e+00, -5.139182781350517e+00, -5.146023574978887e+00, -5.146023574978887e+00, -7.290560366070192e-01, -7.235072855729408e-01, -5.819307111356447e-01, -6.138848440594816e-01, -7.270824284779189e-01, -7.270824284779189e-01, -8.091520985181173e-02, -9.194873498194345e-02, -6.152848979486562e-01, -7.181147274611277e-03, -8.437436820334934e-02, -8.437436820334934e-02, -1.117523339178266e-02, -1.178337680871878e-02, -3.982806638705657e-02, -4.442661508603739e-03, -1.165899728559921e-02, -1.165899728559921e-02, -7.414146959913171e+00, -7.421074171744758e+00, -7.414758542227341e+00, -7.420150764979915e+00, -7.417837568996664e+00, -7.417837568996664e+00, -1.857226462006984e+00, -1.888298984499633e+00, -1.811845412861398e+00, -1.836056220871289e+00, -1.937425182655753e+00, -1.937425182655753e+00, -8.530090974149059e-01, -1.001701170952079e+00, -8.229280661256365e-01, -9.777715952451252e-01, -8.958841757985400e-01, -8.958841757985400e-01, -1.306405465869557e-02, 1.025882125748532e-02, -9.169647290511285e-03, -3.231010929196397e+00, 3.500893032404497e-02, 3.500893032404497e-02, -4.259205149565959e-03, -5.058229925156685e-03, -3.764271210553763e-03, -3.999098116628085e-02, -4.614559325794076e-03, -4.614559325794076e-03, -8.698884959429809e-01, -8.652444841627551e-01, -8.669092682692081e-01, -8.681936361407465e-01, -8.675508090489026e-01, -8.675508090489026e-01, -8.419703913427256e-01, -5.916630868953403e-01, -6.968918760159515e-01, -7.966778939032239e-01, -7.478701185056981e-01, -7.478701185056981e-01, -1.082556186805856e+00, -6.692593142484525e-02, -1.740647530733627e-01, -4.124595445130383e-01, -2.832686134498511e-01, -2.832686134498513e-01, -5.463127907810831e-01, -3.850411081661135e-02, -4.259595956907745e-02, -4.467913316640163e-01, -1.055714760664726e-02, -1.055714760664764e-02, -1.325281889356549e-02, -9.376336442597043e-04, -2.214684130820925e-03, -1.398493055081804e-02, -3.847288885575581e-03, -3.847288885575564e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_eel_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_eel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.259255561513589e-08, -1.259196577693276e-08, -1.258992234732051e-08, -1.259956868479866e-08, -1.259223963895062e-08, -1.259223963895062e-08, -2.263562483857936e-05, -2.263381681250188e-05, -2.258452893552868e-05, -2.272279090185961e-05, -2.263387671139916e-05, -2.263387671139916e-05, -1.544603661465473e-02, -1.553415650754802e-02, -1.766546394441312e-02, -1.830221500780660e-02, -1.547951710919225e-02, -1.547951710919225e-02, -3.784832553166332e+00, -3.633981454970718e+00, -2.342364022173633e-03, -3.062777543557491e+00, -3.737843732536133e+00, -3.737843732536133e+00, 1.035286839357673e+02, 9.313624122350298e+01, -1.714414753084575e+00, 3.904287281158714e+02, 9.695724513128556e+01, 9.695724513128556e+01, -1.704117520641102e-06, -1.652574849899800e-06, -1.698973263254216e-06, -1.658896789973388e-06, -1.677564505445274e-06, -1.677564505445274e-06, -3.208842476566628e-04, -3.124316145245208e-04, -3.248517175258725e-04, -3.182010361207693e-04, -3.099350505225154e-04, -3.099350505225154e-04, -2.734788777357388e-02, 2.706006396611824e-04, -3.465154009255877e-02, 1.408585134684735e-03, -2.016335620730465e-02, -2.016335620730465e-02, -4.997369147165566e+00, -3.029826913679939e+00, -6.062515605414698e+00, 1.218925853976067e-05, -1.025720553141597e+01, -1.025720553141597e+01, 4.309150155073855e+02, 3.353995891403111e+02, 1.007553224956356e+03, -2.668648558228242e+00, 4.912007250436581e+02, 4.912007250436480e+02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -6.856719748457089e-02, -4.658557451928489e-02, -1.732059895129261e-02, -3.367975809483928e-02, -3.367975809483929e-02, 4.369262334642617e-04, -1.420621360449944e+00, -7.815462179248686e-01, -2.901785723452146e-01, -4.968397372882309e-01, -4.968397372882311e-01, -1.042250561310770e-01, -2.259358962604565e+00, -2.288106560119484e+00, -3.293490260788868e-01, -1.060446054740545e+01, -1.060446054740539e+01, 6.348999100139409e+01, 4.549316841191884e+03, 1.376076401421120e+03, -1.119829268494774e+01, 8.160554442165707e+02, 8.160554442165652e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_eel_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_eel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_eel_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_eel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.169157154702611e-03, 2.169080043215380e-03, 2.168739029055840e-03, 2.169994170063666e-03, 2.169116558492383e-03, 2.169116558492383e-03, 2.034253723168361e-02, 2.034309286008988e-02, 2.035964472873247e-02, 2.036568457426541e-02, 2.034250409588489e-02, 2.034250409588489e-02, 7.001103919283629e-02, 6.986994340912774e-02, 6.696546678955712e-02, 7.296834284800710e-02, 6.996803837481889e-02, 6.996803837481889e-02, 3.591315666351231e-01, 3.578813236568715e-01, 2.166245870959171e-02, 7.359829965604246e-02, 3.585057679456856e-01, 3.585057679456856e-01, 2.097706757049224e-07, 2.347398963914517e-08, 1.628947101785748e-04, 0.000000000000000e+00, 2.210702081740640e-07, 2.210702081740640e-07, 3.984695125011492e-03, 3.868881641525055e-03, 3.971926012203174e-03, 3.881943301759274e-03, 3.926698066050062e-03, 3.926698066050062e-03, 3.869341749384760e-02, 3.854718562073512e-02, 3.880238288686708e-02, 3.869766364180374e-02, 3.844510627872744e-02, 3.844510627872744e-02, 1.197549462386744e-01, 7.327570734797509e-02, 1.300721335822526e-01, 1.114813608591387e-01, 1.077112901174237e-01, 1.077112901174237e-01, 5.266791962240093e-02, 2.934379449545329e-01, 6.325429528535634e-02, 3.230685532737709e-02, 2.102486067825637e-01, 2.102486067825637e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.093704398775985e-05, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.434517603265634e-01, 1.175670894703175e-01, 7.093226248371691e-02, 9.883816978903039e-02, 9.883816978903040e-02, 8.401722250998536e-02, 2.782437526932069e-01, 2.537684212796614e-01, 2.082774133203074e-01, 2.358365532976447e-01, 2.358365532976446e-01, 1.649313259551133e-01, 1.704576569102574e-03, 6.732493560612628e-04, 2.204495145846126e-01, 6.431846050171393e-02, 6.431846050171336e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 5.576012411286506e-02, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
