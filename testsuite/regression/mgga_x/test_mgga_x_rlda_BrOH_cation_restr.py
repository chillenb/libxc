
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_rlda_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rlda", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.499721019934100e+01, -2.499750377768036e+01, -2.499884946426384e+01, -2.499449578832068e+01, -2.499677117346108e+01, -2.499677117346108e+01, -4.008037871918571e+00, -4.008727861402428e+00, -4.026927383168499e+00, -4.019674766047714e+00, -4.020292689113846e+00, -4.020292689113846e+00, -4.936170028250190e-01, -4.909611080191238e-01, -4.317984968260676e-01, -4.580539833840767e-01, -4.506010159320356e-01, -4.506010159320356e-01, -1.116705783189064e-01, -1.167910429628956e-01, -3.538887531755356e-01, -3.827575097194701e-02, -5.676222013978140e-02, -5.676222013978140e-02, -8.525330644404574e-06, -1.022363236133506e-05, -8.683667904991061e-04, -1.235576058111395e-06, -3.459482082178653e-06, -3.459482082178653e-06, 1.121752068337108e+00, 3.955722023223457e+00, -1.609471823353038e-01, 5.104575672385101e-01, -3.375889281100198e+00, 4.359289244646176e+01, -1.727291733647062e-02, 8.537033229206841e+00, -2.710593994113842e+00, -2.803629265763868e+00, -2.939772546558025e+00, -1.765231430143075e+00, 4.904361388529448e-02, 2.108577542571138e-01, 4.874234499663686e-02, -1.419668334572509e+00, -1.871127938518383e+00, -1.617046844386174e+01, -1.582387056960951e-03, 1.050138088378624e-02, -2.479805902050362e-04, -6.610259294523125e+00, -1.710446106733866e-02, -1.224915644750029e-02, 4.084839544498122e-08, 6.074310355375861e-11, -7.660126980222247e-11, -3.929928578684514e-04, 3.855447448825598e-07, -4.001985282713905e-09, 7.569408972738353e-06, -1.844000535635040e-05, -1.070450368932085e-06, 8.405239667172101e-04, -5.810222538217743e-05, 5.928804360689509e-07, -1.864543628147721e-06, -8.536145290006906e-01, 6.508592031890424e-02, -2.813656604331287e-01, 5.004940146047912e+00, 2.591595868688494e-02, 5.290952556772225e-02, -1.397188933944829e-03, -1.330999173185593e-03, -2.316825698060110e-02, 3.277718661530544e-01, -1.397141352607052e+00, -7.515285350688415e-01, -1.044647627255271e-04, -2.612696185899718e-03, -5.266596764126771e-01, -3.308068975255687e-04, -5.247033980508154e-03, -1.972952385207940e-07, -2.120415334603697e-09, -2.115760275793614e-09, -1.998268597197703e-03, -1.854863092317193e-08, -1.008255647731901e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_rlda_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rlda", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-7.499163059802302e+01, -7.499251133304107e+01, -7.499654839279151e+01, -7.498348736496206e+01, -7.499031352038322e+01, -7.499031352038322e+01, -1.202411361575571e+01, -1.202618358420728e+01, -1.208078214950550e+01, -1.205902429814314e+01, -1.206087806734154e+01, -1.206087806734154e+01, -1.480851008475057e+00, -1.472883324057372e+00, -1.295395490478203e+00, -1.374161950152230e+00, -1.351803047796107e+00, -1.351803047796107e+00, -3.350117349567190e-01, -3.503731288886869e-01, -1.061666259526606e+00, -1.148272529158411e-01, -1.702866604193442e-01, -1.702866604193442e-01, -2.557599193321372e-05, -3.067089708400518e-05, -2.605100371497319e-03, -3.706728174334184e-06, -1.037844624653596e-05, -1.037844624653596e-05, 3.365256205011324e+00, 1.186716606967037e+01, -4.828415470059115e-01, 1.531372701715530e+00, -1.012766784330059e+01, 1.307786773393853e+02, -5.181875200941186e-02, 2.561109968762052e+01, -8.131781982341526e+00, -8.410887797291604e+00, -8.819317639674074e+00, -5.295694290429225e+00, 1.471308416558834e-01, 6.325732627713411e-01, 1.462270349899106e-01, -4.259005003717528e+00, -5.613383815555150e+00, -4.851140533158519e+01, -4.747161170882852e-03, 3.150414265135874e-02, -7.439417706151086e-04, -1.983077788356938e+01, -5.131338320201598e-02, -3.674746934250087e-02, 1.225451863349437e-07, 1.822293106612758e-10, -2.298038094066674e-10, -1.178978573605354e-03, 1.156634234647679e-06, -1.200595584814171e-08, 2.270822691821506e-05, -5.532001606905120e-05, -3.211351106796256e-06, 2.521571900151630e-03, -1.743066761465323e-04, 1.778641308206853e-06, -5.593630884443162e-06, -2.560843587002072e+00, 1.952577609567127e-01, -8.440969812993863e-01, 1.501482043814373e+01, 7.774787606065482e-02, 1.587285767031668e-01, -4.191566801834488e-03, -3.992997519556780e-03, -6.950477094180328e-02, 9.833155984591629e-01, -4.191424057821151e+00, -2.254585605206525e+00, -3.133942881765813e-04, -7.838088557699151e-03, -1.579979029238031e+00, -9.924206925767064e-04, -1.574110194152446e-02, -5.918857155623822e-07, -6.361246003811090e-09, -6.347280827380843e-09, -5.994805791593109e-03, -5.564589276951578e-08, -3.024766943195704e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rlda_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rlda", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rlda_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rlda", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([-1.371727908451892e-03, -1.371748652083078e-03, -1.371841776372486e-03, -1.371534781822724e-03, -1.371695502913212e-03, -1.371695502913212e-03, -8.171771991579592e-03, -8.174532866479834e-03, -8.247085008837010e-03, -8.215912785875473e-03, -8.221161376351482e-03, -8.221161376351482e-03, -1.727299108166492e-02, -1.714426089721819e-02, -1.437668628830205e-02, -1.578191951054769e-02, -1.535301828413750e-02, -1.535301828413750e-02, -5.134991286954947e-02, -5.369045333478732e-02, -5.599752860999247e-03, -1.378714731161394e-02, -2.141407324707462e-02, -2.141407324707461e-02, -7.094667194575507e-06, -8.749886765653123e-06, -3.758936717525962e-04, -7.736099517895393e-07, -3.056598583418287e-06, -3.056598583418287e-06, -1.907197289071767e-04, -2.370359524699656e-03, -3.926057951113186e-06, -3.947281620363441e-05, -1.726861460068673e-03, -2.879469480165660e-01, -8.515000776938940e-07, -2.035405265538431e-01, -2.130589606893047e-02, -2.235851034291287e-02, -2.418516591304586e-02, -8.720169251419259e-03, -2.547530817536779e-04, -3.673006875311722e-03, -3.176264461311959e-04, -2.398780532043051e-01, -3.534464557459353e-01, -2.639744335326359e+01, -7.041093874725303e-05, -4.520410805109668e-04, -2.183975429182252e-06, -1.321435000733072e-01, -5.090343883165292e-03, -2.610602177244910e-03, -1.840826726188858e-09, -2.001284449422961e-15, -7.118721743185788e-15, -1.802794731399218e-05, -1.031463311505128e-07, -1.111361079730468e-11, -5.980915194953605e-12, -3.611278361186463e-11, -1.209566066982444e-13, -7.420348914609051e-08, -3.554647882125462e-10, -3.701223344126660e-14, -3.940878258782945e-13, -1.305749717130432e-01, -6.611067855695887e-04, -1.083687018284166e-02, -3.663759490336334e+00, -9.823443193298514e-05, -2.007097157538505e-04, -3.967650295199947e-06, -2.078768387505332e-06, -2.733165081774802e-04, -8.317701698482825e-02, -1.511265219948622e+00, -1.297050794109511e-01, -6.204254491710814e-06, -1.531496758906898e-03, -1.576477791877592e-01, -6.187504437378162e-06, -1.556661428159733e-03, -1.351693496146845e-09, -1.276816939354864e-10, -1.374532149648748e-11, -2.726578669490528e-04, -3.013437694602210e-10, -8.903890771399114e-11])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rlda_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rlda", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.097382326761513e-02, 1.097398921666463e-02, 1.097473421097989e-02, 1.097227825458179e-02, 1.097356402330569e-02, 1.097356402330569e-02, 6.537417593263674e-02, 6.539626293183867e-02, 6.597668007069608e-02, 6.572730228700378e-02, 6.576929101081186e-02, 6.576929101081186e-02, 1.381839286533194e-01, 1.371540871777455e-01, 1.150134903064164e-01, 1.262553560843815e-01, 1.228241462731000e-01, 1.228241462731000e-01, 4.107993029563958e-01, 4.295236266782986e-01, 4.479802288799398e-02, 1.102971784929115e-01, 1.713125859765970e-01, 1.713125859765969e-01, 5.675733755660406e-05, 6.999909412522498e-05, 3.007149374020769e-03, 6.188879614316314e-06, 2.445278866734630e-05, 2.445278866734630e-05, 1.525757831257414e-03, 1.896287619759725e-02, 3.140846360890549e-05, 3.157825296290753e-04, 1.381489168054938e-02, 2.303575584132528e+00, 6.812000621551152e-06, 1.628324212430745e+00, 1.704471685514437e-01, 1.788680827433029e-01, 1.934813273043669e-01, 6.976135401135407e-02, 2.038024654029423e-03, 2.938405500249378e-02, 2.541011569049567e-03, 1.919024425634441e+00, 2.827571645967482e+00, 2.111795468261087e+02, 5.632875099780242e-04, 3.616328644087735e-03, 1.747180343345802e-05, 1.057148000586458e+00, 4.072275106532234e-02, 2.088481741795928e-02, 1.472661380951086e-08, 1.601027559538369e-14, 5.694977394548631e-14, 1.442235785119374e-04, 8.251706492041026e-07, 8.890888637843740e-11, 4.784732155962884e-11, 2.889022688949170e-10, 9.676528535859550e-13, 5.936279131687240e-07, 2.843718305700370e-09, 2.960978675301328e-13, 3.152702607026356e-12, 1.044599773704346e+00, 5.288854284556710e-03, 8.669496146273326e-02, 2.931007592269068e+01, 7.858754554638811e-04, 1.605677726030804e-03, 3.174120236159958e-05, 1.663014710004266e-05, 2.186532065419842e-03, 6.654161358786260e-01, 1.209012175958897e+01, 1.037640635287609e+00, 4.963403593368651e-05, 1.225197407125518e-02, 1.261182233502074e+00, 4.950003549902530e-05, 1.245329142527787e-02, 1.081354796917476e-08, 1.021453551483891e-09, 1.099625719718999e-10, 2.181262935592422e-03, 2.410750155681768e-09, 7.123112617119291e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
