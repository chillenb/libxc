
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_jk_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_jk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.074499313566537e+01, -2.074502200693071e+01, -2.074521345653511e+01, -2.074478234826328e+01, -2.074499927901682e+01, -2.074499927901682e+01, -3.727703888023652e+00, -3.727569622023247e+00, -3.724055397085541e+00, -3.725434921677933e+00, -3.725088734226928e+00, -3.725088734226928e+00, -1.065951047339772e+00, -1.060096036713727e+00, -9.479668998898040e-01, -8.918411665343707e-01, -9.065713592389187e-01, -9.065713592389187e-01, -2.216966273399160e-01, -2.233237792385630e-01, -6.066116741010702e-01, -2.005654178943221e-01, -2.040571576537306e-01, -2.040571576537306e-01, -4.870266246722430e-02, -4.926247812949931e-02, -9.642344075200403e-02, -4.767234872459609e-02, -4.780105853966776e-02, -4.780105853966781e-02, -4.800262344199862e+00, -4.714180103059224e+00, -4.836288581198827e+00, -4.818682682614671e+00, -4.917130103881166e+00, -2.067297001423911e+01, -1.820443032872685e+00, -4.010415259895558e+00, -2.236279192390252e+00, -2.240410097006921e+00, -2.251737632181371e+00, -2.128452578655934e+00, -5.417596904681158e-01, -5.899368483108197e-01, -5.005936281554890e-01, -3.585354402477512e-01, -6.579209193441321e-01, 2.225790146578842e+00, -1.008396906243820e-01, -1.351588436592087e-01, -8.165232834113396e-02, -1.672053488285287e+00, -1.544699500784545e-01, -1.437887437848927e-01, 3.650970066508873e-03, -3.153866295650566e-03, -2.419198774477038e-03, -6.538297431952886e-02, 2.124804018943781e-02, -3.106225595214122e-03, -5.471420618234294e-01, -5.440036670710959e-01, -5.451079410188313e-01, -5.460149522645451e-01, -5.455625018648061e-01, -5.455622674612327e-01, -5.323109167133498e-01, -5.301107885624270e-01, -4.734210281722089e-01, -5.085419480460138e-01, -1.186132441899129e+00, -4.876069639435454e-01, -6.196504025519810e-01, -2.050422116232545e-01, -2.451067607507937e-01, -3.266509087893022e-01, -7.089284010998270e-02, -4.431002273722722e-01, -5.055916585978634e-01, -4.825233030879563e-02, -1.242178242279664e-01, -3.711469525189334e-01, -7.191983996234812e-02, -1.169518555742568e-01, -9.359020709421205e-03, -3.851426925829635e-03, -2.266832244340740e-03, -9.071489692813853e-02, -3.641699539794745e-03, -3.212036147418019e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_jk_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_jk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.612170394639219e+01, -2.612177291700198e+01, -2.612210800258843e+01, -2.612108124625347e+01, -2.612161518787509e+01, -2.612161518787509e+01, -4.664865165198962e+00, -4.664607351423229e+00, -4.657653239998611e+00, -4.658371828040292e+00, -4.658929298768705e+00, -4.658929298768705e+00, -3.016556500301080e+00, -2.951811414180043e+00, -1.918849517267464e+00, -1.524292138554329e+00, -1.622209155975666e+00, -1.622209155975666e+00, -2.762571165088741e-01, -2.784707102479277e-01, -1.223943082747632e+00, -2.772894549794771e-01, -2.621767534782383e-01, -2.621767534782382e-01, -6.558333774873519e-02, -6.737764190092468e-02, -1.334933014866466e-01, -7.233720573652484e-02, -7.308142184732343e-02, -7.308142184732368e-02, -6.474540800017502e+00, -6.592672041289733e+00, -6.438515424237119e+00, -6.457135321307597e+00, -6.384092071323631e+00, -6.827219723947161e+02, -2.418547960564973e+00, -1.884267181213313e+01, -2.780852567055738e+00, -2.778747979689490e+00, -2.809201629966922e+00, -2.559874596604931e+00, -7.284434757108593e-01, -7.905820205885975e-01, -6.746275045799802e-01, -1.759154360491842e+00, -8.687842375895106e-01, -1.588454697436609e+02, -1.086884124872461e-01, -2.482458697351765e-01, -1.024656273981904e-01, -2.642581368075723e+00, -1.821832216561521e-01, -1.587299200895288e-01, -1.056598660394201e-02, -4.216091894331847e-03, -3.217635824524187e-03, -6.625874804065229e-02, -6.432115179180606e-02, -3.723143039248572e-03, -7.295227791626056e-01, -7.253378839435561e-01, -7.268105744641540e-01, -7.280270185995681e-01, -7.274160598381449e-01, -7.274163628325132e-01, -7.097478867681817e-01, -6.480882364762843e-01, -6.426383104858900e-01, -6.605452507774461e-01, -1.087172549168753e+01, -6.531306907080662e-01, -8.273761328122685e-01, -2.700662700131127e-01, -3.250719777353410e-01, -4.275077000840727e-01, -1.502854100264058e+00, -8.438456259289258e-01, -6.332878112799417e-01, -3.841144950464673e-02, -2.085874199719551e-01, -4.691117476572160e-01, -8.680417749881378e-02, -1.338702339104264e-01, -9.464339833286060e-03, 5.587328242200889e-04, -1.972753424050730e-03, -8.904797654632678e-02, -2.885789240171566e-03, -3.188036023016067e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_jk_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_jk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.709977310313882e-09, -5.709975555078174e-09, -5.709845468912174e-09, -5.709873358281347e-09, -5.709876196823837e-09, -5.709876196823837e-09, 2.340245349566749e-06, 2.333360037857638e-06, 2.138870705534003e-06, 2.094807442291550e-06, 2.153419863723471e-06, 2.153419863723471e-06, 1.806099106968679e-01, 1.736464468100920e-01, 7.075214706670303e-02, 4.077351045487370e-02, 4.850975650649424e-02, 4.850975650649424e-02, 3.976986733760737e-01, 3.864174412906886e-01, 1.647435119940326e-02, 2.194155876465665e+00, 9.669617159233767e-01, 9.669617159233762e-01, 1.231098213316650e+04, 1.126626037023388e+04, 7.692146158039503e+01, 7.935421713160105e+04, 4.495184660842723e+04, 4.495184660842752e+04, 5.316148696768236e-07, 2.319493755460372e-06, -6.916594330538781e-08, 2.299003761863179e-07, -1.138505102763595e-06, 7.228133558579761e-03, -1.815476344268957e-06, 4.561397339312221e-03, 2.567731145839899e-05, 2.171438802632123e-05, 2.809644128974334e-05, -2.395914623755446e-05, 1.483702575802810e-03, 2.258207288958826e-03, 2.267030041828343e-03, 1.356121441981099e+00, 2.602313887222577e-02, 5.987567006920952e+01, -1.368399336931587e+00, 6.217785820615360e-01, -4.951505567277291e-01, 1.182628049030247e-03, 8.257725851822749e-01, -2.912869343694246e-01, 5.353954177790575e+04, 1.647145743145465e+01, -6.728880795411753e+01, -5.312663603247815e+00, 3.729247290954770e+05, -1.375495924333459e+03, 6.864384861156650e-08, -3.009085880335495e-07, -1.521788877405553e-08, 1.024287495029128e-05, -7.694003548305052e-07, 7.851091592106199e-09, -1.170336227972803e-08, -3.919370720135771e-03, 4.358112000598058e-03, -8.797522241751742e-03, 6.438664848643769e+00, 1.306997640246282e-03, 4.752879899561174e-04, -1.264208583203177e-02, -4.139744683280676e-03, -1.184719136231721e-02, 3.509292646003930e+00, 9.957746859609404e-01, 1.170819303893932e-02, -2.481642555945495e+01, 6.854163699618771e+01, 6.109443753066836e-02, -1.385596835755986e+00, 2.469842901229477e+00, -2.499300592031399e+02, -9.165546782536595e+05, -1.364916237956148e+04, -3.802223670549037e+00, -9.056007673187602e+03, -5.072881749676073e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_jk_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_jk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([-4.286165179338004e-05, -4.286068470963494e-05, -4.285759120292607e-05, -4.287192962261557e-05, -4.286424645355529e-05, -4.286424645355529e-05, -1.831272829529885e-03, -1.830762781123561e-03, -1.815239211333137e-03, -1.802260267746232e-03, -1.812047548797959e-03, -1.812047548797959e-03, -9.583680459368328e-02, -9.230923718544500e-02, -4.006488727491085e-02, -2.689428061762250e-02, -3.050194902361932e-02, -3.050194902361932e-02, -1.423335791587406e-02, -1.457829847175577e-02, -5.140843663071912e-03, -1.845419987679580e-02, -1.558320028193919e-02, -1.558320028193919e-02, -1.058886385974912e-02, -1.106617816084362e-02, -1.251959418212961e-02, -1.135094247937798e-02, -1.264505857688706e-02, -1.264505857688711e-02, -5.525161702657315e-06, -7.869205422022024e-05, -1.066030720771929e-07, -1.096463811307807e-06, -4.005620936377043e-05, -1.396897873081720e+00, -2.083926044442793e-07, -5.565669252335664e-02, -2.016955618635348e-03, -1.965230476198088e-03, -2.150085328753731e-03, -1.080693891842619e-03, -1.416865087511479e-05, -2.591362802932085e-05, -2.059408511612414e-05, -2.513222443883941e-01, -2.319499679357648e-02, -1.635922225849348e+01, -6.515234837079153e-04, -1.299096667862152e-03, -2.832922644006355e-05, -4.984870715247247e-03, -9.950083349460414e-03, -6.463514694514749e-03, -2.737447282094418e-04, -1.675707362442224e-10, -3.449443522616444e-10, -5.320316366670575e-04, -8.237226358988568e-03, -5.439499286154143e-07, -8.281391472389613e-15, -2.661373237002085e-13, -5.939249215528036e-16, -2.332672192105059e-10, -1.419575935191317e-12, -1.478113988628237e-16, -1.467052501195778e-16, -6.879754872586310e-03, -5.301379855296806e-05, -3.190667435268424e-04, -1.373362605524076e+00, -5.158002005770548e-06, -1.775460227677990e-06, -4.671514336140344e-06, -1.334992907396677e-06, -4.757037673174073e-05, -9.868842796488853e-02, -5.930799928619179e-02, -1.142930614081927e-02, -8.467228051824075e-04, -1.878749851303050e-02, -1.908189944778772e-02, -8.657095917260498e-05, -9.335043819571747e-03, -9.936388005783547e-06, -2.175161196808236e-04, -3.178844589199942e-06, -2.857632478108686e-03, -1.518934595079319e-05, -4.549833524755686e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
