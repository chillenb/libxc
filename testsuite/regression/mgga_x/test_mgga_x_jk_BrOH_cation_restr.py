
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_jk_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_jk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.155090188429256e+01, -2.155093886560658e+01, -2.155115895936974e+01, -2.155060735228622e+01, -2.155088848379467e+01, -2.155088848379467e+01, -3.551908215801581e+00, -3.551887249883054e+00, -3.551488890543378e+00, "nan", -3.551968699797569e+00, -3.227320295140042e+00, -7.003766803561465e-01, -6.217843925924665e-01, -6.052700213057218e-01, -6.102941122642164e-01, -6.092256790548790e-01, -6.092256790548790e-01, -1.607288923729462e-01, -1.631631243650996e-01, -8.124556773162052e-01, -1.220222476077205e-01, -1.370212209970236e-01, -1.370212209970236e-01, -5.595146862577035e-03, -5.889123796187473e-03, -3.249090522418615e-02, -3.231372209463281e-03, -4.060466513788848e-03, -4.060466513788848e-03, -4.831856833378764e+00, -4.832743899599917e+00, -4.831901014012279e+00, -5.195278082313379e+00, -4.832304684650879e+00, -4.832304684650879e+00, -2.080884638125882e+00, -2.093502802273619e+00, -2.075467411762342e+00, -2.086643832265061e+00, -2.090440613349946e+00, -1.828131681082642e+00, -5.444982726190046e-01, -5.915168894355725e-01, -5.038254170974253e-01, -5.237319925606893e-01, -5.532767968796222e-01, -6.028719340512819e-01, -1.207761950291120e-01, -1.609729801237414e-01, -1.134953290000056e-01, -1.781469564765084e+00, -9.941957473002777e-02, -9.941957473002777e-02, -1.971072418196098e-02, -3.158952217889634e-03, -2.415486708750329e-03, -8.372554269807203e-02, -1.720652313190883e-02, -2.909912581751544e-03, -5.471420723043083e-01, -5.440035311752440e-01, -5.677758619931264e-01, -5.460175945422931e-01, -5.455622698289495e-01, -5.455622698289495e-01, -5.323109160192449e-01, -4.569505778266646e-01, -4.785002553838721e-01, -4.998742704983823e-01, -4.889580703652738e-01, -5.339166176911788e-01, -6.201276914270852e-01, -2.497114596721531e-01, -2.442480853098326e-01, -3.651560353156912e-01, -2.805614608588169e-01, -2.805614608588169e-01, -4.732718811524992e-01, -3.109792120992012e-02, -4.239701286164738e-02, -3.110083899442813e-01, -9.815146764095384e-02, -6.712112213236894e-02, -7.896470309974068e-03, -8.444081655323325e-04, -1.772450099569052e-03, -6.302960373747750e-02, -2.692579364328366e-03, -2.692579364328364e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_jk_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_jk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.665863649819751e+01, -2.665869902738371e+01, -2.665901897138035e+01, -2.665808752239510e+01, -2.665856963373313e+01, -2.665856963373313e+01, -4.361952825350334e+00, -4.361948167457120e+00, -4.361946878123566e+00, "nan", -4.362052389407351e+00, -4.303093726853389e+00, -8.485048092478120e-01, -8.290458567899555e-01, -8.070266950742958e-01, -8.137254830189552e-01, -8.123009054065052e-01, -8.123009054065052e-01, -2.143051898305950e-01, -2.175508324867994e-01, -9.874941111437392e-01, -1.626963301436273e-01, -1.826949613293648e-01, -1.826949613293648e-01, -7.460195816769381e-03, -7.852165061583297e-03, -4.332120696558153e-02, -4.308496279284374e-03, -5.413955351718464e-03, -5.413955351718464e-03, -6.442475777838352e+00, -6.443658532799890e+00, -6.442534685349704e+00, -6.469100367454019e+00, -6.443072912867839e+00, -6.443072912867839e+00, -2.491701609761449e+00, -2.508756116321018e+00, -2.480793237569615e+00, -2.495886209576224e+00, -2.506374663783894e+00, -2.437508908110189e+00, -7.259976968253394e-01, -7.886891859140964e-01, -6.717672227965672e-01, -6.983093234142524e-01, -7.377023958394964e-01, -7.447784661082768e-01, -1.233455670088187e-01, -2.146306401649886e-01, -1.145435030026000e-01, -2.375292753020112e+00, -1.325594329733704e-01, -1.325594329733704e-01, -6.393002029956978e-03, -4.211936290519512e-03, "nan", -7.877253935940753e-02, -6.565469030582975e-03, -3.879883442335392e-03, -7.295227630724112e-01, -7.253380415669921e-01, -7.212188775446511e-01, -7.280234593897242e-01, -7.274163597719329e-01, -7.274163597719329e-01, -7.097478880256600e-01, -6.092674371022195e-01, -6.380003405118296e-01, -6.664990273311764e-01, -6.519440938203651e-01, -6.587693135703867e-01, -8.268369219027804e-01, -2.850168859922748e-01, -3.256641137464434e-01, -4.407190195357443e-01, -3.740819478117560e-01, -3.740819478117559e-01, -5.734190486269083e-01, -4.146389494656016e-02, -5.652935048219650e-02, -4.146778532590417e-01, -9.832767182467145e-02, -8.949482950982525e-02, -1.052862707996543e-02, -1.125877554043110e-03, -2.363266799425403e-03, -8.403947164997001e-02, -3.590105819104488e-03, -3.590105819104484e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_jk_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_jk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.255847656712998e-09, -5.255896961228916e-09, -5.255924756058856e-09, -5.255196177127681e-09, -5.255605046894544e-09, -5.255605046894544e-09, -5.984330104376479e-06, -5.985114716450539e-06, -6.002729185863141e-06, "nan", -5.984693759577983e-06, 8.109726621219190e-163, -3.043554251468681e-03, 4.380337967920693e-250, 2.534350090134737e-163, 4.429315464387817e-216, 1.015769512501819e-162, 4.409212289261176e-216, 4.218822095159145e-99, 1.559160359253309e-216, -1.778329835081528e-03, 3.393130516649154e-231, 1.452612903840091e-216, 1.750577431555202e-245, 1.025212085650774e-171, 1.305668015990442e-202, 1.992212839476597e-226, 2.539263435041405e-231, 2.801967352354940e-273, 3.352834689042798e-183, 8.528787938997624e-176, 4.227478626298530e-249, 6.481545335862740e-211, -1.864620727867991e-06, 7.113361532713931e-230, 5.118428909748473e-182, -3.276894421159080e-05, -3.232359292718704e-05, -3.234168869647093e-05, -3.194372060786020e-05, -3.274311307569443e-05, 5.023027123945296e-163, 8.577594284641456e-183, 3.513984807817667e-221, 5.870191386070766e-183, 3.456048200975903e-221, 8.416479402477707e-183, -8.300030575952765e-03, -1.269656258206491e+00, 2.828774791625191e-202, -1.603756963878790e+00, 2.521430452745395e-70, 3.549795836551103e-163, 1.555812137840801e-250, -3.630561344078813e+04, 4.113113428331298e-164, "nan", -5.225793233292631e+00, -3.039166073125601e+04, 4.512574474009294e-164, 8.335210982065009e-241, 1.150536878629377e-229, -2.441792850390587e-02, 4.550400988960385e-212, 4.052605075973672e-167, 1.677055827283095e-245, 1.211477895495750e-231, 1.345080054083033e-163, 5.346058711307946e-231, 2.497151049298490e-202, 8.340438764899069e-249, -1.308071742284302e-02, 4.403981170889673e-250, -1.010732247277994e-01, 3.771942209594311e-226, -3.874986629640177e-02, 6.306392766480372e-178, 1.104851105600069e-200, -1.461896777333430e-02, 3.980337317190509e-255, 4.117326802208052e-255, 2.969690885219682e-255, -2.844714832488146e+00, 7.803589201018960e-254, 5.966003488113303e-254, 1.447317635283404e-260, 1.673032344938880e-46, 4.263088151294533e-183, 9.576764326093964e-227, 3.692616604359577e-254]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_jk_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_jk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [-1.504264949824183e-04, -1.504285269672605e-04, -1.504335064409151e-04, -1.504033221704901e-04, -1.504197146132252e-04, -1.504197146132252e-04, -7.707128658347248e-04, -7.708006160265476e-04, -7.728161849547551e-04, "nan", -7.707994961419024e-04, 0.000000000000000e+00, -2.957503751902471e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -9.043033416214264e-200, 0.000000000000000e+00, -2.713960439219592e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -7.353478653969192e-04, 0.000000000000000e+00, 0.000000000000000e+00, -8.107896457832109e-04, -8.162493789439776e-04, -7.897789564685621e-04, -7.943914045751415e-04, -8.244375225729619e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -5.210061234085261e-03, -3.259276886420230e-03, 0.000000000000000e+00, -3.253101244363247e-03, -7.505030206094369e-136, 0.000000000000000e+00, 0.000000000000000e+00, -2.149597377162028e-03, 0.000000000000000e+00, 0.000000000000000e+00, -3.187744426293807e-03, -2.884874457403807e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.104633297279520e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -5.711194235453946e-03, 0.000000000000000e+00, -3.626918705452544e-03, 0.000000000000000e+00, -5.291901959296375e-03, 0.000000000000000e+00, 0.000000000000000e+00, -4.384066595185983e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -3.619887091242456e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -4.543446372331288e-106, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_jk_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_jk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
