
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mggac_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mggac", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.184519501314647e+01, -2.184532550741625e+01, -2.184589644192000e+01, -2.255769755301335e+01, -2.255850222093312e+01, -2.327215260545667e+01, -3.448928836620702e+00, -3.788930038616164e+00, -3.789211904591231e+00, -3.789441335986618e+00, -3.789023266134347e+00, -3.449219295380534e+00, -5.856793002803821e-01, -6.581589871302312e-01, -7.106319222927708e-01, -6.448466993411067e-01, -5.740562117126304e-01, -7.167824898243091e-01, -1.713011295097750e-01, -1.741421661287924e-01, -7.613388451460225e-01, -1.432732042669855e-01, -1.812317020368062e-01, -1.784318724675094e-01, -6.581019107313594e-03, -6.326262868371194e-03, -3.476333243312254e-02, -3.794315463103886e-03, -5.296328351861787e-03, -5.296328351861787e-03, -5.672823125788913e+00, -5.673864591213588e+00, -5.672875002008789e+00, -5.673794351421017e+00, -5.580223543382938e+00, -5.580299459316675e+00, -2.132302180053358e+00, -2.147768906247892e+00, -2.121014053867889e+00, -2.134682664133484e+00, -1.946742210996945e+00, -2.146331652775628e+00, -5.971222399228659e-01, -6.944682044059176e-01, -5.918991687758293e-01, -6.152135568456938e-01, -6.123934785653511e-01, -6.504184074595711e-01, -9.946749449615275e-02, -1.701288660707705e-01, -9.214137475638080e-02, -2.091527713616486e+00, -1.169162544761825e-01, -1.169162544761825e-01, -2.656233567280666e-03, -3.709173967322992e-03, -2.840538134583941e-03, -5.556302741758333e-02, -3.568199358104433e-03, -3.568199358104434e-03, -6.423748302145316e-01, -6.386901067258237e-01, -6.348551809510032e-01, -6.391894165152887e-01, -6.361372521151105e-01, -6.383009253778228e-01, -6.249609904716448e-01, -4.938262480302923e-01, -5.307591165853427e-01, -5.868790833893771e-01, -5.740632911304042e-01, -5.507323783525966e-01, -7.017971400246934e-01, -2.387807900393489e-01, -2.587127502434077e-01, -3.433125039773591e-01, -3.293921263891906e-01, -2.971662249637382e-01, -4.939178621156933e-01, -2.913720046713128e-02, -4.980299534162562e-02, -3.651790905091668e-01, -7.891940970328182e-02, -7.891940970328185e-02, -7.403107167719256e-03, -9.913764999444170e-04, -1.663797465952371e-03, -5.906278390588016e-02, -3.276775065923337e-03, -2.775658892464363e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mggac_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mggac", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.286781639053021e+01, -3.286732153679659e+01, -3.286785616910949e+01, -3.286735050414962e+01, -3.286802926630133e+01, -3.286758561663016e+01, -3.286757434641244e+01, -3.102874750557652e+01, -3.286783608445400e+01, -3.102933906362077e+01, -3.102973454341323e+01, -3.102933906362076e+01, -5.051930277735386e+00, -4.494861590600193e+00, -5.051946072104895e+00, -5.051867362386290e+00, -5.052230531977814e+00, -5.052334543740929e+00, -5.052552992473970e+00, -5.052623902018397e+00, -5.051085513989037e+00, -5.052975468514455e+00, -4.493690661096501e+00, -5.052975468514455e+00, -7.892043361788943e-01, -7.933498036290203e-01, -7.876968938776644e-01, -9.756969626669807e-01, -9.507500945472677e-01, -9.442004532140347e-01, -9.543164663595034e-01, -7.742534410616330e-01, -8.001343114206340e-01, -7.421342642130275e-01, -9.838238666134097e-01, -9.214969921113065e-01, -1.977735824047851e-01, -2.563111011787244e-01, -2.003129828348094e-01, -2.608347902498535e-01, -1.117126516119798e+00, -9.266149505800887e-01, -1.896950896195198e-01, -1.923129744166980e-01, -2.576136324970925e-01, -1.382050372748859e-01, -2.576136324970924e-01, -1.103015133802814e-01, -8.484902094108160e-03, -9.016211469879135e-03, -7.095443867843942e-03, -9.524677952545928e-03, -3.945383561844141e-02, -5.220804798688555e-02, -5.100511295714582e-03, -5.015521791101175e-03, -7.569343833766581e-03, -4.307433262589403e-03, -7.569343833766581e-03, -4.307433262589403e-03, -7.564669856890775e+00, -7.562857827399469e+00, -7.566082532714473e+00, -7.564222357772245e+00, -7.564755882714197e+00, -7.562910113694157e+00, -7.565967956154650e+00, -7.564149658754171e+00, -7.838844793270684e+00, -7.563542196797183e+00, -7.565387607620445e+00, -7.836971335657749e+00, -2.843141401860724e+00, -2.842997734072845e+00, -2.864081432912812e+00, -2.863301998878321e+00, -2.825568864975806e+00, -2.830455944027179e+00, -2.843674743567575e+00, -2.848798525122190e+00, -2.868014229980302e+00, -2.448812013677748e+00, -2.868014229980302e+00, -2.855454156432094e+00, -8.534831084396927e-01, -8.760704037654594e-01, -9.257473273973430e-01, -9.261675982261153e-01, -7.741977395441716e-01, -8.026601367094321e-01, -8.062343395381465e-01, -8.330227658771310e-01, -8.876501911052214e-01, -8.717533760561513e-01, -8.876501911052214e-01, -8.434134207362894e-01, -1.319850541829269e-01, -1.332436806916417e-01, -2.009260015489324e-01, -2.526119261440567e-01, -1.193962588582971e-01, -1.258114786050718e-01, -2.789329773173406e+00, -2.788076618451321e+00, -1.510214068148049e-01, -1.599823996240193e-01, -1.510214068148049e-01, -1.599823996240193e-01, -3.053554754646190e-03, -3.976504961277044e-03, -4.907590448865868e-03, -4.981867023476635e-03, -3.669764502401989e-03, -3.886410154128041e-03, -8.226385593620904e-02, -6.605407515673972e-02, -3.748106411631555e-03, -5.147350635860416e-03, -3.748106411631556e-03, -5.147350635860417e-03, -8.548379516713247e-01, -8.581424714565392e-01, -8.499178051330657e-01, -8.532364139959809e-01, -8.596536405448235e-01, -8.626659477343367e-01, -8.587344230912970e-01, -8.563796282136003e-01, -8.591533195739172e-01, -8.622050606676985e-01, -8.591533195739172e-01, -8.556728887898564e-01, -8.318995081037271e-01, -8.346495196776099e-01, -7.137586394101794e-01, -6.923151390102963e-01, -7.473797522707406e-01, -7.960025023041286e-01, -7.811248764280304e-01, -7.838715509319149e-01, -7.639908281809674e-01, -7.668288307712736e-01, -7.639908281809674e-01, -8.186543507829164e-01, -9.699537906378968e-01, -1.034461669508886e+00, -3.174474013697750e-01, -3.192854547301751e-01, -3.071845656839968e-01, -3.842429213019779e-01, -4.284252176150425e-01, -5.064127228734077e-01, -4.392669401020095e-01, -4.391119815949099e-01, -4.392669401020093e-01, -3.617515537471769e-01, -6.562743003954353e-01, -6.607934808158605e-01, -3.871583909404001e-02, -3.898074311552521e-02, -6.525784243182652e-02, -6.744234009363499e-02, -4.831806596018159e-01, -4.904667030632328e-01, -1.021389494498609e-01, -1.078480678025423e-01, -1.021389494498609e-01, -1.078480678025423e-01, -9.685861741544750e-03, -1.003701691601243e-02, -1.320321737326929e-03, -1.323339422839883e-03, -2.143955463191941e-03, -2.280269703272829e-03, -7.809872526318887e-02, -7.937667313256985e-02, -3.550252786472896e-03, -4.717926265494520e-03, -3.550252786472894e-03, -3.765062087937498e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mggac_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mggac", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.836220619510237e-08, 0.000000000000000e+00, -2.836031006151550e-08, -2.836154007428972e-08, 0.000000000000000e+00, -2.835982633747693e-08, -2.835944888843867e-08, 0.000000000000000e+00, -2.835681752546609e-08, -2.836694975914066e-08, 0.000000000000000e+00, 0.000000000000000e+00, -2.836179914978035e-08, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -7.876493207255951e-06, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -7.869794977681880e-06, 0.000000000000000e+00, 0.000000000000000e+00, -3.956705393380771e-04, 0.000000000000000e+00, -4.319822893946605e-04, -3.863690222676881e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -3.393147927531300e-04, -4.478209629452859e-04, 0.000000000000000e+00, -2.087292875580506e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.495264669322209e-02, 0.000000000000000e+00, 0.000000000000000e+00, -1.657838071414931e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -4.209557606340601e-05, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -4.859482788652215e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -8.137839756366537e-06, 0.000000000000000e+00, 0.000000000000000e+00, -8.634102093435408e-05, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -6.729816313203776e-06, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -6.736757478681654e-06, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -4.209218418474640e-05, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -3.781388867123150e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -4.045908000263334e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -3.382883402226153e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -5.522175268080213e-07, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -3.538057131497983e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.401618314034702e-02, 0.000000000000000e+00, -2.321351812114619e-02, -2.058440429817827e-02, 0.000000000000000e+00, 0.000000000000000e+00, -2.231840754635862e-02, 0.000000000000000e+00, -2.158159210158651e-02, -2.231840754635862e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -4.615190481186750e-02, 0.000000000000000e+00, 0.000000000000000e+00, -7.793895184809306e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -7.812766912362092e-02, 0.000000000000000e+00, 0.000000000000000e+00, -3.018853782828123e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.024790185259263e-02, 0.000000000000000e+00, 0.000000000000000e+00, -3.660838803552702e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.344173285097691e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -8.974121433396530e-05, 0.000000000000000e+00, -8.827467210157560e-05, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -4.818839733099240e-06, 0.000000000000000e+00, -5.060861596288023e-06, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.307351311381477e-06, 0.000000000000000e+00, -2.846385475918186e-06, -7.752047599661625e-04, 0.000000000000000e+00, -9.641722024811831e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.183232057926961e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mggac_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mggac", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.193334216854849e-03, 2.193179110616842e-03, 2.193303961480830e-03, 2.193157144986690e-03, 2.193214440984217e-03, 2.193026735249891e-03, 2.193554310412331e-03, 1.278533578190812e-14, 2.193315205632956e-03, 1.278509203628158e-14, 1.278492908788593e-14, 1.278509203628158e-14, 7.852700572704711e-14, 2.628574328746643e-03, 7.852676022055589e-14, 7.852798369176518e-14, 7.852233885898963e-14, 7.852072233018989e-14, 7.851732746392256e-14, 7.851622553467570e-14, 7.854013889804842e-14, 7.851076267700996e-14, 2.625129142373842e-03, 7.851076267700996e-14, 9.419123564595468e-04, 1.040631399354473e-03, 9.154820168898638e-04, 4.065944412163536e-13, 4.172631322630812e-13, 4.201575642974811e-13, 4.157037796992119e-13, 7.683031129917468e-04, 1.103797923691159e-03, 4.227642432496972e-04, 4.032357565722575e-13, 4.305092330690831e-13, 5.812110176528746e-04, 1.547779095656186e-12, 6.685195672123330e-04, 1.520935774764173e-12, 3.551191040995080e-13, 1.677472764743883e-04, 2.091319201878056e-12, 2.062850834587144e-12, 1.539953310022867e-12, 2.870467150382892e-12, 1.539953310022866e-12, 3.320433272789390e-06, 4.675638634756833e-11, 4.400098114705517e-11, 1.480532500025680e-11, 4.165190808432090e-11, 2.700553711549015e-08, 7.598700756295450e-12, 7.778565945070050e-11, 7.910395480169816e-11, 5.241225419915720e-11, 9.210697314368627e-11, 5.241225419915720e-11, 9.210697314368624e-11, 5.244286438340342e-14, 5.245542947741297e-14, 5.243307268793542e-14, 5.244596690093074e-14, 5.244226800667451e-14, 5.245506682596455e-14, 5.243386671740592e-14, 5.244647095817994e-14, 7.542752427371495e-03, 5.245068317036886e-14, 5.243788897313132e-14, 7.545008045403552e-03, 1.395333198478814e-13, 1.395403710038993e-13, 1.385131560429482e-13, 1.385508614114141e-13, 1.404010936211953e-13, 1.401586763860377e-13, 1.395071498591901e-13, 1.392562355825988e-13, 1.383232182900713e-13, 2.536647554402101e-03, 1.383232182900713e-13, 1.389316503584706e-13, 4.648164125440241e-13, 6.036917873510093e-02, 4.285326502907196e-13, 4.283381932396442e-13, 5.124181297242815e-13, 4.942477382952718e-13, 4.920566357404608e-13, 4.762330307184701e-13, 4.469248813015118e-13, 6.283051462961521e-02, 4.469248813015118e-13, 4.703659519814711e-13, 3.005741985327888e-12, 2.977349586973494e-12, 1.390579154883996e-04, 1.570444348827062e-12, 3.322658825889086e-12, 3.153233929458099e-12, 1.422251897657784e-13, 1.422891156154806e-13, 2.626865981543071e-12, 2.479728932520607e-12, 2.626865981543071e-12, 2.479728932520607e-12, 8.007508941025044e-14, 9.978126562384650e-11, 8.084421747594304e-11, 7.963913189373041e-11, 1.081098920217470e-10, 1.020824149144062e-10, 4.822447229255134e-12, 5.192919945057479e-07, 1.058582375267797e-10, 7.707446659249632e-11, 1.058582375267797e-10, 7.707446659249628e-11, 4.640797172105137e-13, 4.622926472726429e-13, 4.667662598295030e-13, 4.649508020855633e-13, 3.839822208719160e-02, 3.755118718813740e-02, 3.307814383762502e-02, 4.632442690879515e-13, 3.577401697672478e-02, 3.499773090122391e-02, 3.577401697672478e-02, 4.636268837798906e-13, 4.768760541812755e-13, 4.753048381796798e-13, 5.558082735380022e-13, 4.400572361608784e-02, 5.308050627662819e-13, 8.534557459012274e-02, 5.078739233965419e-13, 5.060943405587798e-13, 5.192640295438109e-13, 5.173422542828166e-13, 5.192640295438109e-13, 9.118706927203230e-02, 4.090019130602209e-13, 7.165551976425318e-02, 1.249696687657703e-12, 1.242502469113766e-12, 1.460439508190156e-03, 1.032453534643531e-12, 1.210440400366565e-02, 7.833787358556578e-13, 9.031250107865198e-13, 9.034437150544081e-13, 9.031250107865213e-13, 5.137462514870537e-03, 6.044925994165607e-13, 6.003584616967652e-13, 2.652320308910425e-08, 2.662897441322773e-08, 6.079165370479854e-12, 5.882257254412572e-12, 8.210447790493555e-13, 8.088478889193779e-13, 3.884052484249797e-12, 3.678443489930232e-12, 3.884052484249798e-12, 3.678443489930233e-12, 2.230115631088224e-11, 2.606204842091768e-11, 3.008315391618313e-10, 3.001446774549922e-10, 1.158060136458022e-13, 1.718788644234042e-13, 1.880439008748308e-06, 2.455453932226751e-06, 1.117529148347888e-10, 8.409034996420178e-11, 1.117529148347889e-10, 3.216299355012665e-12])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
