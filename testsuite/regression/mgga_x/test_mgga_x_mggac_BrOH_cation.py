
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mggac_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mggac", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.325662956421711e+01, -2.325669556371893e+01, -2.325702034053936e+01, -2.325603849423266e+01, -2.325654848547094e+01, -2.325654848547094e+01, -3.324467231073544e+00, -3.324631347980829e+00, -3.329289418559613e+00, -3.330258475457820e+00, -3.328756266078452e+00, -3.328756266078452e+00, -5.905640613432908e-01, -5.898590098732150e-01, -5.732554208581107e-01, -5.799736884159590e-01, -5.802320078866139e-01, -5.802320078866139e-01, -1.824414882016062e-01, -1.837596751480947e-01, -6.816728801380729e-01, -1.154985522365477e-01, -1.650879184631174e-01, -1.650879184630853e-01, -5.252017024938669e-03, -5.530716438884854e-03, -3.048848752018174e-02, -3.027990024679941e-03, -4.226647658294586e-03, -4.226647658294965e-03, -5.672673933892735e+00, -5.673717355293361e+00, -5.672729094166019e+00, -5.673650023338142e+00, -5.673199087002950e+00, -5.673199087002950e+00, -2.096887853913154e+00, -2.121489834755510e+00, -2.092271655854395e+00, -2.113804602149662e+00, -2.113099202383698e+00, -2.113099202383698e+00, -6.183317973049131e-01, -6.740392329126664e-01, -5.387623555496954e-01, -5.561121567338936e-01, -6.320160051858826e-01, -6.320160051858534e-01, -7.949694441485572e-02, -1.743446490712874e-01, -7.360832551708890e-02, -1.915928577072977e+00, -9.514210590714701e-02, -9.514210590715000e-02, -2.337693342135486e-03, -2.960044267682493e-03, -2.266843969524620e-03, -4.940371330604135e-02, -2.847542890331452e-03, -2.847542890331453e-03, -6.417778053745923e-01, -6.381131031637983e-01, -6.394025684723774e-01, -6.404644813086833e-01, -6.399324759630927e-01, -6.399324759630927e-01, -6.232455414154618e-01, -5.356289242904326e-01, -5.606120409421671e-01, -5.854237600071804e-01, -5.726198915347958e-01, -5.726198915348140e-01, -6.958984588106589e-01, -2.336631365643292e-01, -2.741704754956902e-01, -3.470346673044191e-01, -3.121665406564802e-01, -3.121665406564474e-01, -4.793145600605678e-01, -2.914348032826298e-02, -3.974863406635501e-02, -3.434564100234919e-01, -6.308376509139663e-02, -6.308376509139667e-02, -7.403107385428237e-03, -7.911516215048018e-04, -1.663797475596450e-03, -5.948675154723878e-02, -2.614976196972455e-03, -2.614976196972640e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mggac_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mggac", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.071534916632262e+01, -3.071596078396267e+01, -3.071546986245933e+01, -3.071604835752363e+01, -3.071593964965075e+01, -3.071669801909022e+01, -3.071458084028314e+01, -3.071496540556077e+01, -3.071541941822190e+01, -3.071571915936834e+01, -3.071541941822190e+01, -3.071571915936834e+01, -4.882674868943035e+00, -4.882489673749067e+00, -4.882943559305251e+00, -4.882670095879369e+00, -4.888191230310325e+00, -4.889203127576463e+00, -4.886167027100091e+00, -4.886368242331867e+00, -4.881282884962917e+00, -4.891051712186799e+00, -4.881282884962917e+00, -4.891051712186799e+00, -8.061539954716186e-01, -8.109360654889488e-01, -8.045249140191679e-01, -8.101228396747130e-01, -7.822948679053573e-01, -7.768428675625554e-01, -7.905173585167194e-01, -7.936672676021892e-01, -8.169449713200624e-01, -7.582709419830094e-01, -8.169449713200624e-01, -7.582709419830094e-01, -8.905729750666562e-02, -1.772201275065415e-01, -9.844220332373667e-02, -1.747053837185107e-01, -8.959931555508049e-01, -9.290884170318274e-01, -1.505693550396471e-01, -1.383525138252388e-01, -9.568751605851190e-02, -1.103103601517973e-01, -9.568751605746441e-02, -1.103103601517972e-01, -6.766392203651659e-03, -7.097281911935788e-03, -7.094124152480115e-03, -7.589464316578056e-03, -3.944009198936462e-02, -4.162896233098012e-02, -4.070377475848765e-03, -4.002552912188426e-03, -6.040505727044958e-03, -3.437474994172263e-03, -6.040505727056561e-03, -3.437474994172262e-03, -7.540350218942096e+00, -7.538684597366362e+00, -7.541989063051884e+00, -7.540266353833204e+00, -7.540507302838525e+00, -7.538786563704473e+00, -7.541910737740413e+00, -7.540220919584327e+00, -7.541139927190705e+00, -7.539470854880904e+00, -7.541139927190705e+00, -7.539470854880904e+00, -2.472125609797737e+00, -2.478932520608005e+00, -2.535666115216112e+00, -2.540937115925814e+00, -2.460664392268086e+00, -2.470094297383289e+00, -2.524378680175502e+00, -2.533429321025398e+00, -2.519935036555723e+00, -2.513087705664386e+00, -2.519935036555723e+00, -2.513087705664386e+00, -8.268977989675662e-01, -8.242820420915170e-01, -9.404727762724744e-01, -9.396800485129202e-01, -7.506305650454735e-01, -7.825373021072978e-01, -8.324971816902669e-01, -8.640224670610075e-01, -8.646327498272507e-01, -8.229130545849808e-01, -8.646327498272507e-01, -8.229130545851171e-01, -1.043040900661256e-01, -1.055969494357281e-01, 9.000807015925346e-03, 6.469775700760802e-03, -9.502533405276793e-02, -9.961618651407456e-02, -2.920745823057211e+00, -2.919499629613896e+00, -1.112994807489860e-01, -8.419372828941259e-02, -1.112994807489647e-01, -8.419372828941298e-02, -3.053554754816026e-03, -3.173383203556741e-03, -3.916420392545673e-03, -3.975695572890858e-03, -2.928593918466538e-03, -3.101484307225523e-03, -6.562114065173737e-02, -6.581559989637234e-02, -2.991113570579791e-03, -4.107652121065992e-03, -2.991113570579791e-03, -4.107652121066109e-03, -8.543802116718368e-01, -8.577025661046580e-01, -8.474002511166199e-01, -8.507940630464420e-01, -8.498440032063472e-01, -8.532282963589352e-01, -8.518847923502241e-01, -8.552185174926430e-01, -8.508635045535868e-01, -8.542218715436087e-01, -8.508635045535868e-01, -8.542218715436087e-01, -8.335153349034105e-01, -8.361416067705816e-01, -6.894447483519138e-01, -6.930491469632223e-01, -7.293187818938942e-01, -7.331355904114879e-01, -7.709870748117510e-01, -7.738464987359074e-01, -7.492916031258593e-01, -7.525385383823662e-01, -7.492916031258593e-01, -7.525385383823515e-01, -9.950965738654542e-01, -9.939148303150032e-01, -1.623613554014150e-01, -1.636229527424452e-01, -2.340485234639950e-01, -2.435052069992633e-01, -4.449423486867686e-01, -4.486963119806807e-01, -3.385387518282889e-01, -3.394783950979887e-01, -3.385387518282888e-01, -3.394783950966815e-01, -5.926699687580763e-01, -6.008310801339005e-01, -3.841434142762427e-02, -3.882827618071289e-02, -5.204445081081420e-02, -5.377261839755055e-02, -4.512115003472951e-01, -4.567725710405668e-01, -8.083434720362843e-02, -8.459049678089468e-02, -8.083434720362957e-02, -8.459049678089396e-02, -9.685861226089585e-03, -1.003701648249832e-02, -1.053660598587090e-03, -1.056068812010286e-03, -2.143955241490423e-03, -2.280269420550874e-03, -7.685048036807085e-02, -5.142502222771359e-02, -2.833219804351119e-03, -3.764997194102711e-03, -2.833219804351116e-03, -3.764997194112506e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mggac_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mggac", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.474980836288313e-09, 0.000000000000000e+00, -4.464654608864658e-09, -4.474762771070786e-09, 0.000000000000000e+00, -4.464497694762152e-09, -4.472791022367560e-09, 0.000000000000000e+00, -4.462031277724336e-09, -4.475184560941565e-09, 0.000000000000000e+00, -4.465095774305867e-09, -4.474875468551481e-09, 0.000000000000000e+00, -4.462940736046383e-09, -4.474875468551481e-09, 0.000000000000000e+00, -4.462940736046383e-09, -3.425700943827412e-05, 0.000000000000000e+00, -3.419101201832095e-05, -3.427661163538117e-05, 0.000000000000000e+00, -3.419891018589109e-05, -3.459678585962648e-05, 0.000000000000000e+00, -3.463790782763682e-05, -3.470160387929314e-05, 0.000000000000000e+00, -3.464981179923949e-05, -3.424057866899868e-05, 0.000000000000000e+00, -3.493312748118031e-05, -3.424057866899868e-05, 0.000000000000000e+00, -3.493312748118031e-05, -1.872714813237327e-03, 0.000000000000000e+00, -1.944941474458878e-03, -1.865133489722205e-03, 0.000000000000000e+00, -1.928690954483535e-03, -1.661823360561182e-03, 0.000000000000000e+00, -1.811347793167692e-03, -2.392534191518580e-03, 0.000000000000000e+00, -2.519738138697897e-03, -1.794902672428485e-03, 0.000000000000000e+00, -3.577963781947132e-03, -1.794902672428485e-03, 0.000000000000000e+00, -3.577963781947132e-03, -7.119875755850037e+00, 0.000000000000000e+00, -3.106342929782254e+00, -6.933880008088413e+00, 0.000000000000000e+00, -3.379844707416792e+00, -4.827977776442434e-05, 0.000000000000000e+00, -8.451203241741091e-05, -2.265406069019388e-01, 0.000000000000000e+00, -1.807056067065745e+00, -6.134657529930037e+00, 0.000000000000000e+00, -1.400851809278217e-02, -6.134657529973343e+00, 0.000000000000000e+00, -1.400851809277559e-02, -4.331019732498357e+00, 0.000000000000000e+00, -7.146243405670671e+01, -1.074364997648783e+00, 0.000000000000000e+00, -7.462623526177693e+00, -6.766965944172806e-02, 0.000000000000000e+00, -1.376446425998009e-01, -9.992002251226612e-04, 0.000000000000000e+00, -1.565707552732129e-03, -1.104816528300196e-01, 0.000000000000000e+00, -4.136484619789205e-04, -1.104816383265713e-01, 0.000000000000000e+00, -4.136484503574901e-04, -5.258707018876333e-07, 0.000000000000000e+00, -5.230638002803874e-07, -5.247583646458449e-07, 0.000000000000000e+00, -5.219946434909116e-07, -5.244846700263833e-07, 0.000000000000000e+00, -5.220715518413023e-07, -5.235830701133968e-07, 0.000000000000000e+00, -5.211512488659275e-07, -5.263017850206053e-07, 0.000000000000000e+00, -5.226933799326727e-07, -5.263017850206053e-07, 0.000000000000000e+00, -5.226933799326727e-07, -2.638675960704428e-04, 0.000000000000000e+00, -2.576891603559256e-04, -2.256805216602101e-04, 0.000000000000000e+00, -2.208172233096401e-04, -2.449829904258203e-04, 0.000000000000000e+00, -2.450650510283787e-04, -2.080392970552910e-04, 0.000000000000000e+00, -2.078576597867270e-04, -2.533768866229064e-04, 0.000000000000000e+00, -2.395661681010232e-04, -2.533768866229064e-04, 0.000000000000000e+00, -2.395661681010232e-04, -4.207897351762634e-02, 0.000000000000000e+00, -4.136874759488215e-02, -2.928786241506115e-02, 0.000000000000000e+00, -2.842414011604283e-02, -6.876107479893355e-02, 0.000000000000000e+00, -6.483669414911442e-02, -5.848297656593836e-02, 0.000000000000000e+00, -5.599912086694243e-02, -3.045695740362803e-02, 0.000000000000000e+00, -4.516053065504039e-02, -3.045695740362794e-02, 0.000000000000000e+00, -4.516053065600795e-02, -3.106079073857878e-01, 0.000000000000000e+00, -2.370506816471097e-01, -6.755907567864096e+00, 0.000000000000000e+00, -6.634545809067879e+00, -1.280730907226187e-01, 0.000000000000000e+00, -2.874515042464834e-01, -4.454808760683354e-04, 0.000000000000000e+00, -4.463088991068970e-04, -1.851413656464653e+00, 0.000000000000000e+00, -8.050064828282924e+00, -1.851413656470101e+00, 0.000000000000000e+00, -8.050064828282968e+00, -1.142863771892133e-05, 0.000000000000000e+00, -1.289095370577004e-05, -1.316344092480814e-04, 0.000000000000000e+00, -8.850416780459291e-05, -8.461299354673777e-03, 0.000000000000000e+00, -9.469699633192951e-03, -5.300527763724669e-02, 0.000000000000000e+00, -2.896474135025733e-01, -1.294753362830093e-05, 0.000000000000000e+00, -7.642103565962102e-01, -1.294753362805269e-05, 0.000000000000000e+00, -7.642103562618104e-01, -9.007033721193037e-03, 0.000000000000000e+00, -8.708407719136876e-03, -9.101446808834696e-03, 0.000000000000000e+00, -8.804040811390518e-03, -9.070663915708628e-03, 0.000000000000000e+00, -8.769986724882387e-03, -9.041129571981150e-03, 0.000000000000000e+00, -8.746789795132787e-03, -9.059706817252815e-03, 0.000000000000000e+00, -8.760861078818842e-03, -9.059706817252815e-03, 0.000000000000000e+00, -8.760861078818840e-03, -1.637869697491308e-02, 0.000000000000000e+00, -1.573700503072684e-02, -2.349593934073224e-02, 0.000000000000000e+00, -2.280908670342858e-02, -2.209108762582053e-02, 0.000000000000000e+00, -2.139354791891915e-02, -1.991346399936866e-02, 0.000000000000000e+00, -1.952444851823047e-02, -2.214743698937073e-02, 0.000000000000000e+00, -2.120613593963654e-02, -2.214743698937074e-02, 0.000000000000000e+00, -2.120613593974384e-02, -2.786466098439434e-02, 0.000000000000000e+00, -2.671030825779528e-02, -1.843828938505296e+00, 0.000000000000000e+00, -1.826260833183667e+00, -1.163380723948620e+00, 0.000000000000000e+00, -1.103566116815437e+00, -4.194964558911692e-01, 0.000000000000000e+00, -4.097890862237566e-01, -6.819432199653250e-01, 0.000000000000000e+00, -6.827808133959260e-01, -6.819432199653248e-01, 0.000000000000000e+00, -6.827808134067848e-01, -1.183170489951326e-01, 0.000000000000000e+00, -1.076229587317409e-01, -1.192850421551565e+00, 0.000000000000000e+00, -6.101417038826555e-01, -7.480051781656835e-02, 0.000000000000000e+00, -9.772323382988415e-02, -4.956721327712542e-01, 0.000000000000000e+00, -4.061664426215962e-01, -4.941802909121309e-01, 0.000000000000000e+00, -1.003417043086160e+00, -4.941802909114332e-01, 0.000000000000000e+00, -1.003417043086489e+00, -3.997680524190148e-04, 0.000000000000000e+00, -3.536585270612777e-04, -7.015153599066001e-07, 0.000000000000000e+00, -4.053677961348509e-07, -1.110162134228202e-02, 0.000000000000000e+00, -1.222703900594701e-02, -9.959618498914184e-01, 0.000000000000000e+00, -1.730101546162687e+01, -7.586092698068371e-05, 0.000000000000000e+00, -6.265577630946971e-01, -7.586092698046000e-05, 0.000000000000000e+00, -6.265576732740662e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mggac_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mggac", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mggac_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mggac", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [3.460636496499267e-04, 3.452637578024383e-04, 3.460501399701339e-04, 3.452540541514228e-04, 3.459090442960007e-04, 3.450794108606466e-04, 3.460562544402894e-04, 3.452682204993553e-04, 3.460574682394177e-04, 3.451213181958143e-04, 3.460574682394177e-04, 3.451213181958143e-04, 1.143285205049976e-02, 1.141035916623820e-02, 1.143950133348099e-02, 1.141303573052368e-02, 1.154830704383409e-02, 1.156274754549740e-02, 1.158551306151054e-02, 1.156870877050378e-02, 1.142163692582114e-02, 1.166573561808337e-02, 1.142163692582114e-02, 1.166573561808337e-02, 4.458085824797431e-03, 4.685301267940713e-03, 4.419340243474966e-03, 4.637037353429872e-03, 3.696724476452478e-03, 3.946640348239207e-03, 5.382307386888466e-03, 5.705388321498795e-03, 4.424111435123341e-03, 7.246875454547639e-03, 4.424111435123341e-03, 7.246875454547639e-03, 2.767503518620984e-01, 1.353894237158920e-01, 2.796071909576569e-01, 1.552481343329096e-01, 1.742229788374271e-04, 3.367732335099087e-04, 4.002648176864292e-03, 3.326828964547089e-02, 2.714750607606013e-01, 9.571872481272647e-05, 2.714750607625173e-01, 9.571872481276458e-05, 6.848000108143581e-06, 1.355761079723840e-04, 1.954612456821896e-06, 1.669073738627698e-05, 2.116555352654016e-05, 5.069962777463021e-05, 3.431837727618368e-10, 5.113191824758667e-10, 1.240217776053099e-07, 8.556972679669864e-11, 1.240217613899586e-07, 8.556972255551798e-11, 5.892261380297573e-04, 5.856600027208027e-04, 5.883092605690807e-04, 5.847793102148451e-04, 5.876931702909483e-04, 5.845611337485018e-04, 5.869649650919035e-04, 5.838176400862875e-04, 5.898770310722341e-04, 5.854041457408912e-04, 5.898770310722341e-04, 5.854041457408912e-04, 1.569692310764037e-02, 1.532705735784395e-02, 1.372408041901745e-02, 1.341737337654910e-02, 1.430496213152606e-02, 1.438413235497069e-02, 1.238278212392766e-02, 1.243896748016060e-02, 1.547191220741241e-02, 1.443723926902211e-02, 1.547191220741241e-02, 1.443723926902211e-02, 6.771470946180964e-02, 6.604444571453717e-02, 6.014481149571119e-02, 5.845062732059032e-02, 8.259075665955280e-02, 8.678587349376497e-02, 7.933164061021432e-02, 8.378859578784205e-02, 5.513725743754231e-02, 7.013158435184429e-02, 5.513725743754211e-02, 7.013158435334703e-02, 1.848501742943060e-03, 1.451490384453794e-03, 2.777105539616901e-01, 2.768253384864602e-01, 5.642390485649485e-04, 1.481693844195914e-03, 2.502428883488711e-02, 2.503702661744951e-02, 1.650638950664226e-02, 8.531965471952467e-02, 1.650638950669086e-02, 8.531965471952525e-02, 1.657225898683317e-12, 2.098083241129274e-12, 4.027239442678461e-11, 2.832521409912216e-11, 1.082392388214219e-09, 1.438848900390539e-09, 7.637995390349570e-05, 4.251248000443022e-04, 1.764638974422575e-12, 2.697722458601630e-07, 1.764638974402847e-12, 2.697722457909760e-07, 1.456351693904284e-02, 1.424459270184201e-02, 1.446353028559847e-02, 1.415543708903979e-02, 1.450261123835776e-02, 1.418670842673966e-02, 1.452865869249687e-02, 1.421938339086156e-02, 1.452173972588968e-02, 1.420702685215554e-02, 1.452173972588968e-02, 1.420702685215554e-02, 2.440759802093693e-02, 2.368468530009523e-02, 2.211464835153881e-02, 2.174840604083501e-02, 2.387119572629561e-02, 2.342659987550448e-02, 2.456638828119988e-02, 2.434145732784562e-02, 2.556354039895441e-02, 2.475083934553390e-02, 2.556354039895440e-02, 2.475083934565912e-02, 6.581728888023601e-02, 6.339959332123478e-02, 1.526753932445216e-01, 1.538626825380112e-01, 1.657946374546619e-01, 1.620500150548990e-01, 1.387046754226088e-01, 1.377549786655786e-01, 1.496121499831427e-01, 1.496374375134205e-01, 1.496121499831427e-01, 1.496374375158003e-01, 8.656385996365563e-02, 8.037764324374358e-02, 3.525494303735902e-04, 1.840556009079911e-04, 5.380663451435343e-05, 7.759412038986670e-05, 1.447292200496869e-01, 1.240411312878828e-01, 1.362990008119355e-03, 3.258004433800727e-03, 1.362990008117570e-03, 3.258004433801300e-03, 1.850090550801218e-09, 1.821244300772850e-09, 4.179357426568946e-15, 2.431621671289574e-15, 5.571906036561766e-10, 7.383292191975777e-10, 2.415936550598383e-03, 4.406043478277931e-02, 8.786766007400653e-12, 1.703129420997038e-07, 8.786766007400619e-12, 1.703129177086448e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
