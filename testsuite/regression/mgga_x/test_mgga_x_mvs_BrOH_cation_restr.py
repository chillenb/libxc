
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mvs_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.202020204443628e+01, -2.202029621243274e+01, -2.202072062288311e+01, -2.201932161770632e+01, -2.202005383685664e+01, -2.202005383685664e+01, -3.082411387141656e+00, -3.082491436067334e+00, -3.084666944848378e+00, -3.084064520299276e+00, -3.083808501229210e+00, -3.780615593708254e+00, -5.676828489591356e-01, -7.229275611335837e-01, -7.014753290850896e-01, -7.084215805618694e-01, -7.069367804550144e-01, -7.069367804550144e-01, -1.845325427862841e-01, -1.877215265064042e-01, -6.502942050089542e-01, -1.293049155578283e-01, -1.521647757105667e-01, -1.521647757105668e-01, -1.460738125231323e-03, -1.585536362191099e-03, -1.879394996893951e-02, -6.166981864789038e-04, -9.053839803069454e-04, -9.053839803069454e-04, -5.671917076477238e+00, -5.672969293394106e+00, -5.671969570380162e+00, -5.449956906842949e+00, -5.672448279026786e+00, -5.672448279026786e+00, -1.705912231323648e+00, -1.723463536812014e+00, -1.693023627104612e+00, -1.708392838651741e+00, -1.721992338683064e+00, -2.139626462057235e+00, -6.387142911532337e-01, -6.942835762111627e-01, -5.905014178794320e-01, -6.143696026328339e-01, -6.491133160566194e-01, -5.792421484270366e-01, -7.432400083709435e-02, -1.793171152901905e-01, -6.871511381384764e-02, -2.090219060195075e+00, -1.009973956343913e-01, -1.009973956343913e-01, -2.176532840940424e-03, -5.869624642644744e-04, -5.096607185206810e-04, -4.611893621487728e-02, -2.540318772502739e-03, -5.978590280030185e-04, -6.423393082730962e-01, -6.386383797164110e-01, -6.273944191466740e-01, -6.410146156738867e-01, -6.404778059963191e-01, -6.404778059963191e-01, -6.249261212806758e-01, -5.357825929657638e-01, -5.614311982686342e-01, -5.867278113314488e-01, -5.738234827429491e-01, -5.370920967181245e-01, -7.277851127370377e-01, -1.823721667061144e-01, -2.831970374550490e-01, -3.025899437633370e-01, -3.273798416254000e-01, -3.273798416254000e-01, -4.035487559868199e-01, -1.762992624896683e-02, -2.763657615017540e-02, -3.644301622628734e-01, -5.883848246149995e-02, -5.828243793533001e-02, -2.233273650965189e-03, -8.319531637148309e-05, -2.886173024115473e-04, -5.366092149834521e-02, -5.562465313680796e-04, -5.562465313679168e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mvs_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.112152351610415e+01, -3.112156494311459e+01, -3.112179431786301e+01, -3.112117465304606e+01, -3.112149257058809e+01, -3.112149257058809e+01, -4.576858980586476e+00, -4.577136361841152e+00, -4.584586164027771e+00, -4.581977135687775e+00, -4.581779938463931e+00, -4.272562930009647e+00, -7.960462060603760e-01, -6.675523365964813e-01, -6.068002482090823e-01, -6.325193463294199e-01, -6.267908373363846e-01, -6.267908373363846e-01, -1.341488884451018e-01, -1.417265611836396e-01, -8.939954201694471e-01, 1.514328974738064e-02, -5.502523297564008e-02, -5.502523297563960e-02, 9.636898962822303e-01, 9.245059215340259e-01, 4.776390706830106e-01, 1.427838737780654e+00, 1.124165601462055e+00, 1.124165601462055e+00, -7.281281359253573e+00, -7.284863861790487e+00, -7.281477348979006e+00, -7.567073960118724e+00, -7.283081987676312e+00, -7.283081987676312e+00, -2.476251274877102e+00, -2.511377875526756e+00, -2.450534705183954e+00, -2.480917219518727e+00, -2.508666337559990e+00, -2.340676876792985e+00, -7.703457236189990e-01, -8.787043637623612e-01, -6.816008928596096e-01, -7.421026503152613e-01, -7.909070547425452e-01, -9.968371770544106e-01, -9.970565798054122e-02, -7.044336288757565e-02, -9.210949373228237e-02, -2.561517088751005e+00, 6.057242429978937e-02, 6.057242429978973e-02, -2.902060505944073e-03, 1.512615551896376e+00, 7.894758362423820e-01, -6.166000051769006e-02, -3.387144617360950e-03, 1.030252740778442e+00, -8.478903661184644e-01, -8.345676412370108e-01, -8.552596745101241e-01, -8.431274440741676e-01, -8.411892054549052e-01, -8.411892054549052e-01, -8.237708151890847e-01, -6.305773155913766e-01, -6.881340778586014e-01, -7.438199912417467e-01, -7.155630660583734e-01, -7.888334844163785e-01, -9.105533626541527e-01, -2.509628642285055e-01, -2.471425445504116e-01, -4.384329310759405e-01, -3.285204309862780e-01, -3.285204309862780e-01, -6.030559049480441e-01, 4.886832063181361e-01, 4.133205586112720e-01, -4.165564768421138e-01, -7.885416049368162e-02, 1.876436608105952e-01, 1.068603501432982e+00, 2.714005773347069e+00, 1.261405105411600e+00, 1.971666642017463e-01, 9.377375563687923e-01, 9.377375563657160e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mvs_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.676845754491695e-09, -6.676640680076609e-09, -6.675759129202971e-09, -6.678803304196464e-09, -6.677202580810792e-09, -6.677202580810792e-09, -5.259995941593284e-06, -5.263239628535143e-06, -5.349352352652193e-06, -5.312398072897403e-06, -5.318554710437337e-06, -1.500242896955795e-05, -7.798778265472953e-04, -1.058130754676239e-02, -1.168114292175192e-02, -1.134893840352060e-02, -1.141802622701433e-02, -1.141802622701433e-02, -2.299876973657269e+00, -2.175003465365115e+00, -1.439237786920159e-04, -6.257666944673121e+00, -4.136027903204449e+00, -4.136027903204461e+00, -3.775710341999549e+05, -3.172378838623355e+05, -7.292758055299381e+02, -2.481639826757551e+06, -1.162823209352115e+06, -1.162823209352115e+06, -3.038938105944683e-06, -3.036830585563360e-06, -3.038834062181590e-06, -1.945172194145855e-06, -3.037873424420725e-06, -3.037873424420725e-06, -3.267134724231698e-05, -3.475436405078553e-05, -3.109937959289544e-05, -3.286489320038514e-05, -3.466816658758294e-05, -1.450389344547416e-04, -1.868600994931232e-02, -1.350478628845845e-02, -2.533447207264470e-02, -2.183518661081344e-02, -1.755270373205858e-02, -3.110426596870178e-02, -2.744417343395719e-02, -2.179858867348310e+00, -2.839628832797495e-02, -1.634345531811599e-04, -1.368605151111686e+01, -1.368605151111688e+01, -3.155013870436460e-02, -2.645457614420731e+06, -8.786901497768568e+06, -3.595604525617224e-02, -1.250766284377029e-01, -4.062412373622363e+06, -1.855055788402357e-02, -1.895768324570774e-02, -1.505148811774139e-02, -1.869523815983895e-02, -1.875417860721770e-02, -1.875417860721770e-02, -2.070231786414817e-02, -3.754427881073025e-02, -3.140064447082085e-02, -2.648562752037005e-02, -2.886705935411292e-02, -2.506466074774990e-02, -1.116242193963221e-02, -2.497443322470010e-02, -4.410241203357931e-01, -3.138431120086466e-02, -2.582516619172692e-01, -2.582516619172692e-01, -2.036679425749967e-02, -8.522821951465165e+02, -2.818779642832830e+02, -1.742376948953000e-01, -4.875391798723563e-02, -5.798244638432605e+01, -1.030857776651952e+05, -2.747775779768462e+08, -2.339242840286716e+07, -7.334587228414885e+01, -5.571963741638389e+06, -5.571963741620148e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mvs_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.032678901378696e-03, 1.032655823187553e-03, 1.032560548549934e-03, 1.032902762514517e-03, 1.032722211583686e-03, 1.032722211583686e-03, 3.510844970094899e-03, 3.513032753868064e-03, 3.571306967301728e-03, 3.547280013541350e-03, 3.550214987272945e-03, 1.022023922009033e-02, 3.735236426470231e-03, 5.264993350922095e-02, 5.391340376026014e-02, 5.355451619197071e-02, 5.362988359760314e-02, 5.362988359760314e-02, 2.011257795892037e-01, 1.985421540446586e-01, 1.092889025129741e-03, 2.445229758266447e-01, 2.282028909150081e-01, 2.282028909150087e-01, 1.313808482728558e+00, 1.287234043160319e+00, 5.012762420965806e-01, 1.662958372810702e+00, 1.546192696109178e+00, 1.546192696109178e+00, 6.840446259836829e-03, 6.839203845951942e-03, 6.840384476299644e-03, 4.359714841220878e-03, 6.839818914749639e-03, 6.839818914749639e-03, 3.886803558791450e-03, 4.225238680589086e-03, 3.641327285734519e-03, 3.922919359746431e-03, 4.206182521491126e-03, 1.802626240051654e-02, 6.065914700785801e-02, 5.587084901750702e-02, 6.550032827558482e-02, 6.306584078213674e-02, 5.970604196326136e-02, 1.046121537903374e-01, 3.313708604769043e-04, 1.948491219660414e-01, 2.714738854092684e-04, 1.854460842329650e-02, 2.877060873278276e-01, 2.877060873278282e-01, 9.709954980432301e-09, 1.656177551498184e+00, 2.459543658487075e+00, 1.045860605054169e-04, 6.119991340128237e-08, 1.988023826625063e+00, 6.041530269760913e-02, 6.076230704661768e-02, 4.841297473372792e-02, 6.053929166316995e-02, 6.058960313903018e-02, 6.058960313903018e-02, 6.209842875939306e-02, 7.224916231513694e-02, 6.904223991246425e-02, 6.611466259640963e-02, 6.757993313984070e-02, 5.818506201402882e-02, 5.328728529118072e-02, 4.172068012246677e-03, 1.336623363392334e-01, 2.092725721389543e-02, 1.171058481607933e-01, 1.171058481607933e-01, 3.011171515196749e-02, 5.132990444555742e-01, 4.329087842922517e-01, 1.060847073176347e-01, 2.927668921385087e-04, 3.642520218384294e-01, 1.008459836476820e+00, 3.285312657898597e+00, 2.586765183208955e+00, 3.803221775006174e-01, 2.160294538666779e+00, 2.160294538659703e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
