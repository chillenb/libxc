
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mvs_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.315941273885557e+01, -2.315948285458219e+01, -2.315986598557634e+01, -2.315882468070435e+01, -2.315936009557939e+01, -2.315936009557939e+01, -3.361525360932288e+00, -3.361772211822545e+00, -3.368766468690298e+00, -3.370119359095881e+00, -3.367989922511091e+00, -3.367989922511091e+00, -5.796077189915297e-01, -5.788399870178250e-01, -5.609685525318122e-01, -5.695283729838151e-01, -5.673099388228514e-01, -5.673099388228514e-01, -1.780741013840497e-01, -1.803572557332802e-01, -6.531942436591066e-01, -1.043264945862802e-01, -1.266541363720293e-01, -1.266541363720293e-01, -1.092698799753696e-03, -1.186377227137511e-03, -1.447769571428929e-02, -4.719765452709200e-04, -6.851898354611186e-04, -6.851898354611188e-04, -5.670093706389460e+00, -5.671168431453475e+00, -5.670184141445730e+00, -5.671131203467496e+00, -5.670617391991214e+00, -5.670617391991214e+00, -2.066400628274813e+00, -2.090238176141940e+00, -2.060656878340198e+00, -2.082492234991168e+00, -2.082460008640194e+00, -2.082460008640194e+00, -6.138028736695147e-01, -6.683820093374879e-01, -5.494846296834888e-01, -5.678124556663471e-01, -6.256249278880560e-01, -6.256249278880560e-01, -6.088369501791178e-02, -1.692416302909850e-01, -5.451933410620755e-02, -1.953254727769980e+00, -8.216822165730545e-02, -8.216822165730545e-02, -3.310612891449490e-04, -4.655629304165238e-04, -3.917166993622957e-04, -3.092617480839831e-02, -4.706904363681002e-04, -4.706904363681002e-04, -6.386944931971581e-01, -6.350848759340474e-01, -6.363557468909434e-01, -6.374012118379985e-01, -6.368761648187306e-01, -6.368761648187306e-01, -6.180928077573495e-01, -5.315823800323874e-01, -5.562371811231286e-01, -5.807067284357165e-01, -5.679011517158292e-01, -5.679011517158292e-01, -6.948228736006039e-01, -2.258637158233986e-01, -2.710112701081752e-01, -3.532232743909706e-01, -3.117831901495962e-01, -3.117831901495962e-01, -4.747550550312508e-01, -1.346715232079890e-02, -2.147268613297380e-02, -3.456587482170492e-01, -4.610191448515901e-02, -4.610191448515902e-02, -1.777173739001967e-03, -7.848618108116882e-05, -2.180110193617981e-04, -4.245949731671033e-02, -4.313742363736813e-04, -4.313742363736808e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mvs_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.956422438515635e+01, -2.956434542978259e+01, -2.956478750476966e+01, -2.956298524890538e+01, -2.956394331150080e+01, -2.956394331150080e+01, -5.175261709684577e+00, -5.175677290678964e+00, -5.186231421449529e+00, -5.182686237537061e+00, -5.182531129964936e+00, -5.182531129964936e+00, -8.177482226715922e-01, -8.164448777935358e-01, -7.870182742768623e-01, -8.001767961352747e-01, -7.968967938679121e-01, -7.968967938679121e-01, -1.837599673155360e-01, -1.934992712228890e-01, -9.025018026735823e-01, -1.585728197892022e-01, -1.475709432533598e-01, -1.475709432533597e-01, -1.691842652897471e-03, -2.193609858438418e-03, -2.821684436341919e-02, -9.436881303606093e-04, -1.368208146020181e-03, -1.368208146020181e-03, -7.284712050213273e+00, -7.288244302380505e+00, -7.284836404792926e+00, -7.287956439186568e+00, -7.286522687893069e+00, -7.286522687893069e+00, -2.512840465992723e+00, -2.522559721849154e+00, -2.471395958461403e+00, -2.477146412273774e+00, -2.537761299433354e+00, -2.537761299433354e+00, -8.201071014391811e-01, -9.165895169401981e-01, -7.763709472046654e-01, -8.697022867386308e-01, -8.362206097348847e-01, -8.362206097348847e-01, -1.089629891353684e-01, -1.278918350019004e-01, -9.995865993921860e-02, -2.855093116866036e+00, -1.119994429839225e-01, -1.119994429839223e-01, -6.621218289314257e-04, -9.310960487504028e-04, -7.831934691181394e-04, -5.961426462337845e-02, -9.413160107241748e-04, -9.413160107241747e-04, -8.529681015048757e-01, -8.400322555440010e-01, -8.445868119027614e-01, -8.483468020403133e-01, -8.464672594766007e-01, -8.464672594766007e-01, -8.328827804424034e-01, -6.430141572310483e-01, -7.004387029452065e-01, -7.551622180011858e-01, -7.280596940114973e-01, -7.280596940114974e-01, -9.598473532581803e-01, -2.201123651467361e-01, -3.122643135250879e-01, -4.630681295594176e-01, -3.860464621487448e-01, -3.860464621487448e-01, -6.101827781534710e-01, -2.417244994522173e-02, -4.174574293832461e-02, -4.600995663646004e-01, -8.249988396541466e-02, -8.249988396541472e-02, -3.553802377636253e-03, -1.569724490086313e-04, -4.357765167073711e-04, -6.726329134297285e-02, -8.626122809688377e-04, -8.626122809688369e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mvs_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.016511907546549e-08, -1.016503394825033e-08, -1.016487647073208e-08, -1.016615525405814e-08, -1.016545348101896e-08, -1.016545348101896e-08, -2.594842349996437e-05, -2.596195125927318e-05, -2.631982462296825e-05, -2.637142790707523e-05, -2.629383763013501e-05, -2.629383763013501e-05, -1.728690722324191e-03, -1.722697998745591e-03, -1.637211205633604e-03, -2.042029418888136e-03, -1.903759984165352e-03, -1.903759984165352e-03, -1.461182832737276e+00, -1.321322533365062e+00, -1.499568835445289e-04, -3.095461164928425e-01, -1.674765971063343e+00, -1.674765971063346e+00, -8.960032893660438e+01, 3.915795644342097e+01, 4.371952895447674e+00, 2.292294163904139e+02, 1.869170474894583e+02, 1.869170474894586e+02, -3.027966962674373e-06, -3.026004960102973e-06, -3.028091387753776e-06, -3.026349220595230e-06, -3.026862399310397e-06, -3.026862399310397e-06, -1.067411159784350e-04, -1.089065079109931e-04, -1.124606497603648e-04, -1.149627909237574e-04, -1.053408998569819e-04, -1.053408998569819e-04, -1.191617567779525e-02, -8.811480795772259e-03, -2.850786764252138e-02, -2.979340331695522e-02, -1.154060414899885e-02, -1.154060414899885e-02, 3.418842405742404e-01, -1.690756558364098e+00, 6.315540575047537e-01, -1.524957890108081e-04, -1.955477645429522e+00, -1.955477645429536e+00, 4.028646634424559e+02, 2.631770625077600e+02, 1.238102728464486e+03, 2.246492280323291e+00, 5.817814889072040e+02, 5.817814889072030e+02, -1.740495895688357e-02, -1.780639063044940e-02, -1.766369689163384e-02, -1.754714149583015e-02, -1.760478698741872e-02, -1.760478698741872e-02, -1.829822961671869e-02, -3.428919593922350e-02, -2.823837357401909e-02, -2.356371359732495e-02, -2.565296816293012e-02, -2.565296816293011e-02, -6.798058914940099e-03, -6.028241893470857e-01, -2.627759252677953e-01, -1.387815644779916e-01, -1.537650598575545e-01, -1.537650598575544e-01, -3.371113310096719e-02, 5.837656454912750e-01, 2.760740164991833e+00, -1.064750893721298e-01, 4.432864859750818e-01, 4.432864859750896e-01, 5.583216483006278e+01, 5.146543718661645e+03, 1.070069109894628e+03, -2.282863058711210e+00, 7.556973304396992e+02, 7.556973304397015e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mvs_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mvs_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.583047762865724e-03, 1.583047401843024e-03, 1.583084563759371e-03, 1.583091728396415e-03, 1.583082420273688e-03, 1.583082420273688e-03, 1.740162837659880e-02, 1.741075887344243e-02, 1.765332138020932e-02, 1.769166379546582e-02, 1.763371792302866e-02, 1.763371792302866e-02, 8.914810905293124e-03, 8.867129143521781e-03, 8.091300929723707e-03, 1.008678024317326e-02, 9.410435486615330e-03, 9.410435486615330e-03, 1.310614011603276e-01, 1.238660903149453e-01, 1.608824450495698e-03, 2.631430026506044e-02, 9.875760409734274e-02, 9.875760409734287e-02, 6.860720026041526e-04, 2.590901841909838e-04, 9.469283106700473e-04, 4.336177755529778e-07, 3.629273326024339e-06, 3.629273326024097e-06, 6.815648080222202e-03, 6.814721185301422e-03, 6.816102058361286e-03, 6.815261207925531e-03, 6.814923704249058e-03, 6.814923704249058e-03, 1.308177534974252e-02, 1.361378481159706e-02, 1.357375938558656e-02, 1.411987520184495e-02, 1.314782344963459e-02, 1.314782344963459e-02, 3.865305689196910e-02, 3.632780795063075e-02, 7.294076331564495e-02, 8.516081517648720e-02, 3.921422548565555e-02, 3.921422548565555e-02, 9.627925355932836e-03, 1.531821154179926e-01, 7.090533949905779e-03, 1.715530822931284e-02, 5.562314564593093e-02, 5.562314564593121e-02, 1.179320258323580e-08, 8.232127540415178e-08, 1.111210440925019e-06, 2.646097676545245e-03, 2.723564384732969e-07, 2.723564384732969e-07, 5.665501471512767e-02, 5.704760109789308e-02, 5.690839015510191e-02, 5.679385086140228e-02, 5.684925271094141e-02, 5.684925271094141e-02, 5.482831770446025e-02, 6.601759616596159e-02, 6.209206367260279e-02, 5.879477856975760e-02, 6.004291426995514e-02, 6.004291426995512e-02, 3.231056739585605e-02, 1.095635048742447e-01, 8.127274953901982e-02, 9.417299662011551e-02, 7.047497966672293e-02, 7.047497966672292e-02, 5.097662558725446e-02, 3.126489855121531e-03, 1.452281236280208e-03, 6.483733135769418e-02, 1.159864783993353e-02, 1.159864783993349e-02, 1.333283835241757e-06, 1.665657887207075e-10, 6.001869805831836e-07, 2.466311259695013e-02, 5.314071030897423e-07, 5.314071030899186e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
