
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_eel_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_eel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.267662195985814e+01, -2.267675142291516e+01, -2.267731982364581e+01, -2.267539811130066e+01, -2.267640607267922e+01, -2.267640607267922e+01, -2.775239127275727e+00, -2.775608129762463e+00, -2.785370778872686e+00, -2.781680458978089e+00, -2.781787340819451e+00, -3.766946815088922e+00, -3.126834017153644e-01, -7.185352376353642e-01, -6.974733238831994e-01, -7.042106499501812e-01, -7.027655110562755e-01, -7.027655110562755e-01, -1.840034391399860e-01, -1.870346498268906e-01, -2.313074060759856e-01, -1.353825466731459e-01, -1.544475574189196e-01, -1.544475574189199e-01, -3.178901551698433e-03, -3.418937050322720e-03, -2.934600941838903e-02, -1.454614071129699e-03, -2.057636386705796e-03, -2.057636386705796e-03, -5.672188400369226e+00, -5.673255135988263e+00, -5.672241749125249e+00, -5.654242579979522e+00, -5.672726966746138e+00, -5.672726966746138e+00, -1.389577851298982e+00, -1.435506713529330e+00, -1.353958905749892e+00, -1.395252473236775e+00, -1.432509362419871e+00, -2.130166538618509e+00, -6.376816550558400e-01, -6.941595614217917e-01, -5.887224194373033e-01, -6.134068351916218e-01, -6.482809839851773e-01, -5.875809638550765e-01, -2.207634465190226e-02, -1.816636258982905e-01, -2.042339452980031e-02, -2.087928923869720e+00, -1.089399731351787e-01, -1.089399731351787e-01, -6.496973273250953e-04, -1.392636304572784e-03, -1.174374012109025e-03, -1.373640418233754e-02, -7.582818243618223e-04, -1.386455387867873e-03, -6.423447928852579e-01, -6.386601455997365e-01, -6.399567165853772e-01, -6.410246559926521e-01, -6.404901047791867e-01, -6.404901047791867e-01, -6.249330154065934e-01, -5.344898591179281e-01, -5.608190230971721e-01, -5.866438897864479e-01, -5.735021246745184e-01, -5.474957365769008e-01, -7.274452554905612e-01, -6.628724228783053e-02, -2.815595367854682e-01, -2.436598773350322e-01, -3.254864430526584e-01, -3.254864430526584e-01, -3.699752887070873e-01, -2.783709442156890e-02, -4.025757688055978e-02, -3.632279901492685e-01, -1.749080961974906e-02, -7.032675125673910e-02, -4.742920315225370e-03, -2.190156563482011e-04, -7.034977978743315e-04, -6.565069926519818e-02, -1.288270472527484e-03, -1.288270472527480e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_eel_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_eel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.379609642108993e+01, -3.379603858070764e+01, -3.379587169923740e+01, -3.379672009041242e+01, -3.379626296991753e+01, -3.379626296991753e+01, -6.010576155033298e+00, -6.010691411869058e+00, -6.013762741085225e+00, -6.013083032694250e+00, -6.012532224054371e+00, -3.374105263884418e+00, -8.840501125084499e-01, -3.292694199097260e-01, -2.453198075371853e-01, -2.828986946533398e-01, -2.743678246603939e-01, -2.743678246603939e-01, -2.261431422162485e-02, -3.121007506297262e-02, -5.527673011408645e-01, 1.040691689444086e-01, 5.418779521026114e-02, 5.418779521026117e-02, 2.317145842826801e-02, 2.458462035063073e-02, 1.188077965288594e-01, 1.188573878432350e-02, 1.596685798926038e-02, 1.596685798926038e-02, -7.406100035736004e+00, -7.413410766235041e+00, -7.406511486447037e+00, -7.797372868862703e+00, -7.409773339106934e+00, -7.409773339106934e+00, -3.295462681128192e+00, -3.343967397764850e+00, -3.256146846566650e+00, -3.302143649196861e+00, -3.340401032548879e+00, -1.727524622088483e+00, -6.942554483951540e-01, -8.711755664995168e-01, -5.620782490976962e-01, -6.708332470603234e-01, -7.275175364634825e-01, -1.005344844059301e+00, -2.943514769729150e-02, 5.754862519732502e-02, -2.723119395825484e-02, -2.383530093931118e+00, 1.160523577639366e-01, 1.160523577639366e-01, -8.662631031001270e-04, 1.147078934609343e-02, 9.291168361745225e-03, -1.831520557645006e-02, -1.011042432482430e-03, 1.106727887946484e-02, -8.564597238470106e-01, -8.515468607996487e-01, -8.532756221138363e-01, -8.546995413235362e-01, -8.539868063722491e-01, -8.539868063722491e-01, -8.332440205421248e-01, -5.409234873148738e-01, -6.405285987928145e-01, -7.397840825657187e-01, -6.892957850860157e-01, -8.560103882303872e-01, -8.828370319038293e-01, -1.625792327577594e-01, -1.028653504369568e-01, -5.829736526192061e-01, -2.002828202552916e-01, -2.002828202552915e-01, -7.854526842093364e-01, 1.154207431073923e-01, 1.391568322729127e-01, -3.367181337246856e-01, -2.332107994209201e-02, 1.387500264697563e-01, 3.333638774217205e-02, 2.064596044153010e-03, 6.008160892638223e-03, 1.364598056393869e-01, 1.026489097572741e-02, 1.026489097572741e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_eel_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_eel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [3.704851896733649e-10, 3.704443533703839e-10, 3.702763310313238e-10, 3.708812803519575e-10, 3.705623424406053e-10, 3.705623424406053e-10, 6.623404991019119e-06, 6.620251303980698e-06, 6.536988042815655e-06, 6.568178980967527e-06, 6.567559576544120e-06, -3.214822702993347e-05, 1.380918049550441e-02, -2.157826061786438e-02, -2.315434993621394e-02, -2.280621586383665e-02, -2.287525786328875e-02, -2.287525786328875e-02, -4.255891866911467e+00, -4.080825594239054e+00, 1.077805891157895e-02, -8.459418959954625e+00, -6.520455444182414e+00, -6.520455444182416e+00, -1.107588563573955e+04, -1.031026429352775e+04, -2.333104662721512e+02, -2.482917481767017e+04, -1.998539903317940e+04, -1.998539903317940e+04, -1.737988148134049e-06, -1.684731306963691e-06, -1.734940756926282e-06, 2.111677025548696e-08, -1.711340391292364e-06, -1.711340391292364e-06, 9.392837972384441e-05, 8.535564664864199e-05, 1.010092258877596e-04, 9.280305069576188e-05, 8.591753067256486e-05, -3.126048735722398e-04, -3.630508645931356e-02, -1.597480280155899e-02, -5.356629545679870e-02, -4.219279765819812e-02, -3.267763993765627e-02, 2.233600958961906e-03, 6.433018527760076e+01, -3.478299765282045e+00, 8.782369654811149e+01, -2.948169176541798e-04, -1.650294343774358e+01, -1.650294343774358e+01, 8.575887934078532e+07, -2.408736280276301e+04, -1.248173769139787e+05, 4.291717960529447e+02, 4.621690224177239e+07, -5.261169151273881e+04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -7.748612217362295e-02, -5.658682437762407e-02, -2.985932568790499e-02, -4.478070094710516e-02, 1.735968369358677e-03, -1.657734592856308e-02, 1.725589805444788e+00, -8.775175840623141e-01, 9.746226813631306e-02, -5.452097829557123e-01, -5.452097829557125e-01, 2.110584529450105e-02, -2.587734728232883e+02, -1.217741171200779e+02, -3.711689432959572e-01, 1.632614947046157e+02, -4.849885248347409e+01, -3.941950302925125e+03, -2.467146085301358e+05, -1.331527577130825e+05, -5.871208725738839e+01, -7.355048553179122e+04, -7.355048553179143e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_eel_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_eel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.087692478478616e-03, 2.087610420776622e-03, 2.087274455284502e-03, 2.088489451948259e-03, 2.087848905183173e-03, 2.087848905183173e-03, 1.736906316670569e-02, 1.737070462017496e-02, 1.741324554914701e-02, 1.739457599872593e-02, 1.739839196641648e-02, 2.188389342724630e-02, 4.458518578760998e-02, 1.050454488894674e-01, 1.039732075606592e-01, 1.049813440147734e-01, 1.047470878779707e-01, 1.047470878779707e-01, 3.578605275771762e-01, 3.589677479091383e-01, 9.914270458883073e-03, 3.112425411368129e-01, 3.396900207193306e-01, 3.396900207193306e-01, 3.928749072322243e-02, 4.264451768053364e-02, 1.620544692825509e-01, 1.696541940828401e-02, 2.709455240638585e-02, 2.709455240638585e-02, 3.970364153402338e-03, 3.850821141625037e-03, 3.963511230986263e-03, 3.749109203163297e-03, 3.910575602010227e-03, 3.910575602010227e-03, 2.780077255773939e-02, 2.830911781977048e-02, 2.734943278266399e-02, 2.785427874853010e-02, 2.828932122585073e-02, 3.867760079467958e-02, 1.186856879908118e-01, 6.695427495013462e-02, 1.387308953078521e-01, 1.227458992531146e-01, 1.120777522259137e-01, 1.033956765398930e-01, 1.173451488460089e-08, 2.938105036642940e-01, 6.944954636923253e-10, 3.375429020298319e-02, 3.284115872248221e-01, 3.284115872248221e-01, 0.000000000000000e+00, 1.537658105327062e-02, 3.562298968428450e-02, 0.000000000000000e+00, 0.000000000000000e+00, 2.625206368837137e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.497176414110059e-01, 1.255460927856940e-01, 7.552725541894532e-02, 1.060100649318340e-01, 1.008414736830110e-01, 8.005707755356505e-02, 3.968625038260393e-02, 2.589349590226617e-01, 1.544095543388128e-01, 2.438310674436420e-01, 2.438310674436421e-01, 1.353606001339060e-01, 1.575996280597035e-01, 1.879326005688637e-01, 2.261149631294232e-01, 3.263732429997775e-10, 2.969958942740343e-01, 3.930533683791843e-02, 3.008108494982573e-03, 1.501459334698202e-02, 2.977162963923803e-01, 2.907585139458773e-02, 2.907585139458773e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
