
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_eel_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_eel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.312548161776198e+01, -2.312555956007004e+01, -2.312598706348860e+01, -2.312483038966704e+01, -2.312542487824147e+01, -2.312542487824147e+01, -2.891553426309563e+00, -2.891876468809178e+00, -2.900773043842760e+00, -2.900789047060861e+00, -2.899077818302066e+00, -2.899077818302066e+00, -3.297599329938102e-01, -3.285271193787278e-01, -3.078764599165279e-01, -3.400551982400669e-01, -3.301209792943259e-01, -3.301209792943259e-01, -1.687823088915670e-01, -1.689255750054070e-01, -1.518945699286161e-01, -8.278910645030711e-02, -1.116136412723468e-01, -1.116136412723468e-01, -3.164002037485105e-03, -3.404353539120052e-03, -2.674818022729393e-02, -1.484164169274839e-03, -2.076666191153732e-03, -2.076666191153737e-03, -5.671156219483310e+00, -5.672266609813303e+00, -5.671232593836694e+00, -5.672211312121020e+00, -5.671706359902392e+00, -5.671706359902392e+00, -1.965491415425705e+00, -2.005080060422078e+00, -1.970960233349736e+00, -2.007345898334103e+00, -1.985285355297547e+00, -1.985285355297547e+00, -5.828888676481296e-01, -6.800835700711990e-01, -4.829248564747324e-01, -5.418133922659446e-01, -6.009880960957444e-01, -6.009880960957444e-01, -6.083809185438667e-02, -1.589087817424202e-01, -5.679211833618748e-02, -1.914776322469548e+00, -7.976156736290355e-02, -7.976156736290355e-02, -1.063706614559752e-03, -1.460932041139404e-03, -1.200059927988905e-03, -4.180199490996216e-02, -1.443026700198571e-03, -1.443026700198601e-03, -6.423447928852579e-01, -6.386601455997365e-01, -6.399567165853772e-01, -6.410246559926521e-01, -6.404901047791867e-01, -6.404901047791867e-01, -6.249330154065934e-01, -5.254660969406225e-01, -5.511893402584455e-01, -5.804647184231929e-01, -5.643053897036081e-01, -5.643053897036081e-01, -6.982783754718396e-01, -2.168381805681075e-01, -2.491790923789340e-01, -3.052650801596147e-01, -2.808656134512059e-01, -2.808656134512058e-01, -4.435093168015911e-01, -2.550238529092711e-02, -3.488613353203530e-02, -3.110397533866076e-01, -5.025250208527203e-02, -5.025250208527184e-02, -4.912781704304842e-03, -2.690210585063909e-04, -7.116185560108565e-04, -5.063214086194611e-02, -1.325785814771779e-03, -1.325785814771778e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_eel_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_eel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.956028063616693e+01, -2.956048526930270e+01, -2.956102732829983e+01, -2.955797938646954e+01, -2.955962894691051e+01, -2.955962894691051e+01, -5.147038125423572e+00, -5.147275090832149e+00, -5.152456556951460e+00, -5.140069094003973e+00, -5.145385928876411e+00, -5.145385928876411e+00, -7.641636572017054e-01, -7.581446801255313e-01, -6.154526823582539e-01, -6.494757538376527e-01, -6.448354789913097e-01, -6.448354789913097e-01, -3.158245077384114e-02, -4.274728498722428e-02, -4.763866353972597e-01, 1.544974337453008e-02, 1.409744490547569e-02, 1.409744490547576e-02, -5.658177312310332e-03, -6.062431781059318e-03, -3.731863694847633e-02, -2.734546519900373e-03, -3.774626501005850e-03, -3.774626501005857e-03, -7.417808726669013e+00, -7.424953464132503e+00, -7.417975151294513e+00, -7.424289796031898e+00, -7.421519965310637e+00, -7.421519965310637e+00, -1.870243173494582e+00, -1.902029238184404e+00, -1.795181735262293e+00, -1.823112549268098e+00, -1.924428243014455e+00, -1.924428243014455e+00, -8.515335496368445e-01, -1.001482690437221e+00, -7.960186877814245e-01, -9.718575226100358e-01, -8.814678046544043e-01, -8.814678046544043e-01, -1.767953474288912e-02, 4.428712576073039e-02, -2.932522903988712e-02, -3.233126812696547e+00, 5.399532866282435e-02, 5.399532866282463e-02, -1.975043048931478e-03, -2.689644454857846e-03, -2.189984304898209e-03, -4.365862001888214e-02, -2.634019847801994e-03, -2.634019847802016e-03, -8.564597238470106e-01, -8.515468607996487e-01, -8.532756221138363e-01, -8.546995413235362e-01, -8.539868063722491e-01, -8.539868063722491e-01, -8.332440205421248e-01, -5.580520307925780e-01, -6.678071971696399e-01, -7.800179021696526e-01, -7.246708437109624e-01, -7.246708437109624e-01, -1.082038944117758e+00, -2.418395380821411e-02, -1.286408691414438e-01, -3.956994345934822e-01, -2.488441335431861e-01, -2.488441335431861e-01, -5.308924337632596e-01, -3.596373646603416e-02, -4.394095849646650e-02, -4.352014398029652e-01, -1.664039844906385e-02, -1.664039844906366e-02, -8.606347555943968e-03, -5.108704269098622e-04, -1.328734991066602e-03, 1.703797302997608e-02, -2.422276211769853e-03, -2.422276211769857e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_eel_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_eel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.259019655126901e-08, -1.258951897778302e-08, -1.258732686447193e-08, -1.259739007062682e-08, -1.259200084417240e-08, -1.259200084417240e-08, -2.261742484265636e-05, -2.261502995074596e-05, -2.256353071146388e-05, -2.270812936012498e-05, -2.264686488498552e-05, -2.264686488498552e-05, -1.477817590420184e-02, -1.487396974664271e-02, -1.700784629052977e-02, -1.766354191733440e-02, -1.739912224250813e-02, -1.739912224250813e-02, -4.305760418734153e+00, -4.129933477611414e+00, -2.622293454075801e-03, -5.363649267311359e+00, -5.890361653665503e+00, -5.890361653665505e+00, 2.127109182080114e+02, 1.984505329562172e+02, 9.905844672563966e-01, 5.520683046640678e+02, 4.175535335499741e+02, 4.175535335499790e+02, -1.696326489364692e-06, -1.643209063780752e-06, -1.694128955477540e-06, -1.647238529072406e-06, -1.669312550132800e-06, -1.669312550132800e-06, -3.193673735336838e-04, -3.106910710464793e-04, -3.265986125759412e-04, -3.188233296672073e-04, -3.110241297783647e-04, -3.110241297783647e-04, -2.669765468960189e-02, 1.791538757493100e-04, -3.901666008711382e-02, 2.074220315546597e-03, -2.217260083997562e-02, -2.217260083997562e-02, -4.908526398142063e+00, -3.469337799633345e+00, -3.981552166245055e+00, 1.197441760313427e-05, -1.241564580399840e+01, -1.241564580399842e+01, 1.016382992985829e+03, 6.292554086656525e+02, 2.805747810936270e+03, -2.161590575633093e+00, 1.317590384565714e+03, 1.317590384565704e+03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -7.661143860862989e-02, -5.367028851726207e-02, -2.090148839978352e-02, -3.943134405747041e-02, -3.943134405747041e-02, 3.010323801874218e-04, -1.640103591483035e+00, -8.883037763548794e-01, -3.040993569810544e-01, -5.465847206879739e-01, -5.465847206879740e-01, -1.060556288388975e-01, 7.408567279094489e-01, -6.973796090979802e-01, -3.290641000520929e-01, -1.038336633978351e+01, -1.038336633978348e+01, 9.712496695151290e+01, 1.496787568905983e+04, 2.811273430701395e+03, -2.417102034511634e+01, 1.723150669096498e+03, 1.723150669096503e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_eel_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_eel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.168868812572469e-03, 2.168780196469744e-03, 2.168417818135413e-03, 2.169729939673250e-03, 2.169038109628930e-03, 2.169038109628930e-03, 2.033578287247216e-02, 2.033638432409463e-02, 2.035300872284779e-02, 2.035915781802886e-02, 2.035448100970700e-02, 2.035448100970700e-02, 7.051458708319985e-02, 7.033613141864976e-02, 6.670302688709125e-02, 7.296546431009446e-02, 7.113681947932383e-02, 7.113681947932383e-02, 3.539349618368826e-01, 3.537779816295831e-01, 1.684162465642582e-02, 1.677131702284637e-01, 2.819599726617972e-01, 2.819599726617972e-01, 2.689568518953227e-12, 0.000000000000000e+00, 1.381318826269015e-06, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 3.970362033579024e-03, 3.850819136615272e-03, 3.963509202470106e-03, 3.858052920710605e-03, 3.910573496895922e-03, 3.910573496895922e-03, 3.865338069102896e-02, 3.850010146622041e-02, 3.883908451983271e-02, 3.871924808827971e-02, 3.847552883111655e-02, 3.847552883111655e-02, 1.171345014656464e-01, 6.597816095717665e-02, 1.325076178557783e-01, 1.162669467589245e-01, 1.108482086452815e-01, 1.108482086452815e-01, 4.491331862275903e-02, 2.833375541801496e-01, 2.492201040045123e-02, 3.221975553028997e-02, 2.274150142609458e-01, 2.274150142609462e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 9.429257548668788e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.496648909843459e-01, 1.254834131849696e-01, 7.547757405723211e-02, 1.059424443608195e-01, 1.059424443608195e-01, 7.831964595068565e-02, 2.743138053637815e-01, 2.543762405662030e-01, 2.099313031727380e-01, 2.385266750627152e-01, 2.385266750627152e-01, 1.656323065592515e-01, 4.827707050027376e-04, 4.301671328086133e-05, 2.203336234451448e-01, 4.971858547039726e-02, 4.971858547039709e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.119175817866085e-01, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
