
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_br89_explicit_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89_explicit", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.882055715214479e+01, -1.882059164033391e+01, -1.882081088381184e+01, -1.882029659479373e+01, -1.882055672195159e+01, -1.882055672195159e+01, -3.617905192074574e+00, -3.617831609568553e+00, -3.616084932012634e+00, -3.618499872829537e+00, -3.617322028438918e+00, -3.617322028438918e+00, -7.712960269495887e-01, -7.715593570118192e-01, -7.791427969446786e-01, -7.799953290986601e-01, -7.786294595861069e-01, -7.786294595861069e-01, -2.440011274423186e-01, -2.443022622464211e-01, -9.261230136087273e-01, -2.222969112454691e-01, -2.263304052541825e-01, -2.263304052541825e-01, -8.037884193672502e-02, -8.023794016553473e-02, -1.362979631374941e-01, -7.647584099737556e-02, -7.594418268868949e-02, -7.594418268868945e-02, -8.645458561048828e+00, -7.005818647790994e+00, -3.816957186371717e+00, -1.034472958383149e+01, -4.144010900849316e+00, -5.952687164164352e+00, -1.430847425856870e+00, -2.633672205832356e+00, -2.338420531799057e+00, -2.344909837949699e+00, -2.344628671972015e+00, -2.137848704932537e+00, -1.222367898110944e+00, -9.747784490098064e-01, -1.115851405435264e+00, -5.987779162275151e-01, -6.555536595185988e-01, -6.957798695023730e-01, -6.689213511248006e-02, -4.256135666470028e-01, -6.170245991008094e-02, -2.053539674662624e+00, -1.835926354618324e-01, -1.627807607020041e-01, -1.483894209089494e-01, -2.321694980818678e+00, -1.900915875278117e-03, -4.153620614308613e-02, -8.943983120366797e-02, -2.290014591773928e-03, -3.122491037204560e+01, -4.281161594491499e-01, -4.289837488054349e-01, -4.527733355490482e+00, -4.293463656749155e-01, -8.295516475147326e+01, -4.189129473912682e-01, -5.483534399132092e-01, -9.716239429930493e-01, -4.222215401821142e-01, -6.211351778292951e-01, -1.263545200940058e+00, -1.403775287804450e+00, -1.601808359363544e-01, -1.923358023853139e-01, -2.561239853496162e-01, -4.447443270144822e-01, -4.051400041560648e-01, -5.178285244831619e-01, -2.449079781448257e-02, -1.573434758054830e-01, -3.735203658033982e-01, -5.285560289443271e-02, -1.481497986879381e-01, -6.214304645794045e-03, -6.645242588361532e-04, -1.394865447232983e-03, -5.067606274499036e-02, -2.118981227235371e-03, -2.118980409237839e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_br89_explicit_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89_explicit", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.824652417335995e+01, -2.824660125297465e+01, -2.824699661767039e+01, -2.824584891026007e+01, -2.824644284589086e+01, -2.824644284589086e+01, -4.577890031260142e+00, -4.577956654608090e+00, -4.579630456665097e+00, -4.577753030893233e+00, -4.578151755592971e+00, -4.578151755592971e+00, -8.738947779759733e-01, -8.728092301037206e-01, -8.478544975432980e-01, -8.525458475981005e-01, -8.515361589423808e-01, -8.515361589423808e-01, -2.284288424834870e-01, -2.309632010039208e-01, -1.037311360952743e+00, -1.867285899080115e-01, -1.998630434863152e-01, -1.998630434863150e-01, -3.293098462651715e-02, -3.347952461618197e-02, -8.356731938508183e-02, -3.194004923215770e-02, -3.101041739034156e-02, -3.101041739034160e-02, -8.372515614465449e+00, -7.470168450842213e+00, -5.113175681537898e+00, -9.335230508048463e+00, -6.029268759992688e+00, -7.045978879603052e+00, -1.910376102441550e+00, -2.720327933561161e+00, -2.517158153762066e+00, -2.532176770363633e+00, -2.551694514899991e+00, -2.443401556497368e+00, -1.082153177544314e+00, -9.807269563453154e-01, -9.920636858955155e-01, -7.659839926441067e-01, -7.940127459819084e-01, -8.045624018796252e-01, -8.951224847338304e-02, -3.459452582190424e-01, -8.230883214189895e-02, -2.615010248791443e+00, -1.442160878174741e-01, -1.210659830813606e-01, -9.781172224656204e-02, -1.566404666158931e+00, -2.534554477388516e-03, -5.545928157373144e-02, -5.156556487044054e-02, -3.053353388115251e-03, -2.142738189849705e+01, -5.708242777309032e-01, -5.719784904713681e-01, -3.219696932355273e+00, -5.724704284941723e-01, -5.726869248943725e+01, -5.585508727732938e-01, -6.353391592232037e-01, -8.916440491517115e-01, -6.065364773861144e-01, -7.122580497019230e-01, -1.068794242602296e+00, -1.242592549511204e+00, -2.137853031750462e-01, -2.566468420207060e-01, -3.451427746353667e-01, -4.380597906009814e-01, -4.121924786644338e-01, -5.891895832869353e-01, -3.267765906685383e-02, -1.012989243732552e-01, -4.371715238331033e-01, -7.052798493973350e-02, -1.015438444100769e-01, -8.285770037324024e-03, -8.860327701543425e-04, -1.859820916734190e-03, -6.728138361142329e-02, -2.825311169679226e-03, -2.825308740231431e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_br89_explicit_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89_explicit", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.654299537824179e-09, -4.654206046560553e-09, -4.653889222050698e-09, -4.655278666235931e-09, -4.654536579006132e-09, -4.654536579006132e-09, -9.782171936393581e-06, -9.782771322722509e-06, -9.796757456885963e-06, -9.775980637547415e-06, -9.786834682795939e-06, -9.786834682795939e-06, -4.824810416788865e-03, -4.818887860866107e-03, -4.670078849407323e-03, -4.639475817347409e-03, -4.672115214352381e-03, -4.672115214352381e-03, -5.482754141204759e-01, -5.379471036719202e-01, -2.333254861311476e-03, -1.010662110839244e+00, -8.173398589895479e-01, -8.173398589895499e-01, -6.756367975383401e+03, -5.873235343541483e+03, -3.778060515855152e+01, -3.111094833213089e+04, -1.736559506437351e+04, -1.736559506437351e+04, -4.296349204518450e-07, -7.714422019516820e-07, -5.047267604529924e-10, -2.862437445324457e-07, -2.795233133181123e-07, -1.359309446712184e-06, -2.081911295701044e-09, -3.839165575562357e-05, -5.766821535013087e-05, -5.695876351276976e-05, -5.688354443554000e-05, -8.160203474456189e-05, -1.611330134342521e-03, -2.368321935453579e-03, -2.259180144436043e-03, -1.319536865500867e-02, -9.235849332571990e-03, -7.300174345004334e-03, -4.112857256956533e-03, -1.532825203288705e-01, -7.527384965391677e-05, -9.562709346228018e-05, -2.219580874226899e+00, -3.020436612971944e+00, -2.041830425496151e+04, -1.544883224601378e+02, 1.465657938439655e-08, -3.937963034981472e-03, -3.183686662660178e+04, -6.612763328545128e-06, -9.424278606790833e-06, -3.213009289603335e-12, -1.070639418558658e-14, -1.477032463833174e-04, -3.135622642153855e-11, -1.982667378052779e-06, -3.742791691677348e-14, -1.886700858609068e-02, -3.331698445790939e-03, -1.638358868551485e-03, -1.151856031268592e-02, -1.881377673802181e-03, -9.418534234799684e-04, -7.100361310222033e-06, -2.097354109779054e-06, -1.371197504267864e-04, -5.210940047995656e-02, -6.874142592884935e-02, -2.373595085223650e-02, -1.069226270264636e-02, -1.656074953991315e+01, -8.763702782612312e-02, -3.755607741122469e-04, -7.221956504829969e+00, -4.382724018769739e-05, -6.200066757858246e-03, -3.728125401927862e-05, -5.695633714701784e-01, -2.465637278967919e-04, -6.925613691201171e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_br89_explicit_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89_explicit", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([-2.249563786432302e-04, -2.249537420179243e-04, -2.249473765364591e-04, -2.249865159043871e-04, -2.249652479646974e-04, -2.249652479646974e-04, -2.040382345397484e-03, -2.040520579164698e-03, -2.043893929596083e-03, -2.039929769738836e-03, -2.041518388247581e-03, -2.041518388247581e-03, -7.221406596542487e-03, -7.188712355697284e-03, -6.426234094177260e-03, -6.544421946437872e-03, -6.555909993863756e-03, -6.555909993863756e-03, -1.412750480532025e-02, -1.450074945351619e-02, -5.536760182048089e-03, -1.139483082825286e-02, -1.304821231157034e-02, -1.304821231157035e-02, -7.343998890894770e-03, -7.444135872996844e-03, -8.041539147334281e-03, -6.514169322049561e-03, -7.214434687241742e-03, -7.214434687241734e-03, -3.007645062599193e-04, -5.403430547971528e-04, -3.533419929898869e-07, -2.004869262025550e-04, -1.957337877170474e-04, -9.518447085011009e-04, -7.739943517253024e-08, -1.458574999688198e-03, -2.110058633231718e-03, -2.124651626062916e-03, -2.156720721017748e-03, -3.093914082837108e-03, -1.614205729958621e-03, -3.041774552402034e-03, -1.792981952838437e-03, -1.176342197863902e-02, -9.707089814219642e-03, -7.672650936011448e-03, -1.551878866401282e-05, -3.967678023836101e-03, -2.248850734383523e-07, -3.355065580597123e-03, -1.353541306054832e-02, -1.841917888845512e-02, -1.963747459143364e-03, -3.022105799886656e-05, 1.281832896991137e-15, -3.579509694668518e-06, -4.868049453091605e-03, -1.011131505825546e-12, -9.579289224430678e-06, -3.209977393997108e-12, -1.076156861085191e-14, -1.492089208679242e-04, -3.159669158835404e-11, -1.997872091668057e-06, -3.503294199346294e-14, -1.117109065225405e-02, -2.265150405763854e-03, -1.269919590325817e-03, -8.355989644779668e-03, -1.364820944063354e-03, -1.393835533672981e-03, -3.706689511133541e-07, -1.896488011150197e-07, -2.857259902010628e-05, -7.141426252800233e-03, -9.420792011837299e-03, -1.096653610969697e-02, -1.995485304021412e-06, -7.831962550306529e-03, -1.636020689619119e-02, -7.047623374773896e-07, -1.355243491425722e-02, -1.339146161309414e-10, -2.316532912259557e-11, -1.288241840084722e-12, -8.850353525765145e-04, -2.986892300076852e-11, -8.389742638692814e-12])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_br89_explicit_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89_explicit", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([7.198604116583363e-04, 7.198519744573589e-04, 7.198316049166698e-04, 7.199568508940380e-04, 7.198887934870301e-04, 7.198887934870301e-04, 6.529223505272243e-03, 6.529665853327020e-03, 6.540460574707568e-03, 6.527775263163838e-03, 6.532858842391906e-03, 6.532858842391906e-03, 2.310850110893603e-02, 2.300387953823134e-02, 2.056394910136727e-02, 2.094215022860126e-02, 2.097891198036396e-02, 2.097891198036396e-02, 4.520801537702467e-02, 4.640239825125183e-02, 1.771763258255387e-02, 3.646345865040895e-02, 4.175427939702512e-02, 4.175427939702515e-02, 2.350079645086329e-02, 2.382123479358992e-02, 2.573292527146967e-02, 2.084534183055860e-02, 2.308619099917357e-02, 2.308619099917358e-02, 9.624464200317425e-04, 1.729097775350890e-03, 1.130694377567626e-06, 6.415581638481749e-04, 6.263481206945535e-04, 3.045903067203526e-03, 2.476781925520867e-07, 4.667439999002237e-03, 6.752187626341530e-03, 6.798885203401317e-03, 6.901506307256767e-03, 9.900525065078714e-03, 5.165458335867578e-03, 9.733678567686518e-03, 5.737542249082984e-03, 3.764295033164500e-02, 3.106268740550288e-02, 2.455248299523666e-02, 4.966012372484156e-05, 1.269656967627550e-02, 7.196322350031518e-07, 1.073620985791074e-02, 4.331332179375456e-02, 5.894137244305647e-02, 6.283991869258766e-03, 9.670738559637298e-05, -4.101865220657608e-15, 1.145443102293900e-05, 1.557775824989314e-02, 3.235620816555738e-12, 3.065372551817817e-05, 1.027192765984296e-11, 3.443701955472612e-14, 4.774685467773570e-04, 1.011094130840986e-10, 6.393190693337781e-06, 1.121054142363716e-13, 3.574749008721285e-02, 7.248481298444308e-03, 4.063742689042609e-03, 2.673916686329493e-02, 4.367427021002726e-03, 4.460273707753538e-03, 1.186140643563255e-06, 6.068761635683391e-07, 9.143231686434101e-05, 2.285256400896068e-02, 3.014653443787934e-02, 3.509291555103034e-02, 6.385552972867456e-06, 2.506228016098090e-02, 5.235266206781188e-02, 2.255239479927247e-06, 4.336779172562306e-02, 4.285267716572234e-10, 7.412905321405396e-11, 4.122373895813663e-12, 2.832113128244888e-03, 9.558055358042390e-11, 2.684717645042762e-11])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
