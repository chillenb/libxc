
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_rppscan_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rppscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.172540532809551e+01, -2.172550962939820e+01, -2.172600899810799e+01, -2.172430561751001e+01, -2.172545998021478e+01, -2.172545998021478e+01, -3.049375722766504e+00, -3.049473527187778e+00, -3.052537439252812e+00, -3.051591811961439e+00, -3.049417374912501e+00, -3.765974006981416e+00, -5.266856564807042e-01, -7.146210966597492e-01, -6.938513963493353e-01, -7.001135786908398e-01, -7.151302397147177e-01, -7.151302397147177e-01, -1.951569374341467e-01, -1.979250539134912e-01, -6.120239740535027e-01, -1.367054375752378e-01, -1.959850664055233e-01, -1.959850664055233e-01, -6.927645856155438e-03, -7.351796178558659e-03, -3.931379090709159e-02, -2.387431498604322e-03, -7.276773741675583e-03, -7.276773741675551e-03, -5.666542301438776e+00, -5.667601371595872e+00, -5.666654321922782e+00, -5.436560079400459e+00, -5.667080293845722e+00, -5.667080293845722e+00, -1.669969426755785e+00, -1.689823725448055e+00, -1.661626970447559e+00, -1.677264750202770e+00, -1.694267606025389e+00, -2.132058309946530e+00, -6.301973950768262e-01, -6.859350073953744e-01, -5.971710001205305e-01, -6.241394023091413e-01, -6.549404925248582e-01, -5.827449249065330e-01, -7.137399436341753e-02, -1.942258417220568e-01, -7.049780577346003e-02, -2.084012215862873e+00, -1.155980963486767e-01, -1.155980963486767e-01, -3.430414959781299e-03, -2.784490476470126e-03, -2.127248866081087e-03, -4.415673249523032e-02, -3.572106588604548e-03, -2.500278706319925e-03, -6.523986383663397e-01, -6.488404051827572e-01, -6.409797247577129e-01, -6.511067664901988e-01, -6.506146565996668e-01, -6.506146565996668e-01, -6.314408180569842e-01, -5.458224102951187e-01, -5.710151277364587e-01, -5.942454469897521e-01, -5.824255888894184e-01, -5.381370945170472e-01, -7.188525183816071e-01, -1.782672854433976e-01, -2.947273357607676e-01, -3.005332089127617e-01, -3.346490227504230e-01, -3.346490227504230e-01, -4.010249276825790e-01, -3.577486136498494e-02, -5.084813598301510e-02, -3.589819483615526e-01, -5.785294914062154e-02, -7.857078250518597e-02, -7.936111588989639e-03, -4.640588152052377e-04, -1.221564564401192e-03, -7.494498823676608e-02, -2.066175921159760e-03, -2.066175921159755e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_rppscan_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rppscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.215333890856434e+01, -3.215338229817974e+01, -3.215363654396149e+01, -3.215292119690069e+01, -3.215336132943888e+01, -3.215336132943888e+01, -4.726414778510224e+00, -4.726716192193742e+00, -4.736023165902983e+00, -4.732781131541604e+00, -4.726520915561441e+00, -4.708758150989996e+00, -7.963846934373227e-01, -8.311254530171169e-01, -7.888144426732682e-01, -8.043923124229427e-01, -8.321545245449821e-01, -8.321545245449821e-01, -2.213039785137653e-01, -2.262489337802830e-01, -8.739776839186756e-01, -8.905382546344001e-02, -2.227637672202646e-01, -2.227637672202646e-01, 2.115058973918849e-01, 2.143380105241317e-01, 1.563337100700647e-01, 1.270059594797311e-01, 2.119819759667446e-01, 2.119819759667656e-01, -7.410197821040413e+00, -7.412505434537800e+00, -7.410446389369293e+00, -7.724873420540738e+00, -7.411364181148135e+00, -7.411364181148135e+00, -2.561540017418757e+00, -2.586705420612123e+00, -2.552777021277522e+00, -2.570234975627061e+00, -2.593042841843271e+00, -2.638634883254477e+00, -8.041128386617021e-01, -8.905255821719598e-01, -7.541025502646472e-01, -8.005769427022849e-01, -8.410725084409185e-01, -9.159969442634239e-01, -9.633113137787259e-02, -1.929372372411271e-01, -9.521575631890913e-02, -2.677914878162720e+00, -6.546088815666858e-02, -6.546088815666858e-02, -4.574068231605104e-03, 1.421581505121704e-01, 1.067708251289422e-01, -5.915466441979970e-02, -4.763015891578213e-03, 1.291764633787257e-01, -8.650415561311886e-01, -8.561811046245801e-01, -8.715466963585748e-01, -8.617605078117423e-01, -8.605290682727386e-01, -8.605290682727386e-01, -8.357520664401531e-01, -6.945820555231690e-01, -7.356435402156507e-01, -7.736551580831836e-01, -7.542503905911013e-01, -8.098294357237007e-01, -9.289104973885232e-01, -2.572876334618829e-01, -3.458539826794838e-01, -4.602721930689129e-01, -4.063220950198547e-01, -4.063220950198547e-01, -6.272133594216064e-01, 1.790677240727106e-01, 1.229111085623419e-01, -4.497073120460163e-01, -7.794659620817339e-02, 1.255713995892706e-02, 2.609179533473507e-01, 2.747660556617723e-02, 6.855517385581231e-02, 1.232928808391595e-02, 1.089459929852132e-01, 1.089459929852143e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rppscan_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rppscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.426223146871089e-08, -1.426195309910993e-08, -1.426062220953126e-08, -1.426516795610613e-08, -1.426208559523876e-08, -1.426208559523876e-08, -1.454478725801446e-05, -1.454851370211128e-05, -1.465957380030655e-05, -1.461165895084516e-05, -1.454554469824260e-05, -6.784582598745226e-06, -1.017744593300303e-02, -4.661157228609818e-03, -5.138166244335369e-03, -5.002147329906811e-03, -4.650310112041276e-03, -4.650310112041276e-03, -8.192741980475494e-01, -7.796199945875926e-01, -5.006307982080510e-03, -2.771611583917906e+00, -8.070678131328174e-01, -8.070678131328174e-01, -2.595416968458219e+04, -2.285806651165352e+04, -1.978247596285534e+02, -8.206512573302539e+04, -2.385925965072224e+04, -2.385925965072447e+04, -1.676203148393400e-06, -1.676725098863532e-06, -1.676266843890880e-06, -3.467561614743153e-06, -1.676456623559114e-06, -1.676456623559114e-06, -1.238024053551453e-04, -1.218732546978258e-04, -1.249238188340963e-04, -1.229004513907760e-04, -1.217705611996803e-04, -6.436323717363642e-05, -9.319034772870027e-03, -7.368402382966173e-03, -1.107378303988644e-02, -9.948325171295007e-03, -8.258448759444075e-03, -2.479617288843562e-02, -2.362562459254214e+01, -7.709770781611101e-01, -2.485455814085610e+01, -8.083697142313435e-05, -5.288803869517770e+00, -5.288803869517770e+00, -4.336284676577715e+06, -7.710910153817055e+04, -2.728511836701453e+05, -1.591687384234714e+02, -3.688156951579093e+06, -1.027779656093118e+05, -1.081772698534897e-02, -1.057267724317354e-02, -1.469538440651305e-02, -1.072252654773410e-02, -1.068779029707991e-02, -1.068779029707991e-02, -1.212473397286090e-02, -1.635864155345947e-02, -1.456408098403934e-02, -1.336404050278505e-02, -1.392223922846212e-02, -3.767941042850879e-02, -5.911566425045845e-03, -7.157300848436104e-01, -1.625916598827126e-01, -1.202832741057832e-01, -1.022569743047333e-01, -1.022569743047333e-01, -5.411739053127422e-02, -2.597094024788350e+02, -8.457141755914583e+01, -8.262728854775628e-02, -5.455921366976909e+01, -2.095288023547636e+01, -1.238182223173521e+04, -7.606182108224207e+05, -3.886158490362002e+05, -2.528808158265612e+01, -1.673195099733996e+05, -1.673195099734017e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rppscan_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rppscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.868062256067498e-03, 1.868047479809998e-03, 1.867979158996903e-03, 1.868220076197633e-03, 1.868054497202979e-03, 1.868054497202979e-03, 4.973099763969315e-03, 4.975513452539377e-03, 5.048761119466165e-03, 5.019808565195093e-03, 4.973745947222626e-03, 4.891580574394257e-03, 8.799701452204219e-03, 2.361334792037112e-02, 2.396637807622290e-02, 2.390576117031749e-02, 2.360538443885267e-02, 2.360538443885267e-02, 8.508358662016746e-02, 8.429253984846716e-02, 2.520665240748416e-03, 1.070685849302613e-01, 8.483892310258212e-02, 8.483892310258212e-02, 4.371433403679795e-01, 4.425099106355055e-01, 2.601692581432314e-01, 1.524166088993130e-01, 4.476029861760542e-01, 4.476029861760958e-01, 3.908495544230211e-03, 3.910903846504518e-03, 3.908765317370335e-03, 6.904395930769834e-03, 3.909698378421369e-03, 3.909698378421369e-03, 6.431356149010673e-03, 6.576313628087166e-03, 6.398735506023896e-03, 6.469412492139350e-03, 6.634389961244908e-03, 8.468615591774985e-03, 3.098701636160439e-02, 3.088774657765309e-02, 3.161788628445644e-02, 3.195224161648839e-02, 3.060588310597296e-02, 6.603922082547176e-02, 6.982671428061610e-04, 8.106124122764366e-02, 7.908555987674050e-04, 9.644705058633185e-03, 1.249553485748815e-01, 1.249553485748815e-01, 1.561481173721450e-07, 1.919157362692168e-01, 2.859331743845576e-01, 1.712451445126918e-04, 1.798325938609648e-07, 1.934975284469872e-01, 3.721788699180580e-02, 3.624386698867642e-02, 4.703182659750771e-02, 3.684988634679721e-02, 3.671346863914512e-02, 3.671346863914512e-02, 3.800358930017193e-02, 3.543341265746634e-02, 3.562620225412920e-02, 3.624811966459190e-02, 3.587081402507328e-02, 7.604856441080084e-02, 2.873044062921363e-02, 1.149293736012007e-02, 5.763738915563146e-02, 3.644926245169911e-02, 5.246914877167883e-02, 5.246914877167879e-02, 4.358883200422627e-02, 2.708585263826510e-01, 2.201560387777914e-01, 5.153660141864570e-02, 6.339025662778579e-04, 1.688393421711022e-01, 3.356446893919042e-01, 3.885237193163130e-02, 1.360585402314437e-01, 1.769268993119843e-01, 1.933598502319120e-01, 1.933598502319137e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
