
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_rppscan_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rppscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.318339711374982e+01, -2.318345707603079e+01, -2.318379662648833e+01, -2.318281601550962e+01, -2.318342809848303e+01, -2.318342809848303e+01, -3.412709638800610e+00, -3.412825043318031e+00, -3.416566763648736e+00, -3.417562816371333e+00, -3.412743930749401e+00, -3.412743930749401e+00, -5.946262181451080e-01, -5.940303349732152e-01, -5.792709043553672e-01, -5.894164863360833e-01, -5.944158789636329e-01, -5.944158789636329e-01, -1.876944771784466e-01, -1.895972958849687e-01, -6.708788062497402e-01, -1.127393090715662e-01, -1.881466912291083e-01, -1.881466912291083e-01, -5.567595106129293e-03, -5.900369337855670e-03, -3.184705106957356e-02, -2.020230606781697e-03, -5.846319521269979e-03, -5.846319521269979e-03, -5.665516797312847e+00, -5.666586908453208e+00, -5.665643003984661e+00, -5.666474216574999e+00, -5.666042878954541e+00, -5.666042878954541e+00, -2.076529395099915e+00, -2.098641299264307e+00, -2.073917828775883e+00, -2.091345206069211e+00, -2.095057653806701e+00, -2.095057653806701e+00, -6.055249853305219e-01, -6.574228952909821e-01, -5.560028682247273e-01, -5.792444047105887e-01, -6.362597364736052e-01, -6.362597364736052e-01, -8.035061240256973e-02, -1.853152682927156e-01, -7.965632034768635e-02, -1.919102613234223e+00, -9.855343754993062e-02, -9.855343754993062e-02, -1.934970807365552e-03, -2.317644959720012e-03, -1.722890664780737e-03, -4.676566304448027e-02, -2.114754815642013e-03, -2.114754815642013e-03, -6.497638153012684e-01, -6.463883103813094e-01, -6.476062510551688e-01, -6.485401198613474e-01, -6.480721385725771e-01, -6.480721385725771e-01, -6.261166167087284e-01, -5.434876485755407e-01, -5.678593458931580e-01, -5.902791456552192e-01, -5.786792528925904e-01, -5.786792528925904e-01, -6.788855324490553e-01, -2.421328769109359e-01, -2.845493816711908e-01, -3.556354630234890e-01, -3.210735236213264e-01, -3.210735236213263e-01, -4.757219210788869e-01, -2.897469261559674e-02, -4.130286805321288e-02, -3.364801417829321e-01, -6.471416939346174e-02, -6.471416939346177e-02, -6.619876931536784e-03, -4.077762084963135e-04, -9.851430828420817e-04, -6.162516230138185e-02, -1.754998103823696e-03, -1.754998103823692e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_rppscan_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rppscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.019199166646132e+01, -3.019208486063444e+01, -3.019254630965624e+01, -3.019102087002546e+01, -3.019204041194435e+01, -3.019204041194435e+01, -4.801648836711194e+00, -4.801750272114102e+00, -4.804873934705935e+00, -4.803047462369018e+00, -4.801706119763820e+00, -4.801706119763820e+00, -8.221101709657577e-01, -8.211407968851481e-01, -7.973625427885246e-01, -8.085820285304011e-01, -8.217640490230376e-01, -8.217640490230376e-01, -2.019758198602390e-01, -2.079953490365644e-01, -8.776338112434249e-01, -1.554216960583662e-01, -2.036939877475848e-01, -2.036939877475848e-01, -6.284874399062888e-03, -7.905632098799449e-03, -4.805548591360922e-02, -3.646941860014810e-03, -7.045320631914058e-03, -7.045320631914158e-03, -7.410618548984972e+00, -7.412927199875396e+00, -7.410861862663677e+00, -7.412656586521814e+00, -7.411792717589191e+00, -7.411792717589191e+00, -2.557365842023542e+00, -2.592008731117984e+00, -2.547584937771826e+00, -2.575718388315092e+00, -2.593778174743083e+00, -2.593778174743083e+00, -8.109600694448175e-01, -9.188298904511480e-01, -7.677643574679233e-01, -8.367294437015764e-01, -8.468740048261545e-01, -8.468740048261545e-01, -1.101343184936767e-01, -1.520042457638831e-01, -1.084608967864653e-01, -2.830344802396505e+00, -1.090302774252253e-01, -1.090302774252253e-01, -3.490936363350041e-03, -4.159371637681388e-03, -3.082758681177215e-03, -7.041392587503396e-02, -3.795947039790507e-03, -3.795947039790508e-03, -8.681898864756972e-01, -8.584803704923811e-01, -8.618904702704178e-01, -8.645765550216807e-01, -8.632272651443523e-01, -8.632272651443523e-01, -8.423652901453911e-01, -6.931720855097007e-01, -7.352980991136379e-01, -7.751102311419125e-01, -7.547241838068289e-01, -7.547241838068290e-01, -9.673250960210212e-01, -2.531654854433260e-01, -3.256654713547241e-01, -4.656698368489436e-01, -3.937425962775924e-01, -3.937425962775925e-01, -6.109343935971838e-01, -4.106767932837365e-02, -6.150972770886012e-02, -4.523910449060201e-01, -8.695462314806074e-02, -8.695462314806084e-02, -1.134522423884444e-02, -7.662408231198841e-04, -1.797511034027403e-03, -8.419421315617021e-02, -3.160871090941232e-03, -3.160871090941225e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rppscan_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rppscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.974833549530760e-09, -5.974784281926364e-09, -5.974318960384170e-09, -5.975116170992467e-09, -5.974809805784186e-09, -5.974809805784186e-09, -1.532982725475146e-05, -1.533114982451389e-05, -1.536689087199342e-05, -1.533516769444603e-05, -1.532998344945915e-05, -1.532998344945915e-05, -4.218662826565155e-03, -4.202414669616883e-03, -3.829515479263598e-03, -4.019839598725363e-03, -4.213129187857543e-03, -4.213129187857543e-03, -1.423821372137003e+00, -1.381360464752151e+00, -1.614351873719407e-03, -2.569005141648075e-01, -1.415388155825343e+00, -1.415388155825343e+00, -3.043520236617749e+02, -1.490123081933960e+02, 5.389540877070857e-01, 3.217980583046301e+02, -2.422577326947592e+02, -2.422577326947477e+02, -1.684019512143556e-06, -1.684458845366560e-06, -1.683975025957888e-06, -1.684321622974859e-06, -1.684364870121452e-06, -1.684364870121452e-06, -9.521327804133873e-05, -8.834638611066719e-05, -9.345434204038457e-05, -8.784257525822150e-05, -9.268388112499273e-05, -9.268388112499273e-05, -1.795502363736650e-02, -1.526508821166353e-02, -2.492967989580776e-02, -2.502878311286446e-02, -1.432732120809757e-02, -1.432732120809757e-02, -6.391644358338479e-01, -1.361140590507991e+00, -7.924172792210167e-01, -2.142812057399652e-04, -2.640651186869471e+00, -2.640651186869471e+00, 3.489871774457982e+02, 2.769430518297009e+02, 7.936695116104484e+02, 9.448524334446260e-01, 4.074547231772992e+02, 4.074547231772991e+02, -1.196081686964735e-02, -1.163927787075414e-02, -1.175119512736500e-02, -1.184166276709635e-02, -1.179659343333779e-02, -1.179659343333779e-02, -1.486811084075139e-02, -1.819372083883300e-02, -1.672063652755688e-02, -1.579649028324641e-02, -1.634844030605732e-02, -1.634844030605732e-02, -1.377257655613560e-02, -4.581002742699221e-01, -2.781575119854945e-01, -1.289500269404532e-01, -1.842293308652184e-01, -1.842293308652186e-01, -4.110185251575631e-02, -3.302340162667809e+00, 2.212041588871618e-01, -1.745088226805457e-01, -1.704277659782902e+00, -1.704277659782885e+00, 6.007973846304317e+01, 3.698296376573083e+03, 1.029327341130840e+03, -1.635341734872246e+00, 6.746871590413681e+02, 6.746871590413693e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rppscan_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rppscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([9.618473245865242e-04, 9.618460032511157e-04, 9.618119331542280e-04, 9.618322314976550e-04, 9.618468877040879e-04, 9.618468877040879e-04, 9.103330890475696e-03, 9.104509411956783e-03, 9.139623214072872e-03, 9.133463996961860e-03, 9.103559706179695e-03, 9.103559706179695e-03, 1.433088741681487e-02, 1.429254905607918e-02, 1.354319548451794e-02, 1.491841691526534e-02, 1.431869792455973e-02, 1.431869792455973e-02, 1.420963847114207e-01, 1.431366804008471e-01, 2.901613286732129e-03, 1.322688454981668e-02, 1.428285007211259e-01, 1.428285007211259e-01, 6.664621991559639e-03, 4.522792570770802e-03, 3.033663327062741e-03, 2.390331603361186e-06, 6.181820502148302e-03, 6.181820502148103e-03, 3.922746440553235e-03, 3.925001699259631e-03, 3.922818666592828e-03, 3.924581330655545e-03, 3.924115618088080e-03, 3.924115618088080e-03, 1.177391608387069e-02, 1.120432184188091e-02, 1.149513084250341e-02, 1.102414149023942e-02, 1.173720071731572e-02, 1.173720071731572e-02, 5.353349548025766e-02, 5.493966540291115e-02, 6.088613754242349e-02, 6.502212284712663e-02, 4.836931101009884e-02, 4.836931101009884e-02, 1.377023947561176e-02, 1.384409532789965e-01, 1.573403024386923e-02, 2.012989861706676e-02, 6.405718383644748e-02, 6.405718383644748e-02, 1.121773829509996e-05, 5.495954579711965e-06, 4.338566058671867e-05, 1.209563406473659e-03, 3.159806337882752e-06, 3.159806337882739e-06, 4.017319314895223e-02, 3.900388671867223e-02, 3.940931375520948e-02, 3.973330804556653e-02, 3.957133377671065e-02, 3.957133377671065e-02, 4.446680893048387e-02, 3.881003832391913e-02, 3.995881909218487e-02, 4.146466682268200e-02, 4.091130517125931e-02, 4.091130517125931e-02, 5.568731336097243e-02, 9.407069718561938e-02, 9.447549018459908e-02, 8.671797223025120e-02, 8.924127070982074e-02, 8.924127070982062e-02, 6.124541258197218e-02, 6.683226608892184e-03, 3.461506415447027e-03, 9.631312107389367e-02, 1.829419351203581e-02, 1.829419351203566e-02, 1.629690540102030e-05, 2.606514924546930e-07, 3.137110354579628e-05, 1.634592638720685e-02, 2.742139120054977e-06, 2.742139120054975e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
