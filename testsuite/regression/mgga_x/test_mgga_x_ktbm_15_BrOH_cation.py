
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_15_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_15", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.403661249844563e+01, -2.403668017087988e+01, -2.403710404667187e+01, -2.403610040333801e+01, -2.403660872603020e+01, -2.403660872603020e+01, -3.441250688538287e+00, -3.441334904961829e+00, -3.443849572903979e+00, -3.445357458417042e+00, -3.443918245103044e+00, -3.443918245103044e+00, -6.302532159675232e-01, -6.297942307614306e-01, -6.194996836698247e-01, -6.280207311960680e-01, -6.265969747702289e-01, -6.265969747702289e-01, -1.811862543852084e-01, -1.839742315851410e-01, -7.190853808293758e-01, -1.310063557051555e-01, -1.709174105230613e-01, -1.709174105230613e-01, -5.995940440369309e-03, -6.311961291398118e-03, -3.467783489492975e-02, -3.439791585874436e-03, -4.814836108074767e-03, -4.814836108074768e-03, -5.877389378835614e+00, -5.877926162587658e+00, -5.877482932930809e+00, -5.877953969107910e+00, -5.877626432497438e+00, -5.877626432497438e+00, -2.122769090709161e+00, -2.150632358628283e+00, -2.117287930763711e+00, -2.142664185664235e+00, -2.140779951319547e+00, -2.140779951319547e+00, -6.207825095127091e-01, -6.654091311354109e-01, -5.495910810617610e-01, -5.558357983439173e-01, -6.341569604645860e-01, -6.341569604645861e-01, -9.052123073372789e-02, -1.773926985609201e-01, -8.375541948317036e-02, -1.899101302805319e+00, -1.075023208266731e-01, -1.075023208266731e-01, -2.635631877747909e-03, -3.347649229038399e-03, -2.573482557606734e-03, -5.614382597540831e-02, -3.238713696078740e-03, -3.238713696078741e-03, -6.502043160378768e-01, -6.501380262693484e-01, -6.502168882134944e-01, -6.502301325528229e-01, -6.502248800899300e-01, -6.502248800899300e-01, -6.258274120632182e-01, -5.529225801650339e-01, -5.777988702287409e-01, -5.987485105103816e-01, -5.879167141933673e-01, -5.879167141933674e-01, -6.863348667987843e-01, -2.288159986125559e-01, -2.763903345813523e-01, -3.584466983954251e-01, -3.184133770069630e-01, -3.184133770069630e-01, -4.855829147433701e-01, -3.322911789246687e-02, -4.518846418824143e-02, -3.494053508283329e-01, -7.189061774950078e-02, -7.189061774950081e-02, -8.370068357680163e-03, -8.915296792507434e-04, -1.894270323730387e-03, -6.761115080772931e-02, -2.973649227897463e-03, -2.973649227897460e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_15_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_15", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.900354279547572e+01, -2.900311730667312e+01, -2.900368987841527e+01, -2.900322417533121e+01, -2.900405146475686e+01, -2.900377285033122e+01, -2.900238940152941e+01, -2.900165453595282e+01, -2.900363451581874e+01, -2.900242137615574e+01, -2.900363451581874e+01, -2.900242137615574e+01, -4.598604248158526e+00, -4.598417208942705e+00, -4.598787638194907e+00, -4.598534207373244e+00, -4.602342377534816e+00, -4.603031120088749e+00, -4.601361326632025e+00, -4.601447467362633e+00, -4.597457134727304e+00, -4.604718982541207e+00, -4.597457134727304e+00, -4.604718982541207e+00, -8.040976651532320e-01, -8.081126149408290e-01, -8.027591478478791e-01, -8.073795171459121e-01, -7.850160931049900e-01, -7.817249596276957e-01, -7.945178563466516e-01, -7.969534949798279e-01, -8.129393476075349e-01, -7.764111252241472e-01, -8.129393476075349e-01, -7.764111252241472e-01, -2.172286806710096e-01, -2.279032440344843e-01, -2.196065492428895e-01, -2.318743596981808e-01, -8.847595218553173e-01, -9.095364797673409e-01, -1.647462644611208e-01, -1.676917058816628e-01, -2.263823862804396e-01, -1.212043919177422e-01, -2.263823862804394e-01, -1.212043919177423e-01, -7.419388915066718e-03, -7.880298969979743e-03, -7.778769765066784e-03, -8.328133887906056e-03, -4.348258343773587e-02, -4.587231058281603e-02, -4.490316264574161e-03, -4.410861195515542e-03, -6.629509414186325e-03, -3.812911325138424e-03, -6.629509414186335e-03, -3.812911325138426e-03, -7.178664795117700e+00, -7.176706199729030e+00, -7.183253273153881e+00, -7.181139190061917e+00, -7.178869605891019e+00, -7.176822487327174e+00, -7.182808474717008e+00, -7.180851289069358e+00, -7.181051786036262e+00, -7.178937988335828e+00, -7.181051786036262e+00, -7.178937988335828e+00, -2.548594556576425e+00, -2.548707078046534e+00, -2.569303523903885e+00, -2.568653670829125e+00, -2.531362240544787e+00, -2.536310723632730e+00, -2.549086482494192e+00, -2.554199206684441e+00, -2.573903067487786e+00, -2.561128743704247e+00, -2.573903067487786e+00, -2.561128743704247e+00, -8.022403795037869e-01, -8.002652588129486e-01, -9.225151116325341e-01, -9.237374536504989e-01, -7.075308032531459e-01, -7.461933992904247e-01, -7.778559688849183e-01, -8.121968452199050e-01, -8.405104863739126e-01, -7.970032340769047e-01, -8.405104863739127e-01, -7.970032340769047e-01, -1.156794798949868e-01, -1.167822148035474e-01, -2.207660766584155e-01, -2.218000176250801e-01, -1.047984791453722e-01, -1.103073043816201e-01, -2.750225642028463e+00, -2.749176012089848e+00, -1.321067360860733e-01, -1.399205390584278e-01, -1.321067360860734e-01, -1.399205390584277e-01, -3.415476888787402e-03, -3.545975219655864e-03, -4.346452453508899e-03, -4.416705178535197e-03, -3.231422736608242e-03, -3.423415634542681e-03, -7.245136639314254e-02, -7.270103686601562e-02, -3.360605013902313e-03, -4.505216486545772e-03, -3.360605013902312e-03, -4.505216486545774e-03, -8.617453919128188e-01, -8.653177552297370e-01, -8.396660800216588e-01, -8.433761861539758e-01, -8.472207496996647e-01, -8.509345807585458e-01, -8.536917887099403e-01, -8.572724189152305e-01, -8.504410453300379e-01, -8.540859920353565e-01, -8.504410453300379e-01, -8.540859920353565e-01, -8.457152704963689e-01, -8.484350353277246e-01, -6.426955503032302e-01, -6.456654612899334e-01, -6.854434748932973e-01, -6.890769450052722e-01, -7.419769243226363e-01, -7.449195704090470e-01, -7.122000743975377e-01, -7.149904070351246e-01, -7.122000743975377e-01, -7.149904070351250e-01, -9.620508446137055e-01, -9.656020788137336e-01, -2.810439900093669e-01, -2.826771212897956e-01, -3.365072720765093e-01, -3.400842098809770e-01, -4.496833287482002e-01, -4.521918165884989e-01, -3.895939377624859e-01, -3.895097592770310e-01, -3.895939377624859e-01, -3.895097592770308e-01, -5.943145134909783e-01, -5.992377537328857e-01, -4.251049457744726e-02, -4.282713993467420e-02, -5.740946480657657e-02, -5.931018928925830e-02, -4.383837202569320e-01, -4.492913735215525e-01, -8.961108941037305e-02, -9.452911302374814e-02, -8.961108941037305e-02, -9.452911302374825e-02, -1.075582011438426e-02, -1.115407902614384e-02, -1.188807686802202e-03, -1.196513498754737e-03, -2.356551029208373e-03, -2.506754172721381e-03, -8.582130973265811e-02, -8.709047420940580e-02, -3.173621234132297e-03, -4.129545521767894e-03, -3.173621234132291e-03, -4.129545521767884e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_15_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_15", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.883558244490291e-08, 0.000000000000000e+00, -3.883888761351587e-08, -3.883536703727938e-08, 0.000000000000000e+00, -3.883873053155468e-08, -3.883463623917522e-08, 0.000000000000000e+00, -3.883769423581266e-08, -3.883710009034091e-08, 0.000000000000000e+00, -3.884082723387332e-08, -3.883546789971765e-08, 0.000000000000000e+00, -3.883954209824400e-08, -3.883546789971765e-08, 0.000000000000000e+00, -3.883954209824400e-08, -2.986326910684255e-05, 0.000000000000000e+00, -2.985303660134385e-05, -2.987148890238237e-05, 0.000000000000000e+00, -2.985801442512610e-05, -3.002636980566563e-05, 0.000000000000000e+00, -3.005147552028521e-05, -2.998229853966002e-05, 0.000000000000000e+00, -2.997597009715341e-05, -2.986459923568743e-05, 0.000000000000000e+00, -3.011375647269453e-05, -2.986459923568743e-05, 0.000000000000000e+00, -3.011375647269453e-05, -8.749133557716468e-03, 0.000000000000000e+00, -8.948663838409417e-03, -8.708836077498141e-03, 0.000000000000000e+00, -8.919969348352453e-03, -8.033636703109802e-03, 0.000000000000000e+00, -8.050941042527052e-03, -8.613239153957708e-03, 0.000000000000000e+00, -8.804783327514071e-03, -8.841798026954924e-03, 0.000000000000000e+00, -8.208705134548433e-03, -8.841798026954924e-03, 0.000000000000000e+00, -8.208705134548433e-03, -1.216940341649004e+00, 0.000000000000000e+00, -1.385376236946640e+00, -1.228205401392669e+00, 0.000000000000000e+00, -1.409796240536430e+00, -1.580133001177969e-03, 0.000000000000000e+00, -2.005767108394345e-03, -7.147175120148173e-01, 0.000000000000000e+00, -9.170880423859078e-01, -1.028679513885960e+00, 0.000000000000000e+00, -5.729373577860595e-01, -1.028679513885959e+00, 0.000000000000000e+00, -5.729373577860596e-01, -2.695528986819989e+02, 0.000000000000000e+00, -2.425692789101750e+02, -2.462291764379898e+02, 0.000000000000000e+00, -2.198587469694520e+02, -4.966106080886783e+00, 0.000000000000000e+00, -4.800421148634604e+00, -5.052499381487314e+02, 0.000000000000000e+00, -5.471244318346047e+02, -3.141395396884662e+02, 0.000000000000000e+00, -8.137968025344304e+02, -3.141395396884650e+02, 0.000000000000000e+00, -8.137968025344292e+02, -1.171947559684074e-05, 0.000000000000000e+00, -1.173122193465234e-05, -1.172126364211886e-05, 0.000000000000000e+00, -1.173295558321570e-05, -1.171985624346213e-05, 0.000000000000000e+00, -1.173148473004796e-05, -1.172137759457257e-05, 0.000000000000000e+00, -1.173304684690767e-05, -1.172019055048514e-05, 0.000000000000000e+00, -1.173206603237506e-05, -1.172019055048514e-05, 0.000000000000000e+00, -1.173206603237506e-05, -2.772131243941950e-04, 0.000000000000000e+00, -2.787231827243417e-04, -2.814881909908580e-04, 0.000000000000000e+00, -2.828314133747964e-04, -2.755449809841646e-04, 0.000000000000000e+00, -2.774919977235246e-04, -2.797891208953340e-04, 0.000000000000000e+00, -2.816931331528345e-04, -2.807684993618599e-04, 0.000000000000000e+00, -2.812188730943069e-04, -2.807684993618599e-04, 0.000000000000000e+00, -2.812188730943069e-04, -5.271361160948044e-02, 0.000000000000000e+00, -5.391330366159675e-02, -4.561621034736318e-02, 0.000000000000000e+00, -4.601698005735563e-02, -5.632148380460399e-02, 0.000000000000000e+00, -5.707204780976952e-02, -5.942326783407893e-02, 0.000000000000000e+00, -5.673486782725832e-02, -4.920708558214068e-02, 0.000000000000000e+00, -5.595254816200680e-02, -4.920708558214069e-02, 0.000000000000000e+00, -5.595254816200680e-02, -9.864368093640610e-01, 0.000000000000000e+00, -9.556040161062568e-01, -6.058978698517521e-01, 0.000000000000000e+00, -5.972562687669828e-01, -1.055656374789144e+00, 0.000000000000000e+00, -1.086428153924985e+00, -4.640662583083355e-04, 0.000000000000000e+00, -4.650526711649549e-04, -1.141098675822283e+00, 0.000000000000000e+00, -1.485988458443359e+00, -1.141098675822283e+00, 0.000000000000000e+00, -1.485988458443360e+00, -2.856952427538933e+02, 0.000000000000000e+00, -2.884933716928994e+02, -3.972931348399832e+02, 0.000000000000000e+00, -3.400525381720925e+02, -2.530400946899820e+03, 0.000000000000000e+00, -2.330110145525146e+03, -1.924071431104165e+00, 0.000000000000000e+00, -2.362865490695283e+00, -1.357923072189963e+02, 0.000000000000000e+00, -1.230039877802471e+03, -1.357923072189991e+02, 0.000000000000000e+00, -1.230039877802472e+03, -7.569021258489460e-02, 0.000000000000000e+00, -7.459300972451750e-02, -7.600355479559720e-02, 0.000000000000000e+00, -7.492055219527667e-02, -7.593590209079637e-02, 0.000000000000000e+00, -7.484646082083490e-02, -7.584729125817094e-02, 0.000000000000000e+00, -7.475311008615104e-02, -7.589503265230464e-02, 0.000000000000000e+00, -7.480319579290946e-02, -7.589503265230464e-02, 0.000000000000000e+00, -7.480319579290946e-02, -8.314171959951425e-02, 0.000000000000000e+00, -8.217088780673530e-02, -1.034920754390930e-01, 0.000000000000000e+00, -1.025400339706240e-01, -1.023289349342111e-01, 0.000000000000000e+00, -1.012094444977000e-01, -9.711650552980948e-02, 0.000000000000000e+00, -9.591451955161341e-02, -1.001208198835945e-01, 0.000000000000000e+00, -9.901440435104739e-02, -1.001208198835945e-01, 0.000000000000000e+00, -9.901440435104741e-02, -3.546748963442454e-02, 0.000000000000000e+00, -3.600179852283898e-02, -4.648293153016631e-01, 0.000000000000000e+00, -4.623326200087384e-01, -3.760981414600762e-01, 0.000000000000000e+00, -3.789284523889698e-01, -2.601413473651172e-01, 0.000000000000000e+00, -2.547883432669325e-01, -3.419901225321499e-01, 0.000000000000000e+00, -3.452275106686541e-01, -3.419901225321500e-01, 0.000000000000000e+00, -3.452275106686544e-01, -1.163663371120918e-01, 0.000000000000000e+00, -1.177228485995006e-01, -6.064310258818405e+00, 0.000000000000000e+00, -5.804538257371035e+00, -2.801128250825936e+00, 0.000000000000000e+00, -2.742615274338868e+00, -3.669397361284399e-01, 0.000000000000000e+00, -4.074543105130634e-01, -1.883694973738961e+00, 0.000000000000000e+00, -2.093775128222282e+00, -1.883694973738961e+00, 0.000000000000000e+00, -2.093775128222283e+00, -5.239428635727842e+01, 0.000000000000000e+00, -4.617679524855890e+01, 1.046298753699121e+03, 0.000000000000000e+00, 3.419098572002436e+03, -3.614323356007566e+03, 0.000000000000000e+00, -3.272733378936569e+03, -2.268119009029312e+00, 0.000000000000000e+00, -2.617093761295371e+00, -5.634987732299195e+02, 0.000000000000000e+00, -1.488131536940086e+03, -5.634987732299207e+02, 0.000000000000000e+00, -1.488131536940090e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_15_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_15", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_15_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_15", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.711227010620485e-03, 2.711489073369879e-03, 2.711224871555014e-03, 2.711487479239076e-03, 2.711244321715553e-03, 2.711507920579453e-03, 2.711270332047883e-03, 2.711540704664687e-03, 2.711225396989105e-03, 2.711546768679749e-03, 2.711225396989105e-03, 2.711546768679749e-03, 7.094010177131745e-03, 7.085460255453228e-03, 7.097158106926177e-03, 7.086923880646416e-03, 7.151564766378174e-03, 7.159539276090530e-03, 7.159054921303783e-03, 7.152963207440334e-03, 7.088765923268769e-03, 7.202411158155199e-03, 7.088765923268769e-03, 7.202411158155199e-03, 8.458996649387689e-03, 8.686415766801318e-03, 8.429543753152791e-03, 8.633648635186047e-03, 7.718129923823738e-03, 8.088622020489215e-03, 9.637076299076713e-03, 9.958479610135566e-03, 8.250183189335424e-03, 1.061845659243338e-02, 8.250183189335424e-03, 1.061845659243338e-02, 5.366463518009850e-02, 7.374319659091656e-02, 5.509460185698464e-02, 7.811298482095738e-02, -6.631710670617670e-04, -3.533677722958040e-04, 1.063206592576230e-02, 1.674265872487298e-02, 5.052288203127338e-02, 2.523631467956134e-03, 5.052288203127345e-02, 2.523631467956175e-03, 4.215658364685585e-04, 4.584442997294127e-04, 4.395961404028670e-04, 4.869482255777235e-04, 1.408944018004444e-03, 1.639786954077114e-03, 1.533387038655471e-04, 1.608906920372029e-04, 3.401608879812676e-04, 1.333037107278864e-04, 3.401608879812683e-04, 1.333037107278892e-04, 1.138530801078375e-02, 1.138907231427420e-02, 1.138223761476130e-02, 1.138610288718719e-02, 1.138552812744870e-02, 1.138925181309628e-02, 1.138287773149519e-02, 1.138653899190671e-02, 1.138344769790905e-02, 1.138753787951596e-02, 1.138344769790905e-02, 1.138753787951596e-02, 1.761488389678107e-02, 1.775714721119687e-02, 1.845022479690336e-02, 1.856370335313785e-02, 1.756222870183829e-02, 1.770901661028156e-02, 1.833043824010214e-02, 1.848718167029707e-02, 1.812873563625567e-02, 1.819872653389459e-02, 1.812873563625567e-02, 1.819872653389459e-02, 7.265685344629329e-02, 7.409638104958001e-02, 7.286366478220652e-02, 7.379436264184648e-02, 5.015872176312983e-02, 6.109109123369545e-02, 5.352812865910013e-02, 6.029957352830023e-02, 7.691868385022632e-02, 7.319235411230311e-02, 7.691868385022635e-02, 7.319235411230307e-02, 5.492244430168731e-03, 5.376348516641617e-03, 2.851275427584436e-02, 2.839171447550661e-02, 4.135790349303680e-03, 5.205886270966608e-03, 1.823780620452556e-02, 1.825402916535674e-02, 1.020420427641766e-02, 1.661321438673201e-02, 1.020420427641772e-02, 1.661321438673209e-02, 2.633402823644977e-05, 3.077976551949263e-05, 9.512857080691748e-05, 8.322171519679665e-05, 2.849278266556924e-04, 3.095899874202342e-04, 2.356750358472288e-03, 3.236752553087987e-03, 1.000313857244146e-05, 4.231785395397153e-04, 1.000313857244195e-05, 4.231785395397106e-04, 9.560728370559041e-02, 9.526307395049093e-02, 9.751220019976187e-02, 9.715547416490973e-02, 9.688702079820581e-02, 9.653004682199262e-02, 9.632918733896534e-02, 9.598200848216404e-02, 9.661089546301685e-02, 9.625920744663120e-02, 9.661089546301685e-02, 9.625920744663125e-02, 9.594145227378105e-02, 9.575635624588055e-02, 1.019554361459953e-01, 1.020771085764288e-01, 1.060212039362084e-01, 1.059336231010870e-01, 1.046179340125988e-01, 1.043110892098544e-01, 1.055699521033388e-01, 1.054926650679872e-01, 1.055699521033388e-01, 1.054926650679872e-01, 6.360296857792423e-02, 6.539751329124280e-02, 4.613400666547670e-02, 4.661441032055810e-02, 6.000644701453402e-02, 6.224072664153344e-02, 7.597336391936027e-02, 7.520839951136687e-02, 7.737913721828127e-02, 7.791742393841326e-02, 7.737913721828142e-02, 7.791742393841329e-02, 8.174442758908311e-02, 8.511509341027361e-02, 1.750444684998390e-03, 1.691107904509597e-03, 1.817697975409353e-03, 1.981086180011601e-03, 8.951661110650859e-02, 1.124937785367259e-01, 4.902968168815271e-03, 6.542391545332244e-03, 4.902968168815286e-03, 6.542391545332277e-03, 1.870106055046329e-04, 1.801690765611218e-04, -2.767964367483752e-06, -6.826534897411504e-06, 1.706787415185805e-04, 1.854933840249558e-04, 5.326213884505208e-03, 6.971223377161941e-03, 3.952110814517888e-05, 3.939204547007356e-04, 3.952110814517899e-05, 3.939204547007216e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
