
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_15_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_15", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.133347681599715e+01, -2.133359615061101e+01, -2.133412097338709e+01, -2.278315569266967e+01, -2.278388678184174e+01, -2.423465452109014e+01, -3.515782526852953e+00, -3.921358545600715e+00, -3.922528654884189e+00, -3.922412346647699e+00, -3.922016014085529e+00, -3.516734726930938e+00, -5.866376330180388e-01, -6.578265029104289e-01, -7.016208546954401e-01, -6.428396840759849e-01, -5.774591139105361e-01, -7.104741159356702e-01, -1.708742989475859e-01, -1.738280559738162e-01, -7.547326987310532e-01, -1.340957346402403e-01, -1.746206318354914e-01, -1.741825927835508e-01, -5.998647099593455e-03, -6.317702598007091e-03, -3.480354580918450e-02, -3.458365766756154e-03, -4.827530394814071e-03, -4.827530394814071e-03, -5.880914483337495e+00, -5.881410600540034e+00, -5.880934748433061e+00, -5.881373036354857e+00, -5.621230505934228e+00, -5.621463000282621e+00, -2.189026203030335e+00, -2.208888330752819e+00, -2.174204903118008e+00, -2.191934523057248e+00, -1.975827823024261e+00, -2.207187481183054e+00, -6.101840697242444e-01, -7.226899200789338e-01, -6.148819329502950e-01, -6.423882245166243e-01, -6.270953376896021e-01, -6.792887040205409e-01, -9.167990113769142e-02, -1.694983161862824e-01, -8.480833278780159e-02, -2.184479656325480e+00, -1.087883169954959e-01, -1.087883169954959e-01, -2.670446558979100e-03, -3.380755643145607e-03, -2.589063217526529e-03, -5.622257006088802e-02, -3.252321607495655e-03, -3.252321607495656e-03, -6.578735969191181e-01, -6.574797219633015e-01, -6.298300740373657e-01, -6.461552400752861e-01, -6.322061939134709e-01, -6.449267128421194e-01, -6.405236657290513e-01, -5.053127276393659e-01, -5.402535069593724e-01, -6.105047261937873e-01, -5.988626074477799e-01, -5.577916260815738e-01, -7.100549809408813e-01, -2.310584345100285e-01, -2.580528148757911e-01, -3.477586075611952e-01, -3.328329543895132e-01, -2.983615217268631e-01, -5.119089056907755e-01, -3.316841488701760e-02, -4.552170642651861e-02, -3.787336003067395e-01, -7.261546908589533e-02, -7.261546908589536e-02, -8.457022634070402e-03, -9.035825997192222e-04, -1.901052663927237e-03, -6.619614245703842e-02, -2.986683738457759e-03, -2.987432865627360e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_15_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_15", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.166190447603840e+01, -3.166208302203251e+01, -3.166203896607885e+01, -3.166218066655977e+01, -3.166247732272508e+01, -3.166280641721031e+01, -3.166096034227166e+01, -2.877637616003165e+01, -3.166198511123639e+01, -2.877726362441657e+01, -2.877749518580395e+01, -2.877726362441657e+01, -4.518103164501587e+00, -4.574528771584636e+00, -4.518110870848417e+00, -4.518047955149451e+00, -4.518244855358594e+00, -4.518317209302165e+00, -4.518576051693581e+00, -4.518639306387234e+00, -4.517362045527086e+00, -4.518849626174585e+00, -4.573396349697288e+00, -4.518849626174585e+00, -7.563557531285895e-01, -7.621861766051913e-01, -7.544026006320886e-01, -8.757302243463818e-01, -8.519958697934136e-01, -8.458648680187937e-01, -8.556829360989999e-01, -7.386365979664519e-01, -7.699788519954961e-01, -7.023637786770834e-01, -8.831569851664832e-01, -8.244509714330026e-01, -1.878095576620540e-01, -2.288679676204543e-01, -1.899045312331408e-01, -2.331686135960931e-01, -9.921162070010155e-01, -8.773634059039387e-01, -1.665801845869589e-01, -1.690924757864369e-01, -2.293305743671596e-01, -1.208967164756284e-01, -2.293305743671595e-01, -1.194232211404949e-01, -7.413321694267738e-03, -7.877531197388224e-03, -8.104217421930727e-03, -8.321782911254134e-03, -4.469931138793869e-02, -4.561676547502468e-02, -4.456352842431912e-03, -4.382096891627184e-03, -6.613390876752267e-03, -3.763434984048325e-03, -6.613390876752267e-03, -3.763434984048323e-03, -7.174127697582661e+00, -7.172429790751512e+00, -7.178762498792403e+00, -7.176907755804568e+00, -7.174438762537378e+00, -7.172622342988220e+00, -7.178413491020128e+00, -7.176688196257163e+00, -7.764937392869341e+00, -7.174671074018739e+00, -7.176459888125707e+00, -7.763039103500472e+00, -2.547036142986891e+00, -2.546798663503941e+00, -2.564727814006377e+00, -2.563956290940062e+00, -2.532259267558612e+00, -2.536257477529346e+00, -2.547534026866864e+00, -2.551732588350866e+00, -2.567998373255938e+00, -2.485471973278483e+00, -2.567998373255938e+00, -2.557301492243955e+00, -7.680735677158249e-01, -8.369621065230004e-01, -8.607238350923726e-01, -8.632539149827133e-01, -6.922976207725899e-01, -7.183148894122178e-01, -7.244401226559682e-01, -7.522917089723686e-01, -8.047957390506448e-01, -8.309459227257604e-01, -8.047957390506449e-01, -7.600118891685560e-01, -1.154585952503819e-01, -1.165643166224620e-01, -1.963696413997649e-01, -2.232084976350514e-01, -1.044059964013328e-01, -1.100429782297230e-01, -2.528307666871033e+00, -2.527263676972594e+00, -1.323067307041195e-01, -1.404257971892382e-01, -1.323067307041196e-01, -1.404257971892380e-01, -3.488892808506430e-03, -3.474300278692222e-03, -4.287796468177485e-03, -4.352692417108486e-03, -3.206299408630373e-03, -3.395584382967326e-03, -7.189318679109308e-02, -7.353233298315981e-02, -3.274746923261494e-03, -4.497277442388759e-03, -3.274746923261496e-03, -4.497277442388760e-03, -8.515264897975132e-01, -8.553297026861681e-01, -8.300106473524067e-01, -8.339208488486239e-01, -8.728975917717101e-01, -8.762065048052275e-01, -8.735928649990072e-01, -8.474514700922435e-01, -8.732618294501580e-01, -8.765588675737571e-01, -8.732618294501580e-01, -8.443401704134522e-01, -8.263172382262421e-01, -8.296185054560552e-01, -6.390866288577913e-01, -6.845205615894879e-01, -6.772225927323976e-01, -7.503169178968784e-01, -7.283797833134245e-01, -7.313250815066299e-01, -7.005873241169249e-01, -7.036664749648359e-01, -7.005873241169250e-01, -7.772378988953426e-01, -8.906732260132542e-01, -9.879581332417451e-01, -2.826337562072795e-01, -2.843373499438582e-01, -2.917361061713054e-01, -3.444362926425582e-01, -4.334581081155542e-01, -4.537485455373961e-01, -3.944441830575620e-01, -3.942968431336714e-01, -3.944441830575621e-01, -3.557013837898981e-01, -5.868737916799891e-01, -5.908611255248986e-01, -4.386768138290763e-02, -4.416651987857689e-02, -5.702160793893129e-02, -5.893132899371049e-02, -4.321595659375675e-01, -4.386724543415139e-01, -8.930421358626170e-02, -9.433141389259855e-02, -8.930421358626173e-02, -9.433141389259865e-02, -1.106172177423938e-02, -1.146237367755858e-02, -1.153574231947991e-03, -1.156210804846573e-03, -2.449613441972772e-03, -2.605338851416151e-03, -8.565599673450293e-02, -8.673862340416834e-02, -3.101880948406085e-03, -4.122086074029039e-03, -3.101880948406084e-03, -4.301229644777795e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_15_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_15", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.430785456934196e-08, 0.000000000000000e+00, -3.431052308188135e-08, -3.430777695656339e-08, 0.000000000000000e+00, -3.431046615348157e-08, -3.430730395662538e-08, 0.000000000000000e+00, -3.430985070204364e-08, -3.430821024306481e-08, 0.000000000000000e+00, -3.918411648324086e-08, -3.430782907343477e-08, 0.000000000000000e+00, -3.918260452952543e-08, -3.918001808488353e-08, 0.000000000000000e+00, -3.918260452952543e-08, -3.468288041823070e-05, 0.000000000000000e+00, -2.673049374375974e-05, -3.469105677498448e-05, 0.000000000000000e+00, -3.468319194760098e-05, -3.485058742557682e-05, 0.000000000000000e+00, -3.487766724389127e-05, -3.478085954943634e-05, 0.000000000000000e+00, -3.477913262360336e-05, -3.468688825435423e-05, 0.000000000000000e+00, -3.492022016773797e-05, -2.673608724510547e-05, 0.000000000000000e+00, -3.492022016773797e-05, -7.656536572701451e-03, 0.000000000000000e+00, -7.878048796565819e-03, -7.605031298409804e-03, 0.000000000000000e+00, -1.136235689871263e-02, -1.023070527984571e-02, 0.000000000000000e+00, -1.018608739149354e-02, -1.074948990965693e-02, 0.000000000000000e+00, -7.430603683455809e-03, -7.858773698124112e-03, 0.000000000000000e+00, -6.405225701062909e-03, -1.132407850110924e-02, 0.000000000000000e+00, -9.934116467043841e-03, -7.349645006642314e-01, 0.000000000000000e+00, -1.408030553884154e+00, -7.623463002259606e-01, 0.000000000000000e+00, -1.439244648928628e+00, -2.547452822494390e-03, 0.000000000000000e+00, -1.810564368639230e-03, -8.928312506091867e-01, 0.000000000000000e+00, -1.038142683042298e+00, -1.086361377740795e+00, 0.000000000000000e+00, -9.868781146384158e-01, -1.086361377740795e+00, 0.000000000000000e+00, 2.300387693228050e-01, -2.759206784399141e+02, 0.000000000000000e+00, -2.449901569196713e+02, 2.802521232859174e+02, 0.000000000000000e+00, -2.246942305286554e+02, 5.667767197185678e+00, 0.000000000000000e+00, -5.794759963976293e+00, -6.512034000654836e+02, 0.000000000000000e+00, -6.768723932654825e+02, -3.375608796563083e+02, 0.000000000000000e+00, -1.360957321430072e+03, -3.375608796563083e+02, 0.000000000000000e+00, -1.360957321430072e+03, -1.172723731860880e-05, 0.000000000000000e+00, -1.173854624215091e-05, -1.172893707661487e-05, 0.000000000000000e+00, -1.174019461991921e-05, -1.172743554719607e-05, 0.000000000000000e+00, -1.173867803337199e-05, -1.172888797001970e-05, 0.000000000000000e+00, -1.174016933283456e-05, -1.064495965547504e-05, 0.000000000000000e+00, -1.173936991287795e-05, -1.172804139139119e-05, 0.000000000000000e+00, -1.065515740064254e-05, -2.881216814658624e-04, 0.000000000000000e+00, -2.893448861198617e-04, -2.909682969625486e-04, 0.000000000000000e+00, -2.920754057377331e-04, -2.847484661738496e-04, 0.000000000000000e+00, -2.869393852185650e-04, -2.876909670338254e-04, 0.000000000000000e+00, -2.897902870774871e-04, -2.920657064528952e-04, 0.000000000000000e+00, -2.196154995047736e-04, -2.920657064528952e-04, 0.000000000000000e+00, -2.912728454840071e-04, -5.710941247593034e-02, 0.000000000000000e+00, -4.772220153037414e-02, -4.984281885911548e-02, 0.000000000000000e+00, -5.011276131828310e-02, -6.474213896601506e-02, 0.000000000000000e+00, -6.398864341728676e-02, -7.009733539842164e-02, 0.000000000000000e+00, -6.549510942833164e-02, -5.253171860086348e-02, 0.000000000000000e+00, -5.001443778194063e-02, -5.253171860086348e-02, 0.000000000000000e+00, -6.088844727353188e-02, -1.204692691144689e+00, 0.000000000000000e+00, -1.187886952595764e+00, -2.774798171946967e-01, 0.000000000000000e+00, -6.253676569428376e-01, -1.370676019511157e+00, 0.000000000000000e+00, -1.337729591254376e+00, -5.376930072626085e-04, 0.000000000000000e+00, -5.388086117098503e-04, -1.298135831983110e+00, 0.000000000000000e+00, -1.625653799762772e+00, -1.298135831983110e+00, 0.000000000000000e+00, -1.625653799762773e+00, 1.087772960768070e+03, 0.000000000000000e+00, -8.758377904886026e+02, -6.849749329494711e+02, 0.000000000000000e+00, -6.240350564001832e+02, -3.289653467267050e+03, 0.000000000000000e+00, -3.074188752972848e+03, -2.715074935086419e+00, 0.000000000000000e+00, 1.710847287688114e+00, -1.367310548049677e+03, 0.000000000000000e+00, -1.294835928913919e+03, -1.367310548049677e+03, 0.000000000000000e+00, -1.294835928913919e+03, -7.666045641497897e-02, 0.000000000000000e+00, -7.552348702158333e-02, -7.693416349685722e-02, 0.000000000000000e+00, -7.581441634910890e-02, -7.339042622674941e-02, 0.000000000000000e+00, -7.239084134065173e-02, -7.389454283779802e-02, 0.000000000000000e+00, -7.567183688589126e-02, -7.364448135466514e-02, 0.000000000000000e+00, -7.263055560793354e-02, -7.364448135466514e-02, 0.000000000000000e+00, -7.571672751244352e-02, -8.526593545596990e-02, 0.000000000000000e+00, -8.419759467312020e-02, -1.047736152752027e-01, 0.000000000000000e+00, -8.283591459314923e-02, -1.040634072814488e-01, 0.000000000000000e+00, -8.610567812005897e-02, -9.916393320237459e-02, 0.000000000000000e+00, -9.792400459363991e-02, -1.021634261525377e-01, 0.000000000000000e+00, -1.009630956958398e-01, -1.021634261525377e-01, 0.000000000000000e+00, -8.670363427494016e-02, -3.955945122675147e-02, 0.000000000000000e+00, -3.456421210031576e-02, -4.761686695278867e-01, 0.000000000000000e+00, -4.739133195381520e-01, -2.612894411389101e-01, 0.000000000000000e+00, -3.964053449405867e-01, -2.151317359533400e-01, 0.000000000000000e+00, -2.816561169513266e-01, -3.639173808828901e-01, 0.000000000000000e+00, -3.674468920215225e-01, -3.639173808828904e-01, 0.000000000000000e+00, -2.646028001891396e-01, -1.240041207996512e-01, 0.000000000000000e+00, -1.247874429500752e-01, 6.046757822716681e+00, 0.000000000000000e+00, 5.902697883200525e+00, -3.586188073233096e+00, 0.000000000000000e+00, -3.465910515736226e+00, -4.090048839265457e-01, 0.000000000000000e+00, -4.401041046405848e-01, -2.286561862758747e+00, 0.000000000000000e+00, -2.484695706800287e+00, -2.286561862758748e+00, 0.000000000000000e+00, -2.484695706800288e+00, 1.024814707421634e+02, 0.000000000000000e+00, 9.470867679534682e+01, -1.013428772339206e+04, 0.000000000000000e+00, -1.006592085434797e+04, 4.498949219806846e+03, 0.000000000000000e+00, 4.093231527917931e+03, 1.019054584065609e+00, 0.000000000000000e+00, 9.482886889264186e-01, -2.449278724914617e+03, 0.000000000000000e+00, -1.568612042655848e+03, -2.449278724914620e+03, 0.000000000000000e+00, 1.725050174086370e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_15_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_15", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.886326889263338e-03, 1.886550288587383e-03, 1.886353229625636e-03, 1.886569376281027e-03, 1.886424126019209e-03, 1.886674661537717e-03, 1.886129127738363e-03, 2.775143467232532e-03, 1.886344112174349e-03, 2.775106311534734e-03, 2.775064659379062e-03, 2.775106311534734e-03, 1.317857134245702e-02, 3.214506597383370e-03, 1.318097745432758e-02, 1.317833287988358e-02, 1.322769633161282e-02, 1.323589613585041e-02, 1.320962069000395e-02, 1.320949923980148e-02, 1.317531876823741e-02, 1.325124509423682e-02, 3.211480338221399e-03, 1.325124509423682e-02, -2.317508999132502e-03, -2.051663210792290e-03, -2.390389625638300e-03, 3.435921085973453e-02, 2.883289819148404e-02, 2.813784608468958e-02, 3.058416730264607e-02, -2.817434968977434e-03, -1.856582680088309e-03, -3.660201295266029e-03, 3.505497011823800e-02, 2.555678670758636e-02, -1.322671855113437e-02, 7.799771295395602e-02, -1.337029905173475e-02, 8.401400346586724e-02, 1.161524834883731e-02, -2.942592401458653e-03, 1.896420688648454e-02, 2.321362024004840e-02, 6.096890555110308e-02, 7.606954897944651e-03, 6.096890555110317e-02, -1.756870774955349e-03, 4.368073314777176e-04, 4.654314504436782e-04, -1.491252430503648e-06, 5.033410730699489e-04, -1.216809840362795e-04, 2.200268537450024e-03, 2.237462365655191e-04, 2.211304120831198e-04, 3.792913071520857e-04, 2.816491743256848e-04, 3.792913071520857e-04, 2.816491743256869e-04, 1.140352777302333e-02, 1.140625275301682e-02, 1.140021284636395e-02, 1.140304933112762e-02, 1.140331706385247e-02, 1.140612340494753e-02, 1.140047360413100e-02, 1.140321414090900e-02, 8.896604694960312e-03, 1.140465324757038e-02, 1.140185755507578e-02, 8.898544878689092e-03, 2.028110930367934e-02, 2.034962244702173e-02, 2.078794958081012e-02, 2.083926467172008e-02, 1.979684583454173e-02, 2.000435751276531e-02, 2.026484550440564e-02, 2.047042247300581e-02, 2.091531636108660e-02, 3.369143632432326e-03, 2.091531636108660e-02, 2.066495733461729e-02, 9.441433451558612e-02, 4.454503678548669e-02, 9.311562868782362e-02, 9.314616830337352e-02, 8.787031796521108e-02, 9.291101733507749e-02, 9.873784342189776e-02, 9.865476217828871e-02, 9.395579863204873e-02, 4.587242302393692e-02, 9.395579863204871e-02, 9.635050116853611e-02, 8.094510461841647e-03, 8.222952010508695e-03, -8.725603451858802e-03, 3.251389706715800e-02, 6.717738142608547e-03, 7.748142361741909e-03, 2.987527150188410e-02, 2.989211344874227e-02, 1.351949425697456e-02, 2.062534485009077e-02, 1.351949425697454e-02, 2.062534485009084e-02, -6.094246876295068e-08, 1.425749927730056e-04, 2.096338232456708e-04, 1.997847301500716e-04, 4.210375233466618e-04, 4.673814528539792e-04, 4.183009556413813e-03, -6.842374233544741e-04, 1.863961817332971e-04, 4.574443046003747e-04, 1.863961817332966e-04, 4.574443046003678e-04, 9.809912977560015e-02, 9.767253761307461e-02, 1.001372976294291e-01, 9.969535822396230e-02, 8.998355887853904e-02, 8.982001267786624e-02, 9.117104128324016e-02, 9.844469629342963e-02, 9.058644402309579e-02, 9.039734710062888e-02, 9.058644402309579e-02, 9.874133413576212e-02, 1.010405185888260e-01, 1.006514008547039e-01, 1.060636147321393e-01, 3.965257174044293e-02, 1.113842018622550e-01, 5.987592567732950e-02, 1.104542870569953e-01, 1.100810833196571e-01, 1.116696762574892e-01, 1.113480354093753e-01, 1.116696762574891e-01, 6.916347079233359e-02, 8.809975536267979e-02, 5.712896648705337e-02, 5.001196210688220e-02, 5.065822005994500e-02, -8.125023493647129e-03, 7.368463672363623e-02, 1.589995740221861e-02, 1.123494418642404e-01, 9.857744288229381e-02, 9.935323376191146e-02, 9.857744288229399e-02, 2.315823406934902e-03, 1.028168280166994e-01, 1.046592148268205e-01, -1.210365417418384e-04, -1.210680977174750e-04, 2.690852658211493e-03, 2.879918720530649e-03, 1.364188212863112e-01, 1.478800896406179e-01, 6.973873281206763e-03, 9.066683247853535e-03, 6.973873281206806e-03, 9.066683247853499e-03, -1.765710463486965e-06, -1.936434401628139e-06, 6.037777511685187e-05, 6.038260502084346e-05, -8.768770136453818e-08, -1.117706618082361e-07, -1.430788730189927e-03, -1.672463490789408e-03, 2.837884479536035e-04, 4.266701403337735e-04, 2.837884479536057e-04, -6.661865122289010e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
