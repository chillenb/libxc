
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_modtpss_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_modtpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.225938895662722e+01, -2.225945082715633e+01, -2.225981553902624e+01, -2.225889701091676e+01, -2.225936546503687e+01, -2.225936546503687e+01, -3.444213112318816e+00, -3.444216826945676e+00, -3.444561867026789e+00, -3.446509385327748e+00, -3.445201344946864e+00, -3.445201344946864e+00, -6.693291488649566e-01, -6.691503443667497e-01, -6.670656081270024e-01, -6.733643917776888e-01, -6.745617404862074e-01, -6.745617404862074e-01, -2.078102302096511e-01, -2.085952825618967e-01, -7.663721747856107e-01, -1.797713181402218e-01, -2.039366917340301e-01, -2.039366917340300e-01, -1.010673035229274e-02, -1.064245053274330e-02, -5.786590587960592e-02, -5.829226325577783e-03, -8.135053371825128e-03, -8.135053371825129e-03, -5.452195024718599e+00, -5.453190634493523e+00, -5.452316098186245e+00, -5.453192448916511e+00, -5.452660695531256e+00, -5.452660695531256e+00, -2.081462602558199e+00, -2.095574789240599e+00, -2.078197200320755e+00, -2.090530634917118e+00, -2.090967318198165e+00, -2.090967318198165e+00, -5.932409093812639e-01, -6.121523967646689e-01, -5.420762237204979e-01, -5.366034877638547e-01, -6.023630525767989e-01, -6.023630525767989e-01, -1.394643460210287e-01, -2.261059218746401e-01, -1.305225972780543e-01, -1.812786761106381e+00, -1.546024101610193e-01, -1.546024101610193e-01, -4.500568624471341e-03, -5.698388238823999e-03, -4.363538846161179e-03, -9.120526178265548e-02, -5.481175257108967e-03, -5.481175257108968e-03, -5.821662033099071e-01, -5.977382290373984e-01, -5.946641452862396e-01, -5.905621958477016e-01, -5.928292562021141e-01, -5.928292562021141e-01, -5.462634218842921e-01, -5.179619121372896e-01, -5.375813723612356e-01, -5.553126378489556e-01, -5.464522609681949e-01, -5.464522609681949e-01, -6.392075149340188e-01, -2.664447600644743e-01, -2.984874951588986e-01, -3.604726086302671e-01, -3.258744472025430e-01, -3.258744472025430e-01, -4.718124894838185e-01, -5.540960763456304e-02, -7.474343963410883e-02, -3.429488137709576e-01, -1.124093391069611e-01, -1.124093391069612e-01, -1.424057548221880e-02, -1.523273147561057e-03, -3.203268814765891e-03, -1.064889926400004e-01, -5.033648221514402e-03, -5.033648221514398e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_modtpss_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_modtpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.755484930101006e+01, -2.755569539581737e+01, -2.755492602483154e+01, -2.755575104222473e+01, -2.755533161055142e+01, -2.755628734422955e+01, -2.755446966108915e+01, -2.755518750400496e+01, -2.755489036039095e+01, -2.755574430935078e+01, -2.755489036039095e+01, -2.755574430935078e+01, -4.184400575790877e+00, -4.184256706758183e+00, -4.184462130445177e+00, -4.184288583413306e+00, -4.185583183293583e+00, -4.185813357214520e+00, -4.185766790210379e+00, -4.185772988904558e+00, -4.183597862957405e+00, -4.186869720203639e+00, -4.183597862957405e+00, -4.186869720203639e+00, -7.770449791779976e-01, -7.834053307876417e-01, -7.746940177409444e-01, -7.825171902556355e-01, -7.421600508880051e-01, -7.310560187625691e-01, -7.440504272815471e-01, -7.479952104680175e-01, -7.940976073118099e-01, -6.890251193355438e-01, -7.940976073118099e-01, -6.890251193355438e-01, -1.790719940015724e-01, -1.871574400385890e-01, -1.807729606583404e-01, -1.910107687000605e-01, -9.040454737054329e-01, -9.525793865714013e-01, -1.628068663094629e-01, -1.643173263703932e-01, -1.865143333891908e-01, -1.500197641151788e-01, -1.865143333891906e-01, -1.500197641151787e-01, -1.301793288807306e-02, -1.383050836174143e-02, -1.363861396525686e-02, -1.460679054522913e-02, -7.295734978022261e-02, -7.666413593200133e-02, -7.833184013171672e-03, -7.702846276996732e-03, -1.161683875913130e-02, -6.614560168236589e-03, -1.161683875913131e-02, -6.614560168236591e-03, -6.717761487281718e+00, -6.716513771999096e+00, -6.717569965047304e+00, -6.716329554462412e+00, -6.717884547692718e+00, -6.716603704234663e+00, -6.717715868449544e+00, -6.716432049463074e+00, -6.717563192115377e+00, -6.716405424455827e+00, -6.717563192115377e+00, -6.716405424455827e+00, -2.390615345122727e+00, -2.392141471687778e+00, -2.422821866030366e+00, -2.423368096894449e+00, -2.364645655111298e+00, -2.373685416328780e+00, -2.393185704540130e+00, -2.402488325913573e+00, -2.426901436871266e+00, -2.411256974205803e+00, -2.426901436871266e+00, -2.411256974205803e+00, -7.237276492826474e-01, -7.228826697502211e-01, -7.876792679554179e-01, -7.882690991003977e-01, -6.425921973658409e-01, -6.716963577785298e-01, -6.828405741629193e-01, -7.057041680387039e-01, -7.564464717689241e-01, -7.128945490968360e-01, -7.564464717689241e-01, -7.128945490968361e-01, -1.541997962585693e-01, -1.543305423283608e-01, -1.964484806654089e-01, -1.968659970623987e-01, -1.452406749119258e-01, -1.492650079661267e-01, -2.379296399267492e+00, -2.378290398095947e+00, -1.567513198699458e-01, -1.501485396808656e-01, -1.567513198699458e-01, -1.501485396808656e-01, -5.877395379444064e-03, -6.108027580802020e-03, -7.536832736175773e-03, -7.650942944326069e-03, -5.634838950921752e-03, -5.966718594809896e-03, -1.113074933566730e-01, -1.120903915746499e-01, -5.756210959935597e-03, -7.901534754362637e-03, -5.756210959935597e-03, -7.901534754362638e-03, -7.304465848093803e-01, -7.333483811778938e-01, -7.297113802762848e-01, -7.325160983620977e-01, -7.286692540990570e-01, -7.314956697495522e-01, -7.285082701576794e-01, -7.313560434715018e-01, -7.284644911777247e-01, -7.313052289829817e-01, -7.284644911777247e-01, -7.313052289829818e-01, -7.173781181728179e-01, -7.196862550807429e-01, -6.311908374096762e-01, -6.344017293844237e-01, -6.637766202068233e-01, -6.667547449377988e-01, -6.817880569598048e-01, -6.840761196514648e-01, -6.734884745868002e-01, -6.762703789251256e-01, -6.734884745868001e-01, -6.762703789251258e-01, -8.247399330778339e-01, -8.264928498500496e-01, -2.317157931373830e-01, -2.328700021758639e-01, -2.836316818379511e-01, -2.880547190003731e-01, -4.178702209078740e-01, -4.201239626390892e-01, -3.520516088758304e-01, -3.523637231448556e-01, -3.520516088758304e-01, -3.523637231448556e-01, -5.599602361096337e-01, -5.663587374453105e-01, -7.182812437458133e-02, -7.228003381639132e-02, -9.366637459712986e-02, -9.625088966360197e-02, -4.040894377569508e-01, -4.176156187164493e-01, -1.279551696870570e-01, -1.287931244078954e-01, -1.279551696870570e-01, -1.287931244078954e-01, -1.859825493818960e-02, -1.926800203691722e-02, -2.028614574154607e-03, -2.033201304412345e-03, -4.127085260165513e-03, -4.389314812445647e-03, -1.234440133703406e-01, -1.248520688183889e-01, -5.451533917057562e-03, -7.243357326602137e-03, -5.451533917057557e-03, -7.243357326602129e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_modtpss_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_modtpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.664287838445174e-08, 0.000000000000000e+00, -2.664384511216542e-08, -2.664376178060690e-08, 0.000000000000000e+00, -2.664448628436194e-08, -2.664498278369202e-08, 0.000000000000000e+00, -2.664668660568522e-08, -2.663505639899941e-08, 0.000000000000000e+00, -2.663401565245387e-08, -2.664348912404705e-08, 0.000000000000000e+00, -2.663789789626361e-08, -2.664348912404705e-08, 0.000000000000000e+00, -2.663789789626361e-08, -2.398312788335824e-05, 0.000000000000000e+00, -2.398462511264632e-05, -2.398832237954632e-05, 0.000000000000000e+00, -2.398854544703797e-05, -2.409545684392799e-05, 0.000000000000000e+00, -2.411504844343903e-05, -2.402535806394706e-05, 0.000000000000000e+00, -2.402930608454123e-05, -2.398643585830646e-05, 0.000000000000000e+00, -2.412366022415431e-05, -2.398643585830646e-05, 0.000000000000000e+00, -2.412366022415431e-05, -1.079094681376605e-02, 0.000000000000000e+00, -1.065932495674702e-02, -1.085216084118256e-02, 0.000000000000000e+00, -1.067749928813630e-02, -1.155638560540304e-02, 0.000000000000000e+00, -1.180584114658316e-02, -1.150926441575900e-02, 0.000000000000000e+00, -1.148801198936773e-02, -1.019969546502362e-02, 0.000000000000000e+00, -1.194038227371626e-02, -1.019969546502362e-02, 0.000000000000000e+00, -1.194038227371626e-02, -1.525259260166471e+00, 0.000000000000000e+00, -1.369847983347094e+00, -1.515104797347746e+00, 0.000000000000000e+00, -1.328931826168734e+00, -4.313484174414086e-03, 0.000000000000000e+00, -3.530932225386277e-03, -2.121126589273743e+00, 0.000000000000000e+00, -2.048166111770245e+00, -1.311420168059644e+00, 0.000000000000000e+00, -2.758565957861379e+00, -1.311420168059644e+00, 0.000000000000000e+00, -2.758565957861379e+00, -4.276254703806457e+00, 0.000000000000000e+00, -4.234234282078734e+00, -4.506587637341458e+00, 0.000000000000000e+00, -4.484712391272168e+00, -2.597491953314894e+00, 0.000000000000000e+00, -2.623947292277459e+00, -3.912733986714487e+00, 0.000000000000000e+00, -3.806420352687266e+00, -4.267693432007051e+00, 0.000000000000000e+00, -1.082166194423741e+01, -4.267693432007071e+00, 0.000000000000000e+00, -1.082166194423741e+01, -1.181641493536556e-05, 0.000000000000000e+00, -1.182472005672619e-05, -1.193893929634401e-05, 0.000000000000000e+00, -1.194321506862108e-05, -1.182345380705050e-05, 0.000000000000000e+00, -1.182896877951858e-05, -1.192855063795208e-05, 0.000000000000000e+00, -1.193658156338330e-05, -1.187874056193030e-05, 0.000000000000000e+00, -1.188399041789705e-05, -1.187874056193030e-05, 0.000000000000000e+00, -1.188399041789705e-05, -1.223114318631118e-04, 0.000000000000000e+00, -1.218921078471874e-04, -1.178158892441573e-04, 0.000000000000000e+00, -1.175616710824924e-04, -1.207651616138390e-04, 0.000000000000000e+00, -1.208173262906687e-04, -1.166752604482637e-04, 0.000000000000000e+00, -1.166549807486667e-04, -1.212410891855767e-04, 0.000000000000000e+00, -1.197705826928659e-04, -1.212410891855767e-04, 0.000000000000000e+00, -1.197705826928659e-04, -3.795241098792974e-02, 0.000000000000000e+00, -3.853828911070250e-02, -4.634645901948886e-02, 0.000000000000000e+00, -4.793391435486363e-02, -4.421508165082100e-02, 0.000000000000000e+00, -4.318417768859566e-02, -4.000709781326695e-02, 0.000000000000000e+00, -4.294450693984801e-02, -3.724250170349926e-02, 0.000000000000000e+00, -4.284440220575934e-02, -3.724250170349926e-02, 0.000000000000000e+00, -4.284440220575933e-02, -2.114160052193295e+00, 0.000000000000000e+00, -2.159088624295258e+00, -9.726652803789365e-01, 0.000000000000000e+00, -9.635452064668224e-01, -2.330256024597551e+00, 0.000000000000000e+00, -2.294238377322849e+00, -3.039771618019286e-04, 0.000000000000000e+00, -3.045392755194493e-04, -2.440930528907360e+00, 0.000000000000000e+00, -3.014995160588383e+00, -2.440930528907361e+00, 0.000000000000000e+00, -3.014995160588383e+00, -5.491726317629397e+00, 0.000000000000000e+00, -4.753290037485343e+00, -4.729754426292121e+00, 0.000000000000000e+00, -4.366847971444436e+00, -2.694631528903796e+01, 0.000000000000000e+00, -2.998019419894379e+01, -3.211453451944030e+00, 0.000000000000000e+00, -3.091797185859558e+00, -1.339720505006039e+01, 0.000000000000000e+00, -1.316588585859567e+01, -1.339720505006034e+01, 0.000000000000000e+00, -1.316588585859567e+01, -3.233091088566941e-01, 0.000000000000000e+00, -3.270941329071106e-01, -1.748351852971665e-01, 0.000000000000000e+00, -1.760719882574968e-01, -2.134214176801229e-01, 0.000000000000000e+00, -2.154710100101385e-01, -2.564794680315457e-01, 0.000000000000000e+00, -2.584850700269377e-01, -2.335068625485948e-01, 0.000000000000000e+00, -2.355384427720845e-01, -2.335068625485948e-01, 0.000000000000000e+00, -2.355384427720845e-01, -1.981503219273143e-01, 0.000000000000000e+00, -2.032782727032571e-01, -3.561047177376001e-02, 0.000000000000000e+00, -3.539774073522985e-02, -4.770434035382155e-02, 0.000000000000000e+00, -4.792923867917148e-02, -8.422434483967239e-02, 0.000000000000000e+00, -8.394662581727756e-02, -6.181994456341558e-02, 0.000000000000000e+00, -6.151177247598055e-02, -6.181994456341561e-02, 0.000000000000000e+00, -6.151177247598055e-02, -3.132487723512974e-02, 0.000000000000000e+00, -3.296839545128302e-02, -5.387747077882959e-01, 0.000000000000000e+00, -5.315150198422718e-01, -3.264966266062309e-01, 0.000000000000000e+00, -3.169216430131911e-01, -1.629906190099417e-01, 0.000000000000000e+00, -1.609361207399935e-01, -2.114931454994904e-01, 0.000000000000000e+00, -2.123692751605988e-01, -2.114931454994905e-01, 0.000000000000000e+00, -2.123692751605989e-01, -5.730730859127322e-02, 0.000000000000000e+00, -5.607689589770281e-02, -2.368739862851625e+00, 0.000000000000000e+00, -2.372735066262384e+00, -2.398592814582047e+00, 0.000000000000000e+00, -2.462216582229021e+00, -2.447294969591697e-01, 0.000000000000000e+00, -2.322786363669699e-01, -3.365090991737048e+00, 0.000000000000000e+00, -4.046753181390931e+00, -3.365090991737048e+00, 0.000000000000000e+00, -4.046753181390937e+00, -3.393312738188930e+00, 0.000000000000000e+00, -3.464960381381986e+00, -1.689205788997171e+01, 0.000000000000000e+00, -2.992249073792978e+01, -1.042731896591647e+01, 0.000000000000000e+00, -1.110104654280748e+01, -3.738839452732497e+00, 0.000000000000000e+00, -3.674021054517040e+00, -2.762549509279581e+01, 0.000000000000000e+00, -1.366582425312466e+01, -2.762549509279588e+01, 0.000000000000000e+00, -1.366582425312473e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_modtpss_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_modtpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.839407951350413e-03, 1.840109124648249e-03, 1.839497110092540e-03, 1.840173803005356e-03, 1.839752778102586e-03, 1.840548650240983e-03, 1.838753544747904e-03, 1.839272083122054e-03, 1.839465272834489e-03, 1.839759916110576e-03, 1.839465272834489e-03, 1.839759916110576e-03, 2.568524595477714e-03, 2.564156487191594e-03, 2.569876955180077e-03, 2.564716920104257e-03, 2.592529174563819e-03, 2.595647927312946e-03, 2.599031350372739e-03, 2.595796545708117e-03, 2.566267133164029e-03, 2.616528856192903e-03, 2.566267133164029e-03, 2.616528856192903e-03, 3.652718818464260e-03, 3.633177165446690e-03, 3.669705073046690e-03, 3.628501765333760e-03, 3.600420063158796e-03, 3.657347807824298e-03, 4.067457511953596e-03, 4.171919305231342e-03, 3.317584070524930e-03, 3.334761951667591e-03, 3.317584070524930e-03, 3.334761951667591e-03, 3.138977168350762e-03, 3.422381185191052e-03, 3.659976650330460e-03, 4.139064833968993e-03, 5.511029275624012e-04, 5.126772496623374e-04, 4.050623576553338e-04, 4.613182764922528e-04, 3.271378171045615e-03, 5.800084504882605e-05, 3.271378171045610e-03, 5.800084504882624e-05, 6.310270120449250e-14, 4.679231473251960e-13, 7.789897103593828e-14, 2.087429296035528e-13, 1.655891656017618e-08, 2.283378739205021e-08, 4.338565458344791e-15, 3.173577482018835e-15, 2.862694820909348e-14, 1.628949867291917e-14, 2.862694820909427e-14, 1.628949867291921e-14, 1.308584766436132e-02, 1.309242641100354e-02, 1.323164418562823e-02, 1.323343141474803e-02, 1.309697046245136e-02, 1.309946194422266e-02, 1.322196244005915e-02, 1.322744364851148e-02, 1.315791695724720e-02, 1.316260734958045e-02, 1.315791695724720e-02, 1.316260734958045e-02, 2.756662302184221e-03, 2.754290689290671e-03, 2.841422940494316e-03, 2.837513046720466e-03, 2.472412583758252e-03, 2.551796732334173e-03, 2.535058051257167e-03, 2.615635711374684e-03, 3.026480293727765e-03, 2.828951658423041e-03, 3.026480293727765e-03, 2.828951658423041e-03, 3.111790907762855e-02, 3.199165369487011e-02, 2.906406647168359e-02, 3.048588272479157e-02, 1.851343086497127e-02, 2.379135919699908e-02, 1.006524686184277e-02, 1.484935369844003e-02, 3.720713440593981e-02, 3.243482768689573e-02, 3.720713440593982e-02, 3.243482768689573e-02, 1.876222094468670e-05, 2.135196532917465e-05, 9.990895839307036e-04, 1.022908858324068e-03, 1.095358874432884e-05, 1.538062113671933e-05, 3.279356077402271e-03, 3.280487898920768e-03, 8.917397128627821e-05, 2.862287489474745e-04, 8.917397128627834e-05, 2.862287489474753e-04, 2.352325194477482e-15, 2.293430417947067e-15, 7.987186236119572e-15, 7.963679813224957e-15, 2.108961637870195e-14, 4.067430867472520e-14, 1.395819335379629e-06, 1.100500692978893e-06, 1.136723891656996e-14, 1.413228610309584e-14, 1.136723891656990e-14, 1.413228610309583e-14, 2.847705404711908e-01, 2.914399419767179e-01, 2.091551935385708e-01, 2.136207523245867e-01, 2.413305499998353e-01, 2.470109491715973e-01, 2.688586678948617e-01, 2.748239939945423e-01, 2.553317269778593e-01, 2.611783108073529e-01, 2.553317269778593e-01, 2.611783108073528e-01, 7.197638664488602e-02, 7.577457996368026e-02, 2.217392589054359e-02, 2.260610976375561e-02, 4.101367606266835e-02, 4.200577521908224e-02, 8.090467659390300e-02, 8.152627027087408e-02, 5.684706429075197e-02, 5.757482047595180e-02, 5.684706429075197e-02, 5.757482047595179e-02, 2.027881328923882e-02, 2.202555321101364e-02, 2.064235756034169e-03, 2.131876050036330e-03, 5.202802539488442e-03, 5.553312222584801e-03, 2.080104565552912e-02, 2.087723181716257e-02, 1.176255057130529e-02, 1.194977503197480e-02, 1.176255057130529e-02, 1.194977503197481e-02, 2.080383803928475e-02, 2.165982842234730e-02, 1.042637049395310e-08, 9.993017126199480e-09, 1.135845422882217e-07, 1.492824427852299e-07, 3.014332602214914e-02, 3.629286985311347e-02, 6.869288135763329e-06, 1.628030952389774e-05, 6.869288135763343e-06, 1.628030952389779e-05, 2.414174012045648e-12, 3.347094117136840e-12, 9.596374846117814e-18, 1.786998489430854e-17, 1.849606767189630e-16, 3.347048082864239e-16, 6.323673129684395e-06, 1.568876615083233e-05, 3.511215697066656e-14, 8.282386554871008e-15, 3.511215697066648e-14, 8.282386554871035e-15])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
