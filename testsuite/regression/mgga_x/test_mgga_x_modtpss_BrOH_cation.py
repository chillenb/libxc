
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_modtpss_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_modtpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.990391377516073e+01, -1.990397421110901e+01, -1.990425804580818e+01, -2.114598139159003e+01, -2.114644483831561e+01, -2.238913300153790e+01, -3.469992384056718e+00, -3.705009363526500e+00, -3.704207225244104e+00, -3.704865429057329e+00, -3.704412490529440e+00, -3.469499792215281e+00, -6.332811782635157e-01, -6.964663389695938e-01, -7.556486464449941e-01, -6.884055272583398e-01, -6.221039504479020e-01, -7.562467471446742e-01, -1.878669443123025e-01, -1.897827200496475e-01, -8.558082648294707e-01, -1.860359008100555e-01, -2.086735805371289e-01, -2.011394118124624e-01, -1.010677399649493e-02, -8.685647472343709e-03, -4.710531758856349e-02, -5.829334173997629e-03, -8.135193551459715e-03, -8.135193551459715e-03, -5.455737854816774e+00, -5.456727935993589e+00, -5.455787066767000e+00, -5.456661063007875e+00, -5.160981203586987e+00, -5.161267569655180e+00, -2.107907065795529e+00, -2.117880679123715e+00, -2.101169217804760e+00, -2.109635679904533e+00, -1.977822382132435e+00, -2.116761431300409e+00, -5.811568976939960e-01, -6.680497476327889e-01, -5.759679838527011e-01, -5.939207386403739e-01, -5.942065946468378e-01, -6.272624911802644e-01, -1.414222270394343e-01, -1.976766926081154e-01, -1.322222447846457e-01, -2.015826371938280e+00, -1.569049782725662e-01, -1.569049782725662e-01, -3.615165292607019e-03, -5.698615942414741e-03, -4.363679450522748e-03, -7.299233350879464e-02, -5.481307566303988e-03, -5.481307566303989e-03, -6.177178379266668e-01, -6.142276997581514e-01, -5.511075003545892e-01, -5.846513966039473e-01, -5.517262688886089e-01, -5.840886179830467e-01, -6.009860376535199e-01, -4.882487738817867e-01, -5.099733563641472e-01, -5.645283003180002e-01, -5.525641957558107e-01, -5.211927532904403e-01, -6.613301953002069e-01, -2.689402057744612e-01, -2.768398366604050e-01, -3.500438029921494e-01, -3.338038432758453e-01, -3.089851653155399e-01, -4.820884508932553e-01, -3.217920495761773e-02, -7.496859001173997e-02, -3.561249017922609e-01, -1.134934926658406e-01, -1.134934926658406e-01, -8.177267155347655e-03, -1.523299899862429e-03, -1.837800925952907e-03, -6.517951021820359e-02, -5.033784597754654e-03, -3.409455480923109e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_modtpss_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_modtpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.680343287462245e+01, -2.680344016391342e+01, -2.680352560701599e+01, -2.680350751920648e+01, -2.680383706052253e+01, -2.680394964362816e+01, -2.680278981870854e+01, -2.784123271216017e+01, -2.680348759406667e+01, -2.784165267570856e+01, -2.784205175551087e+01, -2.784165267570856e+01, -4.382824112878038e+00, -4.242629838779562e+00, -4.383002158351458e+00, -4.382742492821816e+00, -4.386428704501784e+00, -4.387085088328138e+00, -4.385555769177699e+00, -4.385621599309896e+00, -4.381724794489664e+00, -4.388778222670486e+00, -4.241919202376445e+00, -4.388778222670486e+00, -8.224737502302516e-01, -8.248305361958845e-01, -8.214564433317902e-01, -7.444137666219681e-01, -7.081910014952019e-01, -7.012955065497808e-01, -7.154641614336197e-01, -8.107764622012308e-01, -8.305802613933150e-01, -7.865106381388448e-01, -7.536873441735588e-01, -6.784980204503858e-01, -2.125518506515689e-01, -1.876695840893716e-01, -2.148959582440845e-01, -1.914079741091964e-01, -8.347040221109241e-01, -9.922298839490118e-01, -1.818637609562389e-01, -1.754802249707799e-01, -1.896081392257864e-01, -1.684401798987528e-01, -1.896081392257863e-01, -1.214892283790342e-01, -1.301817061814812e-02, -1.383062988438409e-02, -7.837375281264953e-03, -1.460711188716830e-02, -4.356371086460694e-02, -7.700742138494887e-02, -7.833661219788797e-03, -7.703229293380703e-03, -1.161734513730904e-02, -6.615413880755489e-03, -1.161734513730904e-02, -6.615413880755489e-03, -6.724245451916924e+00, -6.722625407871404e+00, -6.724004274600920e+00, -6.722391996872773e+00, -6.724217852212782e+00, -6.722607052873571e+00, -6.724011803259285e+00, -6.722395911858278e+00, -6.542885495228325e+00, -6.722511089169227e+00, -6.724133907516033e+00, -6.541288890321748e+00, -2.394723883628797e+00, -2.396248173699601e+00, -2.428395721463275e+00, -2.428836946320803e+00, -2.365050834344298e+00, -2.375087383878931e+00, -2.394868767118080e+00, -2.405092363706898e+00, -2.435497073540882e+00, -2.388409167287033e+00, -2.435497073540882e+00, -2.416600428326435e+00, -7.661713645991232e-01, -7.281853661773873e-01, -8.299126284043448e-01, -8.295257406524653e-01, -6.745743282306359e-01, -7.117705502961106e-01, -7.225844598357125e-01, -7.494262038952073e-01, -7.994106234577576e-01, -7.218997254056609e-01, -7.994106234577578e-01, -7.578963613051055e-01, -1.604626069449416e-01, -1.613596876498305e-01, -2.185770450021086e-01, -2.021136387263092e-01, -1.512708430973011e-01, -1.550870676612708e-01, -2.511948424063406e+00, -2.510834234099843e+00, -1.636332609251222e-01, -1.564074442632100e-01, -1.636332609251221e-01, -1.564074442632100e-01, -3.372898068601349e-03, -6.108763442895344e-03, -7.537704151710686e-03, -7.651891052273744e-03, -5.635319338654949e-03, -5.967349726627471e-03, -1.140279543206996e-01, -7.287237426076942e-02, -5.757588012738670e-03, -7.901736461022605e-03, -5.757588012738672e-03, -7.901736461022607e-03, -7.387929895284526e-01, -7.413640469392871e-01, -7.435916835563431e-01, -7.461399718034851e-01, -7.363729307989975e-01, -7.392355634866835e-01, -7.375256424232207e-01, -7.432299298513412e-01, -7.369500300597750e-01, -7.398021319787411e-01, -7.369500300597751e-01, -7.439379899569502e-01, -7.202787851689556e-01, -7.223440633846423e-01, -6.346147380652698e-01, -6.085248255671443e-01, -6.730213721896746e-01, -6.450668837727702e-01, -6.995015786644306e-01, -7.018189111868095e-01, -6.876228920360464e-01, -6.900840525750144e-01, -6.876228920360464e-01, -6.613351032544494e-01, -8.727535310830120e-01, -8.385480030140464e-01, -2.335140317686401e-01, -2.346520798210154e-01, -3.234835382695789e-01, -2.871352831406365e-01, -4.210613710773398e-01, -4.253634554794435e-01, -3.495527194360127e-01, -3.499138108627288e-01, -3.495527194360127e-01, -3.682638064686961e-01, -5.708923187555243e-01, -5.776470646357216e-01, -4.274903677617903e-02, -4.304147865022525e-02, -9.450493629133237e-02, -9.715154639559151e-02, -4.183381096595682e-01, -4.327100065741996e-01, -1.314118963391677e-01, -1.328829711061037e-01, -1.314118963391677e-01, -1.328829711061037e-01, -1.069860921541458e-02, -1.108646502234328e-02, -2.028696575505012e-03, -2.033333145228765e-03, -2.368172093979974e-03, -2.518741249047828e-03, -8.608921620557378e-02, -8.747871808585103e-02, -5.452978453578127e-03, -7.243519524775338e-03, -5.452978453578121e-03, -4.158790303702353e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_modtpss_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_modtpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.375405037863787e-08, 0.000000000000000e+00, -1.375594226038979e-08, -1.375413987955030e-08, 0.000000000000000e+00, -1.375600695887096e-08, -1.375429094787379e-08, 0.000000000000000e+00, -1.375626136359765e-08, -1.375330157052091e-08, 0.000000000000000e+00, -2.451300470045730e-08, -1.375411749407503e-08, 0.000000000000000e+00, -2.451790273262170e-08, -2.451395234651093e-08, 0.000000000000000e+00, -2.451790273262170e-08, -1.109064261886307e-05, 0.000000000000000e+00, -9.685405138120719e-06, -1.109179597830444e-05, 0.000000000000000e+00, -1.109098276178921e-05, -1.111477113043604e-05, 0.000000000000000e+00, -1.111848790018841e-05, -1.110259430253770e-05, 0.000000000000000e+00, -1.110200550678846e-05, -1.109518913650168e-05, 0.000000000000000e+00, -1.112223336696249e-05, -9.687583853393006e-06, 0.000000000000000e+00, -1.112223336696249e-05, -3.785951614306310e-03, 0.000000000000000e+00, -3.805298749854254e-03, -3.786707692954734e-03, 0.000000000000000e+00, -7.212501164309354e-03, -7.702336687392712e-03, 0.000000000000000e+00, -7.859675424631207e-03, -7.691952516123367e-03, 0.000000000000000e+00, -3.873199180574084e-03, -3.741036089449722e-03, 0.000000000000000e+00, -3.973090361007162e-03, -7.005099485366412e-03, 0.000000000000000e+00, -8.386448504881103e-03, -6.433093964818809e-01, 0.000000000000000e+00, -1.327602214462373e+00, -6.294083693362019e-01, 0.000000000000000e+00, -1.277593985543293e+00, -3.030749383023959e-03, 0.000000000000000e+00, -1.415073272804774e-03, -1.401649865082981e+00, 0.000000000000000e+00, -1.614717373070408e+00, -1.178045426841412e+00, 0.000000000000000e+00, -1.280038651843260e+00, -1.178045426841412e+00, 0.000000000000000e+00, -3.317385210925499e+00, -4.173590754945828e+00, 0.000000000000000e+00, -4.190584996473359e+00, -1.589681209039131e+05, 0.000000000000000e+00, -4.384199962074122e+00, -1.713025280487981e+02, 0.000000000000000e+00, -2.138136322946441e+00, -3.053027102090740e+00, 0.000000000000000e+00, -3.084266479393614e+00, -3.963684402966059e+00, 0.000000000000000e+00, -6.781653659456334e+00, -3.963684402966059e+00, 0.000000000000000e+00, -6.781653659456343e+00, -1.174963410541376e-05, 0.000000000000000e+00, -1.176171675030570e-05, -1.187242627875626e-05, 0.000000000000000e+00, -1.188049695799834e-05, -1.175821569750828e-05, 0.000000000000000e+00, -1.176707718031035e-05, -1.186349287696162e-05, 0.000000000000000e+00, -1.187489865111559e-05, -4.863625900001751e-06, 0.000000000000000e+00, -1.182093599393139e-05, -1.181093553814466e-05, 0.000000000000000e+00, -4.868080271931553e-06, -1.051096475737925e-04, 0.000000000000000e+00, -1.051926021283650e-04, -1.027273677697861e-04, 0.000000000000000e+00, -1.028916891743119e-04, -1.072477868362261e-04, 0.000000000000000e+00, -1.066928327093344e-04, -1.050196037185014e-04, 0.000000000000000e+00, -1.044925316150486e-04, -1.023470070456784e-04, 0.000000000000000e+00, -8.103406894022669e-05, -1.023470070456784e-04, 0.000000000000000e+00, -1.037687541314520e-04, -1.952668129781406e-02, 0.000000000000000e+00, -1.766028999850450e-02, -3.282552136486500e-02, 0.000000000000000e+00, -3.471974788815565e-02, -2.041136269881769e-02, 0.000000000000000e+00, -1.976817876489971e-02, -2.324964411833986e-02, 0.000000000000000e+00, -2.402770667286171e-02, -2.086866946031051e-02, 0.000000000000000e+00, -1.853413103849218e-02, -2.086866946031052e-02, 0.000000000000000e+00, -2.137537693634801e-02, -1.570406787107046e+00, 0.000000000000000e+00, -1.560527367648246e+00, -4.732348099331094e-01, 0.000000000000000e+00, -8.761099308604041e-01, -1.618448225805355e+00, 0.000000000000000e+00, -1.693261379459025e+00, -2.124790901884676e-04, 0.000000000000000e+00, -2.130759610455224e-04, -1.961347853832631e+00, 0.000000000000000e+00, -2.551887508242673e+00, -1.961347853832632e+00, 0.000000000000000e+00, -2.551887508242675e+00, -4.628654794933402e+06, 0.000000000000000e+00, -2.042942561932873e+00, -2.895840732857661e+00, 0.000000000000000e+00, -2.552532157809595e+00, -2.085942133457620e+01, 0.000000000000000e+00, -2.290028290443225e+01, -2.134179370609331e+00, 0.000000000000000e+00, -2.325758675327302e+01, -3.928765476952855e+00, 0.000000000000000e+00, -1.248610605934586e+01, -3.928765476952853e+00, 0.000000000000000e+00, -1.248610605934586e+01, -3.573697389462229e-01, 0.000000000000000e+00, -3.634452369908264e-01, -1.640733284712205e-01, 0.000000000000000e+00, -1.658033911388912e-01, -5.539701267426201e-02, 0.000000000000000e+00, -5.567869271801498e-02, -6.504911063307080e-02, 0.000000000000000e+00, -2.590951989455456e-01, -5.973907495875413e-02, 0.000000000000000e+00, -6.003886886060223e-02, -5.973907495875413e-02, 0.000000000000000e+00, -2.310773169478926e-01, -3.448896738077750e-01, 0.000000000000000e+00, -3.519414279393605e-01, -3.258958462660076e-02, 0.000000000000000e+00, -3.021299095222324e-02, -4.085641611419719e-02, 0.000000000000000e+00, -3.233584328746896e-02, -6.931844539825446e-02, 0.000000000000000e+00, -6.919472368458934e-02, -5.095828216025494e-02, 0.000000000000000e+00, -5.104676082757301e-02, -5.095828216025498e-02, 0.000000000000000e+00, -3.351245379513779e-02, -2.027848162514698e-02, 0.000000000000000e+00, -1.354692687977849e-02, -5.134320115093164e-01, 0.000000000000000e+00, -5.059413459790669e-01, -1.464482778904000e-01, 0.000000000000000e+00, -2.908059609385840e-01, -8.018805536639045e-02, 0.000000000000000e+00, -1.041984537544272e-01, -1.801737702509503e-01, 0.000000000000000e+00, -1.805146431065671e-01, -1.801737702509505e-01, 0.000000000000000e+00, -1.099825613886751e-01, -3.929422375664284e-02, 0.000000000000000e+00, -3.898698527303857e-02, -1.846729442331177e+02, 0.000000000000000e+00, -1.797235277832816e+02, -1.821474165423765e+00, 0.000000000000000e+00, -1.890354452480386e+00, -1.317488147527542e-01, 0.000000000000000e+00, -1.355314960949529e-01, -2.576324170254571e+00, 0.000000000000000e+00, -3.148290913832528e+00, -2.576324170254570e+00, 0.000000000000000e+00, -3.148290913832530e+00, -4.579810664237220e+04, 0.000000000000000e+00, -3.972238062950614e+04, -3.328007769125379e+00, 0.000000000000000e+00, -3.313375203976687e+00, -1.904649349334434e+07, 0.000000000000000e+00, -1.488494071630866e+07, -1.257574579333043e+01, 0.000000000000000e+00, -1.194772397284587e+01, -1.014112967793067e+01, 0.000000000000000e+00, -1.294284988642789e+01, -1.014112967793069e+01, 0.000000000000000e+00, -2.003613634186080e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_modtpss_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_modtpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.552941764331086e-04, 1.553264930670136e-04, 1.552983892909297e-04, 1.553295459531124e-04, 1.553099984338776e-04, 1.553466927600447e-04, 1.552627749804251e-04, 1.854336536794221e-03, 1.552969051773238e-04, 1.854849445098450e-03, 1.854607016444929e-03, 1.854849445098450e-03, 1.732241839415501e-03, -5.307793282169055e-04, 1.733332654388939e-03, 1.732083170476122e-03, 1.754681149574071e-03, 1.758511078280719e-03, 1.746741517269321e-03, 1.746745959617964e-03, 1.730090718973043e-03, 1.766093364333349e-03, -5.312573967003417e-04, 1.766093364333349e-03, -1.932551212611406e-03, -2.022212770953941e-03, -1.907558899976996e-03, 1.798089544405834e-03, 1.277765674161135e-03, 1.217016124173262e-03, 1.424588126988336e-03, -1.760626211686063e-03, -2.069636816706464e-03, -1.290809578402624e-03, 1.881192677605657e-03, 1.009595258245269e-03, -2.614767971174270e-03, 2.740101850453601e-03, -2.845396353190218e-03, 3.149799489173642e-03, 3.048022362391680e-04, -6.756851490556520e-04, 2.059391540561532e-04, 2.956503497334825e-04, 1.816328243380606e-03, 2.815972200434920e-05, 1.816328243380604e-03, -9.553298294149855e-05, 1.257157741445322e-10, 1.713786670930048e-10, -6.165232486226470e-08, 2.412971756082747e-10, -5.233692915122582e-06, 4.135180291306757e-07, 6.171343354356065e-12, 5.761312045012284e-12, 6.573147967574138e-11, 8.776397428794862e-12, 6.573147967574138e-11, 8.776397428794515e-12, 1.312994751630815e-02, 1.313401957067151e-02, 1.327662926101612e-02, 1.327580353269954e-02, 1.314012813252947e-02, 1.314036685743616e-02, 1.326589138584547e-02, 1.326907406505023e-02, 7.818535198944901e-04, 1.320471803775942e-02, 1.320322991591032e-02, 7.820205306940467e-04, 2.000406275967630e-03, 2.018455051533203e-03, 2.167892143971748e-03, 2.181862004301778e-03, 1.858132820844448e-03, 1.914599841068470e-03, 1.996736743224743e-03, 2.058223799036427e-03, 2.210992749542539e-03, -1.111685009120792e-03, 2.210992749542539e-03, 2.120949408286259e-03, 2.548292539973528e-02, 1.310973577905514e-03, 6.620257228911042e-02, 7.034544402445393e-02, 1.218759898801224e-02, 1.713257465721899e-02, 2.469638718290624e-02, 3.083054033233634e-02, 3.375822409391479e-02, 1.506538901738678e-03, 3.375822409391479e-02, 2.757538669606910e-02, 3.045836533776198e-05, 3.174147861674560e-05, -1.010256942926096e-03, 6.309844928029979e-04, 1.868510800784479e-05, 2.653609066992874e-05, 1.064126045428227e-02, 1.066015718400252e-02, 9.312635972018822e-05, 2.097260213360907e-04, 9.312635972018825e-05, 2.097260213360913e-04, -2.515295280612425e-09, 9.728987670836333e-13, 4.701224785185110e-12, 4.193944104020185e-12, 2.125138278325846e-11, 3.256610767936937e-11, 4.138189551705067e-06, -3.213330466839065e-05, 1.930316514795329e-12, 5.343890881603182e-11, 1.930316514795245e-12, 5.343890881597495e-11, 5.770523589113424e-01, 5.936873273658434e-01, 2.606500993910724e-01, 2.664842521198016e-01, 7.770601375195842e-03, 7.748398622941251e-03, 7.809532204781529e-03, 4.207388681559794e-01, 7.792056049999684e-03, 7.768074811866926e-03, 7.792056049999684e-03, 3.743706944697077e-01, 5.133053131657827e-01, 5.289996278303781e-01, 2.075071052253361e-02, -1.059628295781080e-03, 3.924823085880693e-02, 3.331342882063361e-03, 8.429930926559305e-02, 8.509092975179487e-02, 5.596632035367811e-02, 5.682240255816821e-02, 5.596632035367813e-02, 5.161503336056346e-03, 4.578487655703774e-02, 4.486824626146768e-03, 1.500690813742953e-03, 1.539215511632522e-03, -3.817342428739732e-03, 3.349621425026197e-03, -6.358275600470665e-03, 1.083779605216338e-02, 6.622124789261941e-03, 6.729592249615592e-03, 6.622124789261944e-03, -6.171297370433469e-03, 1.396750992176601e-02, 1.516452514759620e-02, -5.203358532737745e-06, -5.205477369600173e-06, 1.000954497132225e-06, 1.251010860179470e-06, 1.751156262327731e-02, 2.471580705791843e-02, 1.699961543961142e-05, 3.115181636036760e-05, 1.699961543961150e-05, 3.115181636036755e-05, -7.303752247875026e-08, -8.011244158602191e-08, 8.162395028233503e-15, 8.201710531128185e-15, -3.619163373365160e-09, -4.613342941488077e-09, -7.258203657012515e-05, -8.651110951634446e-05, 6.104243872529163e-12, 3.648173673046075e-11, 6.104243872546343e-12, -2.751456230995746e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
