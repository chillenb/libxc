
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_br89_explicit_1_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89_explicit_1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.880821593326787e+01, -1.880824652127811e+01, -1.880846564864462e+01, -1.880796364183201e+01, -1.880823134752302e+01, -1.880823134752302e+01, -3.542639134139422e+00, -3.542595915849623e+00, -3.541522808778319e+00, -3.543993995314993e+00, -3.542629804684880e+00, -3.542629804684880e+00, -7.489333119077832e-01, -7.493025691491053e-01, -7.607580483150800e-01, -7.629293029739297e-01, -7.490470304534783e-01, -7.490470304534783e-01, -2.414222373935612e-01, -2.415876017784501e-01, -8.617095669369208e-01, -2.150957205241091e-01, -2.414058512816457e-01, -2.414058512816457e-01, -7.686079856275566e-02, -7.759853292088945e-02, -1.343049298806185e-01, -7.218004436822552e-02, -7.692156104780970e-02, -7.692156104780973e-02, -9.163322130281538e+00, -6.626128086747237e+00, -3.815495105926812e+00, -9.966574300965766e+00, -4.290317350085702e+00, -6.008885795583152e+00, -1.429807633029762e+00, -2.631978037375154e+00, -2.333199143052115e+00, -2.351393106640126e+00, -2.338554166010067e+00, -2.073918918404532e+00, -1.238705500270398e+00, -9.804273264012533e-01, -1.060489028941626e+00, -5.959507777584790e-01, -6.569980119799212e-01, -7.010499049609267e-01, -7.122513490834340e-02, -4.216957283079589e-01, -7.006940806120092e-02, -2.023094551341173e+00, -1.841933537083231e-01, -1.620579051710513e-01, -1.480059769029898e-01, -1.896446451936192e+00, -2.948498094456405e-03, -4.423215681098013e-02, -1.004977486536182e-01, -3.584422243536522e-03, -3.066652599254591e+01, -4.350030633298259e-01, -4.358380680879205e-01, -4.612783915512202e+00, -4.361631667378504e-01, -8.185473809609849e+01, -4.233001018401676e-01, -5.560887367248134e-01, -9.624741522445798e-01, -4.447654387132811e-01, -6.275883020212706e-01, -1.212483762016307e+00, -1.388782716449126e+00, -1.688587218102308e-01, -2.004829272327689e-01, -2.578273705803134e-01, -4.500908353499939e-01, -4.075134643555665e-01, -5.098685327517098e-01, -2.409341263634933e-01, -1.635318992782257e-01, -3.606858438349581e-01, -5.762229124285279e-02, -1.506144123880976e-01, -8.717529228375728e-03, -2.134289855676189e-01, -2.045987425553536e-03, -5.681189590823725e-02, -3.046376263685827e-03, -3.046284116956332e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_br89_explicit_1_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89_explicit_1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.805976318121276e+01, -2.805983600055366e+01, -2.806023573913495e+01, -2.805904235387217e+01, -2.805980092799949e+01, -2.805980092799949e+01, -4.530921568611297e+00, -4.530991548353624e+00, -4.533109663478611e+00, -4.530449036072590e+00, -4.530977319947354e+00, -4.530977319947354e+00, -8.414725154481703e-01, -8.403166446534931e-01, -8.126149606753994e-01, -8.178248894716262e-01, -8.410433879912652e-01, -8.410433879912652e-01, -2.298055567038670e-01, -2.323654674303700e-01, -1.022843952122449e+00, -1.772139704301626e-01, -2.305384944698075e-01, -2.305384944698076e-01, -3.719010043270893e-02, -3.817110678085670e-02, -7.835556087580900e-02, -2.543897282586972e-02, -3.785415259048148e-02, -3.785415259048154e-02, -8.657427830865879e+00, -7.268778262465119e+00, -5.111478251770945e+00, -9.113582215373832e+00, -6.373383981520801e+00, -7.028451511319958e+00, -1.909910094661733e+00, -2.684962667957175e+00, -2.469809947614462e+00, -2.491211609857994e+00, -2.504968354151904e+00, -2.353393429479941e+00, -1.086328600027739e+00, -9.786365404738684e-01, -9.648506956232689e-01, -7.784133863050808e-01, -7.966743772990147e-01, -8.084903658175956e-01, -9.537413020991380e-02, -3.470972873796890e-01, -9.349164078014655e-02, -2.609679595682120e+00, -1.404741549827971e-01, -1.119888406134652e-01, -9.071726602533445e-02, -1.291514625414564e+00, -3.931330862498470e-03, -5.909944958135346e-02, -5.271924183150625e-02, -4.779237970743244e-03, -2.101144497767741e+01, -5.800075403025458e-01, -5.811176067184831e-01, -3.277625489278443e+00, -5.815553454496355e-01, -5.652922846314460e+01, -5.644003756707695e-01, -6.419419725372651e-01, -8.918209487519029e-01, -6.561489488377633e-01, -7.196216401752846e-01, -1.043133132343584e+00, -1.228996208469567e+00, -2.254034602225765e-01, -2.675118210558474e-01, -3.465146362730177e-01, -4.435821302568421e-01, -4.151467021647832e-01, -5.792235611824479e-01, -1.709264271306290e-01, -1.055909244470354e-01, -4.257700734728984e-01, -7.690144227522888e-02, -1.014593025686630e-01, -1.162376432488465e-02, -1.459401689549807e-01, -2.727985799697629e-03, -7.419873767999849e-02, -4.061946743421831e-03, -4.061718498519958e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_br89_explicit_1_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89_explicit_1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.784219080655562e-09, -5.784119384471951e-09, -5.783775002466000e-09, -5.785407205529749e-09, -5.784165590503528e-09, -5.784165590503528e-09, -1.295240874001062e-05, -1.295272388086720e-05, -1.295946431852504e-05, -1.293790257074077e-05, -1.295236848083632e-05, -1.295236848083632e-05, -6.777739541374488e-03, -6.764459709985226e-03, -6.391915963148560e-03, -6.313206595653882e-03, -6.773645729265876e-03, -6.773645729265876e-03, -6.743780194322894e-01, -6.656821963731658e-01, -3.861526446184014e-03, -1.359639994117185e+00, -6.722896121592024e-01, -6.722896121592001e-01, -2.112869103745484e+03, -1.848940236852769e+03, -3.137269173162110e+01, -1.722835585921497e+04, -1.923343029737928e+03, -1.923343029737929e+03, -4.673694066188082e-07, -1.153320156940589e-06, -6.466342609526221e-10, -3.874000343513723e-07, -7.058954852777374e-07, -1.637852553730732e-06, -4.843074536892948e-09, -4.814187436979314e-05, -7.264063403201523e-05, -7.047431883144279e-05, -7.177514603547585e-05, -1.141536518263743e-04, -2.004785634957140e-03, -2.957320162386485e-03, -3.054765718400587e-03, -1.656689855952747e-02, -1.143974038134543e-02, -8.849170360228477e-03, -5.938772220350288e-03, -1.732171754862109e-01, -1.264855337060124e-04, -1.262631417454576e-04, -2.558190732845181e+00, -3.613821563330562e+00, -6.701428284919095e+03, -8.458613928762415e+01, -1.169276303840912e-08, -9.631205952972592e-03, -1.090268137777212e+04, -1.105393853852892e-04, -1.168988083503056e-05, -5.840540533448149e-12, -1.610483485046268e-14, -1.727139330689538e-04, -9.558408987519080e-12, -2.436429919467928e-06, -3.315701180732966e-14, -2.229849786424215e-02, -4.113789528982874e-03, -4.731289061898784e-03, -1.379746734735885e-02, -2.463560984157824e-03, -1.229492649171547e-03, -9.750316578474469e-06, -2.088040433944904e-06, -9.158241392624325e-05, -6.111750006557448e-02, -8.253822811816398e-02, -3.155196123864343e-02, -1.237027980918102e+01, -1.343548277006415e+01, -1.259236087911471e-01, -5.013878671034566e-04, -7.396977140324754e+00, -1.281688090371032e-03, -6.013302494796242e+04, -3.094162184172396e-04, -1.184332200598923e+00, -1.061431784754044e-01, -1.709172312446196e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_br89_explicit_1_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89_explicit_1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([-2.236378260290244e-04, -2.236355999338397e-04, -2.236307489044139e-04, -2.236671614272002e-04, -2.236366067131745e-04, -2.236366067131745e-04, -2.161009361790511e-03, -2.161075546885632e-03, -2.162841411507593e-03, -2.159512594878099e-03, -2.161037259837056e-03, -2.161037259837056e-03, -7.964755534530795e-03, -7.924695686431645e-03, -6.905769949259238e-03, -6.983103080160469e-03, -7.951007695062398e-03, -7.951007695062398e-03, -1.622513717134208e-02, -1.666423640787846e-02, -7.811912798131659e-03, -1.246584747490473e-02, -1.636947417606687e-02, -1.636947417606685e-02, -8.856087997958012e-03, -8.906281662733623e-03, -1.014771787325216e-02, -7.972802455232719e-03, -8.978043430731013e-03, -8.978043430731015e-03, -2.614020319615932e-04, -6.454019300154558e-04, -3.616861160415938e-07, -2.167768642739398e-04, -3.949179306791117e-04, -9.163075196923033e-04, -1.435585615005734e-07, -1.457399342058585e-03, -2.134869558137320e-03, -2.105658304374528e-03, -2.181997041111117e-03, -3.470322866275572e-03, -1.554651150058429e-03, -2.939358724638282e-03, -2.023972941463176e-03, -1.245531540243255e-02, -9.933511907195191e-03, -7.684032697583840e-03, -2.159437383747087e-05, -4.257720304703295e-03, -4.424635510708578e-07, -3.531523811839252e-03, -1.438242855680567e-02, -2.031730073302207e-02, -2.784157611319371e-03, -5.245393904621508e-05, -3.052950812413262e-15, -8.439185099036721e-06, -5.114333950838141e-03, -5.185287104510149e-11, -9.959904386607394e-06, -4.896929857735975e-12, -1.358099333597019e-14, -1.462956764602003e-04, -8.078387653401292e-12, -2.059173802327508e-06, -2.561652204706434e-14, -1.124662479788449e-02, -2.364667492563804e-03, -3.055210018404778e-03, -8.401495832242532e-03, -1.500101201170024e-03, -1.408588793161124e-03, -4.768513076820917e-07, -1.710738507100001e-07, -1.567831882493431e-05, -7.239114945043766e-03, -9.776311532156206e-03, -1.167621381815981e-02, -3.178905417791395e-03, -8.566102620411421e-03, -1.818313555414863e-02, -9.748499237294427e-07, -1.438196469079774e-02, -8.648200408615852e-09, -7.652618095390435e-04, -2.699299410519934e-11, -1.999455239579452e-03, -3.056340700161017e-08, -4.921477741245876e-11])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_br89_explicit_1_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89_explicit_1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([8.945513041160976e-04, 8.945423997353587e-04, 8.945229956176557e-04, 8.946686457088008e-04, 8.945464268526980e-04, 8.945464268526980e-04, 8.644037447162042e-03, 8.644302187542564e-03, 8.651365646030371e-03, 8.638050379512395e-03, 8.644149039348225e-03, 8.644149039348225e-03, 3.185902213812318e-02, 3.169878274572658e-02, 2.762307979703692e-02, 2.793241232064188e-02, 3.180403078024959e-02, 3.180403078024959e-02, 6.490054868536831e-02, 6.665694563151382e-02, 3.124765119252663e-02, 4.986338989961892e-02, 6.547789670426749e-02, 6.547789670426739e-02, 3.542435199183205e-02, 3.562512665093445e-02, 4.059087149300862e-02, 3.189120982093088e-02, 3.591217372292405e-02, 3.591217372292406e-02, 1.045608127846373e-03, 2.581607720061822e-03, 1.446744464166375e-06, 8.671074570957592e-04, 1.579671722716447e-03, 3.665230078769213e-03, 5.742342460022936e-07, 5.829597368234337e-03, 8.539478232549282e-03, 8.422633217498096e-03, 8.727988164444467e-03, 1.388129146510229e-02, 6.218604600233717e-03, 1.175743489855311e-02, 8.095891765852691e-03, 4.982126160973020e-02, 3.973404762878077e-02, 3.073613079033536e-02, 8.637749534988670e-05, 1.703088121881318e-02, 1.769854204283431e-06, 1.412609524735701e-02, 5.752971422722267e-02, 8.126920293208832e-02, 1.113663044527748e-02, 2.098157561848603e-04, 1.221180324965305e-14, 3.375674039614689e-05, 2.045733580335256e-02, 2.074114842070706e-10, 3.983961754642958e-05, 1.958771943094390e-11, 5.432397334388077e-14, 5.851827058408010e-04, 3.231355061360517e-11, 8.236695209310032e-06, 1.024660881882574e-13, 4.498649919153794e-02, 9.458669970255226e-03, 1.222084007361911e-02, 3.360598332897013e-02, 6.000404804680094e-03, 5.634355172644497e-03, 1.907405230728367e-06, 6.842954028400006e-07, 6.271327529973722e-05, 2.895645978017506e-02, 3.910524612862486e-02, 4.670485527263922e-02, 1.271562167116558e-02, 3.426441048164568e-02, 7.273254221659453e-02, 3.899399694917771e-06, 5.752785876319094e-02, 3.459280163446341e-08, 3.061047238156176e-03, 1.079719764406331e-10, 7.997820958317810e-03, 1.222536280064407e-07, 1.968591096498351e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
