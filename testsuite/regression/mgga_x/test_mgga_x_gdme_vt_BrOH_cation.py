
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_gdme_vt_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_vt", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.403674639252935e+01, -1.403682565876880e+01, -1.403726181343812e+01, -1.403608343984247e+01, -1.403668910880167e+01, -1.403668910880167e+01, -3.664684901270550e+00, -3.664691231622827e+00, -3.664844478799067e+00, -3.664905014757632e+00, -3.664731627841795e+00, -3.664731627841795e+00, -8.102686936602357e-01, -8.106481563045060e-01, -8.235694790411952e-01, -8.171880256882450e-01, -8.188849738184265e-01, -8.188849738184265e-01, -3.021100961718618e-01, -2.965826484925153e-01, -9.648407780533603e-01, -3.764794393718158e-01, -3.331427418943982e-01, -3.331427418943982e-01, -6.816253845075750e+00, -6.375049998169542e+00, -1.261790089055350e+00, -1.247565180109516e+01, -8.878200405481062e+00, -8.878200405481060e+00, -3.463707705537428e+01, -1.553879355430496e+01, 1.778065705608874e+02, -6.657494862046877e+01, 8.796143350095875e-01, -8.665338195707495e+00, 2.403628195246969e+02, -4.689240997906140e+00, -2.703105490736381e+00, -2.705321994597111e+00, -2.731781094168756e+00, -1.763090170750461e+00, -8.781030193856497e+00, -3.136714757409399e+00, -7.732123171387278e+00, -7.476052868821657e-01, -8.230032784343246e-01, -1.007947170117099e+00, 4.545909223021747e+00, -3.986478508276962e+00, 3.037843338759621e+01, -2.664511737657813e+00, -1.479598168117491e-01, 1.451384259500499e-01, -2.312267184937124e+02, -2.104561288121861e+05, 9.854052555894852e+04, 7.372397813583662e+00, -4.491597463993703e+01, 2.791965742159392e+03, -5.065238399942395e+04, 2.055334125801281e+04, 3.555121275863393e+05, -4.551749541442672e+02, 6.558929167791824e+03, -6.429544021033230e+05, 1.946283710391555e+05, -6.020137197054680e-01, -5.385835629242957e+00, 2.858379289711998e-01, -9.267919979326584e-01, -1.268077104532060e+01, -1.039832701571113e+01, 3.712732838739437e+01, 5.663829566069973e+01, 4.998311735784689e+00, -1.042735276735121e+00, -6.630068887557485e-01, -5.972245695266990e-01, 8.937591957207946e+00, -1.413662671395536e+00, -4.238893987415230e-01, 1.629105655581056e+01, -7.990202903833740e-02, 3.948896172201859e+02, 3.448488739731244e+02, 1.878731589836791e+03, 1.347193904181094e+00, 4.912309378606293e+02, 9.079501613953464e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_gdme_vt_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_vt", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-4.473170164193781e+01, -4.473165459795956e+01, -4.473183068336033e+01, -4.473174831188339e+01, -4.473225030779734e+01, -4.473234822644873e+01, -4.473079230105657e+01, -4.473048968033515e+01, -4.473177682862119e+01, -4.473123871394852e+01, -4.473177682862119e+01, -4.473123871394852e+01, -6.822958008677982e+00, -6.822861036607267e+00, -6.822980786154629e+00, -6.822868765111197e+00, -6.823389758764870e+00, -6.823554515966709e+00, -6.823884843964415e+00, -6.823993313429256e+00, -6.821694624803603e+00, -6.824522284611859e+00, -6.821694624803603e+00, -6.824522284611859e+00, -1.278129946113344e+00, -1.284918899359919e+00, -1.275549638686088e+00, -1.283817153699889e+00, -1.239823153075869e+00, -1.228578408457311e+00, -1.246946985215019e+00, -1.250794943885168e+00, -1.297168226559655e+00, -1.190114182025606e+00, -1.297168226559655e+00, -1.190114182025606e+00, -2.900169439250898e-01, -3.093457726987651e-01, -2.966860408198006e-01, -3.183743501890196e-01, -1.450049690385183e+00, -1.523592767478551e+00, -1.743418857567939e-01, -1.828789794050295e-01, -3.097201046946242e-01, -4.068448266709074e-02, -3.097201046946241e-01, -4.068448266709115e-02, 2.324119253146251e+00, 2.203099846511805e+00, 2.185234364926732e+00, 2.049349820614427e+00, 3.574077964290290e-01, 3.242699935852341e-01, 4.086973602452804e+00, 4.217299931158784e+00, 2.754615031272783e+00, 3.998399080933940e+00, 2.754615031272785e+00, 3.998399080933937e+00, 7.008268091911439e-01, -1.698878287253437e+00, -6.849001403115222e+00, -6.884812334605911e+00, -6.770053023592513e+01, -7.492862335949610e+01, 9.644282751572607e+00, 1.064667975258591e+01, -1.234732077242155e+01, -1.232988897915132e+01, -9.046991620230589e+00, -9.267003333515962e+00, -9.079124431250528e+01, -7.850412320172990e+01, -2.997053435873567e+00, -2.996881547306359e+00, -3.598801206614368e+00, -3.605597132612671e+00, -3.632420418957284e+00, -3.628569442164746e+00, -3.654582820824547e+00, -3.638114055752027e+00, -3.990980548498394e+00, -3.947331337967748e+00, 1.217794712082983e+00, 1.924503106528977e+00, -4.354967752282738e-01, -4.222973340653573e-01, 1.696341815761330e+00, 9.835813724745582e-01, -1.038171954081280e+00, -1.074054969362646e+00, -1.133822533644053e+00, -1.074876570233454e+00, -1.070978024678535e+00, -1.014623474280016e+00, -1.737262113808492e+00, -1.716016438537703e+00, 9.370650302858046e-01, 9.182089966950256e-01, -1.061307290024591e+01, -1.007280393772674e+01, -3.553267873733528e+00, -3.551667987280080e+00, -1.942011986295427e-01, -2.028737593344979e-01, -2.946800087944985e-01, -2.982351476280689e-01, 8.079843157270815e+01, 7.374695997076587e+01, 7.251466129588794e+04, 6.789351700880747e+04, -4.763476839823035e+04, -2.039666311359227e+04, -2.370173794325527e+00, -2.803574473375606e+00, 2.728153187938438e+01, 1.020894502266726e+01, -1.794788912761637e+03, -5.970355175520717e+02, 1.680029683729921e+04, 1.696428241176014e+04, -6.850469763953908e+03, -6.854446572219626e+03, -1.183018690404390e+05, -1.187065687744269e+05, 1.589803691178567e+02, 1.418466878632759e+02, -2.017514544505781e+03, -2.355856897927300e+03, 2.142144965863482e+05, 2.144178687909892e+05, -6.400604584030210e+04, -6.574027030728375e+04, -9.353654403365399e-01, -9.413403434437242e-01, 5.876852379123497e-01, 6.171539815479673e-01, -1.305965078777584e+00, -1.376294621319918e+00, -9.078963682054720e-01, -9.118717217078647e-01, 3.033891486585599e+00, 2.982589669757899e+00, 1.965559830948807e+00, 1.875311193928511e+00, -1.281427611748687e+01, -1.295003806206380e+01, -1.948373556528965e+01, -1.949272036717794e+01, -2.411547761602229e+00, -2.528088230161743e+00, -3.544227392990912e-01, -3.491191635723956e-01, -4.808237451615935e-01, -4.758706018265342e-01, -8.473148533146448e-01, -8.518181572014832e-01, -3.327189384420093e+00, -2.791720182900913e+00, 2.940423006764616e-01, 4.302010109316642e-01, -6.268923651423309e-01, -6.408652190010296e-01, -6.272191061868048e+00, -5.025143670398769e+00, -1.154933207744160e-01, -1.625263985707146e-01, -1.748188196158539e+02, -9.285460486965682e+01, -7.940241688972245e+01, -1.502584009479458e+02, -6.821925866323753e+02, -5.797492005270851e+02, -5.227113521656197e-01, -6.857193649084704e-01, -2.553037934153561e+02, -1.247386347392900e+02, -4.409848259436782e+02, -2.437137854744719e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gdme_vt_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_vt", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gdme_vt_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_vt", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([-1.104720559442958e-03, -1.104721982004480e-03, -1.104716990407524e-03, -1.104719389210486e-03, -1.104704868164641e-03, -1.104702216142597e-03, -1.104745192760566e-03, -1.104753607931325e-03, -1.104718466360694e-03, -1.104732546384408e-03, -1.104718466360694e-03, -1.104732546384408e-03, -6.785351117663193e-03, -6.785443698707819e-03, -6.785329903988052e-03, -6.785435621609279e-03, -6.784947864000530e-03, -6.784808183150657e-03, -6.784514839814387e-03, -6.784419624561309e-03, -6.786485926926388e-03, -6.783947590876796e-03, -6.786485926926388e-03, -6.783947590876796e-03, -3.524913343143608e-02, -3.510996337506759e-02, -3.530407726015212e-02, -3.513295835491573e-02, -3.605481708916582e-02, -3.630491876986962e-02, -3.592007679294704e-02, -3.584242936367726e-02, -3.484274159194901e-02, -3.719938431689668e-02, -3.484274159194901e-02, -3.719938431689668e-02, -1.389426087890390e-01, -1.337402890423961e-01, -1.372513736252522e-01, -1.314208151588049e-01, -3.068508379471285e-02, -2.968709468128522e-02, -1.807064211585574e-01, -1.782465320421076e-01, -1.330640790401680e-01, -2.480309070679956e-01, -1.330640790401680e-01, -2.480309070679956e-01, -4.040013711714501e+00, -3.801942857250131e+00, -3.855414715372652e+00, -3.598979510179770e+00, -6.933653871252093e-01, -6.565869071886070e-01, -6.720722476454858e+00, -6.834607113397229e+00, -4.528677989664548e+00, -7.958131631508767e+00, -4.528677989664548e+00, -7.958131631508758e+00, -4.531476112622267e-03, -4.532561835578561e-03, -4.530630033197913e-03, -4.531744194584069e-03, -4.531424581023118e-03, -4.532530499643020e-03, -4.530698643586701e-03, -4.531787749162036e-03, -4.531046198062031e-03, -4.532151717338614e-03, -4.531046198062031e-03, -4.532151717338614e-03, -1.205677661123619e-02, -1.205738588728195e-02, -1.196862643724783e-02, -1.197188447806745e-02, -1.213175908798059e-02, -1.211081233351138e-02, -1.205451531822738e-02, -1.203283435248236e-02, -1.195221432238818e-02, -1.200478763742998e-02, -1.195221432238818e-02, -1.200478763742998e-02, -4.016379517932200e-02, -4.027041102457479e-02, -3.702859272924015e-02, -3.701179011447407e-02, -4.427695794690707e-02, -4.270689322745257e-02, -4.251756477653905e-02, -4.115028083330317e-02, -3.861782614353627e-02, -4.064331905752377e-02, -3.861782614353627e-02, -4.064331905752377e-02, -2.597197157577177e-01, -2.572663902611788e-01, -1.363759563800638e-01, -1.356987426512052e-01, -2.871038094870955e-01, -2.724641752623836e-01, -1.228937542131573e-02, -1.229489911773740e-02, -2.269818662104466e-01, -2.142680747198876e-01, -2.269818662104466e-01, -2.142680747198876e-01, -8.958699222253651e+00, -8.620414507780495e+00, -6.984918827289261e+00, -6.880777982826359e+00, -9.340959302670438e+00, -8.820253007617463e+00, -4.166972282895993e-01, -4.141507407463866e-01, -9.145717126695295e+00, -6.659565911526461e+00, -9.145717126695294e+00, -6.659565911526461e+00, -4.010013908408570e-02, -3.994572218083148e-02, -4.033227748535281e-02, -4.017540765264417e-02, -4.025053537505836e-02, -4.009403841417421e-02, -4.018275984314960e-02, -4.002794978656608e-02, -4.021664795635550e-02, -4.006101070334833e-02, -4.021664795635550e-02, -4.006101070334833e-02, -4.120584328089417e-02, -4.107007785688133e-02, -4.802620782945867e-02, -4.781904064271554e-02, -4.586573378824520e-02, -4.566308221059508e-02, -4.388430299790846e-02, -4.373053303902327e-02, -4.486849775145883e-02, -4.470244125001797e-02, -4.486849775145883e-02, -4.470244125001797e-02, -3.534098334090322e-02, -3.528348819741906e-02, -1.079836237704620e-01, -1.073619867381239e-01, -9.010685516477922e-02, -8.921210738313337e-02, -6.806436069271696e-02, -6.769008598735578e-02, -7.803710597577471e-02, -7.806464453983848e-02, -7.803710597577473e-02, -7.806464453983848e-02, -5.223291653464111e-02, -5.187569452722808e-02, -7.065822035761359e-01, -7.017804442652461e-01, -5.252873751280660e-01, -5.082730034254863e-01, -7.094472859206413e-02, -6.989082142026601e-02, -3.356126232096823e-01, -3.178464061075206e-01, -3.356126232096824e-01, -3.178464061075206e-01, -2.824310266818427e+00, -2.725498921622089e+00, -2.596270434770543e+01, -2.590350012501251e+01, -1.275953678853357e+01, -1.199677326191701e+01, -3.502889445316677e-01, -3.446526666614150e-01, -9.655402865122060e+00, -7.265717799002521e+00, -9.655402865122067e+00, -7.265717799002529e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gdme_vt_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_vt", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([4.418882237771832e-03, 4.418887928017919e-03, 4.418867961630098e-03, 4.418877556841944e-03, 4.418819472658565e-03, 4.418808864570388e-03, 4.418980771042265e-03, 4.419014431725298e-03, 4.418873865442777e-03, 4.418930185537630e-03, 4.418873865442777e-03, 4.418930185537630e-03, 2.714140447065277e-02, 2.714177479483128e-02, 2.714131961595221e-02, 2.714174248643712e-02, 2.713979145600212e-02, 2.713923273260263e-02, 2.713805935925755e-02, 2.713767849824524e-02, 2.714594370770555e-02, 2.713579036350718e-02, 2.714594370770555e-02, 2.713579036350718e-02, 1.409965337257443e-01, 1.404398535002704e-01, 1.412163090406085e-01, 1.405318334196629e-01, 1.442192683566633e-01, 1.452196750794785e-01, 1.436803071717882e-01, 1.433697174547090e-01, 1.393709663677960e-01, 1.487975372675867e-01, 1.393709663677960e-01, 1.487975372675867e-01, 5.557704351561560e-01, 5.349611561695844e-01, 5.490054945010088e-01, 5.256832606352194e-01, 1.227403351788514e-01, 1.187483787251409e-01, 7.228256846342295e-01, 7.129861281684304e-01, 5.322563161606720e-01, 9.921236282719823e-01, 5.322563161606718e-01, 9.921236282719824e-01, 1.616005484685800e+01, 1.520777142900052e+01, 1.542165886149061e+01, 1.439591804071908e+01, 2.773461548500837e+00, 2.626347628754428e+00, 2.688288990581943e+01, 2.733842845358891e+01, 1.811471195865819e+01, 3.183252652603507e+01, 1.811471195865819e+01, 3.183252652603503e+01, 1.812590445048907e-02, 1.813024734231425e-02, 1.812252013279165e-02, 1.812697677833628e-02, 1.812569832409247e-02, 1.813012199857208e-02, 1.812279457434680e-02, 1.812715099664814e-02, 1.812418479224812e-02, 1.812860686935445e-02, 1.812418479224812e-02, 1.812860686935445e-02, 4.822710644494475e-02, 4.822954354912781e-02, 4.787450574899133e-02, 4.788753791226981e-02, 4.852703635192238e-02, 4.844324933404554e-02, 4.821806127290951e-02, 4.813133740992944e-02, 4.780885728955271e-02, 4.801915054971991e-02, 4.780885728955271e-02, 4.801915054971991e-02, 1.606551807172880e-01, 1.610816440982991e-01, 1.481143709169606e-01, 1.480471604578963e-01, 1.771078317876283e-01, 1.708275729098103e-01, 1.700702591061562e-01, 1.646011233332127e-01, 1.544713045741451e-01, 1.625732762300951e-01, 1.544713045741451e-01, 1.625732762300951e-01, 1.038878863030871e+00, 1.029065561044715e+00, 5.455038255202550e-01, 5.427949706048207e-01, 1.148415237948382e+00, 1.089856701049534e+00, 4.915750168526292e-02, 4.917959647094962e-02, 9.079274648417865e-01, 8.570722988795505e-01, 9.079274648417865e-01, 8.570722988795505e-01, 3.583479688901460e+01, 3.448165803112198e+01, 2.793967530915704e+01, 2.752311193130544e+01, 3.736383721068175e+01, 3.528101203046985e+01, 1.666788913158397e+00, 1.656602962985546e+00, 3.658286850678118e+01, 2.663826364610584e+01, 3.658286850678117e+01, 2.663826364610584e+01, 1.604005563363428e-01, 1.597828887233259e-01, 1.613291099414113e-01, 1.607016306105767e-01, 1.610021415002334e-01, 1.603761536566969e-01, 1.607310393725984e-01, 1.601117991462643e-01, 1.608665918254220e-01, 1.602440428133933e-01, 1.608665918254220e-01, 1.602440428133933e-01, 1.648233731235767e-01, 1.642803114275253e-01, 1.921048313178347e-01, 1.912761625708622e-01, 1.834629351529808e-01, 1.826523288423803e-01, 1.755372119916339e-01, 1.749221321560931e-01, 1.794739910058353e-01, 1.788097650000719e-01, 1.794739910058353e-01, 1.788097650000719e-01, 1.413639333636129e-01, 1.411339527896762e-01, 4.319344950818479e-01, 4.294479469524956e-01, 3.604274206591169e-01, 3.568484295325335e-01, 2.722574427708678e-01, 2.707603439494231e-01, 3.121484239030988e-01, 3.122585781593539e-01, 3.121484239030989e-01, 3.122585781593539e-01, 2.089316661385645e-01, 2.075027781089123e-01, 2.826328814304544e+00, 2.807121777060984e+00, 2.101149500512264e+00, 2.033092013701945e+00, 2.837789143682565e-01, 2.795632856810640e-01, 1.342450492838729e+00, 1.271385624430082e+00, 1.342450492838730e+00, 1.271385624430082e+00, 1.129724106727371e+01, 1.090199568648836e+01, 1.038508173908217e+02, 1.036140005000501e+02, 5.103814715413428e+01, 4.798709304766803e+01, 1.401155778126671e+00, 1.378610666645660e+00, 3.862161146048824e+01, 2.906287119601008e+01, 3.862161146048827e+01, 2.906287119601012e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
