
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_3_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_3", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.324404560016971e+01, -2.324410464658161e+01, -2.324446775240379e+01, -2.324359113634651e+01, -2.324403611617656e+01, -2.324403611617656e+01, -3.397599283460736e+00, -3.397690379141918e+00, -3.400358633585574e+00, -3.401585264444917e+00, -3.400268023280343e+00, -3.400268023280343e+00, -6.081217684514828e-01, -6.075436828173207e-01, -5.948449164082201e-01, -6.051996151802774e-01, -6.039421139661105e-01, -6.039421139661105e-01, -1.756029061495713e-01, -1.783586710243819e-01, -6.697623308147901e-01, -1.246468959619675e-01, -1.648318247841106e-01, -1.648318247841105e-01, -5.728850829057522e-03, -6.027748074209179e-03, -3.290476736780797e-02, -3.261185562134482e-03, -4.584676630126917e-03, -4.584676630126917e-03, -5.661981674137241e+00, -5.662266032188867e+00, -5.662042988035946e+00, -5.662292097203471e+00, -5.662101289778796e+00, -5.662101289778796e+00, -2.075174505042504e+00, -2.101739423583728e+00, -2.069009729728356e+00, -2.093202314897392e+00, -2.092838588394383e+00, -2.092838588394383e+00, -6.095702186302354e-01, -6.532668428154590e-01, -5.422629403820725e-01, -5.519448613090431e-01, -6.220422289262240e-01, -6.220422289262240e-01, -8.584566754279865e-02, -1.708730908072635e-01, -7.934470327454834e-02, -1.885479720664480e+00, -1.026576587895092e-01, -1.026576587895093e-01, -2.445815108134566e-03, -3.142596179192747e-03, -2.436945623778973e-03, -5.311985756528406e-02, -3.065182043613458e-03, -3.065182043613459e-03, -6.257678734600280e-01, -6.264251723961873e-01, -6.262465615248811e-01, -6.260496729491514e-01, -6.261503908383482e-01, -6.261503908383481e-01, -6.040898412336807e-01, -5.382305296755225e-01, -5.611892754518037e-01, -5.800604630981814e-01, -5.704292447886430e-01, -5.704292447886430e-01, -6.765893199866628e-01, -2.216858249725955e-01, -2.686981708836791e-01, -3.516183750849786e-01, -3.109027434624505e-01, -3.109027434624505e-01, -4.758278181185120e-01, -3.165612899638939e-02, -4.281821402839436e-02, -3.433980318579478e-01, -6.827518581916286e-02, -6.827518581916288e-02, -7.850706703427737e-03, -8.056521225670831e-04, -1.802701070837709e-03, -6.441783125354959e-02, -2.815941442829043e-03, -2.815941442829041e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_3_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_3", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.833181102372879e+01, -2.833143470156244e+01, -2.833194125325838e+01, -2.833152933172790e+01, -2.833227519546041e+01, -2.833203105791722e+01, -2.833080326255816e+01, -2.833015511514046e+01, -2.833189155535345e+01, -2.833084437184595e+01, -2.833189155535345e+01, -2.833084437184595e+01, -4.631104015397778e+00, -4.631095920976845e+00, -4.631218717635793e+00, -4.631180179023763e+00, -4.633572706905362e+00, -4.634079986878407e+00, -4.632469828086818e+00, -4.632676905292151e+00, -4.630091775647747e+00, -4.634855440324698e+00, -4.630091775647747e+00, -4.634855440324698e+00, -8.148506545842213e-01, -8.205171479994443e-01, -8.129701576906760e-01, -8.195743308313156e-01, -7.876300130019923e-01, -7.821322830573879e-01, -7.976164368264681e-01, -8.010997760728311e-01, -8.273284463781807e-01, -7.673643007855789e-01, -8.273284463781807e-01, -7.673643007855789e-01, -2.089996468835261e-01, -2.207362917408133e-01, -2.117895697269222e-01, -2.252462157146528e-01, -8.610573271136037e-01, -9.021979238998077e-01, -1.519989971017716e-01, -1.557860395319044e-01, -2.179578163003565e-01, -1.091468773359776e-01, -2.179578163003561e-01, -1.091468773359775e-01, -6.680710474906809e-03, -7.098482010925859e-03, -7.001368150699891e-03, -7.499496591326676e-03, -3.902246618385253e-02, -4.121443558760623e-02, -4.020649360715917e-03, -3.952955914787531e-03, -5.961554739056023e-03, -3.398256523380415e-03, -5.961554739056023e-03, -3.398256523380417e-03, -6.986016362997447e+00, -6.984159794873993e+00, -6.989777557679052e+00, -6.987793594220401e+00, -6.986188031741018e+00, -6.984257837120896e+00, -6.989416689899054e+00, -6.987560261820973e+00, -6.987970124944411e+00, -6.985988782345293e+00, -6.987970124944411e+00, -6.985988782345293e+00, -2.532560449808028e+00, -2.532305574448524e+00, -2.551424416456881e+00, -2.550489455181942e+00, -2.513513835484363e+00, -2.518713391216021e+00, -2.529810210345546e+00, -2.535065806275222e+00, -2.557811362676458e+00, -2.543931230062516e+00, -2.557811362676458e+00, -2.543931230062516e+00, -7.903158673976692e-01, -7.878601431238590e-01, -8.931076074764484e-01, -8.936320171765172e-01, -7.106249865426468e-01, -7.425611276033139e-01, -7.720454836171715e-01, -7.998402905500980e-01, -8.237649903860108e-01, -7.843730420201870e-01, -8.237649903860106e-01, -7.843730420201872e-01, -1.049910729331316e-01, -1.059642763724326e-01, -2.084386424880338e-01, -2.094540146560251e-01, -9.473414199451627e-02, -1.000109438886700e-01, -2.699940121308193e+00, -2.698820073664924e+00, -1.210430090963448e-01, -1.293380952716366e-01, -1.210430090963449e-01, -1.293380952716367e-01, -3.021227658635185e-03, -3.139577818081089e-03, -3.871996957554661e-03, -3.931097869388982e-03, -2.892934864156161e-03, -3.063911127519082e-03, -6.506072322377425e-02, -6.552631718512282e-02, -2.959903687600943e-03, -4.053454422594868e-03, -2.959903687600943e-03, -4.053454422594869e-03, -8.274350610432077e-01, -8.308162224730975e-01, -8.098695369499378e-01, -8.133544452989009e-01, -8.158921188926597e-01, -8.193818738041030e-01, -8.210394290306336e-01, -8.244248492590998e-01, -8.184545555145669e-01, -8.218903716519256e-01, -8.184545555145669e-01, -8.218903716519254e-01, -8.105143900574586e-01, -8.131315371582186e-01, -6.351173635371610e-01, -6.379499866134957e-01, -6.734913320713709e-01, -6.768651838543023e-01, -7.224531868346464e-01, -7.252310028789402e-01, -6.968122063820263e-01, -6.994543884119971e-01, -6.968122063820262e-01, -6.994543884119973e-01, -9.358478623414175e-01, -9.376912889113910e-01, -2.704246921683000e-01, -2.721531031579951e-01, -3.295888819767999e-01, -3.335497898023713e-01, -4.506958283546036e-01, -4.533172219450477e-01, -3.872159121281788e-01, -3.872013881225004e-01, -3.872159121281785e-01, -3.872013881225005e-01, -5.912391049583290e-01, -5.953960308633877e-01, -3.827988338367178e-02, -3.854427160092812e-02, -5.155529261487213e-02, -5.329211940564442e-02, -4.388882867178280e-01, -4.463179096876848e-01, -8.108066245117049e-02, -8.579793728936538e-02, -8.108066245117047e-02, -8.579793728936530e-02, -9.577063443753446e-03, -9.925160832837052e-03, -1.042547490734874e-03, -1.044402794548946e-03, -2.116398123192565e-03, -2.251025196631529e-03, -7.771007340659276e-02, -7.915144959986525e-02, -2.803436372063997e-03, -3.715293511994155e-03, -2.803436372063997e-03, -3.715293511994156e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_3_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_3", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.963062712317955e-08, 0.000000000000000e+00, -2.963234138620819e-08, -2.963039244512510e-08, 0.000000000000000e+00, -2.963217058990346e-08, -2.962958934403574e-08, 0.000000000000000e+00, -2.963103401017946e-08, -2.963225611781161e-08, 0.000000000000000e+00, -2.963442924446009e-08, -2.963049574414798e-08, 0.000000000000000e+00, -2.963303248934044e-08, -2.963049574414798e-08, 0.000000000000000e+00, -2.963303248934044e-08, -2.696953242595030e-05, 0.000000000000000e+00, -2.696336384820503e-05, -2.697515575890738e-05, 0.000000000000000e+00, -2.696684474100440e-05, -2.708174113013250e-05, 0.000000000000000e+00, -2.709888636669772e-05, -2.704667118413710e-05, 0.000000000000000e+00, -2.704252417452346e-05, -2.697457722848580e-05, 0.000000000000000e+00, -2.713669962191825e-05, -2.697457722848580e-05, 0.000000000000000e+00, -2.713669962191825e-05, -9.602838787739444e-03, 0.000000000000000e+00, -9.750530449613373e-03, -9.577437208340311e-03, 0.000000000000000e+00, -9.730543427677074e-03, -9.111012622751441e-03, 0.000000000000000e+00, -9.157136135016293e-03, -9.563644794489774e-03, 0.000000000000000e+00, -9.717247527220486e-03, -9.613605027675677e-03, 0.000000000000000e+00, -9.346251163874641e-03, -9.613605027675677e-03, 0.000000000000000e+00, -9.346251163874641e-03, -1.382602511992259e+00, 0.000000000000000e+00, -1.487569412968523e+00, -1.385575126292584e+00, 0.000000000000000e+00, -1.494868827912249e+00, -2.354048155131966e-03, 0.000000000000000e+00, -2.697340903198638e-03, -1.153412862726321e+00, 0.000000000000000e+00, -1.338578338624550e+00, -1.171287955443725e+00, 0.000000000000000e+00, -1.443001597535229e+00, -1.171287955443725e+00, 0.000000000000000e+00, -1.443001597535229e+00, -6.106316909875901e+02, 0.000000000000000e+00, -5.437417704760792e+02, -5.643335784281888e+02, 0.000000000000000e+00, -4.970993230329619e+02, -1.247374910866578e+01, 0.000000000000000e+00, -1.161117194944932e+01, -1.373205233321711e+03, 0.000000000000000e+00, -1.439182295846010e+03, -7.390611695281964e+02, 0.000000000000000e+00, -2.739405580600227e+03, -7.390611695281958e+02, 0.000000000000000e+00, -2.739405580600227e+03, -8.745722680541662e-06, 0.000000000000000e+00, -8.754347549292835e-06, -8.744100621157085e-06, 0.000000000000000e+00, -8.752781028579059e-06, -8.745751702091579e-06, 0.000000000000000e+00, -8.754379830536816e-06, -8.744353971867247e-06, 0.000000000000000e+00, -8.752950819842648e-06, -8.744808953960660e-06, 0.000000000000000e+00, -8.753551066456722e-06, -8.744808953960660e-06, 0.000000000000000e+00, -8.753551066456722e-06, -2.485709854771086e-04, 0.000000000000000e+00, -2.496125033803049e-04, -2.499804612635601e-04, 0.000000000000000e+00, -2.509446591316390e-04, -2.481711296064084e-04, 0.000000000000000e+00, -2.493152599872805e-04, -2.498002550604409e-04, 0.000000000000000e+00, -2.508706813925335e-04, -2.495497465581041e-04, 0.000000000000000e+00, -2.504699759484655e-04, -2.495497465581041e-04, 0.000000000000000e+00, -2.504699759484655e-04, -4.342204916838564e-02, 0.000000000000000e+00, -4.426203510206354e-02, -3.572891300368072e-02, 0.000000000000000e+00, -3.591377799491580e-02, -5.036136264788090e-02, 0.000000000000000e+00, -4.911852926530332e-02, -5.073246880625153e-02, 0.000000000000000e+00, -4.730999562338650e-02, -3.955621011502750e-02, 0.000000000000000e+00, -4.597232684699086e-02, -3.955621011502750e-02, 0.000000000000000e+00, -4.597232684699087e-02, -1.912449426853456e+00, 0.000000000000000e+00, -1.869434565369452e+00, -7.627543630927919e-01, 0.000000000000000e+00, -7.519004560384152e-01, -2.231967471967565e+00, 0.000000000000000e+00, -2.147781004586778e+00, -3.841738738732488e-04, 0.000000000000000e+00, -3.849546845223155e-04, -1.902516224975692e+00, 0.000000000000000e+00, -2.232148483161747e+00, -1.902516224975692e+00, 0.000000000000000e+00, -2.232148483161749e+00, -1.822467005932067e+03, 0.000000000000000e+00, -1.637428358767270e+03, -1.372323059933232e+03, 0.000000000000000e+00, -1.238484792818243e+03, -6.923202374731182e+03, 0.000000000000000e+00, -6.449932683205805e+03, -4.819507542975602e+00, 0.000000000000000e+00, -5.258218538126172e+00, -2.388144315106172e+03, 0.000000000000000e+00, -2.849357415252905e+03, -2.388144315106173e+03, 0.000000000000000e+00, -2.849357415252904e+03, -5.510599253345898e-02, 0.000000000000000e+00, -5.428459706396956e-02, -5.590297094226489e-02, 0.000000000000000e+00, -5.507548674852639e-02, -5.565019045680546e-02, 0.000000000000000e+00, -5.482242305789888e-02, -5.541851952187657e-02, 0.000000000000000e+00, -5.459506492211658e-02, -5.553670994509272e-02, 0.000000000000000e+00, -5.471107178605776e-02, -5.553670994509272e-02, 0.000000000000000e+00, -5.471107178605775e-02, -6.088487870616512e-02, 0.000000000000000e+00, -6.013485830246051e-02, -8.522648834341499e-02, 0.000000000000000e+00, -8.428830774428711e-02, -8.087811147555850e-02, 0.000000000000000e+00, -7.984877869670233e-02, -7.403581630428771e-02, 0.000000000000000e+00, -7.308049951894963e-02, -7.771941333789288e-02, 0.000000000000000e+00, -7.677224656613292e-02, -7.771941333789285e-02, 0.000000000000000e+00, -7.677224656613292e-02, -2.837684402615979e-02, 0.000000000000000e+00, -2.860760228951512e-02, -5.200000527610460e-01, 0.000000000000000e+00, -5.158400280188211e-01, -3.899056829435120e-01, 0.000000000000000e+00, -3.897469502452910e-01, -2.398840814008735e-01, 0.000000000000000e+00, -2.349657675793977e-01, -3.286152276844213e-01, 0.000000000000000e+00, -3.312826307253580e-01, -3.286152276844216e-01, 0.000000000000000e+00, -3.312826307253583e-01, -1.013387062296883e-01, 0.000000000000000e+00, -1.015952777115047e-01, -1.370391564188925e+01, 0.000000000000000e+00, -1.332001359568545e+01, -6.904659496053379e+00, 0.000000000000000e+00, -6.641766887354507e+00, -3.272465582790863e-01, 0.000000000000000e+00, -3.490813687724010e-01, -3.851691787468716e+00, 0.000000000000000e+00, -4.028409842998566e+00, -3.851691787468716e+00, 0.000000000000000e+00, -4.028409842998568e+00, -1.863437636237832e+02, 0.000000000000000e+00, -1.710701979865896e+02, -1.662444592515199e+04, 0.000000000000000e+00, -1.526954951786148e+04, -8.845114526230986e+03, 0.000000000000000e+00, -8.039787222008787e+03, -4.544222407747566e+00, 0.000000000000000e+00, -4.833752317516219e+00, -4.447381853491069e+03, 0.000000000000000e+00, -3.451531534365143e+03, -4.447381853491075e+03, 0.000000000000000e+00, -3.451531534365153e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_3_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_3", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_3_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_3", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.871140782212974e-03, 1.871211680343452e-03, 1.871129035979662e-03, 1.871203138668185e-03, 1.871107741345559e-03, 1.871168034593605e-03, 1.871240652308232e-03, 1.871337458228349e-03, 1.871133218697464e-03, 1.871281671532417e-03, 1.871133218697464e-03, 1.871281671532417e-03, 7.095990639855570e-03, 7.090222445863156e-03, 7.098057808078467e-03, 7.091168594454307e-03, 7.133509701549214e-03, 7.138606939274276e-03, 7.139142211943234e-03, 7.134933815256921e-03, 7.092954790378568e-03, 7.167016990610381e-03, 7.092954790378568e-03, 7.167016990610381e-03, 1.344885407646308e-02, 1.375680985952344e-02, 1.339278832651269e-02, 1.369580569679342e-02, 1.232167726002166e-02, 1.257396936096084e-02, 1.417163712643966e-02, 1.453135855324722e-02, 1.343150653037995e-02, 1.452215591733166e-02, 1.343150653037995e-02, 1.452215591733166e-02, 6.250032630960611e-02, 8.068295407041229e-02, 6.404108338747720e-02, 8.469373659132026e-02, 1.881285511872186e-03, 2.822789054914630e-03, 1.772578352138352e-02, 2.461857711614076e-02, 5.921449087563717e-02, 6.791206436448642e-03, 5.921449087563698e-02, 6.791206436448679e-03, 9.544757066177834e-04, 1.027016037312696e-03, 1.006900244669385e-03, 1.100216771454367e-03, 3.503472534591189e-03, 3.920854482135209e-03, 4.166883496375541e-04, 4.231472327322036e-04, 7.999422973179429e-04, 4.486735892672356e-04, 7.999422973179429e-04, 4.486735892672365e-04, 7.451231477694327e-03, 7.453459934102107e-03, 7.442632391934391e-03, 7.445145654729240e-03, 7.450838467839884e-03, 7.453235118380732e-03, 7.443456652185220e-03, 7.445678996582639e-03, 7.446765075642293e-03, 7.449275196133540e-03, 7.446765075642293e-03, 7.449275196133540e-03, 1.614746848267735e-02, 1.624273646687753e-02, 1.666000289491792e-02, 1.673559389806130e-02, 1.615183603550309e-02, 1.623998409520568e-02, 1.663426042638631e-02, 1.672456217194878e-02, 1.643070954523681e-02, 1.651044453305806e-02, 1.643070954523681e-02, 1.651044453305806e-02, 5.914286605503666e-02, 5.987732643673598e-02, 5.320910401430441e-02, 5.341373007430261e-02, 4.885773115803400e-02, 5.470158930294412e-02, 4.876168028220502e-02, 5.151122976052872e-02, 5.946258050555942e-02, 5.935271963387862e-02, 5.946258050555932e-02, 5.935271963387864e-02, 1.047110255747884e-02, 1.036957310676285e-02, 3.604515050858149e-02, 3.592730783050864e-02, 8.625947874897854e-03, 1.011781393273697e-02, 1.535350324003606e-02, 1.536355996958615e-02, 1.675854129203431e-02, 2.469006985336180e-02, 1.675854129203434e-02, 2.469006985336186e-02, 1.680166693096303e-04, 1.747202652695989e-04, 3.285606320569379e-04, 3.030747376990625e-04, 7.793974085601306e-04, 8.567553078672007e-04, 5.828186574541658e-03, 7.060665600918034e-03, 1.762523466450296e-04, 9.799425290038986e-04, 1.762523466450302e-04, 9.799425290038953e-04, 5.800649325025348e-02, 5.772996046682000e-02, 6.106259070833937e-02, 6.074522053714290e-02, 6.000736632726861e-02, 5.969681981494213e-02, 5.911052212108683e-02, 5.882527146169200e-02, 5.956032036777540e-02, 5.926267556369851e-02, 5.956032036777540e-02, 5.926267556369851e-02, 5.897583929765591e-02, 5.876294756298693e-02, 8.175525385301341e-02, 8.160073294111810e-02, 7.891750668426008e-02, 7.856689899455767e-02, 7.192225274040683e-02, 7.162016835592795e-02, 7.566922361521300e-02, 7.542661917813678e-02, 7.566922361521289e-02, 7.542661917813676e-02, 4.895824742311022e-02, 4.949080845819386e-02, 5.247395352999288e-02, 5.291711211606087e-02, 6.459990558271100e-02, 6.650747285216085e-02, 7.486615172119138e-02, 7.420838655534732e-02, 7.806982286093089e-02, 7.850897180531195e-02, 7.806982286093084e-02, 7.850897180531205e-02, 7.271986633111363e-02, 7.451220006382610e-02, 3.913168373724541e-03, 3.839207755077178e-03, 4.418364954397013e-03, 4.726332193387574e-03, 8.470524078174160e-02, 9.810636300896661e-02, 9.818159715234727e-03, 1.232879907707288e-02, 9.818159715234708e-03, 1.232879907707285e-02, 6.648431930459061e-04, 6.672353637171059e-04, 4.396061132616283e-05, 3.047843799246222e-05, 4.176578087852431e-04, 4.556394439361319e-04, 1.042791861728333e-02, 1.252139821954969e-02, 3.121108245282737e-04, 9.133768737495105e-04, 3.121108245282717e-04, 9.133768737495104e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
