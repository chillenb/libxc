
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_3_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_3", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.113529869335117e+01, -2.113540344736144e+01, -2.113586891508238e+01, -2.226430027554124e+01, -2.226494348873081e+01, -2.339488980167973e+01, -3.455814738129579e+00, -3.818896137087624e+00, -3.819864330912501e+00, -3.819820601683779e+00, -3.819426245314838e+00, -3.456575589245576e+00, -5.590896336461506e-01, -6.342986310225160e-01, -6.828594619071555e-01, -6.184319873450106e-01, -5.467588381009927e-01, -6.917208118217025e-01, -1.622348380229978e-01, -1.653287921425591e-01, -7.144878394028500e-01, -1.291450725760118e-01, -1.692565255458444e-01, -1.677571437993639e-01, -5.734916163922136e-03, -5.783801176224129e-03, -3.185079628425487e-02, -3.306266961923407e-03, -4.615255830112494e-03, -4.615255830112494e-03, -5.664611969630285e+00, -5.664865123094215e+00, -5.664618542474464e+00, -5.664842472455512e+00, -5.467451365420857e+00, -5.467626776197957e+00, -2.134079914177285e+00, -2.153101779602483e+00, -2.119852921797483e+00, -2.136878082959631e+00, -1.936957882495435e+00, -2.151462292536417e+00, -6.000260802283534e-01, -6.973603922181246e-01, -5.981795779550544e-01, -6.229691374971796e-01, -6.151568233722746e-01, -6.582188891722169e-01, -8.793255094737110e-02, -1.585507078741512e-01, -8.130959735777042e-02, -2.115583337539002e+00, -1.046118735556116e-01, -1.046118735556116e-01, -2.437134565067680e-03, -3.232068107573875e-03, -2.475204038288525e-03, -5.125774991911500e-02, -3.109299331916561e-03, -3.109299331916563e-03, -6.313378619653975e-01, -6.318120508888758e-01, -6.112207174019708e-01, -6.230387497456917e-01, -6.128988367076307e-01, -6.222309635451850e-01, -6.148013885702968e-01, -4.974251302582422e-01, -5.305826325854660e-01, -5.889858786450375e-01, -5.788896047363778e-01, -5.463952607913277e-01, -6.949869465836768e-01, -2.241750138302167e-01, -2.477047756948922e-01, -3.406076867735471e-01, -3.245607872500974e-01, -2.901370637328256e-01, -4.983775785428400e-01, -2.863795138611826e-02, -4.355607541380500e-02, -3.686255520188114e-01, -6.961341273228326e-02, -6.961341273228326e-02, -7.290988109258066e-03, -8.638381126610313e-04, -1.638796912613896e-03, -5.755570037308232e-02, -2.855339540121517e-03, -2.643501401353855e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_3_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_3", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.064352317549429e+01, -3.064349149119609e+01, -3.064362332172388e+01, -3.064356423556417e+01, -3.064396281019913e+01, -3.064404530331853e+01, -3.064283138103139e+01, -2.815034803503677e+01, -3.064358196964021e+01, -2.815113866173065e+01, -2.815139612243500e+01, -2.815113866173065e+01, -4.471538567906610e+00, -4.705073281895672e+00, -4.471542759635526e+00, -4.471484491345779e+00, -4.471606072805285e+00, -4.471664775493732e+00, -4.471959598145368e+00, -4.472022105965977e+00, -4.470812695375164e+00, -4.472165259958869e+00, -4.704052118880748e+00, -4.472165259958869e+00, -7.871345810255118e-01, -7.944133643097588e-01, -7.847323805118565e-01, -8.590693781699201e-01, -8.316579441465031e-01, -8.250002652391178e-01, -8.365954578529929e-01, -7.658185309612159e-01, -8.032556759411579e-01, -7.180071181436392e-01, -8.669158519824717e-01, -8.015305938511172e-01, -1.865686733949098e-01, -2.215038944445999e-01, -1.895261970691471e-01, -2.262404201386460e-01, -9.487342216015835e-01, -8.795345915089193e-01, -1.546872626015451e-01, -1.576550284335429e-01, -2.204614528216503e-01, -1.104299524271632e-01, -2.204614528216503e-01, -1.056014262663434e-01, -6.679647854748837e-03, -7.097995985304081e-03, -6.987313250529143e-03, -7.498388924566937e-03, -3.867280036971685e-02, -4.119562824599584e-02, -4.015083353347169e-03, -3.948177310716965e-03, -5.958769068124399e-03, -3.390784097142781e-03, -5.958769068124399e-03, -3.390784097142778e-03, -6.982544738054840e+00, -6.980887725700339e+00, -6.986343497532127e+00, -6.984557867798720e+00, -6.982797885219197e+00, -6.981044228453742e+00, -6.986055758210314e+00, -6.984376725173973e+00, -7.460788442711614e+00, -6.982724949902028e+00, -6.984457633796681e+00, -7.458973152771393e+00, -2.520328245409193e+00, -2.520140966369654e+00, -2.538232611571276e+00, -2.537490865227858e+00, -2.505205253159487e+00, -2.509375971713531e+00, -2.520811913350080e+00, -2.525131562251008e+00, -2.541540878282996e+00, -2.584651193067974e+00, -2.541540878282996e+00, -2.530786844450075e+00, -7.573815305450290e-01, -8.309492014550668e-01, -8.415026694077729e-01, -8.434928651978406e-01, -6.850865071655400e-01, -7.100437949484969e-01, -7.147499386959575e-01, -7.409775617495552e-01, -7.917756546269067e-01, -8.240490795603829e-01, -7.917756546269062e-01, -7.490999446341819e-01, -1.054788659197089e-01, -1.065150330154750e-01, -1.870190117319320e-01, -2.109274624972669e-01, -9.513945173126691e-02, -1.004450834408712e-01, -2.487588322061141e+00, -2.486535572213503e+00, -1.217761880311532e-01, -1.302034248484884e-01, -1.217761880311532e-01, -1.302034248484885e-01, -3.007624122187006e-03, -3.130232267365940e-03, -3.863207420730388e-03, -3.921674154957026e-03, -2.888837631737807e-03, -3.059400348706008e-03, -6.516104842000812e-02, -6.412568663023217e-02, -2.950450157508489e-03, -4.052069327865005e-03, -2.950450157508485e-03, -4.052069327865012e-03, -8.199399905827633e-01, -8.234951745435445e-01, -8.026704482629620e-01, -8.063110006067781e-01, -8.354191470510756e-01, -8.385725636718394e-01, -8.360334507542566e-01, -8.171859595896789e-01, -8.357285889128353e-01, -8.388784963116914e-01, -8.357285889128352e-01, -8.146901969303519e-01, -7.961585604157143e-01, -7.992201447097851e-01, -6.315262362878747e-01, -6.896810865841961e-01, -6.663765970922138e-01, -7.376641632603547e-01, -7.116352025711727e-01, -7.144266323987377e-01, -6.872051015315136e-01, -6.901096557158503e-01, -6.872051015315133e-01, -7.565978835927155e-01, -8.733654079542171e-01, -9.591325843576157e-01, -2.717845810331455e-01, -2.735647429039808e-01, -3.007642315948598e-01, -3.364935837139437e-01, -4.518490645562877e-01, -4.489536553196364e-01, -3.889640040462214e-01, -3.888683788007050e-01, -3.889640040462213e-01, -3.730512602652981e-01, -5.807882999134250e-01, -5.846383753492564e-01, -3.795160552062574e-02, -3.821063723086551e-02, -5.154995763260155e-02, -5.329286482438878e-02, -4.277213674141898e-01, -4.338249661117677e-01, -8.130203972163132e-02, -8.610630622277610e-02, -8.130203972163133e-02, -8.610630622277606e-02, -9.537655894302008e-03, -9.883246026649688e-03, -1.039321342897617e-03, -1.041696787559397e-03, -2.111706412255015e-03, -2.245958839379869e-03, -7.523948956314429e-02, -7.633187938843722e-02, -2.794723041944490e-03, -3.713990721509874e-03, -2.794723041944482e-03, -3.708124978834398e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_3_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_3", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.735071115112638e-08, 0.000000000000000e+00, -2.735217893505670e-08, -2.735055246861988e-08, 0.000000000000000e+00, -2.735206335809168e-08, -2.734990199837030e-08, 0.000000000000000e+00, -2.735117090329975e-08, -2.735171049097469e-08, 0.000000000000000e+00, -2.979802945802176e-08, -2.735062875228192e-08, 0.000000000000000e+00, -2.979652327589792e-08, -2.979469860367392e-08, 0.000000000000000e+00, -2.979652327589792e-08, -2.955091077779547e-05, 0.000000000000000e+00, -2.508859081217622e-05, -2.955641457060745e-05, 0.000000000000000e+00, -2.955141676478982e-05, -2.966381800274971e-05, 0.000000000000000e+00, -2.968177003276286e-05, -2.961480400438182e-05, 0.000000000000000e+00, -2.961329523814861e-05, -2.955758568102419e-05, 0.000000000000000e+00, -2.970772130300503e-05, -2.509623039258823e-05, 0.000000000000000e+00, -2.970772130300503e-05, -8.903266829480713e-03, 0.000000000000000e+00, -9.063860915492938e-03, -8.871139801876813e-03, 0.000000000000000e+00, -1.111798634218873e-02, -1.035382167168237e-02, 0.000000000000000e+00, -1.036178125821039e-02, -1.076666091246423e-02, 0.000000000000000e+00, -8.846723065793559e-03, -8.981340058390888e-03, 0.000000000000000e+00, -8.229247442297737e-03, -1.102676010431180e-02, 0.000000000000000e+00, -1.030543458233504e-02, -1.100157444525630e+00, 0.000000000000000e+00, -1.499549922057525e+00, -1.111321183774175e+00, 0.000000000000000e+00, -1.510450871433758e+00, -2.905365567301299e-03, 0.000000000000000e+00, -2.575221580349915e-03, -1.249663620119356e+00, 0.000000000000000e+00, -1.403651570460885e+00, -1.202134493717449e+00, 0.000000000000000e+00, -1.666508980042170e+00, -1.202134493717449e+00, 0.000000000000000e+00, -1.016877672155222e+00, -6.140483509425762e+02, 0.000000000000000e+00, -5.450405046682059e+02, -2.897571079332503e+02, 0.000000000000000e+00, -4.996937579454174e+02, -6.924317976419163e+00, 0.000000000000000e+00, -1.214530065571825e+01, -1.451651969575164e+03, 0.000000000000000e+00, -1.508904702619363e+03, -7.516341810931659e+02, 0.000000000000000e+00, -3.033680504755546e+03, -7.516341810931659e+02, 0.000000000000000e+00, -3.033680504755547e+03, -8.749376529432462e-06, 0.000000000000000e+00, -8.757795427120035e-06, -8.747712369883312e-06, 0.000000000000000e+00, -8.756188274452137e-06, -8.749319617841834e-06, 0.000000000000000e+00, -8.757766001665185e-06, -8.747888988760824e-06, 0.000000000000000e+00, -8.756303216495237e-06, -8.218237515807779e-06, 0.000000000000000e+00, -8.756989082712582e-06, -8.748504496442338e-06, 0.000000000000000e+00, -8.226165804582851e-06, -2.542142717292063e-04, 0.000000000000000e+00, -2.551031405435912e-04, -2.548606462972653e-04, 0.000000000000000e+00, -2.557004288337475e-04, -2.529311307831915e-04, 0.000000000000000e+00, -2.541984429277349e-04, -2.538692225560122e-04, 0.000000000000000e+00, -2.550372473451457e-04, -2.553777619812843e-04, 0.000000000000000e+00, -2.146717078772067e-04, -2.553777619812843e-04, 0.000000000000000e+00, -2.556539052609256e-04, -4.563764321188371e-02, 0.000000000000000e+00, -4.087070200232250e-02, -3.780844337415683e-02, 0.000000000000000e+00, -3.792375828741786e-02, -5.484063483016711e-02, 0.000000000000000e+00, -5.271186555849004e-02, -5.632659206265654e-02, 0.000000000000000e+00, -5.182135925612276e-02, -4.120504286569512e-02, 0.000000000000000e+00, -4.271538561870286e-02, -4.120504286569512e-02, 0.000000000000000e+00, -4.845948316370396e-02, -2.029740145481674e+00, 0.000000000000000e+00, -1.994317792945429e+00, -5.762207733827593e-01, 0.000000000000000e+00, -7.669019880345684e-01, -2.401394302688643e+00, 0.000000000000000e+00, -2.282840344108471e+00, -4.219772512621612e-04, 0.000000000000000e+00, -4.228220675509190e-04, -1.986783770711699e+00, 0.000000000000000e+00, -2.306972139730380e+00, -1.986783770711700e+00, 0.000000000000000e+00, -2.306972139730382e+00, -1.116849447502733e+03, 0.000000000000000e+00, -1.953140294838316e+03, -1.527047637310595e+03, 0.000000000000000e+00, -1.391222039604501e+03, -7.331299250213063e+03, 0.000000000000000e+00, -6.849898533268121e+03, -5.244964443087147e+00, 0.000000000000000e+00, -3.115276487499899e+00, -3.048872792486808e+03, 0.000000000000000e+00, -2.884134417093651e+03, -3.048872792486808e+03, 0.000000000000000e+00, -2.884134417093651e+03, -5.556005504087559e-02, 0.000000000000000e+00, -5.471995298683029e-02, -5.633985855719075e-02, 0.000000000000000e+00, -5.549500461262821e-02, -5.443406243593171e-02, 0.000000000000000e+00, -5.365005140409933e-02, -5.448941416634431e-02, 0.000000000000000e+00, -5.502535873410692e-02, -5.446369972817997e-02, 0.000000000000000e+00, -5.367587107774079e-02, -5.446369972817997e-02, 0.000000000000000e+00, -5.513912006480805e-02, -6.188438450208794e-02, 0.000000000000000e+00, -6.108805485462921e-02, -8.586178566490439e-02, 0.000000000000000e+00, -7.353626696250641e-02, -8.172118631025833e-02, 0.000000000000000e+00, -7.194058365933896e-02, -7.501398223204486e-02, 0.000000000000000e+00, -7.404026342579405e-02, -7.870389874225445e-02, 0.000000000000000e+00, -7.771076538254555e-02, -7.870389874225442e-02, 0.000000000000000e+00, -7.045304166888711e-02, -3.042198122945360e-02, 0.000000000000000e+00, -2.784786063588975e-02, -5.260182902660318e-01, 0.000000000000000e+00, -5.219868515041148e-01, -3.211768858237900e-01, 0.000000000000000e+00, -3.990445811079401e-01, -2.128540702386888e-01, 0.000000000000000e+00, -2.492521826232073e-01, -3.402494051203724e-01, 0.000000000000000e+00, -3.430697563052411e-01, -3.402494051203726e-01, 0.000000000000000e+00, -2.827519360998037e-01, -1.052745144351609e-01, 0.000000000000000e+00, -1.052165177674836e-01, -7.371424816781347e+00, 0.000000000000000e+00, -7.200325520759801e+00, -7.326547166291445e+00, 0.000000000000000e+00, -7.030421909444938e+00, -3.494076014534863e-01, 0.000000000000000e+00, -3.658457489964503e-01, -4.068096385250504e+00, 0.000000000000000e+00, -4.238333551397070e+00, -4.068096385250505e+00, 0.000000000000000e+00, -4.238333551397070e+00, -1.061888804603840e+02, 0.000000000000000e+00, -9.820125996833460e+01, -2.260696997526037e+04, 0.000000000000000e+00, -2.245445841335235e+04, -4.619232594753244e+03, 0.000000000000000e+00, -4.203407388261568e+03, -2.802033517906847e+00, 0.000000000000000e+00, -2.939179791898427e+00, -5.460371431006425e+03, 0.000000000000000e+00, -3.494727272525592e+03, -5.460371431006438e+03, 0.000000000000000e+00, -1.776211021894172e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_3_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_3", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.444160054517323e-03, 1.444237194589458e-03, 1.444166439711918e-03, 1.444241815256457e-03, 1.444181798539337e-03, 1.444265215055267e-03, 1.444110534954927e-03, 1.903247545442922e-03, 1.444164404110933e-03, 1.903168850502804e-03, 1.903161517852675e-03, 1.903168850502804e-03, 1.111527927521855e-02, 4.371008932991132e-03, 1.111650900968077e-02, 1.111520965057868e-02, 1.114031586535471e-02, 1.114442992719721e-02, 1.113075394763176e-02, 1.113063061900173e-02, 1.111431727884308e-02, 1.115172939514585e-02, 4.369043739329142e-03, 1.115172939514585e-02, 4.126536897960694e-03, 4.530609358335570e-03, 4.015082748820369e-03, 3.421963931397692e-02, 2.967921424024942e-02, 2.910515999451114e-02, 3.117036659234995e-02, 3.364513110104915e-03, 4.776981499304661e-03, 1.596124265465026e-03, 3.474069200874474e-02, 2.692203501646535e-02, 3.409306368003277e-05, 8.414179135047654e-02, 6.089483508106328e-04, 8.944316974223392e-02, 1.330098297264766e-02, 2.736487433055380e-04, 2.594334015036023e-02, 3.078886920901996e-02, 6.802314648266511e-02, 1.244891029475331e-02, 6.802314648266503e-02, -7.855304991789925e-04, 9.715675717032532e-04, 1.034832263282942e-03, -7.453541952396454e-07, 1.118590654081087e-03, -5.996067773465492e-05, 4.555172849177856e-03, 4.986875647633719e-04, 4.928701161091002e-04, 8.441985131512152e-04, 6.277058561281488e-04, 8.441985131512152e-04, 6.277058561281471e-04, 7.459765306380138e-03, 7.461506821752038e-03, 7.451040420761230e-03, 7.453072679907321e-03, 7.459169698059005e-03, 7.461136870226533e-03, 7.451688008880160e-03, 7.453479576710744e-03, 6.257450382729117e-03, 7.457286422422073e-03, 7.455382178630714e-03, 6.258924397709116e-03, 1.794841570186588e-02, 1.799150330515243e-02, 1.822082638115793e-02, 1.825342349838221e-02, 1.767259568583126e-02, 1.779675720157829e-02, 1.793724719548107e-02, 1.805571521634550e-02, 1.828992298815024e-02, 5.881816643720853e-03, 1.828992298815024e-02, 1.816273678187889e-02, 7.173345390238327e-02, 4.202008686121109e-02, 6.348385275501946e-02, 6.314850291878965e-02, 7.347958850212569e-02, 7.439961540675845e-02, 7.577398063072099e-02, 7.357032578217879e-02, 6.888644268944910e-02, 4.289077170279021e-02, 6.888644268944898e-02, 7.265319606513136e-02, 1.321661557213465e-02, 1.337822013373010e-02, -2.083639168364967e-03, 3.961437486329870e-02, 1.141595673813841e-02, 1.281595095265759e-02, 2.192663756439580e-02, 2.193582865759910e-02, 2.009050369348853e-02, 2.857071452227672e-02, 2.009050369348853e-02, 2.857071452227682e-02, -3.047810623942665e-08, 3.179192012002520e-04, 4.672759022056090e-04, 4.453341638807715e-04, 9.381079776296249e-04, 1.041139863592028e-03, 7.892522629615021e-03, -3.260156165870959e-04, 4.155893095793458e-04, 1.018565280498572e-03, 4.155893095793456e-04, 1.018565280498573e-03, 5.900840180284865e-02, 5.869656824084745e-02, 6.219138774290214e-02, 6.183451657216870e-02, 5.707754597634490e-02, 5.685736348521402e-02, 5.696773735891313e-02, 5.983886788353802e-02, 5.703033522215630e-02, 5.680753013665812e-02, 5.703033522215630e-02, 6.029429586455069e-02, 6.105183021534365e-02, 6.075065869221939e-02, 8.420749121855134e-02, 4.232815145963375e-02, 8.185476849444699e-02, 5.232480987789383e-02, 7.481015759404167e-02, 7.447058646844534e-02, 7.885572129577922e-02, 7.847756956703043e-02, 7.885572129577920e-02, 5.579316049951256e-02, 6.197278656076129e-02, 4.501277460822848e-02, 5.571611416266033e-02, 5.629172839067391e-02, 6.187808710269724e-03, 7.546246856817938e-02, 3.055544207754440e-02, 9.981347086245020e-02, 9.355256776838185e-02, 9.414160747824100e-02, 9.355256776838176e-02, 1.915073915253203e-02, 8.626268947689820e-02, 8.691858674975372e-02, -5.965408625258154e-05, -5.966644216995541e-05, 5.407946606064257e-03, 5.740691630045414e-03, 1.155015900170181e-01, 1.201527907404320e-01, 1.204263007805105e-02, 1.499039095810177e-02, 1.204263007805105e-02, 1.499039095810170e-02, -8.823699314713716e-07, -9.676295710993854e-07, 1.346855834686123e-04, 1.346963371020767e-04, -4.385371811489068e-08, -5.589707583943250e-08, -6.601233112714664e-04, -7.650465497882851e-04, 6.325781243241422e-04, 9.503017240657982e-04, 6.325781243241393e-04, -3.330881017394981e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
