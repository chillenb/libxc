
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_modtpss_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_modtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.225876943338071e+01, -2.225882326668559e+01, -2.225917224670231e+01, -2.225829373597132e+01, -2.225879684655896e+01, -2.225879684655896e+01, -3.444365774414425e+00, -3.444374069054533e+00, -3.444868270459860e+00, -3.446654304137121e+00, -3.444373515230465e+00, -3.444373515230465e+00, -6.689556229675396e-01, -6.688384828142153e-01, -6.684714125722804e-01, -6.742042459890966e-01, -6.689116555209034e-01, -6.689116555209034e-01, -2.084276631230334e-01, -2.092383367844833e-01, -7.777483195405708e-01, -1.768751026156216e-01, -2.086351061992950e-01, -2.086351061992950e-01, -1.701256013793548e-02, -1.781594006553663e-02, -7.063101253545893e-02, -8.176129483376702e-03, -1.763036227384374e-02, -1.763036227384374e-02, -5.449759805039486e+00, -5.450722937002063e+00, -5.449906929396638e+00, -5.450653370998530e+00, -5.450187701399788e+00, -5.450187701399788e+00, -2.080409896487546e+00, -2.094039314767764e+00, -2.079318747537861e+00, -2.089883016255047e+00, -2.091207049193049e+00, -2.091207049193049e+00, -5.840217047677939e-01, -6.020118366645767e-01, -5.476816773484158e-01, -5.484968382005937e-01, -6.076879788530617e-01, -6.076879788530617e-01, -1.448040633236712e-01, -2.306505885803178e-01, -1.421106698705850e-01, -1.810368498747473e+00, -1.585002649083598e-01, -1.585002649083598e-01, -7.887546210519708e-03, -9.013036657176648e-03, -6.755497176851376e-03, -9.576261853129726e-02, -8.212234180163563e-03, -8.212234180163563e-03, -5.858014293991969e-01, -6.041643572034269e-01, -6.002074271105277e-01, -5.955304473151167e-01, -5.980827973179287e-01, -5.980827973179287e-01, -5.522305671479824e-01, -5.275870909576447e-01, -5.464987114826902e-01, -5.618086134271800e-01, -5.541933435328317e-01, -5.541933435328317e-01, -6.288515716601509e-01, -2.715140615286347e-01, -3.038020968444566e-01, -3.621347124277447e-01, -3.306545495388661e-01, -3.306545495388660e-01, -4.700866764774712e-01, -6.581144608183685e-02, -8.740949089017504e-02, -3.358894885478736e-01, -1.197170659086981e-01, -1.197170659086981e-01, -1.993009905233000e-02, -2.468809982468230e-03, -4.689258143491445e-03, -1.141040934114933e-01, -6.979793998023261e-03, -6.979793998023251e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_modtpss_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_modtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.755449210660160e+01, -2.755454968197185e+01, -2.755500242206865e+01, -2.755406574359607e+01, -2.755452070255558e+01, -2.755452070255558e+01, -4.184355019128922e+00, -4.184397464341283e+00, -4.185836363945795e+00, -4.185836933816873e+00, -4.184385384668396e+00, -4.184385384668396e+00, -7.705115814641361e-01, -7.689540831344815e-01, -7.253916234206452e-01, -7.349694259072465e-01, -7.699488377403517e-01, -7.699488377403517e-01, -1.961315438379144e-01, -2.002905647320337e-01, -9.602829523470710e-01, -1.561927084851195e-01, -1.973379334589938e-01, -1.973379334589938e-01, -2.258271328419844e-02, -2.363868904717441e-02, -8.909829703615527e-02, -1.089215895515664e-02, -2.339267803091636e-02, -2.339267803091636e-02, -6.714256273943704e+00, -6.714073819019132e+00, -6.714311073232108e+00, -6.714165354323612e+00, -6.714065037162047e+00, -6.714065037162047e+00, -2.387100000436194e+00, -2.417939179576779e+00, -2.375285545010703e+00, -2.399802617880760e+00, -2.422410443631250e+00, -2.422410443631250e+00, -7.120426072419938e-01, -7.809078014326744e-01, -6.672893355956299e-01, -7.062197480484866e-01, -7.432970863119823e-01, -7.432970863119823e-01, -1.525808126215703e-01, -1.982029185078306e-01, -1.480490098451803e-01, -2.376053886779555e+00, -1.512872271994060e-01, -1.512872271994060e-01, -1.050808547619494e-02, -1.200446740659510e-02, -8.998130275564828e-03, -1.140971295853410e-01, -1.093777249024558e-02, -1.093777249024558e-02, -7.446974934733418e-01, -7.409277475531663e-01, -7.405334392337443e-01, -7.411719959990928e-01, -7.407049790883282e-01, -7.407049790883282e-01, -7.258365277347553e-01, -6.483762778496902e-01, -6.760768776964313e-01, -6.903952977313856e-01, -6.835819260022120e-01, -6.835819260022120e-01, -8.182140016629538e-01, -2.454109044474980e-01, -3.070828598494783e-01, -4.236002933968357e-01, -3.678540565343191e-01, -3.678540565343190e-01, -5.620133059002707e-01, -8.404369224488421e-02, -1.073499434235586e-01, -4.025509521422331e-01, -1.308340732541483e-01, -1.308340732541482e-01, -2.643292126543371e-02, -3.291399151048228e-03, -6.250133655345653e-03, -1.244606355498396e-01, -9.297584792533618e-03, -9.297584792533604e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_modtpss_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_modtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.332195650144013e-08, -1.332228828407981e-08, -1.332306164578259e-08, -1.331764796677731e-08, -1.332213732570314e-08, -1.332213732570314e-08, -1.200365923077508e-05, -1.200563274927704e-05, -1.206273875725055e-05, -1.202603044521528e-05, -1.200404343338348e-05, -1.200404343338348e-05, -5.490947451980368e-03, -5.509191235746697e-03, -5.929065499234738e-03, -5.814060131149542e-03, -5.497838061942077e-03, -5.497838061942077e-03, -6.873725278265328e-01, -6.696472306093232e-01, -1.689198375578699e-03, -1.213435282226556e+00, -6.826607079419311e-01, -6.826607079419311e-01, -4.496040515059669e+00, -4.511272578745050e+00, -2.022925534377661e+00, -3.166602928491539e+00, -4.686391948826183e+00, -4.686391948826183e+00, -5.914301510744113e-06, -5.972706072243666e-06, -5.920324972548598e-06, -5.965722979436741e-06, -5.944031390394669e-06, -5.944031390394669e-06, -6.099080135501792e-05, -5.884183848001270e-05, -6.040769676611586e-05, -5.866198098581613e-05, -6.045131832529400e-05, -6.045131832529400e-05, -2.003072289619564e-02, -2.159244919243446e-02, -2.181581336171211e-02, -2.248242644228274e-02, -1.983580422059989e-02, -1.983580422059989e-02, -1.297450025683552e+00, -4.733068384556326e-01, -1.496410250157451e+00, -1.517754075758324e-04, -1.458917635956021e+00, -1.458917635956021e+00, -3.359098800953298e+00, -3.367372878582866e+00, -9.637279735134188e+00, -2.109504832096428e+00, -4.973854078618775e+00, -4.973854078618767e+00, -1.579522775159033e-01, -9.215628182992874e-02, -1.116050992792243e-01, -1.306309375115883e-01, -1.206556057571108e-01, -1.206556057571108e-01, -9.132288829271477e-02, -1.806312211350895e-02, -2.519817425634479e-02, -4.200721580809053e-02, -3.190121592781572e-02, -3.190121592781571e-02, -1.459123361035555e-02, -2.433502454216301e-01, -1.440097388070256e-01, -8.198935416697958e-02, -1.006348820558488e-01, -1.006348820558488e-01, -3.017008041615018e-02, -1.684597379130542e+00, -1.760979003991781e+00, -1.334121809145404e-01, -2.165470591573021e+00, -2.165470591573025e+00, -3.382290579188488e+00, -5.783083306557799e+00, -4.981352320771823e+00, -2.662271958345127e+00, -7.262328482261982e+00, -7.262328482261968e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_modtpss_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_modtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.839568871904653e-03, 1.839635801183963e-03, 1.839932185335088e-03, 1.838844302155510e-03, 1.839604084681443e-03, 1.839604084681443e-03, 2.573769339154674e-03, 2.574647703895336e-03, 2.602049772197573e-03, 2.604994464802305e-03, 2.573911569306058e-03, 2.573911569306058e-03, 3.740086878288745e-03, 3.744148488764062e-03, 3.614976132548377e-03, 4.038642591410917e-03, 3.742363131377738e-03, 3.742363131377738e-03, 6.886359801727957e-03, 7.931473982759583e-03, 4.669461488150570e-04, 6.385399585485702e-04, 7.210914732097601e-03, 7.210914732097601e-03, 2.419942163293730e-11, 2.849480972450474e-11, 2.604623606603127e-07, 2.278774976188600e-13, 3.268589529592765e-11, 3.268589529592709e-11, 1.307874457360025e-02, 1.321752446259616e-02, 1.309456328290025e-02, 1.320236594736944e-02, 1.314734824468148e-02, 1.314734824468148e-02, 2.714353922773760e-03, 2.794690515974205e-03, 2.564764053741355e-03, 2.621833453392273e-03, 2.974633081398783e-03, 2.974633081398783e-03, 2.988736811769170e-02, 2.351741761756699e-02, 2.193659592591496e-02, 1.663502781650929e-02, 3.612552842566598e-02, 3.612552842566598e-02, 5.220517131656591e-05, 1.679398170975928e-03, 6.504423913539879e-05, 3.238932289231801e-03, 2.499268337081534e-04, 2.499268337081534e-04, 1.369818590148527e-13, 4.568641020065193e-13, 2.746026348041824e-13, 4.825164106592197e-06, 5.826265835640332e-13, 5.826265835640322e-13, 2.568001387800873e-01, 2.218708018161283e-01, 2.499537044024658e-01, 2.673306407644082e-01, 2.596294687733895e-01, 2.596294687733895e-01, 7.103881756372998e-02, 2.606035617105993e-02, 4.648812311776111e-02, 8.285653258931895e-02, 6.132361838214982e-02, 6.132361838214983e-02, 1.643151954420166e-02, 3.295279901709551e-03, 7.782109083965323e-03, 2.219246167613039e-02, 1.467127772092546e-02, 1.467127772092545e-02, 2.251896833008817e-02, 8.501561878290195e-08, 1.138105426311887e-06, 3.230764663182584e-02, 3.038599709524667e-05, 3.038599709524678e-05, 1.334183766372601e-10, 1.793598727816207e-16, 4.280133739846684e-15, 3.338380835617441e-05, 4.028093475596662e-13, 4.028093475596604e-13])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
