
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_modtpss_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_modtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.990338901221756e+01, -1.990344161135224e+01, -1.990371145172059e+01, -1.990284986317251e+01, -1.990341645144343e+01, -1.990341645144343e+01, -3.234741860871859e+00, -3.234738920464273e+00, -3.234768638086799e+00, -3.235015012814634e+00, -3.234756430855024e+00, -3.704684153997999e+00, -6.297387846829025e-01, -7.590158221379848e-01, -7.543829195147690e-01, -7.531223029716917e-01, -7.591332010719151e-01, -7.591332010719151e-01, -2.127146636885925e-01, -2.140175008454330e-01, -7.595787439483167e-01, -1.879481933481417e-01, -2.131249675436107e-01, -2.131249675436107e-01, -1.701331598315841e-02, -1.781703804186445e-02, -7.088459653000766e-02, -8.177202675472277e-03, -1.763130346448746e-02, -1.763130346448746e-02, -5.453359682538160e+00, -5.454318331822402e+00, -5.453460744053454e+00, -4.864268007904076e+00, -5.453846940097167e+00, -5.453846940097167e+00, -1.824915457841453e+00, -1.836381423473254e+00, -1.820348712960410e+00, -1.829253192508462e+00, -1.838607631551097e+00, -2.117617192848893e+00, -6.108885554903920e-01, -6.607794968729380e-01, -5.827422476038966e-01, -6.034747973289623e-01, -6.329453879709975e-01, -5.597237005376324e-01, -9.314592199875676e-02, -2.342833412831442e-01, -9.194338434813180e-02, -2.013534084580644e+00, -1.620976694296532e-01, -1.620976694296532e-01, -4.526749921166493e-03, -9.014218606711142e-03, -6.755890376054056e-03, -5.801922208956858e-02, -4.713708806792633e-03, -8.213612813600025e-03, -6.273871024781541e-01, -6.240995901720675e-01, -5.600922525115027e-01, -6.261986641508780e-01, -6.257440294880589e-01, -6.257440294880589e-01, -6.072843818917535e-01, -5.299073709867911e-01, -5.511833978720784e-01, -5.721840691119560e-01, -5.613644299748352e-01, -4.984008617177044e-01, -6.932417459098469e-01, -2.192761172270668e-01, -3.100513957135046e-01, -3.272594092610478e-01, -3.391016261846581e-01, -3.391016261846580e-01, -4.215402528328613e-01, -6.592062336495000e-02, -8.797059823120081e-02, -3.525545378110279e-01, -7.562004254826979e-02, -1.215082668625900e-01, -1.994563396480198e-02, -2.468861257201167e-03, -4.689327491660292e-03, -1.159490612676473e-01, -6.980859553216884e-03, -6.980859553216873e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_modtpss_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_modtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.680273363826898e+01, -2.680280330404684e+01, -2.680316158131530e+01, -2.680202028425340e+01, -2.680276997464684e+01, -2.680276997464684e+01, -4.242645917843479e+00, -4.242685350725913e+00, -4.244032010619688e+00, -4.243847581855046e+00, -4.242677043322308e+00, -4.383231312635200e+00, -8.195621520961215e-01, -7.318614481302205e-01, -6.977660624135094e-01, -7.090413393816102e-01, -7.327919544592512e-01, -7.327919544592512e-01, -1.959932460517936e-01, -1.997104982807349e-01, -9.968271858569109e-01, -1.817812181706139e-01, -1.970689461049250e-01, -1.970689461049250e-01, -2.258572491112092e-02, -2.364306325789844e-02, -9.007375134926698e-02, -1.089644967023915e-02, -2.339642711719689e-02, -2.339642711719689e-02, -6.720659423181352e+00, -6.720430021451631e+00, -6.720628364437379e+00, -6.539668052473914e+00, -6.720553435962552e+00, -6.720553435962552e+00, -2.374579346718907e+00, -2.392325730276114e+00, -2.367524543661647e+00, -2.381177587107881e+00, -2.396017506153175e+00, -2.430073251869318e+00, -7.559158535167915e-01, -8.219013098069283e-01, -7.073362671249112e-01, -7.509247571856296e-01, -7.882249552119023e-01, -7.516633823879463e-01, -1.239339620259787e-01, -2.026214168246310e-01, -1.223168871421789e-01, -2.508379371787948e+00, -1.608695797440863e-01, -1.608695797440863e-01, -6.035631399655858e-03, -1.200919224742915e-02, -8.999702034581279e-03, -7.730150067512800e-02, -6.284904977093653e-03, -1.094328369423106e-02, -7.507431839307610e-01, -7.551813352051486e-01, -7.495459360562514e-01, -7.524873715981211e-01, -7.531173394117503e-01, -7.531173394117503e-01, -7.297178788686011e-01, -6.530681039871664e-01, -6.872840810286618e-01, -7.096856593931534e-01, -6.994169766944228e-01, -6.711683507775006e-01, -8.643956067487680e-01, -2.870695585338809e-01, -3.049921327026566e-01, -4.261409132050040e-01, -3.664855593160866e-01, -3.664855593160863e-01, -5.544548026119507e-01, -8.446682020003997e-02, -1.094649268272461e-01, -4.193507335970781e-01, -1.006489487652081e-01, -1.368332895312764e-01, -2.649487437969495e-02, -3.291604238600604e-03, -6.250410982311070e-03, -1.306360169228925e-01, -9.301844787182476e-03, -9.301844787182462e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_modtpss_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_modtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.877879117928256e-09, -6.877912654525254e-09, -6.878003833759979e-09, -6.877466292786593e-09, -6.877897159731726e-09, -6.877897159731726e-09, -4.849294631222574e-06, -4.850225082700731e-06, -4.877594693338677e-06, -4.865423851804430e-06, -4.849460629275296e-06, -5.548806628430229e-06, -1.899666676259318e-03, -3.695436426058884e-03, -3.947080982762978e-03, -3.906431109204403e-03, -3.688837106807160e-03, -3.688837106807160e-03, -6.266193212301980e-01, -6.042404524552492e-01, -6.996685459902819e-04, -7.028708934256960e-01, -6.197709049557125e-01, -6.197709049557125e-01, -4.318602484525905e+00, -4.287137275392896e+00, -1.535068350656092e+00, -1.524950603147806e+00, -4.484031866023611e+00, -4.484031866023608e+00, -5.881253259237208e-06, -5.939785196539424e-06, -5.887709353563820e-06, -2.439701797353706e-06, -5.910481426643874e-06, -5.910481426643874e-06, -4.021843439470239e-05, -4.049611829733499e-05, -4.005887288060915e-05, -4.029044837779719e-05, -4.063555091087494e-05, -5.141979415905085e-05, -9.851957663547154e-03, -1.586525925289052e-02, -9.747234478052716e-03, -1.227643727223874e-02, -1.062182553234056e-02, -8.567566666100264e-03, -1.604001904292044e+00, -4.314724240600475e-01, -1.710842690944946e+00, -1.063398262835230e-04, -1.137134247868099e+00, -1.137134247868099e+00, -2.258596325753508e+05, -1.924998231295744e+00, -7.566675975442586e+00, -9.245629277739853e+00, -1.921188418556381e+05, -2.371696689523060e+00, -1.888864593895946e-01, -8.756624425341236e-02, -2.851373656559418e-02, -1.349429289346325e-01, -1.211869171118146e-01, -1.211869171118146e-01, -1.531794473588835e-01, -1.626247218195538e-02, -2.124980322423832e-02, -3.423201988865530e-02, -2.605096288202317e-02, -1.630130833832495e-02, -9.903643021947562e-03, -1.082721012531544e-01, -1.299257010927976e-01, -3.968224127512130e-02, -8.187113424454924e-02, -8.187113424454932e-02, -1.769063633334258e-02, -1.436819400122918e+00, -1.258018021047666e+00, -6.818912644530115e-02, -3.578036277646013e+00, -1.588297314298375e+00, -1.686019764473541e+00, -2.127519332535947e+00, -4.182914920632470e+00, -1.906884806427113e+00, -3.333666741700544e+00, -3.333666741700540e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_modtpss_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_modtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.553028533403984e-04, 1.553060152525317e-04, 1.553195144523438e-04, 1.552681061196581e-04, 1.553045212217794e-04, 1.553045212217794e-04, -5.295704463602061e-04, -5.293638943106338e-04, -5.230365792572778e-04, -5.254666120393311e-04, -5.295106109493756e-04, 1.736440034470437e-03, -1.877921041005190e-03, 1.614822472489270e-03, 1.163733745312283e-03, 1.352218361134408e-03, 1.628137760119841e-03, 1.628137760119841e-03, 3.988581120796077e-03, 4.423910144637955e-03, -6.935918520053238e-04, 2.244458680130468e-04, 4.108045638594843e-03, 4.108045638594843e-03, 6.045510035052173e-09, 7.541361835465262e-09, 1.847258517536894e-06, 3.216058860273410e-11, 7.655189616850388e-09, 7.655189616851289e-09, 1.312221911991054e-02, 1.326182938006783e-02, 1.313757969524007e-02, 7.827353745426298e-04, 1.319198705835734e-02, 1.319198705835734e-02, -1.126088257071842e-03, -1.107518146544142e-03, -1.130859339293568e-03, -1.120469525483508e-03, -1.101549483788544e-03, 2.190234719975669e-03, 2.415227411983085e-02, 6.162511244229167e-02, 1.596888450649991e-02, 3.202692730486933e-02, 3.256549800232224e-02, 2.548910470401492e-03, -1.560885192826283e-04, 1.016050019695743e-03, -1.779999729764478e-04, 1.059124619217154e-02, 1.924201054622417e-04, 1.924201054622417e-04, -3.023074456143677e-08, 7.430094529471149e-11, 1.369629594268020e-10, -3.526653629042714e-05, -3.481798560312385e-08, 6.380910764556650e-11, 6.428401150115973e-01, 2.935083128187767e-01, 7.667341384037245e-03, 4.566584421587776e-01, 4.092452144728430e-01, 4.092452144728430e-01, 4.728036985227467e-01, 2.449845360818834e-02, 4.491776380698663e-02, 8.736213634571756e-02, 6.109875260623918e-02, 5.465042652873639e-03, 4.298734499133835e-02, -3.107291676449878e-03, 4.579736057117461e-03, -6.245058499013256e-03, 8.264648792987134e-03, 8.264648792987127e-03, -3.580298350339336e-03, 1.132765413803935e-06, 4.320757664140687e-06, 1.950304059628579e-02, -1.392407300421027e-04, 4.375749991280175e-05, 3.259669234219976e-09, 1.327389210065482e-13, 9.053664747382367e-12, 4.546321303454418e-05, 4.714180866108067e-11, 4.714180866111894e-11]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
