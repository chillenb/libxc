
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_jk_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_jk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.155039466958952e+01, -2.155042685101110e+01, -2.155063809607789e+01, -2.155010949061553e+01, -2.155041106851383e+01, -2.155041106851383e+01, -3.551771359920707e+00, -3.551755762875314e+00, -3.551472919050789e+00, "nan", -3.551778468211538e+00, -3.227102403261576e+00, -6.985507385318325e-01, -6.179569467514081e-01, -6.014996914531774e-01, -6.062352836931093e-01, -6.183603351037216e-01, -6.183603351037216e-01, -1.692271533543928e-01, -1.714804248840375e-01, -8.246447537432561e-01, -1.226895814226986e-01, -1.699030473159558e-01, -1.699030473159558e-01, -9.451444078539793e-03, -9.899947909746104e-03, -4.023900744151538e-02, -4.534166342338011e-03, -9.796780482093969e-03, -9.796780482093969e-03, -4.829749635160879e+00, -4.830608612259756e+00, -4.829840264272041e+00, -5.193169453336687e+00, -4.830186224383225e+00, -4.830186224383225e+00, -2.079503856026796e+00, -2.091736258303149e+00, -2.076967267181919e+00, -2.086517371972857e+00, -2.091022920651516e+00, -1.829511244254968e+00, -5.385550001574309e-01, -5.850053097040899e-01, -5.110350135518346e-01, -5.330233457713495e-01, -5.592473586497322e-01, -6.084768516363086e-01, -1.248233807801391e-01, -1.704395782422006e-01, -1.224970241626300e-01, -1.779386295215369e+00, -1.042337014238125e-01, -1.042337014238125e-01, -2.191135386452276e-02, -4.998826078831668e-03, -3.746645581951757e-03, -8.555457217004467e-02, -2.077912103280926e-02, -4.554705621140559e-03, -5.557209301168958e-01, -5.527541423526972e-01, -5.746093558148394e-01, -5.546381832244974e-01, -5.542275185576465e-01, -5.542275185576465e-01, -5.378856844182659e-01, -4.666134558350790e-01, -4.873987335749924e-01, -5.066743525326738e-01, -4.968524922578301e-01, -5.409715276143963e-01, -6.133774743520365e-01, -2.594560686161981e-01, -2.545989653515405e-01, -3.672574215679056e-01, -2.878823389138915e-01, -2.878823389138915e-01, -4.722474815377115e-01, -3.726842904745534e-02, -5.045277493355551e-02, -3.075357420905909e-01, -1.034759917661359e-01, -7.316382001932631e-02, -1.107701790299308e-02, -1.368592183343880e-03, -2.599826628140485e-03, -6.979984236553158e-02, -3.870897019627988e-03, -3.870897019627982e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_jk_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_jk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.665797571418888e+01, -2.665803013212366e+01, -2.665833548902220e+01, -2.665744282724699e+01, -2.665800388153980e+01, -2.665800388153980e+01, -4.361764792107000e+00, -4.361762616917509e+00, -4.361882101139492e+00, "nan", -4.361782254089019e+00, -4.302803204348767e+00, -8.443406663595016e-01, -8.239425956685441e-01, -8.019995886042366e-01, -8.083137115908124e-01, -8.244804468049621e-01, -8.244804468049621e-01, -2.256362044725238e-01, -2.286405665120500e-01, -1.006229734701021e+00, -1.635861085635981e-01, -2.265373964212744e-01, -2.265373964212744e-01, -1.260192543805306e-02, -1.319993054632814e-02, -5.365200992202050e-02, -6.045555123117349e-03, -1.306237397612529e-02, -1.306237397612529e-02, -6.439666180214506e+00, -6.440811483013007e+00, -6.439787019029389e+00, -6.466306641097909e+00, -6.440248299177633e+00, -6.440248299177633e+00, -2.489303518637613e+00, -2.505848763843774e+00, -2.483595811209254e+00, -2.496516182652889e+00, -2.507853391765403e+00, -2.439348325673290e+00, -7.180733335432412e-01, -7.800070796054533e-01, -6.813800180691127e-01, -7.106977943617994e-01, -7.456631448663096e-01, -7.523571346775858e-01, -1.303131477626384e-01, -2.272527709896008e-01, -1.284560744527991e-01, -2.372515060287158e+00, -1.389782685650834e-01, -1.389782685650834e-01, -9.235758176439983e-03, -6.665101438442224e-03, "nan", -8.301070517809504e-02, -9.283673350450916e-03, -6.072940828187413e-03, -7.409612401558612e-01, -7.370055231369295e-01, -7.320350338146289e-01, -7.395175776326632e-01, -7.389700247435287e-01, -7.389700247435287e-01, -7.171809125576879e-01, -6.221512744467721e-01, -6.498649780999899e-01, -6.755658033768985e-01, -6.624699896771068e-01, -6.686117478174256e-01, -8.178366324693820e-01, -2.991945074274666e-01, -3.394652871353873e-01, -4.441399689762260e-01, -3.838431185518554e-01, -3.838431185518553e-01, -5.731037415218669e-01, -4.969123872994046e-02, -6.727036657807403e-02, -4.100476561207878e-01, -1.063168645800210e-01, -9.755176002576843e-02, -1.476935720399078e-02, -1.824789577791840e-03, -3.466435504187313e-03, -9.306645648737544e-02, -5.161196026170651e-03, -5.161196026170643e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_jk_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_jk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.256172849556877e-09, -5.256215784491437e-09, -5.256233692123158e-09, -5.255535187077761e-09, -5.256196968374978e-09, -5.256196968374978e-09, -5.984643477413877e-06, -5.985266508978673e-06, -6.001452410942980e-06, "nan", -5.984861922131400e-06, 8.110084345932101e-163, -2.961125808515549e-03, 4.468598387932116e-250, 2.593338518357562e-163, 4.526808854583992e-216, 9.605909674061781e-163, 4.169695434162796e-216, 3.948127976231002e-99, 1.463770783458236e-216, -1.802151103380755e-03, 3.241794936338719e-231, 1.359090474268774e-216, 1.637871387075660e-245, 9.313871742836911e-172, 1.199541798810385e-202, 1.868460911753918e-226, 2.370378806159110e-231, 2.719511873319283e-273, 3.254168446490032e-183, 8.527020450020080e-176, 4.226903558738121e-249, 6.479380370720395e-211, -1.866243476175404e-06, 7.112036210945526e-230, 5.117475272677884e-182, -3.272460765507127e-05, -3.229420332534925e-05, -3.242012859884502e-05, -3.208389251526284e-05, -3.284744850220394e-05, 5.010467418596184e-163, 8.447273784013329e-183, 3.393339538399864e-221, 5.808615130527614e-183, 3.581165887322099e-221, 8.401450359455211e-183, -8.176823522129001e-03, -1.154833547621282e+00, 2.757986706725776e-202, -1.256491539763560e+00, 2.514361163154517e-70, 3.484906328502756e-163, 1.527372224987044e-250, -7.765154380160155e+03, 3.984693223218857e-164, "nan", -4.820103159196991e+00, -7.717241071116358e+03, 5.076147349378278e-164, 7.488908971392863e-241, 1.109164033177728e-229, -2.544797632834545e-02, 4.293860761334032e-212, 3.844282560521386e-167, 1.590847454657595e-245, 1.307177213346431e-231, 1.327348771184403e-163, 5.278257658541704e-231, 2.493948410774079e-202, 8.271998854118265e-249, -1.294999664658161e-02, 4.248543779092136e-250, -9.307169131922961e-02, 3.668347694729710e-226, -3.909015327011237e-02, 6.167625111038154e-178, 1.080539648446342e-200, -1.515950872597597e-02, 3.786388263698891e-255, 3.890678893899764e-255, 2.870090795225164e-255, -2.377578190158077e+00, 7.590201269914030e-254, 5.381180135045540e-254, 1.764510561685849e-260, 1.787872415917084e-46, 3.958529091868838e-183, 1.032630264322120e-226, 3.981624200368434e-254]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_jk_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_jk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [-1.504254778313660e-04, -1.504272463210085e-04, -1.504317900708180e-04, -1.504028569280727e-04, -1.504264372577748e-04, -1.504264372577748e-04, -7.706638008644293e-04, -7.707341624725837e-04, -7.726408021301354e-04, "nan", -7.706967050739702e-04, 0.000000000000000e+00, -2.840782419120153e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -9.397099105332984e-200, 0.000000000000000e+00, -2.892208486568971e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -7.351591297651395e-04, 0.000000000000000e+00, 0.000000000000000e+00, -8.073710319717342e-04, -8.127012932285628e-04, -7.943868640683216e-04, -7.984778236508445e-04, -8.284904989759793e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -5.271020184128639e-03, -3.584214269801246e-03, 0.000000000000000e+00, -3.754406730927907e-03, -7.387243839612294e-136, 0.000000000000000e+00, 0.000000000000000e+00, -2.517125071614931e-03, 0.000000000000000e+00, 0.000000000000000e+00, -3.560715548605272e-03, -2.834012737584299e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.162716950174515e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -5.869819615542923e-03, 0.000000000000000e+00, -3.902319584529064e-03, 0.000000000000000e+00, -5.456075176391349e-03, 0.000000000000000e+00, 0.000000000000000e+00, -4.530984351986870e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -3.935266395268902e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -5.042746847114354e-105, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_jk_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_jk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
