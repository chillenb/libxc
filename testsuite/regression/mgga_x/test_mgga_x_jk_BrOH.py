
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_jk_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_jk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.074450207081068e+01, -2.074452719539643e+01, -2.074471166694399e+01, -2.074429840850390e+01, -2.074451471691419e+01, -2.074451471691419e+01, -3.726809212520304e+00, -3.726691018695039e+00, -3.723239862742642e+00, -3.724523073044135e+00, -3.726794205308491e+00, -3.726794205308491e+00, -1.017017498531985e+00, -1.012208547464050e+00, -9.151132964279235e-01, -8.748412102766132e-01, -1.014989283330643e+00, -1.014989283330643e+00, -2.256491892332667e-01, -2.271479147704981e-01, -6.256557651807413e-01, -2.109726047525554e-01, -2.261031197255398e-01, -2.261031197255398e-01, -5.003934377811960e-02, -5.068783748242572e-02, -1.004852354834988e-01, -6.205025789393721e-02, -5.021851344858878e-02, -5.021851344858878e-02, -4.805911588801889e+00, -4.624189757773159e+00, -4.834277960981781e+00, -4.814192565814730e+00, -4.943542034192345e+00, -1.340523727841947e+00, -1.819979560757035e+00, -4.070636268371464e+00, -2.238329658771611e+00, -2.253292024419786e+00, -2.253752891902920e+00, -2.112242101043051e+00, -5.361481796877318e-01, -5.837403099229149e-01, -5.072546823485604e-01, -8.545730573238011e-01, -6.619266711051531e-01, 2.221375654742950e-01, -1.052946910361081e-01, -1.447689549242317e-01, -9.200209669421042e-02, -1.672145903859559e+00, -1.594342855566806e-01, -1.480688710727729e-01, 3.724983940473511e-03, -4.990032523002832e-03, -3.750743724094511e-03, -6.999233427940618e-02, 2.182414761991849e-02, -5.463523330660869e-03, -5.557209223931986e-01, -5.527542782570627e-01, -5.538176802491986e-01, -5.546361841841483e-01, -5.542276095155277e-01, -5.542275165937003e-01, -5.378856851442176e-01, -5.384482214100629e-01, -4.823573975513110e-01, -5.187283213067664e-01, -1.853999052008734e+00, -4.953504846068195e-01, -6.129593439962743e-01, -2.159067564293853e-01, -2.552680614848524e-01, -3.283230143929349e-01, -1.482327640686023e-01, -4.640180796789272e-01, -5.026303695165759e-01, -2.103766960496243e-02, -1.574302550906917e-01, -3.665006988826373e-01, -7.757843798028119e-02, -1.239057312347826e-01, -1.513187998493519e-02, -6.848518725827480e-04, -3.944535803104846e-03, -9.689210473508016e-02, -1.358542338345081e-02, -4.712568287993846e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_jk_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_jk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.612103795566063e+01, -2.612109798261128e+01, -2.612141712085594e+01, -2.612043308209824e+01, -2.612106918288359e+01, -2.612106918288359e+01, -4.662963788850692e+00, -4.662732437410339e+00, -4.655789328415761e+00, -4.656474506148913e+00, -4.662932235487194e+00, -4.662932235487194e+00, -2.509095086311197e+00, -2.463165358547532e+00, -1.683767296116093e+00, -1.425443827782119e+00, -2.489781943102015e+00, -2.489781943102015e+00, -2.817480847111329e-01, -2.838259590346366e-01, -1.240440856198520e+00, -3.259530347163009e-01, -2.824133992328924e-01, -2.824133992328924e-01, -6.966014105285112e-02, -7.043003056205051e-02, -1.384714972840926e-01, -1.450230140411166e-01, -6.983562611996894e-02, -6.983562611996894e-02, -6.463347400063130e+00, -6.750224274843060e+00, -6.435722744990614e+00, -6.456574061796990e+00, -6.370356997284025e+00, -4.321752999289502e+01, -2.414750336560953e+00, -1.979677637388586e+01, -2.785238651943620e+00, -2.811643532298039e+00, -2.814473194238603e+00, -2.536352839706996e+00, -7.202142581470216e-01, -7.815399946870442e-01, -6.848144616959702e-01, -3.586110642982196e+00, -8.711067480944936e-01, -1.382316936141557e+01, -1.160794580707146e-01, -2.609975337281579e-01, -1.167857263395553e-01, -2.632290828196475e+00, -1.905796419066827e-01, -1.651755362098316e-01, -1.609949691519681e-02, -6.672160218106183e-03, -4.992238110596673e-03, -7.132745975437041e-02, -7.012023640170216e-02, -5.394881522647006e-03, -7.409612527163534e-01, -7.370053587630261e-01, -7.384235614957901e-01, -7.395204020105486e-01, -7.389699014252558e-01, -7.389700274062043e-01, -7.171809112683090e-01, -6.599229954066821e-01, -6.545430132653568e-01, -6.682328494991964e-01, -4.124146359304763e+01, -6.638140396421119e-01, -8.183181984620627e-01, -2.847971095426641e-01, -3.389980721485685e-01, -4.320343185800707e-01, -9.317198354019121e-01, -9.648750942473200e-01, -6.285213418355452e-01, -7.083565191738045e-02, -3.699541021984622e-01, -4.651009428800671e-01, -9.505661653276089e-02, -1.464232891175420e-01, -1.242881251286503e-02, -2.427748996995098e-03, -2.488888235291262e-03, -9.929828031104106e-02, -3.809158285684526e-03, -4.532978919099721e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_jk_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_jk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.710398520269722e-09, -5.710397004225266e-09, -5.710268367845188e-09, -5.710294546477687e-09, -5.710398742979356e-09, -5.710398742979356e-09, 2.286842580685324e-06, 2.280499669563304e-06, 2.081099692138691e-06, 2.042321990806960e-06, 2.285642576064369e-06, 2.285642576064369e-06, 1.291747232556817e-01, 1.245007860570268e-01, 5.101209817492070e-02, 3.246991060929348e-02, 1.272543566662000e-01, 1.272543566662000e-01, 3.644747414396920e-01, 3.568751070869277e-01, 1.675066018688007e-02, 4.077026391412786e+00, 3.632777326384260e-01, 3.632777326384252e-01, 3.714738965934738e+03, 3.239047264316886e+03, 4.749795464277334e+01, 9.325262409179463e+04, 3.382416625296094e+03, 3.382416625296094e+03, 3.961751003506367e-07, 4.587071724090278e-06, -7.007647602779641e-08, 2.692534564350705e-07, -1.426870087877387e-06, 4.193028873303307e-04, -2.466919266972093e-06, 4.826643644218901e-03, 2.629116088358763e-05, 2.904683121781417e-05, 2.924563748830958e-05, -2.834057251046724e-05, 1.392251536686462e-03, 2.048502987275284e-03, 2.702031653722900e-03, 2.806170569338028e+00, 2.418433821910049e-02, 5.006675974834404e+00, -1.232095367121030e+00, 5.786848788699350e-01, -3.768196016982246e-01, 1.161146943706571e-03, 8.856726928470522e-01, -2.488916775651759e-01, 1.585661427282763e+04, 8.720795964548270e+00, -1.632357221816794e+01, -5.311975775967825e+00, 8.992713279802645e+04, -1.390669402860726e+03, 6.051285336807296e-08, -3.265948149184915e-07, -1.480964671874044e-08, 8.661488349330904e-06, -3.357961239246819e-07, 7.250471381371316e-09, -1.040252115454548e-08, -3.806182963396697e-03, 4.372925502893367e-03, -1.118665494575859e-02, 2.607672801380832e+01, 1.458937043097052e-03, 4.761382436951786e-04, -1.105622775893860e-02, -3.181479512372809e-03, -8.697016970560566e-03, 1.785743436957774e+00, 1.289724331298298e+00, 1.043248846984804e-02, 3.868233484599403e+01, 1.179056953600719e+02, 7.640281324414976e-02, -1.101792473125254e+00, 2.870560712358684e+00, -3.164602793240825e+02, 4.514538465212919e+04, -1.084004448919047e+04, -3.128286323110667e+00, -1.627052723490078e+04, -2.533493813881069e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_jk_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_jk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([-4.286292975967500e-05, -4.286208802447155e-05, -4.285921322524549e-05, -4.287294235459643e-05, -4.286247862141825e-05, -4.286247862141825e-05, -1.825567174140556e-03, -1.825072309644741e-03, -1.808777708501886e-03, -1.796793766428951e-03, -1.825523398118389e-03, -1.825523398118389e-03, -7.053420100893407e-02, -6.815167998869849e-02, -3.036142775934846e-02, -2.224712494456449e-02, -6.956614458420653e-02, -6.956614458420653e-02, -1.598017997135760e-02, -1.638280049300204e-02, -5.586831103514637e-03, -2.747005432885009e-02, -1.612073719945653e-02, -1.612073719945652e-02, -1.476233240828220e-02, -1.483457215907486e-02, -1.478737593854842e-02, -2.582288355551269e-02, -1.499384144977432e-02, -1.499384144977432e-02, -3.145965420283075e-06, -2.384856838269702e-04, -1.091440421836428e-07, -1.487931444312172e-06, -7.154019380896136e-05, -6.779995362928529e-02, -3.872056451903723e-07, -5.835356991415393e-02, -2.039164971854893e-03, -2.104238169553672e-03, -2.180378869407600e-03, -9.683933120869644e-04, -1.153884214951798e-05, -1.913976008313153e-05, -3.023465154575460e-05, -8.289580033269750e-01, -2.293030635962913e-02, -1.327926411519317e+00, -6.842401149799446e-04, -1.455152493384872e-03, -3.041685900069266e-05, -4.830915263702763e-03, -1.091416251273579e-02, -6.882535380538980e-03, -5.368411333557919e-04, -6.217656242497201e-10, -2.982569162508656e-10, -7.924765466459885e-04, -7.491615960155427e-03, -8.892364277291551e-06, -6.450196751759956e-15, -3.209570566552090e-13, -5.712918367973863e-16, -1.696888986335297e-10, -2.748027485142340e-13, -1.281148941912159e-16, -1.292039051624274e-16, -7.212459423442571e-03, -5.691469691158641e-05, -6.360459933682183e-04, -5.554260427736135e+00, -6.803259372013277e-06, -1.580326087558166e-06, -4.536077361791587e-06, -9.318719748930977e-07, -2.510319102765165e-05, -4.903322233348630e-02, -7.800207925921827e-02, -1.147216215033059e-02, -9.496664594046150e-04, -4.128057636180138e-02, -2.097351373734896e-02, -8.346920610307525e-05, -1.102741383997938e-02, -1.173711634262871e-04, -6.608220875681242e-06, -2.110284165072986e-05, -3.673563786188897e-03, -1.363068563344605e-03, -1.023197437004039e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
