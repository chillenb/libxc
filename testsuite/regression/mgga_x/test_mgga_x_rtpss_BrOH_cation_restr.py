
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_rtpss_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.256412523574564e+01, -2.256418855414243e+01, -2.256457177516625e+01, -2.256363219630725e+01, -2.256410997437598e+01, -2.256410997437598e+01, -3.461334027571167e+00, -3.461339418450701e+00, -3.461751037902804e+00, -3.463881463394523e+00, -3.462459668186658e+00, -3.462459668186658e+00, -6.712815938726283e-01, -6.711180282981662e-01, -6.697209525176342e-01, -6.764068786596112e-01, -6.740529284102669e-01, -6.740529284102669e-01, -2.132949665336719e-01, -2.134991011602750e-01, -7.658956914728284e-01, -1.925648056400694e-01, -1.993940748754872e-01, -1.993940748754873e-01, -1.009364494008897e-02, -1.062397932832220e-02, -5.861359302435933e-02, -5.829395465871759e-03, -7.325081590875081e-03, -7.325081590875081e-03, -5.532414537685075e+00, -5.533436976895820e+00, -5.532550584870586e+00, -5.533450134390519e+00, -5.532886776163202e+00, -5.532886776163202e+00, -2.105688242254192e+00, -2.120290791515322e+00, -2.102680478220447e+00, -2.115428736072952e+00, -2.115325470232869e+00, -2.115325470232869e+00, -5.982815388791608e-01, -6.133647303056431e-01, -5.448907132466315e-01, -5.367923438851814e-01, -6.065286040871443e-01, -6.065286040871443e-01, -1.509536273218136e-01, -2.381265551888381e-01, -1.403893964315356e-01, -1.813912564289710e+00, -1.681378218588985e-01, -1.681378218588985e-01, -4.497766541329658e-03, -5.698749801072900e-03, -4.357538022585594e-03, -9.508776739345924e-02, -5.249482297479785e-03, -5.249482297479785e-03, -5.848831116860023e-01, -6.036503784318124e-01, -5.997763835946295e-01, -5.947798057198392e-01, -5.975241066334577e-01, -5.975241066334577e-01, -5.466982144998422e-01, -5.246300967422460e-01, -5.446256014735205e-01, -5.619796269131944e-01, -5.534175626306651e-01, -5.534175626306651e-01, -6.402413999890721e-01, -2.745626918466902e-01, -3.032882838809066e-01, -3.637700620626904e-01, -3.295628805572419e-01, -3.295628805572419e-01, -4.769107851968151e-01, -5.610064986269463e-02, -7.648420678700298e-02, -3.458819898652751e-01, -1.204972224672494e-01, -1.204972224672494e-01, -1.424523243919322e-02, -1.523312330620328e-03, -3.197499979622570e-03, -1.134422278561778e-01, -4.857413173248372e-03, -4.857413173248368e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_rtpss_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.763157977307935e+01, -2.763163878047872e+01, -2.763211347550339e+01, -2.763123995779816e+01, -2.763166735213515e+01, -2.763166735213515e+01, -4.172754361623363e+00, -4.172797789360430e+00, -4.174039723986978e+00, -4.174187853398298e+00, -4.173621184754619e+00, -4.173621184754619e+00, -7.791836873605957e-01, -7.775460133080480e-01, -7.335488264186676e-01, -7.431088016448690e-01, -7.417621037046513e-01, -7.417621037046513e-01, -1.646474910456295e-01, -1.693288758098574e-01, -9.307213279277796e-01, -1.466300615671134e-01, -1.391702703430597e-01, -1.391702703430598e-01, -1.345819325345196e-02, -1.416530577109627e-02, -7.815145736058161e-02, -7.772527287829012e-03, -9.766775454500110e-03, -9.766775454500110e-03, -6.722446262890752e+00, -6.721712109045855e+00, -6.722546711532922e+00, -6.721893501361769e+00, -6.722006376154942e+00, -6.722006376154942e+00, -2.404585320968641e+00, -2.438635708981100e+00, -2.381226083627864e+00, -2.412232807834344e+00, -2.434025112869873e+00, -2.434025112869873e+00, -7.214671830066123e-01, -7.862090964718191e-01, -6.554542823425515e-01, -6.935916870520275e-01, -7.328564228485942e-01, -7.328564228485942e-01, -1.815209259592733e-01, -1.679939515674110e-01, -1.751708469231435e-01, -2.377006708960677e+00, -1.569161915009905e-01, -1.569161915009905e-01, -5.997022055106211e-03, -7.598333068097201e-03, -5.810050696780792e-03, -1.266026873720538e-01, -6.999309729973048e-03, -6.999309729973048e-03, -7.290868652104028e-01, -7.267358004135600e-01, -7.256651103937237e-01, -7.258808208142263e-01, -7.255942107867640e-01, -7.255942107867640e-01, -7.182627315109141e-01, -6.390813912806508e-01, -6.691695419159880e-01, -6.820827113766565e-01, -6.764935590381553e-01, -6.764935590381553e-01, -8.240417152687439e-01, -2.059193164357945e-01, -2.741351419855924e-01, -4.196112603390619e-01, -3.509714568461383e-01, -3.509714568461383e-01, -5.656976896371584e-01, -7.480086648348801e-02, -1.019787505049643e-01, -4.107733240062998e-01, -1.529798443168686e-01, -1.529798443168687e-01, -1.899364325225763e-02, -2.031083107493770e-03, -4.263333306163427e-03, -1.472956002637005e-01, -6.476550897664496e-03, -6.476550897664490e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rtpss_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.560469646783414e-08, -1.560516379794121e-08, -1.560624229132082e-08, -1.559931593368756e-08, -1.560308651430348e-08, -1.560308651430348e-08, -1.339434893282331e-05, -1.339703446683125e-05, -1.346629584177053e-05, -1.342464868750678e-05, -1.343848158354284e-05, -1.343848158354284e-05, -5.778350815837377e-03, -5.800381627141670e-03, -6.338045376324295e-03, -6.258063325838848e-03, -6.271818796326979e-03, -6.271818796326979e-03, -9.261354266285092e-01, -8.935117450394232e-01, -1.983326557171703e-03, -1.509188521648937e+00, -1.405868080615303e+00, -1.405868080615302e+00, -2.093322214493170e-309, -4.469049967013797e-271, -3.136544100220181e-09, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -7.027374948975366e-06, -7.100874308675313e-06, -7.030871283510092e-06, -7.095734928891795e-06, -7.064428255921165e-06, -7.064428255921165e-06, -6.668450512494110e-05, -6.416099817825554e-05, -6.585912097481523e-05, -6.347585208839334e-05, -6.581135827605895e-05, -6.581135827605895e-05, -2.194991226892863e-02, -2.608969393081096e-02, -2.465923519186060e-02, -2.255382859833857e-02, -2.292582394325579e-02, -2.292582394325579e-02, -6.662319152857343e-01, -6.914567830905537e-01, -5.243880652370008e-01, -1.629228441079468e-04, -1.754234141650934e+00, -1.754234141650934e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.879059494643553e-02, 0.000000000000000e+00, 0.000000000000000e+00, -1.849453007326780e-01, -1.033379708135762e-01, -1.254868596765157e-01, -1.493224737133774e-01, -1.366910356000504e-01, -1.366910356000504e-01, -1.080711253963684e-01, -1.959947399130981e-02, -2.740275722172226e-02, -4.936909790677219e-02, -3.587340826792053e-02, -3.587340826792052e-02, -1.766586000396443e-02, -3.495551437870447e-01, -1.888730951848242e-01, -9.002262125935157e-02, -1.173225317523389e-01, -1.173225317523390e-01, -3.166263047204971e-02, -6.816701044619438e-11, -5.047007914193885e-05, -1.352710208242020e-01, -6.721912668156395e-01, -6.721912668156375e-01, -5.466769712566625e-171, 0.000000000000000e+00, 0.000000000000000e+00, -4.119595474103270e-01, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rtpss_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rtpss_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.174972362031379e-03, 2.175064103354527e-03, 2.175442347491232e-03, 2.174085367789558e-03, 2.174800361315228e-03, 2.174800361315228e-03, 2.966505772190608e-03, 2.967587037068033e-03, 2.998036165148905e-03, 3.003325048090190e-03, 2.995587697080402e-03, 2.995587697080402e-03, 4.404373669597929e-03, 4.415550825268239e-03, 4.483723409838034e-03, 5.071391951443358e-03, 4.889064622847592e-03, 4.889064622847592e-03, 4.699858944753127e-03, 5.527412644039127e-03, 6.632941730850319e-04, 6.959925118826126e-04, 2.055537575645521e-03, 2.055537575645518e-03, 1.432790372939615e-322, 2.484229339187563e-284, 5.454259518334650e-17, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.560295782554472e-02, 1.577609075529878e-02, 1.561404736061005e-02, 1.576675339065130e-02, 1.568876095066876e-02, 1.568876095066876e-02, 3.324458413311517e-03, 3.414868800210875e-03, 3.036055933771353e-03, 3.102309718209523e-03, 3.523124588540476e-03, 3.523124588540476e-03, 3.683606769572251e-02, 3.269295040266697e-02, 2.453150219749779e-02, 1.346467152785176e-02, 4.065774151668458e-02, 4.065774151668458e-02, 1.436575886394724e-05, 1.567264579967263e-03, 6.820907986090252e-06, 3.485113271602978e-03, 2.306001496443740e-04, 2.306001496443746e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 2.632281011545572e-08, 0.000000000000000e+00, 0.000000000000000e+00, 3.261900733943845e-01, 2.478175368515241e-01, 2.843313143938839e-01, 3.137282369930386e-01, 2.995351327442035e-01, 2.995351327442033e-01, 7.910851454550896e-02, 2.640767900182606e-02, 4.892574020618988e-02, 9.564265686808909e-02, 6.744463191949095e-02, 6.744463191949092e-02, 2.305730669330191e-02, 2.997732917870814e-03, 7.080033606170519e-03, 2.501491571120065e-02, 1.470427005930862e-02, 1.470427005930864e-02, 2.529371536311309e-02, 6.419257814677315e-19, 6.319087308285306e-12, 3.929851699779108e-02, 4.460766006957485e-06, 4.460766006957478e-06, 1.072139792321492e-182, 0.000000000000000e+00, 0.000000000000000e+00, 1.993970340132839e-06, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
