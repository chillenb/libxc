
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_rtpss_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.990412333572093e+01, -1.990418379760336e+01, -1.990446773705350e+01, -1.990356820510511e+01, -1.990403738128143e+01, -1.990403738128143e+01, -3.234955741192401e+00, -3.234951602726401e+00, -3.234901673290013e+00, -3.235214381092984e+00, -3.234844663696972e+00, -3.751371750623735e+00, -6.333958573613303e-01, -7.730273300431657e-01, -7.705637899306998e-01, -7.681497909031409e-01, -7.687561397730940e-01, -7.687561397730940e-01, -2.165116382039082e-01, -2.173343694541509e-01, -7.449357247181750e-01, -2.015582145537536e-01, -2.080403936285808e-01, -2.080403936285808e-01, -1.009364494008897e-02, -1.062397932832220e-02, -5.861359302442894e-02, -5.829395465871759e-03, -7.325081590875081e-03, -7.325081590875081e-03, -5.536627508123433e+00, -5.537644462048748e+00, -5.536678157993823e+00, -4.866655471716617e+00, -5.537140916621047e+00, -5.537140916621047e+00, -1.826795537244069e+00, -1.838612584151491e+00, -1.818287578962663e+00, -1.828664329094371e+00, -1.837444006681713e+00, -2.143290829558574e+00, -6.256700251386326e-01, -6.778396756834714e-01, -5.829124745308337e-01, -6.017111697294909e-01, -6.351296712862442e-01, -5.536248743274097e-01, -8.763084899558035e-02, -2.424474566803810e-01, -8.108377582793352e-02, -2.044092389325496e+00, -1.710653810313580e-01, -1.710653810313580e-01, -2.582183673269957e-03, -5.698749801072900e-03, -4.357538022585594e-03, -5.456562935361545e-02, -3.013740840312295e-03, -5.249482297479785e-03, -6.267057433813252e-01, -6.233100262452282e-01, -5.511445157533501e-01, -6.255160924669673e-01, -6.250250038333121e-01, -6.250250038333118e-01, -6.097590924317901e-01, -5.268142402939285e-01, -5.490338607299268e-01, -5.728127816015393e-01, -5.605099058868882e-01, -4.902466361240143e-01, -7.107957826673205e-01, -2.086491158929211e-01, -3.099724993072426e-01, -3.246303490728508e-01, -3.383607151777353e-01, -3.383607151777353e-01, -4.214544980140468e-01, -5.610064986269568e-02, -7.648421081018705e-02, -3.605695801706452e-01, -6.944414714687459e-02, -1.208119030750429e-01, -1.424523243919322e-02, -1.523312330620328e-03, -3.197499979622570e-03, -1.135503556081389e-01, -4.857413173248372e-03, -4.857413173248368e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_rtpss_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.680507663866580e+01, -2.680515679628619e+01, -2.680553405131108e+01, -2.680434137247894e+01, -2.680496334814553e+01, -2.680496334814553e+01, -4.242481086965975e+00, -4.242525216297770e+00, -4.243771686010223e+00, -4.243650373480127e+00, -4.243222321323986e+00, -4.431351336147686e+00, -8.233583994033663e-01, -7.145207560981163e-01, -6.641987873855634e-01, -6.839637481535225e-01, -6.794480562532382e-01, -6.794480562532382e-01, -1.642324128661379e-01, -1.683145260978490e-01, -9.792004440674303e-01, -1.735555187162268e-01, -1.503918095885430e-01, -1.503918095885430e-01, -1.345819325345196e-02, -1.416530577109627e-02, -7.815145736567328e-02, -7.772527287829012e-03, -9.766775454500110e-03, -9.766775454500110e-03, -6.730009861395026e+00, -6.729211465439877e+00, -6.729954606837214e+00, -6.543291860853466e+00, -6.729615990943691e+00, -6.729615990943691e+00, -2.376979461745062e+00, -2.395409494428022e+00, -2.363824536957020e+00, -2.379739367211427e+00, -2.393702464844035e+00, -2.444160396286064e+00, -7.735227637059848e-01, -8.333652393586399e-01, -7.020333147152533e-01, -7.442448040501186e-01, -7.871179978341178e-01, -7.428997688683295e-01, -1.166425870701125e-01, -1.739567293145262e-01, -1.079549920862924e-01, -2.534786677465981e+00, -1.713699718140385e-01, -1.713699718140384e-01, -3.442906972849852e-03, -7.598333068097201e-03, -5.810050696780792e-03, -7.270413378570929e-02, -4.018306581700045e-03, -6.999309729973048e-03, -7.338285016113186e-01, -7.414237364603179e-01, -7.379033158190309e-01, -7.367198409148207e-01, -7.378485255040006e-01, -7.378485255040003e-01, -7.156133875156566e-01, -6.436332060008605e-01, -6.808380647722221e-01, -7.034850605447889e-01, -6.937297703125199e-01, -6.600912257379679e-01, -8.788043814968838e-01, -2.740921218484643e-01, -2.695345995240465e-01, -4.221604666379171e-01, -3.463863067792831e-01, -3.463863067792831e-01, -5.538753036604291e-01, -7.480086648357538e-02, -1.019789281614486e-01, -4.305636751044856e-01, -9.246390874655895e-02, -1.569335997795011e-01, -1.899364325225763e-02, -2.031083107493770e-03, -4.263333306163427e-03, -1.488447348418839e-01, -6.476550897664496e-03, -6.476550897664490e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rtpss_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.891602827887054e-09, -6.891642671254135e-09, -6.891749138393247e-09, -6.891165751500110e-09, -6.891481264177232e-09, -6.891481264177232e-09, -4.840008101575773e-06, -4.841075989838451e-06, -4.868966773635497e-06, -4.855916608976054e-06, -4.859333665542739e-06, -5.969890694604180e-06, -1.847201541825698e-03, -4.225011390757678e-03, -4.687339798939833e-03, -4.551308624838124e-03, -4.580907167259685e-03, -4.580907167259685e-03, -8.864686389386569e-01, -8.495993843205910e-01, -6.584831286053554e-04, -1.032226184311252e+00, -1.166954957617854e+00, -1.166954957617854e+00, -4.724693210875729e-312, -2.365801411796450e-275, -1.243153901931114e-10, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -6.990472112947748e-06, -7.064187457035518e-06, -6.994726357633737e-06, -2.448738553620986e-06, -7.027249265168115e-06, -7.027249265168115e-06, -4.010482811289307e-05, -4.042307748294814e-05, -3.979967832122288e-05, -4.009556450764304e-05, -4.044806277786337e-05, -5.544133543026608e-05, -1.107141337770928e-02, -1.980596639196818e-02, -1.076836623029870e-02, -1.317328322216871e-02, -1.187940205591866e-02, -8.734540451673023e-03, -1.528430673868927e+00, -6.354658119928766e-01, -2.014124545612879e+00, -1.206815907231986e-04, -1.304428709045371e+00, -1.304428709045373e+00, -1.514921181138249e+06, 0.000000000000000e+00, 0.000000000000000e+00, -8.704455376365930e+00, -8.168403224046060e+05, 0.000000000000000e+00, -2.188507710722427e-01, -9.948347499519904e-02, -2.805179578900876e-02, -1.560917804006778e-01, -1.390028141067516e-01, -1.390028141067516e-01, -2.113794953905246e-01, -1.775092905607754e-02, -2.324716503318866e-02, -4.070827173067231e-02, -2.947648187868853e-02, -1.684628835384856e-02, -1.226039548068520e-02, -1.095302648631957e-01, -1.769988823579818e-01, -3.955344433320520e-02, -1.003531162796984e-01, -1.003531162796983e-01, -1.744778270351916e-02, -1.160432425079609e-11, -4.487465636547968e-06, -7.145587585014880e-02, -3.709146599737026e+00, -3.143699789850066e-01, -1.178785430310306e-225, 0.000000000000000e+00, 0.000000000000000e+00, -2.433169017313910e-01, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rtpss_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.561081572126920e-04, 1.561118568985200e-04, 1.561265044547311e-04, 1.560717661804447e-04, 1.561007040738871e-04, 1.561007040738871e-04, -5.322403500351157e-04, -5.320041106052590e-04, -5.256718605369654e-04, -5.282052073470304e-04, -5.279898729658341e-04, 2.067121791136412e-03, -2.020474157835625e-03, 2.216124050084411e-03, 1.639690902424502e-03, 1.893468865062656e-03, 1.832090505685064e-03, 1.832090505685064e-03, 3.179958262689139e-03, 3.546321356805061e-03, -5.699340998595642e-04, 3.528264342769990e-04, 1.023602873308528e-03, 1.023602873308524e-03, 0.000000000000000e+00, 2.256958934122893e-285, 4.270036515503666e-17, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.566098992534947e-02, 1.583524948490188e-02, 1.567097476750349e-02, 7.895985110228209e-04, 1.574796491870281e-02, 1.574796491870281e-02, -1.132076254670151e-03, -1.110105047123131e-03, -1.141558888552179e-03, -1.129770426773670e-03, -1.111940556091683e-03, 2.583301512647819e-03, 3.050751389635244e-02, 8.090192109177873e-02, 1.713109451780335e-02, 3.256321843806405e-02, 3.609869968538357e-02, 2.205460930837227e-03, -1.083905515302156e-04, 9.558392938982507e-04, -8.693798527050430e-05, 1.253261701949526e-02, 1.703510305358723e-04, 1.703510305358725e-04, -2.666783920650940e-09, 0.000000000000000e+00, 0.000000000000000e+00, -3.113502955070357e-05, -1.681323828003326e-08, 0.000000000000000e+00, 7.095102347332056e-01, 3.173487133668365e-01, 7.866389595375049e-03, 5.029736317965592e-01, 4.468556481769620e-01, 4.468556481769618e-01, 6.310430241147907e-01, 2.465265111615844e-02, 4.681123821519532e-02, 1.004870533318920e-01, 6.657705819535392e-02, 5.144695284383354e-03, 5.684898221424599e-02, -2.196600416105263e-03, 4.233928062125759e-03, -6.389513233415259e-03, 8.225957433799610e-03, 8.225957433799627e-03, -3.736241475202784e-03, 3.222445000835809e-18, 5.560313880722952e-12, 2.454215887972859e-02, -9.323139384825516e-05, 5.271174197757362e-06, 3.301247697241585e-235, 0.000000000000000e+00, 0.000000000000000e+00, 3.082514682721647e-06, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
