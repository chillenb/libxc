
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_revtm_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revtm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.226482142869162e+01, -2.226486805658970e+01, -2.226515900571843e+01, -2.226439627789595e+01, -2.226484529372087e+01, -2.226484529372087e+01, -3.402975227919350e+00, -3.402984805479968e+00, -3.403515120557822e+00, -3.405232878946950e+00, -3.402983508256365e+00, -3.402983508256365e+00, -6.664328497780264e-01, -6.662181728572463e-01, -6.618879994166087e-01, -6.665172050395282e-01, -6.663517076051904e-01, -6.663517076051904e-01, -2.054332731994797e-01, -2.067528165389489e-01, -7.952545806461614e-01, -1.577089348228624e-01, -2.057785959516083e-01, -2.057785959516083e-01, -2.594104342231197e-02, -2.666074172682441e-02, -7.005144264386165e-02, -1.677062860017533e-02, -2.641607880472265e-02, -2.641607880472264e-02, -5.411474676542634e+00, -5.411994291113273e+00, -5.411536101649514e+00, -5.411939754064730e+00, -5.411729335230667e+00, -5.411729335230667e+00, -2.104324068945886e+00, -2.120477479816576e+00, -2.104517025008568e+00, -2.117181516091518e+00, -2.115015226219937e+00, -2.115015226219937e+00, -5.804904939563649e-01, -6.006103852917853e-01, -5.417178423219061e-01, -5.458636943695592e-01, -6.056471544851596e-01, -6.056471544851596e-01, -1.274313605545431e-01, -2.178644105462688e-01, -1.250044791600387e-01, -1.806707535175015e+00, -1.411546258152505e-01, -1.411546258152505e-01, -1.611994572660583e-02, -1.750401200008458e-02, -1.332118323689332e-02, -8.732578249349099e-02, -1.610619295438243e-02, -1.610619295438243e-02, -5.913395449484986e-01, -6.090252343145829e-01, -6.064508984562552e-01, -6.024008995266115e-01, -6.047317992058321e-01, -6.047317992058320e-01, -5.530390833431209e-01, -5.330403471103190e-01, -5.489975007551274e-01, -5.632857859611407e-01, -5.558326819644198e-01, -5.558326819644198e-01, -6.271073789232469e-01, -2.659699835677524e-01, -3.031734242508525e-01, -3.603844984950008e-01, -3.318153401963536e-01, -3.318153401963536e-01, -4.712991157778518e-01, -6.807077961374175e-02, -8.256494321875929e-02, -3.330389515829311e-01, -1.061779953648114e-01, -1.061779953648114e-01, -2.882136889483323e-02, -7.898280386167092e-03, -1.143800585618325e-02, -1.010201271994916e-01, -1.410589168834133e-02, -1.410589168834132e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_revtm_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revtm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.792899971166525e+01, -2.792911179737386e+01, -2.792986872926943e+01, -2.792804868906267e+01, -2.792905641000140e+01, -2.792905641000140e+01, -4.153519728557847e+00, -4.153565991420690e+00, -4.155020462543088e+00, -4.153590931680380e+00, -4.153560001415302e+00, -4.153560001415302e+00, -7.789014523101875e-01, -7.779652824141035e-01, -7.544401592596353e-01, -7.585805012873948e-01, -7.785588792026835e-01, -7.785588792026835e-01, -2.094232475591835e-01, -2.121860949855254e-01, -9.495097745684241e-01, -1.622322513931730e-01, -2.102217825998006e-01, -2.102217825998006e-01, -1.475729112247902e-02, -1.538803251489755e-02, -5.629230433881385e-02, -1.651814972213069e-02, -1.514890173132460e-02, -1.514890173132461e-02, -7.011400574053767e+00, -7.014794971744123e+00, -7.011900371507644e+00, -7.014531340102832e+00, -7.012935296161976e+00, -7.012935296161976e+00, -2.324088465297256e+00, -2.353290610582757e+00, -2.320021754374089e+00, -2.343270344774765e+00, -2.348959028226001e+00, -2.348959028226001e+00, -6.998345021223459e-01, -7.869221367487891e-01, -6.610496623964403e-01, -7.125889228680639e-01, -7.328356220165616e-01, -7.328356220165616e-01, -1.192117241544041e-01, -2.093942793092340e-01, -1.172727651329347e-01, -2.388782648411273e+00, -1.315208953751453e-01, -1.315208953751453e-01, -1.222853356928090e-02, -1.557661550454965e-02, -8.935189017235121e-03, -8.695527178158349e-02, -1.594419013083623e-02, -1.594419013083623e-02, -7.444403702163568e-01, -7.665828025034028e-01, -7.591547849887257e-01, -7.518184229139107e-01, -7.555725246523742e-01, -7.555725246523743e-01, -7.257578387547932e-01, -6.307059333763371e-01, -6.687159239600305e-01, -6.988603485647588e-01, -6.836262563031537e-01, -6.836262563031541e-01, -8.245525719984219e-01, -2.659707824268071e-01, -3.168769544283365e-01, -4.081883642733326e-01, -3.601431943161882e-01, -3.601431943161883e-01, -5.378783351352505e-01, -4.975540394865970e-02, -7.056673315042139e-02, -3.913566155879248e-01, -9.583908438818357e-02, -9.583908438818363e-02, -2.804226794458725e-02, -8.524776942856751e-03, -7.055022331632439e-03, -9.208593149329185e-02, -1.420394086392863e-02, -1.420394086392862e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revtm_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revtm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-8.196058193987457e-09, -8.195947102029634e-09, -8.193643514851068e-09, -8.195363162890122e-09, -8.196016471749203e-09, -8.196016471749203e-09, -1.158587096759168e-05, -1.158894537473214e-05, -1.168460246683502e-05, -1.170874115877119e-05, -1.158608561642557e-05, -1.158608561642557e-05, -3.350648642990227e-03, -3.360755139483564e-03, -3.656155837533491e-03, -3.936086894932588e-03, -3.354730901954447e-03, -3.354730901954447e-03, -8.246653440783493e-01, -8.169591817998836e-01, -1.509604652739187e-03, -8.436898284411795e-01, -8.227271465216506e-01, -8.227271465216506e-01, -1.403188203783017e+03, -1.237861312334957e+03, -2.084296196865330e+01, -3.459651850319895e+02, -1.300496641945442e+03, -1.300496641945442e+03, -1.170051503270642e-06, -1.160145050701036e-06, -1.167274261295723e-06, -1.159660868314404e-06, -1.167384048859597e-06, -1.167384048859597e-06, -9.625591342193082e-05, -9.254585776496072e-05, -9.423768218426624e-05, -9.120446976088856e-05, -9.652837094040797e-05, -9.652837094040797e-05, -2.553544201716340e-02, -1.895515652157517e-02, -2.365463656191530e-02, -1.755138863245570e-02, -2.531573719756892e-02, -2.531573719756892e-02, -2.242269855982928e+00, -5.520164377431577e-01, -2.473311725111874e+00, -1.180141596538513e-04, -2.081915809141808e+00, -2.081915809141808e+00, -4.182440151498208e+03, -1.458955138910214e+03, -1.263637601045724e+04, -3.787286862832711e+00, -3.403110509052856e+02, -3.403110509052761e+02, -2.065306121525187e-01, -7.062191945704874e-02, -1.016713468620945e-01, -1.396076057628179e-01, -1.188265586918856e-01, -1.188265586918847e-01, -1.067294719105340e-01, -2.309668522367873e-02, -2.544929410957007e-02, -3.635841935469108e-02, -2.969525680150523e-02, -2.969525680150546e-02, -1.194597030958725e-02, -2.835037681066842e-01, -1.893104742920221e-01, -1.191280847290976e-01, -1.531419268310009e-01, -1.531419268310013e-01, -4.831417569336244e-02, -2.837892749177972e+01, -1.025506886114547e+01, -1.746821354479650e-01, -4.949165215488933e+00, -4.949165215488920e+00, -9.139414364574853e+01, 2.716018748387848e+04, -2.672122362798019e+04, -5.792708270563013e+00, -3.174581920605859e+01, -3.174581920609569e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revtm_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revtm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([8.674693469051122e-04, 8.674660759277703e-04, 8.672011998655527e-04, 8.672408839586078e-04, 8.674699580758342e-04, 8.674699580758342e-04, 2.560579679392752e-03, 2.562019052781806e-03, 2.608066774094091e-03, 2.628295180614959e-03, 2.560721994540621e-03, 2.560721994540621e-03, -1.043485807617208e-03, -1.012527251464896e-03, 4.335882872581896e-05, 1.031677691640826e-03, -1.031481001266053e-03, -1.031481001266053e-03, 4.374795626185551e-02, 4.475548320371314e-02, -1.421510946873845e-03, 4.811393874497472e-03, 4.402361465241026e-02, 4.402361465241026e-02, 1.361199167917137e-02, 1.361725460596521e-02, 1.087351907554232e-02, -3.356768249572031e-03, 1.398872224908140e-02, 1.398872224908135e-02, 1.223560469225360e-03, 1.207864394682771e-03, 1.217876648461875e-03, 1.205875931753918e-03, 1.221084281961538e-03, 1.221084281961538e-03, 6.756007232433146e-03, 6.650380845738410e-03, 6.534754774259407e-03, 6.432339953345330e-03, 6.997321154058930e-03, 6.997321154058930e-03, 4.266813449195529e-02, 2.411583309558525e-02, 2.634121836522508e-02, 1.518827631657628e-02, 5.121605785357976e-02, 5.121605785357976e-02, 1.163857625465948e-02, 3.023705245809766e-02, 1.248933731963534e-02, 2.959416293101044e-03, 2.172967983606362e-02, 2.172967983606362e-02, 1.286625421872873e-03, -1.694907687502179e-03, 5.018777770599423e-03, -3.113355324365681e-03, -4.097007823147666e-03, -4.097007823147675e-03, 3.517779545659844e-01, 1.793607841449213e-01, 2.415565948272641e-01, 3.027675945615718e-01, 2.712867396046915e-01, 2.712867396046903e-01, 8.519278431545300e-02, 2.829949578025700e-02, 3.985104540322884e-02, 7.029573231108281e-02, 5.216630795788794e-02, 5.216630795788819e-02, 1.592083358712891e-02, 3.151449491269649e-02, 3.453049922005957e-02, 4.066458450490653e-02, 4.044066086269793e-02, 4.044066086269808e-02, 4.228110444150835e-02, 1.475449201254364e-02, 9.199998376940202e-03, 4.798104579545698e-02, 1.578499619171857e-02, 1.578499619171842e-02, -4.830441954322202e-03, -2.991111977211153e-03, 4.222212104335854e-03, 1.518574646591477e-02, -4.699629570734906e-03, -4.699629570734875e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
