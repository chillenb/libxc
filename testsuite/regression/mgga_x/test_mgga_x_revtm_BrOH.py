
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_revtm_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revtm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.990231946831516e+01, -1.990237195382977e+01, -1.990264129558987e+01, -1.990178155562603e+01, -1.990234684769943e+01, -1.990234684769943e+01, -3.234683507351362e+00, -3.234680714023901e+00, -3.234714729928424e+00, -3.234959464015510e+00, -3.234698117912290e+00, -3.767663416444095e+00, -6.291460410207300e-01, -7.589499309517347e-01, -7.473656319548664e-01, -7.493361426747536e-01, -7.592278920746069e-01, -7.592278920746069e-01, -2.105194657302525e-01, -2.124991629237649e-01, -7.583034068240626e-01, -1.713760720397708e-01, -2.111253663657351e-01, -2.111253663657351e-01, -2.618598074319085e-02, -2.697687149761136e-02, -7.359323752810308e-02, -1.840511937076980e-02, -2.668829207074232e-02, -2.668829207074232e-02, -5.412148145803089e+00, -5.412654214319200e+00, -5.412199076545577e+00, -4.863529499171054e+00, -5.412408084416886e+00, -5.412408084416886e+00, -1.824715021385693e+00, -1.836227506381056e+00, -1.820125048329611e+00, -1.829070152036270e+00, -1.838464471410524e+00, -2.154928470340843e+00, -6.168364472747231e-01, -6.592195460911939e-01, -5.912145144580249e-01, -6.073808090878807e-01, -6.365388777349652e-01, -5.597223858829384e-01, -9.287189521748282e-02, -2.222341255360821e-01, -9.167432376424138e-02, -2.024117825777095e+00, -1.474293392178278e-01, -1.474293392178278e-01, -4.512273981025028e-03, -1.909359327440902e-02, -1.401379392537160e-02, -5.783925817513023e-02, -4.698635354092361e-03, -1.767664742802364e-02, -6.189015572447260e-01, -6.164341059589467e-01, -5.598749457534948e-01, -6.179461759047398e-01, -6.176016647540445e-01, -6.176016647540445e-01, -5.992777863463443e-01, -5.358426086969181e-01, -5.530661629737491e-01, -5.696376238934923e-01, -5.611049824885682e-01, -4.983854276043282e-01, -6.940565038294454e-01, -2.189528260453972e-01, -3.111286547978111e-01, -3.272290384777656e-01, -3.441555623841894e-01, -3.441555623841894e-01, -4.215366650135201e-01, -7.022196238270502e-02, -8.734989218613820e-02, -3.584347644423628e-01, -7.539470125524776e-02, -1.117137947605547e-01, -3.158118565702290e-02, -8.629454082496218e-03, -1.189095169556524e-02, -1.066184785470655e-01, -1.548476722014205e-02, -1.548476722014204e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_revtm_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revtm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.679444805442275e+01, -2.679451723305881e+01, -2.679487336549544e+01, -2.679373999695982e+01, -2.679448413427840e+01, -2.679448413427840e+01, -4.243633072751230e+00, -4.243670720315689e+00, -4.244964553407838e+00, -4.244800463891122e+00, -4.243663707153075e+00, -4.242372134486867e+00, -8.208090156760269e-01, -7.781827836927178e-01, -7.555815483047087e-01, -7.612123178141581e-01, -7.787996957597222e-01, -7.787996957597222e-01, -2.124313565645433e-01, -2.150940995709360e-01, -9.972251787570496e-01, -1.527400927268851e-01, -2.134142254812896e-01, -2.134142254812896e-01, -1.643773950010694e-02, -1.699114118383390e-02, -5.366725640355363e-02, -9.459957228164133e-03, -1.681035316009731e-02, -1.681035316009736e-02, -6.912960004679435e+00, -7.025057793427663e+00, -7.022056928509662e+00, -6.536367434703365e+00, -6.914616242054883e+00, -6.914616242054883e+00, -2.376463497083689e+00, -2.393928007189021e+00, -2.369535264519171e+00, -2.382961278302779e+00, -2.397547977394234e+00, -2.379374381686117e+00, -7.297810551136852e-01, -8.228408926711357e-01, -6.806619200006497e-01, -7.405623531194465e-01, -7.674822182061974e-01, -7.516320877801030e-01, -1.236123712961780e-01, -2.098682824327879e-01, -1.220041141136893e-01, -2.445069368991008e+00, -1.299494614122372e-01, -1.299494614122372e-01, -6.016336266073377e-03, -1.149613843594138e-02, -7.264325520117900e-03, -7.707142161272186e-02, -6.264814019268920e-03, -9.125732848804947e-03, -8.321679918709630e-01, -8.072958656732072e-01, -7.490710932767068e-01, -8.146781904466199e-01, -8.262602566810732e-01, -8.262602566810732e-01, -8.029363120342619e-01, -6.292415266932244e-01, -6.734846667669424e-01, -7.174897935944321e-01, -6.947128007513663e-01, -6.710166876703507e-01, -8.533434634024731e-01, -2.872966522540399e-01, -3.232740565989633e-01, -4.264454081929616e-01, -3.690029276448096e-01, -3.725011972682899e-01, -5.545293466854079e-01, -5.036244200134266e-02, -6.588011775714515e-02, -4.052173288758255e-01, -1.003785218440194e-01, -8.811002719817562e-02, -1.971701857412918e-02, -5.088467396874042e-03, -6.055231281810434e-03, -8.809867037428279e-02, -9.291385026575281e-03, -7.969890214811176e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revtm_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revtm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.707720371543573e-09, -7.707799005975884e-09, -7.708080532880119e-09, -7.706810243765190e-09, -7.707762216738136e-09, -7.707762216738136e-09, -5.353699206816690e-06, -5.354004155000266e-06, -5.362646763894754e-06, -5.357533446643697e-06, -5.353681942711539e-06, -8.703742213926676e-06, -4.470687582650359e-03, -4.534025755232747e-03, -4.591652754360786e-03, -4.678137777143131e-03, -4.531384392061100e-03, -4.531384392061100e-03, -7.276666135698389e-01, -7.177092758691915e-01, -2.376020872945249e-03, -1.211875718412969e+00, -7.208764919783928e-01, -7.208764919783928e-01, -1.206785012441803e+03, -1.075416164580143e+03, -2.353389134630553e+01, -5.691909193163567e+03, -1.122762871155191e+03, -1.122762871155190e+03, -2.203827318918282e-06, -1.026643065911945e-06, -1.035831465185861e-06, -2.919818482301300e-06, -2.203154377368577e-06, -2.203154377368577e-06, -5.239629002152606e-05, -5.087820240815173e-05, -5.306656015242090e-05, -5.180647035725948e-05, -5.059625746966590e-05, -7.925176609591329e-05, -1.275825638987542e-02, -1.005802322558543e-02, -1.472946521729430e-02, -1.070476338278841e-02, -1.140944467535927e-02, -8.798518985378288e-03, -1.227832942984929e+01, -5.328598184233314e-01, -1.290906582469838e+01, -1.117204815834791e-04, -2.147981558653952e+00, -2.147981558653952e+00, -2.273525192025303e+06, -4.081672535195661e+03, -1.703086321739003e+04, -8.320060596830831e+01, -1.933705796133644e+06, -6.709357450061366e+03, 1.758912970433622e-02, -1.264041833823833e-02, -3.662851616520088e-02, -1.223548897656300e-02, 7.361443148449103e-03, 7.361443148449103e-03, 1.078984394683710e-02, -2.225890976178022e-02, -2.013549170732246e-02, -1.804099014065127e-02, -1.913292325722514e-02, -1.781250835703452e-02, -8.154301392511635e-03, -3.322164846004902e-01, -1.575585425115884e-01, -5.051047309433485e-02, -1.164938540614893e-01, -1.087641721306122e-01, -1.889827280182713e-02, -2.768525851462607e+01, -1.251573574622594e+01, -1.067813026207708e-01, -2.839619436992895e+01, -6.285231020365146e+00, -5.669718542061796e+02, -9.577364371941550e+04, -3.247158710506860e+04, -6.715803724503028e+00, -9.402250468872287e+03, -1.137071609985005e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revtm_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revtm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.512810422190602e-04, 1.512839183681265e-04, 1.512961771869696e-04, 1.512494168762352e-04, 1.512825595014044e-04, 1.512825595014044e-04, -5.215530276012471e-04, -5.213595805785468e-04, -5.154220416663156e-04, -5.177028476014458e-04, -5.214968691584034e-04, 3.412597397565941e-03, -1.687489845712767e-03, 1.222463251515053e-02, 1.131753770278727e-02, 1.191469738432339e-02, 1.224128170391432e-02, 1.224128170391432e-02, 3.998961942725946e-02, 4.138055495753472e-02, -6.023086485024260e-04, 2.595237435305855e-02, 4.004819758843729e-02, 4.004819758843729e-02, 1.068581029009029e-02, 1.095540321977442e-02, 1.691107230024833e-02, 6.358970008687909e-03, 1.108407233047657e-02, 1.108407233047657e-02, 3.520429379711909e-03, 8.930131507595175e-04, 9.080435548071926e-04, 7.491515307282531e-04, 3.522753808699871e-03, 3.522753808699871e-03, -1.084774940052342e-03, -1.071887357471619e-03, -1.087054357478573e-03, -1.081179234832549e-03, -1.067359500331508e-03, 5.610191745648180e-03, 2.419317404070196e-02, 2.669093308454092e-02, 2.326904724539245e-02, 1.662465757629175e-02, 2.481159649287490e-02, 2.534875498665797e-03, -1.298672026110556e-04, 3.116695516449679e-02, -1.481651791508691e-04, 7.846883298605493e-03, 2.819094040906574e-02, 2.819094040906574e-02, -2.496907412507709e-08, 5.276877517115096e-03, 1.074469699038725e-02, -2.920723420728315e-05, -2.875796519157756e-08, 7.601558295270967e-03, -6.447082150288136e-02, 3.432808279586416e-02, 7.152431644372584e-03, 3.548896216377532e-02, -3.135359150079595e-02, -3.135359150079595e-02, -3.947829801808665e-02, 2.723758233999553e-02, 2.942988110615509e-02, 3.183380814207468e-02, 3.054836585277011e-02, 5.357054194313365e-03, 2.415922685737514e-02, -2.721329230133859e-03, 2.894362984019164e-02, -6.033937873006321e-03, 3.185911391041837e-02, 2.819691857021555e-02, -3.542922083979406e-03, 1.571566037560581e-02, 1.793045341503142e-02, 3.631693465858851e-02, -1.157214036667669e-04, 3.055668497878088e-02, 8.067786232466050e-03, 2.524528499829838e-03, 6.831929736336393e-03, 2.618458124223850e-02, 5.638139886260956e-03, 7.905379933602807e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
