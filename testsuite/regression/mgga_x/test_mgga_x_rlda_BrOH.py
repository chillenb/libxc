
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_rlda_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rlda", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.499531476954344e+01, -2.499557024140174e+01, -2.499684515875381e+01, -2.499267781361713e+01, -2.499544800822184e+01, -2.499544800822184e+01, -4.011219259033362e+00, -4.011826538163479e+00, -4.030154462510637e+00, -4.023146651810670e+00, -4.011397917884465e+00, -4.011397917884465e+00, -4.798490980606416e-01, -4.774727279688780e-01, -4.200228191076935e-01, -4.444220561125302e-01, -4.789898692584903e-01, -4.789898692584903e-01, -1.368287325929382e-01, -1.422483740003103e-01, -3.917288009727069e-01, -3.478679984724887e-02, -1.381748266607569e-01, -1.381748266607569e-01, -5.967818168816652e-05, -6.651539881225375e-05, -1.854650911649966e-03, -2.801473471946916e-06, -6.693717714475398e-05, -6.693717714475386e-05, 8.512387175030290e-01, 6.415172630120923e+00, -1.627210695045267e-01, 5.924261362688455e-01, -4.635524109281601e+00, 3.077842346661571e+01, -2.339294730342566e-02, 8.131141840766253e+00, -2.743052948192168e+00, -2.956400342146524e+00, -2.970003709224076e+00, -1.643069487766450e+00, 4.409807203097550e-02, 1.892714932972356e-01, 6.427578679565478e-02, -1.463808918821149e+00, -1.951661973266595e+00, -5.836264099797688e+01, -2.091261938332858e-03, 1.405691746567733e-02, -4.220892947796667e-04, -6.576747255940482e+00, -2.013927444931654e-02, -1.439825440702338e-02, 2.971635705464180e-07, 5.165317066888351e-10, -2.238821622828708e-10, -6.042000046058081e-04, 1.486364169771979e-06, -5.417699194503892e-08, 8.382509410115753e-06, -2.332736932170204e-05, -1.231495502154941e-06, 8.470720134454533e-04, -3.008160062137095e-05, 6.495165666032746e-07, -1.619920496841384e-06, -9.613544928620636e-01, 7.445025098815081e-02, -4.259756649868089e-01, 4.963356938866583e+00, 3.224572673286132e-02, 5.221784513380778e-02, -1.717273339239907e-03, -1.348838335392691e-03, -1.784063196953117e-02, 3.243448843492450e-01, -1.735760276941928e+00, -7.298495602479916e-01, 1.532566860405919e-04, -1.069506922857342e-02, -4.776106225272663e-01, -4.463772245282567e-04, -7.566902435976724e-03, -2.326626823263777e-06, 1.456424454219234e-09, -1.653335164346467e-08, -3.297158201426740e-03, -4.810531276027801e-07, -4.127669443384263e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_rlda_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rlda", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-7.498594430863031e+01, -7.498671072420520e+01, -7.499053547626143e+01, -7.497803344085139e+01, -7.498634402466551e+01, -7.498634402466551e+01, -1.203365777710009e+01, -1.203547961449044e+01, -1.209046338753191e+01, -1.206943995543201e+01, -1.203419375365339e+01, -1.203419375365339e+01, -1.439547294181925e+00, -1.432418183906634e+00, -1.260068457323081e+00, -1.333266168337591e+00, -1.436969607775471e+00, -1.436969607775471e+00, -4.104861977788146e-01, -4.267451220009310e-01, -1.175186402918121e+00, -1.043603995417466e-01, -4.145244799822707e-01, -4.145244799822707e-01, -1.790345450644996e-04, -1.995461964367613e-04, -5.563952734949898e-03, -8.404420415840749e-06, -2.008115314342620e-04, -2.008115314342616e-04, 2.553716152509088e+00, 1.924551789036277e+01, -4.881632085135801e-01, 1.777278408806537e+00, -1.390657232784480e+01, 9.233527039984712e+01, -7.017884191027697e-02, 2.439342552229876e+01, -8.229158844576505e+00, -8.869201026439573e+00, -8.910011127672227e+00, -4.929208463299349e+00, 1.322942160929265e-01, 5.678144798917069e-01, 1.928273603869644e-01, -4.391426756463447e+00, -5.854985919799782e+00, -1.750879229939316e+02, -6.273785814998573e-03, 4.217075239703199e-02, -1.266267884339000e-03, -1.973024176782144e+01, -6.041782334794961e-02, -4.319476322107013e-02, 8.914907116392538e-07, 1.549595120066505e-09, -6.716464868486124e-10, -1.812600013817424e-03, 4.459092509315938e-06, -1.625309758351167e-07, 2.514752823034725e-05, -6.998210796510612e-05, -3.694486506464821e-06, 2.541216040336360e-03, -9.024480186411284e-05, 1.948549699809824e-06, -4.859761490524153e-06, -2.884063478586190e+00, 2.233507529644524e-01, -1.277926994960427e+00, 1.489007081659975e+01, 9.673718019858396e-02, 1.566535354014233e-01, -5.151820017719720e-03, -4.046515006178075e-03, -5.352189590859351e-02, 9.730346530477348e-01, -5.207280830825787e+00, -2.189548680743975e+00, 4.597700581217758e-04, -3.208520768572026e-02, -1.432831867581799e+00, -1.339131673584770e-03, -2.270070730793018e-02, -6.979880469791331e-06, 4.369273362657702e-09, -4.960005493039400e-08, -9.891474604280219e-03, -1.443159382808341e-06, -1.238300833015279e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rlda_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rlda", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rlda_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rlda", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [-1.371625504629408e-03, -1.371643554656452e-03, -1.371731561808338e-03, -1.371437899220325e-03, -1.371634921727151e-03, -1.371634921727151e-03, -8.185883430674293e-03, -8.188310669872566e-03, -8.260847722056579e-03, -8.231115999335847e-03, -8.186481510714445e-03, -8.186481510714445e-03, -1.663185348030225e-02, -1.651834458697684e-02, -1.386064946623620e-02, -1.515694298216500e-02, -1.659097163021479e-02, -1.659097163021479e-02, -6.605238406108427e-02, -6.861119839656955e-02, -6.438600705108601e-03, -1.120340248891804e-02, -6.655771261252869e-02, -6.655771261252867e-02, -7.212414760152584e-05, -7.796320896545505e-05, -9.026650176869472e-04, -1.439543253215707e-06, -8.147581107596107e-05, -8.147581107596083e-05, -1.099696691645171e-04, -6.242451507495827e-03, -4.018216318698762e-06, -5.323950452221984e-05, -3.260243963780355e-03, -1.437292476889369e-01, -1.567042588503167e-06, -1.853814862629349e-01, -2.173179115234863e-02, -2.483066420181583e-02, -2.462933979494229e-02, -7.537904805916032e-03, -2.128595079656239e-04, -3.059391315873471e-03, -5.292816880685068e-04, -2.419213074549851e-01, -3.723414725223026e-01, -3.329676827249022e+02, -1.020920157678416e-04, -6.823589203352803e-04, -4.323056302217879e-06, -1.312670171594106e-01, -6.123605383479338e-03, -3.129963272448378e-03, -1.804195323362115e-08, -3.652026550018603e-14, -1.629503074241084e-14, -3.536392537585498e-05, -3.997730858974245e-07, -5.311202664019340e-10, -7.000384162676500e-12, -5.509085960836756e-11, -1.526543760173056e-13, -7.190439040809192e-08, -9.088279218542340e-11, -4.237017372168497e-14, -2.883111773532463e-13, -1.555390282355388e-01, -8.185084726140973e-04, -2.385211264309365e-02, -3.434097610081741e+00, -1.449459071646825e-04, -2.020219036356291e-04, -5.118390934306358e-06, -1.884924389749685e-06, -1.578163239247042e-04, -7.538988376409259e-02, -2.159128346845924e+00, -1.221827459717379e-01, -7.758176165843072e-06, -1.522846267533751e-02, -1.340927197151233e-01, -8.698792532803516e-06, -2.499718974454696e-03, -6.809714817894967e-08, -1.414808939465451e-11, -2.659700156092089e-10, -5.465882379063557e-04, -6.821741657699090e-08, -5.022489112698359e-10]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rlda_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rlda", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.097300403703526e-02, 1.097314843725162e-02, 1.097385249446670e-02, 1.097150319376260e-02, 1.097307937381721e-02, 1.097307937381721e-02, 6.548706744539434e-02, 6.550648535898053e-02, 6.608678177645264e-02, 6.584892799468678e-02, 6.549185208571556e-02, 6.549185208571556e-02, 1.330548278424180e-01, 1.321467566958147e-01, 1.108851957298896e-01, 1.212555438573200e-01, 1.327277730417183e-01, 1.327277730417183e-01, 5.284190724886741e-01, 5.488895871725564e-01, 5.150880564086881e-02, 8.962721991134429e-02, 5.324617009002295e-01, 5.324617009002294e-01, 5.769931808122067e-04, 6.237056717236404e-04, 7.221320141495577e-03, 1.151634602572566e-05, 6.518064886076886e-04, 6.518064886076866e-04, 8.797573533161372e-04, 4.993961205996662e-02, 3.214573054959010e-05, 4.259160361777587e-04, 2.608195171024284e-02, 1.149833981511495e+00, 1.253634070802533e-05, 1.483051890103479e+00, 1.738543292187890e-01, 1.986453136145266e-01, 1.970347183595383e-01, 6.030323844732826e-02, 1.702876063724992e-03, 2.447513052698777e-02, 4.234253504548055e-03, 1.935370459639881e+00, 2.978731780178421e+00, 2.663741461799218e+03, 8.167361261427327e-04, 5.458871362682242e-03, 3.458445041774303e-05, 1.050136137275285e+00, 4.898884306783470e-02, 2.503970617958702e-02, 1.443356258689692e-07, 2.921621240014882e-13, 1.303602459392867e-13, 2.829114030068398e-04, 3.198184687179396e-06, 4.248962131215472e-09, 5.600307330141200e-11, 4.407268768669405e-10, 1.221235008138445e-12, 5.752351232647353e-07, 7.270623374833872e-10, 3.389613897734798e-13, 2.306489418825970e-12, 1.244312225884311e+00, 6.548067780912778e-03, 1.908169011447492e-01, 2.747278088065393e+01, 1.159567257317460e-03, 1.616175229085033e-03, 4.094712747445086e-05, 1.507939511799748e-05, 1.262530591397634e-03, 6.031190701127407e-01, 1.727302677476739e+01, 9.774619677739029e-01, 6.206540932674457e-05, 1.218277014027001e-01, 1.072741757720986e+00, 6.959034026242813e-05, 1.999775179563757e-02, 5.447771854315974e-07, 1.131847151572361e-10, 2.127760124873671e-09, 4.372705903250846e-03, 5.457393326159272e-07, 4.017991290158687e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
