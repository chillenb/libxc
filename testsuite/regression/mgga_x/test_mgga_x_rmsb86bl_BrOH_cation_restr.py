
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_rmsb86bl_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmsb86bl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.043159215837780e+01, -2.043169338122512e+01, -2.043214318040698e+01, -2.043064016155460e+01, -2.043142768306846e+01, -2.043142768306846e+01, -3.200276317788318e+00, -3.200328981272868e+00, -3.201761978360254e+00, -3.201475553540776e+00, -3.201173796238405e+00, -3.757246819934166e+00, -5.875606858625357e-01, -7.731823462438350e-01, -7.655777625790782e-01, -7.657559747512340e-01, -7.658017797681007e-01, -7.658017797681007e-01, -2.110596669068584e-01, -2.127035201256200e-01, -6.733352504665946e-01, -1.859230628717194e-01, -1.947893970733413e-01, -1.947893970733414e-01, -2.056057017215566e-02, -2.125400289946720e-02, -7.656453292990650e-02, -1.435152238855261e-02, -1.639265998345917e-02, -1.639265998345917e-02, -5.324105224912732e+00, -5.324291696730003e+00, -5.324108330774894e+00, -5.095551143103681e+00, -5.324202226393738e+00, -5.324202226393738e+00, -1.776181605999331e+00, -1.794510418350592e+00, -1.762483732710533e+00, -1.778789164164561e+00, -1.792986012343865e+00, -2.154350370966907e+00, -6.173311065415592e-01, -6.562217826519576e-01, -5.817165820979588e-01, -5.934003209733419e-01, -6.245071855422015e-01, -5.544718108874773e-01, -7.787540372794136e-02, -2.275344471173168e-01, -7.203898029202939e-02, -2.005713492134584e+00, -1.588804017473883e-01, -1.588804017473882e-01, -2.291115965522301e-03, -1.426565742823507e-02, -1.008450657801708e-02, -4.844351211495317e-02, -2.674032236280583e-03, -1.234827476747690e-02, -5.945753654885475e-01, -5.941865490662113e-01, -5.863027115146664e-01, -5.944346195860684e-01, -5.943803551123202e-01, -5.943803551123202e-01, -5.788654540494560e-01, -5.234506543278169e-01, -5.386927120503514e-01, -5.541172355426182e-01, -5.461960686244862e-01, -4.974256021026187e-01, -6.916700733458921e-01, -1.887946690934800e-01, -3.082609326797102e-01, -3.150265473498901e-01, -3.404342042406602e-01, -3.404342042406602e-01, -4.181516043589343e-01, -7.411060606938946e-02, -9.331070260515884e-02, -3.604824452411979e-01, -6.169380332467457e-02, -1.226755149772535e-01, -2.769363967376323e-02, -5.778478319439850e-03, -8.699650638205146e-03, -1.168726553522713e-01, -1.138767314365508e-02, -1.138767314365507e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_rmsb86bl_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmsb86bl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.962087301495432e+01, -2.962098529706148e+01, -2.962149791912656e+01, -2.961982862032001e+01, -2.962070164042956e+01, -2.962070164042956e+01, -4.558315762362035e+00, -4.558171224138015e+00, -4.554347008468739e+00, -4.556327028303997e+00, -4.555642704255328e+00, -4.354948844555366e+00, -8.306337685195115e-01, -8.052221153052769e-01, -7.781320782691722e-01, -7.871521909407148e-01, -7.851738205314076e-01, -7.851738205314076e-01, -2.044498682360521e-01, -2.078480720781276e-01, -9.186558268388633e-01, -1.614021478637696e-01, -1.750585710940949e-01, -1.750585710940953e-01, -1.935727543713676e-02, -2.005671385710813e-02, -7.358292372113354e-02, -1.318861273746048e-02, -1.524666483836589e-02, -1.524666483836589e-02, -6.836420874356632e+00, -6.838639817553840e+00, -6.836538902949345e+00, -7.181204368868062e+00, -6.837537576275587e+00, -6.837537576275587e+00, -2.587677677683658e+00, -2.609157280572910e+00, -2.569809056511352e+00, -2.591028109571758e+00, -2.607317852478415e+00, -2.444773953948071e+00, -7.507459840955388e-01, -8.315942472340078e-01, -6.842675312009259e-01, -7.225189707971732e-01, -7.657904645323375e-01, -7.638958215850085e-01, -1.039162099001542e-01, -2.053339421343476e-01, -9.610950096653098e-02, -2.471249219651056e+00, -1.367873944775356e-01, -1.367873944775358e-01, -3.054821289390656e-03, -1.308293699616762e-02, -9.339382208825291e-03, -6.460125059975161e-02, -3.565376332449835e-03, -1.141233383666968e-02, -7.845983919402851e-01, -7.762100077747874e-01, -7.916944098903236e-01, -7.815841368217730e-01, -7.803634829634083e-01, -7.803634829634083e-01, -7.628015691813452e-01, -6.245810688749379e-01, -6.638167155027089e-01, -7.032726865863121e-01, -6.830722381178499e-01, -7.199750353340859e-01, -8.675131583495146e-01, -2.579730339475715e-01, -3.142732438483928e-01, -4.592240513934939e-01, -3.680925229038234e-01, -3.680925229038233e-01, -5.901790043360290e-01, -7.135107522800281e-02, -8.830917686208120e-02, -4.211076915934734e-01, -8.230386335364430e-02, -1.083709136352440e-01, -2.622941018991309e-02, -5.072628890703387e-03, -7.899741624557774e-03, -1.038020154442692e-01, -1.052900588390289e-02, -1.052900588390272e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rmsb86bl_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmsb86bl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.334683939695244e-08, -1.334683957591766e-08, -1.334673404154152e-08, -1.334674191035078e-08, -1.334675373122943e-08, -1.334675373122943e-08, -9.921383357663953e-06, -9.919552630583350e-06, -9.869406463186222e-06, -9.886365004149221e-06, -9.888674346363559e-06, -4.630144569371410e-06, -6.162065094583822e-03, -2.808664528113605e-03, -2.975769680156301e-03, -2.948069921872005e-03, -2.953056003906488e-03, -2.953056003906488e-03, -5.333091867716779e-01, -5.138629428357481e-01, -3.012772059962686e-03, -9.324000927047286e-01, -7.695942782956424e-01, -7.695942782956344e-01, -1.180607955300651e+03, -1.062522388917347e+03, -1.526928271932654e+01, -3.872954877803862e+03, -2.560463500171168e+03, -2.560463500171168e+03, -1.054544226841500e-06, -1.054136063491300e-06, -1.054526756683056e-06, -3.673373353884155e-06, -1.054336819681884e-06, -1.054336819681884e-06, -1.034370743051851e-04, -1.008540275503280e-04, -1.050400190807843e-04, -1.030438894520206e-04, -1.011205894097769e-04, -4.357361911721460e-05, -6.107505582188593e-03, -4.620780818096575e-03, -7.961845634861128e-03, -7.146731529843795e-03, -5.791482613318728e-03, -1.094255411186919e-02, -1.585143266896157e+01, -4.125560661659040e-01, -2.164113415723871e+01, -5.421628603439902e-05, -1.718913790607982e+00, -1.718913790607967e+00, -2.113652924828309e+07, -3.891745824670698e+03, -1.712075965912698e+04, -1.057682120654836e+02, -1.139083102616483e+07, -7.462714332826373e+03, -6.622785459583402e-03, -6.698181041276562e-03, -1.488637178247907e-02, -6.649769854029326e-03, -6.660647324891298e-03, -6.660647324891298e-03, -7.380432549566360e-03, -1.200245075276951e-02, -1.041816471190776e-02, -9.077168006595191e-03, -9.735945062612838e-03, -3.156517395184737e-02, -3.776720035005093e-03, -4.901806892818223e-01, -1.129531969895379e-01, -1.035362215457982e-01, -7.260498757336603e-02, -7.260498757336616e-02, -3.312595033356723e-02, -1.689532578641402e+01, -8.268245606868623e+00, -5.429702407687326e-02, -4.023058061300417e+01, -4.175001632195252e+00, -3.855020912890384e+02, -9.992308711108955e+04, -2.571908451007203e+04, -4.945410522251035e+00, -1.036062901673857e+04, -1.036062901673955e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rmsb86bl_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmsb86bl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.394736310590439e-03, 1.394758466304912e-03, 1.394845223774248e-03, 1.394517326636196e-03, 1.394690929684012e-03, 1.394690929684012e-03, 2.189917265900791e-03, 2.188866432661423e-03, 2.160295546645799e-03, 2.171838235242254e-03, 2.170838698841083e-03, -9.875951964231488e-18, 4.506777443006785e-03, -4.924850642969676e-17, -2.230232927007900e-17, 1.155687238007335e-18, -2.736090122660412e-17, -2.736090122660412e-17, 1.150212156899658e-16, -1.052550152437961e-16, 8.469776649747997e-04, 7.136337661276340e-16, 4.549461587366150e-16, 2.637723817741401e-17, 4.013292841884346e-16, -7.190636963569811e-17, 8.791888415116239e-16, 1.079436727179537e-16, -9.804142480564936e-17, -9.804142480564936e-17, -1.105000307092638e-18, 1.265940031491862e-19, -6.341860899040454e-20, 5.617308970477930e-03, -1.010515601927924e-18, -1.010515601927924e-18, 4.228537024985902e-03, 4.285624568779972e-03, 4.143895207118110e-03, 4.236836262258053e-03, 4.285159157645561e-03, 5.222824840893671e-19, 1.563197651018174e-17, 1.285308973308417e-17, -3.224971395367017e-17, 2.513640994243241e-17, 1.789141510639737e-17, 1.146237256921027e-02, 4.495048046615739e-05, 2.443486176580087e-16, 3.191458125582969e-05, -1.580360495138405e-18, 4.951961389621998e-16, 2.114550143289618e-16, 1.177638229978308e-12, -4.239230797460482e-17, 1.467988733894391e-16, 6.160662408206065e-06, 2.013263244687908e-11, 4.412128137292453e-16, -1.068886967129193e-18, 4.885597275337697e-18, 2.573267424547872e-02, -1.007656739328023e-20, 1.118809040736614e-18, 1.118809040736614e-18, -2.458105724958902e-18, -3.536448325223730e-18, 6.570410163462230e-18, -9.061246242233276e-18, 8.516719292699453e-18, 4.540560395403632e-02, 8.930512910252742e-20, 3.341306724580884e-03, 1.224720991714838e-16, 2.344536119519929e-02, -1.483557159733973e-17, 2.702073563405314e-17, 1.512446786764184e-02, 2.080580050079643e-15, -1.949319954031968e-15, 2.359018197910065e-17, 3.303673561109864e-05, 9.562645158463727e-16, -9.718588911274682e-16, 4.098600987061220e-19, -2.723342944617821e-18, 5.304140602392452e-16, -9.271886324393016e-17, 2.744718069600942e-16]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
