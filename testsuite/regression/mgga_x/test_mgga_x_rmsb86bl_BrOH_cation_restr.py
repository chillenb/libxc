
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_rmsb86bl_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmsb86bl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.198368933721814e+01, -2.198373499018004e+01, -2.198398735400290e+01, -2.198330741439340e+01, -2.198365665782038e+01, -2.198365665782038e+01, -3.378414239552888e+00, -3.378414001441196e+00, -3.378617096716144e+00, -3.380074558308065e+00, -3.379044695282234e+00, -3.379044695282234e+00, -6.522257893966543e-01, -6.519432839047250e-01, -6.477456681607402e-01, -6.562879972245649e-01, -6.534488620422385e-01, -6.534488620422385e-01, -2.068758494217356e-01, -2.073597411212597e-01, -7.304901310888903e-01, -1.727519320712115e-01, -1.837185335799588e-01, -1.837185335799589e-01, -2.053374481466406e-02, -2.120454524742677e-02, -7.521279594141901e-02, -1.409779570127172e-02, -1.622113984553407e-02, -1.622113984553407e-02, -5.323465913064672e+00, -5.323660165005249e+00, -5.323482445558736e+00, -5.323653806725493e+00, -5.323560153591123e+00, -5.323560153591123e+00, -2.106897488393142e+00, -2.124223093515152e+00, -2.107600543506553e+00, -2.122611334381372e+00, -2.116389554767214e+00, -2.116389554767214e+00, -5.932946713105764e-01, -6.311152516267871e-01, -5.321238966379470e-01, -5.364413737538146e-01, -6.030353015291637e-01, -6.030353015291637e-01, -1.433048703918776e-01, -2.202278507764926e-01, -1.358896925197875e-01, -1.827484688302702e+00, -1.523059141935177e-01, -1.523059141935178e-01, -1.154285446411869e-02, -1.370510211599796e-02, -9.883792722820899e-03, -1.032614886404981e-01, -1.192507127820089e-02, -1.192507127820090e-02, -5.930189972600812e-01, -5.926897850072949e-01, -5.928077317917479e-01, -5.928990736467081e-01, -5.928527407279816e-01, -5.928527407279816e-01, -5.754466913651022e-01, -5.217306794817792e-01, -5.363898826800511e-01, -5.512763846440164e-01, -5.434403216274067e-01, -5.434403216274067e-01, -6.544897780778487e-01, -2.655937687174035e-01, -2.979938751875377e-01, -3.538445370565469e-01, -3.249730947346108e-01, -3.249730947346108e-01, -4.725472031756119e-01, -7.341450236810976e-02, -9.112054734935381e-02, -3.389203785746894e-01, -1.181608096060253e-01, -1.181608096060253e-01, -2.663222684232454e-02, -4.922801420819098e-03, -8.613354063495404e-03, -1.139793321938882e-01, -1.109919076313677e-02, -1.109919076313677e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_rmsb86bl_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmsb86bl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.774386160511360e+01, -2.774396772543471e+01, -2.774448646014216e+01, -2.774291048004657e+01, -2.774372953308216e+01, -2.774372953308216e+01, -4.192944384690453e+00, -4.193163068486204e+00, -4.199194074816668e+00, -4.198495811309305e+00, -4.197558806579151e+00, -4.197558806579151e+00, -7.938577682891014e-01, -7.919433647542047e-01, -7.456972494407416e-01, -7.586184999429009e-01, -7.564323511798869e-01, -7.564323511798869e-01, -1.468439771671705e-01, -1.480784052037106e-01, -8.627845579199056e-01, -1.325995934408283e-01, -1.494403116487805e-01, -1.494403116487806e-01, -1.931844114632167e-02, -2.000851970362271e-02, -7.163078815615478e-02, -1.298309838700869e-02, -1.510557253159035e-02, -1.510557253159035e-02, -6.835552847914673e+00, -6.837795742709442e+00, -6.835689354254809e+00, -6.837667712729595e+00, -6.836672896431272e+00, -6.836672896431272e+00, -2.215614734056908e+00, -2.268308154788342e+00, -2.206355289772693e+00, -2.258319398824116e+00, -2.249990017071275e+00, -2.249990017071275e+00, -7.423972749586918e-01, -8.566348983056762e-01, -6.736469937365270e-01, -7.351039982596027e-01, -7.605246113409421e-01, -7.605246113409421e-01, -1.161079650142827e-01, -1.323407114756364e-01, -1.119821490228432e-01, -2.560746062849240e+00, -1.109012223948245e-01, -1.109012223948245e-01, -1.055345082734979e-02, -1.263020495896805e-02, -9.175942093565193e-03, -9.176043653051012e-02, -1.106888412673153e-02, -1.106888412673154e-02, -7.862409505438200e-01, -7.768098972068324e-01, -7.801084323603064e-01, -7.828481961855405e-01, -7.814757933613937e-01, -7.814757933613937e-01, -7.673553896060009e-01, -6.149152231219535e-01, -6.568396803129661e-01, -7.005296017455246e-01, -6.778496388270716e-01, -6.778496388270716e-01, -9.015051201362536e-01, -1.906468809626624e-01, -2.405995270769560e-01, -4.013020201131242e-01, -3.129158979120240e-01, -3.129158979120239e-01, -5.333330959586070e-01, -7.015998347872991e-02, -8.473289922538120e-02, -4.045043115297350e-01, -9.778260009384121e-02, -9.778260009384131e-02, -2.533763955604553e-02, -4.387450304561662e-03, -7.830118254750142e-03, -9.380640661374061e-02, -1.029464319052904e-02, -1.029464319052905e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rmsb86bl_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmsb86bl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.576983801226912e-09, -4.576894394291868e-09, -4.576006239675310e-09, -4.577316692624611e-09, -4.576700254322311e-09, -4.576700254322311e-09, -8.225196413059413e-06, -8.231631660793002e-06, -8.413648592552259e-06, -8.437608710390785e-06, -8.395788121628751e-06, -8.395788121628751e-06, -6.263932832055159e-03, -6.273696823548381e-03, -6.503156493603734e-03, -6.555783355473441e-03, -6.543889014895597e-03, -6.543889014895597e-03, -1.740092234203458e+00, -1.770584393780100e+00, -2.669182496299304e-03, -1.640428852872704e+00, -1.312137981419330e+00, -1.312137981419329e+00, -1.194110931318819e+03, -1.077188260959699e+03, -1.719614469981801e+01, -4.247546650461480e+03, -2.708007031495272e+03, -2.708007031495278e+03, -1.072644953401077e-06, -1.072002207990277e-06, -1.072249149827209e-06, -1.071698211424215e-06, -1.072507048301309e-06, -1.072507048301309e-06, -1.243760016805711e-04, -1.101176507574803e-04, -1.179098887506179e-04, -1.040311471777952e-04, -1.193417030072634e-04, -1.193417030072634e-04, -2.116526297807209e-02, -1.565415886547149e-02, -2.342534314555357e-02, -1.959239092623247e-02, -1.927140660237868e-02, -1.927140660237868e-02, -2.650969001724655e+00, -1.288009679277279e+00, -3.108278852407059e+00, -1.712762367362134e-04, -3.177254155910444e+00, -3.177254155910449e+00, -8.830016374386239e+03, -4.787497525836659e+03, -1.903675073377874e+04, -7.339735372985210e+00, -8.965772614209027e+03, -8.965772614209014e+03, -8.736865471378190e-03, -8.793307387553195e-03, -8.773778359596068e-03, -8.758004119733858e-03, -8.767043030165006e-03, -8.767043030165006e-03, -1.214035212698576e-02, -1.742679147280901e-02, -1.603607081080040e-02, -1.454751857174065e-02, -1.564357269097108e-02, -1.564357269097109e-02, -1.387766053596826e-02, -6.008133701312832e-01, -4.020538631998066e-01, -1.382522829548458e-01, -2.631970794517533e-01, -2.631970794517534e-01, -5.422094717083106e-02, -1.812606721288592e+01, -9.687450697027852e+00, -1.975493124736296e-01, -5.480569542291101e+00, -5.480569542291094e+00, -4.805293923169240e+02, -2.140576057696436e+05, -2.704163662254761e+04, -6.795715427311803e+00, -1.185762795436967e+04, -1.185762795436967e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rmsb86bl_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmsb86bl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rmsb86bl_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmsb86bl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.407457584545902e-04, 1.407384821457289e-04, 1.406344320695152e-04, 1.407395714433985e-04, 1.406947483471823e-04, 1.406947483471823e-04, 1.521203475912727e-03, 1.525518139514255e-03, 1.648269806969438e-03, 1.668656401876060e-03, 1.636826651155199e-03, 1.636826651155199e-03, 9.529273516893007e-03, 9.484189258244976e-03, 8.540767277672199e-03, 9.854774996077714e-03, 9.503772904843529e-03, 9.503772904843529e-03, 9.658921634762548e-02, 1.047089473865670e-01, 1.321002635742285e-03, 1.442358043467652e-02, 1.880307741036478e-02, 1.880307741036474e-02, 1.727770615937721e-05, 3.514715940520111e-06, 1.496940681838981e-05, 9.307523363825431e-10, 1.134258271605174e-08, 1.134258271613166e-08, 3.988484229644497e-05, 3.938955135956752e-05, 3.905235480654366e-05, 3.865149096872990e-05, 4.004903123707951e-05, 4.004903123707951e-05, 9.246564683636438e-03, 7.892866988218797e-03, 8.307704938375318e-03, 6.966097135132208e-03, 8.937065242847866e-03, 8.937065242847866e-03, 4.627872412155808e-02, 4.351860894371626e-02, 3.451585162653140e-02, 3.025511867718590e-02, 4.360555661787581e-02, 4.360555661787581e-02, 2.035213703988581e-03, 6.827695721780261e-02, 1.157840622682389e-03, 1.171147926083839e-02, 2.162779534761614e-02, 2.162779534761622e-02, 6.372419316830889e-12, 7.208033472543191e-11, 1.830744592910116e-09, 1.450623917120320e-04, 2.467367707283951e-10, 2.467367707224357e-10, 6.746010849612899e-03, 6.572370599250336e-03, 6.634523935454330e-03, 6.686405988875314e-03, 6.664050774012089e-03, 6.664050774012089e-03, 1.395190632607300e-02, 1.008794329284488e-02, 1.198306792946808e-02, 1.329025306144565e-02, 1.343545823643050e-02, 1.343545823643051e-02, 4.537032206282848e-02, 6.495835400350697e-02, 8.022666623623151e-02, 5.634749468104482e-02, 7.931077585705831e-02, 7.931077585705834e-02, 5.418224513268970e-02, 8.740978453608877e-05, 3.930382656186018e-05, 8.024612911772278e-02, 2.127589690608386e-03, 2.127589690608360e-03, 8.930324295478630e-10, 5.467091822788648e-14, 3.103292715854263e-09, 5.455058624623729e-03, 6.827823993609761e-10, 6.827823993440399e-10]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
