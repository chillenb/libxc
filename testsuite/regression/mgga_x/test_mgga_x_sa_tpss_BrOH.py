
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_sa_tpss_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_sa_tpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.990336758240101e+01, -1.990342017882341e+01, -1.990369000729700e+01, -1.990282846287385e+01, -1.990339502019832e+01, -1.990339502019832e+01, -3.234743004391042e+00, -3.234740060282689e+00, -3.234769670986787e+00, -3.235016086213747e+00, -3.234757573351384e+00, -3.705121425296829e+00, -6.297878940038814e-01, -7.524618516705844e-01, -7.464639533859363e-01, -7.458277794877058e-01, -7.526148103917940e-01, -7.526148103917940e-01, -2.104430502504548e-01, -2.118584435697734e-01, -7.597362756534138e-01, -1.851572047181431e-01, -2.108846470328579e-01, -2.108846470328579e-01, -1.700710346376848e-02, -1.781000342996118e-02, -7.064723100628235e-02, -8.176474832790210e-03, -1.762433297262336e-02, -1.762433297262275e-02, -5.477411551172772e+00, -5.478386111604926e+00, -5.477514371811320e+00, -4.864250725406208e+00, -5.477906871159487e+00, -5.477906871159487e+00, -1.824922264819615e+00, -1.836386209021048e+00, -1.820356598967027e+00, -1.829259220534066e+00, -1.838611978918588e+00, -2.114877542550702e+00, -6.125333140391143e-01, -6.635258100371806e-01, -5.835809774239474e-01, -6.054296371444459e-01, -6.350664420265368e-01, -5.597236876905913e-01, -9.322121940583232e-02, -2.306708930374410e-01, -9.201614774520178e-02, -2.020395109246877e+00, -1.597932339947418e-01, -1.597932339947418e-01, -4.533430864402137e-03, -9.013271539067383e-03, -6.755134509327832e-03, -5.808007310300414e-02, -4.720654508650773e-03, -8.212788515520243e-03, -6.300056504212738e-01, -6.268228624059071e-01, -5.600882134155187e-01, -6.288650449150230e-01, -6.284256038966874e-01, -6.284256038966874e-01, -6.098696087425876e-01, -5.311720160206782e-01, -5.531858117559650e-01, -5.746353720300363e-01, -5.636167672036123e-01, -4.984005858993247e-01, -6.959222825182539e-01, -2.193120646809296e-01, -3.076389606977820e-01, -3.272603851522853e-01, -3.377915884537100e-01, -3.377915884537100e-01, -4.215403098364711e-01, -6.573532932483658e-02, -8.756212164592973e-02, -3.526877454459126e-01, -7.568456742362707e-02, -1.203199120189384e-01, -1.993925218931480e-02, -2.468738329835336e-03, -4.689003942778320e-03, -1.148175293864981e-01, -6.980214400345822e-03, -6.980214400344137e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_sa_tpss_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_sa_tpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.680254070446017e+01, -2.680261035596265e+01, -2.680296857047785e+01, -2.680182750573899e+01, -2.680257703332014e+01, -2.680257703332014e+01, -4.242620641379002e+00, -4.242660139208385e+00, -4.244008696040804e+00, -4.243823543515579e+00, -4.242651784778541e+00, -4.396515727250853e+00, -8.193630820571016e-01, -6.900324110874954e-01, -6.289248661156840e-01, -6.536195015935892e-01, -6.915244998400247e-01, -6.915244998400247e-01, -1.756344296543280e-01, -1.821766371788515e-01, -9.965580862928385e-01, 1.030085529179747e-01, -1.775461284238168e-01, -1.775461284238168e-01, 4.538873070610360e+00, 4.341685275784858e+00, 1.481354966956751e+00, 1.617514995567020e+01, 4.289869952878353e+00, 4.289869952872854e+00, -6.730417138288394e+00, -6.730097028247140e+00, -6.730376035782095e+00, -6.539587116125913e+00, -6.730265663195488e+00, -6.730265663195488e+00, -2.374491185165475e+00, -2.392257897600079e+00, -2.367426321917057e+00, -2.381097000248930e+00, -2.395954405543914e+00, -2.432094772333542e+00, -7.586709133303338e-01, -8.237220756844105e-01, -7.100350150553103e-01, -7.534101064296903e-01, -7.907626261403163e-01, -7.516630062955689e-01, -1.239861054859532e-01, -1.087238502768910e-01, -1.223653271901597e-01, -2.516332911630581e+00, 1.359126797530633e-01, 1.359126797530633e-01, -6.044346476798684e-03, 1.304652148548403e+01, 8.776362828424336e+00, -7.736185244084941e-02, -6.293956652603213e-03, 1.290339750418680e+01, -7.507351713831457e-01, -7.555413021995451e-01, -7.495406228602609e-01, -7.526127848241319e-01, -7.532939903665538e-01, -7.532939903665538e-01, -7.298377463085737e-01, -6.555248552729482e-01, -6.893130178743621e-01, -7.110521288256227e-01, -7.011418508194970e-01, -6.711651339230673e-01, -8.667081227399487e-01, -2.869890960890259e-01, -2.916753857067235e-01, -4.261275345805640e-01, -3.634714881212185e-01, -3.634714881212182e-01, -5.544532725570800e-01, 1.714869752838787e+00, 1.187876839879405e+00, -4.207231183084193e-01, -1.006979249554087e-01, 4.402518464729299e-01, 6.214310874666940e+00, 4.547031969447188e+01, 1.705228229216585e+01, 4.223244795188870e-01, 1.281200078750341e+01, 1.281200078739061e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_sa_tpss_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_sa_tpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.853069257827048e-09, -6.853101616522341e-09, -6.853187849624772e-09, -6.852669444799121e-09, -6.853086677740397e-09, -6.853086677740397e-09, -4.833322252843994e-06, -4.834272432459161e-06, -4.862232708848202e-06, -4.849839283568490e-06, -4.833494032124079e-06, -6.209302421072090e-06, -1.818168280315722e-03, -5.379393560294420e-03, -6.420971307641661e-03, -6.030017974356267e-03, -5.356516496532128e-03, -5.356516496532128e-03, -1.032469750070628e+00, -9.564624979874099e-01, -6.470033746003098e-04, -8.290287035378265e+00, -1.009233439701659e+00, -1.009233439701659e+00, -5.322229808782805e+05, -4.416723905050037e+05, -1.449188311635078e+03, -1.014618783928888e+07, -4.605644101668017e+05, -4.605644101662144e+05, -6.147872538339564e-06, -6.208348570159906e-06, -6.154543236013862e-06, -2.427076139575340e-06, -6.178070928274024e-06, -6.178070928274024e-06, -3.983334490330157e-05, -4.016787463270838e-05, -3.964748997546562e-05, -3.992631749487668e-05, -4.032063592637972e-05, -5.894555809352669e-05, -1.064273183552383e-02, -1.671779286403532e-02, -1.070493503562293e-02, -1.315781175573932e-02, -1.136461596003554e-02, -8.560176364387901e-03, -1.279462579211329e+00, -1.380729930289162e+00, -1.370094833653398e+00, -1.136738571110362e-04, -1.711717527748741e+01, -1.711717527748741e+01, -1.669991344229351e+05, -6.863998231282263e+06, -2.174580012776649e+07, -7.026762796718145e+00, -1.420390194698656e+05, -9.960459810715025e+06, -1.960043560152976e-01, -9.099032858849007e-02, -2.838569697536382e-02, -1.400812330293148e-01, -1.258241884713250e-01, -1.258241884713250e-01, -1.590111948583738e-01, -1.764012322607886e-02, -2.262960367199879e-02, -3.594942664160100e-02, -2.754091073582010e-02, -1.625483246853308e-02, -1.050128736229026e-02, -1.012141974832661e-01, -1.814618796852854e-01, -3.933987556514228e-02, -9.952206871825524e-02, -9.952206871825553e-02, -1.765233387349485e-02, -2.011410635744654e+03, -5.562044859553012e+02, -7.600679062962085e-02, -2.825145157261917e+00, -9.797749364223360e+01, -2.825440663030572e+05, -1.224025599838352e+09, -9.393303740557738e+07, -1.184188386393423e+02, -1.909829306979110e+07, -1.909829306962315e+07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_sa_tpss_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_sa_tpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.552064869386263e-04, 1.552096404694643e-04, 1.552231032456211e-04, 1.551718312419299e-04, 1.552081504033125e-04, 1.552081504033125e-04, -5.297722156069506e-04, -5.295651830289935e-04, -5.232237682978310e-04, -5.256591628486804e-04, -5.297122457681262e-04, 2.537348450601976e-03, -1.902650421058146e-03, 1.115880829486690e-02, 1.332645752679798e-02, 1.231281615352542e-02, 1.111506168998749e-02, 1.111506168998749e-02, 4.818795974392562e-02, 4.504660630445182e-02, -7.144347409406120e-04, 2.779071183481597e-01, 4.724286216724661e-02, 4.724286216724661e-02, 8.923164670057739e+00, 8.509988361414331e+00, 1.872764989276543e+00, 1.878148745614033e+01, 8.599446063681786e+00, 8.599446063670813e+00, 1.375518940345769e-02, 1.389824084285531e-02, 1.377092802926984e-02, 7.818958577539938e-04, 1.382667449099715e-02, 1.382667449099715e-02, -1.127955509366567e-03, -1.108981096843436e-03, -1.132922275597976e-03, -1.122186739109416e-03, -1.102917938041749e-03, 3.767175566363939e-03, 2.831420123245548e-02, 6.582489678844562e-02, 2.060541246529245e-02, 3.620681001881297e-02, 3.655546710085929e-02, 2.548739930809890e-03, -1.849900303149234e-04, 9.608157106546739e-02, -2.095242247786849e-04, 1.184687420823322e-02, 3.587340181663589e-01, 3.587340181663589e-01, -1.960327537194537e-07, 1.702612896216326e+01, 2.271108437766652e+01, -4.802175098555578e-05, -2.165205072005642e-07, 1.868938551646039e+01, 6.658586180441124e-01, 3.043846976001669e-01, 7.667542410673133e-03, 4.730784089216282e-01, 4.240217563095124e-01, 4.240217563095124e-01, 4.898021301229296e-01, 2.934885260268423e-02, 4.954624318781880e-02, 9.252624492910944e-02, 6.585214261911983e-02, 5.462695540561014e-03, 4.674570913518367e-02, -3.182585669591245e-03, 2.568245403271743e-02, -6.254041996962152e-03, 2.084895691533951e-02, 2.084895691533947e-02, -3.581055064755723e-03, 2.065895330225609e+00, 1.414902229958706e+00, 2.775270382019199e-02, -1.682653464931643e-04, 7.487096427320252e-01, 7.625821034678487e+00, 6.230852643094850e+01, 3.277829211348493e+01, 7.858362166512526e-01, 2.199703440559406e+01, 2.199703440540051e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
