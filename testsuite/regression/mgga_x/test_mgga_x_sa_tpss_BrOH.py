
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_sa_tpss_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_sa_tpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.234648256716071e+01, -2.234653730810120e+01, -2.234689289596917e+01, -2.234599972710572e+01, -2.234651043428636e+01, -2.234651043428636e+01, -3.451225640641293e+00, -3.451235236309687e+00, -3.451770752865444e+00, -3.453570649308284e+00, -3.451233584663191e+00, -3.451233584663191e+00, -6.689109630221444e-01, -6.687751531963946e-01, -6.677375962461989e-01, -6.735506680756854e-01, -6.688604652496450e-01, -6.688604652496450e-01, -2.060082497558369e-01, -2.070499638259786e-01, -7.770644041838902e-01, -1.815992830423390e-01, -2.062917576429926e-01, -2.062917576429926e-01, -2.720339029448431e-02, -2.952530982446869e-02, -9.541079358508940e-02, -6.888626256528980e-02, -2.817579157217425e-02, -2.817579157217436e-02, -5.473650319398729e+00, -5.474629953867596e+00, -5.473801287829790e+00, -5.474560443907858e+00, -5.474083848270197e+00, -5.474083848270197e+00, -2.076798252507766e+00, -2.090960398875410e+00, -2.075126804856313e+00, -2.086147921443894e+00, -2.088669569487770e+00, -2.088669569487770e+00, -5.856277796515406e-01, -6.025190817228294e-01, -5.489544111100503e-01, -5.490282840514488e-01, -6.094840442549737e-01, -6.094840442549737e-01, -1.560720320211350e-01, -2.261097806049915e-01, -1.520790214475317e-01, -1.811097575086150e+00, -1.602159343113733e-01, -1.602159343113733e-01, -4.920210646366768e-02, -6.071207679133570e-02, -3.229830674612537e-02, -1.291878961380093e-01, -6.296818001196750e-02, -6.296818001196754e-02, -5.866873286057263e-01, -6.061174966429522e-01, -6.019134437803977e-01, -5.969608531667956e-01, -5.996622608331447e-01, -5.996622608331447e-01, -5.524365775065239e-01, -5.287426776331632e-01, -5.483273901176240e-01, -5.638988627134173e-01, -5.561979382379645e-01, -5.561979382379645e-01, -6.293026788531282e-01, -2.675111673150644e-01, -3.014295130777120e-01, -3.624261022071246e-01, -3.297872161922317e-01, -3.297872161922316e-01, -4.707206588409013e-01, -8.446784364141331e-02, -1.122446497847398e-01, -3.365821345579202e-01, -1.299181529332940e-01, -1.299181529332941e-01, -7.706149996205870e-02, -6.231410564236875e-02, -3.004960692132559e-02, -1.245538917361762e-01, -5.815817799102148e-02, -5.815817799102147e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_sa_tpss_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_sa_tpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.763890040907514e+01, -2.763895485128966e+01, -2.763938759451508e+01, -2.763850150563832e+01, -2.763892741375005e+01, -2.763892741375005e+01, -4.195562276349923e+00, -4.195601266422380e+00, -4.196958912940296e+00, -4.197308152515704e+00, -4.195589713255087e+00, -4.195589713255087e+00, -7.753423791129457e-01, -7.738658944399226e-01, -7.322493046038021e-01, -7.426576703100577e-01, -7.748093273566489e-01, -7.748093273566489e-01, -2.042917085756696e-01, -2.084049320771219e-01, -9.628550063186515e-01, -1.409757903500859e-01, -2.055154926681620e-01, -2.055154926681620e-01, -3.576077137810758e-01, -3.192757850019263e-01, -1.942974904044030e-01, -1.055613262779876e-01, -3.391365673567023e-01, -3.391365673566998e-01, -6.724367525909281e+00, -6.724085835133879e+00, -6.724407102228968e+00, -6.724184577381657e+00, -6.724132166302093e+00, -6.724132166302093e+00, -2.432431347890423e+00, -2.460401292546781e+00, -2.420470864712364e+00, -2.442255466781389e+00, -2.465821111483585e+00, -2.465821111483585e+00, -7.144254286674303e-01, -7.800936975842299e-01, -6.689811029213988e-01, -7.055001824695731e-01, -7.453620754346789e-01, -7.453620754346789e-01, -1.730384915014699e-01, -2.106237575385831e-01, -1.658322358059559e-01, -2.374691530314262e+00, -1.694832978564604e-01, -1.694832978564604e-01, -1.288815197910178e-01, -1.131316090558778e-01, -1.182957124537316e-01, -1.346183855278754e-01, -9.495238035719313e-02, -9.495238035719311e-02, -7.439835659580023e-01, -7.406064403128823e-01, -7.399332429385431e-01, -7.404168188708394e-01, -7.400161173169487e-01, -7.400161173169487e-01, -7.255853931399713e-01, -6.531273488241957e-01, -6.795594336584131e-01, -6.920843946178239e-01, -6.862596824747934e-01, -6.862596824747934e-01, -8.174554039020091e-01, -2.511491008609754e-01, -3.176761801210776e-01, -4.290722235138663e-01, -3.765303353927331e-01, -3.765303353927330e-01, -5.687291963777321e-01, -2.520734202488876e-01, -1.850688736523461e-01, -4.053334358948796e-01, -1.657106012715333e-01, -1.657106012715330e-01, -1.138082095914556e-01, -7.837293694799574e-02, -1.529238645380369e-01, -1.536072101324466e-01, -8.483821789948262e-02, -8.483821789948263e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_sa_tpss_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_sa_tpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.379804580533262e-08, -1.379839545545103e-08, -1.379930858259994e-08, -1.379360845219531e-08, -1.379823545661291e-08, -1.379823545661291e-08, -1.221266975777262e-05, -1.221474191885492e-05, -1.227428239659465e-05, -1.222926243617062e-05, -1.221312399443006e-05, -1.221312399443006e-05, -5.429603602716482e-03, -5.443495640929873e-03, -5.740544832621966e-03, -5.603653967560685e-03, -5.434913840194305e-03, -5.434913840194305e-03, -5.701168762560386e-01, -5.551151236513818e-01, -1.660969387355772e-03, -9.714905439261430e-01, -5.651577765010839e-01, -5.651577765010839e-01, 3.965680084739589e+04, 3.042269727034470e+04, 1.153511035618642e+02, 5.711189548656144e+04, 3.425282676237983e+04, 3.425282676237955e+04, -6.176426325855611e-06, -6.236833980320874e-06, -6.182725941136499e-06, -6.229676759301816e-06, -6.207082123544460e-06, -6.207082123544460e-06, -5.601787181740283e-05, -5.483688022490338e-05, -5.578157941020462e-05, -5.492406579441946e-05, -5.573479408312964e-05, -5.573479408312964e-05, -2.027196825054137e-02, -2.272655065549328e-02, -2.220098127930002e-02, -2.364263644468303e-02, -2.017765326187954e-02, -2.017765326187954e-02, 2.377586266724152e+00, -3.130337404109209e-01, 2.310015659526795e+00, -1.586441415765394e-04, 7.691803047384361e-01, 7.691803047384361e-01, 1.007608279139254e+05, 5.198403456435950e+04, 2.699077018594179e+05, 1.233663684357384e+01, 6.252949229777781e+04, 6.252949229777774e+04, -1.653228597766806e-01, -9.589285373806179e-02, -1.163813315203288e-01, -1.364812433022635e-01, -1.259379218252917e-01, -1.259379218252917e-01, -9.507787887904111e-02, -1.840045332201976e-02, -2.568089228635129e-02, -4.317656216655689e-02, -3.260218642499987e-02, -3.260218642499987e-02, -1.533916550324238e-02, -2.306149718431302e-01, -1.230025031524027e-01, -7.736311700029319e-02, -8.882216046775165e-02, -8.882216046775168e-02, -2.861192160744418e-02, 2.081429822533895e+02, 4.308876049791296e+01, -1.314944480146518e-01, 8.470679506281186e+00, 8.470679506281149e+00, 4.008444341864883e+03, 1.885464041451147e+06, 8.020141131490876e+05, 9.354549787915227e+00, 1.080413611912410e+05, 1.080413611912415e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_sa_tpss_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_sa_tpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_sa_tpss_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_sa_tpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.930731437843002e-03, 1.930800464108856e-03, 1.931119132441083e-03, 1.929997905505188e-03, 1.930767632383129e-03, 1.930767632383129e-03, 2.687599096285797e-03, 2.688495424385560e-03, 2.716384181985890e-03, 2.718366348361891e-03, 2.687750563087996e-03, 2.687750563087996e-03, 4.028630133962587e-03, 4.028407973459552e-03, 3.717237631392650e-03, 4.126499723423820e-03, 4.029395109720226e-03, 4.029395109720226e-03, 3.006086658321451e-03, 3.956909818784011e-03, 5.549274885509307e-04, -2.177868547714283e-02, 3.195556529126331e-03, 3.195556529126331e-03, -6.653626262472696e-01, -5.867935715540070e-01, -1.591193125435801e-01, -1.078200937570453e-01, -6.401129461336922e-01, -6.401129461336872e-01, 1.369767255568637e-02, 1.383999807414169e-02, 1.371405442000581e-02, 1.382460183925325e-02, 1.376781203601383e-02, 1.376781203601383e-02, 2.850414435938164e-03, 3.020493566739285e-03, 2.754637297363144e-03, 2.896399195606368e-03, 3.105002868489019e-03, 3.105002868489019e-03, 3.068818274932592e-02, 2.452221059035922e-02, 2.272672154141188e-02, 1.742682331494749e-02, 3.713963906981801e-02, 3.713963906981801e-02, -6.553654034452525e-02, -1.018753965068622e-02, -6.557775184167917e-02, 3.355578298991325e-03, -5.598835095579164e-02, -5.598835095579164e-02, -1.684905013187709e-01, -1.307933517405546e-01, -2.829292965428799e-01, -7.188854970697961e-02, -1.200604283304682e-01, -1.200604283304680e-01, 2.678899432448127e-01, 2.301672285209429e-01, 2.597657134857861e-01, 2.783206069574730e-01, 2.700536439018613e-01, 2.700536439018614e-01, 7.362081202427249e-02, 2.876618271036886e-02, 4.881134787617525e-02, 8.570753577788455e-02, 6.367697455619652e-02, 6.367697455619645e-02, 1.711466160962290e-02, 6.039140731156539e-03, 6.332182588964273e-03, 2.200535450062560e-02, 1.374159384973390e-02, 1.374159384973388e-02, 2.254589415403697e-02, -2.193776971002052e-01, -1.242400072267871e-01, 3.287936974935456e-02, -9.420701558984607e-02, -9.420701558984582e-02, -1.140088402695115e-01, -9.701580314170574e-02, -2.802103139677838e-01, -9.424717465719808e-02, -1.273678676202316e-01, -1.273678676202316e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
