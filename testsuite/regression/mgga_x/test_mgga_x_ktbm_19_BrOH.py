
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_19_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_19", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.170511089787882e+01, -2.170521885986518e+01, -2.170573418520493e+01, -2.170397127204823e+01, -2.170516747873182e+01, -2.170516747873182e+01, -3.025645475067077e+00, -3.025775315052166e+00, -3.029794428318814e+00, -3.028478827410059e+00, -3.025695908798903e+00, -3.960428006687808e+00, -5.162368775195653e-01, -6.563783068075845e-01, -6.197973949268752e-01, -6.330488465988345e-01, -6.573184293557597e-01, -6.573184293557597e-01, -1.738504532935916e-01, -1.778906889530466e-01, -6.008124671174416e-01, -1.059466361920765e-01, -1.750295754433149e-01, -1.750295754433149e-01, -7.507177727081445e-03, -7.864137703493090e-03, -3.227822990339307e-02, -3.598398199430680e-03, -7.782197996703903e-03, -7.782197996703905e-03, -6.092949948216338e+00, -6.092490434881322e+00, -6.092894057308146e+00, -5.450967437892859e+00, -6.092727927275168e+00, -6.092727927275168e+00, -1.638274578720458e+00, -1.661166629619411e+00, -1.628713188149017e+00, -1.646599574291031e+00, -1.666458033271967e+00, -2.193030274901836e+00, -6.858826974937096e-01, -7.464453724185198e-01, -6.403316262139866e-01, -6.819627897553576e-01, -7.159408794679814e-01, -5.820387843577760e-01, -7.234309537230811e-02, -1.591658666308479e-01, -7.138924800044427e-02, -2.278497166144425e+00, -8.919876620175406e-02, -8.919876620175406e-02, -3.544465776871626e-03, -3.967354421697107e-03, -2.973614009922006e-03, -4.525103406010052e-02, -3.690842147320062e-03, -3.614823272643687e-03, -6.763308338842448e-01, -6.820722211090178e-01, -6.485933974545053e-01, -6.785832690826943e-01, -6.793957923781225e-01, -6.793957923781225e-01, -6.580415208245817e-01, -5.922287465282681e-01, -6.244180432032981e-01, -6.441958806398966e-01, -6.353892765058770e-01, -5.373030592817803e-01, -7.853561182515026e-01, -1.748622258541397e-01, -2.741822670033612e-01, -2.952081669725927e-01, -3.305143032288017e-01, -3.305143032288018e-01, -3.989707492770087e-01, -2.983892243529317e-02, -4.066554080004185e-02, -3.790202393308839e-01, -5.877663690983854e-02, -6.039503528501358e-02, -8.797130827539808e-03, -1.086010695586659e-03, -2.063145013116780e-03, -5.761113630707428e-02, -3.072047238469118e-03, -3.072047238469113e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_19_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_19", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.235549007286825e+01, -3.235556120410044e+01, -3.235593704839785e+01, -3.235477025806487e+01, -3.235552710578606e+01, -3.235552710578606e+01, -4.926747632186938e+00, -4.926966352622340e+00, -4.933695860618684e+00, -4.931489895170101e+00, -4.926831788223400e+00, -5.041310112019636e+00, -7.748086189697626e-01, -9.338160186303397e-01, -8.841424401158553e-01, -9.025341049178062e-01, -9.350261579650829e-01, -9.350261579650829e-01, -2.479989546714577e-01, -2.537177550007840e-01, -8.488515897680819e-01, -1.431033273344985e-01, -2.496805813736803e-01, -2.496805813736803e-01, -9.741748902672910e-03, -1.020533355853769e-02, -4.205833433372867e-02, -4.667920325827011e-03, -1.009900646547832e-02, -1.009900646547833e-02, -7.112334936743910e+00, -7.115997174829575e+00, -7.112732146152426e+00, -7.845711048445599e+00, -7.114176643637476e+00, -7.114176643637476e+00, -2.646058774079915e+00, -2.689860707599271e+00, -2.627272608485460e+00, -2.662045604987049e+00, -2.699991606965664e+00, -2.888908038386584e+00, -8.035343277210004e-01, -8.513188017374546e-01, -7.830828098659399e-01, -7.851576556625940e-01, -8.217433279137379e-01, -9.100051480473585e-01, -9.563414601235551e-02, -2.226754693354202e-01, -9.436726243651004e-02, -2.611418051520158e+00, -1.199330960265515e-01, -1.199330960265515e-01, -4.725703167784061e-03, -5.146638023396296e-03, -3.857543160135246e-03, -6.002687266791388e-02, -4.920836456936057e-03, -4.689291469913633e-03, -8.647190536226057e-01, -8.414050329570926e-01, -8.899314104404272e-01, -8.558105566161802e-01, -8.525392616229553e-01, -8.525392616229553e-01, -8.300529809806974e-01, -7.011557260971681e-01, -7.121411039338443e-01, -7.393409204552384e-01, -7.227183094642606e-01, -8.115791520400824e-01, -8.931485385769400e-01, -2.511308408939139e-01, -3.889243708790621e-01, -4.775996735783277e-01, -4.544165222113790e-01, -4.544165222113792e-01, -6.495618864841066e-01, -3.884847229517313e-02, -5.309814388253963e-02, -4.789668611628871e-01, -7.772642856049145e-02, -7.974803313794505e-02, -1.141503339953036e-02, -1.408730158405711e-03, -2.676292015413606e-03, -7.606752847155261e-02, -3.985142801389435e-03, -3.985142801389425e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_19_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_19", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.095277471432969e-08, -2.095275133973860e-08, -2.095248054555545e-08, -2.095288502653139e-08, -2.095276354127819e-08, -2.095276354127819e-08, -1.527904657662957e-05, -1.528249036418457e-05, -1.538398029270301e-05, -1.533975711161057e-05, -1.527971179532139e-05, -2.025138169677536e-05, -3.893106205823789e-03, -5.596624685301019e-03, -4.945825303785350e-03, -5.316529391697158e-03, -5.614133155709681e-03, -5.614133155709681e-03, -7.707174717110765e-01, -7.893666137748655e-01, -8.874160189118675e-04, -3.510094965481396e-01, -7.754455689061109e-01, -7.754455689061109e-01, -3.267699693737647e+01, -2.976664732522520e+01, -1.441942551020704e+00, -8.195682079192107e+01, -3.108875362471756e+01, -3.108875362471750e+01, -7.326674457486837e-06, -7.327430271885997e-06, -7.326787199968553e-06, -6.551307393232795e-06, -7.327025035879233e-06, -7.327025035879233e-06, -1.204712559533221e-04, -1.228605177713198e-04, -1.192516447246132e-04, -1.212583306931255e-04, -1.236554492668509e-04, -1.664552630471971e-04, -3.598342948016133e-02, -3.210272058930163e-02, -3.778508861520756e-02, -4.041650898682062e-02, -3.388531851551079e-02, -2.752760910537062e-02, 1.016104717058689e-01, -3.042583527366098e-01, 9.452263206896971e-02, -3.333165643300700e-04, -5.557299788965251e-01, -5.557299788965251e-01, 2.511115258971369e+02, -7.588735182959797e+01, -2.680223200475222e+02, 7.575946521755448e-01, 2.338307005292416e+02, -1.014104976296664e+02, -4.416825025794264e-02, -4.459551130047523e-02, -4.238159031891085e-02, -4.435190760264007e-02, -4.441303250577705e-02, -4.441303250577705e-02, -5.014353115789699e-02, -6.132558072434850e-02, -6.120122339761252e-02, -5.850950792571927e-02, -6.016108556656335e-02, -5.085007767782067e-02, -2.529303398874616e-02, -1.611790516676564e-01, -2.147065051592808e-01, -1.198536985953601e-01, -2.036843493429039e-01, -2.036843493429041e-01, -5.617796285002579e-02, -1.545694038881435e+00, -9.361238348251586e-01, -2.532282326793411e-01, 2.841177834935958e-01, -8.015813088674887e-01, -1.479447276600434e+01, -1.058120411292902e+03, -4.119854806223521e+02, -9.630395340870855e-01, -1.663208669531302e+02, -1.663208669531305e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_19_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_19", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.002450703188377e-03, 2.002452303434352e-03, 2.002455258475877e-03, 2.002429773024099e-03, 2.002451573549898e-03, 2.002451573549898e-03, 6.719481648752280e-03, 6.721346417250864e-03, 6.777210312599900e-03, 6.755035614869911e-03, 6.719967325300673e-03, 1.982324069144129e-02, 8.085125266478047e-03, 4.742381744371114e-02, 3.909541391110060e-02, 4.284714474687168e-02, 4.764685646891222e-02, 4.764685646891222e-02, 1.357742404236859e-01, 1.442974917630021e-01, 2.077942895672051e-03, 2.169409393400916e-02, 1.381538621619947e-01, 1.381538621619947e-01, 5.622294979225591e-04, 5.899394835009771e-04, 2.284352341386277e-03, 1.522665912008092e-04, 5.971038072264811e-04, 5.971038072264850e-04, 1.165364261656607e-02, 1.162328064415228e-02, 1.165029584129791e-02, 8.378118702214951e-03, 1.163840302591718e-02, 1.163840302591718e-02, 8.865884872617661e-03, 9.363001512229180e-03, 8.644640785508171e-03, 9.040605684179779e-03, 9.495119931101956e-03, 3.168821132932061e-02, 1.317297129691181e-01, 1.085636127838229e-01, 1.344821408562292e-01, 1.319705626413097e-01, 1.251990371378096e-01, 6.363988734428298e-02, -4.931297912327804e-04, 5.423242965847206e-02, -5.310962853868435e-04, 3.923762846295837e-02, 2.073396898937253e-02, 2.073396898937253e-02, -2.159725387597579e-07, 1.891813618255626e-04, 2.814805454032997e-04, -1.889319696171887e-04, -2.486889327357018e-07, 1.911611359696201e-04, 7.359556549771411e-02, 8.338758888458463e-02, 6.993468666480369e-02, 7.717419152731210e-02, 7.853644998254906e-02, 7.853644998254906e-02, 7.953017811331424e-02, 1.516322280321189e-01, 1.410655459209315e-01, 1.202321138266917e-01, 1.319140291413536e-01, 7.840611167137862e-02, 1.093184928970569e-01, 1.054483761250409e-02, 1.262683256222788e-01, 5.139800376394138e-02, 1.630281545737070e-01, 1.630281545737071e-01, 5.540907838445162e-02, 1.896585160768232e-03, 3.084412977091233e-03, 2.113777500565512e-01, -5.031714559916118e-04, 9.364612250266280e-03, 4.083252049728020e-04, 5.388455517833877e-05, 1.440519659936177e-04, 9.764341992450628e-03, 1.923231646355363e-04, 1.923231646355348e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
