
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_19_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_19", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.503731184778893e+01, -2.503736584473564e+01, -2.503777729414747e+01, -2.503689842999133e+01, -2.503733878497680e+01, -2.503733878497680e+01, -3.405305333832472e+00, -3.405462098518178e+00, -3.410468970695620e+00, -3.411246188372379e+00, -3.405349374222374e+00, -3.405349374222374e+00, -5.620887992689009e-01, -5.613310937879907e-01, -5.429158967303552e-01, -5.550748697334207e-01, -5.618231461304002e-01, -5.618231461304002e-01, -1.689371881153338e-01, -1.721174369650590e-01, -6.188228206400935e-01, -1.022882818084552e-01, -1.698113469791575e-01, -1.698113469791575e-01, -7.501735082796010e-03, -7.856977203839479e-03, -3.210102744605192e-02, -3.576827257308061e-03, -7.776017092498247e-03, -7.776017092498247e-03, -6.088479592570314e+00, -6.088068999264284e+00, -6.088485476336134e+00, -6.088163686894967e+00, -6.088206259244540e+00, -6.088206259244540e+00, -2.083848063126462e+00, -2.121628352977845e+00, -2.078792950208162e+00, -2.109082797872776e+00, -2.115634752479221e+00, -2.115634752479221e+00, -6.231113935321995e-01, -6.676776207576238e-01, -5.611196146534939e-01, -5.843755014020227e-01, -6.612278588787607e-01, -6.612278588787607e-01, -7.378176538166216e-02, -1.567743665406621e-01, -7.298380055145620e-02, -1.929030647627529e+00, -8.775174754836292e-02, -8.775174754836292e-02, -3.455522897213208e-03, -3.945016660842768e-03, -2.963370708785566e-03, -4.477882433435208e-02, -3.593078183504895e-03, -3.593078183504894e-03, -6.661789802301263e-01, -6.722860893836611e-01, -6.702517018725938e-01, -6.685567899348017e-01, -6.694141317853666e-01, -6.694141317853666e-01, -6.384773092985738e-01, -5.839895940573502e-01, -6.121674923185315e-01, -6.284263075415996e-01, -6.206304847304226e-01, -6.206304847304226e-01, -6.864851366246508e-01, -2.123932108137084e-01, -2.646129063934824e-01, -3.527230408566946e-01, -3.121412077369711e-01, -3.121412077369712e-01, -4.857790243069031e-01, -2.974025948823945e-02, -4.036878157429516e-02, -3.383765567758902e-01, -5.970254277780981e-02, -5.970254277780981e-02, -8.742569093461714e-03, -1.079784814345381e-03, -2.057669630081629e-03, -5.691164733016540e-02, -3.053535015568484e-03, -3.053535015568478e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_19_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_19", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.913297207081606e+01, -2.913304544418549e+01, -2.913328267181467e+01, -2.913207259301237e+01, -2.913301165365477e+01, -2.913301165365477e+01, -5.026366548812854e+00, -5.026464316609784e+00, -5.029575865725604e+00, -5.029172934898543e+00, -5.026414980030456e+00, -5.026414980030456e+00, -8.374707978152984e-01, -8.358942267446005e-01, -7.977174661319339e-01, -8.190687782333257e-01, -8.369175710405775e-01, -8.369175710405775e-01, -2.431854745350350e-01, -2.481910495368628e-01, -8.840261197388919e-01, -1.397933597037464e-01, -2.445970508636221e-01, -2.445970508636221e-01, -9.755741869369909e-03, -1.022375529384326e-02, -4.233640396822345e-02, -4.763120712205637e-03, -1.011484540784742e-02, -1.011484540784742e-02, -7.118030601223207e+00, -7.121637493444770e+00, -7.118349932154506e+00, -7.121157254504467e+00, -7.119941203214815e+00, -7.119941203214815e+00, -2.853105094124543e+00, -2.875434475151093e+00, -2.846317217513151e+00, -2.864394678911457e+00, -2.876898763875825e+00, -2.876898763875825e+00, -8.402954034108006e-01, -9.316021395122915e-01, -8.029629076948871e-01, -8.512784382813523e-01, -8.648609916206449e-01, -8.648609916206449e-01, -9.894390766687503e-02, -2.201397440744361e-01, -9.797422870676764e-02, -2.861147049855181e+00, -1.189301578280331e-01, -1.189301578280331e-01, -4.556049131465907e-03, -5.232008917114950e-03, -3.888768130259794e-03, -5.980822321139614e-02, -4.785786904892640e-03, -4.785786904892638e-03, -8.782001044177141e-01, -8.543676372379237e-01, -8.625277091661133e-01, -8.691342830478008e-01, -8.658003575313480e-01, -8.658003575313480e-01, -8.556556759896694e-01, -7.060399043431429e-01, -7.237034011199085e-01, -7.578793252579581e-01, -7.384972487299142e-01, -7.384972487299144e-01, -9.812526240838709e-01, -3.037692474647135e-01, -3.810373801035470e-01, -5.055901316919261e-01, -4.451307216299261e-01, -4.451307216299262e-01, -6.583755345072894e-01, -3.901544607672359e-02, -5.344195180451262e-02, -4.811635033960187e-01, -7.972568191281898e-02, -7.972568191281906e-02, -1.163514572717439e-02, -1.444660342339463e-03, -2.692414477862056e-03, -7.604333369771950e-02, -4.070262977613723e-03, -4.070262977613716e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_19_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_19", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.417054707827954e-08, -2.417045295125277e-08, -2.416997348010769e-08, -2.417153994366392e-08, -2.417049762752383e-08, -2.417049762752383e-08, -1.719064566493024e-05, -1.719450208466175e-05, -1.730902412597637e-05, -1.727195677722073e-05, -1.719130705056025e-05, -1.719130705056025e-05, -4.438081398991461e-03, -4.418495819774240e-03, -3.941408329061524e-03, -4.300294421462030e-03, -4.431701887527239e-03, -4.431701887527239e-03, -7.342325124465811e-01, -7.480423890976649e-01, -9.686121365007442e-04, -2.606779792270820e-01, -7.371449811345601e-01, -7.371449811345601e-01, -3.077972358674988e+01, -2.759127592451388e+01, -1.019667673825296e+00, -5.861302642193536e+00, -2.911727712724789e+01, -2.911727712724784e+01, -7.321080560445430e-06, -7.321897560699497e-06, -7.321270557646350e-06, -7.321898278813089e-06, -7.321366967443063e-06, -7.321366967443063e-06, -1.564790424098612e-04, -1.598652261648419e-04, -1.557361713293475e-04, -1.586057427366337e-04, -1.596808117616171e-04, -1.596808117616171e-04, -3.252979174873537e-02, -2.866132050152720e-02, -3.283742496484156e-02, -3.451238365946883e-02, -3.118498992451841e-02, -3.118498992451841e-02, -3.375999319333741e-01, -2.911763882380649e-01, -3.911565019599022e-01, -2.814613054115599e-04, -4.824374580439147e-01, -4.824374580439147e-01, -5.391877835105086e+01, -2.007048035554158e+01, -1.767313632298259e+02, -3.322967188452943e-01, -6.277089972279002e+00, -6.277089972278885e+00, -4.349385351140774e-02, -4.394059055633093e-02, -4.380677739863037e-02, -4.368376727812189e-02, -4.374718512418634e-02, -4.374718512418634e-02, -4.863069434835213e-02, -6.040211302970714e-02, -5.993151060868251e-02, -5.702095024851512e-02, -5.869682864091293e-02, -5.869682864091293e-02, -2.205918875904963e-02, -2.420613564534569e-01, -2.040017686446314e-01, -1.447338580225917e-01, -1.898019535671341e-01, -1.898019535671341e-01, -6.859642011766240e-02, -1.265604411155949e+00, -6.373520425686640e-01, -2.237521578735483e-01, -6.328582536931617e-01, -6.328582536931612e-01, -1.897505518153353e+00, 2.189527618507486e+02, -3.086936589650712e+02, -7.458595053354727e-01, -3.446544124378720e+00, -3.446544124378876e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_19_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_19", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([3.105015321747762e-03, 3.104986337414884e-03, 3.104897340411849e-03, 3.105372277420740e-03, 3.104999684945152e-03, 3.104999684945152e-03, 1.174471594059962e-02, 1.174710687867784e-02, 1.182083071976950e-02, 1.182501795937014e-02, 1.174510811565518e-02, 1.174510811565518e-02, 2.042514985721457e-02, 2.032271732727247e-02, 1.801812488771886e-02, 2.083352477124521e-02, 2.039204115062844e-02, 2.039204115062844e-02, 1.184921261285979e-01, 1.238538267073413e-01, 4.744754408888793e-03, 1.236713955461464e-02, 1.197716352147752e-01, 1.197716352147752e-01, 5.197498529632205e-04, 5.341033865347787e-04, 1.498162971458684e-03, 7.880271646016180e-06, 5.479408770840297e-04, 5.479408770840290e-04, 1.162986982715006e-02, 1.159983019304441e-02, 1.162685828296274e-02, 1.160349900294669e-02, 1.161438944868737e-02, 1.161438944868737e-02, 2.745301963798789e-02, 2.854766487369982e-02, 2.745190882687415e-02, 2.836075607085143e-02, 2.816618935982377e-02, 2.816618935982377e-02, 9.824258973306070e-02, 7.790826547282069e-02, 8.747967511545032e-02, 8.125309132561515e-02, 9.883344110940048e-02, 9.883344110940048e-02, 6.664493806038066e-03, 4.877228635517801e-02, 7.475079446713325e-03, 2.320528198366572e-02, 1.613605956294495e-02, 1.613605956294495e-02, 7.515645971395563e-05, 3.830335274640678e-05, 1.648883177116310e-04, 1.377550564570763e-03, 8.683113134187643e-06, 8.683113134192044e-06, 7.060719605850230e-02, 8.011786055378459e-02, 7.671582192244593e-02, 7.407624619773999e-02, 7.539714042722094e-02, 7.539714042722094e-02, 7.315166179417693e-02, 1.455439666254407e-01, 1.333003143852879e-01, 1.120982626985782e-01, 1.233921325709824e-01, 1.233921325709825e-01, 7.258252764582791e-02, 8.336661617079646e-02, 1.089310871229182e-01, 1.247761168226435e-01, 1.323517765099374e-01, 1.323517765099375e-01, 1.256122238093694e-01, 1.478420648469562e-03, 1.929864133746848e-03, 1.450973343991212e-01, 6.694467300310101e-03, 6.694467300310102e-03, 4.196166962863791e-05, -6.748940031902219e-06, 9.896770429713686e-05, 6.800153536734294e-03, 3.152702142828804e-06, 3.152702142828192e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
