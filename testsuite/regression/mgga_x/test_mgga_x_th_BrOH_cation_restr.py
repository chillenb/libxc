
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_th_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_th", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-4.006357036207999e+01, -4.006492400822865e+01, -4.007047737292238e+01, -4.005043313002400e+01, -4.006099887474462e+01, -4.006099887474462e+01, -2.216943839341766e+00, -2.217529331726046e+00, -2.233071039206108e+00, -2.226975885174934e+00, -2.227397027484278e+00, -2.804870330906128e+00, -2.019521444632137e-01, -2.524341405359698e-01, -2.116665192479139e-01, -2.286345895144841e-01, -2.246668113885543e-01, -2.246668113885543e-01, -4.193511545066854e-02, -4.492374491569793e-02, -1.361103465961327e-01, -1.248996576114689e-02, -2.111662620570453e-02, -2.111662620570453e-02, -1.578077258699950e-06, -1.878565800730296e-06, -2.212148479927835e-04, -2.602566350595458e-07, -6.093625607322453e-07, -6.093625607322453e-07, -1.795252362420707e+01, -1.810127801385479e+01, -1.796100701492010e+01, -1.436736064043562e+01, -1.802681232335164e+01, -1.802681232335164e+01, -1.012794031842596e+00, -1.063303461377801e+00, -9.750810771000388e-01, -1.018765773284165e+00, -1.060078801713662e+00, -1.334914046602389e+00, -7.720555940238666e-01, -1.602008242255598e+00, -5.003582305374757e-01, -7.537715888339307e-01, -8.718220710895165e-01, -6.923292917475572e-01, -2.912119592538012e-03, -2.569751836164733e-02, -2.343119687078787e-03, -2.996025712831524e+00, -7.763075364526029e-03, -7.763075364526030e-03, -7.896972695000425e-08, -2.286042018334120e-07, -2.906584175781468e-07, -7.995721923273801e-04, -2.499840813442087e-07, -3.147947691001145e-07, -7.634881143637864e+00, -3.799395858478202e+00, -3.672239823245772e+00, -5.625411785274009e+00, -5.076332714902503e+00, -5.076332714902502e+00, -6.534781810491180e+00, -5.228580515193023e-01, -8.062717691002969e-01, -1.398263589088208e+00, -1.033452391418669e+00, -8.206827814207081e-01, -1.377918006409593e+00, -3.947537820750985e-02, -8.701430201185188e-02, -1.762417064425118e-01, -1.448319812986035e-01, -1.448319812986035e-01, -3.026273591057659e-01, -1.953092774797845e-04, -4.668459805279736e-04, -2.897005526696887e-01, -1.927981468397294e-03, -2.427828515759557e-03, -3.067207706738909e-06, -4.830701630924095e-09, -7.565530860484348e-08, -2.091935310852863e-03, -2.977391195994055e-07, -2.977391195994048e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_th_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_th", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.201907110862332e+02, -1.201947720246859e+02, -1.202114321187671e+02, -1.201512993900720e+02, -1.201829966242338e+02, -1.201829966242338e+02, -6.650831518025297e+00, -6.652587995178139e+00, -6.699213117618325e+00, -6.680927655524804e+00, -6.682191082452834e+00, -7.837137689296534e+00, -6.058564333896412e-01, -7.053306867916804e-01, -5.914211567221123e-01, -6.388319412904704e-01, -6.277455024091958e-01, -6.277455024091958e-01, -1.171716461121621e-01, -1.255222284409207e-01, -4.083310397883982e-01, -3.489843374438101e-02, -5.900233792770384e-02, -5.900233792770382e-02, -4.409333516955743e-06, -5.248933854981710e-06, -6.181003105680716e-04, -7.271876567840250e-07, -1.702630684398921e-06, -1.702630684398921e-06, -5.016146306763741e+01, -5.057710033282957e+01, -5.018516665933556e+01, -4.310208192130687e+01, -5.036903443289428e+01, -5.036903443289428e+01, -3.038382095527789e+00, -3.189910384133404e+00, -2.925243231300116e+00, -3.056297319852495e+00, -3.180236405140986e+00, -3.729906894918440e+00, -2.157214159772568e+00, -4.476199500420052e+00, -1.398059761795888e+00, -2.106126498212453e+00, -2.435973433926590e+00, -2.076987875242672e+00, -8.736358777614037e-03, -7.180188953989694e-02, -7.029359061236361e-03, -8.371248315264554e+00, -2.169094587146978e-02, -2.169094587146979e-02, -2.369091808500127e-07, -6.387470345345334e-07, -8.121338138212925e-07, -2.398716576982140e-03, -7.499522440326259e-07, -8.795736195444376e-07, -2.133275613663521e+01, -1.061595901633615e+01, -1.101671946973732e+01, -1.571806234120679e+01, -1.418387082105111e+01, -1.418387082105111e+01, -1.825894917637241e+01, -1.460926908656874e+00, -2.252818178368476e+00, -3.906912969511168e+00, -2.887587564258047e+00, -2.462048344262124e+00, -3.850065017909155e+00, -1.184261346225295e-01, -2.431281967978214e-01, -5.287251193275355e-01, -4.046775948049215e-01, -4.046775948049215e-01, -9.078820773172979e-01, -5.457170988405744e-04, -1.304422592651691e-03, -8.094574265770714e-01, -5.783944405191883e-03, -6.783638499916408e-03, -8.570139180594009e-06, -1.349754867464085e-08, -2.113898328664745e-07, -5.845113368559469e-03, -8.319181282924565e-07, -8.319181282924548e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_th_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_th", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.562691599235170e-08, -6.563025258699416e-08, -6.564322525985123e-08, -6.559390408699397e-08, -6.562000123552701e-08, -6.562000123552701e-08, -1.079015077640742e-05, -1.079571105285109e-05, -1.094268112345369e-05, -1.087907380225949e-05, -1.089040033467986e-05, -1.089040033467986e-05, -1.738939643887023e-03, -1.724757189470977e-03, -1.425213848729969e-03, -1.582411642196857e-03, -1.544113858918291e-03, -1.544113858918291e-03, -1.595374538932117e-01, -1.672979077662491e-01, -3.142431888195391e-04, -7.391950601540277e-02, -1.053883845555907e-01, -1.053883845555907e-01, -1.269574707773719e-01, -1.323181446857155e-01, -6.506214259144108e-02, -9.305771597378469e-02, -1.295885461796704e-01, -1.295885461796704e-01, -3.961296489909405e-05, -4.022781753371045e-05, -3.964823641104763e-05, -4.019060478306748e-05, -3.991928003337577e-05, -3.991928003337577e-05, -7.088621504237931e-05, -7.481716896678784e-05, -6.783222983362489e-05, -7.124674012522986e-05, -7.466764228946190e-05, -7.466764228946190e-05, -3.577575371308236e-02, -9.371244687714671e-02, -2.394155417656037e-02, -4.306213780890676e-02, -4.144495352596658e-02, -4.144495352596658e-02, -5.689324552574231e-02, -5.936563891964566e-02, -5.875253371514196e-02, -4.392293087527045e-04, -9.761282460711510e-02, -9.761282460711514e-02, -6.439616480370075e-02, -8.225849476743305e-02, -6.652862978760791e-01, -7.390642728126773e-02, -2.552971945580613e-01, -2.552971945580612e-01, -3.398400642189589e+00, -8.711430164621460e-01, -1.274876254278438e+00, -1.867839240882030e+00, -1.528638784985076e+00, -1.528638784985076e+00, -2.935895757456723e+00, -4.697025275376508e-02, -8.471114380439120e-02, -1.960126406075817e-01, -1.222424144376313e-01, -1.222424144376313e-01, -5.221925640982542e-02, -5.461497502819960e-02, -5.577825920121117e-02, -6.832640554361165e-02, -6.727156642950197e-02, -6.727156642950201e-02, -4.097900024292854e-02, -6.596723413840143e-02, -5.869571220434966e-02, -1.450563347500103e-01, -1.008211037352721e-01, -1.008211037352722e-01, -6.069585236161277e-02, -1.006877332962598e-01, -2.887389635333622e-01, -1.091690981925970e-01, -3.638575602986350e-01, -3.638575602986354e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_th_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_th", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([3.915089374310960e-02, 3.915321182538590e-02, 3.916250873429591e-02, 3.912821086014755e-02, 3.914631835408791e-02, 3.914631835408791e-02, 2.777918378143137e-02, 2.779367865148739e-02, 2.817834252348974e-02, 2.801963725626062e-02, 2.803952104458886e-02, 4.257853195659789e-02, 3.212489791253291e-02, 4.822453462169551e-02, 3.675768548625601e-02, 4.183672125289387e-02, 4.061014634259439e-02, 4.061014634259439e-02, 7.704866954654425e-02, 8.452344309931892e-02, 9.203968195528798e-03, 1.562056535695017e-02, 3.153384137001111e-02, 3.153384137001108e-02, 2.586505253172578e-06, 3.143345258213124e-06, 2.595580044973734e-04, 3.652026979981540e-07, 1.009055488412395e-06, 1.009055488412395e-06, 5.197567688961447e-01, 5.281149319658658e-01, 5.202338321937420e-01, 3.474483845769844e-01, 5.239215470053301e-01, 5.239215470053301e-01, 3.252767785886031e-02, 3.508398331696874e-02, 3.063443028503891e-02, 3.280257051282361e-02, 3.494261490534546e-02, 5.306100781922829e-02, 6.717364930219365e-01, 2.255897471633985e+00, 3.561337971170198e-01, 7.195210925993315e-01, 8.164313267907825e-01, 5.376498981305153e-01, 2.649662709463835e-03, 2.880147506280934e-02, 2.166500561969265e-03, 2.888332351592133e-01, 1.115689163484175e-02, 1.115689163484175e-02, 7.644369494989807e-08, 3.015994604088358e-07, 1.090543934851988e-06, 8.291819102554209e-04, 4.818217584229264e-07, 7.316552627903693e-07, 6.474340580702840e+01, 1.631230177382122e+01, 1.581670755659648e+01, 3.536551923400974e+01, 2.887077809814232e+01, 2.887077809814232e+01, 5.150594736407557e+01, 5.212561850563188e-01, 1.079462846125349e+00, 2.847652957678734e+00, 1.662100984054128e+00, 1.094554306572230e+00, 1.448420588971316e+00, 3.519112916613286e-02, 9.453205334594500e-02, 1.757332776072925e-01, 1.727970064896372e-01, 1.727970064896373e-01, 2.336898770968375e-01, 2.307506768604454e-04, 5.202747925897375e-04, 5.075439391574794e-01, 2.335229733822165e-03, 3.546089595804032e-03, 3.475991186193189e-06, 7.051060946319754e-09, 1.870027857555066e-07, 3.179465263280926e-03, 8.261474637567434e-07, 8.261474637567419e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
