
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_th_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_th", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-4.978380575164235e+01, -4.978550061812963e+01, -4.979279991989484e+01, -4.976771495689822e+01, -4.978088828752185e+01, -4.978088828752185e+01, -2.469773198756321e+00, -2.470440057161853e+00, -2.488310366540598e+00, -2.482901178213667e+00, -2.482546968201004e+00, -2.482546968201004e+00, -2.202348458392821e-01, -2.187196413371076e-01, -1.859063100802496e-01, -2.018991550924143e-01, -1.979233463930708e-01, -1.979233463930708e-01, -4.136886192254208e-02, -4.418750910880846e-02, -1.424572257153272e-01, -1.196171493810795e-02, -2.040822060301639e-02, -2.040822060301639e-02, -1.575370298462259e-06, -1.872676892058503e-06, -2.163604746320499e-04, -2.544402716614820e-07, -6.009553661468715e-07, -6.009553661468713e-07, -1.792871272294573e+01, -1.807737999276432e+01, -1.793767089717689e+01, -1.806880399841463e+01, -1.800270976034896e+01, -1.800270976034896e+01, -1.242211918199338e+00, -1.308579879711443e+00, -1.200413771200499e+00, -1.258229953462841e+00, -1.300273690628541e+00, -1.300273690628541e+00, -7.117094651327625e-01, -1.377612712310433e+00, -4.484379491719861e-01, -6.347271491994965e-01, -8.029022339686538e-01, -8.029022339686538e-01, -3.545441598318333e-03, -2.531089468611918e-02, -2.848447929942905e-03, -2.494649225317295e+00, -7.575166136936414e-03, -7.575166136936417e-03, -9.219814182246990e-08, -2.178994685699470e-07, -2.832702827522164e-07, -9.738527214009458e-04, -3.015717149232551e-07, -3.015717149232551e-07, -6.945459933389372e+00, -3.630890686154025e+00, -4.373473516406155e+00, -5.252731701221872e+00, -4.773299985103429e+00, -4.773299985103428e+00, -5.503567195116661e+00, -5.173583564916094e-01, -7.914912706207675e-01, -1.351003047255767e+00, -1.006838200550851e+00, -1.006838200550851e+00, -1.175922182636633e+00, -4.918785426744026e-02, -8.497464076090605e-02, -2.067610312435151e-01, -1.393574099967287e-01, -1.393574099967287e-01, -3.631858082533432e-01, -1.931408094691353e-04, -4.544168550478776e-04, -2.684533773679399e-01, -2.360469634150165e-03, -2.360469634150166e-03, -2.917534625845400e-06, -4.220023145979125e-09, -7.471158259522897e-08, -2.055099031024073e-03, -2.882709465136746e-07, -2.882709465136739e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_th_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_th", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.396311818653579e+02, -1.396359252444879e+02, -1.396560772127120e+02, -1.395858630438205e+02, -1.396227754497883e+02, -1.396227754497883e+02, -7.156490236854408e+00, -7.158409446049753e+00, -7.209691772287305e+00, -7.192778241602268e+00, -7.192490963886285e+00, -7.192490963886285e+00, -6.424218361417779e-01, -6.379016883939559e-01, -5.399007383867838e-01, -5.853610724463306e-01, -5.742585724182289e-01, -5.742585724182289e-01, -1.160391390559092e-01, -1.240497568271417e-01, -4.210247980267872e-01, -3.384193209830313e-02, -5.758552672232756e-02, -5.758552672232754e-02, -4.403919596480362e-06, -5.237156037638124e-06, -6.083915638466044e-04, -7.155549299878973e-07, -1.685816295228173e-06, -1.685816295228173e-06, -5.011384126511472e+01, -5.052930429064862e+01, -5.013849442384915e+01, -5.050496863726488e+01, -5.032082930688892e+01, -5.032082930688892e+01, -3.497217868241272e+00, -3.680463220800688e+00, -3.375908619501036e+00, -3.535225680209848e+00, -3.660626182970744e+00, -3.660626182970744e+00, -2.036521901990360e+00, -4.027408440529722e+00, -1.294219199064909e+00, -1.868037618943585e+00, -2.298133759684865e+00, -2.298133759684865e+00, -1.000300278917468e-02, -7.102864218884065e-02, -8.040015546964596e-03, -7.368495340236094e+00, -2.131512741629055e-02, -2.131512741629056e-02, -2.633660105949440e-07, -6.173375680076037e-07, -7.973575441694318e-07, -2.747277635129272e-03, -8.531275111907188e-07, -8.531275111907188e-07, -1.995391371613822e+01, -1.027894867168780e+01, -1.241918685605808e+01, -1.497270217310252e+01, -1.357780536145296e+01, -1.357780536145296e+01, -1.619651994562338e+01, -1.449927518601488e+00, -2.223257181409418e+00, -3.812391885846288e+00, -2.834359182522411e+00, -2.834359182522411e+00, -3.446073370363235e+00, -1.378510867423904e-01, -2.390488742959298e-01, -5.897637689295420e-01, -3.937284522011719e-01, -3.937284522011719e-01, -1.028998975612452e+00, -5.413801628192759e-04, -1.279564341691499e-03, -7.669630759735738e-01, -6.648920736697624e-03, -6.648920736697627e-03, -8.270793018806992e-06, -1.227619170475091e-08, -2.095023808472455e-07, -5.771440808901891e-03, -8.129817821209947e-07, -8.129817821209928e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_th_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_th", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.562691599235170e-08, -6.563025258699416e-08, -6.564322525985123e-08, -6.559390408699397e-08, -6.562000123552701e-08, -6.562000123552701e-08, -1.079015077640742e-05, -1.079571105285109e-05, -1.094268112345369e-05, -1.087907380225949e-05, -1.089040033467986e-05, -1.089040033467986e-05, -1.738939643887023e-03, -1.724757189470977e-03, -1.425213848729969e-03, -1.582411642196857e-03, -1.544113858918291e-03, -1.544113858918291e-03, -1.595374538932117e-01, -1.672979077662491e-01, -3.142431888195391e-04, -7.391950601540277e-02, -1.053883845555907e-01, -1.053883845555907e-01, -1.269574707773719e-01, -1.323181446857155e-01, -6.506214259144108e-02, -9.305771597378469e-02, -1.295885461796704e-01, -1.295885461796704e-01, -3.961296489909405e-05, -4.022781753371045e-05, -3.964823641104763e-05, -4.019060478306748e-05, -3.991928003337577e-05, -3.991928003337577e-05, -7.088621504237931e-05, -7.481716896678784e-05, -6.783222983362489e-05, -7.124674012522986e-05, -7.466764228946190e-05, -7.466764228946190e-05, -3.577575371308236e-02, -9.371244687714671e-02, -2.394155417656037e-02, -4.306213780890676e-02, -4.144495352596658e-02, -4.144495352596658e-02, -5.689324552574231e-02, -5.936563891964566e-02, -5.875253371514196e-02, -4.392293087527045e-04, -9.761282460711510e-02, -9.761282460711514e-02, -6.439616480370075e-02, -8.225849476743305e-02, -6.652862978760791e-01, -7.390642728126773e-02, -2.552971945580613e-01, -2.552971945580612e-01, -3.398400642189589e+00, -8.711430164621460e-01, -1.274876254278438e+00, -1.867839240882030e+00, -1.528638784985076e+00, -1.528638784985076e+00, -2.935895757456723e+00, -4.697025275376508e-02, -8.471114380439120e-02, -1.960126406075817e-01, -1.222424144376313e-01, -1.222424144376313e-01, -5.221925640982542e-02, -5.461497502819960e-02, -5.577825920121117e-02, -6.832640554361165e-02, -6.727156642950197e-02, -6.727156642950201e-02, -4.097900024292854e-02, -6.596723413840143e-02, -5.869571220434966e-02, -1.450563347500103e-01, -1.008211037352721e-01, -1.008211037352722e-01, -6.069585236161277e-02, -1.006877332962598e-01, -2.887389635333622e-01, -1.091690981925970e-01, -3.638575602986350e-01, -3.638575602986354e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_th_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_th", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([5.814849677525971e-02, 5.815196469930513e-02, 5.816655194146483e-02, 5.811526406254505e-02, 5.814224436725484e-02, 5.814224436725484e-02, 3.411528766993024e-02, 3.413345448192116e-02, 3.461989414887227e-02, 3.445970149169727e-02, 3.446341588145373e-02, 3.446341588145373e-02, 3.794142357342783e-02, 3.754230956945219e-02, 2.933825738837070e-02, 3.372285193780617e-02, 3.259265749458207e-02, 3.259265749458207e-02, 7.532313651309548e-02, 8.222600817391015e-02, 1.006233752621996e-02, 1.452484245553479e-02, 2.977931706196622e-02, 2.977931706196621e-02, 2.579146706718078e-06, 3.127002492719560e-06, 2.501113423183758e-04, 3.516661241859361e-07, 9.859659401279359e-07, 9.859659401279353e-07, 5.186134285289183e-01, 5.269585369682166e-01, 5.191127909960840e-01, 5.264736833104920e-01, 5.227597356812461e-01, 5.227597356812461e-01, 4.726400305006660e-02, 5.126990592783440e-02, 4.479312717799960e-02, 4.822327046485373e-02, 5.077735755281119e-02, 5.077735755281119e-02, 5.846552057077098e-01, 1.731821958007538e+00, 2.948431459411306e-01, 5.310529559651588e-01, 7.093876299578171e-01, 7.093876299578171e-01, 3.802149513988536e-03, 2.808279260094292e-02, 3.100976020633480e-03, 2.086671551379772e-01, 1.070899007400426e-02, 1.070899007400426e-02, 1.020542409208033e-07, 2.781762047990578e-07, 1.044569105047815e-06, 1.190650864289219e-03, 6.806827754147158e-07, 6.806827754147157e-07, 5.504717471615649e+01, 1.511241851370205e+01, 2.185727614002126e+01, 3.147966092472954e+01, 2.601237809441935e+01, 2.601237809441934e+01, 3.802562109265313e+01, 5.121626847769793e-01, 1.046642709662797e+00, 2.688020292493123e+00, 1.591109663437222e+00, 1.591109663437221e+00, 1.096261614342513e+00, 5.250789800119173e-02, 9.085693311206729e-02, 2.365958405715393e-01, 1.619640520867641e-01, 1.619640520867642e-01, 3.272167583430664e-01, 2.265015647878358e-04, 4.973014182464973e-04, 4.458062202082808e-01, 3.382915347763131e-03, 3.382915347763135e-03, 3.194668837784937e-06, 5.572695068781359e-09, 1.831339557302326e-07, 3.086609972723255e-03, 7.825749196043134e-07, 7.825749196043120e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
