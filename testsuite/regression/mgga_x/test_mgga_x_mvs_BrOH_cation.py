
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mvs_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvs", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.202020203954294e+01, -2.202029620802501e+01, -2.202072061612887e+01, -2.264198892304301e+01, -2.264262603286895e+01, -2.326527074440046e+01, -3.431417078591421e+00, -3.780450307776596e+00, -3.780844773738576e+00, -3.781028100078362e+00, -3.780615627225890e+00, -3.431778142109485e+00, -5.676919394314672e-01, -6.456053550487058e-01, -7.014915483441557e-01, -6.312437206652257e-01, -5.549731458957818e-01, -7.083237213034043e-01, -1.662630015921794e-01, -1.693255651471403e-01, -7.332768763125550e-01, -1.293236421547025e-01, -1.737363904548216e-01, -1.734685498144588e-01, -1.465279393260279e-03, -3.143075040110204e-03, -2.327023013977737e-02, -6.168407343037286e-04, -1.067537858738666e-03, -1.067537858738667e-03, -5.671917239341434e+00, -5.672969464964183e+00, -5.671969739342094e+00, -5.672898581076308e+00, -5.560618763645635e+00, -5.560719291626181e+00, -2.125136081274231e+00, -2.141110489868782e+00, -2.113417808471917e+00, -2.127574427995643e+00, -1.932034553718597e+00, -2.139646311627539e+00, -5.985323594264931e-01, -6.942835802536730e-01, -5.908762692912558e-01, -6.146949596519597e-01, -6.140358751791166e-01, -6.499574897247514e-01, -7.658098880114807e-02, -1.613826761805382e-01, -6.883168242710311e-02, -2.090219271882422e+00, -1.012714828178910e-01, -1.012714828178911e-01, -1.221440482505752e-03, -5.871132625515280e-04, -5.112392783250946e-04, -4.260236883001825e-02, -6.573182461784758e-04, -6.573182461785779e-04, -6.423440878051423e-01, -6.386432264818629e-01, -6.273992975437273e-01, -6.357303722860037e-01, -6.289244523955967e-01, -6.346862035666911e-01, -6.249295228130181e-01, -4.929058167250652e-01, -5.353226750754022e-01, -5.867314254092435e-01, -5.738274222521130e-01, -5.554528993587438e-01, -7.063736695527651e-01, -2.328465822573716e-01, -2.530000735023855e-01, -3.404214821916645e-01, -3.273798435976433e-01, -2.930580721410735e-01, -4.929062329107706e-01, -2.716808337684434e-02, -2.766376490223020e-02, -3.644648121894344e-01, -5.846594091981195e-02, -5.846594091981196e-02, -6.898112067548789e-03, -8.319565876925721e-05, -1.550241283463540e-03, -5.524081527065064e-02, -5.921307906732196e-04, -1.970755118560724e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mvs_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvs", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.112172287238970e+01, -3.112132439109800e+01, -3.112177075184973e+01, -3.112135934661189e+01, -3.112196363446526e+01, -3.112162531219826e+01, -3.112141894790672e+01, -2.934498499746004e+01, -3.112174806637914e+01, -2.934586870239463e+01, -2.934611334544101e+01, -2.934586870239463e+01, -4.269084491622508e+00, -4.576695689152451e+00, -4.269335040971463e+00, -4.268992306846850e+00, -4.274176521358078e+00, -4.275085987624614e+00, -4.272778500138957e+00, -4.272844665421373e+00, -4.267841945008012e+00, -4.277279903782661e+00, -4.575535516721026e+00, -4.277279903782661e+00, -7.934694107053799e-01, -7.986334548277066e-01, -7.916641870483684e-01, -6.737357070600273e-01, -6.123847129873605e-01, -6.011475302101223e-01, -6.287106492070749e-01, -7.763211456808576e-01, -8.060985484927184e-01, -7.381089764672683e-01, -6.856203212325038e-01, -5.597338309756908e-01, -1.942498010462952e-01, -1.450192301346898e-01, -1.971072866550009e-01, -1.537366896913253e-01, -4.942635723285694e-01, -9.134541748153606e-01, 2.830648592690682e-02, 2.594650507632578e-03, -1.287346353691791e-01, 1.969354161792151e-01, -1.287346353691789e-01, -1.038841632576221e-01, 9.801350794238817e-01, 9.489705256878249e-01, -6.611646498907883e-03, 9.073211666673890e-01, -3.682136198547476e-02, 4.648847024428945e-01, 1.424553623820276e+00, 1.431138544899657e+00, 1.058756593719247e+00, 1.149138980215413e+00, 1.058756593719247e+00, 1.149138980215506e+00, -7.282146306719530e+00, -7.280416249785004e+00, -7.285790436474178e+00, -7.283937078318222e+00, -7.282388574176727e+00, -7.280565926250351e+00, -7.285513912759273e+00, -7.283762921141242e+00, -7.567279264544018e+00, -7.282180242930235e+00, -7.283983544170187e+00, -7.565430031231065e+00, -2.304882205354136e+00, -2.306930548696460e+00, -2.343018553547532e+00, -2.343842013813174e+00, -2.271100140456419e+00, -2.282834772813511e+00, -2.304914254609997e+00, -2.316846260590952e+00, -2.351234278879808e+00, -2.498465993128736e+00, -2.351234278879808e+00, -2.330031316097433e+00, -7.705764580707526e-01, -9.401709032312322e-01, -8.775472009731143e-01, -8.798602741316378e-01, -6.585011180849195e-01, -7.032196490931106e-01, -7.240470778655566e-01, -7.592690481382386e-01, -8.157063606332857e-01, -9.407401704410813e-01, -8.157063606332856e-01, -7.644680476254297e-01, 1.849177123253152e-01, 1.817454761407100e-01, -1.943364781099672e-01, -7.103383057041646e-02, 2.227347746963873e-01, 1.938224461408988e-01, -2.562005405272498e+00, -2.561028784031214e+00, 9.268889121160785e-02, 3.347969628898680e-02, 9.268889121160818e-02, 3.347969628898669e-02, -2.845160808110418e-03, 1.876627863983490e+00, 1.481501631583584e+00, 1.541714918016490e+00, 8.166780879169653e-01, 7.661117562796258e-01, 3.170422462122819e-01, -6.185989507921003e-02, 1.512424112735626e+00, 8.353209911714093e-01, 1.512424112735752e+00, 8.353209911731582e-01, -8.461269867761227e-01, -8.496458520409004e-01, -8.327566980591161e-01, -8.363700945597534e-01, -8.535891635107175e-01, -8.569232155584396e-01, -8.550003134077372e-01, -8.448844860067195e-01, -8.543074658813498e-01, -8.576222642475654e-01, -8.543074658813499e-01, -8.429680116081963e-01, -8.222687125515562e-01, -8.252668562964549e-01, -6.286468754467036e-01, -7.083747033550484e-01, -6.860518390458160e-01, -8.622093139460767e-01, -7.423455206771629e-01, -7.452887409226380e-01, -7.139414545980716e-01, -7.171771838716198e-01, -7.139414545980716e-01, -7.888621785331325e-01, -9.078866718837619e-01, -9.832030345741377e-01, -1.596134681012866e-01, -1.622315993993034e-01, -3.069154417334136e-01, -2.504144865819385e-01, -4.371227494278224e-01, -4.089906475189763e-01, -3.282188217016782e-01, -3.288227429351224e-01, -3.282188217016780e-01, -3.672418523484609e-01, -5.568194673048127e-01, -5.648910485874075e-01, -3.613188932568621e-02, -3.637932373557492e-02, 4.226284240372765e-01, 4.046795984239492e-01, -4.070920001134652e-01, -4.256905599014442e-01, 2.128173754915664e-01, 1.656264733316148e-01, 2.128173754915640e-01, 1.656264733316158e-01, -9.025626988614534e-03, -9.352906115433884e-03, 2.713306458381650e+00, 2.714692741946336e+00, -1.997638446362299e-03, -2.124653320927298e-03, -7.335914662965455e-02, -7.461554190021477e-02, 1.088673755071671e+00, 8.610857553801229e-01, 1.088673755065653e+00, -3.508205871837793e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mvs_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvs", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.335468965878816e-08, 0.000000000000000e+00, -1.335269495656684e-08, -1.335421379613020e-08, 0.000000000000000e+00, -1.335235038681258e-08, -1.335277195520485e-08, 0.000000000000000e+00, -1.335026672961358e-08, -1.335812781543955e-08, 0.000000000000000e+00, -2.141055421674941e-08, -1.335439396782249e-08, 0.000000000000000e+00, -2.140895302608392e-08, -2.140784903965804e-08, 0.000000000000000e+00, -2.140895302608392e-08, -3.000393573886380e-05, 0.000000000000000e+00, -1.051703172511998e-05, -3.000379177561471e-05, 0.000000000000000e+00, -3.000539238439410e-05, -3.000151694584260e-05, 0.000000000000000e+00, -2.999984608920505e-05, -2.999223225493746e-05, 0.000000000000000e+00, -2.999055465777929e-05, -3.002349678022299e-05, 0.000000000000000e+00, -2.998623430999351e-05, -1.051224499800457e-05, 0.000000000000000e+00, -2.998623430999351e-05, -1.527767139669064e-03, 0.000000000000000e+00, -1.592412251807390e-03, -1.512050961659002e-03, 0.000000000000000e+00, -2.097744645830104e-02, -2.305971518045739e-02, 0.000000000000000e+00, -2.367181503592335e-02, -2.278202617884872e-02, 0.000000000000000e+00, -1.446378305481731e-03, -1.602456203792178e-03, 0.000000000000000e+00, -1.184022470105439e-03, -2.031749596078822e-02, 0.000000000000000e+00, -2.594266757974507e-02, -1.327185879072316e-01, 0.000000000000000e+00, -4.298756262393103e+00, -1.375123918609874e-01, 0.000000000000000e+00, -4.027001309606176e+00, -1.162765165597687e-02, 0.000000000000000e+00, -3.267802682998729e-04, -1.275300132860403e+01, 0.000000000000000e+00, -1.228727896065322e+01, -4.157815677215102e+00, 0.000000000000000e+00, -3.990003488570225e+01, -4.157815677215100e+00, 0.000000000000000e+00, -4.471487112000658e-02, -8.436746271527419e+05, 0.000000000000000e+00, -6.824356030518740e+05, -1.287142240029020e-01, 0.000000000000000e+00, -5.663767559274283e+05, -6.190083793888133e-02, 0.000000000000000e+00, -1.334044250299119e+03, -4.818251052973161e+06, 0.000000000000000e+00, -5.116636228315695e+06, -1.250134701558102e+06, 0.000000000000000e+00, -9.618250800966382e+06, -1.250134701558102e+06, 0.000000000000000e+00, -9.618250800967149e+06, -6.074964531572884e-06, 0.000000000000000e+00, -6.080790340065274e-06, -6.070678985276793e-06, 0.000000000000000e+00, -6.076645924541746e-06, -6.074705688835406e-06, 0.000000000000000e+00, -6.080633092340329e-06, -6.071028518725658e-06, 0.000000000000000e+00, -6.076868115913022e-06, -3.885354449532497e-06, 0.000000000000000e+00, -6.078711113008404e-06, -6.072785117224029e-06, 0.000000000000000e+00, -3.889030182923699e-06, -2.973788800911656e-04, 0.000000000000000e+00, -2.974777824389941e-04, -2.891411068515396e-04, 0.000000000000000e+00, -2.894811474016111e-04, -3.044835782416210e-04, 0.000000000000000e+00, -3.025299588825998e-04, -2.971486775763084e-04, 0.000000000000000e+00, -2.951545057920072e-04, -2.876434484331426e-04, 0.000000000000000e+00, -6.826094766628876e-05, -2.876434484331426e-04, 0.000000000000000e+00, -2.925480250714643e-04, -3.716960195522642e-02, 0.000000000000000e+00, -5.417379959427307e-02, -2.703019276025749e-02, 0.000000000000000e+00, -2.698897122254214e-02, -5.444926984621584e-02, 0.000000000000000e+00, -4.732055368505487e-02, -4.664513634175880e-02, 0.000000000000000e+00, -4.101102650168812e-02, -3.184508420213334e-02, 0.000000000000000e+00, -5.908702793658614e-02, -3.184508420213336e-02, 0.000000000000000e+00, -3.899752015404495e-02, -4.806702159914401e+01, 0.000000000000000e+00, -4.642236655040238e+01, -5.559349099463898e-02, 0.000000000000000e+00, -4.317910888222813e+00, -6.911543485912436e+01, 0.000000000000000e+00, -5.754340069146240e+01, -3.265740658087152e-04, 0.000000000000000e+00, -3.271646169376306e-04, -3.014816598036708e+01, 0.000000000000000e+00, -2.502444286567153e+01, -3.014816598036712e+01, 0.000000000000000e+00, -2.502444286567152e+01, -6.595976559749550e-02, 0.000000000000000e+00, -1.095187994289565e+07, -5.478125085684225e+06, 0.000000000000000e+00, -5.116218411591939e+06, -1.939161615766101e+07, 0.000000000000000e+00, -1.605045295107048e+07, -2.684301506873132e+02, 0.000000000000000e+00, -7.652459394945005e-02, -1.461836069700847e+07, 0.000000000000000e+00, -5.564456550520061e+06, -1.461836069700970e+07, 0.000000000000000e+00, -5.564456550531689e+06, -3.738863900302131e-02, 0.000000000000000e+00, -3.681743606364746e-02, -3.821182516816257e-02, 0.000000000000000e+00, -3.762290477843599e-02, -3.026259521287628e-02, 0.000000000000000e+00, -2.994450193670676e-02, -3.120091246407282e-02, 0.000000000000000e+00, -3.710450827671122e-02, -3.072357131915632e-02, 0.000000000000000e+00, -3.038809858307846e-02, -3.072357131915632e-02, 0.000000000000000e+00, -3.722030711424844e-02, -4.167859540323633e-02, 0.000000000000000e+00, -4.113380747672546e-02, -7.573335388531445e-02, 0.000000000000000e+00, -5.531472752931585e-02, -6.335487248971261e-02, 0.000000000000000e+00, -1.107341470866173e-01, -5.334383287204906e-02, 0.000000000000000e+00, -5.260320706777226e-02, -5.816185074623075e-02, 0.000000000000000e+00, -5.731185473197078e-02, -5.816185074623075e-02, 0.000000000000000e+00, -4.883806816951920e-02, -2.239140039557070e-02, 0.000000000000000e+00, -1.568032969023144e-02, -1.804332890653832e+00, 0.000000000000000e+00, -1.764983300915326e+00, -4.953984209782702e-02, 0.000000000000000e+00, -8.656442802422316e-01, -6.327098398570498e-02, 0.000000000000000e+00, -2.952960037674811e-01, -5.160618587422325e-01, 0.000000000000000e+00, -5.169454863535456e-01, -5.160618587422328e-01, 0.000000000000000e+00, -6.082148103233802e-02, -1.054165878281150e-01, 0.000000000000000e+00, -1.026693213588697e-01, -6.515050454224065e-02, 0.000000000000000e+00, -6.385108739958455e-02, -5.968876992431078e+02, 0.000000000000000e+00, -5.338638741222394e+02, -3.584180432652846e-01, 0.000000000000000e+00, -3.389818223872912e-01, -1.269118849297384e+02, 0.000000000000000e+00, -1.066107140198962e+02, -1.269118849297374e+02, 0.000000000000000e+00, -1.066107140198968e+02, -5.992296721603745e-02, 0.000000000000000e+00, -5.906096125629111e-02, -5.519114801994456e+08, 0.000000000000000e+00, -5.472175764979016e+08, -2.742002138157892e-01, 0.000000000000000e+00, -2.905036237072757e-01, -9.971985474749359e-02, 0.000000000000000e+00, -1.118921913535455e-01, -1.989771089850623e+07, 0.000000000000000e+00, -7.582225193462473e+06, -1.989771089839640e+07, 0.000000000000000e+00, -3.847270278134052e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mvs_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvs", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.032758085975574e-03, 1.032599840610356e-03, 1.032731295437168e-03, 1.032580464518072e-03, 1.032653786557298e-03, 1.032467477511070e-03, 1.032954868161472e-03, 1.667243505591609e-03, 1.032741089412338e-03, 1.667211887558059e-03, 1.667190571964426e-03, 1.667211887558059e-03, 1.022024032143583e-02, 3.509785240695358e-03, 1.022022251918689e-02, 1.022036527490043e-02, 1.021992059248945e-02, 1.021975883964697e-02, 1.021916924030480e-02, 1.021902619055307e-02, 1.022191802887036e-02, 1.021856015717289e-02, 3.506571743520099e-03, 1.021856015717289e-02, 3.636921639540391e-03, 3.836069743205637e-03, 3.582728904857084e-03, 5.253856760847997e-02, 5.374323219705215e-02, 5.408554353236977e-02, 5.360009468613749e-02, 3.275002971867986e-03, 3.949765591406317e-03, 2.398141484699583e-03, 5.212566701921136e-02, 5.528855577601043e-02, 5.158786074572731e-03, 1.980495729654040e-01, 5.545157049915450e-03, 1.950277994434215e-01, 4.485906529313059e-02, 1.302191468535933e-03, 2.438377440835577e-01, 2.451203054256225e-01, 1.957631649887375e-01, 2.869983143276835e-01, 1.957631649887374e-01, 3.055319924223924e-04, 1.334450338727398e+00, 1.295212724558398e+00, 2.341722097718250e-07, 1.267325358572906e+00, 1.936119539463771e-05, 4.961829460142466e-01, 1.655050211892795e+00, 1.671137474258418e+00, 1.403730993603017e+00, 1.989918868801020e+00, 1.403730993603017e+00, 1.989918868801180e+00, 6.839627040958741e-03, 6.841265871600404e-03, 6.838363397344368e-03, 6.840044708018567e-03, 6.839550200237966e-03, 6.841219159732411e-03, 6.838465984502742e-03, 6.840109838908364e-03, 4.354690431581554e-03, 6.840653354398311e-03, 6.838984882301143e-03, 4.355621248327723e-03, 1.813949584071338e-02, 1.814092063405200e-02, 1.801167191299361e-02, 1.801689862443230e-02, 1.824755969461673e-02, 1.821796673387232e-02, 1.813599954089513e-02, 1.810518999701648e-02, 1.798807265941920e-02, 4.113684507291646e-03, 1.798807265941920e-02, 1.806475994916147e-02, 6.057796776640675e-02, 8.648747604089477e-02, 5.588300835785472e-02, 5.585868914851568e-02, 6.670153956905348e-02, 6.437853808507733e-02, 6.412249025652608e-02, 6.207487912701946e-02, 5.826138267039015e-02, 9.175859591835821e-02, 5.826138267039017e-02, 6.130499135422338e-02, 3.012674007396486e-01, 2.995754092338500e-01, 2.285244288158095e-03, 1.944092140511008e-01, 3.181536266944712e-01, 3.115815663019762e-01, 1.854043510442431e-02, 1.854878551754589e-02, 2.880414582367201e-01, 2.867428447584338e-01, 2.880414582367206e-01, 2.867428447584336e-01, 9.564589805819533e-09, 1.782583845212910e+00, 1.676149741543491e+00, 1.637570508207942e+00, 2.480995561306680e+00, 2.439168773313321e+00, 3.963340530427428e-01, 1.123176012789119e-04, 1.992492069636855e+00, 1.964739619723769e+00, 1.992492069637022e+00, 1.964739619727874e+00, 6.053228551369592e-02, 6.029921868897582e-02, 6.088112020649235e-02, 6.064441531841092e-02, 4.838528441959628e-02, 4.843951664769450e-02, 5.013835986709061e-02, 6.042292007742980e-02, 4.924659430445968e-02, 4.927877849810074e-02, 4.924659430445968e-02, 6.047261775225365e-02, 6.220121695962927e-02, 6.199631624914138e-02, 7.240474104940969e-02, 5.274245172494715e-02, 6.919502499237268e-02, 1.212573326399665e-01, 6.623098297851333e-02, 6.599915457727967e-02, 6.770538379390276e-02, 6.745540488915766e-02, 6.770538379390276e-02, 5.700157646120985e-02, 5.332955060629156e-02, 3.721883386401677e-02, 1.589164399181664e-01, 1.580891038537792e-01, 7.059976146324027e-03, 1.330542950399411e-01, 2.092027518745729e-02, 1.018285709690126e-01, 1.170803069367326e-01, 1.171313994173717e-01, 1.170803069367326e-01, 1.332956402536262e-02, 7.868215905419819e-02, 7.815813382831727e-02, 1.925536752130501e-05, 1.926134565984572e-05, 4.354552891454611e-01, 4.304537160364761e-01, 1.068504641533377e-01, 1.053363710392790e-01, 3.645862106631282e-01, 3.636560868537265e-01, 3.645862106631255e-01, 3.636560868537287e-01, 2.773180957462623e-07, 3.041477310267610e-07, 3.288100490402197e+00, 3.282540792139725e+00, 1.376211483106527e-08, 1.754204881095349e-08, 2.418936447526738e-04, 2.849554473128986e-04, 2.304920733188255e+00, 2.061422187227252e+00, 2.304920733175527e+00, 1.045777354599837e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
