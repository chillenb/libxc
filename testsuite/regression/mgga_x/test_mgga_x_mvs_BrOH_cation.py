
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mvs_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvs", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.315941274854189e+01, -2.315948286433848e+01, -2.315986599556003e+01, -2.315882469159901e+01, -2.315936011559580e+01, -2.315936011559580e+01, -3.361525790786356e+00, -3.361772789217595e+00, -3.368766665683308e+00, -3.370119619119603e+00, -3.368030553556873e+00, -3.368030553556873e+00, -5.796166837190739e-01, -5.788522450844817e-01, -5.609907049428897e-01, -5.695332086869154e-01, -5.694442587562547e-01, -5.694442587562547e-01, -1.783909209327195e-01, -1.806047206118680e-01, -6.537247526347848e-01, -1.048248253403009e-01, -1.623172441816590e-01, -1.623172441816590e-01, -1.097087737785788e-03, -1.191443019669338e-03, -1.451654121619559e-02, -4.720971541523006e-04, -8.048189714564168e-04, -8.048189714564172e-04, -5.670093879075718e+00, -5.671168612781936e+00, -5.670184318805448e+00, -5.671131376029262e+00, -5.670617574021696e+00, -5.670617574021696e+00, -2.066402865507500e+00, -2.090239857687063e+00, -2.060665096254456e+00, -2.082500510686611e+00, -2.082524420613455e+00, -2.082524420613455e+00, -6.138104558167505e-01, -6.683850834086853e-01, -5.472731685380005e-01, -5.667275612966093e-01, -6.265103281565603e-01, -6.265103281565603e-01, -6.089042342399888e-02, -1.692349637491988e-01, -5.466199691321947e-02, -1.953254969403122e+00, -8.285868088117998e-02, -8.285868088117999e-02, -3.314162648205227e-04, -4.655892118867954e-04, -3.929368634948731e-04, -3.095318142304938e-02, -5.056996666910319e-04, -5.056996666910320e-04, -6.386993957232743e-01, -6.350898417103088e-01, -6.363607214443943e-01, -6.374061070925524e-01, -6.368810982813217e-01, -6.368810982813217e-01, -6.180965460832778e-01, -5.315875291466285e-01, -5.562429421893199e-01, -5.807105370907204e-01, -5.679053758306462e-01, -5.679053758306462e-01, -6.948307185499205e-01, -2.258682192294526e-01, -2.710274678999957e-01, -3.532287852196294e-01, -3.117874437194275e-01, -3.117874437194275e-01, -4.747799308388205e-01, -1.346928947259176e-02, -2.149380805279616e-02, -3.454515253994394e-01, -4.626138758035972e-02, -4.626138758035973e-02, -1.779049279190043e-03, -7.863608459177953e-05, -2.187500498182169e-04, -4.276107968466744e-02, -4.553741748915619e-04, -4.553741748915615e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mvs_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvs", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.956443517053190e+01, -2.956401353870361e+01, -2.956457537591713e+01, -2.956411542084723e+01, -2.956492769392410e+01, -2.956464725776453e+01, -2.956334295341555e+01, -2.956262746620198e+01, -2.956452216632279e+01, -2.956336430038302e+01, -2.956452216632279e+01, -2.956336430038302e+01, -5.175584401239894e+00, -5.174929977676341e+00, -5.176095217050444e+00, -5.175246918196521e+00, -5.185411309670243e+00, -5.187048110762863e+00, -5.182628194241889e+00, -5.182738390671332e+00, -5.173625279218827e+00, -5.190336781756152e+00, -5.173625279218827e+00, -5.190336781756152e+00, -8.151830701666499e-01, -8.203314926894861e-01, -8.134453139626434e-01, -8.194645091637418e-01, -7.898020492003103e-01, -7.842249763846514e-01, -7.985366241637524e-01, -8.018331912964310e-01, -8.266643079549207e-01, -7.653359249540344e-01, -8.266643079549207e-01, -7.653359249540344e-01, -1.807163958550318e-01, -1.748902638744007e-01, -1.752308192818418e-01, -1.874933953003656e-01, -8.829627256061180e-01, -9.221696166475241e-01, -1.617706093963848e-01, -1.466558616808555e-01, -1.698947320989181e-01, -1.202191601333031e-01, -1.698947320989183e-01, -1.202191601333031e-01, -1.873989068718891e-03, -8.737400227159093e-04, -2.156638780611485e-03, -2.124709685168641e-03, -2.714775478061014e-02, -2.919788861049918e-02, -9.571397978437891e-04, -9.300249688786323e-04, -1.736599742003675e-03, -8.436841469338011e-04, -1.736599742003678e-03, -8.436841469338013e-04, -7.285678066689558e+00, -7.283745745694926e+00, -7.289270735320190e+00, -7.287217526188108e+00, -7.285836869388189e+00, -7.283835627401333e+00, -7.288921362540664e+00, -7.286991234431289e+00, -7.287549802445104e+00, -7.285495212524485e+00, -7.287549802445104e+00, -7.285495212524485e+00, -2.514486746464692e+00, -2.511170964317096e+00, -2.524351912250361e+00, -2.520750042479468e+00, -2.465690580256227e+00, -2.477037558142769e+00, -2.471373694623684e+00, -2.482857083695969e+00, -2.553851480955017e+00, -2.520980376292187e+00, -2.553851480955017e+00, -2.520980376292187e+00, -8.212966387937126e-01, -8.189004197233942e-01, -9.162092395624876e-01, -9.169681019314889e-01, -7.906621595791714e-01, -7.758579580579656e-01, -8.949293821450626e-01, -8.474368779192812e-01, -8.567656315780591e-01, -8.145585698888409e-01, -8.567656315780590e-01, -8.145585698888409e-01, -1.076815452446561e-01, -1.101509696180852e-01, -1.351589903218008e-01, -1.191568841626370e-01, -9.721060916693833e-02, -1.022415916994937e-01, -2.855981232127164e+00, -2.854204152754523e+00, -1.160940683532323e-01, -9.423336896538095e-02, -1.160940683532322e-01, -9.423336896538038e-02, -6.489378812814716e-04, -6.752103688548207e-04, -9.251699599877977e-04, -9.368624817158261e-04, -7.434559538781032e-04, -8.211398024552417e-04, -5.995586587915049e-02, -5.860303687962622e-02, -7.033390683137719e-04, -1.115461227602499e-03, -7.033390683137717e-04, -1.115461227602498e-03, -8.512669883991568e-01, -8.546618174133322e-01, -8.382891979090471e-01, -8.417674477602046e-01, -8.428445992804678e-01, -8.463211606571547e-01, -8.466441654361131e-01, -8.500420334961850e-01, -8.447457239956491e-01, -8.481811723921021e-01, -8.447457239956491e-01, -8.481811723921021e-01, -8.315167816493989e-01, -8.342432071765116e-01, -6.412039114564945e-01, -6.448141321741294e-01, -6.984911528518143e-01, -7.023742465870751e-01, -7.537229488595800e-01, -7.565955222094307e-01, -7.266542441037714e-01, -7.294592921546241e-01, -7.266542441037714e-01, -7.294592921546241e-01, -9.589628547117968e-01, -9.607888284449301e-01, -2.185311189413557e-01, -2.216634432778977e-01, -3.098277690725132e-01, -3.146432917845323e-01, -4.616586240060877e-01, -4.644905297819276e-01, -3.859056085226731e-01, -3.861790178205468e-01, -3.859056085226730e-01, -3.861790178205469e-01, -6.081965563297623e-01, -6.120892250918880e-01, -2.341590030761151e-02, -2.475419784403836e-02, -4.069922360281135e-02, -4.275186509054970e-02, -4.577387512964313e-01, -4.628387177935104e-01, -7.915551687909300e-02, -8.501356918719744e-02, -7.915551687909302e-02, -8.501356918719744e-02, -3.452672961161001e-03, -3.651801002287673e-03, -1.513659827018785e-04, -1.631382132653771e-04, -4.134411304056508e-04, -4.570426910700502e-04, -7.340724749264282e-02, -4.298815878975721e-02, -7.097917768624444e-04, -9.857153282624919e-04, -7.097917768624435e-04, -9.857153282624910e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mvs_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvs", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.032822598154502e-08, 0.000000000000000e+00, -2.033225068650126e-08, -2.032802908947875e-08, 0.000000000000000e+00, -2.033210708317990e-08, -2.032781873038802e-08, 0.000000000000000e+00, -2.033168747619111e-08, -2.033007015635647e-08, 0.000000000000000e+00, -2.033455133904046e-08, -2.032810238209305e-08, 0.000000000000000e+00, -2.033371237195550e-08, -2.032810238209305e-08, 0.000000000000000e+00, -2.033371237195550e-08, -5.196134663217225e-05, 0.000000000000000e+00, -5.183185403511900e-05, -5.199958595719749e-05, 0.000000000000000e+00, -5.184752754039265e-05, -5.260218277864165e-05, 0.000000000000000e+00, -5.267686089465553e-05, -5.278775669077048e-05, 0.000000000000000e+00, -5.269763089753343e-05, -5.191922271848336e-05, 0.000000000000000e+00, -5.318087840455846e-05, -5.191922271848336e-05, 0.000000000000000e+00, -5.318087840455846e-05, -3.418162576021990e-03, 0.000000000000000e+00, -3.497565575477960e-03, -3.411662755467478e-03, 0.000000000000000e+00, -3.480308094287832e-03, -3.186789034691862e-03, 0.000000000000000e+00, -3.371431877395914e-03, -4.014889196056665e-03, 0.000000000000000e+00, -4.154664304410425e-03, -3.305825127671107e-03, 0.000000000000000e+00, -5.291129756249574e-03, -3.305825127671107e-03, 0.000000000000000e+00, -5.291129756249574e-03, -3.011956939442216e+00, 0.000000000000000e+00, -3.328358521963523e+00, -3.479132881041775e+00, 0.000000000000000e+00, -2.959789873243714e+00, -2.257912803674405e-04, 0.000000000000000e+00, -3.746308763345797e-04, -3.001895066929928e-02, 0.000000000000000e+00, -2.018864504731535e+00, -3.434306483277320e+00, 0.000000000000000e+00, 2.012590987079262e+00, -3.434306483277306e+00, 0.000000000000000e+00, 2.012590987079264e+00, 4.140956015936912e+01, 0.000000000000000e+00, -8.218593776763056e+02, 1.456075264381924e+02, 0.000000000000000e+00, -4.060824531328975e+01, 9.683783747136266e+00, 0.000000000000000e+00, 7.789881655776371e+00, 4.567585762745942e+02, 0.000000000000000e+00, 4.600243783738490e+02, 2.491212980659757e+02, 0.000000000000000e+00, 1.113429501775713e+03, 2.491212980659788e+02, 0.000000000000000e+00, 1.113429501775715e+03, -6.052388499156799e-06, 0.000000000000000e+00, -6.059483320513979e-06, -6.048400139617372e-06, 0.000000000000000e+00, -6.055623807915575e-06, -6.052661594589088e-06, 0.000000000000000e+00, -6.059707840113949e-06, -6.049218854649222e-06, 0.000000000000000e+00, -6.056181831729734e-06, -6.049971763852738e-06, 0.000000000000000e+00, -6.057482328932816e-06, -6.049971763852738e-06, 0.000000000000000e+00, -6.057482328932816e-06, -2.124089854108454e-04, 0.000000000000000e+00, -2.145674526700036e-04, -2.168287941849895e-04, 0.000000000000000e+00, -2.188065922624190e-04, -2.259413982224556e-04, 0.000000000000000e+00, -2.239240265129371e-04, -2.309224590179449e-04, 0.000000000000000e+00, -2.289504058952279e-04, -2.060300835862919e-04, 0.000000000000000e+00, -2.156251904278143e-04, -2.060300835862919e-04, 0.000000000000000e+00, -2.156251904278143e-04, -2.353095814999358e-02, 0.000000000000000e+00, -2.414975232179223e-02, -1.750730256776786e-02, 0.000000000000000e+00, -1.774313581363692e-02, -9.764577418788375e-02, 0.000000000000000e+00, -3.356082029149961e-02, -8.330548589457643e-02, 0.000000000000000e+00, -3.837005442584553e-02, -2.196227958709670e-02, 0.000000000000000e+00, -2.438707503158709e-02, -2.196227958709670e-02, 0.000000000000000e+00, -2.438707503158710e-02, 5.581708962996204e-01, 0.000000000000000e+00, 7.894424179458716e-01, -3.184155495069485e+00, 0.000000000000000e+00, -3.617730857294279e+00, 1.672839316297065e+00, 0.000000000000000e+00, 8.323028333911248e-01, -3.050360322493779e-04, 0.000000000000000e+00, -3.049461350942024e-04, -2.115719471684320e+00, 0.000000000000000e+00, -7.899774522035956e+00, -2.115719471684335e+00, 0.000000000000000e+00, -7.899774522036052e+00, 8.707927936614803e+02, 0.000000000000000e+00, 7.509940048928696e+02, 5.458615334100999e+02, 0.000000000000000e+00, 5.077760190317144e+02, 2.498432068252747e+03, 0.000000000000000e+00, 2.450227624226704e+03, 5.220884525795292e+00, 0.000000000000000e+00, 3.093024507616664e+00, 1.568491519128873e+03, 0.000000000000000e+00, 8.586185025206260e+02, 1.568491519128869e+03, 0.000000000000000e+00, 8.586185025206163e+02, -3.504915723761288e-02, 0.000000000000000e+00, -3.457355849125461e-02, -3.586143860093934e-02, 0.000000000000000e+00, -3.536716366078604e-02, -3.557307124639628e-02, 0.000000000000000e+00, -3.508470540278569e-02, -3.533671738189190e-02, 0.000000000000000e+00, -3.485478549061000e-02, -3.545334423485048e-02, 0.000000000000000e+00, -3.496875816962912e-02, -3.545334423485048e-02, 0.000000000000000e+00, -3.496875816962912e-02, -3.676087260972354e-02, 0.000000000000000e+00, -3.643341613763543e-02, -6.911390692321252e-02, 0.000000000000000e+00, -6.805037646269999e-02, -5.691702699983543e-02, 0.000000000000000e+00, -5.604279944188195e-02, -4.743855703099115e-02, 0.000000000000000e+00, -4.682019327511667e-02, -5.157334949080367e-02, 0.000000000000000e+00, -5.104094425120199e-02, -5.157334949080366e-02, 0.000000000000000e+00, -5.104094425120197e-02, -1.355681876719477e-02, 0.000000000000000e+00, -1.366726516786065e-02, -1.223086346311786e+00, 0.000000000000000e+00, -1.188758096455410e+00, -5.340722552786258e-01, 0.000000000000000e+00, -5.174612419275715e-01, -2.735749394741542e-01, 0.000000000000000e+00, -2.814374638850020e-01, -3.072443830193932e-01, 0.000000000000000e+00, -3.078010605819001e-01, -3.072443830193933e-01, 0.000000000000000e+00, -3.078010605819002e-01, -6.712292503934232e-02, 0.000000000000000e+00, -6.779202964843520e-02, -1.249738821846445e+00, 0.000000000000000e+00, 2.899434555323750e+00, 5.761123061555629e+00, 0.000000000000000e+00, 5.280090679869217e+00, -3.023341856215829e-01, 0.000000000000000e+00, -2.083457460189453e-01, 1.394728950786253e+00, 0.000000000000000e+00, 8.933384639987468e-02, 1.394728950786274e+00, 0.000000000000000e+00, 8.933384639986262e-02, 1.139373431841403e+02, 0.000000000000000e+00, 1.094590192265584e+02, 8.670389977394079e+03, 0.000000000000000e+00, 1.235245878786035e+04, 2.199200641641164e+03, 0.000000000000000e+00, 2.084258868310900e+03, 1.767584808633770e-01, 0.000000000000000e+00, -1.986586123885827e+01, 2.674517663153508e+03, 0.000000000000000e+00, 1.024408878806241e+03, 2.674517663153514e+03, 0.000000000000000e+00, 1.024408878806250e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mvs_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvs", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.582895108476459e-03, 1.583200444983166e-03, 1.582894714650392e-03, 1.583200117382255e-03, 1.582929418562325e-03, 1.583239735072451e-03, 1.582935925424840e-03, 1.583247564502076e-03, 1.582894219523309e-03, 1.583270677102072e-03, 1.582894219523309e-03, 1.583270677102072e-03, 1.742357526947595e-02, 1.737951777895249e-02, 1.743649476346220e-02, 1.738479344373673e-02, 1.764031515792258e-02, 1.766624332944517e-02, 1.770635352776938e-02, 1.767686529583754e-02, 1.740086526883159e-02, 1.784169333055599e-02, 1.740086526883159e-02, 1.784169333055599e-02, 8.790403586819201e-03, 9.043178049962075e-03, 8.749740685891223e-03, 8.989304493157570e-03, 7.934565370662415e-03, 8.266195933611229e-03, 9.912883381647294e-03, 1.026510832263325e-02, 8.712260059318164e-03, 1.204667443917209e-02, 8.712260059318164e-03, 1.204667443917209e-02, 1.280669219913431e-01, 1.552618050258927e-01, 1.506486981921307e-01, 1.454059268899875e-01, 1.347929468174374e-03, 1.910442660455996e-03, 1.560337432764199e-02, 5.251316787178470e-02, 1.622138868279393e-01, 1.985792642982784e-03, 1.622138868279387e-01, 1.985792642982785e-03, 2.922245438556699e-04, 1.950226976784694e-03, 1.312855500574268e-04, 5.295906994631405e-04, 7.135445197666542e-04, 1.230299786586132e-03, 3.850584053868453e-07, 4.990328313275466e-07, 2.076782679870784e-05, 1.685534947615806e-07, 2.076782679870575e-05, 1.685534947616095e-07, 6.814103441984413e-03, 6.817194313962030e-03, 6.813161759402154e-03, 6.816282240401855e-03, 6.814627161115830e-03, 6.817578426463905e-03, 6.813796209746039e-03, 6.816727661607256e-03, 6.813185667773371e-03, 6.816663709855954e-03, 6.813185667773371e-03, 6.816663709855954e-03, 1.301870880823603e-02, 1.314554549681345e-02, 1.355905994777952e-02, 1.366903039872073e-02, 1.360309572718464e-02, 1.354549685512620e-02, 1.414593752839972e-02, 1.409483312022872e-02, 1.293967822142386e-02, 1.337007769166804e-02, 1.293967822142386e-02, 1.337007769166804e-02, 3.831966733273764e-02, 3.900823300564335e-02, 3.606726365621665e-02, 3.659799237032262e-02, 1.178478811684360e-01, 4.543687617941825e-02, 1.131682691958769e-01, 5.758042890009883e-02, 4.014214059551625e-02, 3.828958787380530e-02, 4.014214059551625e-02, 3.828958787380531e-02, 1.030876237076021e-02, 9.044853615094573e-03, 1.440988422719829e-01, 1.640084826922590e-01, 5.363644691363646e-03, 9.198825074201588e-03, 1.716936489464955e-02, 1.714119940812804e-02, 3.533447570876491e-02, 1.018967974192775e-01, 3.533447570876505e-02, 1.018967974192785e-01, 1.096055547972641e-08, 1.267824852221246e-08, 9.401053236121228e-08, 7.380568720379513e-08, 9.970854204532211e-07, 1.232906527332228e-06, 1.698611994472300e-03, 4.615269125724261e-03, 1.273318514023754e-08, 3.754664408878795e-05, 1.273318514021196e-08, 3.754664408878825e-05, 5.671494360962210e-02, 5.659530989551222e-02, 5.711142990548227e-02, 5.698404067862196e-02, 5.697047125874947e-02, 5.684655271540392e-02, 5.685589532659008e-02, 5.673206180087330e-02, 5.691090132769054e-02, 5.678784556562716e-02, 5.691090132769054e-02, 5.678784556562714e-02, 5.480213940172491e-02, 5.485412941769568e-02, 6.610958082789956e-02, 6.592633500652080e-02, 6.216722383197714e-02, 6.201761988156355e-02, 5.887303423542154e-02, 5.871734710425189e-02, 6.002319100347898e-02, 6.006205039824140e-02, 6.002319100347896e-02, 6.006205039824137e-02, 3.214154363176259e-02, 3.255574827965244e-02, 1.102023643714539e-01, 1.089465242372205e-01, 8.144987407946941e-02, 8.112527052488708e-02, 9.210363491000344e-02, 9.622639809040943e-02, 7.045964239932649e-02, 7.048748821029169e-02, 7.045964239932649e-02, 7.048748821029169e-02, 5.026108443378747e-02, 5.175012448801649e-02, 3.829350047548912e-03, 2.616396766074843e-03, 1.293366487248879e-03, 1.623678561289708e-03, 8.953037256347675e-02, 6.483710747335614e-02, 9.120562970139053e-03, 1.513181950985508e-02, 9.120562970139010e-03, 1.513181950985513e-02, 1.340012227378422e-06, 1.337399631103460e-06, 1.957739027227696e-10, 1.466065878765450e-10, 5.403315350813056e-07, 6.635943793389641e-07, 1.265978328946965e-02, 6.429404075881209e-02, 4.027023943344241e-08, 2.745097552249740e-05, 4.027023943357381e-08, 2.745097552249740e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
