
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_th_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_th", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-4.006357096580921e+01, -4.006492456667674e+01, -4.007047816697833e+01, -4.524252151754705e+01, -4.525416168797180e+01, -5.044718387190206e+01, -2.504370506672007e+00, -2.792444436120735e+00, -2.812016228140887e+00, -2.804340004486901e+00, -2.804945981013840e+00, -2.517937530688762e+00, -2.019941180828407e-01, -2.271921445064841e-01, -2.117037472610510e-01, -2.047683495495957e-01, -1.825431672505480e-01, -2.298691735747642e-01, -3.861470425147511e-02, -4.154337975957332e-02, -1.523940571196855e-01, -1.254569646060826e-02, -3.489030682794843e-02, -3.478716327631850e-02, -1.591253627638790e-06, -1.744011089948341e-06, -2.039980782663267e-04, -2.604069184144644e-07, -8.743103591317720e-07, -8.743103591317721e-07, -1.795252549408337e+01, -1.810127990689126e+01, -1.796100882767735e+01, -1.809223374630680e+01, -1.617011879026862e+01, -1.617210657321399e+01, -1.275376138787744e+00, -1.338978117878649e+00, -1.227947496283454e+00, -1.282964328468117e+00, -1.200382935077043e+00, -1.335090370046787e+00, -6.922956940604540e-01, -1.602678291998055e+00, -5.053746177108608e-01, -7.582342389058770e-01, -8.041723893883151e-01, -8.788800583988789e-01, -3.667822611134348e-03, -2.308630638579063e-02, -2.973548319073823e-03, -2.996027498641896e+00, -7.958414545799840e-03, -7.958414545799843e-03, -9.040441321679570e-08, -2.287852243103811e-07, -2.935353035928538e-07, -8.993000318707641e-04, -4.325521708381172e-07, -4.325521708381172e-07, -7.636467596563435e+00, -3.799851746667114e+00, -3.672799639045826e+00, -5.058208676273598e+00, -4.031791777001219e+00, -4.564717227664734e+00, -6.536177355211130e+00, -4.682302460187333e-01, -7.218405582708859e-01, -1.398309587057810e+00, -1.033502462331666e+00, -9.256903971425469e-01, -1.232279580782371e+00, -4.971360045089192e-02, -7.841726162579314e-02, -1.993832918954443e-01, -1.448338883033284e-01, -1.298826862740296e-01, -3.812825693695502e-01, -1.551107142247082e-04, -4.682662123857305e-04, -2.920600657173644e-01, -2.464145531478138e-03, -2.464145531478138e-03, -2.442223715166447e-06, -4.830745918272566e-09, -6.068167120457125e-08, -1.664802195246388e-03, -3.530306809094610e-07, -2.904109948554936e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_th_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_th", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.201760762055474e+02, -1.202053496458242e+02, -1.201807831346230e+02, -1.202087643565757e+02, -1.201942998642026e+02, -1.202285690142643e+02, -1.201414752778381e+02, -1.409297151976689e+02, -1.201790729704723e+02, -1.409599689827758e+02, -1.409507645949984e+02, -1.409599689827758e+02, -7.801420331192918e+00, -6.649925879146601e+00, -7.803920405911864e+00, -7.800916078668450e+00, -7.852679657990789e+00, -7.861528402482937e+00, -7.835568304235220e+00, -7.835743481856776e+00, -7.794603283859844e+00, -7.880046898910782e+00, -6.645924905185762e+00, -7.880046898910782e+00, -5.959648620998067e-01, -6.158816615437422e-01, -5.900734606210923e-01, -7.187917010644769e-01, -6.002715853340295e-01, -5.825954876939048e-01, -6.313708878452138e-01, -5.511286218743204e-01, -6.322416801318526e-01, -4.446612895856134e-01, -7.415180199077283e-01, -5.215163272917689e-01, -8.978922724662228e-02, -1.295358090934652e-01, -9.491032051857766e-02, -1.403774087490904e-01, -4.253273282911519e-01, -4.576484798067382e-01, -3.239302367437055e-02, -3.760807787632463e-02, -1.109243835432458e-01, -1.046553061770143e-02, -1.109243835432458e-01, -8.923241895092800e-03, -4.004159666124958e-06, -4.814516958466090e-06, -4.000582764501322e-06, -5.805936870176946e-06, -4.775024735215947e-04, -6.763622147366947e-04, -7.436691588833178e-07, -7.107155539892722e-07, -2.770089564866325e-06, -6.675761120471258e-07, -2.770089564866326e-06, -6.675761120471265e-07, -5.016619151689416e+01, -5.015674167188063e+01, -5.058898399226887e+01, -5.056521848666961e+01, -5.019540465878345e+01, -5.017493129596453e+01, -5.055791119460198e+01, -5.054574358912451e+01, -4.295351689496330e+01, -5.036049120355153e+01, -5.037758154347548e+01, -4.293894513144920e+01, -3.556040872477697e+00, -3.571062218173650e+00, -3.736225187336860e+00, -3.746303703770085e+00, -3.402240970160789e+00, -3.459669704576038e+00, -3.553910314985328e+00, -3.615430105365141e+00, -3.779572123909582e+00, -3.138174703416422e+00, -3.779572123909582e+00, -3.680575269439013e+00, -2.138937600579753e+00, -1.855476736419431e+00, -4.384960664965705e+00, -4.571056034888954e+00, -1.241778102027935e+00, -1.564892638645364e+00, -1.922684762363252e+00, -2.296207491964430e+00, -2.678612648135375e+00, -1.872232318618454e+00, -2.678612648135376e+00, -2.195828028009299e+00, -1.010751885096219e-02, -1.038518422310530e-02, -6.091164221802677e-02, -7.216503648370576e-02, -7.459331673942303e-03, -9.034176073472467e-03, -8.369845824475503e+00, -8.372662684293017e+00, -1.792188511615560e-02, -2.586640502358942e-02, -1.792188511615560e-02, -2.586640502358943e-02, -2.282480365070880e-07, -2.882530576518044e-07, -6.451479250676941e-07, -6.336175050870378e-07, -7.240382749726215e-07, -9.011088239226270e-07, -2.702834896438165e-03, -2.497527895951584e-03, -3.347436901934945e-07, -1.545986303435400e-06, -3.347436901934947e-07, -1.545986303435399e-06, -2.098510229338323e+01, -2.168522366855007e+01, -1.048229689196953e+01, -1.075060039285369e+01, -1.086122495743052e+01, -1.117374668485322e+01, -1.322124045505595e+01, -1.593161301979441e+01, -1.192670059513154e+01, -1.226209933675474e+01, -1.192670059513154e+01, -1.438147453076174e+01, -1.796107061103810e+01, -1.856165328893362e+01, -1.447754860349576e+00, -1.256879373205614e+00, -2.226989702768245e+00, -1.942936324165134e+00, -3.883037458740987e+00, -3.930794081521774e+00, -2.865062012177252e+00, -2.910142202768284e+00, -2.865062012177252e+00, -2.481279141307694e+00, -3.725511653959784e+00, -3.395131762922670e+00, -1.376493563693784e-01, -1.401403683738675e-01, -2.027556192734323e-01, -2.484804025355931e-01, -5.265060193259475e-01, -6.227327730249481e-01, -4.033340440758942e-01, -4.060332308494950e-01, -4.033340440758942e-01, -3.461967547243064e-01, -1.037359901646455e+00, -1.092766486964988e+00, -4.628906868673086e-04, -4.677241613665895e-04, -1.226896599284474e-03, -1.382219959851626e-03, -7.336734606212170e-01, -8.948099738648897e-01, -5.853760022703597e-03, -7.761193341217626e-03, -5.853760022703598e-03, -7.761193341217628e-03, -6.943673270784070e-06, -7.670860309418227e-06, -1.346621255117655e-08, -1.352891755748818e-08, -1.610762654049055e-07, -1.994735586063560e-07, -4.721890852273167e-03, -5.253978211918716e-03, -4.570743424707075e-07, -1.211965533481236e-06, -4.570743424707066e-07, -1.033360086441893e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_th_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_th", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.312213630674464e-07, 0.000000000000000e+00, -1.312863130799322e-07, -1.312290985368263e-07, 0.000000000000000e+00, -1.312919232918749e-07, -1.312499771648767e-07, 0.000000000000000e+00, -1.313229388172921e-07, -1.311633587011261e-07, 0.000000000000000e+00, -1.312122650426889e-07, -1.312264157441557e-07, 0.000000000000000e+00, -1.312535918277757e-07, -1.312264157441557e-07, 0.000000000000000e+00, -1.312535918277757e-07, -2.158529670810243e-05, 0.000000000000000e+00, -2.157530792689348e-05, -2.159872838672900e-05, 0.000000000000000e+00, -2.158411919008407e-05, -2.186208427903112e-05, 0.000000000000000e+00, -2.190867597183221e-05, -2.175857726566627e-05, 0.000000000000000e+00, -2.175771797418696e-05, -2.156922107852207e-05, 0.000000000000000e+00, -2.199526617296605e-05, -2.156922107852207e-05, 0.000000000000000e+00, -2.199526617296605e-05, -3.405539037711427e-03, 0.000000000000000e+00, -3.551654319406962e-03, -3.369886227871538e-03, 0.000000000000000e+00, -3.530783972472903e-03, -2.876418441467066e-03, 0.000000000000000e+00, -2.824254062572510e-03, -3.111496790080357e-03, 0.000000000000000e+00, -3.219173955459508e-03, -3.575148219797547e-03, 0.000000000000000e+00, -2.618949014131567e-03, -3.575148219797547e-03, 0.000000000000000e+00, -2.618949014131567e-03, -2.899446147495002e-01, 0.000000000000000e+00, -3.489232762096269e-01, -3.010100273014985e-01, 0.000000000000000e+00, -3.689402989442431e-01, -5.487659676550897e-04, 0.000000000000000e+00, -7.166780758728176e-04, -1.327764946271001e-01, 0.000000000000000e+00, -1.648411066640030e-01, -2.481965584321096e-01, 0.000000000000000e+00, -9.266890406397427e-02, -2.481965584321095e-01, 0.000000000000000e+00, -9.266890406397431e-02, -2.533357733628367e-01, 0.000000000000000e+00, -2.543991554829256e-01, -2.627404917849549e-01, 0.000000000000000e+00, -2.661935793101558e-01, -1.266420942301348e-01, 0.000000000000000e+00, -1.331952378568468e-01, -1.851961813174839e-01, 0.000000000000000e+00, -1.870896136941081e-01, -2.405431442379834e-01, 0.000000000000000e+00, -4.113817281636896e-01, -2.405431442379834e-01, 0.000000000000000e+00, -4.113817281636900e-01, -7.918394705499574e-05, 0.000000000000000e+00, -7.926797615858414e-05, -8.043410331044072e-05, 0.000000000000000e+00, -8.047719137004554e-05, -7.927078686862889e-05, 0.000000000000000e+00, -7.932219008673495e-05, -8.034262479288442e-05, 0.000000000000000e+00, -8.041985000395453e-05, -7.980723844287835e-05, 0.000000000000000e+00, -7.986992308537421e-05, -7.980723844287835e-05, 0.000000000000000e+00, -7.986992308537421e-05, -1.411553966521933e-04, 0.000000000000000e+00, -1.423936127128484e-04, -1.491106532019682e-04, 0.000000000000000e+00, -1.501612175051198e-04, -1.341064041986276e-04, 0.000000000000000e+00, -1.372415569986176e-04, -1.408277236928358e-04, 0.000000000000000e+00, -1.441797543895510e-04, -1.513394738784737e-04, 0.000000000000000e+00, -1.473448670247037e-04, -1.513394738784737e-04, 0.000000000000000e+00, -1.473448670247037e-04, -6.978810481903469e-02, 0.000000000000000e+00, -7.339750319205120e-02, -1.801073177255184e-01, 0.000000000000000e+00, -1.951867564877951e-01, -4.222127622663711e-02, 0.000000000000000e+00, -5.399253060281611e-02, -7.936027676836960e-02, 0.000000000000000e+00, -9.303273580872118e-02, -8.648155325539547e-02, 0.000000000000000e+00, -7.897840527123567e-02, -8.648155325539551e-02, 0.000000000000000e+00, -7.897840527123570e-02, -1.139450192136371e-01, 0.000000000000000e+00, -1.136327298033118e-01, -1.193112395980035e-01, 0.000000000000000e+00, -1.181640384693800e-01, -1.132427166132196e-01, 0.000000000000000e+00, -1.213417513037065e-01, -8.769816327139932e-04, 0.000000000000000e+00, -8.799413367167528e-04, -1.596213814388231e-01, 0.000000000000000e+00, -2.352846874284125e-01, -1.596213814388232e-01, 0.000000000000000e+00, -2.352846874284127e-01, -1.346287214357151e-01, 0.000000000000000e+00, -1.239063183644389e-01, -1.756562080080401e-01, 0.000000000000000e+00, -1.548304288811977e-01, -1.265460641141485e+00, 0.000000000000000e+00, -1.389368522821842e+00, -1.389758752384516e-01, 0.000000000000000e+00, -1.573349606073265e-01, -2.382912523410267e-01, 0.000000000000000e+00, -7.576411004902160e-01, -2.382912523410268e-01, 0.000000000000000e+00, -7.576411004902154e-01, -6.653867789799063e+00, 0.000000000000000e+00, -6.942664643330402e+00, -1.718723850555501e+00, 0.000000000000000e+00, -1.766053695637578e+00, -2.507503056773375e+00, 0.000000000000000e+00, -2.592569103631692e+00, -3.678212904101164e+00, 0.000000000000000e+00, -3.793816212170269e+00, -3.008359519724666e+00, 0.000000000000000e+00, -3.106811881006458e+00, -3.008359519724666e+00, 0.000000000000000e+00, -3.106811881006457e+00, -5.738441936772093e+00, 0.000000000000000e+00, -6.008460107127382e+00, -9.346231871227208e-02, 0.000000000000000e+00, -9.441613910617147e-02, -1.677811653455167e-01, 0.000000000000000e+00, -1.710654705119113e-01, -3.913587990183950e-01, 0.000000000000000e+00, -3.926864591748477e-01, -2.433850735058132e-01, 0.000000000000000e+00, -2.455797660554994e-01, -2.433850735058131e-01, 0.000000000000000e+00, -2.455797660554992e-01, -9.826986083393478e-02, 0.000000000000000e+00, -1.111722091002391e-01, -1.091622474987853e-01, 0.000000000000000e+00, -1.092965514771835e-01, -1.099883480863310e-01, 0.000000000000000e+00, -1.131107253121981e-01, -1.377777806632613e-01, 0.000000000000000e+00, -1.355596852632149e-01, -1.335098798430340e-01, 0.000000000000000e+00, -1.355895406685109e-01, -1.335098798430341e-01, 0.000000000000000e+00, -1.355895406685111e-01, -7.941477018860031e-02, 0.000000000000000e+00, -8.456973954560490e-02, -1.332867383523688e-01, 0.000000000000000e+00, -1.306294407734596e-01, -1.149143899803451e-01, 0.000000000000000e+00, -1.197052756655296e-01, -2.494038315501329e-01, 0.000000000000000e+00, -3.391245366991481e-01, -1.779410977146085e-01, 0.000000000000000e+00, -2.257031128036091e-01, -1.779410977146086e-01, 0.000000000000000e+00, -2.257031128036093e-01, -1.223226464582599e-01, 0.000000000000000e+00, -1.205641311535871e-01, -2.018213977636124e-01, 0.000000000000000e+00, -2.009340403692906e-01, -5.596627981960458e-01, 0.000000000000000e+00, -5.929406994027717e-01, -2.058943162841141e-01, 0.000000000000000e+00, -2.312705210340673e-01, -6.151383363539672e-01, 0.000000000000000e+00, -7.852869966806554e-01, -6.151383363539679e-01, 0.000000000000000e+00, -7.852869966806566e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_th_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_th", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [3.914128439447626e-02, 3.916050668684011e-02, 3.914397115181988e-02, 3.916245586245715e-02, 3.915148781421603e-02, 3.917353419014826e-02, 3.912136552687744e-02, 5.942731064956490e-02, 3.914301401802562e-02, 5.944942800384223e-02, 5.943939165700186e-02, 5.944942800384223e-02, 4.219383260675048e-02, 2.777218734634285e-02, 4.222048415654120e-02, 4.218995454935170e-02, 4.274250288851775e-02, 4.283623972134881e-02, 4.254828254177218e-02, 4.254839359471992e-02, 4.214126163345230e-02, 4.302191120783393e-02, 2.775156253910274e-02, 4.302191120783393e-02, 3.127003492985102e-02, 3.300102261777930e-02, 3.079842315618466e-02, 4.972043434780282e-02, 3.747745613877091e-02, 3.604253128462741e-02, 4.099826875099079e-02, 2.811512177303138e-02, 3.398951198537375e-02, 2.046009402732421e-02, 5.161370338519718e-02, 3.106903167112195e-02, 4.347069038862035e-02, 8.907402951925056e-02, 4.681863006227378e-02, 9.925937939400431e-02, 1.159880266307752e-02, 1.101561791942274e-02, 1.374068470115329e-02, 1.777502354393243e-02, 6.433113115443026e-02, 3.708724322382839e-03, 6.433113115443019e-02, 2.442330651325287e-03, 2.346150854970493e-06, 2.826876527930545e-06, 1.843747922887878e-06, 3.487123941898052e-06, 1.527845529280494e-04, 2.873558036099846e-04, 3.725564366664320e-07, 3.578631213393419e-07, 1.581563339182130e-06, 4.984476736589229e-07, 1.581563339182130e-06, 4.984476736589237e-07, 5.196680197343692e-01, 5.198457373161630e-01, 5.281683294031291e-01, 5.280615913301941e-01, 5.202556803591351e-01, 5.202120660073394e-01, 5.275436710183723e-01, 5.276701240215486e-01, 3.450123570292137e-01, 5.239355618580475e-01, 5.239076532665836e-01, 3.450307358577385e-01, 4.918263285908640e-02, 4.960654241804054e-02, 5.311090070011394e-02, 5.344144081929298e-02, 4.586549822045262e-02, 4.718171720391343e-02, 4.909608137322109e-02, 5.053687660073518e-02, 5.412713418308526e-02, 3.424990751485813e-02, 5.412713418308526e-02, 5.200911881885865e-02, 6.577867237761554e-01, 4.519713821884576e-01, 2.166345231654657e+00, 2.350920836539687e+00, 2.970338619141979e-01, 4.232994221028890e-01, 6.305302947599750e-01, 8.153147742741546e-01, 9.169970577175611e-01, 4.730735840556756e-01, 9.169970577175611e-01, 7.183709980104707e-01, 3.971810498020308e-03, 4.075324648738774e-03, 1.891715262243994e-02, 2.887791173203301e-02, 2.922142186875608e-03, 3.663447451173751e-03, 2.885419705869663e-01, 2.891257292374222e-01, 8.335382004149015e-03, 1.460592922517027e-02, 8.335382004149018e-03, 1.460592922517029e-02, 7.529925704074365e-08, 1.181182314189146e-07, 3.147656576648578e-07, 2.902362217866626e-07, 9.481610974018836e-07, 1.236466221487708e-06, 1.172966240668082e-03, 8.907129076116829e-04, 1.902228725763309e-07, 1.566511875356753e-06, 1.902228725763309e-07, 1.566511875356752e-06, 6.301507545461195e+01, 6.651556527358277e+01, 1.599763539132114e+01, 1.663148228217038e+01, 1.546373236735512e+01, 1.617628434318699e+01, 2.279845495169324e+01, 3.612386239412380e+01, 1.859944414744889e+01, 1.943287642562818e+01, 1.859944414744889e+01, 2.950918272039835e+01, 5.008705563630021e+01, 5.296567772586921e+01, 5.152400261970060e-01, 3.472413994680250e-01, 1.061906058513632e+00, 7.225277407763543e-01, 2.827843805896822e+00, 2.867474357250048e+00, 1.645421935886367e+00, 1.678830258587636e+00, 1.645421935886367e+00, 1.105571145899174e+00, 1.359541231486978e+00, 1.017816604702894e+00, 5.294277556010950e-02, 5.393401738613088e-02, 6.045900830660563e-02, 9.728375424739838e-02, 1.757145454243562e-01, 2.669090408227207e-01, 1.715607238011157e-01, 1.740487706133409e-01, 1.715607238011158e-01, 1.146174830868344e-01, 3.403113115692140e-01, 3.699398792854354e-01, 1.519450980015568e-04, 1.519935361505117e-04, 4.841628436086144e-04, 5.567113710525186e-04, 4.265310546105316e-01, 6.066060108030614e-01, 2.874546467535681e-03, 4.292334541033706e-03, 2.874546467535682e-03, 4.292334541033709e-03, 2.183521596567873e-06, 2.394792639786049e-06, 7.042475687183042e-09, 7.059697545706382e-09, 1.083451691234756e-07, 1.381038374818145e-07, 1.926428538372115e-03, 2.271763863957263e-03, 4.173203149384157e-07, 1.250261214665617e-06, 4.173203149384151e-07, 8.233427511212589e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
