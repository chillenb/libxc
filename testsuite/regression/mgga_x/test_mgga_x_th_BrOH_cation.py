
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_th_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_th", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-4.978380679160495e+01, -4.978550159042949e+01, -4.979280124749410e+01, -4.976771555209611e+01, -4.978088853663563e+01, -4.978088853663563e+01, -2.469773316214340e+00, -2.470440250734765e+00, -2.488311116901079e+00, -2.482901210126460e+00, -2.482624171559459e+00, -2.482624171559459e+00, -2.202769394892357e-01, -2.187739887572948e-01, -1.859339648506825e-01, -2.019210174843474e-01, -2.017708961430444e-01, -2.017708961430444e-01, -4.174047906734198e-02, -4.468390696188802e-02, -1.439110359145069e-01, -1.203065279664950e-02, -3.405677245046225e-02, -3.405677245046222e-02, -1.588629322390005e-06, -1.893322424988623e-06, -2.180953763501068e-04, -2.545804557526774e-07, -8.664594752669721e-07, -8.664594752669718e-07, -1.792871471616971e+01, -1.807738181621833e+01, -1.793767268565936e+01, -1.806880590789841e+01, -1.800271160150519e+01, -1.800271160150519e+01, -1.242219832756669e+00, -1.308584607349414e+00, -1.200478090509391e+00, -1.258301447959408e+00, -1.300416800044489e+00, -1.300416800044489e+00, -7.118242919747682e-01, -1.378227332867995e+00, -4.534082047654405e-01, -6.389190853523860e-01, -8.101147683044928e-01, -8.101147683044929e-01, -3.546070526706661e-03, -2.531197655333766e-02, -2.871477926883186e-03, -2.494650709484654e+00, -7.775624775138755e-03, -7.775624775138759e-03, -9.244396052209339e-08, -2.181095204584151e-07, -2.860604476121383e-07, -9.756695177249180e-04, -4.272510611655896e-07, -4.272510611655896e-07, -6.946923819576071e+00, -3.631342997278754e+00, -4.374160609609497e+00, -5.253488786793398e+00, -4.774020006390474e+00, -4.774020006390474e+00, -5.504889907711188e+00, -5.173923035203434e-01, -7.915712619541423e-01, -1.351048796196658e+00, -1.006892007692514e+00, -1.006892007692514e+00, -1.177229208411712e+00, -4.919161360746261e-02, -8.500701926397554e-02, -2.067721416465221e-01, -1.393609751264525e-01, -1.393609751264526e-01, -3.634075862424762e-01, -1.931559940504517e-04, -4.558231113493866e-04, -2.711443626323420e-01, -2.396846503424910e-03, -2.396846503424912e-03, -2.925224978626478e-06, -4.222060772970622e-09, -7.545965399477307e-08, -2.060593004180255e-03, -3.473844165771428e-07, -3.473844165771421e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_th_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_th", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.396118271327342e+02, -1.396505420400573e+02, -1.396173252304759e+02, -1.396545303857773e+02, -1.396337559715880e+02, -1.396784051915633e+02, -1.395720798771866e+02, -1.395996495271749e+02, -1.396153125312958e+02, -1.396302398148225e+02, -1.396153125312958e+02, -1.396302398148225e+02, -7.157859195990032e+00, -7.155121763254845e+00, -7.160231276292112e+00, -7.156588451822450e+00, -7.205673089665384e+00, -7.213714550778525e+00, -7.193061062898775e+00, -7.192495561343828e+00, -7.151506039984051e+00, -7.233858639483016e+00, -7.151506039984051e+00, -7.233858639483016e+00, -6.323927304566526e-01, -6.525834533703349e-01, -6.264993836983436e-01, -6.494638934658007e-01, -5.469625006838570e-01, -5.328625226485595e-01, -5.786307655292090e-01, -5.921749843910846e-01, -6.675346530406960e-01, -4.869653117254434e-01, -6.675346530406960e-01, -4.869653117254434e-01, -1.038335291696748e-01, -1.288375748814323e-01, -1.094788491172266e-01, -1.393829344206649e-01, -3.740590731712228e-01, -4.717454295972872e-01, -3.119788909349989e-02, -3.673638895649224e-02, -1.090844358129547e-01, -9.918098463018067e-03, -1.090844358129546e-01, -9.918098463018070e-03, -3.997024257978804e-06, -4.810840858506845e-06, -4.678191001335895e-06, -5.796278020659700e-06, -5.505108100155507e-04, -6.665027179388359e-04, -7.308811919835066e-07, -7.002563543718501e-07, -2.755272596972717e-06, -6.470729865930433e-07, -2.755272596972716e-06, -6.470729865930437e-07, -5.011716267760488e+01, -5.011052841129550e+01, -5.053975651867402e+01, -5.051885465377207e+01, -5.014747749286224e+01, -5.012951481282013e+01, -5.050978517693378e+01, -5.050015916948666e+01, -5.032760303234083e+01, -5.031406087102368e+01, -5.032760303234083e+01, -5.031406087102368e+01, -3.488874868012436e+00, -3.505603127896910e+00, -3.674655607601675e+00, -3.686299880635171e+00, -3.348453812663003e+00, -3.403585194038203e+00, -3.505599237324934e+00, -3.565095126105836e+00, -3.704971559732082e+00, -3.616551182519727e+00, -3.704971559732082e+00, -3.616551182519727e+00, -2.017644000436863e+00, -2.056165087110239e+00, -3.944167857326433e+00, -4.114056040111569e+00, -1.144855998267723e+00, -1.454668759422120e+00, -1.699637961579331e+00, -2.043449257743156e+00, -2.538786041160463e+00, -2.060974032457562e+00, -2.538786041160463e+00, -2.060974032457563e+00, -9.877614463355562e-03, -1.012846203667823e-02, -7.069188962795404e-02, -7.136646280590418e-02, -7.259593522433882e-03, -8.826272379106796e-03, -7.367356630433049e+00, -7.369644365048438e+00, -1.759229872327216e-02, -2.547054807014646e-02, -1.759229872327215e-02, -2.547054807014647e-02, -2.533280902984500e-07, -2.736215093496394e-07, -6.244634548650727e-07, -6.116285482160937e-07, -7.112136961540906e-07, -8.843699286703523e-07, -2.626106010154972e-03, -2.875553464137130e-03, -3.121248495787004e-07, -1.540023537783658e-06, -3.121248495787006e-07, -1.540023537783658e-06, -1.962951412340198e+01, -2.028290715957153e+01, -1.014860322950520e+01, -1.041029769066494e+01, -1.224311293582180e+01, -1.259706052052693e+01, -1.476971344962545e+01, -1.517759206651001e+01, -1.338932390945477e+01, -1.376813643879264e+01, -1.338932390945478e+01, -1.376813643879263e+01, -1.592604877051728e+01, -1.647179678934838e+01, -1.436834885716454e+00, -1.463039952280685e+00, -2.197752915046431e+00, -2.248869681148464e+00, -3.789145724277572e+00, -3.835649250294928e+00, -2.811545146330367e+00, -2.857213976234813e+00, -2.811545146330367e+00, -2.857213976234812e+00, -3.332857723586904e+00, -3.566207415204691e+00, -1.366319446345135e-01, -1.390702888325135e-01, -2.338255685067530e-01, -2.442971573868701e-01, -5.875496095136876e-01, -5.920036182134057e-01, -3.924606069131141e-01, -3.950149386413208e-01, -3.924606069131141e-01, -3.950149386413210e-01, -1.001349926649609e+00, -1.057271231238245e+00, -5.390086173420042e-04, -5.437879044275158e-04, -1.203100199916606e-03, -1.356346460087229e-03, -6.905475265440755e-01, -8.542162564825549e-01, -5.736953483492116e-03, -7.611482307776670e-03, -5.736953483492116e-03, -7.611482307776671e-03, -7.868154290265866e-06, -8.674177019714510e-06, -1.236255395211233e-08, -1.219861171238068e-08, -1.872660042368489e-07, -2.318274229338260e-07, -5.444103866517181e-03, -6.111633524025685e-03, -4.305236075573745e-07, -1.207174718808626e-06, -4.305236075573735e-07, -1.207174718808624e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_th_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_th", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.312213630674464e-07, 0.000000000000000e+00, -1.312863130799322e-07, -1.312290985368263e-07, 0.000000000000000e+00, -1.312919232918749e-07, -1.312499771648767e-07, 0.000000000000000e+00, -1.313229388172921e-07, -1.311633587011261e-07, 0.000000000000000e+00, -1.312122650426889e-07, -1.312264157441557e-07, 0.000000000000000e+00, -1.312535918277757e-07, -1.312264157441557e-07, 0.000000000000000e+00, -1.312535918277757e-07, -2.158529670810243e-05, 0.000000000000000e+00, -2.157530792689348e-05, -2.159872838672900e-05, 0.000000000000000e+00, -2.158411919008407e-05, -2.186208427903112e-05, 0.000000000000000e+00, -2.190867597183221e-05, -2.175857726566627e-05, 0.000000000000000e+00, -2.175771797418696e-05, -2.156922107852207e-05, 0.000000000000000e+00, -2.199526617296605e-05, -2.156922107852207e-05, 0.000000000000000e+00, -2.199526617296605e-05, -3.405539037711427e-03, 0.000000000000000e+00, -3.551654319406962e-03, -3.369886227871538e-03, 0.000000000000000e+00, -3.530783972472903e-03, -2.876418441467066e-03, 0.000000000000000e+00, -2.824254062572510e-03, -3.111496790080357e-03, 0.000000000000000e+00, -3.219173955459508e-03, -3.575148219797547e-03, 0.000000000000000e+00, -2.618949014131567e-03, -3.575148219797547e-03, 0.000000000000000e+00, -2.618949014131567e-03, -2.899446147495002e-01, 0.000000000000000e+00, -3.489232762096269e-01, -3.010100273014985e-01, 0.000000000000000e+00, -3.689402989442431e-01, -5.487659676550897e-04, 0.000000000000000e+00, -7.166780758728176e-04, -1.327764946271001e-01, 0.000000000000000e+00, -1.648411066640030e-01, -2.481965584321096e-01, 0.000000000000000e+00, -9.266890406397427e-02, -2.481965584321095e-01, 0.000000000000000e+00, -9.266890406397431e-02, -2.533357733628367e-01, 0.000000000000000e+00, -2.543991554829256e-01, -2.627404917849549e-01, 0.000000000000000e+00, -2.661935793101558e-01, -1.266420942301348e-01, 0.000000000000000e+00, -1.331952378568468e-01, -1.851961813174839e-01, 0.000000000000000e+00, -1.870896136941081e-01, -2.405431442379834e-01, 0.000000000000000e+00, -4.113817281636896e-01, -2.405431442379834e-01, 0.000000000000000e+00, -4.113817281636900e-01, -7.918394705499574e-05, 0.000000000000000e+00, -7.926797615858414e-05, -8.043410331044072e-05, 0.000000000000000e+00, -8.047719137004554e-05, -7.927078686862889e-05, 0.000000000000000e+00, -7.932219008673495e-05, -8.034262479288442e-05, 0.000000000000000e+00, -8.041985000395453e-05, -7.980723844287835e-05, 0.000000000000000e+00, -7.986992308537421e-05, -7.980723844287835e-05, 0.000000000000000e+00, -7.986992308537421e-05, -1.411553966521933e-04, 0.000000000000000e+00, -1.423936127128484e-04, -1.491106532019682e-04, 0.000000000000000e+00, -1.501612175051198e-04, -1.341064041986276e-04, 0.000000000000000e+00, -1.372415569986176e-04, -1.408277236928358e-04, 0.000000000000000e+00, -1.441797543895510e-04, -1.513394738784737e-04, 0.000000000000000e+00, -1.473448670247037e-04, -1.513394738784737e-04, 0.000000000000000e+00, -1.473448670247037e-04, -6.978810481903469e-02, 0.000000000000000e+00, -7.339750319205120e-02, -1.801073177255184e-01, 0.000000000000000e+00, -1.951867564877951e-01, -4.222127622663711e-02, 0.000000000000000e+00, -5.399253060281611e-02, -7.936027676836960e-02, 0.000000000000000e+00, -9.303273580872118e-02, -8.648155325539547e-02, 0.000000000000000e+00, -7.897840527123567e-02, -8.648155325539551e-02, 0.000000000000000e+00, -7.897840527123570e-02, -1.139450192136371e-01, 0.000000000000000e+00, -1.136327298033118e-01, -1.193112395980035e-01, 0.000000000000000e+00, -1.181640384693800e-01, -1.132427166132196e-01, 0.000000000000000e+00, -1.213417513037065e-01, -8.769816327139932e-04, 0.000000000000000e+00, -8.799413367167528e-04, -1.596213814388231e-01, 0.000000000000000e+00, -2.352846874284125e-01, -1.596213814388232e-01, 0.000000000000000e+00, -2.352846874284127e-01, -1.346287214357151e-01, 0.000000000000000e+00, -1.239063183644389e-01, -1.756562080080401e-01, 0.000000000000000e+00, -1.548304288811977e-01, -1.265460641141485e+00, 0.000000000000000e+00, -1.389368522821842e+00, -1.389758752384516e-01, 0.000000000000000e+00, -1.573349606073265e-01, -2.382912523410267e-01, 0.000000000000000e+00, -7.576411004902160e-01, -2.382912523410268e-01, 0.000000000000000e+00, -7.576411004902154e-01, -6.653867789799063e+00, 0.000000000000000e+00, -6.942664643330402e+00, -1.718723850555501e+00, 0.000000000000000e+00, -1.766053695637578e+00, -2.507503056773375e+00, 0.000000000000000e+00, -2.592569103631692e+00, -3.678212904101164e+00, 0.000000000000000e+00, -3.793816212170269e+00, -3.008359519724666e+00, 0.000000000000000e+00, -3.106811881006458e+00, -3.008359519724666e+00, 0.000000000000000e+00, -3.106811881006457e+00, -5.738441936772093e+00, 0.000000000000000e+00, -6.008460107127382e+00, -9.346231871227208e-02, 0.000000000000000e+00, -9.441613910617147e-02, -1.677811653455167e-01, 0.000000000000000e+00, -1.710654705119113e-01, -3.913587990183950e-01, 0.000000000000000e+00, -3.926864591748477e-01, -2.433850735058132e-01, 0.000000000000000e+00, -2.455797660554994e-01, -2.433850735058131e-01, 0.000000000000000e+00, -2.455797660554992e-01, -9.826986083393478e-02, 0.000000000000000e+00, -1.111722091002391e-01, -1.091622474987853e-01, 0.000000000000000e+00, -1.092965514771835e-01, -1.099883480863310e-01, 0.000000000000000e+00, -1.131107253121981e-01, -1.377777806632613e-01, 0.000000000000000e+00, -1.355596852632149e-01, -1.335098798430340e-01, 0.000000000000000e+00, -1.355895406685109e-01, -1.335098798430341e-01, 0.000000000000000e+00, -1.355895406685111e-01, -7.941477018860031e-02, 0.000000000000000e+00, -8.456973954560490e-02, -1.332867383523688e-01, 0.000000000000000e+00, -1.306294407734596e-01, -1.149143899803451e-01, 0.000000000000000e+00, -1.197052756655296e-01, -2.494038315501329e-01, 0.000000000000000e+00, -3.391245366991481e-01, -1.779410977146085e-01, 0.000000000000000e+00, -2.257031128036091e-01, -1.779410977146086e-01, 0.000000000000000e+00, -2.257031128036093e-01, -1.223226464582599e-01, 0.000000000000000e+00, -1.205641311535871e-01, -2.018213977636124e-01, 0.000000000000000e+00, -2.009340403692906e-01, -5.596627981960458e-01, 0.000000000000000e+00, -5.929406994027717e-01, -2.058943162841141e-01, 0.000000000000000e+00, -2.312705210340673e-01, -6.151383363539672e-01, 0.000000000000000e+00, -7.852869966806554e-01, -6.151383363539679e-01, 0.000000000000000e+00, -7.852869966806566e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_th_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_th", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_th_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_th", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [5.813192575539178e-02, 5.816507484520184e-02, 5.813594532390389e-02, 5.816799072274338e-02, 5.814782032989706e-02, 5.818529226223698e-02, 5.810278180751032e-02, 5.812775064929153e-02, 5.813449844495097e-02, 5.814999220060256e-02, 5.813449844495097e-02, 5.814999220060256e-02, 3.412882362393534e-02, 3.410175928219848e-02, 3.415136179020463e-02, 3.411556025698280e-02, 3.458249635168201e-02, 3.465735040407207e-02, 3.446422662189334e-02, 3.445517822876708e-02, 3.408506766342212e-02, 3.484743923762754e-02, 3.408506766342212e-02, 3.484743923762754e-02, 3.700410142460227e-02, 3.890084106251014e-02, 3.650209092463667e-02, 3.860877100979183e-02, 2.976552234219166e-02, 2.891347130881148e-02, 3.306299623030629e-02, 3.439690483434719e-02, 3.968159602561497e-02, 2.629966871700459e-02, 3.968159602561497e-02, 2.629966871700459e-02, 6.386897822367754e-02, 8.796152411250528e-02, 6.837830494120199e-02, 9.763005462664377e-02, 8.359301375599176e-03, 1.203356042053769e-02, 1.256602127441414e-02, 1.682040400015165e-02, 6.185861351750784e-02, 3.259220538907190e-03, 6.185861351750779e-02, 3.259220538907193e-03, 2.336463546812067e-06, 2.821875247813366e-06, 2.780615513990840e-06, 3.473682055434075e-06, 2.228651074997434e-04, 2.776499187697915e-04, 3.577123475773417e-07, 3.456603260470623e-07, 1.561961723654383e-06, 4.629762513258444e-07, 1.561961723654382e-06, 4.629762513258448e-07, 5.184912100874310e-01, 5.187359199114815e-01, 5.269774612118501e-01, 5.269396974668349e-01, 5.191046828913950e-01, 5.191210104027099e-01, 5.263801105195848e-01, 5.265674831301074e-01, 5.227033371704509e-01, 5.228163057783399e-01, 5.227033371704509e-01, 5.228163057783399e-01, 4.703017681017668e-02, 4.749960684983430e-02, 5.108295388740584e-02, 5.145811599533555e-02, 4.418538175673696e-02, 4.540948025322281e-02, 4.754966357318347e-02, 4.890661210814354e-02, 5.165168362410679e-02, 4.991285019494660e-02, 5.165168362410679e-02, 4.991285019494660e-02, 5.713567016943799e-01, 5.986270466931234e-01, 1.661758049860104e+00, 1.806321129094470e+00, 2.433152792509584e-01, 3.542152483069271e-01, 4.610443766557746e-01, 6.073646214400572e-01, 8.060827444022683e-01, 6.161467242937919e-01, 8.060827444022685e-01, 6.161467242937922e-01, 3.762480741841313e-03, 3.841897611519259e-03, 2.802942210993351e-02, 2.813746522498397e-02, 2.740840351365064e-03, 3.468101969271143e-03, 2.084643825035702e-01, 2.088707918942607e-01, 7.980200092074407e-03, 1.408799913276963e-02, 7.980200092074409e-03, 1.408799913276965e-02, 1.001210620288378e-07, 1.042259668104211e-07, 2.913820137914368e-07, 2.668979431378866e-07, 9.092473131203553e-07, 1.183246627825898e-06, 1.095811140690569e-03, 1.295167552786104e-03, 1.604404223160197e-07, 1.552512278191338e-06, 1.604404223160198e-07, 1.552512278191338e-06, 5.358313850803953e+01, 5.654900779611019e+01, 1.481762170251831e+01, 1.541164083771198e+01, 2.136614556934542e+01, 2.235789825430077e+01, 3.080892687313223e+01, 3.216238124606488e+01, 2.544223702881362e+01, 2.659314289205345e+01, 2.544223702881362e+01, 2.659314289205344e+01, 3.693777163733685e+01, 3.914803076846297e+01, 5.062351874507494e-01, 5.181109901048392e-01, 1.029603472414247e+00, 1.063833836864098e+00, 2.669408871577799e+00, 2.706652824101482e+00, 1.574206575477634e+00, 1.608081362482160e+00, 1.574206575477634e+00, 1.608081362482159e+00, 1.027527416846308e+00, 1.171675410527083e+00, 5.203606429443319e-02, 5.297978242183923e-02, 8.825293567859967e-02, 9.348884630913692e-02, 2.368320615050361e-01, 2.363913319091029e-01, 1.608440604904333e-01, 1.631050898573913e-01, 1.608440604904334e-01, 1.631050898573914e-01, 3.129391246822954e-01, 3.420970194617090e-01, 2.269028368400273e-04, 2.261474813747318e-04, 4.624040660740529e-04, 5.325652230762835e-04, 3.684377461952229e-01, 5.428421704893081e-01, 2.741641466137156e-03, 4.100485948416699e-03, 2.741641466137157e-03, 4.100485948416703e-03, 3.055664132485743e-06, 3.334479471356360e-06, 5.705097020561147e-09, 5.451222628589026e-09, 1.611933961899596e-07, 2.053036135153970e-07, 2.810370038684623e-03, 3.384286756432714e-03, 3.611510192146949e-07, 1.238809787662354e-06, 3.611510192146943e-07, 1.238809787662352e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
