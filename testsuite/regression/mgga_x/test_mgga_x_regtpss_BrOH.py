
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_regtpss_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_regtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.265794614978478e+01, -2.265800636472683e+01, -2.265837912210229e+01, -2.265739640499512e+01, -2.265797696521132e+01, -2.265797696521132e+01, -3.398214910419181e+00, -3.398232417863447e+00, -3.398996314370971e+00, -3.400573795720216e+00, -3.398225673428294e+00, -3.398225673428294e+00, -6.533618304727532e-01, -6.530952979746065e-01, -6.483667579425503e-01, -6.544361403350767e-01, -6.532641593689984e-01, -6.532641593689984e-01, -2.000256615850495e-01, -2.013333772560481e-01, -7.656665140220736e-01, -1.641477881339105e-01, -2.003818756689562e-01, -2.003818756689562e-01, -1.698259001351644e-02, -1.778147408187121e-02, -6.924628266180470e-02, -8.173329697761618e-03, -1.759631980372505e-02, -1.759631980372505e-02, -5.551959960382001e+00, -5.553026023021359e+00, -5.552102594000846e+00, -5.552929712250371e+00, -5.552461402605853e+00, -5.552461402605853e+00, -2.061908902732447e+00, -2.078888460592902e+00, -2.060092891284084e+00, -2.073367954076202e+00, -2.075766862296375e+00, -2.075766862296375e+00, -5.822985860240320e-01, -6.104109211958971e-01, -5.418689694775882e-01, -5.474864941745419e-01, -6.097763082427944e-01, -6.097763082427944e-01, -1.363666844477944e-01, -2.161200062486142e-01, -1.336160780623483e-01, -1.811209143857855e+00, -1.477087439976874e-01, -1.477087439976874e-01, -7.884957199198798e-03, -9.009169697729261e-03, -6.752742453741504e-03, -9.237428757199828e-02, -8.208679194796734e-03, -8.208679194796734e-03, -6.287456043875279e-01, -6.278945850041302e-01, -6.283266676387523e-01, -6.285578694533993e-01, -6.284490438952632e-01, -6.284490438952632e-01, -5.989545554210453e-01, -5.319868002896873e-01, -5.540249497252054e-01, -5.733980247433180e-01, -5.633419458192989e-01, -5.633419458192989e-01, -6.323394288219344e-01, -2.587804354998690e-01, -2.948996400676716e-01, -3.570217988570720e-01, -3.250354196871355e-01, -3.250354196871354e-01, -4.675338675076885e-01, -6.478010256208709e-02, -8.500688033808325e-02, -3.319768594793300e-01, -1.134012278597640e-01, -1.134012278597640e-01, -1.988833421553942e-02, -2.468705754594739e-03, -4.688595404394891e-03, -1.080473702571780e-01, -6.977156330071967e-03, -6.977156330071957e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_regtpss_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_regtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.857098190448346e+01, -2.857107546282526e+01, -2.857164682841514e+01, -2.857012222066552e+01, -2.857102982209381e+01, -2.857102982209381e+01, -4.216114216453169e+00, -4.216151632199634e+00, -4.217408593215087e+00, -4.216871549227915e+00, -4.216147238001437e+00, -4.216147238001437e+00, -7.872980437984564e-01, -7.858437104036361e-01, -7.459970693811124e-01, -7.541354448938788e-01, -7.867709869102750e-01, -7.867709869102750e-01, -2.078392968114469e-01, -2.118644601566214e-01, -9.689489910606944e-01, -1.439273063619834e-01, -2.090019939510755e-01, -2.090019939510755e-01, -2.246381670714757e-02, -2.350206870827417e-02, -8.411373083582997e-02, -1.088097755872772e-02, -2.325773412656374e-02, -2.325773412656374e-02, -7.060440903550044e+00, -7.062865187952587e+00, -7.060742656416974e+00, -7.062624391758520e+00, -7.061610088083145e+00, -7.061610088083145e+00, -2.442665197549603e+00, -2.474629133560752e+00, -2.436755435078936e+00, -2.462291787207911e+00, -2.471271118765196e+00, -2.471271118765196e+00, -7.222113944734440e-01, -8.375219798099830e-01, -6.725465172728848e-01, -7.258057380612227e-01, -7.619143918936614e-01, -7.619143918936614e-01, -1.326983920828612e-01, -1.994160432215557e-01, -1.287149699399432e-01, -2.434572818059250e+00, -1.340574937557045e-01, -1.340574937557045e-01, -1.049774516053700e-02, -1.198903029042284e-02, -8.987132182862083e-03, -1.032324649826565e-01, -1.092358104489420e-02, -1.092358104489420e-02, -8.415948262578441e-01, -8.194748589489758e-01, -8.262316913993685e-01, -8.322762732995745e-01, -8.291517624493813e-01, -8.291517624493813e-01, -8.209995052415565e-01, -6.589361169721198e-01, -6.920758535019446e-01, -7.251977489312766e-01, -7.068429168915444e-01, -7.068429168915444e-01, -8.593428766906628e-01, -2.601830129358795e-01, -3.228267037219774e-01, -4.248366950046978e-01, -3.762299724707647e-01, -3.762299724707646e-01, -5.636828176212676e-01, -8.024151829165919e-02, -9.915247361418143e-02, -4.030564885077734e-01, -1.143704710020620e-01, -1.143704710020620e-01, -2.626749456953543e-02, -3.290982320894738e-03, -6.247484431213915e-03, -1.087450832691356e-01, -9.287052573525773e-03, -9.287052573525759e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_regtpss_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_regtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.237682590240061e-08, -1.237688095799950e-08, -1.237617303626150e-08, -1.237524422773415e-08, -1.237686350458736e-08, -1.237686350458736e-08, -1.125272908341264e-05, -1.125559668812548e-05, -1.134339471035746e-05, -1.134312774733983e-05, -1.125306779386277e-05, -1.125306779386277e-05, -4.177103262505492e-03, -4.198663297636404e-03, -4.722351454066955e-03, -4.771695671182083e-03, -4.185285996378132e-03, -4.185285996378132e-03, -5.983498399059595e-01, -5.911557757969728e-01, -1.147335118360072e-03, -1.171887531571916e+00, -5.967280650493492e-01, -5.967280650493492e-01, -8.020398827085835e+00, -8.040427785141322e+00, -3.274915688347778e+00, -5.689969842538960e+00, -8.352699163905044e+00, -8.352699163905044e+00, -3.856692988345021e-06, -3.868763715988796e-06, -3.857443227061889e-06, -3.866852657578944e-06, -3.863532389689630e-06, -3.863532389689630e-06, -7.226052886295731e-05, -7.062422266838851e-05, -7.056802251433404e-05, -6.920999892635661e-05, -7.353311742664354e-05, -7.353311742664354e-05, -2.461556850687224e-02, -2.298282517752979e-02, -2.282162029178438e-02, -2.014254664481886e-02, -2.474048036332344e-02, -2.474048036332344e-02, -1.586203263989272e+00, -4.144098406252277e-01, -1.800939993023561e+00, -1.375457889382771e-04, -1.557343052838704e+00, -1.557343052838704e+00, -6.036295421351882e+00, -6.048059915710052e+00, -1.731116646998343e+01, -3.099214220689411e+00, -8.933248544606251e+00, -8.933248544606233e+00, -4.780178622845938e-02, -4.094936873926987e-02, -4.386292183876591e-02, -4.609418525648896e-02, -4.500741718165103e-02, -4.500741718165101e-02, -4.941425979812041e-02, -2.372491426837370e-02, -2.957153546593071e-02, -3.897338767881005e-02, -3.403492559163500e-02, -3.403492559163501e-02, -1.470865788495451e-02, -2.060637669480893e-01, -1.342755419545342e-01, -9.432346867650372e-02, -1.102861401758455e-01, -1.102861401758456e-01, -3.962040434413518e-02, -2.788916547571328e+00, -2.719780176584848e+00, -1.522951775692240e-01, -2.785871479266782e+00, -2.785871479266784e+00, -6.023283178831206e+00, -1.040731757976577e+01, -8.959996709192215e+00, -3.416204558241507e+00, -1.304709571082442e+01, -1.304709571082441e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_regtpss_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_regtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_regtpss_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_regtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.904638970476837e-03, 1.904662367176336e-03, 1.904675955067173e-03, 1.904291117670967e-03, 1.904652113686653e-03, 1.904652113686653e-03, 2.922892866141298e-03, 2.924194872733109e-03, 2.965762281492706e-03, 2.980300983040387e-03, 2.923042410875463e-03, 2.923042410875463e-03, 3.641911055460864e-03, 3.660180993754513e-03, 4.036575823912456e-03, 4.751803511806593e-03, 3.649503404165224e-03, 3.649503404165224e-03, 1.899950060271446e-02, 2.090565217704861e-02, 3.243986364469478e-04, 1.795371342853576e-03, 1.956612564356330e-02, 1.956612564356330e-02, 6.698888918978806e-10, 9.158413908329501e-10, 2.939830184714964e-06, 1.332956170128513e-12, 9.306200293997596e-10, 9.306200293997572e-10, 8.785642018422834e-03, 8.813936924281852e-03, 8.787805549961916e-03, 8.809840270116649e-03, 8.801133403911761e-03, 8.801133403911761e-03, 6.129027660081986e-03, 6.346746043599506e-03, 5.915952019638946e-03, 6.078061402905798e-03, 6.570318186385322e-03, 6.570318186385322e-03, 4.843333381893383e-02, 5.614090143770890e-02, 2.874132200510437e-02, 2.412802635271516e-02, 6.044529263608317e-02, 6.044529263608317e-02, 2.907860475174692e-04, 5.723871453085706e-03, 3.532740317605410e-04, 5.514338747182668e-03, 1.158459310578002e-03, 1.158459310578002e-03, 1.482324801440459e-12, 3.395668006457491e-12, 4.340958909849121e-12, 2.389202211518056e-05, 3.364992153250998e-12, 3.364992153250985e-12, 1.421439271043737e-01, 1.237947199054783e-01, 1.314593737752999e-01, 1.371867422995208e-01, 1.344034869334594e-01, 1.344034869334595e-01, 1.382645405803823e-01, 4.572351443416178e-02, 6.509412725510348e-02, 9.223538596595397e-02, 7.758832099969029e-02, 7.758832099969032e-02, 3.467989703318196e-02, 1.093213737616530e-02, 1.956023095566109e-02, 3.591375431596685e-02, 3.044384234307208e-02, 3.044384234307206e-02, 4.152190858677562e-02, 1.283766511984166e-06, 1.026509102663887e-05, 4.729032839208441e-02, 1.999592318238537e-04, 1.999592318238542e-04, 8.064844764012871e-10, 7.874607458363133e-16, 9.165932933633257e-14, 2.129591425887645e-04, 2.223873123426715e-12, 2.223873123426685e-12]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
