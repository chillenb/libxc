
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_regtpss_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_regtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.009582364771797e+01, -2.009589708849527e+01, -2.009625838489071e+01, -2.009505771717390e+01, -2.009586206387123e+01, -2.009586206387123e+01, -3.231447677027206e+00, -3.231450086246061e+00, -3.231638465424438e+00, -3.231823637388105e+00, -3.231463716820366e+00, -3.706498309164481e+00, -6.222218796658344e-01, -7.331842714493459e-01, -7.229677091536358e-01, -7.242759084760952e-01, -7.334453271217783e-01, -7.334453271217783e-01, -2.036958541719115e-01, -2.054666125715833e-01, -7.460313344111710e-01, -1.754455404655079e-01, -2.042368762969290e-01, -2.042368762969290e-01, -1.698393847384648e-02, -1.778343124747381e-02, -6.965952202450312e-02, -8.175258596681860e-03, -1.759799749962212e-02, -1.759799749962212e-02, -5.554299626909557e+00, -5.555347170810707e+00, -5.554410518936323e+00, -5.005910033171149e+00, -5.554831817901666e+00, -5.554831817901666e+00, -1.819130566634197e+00, -1.831454005026876e+00, -1.814166762209670e+00, -1.823777684540150e+00, -1.833894113460214e+00, -2.106882343164301e+00, -6.175265484386110e-01, -6.721564269661623e-01, -5.860965086772838e-01, -6.114173237967143e-01, -6.415775801972168e-01, -5.600234273655015e-01, -9.034845017273073e-02, -2.193113082052404e-01, -8.920040523332891e-02, -2.041481576908750e+00, -1.516383318104770e-01, -1.516383318104770e-01, -4.374038626637283e-03, -9.011293134334674e-03, -6.753448829455155e-03, -5.614852055057515e-02, -4.554696223561278e-03, -8.211156120820910e-03, -6.385748827751180e-01, -6.356879420252867e-01, -6.062433970514282e-01, -6.375783626699975e-01, -6.371823117600063e-01, -6.371823117600063e-01, -6.183179285680015e-01, -5.349962787627172e-01, -5.593719672669064e-01, -5.823900257076265e-01, -5.706541679197903e-01, -5.011793509258448e-01, -7.042570754218571e-01, -2.157229578517837e-01, -3.005635148100506e-01, -3.263242698109700e-01, -3.339713295551905e-01, -3.339713295551904e-01, -4.212768841106611e-01, -6.496141586113890e-02, -8.588326465344728e-02, -3.530900277889984e-01, -7.331119048015025e-02, -1.157545736962258e-01, -1.991604268162350e-02, -2.468798033214433e-03, -4.688720145225114e-03, -1.104690876756659e-01, -6.979071240207631e-03, -6.979071240207620e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_regtpss_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_regtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.831813266504774e+01, -2.831830440774485e+01, -2.831911170112832e+01, -2.831630922494100e+01, -2.831822275643456e+01, -2.831822275643456e+01, -4.276987668574754e+00, -4.276999537899571e+00, -4.277514128702363e+00, -4.277655552549450e+00, -4.277011306861771e+00, -4.510717067846602e+00, -8.264623700089521e-01, -7.843037538582722e-01, -7.465459297110556e-01, -7.597814903527641e-01, -7.852689690127562e-01, -7.852689690127562e-01, -2.095790628007187e-01, -2.138766385841559e-01, -9.957073673405745e-01, -1.611832309413112e-01, -2.108371093162530e-01, -2.108371093162530e-01, -2.246915697579166e-02, -2.350981425546016e-02, -8.560025584319310e-02, -1.088868187793699e-02, -2.326437264049642e-02, -2.326437264049642e-02, -7.063641210962881e+00, -7.066019805204067e+00, -7.063897537324026e+00, -7.217223124659088e+00, -7.064841721300160e+00, -7.064841721300160e+00, -2.405117638997455e+00, -2.421597706934408e+00, -2.398518536830355e+00, -2.411311453183953e+00, -2.424895259813113e+00, -2.521945515939779e+00, -7.701674192543810e-01, -8.490089906939757e-01, -7.230136617642228e-01, -7.658097428133652e-01, -8.042789793550746e-01, -7.578216585369938e-01, -1.207683973352190e-01, -2.019756209469812e-01, -1.192455297824302e-01, -2.560311953293834e+00, -1.413800539287391e-01, -1.413800539287391e-01, -5.832115598703206e-03, -1.199750787273127e-02, -8.989952128583036e-03, -7.495265341336051e-02, -6.073001383357065e-03, -1.093347047676959e-02, -8.349764359627249e-01, -8.207215009587427e-01, -8.535950287383818e-01, -8.293386586590827e-01, -8.273355724855666e-01, -8.273355724855666e-01, -8.043379552298963e-01, -6.655725131174036e-01, -7.027916236146978e-01, -7.373053435792870e-01, -7.194916769735102e-01, -6.979721937006815e-01, -8.866270708464544e-01, -2.875702108240786e-01, -3.264455280479452e-01, -4.314595671501447e-01, -3.861565483798164e-01, -3.861565483798163e-01, -5.579302629421631e-01, -8.090701310905116e-02, -1.021536865272000e-01, -4.309174687744231e-01, -9.796902978661128e-02, -1.207105084583953e-01, -2.637732362887565e-02, -3.291351372479487e-03, -6.247983046348942e-03, -1.152615857655071e-01, -9.294699983624945e-03, -9.294699983624933e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_regtpss_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_regtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.023009205259491e-08, -1.023034110001554e-08, -1.023134681827247e-08, -1.022730686092706e-08, -1.023022381141310e-08, -1.023022381141310e-08, -5.390197302642087e-06, -5.390640378138629e-06, -5.403275952768569e-06, -5.396639858626881e-06, -5.390217719950572e-06, -6.755507211099320e-06, -3.209858185619337e-03, -3.185745062588003e-03, -3.322363623298119e-03, -3.315574660216489e-03, -3.182746361423155e-03, -3.182746361423155e-03, -5.266982957554756e-01, -5.105310439413151e-01, -1.470111084265787e-03, -7.573535674116230e-01, -5.216158914230605e-01, -5.216158914230605e-01, -7.705337038435469e+00, -7.642942484400645e+00, -2.518258941404477e+00, -2.741600127990041e+00, -7.993843373580310e+00, -7.993843373580305e+00, -3.809664044580871e-06, -3.821888473185193e-06, -3.811028585953526e-06, -4.334935464609534e-06, -3.815773405562598e-06, -3.815773405562598e-06, -4.998288814232108e-05, -4.924552151475827e-05, -5.026892520837484e-05, -4.968633525090572e-05, -4.914117673022945e-05, -5.809745657547334e-05, -1.243820293473322e-02, -1.414816447510889e-02, -1.248957977513598e-02, -1.468336019726850e-02, -1.248307610055121e-02, -9.214714035776790e-03, -6.640169013303395e+00, -3.802631827964505e-01, -6.982713027525834e+00, -1.237328306836537e-04, -1.270723478084607e+00, -1.270723478084607e+00, -1.238552635548931e+06, -3.459291187611457e+00, -1.359504208088851e+01, -4.508058816491725e+01, -1.053422475237549e+06, -4.262575515472019e+00, -3.339015605912432e-02, -2.946629689717707e-02, -3.423424594219176e-02, -3.186807973597125e-02, -3.131675772742831e-02, -3.131675772742831e-02, -3.605370851022134e-02, -2.082004435450530e-02, -2.354153384257108e-02, -2.738495325023320e-02, -2.524267596660215e-02, -2.203186545495046e-02, -1.020910856587449e-02, -2.131341972731271e-01, -1.138932037082486e-01, -4.864041694291857e-02, -8.145227781302165e-02, -8.145227781302176e-02, -1.911270621351628e-02, -2.393730113449657e+00, -1.987242400988636e+00, -8.406093939405619e-02, -1.535314499549078e+01, -2.131182239496107e+00, -3.011979058899637e+00, -3.829037282195043e+00, -7.524299500580303e+00, -2.560549954885152e+00, -5.992800952791359e+00, -5.992800952791354e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_regtpss_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_regtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([8.933618425342232e-04, 8.934248875016283e-04, 8.936985411850648e-04, 8.926731567176737e-04, 8.933950675722638e-04, 8.933950675722638e-04, -2.379662723730477e-04, -2.379549633965588e-04, -2.375678427302697e-04, -2.377076454868745e-04, -2.379620093299776e-04, 3.966565189223541e-03, -2.960246773836049e-04, 5.885233478797934e-03, 4.533661673657089e-03, 5.119339329242914e-03, 5.923208941565296e-03, 5.923208941565296e-03, 1.563760277821392e-02, 1.698896763463886e-02, 4.345354004651215e-05, 1.080194866895373e-03, 1.601218861292873e-02, 1.601218861292873e-02, 1.286437345603454e-08, 1.610318029015947e-08, 5.237610748504437e-06, 6.621112092987379e-11, 1.634723460791890e-08, 1.634723460792073e-08, 8.708892812922538e-03, 8.737304695780160e-03, 8.712041618236887e-03, 7.869445742228247e-03, 8.723128108665155e-03, 8.723128108665155e-03, -3.915450306140311e-04, -4.009763783443112e-04, -3.864666646496379e-04, -3.951248816515889e-04, -4.031427702715573e-04, 5.598545415583051e-03, 3.926820582594018e-02, 5.863526966438024e-02, 3.167768058777472e-02, 4.577075404488947e-02, 4.506810568362907e-02, 5.284780762844366e-03, 1.819613353382860e-04, 4.727448791876345e-03, 2.022471907064031e-04, 1.440715730356297e-02, 9.137961514247368e-04, 9.137961514247368e-04, 5.510753280667597e-08, 1.532682640060441e-10, 2.827624954618843e-10, 5.398377144878606e-05, 6.346057394682308e-08, 1.315501510624156e-10, 1.077952636816039e-01, 9.654767669591408e-02, 1.259328264710754e-01, 1.035239098871229e-01, 1.019492762576502e-01, 1.019492762576502e-01, 1.068089235994358e-01, 4.220425128635179e-02, 5.655326886861330e-02, 7.330937507005691e-02, 6.428257065452585e-02, 2.449437107089048e-02, 4.895716122723556e-02, -3.542056261887917e-05, 1.616397030187109e-02, -2.227213342528116e-03, 2.459934349314438e-02, 2.459934349314438e-02, -1.777340770486241e-03, 3.073404258046366e-06, 1.347986847687034e-05, 4.348139645637106e-02, 1.729211021778178e-04, 1.798320273793094e-04, 6.899565510186475e-09, 2.719679263046509e-13, 1.859378139878054e-11, 1.866785654342843e-04, 9.709436687718410e-11, 9.709436687726234e-11])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
