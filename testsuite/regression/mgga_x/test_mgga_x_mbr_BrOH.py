
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mbr_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbr", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.075272355020628e+01, -2.075273074487696e+01, -2.075285271122566e+01, -2.075273237016995e+01, -2.075272660266283e+01, -2.075272660266283e+01, -3.543515620537924e+00, -3.543449995805284e+00, -3.541720914217195e+00, -3.544328249248348e+00, -3.543503591609582e+00, -3.543503591609582e+00, -7.377846637945082e-01, -7.379620836857670e-01, -7.432838095994889e-01, -7.456364793929051e-01, -7.378422476876263e-01, -7.378422476876263e-01, -2.253199750170811e-01, -2.262271226083901e-01, -8.849434850275826e-01, -1.942160760919956e-01, -2.255772550586920e-01, -2.255772550586920e-01, -5.551596207532471e-02, -5.628718588265418e-02, -1.071548140650952e-01, -5.082611480511343e-02, -5.571865044195737e-02, -5.571865044195737e-02, -4.941349061556717e+00, -4.939866049948487e+00, -4.941202080335614e+00, -4.940049021400523e+00, -4.940581300753530e+00, -4.940581300753530e+00, -2.176967216151733e+00, -2.184735604594968e+00, -2.178976250285588e+00, -2.185012820975109e+00, -2.179484007055880e+00, -2.179484007055880e+00, -5.766334021010746e-01, -5.809629166863932e-01, -5.535955642633568e-01, -5.406436730578944e-01, -5.904610152902354e-01, -5.904610152902354e-01, -1.656747182089676e-01, -2.484334093648621e-01, -1.616133866618348e-01, -1.777866881413595e+00, -1.739766065596065e-01, -1.739766065596065e-01, -4.865377580719484e-02, -5.083142990794509e-02, -3.808148501630820e-02, -1.255805785121590e-01, -4.672683567356272e-02, -4.672683567353276e-02, -5.364511077268883e-01, -5.430515603690419e-01, -5.407642654176598e-01, -5.389407952554369e-01, -5.398588895841582e-01, -5.398588895841582e-01, -5.180583486407776e-01, -5.241510407843917e-01, -5.237456347323340e-01, -5.214244512740166e-01, -5.224972713017116e-01, -5.224972713017116e-01, -6.121983043133318e-01, -2.927486136049959e-01, -3.270747364571664e-01, -3.780915199461118e-01, -3.508645406334808e-01, -3.508645406335346e-01, -4.797117385110592e-01, -1.060159360415461e-01, -1.209417909886384e-01, -3.438782207540234e-01, -1.398827648474340e-01, -1.398827648474878e-01, -6.350283794516612e-02, -3.579737090474650e-02, -3.961196687593484e-02, -1.332556783700339e-01, -4.192918721939322e-02, -4.192918721939320e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mbr_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbr", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.350962757741159e+01, -2.350971325635334e+01, -2.351010088860996e+01, -2.350869820026752e+01, -2.350967271176230e+01, -2.350967271176230e+01, -3.791317191305819e+00, -3.791316645654889e+00, -3.791447222595472e+00, -3.791726151728548e+00, -3.791334865524468e+00, -3.791334865524468e+00, -7.560097923960810e-01, -7.558067192115763e-01, -7.507323650381735e-01, -7.538469545161038e-01, -7.559304615713182e-01, -7.559304615713182e-01, -2.181154669080888e-01, -2.200245230946773e-01, -9.141838976816322e-01, -1.727604453203878e-01, -2.186888444525009e-01, -2.186888444525009e-01, -2.768783162847139e-02, -2.836201304989291e-02, -7.230924528356474e-02, -2.311875530551245e-02, -2.805959604967169e-02, -2.805959604967169e-02, -5.819899309734030e+00, -5.823093110490836e+00, -5.820226664931343e+00, -5.822709852211895e+00, -5.821535106838729e+00, -5.821535106838729e+00, -2.204301053726809e+00, -2.214896391739477e+00, -2.202685170002955e+00, -2.210911798422888e+00, -2.213507272688723e+00, -2.213507272688723e+00, -6.333425340551444e-01, -7.232140858883103e-01, -6.001184446355088e-01, -6.479998980829422e-01, -6.610129479712238e-01, -6.610129479712238e-01, -1.350540262347442e-01, -2.292375938255801e-01, -1.325949680136004e-01, -2.190920313853109e+00, -1.492020667618242e-01, -1.492020667618242e-01, -2.140849666566294e-02, -2.317729734555826e-02, -1.686708080282850e-02, -9.325027583283158e-02, -2.163226072189217e-02, -2.163226072194933e-02, -7.019443447507264e-01, -6.884127205471867e-01, -6.931225022633759e-01, -6.968429754173335e-01, -6.949704036605102e-01, -6.949704036605102e-01, -6.809798139280404e-01, -5.483335621849893e-01, -5.717895829128494e-01, -6.080063582965123e-01, -5.879387640760916e-01, -5.879387640760915e-01, -7.554203089617655e-01, -2.795173519491383e-01, -3.220180843192583e-01, -3.891698051611284e-01, -3.534487390564088e-01, -3.534487390560518e-01, -4.979907724834314e-01, -6.912194704174862e-02, -8.592052189758545e-02, -3.619769267626163e-01, -1.114430464032234e-01, -1.114430464031156e-01, -3.344368223389674e-02, -1.477740561901014e-02, -1.614224811748762e-02, -1.063136324528206e-01, -1.928189507887373e-02, -1.928189507887368e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbr_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbr", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-9.417301650631796e-09, -9.417267273316502e-09, -9.416960617612222e-09, -9.417526241654331e-09, -9.417284805999368e-09, -9.417284805999368e-09, -1.169877670946205e-05, -1.169977196404972e-05, -1.172570123670060e-05, -1.167963454242159e-05, -1.169903890953998e-05, -1.169903890953998e-05, -5.573731802636783e-03, -5.553270610718138e-03, -5.045913185541034e-03, -4.997568270244221e-03, -5.566534396132998e-03, -5.566534396132998e-03, -5.348206043989604e-01, -5.294705765482337e-01, -2.929571530826710e-03, -1.001939505609600e+00, -5.333528308942331e-01, -5.333528308942331e-01, -1.651275404436914e+03, -1.449313509913608e+03, -2.213473033534056e+01, -1.111674669726812e+04, -1.510490457157901e+03, -1.510490457157900e+03, -2.826415612688853e-06, -2.827459583801557e-06, -2.826503801711850e-06, -2.827316125680331e-06, -2.826979044409370e-06, -2.826979044409370e-06, -6.870481256360326e-05, -6.805695798532819e-05, -6.800033564240810e-05, -6.749979285669353e-05, -6.922051505315206e-05, -6.922051505315206e-05, -1.646516864022507e-02, -1.516570512430608e-02, -1.963380276406897e-02, -2.125640183234003e-02, -1.482732798578549e-02, -1.482732798578549e-02, -2.168251904028665e+00, -3.569847888423924e-01, -2.361193565685313e+00, -1.823445293357122e-04, -1.609474586355505e+00, -1.609474586355505e+00, -1.298549285856088e+04, -8.738155496137280e+03, -2.770295147658659e+04, -8.715700980706465e+00, -1.250775761848854e+04, -1.250775761845867e+04, -2.011489817102277e-02, -1.850430745331139e-02, -1.890115459479853e-02, -1.932499435646907e-02, -1.909787238424586e-02, -1.909787238424586e-02, -2.371015462442064e-02, -2.267739796686324e-02, -2.358573388998580e-02, -2.322896055344947e-02, -2.363632721664590e-02, -2.363632721664592e-02, -1.256153073632836e-02, -1.853033726429756e-01, -1.236817698793944e-01, -8.102760292608210e-02, -9.987434526081768e-02, -9.987434526119214e-02, -3.201989634684752e-02, -2.613152824432807e+01, -1.131606465468001e+01, -1.266834913691981e-01, -4.477638367713165e+00, -4.477638367723868e+00, -9.128422594886280e+02, -3.877201155093057e+05, -6.487864382133094e+04, -5.428389591590975e+00, -2.205461717745059e+04, -2.205461717745070e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbr_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbr", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-2.587867581329688e-04, -2.587857081245607e-04, -2.587810762383169e-04, -2.587982562482157e-04, -2.587862040524708e-04, -2.587862040524708e-04, -1.523830482493042e-03, -1.523899563259222e-03, -1.525794686748613e-03, -1.523308955113534e-03, -1.523852966625475e-03, -1.523852966625475e-03, -5.966602225569123e-03, -5.942564206213571e-03, -5.330028614176496e-03, -5.386560115798458e-03, -5.958056826966675e-03, -5.958056826966675e-03, -1.436820661209070e-02, -1.464483451971493e-02, -4.962447956254045e-03, -1.165302345162489e-02, -1.445376149775272e-02, -1.445376149775272e-02, -1.097314251425111e-02, -1.105776842204332e-02, -1.074208477682304e-02, -8.240019635248492e-03, -1.116819712089060e-02, -1.116819712089060e-02, -1.020541730557209e-03, -1.019031045408193e-03, -1.020388505803725e-03, -1.019214069667640e-03, -1.019768280054446e-03, -1.019768280054446e-03, -1.985485044152060e-03, -1.999045542051067e-03, -1.961340990897171e-03, -1.972006613682872e-03, -2.026843236762617e-03, -2.026843236762617e-03, -9.511632184397460e-03, -7.476177551972209e-03, -9.880876049213116e-03, -9.003877332713503e-03, -9.207575496797470e-03, -9.207575496797470e-03, -1.080061582252609e-02, -1.063988467976178e-02, -1.126293623022406e-02, -2.534765855434537e-03, -1.190108152326431e-02, -1.190108152326431e-02, -8.642410548450198e-03, -8.671558298372488e-03, -1.157760025433106e-02, -1.106205687113223e-02, -9.388957116426502e-03, -9.388957116404082e-03, -6.528119542798529e-03, -7.432067966286317e-03, -7.124662313494624e-03, -6.874520885277382e-03, -7.000986913429342e-03, -7.000986913429342e-03, -6.624023286886209e-03, -9.894238226750451e-03, -1.047300280783709e-02, -9.868788427889456e-03, -1.035210643335517e-02, -1.035210643335518e-02, -7.315278463869879e-03, -1.040468023423527e-02, -1.085859922983124e-02, -1.258329048112065e-02, -1.176002476167143e-02, -1.176002476171554e-02, -1.044087064881245e-02, -1.017197258911658e-02, -1.063253778759232e-02, -1.522782914229849e-02, -1.210852221669112e-02, -1.210852221672008e-02, -9.747681255798699e-03, -7.937813815966565e-03, -9.088419263497859e-03, -1.273610503172429e-02, -1.016788694184922e-02, -1.016788694184922e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
