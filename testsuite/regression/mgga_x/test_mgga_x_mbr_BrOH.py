
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mbr_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbr", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.911809980330358e+01, -1.911814119088833e+01, -1.911836047110516e+01, -1.911768152786810e+01, -1.911812134676921e+01, -1.911812134676921e+01, -3.175683400686816e+00, -3.175666432474736e+00, -3.175272008070675e+00, -3.175677903687764e+00, -3.175693795730318e+00, -3.817341421828325e+00, -6.346625094405860e-01, -8.149027895778002e-01, -8.109999132942772e-01, -8.093363105375155e-01, -8.149831549028784e-01, -8.149831549028784e-01, -2.286897093313342e-01, -2.300437735640314e-01, -7.921147440225108e-01, -2.050972933558272e-01, -2.291211202795248e-01, -2.291211202795248e-01, -5.579800322223389e-02, -5.664707857254373e-02, -1.102416561445001e-01, -5.586750097823414e-02, -5.602732979537409e-02, -5.602732979537409e-02, -4.943073326916861e+00, -4.941571903686622e+00, -4.942902549125333e+00, -4.644737577193327e+00, -4.942325619260495e+00, -4.942325619260495e+00, -1.799458426749165e+00, -1.809177756792239e+00, -1.795676991412381e+00, -1.803166107141725e+00, -1.810973547060956e+00, -2.210939492668217e+00, -6.034065931897177e-01, -6.159455995959898e-01, -5.900598680391367e-01, -5.869312500778374e-01, -6.132988683451419e-01, -5.423451744038366e-01, -1.247621548856728e-01, -2.512372181945074e-01, -1.219036067914359e-01, -1.947178346534753e+00, -1.782868857450640e-01, -1.782868857450640e-01, -3.182544382723085e-02, -5.466207103305537e-02, -3.932547079046059e-02, -9.409668007072741e-02, -3.205548232441174e-02, -5.138335840160339e-02, -5.409407369347482e-01, -5.470667914896866e-01, -5.304692339942221e-01, -5.432210656201820e-01, -5.440748790368608e-01, -5.440748790368608e-01, -5.267701973389358e-01, -5.271694190046746e-01, -5.284171527700547e-01, -5.276425294187802e-01, -5.282415509168080e-01, -4.798370484598511e-01, -6.575462709464260e-01, -2.259177186350003e-01, -3.324911467927088e-01, -3.225135059906310e-01, -3.595467144260068e-01, -3.595467144259295e-01, -4.133483502467140e-01, -1.078171408247333e-01, -1.250433596937179e-01, -3.622016382536090e-01, -1.042173577637596e-01, -1.440306759416889e-01, -6.902573070257763e-02, -4.093607867743257e-02, -4.058007659707389e-02, -1.375057985925926e-01, -4.634311511119173e-02, -4.634311511120751e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mbr_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbr", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.518073602083572e+01, -2.518079946087137e+01, -2.518112727980434e+01, -2.518008776716065e+01, -2.518076909940505e+01, -2.518076909940505e+01, -4.063403561554652e+00, -4.063427777656782e+00, -4.064299079360042e+00, -4.064286946829064e+00, -4.063429612774267e+00, -3.883707940334264e+00, -7.603564171854169e-01, -7.909552275264353e-01, -7.785855953909628e-01, -7.808426409561711e-01, -7.912446267332415e-01, -7.912446267332415e-01, -2.192961068132526e-01, -2.214093234326451e-01, -8.970506379061755e-01, -1.747736196316834e-01, -2.199434474849430e-01, -2.199434474849430e-01, -2.770894200377401e-02, -2.838926351713096e-02, -7.263272254801324e-02, -2.327551178973076e-02, -2.808302813123949e-02, -2.808302813123946e-02, -5.818284178948405e+00, -5.821489235160885e+00, -5.818633184874238e+00, -6.142800097320579e+00, -5.819898066737209e+00, -5.819898066737209e+00, -2.274548978966453e+00, -2.292665798064102e+00, -2.267113496367105e+00, -2.281331494382255e+00, -2.296397300774211e+00, -2.229475073585701e+00, -6.322034584789348e-01, -6.915833514444877e-01, -6.070640051631776e-01, -6.237843411052865e-01, -6.543403514750582e-01, -7.089836007501767e-01, -1.268275993667453e-01, -2.299417094655477e-01, -1.243151337920719e-01, -2.081905509796667e+00, -1.499596780181273e-01, -1.499596780181273e-01, -2.296685422892883e-02, -2.332919738484787e-02, -1.692877341464299e-02, -8.989744366344725e-02, -2.321469180703864e-02, -2.178916429405893e-02, -6.970519075932881e-01, -6.842335353953048e-01, -7.050831174476389e-01, -6.923235311131044e-01, -6.905456550051744e-01, -6.905456550051744e-01, -6.714558790186252e-01, -5.491704802327076e-01, -5.706198940865571e-01, -6.028504108261654e-01, -5.847290659717578e-01, -6.308886333017087e-01, -7.198063608011820e-01, -2.602784928681151e-01, -3.242222371473808e-01, -4.083278928402065e-01, -3.576706413763235e-01, -3.576706413767317e-01, -5.304516108428221e-01, -6.930812393985770e-02, -8.637915881469088e-02, -3.691950094514798e-01, -1.049878637435210e-01, -1.120299840824228e-01, -3.375265670741858e-02, -1.476807376676743e-02, -1.617995982262130e-02, -1.069136268925539e-01, -1.941747440295525e-02, -1.941747440292326e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbr_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbr", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.470482561273315e-08, -1.470465223280366e-08, -1.470377647341620e-08, -1.470661464764509e-08, -1.470473507349191e-08, -1.470473507349191e-08, -2.410844573305506e-05, -2.410714103397401e-05, -2.406455316880570e-05, -2.407332559362743e-05, -2.410762484164883e-05, -7.396859999855290e-06, -2.135961252931559e-02, -3.128810010375977e-03, -3.153522313531915e-03, -3.193733367422443e-03, -3.128658116959589e-03, -3.128658116959589e-03, -4.983146377929814e-01, -4.881713313560245e-01, -1.069926397110203e-02, -8.308836614975913e-01, -4.949793004546153e-01, -4.949793004546153e-01, -1.637170865649324e+03, -1.433656744556748e+03, -2.079581371147406e+01, -9.626730705884405e+03, -1.496335764574860e+03, -1.496335764574860e+03, -2.823385630533522e-06, -2.824463724628480e-06, -2.823515869185994e-06, -4.067160655036797e-06, -2.823914751642161e-06, -2.823914751642161e-06, -2.527028775988456e-04, -2.435006413643375e-04, -2.566393922709017e-04, -2.492373860384345e-04, -2.415871643946263e-04, -6.350593230895218e-05, -1.292012045829725e-02, -1.216314578108690e-02, -1.349592385211541e-02, -1.471195165115566e-02, -1.238127323111243e-02, -2.420033920077561e-02, -2.035971277728524e+01, -3.413646774099639e-01, -2.217567704964598e+01, -1.220377116008265e-04, -1.486858838248613e+00, -1.486858838248613e+00, -1.259889721923846e+05, -7.812128443432041e+03, -2.636048945339649e+04, -7.790468312742777e+01, -1.130348590592258e+05, -1.080725498181557e+04, -1.875865188792279e-02, -1.785440432073535e-02, -2.279104386010459e-02, -1.832360225647101e-02, -1.819518223933699e-02, -1.819518223933699e-02, -2.072291649045670e-02, -2.192361713962299e-02, -2.260956291114049e-02, -2.232783695576840e-02, -2.262390801967403e-02, -3.763164612442681e-02, -9.443563091980323e-03, -1.535468578256096e+00, -1.136372589378394e-01, -2.424829790874361e-01, -8.676510003657935e-02, -8.676510003621510e-02, -8.234116571223246e-02, -2.521137124594021e+01, -1.046841078536242e+01, -9.193149092162381e-02, -4.279492091272731e+01, -4.127407496416301e+00, -7.927782652633798e+02, -3.211201403778876e+05, -6.260601562827428e+04, -4.973206415068433e+00, -1.892773359260977e+04, -1.892773359263354e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbr_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbr", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.817935860991154e-04, -1.817927664336203e-04, -1.817888198833026e-04, -1.818022094809612e-04, -1.817931567591704e-04, -1.817931567591704e-04, -1.286155472031064e-03, -1.286093965298657e-03, -1.284202698825438e-03, -1.284831290655502e-03, -1.286132279459461e-03, -1.181891550568504e-03, -8.025998886413232e-03, -4.069923434184579e-03, -3.871270754721544e-03, -3.973841879547648e-03, -4.075249645451397e-03, -4.075249645451397e-03, -1.365364539915089e-02, -1.381544493917958e-02, -6.921025125683380e-03, -1.007018868186060e-02, -1.369683435425129e-02, -1.369683435425129e-02, -1.088153876959291e-02, -1.094116581714235e-02, -1.014854503593423e-02, -7.144172758582201e-03, -1.106604076982301e-02, -1.106604076982301e-02, -1.021500404125819e-03, -1.019992993756468e-03, -1.021335379824356e-03, -7.277173890620851e-04, -1.020745125420631e-03, -1.020745125420631e-03, -2.395169663308381e-03, -2.357077343973649e-03, -2.411754994688079e-03, -2.381158739131609e-03, -2.348400039470778e-03, -1.914050154991255e-03, -8.642292725094602e-03, -8.796336463247142e-03, -8.200686439811615e-03, -9.164748638853092e-03, -8.818703263817187e-03, -6.719334345675198e-03, -2.367193415865082e-02, -1.028680307770409e-02, -2.480456877508481e-02, -2.784697109416879e-03, -1.117097797307515e-02, -1.117097797307515e-02, -1.673698110471418e-02, -7.760967358757759e-03, -1.102179096018759e-02, -2.182737743116017e-02, -1.695455164865022e-02, -8.123847053701248e-03, -6.948188335316189e-03, -7.765842201680934e-03, -6.145505733553673e-03, -7.261130085768924e-03, -7.375859945533304e-03, -7.375859945533304e-03, -7.483244959534994e-03, -9.710303526669663e-03, -1.034660163752675e-02, -1.007022140667822e-02, -1.035507701036954e-02, -7.327040761012162e-03, -8.342230303052247e-03, -2.401172410849251e-02, -1.022715767581149e-02, -1.327354157484079e-02, -1.068475051604097e-02, -1.068475051599611e-02, -9.743406922523647e-03, -9.841626183694396e-03, -9.918921448985240e-03, -1.261837371560866e-02, -2.660567733871441e-02, -1.130843147996691e-02, -8.494402165677617e-03, -6.577285502715788e-03, -8.771673892498413e-03, -1.183397125816331e-02, -8.738087737575041e-03, -8.738087737585968e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
