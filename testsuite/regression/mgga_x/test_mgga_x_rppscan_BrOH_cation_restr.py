
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_rppscan_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rppscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.172613008252428e+01, -2.172624992650703e+01, -2.172677757071514e+01, -2.172499855392238e+01, -2.172593141320192e+01, -2.172593141320192e+01, -3.049019165575267e+00, -3.049129427684341e+00, -3.052102802751977e+00, -3.051174485611835e+00, -3.050956798211441e+00, -3.766325441934736e+00, -5.319492414163302e-01, -7.194181627176343e-01, -6.985863068674087e-01, -7.052126301367840e-01, -7.037928610605996e-01, -7.037928610605996e-01, -1.844445176345545e-01, -1.874540182037779e-01, -5.956302415363475e-01, -1.361348958646294e-01, -1.550772367155599e-01, -1.550772367155599e-01, -3.266592248877516e-03, -3.512129854117033e-03, -2.983887182016579e-02, -1.499012184282194e-03, -2.117620244635245e-03, -2.117620244635245e-03, -5.669020238107875e+00, -5.670113867240779e+00, -5.669075127231132e+00, -5.439438035592429e+00, -5.669572219297150e+00, -5.669572219297150e+00, -1.672988748619095e+00, -1.693451595733524e+00, -1.657559604720791e+00, -1.675810030956670e+00, -1.691829883854828e+00, -2.130338031114095e+00, -6.372884967710133e-01, -6.936736504139552e-01, -5.885323787494607e-01, -6.130235478238717e-01, -6.478475773775266e-01, -5.731042375449212e-01, -6.695256595206163e-02, -1.823822910979960e-01, -6.187657095235120e-02, -2.086482294341687e+00, -1.096591404144310e-01, -1.096591404144310e-01, -1.955295467197225e-03, -1.435447759839265e-03, -1.209202939332979e-03, -4.147936162524839e-02, -2.282112994591035e-03, -1.427901351070340e-03, -6.423222446650778e-01, -6.385457484253162e-01, -6.297777672202443e-01, -6.409770585945976e-01, -6.404297020408238e-01, -6.404297020408238e-01, -6.249027054028327e-01, -5.342430517468889e-01, -5.604301062593527e-01, -5.862388968371893e-01, -5.730819819835090e-01, -5.261435056323562e-01, -7.269126642340168e-01, -1.671884605208346e-01, -2.819955461907219e-01, -2.964415823177688e-01, -3.257144272995348e-01, -3.257144272995348e-01, -3.998982047155473e-01, -2.831373003341612e-02, -4.085366351593658e-02, -3.631370888591166e-01, -5.297767414868952e-02, -7.101296358457464e-02, -4.869645795054215e-03, -2.266195359241893e-04, -7.258370710918887e-04, -6.631515269511654e-02, -1.326719251986705e-03, -1.326719251986691e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_rppscan_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rppscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.215405187643807e+01, -3.215410172224734e+01, -3.215436701721547e+01, -3.215362179932831e+01, -3.215400613991980e+01, -3.215400613991980e+01, -4.725048175123906e+00, -4.725388594198173e+00, -4.734518764433544e+00, -4.731240740688443e+00, -4.731099566728075e+00, -4.710092838239693e+00, -8.108167493030147e-01, -8.404908482198051e-01, -7.982963367925172e-01, -8.145446952999098e-01, -8.109794556912950e-01, -8.109794556912950e-01, -1.990086053505011e-01, -2.047405977014740e-01, -8.434900157198791e-01, -9.171118512361322e-02, -1.396065738532314e-01, -1.396065738532316e-01, 1.594051982995862e-01, 1.672467916993805e-01, 2.402307739812575e-01, 8.448206555753075e-02, 1.133138715924547e-01, 1.133138715924547e-01, -7.413539612188903e+00, -7.415922081690316e+00, -7.413666216135348e+00, -7.727989697461619e+00, -7.414738577128650e+00, -7.414738577128650e+00, -2.565090869975836e+00, -2.591907799414922e+00, -2.548978782170624e+00, -2.568600263056330e+00, -2.589526863340618e+00, -2.635466080529199e+00, -8.145165720487298e-01, -9.019846859603394e-01, -7.412006995899040e-01, -7.839067098593796e-01, -8.309098818784136e-01, -9.052530505931938e-01, -9.014332709384192e-02, -1.669808550293170e-01, -8.320090711418213e-02, -2.681410060339267e+00, -5.053242417902733e-02, -5.053242417902767e-02, -2.607083341790965e-03, 8.140719029233241e-02, 6.613654352697439e-02, -5.554007224762607e-02, -3.042889248951620e-03, 7.880963733986043e-02, -8.512269330967667e-01, -8.417759486833671e-01, -8.585965149922017e-01, -8.477893479464410e-01, -8.464114758127937e-01, -8.464114758127937e-01, -8.275098312977200e-01, -6.772037832743147e-01, -7.202690794665735e-01, -7.627800110852594e-01, -7.410623508233112e-01, -7.986096463841377e-01, -9.411184761415859e-01, -2.373390853184147e-01, -3.232052815654699e-01, -4.552944125999168e-01, -3.914212316701505e-01, -3.914212316701505e-01, -6.238288165429743e-01, 2.469636504686072e-01, 1.950216490930400e-01, -4.558506291962351e-01, -7.121108445698486e-02, 4.166556683049614e-02, 2.217954340714088e-01, 1.353605539649531e-02, 4.212040293901223e-02, 5.045963199820913e-02, 7.309378788330644e-02, 7.309378788332237e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rppscan_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rppscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.426031391725293e-08, -1.425999408744536e-08, -1.425858781065106e-08, -1.426333515206560e-08, -1.426084559830846e-08, -1.426084559830846e-08, -1.452118855846948e-05, -1.452541997387297e-05, -1.463703501197456e-05, -1.458639037378744e-05, -1.459786944445650e-05, -6.785685059514717e-06, -9.898106535385733e-03, -4.558724578765515e-03, -5.022081005546059e-03, -4.882540571194654e-03, -4.911294978832140e-03, -4.911294978832140e-03, -9.911099684771795e-01, -9.363291551573070e-01, -5.449754149621996e-03, -2.837423616569906e+00, -1.822409338588747e+00, -1.822409338588745e+00, -6.436099190010432e+04, -5.916386285815941e+04, -4.075527303927772e+02, -1.510282282757702e+05, -1.206317792597022e+05, -1.206317792597022e+05, -1.673468847749774e-06, -1.674006232247716e-06, -1.673509231216561e-06, -3.459186198717766e-06, -1.673732920579308e-06, -1.673732920579308e-06, -1.233934884275195e-04, -1.216066309632408e-04, -1.255297487934467e-04, -1.229825537993450e-04, -1.218043601275033e-04, -6.451419192499513e-05, -8.983230911805095e-03, -7.128701059114681e-03, -1.162978873916400e-02, -1.051917076410630e-02, -8.565738391510968e-03, -2.584376137948021e-02, -3.037759936406662e+01, -9.584900017312925e-01, -4.154472307141872e+01, -8.051017492920160e-05, -6.347487003553203e+00, -6.347487003553201e+00, -4.108027853864782e+07, -1.464341388079094e+05, -7.573845436491565e+05, -2.042448101869423e+02, -2.213832255404156e+07, -3.197066512652150e+05, -1.145657490084037e-02, -1.116966173426647e-02, -1.608052346510822e-02, -1.134614773440525e-02, -1.130334228930997e-02, -1.130334228930997e-02, -1.269860952764047e-02, -1.753650200566092e-02, -1.547270690482927e-02, -1.404419851532533e-02, -1.470373561395713e-02, -4.088358359739541e-02, -5.727356261851824e-03, -8.840078505554834e-01, -1.896350570871873e-01, -1.235278120327191e-01, -1.122014629108233e-01, -1.122014629108234e-01, -5.308240899655964e-02, -4.754555215195888e+02, -1.562626170191837e+02, -7.940120883298915e-02, -7.726640339614480e+01, -2.901694375144428e+01, -2.207351977393916e+04, -1.409337518515838e+06, -8.032288715033322e+05, -3.704005571727464e+01, -4.468363578582698e+05, -4.468363578583655e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rppscan_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rppscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.867981114282363e-03, 1.867964132947787e-03, 1.867891757138468e-03, 1.868143510024197e-03, 1.868011193363207e-03, 1.868011193363207e-03, 4.959700729314643e-03, 4.962432881048541e-03, 5.035207615507638e-03, 5.005149735100366e-03, 5.008880546153185e-03, 4.893171910584207e-03, 9.692351241737293e-03, 2.353313060074698e-02, 2.387719977633794e-02, 2.381486797117985e-02, 2.382555889380626e-02, 2.382555889380626e-02, 8.786390532463936e-02, 8.691344637437004e-02, 2.000903928712116e-03, 1.079117884161342e-01, 9.905484022282987e-02, 9.905484022282959e-02, 2.246396918483298e-01, 2.407994471640221e-01, 2.806700473931072e-01, 1.015294094523771e-01, 1.609047016723033e-01, 1.609047016723033e-01, 3.907131467917636e-03, 3.909615354681529e-03, 3.907279898584379e-03, 6.898090578229573e-03, 3.908372562217542e-03, 3.908372562217542e-03, 6.444665185504566e-03, 6.611704208053432e-03, 6.388384005464541e-03, 6.456158575539636e-03, 6.600769564326592e-03, 8.469638564684296e-03, 3.083720849369630e-02, 3.082339170367600e-02, 3.184862605210832e-02, 3.212256072953001e-02, 3.077067069702666e-02, 6.575191726757819e-02, 4.767227085086332e-04, 8.453731260998389e-02, 3.876825514916109e-04, 9.638488954944853e-03, 1.297668458447188e-01, 1.297668458447185e-01, 1.319529482522019e-08, 9.196992143612212e-02, 2.126687796274542e-01, 1.457590389531562e-04, 8.317486419839577e-08, 1.569508129572073e-01, 3.767064366844605e-02, 3.658767287810098e-02, 4.882398341651540e-02, 3.726763149256607e-02, 3.710821388356254e-02, 3.710821388356254e-02, 3.852732569388766e-02, 3.574156025994323e-02, 3.589336261030691e-02, 3.661265953525764e-02, 3.617036382317443e-02, 7.769002360404179e-02, 2.870025941486277e-02, 7.713610127968166e-03, 5.925952071975204e-02, 3.591946007236550e-02, 5.328359120647295e-02, 5.328359120647299e-02, 4.199143748605003e-02, 2.869469270558056e-01, 2.400238761099727e-01, 5.119504512560871e-02, 4.172826210113685e-04, 1.797040209738116e-01, 2.165971712125523e-01, 1.691034096560274e-02, 8.911487418292055e-02, 1.896617715274582e-01, 1.737906077178085e-01, 1.737906077178451e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
