
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_rppscan_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rppscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.318402601422430e+01, -2.318409491707832e+01, -2.318445104998047e+01, -2.318342691995920e+01, -2.318395642935758e+01, -2.318395642935758e+01, -3.411886593223258e+00, -3.412010738660331e+00, -3.415576240543317e+00, -3.416710345919019e+00, -3.415282127533010e+00, -3.415282127533010e+00, -5.977799480984227e-01, -5.971068583725831e-01, -5.816462067427038e-01, -5.924124773790771e-01, -5.894220578569589e-01, -5.894220578569589e-01, -1.799458386439616e-01, -1.820116127615999e-01, -6.570265910681742e-01, -1.147106001128695e-01, -1.369949532737647e-01, -1.369949532737647e-01, -2.639102248093466e-03, -2.816749909023319e-03, -2.408306823269310e-02, -1.214941560493872e-03, -1.701793684148702e-03, -1.701793684148702e-03, -5.668012034177607e+00, -5.669117146663148e+00, -5.668087928836437e+00, -5.669062543048156e+00, -5.668559326400749e+00, -5.668559326400749e+00, -2.078205758258718e+00, -2.101032084226251e+00, -2.071520655493619e+00, -2.091892929624224e+00, -2.094230500320454e+00, -2.094230500320454e+00, -6.163011701720450e-01, -6.693655154190031e-01, -5.467049164407310e-01, -5.603016165859630e-01, -6.285247554284548e-01, -6.285247554284548e-01, -7.451563504439111e-02, -1.732804915730962e-01, -6.808989176894389e-02, -1.922549643535541e+00, -9.445945966174438e-02, -9.445945966174438e-02, -8.701484256996419e-04, -1.195201285690089e-03, -9.823861066508854e-04, -4.328895640094615e-02, -1.180783096997927e-03, -1.180783096997927e-03, -6.398850721486693e-01, -6.362857438166774e-01, -6.375620981762485e-01, -6.386049427255756e-01, -6.380826049305269e-01, -6.380826049305269e-01, -6.199930110822272e-01, -5.320848417344444e-01, -5.575523964058671e-01, -5.825770002492388e-01, -5.696311444515790e-01, -5.696311444515790e-01, -6.928361622000905e-01, -2.285223672943337e-01, -2.725742977303358e-01, -3.528562961057342e-01, -3.128341934073490e-01, -3.128341934073490e-01, -4.774532089322240e-01, -2.286732030530454e-02, -3.306546731585833e-02, -3.457345342048175e-01, -5.836113950503773e-02, -5.836113950503773e-02, -4.036066602476051e-03, -2.203061929788944e-04, -5.832062030677757e-04, -5.519170817157452e-02, -1.085040513523600e-03, -1.085040513523600e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_rppscan_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rppscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.019282658176949e+01, -3.019293365974172e+01, -3.019341991532814e+01, -3.019182776046889e+01, -3.019266055025280e+01, -3.019266055025280e+01, -4.801545976547851e+00, -4.801663534235152e+00, -4.804712582572669e+00, -4.802881656249882e+00, -4.803018213489559e+00, -4.803018213489559e+00, -8.277058074425783e-01, -8.266065416322982e-01, -8.018452634136385e-01, -8.141671166866477e-01, -8.110496640138346e-01, -8.110496640138346e-01, -1.771565187708969e-01, -1.821687439255218e-01, -8.563656214375073e-01, -1.427244029960431e-01, -1.447008852677732e-01, -1.447008852677731e-01, 1.542289084649588e-03, -3.147633683719690e-03, -3.748316323049091e-02, -2.226990896988119e-03, -3.051914142346798e-03, -3.051914142346799e-03, -7.413953788494656e+00, -7.416337183850529e+00, -7.414072010904781e+00, -7.416175639720880e+00, -7.415157591339952e+00, -7.415157591339952e+00, -2.561433932776139e+00, -2.596915426518255e+00, -2.541972895605974e+00, -2.575124047999069e+00, -2.590691310691391e+00, -2.590691310691391e+00, -8.192505739618804e-01, -9.253455624491663e-01, -7.533418312166948e-01, -8.248438309986695e-01, -8.365013086678337e-01, -8.365013086678337e-01, -1.010812365852142e-01, -1.175303968083465e-01, -9.502032517374374e-02, -2.833147346282464e+00, -9.219164044788385e-02, -9.219164044788461e-02, -1.613987219171140e-03, -2.198269674343192e-03, -1.787461809159920e-03, -6.421161992947294e-02, -2.154684938030120e-03, -2.154684938030120e-03, -8.540518835784384e-01, -8.437672629243398e-01, -8.473075634017948e-01, -8.502921261538675e-01, -8.487920583569742e-01, -8.487920583569742e-01, -8.336485800722694e-01, -6.755862441257446e-01, -7.196548039273535e-01, -7.639843290173840e-01, -7.412506076862208e-01, -7.412506076862208e-01, -9.731487932576312e-01, -2.214931334246372e-01, -2.984240803992469e-01, -4.586400421070509e-01, -3.760078084771340e-01, -3.760078084771340e-01, -6.089597696110284e-01, -3.161200553660408e-02, -5.038382645490278e-02, -4.554246815198902e-01, -7.768629684591215e-02, -7.768629684591218e-02, -7.133293607677437e-03, -4.177295599330062e-04, -1.069644534846305e-03, -5.623291254574393e-02, -1.979353143876918e-03, -1.979353143876917e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rppscan_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rppscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.974105599434707e-09, -5.974048955783201e-09, -5.973566544718199e-09, -5.974403265952638e-09, -5.973997777239864e-09, -5.973997777239864e-09, -1.532127933582337e-05, -1.532284873185812e-05, -1.536088403911735e-05, -1.532662690457700e-05, -1.534239071395376e-05, -1.534239071395376e-05, -4.325214070486629e-03, -4.307114198068325e-03, -3.895436566518137e-03, -4.072884058135874e-03, -4.028696029655244e-03, -4.028696029655244e-03, -1.544200946442590e+00, -1.524618576693868e+00, -1.441900457064979e-03, -1.058863340811645e+00, -1.867109917628662e+00, -1.867109917628668e+00, -2.301655385739163e+03, -4.943469353902980e+02, 1.565567539903128e+00, 4.294280028760645e+02, 2.923839348626748e+02, 2.923839348626768e+02, -1.681137195611314e-06, -1.681588788204479e-06, -1.681017557197338e-06, -1.681422001883785e-06, -1.681437902860731e-06, -1.681437902860731e-06, -9.538555200721409e-05, -8.833572657425237e-05, -9.343632273239367e-05, -8.681292014654046e-05, -9.230312108495154e-05, -9.230312108495154e-05, -1.629083013778768e-02, -1.374394188954602e-02, -2.601931385105710e-02, -2.788937466037542e-02, -1.507519536331271e-02, -1.507519536331271e-02, -7.863415282510480e-01, -1.695993138639776e+00, -5.841257911813375e-01, -2.129221110818823e-04, -3.597622413423735e+00, -3.597622413423800e+00, 8.267257919915280e+02, 5.098080571858766e+02, 2.213414209005196e+03, 9.106714233590608e-02, 1.067896190769042e+03, 1.067896190769041e+03, -1.259787021871249e-02, -1.222480330302982e-02, -1.234919211645790e-02, -1.245937869380181e-02, -1.240415021901916e-02, -1.240415021901916e-02, -1.536193987488291e-02, -1.938514538246880e-02, -1.759019308767228e-02, -1.643007833686952e-02, -1.709325919228128e-02, -1.709325919228129e-02, -1.243242844968062e-02, -5.656505935346100e-01, -3.205860911677165e-01, -1.315567259920359e-01, -1.996835674033214e-01, -1.996835674033216e-01, -3.931733866909545e-02, -5.905034940397015e+00, 6.043760549636708e-01, -1.568200166674530e-01, -2.072341368546176e+00, -2.072341368546170e+00, 8.205088741513082e+01, 1.219100219116577e+04, 1.935350194470691e+03, -7.696970371770732e+00, 1.380368040282864e+03, 1.380368040282868e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rppscan_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rppscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rppscan_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rppscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [9.618072729320277e-04, 9.618057490477259e-04, 9.617707941600848e-04, 9.617926304990991e-04, 9.617852172589895e-04, 9.617852172589895e-04, 9.094800219541803e-03, 9.096127533694853e-03, 9.131330407691275e-03, 9.124961895162858e-03, 9.123033103213860e-03, 9.123033103213860e-03, 1.450066660844729e-02, 1.445225990059680e-02, 1.349543344598111e-02, 1.491924383890803e-02, 1.447141630257680e-02, 1.447141630257680e-02, 1.329772276130526e-01, 1.370181123804972e-01, 2.352831837995551e-03, 4.220586526016733e-02, 9.954043008209992e-02, 9.954043008209984e-02, 8.575307165212152e-03, 2.652966446398597e-03, 1.612147211391809e-03, 1.345821590725817e-05, 6.476578245410743e-05, 6.476578245410519e-05, 3.921129718325916e-03, 3.923454551789973e-03, 3.920985830603948e-03, 3.923048744200044e-03, 3.922436479052532e-03, 3.922436479052532e-03, 1.182632081120477e-02, 1.124067731373240e-02, 1.145433839260923e-02, 1.089633234458932e-02, 1.167231997212100e-02, 1.167231997212100e-02, 5.075978369624708e-02, 5.191203318869132e-02, 6.108218570691196e-02, 6.658747757353745e-02, 4.926063950358821e-02, 4.926063950358821e-02, 1.368598250307448e-02, 1.450441545263128e-01, 9.781348019709516e-03, 2.009809614539576e-02, 7.498410402991411e-02, 7.498410402991332e-02, 5.312393201483915e-07, 2.449497150305755e-06, 2.286231294398559e-05, 3.683755925383753e-03, 5.633129761268983e-06, 5.633129761269025e-06, 4.048519481102685e-02, 3.920553856246201e-02, 3.963803735494268e-02, 4.001126445886547e-02, 3.982425703380917e-02, 3.982425703380917e-02, 4.460944861920911e-02, 3.896843813699976e-02, 3.995901341182842e-02, 4.154462655580188e-02, 4.093678731945683e-02, 4.093678731945685e-02, 5.294674499754903e-02, 9.897666118527486e-02, 9.638180072846503e-02, 8.666805539244246e-02, 8.998837953233721e-02, 8.998837953233728e-02, 5.897924994895130e-02, 5.997922482759383e-03, 2.217286220911402e-03, 9.165232581352169e-02, 1.713441304399490e-02, 1.713441304399485e-02, 8.453815397311007e-06, 3.214209462572621e-08, 3.750654649346782e-05, 4.287370482508167e-02, 1.143306376193366e-05, 1.143306376193359e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
