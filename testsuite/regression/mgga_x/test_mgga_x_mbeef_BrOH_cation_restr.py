
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mbeef_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbeef", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.247688597721824e+01, -2.247691854795800e+01, -2.247713021333725e+01, -2.247664421853030e+01, -2.247688935615971e+01, -2.247688935615971e+01, -3.479688953333385e+00, -3.479705165760308e+00, -3.480370617456465e+00, -3.481778619690451e+00, -3.480687160205099e+00, -3.480687160205099e+00, -6.609989719032607e-01, -6.606747873879264e-01, -6.559467552674771e-01, -6.660575617853940e-01, -6.627092421063288e-01, -6.627092421063288e-01, -2.058231275602651e-01, -2.072605883100230e-01, -7.289547638156615e-01, -1.521629388705225e-01, -1.697662556197326e-01, -1.697662556197326e-01, -6.426395123332988e-03, -6.766535000578470e-03, -3.915188609958736e-02, -3.704685793594923e-03, -4.658323335749863e-03, -4.658323335749863e-03, -5.411947119854145e+00, -5.411538890029324e+00, -5.411938525836936e+00, -5.411577947655565e+00, -5.411734193559553e+00, -5.411734193559553e+00, -2.220936628311217e+00, -2.243735119671807e+00, -2.227648612928496e+00, -2.247970909997264e+00, -2.230807649979757e+00, -2.230807649979757e+00, -6.177422951713911e-01, -6.588253105767237e-01, -5.509990487766204e-01, -5.585828626163825e-01, -6.269071373117289e-01, -6.269071373117289e-01, -1.027721028700322e-01, -1.997435032339631e-01, -9.514577468735658e-02, -1.913651147405533e+00, -1.211506927237991e-01, -1.211506927237991e-01, -2.857635642010384e-03, -3.621772186529435e-03, -2.770523353239262e-03, -6.478588380726284e-02, -3.337578461166459e-03, -3.337578461166460e-03, -5.975910063663157e-01, -5.986402537528657e-01, -5.982195979451181e-01, -5.979082979211755e-01, -5.980586945259846e-01, -5.980586945259846e-01, -5.811138914090253e-01, -5.467153928715726e-01, -5.539785211349343e-01, -5.622841428911615e-01, -5.575762141750947e-01, -5.575762141750947e-01, -6.881335191287358e-01, -2.622149275555596e-01, -3.047234378914470e-01, -3.648916045333155e-01, -3.362710855075040e-01, -3.362710855075039e-01, -4.932653693501656e-01, -3.725518005620500e-02, -5.183290863451823e-02, -3.522364052932977e-01, -8.143636342842235e-02, -8.143636342842236e-02, -9.088462820417260e-03, -9.673975893012626e-04, -2.031202542805584e-03, -7.613409222435612e-02, -3.088154441040041e-03, -3.088154441040039e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mbeef_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbeef", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.728740415552231e+01, -2.728752779017388e+01, -2.728799534547022e+01, -2.728615595773507e+01, -2.728713147115097e+01, -2.728713147115097e+01, -4.405717388830124e+00, -4.406065650570565e+00, -4.415714135422316e+00, -4.415055474711379e+00, -4.413465248124531e+00, -4.413465248124531e+00, -8.215870250896868e-01, -8.192210240387039e-01, -7.646859888881966e-01, -7.856505314470980e-01, -7.811661379627035e-01, -7.811661379627035e-01, -1.483437623402721e-01, -1.461616637278652e-01, -8.480825845914126e-01, -2.238517332093932e-01, -2.247767018301532e-01, -2.247767018301533e-01, -8.615246718610622e-03, -9.077337684277710e-03, -5.590354036787201e-02, -4.948039053721392e-03, -6.229918069933686e-03, -6.229918069933681e-03, -6.749807370868452e+00, -6.753352542083853e+00, -6.749945770883051e+00, -6.753076340314125e+00, -6.751617825673621e+00, -6.751617825673621e+00, -2.052340564609029e+00, -2.097357293309162e+00, -2.018903194686730e+00, -2.073217002422209e+00, -2.093945317981257e+00, -2.093945317981257e+00, -7.741482170971113e-01, -8.702637980773628e-01, -7.191459188447017e-01, -8.017649032686547e-01, -7.889014405356455e-01, -7.889014405356455e-01, -1.409215407278019e-01, -2.559715721104536e-01, -1.268632385202542e-01, -2.814933057566926e+00, -1.949698292099936e-01, -1.949698292099936e-01, -3.814649349420243e-03, -4.837600303194483e-03, -3.703604233703764e-03, -8.655168294946070e-02, -4.461523391689860e-03, -4.461523391689862e-03, -7.901682329395258e-01, -7.796100576299467e-01, -7.835580058810989e-01, -7.866356791287603e-01, -7.851186379192874e-01, -7.851186379192874e-01, -7.688041346569522e-01, -5.859164049481086e-01, -6.401745402717167e-01, -6.987424411921287e-01, -6.697317423992158e-01, -6.697317423992158e-01, -9.405821029403858e-01, -2.081022430212454e-01, -2.219738531788803e-01, -4.193688454579525e-01, -3.055256519129776e-01, -3.055256519129775e-01, -5.377966391241132e-01, -5.511823799699882e-02, -7.321221987447178e-02, -4.257226081135893e-01, -1.101429384976780e-01, -1.101429384976780e-01, -1.223076451008635e-02, -1.290228086909801e-03, -2.710610863098266e-03, -1.159215183030784e-01, -4.127710094717462e-03, -4.127710094717456e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbeef_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbeef", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.699933516499988e-09, -6.699817541387128e-09, -6.699469216026221e-09, -6.701198067888151e-09, -6.700268203772266e-09, -6.700268203772266e-09, -9.019371184701412e-06, -9.029564122638733e-06, -9.318107586804984e-06, -9.358915906261430e-06, -9.290151280125209e-06, -9.290151280125209e-06, -7.452918559660737e-03, -7.451405110849473e-03, -7.339207597962848e-03, -7.415312065908921e-03, -7.414374390733742e-03, -7.414374390733742e-03, -2.842215027463773e+00, -2.851350334198486e+00, -3.183320775593514e-03, 7.337068161989992e-01, -3.601417321338855e-02, -3.601417321338805e-02, 7.283491648069131e+00, 7.450155129953431e+00, 2.713912312007648e+00, 6.178931957077861e+00, 7.812039990439058e+00, 7.812039990437905e+00, -1.879443029921559e-06, -1.876241188679123e-06, -1.879498521577959e-06, -1.876665631210981e-06, -1.877716826506758e-06, -1.877716826506758e-06, -2.184013888000780e-04, -1.965967036953790e-04, -2.166954459595079e-04, -1.930284334367389e-04, -2.068385861069296e-04, -2.068385861069296e-04, -1.666792786765279e-02, -3.768882345402829e-03, -2.915117458934033e-02, -2.520080721617373e-02, -1.303584227452070e-02, -1.303584227452070e-02, 3.072162515075147e-01, -2.859361800382375e-01, 1.811107821143865e-01, -2.168994891940271e-04, 2.038281871830397e+00, 2.038281871830403e+00, 8.157260680691939e+00, 7.270995341040652e+00, 4.553083874154709e+01, 4.962429811981277e-01, 2.119086900191951e+01, 2.119086900191951e+01, -6.171355414340240e-03, -7.984692732625328e-03, -7.369026136898120e-03, -6.840930562209678e-03, -7.105522797649515e-03, -7.105522797649515e-03, -2.501038664431650e-03, -2.944443090310965e-02, -2.249161153482318e-02, -1.404306259718424e-02, -1.832725596071147e-02, -1.832725596071146e-02, -8.599392257552275e-03, -9.466670565516854e-01, -6.790514443124467e-01, -1.756459848624961e-01, -4.027078913710112e-01, -4.027078913710112e-01, -6.915682834207475e-02, 6.557004315281817e+00, 1.556403638179123e+00, -2.349507851917780e-01, 8.470708461103011e-01, 8.470708461102843e-01, 5.329552237746567e+00, 3.586515168506277e+01, 1.731828856862009e+01, 4.814103944942198e+00, 2.677458903921556e+01, 2.677458903921138e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbeef_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbeef", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbeef_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbeef", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-2.081946775265647e-05, -2.082424395508316e-05, -2.082629837536873e-05, -2.075501447623462e-05, -2.079511608171017e-05, -2.079511608171017e-05, 2.478750691410249e-03, 2.485814734508176e-03, 2.686327931613005e-03, 2.716099980280727e-03, 2.666011935088552e-03, 2.666011935088552e-03, 1.424098816304749e-02, 1.413035353504257e-02, 1.164506843364475e-02, 1.381188226440943e-02, 1.325584520967104e-02, 1.325584520967104e-02, 2.351079030027466e-01, 2.403250031153187e-01, 1.931074366238231e-03, -2.060556683232484e-02, 1.291323883821187e-03, 1.291323883821174e-03, -2.096433479478170e-06, -1.578439521918560e-06, -4.816703371635053e-04, 2.701755367975105e-10, 3.178345054885430e-09, 3.178345054732679e-09, -2.163175120966124e-05, -2.169878082670903e-05, -2.119405180165735e-05, -2.126728771881074e-05, -2.189467794731868e-05, -2.189467794731868e-05, 1.880753262705485e-02, 1.632094082196751e-02, 1.825258493387584e-02, 1.557111981888718e-02, 1.767807512603001e-02, 1.767807512603001e-02, 3.160260495155068e-02, 2.197966173668471e-03, 5.325638334508227e-02, 5.385641491292046e-02, 2.132604829820737e-02, 2.132604829820737e-02, -2.853848355723881e-03, 2.935232639213302e-02, -2.303270449683229e-03, 1.992724860731993e-02, -3.224929027893399e-02, -3.224929027893411e-02, 1.459358627461403e-12, 2.131148136889766e-11, 5.663156367076276e-10, -1.835568691616353e-03, 7.665269526879526e-11, 7.665269523502020e-11, -9.900076928071698e-03, -7.639770595741734e-03, -8.423195701582084e-03, -9.083107890379600e-03, -8.756538667479493e-03, -8.756538667479493e-03, -2.078753266291537e-02, 1.374960668234022e-02, 5.730034845205903e-03, -5.066453274213198e-03, 5.777466756799265e-04, 5.777466756799422e-04, 3.082974191014253e-02, 1.644324820992380e-01, 1.789479407017963e-01, 8.499126896819129e-02, 1.459003935850719e-01, 1.459003935850718e-01, 7.072206999133356e-02, -2.726952364985086e-03, -1.006886273983959e-03, 1.062792202318777e-01, -5.907364274408145e-03, -5.907364274408068e-03, -2.007815736274030e-09, 3.072306800364437e-15, 5.470377476800299e-10, -2.412792483957528e-02, 2.137325809534023e-10, 2.137325810947637e-10]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
