
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mbeef_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbeef", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.165356469210575e+01, -2.165368242593359e+01, -2.165420136544120e+01, -2.165245348250545e+01, -2.165337000746534e+01, -2.165337000746534e+01, -3.289026442900580e+00, -3.289132906025740e+00, -3.291972197227629e+00, -3.291128712908730e+00, -3.290877578872238e+00, -3.987585568068463e+00, -5.785138595003754e-01, -8.191703057765241e-01, -8.009868573510706e-01, -8.063947617918938e-01, -8.053324133143539e-01, -8.053324133143539e-01, -2.117068528515148e-01, -2.154034386455693e-01, -6.607885818981042e-01, -1.443417524585167e-01, -1.714102866150217e-01, -1.714102866150217e-01, -6.021386261020341e-03, -6.338898896944279e-03, -3.566285524779938e-02, -3.474063651871779e-03, -4.366948697791214e-03, -4.366948697791214e-03, -5.413080204504585e+00, -5.412656843034329e+00, -5.413047994100732e+00, -5.359396672776649e+00, -5.412871353668629e+00, -5.412871353668629e+00, -1.797591021272763e+00, -1.822131818140023e+00, -1.779137839869813e+00, -1.800911537417941e+00, -1.820243593550176e+00, -2.298721059176135e+00, -6.430301398734585e-01, -6.708409885989538e-01, -6.143353320211928e-01, -6.177649622342929e-01, -6.480554878257393e-01, -5.763551545414161e-01, -7.647094298342001e-02, -2.023181199963805e-01, -7.074048711718038e-02, -2.076764718030932e+00, -1.140808115486052e-01, -1.140808115486052e-01, -2.249889567906007e-03, -3.396064586163139e-03, -2.597420493373178e-03, -4.757143247909374e-02, -2.625915633184017e-03, -3.128895766971773e-03, -5.992252779307861e-01, -6.004742196824434e-01, -5.971829554077552e-01, -5.996214661848888e-01, -5.998021851400273e-01, -5.998021851400273e-01, -5.835883632804740e-01, -5.497466845285669e-01, -5.577403205553549e-01, -5.660893907481086e-01, -5.616728640124162e-01, -5.239153589553224e-01, -7.103311730427084e-01, -1.852783363868302e-01, -3.231228693458472e-01, -3.183048591153130e-01, -3.641541248752789e-01, -3.641541248752789e-01, -4.308648624162889e-01, -3.410255604350308e-02, -4.676040656865930e-02, -3.816221540786728e-01, -6.058192611472524e-02, -7.433649069014676e-02, -8.502405410195087e-03, -9.074829809870420e-04, -1.905204937044964e-03, -6.975552527375484e-02, -2.895242136176837e-03, -2.895242136176834e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mbeef_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbeef", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.195479757451707e+01, -3.195469509037585e+01, -3.195434379484965e+01, -3.195585241172796e+01, -3.195504803707640e+01, -3.195504803707640e+01, -5.017918228449099e+00, -5.017589172395653e+00, -5.008781393224182e+00, -5.012846204114331e+00, -5.011892794506615e+00, -4.248868123146687e+00, -8.359570264652596e-01, -9.967427998790613e-01, -1.034958426985971e+00, -1.012709594759453e+00, -1.017888590545898e+00, -1.017888590545898e+00, -3.095466885798758e-01, -3.080955366651523e-01, -9.016793355780082e-01, -2.416588965977605e-01, -2.898880882152988e-01, -2.898880882152990e-01, -8.050635164644790e-03, -8.478050910239000e-03, -4.862397099917253e-02, -4.635845354411246e-03, -5.831311384067735e-03, -5.831311384067735e-03, -6.747031962716324e+00, -6.750604342892959e+00, -6.747228127275197e+00, -7.160015248701805e+00, -6.748827125832414e+00, -6.748827125832414e+00, -2.856749162114291e+00, -2.889996425680023e+00, -2.826356580899268e+00, -2.861786587981441e+00, -2.887554475989949e+00, -2.452687958040284e+00, -7.188473885498514e-01, -8.130250162077884e-01, -6.595357759435478e-01, -6.919879796283117e-01, -7.348888794087071e-01, -8.201668744026763e-01, -1.020316435798652e-01, -3.406525278335126e-01, -9.436977842382202e-02, -2.375916611561529e+00, -1.809342269368494e-01, -1.809342269368485e-01, -2.999852758934453e-03, -4.531393301838108e-03, -3.467402021895006e-03, -6.343701359460754e-02, -3.501220859068773e-03, -4.176390667533350e-03, -7.868897749093586e-01, -7.746807235482212e-01, -7.831198430204602e-01, -7.826532001013545e-01, -7.808847235350019e-01, -7.808847235350019e-01, -7.645936379475534e-01, -5.982984500272273e-01, -6.382462001757828e-01, -6.883120500521804e-01, -6.619301254778150e-01, -7.998606587099470e-01, -8.422047775909289e-01, -2.532854923371808e-01, -4.142789839361897e-01, -5.058281899768303e-01, -4.098911639133898e-01, -4.098911639133896e-01, -6.451994697596185e-01, -4.651040682525365e-02, -6.334824148006053e-02, -4.079058279525248e-01, -8.081471495595575e-02, -1.011546778327116e-01, -1.137884881094931e-02, -1.210047932733622e-03, -2.541372639599856e-03, -9.420383529978671e-02, -3.864605522712435e-03, -3.864605527630692e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbeef_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbeef", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.289015607223827e-08, -1.288926294571879e-08, -1.288554858536181e-08, -1.289877712712604e-08, -1.289181246271018e-08, -1.289181246271018e-08, -1.340739926937622e-05, -1.340186035178571e-05, -1.325248512834298e-05, -1.330858917433151e-05, -1.330814156673026e-05, -7.552294652087169e-06, -8.689121659858783e-03, -1.188293907422104e-03, -4.050142808105529e-04, -7.876884530490738e-04, -6.996338374579049e-04, -6.996338374579049e-04, 1.889714462807675e-01, 1.417049199296650e-01, -3.802148963962262e-03, 5.304000260911429e-01, 5.576112028613880e-01, 5.576112028613954e-01, 3.241382168432684e+00, 3.359460648108101e+00, 5.750785951465525e-01, 2.449107779733592e+00, 3.375022135980083e+00, 3.375022135980083e+00, -1.890597033461208e-06, -1.887418466480893e-06, -1.890425255447054e-06, -4.618060957230182e-07, -1.889001160832445e-06, -1.889001160832445e-06, -1.549969214694598e-04, -1.496505073412098e-04, -1.581665025544632e-04, -1.542670588307191e-04, -1.501477380566749e-04, -6.237875615212986e-05, -1.169187243627334e-02, -8.676152275572890e-03, -1.390773650923447e-02, -1.370405984449476e-02, -1.118583432582693e-02, -1.273603757493501e-02, -1.786596248986585e+01, 2.983128245246206e-01, -2.436127002948446e+01, -1.049697812854658e-04, 6.602019600927657e-01, 6.602019600927143e-01, -2.370111033092224e+07, 2.167537529113090e+00, 1.740455891878247e+01, -1.187205473070026e+02, -1.277292725112418e+07, 6.691077073187905e+00, -9.791583709588011e-03, -1.083803839334550e-02, 3.697199818309383e-03, -1.018575573520271e-02, -1.033982979210983e-02, -1.033982979210983e-02, -1.106706904076776e-02, -2.203989808638500e-02, -2.017172317638646e-02, -1.697296475653140e-02, -1.873692036069964e-02, -4.040716326607472e-02, -7.241178225006068e-03, -6.224370123427190e-01, -1.932520199791910e-02, -1.556642968978702e-01, -6.399923238442401e-02, -6.399923238442436e-02, -4.279523638916313e-02, 6.400141061976657e-01, 2.292414629903776e-01, -9.204341662197209e-02, -4.527384800526487e+01, 1.542548484951805e-01, 1.524941403850458e+00, 2.683527522053609e+00, 7.642397817203375e+00, 1.137273191755905e-01, 9.532844380615627e+00, 9.532873574240245e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbeef_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbeef", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.807881865316157e-03, 1.807775687801529e-03, 1.807342598343991e-03, 1.808913930880548e-03, 1.808085657407932e-03, 1.808085657407932e-03, 4.755658397120876e-03, 4.753341505410488e-03, 4.690239732286897e-03, 4.715764219470111e-03, 4.713546376763319e-03, -2.142830218729264e-17, 6.166121890106882e-03, -1.758795488823831e-16, -7.987539035999446e-17, 4.153043268992458e-18, -9.831965970180715e-17, -9.831965970180715e-17, 3.639649271349637e-16, -3.460732159848332e-16, 8.369318407978405e-04, -1.225268779436096e-15, 4.061003390332308e-16, 2.354521554013062e-17, -1.106922426056834e-12, 1.464772735739495e-13, -9.231190632416340e-15, -7.769324982150286e-12, 1.351230555502671e-12, 1.351230555502671e-12, 5.917228275240975e-19, -6.887934260624962e-20, 3.399181239050765e-20, 2.053589443350804e-04, 5.454828912175561e-19, 5.454828912175561e-19, 8.863480894935516e-03, 9.116341981131001e-03, 8.561334109145124e-03, 8.897777968059349e-03, 9.108724454585807e-03, 1.354973486514677e-18, 1.575146770911142e-17, -1.891049198859365e-18, -5.933697991376226e-17, 2.451705188069853e-17, 1.403951534964613e-17, 2.408644265293028e-02, 3.842559318257882e-05, 2.676563077929460e-16, 2.725542299300322e-05, -1.033067094537715e-18, -1.724701016774212e-15, -7.364691473149934e-16, 1.002732160820917e-12, 4.072688181902513e-12, -3.615999311275591e-12, 5.249635648130698e-06, 1.714247850515025e-11, -1.441425206114233e-11, 1.446972813620267e-18, -5.130461761870423e-18, -3.391608758582321e-02, 1.254566377090948e-20, -1.343422332389960e-18, -1.343422332389960e-18, 3.224294007719239e-18, -5.293353980979157e-18, 4.270198796854117e-18, 1.736815162326176e-18, 2.002355338102257e-18, 8.106848194733925e-02, 1.358170093612017e-20, 3.341789187518168e-03, 4.393944472407244e-16, 4.871209360848309e-02, -4.908784696302908e-17, 8.940604188588937e-17, 3.276288538225017e-02, -2.276767989780237e-14, 1.815486595423978e-14, 4.713428450402073e-17, 2.820723224716090e-05, -7.182006979570087e-15, 1.229967333671933e-12, -4.379142073706452e-11, 1.102219719089099e-12, -4.148001459784226e-15, 2.857622813289454e-12, -8.459302344016809e-12]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
