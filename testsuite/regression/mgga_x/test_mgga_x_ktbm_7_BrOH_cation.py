
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_7_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_7", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.117249567684928e+01, -2.117260574496980e+01, -2.117309277744969e+01, -2.234611753760583e+01, -2.234680134179378e+01, -2.352142165600262e+01, -3.473790588082813e+00, -3.837343844923328e+00, -3.838026189080027e+00, -3.838099050267116e+00, -3.837691256688287e+00, -3.474365043038908e+00, -5.791526990498348e-01, -6.518475191867248e-01, -7.000625541075722e-01, -6.374185069597442e-01, -5.688660918877420e-01, -7.078643762656305e-01, -1.693094105852770e-01, -1.722060604659805e-01, -7.487886105430146e-01, -1.360360762711948e-01, -1.756204359948400e-01, -1.744389031593712e-01, -6.127960879555734e-03, -6.274409660890470e-03, -3.453436786787815e-02, -3.532964222905780e-03, -4.931626628062663e-03, -4.931626628062664e-03, -5.709760436310631e+00, -5.710317349115224e+00, -5.709784406679691e+00, -5.710276306335954e+00, -5.503188870531366e+00, -5.503373163572064e+00, -2.150745715720054e+00, -2.168418844334638e+00, -2.137644192449565e+00, -2.153390106304148e+00, -1.953771063201454e+00, -2.166851508746292e+00, -6.007296252728089e-01, -7.014248306293736e-01, -6.003807779654501e-01, -6.246645832194678e-01, -6.161340549559089e-01, -6.601450532420804e-01, -9.339101102266656e-02, -1.679890224019732e-01, -8.642268262079358e-02, -2.122133209922509e+00, -1.105392991091045e-01, -1.105392991091045e-01, -2.646871465400103e-03, -3.453681816482797e-03, -2.644903549488842e-03, -5.558675994339772e-02, -3.322462486152047e-03, -3.322462486152047e-03, -6.402407658475293e-01, -6.391297386542626e-01, -6.178364412690986e-01, -6.308251308801034e-01, -6.198319300944666e-01, -6.297379787667778e-01, -6.232465601798067e-01, -4.983717311261667e-01, -5.313153909793243e-01, -5.925470762365297e-01, -5.813395929583798e-01, -5.477253301238550e-01, -6.969003864679112e-01, -2.320942327994582e-01, -2.557727817840348e-01, -3.440438567944988e-01, -3.292423208466971e-01, -2.955988307143751e-01, -5.005494280680959e-01, -3.171618875265850e-02, -4.647078125332646e-02, -3.701663923869668e-01, -7.400380960244202e-02, -7.400380960244204e-02, -8.082821943119323e-03, -9.230776866336425e-04, -1.816884519158743e-03, -6.344098200751883e-02, -3.051098852595237e-03, -2.902931519292250e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_7_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_7", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.097321219229757e+01, -3.097329533912787e+01, -3.097333032264418e+01, -3.097338112175953e+01, -3.097372120714216e+01, -3.097393751971967e+01, -3.097238793860462e+01, -2.849153204263692e+01, -3.097328245949495e+01, -2.849238494206316e+01, -2.849262450048502e+01, -2.849238494206315e+01, -4.435481434248876e+00, -4.606962882440108e+00, -4.435511812182289e+00, -4.435423483062279e+00, -4.436088154903281e+00, -4.436239069954205e+00, -4.436251293051369e+00, -4.436313995443797e+00, -4.434703064592694e+00, -4.436922828525019e+00, -4.605893930862403e+00, -4.436922828525018e+00, -7.691749184894842e-01, -7.754547301740893e-01, -7.670792103461949e-01, -8.561489262286553e-01, -8.340401961324067e-01, -8.282329862012037e-01, -8.372722730602145e-01, -7.502811401799663e-01, -7.835841727124033e-01, -7.101174631729119e-01, -8.632829597273864e-01, -8.080316960164469e-01, -1.880398730198401e-01, -2.246127623378582e-01, -1.904377850308062e-01, -2.286595069826793e-01, -9.770609027565375e-01, -8.811676721020776e-01, -1.652158345795375e-01, -1.675666529507143e-01, -2.255135559908718e-01, -1.202660868246412e-01, -2.255135559908714e-01, -1.150761579245084e-01, -7.388821104243617e-03, -7.851485764554999e-03, -7.745802982253018e-03, -8.294254936716584e-03, -4.277060627707804e-02, -4.545322009810810e-02, -4.441656507232716e-03, -4.367645831517520e-03, -6.591549278365927e-03, -3.751023028821384e-03, -6.591549278365928e-03, -3.751023028821385e-03, -7.085201443122738e+00, -7.083521707339158e+00, -7.089316687761503e+00, -7.087497683954687e+00, -7.085476573543550e+00, -7.083691888842489e+00, -7.089005821069931e+00, -7.087302034200941e+00, -7.572315405104426e+00, -7.085512299542581e+00, -7.087273516730296e+00, -7.570467821865111e+00, -2.492958985770548e+00, -2.492850630939389e+00, -2.511567707941673e+00, -2.510908090304907e+00, -2.477459577345700e+00, -2.481767274656559e+00, -2.493423556707768e+00, -2.497986234635238e+00, -2.515102165294674e+00, -2.517496244050246e+00, -2.515102165294674e+00, -2.503914918315966e+00, -7.595046168824210e-01, -8.284410569468861e-01, -8.520272561347024e-01, -8.543381433187763e-01, -6.800606230235552e-01, -7.079042386860849e-01, -7.159649732041927e-01, -7.445352680324450e-01, -7.969470542281112e-01, -8.220478452357992e-01, -7.969470542281115e-01, -7.518141759402092e-01, -1.148535054233479e-01, -1.159488839587810e-01, -1.938407632727930e-01, -2.205091322729805e-01, -1.039002217422003e-01, -1.094812180676147e-01, -2.503580432859164e+00, -2.502556564365351e+00, -1.314462540389707e-01, -1.393179677414386e-01, -1.314462540389708e-01, -1.393179677414385e-01, -3.334436204554597e-03, -3.462848136344671e-03, -4.273657343005703e-03, -4.338339700590748e-03, -3.195721955558075e-03, -3.384379931782783e-03, -7.160098677767715e-02, -7.054035946796661e-02, -3.263951359299723e-03, -4.482431015498037e-03, -3.263951359299725e-03, -4.482431015498038e-03, -8.336959230787709e-01, -8.373182339814248e-01, -8.157583817167491e-01, -8.194796868424079e-01, -8.500157161038155e-01, -8.532376745570099e-01, -8.507124666771317e-01, -8.307990756232468e-01, -8.503741002565024e-01, -8.535874884484236e-01, -8.503741002565024e-01, -8.282111233555484e-01, -8.094781500806200e-01, -8.126004372783190e-01, -6.302141729530737e-01, -6.823585876544696e-01, -6.705750531685994e-01, -7.392643510150968e-01, -7.208268343410196e-01, -7.237043004562506e-01, -6.940371452169770e-01, -6.970787728252820e-01, -6.940371452169768e-01, -7.623055069920389e-01, -8.823207298608249e-01, -9.677983480732153e-01, -2.779054831044817e-01, -2.795385077003585e-01, -2.957910114248841e-01, -3.370978870674389e-01, -4.396296228832495e-01, -4.440293693229304e-01, -3.853377819845589e-01, -3.851951934726008e-01, -3.853377819845587e-01, -3.623289942560132e-01, -5.763611954842378e-01, -5.807125403428491e-01, -4.197425433490062e-02, -4.226037189424012e-02, -5.680937703863577e-02, -5.870961751554825e-02, -4.241415326908437e-01, -4.318475136903525e-01, -8.888421391104745e-02, -9.384944131730705e-02, -8.888421391104734e-02, -9.384944131730695e-02, -1.057266655847197e-02, -1.095565534486140e-02, -1.149773332235242e-03, -1.152401217310697e-03, -2.341166810978351e-03, -2.490001091413502e-03, -8.236174889892844e-02, -8.345243296467592e-02, -3.091652595067769e-03, -4.108482130801893e-03, -3.091652595067764e-03, -4.110889633125124e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_7_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_7", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.855055896806933e-08, 0.000000000000000e+00, -2.855223565681674e-08, -2.855041453431591e-08, 0.000000000000000e+00, -2.855213038906078e-08, -2.854979542661673e-08, 0.000000000000000e+00, -2.855128682206961e-08, -2.855144532830370e-08, 0.000000000000000e+00, -3.085271445726434e-08, -2.855048655420059e-08, 0.000000000000000e+00, -3.085133755235263e-08, -3.084937543441076e-08, 0.000000000000000e+00, -3.085133755235263e-08, -2.920240451538901e-05, 0.000000000000000e+00, -2.548168257058279e-05, -2.920835955480096e-05, 0.000000000000000e+00, -2.920281965198763e-05, -2.932456507751288e-05, 0.000000000000000e+00, -2.934411399860387e-05, -2.927245807166827e-05, 0.000000000000000e+00, -2.927098029312935e-05, -2.920785037209820e-05, 0.000000000000000e+00, -2.937339965102512e-05, -2.548911508134049e-05, 0.000000000000000e+00, -2.937339965102512e-05, -8.811243124278448e-03, 0.000000000000000e+00, -8.981352977777031e-03, -8.776229657379632e-03, 0.000000000000000e+00, -1.047962977157489e-02, -9.647120381758875e-03, 0.000000000000000e+00, -9.637383069044212e-03, -1.006770591650501e-02, 0.000000000000000e+00, -8.731172209302427e-03, -8.906558442812483e-03, 0.000000000000000e+00, -8.049974847175808e-03, -1.041087233446803e-02, 0.000000000000000e+00, -9.519846460652971e-03, -1.057654858436696e+00, 0.000000000000000e+00, -1.372505771961535e+00, -1.071536927099807e+00, 0.000000000000000e+00, -1.389652743478342e+00, -2.594925651432723e-03, 0.000000000000000e+00, -2.489905242914220e-03, -1.036840258394513e+00, 0.000000000000000e+00, -1.178987491850601e+00, -1.085400642660798e+00, 0.000000000000000e+00, -1.297243112438566e+00, -1.085400642660798e+00, 0.000000000000000e+00, -8.134935107504980e-01, -4.399902564383621e+02, 0.000000000000000e+00, -3.905775161962322e+02, -1.906150871389605e+02, 0.000000000000000e+00, -3.581200209573466e+02, -4.753803233303992e+00, 0.000000000000000e+00, -8.850117334719661e+00, -1.039688415948840e+03, 0.000000000000000e+00, -1.080687168221426e+03, -5.384955912172820e+02, 0.000000000000000e+00, -2.172782068935624e+03, -5.384955912172820e+02, 0.000000000000000e+00, -2.172782068935624e+03, -9.149141737986873e-06, 0.000000000000000e+00, -9.157955744475819e-06, -9.149068433384019e-06, 0.000000000000000e+00, -9.157887827246061e-06, -9.149198561663685e-06, 0.000000000000000e+00, -9.157997540611815e-06, -9.149131804313034e-06, 0.000000000000000e+00, -9.157931901563684e-06, -8.639453823317374e-06, 0.000000000000000e+00, -9.157919930918475e-06, -9.149066255818230e-06, 0.000000000000000e+00, -8.647775121690125e-06, -2.481676982100270e-04, 0.000000000000000e+00, -2.490992806847119e-04, -2.494246431920844e-04, 0.000000000000000e+00, -2.502904739966180e-04, -2.463473673298943e-04, 0.000000000000000e+00, -2.478077515096795e-04, -2.478191253194561e-04, 0.000000000000000e+00, -2.491888907622403e-04, -2.500810017915843e-04, 0.000000000000000e+00, -2.168883111016913e-04, -2.500810017915843e-04, 0.000000000000000e+00, -2.500229146150655e-04, -4.621262615697026e-02, 0.000000000000000e+00, -4.208827209981578e-02, -3.919563366512315e-02, 0.000000000000000e+00, -3.936182045592115e-02, -5.430768474723616e-02, 0.000000000000000e+00, -5.274013230854920e-02, -5.690801070395314e-02, 0.000000000000000e+00, -5.269246505067868e-02, -4.205461131610882e-02, 0.000000000000000e+00, -4.400874968556052e-02, -4.205461131610884e-02, 0.000000000000000e+00, -4.915291868766109e-02, -1.581148937428799e+00, 0.000000000000000e+00, -1.555355897422098e+00, -5.360255140210253e-01, 0.000000000000000e+00, -6.672058338444262e-01, -1.847286879444429e+00, 0.000000000000000e+00, -1.770967829567046e+00, -4.305798211165188e-04, 0.000000000000000e+00, -4.314555259397274e-04, -1.598061015887077e+00, 0.000000000000000e+00, -1.904807804856423e+00, -1.598061015887077e+00, 0.000000000000000e+00, -1.904807804856425e+00, -7.332525579687959e+02, 0.000000000000000e+00, -1.398714751682110e+03, -1.093665428869130e+03, 0.000000000000000e+00, -9.963816613131518e+02, -5.251135502837051e+03, 0.000000000000000e+00, -4.906565563841114e+03, -3.914451951130277e+00, 0.000000000000000e+00, -2.300141620343896e+00, -2.183460515923645e+03, 0.000000000000000e+00, -2.066098086034806e+03, -2.183460515923645e+03, 0.000000000000000e+00, -2.066098086034805e+03, -5.910177171160127e-02, 0.000000000000000e+00, -5.821914934545010e-02, -5.954488008412512e-02, 0.000000000000000e+00, -5.866783571785725e-02, -5.778218619071353e-02, 0.000000000000000e+00, -5.696150258828196e-02, -5.792768208868869e-02, 0.000000000000000e+00, -5.840960746618706e-02, -5.785677076490538e-02, 0.000000000000000e+00, -5.703023921483110e-02, -5.785677076490538e-02, 0.000000000000000e+00, -5.847629006518296e-02, -6.576954823085149e-02, 0.000000000000000e+00, -6.493745574120315e-02, -8.607865244829983e-02, 0.000000000000000e+00, -7.528812551148183e-02, -8.336359711798294e-02, 0.000000000000000e+00, -7.440840528645770e-02, -7.787435156232085e-02, 0.000000000000000e+00, -7.688234273082747e-02, -8.098360785143491e-02, 0.000000000000000e+00, -7.999471125990570e-02, -8.098360785143491e-02, 0.000000000000000e+00, -7.325765689690945e-02, -3.132903276212860e-02, 0.000000000000000e+00, -2.900606583858939e-02, -4.752282258762828e-01, 0.000000000000000e+00, -4.720831436316104e-01, -3.158018628139039e-01, 0.000000000000000e+00, -3.724920540653025e-01, -2.147269150983665e-01, 0.000000000000000e+00, -2.430746154471030e-01, -3.256934974157997e-01, 0.000000000000000e+00, -3.285479317987748e-01, -3.256934974158000e-01, 0.000000000000000e+00, -2.826150247888669e-01, -1.041675859065422e-01, 0.000000000000000e+00, -1.043678765129617e-01, -5.058248557107613e+00, 0.000000000000000e+00, -4.941555608400942e+00, -5.378247035478184e+00, 0.000000000000000e+00, -5.171614505707840e+00, -3.449617126045477e-01, 0.000000000000000e+00, -3.647956453604322e-01, -3.114179914205820e+00, 0.000000000000000e+00, -3.288441655857782e+00, -3.114179914205822e+00, 0.000000000000000e+00, -3.288441655857784e+00, -6.989904674885277e+01, 0.000000000000000e+00, -6.465355266815601e+01, -1.618824748226993e+04, 0.000000000000000e+00, -1.607903857404519e+04, -3.032700075069819e+03, 0.000000000000000e+00, -2.759834371987108e+03, -2.168303110413150e+00, 0.000000000000000e+00, -2.297432192574831e+00, -3.910681248188359e+03, 0.000000000000000e+00, -2.503353006737174e+03, -3.910681248188367e+03, 0.000000000000000e+00, -1.167097825922114e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_7_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_7", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.608383199244246e-03, 1.608536172651970e-03, 1.608400153224386e-03, 1.608548455891761e-03, 1.608445055747692e-03, 1.608615374849983e-03, 1.608255278808267e-03, 2.134867704526505e-03, 1.608394354512860e-03, 2.134839535006698e-03, 2.134807327415197e-03, 2.134839535006698e-03, 1.047306271129254e-02, 3.458088526467990e-03, 1.047471962403447e-02, 1.047291518519385e-02, 1.050688656071157e-02, 1.051251536481920e-02, 1.049432559650329e-02, 1.049422244077060e-02, 1.047104675544219e-02, 1.052292781751777e-02, 3.455592434939996e-03, 1.052292781751777e-02, -1.408132140356057e-04, 1.670075233093990e-04, -2.255077005043594e-04, 2.962019288742064e-02, 2.539747830555350e-02, 2.486710921180340e-02, 2.676168487920261e-02, -7.216882018670083e-04, 3.759682204044189e-04, -1.868345242737344e-03, 3.012668054163946e-02, 2.287219402291612e-02, -8.700535869809484e-03, 7.099427683292554e-02, -8.598485081143799e-03, 7.575143822566599e-02, 1.104922105729534e-02, -1.844699825784414e-03, 2.066505842610034e-02, 2.470258761245612e-02, 5.687938089319292e-02, 9.514561163281464e-03, 5.687938089319278e-02, -1.421899738504702e-03, 6.961017851618998e-04, 7.414848661302412e-04, -1.230256486307604e-06, 8.015731840837038e-04, -1.001405521480857e-04, 3.310193665661695e-03, 3.571549469196527e-04, 3.529867930432445e-04, 6.047677586073054e-04, 4.495615396910044e-04, 6.047677586073054e-04, 4.495615396910044e-04, 8.787831045517166e-03, 8.789934127154236e-03, 8.785782901098183e-03, 8.787955006680736e-03, 8.787703765556333e-03, 8.789856323005328e-03, 8.785946731987028e-03, 8.788058746818471e-03, 7.365059376398503e-03, 8.788945697046436e-03, 8.786797093805506e-03, 7.366708903743993e-03, 1.641736963621985e-02, 1.646597462934807e-02, 1.675994681196009e-02, 1.679665381519387e-02, 1.608612583457522e-02, 1.623020858843819e-02, 1.640546699541836e-02, 1.654718271892972e-02, 1.684665717147788e-02, 4.075221409498285e-03, 1.684665717147788e-02, 1.667964361621183e-02, 7.314582510167819e-02, 4.110317540082461e-02, 7.163677023740894e-02, 7.166770071035956e-02, 6.963286767730967e-02, 7.272958854941849e-02, 7.661785719056168e-02, 7.623846406648423e-02, 7.247695494151617e-02, 4.218048233985709e-02, 7.247695494151617e-02, 7.456428457214599e-02, 1.010651700968812e-02, 1.023840103213591e-02, -6.461041515709599e-03, 3.242150351351575e-02, 8.651636670546270e-03, 9.771563181641728e-03, 2.304782607050681e-02, 2.306050751320538e-02, 1.569782306274902e-02, 2.269160269560278e-02, 1.569782306274907e-02, 2.269160269560277e-02, -5.028151979717652e-08, 2.276702209085039e-04, 3.346524079367243e-04, 3.189365773928675e-04, 6.719053473507366e-04, 7.457316048994486e-04, 5.846690212844061e-03, -5.598590520546569e-04, 2.976204100761017e-04, 7.296227994504242e-04, 2.976204100761012e-04, 7.296227994504256e-04, 7.627103099935073e-02, 7.594940450239744e-02, 7.753633293668828e-02, 7.720611510578221e-02, 7.206993638360819e-02, 7.189458070114067e-02, 7.269340969641055e-02, 7.643038675200090e-02, 7.238935668252645e-02, 7.219888019692451e-02, 7.238935668252645e-02, 7.661470105221931e-02, 7.850889020760590e-02, 7.821823707190988e-02, 8.285775214657876e-02, 3.845861172015044e-02, 8.593987844771629e-02, 5.362880709287574e-02, 8.498662790954138e-02, 8.470185126221849e-02, 8.593891227260132e-02, 8.568598583129845e-02, 8.593891227260128e-02, 6.010662502872658e-02, 6.779175540726531e-02, 4.922044944702568e-02, 4.660629100668542e-02, 4.711905806813371e-02, -3.257355126898833e-03, 6.468387082998056e-02, 2.018428949803537e-02, 9.109812489729194e-02, 8.258505830222902e-02, 8.316323874343362e-02, 8.258505830222912e-02, 7.823123119307796e-03, 8.156499604121818e-02, 8.275671624472995e-02, -9.961333742326219e-05, -9.963839136817806e-05, 3.953690061237841e-03, 4.204034552437706e-03, 1.085546731868120e-01, 1.161920972414950e-01, 9.094160836712979e-03, 1.143058955745768e-02, 9.094160836712953e-03, 1.143058955745765e-02, -1.456633350117823e-06, -1.597457431317661e-06, 9.644455450447253e-05, 9.645225770714427e-05, -7.234807900017224e-08, -9.221785891682229e-08, -1.164232508401038e-03, -1.358883206780549e-03, 4.530366188096457e-04, 6.806881156020048e-04, 4.530366188096432e-04, -5.496247614503920e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
