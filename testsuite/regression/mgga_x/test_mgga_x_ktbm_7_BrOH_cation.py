
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_7_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_7", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.336520484880213e+01, -2.336526909762625e+01, -2.336565629486324e+01, -2.336470274039990e+01, -2.336518788383945e+01, -2.336518788383945e+01, -3.417933562560020e+00, -3.418008263542439e+00, -3.420248403080137e+00, -3.421655887438672e+00, -3.420315577138743e+00, -3.420315577138743e+00, -6.272514475048812e-01, -6.267994318151556e-01, -6.168931327934867e-01, -6.256653790305848e-01, -6.243958591793131e-01, -6.243958591793131e-01, -1.817766562874527e-01, -1.844094791600711e-01, -7.084968390902060e-01, -1.322649066546793e-01, -1.716888913649789e-01, -1.716888913649789e-01, -6.123615190443516e-03, -6.444942996694403e-03, -3.528354874292779e-02, -3.500722343224888e-03, -4.909750459332883e-03, -4.909750459332884e-03, -5.707009913645075e+00, -5.707598970743944e+00, -5.707091100174603e+00, -5.707608909259806e+00, -5.707280859604559e+00, -5.707280859604559e+00, -2.093117572770438e+00, -2.118061838542379e+00, -2.088012741580100e+00, -2.110671640731154e+00, -2.109366320609670e+00, -2.109366320609670e+00, -6.106791282356150e-01, -6.555712791689593e-01, -5.443981873444188e-01, -5.522479823446089e-01, -6.232391054276833e-01, -6.232391054276835e-01, -9.176085611031240e-02, -1.790919975098615e-01, -8.490169542192154e-02, -1.886099751841480e+00, -1.089413460009915e-01, -1.089413460009915e-01, -2.651544350225192e-03, -3.389807800474879e-03, -2.617543988643838e-03, -5.697699836818530e-02, -3.291062883471728e-03, -3.291062883471731e-03, -6.343135815601371e-01, -6.334340920338970e-01, -6.337757829661286e-01, -6.340260832638935e-01, -6.339008494315077e-01, -6.339008494315077e-01, -6.118552396220656e-01, -5.397616672414176e-01, -5.628046599980105e-01, -5.832747507066987e-01, -5.726269934221389e-01, -5.726269934221389e-01, -6.779620680335855e-01, -2.298409818922492e-01, -2.759693402900479e-01, -3.552453760281511e-01, -3.161167713572611e-01, -3.161167713572611e-01, -4.781451328676151e-01, -3.387375774266152e-02, -4.592880834645978e-02, -3.450384932389937e-01, -7.297023802665722e-02, -7.297023802665722e-02, -8.471350649335296e-03, -8.818862229329678e-04, -1.931249447279949e-03, -6.874790982063407e-02, -3.023025451322186e-03, -3.023025451322183e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_7_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_7", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.867044030938828e+01, -2.867014605179416e+01, -2.867058252952816e+01, -2.867024937348803e+01, -2.867095214158405e+01, -2.867080293341828e+01, -2.866934565957957e+01, -2.866875531705189e+01, -2.867052844147771e+01, -2.866951116837139e+01, -2.867052844147771e+01, -2.866951116837139e+01, -4.552202108105345e+00, -4.552124257576900e+00, -4.552359217137159e+00, -4.552232661533290e+00, -4.555501749636747e+00, -4.556140243716499e+00, -4.554270051337684e+00, -4.554441065725302e+00, -4.551111881409087e+00, -4.557336059675229e+00, -4.551111881409087e+00, -4.557336059675229e+00, -8.008509299041531e-01, -8.054025394935075e-01, -7.993212491102878e-01, -8.046138991351017e-01, -7.792713964420314e-01, -7.750807288016318e-01, -7.879076424896593e-01, -7.905434909757478e-01, -8.112278403101212e-01, -7.659134694436914e-01, -8.112278403101212e-01, -7.659134694436914e-01, -2.134951937237096e-01, -2.236482449113074e-01, -2.157435431695782e-01, -2.273954633356830e-01, -8.764706219908650e-01, -9.058949069019042e-01, -1.620756996883271e-01, -1.653671764657961e-01, -2.224611054700414e-01, -1.187600528278084e-01, -2.224611054700414e-01, -1.187600528278085e-01, -7.389723296211916e-03, -7.851897399117836e-03, -7.744142722816687e-03, -8.295193329749307e-03, -4.305705558279685e-02, -4.546193517197493e-02, -4.446528381005915e-03, -4.371810166666597e-03, -6.593931304140125e-03, -3.757739985173293e-03, -6.593931304140129e-03, -3.757739985173296e-03, -7.088712159494077e+00, -7.086830622273370e+00, -7.092791014555814e+00, -7.090771302431224e+00, -7.088905000824878e+00, -7.086941747743288e+00, -7.092406044921034e+00, -7.090522782005884e+00, -7.090826382505787e+00, -7.088813620574596e+00, -7.090826382505787e+00, -7.088813620574596e+00, -2.497463123915303e+00, -2.497521301271310e+00, -2.518083655956383e+00, -2.517423268560578e+00, -2.479160677882335e+00, -2.484373918476150e+00, -2.496775298787607e+00, -2.502180305545512e+00, -2.523486454449538e+00, -2.510001256674805e+00, -2.523486454449538e+00, -2.510001256674805e+00, -7.897396967912809e-01, -7.877783659722695e-01, -9.033772442723227e-01, -9.043746229827475e-01, -6.995254271813337e-01, -7.358055143958548e-01, -7.685093141392165e-01, -7.999047111399837e-01, -8.272239793966737e-01, -7.844551040501883e-01, -8.272239793966739e-01, -7.844551040501887e-01, -1.142590442931372e-01, -1.152804831419798e-01, -2.177616268305671e-01, -2.187549819097579e-01, -1.033995076172379e-01, -1.089492672130879e-01, -2.706033726148128e+00, -2.704967283572230e+00, -1.305720938159088e-01, -1.382930446462509e-01, -1.305720938159089e-01, -1.382930446462511e-01, -3.340870431815692e-03, -3.471693086748892e-03, -4.281584082660580e-03, -4.346889270321342e-03, -3.199309000418123e-03, -3.388333366826760e-03, -7.145716789400247e-02, -7.193918922675403e-02, -3.273438328307685e-03, -4.483613706726504e-03, -3.273438328307692e-03, -4.483613706726506e-03, -8.416016415997624e-01, -8.450436957273136e-01, -8.232360964775665e-01, -8.268003177605361e-01, -8.295639752404020e-01, -8.331277539949827e-01, -8.349456770664923e-01, -8.383963553432653e-01, -8.322460218015798e-01, -8.357512234097618e-01, -8.322460218015798e-01, -8.357512234097616e-01, -8.245995391137486e-01, -8.272605003798182e-01, -6.333070006108619e-01, -6.363497477353800e-01, -6.772668215441695e-01, -6.809061512926863e-01, -7.315764016525975e-01, -7.344473368630514e-01, -7.033430393760430e-01, -7.061414713986695e-01, -7.033430393760429e-01, -7.061414713986696e-01, -9.434499024402527e-01, -9.464102492476384e-01, -2.762373647302189e-01, -2.778046457575178e-01, -3.297329117626360e-01, -3.331676782596109e-01, -4.425208796997787e-01, -4.450611299620151e-01, -3.817605773422449e-01, -3.816897435684476e-01, -3.817605773422448e-01, -3.816897435684475e-01, -5.841738126797813e-01, -5.890790101971285e-01, -4.224539835431409e-02, -4.253565933284573e-02, -5.679608938864630e-02, -5.868934788405447e-02, -4.321254828004083e-01, -4.422050910312663e-01, -8.860373165927181e-02, -9.346949612858252e-02, -8.860373165927175e-02, -9.346949612858255e-02, -1.058888275183267e-02, -1.097357377339523e-02, -1.153255313818467e-03, -1.155735424333501e-03, -2.340898172791809e-03, -2.489786162560581e-03, -8.493782457169473e-02, -8.643151070822389e-02, -3.100086678260814e-03, -4.109595397446175e-03, -3.100086678260806e-03, -4.109595397446167e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_7_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_7", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.069523168236006e-08, 0.000000000000000e+00, -3.069717483046197e-08, -3.069502093257372e-08, 0.000000000000000e+00, -3.069702136815011e-08, -3.069427276041876e-08, 0.000000000000000e+00, -3.069596951336487e-08, -3.069667200302981e-08, 0.000000000000000e+00, -3.069902300425933e-08, -3.069511651190866e-08, 0.000000000000000e+00, -3.069774680383198e-08, -3.069511651190866e-08, 0.000000000000000e+00, -3.069774680383198e-08, -2.705703425610026e-05, 0.000000000000000e+00, -2.705106857877246e-05, -2.706297722499035e-05, 0.000000000000000e+00, -2.705480254714797e-05, -2.717632584387963e-05, 0.000000000000000e+00, -2.719481118265385e-05, -2.713665253094163e-05, 0.000000000000000e+00, -2.713296782771121e-05, -2.706137486363525e-05, 0.000000000000000e+00, -2.723322630556850e-05, -2.706137486363525e-05, 0.000000000000000e+00, -2.723322630556850e-05, -9.325760353661460e-03, 0.000000000000000e+00, -9.488642858843818e-03, -9.295029164911466e-03, 0.000000000000000e+00, -9.466636443401073e-03, -8.760146997458990e-03, 0.000000000000000e+00, -8.780393148716906e-03, -9.204123374337899e-03, 0.000000000000000e+00, -9.365270325636072e-03, -9.375104139038160e-03, 0.000000000000000e+00, -8.845377209797570e-03, -9.375104139038160e-03, 0.000000000000000e+00, -8.845377209797570e-03, -1.254073047247895e+00, 0.000000000000000e+00, -1.364221691362140e+00, -1.262630751969677e+00, 0.000000000000000e+00, -1.378815590259794e+00, -2.214080310040389e-03, 0.000000000000000e+00, -2.575953137225825e-03, -9.692846749337884e-01, 0.000000000000000e+00, -1.133741871530123e+00, -1.064259179509111e+00, 0.000000000000000e+00, -1.133752993491729e+00, -1.064259179509110e+00, 0.000000000000000e+00, -1.133752993491729e+00, -4.374147820742247e+02, 0.000000000000000e+00, -3.895987915231854e+02, -4.042031522567758e+02, 0.000000000000000e+00, -3.561645482417200e+02, -9.053732461718493e+00, 0.000000000000000e+00, -8.449251020424178e+00, -9.803399141534300e+02, 0.000000000000000e+00, -1.027967977804486e+03, -5.290098892103508e+02, 0.000000000000000e+00, -1.949484522796361e+03, -5.290098892103506e+02, 0.000000000000000e+00, -1.949484522796361e+03, -9.145632803365289e-06, 0.000000000000000e+00, -9.154644604606487e-06, -9.145598571782128e-06, 0.000000000000000e+00, -9.154614470191501e-06, -9.145772058703508e-06, 0.000000000000000e+00, -9.154745605084188e-06, -9.145735757104374e-06, 0.000000000000000e+00, -9.154711296076103e-06, -9.145516583899402e-06, 0.000000000000000e+00, -9.154617636101843e-06, -9.145516583899402e-06, 0.000000000000000e+00, -9.154617636101843e-06, -2.436643151511532e-04, 0.000000000000000e+00, -2.447144525684455e-04, -2.455008514063390e-04, 0.000000000000000e+00, -2.464647763434877e-04, -2.425761700212285e-04, 0.000000000000000e+00, -2.439281045636462e-04, -2.445737055651868e-04, 0.000000000000000e+00, -2.458561807914899e-04, -2.453855052328702e-04, 0.000000000000000e+00, -2.458637166820985e-04, -2.453855052328702e-04, 0.000000000000000e+00, -2.458637166820985e-04, -4.424161590322430e-02, 0.000000000000000e+00, -4.512365511126010e-02, -3.723492094678026e-02, 0.000000000000000e+00, -3.746168583181536e-02, -5.056260866794777e-02, 0.000000000000000e+00, -4.964570386702549e-02, -5.195296465731512e-02, 0.000000000000000e+00, -4.863025961599605e-02, -4.055764622480434e-02, 0.000000000000000e+00, -4.693015504259317e-02, -4.055764622480436e-02, 0.000000000000000e+00, -4.693015504259318e-02, -1.495893044904882e+00, 0.000000000000000e+00, -1.464604567174886e+00, -6.659644556297775e-01, 0.000000000000000e+00, -6.569553674106755e-01, -1.723170757168674e+00, 0.000000000000000e+00, -1.672562821703218e+00, -3.962325327043553e-04, 0.000000000000000e+00, -3.970473732066566e-04, -1.537997478776207e+00, 0.000000000000000e+00, -1.852337306502643e+00, -1.537997478776207e+00, 0.000000000000000e+00, -1.852337306502644e+00, -1.287622892813683e+03, 0.000000000000000e+00, -1.158088204903179e+03, -9.762230486858975e+02, 0.000000000000000e+00, -8.803801807303547e+02, -4.942365663663689e+03, 0.000000000000000e+00, -4.603895856995977e+03, -3.597749664268029e+00, 0.000000000000000e+00, -3.937346764505261e+00, -1.678052561752785e+03, 0.000000000000000e+00, -2.039868368649363e+03, -1.678052561752786e+03, 0.000000000000000e+00, -2.039868368649363e+03, -5.865045686926838e-02, 0.000000000000000e+00, -5.778627439911455e-02, -5.911599709957730e-02, 0.000000000000000e+00, -5.825578491756171e-02, -5.898131865992304e-02, 0.000000000000000e+00, -5.811806135601467e-02, -5.884712107461264e-02, 0.000000000000000e+00, -5.798361642487203e-02, -5.891670118891237e-02, 0.000000000000000e+00, -5.805326963157403e-02, -5.891670118891237e-02, 0.000000000000000e+00, -5.805326963157403e-02, -6.477779472947105e-02, 0.000000000000000e+00, -6.399126208260998e-02, -8.552982732055905e-02, 0.000000000000000e+00, -8.464428264692608e-02, -8.259980290544802e-02, 0.000000000000000e+00, -8.160735131517914e-02, -7.694975195084720e-02, 0.000000000000000e+00, -7.597463566249921e-02, -8.007215900880132e-02, 0.000000000000000e+00, -7.912496033399763e-02, -8.007215900880132e-02, 0.000000000000000e+00, -7.912496033399763e-02, -2.942973760783209e-02, 0.000000000000000e+00, -2.971630206783492e-02, -4.711066073378902e-01, 0.000000000000000e+00, -4.678708850462389e-01, -3.650881474787607e-01, 0.000000000000000e+00, -3.658785248040304e-01, -2.364559358237935e-01, 0.000000000000000e+00, -2.316861750609620e-01, -3.169216829325184e-01, 0.000000000000000e+00, -3.196492645703585e-01, -3.169216829325188e-01, 0.000000000000000e+00, -3.196492645703586e-01, -1.008919830839808e-01, 0.000000000000000e+00, -1.013320365568239e-01, -9.956080513988931e+00, 0.000000000000000e+00, -9.676092284768032e+00, -5.062338089876912e+00, 0.000000000000000e+00, -4.880911559167018e+00, -3.266178922650085e-01, 0.000000000000000e+00, -3.505145240536177e-01, -2.955455531668944e+00, 0.000000000000000e+00, -3.135617555491952e+00, -2.955455531668944e+00, 0.000000000000000e+00, -3.135617555491954e+00, -1.326158704265955e+02, 0.000000000000000e+00, -1.216894922817383e+02, -1.159783528485253e+04, 0.000000000000000e+00, -1.054706381483212e+04, -6.324572426022851e+03, 0.000000000000000e+00, -5.748467271861874e+03, -3.483082157244008e+00, 0.000000000000000e+00, -3.720727896631425e+00, -3.137412668446428e+03, 0.000000000000000e+00, -2.470772129280174e+03, -3.137412668446436e+03, 0.000000000000000e+00, -2.470772129280179e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_7_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_7", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.098237266060028e-03, 2.098393651052087e-03, 2.098235050085414e-03, 2.098392016532184e-03, 2.098242431091375e-03, 2.098398497711363e-03, 2.098268587153598e-03, 2.098431616550240e-03, 2.098235801854544e-03, 2.098428920468543e-03, 2.098235801854544e-03, 2.098428920468543e-03, 6.319499468771976e-03, 6.313261486679327e-03, 6.321914291028071e-03, 6.314415669903137e-03, 6.363982786208135e-03, 6.370234704835334e-03, 6.368083005134793e-03, 6.363715613518128e-03, 6.315584087200561e-03, 6.401861073103328e-03, 6.315584087200561e-03, 6.401861073103328e-03, 9.305958227511043e-03, 9.529772609887513e-03, 9.273104053363665e-03, 9.480616064109375e-03, 8.563165486190610e-03, 8.871358863461536e-03, 1.024389749433413e-02, 1.053446540057321e-02, 9.171539965402114e-03, 1.099892222420554e-02, 9.171539965402114e-03, 1.099892222420554e-02, 5.155096201297688e-02, 6.775992262790065e-02, 5.279863808912773e-02, 7.128628745887501e-02, 2.568969637666576e-04, 7.146163579017737e-04, 1.359326224380810e-02, 1.935078469600949e-02, 4.872259751095580e-02, 4.945256902386663e-03, 4.872259751095581e-02, 4.945256902386681e-03, 6.836503305431493e-04, 7.357901653717470e-04, 7.211021047841750e-04, 7.881847420675772e-04, 2.530583712529038e-03, 2.838675222914849e-03, 2.974576218227106e-04, 3.022254314777486e-04, 5.725326916460330e-04, 3.192619627430550e-04, 5.725326916460337e-04, 3.192619627430537e-04, 8.777742215045958e-03, 8.780420936474097e-03, 8.775835668874245e-03, 8.778577028113481e-03, 8.777853964017960e-03, 8.780514427861269e-03, 8.776209027989281e-03, 8.778830663288120e-03, 8.776606151939008e-03, 8.779471384790589e-03, 8.776606151939008e-03, 8.779471384790589e-03, 1.460279338937010e-02, 1.470345267895934e-02, 1.518202813827148e-02, 1.526188883043878e-02, 1.455948176185003e-02, 1.466531291905311e-02, 1.509361888556762e-02, 1.520512414229577e-02, 1.496464126175872e-02, 1.501081394219198e-02, 1.496464126175872e-02, 1.501081394219198e-02, 5.956515886011408e-02, 6.056780811774874e-02, 5.982405335959216e-02, 6.043296376426115e-02, 4.411685644967233e-02, 5.196896981434942e-02, 4.751823405509295e-02, 5.215382583145865e-02, 6.212571388775009e-02, 6.016019670233769e-02, 6.212571388775014e-02, 6.016019670233779e-02, 7.902128847861239e-03, 7.818621831570255e-03, 2.923247581665842e-02, 2.912748991783499e-02, 6.440429135819804e-03, 7.614830109817225e-03, 1.580892478787619e-02, 1.582200504497488e-02, 1.293366556758934e-02, 1.938934078431819e-02, 1.293366556758937e-02, 1.938934078431838e-02, 1.186967620484438e-04, 1.235612198833451e-04, 2.337043372071059e-04, 2.154198414908860e-04, 5.563509975893021e-04, 6.114783354337671e-04, 4.266129151521753e-03, 5.205665855048542e-03, 1.238221414281176e-04, 7.014940170249714e-04, 1.238221414281207e-04, 7.014940170249773e-04, 7.498005297814152e-02, 7.470239390324619e-02, 7.613558208498576e-02, 7.585248284513450e-02, 7.575836244690264e-02, 7.547426466567314e-02, 7.542013552180324e-02, 7.514150973989407e-02, 7.559125429676646e-02, 7.531007456991888e-02, 7.559125429676646e-02, 7.531007456991888e-02, 7.584768201159696e-02, 7.566676944937585e-02, 8.027583828183769e-02, 8.031208703035883e-02, 8.272366190711039e-02, 8.261745237138836e-02, 8.165900157184468e-02, 8.141471352159629e-02, 8.236717536246364e-02, 8.226219398863706e-02, 8.236717536246364e-02, 8.226219398863704e-02, 5.312218304048224e-02, 5.432715438860950e-02, 4.360988851272702e-02, 4.399696648043216e-02, 5.438579794220368e-02, 5.612496796240613e-02, 6.583445375470622e-02, 6.523301109128235e-02, 6.735525379596573e-02, 6.777713186512807e-02, 6.735525379596580e-02, 6.777713186512806e-02, 6.760830420490309e-02, 6.992091156342230e-02, 2.833671333188799e-03, 2.779161838576030e-03, 3.211397216569426e-03, 3.441315620927489e-03, 7.685262956200895e-02, 9.314650165970098e-02, 7.343042326185586e-03, 9.304464522425596e-03, 7.343042326185587e-03, 9.304464522425587e-03, 4.729075613855118e-04, 4.743555549659858e-04, 3.066754818677025e-05, 2.105101748943984e-05, 2.986337806477586e-04, 3.257749834124507e-04, 7.809446026590479e-03, 9.452983662714127e-03, 2.201339677692675e-04, 6.537978554389299e-04, 2.201339677692643e-04, 6.537978554389218e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
