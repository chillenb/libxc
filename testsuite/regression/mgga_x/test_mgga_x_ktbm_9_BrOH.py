
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_9_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_9", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.151077258465738e+01, -2.151087407073081e+01, -2.151136071399262e+01, -2.150970322510522e+01, -2.151082575652991e+01, -2.151082575652991e+01, -3.043317631447474e+00, -3.043437640714471e+00, -3.047160664256688e+00, -3.045961348661028e+00, -3.043365420514625e+00, -3.766238939922497e+00, -5.239961682051864e-01, -6.572694860861673e-01, -6.278005103636016e-01, -6.379924302394645e-01, -6.580184976948182e-01, -6.580184976948182e-01, -1.762974291974086e-01, -1.797272955635581e-01, -6.115193908692671e-01, -1.151135585741554e-01, -1.773058059032018e-01, -1.773058059032018e-01, -8.456002845977251e-03, -8.857716785865033e-03, -3.619857816829754e-02, -4.054728179092623e-03, -8.765418256663401e-03, -8.765418256663401e-03, -5.814947985471873e+00, -5.815440904890687e+00, -5.814997509612898e+00, -5.386041377169136e+00, -5.815202859490126e+00, -5.815202859490126e+00, -1.652933616249058e+00, -1.675114562771426e+00, -1.643676299749883e+00, -1.661013718057432e+00, -1.680209921070532e+00, -2.101898303151708e+00, -6.457084844247608e-01, -7.067896411280443e-01, -6.050958209731582e-01, -6.419377937753323e-01, -6.740408118321227e-01, -5.797794439079310e-01, -7.405798635978834e-02, -1.675118223796578e-01, -7.307411895166611e-02, -2.145414326680805e+00, -9.728422949559620e-02, -9.728422949559620e-02, -3.635336929176245e-03, -4.470375808647500e-03, -3.350607809183561e-03, -4.637590758568439e-02, -3.785463647831713e-03, -4.073173284865055e-03, -6.589995230437005e-01, -6.595236346344779e-01, -6.386644698165367e-01, -6.592816687695209e-01, -6.593636315818563e-01, -6.593636315818563e-01, -6.393486561905654e-01, -5.578643528180993e-01, -5.884019694340649e-01, -6.116178918497956e-01, -6.004378976137457e-01, -5.331632329164727e-01, -7.411223713062498e-01, -1.778482904385182e-01, -2.731415610647267e-01, -2.977470002893363e-01, -3.216213103228268e-01, -3.216213103228268e-01, -4.009191125464183e-01, -3.349104075682326e-02, -4.550819308972590e-02, -3.599499587969922e-01, -6.018520074067425e-02, -6.688730513827937e-02, -9.909607662945817e-03, -1.223798120825235e-03, -2.324845512964115e-03, -6.380749937652960e-02, -3.461612095660778e-03, -3.461612095660772e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_9_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_9", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.172539503507596e+01, -3.172546502148793e+01, -3.172583459893945e+01, -3.172468662922433e+01, -3.172543147343293e+01, -3.172543147343293e+01, -4.878993059725203e+00, -4.879186114219859e+00, -4.885142493697843e+00, -4.883231910557419e+00, -4.879069863781503e+00, -4.739041854994027e+00, -7.794762566220044e-01, -8.569255917457665e-01, -8.157860284970229e-01, -8.305223155133518e-01, -8.579432418468766e-01, -8.579432418468766e-01, -2.289779887539405e-01, -2.337713617844280e-01, -8.579937541990946e-01, -1.416277626794723e-01, -2.303888735537510e-01, -2.303888735537510e-01, -1.015416752915809e-02, -1.063672145826540e-02, -4.354994054389138e-02, -4.868317225394326e-03, -1.052588837999712e-02, -1.052588837999713e-02, -7.186127874427162e+00, -7.189317311750920e+00, -7.186473542807798e+00, -7.696579559083649e+00, -7.187734621480401e+00, -7.187734621480401e+00, -2.632833024446838e+00, -2.674002856340332e+00, -2.615184605122094e+00, -2.647891845575853e+00, -2.683451950116640e+00, -2.680611368072609e+00, -7.874581344801467e-01, -8.599135628658162e-01, -7.495806684802355e-01, -7.786776766802349e-01, -8.169886784644593e-01, -8.932216492552051e-01, -9.767653541677648e-02, -2.120984839800543e-01, -9.636166210110733e-02, -2.599556523051731e+00, -1.193034265212680e-01, -1.193034265212680e-01, -4.846818333354750e-03, -5.367409269229591e-03, -4.022960655060825e-03, -6.146048361053647e-02, -5.046945582123243e-03, -4.890491652658454e-03, -8.580611968570085e-01, -8.415609933332764e-01, -8.741789195853077e-01, -8.518279417580482e-01, -8.495201877390383e-01, -8.495201877390383e-01, -8.261571577823771e-01, -6.828104961717897e-01, -7.124111532242937e-01, -7.476787305955785e-01, -7.284312502231446e-01, -7.958018700641808e-01, -8.978030926822187e-01, -2.535328851725125e-01, -3.563083721225545e-01, -4.749408318079739e-01, -4.166464701108853e-01, -4.166464701108852e-01, -6.424450098312358e-01, -4.027686813084528e-02, -5.480735769459738e-02, -4.516279683558754e-01, -7.942987730812658e-02, -8.106131317058275e-02, -1.189940819129137e-02, -1.469326311271174e-03, -2.791301854271617e-03, -7.732609844840022e-02, -4.156198467428086e-03, -4.156198467428079e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_9_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_9", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.444791483171910e-08, -1.444787424853107e-08, -1.444758064877708e-08, -1.444825764344348e-08, -1.444789423856526e-08, -1.444789423856526e-08, -1.189052100083467e-05, -1.189273026654683e-05, -1.195749103538679e-05, -1.192859915847887e-05, -1.189090802322603e-05, -1.547575895752718e-05, -3.623542479922124e-03, -5.358548220276267e-03, -4.984770613934230e-03, -5.236820092710978e-03, -5.368475293021693e-03, -5.368475293021693e-03, -7.809176533012449e-01, -7.863258788797656e-01, -9.561093233822175e-04, -5.750340778787955e-01, -7.818802527495198e-01, -7.818802527495198e-01, -1.316269606969785e+02, -1.196211071746502e+02, -4.682283721281800e+00, -3.375482639589304e+02, -1.249289754251702e+02, -1.249289754251700e+02, -4.851024606443172e-06, -4.850565081619520e-06, -4.850992664846828e-06, -4.429687974763192e-06, -4.850774222463018e-06, -4.850774222463018e-06, -9.757431738417066e-05, -9.872498900683522e-05, -9.693218513272064e-05, -9.793391183311254e-05, -9.916497307410534e-05, -1.321811933763564e-04, -2.546701507783640e-02, -2.155885870685394e-02, -2.779770661531668e-02, -2.809105408686674e-02, -2.346140027487438e-02, -1.966012986468111e-02, -2.601021989710331e-01, -3.772598377520558e-01, -3.024531303219274e-01, -2.303292216200896e-04, -9.547194897749119e-01, -9.547194897749119e-01, -2.060708328064605e+01, -3.121431008018307e+02, -1.101830875891230e+03, -3.334765646804729e-01, -1.923741357998979e+01, -4.172854321104249e+02, -2.884319886980697e-02, -2.921327054468105e-02, -2.799626721789165e-02, -2.899214862308659e-02, -2.904436929976018e-02, -2.904436929976018e-02, -3.277756651447304e-02, -4.382817940552262e-02, -4.195406084063432e-02, -3.905332607952140e-02, -4.064910027736786e-02, -3.535869567653017e-02, -1.718830635413164e-02, -1.652286364191571e-01, -2.010464718484760e-01, -9.658603189823019e-02, -1.728115775396918e-01, -1.728115775396918e-01, -4.326331251600279e-02, -5.203304029132361e+00, -2.798203618124252e+00, -1.921064182204385e-01, -4.568092611528390e-01, -1.785478236219571e+00, -5.980916725095925e+01, -4.371922048593706e+03, -1.699572481740502e+03, -2.147602760627898e+00, -6.848212032777808e+02, -6.848212032777818e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_9_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_9", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.784942856707086e-03, 1.784944036977646e-03, 1.784945596201342e-03, 1.784926886496164e-03, 1.784943502844727e-03, 1.784943502844727e-03, 6.182576923374300e-03, 6.184225563276722e-03, 6.233587394000309e-03, 6.213978346235750e-03, 6.183005162930082e-03, 1.439742523140226e-02, 7.554352487090677e-03, 3.836696510453289e-02, 3.266232688989894e-02, 3.527760117672058e-02, 3.851762714813636e-02, 3.851762714813636e-02, 1.138222792900105e-01, 1.196534324478872e-01, 1.854623124327124e-03, 2.667454611126054e-02, 1.154521374925503e-01, 1.154521374925503e-01, 2.215802078440568e-03, 2.315054145535329e-03, 6.319663871294785e-03, 6.251785328187267e-04, 2.342991896267767e-03, 2.342991896267777e-03, 9.194621183122540e-03, 9.177823244274493e-03, 9.192772756217658e-03, 7.470875757171729e-03, 9.186188299515088e-03, 9.186188299515088e-03, 8.236580766668227e-03, 8.683796842282933e-03, 8.036803572649350e-03, 8.393966313957195e-03, 8.802412447841943e-03, 2.329595258527301e-02, 9.536547464734026e-02, 8.233752606790647e-02, 9.703981130603934e-02, 9.627299254765520e-02, 9.155265734159890e-02, 5.709740681953793e-02, -6.393542549552849e-04, 5.249453864610813e-02, -6.946916284291681e-04, 2.873168055265623e-02, 2.668159676319768e-02, 2.668159676319768e-02, -2.558402621641253e-07, 7.748572693108229e-04, 1.151712470135077e-03, -2.295737938734565e-04, -2.946011803768098e-07, 7.835238839194037e-04, 6.427904144423219e-02, 7.011223569832309e-02, 6.294149815830263e-02, 6.643367660056079e-02, 6.724673705578194e-02, 6.724673705578194e-02, 6.847482101148875e-02, 1.095350510349825e-01, 1.039790298625522e-01, 9.245973901940426e-02, 9.897203269205028e-02, 6.995587651269565e-02, 8.135366650102049e-02, 9.618634204503677e-03, 1.008002506487191e-01, 4.769933001278426e-02, 1.233487564533183e-01, 1.233487564533183e-01, 5.083188281946258e-02, 5.540703091920157e-03, 7.572338123375415e-03, 1.532519833615356e-01, -6.399541563054538e-04, 1.585635653930547e-02, 1.619868167831791e-03, 2.225642154278235e-04, 5.932516223032681e-04, 1.655512416305244e-02, 7.892354391744936e-04, 7.892354391744927e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
