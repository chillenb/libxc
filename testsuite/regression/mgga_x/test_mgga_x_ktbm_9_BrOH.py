
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_9_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_9", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.378091253653507e+01, -2.378097371973584e+01, -2.378137304247972e+01, -2.378037534758106e+01, -2.378094365935390e+01, -2.378094365935390e+01, -3.338481111451275e+00, -3.338609437894618e+00, -3.342720611157545e+00, -3.343289460752463e+00, -3.338520455237625e+00, -3.338520455237625e+00, -5.671092296360758e-01, -5.664381262391358e-01, -5.504774087287484e-01, -5.613184903617334e-01, -5.668730493580981e-01, -5.668730493580981e-01, -1.713188537605209e-01, -1.739758550239780e-01, -6.310279410324648e-01, -1.089144109337086e-01, -1.720439680605703e-01, -1.720439680605703e-01, -8.433632579911862e-03, -8.828198598725308e-03, -3.556345391093593e-02, -3.913238560661375e-03, -8.740026980031970e-03, -8.740026980031968e-03, -5.811987910776244e+00, -5.812513804655163e+00, -5.812078406707514e+00, -5.812485335911417e+00, -5.812209103040407e+00, -5.812209103040407e+00, -2.014243727774175e+00, -2.045064870730191e+00, -2.010121057592681e+00, -2.034749002335447e+00, -2.040319535615082e+00, -2.040319535615082e+00, -6.009256415496304e-01, -6.533275751272596e-01, -5.462904885086874e-01, -5.732313292612738e-01, -6.358842492663409e-01, -6.358842492663409e-01, -8.026583835219749e-02, -1.645429539000516e-01, -7.932325386086803e-02, -1.900525040576258e+00, -9.475210215853812e-02, -9.475210215853812e-02, -3.831080006727088e-03, -4.341834441913615e-03, -3.302552943669570e-03, -4.876281377705540e-02, -3.929673697071171e-03, -3.929673697071171e-03, -6.523596211864895e-01, -6.531032619598630e-01, -6.529249599814807e-01, -6.527173127203321e-01, -6.528258992800948e-01, -6.528258992800950e-01, -6.265201213403268e-01, -5.519687400466755e-01, -5.799876728782772e-01, -6.010650997096676e-01, -5.904419832014790e-01, -5.904419832014790e-01, -6.731069422553048e-01, -2.171656715482724e-01, -2.641776961993801e-01, -3.441667011608461e-01, -3.060044140714864e-01, -3.060044140714864e-01, -4.674717165175712e-01, -3.313843776567971e-02, -4.452495661274816e-02, -3.289031986103331e-01, -6.526760047617387e-02, -6.526760047617389e-02, -9.573323876484640e-03, -1.171538555585925e-03, -2.300027271599417e-03, -6.216309013132582e-02, -3.335449998162373e-03, -3.335449998162368e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_9_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_9", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.934498766503498e+01, -2.934507329157937e+01, -2.934540641217420e+01, -2.934399916674066e+01, -2.934503330873717e+01, -2.934503330873717e+01, -4.866280016049669e+00, -4.866389909758125e+00, -4.869821354644487e+00, -4.868588682396842e+00, -4.866335523473898e+00, -4.866335523473898e+00, -8.157266884987632e-01, -8.141163520367513e-01, -7.749563491055702e-01, -7.929515849900912e-01, -8.151576238624113e-01, -8.151576238624113e-01, -2.270522779485045e-01, -2.316280777533243e-01, -8.818424921566750e-01, -1.398177202464666e-01, -2.283707228011056e-01, -2.283707228011056e-01, -1.016713377589461e-02, -1.065377824783461e-02, -4.381707226014790e-02, -4.950148146482314e-03, -1.054056540610274e-02, -1.054056540610273e-02, -7.189954845530942e+00, -7.193105066779617e+00, -7.190247950017701e+00, -7.192699105089552e+00, -7.191606856972218e+00, -7.191606856972218e+00, -2.664266540751723e+00, -2.687566754683980e+00, -2.653103603775297e+00, -2.671569602909519e+00, -2.694623220994786e+00, -2.694623220994786e+00, -8.220103386093582e-01, -9.183736410704583e-01, -7.797599812210683e-01, -8.357864785029059e-01, -8.522831614254410e-01, -8.522831614254410e-01, -1.004622342637673e-01, -2.108499504263879e-01, -9.934648221184129e-02, -2.809487387564083e+00, -1.188440260615235e-01, -1.188440260615235e-01, -4.743532442416340e-03, -5.442006314675990e-03, -4.051148253559581e-03, -6.161140251631900e-02, -4.973370418565382e-03, -4.973370418565382e-03, -8.668937661991366e-01, -8.500924124096505e-01, -8.559126001395541e-01, -8.605676092940021e-01, -8.582239097723272e-01, -8.582239097723275e-01, -8.430299552882611e-01, -6.874662318335892e-01, -7.212264106597754e-01, -7.605348859587984e-01, -7.398235049807423e-01, -7.398235049807425e-01, -9.654543715131007e-01, -2.835586890075286e-01, -3.538264511731383e-01, -4.806797357524245e-01, -4.159714474820650e-01, -4.159714474820650e-01, -6.294964649701844e-01, -4.043714759115137e-02, -5.515156790613958e-02, -4.630514068988439e-01, -8.119263402869993e-02, -8.119263402870000e-02, -1.208971013272528e-02, -1.499474660412348e-03, -2.805953914643743e-03, -7.745623475991210e-02, -4.229047534117962e-03, -4.229047534117956e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_9_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_9", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.625472398812778e-08, -1.625463820969843e-08, -1.625420086774428e-08, -1.625561915063232e-08, -1.625467904657662e-08, -1.625467904657662e-08, -1.333516565836157e-05, -1.333754848336155e-05, -1.340796032864352e-05, -1.338577431739164e-05, -1.333551340567967e-05, -1.333551340567967e-05, -4.205870112438865e-03, -4.195294136744879e-03, -3.940826357376047e-03, -4.207060165837622e-03, -4.202605223552805e-03, -4.202605223552805e-03, -7.439345006479292e-01, -7.451420190416392e-01, -1.054066890861130e-03, -4.613559855160677e-01, -7.432377555189247e-01, -7.432377555189247e-01, -1.291942288273187e+02, -1.168326860048068e+02, -4.143423622640672e+00, -2.419174659934652e+02, -1.224013560881351e+02, -1.224013560881350e+02, -4.848080071374832e-06, -4.847653573458096e-06, -4.848088893968107e-06, -4.847753407736214e-06, -4.847796319693695e-06, -4.847796319693695e-06, -1.262877510541778e-04, -1.276805640009519e-04, -1.262216583143656e-04, -1.274626347281465e-04, -1.272824530933886e-04, -1.272824530933886e-04, -2.338300216420659e-02, -1.965058565340035e-02, -2.457369823964705e-02, -2.458443406051942e-02, -2.189932098473323e-02, -2.189932098473323e-02, -7.946692322010560e-01, -3.619076240118423e-01, -8.945179549540980e-01, -1.997409706110866e-04, -8.619179521800516e-01, -8.619179521800516e-01, -3.782865855772159e+02, -2.416803509972556e+02, -9.855341691405556e+02, -1.623186788539701e+00, -2.977574865020819e+02, -2.977574865020815e+02, -2.849204141274262e-02, -2.887166258239576e-02, -2.874885204796046e-02, -2.864413591329175e-02, -2.869747523162484e-02, -2.869747523162484e-02, -3.198623908791612e-02, -4.327417875475294e-02, -4.124375106989075e-02, -3.825489124606508e-02, -3.984856489095687e-02, -3.984856489095686e-02, -1.534896796879478e-02, -2.556815298212640e-01, -1.911320470807878e-01, -1.166048448831327e-01, -1.615735711127632e-01, -1.615735711127632e-01, -5.219908229371829e-02, -4.844845082803758e+00, -2.417217359185011e+00, -1.719513503139271e-01, -1.569987341176177e+00, -1.569987341176177e+00, -4.358242544239461e+01, -2.777434579371296e+03, -1.567721826652030e+03, -1.870349312544085e+00, -4.803786454442529e+02, -4.803786454442539e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_9_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_9", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_9_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_9", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.378531613222508e-03, 2.378515170987581e-03, 2.378461525998573e-03, 2.378731017478918e-03, 2.378522769071736e-03, 2.378522769071736e-03, 9.396732995055992e-03, 9.398555084628087e-03, 9.454408269915181e-03, 9.453297947038966e-03, 9.397057762992775e-03, 9.397057762992775e-03, 1.712864111821719e-02, 1.704508925235410e-02, 1.523093169992059e-02, 1.746488265788309e-02, 1.710155263375330e-02, 1.710155263375330e-02, 9.942534328108428e-02, 1.029131353636756e-01, 4.134305326098022e-03, 1.507188114489433e-02, 1.002138575575495e-01, 1.002138575575495e-01, 2.131405547444011e-03, 2.204091883950621e-03, 4.863307648169769e-03, 3.109114308605297e-04, 2.245365901953518e-03, 2.245365901953515e-03, 9.182389875957613e-03, 9.165760101298184e-03, 9.180714210121559e-03, 9.167783085052764e-03, 9.173834264754923e-03, 9.173834264754923e-03, 2.058862613886641e-02, 2.129424803660188e-02, 2.058901445478388e-02, 2.117506724284526e-02, 2.105147998587559e-02, 2.105147998587559e-02, 7.651342656173969e-02, 6.597994213121033e-02, 6.923766221020945e-02, 6.800556352276997e-02, 7.710989038994705e-02, 7.710989038994705e-02, 1.095780326235457e-02, 4.700726858589647e-02, 1.194642478003275e-02, 1.983369436191619e-02, 2.076917066653627e-02, 2.076917066653627e-02, 5.233690225415011e-04, 4.535806706831782e-04, 9.127835351336546e-04, 4.329643155454771e-03, 3.860345525814782e-04, 3.860345525814812e-04, 6.275924685647860e-02, 6.844270785532937e-02, 6.643264244088537e-02, 6.485584374436698e-02, 6.564695572575041e-02, 6.564695572575042e-02, 6.521616484106214e-02, 1.061210068439751e-01, 9.982070583889466e-02, 8.821970323304947e-02, 9.447513712695824e-02, 9.447513712695825e-02, 6.142889931411375e-02, 7.179454221888279e-02, 8.749231418015277e-02, 9.646074240195467e-02, 1.021955032143013e-01, 1.021955032143013e-01, 9.468175852239737e-02, 4.760717974134664e-03, 5.509691299663163e-03, 1.127610863473056e-01, 1.180297711127571e-02, 1.180297711127575e-02, 8.330595739967205e-04, 8.575855992020080e-05, 5.014548856366150e-04, 1.204900043252273e-02, 3.750590007479185e-04, 3.750590007479164e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
