
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_tpss_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.990391377412479e+01, -1.990397421011460e+01, -1.990425804443654e+01, -1.990335889573926e+01, -1.990382786975947e+01, -1.990382786975947e+01, -3.234944274553457e+00, -3.234940169035268e+00, -3.234891083518711e+00, -3.235203454901593e+00, -3.234833775077382e+00, -3.704951420064266e+00, -6.332783260003031e-01, -7.541975792608216e-01, -7.479960546337399e-01, -7.475033199367547e-01, -7.476854793776371e-01, -7.476854793776371e-01, -2.073849949275024e-01, -2.087530316413890e-01, -7.446297562288419e-01, -1.833085705253524e-01, -1.930427200588264e-01, -1.930427200588264e-01, -1.008749878382169e-02, -1.061666355343936e-02, -5.776652503199600e-02, -5.828381314070652e-03, -7.322707490841747e-03, -7.322707490841747e-03, -5.479812117260666e+00, -5.480818564519859e+00, -5.479862243822365e+00, -4.866507824758401e+00, -5.480320224152019e+00, -5.480320224152019e+00, -1.826757278562736e+00, -1.838583686591806e+00, -1.818240665491659e+00, -1.828627226147893e+00, -1.837414630838800e+00, -2.113886071053742e+00, -6.189990390173223e-01, -6.708775449049562e-01, -5.761111891543468e-01, -5.953095698659332e-01, -6.284478849698582e-01, -5.536247382153061e-01, -8.757031029975122e-02, -2.254557781953895e-01, -8.102718564975862e-02, -2.022720953445568e+00, -1.548818317754050e-01, -1.548818317754050e-01, -2.580266626392717e-03, -5.697858971713032e-03, -4.356405519282660e-03, -5.452631588912357e-02, -3.011503629504510e-03, -5.248255712351583e-03, -6.203088917024043e-01, -6.169196501018211e-01, -5.511033217035580e-01, -6.191174781299016e-01, -6.186270937782863e-01, -6.186270937782863e-01, -6.035293925820352e-01, -5.209434381590058e-01, -5.432945219748725e-01, -5.669308681714832e-01, -5.547250791001663e-01, -4.902445289179169e-01, -7.034710490847987e-01, -2.085659973049198e-01, -3.011026376791245e-01, -3.246225815311647e-01, -3.320848779258266e-01, -3.320848779258266e-01, -4.214536290800031e-01, -5.535174398207950e-02, -7.471623531607739e-02, -3.562508860053409e-01, -6.939555289989853e-02, -1.124943550398780e-01, -1.423328982899095e-02, -1.523293503010479e-03, -3.197205141949161e-03, -1.062415114315567e-01, -4.856253051946943e-03, -4.856253051946939e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_tpss_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.680343652264652e+01, -2.680351656620545e+01, -2.680389335678717e+01, -2.680270236676317e+01, -2.680332345159164e+01, -2.680332345159164e+01, -4.242675846994047e+00, -4.242719571542516e+00, -4.243955546360267e+00, -4.243838452243452e+00, -4.243409925615888e+00, -4.464033534028652e+00, -8.236538745643285e-01, -7.606096869736083e-01, -7.226101024714123e-01, -7.363718294377121e-01, -7.332221054816902e-01, -7.332221054816902e-01, -1.871136768664935e-01, -1.902542159693342e-01, -9.792375961189348e-01, -1.735780605727489e-01, -1.710623205225142e-01, -1.710623205225143e-01, -1.343362043201513e-02, -1.413605856329313e-02, -7.480304980991875e-02, -7.768471236523231e-03, -9.757281479590629e-03, -9.757281479590629e-03, -6.753322782714759e+00, -6.752837691584987e+00, -6.753285485461650e+00, -6.542623349137469e+00, -6.753085687910578e+00, -6.753085687910578e+00, -2.377351668297459e+00, -2.395720998718805e+00, -2.364246107533603e+00, -2.380104571348953e+00, -2.394017260989055e+00, -2.476872111728959e+00, -7.740163722411956e-01, -8.347843025986118e-01, -7.050927249578707e-01, -7.446759605469275e-01, -7.873875138603443e-01, -7.428958865579510e-01, -1.165700060007698e-01, -1.991421289448635e-01, -1.078859935541236e-01, -2.535510153332925e+00, -1.552385611434382e-01, -1.552385611434382e-01, -3.440351105338703e-03, -7.594770189395130e-03, -5.805521611121727e-03, -7.265380963186556e-02, -4.015324251353923e-03, -6.994404292595867e-03, -7.407215044751618e-01, -7.465166664368866e-01, -7.378070358845130e-01, -7.429470960443048e-01, -7.438107955850707e-01, -7.438107955850707e-01, -7.220719955618313e-01, -6.450870418274262e-01, -6.810321177942364e-01, -7.047999699471714e-01, -6.941832648676804e-01, -6.600674121018475e-01, -8.795285899335979e-01, -2.741094687120513e-01, -2.923957953799878e-01, -4.222323364953199e-01, -3.589236644967853e-01, -3.589236644967853e-01, -5.538923964803655e-01, -7.183771746627587e-02, -9.504275689121307e-02, -4.330018802503957e-01, -9.240440760601658e-02, -1.293233162320040e-01, -1.894590440650627e-02, -2.031007797787283e-03, -4.262154041111478e-03, -1.235345909068313e-01, -6.471911285593174e-03, -6.471911285593168e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_tpss_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.856381924798151e-09, -6.856419445113126e-09, -6.856516798196853e-09, -6.855967764171030e-09, -6.856265108822309e-09, -6.856265108822309e-09, -4.825647431572352e-06, -4.826732776969010e-06, -4.855082995812677e-06, -4.841852668983780e-06, -4.845283226648162e-06, -4.980179352878860e-06, -1.807744877466234e-03, -3.273659090220157e-03, -3.545228503341397e-03, -3.482001840666449e-03, -3.495623072027295e-03, -3.495623072027295e-03, -6.368029840399364e-01, -6.161085426192464e-01, -6.376179254522234e-04, -7.681164275934722e-01, -7.932639315236331e-01, -7.932639315236332e-01, -2.399977863997019e+00, -2.500844376291618e+00, -1.189096834937502e+00, -1.760948901363124e+00, -2.451361410940720e+00, -2.451361410940720e+00, -5.928580284426574e-06, -5.991097226445761e-06, -5.932188254354965e-06, -2.427514923569799e-06, -5.959770489208267e-06, -5.959770489208267e-06, -3.981591422627927e-05, -4.017074166220670e-05, -3.948151048435457e-05, -3.981125035032954e-05, -4.019341278217460e-05, -4.580010694801884e-05, -9.359147636520213e-03, -1.679604645540467e-02, -9.031325410747958e-03, -1.113802362015929e-02, -1.005366524848457e-02, -8.727711128657181e-03, -1.465789266377065e+00, -4.318491440777332e-01, -1.931160258371017e+00, -1.021880417402390e-04, -1.179162074005004e+00, -1.179162074005003e+00, -1.450585644593285e+06, -1.556657899616241e+00, -1.258679122491727e+01, -8.340229616962446e+00, -7.821525800339279e+05, -4.830358240923446e+00, -1.856892966284768e-01, -8.437788292308869e-02, -2.767069078088866e-02, -1.324157280689087e-01, -1.179121376116945e-01, -1.179121376116945e-01, -1.793360432792339e-01, -1.494826958211648e-02, -1.968498223790099e-02, -3.452255119363312e-02, -2.498679436615345e-02, -1.679125063767338e-02, -1.039429404732803e-02, -1.061117836599466e-01, -1.342916480797785e-01, -3.924891766572964e-02, -8.032763217416089e-02, -8.032763217416077e-02, -1.740829295021180e-02, -1.208981487486744e+00, -1.049125452211149e+00, -5.978784937589654e-02, -3.556163631369872e+00, -1.566126811813308e+00, -1.146760337704050e+00, -1.906058351601374e+00, -5.464914654733215e+00, -1.725170720258358e+00, -6.884293929670023e+00, -6.884293929670029e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_tpss_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.553103355137504e-04, 1.553139682816644e-04, 1.553283468305688e-04, 1.552745988728305e-04, 1.553030139351567e-04, 1.553030139351567e-04, -5.306611526724353e-04, -5.304278808121622e-04, -5.241729159643874e-04, -5.266753939383726e-04, -5.264632254956952e-04, 1.724426424324357e-03, -1.977316349178808e-03, 1.717115995825356e-03, 1.240165887964789e-03, 1.448607997579437e-03, 1.398041393959516e-03, 1.398041393959516e-03, 2.284352566862802e-03, 2.571704880115836e-03, -5.518747293747750e-04, 2.625507707288232e-04, 6.958171215598146e-04, 6.958171215598122e-04, 1.736070259311725e-10, 2.385789031056672e-10, 4.084359062675674e-07, 7.006223451663008e-12, 3.605891734821512e-11, 3.605891734821512e-11, 1.328199792601392e-02, 1.342978507380730e-02, 1.329046594490738e-02, 7.827549275532276e-04, 1.335576027632582e-02, 1.335576027632582e-02, -1.123920813889822e-03, -1.103175360280430e-03, -1.132433002676997e-03, -1.121759323032141e-03, -1.104940080954716e-03, 2.134066299811007e-03, 2.578932940522459e-02, 6.860722663550715e-02, 1.436768456084270e-02, 2.753223247346645e-02, 3.055071634363972e-02, 2.203736535011386e-03, -1.039482586459168e-04, 6.495681957323802e-04, -8.335690186733466e-05, 1.061208742301096e-02, 1.539919146846854e-04, 1.539919146846853e-04, -2.553531180824801e-09, 5.199038655478584e-12, 3.125201161000098e-11, -2.983222779093524e-05, -1.609925139437391e-08, 1.885101034501739e-11, 6.020013353977364e-01, 2.691624170099807e-01, 7.759518702218329e-03, 4.266824267289567e-01, 3.790549494914552e-01, 3.790549494914551e-01, 5.353819152355764e-01, 2.076029224352229e-02, 3.963831252046130e-02, 8.521780206978810e-02, 5.643642512960411e-02, 5.127887292443394e-03, 4.819624606376646e-02, -2.128043682102258e-03, 3.212343319570403e-03, -6.340319611859287e-03, 6.584466008817247e-03, 6.584466008817254e-03, -3.727785199889203e-03, 3.357262574067963e-07, 1.299946849071997e-06, 2.053467095606914e-02, -8.938608469360378e-05, 2.625990963736404e-05, 3.211559819785784e-10, 9.611591815298219e-15, 1.901618809009868e-12, 2.185571177981095e-05, 2.175708906632829e-11, 2.175708906636461e-11]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
