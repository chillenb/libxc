
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_tpss_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.235325133443182e+01, -2.235331400803990e+01, -2.235368221687561e+01, -2.235275181699174e+01, -2.235322652388428e+01, -2.235322652388428e+01, -3.451381778763694e+00, -3.451387319840153e+00, -3.451785474595570e+00, -3.453756075054601e+00, -3.452421703258021e+00, -3.452421703258021e+00, -6.690490238636455e-01, -6.688365727213842e-01, -6.658070382921100e-01, -6.723284558944151e-01, -6.701186538636440e-01, -6.701186538636440e-01, -2.050597536003703e-01, -2.059499397130525e-01, -7.645813439394082e-01, -1.769013252531096e-01, -1.871546606410538e-01, -1.871546606410539e-01, -1.008744718336722e-02, -1.061655053472112e-02, -5.766747389010573e-02, -5.828257851464479e-03, -7.322537039990717e-03, -7.322537039990717e-03, -5.476237542124427e+00, -5.477248646196948e+00, -5.476360157070619e+00, -5.477250156411018e+00, -5.476710702265644e+00, -5.476710702265644e+00, -2.080457608686101e+00, -2.094986642384407e+00, -2.076238466663450e+00, -2.088950128024955e+00, -2.090610487539116e+00, -2.090610487539116e+00, -5.952330816451604e-01, -6.128779194767658e-01, -5.429432113734410e-01, -5.365939266321497e-01, -6.035815456312640e-01, -6.035815456312640e-01, -1.379952974609089e-01, -2.225170135478532e-01, -1.291393394549121e-01, -1.813550618417778e+00, -1.523842380083388e-01, -1.523842380083388e-01, -4.497166770796097e-03, -5.697596772407579e-03, -4.356246060808432e-03, -9.069880696400430e-02, -5.247941421624037e-03, -5.247941421624037e-03, -5.833529884572007e-01, -5.999300822402411e-01, -5.966340916522900e-01, -5.922618768569199e-01, -5.946761277024574e-01, -5.946761277024574e-01, -5.464617169135726e-01, -5.190997266521097e-01, -5.395442352213519e-01, -5.576410921136495e-01, -5.486683135776457e-01, -5.486683135776457e-01, -6.398463860805789e-01, -2.628453695093115e-01, -2.959749175798430e-01, -3.608263266569957e-01, -3.249392909800866e-01, -3.249392909800866e-01, -4.727173232000425e-01, -5.530979023801948e-02, -7.446235183566990e-02, -3.436619395349018e-01, -1.113051938163511e-01, -1.113051938163512e-01, -1.422958476811677e-02, -1.523263552909919e-03, -3.197186128390286e-03, -1.056107152536824e-01, -4.856041199748724e-03, -4.856041199748720e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_tpss_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.770713757372547e+01, -2.770719945855287e+01, -2.770766852324290e+01, -2.770675179412330e+01, -2.770720445832712e+01, -2.770720445832712e+01, -4.195994715923077e+00, -4.196035057054352e+00, -4.197223714098713e+00, -4.197655214154559e+00, -4.196946677656213e+00, -4.196946677656213e+00, -7.864704588702094e-01, -7.850043996113966e-01, -7.468669682206944e-01, -7.564108896732922e-01, -7.547586750113716e-01, -7.547586750113716e-01, -1.862950511346920e-01, -1.896246133427364e-01, -9.347720297121982e-01, -1.597731556559209e-01, -1.628241216259182e-01, -1.628241216259182e-01, -1.343341435862921e-02, -1.413560716004194e-02, -7.441734343815681e-02, -7.767977537283048e-03, -9.756600067159189e-03, -9.756600067159189e-03, -6.746415692786998e+00, -6.745984250904113e+00, -6.746520426560519e+00, -6.746134887073024e+00, -6.746133970161694e+00, -6.746133970161694e+00, -2.436762205790085e+00, -2.468215259053115e+00, -2.416514803496500e+00, -2.444985368831491e+00, -2.463443110691029e+00, -2.463443110691029e+00, -7.257032350574798e-01, -7.869474359841178e-01, -6.593769595733202e-01, -6.939927034231008e-01, -7.369981516591612e-01, -7.369981516591612e-01, -1.500061526521753e-01, -1.948594728015587e-01, -1.435484599128845e-01, -2.377444112753898e+00, -1.486039256621520e-01, -1.486039256621520e-01, -5.994623227659278e-03, -7.593721696463719e-03, -5.804884069949612e-03, -1.099208299203209e-01, -6.993147667372016e-03, -6.993147667372016e-03, -7.310476066643217e-01, -7.310947484899238e-01, -7.296445617065697e-01, -7.292104524444707e-01, -7.292934509737145e-01, -7.292934509737145e-01, -7.182942403230710e-01, -6.410030335504547e-01, -6.706736068179510e-01, -6.852253932810642e-01, -6.787341332092010e-01, -6.787341332092010e-01, -8.246627471932718e-01, -2.356093572139444e-01, -2.935836351228111e-01, -4.245698700275015e-01, -3.603466897492013e-01, -3.603466897492013e-01, -5.700195829115554e-01, -7.167404103314712e-02, -9.407161864205976e-02, -4.139431123302785e-01, -1.252919557883223e-01, -1.252919557883224e-01, -1.893110741648930e-02, -2.030888001624858e-03, -4.262077999329649e-03, -1.213551427346413e-01, -6.471064238109659e-03, -6.471064238109654e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_tpss_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.333626353288597e-08, -1.333666265891353e-08, -1.333752641264251e-08, -1.333160897114122e-08, -1.333483848190600e-08, -1.333483848190600e-08, -1.228884547587951e-05, -1.229131831853981e-05, -1.235419605466206e-05, -1.230770610490704e-05, -1.232487333979789e-05, -1.232487333979789e-05, -5.266465045013813e-03, -5.281052413255159e-03, -5.601048905450622e-03, -5.519396057776868e-03, -5.542963128334435e-03, -5.542963128334435e-03, -6.737858426595448e-01, -6.583030815483630e-01, -1.856110914694662e-03, -1.042853054959667e+00, -9.622850776583558e-01, -9.622850776583556e-01, -2.440394679784655e+00, -2.578649859596638e+00, -1.482650793563582e+00, -2.215789026647985e+00, -2.815961985489645e+00, -2.815961985489652e+00, -5.965145324623113e-06, -6.027526268752186e-06, -5.968006132353651e-06, -6.023060552813609e-06, -5.996648824151906e-06, -5.996648824151906e-06, -5.579360290624609e-05, -5.370173615268253e-05, -5.485867704185516e-05, -5.289640375931045e-05, -5.518856708130827e-05, -5.518856708130827e-05, -1.956015457565368e-02, -2.494458933100811e-02, -2.239710444759949e-02, -2.187555307466384e-02, -2.048625265291840e-02, -2.048625265291840e-02, -1.146478331299843e+00, -4.709507371637092e-01, -1.249858781440848e+00, -1.593148384634038e-04, -1.423233056390774e+00, -1.423233056390774e+00, -2.919228969861457e+00, -2.607846485454253e+00, -1.638066562933856e+01, -1.751416429043752e+00, -7.622821995694154e+00, -7.622821995694140e+00, -1.703671226900880e-01, -9.101203841843181e-02, -1.116407063107229e-01, -1.344547542104606e-01, -1.222797234486006e-01, -1.222797234486006e-01, -1.045575805752184e-01, -1.658441259626820e-02, -2.342237642347146e-02, -4.281279374591948e-02, -3.086434027408382e-02, -3.086434027408382e-02, -1.698119183876558e-02, -2.506601784315698e-01, -1.465309818481354e-01, -7.779731973038757e-02, -9.670882166719134e-02, -9.670882166719139e-02, -2.719038464909077e-02, -1.347596737312762e+00, -1.370798554107011e+00, -1.188196716123928e-01, -2.022314186632045e+00, -2.022314186632044e+00, -1.968615832528917e+00, -1.279347279940350e+01, -6.192467592060870e+00, -2.023978865479593e+00, -9.628097961787676e+00, -9.628097961787692e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_tpss_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_tpss_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.858799666919752e-03, 1.858878034447711e-03, 1.859193214306405e-03, 1.858033782792840e-03, 1.858645821257499e-03, 1.858645821257499e-03, 2.721665026093275e-03, 2.722659033301942e-03, 2.750446522073958e-03, 2.753445761586240e-03, 2.747351976877091e-03, 2.747351976877091e-03, 4.014204176136595e-03, 4.020210537961573e-03, 3.962350000021783e-03, 4.472792825324408e-03, 4.320900494185076e-03, 4.320900494185076e-03, 3.419260648520367e-03, 4.072372631654433e-03, 6.207487868624922e-04, 4.809325719313104e-04, 1.406969233375017e-03, 1.406969233375014e-03, 1.697366661190049e-13, 1.433404791618900e-13, 2.578239598988231e-08, 5.041246636591582e-15, 2.587108213304372e-14, 2.587108213304421e-14, 1.324447771737446e-02, 1.339142157883391e-02, 1.325365330148095e-02, 1.338326633461256e-02, 1.331742449622494e-02, 1.331742449622494e-02, 2.781508421530712e-03, 2.858190933929418e-03, 2.528943743653390e-03, 2.585251273386997e-03, 2.954447420381004e-03, 2.954447420381004e-03, 3.282560628306072e-02, 3.125802180647486e-02, 2.228108912133776e-02, 1.305973996193862e-02, 3.633129029819997e-02, 3.633129029819997e-02, 2.472116821832306e-05, 1.067462822429917e-03, 1.625737179956966e-05, 3.407933742699812e-03, 1.870889113317913e-04, 1.870889113317915e-04, 3.120251199097636e-15, 1.080304827139052e-14, 4.030197521239843e-14, 1.601293831564810e-06, 4.824689628267513e-14, 4.824689628267484e-14, 3.004783794674210e-01, 2.182583904746939e-01, 2.529583483642627e-01, 2.824909870884436e-01, 2.679551957033204e-01, 2.679551957033204e-01, 7.653658508173396e-02, 2.234528561686280e-02, 4.181904377848327e-02, 8.294114163353093e-02, 5.802721764480308e-02, 5.802721764480307e-02, 2.216368453935141e-02, 2.149624405302595e-03, 5.492811322940182e-03, 2.161782636840083e-02, 1.212071210595529e-02, 1.212071210595530e-02, 2.172105853728013e-02, 1.269026003987181e-08, 1.716303182547518e-07, 3.451912210080800e-02, 1.342039211823067e-05, 1.342039211823065e-05, 3.860838266145701e-12, 1.790928168641776e-17, 3.417772252811639e-16, 9.796480873405410e-06, 3.603823646489613e-14, 3.603823646489614e-14]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
