
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ms2_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.064152869069773e+01, -2.064165104920224e+01, -2.064218672548366e+01, -2.064037079866739e+01, -2.064132339886458e+01, -2.064132339886458e+01, -3.215085010445129e+00, -3.215110156647581e+00, -3.215826328890283e+00, -3.215828962608706e+00, -3.215494592424720e+00, -3.771425056114319e+00, -6.099615718453197e-01, -7.556357715197931e-01, -7.426148759009522e-01, -7.454409733308932e-01, -7.448896793037616e-01, -7.448896793037616e-01, -2.012135844868817e-01, -2.034817374980399e-01, -7.074114023697891e-01, -1.636690957507369e-01, -1.783524333008277e-01, -1.783524333008277e-01, -8.410811889511031e-03, -8.852137823659251e-03, -4.829119585107813e-02, -4.859275469468814e-03, -6.105283953604031e-03, -6.105283953604031e-03, -5.449099561159134e+00, -5.449556409110627e+00, -5.449118070562506e+00, -5.198283870469508e+00, -5.449332189911219e+00, -5.449332189911219e+00, -1.800197889802413e+00, -1.815174967956295e+00, -1.789175069235250e+00, -1.802424144589500e+00, -1.813833937547113e+00, -2.152437494258546e+00, -6.256980088831879e-01, -6.701156587355239e-01, -5.857226091650208e-01, -6.015816382920604e-01, -6.339615342674215e-01, -5.544347882332618e-01, -8.232887963134652e-02, -2.089760381132197e-01, -7.616264837128282e-02, -2.037886994850691e+00, -1.358361915434519e-01, -1.358361915434519e-01, -2.422653031415576e-03, -4.750441914308051e-03, -3.632101151839852e-03, -5.122263794463375e-02, -2.827553207036585e-03, -4.375651919295401e-03, -6.112617024080811e-01, -6.098714920580305e-01, -6.026399431199472e-01, -6.107646859513887e-01, -6.105646851888045e-01, -6.105646851888045e-01, -5.949785468336086e-01, -5.285825561426464e-01, -5.473476880764462e-01, -5.659986337251149e-01, -5.564626742361751e-01, -4.996427838480630e-01, -7.050351914679625e-01, -1.982589563143408e-01, -2.993077765953611e-01, -3.196073853969898e-01, -3.361732800013078e-01, -3.361732800013078e-01, -4.195011169050752e-01, -4.626170837527537e-02, -6.258439077830558e-02, -3.624427608963479e-01, -6.522609977445198e-02, -9.566968212387109e-02, -1.186796127075467e-02, -1.269976726513808e-03, -2.665558986406654e-03, -9.016983493465119e-02, -4.048829184790193e-03, -4.048829184790190e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ms2_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.100571011760525e+01, -3.100584113653594e+01, -3.100643217772444e+01, -3.100448484591611e+01, -3.100550444746644e+01, -3.100550444746644e+01, -4.402669950138450e+00, -4.402644973346246e+00, -4.402025064059020e+00, -4.402683453219398e+00, -4.402155987570883e+00, -4.619491011126224e+00, -8.285635035801489e-01, -8.824869849266930e-01, -8.600280320989011e-01, -8.665621787686300e-01, -8.651598489008639e-01, -8.651598489008639e-01, -2.299399067441698e-01, -2.330120059998241e-01, -9.500825407586497e-01, -1.873259018370540e-01, -2.021511203264810e-01, -2.021511203264813e-01, -1.120300097623104e-02, -1.178926897921942e-02, -6.292406189130839e-02, -6.477146129325395e-03, -8.135962734456281e-03, -8.135962734456281e-03, -7.085181925503014e+00, -7.087100004794138e+00, -7.085282253722403e+00, -7.484398680296175e+00, -7.086147948091667e+00, -7.086147948091667e+00, -2.476926679904280e+00, -2.497259228467361e+00, -2.461423409485083e+00, -2.480000488934063e+00, -2.495453178794081e+00, -2.608405661503439e+00, -7.869077013619183e-01, -8.640300909278641e-01, -7.230445521885376e-01, -7.571107004481317e-01, -8.011734899263790e-01, -7.655973540530405e-01, -1.098002254789840e-01, -2.368160135158777e-01, -1.015700626115238e-01, -2.582701960166940e+00, -1.574711919633175e-01, -1.574711919633176e-01, -3.230204042595373e-03, -6.332264131673451e-03, -4.840694347731570e-03, -6.830028813745803e-02, -3.770070948793751e-03, -5.831920003346414e-03, -8.092707073090373e-01, -8.019780712302615e-01, -8.174447388790822e-01, -8.066436109412822e-01, -8.055823869509775e-01, -8.055823869509775e-01, -7.869692963162654e-01, -6.576246480588915e-01, -6.937338795596903e-01, -7.304852640804066e-01, -7.116136834894982e-01, -7.468649703669344e-01, -9.032212375105273e-01, -2.663972602524523e-01, -3.469762625257774e-01, -4.397252431339271e-01, -3.984676883761831e-01, -3.984676883761830e-01, -5.729094443807968e-01, -6.038041399711371e-02, -8.052165666017193e-02, -4.457674183832865e-01, -8.698383721821346e-02, -1.163130407568682e-01, -1.580179479075403e-02, -1.693267224891921e-03, -3.553529576272814e-03, -1.102061304119981e-01, -5.396280098788787e-03, -5.396280098788763e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms2_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.712827337906173e-08, -1.712828021135377e-08, -1.712817127369993e-08, -1.712808280616275e-08, -1.712815053077962e-08, -1.712815053077962e-08, -7.924984653013609e-06, -7.924466351054110e-06, -7.909797660504449e-06, -7.912962467549922e-06, -7.915919560709050e-06, -2.892989886557429e-06, -5.358823543170107e-03, -1.555955378648897e-03, -1.595883578947587e-03, -1.605534810437714e-03, -1.602699289539008e-03, -1.602699289539008e-03, -2.657077717260068e-01, -2.597713190397303e-01, -2.818165880291803e-03, -3.330904922620384e-01, -3.240901032294407e-01, -3.240901032294341e-01, -1.672681911861337e+00, -1.742413989354864e+00, -7.843798173822096e-01, -1.229491693249362e+00, -1.710485152384091e+00, -1.710485152384091e+00, -7.245720013440102e-07, -7.244730788915296e-07, -7.245704615297939e-07, -4.535330224896817e-06, -7.245205022569978e-07, -7.245205022569978e-07, -7.956871635343737e-05, -7.754653917688113e-05, -8.099820185748547e-05, -7.924961701736761e-05, -7.774672249394686e-05, -2.664288420948813e-05, -3.996963865879789e-03, -3.138628291836730e-03, -5.047820946421395e-03, -4.682336615998308e-03, -3.819256094350403e-03, -1.115737484515885e-02, -1.512509551311728e+01, -1.759651544833697e-01, -2.064983054203595e+01, -3.591020465258793e-05, -5.415034344868171e-01, -5.415034344868089e-01, -2.016811860544128e+07, -1.086934600549359e+00, -8.784986825848716e+00, -1.009237599830542e+02, -1.086893825499611e+07, -3.371724385436183e+00, -4.657647369067530e-03, -4.670689966309980e-03, -1.622990406117443e-02, -4.662431599825774e-03, -4.664263102466419e-03, -4.664263102466419e-03, -5.184393685483304e-03, -7.715289402083204e-03, -6.901341924890801e-03, -6.173848159683613e-03, -6.535965664030534e-03, -3.925348570283671e-02, -2.541969176167341e-03, -4.574990965308240e-01, -6.083179425571299e-02, -7.975157709450621e-02, -4.210065341515403e-02, -4.210065341515414e-02, -2.710407995753857e-02, -8.009088821411647e-01, -6.696557931737748e-01, -3.419088030925923e-02, -3.838786336300474e+01, -8.506763111678076e-01, -7.984940777591967e-01, -1.331688053093268e+00, -3.816872397752893e+00, -9.524562626448374e-01, -4.805326786195259e+00, -4.805326786307029e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms2_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.042586804796628e-03, 2.042619891777000e-03, 2.042749515572987e-03, 2.042259754287763e-03, 2.042519092853696e-03, 2.042519092853696e-03, 8.712880622352286e-04, 8.710725569355470e-04, 8.650586408081119e-04, 8.674845527027415e-04, 8.673193933334072e-04, -1.182308367070586e-17, 1.458504933638752e-03, -5.122294555340931e-17, -2.235131591281078e-17, 1.178729110258972e-18, -2.779637831337629e-17, -2.779637831337629e-17, 1.060930925832542e-16, -9.867756605334105e-17, 2.786272686648955e-04, 4.607566914831155e-16, 3.491891313330250e-16, 2.024557128191489e-17, 2.815424410740331e-17, -4.786206175699783e-18, 1.058749089395337e-16, 1.571882519211766e-17, -9.575514178497242e-18, -9.575514178497242e-18, -1.483715995404895e-18, 1.700336850133998e-19, -8.515551555868295e-20, 8.029106722703868e-03, -1.357057663130624e-18, -1.357057663130624e-18, 1.477297647863541e-03, 1.524894905533105e-03, 1.429927413906269e-03, 1.483087190549205e-03, 1.523014172511499e-03, 6.094179052126662e-19, 1.978204008036848e-17, 1.701711482460768e-17, -3.928582219530903e-17, 3.185301913033289e-17, 2.285165394827334e-17, 1.227820030119922e-02, 1.549659864728289e-05, 1.901304426275671e-16, 1.102045211471336e-05, -2.029218106244240e-18, 2.812577071177095e-16, 1.201005981455084e-16, 4.111763088695151e-13, -6.645287803420928e-18, 1.641325210132841e-17, 2.138906157185386e-06, 7.029231265746816e-12, 5.279929846870183e-17, -1.476942951555632e-18, 6.680083795942417e-18, 3.598534945323266e-02, -1.387120569607371e-20, 1.537772286055104e-18, 1.537772286055104e-18, -3.391585115546267e-18, -4.379802867375884e-18, 8.437829288740677e-18, -1.201645313508377e-17, 1.111580799776842e-17, 6.455799292780959e-02, 1.169266132350689e-19, 1.097570358933361e-03, 1.233317183489406e-16, 8.125728329645893e-03, -1.626661264459669e-17, 2.962715909173390e-17, 6.289421522816876e-03, 2.371948143122976e-16, -3.285964397767417e-16, 2.850440315553425e-17, 1.141283205827396e-05, 3.562902464495400e-16, -6.006536895663782e-17, 4.426648997489269e-19, -6.232723641855735e-19, 1.875682210504883e-16, -1.093988676438556e-17, 3.238489324723589e-17])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
