
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ms2_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.244852454827037e+01, -2.244857680217463e+01, -2.244885214133632e+01, -2.244807421908321e+01, -2.244847570909678e+01, -2.244847570909678e+01, -3.371456638912174e+00, -3.371457971800730e+00, -3.371696509751304e+00, -3.373050886573925e+00, -3.372069290775830e+00, -3.372069290775830e+00, -6.597622171749613e-01, -6.594731971791299e-01, -6.539896085411908e-01, -6.599138119256653e-01, -6.580262901078319e-01, -6.580262901078319e-01, -1.981038630144436e-01, -1.993543476446366e-01, -7.572546903775339e-01, -1.578868131340359e-01, -1.715625402000755e-01, -1.715625402000755e-01, -8.410773523810249e-03, -8.852055801287079e-03, -4.821688679832022e-02, -4.859189130883794e-03, -6.105164463848414e-03, -6.105164463848414e-03, -5.448656740621582e+00, -5.449118911238858e+00, -5.448684615758967e+00, -5.449092515095637e+00, -5.448887386630918e+00, -5.448887386630918e+00, -2.107171558763300e+00, -2.126780625003813e+00, -2.105743324094739e+00, -2.122712328876876e+00, -2.118951106886012e+00, -2.118951106886012e+00, -6.008325454223653e-01, -6.432414277923324e-01, -5.318885250754390e-01, -5.370051050503346e-01, -6.119182319555184e-01, -6.119182319555184e-01, -1.179868846280948e-01, -2.040631809691405e-01, -1.100197766686335e-01, -1.833563165213180e+00, -1.331938883001081e-01, -1.331938883001081e-01, -3.749381935824947e-03, -4.750258702547466e-03, -3.631989622480255e-03, -7.635474661182129e-02, -4.375432274621663e-03, -4.375432274621663e-03, -6.100219552324763e-01, -6.086923279357486e-01, -6.091638345380782e-01, -6.095462924902579e-01, -6.093544803827888e-01, -6.093544803827888e-01, -5.920089083975182e-01, -5.272880362462001e-01, -5.455173740660879e-01, -5.636395925353133e-01, -5.542043232541309e-01, -5.542043232541309e-01, -6.639150325455063e-01, -2.530489987603589e-01, -2.906433106350291e-01, -3.521609911400387e-01, -3.216961205307072e-01, -3.216961205307072e-01, -4.753130330822634e-01, -4.622724346770169e-02, -6.239223711357174e-02, -3.398629535459259e-01, -9.464840882544125e-02, -9.464840882544126e-02, -1.186537186943264e-02, -1.269955801394412e-03, -2.665545687356695e-03, -8.954486565548411e-02, -4.048681076109602e-03, -4.048681076109599e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ms2_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.878799989401072e+01, -2.878810463810594e+01, -2.878864843750209e+01, -2.878709359759443e+01, -2.878789711850516e+01, -2.878789711850516e+01, -4.213416018807547e+00, -4.213654182740110e+00, -4.220341982125331e+00, -4.220119281601392e+00, -4.218807166248381e+00, -4.218807166248381e+00, -7.905476144256861e-01, -7.892024463268033e-01, -7.579435656694449e-01, -7.669435659921912e-01, -7.651659914319264e-01, -7.651659914319264e-01, -1.722566225935725e-01, -1.708700486877290e-01, -9.026621614846241e-01, -1.686396129475171e-01, -1.802691036613927e-01, -1.802691036613928e-01, -1.120284126316058e-02, -1.178893305125731e-02, -6.262104852805767e-02, -6.476800674600558e-03, -8.135483975012452e-03, -8.135483975012452e-03, -7.083472605635244e+00, -7.085428796122472e+00, -7.083609061571378e+00, -7.085333708062951e+00, -7.084440466426312e+00, -7.084440466426312e+00, -2.318811877613482e+00, -2.379287145585042e+00, -2.319006795425815e+00, -2.378283717415670e+00, -2.353296086731323e+00, -2.353296086731323e+00, -7.642488910398548e-01, -8.880734387199443e-01, -6.850730563052525e-01, -7.486159962090742e-01, -7.837147040640289e-01, -7.837147040640289e-01, -1.372936746896470e-01, -1.729980468913312e-01, -1.296053264371218e-01, -2.637685957468536e+00, -1.461269187077168e-01, -1.461269187077168e-01, -4.998058941565098e-03, -6.331531456202240e-03, -4.840248117934568e-03, -9.480140870172980e-02, -5.831041657606309e-03, -5.831041657606309e-03, -8.103240680734271e-01, -8.016332112589551e-01, -8.046613958266027e-01, -8.071853580412141e-01, -8.059198281050787e-01, -8.059198281050787e-01, -7.909240260530388e-01, -6.444196007622546e-01, -6.831269622306783e-01, -7.248513162987936e-01, -7.028558538394073e-01, -7.028558538394073e-01, -9.367082426404234e-01, -2.266086137446655e-01, -2.617789660365711e-01, -4.090936305365204e-01, -3.242617051934580e-01, -3.242617051934580e-01, -5.492809005828638e-01, -6.023137455065145e-02, -7.974693707715548e-02, -4.134697617290843e-01, -1.122526498677456e-01, -1.122526498677456e-01, -1.579145133937468e-02, -1.693183529766298e-03, -3.553476349876289e-03, -1.073364479542429e-01, -5.395687674464988e-03, -5.395687674464983e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms2_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.699651173679058e-09, -3.699559751518214e-09, -3.698508170645230e-09, -3.699841961694138e-09, -3.699235417572949e-09, -3.699235417572949e-09, -7.610843400226306e-06, -7.618227968468920e-06, -7.828847991986252e-06, -7.853121743258130e-06, -7.805701093122289e-06, -7.805701093122289e-06, -4.243237448964906e-03, -4.245559486275674e-03, -4.260947439665266e-03, -4.217436178358071e-03, -4.237127895301837e-03, -4.237127895301837e-03, -1.431909478104153e+00, -1.512372002968781e+00, -2.163623061464801e-03, -6.188804445266511e-01, -5.983945309663569e-01, -5.983945309663566e-01, -1.702838374510720e+00, -1.798886191015110e+00, -1.000506043966926e+00, -1.547483187135523e+00, -1.965964307482646e+00, -1.965964307482651e+00, -7.488383871184412e-07, -7.484322201638299e-07, -7.483298796280189e-07, -7.479933048362895e-07, -7.488838499339535e-07, -7.488838499339535e-07, -1.230816605773536e-04, -1.065532457544985e-04, -1.138306309399859e-04, -9.792577634741154e-05, -1.180601136649072e-04, -1.180601136649072e-04, -2.453542103839615e-02, -1.882307925347851e-02, -2.609554339906392e-02, -2.225667097294091e-02, -2.218867712443100e-02, -2.218867712443100e-02, -6.867549448658092e-01, -8.993035294099343e-01, -7.532156929264140e-01, -2.074697317231665e-04, -9.295326502487612e-01, -9.295326502487615e-01, -2.039041608342226e+00, -1.821262461779459e+00, -1.143747281050848e+01, -1.115960996930333e+00, -5.322518674970945e+00, -5.322518674970935e+00, -7.593449823918528e-03, -7.549098902154017e-03, -7.565232033208258e-03, -7.578923122436115e-03, -7.573664632795475e-03, -7.573664632795475e-03, -1.183107420238309e-02, -1.447796578305771e-02, -1.417912927564289e-02, -1.350442267278930e-02, -1.432613101381651e-02, -1.432613101381652e-02, -1.721824417350622e-02, -4.710791447198151e-01, -3.756585675662986e-01, -1.480866333725840e-01, -2.729916096778707e-01, -2.729916096778707e-01, -5.899251996492323e-02, -9.149772720343679e-01, -9.060691997711998e-01, -2.293555925644644e-01, -1.240787867827597e+00, -1.240787867827598e+00, -1.372073587700320e+00, -8.938104764386825e+00, -4.325696795182417e+00, -1.310627043092858e+00, -6.722839473829533e+00, -6.722839473829547e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms2_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.863848767699950e-04, 1.863755238477119e-04, 1.862385351053576e-04, 1.863735693572058e-04, 1.863164769775777e-04, 1.863164769775777e-04, 1.456255002637826e-03, 1.461185493454435e-03, 1.602847022228063e-03, 1.625794233098180e-03, 1.589106395230229e-03, 1.589106395230229e-03, 2.847106057432900e-03, 2.827574010517166e-03, 2.420488338652322e-03, 2.876427824149569e-03, 2.749593367100054e-03, 2.749593367100054e-03, 9.252203173518371e-02, 1.032378337717712e-01, 3.862980418262535e-04, 2.328057660565359e-03, 4.919025202346561e-03, 4.919025202346553e-03, 3.406146910542845e-10, 9.941174316854876e-11, 2.587701693208740e-07, 6.270124552037908e-16, 4.345714858807966e-14, 4.345714859418662e-14, 5.356774915069644e-05, 5.291864376792259e-05, 5.245032745246581e-05, 5.192588476160756e-05, 5.379660724922088e-05, 5.379660724922088e-05, 1.101287714230944e-02, 9.405529005491589e-03, 9.796734364025828e-03, 8.223926091301202e-03, 1.069521076728220e-02, 1.069521076728220e-02, 6.211093223414874e-02, 6.087885433099469e-02, 4.405508315725066e-02, 3.914796728413741e-02, 5.856306044595149e-02, 5.856306044595149e-02, 1.986838374007053e-04, 5.521852119101045e-02, 1.042792995642454e-04, 1.623025144159406e-02, 3.110354242752816e-03, 3.110354242752827e-03, 1.330217779615990e-18, 5.436542571680574e-17, 4.387115412230317e-15, 7.847436946035534e-06, 5.746792324777411e-16, 5.746792314980209e-16, 9.365102045097481e-03, 9.027160716577437e-03, 9.146841342988869e-03, 9.247065649838673e-03, 9.201843161526245e-03, 9.201843161526245e-03, 1.943215245706189e-02, 1.256490904251596e-02, 1.549889765841754e-02, 1.777201223834590e-02, 1.768003186921932e-02, 1.768003186921934e-02, 6.449837598144904e-02, 6.023241521605596e-02, 8.614417147484468e-02, 6.935997794767527e-02, 9.425060828837287e-02, 9.425060828837284e-02, 6.857476381782714e-02, 1.248927746922580e-06, 1.217751980045890e-06, 1.065368646569603e-01, 1.804176376951273e-04, 1.804176376951276e-04, 8.733968644611556e-14, 1.279697229097466e-22, 2.476240809895980e-16, 4.177750921682557e-04, 1.415537154951095e-15, 1.415537154446916e-15])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
