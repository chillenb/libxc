
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_hlta_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_hlta", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.495954718665340e+01, -1.495942208595978e+01, -1.495890564587278e+01, -1.496093669338177e+01, -1.495948107799200e+01, -1.495948107799200e+01, -3.748198846433959e+00, -3.747861013558418e+00, -3.737840355578119e+00, -3.742017978233707e+00, -3.748122893758300e+00, -3.748122893758300e+00, -9.834203858047607e-01, -9.846648693294732e-01, -1.016734182023202e+00, -9.983331534497886e-01, -9.838338714737559e-01, -9.838338714737559e-01, -2.877631836941389e-01, -2.860418529101944e-01, -1.384687651980817e+00, -3.391454135237208e-01, -2.873286976660826e-01, -2.873286976660826e-01, -1.548864124492621e-01, -1.565457725700974e-01, -2.522537540995339e-01, -1.647951395051888e-01, -1.548212524928263e-01, -1.548212524928263e-01, -3.134114344345145e+00, -3.124888075710471e+00, -3.133091966583347e+00, -3.125923854232302e+00, -3.129493100234717e+00, -3.129493100234717e+00, -2.296830828737481e+00, -2.276080467690320e+00, -2.306665332516805e+00, -2.289801537001411e+00, -2.269845978216299e+00, -2.269845978216299e+00, -5.233247890647054e-01, -4.437936627620431e-01, -5.494472117688530e-01, -4.867270834443217e-01, -5.029811169079708e-01, -5.029811169079708e-01, -3.182493499923624e-01, -3.590537600984038e-01, -3.074131965604780e-01, -1.587473099491215e+00, -3.015585260456362e-01, -3.015585260456362e-01, -1.503721049411532e-01, -1.603856609204725e-01, -1.151377706395747e-01, -2.866365841540251e-01, -1.509953350810003e-01, -1.509953350810003e-01, -2.041307975349337e-01, -2.674004138693108e-01, -2.475625838853149e-01, -2.303312836070833e-01, -2.392005764120887e-01, -2.392005764120887e-01, -2.230549122368392e-01, -4.666109027377646e-01, -4.194787204887399e-01, -3.637671732453496e-01, -3.941449132890524e-01, -3.941449132890524e-01, -5.042538276912121e-01, -3.816676160389211e-01, -3.950943152768136e-01, -4.079046287288621e-01, -3.938839862401205e-01, -3.938839862401204e-01, -4.767598819148090e-01, -2.521643094919479e-01, -2.733963536393630e-01, -3.523285730200021e-01, -2.741837958029046e-01, -2.741837958029046e-01, -1.929950472624435e-01, -1.213445308296005e-01, -1.205068186162650e-01, -2.618986372576226e-01, -1.365432128381936e-01, -1.365432128381936e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_hlta_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_hlta", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-9.973031457768933e+00, -9.972948057306523e+00, -9.972603763915192e+00, -9.973957795587847e+00, -9.972987385328002e+00, -9.972987385328002e+00, -2.498799230955973e+00, -2.498574009038946e+00, -2.491893570385413e+00, -2.494678652155805e+00, -2.498748595838866e+00, -2.498748595838866e+00, -6.556135905365069e-01, -6.564432462196489e-01, -6.778227880154677e-01, -6.655554356331923e-01, -6.558892476491704e-01, -6.558892476491704e-01, -1.918421224627593e-01, -1.906945686067963e-01, -9.231251013205446e-01, -2.260969423491472e-01, -1.915524651107217e-01, -1.915524651107217e-01, -1.032576082995081e-01, -1.043638483800649e-01, -1.681691693996893e-01, -1.098634263367925e-01, -1.032141683285509e-01, -1.032141683285509e-01, -2.089409562896762e+00, -2.083258717140314e+00, -2.088727977722231e+00, -2.083949236154867e+00, -2.086328733489812e+00, -2.086328733489812e+00, -1.531220552491654e+00, -1.517386978460214e+00, -1.537776888344537e+00, -1.526534358000941e+00, -1.513230652144200e+00, -1.513230652144200e+00, -3.488831927098036e-01, -2.958624418413620e-01, -3.662981411792353e-01, -3.244847222962144e-01, -3.353207446053138e-01, -3.353207446053138e-01, -2.121662333282416e-01, -2.393691733989358e-01, -2.049421310403187e-01, -1.058315399660810e+00, -2.010390173637575e-01, -2.010390173637575e-01, -1.002480699607688e-01, -1.069237739469817e-01, -7.675851375971647e-02, -1.910910561026833e-01, -1.006635567206668e-01, -1.006635567206668e-01, -1.360871983566225e-01, -1.782669425795406e-01, -1.650417225902100e-01, -1.535541890713888e-01, -1.594670509413925e-01, -1.594670509413925e-01, -1.487032748245595e-01, -3.110739351585097e-01, -2.796524803258266e-01, -2.425114488302330e-01, -2.627632755260350e-01, -2.627632755260349e-01, -3.361692184608081e-01, -2.544450773592807e-01, -2.633962101845424e-01, -2.719364191525748e-01, -2.625893241600804e-01, -2.625893241600803e-01, -3.178399212765394e-01, -1.681095396612986e-01, -1.822642357595753e-01, -2.348857153466682e-01, -1.827891972019364e-01, -1.827891972019363e-01, -1.286633648416290e-01, -8.089635388640035e-02, -8.033787907751004e-02, -1.745990915050817e-01, -9.102880855879573e-02, -9.102880855879571e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_hlta_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_hlta", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_hlta_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_hlta", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-5.847292198917986e-03, -5.847372644255124e-03, -5.847712346543538e-03, -5.846405288975515e-03, -5.847334658195050e-03, -5.847334658195050e-03, -1.881190591292920e-02, -1.881446927610702e-02, -1.889111226402345e-02, -1.885987834605856e-02, -1.881252795065385e-02, -1.881252795065385e-02, -6.128509069018717e-02, -6.113754029538752e-02, -5.748679355540501e-02, -5.931559374448923e-02, -6.123499325633697e-02, -6.123499325633697e-02, -2.025087057158100e-01, -2.056953241735728e-01, -4.015636384245815e-02, -1.347678928625072e-01, -2.033731407182872e-01, -2.033731407182872e-01, -1.211966516923907e-01, -1.220719708750146e-01, -1.203174698178207e-01, -7.648805981367598e-02, -1.234688325177343e-01, -1.234688325177342e-01, -3.009896566075905e-02, -3.023505364139963e-02, -3.011398205660812e-02, -3.021971294039671e-02, -3.016702324467627e-02, -3.016702324467627e-02, -2.940403008536608e-02, -2.991186958206879e-02, -2.917454675014983e-02, -2.957865705323177e-02, -3.005622797717274e-02, -3.005622797717274e-02, -1.473057123448248e-01, -1.965937819442325e-01, -1.333822028464724e-01, -1.633828111833640e-01, -1.593074064881311e-01, -1.593074064881311e-01, -1.270784036647354e-01, -1.458167870675494e-01, -1.329958412736322e-01, -5.068005489474284e-02, -1.481522256805405e-01, -1.481522256805405e-01, -8.618913772767102e-02, -8.364639419221888e-02, -1.190573193763814e-01, -1.172793611621379e-01, -8.740703313344632e-02, -8.740703313344628e-02, -6.142244448138718e-01, -4.085868717680933e-01, -4.591106993753213e-01, -5.119611530314070e-01, -4.835732045712666e-01, -4.835732045712666e-01, -5.290403816759245e-01, -1.628575225752043e-01, -1.952714783745896e-01, -2.465418898328865e-01, -2.164668339632119e-01, -2.164668339632120e-01, -1.662078853952567e-01, -1.492159068266152e-01, -1.543969310977558e-01, -1.664149471232341e-01, -1.649364119114404e-01, -1.649364119114403e-01, -1.497541174550461e-01, -1.158528266232350e-01, -1.194029261301946e-01, -2.015057852410802e-01, -1.431683525733328e-01, -1.431683525733329e-01, -9.433083977182709e-02, -6.650713433961407e-02, -9.262245329414681e-02, -1.497920901869670e-01, -9.370486742243599e-02, -9.370486742243593e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
