
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mbrxh_bg_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbrxh_bg", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.170155772545092e+01, -2.170147029233646e+01, -2.170128445605767e+01, -2.170270937425628e+01, -2.170150994535601e+01, -2.170150994535601e+01, -4.028882119072519e+00, -4.028694525064334e+00, -4.023523009030916e+00, -4.030484872974565e+00, -4.028819347648652e+00, -4.028819347648652e+00, -9.309308537820941e-01, -9.330461167541513e-01, -9.988318870091715e-01, -9.979612466999999e-01, -9.316810561068832e-01, -9.316810561068832e-01, -3.739308500442617e-01, -3.670642679329796e-01, -1.085441261478149e+00, -4.651164394638762e-01, -3.716970731246037e-01, -3.716970731246037e-01, -1.569872009759442e+00, -1.515031180435781e+00, -8.082727000271445e-01, -3.202561746780584e+00, -1.501726247472229e+00, -1.501726247472229e+00, -4.938139506425770e+00, -4.932844976325899e+00, -4.937598659070353e+00, -4.933481993151610e+00, -4.935412289355430e+00, -4.935412289355430e+00, -2.903505182754351e+00, -2.897535663268669e+00, -2.928976831185729e+00, -2.924014706039265e+00, -2.867057059054104e+00, -2.867057059054104e+00, -6.311217403524562e-01, -5.731795408516165e-01, -6.174699634160868e-01, -5.478665076347665e-01, -6.300234430746477e-01, -6.300234430746477e-01, -5.772209061734029e-01, -5.132101951932730e-01, -5.481941036531969e-01, -1.784207400651810e+00, -4.910985219307675e-01, -4.910985219307675e-01, -3.208411739582949e+00, -2.888063353048092e+00, -2.264815897648858e+00, -6.437969906580808e-01, -2.610655924507409e+00, -2.610655924507418e+00, -5.199890208159453e-01, -5.257331852781884e-01, -5.233298375980771e-01, -5.217441510313251e-01, -5.225088806671836e-01, -5.225088806671836e-01, -5.034740088366537e-01, -6.241117136187433e-01, -5.770913451308101e-01, -5.276373958113079e-01, -5.517667264326621e-01, -5.517667264325844e-01, -6.087224637584656e-01, -5.187360679770823e-01, -5.003701347569109e-01, -4.705360302451432e-01, -4.793238494039601e-01, -4.793238494038082e-01, -5.817315361966985e-01, -9.159371699591824e-01, -7.404857091121988e-01, -4.025615502292549e-01, -5.362018722038367e-01, -5.362018722038362e-01, -1.580838434352961e+00, -6.388726287338812e+00, -4.060428438110724e+00, -5.077344338295500e-01, -2.504053361684579e+00, -2.504053361683598e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mbrxh_bg_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbrxh_bg", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.561236322375610e+01, -1.561257546948636e+01, -1.561326146969738e+01, -1.560979024276448e+01, -1.561247736980487e+01, -1.561247736980487e+01, -2.820295642380610e+00, -2.820260338201632e+00, -2.819011839145089e+00, -2.815814025391211e+00, -2.820324516920967e+00, -2.820324516920967e+00, -5.158958186965359e-01, -5.126541789642066e-01, -4.137671730124385e-01, -4.152322915331131e-01, -5.147189825966204e-01, -5.147189825966204e-01, -1.421449923647495e-02, -2.491443443954123e-02, -7.959822360803355e-01, 1.484279789775831e-01, -1.761499753813496e-02, -1.761499753813496e-02, 1.534211428604640e+00, 1.473678129737473e+00, 6.396638949368917e-01, 3.335212747495572e+00, 1.460879745206628e+00, 1.460879745206628e+00, -4.625678772421414e+00, -4.647950153408916e+00, -4.627932054792137e+00, -4.645249769059397e+00, -4.637146408610336e+00, -4.637146408610336e+00, -1.052817253416024e+00, -1.074374905614022e+00, -1.020942001684404e+00, -1.038076297867532e+00, -1.107555461325246e+00, -1.107555461325246e+00, -4.414560288974159e-01, -6.782690419360040e-01, -4.364622515277976e-01, -5.621076183788450e-01, -4.576250051296304e-01, -4.576250051296304e-01, 3.142496671397141e-01, 1.026840320332434e-01, 2.914592638304281e-01, -2.008876224265092e+00, 2.122916395209517e-01, 2.122916395209517e-01, 3.345693060492015e+00, 2.986363662628574e+00, 2.345800127539013e+00, 4.463842630119663e-01, 2.698692469609047e+00, 2.698692469609098e+00, -6.829783739578635e-01, -6.629521112627906e-01, -6.717019735113212e-01, -6.771852394887993e-01, -6.745703740320120e-01, -6.745703740320120e-01, -6.619230501503243e-01, -3.383999972726264e-01, -3.678092154935052e-01, -4.626087321747747e-01, -3.883455594707018e-01, -3.883455594559114e-01, -6.973214540201738e-01, 2.247306898230970e-02, -7.443668479431349e-02, -2.389749811500265e-01, -1.579782885190997e-01, -1.579782885200289e-01, -3.127309807570389e-01, 7.499002206968703e-01, 5.493834189913569e-01, -2.502590885775134e-01, 3.145048102454057e-01, 3.145048102454013e-01, 1.531025857213711e+00, 7.000473121323757e+00, 4.333271582341767e+00, 2.965671905104957e-01, 2.599784162569696e+00, 2.599784162563403e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbrxh_bg_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbrxh_bg", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.943633036228041e-08, -2.943594668423646e-08, -2.943427450277060e-08, -2.944056036449004e-08, -2.943612759140587e-08, -2.943612759140587e-08, -3.274911473183853e-05, -3.275104256632498e-05, -3.280459577446547e-05, -3.277282967334759e-05, -3.274902789508302e-05, -3.274902789508302e-05, -2.080415866382883e-02, -2.089293098914163e-02, -2.330903755735311e-02, -2.279357339235316e-02, -2.083682716691624e-02, -2.083682716691624e-02, -3.659815634292561e+00, -3.500162380778090e+00, -8.309064773465010e-03, -1.137406473503831e+01, -3.611137867908388e+00, -3.611137867908388e+00, -1.619394302798176e+05, -1.359780028432071e+05, -6.834420658990525e+02, -2.576473244418071e+06, -1.417661133388691e+05, -1.417661133388691e+05, -6.792061932671601e-06, -6.732196573207538e-06, -6.786010714395296e-06, -6.739464479771755e-06, -6.761311317212451e-06, -6.761311317212451e-06, -3.071658832917582e-04, -3.001629408536810e-04, -3.095944209598936e-04, -3.040406749760630e-04, -2.994212911652528e-04, -2.994212911652528e-04, -4.819305916270296e-02, -1.683774738458090e-02, -5.521112994046914e-02, -3.647484994259614e-02, -4.352962527417817e-02, -4.352962527417817e-02, -3.444337654098072e+01, -3.268056495726935e+00, -3.659831595971487e+01, -2.240582845189634e-04, -2.076028512251930e+01, -2.076028512251930e+01, -2.962908245648526e+06, -1.782641171737098e+06, -5.620883607379997e+06, -2.018237127258133e+02, -2.588653425239565e+06, -2.588653425239591e+06, -1.019784634773690e-02, -1.596623928901158e-02, -1.364865260240029e-02, -1.205755159423960e-02, -1.283276372904511e-02, -1.283276372904511e-02, -1.108332399948395e-02, -7.833338918681605e-02, -7.552192836219469e-02, -6.036004901651469e-02, -7.394454539331061e-02, -7.394454539643713e-02, -1.556093151696253e-02, -1.388596471913207e+00, -7.384677038457153e-01, -3.014812453685160e-01, -4.736465994454839e-01, -4.736465994443703e-01, -1.125286608082312e-01, -8.954034748642536e+02, -2.936350335350983e+02, -3.979881019375006e-01, -7.695176341002504e+01, -7.695176341002470e+01, -8.755719380682852e+04, -2.582677953888839e+08, -2.196469299507369e+07, -9.304263702823145e+01, -4.896705778775662e+06, -4.896705778769413e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbrxh_bg_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbrxh_bg", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-9.952042580872410e-04, -9.952157063206214e-04, -9.952486173857083e-04, -9.950616482168424e-04, -9.952104438484006e-04, -9.952104438484006e-04, -3.804305643685545e-03, -3.805013600961854e-03, -3.825064483579660e-03, -3.800012721842583e-03, -3.804593090448391e-03, -3.804593090448391e-03, -1.062655788036880e-02, -1.053614646393922e-02, -8.330200433910983e-03, -8.457238552695227e-03, -1.059413383956479e-02, -1.059413383956479e-02, -1.503446089261218e-02, -1.590812537130784e-02, -9.618646864579607e-03, -7.172882923113280e-03, -1.530438906459926e-02, -1.530438906459926e-02, -3.861702845768457e-04, -4.096264527554572e-04, -1.566169415634160e-03, -1.308104757850272e-04, -4.130589783104246e-04, -4.130589783104246e-04, -4.059973430240033e-03, -4.044976758699705e-03, -4.058455638021732e-03, -4.046798676347941e-03, -4.052330812914458e-03, -4.052330812914458e-03, -3.047864192798701e-03, -3.102549012233173e-03, -2.962287804963577e-03, -3.003795417220888e-03, -3.202379467190479e-03, -3.202379467190479e-03, -2.928818312134187e-02, -2.750377903842947e-02, -2.732797753004036e-02, -3.728259386271829e-02, -3.259521750378339e-02, -3.259521750378339e-02, -3.978764763530701e-03, -7.935297348269985e-03, -4.293975630402987e-03, -1.026994238707541e-02, -5.753376049647695e-03, -5.753376049647695e-03, -1.294419420190541e-04, -1.520281340340801e-04, -1.918045962244617e-04, -2.561284231782582e-03, -1.684993083936278e-04, -1.684993083936294e-04, -1.949230087180280e-02, -2.305268903555253e-02, -2.163206938640956e-02, -2.064724381365760e-02, -2.112791973350246e-02, -2.112791973350246e-02, -2.021294514239525e-02, -2.044241508626661e-02, -3.106935051727210e-02, -4.013265862225981e-02, -3.832333170318594e-02, -3.832333170480633e-02, -2.831275230392624e-02, -9.778131669390101e-03, -1.300125422388319e-02, -2.276944170374971e-02, -1.728385631170154e-02, -1.728385631166088e-02, -2.029332281133351e-02, -1.268461086588252e-03, -1.972210657910599e-03, -3.346130831416703e-02, -3.941871643453451e-03, -3.941871643453439e-03, -4.005857999509231e-04, -4.438230995549393e-05, -8.666775503579505e-05, -4.181616130272805e-03, -1.707457275674823e-04, -1.707457275672631e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
