
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mbrxh_bg_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbrxh_bg", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.898740086447385e+01, -1.898742805224499e+01, -1.898758503789377e+01, -1.898713718536440e+01, -1.898741492898929e+01, -1.898741492898929e+01, -3.377347472594969e+00, -3.377238192800482e+00, -3.374083295632281e+00, -3.375572028153969e+00, -3.377333199863926e+00, -4.986069884544743e+00, -7.469890427316690e-01, -1.338169270843653e+00, -1.402699482463375e+00, -1.367601556389360e+00, -1.336589878045005e+00, -1.336589878045005e+00, -3.976819546844665e-01, -3.931788714205015e-01, -9.688839124346791e-01, -5.973867474095444e-01, -3.964557075983032e-01, -3.964557075983032e-01, -1.597619021336632e+00, -1.548931965240640e+00, -9.056112466420317e-01, -4.437982585365400e+00, -1.530797380902985e+00, -1.530797380904605e+00, -4.942298161909367e+00, -4.936921468717708e+00, -4.941695951055993e+00, -4.575352575617972e+00, -4.939599697430361e+00, -4.939599697430361e+00, -1.966799350541179e+00, -1.966835796192585e+00, -1.967384223053245e+00, -1.967081855931346e+00, -1.966098475056837e+00, -3.008525725199762e+00, -7.162091354356732e-01, -6.515505994932682e-01, -7.376917172296018e-01, -6.761988690148590e-01, -7.015571778498018e-01, -5.475583115115273e-01, -1.676834968125401e-01, -5.393137302689280e-01, -1.633110876791189e-01, -2.218982723233242e+00, -5.482421257003193e-01, -5.482421257003193e-01, -5.362980653899375e-02, -3.703977564621214e+00, -2.522085919251850e+00, -1.335235288675897e-01, -5.391890573595706e-02, -3.630177057387234e+00, -5.226016778704220e-01, -5.295923017723539e-01, -5.177626201205391e-01, -5.247667901991764e-01, -5.257019213969175e-01, -5.257019213969175e-01, -5.088722561774595e-01, -6.346712433127207e-01, -5.921926889928913e-01, -5.453161082462222e-01, -5.701546385057996e-01, -4.783193590380826e-01, -7.214530895365792e-01, -2.735985843944220e-01, -5.339284602194101e-01, -3.513049978547138e-01, -5.232720969501272e-01, -5.232720969501271e-01, -4.364873251585116e-01, -9.784121578327368e-01, -8.497214079454352e-01, -4.692880549224502e-01, -1.413244448561782e-01, -6.094548043323471e-01, -2.138715739454101e+00, -1.008409084107250e+01, -4.392816604406699e+00, -5.827479011905119e-01, -3.543721475727720e+00, -3.543721475727727e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mbrxh_bg_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbrxh_bg", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.414871064736017e+01, -2.414878549637492e+01, -2.414916107550722e+01, -2.414793620703535e+01, -2.414874975049814e+01, -2.414874975049814e+01, -3.661924586777553e+00, -3.661994692576556e+00, -3.664262329242878e+00, -3.663670566641632e+00, -3.661961460384581e+00, -1.936636606289866e+00, -7.539015838361978e-01, -6.246594548593400e-02, 2.391264918409875e-02, -1.496269817188115e-02, -6.457631739198100e-02, -6.457631739198100e-02, 9.306253762000479e-03, 1.131169066015831e-03, -9.708957264673410e-01, 2.694079398196137e-01, 6.958814644363535e-03, 6.958814644363535e-03, 1.562880016928943e+00, 1.508607893662092e+00, 7.314786409735640e-01, 4.671683592493167e+00, 1.490833410083859e+00, 1.490833410094161e+00, -4.609017117109317e+00, -4.631524817967297e+00, -4.611505973878744e+00, -5.925499170082131e+00, -4.620320484653551e+00, -4.620320484653551e+00, -2.045478695547372e+00, -2.058786779650764e+00, -2.040726544398755e+00, -2.050299467130880e+00, -2.061684099041015e+00, -9.651161272948116e-01, -3.876398602337797e-01, -4.449950816105292e-01, -3.401390907834034e-01, -3.920505602587221e-01, -4.124513439268171e-01, -6.697975407960955e-01, -1.537736772042248e-01, 1.270755277578809e-01, -1.503177032573834e-01, -1.313743563910826e+00, 2.637714689110996e-01, 2.637714689110996e-01, -3.692313005768960e-02, 3.863853839169018e+00, 2.622282707589951e+00, -1.150089874838439e-01, -3.722373968806560e-02, 3.796136563751588e+00, -6.772581708780030e-01, -6.508680691863277e-01, -6.833836578631710e-01, -6.694929491618853e-01, -6.660250536484360e-01, -6.660250536484360e-01, -6.493679170139985e-01, -3.303928302676320e-01, -3.607379619563327e-01, -4.100682288661176e-01, -3.698893178933432e-01, -6.031953884678919e-01, -4.544403980501976e-01, -2.749993861998907e-01, -4.039582507319756e-02, -3.668276243123322e-01, -1.124767581307979e-01, -1.124767581307981e-01, -4.800111916604051e-01, 8.093646672150577e-01, 6.508384763665463e-01, -1.885978413815659e-01, -1.282903658337732e-01, 3.805653110281944e-01, 2.107440713080611e+00, 1.115158377831153e+01, 4.698082047871704e+00, 3.642262527925830e-01, 3.722463471076944e+00, 3.722463471076929e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbrxh_bg_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbrxh_bg", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.726436767570921e-09, -6.726314253034475e-09, -6.725724925726465e-09, -6.727726250567550e-09, -6.726372590620840e-09, -6.726372590620840e-09, -1.441710345555789e-05, -1.441657737804423e-05, -1.439810763540218e-05, -1.440079016186999e-05, -1.441668324055553e-05, -3.144996610948698e-05, -7.314180909733811e-03, -2.081326603401430e-02, -2.268855182409600e-02, -2.220124983269467e-02, -2.077030393420937e-02, -2.077030393420937e-02, -3.613289326867250e+00, -3.451637886326064e+00, -2.621276204264166e-03, -1.074907069068505e+01, -3.563421492523697e+00, -3.563421492523697e+00, -1.615716958220171e+05, -1.355836635175024e+05, -6.694801779202495e+02, -2.489103102336848e+06, -1.414098458533873e+05, -1.414098458538862e+05, -6.834332791211626e-06, -6.774220739065818e-06, -6.827721422270016e-06, -1.722251113016661e-06, -6.804182808722430e-06, -6.804182808722430e-06, -1.419573020377648e-04, -1.394088122389792e-04, -1.428105105010873e-04, -1.410110183167164e-04, -1.389145428947646e-04, -2.965382211275023e-04, -4.462211146345848e-02, -3.918861960291056e-02, -5.181961637614593e-02, -4.881901458929613e-02, -4.082928819276794e-02, -1.252691950254818e-02, -4.367314594529915e+00, -3.230746024324078e+00, -4.751236428138979e+00, -4.013316349759692e-04, -2.024104095964830e+01, -2.024104095964830e+01, -2.718296870718555e+04, -1.735052345287966e+06, -5.555304186691110e+06, -1.676628585151654e+01, -2.437414935518750e+04, -2.497832105672421e+06, -1.240982417884265e-02, -1.901770308967579e-02, -8.728584840642838e-03, -1.453763762684707e-02, -1.542766429472959e-02, -1.542766429472959e-02, -1.640221328930223e-02, -7.768080955162576e-02, -7.378107423166395e-02, -6.828595043777196e-02, -7.368330871112970e-02, -1.776114856398493e-02, -3.076395734498079e-02, -4.089852383034355e-01, -7.292950994316288e-01, -1.379184289746704e-01, -4.666404835371173e-01, -4.666404835371174e-01, -4.931236638301201e-02, -8.850726350584009e+02, -2.859896811408476e+02, -3.835582313171544e-01, -9.202222211400599e+00, -7.484410896947878e+01, -8.418650423980455e+04, -2.482816282730346e+08, -2.179567947622365e+07, -9.030381513026924e+01, -4.718592164979587e+06, -4.718592164979598e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbrxh_bg_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbrxh_bg", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-6.847072778312514e-04, -6.846997926010350e-04, -6.846657159864381e-04, -6.847877106910115e-04, -6.847033437835635e-04, -6.847033437835635e-04, -6.332912305861998e-03, -6.332721090268619e-03, -6.326483707840152e-03, -6.328452710833051e-03, -6.332829158349397e-03, -1.889003905373402e-03, -2.262937841505693e-02, -4.303177847676766e-03, -3.767006418958114e-03, -4.012568444675207e-03, -4.317756960955431e-03, -4.317756960955431e-03, -1.317313338448063e-02, -1.369907911107530e-02, -1.396144951703888e-02, -4.619340968026999e-03, -1.331893573500739e-02, -1.331893573500739e-02, -3.775835024766265e-04, -3.981232291548070e-04, -1.331133034308441e-03, -8.768763945438091e-05, -4.029898805198274e-04, -4.029898805212490e-04, -4.069301287906099e-03, -4.054461838183221e-03, -4.067682639115826e-03, -2.537284118152711e-03, -4.061901751928379e-03, -4.061901751928379e-03, -1.107860386482800e-02, -1.111130715008332e-02, -1.105022807681735e-02, -1.109249933760002e-02, -1.111852402296427e-02, -2.810196371575327e-03, -1.806829980819516e-02, -3.228096998207202e-02, -1.456714742941439e-02, -2.166512803828701e-02, -2.154997140370786e-02, -2.863850130172494e-02, -4.180976977606464e-02, -7.216391258505712e-03, -4.375852122272948e-02, -6.929686178398206e-03, -4.768848107127249e-03, -4.768848107127249e-03, -2.973327036372005e-02, -1.118636051864029e-04, -1.679622363781861e-04, -3.867907334340319e-02, -3.010263983008031e-02, -1.122544105348817e-04, -2.054226237793884e-02, -2.459513262993116e-02, -1.937931628336399e-02, -2.186668746500223e-02, -2.241616595838121e-02, -2.241616595838121e-02, -2.252876248177859e-02, -1.930735147611739e-02, -2.802550467499249e-02, -4.007831825896918e-02, -3.439831421795952e-02, -2.847394490173541e-02, -2.534578901743667e-02, -5.266126002386658e-02, -1.121443646252237e-02, -6.216258395581291e-02, -1.384687155530186e-02, -1.384687155530185e-02, -4.804529622623079e-02, -1.155686262521410e-03, -1.611791606697228e-03, -2.053528412065047e-02, -4.710597636815434e-02, -3.217757959377236e-03, -2.717421099359104e-04, -2.587814240658326e-05, -7.880644425652727e-05, -3.360885960540236e-03, -1.114603984002603e-04, -1.114603984002598e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
