
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mk00_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mk00", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.999776815947281e+01, -1.999800302214429e+01, -1.999907957141107e+01, -1.999559663065655e+01, -1.999741693876886e+01, -1.999741693876886e+01, -3.206430297534857e+00, -3.206982289121942e+00, -3.221541906534800e+00, -3.215739812838172e+00, -3.216234151291077e+00, -3.216234151291077e+00, -3.948936022600152e-01, -3.927688864152991e-01, -3.454387974608541e-01, -3.664431867072614e-01, -3.604808127456285e-01, -3.604808127456285e-01, -8.933646265512510e-02, -9.343283437031651e-02, -2.831110025404285e-01, -3.062060077755761e-02, -4.540977611182513e-02, -4.540977611182512e-02, -6.820264515523659e-06, -8.178905889068046e-06, -6.946934323992849e-04, -9.884608464891160e-07, -2.767585665742922e-06, -2.767585665742922e-06, 8.974016546696864e-01, 3.164577618578766e+00, -1.287577458682431e-01, 4.083660537908081e-01, -2.700711424880159e+00, 3.487431395716941e+01, -1.381833386917650e-02, 6.829626583365473e+00, -2.168475195291074e+00, -2.242903412611095e+00, -2.351818037246420e+00, -1.412185144114460e+00, 3.923489110823560e-02, 1.686862034056910e-01, 3.899387599730950e-02, -1.135734667658007e+00, -1.496902350814707e+00, -1.293637475508939e+01, -1.265909645568761e-03, 8.401104707028996e-03, -1.983844721640290e-04, -5.288207435618499e+00, -1.368356885387093e-02, -9.799325158000234e-03, 3.267871635598498e-08, 4.859448284300688e-11, -6.128101584177798e-11, -3.143942862947611e-04, 3.084357959060479e-07, -3.201588226171125e-09, 6.055527178190683e-06, -1.475200428508032e-05, -8.563602951456683e-07, 6.724191733737681e-04, -4.648178030574195e-05, 4.743043488551607e-07, -1.491634902518177e-06, -6.828916232005525e-01, 5.206873625512340e-02, -2.250925283465030e-01, 4.003952116838329e+00, 2.073276694950795e-02, 4.232762045417781e-02, -1.117751147155864e-03, -1.064799338548475e-03, -1.853460558448088e-02, 2.622174929224436e-01, -1.117713082085641e+00, -6.012228280550732e-01, -8.357181018042170e-05, -2.090156948719774e-03, -4.213277411301416e-01, -2.646455180204550e-04, -4.197627184406524e-03, -1.578361908166352e-07, -1.696332267682957e-09, -1.692608220634891e-09, -1.598614877758163e-03, -1.483890473853754e-08, -8.066045181855211e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mk00_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mk00", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-5.999330447841842e+01, -5.999400906643285e+01, -5.999723871423321e+01, -5.998678989196965e+01, -5.999225081630659e+01, -5.999225081630659e+01, -9.619290892604571e+00, -9.620946867365827e+00, -9.664625719604400e+00, -9.647219438514515e+00, -9.648702453873232e+00, -9.648702453873232e+00, -1.184680806780045e+00, -1.178306659245898e+00, -1.036316392382562e+00, -1.099329560121784e+00, -1.081442438236885e+00, -1.081442438236885e+00, -2.680093879653752e-01, -2.802985031109495e-01, -8.493330076212854e-01, -9.186180233267285e-02, -1.362293283354754e-01, -1.362293283354754e-01, -2.046079354657098e-05, -2.453671766720414e-05, -2.084080297197855e-03, -2.965382539467347e-06, -8.302756997228768e-06, -8.302756997228768e-06, 2.692204964009059e+00, 9.493732855736297e+00, -3.862732376047292e-01, 1.225098161372424e+00, -8.102134274640475e+00, 1.046229418715083e+02, -4.145500160752949e-02, 2.048887975009642e+01, -6.505425585873222e+00, -6.728710237833283e+00, -7.055454111739259e+00, -4.236555432343380e+00, 1.177046733247068e-01, 5.060586102170730e-01, 1.169816279919285e-01, -3.407204002974022e+00, -4.490707052444120e+00, -3.880912426526815e+01, -3.797728936706282e-03, 2.520331412108699e-02, -5.951534164920870e-04, -1.586462230685550e+01, -4.105070656161279e-02, -2.939797547400070e-02, 9.803614906795494e-08, 1.457834485290206e-10, -1.838430475253339e-10, -9.431828588842836e-04, 9.253073877181437e-07, -9.604764678513373e-09, 1.816658153457205e-05, -4.425601285524096e-05, -2.569080885437005e-06, 2.017257520121304e-03, -1.394453409172259e-04, 1.422913046565482e-06, -4.474904707554531e-06, -2.048674869601658e+00, 1.562062087653702e-01, -6.752775850395090e-01, 1.201185635051499e+01, 6.219830084852386e-02, 1.269828613625334e-01, -3.353253441467590e-03, -3.194398015645425e-03, -5.560381675344263e-02, 7.866524787673305e-01, -3.353139246256921e+00, -1.803668484165220e+00, -2.507154305412651e-04, -6.270470846159320e-03, -1.263983223390425e+00, -7.939365540613652e-04, -1.259288155321957e-02, -4.735085724499058e-07, -5.088996803048872e-09, -5.077824661904675e-09, -4.795844633274487e-03, -4.451671421561262e-08, -2.419813554556563e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mk00_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mk00", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mk00_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mk00", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([-1.097382326761514e-03, -1.097398921666463e-03, -1.097473421097989e-03, -1.097227825458179e-03, -1.097356402330570e-03, -1.097356402330570e-03, -6.537417593263675e-03, -6.539626293183868e-03, -6.597668007069610e-03, -6.572730228700378e-03, -6.576929101081186e-03, -6.576929101081186e-03, -1.381839286533194e-02, -1.371540871777455e-02, -1.150134903064164e-02, -1.262553560843815e-02, -1.228241462731000e-02, -1.228241462731000e-02, -4.107993029563959e-02, -4.295236266782985e-02, -4.479802288799398e-03, -1.102971784929115e-02, -1.713125859765970e-02, -1.713125859765969e-02, -5.675733755660406e-06, -6.999909412522500e-06, -3.007149374020770e-04, -6.188879614316315e-07, -2.445278866734630e-06, -2.445278866734630e-06, -1.525757831257414e-04, -1.896287619759726e-03, -3.140846360890549e-06, -3.157825296290753e-05, -1.381489168054939e-03, -2.303575584132529e-01, -6.812000621551153e-07, -1.628324212430745e-01, -1.704471685514437e-02, -1.788680827433030e-02, -1.934813273043669e-02, -6.976135401135407e-03, -2.038024654029423e-04, -2.938405500249378e-03, -2.541011569049568e-04, -1.919024425634440e-01, -2.827571645967483e-01, -2.111795468261087e+01, -5.632875099780244e-05, -3.616328644087735e-04, -1.747180343345802e-06, -1.057148000586458e-01, -4.072275106532233e-03, -2.088481741795929e-03, -1.472661380951086e-09, -1.601027559538368e-15, -5.694977394548631e-15, -1.442235785119374e-05, -8.251706492041028e-08, -8.890888637843740e-12, -4.784732155962885e-12, -2.889022688949171e-11, -9.676528535859549e-14, -5.936279131687239e-08, -2.843718305700370e-10, -2.960978675301327e-14, -3.152702607026356e-13, -1.044599773704346e-01, -5.288854284556709e-04, -8.669496146273326e-03, -2.931007592269068e+00, -7.858754554638813e-05, -1.605677726030804e-04, -3.174120236159958e-06, -1.663014710004265e-06, -2.186532065419841e-04, -6.654161358786261e-02, -1.209012175958897e+00, -1.037640635287609e-01, -4.963403593368651e-06, -1.225197407125519e-03, -1.261182233502074e-01, -4.950003549902531e-06, -1.245329142527787e-03, -1.081354796917476e-09, -1.021453551483891e-10, -1.099625719718999e-11, -2.181262935592422e-04, -2.410750155681769e-10, -7.123112617119294e-11])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mk00_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mk00", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([8.779058614092110e-03, 8.779191373331703e-03, 8.779787368783914e-03, 8.777822603665433e-03, 8.778851218644556e-03, 8.778851218644556e-03, 5.229934074610940e-02, 5.231701034547095e-02, 5.278134405655688e-02, 5.258184182960302e-02, 5.261543280864949e-02, 5.261543280864949e-02, 1.105471429226555e-01, 1.097232697421964e-01, 9.201079224513312e-02, 1.010042848675052e-01, 9.825931701847999e-02, 9.825931701847999e-02, 3.286394423651167e-01, 3.436189013426388e-01, 3.583841831039519e-02, 8.823774279432918e-02, 1.370500687812776e-01, 1.370500687812775e-01, 4.540587004528325e-05, 5.599927530018000e-05, 2.405719499216616e-03, 4.951103691453052e-06, 1.956223093387704e-05, 1.956223093387704e-05, 1.220606265005931e-03, 1.517030095807780e-02, 2.512677088712439e-05, 2.526260237032602e-04, 1.105191334443951e-02, 1.842860467306023e+00, 5.449600497240922e-06, 1.302659369944596e+00, 1.363577348411550e-01, 1.430944661946424e-01, 1.547850618434935e-01, 5.580908320908325e-02, 1.630419723223538e-03, 2.350724400199502e-02, 2.032809255239654e-03, 1.535219540507552e+00, 2.262057316773986e+00, 1.689436374608870e+02, 4.506300079824195e-04, 2.893062915270188e-03, 1.397744274676641e-05, 8.457184004691660e-01, 3.257820085225786e-02, 1.670785393436743e-02, 1.178129104760869e-08, 1.280822047630695e-14, 4.555981915638905e-14, 1.153788628095500e-04, 6.601365193632822e-07, 7.112710910274992e-11, 3.827785724770308e-11, 2.311218151159336e-10, 7.741222828687639e-13, 4.749023305349792e-07, 2.274974644560296e-09, 2.368782940241062e-13, 2.522162085621085e-12, 8.356798189634768e-01, 4.231083427645367e-03, 6.935596917018660e-02, 2.344806073815255e+01, 6.287003643711051e-04, 1.284542180824643e-03, 2.539296188927966e-05, 1.330411768003412e-05, 1.749225652335873e-03, 5.323329087029008e-01, 9.672097407671179e+00, 8.301125082300874e-01, 3.970722874694921e-05, 9.801579257004148e-03, 1.008945786801659e+00, 3.960002839922025e-05, 9.962633140222292e-03, 8.650838375339811e-09, 8.171628411871132e-10, 8.797005757751991e-11, 1.745010348473938e-03, 1.928600124545415e-09, 5.698490093695435e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
