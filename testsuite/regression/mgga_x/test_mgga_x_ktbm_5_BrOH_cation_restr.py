
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_5_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_5", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.067504532812996e+01, -2.067513814412448e+01, -2.067555443288262e+01, -2.067417579854733e+01, -2.067489760954175e+01, -2.067489760954175e+01, -3.170537179044654e+00, -3.170571682375209e+00, -3.171544652809782e+00, -3.171436944937211e+00, -3.171118853698605e+00, -3.845021821124193e+00, -6.146460592327002e-01, -7.574704433314612e-01, -7.388324452794996e-01, -7.443484094358271e-01, -7.431967815236340e-01, -7.431967815236340e-01, -1.965705039723385e-01, -1.995122492009399e-01, -7.400232227987948e-01, -1.487946650260888e-01, -1.674340338402271e-01, -1.674340338402271e-01, -6.768284860035867e-03, -7.123927749239807e-03, -3.932979631687113e-02, -3.908813352618366e-03, -4.911759041324380e-03, -4.911759041324380e-03, -5.492977342392250e+00, -5.493154055261329e+00, -5.492979644473492e+00, -5.136934497791760e+00, -5.493069567801292e+00, -5.493069567801292e+00, -1.775805162608818e+00, -1.789727115547642e+00, -1.765830689973120e+00, -1.777886486447705e+00, -1.788443983146261e+00, -2.192402123023098e+00, -6.362331817098603e-01, -6.771043003563925e-01, -5.970781863479020e-01, -6.116227389316725e-01, -6.439616086859007e-01, -5.608016080831034e-01, -9.300037122048531e-02, -1.967319009042390e-01, -8.627337361143370e-02, -2.068652118808509e+00, -1.210605450505617e-01, -1.210605450505617e-01, -2.796828790553832e-03, -3.821207587472323e-03, -2.921893721944910e-03, -5.856199491151234e-02, -3.264150578043657e-03, -3.519971531759860e-03, -6.133811919268695e-01, -6.129549611760763e-01, -5.945565896347199e-01, -6.132175291293086e-01, -6.131572826727816e-01, -6.131572826727816e-01, -5.971660617725510e-01, -5.384463638326468e-01, -5.555998003200406e-01, -5.717467524451286e-01, -5.635512363415083e-01, -5.046002204848890e-01, -7.136685343511689e-01, -2.068952229896459e-01, -2.980834848418329e-01, -3.153736714522318e-01, -3.400988273740766e-01, -3.400988273740766e-01, -4.139711989421733e-01, -3.764158609415338e-02, -5.134268611848165e-02, -3.695202376884096e-01, -7.393881990919068e-02, -8.147363617178865e-02, -9.552234899939453e-03, -1.021426114153329e-03, -2.144026935219799e-03, -7.648737340693416e-02, -3.257075541090247e-03, -3.257075541090245e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_5_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_5", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.945696138255738e+01, -2.945706403312036e+01, -2.945753748507396e+01, -2.945601120744869e+01, -2.945680852726031e+01, -2.945680852726031e+01, -4.403335804100053e+00, -4.403511341324567e+00, -4.408213654127498e+00, -4.406713051494833e+00, -4.406416121952004e+00, -4.139649596435000e+00, -7.735702828440633e-01, -8.276508462050177e-01, -8.162127925538523e-01, -8.180583668198969e-01, -8.177513574807348e-01, -8.177513574807348e-01, -2.220324777856726e-01, -2.244620633945142e-01, -9.071145276820510e-01, -1.765109155326682e-01, -1.953587646622017e-01, -1.953587646622015e-01, -8.281007141204841e-03, -8.716046422553598e-03, -4.803149808235676e-02, -4.782709602700498e-03, -6.009767384407035e-03, -6.009767384407035e-03, -6.781218706819167e+00, -6.785463007677296e+00, -6.781453392906297e+00, -7.217786712451661e+00, -6.783350024216157e+00, -6.783350024216157e+00, -2.402487169210985e+00, -2.435001604930123e+00, -2.378167625092889e+00, -2.406881071130437e+00, -2.432486894686568e+00, -2.347045243820641e+00, -7.140545605325247e-01, -8.140876410920613e-01, -6.481075392878376e-01, -6.875467964648155e-01, -7.311719286080561e-01, -8.055809042411766e-01, -1.207521572021444e-01, -2.291385005615564e-01, -1.123854048654598e-01, -2.365939424606442e+00, -1.447167730540040e-01, -1.447167730540043e-01, -3.729009376747583e-03, -4.675528470733592e-03, -3.575103731671389e-03, -7.714562666483564e-02, -4.351897930949003e-03, -4.306900744930692e-03, -8.011405750954410e-01, -7.841564948146826e-01, -8.141769600756590e-01, -7.950467008404000e-01, -7.925709711242813e-01, -7.925709711242812e-01, -7.777495482458002e-01, -5.913370355408587e-01, -6.355814567802587e-01, -6.894714668057086e-01, -6.609212915068408e-01, -7.227126635187613e-01, -8.413966789858381e-01, -2.536156051717071e-01, -3.288394738684759e-01, -4.254531021909202e-01, -3.662993541962795e-01, -3.662993541962792e-01, -5.777722915029635e-01, -4.597666262405764e-02, -6.262716137947781e-02, -3.993762049436096e-01, -9.640127115812129e-02, -9.865244669041121e-02, -1.168682551169148e-02, -1.249813319186552e-03, -2.623396452235825e-03, -9.269698327046931e-02, -3.985228719768879e-03, -3.985228719768879e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_5_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_5", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.239822846387377e-08, -1.239816386341666e-08, -1.239780431125703e-08, -1.239877180874068e-08, -1.239827508885258e-08, -1.239827508885258e-08, -1.157367772256729e-05, -1.157560055974506e-05, -1.162544724870175e-05, -1.160110437481856e-05, -1.160853828194990e-05, -1.388039741126019e-05, -4.184744507682364e-03, -5.375719028983405e-03, -5.086019705525627e-03, -5.311900419559462e-03, -5.257386893550361e-03, -5.257386893550361e-03, -7.241495486943142e-01, -7.279954985181960e-01, -1.100306836490961e-03, -6.673889304148608e-01, -7.058620692131762e-01, -7.058620692131764e-01, -2.906113288591259e+02, -2.678502375291087e+02, -6.362141812759305e+00, -7.452235940488945e+02, -5.571363630710786e+02, -5.571363630710786e+02, -3.968809434787206e-06, -3.967931463742062e-06, -3.968781954516118e-06, -3.721749538482005e-06, -3.968360347988704e-06, -3.968360347988704e-06, -9.894684908073165e-05, -9.934125211073784e-05, -9.840405120328197e-05, -9.888603120067882e-05, -9.942833448304204e-05, -1.207567433258496e-04, -2.115485924392933e-02, -1.720365182073999e-02, -2.509068534888931e-02, -2.482608183849666e-02, -2.044240377782486e-02, -1.801897893346526e-02, -4.669717167915713e-01, -3.876312822837021e-01, -5.239641042823301e-01, -1.932814802151577e-04, -1.081983440007987e+00, -1.081983440007987e+00, -3.189054421157249e+02, -7.331139913199720e+02, -3.566668451367226e+03, -1.041819771271775e+00, -4.667598063607773e+02, -1.522318171090760e+03, -2.497088650579119e-02, -2.532058717128653e-02, -2.445363286135221e-02, -2.510691909102995e-02, -2.515845249189891e-02, -2.515845249189891e-02, -2.784388459699850e-02, -3.952193826104539e-02, -3.715102874211108e-02, -3.384835002328870e-02, -3.563434174249825e-02, -3.217195914686293e-02, -1.388214867335305e-02, -1.874908824113779e-01, -1.958361595753405e-01, -9.772795215263826e-02, -1.645409246720323e-01, -1.645409246720324e-01, -4.130679061575688e-02, -6.975986633447135e+00, -3.617315395910392e+00, -1.672343419288697e-01, -9.214286758739830e-01, -2.098299554294832e+00, -1.009351541118055e+02, -1.134778131931720e+04, -4.362241297631542e+03, -2.448005052022312e+00, -2.122638288918894e+03, -2.122638288918899e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_5_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_5", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.108304038515229e-03, 1.108319837963335e-03, 1.108381519025930e-03, 1.108147880099363e-03, 1.108271506457168e-03, 1.108271506457168e-03, 1.322855678161055e-03, 1.324170583995716e-03, 1.358933621020463e-03, 1.344734136785795e-03, 1.346394668785590e-03, 7.369356587969337e-03, -4.386354538529983e-03, 2.373012516278070e-02, 2.123909354866687e-02, 2.248482999956402e-02, 2.219586571081469e-02, 2.219586571081469e-02, 5.891192294390742e-02, 6.157182045859980e-02, -3.228911091422612e-03, 2.490914167807795e-02, 3.697477159452543e-02, 3.697477159452538e-02, 1.011110981490214e-03, 1.086703783845046e-03, 4.359818289781010e-03, 4.993624095823777e-04, 7.407752387481630e-04, 7.407752387481630e-04, 6.406693994531859e-03, 6.409130512001734e-03, 6.406843669629968e-03, 5.347490583126244e-03, 6.407911472016687e-03, 6.407911472016687e-03, 6.695760275144718e-04, 9.640976792532428e-04, 4.472576350193054e-04, 7.025502636754288e-04, 9.472354188071845e-04, 1.204679276280473e-02, 5.038538538692817e-02, 5.096946394195215e-02, 4.954279469560024e-02, 5.254550591186669e-02, 5.062327490586280e-02, 2.695300186959366e-02, -1.773347382127221e-03, 3.287473255809521e-02, -1.467797086846587e-03, 1.590411188689496e-02, 2.184252180475814e-02, 2.184252180475833e-02, -5.557011629694781e-08, 4.589502145035315e-04, 9.983010094521412e-04, -5.830400309945152e-04, -3.502178039809341e-07, 7.449464047962092e-04, 5.948737861613859e-02, 5.877416166586007e-02, 5.539321302868961e-02, 5.923713986662359e-02, 5.913330256966194e-02, 5.913330256966196e-02, 6.099754595693152e-02, 5.701811878764475e-02, 5.923068607161421e-02, 6.050289676984478e-02, 5.994957156081707e-02, 3.994122962014363e-02, 4.756874586485698e-02, -1.189829007620590e-02, 5.358088592719105e-02, 2.964347747132105e-03, 6.371054024753443e-02, 6.371054024753435e-02, 1.195866296928237e-02, 4.189740825101307e-03, 5.526219745621069e-03, 7.849859900337235e-02, -1.587066974796331e-03, 1.290826521303979e-02, 9.872729646077316e-04, 1.356767480239414e-04, 4.823744549208091e-04, 1.245358760987480e-02, 8.229288701979196e-04, 8.229288701979215e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
