
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_5_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_5", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.258931904976505e+01, -2.258936989226580e+01, -2.258969141293883e+01, -2.258893615156541e+01, -2.258931826322528e+01, -2.258931826322528e+01, -3.452670197230273e+00, -3.452696139021851e+00, -3.453636770358038e+00, -3.455422926293595e+00, -3.454093024632412e+00, -3.454093024632412e+00, -6.607107461077567e-01, -6.604034701311472e-01, -6.537046647623032e-01, -6.608167690826533e-01, -6.585959083989684e-01, -6.585959083989684e-01, -1.940246763437707e-01, -1.963446666041928e-01, -7.630136204020295e-01, -1.442287438632617e-01, -1.628273687533827e-01, -1.628273687533827e-01, -6.762105346386665e-03, -7.112066092675371e-03, -3.887103940059031e-02, -3.863889500123466e-03, -4.876405855112454e-03, -4.876405855112453e-03, -5.490592234572158e+00, -5.490797324532005e+00, -5.490644180652656e+00, -5.490823569521250e+00, -5.490674043937552e+00, -5.490674043937552e+00, -2.125409608832451e+00, -2.145221775179383e+00, -2.123846420311627e+00, -2.141872031358648e+00, -2.137061541167973e+00, -2.137061541167973e+00, -6.014564505920323e-01, -6.370709902320049e-01, -5.449012303259887e-01, -5.464152395981439e-01, -6.107832695336164e-01, -6.107832695336164e-01, -1.008143458263882e-01, -1.942399950208230e-01, -9.318482927459215e-02, -1.858539226509307e+00, -1.190331593160855e-01, -1.190331593160855e-01, -2.912415825841886e-03, -3.732925965745051e-03, -2.883885707131317e-03, -6.272825044015841e-02, -3.446399466576913e-03, -3.446399466576914e-03, -6.083363615947402e-01, -6.080764398608983e-01, -6.081584979282615e-01, -6.082284145166481e-01, -6.081900553899254e-01, -6.081900553899254e-01, -5.874657250723099e-01, -5.338371274121942e-01, -5.491526026158308e-01, -5.636405712314061e-01, -5.558428128730790e-01, -5.558428128730790e-01, -6.618144461896749e-01, -2.462915254750186e-01, -2.910265121314442e-01, -3.620768558974544e-01, -3.269802163440668e-01, -3.269802163440667e-01, -4.793187079391312e-01, -3.741617358515779e-02, -5.060718402184510e-02, -3.457659053352357e-01, -8.012288680720063e-02, -8.012288680720064e-02, -9.322666452465629e-03, -9.666516426671834e-04, -2.130051677820466e-03, -7.568074463829157e-02, -3.204635535785152e-03, -3.204635535785149e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_5_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_5", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.732954454085763e+01, -2.732967380256559e+01, -2.733016475668308e+01, -2.732824211841034e+01, -2.732926145404824e+01, -2.732926145404824e+01, -4.320092306441003e+00, -4.320191043696829e+00, -4.322799754325855e+00, -4.321447397145086e+00, -4.321433082985670e+00, -4.321433082985670e+00, -7.981391713041426e-01, -7.973618782871267e-01, -7.814185354166564e-01, -7.882682587979003e-01, -7.864494687163992e-01, -7.864494687163992e-01, -2.209428026639189e-01, -2.231500588099868e-01, -9.296337142039496e-01, -1.746992993046154e-01, -1.931486354026078e-01, -1.931486354026077e-01, -8.282958993411459e-03, -8.719780016995896e-03, -4.813686456914554e-02, -4.796570409748093e-03, -6.020789763385340e-03, -6.020789763385336e-03, -6.784297792874750e+00, -6.788507829160619e+00, -6.784468550483806e+00, -6.788185942436460e+00, -6.786443754294486e+00, -6.786443754294486e+00, -2.351464003067198e+00, -2.366017116583630e+00, -2.337537951902229e+00, -2.349669725426030e+00, -2.366727559141378e+00, -2.366727559141378e+00, -7.456869125713596e-01, -8.608732448589326e-01, -6.795988439085788e-01, -7.440483708581286e-01, -7.635349249028596e-01, -7.635349249028596e-01, -1.241043310911075e-01, -2.279890562234552e-01, -1.150255372109718e-01, -2.567091537002868e+00, -1.441340617376356e-01, -1.441340617376358e-01, -3.719468855855370e-03, -4.701697340043037e-03, -3.586755495435945e-03, -7.785454650418414e-02, -4.328857868059371e-03, -4.328857868059377e-03, -8.078472200050977e-01, -7.906116599081612e-01, -7.966606047208369e-01, -8.016758126653998e-01, -7.991671279557853e-01, -7.991671279557853e-01, -7.905419952578574e-01, -5.950143384050328e-01, -6.423629978373430e-01, -6.994203831973893e-01, -6.697711352702823e-01, -6.697711352702823e-01, -8.984532657280844e-01, -2.812161879606446e-01, -3.267477249114688e-01, -4.214570209803680e-01, -3.661690183437608e-01, -3.661690183437604e-01, -5.516927216027355e-01, -4.603124308261553e-02, -6.275996215673367e-02, -4.128097556405605e-01, -9.858679526781662e-02, -9.858679526781654e-02, -1.175370492290183e-02, -1.263474642083909e-03, -2.627780525876888e-03, -9.268451850145450e-02, -4.001146684655579e-03, -4.001146684655577e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_5_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_5", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.346759522150649e-08, -1.346749893031672e-08, -1.346704277930893e-08, -1.346848177340077e-08, -1.346773168039731e-08, -1.346773168039731e-08, -1.252037815411005e-05, -1.252238354108536e-05, -1.257497496367899e-05, -1.255541847445773e-05, -1.256011386009939e-05, -1.256011386009939e-05, -4.581597386578554e-03, -4.571789267181773e-03, -4.346162135242760e-03, -4.588552893013200e-03, -4.524584607627872e-03, -4.524584607627872e-03, -7.104080956447666e-01, -7.116063199357567e-01, -1.176402281949296e-03, -6.105302264008572e-01, -6.648893392516432e-01, -6.648893392516432e-01, -2.890316487857201e+02, -2.651895086303427e+02, -5.934646532228744e+00, -6.922107053815374e+02, -5.327143860543056e+02, -5.327143860543057e+02, -3.967151740766581e-06, -3.966293298142429e-06, -3.967158739952479e-06, -3.966398255787396e-06, -3.966695321564465e-06, -3.966695321564465e-06, -1.176202702128617e-04, -1.180666407096287e-04, -1.176975702881864e-04, -1.182693308837629e-04, -1.178303963673359e-04, -1.178303963673359e-04, -2.008997399872470e-02, -1.624462401254793e-02, -2.306077726244472e-02, -2.239669554303194e-02, -1.947035343748845e-02, -1.947035343748845e-02, -9.300895244103532e-01, -3.776394908578157e-01, -1.074481448819977e+00, -1.751963808435681e-04, -1.024363946838130e+00, -1.024363946838130e+00, -7.970635362459454e+02, -6.233250783354744e+02, -3.278004169146566e+03, -2.464174939828558e+00, -1.318057571946761e+03, -1.318057571946761e+03, -2.476494780514853e-02, -2.512196672936365e-02, -2.500660924120624e-02, -2.490339731210049e-02, -2.495590221193079e-02, -2.495590221193079e-02, -2.739179945854878e-02, -3.920908551731724e-02, -3.675118029897521e-02, -3.339347658055671e-02, -3.517837925262198e-02, -3.517837925262198e-02, -1.294094655517980e-02, -2.567281570911275e-01, -1.901559699153452e-01, -1.116833860483016e-01, -1.579047263306292e-01, -1.579047263306292e-01, -4.727284569470778e-02, -6.738497028666044e+00, -3.329050118153176e+00, -1.572253334197957e-01, -1.945143070913068e+00, -1.945143070913070e+00, -8.520614057403323e+01, -6.660071852852757e+03, -4.189283617123509e+03, -2.333049257980845e+00, -1.907451598839243e+03, -1.907451598839247e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_5_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_5", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_5_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_5", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.483267205045991e-03, 1.483269572023475e-03, 1.483290729909605e-03, 1.483256535084498e-03, 1.483272922531012e-03, 1.483272922531012e-03, 3.750511644986250e-03, 3.751764648610647e-03, 3.786489423103932e-03, 3.788504423420773e-03, 3.781785131780383e-03, 3.781785131780383e-03, 4.356376179488724e-03, 4.360570439658332e-03, 4.727162830275151e-03, 5.866312223358025e-03, 5.466625769460135e-03, 5.466625769460135e-03, 5.305908471628196e-02, 5.421769018159466e-02, -9.882415185727305e-04, 1.704792657238367e-02, 2.769204089021794e-02, 2.769204089021789e-02, 9.972286571867991e-04, 1.059509766133372e-03, 3.623210405487056e-03, 4.134748676678207e-04, 6.608136344250303e-04, 6.608136344250301e-04, 6.399315797501423e-03, 6.401859365748142e-03, 6.399620088949756e-03, 6.401856328949371e-03, 6.400510893843290e-03, 6.400510893843290e-03, 1.026520603337439e-02, 1.064868691106019e-02, 1.033677377403652e-02, 1.070014349100062e-02, 1.044430811342620e-02, 1.044430811342620e-02, 3.957033301959570e-02, 4.216552190100021e-02, 2.985556056017678e-02, 3.116826258319801e-02, 4.085417697376074e-02, 4.085417697376074e-02, 9.441562208498885e-03, 2.910499869085528e-02, 8.556431531133500e-03, 1.016151219600090e-02, 1.779951660997012e-02, 1.779951660997025e-02, 1.584870809383346e-04, 3.014404617436752e-04, 8.041780056319047e-04, 6.043258211700432e-03, 5.133400373245207e-04, 5.133400373245313e-04, 5.856675768359866e-02, 5.776163766112048e-02, 5.804682008473219e-02, 5.828150602448434e-02, 5.816367685226210e-02, 5.816367685226210e-02, 5.910436744576213e-02, 5.486949569542528e-02, 5.669177856484586e-02, 5.797470528027975e-02, 5.721890188234383e-02, 5.721890188234383e-02, 3.662237359184983e-02, 3.988889475120132e-02, 4.488344303051684e-02, 4.290550274420981e-02, 4.901788425648550e-02, 4.901788425648539e-02, 4.581929052568767e-02, 3.824338849160373e-03, 4.403262217850683e-03, 5.471752544067970e-02, 1.017938461847539e-02, 1.017938461847528e-02, 6.355721203862578e-04, 3.073341888596213e-05, 4.351773904013949e-04, 1.075538622386507e-02, 6.252328544020657e-04, 6.252328544020616e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
