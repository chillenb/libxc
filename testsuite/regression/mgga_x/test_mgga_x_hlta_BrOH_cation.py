
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_hlta_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_hlta", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.495940800291703e+01, -1.495926424043625e+01, -1.495871259089814e+01, -1.496083726847357e+01, -1.495971181330224e+01, -1.495971181330224e+01, -3.750254919324397e+00, -3.749870141493716e+00, -3.739798283394065e+00, -3.744206699938484e+00, -3.743333917385370e+00, -3.743333917385370e+00, -9.764750473878518e-01, -9.778569313556758e-01, -1.010448174131638e+00, -9.911518883007717e-01, -9.950983206705084e-01, -9.950983206705084e-01, -3.016163170460128e-01, -2.996532222667013e-01, -1.417039396399595e+00, -3.328721431139208e-01, -3.219301335670545e-01, -3.219301335670544e-01, -1.613828159513359e-01, -1.617132867840859e-01, -2.622222987883763e-01, -1.538286853412412e-01, -1.535307073743781e-01, -1.535307073743781e-01, -3.134408083739971e+00, -3.124882279304532e+00, -3.133855949350747e+00, -3.125452984969328e+00, -3.129640983441484e+00, -3.129640983441484e+00, -2.294142070017491e+00, -2.272795004336474e+00, -2.311972769849360e+00, -2.292317730631194e+00, -2.273385227664563e+00, -2.273385227664563e+00, -5.192473436715137e-01, -4.354246038035771e-01, -5.537779367503832e-01, -4.964039579865429e-01, -5.058690628125118e-01, -5.058690628125118e-01, -3.262019578106293e-01, -3.677430984953831e-01, -3.191494533160212e-01, -1.586783198032509e+00, -3.020106320990024e-01, -3.020106320990023e-01, -1.572255566829186e-01, -1.569411824806775e-01, -9.794040615619495e-02, -2.815114659169062e-01, -1.225112403893250e-01, -1.225112403893250e-01, -2.090543601168039e-01, -2.741576151713936e-01, -2.541554515425032e-01, -2.355431646680632e-01, -2.451346427434800e-01, -2.451346427434800e-01, -2.140809279939595e-01, -4.747987720940809e-01, -4.258803551458534e-01, -3.632585770766135e-01, -3.974753569782087e-01, -3.974753569782087e-01, -4.940602856235329e-01, -3.918324203897109e-01, -4.047372109695845e-01, -4.108854186370152e-01, -4.008101787861019e-01, -4.008101787861018e-01, -4.799175933389774e-01, -2.591681956981410e-01, -2.822749524297748e-01, -3.506126996927187e-01, -2.776033580706259e-01, -2.776033580706259e-01, -2.003551658704060e-01, -1.157751976615546e-01, -1.087975755180366e-01, -2.698647313091124e-01, -1.134715341371683e-01, -1.134715341371683e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_hlta_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_hlta", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-9.973433455548500e+00, -9.972443879762780e+00, -9.973322317579902e+00, -9.972363333211570e+00, -9.973026882793917e+00, -9.971923242377812e+00, -9.974270928430089e+00, -9.973512087530892e+00, -9.973360431191042e+00, -9.972921978162974e+00, -9.973360431191042e+00, -9.972921978162974e+00, -2.500057635499459e+00, -2.500282261530320e+00, -2.499748177204236e+00, -2.500078685844805e+00, -2.493724515300555e+00, -2.492673228355927e+00, -2.496124438560792e+00, -2.496151160794645e+00, -2.500346557110128e+00, -2.490770706196607e+00, -2.500346557110128e+00, -2.490770706196607e+00, -6.534753785996420e-01, -6.485207516503106e-01, -6.546483383286218e-01, -6.492006068185003e-01, -6.728728704593508e-01, -6.744072715615386e-01, -6.628797739054899e-01, -6.586697429500016e-01, -6.486565625152358e-01, -6.813394434921546e-01, -6.486565625152358e-01, -6.813394434921546e-01, -2.042048212080622e-01, -1.982885562941806e-01, -2.031779424724791e-01, -1.967759601541750e-01, -9.679060262285577e-01, -9.236718905638038e-01, -2.265046560445928e-01, -2.175097696576884e-01, -2.124832855385795e-01, -2.284589228801653e-01, -2.124832855385795e-01, -2.284589228801653e-01, -1.069252362874252e-01, -1.081413633533255e-01, -1.071461249002145e-01, -1.083479504776172e-01, -1.747382742732462e-01, -1.748799044676183e-01, -1.028221054862257e-01, -1.022688668806191e-01, -1.055998267285578e-01, -8.473929904905114e-02, -1.055998267285578e-01, -8.473929904905113e-02, -2.089876980570986e+00, -2.089333602485657e+00, -2.083417586227597e+00, -2.083091999425294e+00, -2.089423646955763e+00, -2.089050815708009e+00, -2.083885496750437e+00, -2.083384969419199e+00, -2.086641957984087e+00, -2.086212529460858e+00, -2.086641957984087e+00, -2.086212529460858e+00, -1.530771438148809e+00, -1.528084451537089e+00, -1.516301252191768e+00, -1.514091184625745e+00, -1.544619209128323e+00, -1.538028235397257e+00, -1.531540578567456e+00, -1.524900991065825e+00, -1.512223463274811e+00, -1.519001462385552e+00, -1.512223463274811e+00, -1.519001462385552e+00, -3.479948853087871e-01, -3.443202942686288e-01, -2.926054274613417e-01, -2.879638709868383e-01, -3.773586106397381e-01, -3.618509841229128e-01, -3.353217927752055e-01, -3.269598093039765e-01, -3.360112588807296e-01, -3.386854855315490e-01, -3.360112588807296e-01, -3.386854855315490e-01, -2.171981078916479e-01, -2.177302604203246e-01, -2.448004755596375e-01, -2.455182957360971e-01, -2.131504450231520e-01, -2.124379771228916e-01, -1.058259141602672e+00, -1.057451244542461e+00, -2.085833532753152e-01, -1.952476720043989e-01, -2.085833532753152e-01, -1.952476720043989e-01, -1.034712165136240e-01, -1.060160868931773e-01, -1.031172012796351e-01, -1.060711599689053e-01, -6.554930119917091e-02, -6.507832866527431e-02, -1.899083605850435e-01, -1.854809685050752e-01, -9.192442409337674e-02, -7.771667309790947e-02, -9.192442409337671e-02, -7.771667309790950e-02, -1.399110710823785e-01, -1.388343072509530e-01, -1.831995154055499e-01, -1.823489434767901e-01, -1.699391587712475e-01, -1.689406115377421e-01, -1.574565623344188e-01, -1.566059158582624e-01, -1.638886845687080e-01, -1.629628903161887e-01, -1.638886845687081e-01, -1.629628903161887e-01, -1.433327822028847e-01, -1.421144860954059e-01, -3.167182733728677e-01, -3.163491496123326e-01, -2.843477395075866e-01, -2.834983756101990e-01, -2.421693795320807e-01, -2.421753584235865e-01, -2.651239714981964e-01, -2.648447242235178e-01, -2.651239714981964e-01, -2.648447242235179e-01, -3.333928614164087e-01, -3.253737709902274e-01, -2.611018910970876e-01, -2.613392803242046e-01, -2.703181385591773e-01, -2.693460267391913e-01, -2.733230760084599e-01, -2.745142964642119e-01, -2.676290044380326e-01, -2.667841201280607e-01, -2.676290044380324e-01, -2.667841201280606e-01, -3.217562403371852e-01, -3.181707906105696e-01, -1.723082864397008e-01, -1.732397804388847e-01, -1.883396741851090e-01, -1.880416371955974e-01, -2.407306785671474e-01, -2.270597832489192e-01, -1.887440110109388e-01, -1.819470924161911e-01, -1.887440110109387e-01, -1.819470924161910e-01, -1.328655029740007e-01, -1.342033211511472e-01, -7.713165731624455e-02, -7.723491928604441e-02, -7.250097065061310e-02, -7.255727239272147e-02, -1.817531442947083e-01, -1.781540526749599e-01, -7.522244613441990e-02, -7.582889095042866e-02, -7.522244613441986e-02, -7.582889095042859e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_hlta_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_hlta", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_hlta_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_hlta", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_hlta_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_hlta", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-5.847015593094755e-03, -5.847882157481647e-03, -5.847122773111827e-03, -5.847959870056319e-03, -5.847414674777944e-03, -5.848392463648591e-03, -5.846214026547420e-03, -5.846858989925206e-03, -5.847085349622643e-03, -5.847433685140839e-03, -5.847085349622643e-03, -5.847433685140839e-03, -1.879820223901699e-02, -1.879554081748114e-02, -1.880172244524620e-02, -1.879784776909760e-02, -1.887041894976799e-02, -1.888255249734712e-02, -1.884381209680572e-02, -1.884364173071051e-02, -1.879337258699260e-02, -1.890539020939119e-02, -1.879337258699260e-02, -1.890539020939119e-02, -6.171765918664705e-02, -6.254988383872177e-02, -6.150394518338245e-02, -6.243121337595013e-02, -5.840450344870035e-02, -5.800446302815312e-02, -5.984208708738849e-02, -6.048215014289787e-02, -6.276956622430994e-02, -5.643055721009061e-02, -6.276956622430994e-02, -5.643055721009061e-02, -1.779552480342761e-01, -1.895613997463971e-01, -1.804073906001377e-01, -1.934360312797402e-01, -3.669560601339762e-02, -4.001907739447806e-02, -1.335749494828699e-01, -1.429219110311136e-01, -1.713207377784242e-01, -1.125543861370053e-01, -1.713207377784241e-01, -1.125543861370053e-01, -8.709952052739227e-02, -8.827484394542823e-02, -8.888475063427030e-02, -9.047045487091933e-02, -1.006385496838457e-01, -1.032931547173052e-01, -7.161265771752523e-02, -7.159052850882648e-02, -8.381986995690183e-02, -8.796191014417548e-02, -8.381986995690183e-02, -8.796191014417547e-02, -3.009723371756161e-02, -3.010536932731993e-02, -3.024013484432835e-02, -3.024350643484184e-02, -3.010720054637686e-02, -3.011158649498136e-02, -3.022972145418469e-02, -3.023698199709004e-02, -3.016868377807285e-02, -3.017431833934286e-02, -3.016868377807285e-02, -3.017431833934286e-02, -2.943380301782777e-02, -2.951072618230780e-02, -2.996588547181862e-02, -3.002743300657492e-02, -2.894899396981310e-02, -2.916046277844686e-02, -2.941439181496413e-02, -2.963337198546057e-02, -3.010782391852005e-02, -2.984097321956030e-02, -3.010782391852005e-02, -2.984097321956030e-02, -1.487821562859929e-01, -1.509699632826385e-01, -2.009719017121566e-01, -2.058972100915895e-01, -1.254894534861979e-01, -1.360767364651894e-01, -1.528799921158488e-01, -1.613985218519460e-01, -1.599200274593656e-01, -1.540416105664168e-01, -1.599200274593657e-01, -1.540416105664168e-01, -1.186563530365297e-01, -1.187839593693762e-01, -1.368485567165785e-01, -1.365883971995363e-01, -1.160856850754138e-01, -1.197635255364810e-01, -5.071945321526831e-02, -5.076618148198109e-02, -1.348691011090234e-01, -1.532745259458775e-01, -1.348691011090234e-01, -1.532745259458775e-01, -6.144346530229433e-02, -6.039566701191020e-02, -6.994394988104520e-02, -6.754804156874736e-02, -1.193382520906064e-01, -1.241459064851347e-01, -1.145779582418951e-01, -1.190691513223364e-01, -7.262267686199851e-02, -1.094796119739381e-01, -7.262267686199851e-02, -1.094796119739381e-01, -5.840855341462525e-01, -5.920347200659888e-01, -3.887001048161113e-01, -3.921863632152054e-01, -4.355133628563305e-01, -4.402369772255278e-01, -4.887271689656419e-01, -4.936664271553826e-01, -4.600458558758415e-01, -4.648721006503017e-01, -4.600458558758415e-01, -4.648721006503015e-01, -5.556864566323106e-01, -5.637768325593412e-01, -1.567034947717686e-01, -1.573175141486582e-01, -1.884988342427841e-01, -1.897662774288577e-01, -2.451850951067092e-01, -2.456066941122189e-01, -2.116816695199392e-01, -2.124099722063091e-01, -2.116816695199392e-01, -2.124099722063091e-01, -1.691428921967706e-01, -1.755771292406090e-01, -1.396154681733965e-01, -1.398283412722538e-01, -1.450894429345689e-01, -1.466053274918071e-01, -1.641924478077919e-01, -1.635752257457071e-01, -1.582621882923831e-01, -1.589865390902831e-01, -1.582621882923831e-01, -1.589865390902832e-01, -1.467455383123134e-01, -1.497459512534205e-01, -1.018091752161744e-01, -1.013340601371495e-01, -1.033275919144062e-01, -1.052926253988962e-01, -1.945674943064997e-01, -2.139967171431328e-01, -1.288542056808387e-01, -1.398946736597176e-01, -1.288542056808388e-01, -1.398946736597176e-01, -7.520608055189834e-02, -7.541532539699888e-02, -5.607942516104172e-02, -5.603091838801066e-02, -8.777974726828790e-02, -9.042194907627191e-02, -1.334723777215940e-01, -1.386574250916200e-01, -9.548191797577979e-02, -1.087517345751469e-01, -9.548191797577980e-02, -1.087517345751469e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
