
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_b00_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_b00", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.343732661476495e+01, -2.343746142272088e+01, -2.343811305393207e+01, -2.343611280355869e+01, -2.343715369327133e+01, -2.343715369327133e+01, -2.973919943148749e+00, -2.974206290749145e+00, -2.982003819278677e+00, -2.980662314249343e+00, -2.979918476270291e+00, -2.979918476270291e+00, -5.528152839924747e-01, -5.534604003726722e-01, -5.730679377896735e-01, -5.687670711073936e-01, -5.711921266994341e-01, -5.711921266994341e-01, -1.955452983910203e-01, -1.934846250649232e-01, -7.094206977140795e-01, -2.072419881565454e-01, -2.019941882032023e-01, -2.019941882031694e-01, -7.933416761923986e-02, -7.951481910616710e-02, -1.347600310895981e-01, -7.231480627822501e-02, -7.471376898638626e-02, -7.471376898634668e-02, -1.091477280592032e+01, -8.837670400491827e+00, -4.817060381401463e+00, -1.307575726122651e+01, -5.228824451717886e+00, -7.508718275078989e+00, -1.112139895961600e+00, -2.070859187719794e+00, -1.796034562795326e+00, -1.821440650379634e+00, -1.839884945081031e+00, -1.674656542666887e+00, -1.289078490108861e+00, -1.221696531932145e+00, -9.987637263875029e-01, -6.263037343191213e-01, -7.188561059165403e-01, -7.640418204325035e-01, -6.593566228737870e-02, -3.760786215863148e-01, -6.109001917350126e-02, -2.284568712886418e+00, -1.754958146921266e-01, -1.549308311536412e-01, -1.437729943557132e-01, -3.067141752525087e+00, -1.904029339915272e-03, -4.140702988310802e-02, -8.390429282335402e-02, -2.391785275495797e-03, -3.243607815931416e+01, -5.020633265914842e-01, -4.888106284518339e-01, -5.090967052219366e+00, -4.828696377904531e-01, -1.005939648847294e+02, -4.549610394063166e-01, -5.235915514278542e-01, -1.098733235252099e+00, -5.313760646997225e-01, -7.482513107961734e-01, -1.522339393049920e+00, -1.712165263506797e+00, -1.304377134259282e-01, -1.451820079666342e-01, -1.978756273785822e-01, -3.265321943692024e-01, -2.970402490504755e-01, -4.413971710077818e-01, -2.448279371266800e-02, -1.551750725257185e-01, -3.223180979872546e-01, -5.236915653559156e-02, -1.456388520014858e-01, -6.218232184832698e-03, -6.645260192116322e-04, -1.397502471939683e-03, -5.066962292492248e-02, -2.196443696225947e-03, -2.196442604404934e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_b00_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_b00", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.986123317420122e+01, -3.985724979670653e+01, -3.986078921611115e+01, -3.985692796088181e+01, -3.985965036656398e+01, -3.985521622179631e+01, -3.986461857281260e+01, -3.986156434842134e+01, -3.986094079115613e+01, -3.985923654832256e+01, -3.986094079115613e+01, -3.985923654832256e+01, -5.918714905919064e+00, -5.917585768901273e+00, -5.920243121375085e+00, -5.918594005222772e+00, -5.950085768947388e+00, -5.955522786023715e+00, -5.938890416573409e+00, -5.939187546718482e+00, -5.914389703832484e+00, -5.966131807108298e+00, -5.914389703832484e+00, -5.966131807108298e+00, -5.258659033071607e-01, -5.423894841540747e-01, -5.209990723509033e-01, -5.399081266842024e-01, -4.638253823175804e-01, -4.525455432721150e-01, -4.766454644058790e-01, -4.854159321355256e-01, -5.582195401921772e-01, -4.145135761268003e-01, -5.582195401921772e-01, -4.145135761268003e-01, -1.068838927988312e-01, -1.083919520517084e-01, -1.071961993612703e-01, -1.116933039846241e-01, -5.699566580866912e-01, -5.665070515006431e-01, -1.353423663457410e-01, -1.283066911901041e-01, -1.107165448635957e-01, -1.312130454912012e-01, -1.107165448637030e-01, -1.312130454912016e-01, -3.417656883618861e-02, -3.497683046681848e-02, -3.455858664543289e-02, -3.544685872396713e-02, -7.355726045231971e-02, -7.543906667112872e-02, -2.962604454584806e-02, -2.962976872867865e-02, -3.352986228864950e-02, -2.653205935179729e-02, -3.352986228873889e-02, -2.653205935179704e-02, -9.843090848636887e+00, -9.534016366080600e+00, -8.683817774893440e+00, -8.675948784689101e+00, -6.085839946573402e+00, -6.078619534420032e+00, -1.071625216137983e+01, -1.080336145927314e+01, -7.183974200676207e+00, -7.188368050254053e+00, -8.276223449256371e+00, -8.240055661275365e+00, -2.038471291661215e+00, -2.047480629764048e+00, -3.252216059185622e+00, -3.261412709514163e+00, -2.700955463883375e+00, -2.750792231269519e+00, -2.827316957886163e+00, -2.884544297929350e+00, -3.017967759955133e+00, -2.937600282485595e+00, -2.814772537245137e+00, -2.757077363672813e+00, -2.010106630964261e+00, -2.127094328833139e+00, -1.431130107803109e+00, -1.396941853111419e+00, -1.579050320831445e+00, -1.734626595275552e+00, -1.218685246801073e+00, -1.278686030898855e+00, -1.352879069225115e+00, -1.291465648674837e+00, -1.393424741068582e+00, -1.333233142639100e+00, -8.499580053471370e-02, -8.569328632082751e-02, -2.026947223020829e-01, -2.023340315208566e-01, -7.753102772231515e-02, -8.095420052118356e-02, -4.295186849552034e+00, -4.292978812122867e+00, -1.111708910085844e-01, -1.064644732157640e-01, -8.817283392789337e-02, -8.236709990082085e-02, -8.611618218235678e-02, -8.471060262562186e-02, -1.821511333764032e+00, -1.784503447745944e+00, -2.459863954686762e-03, -2.605082398370085e-03, -5.475576059644058e-02, -5.498321266227505e-02, -5.428179956508093e-02, -4.412961233464431e-02, -2.512378124098339e-03, -3.450298561028182e-03, -1.508542193823982e+01, -1.530011202999716e+01, -5.440480565052246e-01, -5.443354680851455e-01, -5.335124721527785e-01, -5.348122214794415e-01, -2.559375212081699e+00, -2.484629247418066e+00, -5.316936176599454e-01, -5.334413158131690e-01, -3.816370008192457e+01, -3.843980218971145e+01, -5.201240571149499e-01, -5.224346510839449e-01, -1.009804336831323e+00, -1.018289746706447e+00, -1.649237431786728e+00, -1.655595965223575e+00, -8.404731614908534e-01, -8.201902723560022e-01, -1.139411229729482e+00, -1.138039652525648e+00, -1.889997614047433e+00, -1.878108782789099e+00, -2.139011203601479e+00, -2.052176519203839e+00, -1.270083938003005e-01, -1.273347976707000e-01, -1.524471740389237e-01, -1.560000938782886e-01, -3.595062697515683e-01, -3.621844950617561e-01, -3.447743751610430e-01, -3.486024652065423e-01, -3.224313387290137e-01, -3.262011848707959e-01, -8.056956262183093e-01, -8.403452608509353e-01, -3.251938255783569e-02, -3.275154799471288e-02, -8.870552302033172e-02, -9.731837683383779e-02, -5.712645948710332e-01, -6.577841858013576e-01, -6.666406590118044e-02, -6.943293171894023e-02, -9.007517962442768e-02, -8.556716920590393e-02, -8.135616045563069e-03, -8.430602468289082e-03, -8.850205810636557e-04, -8.870427816094868e-04, -1.800810149103341e-03, -1.915307059673606e-03, -5.790583178117740e-02, -6.555624614654240e-02, -2.379757422846701e-03, -3.162460306536045e-03, -2.379756442522681e-03, -3.162456127896592e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_b00_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_b00", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.441449741802125e-08, 0.000000000000000e+00, -1.441495064256441e-08, -1.441423146041186e-08, 0.000000000000000e+00, -1.441475755166322e-08, -1.441369849377253e-08, 0.000000000000000e+00, -1.441390220671355e-08, -1.441670057709428e-08, 0.000000000000000e+00, -1.441773206817899e-08, -1.441433069100427e-08, 0.000000000000000e+00, -1.441642984288096e-08, -1.441433069100427e-08, 0.000000000000000e+00, -1.441642984288096e-08, -2.174068476133659e-05, 0.000000000000000e+00, -2.174495974006307e-05, -2.174407054783482e-05, 0.000000000000000e+00, -2.174781195877395e-05, -2.181740513301033e-05, 0.000000000000000e+00, -2.183161709503823e-05, -2.175626400672224e-05, 0.000000000000000e+00, -2.176142521943025e-05, -2.174483850331329e-05, 0.000000000000000e+00, -2.182624820857560e-05, -2.174483850331329e-05, 0.000000000000000e+00, -2.182624820857560e-05, -1.015330040583512e-02, 0.000000000000000e+00, -1.024217909486933e-02, -1.013123902970818e-02, 0.000000000000000e+00, -1.023794670545836e-02, -9.909178171151740e-03, 0.000000000000000e+00, -9.811436769281427e-03, -9.604902984213641e-03, 0.000000000000000e+00, -9.634168279832156e-03, -1.033139010699526e-02, 0.000000000000000e+00, -9.218138094682344e-03, -1.033139010699526e-02, 0.000000000000000e+00, -9.218138094682344e-03, -1.178764899953642e+00, 0.000000000000000e+00, -1.050010707424389e+00, -1.153510980022870e+00, 0.000000000000000e+00, -1.011421948555878e+00, -6.288470124792881e-03, 0.000000000000000e+00, -6.184957277608724e-03, -2.504650897796009e+00, 0.000000000000000e+00, -2.388029169804711e+00, -1.025961097602862e+00, 0.000000000000000e+00, -6.047336402912664e+00, -1.025961097601172e+00, 0.000000000000000e+00, -6.047336402912659e+00, -1.679308725419720e+04, 0.000000000000000e+00, -1.408250305995306e+04, -1.489032869287834e+04, 0.000000000000000e+00, -1.222159750333481e+04, -1.039586152861410e+02, 0.000000000000000e+00, -8.969924154763312e+01, -6.957115764144881e+04, 0.000000000000000e+00, -7.239954484943156e+04, -2.294735541572126e+04, 0.000000000000000e+00, -1.399124733897579e+05, -2.294735541567126e+04, 0.000000000000000e+00, -1.399124733897587e+05, -1.283066766487398e-06, 0.000000000000000e+00, -1.474874786850331e-06, -2.427027113425066e-06, 0.000000000000000e+00, -2.443638592289499e-06, -1.796829799323277e-09, 0.000000000000000e+00, -1.420914505894852e-09, -9.125995130537850e-07, 0.000000000000000e+00, -8.879319854031096e-07, -8.764134588601672e-07, 0.000000000000000e+00, -8.868731673984307e-07, -4.099859290400530e-06, 0.000000000000000e+00, -4.501926044673462e-06, -3.489505532155562e-09, 0.000000000000000e+00, -4.742198157526414e-09, -7.588791622666855e-05, 0.000000000000000e+00, -7.605838058182491e-05, -1.117533017601904e-04, 0.000000000000000e+00, -1.122656796265601e-04, -1.119408281568976e-04, 0.000000000000000e+00, -1.114406267882771e-04, -1.133651979626864e-04, 0.000000000000000e+00, -1.127996909078079e-04, -1.676273535067646e-04, 0.000000000000000e+00, -1.591707878023896e-04, -4.521916996682981e-03, 0.000000000000000e+00, -3.964934067597639e-03, -7.549147715390056e-03, 0.000000000000000e+00, -7.497734563386945e-03, -4.713468665761461e-03, 0.000000000000000e+00, -5.365329744539477e-03, -3.816977004349409e-02, 0.000000000000000e+00, -3.576814644969081e-02, -2.443925739312226e-02, 0.000000000000000e+00, -2.775568272524646e-02, -1.917040687963656e-02, 0.000000000000000e+00, -2.185554972748755e-02, -9.911889813832741e-03, 0.000000000000000e+00, -9.961525283786608e-03, -3.331316280466310e-01, 0.000000000000000e+00, -3.296391323421640e-01, -1.855605374654140e-04, 0.000000000000000e+00, -1.855586415176337e-04, -2.831329759865208e-04, 0.000000000000000e+00, -2.837459515703891e-04, -5.738035785960752e+00, 0.000000000000000e+00, -5.177946770273411e+00, -7.635654522470573e+00, 0.000000000000000e+00, -7.319898812923127e+00, -5.666948550224782e+04, 0.000000000000000e+00, -5.193964136122422e+04, -5.823168507441003e+02, 0.000000000000000e+00, -5.731332314117125e+02, 1.215590746049535e-08, 0.000000000000000e+00, -1.175992622937021e-07, -1.215577863263463e-02, 0.000000000000000e+00, -7.875900132825709e-03, -1.076468963162264e+05, 0.000000000000000e+00, -5.868968578461599e+04, -6.022323547396565e-06, 0.000000000000000e+00, -2.928447229184889e-05, -2.675484597595566e-05, 0.000000000000000e+00, -2.618283041234911e-05, -9.477850115120444e-12, 0.000000000000000e+00, -9.363375181051123e-12, -3.073294533202959e-14, 0.000000000000000e+00, -3.018664159808851e-14, -4.049871652786700e-04, 0.000000000000000e+00, -4.257804538703992e-04, -1.042797159367516e-10, 0.000000000000000e+00, -7.562574620683071e-11, -6.809185265159011e-06, 0.000000000000000e+00, -6.693212231247985e-06, -1.049367685801108e-13, 0.000000000000000e+00, -9.848505123318155e-14, -4.516751829570350e-02, 0.000000000000000e+00, -4.535648597549843e-02, -9.526636055620062e-03, 0.000000000000000e+00, -9.336383473836940e-03, -6.343552905483385e-03, 0.000000000000000e+00, -4.222093057265708e-03, -3.501614253705937e-02, 0.000000000000000e+00, -3.470353873144290e-02, -5.551273995490374e-03, 0.000000000000000e+00, -5.534289016477947e-03, -2.812285620266228e-03, 0.000000000000000e+00, -2.878876156530837e-03, -1.471696463296957e-05, 0.000000000000000e+00, -1.419626651940065e-05, -4.009718997958274e-06, 0.000000000000000e+00, -3.905796445748547e-06, -2.823530422513228e-04, 0.000000000000000e+00, -2.459396631302232e-04, -9.742100550521106e-02, 0.000000000000000e+00, -9.684895140758916e-02, -1.285055908056350e-01, 0.000000000000000e+00, -1.272836711893321e-01, -5.199506175959387e-02, 0.000000000000000e+00, -5.172796114599950e-02, -2.092471913080644e-02, 0.000000000000000e+00, -3.431677757799458e-02, -4.534013687896256e+01, 0.000000000000000e+00, -3.823543739721944e+01, -1.901276842884798e-01, 0.000000000000000e+00, -2.042659804530099e-01, -7.717505701275756e-04, 0.000000000000000e+00, -1.096118800870797e-03, -1.825020181487803e+01, 0.000000000000000e+00, -1.789258466756875e+01, -6.294483490030274e-05, 0.000000000000000e+00, -2.138779557239332e-04, -3.523888128630483e-02, 0.000000000000000e+00, -7.874708930116336e-03, -8.337384866593838e-05, 0.000000000000000e+00, -1.018051960325710e-04, -7.333315909515854e+00, 0.000000000000000e+00, -5.358536834363919e-01, -3.425926992158949e-04, 0.000000000000000e+00, -8.419611676558755e-04, -1.136084410357761e-04, 0.000000000000000e+00, -2.137109329631228e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_b00_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_b00", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [-2.786790472876841e-04, -2.786867329841493e-04, -2.786766064273285e-04, -2.786849621492927e-04, -2.786754761075572e-04, -2.786814217622671e-04, -2.787029973377639e-04, -2.787165688282754e-04, -2.786774079161889e-04, -2.787073347662326e-04, -2.786774079161889e-04, -2.787073347662326e-04, -1.813920978718091e-03, -1.814203397639683e-03, -1.814220485627756e-03, -1.814447840567420e-03, -1.820646680865147e-03, -1.821945180956352e-03, -1.815892153690603e-03, -1.816399409709132e-03, -1.813357571993425e-03, -1.822190421349197e-03, -1.813357571993425e-03, -1.822190421349197e-03, -6.042602468647741e-03, -6.168269756422639e-03, -6.001365667253463e-03, -6.153622121946996e-03, -5.510739341522929e-03, -5.344392221899867e-03, -5.401860134908560e-03, -5.453609478990680e-03, -6.366253420754588e-03, -4.667647771620984e-03, -6.366253420754588e-03, -4.667647771620984e-03, -1.145468025045312e-02, -1.144113413966091e-02, -1.162876933573900e-02, -1.161454032134121e-02, -5.673161974860308e-03, -6.161631669243333e-03, -1.106339883922414e-02, -1.099103225832637e-02, -1.135038304709272e-02, -1.033020275889636e-02, -1.135038304707403e-02, -1.033020275889635e-02, -6.638105482913822e-03, -6.679211884468246e-03, -6.772563796367745e-03, -6.833638118434333e-03, -8.128981490922114e-03, -8.259889510098201e-03, -5.973700785338979e-03, -5.910950129873392e-03, -6.439919521014749e-03, -7.235777457303806e-03, -6.439919521000719e-03, -7.235777457303851e-03, -3.594117683957042e-04, -4.128440790667329e-04, -6.802380975117231e-04, -6.843888669320744e-04, -5.033438828557066e-07, -3.977478717218131e-07, -2.557683641329778e-04, -2.486755799795358e-04, -2.455702145699265e-04, -2.483192101114187e-04, -1.148776659545575e-03, -1.260512506734923e-03, -5.189581899940916e-08, -7.051513445724571e-08, -1.153723699175236e-03, -1.155371482562095e-03, -1.631365045971003e-03, -1.647363004121482e-03, -1.665717613762285e-03, -1.667254329249178e-03, -1.730600227226929e-03, -1.699442934718798e-03, -2.558950553447090e-03, -2.398071028097754e-03, -1.819200125643176e-03, -1.582486103722220e-03, -3.875684574217378e-03, -3.854534270201978e-03, -1.415368159727957e-03, -1.795413980357513e-03, -1.294423889253870e-02, -1.337950810011135e-02, -1.106080302612914e-02, -1.077572592734469e-02, -8.676208569499484e-03, -8.485088123616594e-03, -1.474700511566387e-05, -1.524891013120233e-05, -3.423454511391372e-03, -3.438534717187490e-03, -2.043764629244253e-07, -2.391195495696426e-07, -3.976153495240614e-03, -3.979393507656581e-03, -1.278945055787540e-02, -1.371978487190772e-02, -1.701903397519575e-02, -1.939522390882654e-02, -2.054359875390231e-03, -2.113375270306421e-03, -4.453868488569612e-05, -4.585694066662234e-05, 3.887541723171420e-16, -4.467078540648700e-15, -4.379081918853068e-06, -2.889927816589309e-06, -3.667839647454520e-03, -5.179479775800460e-03, -2.051978996063105e-13, -2.584412064824537e-12, -1.081501037504446e-05, -1.070700198687644e-05, -3.765422549321386e-12, -3.763688491477501e-12, -1.228432567257797e-14, -1.220780305834320e-14, -1.626987051875173e-04, -1.730445013462888e-04, -4.178730404994679e-11, -3.065957208479357e-11, -2.728598677655280e-06, -2.713507412142882e-06, -3.909429531087952e-14, -3.705577145219381e-14, -1.062804693117293e-02, -1.081182344570048e-02, -2.573573987718542e-03, -2.555907518878950e-03, -1.956442432157705e-03, -1.315938551243409e-03, -1.010429078984701e-02, -1.012609881296198e-02, -1.601880808121167e-03, -1.614842736183862e-03, -1.660678871945184e-03, -1.708325263271598e-03, -3.046538531559266e-07, -2.990092665037213e-07, -1.428573410828178e-07, -1.433838813984104e-07, -2.333970080680175e-05, -2.066881121684171e-05, -5.343320990820661e-03, -5.306325481824047e-03, -7.048239927608135e-03, -6.973834801882434e-03, -9.510238133864120e-03, -9.658189237026490e-03, -1.546086097008581e-06, -2.588003359775675e-06, -8.153687451256731e-03, -7.589917505518969e-03, -1.387864559940043e-02, -1.559544354247983e-02, -5.321379338618608e-07, -8.897496653599596e-07, -1.258389052400648e-02, -1.452390124842666e-02, -7.282575679904282e-11, -2.753531841053706e-10, -5.248490929298037e-11, -1.180922183055879e-11, -1.046133827184245e-12, -1.536875594973837e-12, -4.447164804760547e-03, -3.411641693016275e-04, -9.920396460275458e-12, -5.721614670499379e-11, -3.289739619241027e-12, -1.452289792104990e-11]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_b00_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_b00", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [3.984877413142217e-03, 3.982685722010640e-03, 3.984528858299090e-03, 3.982432832461544e-03, 3.983568965982760e-03, 3.981013032160215e-03, 3.987479574353166e-03, 3.986007347286115e-03, 3.984654000376193e-03, 3.984127105647420e-03, 3.984654000376193e-03, 3.984127105647420e-03, 2.315843527670767e-02, 2.314793757974792e-02, 2.317173250376869e-02, 2.315661849585571e-02, 2.343096834802538e-02, 2.347723988255594e-02, 2.333430927855957e-02, 2.333441369239681e-02, 2.313248693152275e-02, 2.356829367843402e-02, 2.313248693152275e-02, 2.356829367843402e-02, 1.451031315957992e-02, 1.622617295304999e-02, 1.401063557108252e-02, 1.598142370316805e-02, 8.347227047620538e-03, 7.085285303235015e-03, 8.868121755903015e-03, 9.687392731936162e-03, 1.795035360295365e-02, 2.519549400685895e-03, 1.795035360295365e-02, 2.519549400685895e-03, -1.602717272937633e-02, -1.952239152516467e-02, -1.622470367576127e-02, -1.760351182147541e-02, 1.317638667975071e-02, 1.383152528506057e-02, 2.565689366100215e-02, 1.930144028278976e-02, -1.358175023299312e-02, 3.737700007439943e-02, -1.358175023305710e-02, 3.737700007439932e-02, 2.655228239632908e-02, 2.671666574991216e-02, 2.709007723841076e-02, 2.733430959029047e-02, 3.242338429943925e-02, 3.291441483462536e-02, 2.389479267070048e-02, 2.364379055482117e-02, 2.575959757625165e-02, 2.894309517381841e-02, 2.575959757619552e-02, 2.894309517381851e-02, -1.095493152045712e-02, -1.007457905124857e-02, -7.735336278842880e-03, -7.682659165018672e-03, -5.345614911170087e-03, -5.337507238422974e-03, -1.426012184048907e-02, -1.448954237049892e-02, -4.994534751869235e-03, -4.983009315583839e-03, -4.090721663492631e-03, -3.437020655347657e-03, 1.066785612101741e-02, 1.084255796398652e-02, 2.710104053336511e-02, 2.734219274509702e-02, 2.168139904156734e-02, 2.263746328326396e-02, 2.403079166979878e-02, 2.503369156174499e-02, 2.756059786914947e-02, 2.608286175527686e-02, 2.890954550432656e-02, 2.725146455084221e-02, 3.898244683093949e-01, 4.223421048727801e-01, 1.591373832400564e-01, 1.351101135987253e-01, 2.447870574212733e-01, 3.131175490366844e-01, 2.550389311832386e-01, 2.657295714096327e-01, 2.539921869262819e-01, 2.585628944828223e-01, 2.577215142094612e-01, 2.628330479079991e-01, -1.477226666836082e-03, -1.534594862433291e-03, -4.487290973665503e-02, -4.475769334324971e-02, -9.723346314258241e-04, -1.349633963707733e-03, 8.052417270853561e-02, 8.056092503228666e-02, 4.101125847254312e-02, 3.576582024467115e-02, 5.903823369832693e-02, 6.083783478030522e-02, 8.217435384499266e-03, 8.453496888520389e-03, 1.777989006899862e-04, 1.831215950706466e-04, -1.279861766817981e-09, -1.961118681003793e-09, -2.141206396705588e-04, -2.731608761451113e-04, 1.467135280043360e-02, 2.071781953309399e-02, -1.154600374669890e-10, -3.207273605632185e-09, -2.267292241606283e+01, -2.253766698754857e+01, -2.655093228120489e-01, -2.695264512462811e-01, -3.027034129440695e-01, -3.050250612475964e-01, -3.518946479996362e+00, -3.369088513700603e+00, -3.142680133896349e-01, -3.154393107518180e-01, -6.551169995914003e+01, -6.567260188128948e+01, -3.353520281047354e-01, -3.339127245259755e-01, 2.482088384801239e-01, 2.510733325586734e-01, 4.411194217532031e-01, 4.402113372049923e-01, 7.833500858527555e-02, 7.131429375423720e-02, 2.710497973407631e-01, 2.666971437820190e-01, 4.764906239886146e-01, 4.658313429471394e-01, 3.221897235061016e-01, 2.880152135350038e-01, -2.502582613144171e-02, -2.515904853528582e-02, -2.192077368214617e-02, -2.076464861062275e-02, 5.630976706170591e-02, 5.660672592499295e-02, 3.763348204461148e-02, 3.944227567901824e-02, 4.297797597772989e-02, 4.447434259970172e-02, 1.825033568561073e-01, 1.973225387106787e-01, -1.073044800906433e-05, -6.629152391324704e-06, 3.234879405574045e-02, 3.002149657366366e-02, 2.294873763554283e-01, 3.125416729900488e-01, -8.946485648763568e-04, -1.581839450693792e-03, 4.771316623215064e-02, 5.387005826392851e-02, -1.490095963976206e-08, -1.665867531057453e-08, 2.094478542690500e-10, 4.674273540603672e-11, -7.500775903780210e-11, -1.113807812612277e-10, 1.684150293377344e-02, 2.079288129588073e-04, -3.280014311585349e-10, -1.967952271797538e-09, -3.545239910990118e-10, -2.138723973222208e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
