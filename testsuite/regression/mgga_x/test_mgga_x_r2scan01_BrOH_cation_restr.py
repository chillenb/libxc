
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_r2scan01_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scan01", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.318108074177262e+01, -2.318114978677546e+01, -2.318150804950862e+01, -2.318048187035980e+01, -2.318101223901333e+01, -2.318101223901333e+01, -3.399967928557407e+00, -3.400094482102130e+00, -3.403721852450557e+00, -3.404815833034209e+00, -3.403398848796976e+00, -3.403398848796976e+00, -5.938102313398272e-01, -5.931272036626656e-01, -5.776401358920579e-01, -5.885910623167966e-01, -5.855407447728530e-01, -5.855407447728530e-01, -1.799867950504465e-01, -1.820388146860412e-01, -6.491005480880515e-01, -1.149430278006447e-01, -1.372908026576895e-01, -1.372908026576895e-01, -3.022038295978319e-03, -3.075612547907075e-03, -2.430164166305382e-02, -1.225959444869496e-03, -1.729021088406793e-03, -1.729021088406793e-03, -5.667959391893098e+00, -5.669064935639653e+00, -5.668036376488471e+00, -5.669011327251590e+00, -5.668506352998191e+00, -5.668506352998191e+00, -2.076411868934219e+00, -2.099516481849392e+00, -2.070008106751883e+00, -2.090630631197496e+00, -2.092458516011190e+00, -2.092458516011190e+00, -6.153250231067618e-01, -6.677915427838962e-01, -5.450698990980448e-01, -5.578612169269969e-01, -6.276378480051524e-01, -6.276378480051524e-01, -7.480080808498979e-02, -1.737129426026356e-01, -6.832067858367429e-02, -1.914036930228295e+00, -9.504799954198988e-02, -9.504799954198988e-02, -8.718253806951369e-04, -1.199534539758418e-03, -9.900263990300616e-04, -4.348041307581671e-02, -1.185713833885727e-03, -1.185713833885727e-03, -6.397613659394015e-01, -6.361280338976047e-01, -6.374072097602314e-01, -6.384598464612261e-01, -6.379316503031658e-01, -6.379316503031658e-01, -6.197979319642631e-01, -5.319617759959755e-01, -5.573951958153472e-01, -5.823937593541926e-01, -5.694552825280521e-01, -5.694552825280521e-01, -6.907470780890578e-01, -2.285847775520650e-01, -2.724452169772604e-01, -3.518223426491749e-01, -3.123691002586522e-01, -3.123691002586522e-01, -4.767411377074444e-01, -2.337747637362506e-02, -3.328937330350108e-02, -3.448962509299991e-01, -5.871456063357672e-02, -5.871456063357672e-02, -4.049752642959357e-03, -2.204513686108462e-04, -5.937040649175304e-04, -5.599816489931681e-02, -1.091472842080872e-03, -1.091472842080871e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_r2scan01_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scan01", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.015012293117571e+01, -3.015023092719714e+01, -3.015071982708166e+01, -3.014911405078382e+01, -3.014995418439465e+01, -3.014995418439465e+01, -4.804465391652370e+00, -4.804581257501329e+00, -4.807566808677071e+00, -4.805583195793750e+00, -4.805811701000273e+00, -4.805811701000273e+00, -8.264972485241282e-01, -8.252770737827050e-01, -7.972487243404146e-01, -8.091814717610311e-01, -8.062536640522885e-01, -8.062536640522885e-01, -1.773043043256316e-01, -1.817871969418237e-01, -8.559465308958528e-01, -1.381567963617104e-01, -1.401861059875246e-01, -1.401861059875245e-01, 2.651644830511559e-02, 1.130711647634853e-02, -3.533654252906513e-02, -2.139925106933925e-03, -2.654729299587962e-03, -2.654729299587980e-03, -7.405767630687874e+00, -7.408179255347606e+00, -7.405888611492841e+00, -7.408017130450216e+00, -7.406985068197439e+00, -7.406985068197439e+00, -2.545537106208533e+00, -2.581838231921330e+00, -2.526249893585073e+00, -2.560186166621155e+00, -2.575232778153745e+00, -2.575232778153745e+00, -8.183983358438959e-01, -9.250031197972430e-01, -7.532989209165174e-01, -8.198733991316364e-01, -8.355953387228198e-01, -8.355953387228198e-01, -9.691475346265775e-02, -1.210429926831009e-01, -9.176596929499983e-02, -2.830957052338718e+00, -8.813644311497859e-02, -8.813644311497837e-02, -1.612270199185880e-03, -2.186673667811819e-03, -1.736358199892206e-03, -6.237469908184434e-02, -2.138756278417676e-03, -2.138756278417676e-03, -8.540497878773130e-01, -8.432354163315747e-01, -8.470037084279802e-01, -8.501537540349363e-01, -8.485756444514176e-01, -8.485756444514176e-01, -8.337936592015617e-01, -6.732091810994348e-01, -7.180774118107093e-01, -7.629170359146643e-01, -7.400846679388250e-01, -7.400846679388250e-01, -9.720063307581561e-01, -2.224424434817872e-01, -2.959897624563246e-01, -4.560752295041750e-01, -3.725118561295672e-01, -3.725118561295672e-01, -6.062228859291617e-01, -2.049332898958365e-02, -4.838880887524199e-02, -4.541771225401831e-01, -7.302177570427616e-02, -7.302177570427622e-02, -7.096942870211903e-03, -4.177659033304764e-04, -8.971231219636000e-04, -4.223215226074810e-02, -1.947775248251243e-03, -1.947775248251242e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_r2scan01_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scan01", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.269577327998517e-09, -6.269517584172480e-09, -6.269013722206261e-09, -6.269896404808126e-09, -6.269467916654914e-09, -6.269467916654914e-09, -1.521753679907472e-05, -1.521926966939076e-05, -1.526282862049435e-05, -1.523734815025029e-05, -1.524751157351865e-05, -1.524751157351865e-05, -4.361262790989715e-03, -4.348922068836298e-03, -4.083412433992485e-03, -4.223002504131798e-03, -4.182005889933759e-03, -4.182005889933759e-03, -1.529536215519476e+00, -1.518692444943066e+00, -1.340547480049510e-03, -1.248261902099594e+00, -1.997885452515983e+00, -1.997885452515987e+00, -1.238491720010194e+04, -5.661861020318906e+03, -2.389480956371106e+00, 2.243688771981317e+02, -1.967777733204367e+02, -1.967777733204161e+02, -1.769133534339043e-06, -1.769899286855564e-06, -1.769015154813313e-06, -1.769697105286425e-06, -1.769598880897708e-06, -1.769598880897708e-06, -9.992344898298269e-05, -9.264972777932975e-05, -9.779963430230377e-05, -9.097366436559810e-05, -9.679002019986584e-05, -9.679002019986584e-05, -1.682678197396208e-02, -1.449895230549704e-02, -2.626005451549633e-02, -2.991366768794333e-02, -1.559528858784076e-02, -1.559528858784076e-02, -1.198997638588069e+00, -1.636110845564662e+00, -9.954291289910863e-01, -2.161026988864609e-04, -3.866828234783143e+00, -3.866828234783107e+00, 8.048644564100646e+02, 4.674334702790051e+02, 1.406303706543197e+03, -7.826252146077048e-01, 9.491231215037452e+02, 9.491231215037433e+02, -1.305836015916037e-02, -1.306171774091349e-02, -1.310037789502427e-02, -1.309722464346934e-02, -1.310298227902676e-02, -1.310298227902676e-02, -1.548924313022613e-02, -2.048009793447967e-02, -1.851886939761981e-02, -1.727336063098936e-02, -1.792360298904377e-02, -1.792360298904378e-02, -1.316963132363649e-02, -5.567999118607259e-01, -3.258486636071032e-01, -1.366303310890884e-01, -2.073566947220757e-01, -2.073566947220758e-01, -4.121019797505807e-02, -2.666266806810533e+01, -1.014296390543543e+00, -1.624384992843731e-01, -3.294824429206544e+00, -3.294824429206528e+00, 7.474452181954356e+01, 1.213652159226687e+04, -1.814221817176336e+03, -1.202400428061188e+01, 1.084627848425069e+03, 1.084627848425074e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_r2scan01_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scan01", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_r2scan01_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scan01", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.007497564784497e-03, 1.007495834736792e-03, 1.007459077497464e-03, 1.007483948260914e-03, 1.007475070501543e-03, 1.007475070501543e-03, 9.187490470563798e-03, 9.188891022389437e-03, 9.226432120131883e-03, 9.222800762653346e-03, 9.219033475312749e-03, 9.219033475312749e-03, 1.498695670141083e-02, 1.494243723859570e-02, 1.410129390229505e-02, 1.539762280844528e-02, 1.497012327647896e-02, 1.497012327647896e-02, 1.312546105895656e-01, 1.358741919868320e-01, 2.543123910651532e-03, 4.785795490190005e-02, 1.048402291825528e-01, 1.048402291825530e-01, 4.344106420455020e-02, 2.335490970456363e-02, 4.039550454692479e-03, 1.383831630020676e-04, 6.783635674305551e-04, 6.783635674305293e-04, 4.117585187273464e-03, 4.120709003945427e-03, 4.117462607009786e-03, 4.120230971051205e-03, 4.119301510664810e-03, 4.119301510664810e-03, 1.232077504754278e-02, 1.172882955066885e-02, 1.192457696409681e-02, 1.136070623309314e-02, 1.217454598547070e-02, 1.217454598547070e-02, 5.265961387396215e-02, 5.472954687310640e-02, 6.232422768687593e-02, 6.792413357790025e-02, 5.111361957275938e-02, 5.111361957275938e-02, 1.789116149587130e-02, 1.393252001387108e-01, 1.303872121349841e-02, 2.064441769387213e-02, 7.894028880349085e-02, 7.894028880349097e-02, 5.190784615854562e-06, 2.383316450481680e-05, 2.252333950048898e-04, 5.800464850856312e-03, 5.362326579185820e-05, 5.362326579185861e-05, 4.251769071328095e-02, 4.187736779850666e-02, 4.223388411934628e-02, 4.242106769389612e-02, 4.234147401892208e-02, 4.234147401892208e-02, 4.634092387785483e-02, 4.102052021914479e-02, 4.199271820728732e-02, 4.350793060264078e-02, 4.288973150420915e-02, 4.288973150420915e-02, 5.541458409852508e-02, 9.719489238786989e-02, 9.731796126417952e-02, 8.957388334589414e-02, 9.267676726245426e-02, 9.267676726245430e-02, 6.160715951355136e-02, 1.782705840247360e-02, 4.358060060755854e-03, 9.499629766824690e-02, 2.356484406822374e-02, 2.356484406822366e-02, 6.487763984484847e-05, 3.202268126703522e-07, 4.312967661039911e-04, 6.295385196579131e-02, 1.110938100462847e-04, 1.110938100462841e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
