
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_r2scan01_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scan01", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.170118473959021e+01, -2.170130437325252e+01, -2.170183111849915e+01, -2.170005522448575e+01, -2.170098644021385e+01, -2.170098644021385e+01, -3.038788789372974e+00, -3.038913708177608e+00, -3.042271157209254e+00, -3.041187217159286e+00, -3.040987287658321e+00, -3.766325441934736e+00, -5.310097880717942e-01, -7.194181627176343e-01, -6.985863068674087e-01, -7.052126301367840e-01, -7.037928610605996e-01, -7.037928610605996e-01, -1.844445176345545e-01, -1.874540182037779e-01, -5.956302386932534e-01, -1.361348958646294e-01, -1.550772367155599e-01, -1.550772367155599e-01, -3.266592248877529e-03, -3.512129854117050e-03, -2.983887182016580e-02, -1.499012184282202e-03, -2.117620244635240e-03, -2.117620244635240e-03, -5.669020238107875e+00, -5.670113867240779e+00, -5.669075127231132e+00, -5.434081705850260e+00, -5.669572219297150e+00, -5.669572219297150e+00, -1.660647689479467e+00, -1.682169225262645e+00, -1.644539907257742e+00, -1.663576593000823e+00, -1.680485159869410e+00, -2.130338031114095e+00, -6.372884967710133e-01, -6.936736504139552e-01, -5.885323787494607e-01, -6.130235478238717e-01, -6.478475773775266e-01, -5.728570700138857e-01, -6.695256595206162e-02, -1.823822910979960e-01, -6.187657095235120e-02, -2.086482294341687e+00, -1.096591404144310e-01, -1.096591404144310e-01, -1.955295467192277e-03, -1.435447759839262e-03, -1.209202939332982e-03, -4.147936162524839e-02, -2.282112994589357e-03, -1.427901351070357e-03, -6.423222446650778e-01, -6.385457484253162e-01, -6.294919679163506e-01, -6.409770585945976e-01, -6.404297020408238e-01, -6.404297020408238e-01, -6.249027054028327e-01, -5.342430517468889e-01, -5.604301062593527e-01, -5.862388968371893e-01, -5.730819819835090e-01, -5.255965782490410e-01, -7.269126642340168e-01, -1.671884571474826e-01, -2.819955461907219e-01, -2.941624809323540e-01, -3.257144272995348e-01, -3.257144272995348e-01, -3.988860267785309e-01, -2.831373003341616e-02, -4.085366351593656e-02, -3.631370888591166e-01, -5.297767414868954e-02, -7.101296358457464e-02, -4.869645795054201e-03, -2.266195359241894e-04, -7.258370710918886e-04, -6.631515269511655e-02, -1.326719251986702e-03, -1.326719251986700e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_r2scan01_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scan01", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.211322121518084e+01, -3.211327569042703e+01, -3.211355962061894e+01, -3.211274587376291e+01, -3.211316639912725e+01, -3.211316639912725e+01, -4.804838654428106e+00, -4.805156620368974e+00, -4.813648010825020e+00, -4.810646464835225e+00, -4.810468112059104e+00, -4.690748613373279e+00, -7.947035025412736e-01, -8.373813414385697e-01, -7.961625493770115e-01, -8.119305163428323e-01, -8.084680823080550e-01, -8.084680823080550e-01, -1.992602095966683e-01, -2.048001083263478e-01, -8.434898051768447e-01, -9.973925102757987e-02, -1.428563049195972e-01, -1.428563049195973e-01, 1.391889527380823e-02, 1.492397178680808e-02, 7.204922485093904e-02, 6.456562239350358e-03, 9.099302508569638e-03, 9.099302508569638e-03, -7.405406664274553e+00, -7.407818905325955e+00, -7.405535012501886e+00, -7.726854142649186e+00, -7.406620625653531e+00, -7.406620625653531e+00, -2.590547289367115e+00, -2.626552476552965e+00, -2.565653847350210e+00, -2.595238023084484e+00, -2.623703383227524e+00, -2.623783736980702e+00, -8.122186216621663e-01, -9.007220294706662e-01, -7.383945492725034e-01, -7.817266662637596e-01, -8.287985323358660e-01, -9.022508785233858e-01, -9.014332709384190e-02, -1.704277942040537e-01, -8.320090711418213e-02, -2.675043098490388e+00, -6.220493818788473e-02, -6.220493818788489e-02, -2.607083341797564e-03, 6.183138799635796e-03, 5.202781209035734e-03, -5.554007224762605e-02, -3.042889248953857e-03, 6.146410681945339e-03, -8.508933666141576e-01, -8.410857492649779e-01, -8.587024192062849e-01, -8.473080191780775e-01, -8.458745237267508e-01, -8.458745237267508e-01, -8.271283827471374e-01, -6.748950899321692e-01, -7.185622790828351e-01, -7.617463447645121e-01, -7.396959837765900e-01, -7.967839742498949e-01, -9.394796344318217e-01, -2.373388549145639e-01, -3.222909330623416e-01, -4.588708581422953e-01, -3.896663482372508e-01, -3.896663482372508e-01, -6.334639324050223e-01, 7.138137629639565e-02, 7.089062512767827e-02, -4.540519525908771e-01, -7.121108445698487e-02, 8.530195586379801e-03, 2.058017519529366e-02, 9.682864237977172e-04, 3.124543856682367e-03, 1.445958081335139e-02, 5.710421944514776e-03, 5.710421944514960e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_r2scan01_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scan01", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.211175094765111e-08, -1.211155526909288e-08, -1.211066796810004e-08, -1.211357538125015e-08, -1.211205460549050e-08, -1.211205460549050e-08, -8.620336206535426e-06, -8.624193769140187e-06, -8.725942272117859e-06, -8.681522745445870e-06, -8.689885648099044e-06, -7.150492145333248e-06, -1.794496876658481e-03, -4.661918058752447e-03, -5.091865653526034e-03, -4.970421315535282e-03, -4.995131367704067e-03, -4.995131367704067e-03, -9.864607103714814e-01, -9.352527148672174e-01, -2.857266531393782e-04, -2.606648162488481e+00, -1.743632868903560e+00, -1.743632868903557e+00, -7.510662466019745e+03, -7.051731118848484e+03, -1.672972444304943e+02, -1.551926133169369e+04, -1.298521720753210e+04, -1.298521720753210e+04, -1.760633561891211e-06, -1.761475079153777e-06, -1.760691648468194e-06, -3.127668303299505e-06, -1.761048369385500e-06, -1.761048369385500e-06, -6.220710401459491e-05, -6.369595676067255e-05, -6.131184564636124e-05, -6.228029799075260e-05, -6.366488173246050e-05, -6.768806814867559e-05, -9.500434754594929e-03, -7.487456605266263e-03, -1.228196216656201e-02, -1.112409624448464e-02, -9.053249833412760e-03, -1.934248409657405e-02, -9.879475371212186e-02, -9.198124960974209e-01, -1.195454978448086e-01, -8.504393883000943e-05, -5.634603838942866e+00, -5.634603838942858e+00, -6.477702809462751e+04, -1.496187321898736e+04, -7.995435673472488e+04, -4.050575689827726e-01, -3.492123054246597e+04, -3.347734934561347e+04, -1.217774145828867e-02, -1.193831482971088e-02, -1.559503037339371e-02, -1.212240892333777e-02, -1.208870668063833e-02, -1.208870668063833e-02, -1.353099863017997e-02, -1.854386553738760e-02, -1.634371602216840e-02, -1.474800987770877e-02, -1.548875376951427e-02, -3.329721700735986e-02, -6.029021448232721e-03, -4.987342857826868e-02, -1.924819225947955e-01, -6.105333574350856e-02, -1.161605606151430e-01, -1.161605606151430e-01, -3.233327221848106e-02, -1.874061388238463e+02, -8.045829503269889e+01, -8.377563749959567e-02, -2.153792807088329e-01, -2.233340982013625e+01, -2.733468698459599e+03, -1.369909709979389e+05, -8.035029270477465e+04, -2.791500120914457e+01, -4.686482586823806e+04, -4.686482586823929e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_r2scan01_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scan01", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.863542464652918e-03, 1.863528249367088e-03, 1.863467065825399e-03, 1.863677869984931e-03, 1.863567165041428e-03, 1.863567165041428e-03, 5.662137031969752e-03, 5.664734334058725e-03, 5.733559865939889e-03, 5.705122947092613e-03, 5.708758394504335e-03, 5.136686108340733e-03, 8.274005470326279e-03, 2.402574434302310e-02, 2.418448536944929e-02, 2.421155324827544e-02, 2.420200428143129e-02, 2.420200428143129e-02, 8.748055103495030e-02, 8.682059447370269e-02, 2.000895540190107e-03, 9.958569096261469e-02, 9.503049870935823e-02, 9.503049870935806e-02, 2.689616676758897e-02, 2.943803336988622e-02, 1.170285059095220e-01, 1.073401784620722e-02, 1.779707520004861e-02, 1.779707520004861e-02, 4.102393452186251e-03, 4.105666579536932e-03, 4.102586897802555e-03, 6.985240230359229e-03, 4.104026608451320e-03, 4.104026608451320e-03, 7.252296053013114e-03, 7.595382340150698e-03, 7.029950639407740e-03, 7.285890779027453e-03, 7.575849567247850e-03, 8.854715250631756e-03, 3.249521441324150e-02, 3.229785812580350e-02, 3.350492274125944e-02, 3.384825558562515e-02, 3.241030501555059e-02, 6.450661559325588e-02, 4.767227085086333e-04, 8.133360977334352e-02, 3.876825514916110e-04, 1.014750202773571e-02, 1.158555086780238e-01, 1.158555086780236e-01, 1.319529482528882e-08, 9.670244146161943e-03, 2.307970079372008e-02, 1.457590389531562e-04, 8.317486419852149e-08, 1.689900064683386e-02, 4.001633426475127e-02, 3.904504174353857e-02, 5.008244065786878e-02, 3.977698934945020e-02, 3.964065294676568e-02, 3.964065294676568e-02, 4.102052683793269e-02, 3.765022096258198e-02, 3.778834002213817e-02, 3.835837491743124e-02, 3.799270367141402e-02, 7.681262612937302e-02, 3.012883552428319e-02, 7.713489294842003e-03, 6.008327041914571e-02, 3.987715815446984e-02, 5.501985247358345e-02, 5.501985247358347e-02, 4.708088485023348e-02, 1.149202341884250e-01, 1.253050857279491e-01, 5.380824403711187e-02, 4.172826210113687e-04, 1.395694525462322e-01, 2.749720472332791e-02, 1.697949122703480e-03, 9.182590372762428e-03, 1.442880906291979e-01, 1.874144137271062e-02, 1.874144137271104e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
