
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_scan_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.318402801426917e+01, -2.318409691505720e+01, -2.318445300807388e+01, -2.318342890748944e+01, -2.318395840585324e+01, -2.318395840585324e+01, -3.350987586320735e+00, -3.351105836923610e+00, -3.354608433738223e+00, -3.355819657787980e+00, -3.354349782258694e+00, -3.354349782258694e+00, -5.987384807842357e-01, -5.980193078402900e-01, -5.819174963412782e-01, -5.940846923779488e-01, -5.905299362010219e-01, -5.905299362010219e-01, -1.799013803382947e-01, -1.819083888351224e-01, -6.569992480203678e-01, -1.146298641232554e-01, -1.391693975318144e-01, -1.391693975318144e-01, -2.599225540882088e-03, -2.794486344383181e-03, -2.405815278008499e-02, -1.213775942676267e-03, -1.699014453984595e-03, -1.699014453984596e-03, -5.668011682789317e+00, -5.669116802097015e+00, -5.668087584781025e+00, -5.669062204659881e+00, -5.668558974893958e+00, -5.668558974893958e+00, -2.078322268394226e+00, -2.101158799666579e+00, -2.071643867925305e+00, -2.091996374267961e+00, -2.094358848399615e+00, -2.094358848399615e+00, -6.161247852909938e-01, -6.692646731032066e-01, -5.414007816425406e-01, -5.529016920832911e-01, -6.284629204731716e-01, -6.284629204731716e-01, -7.445807489485606e-02, -1.723346935325067e-01, -6.804188519467018e-02, -1.904713767323273e+00, -9.460567010483495e-02, -9.460567010483498e-02, -8.699634965316055e-04, -1.194728284897216e-03, -9.815715757785645e-04, -4.325934150801707e-02, -1.180246149087822e-03, -1.180246149087822e-03, -6.398867949302445e-01, -6.362870901811869e-01, -6.375635731135131e-01, -6.386065280919906e-01, -6.380841371597574e-01, -6.380841371597574e-01, -6.200046411702063e-01, -5.320855415396112e-01, -5.575558159596884e-01, -5.825837661587266e-01, -5.696371208210910e-01, -5.696371208210910e-01, -6.920382839172359e-01, -2.285065535785403e-01, -2.723133195087268e-01, -3.502833710225444e-01, -3.123060384072505e-01, -3.123060384072505e-01, -4.773768684102042e-01, -2.281524743708228e-02, -3.303748794150126e-02, -3.448283425040045e-01, -5.830561628247102e-02, -5.830561628247101e-02, -4.034551259913802e-03, -2.202900838335071e-04, -5.821461000133131e-04, -5.509477932579428e-02, -1.084347537328071e-03, -1.084347537328070e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_scan_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.019366588967730e+01, -3.019377285184058e+01, -3.019425755186505e+01, -3.019266707249580e+01, -3.019349913327024e+01, -3.019349913327024e+01, -4.686678878415667e+00, -4.687479374557634e+00, -4.708926078927469e+00, -4.710126468168887e+00, -4.705693229153095e+00, -4.705693229153095e+00, -8.454827032247068e-01, -8.438033245269078e-01, -8.095275915830682e-01, -8.340125880459074e-01, -8.271910314027983e-01, -8.271910314027983e-01, -1.735288047473632e-01, -1.762457843601713e-01, -8.563506075904836e-01, -1.430860889475793e-01, -1.371601174939693e-01, -1.371601174939693e-01, -3.687534355399473e-03, -4.656947415540163e-03, -3.768838064782699e-02, -2.235639996652849e-03, -3.088749395089071e-03, -3.088749395089072e-03, -7.413901287370238e+00, -7.416285446180177e+00, -7.414019474988586e+00, -7.416123781791859e+00, -7.415105514174256e+00, -7.415105514174256e+00, -2.560486424202199e+00, -2.597930284055521e+00, -2.542477217324303e+00, -2.576813947205096e+00, -2.590391467138303e+00, -2.590391467138303e+00, -8.190463408486146e-01, -9.268039587222666e-01, -7.580605641925159e-01, -8.482124199779014e-01, -8.364897393117694e-01, -8.364897393117694e-01, -1.014068016149108e-01, -7.472411081361359e-02, -9.526926323908691e-02, -2.910379280624573e+00, -7.768457407025894e-02, -7.768457407025861e-02, -1.614167244796670e-03, -2.199482999180611e-03, -1.792603606913004e-03, -6.436513164603606e-02, -2.156342402978669e-03, -2.156342402978669e-03, -8.540526566678101e-01, -8.437788207548543e-01, -8.473156309101251e-01, -8.502970590893120e-01, -8.487985901828150e-01, -8.487985901828150e-01, -8.336236670251151e-01, -6.756961050175699e-01, -7.197734058470995e-01, -7.640676276008177e-01, -7.413647824878764e-01, -7.413647824878764e-01, -9.781529203559465e-01, -2.193787547186214e-01, -2.893858108722003e-01, -4.508772313715503e-01, -3.676776442780652e-01, -3.676776442780651e-01, -6.075044772068554e-01, -3.259825653373664e-02, -5.056873775666199e-02, -4.533115947445179e-01, -7.808601397401529e-02, -7.808601397401529e-02, -7.137022052090268e-03, -4.177252582083504e-04, -1.085337775427399e-03, -5.755452047834058e-02, -1.982589021451499e-03, -1.982589021451498e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_scan_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.968128039759753e-09, -5.968072145713054e-09, -5.967601167097202e-09, -5.968427082644023e-09, -5.968026096805161e-09, -5.968026096805161e-09, -1.520348041531545e-05, -1.523128230954345e-05, -1.597704749588967e-05, -1.605632717539546e-05, -1.589681587567649e-05, -1.589681587567649e-05, -5.028512065001722e-03, -4.993185184055862e-03, -4.284145627478752e-03, -5.149524344369211e-03, -4.878221131795223e-03, -4.878221131795223e-03, -1.625011684671165e+00, -1.658357786546512e+00, -1.440413488816147e-03, -1.039244013992445e+00, -2.336136819142402e+00, -2.336136819142399e+00, -2.145110313944786e+02, 4.278218758530019e+01, 1.957809992787771e+00, 4.500311384514862e+02, 3.382155487708024e+02, 3.382155487708029e+02, -1.681710430918119e-06, -1.682157694086659e-06, -1.681591189092248e-06, -1.681991780085494e-06, -1.682008633774059e-06, -1.682008633774059e-06, -9.590106054150158e-05, -8.806221023832108e-05, -9.336353634986427e-05, -8.629674988792618e-05, -9.255968152459318e-05, -9.255968152459318e-05, -1.722174096806387e-02, -1.430209191733858e-02, -3.552501095352855e-02, -3.774407657353236e-02, -1.564333822737393e-02, -1.564333822737393e-02, -7.473789077689116e-01, -2.275428086424353e+00, -5.450672675399644e-01, -2.797576797833727e-04, -4.924612227349689e+00, -4.924612227349721e+00, 8.290964045312569e+02, 5.143197799131575e+02, 2.295606329630230e+03, 1.769933591764977e-01, 1.080464005375218e+03, 1.080464005375217e+03, -1.257220185369325e-02, -1.220152646723545e-02, -1.232508082892690e-02, -1.243456208034067e-02, -1.237966378862105e-02, -1.237966378862105e-02, -1.527377414209105e-02, -1.933242741205517e-02, -1.751708406513712e-02, -1.634554160531586e-02, -1.700618385323169e-02, -1.700618385323169e-02, -1.372569845992001e-02, -5.788655593597478e-01, -3.595771991608652e-01, -1.785476539272116e-01, -2.331991755219634e-01, -2.331991755219638e-01, -4.114805256370512e-02, -4.041146752064002e+00, 7.659240998638533e-01, -1.879413296855114e-01, -1.954763679184254e+00, -1.954763679184243e+00, 8.282760402846672e+01, 1.219699421691603e+04, 2.279893371255188e+03, -7.275082240620185e+00, 1.411081888064018e+03, 1.411081888064022e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_scan_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([9.609135204747699e-04, 9.609121029644375e-04, 9.608788515408209e-04, 9.608991580054734e-04, 9.608923702597266e-04, 9.608923702597266e-04, 8.786334692152871e-03, 8.805112183515828e-03, 9.311747827774393e-03, 9.383203684099683e-03, 9.263195487752720e-03, 9.263195487752720e-03, 1.795732005323574e-02, 1.781204490087161e-02, 1.524772104763654e-02, 1.988245533226701e-02, 1.836480812243664e-02, 1.836480812243664e-02, 1.396769819690302e-01, 1.485906675583366e-01, 2.350452487099689e-03, 4.159803019734986e-02, 1.238733775159891e-01, 1.238733775159892e-01, 1.364836364177918e-03, 5.016734513143808e-04, 1.369449874762945e-03, 8.920958424211407e-07, 7.213912243305794e-06, 7.213912243305555e-06, 3.922421551601843e-03, 3.924737299790858e-03, 3.922278426535278e-03, 3.924333256310508e-03, 3.923723093204004e-03, 3.923723093204004e-03, 1.189080274895841e-02, 1.121008585405329e-02, 1.144859402419107e-02, 1.083693868650075e-02, 1.170653229068629e-02, 1.170653229068629e-02, 5.373521602915024e-02, 5.420130334237420e-02, 8.441603215781789e-02, 9.284872359070492e-02, 5.117706051680552e-02, 5.117706051680552e-02, 1.327420162705748e-02, 1.930567337478006e-01, 9.457973196492785e-03, 2.719062066177587e-02, 1.010320009656134e-01, 1.010320009656140e-01, 2.477087263148103e-08, 1.689041813327802e-07, 2.228276658102009e-06, 3.467637895066879e-03, 5.461814186764062e-07, 5.461814186764095e-07, 4.040377021593078e-02, 3.913297748830433e-02, 3.956240921131231e-02, 3.993302928784493e-02, 3.974725731407289e-02, 3.974725731407289e-02, 4.435226567773128e-02, 3.887081899852129e-02, 3.980315204847134e-02, 4.133947793187977e-02, 4.073881266135824e-02, 4.073881266135825e-02, 5.894223589478816e-02, 1.012090507194159e-01, 1.076805578616502e-01, 1.175623925909926e-01, 1.046608772160276e-01, 1.046608772160277e-01, 6.169475007653123e-02, 4.933531075662753e-03, 1.999923313489110e-03, 1.100131250190971e-01, 1.650125414072539e-02, 1.650125414072534e-02, 2.424381572499188e-06, 3.736317403473603e-10, 1.282048465861785e-06, 4.090145450189210e-02, 1.068593913394319e-06, 1.068593913394311e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
