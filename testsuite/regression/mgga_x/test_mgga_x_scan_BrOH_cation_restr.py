
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_scan_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.164337317732737e+01, -2.164350546120585e+01, -2.164408322660445e+01, -2.164212002626475e+01, -2.164315015103753e+01, -2.164315015103753e+01, -3.116197822250544e+00, -3.116366993781380e+00, -3.120883789250064e+00, -3.119340472099033e+00, -3.119181820940695e+00, -3.766325441934736e+00, -5.319492414163302e-01, -7.194181627176343e-01, -6.985863068674087e-01, -7.052126301367840e-01, -7.037928610605996e-01, -7.037928610605996e-01, -1.844445176345545e-01, -1.874540182037779e-01, -5.956302415363475e-01, -1.361348958646294e-01, -1.550772367155599e-01, -1.550772367155599e-01, -3.266592248877448e-03, -3.512129854116959e-03, -2.983887182016578e-02, -1.499012184282053e-03, -2.117620244635286e-03, -2.117620244635286e-03, -5.669020238107875e+00, -5.670113867240779e+00, -5.669075127231132e+00, -5.437752883247960e+00, -5.669572219297150e+00, -5.669572219297150e+00, -1.685272417231660e+00, -1.710212497703339e+00, -1.666796835369049e+00, -1.688578798573808e+00, -1.708314659566347e+00, -2.130338031114095e+00, -6.372884967710133e-01, -6.936736504139552e-01, -5.885323787494607e-01, -6.130235478238717e-01, -6.478475773775266e-01, -5.603401595670813e-01, -6.695256595206163e-02, -1.823822910979960e-01, -6.187657095235120e-02, -2.086482294341687e+00, -1.096591404144310e-01, -1.096591404144310e-01, -1.955295467192269e-03, -1.435447759839335e-03, -1.209202939332940e-03, -4.147936162524839e-02, -2.282112994589355e-03, -1.427901351070120e-03, -6.423222446650778e-01, -6.385457484253162e-01, -6.298300793576678e-01, -6.409770585945976e-01, -6.404297020408238e-01, -6.404297020408238e-01, -6.249027054028327e-01, -5.342430517468889e-01, -5.604301062593527e-01, -5.862388968371893e-01, -5.730819819835090e-01, -5.213898519475252e-01, -7.269126642340168e-01, -1.671884605208345e-01, -2.819955461907219e-01, -2.982794457221228e-01, -3.257144272995348e-01, -3.257144272995348e-01, -4.099144343635134e-01, -2.831373003341611e-02, -4.085366351593658e-02, -3.631370888591166e-01, -5.297767414868952e-02, -7.101296358457462e-02, -4.869645795054264e-03, -2.266195359241565e-04, -7.258370710918941e-04, -6.631515269511654e-02, -1.326719251986742e-03, -1.326719251986580e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_scan_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.272501384557247e+01, -3.272499667725312e+01, -3.272499219197608e+01, -3.272523904910598e+01, -3.272509951385009e+01, -3.272509951385009e+01, -5.188673340135045e+00, -5.188892450805104e+00, -5.194342482862294e+00, -5.192708945923505e+00, -5.192351088925417e+00, -4.709529639139768e+00, -8.108167493030147e-01, -8.400300916155564e-01, -7.976992953302300e-01, -8.140171620847608e-01, -8.104366969386085e-01, -8.104366969386085e-01, -1.987302757455298e-01, -2.044858255838524e-01, -8.434900157198792e-01, -9.043112238849606e-02, -1.389529818213342e-01, -1.389529818213343e-01, 8.973174361590239e-01, 8.523155716892007e-01, 2.935818945037293e-01, 1.448640966274588e+00, 1.096531624076190e+00, 1.096531624076190e+00, -7.413484456283118e+00, -7.415867754223076e+00, -7.413611108211154e+00, -7.752891941782647e+00, -7.414683837216260e+00, -7.414683837216260e+00, -2.744739400346477e+00, -2.802095975467274e+00, -2.703081991414587e+00, -2.751946021677302e+00, -2.798002928375552e+00, -2.635022965020260e+00, -8.144786149758798e-01, -9.019724130288511e-01, -7.411322804394884e-01, -7.838712043436242e-01, -8.308782168521943e-01, -8.994815871915948e-01, -9.014332709384192e-02, -1.662633800110782e-01, -8.320090711418213e-02, -2.681319786837574e+00, -4.877647263419879e-02, -4.877647263419897e-02, -2.607083341797574e-03, 1.544185138817866e+00, 7.814317536859177e-01, -5.554007224762607e-02, -3.042889248953861e-03, 1.026697808344939e+00, -8.512264496733284e-01, -8.417740958287178e-01, -8.585054217502563e-01, -8.477884742139544e-01, -8.464104109933261e-01, -8.464104109933261e-01, -8.275092266576159e-01, -6.771562046797198e-01, -7.202449188110206e-01, -7.627702516409072e-01, -7.410461928390127e-01, -8.251619902610389e-01, -9.410998169703545e-01, -2.373390853184147e-01, -3.229727776324595e-01, -4.844621113611852e-01, -3.912898588932489e-01, -3.912898588932489e-01, -6.784028751171360e-01, 3.056868954280405e-01, 2.247230553076433e-01, -4.558029919682773e-01, -7.121108445698486e-02, 4.683076979308400e-02, 9.689788314328776e-01, 3.088715144067203e+00, 1.324735158332434e+00, 5.616903090487044e-02, 9.332103959693741e-01, 9.332103959718268e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_scan_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.695372102469329e-08, -1.695310939801203e-08, -1.695050212459372e-08, -1.695957209346016e-08, -1.695480370212859e-08, -1.695480370212859e-08, -1.808076273764096e-05, -1.808312829863404e-05, -1.813964916673396e-05, -1.811132633751071e-05, -1.812196505079690e-05, -6.796306266815501e-06, -9.891869071352645e-03, -4.574015453095269e-03, -5.041607003296541e-03, -4.900274633159381e-03, -4.929413723801536e-03, -4.929413723801536e-03, -9.962530699616720e-01, -9.409375250539539e-01, -5.448348983024671e-03, -2.874220407040123e+00, -1.838253010522137e+00, -1.838253010522131e+00, -3.527080936084939e+05, -2.935371139167288e+05, -4.837673892185599e+02, -2.520199275207845e+06, -1.136228847250668e+06, -1.136228847250668e+06, -1.674059980117968e-06, -1.674592664123454e-06, -1.674100096020533e-06, -3.636649149032185e-06, -1.674321694734035e-06, -1.674321694734035e-06, -1.478936713477393e-04, -1.496239571936138e-04, -1.468428965887782e-04, -1.478899398123131e-04, -1.496693585881015e-04, -6.463457819615087e-05, -8.991773978728529e-03, -7.132188137567911e-03, -1.164568993716809e-02, -1.052902294835505e-02, -8.573049858550853e-03, -2.843464309435647e-02, -3.037645076377606e+01, -9.665406642621182e-01, -4.154336665660931e+01, -8.057445656821411e-05, -6.454729393087282e+00, -6.454729393087273e+00, -4.108027718543029e+07, -2.702993206419937e+06, -8.709668293807764e+06, -2.042415065045749e+02, -2.213832057538435e+07, -4.053553632241230e+06, -1.145762005625901e-02, -1.117172519943861e-02, -1.594442240518321e-02, -1.134755684323770e-02, -1.130489973049474e-02, -1.130489973049474e-02, -1.269992896071456e-02, -1.755726220807105e-02, -1.548503649619098e-02, -1.405084360735144e-02, -1.471301885235337e-02, -5.293576247025424e-02, -5.730790896407248e-03, -8.837699570308983e-01, -1.903589686209255e-01, -1.458471369742021e-01, -1.124978459352967e-01, -1.124978459352968e-01, -6.333417566186511e-02, -5.717932329440641e+02, -1.744006689599415e+02, -7.951706382045930e-02, -7.726398418257000e+01, -3.005878538370539e+01, -9.388996723639590e+04, -3.127369490436327e+08, -2.457946443455026e+07, -3.848723633278038e+01, -5.552282674368336e+06, -5.552282674382914e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_scan_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.267451459232536e-03, 2.267395613726258e-03, 2.267165323666128e-03, 2.267992543395253e-03, 2.267556576129831e-03, 2.267556576129831e-03, 7.771924696430453e-03, 7.773878399730700e-03, 7.822281862765490e-03, 7.802716650573219e-03, 7.805672232936079e-03, 4.900261725655247e-03, 9.692351241737295e-03, 2.360612450333856e-02, 2.396317940041755e-02, 2.389491783121790e-02, 2.390691638146839e-02, 2.390691638146839e-02, 8.828797943959762e-02, 8.731095648972083e-02, 2.000903928712116e-03, 1.092393718224861e-01, 9.986422336658018e-02, 9.986422336658006e-02, 1.227602610554768e+00, 1.191393100616476e+00, 3.325809713162124e-01, 1.688950654254363e+00, 1.511061019548301e+00, 1.511061019548301e+00, 3.908455692752377e-03, 3.910929773375722e-03, 3.908603560343771e-03, 7.292021631158108e-03, 3.909691871082876e-03, 3.909691871082876e-03, 9.590894568380720e-03, 1.033040903389321e-02, 9.061122339455290e-03, 9.669309891552203e-03, 1.028917685309316e-02, 8.484244662421927e-03, 3.086459509518343e-02, 3.083772341267890e-02, 3.188900963797869e-02, 3.215066644540882e-02, 3.079526116044343e-02, 7.099258554046597e-02, 4.767227085086331e-04, 8.520415836345598e-02, 3.876825514916109e-04, 9.645705959472149e-03, 1.318595941566893e-01, 1.318595941566891e-01, 1.319529482528732e-08, 1.692337765518670e+00, 2.438235605464051e+00, 1.457590389531562e-04, 8.317486419851869e-08, 1.983919725882107e+00, 3.767404317610747e-02, 3.659426973577180e-02, 4.840832381969158e-02, 3.727218660670849e-02, 3.711323591529517e-02, 3.711323591529517e-02, 3.853127770628164e-02, 3.578089480131890e-02, 3.592018701049107e-02, 3.662914184853923e-02, 3.619191391743713e-02, 1.040099313481574e-01, 2.871652458927466e-02, 7.713610127968165e-03, 5.946898685249019e-02, 5.190354369898164e-02, 5.341356990466498e-02, 5.341356990466500e-02, 6.108914848374422e-02, 3.444810128423031e-01, 2.674731735115247e-01, 5.126425464991987e-02, 4.172826210113684e-04, 1.859602717403131e-01, 9.187922044895759e-01, 3.739196244340812e+00, 2.718171626869243e+00, 1.968577736326076e-01, 2.152919450353201e+00, 2.152919450358847e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
