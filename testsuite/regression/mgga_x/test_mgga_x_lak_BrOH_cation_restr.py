
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_lak_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_lak", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.197324600479497e+01, -2.197336982011784e+01, -2.197391400670539e+01, -2.197207612506108e+01, -2.197303999603333e+01, -2.197303999603333e+01, -2.954617784295007e+00, -2.954801175478992e+00, -2.959712735834697e+00, -2.957989924972739e+00, -2.957866934942455e+00, -3.766325441907611e+00, -5.219257991835210e-01, -7.194181627069145e-01, -6.985863068552909e-01, -7.052126301253835e-01, -7.037928610490376e-01, -7.037928610490376e-01, -1.844445176302142e-01, -1.874540181996094e-01, -6.018821695324827e-01, -1.361348958562000e-01, -1.550772367092006e-01, -1.550772367092006e-01, -3.266592247464118e-03, -3.512129852630312e-03, -2.983887181280737e-02, -1.499012183463105e-03, -2.117620243607199e-03, -2.117620243607199e-03, -5.669020238097825e+00, -5.670113867230810e+00, -5.669075127221086e+00, -5.499728725335904e+00, -5.669572219287142e+00, -5.669572219287142e+00, -1.596114838580837e+00, -1.618875044343911e+00, -1.579701248996794e+00, -1.599117889710136e+00, -1.617111236148276e+00, -2.130338031096098e+00, -6.372884967680704e-01, -6.936736504122487e-01, -5.885323787457045e-01, -6.130235478210796e-01, -6.478475773748145e-01, -5.769065890206393e-01, -6.998399878994122e-02, -1.823822910907873e-01, -6.474242333168156e-02, -2.086482294333472e+00, -1.096591404057334e-01, -1.096591404057334e-01, -2.059398649348614e-03, -1.435447759038408e-03, -1.209202938721113e-03, -4.354219554230086e-02, -2.403587793890964e-03, -1.427901350333093e-03, -6.423222446647859e-01, -6.385457484247287e-01, -6.336930564504026e-01, -6.409770585942013e-01, -6.404297020403846e-01, -6.404297020403846e-01, -6.249027054025095e-01, -5.342430517438888e-01, -5.604301062571502e-01, -5.862388968357941e-01, -5.730819819816998e-01, -5.315130681599308e-01, -7.269126642318330e-01, -1.687042022843729e-01, -2.819955461859225e-01, -2.826137312704642e-01, -3.257144272957108e-01, -3.257144272957108e-01, -3.893236716147483e-01, -2.831373002631172e-02, -4.085366350696853e-02, -3.631370888566607e-01, -5.544577179047247e-02, -7.101296357482197e-02, -4.869645793063048e-03, -2.266195357098645e-04, -7.258370706423116e-04, -6.631515268556980e-02, -1.326719251304528e-03, -1.326719251304527e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_lak_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_lak", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.266002651732594e+01, -3.266005125348251e+01, -3.266021600802977e+01, -3.265984230066265e+01, -3.266003047335550e+01, -3.266003047335550e+01, -5.065746761643057e+00, -5.066373299807949e+00, -5.082861176227877e+00, -5.076685398088598e+00, -5.076821952381938e+00, -5.098795503714131e+00, -7.292839849140232e-01, -9.890381235156173e-01, -9.640993211945187e-01, -9.714860548915757e-01, -9.699264807185379e-01, -9.699264807185379e-01, -2.566757092797229e-01, -2.604451494302206e-01, -8.117326493821164e-01, -1.957602854451282e-01, -2.195952106222027e-01, -2.195952106222027e-01, -5.869483973173462e-03, -6.291273580637529e-03, -4.822607465663803e-02, -2.767773160140095e-03, -3.860974789746625e-03, -3.860974789746625e-03, -7.576277365996948e+00, -7.577514047055693e+00, -7.576337746783936e+00, -7.773915428302839e+00, -7.576902250297650e+00, -7.576902250297650e+00, -2.553294110498475e+00, -2.630014121158790e+00, -2.496717062263647e+00, -2.562643091629722e+00, -2.624847715546612e+00, -2.892415491012330e+00, -8.572560908549283e-01, -9.283802382667888e-01, -7.951596507190399e-01, -8.244866435287425e-01, -8.705331324817719e-01, -9.280496188146860e-01, -9.333547336048179e-02, -2.579365364484468e-01, -8.633944280938222e-02, -2.801972565976441e+00, -1.594152229955794e-01, -1.594152229955794e-01, -2.745864866327738e-03, -2.655716556763048e-03, -2.215014219449703e-03, -5.805894743587434e-02, -3.204783729735641e-03, -2.621315303145458e-03, -8.565838476558073e-01, -8.520523019392611e-01, -8.582223280878208e-01, -8.549377835979399e-01, -8.542795162107089e-01, -8.542795162107089e-01, -8.334043386779854e-01, -7.204363505380075e-01, -7.525981218579000e-01, -7.844589591325847e-01, -7.681824257339266e-01, -8.142563461354441e-01, -9.740429958090675e-01, -2.277566838966667e-01, -3.889823666527207e-01, -4.486571341976593e-01, -4.452763128301381e-01, -4.452763128301380e-01, -6.736592964466724e-01, -4.591411853851514e-02, -6.469525880437352e-02, -4.910884098231636e-01, -7.394046765850676e-02, -1.066992887523037e-01, -8.678725631731700e-03, -4.344799862646209e-04, -1.355285606888093e-03, -1.000204116561239e-01, -2.434487388184975e-03, -2.434487388184972e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_lak_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_lak", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.229850694456800e-08, -1.229821883367397e-08, -1.229695624195065e-08, -1.230123175312094e-08, -1.229898935700011e-08, -1.229898935700011e-08, -1.016884590546735e-05, -1.017689193771227e-05, -1.038776942579624e-05, -1.029893770166067e-05, -1.031275405346243e-05, 5.447449587047394e-07, 1.695659179573482e-03, 3.710316039510725e-04, 4.004380402346366e-04, 3.933505307006533e-04, 3.947836348932452e-04, 3.947836348932452e-04, 7.448910010528118e-02, 7.126610951358989e-02, 1.262954030748892e-03, 1.535805256867343e-01, 1.165887787109208e-01, 1.165887787109208e-01, 2.218584370970024e+02, 2.063518276679412e+02, 4.521844428582916e+00, 5.008873084383413e+02, 4.018677923649844e+02, 4.018677923649844e+02, 7.066992452890343e-08, 7.028048247877565e-08, 7.064795619522975e-08, -2.784947199486329e-06, 7.047483255343725e-08, 7.047483255343725e-08, -4.020494139369613e-05, -4.951576881398114e-05, -3.314927321975108e-05, -4.120702169809880e-05, -4.902804022077391e-05, 5.294200648344187e-06, 6.362297582362943e-04, 3.710036197859920e-04, 9.107347951896963e-04, 7.410792224733497e-04, 5.832857965339102e-04, -2.052574002276855e-02, 7.134043625690310e+00, 6.210789747275202e-02, 9.740481869135978e+00, 5.339551959937051e-06, 3.023841495550067e-01, 3.023841495550068e-01, 9.514040086149329e+06, 4.861692089258493e+02, 2.512872482857907e+03, 4.760943340542747e+01, 5.127276189394350e+06, 1.059791431663676e+03, 1.250072797099404e-04, 2.747853768093356e-04, -1.054687999371533e-02, 1.824653933643352e-04, 2.047213136567591e-04, 2.047213136567591e-04, 1.642620197296601e-04, 1.327376903172534e-03, 1.025350481092203e-03, 7.167447925970062e-04, 8.775470549687738e-04, -3.478531180450394e-02, 3.331322542783939e-04, 2.036852973515490e-01, 1.516487869273976e-02, -3.539544450648389e-02, 9.298076138368765e-03, 9.298076138368761e-03, -4.005303350701706e-02, 5.021570874370349e+00, 2.341279761604777e+00, 6.297997606395322e-03, 1.810770104753583e+01, 9.088276916618809e-01, 7.878639401516411e+01, 5.023494979098062e+03, 2.693723570944344e+03, 1.102628961948672e+00, 1.481406450313064e+03, 1.481406450313068e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_lak_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_lak", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.971460864882320e-03, 1.971428686334762e-03, 1.971294644197044e-03, 1.971771324870224e-03, 1.971520364531943e-03, 1.971520364531943e-03, 8.467462950096340e-03, 8.472517186114761e-03, 8.605244617520942e-03, 8.550917122003288e-03, 8.557637283939929e-03, 3.414531456627376e-13, 3.186169313155815e-03, 1.698240386684222e-12, 1.745078433440974e-12, 1.729963393825170e-12, 1.733093954998330e-12, 1.733093954998330e-12, 6.612958993124316e-12, 6.504087028055411e-12, 3.742067926404766e-04, 8.742444907616228e-12, 7.875118456758165e-12, 7.875118456758165e-12, 1.921098993905245e-12, 2.062986232923651e-12, 7.159806041989428e-12, 9.531571469212036e-13, 1.411708198501396e-12, 1.411708198501396e-12, 2.412862965135257e-13, 2.411577959721287e-13, 2.412792616593935e-13, 6.398052346424954e-03, 2.412218316532358e-13, 2.412218316532358e-13, 8.192494511399239e-03, 9.334639876747890e-03, 7.360110674805425e-03, 8.316559881757743e-03, 9.269640693463992e-03, 5.932227639647733e-13, 2.123367671729753e-12, 1.992804813689132e-12, 2.217054131735271e-12, 2.210227553864554e-12, 2.106212060040227e-12, 7.401168109746180e-02, 1.281556494258949e-05, 6.700032706671820e-12, 8.993819235077522e-06, 6.567695996782485e-13, 1.036586666551432e-11, 1.036586666551431e-11, 3.075873149022119e-13, 8.761844486787842e-13, 1.903772276105864e-12, 1.671724213465325e-06, 5.259154977669947e-12, 1.421016482130087e-12, 2.052579097804657e-12, 2.091817132194416e-12, 3.436615025183409e-02, 2.065988835719349e-12, 2.071644259557253e-12, 2.071644259557253e-12, 2.113331166250964e-12, 2.480332543878714e-12, 2.445434909916723e-12, 2.356391849655304e-12, 2.412917393516138e-12, 8.448177731555433e-02, 1.903680437855647e-12, 1.507163016775810e-03, 4.323760922288713e-12, 4.297894946195568e-02, 3.783477414399027e-12, 3.783477414399028e-12, 7.161154960564159e-02, 6.960603844300676e-12, 8.288021266034342e-12, 3.567995961703388e-12, 9.281855529415355e-06, 1.181273699714989e-11, 1.871264573344401e-12, 2.594360640921437e-13, 9.215321931245778e-13, 1.203257867703746e-11, 1.569685276684280e-12, 1.569685276684284e-12]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
