
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_lak_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_lak", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.320429834407017e+01, -2.320436658519725e+01, -2.320470983351369e+01, -2.320369513787654e+01, -2.320422112791513e+01, -2.320422112791513e+01, -3.320376143435102e+00, -3.320567168059040e+00, -3.325960409907042e+00, -3.327070504493460e+00, -3.325350583769986e+00, -3.325350583769986e+00, -5.311766700683247e-01, -5.305781967258326e-01, -5.175631583412340e-01, -5.285640612680684e-01, -5.251983407018188e-01, -5.251983407018188e-01, -1.796737207266651e-01, -1.814533118115425e-01, -5.919060216051585e-01, -9.854123795533853e-02, -1.242081002431791e-01, -1.242081002431790e-01, -3.252344034444069e-03, -3.498626575748019e-03, -2.757844861273945e-02, -1.528889838660004e-03, -2.136886818682484e-03, -2.136886818682484e-03, -5.668412665357355e+00, -5.669513889977646e+00, -5.668480275796387e+00, -5.669451802984007e+00, -5.668962151804589e+00, -5.668962151804589e+00, -2.082115091308117e+00, -2.105391816342372e+00, -2.075667663954849e+00, -2.096177753532744e+00, -2.098355161650518e+00, -2.098355161650518e+00, -6.174050337814796e-01, -6.745880030230568e-01, -5.388724013579553e-01, -5.589974222221873e-01, -6.303472893359501e-01, -6.303472893359501e-01, -6.733037121353617e-02, -1.698735190449403e-01, -6.266491587949193e-02, -1.928383851872355e+00, -8.181090902151618e-02, -8.181090902151621e-02, -1.096544671737159e-03, -1.504854075677908e-03, -1.235234180062048e-03, -4.403677221692170e-02, -1.485350988265044e-03, -1.485350988265044e-03, -6.409662701593157e-01, -6.372380899071438e-01, -6.385585546968315e-01, -6.396390820238225e-01, -6.390982948525628e-01, -6.390982948525628e-01, -6.220819318255224e-01, -5.326821473799255e-01, -5.583695294059330e-01, -5.837822293681865e-01, -5.706575503709739e-01, -5.706575503709739e-01, -6.977384253525358e-01, -2.284690579772720e-01, -2.715422372727777e-01, -3.477661222943013e-01, -3.112859989930634e-01, -3.112859989930634e-01, -4.777514743516801e-01, -2.627057769003509e-02, -3.615966977866454e-02, -3.436781490670161e-01, -5.401943333516289e-02, -5.401943333516291e-02, -5.045363381983019e-03, -2.779840949611646e-04, -7.339942165796831e-04, -5.150506516112227e-02, -1.364772153143941e-03, -1.364772153143940e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_lak_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_lak", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.048888712602625e+01, -3.048899121087840e+01, -3.048947846577718e+01, -3.048793098650588e+01, -3.048873833029231e+01, -3.048873833029231e+01, -4.949868897855249e+00, -4.949987963758671e+00, -4.952721997358900e+00, -4.947470675693767e+00, -4.949449372959908e+00, -4.949449372959908e+00, -7.427295103869320e-01, -7.406698058744516e-01, -7.082629993722109e-01, -7.370526348272773e-01, -7.281172450717402e-01, -7.281172450717402e-01, -1.548001713401389e-01, -1.558701057467842e-01, -7.517406385450848e-01, -1.274642505827898e-01, -7.466426413678698e-02, -7.466426413678673e-02, -5.800414511942071e-03, -6.214536922779464e-03, -3.896184385275356e-02, -2.809198175819057e-03, -3.873235725628961e-03, -3.873235725628961e-03, -7.475786428327768e+00, -7.477854170485973e+00, -7.475894502083043e+00, -7.477719303441848e+00, -7.476828121810073e+00, -7.476828121810073e+00, -2.549284481303711e+00, -2.600536420467547e+00, -2.539578336245698e+00, -2.587853407089207e+00, -2.583328283835246e+00, -2.583328283835246e+00, -8.281482280218448e-01, -9.367199122726901e-01, -7.705103422266451e-01, -8.589099223510892e-01, -8.463932044927084e-01, -8.463932044927084e-01, -7.765106002604821e-02, -2.714542161782293e-02, -7.179783081665018e-02, -2.927332280354960e+00, -4.446956487330860e-02, -4.446956487330812e-02, -2.030626201075717e-03, -2.762859663322772e-03, -2.247859451926286e-03, -5.187123153120674e-02, -2.703681796247834e-03, -2.703681796247834e-03, -8.552526195486392e-01, -8.472579274927617e-01, -8.500513407237832e-01, -8.523701669160931e-01, -8.512083450609501e-01, -8.512083450609501e-01, -8.339285511152643e-01, -6.853260614383401e-01, -7.274274881071993e-01, -7.705563162574870e-01, -7.484277235659218e-01, -7.484277235659218e-01, -9.923314087429222e-01, -1.998516898654601e-01, -2.687272894165822e-01, -4.471847886037370e-01, -3.554583005679476e-01, -3.554583005679476e-01, -6.039018738190366e-01, -3.773414425827144e-02, -4.700599499715560e-02, -4.536766328574691e-01, -6.007517748264983e-02, -6.007517748264984e-02, -8.820740622238293e-03, -5.268115742802619e-04, -1.367041256795039e-03, -4.835165364223031e-02, -2.486523709148249e-03, -2.486523709148246e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_lak_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_lak", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.034303936139190e-09, -4.034233648364644e-09, -4.033655517568181e-09, -4.034690440981526e-09, -4.034186170396114e-09, -4.034186170396114e-09, -2.020948147747818e-05, -2.020940338799118e-05, -2.020845353707558e-05, -2.022392950347589e-05, -2.022131550742358e-05, -2.022131550742358e-05, -4.912217516697329e-03, -4.879667521090924e-03, -4.019315786269980e-03, -5.288852298313521e-03, -4.873780709570030e-03, -4.873780709570030e-03, -2.057278779741004e+00, -2.136624139381576e+00, -1.053372393253742e-03, -7.820498589921612e-01, -4.345128015608484e+00, -4.345128015608489e+00, 2.161629641732932e+02, 2.018563951753609e+02, 1.286732632006282e+00, 5.630396844131973e+02, 4.251573226756343e+02, 4.251573226756348e+02, -1.015152241921484e-06, -1.014251676660096e-06, -1.014930185988051e-06, -1.014143450774208e-06, -1.014788325197671e-06, -1.014788325197671e-06, -1.034054477276282e-04, -8.996290887559798e-05, -9.726922935196574e-05, -8.496720894018575e-05, -9.848468168775402e-05, -9.848468168775402e-05, -1.833258838574494e-02, -1.186957171487979e-02, -3.432098537189069e-02, -2.611919681112853e-02, -1.596437997889255e-02, -1.596437997889255e-02, -6.675389761491367e-01, -2.918595887594988e+00, -6.913437217945640e-01, -1.962373152169179e-04, -5.910330635129459e+00, -5.910330635129502e+00, 1.037922286800037e+03, 6.416859410507187e+02, 2.857953320460928e+03, -1.161152632831028e+00, 1.342141835603152e+03, 1.342141835603150e+03, -7.198748607584268e-03, -7.269645685521902e-03, -7.239634063675291e-03, -7.220404670541007e-03, -7.230083350941841e-03, -7.230083350941841e-03, -9.235992274578572e-03, -1.498166391877815e-02, -1.349428886361000e-02, -1.166118050322362e-02, -1.284291671569561e-02, -1.284291671569561e-02, -1.153126283142300e-02, -7.045682982932672e-01, -4.540068166768580e-01, -1.957474553340935e-01, -2.852811088568153e-01, -2.852811088568153e-01, -4.792710639586796e-02, 1.577700454737414e+00, -3.535134943076371e-01, -2.167993150189322e-01, -1.629557092544310e+00, -1.629557092544311e+00, 9.890202319608797e+01, 1.536037132928461e+04, 2.873965198916644e+03, -4.663816498106487e+00, 1.755440457909496e+03, 1.755440457909500e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_lak_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_lak", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_lak_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_lak", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [6.703232914001031e-04, 6.703170299769335e-04, 6.702498673514210e-04, 6.703412822004518e-04, 6.702990157501482e-04, 6.702990157501482e-04, 1.342358488393112e-02, 1.342414995282292e-02, 1.343947038466556e-02, 1.343799715778605e-02, 1.343705603450061e-02, 1.343705603450061e-02, 1.643678962475481e-02, 1.625161698434586e-02, 1.314910284320485e-02, 1.944322615080043e-02, 1.727524690277371e-02, 1.727524690277371e-02, 1.761208841834084e-01, 1.908367439628755e-01, 7.817092888828927e-04, 3.342882640874497e-02, 2.297118337210627e-01, 2.297118337210629e-01, 8.859474759390306e-07, 2.202742788291265e-07, 2.606817934600726e-05, 4.759931450233621e-12, 1.858758714181246e-10, 1.858758714181151e-10, 2.432478196451766e-03, 2.430927469149684e-03, 2.431996674784324e-03, 2.430646561876692e-03, 2.431903260104147e-03, 2.431903260104147e-03, 1.282554184259726e-02, 1.147890157123704e-02, 1.194500721032572e-02, 1.071228978826115e-02, 1.246666932189600e-02, 1.246666932189600e-02, 6.047110023827470e-02, 5.106267213520800e-02, 8.759226529188285e-02, 8.171135248318165e-02, 5.568512968599266e-02, 5.568512968599266e-02, 4.199755724179517e-03, 2.473639510930876e-01, 2.275234810527489e-03, 2.368180154143712e-02, 1.166379969884939e-01, 1.166379969884947e-01, 1.476034875740079e-14, 3.976743122513470e-13, 2.192550961604176e-11, 2.845080573924383e-04, 2.898123353128657e-12, 2.898123353128690e-12, 2.369445733022089e-02, 2.406340435244095e-02, 2.392727603669759e-02, 2.382071000684909e-02, 2.387519919713546e-02, 2.387519919713545e-02, 2.792887682531234e-02, 3.073740727209866e-02, 3.142278119243467e-02, 3.075694076291247e-02, 3.177286761331033e-02, 3.177286761331032e-02, 5.759470085338341e-02, 1.226763636659205e-01, 1.358095619886234e-01, 1.296180507474634e-01, 1.280497370779892e-01, 1.280497370779891e-01, 7.217170193825947e-02, 1.648804946019887e-04, 7.606328275893029e-05, 1.294250515692164e-01, 4.861819283719894e-03, 4.861819283719905e-03, 1.176788956724831e-10, 5.914028197280695e-18, 3.738350107707283e-12, 1.856342396252378e-02, 7.422043422445600e-12, 7.422043422445537e-12]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
