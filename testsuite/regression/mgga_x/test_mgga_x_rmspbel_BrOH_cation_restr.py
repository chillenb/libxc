
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_rmspbel_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmspbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.215066488060606e+01, -2.215071245902855e+01, -2.215097179971904e+01, -2.215026327933664e+01, -2.215062772353695e+01, -2.215062772353695e+01, -3.377283941916837e+00, -3.377286647991195e+00, -3.377571373733303e+00, -3.379012925849605e+00, -3.377977261058032e+00, -3.377977261058032e+00, -6.498649520052739e-01, -6.495643470634993e-01, -6.449058245790987e-01, -6.537588618389134e-01, -6.508409406759372e-01, -6.508409406759372e-01, -2.040546038370243e-01, -2.048353785144275e-01, -7.254836027388896e-01, -1.666882663535861e-01, -1.793665718425177e-01, -1.793665718425177e-01, -1.008264077591624e-02, -1.061079183198283e-02, -5.699090123984499e-02, -5.827373652361633e-03, -7.320560883498236e-03, -7.320560883498236e-03, -5.367413200118109e+00, -5.367681210167851e+00, -5.367432875865988e+00, -5.367669355912525e+00, -5.367544985066348e+00, -5.367544985066348e+00, -2.109471800533191e+00, -2.127610786385601e+00, -2.109564397893414e+00, -2.125276741914871e+00, -2.119706654525530e+00, -2.119706654525530e+00, -5.961402490227911e-01, -6.352955434021926e-01, -5.325084196115735e-01, -5.370250019146051e-01, -6.063027602571196e-01, -6.063027602571196e-01, -1.311789728274449e-01, -2.144413325674421e-01, -1.231514857790319e-01, -1.830955040515643e+00, -1.442016924390141e-01, -1.442016924390141e-01, -4.496700455055056e-03, -5.696700626236010e-03, -4.355242427226987e-03, -8.801594931559541e-02, -5.246744405804901e-03, -5.246744405804901e-03, -5.987321800832853e-01, -5.981367124015226e-01, -5.983491228676713e-01, -5.985179341380756e-01, -5.984329143464638e-01, -5.984329143464638e-01, -5.809914899836537e-01, -5.241142278389528e-01, -5.398316939657254e-01, -5.556471973528465e-01, -5.473534369338379e-01, -5.473534369338379e-01, -6.578651708814520e-01, -2.614684067862601e-01, -2.958855887330692e-01, -3.536606386677795e-01, -3.242740886238804e-01, -3.242740886238804e-01, -4.738934263170813e-01, -5.473841778115265e-02, -7.309251079629495e-02, -3.395347125566113e-01, -1.063894626372583e-01, -1.063894626372583e-01, -1.421747992031508e-02, -1.523225608674575e-03, -3.196942067359117e-03, -1.013776579837906e-01, -4.854975332680716e-03, -4.854975332680713e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_rmspbel_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmspbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.807918107021139e+01, -2.807928698062831e+01, -2.807981508925167e+01, -2.807824247703879e+01, -2.807905829230094e+01, -2.807905829230094e+01, -4.206875547355802e+00, -4.207112712948767e+00, -4.213674105538172e+00, -4.213101928494567e+00, -4.212006547443271e+00, -4.212006547443271e+00, -7.968566715949618e-01, -7.949235733027259e-01, -7.489122835111575e-01, -7.627741827780461e-01, -7.602599237812210e-01, -7.602599237812210e-01, -1.572159000643447e-01, -1.573312278808866e-01, -8.570259691548119e-01, -1.471242025837845e-01, -1.610569870296085e-01, -1.610569870296085e-01, -1.341418559057949e-02, -1.411262884366614e-02, -7.189430975131415e-02, -7.764443688261718e-03, -9.748707152662959e-03, -9.748707152662959e-03, -6.915830672133672e+00, -6.917991867621632e+00, -6.915967895301354e+00, -6.917873917193512e+00, -6.916906966965581e+00, -6.916906966965581e+00, -2.247627122401793e+00, -2.302945029468718e+00, -2.241662974679430e+00, -2.296223320081072e+00, -2.281983281249091e+00, -2.281983281249091e+00, -7.494555153526162e-01, -8.668756822314337e-01, -6.781295688848629e-01, -7.411552935867746e-01, -7.680080849728320e-01, -7.680080849728320e-01, -1.329078294798300e-01, -1.518092005638338e-01, -1.277724002015117e-01, -2.587904724604425e+00, -1.286064218033892e-01, -1.286064218033892e-01, -5.992759027146890e-03, -7.590140209592617e-03, -5.800874618487811e-03, -1.012307668623364e-01, -6.988365606697778e-03, -6.988365606697779e-03, -7.942265500939278e-01, -7.849581108880586e-01, -7.881952273855312e-01, -7.908875529994988e-01, -7.895384470504810e-01, -7.895384470504810e-01, -7.751975047659926e-01, -6.243385161416013e-01, -6.651910630732868e-01, -7.083511975599441e-01, -6.858245783475008e-01, -6.858245783475008e-01, -9.126698561311817e-01, -2.055763862365614e-01, -2.486457968491009e-01, -4.039577766286154e-01, -3.169621604142574e-01, -3.169621604142574e-01, -5.383085911150309e-01, -6.951453036948152e-02, -8.919574713675250e-02, -4.075351436663503e-01, -1.116251285444781e-01, -1.116251285444781e-01, -1.888291508000736e-02, -2.030736245444339e-03, -4.261102163859916e-03, -1.078396452264503e-01, -6.466805912797268e-03, -6.466805912797266e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rmspbel_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmspbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.361369792699445e-09, -4.361278963161377e-09, -4.360329225715851e-09, -4.361658520645850e-09, -4.361040122455791e-09, -4.361040122455791e-09, -8.328040140388992e-06, -8.335180263707745e-06, -8.537056218246082e-06, -8.562690183647778e-06, -8.516599002703641e-06, -8.516599002703641e-06, -6.373065721247800e-03, -6.380002859461925e-03, -6.525178772091334e-03, -6.585508326762079e-03, -6.576006527434423e-03, -6.576006527434423e-03, -1.622248224960701e+00, -1.670924274741264e+00, -2.710445712920537e-03, -1.288294680145208e+00, -1.101568536089642e+00, -1.101568536089641e+00, -4.348184630143955e+00, -4.574643006311414e+00, -2.457113732147358e+00, -3.936237531072006e+00, -4.998960702030957e+00, -4.998960702027429e+00, -9.862785828044338e-07, -9.857263518066050e-07, -9.858437314102666e-07, -9.853746333416998e-07, -9.862087541073987e-07, -9.862087541073987e-07, -1.252340494378913e-04, -1.101491003068093e-04, -1.178061150230687e-04, -1.031447627609520e-04, -1.201867226212847e-04, -1.201867226212847e-04, -2.234110064425801e-02, -1.671965996346733e-02, -2.458562326799761e-02, -2.077945732447616e-02, -2.032576078818255e-02, -2.032576078818255e-02, -1.493979146041553e+00, -1.114983892269424e+00, -1.642360175815548e+00, -1.833446797999670e-04, -2.258082554223830e+00, -2.258082554223833e+00, -5.187322991007328e+00, -4.632554524622440e+00, -2.908598573635689e+01, -2.578958599854631e+00, -1.353548213823913e+01, -1.353548213824566e+01, -8.506452232042921e-03, -8.529675325178921e-03, -8.521963106205583e-03, -8.515905357285613e-03, -8.520238797896517e-03, -8.520238797896517e-03, -1.220522294376845e-02, -1.667727104300337e-02, -1.564841554040293e-02, -1.441092397170535e-02, -1.542960735492428e-02, -1.542960735492429e-02, -1.490114769304838e-02, -5.507668952826966e-01, -3.924375840711835e-01, -1.426964391612509e-01, -2.664264064191014e-01, -2.664264064191014e-01, -5.615371222563135e-02, -2.270513365751586e+00, -2.177596590074571e+00, -2.074094339300493e-01, -2.788717127264153e+00, -2.788717127264158e+00, -3.482791391114751e+00, -2.274386801984286e+01, -1.100548330230695e+01, -3.239166608445076e+00, -1.709702068516482e+01, -1.709702068516641e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rmspbel_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmspbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rmspbel_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmspbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.568842173895685e-04, 1.568761792891281e-04, 1.567604043341603e-04, 1.568765227255278e-04, 1.568271409427830e-04, 1.568271409427830e-04, 1.685584567053255e-03, 1.690372848813343e-03, 1.826573767092518e-03, 1.848841511059454e-03, 1.813711459501881e-03, 1.813711459501881e-03, 1.040796052359002e-02, 1.035420085761527e-02, 9.209175061633266e-03, 1.063290710077843e-02, 1.025808385305819e-02, 1.025808385305819e-02, 9.498266590033391e-02, 1.038623990421403e-01, 1.448368941914167e-03, 1.234137327497421e-02, 1.733908259869828e-02, 1.733908259869823e-02, 7.390628657363024e-08, 1.754286158985599e-08, 2.482045636475762e-06, 1.014378056581459e-12, 2.462053662662437e-11, 2.462053662585636e-11, 4.464803908494024e-05, 4.409762238116596e-05, 4.371629771788473e-05, 4.327104550487905e-05, 4.483392123143370e-05, 4.483392123143370e-05, 9.940004206244669e-03, 8.494599537906279e-03, 8.906580682262404e-03, 7.476226072141366e-03, 9.625698902949273e-03, 9.625698902949273e-03, 5.143315855093669e-02, 4.902828091020745e-02, 3.826023245777603e-02, 3.402152337236921e-02, 4.855770223520016e-02, 4.855770223520016e-02, 1.283386080080469e-03, 6.218095477468573e-02, 6.875975811264473e-04, 1.319803177015992e-02, 1.669048131860989e-02, 1.669048131860994e-02, 4.402870457350977e-15, 8.202537044386720e-14, 3.289249417834052e-12, 5.818562955909739e-05, 4.380253844025332e-13, 4.380253841417796e-13, 7.625612640430384e-03, 7.406277098935301e-03, 7.484531921673330e-03, 7.549889694719699e-03, 7.521247862263178e-03, 7.521247862263178e-03, 1.578553888970314e-02, 1.102969486677296e-02, 1.326006144871873e-02, 1.485755095236131e-02, 1.494673525370301e-02, 1.494673525370304e-02, 5.108901363765847e-02, 6.319140336212251e-02, 8.215045079806385e-02, 6.124999426727214e-02, 8.411597148355675e-02, 8.411597148355668e-02, 5.918479419103499e-02, 1.271216330136119e-05, 1.018549271627201e-05, 8.824122533443808e-02, 1.215760783876123e-03, 1.215760783876151e-03, 7.605104907001628e-12, 6.832575939572199e-18, 1.485470790069935e-12, 2.898234545980938e-03, 1.157681739151739e-12, 1.157681737932205e-12]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
