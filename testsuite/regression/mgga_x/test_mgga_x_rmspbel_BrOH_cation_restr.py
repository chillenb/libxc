
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_rmspbel_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmspbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.051224228416725e+01, -2.051234958764791e+01, -2.051282413338091e+01, -2.051123108744152e+01, -2.051206609843305e+01, -2.051206609843305e+01, -3.196708259110136e+00, -3.196766971022784e+00, -3.198357859017458e+00, -3.198007658673524e+00, -3.197713122957918e+00, -3.766618058184592e+00, -5.829401016813754e-01, -7.683152493586330e-01, -7.587398972383782e-01, -7.598836491392779e-01, -7.597132858990887e-01, -7.597132858990887e-01, -2.078312608452765e-01, -2.097260712735240e-01, -6.663869091153976e-01, -1.767632044197750e-01, -1.886406649236770e-01, -1.886406649236770e-01, -1.008273885827915e-02, -1.061100122477448e-02, -5.717583230827449e-02, -5.827593310171406e-03, -7.320864890216802e-03, -7.320864890216802e-03, -5.367999945722928e+00, -5.368260851292423e+00, -5.368007279190940e+00, -5.130343450422628e+00, -5.368134294337665e+00, -5.368134294337665e+00, -1.770884941475824e+00, -1.789896056012650e+00, -1.756646990940774e+00, -1.773569652169116e+00, -1.788334235553913e+00, -2.156577681281816e+00, -6.206861329374941e-01, -6.612142978945822e-01, -5.837225540298934e-01, -5.966657869345328e-01, -6.281890105809091e-01, -5.546299794079491e-01, -7.696971845118424e-02, -2.206496718373775e-01, -7.120037137950759e-02, -2.018060148288296e+00, -1.487820584595395e-01, -1.487820584595395e-01, -2.264366244717326e-03, -5.697166697890648e-03, -4.355526127072291e-03, -4.787834104391793e-02, -2.642811811242635e-03, -5.247303076280060e-03, -6.002132511836534e-01, -5.995562238539318e-01, -5.917551302219238e-01, -5.999774364484369e-01, -5.998841753391856e-01, -5.998841753391856e-01, -5.843192077131526e-01, -5.257157492405635e-01, -5.420127478423677e-01, -5.583744707047640e-01, -5.499874899614597e-01, -4.985463395652267e-01, -6.965740467139013e-01, -1.868642764422528e-01, -3.056150548481598e-01, -3.140217942211288e-01, -3.394903888412514e-01, -3.394903888412514e-01, -4.178159958083810e-01, -5.482511282928958e-02, -7.356207206700745e-02, -3.615662237285122e-01, -6.097545945564913e-02, -1.086417028625437e-01, -1.422405684606509e-02, -1.523278855915752e-03, -3.196975909037539e-03, -1.027472428610736e-01, -4.855352070761779e-03, -4.855352070761774e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_rmspbel_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmspbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.004325085028851e+01, -3.004336823782530e+01, -3.004390232564641e+01, -3.004215729411111e+01, -3.004307020519256e+01, -3.004307020519256e+01, -4.592111399228981e+00, -4.591946501079700e+00, -4.587573755065976e+00, -4.589781357562063e+00, -4.589069340127195e+00, -4.442533134653426e+00, -8.307228257453180e-01, -8.340570483082669e-01, -8.098582042259177e-01, -8.173720888334145e-01, -8.157345692658196e-01, -8.157345692658196e-01, -2.152217256006561e-01, -2.182995012671486e-01, -9.121543902139979e-01, -1.777475297000522e-01, -1.890608444677839e-01, -1.890608444677842e-01, -1.341464852137193e-02, -1.411350044283973e-02, -7.263863112188688e-02, -7.765322428236076e-03, -9.749925047577988e-03, -9.749925047577988e-03, -6.916976048607480e+00, -6.919108424242212e+00, -6.917088968757370e+00, -7.278834311742497e+00, -6.918049389407151e+00, -6.918049389407151e+00, -2.609659297048473e+00, -2.631657016368907e+00, -2.591122881692186e+00, -2.613095880647198e+00, -2.629793262236851e+00, -2.499911742244268e+00, -7.624157802229522e-01, -8.420484104507653e-01, -6.969761313282378e-01, -7.336782886496293e-01, -7.771861375048564e-01, -7.673627059637897e-01, -1.027195275801512e-01, -2.213578297113132e-01, -9.499896988572222e-02, -2.507116332060227e+00, -1.520506575918257e-01, -1.520506575918258e-01, -3.019154995252388e-03, -7.592003625912474e-03, -5.802009389050061e-03, -6.384899965376362e-02, -3.523749101370115e-03, -6.990598955766783e-03, -7.927424763127425e-01, -7.846425725505214e-01, -8.002822416211671e-01, -7.898286633231404e-01, -7.886498563344965e-01, -7.886498563344965e-01, -7.707686504509618e-01, -6.353245447958206e-01, -6.734443183894661e-01, -7.120469333451637e-01, -6.922521432996191e-01, -7.289794095881148e-01, -8.790008480626788e-01, -2.562259861793931e-01, -3.268803361589736e-01, -4.630712750420211e-01, -3.788727694451313e-01, -3.788727694451313e-01, -5.940521276196805e-01, -6.989460977691965e-02, -9.104448864780128e-02, -4.292262930140320e-01, -8.135208833660665e-02, -1.203087432198341e-01, -1.890915349714603e-02, -2.030949213644155e-03, -4.261237604007899e-03, -1.149078747084125e-01, -6.468312395049116e-03, -6.468312395049111e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rmspbel_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmspbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.443168646760409e-08, -1.443168888969826e-08, -1.443158376822430e-08, -1.443155920464610e-08, -1.443158949412885e-08, -1.443158949412885e-08, -1.039854925195560e-05, -1.039643474371279e-05, -1.033862906430061e-05, -1.035854562053280e-05, -1.036073622956546e-05, -4.099111838650850e-06, -6.492064866693294e-03, -2.369055344296726e-03, -2.474858621972610e-03, -2.468402170065899e-03, -2.468855910998431e-03, -2.468855910998431e-03, -4.288384699108729e-01, -4.160417509744836e-01, -3.170669284980789e-03, -6.245454214022353e-01, -5.677833233330197e-01, -5.677833233330123e-01, -4.250004651499710e+00, -4.426283360386139e+00, -1.926296805461408e+00, -3.127400864653842e+00, -4.349214124579585e+00, -4.349214124579585e+00, -9.660089395404698e-07, -9.657175923921144e-07, -9.659976955271547e-07, -3.950462590854343e-06, -9.658603365302058e-07, -9.658603365302058e-07, -1.092616945687321e-04, -1.064619049094964e-04, -1.109910482248830e-04, -1.088396831338188e-04, -1.067482839664409e-04, -3.825871039586237e-05, -5.500113224429764e-03, -4.216167904129881e-03, -7.087352765342058e-03, -6.438591283149973e-03, -5.229825521382825e-03, -1.138134709560676e-02, -1.671273436580373e+01, -3.065041605271038e-01, -2.281778175653093e+01, -4.903461994302628e-05, -1.060973633410282e+00, -1.060973633410272e+00, -2.228818280376178e+07, -2.764909677615890e+00, -2.234106012906209e+01, -1.115278495649647e+02, -1.201147648219160e+07, -8.575191398535218e+00, -6.114526435532937e-03, -6.166544389326000e-03, -1.547554232406518e-02, -6.133224944220530e-03, -6.140710326564204e-03, -6.140710326564204e-03, -6.811366809707765e-03, -1.073871310786708e-02, -9.422876684380932e-03, -8.286163012213603e-03, -8.847289413157960e-03, -3.398924387999160e-02, -3.435101013147479e-03, -5.158515840816996e-01, -9.411438421422078e-02, -1.093909046317731e-01, -6.242006767748873e-02, -6.242006767748885e-02, -3.458746208266429e-02, -1.972054155139380e+00, -1.611799712767437e+00, -4.821066860258962e-02, -4.241829407080311e+01, -1.856699158028261e+00, -2.027654578275063e+00, -3.388752146745126e+00, -9.710829110509046e+00, -2.099562661666823e+00, -1.222106184653440e+01, -1.222106184653521e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rmspbel_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmspbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.579339484481628e-03, 1.579364572660972e-03, 1.579462813092411e-03, 1.579091516458746e-03, 1.579288097092634e-03, 1.579288097092634e-03, 2.479768239719132e-03, 2.478578321299472e-03, 2.446225877293767e-03, 2.459296322021589e-03, 2.458164489937948e-03, -1.065688062465029e-17, 5.103281179005562e-03, -5.047587736030039e-17, -2.251980387537133e-17, 1.175298312858439e-18, -2.778092060099316e-17, -2.778092060099316e-17, 1.120918781177856e-16, -1.033157253307074e-16, 9.590811242323563e-04, 5.751037367341295e-16, 4.052092190719285e-16, 2.349354946270032e-17, 1.699738786640755e-18, -3.524338912846966e-19, 1.310080273848283e-16, 1.025350872689123e-19, -1.959106260575821e-19, -1.959106260575821e-19, -1.236872172843572e-18, 1.417149222402472e-19, -7.098742770217940e-20, 6.360799375656230e-03, -1.131163833893149e-18, -1.131163833893149e-18, 4.788213682001037e-03, 4.852857164286144e-03, 4.692368923402678e-03, 4.797611381778022e-03, 4.852330152710185e-03, 5.586289272597941e-19, 1.717932133570144e-17, 1.432593734699535e-17, -3.500402037774124e-17, 2.763655512771220e-17, 1.972033760157556e-17, 1.297949830870145e-02, 5.089999314390886e-05, 2.192219490987700e-16, 3.613870086074121e-05, -1.744824328939144e-18, 3.668691090215728e-16, 1.566577495284797e-16, 1.333506784150513e-12, -3.542869463348905e-20, 2.253462103383293e-19, 6.976069467723697e-06, 2.279732883728606e-11, 5.964005973765300e-19, -1.206619634962073e-18, 5.498192831355868e-18, 2.913857491813914e-02, -1.136255468348818e-20, 1.261028171582443e-18, 1.261028171582443e-18, -2.773676557133637e-18, -3.859479672458498e-18, 7.254520286881983e-18, -1.010460837519932e-17, 9.451091509987798e-18, 5.141535543086840e-02, 9.919927612573159e-20, 3.783552202538345e-03, 1.239091614521806e-16, 2.654851987601637e-02, -1.551600805685786e-17, 2.826004708004472e-17, 1.712629771216657e-02, 2.867669474708626e-16, -4.497258774631944e-16, 2.553540517409115e-17, 3.740938024829136e-05, 5.071346133042441e-16, -6.014523876679588e-18, 1.635008181698750e-23, -1.209554202606965e-21, 2.683558622153819e-16, -1.286573564293835e-19, 3.808590375582672e-19]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
