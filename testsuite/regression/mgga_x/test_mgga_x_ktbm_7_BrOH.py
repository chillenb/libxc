
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_7_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_7", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.117180834890937e+01, -2.117190414029578e+01, -2.117236522719744e+01, -2.117080051076492e+01, -2.117185852529255e+01, -2.117185852529255e+01, -3.110472379703989e+00, -3.110542639957910e+00, -3.112775044560480e+00, -3.112157446114692e+00, -3.110506677469796e+00, -3.837240165543112e+00, -5.755667179327303e-01, -7.179415533577527e-01, -6.948452972227375e-01, -7.020874334092441e-01, -7.185135131564334e-01, -7.185135131564334e-01, -1.953764829419878e-01, -1.983463458911378e-01, -6.959718239352136e-01, -1.366751337934249e-01, -1.962609923539565e-01, -1.962609923539565e-01, -1.033426145414718e-02, -1.082488393216027e-02, -4.409653549770420e-02, -4.956726028272974e-03, -1.071208167919456e-02, -1.071208167919456e-02, -5.707322406282434e+00, -5.707861603566728e+00, -5.707376928019015e+00, -5.295172192527435e+00, -5.707599807054413e+00, -5.707599807054413e+00, -1.719040053632150e+00, -1.736058686927103e+00, -1.712097648813922e+00, -1.725293290390428e+00, -1.739808490834432e+00, -2.168747219877324e+00, -6.421486783904098e-01, -6.942777666226030e-01, -6.089475588040423e-01, -6.351931473909259e-01, -6.662949491682226e-01, -5.745166114592416e-01, -8.986602443642347e-02, -1.930580411068982e-01, -8.859632394978857e-02, -2.119708252594037e+00, -1.158861673271025e-01, -1.158861673271025e-01, -4.474924303035476e-03, -5.464750504616381e-03, -4.095877729566957e-03, -5.677814951660267e-02, -4.659703090922124e-03, -4.979218724550420e-03, -6.500117698284129e-01, -6.489246703656624e-01, -6.294063731411228e-01, -6.496425617454654e-01, -6.494955781580192e-01, -6.494955781580192e-01, -6.300089770935814e-01, -5.563899555646196e-01, -5.802302433229265e-01, -6.004020722481301e-01, -5.903586795116551e-01, -5.253568414411297e-01, -7.294600056050768e-01, -2.004490228104409e-01, -2.965404409023632e-01, -3.089695984277960e-01, -3.390303033642809e-01, -3.390303033642807e-01, -4.079620649566507e-01, -4.082364933114858e-02, -5.534952844667319e-02, -3.658601044344618e-01, -7.318555846355417e-02, -8.069700744752169e-02, -1.211128847675776e-02, -1.496096814119478e-03, -2.842076856977038e-03, -7.698456859498011e-02, -4.231653627636963e-03, -4.231653627636956e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_7_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_7", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.097241485986400e+01, -3.097250359812807e+01, -3.097295357821057e+01, -3.097150070894428e+01, -3.097246118730547e+01, -3.097246118730547e+01, -4.607897767046945e+00, -4.608093157619109e+00, -4.614124439801947e+00, -4.612159909246367e+00, -4.607973926979308e+00, -4.435332181336208e+00, -7.639055430164980e-01, -8.487895338339081e-01, -8.258804459721772e-01, -8.325567673788674e-01, -8.493473273384273e-01, -8.493473273384273e-01, -2.323415114341447e-01, -2.354758182045245e-01, -8.859774293248843e-01, -1.672901864701163e-01, -2.332818835913852e-01, -2.332818835913852e-01, -1.288357022192075e-02, -1.349488787605079e-02, -5.483193756867387e-02, -6.180895249691033e-03, -1.335425663974790e-02, -1.335425663974790e-02, -7.080980342039481e+00, -7.084898717753687e+00, -7.081407168702683e+00, -7.568586800585800e+00, -7.082953672093695e+00, -7.082953672093695e+00, -2.487100645736240e+00, -2.524666925903001e+00, -2.471198337648720e+00, -2.500790302969186e+00, -2.533344932373341e+00, -2.511455293804290e+00, -7.490433304617419e-01, -8.402841652143145e-01, -7.048194252964060e-01, -7.465954381239299e-01, -7.848068877870854e-01, -8.603333465083091e-01, -1.162387996531263e-01, -2.332076064526025e-01, -1.144363390017253e-01, -2.499627493836310e+00, -1.420832175981355e-01, -1.420832175981355e-01, -5.965863535424087e-03, -6.814296571087160e-03, -5.107345308950031e-03, -7.471347501595929e-02, -6.212136759517544e-03, -6.208884625058133e-03, -8.499284285508608e-01, -8.332718978211324e-01, -8.648265788646049e-01, -8.437566180343190e-01, -8.414365751687737e-01, -8.414365751687737e-01, -8.183298992752862e-01, -6.471649345090074e-01, -6.879229486337792e-01, -7.332944419137833e-01, -7.092134978202389e-01, -7.743662830880967e-01, -8.711852409441747e-01, -2.575030337517928e-01, -3.497166825780092e-01, -4.484901462168013e-01, -3.952113898522622e-01, -3.952113898522620e-01, -6.073339290951570e-01, -5.078691548389538e-02, -6.874146574261805e-02, -4.228633345921602e-01, -9.500586683171733e-02, -9.966511983537119e-02, -1.509953233716149e-02, -1.865650406053349e-03, -3.544047088256698e-03, -9.508260024983399e-02, -5.276735855160268e-03, -5.276735855160253e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_7_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_7", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.427689126952757e-08, -1.427683692568677e-08, -1.427648459233806e-08, -1.427738530352409e-08, -1.427686341765674e-08, -1.427686341765674e-08, -1.275554744096854e-05, -1.275755468084863e-05, -1.281608043078943e-05, -1.278933571289914e-05, -1.275586193271270e-05, -1.461584043062696e-05, -4.379504129719131e-03, -5.116272736800314e-03, -4.754191417747150e-03, -4.997919094636556e-03, -5.125795206265595e-03, -5.125795206265595e-03, -7.446499199809187e-01, -7.502352821841320e-01, -1.244589312411763e-03, -5.174863781597012e-01, -7.457019295007628e-01, -7.457019295007628e-01, -1.049276615235957e+02, -9.537936129561730e+01, -3.820208250994945e+00, -2.684944555557461e+02, -9.961197634631120e+01, -9.961197634631117e+01, -4.584410031572814e-06, -4.584380140313257e-06, -4.584424475195771e-06, -4.329453974146964e-06, -4.584375975097292e-06, -4.584375975097292e-06, -1.077052071209661e-04, -1.083644696418260e-04, -1.072672372646496e-04, -1.078851398866645e-04, -1.086922641505230e-04, -1.252345129896760e-04, -2.392075186859792e-02, -2.028981803038511e-02, -2.617196167804821e-02, -2.637437650124386e-02, -2.202784678296279e-02, -1.986061215605269e-02, -5.246807532485558e-01, -3.536637857503523e-01, -5.978250695284572e-01, -2.162601467721182e-04, -8.526845745129938e-01, -8.526845745129938e-01, -1.662042876266653e+02, -2.483180200745779e+02, -8.765825363217258e+02, -9.960346046223160e-01, -1.548550790430487e+02, -3.319491668253285e+02, -2.759324982715763e-02, -2.781697108715096e-02, -2.706225659338012e-02, -2.768624367706860e-02, -2.771793062779915e-02, -2.771793062779915e-02, -3.130188713595870e-02, -4.118594847850519e-02, -3.940034043652774e-02, -3.680451064218346e-02, -3.822007602920644e-02, -3.511625229195393e-02, -1.615120195042755e-02, -2.102100345254382e-01, -1.919605062928828e-01, -1.062336163797345e-01, -1.644845791108035e-01, -1.644845791108035e-01, -4.606278756236957e-02, -4.227707440541867e+00, -2.305888809641909e+00, -1.813206510508143e-01, -9.762750117102067e-01, -1.531581772076496e+00, -4.766046633306584e+01, -3.476460796106350e+03, -1.351669454568098e+03, -1.841895944327568e+00, -5.447388262438828e+02, -5.447388262438842e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_7_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_7", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.608447087086596e-03, 1.608459809737546e-03, 1.608512150068173e-03, 1.608305593800293e-03, 1.608453811536714e-03, 1.608453811536714e-03, 3.467580537777018e-03, 3.469131537466783e-03, 3.515759716760720e-03, 3.497401835734394e-03, 3.467994565020234e-03, 1.047989758259247e-02, -3.287366160330349e-04, 2.825848219682338e-02, 2.434259397969564e-02, 2.615134830852351e-02, 2.836141947078592e-02, 2.836141947078592e-02, 8.493514943131528e-02, 8.893151552609531e-02, -1.826366802796227e-03, 2.145808915889490e-02, 8.605270167266264e-02, 8.605270167266264e-02, 1.763734992745932e-03, 1.842913451136016e-03, 5.072643615063493e-03, 4.971824326330871e-04, 1.865156602609778e-03, 1.865156602609777e-03, 8.792757659601632e-03, 8.790809612836806e-03, 8.792551594118748e-03, 7.371776964358159e-03, 8.791773743429536e-03, 8.791773743429536e-03, 3.745492398181258e-03, 4.138140022727430e-03, 3.574333579052433e-03, 3.883005077637708e-03, 4.242590936337048e-03, 1.681419549695171e-02, 7.347586346057829e-02, 7.230684818850738e-02, 7.197676681039369e-02, 7.638711166938304e-02, 7.320332332756913e-02, 4.480627155138572e-02, -2.145802347855658e-03, 4.089226935050486e-02, -2.395959303094913e-03, 2.306922664572905e-02, 2.151956526073799e-02, 2.151956526073799e-02, -6.037241531864070e-07, 6.162492376189526e-04, 9.159852846999663e-04, -6.080426786860951e-04, -6.952504027611823e-07, 6.231322006266227e-04, 7.484413721455742e-02, 7.601148668398833e-02, 7.126401165414040e-02, 7.529389762829097e-02, 7.545793212513151e-02, 7.545793212513151e-02, 7.763490944664965e-02, 8.337362683836431e-02, 8.509315133156353e-02, 8.374550799960230e-02, 8.474535168061453e-02, 6.087167764351395e-02, 6.827711402085176e-02, -5.724987640285938e-03, 7.388422451629509e-02, 2.235541481904861e-02, 8.899293089073748e-02, 8.899293089073727e-02, 2.986437698071151e-02, 4.441481420096986e-03, 6.095626364601790e-03, 1.118471554520028e-01, -2.016754908895627e-03, 1.284648375109337e-02, 1.289195352604499e-03, 1.769745542770082e-04, 4.717609435299604e-04, 1.341250901220349e-02, 6.276581531668009e-04, 6.276581531668008e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
