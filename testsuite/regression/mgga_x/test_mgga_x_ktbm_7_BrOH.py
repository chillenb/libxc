
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_7_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_7", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.336455153025785e+01, -2.336460743275212e+01, -2.336497816420506e+01, -2.336406626997554e+01, -2.336457992049520e+01, -2.336457992049520e+01, -3.418470135415775e+00, -3.418541455671377e+00, -3.420946268779522e+00, -3.422209699848854e+00, -3.418493845268008e+00, -3.418493845268008e+00, -6.253091582416371e-01, -6.249202638263438e-01, -6.158528062363157e-01, -6.240980517798380e-01, -6.251706739054881e-01, -6.251706739054881e-01, -1.905591362066897e-01, -1.927696914444186e-01, -7.205378782210752e-01, -1.307363392578259e-01, -1.911654541476573e-01, -1.911654541476573e-01, -1.031634891863542e-02, -1.080121444712352e-02, -4.356258202903936e-02, -4.835487699624918e-03, -1.069173658916859e-02, -1.069173658916859e-02, -5.704524699720708e+00, -5.705094822437406e+00, -5.704617923355892e+00, -5.705059328149927e+00, -5.704770137701731e+00, -5.704770137701731e+00, -2.091688569230542e+00, -2.115887780744756e+00, -2.090221424213600e+00, -2.109522743372903e+00, -2.109835714840189e+00, -2.109835714840189e+00, -5.992943255884875e-01, -6.430510094134890e-01, -5.519852619465032e-01, -5.688629053209245e-01, -6.299483943263481e-01, -6.299483943263481e-01, -9.736238990694866e-02, -1.902389577034848e-01, -9.613343283897861e-02, -1.882924856653580e+00, -1.135571766503483e-01, -1.135571766503483e-01, -4.715115443625692e-03, -5.356371666488289e-03, -4.056634793530619e-03, -5.988465526503589e-02, -4.856134106265312e-03, -4.856134106265311e-03, -6.436461641305470e-01, -6.427984109590563e-01, -6.431273960410853e-01, -6.433606754452869e-01, -6.432432898576896e-01, -6.432432898576896e-01, -6.177058253292115e-01, -5.508339178506269e-01, -5.723001147884827e-01, -5.904172810335039e-01, -5.809226461264939e-01, -5.809226461264938e-01, -6.640899356592841e-01, -2.434788189691330e-01, -2.878544409027046e-01, -3.575972128309588e-01, -3.238911511778121e-01, -3.238911511778119e-01, -4.757085160146219e-01, -4.053208763301137e-02, -5.450928191675335e-02, -3.357634755777104e-01, -7.925896127345512e-02, -7.925896127345511e-02, -1.182353454360466e-02, -1.450236094443316e-03, -2.821959909349938e-03, -7.552120375132468e-02, -4.123066656041215e-03, -4.123066656041208e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_7_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_7", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.866950009577104e+01, -2.866960696144118e+01, -2.867004163830538e+01, -2.866828955593440e+01, -2.866955684326197e+01, -2.866955684326197e+01, -4.552459180204717e+00, -4.552575682315672e+00, -4.556202718819985e+00, -4.554724343690858e+00, -4.552515939493079e+00, -4.552515939493079e+00, -7.971694646831279e-01, -7.961609637094376e-01, -7.731382815424273e-01, -7.841737611387866e-01, -7.968092010284535e-01, -7.968092010284535e-01, -2.293096240639250e-01, -2.321272818273738e-01, -9.101920123618783e-01, -1.630030353340212e-01, -2.301147982790644e-01, -2.301147982790644e-01, -1.288591083047482e-02, -1.349792772785066e-02, -5.480190718324901e-02, -6.195348157557364e-03, -1.335687513091509e-02, -1.335687513091509e-02, -7.084448228346278e+00, -7.088332226135361e+00, -7.084827536150415e+00, -7.087848523131150e+00, -7.086463189608572e+00, -7.086463189608572e+00, -2.494222181524933e+00, -2.513854972650767e+00, -2.485674169757393e+00, -2.500900356089871e+00, -2.519210857447521e+00, -2.519210857447521e+00, -7.805815926704091e-01, -8.953189985680347e-01, -7.328005649182531e-01, -8.012105029392436e-01, -8.169513589395011e-01, -8.169513589395011e-01, -1.217543434163007e-01, -2.309746202181012e-01, -1.201340336468354e-01, -2.702040516725261e+00, -1.405701056764747e-01, -1.405701056764747e-01, -5.971486911245913e-03, -6.827824942623399e-03, -5.112731440423268e-03, -7.609919740246097e-02, -6.223420890491435e-03, -6.223420890491439e-03, -8.583249683999863e-01, -8.412573222697388e-01, -8.472862612509192e-01, -8.520159683275806e-01, -8.496441359046054e-01, -8.496441359046054e-01, -8.343787313365709e-01, -6.511193334290063e-01, -6.957063096369897e-01, -7.449453994596366e-01, -7.194081339632250e-01, -7.194081339632249e-01, -9.353190429341590e-01, -2.921519894438842e-01, -3.456948337491508e-01, -4.490839790636277e-01, -3.928535255807620e-01, -3.928535255807616e-01, -5.884392929146414e-01, -5.078161499058727e-02, -6.862895407096729e-02, -4.328326877915096e-01, -9.907258363088689e-02, -9.907258363088682e-02, -1.512994316757060e-02, -1.870779872939437e-03, -3.546916970175801e-03, -9.447806912864230e-02, -5.289459406298718e-03, -5.289459406298703e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_7_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_7", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.534942368620659e-08, -1.534934441768469e-08, -1.534891370945978e-08, -1.535022339895152e-08, -1.534938239651325e-08, -1.534938239651325e-08, -1.354263255159504e-05, -1.354476395477432e-05, -1.360724790201514e-05, -1.358364744975113e-05, -1.354293495807427e-05, -1.354293495807427e-05, -4.645239375924560e-03, -4.633653490328267e-03, -4.337131978980681e-03, -4.581910758670468e-03, -4.641606962894891e-03, -4.641606962894891e-03, -7.306098973221069e-01, -7.344242473886353e-01, -1.286262446396648e-03, -4.743934451273987e-01, -7.309831870242244e-01, -7.309831870242244e-01, -1.039186921621893e+02, -9.422242018466291e+01, -3.598323520619237e+00, -2.276302509990434e+02, -9.856362964406490e+01, -9.856362964406482e+01, -4.582672178161682e-06, -4.582660790907658e-06, -4.582710575333044e-06, -4.582698639758121e-06, -4.582617915733044e-06, -4.582617915733044e-06, -1.221050760430900e-04, -1.229958317350260e-04, -1.218777315125981e-04, -1.227048643252628e-04, -1.229625815777097e-04, -1.229625815777097e-04, -2.279929496582763e-02, -1.917196695645947e-02, -2.449819718998612e-02, -2.441127981214201e-02, -2.116548190416814e-02, -2.116548190416814e-02, -7.492481565297494e-01, -3.481600740350663e-01, -8.457727919891750e-01, -1.989443592614387e-04, -8.178246371627430e-01, -8.178246371627430e-01, -3.269490332159580e+02, -2.183786368523396e+02, -8.277910342292199e+02, -1.562261850012899e+00, -2.808615405015711e+02, -2.808615405015709e+02, -2.737290475397031e-02, -2.760660269154145e-02, -2.753364006497009e-02, -2.746936080263333e-02, -2.750230727759244e-02, -2.750230727759244e-02, -3.080707176882849e-02, -4.089844322916678e-02, -3.900842986165146e-02, -3.634033575391360e-02, -3.776658693792723e-02, -3.776658693792722e-02, -1.509104613753806e-02, -2.470800877573662e-01, -1.879948986738614e-01, -1.165520663041570e-01, -1.595609835893349e-01, -1.595609835893349e-01, -5.086226093837052e-02, -4.080415054121040e+00, -2.149930647013416e+00, -1.712574128683885e-01, -1.446782773091693e+00, -1.446782773091693e+00, -4.074324954091326e+01, -2.789952770208563e+03, -1.296510958231426e+03, -1.732644665311082e+00, -4.572552948619166e+02, -4.572552948619177e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_7_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_7", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.098345157763348e-03, 2.098343478406555e-03, 2.098350431462518e-03, 2.098379394957597e-03, 2.098344128778329e-03, 2.098344128778329e-03, 6.328843586556490e-03, 6.330459874489380e-03, 6.380152640496998e-03, 6.378774569794150e-03, 6.329144131532313e-03, 6.329144131532313e-03, 9.347652955199494e-03, 9.318711317265629e-03, 8.866120859783009e-03, 1.042508531840398e-02, 9.339315505379198e-03, 9.339315505379198e-03, 7.292135918258298e-02, 7.493644294228881e-02, 6.987959762852639e-04, 1.206570068236382e-02, 7.332672057256774e-02, 7.332672057256774e-02, 1.711654383409345e-03, 1.774338856213498e-03, 4.113040853565196e-03, 2.923659125749263e-04, 1.804863204649031e-03, 1.804863204649039e-03, 8.782777452622612e-03, 8.780963269981203e-03, 8.782711998298113e-03, 8.781293841574030e-03, 8.781691656277655e-03, 8.781691656277655e-03, 1.464486162566954e-02, 1.519877461916977e-02, 1.466011337726940e-02, 1.511597080564875e-02, 1.499452222184614e-02, 1.499452222184614e-02, 5.824870044096983e-02, 5.892338244455810e-02, 4.921791931642171e-02, 5.330331540034195e-02, 6.157091992292096e-02, 6.157091992292096e-02, 9.206536925001297e-03, 3.641235140463164e-02, 1.001327561401196e-02, 1.578561261818159e-02, 1.695745579795428e-02, 1.695745579795428e-02, 4.521392484476387e-04, 4.095636843065107e-04, 7.663112640641981e-04, 3.879195683597028e-03, 3.638385215058981e-04, 3.638385215058898e-04, 7.353882939018171e-02, 7.460529930445978e-02, 7.424443884195026e-02, 7.394901880216705e-02, 7.409808114098702e-02, 7.409808114098702e-02, 7.485091254044267e-02, 8.066460593262566e-02, 8.177678740728972e-02, 8.030880115063360e-02, 8.113527857468938e-02, 8.113527857468927e-02, 5.200622041943925e-02, 5.372577141018808e-02, 6.279994668698675e-02, 6.612906297862875e-02, 7.148422216566845e-02, 7.148422216566835e-02, 6.781270335247280e-02, 3.937193344095819e-03, 4.703177106046507e-03, 7.861945741162059e-02, 9.911179851048675e-03, 9.911179851048599e-03, 7.758553983143769e-04, 8.613730058687816e-05, 4.146403536340040e-04, 1.014215703741329e-02, 3.567502008008346e-04, 3.567502008008313e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
