
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_rscan_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rscan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.173390368830530e+01, -2.173402374386897e+01, -2.173455225584298e+01, -2.248737708756558e+01, -2.248813730733782e+01, -2.324268142333106e+01, -3.407633742835607e+00, -3.766105205887187e+00, -3.766585173402737e+00, -3.766732617647796e+00, -3.766325669671105e+00, -3.408036529329311e+00, -5.319836582972367e-01, -6.257365172003198e-01, -6.986034280212388e-01, -6.108168192791852e-01, -5.177565904079753e-01, -7.053259413460424e-01, -1.607440572962208e-01, -1.637544956478809e-01, -7.066381288694583e-01, -1.361525816044937e-01, -1.759190536795791e-01, -1.727385697293797e-01, -3.275295249624580e-03, -5.015529066922253e-03, -3.166824514780616e-02, -1.499323900345495e-03, -2.454868368297476e-03, -2.454868368297476e-03, -5.669020401279267e+00, -5.670114039027997e+00, -5.669075296435043e+00, -5.670040670559274e+00, -5.554980798490339e+00, -5.555079144919818e+00, -2.115662312237330e+00, -2.131831046408172e+00, -2.103799081065715e+00, -2.118119877819924e+00, -1.912064305327892e+00, -2.130358572801335e+00, -5.968420633082363e-01, -6.936735914393457e-01, -5.889134131261431e-01, -6.133495613459321e-01, -6.122360826086246e-01, -6.486930980092167e-01, -9.062583806764844e-02, -1.566268497464106e-01, -8.325846759329419e-02, -2.086482507408975e+00, -1.098714301826628e-01, -1.098714301826628e-01, -1.896740371267600e-03, -1.435765374143073e-03, -1.212401502708699e-03, -4.890333682242521e-02, -1.545273379036286e-03, -1.545273379036287e-03, -6.423270168158682e-01, -6.385505838162961e-01, -6.302740494141241e-01, -6.371483553418782e-01, -6.318238760733055e-01, -6.361007412642068e-01, -6.249060974897975e-01, -4.919948757654337e-01, -5.305722395980268e-01, -5.862425118353438e-01, -5.730859212015429e-01, -5.497022482828045e-01, -7.000275833335936e-01, -2.330515659552025e-01, -2.446820754144567e-01, -3.365541317298835e-01, -3.257144539533124e-01, -2.868142000989252e-01, -4.911117199801327e-01, -3.246135887334318e-02, -4.088116920782862e-02, -3.631761142377015e-01, -7.113983171293523e-02, -7.113983171293523e-02, -9.274617242470636e-03, -2.266204238705585e-04, -2.084790353958269e-03, -5.231706701794435e-02, -1.401435200780606e-03, -2.788816004345566e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_rscan_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rscan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.217478471021376e+01, -3.217443079357427e+01, -3.217484279613033e+01, -3.217447304757179e+01, -3.217506633154351e+01, -3.217478279386605e+01, -3.217440631291470e+01, -3.111707880756284e+01, -3.217481626482219e+01, -3.111764894238961e+01, -3.111805476790383e+01, -3.111764894238960e+01, -5.098880396659705e+00, -4.726069973133649e+00, -5.098883335123849e+00, -5.098819035303186e+00, -5.098917826874317e+00, -5.098977620009796e+00, -5.099335086162117e+00, -5.099406311764773e+00, -5.098056755906341e+00, -5.099533554229779e+00, -4.724777705997774e+00, -5.099533554229779e+00, -8.051304273033645e-01, -8.166918170239909e-01, -8.015148574112874e-01, -9.912827150653163e-01, -9.673188585568770e-01, -9.608571314772997e-01, -9.705294325329274e-01, -7.754919372045758e-01, -8.284568106003604e-01, -7.145030696102080e-01, -9.993265653694411e-01, -9.384865901018548e-01, -1.843294898982117e-01, -2.612965738725777e-01, -1.876045087442840e-01, -2.657625184136404e-01, -1.141439823573663e+00, -8.678960100067683e-01, -1.944038987629124e-01, -1.970860152873763e-01, -2.629737988730993e-01, -1.407388904331574e-01, -2.629737988730992e-01, -9.500959369925356e-02, -5.631262597191626e-03, -6.095202018219750e-03, -8.890783373495359e-03, -6.564919804680921e-03, -4.356444924740864e-02, -4.970505081070366e-02, -2.797667323497257e-03, -2.737471913440197e-03, -4.831704020521107e-03, -2.387703438633532e-03, -4.831704020521107e-03, -2.387703438633532e-03, -7.577185260688366e+00, -7.575369250662205e+00, -7.578443408627090e+00, -7.576584455666735e+00, -7.577260470516781e+00, -7.575414796162661e+00, -7.578340049462606e+00, -7.576518785218358e+00, -7.735278729138579e+00, -7.575978825259853e+00, -7.577825447907924e+00, -7.733414660814677e+00, -2.874630111668901e+00, -2.874378596891704e+00, -2.894752215565692e+00, -2.893891014603301e+00, -2.857810076621651e+00, -2.862376990826124e+00, -2.875188980712867e+00, -2.879986684945027e+00, -2.898475453799742e+00, -2.581453241706262e+00, -2.898475453799742e+00, -2.886329265978492e+00, -8.584428331090276e-01, -8.856070851750211e-01, -9.282376991754305e-01, -9.285228109079305e-01, -7.811564219310072e-01, -8.086813352753603e-01, -8.111722539344253e-01, -8.373866889490993e-01, -8.918484390051233e-01, -8.786237409223846e-01, -8.918484390051232e-01, -8.481174712260720e-01, -1.344284506000996e-01, -1.357469265406093e-01, -1.802414120843066e-01, -2.585735850152531e-01, -1.211680977485708e-01, -1.280071632241452e-01, -2.802607952249843e+00, -2.801336877815894e+00, -1.545597242283440e-01, -1.639419290052601e-01, -1.545597242283440e-01, -1.639419290052601e-01, -3.826199761653864e-03, -1.924660579961430e-03, -2.643743773543869e-03, -2.668251312469924e-03, -2.119462002647324e-03, -2.305674613958756e-03, -8.199737138724433e-02, -6.028885280973753e-02, -1.884706839673602e-03, -3.184787753488357e-03, -1.884706839673602e-03, -3.184787753488358e-03, -8.549323309629436e-01, -8.582290974045578e-01, -8.503988246405128e-01, -8.536994837997243e-01, -8.582204704895158e-01, -8.613998075623281e-01, -8.585079735308599e-01, -8.565790258903240e-01, -8.583386850137921e-01, -8.615336991742266e-01, -8.583386850137921e-01, -8.559256163521825e-01, -8.320320643974045e-01, -8.347721995810435e-01, -7.189105501684937e-01, -7.235504038354795e-01, -7.509661745801034e-01, -7.862436843139754e-01, -7.830916225162821e-01, -7.858215465531176e-01, -7.667763355430173e-01, -7.695834072474965e-01, -7.667763355430172e-01, -8.003793228973135e-01, -9.733858695146781e-01, -1.011379890570560e+00, -3.240344450235010e-01, -3.258788992348824e-01, -3.020156518587845e-01, -3.908530715567597e-01, -4.539514728932795e-01, -5.120969599353030e-01, -4.453692757478545e-01, -4.451832560474646e-01, -4.453692757478544e-01, -3.936528630028251e-01, -6.622498507621006e-01, -6.665728564729780e-01, -4.325540581509640e-02, -4.336534722325364e-02, -6.346845181653760e-02, -6.588025271626134e-02, -4.877374308246988e-01, -4.943860226324199e-01, -1.034664399819435e-01, -1.097342922962547e-01, -1.034664399819435e-01, -1.097342922962547e-01, -1.213481724949151e-02, -1.257405414883038e-02, -4.338765515461446e-04, -4.350826399246496e-04, -2.686443368436858e-03, -2.857249382066945e-03, -6.973440254333983e-02, -7.102045619212442e-02, -1.905559597293007e-03, -2.846388522088941e-03, -1.905559597293003e-03, -4.717740746790294e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rscan_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rscan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.856497976292373e-08, 0.000000000000000e+00, -2.856260627803998e-08, -2.856424070803157e-08, 0.000000000000000e+00, -2.856206983397213e-08, -2.856194224001977e-08, 0.000000000000000e+00, -2.855875787002330e-08, -2.857026237454020e-08, 0.000000000000000e+00, 6.047824246799158e-10, -2.856452609185478e-08, 0.000000000000000e+00, 6.046859519893796e-10, 6.046752180961226e-10, 0.000000000000000e+00, 6.046859519893796e-10, 1.089726728053703e-06, 0.000000000000000e+00, -2.903992405224481e-05, 1.089702854865935e-06, 0.000000000000000e+00, 1.089782696222619e-06, 1.089251227472803e-06, 0.000000000000000e+00, 1.089123195563003e-06, 1.089049716729804e-06, 0.000000000000000e+00, 1.088988301821003e-06, 1.090478630698642e-06, 0.000000000000000e+00, 1.088492282447609e-06, -2.904283133555351e-05, 0.000000000000000e+00, 1.088492282447609e-06, -1.996682941138170e-02, 0.000000000000000e+00, -1.960145001716096e-02, -2.010601033944093e-02, 0.000000000000000e+00, 7.372033167463211e-04, 7.919973710219729e-04, 0.000000000000000e+00, 8.099160691347974e-04, 7.883228930778437e-04, 0.000000000000000e+00, -2.144920450971887e-02, -1.897619412911597e-02, 0.000000000000000e+00, -2.512723776844664e-02, 7.161393588192480e-04, 0.000000000000000e+00, 8.741382114445441e-04, -4.880105443226640e+00, 0.000000000000000e+00, 1.416758790141828e-01, -4.646144769575841e+00, 0.000000000000000e+00, 1.344004718203654e-01, 3.590301293418945e-04, 0.000000000000000e+00, -1.021483420625086e-02, 3.051743833706316e-01, 0.000000000000000e+00, 3.091330423824017e-01, 1.322910324719696e-01, 0.000000000000000e+00, 6.745873005347708e-01, 1.322910324719695e-01, 0.000000000000000e+00, -5.042961777872734e+01, 4.698475851791647e+02, 0.000000000000000e+00, 4.210245074553210e+02, -3.242102000265249e+01, 0.000000000000000e+00, 3.896452276563023e+02, -1.213601572644047e+03, 0.000000000000000e+00, 8.609567926949389e+00, 9.845775580168792e+02, 0.000000000000000e+00, 1.019797942061425e+03, 5.628289264969403e+02, 0.000000000000000e+00, 2.073029766664112e+03, 5.628289264969403e+02, 0.000000000000000e+00, 2.073029766664112e+03, 1.412742895720777e-07, 0.000000000000000e+00, 1.414054486198759e-07, 1.404824950138074e-07, 0.000000000000000e+00, 1.406395012309710e-07, 1.412201241274163e-07, 0.000000000000000e+00, 1.413717614723399e-07, 1.405411637233112e-07, 0.000000000000000e+00, 1.406763761766465e-07, -6.952778438961710e-06, 0.000000000000000e+00, 1.410224546657879e-07, 1.408769303320941e-07, 0.000000000000000e+00, -6.959832989615781e-06, 1.085495899067913e-05, 0.000000000000000e+00, 1.085879564427126e-05, 1.055415330402372e-05, 0.000000000000000e+00, 1.056636482498563e-05, 1.110983111220379e-05, 0.000000000000000e+00, 1.104081000800683e-05, 1.084650855325004e-05, 0.000000000000000e+00, 1.077431348086528e-05, 1.049869779001760e-05, 0.000000000000000e+00, -2.444896539962573e-04, 1.049869779001760e-05, 0.000000000000000e+00, 1.067906851168813e-05, 1.268185683794528e-03, 0.000000000000000e+00, -5.459862288565243e-02, 7.494843500141101e-04, 0.000000000000000e+00, 7.343481657183451e-04, 1.973111915090624e-03, 0.000000000000000e+00, 1.683357781020162e-03, 1.607356420393979e-03, 0.000000000000000e+00, 1.369577196625355e-03, 1.038913803634267e-03, 0.000000000000000e+00, -5.688874709208068e-02, 1.038913803634267e-03, 0.000000000000000e+00, 1.319686127812271e-03, 8.169464997277196e-01, 0.000000000000000e+00, 7.954954333836576e-01, -4.564618935475471e+00, 0.000000000000000e+00, 1.231195292431165e-01, 1.066267800594642e+00, 0.000000000000000e+00, 9.488886378688838e-01, 1.067060515830288e-05, 0.000000000000000e+00, 1.068761100301047e-05, 6.230607284454586e-01, 0.000000000000000e+00, 5.864233258702717e-01, 6.230607284454586e-01, 0.000000000000000e+00, 5.864233258702721e-01, -1.316908056500094e+00, 0.000000000000000e+00, 1.206298915967769e+03, 1.022380992763789e+03, 0.000000000000000e+00, 9.275338458674431e+02, 5.153918218043777e+03, 0.000000000000000e+00, 4.902246265685950e+03, 2.979084162789459e+00, 0.000000000000000e+00, -3.193666131857269e+02, 1.939299338866709e+03, 0.000000000000000e+00, 2.119825879065841e+03, 1.939299338866709e+03, 0.000000000000000e+00, 2.119825879065840e+03, 2.567860329084429e-04, 0.000000000000000e+00, 2.434101829618209e-04, 5.592752352865292e-04, 0.000000000000000e+00, 5.400534531616480e-04, -3.332067329005477e-02, 0.000000000000000e+00, -3.263560438733772e-02, -3.191097289172296e-02, 0.000000000000000e+00, 3.574266245191553e-04, -3.259183459943791e-02, 0.000000000000000e+00, -3.194907531759682e-02, -3.259183459943791e-02, 0.000000000000000e+00, 4.011440896943238e-04, 3.367725064125729e-04, 0.000000000000000e+00, 3.204437293579757e-04, 2.680114848185728e-03, 0.000000000000000e+00, -9.722171595549695e-02, 2.074015732478598e-03, 0.000000000000000e+00, -9.170212335097794e-02, 1.446551127572854e-03, 0.000000000000000e+00, 1.420604578889539e-03, 1.771878671311384e-03, 0.000000000000000e+00, 1.738540269306369e-03, 1.771878671311386e-03, 0.000000000000000e+00, -8.109702603141584e-02, 6.762760720901792e-04, 0.000000000000000e+00, -3.077775762270970e-02, 5.750304650917153e-02, 0.000000000000000e+00, 5.640743683179109e-02, -8.596731104491296e-01, 0.000000000000000e+00, 2.984651635081136e-02, -2.494260428317066e-01, 0.000000000000000e+00, 1.077751166098142e-02, 1.857484793233897e-02, 0.000000000000000e+00, 1.861746744049939e-02, 1.857484793233898e-02, 0.000000000000000e+00, -4.647765555335372e-01, 3.823560393390191e-03, 0.000000000000000e+00, 3.712584412395952e-03, -1.203162089873769e+03, 0.000000000000000e+00, -1.208994793179784e+03, 4.829769643094940e+00, 0.000000000000000e+00, 4.544271611593903e+00, 1.302883956585431e-02, 0.000000000000000e+00, 1.215091829496582e-02, 1.877162672691348e+00, 0.000000000000000e+00, 1.759820146387101e+00, 1.877162672691348e+00, 0.000000000000000e+00, 1.759820146387100e+00, -4.256386574633576e+02, 0.000000000000000e+00, -5.031490497477862e+02, 1.007893234096072e+04, 0.000000000000000e+00, 1.001531642518909e+04, -2.651427183797534e-02, 0.000000000000000e+00, -3.309171614581220e-02, -1.848231264082309e+02, 0.000000000000000e+00, -1.727479135691725e+02, 3.646117925353887e+03, 0.000000000000000e+00, 2.528349516170165e+03, 3.646117925353893e+03, 0.000000000000000e+00, -2.665747079744921e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rscan_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rscan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.874000973986763e-03, 1.873911933379760e-03, 1.873981500867893e-03, 1.873897798122900e-03, 1.873923033198218e-03, 1.873812910836826e-03, 1.874141926295856e-03, 0.000000000000000e+00, 1.873988819524555e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 4.965658317298987e-03, 1.321011800351998e-34, 0.000000000000000e+00, 0.000000000000000e+00, 3.251531044662428e-32, 0.000000000000000e+00, 2.498669349266968e-32, 1.640052001596461e-31, 3.966289004034183e-31, 4.961717317615758e-03, 3.966289004034183e-31, 9.295355509668850e-03, 1.011046186360865e-02, 9.071540490762749e-03, 0.000000000000000e+00, 1.733369631960625e-29, 6.611254058205476e-30, 0.000000000000000e+00, 7.800146885447593e-03, 1.059932055713444e-02, 4.883276889112499e-03, 0.000000000000000e+00, 0.000000000000000e+00, 1.041972315180958e-02, 0.000000000000000e+00, 1.129012017049073e-02, 1.077035208538480e-30, 0.000000000000000e+00, 2.453946495144231e-03, 2.575492413056970e-29, 3.735064492183092e-28, 0.000000000000000e+00, 4.862414746839871e-28, 0.000000000000000e+00, 1.129940957812725e-03, 1.163181276930651e-39, 0.000000000000000e+00, 9.288590337306464e-08, 0.000000000000000e+00, 4.689342950011268e-03, 1.484484604180551e-33, 2.079883584468618e-43, 0.000000000000000e+00, 1.047243772189836e-40, 0.000000000000000e+00, 1.047243772189836e-40, 0.000000000000000e+00, 3.121281863733920e-34, 1.890372658456480e-34, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 5.299835063412562e-37, 0.000000000000000e+00, 0.000000000000000e+00, 6.945518086259635e-03, 2.574554316333039e-32, 0.000000000000000e+00, 6.947409781369619e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 2.617433855838641e-31, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 6.551944659572560e-03, 0.000000000000000e+00, 8.555596830435264e-33, 2.653247225152805e-30, 6.370636149098743e-02, 0.000000000000000e+00, 0.000000000000000e+00, 3.283621016334197e-31, 2.234639659074791e-30, 0.000000000000000e+00, 1.015935766177842e-33, 0.000000000000000e+00, 6.504654009492057e-02, 0.000000000000000e+00, 0.000000000000000e+00, 3.127034064949148e-28, 2.733536701146288e-28, 4.130819753354207e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 3.114525880481535e-32, 7.613855298572127e-30, 2.394195729081169e-29, 0.000000000000000e+00, 5.517813581640769e-29, 4.020401639893824e-11, 0.000000000000000e+00, 7.977808800582971e-44, 2.259387173503486e-43, 0.000000000000000e+00, 9.215215740316702e-45, 0.000000000000000e+00, 4.942934949045151e-03, 2.722330781740362e-44, 6.387070842949854e-43, 2.587264249607876e-44, 2.090262721771744e-42, 6.172859508717033e-33, 2.641017075891168e-34, 2.179062643495287e-32, 6.707298670178038e-32, 5.047668290732134e-02, 5.008689405086821e-02, 4.907542785482102e-02, 0.000000000000000e+00, 4.974261006022859e-02, 4.939231841619285e-02, 4.974261006022859e-02, 0.000000000000000e+00, 3.386203324539120e-34, 6.620023190740783e-32, 0.000000000000000e+00, 6.049929432799904e-02, 0.000000000000000e+00, 7.796417950973954e-02, 6.311489348946850e-32, 0.000000000000000e+00, 1.026036366871347e-30, 0.000000000000000e+00, 6.352300959299485e-31, 7.770089229925385e-02, 5.525038288996452e-31, 6.088321381621680e-02, 2.077433635183877e-29, 4.214637682789942e-29, 1.574486079213290e-02, 2.325728894891322e-29, 3.596532553990980e-02, 1.194021427369837e-30, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 3.783709521722449e-02, 2.556081330457531e-30, 0.000000000000000e+00, 4.479606456243060e-03, 4.560546728545344e-03, 0.000000000000000e+00, 1.629915470423157e-31, 4.962665073402808e-31, 0.000000000000000e+00, 2.419533544583282e-31, 2.500346481293512e-29, 0.000000000000000e+00, 9.983192304469472e-29, 3.629036434664325e-06, 4.985819426220672e-06, 8.739038386293855e-50, 5.445948559023932e-49, 2.816277783283807e-13, 4.923729863335909e-13, 3.973952861657033e-03, 4.389048813661841e-03, 0.000000000000000e+00, 2.688730661590255e-43, 1.352369992151900e-44, 5.598628095669920e-11])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
