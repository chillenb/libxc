
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_rscan_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rscan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.321511275723250e+01, -2.321518179400051e+01, -2.321553773611663e+01, -2.321451161275382e+01, -2.321504226095692e+01, -2.321504226095692e+01, -3.412237351084898e+00, -3.412361882310886e+00, -3.415937564719315e+00, -3.417070628649558e+00, -3.415646793420434e+00, -3.415646793420434e+00, -5.977425761090960e-01, -5.970707579736645e-01, -5.815963327911551e-01, -5.923557416983927e-01, -5.907467328885323e-01, -5.907467328885323e-01, -1.802972052535096e-01, -1.824333911948167e-01, -6.575240057341144e-01, -1.174296512082386e-01, -1.659534146244289e-01, -1.659534146244288e-01, -3.279986687331015e-03, -3.533305399579156e-03, -3.008354681982391e-02, -1.532726630895501e-03, -2.478944218520490e-03, -2.478944218520491e-03, -5.669057806751890e+00, -5.670150898792803e+00, -5.669112115186972e+00, -5.670077030453470e+00, -5.669609795561019e+00, -5.669609795561019e+00, -2.079020161894705e+00, -2.101987974603176e+00, -2.072415419682264e+00, -2.092945062833657e+00, -2.095110920083354e+00, -2.095110920083354e+00, -6.165284528192622e-01, -6.696631005541435e-01, -5.471709109442287e-01, -5.607587989487985e-01, -6.295077657618078e-01, -6.295077657618079e-01, -7.911155592695415e-02, -1.739947738716847e-01, -7.328563799783516e-02, -1.923071585173826e+00, -1.000148742093905e-01, -1.000148742093906e-01, -1.099487848226956e-03, -1.508503787721776e-03, -1.242472062249560e-03, -5.152802042997542e-02, -1.587111193735527e-03, -1.587111193735528e-03, -6.408631285521051e-01, -6.372259076533159e-01, -6.385151377752039e-01, -6.395689199309449e-01, -6.390409908788558e-01, -6.390409908788558e-01, -6.207199796966761e-01, -5.326620949041112e-01, -5.581424656114101e-01, -5.832002313811518e-01, -5.702155759062419e-01, -5.702155759062419e-01, -6.930975704517441e-01, -2.287036683261369e-01, -2.727354169248989e-01, -3.529700741489947e-01, -3.129630740715237e-01, -3.129630740715238e-01, -4.776284754592838e-01, -2.843735863033541e-02, -4.061225197256536e-02, -3.458152577706006e-01, -6.719006498182731e-02, -6.719006498182732e-02, -5.097666206697988e-03, -2.785316782198476e-04, -7.371808813025418e-04, -6.470702349339455e-02, -1.437753609511734e-03, -1.437753609511733e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_rscan_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rscan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.025934435879283e+01, -3.026093037208219e+01, -3.025949109520808e+01, -3.026103688497829e+01, -3.026014505357321e+01, -3.026192550611898e+01, -3.025849882127907e+01, -3.025982178095635e+01, -3.025942875713386e+01, -3.026079882144791e+01, -3.025942875713386e+01, -3.026079882144791e+01, -4.803693727604353e+00, -4.803761604706994e+00, -4.803825269333983e+00, -4.803865803687264e+00, -4.806600605309810e+00, -4.807210272626605e+00, -4.804915853022995e+00, -4.805224233040558e+00, -4.802606440791877e+00, -4.807756276200631e+00, -4.802606440791877e+00, -4.807756276200631e+00, -8.257304429826846e-01, -8.299498894034244e-01, -8.242796683996151e-01, -8.292073437212153e-01, -8.041328047747073e-01, -7.997404613031318e-01, -8.129357894735693e-01, -8.156808038805817e-01, -8.354623416761248e-01, -7.832331220671968e-01, -8.354623416761248e-01, -7.832331220671968e-01, -1.675947470690386e-01, -1.982906185588864e-01, -1.727646141926190e-01, -2.033854723895757e-01, -8.398785210991285e-01, -8.739406330966381e-01, -1.462706234781129e-01, -1.267063386653930e-01, -1.744040689908599e-01, -1.115210190309743e-01, -1.744040689908598e-01, -1.115210190309743e-01, -5.641573987142958e-03, -6.099882573759261e-03, -6.018158561988856e-03, -6.575718557403352e-03, -4.519384107464598e-02, -4.778093493727084e-02, -2.858067454127364e-03, -2.787698160253474e-03, -4.859554605637141e-03, -2.484532955262127e-03, -4.859554605637142e-03, -2.484532955262127e-03, -7.574643662508370e+00, -7.573100654864181e+00, -7.575979679837364e+00, -7.574385777895459e+00, -7.574834014005982e+00, -7.573224421646367e+00, -7.575974396244593e+00, -7.574386745336469e+00, -7.575239308265013e+00, -7.573732282763859e+00, -7.575239308265013e+00, -7.573732282763859e+00, -2.558332863241520e+00, -2.560236482027952e+00, -2.593300486063136e+00, -2.594054867136205e+00, -2.534434663133647e+00, -2.543070916345506e+00, -2.565926350121151e+00, -2.574675893067408e+00, -2.596394745220293e+00, -2.580725621092070e+00, -2.596394745220293e+00, -2.580725621092070e+00, -8.206913561385969e-01, -8.186289937966252e-01, -9.259531831795027e-01, -9.261137187536408e-01, -7.366013402043631e-01, -7.691156018120856e-01, -8.114945680187143e-01, -8.375763688676405e-01, -8.585895229966756e-01, -8.144446571646936e-01, -8.585895229966756e-01, -8.144446571646939e-01, -8.561192029974707e-02, -9.005314482437451e-02, -1.248552163151901e-01, -1.258607914298622e-01, -8.223664841861245e-02, -8.058724966080053e-02, -2.835388454252861e+00, -2.834197320343497e+00, -8.165664445275715e-02, -7.633250127926798e-02, -8.165664445275697e-02, -7.633250127926780e-02, -1.997599721480278e-03, -2.077757058328523e-03, -2.758298533692941e-03, -2.795326132567827e-03, -2.165180072096574e-03, -2.357046676031179e-03, -6.238410226051115e-02, -6.507489463054557e-02, -2.099969895309852e-03, -3.198293522320648e-03, -2.099969895309852e-03, -3.198293522320649e-03, -8.537752545799905e-01, -8.571479859154042e-01, -8.431361047490579e-01, -8.466234954472415e-01, -8.467813848093260e-01, -8.502531892351030e-01, -8.498919821544137e-01, -8.532850451425199e-01, -8.483284292216078e-01, -8.517599232766234e-01, -8.483284292216078e-01, -8.517599232766234e-01, -8.338653915594884e-01, -8.365671418388836e-01, -6.705865260035230e-01, -6.740727925058563e-01, -7.161218902319525e-01, -7.198381819867657e-01, -7.623419835132110e-01, -7.651891711703702e-01, -7.389397932942992e-01, -7.418978769363384e-01, -7.389397932942992e-01, -7.418978769363382e-01, -9.733503133922571e-01, -9.741951939092228e-01, -2.217276798017939e-01, -2.237483210055707e-01, -2.955928965056748e-01, -3.018742200385358e-01, -4.572729397142883e-01, -4.603018621667115e-01, -3.759344814257797e-01, -3.763280141892435e-01, -3.759344814257798e-01, -3.763280141892436e-01, -6.058592888071423e-01, -6.122154080816374e-01, -4.448216487344813e-02, -4.467931459689078e-02, -5.671608222086463e-02, -5.815907223785727e-02, -4.511716906812355e-01, -4.602257099011439e-01, -6.535325839781060e-02, -6.886620581041765e-02, -6.535325839781064e-02, -6.886620581041764e-02, -8.796780435010492e-03, -9.217348947310387e-03, -5.122388313455781e-04, -5.438242637313875e-04, -1.307696947009544e-03, -1.430726871183411e-03, -6.865656369771535e-02, -7.550581627775575e-02, -2.076052815741927e-03, -2.859001974671268e-03, -2.076052815741924e-03, -2.859001974671265e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rscan_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rscan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.166630726593857e-08, 0.000000000000000e+00, -1.164118368201188e-08, -1.166582800396716e-08, 0.000000000000000e+00, -1.164083636216764e-08, -1.166112259665999e-08, 0.000000000000000e+00, -1.163493477480790e-08, -1.166637357528160e-08, 0.000000000000000e+00, -1.164171458960406e-08, -1.166608537633707e-08, 0.000000000000000e+00, -1.163666861434886e-08, -1.166608537633707e-08, 0.000000000000000e+00, -1.163666861434886e-08, -3.068126062145270e-05, 0.000000000000000e+00, -3.068552568683017e-05, -3.068467919928559e-05, 0.000000000000000e+00, -3.068842917838203e-05, -3.075683295055348e-05, 0.000000000000000e+00, -3.076990736623020e-05, -3.069286120969949e-05, 0.000000000000000e+00, -3.069730235496731e-05, -3.069268552950330e-05, 0.000000000000000e+00, -3.075702589005588e-05, -3.069268552950330e-05, 0.000000000000000e+00, -3.075702589005588e-05, -8.543933064233551e-03, 0.000000000000000e+00, -8.742048952430010e-03, -8.493620639748446e-03, 0.000000000000000e+00, -8.720214911613193e-03, -7.812416304484400e-03, 0.000000000000000e+00, -7.759604825258069e-03, -8.067482920229019e-03, 0.000000000000000e+00, -8.210079453220456e-03, -8.850520309354935e-03, 0.000000000000000e+00, -8.334951438759409e-03, -8.850520309354935e-03, 0.000000000000000e+00, -8.334951438759409e-03, -3.445909364492820e+00, 0.000000000000000e+00, -2.276638778920388e+00, -3.384450157816812e+00, 0.000000000000000e+00, -2.239131760186544e+00, -2.584740768726609e-03, 0.000000000000000e+00, -3.148891261289873e-03, -1.561823109600929e+00, 0.000000000000000e+00, -3.861456803928897e+00, -3.030890303799997e+00, 0.000000000000000e+00, -2.546760468815370e-01, -3.030890303799993e+00, 0.000000000000000e+00, -2.546760468815363e-01, 4.760649392522315e+02, 0.000000000000000e+00, 4.233830686009970e+02, 4.492701172780587e+02, 0.000000000000000e+00, 3.944046308352391e+02, 5.053881034440362e+00, 0.000000000000000e+00, 3.510661376104617e+00, 1.131625227647455e+03, 0.000000000000000e+00, 1.147702630926412e+03, 5.859842740870774e+02, 0.000000000000000e+00, 2.692107344481547e+03, 5.859842740870785e+02, 0.000000000000000e+00, 2.692107344481550e+03, 8.824607075762512e-08, 0.000000000000000e+00, 9.416347057821883e-08, 8.874300859725793e-08, 0.000000000000000e+00, 9.456758416938172e-08, 9.063274261965756e-08, 0.000000000000000e+00, 9.578923397197143e-08, 9.094399607542403e-08, 0.000000000000000e+00, 9.605500478953424e-08, 8.669415514169101e-08, 0.000000000000000e+00, 9.408612034754775e-08, 8.669415514169101e-08, 0.000000000000000e+00, 9.408612034754775e-08, -1.945578841944814e-04, 0.000000000000000e+00, -1.927742829712463e-04, -1.809615441302664e-04, 0.000000000000000e+00, -1.798044164814817e-04, -1.906138811431184e-04, 0.000000000000000e+00, -1.902351679044826e-04, -1.785839156675256e-04, 0.000000000000000e+00, -1.780281046422903e-04, -1.890577795944624e-04, 0.000000000000000e+00, -1.860534732980752e-04, -1.890577795944624e-04, 0.000000000000000e+00, -1.860534732980752e-04, -3.284402099689700e-02, 0.000000000000000e+00, -3.265137317981326e-02, -2.785375546276313e-02, 0.000000000000000e+00, -2.737768210462307e-02, -5.579240307916908e-02, 0.000000000000000e+00, -4.782219690976192e-02, -6.040392534300729e-02, 0.000000000000000e+00, -5.133320856009725e-02, -2.620158063786971e-02, 0.000000000000000e+00, -3.557239569339001e-02, -2.620158063786969e-02, 0.000000000000000e+00, -3.557239569339000e-02, -5.521694667179900e+00, 0.000000000000000e+00, -4.704917582914645e+00, -3.192975128902349e+00, 0.000000000000000e+00, -3.155364964558702e+00, -5.332862203774655e+00, 0.000000000000000e+00, -6.556252617943403e+00, -4.259868784570180e-04, 0.000000000000000e+00, -4.267554684084600e-04, -8.125751079533128e+00, 0.000000000000000e+00, -1.094016024234217e+01, -8.125751079533135e+00, 0.000000000000000e+00, -1.094016024234221e+01, 2.263176560556036e+03, 0.000000000000000e+00, 1.950754564768845e+03, 1.346770463819218e+03, 0.000000000000000e+00, 1.254288927984020e+03, 5.942442033504562e+03, 0.000000000000000e+00, 5.689944770115372e+03, -1.020965951865250e+01, 0.000000000000000e+00, -9.580065614636471e+00, 3.877329694788360e+03, 0.000000000000000e+00, 2.182484440151356e+03, 3.877329694788353e+03, 0.000000000000000e+00, 2.182484440151355e+03, -2.688890086235815e-02, 0.000000000000000e+00, -2.626373145746373e-02, -2.600036898595771e-02, 0.000000000000000e+00, -2.540046857656180e-02, -2.630100361635858e-02, 0.000000000000000e+00, -2.569155821092107e-02, -2.656145982179807e-02, 0.000000000000000e+00, -2.595027919961886e-02, -2.643538343087738e-02, 0.000000000000000e+00, -2.582351390265255e-02, -2.643538343087738e-02, 0.000000000000000e+00, -2.582351390265256e-02, -3.329111571464574e-02, 0.000000000000000e+00, -3.278108648734365e-02, -4.332313620246014e-02, 0.000000000000000e+00, -4.259893362972268e-02, -3.895375685260921e-02, 0.000000000000000e+00, -3.834236836535258e-02, -3.594513033220956e-02, 0.000000000000000e+00, -3.547345653133731e-02, -3.747639053821730e-02, 0.000000000000000e+00, -3.689934696985608e-02, -3.747639053821730e-02, 0.000000000000000e+00, -3.689934696985608e-02, -2.531706126284156e-02, 0.000000000000000e+00, -2.453603945848532e-02, -1.126020749205445e+00, 0.000000000000000e+00, -1.108510631326797e+00, -6.531731783968686e-01, 0.000000000000000e+00, -6.255014804199363e-01, -2.657380078881932e-01, 0.000000000000000e+00, -2.609156348759625e-01, -3.989489209642336e-01, 0.000000000000000e+00, -3.999277529014339e-01, -3.989489209642335e-01, 0.000000000000000e+00, -3.999277529014341e-01, -8.151416064375239e-02, 0.000000000000000e+00, -7.683427707192897e-02, 5.836462730242555e+00, 0.000000000000000e+00, 5.318676230718287e+00, -3.510833256603843e+00, 0.000000000000000e+00, -4.290742910061932e+00, -3.360941944518656e-01, 0.000000000000000e+00, -2.844254738795329e-01, -1.370495060589444e+01, 0.000000000000000e+00, -1.438058459887294e+01, -1.370495060589445e+01, 0.000000000000000e+00, -1.438058459887293e+01, 2.158228451746538e+02, 0.000000000000000e+00, 2.039468423148654e+02, 2.624138689982771e+04, 0.000000000000000e+00, 3.650084195520977e+04, 5.997163922297772e+03, 0.000000000000000e+00, 5.590945367106691e+03, -1.310432244982232e+01, 0.000000000000000e+00, -1.071524463737154e+01, 6.390612427591836e+03, 0.000000000000000e+00, 2.605407960866057e+03, 6.390612427591849e+03, 0.000000000000000e+00, 2.605407960866067e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rscan_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rscan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rscan_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rscan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [9.438329780775770e-04, 9.419152404038139e-04, 9.438041634428141e-04, 9.418943559038909e-04, 9.434729249913488e-04, 9.414828828834389e-04, 9.437859851746383e-04, 9.418888866505114e-04, 9.438205312005307e-04, 9.415505599789906e-04, 9.438205312005307e-04, 9.415505599789906e-04, 9.118989242443368e-03, 9.115568317269302e-03, 9.120722630564404e-03, 9.116505435990423e-03, 9.151673085268571e-03, 9.156491584633931e-03, 9.148771647770979e-03, 9.146750071805857e-03, 9.116797318342751e-03, 9.173781723170802e-03, 9.116797318342751e-03, 9.173781723170802e-03, 1.438438175040926e-02, 1.463517257070771e-02, 1.433247440182539e-02, 1.459066682861251e-02, 1.340832372010914e-02, 1.360229936255259e-02, 1.478732477194715e-02, 1.507179860608729e-02, 1.450646983748821e-02, 1.595239398160189e-02, 1.450646983748821e-02, 1.595239398160189e-02, 1.393553323289614e-01, 1.052194419225883e-01, 1.417047301781629e-01, 1.087574497359752e-01, 1.911206219724111e-03, 2.848009410601581e-03, 3.172180745189675e-02, 7.568537230678833e-02, 1.391123442843652e-01, 6.346566842932928e-03, 1.391123442843652e-01, 6.346566842932923e-03, 2.854417950002381e-12, 9.775111582033551e-13, 1.230932041092000e-11, 7.860672960711784e-12, 1.716309103356957e-03, 2.155638347471380e-03, 1.844477158397509e-12, 1.120249995813588e-12, 8.303374609288469e-12, 5.048319332861317e-13, 8.303374609289013e-12, 5.048319332861335e-13, 5.877970145189589e-05, 5.229617224074503e-05, 5.737054427475918e-05, 5.101651989819105e-05, 5.606201758030369e-05, 5.045013077609012e-05, 5.498070493189964e-05, 4.940027265401209e-05, 6.008030386070909e-05, 5.196756353115053e-05, 6.008030386070909e-05, 5.196756353115053e-05, 1.205513098614159e-02, 1.195409526055317e-02, 1.150945354497457e-02, 1.143553179371008e-02, 1.165321523420683e-02, 1.168282443246209e-02, 1.117188538460419e-02, 1.119124217143800e-02, 1.200735904339938e-02, 1.170839228445438e-02, 1.200735904339938e-02, 1.170839228445438e-02, 5.135178928747192e-02, 5.080479628175155e-02, 5.258062352140552e-02, 5.192831755249785e-02, 6.093843237915117e-02, 6.007243860426498e-02, 6.694453564644860e-02, 6.572670189522603e-02, 4.652988753054456e-02, 5.320216139316149e-02, 4.652988753054456e-02, 5.320216139316147e-02, 3.742690822542251e-02, 3.337368559484195e-02, 1.359738838536352e-01, 1.363289856211703e-01, 2.805531083854516e-02, 3.845667193990362e-02, 2.014731682557136e-02, 2.015775364533816e-02, 7.750925604156926e-02, 1.216675221603693e-01, 7.750925604156957e-02, 1.216675221603699e-01, 1.290750935149948e-12, 1.844401030851079e-12, 4.612843208309077e-12, 7.111728899921387e-12, 1.127995646984974e-14, 2.068673526043042e-14, 1.944320022116808e-02, 1.887402057635607e-02, 1.016208171938103e-12, 2.792113625172519e-14, 1.016208171938097e-12, 2.792113625172497e-14, 4.324313748082461e-02, 4.273812778651485e-02, 4.167391310102458e-02, 4.119480588732963e-02, 4.221050642341342e-02, 4.172066857988445e-02, 4.266646042658490e-02, 4.217690733980410e-02, 4.244503051014690e-02, 4.195297351132466e-02, 4.244503051014690e-02, 4.195297351132466e-02, 4.839059299010137e-02, 4.817859369648118e-02, 4.308762365254794e-02, 4.291635565674486e-02, 4.388520937143886e-02, 4.376244831974384e-02, 4.527710254162651e-02, 4.515086471162052e-02, 4.461724055274179e-02, 4.444243932011825e-02, 4.461724055274179e-02, 4.444243932011828e-02, 5.367542027115492e-02, 5.264989317246371e-02, 9.776876346949309e-02, 9.790333149022297e-02, 9.676560899280061e-02, 9.550957033743512e-02, 8.696311701831151e-02, 8.665226098421573e-02, 9.000919576888416e-02, 9.011263813950866e-02, 9.000919576888418e-02, 9.011263813950859e-02, 6.043874942126532e-02, 5.836255127892159e-02, 1.409309822246152e-03, 1.546553625440098e-03, 6.351174640835702e-03, 7.354341761315385e-03, 9.471605844789943e-02, 8.626452603470686e-02, 4.311086522354304e-02, 5.250223836696013e-02, 4.311086522354300e-02, 5.250223836696007e-02, 8.360157081357042e-08, 1.369262104958287e-07, 3.486373470938422e-17, 5.483059964127578e-17, 2.218172913455448e-16, 4.314573712217890e-16, 3.733732361357452e-02, 3.300607571433122e-02, 1.774383973173652e-13, 1.150910988161922e-14, 1.774383973173635e-13, 1.150910988161952e-14]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
