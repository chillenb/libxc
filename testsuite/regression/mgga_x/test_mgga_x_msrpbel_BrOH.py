
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_msrpbel_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_msrpbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.187272623118709e+01, -2.187276438998387e+01, -2.187300016940289e+01, -2.187237437324852e+01, -2.187274580219351e+01, -2.187274580219351e+01, -3.380472343452904e+00, -3.380473871633649e+00, -3.380745819636193e+00, -3.382101589150710e+00, -3.380481275753323e+00, -3.380481275753323e+00, -6.537533882776582e-01, -6.535782343286706e-01, -6.520094997125064e-01, -6.596764109485490e-01, -6.536910518405943e-01, -6.536910518405943e-01, -2.092891914863653e-01, -2.095627803417196e-01, -7.447513405023791e-01, -1.732572840580494e-01, -2.092468344076697e-01, -2.092468344076697e-01, -1.705040511768579e-02, -1.785950602918197e-02, -7.257760810502625e-02, -8.179636081577773e-03, -1.767339198969752e-02, -1.767339198969752e-02, -5.291010793201411e+00, -5.291127544325059e+00, -5.291027770232356e+00, -5.291118455947393e+00, -5.291063358805791e+00, -5.291063358805791e+00, -2.109271047892482e+00, -2.125375355794682e+00, -2.111410305389283e+00, -2.123844224895026e+00, -2.117747606586192e+00, -2.117747606586192e+00, -5.813682741444830e-01, -6.173405219240719e-01, -5.389667192593132e-01, -5.504471843395650e-01, -6.074967126848724e-01, -6.074967126848724e-01, -1.488642263286294e-01, -2.301975519697180e-01, -1.456549920523729e-01, -1.822193029375119e+00, -1.593672046669307e-01, -1.593672046669307e-01, -7.890788560303988e-03, -9.017882246212330e-03, -6.758948629840969e-03, -1.001316723086476e-01, -8.216688940537569e-03, -8.216688940537569e-03, -5.976569234985500e-01, -5.974986325858556e-01, -5.975559004146684e-01, -5.975976949951478e-01, -5.975761464838306e-01, -5.975761464838306e-01, -5.773480316009016e-01, -5.287574863658598e-01, -5.422272120912117e-01, -5.551049754810327e-01, -5.483218512516315e-01, -5.483218512516315e-01, -6.396987374626499e-01, -2.761069645176550e-01, -3.059663816295904e-01, -3.556941551951229e-01, -3.303306900974796e-01, -3.303306900974795e-01, -4.690628435688718e-01, -6.723092179610113e-02, -9.079212466517708e-02, -3.298547000558478e-01, -1.242224379142823e-01, -1.242224379142823e-01, -1.998294029699953e-02, -2.468940298752360e-03, -4.690087237165435e-03, -1.183341692035533e-01, -6.983098223408890e-03, -6.983098223408880e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_msrpbel_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_msrpbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.747382798163079e+01, -2.747392119708914e+01, -2.747441007416335e+01, -2.747288691669897e+01, -2.747387646906592e+01, -2.747387646906592e+01, -4.179433863684048e+00, -4.179620728406233e+00, -4.185508106389882e+00, -4.184597388570564e+00, -4.179498965062553e+00, -4.179498965062553e+00, -7.788208231414090e-01, -7.770003127679881e-01, -7.287842808942405e-01, -7.403806818018842e-01, -7.781681517168848e-01, -7.781681517168848e-01, -1.570782493161990e-01, -1.638314261395259e-01, -8.995643196654475e-01, -1.290401618196372e-01, -1.591848691113070e-01, -1.591848691113070e-01, -2.273387349024772e-02, -2.381267470557596e-02, -9.648559796032841e-02, -1.090618144210370e-02, -2.356452265293002e-02, -2.356452265293002e-02, -6.769847052534620e+00, -6.772111886976410e+00, -6.770099555806284e+00, -6.771859309044346e+00, -6.770980658663956e+00, -6.770980658663956e+00, -2.177076016378157e+00, -2.227472302457383e+00, -2.173133544912368e+00, -2.215613945934459e+00, -2.217393389546072e+00, -2.217393389546072e+00, -7.301979954393384e-01, -8.440200532179855e-01, -6.851705799175560e-01, -7.555351687855293e-01, -7.645166422803336e-01, -7.645166422803336e-01, -1.339797982045351e-01, -1.335561931965824e-01, -1.280216442614583e-01, -2.536347384596994e+00, -1.191224314793396e-01, -1.191224314793396e-01, -1.052105141373865e-02, -1.202384299494977e-02, -9.011931506454626e-03, -1.226501614987275e-01, -1.095558525405009e-02, -1.095558525405009e-02, -7.932073786375479e-01, -7.841717360519177e-01, -7.873981204218405e-01, -7.899002747924478e-01, -7.886476546021365e-01, -7.886476546021365e-01, -7.695482744448774e-01, -6.231280702973671e-01, -6.646158447537100e-01, -7.045832155141343e-01, -6.839851733701541e-01, -6.839851733701542e-01, -8.861540564989079e-01, -2.038226518182184e-01, -2.579096071855450e-01, -4.057084953638092e-01, -3.268794422151923e-01, -3.268794422151924e-01, -5.315992974566244e-01, -8.960544566117695e-02, -1.178887337092688e-01, -4.004059202488918e-01, -1.214687719487347e-01, -1.214687719487347e-01, -2.664392039599937e-02, -3.291920398336480e-03, -6.253449649553913e-03, -1.152391820396349e-01, -9.310797631211854e-03, -9.310797631211841e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_msrpbel_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_msrpbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.839375232746847e-09, -4.839296481130299e-09, -4.838472246040123e-09, -4.839734393459277e-09, -4.839338128267917e-09, -4.839338128267917e-09, -8.298350057062853e-06, -8.303842508296172e-06, -8.476697091580938e-06, -8.498571138677895e-06, -8.299141363861095e-06, -8.299141363861095e-06, -6.383229941921406e-03, -6.396139976541568e-03, -6.745794165803618e-03, -6.793134674658121e-03, -6.388278122243062e-03, -6.388278122243062e-03, -1.780672410647950e+00, -1.696920256787621e+00, -2.535838641173208e-03, -1.641283892632519e+00, -1.754188129356769e+00, -1.754188129356769e+00, -2.276894290760593e-38, -1.336317159506360e-34, -1.135875271632034e-01, -1.459510315789416e-215, -1.174217683395254e-34, -1.174217683395254e-34, -1.164310237283455e-06, -1.163563869145321e-06, -1.164018741979414e-06, -1.163451389869820e-06, -1.164216986825288e-06, -1.164216986825288e-06, -1.259969372744948e-04, -1.124045842062291e-04, -1.213014831589422e-04, -1.099109049905205e-04, -1.224952317296117e-04, -1.224952317296117e-04, -2.227675613042191e-02, -1.637221023820983e-02, -2.270259721557176e-02, -2.123520453522924e-02, -1.765769623995058e-02, -1.765769623995058e-02, -2.152931724289229e+00, -1.285403410131941e+00, -2.505844367146879e+00, -1.626065311596505e-04, -2.822329403411903e+00, -2.822329403411903e+00, -4.439481717070928e-225, -5.163557951046218e-171, -9.841516399942665e-180, -1.686596190342613e+00, -2.794948917937346e-169, -2.794948917937029e-169, -8.598680960853963e-03, -8.681005625421413e-03, -8.652141130163096e-03, -8.629214758571266e-03, -8.641640262898757e-03, -8.641640262898756e-03, -1.201813487293737e-02, -1.733263835136607e-02, -1.586755490766439e-02, -1.442077312739205e-02, -1.543632401708545e-02, -1.543632401708546e-02, -1.376918410723651e-02, -5.482246209656584e-01, -3.719242831911695e-01, -1.318403874815623e-01, -2.458839264590075e-01, -2.458839264590074e-01, -5.593528452136115e-02, -1.634563765830594e-02, -6.083052621984284e-01, -1.773942680372663e-01, -3.471766514223964e+00, -3.471766514223964e+00, -8.784667899839827e-32, 0.000000000000000e+00, 0.000000000000000e+00, -4.244054125647184e+00, -1.697407835846333e-194, -1.697407835843609e-194]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_msrpbel_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_msrpbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_msrpbel_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_msrpbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.298477691764731e-04, 1.298418761427810e-04, 1.297487413297942e-04, 1.298408912326649e-04, 1.298452931262069e-04, 1.298452931262069e-04, 1.435149418404998e-03, 1.438849057306465e-03, 1.556186380914509e-03, 1.573709762960045e-03, 1.435772813012906e-03, 1.435772813012906e-03, 8.863863253850017e-03, 8.833063664276268e-03, 8.200410464301344e-03, 9.388178669215357e-03, 8.854310519776878e-03, 8.854310519776878e-03, 1.126961769580459e-01, 1.105217471624783e-01, 1.646136935473910e-03, 4.292220742427732e-03, 1.118791594955062e-01, 1.118791594955062e-01, 0.000000000000000e+00, 0.000000000000000e+00, 3.677463792700662e-07, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 3.723555842795960e-05, 3.679323912709083e-05, 3.671644399485853e-05, 3.640127553437300e-05, 3.764603574629451e-05, 3.764603574629451e-05, 8.751669095549209e-03, 7.473557063394308e-03, 8.098293349391451e-03, 7.012160375026003e-03, 8.711027058047887e-03, 8.711027058047887e-03, 4.555355717825842e-02, 4.268968987046084e-02, 3.450252867820693e-02, 3.853248700815811e-02, 3.886820488609410e-02, 3.886820488609410e-02, 1.693990618836870e-03, 7.982218215904685e-02, 2.182681514943880e-03, 1.052020436656952e-02, 1.728179385559724e-02, 1.728179385559724e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 6.229631799843040e-06, 0.000000000000000e+00, 0.000000000000000e+00, 6.358676154414393e-03, 6.218488213104979e-03, 6.271129762011177e-03, 6.309264498254074e-03, 6.293371608024068e-03, 6.293371608024067e-03, 1.336492599806388e-02, 9.805188052192994e-03, 1.165089590587971e-02, 1.277656457502803e-02, 1.292388483501950e-02, 1.292388483501953e-02, 4.138163700184892e-02, 6.511535699661136e-02, 8.048507670302954e-02, 5.203646573359165e-02, 7.657814863459875e-02, 7.657814863459862e-02, 5.412458032582873e-02, 1.147039144481834e-07, 6.427236136298809e-06, 6.083349497947448e-02, 1.610491615123995e-03, 1.610491615123979e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.411608224325536e-03, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
