
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_gvt4_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gvt4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.200183096117695e+01, -2.200187708083551e+01, -2.200214279175598e+01, -2.200138715155532e+01, -2.200185477202768e+01, -2.200185477202768e+01, -3.469471917641207e+00, -3.469523337873796e+00, -3.471276924604819e+00, -3.472190966874551e+00, -3.469494207310547e+00, -3.469494207310547e+00, -6.019288453637498e-01, -6.013846464569517e-01, -5.937772903903679e-01, -6.131445703627826e-01, -6.017480181313456e-01, -6.017480181313456e-01, -2.154648422935487e-01, -2.152135388831239e-01, -4.777570935872779e-01, -1.495184466647258e-01, -2.152726590413541e-01, -2.152726590413541e-01, -8.490545549126154e-04, -9.700105922745439e-04, -2.973771518554071e-02, -4.846338134516417e-05, -9.612164105549393e-04, -9.612164105549387e-04, -5.345842359484722e+00, -5.346447793233921e+00, -5.345911266763975e+00, -5.346381745204650e+00, -5.346142737117716e+00, -5.346142737117716e+00, -2.107499579392545e+00, -2.121592931824434e+00, -2.109627650589458e+00, -2.120645156794567e+00, -2.114777408301717e+00, -2.114777408301717e+00, -5.916569254983171e-01, -6.385769895556137e-01, -5.553557043159099e-01, -5.764153630498442e-01, -6.156323729643155e-01, -6.156323729643155e-01, -1.242816308353724e-01, -2.442955482647022e-01, -1.237618556586141e-01, -1.920229355857477e+00, -1.558345952980441e-01, -1.558345952980441e-01, -6.163892413763939e-05, -7.930246846860574e-05, -7.100905647084286e-05, -4.844350129529235e-02, -6.080865473948352e-05, -6.080865473948340e-05, -6.117135390878071e-01, -6.089045501155407e-01, -6.098796238529611e-01, -6.106559142589492e-01, -6.102644260471501e-01, -6.102644260471501e-01, -5.915764419851021e-01, -5.274705418918322e-01, -5.432294313683755e-01, -5.601075924513452e-01, -5.511279209310088e-01, -5.511279209310088e-01, -6.668618841530104e-01, -2.863529232453332e-01, -3.111785718274893e-01, -3.616061531051455e-01, -3.333878302665532e-01, -3.333878302665532e-01, -4.715305932393450e-01, -2.440221632287918e-02, -4.661734078526764e-02, -3.372213553895920e-01, -1.007741702555764e-01, -1.007741702555764e-01, -7.409295187754081e-04, -1.228452107996286e-06, -1.778983790088814e-05, -9.512444534427077e-02, -4.315876687915427e-05, -4.315876687915403e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_gvt4_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gvt4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.827483253969205e+01, -2.827493573627906e+01, -2.827539262706981e+01, -2.827370244636252e+01, -2.827488699527651e+01, -2.827488699527651e+01, -4.622513616362741e+00, -4.622533385072700e+00, -4.623062198566019e+00, -4.619884924937742e+00, -4.622562686816821e+00, -4.622562686816821e+00, -8.752174091019812e-01, -8.720381965604429e-01, -7.743714735714952e-01, -7.756308389921744e-01, -8.740559526775262e-01, -8.740559526775262e-01, -1.442647500951601e-01, -1.518776329013200e-01, -1.351497931878082e+00, -4.390963276693232e-02, -1.465745084992212e-01, -1.465745084992212e-01, -2.537997814179947e-03, -2.882831193898282e-03, -6.252984536132526e-02, -8.426890102383878e-05, -2.863472446444935e-03, -2.863472446444933e-03, -6.969793554192620e+00, -6.972551855128683e+00, -6.970075534824563e+00, -6.972220424768054e+00, -6.971210083712021e+00, -6.971210083712021e+00, -2.173945578440980e+00, -2.203220059796337e+00, -2.145908741143576e+00, -2.169008293743137e+00, -2.229483592291399e+00, -2.229483592291399e+00, -7.669346614330478e-01, -8.613175484792513e-01, -7.307189917971586e-01, -7.884195158381874e-01, -8.005128182200995e-01, -8.005128182200995e-01, -1.012117117988966e-01, -1.129259364271260e-01, -9.568908333913557e-02, -2.647990819702408e+00, -9.102033126271482e-02, -9.102033126271482e-02, -1.612540031251596e-04, -1.769881474133203e-04, -1.990180241448596e-04, -4.799376165066876e-02, -1.034376482211978e-04, -1.034376482211972e-04, -8.155263958492456e-01, -8.089416116326508e-01, -8.114435054213618e-01, -8.132680411303863e-01, -8.123671820004467e-01, -8.123671820004467e-01, -7.899064337355710e-01, -6.249772994787191e-01, -6.834628620109520e-01, -7.302979564299837e-01, -7.076519436052282e-01, -7.076519436052283e-01, -9.058598977552040e-01, -1.655602031489041e-01, -2.494731956268463e-01, -4.269464006558623e-01, -3.357839114144102e-01, -3.357839114144103e-01, -5.600420428878626e-01, -5.780288732153934e-02, -8.268300844362744e-02, -4.256912925189590e-01, -1.039693893100972e-01, -1.039693893100971e-01, -1.336283646609409e-03, -3.769035894214733e-07, -5.157489697221493e-05, -9.514088074367108e-02, -6.726715261407309e-05, -6.726715261407268e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gvt4_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gvt4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.852987895176772e-09, -3.852892363001116e-09, -3.852479528250279e-09, -3.854040435424785e-09, -3.852937445266250e-09, -3.852937445266250e-09, -9.311372361521533e-06, -9.309903323741620e-06, -9.264846300799576e-06, -9.284303013653927e-06, -9.310755363997324e-06, -9.310755363997324e-06, -1.166288483837342e-02, -1.174613244893903e-02, -1.391855219907576e-02, -1.288814589440680e-02, -1.169237320194190e-02, -1.169237320194190e-02, -1.745036695279141e+00, -1.662246883303214e+00, -8.375674674009499e-03, -6.391077924621197e+00, -1.721606999424024e+00, -1.721606999424024e+00, 3.592255735432913e+00, 2.289604591526348e+00, -1.308718186596204e+01, -5.488074607373711e+01, 3.121690249784628e+00, 3.121690249784517e+00, -9.007234941337892e-07, -8.963181508180062e-07, -9.002596776512794e-07, -8.968353135862053e-07, -8.984805876266886e-07, -8.984805876266886e-07, -1.087409494173286e-04, -1.038837314638906e-04, -1.107543185611246e-04, -1.068575901124545e-04, -1.028668745471352e-04, -1.028668745471352e-04, -9.311300055384752e-03, -4.035605236723573e-03, -1.315394082707971e-02, -7.815492669684090e-03, -7.165827242666325e-03, -7.165827242666325e-03, -8.682348514967583e+00, -1.522896082426495e+00, -9.789125733306435e+00, -5.815656536010275e-05, -7.343007108069511e+00, -7.343007108069511e+00, -2.400341596002097e+01, -4.179550754558816e+01, -3.707541632905226e+01, -2.477596434273873e+01, -8.758000587529564e+01, -8.758000587529577e+01, -2.596798832021124e-03, -3.469711791545599e-03, -3.156665523272350e-03, -2.914681074453929e-03, -3.035741335628170e-03, -3.035741335628170e-03, -3.013793783124254e-03, -1.871713369080924e-02, -1.260380280008803e-02, -8.126688169686896e-03, -1.026162136243977e-02, -1.026162136243977e-02, -3.717724656133117e-03, -6.516380435043496e-01, -3.321662297560447e-01, -1.036796882375576e-01, -1.871309843589573e-01, -1.871309843589574e-01, -3.251570279122239e-02, -6.947492593699518e+00, -1.341236046925109e+01, -1.132058375588815e-01, -1.439648245311977e+01, -1.439648245311981e+01, -5.462862718581087e+01, -1.467827079530201e+02, -1.039451435673023e+01, -1.812932613828168e+01, -1.359999293766223e+02, -1.359999293766218e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gvt4_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gvt4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.701512969729815e-04, 2.701473797391823e-04, 2.701237399546425e-04, 2.701872197806648e-04, 2.701492928416543e-04, 2.701492928416543e-04, 4.353969074861393e-03, 4.353222244812759e-03, 4.329972090893057e-03, 4.328965232389255e-03, 4.353803342609965e-03, 4.353803342609965e-03, 3.884428680733223e-02, 3.891088875717930e-02, 4.004682081132135e-02, 3.761232603150474e-02, 3.886579258735869e-02, 3.886579258735869e-02, 8.564614669228265e-02, 8.469473387360972e-02, 4.994259741087803e-02, 1.607319536222882e-01, 8.551979840926530e-02, 8.551979840926530e-02, 1.555742097326383e-03, 1.790380047453487e-03, 3.986748149443493e-02, 1.264633816138216e-04, 1.801056404570338e-03, 1.801056404570339e-03, 9.270533370822573e-04, 9.244516034230004e-04, 9.267225479431217e-04, 9.247036352958924e-04, 9.258052028202896e-04, 9.258052028202896e-04, 5.867547378859340e-03, 5.622256488700246e-03, 5.863554520118740e-03, 5.665292082495161e-03, 5.704422215715125e-03, 5.704422215715125e-03, 1.771108846777084e-02, 1.366564447441389e-02, 2.349628341716570e-02, 2.018047316938647e-02, 1.488307930049820e-02, 1.488307930049820e-02, 1.240127355283385e-01, 9.006551308141535e-02, 1.313237794938594e-01, 6.133159441796685e-03, 1.379338922318959e-01, 1.379338922318959e-01, 1.210784600980610e-04, 1.811404809048816e-04, 2.167296665462952e-04, 8.780436701500391e-02, 2.009453849778113e-04, 2.009453849778112e-04, 6.507058216561127e-03, 7.212132030079023e-03, 6.959766545360357e-03, 6.764205959395506e-03, 6.862455426120191e-03, 6.862455426120191e-03, 7.621867735801323e-03, 1.587908218087911e-02, 1.310057147672190e-02, 1.078420166177862e-02, 1.199581458214296e-02, 1.199581458214297e-02, 1.500024436515575e-02, 6.512562516494352e-02, 5.346037982796053e-02, 4.013409811000232e-02, 4.426889723601543e-02, 4.426889723601544e-02, 2.480643434360349e-02, 2.794271848581045e-02, 5.934025540650611e-02, 3.985653612418079e-02, 1.263015849656809e-01, 1.263015849656812e-01, 1.919677663883365e-03, 6.214302646805458e-06, 3.743250220683181e-05, 1.347395917212300e-01, 1.797870310708337e-04, 1.797870310708323e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
