
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_gvt4_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gvt4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.151624725590455e+01, -2.151631220472684e+01, -2.151663923794227e+01, -2.151557622436065e+01, -2.151628117925654e+01, -2.151628117925654e+01, -3.263789458167194e+00, -3.263909897347332e+00, -3.267630253053257e+00, -3.266454964492142e+00, -3.263838420357223e+00, -3.757439557685416e+00, -4.665455820101254e-01, -8.008958189337561e-01, -8.025001734336291e-01, -7.982868930436502e-01, -8.008550297808221e-01, -8.008550297808221e-01, -2.264678631558207e-01, -2.272537735533797e-01, -3.040120670150294e-01, -2.027245894447073e-01, -2.267335986122010e-01, -2.267335986122010e-01, -8.480973475505608e-04, -9.688046678140357e-04, -3.078206800687152e-02, -5.687902752203089e-05, -9.601082686961133e-04, -9.601082686961126e-04, -5.346392644140503e+00, -5.346989333640670e+00, -5.346453650031655e+00, -5.276252010278169e+00, -5.346697935444508e+00, -5.346697935444508e+00, -1.762209597058935e+00, -1.790459159881449e+00, -1.749888865476511e+00, -1.772603346674710e+00, -1.796871170861366e+00, -2.163554319899481e+00, -6.096632346967762e-01, -6.506500150964457e-01, -5.865210815839365e-01, -5.996797672004480e-01, -6.283687715888475e-01, -5.984243891168155e-01, 5.445891159045961e-01, -2.559220695043976e-01, 4.995418958343688e-01, -1.997996650516748e+00, -1.726544961823966e-01, -1.726544961823966e-01, 4.076853312692547e-03, -8.552548937226827e-05, -7.135439981473961e-05, 7.884738382962054e-01, 4.637896759001822e-03, -7.183724933566949e-05, -6.123427668742029e-01, -6.096959016797119e-01, -6.084244578666269e-01, -6.113463175770479e-01, -6.109778877718520e-01, -6.109778877718520e-01, -5.928781864453572e-01, -5.300171390286426e-01, -5.458120644754960e-01, -5.623863196565665e-01, -5.537269974964922e-01, -5.376893519090165e-01, -6.848980761777735e-01, -1.151365861982754e-01, -3.259761174913374e-01, -3.179783895004922e-01, -3.506154835737832e-01, -3.506154835737832e-01, -4.294420867105000e-01, -2.469409708151398e-02, -4.953361298677111e-02, -3.570622194713249e-01, 5.328567433194231e-01, -1.107668451226102e-01, -8.561352119629680e-04, -1.853310441189506e-06, -1.778677428604212e-05, -1.055820781370942e-01, -5.231303396899695e-05, -5.231303396899669e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_gvt4_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gvt4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.947437532902375e+01, -2.947442866863037e+01, -2.947472100879842e+01, -2.947384462233340e+01, -2.947440302801161e+01, -2.947440302801161e+01, -5.172900789926282e+00, -5.172729845848901e+00, -5.167803202877598e+00, -5.170117063538409e+00, -5.172877936445452e+00, -3.953009122154361e+00, -1.239293587388465e+00, -5.410129281385644e-01, -4.856302397450052e-01, -5.071644513971978e-01, -5.424838315715921e-01, -5.424838315715921e-01, -1.355421754556432e-01, -1.409538172168983e-01, -1.848306063976326e+00, -1.478799878974973e-01, -1.370866829523558e-01, -1.370866829523558e-01, -2.569740165119984e-03, -2.929692133702709e-03, -7.579020756421280e-02, -1.755282369815263e-04, -2.903292952561241e-03, -2.903292952561237e-03, -6.968414429334642e+00, -6.971195524874650e+00, -6.968716305448317e+00, -7.137656639790910e+00, -6.969819099002154e+00, -6.969819099002154e+00, -3.024091751005940e+00, -3.020134008240666e+00, -3.027116365882510e+00, -3.022980828735404e+00, -3.018133109325820e+00, -2.132030793442040e+00, -7.221911081613575e-01, -8.309351786467448e-01, -6.555823343491293e-01, -7.292342723179789e-01, -7.683360387483538e-01, -8.444786373419706e-01, -4.759497615440727e-01, -1.195788436160454e-01, -4.813077685654465e-01, -2.449894598475394e+00, -1.411225451876950e-01, -1.411225451876950e-01, 1.206087606110978e-02, -2.636511634525842e-04, -2.198665457662783e-04, 3.627932044497371e-01, 1.370246273646876e-02, -2.215230310843961e-04, -8.143383534936681e-01, -8.071828189488415e-01, -8.142287735190277e-01, -8.118616790055054e-01, -8.108799917411408e-01, -8.108799917411408e-01, -7.873525595105177e-01, -6.189061977712998e-01, -6.769501510328421e-01, -7.245187568259822e-01, -7.010322840563874e-01, -7.411784820534857e-01, -8.600384914143138e-01, -4.969722979899173e-01, -2.311138357974748e-01, -5.396801076222003e-01, -3.053709982648257e-01, -3.053709982648256e-01, -6.685378790536056e-01, -6.321103385850171e-02, -1.107082096666335e-01, -3.801555390942486e-01, -3.411559717818674e-01, -1.582568519592924e-01, -2.601903964933471e-03, -5.734130284210924e-06, -5.496243959829295e-05, -1.511717831624596e-01, -1.614012673604559e-04, -1.614012673604551e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gvt4_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gvt4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.633000439321669e-09, -2.632935401368348e-09, -2.632630101045529e-09, -2.633691440173883e-09, -2.632966319337519e-09, -2.632966319337519e-09, -8.111103732889067e-06, -8.109406324827598e-06, -8.057386339402614e-06, -8.074903756547915e-06, -8.110478186893159e-06, -9.904047029699386e-06, -1.280283027755789e-02, -9.129558295011183e-03, -1.019016800245063e-02, -9.885072343413457e-03, -9.103592359058140e-03, -9.103592359058140e-03, -1.625411830279884e+00, -1.543973915703863e+00, -9.539347193113494e-03, -2.921094479416919e+00, -1.600658390242124e+00, -1.600658390242124e+00, 7.490581797012874e+00, 7.246363839670011e+00, -2.565744737394428e+00, 3.290826378980004e+00, 7.575682707477303e+00, 7.575682707477195e+00, -9.023617168771791e-07, -8.979407859567659e-07, -9.018755030992245e-07, -6.160360775917659e-07, -9.001388399032924e-07, -9.001388399032924e-07, -9.857761756178145e-05, -9.235854893145645e-05, -1.013717261834880e-04, -9.625970349207095e-05, -9.097611316193481e-05, -1.025660812678476e-04, -1.025554833616555e-02, -5.207059234219149e-03, -1.440335475519854e-02, -9.819401285843387e-03, -7.934092690825291e-03, -5.457247459415881e-03, -2.021902192896964e+02, -1.373998941305798e+00, -2.053420477685070e+02, -7.654767463694942e-05, -4.871838411641168e+00, -4.871838411641168e+00, -4.684069443467906e+04, 4.105590385008919e+00, 1.605716929274852e+01, -1.762286519924211e+03, -4.763069263859850e+04, 5.075808274480250e+00, -2.835302660518463e-03, -3.688449274140271e-03, -2.627550944291979e-03, -3.145966784700964e-03, -3.264403048125922e-03, -3.264403048125922e-03, -3.552224140710283e-03, -1.890384261951759e-02, -1.292828764077245e-02, -8.561749973801160e-03, -1.066367994188747e-02, -7.164732476802728e-03, -4.830055798779387e-03, -1.198965952303295e+00, -3.151092521606992e-01, -9.292080317915333e-02, -1.813594478512412e-01, -1.813594478512413e-01, -2.656987262003589e-02, -1.716586422509976e+00, -3.297247281525031e+00, -1.182835227004744e-01, -5.092186890864864e+02, -6.980935862523915e+00, 3.038791614220211e+00, 4.722854228880452e+00, 9.158572198120762e+00, -8.376447412909670e+00, 7.176150207756459e+00, 7.176150207756448e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gvt4_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gvt4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([4.608667527949691e-04, 4.608574469680253e-04, 4.608158670578078e-04, 4.609674182909749e-04, 4.608618565801406e-04, 4.608618565801406e-04, 6.182165080238084e-03, 6.181068371115536e-03, 6.147931322460115e-03, 6.160254148298619e-03, 6.181831221932404e-03, 2.618372597845053e-03, 5.769735308738623e-02, 1.938314718151153e-02, 2.089898286252815e-02, 2.031711910464900e-02, 1.934489604173868e-02, 1.934489604173868e-02, 7.461348835702676e-02, 7.256631500009077e-02, 6.276927343176755e-02, 9.843534429756132e-02, 7.401397050514620e-02, 7.401397050514620e-02, 1.487993485686016e-03, 1.692479997608033e-03, 3.017164872125112e-02, 5.965831301084783e-05, 1.715351985424590e-03, 1.715351985424589e-03, 9.236007537590716e-04, 9.210385780018636e-04, 9.233179044982983e-04, 1.488603048504173e-03, 9.223138574598850e-04, 9.223138574598850e-04, 1.295202017133223e-02, 1.247531469145443e-02, 1.316519238701955e-02, 1.277888776789042e-02, 1.236040081760758e-02, 5.005043437305626e-03, 1.260581944857412e-02, 8.804132204931715e-03, 1.503256616702448e-02, 1.183087223490101e-02, 1.107891742553867e-02, 2.212941426888390e-02, 7.199871261092557e-01, 8.112552713580434e-02, 7.445740434199226e-01, 3.449674105118482e-03, 1.096475523051211e-01, 1.096475523051211e-01, -5.695962152886608e-03, 1.007511597596433e-04, 1.666281061937482e-04, 4.225600984487239e-01, -6.528465463708194e-03, 9.394269721931018e-05, 5.898001035148217e-03, 6.624601948249623e-03, 8.334683391843482e-03, 6.162899575877421e-03, 6.263806152422742e-03, 6.263806152422742e-03, 6.351330705482217e-03, 1.506314695928956e-02, 1.208944265284838e-02, 9.633131779516899e-03, 1.085332671154751e-02, 1.998507534952530e-02, 9.132555755183793e-03, 2.014156682435860e-01, 4.592941772806447e-02, 7.080954486839783e-02, 3.565240536717834e-02, 3.565240536717834e-02, 4.520726161160981e-02, 2.369453961282625e-02, 4.271369844031791e-02, 2.701645289559229e-02, 8.236830743836404e-01, 9.514464447856948e-02, 9.394725409401359e-04, 2.297979615649881e-06, 3.091125184127842e-05, 9.942479194148525e-02, 8.112033417983071e-05, 8.112033417983026e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
