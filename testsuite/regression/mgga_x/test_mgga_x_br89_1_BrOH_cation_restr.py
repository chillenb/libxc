
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_br89_1_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89_1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.880871247769119e+01, -1.880874762749853e+01, -1.880897538636158e+01, -1.880845151705394e+01, -1.880871586549657e+01, -1.880871586549657e+01, -3.542720100044556e+00, -3.542665283225139e+00, -3.541458656578662e+00, -3.544112117446552e+00, -3.542723934059985e+00, -3.542723934059985e+00, -7.460811551733901e-01, -7.464465761790902e-01, -7.568861847570465e-01, -7.593985738368041e-01, -7.573279839291628e-01, -7.573279839291628e-01, -2.435276939906046e-01, -2.437121684048326e-01, -8.651229439536202e-01, -2.207886768041786e-01, -2.250678577626067e-01, -2.250678577626110e-01, -7.930660503832529e-02, -7.947916309568864e-02, -1.347583428312973e-01, -7.231292133357402e-02, -7.310322900972727e-02, -7.310322900972722e-02, -8.656991331805040e+00, -7.005453554260851e+00, -3.816957387945950e+00, -1.036510618498884e+01, -4.143976836236413e+00, -5.952484262503494e+00, -1.430847204698367e+00, -2.629653990035384e+00, -2.332565390235284e+00, -2.339972335697164e+00, -2.338007848180711e+00, -2.128302089767335e+00, -1.223657259019300e+00, -9.739065532271510e-01, -1.116571615463535e+00, -5.894044480864791e-01, -6.516685833974514e-01, -6.927213030945035e-01, -6.688996183787212e-02, -4.248163222938269e-01, -6.170242753707367e-02, -2.025556979075641e+00, -1.828036192295694e-01, -1.613816301330401e-01, -1.437667115939600e-01, -3.067378968029898e+00, -1.900915854947047e-03, -4.153577078015571e-02, -8.407970953759600e-02, -2.290014591283456e-03, -3.027408242858112e+01, -4.281161594594187e-01, -4.289837490501385e-01, -4.590348370195545e+00, -4.293463657336661e-01, -8.944426719592418e+01, -4.189129474303294e-01, -5.477996052535729e-01, -9.735041475391126e-01, -4.221233504570288e-01, -6.205098930426647e-01, -1.262454961602273e+00, -1.405000956457667e+00, -1.601808207162204e-01, -1.923357848026296e-01, -2.561164486135469e-01, -4.438004504123623e-01, -4.037172099457838e-01, -5.152102845621557e-01, -2.449071061764567e-02, -1.553669617553320e-01, -3.702544079896589e-01, -5.285554072479184e-02, -1.472026411988815e-01, -6.214304619028532e-03, -6.645242495281326e-04, -1.394865446993362e-03, -5.063008756016115e-02, -2.118981225779384e-03, -2.118980408828164e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_br89_1_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89_1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.806061591190233e+01, -2.806069956559635e+01, -2.806111884193805e+01, -2.805987385027426e+01, -2.806051951073514e+01, -2.806051951073514e+01, -4.531206652790659e+00, -4.531291456555229e+00, -4.533370755331108e+00, -4.530643227258226e+00, -4.531420876170928e+00, -4.531420876170928e+00, -8.489624151494036e-01, -8.476716509644484e-01, -8.190741049238732e-01, -8.246239640545715e-01, -8.233863802671557e-01, -8.233863802671557e-01, -2.206939744811290e-01, -2.233147990589545e-01, -9.971916409186516e-01, -1.772193374921441e-01, -1.906640851424228e-01, -1.906640851424125e-01, -3.459382389225966e-02, -3.502314902671511e-02, -7.473746529929087e-02, -2.962709640412397e-02, -3.143352736107569e-02, -3.143352736107588e-02, -8.344283695557788e+00, -7.450353705700413e+00, -5.113164711213511e+00, -9.369513525634222e+00, -6.022765794968192e+00, -7.014413931708526e+00, -1.910373763790579e+00, -2.685800209838935e+00, -2.465422888059002e+00, -2.481090602422273e+00, -2.501701569041512e+00, -2.372798741504195e+00, -1.088053474253129e+00, -9.771587964285515e-01, -9.962307659127789e-01, -7.648028240281179e-01, -7.871704320127880e-01, -7.985562143398556e-01, -8.949541520475841e-02, -3.473331807208410e-01, -8.230857544219154e-02, -2.612606761322271e+00, -1.343216127518881e-01, -1.071997639746662e-01, -8.537407012378410e-02, -1.802728489585870e+00, -2.534554484163896e-03, -5.545584801260708e-02, -4.725449488449225e-02, -3.053353387672721e-03, -1.918125773137769e+01, -5.708242777900701e-01, -5.719784903931857e-01, -3.266712581507074e+00, -5.724704286673635e-01, -5.466707702284552e+01, -5.585508727667582e-01, -6.248417379926580e-01, -8.916294740211652e-01, -6.057789758611900e-01, -7.076202779674616e-01, -1.080804044295634e+00, -1.250649985446435e+00, -2.137849426610877e-01, -2.566466405933250e-01, -3.451054890057383e-01, -4.317383833445789e-01, -4.048959580470121e-01, -5.791004607861880e-01, -3.267593211859503e-02, -9.394478584955696e-02, -4.301783595825210e-01, -7.052740336428284e-02, -9.341275452391826e-02, -8.285769871324955e-03, -8.860327389998424e-04, -1.859820916246117e-03, -6.684681141984042e-02, -2.825311156193344e-03, -2.825308736448733e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_br89_1_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89_1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.783987315734620e-09, -5.783872758339494e-09, -5.783503463506985e-09, -5.785206706097426e-09, -5.784294323509272e-09, -5.784294323509272e-09, -1.295070840075215e-05, -1.295111894666801e-05, -1.295950871317531e-05, -1.293601640023009e-05, -1.295008430883240e-05, -1.295008430883240e-05, -6.881676780113424e-03, -6.868235371186477e-03, -6.511662608582773e-03, -6.421821946809134e-03, -6.491622301606176e-03, -6.491622301606176e-03, -6.918846602606392e-01, -6.791482109525524e-01, -3.806435264241723e-03, -1.302499767922409e+00, -1.048001821443645e+00, -1.048001821443800e+00, -7.657711557177704e+03, -6.710415772185307e+03, -4.816413985302538e+01, -3.547859858202162e+04, -1.945002080174214e+04, -1.945002080174208e+04, -5.427726971575576e-07, -9.652048900153377e-07, -6.309172030898869e-10, -3.567118332840419e-07, -3.493528397493573e-07, -1.699591828025327e-06, -2.601616900754286e-09, -4.823671999394663e-05, -7.273579027194089e-05, -7.174388137768603e-05, -7.185307408503406e-05, -1.037934928146149e-04, -1.998866676441822e-03, -2.998680291882824e-03, -2.810447263159484e-03, -1.741468192124880e-02, -1.181982417560865e-02, -9.282345069754996e-03, -5.040607987308584e-03, -1.871604930940013e-01, -9.383460575640653e-05, -1.256522157665503e-04, -2.842150420687580e+00, -3.902519033594275e+00, -2.709878396784823e+04, -2.888212981222793e+02, -8.690129978842922e-09, -4.840643068679122e-03, -3.761686330514387e+04, -8.271513385531363e-06, -1.235074536785788e-05, -4.016328920583298e-12, -1.334889226037376e-14, -1.870189530062311e-04, -3.919572049980884e-11, -3.001234542559776e-06, -4.677496822736548e-14, -2.367837416103750e-02, -4.177750118011784e-03, -2.034289063021047e-03, -1.445418647869572e-02, -2.298280832445472e-03, -1.167429782663228e-03, -8.873225407110833e-06, -2.620892803403635e-06, -1.702412318656390e-04, -6.600958773535456e-02, -8.691155771573654e-02, -3.027320066765327e-02, -1.323353949892490e-02, -2.075171760710392e+01, -1.134553785583442e-01, -4.676934887099358e-04, -9.128055672054824e+00, -5.462515728082171e-05, -7.242038190728412e-03, -4.663840791478043e-05, -6.522928685086172e-01, -3.076188448151658e-04, -8.648389576361833e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_br89_1_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89_1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [-2.236460855330867e-04, -2.236435271370104e-04, -2.236381433646856e-04, -2.236761481166454e-04, -2.236553838950664e-04, -2.236553838950664e-04, -2.161024930095951e-03, -2.161107429548522e-03, -2.162990055105635e-03, -2.159461311149075e-03, -2.161093845168160e-03, -2.161093845168160e-03, -8.239973271863243e-03, -8.196707605611111e-03, -7.168267537129801e-03, -7.246872558778474e-03, -7.287233224515041e-03, -7.287233224515041e-03, -1.426232672240406e-02, -1.464554114202705e-02, -7.226066746862339e-03, -1.174815151385458e-02, -1.338444478752280e-02, -1.338444478752477e-02, -6.658989017484803e-03, -6.804187995276537e-03, -8.201325828432256e-03, -5.942952198178439e-03, -6.464317714169814e-03, -6.464317714169794e-03, -3.039729863676292e-04, -5.408485638525684e-04, -3.533468948645436e-07, -1.998745764369762e-04, -1.957050487478406e-04, -9.520996073590354e-04, -7.737646808276561e-08, -1.466086782981730e-03, -2.129100493593022e-03, -2.140927854868076e-03, -2.179428378252671e-03, -3.148236684354371e-03, -1.601947098868002e-03, -3.081104563055702e-03, -1.784392885944744e-03, -1.241988806341781e-02, -9.938325386602340e-03, -7.804766321678281e-03, -1.521553026638467e-05, -3.875680403929427e-03, -2.242691431739189e-07, -3.526794835904154e-03, -1.386556547532587e-02, -1.903862398877407e-02, -2.084998538497377e-03, -4.519945618084382e-05, -6.080160597344004e-16, -3.520018575868203e-06, -4.601476721622297e-03, -1.011811536808694e-12, -1.004311242927447e-05, -3.210031189917145e-12, -1.073414764433199e-14, -1.511403268008902e-04, -3.159704425138584e-11, -2.419400369221470e-06, -3.502550786399465e-14, -1.121590687973487e-02, -2.272290251706211e-03, -1.261449409212771e-03, -8.388481147712587e-03, -1.333806331026227e-03, -1.382130232648655e-03, -3.705759761731207e-07, -1.895909424923614e-07, -2.837948254512462e-05, -7.237121877402552e-03, -9.528760250184173e-03, -1.118951249417981e-02, -1.975808812385357e-06, -7.851174840204806e-03, -1.694401111258966e-02, -7.021239257059738e-07, -1.370347553951677e-02, -1.335262167957263e-10, -2.164676025576236e-11, -1.289260246432282e-12, -8.108699088194911e-04, -2.981215012769505e-11, -8.381381465235572e-12]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_br89_1_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89_1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [8.945843421323458e-04, 8.945741085480415e-04, 8.945525734587412e-04, 8.947045924665817e-04, 8.946215355802656e-04, 8.946215355802656e-04, 8.644099720383805e-03, 8.644429718194090e-03, 8.651960220422522e-03, 8.637845244596300e-03, 8.644375380672639e-03, 8.644375380672639e-03, 3.295989308745297e-02, 3.278683042244444e-02, 2.867307014851920e-02, 2.898749023511389e-02, 2.914893289806016e-02, 2.914893289806016e-02, 5.704930688961624e-02, 5.858216456810820e-02, 2.890426698744936e-02, 4.699260605541833e-02, 5.353777915009121e-02, 5.353777915009909e-02, 2.663595606993921e-02, 2.721675198110615e-02, 3.280530331372902e-02, 2.377180879271376e-02, 2.585727085667926e-02, 2.585727085667918e-02, 1.215891945470517e-03, 2.163394255410274e-03, 1.413387579458234e-06, 7.994983057479046e-04, 7.828201949913606e-04, 3.808398429436140e-03, 3.095058723311128e-07, 5.864347131926919e-03, 8.516401974372090e-03, 8.563711419472302e-03, 8.717713513010684e-03, 1.259294673741748e-02, 6.407788395472009e-03, 1.232441825222281e-02, 7.137571543778976e-03, 4.967955225367120e-02, 3.975330154640936e-02, 3.121906528671312e-02, 6.086212106553869e-05, 1.550272161571771e-02, 8.970765726956758e-07, 1.410717934361662e-02, 5.546226190130350e-02, 7.615449595509627e-02, 8.339994153989510e-03, 1.807978247233753e-04, 2.432064114652523e-15, 1.408007430347540e-05, 1.840590688648919e-02, 4.047246147234776e-12, 4.017244971709790e-05, 1.284012475966858e-11, 4.293659057732796e-14, 6.045613072035609e-04, 1.263881770055433e-10, 9.677601476885881e-06, 1.401020314163370e-13, 4.486362751893945e-02, 9.089161006824845e-03, 5.045797636851083e-03, 3.355392459085035e-02, 5.335225324104909e-03, 5.528520930594620e-03, 1.482303904692483e-06, 7.583637699691948e-07, 1.135179301804985e-04, 2.894848750961021e-02, 3.811504100073669e-02, 4.475804997671922e-02, 7.903235249541427e-06, 3.140469936081922e-02, 6.777604445035863e-02, 2.808495702824562e-06, 5.481390215806706e-02, 5.341048671829052e-10, 8.658704102304944e-11, 5.157040985729126e-12, 3.243479635277964e-03, 1.192486005107802e-10, 3.352552586094229e-11]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
