
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_1_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.294681429025210e+01, -2.294686608163648e+01, -2.294719813472126e+01, -2.294642894963132e+01, -2.294681746411541e+01, -2.294681746411541e+01, -3.468664298035337e+00, -3.468703192379623e+00, -3.470001584660881e+00, -3.471808703542427e+00, -3.470412593561818e+00, -3.470412593561818e+00, -6.555772777842379e-01, -6.552440766206914e-01, -6.479262942413874e-01, -6.557634584183423e-01, -6.541894219058482e-01, -6.541894219058482e-01, -1.905843725922680e-01, -1.932370365126040e-01, -7.500399944904774e-01, -1.404717483772914e-01, -1.807465386654109e-01, -1.807465386654108e-01, -6.461263917535256e-03, -6.802622407210275e-03, -3.740135107567198e-02, -3.711058333387311e-03, -5.191155100107487e-03, -5.191155100107486e-03, -5.577250988395206e+00, -5.577382942787083e+00, -5.577303244151735e+00, -5.577417919708439e+00, -5.577293999726865e+00, -5.577293999726865e+00, -2.135279113399458e+00, -2.156807872864944e+00, -2.132191249769972e+00, -2.151773570996063e+00, -2.148602508575033e+00, -2.148602508575033e+00, -6.084740830159159e-01, -6.439609893999814e-01, -5.493265861197831e-01, -5.502776861329769e-01, -6.190583618780613e-01, -6.190583618780614e-01, -9.746932952864665e-02, -1.889224891522734e-01, -9.021088893162044e-02, -1.871195323949047e+00, -1.154231635702785e-01, -1.154231635702785e-01, -2.835023686751346e-03, -3.610238869382172e-03, -2.776594693303663e-03, -6.052388595719761e-02, -3.486606160118195e-03, -3.486606160118196e-03, -6.159353066871316e-01, -6.164404660170850e-01, -6.162745190562872e-01, -6.161216184743499e-01, -6.161964684135059e-01, -6.161964684135059e-01, -5.943682081220518e-01, -5.404042352980807e-01, -5.573621239262758e-01, -5.721767010690924e-01, -5.643466167864651e-01, -5.643466167864651e-01, -6.683237364126817e-01, -2.411622425671063e-01, -2.879116297177194e-01, -3.635311175487427e-01, -3.265105768145997e-01, -3.265105768145997e-01, -4.835197238653347e-01, -3.582256972032347e-02, -4.873353102420760e-02, -3.488095494514694e-01, -7.743048698072622e-02, -7.743048698072622e-02, -9.025441375960595e-03, -9.468379607370999e-04, -2.042880796458479e-03, -7.280280286140905e-02, -3.202809460560078e-03, -3.202809460560076e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_1_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.762396182394619e+01, -2.762375593852026e+01, -2.762410593818733e+01, -2.762386062275629e+01, -2.762448626419553e+01, -2.762442822390250e+01, -2.762285912580424e+01, -2.762235408732809e+01, -2.762405118292504e+01, -2.762312389918394e+01, -2.762405118292504e+01, -2.762312389918394e+01, -4.387980803009194e+00, -4.387949155539615e+00, -4.388097717326651e+00, -4.388032645469494e+00, -4.390478148048006e+00, -4.390982832123921e+00, -4.389456461059559e+00, -4.389635287631937e+00, -4.387005343620181e+00, -4.391844731932268e+00, -4.387005343620181e+00, -4.391844731932268e+00, -8.009360446252964e-01, -8.039397273522029e-01, -7.998639977221712e-01, -8.033747383838499e-01, -7.864091271252563e-01, -7.836814912399136e-01, -7.931377424726624e-01, -7.946233287805763e-01, -8.086918739587550e-01, -7.813288592795657e-01, -8.086918739587550e-01, -7.813288592795657e-01, -2.250080377728753e-01, -2.340583670708521e-01, -2.266223492368763e-01, -2.368250130641758e-01, -9.074309604154284e-01, -9.286657956241280e-01, -1.746421384542572e-01, -1.784951447806234e-01, -2.341303653236215e-01, -1.283277009830293e-01, -2.341303653236215e-01, -1.283277009830293e-01, -8.105065712839017e-03, -8.614428256610338e-03, -8.491031856589096e-03, -9.098485852819990e-03, -4.702793118639355e-02, -4.968554635054744e-02, -4.856786038005377e-03, -4.778263049397531e-03, -7.225112971890553e-03, -4.090581646477603e-03, -7.225112971890548e-03, -4.090581646477606e-03, -6.846915038936469e+00, -6.845108193055673e+00, -6.851120527779218e+00, -6.849171224572884e+00, -6.847123375847999e+00, -6.845229623170973e+00, -6.850732721889408e+00, -6.848921460179247e+00, -6.849087894385154e+00, -6.847151703778414e+00, -6.849087894385154e+00, -6.847151703778414e+00, -2.436982564054828e+00, -2.436749321589720e+00, -2.452875010192769e+00, -2.452084457741820e+00, -2.425795860664135e+00, -2.428603929608603e+00, -2.439065689113967e+00, -2.442132613178294e+00, -2.455416906293228e+00, -2.446061389259870e+00, -2.455416906293228e+00, -2.446061389259870e+00, -7.573737470402940e-01, -7.555214611288490e-01, -8.703388831057330e-01, -8.715128755666589e-01, -6.736158055952025e-01, -7.063399836520738e-01, -7.390056379830373e-01, -7.688338473586523e-01, -7.939421605895769e-01, -7.524011627522146e-01, -7.939421605895769e-01, -7.524011627522148e-01, -1.243771852621375e-01, -1.254143446460967e-01, -2.338598345518479e-01, -2.348399492773858e-01, -1.125015145103523e-01, -1.186133855021421e-01, -2.603042652320194e+00, -2.602025601720161e+00, -1.419863239519308e-01, -1.500623804116379e-01, -1.419863239519308e-01, -1.500623804116379e-01, -3.618035464939695e-03, -3.762025784959415e-03, -4.659315426076313e-03, -4.727413344758929e-03, -3.494023897017050e-03, -3.699636017038834e-03, -7.778889592832870e-02, -7.851402775274635e-02, -3.535272180211864e-03, -4.914810173461687e-03, -3.535272180211861e-03, -4.914810173461683e-03, -8.150375247184134e-01, -8.183906405681777e-01, -7.965462831048481e-01, -8.000340126974570e-01, -8.029469052695197e-01, -8.064301117884526e-01, -8.083668345714461e-01, -8.117321906070394e-01, -8.056505689793769e-01, -8.090727795697148e-01, -8.056505689793769e-01, -8.090727795697148e-01, -7.984252994023797e-01, -8.010264393042135e-01, -6.093432079292641e-01, -6.121652738183416e-01, -6.506590488348981e-01, -6.542121594875294e-01, -7.050465174968876e-01, -7.078564370952654e-01, -6.765200053398763e-01, -6.792825254384163e-01, -6.765200053398763e-01, -6.792825254384164e-01, -9.078921835563326e-01, -9.110664010058628e-01, -2.915779684713795e-01, -2.930046278258907e-01, -3.385214666826991e-01, -3.411519404978151e-01, -4.303755714381760e-01, -4.327515487319930e-01, -3.793390040448169e-01, -3.790580686837341e-01, -3.793390040448167e-01, -3.790580686837340e-01, -5.633749619150337e-01, -5.675346113383206e-01, -4.626358274479309e-02, -4.656170949225372e-02, -6.198919698191287e-02, -6.406521636445096e-02, -4.166482475952174e-01, -4.248817493269675e-01, -9.659715660925788e-02, -1.018631407302090e-01, -9.659715660925786e-02, -1.018631407302089e-01, -1.151809663995601e-02, -1.193091817531348e-02, -1.242355756873659e-03, -1.241962656056453e-03, -2.562610832770105e-03, -2.725352130191776e-03, -9.267833545489426e-02, -9.452312429680425e-02, -3.354237610316811e-03, -4.504702902573117e-03, -3.354237610316807e-03, -4.504702902573111e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_1_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.920124995376237e-08, 0.000000000000000e+00, -2.920281313412287e-08, -2.920104906036209e-08, 0.000000000000000e+00, -2.920266688908664e-08, -2.920029577856216e-08, 0.000000000000000e+00, -2.920161806254846e-08, -2.920258099762125e-08, 0.000000000000000e+00, -2.920452677433231e-08, -2.920114108702432e-08, 0.000000000000000e+00, -2.920328175478603e-08, -2.920114108702432e-08, 0.000000000000000e+00, -2.920328175478603e-08, -2.726166084671335e-05, 0.000000000000000e+00, -2.725808148345279e-05, -2.726705697365014e-05, 0.000000000000000e+00, -2.726164860473031e-05, -2.737193432071529e-05, 0.000000000000000e+00, -2.738942868697789e-05, -2.732640778411801e-05, 0.000000000000000e+00, -2.732463117809830e-05, -2.726714942269722e-05, 0.000000000000000e+00, -2.741706077860799e-05, -2.726714942269722e-05, 0.000000000000000e+00, -2.741706077860799e-05, -9.845804429941450e-03, 0.000000000000000e+00, -1.002591099758387e-02, -9.808760417586507e-03, 0.000000000000000e+00, -1.000277083048344e-02, -9.189611998807109e-03, 0.000000000000000e+00, -9.161105784602488e-03, -9.563491159535774e-03, 0.000000000000000e+00, -9.732564865001755e-03, -9.943645058684614e-03, 0.000000000000000e+00, -8.914303555880992e-03, -9.943645058684614e-03, 0.000000000000000e+00, -8.914303555880992e-03, -1.103099640194922e+00, 0.000000000000000e+00, -1.200893062630844e+00, -1.123583385322556e+00, 0.000000000000000e+00, -1.227567014975731e+00, -2.518303844662610e-03, 0.000000000000000e+00, -2.901608726489478e-03, -8.070001810394515e-01, 0.000000000000000e+00, -9.114807070972788e-01, -9.432987414056569e-01, 0.000000000000000e+00, -9.186463401568280e-01, -9.432987414056566e-01, 0.000000000000000e+00, -9.186463401568284e-01, -1.953638368012447e+02, 0.000000000000000e+00, -1.725632729972280e+02, -1.824099610810489e+02, 0.000000000000000e+00, -1.590496742513586e+02, -4.858787043489539e+00, 0.000000000000000e+00, -4.481625348290242e+00, -4.984851835317122e+02, 0.000000000000000e+00, -5.117620270868038e+02, -2.434373685968146e+02, 0.000000000000000e+00, -1.112257164666610e+03, -2.434373685968151e+02, 0.000000000000000e+00, -1.112257164666609e+03, -8.691412264536818e-06, 0.000000000000000e+00, -8.699877179940022e-06, -8.691661331182710e-06, 0.000000000000000e+00, -8.700121121098856e-06, -8.691524096437348e-06, 0.000000000000000e+00, -8.699956459189652e-06, -8.691732629343126e-06, 0.000000000000000e+00, -8.700172831437792e-06, -8.691473217081325e-06, 0.000000000000000e+00, -8.699992859809177e-06, -8.691473217081325e-06, 0.000000000000000e+00, -8.699992859809177e-06, -2.325801498220114e-04, 0.000000000000000e+00, -2.334599176527478e-04, -2.338926895981541e-04, 0.000000000000000e+00, -2.347104038994692e-04, -2.306158102271078e-04, 0.000000000000000e+00, -2.320724354099632e-04, -2.321319385716523e-04, 0.000000000000000e+00, -2.335010560175763e-04, -2.345890022804150e-04, 0.000000000000000e+00, -2.344178797576851e-04, -2.345890022804150e-04, 0.000000000000000e+00, -2.344178797576851e-04, -4.313921014386819e-02, 0.000000000000000e+00, -4.394430468281953e-02, -3.633418501368912e-02, 0.000000000000000e+00, -3.651622880882138e-02, -5.069154477658804e-02, 0.000000000000000e+00, -4.914678944726779e-02, -5.228653699198836e-02, 0.000000000000000e+00, -4.846956786996289e-02, -3.931079536762341e-02, 0.000000000000000e+00, -4.582679509214247e-02, -3.931079536762342e-02, 0.000000000000000e+00, -4.582679509214247e-02, -1.022468362622766e+00, 0.000000000000000e+00, -1.015409928630132e+00, -5.451353843252805e-01, 0.000000000000000e+00, -5.392926654866367e-01, -1.169711244585727e+00, 0.000000000000000e+00, -1.133363866680442e+00, -3.950237384371445e-04, 0.000000000000000e+00, -3.958258620785716e-04, -1.107601690489139e+00, 0.000000000000000e+00, -1.392923619216383e+00, -1.107601690489140e+00, 0.000000000000000e+00, -1.392923619216384e+00, -8.941323894590719e+02, 0.000000000000000e+00, -7.841622625448002e+02, -5.633513785735119e+02, 0.000000000000000e+00, -5.196093672040885e+02, -2.524887360305158e+03, 0.000000000000000e+00, -2.369762471758701e+03, -2.280920198022808e+00, 0.000000000000000e+00, -2.345186246094190e+00, -1.315321849407224e+03, 0.000000000000000e+00, -9.264227703249587e+02, -1.315321849407225e+03, 0.000000000000000e+00, -9.264227703249583e+02, -5.616571970826841e-02, 0.000000000000000e+00, -5.533613303643175e-02, -5.650191415948282e-02, 0.000000000000000e+00, -5.567854676426941e-02, -5.640915702561954e-02, 0.000000000000000e+00, -5.558227895099987e-02, -5.631271751848702e-02, 0.000000000000000e+00, -5.548458780190088e-02, -5.636320292576451e-02, 0.000000000000000e+00, -5.553561621391156e-02, -5.636320292576451e-02, 0.000000000000000e+00, -5.553561621391156e-02, -6.223185395639961e-02, 0.000000000000000e+00, -6.146533089812421e-02, -8.118280560483514e-02, 0.000000000000000e+00, -8.034611686432569e-02, -7.868403412356741e-02, 0.000000000000000e+00, -7.773646594996365e-02, -7.351112627088317e-02, 0.000000000000000e+00, -7.257857124361203e-02, -7.641554379310928e-02, 0.000000000000000e+00, -7.549598971887711e-02, -7.641554379310929e-02, 0.000000000000000e+00, -7.549598971887711e-02, -2.892134952715665e-02, 0.000000000000000e+00, -2.913793085813635e-02, -4.083650214751715e-01, 0.000000000000000e+00, -4.064916976920825e-01, -3.364544872581013e-01, 0.000000000000000e+00, -3.381916064697231e-01, -2.327455992051599e-01, 0.000000000000000e+00, -2.282351593787795e-01, -3.034098581409654e-01, 0.000000000000000e+00, -3.061590304010240e-01, -3.034098581409657e-01, 0.000000000000000e+00, -3.061590304010242e-01, -9.778989043809494e-02, 0.000000000000000e+00, -9.800024643585016e-02, -4.937304040323014e+00, 0.000000000000000e+00, -4.858984249066760e+00, -2.858515082689925e+00, 0.000000000000000e+00, -2.760779548822965e+00, -3.231410673155976e-01, 0.000000000000000e+00, -3.418161137204970e-01, -1.898812739848549e+00, 0.000000000000000e+00, -2.079277675133141e+00, -1.898812739848548e+00, 0.000000000000000e+00, -2.079277675133142e+00, -7.788975350502875e+01, 0.000000000000000e+00, -7.271095863469125e+01, -1.033353333047036e+04, 0.000000000000000e+00, -1.093089195163915e+04, -2.990705183304853e+03, 0.000000000000000e+00, -2.726322420769264e+03, -2.191809369917675e+00, 0.000000000000000e+00, -2.249671148535418e+00, -2.263877595571799e+03, 0.000000000000000e+00, -1.122745649560881e+03, -2.263877595571804e+03, 0.000000000000000e+00, -1.122745649560885e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_1_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.638762289771506e-03, 1.638903739377182e-03, 1.638763229086898e-03, 1.638904399104424e-03, 1.638776694504080e-03, 1.638920731252345e-03, 1.638767181464752e-03, 1.638908368349713e-03, 1.638762854416232e-03, 1.638920907858984e-03, 1.638762854416232e-03, 1.638920907858984e-03, 4.624360332946755e-03, 4.619043883705315e-03, 4.626242589284320e-03, 4.619899364016512e-03, 4.658532741549942e-03, 4.663196654897134e-03, 4.663991929080452e-03, 4.660144171485371e-03, 4.621307426906346e-03, 4.689468670611491e-03, 4.621307426906346e-03, 4.689468670611491e-03, 6.410925316924115e-03, 6.496881970302439e-03, 6.415062296421165e-03, 6.468671795383335e-03, 6.219064236098386e-03, 6.590001332997377e-03, 7.631089392989877e-03, 7.820144841679599e-03, 6.080971570293669e-03, 8.822287205440614e-03, 6.080971570293669e-03, 8.822287205440614e-03, 4.261092560878905e-02, 5.574849426330338e-02, 4.374192375853495e-02, 5.869365158163786e-02, -3.952871939535520e-04, -2.812855940661730e-04, 1.100775080065461e-02, 1.538082947718018e-02, 4.035775515191371e-02, 3.916234529249981e-03, 4.035775515191359e-02, 3.916234529249957e-03, 3.056083019051436e-04, 3.262319874102681e-04, 3.257295771240122e-04, 3.523723394401060e-04, 1.372428709802428e-03, 1.525208217072893e-03, 1.512766284378788e-04, 1.504858730816260e-04, 2.636277632276946e-04, 1.821662984163859e-04, 2.636277632276929e-04, 1.821662984163875e-04, 6.978421125591085e-03, 6.980559736448232e-03, 6.979590884541237e-03, 6.981689859465032e-03, 6.978693799420448e-03, 6.980748339243435e-03, 6.979688737625479e-03, 6.981766508793933e-03, 6.978865833366250e-03, 6.981103101992794e-03, 6.978865833366250e-03, 6.981103101992794e-03, 1.143371633884382e-02, 1.151181799308956e-02, 1.186500319127057e-02, 1.192722231843091e-02, 1.144448259459769e-02, 1.151361185275881e-02, 1.184284241714055e-02, 1.191640307449021e-02, 1.167159947117051e-02, 1.173629690441518e-02, 1.167159947117051e-02, 1.173629690441518e-02, 4.512727509330811e-02, 4.594307249494638e-02, 4.661536981469688e-02, 4.722146171525266e-02, 3.251838900745212e-02, 3.878639051277131e-02, 3.463130164400721e-02, 3.878855376545587e-02, 4.746358766846995e-02, 4.556277560978211e-02, 4.746358766846993e-02, 4.556277560978210e-02, 5.494426018778607e-03, 5.498336272787960e-03, 2.354614295675009e-02, 2.349496734961031e-02, 4.429155608214019e-03, 5.249517556115088e-03, 1.180390456049458e-02, 1.181454407412671e-02, 9.469742256802534e-03, 1.474271386794336e-02, 9.469742256802489e-03, 1.474271386794333e-02, 8.242165502240461e-05, 8.366398826889527e-05, 1.348726557349285e-04, 1.271488194809333e-04, 2.842825352573686e-04, 3.148234148902236e-04, 2.734231072037894e-03, 3.165840290132075e-03, 9.704998990475605e-05, 3.187574837090782e-04, 9.704998990475297e-05, 3.187574837090758e-04, 6.245513574740681e-02, 6.225984746125025e-02, 6.218344565842219e-02, 6.199855387410778e-02, 6.228342224815014e-02, 6.209597926568553e-02, 6.236399305669817e-02, 6.217089673283436e-02, 6.232346927473129e-02, 6.213339252264707e-02, 6.232346927473129e-02, 6.213339252264707e-02, 6.306684305436250e-02, 6.295589300622366e-02, 6.170363768318873e-02, 6.171618468964510e-02, 6.360442776278671e-02, 6.355185438813753e-02, 6.403141902507520e-02, 6.386713933839369e-02, 6.377585066727975e-02, 6.372748355494168e-02, 6.377585066727980e-02, 6.372748355494165e-02, 4.074220855019702e-02, 4.188044732397238e-02, 3.585872088200695e-02, 3.619517111815256e-02, 4.472714698481087e-02, 4.608214244812007e-02, 5.058930057277596e-02, 5.007638794819305e-02, 5.382148296033037e-02, 5.412229281744078e-02, 5.382148296033027e-02, 5.412229281744085e-02, 5.181936511531629e-02, 5.356626180837950e-02, 1.426137464497718e-03, 1.415419460484988e-03, 1.838627295408095e-03, 1.976161322496464e-03, 5.791414387594770e-02, 7.068756573242509e-02, 4.821213556708683e-03, 6.308465358619878e-03, 4.821213556708726e-03, 6.308465358619836e-03, 2.778273708509050e-04, 2.834959897554870e-04, 2.732414768550976e-05, 2.181694501522431e-05, 1.412303246487824e-04, 1.545242128357569e-04, 5.040531395952275e-03, 5.930020527214539e-03, 1.588330151328075e-04, 2.972267941081879e-04, 1.588330151328065e-04, 2.972267941081905e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
