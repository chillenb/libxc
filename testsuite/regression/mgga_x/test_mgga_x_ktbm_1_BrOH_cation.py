
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_1_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.081908852420095e+01, -2.081918600929901e+01, -2.081962146440632e+01, -2.195642932570775e+01, -2.195701657139339e+01, -2.309523263458505e+01, -3.514200181067400e+00, -3.877188731895088e+00, -3.876910329221730e+00, -3.877375061548875e+00, -3.876919763620640e+00, -3.514115709250926e+00, -6.029060084161288e-01, -6.770179108213288e-01, -7.284227571428135e-01, -6.635586798927049e-01, -5.936970421239546e-01, -7.352072126237688e-01, -1.776204052590349e-01, -1.804649360931174e-01, -7.870745316419003e-01, -1.433718459979421e-01, -1.840763531645661e-01, -1.829884111414250e-01, -6.463187387620893e-03, -6.656915539419635e-03, -3.664556370659070e-02, -3.726223146167072e-03, -5.201402313101203e-03, -5.201402313101204e-03, -5.579864633037795e+00, -5.579966128379301e+00, -5.579862519736272e+00, -5.579952649500978e+00, -5.380476008747026e+00, -5.380653505957495e+00, -2.189725479662927e+00, -2.204371982756490e+00, -2.178976344612196e+00, -2.192033771706774e+00, -1.988853732238449e+00, -2.202964012824657e+00, -5.978767050591378e-01, -6.880768604402545e-01, -6.036014672895766e-01, -6.208050642895284e-01, -6.112923756109023e-01, -6.544784425466783e-01, -9.851747982821352e-02, -1.774161111922988e-01, -9.116817572942418e-02, -2.100619785011830e+00, -1.165560986361993e-01, -1.165560986361993e-01, -2.809421760041471e-03, -3.642603476048370e-03, -2.789585577327721e-03, -5.902362733548622e-02, -3.504209427770345e-03, -3.504209427770346e-03, -6.216013980927273e-01, -6.218748194092403e-01, -6.009579250319491e-01, -6.130323456048858e-01, -6.026811987631715e-01, -6.121806682356659e-01, -6.052732730759774e-01, -4.992787179420823e-01, -5.263944742590630e-01, -5.810052877562726e-01, -5.726325557906007e-01, -5.399527968486721e-01, -6.863631298950459e-01, -2.430992091237220e-01, -2.665903976018422e-01, -3.510108155630219e-01, -3.388443934369381e-01, -3.047160311965867e-01, -5.049108293568447e-01, -3.392376988739222e-02, -4.901856814133546e-02, -3.729912483137191e-01, -7.806742516293851e-02, -7.806742516293851e-02, -8.646737127059396e-03, -9.735705980099759e-04, -1.943659830241757e-03, -6.779746085913468e-02, -3.218000869984183e-03, -3.094314150005502e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_1_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.987842852758226e+01, -2.987853229355854e+01, -2.987854593967365e+01, -2.987861755189792e+01, -2.987893277272231e+01, -2.987916864212288e+01, -2.987760785457444e+01, -2.746114847884451e+01, -2.987849852780889e+01, -2.746200520428848e+01, -2.746222226478209e+01, -2.746200520428848e+01, -4.302284026336209e+00, -4.471462321359964e+00, -4.302260664267052e+00, -4.302236507985692e+00, -4.301800437361234e+00, -4.301765919699907e+00, -4.302327533840559e+00, -4.302386972006896e+00, -4.301646874593763e+00, -4.302066340045432e+00, -4.470471906440309e+00, -4.302066340045432e+00, -7.703288509425079e-01, -7.754150524357660e-01, -7.685766363117454e-01, -8.729767601598928e-01, -8.608973932414244e-01, -8.564032716151860e-01, -8.611003893860879e-01, -7.539120431504838e-01, -7.827692654813398e-01, -7.204568391798166e-01, -8.786199243837136e-01, -8.408609177141505e-01, -1.935179108741623e-01, -2.355581959048579e-01, -1.955855608086804e-01, -2.387925143516889e-01, -1.041171222848942e+00, -9.031371328308213e-01, -1.800164893736815e-01, -1.822066972724812e-01, -2.387972545763458e-01, -1.317756880133296e-01, -2.387972545763457e-01, -1.226618876985213e-01, -8.108116431850047e-03, -8.615820601437986e-03, -8.286149112386634e-03, -9.101692280201100e-03, -4.573766962055747e-02, -4.987546463135917e-02, -4.874049224618208e-03, -4.792833666477189e-03, -7.233231559688915e-03, -4.116182944627595e-03, -7.233231559688916e-03, -4.116182944627600e-03, -6.843679817812107e+00, -6.842058988938947e+00, -6.847917918905354e+00, -6.846153706981734e+00, -6.843963946268261e+00, -6.842234818359476e+00, -6.847598508474765e+00, -6.845952731072040e+00, -7.314255758390318e+00, -6.844109070587608e+00, -6.845813339859397e+00, -7.312468816688461e+00, -2.443204377543332e+00, -2.442485248428903e+00, -2.455533949592977e+00, -2.454488567325778e+00, -2.433622530428637e+00, -2.435597256271001e+00, -2.443773221021874e+00, -2.446049985613480e+00, -2.457623795050297e+00, -2.455811862835934e+00, -2.457623795050298e+00, -2.449687489452136e+00, -7.302035870008318e-01, -7.988841584592079e-01, -8.214349502646919e-01, -8.238755720187450e-01, -6.587164873388841e-01, -6.822028236716131e-01, -6.884676970368431e-01, -7.157694685611502e-01, -7.663185121325520e-01, -7.926620399987034e-01, -7.663185121325520e-01, -7.227630462809836e-01, -1.258409652570121e-01, -1.270343845023504e-01, -2.026803467869994e-01, -2.376400020078139e-01, -1.138967174319959e-01, -1.199762787910304e-01, -2.407315745147765e+00, -2.406337579409133e+00, -1.437289729310397e-01, -1.519035679676553e-01, -1.437289729310395e-01, -1.519035679676554e-01, -3.567096574562926e-03, -3.799954619499934e-03, -4.689695487324071e-03, -4.760674650959495e-03, -3.506823522219569e-03, -3.713847137094587e-03, -7.854769923424995e-02, -7.535840334369304e-02, -3.581695301221899e-03, -4.918792516539388e-03, -3.581695301221897e-03, -4.918792516539392e-03, -8.075196920436700e-01, -8.110431004155255e-01, -7.895061274834992e-01, -7.931399420040613e-01, -8.226609187841547e-01, -8.258097180827900e-01, -8.235542613677492e-01, -8.045326415122315e-01, -8.231184464737504e-01, -8.262554435763663e-01, -8.231184464737503e-01, -8.019376379818981e-01, -7.839901777626188e-01, -7.870321721017719e-01, -6.069426150327508e-01, -6.590729866516295e-01, -6.447761758509245e-01, -7.126156110479508e-01, -6.951557665245452e-01, -6.979682451051321e-01, -6.681103087745736e-01, -6.710883301089378e-01, -6.681103087745738e-01, -7.349917325797493e-01, -8.494880681218568e-01, -9.333015368800629e-01, -2.941609347410600e-01, -2.956878313603967e-01, -2.984888003081622e-01, -3.473095740103738e-01, -4.295815796844303e-01, -4.356090864329843e-01, -3.859677282275296e-01, -3.856110482950814e-01, -3.859677282275298e-01, -3.582246284947713e-01, -5.585634025296222e-01, -5.619099692112570e-01, -4.488629602190860e-02, -4.519219828344637e-02, -6.233324728520550e-02, -6.441707665699643e-02, -4.116789720784287e-01, -4.167340535494915e-01, -9.745149471507904e-02, -1.028454231404602e-01, -9.745149471507902e-02, -1.028454231404602e-01, -1.131016388503055e-02, -1.171985190040441e-02, -1.261703227820810e-03, -1.264586936257683e-03, -2.504521756434132e-03, -2.663740000650098e-03, -8.789128999745463e-02, -8.902799627821344e-02, -3.392623247136030e-03, -4.508440129521247e-03, -3.392623247136027e-03, -4.397701655786790e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_1_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.824355439359848e-08, 0.000000000000000e+00, -2.824496413469414e-08, -2.824337497807201e-08, 0.000000000000000e+00, -2.824483351041773e-08, -2.824265935492369e-08, 0.000000000000000e+00, -2.824384738898368e-08, -2.824470136952195e-08, 0.000000000000000e+00, -2.926650291749961e-08, -2.824345933236883e-08, 0.000000000000000e+00, -2.926522165515739e-08, -2.926335049636680e-08, 0.000000000000000e+00, -2.926522165515739e-08, -2.746543352889207e-05, 0.000000000000000e+00, -2.690392856535740e-05, -2.747121152898144e-05, 0.000000000000000e+00, -2.746579482588170e-05, -2.758393788301743e-05, 0.000000000000000e+00, -2.760293598610302e-05, -2.753368373991097e-05, 0.000000000000000e+00, -2.753229835009399e-05, -2.747016019540351e-05, 0.000000000000000e+00, -2.763170721589704e-05, -2.691280898597566e-05, 0.000000000000000e+00, -2.763170721589704e-05, -1.000833637627735e-02, 0.000000000000000e+00, -1.017192039079947e-02, -9.976977442673287e-03, 0.000000000000000e+00, -9.500342771824840e-03, -8.615351733854087e-03, 0.000000000000000e+00, -8.585300307742464e-03, -9.034726184221666e-03, 0.000000000000000e+00, -9.979064406594382e-03, -1.006839458906216e-02, 0.000000000000000e+00, -9.367099507810488e-03, -9.456675723026586e-03, 0.000000000000000e+00, -8.396855186661518e-03, -1.266579440764326e+00, 0.000000000000000e+00, -1.193329921351142e+00, -1.277534167438320e+00, 0.000000000000000e+00, -1.218155201976198e+00, -2.162379396528432e-03, 0.000000000000000e+00, -2.955842054292546e-03, -7.377248317527506e-01, 0.000000000000000e+00, -8.637990575802181e-01, -9.223262746544558e-01, 0.000000000000000e+00, -7.751847447471054e-01, -9.223262746544552e-01, 0.000000000000000e+00, -1.178475381809876e+00, -1.935361933786949e+02, 0.000000000000000e+00, -1.718686462883119e+02, -3.291123277498726e+02, 0.000000000000000e+00, -1.576613216266508e+02, -7.900488680247468e+00, 0.000000000000000e+00, -4.184222750511451e+00, -4.563783801870333e+02, 0.000000000000000e+00, -4.743627131239556e+02, -2.367065321222955e+02, 0.000000000000000e+00, -9.538132316658904e+02, -2.367065321222955e+02, 0.000000000000000e+00, -9.538132316658889e+02, -8.692981224488333e-06, 0.000000000000000e+00, -8.701357678471260e-06, -8.693215530145287e-06, 0.000000000000000e+00, -8.701587196903545e-06, -8.693056370250239e-06, 0.000000000000000e+00, -8.701410586065759e-06, -8.693253558519592e-06, 0.000000000000000e+00, -8.701615156403693e-06, -8.450255710982723e-06, 0.000000000000000e+00, -8.701470654220265e-06, -8.693061795960255e-06, 0.000000000000000e+00, -8.458414105584536e-06, -2.320996178772676e-04, 0.000000000000000e+00, -2.330043274633110e-04, -2.335919458835064e-04, 0.000000000000000e+00, -2.344240900576784e-04, -2.300882586333120e-04, 0.000000000000000e+00, -2.315780506608458e-04, -2.317674418552112e-04, 0.000000000000000e+00, -2.331676980963816e-04, -2.342788718245423e-04, 0.000000000000000e+00, -2.326983209288957e-04, -2.342788718245423e-04, 0.000000000000000e+00, -2.340648504602906e-04, -4.371120369271879e-02, 0.000000000000000e+00, -4.280631780188651e-02, -3.718727163279269e-02, 0.000000000000000e+00, -3.735161038633791e-02, -5.111501100437555e-02, 0.000000000000000e+00, -4.978018491537366e-02, -5.380984156499226e-02, 0.000000000000000e+00, -4.986826042567689e-02, -3.981927202216870e-02, 0.000000000000000e+00, -4.470961317780868e-02, -3.981927202216871e-02, 0.000000000000000e+00, -4.650326085551446e-02, -9.469666085065135e-01, 0.000000000000000e+00, -9.348247100035657e-01, -6.697923115545855e-01, 0.000000000000000e+00, -5.281232918522454e-01, -1.063483098179690e+00, 0.000000000000000e+00, -1.047173587526111e+00, -4.076817066497533e-04, 0.000000000000000e+00, -4.085124359926625e-04, -1.049769390584965e+00, 0.000000000000000e+00, -1.339210206503473e+00, -1.049769390584966e+00, 0.000000000000000e+00, -1.339210206503474e+00, -1.268274986018546e+03, 0.000000000000000e+00, -6.136894949443925e+02, -4.800282260822302e+02, 0.000000000000000e+00, -4.373168627894029e+02, -2.305775715884649e+03, 0.000000000000000e+00, -2.154947405389138e+03, -2.030862601055205e+00, 0.000000000000000e+00, -3.581903446521686e+00, -9.581010527392858e+02, 0.000000000000000e+00, -9.078175101705042e+02, -9.581010527392866e+02, 0.000000000000000e+00, -9.078175101705042e+02, -5.639800979953367e-02, 0.000000000000000e+00, -5.555916047479088e-02, -5.671308139128445e-02, 0.000000000000000e+00, -5.588179169273864e-02, -5.579378287487181e-02, 0.000000000000000e+00, -5.498818336610602e-02, -5.583696089078848e-02, 0.000000000000000e+00, -5.570080274550040e-02, -5.581698992623133e-02, 0.000000000000000e+00, -5.500798814266005e-02, -5.581698992623133e-02, 0.000000000000000e+00, -5.574898801638019e-02, -6.274267239288328e-02, 0.000000000000000e+00, -6.195314476019636e-02, -8.128177895458991e-02, 0.000000000000000e+00, -7.770186975326747e-02, -7.892758966807963e-02, 0.000000000000000e+00, -7.493404795173358e-02, -7.389961324462731e-02, 0.000000000000000e+00, -7.296099779602397e-02, -7.675590426454816e-02, 0.000000000000000e+00, -7.582260628916224e-02, -7.675590426454819e-02, 0.000000000000000e+00, -7.298632294115637e-02, -2.969664226879825e-02, 0.000000000000000e+00, -2.880635418007865e-02, -4.042581493059945e-01, 0.000000000000000e+00, -4.023194829077045e-01, -3.637952949742713e-01, 0.000000000000000e+00, -3.334935065246656e-01, -2.314492236924502e-01, 0.000000000000000e+00, -2.272033464927285e-01, -3.001772068286352e-01, 0.000000000000000e+00, -3.029403411055348e-01, -3.001772068286354e-01, 0.000000000000000e+00, -3.130311202334989e-01, -9.801677080606359e-02, 0.000000000000000e+00, -9.828551463194632e-02, -8.410183532798294e+00, 0.000000000000000e+00, -8.215099858893840e+00, -2.619582528411815e+00, 0.000000000000000e+00, -2.539700477084743e+00, -3.243296107527685e-01, 0.000000000000000e+00, -3.440444883914660e-01, -1.764586695745357e+00, 0.000000000000000e+00, -1.945291322119841e+00, -1.764586695745357e+00, 0.000000000000000e+00, -1.945291322119842e+00, -1.206194971376445e+02, 0.000000000000000e+00, -1.115486485676274e+02, -7.099819259814150e+03, 0.000000000000000e+00, -7.051923650149175e+03, -5.245521796214778e+03, 0.000000000000000e+00, -4.773343196115680e+03, -3.237139976893944e+00, 0.000000000000000e+00, -3.398905122177804e+00, -1.716434438056577e+03, 0.000000000000000e+00, -1.099638866801643e+03, -1.716434438056579e+03, 0.000000000000000e+00, -2.017208094714797e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_1_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.242771599913812e-03, 1.242917461710446e-03, 1.242788759902052e-03, 1.242929896751802e-03, 1.242834921209721e-03, 1.242998457584265e-03, 1.242642742053984e-03, 1.667647920121410e-03, 1.242782822599702e-03, 1.667640201384578e-03, 1.667609341587430e-03, 1.667640201384578e-03, 8.144377720451929e-03, 2.028976239485138e-03, 8.145534134485464e-03, 8.144284724500093e-03, 8.167986641591046e-03, 8.171906486747994e-03, 8.159149110718468e-03, 8.159065464678580e-03, 8.143104498694867e-03, 8.179084661666397e-03, 2.026822747938718e-03, 8.179084661666397e-03, -3.051255430125810e-03, -2.862996521701898e-03, -3.103058007148140e-03, 2.410801752962723e-02, 2.078368516545260e-02, 2.036040215015714e-02, 2.187140307155511e-02, -3.409989507930542e-03, -2.716600957964988e-03, -3.952101881877950e-03, 2.449437189214074e-02, 1.875068782930313e-02, -1.340146779014307e-02, 5.819127185463831e-02, -1.362968361590610e-02, 6.211282278191113e-02, 8.965418244123755e-03, -3.020104200766111e-03, 1.519685657496544e-02, 1.858164277232558e-02, 4.643600933707054e-02, 5.968577969667164e-03, 4.643600933707045e-02, -1.653219212119665e-03, 3.064719063905275e-04, 3.266197436042603e-04, -1.378544332083636e-06, 3.533080676131175e-04, -1.127955902433824e-04, 1.597088745967023e-03, 1.568203701426673e-04, 1.549849321024106e-04, 2.660275241512078e-04, 1.974095019456894e-04, 2.660275241512078e-04, 1.974095019456932e-04, 6.986305133684061e-03, 6.987993847903765e-03, 6.987363122099239e-03, 6.989017290999959e-03, 6.986390918005925e-03, 6.988048531322349e-03, 6.987297320697403e-03, 6.988976854556898e-03, 5.857195713704830e-03, 6.988506319470089e-03, 6.986829079426648e-03, 5.858472739724818e-03, 1.292762284420391e-02, 1.296226570692208e-02, 1.316145277264438e-02, 1.318778920426197e-02, 1.269883548385351e-02, 1.279972117903678e-02, 1.291891870630330e-02, 1.301742396976670e-02, 1.322101974276912e-02, 1.950560962879336e-03, 1.322101974276912e-02, 1.310845106190056e-02, 5.620868332925377e-02, 2.939341121358272e-02, 5.606319812336358e-02, 5.619188162812722e-02, 5.404878257026449e-02, 5.604637026664244e-02, 5.887572745721810e-02, 5.863008251379102e-02, 5.582353308926476e-02, 3.027397940375224e-02, 5.582353308926474e-02, 5.730982678040409e-02, 6.354319799104019e-03, 6.460191289667908e-03, -8.544820149063980e-03, 2.567275839569139e-02, 5.223402341226735e-03, 6.064659459987677e-03, 1.774991256501851e-02, 1.775996729276515e-02, 1.078314446537276e-02, 1.652736431001022e-02, 1.078314446537269e-02, 1.652736431001028e-02, -5.632977447418018e-08, 9.990505630378339e-05, 1.469224048212656e-04, 1.400177145541373e-04, 2.951477647229624e-04, 3.276713066149171e-04, 3.149913022829607e-03, -6.380182276126736e-04, 1.306184983613799e-04, 3.207750775212676e-04, 1.306184983613774e-04, 3.207750775212666e-04, 6.345178464893687e-02, 6.322233210325465e-02, 6.327089905657429e-02, 6.304913460919796e-02, 5.940396030585243e-02, 5.930268387051309e-02, 6.024159511586043e-02, 6.316774955353237e-02, 5.982750031175684e-02, 5.970913508219935e-02, 5.982750031175684e-02, 6.314323859224727e-02, 6.512708669877160e-02, 6.493051033187441e-02, 6.379171235965200e-02, 2.600942023120119e-02, 6.617579846137955e-02, 3.952669634272111e-02, 6.665666286153453e-02, 6.645986203403322e-02, 6.661370450058640e-02, 6.644648630782726e-02, 6.661370450058644e-02, 4.560939705907412e-02, 5.259356380289040e-02, 3.765723934197155e-02, 3.805934633620230e-02, 3.849523976775988e-02, -9.216624327848201e-03, 5.289972828607637e-02, 8.767316580260375e-03, 7.181441611453049e-02, 6.639867641774513e-02, 6.683341748512586e-02, 6.639867641774512e-02, -1.450108017206086e-03, 6.335507379222075e-02, 6.414537369112246e-02, -1.121943196343673e-04, -1.122247032117095e-04, 1.977965774840400e-03, 2.124019745804601e-03, 8.449144858930940e-02, 8.971634473313204e-02, 5.399523333079515e-03, 7.097428867949317e-03, 5.399523333079516e-03, 7.097428867949457e-03, -1.632319618826232e-06, -1.790166773786557e-06, 4.229936630340113e-05, 4.230275332837301e-05, -8.105068601601096e-08, -1.033111356207431e-07, -1.340701610864336e-03, -1.569045285689643e-03, 1.988921249782321e-04, 2.991535002084419e-04, 1.988921249782310e-04, -6.157931933864321e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
