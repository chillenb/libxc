
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_r4scan_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r4scan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.318080644189761e+01, -2.318087550822831e+01, -2.318123399576173e+01, -2.318020750841986e+01, -2.318073802061098e+01, -2.318073802061098e+01, -3.400505067180636e+00, -3.400590880425425e+00, -3.403166316099878e+00, -3.404197634247867e+00, -3.403053983457167e+00, -3.403053983457167e+00, -5.932274783329567e-01, -5.925411962321560e-01, -5.768968016078738e-01, -5.878477648638296e-01, -5.865334761708899e-01, -5.865334761708899e-01, -1.796411493791656e-01, -1.816920259230346e-01, -6.494575806719798e-01, -1.148966683224138e-01, -1.647528936861005e-01, -1.647528936861004e-01, -2.658758175368621e-03, -2.829428753691562e-03, -2.411272204682568e-02, -1.215206331141319e-03, -1.970035328498652e-03, -1.970035328498651e-03, -5.667956382047411e+00, -5.669062002890997e+00, -5.668033439848582e+00, -5.669008443645423e+00, -5.668503350758938e+00, -5.668503350758938e+00, -2.075726698095960e+00, -2.098975477165763e+00, -2.069402367276889e+00, -2.090158084708194e+00, -2.091848721496480e+00, -2.091848721496480e+00, -6.151927476864951e-01, -6.677679577867985e-01, -5.450062686612858e-01, -5.572541669451798e-01, -6.282570921142366e-01, -6.282570921142366e-01, -7.426480405219638e-02, -1.729986503047412e-01, -6.801375592550327e-02, -1.913338370079956e+00, -9.478302219977061e-02, -9.478302219977058e-02, -8.710131550202892e-04, -1.195275022335268e-03, -9.849631244652198e-04, -4.324431405647067e-02, -1.262127131834944e-03, -1.262127131834944e-03, -6.397660363877004e-01, -6.361314893371853e-01, -6.374113098467360e-01, -6.384642390473629e-01, -6.379359123602462e-01, -6.379359123602462e-01, -6.198012677885996e-01, -5.319430648997593e-01, -5.573802230434002e-01, -5.823835500015846e-01, -5.694404465053138e-01, -5.694404465053138e-01, -6.907084691129614e-01, -2.283442107852843e-01, -2.721157284753928e-01, -3.514935633577166e-01, -3.120667175505548e-01, -3.120667175505548e-01, -4.765775058443015e-01, -2.285665103304121e-02, -3.304856929598451e-02, -3.446583374176598e-01, -5.834398860820771e-02, -5.834398860820772e-02, -4.039405141222498e-03, -2.206210142605024e-04, -5.849664155778016e-04, -5.565339758560697e-02, -1.142981575964168e-03, -1.142981575964166e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_r4scan_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r4scan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.014668739879138e+01, -3.014678665152245e+01, -3.014681275010863e+01, -3.014687767819840e+01, -3.014721501911937e+01, -3.014745371550950e+01, -3.014580069060220e+01, -3.014565076271492e+01, -3.014676261910279e+01, -3.014637229144901e+01, -3.014676261910279e+01, -3.014637229144901e+01, -4.663632686056754e+00, -4.660468988502800e+00, -4.664646528335863e+00, -4.660909966206614e+00, -4.681395117865959e+00, -4.683788309662940e+00, -4.685309590720343e+00, -4.683380016312760e+00, -4.660854246624416e+00, -4.697764912788664e+00, -4.660854246624416e+00, -4.697764912788664e+00, -8.248479592485473e-01, -8.295544799139094e-01, -8.232159990838012e-01, -8.287626943570215e-01, -8.007734188163644e-01, -7.952937421367974e-01, -8.084637657973474e-01, -8.114531718188551e-01, -8.359391023878622e-01, -7.749210147736242e-01, -8.359391023878622e-01, -7.749210147736242e-01, -1.578709550297086e-01, -1.926829637758176e-01, -1.641135221732289e-01, -1.973989665522814e-01, -8.357277219450662e-01, -8.774611363451780e-01, -1.481501746306013e-01, -1.302770572959859e-01, -1.662382782968815e-01, -1.111444057169956e-01, -1.662382782968812e-01, -1.111444057169955e-01, -1.868047542682949e-03, 1.424744073486214e-02, -3.804486136735113e-03, -1.466339321916235e-03, -3.646507099761491e-02, -3.821047709947979e-02, -2.255922374754458e-03, -2.196997726495198e-03, -3.646256529961403e-03, -1.966335194304747e-03, -3.646256529961417e-03, -1.966335194304747e-03, -7.406182226874255e+00, -7.404392582526368e+00, -7.408643991981405e+00, -7.406770661790775e+00, -7.406332841943986e+00, -7.404484268440783e+00, -7.408444679102504e+00, -7.406644172039304e+00, -7.407432892497225e+00, -7.405585429589456e+00, -7.407432892497225e+00, -7.405585429589456e+00, -2.540533599555174e+00, -2.542762084611589e+00, -2.577500808452902e+00, -2.578615611089987e+00, -2.517474337563083e+00, -2.526160121156046e+00, -2.551549733368309e+00, -2.560294558413637e+00, -2.579332112245575e+00, -2.564198581878001e+00, -2.579332112245575e+00, -2.564198581878001e+00, -8.196109920887521e-01, -8.174822722455040e-01, -9.249794060459520e-01, -9.252662170328794e-01, -7.330363514840846e-01, -7.689976557612948e-01, -8.213169101953811e-01, -8.356082036633732e-01, -8.571743853695182e-01, -8.134721783039517e-01, -8.571743853695181e-01, -8.134721783039517e-01, -9.865249728130827e-02, -1.013618343847819e-01, -1.124454178399256e-01, -1.140184740741305e-01, -9.290202159632187e-02, -9.482156935474279e-02, -2.842900776141066e+00, -2.841678358526074e+00, -9.002912737329166e-02, -7.885383051114962e-02, -9.002912737329305e-02, -7.885383051114948e-02, -1.581987894248694e-03, -1.645422118007212e-03, -2.183213103545493e-03, -2.212829884130935e-03, -1.709282086484615e-03, -1.861334215867309e-03, -6.445481036681307e-02, -6.212655851949794e-02, -1.663171223327107e-03, -2.272346577175732e-03, -1.663171223327106e-03, -2.272346577175729e-03, -8.523617900250351e-01, -8.557318902584820e-01, -8.415074072312091e-01, -8.449629099733676e-01, -8.452771961763680e-01, -8.487281786021932e-01, -8.484621354457560e-01, -8.518415931012291e-01, -8.468671537660563e-01, -8.502812474916716e-01, -8.468671537660563e-01, -8.502812474916716e-01, -8.324564790828486e-01, -8.351274728515995e-01, -6.710573412717773e-01, -6.745270263878510e-01, -7.160313848667593e-01, -7.197666234243728e-01, -7.614634349246058e-01, -7.643001630075041e-01, -7.384859225286708e-01, -7.414944459697994e-01, -7.384859225286708e-01, -7.414944459697994e-01, -9.715774297899162e-01, -9.728009455665360e-01, -2.163476174481302e-01, -2.183708698955961e-01, -2.904544001156068e-01, -2.968255967403707e-01, -4.546233335639901e-01, -4.577009958826060e-01, -3.715542596463151e-01, -3.719780140198451e-01, -3.715542596463151e-01, -3.719780140198451e-01, -6.027704664997665e-01, -6.092261875636165e-01, -3.004301865775304e-02, -3.262597757459786e-02, -4.939751617987630e-02, -5.098826502595877e-02, -4.500682200682213e-01, -4.587381085456630e-01, -7.580487201485142e-02, -7.706647512714281e-02, -7.580487201485146e-02, -7.706647512714283e-02, -6.962480912837367e-03, -7.296111657204635e-03, -4.057083046260121e-04, -4.307274374854222e-04, -1.019620256227079e-03, -1.116845752278608e-03, -6.904915684706694e-02, -1.608590707400479e-02, -1.644154207835988e-03, -2.047802186646914e-03, -1.644154207835986e-03, -2.047802186646920e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_r4scan_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r4scan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.259342879967571e-08, 0.000000000000000e+00, -1.259088673025051e-08, -1.259328753925024e-08, 0.000000000000000e+00, -1.259078444987201e-08, -1.259240194762074e-08, 0.000000000000000e+00, -1.258963767328528e-08, -1.259398272926641e-08, 0.000000000000000e+00, -1.259165514599624e-08, -1.259335644042593e-08, 0.000000000000000e+00, -1.259053161096032e-08, -1.259335644042593e-08, 0.000000000000000e+00, -1.259053161096032e-08, -2.314673433436935e-05, 0.000000000000000e+00, -2.295288682865452e-05, -2.321169608832958e-05, 0.000000000000000e+00, -2.298193524212693e-05, -2.428187946245896e-05, 0.000000000000000e+00, -2.442967538111660e-05, -2.449044262704790e-05, 0.000000000000000e+00, -2.436290866374782e-05, -2.303072163818397e-05, 0.000000000000000e+00, -2.526566235347638e-05, -2.303072163818397e-05, 0.000000000000000e+00, -2.526566235347638e-05, -8.561504640889221e-03, 0.000000000000000e+00, -8.708743376715556e-03, -8.528213784683544e-03, 0.000000000000000e+00, -8.692970596486717e-03, -8.070941658004633e-03, 0.000000000000000e+00, -8.071349810085237e-03, -8.291799954106708e-03, 0.000000000000000e+00, -8.407999997254632e-03, -8.745620087376395e-03, 0.000000000000000e+00, -8.695402824606395e-03, -8.745620087376395e-03, 0.000000000000000e+00, -8.695402824606395e-03, -3.893373225732770e+00, 0.000000000000000e+00, -2.489669412686773e+00, -3.788102760673766e+00, 0.000000000000000e+00, -2.467221788600597e+00, -2.426760099453496e-03, 0.000000000000000e+00, -2.866198461436032e-03, -1.104557645309754e+00, 0.000000000000000e+00, -3.423952921580287e+00, -3.342936220503947e+00, 0.000000000000000e+00, 2.738838959096024e-01, -3.342936220503945e+00, 0.000000000000000e+00, 2.738838959096026e-01, -1.933852084770291e+03, 0.000000000000000e+00, -1.354158430754885e+04, -4.195013383626555e+02, 0.000000000000000e+00, -2.093251868554063e+03, 4.388944812667574e+00, 0.000000000000000e+00, 1.674707212366422e+00, 8.589165072256387e+02, 0.000000000000000e+00, 8.563133236415398e+02, 1.985546021077919e+02, 0.000000000000000e+00, 2.107295869516379e+03, 1.985546021078100e+02, 0.000000000000000e+00, 2.107295869516382e+03, -3.547570530950237e-06, 0.000000000000000e+00, -3.549995065426163e-06, -3.549018501982588e-06, 0.000000000000000e+00, -3.551394474772260e-06, -3.547296174039134e-06, 0.000000000000000e+00, -3.549787629371869e-06, -3.548550583448221e-06, 0.000000000000000e+00, -3.551070689668848e-06, -3.548577345253254e-06, 0.000000000000000e+00, -3.550739394021808e-06, -3.548577345253254e-06, 0.000000000000000e+00, -3.550739394021808e-06, -2.042000979094109e-04, 0.000000000000000e+00, -2.021716229463569e-04, -1.890303783937168e-04, 0.000000000000000e+00, -1.876139141590522e-04, -1.992170292127841e-04, 0.000000000000000e+00, -1.989201558828228e-04, -1.853241093705533e-04, 0.000000000000000e+00, -1.848541895288724e-04, -1.984508526828852e-04, 0.000000000000000e+00, -1.947464856864537e-04, -1.984508526828852e-04, 0.000000000000000e+00, -1.947464856864537e-04, -3.385135088129226e-02, 0.000000000000000e+00, -3.368033731788413e-02, -2.922796392842984e-02, 0.000000000000000e+00, -2.865958367901272e-02, -5.591016702674440e-02, 0.000000000000000e+00, -4.881064397354448e-02, -7.639699477619512e-02, 0.000000000000000e+00, -5.654713505900683e-02, -2.704711474405654e-02, 0.000000000000000e+00, -3.658477755780060e-02, -2.704711474405655e-02, 0.000000000000000e+00, -3.658477755780060e-02, -1.868080787322369e+00, 0.000000000000000e+00, -1.453849906267205e+00, -3.521861187058517e+00, 0.000000000000000e+00, -3.465346718165729e+00, -7.514856622479182e-01, 0.000000000000000e+00, -1.795441309252589e+00, -4.452362958955081e-04, 0.000000000000000e+00, -4.458091538322294e-04, -6.447346500512395e+00, 0.000000000000000e+00, -1.022874294919177e+01, -6.447346500512444e+00, 0.000000000000000e+00, -1.022874294919175e+01, 1.787535024648658e+03, 0.000000000000000e+00, 1.540098162348172e+03, 1.055633975192606e+03, 0.000000000000000e+00, 9.848991672132778e+02, 4.514078144298648e+03, 0.000000000000000e+00, 4.335628311309226e+03, 1.083658742438832e+00, 0.000000000000000e+00, -2.038218295829702e+00, 3.066184575223513e+03, 0.000000000000000e+00, -1.404655442489185e+02, 3.066184575223507e+03, 0.000000000000000e+00, -1.404655442489380e+02, -2.633932140808058e-02, 0.000000000000000e+00, -2.589694283580622e-02, -2.634662600584942e-02, 0.000000000000000e+00, -2.591764044886726e-02, -2.642431649547667e-02, 0.000000000000000e+00, -2.598537765292364e-02, -2.641701662900484e-02, 0.000000000000000e+00, -2.597625642097502e-02, -2.642939584203648e-02, 0.000000000000000e+00, -2.598844906667721e-02, -2.642939584203648e-02, 0.000000000000000e+00, -2.598844906667721e-02, -3.124846463875448e-02, 0.000000000000000e+00, -3.070843545918816e-02, -4.173486134826063e-02, 0.000000000000000e+00, -4.103292624622897e-02, -3.760165803051264e-02, 0.000000000000000e+00, -3.695695409286859e-02, -3.488775138609625e-02, 0.000000000000000e+00, -3.441754449508996e-02, -3.635541328881565e-02, 0.000000000000000e+00, -3.568386865165887e-02, -3.635541328881566e-02, 0.000000000000000e+00, -3.568386865165887e-02, -2.671872481067498e-02, 0.000000000000000e+00, -2.581647045791769e-02, -1.186120630742268e+00, 0.000000000000000e+00, -1.167676985046211e+00, -6.879636767365167e-01, 0.000000000000000e+00, -6.590876457029210e-01, -2.785405860433920e-01, 0.000000000000000e+00, -2.733598000845633e-01, -4.218562912399125e-01, 0.000000000000000e+00, -4.229386059213702e-01, -4.218562912399128e-01, 0.000000000000000e+00, -4.229386059213702e-01, -8.572308286074273e-02, 0.000000000000000e+00, -8.077656249140742e-02, -1.716888867989393e+01, 0.000000000000000e+00, -8.233553930769817e+00, 1.457733887846590e+00, 0.000000000000000e+00, 8.199681630986424e-01, -3.495125731628632e-01, 0.000000000000000e+00, -2.976507873977738e-01, -3.311964458357777e+00, 0.000000000000000e+00, -5.738916563178594e+00, -3.311964458357768e+00, 0.000000000000000e+00, -5.738916563178583e+00, 1.686722113198665e+02, 0.000000000000000e+00, 1.596124570952094e+02, 2.076925424733473e+04, 0.000000000000000e+00, 2.889900458997226e+04, 3.983134898652223e+03, 0.000000000000000e+00, 3.758492750602838e+03, -6.291872092658737e+00, 0.000000000000000e+00, -3.969984482032528e+01, 5.049115895439347e+03, 0.000000000000000e+00, 8.297268811388699e+00, 5.049115895439357e+03, 0.000000000000000e+00, 8.297268811471788e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_r4scan_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r4scan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.011950069073550e-03, 1.011778018073025e-03, 1.011947874315452e-03, 1.011776446081500e-03, 1.011913980738712e-03, 1.011735450801031e-03, 1.011937750289463e-03, 1.011765946022314e-03, 1.011949451584084e-03, 1.011734120128866e-03, 1.011949451584084e-03, 1.011734120128866e-03, 6.413183030564908e-03, 6.340286105622536e-03, 6.435982033112490e-03, 6.349995243102192e-03, 6.807830134813937e-03, 6.858253505720575e-03, 6.906267932903903e-03, 6.857118447101464e-03, 6.368820329474641e-03, 7.173887440111850e-03, 6.368820329474641e-03, 7.173887440111850e-03, 1.489731166196742e-02, 1.512779184788693e-02, 1.485122427329563e-02, 1.508645291009054e-02, 1.402994536725142e-02, 1.421078896553685e-02, 1.527651784143145e-02, 1.554239963504100e-02, 1.498925949708498e-02, 1.634286959173432e-02, 1.498925949708498e-02, 1.634286959173432e-02, 1.562841900227238e-01, 1.143588849103780e-01, 1.574180970952519e-01, 1.190399664711150e-01, 2.015010479552197e-03, 3.124990878896336e-03, 2.312339186860001e-02, 6.705751480058023e-02, 1.523915261010827e-01, 2.298305689250563e-03, 1.523915261010826e-01, 2.298305689250563e-03, 3.624494664672255e-03, 2.623681602325096e-02, 1.392221326543654e-03, 5.342055114337011e-03, 1.224492725161207e-03, 2.095816239995162e-03, 1.166908116911947e-05, 1.588062861488039e-05, 2.905815760718179e-04, 4.295267561314041e-06, 2.905815760717984e-04, 4.295267561314021e-06, 4.129395898927511e-03, 4.129510519967116e-03, 4.132456219849553e-03, 4.132467984468973e-03, 4.129258192221554e-03, 4.129390659928647e-03, 4.131894935962600e-03, 4.132087945839083e-03, 4.131192340005640e-03, 4.131031154847933e-03, 4.131192340005640e-03, 4.131031154847933e-03, 1.259837425359605e-02, 1.248356864598140e-02, 1.197453978581026e-02, 1.188506702099475e-02, 1.212772533362499e-02, 1.216473108883540e-02, 1.154948807767736e-02, 1.157617118943322e-02, 1.255235945402774e-02, 1.220510938554135e-02, 1.255235945402774e-02, 1.220510938554135e-02, 5.325856648019082e-02, 5.270931155206097e-02, 5.510907945942536e-02, 5.445025766611516e-02, 6.095196259823592e-02, 6.206914113438691e-02, 8.145281351377562e-02, 6.969718283476072e-02, 4.816621475057206e-02, 5.505220702004324e-02, 4.816621475057206e-02, 5.505220702004323e-02, 1.508777636327114e-02, 1.289304451967388e-02, 1.492120119333272e-01, 1.489661899013043e-01, 7.289798789843374e-03, 1.328104970026451e-02, 2.145371335834843e-02, 2.145947276854068e-02, 6.178562214604287e-02, 1.132400226316339e-01, 6.178562214604191e-02, 1.132400226316345e-01, 4.943129921509771e-07, 5.691478512215676e-07, 2.784747628396187e-06, 2.206697095200403e-06, 2.236118229293471e-05, 2.349451864927094e-05, 2.306183080646910e-03, 6.826306985805953e-03, 3.829169665465289e-07, 6.474952922252346e-04, 3.829169665465314e-07, 6.474952922252407e-04, 4.263521703773738e-02, 4.240804534403737e-02, 4.199675527433717e-02, 4.181134556373218e-02, 4.235093510445490e-02, 4.214761184114783e-02, 4.253802992133054e-02, 4.232178656885058e-02, 4.245889886128525e-02, 4.224766837077978e-02, 4.245889886128525e-02, 4.224766837077980e-02, 4.651670328120362e-02, 4.617085862867161e-02, 4.152268702258689e-02, 4.135283134872485e-02, 4.236533705835936e-02, 4.218532268865689e-02, 4.374016278336221e-02, 4.359486231476131e-02, 4.326622480105214e-02, 4.296098463504538e-02, 4.326622480105215e-02, 4.296098463504538e-02, 5.593960770049749e-02, 5.498654868563654e-02, 1.026019011439768e-01, 1.027395822824500e-01, 1.013872221273248e-01, 1.001068235445840e-01, 9.102321403093240e-02, 9.067551590660752e-02, 9.462275362422858e-02, 9.474371213312603e-02, 9.462275362422855e-02, 9.474371213312602e-02, 6.345446076430492e-02, 6.125271204107609e-02, 7.519105893014942e-03, 4.948197907291728e-03, 1.990928278198312e-03, 2.484536294740029e-03, 9.897866752364126e-02, 9.045200624193948e-02, 1.344046419006293e-02, 2.328671554181133e-02, 1.344046419006291e-02, 2.328671554181129e-02, 8.793065454746475e-06, 8.218954578852565e-06, 4.367229258338319e-08, 2.425880919336183e-08, 3.669885994794146e-05, 3.849583747320368e-05, 1.967307904550335e-02, 1.056797508586752e-01, 9.442125210421756e-07, 5.478072181953838e-04, 9.442125210421730e-07, 5.478072181953619e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
