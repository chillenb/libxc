
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_r2scan01_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scan01", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.170118473753291e+01, -2.170130437150348e+01, -2.170183111527732e+01, -2.247101985058030e+01, -2.247177800709419e+01, -2.324268142333106e+01, -3.402421709712929e+00, -3.766105205887187e+00, -3.766585173402737e+00, -3.766732617647796e+00, -3.766325669671105e+00, -3.402815681541147e+00, -5.310264771628603e-01, -6.253605860827112e-01, -6.986034280212388e-01, -6.106096895246553e-01, -5.170379359830533e-01, -7.053259413460424e-01, -1.604995002435254e-01, -1.635108211708104e-01, -7.066366730239970e-01, -1.361525816044937e-01, -1.759190536795791e-01, -1.726334783394200e-01, -3.275295249624579e-03, -4.022631866501241e-03, -2.806216493984614e-02, -1.499323900345495e-03, -2.454868368297474e-03, -2.454868368297474e-03, -5.669020401279267e+00, -5.670114039027997e+00, -5.669075296435043e+00, -5.670040670559274e+00, -5.551049840027974e+00, -5.551151929141071e+00, -2.115662312237330e+00, -2.131831046408172e+00, -2.103799081065715e+00, -2.118119877819924e+00, -1.906248938599584e+00, -2.130358572801335e+00, -5.967291313918994e-01, -6.936735914393457e-01, -5.889134131261431e-01, -6.133495613459321e-01, -6.121190659696811e-01, -6.486930980092167e-01, -9.062583806764843e-02, -1.564804402649794e-01, -8.325846759329422e-02, -2.086482507408975e+00, -1.098714301826628e-01, -1.098714301826628e-01, -1.447867472808687e-03, -1.435765374143073e-03, -1.212401502708699e-03, -4.723346532786866e-02, -1.545273379036285e-03, -1.545273379036285e-03, -6.423270168158682e-01, -6.385505838162961e-01, -6.294965078400637e-01, -6.367536026561689e-01, -6.310392597779767e-01, -6.357120221486452e-01, -6.249060974897975e-01, -4.919190347650521e-01, -5.303374458632935e-01, -5.862425118353438e-01, -5.730859212015429e-01, -5.493340122933619e-01, -6.995372198366879e-01, -2.330515659552025e-01, -2.445775588610761e-01, -3.353794851855812e-01, -3.257144539533124e-01, -2.858548109739889e-01, -4.911117199801327e-01, -2.441565437625136e-02, -4.088116920782862e-02, -3.631761142377015e-01, -7.113983171293523e-02, -7.113983171293523e-02, -6.197070081141985e-03, -2.266204238705584e-04, -1.392664637253119e-03, -4.972882070243227e-02, -1.401435200780606e-03, -1.965154627877415e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_r2scan01_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scan01", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.211338043825074e+01, -3.211306196554727e+01, -3.211344351751922e+01, -3.211310783832025e+01, -3.211368103965322e+01, -3.211343816863145e+01, -3.211296501604462e+01, -3.013749898970260e+01, -3.211341520545244e+01, -3.013822055600959e+01, -3.013854602242096e+01, -3.013822055600959e+01, -4.689235703925292e+00, -4.804653973609756e+00, -4.689349599682314e+00, -4.689160981685528e+00, -4.691538516106039e+00, -4.691978762528918e+00, -4.691138968662770e+00, -4.691207399502995e+00, -4.688230408037973e+00, -4.693264907966102e+00, -4.803389908801442e+00, -4.693264907966102e+00, -7.904133089521063e-01, -7.990520046370309e-01, -7.876417377287626e-01, -8.414077063291195e-01, -8.004567842716060e-01, -7.918236140180379e-01, -8.096718443950266e-01, -7.666177765336913e-01, -8.088762702538506e-01, -7.137024136555252e-01, -8.511545081923131e-01, -7.607391496211308e-01, -1.834300755831105e-01, -2.067864113233852e-01, -1.866889208134532e-01, -2.132184976128046e-01, -8.383525497328745e-01, -8.678764276838024e-01, -9.366347960487582e-02, -1.056448707166060e-01, -2.000852502520850e-01, -4.747491233641528e-03, -2.000852502520848e-01, -9.390807754901694e-02, 1.334978008649011e-02, 1.445709006926982e-02, -5.939814650503374e-03, 1.557324245987490e-02, -3.310693583592711e-02, 7.179688897896187e-02, 6.527954551064356e-03, 6.384219087330324e-03, 1.143095498924877e-02, 5.577438003289774e-03, 1.143095498924877e-02, 5.577438003289777e-03, -7.406290265365118e+00, -7.404522872680935e+00, -7.408744102659115e+00, -7.406893489605798e+00, -7.406449202517073e+00, -7.404620611121747e+00, -7.408553971030839e+00, -7.406773459929100e+00, -7.727997555113981e+00, -7.405710850998575e+00, -7.407530193286648e+00, -7.726134542327873e+00, -2.598083157664822e+00, -2.598861628068601e+00, -2.626104913308094e+00, -2.626003364056126e+00, -2.573808067111402e+00, -2.581544797553991e+00, -2.598402279150200e+00, -2.606352623772741e+00, -2.631808197763343e+00, -2.613060742909139e+00, -2.631808197763343e+00, -2.615705647231638e+00, -8.129576357763261e-01, -8.828070570482615e-01, -9.000812821949934e-01, -9.013629385967120e-01, -7.204030670809599e-01, -7.554785497620630e-01, -7.663070815079089e-01, -7.965321597888191e-01, -8.516321133046907e-01, -8.756712072054842e-01, -8.516321133046909e-01, -8.046384492543260e-01, -5.570054177475580e-03, -7.251063108036063e-03, -1.797704418341775e-01, -1.710377143176633e-01, 1.264602234737079e-02, 4.125180418740726e-04, -2.675606307477099e+00, -2.674479737994582e+00, -4.766136325045559e-02, -7.515221969819567e-02, -4.766136325045573e-02, -7.515221969819566e-02, -2.555966924339385e-03, 4.433078050965074e-03, 6.157239066188371e-03, 6.210561221064048e-03, 4.971455700995176e-03, 5.422255347031052e-03, 5.223380964639961e-02, -5.572602865189540e-02, 4.358060851924060e-03, 7.517352546895066e-03, 4.358060851924060e-03, 7.517352546895220e-03, -8.491714341357647e-01, -8.526081086912564e-01, -8.393453196771834e-01, -8.428189178417527e-01, -8.571240037440079e-01, -8.602762348867312e-01, -8.572235365762285e-01, -8.490192845172926e-01, -8.571540915049357e-01, -8.603214607558027e-01, -8.571540915049357e-01, -8.475994272084274e-01, -8.256754518520486e-01, -8.285760216400918e-01, -6.731957338054666e-01, -7.256211640205658e-01, -7.167275161106303e-01, -7.832280865668578e-01, -7.603308668861084e-01, -7.631566367833671e-01, -7.381922057525314e-01, -7.411936241701043e-01, -7.381922057525313e-01, -7.981370051955801e-01, -9.378557956744424e-01, -1.008951357011601e+00, -2.470048839065724e-01, -2.492093016674766e-01, -3.000742089490105e-01, -3.247972869287051e-01, -4.575169115440603e-01, -4.621124572864809e-01, -3.895810923467391e-01, -3.897518456534614e-01, -3.895810923467390e-01, -3.825730012508736e-01, -6.100958411235723e-01, -6.160697210045070e-01, -3.248667177835732e-02, -3.270924410528992e-02, 7.201063421882406e-02, 6.976033017800212e-02, -4.479831691023154e-01, -4.599531371989026e-01, 1.759248081932762e-02, 1.850201635952741e-04, 1.759248081932737e-02, 1.850201635955831e-04, -8.108589265193892e-03, -8.402643468135313e-03, 9.669253004920721e-04, 9.696458666254721e-04, -1.794590280278609e-03, -1.908696489376539e-03, -6.620280702889492e-02, -6.736794106502286e-02, 4.436327195918064e-03, 6.704158997868795e-03, 4.436327195918363e-03, -3.151661359203922e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_r2scan01_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scan01", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.422391775898479e-08, 0.000000000000000e+00, -2.422308576222891e-08, -2.422346434946299e-08, 0.000000000000000e+00, -2.422275647547650e-08, -2.422200462052841e-08, 0.000000000000000e+00, -2.422066691285213e-08, -2.422711570295833e-08, 0.000000000000000e+00, -1.177284062215004e-08, -2.422364417243359e-08, 0.000000000000000e+00, -1.177226453455613e-08, -1.177153603934442e-08, 0.000000000000000e+00, -1.177226453455613e-08, -1.429243038305256e-05, 0.000000000000000e+00, -1.723725996790551e-05, -1.429292734723502e-05, 0.000000000000000e+00, -1.429303124681462e-05, -1.430286086086482e-05, 0.000000000000000e+00, -1.430404092378186e-05, -1.429442452795468e-05, 0.000000000000000e+00, -1.429363983291985e-05, -1.430048765732309e-05, 0.000000000000000e+00, -1.430153153446754e-05, -1.723439574469457e-05, 0.000000000000000e+00, -1.430153153446754e-05, -3.497134061619661e-03, 0.000000000000000e+00, -3.683407313043498e-03, -3.450834922036407e-03, 0.000000000000000e+00, -9.254116919293320e-03, -1.005944533812850e-02, 0.000000000000000e+00, -1.031085856426280e-02, -9.970182014877258e-03, 0.000000000000000e+00, -3.240472496115536e-03, -3.732013634928944e-03, 0.000000000000000e+00, -2.510241717631045e-03, -8.979226857271668e-03, 0.000000000000000e+00, -1.123987533679469e-02, -2.640343515524374e-01, 0.000000000000000e+00, -1.851029723802339e+00, -2.756818131962933e-01, 0.000000000000000e+00, -1.739764178725409e+00, -4.948068378675989e-03, 0.000000000000000e+00, -6.605264183673097e-04, -5.298837263728628e+00, 0.000000000000000e+00, -5.130274545786695e+00, -1.777412135480509e+00, 0.000000000000000e+00, -1.566758487670869e+01, -1.777412135480509e+00, 0.000000000000000e+00, -1.644518603970265e-01, -1.582801924770720e+04, 0.000000000000000e+00, -1.431732235247108e+04, -4.816283918679132e+03, 0.000000000000000e+00, -1.338537985222730e+04, -5.272634227846198e+00, 0.000000000000000e+00, -3.161172351899341e+02, -3.053320274218889e+04, 0.000000000000000e+00, -3.156798236294273e+04, -1.860250071493207e+04, 0.000000000000000e+00, -6.454062591563162e+04, -1.860250071493207e+04, 0.000000000000000e+00, -6.454062591563158e+04, -3.519567194030511e-06, 0.000000000000000e+00, -3.522968573672795e-06, -3.521277694438568e-06, 0.000000000000000e+00, -3.524624070464598e-06, -3.519708750249685e-06, 0.000000000000000e+00, -3.523059299594560e-06, -3.521173810698612e-06, 0.000000000000000e+00, -3.524560580588634e-06, -6.260425805717243e-06, 0.000000000000000e+00, -3.523790746257574e-06, -3.520404223509852e-06, 0.000000000000000e+00, -6.266706482954495e-06, -1.381240864702786e-04, 0.000000000000000e+00, -1.382375534036808e-04, -1.349527767291796e-04, 0.000000000000000e+00, -1.351582975716927e-04, -1.408159318687581e-04, 0.000000000000000e+00, -1.401493250278583e-04, -1.380047397540493e-04, 0.000000000000000e+00, -1.373205626217251e-04, -1.344134655856471e-04, 0.000000000000000e+00, -1.265741450554887e-04, -1.344134655856471e-04, 0.000000000000000e+00, -1.363524930901063e-04, -1.887271732734269e-02, 0.000000000000000e+00, -3.957910638314845e-02, -1.494577910759538e-02, 0.000000000000000e+00, -1.500501264049314e-02, -2.606076678557778e-02, 0.000000000000000e+00, -2.322866955775491e-02, -2.352481398594936e-02, 0.000000000000000e+00, -2.109459594661199e-02, -1.658253127785156e-02, 0.000000000000000e+00, -4.149111187328744e-02, -1.658253127785156e-02, 0.000000000000000e+00, -1.990373382757406e-02, -1.889770360958994e+01, 0.000000000000000e+00, -1.828562827648997e+01, -1.071178606486225e-01, 0.000000000000000e+00, -1.822106673624994e+00, -2.650380221580285e+01, 0.000000000000000e+00, -2.245989573028310e+01, -1.699253213541977e-04, 0.000000000000000e+00, -1.702507307096947e-04, -1.229817315892868e+01, 0.000000000000000e+00, -1.037446592300811e+01, -1.229817315892867e+01, 0.000000000000000e+00, -1.037446592300812e+01, -1.402322203461462e+05, 0.000000000000000e+00, -3.588292666310651e+04, -3.149839783478817e+04, 0.000000000000000e+00, -2.851733345322020e+04, -1.630418742464726e+05, 0.000000000000000e+00, -1.568048041697727e+05, -9.069056140810005e+01, 0.000000000000000e+00, -8.103975164103011e-01, -5.837196592982583e+04, 0.000000000000000e+00, -6.905953589264826e+04, -5.837196592982583e+04, 0.000000000000000e+00, -6.905953589264920e+04, -2.453334027239315e-02, 0.000000000000000e+00, -2.417967702875225e-02, -2.403733297005956e-02, 0.000000000000000e+00, -2.371756920124191e-02, -3.151554262333228e-02, 0.000000000000000e+00, -3.087042378357494e-02, -3.013827871162788e-02, 0.000000000000000e+00, -2.407401210221461e-02, -3.082420102382983e-02, 0.000000000000000e+00, -3.021008313975769e-02, -3.082420102382983e-02, 0.000000000000000e+00, -2.400973268990776e-02, -2.722537657241744e-02, 0.000000000000000e+00, -2.690004837535451e-02, -3.737187196177567e-02, 0.000000000000000e+00, -6.537181385381138e-02, -3.293398446616113e-02, 0.000000000000000e+00, -7.026063543261457e-02, -2.968607554376824e-02, 0.000000000000000e+00, -2.930816650907545e-02, -3.118229711744919e-02, 0.000000000000000e+00, -3.077513093738515e-02, -3.118229711744917e-02, 0.000000000000000e+00, -6.609604204208429e-02, -1.204281538320743e-02, 0.000000000000000e+00, -2.553949068267835e-02, -7.715480008454429e-01, 0.000000000000000e+00, -7.550989711230178e-01, -1.081835118404359e-01, 0.000000000000000e+00, -3.782360729972605e-01, -1.232763224796905e-01, 0.000000000000000e+00, -1.368916366385741e-01, -2.320454889233539e-01, 0.000000000000000e+00, -2.325978433744608e-01, -2.320454889233542e-01, 0.000000000000000e+00, -1.529533401042468e-01, -5.036219036430437e-02, 0.000000000000000e+00, -4.933083743173304e-02, -5.682023460363806e+00, 0.000000000000000e+00, -5.530346066726343e+00, -1.673825738436159e+02, 0.000000000000000e+00, -1.548788628748736e+02, -1.703754840168809e-01, 0.000000000000000e+00, -1.649526779651678e-01, -4.806458249470738e+01, 0.000000000000000e+00, -4.162208444015685e+01, -4.806458249470731e+01, 0.000000000000000e+00, -4.162208444015699e+01, -1.387577493654029e+03, 0.000000000000000e+00, -1.203504831358657e+03, -2.748417771321655e+05, 0.000000000000000e+00, -2.731293777683101e+05, -5.770428293304380e+05, 0.000000000000000e+00, -4.509621184912017e+05, -5.214236361561663e-01, 0.000000000000000e+00, -5.202334679982183e-01, -1.121862677624612e+05, 0.000000000000000e+00, -8.145476413379086e+04, -1.121862677624669e+05, 0.000000000000000e+00, -6.070267371747015e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_r2scan01_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scan01", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.863576868547785e-03, 1.863508040116474e-03, 1.863560397933790e-03, 1.863496081603653e-03, 1.863510428511186e-03, 1.863423676600403e-03, 1.863695635979355e-03, 9.571127024828834e-04, 1.863566637436669e-03, 9.571154357171627e-04, 9.570948653756450e-04, 9.571154357171627e-04, 5.133604168971521e-03, 5.660887214950159e-03, 5.133810208000218e-03, 5.133631575204739e-03, 5.137842491220141e-03, 5.138511007191422e-03, 5.135942488800982e-03, 5.135876236409467e-03, 5.133967815751238e-03, 5.139418138294684e-03, 5.657293408489194e-03, 5.139418138294684e-03, 8.008534892949178e-03, 8.548151374036181e-03, 7.862284724001120e-03, 2.402153908426604e-02, 2.413902392983099e-02, 2.423040900118212e-02, 2.420261354810914e-02, 7.035133407552602e-03, 8.869696465177750e-03, 4.819492098851227e-03, 2.389732947819493e-02, 2.453595195170430e-02, 9.478458935622741e-03, 8.685173185938930e-02, 1.031604008021916e-02, 8.608696275051678e-02, 1.915125864004424e-02, 2.453172327434770e-03, 9.901486232045099e-02, 1.001406599612699e-01, 8.450949071325338e-02, 1.116643367353664e-01, 8.450949071325335e-02, 4.390553280841748e-04, 2.576940321825398e-02, 2.796109216810319e-02, 3.183353201575948e-07, 3.080891395501973e-02, 2.653194328367660e-05, 1.196089272745314e-01, 1.082504850080627e-02, 1.064231796632143e-02, 2.151414457109318e-02, 1.378008912162759e-02, 2.151414457109318e-02, 1.378008912162759e-02, 4.101889459860413e-03, 4.102897770244402e-03, 4.105217895653564e-03, 4.106115512752486e-03, 4.102127324873242e-03, 4.103046733815586e-03, 4.104980708548447e-03, 4.105967308170551e-03, 6.991748227315147e-03, 4.104503564714791e-03, 4.103549937350970e-03, 6.993639898097636e-03, 8.862447136654154e-03, 8.868080793723370e-03, 8.848565195656004e-03, 8.854572918916141e-03, 8.871196659279603e-03, 8.874129150590047e-03, 8.859828901335290e-03, 8.862542519283033e-03, 8.848748200427995e-03, 7.479544007365223e-03, 8.848748200427995e-03, 8.860724582980043e-03, 3.241132759871983e-02, 6.260098302743439e-02, 3.223139499412576e-02, 3.236599274392588e-02, 3.367223768332130e-02, 3.334550105413842e-02, 3.409156693970167e-02, 3.361198343951044e-02, 3.190069648137804e-02, 6.384638630257745e-02, 3.190069648137804e-02, 3.295869302788342e-02, 1.173265851320670e-01, 1.168360596856729e-01, 3.811072321480527e-03, 8.116424508000367e-02, 1.214627521452733e-01, 1.206626202541978e-01, 1.014473318661521e-02, 1.015027503740887e-02, 1.152000357708790e-01, 1.161704043484997e-01, 1.152000357708789e-01, 1.161704043484998e-01, 1.299773963579078e-08, 6.036503147066353e-03, 9.949447408825000e-03, 9.423648524758965e-03, 2.151606269352919e-02, 2.457015747887618e-02, 1.349768085323957e-01, 1.566843094237176e-04, 8.219913718304295e-03, 2.512687262316989e-02, 8.219913718304293e-03, 2.512687262317022e-02, 4.008327664176327e-02, 3.994954543617925e-02, 3.908760828615684e-02, 3.900223303938129e-02, 5.030839661677373e-02, 4.985979274474906e-02, 4.836727706646347e-02, 3.971742801445653e-02, 4.933620878120417e-02, 4.892068685022609e-02, 4.933620878120417e-02, 3.958583280483022e-02, 4.107322190157248e-02, 4.096769289677633e-02, 3.769739065282941e-02, 6.160600616101761e-02, 3.782895794370755e-02, 7.633844001090866e-02, 3.840698911279588e-02, 3.831007413481751e-02, 3.803715095767212e-02, 3.794848127263895e-02, 3.803715095767212e-02, 7.666463403020748e-02, 3.004293205204627e-02, 6.027157964959975e-02, 6.864828511546038e-02, 6.836950700357890e-02, 1.471380498910060e-02, 5.992372250276039e-02, 3.992490341389211e-02, 4.964056158992484e-02, 5.498382611441791e-02, 5.505605113231260e-02, 5.498382611441795e-02, 3.259363057298514e-02, 3.964371813235118e-02, 3.961520188310326e-02, 2.638422944845509e-05, 2.639320508372034e-05, 1.238783753818467e-01, 1.265850239036668e-01, 5.355145659987973e-02, 5.408652249424248e-02, 1.377434529522928e-01, 1.408571226326345e-01, 1.377434529522926e-01, 1.408571226326351e-01, 3.770283392503617e-07, 4.135182668719240e-07, 1.697447484818951e-03, 1.698459475657659e-03, 1.870194505643962e-08, 2.383886921639605e-08, 3.427593643769229e-04, 4.053721453215692e-04, 1.341655196728093e-02, 2.282855949141153e-02, 1.341655196728155e-02, 1.421350379299310e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
