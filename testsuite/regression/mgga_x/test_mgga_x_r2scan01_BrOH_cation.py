
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_r2scan01_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scan01", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.318108073664358e+01, -2.318114978173600e+01, -2.318150804399158e+01, -2.318048186596762e+01, -2.318101223476755e+01, -2.318101223476755e+01, -3.399967982835853e+00, -3.400094552664657e+00, -3.403721911387196e+00, -3.404815876110382e+00, -3.403404949320904e+00, -3.403404949320904e+00, -5.938184976709062e-01, -5.931382640718970e-01, -5.776581335127693e-01, -5.885953543524171e-01, -5.872990028313041e-01, -5.872990028313041e-01, -1.798889412658643e-01, -1.819701309419963e-01, -6.497223036177708e-01, -1.155670523301873e-01, -1.652158185627476e-01, -1.652158185627476e-01, -3.044282427252477e-03, -3.107159203052528e-03, -2.435333287604854e-02, -1.226317545340088e-03, -2.031000332764961e-03, -2.031000332764959e-03, -5.667959557003839e+00, -5.669065108759884e+00, -5.668036547205546e+00, -5.669011493438627e+00, -5.668506523484936e+00, -5.668506523484936e+00, -2.076410079012891e+00, -2.099515539869818e+00, -2.070015307673321e+00, -2.090637738504190e+00, -2.092479605761125e+00, -2.092479605761125e+00, -6.153300841593913e-01, -6.677918338709504e-01, -5.454432499591789e-01, -5.581875461170553e-01, -6.283696814589023e-01, -6.283696814589024e-01, -7.480986602590395e-02, -1.737158603828397e-01, -6.847546494239402e-02, -1.914037214726305e+00, -9.577238794475607e-02, -9.577238794475609e-02, -8.727019518314943e-04, -1.199646740164812e-03, -9.926407680287070e-04, -4.354727553023849e-02, -1.313490584451849e-03, -1.313490584451849e-03, -6.397662099987831e-01, -6.361329590233196e-01, -6.374121374947070e-01, -6.384646894477217e-01, -6.379365335841187e-01, -6.379365335841187e-01, -6.198014175007314e-01, -5.319668750036042e-01, -5.574008502198040e-01, -5.823975104887593e-01, -5.694592900357416e-01, -5.694592900357416e-01, -6.907497794995281e-01, -2.285890987878682e-01, -2.724625294307689e-01, -3.518302001817809e-01, -3.123748399607964e-01, -3.123748399607964e-01, -4.767534845609420e-01, -2.338970260450130e-02, -3.331318055716151e-02, -3.448468800200830e-01, -5.888629396338932e-02, -5.888629396338933e-02, -4.053343518711921e-03, -2.207701707153044e-04, -5.955031312037970e-04, -5.656304146315871e-02, -1.186189719949625e-03, -1.186189719949623e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_r2scan01_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scan01", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.015007242918371e+01, -3.015017343848456e+01, -3.015019755745144e+01, -3.015026430303972e+01, -3.015059968238663e+01, -3.015083997400416e+01, -3.014918787609152e+01, -3.014904023606874e+01, -3.015014749453497e+01, -3.014976089700093e+01, -3.015014749453497e+01, -3.014976089700093e+01, -4.804408936174404e+00, -4.804521299594582e+00, -4.804535567748918e+00, -4.804626207418682e+00, -4.807260930861654e+00, -4.807872544730718e+00, -4.805408385405919e+00, -4.805757657126062e+00, -4.803328231988177e+00, -4.808244322665818e+00, -4.803328231988177e+00, -4.808244322665818e+00, -8.241331662863275e-01, -8.288765575025058e-01, -8.224914672947373e-01, -8.280788715499039e-01, -8.000119114154568e-01, -7.944360725801968e-01, -8.076680406291813e-01, -8.107151118846174e-01, -8.352883186578409e-01, -7.740046272023133e-01, -8.352883186578409e-01, -7.740046272023133e-01, -1.612950820844034e-01, -1.954970326495998e-01, -1.667854676037980e-01, -2.000001356545156e-01, -8.359315682535298e-01, -8.777054396438571e-01, -1.465588715089744e-01, -1.282680842885097e-01, -1.690641900391050e-01, -1.109168801102213e-01, -1.690641900391049e-01, -1.109168801102213e-01, 1.684007995913822e-02, 2.893691583751910e-02, 5.985997199184689e-03, 2.221568894438415e-02, -3.484999955930126e-02, -3.560343903033823e-02, -2.182389074585992e-03, -2.091373152345004e-03, -1.426876486923179e-03, -1.952840690493925e-03, -1.426876486923372e-03, -1.952840690493925e-03, -7.406661997225398e+00, -7.404873067953929e+00, -7.409115311601805e+00, -7.407242978730384e+00, -7.406812371038216e+00, -7.404964637576454e+00, -7.408916948300975e+00, -7.407117112335706e+00, -7.407908151099420e+00, -7.406061775306110e+00, -7.407908151099420e+00, -7.406061775306110e+00, -2.544417915188495e+00, -2.546668677024083e+00, -2.581279626621404e+00, -2.582404422927822e+00, -2.521996934782218e+00, -2.530505798119498e+00, -2.555892845951177e+00, -2.564479498169895e+00, -2.582731828469423e+00, -2.567989703078543e+00, -2.582731828469423e+00, -2.567989703078543e+00, -8.194502144770782e-01, -8.173441493723841e-01, -9.248460369094452e-01, -9.251468829231452e-01, -7.364148520418289e-01, -7.685142387635761e-01, -8.055946198292168e-01, -8.326538508445862e-01, -8.570903236618687e-01, -8.132785805727729e-01, -8.570903236618688e-01, -8.132785805727730e-01, -9.506577052658811e-02, -9.853223035342597e-02, -1.205539368088051e-01, -1.216069558127487e-01, -9.109843582502951e-02, -9.162597600172723e-02, -2.831525392782070e+00, -2.830388433042986e+00, -8.832351637578598e-02, -7.314776995999393e-02, -8.832351637578457e-02, -7.314776995999341e-02, -1.580535692019816e-03, -1.643481206330726e-03, -2.170093893070508e-03, -2.202399774925517e-03, -1.657160835615093e-03, -1.810808692216773e-03, -6.359873832947747e-02, -5.910130682656961e-02, -1.662770261343599e-03, 1.031563622424652e-03, -1.662770261343599e-03, 1.031563622424701e-03, -8.523611028587987e-01, -8.557312669862237e-01, -8.415036672901979e-01, -8.449594139390300e-01, -8.452742014027318e-01, -8.487254252524462e-01, -8.484603010346303e-01, -8.518399059811599e-01, -8.468647266504722e-01, -8.502790183972131e-01, -8.468647266504722e-01, -8.502790183972131e-01, -8.324558802283512e-01, -8.351269135247511e-01, -6.714744975382960e-01, -6.749346135295919e-01, -7.162074185074601e-01, -7.199367759107741e-01, -7.614964200524063e-01, -7.643322701655656e-01, -7.385772539725391e-01, -7.415855052649745e-01, -7.385772539725391e-01, -7.415855052649745e-01, -9.713422786238886e-01, -9.726039725545496e-01, -2.214793957248488e-01, -2.234103692187868e-01, -2.928466673455128e-01, -2.990809575542887e-01, -4.545341007575632e-01, -4.576065051206571e-01, -3.723088719859957e-01, -3.727132993241945e-01, -3.723088719859957e-01, -3.727132993241945e-01, -6.029698077166397e-01, -6.094582319248545e-01, -1.562126270728191e-02, -2.387249568141065e-02, -4.770149189910681e-02, -4.902020756679296e-02, -4.498716163929857e-01, -4.587039954443965e-01, -7.224068466519708e-02, -7.239695515281189e-02, -7.224068466519711e-02, -7.239695515281193e-02, -6.924549706705517e-03, -7.262675718234060e-03, -4.057248142056051e-04, -4.307737890613990e-04, -8.464947190642718e-04, -9.434697157721123e-04, -6.359278004264564e-02, -7.902376033041700e-03, -1.643088653288133e-03, 7.122417997082628e-04, -1.643088653288131e-03, 7.122417997081212e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_r2scan01_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scan01", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.254042296756544e-08, 0.000000000000000e+00, -1.253788653816036e-08, -1.254028434781417e-08, 0.000000000000000e+00, -1.253778617358283e-08, -1.253940554619035e-08, 0.000000000000000e+00, -1.253664958562052e-08, -1.254095660433996e-08, 0.000000000000000e+00, -1.253862915865998e-08, -1.254035228905841e-08, 0.000000000000000e+00, -1.253751955287064e-08, -1.254035228905841e-08, 0.000000000000000e+00, -1.253751955287064e-08, -3.043563710763124e-05, 0.000000000000000e+00, -3.043449453209799e-05, -3.043970823703338e-05, 0.000000000000000e+00, -3.043734760365538e-05, -3.051912920497195e-05, 0.000000000000000e+00, -3.053217722478013e-05, -3.047488764521165e-05, 0.000000000000000e+00, -3.047449887399828e-05, -3.044595995822273e-05, 0.000000000000000e+00, -3.054122162034780e-05, -3.044595995822273e-05, 0.000000000000000e+00, -3.054122162034780e-05, -8.649275914033699e-03, 0.000000000000000e+00, -8.796758439058397e-03, -8.616144438565515e-03, 0.000000000000000e+00, -8.780914353415395e-03, -8.172400448208661e-03, 0.000000000000000e+00, -8.167745161745671e-03, -8.386594298063085e-03, 0.000000000000000e+00, -8.507834332725532e-03, -8.832478848636981e-03, 0.000000000000000e+00, -8.850266823134504e-03, -8.832478848636981e-03, 0.000000000000000e+00, -8.850266823134504e-03, -3.717061630929011e+00, 0.000000000000000e+00, -2.375118356335143e+00, -3.641805192316403e+00, 0.000000000000000e+00, -2.360007627965103e+00, -2.454918594438879e-03, 0.000000000000000e+00, -2.898957934684148e-03, -1.303699454180973e+00, 0.000000000000000e+00, -3.593717791378095e+00, -3.214282626982123e+00, 0.000000000000000e+00, 1.792977163790825e-01, -3.214282626982122e+00, 0.000000000000000e+00, 1.792977163790823e-01, -1.859149460706422e+04, 0.000000000000000e+00, -2.466417926249783e+04, -8.252179585499587e+03, 0.000000000000000e+00, -1.735189681323453e+04, -2.361651684542069e+00, 0.000000000000000e+00, -7.360272063289447e+00, 5.127590837900273e+02, 0.000000000000000e+00, 3.582609672845519e+02, -2.658649872837343e+03, 0.000000000000000e+00, 1.888594266772535e+03, -2.658649872837105e+03, 0.000000000000000e+00, 1.888594266772538e+03, -3.537062701708746e-06, 0.000000000000000e+00, -3.539472030204698e-06, -3.538620303271949e-06, 0.000000000000000e+00, -3.540977418153513e-06, -3.536793622120933e-06, 0.000000000000000e+00, -3.539267653182664e-06, -3.538142096477906e-06, 0.000000000000000e+00, -3.540646990988893e-06, -3.538126272199608e-06, 0.000000000000000e+00, -3.540269668833748e-06, -3.538126272199608e-06, 0.000000000000000e+00, -3.540269668833748e-06, -2.008441440659930e-04, 0.000000000000000e+00, -1.988445532216901e-04, -1.859950341327271e-04, 0.000000000000000e+00, -1.846004423390878e-04, -1.957039171532028e-04, 0.000000000000000e+00, -1.954807786247713e-04, -1.821426570926489e-04, 0.000000000000000e+00, -1.817402732558646e-04, -1.953968341211850e-04, 0.000000000000000e+00, -1.916023320811634e-04, -1.953968341211850e-04, 0.000000000000000e+00, -1.916023320811634e-04, -3.373388702282008e-02, 0.000000000000000e+00, -3.355887670047780e-02, -2.928310146887917e-02, 0.000000000000000e+00, -2.870981832541317e-02, -5.580305597396808e-02, 0.000000000000000e+00, -4.848472215735857e-02, -6.469749484216251e-02, 0.000000000000000e+00, -5.506965064049538e-02, -2.695804710116166e-02, 0.000000000000000e+00, -3.648487836280834e-02, -2.695804710116167e-02, 0.000000000000000e+00, -3.648487836280834e-02, -2.716186913878479e+00, 0.000000000000000e+00, -2.132427770810924e+00, -3.291815615407867e+00, 0.000000000000000e+00, -3.250808089960767e+00, -1.378064963272118e+00, 0.000000000000000e+00, -2.700162098744742e+00, -4.318783885648107e-04, 0.000000000000000e+00, -4.325326497407577e-04, -6.705437126622555e+00, 0.000000000000000e+00, -1.114477155626784e+01, -6.705437126622487e+00, 0.000000000000000e+00, -1.114477155626792e+01, 1.743862675796263e+03, 0.000000000000000e+00, 1.496395383418505e+03, 9.579911661328831e+02, 0.000000000000000e+00, 9.097426412598996e+02, 2.774138690234249e+03, 0.000000000000000e+00, 2.819769633370169e+03, 4.364776995725068e-02, 0.000000000000000e+00, -5.122245611918465e+00, 3.025882017937193e+03, 0.000000000000000e+00, -2.350089450178084e+04, 3.025882017937187e+03, 0.000000000000000e+00, -2.350089450178114e+04, -2.633955763473330e-02, 0.000000000000000e+00, -2.589713936476321e-02, -2.633914221098570e-02, 0.000000000000000e+00, -2.591060597774312e-02, -2.642169497944194e-02, 0.000000000000000e+00, -2.598291216328081e-02, -2.641643305143280e-02, 0.000000000000000e+00, -2.597566765826214e-02, -2.642799881833278e-02, 0.000000000000000e+00, -2.598710631156786e-02, -2.642799881833278e-02, 0.000000000000000e+00, -2.598710631156787e-02, -3.125055772178733e-02, 0.000000000000000e+00, -3.071036390241302e-02, -4.130699816167271e-02, 0.000000000000000e+00, -4.061841399350179e-02, -3.735785180062211e-02, 0.000000000000000e+00, -3.672218101362371e-02, -3.478166859027742e-02, 0.000000000000000e+00, -3.431428776078647e-02, -3.618333913630798e-02, 0.000000000000000e+00, -3.551636117518366e-02, -3.618333913630799e-02, 0.000000000000000e+00, -3.551636117518368e-02, -2.678852771770232e-02, 0.000000000000000e+00, -2.587914737237128e-02, -1.121891638345017e+00, 0.000000000000000e+00, -1.105302024768569e+00, -6.655505550026133e-01, 0.000000000000000e+00, -6.382149234389382e-01, -2.758548888020378e-01, 0.000000000000000e+00, -2.706925469022286e-01, -4.141044927162720e-01, 0.000000000000000e+00, -4.152433749407752e-01, -4.141044927162721e-01, 0.000000000000000e+00, -4.152433749407753e-01, -8.487334042845278e-02, 0.000000000000000e+00, -7.997212623051467e-02, -7.130217112924109e+01, 0.000000000000000e+00, -4.101948971651910e+01, -1.623359940046282e+00, 0.000000000000000e+00, -2.439508476654214e+00, -3.460683016299985e-01, 0.000000000000000e+00, -2.956782184305287e-01, -5.445558108021245e+00, 0.000000000000000e+00, -8.382322014269571e+00, -5.445558108021228e+00, 0.000000000000000e+00, -8.382322014269553e+00, 1.526090970803131e+02, 0.000000000000000e+00, 1.462625600752592e+02, 2.063815498010448e+04, 0.000000000000000e+00, 2.880559058986899e+04, -4.147866340945160e+03, 0.000000000000000e+00, -3.253553382553986e+03, -1.004746468238540e+01, 0.000000000000000e+00, -4.447543415691750e+01, 4.944628160284949e+03, 0.000000000000000e+00, -2.583996004513638e+04, 4.944628160284958e+03, 0.000000000000000e+00, -2.583996004513515e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_r2scan01_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scan01", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_r2scan01_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scan01", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.007582844334149e-03, 1.007412299475719e-03, 1.007580827087282e-03, 1.007410856106250e-03, 1.007547499856618e-03, 1.007370672174241e-03, 1.007569279525506e-03, 1.007398628287959e-03, 1.007582338543479e-03, 1.007367815224875e-03, 1.007582338543479e-03, 1.007367815224875e-03, 9.189646289409104e-03, 9.185328151999921e-03, 9.191504382844693e-03, 9.186268515896451e-03, 9.223995007500119e-03, 9.228867053885174e-03, 9.224210778789288e-03, 9.221387567745709e-03, 9.187271484625146e-03, 9.249906649103138e-03, 9.187271484625146e-03, 9.249906649103138e-03, 1.487188647483912e-02, 1.510510029269382e-02, 1.482533836338501e-02, 1.506312628893251e-02, 1.402190889177312e-02, 1.418839738812287e-02, 1.526151531747815e-02, 1.553993997152636e-02, 1.496696439056011e-02, 1.642866108400174e-02, 1.496696439056011e-02, 1.642866108400174e-02, 1.488602166691568e-01, 1.092297492385669e-01, 1.508648984583235e-01, 1.139393608265814e-01, 2.039581694479682e-03, 3.156860558481504e-03, 2.599121156099320e-02, 6.924330367342575e-02, 1.460397460071923e-01, 2.741774459452097e-03, 1.460397460071923e-01, 2.741774459452097e-03, 2.971090265934638e-02, 4.731943270277850e-02, 1.540406925374115e-02, 3.916566805661210e-02, 3.124286475159936e-03, 5.141576916524160e-03, 1.189632834934263e-04, 1.649803770930107e-04, 3.398918084342647e-03, 4.153583645194610e-05, 3.398918084342385e-03, 4.153583645194592e-05, 4.117529396729023e-03, 4.117640779335481e-03, 4.120706597796069e-03, 4.120711167093388e-03, 4.117399365739316e-03, 4.117525655995250e-03, 4.120136320085086e-03, 4.120325454251223e-03, 4.119384771572459e-03, 4.119217940824984e-03, 4.119384771572459e-03, 4.119217940824984e-03, 1.237667987347876e-02, 1.226455742871674e-02, 1.177240021914603e-02, 1.168507616707925e-02, 1.190415343826487e-02, 1.194416899373581e-02, 1.134556417504753e-02, 1.137509860649812e-02, 1.234404185101835e-02, 1.199652064029839e-02, 1.234404185101835e-02, 1.199652064029839e-02, 5.292288912803893e-02, 5.237698354561433e-02, 5.505191087777953e-02, 5.439666236859100e-02, 6.170233587909121e-02, 6.138762487757211e-02, 6.784686724829701e-02, 6.718767308899389e-02, 4.790100111699326e-02, 5.473679049176867e-02, 4.790100111699327e-02, 5.473679049176866e-02, 1.953871340114711e-02, 1.650686845061618e-02, 1.391685118491571e-01, 1.393952340026376e-01, 9.641989230203851e-03, 1.737968047958233e-02, 2.063888286367242e-02, 2.064995639612263e-02, 6.304254258461420e-02, 1.216554096797014e-01, 6.304254258461268e-02, 1.216554096797019e-01, 4.825875608452909e-06, 5.564910141267058e-06, 2.714509656378111e-05, 2.144134341771274e-05, 2.224740565190639e-04, 2.293646242447590e-04, 3.554237016631125e-03, 1.089175619500132e-02, 3.639799660141295e-06, 8.709307805406191e-03, 3.639799660141317e-06, 8.709307805406297e-03, 4.263168528833621e-02, 4.240472935578865e-02, 4.196959844178268e-02, 4.178554873935291e-02, 4.233538166953819e-02, 4.213297283205323e-02, 4.252938662154753e-02, 4.231360468310846e-02, 4.244712820887762e-02, 4.223656183325912e-02, 4.244712820887762e-02, 4.223656183325912e-02, 4.651473746995567e-02, 4.616896796678955e-02, 4.110181274792520e-02, 4.093980830655188e-02, 4.207952226961083e-02, 4.190638248194638e-02, 4.357954148814071e-02, 4.343654115427788e-02, 4.304111270035129e-02, 4.274012451829070e-02, 4.304111270035129e-02, 4.274012451829071e-02, 5.586504902563310e-02, 5.492252133698787e-02, 9.709050061033656e-02, 9.728701021491531e-02, 9.788533280299334e-02, 9.674556690847423e-02, 8.974887100732168e-02, 8.939558593906771e-02, 9.260175580204880e-02, 9.273658445771220e-02, 9.260175580204877e-02, 9.273658445771223e-02, 6.266940347801735e-02, 6.051075362479899e-02, 2.288069875192050e-02, 1.435192144567447e-02, 3.955778319010298e-03, 4.791180384697779e-03, 9.758871277064948e-02, 8.958334376928836e-02, 1.870221577607568e-02, 3.102957537785466e-02, 1.870221577607564e-02, 3.102957537785461e-02, 6.827164259931131e-05, 6.236359349495763e-05, 4.364970462594547e-07, 2.409394379816189e-07, 4.247627957167443e-04, 4.403018382320182e-04, 2.798691534267362e-02, 1.164291672364507e-01, 8.854254810996247e-06, 7.413089475277291e-03, 8.854254810996219e-06, 7.413089475276941e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
