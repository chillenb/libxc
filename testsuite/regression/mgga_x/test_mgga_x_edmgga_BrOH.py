
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_edmgga_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_edmgga", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.928480082068642e+01, -1.928483039376265e+01, -1.928505291516057e+01, -1.928456743875272e+01, -1.928481562976966e+01, -1.928481562976966e+01, -3.543061771530966e+00, -3.543030504279330e+00, -3.542293649308039e+00, -3.544216378013437e+00, -3.543059107719977e+00, -3.543059107719977e+00, -7.398466093527838e-01, -7.402064905463666e-01, -7.527882193821681e-01, -7.546608641546583e-01, -7.399568153220807e-01, -7.399568153220807e-01, -2.425514386501095e-01, -2.422794023910012e-01, -8.531861989763181e-01, -2.210629387936738e-01, -2.423935942676350e-01, -2.423935942676350e-01, -7.397709636183648e-02, -7.479562706290302e-02, -1.341554093911004e-01, -6.572046833971051e-02, -7.413838161274677e-02, -7.413838161274677e-02, -9.451478860301053e+00, -6.619698736727913e+00, -3.810153792259231e+00, -1.028678688222926e+01, -4.315760769476677e+00, -5.939666601263476e+00, -1.429012152777316e+00, -2.647993467161504e+00, -2.312844032356579e+00, -2.331427844632695e+00, -2.316128785666716e+00, -2.060556400057775e+00, -1.274258801708616e+00, -1.004203733158642e+00, -1.094489374855550e+00, -5.936325934423683e-01, -6.498508251150911e-01, -6.932727028755846e-01, -7.112014117221505e-02, -4.319363692716568e-01, -7.005404616024112e-02, -2.009066292716628e+00, -1.893973378670550e-01, -1.647026781874335e-01, -1.289867809773187e-01, -2.143377318792154e+00, -2.948498108780878e-03, -4.419920224429844e-02, -8.884784178020126e-02, -3.584420290495497e-03, -2.733715134017964e+01, -4.350022612393852e-01, -4.358380258055714e-01, -4.435403271949399e+00, -4.361621325571770e-01, -8.146646522202884e+01, -4.233000460368579e-01, -5.495547093396379e-01, -9.934388018100556e-01, -4.454514686716148e-01, -6.209522836400907e-01, -1.243063859440945e+00, -1.429691640619359e+00, -1.687994031190534e-01, -2.004367213824994e-01, -2.572290467760988e-01, -4.577394642025911e-01, -4.089610373019791e-01, -5.036806043150831e-01, -2.334768231399032e-01, -1.637625746534692e-01, -3.568109237015978e-01, -5.760534325052030e-02, -1.554568752348569e-01, -8.717433758932403e-03, -2.139263508657355e-01, -2.045986817580222e-03, -5.631703171440705e-02, -3.046339194002826e-03, -3.046282625893142e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_edmgga_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_edmgga", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.912508609302881e+01, -2.912517780156243e+01, -2.912561641227674e+01, -2.912411415453501e+01, -2.912513420326237e+01, -2.912513420326237e+01, -4.576920821718943e+00, -4.576980588512942e+00, -4.578818307817023e+00, -4.576651557734694e+00, -4.576971580147783e+00, -4.576971580147783e+00, -8.322058306587286e-01, -8.305288049865869e-01, -7.887288484801668e-01, -7.952864425151033e-01, -8.315968365473574e-01, -8.315968365473574e-01, -2.175876571712178e-01, -2.200447512735124e-01, -1.026103772874108e+00, -1.748538306721002e-01, -2.182770923818318e-01, -2.182770923818318e-01, -3.842289322781958e-02, -3.912722010245950e-02, -8.683050575828834e-02, -2.978473112330900e-02, -3.881145165402555e-02, -3.881145165402556e-02, -8.831428896163644e+00, -7.040455418805937e+00, -5.095852650036148e+00, -9.450340045589753e+00, -6.660507787999379e+00, -6.899178727742695e+00, -1.907554965097057e+00, -2.583109884145513e+00, -2.383118770473110e+00, -2.403020556069190e+00, -2.425254773279699e+00, -2.407815109059849e+00, -1.146019363653757e+00, -9.733061274720515e-01, -1.001599867564926e+00, -7.786314967173206e-01, -7.942562716880112e-01, -7.916602316168320e-01, -9.509134697542443e-02, -3.704909305094441e-01, -9.344629544516031e-02, -2.605783886713465e+00, -1.378754852896132e-01, -1.011348674330730e-01, -7.846856526669815e-02, -1.267116990110320e+00, -3.931330832035649e-03, -5.901043902797799e-02, -5.171744439102420e-02, -4.779232150335331e-03, -1.731978401150210e+01, -5.800051347492817e-01, -5.811174795605378e-01, -3.275533768925668e+00, -5.815522439742978e-01, -4.946777741769202e+01, -5.644002084766406e-01, -6.386811934990180e-01, -9.170647955120310e-01, -6.797551799191254e-01, -7.033110609021485e-01, -1.107549279781455e+00, -1.293512797541444e+00, -2.252275201330911e-01, -2.673741887609329e-01, -3.448018660147228e-01, -4.323957227666330e-01, -3.980719421070946e-01, -5.726492285614959e-01, -1.687494153757092e-01, -1.155385154394205e-01, -4.257744153142505e-01, -7.685187163174656e-02, -1.056720070195902e-01, -1.162348584564612e-02, -1.281261052128368e-01, -2.727983996318686e-03, -7.376595408156865e-02, -4.061854239567604e-03, -4.061714056493079e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_edmgga_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_edmgga", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.618015492906983e-09, -6.617931730301285e-09, -6.617574241918188e-09, -6.618946267765502e-09, -6.617971150586776e-09, -6.617971150586776e-09, -9.896798395419291e-06, -9.896772996098870e-06, -9.894475549410011e-06, -9.890187018573059e-06, -9.896619194875174e-06, -9.896619194875174e-06, -6.654833207195040e-03, -6.664741376475177e-03, -6.812057221359857e-03, -6.677721236685589e-03, -6.658791284523590e-03, -6.658791284523590e-03, -7.748748291269867e-01, -7.639058851864070e-01, -3.413697675134126e-03, -1.487643192406854e+00, -7.722350333973635e-01, -7.722350333973635e-01, -1.948549630652449e+03, -1.716037934276764e+03, -2.867072007840912e+01, -1.407509770054545e+04, -1.784587862180923e+03, -1.784587862180922e+03, -4.949636484513647e-07, -1.315154742396089e-06, -4.189509429255474e-10, -3.957686465301689e-07, -9.796212470375430e-07, -1.699443848746828e-06, -3.051801400558419e-09, -5.533719554523934e-05, -7.938790351140907e-05, -7.721235239299500e-05, -7.760668753117398e-05, -9.413024926897732e-05, -1.961211518345459e-03, -3.290601869790800e-03, -3.113153574513746e-03, -1.318035120856997e-02, -1.041414278806312e-02, -9.302030441600152e-03, -3.856668816625652e-03, -1.653764428507433e-01, -7.866583097866227e-05, -1.049622871172082e-04, -2.790296627570290e+00, -4.113089392445784e+00, -5.877437280011212e+03, -1.087664061050106e+02, -3.400894494121252e-09, -6.108911363825347e-03, -8.953422945131499e+03, -6.776941405882108e-05, -1.125027050894364e-05, -3.582481440053218e-12, -9.862139320079749e-15, -1.586205269742911e-04, -5.863775640498489e-12, -2.739476293785632e-06, -2.033151592311559e-14, -2.107695984369190e-02, -4.282368288781254e-03, -6.431953468734256e-03, -1.467628202774146e-02, -2.362002156824190e-03, -1.209805106631112e-03, -6.097273826672413e-06, -1.299264758335887e-06, -6.105264343934773e-05, -6.946667927193520e-02, -9.477357262946863e-02, -3.102623547249753e-02, -1.173118376870495e+01, -1.228371289855905e+01, -1.141157222172172e-01, -3.128215115723658e-04, -7.564028118179190e+00, -7.873920556576049e-04, -6.814771482923547e+04, -1.896901715522704e-04, -1.010908963716094e+00, -6.521780377444653e-02, -1.047893779702754e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_edmgga_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_edmgga", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([-2.558752662757681e-04, -2.558738909850901e-04, -2.558697534084129e-04, -2.558922597419333e-04, -2.558745230034244e-04, -2.558745230034244e-04, -1.651204375460203e-03, -1.651210533912452e-03, -1.651316824324517e-03, -1.650807255312769e-03, -1.651200925775610e-03, -1.651200925775610e-03, -7.820324061558309e-03, -7.807873725579589e-03, -7.359686879977199e-03, -7.386296492887416e-03, -7.816189812572235e-03, -7.816189812572235e-03, -1.864303110559483e-02, -1.912310158431798e-02, -6.905949999043957e-03, -1.363944368646293e-02, -1.880302954027914e-02, -1.880302954027914e-02, -8.167343148165690e-03, -8.266095832615852e-03, -9.273746131430441e-03, -6.513562548949016e-03, -8.330343097871031e-03, -8.330343097871031e-03, -2.768356285627356e-04, -7.359651211360367e-04, -2.343345357787285e-07, -2.214596762140105e-04, -5.480556311776674e-04, -9.507651799024846e-04, -9.046158916479504e-08, -1.675223356687630e-03, -2.333168215687011e-03, -2.306979814951602e-03, -2.359278551377094e-03, -2.861602333521450e-03, -1.520860729116701e-03, -3.270616228266386e-03, -2.062658540221621e-03, -9.909243472937397e-03, -9.042950970910901e-03, -8.077266360293059e-03, -1.402349595227064e-05, -4.064993189438458e-03, -2.751837455540522e-07, -2.935748399535329e-03, -1.568735332478213e-02, -2.312423916445602e-02, -2.441824495088661e-03, -6.744871540605752e-05, -8.879649426274553e-16, -5.352832657180237e-06, -4.199957180978933e-03, -3.178992425258427e-11, -9.585351653608589e-06, -3.003687797282471e-12, -8.316611119812785e-15, -1.343579923277694e-04, -4.955830284778946e-12, -2.315296562066735e-06, -1.570777030964725e-14, -1.063052142279974e-02, -2.461569074529402e-03, -4.153406908455490e-03, -8.936619974135224e-03, -1.438260426838765e-03, -1.386033431153856e-03, -2.981947277429627e-07, -1.064491959484292e-07, -1.045181894548034e-05, -8.228040668556107e-03, -1.122553745295647e-02, -1.148166215752586e-02, -3.014670986808635e-03, -7.831765114029159e-03, -1.647809863340817e-02, -6.082197969037182e-07, -1.470676240471365e-02, -5.312934039372410e-09, -8.672579437222963e-04, -1.654827828335149e-11, -1.706672522471163e-03, -1.877914670914131e-08, -3.017358679412723e-11])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_edmgga_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_edmgga", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.023501065103072e-03, 1.023495563940360e-03, 1.023479013633652e-03, 1.023569038967733e-03, 1.023498092013698e-03, 1.023498092013698e-03, 6.604817501840814e-03, 6.604842135649806e-03, 6.605267297298067e-03, 6.603229021251077e-03, 6.604803703102440e-03, 6.604803703102440e-03, 3.128129624623324e-02, 3.123149490231836e-02, 2.943874751990879e-02, 2.954518597154967e-02, 3.126475925028894e-02, 3.126475925028894e-02, 7.457212442237933e-02, 7.649240633727192e-02, 2.762379999617583e-02, 5.455777474585170e-02, 7.521211816111655e-02, 7.521211816111656e-02, 3.266937259266276e-02, 3.306438333046341e-02, 3.709498452572176e-02, 2.605425019579606e-02, 3.332137239148412e-02, 3.332137239148412e-02, 1.107342514250942e-03, 2.943860484544147e-03, 9.373381431149139e-07, 8.858387048560419e-04, 2.192222524710670e-03, 3.803060719609939e-03, 3.618463566591801e-07, 6.700893426750520e-03, 9.332672862748045e-03, 9.227919259806408e-03, 9.437114205508376e-03, 1.144640933408580e-02, 6.083442916466802e-03, 1.308246491306554e-02, 8.250634160886484e-03, 3.963697389174959e-02, 3.617180388364361e-02, 3.230906544117224e-02, 5.609398380908255e-05, 1.625997275775383e-02, 1.100734982216209e-06, 1.174299359814132e-02, 6.274941329912852e-02, 9.249695665782409e-02, 9.767297980354644e-03, 2.697948616242301e-04, 3.551859770509821e-15, 2.141133062872095e-05, 1.679982872391573e-02, 1.271596970103371e-10, 3.834140661443435e-05, 1.201475118912989e-11, 3.326644447925114e-14, 5.374319693110775e-04, 1.982332113911578e-11, 9.261186248266941e-06, 6.283108123858900e-14, 4.252208569119895e-02, 9.846276298117610e-03, 1.661362763382196e-02, 3.574647989654089e-02, 5.753041707355059e-03, 5.544133724615426e-03, 1.192778910971851e-06, 4.257967837937167e-07, 4.180727578192137e-05, 3.291216267422443e-02, 4.490214981182589e-02, 4.592664863010342e-02, 1.205868394723454e-02, 3.132706045611663e-02, 6.591239453363269e-02, 2.432879187614873e-06, 5.882704961885461e-02, 2.125173615748964e-08, 3.469031774889185e-03, 6.619311313340596e-11, 6.826690089884651e-03, 7.511658683656523e-08, 1.206943471765089e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
