
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_revscanl_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revscanl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.229299564178852e+01, -2.229300902853434e+01, -2.229316589429642e+01, -2.229296509865871e+01, -2.278204378284313e+01, -2.278204378284313e+01, -3.749616645768237e+00, -3.788781067767232e+00, -3.789062922660022e+00, -3.785737184348518e+00, -3.749804374734899e+00, -3.788874291619534e+00, -7.307863017195207e-01, -7.299834931918350e-01, -7.106039821003214e-01, -7.164869654195771e-01, -7.136934102209059e-01, -7.167543078074442e-01, -1.848500162832601e-01, -1.879532094098479e-01, -8.509986672205554e-01, -1.432675711399805e-01, -1.812245764800494e-01, -1.802812159884666e-01, -4.813988435631108e-03, -3.217223244833332e-03, -3.820075942861595e-02, -2.461339959843438e-03, -4.959734748781468e-03, -2.293935741631885e-03, -5.672600085168801e+00, -5.487533996453662e+00, -5.672651959349361e+00, -5.673571272615735e+00, -5.673125868599428e+00, -5.488140790010814e+00, -2.125212210997748e+00, -2.140832265646797e+00, -2.120930661127320e+00, -2.127240903475222e+00, -2.146247264612791e+00, -2.139643915575011e+00, -6.392432182789721e-01, -6.462699711356843e-01, -5.918758968438186e-01, -5.832810436134059e-01, -6.503928347033312e-01, -6.503928347033312e-01, -9.135816912088424e-02, -1.889846202731029e-01, -9.213775200114224e-02, -1.847626213347076e+00, -1.169116576358870e-01, -1.136425233979884e-01, -1.819510481180572e-03, -3.709028205575127e-03, -2.009325747738588e-03, -6.188688348471526e-02, -3.568059111878118e-03, -3.568059111878119e-03, -5.969713389401752e-01, -6.019809253128975e-01, -6.002463734971130e-01, -6.410294316270490e-01, -5.995639327389453e-01, -6.404949195186695e-01, -6.249364186342161e-01, -5.364649909212400e-01, -5.617648073266222e-01, -5.868560088335203e-01, -5.644830729604122e-01, -5.740407204582494e-01, -7.280308747409774e-01, -2.360350961384786e-01, -2.867615289062423e-01, -3.778534238287382e-01, -3.293791755501025e-01, -3.293791755501025e-01, -4.929139249331591e-01, -3.111537819897144e-02, -4.580363684953172e-02, -3.641464190145984e-01, -7.891630680087461e-02, -7.891630680087461e-02, -6.480505174669724e-03, -9.913377696918121e-04, -1.245533351439895e-03, -7.026584496094537e-02, -3.276646272115884e-03, -2.748353725582280e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_revscanl_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revscanl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.533813858472197e+01, -2.533809694379185e+01, -2.533810549537910e+01, -2.533807284846132e+01, -2.533816921021112e+01, -2.533811652469828e+01, -2.533854061365292e+01, -2.533859131821854e+01, -2.533811032806308e+01, "nan", -2.533811032806308e+01, "nan", -4.353150104583679e+00, "nan", "nan", "nan", "nan", "nan", "nan", "nan", -4.352872204986841e+00, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", -9.333289197842201e-01, "nan", "nan", -2.516605080981111e-01, -2.612120975367633e-01, -2.546275835918726e-01, -2.656462329919707e-01, -1.124306132803020e+00, "nan", "nan", "nan", "nan", "nan", "nan", -1.414325376975030e-01, -4.462864559546598e-03, "nan", -4.762527036161829e-03, "nan", "nan", "nan", -2.257075695397270e-03, "nan", "nan", -1.962389409589020e-03, -3.842052375551055e-03, "nan", "nan", "nan", -5.984733078979845e+00, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", -5.984407912511791e+00, "nan", -2.871145081920857e+00, "nan", -2.891101905342412e+00, "nan", "nan", -2.872813412767282e+00, "nan", "nan", "nan", -2.895012351124229e+00, "nan", "nan", "nan", -7.826071276402183e-01, "nan", "nan", "nan", "nan", -6.551678884687452e-01, "nan", "nan", "nan", "nan", -1.219940024105246e-01, "nan", "nan", "nan", "nan", "nan", -2.235083998948854e+00, -2.234292253571853e+00, "nan", "nan", "nan", -1.639583646902339e-01, "nan", -1.640412684345299e-03, "nan", "nan", -1.710399069493737e-03, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", -7.204325790364957e-01, -6.802998276065489e-01, "nan", -6.920515900078149e-01, "nan", "nan", "nan", -6.976306003487602e-01, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", -6.350007489724981e-01, "nan", "nan", "nan", "nan", "nan", "nan", -3.257374654388734e-01, "nan", "nan", "nan", -5.104093121734216e-01, "nan", "nan", "nan", "nan", "nan", -6.639996308752898e-01, "nan", -4.197598011745616e-02, -6.391656714049375e-02, "nan", -4.547236712985772e-01, "nan", "nan", "nan", "nan", "nan", "nan", -7.315125069307615e-03, "nan", "nan", "nan", -1.129450210691622e-03, "nan", -1.010319389406861e-01, "nan", "nan", -1.639893816665884e-03, "nan"]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revscanl_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revscanl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.220859129179208e-08, 0.000000000000000e+00, -2.220878168396132e-08, -2.220926819704459e-08, 0.000000000000000e+00, -2.220927357951764e-08, -2.221008981403027e-08, 0.000000000000000e+00, -2.221082804863351e-08, -2.220246901551229e-08, 0.000000000000000e+00, -2.220110374019180e-08, -2.220906263960942e-08, 0.000000000000000e+00, "nan", -2.220906263960942e-08, 0.000000000000000e+00, "nan", -1.900521291871817e-05, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", -1.899865905965784e-05, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 9.711448924031505e-04, "nan", 0.000000000000000e+00, "nan", 1.617625503556681e-01, 0.000000000000000e+00, 1.431493020659083e-01, 1.568384512592111e-01, 0.000000000000000e+00, 1.361382302456912e-01, 4.217738243985981e-04, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 8.828249840258079e-01, 3.782444986715504e+02, 0.000000000000000e+00, "nan", 3.573484647735180e+02, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", 8.947552890390089e+02, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 2.129489430928737e+03, 4.648048047686831e+02, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", -8.837457117506747e-06, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, -8.815574392374065e-06, "nan", 0.000000000000000e+00, 1.087959678438159e-05, "nan", 0.000000000000000e+00, 1.057187040156366e-05, "nan", 0.000000000000000e+00, "nan", 1.086914549411489e-05, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", 1.049533199257144e-05, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", -9.575084297411272e-03, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, -7.880039328878539e-02, "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", 8.101130633882027e-01, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", -6.523292781895607e-04, 0.000000000000000e+00, -6.534241683655068e-04, "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 6.202898277542249e-01, "nan", 0.000000000000000e+00, 1.541335505256502e+03, "nan", 0.000000000000000e+00, "nan", 4.702418232569644e+03, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, -5.041444937910372e-02, -7.576859187261115e-02, 0.000000000000000e+00, "nan", -7.216788388523400e-02, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", -6.927823015012151e-02, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", -5.115723185726699e-02, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 5.734386249896704e-02, "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 1.067904813712253e-02, "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 2.945815718181819e-03, "nan", 0.000000000000000e+00, 9.494647122866890e+00, 5.420262818766410e+00, 0.000000000000000e+00, "nan", -7.384950964533546e-02, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 1.636852724549491e+02, "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 4.416267718412876e+03, "nan", 0.000000000000000e+00, 2.288170793212596e+00, "nan", 0.000000000000000e+00, "nan", 5.056230879601965e+03, 0.000000000000000e+00, "nan"]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revscanl_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revscanl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [3.077042602625441e-04, 3.077055995497767e-04, 3.077152330296320e-04, 3.077135730566412e-04, 3.077341605890932e-04, 3.077452356338331e-04, 3.076105206662386e-04, 3.075875152777737e-04, 3.077116184558475e-04, "nan", 3.077116184558475e-04, "nan", 1.196921699736872e-03, "nan", "nan", "nan", "nan", "nan", 0.000000000000000e+00, "nan", 1.196031825032914e-03, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.559569679322178e-05, "nan", "nan", "nan", "nan", "nan", "nan", 0.000000000000000e+00, 8.247181245665339e-05, "nan", 9.208520562257372e-05, 0.000000000000000e+00, "nan", "nan", 3.599369989521312e-05, "nan", "nan", 5.262253265382479e-05, 6.876530887816532e-05, "nan", "nan", "nan", 1.710130590671492e-03, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 1.704957232565479e-03, "nan", 0.000000000000000e+00, "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", "nan", 0.000000000000000e+00, "nan", "nan", "nan", -1.040812598354015e-62, "nan", "nan", "nan", "nan", 1.946662421475696e-02, "nan", "nan", "nan", "nan", -1.097082590920663e-64, "nan", "nan", "nan", "nan", "nan", 5.821815433873707e-03, 5.822672947165554e-03, "nan", "nan", "nan", 0.000000000000000e+00, "nan", 2.824042831333100e-05, "nan", "nan", 7.309755266647994e-05, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 1.092124491385837e-02, 1.916934302040820e-02, "nan", 1.780052252056756e-02, "nan", "nan", "nan", 1.681263789655795e-02, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 1.076225219260012e-02, "nan", "nan", "nan", "nan", "nan", "nan", 0.000000000000000e+00, "nan", "nan", "nan", 0.000000000000000e+00, "nan", "nan", "nan", "nan", "nan", 9.499541936074298e-05, "nan", 8.936287301212014e-66, 0.000000000000000e+00, "nan", 4.650680419716697e-03, "nan", "nan", "nan", "nan", "nan", "nan", 1.408949907645938e-04, "nan", "nan", "nan", 2.943874573284731e-05, "nan", 0.000000000000000e+00, "nan", "nan", 7.067666642708127e-05, "nan"]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revscanl_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revscanl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
