
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_revscanl_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revscanl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.324580096703794e+01, -2.324586708747453e+01, -2.324617898057841e+01, -2.324519486773701e+01, -2.324570797472163e+01, -2.324570797472163e+01, -3.396753326140685e+00, -3.396877197048932e+00, -3.400601692366530e+00, -3.403001539827240e+00, -3.400843772322271e+00, -3.400843772322271e+00, -5.959672709615526e-01, -5.952703303979975e-01, -5.795465841128082e-01, -5.926667189756778e-01, -5.916149285715802e-01, -5.916149285715802e-01, -1.730033510838430e-01, -1.758051639219484e-01, -6.507762319945785e-01, -1.118582486397297e-01, -1.607186312004974e-01, -1.607186312004973e-01, -2.558931220044450e-03, -2.756592423691495e-03, -2.362532045290271e-02, -1.195873259656209e-03, -1.934122758521401e-03, -1.934122758521402e-03, -4.021397417855859e+00, -4.155644952937211e+00, -5.669116800180298e+00, -4.078265871004819e+00, -5.669614857299782e+00, -4.791927692358897e+00, -2.098181818116307e+00, -1.710564068828642e+00, -1.966447571332712e+00, -1.991023600576918e+00, -1.971869719295997e+00, -2.132804693272752e+00, -4.698374095285666e-01, -4.809969840542807e-01, -4.361689043394342e-01, -5.210638580322089e-01, -5.682947239521491e-01, -5.351571094886258e-01, -9.153635300171056e-02, -1.423695645925249e-01, -8.418362967058110e-02, -1.740083711082782e+00, -1.104519910029113e-01, -1.104519910029113e-01, -8.689945405311031e-04, -1.368651184950676e-03, -1.127799600640787e-03, -5.400227356955094e-02, -1.242481293836459e-03, -1.535805952240818e-03, -5.495108320470892e-01, -5.496923087980423e-01, -5.496661367688409e-01, -5.492673587901478e-01, -5.497311666743381e-01, -5.496446628599270e-01, -5.335945654293107e-01, -5.177295472369017e-01, -4.115105467213432e-01, -5.864081456698848e-01, -4.763133534592883e-01, -4.302316983986867e-01, -5.198781903251233e-01, -2.333258734849494e-01, -2.790407131978785e-01, -3.769540112518036e-01, -2.543920957317124e-01, -2.662365403853859e-01, -4.470999502433712e-01, -2.848365761497269e-02, -3.234883121448125e-02, -3.270804739252830e-01, -7.176699248366311e-02, -7.176699248366310e-02, -5.097675726076857e-03, -2.785317568551877e-04, -7.371264769707797e-04, -6.670816313961028e-02, -1.437753619840135e-03, -1.434269791059565e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_revscanl_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revscanl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.111039881329518e+01, -3.111035844859763e+01, -3.111049551754925e+01, -3.111042870323107e+01, -3.111082981797086e+01, -3.111090075272069e+01, -3.110973707338642e+01, -3.110950815628019e+01, -3.111045523114146e+01, -3.111008315218390e+01, -3.111045523114146e+01, -3.111008315218390e+01, -3.727461508123435e+00, -3.729395353513998e+00, -3.727191633444705e+00, -3.729383657140194e+00, -3.724182948460535e+00, -3.724143382547827e+00, -3.718203140576688e+00, -3.719742830073600e+00, -3.727543407384672e+00, -3.717646428039155e+00, -3.727543407384672e+00, -3.717646428039155e+00, -7.772985238656747e-01, -7.814777777614087e-01, -7.758308840697381e-01, -7.807615236688307e-01, -7.563749413734542e-01, -7.508741405070809e-01, -7.597770875977893e-01, -7.619214584720753e-01, -7.874997239580528e-01, -7.098828140751792e-01, -7.874997239580528e-01, -7.098828140751792e-01, -1.531195388873449e-01, -1.323046929635779e-01, -1.879679770171025e-01, -1.413809692978340e-01, -8.232540992803553e-01, -8.555195623474601e-01, -1.481327885141191e-01, -1.357266902813106e-01, -7.671392143555614e-02, -1.104817200070747e-01, -7.671392143555651e-02, -1.104817200070747e-01, -4.404058301786270e-03, -4.761802282945152e-03, -4.698189223569378e-03, -5.133410250805016e-03, -3.672680010538593e-02, -3.905414144610739e-02, -2.231610138398510e-03, -2.176576402647627e-03, -3.793976320425843e-03, -1.941334851668562e-03, -3.793976320425844e-03, -1.941334851668562e-03, -4.917448248156790e+00, -4.990678697923406e+00, -5.456725122307787e+00, -5.464025664682958e+00, -7.577136191739323e+00, -7.575296982387379e+00, -4.869042998069249e+00, -4.871273866864517e+00, -7.577696845724574e+00, -7.575859323311329e+00, -6.409974333338319e+00, -6.409138737295511e+00, -2.831227277910747e+00, -2.854160743032335e+00, -2.250447608779645e+00, -2.250317933666619e+00, -1.822731410375771e+00, -1.826347736244022e+00, -1.901180079306657e+00, -1.866746492187123e+00, -1.856243355993902e+00, -1.847687351253519e+00, -2.895012351124229e+00, -2.877055054168933e+00, -5.590792959687472e-01, -5.614512224975546e-01, -6.244554332034445e-01, -6.241316488518984e-01, -5.157589262919333e-01, -5.277706243416502e-01, -7.005049065665133e-01, -7.166704548582588e-01, -7.497836720476483e-01, -7.130039913160449e-01, -7.369908058415624e-01, -6.948497881385381e-01, -1.347375655692182e-01, -1.360755120409074e-01, -1.969675779471453e-01, -1.978636866506480e-01, -1.216008564389500e-01, -1.283346391207322e-01, -2.448010429149008e+00, -2.447027718016045e+00, -1.546755398382743e-01, -1.639583646902339e-01, -1.546755398382743e-01, -1.639583646902339e-01, -1.594266989064675e-03, -1.653943866553091e-03, -2.502727665103302e-03, -2.536305866003287e-03, -1.964831360810188e-03, -2.139060842966617e-03, -8.258605161963301e-02, -8.307604218757279e-02, -1.659425077226825e-03, -2.508334380710055e-03, -1.926378629428693e-03, -3.030932323572888e-03, -7.259495974155216e-01, -7.288239020956774e-01, -7.187600012914435e-01, -7.216350904941260e-01, -7.210377915390742e-01, -7.239322344549346e-01, -7.226434413372993e-01, -7.254997961040334e-01, -7.223503479803478e-01, -7.251877290292067e-01, -7.220763903255357e-01, -7.249555440098270e-01, -7.077730716689520e-01, -7.101231602164250e-01, -5.678280236271177e-01, -5.756202947174236e-01, -4.950875630392679e-01, -4.966350220567435e-01, -7.826474980886868e-01, -7.853795304635109e-01, -6.327298494632907e-01, -6.355630482930577e-01, -5.113524503613002e-01, -5.126705271121094e-01, -6.245549551570648e-01, -6.251778761595413e-01, -3.238994208892278e-01, -3.257374654388734e-01, -3.766779391138487e-01, -3.800956762595531e-01, -5.076454304744454e-01, -5.104093121734216e-01, -3.368791749747004e-01, -3.361889258520113e-01, -3.479273878993021e-01, -3.476966587255353e-01, -4.526809427951583e-01, -4.570099828611462e-01, -4.590291700974318e-02, -4.626129280367089e-02, -4.993107584237088e-02, -5.182964635089199e-02, -4.136603552001201e-01, -3.483829071358121e-01, -1.037737052255983e-01, -1.099703324399593e-01, -1.037737052255983e-01, -1.099703324399591e-01, -8.796862030566684e-03, -9.217481774660388e-03, -5.142350610968638e-04, -5.454044748635048e-04, -1.299365393044434e-03, -1.429612529388460e-03, -9.935766957920823e-02, -1.010319389406861e-01, -2.076099489498845e-03, -2.859024127786910e-03, -2.006581250099529e-03, -2.859024127786497e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revscanl_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revscanl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([5.872713019703824e-10, 0.000000000000000e+00, 5.872735956428605e-10, 5.872545458586748e-10, 0.000000000000000e+00, 5.872614281515772e-10, 5.872117026111899e-10, 0.000000000000000e+00, 5.871970235556348e-10, 5.874006555427512e-10, 0.000000000000000e+00, 5.874379489231383e-10, 5.872607648391227e-10, 0.000000000000000e+00, 5.873495574145967e-10, 5.872607648391227e-10, 0.000000000000000e+00, 5.873495574145967e-10, -4.726466257796081e-05, 0.000000000000000e+00, -4.719085572866620e-05, -4.728510059293644e-05, 0.000000000000000e+00, -4.719883346726759e-05, -4.759922746322486e-05, 0.000000000000000e+00, -4.763874646487619e-05, -4.769294600265308e-05, 0.000000000000000e+00, -4.764925952515403e-05, -4.724039266348028e-05, 0.000000000000000e+00, -4.788820868599635e-05, -4.724039266348028e-05, 0.000000000000000e+00, -4.788820868599635e-05, -1.171272758388991e-02, 0.000000000000000e+00, -1.205928196640912e-02, -1.164288700688235e-02, 0.000000000000000e+00, -1.200075821424621e-02, -1.044006111793241e-02, 0.000000000000000e+00, -1.069140557188657e-02, -1.237660977841219e-02, 0.000000000000000e+00, -1.272512465339477e-02, -1.191298330743770e-02, 0.000000000000000e+00, -1.521012511912291e-02, -1.191298330743770e-02, 0.000000000000000e+00, -1.521012511912291e-02, -2.844394314141117e+00, 0.000000000000000e+00, -3.745076624725526e+00, -1.518106510598073e+00, 0.000000000000000e+00, -3.503186879074779e+00, -2.900587016207824e-03, 0.000000000000000e+00, -3.577698423079219e-03, -6.920832698179282e-01, 0.000000000000000e+00, -2.220952988696246e+00, -5.221109207159908e+00, 0.000000000000000e+00, 4.228795159974637e-01, -5.221109207159899e+00, 0.000000000000000e+00, 4.228795159974642e-01, 3.737129732088139e+02, 0.000000000000000e+00, 3.323526998702010e+02, 3.527727371566700e+02, 0.000000000000000e+00, 3.096826478970823e+02, 8.065958933027829e+00, 0.000000000000000e+00, 7.049708347750156e+00, 8.892380465465768e+02, 0.000000000000000e+00, 9.016305796688536e+02, 4.602948514425513e+02, 0.000000000000000e+00, 2.124363173196659e+03, 4.602948514425520e+02, 0.000000000000000e+00, 2.124363173196663e+03, -3.236770267080247e-06, 0.000000000000000e+00, -3.431684526467515e-06, -3.812191358127342e-06, 0.000000000000000e+00, -3.819093632589791e-06, 1.406761114260237e-07, 0.000000000000000e+00, 1.408556518566762e-07, -2.654972341592825e-06, 0.000000000000000e+00, -2.603254180629196e-06, 1.403114266530112e-07, 0.000000000000000e+00, 1.404965643341923e-07, -6.943285066418436e-06, 0.000000000000000e+00, -6.622020696386669e-06, -3.066940576202983e-05, 0.000000000000000e+00, -2.161165023448937e-05, -8.138205835341191e-05, 0.000000000000000e+00, -8.182011134331831e-05, -3.813740203964244e-04, 0.000000000000000e+00, -3.839001011013390e-04, -3.453262342134132e-04, 0.000000000000000e+00, -3.658034601461310e-04, -3.923261625482011e-04, 0.000000000000000e+00, -3.865318318892888e-04, 1.049533199257144e-05, 0.000000000000000e+00, 8.912096759947765e-06, -1.121807076369839e-02, 0.000000000000000e+00, -1.004870018984429e-02, -2.075759745365097e-02, 0.000000000000000e+00, -2.079518330112498e-02, -1.217579202807420e-02, 0.000000000000000e+00, -1.359387012588670e-02, -6.311481736413627e-02, 0.000000000000000e+00, -4.805095733805367e-02, -7.120552685201601e-03, 0.000000000000000e+00, -8.318485237622641e-03, -3.112351487720132e-02, 0.000000000000000e+00, -3.460785290549778e-02, 9.084585033191713e-01, 0.000000000000000e+00, 8.929452286816435e-01, 8.721573490891256e-02, 0.000000000000000e+00, 8.499258225176616e-02, 1.217516153299219e+00, 0.000000000000000e+00, 1.058353359486597e+00, -4.504332556269592e-04, 0.000000000000000e+00, -4.513421420878796e-04, 6.717896645570889e-01, 0.000000000000000e+00, 6.202898277542249e-01, 6.717896645570889e-01, 0.000000000000000e+00, 6.202898277542249e-01, 1.940226689662877e+03, 0.000000000000000e+00, 1.657043743224781e+03, 1.222611217773644e+03, 0.000000000000000e+00, 1.138671139470396e+03, 5.387493497041185e+03, 0.000000000000000e+00, 5.149998005878678e+03, 3.496179952398850e+00, 0.000000000000000e+00, 3.394047677400102e+00, 3.209686078908159e+03, 0.000000000000000e+00, 1.754331755456745e+03, 2.857124742510339e+03, 0.000000000000000e+00, 1.530615976012532e+03, -1.532317406387141e-02, 0.000000000000000e+00, -1.511949837672610e-02, -1.366172822844650e-02, 0.000000000000000e+00, -1.351190450852198e-02, -1.425947579832401e-02, 0.000000000000000e+00, -1.409479785225470e-02, -1.463921818045797e-02, 0.000000000000000e+00, -1.443263575932231e-02, -1.454006816350293e-02, 0.000000000000000e+00, -1.435828469638742e-02, -1.450863645087321e-02, 0.000000000000000e+00, -1.433212197953767e-02, -1.769858353069949e-02, 0.000000000000000e+00, -1.747085694782978e-02, -6.222059722407415e-02, 0.000000000000000e+00, -5.877556505930381e-02, -1.708963119711650e-02, 0.000000000000000e+00, -1.702866290706316e-02, 1.321866457144427e-03, 0.000000000000000e+00, 1.297123288016524e-03, -5.617237360877105e-02, 0.000000000000000e+00, -5.589644957647348e-02, -1.246148622835948e-02, 0.000000000000000e+00, -1.257116547127607e-02, -1.067466043226378e-02, 0.000000000000000e+00, -1.090125075369006e-02, 5.843525251255271e-02, 0.000000000000000e+00, 5.734386249896704e-02, -4.097914417144533e-02, 0.000000000000000e+00, -4.250273810295517e-02, 1.092794950967186e-02, 0.000000000000000e+00, 1.067904813712253e-02, -5.047145743825499e-02, 0.000000000000000e+00, -5.007267104588817e-02, -1.626931140655377e-01, 0.000000000000000e+00, -1.501421370400434e-01, -1.507081332701850e-01, 0.000000000000000e+00, -1.479910631984869e-01, 1.061867237290079e+01, 0.000000000000000e+00, 1.046586440757327e+01, 4.021146966816224e+00, 0.000000000000000e+00, 3.904873904019890e+00, -4.153626980281436e-02, 0.000000000000000e+00, -5.148922451025539e-01, 2.071782380287858e+00, 0.000000000000000e+00, 1.926469538933344e+00, 2.071782380287801e+00, 0.000000000000000e+00, 1.926469538933380e+00, 2.158412066473275e+02, 0.000000000000000e+00, 2.039738987130857e+02, 2.624142814562061e+04, 0.000000000000000e+00, 3.650089864467547e+04, 5.663132957969842e+03, 0.000000000000000e+00, 5.546289109938334e+03, 2.400226539851720e+00, 0.000000000000000e+00, 2.288170793212596e+00, 6.390612919734532e+03, 0.000000000000000e+00, 2.605408045552031e+03, 4.877197504659011e+03, 0.000000000000000e+00, 2.605408045543913e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revscanl_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revscanl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 2.739517080505640e-03, 2.733724664942085e-03, 2.740923188746660e-03, 2.734203368577871e-03, 2.761924733305459e-03, 2.764484473471210e-03, 2.772557446889744e-03, 2.769005231430177e-03, 2.736252490052022e-03, 2.785461989265411e-03, 2.736252490052022e-03, 2.785461989265411e-03, 4.118698036386531e-03, 4.248208153396008e-03, 4.094366985829985e-03, 4.220180009134309e-03, 3.621738278524534e-03, 3.765427424183688e-03, 4.624892317635750e-03, 4.779402015348154e-03, 4.135379340024287e-03, 5.671265456615547e-03, 4.135379340024287e-03, 5.671265456615547e-03, 2.172597377423426e-02, 3.183604749329809e-02, 1.234538506053201e-02, 3.136707618880216e-02, 5.176644932575745e-04, 8.007415176788957e-04, 3.109243646536781e-03, 8.632095369404626e-03, 4.453902248656188e-02, 3.026194645081273e-04, 4.453902248656179e-02, 3.026194645081265e-04, -5.606273627735837e-07, -5.979388428226147e-07, -6.273062406766605e-07, -6.756434962783503e-07, 1.603948024553563e-05, 2.593760748396839e-05, -3.120083380317108e-07, -2.937316240150023e-07, -5.210256236050127e-07, -5.745884417627874e-07, -5.210256236050193e-07, -5.745884417628660e-07, -3.794945555102098e-06, 5.867389369094777e-06, 1.148466934355659e-04, 1.179163489629459e-04, 0.000000000000000e+00, 0.000000000000000e+00, -1.105049629635583e-05, -1.108727422409904e-05, 0.000000000000000e+00, 0.000000000000000e+00, 1.067218299261348e-03, 1.055466340962625e-03, -4.888689824983580e-06, -4.543200046470336e-06, 6.859913139231357e-04, 6.908804010407654e-04, 4.203807525958391e-03, 4.248057838102247e-03, 3.890479424157449e-03, 4.128602202904719e-03, 4.475662828414093e-03, 4.370890996713756e-03, 0.000000000000000e+00, 2.001351541588308e-05, -8.042010654879781e-05, -7.932838073077950e-05, 1.366815341955490e-04, 1.273260321162327e-04, -8.135027452478225e-05, -8.034980655828557e-05, 1.187104006654561e-02, 9.743898174180891e-03, 2.903080504050876e-04, 2.789310653372528e-04, 7.781888194382201e-03, 7.122703344387801e-03, 0.000000000000000e+00, 0.000000000000000e+00, -3.577533424053872e-05, -3.544563997869465e-05, 0.000000000000000e+00, 0.000000000000000e+00, 3.420960092802032e-03, 3.423310830318422e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -4.487009193201594e-07, -4.381072944503432e-07, -4.709906484377575e-12, -5.235521815372077e-12, -1.394949571384845e-11, -9.243833030676149e-11, 0.000000000000000e+00, 0.000000000000000e+00, -7.601865745215075e-07, -1.100681415258278e-06, -7.473593322644503e-08, -3.273320813024562e-07, -7.642907580647832e-12, -7.515795485286460e-12, -5.312027365394514e-11, -5.316544124886551e-11, -1.653798422361247e-13, -1.645745572029766e-13, -6.224849243921349e-09, -7.194987284659937e-09, -6.716856681472582e-10, -4.818080504792320e-10, -4.971064580663214e-14, -4.972463733619157e-14, -5.136117125760220e-13, -4.883168369633450e-13, 1.108346817971537e-02, 1.062636920250632e-02, -6.831817280761703e-05, -7.033709885424571e-05, 0.000000000000000e+00, 0.000000000000000e+00, 9.154560254835716e-03, 9.233043719414033e-03, -8.045460010539218e-05, -8.059369794211734e-05, -1.002456486180107e-04, -1.012249374701701e-04, 0.000000000000000e+00, 0.000000000000000e+00, -2.090989333895442e-05, -2.128705429253228e-05, 0.000000000000000e+00, 0.000000000000000e+00, 1.101763931029823e-03, 1.054118135843086e-03, 6.014931726965608e-03, 5.439692602963412e-03, 2.009869504061792e-02, 2.012188312435674e-02, 0.000000000000000e+00, 0.000000000000000e+00, 3.430018396288753e-05, 1.217241405589556e-05, 4.841861257073258e-04, 2.826008792158225e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -4.918678701660781e-08, -8.517361893616426e-09, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -3.553933824494439e-07, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
