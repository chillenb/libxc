
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_revscanl_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revscanl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.229299564178852e+01, -2.229300902853434e+01, -2.229316589429642e+01, -2.229296509865871e+01, -2.278204378284313e+01, -2.278204378284313e+01, -3.749616645768237e+00, -3.788781067767232e+00, -3.789062922660022e+00, -3.785737184348518e+00, -3.749804374734899e+00, -3.788874291619534e+00, -7.307863017195207e-01, -7.299834931918350e-01, -7.106039821003214e-01, -7.164869654195771e-01, -7.136934102209059e-01, -7.167543078074442e-01, -1.848500162832601e-01, -1.879532094098479e-01, -8.509986672205554e-01, -1.432675711399805e-01, -1.812245764800494e-01, -1.802812159884666e-01, -4.813988435631108e-03, -3.217223244833332e-03, -3.820075942861595e-02, -2.461339959843438e-03, -4.959734748781468e-03, -2.293935741631885e-03, -5.672600085168801e+00, -5.487533996453662e+00, -5.672651959349361e+00, -5.673571272615735e+00, -5.673125868599428e+00, -5.488140790010814e+00, -2.125212210997748e+00, -2.140832265646797e+00, -2.120930661127320e+00, -2.127240903475222e+00, -2.146247264612791e+00, -2.139643915575011e+00, -6.392432182789721e-01, -6.462699711356843e-01, -5.918758968438186e-01, -5.832810436134059e-01, -6.503928347033312e-01, -6.503928347033312e-01, -9.135816912088424e-02, -1.889846202731029e-01, -9.213775200114224e-02, -1.847626213347076e+00, -1.169116576358870e-01, -1.136425233979884e-01, -1.819510481180572e-03, -3.709028205575127e-03, -2.009325747738588e-03, -6.188688348471526e-02, -3.568059111878118e-03, -3.568059111878119e-03, -5.969713389401752e-01, -6.019809253128975e-01, -6.002463734971130e-01, -6.410294316270490e-01, -5.995639327389453e-01, -6.404949195186695e-01, -6.249364186342161e-01, -5.364649909212400e-01, -5.617648073266222e-01, -5.868560088335203e-01, -5.644830729604122e-01, -5.740407204582494e-01, -7.280308747409774e-01, -2.360350961384786e-01, -2.867615289062423e-01, -3.778534238287382e-01, -3.293791755501025e-01, -3.293791755501025e-01, -4.929139249331591e-01, -3.111537819897144e-02, -4.580363684953172e-02, -3.641464190145984e-01, -7.891630680087461e-02, -7.891630680087461e-02, -6.480505174669724e-03, -9.913377696918121e-04, -1.245533351439895e-03, -7.026584496094537e-02, -3.276646272115884e-03, -2.748353725582280e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08

# test_mgga_x_revscanl_BrOH_cation_2_vrho() not generated due to NaN in reference data

# test_mgga_x_revscanl_BrOH_cation_2_vsigma() not generated due to NaN in reference data

# test_mgga_x_revscanl_BrOH_cation_2_vlapl() not generated due to NaN in reference data
