
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mbeefvdw_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbeefvdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.275024274042292e+01, -2.275029783909670e+01, -2.275058739922072e+01, -2.274968448939796e+01, -2.275027142901256e+01, -2.275027142901256e+01, -3.395571702122298e+00, -3.395608237237926e+00, -3.396935879799735e+00, -3.397620215752180e+00, -3.395592229463369e+00, -3.395592229463369e+00, -6.254620588674913e-01, -6.249331826576366e-01, -6.139579480912417e-01, -6.251630120669149e-01, -6.252770442007701e-01, -6.252770442007701e-01, -1.937507512978462e-01, -1.949057416475398e-01, -6.952128724861012e-01, -1.397503554724409e-01, -1.939478270609990e-01, -1.939478270609990e-01, -1.159629008881312e-02, -1.214853072692157e-02, -4.953137135534729e-02, -5.561904779420540e-03, -1.202081594464557e-02, -1.202081594464557e-02, -5.543580290111137e+00, -5.544571178517860e+00, -5.543684863596790e+00, -5.544455280036805e+00, -5.544083799296157e+00, -5.544083799296157e+00, -2.083466014521665e+00, -2.101856468916822e+00, -2.081016111943641e+00, -2.095158535123153e+00, -2.099450419324361e+00, -2.099450419324361e+00, -6.023185103314523e-01, -6.557624158962856e-01, -5.484539249224626e-01, -5.728036165176731e-01, -6.332820990093475e-01, -6.332820990093475e-01, -1.081490540345818e-01, -1.990959534362716e-01, -1.064872284943960e-01, -1.899010520315418e+00, -1.226542720616435e-01, -1.226542720616435e-01, -5.365464136716958e-03, -6.132112783643811e-03, -4.596006268823690e-03, -6.885620110631344e-02, -5.587314897824926e-03, -5.587314897824927e-03, -6.381862581045086e-01, -6.345755692236956e-01, -6.358621640944819e-01, -6.368608424556954e-01, -6.363602648173171e-01, -6.363602648173171e-01, -6.173335543955683e-01, -5.363793904084094e-01, -5.593439904584413e-01, -5.811459902694850e-01, -5.699352719335055e-01, -5.699352719335055e-01, -6.751746900913237e-01, -2.528556723606275e-01, -2.902953697591403e-01, -3.527002628225382e-01, -3.226995463316017e-01, -3.226995463316016e-01, -4.747973887247219e-01, -4.582905516583760e-02, -6.204593960641152e-02, -3.325222049059463e-01, -8.840055450806557e-02, -8.840055450806557e-02, -1.359752146684057e-02, -1.678587846121104e-03, -3.188841726117011e-03, -8.432912948393352e-02, -4.748367139366908e-03, -4.748367139366900e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mbeefvdw_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbeefvdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.023194848452785e+01, -3.023203109809574e+01, -3.023247852453602e+01, -3.023112701893488e+01, -3.023199135555464e+01, -3.023199135555464e+01, -4.521018007878997e+00, -4.521350391541588e+00, -4.531870050548418e+00, -4.531982138531163e+00, -4.521107134764875e+00, -4.521107134764875e+00, -8.499100801071046e-01, -8.477093283419261e-01, -7.927326504506760e-01, -8.129095806438975e-01, -8.491303013480785e-01, -8.491303013480785e-01, -1.721313919837945e-01, -1.791638619730119e-01, -8.972827751375672e-01, -1.535246067109779e-01, -1.741187550940345e-01, -1.741187550940345e-01, -1.588713357059953e-02, -1.646957646407203e-02, -6.643535569676709e-02, -7.418038302259698e-03, -1.643080122309170e-02, -1.643080122309172e-02, -7.392128176964239e+00, -7.393624983851559e+00, -7.392296702675446e+00, -7.393459759320456e+00, -7.392875196913971e+00, -7.392875196913971e+00, -2.523582299256780e+00, -2.582835540106113e+00, -2.525514787295013e+00, -2.573435832835458e+00, -2.563361479330442e+00, -2.563361479330442e+00, -8.073751161257178e-01, -9.230902457727476e-01, -7.583408183782011e-01, -8.438112517176003e-01, -8.429181875047511e-01, -8.429181875047511e-01, -1.324543240293585e-01, -1.263371099613133e-01, -1.294953808735747e-01, -2.833680918778466e+00, -1.336847389786879e-01, -1.336847389786879e-01, -7.155960340870325e-03, -8.179128600527639e-03, -6.130159068606315e-03, -8.978109906124497e-02, -7.452489470991968e-03, -7.452489470991969e-03, -8.514233388466224e-01, -8.464680055383316e-01, -8.482703558841593e-01, -8.496415043329962e-01, -8.489574902938612e-01, -8.489574902938612e-01, -8.248418258788499e-01, -7.011819252689522e-01, -7.384555241516412e-01, -7.723317618717627e-01, -7.550377662373932e-01, -7.550377662373933e-01, -9.833541440395194e-01, -2.328740834509796e-01, -2.896923393358898e-01, -4.462123310046271e-01, -3.633652030760253e-01, -3.633652030760253e-01, -5.953448623788794e-01, -6.273592117739102e-02, -8.244475816843619e-02, -4.421417816986566e-01, -1.113653993149106e-01, -1.113653993149106e-01, -1.815937762703217e-02, -2.238198999754111e-03, -4.252313879979951e-03, -1.058499351598281e-01, -6.333192209617231e-03, -6.333192209617221e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbeefvdw_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbeefvdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.934394820971435e-10, -5.934014822201520e-10, -5.929777738920915e-10, -5.935825213442263e-10, -5.934218569557443e-10, -5.934218569557443e-10, -6.312205412322470e-06, -6.323131399797232e-06, -6.668121182431977e-06, -6.715703577543564e-06, -6.313961517392184e-06, -6.313961517392184e-06, -6.068679337581307e-03, -6.068125424574040e-03, -6.022911979638414e-03, -6.226938810657290e-03, -6.069028269858629e-03, -6.069028269858629e-03, -1.889271007848779e+00, -1.822734096647317e+00, -2.088578848735676e-03, -5.495240580773794e-01, -1.874605246560213e+00, -1.874605246560213e+00, 5.072278546287474e+01, 2.773875219618295e+01, 5.292613428321707e-01, 7.341603252796159e-01, 4.393309564624990e+01, 4.393309564625265e+01, -3.432849995025092e-09, -2.620428862617772e-09, -3.225477725871618e-09, -2.601420042771483e-09, -3.183035122367335e-09, -3.183035122367335e-09, -7.742878102616390e-05, -6.128569542079806e-05, -7.077387098272872e-05, -5.805125479258415e-05, -7.423168832137627e-05, -7.423168832137627e-05, -2.119539823099108e-02, -1.490010856233528e-02, -2.713197932694864e-02, -2.647141865103446e-02, -1.282277026881668e-02, -1.282277026881668e-02, -2.950506445230462e-01, -1.560189806220242e+00, -3.743110176390520e-01, -2.035490147878823e-04, -1.444323180170967e+00, -1.444323180170967e+00, 7.858658639276915e-01, 7.784324712212917e-01, 2.322769204705745e+00, -2.752592591518141e-01, 1.147431044575426e+00, 1.147431044574905e+00, -6.141325813930536e-04, -7.399488309501558e-04, -6.952435905151037e-04, -6.602274205057340e-04, -6.783341112247081e-04, -6.783341112247081e-04, -2.215927628701184e-03, -4.424381469148506e-03, -3.757177788542627e-03, -3.149141191105271e-03, -3.640150900762269e-03, -3.640150900762276e-03, -1.558456680062589e-02, -4.891492377247017e-01, -3.685907509733528e-01, -1.507053685240631e-01, -2.542835529773370e-01, -2.542835529773372e-01, -4.830777198087974e-02, 2.104273560665997e+00, 1.688709789060369e-01, -2.092083253061034e-01, -2.250727555048758e-01, -2.250727555048812e-01, 7.108550392867266e-01, 1.362584106772353e+00, 1.216685309128539e+00, -3.464883719070057e-01, 1.680137499665022e+00, 1.680137499666645e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbeefvdw_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbeefvdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbeefvdw_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbeefvdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [7.778329234240892e-05, 7.777969508314988e-05, 7.772271250862794e-05, 7.777895400625816e-05, 7.778178213672601e-05, 7.778178213672601e-05, 2.920905639292973e-03, 2.928385815675870e-03, 3.165215158392527e-03, 3.198145854070902e-03, 2.922180633645089e-03, 2.922180633645089e-03, 1.817074985291206e-02, 1.807159738403984e-02, 1.577061246850223e-02, 1.813689899057692e-02, 1.813815046897462e-02, 1.813815046897462e-02, 1.651816754522453e-01, 1.655786013715874e-01, 3.412920835372004e-03, 2.230801232959073e-03, 1.658041009994413e-01, 1.658041009994413e-01, -8.341145312649313e-04, -5.159354806253657e-04, -6.687438930833146e-04, -1.249948164004824e-09, -8.015769529829055e-04, -8.015769529829380e-04, 2.211552559419606e-05, 2.185475164017551e-05, 2.180736600668401e-05, 2.162166549815497e-05, 2.236038383814014e-05, 2.236038383814014e-05, 7.990319166602916e-03, 6.262153537076638e-03, 7.105029221934596e-03, 5.744612123814261e-03, 7.890581535957572e-03, 7.890581535957572e-03, 6.321244305567292e-02, 5.859962263200862e-02, 6.564841189583634e-02, 7.479064500305535e-02, 4.322328908608164e-02, 4.322328908608164e-02, -1.507305033557757e-03, 1.403277120383064e-01, -1.361987012909270e-03, 2.121560987106441e-02, 2.205436106176690e-02, 2.205436106176690e-02, -1.189704682405047e-08, -5.695801979521886e-09, -1.031395238547100e-07, -1.554735808218700e-04, -2.394830423830395e-09, -2.394830420895253e-09, 3.931048174872343e-03, 3.812484103623194e-03, 3.855693957196859e-03, 3.888090956014986e-03, 3.873854858788291e-03, 3.873854858788290e-03, 8.783956158492614e-03, 6.120949546906055e-03, 7.284025962146920e-03, 8.112251963778449e-03, 8.182945360068446e-03, 8.182945360068462e-03, 6.934275998827662e-02, 8.293217440752824e-02, 1.098536896386199e-01, 9.271468989024198e-02, 1.109390766091146e-01, 1.109390766091146e-01, 6.714822436635823e-02, -2.065748918914338e-03, -7.633279926878277e-04, 1.105588468834799e-01, -2.745863501187843e-03, -2.745863501187816e-03, -1.386806733864010e-07, -2.440447823761511e-12, -1.730191792742005e-08, -2.557969394452065e-03, -1.565170588145616e-09, -1.565170587544010e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
