
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mbeefvdw_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbeefvdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.164481175779342e+01, -2.164492708173047e+01, -2.164547444245603e+01, -2.164359173945638e+01, -2.164487221792784e+01, -2.164487221792784e+01, -3.284279964923131e+00, -3.284372054368721e+00, -3.287232904112690e+00, -3.286393797600858e+00, -3.284321156419653e+00, -3.725792061325590e+00, -5.611528736212973e-01, -7.284541971931330e-01, -7.138088177183307e-01, -7.172196753618031e-01, -7.288154475940203e-01, -7.288154475940203e-01, -2.009710771287272e-01, -2.031760952973919e-01, -6.514646546436783e-01, -1.574952828517121e-01, -2.016381354130407e-01, -2.016381354130407e-01, -1.219829114348596e-02, -1.278092680640589e-02, -5.305877736343290e-02, -5.835277707706076e-03, -1.264780242924419e-02, -1.264780242924419e-02, -5.543579546719033e+00, -5.544569987843583e+00, -5.543684044894041e+00, -5.436197120289518e+00, -5.544082862310828e+00, -5.544082862310828e+00, -1.790418357381110e+00, -1.814756572733557e+00, -1.780100464303594e+00, -1.799340027243937e+00, -1.820266431404638e+00, -2.117693160591559e+00, -6.192697871072832e-01, -6.715477613973116e-01, -5.887133256943241e-01, -6.124711279078027e-01, -6.425159339483073e-01, -5.826868199505213e-01, -7.714361396168715e-02, -2.089798729786234e-01, -7.616479631701838e-02, -2.044188034965029e+00, -1.346895893437817e-01, -1.346895893437817e-01, -3.739121566420154e-03, -6.434369495496747e-03, -4.822940338368030e-03, -4.795981587682545e-02, -3.893552420698985e-03, -5.862416222242494e-03, -6.382010118793646e-01, -6.346190042312201e-01, -6.347659349298526e-01, -6.368864103580089e-01, -6.363899280522404e-01, -6.363899280522404e-01, -6.176505318038428e-01, -5.367754325902286e-01, -5.597861538856930e-01, -5.815790638291291e-01, -5.704232676974295e-01, -5.348745518738770e-01, -7.043005811637243e-01, -1.897396995950802e-01, -2.993212036683285e-01, -3.225586999489480e-01, -3.350167404861365e-01, -3.350167404861364e-01, -4.310216044311460e-01, -4.900764193608131e-02, -6.684982901863561e-02, -3.549004069515219e-01, -6.259592994183381e-02, -9.688199935304416e-02, -1.428980096273435e-02, -1.760583392529543e-03, -3.345153264492539e-03, -9.243302050987076e-02, -4.981858710630404e-03, -4.981858710630396e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mbeefvdw_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbeefvdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.273901627861859e+01, -3.273906121673316e+01, -3.273932322824276e+01, -3.273858171032286e+01, -3.273903950918678e+01, -3.273903950918678e+01, -4.995052059466190e+00, -4.994741120908717e+00, -4.985389674981677e+00, -4.989449942906192e+00, -4.994989543262055e+00, -4.833409415810634e+00, -8.495983921326018e-01, -8.897291397284957e-01, -8.592939447940705e-01, -8.689622414128724e-01, -8.904948032519178e-01, -8.904948032519178e-01, -2.415782728716351e-01, -2.453846792643841e-01, -9.273244002892058e-01, -1.846381972346562e-01, -2.427068428548353e-01, -2.427068428548353e-01, -1.636795325916145e-02, -1.715898062258195e-02, -7.276311349064954e-02, -7.787623113657765e-03, -1.698041474805593e-02, -1.698041474659323e-02, -7.392896409484145e+00, -7.394378908744223e+00, -7.393053784907575e+00, -7.707567962437073e+00, -7.393649053703708e+00, -7.393649053703708e+00, -2.875035398338242e+00, -2.898462179471801e+00, -2.863391794425490e+00, -2.884540617502624e+00, -2.902226491748416e+00, -2.722242342131687e+00, -8.166253312249618e-01, -8.938625170878386e-01, -7.702019337662934e-01, -8.104487995940870e-01, -8.508053441225295e-01, -8.416744633923274e-01, -1.031505728869831e-01, -2.408459765003620e-01, -1.018751809570513e-01, -2.707832390907780e+00, -1.596966827225989e-01, -1.596966827225989e-01, -4.985495580895818e-03, -8.590038062089651e-03, -6.439653771228885e-03, -6.397476178977191e-02, -5.191403426181990e-03, -7.825699162666686e-03, -8.514967829592426e-01, -8.469239725388760e-01, -8.518107760836564e-01, -8.498562545057037e-01, -8.492254132628346e-01, -8.492254132628346e-01, -8.241868493606017e-01, -7.064765275734876e-01, -7.425800567443098e-01, -7.747992822376623e-01, -7.585364007409292e-01, -8.194085864619362e-01, -9.356803053372652e-01, -2.742954697042041e-01, -3.679304625392402e-01, -5.163234416829946e-01, -4.233599783940687e-01, -4.233599783940687e-01, -6.384995251858592e-01, -6.720829938151825e-02, -9.121444622780987e-02, -4.611750427253507e-01, -8.363697592376283e-02, -1.241205279885188e-01, -1.915836940835275e-02, -2.347681680529973e-03, -4.462479383597048e-03, -1.184614384061956e-01, -6.649145389664625e-03, -6.649145360006342e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbeefvdw_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbeefvdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.514074709468393e-08, -1.514050031949783e-08, -1.513929970168736e-08, -1.514332932182449e-08, -1.514061792077403e-08, -1.514061792077403e-08, -9.250874128624964e-06, -9.246865121249048e-06, -9.122756428837982e-06, -9.168387914701677e-06, -9.249585744416945e-06, -9.470015338858414e-07, -5.811529700135177e-03, -1.012904884502393e-03, -1.133974249404373e-03, -1.099443610665301e-03, -1.009861104843492e-03, -1.009861104843492e-03, -1.808679633727650e-01, -1.717961924571736e-01, -2.445925174661320e-03, -2.575646771379447e-01, -1.781228581766496e-01, -1.781228581766496e-01, 4.531401534221987e+00, 4.467395372925028e+00, 6.974666866741610e-01, 1.704913179480227e+00, 4.671998919202391e+00, 4.671998763017662e+00, 5.863582278550315e-09, 6.560454099683409e-09, 5.940765537974532e-09, -2.958258947884616e-06, 6.213277232354892e-09, 6.213277232354892e-09, -1.095001558322397e-04, -1.060622670749548e-04, -1.106314235426498e-04, -1.083151063298523e-04, -1.051993142299605e-04, -1.034634106775339e-05, -7.714229824807151e-04, -1.602920844157272e-04, -1.266554553534278e-03, -6.466404781444167e-04, -5.028933182357243e-04, -1.078349183910733e-02, -1.089378112907411e+01, -1.463505427148636e-01, -1.146693060386172e+01, -4.748924946138201e-06, -4.073531005473738e-01, -4.073531005473738e-01, -1.971592216474414e+06, 2.144339136974440e+00, 8.415785582266878e+00, -7.284769885379505e+01, -1.676916086808556e+06, 2.644736971360850e+00, 4.652631959017213e-04, 3.268847208106381e-04, -3.926154102316812e-03, 4.147554339646518e-04, 3.955258642466732e-04, 3.955258642466732e-04, 4.697083796043932e-04, -1.496026337261091e-03, -7.215477290821333e-04, -1.573029155431325e-04, -4.286946378544162e-04, -3.763512084645629e-02, -2.283957801879207e-04, -3.590837682377528e-01, -3.483888649089451e-02, -1.055360626178742e-01, -1.933018014569422e-02, -1.933018014569420e-02, -2.774157964065864e-02, 7.813814117940121e-01, 3.341540680470571e-01, -1.116329657399446e-02, -2.512001003541114e+01, -3.182102925054958e-01, 1.787762381943693e+00, 2.383941872865730e+00, 4.697823816157807e+00, -3.797447982656558e-01, 3.724185899171419e+00, 3.724141720952457e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbeefvdw_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbeefvdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.274454796528096e-03, 2.274441300690178e-03, 2.274377652112114e-03, 2.274597383749884e-03, 2.274447718844888e-03, 2.274447718844888e-03, 4.637572174732642e-03, 4.635356210614641e-03, 4.566905154290307e-03, 4.593418328141104e-03, 4.636935334902457e-03, 1.242173502866583e-18, 9.478105600401254e-03, -9.811915592633346e-18, 1.698425515267459e-17, -8.290682540149865e-17, -5.146713616382260e-17, -5.146713616382260e-17, 1.048163122922346e-16, 1.118140980443154e-16, 2.553688275619273e-03, -2.257094709872408e-15, 5.665878555015114e-17, 5.665878555015114e-17, 6.096453410101591e-13, -3.401472654620359e-12, -7.942083443222155e-14, -1.169783533714293e-11, -2.329595386437170e-12, 5.866417498150772e-13, -8.370921043338391e-19, 1.022480407204108e-19, -5.692809288938879e-20, 6.660464229434140e-03, 3.058681256784024e-20, 3.058681256784024e-20, 9.367433710396488e-03, 9.438203307267837e-03, 9.294797958714882e-03, 9.405676866669774e-03, 9.438651846290362e-03, 5.048255090346829e-18, 9.266486034897843e-18, -2.752511912421752e-18, -1.629075812355517e-17, 6.946214051640548e-18, 3.880402959164710e-18, 3.076618807947171e-02, 1.751475030911264e-04, 1.785762824038327e-16, 2.090371263023495e-04, 1.371464437948447e-18, 2.780675327894364e-15, 2.780675327894364e-15, 1.367504547951407e-10, -1.992560882297897e-11, -2.395764724482442e-11, 1.739364444918065e-05, 1.724672924547996e-10, 2.899989308629780e-11, 2.327203349368247e-18, -6.605851093905683e-19, 1.517796835565500e-02, -1.749864824961182e-18, -2.304396150955277e-20, -2.304396150955277e-20, 1.942859498685831e-18, -9.368325988835761e-18, 9.869429653437407e-18, 7.294497005839768e-18, -6.691099800092706e-18, 8.752357537586798e-02, -3.817879424429233e-18, 1.249649695941846e-02, -7.690055855971275e-17, 5.277883078710138e-02, -1.706064830729866e-17, -3.690451448294031e-17, 3.006204994778478e-02, -1.399304990327300e-14, -4.078999615660663e-15, 6.963575515609290e-18, 1.376439865244953e-04, -4.651865191241372e-15, 2.732045105757846e-12, 8.077209606181977e-10, -8.819402692894122e-12, -4.366782657835807e-15, -2.617477541780645e-12, 4.826612691230882e-11])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
