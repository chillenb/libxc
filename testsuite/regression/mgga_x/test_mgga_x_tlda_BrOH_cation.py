
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_tlda_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tlda", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.722002302489591e+01, -1.721996429350687e+01, -1.721976094033939e+01, -1.722062639020965e+01, -1.722016487844619e+01, -1.722016487844619e+01, -3.478929538225340e+00, -3.478754816892097e+00, -3.474209044421800e+00, -3.476361374195606e+00, -3.475762503061419e+00, -3.475762503061419e+00, -7.796324548496789e-01, -7.797542680350722e-01, -7.820520261157535e-01, -7.777485608298187e-01, -7.791260484746252e-01, -7.791260484746252e-01, -2.202269295273692e-01, -2.211809070111490e-01, -1.014241202164283e+00, -2.015295456710882e-01, -2.216560778166461e-01, -2.216560778166460e-01, -3.007460087029259e-02, -3.089330328080786e-02, -9.236299174578433e-02, -2.229672282081205e-02, -2.627909410873849e-02, -2.627909410873849e-02, -3.891659228686960e+00, -3.886097814161369e+00, -3.891334242419048e+00, -3.886428606880938e+00, -3.888878917403081e+00, -3.888878917403081e+00, -2.041229819811496e+00, -2.039066093335788e+00, -2.043713693626906e+00, -2.041554460468788e+00, -2.038643468443368e+00, -2.038643468443368e+00, -5.317228172071029e-01, -5.075004246723482e-01, -5.282829864650613e-01, -5.099675459419380e-01, -5.293292925836919e-01, -5.293292925836919e-01, -1.662419450216841e-01, -2.433052001473372e-01, -1.582486714975553e-01, -1.681310869865788e+00, -1.733403900569898e-01, -1.733403900569898e-01, -1.980612599674504e-02, -2.226702053719707e-02, -1.539156016017515e-02, -1.218151531550186e-01, -1.918627757381775e-02, -1.918627757381776e-02, -3.382045650932727e-01, -3.861905769367323e-01, -3.722128088905000e-01, -3.586237283567000e-01, -3.656999539961600e-01, -3.656999539961600e-01, -3.375755288004783e-01, -4.657909315677746e-01, -4.514256920765157e-01, -4.261274421886133e-01, -4.408512720785507e-01, -4.408512720785507e-01, -5.535051500037755e-01, -2.822974586016990e-01, -3.144202144222709e-01, -3.640891999476942e-01, -3.353383974840346e-01, -3.353383974840346e-01, -4.493282094572763e-01, -8.977626896986396e-02, -1.094221405928437e-01, -3.301801935626409e-01, -1.365683226872134e-01, -1.365683226872135e-01, -3.978738111154127e-02, -9.887455262835729e-03, -1.389815216336471e-02, -1.304235791365493e-01, -1.776270863373223e-02, -1.776270863373222e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_tlda_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tlda", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.722045573658417e+01, -1.721959031153602e+01, -1.722038760618515e+01, -1.721954097807101e+01, -1.722022702925474e+01, -1.721929485478080e+01, -1.722098672768717e+01, -1.722026604449766e+01, -1.722040900686373e+01, -1.721992074069403e+01, -1.722040900686373e+01, -1.721992074069403e+01, -3.478863265847599e+00, -3.478995813315828e+00, -3.478653389352385e+00, -3.478856249172704e+00, -3.474557409613337e+00, -3.473860700745067e+00, -3.476339872680076e+00, -3.476382874805878e+00, -3.478773389334770e+00, -3.472754993992284e+00, -3.478773389334770e+00, -3.472754993992284e+00, -7.803490465325404e-01, -7.789243174068399e-01, -7.804410677221961e-01, -7.790774067770799e-01, -7.829488178992615e-01, -7.811364422337828e-01, -7.785692868456843e-01, -7.769331457386017e-01, -7.819874082724416e-01, -7.756439362257123e-01, -7.819874082724416e-01, -7.756439362257123e-01, -2.197170620176644e-01, -2.206816429391320e-01, -2.205100771090975e-01, -2.217698249508140e-01, -1.017891416212498e+00, -1.010935684486127e+00, -2.029085214963993e-01, -2.002061211874393e-01, -2.290237292898896e-01, -1.739400832464266e-01, -2.290237292898895e-01, -1.739400832464265e-01, -2.948473315747133e-02, -3.056621330966835e-02, -3.021351100009197e-02, -3.144627261709390e-02, -9.098325167262972e-02, -9.353461358831583e-02, -2.241732443354504e-02, -2.216988584114825e-02, -2.767543106175434e-02, -1.870188518233992e-02, -2.767543106175434e-02, -1.870188518233992e-02, -3.892145127868378e+00, -3.891172980163546e+00, -3.886488392749174e+00, -3.885706947352324e+00, -3.891745093616652e+00, -3.890923090336668e+00, -3.886895366685055e+00, -3.885961510391716e+00, -3.889316040328015e+00, -3.888441474442301e+00, -3.889316040328015e+00, -3.888441474442301e+00, -2.042152074579961e+00, -2.040307425220551e+00, -2.039948026551354e+00, -2.038183439697537e+00, -2.045018960245451e+00, -2.042415176380585e+00, -2.042856634319697e+00, -2.040259300165481e+00, -2.038601370908924e+00, -2.038686123938761e+00, -2.038601370908924e+00, -2.038686123938761e+00, -5.334792973965087e-01, -5.299523119858089e-01, -5.094729108812369e-01, -5.055306224343855e-01, -5.290987756244085e-01, -5.275509401774146e-01, -5.089735462499754e-01, -5.108687009778172e-01, -5.346031523036650e-01, -5.231813103434299e-01, -5.346031523036651e-01, -5.231813103434299e-01, -1.657387546492118e-01, -1.667310101811589e-01, -2.428207162760809e-01, -2.437825022712084e-01, -1.561608471246577e-01, -1.600331253471797e-01, -1.681820417472054e+00, -1.680800634872705e+00, -1.737371740912932e-01, -1.730066155957196e-01, -1.737371740912932e-01, -1.730066155957196e-01, -1.947761653918009e-02, -2.009880896903480e-02, -2.202081502171041e-02, -2.250237710509708e-02, -1.518227330091581e-02, -1.556776208560790e-02, -1.223517677301471e-01, -1.212883165326309e-01, -1.817000673990434e-02, -1.957864589166431e-02, -1.817000673990434e-02, -1.957864589166432e-02, -3.385334702275977e-01, -3.378794449723418e-01, -3.862640581519555e-01, -3.861179497925882e-01, -3.723997778954202e-01, -3.720280122638797e-01, -3.587641290995144e-01, -3.584849441142594e-01, -3.658643232160422e-01, -3.655374857129331e-01, -3.658643232160422e-01, -3.655374857129331e-01, -3.380195927429825e-01, -3.371358397308250e-01, -4.654209459590321e-01, -4.661561498595567e-01, -4.512624832422598e-01, -4.515867471062928e-01, -4.257488896032227e-01, -4.265020293729802e-01, -4.405571416205347e-01, -4.411421489129573e-01, -4.405571416205347e-01, -4.411421489129573e-01, -5.566565780269833e-01, -5.503690778513297e-01, -2.818217917702306e-01, -2.827649577182368e-01, -3.139114736514978e-01, -3.149139500210082e-01, -3.631840580305985e-01, -3.649794921423136e-01, -3.356328986106578e-01, -3.350435844673035e-01, -3.356328986106578e-01, -3.350435844673035e-01, -4.498211412548040e-01, -4.488453221634868e-01, -8.949942522747577e-02, -9.004750689472657e-02, -1.085227868362062e-01, -1.102369026447557e-01, -3.338521413076153e-01, -3.266694708288181e-01, -1.359145520957930e-01, -1.371236671352686e-01, -1.359145520957930e-01, -1.371236671352687e-01, -3.930958215676150e-02, -4.021676527689526e-02, -9.878474418845372e-03, -9.896374808242436e-03, -1.366164412743805e-02, -1.409472998976724e-02, -1.305498156611351e-01, -1.303033386661983e-01, -1.599694451019132e-02, -1.851512298188836e-02, -1.599694451019130e-02, -1.851512298188834e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_tlda_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tlda", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_tlda_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tlda", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_tlda_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tlda", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-3.365215989751587e-03, -3.365879556241423e-03, -3.365301863233439e-03, -3.365941828626353e-03, -3.365538180041580e-03, -3.366291262989096e-03, -3.364575879974883e-03, -3.365062258494775e-03, -3.365271645841782e-03, -3.365524661514073e-03, -3.365271645841782e-03, -3.365524661514073e-03, -8.719315680926357e-03, -8.717630114423077e-03, -8.721501910506883e-03, -8.719060264353859e-03, -8.764180323064799e-03, -8.771755065217537e-03, -8.747893912851423e-03, -8.747829383693411e-03, -8.715843045246549e-03, -8.786274879993405e-03, -8.715843045246549e-03, -8.786274879993405e-03, -2.456675904338181e-02, -2.504243976206367e-02, -2.444070698608225e-02, -2.497366109850230e-02, -2.265298490631486e-02, -2.239467741729318e-02, -2.342868842941854e-02, -2.378055045770387e-02, -2.522393371504179e-02, -2.141371183674369e-02, -2.522393371504179e-02, -2.141371183674369e-02, -6.382448765150603e-02, -7.032297091956818e-02, -6.526569293264686e-02, -7.266855626482883e-02, -1.286355677843907e-02, -1.459995835158717e-02, -3.988659068033962e-02, -4.385066087723680e-02, -6.155231484248676e-02, -2.856490063597462e-02, -6.155231484248674e-02, -2.856490063597463e-02, -8.005924544605927e-03, -8.316977045122700e-03, -8.354697517152369e-03, -8.752537773356836e-03, -1.746692786098953e-02, -1.841546696901021e-02, -5.204341919832391e-03, -5.173141128736261e-03, -7.322458456175072e-03, -6.471037493412337e-03, -7.322458456175072e-03, -6.471037493412338e-03, -1.868416222025951e-02, -1.868940405127984e-02, -1.880370884271574e-02, -1.880496286267108e-02, -1.869248332023806e-02, -1.869459346465361e-02, -1.879498088861355e-02, -1.879949376548419e-02, -1.874391935244457e-02, -1.874706263732515e-02, -1.874391935244457e-02, -1.874706263732515e-02, -1.308889108625408e-02, -1.313429889140995e-02, -1.343814954179682e-02, -1.347374084028633e-02, -1.277580070618357e-02, -1.290781932309538e-02, -1.307820075736718e-02, -1.321610673803834e-02, -1.352927275762583e-02, -1.335008107497228e-02, -1.352927275762583e-02, -1.335008107497228e-02, -7.602812910134156e-02, -7.745393113504943e-02, -1.166414223857345e-01, -1.204865786558598e-01, -5.865006064192840e-02, -6.612980979125960e-02, -7.735044705751822e-02, -8.406074268859760e-02, -8.481238702243644e-02, -7.931812365393211e-02, -8.481238702243646e-02, -7.931812365393212e-02, -3.018128837061860e-02, -3.032034454120842e-02, -4.524727670197705e-02, -4.520757628358570e-02, -2.834936441012172e-02, -3.007329724150115e-02, -2.686834400229339e-02, -2.689732521329199e-02, -3.744590372940956e-02, -4.527157177463835e-02, -3.744590372940956e-02, -4.527157177463837e-02, -3.855411183646829e-03, -3.816656538967637e-03, -4.978874404091826e-03, -4.776640840407863e-03, -9.213553388301113e-03, -9.899219272636171e-03, -2.460628149039815e-02, -2.595360057917049e-02, -4.784925374174789e-03, -9.193490790554718e-03, -4.784925374174790e-03, -9.193490790554719e-03, -4.710909133317683e-01, -4.802760128990114e-01, -2.731828184843428e-01, -2.768139509777141e-01, -3.181238131946187e-01, -3.231519961788124e-01, -3.711876142044249e-01, -3.766821974338303e-01, -3.423347299241519e-01, -3.475805207760240e-01, -3.423347299241519e-01, -3.475805207760239e-01, -4.368224000046990e-01, -4.458128116465170e-01, -7.675916306214071e-02, -7.727171785866134e-02, -9.971646240383349e-02, -1.007600552091549e-01, -1.436835686254512e-01, -1.441816846386574e-01, -1.172506465939608e-01, -1.179345015138648e-01, -1.172506465939608e-01, -1.179345015138648e-01, -9.413769205878103e-02, -9.899612008045568e-02, -5.023157975371335e-02, -5.043068274901816e-02, -5.616251661298807e-02, -5.713599879121688e-02, -7.272477729001482e-02, -7.249361701582109e-02, -6.615874477503590e-02, -6.655496075914652e-02, -6.615874477503593e-02, -6.655496075914656e-02, -6.838432042894838e-02, -7.041581829268286e-02, -1.762705449440602e-02, -1.755732133376773e-02, -1.984605435213924e-02, -2.057546592413347e-02, -8.994390881089090e-02, -1.026252401430557e-01, -3.092930217488312e-02, -3.514367905924484e-02, -3.092930217488313e-02, -3.514367905924486e-02, -7.416822616279780e-03, -7.533247348764431e-03, -2.394084721078727e-03, -2.393144510037659e-03, -5.513561441611126e-03, -5.855020525396636e-03, -3.195688741273093e-02, -3.380506018810658e-02, -6.768453753177803e-03, -8.851295396406968e-03, -6.768453753177802e-03, -8.851295396406967e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
