
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mggac_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mggac", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.184443810637755e+01, -2.184455167642690e+01, -2.184509177381241e+01, -2.184323753670103e+01, -2.184449763984101e+01, -2.184449763984101e+01, -3.109064751198174e+00, -3.109119816402514e+00, -3.110900206750614e+00, -3.110456323010625e+00, -3.109094823144777e+00, -3.788767185875473e+00, -5.818255570335253e-01, -7.255099806452021e-01, -7.061884032507514e-01, -7.117482071375976e-01, -7.259835771914909e-01, -7.259835771914909e-01, -1.986804896363007e-01, -2.013259344241278e-01, -6.956107081599799e-01, -1.440432319926903e-01, -1.994740203467621e-01, -1.994740203467621e-01, -1.109643161727347e-02, -1.162299581881747e-02, -4.724245218115901e-02, -5.323320536828395e-03, -1.150187249665684e-02, -1.150187249665684e-02, -5.670349015023656e+00, -5.671357493788511e+00, -5.670455417783643e+00, -5.485771577491723e+00, -5.670861590923851e+00, -5.670861590923851e+00, -1.727791613519079e+00, -1.742987186793576e+00, -1.721637272467759e+00, -1.733405640754591e+00, -1.746257839267316e+00, -2.147930651787108e+00, -6.322884301174234e-01, -6.868232376919895e-01, -5.999786955077423e-01, -6.257940125247625e-01, -6.565822141558936e-01, -5.815301068147002e-01, -8.445898325935558e-02, -2.001039324200531e-01, -8.337684649337543e-02, -2.089081647827342e+00, -1.223751769426377e-01, -1.223751769426377e-01, -4.098170659415675e-03, -5.868852525652534e-03, -4.398734833837413e-03, -5.255615464184813e-02, -4.267430723667481e-03, -5.347434607966217e-03, -6.524420242772435e-01, -6.489588784938002e-01, -6.458561558931126e-01, -6.511708294456127e-01, -6.506886901702615e-01, -6.506886901702615e-01, -6.315026225444572e-01, -5.478257362300848e-01, -5.722286117543260e-01, -5.948590781817584e-01, -5.833277608377897e-01, -5.399727488607788e-01, -7.201334686601224e-01, -2.012331541180578e-01, -2.989109377208322e-01, -3.103275301985977e-01, -3.379871546582319e-01, -3.379871546582318e-01, -4.073037664932648e-01, -4.375485602271097e-02, -5.923388668946155e-02, -3.610611571975186e-01, -6.855113653465654e-02, -8.589770197383748e-02, -1.300493031936202e-02, -1.606790262887344e-03, -3.052316419834679e-03, -8.194823692570596e-02, -4.544611745175008e-03, -4.544611745175001e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mggac_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mggac", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.286688695762490e+01, -3.286691688652176e+01, -3.286711374133297e+01, -3.286661710519044e+01, -3.286690227771633e+01, -3.286690227771633e+01, -4.496172484271487e+00, -4.496429992449596e+00, -4.504391796350033e+00, -4.501655678211560e+00, -4.496265342094141e+00, -5.051689581177729e+00, -7.852264430270666e-01, -9.673466408646727e-01, -9.415845376726364e-01, -9.489976095214874e-01, -9.679781029263776e-01, -9.679781029263776e-01, -2.649073195164863e-01, -2.684345792335405e-01, -9.315146410438467e-01, -1.920576426603857e-01, -2.659653604637544e-01, -2.659653604637544e-01, -1.479524217920949e-02, -1.549732778030877e-02, -6.298993625034818e-02, -7.097760796056036e-03, -1.533583001716732e-02, -1.533583001716732e-02, -7.560465353368518e+00, -7.561809991721629e+00, -7.560607223715163e+00, -7.834167595691344e+00, -7.561148787902096e+00, -7.561148787902096e+00, -2.421988789021426e+00, -2.455382844930221e+00, -2.408389956296829e+00, -2.434011043809760e+00, -2.463275746357722e+00, -2.863907535723117e+00, -8.430512401576791e-01, -9.157643169233047e-01, -7.999715940116849e-01, -8.343920167006277e-01, -8.754429522088120e-01, -9.244275457420967e-01, -1.126234921497187e-01, -2.668052432291783e-01, -1.111819363284465e-01, -2.785442197106097e+00, -1.631669025934828e-01, -1.631669025934828e-01, -5.464227551077444e-03, -7.825136765677572e-03, -5.864979822060561e-03, -7.007587236332341e-02, -5.689907638037999e-03, -7.129912874703200e-03, -8.699226990364257e-01, -8.652785046586002e-01, -8.735493845575855e-01, -8.682277725942874e-01, -8.675849202271662e-01, -8.675849202271662e-01, -8.420034967260753e-01, -7.304343149744839e-01, -7.629714823398461e-01, -7.931454375761701e-01, -7.777703477843387e-01, -8.288876758327384e-01, -9.601779582143322e-01, -2.698928565769043e-01, -3.985479169628077e-01, -4.363552807961982e-01, -4.506495395457106e-01, -4.506495395457106e-01, -5.956328592415002e-01, -5.833980804014858e-02, -7.897851559361625e-02, -4.814148762643186e-01, -9.140826824785218e-02, -1.145302693028724e-01, -1.733990712368838e-02, -2.142387242511625e-03, -4.069755311002768e-03, -1.092643159051733e-01, -6.059482390502665e-03, -6.059482390502656e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mggac_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mggac", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.418244976110761e-08, -1.418219958648537e-08, -1.418099239543875e-08, -1.418507877343397e-08, -1.418231873834201e-08, -1.418231873834201e-08, -3.956730786757904e-06, -3.959678827695600e-06, -4.048743210422496e-06, -4.012752146663802e-06, -3.957473634273750e-06, 0.000000000000000e+00, -1.881074905016627e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.168396559550204e-05, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -3.367679837713863e-06, 0.000000000000000e+00, 0.000000000000000e+00, -1.915417374296969e-05, -2.139078742082390e-05, -1.821593333894017e-05, -1.990974473975669e-05, -2.203962057288891e-05, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.038791175363410e-02, -4.741715798262951e-04, 0.000000000000000e+00, -5.939916347395041e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.685017917275493e-06, 0.000000000000000e+00, 0.000000000000000e+00, -1.750199137892988e-04, -2.999330530214373e-06, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.023256980462372e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -3.684114248076137e-02, 0.000000000000000e+00, -4.742409139276589e-03, 0.000000000000000e+00, -2.018376961645083e-02, 0.000000000000000e+00, 0.000000000000000e+00, -1.673014424659199e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -6.800813255889629e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mggac_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mggac", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.193369364550754e-03, 2.193346645935221e-03, 2.193242958619665e-03, 2.193613131219304e-03, 2.193357426125400e-03, 2.193357426125400e-03, 2.640599889611432e-03, 2.642583958944337e-03, 2.702824519542729e-03, 2.679132495692821e-03, 2.641137948211342e-03, 7.853074728239719e-14, 8.842064035738733e-04, 4.101042427911818e-13, 4.213248486068582e-13, 4.180336792131135e-13, 4.098367106097396e-13, 4.098367106097396e-13, 1.497553799689746e-12, 1.477875777605344e-12, 1.754676558200155e-04, 2.065593313197996e-12, 1.491596357157632e-12, 1.491596357157632e-12, 2.681370977317505e-11, 2.559893761127747e-11, 6.298040500628701e-12, 5.589514283362296e-11, 2.586851336258230e-11, 2.586851336258230e-11, 5.247202875372655e-14, 5.246269819554356e-14, 5.247104414689187e-14, 7.537790504541254e-03, 5.246728592953426e-14, 5.246728592953426e-14, 2.271074383287951e-03, 2.590253904429187e-03, 2.141426328477379e-03, 2.379483479621302e-03, 2.680057904918002e-03, 1.385215665903598e-13, 4.705680245789757e-13, 4.332042081463093e-13, 4.959088050809431e-13, 4.754515245473655e-13, 4.531568337462290e-13, 7.081404207312972e-02, 6.896670205882936e-06, 1.486900946711419e-12, 8.311453185516729e-06, 1.424236901143626e-13, 2.431332454501719e-12, 2.431332454501719e-12, 4.462041674135711e-12, 5.069888308261283e-11, 6.764292537367371e-11, 6.134332318408943e-07, 5.627818489415557e-12, 5.564258448859073e-11, 4.560324213684553e-13, 4.584800765141382e-13, 3.451596091250751e-02, 4.569226733323932e-13, 4.572612382841840e-13, 4.572612382841840e-13, 4.711535717569639e-13, 5.431192767391251e-13, 5.199577773876632e-13, 5.001768109930058e-13, 5.100643872925680e-13, 8.973261460667104e-02, 4.131660726165853e-13, 9.277335690288921e-04, 9.953958968088784e-13, 1.382132492775782e-02, 8.803136908921823e-13, 8.803136908921818e-13, 2.476483030064285e-02, 6.800043198128161e-12, 5.023050902250789e-12, 8.240562917664080e-13, 5.289136589651058e-06, 3.463826781202691e-12, 2.287876861903806e-11, 1.852488044574034e-10, 9.748618324006656e-11, 3.630764636740960e-12, 6.547244046648297e-11, 6.547244046648315e-11]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
