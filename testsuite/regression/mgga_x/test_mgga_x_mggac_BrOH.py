
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mggac_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mggac", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.325602127125659e+01, -2.325607871087469e+01, -2.325638801899078e+01, -2.325544735040046e+01, -2.325605110680888e+01, -2.325605110680888e+01, -3.325536723709136e+00, -3.325688156322786e+00, -3.330544306689815e+00, -3.331381427203004e+00, -3.325578920563477e+00, -3.325578920563477e+00, -5.867282993494115e-01, -5.860840589462621e-01, -5.697856553859926e-01, -5.761789335276122e-01, -5.864956344591540e-01, -5.864956344591540e-01, -1.881977615888284e-01, -1.893742914731759e-01, -6.962064878359193e-01, -1.151859636224251e-01, -1.883375581588294e-01, -1.883375581588294e-01, -8.855718758560477e-03, -9.275843526921772e-03, -3.770620249362535e-02, -4.248186911643229e-03, -9.179288268561058e-03, -9.179288268560785e-03, -5.670197107220549e+00, -5.671207474305660e+00, -5.670305743536375e+00, -5.671091188548965e+00, -5.670707904711313e+00, -5.670707904711313e+00, -2.095549125711427e+00, -2.119311133041365e+00, -2.094375230327830e+00, -2.112883718379347e+00, -2.113574445290574e+00, -2.113574445290574e+00, -6.061747567940763e-01, -6.614125841263095e-01, -5.485562899848301e-01, -5.766961179141388e-01, -6.394912269124408e-01, -6.394912269124408e-01, -8.458946534857709e-02, -1.862741647438262e-01, -8.352325013582552e-02, -1.912233168435556e+00, -9.866869080642304e-02, -9.866869080642304e-02, -4.098170713119379e-03, -4.683539606797733e-03, -3.510336915982820e-03, -5.255968450768769e-02, -4.267430742023391e-03, -4.267430742023391e-03, -6.517833606672544e-01, -6.483231369521271e-01, -6.495632433543476e-01, -6.505203196063867e-01, -6.500408160727086e-01, -6.500408160727086e-01, -6.295626920854197e-01, -5.468924220216060e-01, -5.709189057958879e-01, -5.932402168618097e-01, -5.817318297732629e-01, -5.817318297732629e-01, -6.806203437478309e-01, -2.467476133339901e-01, -2.854220222724254e-01, -3.496309678262482e-01, -3.200314295574329e-01, -3.200314295574693e-01, -4.767021885806584e-01, -3.492798432581674e-02, -4.728002134952470e-02, -3.318116444498908e-01, -6.866780872518455e-02, -6.866780872519156e-02, -1.037836836928813e-02, -1.282272184996993e-03, -2.435850103689673e-03, -6.549262639993543e-02, -3.626751384015050e-03, -3.626751384013669e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mggac_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mggac", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.071476054617882e+01, -3.071485116278693e+01, -3.071538509047215e+01, -3.071390607787803e+01, -3.071480715470653e+01, -3.071480715470653e+01, -4.883305402081944e+00, -4.883501761481623e+00, -4.889464745362930e+00, -4.887039499811885e+00, -4.883385802992412e+00, -4.883385802992412e+00, -8.021655078924538e-01, -8.010736529736078e-01, -7.741180991635401e-01, -7.856413210168693e-01, -8.017757907911235e-01, -8.017757907911235e-01, -1.546122234926528e-01, -1.627653493845976e-01, -9.340149709993925e-01, -1.533392656956737e-01, -1.567181938110550e-01, -1.567181938110550e-01, -1.176734789132721e-02, -1.234374797360817e-02, -5.021913805056444e-02, -5.664249199858736e-03, -1.220117264404724e-02, -1.220117264403937e-02, -7.536166708682182e+00, -7.537726409831855e+00, -7.536362735913992e+00, -7.537573282992680e+00, -7.536917507146795e+00, -7.536917507146795e+00, -2.472379315662729e+00, -2.534211055056985e+00, -2.470551168655820e+00, -2.523504747970488e+00, -2.517824531753337e+00, -2.517824531753337e+00, -8.196449221629923e-01, -9.363089122392466e-01, -7.850189813720014e-01, -8.633029210221109e-01, -8.544184280531094e-01, -8.544184280531094e-01, -1.119789060515039e-01, -4.904902408622541e-02, -1.104593550815727e-01, -2.917165066286625e+00, -1.215213637209190e-01, -1.215213637209190e-01, -5.464227253943457e-03, -6.244719354559208e-03, -4.680447006380378e-03, -7.007354339669158e-02, -5.689907633123438e-03, -5.689907633123440e-03, -8.697546219080372e-01, -8.631762330347703e-01, -8.655297760458028e-01, -8.673504909052714e-01, -8.664392176269478e-01, -8.664392176269478e-01, -8.437550676233797e-01, -7.078110286136691e-01, -7.461179557166554e-01, -7.832280805298073e-01, -7.639020013505881e-01, -7.639020013505881e-01, -9.921448997307951e-01, -2.079053147223070e-01, -2.773200074463965e-01, -4.569948280280845e-01, -3.638666931158366e-01, -3.638666931164062e-01, -6.002862503945667e-01, -4.633633288724586e-02, -6.296521695496968e-02, -4.553478706418598e-01, -9.053469130676842e-02, -9.053469130675164e-02, -1.383782248496883e-02, -1.709696246669558e-03, -3.247799585059883e-03, -8.660134990001289e-02, -4.835668501915600e-03, -4.835668501913161e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mggac_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mggac", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.235826592524366e-09, -2.235745140441215e-09, -2.234672326751605e-09, -2.235960915318582e-09, -2.235790329850204e-09, -2.235790329850204e-09, -1.716981163203766e-05, -1.717609393715510e-05, -1.736783365860506e-05, -1.739508043553917e-05, -1.717053262607960e-05, -1.717053262607960e-05, -9.510125751936089e-04, -9.471991699183444e-04, -9.125116790610807e-04, -1.275079411137933e-03, -9.500503236937077e-04, -9.500503236937077e-04, -2.583276228365338e+00, -2.516011365445228e+00, -4.275267091637038e-05, -4.851777426241619e-02, -2.576605437217463e+00, -2.576605437217463e+00, -4.964404701370279e+00, -2.608341499247422e+00, -7.957485449536521e-02, -5.347617018507053e-05, -4.295723373978488e+00, -4.295723374833637e+00, -2.631891905364870e-07, -2.626611617099889e-07, -2.627710559879983e-07, -2.623827386138060e-07, -2.634078452409625e-07, -2.634078452409625e-07, -1.294656209000354e-04, -1.110841792058428e-04, -1.230778709776085e-04, -1.075430694651962e-04, -1.247297467919007e-04, -1.247297467919007e-04, -2.352156074121017e-02, -1.631623242172367e-02, -3.286764750745983e-02, -2.787013844692924e-02, -1.727631345734588e-02, -1.727631345734588e-02, -1.154214098086322e-01, -2.642832342670788e+00, -1.461420228739554e-01, -2.238552355885805e-04, -9.229820232716703e-01, -9.229820232716703e-01, -5.680001121458255e-04, -1.823501359598311e-04, -7.876287933282709e-03, -8.229519939586221e-03, -1.012879201450963e-04, -1.012879236787816e-04, -4.314223599807830e-03, -4.349924540296307e-03, -4.338214229105920e-03, -4.328032358634508e-03, -4.334566066249176e-03, -4.334566066249171e-03, -8.103740712022545e-03, -1.095712201631284e-02, -1.051830526964667e-02, -9.742380174398645e-03, -1.056128831801731e-02, -1.056128831801732e-02, -1.510817299172576e-02, -7.178540877559602e-01, -4.835206258271266e-01, -1.998570117608953e-01, -3.089735810603214e-01, -3.089735810577607e-01, -5.993408259290349e-02, -3.310516760364840e-01, -5.624172835915347e-02, -2.514501783489443e-01, -3.022277004064600e-01, -3.022277004142041e-01, -4.235309776031111e-04, -3.770584922244460e-06, -3.920842098491221e-03, -2.843485595289981e-01, -1.076806801684836e-04, -1.076870527196310e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mggac_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mggac", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mggac_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mggac", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [3.457790180888932e-04, 3.457689390879573e-04, 3.456161042048534e-04, 3.457741266775215e-04, 3.457747222940777e-04, 3.457747222940777e-04, 1.145860184674278e-02, 1.146286663407547e-02, 1.159426622636276e-02, 1.161390575762047e-02, 1.145926656768794e-02, 1.145926656768794e-02, 4.470270729904971e-03, 4.438648760055885e-03, 3.943478461193020e-03, 5.641514072735177e-03, 4.460733694263496e-03, 4.460733694263496e-03, 2.486084062584319e-01, 2.519364851703796e-01, 3.459565969472520e-04, 1.779339167409203e-03, 2.509494444275712e-01, 2.509494444275712e-01, 8.323318243400519e-05, 5.025716592016962e-05, 1.029561862440821e-04, 9.898912377266436e-11, 8.020865840703149e-05, 8.020865842342734e-05, 5.888120893002934e-04, 5.879443611127688e-04, 5.879097250952114e-04, 5.872844839731839e-04, 5.894610935287416e-04, 5.894610935287416e-04, 1.535049535877010e-02, 1.345140892887994e-02, 1.446877239065088e-02, 1.285284972183566e-02, 1.516736382836185e-02, 1.516736382836185e-02, 7.296106041436860e-02, 6.486853974351896e-02, 8.710747119354027e-02, 8.381324082336326e-02, 6.000641962848413e-02, 6.000641962848413e-02, 1.678766573140826e-03, 2.598458471737802e-01, 2.044898464097446e-03, 2.504452475860869e-02, 2.075642420009340e-02, 2.075642420009340e-02, 9.439192785712098e-10, 4.523191552211548e-10, 8.225915326535967e-09, 2.884392354839778e-05, 1.900524317054853e-10, 1.900524384461838e-10, 1.470305990725485e-02, 1.458856435621171e-02, 1.463343379238353e-02, 1.466407279128513e-02, 1.465361234773755e-02, 1.465361234773753e-02, 2.504322810650144e-02, 2.210563974889489e-02, 2.418431411987735e-02, 2.516440413808532e-02, 2.572374119194249e-02, 2.572374119194253e-02, 6.923572312733757e-02, 1.404301727913156e-01, 1.584600259902697e-01, 1.368569276765123e-01, 1.463865678980754e-01, 1.463865678968623e-01, 8.871754856150146e-02, 3.402936660298781e-04, 1.434328560928213e-04, 1.452357575176211e-01, 2.350488873154052e-03, 2.350488873213870e-03, 1.143111433329393e-08, 1.919400956769236e-13, 1.368192893220332e-09, 1.920211970694016e-03, 1.240244842665656e-10, 1.240318251970554e-10]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
