
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_m06_l_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_m06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.157167513576091e+01, -2.157174742691259e+01, -2.157208252462657e+01, -2.157100759560268e+01, -2.157156881669495e+01, -2.157156881669495e+01, -3.005160541445803e+00, -3.005303568974286e+00, -3.009127008486601e+00, -3.007854188724961e+00, -3.007678133188141e+00, -3.662060787194945e+00, -4.742271239587318e-01, -7.052869918759223e-01, -6.908097381544418e-01, -6.942779083922809e-01, -6.935456596764572e-01, -6.935456596764572e-01, -1.857620019457178e-01, -1.883105426707258e-01, -4.340214645740278e-01, -1.690984047624800e-01, -1.603955928482786e-01, -1.603955928482781e-01, -4.459980261963779e-02, -4.690129837478118e-02, -2.214771048069490e-01, -2.588338579744360e-02, -3.246989958198443e-02, -3.246989958198443e-02, -5.689953793821833e+00, -5.696080103683933e+00, -5.690293844072187e+00, -5.427159918182247e+00, -5.693006413631732e+00, -5.693006413631732e+00, -1.624708119895519e+00, -1.651077582497869e+00, -1.604190676984907e+00, -1.628226856639997e+00, -1.649148633542093e+00, -2.078806779583171e+00, -6.319895804304283e-01, -6.888035379272121e-01, -5.717012450094481e-01, -6.087116120011129e-01, -6.479432002191462e-01, -5.796438771134393e-01, -8.095266373841267e-02, -1.876022079065662e-01, -8.705257658686248e-02, -2.095030546869970e+00, -1.732292665376146e-01, -1.732292665376137e-01, -1.106244007483786e-02, -2.530829382746747e-02, -1.932953949081175e-02, -1.013759809073051e-01, -1.285303857638394e-02, -2.329293477213846e-02, -5.118011607404203e-01, -6.605598744369463e-01, -6.170792131072665e-01, -5.851924185612348e-01, -6.102593995929252e-01, -6.102593995929252e-01, -5.265827608670864e-01, -5.211936095809699e-01, -5.627794504483136e-01, -5.815331053666484e-01, -5.760898044945265e-01, -5.296668219972356e-01, -7.291477134471245e-01, -1.242282662456927e-01, -2.785083534780375e-01, -2.872717084464596e-01, -3.178850481160985e-01, -3.178850481160985e-01, -3.948663776432087e-01, -2.146638870540727e-01, -2.616475957949078e-01, -3.527517727609309e-01, -7.763411624760749e-02, -2.363219087428165e-01, -6.278261373075492e-02, -6.775965200372145e-03, -1.421036095425004e-02, -2.362431226559800e-01, -2.155200312615548e-02, -2.155200312615550e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_m06_l_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_m06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.941440039056635e+01, -2.941460328404143e+01, -2.941548297511537e+01, -2.941247699954681e+01, -2.941405257275870e+01, -2.941405257275870e+01, -4.875800941314091e+00, -4.875940696616844e+00, -4.879920698858518e+00, -4.878705266969015e+00, -4.878325493175006e+00, -4.354475192167182e+00, -8.999185189841676e-01, -7.972611388744132e-01, -7.574055498695638e-01, -7.687847088991759e-01, -7.656557812303888e-01, -7.656557812303888e-01, -2.160669724363575e-01, -2.147218529622726e-01, -1.036807748989859e+00, -2.665448611992483e-02, -1.652775200347804e-01, -1.652775200347707e-01, -5.896851005833455e-02, -6.194292618740647e-02, -2.363569592689242e-01, -3.442864326417049e-02, -4.310029019607254e-02, -4.310029019607254e-02, -8.372445889979449e+00, -8.410561970043544e+00, -8.374650738951415e+00, -8.681496947587709e+00, -8.391653720238272e+00, -8.391653720238272e+00, -2.764784121973920e+00, -2.772157754236632e+00, -2.760453207979398e+00, -2.766354858773447e+00, -2.770949678606526e+00, -2.462103921561268e+00, -8.795089035210373e-01, -8.388093416627906e-01, -7.092836005432042e-01, -8.466761113722228e-01, -8.874551167385158e-01, -9.485571141187927e-01, 4.438547114846156e-02, -2.027512876272353e-01, 3.292910245745371e-02, -2.805342794907600e+00, 4.089420796588396e-02, 4.089420796590444e-02, -1.470109463554161e-02, -3.367187704035935e-02, -2.568063383597603e-02, -2.926483802570752e-02, -1.698423499949935e-02, -3.095748301656308e-02, -3.276663998555656e-01, -6.861469997970477e-01, -5.034938326865623e-01, -3.392304880090602e-01, -4.014585525994870e-01, -4.014585525994870e-01, -2.931856008409581e-01, -6.893201669498359e-01, -7.529980980543889e-01, -7.197256400610844e-01, -6.949049130563264e-01, -7.467867956847800e-01, -8.668166627768721e-01, -2.901692168397941e-01, -3.059030478765870e-01, -4.922830716917493e-01, -3.834397638473841e-01, -3.834397638473844e-01, -6.397204767993928e-01, -2.334532625521910e-01, -2.374662975596575e-01, -4.271272325852917e-01, 2.560535095471419e-02, -2.278092944944632e-02, -8.274506434160353e-02, -9.033085318874194e-03, -1.892313132901145e-02, -4.129769210799159e-02, -2.864165181854600e-02, -2.864165181854646e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_m06_l_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_m06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.111489249136461e-08, -1.111474074775549e-08, -1.111403907720370e-08, -1.111629556330376e-08, -1.111511699331391e-08, -1.111511699331391e-08, -1.678525598053778e-05, -1.678454568492794e-05, -1.676471658007372e-05, -1.676663595456409e-05, -1.677339938821444e-05, -8.718607292103975e-06, -1.372419084114017e-02, -3.627903656723403e-03, -3.446394327699126e-03, -3.597491298601609e-03, -3.561864007396837e-03, -3.561864007396837e-03, -4.671791139860729e-01, -4.781032773067783e-01, -8.558874468265960e-03, -1.895580970099674e-02, -2.529711579835662e-01, -2.529711579835646e-01, 3.181171068748600e+00, 3.309787889875268e+00, 1.223427191873858e+00, 2.353799547365817e+00, 3.267166936336634e+00, 3.267166936336634e+00, -2.673724838456013e-06, -2.676617217570041e-06, -2.673904859987113e-06, -3.129862162515165e-06, -2.675158439138658e-06, -2.675158439138658e-06, -1.722776378446344e-04, -1.663662724436897e-04, -1.768171833320510e-04, -1.713926439163814e-04, -1.668754809403204e-04, -7.715592796852840e-05, -1.337117413913442e-02, -1.124213810462484e-02, -1.563438611524016e-02, -1.571382914146770e-02, -1.305213872233212e-02, -1.882193246765056e-02, -9.080227258064809e+01, -1.495833619269787e-01, -1.298129963577770e+02, -1.241248249203030e-04, 1.565902705601757e-01, 1.565902705601803e-01, -1.449321135289494e+08, 2.081440424042288e+00, 1.679643811125471e+01, -7.133024569322728e+02, -7.798112489542574e+07, 6.449135236370585e+00, -1.462604938044017e-02, -1.816807622525516e-02, -1.874511739651522e-02, -1.639899644430555e-02, -1.699799509388026e-02, -1.699799509388026e-02, -1.705610864812289e-02, -2.461787573885533e-02, -2.386208751761598e-02, -2.214696192567295e-02, -2.317117689624446e-02, -3.049102470852907e-02, -9.036718830636047e-03, -1.375802870180577e+00, -1.327205452632925e-01, -1.735540613846926e-01, -1.089299515091602e-01, -1.089299515091602e-01, -5.779893918869720e-02, 1.268003213728783e+00, 9.335465588183030e-01, -1.045244008776417e-01, -2.441744788922326e+02, 7.166468063099132e-01, 1.513335502117299e+00, 2.555732455054969e+00, 7.316311399133475e+00, 8.448553723533206e-01, 9.190478842508147e+00, 9.190478842508126e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_m06_l_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_m06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [3.823860306452534e-04, 3.824582001205514e-04, 3.827498481998293e-04, 3.816841179122216e-04, 3.822450725646550e-04, 3.822450725646550e-04, 6.532748562426896e-03, 6.534048403777929e-03, 6.569910528104772e-03, 6.554424133345914e-03, 6.556739803470502e-03, 5.321595928726859e-03, 2.554207081715567e-02, 1.410543992370508e-02, 1.013866619492206e-02, 1.169507037798290e-02, 1.128323651823249e-02, 1.128323651823249e-02, 3.273139605173350e-02, 3.194707420660613e-02, 1.858691558961376e-02, -1.226201275323858e-01, -1.542110342157680e-02, -1.542110342159075e-02, -4.237432593526739e-04, -5.144652870745296e-04, -3.574604437810817e-02, -6.015110490337510e-05, -1.658914923959576e-04, -1.658914923959576e-04, 2.090350681199979e-02, 2.144141272340871e-02, 2.093469491086469e-02, 2.097092879473952e-02, 2.117389879238807e-02, 2.117389879238807e-02, 1.153326157457285e-02, 1.129865517217238e-02, 1.171612608927619e-02, 1.150226036022419e-02, 1.131433248807899e-02, 8.853914359962248e-03, 8.453793930265381e-02, 1.815888027838870e-02, 4.476539954617308e-02, 8.837606891525639e-02, 8.120082891727375e-02, 8.186654090206998e-02, -8.315651621536006e-02, -6.600472785633084e-03, -8.266078652860415e-02, 2.287122599088534e-02, -1.992960023705264e-01, -1.992960023705124e-01, -2.835820032664659e-05, -4.968602988946111e-05, -1.794298385561173e-04, -6.589496174241226e-02, -1.771094157921681e-04, -1.204198007632645e-04, -1.420614047224142e+00, -3.227755613414910e-01, -8.250987090510286e-01, -1.294727567189171e+00, -1.078802091803649e+00, -1.078802091803649e+00, -1.521934355530713e+00, 7.184982579035629e-02, 8.481238669479299e-02, 3.149957793004589e-02, 2.747476429696364e-02, 3.246070434950907e-02, 1.335544485208418e-02, 6.660969907001840e-02, 2.607071626524411e-02, 6.536336795983892e-02, 5.244701295915939e-02, 5.244701295915951e-02, 5.246286917934451e-02, -3.222967482091735e-02, -6.403074344666200e-02, 6.224023280494764e-02, -9.383462776919417e-02, -2.193219820712973e-01, -5.678622340323318e-04, -1.163658374646695e-06, -3.083142212851686e-05, -2.136956969214520e-01, -1.359631986797640e-04, -1.359631986752752e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
