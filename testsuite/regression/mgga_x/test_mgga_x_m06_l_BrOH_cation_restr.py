
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_m06_l_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_m06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.305354070196647e+01, -2.305357382518207e+01, -2.305380087744170e+01, -2.305330708774170e+01, -2.305355439979883e+01, -2.305355439979883e+01, -3.347410731652686e+00, -3.347481724602003e+00, -3.349610831716718e+00, -3.350914213305364e+00, -3.349644208698198e+00, -3.349644208698198e+00, -5.906358651072430e-01, -5.903023175919840e-01, -5.867290220561062e-01, -5.981123313162744e-01, -5.943590337012948e-01, -5.943590337012948e-01, -1.839664646991131e-01, -1.860077022802327e-01, -5.788168309053939e-01, -1.674417365059845e-01, -1.577066681311964e-01, -1.577066681311960e-01, -4.459987072991652e-02, -4.690144678205761e-02, -2.215657567456276e-01, -2.588353995748787e-02, -3.247011823760297e-02, -3.247011823760297e-02, -5.688345828821737e+00, -5.694489213133682e+00, -5.688719254179643e+00, -5.694137769257913e+00, -5.691390372913221e+00, -5.691390372913221e+00, -2.027490076722159e+00, -2.047463363371828e+00, -2.021873727155705e+00, -2.040122702729240e+00, -2.041150443182263e+00, -2.041150443182263e+00, -6.075838854957459e-01, -6.597999058993886e-01, -5.322753339730960e-01, -5.578150586624123e-01, -6.246261368412889e-01, -6.246261368412889e-01, -2.585938686519049e-01, -1.864131469511087e-01, -2.679464692078363e-01, -1.931514019906702e+00, -1.731833453862162e-01, -1.731833453862153e-01, -1.999054589702978e-02, -2.530858115664383e-02, -1.932973570714097e-02, -2.699384033303500e-01, -2.329328973248428e-02, -2.329328973248421e-02, -5.088043125997606e-01, -6.570137119978322e-01, -6.271289900324566e-01, -5.818891799782123e-01, -6.068580840613161e-01, -6.068580840613161e-01, -5.204740907145197e-01, -5.182731076430029e-01, -5.585512086952980e-01, -5.761000286908075e-01, -5.709568639649292e-01, -5.709568639649292e-01, -6.907132457778563e-01, -2.335933098346892e-01, -2.731642890457307e-01, -3.472833444948928e-01, -3.080361607643519e-01, -3.080361607643519e-01, -4.626945366590148e-01, -2.147053287833506e-01, -2.618253217363660e-01, -3.356063493327816e-01, -2.365994239686401e-01, -2.365994239686415e-01, -6.278652486907266e-02, -6.775952694068959e-03, -1.421038557237331e-02, -2.364651747808454e-01, -2.155225645525565e-02, -2.155225645525565e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_m06_l_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_m06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.763969042720525e+01, -2.763994183220835e+01, -2.764097128635350e+01, -2.763724630822017e+01, -2.763920785070523e+01, -2.763920785070523e+01, -4.464760418339801e+00, -4.464991849986512e+00, -4.471232098778477e+00, -4.467546996811461e+00, -4.468110732138066e+00, -4.468110732138066e+00, -7.596265598357170e-01, -7.560930762344125e-01, -6.834574864444181e-01, -7.057555672835905e-01, -7.006274269484847e-01, -7.006274269484847e-01, -2.098479753840557e-01, -2.075844262530801e-01, -8.387554817310536e-01, -5.334962434701726e-03, -1.458738234047975e-01, -1.458738234047881e-01, -5.896871185905549e-02, -6.194336165431576e-02, -2.364136050374025e-01, -3.442905863758027e-02, -4.310090711048109e-02, -4.310090711048109e-02, -8.373736697086635e+00, -8.411836969006059e+00, -8.375914583207987e+00, -8.409528987065544e+00, -8.392949929846651e+00, -8.392949929846651e+00, -2.444403894459891e+00, -2.452852923808195e+00, -2.442026809477134e+00, -2.448505935196131e+00, -2.450819497176117e+00, -2.450819497176117e+00, -8.910832795380929e-01, -8.700192339024817e-01, -7.248804699430715e-01, -8.827918455092423e-01, -9.007253792439553e-01, -9.007253792439553e-01, 2.336668733948776e-02, -1.929099975349582e-01, -1.031471401003814e-02, -2.943786586839142e+00, 4.877965425014438e-02, 4.877965425016452e-02, -2.662239615444648e-02, -3.367248041091295e-02, -2.568114860966331e-02, -1.644242911147402e-01, -3.095827558222650e-02, -3.095827558222671e-02, -3.331881627297828e-01, -6.910966327560377e-01, -4.857440407775250e-01, -3.453905950646493e-01, -4.075232844277157e-01, -4.075232844277157e-01, -3.049572507070568e-01, -6.896822179841150e-01, -7.551098684627828e-01, -7.247389184990215e-01, -6.989373023296339e-01, -6.989373023296339e-01, -9.068010892647473e-01, -2.737670574146815e-01, -2.956641200310191e-01, -4.348952617795993e-01, -3.747813051737325e-01, -3.747813051737327e-01, -5.742707036282030e-01, -2.335031839768792e-01, -2.372824089425319e-01, -4.310632285408383e-01, -1.939186600067930e-02, -1.939186600068063e-02, -8.275250163439737e-02, -9.032910227690970e-03, -1.892320202819446e-02, -3.974989140131351e-02, -2.864228304072117e-02, -2.864228304072163e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_m06_l_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_m06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-8.968291689361559e-09, -8.968224434254342e-09, -8.967812363419194e-09, -8.968813700735702e-09, -8.968305094949234e-09, -8.968305094949234e-09, -1.261756914503521e-05, -1.261770568059960e-05, -1.261806515057755e-05, -1.259051655052270e-05, -1.260829862421835e-05, -1.260829862421835e-05, -8.778245032993268e-03, -8.784030755342502e-03, -8.755377205807437e-03, -8.341717534749446e-03, -8.486725515453798e-03, -8.486725515453798e-03, -5.459755488141378e-01, -5.703695532605383e-01, -5.940862955968284e-03, -4.972800149723224e-01, -5.678642512738867e-01, -5.678642512738841e-01, 3.207498869189337e+00, 3.358887473951172e+00, 1.119864557184166e+00, 2.550975069228411e+00, 3.461812995217962e+00, 3.461812995217959e+00, -2.676452009878245e-06, -2.679312434398587e-06, -2.676575276181833e-06, -2.679099850995050e-06, -2.677897774468689e-06, -2.677897774468689e-06, -8.590184151730880e-05, -8.410991101968354e-05, -8.500101229249235e-05, -8.344522071515129e-05, -8.529882347120891e-05, -8.529882347120891e-05, -1.562004629989128e-02, -1.302440162778105e-02, -2.096156752573162e-02, -2.138014656856465e-02, -1.503472120425593e-02, -1.503472120425593e-02, -1.504782844130882e-01, -2.175346311029168e-01, -1.497678868240943e-01, -1.641311106980815e-04, -2.334749344401586e-01, -2.334749344401517e-01, 6.382901142990663e-01, 2.115138976243813e+00, 1.825502681293471e+01, 2.750785769996499e-01, 6.777306591141876e+00, 6.777306591142012e+00, -1.491986633231382e-02, -1.849899832824996e-02, -1.780458672529259e-02, -1.671300273295352e-02, -1.731860133612396e-02, -1.731860133612396e-02, -1.773096648723713e-02, -2.526986949373007e-02, -2.460790492281743e-02, -2.292450459542083e-02, -2.398572212194330e-02, -2.398572212194330e-02, -1.088978761387122e-02, -1.865165970832568e-01, -1.602271402890461e-01, -1.012681609539178e-01, -1.338259516634521e-01, -1.338259516634522e-01, -3.566854445333231e-02, 1.246624507494144e+00, 6.918453236423451e-01, -1.304377580093893e-01, 2.886404812549791e-02, 2.886404812547178e-02, 1.467219295239239e+00, -2.945518943288232e+01, 7.727736522004347e+00, 4.371960669397001e-01, 9.986328854823771e+00, 9.986328854823736e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_m06_l_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_m06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_m06_l_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_m06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.602359408599886e-04, 2.603158108323938e-04, 2.606347646883424e-04, 2.594550015243748e-04, 2.600766079581057e-04, 2.600766079581057e-04, 5.938972436544492e-03, 5.940448579810921e-03, 5.980724963465070e-03, 5.959990644621076e-03, 5.964272208671440e-03, 5.964272208671440e-03, 2.082795496765549e-02, 2.062428544392678e-02, 1.668039935767895e-02, 1.767654532002680e-02, 1.745853888231334e-02, 1.745853888231334e-02, 3.490598730689135e-02, 3.460760469840823e-02, 1.570055360449517e-02, -1.127974345727674e-01, -8.999217971180954e-03, -8.999217971194566e-03, -4.236505430730374e-04, -5.142542208165610e-04, -3.553904209544988e-02, -5.991912613405476e-05, -1.655439876692165e-04, -1.655439876692165e-04, 2.090096036667387e-02, 2.143876355432063e-02, 2.093219385894083e-02, 2.140664240122112e-02, 2.117127326162430e-02, 2.117127326162430e-02, 9.296971300692165e-03, 9.071290919057293e-03, 9.409564924213647e-03, 9.200602691774402e-03, 9.117416087851873e-03, 9.117416087851873e-03, 8.475418961822165e-02, 2.057136478124568e-02, 4.762271622935645e-02, 8.876499402651473e-02, 8.147366525908772e-02, 8.147366525908772e-02, -1.985481845368989e-01, -4.305661089813517e-03, -1.905714021685251e-01, 2.319139344262585e-02, -1.935691177533992e-01, -1.935691177533854e-01, -1.859437646510683e-05, -4.909335987043211e-05, -1.786011622281058e-04, -1.227161586298055e-01, -1.192249607300324e-04, -1.192249607330935e-04, -1.412982784890811e+00, -3.207926952669631e-01, -8.381083243375608e-01, -1.287873366400340e+00, -1.073059928705594e+00, -1.073059928705594e+00, -1.505723956235048e+00, 7.202370272188978e-02, 8.494365910705239e-02, 3.207014544087876e-02, 2.806008079357261e-02, 2.806008079357261e-02, 1.636011787107606e-02, 2.715097139512136e-02, 2.867666648561101e-02, 5.532386548263794e-02, 5.533124561083946e-02, 5.533124561083959e-02, 4.536224792800831e-02, -3.214814380438268e-02, -6.346223376443873e-02, 6.595450569261026e-02, -2.154082718097560e-01, -2.154082718097561e-01, -5.604472132832843e-04, -1.012329322108680e-06, -3.077479504199607e-05, -2.115492999191905e-01, -1.350949765920552e-04, -1.350949765875666e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
