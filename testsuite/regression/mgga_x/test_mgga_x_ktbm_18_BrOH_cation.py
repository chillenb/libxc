
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_18_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_18", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.172444352160628e+01, -2.172457086281005e+01, -2.172512882637409e+01, -2.343803583388939e+01, -2.343879845607109e+01, -2.515355314542104e+01, -3.489648701837355e+00, -3.943101785523229e+00, -3.946383280546292e+00, -3.945417298008657e+00, -3.945109040598784e+00, -3.492080429427169e+00, -5.328893460995090e-01, -6.058261159774203e-01, -6.425022791049699e-01, -5.866265480730019e-01, -5.200890978304090e-01, -6.554802801362583e-01, -1.510240018251888e-01, -1.544382167203954e-01, -6.589664227760864e-01, -1.121319552773356e-01, -1.533133750129118e-01, -1.529592120789255e-01, -4.811270036964594e-03, -5.079717818051555e-03, -2.804798422232718e-02, -2.773591862727404e-03, -3.871827707576660e-03, -3.871827707576660e-03, -6.083909630395774e+00, -6.083862922186718e+00, -6.083898528040422e+00, -6.083857983765308e+00, -5.775659515903396e+00, -5.775935307493443e+00, -2.161536280065317e+00, -2.189671801526075e+00, -2.140125287797583e+00, -2.165394959763483e+00, -1.933645073569768e+00, -2.187511854463859e+00, -6.224226446281839e-01, -7.498327912058653e-01, -6.242491731702380e-01, -6.632292699934125e-01, -6.422366837246045e-01, -7.028796141252514e-01, -7.481382793769652e-02, -1.442552882401650e-01, -6.905452473358781e-02, -2.263295036846700e+00, -9.012007126725738e-02, -9.012007126725738e-02, -2.147321997190799e-03, -2.711340220069894e-03, -2.076448947236711e-03, -4.550456577622801e-02, -2.608408945908022e-03, -2.608408945908023e-03, -6.712098919604275e-01, -6.750705440150890e-01, -6.408850073894168e-01, -6.589765052266907e-01, -6.430890813263281e-01, -6.581562191552592e-01, -6.541347320761886e-01, -5.106805918813223e-01, -5.535433725740468e-01, -6.333010507664391e-01, -6.217126290266843e-01, -5.733350963470784e-01, -7.302258358657567e-01, -2.042379690831855e-01, -2.344565793946163e-01, -3.384032566798261e-01, -3.182397590011509e-01, -2.818326742605277e-01, -5.165247585352251e-01, -2.679693814198241e-02, -3.666704221487474e-02, -3.828698719653632e-01, -5.909721632908103e-02, -5.909721632908105e-02, -6.821904882757841e-03, -7.246473076035320e-04, -1.533356485019689e-03, -5.387587633424547e-02, -2.395348589685226e-03, -2.406331232619875e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_18_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_18", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.255516352984028e+01, -3.255513307883645e+01, -3.255527039701683e+01, -3.255521070061855e+01, -3.255563239671788e+01, -3.255572371360356e+01, -3.255442505297892e+01, -2.918316541119851e+01, -3.255522629545478e+01, -2.918386917027125e+01, -2.918418230365897e+01, -2.918386917027125e+01, -4.926721168808579e+00, -4.866185199397510e+00, -4.926657997379273e+00, -4.926672728604304e+00, -4.925392073926775e+00, -4.925214097579424e+00, -4.926271094898048e+00, -4.926338145935823e+00, -4.926072121959461e+00, -4.925273698544723e+00, -4.865001031342254e+00, -4.925273698544723e+00, -7.735347024147269e-01, -7.820794294223298e-01, -7.707814939311501e-01, -9.232729255040620e-01, -8.790939102235106e-01, -8.697806393740380e-01, -8.889478590880016e-01, -7.498343542616230e-01, -7.917046790288597e-01, -6.963478239947529e-01, -9.338217601914207e-01, -8.366197363406204e-01, -1.788015256603356e-01, -2.281478372619027e-01, -1.819216298159042e-01, -2.347550227821296e-01, -9.464053257008099e-01, -8.456075733314022e-01, -1.447140720498766e-01, -1.486606655294207e-01, -2.229127896973424e-01, -1.002808747001493e-01, -2.229127896973424e-01, -9.897147967824706e-02, -5.935455806054305e-03, -6.307300990007262e-03, -6.537782984884458e-03, -6.663227766955983e-03, -3.618965561624150e-02, -3.673143426589118e-02, -3.567440520055063e-03, -3.507989960795747e-03, -5.294739596169792e-03, -3.012752055720402e-03, -5.294739596169792e-03, -3.012752055720396e-03, -7.217535085908520e+00, -7.215823036556584e+00, -7.221587428280157e+00, -7.219738004900794e+00, -7.217804914234857e+00, -7.215989885485323e+00, -7.221280214695244e+00, -7.219544642125548e+00, -7.919883537131398e+00, -7.217780616615593e+00, -7.219573086670671e+00, -7.917959227387846e+00, -2.790114131600054e+00, -2.789902580288066e+00, -2.809388271891587e+00, -2.808486741279663e+00, -2.772901057635917e+00, -2.777813602753294e+00, -2.790649091952637e+00, -2.795369521421776e+00, -2.812750777446560e+00, -2.642823741158248e+00, -2.812750777446560e+00, -2.801415936291060e+00, -8.077531320422425e-01, -8.776686588428578e-01, -8.716946886844313e-01, -8.732016681106117e-01, -7.534934895967099e-01, -7.715274520711370e-01, -7.650708410605239e-01, -7.850335568354595e-01, -8.340939329706037e-01, -8.707555071641617e-01, -8.340939329706040e-01, -7.967486702302324e-01, -9.580969676254819e-02, -9.679086107395762e-02, -1.772621290333860e-01, -2.046037525090843e-01, -8.605168833830334e-02, -9.110560284321073e-02, -2.621418586040404e+00, -2.620186863366452e+00, -1.120607949366703e-01, -1.214570076785984e-01, -1.120607949366703e-01, -1.214570076785984e-01, -2.814114225483307e-03, -2.781186579128492e-03, -3.432483959155334e-03, -3.484427988549866e-03, -2.566796032547339e-03, -2.718370198029129e-03, -5.842721516203325e-02, -6.003402968155761e-02, -2.621463527558885e-03, -3.600453488594180e-03, -2.621463527558883e-03, -3.600453488594184e-03, -8.578841028537848e-01, -8.618089017048747e-01, -8.340307227612063e-01, -8.380128704412163e-01, -8.843872393194182e-01, -8.876708080926472e-01, -8.846395681439790e-01, -8.528492146742920e-01, -8.845153412658611e-01, -8.878006797325926e-01, -8.845153412658613e-01, -8.493719021466785e-01, -8.320749831755446e-01, -8.354961059093129e-01, -6.842413418255399e-01, -7.234607081504434e-01, -7.025210078340092e-01, -7.816964381030479e-01, -7.366273222431476e-01, -7.394322513342874e-01, -7.163519535844939e-01, -7.190617563756595e-01, -7.163519535844937e-01, -8.034315908513908e-01, -9.096123402184368e-01, -1.018806219621415e+00, -2.750242392677066e-01, -2.772074628448584e-01, -2.931962881730679e-01, -3.566462309330833e-01, -4.604548893066037e-01, -4.969940197471188e-01, -4.259831048951093e-01, -4.260784183624993e-01, -4.259831048951088e-01, -3.727221624574261e-01, -6.392337862023204e-01, -6.419944198400986e-01, -3.551469895077531e-02, -3.575711824328220e-02, -4.603871810688116e-02, -4.761793871394362e-02, -4.715941721602212e-01, -4.735560901249274e-01, -7.342298360046362e-02, -7.810375964207934e-02, -7.342298360046355e-02, -7.810375964207952e-02, -8.924062585897678e-03, -9.247424037749405e-03, -9.234132224852302e-04, -9.255237567317707e-04, -1.975839678066965e-03, -2.101454590856269e-03, -7.047526613565137e-02, -7.150929151022546e-02, -2.483127080783255e-03, -3.300015987614041e-03, -2.483127080783253e-03, -3.469551908699599e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_18_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_18", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.004364893048533e-08, 0.000000000000000e+00, -4.004700443631041e-08, -4.004359369552698e-08, 0.000000000000000e+00, -4.004696361869935e-08, -4.004314144944229e-08, 0.000000000000000e+00, -4.004639196712266e-08, -4.004380263274225e-08, 0.000000000000000e+00, -4.690896316157896e-08, -4.004364184070101e-08, 0.000000000000000e+00, -4.690719917821969e-08, -4.690408447084720e-08, 0.000000000000000e+00, -4.690719917821969e-08, -3.960964957013110e-05, 0.000000000000000e+00, -2.926682086466516e-05, -3.962017460484763e-05, 0.000000000000000e+00, -3.960981010370958e-05, -3.982550667331912e-05, 0.000000000000000e+00, -3.986058576463633e-05, -3.973744139300274e-05, 0.000000000000000e+00, -3.973549946961322e-05, -3.961158051210554e-05, 0.000000000000000e+00, -3.991753804122533e-05, -2.927165189088583e-05, 0.000000000000000e+00, -3.991753804122533e-05, -7.695603962053729e-03, 0.000000000000000e+00, -7.944595343745279e-03, -7.636499463061421e-03, 0.000000000000000e+00, -1.191741497230099e-02, -1.053762350888777e-02, 0.000000000000000e+00, -1.046416845908460e-02, -1.113201499574965e-02, 0.000000000000000e+00, -7.416214702372801e-03, -7.942134471908596e-03, 0.000000000000000e+00, -6.266593270171143e-03, -1.190993078518805e-02, 0.000000000000000e+00, -1.010720543033745e-02, -6.970347169421793e-01, 0.000000000000000e+00, -1.415324715810587e+00, -7.264701487868273e-01, 0.000000000000000e+00, -1.456349037015646e+00, -2.491490870113722e-03, 0.000000000000000e+00, -1.733372500941286e-03, -8.240536068468489e-01, 0.000000000000000e+00, -9.660539188339429e-01, -1.074655277396378e+00, 0.000000000000000e+00, -8.751968637124516e-01, -1.074655277396378e+00, 0.000000000000000e+00, 2.620159527946248e-01, -2.309448001814642e+02, 0.000000000000000e+00, -2.050706948535717e+02, 2.771501126095945e+02, 0.000000000000000e+00, -1.880981977002207e+02, 5.656937629711188e+00, 0.000000000000000e+00, -4.914612931900114e+00, -5.448501977174082e+02, 0.000000000000000e+00, -5.663242971358782e+02, -2.825029699720046e+02, 0.000000000000000e+00, -1.138700659490263e+03, -2.825029699720046e+02, 0.000000000000000e+00, -1.138700659490264e+03, -1.403587882973593e-05, 0.000000000000000e+00, -1.404941066710122e-05, -1.403736533891512e-05, 0.000000000000000e+00, -1.405085368131380e-05, -1.403607841541458e-05, 0.000000000000000e+00, -1.404954491317796e-05, -1.403734703189639e-05, 0.000000000000000e+00, -1.405084879568581e-05, -1.250745009369083e-05, 0.000000000000000e+00, -1.405013326536795e-05, -1.403656848676392e-05, 0.000000000000000e+00, -1.251941840289295e-05, -3.219586214912244e-04, 0.000000000000000e+00, -3.234787220514646e-04, -3.266460090435281e-04, 0.000000000000000e+00, -3.279941950667340e-04, -3.168327881004755e-04, 0.000000000000000e+00, -3.198129574780690e-04, -3.214491848910150e-04, 0.000000000000000e+00, -3.243463104724386e-04, -3.282381406332636e-04, 0.000000000000000e+00, -2.359958177694204e-04, -3.282381406332636e-04, 0.000000000000000e+00, -3.265615896356003e-04, -6.746862108281428e-02, 0.000000000000000e+00, -5.440483132067573e-02, -5.967952510940079e-02, 0.000000000000000e+00, -6.000948161173399e-02, -7.419928355088379e-02, 0.000000000000000e+00, -7.450472530473937e-02, -8.261667472809786e-02, 0.000000000000000e+00, -7.767698210143503e-02, -6.248716469793891e-02, 0.000000000000000e+00, -5.708019617164001e-02, -6.248716469793892e-02, 0.000000000000000e+00, -7.205246827478134e-02, -1.068852048503338e+00, 0.000000000000000e+00, -1.054703576062701e+00, -2.502946077984873e-01, 0.000000000000000e+00, -5.973182811740082e-01, -1.206521096787436e+00, 0.000000000000000e+00, -1.183816244513457e+00, -6.394874209378831e-04, 0.000000000000000e+00, -6.408290383712843e-04, -1.174818534031760e+00, 0.000000000000000e+00, -1.495692422241159e+00, -1.174818534031759e+00, 0.000000000000000e+00, -1.495692422241160e+00, 1.075345855885651e+03, 0.000000000000000e+00, -7.327355668633480e+02, -5.730967205744768e+02, 0.000000000000000e+00, -5.221076829463562e+02, -2.752557959132379e+03, 0.000000000000000e+00, -2.572374531401098e+03, -2.342670773685969e+00, 0.000000000000000e+00, 1.755394566780843e+00, -1.143929388404297e+03, 0.000000000000000e+00, -1.083559507617382e+03, -1.143929388404297e+03, 0.000000000000000e+00, -1.083559507617381e+03, -9.094579440351443e-02, 0.000000000000000e+00, -8.958324577290115e-02, -9.168428496205465e-02, 0.000000000000000e+00, -9.033528417222626e-02, -8.658435148124070e-02, 0.000000000000000e+00, -8.540761686774963e-02, -8.719401892212970e-02, 0.000000000000000e+00, -8.991907481272461e-02, -8.689272424726165e-02, 0.000000000000000e+00, -8.569810924306270e-02, -8.689272424726165e-02, 0.000000000000000e+00, -9.003245223530995e-02, -1.012274032102424e-01, 0.000000000000000e+00, -9.994200575239998e-02, -1.223252468596135e-01, 0.000000000000000e+00, -9.302601112710011e-02, -1.237386263162767e-01, 0.000000000000000e+00, -9.907913625155174e-02, -1.187493648012454e-01, 0.000000000000000e+00, -1.172662488109350e-01, -1.220858012417392e-01, 0.000000000000000e+00, -1.206713162430284e-01, -1.220858012417392e-01, 0.000000000000000e+00, -1.006739033747555e-01, -4.728904332273250e-02, 0.000000000000000e+00, -4.023107497803776e-02, -4.713543286032221e-01, 0.000000000000000e+00, -4.696718967467108e-01, -2.584892529775322e-01, 0.000000000000000e+00, -4.094257788902813e-01, -2.299174033158183e-01, 0.000000000000000e+00, -3.141373575367212e-01, -3.920672613365992e-01, 0.000000000000000e+00, -3.962097351727647e-01, -3.920672613365994e-01, 0.000000000000000e+00, -2.738294524549597e-01, -1.419278195311204e-01, 0.000000000000000e+00, -1.434067272687856e-01, 6.034438521728919e+00, 0.000000000000000e+00, 5.890889654768034e+00, -3.058196606589584e+00, 0.000000000000000e+00, -2.960111046380971e+00, -4.663553028278329e-01, 0.000000000000000e+00, -5.099073354683189e-01, -2.006449506444536e+00, 0.000000000000000e+00, -2.199007762806552e+00, -2.006449506444537e+00, 0.000000000000000e+00, -2.199007762806553e+00, 1.013585992431208e+02, 0.000000000000000e+00, 9.367425237623726e+01, -8.477845024366350e+03, 0.000000000000000e+00, -8.420652910881958e+03, 4.447552871198743e+03, 0.000000000000000e+00, 4.046506769772319e+03, 1.087640696498065e+00, 0.000000000000000e+00, 1.026522615010119e+00, -2.049227098461048e+03, 0.000000000000000e+00, -1.312598105858012e+03, -2.049227098461051e+03, 0.000000000000000e+00, 1.705592659408454e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_18_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_18", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.104418887919685e-03, 2.104531377899752e-03, 2.104428204842656e-03, 2.104538119435885e-03, 2.104450620031837e-03, 2.104572263689156e-03, 2.104346631700782e-03, 3.251094542618626e-03, 2.104425234123858e-03, 3.250902916542365e-03, 3.250913217409622e-03, 3.250902916542365e-03, 1.866423094249935e-02, 6.148431386628335e-03, 1.866729500354579e-02, 1.866394966910257e-02, 1.872664394370807e-02, 1.873700926027629e-02, 1.870355356866329e-02, 1.870337239201722e-02, 1.866038782254702e-02, 1.875621162708299e-02, 6.145540427647210e-03, 1.875621162708299e-02, 6.158989703150733e-03, 6.692626331523196e-03, 6.012212742683181e-03, 4.738098592381790e-02, 3.905674803330546e-02, 3.800701778906456e-02, 4.166391971370845e-02, 5.160224847812932e-03, 7.014821455129131e-03, 2.836388247895318e-03, 4.845767553102268e-02, 3.414227991408400e-02, 2.474494636497293e-03, 1.026442044793230e-01, 3.266033347238019e-03, 1.114975823338753e-01, 1.469782317103078e-02, 9.056769451560434e-04, 2.149937399403628e-02, 2.679583382167614e-02, 7.848711405985535e-02, 7.790175544551184e-03, 7.848711405985555e-02, -6.837647169197007e-04, 3.662458025509688e-04, 3.903629571875023e-04, -6.803850425731661e-07, 4.223120383154316e-04, -5.441144055120265e-05, 1.944746303820271e-03, 1.873059740879777e-04, 1.851124792796229e-04, 3.178579241079221e-04, 2.357891287473455e-04, 3.178579241079221e-04, 2.357891287473441e-04, 1.226910692847134e-02, 1.227190538246209e-02, 1.224422226382928e-02, 1.224784939094044e-02, 1.226739345934277e-02, 1.227083950232529e-02, 1.224605555556256e-02, 1.224900024419566e-02, 9.089745854255657e-03, 1.225987027456779e-02, 1.225661719618214e-02, 9.091899799587737e-03, 2.889168562397717e-02, 2.898943351074743e-02, 2.960876387572238e-02, 2.968095857963938e-02, 2.819448412593876e-02, 2.849425662888207e-02, 2.886847439353655e-02, 2.916128431470045e-02, 2.978679670857643e-02, 8.220425735663343e-03, 2.978679670857643e-02, 2.943643963374840e-02, 1.259163060538466e-01, 6.057086744040251e-02, 1.080254410762761e-01, 1.070371029658918e-01, 1.241475543251505e-01, 1.288134326817531e-01, 1.328460535661582e-01, 1.292022133150044e-01, 1.207789377121938e-01, 6.186929187094120e-02, 1.207789377121938e-01, 1.275916536481582e-01, 8.300329664610489e-03, 8.449397257856437e-03, -1.110662473339824e-03, 3.952408648821457e-02, 6.731001746727969e-03, 7.886222238415485e-03, 3.845011000073368e-02, 3.846540337609444e-02, 1.462249768973360e-02, 2.321494347458180e-02, 1.462249768973367e-02, 2.321494347458178e-02, -2.782830244231836e-08, 1.193119971827082e-04, 1.754797127029644e-04, 1.672317793149340e-04, 3.525538798511417e-04, 3.914255101108036e-04, 3.933131878165873e-03, -2.916980576555148e-04, 1.559959725483230e-04, 3.832306712674580e-04, 1.559959725483209e-04, 3.832306712674625e-04, 8.711457899286593e-02, 8.652327621148431e-02, 9.627042624707306e-02, 9.554397872669633e-02, 8.164557792091660e-02, 8.129258571106365e-02, 8.119523699269748e-02, 8.979782751612149e-02, 8.143533995974102e-02, 8.108148224080813e-02, 8.143533995974102e-02, 9.110701481047298e-02, 9.077733218047170e-02, 9.017515008627749e-02, 1.462995774206545e-01, 6.041455102648938e-02, 1.435654021387562e-01, 7.585459656596527e-02, 1.267158382099461e-01, 1.260342915430673e-01, 1.367779782362625e-01, 1.360105695040311e-01, 1.367779782362625e-01, 8.122262851278979e-02, 1.073149111141251e-01, 6.557164984484065e-02, 6.444468808870635e-02, 6.538780763098617e-02, 9.961803899502419e-03, 1.001043312386634e-01, 4.266900378605386e-02, 1.600376945154908e-01, 1.387128841314762e-01, 1.398761332140366e-01, 1.387128841314764e-01, 2.703410844370423e-02, 1.454067600458568e-01, 1.475364905237294e-01, -5.413737445597271e-05, -5.414737821488802e-05, 2.427547698753004e-03, 2.612521725540409e-03, 1.933849310227586e-01, 2.065920543655557e-01, 6.922138338350930e-03, 9.230573490025294e-03, 6.922138338350939e-03, 9.230573490025420e-03, -8.053957545141093e-07, -8.831966665916569e-07, 5.051098610492131e-05, 5.051503266956848e-05, -4.004101459754783e-08, -5.103698971024283e-08, -5.825673058492891e-04, -6.726589860612137e-04, 2.375497241173577e-04, 3.573737801428644e-04, 2.375497241173572e-04, -3.040985254946290e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
