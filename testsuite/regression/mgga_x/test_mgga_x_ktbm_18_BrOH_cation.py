
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_18_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_18", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.491665948505673e+01, -2.491672741991120e+01, -2.491717409749805e+01, -2.491616704527205e+01, -2.491667408922191e+01, -2.491667408922191e+01, -3.401724282610679e+00, -3.401880308868880e+00, -3.406309671764844e+00, -3.407293063127343e+00, -3.405809902019010e+00, -3.405809902019010e+00, -5.770711126222954e-01, -5.763036471144087e-01, -5.590497822240198e-01, -5.710071346331773e-01, -5.692928603117111e-01, -5.692928603117111e-01, -1.609774169339659e-01, -1.642557565726429e-01, -6.246311563401479e-01, -1.092862078206163e-01, -1.496944746168374e-01, -1.496944746168374e-01, -4.809006795180967e-03, -5.062467666077515e-03, -2.787894549530435e-02, -2.758246335222521e-03, -3.861326183265063e-03, -3.861326183265063e-03, -6.079690838361699e+00, -6.079692956136450e+00, -6.079767450701055e+00, -6.079766234920253e+00, -6.079653785206879e+00, -6.079653785206879e+00, -2.087714427371727e+00, -2.124443023279571e+00, -2.076913165671147e+00, -2.110424967196703e+00, -2.113198637006259e+00, -2.113198637006259e+00, -6.341583436491605e-01, -6.818228822180925e-01, -5.496777046444299e-01, -5.623749812707526e-01, -6.497279668826316e-01, -6.497279668826317e-01, -7.379281493477302e-02, -1.515989433206102e-01, -6.813276524536771e-02, -1.928630305022129e+00, -8.894952747492355e-02, -8.894952747492357e-02, -2.114100859427881e-03, -2.684461362170540e-03, -2.063599356899503e-03, -4.534486600464910e-02, -2.597727291029102e-03, -2.597727291029103e-03, -6.621227593679798e-01, -6.663319938277138e-01, -6.650123631409331e-01, -6.637809256252736e-01, -6.644079282576827e-01, -6.644079282576825e-01, -6.367289167917711e-01, -5.650771556647529e-01, -5.973080486120221e-01, -6.192520102747980e-01, -6.086572481697130e-01, -6.086572481697130e-01, -7.019734398408806e-01, -2.020193055294142e-01, -2.528290828928690e-01, -3.496166588089514e-01, -3.027666402955415e-01, -3.027666402955416e-01, -4.864987760014657e-01, -2.671102903699568e-02, -3.638575380790064e-02, -3.494722379439409e-01, -5.846225472815297e-02, -5.846225472815297e-02, -6.712776076020310e-03, -7.161357076129844e-04, -1.518998736594339e-03, -5.492234946022918e-02, -2.384974534552444e-03, -2.384974534552442e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_18_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_18", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.945866311199308e+01, -2.945782871108724e+01, -2.945877498518741e+01, -2.945791007829304e+01, -2.945901534289644e+01, -2.945828753804041e+01, -2.945774720442367e+01, -2.945667219073164e+01, -2.945873271091341e+01, -2.945723190924026e+01, -2.945873271091341e+01, -2.945723190924026e+01, -4.949287678526639e+00, -4.949027477811672e+00, -4.949458788105559e+00, -4.949128546766365e+00, -4.952666764653123e+00, -4.953271907667210e+00, -4.952205867612777e+00, -4.952218015654489e+00, -4.948119692439249e+00, -4.955169939998866e+00, -4.948119692439249e+00, -4.955169939998866e+00, -8.299811938775181e-01, -8.368360106461005e-01, -8.278224451861497e-01, -8.356714681304936e-01, -7.975447100728472e-01, -7.921140825973679e-01, -8.130900230697488e-01, -8.178522719098177e-01, -8.431593629742405e-01, -7.793650185133294e-01, -8.431593629742405e-01, -7.793650185133294e-01, -2.104591326035740e-01, -2.269964439070932e-01, -2.141139485620712e-01, -2.331845694168864e-01, -8.315534319257097e-01, -8.796660418192997e-01, -1.428542697960527e-01, -1.472186926989242e-01, -2.195444026955628e-01, -1.005736607731311e-01, -2.195444026955626e-01, -1.005736607731309e-01, -5.941200597484598e-03, -6.309921980275411e-03, -6.229741191819445e-03, -6.669241495684902e-03, -3.502778929696689e-02, -3.697380694911463e-02, -3.599551904455348e-03, -3.535191257428005e-03, -5.309995870569922e-03, -3.059484838236056e-03, -5.309995870569924e-03, -3.059484838236058e-03, -7.223084292860330e+00, -7.221053457984370e+00, -7.227079821098354e+00, -7.224913275058872e+00, -7.223224177699074e+00, -7.221127038602526e+00, -7.226655486020491e+00, -7.224636349135039e+00, -7.225189222359954e+00, -7.222999352618336e+00, -7.225189222359954e+00, -7.222999352618336e+00, -2.781477858055593e+00, -2.781995559304026e+00, -2.805686499073565e+00, -2.805196291312444e+00, -2.763082369069528e+00, -2.768887904430993e+00, -2.784926461802366e+00, -2.790558557688280e+00, -2.808850656960457e+00, -2.796313875619933e+00, -2.808850656960457e+00, -2.796313875619933e+00, -8.450548815104114e-01, -8.419020332434842e-01, -9.450205584735739e-01, -9.451457564275200e-01, -7.613222247478354e-01, -7.972854670637314e-01, -8.197225723599588e-01, -8.503392291133791e-01, -8.750912342148752e-01, -8.375160377122990e-01, -8.750912342148752e-01, -8.375160377122993e-01, -9.601813612734872e-02, -9.699604824232061e-02, -2.020286653778134e-01, -2.030937929712348e-01, -8.642562498937972e-02, -9.135629421260028e-02, -2.867847946537124e+00, -2.866654772499149e+00, -1.118549693567895e-01, -1.209397523980769e-01, -1.118549693567895e-01, -1.209397523980769e-01, -2.744440324616871e-03, -2.848815914843749e-03, -3.487882316623052e-03, -3.544875878150864e-03, -2.590548682995971e-03, -2.744681446170036e-03, -5.895839417638375e-02, -5.920442954829960e-02, -2.702437937429290e-03, -3.607968797481674e-03, -2.702437937429287e-03, -3.607968797481672e-03, -8.700954196585878e-01, -8.737406238346187e-01, -8.457032277154025e-01, -8.494400494943808e-01, -8.538492097851856e-01, -8.576155467971766e-01, -8.609991491870713e-01, -8.646365306410225e-01, -8.573890271334572e-01, -8.610892327595941e-01, -8.573890271334571e-01, -8.610892327595938e-01, -8.552206693705713e-01, -8.579431615571734e-01, -6.879760678177682e-01, -6.904064744046972e-01, -7.121126229994560e-01, -7.149693913022560e-01, -7.531195825625308e-01, -7.559252915202803e-01, -7.302510829862391e-01, -7.326307171212320e-01, -7.302510829862390e-01, -7.326307171212322e-01, -9.927399312746376e-01, -9.939977689523873e-01, -2.731968673776094e-01, -2.752943319618491e-01, -3.456642554062898e-01, -3.510634272732594e-01, -4.876982876672897e-01, -4.903572805716508e-01, -4.183352589841054e-01, -4.184756045279906e-01, -4.183352589841056e-01, -4.184756045279908e-01, -6.442097970996445e-01, -6.485032929064432e-01, -3.422005591908642e-02, -3.447926358466181e-02, -4.640692683925023e-02, -4.797774801628741e-02, -4.739459035576731e-01, -4.830393893844846e-01, -7.371552662968171e-02, -7.829121783897303e-02, -7.371552662968167e-02, -7.829121783897301e-02, -8.634172847086629e-03, -8.955211322903802e-03, -9.566381984446544e-04, -9.635375214217672e-04, -1.887777104910094e-03, -2.008165398425063e-03, -7.056937072763231e-02, -7.177759319579552e-02, -2.550802305606499e-03, -3.307077161125510e-03, -2.550802305606495e-03, -3.307077161125510e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_18_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_18", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.640921753965281e-08, 0.000000000000000e+00, -4.641352996613899e-08, -4.640897281546003e-08, 0.000000000000000e+00, -4.641335140737382e-08, -4.640817480435054e-08, 0.000000000000000e+00, -4.641221108333486e-08, -4.641097843074666e-08, 0.000000000000000e+00, -4.641577526691188e-08, -4.640908786056499e-08, 0.000000000000000e+00, -4.641433671066196e-08, -4.640908786056499e-08, 0.000000000000000e+00, -4.641433671066196e-08, -3.324673987052617e-05, 0.000000000000000e+00, -3.323357329457652e-05, -3.325701404096355e-05, 0.000000000000000e+00, -3.323976180937559e-05, -3.345038577312001e-05, 0.000000000000000e+00, -3.348185673767059e-05, -3.339766458895523e-05, 0.000000000000000e+00, -3.338977986755667e-05, -3.324580793973782e-05, 0.000000000000000e+00, -3.356222866098749e-05, -3.324580793973782e-05, 0.000000000000000e+00, -3.356222866098749e-05, -8.903650728357556e-03, 0.000000000000000e+00, -9.134056309323076e-03, -8.855288494907446e-03, 0.000000000000000e+00, -9.100544315619028e-03, -8.069703159070187e-03, 0.000000000000000e+00, -8.073620270362895e-03, -8.709125343567069e-03, 0.000000000000000e+00, -8.923541320074838e-03, -9.037049017054729e-03, 0.000000000000000e+00, -8.195475409876099e-03, -9.037049017054729e-03, 0.000000000000000e+00, -8.195475409876099e-03, -1.197931523774797e+00, 0.000000000000000e+00, -1.390309277495598e+00, -1.213181233360591e+00, 0.000000000000000e+00, -1.423504941944225e+00, -1.492648540593467e-03, 0.000000000000000e+00, -1.933896554147050e-03, -6.501997743475256e-01, 0.000000000000000e+00, -8.465607626705215e-01, -1.012701072245505e+00, 0.000000000000000e+00, -4.846577475614015e-01, -1.012701072245505e+00, 0.000000000000000e+00, -4.846577475614017e-01, -2.250378198554809e+02, 0.000000000000000e+00, -2.028246652120035e+02, -2.052211563272688e+02, 0.000000000000000e+00, -1.836123728170254e+02, -4.101311542766564e+00, 0.000000000000000e+00, -3.990196605992898e+00, -4.097288108772614e+02, 0.000000000000000e+00, -4.461703696384554e+02, -2.607870386701070e+02, 0.000000000000000e+00, -6.329280777660611e+02, -2.607870386701060e+02, 0.000000000000000e+00, -6.329280777660606e+02, -1.402474725800914e-05, 0.000000000000000e+00, -1.403890635896375e-05, -1.402636161678646e-05, 0.000000000000000e+00, -1.404047278862652e-05, -1.402520851749662e-05, 0.000000000000000e+00, -1.403922851837081e-05, -1.402657702217106e-05, 0.000000000000000e+00, -1.404063496842781e-05, -1.402530975455895e-05, 0.000000000000000e+00, -1.403965882097775e-05, -1.402530975455895e-05, 0.000000000000000e+00, -1.403965882097775e-05, -3.077910073655029e-04, 0.000000000000000e+00, -3.096714409811164e-04, -3.142377669522370e-04, 0.000000000000000e+00, -3.158874564550315e-04, -3.049470695168102e-04, 0.000000000000000e+00, -3.075818794596294e-04, -3.111721936446293e-04, 0.000000000000000e+00, -3.137888917688391e-04, -3.134406495877398e-04, 0.000000000000000e+00, -3.134318561763112e-04, -3.134406495877398e-04, 0.000000000000000e+00, -3.134318561763112e-04, -6.132055180460713e-02, 0.000000000000000e+00, -6.280642413500535e-02, -5.368684516147162e-02, 0.000000000000000e+00, -5.419996148486340e-02, -6.300994962496796e-02, 0.000000000000000e+00, -6.507162799656351e-02, -6.792792019530397e-02, 0.000000000000000e+00, -6.548410222144621e-02, -5.778518124403908e-02, 0.000000000000000e+00, -6.513881431929806e-02, -5.778518124403910e-02, 0.000000000000000e+00, -6.513881431929809e-02, -8.620296181695134e-01, 0.000000000000000e+00, -8.345550273136371e-01, -5.766892218608602e-01, 0.000000000000000e+00, -5.685850615245922e-01, -9.095418745934507e-01, 0.000000000000000e+00, -9.460606281687406e-01, -5.367139399048550e-04, 0.000000000000000e+00, -5.378715562636931e-04, -1.023785817043694e+00, 0.000000000000000e+00, -1.359267343030715e+00, -1.023785817043695e+00, 0.000000000000000e+00, -1.359267343030717e+00, -1.791102568222275e+02, 0.000000000000000e+00, -1.909613364566925e+02, -3.072166971523694e+02, 0.000000000000000e+00, -2.597220804816309e+02, -2.049686200408386e+03, 0.000000000000000e+00, -1.883612833982294e+03, -1.604059575168156e+00, 0.000000000000000e+00, -2.004633894273329e+00, -9.725068550158829e+00, 0.000000000000000e+00, -1.023471417808299e+03, -9.725068550161565e+00, 0.000000000000000e+00, -1.023471417808300e+03, -8.958301197677725e-02, 0.000000000000000e+00, -8.827663571070121e-02, -9.036521653331256e-02, 0.000000000000000e+00, -8.906865572366783e-02, -9.015504160914023e-02, 0.000000000000000e+00, -8.885184210016983e-02, -8.992945746494239e-02, 0.000000000000000e+00, -8.862443130971437e-02, -9.004758923932335e-02, 0.000000000000000e+00, -8.874341147219629e-02, -9.004758923932335e-02, 0.000000000000000e+00, -8.874341147219626e-02, -9.824554121494111e-02, 0.000000000000000e+00, -9.709757708442390e-02, -1.205424929596997e-01, 0.000000000000000e+00, -1.195443848262977e-01, -1.212669884654796e-01, 0.000000000000000e+00, -1.200107120528733e-01, -1.158145838236398e-01, 0.000000000000000e+00, -1.143859185288348e-01, -1.191603080243284e-01, 0.000000000000000e+00, -1.178795761688439e-01, -1.191603080243284e-01, 0.000000000000000e+00, -1.178795761688439e-01, -4.151108268546122e-02, 0.000000000000000e+00, -4.221614550731973e-02, -4.591339744102553e-01, 0.000000000000000e+00, -4.571697682971067e-01, -3.849591416101799e-01, 0.000000000000000e+00, -3.893452932590313e-01, -2.854922941139573e-01, 0.000000000000000e+00, -2.796378189899860e-01, -3.652173862137160e-01, 0.000000000000000e+00, -3.689669810218169e-01, -3.652173862137164e-01, 0.000000000000000e+00, -3.689669810218171e-01, -1.316858489869837e-01, 0.000000000000000e+00, -1.338694597353896e-01, -5.087139509376311e+00, 0.000000000000000e+00, -4.858674309343834e+00, -2.327475633076245e+00, 0.000000000000000e+00, -2.286471372671670e+00, -4.106251679598913e-01, 0.000000000000000e+00, -4.654371160659664e-01, -1.626919906446726e+00, 0.000000000000000e+00, -1.828936632058350e+00, -1.626919906446726e+00, 0.000000000000000e+00, -1.828936632058352e+00, -4.025782662467364e+01, 0.000000000000000e+00, -3.513654363524984e+01, 1.806697884814895e+03, 0.000000000000000e+00, 3.968610527948466e+03, -2.981997875394524e+03, 0.000000000000000e+00, -2.698569536649542e+03, -1.963235939883497e+00, 0.000000000000000e+00, -2.290034886321015e+00, -3.109496748189479e+02, 0.000000000000000e+00, -1.237967063181255e+03, -3.109496748189488e+02, 0.000000000000000e+00, -1.237967063181257e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_18_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_18", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_18_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_18", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [3.167033357424897e-03, 3.167189821669922e-03, 3.167004374579003e-03, 3.167168750468412e-03, 3.166956699470233e-03, 3.167087750608667e-03, 3.167284356030317e-03, 3.167505501225919e-03, 3.167014386990174e-03, 3.167371565711621e-03, 3.167014386990174e-03, 3.167371565711621e-03, 1.092181751755286e-02, 1.091135878906462e-02, 1.092552397030158e-02, 1.091304344561306e-02, 1.098899936618810e-02, 1.099811334820590e-02, 1.099979617199739e-02, 1.099216108104321e-02, 1.091609643035030e-02, 1.104974000499470e-02, 1.091609643035030e-02, 1.104974000499470e-02, 1.790293327967851e-02, 1.844736026827060e-02, 1.778854351364388e-02, 1.834666110633157e-02, 1.580427762309104e-02, 1.599653225562161e-02, 1.839269472297082e-02, 1.897563990610076e-02, 1.810546902879476e-02, 1.790860965599688e-02, 1.810546902879476e-02, 1.790860965599688e-02, 7.112251107514761e-02, 9.804178269807000e-02, 7.388555307819759e-02, 1.050542458806563e-01, 2.185817019755946e-03, 3.537364448613627e-03, 1.349251126894460e-02, 2.050515459365523e-02, 6.747174778267308e-02, 3.102994710955201e-03, 6.747174778267304e-02, 3.102994710955162e-03, 3.525847691723067e-04, 3.840985864809305e-04, 3.671444007583697e-04, 4.076174445444045e-04, 1.225720154236845e-03, 1.440280388228763e-03, 1.244482683065240e-04, 1.312992963670525e-04, 2.828173204849033e-04, 1.038064636972289e-04, 2.828173204849033e-04, 1.038064636972284e-04, 1.224572754575762e-02, 1.224985959324526e-02, 1.222117003252877e-02, 1.222611604640817e-02, 1.224456777269953e-02, 1.224919052914990e-02, 1.222348882264174e-02, 1.222761422480779e-02, 1.223300078873264e-02, 1.223791414027935e-02, 1.223300078873264e-02, 1.223791414027935e-02, 2.554249389643348e-02, 2.573033946760610e-02, 2.665223558595452e-02, 2.680147944488809e-02, 2.540134627845812e-02, 2.561891384465574e-02, 2.643545401756646e-02, 2.666137677498482e-02, 2.626050818318970e-02, 2.632351589125392e-02, 2.626050818318970e-02, 2.632351589125392e-02, 9.714214609775026e-02, 9.857045710242293e-02, 8.179926062367526e-02, 8.202847630988970e-02, 7.590904191557245e-02, 8.732318169110846e-02, 7.380807439207356e-02, 7.890793446398645e-02, 9.820878315751835e-02, 9.697333207503467e-02, 9.820878315751837e-02, 9.697333207503474e-02, 5.887266303546478e-03, 5.809107217145704e-03, 3.544966121233163e-02, 3.537654588457574e-02, 4.353790531575540e-03, 5.533937223887829e-03, 2.321139520381312e-02, 2.322597497128784e-02, 1.149076645535112e-02, 1.935844100054271e-02, 1.149076645535115e-02, 1.935844100054274e-02, 1.653677975702733e-05, 2.040266089573990e-05, 7.364230206552720e-05, 6.363725407661412e-05, 2.310511117907662e-04, 2.505952063366898e-04, 2.276513466508483e-03, 3.111416837255188e-03, 7.475374089444532e-07, 3.525364441186684e-04, 7.475374089447645e-07, 3.525364441186693e-04, 8.415831000290634e-02, 8.366782850568098e-02, 9.304627759153146e-02, 9.242837450454282e-02, 8.996909588975388e-02, 8.937381418584829e-02, 8.735908486874497e-02, 8.684024431606543e-02, 8.866728980640942e-02, 8.811097874003361e-02, 8.866728980640942e-02, 8.811097874003355e-02, 8.470750862939526e-02, 8.435481037403478e-02, 1.408513465592915e-01, 1.407392990265838e-01, 1.364063090676875e-01, 1.357394136899726e-01, 1.191024956250311e-01, 1.185115514920570e-01, 1.286960441026243e-01, 1.282556137621233e-01, 1.286960441026243e-01, 1.282556137621234e-01, 7.532360281400655e-02, 7.611136688885617e-02, 6.034333004540410e-02, 6.110409481144491e-02, 8.380548357853715e-02, 8.725615688704011e-02, 1.148793415975043e-01, 1.138552888408583e-01, 1.134633318273353e-01, 1.143132785921793e-01, 1.134633318273354e-01, 1.143132785921793e-01, 1.182240992386926e-01, 1.221907734244246e-01, 1.530977183242537e-03, 1.478028143029953e-03, 1.639944863497357e-03, 1.800882347009984e-03, 1.335041506533303e-01, 1.604278519480416e-01, 5.017607111140703e-03, 6.893162173825835e-03, 5.017607111140697e-03, 6.893162173825877e-03, 1.445503756921728e-04, 1.380300065966457e-04, -4.776899564532300e-06, -7.921523802374660e-06, 1.408628832045510e-04, 1.530072119932397e-04, 5.409970438301300e-03, 7.055928185611435e-03, 2.190364642543288e-05, 3.280390379049416e-04, 2.190364642542945e-05, 3.280390379049456e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
