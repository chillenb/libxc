
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_20_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_20", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.482888720895422e+01, -2.482896188125273e+01, -2.482943192908014e+01, -2.482832502997866e+01, -2.482888529977113e+01, -2.482888529977113e+01, -3.416778442083113e+00, -3.416910528613874e+00, -3.420704191401740e+00, -3.421861895512771e+00, -3.420381043614918e+00, -3.420381043614918e+00, -5.980316879715486e-01, -5.973913498608603e-01, -5.830062576177408e-01, -5.933624044074296e-01, -5.904075147164128e-01, -5.904075147164128e-01, -1.674883240762262e-01, -1.705099645723134e-01, -6.639999080389604e-01, -1.174085211586687e-01, -1.348989341782637e-01, -1.348989341782637e-01, -5.229098922624732e-03, -5.503077382147199e-03, -3.038398754039766e-02, -3.014191722445064e-03, -3.790110811801692e-03, -3.790110811801693e-03, -6.079713911915960e+00, -6.080200101911635e+00, -6.079816435862186e+00, -6.080242357009209e+00, -6.079920136132815e+00, -6.079920136132815e+00, -2.097355616523171e+00, -2.131071707797350e+00, -2.087961621850611e+00, -2.118653332223401e+00, -2.120474807768569e+00, -2.120474807768569e+00, -6.314294609361133e-01, -6.810841093055445e-01, -5.493199565753575e-01, -5.606840912031038e-01, -6.458933157198790e-01, -6.458933157198790e-01, -8.012917858493995e-02, -1.607269987050049e-01, -7.396387425395742e-02, -1.923816965622136e+00, -9.551716628676456e-02, -9.551716628676454e-02, -2.324408811781993e-03, -2.943795275548181e-03, -2.252739530600974e-03, -4.945142039428534e-02, -2.711976787065946e-03, -2.711976787065946e-03, -6.684442746554513e-01, -6.701234978639301e-01, -6.696617604461397e-01, -6.691669912438454e-01, -6.694222299000292e-01, -6.694222299000292e-01, -6.425646483573626e-01, -5.617492776496736e-01, -5.935701561794778e-01, -6.178261627912737e-01, -6.057348125310807e-01, -6.057348125310807e-01, -7.004060704205557e-01, -2.111198932511001e-01, -2.607189907837567e-01, -3.526203097875173e-01, -3.078850521875476e-01, -3.078850521875476e-01, -4.862484470511414e-01, -2.910876975804306e-02, -3.969011629356704e-02, -3.492206681856095e-01, -6.339879819386016e-02, -6.339879819386020e-02, -7.359079957906150e-03, -7.918254313127259e-04, -1.654551934835425e-03, -5.959292749130286e-02, -2.510310913256863e-03, -2.510310913256861e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_20_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_20", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.982790179441021e+01, -2.982801157639549e+01, -2.982838573567097e+01, -2.982674947541741e+01, -2.982762307308696e+01, -2.982762307308696e+01, -4.834825075617459e+00, -4.834989222135926e+00, -4.839416938677618e+00, -4.838401541061153e+00, -4.837868757799197e+00, -4.837868757799197e+00, -8.197475955112155e-01, -8.183597081582177e-01, -7.884649207330809e-01, -8.059874800720207e-01, -8.012775807832381e-01, -8.012775807832381e-01, -2.221824963732534e-01, -2.263956191155260e-01, -8.690422157411959e-01, -1.549062245409399e-01, -1.782474523451335e-01, -1.782474523451335e-01, -6.854461239376692e-03, -7.217802150616538e-03, -4.010510820745627e-02, -3.982502334183165e-03, -4.992077019782343e-03, -4.992077019782350e-03, -7.336873352584439e+00, -7.341033347923076e+00, -7.336999857767160e+00, -7.340674788090617e+00, -7.339012654258745e+00, -7.339012654258745e+00, -2.719781548330626e+00, -2.744776214285878e+00, -2.704611656556396e+00, -2.727231280198881e+00, -2.741198636827272e+00, -2.741198636827272e+00, -8.385744023230653e-01, -9.526785633986105e-01, -7.658541661920363e-01, -8.291358029402686e-01, -8.549594505430128e-01, -8.549594505430128e-01, -1.057365135119812e-01, -2.120926458392242e-01, -9.767131839580545e-02, -2.857763115658145e+00, -1.257133308638450e-01, -1.257133308638450e-01, -3.113555429421473e-03, -3.919361917854682e-03, -2.979579504654126e-03, -6.539209085295739e-02, -3.605795025388677e-03, -3.605795025388676e-03, -8.847740237355699e-01, -8.606347860438597e-01, -8.687702514194603e-01, -8.757936717510014e-01, -8.722502442384340e-01, -8.722502442384340e-01, -8.690063962222687e-01, -6.833133155066089e-01, -7.162295819735671e-01, -7.639360197366450e-01, -7.377949159029695e-01, -7.377949159029696e-01, -9.976015068998225e-01, -2.797676761372619e-01, -3.468976949441873e-01, -4.768198795590123e-01, -4.098119627889182e-01, -4.098119627889183e-01, -6.341007698990200e-01, -3.827784097727033e-02, -5.244121440326753e-02, -4.699292753662209e-01, -8.359633360801513e-02, -8.359633360801530e-02, -9.802457900802990e-03, -1.066589595354437e-03, -2.178195866127814e-03, -7.838337739452512e-02, -3.327284080837393e-03, -3.327284080837388e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_20_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_20", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.250425463354936e-08, -2.250416912197574e-08, -2.250375443106847e-08, -2.250504437578940e-08, -2.250437319089048e-08, -2.250437319089048e-08, -1.605969802339143e-05, -1.606367159832430e-05, -1.616856621626680e-05, -1.613152129582954e-05, -1.613748287576948e-05, -1.613748287576948e-05, -4.371824385494129e-03, -4.350900853499895e-03, -3.880622583383525e-03, -4.236265619210279e-03, -4.144215206830126e-03, -4.144215206830126e-03, -5.841161287830660e-01, -5.984250472422225e-01, -8.320240949552427e-04, -3.015020614911013e-01, -4.177402326097879e-01, -4.177402326097879e-01, -4.680969974922899e+01, -4.201975435362439e+01, -8.568875853042324e-01, -7.124384587485926e+01, -6.840705498106348e+01, -6.840705498106298e+01, -6.858455960262259e-06, -6.860410617635206e-06, -6.858704176938754e-06, -6.860421391988743e-06, -6.859372709057696e-06, -6.859372709057696e-06, -1.453543623538423e-04, -1.483237073965394e-04, -1.439456635968057e-04, -1.468514040109780e-04, -1.476899038459156e-04, -1.476899038459156e-04, -2.992678226462940e-02, -2.647201430581767e-02, -3.101221435288487e-02, -3.261264415676311e-02, -2.964945282894660e-02, -2.964945282894660e-02, -2.792821185494144e-01, -2.465193976974915e-01, -2.927058515010320e-01, -2.629767498998559e-04, -4.530462015719966e-01, -4.530462015719969e-01, 6.971649316217774e+01, -1.310136606936436e+01, -3.073645147887906e+02, -4.542978006111433e-01, -5.103305094971366e+01, -5.103305094971432e+01, -4.429215936501759e-02, -4.438288140427817e-02, -4.438115954595301e-02, -4.435612682889563e-02, -4.437113248500391e-02, -4.437113248500391e-02, -4.866387955397471e-02, -5.693568063187578e-02, -5.789243297712565e-02, -5.603309548820571e-02, -5.726769820768664e-02, -5.726769820768664e-02, -2.050265473048343e-02, -2.053372654204914e-01, -1.785710151982696e-01, -1.345943246737965e-01, -1.723376100479443e-01, -1.723376100479443e-01, -6.316307647966912e-02, -1.147647471033921e+00, -5.181905161675719e-01, -2.096999393615073e-01, -5.439727544470971e-01, -5.439727544470967e-01, -1.367209188260258e+00, 2.838814590348135e+03, -5.509764790382987e+02, -6.683954423874118e-01, -1.400402076752074e+02, -1.400402076752075e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_20_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_20", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([3.290030875245322e-03, 3.290018681645310e-03, 3.290005606803504e-03, 3.290188326065067e-03, 3.290086717505942e-03, 3.290086717505942e-03, 9.642849482521905e-03, 9.645651098817005e-03, 9.722679531080441e-03, 9.722431252340220e-03, 9.710111398420283e-03, 9.710111398420283e-03, 1.383379873735800e-02, 1.374980250150599e-02, 1.213993334712579e-02, 1.456898869518668e-02, 1.382445076268128e-02, 1.382445076268128e-02, 7.096920051772580e-02, 7.512596800907402e-02, 1.157197188916788e-03, 1.280956796967152e-02, 2.737906447428099e-02, 2.737906447428103e-02, 1.623778689727631e-04, 1.689305483081110e-04, 5.967546719075265e-04, 4.265800477257202e-05, 8.516398078891129e-05, 8.516398078891472e-05, 1.334040831111706e-02, 1.332684756774404e-02, 1.334011325495782e-02, 1.332812777189510e-02, 1.333337560166120e-02, 1.333337560166120e-02, 2.269595861988732e-02, 2.375719339988915e-02, 2.254121435449135e-02, 2.354140138314892e-02, 2.335358664392369e-02, 2.335358664392369e-02, 9.378080914737864e-02, 8.686995571079677e-02, 7.434144283504199e-02, 7.340486450024065e-02, 9.538443058016018e-02, 9.538443058016018e-02, 3.924113121070870e-03, 2.905124399538020e-02, 3.198984106804566e-03, 2.288075618795605e-02, 1.130746475588714e-02, 1.130746475588721e-02, -1.385024662177059e-05, 6.396835624691402e-06, 7.569978483757692e-05, 1.439590291388809e-03, 2.003561108621535e-05, 2.003561108621640e-05, 1.020451021655921e-01, 1.079175080343698e-01, 1.059161150369718e-01, 1.042050624272445e-01, 1.050659506064701e-01, 1.050659506064701e-01, 1.025158080757345e-01, 1.312016917657704e-01, 1.334858827767458e-01, 1.252373323605325e-01, 1.302025493022989e-01, 1.302025493022989e-01, 7.806573561996151e-02, 5.116207829365516e-02, 7.286628418745313e-02, 9.989735664269715e-02, 9.830772539437024e-02, 9.830772539437044e-02, 1.087329981760148e-01, 7.236599849716828e-04, 8.268993796007969e-04, 1.327822751984464e-01, 3.842378754576992e-03, 3.842378754577062e-03, 1.087870458461048e-05, -1.310121880313853e-05, 5.729238732653571e-05, 4.050785938262173e-03, 4.611068011045164e-05, 4.611068011045358e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
