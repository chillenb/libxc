
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_20_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_20", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.170746347599774e+01, -2.170759465139519e+01, -2.170816808613827e+01, -2.170622138047282e+01, -2.170724271708036e+01, -2.170724271708036e+01, -3.059964912259811e+00, -3.060077256792359e+00, -3.063102529029905e+00, -3.062154990052630e+00, -3.061938273091544e+00, -3.934134218401912e+00, -5.545312067420686e-01, -6.922105177559961e-01, -6.610575732039170e-01, -6.723935143744548e-01, -6.698653823543521e-01, -6.698653823543521e-01, -1.695901619249066e-01, -1.731864154541029e-01, -6.479601307532519e-01, -1.197661423703768e-01, -1.378496220790625e-01, -1.378496220790625e-01, -5.230113439044141e-03, -5.505005353436090e-03, -3.046356846525722e-02, -3.020271677655431e-03, -3.795324938692622e-03, -3.795324938692622e-03, -6.083837875267937e+00, -6.084277037090351e+00, -6.083854689982296e+00, -5.480025408623036e+00, -6.084063142188635e+00, -6.084063142188635e+00, -1.679054996355613e+00, -1.699080274851590e+00, -1.664350617902904e+00, -1.681802622169990e+00, -1.697469873483183e+00, -2.190247307774396e+00, -6.839952792375122e-01, -7.474579260853483e-01, -6.209460445604531e-01, -6.582339457415370e-01, -6.971338939674151e-01, -5.712635808351154e-01, -7.956130471642001e-02, -1.623666665158202e-01, -7.378345430080660e-02, -2.247736821463467e+00, -9.644430773428238e-02, -9.644430773428236e-02, -2.388783100501144e-03, -2.952571578585101e-03, -2.257728378591680e-03, -5.004292702440200e-02, -2.787927744881956e-03, -2.719847376369622e-03, -6.774908411333019e-01, -6.787642645535652e-01, -6.456895426271773e-01, -6.780764482428319e-01, -6.782768089724328e-01, -6.782768089724328e-01, -6.598876275700598e-01, -5.684575938893347e-01, -6.037599945170046e-01, -6.314869417571832e-01, -6.183344586287948e-01, -5.244148055036023e-01, -7.842625216603866e-01, -1.814019291539346e-01, -2.673842191647279e-01, -2.975963631865134e-01, -3.223232493057290e-01, -3.223232493057291e-01, -4.013511883745411e-01, -2.915031517343365e-02, -3.982981385390988e-02, -3.813904789821516e-01, -6.322974098417138e-02, -6.381246344852456e-02, -7.381660378307657e-03, -7.892169032235387e-04, -1.656629597604756e-03, -5.983747851915571e-02, -2.516712395268583e-03, -2.516712395268583e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_20_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_20", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.274119335628598e+01, -3.274130371216602e+01, -3.274181482340057e+01, -3.274017370215417e+01, -3.274103073764814e+01, -3.274103073764814e+01, -4.752771385567528e+00, -4.753059553009789e+00, -4.760727939584984e+00, -4.758062592722399e+00, -4.757854188025599e+00, -4.845273846113897e+00, -7.643734101856771e-01, -9.105718027825314e-01, -8.731617684813943e-01, -8.867565062892658e-01, -8.837792390918859e-01, -8.837792390918859e-01, -2.243950908575418e-01, -2.291839523283183e-01, -8.357530503831604e-01, -1.570646660436582e-01, -1.814511272764757e-01, -1.814511272764757e-01, -6.850885802920700e-03, -7.210944948807935e-03, -3.988668248914683e-02, -3.956290006758586e-03, -4.971515860747813e-03, -4.971515860747813e-03, -7.331802939162080e+00, -7.336013282807679e+00, -7.332034325232562e+00, -8.004022535921521e+00, -7.333915050994143e+00, -7.333915050994143e+00, -2.543805168892272e+00, -2.589172550364999e+00, -2.509323321545543e+00, -2.549724439379646e+00, -2.585889365101433e+00, -2.751901907833507e+00, -8.064001404113129e-01, -8.847266641801582e-01, -7.534960248082425e-01, -7.754681571980746e-01, -8.184647773193181e-01, -8.934448159732286e-01, -1.036335357237125e-01, -2.138076766677236e-01, -9.635883100876030e-02, -2.634985721238570e+00, -1.263020253303232e-01, -1.263020253303232e-01, -3.184965047520636e-03, -3.867611188776256e-03, -2.957416667657416e-03, -6.597961153700700e-02, -3.716986702370308e-03, -3.562753298176744e-03, -8.728741239110507e-01, -8.494421027396539e-01, -8.985159609368396e-01, -8.641171659925081e-01, -8.606698329779897e-01, -8.606698329779897e-01, -8.465464181622164e-01, -6.802994628289953e-01, -7.077555401590075e-01, -7.486543647294959e-01, -7.253738600833792e-01, -8.034966343453512e-01, -9.211599702941456e-01, -2.345329700159476e-01, -3.530469257310530e-01, -4.494996379460082e-01, -4.185139923865040e-01, -4.185139923865043e-01, -6.258243656698298e-01, -3.816841338873374e-02, -5.213815457651932e-02, -4.660465800945655e-01, -8.263432884955051e-02, -8.347818693703846e-02, -9.669104859980595e-03, -1.033810424596159e-03, -2.170045045199320e-03, -7.827948573108406e-02, -3.296664315451954e-03, -3.296664315451958e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_20_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_20", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.974430793319318e-08, -1.974428912059112e-08, -1.974405640844622e-08, -1.974435269934680e-08, -1.974421850278655e-08, -1.974421850278655e-08, -1.444519987401500e-05, -1.444881286477990e-05, -1.454314998023680e-05, -1.449974442949197e-05, -1.451042560603680e-05, -1.868227510703082e-05, -3.913649419655558e-03, -5.400121381615604e-03, -4.793046760453731e-03, -5.156319040800143e-03, -5.069049956325076e-03, -5.069049956325076e-03, -6.003031904663102e-01, -6.180386185353407e-01, -7.566868534234738e-04, -3.585214388323752e-01, -4.604524630418654e-01, -4.604524630418653e-01, -4.835246878192423e+01, -4.461881655191457e+01, -1.275464894559111e+00, -1.231807012683217e+02, -9.230044497897799e+01, -9.230044497897799e+01, -6.863193991122169e-06, -6.865095289605280e-06, -6.863343828481794e-06, -6.192673221791358e-06, -6.864132935748237e-06, -6.864132935748237e-06, -1.150921499450330e-04, -1.172474183726495e-04, -1.131320860486486e-04, -1.152159707155890e-04, -1.172537832849175e-04, -1.531544249815781e-04, -3.245645995535124e-02, -2.903096894463484e-02, -3.519111573525373e-02, -3.820779522594784e-02, -3.202825284931232e-02, -2.640206197230796e-02, 1.906986092498665e-01, -2.570497530822488e-01, 2.679555293541404e-01, -3.064036792351341e-04, -5.102646949781112e-01, -5.102646949781116e-01, 5.764034077716005e+02, -1.211466642931360e+02, -5.903146390158601e+02, 1.011492359810546e+00, 8.416980935500029e+02, -2.518569209776865e+02, -4.489749730062644e-02, -4.496172624530079e-02, -4.279964560128284e-02, -4.495282632463184e-02, -4.496426669050762e-02, -4.496426669050762e-02, -4.998362254618507e-02, -5.765179157917809e-02, -5.891405652107660e-02, -5.729040073780843e-02, -5.848287864098223e-02, -4.982050235796164e-02, -2.292856356142467e-02, -1.320546090299714e-01, -1.860373562169693e-01, -1.128428520707236e-01, -1.826461337198557e-01, -1.826461337198558e-01, -5.231363163824456e-02, -1.379843596329864e+00, -8.005728165927237e-01, -2.300740933203319e-01, 4.981512442116036e-01, -6.942050208802119e-01, -1.685168813446120e+01, -1.871123823013271e+03, -7.201576516763447e+02, -7.810515523222146e-01, -3.512032017147199e+02, -3.512032017147210e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_20_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_20", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.226833796328672e-03, 2.226852558266731e-03, 2.226923995570152e-03, 2.226646741077257e-03, 2.226793709843873e-03, 2.226793709843873e-03, 5.058406778539483e-03, 5.060750537489965e-03, 5.122600905555105e-03, 5.097107326121142e-03, 5.100368422284644e-03, 1.693008401328429e-02, 2.385931271590793e-03, 4.006927888513899e-02, 3.305596746983922e-02, 3.635085376798308e-02, 3.557485922544058e-02, 3.557485922544058e-02, 7.761965823935102e-02, 8.367679419884749e-02, -1.143901659255958e-03, 1.906347609527964e-02, 3.589109100965064e-02, 3.589109100965069e-02, 1.691153993378158e-04, 1.820997483742750e-04, 9.629818180469440e-04, 8.266634535711451e-05, 1.230689669516558e-04, 1.230689669516558e-04, 1.336350424902095e-02, 1.334963065922603e-02, 1.336272656410389e-02, 1.011807549339116e-02, 1.335655290392539e-02, 1.335655290392539e-02, 5.878625694322867e-03, 6.408978218276497e-03, 5.470178798426149e-03, 5.937135211372073e-03, 6.380103885266444e-03, 2.639975269310380e-02, 1.207612246879698e-01, 1.125137878623504e-01, 1.166377996781649e-01, 1.258657635141115e-01, 1.206093949824854e-01, 6.139342109203392e-02, -1.336534651419323e-03, 3.257156272402791e-02, -1.120147323736890e-03, 3.767659460644862e-02, 1.429403051586010e-02, 1.429403051586017e-02, -4.593402854437282e-08, 7.594442871286320e-05, 1.656005507740181e-04, -4.631122294480210e-04, -2.894477650900827e-07, 1.234964701301247e-04, 1.051914049523099e-01, 1.112620065023341e-01, 9.715933494199695e-02, 1.074308195554262e-01, 1.083227034993841e-01, 1.083227034993841e-01, 1.089335376091592e-01, 1.362591205753245e-01, 1.402902016249684e-01, 1.327917326222693e-01, 1.379391275650348e-01, 8.344519390242554e-02, 1.086019563982293e-01, -3.924039692042340e-03, 8.425561360905692e-02, 3.153146586286437e-02, 1.214804896226838e-01, 1.214804896226841e-01, 4.201842024129811e-02, 9.077806307010845e-04, 1.401573220011761e-03, 1.828819447932935e-01, -1.215100843313963e-03, 5.503427227353163e-03, 1.660198688398518e-04, 2.237400941589231e-05, 7.969864106961593e-05, 5.076728359378297e-03, 1.364411125932212e-04, 1.364411125932238e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
