
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_gdme_kos_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_kos", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-9.144733602667007e+00, -9.144828923932138e+00, -9.145378738462568e+00, -9.143962607678393e+00, -9.144686930035267e+00, -9.144686930035267e+00, -3.755647721424601e+00, -3.755665328527866e+00, -3.756064839582124e+00, -3.755894808176767e+00, -3.755878855215218e+00, -3.755878855215218e+00, -8.866552270885062e-01, -8.876762217862347e-01, -9.184959160675622e-01, -9.055569335278267e-01, -9.079055104313110e-01, -9.079055104313110e-01, -3.808030455223037e-01, -3.701251333127705e-01, -1.050822288421602e+00, -5.251927207543261e-01, -4.339695966873149e-01, -4.339695966873151e-01, -1.110248725959241e+01, -1.038455434734183e+01, -2.019095226316064e+00, -2.027797702140898e+01, -1.447507803919023e+01, -1.447507803919023e+01, -5.422656346318298e+01, -2.241748426734628e+01, 2.996026073185507e+02, -1.074192569374060e+02, 4.927452658150674e+00, -1.096985679866516e+01, 4.016564985574848e+02, -6.474297074659477e+00, -3.180631043373298e+00, -3.177026339501997e+00, -3.214929033018970e+00, -1.601554914286459e+00, -1.423188091131921e+01, -4.799685017371925e+00, -1.251214412850621e+01, -8.669113331381804e-01, -9.712632322035784e-01, -1.279290984962660e+00, 7.656028602501666e+00, -6.512232624594534e+00, 5.067770679157020e+01, -3.154117174706093e+00, -1.595658959047044e-01, 3.285950929989461e-01, -3.843353201815545e+02, -3.505183501082254e+05, 1.641214683019222e+05, 1.235074448721684e+01, -7.446570014724685e+01, 4.650417571844656e+03, -8.436216851802333e+04, 3.423239013395079e+04, 5.921129526937406e+05, -7.577129198779933e+02, 1.092441760915599e+04, -1.070853033909351e+06, 3.241578271157009e+05, -6.718111916041091e-01, -8.625425665741254e+00, 8.347954546487630e-01, -1.191995434438558e+00, -2.076848276257590e+01, -1.687288651694082e+01, 6.199169166348813e+01, 9.451493256724464e+01, 8.560703060340607e+00, -1.529853901137611e+00, -8.974086717015245e-01, -6.888853624913325e-01, 1.496940249068528e+01, -2.276422708852062e+00, -4.800151145297095e-01, 2.720408472304842e+01, -6.207442132887354e-02, 6.579545429023038e+02, 5.761861880123399e+02, 3.129581711659530e+03, 2.312322521983908e+00, 8.184559594937660e+02, 1.512510165820732e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_gdme_kos_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_kos", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-5.568439250852480e+01, -5.568433049364828e+01, -5.568454547798137e+01, -5.568444157195322e+01, -5.568503461223811e+01, -5.568514341192512e+01, -5.568330612927662e+01, -5.568293992046323e+01, -5.568448133818274e+01, -5.568382240990923e+01, -5.568448133818274e+01, -5.568382240990923e+01, -8.310350605187558e+00, -8.310234752581005e+00, -8.310374097038627e+00, -8.310240800480500e+00, -8.310788334508217e+00, -8.310982920620905e+00, -8.311452491225502e+00, -8.311590162169272e+00, -8.308767913241415e+00, -8.312173285526844e+00, -8.308767913241415e+00, -8.312173285526844e+00, -1.544390094690312e+00, -1.553198184398407e+00, -1.541055620031287e+00, -1.551773861328858e+00, -1.494511620964164e+00, -1.479877031311419e+00, -1.503910773630773e+00, -1.508934467405137e+00, -1.568983323748678e+00, -1.430068146298644e+00, -1.568983323748678e+00, -1.430068146298644e+00, -3.358871338526358e-01, -3.619156135961621e-01, -3.450647247926523e-01, -3.740987027410850e-01, -1.750321645555948e+00, -1.847871694715926e+00, -1.803800473870925e-01, -1.924069473070760e-01, -3.621779329797736e-01, 7.579707253206337e-03, -3.621779329797735e-01, 7.579707253207163e-03, 3.791162068416829e+00, 3.595092264152891e+00, 3.565433313716410e+00, 3.345271823224238e+00, 6.047034529311480e-01, 5.527725403130023e-01, 6.644927902716872e+00, 6.859991395790686e+00, 4.494844302390886e+00, 6.530854525190146e+00, 4.494844302390884e+00, 6.530854525190121e+00, 5.757117606873549e+00, 1.759261568442510e+00, -6.816371221495428e+00, -6.877144915908251e+00, -1.081666561550390e+02, -1.202063107096849e+02, 2.065345088582950e+01, 2.232185988461105e+01, -1.597437573356333e+01, -1.594646295577552e+01, -1.047761148325558e+01, -1.084516561743806e+01, -1.494982586302841e+02, -1.290338535900621e+02, -3.262190016899675e+00, -3.262343709498121e+00, -4.288521193624824e+00, -4.296725083548390e+00, -4.333179657119030e+00, -4.323508607473281e+00, -4.354838644355746e+00, -4.335223464302264e+00, -4.915115791904749e+00, -4.850231035996242e+00, 2.545113895431331e+00, 3.720814107013660e+00, -1.638933844623306e-01, -1.416174015712091e-01, 3.293309933483510e+00, 2.123818034793625e+00, -1.240933917231929e+00, -1.284255509045549e+00, -1.350577415519338e+00, -1.279414602859047e+00, -1.245908628171119e+00, -1.179061865742705e+00, -2.821403062173837e+00, -2.785187622242580e+00, 1.709216962547355e+00, 1.678574488240029e+00, -1.761277628661028e+01, -1.670829997656896e+01, -4.228010244717483e+00, -4.226101431477038e+00, -2.377123509317473e-01, -2.453769431357303e-01, -4.050618200783426e-01, -4.042032437439094e-01, 1.343155975638276e+02, 1.225705446933784e+02, 1.207744463626616e+05, 1.130778294397406e+05, -7.933674560893603e+04, -3.397112735102578e+04, -3.909416839002506e+00, -4.630168362421717e+00, 4.524213958253167e+01, 1.692544198701322e+01, -2.989452649873918e+03, -9.944523628183904e+02, 2.798174971434203e+04, 2.825487298179211e+04, -1.140907851710955e+04, -1.141569994929198e+04, -1.970336133111980e+05, -1.977076467923574e+05, 2.653029799136663e+02, 2.367684993624111e+02, -3.359693315796121e+03, -3.923207260023467e+03, 3.567790485327794e+05, 3.571177710259855e+05, -1.066028450915794e+05, -1.094912289719894e+05, -1.125948418007783e+00, -1.134005785051916e+00, 1.431623583066276e+00, 1.482735830793609e+00, -1.701347806535861e+00, -1.816810713751526e+00, -1.048984604327629e+00, -1.053873803633341e+00, 5.516141952255063e+00, 5.432429581167425e+00, 3.861698807741865e+00, 3.712421147213501e+00, -2.115305093741357e+01, -2.137802662003546e+01, -3.222232816856184e+01, -3.223490672408272e+01, -3.712484070622287e+00, -3.904898010914590e+00, -3.257174878149192e-01, -3.169618157574662e-01, -5.362408926597657e-01, -5.280688727635563e-01, -1.014516767886027e+00, -1.019198225498989e+00, -5.532491378170487e+00, -4.640521672368798e+00, 5.129927934815394e-01, 7.419459344228657e-01, -7.520890733080505e-01, -7.707020979726803e-01, -1.039282539764691e+01, -8.311036751630077e+00, -1.387220998810775e-01, -2.122503730140417e-01, -2.912422433952363e+02, -1.547265479158823e+02, -1.328564984039221e+02, -2.508685072959202e+02, -1.136384090338160e+03, -9.657468713394890e+02, -8.193016021438594e-01, -1.089237883271670e+00, -4.253415719607161e+02, -2.078385085836283e+02, -7.345970475499770e+02, -4.059940031051289e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gdme_kos_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_kos", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gdme_kos_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_kos", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [-1.839934199803929e-03, -1.839936569108612e-03, -1.839928255503989e-03, -1.839932250758327e-03, -1.839908065665873e-03, -1.839903648670085e-03, -1.839975227087376e-03, -1.839989242722681e-03, -1.839930713733531e-03, -1.839954164294800e-03, -1.839930713733531e-03, -1.839954164294800e-03, -1.130113807727226e-02, -1.130129227285484e-02, -1.130110274547177e-02, -1.130127882028558e-02, -1.130046645022704e-02, -1.130023380897623e-02, -1.129974523977919e-02, -1.129958665686970e-02, -1.130302812481030e-02, -1.129880047532164e-02, -1.130302812481030e-02, -1.129880047532164e-02, -5.870813714796268e-02, -5.847634663396144e-02, -5.879964719424425e-02, -5.851464523308204e-02, -6.005001940353286e-02, -6.046656875786679e-02, -5.982560674371087e-02, -5.969628339635472e-02, -5.803128340644229e-02, -6.195631902679569e-02, -5.803128340644229e-02, -6.195631902679569e-02, -2.314116955059085e-01, -2.227471278572444e-01, -2.285949094950359e-01, -2.188839976860059e-01, -5.110662114065299e-02, -4.944445030013438e-02, -3.009701607992658e-01, -2.968731662476630e-01, -2.216208865659840e-01, -4.131004394024398e-01, -2.216208865659839e-01, -4.131004394024397e-01, -6.728723687018642e+00, -6.332211914551576e+00, -6.421270364352038e+00, -5.994172398232869e+00, -1.154813928126080e+00, -1.093558633767949e+00, -1.119349778196895e+01, -1.138317492389539e+01, -7.542603821263770e+00, -1.325442749317319e+01, -7.542603821263770e+00, -1.325442749317318e+01, -7.547264151046859e-03, -7.549072444358432e-03, -7.545854988833562e-03, -7.547710646919191e-03, -7.547178324137210e-03, -7.549020253730682e-03, -7.545969260809144e-03, -7.547783187940422e-03, -7.546548119743184e-03, -7.548389384222368e-03, -7.546548119743184e-03, -7.548389384222368e-03, -2.008080273041666e-02, -2.008181749186393e-02, -1.993398685154715e-02, -1.993941318373327e-02, -2.020568754600984e-02, -2.017080030724765e-02, -2.007703650165671e-02, -2.004092641932136e-02, -1.990665214580345e-02, -1.999421405412102e-02, -1.990665214580345e-02, -1.999421405412102e-02, -6.689360464298526e-02, -6.707117546688710e-02, -6.167186221961312e-02, -6.164387712846045e-02, -7.374415954644065e-02, -7.112918533550848e-02, -7.081385501160525e-02, -6.853661624158455e-02, -6.431876227541458e-02, -6.769226125852874e-02, -6.431876227541458e-02, -6.769226125852873e-02, -4.325683841956728e-01, -4.284823214843851e-01, -2.271368845540205e-01, -2.260089715359701e-01, -4.781771403219500e-01, -4.537945365472455e-01, -2.046820070345235e-02, -2.047740053038478e-02, -3.780428406134726e-01, -3.568677664531337e-01, -3.780428406134726e-01, -3.568677664531337e-01, -1.492089283926508e+01, -1.435747287743880e+01, -1.163352209147281e+01, -1.146007343091709e+01, -1.555755465312079e+01, -1.469030789815476e+01, -6.940175728060457e-01, -6.897763468416316e-01, -1.523237490177993e+01, -1.109164029919428e+01, -1.523237490177992e+01, -1.109164029919427e+01, -6.678758414246128e-02, -6.653039969984666e-02, -6.717421529540603e-02, -6.691294544969616e-02, -6.703807217485908e-02, -6.677742335463498e-02, -6.692519067011755e-02, -6.666735142276506e-02, -6.698163200084269e-02, -6.672241504129242e-02, -6.698163200084269e-02, -6.672241504129242e-02, -6.862915660998237e-02, -6.840303657930417e-02, -7.998861025712169e-02, -7.964356916169928e-02, -7.639029750532345e-02, -7.605277724721343e-02, -7.309018487093617e-02, -7.283407792711502e-02, -7.472938092902172e-02, -7.445281050269154e-02, -7.472938092902172e-02, -7.445281050269154e-02, -5.886111501031251e-02, -5.876535569822686e-02, -1.798488863955033e-01, -1.788135374777279e-01, -1.500747705266339e-01, -1.485845501902992e-01, -1.133625548613559e-01, -1.127391928494615e-01, -1.299723617083323e-01, -1.300182277378918e-01, -1.299723617083324e-01, -1.300182277378919e-01, -8.699496779171934e-02, -8.640000738952199e-02, -1.176826800424621e+00, -1.168829374197859e+00, -8.748766355092615e-01, -8.465388589410965e-01, -1.181598652406419e-01, -1.164045617548556e-01, -5.589695403521536e-01, -5.293795502247934e-01, -5.589695403521537e-01, -5.293795502247934e-01, -4.703945270464486e+00, -4.539372997593011e+00, -4.324140366576381e+01, -4.314279784805328e+01, -2.125126386958630e+01, -1.998086595131769e+01, -5.834132472215621e-01, -5.740259136335051e-01, -1.608126669913780e+01, -1.210119839830784e+01, -1.608126669913780e+01, -1.210119839830785e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gdme_kos_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_kos", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [7.454246138712632e-03, 7.454255737632140e-03, 7.454222056180292e-03, 7.454238242416313e-03, 7.454140259764507e-03, 7.454122364899679e-03, 7.454412355237792e-03, 7.454469137700647e-03, 7.454232015366913e-03, 7.454327022164334e-03, 7.454232015366913e-03, 7.454327022164334e-03, 4.578504214147556e-02, 4.578566684415582e-02, 4.578489899943419e-02, 4.578561234287937e-02, 4.578232113476293e-02, 4.578137862000033e-02, 4.577939924755812e-02, 4.577875677021256e-02, 4.579269941506935e-02, 4.577557166132685e-02, 4.579269941506935e-02, 4.577557166132685e-02, 2.378481277715516e-01, 2.369090596547852e-01, 2.382188684258753e-01, 2.370642212821104e-01, 2.432845833922238e-01, 2.449721771205526e-01, 2.423754056601426e-01, 2.418514694983072e-01, 2.351059458012728e-01, 2.510077001251214e-01, 2.351059458012728e-01, 2.510077001251214e-01, 9.375333845426020e-01, 9.024300531595824e-01, 9.261215545720713e-01, 8.867791004432475e-01, 2.070516072482151e-01, 2.003175454697357e-01, 1.219340158601717e+00, 1.202741735777756e+00, 8.978672379254662e-01, 1.673620912989321e+00, 8.978672379254661e-01, 1.673620912989321e+00, 2.726051973367740e+01, 2.565410557539842e+01, 2.601491391605298e+01, 2.428458390472154e+01, 4.678573432453581e+00, 4.430405839561693e+00, 4.534895195101110e+01, 4.611740340050203e+01, 3.055784571887739e+01, 5.369853170421069e+01, 3.055784571887739e+01, 5.369853170421065e+01, 3.057672641868417e-02, 3.058405247601649e-02, 3.057101738735664e-02, 3.057853533670562e-02, 3.057637870249414e-02, 3.058384103270215e-02, 3.057148034490850e-02, 3.057882922690422e-02, 3.057382551408596e-02, 3.058128514967281e-02, 3.057382551408596e-02, 3.058128514967281e-02, 8.135467357007103e-02, 8.135878473969915e-02, 8.075986876765939e-02, 8.078185282325773e-02, 8.186062761697040e-02, 8.171928665767894e-02, 8.133941520039978e-02, 8.119312005471169e-02, 8.064912588089501e-02, 8.100387118485428e-02, 8.064912588089501e-02, 8.100387118485428e-02, 2.710104492691530e-01, 2.717298535981552e-01, 2.498552615994409e-01, 2.497418837635984e-01, 2.987645518031256e-01, 2.881703352182329e-01, 2.868928167887015e-01, 2.776668899538383e-01, 2.605788214542546e-01, 2.742460992142471e-01, 2.605788214542546e-01, 2.742460992142470e-01, 1.752492674989883e+00, 1.735938541047810e+00, 9.202145624699248e-01, 9.156449744593854e-01, 1.937270420999505e+00, 1.838487578624642e+00, 8.292416439477229e-02, 8.296143625720913e-02, 1.531589762944367e+00, 1.445801795736909e+00, 1.531589762944367e+00, 1.445801795736909e+00, 6.044999209487447e+01, 5.816737183847359e+01, 4.713165130537303e+01, 4.642894736718319e+01, 6.302934187167923e+01, 5.951580819465670e+01, 2.811718926056963e+00, 2.794536169047494e+00, 6.171191981056504e+01, 4.493629004834469e+01, 6.171191981056504e+01, 4.493629004834469e+01, 2.705809214595501e-01, 2.695389732537385e-01, 2.721473056157071e-01, 2.710888059482992e-01, 2.715957400593098e-01, 2.705397563931969e-01, 2.711384158131812e-01, 2.700938147539744e-01, 2.713670802793705e-01, 2.703168976043475e-01, 2.713670802793705e-01, 2.703168976043475e-01, 2.780418048197493e-01, 2.771257099041005e-01, 3.240631046554155e-01, 3.226652170279538e-01, 3.094850241246930e-01, 3.081176061588645e-01, 2.961150612940550e-01, 2.950774784297984e-01, 3.027560438291256e-01, 3.016355559156049e-01, 3.027560438291256e-01, 3.016355559156049e-01, 2.384678970219146e-01, 2.380799410382515e-01, 7.286335930427900e-01, 7.244390160446724e-01, 6.080077639926241e-01, 6.019703365731340e-01, 4.592731560399886e-01, 4.567476886234474e-01, 5.265655562611653e-01, 5.267513763159143e-01, 5.265655562611655e-01, 5.267513763159143e-01, 3.524484206108884e-01, 3.500380184990960e-01, 4.767755626224892e+00, 4.735355128654470e+00, 3.544445112651188e+00, 3.429638419245818e+00, 4.787088143232082e-01, 4.715974381486768e-01, 2.264589971897927e+00, 2.144710103544525e+00, 2.264589971897928e+00, 2.144710103544525e+00, 1.905740209232050e+01, 1.839065964592101e+01, 1.751867356682555e+02, 1.747872474495999e+02, 8.609663957521308e+01, 8.094979314022018e+01, 2.363620365249238e+00, 2.325588844796475e+00, 6.515109084359113e+01, 4.902637901072459e+01, 6.515109084359118e+01, 4.902637901072465e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
