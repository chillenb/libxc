
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_br89_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.882049740613882e+01, -1.882053189363073e+01, -1.882075113562299e+01, -1.882023685741395e+01, -1.882049698301221e+01, -1.882049698301221e+01, -3.617904847537583e+00, -3.617831263979566e+00, -3.616084454341672e+00, -3.618499533148601e+00, -3.617321604703820e+00, -3.617321604703820e+00, -7.712987712403606e-01, -7.715635936454339e-01, -7.791595959698435e-01, -7.799987349593349e-01, -7.796998748617319e-01, -7.796998748617319e-01, -2.441201080790332e-01, -2.444427232805040e-01, -9.262112086402764e-01, -2.226408728892115e-01, -2.432678588824420e-01, -2.432678588823357e-01, -7.936681586460098e-02, -7.957452422265537e-02, -1.355324490912854e-01, -7.275639916029694e-02, -7.494061337606839e-02, -7.494061337601875e-02, -8.648675794662966e+00, -7.005557789278180e+00, -3.817007519912524e+00, -1.036468441745032e+01, -4.144021849671569e+00, -5.951060537649202e+00, -1.430856514940900e+00, -2.633564362243403e+00, -2.338431766688471e+00, -2.344923899366476e+00, -2.344662368151350e+00, -2.137677191748974e+00, -1.222796742303055e+00, -9.753364743468835e-01, -1.116741041405389e+00, -5.991062545405811e-01, -6.563476005707232e-01, -6.965303881065864e-01, -6.689519347652491e-02, -4.250614068679421e-01, -6.178678203261340e-02, -2.053539974524368e+00, -1.840845670116034e-01, -1.630030636231663e-01, -1.443806246475251e-01, -3.067149416004395e+00, -1.904029582832179e-03, -4.153758815126643e-02, -8.422013667955938e-02, -2.391785781358883e-03, -3.027396920347385e+01, -4.281194102737973e-01, -4.289870039036718e-01, -4.588836237053071e+00, -4.293496236910574e-01, -8.944429825540809e+01, -4.189152287485471e-01, -5.483558290207212e-01, -9.736450309488809e-01, -4.225149941071075e-01, -6.211417476646219e-01, -1.262556408830311e+00, -1.405885681859144e+00, -1.601835142468747e-01, -1.923453949341866e-01, -2.561301111417591e-01, -4.448716755712906e-01, -4.051242252819268e-01, -5.178449545876554e-01, -2.449166820605166e-02, -1.562199748395612e-01, -3.735472716725925e-01, -5.293416083331628e-02, -1.483893811500778e-01, -6.218241034983486e-03, -6.645260321102699e-04, -1.397502496096958e-03, -5.131963937603994e-02, -2.196444045102280e-03, -2.196442953428147e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_br89_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.824658821097104e+01, -2.824648789859094e+01, -2.824667745917424e+01, -2.824655277155716e+01, -2.824700775826729e+01, -2.824701313928277e+01, -2.824599854498620e+01, -2.824572750172910e+01, -2.824664004748221e+01, -2.824627355476219e+01, -2.824664004748221e+01, -2.824627355476219e+01, -4.577743211666321e+00, -4.578010346026144e+00, -4.577804505251826e+00, -4.578082141873250e+00, -4.579395733295345e+00, -4.579834633136938e+00, -4.577523099663667e+00, -4.577956580603598e+00, -4.576821749732184e+00, -4.579455883924412e+00, -4.576821749732184e+00, -4.579455883924412e+00, -8.718654611527029e-01, -8.758932382849256e-01, -8.703129882963740e-01, -8.752792500631310e-01, -8.511744588580255e-01, -8.445945706297103e-01, -8.516689829211890e-01, -8.534390820912646e-01, -8.840941102822628e-01, -8.204969357625185e-01, -8.840941102822628e-01, -8.204969357625185e-01, -2.249602928268266e-01, -2.311845638812545e-01, -2.270115949222759e-01, -2.343493721103802e-01, -1.023697110483311e+00, -1.051294815477749e+00, -1.857898265871750e-01, -1.863146188314415e-01, -2.332681508861160e-01, -1.509520299749742e-01, -2.332681508863385e-01, -1.509520299752167e-01, -3.808460787390924e-02, -3.890305808060739e-02, -3.847133514545936e-02, -3.937207150309953e-02, -8.048975241129161e-02, -8.237649053396531e-02, -3.369697631418291e-02, -3.364425814282286e-02, -3.741189719923683e-02, -2.978387119613858e-02, -3.741189719933877e-02, -2.978387119613858e-02, -8.490738474185690e+00, -8.210236752224738e+00, -7.472340773232371e+00, -7.464006112046603e+00, -5.116488068345737e+00, -5.110160885551583e+00, -9.336152332269076e+00, -9.415591982405367e+00, -6.027653723139051e+00, -6.031016571586575e+00, -7.065339741123409e+00, -7.028037291429524e+00, -1.910095887449804e+00, -1.910710618067465e+00, -2.720230884959145e+00, -2.719260109080574e+00, -2.514765803295538e+00, -2.519816437954346e+00, -2.527896414970948e+00, -2.536628017620078e+00, -2.558495022942866e+00, -2.544972669011763e+00, -2.447707652122852e+00, -2.439753317250503e+00, -1.063738160949815e+00, -1.113875707828557e+00, -9.774882604251233e-01, -9.797176911268916e-01, -1.009575746962490e+00, -9.873750169954598e-01, -7.532584593272724e-01, -7.783247159524943e-01, -8.140561655799075e-01, -7.730556718163069e-01, -8.243737624841988e-01, -7.837099646513896e-01, -8.907827757607487e-02, -8.994224926575095e-02, -3.504042870914647e-01, -3.507853277055490e-01, -8.009697443014116e-02, -8.440826609145004e-02, -2.615571774256015e+00, -2.614444250940281e+00, -1.406348092813682e-01, -1.465698732318478e-01, -1.187547983032067e-01, -1.220171757680118e-01, -8.756179505836471e-02, -8.627659968790306e-02, -1.821540571005220e+00, -1.784535140251274e+00, -2.459864966243626e-03, -2.605083827674055e-03, -5.530506601456136e-02, -5.561570507956432e-02, -5.618164998332446e-02, -4.588268087822301e-02, -2.512378330828984e-03, -3.450301760366776e-03, -1.912120816747818e+01, -1.924049111837804e+01, -5.697098512645917e-01, -5.719343699632692e-01, -5.708622120030473e-01, -5.730904287937976e-01, -3.324113099516355e+00, -3.208037268299885e+00, -5.713596865615870e-01, -5.735770636837665e-01, -5.459442365287234e+01, -5.473894968398755e+01, -5.576276824689546e-01, -5.594710215464916e-01, -6.340663414050730e-01, -6.366213099056564e-01, -8.899769342821150e-01, -8.964009012295754e-01, -6.139034839824369e-01, -6.006664816265517e-01, -7.109601474705129e-01, -7.135438892383148e-01, -1.081339943895166e+00, -1.081799153729028e+00, -1.253959071493291e+00, -1.249183012133513e+00, -2.131673968349658e-01, -2.143997168032656e-01, -2.553581871604791e-01, -2.579227651172356e-01, -3.443881066964338e-01, -3.459082723346346e-01, -4.367980586246832e-01, -4.375784131152098e-01, -4.115795059539807e-01, -4.125807206894047e-01, -5.868189179995047e-01, -5.915095584712509e-01, -3.256098267717322e-02, -3.279465337087781e-02, -9.636387801242706e-02, -1.044700282563409e-01, -4.343454832617517e-01, -4.400421796998793e-01, -6.854668689644307e-02, -7.240685426845911e-02, -1.036764790617109e-01, -1.015042748491435e-01, -8.135653720781479e-03, -8.430647073685668e-03, -8.850206517741125e-04, -8.870428007201176e-04, -1.800810240764217e-03, -1.915307192823415e-03, -5.973355219846329e-02, -6.789833672784026e-02, -2.379757835220109e-03, -3.162462471416680e-03, -2.379756850113106e-03, -3.162458277552723e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_br89_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-9.308974807213726e-09, 0.000000000000000e+00, -9.308775777067358e-09, -9.308758014276927e-09, 0.000000000000000e+00, -9.308618480949367e-09, -9.308260128155193e-09, 0.000000000000000e+00, -9.307848848859686e-09, -9.310703132600211e-09, 0.000000000000000e+00, -9.310965451549279e-09, -9.308838883482982e-09, 0.000000000000000e+00, -9.309860409569605e-09, -9.308838883482982e-09, 0.000000000000000e+00, -9.309860409569605e-09, -1.956262416728047e-05, 0.000000000000000e+00, -1.956809551619378e-05, -1.956372949800025e-05, 0.000000000000000e+00, -1.956940055811446e-05, -1.959170211607008e-05, 0.000000000000000e+00, -1.959770434905940e-05, -1.955064182345406e-05, 0.000000000000000e+00, -1.955529507083280e-05, -1.957030430402324e-05, 0.000000000000000e+00, -1.957911111888613e-05, -1.957030430402324e-05, 0.000000000000000e+00, -1.957911111888613e-05, -9.608669198615848e-03, 0.000000000000000e+00, -9.693621818479180e-03, -9.590996563576827e-03, 0.000000000000000e+00, -9.687630372400150e-03, -9.363079829453691e-03, 0.000000000000000e+00, -9.314585537287208e-03, -9.253703969287930e-03, 0.000000000000000e+00, -9.304217903401911e-03, -9.709930795041668e-03, 0.000000000000000e+00, -8.940805313116664e-03, -9.709930795041668e-03, 0.000000000000000e+00, -8.940805313116664e-03, -1.142810445035785e+00, 0.000000000000000e+00, -1.061366830933668e+00, -1.126870853301142e+00, 0.000000000000000e+00, -1.034748962790838e+00, -4.630065611876442e-03, 0.000000000000000e+00, -4.706845337287130e-03, -2.065952153271478e+00, 0.000000000000000e+00, -2.018761891371288e+00, -9.944275586317480e-01, 0.000000000000000e+00, -4.714689437164261e+00, -9.944275586282144e-01, 0.000000000000000e+00, -4.714689437146180e+00, -1.342255834884383e+04, 0.000000000000000e+00, -1.126175629669660e+04, -1.189469916381897e+04, 0.000000000000000e+00, -9.769224985568932e+03, -8.235161747192210e+01, 0.000000000000000e+00, -7.117583447584562e+01, -5.513610148368812e+04, 0.000000000000000e+00, -5.746380573466147e+04, -1.830899558847513e+04, 0.000000000000000e+00, -1.101160335313463e+05, -1.830899558842512e+04, 0.000000000000000e+00, -1.101160335313462e+05, -8.133227587650086e-07, 0.000000000000000e+00, -9.349069789311632e-07, -1.539014007582655e-06, 0.000000000000000e+00, -1.549534433907414e-06, -1.139054163430583e-09, 0.000000000000000e+00, -9.007438919169541e-10, -5.787002380841313e-07, 0.000000000000000e+00, -5.630584934431434e-07, -5.558054794843709e-07, 0.000000000000000e+00, -5.624269776483142e-07, -2.599061627564490e-06, 0.000000000000000e+00, -2.853908330944864e-06, -3.594994101606279e-09, 0.000000000000000e+00, -4.879466563399389e-09, -7.677193929712008e-05, 0.000000000000000e+00, -7.687984538887524e-05, -1.153001860640711e-04, 0.000000000000000e+00, -1.153251564811650e-04, -1.144271794520629e-04, 0.000000000000000e+00, -1.133795786900022e-04, -1.135516781878985e-04, 0.000000000000000e+00, -1.139666708596128e-04, -1.666634647616076e-04, 0.000000000000000e+00, -1.598148598698009e-04, -3.439979313188733e-03, 0.000000000000000e+00, -2.991680873945072e-03, -4.804263215311334e-03, 0.000000000000000e+00, -4.754583176238040e-03, -4.407892591066563e-03, 0.000000000000000e+00, -4.580886766133510e-03, -2.798449390995998e-02, 0.000000000000000e+00, -2.493822518645457e-02, -1.695162690046175e-02, 0.000000000000000e+00, -2.024343497675913e-02, -1.337333407500691e-02, 0.000000000000000e+00, -1.606440931614457e-02, -8.196051205883025e-03, 0.000000000000000e+00, -8.255165112068617e-03, -3.005776298834569e-01, 0.000000000000000e+00, -2.976585135568339e-01, -1.503612703633713e-04, 0.000000000000000e+00, -1.507107799977039e-04, -1.910747723131077e-04, 0.000000000000000e+00, -1.914409660173345e-04, -4.660752940180952e+00, 0.000000000000000e+00, -4.308859411803840e+00, -6.143058258654658e+00, 0.000000000000000e+00, -6.031796765110328e+00, -4.508323794409577e+04, 0.000000000000000e+00, -4.131398964837762e+04, -4.658522460670948e+02, 0.000000000000000e+00, -4.585051043392631e+02, -1.241908369996611e-07, 0.000000000000000e+00, -2.180847581985660e-09, -9.985118471351421e-03, 0.000000000000000e+00, -6.394694630446947e-03, -8.485682389687774e+04, 0.000000000000000e+00, -4.691347185034955e+04, -4.873539722479056e-06, 0.000000000000000e+00, -2.346095024454872e-05, -1.994825986147165e-05, 0.000000000000000e+00, -1.957788474447618e-05, -6.455188445751507e-12, 0.000000000000000e+00, -6.397615277485198e-12, -2.154461837776453e-14, 0.000000000000000e+00, -2.127890397300213e-14, -2.916002233710117e-04, 0.000000000000000e+00, -3.074959750008415e-04, -7.405430553144870e-11, 0.000000000000000e+00, -5.388308944098050e-11, -4.835541359141639e-06, 0.000000000000000e+00, -4.768887386130496e-06, -7.715103964021224e-14, 0.000000000000000e+00, -7.265621758015389e-14, -3.777734530688547e-02, 0.000000000000000e+00, -3.768733197484044e-02, -6.772697285879089e-03, 0.000000000000000e+00, -6.594212470040975e-03, -4.065982481867375e-03, 0.000000000000000e+00, -2.700766841522620e-03, -2.317255800777164e-02, 0.000000000000000e+00, -2.290609145710633e-02, -3.687328553481980e-03, 0.000000000000000e+00, -3.666057257563257e-03, -1.855638362685339e-03, 0.000000000000000e+00, -1.875146294905240e-03, -1.444313607611207e-05, 0.000000000000000e+00, -1.396879742122628e-05, -4.239220715736340e-06, 0.000000000000000e+00, -4.152297841488803e-06, -2.945399131414116e-04, 0.000000000000000e+00, -2.562639649903723e-04, -1.052424496976550e-01, 0.000000000000000e+00, -1.045947828275025e-01, -1.382492425607172e-01, 0.000000000000000e+00, -1.369132503158461e-01, -4.803022795231658e-02, 0.000000000000000e+00, -4.693311121658177e-02, -1.687872315473257e-02, 0.000000000000000e+00, -2.780752676351586e-02, -3.590052780815704e+01, 0.000000000000000e+00, -3.033831528151569e+01, -1.750597551336066e-01, 0.000000000000000e+00, -1.753728957691508e-01, -6.248555804870881e-04, 0.000000000000000e+00, -8.914225371639611e-04, -1.447514537253846e+01, 0.000000000000000e+00, -1.423370058185665e+01, -5.046204912137159e-05, 0.000000000000000e+00, -1.718229686683089e-04, -3.107781521885064e-02, 0.000000000000000e+00, -6.662119662078672e-03, -6.625233471961805e-05, 0.000000000000000e+00, -8.198620394187002e-05, -8.005346640190842e+00, 0.000000000000000e+00, -4.482970149314104e-01, -2.752711924908017e-04, 0.000000000000000e+00, -6.738476290354593e-04, -9.097306672695801e-05, 0.000000000000000e+00, -1.709465970493656e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_br89_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [-2.249658933005914e-04, -2.249602143739438e-04, -2.249628345254300e-04, -2.249579970152055e-04, -2.249582076442233e-04, -2.249498880966044e-04, -2.249926098295924e-04, -2.249938071798111e-04, -2.249638871870620e-04, -2.249799716430946e-04, -2.249638871870620e-04, -2.249799716430946e-04, -2.040244751105643e-03, -2.040731840572821e-03, -2.040379166384186e-03, -2.040875229838029e-03, -2.043641717052354e-03, -2.044394079990709e-03, -2.039749165795209e-03, -2.040320548009959e-03, -2.040022020082411e-03, -2.043231869171425e-03, -2.040022020082411e-03, -2.043231869171425e-03, -7.148090509885800e-03, -7.297381951058161e-03, -7.101682889256367e-03, -7.278561107505069e-03, -6.508800664746892e-03, -6.342190199344348e-03, -6.505429395551827e-03, -6.583543264809917e-03, -7.479133918456143e-03, -5.659023759410298e-03, -7.479133918456143e-03, -5.659023759410298e-03, -1.388161481063546e-02, -1.445609101678293e-02, -1.420025627318535e-02, -1.485301654759400e-02, -5.221284280823173e-03, -5.861367748944173e-03, -1.140700520105866e-02, -1.161432476961551e-02, -1.375190264210280e-02, -1.006717970238846e-02, -1.375190264205394e-02, -1.006717970234986e-02, -6.632219914471171e-03, -6.676694492506975e-03, -6.762578129327552e-03, -6.828009618907106e-03, -8.049294090900576e-03, -8.192718779112075e-03, -5.917800276357067e-03, -5.864430685937236e-03, -6.422769419630738e-03, -7.118513934192168e-03, -6.422769419613198e-03, -7.118513934192156e-03, -2.847842554254516e-04, -3.271216768460032e-04, -5.391863747478489e-04, -5.424718485582896e-04, -3.988524299992716e-07, -3.151746326838536e-07, -2.027357169012368e-04, -1.971137707070696e-04, -1.946702059916321e-04, -1.968452592334422e-04, -9.103182338042317e-04, -9.988466904313391e-04, -6.683080220166422e-08, -9.069534564141132e-08, -1.458954373153604e-03, -1.459812519452248e-03, -2.103927695828983e-03, -2.115321406145094e-03, -2.128394208850311e-03, -2.120328542508241e-03, -2.166808725313760e-03, -2.146280854440547e-03, -3.180295134334351e-03, -3.009718292255621e-03, -1.729910899335775e-03, -1.492551114682891e-03, -3.083097843631881e-03, -3.055373532898282e-03, -1.654511588836589e-03, -1.916142281544143e-03, -1.186272454761155e-02, -1.166055621423787e-02, -9.590031885093494e-03, -9.824011054642631e-03, -7.565686818285862e-03, -7.795956313209349e-03, -1.524270488922142e-05, -1.579605875179678e-05, -3.861138347481551e-03, -3.881172744340614e-03, -2.070099670533364e-07, -2.427662054269835e-07, -3.354177578299981e-03, -3.356078443818347e-03, -1.298538200057080e-02, -1.427125142359323e-02, -1.711525136908349e-02, -1.997774351492921e-02, -2.042924738599996e-03, -2.101284340638513e-03, -4.453856685660731e-05, -4.585679256732286e-05, -4.964634154754583e-15, -1.035510341671445e-16, -4.496385328013804e-06, -2.933030761478469e-06, -3.614145341122095e-03, -5.175257275043263e-03, -2.075694106497754e-13, -2.588093543206786e-12, -1.007951221060023e-05, -1.000753392379024e-05, -3.205699583494992e-12, -3.214470012959369e-12, -1.076455193092213e-14, -1.075677249404266e-14, -1.464335874144589e-04, -1.562145677905166e-04, -3.709410015282595e-11, -2.730605229997241e-11, -2.422142158808109e-06, -2.416704196515330e-06, -3.592836868333861e-14, -3.417183822665500e-14, -1.111139747119158e-02, -1.122961718395667e-02, -2.287013676688622e-03, -2.256521125189034e-03, -1.567508928840763e-03, -1.052216032568083e-03, -8.358368722629777e-03, -8.354671958253613e-03, -1.330023713443592e-03, -1.337142385224070e-03, -1.369713037269118e-03, -1.390889887990586e-03, -3.737317075038470e-07, -3.677727402090574e-07, -1.887924690053639e-07, -1.905413497300044e-07, -3.043385593426373e-05, -2.692058413154754e-05, -7.215386811071097e-03, -7.163396625840204e-03, -9.478321383423614e-03, -9.376795752449908e-03, -1.098130500263383e-02, -1.095367136964796e-02, -1.558919324178315e-06, -2.621384413480008e-06, -8.070158782942601e-03, -7.527876164033200e-03, -1.597342536746737e-02, -1.673686734804919e-02, -5.385635113739096e-07, -9.044901240463807e-07, -1.247613906785723e-02, -1.444235597395733e-02, -7.297931838251013e-11, -2.765128444379367e-10, -5.785925423295034e-11, -1.248846935918189e-11, -1.039126925386665e-12, -1.547104184647064e-12, -6.068383025400650e-03, -3.567738811615960e-04, -9.963724302996720e-12, -5.723982037696172e-11, -3.292863847754997e-12, -1.452101645216185e-11]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_br89_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [7.198908585618891e-04, 7.198726859966217e-04, 7.198810704813745e-04, 7.198655904486577e-04, 7.198662644615151e-04, 7.198396419091344e-04, 7.199763514546952e-04, 7.199801829753960e-04, 7.198844389985985e-04, 7.199359092579014e-04, 7.198844389985985e-04, 7.199359092579014e-04, 6.528783203538058e-03, 6.530341889833021e-03, 6.529213332429402e-03, 6.530800735481687e-03, 6.539653494567530e-03, 6.542061055970282e-03, 6.527197330544673e-03, 6.529025753631878e-03, 6.528070464263714e-03, 6.538341981348557e-03, 6.528070464263714e-03, 6.538341981348557e-03, 2.287388963163455e-02, 2.335162224338612e-02, 2.272538524562037e-02, 2.329139554401624e-02, 2.082816212719005e-02, 2.029500863790190e-02, 2.081737406576587e-02, 2.106733844739174e-02, 2.393322853905967e-02, 1.810887603011297e-02, 2.393322853905967e-02, 1.810887603011297e-02, 4.442116739403346e-02, 4.625949125370540e-02, 4.544082007419317e-02, 4.752965295230081e-02, 1.670810969863415e-02, 1.875637679662136e-02, 3.650241664338771e-02, 3.716583926276967e-02, 4.400608845472897e-02, 3.221497504764308e-02, 4.400608845457259e-02, 3.221497504751954e-02, 2.122310372630775e-02, 2.136542237602232e-02, 2.164025001384816e-02, 2.184963078050275e-02, 2.575774109088183e-02, 2.621670009315863e-02, 1.893696088434261e-02, 1.876617819499916e-02, 2.055286214281837e-02, 2.277924458941494e-02, 2.055286214276223e-02, 2.277924458941490e-02, 9.113096173614453e-04, 1.046789365907210e-03, 1.725396399193115e-03, 1.735909915386526e-03, 1.276327775997610e-06, 1.008558824588213e-06, 6.487542940839576e-04, 6.307640662626228e-04, 6.229446591732273e-04, 6.299048295470142e-04, 2.913018348173543e-03, 3.196309409380290e-03, 2.138585670453457e-07, 2.902251060525162e-07, 4.668653994091534e-03, 4.671400062247195e-03, 6.732568626652748e-03, 6.769028499664298e-03, 6.810861468320997e-03, 6.785051336026374e-03, 6.933787921004029e-03, 6.868098734209749e-03, 1.017694442986992e-02, 9.631098535217984e-03, 5.535714877874480e-03, 4.776163566985253e-03, 9.865913099622021e-03, 9.777195305274504e-03, 5.294437084277083e-03, 6.131655300941253e-03, 3.796071855235691e-02, 3.731377988556117e-02, 3.068810203229915e-02, 3.143683537485643e-02, 2.421019781851476e-02, 2.494706020226992e-02, 4.877665564551121e-05, 5.054738800575183e-05, 1.235564271194097e-02, 1.241975278188997e-02, 6.624318945709950e-07, 7.768518573664004e-07, 1.073336825055995e-02, 1.073945102021871e-02, 4.155322240182655e-02, 4.566800455549833e-02, 5.476880438106720e-02, 6.392877924777345e-02, 6.537359163519990e-03, 6.724109890043246e-03, 1.425234139411434e-04, 1.467417362154332e-04, 1.588682938221422e-14, 3.313635330480043e-16, 1.438843304964934e-05, 9.385698436732393e-06, 1.156526509159071e-02, 1.656082328013844e-02, 6.642221147746174e-13, 8.281899328527009e-12, 3.225443907392074e-05, 3.202410855612876e-05, 1.025823866799636e-11, 1.028630404119918e-11, 3.444656615340887e-14, 3.442167197667951e-14, 4.685874797262687e-04, 4.998866169296530e-04, 1.187011204893162e-10, 8.737936735745355e-11, 7.750854908185948e-06, 7.733453428849057e-06, 1.149707796598304e-13, 1.093498822301561e-13, 3.555647190781314e-02, 3.593477498866132e-02, 7.318443765403586e-03, 7.220867600604907e-03, 5.016028572290457e-03, 3.367091304217875e-03, 2.674677991241529e-02, 2.673495026641154e-02, 4.256075883019496e-03, 4.278855632717024e-03, 4.383081719261178e-03, 4.450847641569873e-03, 1.195941464012890e-06, 1.176872768669158e-06, 6.041359008173904e-07, 6.097323191357883e-07, 9.738833898964348e-05, 8.614586922095073e-05, 2.308923779542750e-02, 2.292286920268864e-02, 3.033062842695557e-02, 3.000574640783969e-02, 3.514017600842827e-02, 3.505174838287348e-02, 4.988541837372093e-06, 8.388430123135178e-06, 2.582450810541631e-02, 2.408920372490624e-02, 5.111496117589563e-02, 5.355797551375741e-02, 1.723403236395710e-06, 2.894368396950418e-06, 3.992364501714314e-02, 4.621553911666345e-02, 2.335338187858216e-10, 8.848411022083448e-10, 1.851496135106440e-10, 3.996310197113019e-11, 3.325206153066232e-12, 4.950733387099331e-12, 1.941882568128212e-02, 1.141676419717118e-03, 3.188391774755412e-11, 1.831674252283129e-10, 1.053716429849299e-11, 4.646725265352852e-11]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
