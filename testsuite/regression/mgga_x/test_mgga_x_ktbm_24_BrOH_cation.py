
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_24_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_24", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.501160815021636e+01, -2.501167504486633e+01, -2.501210890374129e+01, -2.501111690813660e+01, -2.501161724320745e+01, -2.501161724320745e+01, -3.404242408904194e+00, -3.404421390781021e+00, -3.409459233306358e+00, -3.410256479208454e+00, -3.408767227430494e+00, -3.408767227430494e+00, -5.585520949504179e-01, -5.576734130603218e-01, -5.379640249237418e-01, -5.518172380180288e-01, -5.492785453252720e-01, -5.492785453252720e-01, -1.508247793186932e-01, -1.544907437332965e-01, -5.800310036745850e-01, -9.993233689992734e-02, -1.399429254685901e-01, -1.399429254685899e-01, -4.203560155176509e-03, -4.429062381719077e-03, -2.469075594494978e-02, -2.439014213760954e-03, -3.392482302686831e-03, -3.392482302686831e-03, -6.094064448787870e+00, -6.093900735013191e+00, -6.094126510719017e+00, -6.093979258468780e+00, -6.093947234338446e+00, -6.093947234338446e+00, -2.060390688659390e+00, -2.098319776509135e+00, -2.045487501990335e+00, -2.079966954334281e+00, -2.088492694511970e+00, -2.088492694511970e+00, -6.385701781182933e-01, -6.862849183348417e-01, -5.517071969681854e-01, -5.660532147520492e-01, -6.544669092174831e-01, -6.544669092174831e-01, -6.630778418313071e-02, -1.391231447593022e-01, -6.116814944230259e-02, -1.942083195321954e+00, -8.034786086580381e-02, -8.034786086580381e-02, -1.899721925951225e-03, -2.397567334283637e-03, -1.827503915458292e-03, -4.047631158951793e-02, -2.289229562251737e-03, -2.289229562251738e-03, -6.607205014398115e-01, -6.665458463978609e-01, -6.647053120191692e-01, -6.630037557730202e-01, -6.638706616165591e-01, -6.638706616165591e-01, -6.357063517854974e-01, -5.637991181883019e-01, -5.993684881121095e-01, -6.220526996049551e-01, -6.114910595744660e-01, -6.114910595744659e-01, -7.071804919741216e-01, -1.884256734303372e-01, -2.415215265083782e-01, -3.470951067831450e-01, -2.957383290319971e-01, -2.957383290319970e-01, -4.856349823603310e-01, -2.351869198301459e-02, -3.233279386373834e-02, -3.499237899548568e-01, -5.231661851591662e-02, -5.231661851591664e-02, -5.999866048855282e-03, -6.413683588145742e-04, -1.336225336564708e-03, -4.886868404130323e-02, -2.102956932069841e-03, -2.102956932069838e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_24_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_24", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.977918584941943e+01, -2.977838329542618e+01, -2.977926723596894e+01, -2.977844252822294e+01, -2.977945738845755e+01, -2.977873479998650e+01, -2.977853270815861e+01, -2.977755754045592e+01, -2.977923500889261e+01, -2.977797692371702e+01, -2.977923500889261e+01, -2.977797692371702e+01, -5.085581898177473e+00, -5.085275000546219e+00, -5.085729173555620e+00, -5.085354168801534e+00, -5.088392951151634e+00, -5.088882677031669e+00, -5.088444034438821e+00, -5.088391228019777e+00, -5.084451822475084e+00, -5.090852965927914e+00, -5.084451822475084e+00, -5.090852965927914e+00, -8.437564792667681e-01, -8.517549500447574e-01, -8.412855661877252e-01, -8.504072244752366e-01, -8.062383528429723e-01, -8.005443117264697e-01, -8.255511491600762e-01, -8.312433880422060e-01, -8.585302185368084e-01, -7.902825362417290e-01, -8.585302185368084e-01, -7.902825362417290e-01, -2.184450038820677e-01, -2.396418507113828e-01, -2.222510469079090e-01, -2.465300538698774e-01, -8.010924462911396e-01, -8.625315483092755e-01, -1.382995271405139e-01, -1.453386848250118e-01, -2.274384059663510e-01, -9.356465259097606e-02, -2.274384059663507e-01, -9.356465259097596e-02, -5.714133671476329e-03, -6.076133393773823e-03, -5.983532724587387e-03, -6.415478603391755e-03, -3.320558576703436e-02, -3.516095993911257e-02, -3.401226729379163e-03, -3.349669956956023e-03, -5.085702467078020e-03, -2.848927894249648e-03, -5.085702467078015e-03, -2.848927894249647e-03, -7.246566035847117e+00, -7.244584400964519e+00, -7.249475664615314e+00, -7.247394374872568e+00, -7.246654320335800e+00, -7.244628209416916e+00, -7.249153461457227e+00, -7.247183449485008e+00, -7.248106648859372e+00, -7.246000687158311e+00, -7.248106648859372e+00, -7.246000687158311e+00, -2.953865382720171e+00, -2.955458343548446e+00, -2.982515986932786e+00, -2.982892889217061e+00, -2.943675704719117e+00, -2.948109391731980e+00, -2.970344857066010e+00, -2.974555210702859e+00, -2.977502634032271e+00, -2.971210114993353e+00, -2.977502634032271e+00, -2.971210114993353e+00, -8.600055807967424e-01, -8.565439448948322e-01, -9.448440488892859e-01, -9.444761332546154e-01, -7.821182092047620e-01, -8.156761745571279e-01, -8.325278422210008e-01, -8.597025430669362e-01, -8.861622276519178e-01, -8.504071264277822e-01, -8.861622276519178e-01, -8.504071264277818e-01, -9.205911257529932e-02, -9.283424314076943e-02, -2.057855645572432e-01, -2.068008149953768e-01, -8.219520918914798e-02, -8.745306339031117e-02, -2.895287900352961e+00, -2.894031373803460e+00, -1.089326878043621e-01, -1.194268657846668e-01, -1.089326878043621e-01, -1.194268657846668e-01, -2.497562858357995e-03, -2.599750640549589e-03, -3.243226378384281e-03, -3.287167149181788e-03, -2.446446578161403e-03, -2.589552582290607e-03, -5.552864550510768e-02, -5.641011765420236e-02, -2.428633018277114e-03, -3.461505927230942e-03, -2.428633018277115e-03, -3.461505927230942e-03, -8.651184511972578e-01, -8.687424357944812e-01, -8.418242108402294e-01, -8.454967582345090e-01, -8.494323203181313e-01, -8.531501993122780e-01, -8.562589007155446e-01, -8.598650161662890e-01, -8.527957952103643e-01, -8.564570712565969e-01, -8.527957952103643e-01, -8.564570712565969e-01, -8.502499559300012e-01, -8.529550364173175e-01, -7.233457223336535e-01, -7.253772562661560e-01, -7.311112609498718e-01, -7.334027691627873e-01, -7.570068967362849e-01, -7.596796114856456e-01, -7.409372392594669e-01, -7.431535727218784e-01, -7.409372392594669e-01, -7.431535727218782e-01, -9.959164233507862e-01, -9.960172249086611e-01, -2.855921246254072e-01, -2.879039540879201e-01, -3.646868457628782e-01, -3.708417621676882e-01, -5.084425170576070e-01, -5.109895270021885e-01, -4.422175113851737e-01, -4.423384821926820e-01, -4.422175113851735e-01, -4.423384821926817e-01, -6.724603130190187e-01, -6.767375014864365e-01, -3.280179518414152e-02, -3.299197820814614e-02, -4.396573919101381e-02, -4.550877104026976e-02, -4.899308945504707e-01, -4.990589262132544e-01, -7.052573040168608e-02, -7.525156454735374e-02, -7.052573040168605e-02, -7.525156454735371e-02, -8.014759533217454e-03, -8.295705309515983e-03, -8.495446468903279e-04, -8.454788535597093e-04, -1.800844906249040e-03, -1.914954698814384e-03, -6.772463878114059e-02, -6.966177252772665e-02, -2.311880839623536e-03, -3.172436697125905e-03, -2.311880839623536e-03, -3.172436697125899e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_24_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_24", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.307932586060697e-08, 0.000000000000000e+00, -4.308246184715506e-08, -4.307918319339317e-08, 0.000000000000000e+00, -4.308235755854497e-08, -4.307847489646264e-08, 0.000000000000000e+00, -4.308141235948066e-08, -4.308012051121210e-08, 0.000000000000000e+00, -4.308350123737334e-08, -4.307926454218303e-08, 0.000000000000000e+00, -4.308247909628471e-08, -4.307926454218303e-08, 0.000000000000000e+00, -4.308247909628471e-08, -3.406644113386615e-05, 0.000000000000000e+00, -3.406248108236494e-05, -3.407564791338596e-05, 0.000000000000000e+00, -3.406878745017120e-05, -3.425766381107864e-05, 0.000000000000000e+00, -3.428938781079493e-05, -3.417062480386534e-05, 0.000000000000000e+00, -3.417098704650851e-05, -3.406754609573173e-05, 0.000000000000000e+00, -3.433244310192054e-05, -3.406754609573173e-05, 0.000000000000000e+00, -3.433244310192054e-05, -1.018714418607778e-02, 0.000000000000000e+00, -1.047778034336044e-02, -1.011630914237180e-02, 0.000000000000000e+00, -1.044003610684679e-02, -9.062537704747535e-03, 0.000000000000000e+00, -8.903123521808625e-03, -9.432880043553091e-03, 0.000000000000000e+00, -9.664773862623738e-03, -1.050518360889933e-02, 0.000000000000000e+00, -8.005987572403625e-03, -1.050518360889933e-02, 0.000000000000000e+00, -8.005987572403625e-03, -6.928392871013616e-01, 0.000000000000000e+00, -8.018793305089323e-01, -7.361788142210141e-01, 0.000000000000000e+00, -8.601070729634356e-01, -2.453886100182136e-03, 0.000000000000000e+00, -2.915539439856598e-03, -3.153904902724572e-01, 0.000000000000000e+00, -3.202490010814321e-01, -6.052476200555386e-01, 0.000000000000000e+00, -2.318454689281066e-01, -6.052476200555380e-01, 0.000000000000000e+00, -2.318454689281073e-01, 2.532732112719105e+02, 0.000000000000000e+00, 2.280198877194096e+02, 2.307611178272874e+02, 0.000000000000000e+00, 2.061736136947582e+02, 3.623507483909552e+00, 0.000000000000000e+00, 3.452722327826693e+00, 4.621514230896499e+02, 0.000000000000000e+00, 5.040152799982961e+02, 2.940473372921792e+02, 0.000000000000000e+00, 7.011626150059682e+02, 2.940473372921781e+02, 0.000000000000000e+00, 7.011626150059676e+02, -1.318987947583543e-05, 0.000000000000000e+00, -1.320270410512305e-05, -1.319649025114874e-05, 0.000000000000000e+00, -1.320910512592886e-05, -1.319046110183136e-05, 0.000000000000000e+00, -1.320307902904191e-05, -1.319612285397233e-05, 0.000000000000000e+00, -1.320888321952832e-05, -1.319312129844411e-05, 0.000000000000000e+00, -1.320590549001159e-05, -1.319312129844411e-05, 0.000000000000000e+00, -1.320590549001159e-05, -2.540796563688485e-04, 0.000000000000000e+00, -2.552665436963233e-04, -2.588631400908341e-04, 0.000000000000000e+00, -2.599063043092502e-04, -2.470654275699867e-04, 0.000000000000000e+00, -2.502777753623524e-04, -2.516252607823747e-04, 0.000000000000000e+00, -2.547810454326598e-04, -2.617506771229396e-04, 0.000000000000000e+00, -2.585635422484387e-04, -2.617506771229396e-04, 0.000000000000000e+00, -2.585635422484387e-04, -5.919568895980972e-02, 0.000000000000000e+00, -6.048749202700477e-02, -5.446151462209303e-02, 0.000000000000000e+00, -5.489187759897429e-02, -6.373405207137499e-02, 0.000000000000000e+00, -6.443392717743418e-02, -7.273467614843999e-02, 0.000000000000000e+00, -6.877213391904023e-02, -5.559212254218157e-02, 0.000000000000000e+00, -6.343604335857611e-02, -5.559212254218157e-02, 0.000000000000000e+00, -6.343604335857611e-02, 6.304908188958856e-02, 0.000000000000000e+00, 3.227768878721736e-02, -2.390310334847188e-01, 0.000000000000000e+00, -2.394086013879685e-01, 1.135250005491064e-01, 0.000000000000000e+00, 9.741421421969661e-02, -5.682100390496815e-04, 0.000000000000000e+00, -5.694221667616060e-04, -1.005140221579206e-01, 0.000000000000000e+00, -2.926449674743489e-01, -1.005140221579204e-01, 0.000000000000000e+00, -2.926449674743491e-01, 1.678620445507223e+02, 0.000000000000000e+00, 1.885168666039262e+02, 3.395315117701524e+02, 0.000000000000000e+00, 2.850507522515846e+02, 2.308465199700008e+03, 0.000000000000000e+00, 2.118375497887861e+03, 6.747487422592460e-01, 0.000000000000000e+00, 1.005711123566133e+00, -6.524262158305758e+01, 0.000000000000000e+00, 1.155361865251211e+03, -6.524262158305510e+01, 0.000000000000000e+00, 1.155361865251212e+03, -8.817671990721036e-02, 0.000000000000000e+00, -8.689354833645326e-02, -8.784456938577936e-02, 0.000000000000000e+00, -8.660300765913553e-02, -8.802964683012673e-02, 0.000000000000000e+00, -8.677240523061074e-02, -8.813097703091170e-02, 0.000000000000000e+00, -8.685845857369277e-02, -8.808653438669029e-02, 0.000000000000000e+00, -8.682128566764322e-02, -8.808653438669029e-02, 0.000000000000000e+00, -8.682128566764322e-02, -9.764959983844171e-02, 0.000000000000000e+00, -9.646977042726063e-02, -1.033639200506314e-01, 0.000000000000000e+00, -1.026923833561189e-01, -1.096886723780249e-01, 0.000000000000000e+00, -1.087215419335270e-01, -1.095815617123398e-01, 0.000000000000000e+00, -1.082706876661713e-01, -1.104879308214732e-01, 0.000000000000000e+00, -1.093124931003540e-01, -1.104879308214732e-01, 0.000000000000000e+00, -1.093124931003540e-01, -4.262030895383921e-02, 0.000000000000000e+00, -4.319011705847717e-02, -2.486666001379951e-01, 0.000000000000000e+00, -2.500396453024135e-01, -2.669125316270755e-01, 0.000000000000000e+00, -2.731391689445425e-01, -2.626160375833158e-01, 0.000000000000000e+00, -2.580503804946351e-01, -2.962737171487536e-01, 0.000000000000000e+00, -2.999538858090339e-01, -2.962737171487536e-01, 0.000000000000000e+00, -2.999538858090341e-01, -1.180656586104851e-01, 0.000000000000000e+00, -1.197405020292196e-01, 4.710912382480414e+00, 0.000000000000000e+00, 4.470692290528868e+00, 1.705705936957998e+00, 0.000000000000000e+00, 1.622770719845949e+00, -3.939989518246580e-01, 0.000000000000000e+00, -4.338627355447826e-01, 4.155063203236985e-01, 0.000000000000000e+00, 2.687541762665300e-01, 4.155063203236975e-01, 0.000000000000000e+00, 2.687541762665293e-01, 4.349262723561142e+01, 0.000000000000000e+00, 3.762639377107819e+01, -2.827082131641659e+03, 0.000000000000000e+00, -5.530496362608981e+03, 3.379445808746651e+03, 0.000000000000000e+00, 3.057432181025847e+03, 5.789594529827614e-01, 0.000000000000000e+00, 7.668163658864692e-01, 2.481044696359231e+02, 0.000000000000000e+00, 1.398555445591520e+03, 2.481044696359229e+02, 0.000000000000000e+00, 1.398555445591521e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_24_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_24", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.895169608990996e-03, 2.895197615503551e-03, 2.895134534216422e-03, 2.895172139051674e-03, 2.895058636995119e-03, 2.895053165693269e-03, 2.895454059589073e-03, 2.895557538501844e-03, 2.895146956869783e-03, 2.895382646189267e-03, 2.895146956869783e-03, 2.895382646189267e-03, 1.211388577391308e-02, 1.210507053722630e-02, 1.211721749176582e-02, 1.210664189462748e-02, 1.217484296478522e-02, 1.218325527402414e-02, 1.218155207978683e-02, 1.217522937178991e-02, 1.210905090317145e-02, 1.222731935066951e-02, 1.210905090317145e-02, 1.222731935066951e-02, 2.329960238938629e-02, 2.401846926267094e-02, 2.313180380625247e-02, 2.389535790292898e-02, 2.039691654114093e-02, 2.036286151270978e-02, 2.298534125839957e-02, 2.368215886478873e-02, 2.382797334064577e-02, 2.091126317565214e-02, 2.382797334064577e-02, 2.091126317565214e-02, 6.130139980545785e-02, 8.368442534584784e-02, 6.523815347763805e-02, 9.165509018569024e-02, 4.395961753141756e-03, 6.383373713264439e-03, 1.084367818545354e-02, 1.463779916489762e-02, 5.917333820357488e-02, 2.469076967339454e-03, 5.917333820357485e-02, 2.469076967339431e-03, -3.942794684475234e-04, -4.287218737215524e-04, -4.098311889673720e-04, -4.539219288802433e-04, -8.835246035261747e-04, -9.953209977746919e-04, -1.400195392002797e-04, -1.479760722694401e-04, -3.172228753898328e-04, -1.145941523670676e-04, -3.172228753898310e-04, -1.145941523670676e-04, 1.082091784722698e-02, 1.082428707307687e-02, 1.079237875749751e-02, 1.079669519010467e-02, 1.081932117591110e-02, 1.082333015684309e-02, 1.079483480915343e-02, 1.079826657520103e-02, 1.080631387798547e-02, 1.081043535560297e-02, 1.080631387798547e-02, 1.081043535560297e-02, 2.509979848723003e-02, 2.525121029517243e-02, 2.604844421318582e-02, 2.616668484656119e-02, 2.476094808735049e-02, 2.500441706818071e-02, 2.564602950362613e-02, 2.589251512579746e-02, 2.586043113482753e-02, 2.578042412147048e-02, 2.586043113482753e-02, 2.578042412147048e-02, 9.765512164335487e-02, 9.870259033862276e-02, 7.833659442765475e-02, 7.809475081714276e-02, 8.306165114055315e-02, 9.201916411440779e-02, 7.997845890546273e-02, 8.275926854622853e-02, 9.629861520822861e-02, 9.757274860924005e-02, 9.629861520822861e-02, 9.757274860924001e-02, 1.734382003724690e-03, 1.908847041888068e-03, 2.622519337257403e-02, 2.636058694825640e-02, 1.034757637306473e-03, 1.458129659116039e-03, 2.419680200108177e-02, 2.420906629129512e-02, 5.351911638267077e-03, 1.110610107654458e-02, 5.351911638267116e-03, 1.110610107654456e-02, -1.543490884414645e-05, -2.007162563553084e-05, -8.113789203944331e-05, -6.962016450796570e-05, -2.593332765817290e-04, -2.806796507785955e-04, -2.283235329473125e-04, -5.910253192382208e-04, 4.868898758369371e-06, -3.962954169468411e-04, 4.868898758368042e-06, -3.962954169468378e-04, 6.896774271303693e-02, 6.847235670319050e-02, 7.909308512228509e-02, 7.844712257672191e-02, 7.557694177579796e-02, 7.495820122119760e-02, 7.260258403025745e-02, 7.207407355162668e-02, 7.409322739302529e-02, 7.352020930404647e-02, 7.409322739302529e-02, 7.352020930404647e-02, 7.021513752251336e-02, 6.979975977250265e-02, 1.346957792054909e-01, 1.345322314184974e-01, 1.289769591352803e-01, 1.281881810913024e-01, 1.089671260229672e-01, 1.083430113569243e-01, 1.202185890962502e-01, 1.196473817404166e-01, 1.202185890962502e-01, 1.196473817404166e-01, 7.456928742558548e-02, 7.457273755156278e-02, 5.019267461464468e-02, 5.105911208698224e-02, 7.834013230161872e-02, 8.194950940941451e-02, 1.212672037148793e-01, 1.204055411094607e-01, 1.133965985663348e-01, 1.143319575030047e-01, 1.133965985663348e-01, 1.143319575030046e-01, 1.195413413083652e-01, 1.227622602092496e-01, -1.196690142225036e-03, -1.142412353716160e-03, -8.202296601958544e-04, -8.407832344374967e-04, 1.417626421786307e-01, 1.637280220449100e-01, 5.067987598169465e-04, 1.513917158724684e-03, 5.067987598169184e-04, 1.513917158724686e-03, -1.536055975822262e-04, -1.450814001704075e-04, 7.477303686630490e-06, 1.104021632902215e-05, -1.594690664897323e-04, -1.731405714461461e-04, 3.173651617426629e-04, 1.289257133719519e-04, -1.727342735933413e-05, -3.692591688116715e-04, -1.727342735933217e-05, -3.692591688116727e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
