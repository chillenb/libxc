
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_24_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_24", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.184233940543622e+01, -2.184246622705378e+01, -2.184302231806527e+01, -2.353541244452489e+01, -2.353617318255461e+01, -2.523040350444908e+01, -3.447256462526053e+00, -3.896668476319147e+00, -3.900818062310421e+00, -3.899497656148911e+00, -3.899232060382402e+00, -3.450273491991417e+00, -5.011102048802268e-01, -5.741495897340336e-01, -6.077582823259811e-01, -5.530643568807309e-01, -4.859373083214529e-01, -6.223624843361111e-01, -1.394768955348204e-01, -1.430930623471136e-01, -6.042305164288958e-01, -1.007017499693970e-01, -1.417601169700014e-01, -1.412491116251398e-01, -4.201014112359985e-03, -4.397942402319653e-03, -2.431702250683367e-02, -2.421654342758743e-03, -3.380644006264568e-03, -3.380644006264568e-03, -6.098030695329596e+00, -6.097822584681078e+00, -6.098010353313097e+00, -6.097827430286239e+00, -5.793584249984963e+00, -5.793856518811753e+00, -2.119112888343520e+00, -2.150402531987831e+00, -2.095176804879303e+00, -2.123324914094398e+00, -1.896101781762277e+00, -2.148076081134278e+00, -6.229339371698726e-01, -7.521005790201187e-01, -6.194909103256453e-01, -6.631208552301751e-01, -6.435386260436734e-01, -7.035158385335099e-01, -6.611517460411073e-02, -1.299491662013509e-01, -6.093406122168589e-02, -2.266801407224746e+00, -8.044412203309198e-02, -8.044412203309197e-02, -1.857888039370226e-03, -2.367296303970940e-03, -1.812991756396418e-03, -3.952235712990833e-02, -2.277470788747344e-03, -2.277470788747345e-03, -6.696139547034476e-01, -6.749928430307620e-01, -6.407733400698523e-01, -6.581617506670290e-01, -6.427264279543892e-01, -6.575848785261851e-01, -6.528085057623474e-01, -5.089802632333494e-01, -5.551079386369056e-01, -6.351972848796252e-01, -6.234556624640231e-01, -5.756425853084887e-01, -7.332110838489689e-01, -1.895829176307995e-01, -2.203877366906078e-01, -3.308656683735648e-01, -3.074576494990644e-01, -2.711330397126108e-01, -5.112095271850151e-01, -2.296882831802263e-02, -3.211311036897643e-02, -3.792460528115923e-01, -5.212991398396166e-02, -5.212991398396166e-02, -5.840401596499842e-03, -6.326844315264067e-04, -1.312653672090670e-03, -4.644501222688316e-02, -2.091432855029678e-03, -2.069920729154120e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_24_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_24", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.266681389961180e+01, -3.266663657649330e+01, -3.266689958903829e+01, -3.266669884627624e+01, -3.266720198949207e+01, -3.266712421415738e+01, -3.266623219403822e+01, -2.958189611653582e+01, -3.266686306639706e+01, -2.958240205913774e+01, -2.958280223486266e+01, -2.958240205913774e+01, -5.284417931560638e+00, -5.035412990872917e+00, -5.284280095583327e+00, -5.284377496143791e+00, -5.281550870379430e+00, -5.281112677754617e+00, -5.282994276210977e+00, -5.283064330149629e+00, -5.283877735841875e+00, -5.280677035359402e+00, -5.034237063987748e+00, -5.280677035359401e+00, -7.881800685853289e-01, -7.984596995621941e-01, -7.849112907984888e-01, -9.947641517900461e-01, -9.422142903224986e-01, -9.313838503666917e-01, -9.544502816980088e-01, -7.605818898842851e-01, -8.092668904598364e-01, -6.956906368723816e-01, -1.006764404559352e+00, -8.925861156531009e-01, -1.737237793291514e-01, -2.421191278228625e-01, -1.775324387497401e-01, -2.498833923685850e-01, -9.896617500391023e-01, -8.287269378628346e-01, -1.456037905615967e-01, -1.503989537248086e-01, -2.346350555830237e-01, -9.859341088284368e-02, -2.346350555830236e-01, -8.653298089734689e-02, -5.720592675161920e-03, -6.079078547785616e-03, -5.597466459026294e-03, -6.422257049391484e-03, -3.107048138533309e-02, -3.552063770952023e-02, -3.437997886568685e-03, -3.380700731316192e-03, -5.102924959402738e-03, -2.903443157806910e-03, -5.102924959402738e-03, -2.903443157806912e-03, -7.242100934969156e+00, -7.240376026124271e+00, -7.245047282247786e+00, -7.243222180646364e+00, -7.242293268631530e+00, -7.240494587990051e+00, -7.244820258078708e+00, -7.243079074070618e+00, -7.905784307266419e+00, -7.241797560419947e+00, -7.243582986577539e+00, -7.903870561055557e+00, -3.013108594509052e+00, -3.012593567882458e+00, -3.030834675734398e+00, -3.029624426390987e+00, -2.996814272703292e+00, -3.001268505697357e+00, -3.013738582843203e+00, -3.017780185918146e+00, -3.033635810619668e+00, -2.741976665329459e+00, -3.033635810619668e+00, -3.023165506493749e+00, -8.436404283675810e-01, -8.941179784215975e-01, -8.823156593472207e-01, -8.826553561373333e-01, -8.068727518206048e-01, -8.179595678699295e-01, -8.014724791693439e-01, -8.152529293536279e-01, -8.616997352180592e-01, -8.865429644795949e-01, -8.616997352180593e-01, -8.302357735637026e-01, -9.421822643593183e-02, -9.521638796465091e-02, -1.656290596922061e-01, -2.107269279151255e-01, -8.431381899347104e-02, -8.948207620733602e-02, -2.709037357600806e+00, -2.707644770973582e+00, -1.113717832591866e-01, -1.219507252308457e-01, -1.113717832591865e-01, -1.219507252308457e-01, -2.409087974606032e-03, -2.680219898809929e-03, -3.307925391325618e-03, -3.357980606934242e-03, -2.473695493852370e-03, -2.619796245908893e-03, -5.680236786537329e-02, -5.187748713443828e-02, -2.526306773508494e-03, -3.469957201705288e-03, -2.526306773508492e-03, -3.469957201705288e-03, -8.534539029994274e-01, -8.573344393061383e-01, -8.312302564218199e-01, -8.351070016297655e-01, -8.796211811004119e-01, -8.828580372761170e-01, -8.796931743267463e-01, -8.487898937132107e-01, -8.796495471709314e-01, -8.828955766993157e-01, -8.796495471709314e-01, -8.455267493273534e-01, -8.279049689032565e-01, -8.312757175990119e-01, -7.237760069676195e-01, -7.424433662754415e-01, -7.262888986994068e-01, -7.920409559925964e-01, -7.444339688342326e-01, -7.470664362252654e-01, -7.318551579469057e-01, -7.342240747899550e-01, -7.318551579469056e-01, -8.092230085273312e-01, -9.282897287150410e-01, -1.024383200072314e+00, -2.895937090430487e-01, -2.920789953752528e-01, -2.955222769301997e-01, -3.826044669637043e-01, -4.778167491834809e-01, -5.369086526328704e-01, -4.609191942213495e-01, -4.610513408791519e-01, -4.609191942213488e-01, -3.849298570267680e-01, -6.849614250513753e-01, -6.865100502707940e-01, -3.048990891416800e-02, -3.069834961006443e-02, -4.459088579690505e-02, -4.614134722008301e-02, -5.061840452462339e-01, -5.038931979932370e-01, -7.184324100904121e-02, -7.671503914645740e-02, -7.184324100904116e-02, -7.671503914645739e-02, -7.640808049357598e-03, -7.917759565855897e-03, -8.898752261292798e-04, -8.919091124087188e-04, -1.691463691643272e-03, -1.799004502452371e-03, -6.126926551360244e-02, -6.226600801509519e-02, -2.393017191324840e-03, -3.180371709011591e-03, -2.393017191324839e-03, -2.970330405275085e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_24_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_24", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.242752906022621e-08, 0.000000000000000e+00, -4.243035910163560e-08, -4.242736409574747e-08, 0.000000000000000e+00, -4.243023867669929e-08, -4.242658433539404e-08, 0.000000000000000e+00, -4.242919120328944e-08, -4.242847892756042e-08, 0.000000000000000e+00, -4.310980436880837e-08, -4.242745329874374e-08, 0.000000000000000e+00, -4.310878524037317e-08, -4.310568256774916e-08, 0.000000000000000e+00, -4.310878524037317e-08, -3.177474863257015e-05, 0.000000000000000e+00, -3.518802063783133e-05, -3.178518921650439e-05, 0.000000000000000e+00, -3.177454893876936e-05, -3.198888981352771e-05, 0.000000000000000e+00, -3.202403654643580e-05, -3.190402639128238e-05, 0.000000000000000e+00, -3.190251967771669e-05, -3.177184641847486e-05, 0.000000000000000e+00, -3.208382979128568e-05, -3.519670421414596e-05, 0.000000000000000e+00, -3.208382979128568e-05, -1.136752445275860e-02, 0.000000000000000e+00, -1.160688018149553e-02, -1.131694973056059e-02, 0.000000000000000e+00, -7.776948700735965e-03, -6.450303286437867e-03, 0.000000000000000e+00, -6.338986297151425e-03, -6.954942225851729e-03, 0.000000000000000e+00, -1.122717351228054e-02, -1.152353989815652e-02, 0.000000000000000e+00, -1.028289703677816e-02, -7.839726557706417e-03, 0.000000000000000e+00, -5.873942211294792e-03, -1.349370961242507e+00, 0.000000000000000e+00, -7.742262072960071e-01, -1.366320387311916e+00, 0.000000000000000e+00, -8.246799907940898e-01, -1.125427010375128e-03, 0.000000000000000e+00, -3.173980394003194e-03, -8.775122953088291e-02, 0.000000000000000e+00, -1.658003784342600e-01, -5.318439590024353e-01, 0.000000000000000e+00, 2.654290800539669e-01, -5.318439590024348e-01, 0.000000000000000e+00, -1.225771084027390e+00, 2.598750535516677e+02, 0.000000000000000e+00, 2.305265219552083e+02, -3.553931693338437e+02, 0.000000000000000e+00, 2.111870452197023e+02, -8.459912508299279e+00, 0.000000000000000e+00, 4.519361050725668e+00, 6.163698755062896e+02, 0.000000000000000e+00, 6.407055827075883e+02, 3.184410961912503e+02, 0.000000000000000e+00, 1.287979299916037e+03, 3.184410961912503e+02, 0.000000000000000e+00, 1.287979299916038e+03, -1.319119998390736e-05, 0.000000000000000e+00, -1.320395013867621e-05, -1.319780854797471e-05, 0.000000000000000e+00, -1.321034833293318e-05, -1.319175140410807e-05, 0.000000000000000e+00, -1.320430326106778e-05, -1.319741217345817e-05, 0.000000000000000e+00, -1.321010583339704e-05, -1.295699940981356e-05, 0.000000000000000e+00, -1.320715395849156e-05, -1.319446359128108e-05, 0.000000000000000e+00, -1.296945851215886e-05, -2.467111501345040e-04, 0.000000000000000e+00, -2.481269447732348e-04, -2.527739911105516e-04, 0.000000000000000e+00, -2.539896525115723e-04, -2.405636249167705e-04, 0.000000000000000e+00, -2.437175000468363e-04, -2.462747008129597e-04, 0.000000000000000e+00, -2.493978165079417e-04, -2.545957584119678e-04, 0.000000000000000e+00, -2.940776995679003e-04, -2.545957584119678e-04, 0.000000000000000e+00, -2.520116177161285e-04, -5.851379445196424e-02, 0.000000000000000e+00, -6.074904296700334e-02, -5.500727686190177e-02, 0.000000000000000e+00, -5.546393246937600e-02, -5.996410985239949e-02, 0.000000000000000e+00, -6.231699467677237e-02, -7.118613990674380e-02, 0.000000000000000e+00, -6.815829372713293e-02, -5.538960092871219e-02, 0.000000000000000e+00, -6.360250442553605e-02, -5.538960092871219e-02, 0.000000000000000e+00, -6.278992925389312e-02, 3.182317457996133e-01, 0.000000000000000e+00, 3.048312862215983e-01, -6.959686047300646e-01, 0.000000000000000e+00, -2.031830692808701e-01, 4.779311906259723e-01, 0.000000000000000e+00, 3.898611977917235e-01, -5.665074073240181e-04, 0.000000000000000e+00, -5.677440636064217e-04, 8.939579308272755e-02, 0.000000000000000e+00, -1.191684474456350e-01, 8.939579308272751e-02, 0.000000000000000e+00, -1.191684474456355e-01, -1.370084966859385e+03, 0.000000000000000e+00, 8.299092146414206e+02, 6.484757727040372e+02, 0.000000000000000e+00, 5.908213433337512e+02, 3.111259568195908e+03, 0.000000000000000e+00, 2.905957985993466e+03, 1.559630613553139e+00, 0.000000000000000e+00, -3.780908586862262e+00, 1.295279349684462e+03, 0.000000000000000e+00, 1.222709252435860e+03, 1.295279349684462e+03, 0.000000000000000e+00, 1.222709252435860e+03, -8.848115836928815e-02, 0.000000000000000e+00, -8.718656941885485e-02, -8.809218500815710e-02, 0.000000000000000e+00, -8.684258533639028e-02, -8.724970768494150e-02, 0.000000000000000e+00, -8.601701115642336e-02, -8.751307989167208e-02, 0.000000000000000e+00, -8.713285556464073e-02, -8.738555849537746e-02, 0.000000000000000e+00, -8.614232029289531e-02, -8.738555849537746e-02, 0.000000000000000e+00, -8.708798204612167e-02, -9.831565181070845e-02, 0.000000000000000e+00, -9.710749984192617e-02, -1.029589571611931e-01, 0.000000000000000e+00, -1.068153868130311e-01, -1.095341357528976e-01, 0.000000000000000e+00, -1.085986156217660e-01, -1.098060397865036e-01, 0.000000000000000e+00, -1.084958791782871e-01, -1.105169443424108e-01, 0.000000000000000e+00, -1.093485751145667e-01, -1.105169443424108e-01, 0.000000000000000e+00, -1.081307333267602e-01, -4.289570962989778e-02, 0.000000000000000e+00, -4.294793571810439e-02, -2.343926128632381e-01, 0.000000000000000e+00, -2.354834571127643e-01, -4.046800033813305e-01, 0.000000000000000e+00, -2.532886826527107e-01, -2.896811692760315e-01, 0.000000000000000e+00, -2.397416649408473e-01, -2.761320772375638e-01, 0.000000000000000e+00, -2.796600548759182e-01, -2.761320772375638e-01, 0.000000000000000e+00, -3.712775475712153e-01, -1.143759504423138e-01, 0.000000000000000e+00, -1.165657601589759e-01, -9.006582532030141e+00, 0.000000000000000e+00, -8.797412832480589e+00, 2.559437019194899e+00, 0.000000000000000e+00, 2.410515545655333e+00, -3.728522247176817e-01, 0.000000000000000e+00, -4.218140065544289e-01, 8.753689118851223e-01, 0.000000000000000e+00, 7.218487723142969e-01, 8.753689118851232e-01, 0.000000000000000e+00, 7.218487723142968e-01, -1.302356127429940e+02, 0.000000000000000e+00, -1.204370967552234e+02, 9.611912734207599e+03, 0.000000000000000e+00, 9.547066368229496e+03, -5.666601045181036e+03, 0.000000000000000e+00, -5.156467873113222e+03, -3.386719988942422e+00, 0.000000000000000e+00, -3.549496015941343e+00, 2.318863275091740e+03, 0.000000000000000e+00, 1.482210178139743e+03, 2.318863275091743e+03, 0.000000000000000e+00, -2.178790911795069e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_24_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_24", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.077715544065926e-03, 2.077740658307670e-03, 2.077712128031304e-03, 2.077738167051247e-03, 2.077698632926271e-03, 2.077719512293509e-03, 2.077737468604960e-03, 2.954738604536041e-03, 2.077713721271030e-03, 2.954522881557764e-03, 2.954548829465612e-03, 2.954522881557764e-03, 1.763579616358407e-02, 7.804806693746832e-03, 1.763879457308339e-02, 1.763551339861609e-02, 1.769684028902972e-02, 1.770697865573264e-02, 1.767431548062207e-02, 1.767414690587713e-02, 1.763193413106835e-02, 1.772580811014395e-02, 7.802278969840763e-03, 1.772580811014395e-02, 1.159968439879907e-02, 1.230313895652422e-02, 1.140581450358883e-02, 4.229118714064433e-02, 3.398641936908340e-02, 3.293150561600144e-02, 3.655768290159320e-02, 1.028086555041568e-02, 1.270481684314157e-02, 6.986549946336559e-03, 4.339471589435549e-02, 2.907325943666451e-02, 1.233233002920791e-02, 8.516457184245708e-02, 1.374398355643508e-02, 9.389848839695818e-02, 1.121707960141341e-02, 3.336539070298565e-03, 1.023826828152970e-02, 1.433499263075849e-02, 6.233654171361079e-02, 4.507653978191001e-04, 6.233654171361075e-02, -7.953976863778688e-05, -4.095431266515522e-04, -4.357097873540642e-04, -2.396318052487932e-07, -4.703163742012362e-04, -1.765260914712356e-05, -1.496474999990056e-03, -2.114817414738645e-04, -2.090305074848236e-04, -3.565518738133043e-04, -2.661503013433260e-04, -3.565518738133043e-04, -2.661503013433288e-04, 1.083738712386727e-02, 1.083981654553987e-02, 1.080861535311181e-02, 1.081200254593711e-02, 1.083540011044039e-02, 1.083857991435659e-02, 1.081072947019274e-02, 1.081332930222843e-02, 8.465521395776320e-03, 1.082590067766579e-02, 1.082294910788620e-02, 8.467637992177993e-03, 2.710958843761765e-02, 2.720690156192684e-02, 2.783551583443132e-02, 2.790686086948212e-02, 2.640368812907908e-02, 2.670575569544291e-02, 2.708677314636947e-02, 2.738147799447575e-02, 2.801468214925201e-02, 1.112327977377069e-02, 2.801468214925201e-02, 2.765921949555749e-02, 1.183799427231624e-01, 6.700010811586793e-02, 9.787980297818216e-02, 9.669133372225694e-02, 1.173778114356386e-01, 1.218213131414878e-01, 1.251033622618174e-01, 1.210067710385358e-01, 1.126310453049088e-01, 6.815103937538762e-02, 1.126310453049088e-01, 1.197832604632497e-01, 5.323022519925221e-04, 6.247162578281737e-04, 3.516697454187001e-03, 2.677193078828199e-02, -3.348958597436347e-04, 2.223504971498555e-04, 3.586650805430140e-02, 3.587934506023139e-02, 4.394464535770084e-03, 1.047999329396592e-02, 4.394464535770084e-03, 1.047999329396575e-02, -9.832905899621136e-09, -1.350045224794591e-04, -1.982132344446517e-04, -1.889206893094568e-04, -3.974517642100212e-04, -4.408222632123279e-04, -1.550405512762784e-03, -7.471352621544668e-05, -1.764254509182181e-04, -4.307188148219711e-04, -1.764254509182189e-04, -4.307188148219757e-04, 7.096947719151619e-02, 7.040351868006484e-02, 8.133537356211079e-02, 8.061170856340399e-02, 6.969502990582156e-02, 6.925756720202178e-02, 6.829943164956020e-02, 7.409719665288056e-02, 6.901282035734738e-02, 6.859020587526489e-02, 6.901282035734738e-02, 7.557785659322085e-02, 7.436991872589545e-02, 7.377762122380049e-02, 1.382901013078668e-01, 7.051298059183007e-02, 1.339659754215413e-01, 8.079877403725141e-02, 1.144069710686575e-01, 1.137179767555464e-01, 1.259504142302307e-01, 1.251474489197822e-01, 1.259504142302307e-01, 8.278797858468873e-02, 9.866636588456955e-02, 6.590548326611519e-02, 5.129118125380225e-02, 5.222939481956449e-02, 2.155617211750229e-02, 8.748646539520714e-02, 5.888676262025433e-02, 1.500392838853321e-01, 1.272180600551665e-01, 1.283754584718429e-01, 1.272180600551663e-01, 4.270428005920997e-02, 1.374487750138274e-01, 1.395403873946723e-01, -1.758337365341018e-05, -1.758088945085276e-05, -1.556418279976779e-03, -1.586232180297458e-03, 1.826687189642369e-01, 1.954612831184117e-01, -6.779741341350072e-04, 2.715206256423686e-04, -6.779741341350494e-04, 2.715206256423960e-04, -2.833723890638287e-07, -3.106481857291591e-07, -5.725998459863457e-05, -5.726453092577243e-05, -1.414813342331354e-08, -1.803199334144427e-08, -1.090615005410007e-04, -1.131711334928208e-04, -2.683460360220484e-04, -4.021751541139259e-04, -2.683460360220465e-04, -1.073090947280327e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
