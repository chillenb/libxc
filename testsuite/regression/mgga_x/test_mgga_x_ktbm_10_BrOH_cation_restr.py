
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_10_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.105705558105204e+01, -2.105716358582543e+01, -2.105764204572553e+01, -2.105603848733265e+01, -2.105687889890250e+01, -2.105687889890250e+01, -3.134666000123159e+00, -3.134724136941671e+00, -3.136321086347758e+00, -3.135957620812580e+00, -3.135670616281532e+00, -3.890676714805854e+00, -5.981101443486185e-01, -7.408192210513446e-01, -7.181041142609210e-01, -7.255033741557354e-01, -7.239077606776949e-01, -7.239077606776949e-01, -1.890400331527573e-01, -1.922095039106309e-01, -7.182541742963433e-01, -1.403330248465201e-01, -1.588941712447284e-01, -1.588941712447284e-01, -6.316714790798866e-03, -6.648650910496149e-03, -3.672675693779151e-02, -3.647959620683393e-03, -4.584001457609177e-03, -4.584001457609177e-03, -5.711858148965254e+00, -5.712226829168736e+00, -5.711871253842959e+00, -5.267569166055842e+00, -5.712047000165992e+00, -5.712047000165992e+00, -1.745610320521891e+00, -1.761205742559971e+00, -1.734367187497134e+00, -1.747871154126831e+00, -1.759832726427991e+00, -2.202257297144301e+00, -6.539808416675014e-01, -7.027874077981808e-01, -6.072309118671915e-01, -6.289060964907890e-01, -6.634805043453285e-01, -5.644945280541552e-01, -9.077873408056046e-02, -1.868247253935330e-01, -8.424252349111533e-02, -2.134078228826843e+00, -1.138622081597864e-01, -1.138622081597864e-01, -2.738345039834004e-03, -3.566197691871390e-03, -2.726911195512063e-03, -5.725552011242148e-02, -3.195877635575152e-03, -3.285074897160429e-03, -6.387166289653998e-01, -6.381953947606581e-01, -6.148125102662323e-01, -6.385531272146906e-01, -6.384821345228485e-01, -6.384821345228485e-01, -6.218388083765712e-01, -5.502093809051214e-01, -5.731924372120268e-01, -5.935815472192111e-01, -5.834476755350647e-01, -5.118113509365215e-01, -7.393152894334258e-01, -2.008087396143947e-01, -2.899371141379051e-01, -3.098483922267235e-01, -3.362437339242966e-01, -3.362437339242965e-01, -4.098449335164215e-01, -3.514863378831488e-02, -4.796263778918387e-02, -3.749168938850875e-01, -7.220521685325693e-02, -7.629186860496458e-02, -8.915005637522060e-03, -9.532553350873712e-04, -2.000939274445277e-03, -7.160167532910242e-02, -3.039723251782507e-03, -3.039723251782504e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_10_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.072568512252611e+01, -3.072579484753204e+01, -3.072629941582949e+01, -3.072466811108681e+01, -3.072552051674349e+01, -3.072552051674349e+01, -4.506385104261089e+00, -4.506611015178894e+00, -4.512640606886569e+00, -4.510613584877229e+00, -4.510362343686222e+00, -4.366211077536269e+00, -7.638040154530639e-01, -8.608003919232052e-01, -8.425602104788052e-01, -8.474613380732621e-01, -8.464652375506491e-01, -8.464652375506491e-01, -2.257207999687910e-01, -2.288173119750434e-01, -8.801026051751287e-01, -1.737305250792339e-01, -1.942854123392754e-01, -1.942854123392751e-01, -8.032673194299076e-03, -8.454691985468700e-03, -4.661749649417930e-02, -4.639207369042011e-03, -5.829481193578900e-03, -5.829481193578900e-03, -7.011279938639411e+00, -7.015686477009996e+00, -7.011523494742855e+00, -7.531268496159976e+00, -7.013492048795198e+00, -7.013492048795198e+00, -2.436564355038962e+00, -2.474298476309171e+00, -2.408157608852527e+00, -2.441567650187654e+00, -2.471476118942299e+00, -2.478720882821499e+00, -7.452764049953831e-01, -8.422476844969093e-01, -6.819980669784349e-01, -7.173728042923303e-01, -7.614420677156798e-01, -8.372975155319721e-01, -1.174595887330206e-01, -2.281428056433562e-01, -1.093994223341299e-01, -2.460842749270268e+00, -1.418146685151372e-01, -1.418146685151374e-01, -3.651018738379657e-03, -4.535239110855536e-03, -3.467846245115226e-03, -7.529442915092199e-02, -4.260828409125739e-03, -4.177684300917806e-03, -8.313344350535343e-01, -8.119689610175502e-01, -8.487450181049681e-01, -8.242919820582595e-01, -8.214607081619071e-01, -8.214607081619071e-01, -8.067788679177639e-01, -6.202998326459614e-01, -6.610532337928244e-01, -7.132160765535525e-01, -6.851291453371714e-01, -7.532494944699343e-01, -8.717544254961268e-01, -2.462184616187199e-01, -3.397818601876458e-01, -4.310670633469456e-01, -3.847143068472894e-01, -3.847143068472891e-01, -5.923355904661533e-01, -4.462100828543492e-02, -6.080758799099143e-02, -4.207735903974851e-01, -9.385821823476551e-02, -9.606098341924710e-02, -1.133645562798641e-02, -1.212306037398803e-03, -2.544675198632222e-03, -9.022757672144374e-02, -3.865663898095166e-03, -3.865663898095161e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_10_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.516281473176036e-08, -1.516276038056416e-08, -1.516242033291993e-08, -1.516323859642298e-08, -1.516282374961816e-08, -1.516282374961816e-08, -1.296704472687309e-05, -1.296957731499296e-05, -1.303543544697576e-05, -1.300410503128512e-05, -1.301287102037386e-05, -1.557458780127492e-05, -4.242820303211451e-03, -5.327933127059164e-03, -4.900261800569797e-03, -5.185698588017073e-03, -5.117130691636553e-03, -5.117130691636553e-03, -6.584930376582475e-01, -6.691908142214040e-01, -1.005226039403414e-03, -5.005394062175963e-01, -5.758467112149834e-01, -5.758467112149833e-01, -1.524674728824074e+02, -1.405592092905917e+02, -3.472622719763730e+00, -3.904725374791458e+02, -2.920512824387991e+02, -2.920512824387991e+02, -4.970481823485850e-06, -4.970685061074854e-06, -4.970522535757923e-06, -4.630048413381864e-06, -4.970572700767390e-06, -4.970572700767390e-06, -1.081859138509874e-04, -1.091658967247224e-04, -1.071591084545085e-04, -1.081826030092609e-04, -1.092305370341312e-04, -1.321980441943111e-04, -2.507185742406970e-02, -2.128147513646949e-02, -2.863765029975874e-02, -2.946210246094406e-02, -2.444747496832214e-02, -2.136562565505064e-02, -1.859212386235456e-01, -3.185596108769366e-01, -1.824776611772894e-01, -2.323383403337252e-04, -7.695959925429077e-01, -7.695959925429081e-01, 8.998791460469488e+01, -3.841073521886830e+02, -1.869293616803268e+03, -1.304345567740047e-01, 1.307615962934676e+02, -7.977859078523655e+02, -3.199735096791852e-02, -3.218622469173044e-02, -3.106024000010537e-02, -3.208139376651342e-02, -3.210983904726442e-02, -3.210983904726442e-02, -3.564032187722211e-02, -4.585223186288545e-02, -4.466474891514031e-02, -4.193289792821986e-02, -4.350617364292484e-02, -3.893190732156041e-02, -1.699862028836494e-02, -1.726286441001421e-01, -1.893574110490827e-01, -1.065823958327026e-01, -1.702956841865540e-01, -1.702956841865540e-01, -4.651530068972468e-02, -3.796081977900168e+00, -2.021156091130539e+00, -1.893557711038185e-01, -3.078506521924946e-01, -1.313953272560024e+00, -5.299103473558677e+01, -5.943005804667950e+03, -2.285114780090077e+03, -1.515272523408998e+00, -1.112406718931554e+03, -1.112406718931556e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_10_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.553550594969916e-03, 1.553569986414533e-03, 1.553645306895069e-03, 1.553358592248744e-03, 1.553510358160436e-03, 1.553510358160436e-03, 2.457188845009740e-03, 2.458937828372599e-03, 2.505149033656958e-03, 2.486213667050176e-03, 2.488500279479581e-03, 1.043024980881542e-02, -3.214158734870750e-03, 2.862644155736892e-02, 2.459499230685500e-02, 2.653809201450270e-02, 2.608375405319857e-02, 2.608375405319857e-02, 6.280078349539102e-02, 6.664851018122420e-02, -3.147218707731129e-03, 2.056802610372208e-02, 3.401054609362664e-02, 3.401054609362650e-02, 5.307935636247078e-04, 5.706565262393129e-04, 2.411586321928777e-03, 2.616946405713672e-04, 3.884398975211448e-04, 3.884398975211448e-04, 9.106972899637647e-03, 9.107023984646547e-03, 9.106989612835457e-03, 7.368752578738990e-03, 9.106995703112949e-03, 9.106995703112949e-03, 2.102054364943122e-03, 2.494920465323139e-03, 1.803379551026686e-03, 2.145815689074340e-03, 2.472813486148001e-03, 1.661213198066962e-02, 7.374826212571695e-02, 7.352206428496300e-02, 7.116378007585959e-02, 7.692698547906565e-02, 7.415344124157860e-02, 3.943703419894395e-02, -1.953713006206362e-03, 3.053186715598252e-02, -1.622125250163207e-03, 2.328791581664896e-02, 1.687689869602739e-02, 1.687689869602744e-02, -6.271641636897034e-08, 2.404994906255598e-04, 5.233453927859385e-04, -6.510057248255958e-04, -3.952403982430353e-07, 3.904871680735010e-04, 8.092117168708833e-02, 8.141441325890844e-02, 7.493064628690212e-02, 8.112320045864299e-02, 8.119719935104076e-02, 8.119719935104075e-02, 8.319320502796045e-02, 8.279537935370600e-02, 8.672802892769882e-02, 8.714729124587986e-02, 8.733031125681530e-02, 5.668357281802080e-02, 6.917498997122982e-02, -1.151415499633621e-02, 6.236768883977771e-02, 1.073047896889668e-02, 8.173160926098573e-02, 8.173160926098566e-02, 2.125521336506612e-02, 2.308269058184549e-03, 3.151375087548775e-03, 1.120223094858332e-01, -1.755366599980443e-03, 8.510012081223419e-03, 5.187494825067910e-04, 7.105685165054008e-05, 2.527100124281676e-04, 8.091704600287436e-03, 4.313729890180860e-04, 4.313729890180898e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
