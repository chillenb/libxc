
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_10_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.340696206072439e+01, -2.340702229569700e+01, -2.340739996169802e+01, -2.340650604487945e+01, -2.340695874649516e+01, -2.340695874649516e+01, -3.450507151011532e+00, -3.450565420353350e+00, -3.452382054826333e+00, -3.454035703254289e+00, -3.452626928984879e+00, -3.452626928984879e+00, -6.445537681065925e-01, -6.441702261540615e-01, -6.356861562234618e-01, -6.436031758092066e-01, -6.411928528109472e-01, -6.411928528109472e-01, -1.867240002688052e-01, -1.892961640269946e-01, -7.391825686726272e-01, -1.369233078856168e-01, -1.551375668712152e-01, -1.551375668712152e-01, -6.313478155622538e-03, -6.642445309494862e-03, -3.648111614627968e-02, -3.624956989482855e-03, -4.565724868381104e-03, -4.565724868381104e-03, -5.708871147774707e+00, -5.709274591610044e+00, -5.708946378826685e+00, -5.709300250146059e+00, -5.709046560406820e+00, -5.709046560406820e+00, -2.126514416644005e+00, -2.150708692540924e+00, -2.122662610059930e+00, -2.144682984559833e+00, -2.141685839313803e+00, -2.141685839313803e+00, -6.128476358497752e-01, -6.534149182344451e-01, -5.477863793589599e-01, -5.518078428502449e-01, -6.238839240542683e-01, -6.238839240542683e-01, -9.509972340619241e-02, -1.847770753399919e-01, -8.789166915289678e-02, -1.882522570169415e+00, -1.124264083216310e-01, -1.124264083216310e-01, -2.764908811156536e-03, -3.522267517388920e-03, -2.707509833611671e-03, -5.906538108652321e-02, -3.248237103128604e-03, -3.248237103128605e-03, -6.322556065921100e-01, -6.319970944656064e-01, -6.321119611218228e-01, -6.321813226050571e-01, -6.321456371154852e-01, -6.321456371154852e-01, -6.094349264237801e-01, -5.448632933849130e-01, -5.654452463830867e-01, -5.835468847705891e-01, -5.740427253945697e-01, -5.740427253945695e-01, -6.760385144092533e-01, -2.365265035371475e-01, -2.831085906960361e-01, -3.606153353308880e-01, -3.226593605123476e-01, -3.226593605123476e-01, -4.834023220305374e-01, -3.502714193638183e-02, -4.756034990535835e-02, -3.480531952071699e-01, -7.545663026934323e-02, -7.545663026934323e-02, -8.800770445352050e-03, -9.292725418115118e-04, -1.993709757096991e-03, -7.110655175742107e-02, -3.013148521937020e-03, -3.013148521937019e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_10_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.830535559719966e+01, -2.830548394500373e+01, -2.830595962762641e+01, -2.830404984940914e+01, -2.830506404531974e+01, -2.830506404531974e+01, -4.475205592467693e+00, -4.475333664865987e+00, -4.478748728673562e+00, -4.477428233388658e+00, -4.477250417898865e+00, -4.477250417898865e+00, -8.015946063423598e-01, -8.006760543238756e-01, -7.818934389145993e-01, -7.920053517349323e-01, -7.892280874757989e-01, -7.892280874757989e-01, -2.239186644906277e-01, -2.265969639001361e-01, -9.085675789097708e-01, -1.713040118965815e-01, -1.911637314210140e-01, -1.911637314210138e-01, -8.034982720882175e-03, -8.459116549101831e-03, -4.674446449479761e-02, -4.656006367451358e-03, -5.842705288669175e-03, -5.842705288669179e-03, -7.014996613097686e+00, -7.019364144103521e+00, -7.015163143965728e+00, -7.019020011720895e+00, -7.017227595097809e+00, -7.017227595097809e+00, -2.468722357938513e+00, -2.486543619205873e+00, -2.455280028269245e+00, -2.470649836091998e+00, -2.485544248149885e+00, -2.485544248149885e+00, -7.769059277635484e-01, -8.963128413924851e-01, -7.064554612690948e-01, -7.734278811037163e-01, -7.950469527847241e-01, -7.950469527847241e-01, -1.208811352026963e-01, -2.264861394371317e-01, -1.119770854333601e-01, -2.671327017750490e+00, -1.410323313545969e-01, -1.410323313545970e-01, -3.617443901886372e-03, -4.567955304226469e-03, -3.482020235385149e-03, -7.568032766203746e-02, -4.204960460625466e-03, -4.204960460625470e-03, -8.398456987503531e-01, -8.200215886852392e-01, -8.268871590716832e-01, -8.326552027024141e-01, -8.297617176859281e-01, -8.297617176859282e-01, -8.229513930805410e-01, -6.236501122212125e-01, -6.683025944683798e-01, -7.248642227619988e-01, -6.950723274058350e-01, -6.950723274058348e-01, -9.356282201355871e-01, -2.843096697948991e-01, -3.354976621335657e-01, -4.382973473589216e-01, -3.806250448512689e-01, -3.806250448512687e-01, -5.774439789688453e-01, -4.468578692148877e-02, -6.096798413027434e-02, -4.305145905498012e-01, -9.596718307284768e-02, -9.596718307284753e-02, -1.142031004262109e-02, -1.231833332400899e-03, -2.549927416386591e-03, -9.020214408887686e-02, -3.885180886776423e-03, -3.885180886776428e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_10_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.659996028238369e-08, -1.659986737920866e-08, -1.659941480248232e-08, -1.660080696758790e-08, -1.660008301289075e-08, -1.660008301289075e-08, -1.401097287881283e-05, -1.401366892075998e-05, -1.408447946808263e-05, -1.405776361746796e-05, -1.406353252499800e-05, -1.406353252499800e-05, -4.596944271858140e-03, -4.581926357765827e-03, -4.235613912440293e-03, -4.525284854434914e-03, -4.450745853772062e-03, -4.450745853772062e-03, -6.465832757658966e-01, -6.548728328700693e-01, -1.067370230052482e-03, -4.537749828241391e-01, -5.419831459532631e-01, -5.419831459532630e-01, -1.511311478994779e+02, -1.383078995620393e+02, -3.111121208780975e+00, -3.454676402827871e+02, -2.713489109248609e+02, -2.713489109248606e+02, -4.968157219016229e-06, -4.968387003428496e-06, -4.968246230042672e-06, -4.968444739120608e-06, -4.968237388927186e-06, -4.968237388927186e-06, -1.279756611266553e-04, -1.292536282944005e-04, -1.274339724714003e-04, -1.287796517361574e-04, -1.289460225903774e-04, -1.289460225903774e-04, -2.371756168936001e-02, -1.997664384161729e-02, -2.623576902125643e-02, -2.639782393194336e-02, -2.319153528495067e-02, -2.319153528495067e-02, -5.814822692270842e-01, -3.102816174658302e-01, -6.547117023065034e-01, -2.090129889031131e-04, -7.221090039669549e-01, -7.221090039669553e-01, -3.363300596769658e+02, -2.905102515214531e+02, -1.624112965764014e+03, -1.368233963035355e+00, -6.237998303019707e+02, -6.237998303019707e+02, -3.170063669860319e-02, -3.190269281811881e-02, -3.184695184632142e-02, -3.178908019899352e-02, -3.181930909340478e-02, -3.181930909340478e-02, -3.499092354885018e-02, -4.546529928851628e-02, -4.413937809400385e-02, -4.130672544084610e-02, -4.289225599062537e-02, -4.289225599062536e-02, -1.574110256442354e-02, -2.305365777894672e-01, -1.841454460595648e-01, -1.211640569300245e-01, -1.636127572465826e-01, -1.636127572465826e-01, -5.325451157178432e-02, -3.595538546290851e+00, -1.777774796997332e+00, -1.776277188183667e-01, -1.186163503198651e+00, -1.186163503198651e+00, -3.957979225015876e+01, -1.887020432233912e+03, -2.138522702397919e+03, -1.419351755739336e+00, -9.294357874655194e+02, -9.294357874655208e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_10_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_10_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.141605524609031e-03, 2.141606116797537e-03, 2.141627217181481e-03, 2.141619732298228e-03, 2.141621006852930e-03, 2.141621006852930e-03, 5.638609078463234e-03, 5.640433974569785e-03, 5.690746592933226e-03, 5.691463088264999e-03, 5.682905402751989e-03, 5.682905402751989e-03, 6.783336363453644e-03, 6.760152406750248e-03, 6.525612101207116e-03, 8.098794231964268e-03, 7.579678360421544e-03, 7.579678360421544e-03, 5.681043271548445e-02, 5.903581399086441e-02, -7.920241213838868e-04, 1.380646825529085e-02, 2.542638360857703e-02, 2.542638360857689e-02, 5.217515791578347e-04, 5.529530874561823e-04, 1.921586065039392e-03, 2.063873721028514e-04, 3.366997303461624e-04, 3.366997303461598e-04, 9.094836087705243e-03, 9.095054361655442e-03, 9.095106619905542e-03, 9.095286980254951e-03, 9.094817540506808e-03, 9.094817540506808e-03, 1.421859707497283e-02, 1.482608713566108e-02, 1.421184355418540e-02, 1.478484219966186e-02, 1.455807740198283e-02, 1.455807740198283e-02, 5.805270240936349e-02, 5.957252619514593e-02, 4.440331033423103e-02, 4.596059372227410e-02, 5.973392084840776e-02, 5.973392084840776e-02, 6.192219394479156e-03, 2.702842928746353e-02, 5.439326537223520e-03, 1.476453360554749e-02, 1.355299591782270e-02, 1.355299591782282e-02, 6.687308101250512e-05, 1.405021333359682e-04, 3.985222823782262e-04, 3.441117324401857e-03, 2.429837434962427e-04, 2.429837434962428e-04, 7.927846594421101e-02, 7.966758294935590e-02, 7.955263950236760e-02, 7.943948993328999e-02, 7.949727768718297e-02, 7.949727768718297e-02, 7.983319045010417e-02, 7.977833663876033e-02, 8.292851211897910e-02, 8.311104256407258e-02, 8.311420104877998e-02, 8.311420104877995e-02, 5.225606083730657e-02, 4.186407441446481e-02, 5.285405905145146e-02, 6.090240983849916e-02, 6.428932546875706e-02, 6.428932546875711e-02, 6.614933539409752e-02, 2.064669193293425e-03, 2.391773947346740e-03, 8.004647791849495e-02, 6.487573946672784e-03, 6.487573946672729e-03, 2.953496703397881e-04, 8.706570962082507e-06, 2.221661177783833e-04, 6.842772028522736e-03, 3.047097109286613e-04, 3.047097109286645e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
