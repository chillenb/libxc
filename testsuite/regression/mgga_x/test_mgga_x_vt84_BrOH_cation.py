
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_vt84_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_vt84", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.990401058139910e+01, -1.990407102838473e+01, -1.990435490791635e+01, -2.134995068658706e+01, -2.135042853859835e+01, -2.279700922362797e+01, -3.468997364070417e+00, -3.703030484853434e+00, -3.703111678851180e+00, -3.703413521156737e+00, -3.702998409424844e+00, -3.469131291766080e+00, -6.333288387628895e-01, -6.826481359904004e-01, -7.213978681112918e-01, -6.725777773291832e-01, -6.221605760146942e-01, -7.246381170692443e-01, -1.816383345029532e-01, -1.837936446782277e-01, -8.256733177381304e-01, -1.754260181072923e-01, -1.968267164397844e-01, -1.893836084629618e-01, -5.257682562286409e-03, -5.816228218336992e-03, -4.588524546106637e-02, -2.602945664387450e-03, -4.094454899555044e-03, -4.094454899555044e-03, -5.562334748072866e+00, -5.563423534852796e+00, -5.562389544428835e+00, -5.563350629338181e+00, -5.214309976981693e+00, -5.214648808730402e+00, -2.089637237410817e+00, -2.103246327360861e+00, -2.079946506517594e+00, -2.091784223361552e+00, -1.970839980794931e+00, -2.101926516384008e+00, -5.848268676136064e-01, -6.804324841288452e-01, -5.781564330076349e-01, -6.011812970366337e-01, -5.992553146229538e-01, -6.358276050527685e-01, -1.406169454554069e-01, -1.897733663006497e-01, -1.325404203040396e-01, -2.045159693221930e+00, -1.501354315759937e-01, -1.501354315759937e-01, -2.067682184795731e-03, -2.483593933981495e-03, -2.092517208485859e-03, -7.433306710848990e-02, -2.607335104637554e-03, -2.607335104637555e-03, -6.295005135952260e-01, -6.263485610802910e-01, -5.511246365904297e-01, -5.906797695314655e-01, -5.517443137161306e-01, -5.901434750891785e-01, -6.125294304449367e-01, -4.901676331978529e-01, -5.138526175064975e-01, -5.750763886675685e-01, -5.619268075363425e-01, -5.258263410909473e-01, -6.672997344196383e-01, -2.523230830030653e-01, -2.701363635967922e-01, -3.482449416178836e-01, -3.258880503512012e-01, -3.049971012957772e-01, -4.825743065874452e-01, -3.218857714948582e-02, -7.609046009715410e-02, -3.567846256163687e-01, -1.139912182574207e-01, -1.139912182574208e-01, -8.179670027022898e-03, -4.049394422208381e-05, -1.838341237325801e-03, -6.519767806613910e-02, -2.402803391433720e-03, -2.720019207996621e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_vt84_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_vt84", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.680414071733487e+01, -2.680414834981076e+01, -2.680423350252158e+01, -2.680421574338597e+01, -2.680454510643239e+01, -2.680465808845709e+01, -2.680349727222602e+01, -2.741734947691477e+01, -2.680419547050449e+01, -2.741769578982872e+01, -2.741811562678899e+01, -2.741769578982872e+01, -4.495876659664813e+00, -4.242542687559698e+00, -4.495961561119607e+00, -4.495809010466252e+00, -4.497578538048957e+00, -4.497912536614850e+00, -4.497372635584429e+00, -4.497437587432159e+00, -4.494966785314300e+00, -4.498966552481816e+00, -4.241831783046605e+00, -4.498966552481816e+00, -8.223593458078851e-01, -8.247137413438516e-01, -8.213428883417108e-01, -7.976715417715263e-01, -7.559955677039006e-01, -7.476056284743947e-01, -7.653731093446735e-01, -8.106699140570214e-01, -8.304616504756643e-01, -7.864359676380582e-01, -8.074847243373142e-01, -7.180413828061016e-01, -2.125484921210041e-01, -1.956640620528527e-01, -2.148898592024993e-01, -2.013782429490202e-01, -8.172538363828872e-01, -9.921895697629289e-01, -1.467897205171567e-01, -1.441430631466561e-01, -1.915518325500009e-01, -1.432615909966850e-01, -1.915518325500008e-01, -1.215193621823578e-01, -7.604953679410015e-03, -8.025374683704999e-03, -7.839677332167963e-03, -8.419069452322007e-03, -4.357624361722367e-02, -1.043566570129016e-01, -4.997152346650756e-03, -4.926206438696837e-03, -6.891745091052720e-03, -4.197530895875745e-03, -6.891745091052720e-03, -4.197530895875746e-03, -6.603358140576518e+00, -6.601766188425029e+00, -6.602959812466723e+00, -6.601380854910001e+00, -6.603319532306266e+00, -6.601740993616198e+00, -6.602978715905487e+00, -6.601391917320065e+00, -6.543163296389624e+00, -6.601574921041295e+00, -6.603166668513675e+00, -6.541566604681083e+00, -2.494323990984733e+00, -2.495114694093684e+00, -2.521455650270906e+00, -2.521357177707912e+00, -2.470437677341430e+00, -2.478136195829832e+00, -2.494621879124743e+00, -2.502392703634870e+00, -2.526918907702196e+00, -2.388272335747113e+00, -2.526918907702196e+00, -2.511451768782400e+00, -7.656017798811410e-01, -7.281862843307407e-01, -8.168693419760731e-01, -8.161317155424431e-01, -6.902035520917505e-01, -7.196671335812466e-01, -7.235075441228644e-01, -7.462691850747045e-01, -7.937774892839796e-01, -7.219008543670710e-01, -7.937774892839797e-01, -7.562327391184729e-01, -1.362156870629279e-01, -1.365723498018712e-01, -2.185969610861517e-01, -1.818194551590217e-01, -1.332527895482667e-01, -1.331326473206156e-01, -2.494660059409928e+00, -2.493495888828507e+00, -1.315320868786413e-01, -1.256772428559208e-01, -1.315320868786412e-01, -1.256772428559209e-01, -3.373889630339739e-03, -4.094435653566352e-03, -4.851843317297293e-03, -4.939334274472519e-03, -3.501881030668338e-03, -3.659245614306842e-03, -1.153887297000893e-01, -7.289231078783266e-02, -3.818953743720935e-03, -4.751098076723393e-03, -3.818953743720938e-03, -4.751098076723393e-03, -7.284895686042651e-01, -7.311302861021938e-01, -7.307620619940233e-01, -7.333303373694539e-01, -7.364122986173891e-01, -7.392751395037259e-01, -7.375653769582794e-01, -7.318290910646633e-01, -7.369896095418013e-01, -7.398419000820943e-01, -7.369896095418013e-01, -7.321488442961692e-01, -7.097718141321778e-01, -7.119145032598644e-01, -6.402970935171065e-01, -6.085243192156534e-01, -6.685279417982639e-01, -6.450706801996541e-01, -6.881578416971929e-01, -6.903792112229243e-01, -6.792119760177231e-01, -6.814875662027065e-01, -6.792119760177231e-01, -6.613461229421821e-01, -8.616879325572151e-01, -8.385655117314822e-01, -2.362894844361916e-01, -2.380965187181879e-01, -3.234454947684937e-01, -3.068837819172379e-01, -4.210318644527504e-01, -4.436184885897047e-01, -3.719258090771410e-01, -3.721653423241259e-01, -3.719258090771410e-01, -3.682144696266793e-01, -5.846911877068143e-01, -5.898450532632686e-01, -4.276133848882798e-02, -4.305386354034960e-02, -1.119539761222131e-01, -1.119233103706140e-01, -4.296280054278879e-01, -4.391661918760459e-01, -1.177318181643755e-01, -1.140275690775522e-01, -1.177318181643756e-01, -1.140275690775522e-01, -1.070175084466240e-02, -1.108972027404415e-02, -3.805397380043650e-04, -3.833779947359855e-04, -2.368868286755353e-03, -2.519481689980323e-03, -8.611163712302992e-02, -8.750120115096793e-02, -3.516256079216299e-03, -4.406197174701994e-03, -3.516256079216294e-03, -4.160012473795828e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_vt84_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_vt84", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.363806129293493e-08, 0.000000000000000e+00, -1.363990028848766e-08, -1.363814461816353e-08, 0.000000000000000e+00, -1.363996051152722e-08, -1.363827910462456e-08, 0.000000000000000e+00, -1.364019027651993e-08, -1.363735888549744e-08, 0.000000000000000e+00, -3.933244764849763e-08, -1.363812436649139e-08, 0.000000000000000e+00, -3.933915945035694e-08, -3.933327880931572e-08, 0.000000000000000e+00, -3.933915945035694e-08, -1.478351946884343e-05, 0.000000000000000e+00, -9.577617650482942e-06, -1.478811516919798e-05, 0.000000000000000e+00, -1.478346988451694e-05, -1.487831771237717e-05, 0.000000000000000e+00, -1.489395727682630e-05, -1.484038248814877e-05, 0.000000000000000e+00, -1.483967568059735e-05, -1.478276250358338e-05, 0.000000000000000e+00, -1.492044234133062e-05, -9.579455545176528e-06, 0.000000000000000e+00, -1.492044234133062e-05, -3.177276665341349e-03, 0.000000000000000e+00, -3.226189582497482e-03, -3.168378131400779e-03, 0.000000000000000e+00, -6.370117890571471e-03, -6.644175406900685e-03, 0.000000000000000e+00, -6.771011988917073e-03, -6.664454821598904e-03, 0.000000000000000e+00, -3.177732485081807e-03, -3.192018757260869e-03, 0.000000000000000e+00, -3.030723811746156e-03, -6.222565136446311e-03, 0.000000000000000e+00, -7.223944253438259e-03, -4.268397373563622e-01, 0.000000000000000e+00, -1.155734932341103e+00, -4.274738070144417e-01, 0.000000000000000e+00, -1.104098930220059e+00, -2.831420998943172e-03, 0.000000000000000e+00, -9.824634027020475e-04, -1.895660156438524e+00, 0.000000000000000e+00, -2.040545881407210e+00, -1.060089214966198e+00, 0.000000000000000e+00, -2.389136114685342e+00, -1.060089214966198e+00, 0.000000000000000e+00, -4.067678368424842e-01, 2.749847474351586e+02, 0.000000000000000e+00, 2.148775003864845e+02, 1.749784253252692e+04, 0.000000000000000e+00, 1.710539789744078e+02, 1.237301666586152e+01, 0.000000000000000e+00, 2.831499849229242e+01, 1.885592451696849e+03, 0.000000000000000e+00, 2.004756077668041e+03, 4.328717747721012e+02, 0.000000000000000e+00, 3.752113396553085e+03, 4.328717747721012e+02, 0.000000000000000e+00, 3.752113396553105e+03, -1.773985472803613e-05, 0.000000000000000e+00, -1.775795096164890e-05, -1.790159402770138e-05, 0.000000000000000e+00, -1.791440831170264e-05, -1.775117920386748e-05, 0.000000000000000e+00, -1.776502631909497e-05, -1.788984742223978e-05, 0.000000000000000e+00, -1.790704802305446e-05, -4.811167298324954e-06, 0.000000000000000e+00, -1.783597458301172e-05, -1.782061199905725e-05, 0.000000000000000e+00, -4.815574267387318e-06, -1.212630190636127e-04, 0.000000000000000e+00, -1.217170178763627e-04, -1.220278128681083e-04, 0.000000000000000e+00, -1.224757443872911e-04, -1.205463530587425e-04, 0.000000000000000e+00, -1.211572544060891e-04, -1.210933189650179e-04, 0.000000000000000e+00, -1.217732210892942e-04, -1.224397211666159e-04, 0.000000000000000e+00, -7.864698132160168e-05, -1.224397211666159e-04, 0.000000000000000e+00, -1.222405848893483e-04, -3.200063534458688e-02, 0.000000000000000e+00, -1.765151375327856e-02, -5.233556821596042e-02, 0.000000000000000e+00, -5.500080568699917e-02, -2.787676836550478e-02, 0.000000000000000e+00, -3.001674034974464e-02, -3.773889943082591e-02, 0.000000000000000e+00, -3.983602918711086e-02, -3.473105660860584e-02, 0.000000000000000e+00, -1.852151282813348e-02, -3.473105660860588e-02, 0.000000000000000e+00, -3.522918893403709e-02, -2.923442836817483e+00, 0.000000000000000e+00, -2.892725813429788e+00, -2.429586970842354e-01, 0.000000000000000e+00, -9.196661235233238e-01, -3.114555349623854e+00, 0.000000000000000e+00, -3.196113356681449e+00, -3.536016049510444e-04, 0.000000000000000e+00, -3.545982415185830e-04, -3.143012615313395e+00, 0.000000000000000e+00, -3.545508022779848e+00, -3.143012615313393e+00, 0.000000000000000e+00, -3.545508022779851e+00, 5.170774873657049e+05, 0.000000000000000e+00, 4.128581170886118e+03, 2.151169640588634e+03, 0.000000000000000e+00, 2.010142114779889e+03, 7.413802481092404e+03, 0.000000000000000e+00, 6.017266613866642e+03, -2.720404506991260e+00, 0.000000000000000e+00, -1.489108189178389e-01, 5.666583611353555e+03, 0.000000000000000e+00, 2.002804810096198e+03, 5.666583611353550e+03, 0.000000000000000e+00, 2.002804810096193e+03, -4.646604026455420e-01, 0.000000000000000e+00, -4.716408282911742e-01, -2.270637062212720e-01, 0.000000000000000e+00, -2.288938501481472e-01, -5.502147934490793e-02, 0.000000000000000e+00, -5.531253666493161e-02, -6.471391703455281e-02, 0.000000000000000e+00, -3.440973347403222e-01, -5.938022187389019e-02, 0.000000000000000e+00, -5.969019621619931e-02, -5.938022187389019e-02, 0.000000000000000e+00, -3.096671302955167e-01, -4.525869891055515e-01, 0.000000000000000e+00, -4.608202766418727e-01, -5.032028139869230e-02, 0.000000000000000e+00, -3.020523796206912e-02, -6.798505337809849e-02, 0.000000000000000e+00, -3.224816100934315e-02, -1.096846669271965e-01, 0.000000000000000e+00, -1.093371489719347e-01, -8.382082416277800e-02, 0.000000000000000e+00, -8.386091449898421e-02, -8.382082416277797e-02, 0.000000000000000e+00, -3.330737212937973e-02, -3.327017276722694e-02, 0.000000000000000e+00, -1.344955909228752e-02, -4.611710343017237e-01, 0.000000000000000e+00, -4.530266184071487e-01, -1.165235385271093e-01, 0.000000000000000e+00, -2.513466518478381e-01, -7.726150291138618e-02, 0.000000000000000e+00, -1.188149239399663e-01, -1.723261713903922e-01, 0.000000000000000e+00, -1.732405951511497e-01, -1.723261713903926e-01, 0.000000000000000e+00, -9.984766697401329e-02, -5.317187598344456e-02, 0.000000000000000e+00, -5.425921354699927e-02, 1.342569875167672e+01, 0.000000000000000e+00, 1.304121696924335e+01, 5.959338572613161e+00, 0.000000000000000e+00, 3.823723872953132e+00, -1.736838010149700e-01, 0.000000000000000e+00, -1.993323753445102e-01, -4.972154692864054e+00, 0.000000000000000e+00, -5.940033893244682e+00, -4.972154692864063e+00, 0.000000000000000e+00, -5.940033893244697e+00, 5.017571326583064e+03, 0.000000000000000e+00, 4.345621166137563e+03, 2.492677817941134e+04, 0.000000000000000e+00, 2.487808964059431e+04, 2.127702390634856e+06, 0.000000000000000e+00, 1.662194071014581e+06, -8.771893851911835e-01, 0.000000000000000e+00, -1.015166415938752e+00, 7.816423900447709e+03, 0.000000000000000e+00, 2.800809072852019e+03, 7.816423900447731e+03, 0.000000000000000e+00, 2.224849638992909e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_vt84_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_vt84", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.556335174420293e-04, 1.556660528904032e-04, 1.556377612526639e-04, 1.556691282237053e-04, 1.556494571877767e-04, 1.556864028278631e-04, 1.556018866353360e-04, 3.120532211956253e-03, 1.556362660928535e-04, 3.121216993541346e-03, 3.120880207156670e-03, 3.121216993541346e-03, 4.574228994001163e-03, -5.314937098007366e-04, 4.576338016172487e-03, 4.573936811473550e-03, 4.617551062325746e-03, 4.624918020183237e-03, 4.602135020038594e-03, 4.602126402399959e-03, 4.570265053656923e-03, 4.639384011471069e-03, -5.319739401356429e-04, 4.639384011471069e-03, -1.949542903983052e-03, -2.039420102907870e-03, -1.924485302380654e-03, 7.203486084968614e-03, 5.578135406915949e-03, 5.379851998964185e-03, 6.061154535917801e-03, -1.777132376125750e-03, -2.086865114783093e-03, -1.304867479023855e-03, 7.439616883201378e-03, 4.674228095405690e-03, -2.648183068039186e-03, 1.344703748353441e-02, -2.881046958168897e-03, 1.497072252376699e-02, 1.704153904726856e-03, -6.839776521656678e-04, 1.409354720774849e-03, 1.993160045130914e-03, 9.625150441935740e-03, 1.796042318041064e-04, 9.625150441935725e-03, -9.712895608766349e-05, -1.177492797790758e-08, -1.250871762724269e-08, -6.271941961294399e-08, -1.342232580129532e-08, -5.323856556413256e-06, -9.805951783350462e-06, -5.380937187039674e-09, -5.286328066017226e-09, -1.018188976407145e-08, -6.856503182462480e-09, -1.018188976407145e-08, -6.856503182462223e-09, 2.008094059542154e-02, 2.008694666883556e-02, 2.026949236886515e-02, 2.026920437747446e-02, 2.009403748334139e-02, 2.009511275520622e-02, 2.025569951080319e-02, 2.026056062662003e-02, 7.846486585638264e-04, 2.017784399696824e-02, 2.017515653995459e-02, 7.848160226533126e-04, 5.926464260307986e-03, 5.965713411139818e-03, 6.274044180038796e-03, 6.304110683175808e-03, 5.623462082054670e-03, 5.745733856277148e-03, 5.918192984471105e-03, 6.048391971504746e-03, 6.362895922642399e-03, -1.114743659585386e-03, 6.362895922642399e-03, 6.179142197051014e-03, 5.318934435995656e-02, 1.311359162057619e-03, 1.100707388280894e-01, 1.156276284769191e-01, 3.154453150730194e-02, 4.015930130038593e-02, 5.268432341174282e-02, 6.181483169988974e-02, 6.527797417789433e-02, 1.507028481517452e-03, 6.527797417789433e-02, 5.662299442689236e-02, 1.948501800372394e-04, 2.039883533871102e-04, -1.024973947803362e-03, 3.911914891944984e-03, 1.117802893657018e-04, 1.666936980737121e-04, 2.062220073893700e-02, 2.065248679474535e-02, 6.389977523515583e-04, 1.440820633208024e-03, 6.389977523515585e-04, 1.440820633208029e-03, -2.558839175391398e-09, -2.771365076013932e-09, -4.928777040282605e-09, -4.660867330896022e-09, -1.067489579062652e-08, -1.210268006294979e-08, 1.239637411068923e-05, -3.268087898498059e-05, -3.925827170132021e-09, -1.214112572054740e-08, -3.925827170131851e-09, -1.214112572053456e-08, 7.460950696568283e-01, 7.661431526964773e-01, 3.593557960866252e-01, 3.664228877813620e-01, 7.813471124434335e-03, 7.791451920486916e-03, 7.854883751233105e-03, 5.555916398309023e-01, 7.836173257358582e-03, 7.812329931800532e-03, 7.836173257358582e-03, 4.989269296760031e-01, 6.697369373627803e-01, 6.887015925853716e-01, 4.771527498085938e-02, -1.059888051626173e-03, 7.626961607573561e-02, 3.333681847217970e-03, 1.382916615743059e-01, 1.392603967512584e-01, 1.000215208076759e-01, 1.011473269577057e-01, 1.000215208076759e-01, 5.169169282536517e-03, 8.117518788783856e-02, 4.494825713412549e-03, 7.927081116435062e-03, 8.085225848831196e-03, -3.855796089009739e-03, 1.443203247252305e-02, -6.378737562128806e-03, 3.241461713098198e-02, 2.339194137692023e-02, 2.367582901925971e-02, 2.339194137692023e-02, -6.209415459999545e-03, 3.643061082362258e-02, 3.862774884379604e-02, -5.293004991275407e-06, -5.295158757690509e-06, -6.414885609577887e-06, -5.078683870055738e-06, 4.665887613084908e-02, 5.987316421068655e-02, 9.787205005460221e-05, 1.958175960831136e-04, 9.787205005460257e-05, 1.958175960831138e-04, -7.430159795778713e-08, -8.149893791078780e-08, -8.606022358228369e-11, -8.668702834261808e-11, -3.681817029244430e-09, -4.693207083607545e-09, -7.380635921818730e-05, -8.796651005775571e-05, -6.639825346941510e-09, -1.117165740488302e-08, -6.639825346960166e-09, -2.799084664884424e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
