
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_vt84_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_vt84", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.259064362547582e+01, -2.259071173864377e+01, -2.259114276088963e+01, -2.259013312701607e+01, -2.259064379201144e+01, -2.259064379201144e+01, -3.393610284893736e+00, -3.393624985167743e+00, -3.394241193337178e+00, -3.395913710334633e+00, -3.394708978209911e+00, -3.394708978209911e+00, -6.533585149338752e-01, -6.529873053532751e-01, -6.456990885958248e-01, -6.522147155405600e-01, -6.537397916082869e-01, -6.537397916082869e-01, -1.956709373753835e-01, -1.969468410405319e-01, -7.536983362979407e-01, -1.676150069055541e-01, -1.919509831488279e-01, -1.919509831488278e-01, -5.260289375267757e-03, -5.578970493037396e-03, -5.618073982458308e-02, -2.664317560461111e-03, -4.120558667174841e-03, -4.120558667174841e-03, -5.556988149697652e+00, -5.558092169303327e+00, -5.557151736161992e+00, -5.558122331265484e+00, -5.557489719894853e+00, -5.557489719894853e+00, -2.058172990747380e+00, -2.076060460989421e+00, -2.053260224476083e+00, -2.069112751920826e+00, -2.070449720790078e+00, -2.070449720790078e+00, -5.896980162227611e-01, -6.101962950238140e-01, -5.350589533851948e-01, -5.344792000341162e-01, -5.994795369595037e-01, -5.994795369595037e-01, -1.370654688516104e-01, -2.103017796689733e-01, -1.293556992183857e-01, -1.809009259231331e+00, -1.468023280687066e-01, -1.468023280687066e-01, -1.882612515740898e-03, -2.622095167248357e-03, -2.129652487755522e-03, -9.352285873948646e-02, -2.694121691920241e-03, -2.694121691920242e-03, -5.847634585129489e-01, -6.039086525986822e-01, -5.998736386558263e-01, -5.947480884529850e-01, -5.975534655813877e-01, -5.975534655813877e-01, -5.465231648816811e-01, -5.208326604078286e-01, -5.430068236343408e-01, -5.608953872619227e-01, -5.521132571521137e-01, -5.521132571521136e-01, -6.369354943435503e-01, -2.500879849295007e-01, -2.856979371658407e-01, -3.543033704224148e-01, -3.179286229909202e-01, -3.179286229909202e-01, -4.684559850903187e-01, -5.227220400137925e-02, -7.647151263676683e-02, -3.392242973688595e-01, -1.119470348328705e-01, -1.119470348328705e-01, -7.600504148664504e-03, -2.634876498784175e-04, -1.212558417204040e-03, -1.069912542326155e-01, -2.461566086849601e-03, -2.461566086849599e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_vt84_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_vt84", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.706957559742867e+01, -2.707052050767220e+01, -2.706964358537080e+01, -2.707056979924147e+01, -2.707004459280427e+01, -2.707109304644985e+01, -2.706928169921052e+01, -2.707011941352500e+01, -2.706961064483671e+01, -2.707064291975183e+01, -2.706961064483671e+01, -2.707064291975183e+01, -4.223494378241422e+00, -4.223543338338638e+00, -4.223521975601680e+00, -4.223569260633660e+00, -4.224171754609015e+00, -4.224364938388064e+00, -4.223760669256390e+00, -4.223934616422690e+00, -4.222743737665591e+00, -4.224591815500900e+00, -4.222743737665591e+00, -4.224591815500900e+00, -8.004290631339651e-01, -8.059955658030710e-01, -7.983138967362734e-01, -8.052132207772148e-01, -7.692795360091162e-01, -7.588216173068649e-01, -7.697683829615053e-01, -7.730651599002043e-01, -8.159989119700795e-01, -7.187342960284092e-01, -8.159989119700795e-01, -7.187342960284092e-01, -1.823706215627338e-01, -1.953693301866267e-01, -1.858153201115728e-01, -2.009888956790298e-01, -9.364331839792618e-01, -9.779326764093057e-01, -1.352300546166632e-01, -1.379755118170372e-01, -1.905848532276452e-01, -1.196819385766339e-01, -1.905848532276450e-01, -1.196819385766338e-01, -7.599613222690165e-03, -8.023102947519366e-03, -7.910440567104904e-03, -8.414195801022319e-03, -9.929649455406156e-02, -9.988487212805656e-02, -4.942909253969886e-03, -4.880829215051496e-03, -6.875128594283545e-03, -4.113065935612907e-03, -6.875128594283549e-03, -4.113065935612905e-03, -6.595826542481930e+00, -6.594665164430654e+00, -6.595497288216693e+00, -6.594347352904666e+00, -6.595962904463951e+00, -6.594765692191570e+00, -6.595675083080112e+00, -6.594471776487581e+00, -6.595540786812489e+00, -6.594486161881324e+00, -6.595540786812489e+00, -6.594486161881324e+00, -2.444394914288123e+00, -2.446443831793287e+00, -2.475642301004368e+00, -2.476716431851278e+00, -2.430695822987161e+00, -2.436588914258917e+00, -2.458822116908677e+00, -2.465032001195893e+00, -2.471422107380928e+00, -2.463805179336122e+00, -2.471422107380928e+00, -2.463805179336122e+00, -7.181673562254829e-01, -7.167441530216242e-01, -7.924833529510467e-01, -7.929303384666399e-01, -6.470058018828393e-01, -6.723632687366882e-01, -6.876435109209282e-01, -7.112457392339963e-01, -7.484290488248454e-01, -7.088728823994754e-01, -7.484290488248455e-01, -7.088728823994753e-01, -1.272910532548306e-01, -1.267712135759086e-01, -1.789689986860084e-01, -1.797800425936876e-01, -1.231839324941513e-01, -1.243765015711884e-01, -2.390333161347760e+00, -2.389297906171903e+00, -1.248490206158563e-01, -1.211931667818329e-01, -1.248490206158563e-01, -1.211931667818329e-01, -3.839724290608079e-03, -3.988871004069980e-03, -4.748574271020654e-03, -4.824616342424526e-03, -3.464650109555557e-03, -3.620593999416411e-03, -1.071629738200325e-01, -1.080961959761778e-01, -3.632539774108806e-03, -4.742015447305861e-03, -3.632539774108805e-03, -4.742015447305862e-03, -7.280514738494427e-01, -7.309631993369243e-01, -7.194075259565496e-01, -7.222288859313207e-01, -7.204637048140978e-01, -7.233194199385843e-01, -7.226226707728810e-01, -7.254677824501952e-01, -7.213526976740329e-01, -7.242064451047694e-01, -7.213526976740329e-01, -7.242064451047694e-01, -7.179934315761585e-01, -7.202950621042423e-01, -6.333490485483957e-01, -6.361773622932985e-01, -6.555860745023693e-01, -6.582649318971084e-01, -6.689176102547914e-01, -6.711551201224135e-01, -6.618971905206702e-01, -6.645880171056807e-01, -6.618971905206701e-01, -6.645880171056806e-01, -8.303477240848901e-01, -8.319252926526783e-01, -2.356754531708814e-01, -2.374769372919265e-01, -3.003335211012564e-01, -3.051144781402522e-01, -4.207919627095517e-01, -4.229454230658418e-01, -3.648464880090775e-01, -3.649514365376611e-01, -3.648464880090775e-01, -3.649514365376610e-01, -5.599251125908211e-01, -5.657368966671077e-01, -1.009261999935965e-01, -1.010090941924664e-01, -1.060840147656937e-01, -1.064199761581456e-01, -4.041494054494388e-01, -4.150310010535082e-01, -1.113809377224132e-01, -1.078131406554553e-01, -1.113809377224132e-01, -1.078131406554553e-01, -1.054800526735741e-02, -1.089111307946913e-02, -1.078623008126733e-03, -1.239719226569536e-03, -2.763083013299595e-03, -2.915625609318052e-03, -1.082020226698567e-01, -1.089345021636692e-01, -3.366729004293318e-03, -4.396943020787133e-03, -3.366729004293314e-03, -4.396943020787124e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_vt84_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_vt84", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.193681794310853e-08, 0.000000000000000e+00, -4.194050422503929e-08, -4.193803233070803e-08, 0.000000000000000e+00, -4.194138530542563e-08, -4.193993793592890e-08, 0.000000000000000e+00, -4.194467067049687e-08, -4.192630898729870e-08, 0.000000000000000e+00, -4.192726910690431e-08, -4.193765497028155e-08, 0.000000000000000e+00, -4.193276413236155e-08, -4.193765497028155e-08, 0.000000000000000e+00, -4.193276413236155e-08, -2.173856147504669e-05, 0.000000000000000e+00, -2.171493904342052e-05, -2.174677156329096e-05, 0.000000000000000e+00, -2.171860809528503e-05, -2.188706559075101e-05, 0.000000000000000e+00, -2.190635350246279e-05, -2.190975031549406e-05, 0.000000000000000e+00, -2.189121977989893e-05, -2.173607050149439e-05, 0.000000000000000e+00, -2.201800078914548e-05, -2.173607050149439e-05, 0.000000000000000e+00, -2.201800078914548e-05, -7.276693051881652e-03, 0.000000000000000e+00, -7.104537055674228e-03, -7.354322866433630e-03, 0.000000000000000e+00, -7.121591225204241e-03, -8.209171565638601e-03, 0.000000000000000e+00, -8.634738870415236e-03, -8.657706325806681e-03, 0.000000000000000e+00, -8.649811565478709e-03, -6.541109932329505e-03, 0.000000000000000e+00, -9.793401501156273e-03, -6.541109932329505e-03, 0.000000000000000e+00, -9.793401501156273e-03, -1.365276348638650e+00, 0.000000000000000e+00, -1.196131429151868e+00, -1.344128709708106e+00, 0.000000000000000e+00, -1.156264560952213e+00, -2.109285934758714e-03, 0.000000000000000e+00, -1.636240588270160e-03, -2.510702848599695e+00, 0.000000000000000e+00, -2.398083503665182e+00, -1.169720325685684e+00, 0.000000000000000e+00, -4.464903079241179e+00, -1.169720325685683e+00, 0.000000000000000e+00, -4.464903079241186e+00, 2.749225971943702e+02, 0.000000000000000e+00, 2.148189657215472e+02, 2.271263163630175e+02, 0.000000000000000e+00, 1.708770913923286e+02, 3.561193873610488e+01, 0.000000000000000e+00, 2.496964777380796e+01, 1.930805149118953e+03, 0.000000000000000e+00, 2.047236117182340e+03, 4.333927072943879e+02, 0.000000000000000e+00, 3.901527785139206e+03, 4.333927072943873e+02, 0.000000000000000e+00, 3.901527785139203e+03, -1.782382857402306e-05, 0.000000000000000e+00, -1.783721351473759e-05, -1.798516402490766e-05, 0.000000000000000e+00, -1.799325130978641e-05, -1.783322469084274e-05, 0.000000000000000e+00, -1.784289859241117e-05, -1.797160935493613e-05, 0.000000000000000e+00, -1.798460300561507e-05, -1.790582671702287e-05, 0.000000000000000e+00, -1.791526893494859e-05, -1.790582671702287e-05, 0.000000000000000e+00, -1.791526893494859e-05, -1.480448820641581e-04, 0.000000000000000e+00, -1.478254318105843e-04, -1.457936937686061e-04, 0.000000000000000e+00, -1.456623051073372e-04, -1.423750410960650e-04, 0.000000000000000e+00, -1.438146245063071e-04, -1.401434613832012e-04, 0.000000000000000e+00, -1.415213497832144e-04, -1.512258986280139e-04, 0.000000000000000e+00, -1.473123017585307e-04, -1.512258986280139e-04, 0.000000000000000e+00, -1.473123017585307e-04, -4.675657019429724e-02, 0.000000000000000e+00, -4.815953638328761e-02, -4.143236540271784e-02, 0.000000000000000e+00, -4.324690762912382e-02, -4.228715833278695e-02, 0.000000000000000e+00, -4.583758973926960e-02, -2.958154905369186e-02, 0.000000000000000e+00, -3.326616737643696e-02, -4.800117062117881e-02, 0.000000000000000e+00, -5.081703716060552e-02, -4.800117062117883e-02, 0.000000000000000e+00, -5.081703716060553e-02, -3.760245866896742e+00, 0.000000000000000e+00, -3.798687762304897e+00, -9.993432748561570e-01, 0.000000000000000e+00, -9.863423758000228e-01, -4.348229537012260e+00, 0.000000000000000e+00, -4.159403051355499e+00, -2.377030795806791e-04, 0.000000000000000e+00, -2.381972655690637e-04, -3.699639366212609e+00, 0.000000000000000e+00, -3.988347346934976e+00, -3.699639366212609e+00, 0.000000000000000e+00, -3.988347346934976e+00, 5.565436704834129e+03, 0.000000000000000e+00, 4.777559759027334e+03, 2.259815490761300e+03, 0.000000000000000e+00, 2.124352932626576e+03, 7.539433218095087e+03, 0.000000000000000e+00, 6.101054139524693e+03, -5.555618643456216e+00, 0.000000000000000e+00, -5.316730139030118e+00, 6.620423566783718e+03, 0.000000000000000e+00, 2.006410013725645e+03, 6.620423566783700e+03, 0.000000000000000e+00, 2.006410013725645e+03, -3.818026759286590e-01, 0.000000000000000e+00, -3.861814429623411e-01, -2.319361210317524e-01, 0.000000000000000e+00, -2.332827774144469e-01, -2.745316380432954e-01, 0.000000000000000e+00, -2.768549759748085e-01, -3.195084978145464e-01, 0.000000000000000e+00, -3.218764165125302e-01, -2.958557890775811e-01, 0.000000000000000e+00, -2.982011433393704e-01, -2.958557890775811e-01, 0.000000000000000e+00, -2.982011433393704e-01, -2.054181140710906e-01, 0.000000000000000e+00, -2.113706177768329e-01, -5.477632350753533e-02, 0.000000000000000e+00, -5.470086348113599e-02, -7.671852189617766e-02, 0.000000000000000e+00, -7.708364425704091e-02, -1.251794672835335e-01, 0.000000000000000e+00, -1.246394802910292e-01, -9.643471385601306e-02, 0.000000000000000e+00, -9.604398351716670e-02, -9.643471385601306e-02, 0.000000000000000e+00, -9.604398351716668e-02, -2.636298062005695e-02, 0.000000000000000e+00, -2.819284763333253e-02, -4.825748843844448e-01, 0.000000000000000e+00, -4.747874725679135e-01, -2.899335500099032e-01, 0.000000000000000e+00, -2.831942989570071e-01, -1.850210224326146e-01, 0.000000000000000e+00, -1.821583677120979e-01, -2.182828219644437e-01, 0.000000000000000e+00, -2.199814034622964e-01, -2.182828219644436e-01, 0.000000000000000e+00, -2.199814034622966e-01, -7.542958177125904e-02, 0.000000000000000e+00, -7.558146114250495e-02, 4.148619075518206e+01, 0.000000000000000e+00, 3.988721608343371e+01, 3.280955802321954e+00, 0.000000000000000e+00, 1.403905195231433e+00, -2.767792763718070e-01, 0.000000000000000e+00, -3.001088632257998e-01, -6.440753419588227e+00, 0.000000000000000e+00, -7.391638085812860e+00, -6.440753419588242e+00, 0.000000000000000e+00, -7.391638085812873e+00, 6.119854645199950e+01, 0.000000000000000e+00, 5.181700811262814e+01, 1.352510217494246e+05, 0.000000000000000e+00, 1.883236456284858e+05, 2.007337416664399e+04, 0.000000000000000e+00, 1.664080811787341e+04, -7.184235628218665e+00, 0.000000000000000e+00, -7.037919511658096e+00, 8.549531309841977e+03, 0.000000000000000e+00, 2.807975214454609e+03, 8.549531309842043e+03, 0.000000000000000e+00, 2.807975214454604e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_vt84_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_vt84", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([3.066793741015348e-03, 3.067917530913339e-03, 3.066914305344808e-03, 3.068004967329241e-03, 3.067282147020869e-03, 3.068537258246335e-03, 3.065932072583663e-03, 3.066812229028966e-03, 3.066870807583171e-03, 3.067487536022786e-03, 3.066870807583171e-03, 3.067487536022786e-03, 2.842304066885185e-03, 2.833852714178948e-03, 2.844161930860243e-03, 2.834382776355998e-03, 2.872507145706171e-03, 2.875608934440357e-03, 2.894016787330865e-03, 2.887049177006191e-03, 2.839349629278426e-03, 2.913339595928732e-03, 2.839349629278426e-03, 2.913339595928732e-03, 3.192787202613455e-03, 3.087207587164166e-03, 3.243927473415295e-03, 3.090084308758775e-03, 3.606771659448815e-03, 3.931725815094413e-03, 4.519218210749363e-03, 4.602034005905859e-03, 2.609415465390509e-03, 5.154613311325391e-03, 2.609415465390509e-03, 5.154613311325391e-03, 1.177290167627341e-02, 1.443097602171447e-02, 1.295683152254673e-02, 1.633292959101441e-02, 1.824202102940487e-04, 1.078043307632088e-04, 1.945087313353987e-03, 2.501537468730535e-03, 1.172929915338242e-02, 2.909579616785070e-04, 1.172929915338240e-02, 2.909579616785078e-04, -1.232254786682249e-10, -1.738154293925248e-10, -1.459179690211273e-10, -1.834625603317376e-10, -2.105920879971505e-06, -2.227291464216037e-06, -2.084845753349264e-11, -1.934443075950507e-11, -8.435276819706889e-11, -3.226952207683399e-11, -8.435276819706951e-11, -3.226952207683396e-11, 2.001681366841798e-02, 2.002650843497231e-02, 2.020432250226999e-02, 2.020785616540001e-02, 2.003131456728941e-02, 2.003569623954259e-02, 2.019205934466093e-02, 2.020028745064164e-02, 2.010937621887211e-02, 2.011676280480654e-02, 2.010937621887211e-02, 2.011676280480654e-02, 6.529725711200971e-03, 6.557158543302508e-03, 6.822436046408473e-03, 6.841384495608348e-03, 6.149064489075212e-03, 6.283640302034594e-03, 6.386922015984027e-03, 6.527932961010328e-03, 6.985582473401150e-03, 6.749985382081791e-03, 6.985582473401150e-03, 6.749985382081791e-03, 4.480940756924352e-02, 4.664392472170450e-02, 2.906019794667679e-02, 3.068519017672853e-02, 2.164073723075518e-02, 3.023210546217935e-02, 8.579598509783747e-03, 1.326856958645680e-02, 5.473730038333869e-02, 4.458608906886100e-02, 5.473730038333870e-02, 4.458608906886099e-02, 2.000269623685942e-04, 2.167712876831271e-04, 4.611821607994173e-03, 4.673375525175686e-03, 1.163983108036959e-04, 1.687353556146135e-04, 2.934748479978677e-03, 2.936268212342319e-03, 7.127227998953110e-04, 1.724892397278830e-03, 7.127227998953113e-04, 1.724892397278833e-03, -7.211074453798900e-12, -7.438910248733422e-12, -2.007809622634514e-11, -1.880286598985511e-11, -5.581323005059803e-11, -7.473043238139615e-11, 1.379890625828512e-05, 1.458411731630443e-05, -1.272235727541980e-11, -8.128854229983692e-11, -1.272235727541983e-11, -8.128854229983692e-11, 3.454048419766959e-01, 3.531866401001134e-01, 2.837693777650159e-01, 2.892561475177191e-01, 3.176905051722138e-01, 3.245811093144191e-01, 3.432157029495936e-01, 3.504633981632554e-01, 3.312671026237705e-01, 3.383685474912129e-01, 3.312671026237705e-01, 3.383685474912127e-01, 7.708057028034454e-02, 8.135843569648242e-02, 4.879084308318253e-02, 4.947557793548153e-02, 7.654651953461505e-02, 7.795215551138347e-02, 1.279395165471578e-01, 1.286863190844888e-01, 9.748152255231982e-02, 9.858849796833725e-02, 9.748152255231982e-02, 9.858849796833723e-02, 1.935107979410527e-02, 2.127129299019632e-02, 8.795445483621099e-03, 8.990865179801339e-03, 1.609804481664330e-02, 1.693506002676141e-02, 3.529665856292479e-02, 3.507083930692356e-02, 2.758232153021083e-02, 2.790105342355715e-02, 2.758232153021085e-02, 2.790105342355716e-02, 3.927290657003294e-02, 4.141377560001983e-02, -2.139805433276011e-06, -2.105866341825227e-06, -1.253705449414803e-06, -6.997218234234738e-07, 4.432273029667436e-02, 6.023345272087675e-02, 8.809763461251207e-05, 1.880416171925353e-04, 8.809763461251203e-05, 1.880416171925358e-04, -2.167177047224995e-10, -2.349131769472725e-10, -1.300183597112826e-13, -1.327993496166090e-13, -6.708659872615741e-12, -9.107797888992843e-12, 8.375284164028338e-05, 1.231057857958984e-04, -2.990829068592469e-11, -6.411459466151964e-11, -2.990829068592450e-11, -6.411459466151952e-11])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
