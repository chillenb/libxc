
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_gdme_vt_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_vt", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.403577161520668e+01, -1.403584059749397e+01, -1.403625760197415e+01, -1.403512833556639e+01, -1.403580695345321e+01, -1.403580695345321e+01, -3.664590805475261e+00, -3.664596090393732e+00, -3.664792360734368e+00, -3.664823694874166e+00, -3.664602251145287e+00, -3.664602251145287e+00, -8.127219511146250e-01, -8.130790672774645e-01, -8.266143257257640e-01, -8.202905439856057e-01, -8.127763132708165e-01, -8.127763132708165e-01, -2.792454856464446e-01, -2.758427048920047e-01, -9.413761242333415e-01, -3.479509431364249e-01, -2.778866740240526e-01, -2.778866740240525e-01, -2.834557247543929e+00, -2.666222631877174e+00, -7.675708230369829e-01, -7.256682145731857e+00, -2.662794641412831e+00, -2.662794641412829e+00, -4.307495813038389e+01, -1.263295405630893e+01, 1.756262676706977e+02, -5.841925299791087e+01, -1.530563064432925e+00, -8.947397831717987e+00, 1.759687536837729e+02, -4.717431569276702e+00, -2.708947934696650e+00, -2.778265109513721e+00, -2.739154627192435e+00, -1.573504093507091e+00, -9.460280911117540e+00, -3.325913590344896e+00, -6.250474566669741e+00, -7.444335449219861e-01, -8.289794693626316e-01, -1.027357562975008e+00, 3.867985808715617e+00, -3.407841377223499e+00, 2.298375877401527e+01, -2.661457313867112e+00, -1.491594194905271e-01, 1.263354076928952e-01, -9.643990711385182e+01, -6.197193277579302e+04, 8.029315391662270e+04, 5.059293764407287e+00, -3.117097066361437e+01, 4.771236873821204e+02, -4.718555086798106e+04, 1.677403317519508e+04, 3.189784545920619e+05, -4.659735626910058e+02, 1.307700810057557e+04, -6.056870440048359e+05, 2.287422666641965e+05, -6.229455935111945e-01, -4.970002379238986e+00, -8.796415242758028e-02, -9.351970138993826e-01, -1.067642692208010e+01, -1.031847750614505e+01, 3.353405397026990e+01, 6.081522968382187e+01, 6.854824305083020e+00, -1.048458201904628e+00, -6.600536008039681e-01, -5.836670010739751e-01, -1.370912285581782e+01, -1.360712333813049e+00, -4.055366303107810e-01, 1.433208865973073e+01, -1.205232406743758e-01, 6.105513323602249e+01, -1.693818621615895e+03, 5.060501848076252e+02, 9.104461291889661e-01, 2.669746133722865e+01, 4.517268530492249e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_gdme_vt_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_vt", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-4.473073483847897e+01, -4.473083177699237e+01, -4.473131614705632e+01, -4.472972686342169e+01, -4.473078556913856e+01, -4.473078556913856e+01, -6.822569540645449e+00, -6.822584661141479e+00, -6.823314403266425e+00, -6.823638874399855e+00, -6.822608675370744e+00, -6.822608675370744e+00, -1.271046168771146e+00, -1.269344316585515e+00, -1.223809846018689e+00, -1.237722102743249e+00, -1.270450753808343e+00, -1.270450753808343e+00, -3.287477913977411e-01, -3.354987429079573e-01, -1.534234506861613e+00, -1.898425656175615e-01, -3.308855178797325e-01, -3.308855178797326e-01, 9.212929634517786e-01, 8.640634470958690e-01, 1.555538579690626e-01, 2.407591809976377e+00, 8.631779472835267e-01, 8.631779472835285e-01, 2.319285376320828e+00, -7.830190472505315e+00, -7.058134913366916e+01, 7.432159651441617e+00, -1.152993459078887e+01, -9.057656335027179e+00, -6.317839879072670e+01, -2.981532385702279e+00, -3.606284732299468e+00, -3.608046333614516e+00, -3.647339727884388e+00, -4.035889905779503e+00, 1.810980167163732e+00, -3.495948289282382e-01, 8.096433171747891e-01, -1.080513628311693e+00, -1.117699800197367e+00, -1.051573768993241e+00, -1.514021872495497e+00, 7.110953150911666e-01, -7.883066248207374e+00, -3.548293232379003e+00, -2.101017516023517e-01, -3.019333606634925e-01, 3.213573258201272e+01, 2.065729846477637e+04, -2.676439397807335e+04, -1.826255353646763e+00, 1.037897011802956e+01, -1.590525825638818e+02, 1.572713171997156e+04, -5.592722232492884e+03, -1.063275320224994e+05, 1.539419838194712e+02, -4.360384213612624e+03, 2.018942998215249e+05, -7.624876299981019e+04, -9.554708195679513e-01, 4.417370040185248e-01, -1.233657076045447e+00, -9.267633397319384e-01, 2.320313296328299e+00, 1.910537001935159e+00, -1.171237334818995e+01, -2.090637769802542e+01, -3.096284540286868e+00, -3.681132966673142e-01, -4.975814970342007e-01, -8.545050899318487e-01, 4.476809245327915e+00, 3.278080120126340e-01, -6.314101878958712e-01, -4.959737084693670e+00, -1.421997845586420e-01, -2.037932257103537e+01, 5.646027957390592e+02, -1.686898754790784e+02, -4.774709118334826e-01, -8.908802697623116e+00, -1.505852666016216e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gdme_vt_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_vt", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gdme_vt_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_vt", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([-1.104749626008214e-03, -1.104746944425689e-03, -1.104733006622290e-03, -1.104776958523198e-03, -1.104748228338965e-03, -1.104748228338965e-03, -6.785710648371774e-03, -6.785696407244854e-03, -6.785025703542947e-03, -6.784743249481244e-03, -6.785674417547368e-03, -6.785674417547368e-03, -3.539985754030489e-02, -3.543623279216387e-02, -3.640578130258661e-02, -3.612139842342636e-02, -3.541311590909950e-02, -3.541311590909950e-02, -1.294004288706501e-01, -1.277000930889116e-01, -2.953687747746153e-02, -1.784835025654948e-01, -1.288856590070191e-01, -1.288856590070191e-01, -2.316901633088947e+00, -2.211937519293402e+00, -5.441999595155281e-01, -4.829568341183998e+00, -2.235230876168127e+00, -2.235230876168127e+00, -4.533996143650680e-03, -4.533189910075079e-03, -4.533911065880396e-03, -4.533284210030361e-03, -4.533586326356165e-03, -4.533586326356165e-03, -1.207057774505722e-02, -1.198612625356632e-02, -1.210505591383712e-02, -1.203866609650240e-02, -1.196935317527128e-02, -1.196935317527128e-02, -4.066077970535310e-02, -3.743225207937733e-02, -4.285042245622289e-02, -4.108275255547869e-02, -3.915631586260723e-02, -3.915631586260723e-02, -2.429308800880318e-01, -1.284799366817242e-01, -2.460850090579192e-01, -1.230652741313109e-02, -2.100862381503707e-01, -2.100862381503707e-01, -5.006357876667331e+00, -4.380641749739721e+00, -5.844712487913054e+00, -3.903828752166407e-01, -4.807789578974838e+00, -4.807789578974838e+00, -3.940478940753850e-02, -3.961628605334839e-02, -3.954020823783490e-02, -3.948171417501228e-02, -3.951096884832873e-02, -3.951096884832873e-02, -4.071137577178858e-02, -4.692977869964686e-02, -4.492844300189060e-02, -4.321921192805110e-02, -4.407357628640858e-02, -4.407357628640857e-02, -3.570079948526073e-02, -1.021509991506641e-01, -8.601003617741218e-02, -6.727725098987503e-02, -7.606602858387791e-02, -7.606602858387793e-02, -5.203219486523097e-02, -5.875768520517471e-01, -4.340309576521147e-01, -7.120494701447477e-02, -2.993018436548734e-01, -2.993018436548735e-01, -1.976891832476023e+00, -1.600043204040094e+01, -8.422894812905353e+00, -3.137265855980122e-01, -5.657103795213392e+00, -5.657103795213401e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gdme_vt_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_vt", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([4.418998504032856e-03, 4.418987777702756e-03, 4.418932026489159e-03, 4.419107834092792e-03, 4.418992913355859e-03, 4.418992913355859e-03, 2.714284259348710e-02, 2.714278562897941e-02, 2.714010281417179e-02, 2.713897299792498e-02, 2.714269767018947e-02, 2.714269767018947e-02, 1.415994301612196e-01, 1.417449311686555e-01, 1.456231252103465e-01, 1.444855936937054e-01, 1.416524636363980e-01, 1.416524636363980e-01, 5.176017154826004e-01, 5.108003723556463e-01, 1.181475099098462e-01, 7.139340102619791e-01, 5.155426360280763e-01, 5.155426360280763e-01, 9.267606532355787e+00, 8.847750077173609e+00, 2.176799838062113e+00, 1.931827336473599e+01, 8.940923504672508e+00, 8.940923504672508e+00, 1.813598457460272e-02, 1.813275964030031e-02, 1.813564426352159e-02, 1.813313684012144e-02, 1.813434530542466e-02, 1.813434530542466e-02, 4.828231098022887e-02, 4.794450501426527e-02, 4.842022365534846e-02, 4.815466438600961e-02, 4.787741270108511e-02, 4.787741270108511e-02, 1.626431188214124e-01, 1.497290083175093e-01, 1.714016898248916e-01, 1.643310102219147e-01, 1.566252634504289e-01, 1.566252634504289e-01, 9.717235203521272e-01, 5.139197467268968e-01, 9.843400362316769e-01, 4.922610965252435e-02, 8.403449526014826e-01, 8.403449526014826e-01, 2.002543150666932e+01, 1.752256699895888e+01, 2.337884995165222e+01, 1.561531500866563e+00, 1.923115831589935e+01, 1.923115831589935e+01, 1.576191576301540e-01, 1.584651442133935e-01, 1.581608329513396e-01, 1.579268567000491e-01, 1.580438753933149e-01, 1.580438753933149e-01, 1.628455030871543e-01, 1.877191147985874e-01, 1.797137720075624e-01, 1.728768477122044e-01, 1.762943051456343e-01, 1.762943051456343e-01, 1.428031979410429e-01, 4.086039966026562e-01, 3.440401447096487e-01, 2.691090039595001e-01, 3.042641143355116e-01, 3.042641143355116e-01, 2.081287794609239e-01, 2.350307408206989e+00, 1.736123830608459e+00, 2.848197880578991e-01, 1.197207374619494e+00, 1.197207374619494e+00, 7.907567329904090e+00, 6.400172816160378e+01, 3.369157925162141e+01, 1.254906342392049e+00, 2.262841518085357e+01, 2.262841518085360e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
