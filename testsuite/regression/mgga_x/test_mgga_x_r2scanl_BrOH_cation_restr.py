
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_r2scanl_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scanl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.219373717349528e+01, -2.219375093039199e+01, -2.219390832417641e+01, -2.219370208153642e+01, -2.219379646537124e+01, -2.219379646537124e+01, -3.699239348260253e+00, -3.699195659791083e+00, -3.698272142873295e+00, -3.789292344661611e+00, -3.699276138328959e+00, -3.788874026494409e+00, -7.278503601945669e-01, -7.299748769035557e-01, -7.105870050129174e-01, -7.164852877981900e-01, -7.152309472104279e-01, -7.152309472104279e-01, -1.847115507472178e-01, -1.915535080046269e-01, -8.483825177770595e-01, -1.432541186914638e-01, -1.608629134505057e-01, -1.608629134505057e-01, -6.568702416665439e-03, -6.913831336724093e-03, -3.814432273319453e-02, -3.793630973909892e-03, -4.766987687188107e-03, -4.766987687188107e-03, -5.672599922386669e+00, -5.673641338130302e+00, -5.672651790450415e+00, -5.288818912275895e+00, -5.673125699780131e+00, -5.673125699780131e+00, -2.118205222806201e+00, -2.133977379166327e+00, -2.106042516443591e+00, -2.119989532300870e+00, -2.132795741627160e+00, -2.146226593591021e+00, -6.392409720547114e-01, -6.944408281973620e-01, -5.914910396723774e-01, -6.148613592662492e-01, -6.495469595366764e-01, -6.222648495225686e-01, -9.153169642404385e-02, -1.889822786652724e-01, -8.405464384170167e-02, -1.815186150026396e+00, -1.167185807330526e-01, -1.167185807330526e-01, -1.053995295704962e-03, -3.708609903802430e-03, -2.835781396072887e-03, -5.400133795568249e-02, -1.355110094741927e-03, -3.416237370976312e-03, -6.423447928852579e-01, -6.386601455997365e-01, -5.667099010446532e-01, -6.410246559926521e-01, -6.404901047791867e-01, -6.404901047791867e-01, -6.249330154065934e-01, -5.364599783685042e-01, -5.617592998206659e-01, -5.868523935651008e-01, -5.740367746088314e-01, -5.522479386981615e-01, -7.280299097353981e-01, -2.333218432895196e-01, -2.867472521537434e-01, -3.769482717382608e-01, -3.293791550482510e-01, -3.293791550482510e-01, -4.919143841280766e-01, -3.650895950044621e-02, -4.977409309957403e-02, -3.651238497945862e-01, -7.164956997527734e-02, -7.880019738340113e-02, -9.270456143909556e-03, -9.913351863349582e-04, -7.334914025984915e-04, -7.399675478779857e-02, -3.161088173721501e-03, -3.161088173721499e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_r2scanl_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scanl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.526391105313583e+01, -2.526394720165297e+01, -2.526418460896468e+01, -2.526364607107176e+01, -2.526391719321142e+01, -2.526391719321142e+01, -4.257564730099562e+00, -4.257410866934578e+00, -4.253983358954754e+00, "nan", -4.257482893886316e+00, "nan", -9.806849230535269e-01, "nan", "nan", "nan", "nan", "nan", "nan", "nan", -1.095400262503749e+00, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", -6.120336191974354e+00, "nan", "nan", -2.871216868420364e+00, -2.891488814629489e+00, -2.857268968241515e+00, -2.875188737888710e+00, -2.889158963344695e+00, "nan", "nan", "nan", "nan", "nan", "nan", -7.075034240887028e-01, -1.354100939855421e-01, "nan", -1.250585043451882e-01, -3.710025795455409e+00, "nan", "nan", -1.820717305469653e-03, "nan", "nan", -8.283180129130488e-02, -2.178409032849552e-03, "nan", "nan", "nan", -7.172295350517597e-01, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", -6.278571145644193e-01, "nan", -3.248211407544929e-01, "nan", -5.090311123348805e-01, "nan", "nan", -6.626116572215290e-01, "nan", "nan", "nan", -1.069724071051920e-01, "nan", "nan", "nan", -1.364137556110719e-03, "nan", "nan", "nan"]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_r2scanl_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scanl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.095714727257156e-08, -1.095727449212017e-08, -1.095740248903778e-08, -1.095551649678120e-08, -1.095656721794169e-08, -1.095656721794169e-08, -1.079883741513452e-05, -1.080245667147832e-05, -1.088493155443910e-05, "nan", -1.080213507024851e-05, "nan", 3.644448298738932e-04, "nan", "nan", "nan", "nan", "nan", "nan", "nan", -6.642535586749123e-04, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", -3.792550389649032e-06, "nan", "nan", 5.439247540844544e-06, 5.283037962842775e-06, 5.555416642687611e-06, 5.415267821111185e-06, 5.296087884092937e-06, "nan", "nan", "nan", "nan", "nan", "nan", -1.717374429450132e-02, 4.503274081672125e-01, "nan", 5.661713020555091e-01, -2.557003204103627e-04, "nan", "nan", 7.582977316954091e+02, "nan", "nan", 1.722240345816214e+00, 6.896079115634827e+02, "nan", "nan", "nan", -2.616875011553957e-02, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", -2.671166984149482e-02, "nan", 2.894252814337788e-02, "nan", 5.401154517330841e-03, "nan", "nan", 1.706721216539008e-03, "nan", "nan", "nan", 1.000048621680031e+00, "nan", "nan", "nan", 2.863403887379603e+03, "nan", "nan", "nan"]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_r2scanl_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scanl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [3.035044212743250e-04, 3.035088967375858e-04, 3.035200016734381e-04, 3.034535365606382e-04, 3.034896226979449e-04, 3.034896226979449e-04, 1.358410738493185e-03, 1.358828393716032e-03, 1.368429781322275e-03, "nan", 1.358878723095002e-03, "nan", 1.783419078126697e-05, "nan", "nan", "nan", "nan", "nan", 0.000000000000000e+00, "nan", 1.225520293819421e-03, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 1.416040785392805e-03, "nan", "nan", 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, "nan", "nan", "nan", "nan", "nan", "nan", 1.045196202258015e-02, 0.000000000000000e+00, "nan", 0.000000000000000e+00, 1.558107481269695e-68, "nan", "nan", 1.417308581348447e-04, "nan", "nan", 0.000000000000000e+00, 5.527167927777194e-04, "nan", "nan", "nan", 1.362715805483073e-02, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 1.132214069675171e-02, "nan", 0.000000000000000e+00, "nan", 0.000000000000000e+00, "nan", "nan", 3.727064728328748e-05, "nan", "nan", "nan", 0.000000000000000e+00, "nan", "nan", "nan", -3.717697943267801e-59, "nan", "nan", "nan"]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_r2scanl_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scanl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
