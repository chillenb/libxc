
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_r2scanl_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scanl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.324580096702264e+01, -2.324586708742471e+01, -2.324617898051714e+01, -2.324519486708767e+01, -2.324570797308381e+01, -2.324570797308381e+01, -3.427749758620706e+00, -3.427841733595498e+00, -3.430606072860945e+00, -3.432380298287605e+00, -3.430712964143927e+00, -3.430712964143927e+00, -5.985957635223799e-01, -5.979371137348108e-01, -5.827528738318685e-01, -5.931437491232167e-01, -5.904902833329710e-01, -5.904902833329710e-01, -1.734196437780621e-01, -1.760646300168929e-01, -6.557758883338000e-01, -1.127268251620653e-01, -1.358453269688368e-01, -1.358453269688368e-01, -2.594752609109629e-03, -2.792813683039179e-03, -2.393390291226241e-02, -1.220202541045010e-03, -1.704061111682092e-03, -1.704061111682092e-03, -4.081412833352143e+00, -4.224781430162071e+00, -5.669116631231431e+00, -4.142420604570573e+00, -5.669614688500466e+00, -4.704551176218576e+00, -2.095006304720197e+00, -1.725657208420897e+00, -1.966110829879614e+00, -1.988125687572705e+00, -1.976081643957576e+00, -2.132793167487361e+00, -4.759287294875263e-01, -4.864221076860161e-01, -4.408946784550691e-01, -5.078754774353019e-01, -5.648595995720064e-01, -5.325188126933039e-01, -9.153169642404385e-02, -1.436310982205712e-01, -8.405464384170167e-02, -1.701438057885878e+00, -1.102609773514828e-01, -1.102609773514828e-01, -1.059231254970437e-03, -1.502208790587258e-03, -1.231999886180116e-03, -5.400133795568249e-02, -1.241910620961147e-03, -1.485654769316440e-03, -5.558986814683001e-01, -5.544603377865175e-01, -5.546648858776846e-01, -5.498247929930289e-01, -5.552436409240666e-01, -5.548614890678013e-01, -5.407851742323867e-01, -5.154823940858976e-01, -4.156763318294501e-01, -5.864045363494035e-01, -4.731644054174102e-01, -4.367198706030778e-01, -5.263640729286351e-01, -2.333218432895196e-01, -2.785064615582426e-01, -3.769482717382608e-01, -2.558487737031166e-01, -2.683816106645285e-01, -4.498874202326982e-01, -2.848282858952529e-02, -3.279200799010678e-02, -3.278396950167287e-01, -7.164956997527734e-02, -7.164956997527731e-02, -5.093184635296575e-03, -2.781342337924594e-04, -7.349560759829712e-04, -6.669856620032594e-02, -1.368988042149644e-03, -1.368988042149623e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_r2scanl_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scanl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.111037863094956e+01, -3.111046211041325e+01, -3.111086528537639e+01, -3.110962261520761e+01, -3.111026919235731e+01, -3.111026919235731e+01, -3.994156877203346e+00, -3.994185243047806e+00, -3.994759120390770e+00, -3.992468356638180e+00, -3.993325373794280e+00, -3.993325373794280e+00, -7.813476387867689e-01, -7.804040773186149e-01, -7.579868107836562e-01, -7.644370840565577e-01, -7.632349142342414e-01, -7.632349142342414e-01, -1.224140332249688e-01, -1.303553639319052e-01, -8.625904922954033e-01, -1.456756566203909e-01, -1.319334564350684e-01, -1.319334564350683e-01, -4.668603479749794e-03, -5.008107598579962e-03, -3.842654286803143e-02, -2.257446709824067e-03, -3.110455174521563e-03, -3.110455174521564e-03, -4.999126083146095e+00, -5.542548397818198e+00, -7.576216698804751e+00, -4.916709720970638e+00, -7.576778195835129e+00, -6.152886193745564e+00, -2.837640936012684e+00, -2.280557405238187e+00, -2.010805973520952e+00, -2.034021851568775e+00, -2.066099584583474e+00, -2.887871894899705e+00, -5.804977592224357e-01, -6.342749762126770e-01, -5.400355666919128e-01, -6.746229267765294e-01, -7.031858261017860e-01, -7.014529994913438e-01, -1.354100939855421e-01, -1.982882593856838e-01, -1.250585043451882e-01, -2.326251735406372e+00, -1.594756907019615e-01, -1.594756907019615e-01, -1.896416134765179e-03, -2.749610356011299e-03, -2.232006626918320e-03, -8.283180129130488e-02, -2.205955445265203e-03, -2.699499217434411e-03, -7.402855796288630e-01, -7.286405718681420e-01, -7.334368392253811e-01, -7.222619054324136e-01, -7.364159282973523e-01, -7.353373579852432e-01, -7.209334445042677e-01, -5.622848583916712e-01, -5.129279084889170e-01, -7.840158773605057e-01, -6.212009724274935e-01, -5.292969334038078e-01, -6.299484869391646e-01, -3.248211407544929e-01, -3.766365596384581e-01, -5.090311123348805e-01, -3.380934968153169e-01, -3.503035252171061e-01, -4.983325474876246e-01, -4.608272175493999e-02, -5.152605102811935e-02, -3.779395448955883e-01, -1.069724071051920e-01, -1.069724071051920e-01, -9.010921842487122e-03, -5.274120284291388e-04, -1.370731654286294e-03, -1.002017469246492e-01, -2.503362222321640e-03, -2.503362222321543e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_r2scanl_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scanl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([2.936362243906471e-10, 2.936289934800393e-10, 2.936021815337098e-10, 2.937096510034608e-10, 2.936525804544851e-10, 2.936525804544851e-10, -1.704212162491585e-05, -1.704312165995986e-05, -1.706682077018983e-05, -1.704148812264012e-05, -1.705527512609078e-05, -1.705527512609078e-05, -4.236246450497717e-03, -4.224410630010425e-03, -3.989362165580200e-03, -4.171706052495540e-03, -4.119184125683476e-03, -4.119184125683476e-03, -2.059286112279624e+00, -1.952905689571683e+00, -1.448141218850093e-03, -6.333228095345849e-01, -1.777109800531222e+00, -1.777109800531229e+00, 1.824410858131727e+02, 1.706508691556257e+02, 3.758006404142091e+00, 4.922780478699700e+02, 3.626816573432199e+02, 3.626816573432203e+02, -1.794715361145123e-06, -2.069379924445230e-06, 7.038291921649175e-08, -1.433203618487483e-06, 7.020197499203948e-08, -2.948179830478607e-06, -1.663986992864673e-05, -4.040380864280438e-05, -1.463174674096876e-04, -1.419931601412132e-04, -1.422283360469292e-04, 5.114176262088212e-06, -3.437021664476904e-03, -9.727007869307604e-03, -4.180882961017410e-03, -2.670676867482457e-02, -1.885898708987182e-02, -1.097175703092832e-02, 4.503274081672125e-01, 3.990619963825651e-02, 5.661713020555091e-01, -1.719880242670536e-04, 3.234145588352020e-01, 3.234145588352020e-01, 1.043183124291229e+03, 6.335260142881110e+02, 2.802392242066864e+03, 1.722240345816214e+00, 1.393580185448380e+03, 1.321335574852852e+03, -1.203784727040031e-03, -5.772942814138667e-03, -4.177904779591297e-03, -1.971130236865454e-03, -3.507211670658611e-03, -3.454090001293823e-03, -4.642190156720298e-04, -3.183818505108647e-02, -5.975322164266632e-03, 6.547019341148185e-04, -1.820264445366664e-02, -3.352777043225103e-03, -5.601112151386807e-03, 2.894252814337788e-02, -2.636133980434190e-02, 5.401154517330841e-03, -2.727188373859446e-02, -7.100103056321191e-02, -5.361586277003604e-02, 5.270832889657954e+00, 1.982897463364477e+00, -1.825666616865387e-01, 1.000048621680031e+00, 1.000048621680039e+00, 1.048741449470270e+02, 1.539974146323890e+04, 2.889891356927035e+03, 1.171465933227580e+00, 1.784970374752880e+03, 1.784970374752435e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_r2scanl_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scanl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.981497911076187e-03, 1.981648059102115e-03, 1.985675825848330e-03, 1.985331171589306e-03, 1.984936893688882e-03, 1.984936893688882e-03, 2.818127379823303e-03, 2.810481271356098e-03, 2.680167266277319e-03, 2.950971178720745e-03, 2.865375147374226e-03, 2.865375147374226e-03, 3.294211493291695e-02, 3.263985307485706e-02, 7.209650602691996e-04, 5.110545639112526e-03, 1.802557526401679e-02, 1.802557526401686e-02, -3.295164891643386e-06, -3.334709198999964e-06, 2.510098238998863e-05, -4.923881173568138e-06, -4.499071050249768e-06, -4.499071050249718e-06, 8.853825344702151e-08, 1.252678931634708e-04, 0.000000000000000e+00, -1.151502304407924e-05, 0.000000000000000e+00, 7.527120085021343e-04, -5.627088691283165e-06, 7.023193903226678e-04, 3.227911639327794e-03, 3.197538792129463e-03, 3.226102165286195e-03, 4.124856047027113e-06, -8.490643842144993e-05, 1.390709208487031e-04, -8.633067977279698e-05, 8.199439194791500e-03, 1.009012963233605e-02, 4.303036120893312e-03, 0.000000000000000e+00, -3.789131559473076e-05, 0.000000000000000e+00, 2.136759383200370e-03, 0.000000000000000e+00, 0.000000000000000e+00, -1.720738986871298e-06, -2.050296942650296e-12, -7.875907691094789e-12, 0.000000000000000e+00, -1.527720150119759e-05, -1.116544794934724e-08, -3.749748697036680e-11, -2.416026377441948e-10, -7.935033520148283e-13, -4.569234249820482e-07, -2.317661821365985e-09, -2.406338577640423e-13, -2.412013730392361e-12, 1.139344763576146e-02, -7.304856345650558e-05, 0.000000000000000e+00, 5.233384721733451e-03, -8.757293188752584e-05, -1.066833784121776e-04, 0.000000000000000e+00, -2.404342913110335e-05, 0.000000000000000e+00, 1.161391161961749e-03, 5.108866160186454e-03, 1.442509791853448e-02, 0.000000000000000e+00, 2.281808279510697e-05, 1.930734029804184e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.022603315533039e-09, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
