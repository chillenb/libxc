
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_revm06_l_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revm06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.402112922617876e+01, -2.402119262503841e+01, -2.402158418872329e+01, -2.402054924110067e+01, -2.402116168032812e+01, -2.402116168032812e+01, -3.371271338604399e+00, -3.371380171755759e+00, -3.374928433378057e+00, -3.375919396938176e+00, -3.371304078272056e+00, -3.371304078272056e+00, -5.783877206910436e-01, -5.776826236335174e-01, -5.593182276792213e-01, -5.767600374203364e-01, -5.781463538625066e-01, -5.781463538625066e-01, -1.805276230848923e-01, -1.839632417075253e-01, -5.577638450384542e-01, -7.651179853357425e-02, -1.814914378742630e-01, -1.814914378742630e-01, -7.470369695450289e-03, -7.813654179921284e-03, -2.778781438108279e-02, -3.632989886867177e-03, -7.731985984260703e-03, -7.731985984260702e-03, -5.785514844221898e+00, -5.782033002901732e+00, -5.785160746365466e+00, -5.782454430729891e+00, -5.783753454773636e+00, -5.783753454773636e+00, -2.056673476158473e+00, -2.080113847239833e+00, -2.054823191767120e+00, -2.073369413157272e+00, -2.075028775046601e+00, -2.075028775046601e+00, -6.052005298153806e-01, -6.671342139850543e-01, -5.499970639511585e-01, -5.806033473695146e-01, -6.423024318771969e-01, -6.423024318771969e-01, -5.165476294535992e-02, -1.529213947912506e-01, -5.103526060408300e-02, -1.927855936650130e+00, -6.467523223214403e-02, -6.467523223214403e-02, -3.503270987824660e-03, -4.002083492720057e-03, -2.998319003027735e-03, -3.605321990360479e-02, -3.647564889628768e-03, -3.647564889628768e-03, -5.425156397142986e-01, -5.663012190621195e-01, -5.447854689845688e-01, -5.341664785900313e-01, -5.383835446193936e-01, -5.383835446193936e-01, -5.129590799159537e-01, -5.498531500062103e-01, -5.830655832152493e-01, -6.080155373076122e-01, -5.967689486085814e-01, -5.967689486085814e-01, -6.861415388787958e-01, -2.258003091503879e-01, -2.802882743273985e-01, -3.518700162736181e-01, -3.184485020156442e-01, -3.184485020156441e-01, -4.707326295124044e-01, -2.631590217390826e-02, -3.309804921186827e-02, -3.322015745350386e-01, -4.218397600960359e-02, -4.218397600960356e-02, -8.781582900407280e-03, -1.098565048792300e-03, -2.084871119694848e-03, -4.023175121370937e-02, -3.101115003785386e-03, -3.101115003785382e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_revm06_l_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revm06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.031388145872012e+01, -3.031380756326120e+01, -3.031348844144296e+01, -3.031467769317297e+01, -3.031384265186194e+01, -3.031384265186194e+01, -4.717348327637794e+00, -4.717619217881876e+00, -4.725864584081139e+00, -4.721923510678161e+00, -4.717453195222307e+00, -4.717453195222307e+00, -8.648253844545634e-01, -8.648165146216621e-01, -8.687977695113702e-01, -8.663438701811218e-01, -8.648059759709411e-01, -8.648059759709411e-01, -2.642795034869218e-01, -2.626652245024016e-01, -1.053298135429249e+00, -1.337094380905501e-01, -2.638013817530682e-01, -2.638013817530682e-01, -9.779568168173741e-03, -1.021211699296616e-02, -3.148458820036500e-02, -4.834117338462085e-03, -1.010481524511607e-02, -1.010481524511568e-02, -6.409348846575730e+00, -6.381960540968287e+00, -6.406301223431112e+00, -6.385024268078419e+00, -6.395712645147094e+00, -6.395712645147094e+00, -2.484059359003791e+00, -2.517143440155402e+00, -2.471341846402389e+00, -2.496125299505623e+00, -2.525171403479379e+00, -2.525171403479379e+00, -8.480512746053478e-01, -9.372862424892986e-01, -7.787916271697385e-01, -8.725326507551345e-01, -8.913047845642860e-01, -8.913047845642860e-01, -6.628059702963623e-02, -2.876662956524395e-01, -6.744869182099991e-02, -2.942746218739676e+00, -1.110191553783753e-01, -1.110191553783753e-01, -4.658524237998478e-03, -5.320186733829017e-03, -3.983109600194466e-03, -3.892092620474263e-02, -4.851008887771123e-03, -4.851008887771294e-03, -8.584013972835275e-01, -5.258203494309474e-01, -5.730833889897126e-01, -6.599567354380752e-01, -6.101059836281395e-01, -6.101059836281395e-01, -6.484908343256567e-01, -7.134084435323282e-01, -7.650846414912313e-01, -7.576776015271652e-01, -7.757451925794996e-01, -7.757451925794997e-01, -1.006432548348266e+00, -3.514939886467902e-01, -3.664150532482369e-01, -4.490966058975283e-01, -3.887041629815080e-01, -3.887041629815079e-01, -6.124030169361566e-01, -3.040920799976558e-02, -3.602235576576433e-02, -4.486079924523441e-01, -5.062530801421808e-02, -5.062530801422015e-02, -1.155751257615966e-02, -1.464475689246011e-03, -2.776113332551510e-03, -4.813891931146495e-02, -4.125943525706063e-03, -4.125943525705939e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revm06_l_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revm06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.279981820286847e-08, -1.279976306643632e-08, -1.279936100874876e-08, -1.280026962215837e-08, -1.279979039594738e-08, -1.279979039594738e-08, -1.481298706463996e-05, -1.481397056884530e-05, -1.484033768378948e-05, -1.480982703609148e-05, -1.481307853761846e-05, -1.481307853761846e-05, -7.780589941347594e-03, -7.768813486122814e-03, -7.332350961058208e-03, -7.360105691241839e-03, -7.776753967664758e-03, -7.776753967664758e-03, -8.085683503151386e-01, -8.164657825080124e-01, -3.367059275501637e-03, -4.607942700968847e-01, -8.112880862701197e-01, -8.112880862701197e-01, 1.393069390657715e+00, 1.412260927155133e+00, 3.894513123207822e-01, 2.086869843087319e+00, 1.450689784137644e+00, 1.450689784137646e+00, -3.816244604539426e-06, -3.816128761407216e-06, -3.816218400844723e-06, -3.816128810331831e-06, -3.816218030609764e-06, -3.816218030609764e-06, -1.117111734650245e-04, -1.104983419878388e-04, -1.112020985753731e-04, -1.102956984688449e-04, -1.115115810033333e-04, -1.115115810033333e-04, -2.127299892698425e-02, -1.850473750124944e-02, -2.484802852684948e-02, -2.491425540390593e-02, -1.920656989911174e-02, -1.920656989911174e-02, -2.382437489223821e-01, -3.641974404873339e-01, -3.021825127895717e-01, -2.068073647390560e-04, -5.444884074631948e-01, -5.444884074631948e-01, 1.667518346802406e+00, 1.966842525222862e+00, 4.172164067241756e+00, 3.241937228838474e-01, 3.290332993553779e+00, 3.290332993553777e+00, -2.205050422495597e-02, -2.228520461754446e-02, -2.189995263560832e-02, -2.174080109327649e-02, -2.179515054207861e-02, -2.179515054207861e-02, -2.489389195831199e-02, -3.353112467271065e-02, -3.245611503586511e-02, -3.113021658214183e-02, -3.190719469475518e-02, -3.190719469475518e-02, -1.496709173215162e-02, -2.626595370881711e-01, -2.003331860353993e-01, -1.206116668332721e-01, -1.622762143490385e-01, -1.622762143490386e-01, -4.697776362470141e-02, 3.190750069483074e-01, 2.220362580684692e-01, -1.727470708651490e-01, -3.131774770146039e-01, -3.131774770146028e-01, 2.082176857146579e+00, 4.423890339846944e+00, 2.005666769290440e+00, -3.725544069973274e-01, 4.921927360812244e+00, 4.921927360812228e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revm06_l_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revm06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revm06_l_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revm06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.958802078188745e-03, 1.958699143787060e-03, 1.958250251194494e-03, 1.959925100650692e-03, 1.958747833227108e-03, 1.958747833227108e-03, 8.641521599273285e-03, 8.643815463747808e-03, 8.713159112965023e-03, 8.690831688825855e-03, 8.642083243180044e-03, 8.642083243180044e-03, 3.013709082557161e-02, 3.021968979235321e-02, 3.230633495842432e-02, 3.228603829970959e-02, 3.016709038826387e-02, 3.016709038826387e-02, 1.345254785632873e-01, 1.319134900264724e-01, 2.105092603403779e-02, 3.716066633174445e-02, 1.337317595719009e-01, 1.337317595719009e-01, -2.489789574144230e-04, -2.834952016224342e-04, -4.681365858152753e-03, -1.115962419778442e-05, -2.870190897498429e-04, -2.870190897501493e-04, -5.223458820632117e-03, -5.687091179862184e-03, -5.274261866977350e-03, -5.634478246354440e-03, -5.454735705017966e-03, -5.454735705017966e-03, 1.361790985870290e-02, 1.404395886935097e-02, 1.349882650622703e-02, 1.381781666332970e-02, 1.409469679727027e-02, 1.409469679727027e-02, 7.898910716986711e-02, 6.429885718320215e-02, 6.764956215125482e-02, 8.198808719859625e-02, 8.236079963493564e-02, 8.236079963493564e-02, 2.910198214606438e-03, 1.035712615496140e-01, 5.054361415088112e-03, 2.470505776769368e-02, 3.487332223339919e-02, 3.487332223339919e-02, -1.443895122412051e-05, -1.835897919349307e-05, -2.889882649890572e-05, -6.897911970388208e-03, -1.759654918080541e-05, -1.759654918054711e-05, 6.682974421822350e-01, -4.359640974035457e-01, -3.447808478729610e-01, -1.004284660711277e-01, -2.487310862126950e-01, -2.487310862126950e-01, -9.661727707411258e-02, 9.157070076608007e-02, 9.856154732804559e-02, 5.172232456857288e-02, 9.050304001273599e-02, 9.050304001273599e-02, 7.240438258545961e-02, 1.069380916423393e-01, 8.644696998905813e-02, 7.370391701357364e-02, 7.506940000187497e-02, 7.506940000187497e-02, 7.540092094790359e-02, -3.707921143468366e-03, -6.071612101353450e-03, 9.702188640858707e-02, -1.136382865317308e-03, -1.136382865317532e-03, -1.743346976783826e-04, -4.468515615806554e-07, -5.309002529460409e-06, -1.393888752156751e-03, -1.528184702333111e-05, -1.528184702327113e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
