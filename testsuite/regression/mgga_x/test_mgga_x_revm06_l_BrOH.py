
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_revm06_l_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revm06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.199332594468918e+01, -2.199342924690654e+01, -2.199392476451826e+01, -2.199223744633251e+01, -2.199338006709748e+01, -2.199338006709748e+01, -2.990954573751545e+00, -2.991102082643946e+00, -2.995653327122966e+00, -2.994128482393497e+00, -2.991009746846340e+00, -3.768440782230068e+00, -4.777596781754138e-01, -6.962868627482020e-01, -6.616587442278098e-01, -6.748363815473714e-01, -6.970765470362134e-01, -6.970765470362134e-01, -1.855924983283029e-01, -1.898214413954249e-01, -4.842682781611663e-01, -8.108322451771285e-02, -1.868520015878666e-01, -1.868520015878666e-01, -7.470143279730085e-03, -7.813324658595064e-03, -2.775015714707803e-02, -3.632450451636582e-03, -7.731705200273364e-03, -7.731705200273362e-03, -5.787843467159787e+00, -5.784335834500105e+00, -5.787457137579259e+00, -5.413609081404762e+00, -5.786108679310972e+00, -5.786108679310972e+00, -1.609317299138208e+00, -1.633945295056266e+00, -1.598930036453763e+00, -1.618269932454907e+00, -1.639674750955074e+00, -2.126599237571056e+00, -6.422554981824274e-01, -7.127519353015563e-01, -6.015377245389951e-01, -6.406517225735856e-01, -6.733553476514058e-01, -5.866926208288611e-01, -4.336365705180163e-02, -1.557397553185754e-01, -4.191536956309506e-02, -2.144392020297935e+00, -6.607987816336697e-02, -6.607987816336697e-02, -1.999858406185222e-03, -4.001543679531519e-03, -2.998172655632381e-03, -3.731831354247361e-02, -2.087607859489151e-03, -3.646870075427874e-03, -5.475913930157522e-01, -5.711983107389498e-01, -5.336251719550208e-01, -5.390885487524428e-01, -5.432890325894333e-01, -5.432890325894333e-01, -5.226995607938759e-01, -5.543581325393573e-01, -5.895681994663416e-01, -6.164209124902944e-01, -6.046075723794558e-01, -5.445622893721789e-01, -7.448216599289518e-01, -1.483191800838199e-01, -2.890763193351921e-01, -2.902351312012975e-01, -3.328599210293117e-01, -3.328599210293117e-01, -3.950910104414308e-01, -2.629834356410474e-02, -3.305221187476174e-02, -3.595597606488243e-01, -3.740708444719761e-02, -4.248913092928014e-02, -8.774273623277047e-03, -1.098535609078366e-03, -2.084846311517757e-03, -4.054044678811958e-02, -3.100566799655284e-03, -3.100566799655280e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_revm06_l_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revm06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.240872230377578e+01, -3.240863163863224e+01, -3.240830051816094e+01, -3.240976517375353e+01, -3.240867410131079e+01, -3.240867410131079e+01, -5.008717320274566e+00, -5.008982565038417e+00, -5.017144042224779e+00, -5.014383464748063e+00, -5.008814774625648e+00, -4.598495168361701e+00, -8.951896764824465e-01, -9.280267686867762e-01, -9.556719729702831e-01, -9.396789734419984e-01, -9.273168445687975e-01, -9.273168445687975e-01, -2.703507487533058e-01, -2.690834864760693e-01, -1.053860015400174e+00, -1.498256829776084e-01, -2.700629963948217e-01, -2.700629963948217e-01, -9.777921722882672e-03, -1.020973328718675e-02, -3.125549485555649e-02, -4.830950647687060e-03, -1.010277786131987e-02, -1.010277786131948e-02, -6.406815286015037e+00, -6.379442891256890e+00, -6.403801416728226e+00, -6.835494007483512e+00, -6.393143883197219e+00, -6.393143883197219e+00, -2.690810068459986e+00, -2.730755412491008e+00, -2.674515572636976e+00, -2.705162313293358e+00, -2.740254711901855e+00, -2.526818803431051e+00, -8.279933254968463e-01, -8.934128866116275e-01, -7.575923513748575e-01, -8.288251910109704e-01, -8.710193272710952e-01, -9.427681627424573e-01, -2.924124002605752e-02, -2.942322845235306e-01, -2.941290665958407e-02, -2.773287618840876e+00, -1.162167960397441e-01, -1.162167960397441e-01, -2.753371601376772e-03, -5.316879540229582e-03, -3.982121591497616e-03, -3.659588827719207e-02, -2.882183227675823e-03, -4.846942324698119e-03, -8.527099103393311e-01, -5.189390090757431e-01, -5.888936049278019e-01, -6.536340353891213e-01, -6.035816645535269e-01, -6.035816645535269e-01, -6.358327687324381e-01, -7.116839186179169e-01, -7.608351798017312e-01, -7.497257625764158e-01, -7.695746163699161e-01, -8.275717930946238e-01, -9.555085196542588e-01, -3.101255299925461e-01, -3.731312015974524e-01, -4.851074706071948e-01, -3.924688266043044e-01, -3.924688266043045e-01, -6.621401236537827e-01, -3.029208548553023e-02, -3.576682698845433e-02, -4.414148245908519e-01, -2.393405871920423e-02, -5.201310589871361e-02, -1.151479773954146e-02, -1.464312424310757e-03, -2.775941536523629e-03, -4.955646902714250e-02, -4.122762167401959e-03, -4.122762167401833e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revm06_l_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revm06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.464887456542071e-08, -1.464876237650313e-08, -1.464815435380231e-08, -1.464999670058649e-08, -1.464881625991609e-08, -1.464881625991609e-08, -1.779344388377378e-05, -1.779411764416991e-05, -1.781183414130826e-05, -1.779928555422066e-05, -1.779329236167682e-05, -1.203062393477234e-05, -1.072177701605031e-02, -4.982389832295398e-03, -4.740952587843604e-03, -4.938279060719653e-03, -4.988041956194489e-03, -4.988041956194489e-03, -7.439025570816603e-01, -7.448599752005090e-01, -4.260232419986500e-03, -3.191123801595090e-01, -7.437341553037030e-01, -7.437341553037030e-01, 1.248701460083688e+00, 1.230415400341953e+00, 1.538037048919510e-01, 4.718088909642277e-01, 1.286755468364333e+00, 1.286755468364333e+00, -3.813818896477080e-06, -3.813731108670571e-06, -3.813826393755994e-06, -4.211212230125264e-06, -3.813765228183790e-06, -3.813765228183790e-06, -1.702863190325314e-04, -1.670276520505634e-04, -1.715632738892688e-04, -1.690209337792501e-04, -1.664650158862395e-04, -1.058291775660868e-04, -1.917274678788845e-02, -1.667474629451153e-02, -2.113808203922491e-02, -2.119255057358981e-02, -1.772144628646532e-02, -2.203704488100351e-02, -3.910008062663579e+00, -3.379822168541577e-01, -4.353034464881809e+00, -1.741076652770503e-04, -4.669444746067451e-01, -4.669444746067451e-01, -1.528409030561827e+06, 5.932856730517607e-01, 2.328227025748464e+00, -2.235332357386812e+01, -1.299646018219910e+06, 7.317868410573608e-01, -2.177854405496362e-02, -2.201880699962862e-02, -2.250987084956870e-02, -2.147605632217254e-02, -2.153071758562203e-02, -2.153071758562203e-02, -2.428088745778352e-02, -3.302676313595002e-02, -3.184064132002615e-02, -3.044737622772683e-02, -3.121884432417301e-02, -3.670980672055303e-02, -1.312809448052994e-02, -6.530939117716116e-01, -1.844239458668344e-01, -1.652574884752232e-01, -1.465904609320337e-01, -1.465904609320338e-01, -6.227960445935786e-02, 1.878956609359748e-01, 3.958123293965560e-02, -1.486096826066053e-01, -7.879811654061660e+00, -3.170506641540679e-01, 4.930286363809558e-01, 6.644523848773913e-01, 1.300391523898629e+00, -3.789412208749826e-01, 1.030568445954452e+00, 1.030568445954456e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revm06_l_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revm06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.808350003437194e-03, 1.808256087924907e-03, 1.807841994406171e-03, 1.809369807447811e-03, 1.808300553521271e-03, 1.808300553521271e-03, 7.684802108373113e-03, 7.687058374436431e-03, 7.754932701408306e-03, 7.727968036455926e-03, 7.685391811047509e-03, 9.638435645814245e-03, 2.413370791841727e-02, 3.732345482436912e-02, 3.901157393078589e-02, 3.851431160562305e-02, 3.727445790137704e-02, 3.727445790137704e-02, 1.387132963619535e-01, 1.365823688506875e-01, 1.775553709933818e-02, 4.358956169894517e-02, 1.381164194133087e-01, 1.381164194133087e-01, -2.474322951997653e-04, -2.812632425245802e-04, -4.428477624215588e-03, -9.972335675433849e-06, -2.850611033343360e-04, -2.850611033346424e-04, -5.223883901311104e-03, -5.687627403001962e-03, -5.274693717270737e-03, -5.548895483086765e-03, -5.455224743132998e-03, -5.455224743132998e-03, 1.046666626387961e-02, 1.088462506058205e-02, 1.029432006439566e-02, 1.060794982078465e-02, 1.100414058845294e-02, 1.445999886368174e-02, 8.318566401720585e-02, 6.824617550478380e-02, 7.344518841119882e-02, 8.919326497482540e-02, 8.575741668976057e-02, 7.625726978573423e-02, -1.711636952287107e-02, 1.059107798834216e-01, -1.718029133273639e-02, 2.705255070292533e-02, 3.751675636761994e-02, 3.751675636761994e-02, 7.470762639851730e-05, -1.683658052544698e-05, -2.784196482762241e-05, -8.077902383563002e-03, 8.570734070835198e-05, -1.570011284187629e-05, 6.720521069043562e-01, -4.380195629237754e-01, -3.410653510391566e-01, -1.007943380405397e-01, -2.498689993162490e-01, -2.498689993162490e-01, -9.731737361457134e-02, 9.223232865866315e-02, 9.950063641163448e-02, 5.246389403273309e-02, 9.153601474539871e-02, 8.360736985130730e-02, 7.767501557807391e-02, 6.589590081267051e-02, 8.949119546294412e-02, 6.005024546367056e-02, 7.887320203381612e-02, 7.887320203381609e-02, 6.377278114456802e-02, -3.597910325898683e-03, -5.600740961824005e-03, 1.047391452953450e-01, -2.031893116661548e-02, 3.117144281352687e-04, -1.563638057486527e-04, -3.843839575957736e-07, -5.168838955085102e-06, 2.359353407558309e-04, -1.355906781169137e-05, -1.355906781163139e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
