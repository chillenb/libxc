
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_revscan_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revscan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.318952965419582e+01, -2.318959831028611e+01, -2.318995050737096e+01, -2.318892992804317e+01, -2.318945798418248e+01, -2.318945798418248e+01, -3.358239350946916e+00, -3.358379819512193e+00, -3.362488717736409e+00, -3.363794120276424e+00, -3.362252156530464e+00, -3.362252156530464e+00, -5.885425612122532e-01, -5.878389627737511e-01, -5.721713957207141e-01, -5.847349269226279e-01, -5.831350726175251e-01, -5.831350726175251e-01, -1.799629640851123e-01, -1.819460275108526e-01, -6.443803613735046e-01, -1.139647804981754e-01, -1.646196698712294e-01, -1.646196698712294e-01, -2.568281950759716e-03, -2.761817614755075e-03, -2.373615448456276e-02, -1.195542333537832e-03, -1.934385675668162e-03, -1.934385675668162e-03, -5.668106323387732e+00, -5.669210353438402e+00, -5.668180263072854e+00, -5.669153994380517e+00, -5.668654048722341e+00, -5.668654048722341e+00, -2.081597574908914e+00, -2.103904708335560e+00, -2.074513681016672e+00, -2.094371106606665e+00, -2.097549589252899e+00, -2.097549589252899e+00, -6.178291636151909e-01, -6.712167066128174e-01, -5.437798515450796e-01, -5.558382317380856e-01, -6.307275127315359e-01, -6.307275127315359e-01, -7.331215852840803e-02, -1.729365426662414e-01, -6.712994203980800e-02, -1.914728698341011e+00, -9.465815864109604e-02, -9.465815864109606e-02, -8.575624898664774e-04, -1.176602840894240e-03, -9.691616160465773e-04, -4.263058588980131e-02, -1.238460582662114e-03, -1.238460582662114e-03, -6.401095851066364e-01, -6.364969301235726e-01, -6.377778872713090e-01, -6.388245907550449e-01, -6.383004240077713e-01, -6.383004240077713e-01, -6.204400335054612e-01, -5.322948978258695e-01, -5.578299953264825e-01, -5.829229352829057e-01, -5.699598606339147e-01, -5.699598606339147e-01, -6.946329583753044e-01, -2.288987243972731e-01, -2.730751746525004e-01, -3.517255569025596e-01, -3.132969514099570e-01, -3.132969514099569e-01, -4.785140102237577e-01, -2.246748941691898e-02, -3.255250249848018e-02, -3.456735570985199e-01, -5.755824182562659e-02, -5.755824182562661e-02, -3.976561668421911e-03, -2.172430315793031e-04, -5.750067245350432e-04, -5.490876354091029e-02, -1.121809106764327e-03, -1.121809106764326e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_revscan_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revscan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.027453455819912e+01, -3.027461980221522e+01, -3.027465617646190e+01, -3.027470812085034e+01, -3.027505019741900e+01, -3.027527130789500e+01, -3.027367780566259e+01, -3.027352187699992e+01, -3.027460731360901e+01, -3.027422473788307e+01, -3.027460731360901e+01, -3.027422473788307e+01, -4.762870591772978e+00, -4.759860135529046e+00, -4.763923985547701e+00, -4.760349382853425e+00, -4.781342148788739e+00, -4.783875020508717e+00, -4.783853674736080e+00, -4.782210269058714e+00, -4.759960399591545e+00, -4.796689081613234e+00, -4.759960399591545e+00, -4.796689081613234e+00, -8.300996614127732e-01, -8.376166829749823e-01, -8.279662765146525e-01, -8.362313930479874e-01, -7.980615980315251e-01, -7.951935963006874e-01, -8.208591839562733e-01, -8.265709705473437e-01, -8.414559119919884e-01, -7.881527047624569e-01, -8.414559119919884e-01, -7.881527047624569e-01, -1.470618711626141e-01, -2.009123827407591e-01, -1.465871648960367e-01, -2.052653309516928e-01, -8.180028858471688e-01, -8.505513458328017e-01, -1.473859643539786e-01, -1.109914841528448e-01, -1.443348767095655e-01, -1.104529051509648e-01, -1.443348767095656e-01, -1.104529051509648e-01, -4.012143075809904e-03, -1.977003832016604e-03, -4.532228420564691e-03, -4.445498378627322e-03, -3.614624353144654e-02, -3.797774149860826e-02, -2.228858513379511e-03, -2.173817415334774e-03, -3.765336305782734e-03, -1.937817980582671e-03, -3.765336305782737e-03, -1.937817980582671e-03, -7.429374657150847e+00, -7.427579993457008e+00, -7.431695641519493e+00, -7.429821924871734e+00, -7.429515960238709e+00, -7.427665929707409e+00, -7.431507034298605e+00, -7.429702193924864e+00, -7.430554226330019e+00, -7.428704548099479e+00, -7.430554226330019e+00, -7.428704548099479e+00, -2.582666567839754e+00, -2.585278862271961e+00, -2.620319875365006e+00, -2.621510711135781e+00, -2.562822538727675e+00, -2.570842942501460e+00, -2.596555094404333e+00, -2.604712896024165e+00, -2.619752604458453e+00, -2.606806254329356e+00, -2.619752604458453e+00, -2.606806254329356e+00, -8.228728745704270e-01, -8.207910155969481e-01, -9.273916321547049e-01, -9.271606598538444e-01, -7.450719437834882e-01, -7.747815895543764e-01, -8.411447360510690e-01, -8.613806218943485e-01, -8.606882799397785e-01, -8.166772493404788e-01, -8.606882799397784e-01, -8.166772493404788e-01, -9.833851207761436e-02, -1.009651412583316e-01, -8.000556593709927e-02, -7.570071801180937e-02, -9.238997088583918e-02, -9.447972547516822e-02, -2.925137940877113e+00, -2.923767612421679e+00, -8.854431328550108e-02, -3.409962932237239e-02, -8.854431328550090e-02, -3.409962932237167e-02, -1.558057244298405e-03, -1.620577111174808e-03, -2.151352126412332e-03, -2.180243764000891e-03, -1.688453700695501e-03, -1.838071202165375e-03, -6.389070449479885e-02, -6.182820167979850e-02, -1.637907518075187e-03, -2.467371350281838e-03, -1.637907518075186e-03, -2.467371350281838e-03, -8.525845524380066e-01, -8.559488882135490e-01, -8.427749706876633e-01, -8.462019773480364e-01, -8.461414071758584e-01, -8.495688396538099e-01, -8.490085876945429e-01, -8.523763724182946e-01, -8.475680112071844e-01, -8.509648108428406e-01, -8.475680112071844e-01, -8.509648108428406e-01, -8.322621811944827e-01, -8.349479871916964e-01, -6.778524379612538e-01, -6.812559579823333e-01, -7.207416837115213e-01, -7.244014873252119e-01, -7.643704323412338e-01, -7.672014266694495e-01, -7.421386390018937e-01, -7.451251696238349e-01, -7.421386390018936e-01, -7.451251696238350e-01, -9.794002739148044e-01, -9.784037045341194e-01, -2.259711921521651e-01, -2.277679964830208e-01, -2.911796245261349e-01, -2.985618688924790e-01, -4.517582980431963e-01, -4.548456361438120e-01, -3.714430894023695e-01, -3.719164642976027e-01, -3.714430894023695e-01, -3.719164642976027e-01, -6.078238449520252e-01, -6.149309566882910e-01, -3.093443083849873e-02, -3.301186035343126e-02, -4.897708615981004e-02, -5.058974887989024e-02, -4.510888375368912e-01, -4.611267670919022e-01, -7.557162738405049e-02, -7.696887767328059e-02, -7.557162738405054e-02, -7.696887767328063e-02, -6.861219302755957e-03, -7.189431727502764e-03, -3.995250145691070e-04, -4.241602979412992e-04, -1.019541949774300e-03, -1.115431970220844e-03, -6.903496625313682e-02, 5.450123729262408e-03, -1.619261473747253e-03, -2.210288003539705e-03, -1.619261473747251e-03, -2.210288003539704e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revscan_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revscan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.083317046061173e-08, 0.000000000000000e+00, -1.083095160677337e-08, -1.083305233896635e-08, 0.000000000000000e+00, -1.083086609185767e-08, -1.083229223270941e-08, 0.000000000000000e+00, -1.082988458848926e-08, -1.083361360696914e-08, 0.000000000000000e+00, -1.083157102725976e-08, -1.083311057812671e-08, 0.000000000000000e+00, -1.083061742358855e-08, -1.083311057812671e-08, 0.000000000000000e+00, -1.083061742358855e-08, -3.518219395643360e-05, 0.000000000000000e+00, -3.495119890629588e-05, -3.525507084208618e-05, 0.000000000000000e+00, -3.498268176573461e-05, -3.642705739412644e-05, 0.000000000000000e+00, -3.658242076094309e-05, -3.671213840672667e-05, 0.000000000000000e+00, -3.656077847340956e-05, -3.505902467405999e-05, 0.000000000000000e+00, -3.752483974652914e-05, -3.505902467405999e-05, 0.000000000000000e+00, -3.752483974652914e-05, -1.061560215310545e-02, 0.000000000000000e+00, -1.104405240324025e-02, -1.052409493724366e-02, 0.000000000000000e+00, -1.097580033320064e-02, -9.085023180078741e-03, 0.000000000000000e+00, -9.253974625713552e-03, -1.096268548463614e-02, 0.000000000000000e+00, -1.140484251952769e-02, -1.091852616643219e-02, 0.000000000000000e+00, -1.300185145621572e-02, -1.091852616643219e-02, 0.000000000000000e+00, -1.300185145621572e-02, -4.480643579980042e+00, 0.000000000000000e+00, -2.177606093551016e+00, -4.738665187313707e+00, 0.000000000000000e+00, -2.173645908752970e+00, -2.748408818254762e-03, 0.000000000000000e+00, -3.340889146853001e-03, -1.035739522663392e+00, 0.000000000000000e+00, -5.344686991833543e+00, -4.313685886636230e+00, 0.000000000000000e+00, 3.267806449711806e-01, -4.313685886636224e+00, 0.000000000000000e+00, 3.267806449711804e-01, 1.993674303072267e+01, 0.000000000000000e+00, -1.708638011358520e+03, 2.160006154631468e+02, 0.000000000000000e+00, -1.390444142670831e+02, 5.108603065703980e+00, 0.000000000000000e+00, 2.667842913122116e+00, 8.804487393214474e+02, 0.000000000000000e+00, 8.921797252856898e+02, 4.222370211648555e+02, 0.000000000000000e+00, 2.098207153285762e+03, 4.222370211648585e+02, 0.000000000000000e+00, 2.098207153285764e+03, -3.047572129217686e-06, 0.000000000000000e+00, -3.049662899379739e-06, -3.048464904707900e-06, 0.000000000000000e+00, -3.050527423590245e-06, -3.047316635089259e-06, 0.000000000000000e+00, -3.049472743713295e-06, -3.048093686659384e-06, 0.000000000000000e+00, -3.050268775934083e-06, -3.048259843715848e-06, 0.000000000000000e+00, -3.050134934673642e-06, -3.048259843715848e-06, 0.000000000000000e+00, -3.050134934673642e-06, -1.779927120072901e-04, 0.000000000000000e+00, -1.756418338819209e-04, -1.624665299817135e-04, 0.000000000000000e+00, -1.609716483846587e-04, -1.717333969445076e-04, 0.000000000000000e+00, -1.715650940957135e-04, -1.582810835031851e-04, 0.000000000000000e+00, -1.579025248213229e-04, -1.727988497314313e-04, 0.000000000000000e+00, -1.680999701438137e-04, -1.727988497314313e-04, 0.000000000000000e+00, -1.680999701438137e-04, -3.251718032326591e-02, 0.000000000000000e+00, -3.190285838466791e-02, -2.707709815102121e-02, 0.000000000000000e+00, -2.633760427949697e-02, -7.837001235274257e-02, 0.000000000000000e+00, -5.938614282288958e-02, -8.296736741479759e-02, 0.000000000000000e+00, -6.701688400597916e-02, -2.447543438242805e-02, 0.000000000000000e+00, -3.565975719385243e-02, -2.447543438242805e-02, 0.000000000000000e+00, -3.565975719385241e-02, -1.707918732297567e+00, 0.000000000000000e+00, -1.313885876013266e+00, -4.440335026838923e+00, 0.000000000000000e+00, -4.535443773165263e+00, -6.147673411373356e-01, 0.000000000000000e+00, -1.622002228310427e+00, -5.539544125898883e-04, 0.000000000000000e+00, -5.547434450859520e-04, -6.522721233600301e+00, 0.000000000000000e+00, -1.811758829091839e+01, -6.522721233600332e+00, 0.000000000000000e+00, -1.811758829091851e+01, 1.765045004054882e+03, 0.000000000000000e+00, 1.521363553805804e+03, 1.049846417538230e+03, 0.000000000000000e+00, 9.778611661793786e+02, 4.620041233090561e+03, 0.000000000000000e+00, 4.422677713896872e+03, 1.268832623813976e+00, 0.000000000000000e+00, -1.583252981042660e+00, 3.023996309698264e+03, 0.000000000000000e+00, 1.498608647549466e+03, 3.023996309698259e+03, 0.000000000000000e+00, 1.498608647549463e+03, -2.312075565998734e-02, 0.000000000000000e+00, -2.274094696956938e-02, -2.240182735335230e-02, 0.000000000000000e+00, -2.204715920221380e-02, -2.264085594113695e-02, 0.000000000000000e+00, -2.227929071264262e-02, -2.285390429113811e-02, 0.000000000000000e+00, -2.248364196506094e-02, -2.274727709366356e-02, 0.000000000000000e+00, -2.238097530378944e-02, -2.274727709366356e-02, 0.000000000000000e+00, -2.238097530378945e-02, -2.819567243503475e-02, 0.000000000000000e+00, -2.768374228380961e-02, -3.538105516742967e-02, 0.000000000000000e+00, -3.479078562447804e-02, -3.211740682521919e-02, 0.000000000000000e+00, -3.157946270942430e-02, -2.998548508350912e-02, 0.000000000000000e+00, -2.957586574896051e-02, -3.124860990970659e-02, 0.000000000000000e+00, -3.067318438666528e-02, -3.124860990970661e-02, 0.000000000000000e+00, -3.067318438666529e-02, -2.672747066508482e-02, 0.000000000000000e+00, -2.516633765964799e-02, -1.079236192632216e+00, 0.000000000000000e+00, -1.065192132694498e+00, -6.988751227214877e-01, 0.000000000000000e+00, -6.611317877836488e-01, -3.571756995520110e-01, 0.000000000000000e+00, -3.540485386100214e-01, -4.439149927241436e-01, 0.000000000000000e+00, -4.448834792035464e-01, -4.439149927241427e-01, 0.000000000000000e+00, -4.448834792035463e-01, -8.016646115511072e-02, 0.000000000000000e+00, -7.348766518620820e-02, -1.195174182968449e+01, 0.000000000000000e+00, -4.930644397336213e+00, 1.840179381224445e+00, 0.000000000000000e+00, 1.233862278846766e+00, -4.422934073523547e-01, 0.000000000000000e+00, -2.917846015654795e-01, -2.953680366435006e+00, 0.000000000000000e+00, -5.315844064756412e+00, -2.953680366434994e+00, 0.000000000000000e+00, -5.315844064756392e+00, 1.678606230957143e+02, 0.000000000000000e+00, 1.586592487274499e+02, 2.046711156655615e+04, 0.000000000000000e+00, 2.846907157290341e+04, 4.655491889758013e+03, 0.000000000000000e+00, 4.338382183515182e+03, -5.738354445258530e+00, 0.000000000000000e+00, -5.218224723982782e+01, 4.983808120766872e+03, 0.000000000000000e+00, 1.837055463563798e+03, 4.983808120766883e+03, 0.000000000000000e+00, 1.837055463563812e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revscan_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revscan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revscan_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revscan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [8.762709880047618e-04, 8.761227565567416e-04, 8.762693759270114e-04, 8.761216043931709e-04, 8.762406683990252e-04, 8.760871001914111e-04, 8.762580064968079e-04, 8.761093707455158e-04, 8.762706423198541e-04, 8.760832581346034e-04, 8.762706423198541e-04, 8.760832581346034e-04, 1.041097696825380e-02, 1.032837591479665e-02, 1.043597818465300e-02, 1.033884587677987e-02, 1.083533857696152e-02, 1.088782879298132e-02, 1.095179982929595e-02, 1.089720758088262e-02, 1.036300282664783e-02, 1.122807984863949e-02, 1.036300282664783e-02, 1.122807984863949e-02, 1.875724512207292e-02, 1.960412739802790e-02, 1.859351563519872e-02, 1.943724744863148e-02, 1.579064583007171e-02, 1.646357016864616e-02, 2.095627191416385e-02, 2.196808458427785e-02, 1.895320426863783e-02, 2.526256123182388e-02, 1.895320426863783e-02, 2.526256123182388e-02, 1.794949585875118e-01, 1.008972411563939e-01, 1.961801071800422e-01, 1.057475106610062e-01, 1.895059220759661e-03, 2.835997340462762e-03, 2.216720788901906e-02, 1.026455113489409e-01, 1.957480825508680e-01, 2.159765320935799e-03, 1.957480825508677e-01, 2.159765320935799e-03, 5.567516614379625e-04, 3.871432926654548e-03, 2.453953673628577e-04, 1.000912966525446e-03, 9.993821685636345e-04, 1.738020259805655e-03, 7.647835114503826e-07, 9.940672138630136e-07, 3.933467353036708e-05, 3.311953097359432e-07, 3.933467353036458e-05, 3.311953097359422e-07, 3.570001419709585e-03, 3.570095777427459e-03, 3.572138532941583e-03, 3.572162206706825e-03, 3.569847025510035e-03, 3.569970056118076e-03, 3.571690890125270e-03, 3.571857088088660e-03, 3.571302429350465e-03, 3.571167643149887e-03, 3.571302429350465e-03, 3.571167643149887e-03, 1.108062695315840e-02, 1.094544301822309e-02, 1.039303183795367e-02, 1.029900136903424e-02, 1.055868648703150e-02, 1.059527576829254e-02, 9.968896506423266e-03, 9.992576701241805e-03, 1.102623779941184e-02, 1.063576743064510e-02, 1.102623779941184e-02, 1.063576743064510e-02, 5.101646012705259e-02, 4.979867643323886e-02, 5.131315809195758e-02, 5.010997294705869e-02, 8.701757129647278e-02, 7.544826523664161e-02, 9.551656647344904e-02, 8.858621873890223e-02, 4.357283043905922e-02, 5.354614595249317e-02, 4.357283043905922e-02, 5.354614595249316e-02, 1.432237082918328e-02, 1.222654539288270e-02, 1.871805069922450e-01, 1.938300817826769e-01, 6.840562015532969e-03, 1.256646303156070e-02, 2.713696400616820e-02, 2.713971308288526e-02, 6.271409221452461e-02, 1.972647597079406e-01, 6.271409221452491e-02, 1.972647597079418e-01, 2.225764045151774e-08, 2.573946543577978e-08, 1.864272486154523e-07, 1.464388629286564e-07, 1.943964191520000e-06, 2.378018838740133e-06, 2.102290626067722e-03, 6.237565771364206e-03, 2.527013824535645e-08, 7.223643187240114e-05, 2.527013824535656e-08, 7.223643187240180e-05, 3.694916790928381e-02, 3.677206656621896e-02, 3.577670897199398e-02, 3.562226141958388e-02, 3.617196031422776e-02, 3.601179251051578e-02, 3.651537054706453e-02, 3.634572499102835e-02, 3.634357018082741e-02, 3.617811328506683e-02, 3.634357018082741e-02, 3.617811328506683e-02, 4.072024902265518e-02, 4.042064815325297e-02, 3.557244339989519e-02, 3.542986519931779e-02, 3.644995823164673e-02, 3.630628688348671e-02, 3.786539783937168e-02, 3.773738559444496e-02, 3.738363678454310e-02, 3.712529050188956e-02, 3.738363678454312e-02, 3.712529050188956e-02, 5.727847827117510e-02, 5.445020281431906e-02, 9.390762846895433e-02, 9.426721696276254e-02, 1.033052801425689e-01, 1.007715450777077e-01, 1.169720901775502e-01, 1.177055096226247e-01, 9.991494132109165e-02, 1.000063324112246e-01, 9.991494132109147e-02, 1.000063324112245e-01, 5.956785295011453e-02, 5.597410564975385e-02, 6.009346653308327e-03, 3.973416678004401e-03, 1.733411560488973e-03, 2.179643392162083e-03, 1.254245407911889e-01, 8.870879284278869e-02, 1.260893214599070e-02, 2.212664279469449e-02, 1.260893214599067e-02, 2.212664279469446e-02, 2.364460452580802e-06, 2.343255345633278e-06, 4.268372704628195e-10, 3.160430927230226e-10, 1.120359235208246e-06, 1.365399858822989e-06, 1.849671910399710e-02, 1.377219894112883e-01, 7.869884373601855e-08, 5.328891134297347e-05, 7.869884373601824e-08, 5.328891134297133e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
