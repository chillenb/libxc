
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_revscan_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revscan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.175026807685796e+01, -2.175039811621591e+01, -2.175096700522418e+01, -2.249549692782784e+01, -2.249630374970396e+01, -2.324268142333106e+01, -3.418795106898589e+00, -3.766105205887187e+00, -3.766585173402737e+00, -3.766732617647796e+00, -3.766325669671105e+00, -3.419110289480258e+00, -5.174817418036609e-01, -6.185489568035040e-01, -6.986034280212388e-01, -6.036366100550143e-01, -5.035008316875573e-01, -7.053259413460424e-01, -1.587580442825001e-01, -1.617612447484484e-01, -6.975505889677815e-01, -1.361525816044937e-01, -1.759190536795791e-01, -1.723641492392687e-01, -3.275295249624506e-03, -3.964998354156828e-03, -2.773368834054248e-02, -1.499323900345511e-03, -2.454868368297392e-03, -2.454868368297392e-03, -5.669020401279267e+00, -5.670114039027997e+00, -5.669075296435043e+00, -5.670040670559274e+00, -5.561951558028872e+00, -5.562043287304880e+00, -2.115662312237330e+00, -2.131831046408172e+00, -2.103799081065715e+00, -2.118119877819924e+00, -1.902440797595139e+00, -2.130358572801335e+00, -5.917517868768351e-01, -6.936735914393457e-01, -5.889134131261431e-01, -6.133495613459321e-01, -6.072626316494589e-01, -6.486930980092167e-01, -9.062583806764843e-02, -1.546283605654006e-01, -8.325846759329422e-02, -2.086482507408975e+00, -1.098714301826628e-01, -1.098714301826628e-01, -1.421816248217845e-03, -1.435765374143022e-03, -1.212401502708692e-03, -4.662757626688045e-02, -1.545273379036188e-03, -1.545273379036135e-03, -6.423270168158682e-01, -6.385505838162961e-01, -6.306981546828367e-01, -6.372439595162411e-01, -6.321278761090023e-01, -6.362591173789585e-01, -6.249060974897975e-01, -4.952560730020590e-01, -5.267107217505911e-01, -5.862425118353438e-01, -5.730859212015429e-01, -5.487395409264590e-01, -6.995966602030551e-01, -2.330515659552025e-01, -2.417932781389818e-01, -3.342561419969408e-01, -3.257144539533124e-01, -2.835986267071989e-01, -4.911117199801327e-01, -2.371131623070922e-02, -4.088116920782862e-02, -3.631761142377015e-01, -7.113983171293523e-02, -7.113983171293523e-02, -6.018324821078906e-03, -2.266204238704104e-04, -1.352495670593746e-03, -4.829357303462846e-02, -1.401435200780610e-03, -1.917349044792827e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_revscan_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revscan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.273125430299046e+01, -3.273028115492425e+01, -3.273122337579213e+01, -3.273025891307631e+01, -3.273119660220024e+01, -3.273020069828424e+01, -3.273153517133941e+01, -3.026627080044000e+01, -3.273122868363253e+01, -3.026697112632815e+01, -3.026730768846185e+01, -3.026697112632814e+01, -4.743210114605257e+00, -5.350126033708831e+00, -4.743311752816195e+00, -4.743136763994946e+00, -4.745262135692133e+00, -4.745660250873691e+00, -4.744953858624917e+00, -4.745022719047250e+00, -4.742223479863254e+00, -4.746866178068117e+00, -5.348453214187234e+00, -4.746866178068117e+00, -7.878875247493969e-01, -7.998581778633740e-01, -7.841682329353317e-01, -8.573909126288429e-01, -8.169568979416358e-01, -8.083329421276866e-01, -8.259686488040744e-01, -7.576760757787004e-01, -8.118209050470191e-01, -6.960663140326817e-01, -8.671169954671996e-01, -7.772628077684668e-01, -1.783922124952809e-01, -2.115001869590961e-01, -1.815941085320152e-01, -2.179539837915299e-01, -8.591151186264161e-01, -8.443612447464921e-01, -9.298143472656469e-02, -1.065397371253955e-01, -2.049052712911480e-01, 1.763667911359773e-02, -2.049052712911477e-01, -9.119661764829988e-02, 8.342745009943394e-01, 7.997905222998136e-01, -5.768488279040506e-03, 7.563532595032587e-01, -3.215169078586169e-02, 2.518443756309208e-01, 1.313954010814224e+00, 1.322243062811444e+00, 9.188703854319271e-01, 1.056082547020412e+00, 9.188703854319271e-01, 1.056082547020339e+00, -7.429015251761172e+00, -7.427241546509520e+00, -7.431334743490286e+00, -7.429482337099609e+00, -7.429164756083309e+00, -7.427333404042868e+00, -7.431154335859047e+00, -7.429368399034652e+00, -7.747494325585524e+00, -7.428364463875563e+00, -7.430187723143372e+00, -7.745639691286977e+00, -2.633185282560986e+00, -2.633865349288110e+00, -2.660505955290444e+00, -2.660327532545252e+00, -2.609549464565328e+00, -2.617009269193569e+00, -2.633528819366174e+00, -2.641193826362214e+00, -2.666024842087756e+00, -2.790943318109015e+00, -2.666024842087756e+00, -2.650275369554437e+00, -8.191269723443830e-01, -7.988624903117024e-01, -9.037752976166765e-01, -9.049213156806339e-01, -7.284478345973825e-01, -7.626505910633352e-01, -7.723930272689874e-01, -8.020634065958581e-01, -8.570582816661810e-01, -8.187665288125135e-01, -8.570582816661810e-01, -8.105328265286798e-01, 1.523926849581921e-02, 1.288231898545257e-02, -1.746637111671026e-01, -1.751397515369157e-01, 4.253403119665251e-02, 2.349678871663547e-02, -2.692746364384772e+00, -2.691599683106220e+00, -4.093704517109793e-02, -7.390527522605526e-02, -4.093704517109804e-02, -7.390527522605533e-02, -2.482244456197912e-03, 1.797858159489105e+00, 1.374750675066514e+00, 1.433337903215773e+00, 7.394528439811018e-01, 6.864528316021646e-01, 1.223522653173977e-01, -5.411730309630391e-02, 1.433567250881836e+00, 7.353688076860337e-01, 1.433567250881735e+00, 7.353688076868167e-01, -8.499978704135033e-01, -8.534118432621947e-01, -8.409695889886205e-01, -8.444205282578522e-01, -8.565678965898980e-01, -8.597291739465595e-01, -8.567634507112992e-01, -8.501317286454625e-01, -8.566420423435203e-01, -8.598195777485781e-01, -8.566420423435201e-01, -8.488310173199866e-01, -8.265996177231240e-01, -8.294742659446973e-01, -6.793715637803760e-01, -6.170345976568715e-01, -7.213497864702645e-01, -8.260710114669956e-01, -7.633123711092159e-01, -7.661250465818605e-01, -7.419980747839077e-01, -7.449704097945744e-01, -7.419980747839076e-01, -8.289575430428796e-01, -9.425784139373214e-01, -1.038447788548494e+00, -2.529431887282543e-01, -2.551790679053083e-01, -2.941773247769257e-01, -3.314118614542033e-01, -4.822689966929488e-01, -4.684332594682615e-01, -3.960738602858659e-01, -3.962187312872145e-01, -3.960738602858657e-01, -3.879869533750451e-01, -6.169890895901357e-01, -6.227815905527835e-01, -3.154932702339105e-02, -3.176547636224687e-02, 2.061283123229876e-01, 1.918022677959178e-01, -4.532087109092902e-01, -4.645732172720401e-01, 4.827673229815710e-02, 1.987359232142788e-02, 4.827673229815641e-02, 1.987359232142843e-02, -7.874706236408157e-03, -8.160278421217327e-03, 2.810209656621728e+00, 2.811438636108833e+00, -1.742828410787811e-03, -1.853643401103880e-03, -6.429123931212349e-02, -6.542270623882199e-02, 1.011439075789745e+00, 7.662793369114332e-01, 1.011439075798561e+00, -3.060756537344436e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revscan_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revscan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.257279792813499e-08, 0.000000000000000e+00, -3.256573317426859e-08, -3.257131535738750e-08, 0.000000000000000e+00, -3.256465781595907e-08, -3.256688783617846e-08, 0.000000000000000e+00, -3.255822764086427e-08, -3.258355421072323e-08, 0.000000000000000e+00, -1.014572570685205e-08, -3.257187034711097e-08, 0.000000000000000e+00, -1.014525488677883e-08, -1.014461684323609e-08, 0.000000000000000e+00, -1.014525488677883e-08, -1.226569140709598e-05, 0.000000000000000e+00, -4.199505529781798e-05, -1.226603731417661e-05, 0.000000000000000e+00, -1.226622032643030e-05, -1.227300820855197e-05, 0.000000000000000e+00, -1.227374539573949e-05, -1.226633082930615e-05, 0.000000000000000e+00, -1.226565537819737e-05, -1.227278604035300e-05, 0.000000000000000e+00, -1.227104055005741e-05, -4.200149867887825e-05, 0.000000000000000e+00, -1.227104055005741e-05, -2.121893596341103e-02, 0.000000000000000e+00, -2.083083218018188e-02, -2.136684258936955e-02, 0.000000000000000e+00, -8.188606839355258e-03, -8.986403192681524e-03, 0.000000000000000e+00, -9.224704054696591e-03, -8.880216336239720e-03, 0.000000000000000e+00, -2.279466334524261e-02, -2.016663813764792e-02, 0.000000000000000e+00, -2.670571165852853e-02, -7.934750842035489e-03, 0.000000000000000e+00, -1.011373918472441e-02, -5.208485957939617e+00, 0.000000000000000e+00, -1.678710165752509e+00, -4.959362917805249e+00, 0.000000000000000e+00, -1.570856648162506e+00, -4.584513033704901e-03, 0.000000000000000e+00, -1.085543422849603e-02, -5.336778216067766e+00, 0.000000000000000e+00, -5.077043113074255e+00, -1.631045115574116e+00, 0.000000000000000e+00, -1.835750473938064e+01, -1.631045115574116e+00, 0.000000000000000e+00, -5.457735038660171e+01, -7.207061444459044e+05, 0.000000000000000e+00, -5.774913214197488e+05, -3.227240892288895e+06, 0.000000000000000e+00, -4.743208085253963e+05, -3.369441774580671e+03, 0.000000000000000e+00, -7.973132132206757e+02, -4.449237687477031e+06, 0.000000000000000e+00, -4.732551485099005e+06, -1.088007928426143e+06, 0.000000000000000e+00, -8.850070190555945e+06, -1.088007928426143e+06, 0.000000000000000e+00, -8.850070190555334e+06, -3.032761990896153e-06, 0.000000000000000e+00, -3.035690358108085e-06, -3.033818368792213e-06, 0.000000000000000e+00, -3.036713124068570e-06, -3.032855471060670e-06, 0.000000000000000e+00, -3.035750765970892e-06, -3.033759912673378e-06, 0.000000000000000e+00, -3.036677891009980e-06, -6.825477701194279e-06, 0.000000000000000e+00, -3.036198996368086e-06, -3.033276221960279e-06, 0.000000000000000e+00, -6.832568606070802e-06, -1.192141654425288e-04, 0.000000000000000e+00, -1.192952462956497e-04, -1.163202054480603e-04, 0.000000000000000e+00, -1.164867468118571e-04, -1.216962112458043e-04, 0.000000000000000e+00, -1.210565059543429e-04, -1.191142752543290e-04, 0.000000000000000e+00, -1.184639789104430e-04, -1.158194768590017e-04, 0.000000000000000e+00, -3.269543812603966e-04, -1.158194768590017e-04, 0.000000000000000e+00, -1.175705394646310e-04, -1.614092727812236e-02, 0.000000000000000e+00, -3.631371665235277e-02, -1.288661990065260e-02, 0.000000000000000e+00, -1.294290497788582e-02, -2.234860904075667e-02, 0.000000000000000e+00, -1.987038507606245e-02, -2.011564340487776e-02, 0.000000000000000e+00, -1.805319788071273e-02, -1.420496629349333e-02, 0.000000000000000e+00, -4.555252965815174e-02, -1.420496629349333e-02, 0.000000000000000e+00, -1.702651077618187e-02, -2.208141943180445e+01, 0.000000000000000e+00, -2.127535529307676e+01, -4.862361783891929e+00, 0.000000000000000e+00, -1.730951011146963e+00, -3.266170615026510e+01, 0.000000000000000e+00, -2.666777655660416e+01, -1.455522160825536e-04, 0.000000000000000e+00, -1.458322826580067e-04, -1.311096847067767e+01, 0.000000000000000e+00, -1.052839840420776e+01, -1.311096847067766e+01, 0.000000000000000e+00, -1.052839840420777e+01, -9.409414060111843e+07, 0.000000000000000e+00, -1.049821100681815e+07, -5.088629544151179e+06, 0.000000000000000e+00, -4.761309589762785e+06, -1.758486008104244e+07, 0.000000000000000e+00, -1.440737983506369e+07, -1.396208534617348e+02, 0.000000000000000e+00, -4.270931272585088e+02, -1.386593598923363e+07, 0.000000000000000e+00, -4.909960569451438e+06, -1.386593598923265e+07, 0.000000000000000e+00, -4.909960569456635e+06, -2.097704334102561e-02, 0.000000000000000e+00, -2.068746586763695e-02, -2.042295761980385e-02, 0.000000000000000e+00, -2.014686697277552e-02, -2.964882907585430e-02, 0.000000000000000e+00, -2.899054598563067e-02, -2.800744249094012e-02, 0.000000000000000e+00, -2.047883480537585e-02, -2.881538899231432e-02, 0.000000000000000e+00, -2.819968082798679e-02, -2.881538899231432e-02, 0.000000000000000e+00, -2.039893380734855e-02, -2.321821122603279e-02, 0.000000000000000e+00, -2.295396221794770e-02, -3.196106031744224e-02, 0.000000000000000e+00, -3.458285706123110e-02, -2.820785181664414e-02, 0.000000000000000e+00, -1.248699678929760e-01, -2.560791313979349e-02, 0.000000000000000e+00, -2.528363757338487e-02, -2.679457294993869e-02, 0.000000000000000e+00, -2.644973099764520e-02, -2.679457294993866e-02, 0.000000000000000e+00, -1.030568383188774e-01, -1.035220776262895e-02, 0.000000000000000e+00, -3.727058644365774e-02, -7.076354228618665e-01, 0.000000000000000e+00, -6.919122098812686e-01, -9.151673444054266e-01, 0.000000000000000e+00, -3.373722377555756e-01, -3.196875991437644e-01, 0.000000000000000e+00, -1.182180993361976e-01, -2.028776689868248e-01, 0.000000000000000e+00, -2.032898991431914e-01, -2.028776689868251e-01, 0.000000000000000e+00, -4.959523890983108e-01, -4.320040460883040e-02, 0.000000000000000e+00, -4.228136368105361e-02, -3.633880789986687e+03, 0.000000000000000e+00, -3.536078229518830e+03, -3.378643826984958e+02, 0.000000000000000e+00, -2.983190326138737e+02, -1.462677049024243e-01, 0.000000000000000e+00, -1.411895577485288e-01, -6.072308843433724e+01, 0.000000000000000e+00, -4.939258208685893e+01, -6.072308843433709e+01, 0.000000000000000e+00, -4.939258208685916e+01, -9.293630645277103e+05, 0.000000000000000e+00, -8.059653745986131e+05, -5.716700258466299e+08, 0.000000000000000e+00, -5.667664973644239e+08, -3.871884218543954e+08, 0.000000000000000e+00, -3.025795886570141e+08, -2.177938553458095e+02, 0.000000000000000e+00, -2.039309787657751e+02, -1.850474585880968e+07, 0.000000000000000e+00, -6.760808838766635e+06, -1.850474585897078e+07, 0.000000000000000e+00, -4.070823270145221e+07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revscan_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revscan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.187475284774087e-03, 2.187039334677444e-03, 2.187403812354036e-03, 2.186987510452832e-03, 2.187197931811287e-03, 2.186686240294923e-03, 2.188000300981495e-03, 8.312943326764190e-04, 2.187429843755251e-03, 8.312980100401997e-04, 8.312796238137152e-04, 8.312980100401997e-04, 4.457205171013325e-03, 9.433168224595844e-03, 4.457354452027613e-03, 4.457233838328752e-03, 4.460283547514765e-03, 4.460762375538343e-03, 4.458841046533630e-03, 4.458782759431096e-03, 4.457586966968991e-03, 4.461346270501237e-03, 9.427372488684116e-03, 4.461346270501237e-03, 9.491144837648258e-03, 1.035210899988683e-02, 9.255011769076482e-03, 2.145979634904801e-02, 2.175204270337896e-02, 2.186385011721458e-02, 2.175059829817785e-02, 7.916009022184901e-03, 1.087139269617677e-02, 4.884844022615390e-03, 2.132288443797086e-02, 2.225505450939548e-02, 9.380557517752344e-03, 7.934121348240533e-02, 1.022297378026718e-02, 7.832844682310568e-02, 1.783932850892026e-02, 2.434557448107078e-03, 9.968522462673046e-02, 9.916065787168546e-02, 7.803235724189404e-02, 1.300442750984451e-01, 7.803235724189406e-02, 4.259320673523429e-04, 1.140288794879179e+00, 1.096395716774165e+00, 3.077527634569149e-07, 1.061726816351448e+00, 2.566232367628778e-05, 2.968512558677740e-01, 1.528466516344676e+00, 1.545860756359504e+00, 1.221980998381767e+00, 1.831205947850078e+00, 1.221980998381767e+00, 1.831205947849951e+00, 3.556435322967006e-03, 3.557305892350273e-03, 3.558724776630959e-03, 3.559519431283865e-03, 3.556600709007149e-03, 3.557409592899387e-03, 3.558563343338895e-03, 3.559418640986913e-03, 6.853474116810412e-03, 3.558412409224874e-03, 3.557578733215756e-03, 6.855524665356849e-03, 7.737536079879683e-03, 7.741413971053450e-03, 7.715481556917488e-03, 7.720045619328604e-03, 7.754764538823767e-03, 7.753473082209447e-03, 7.735442742418111e-03, 7.734095139416288e-03, 7.713346447732100e-03, 1.117488853542026e-02, 7.713346447732100e-03, 7.728847070474535e-03, 2.801525150584342e-02, 3.163767261618886e-02, 2.800275786840837e-02, 2.812553072854319e-02, 2.921346623623580e-02, 2.885033583929971e-02, 2.946705719007298e-02, 2.906129640677895e-02, 2.759651038426546e-02, 4.434319173036214e-02, 2.759651038426546e-02, 2.849053890743885e-02, 1.362736373688610e-01, 1.351425247275118e-01, 3.738011133912780e-03, 7.736078997597083e-02, 1.485920252621404e-01, 1.423525088975430e-01, 8.775606791103733e-03, 8.780449485979547e-03, 1.224465611262773e-01, 1.178018776876872e-01, 1.224465611262770e-01, 1.178018776876873e-01, 1.256539426428568e-08, 1.708845752880473e+00, 1.557134422486294e+00, 1.524124676419838e+00, 2.250162375898840e+00, 2.189836741284099e+00, 2.054847582711334e-01, 1.517145302197895e-04, 1.890073733661888e+00, 1.734002881398234e+00, 1.890073733661755e+00, 1.734002881400071e+00, 3.433308271516864e-02, 3.423723530747474e-02, 3.334383716493250e-02, 3.326113621332433e-02, 4.473087881951875e-02, 4.430564894392589e-02, 4.285688844329022e-02, 3.387286040288340e-02, 4.377961440303888e-02, 4.339347103539778e-02, 4.377961440303888e-02, 3.373039048920248e-02, 3.510172849597426e-02, 3.502870967711313e-02, 3.260467249946717e-02, 3.210142884554487e-03, 3.272199175824951e-02, 1.114473270826823e-01, 3.337593469187681e-02, 3.329262643270584e-02, 3.297264782489627e-02, 3.290007078812518e-02, 3.297264782489628e-02, 1.026476004760039e-01, 2.604965862915911e-02, 7.610302249566388e-02, 6.335610330122772e-02, 6.304601519512990e-02, 1.559442087981834e-02, 5.392318930840585e-02, 5.660867332376275e-02, 4.336325255662579e-02, 4.858467128266054e-02, 4.863295665234169e-02, 4.858467128266059e-02, 3.940735382660939e-02, 3.440396761041196e-02, 3.435033932156941e-02, 2.551929388207461e-05, 2.552802117161162e-05, 2.465119165410533e-01, 2.404792675066778e-01, 4.651232763199076e-02, 4.682938845929717e-02, 1.726566565557573e-01, 1.660872260679183e-01, 1.726566565557568e-01, 1.660872260679191e-01, 3.644969499484654e-07, 3.997748413744209e-07, 3.405849149303855e+00, 3.399840993965876e+00, 1.807986030382796e-08, 2.304592626911182e-08, 3.322140206187618e-04, 3.929993765602014e-04, 2.143776986998484e+00, 1.838432021069294e+00, 2.143776987017140e+00, 1.374083260101815e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
