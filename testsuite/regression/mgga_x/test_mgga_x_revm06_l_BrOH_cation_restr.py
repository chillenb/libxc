
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_revm06_l_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revm06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.402180917080043e+01, -2.402188201951083e+01, -2.402229178453679e+01, -2.402121014393352e+01, -2.402176472423723e+01, -2.402176472423723e+01, -3.370495231496443e+00, -3.370611997924205e+00, -3.373985041554489e+00, -3.375113576700454e+00, -3.373722537781918e+00, -3.373722537781918e+00, -5.817005233928334e-01, -5.809025601010043e-01, -5.617502317981951e-01, -5.799433255258736e-01, -5.748454157211763e-01, -5.748454157211763e-01, -1.624798621150665e-01, -1.672501728740153e-01, -5.230112517931814e-01, -7.889754670027113e-02, -1.076523339234512e-01, -1.076523339234512e-01, -4.474878636061308e-03, -4.707642935722431e-03, -2.393721879354668e-02, -2.591530386620993e-03, -3.253365077883320e-03, -3.253365077883320e-03, -5.787587857439508e+00, -5.783976268196454e+00, -5.787421916687345e+00, -5.784234701722943e+00, -5.785777859856807e+00, -5.785777859856807e+00, -2.058181217085537e+00, -2.082390341029979e+00, -2.052575537370439e+00, -2.074296296255600e+00, -2.074376451355720e+00, -2.074376451355720e+00, -6.179376078502886e-01, -6.798546133526777e-01, -5.402511340989986e-01, -5.599622048514292e-01, -6.332833385509676e-01, -6.332833385509676e-01, -4.907946121939370e-02, -1.313272748762913e-01, -4.604925938782153e-02, -1.931537495949417e+00, -5.991384615635212e-02, -5.991384615635216e-02, -2.000719730591666e-03, -2.533796814382751e-03, -1.936167513415559e-03, -3.438567069829334e-02, -2.332923538362099e-03, -2.332923538362099e-03, -5.284350771975536e-01, -5.716986773809337e-01, -5.472707841212952e-01, -5.305797626872497e-01, -5.380791818247895e-01, -5.380791818247895e-01, -5.070670913623389e-01, -5.361029668186853e-01, -5.709325461366225e-01, -6.007582022461998e-01, -5.869861513573784e-01, -5.869861513573784e-01, -7.018979554232913e-01, -2.016339110935487e-01, -2.641668611175366e-01, -3.494052769738757e-01, -3.104096951238489e-01, -3.104096951238489e-01, -4.726510863621310e-01, -2.304323470885331e-02, -2.981842352875779e-02, -3.415803893307959e-01, -3.965724009156456e-02, -3.965724009156462e-02, -6.307718957973022e-03, -6.779103789962488e-04, -1.422208433349878e-03, -3.769444864869721e-02, -2.158577600612975e-03, -2.158577600612974e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_revm06_l_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revm06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.031414114426608e+01, -3.031405612765752e+01, -3.031371401842543e+01, -3.031496246151234e+01, -3.031430415288741e+01, -3.031430415288741e+01, -4.716347186797107e+00, -4.716657051473557e+00, -4.724794742691919e+00, -4.720759371895267e+00, -4.721193215322756e+00, -4.721193215322756e+00, -8.654280735435961e-01, -8.653237314664289e-01, -8.671558178221095e-01, -8.644384490877778e-01, -8.649660708787409e-01, -8.649660708787409e-01, -2.714202493925550e-01, -2.717082362930673e-01, -1.012612214783904e+00, -1.430308769397229e-01, -2.102118670619934e-01, -2.102118670619944e-01, -5.939584082829135e-03, -6.244932244767766e-03, -2.896299230985276e-02, -3.451110789822031e-03, -4.327641863612789e-03, -4.327641863612789e-03, -6.408990419268896e+00, -6.380668363357643e+00, -6.407312466510577e+00, -6.382330974168064e+00, -6.394885620380557e+00, -6.394885620380557e+00, -2.488846234777058e+00, -2.523394988626556e+00, -2.465370449758691e+00, -2.493807089081440e+00, -2.520728632037248e+00, -2.520728632037248e+00, -8.591835824872379e-01, -9.301994555194856e-01, -7.577156204828981e-01, -8.555381947776342e-01, -8.800569954720032e-01, -8.800569954720032e-01, -5.730138961422040e-02, -2.576940941256201e-01, -5.137355527477008e-02, -2.946063642378473e+00, -9.687625436661437e-02, -9.687625436661440e-02, -2.666348770944288e-03, -3.374958560768743e-03, -2.576841909753045e-03, -3.728915807915999e-02, -3.105738270130525e-03, -3.105738270130488e-03, -7.786236789122407e-01, -5.149787262693476e-01, -5.328827241581885e-01, -6.012849887506432e-01, -5.596589539487651e-01, -5.596589539487651e-01, -6.839041422291224e-01, -6.887872472507012e-01, -7.494068171735527e-01, -7.531747260739546e-01, -7.660422531557831e-01, -7.660422531557831e-01, -1.008591898318784e+00, -3.478645258928701e-01, -3.733287046400733e-01, -4.417148661252870e-01, -3.825496365161193e-01, -3.825496365161191e-01, -6.088773216413215e-01, -2.801992387128815e-02, -3.438327205082811e-02, -4.559971327654013e-01, -4.392822526394135e-02, -4.392822526394049e-02, -8.364925985807172e-03, -9.038646881681740e-04, -1.895006310725839e-03, -4.114373458702903e-02, -2.873366483780910e-03, -2.873366483780853e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revm06_l_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revm06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.279868705335215e-08, -1.279862369990206e-08, -1.279820670397105e-08, -1.279915399829046e-08, -1.279867688529976e-08, -1.279867688529976e-08, -1.480702511668754e-05, -1.480820040325268e-05, -1.483645141306076e-05, -1.480342773667227e-05, -1.481994664734062e-05, -1.481994664734062e-05, -7.857232407713750e-03, -7.847007257753863e-03, -7.481739117076557e-03, -7.491320588132170e-03, -7.516238192109056e-03, -7.516238192109056e-03, -7.032073259018313e-01, -7.196751603535437e-01, -3.290338688070523e-03, -4.374703303723929e-01, -6.186682014593552e-01, -6.186682014593550e-01, 6.714302952598518e-01, 7.243300050902289e-01, 3.640418450470676e-01, 8.317609076993432e-01, 9.385367253569904e-01, 9.385367253569948e-01, -3.809841119939225e-06, -3.809711417493047e-06, -3.809809384347956e-06, -3.809695537688914e-06, -3.809798918882081e-06, -3.809798918882081e-06, -1.117229794149150e-04, -1.104609330524355e-04, -1.110613674129903e-04, -1.100004564044844e-04, -1.113310120744184e-04, -1.113310120744184e-04, -2.046835602991877e-02, -1.774611541083483e-02, -2.568784840080848e-02, -2.645123844924328e-02, -1.982551152436634e-02, -1.982551152436634e-02, -1.315953541793046e-01, -3.166634993597209e-01, -8.850173041234967e-02, -2.059251498573345e-04, -4.612855180549826e-01, -4.612855180549832e-01, 1.828812579609530e+00, 1.293327816374718e+00, 6.376998579294779e+00, 1.819949883048928e-01, 3.590086064188748e+00, 3.590086064188737e+00, -2.320575603874440e-02, -2.389449047951086e-02, -2.342415819586035e-02, -2.312125182991501e-02, -2.325191303264143e-02, -2.325191303264143e-02, -2.597680362952222e-02, -3.492012612400259e-02, -3.396422839361813e-02, -3.263878885577447e-02, -3.344218784312642e-02, -3.344218784312642e-02, -1.439260023841278e-02, -2.472624405917513e-01, -1.989104418802382e-01, -1.214453379668442e-01, -1.649851136413805e-01, -1.649851136413807e-01, -4.618744639404464e-02, 2.881351885777358e-01, 2.675425576619082e-01, -1.638278323300743e-01, -1.431215306819343e-01, -1.431215306819356e-01, 9.786478236531434e-01, 1.044672437671892e+01, 2.038663911018848e+00, -1.320228801251653e-01, 4.049206356612454e+00, 4.049206356612467e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revm06_l_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revm06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.958437040873461e-03, 1.958318707002940e-03, 1.957841168765452e-03, 1.959592639955834e-03, 1.958668635670817e-03, 1.958668635670817e-03, 8.627594683591977e-03, 8.630183384606372e-03, 8.699145808519108e-03, 8.675928273378495e-03, 8.677001216253631e-03, 8.677001216253631e-03, 2.959853497472776e-02, 2.968414093754854e-02, 3.176178424501943e-02, 3.167622590278095e-02, 3.163768919551086e-02, 3.163768919551086e-02, 1.367674341208271e-01, 1.370165319516345e-01, 1.998131124869706e-02, 4.360888545872286e-02, 9.186924046517113e-02, 9.186924046517184e-02, -2.565984428779560e-05, -3.120818450374062e-05, -2.078586933502188e-03, -3.771355973261526e-06, -1.024862365304755e-05, -1.024862365304755e-05, -5.271686253459090e-03, -5.751149702893343e-03, -5.299011027954817e-03, -5.721964616324574e-03, -5.510541201080071e-03, -5.510541201080071e-03, 1.365912160166607e-02, 1.410650093836577e-02, 1.342963242279970e-02, 1.379361820230173e-02, 1.404038102104526e-02, 1.404038102104526e-02, 8.039490864915304e-02, 5.392662059831305e-02, 6.501049680985539e-02, 7.985195452327859e-02, 8.234633154349261e-02, 8.234633154349261e-02, -2.310092885193069e-03, 8.495830839862037e-02, -4.435740616448931e-03, 2.470433073869465e-02, 2.485931964076749e-02, 2.485931964076663e-02, -1.323862260040803e-06, -3.257042132761875e-06, -1.130469099938062e-05, -6.037297770181134e-03, -7.818692716517284e-06, -7.818692716517281e-06, 3.802111134599763e-01, -4.323637672727700e-01, -4.198226555769684e-01, -2.509495707344270e-01, -3.613048822511468e-01, -3.613048822511468e-01, 5.971821823431538e-02, 8.754785662775824e-02, 9.981662861096299e-02, 5.979229098775012e-02, 9.538666350703892e-02, 9.538666350703892e-02, 6.944181081426666e-02, 1.049856206141495e-01, 9.301288697948826e-02, 7.208962458357973e-02, 7.591372639108429e-02, 7.591372639108428e-02, 7.445140806071689e-02, -1.850251846714715e-03, -3.544303208960221e-03, 1.012916444737036e-01, -5.313121175484941e-03, -5.313121175484946e-03, -3.726205790496687e-05, -8.862309456896596e-08, -1.902715378275237e-06, -5.932885753618491e-03, -8.663445143023716e-06, -8.663445143135892e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
