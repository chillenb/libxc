
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_revm06_l_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revm06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.199405222241765e+01, -2.199417090996499e+01, -2.199469438030555e+01, -2.199293229975141e+01, -2.199385622410319e+01, -2.199385622410319e+01, -2.990323738800537e+00, -2.990490558401827e+00, -2.994948462366135e+00, -2.993416218292550e+00, -2.993269372416341e+00, -3.769127653694572e+00, -4.858642044308298e-01, -7.034149658904342e-01, -6.697620942216048e-01, -6.830942236324096e-01, -6.802482227887667e-01, -6.802482227887667e-01, -1.649119659225938e-01, -1.703215391472427e-01, -4.469981061313950e-01, -8.169530399997861e-02, -1.114842201542164e-01, -1.114842201542164e-01, -4.474864638274018e-03, -4.707611985600912e-03, -2.391674103773954e-02, -2.591490305894400e-03, -3.253313596129070e-03, -3.253313596129070e-03, -5.789877194153539e+00, -5.786238793915811e+00, -5.789663604499833e+00, -5.415700150275467e+00, -5.788077428253163e+00, -5.788077428253163e+00, -1.612993315240942e+00, -1.638409796140850e+00, -1.593833109868756e+00, -1.616354674063215e+00, -1.636515055109280e+00, -2.124719156761973e+00, -6.509308475314468e-01, -7.204552122356327e-01, -5.915156816425952e-01, -6.265844005860881e-01, -6.649016966584689e-01, -5.764788080944082e-01, -4.455236611706191e-02, -1.333183913328218e-01, -4.363238606831286e-02, -2.147282793669562e+00, -6.075403845217972e-02, -6.075403845217976e-02, -1.116358389173200e-03, -2.533694212473225e-03, -1.936114616923800e-03, -3.581451541682860e-02, -1.316287926024718e-03, -2.332805127589178e-03, -5.331152296623410e-01, -5.762943719548337e-01, -5.341753931360728e-01, -5.351663708338061e-01, -5.426620407748540e-01, -5.426620407748540e-01, -5.160855425025120e-01, -5.401625265137084e-01, -5.768057644320930e-01, -6.085458894062636e-01, -5.941924862484966e-01, -5.320686265205744e-01, -7.544567116289492e-01, -1.275939644307564e-01, -2.711676325490421e-01, -2.853252968017153e-01, -3.231968436787162e-01, -3.231968436787162e-01, -3.935082958613910e-01, -2.303511160303933e-02, -2.977918730073783e-02, -3.641552284847495e-01, -3.796041883031889e-02, -3.976875852533712e-02, -6.306274381547818e-03, -6.778906552661892e-04, -1.422202713311162e-03, -3.774556103113070e-02, -2.158503728743091e-03, -2.158503728743090e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_revm06_l_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revm06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.240900528462569e+01, -3.240890101003685e+01, -3.240854337880921e+01, -3.241007841061466e+01, -3.240925995908292e+01, -3.240925995908292e+01, -5.007561376592621e+00, -5.007861539370679e+00, -5.015867370913509e+00, -5.013084922983949e+00, -5.012862332191007e+00, -4.602060961733900e+00, -8.992748330611320e-01, -9.223822666764577e-01, -9.505027224782318e-01, -9.334004396334967e-01, -9.374450650501092e-01, -9.374450650501092e-01, -2.756450718370798e-01, -2.766728341687661e-01, -1.000605660204390e+00, -1.527572772832559e-01, -2.207933708583736e-01, -2.207933708583745e-01, -5.939480882953960e-03, -6.244705481598021e-03, -2.883008933531618e-02, -3.450838677522223e-03, -4.327280636616974e-03, -4.327280636616974e-03, -6.406498308146686e+00, -6.378193114843681e+00, -6.404871558994033e+00, -6.832721344666997e+00, -6.392376084547039e+00, -6.392376084547039e+00, -2.696684169997693e+00, -2.738156130753024e+00, -2.666680518587819e+00, -2.702103401025487e+00, -2.735005725709460e+00, -2.522687106925408e+00, -8.406947299176724e-01, -8.898763406754583e-01, -7.387797205389556e-01, -8.095988170238783e-01, -8.601939088003230e-01, -9.317652479903810e-01, -2.856684691184334e-02, -2.631360918593389e-01, -2.925333863579503e-02, -2.776876003640621e+00, -1.001188670012903e-01, -1.001188670012903e-01, -1.499697685519774e-03, -3.374321288147350e-03, -2.576487080417723e-03, -3.768530974580549e-02, -1.790031933305359e-03, -3.104990591149498e-03, -7.731373472212271e-01, -5.085333044496537e-01, -5.518774323510970e-01, -5.951909095324123e-01, -5.533910781667336e-01, -5.533910781667336e-01, -6.725657905572596e-01, -6.875348138781662e-01, -7.459075877726680e-01, -7.459726286385585e-01, -7.606575390955467e-01, -8.190001073875568e-01, -9.614236778944976e-01, -2.834802598044888e-01, -3.808610277799013e-01, -4.772246773094572e-01, -3.878613812675805e-01, -3.878613812675804e-01, -6.593788324896501e-01, -2.796373076422487e-02, -3.414136238425913e-02, -4.500481109870957e-01, -2.597321742942489e-02, -4.444116854105212e-02, -8.356051214081480e-03, -9.037708267549483e-04, -1.894965934682395e-03, -4.135714167423007e-02, -2.872882561176463e-03, -2.872882561176405e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revm06_l_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revm06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.464746801321489e-08, -1.464733912528607e-08, -1.464670180514028e-08, -1.464862300574019e-08, -1.464762545048764e-08, -1.464762545048764e-08, -1.778567671442488e-05, -1.778645810958435e-05, -1.780581083526458e-05, -1.779154047089224e-05, -1.780046726073624e-05, -1.204958416283482e-05, -1.058813098305582e-02, -5.020666881320678e-03, -4.788164589323139e-03, -4.988314787207009e-03, -4.940913021496171e-03, -4.940913021496171e-03, -6.677386646428992e-01, -6.768678508359892e-01, -4.309838343427524e-03, -3.513585889676791e-01, -5.257264529809598e-01, -5.257264529809599e-01, 6.417386610794419e-01, 6.670939797938358e-01, 1.965972301789208e-01, 4.770987796791380e-01, 6.611531954269410e-01, 6.611531954269410e-01, -3.807461435340139e-06, -3.807360806127199e-06, -3.807479289328810e-06, -4.203569701445886e-06, -3.807409215502786e-06, -3.807409215502786e-06, -1.697392933162481e-04, -1.663924467904069e-04, -1.721348039961773e-04, -1.691610109946197e-04, -1.667604256759002e-04, -1.057722323280924e-04, -1.869333258372107e-02, -1.620192574032927e-02, -2.176114344790736e-02, -2.196527486091654e-02, -1.823657962160189e-02, -2.287112527806524e-02, -4.172621575675671e+00, -2.952258380226509e-01, -5.293856640919246e+00, -1.735285936695315e-04, -4.134330486695300e-01, -4.134330486695304e-01, -1.450588872176597e+07, 4.219739831484852e-01, 3.401351567752612e+00, -3.070913801729092e+01, -7.810775274635217e+06, 1.306349956629092e+00, -2.293532283591429e-02, -2.362422809727340e-02, -2.419852004462793e-02, -2.285489557669118e-02, -2.298506006458077e-02, -2.298506006458077e-02, -2.537839434679682e-02, -3.442323600281383e-02, -3.336069048409257e-02, -3.196360627860162e-02, -3.276072660534708e-02, -3.889813090885896e-02, -1.282892812079718e-02, -7.157101420035501e-01, -1.842842180604223e-01, -1.697118438712099e-01, -1.496657675621498e-01, -1.496657675621498e-01, -6.216424769713962e-02, 2.088872115661694e-01, 1.156997905396406e-01, -1.450145715562576e-01, -9.710469525480745e+00, -1.866682908682176e-01, 3.045056312770963e-01, 5.189312168680986e-01, 1.484274171135455e+00, -1.688280908040289e-01, 1.861537515931529e+00, 1.861537515931531e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revm06_l_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revm06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.808013400807023e-03, 1.807905431199745e-03, 1.807465096746963e-03, 1.809062963822335e-03, 1.808220682351347e-03, 1.808220682351347e-03, 7.672083613292914e-03, 7.674644703877807e-03, 7.742319928139486e-03, 7.714202693264660e-03, 7.718014998736570e-03, 9.670948310654202e-03, 2.399973005469462e-02, 3.687363934093661e-02, 3.870144196663065e-02, 3.808522786026253e-02, 3.823577851741100e-02, 3.823577851741100e-02, 1.390705001234158e-01, 1.398288959404144e-01, 1.641609604056284e-02, 4.755695120732843e-02, 9.657825259526105e-02, 9.657825259526179e-02, -2.559467486079533e-05, -3.106276090158556e-05, -2.000043247085337e-03, -3.640608859756837e-06, -1.003345467179254e-05, -1.003345467179254e-05, -5.272116324334959e-03, -5.751692404763363e-03, -5.299438785976368e-03, -5.632921786895630e-03, -5.511032766563111e-03, -5.511032766563111e-03, 1.052196447539697e-02, 1.095990116304644e-02, 1.020879992962859e-02, 1.056679774055599e-02, 1.093660093730738e-02, 1.439647477221956e-02, 8.409988430976546e-02, 5.698512210768955e-02, 7.075082901935746e-02, 8.798181575012481e-02, 8.586149335573828e-02, 7.600873900370778e-02, -1.683429802370081e-02, 8.673830716855413e-02, -1.604580704973083e-02, 2.703848318386577e-02, 2.657620072464512e-02, 2.657620072464424e-02, 6.516564357872948e-06, -3.007463661593181e-06, -1.085553423568561e-05, -6.264115261216023e-03, 4.045405492290860e-05, -7.286308725633686e-06, 3.822941099968971e-01, -4.342758164937539e-01, -4.144027847385859e-01, -2.520379581968854e-01, -3.629268505267579e-01, -3.629268505267579e-01, 6.064742950324743e-02, 8.814380848300143e-02, 1.006952815158584e-01, 6.055775478521364e-02, 9.639465166844326e-02, 8.768509972863520e-02, 7.392090205105238e-02, 6.063155884749695e-02, 9.575202099067687e-02, 5.790703320012317e-02, 7.945097849357399e-02, 7.945097849357398e-02, 6.240999099856366e-02, -1.816041053667496e-03, -3.365539850806433e-03, 1.076674308496319e-01, -1.790732006510969e-02, -4.444700166303659e-03, -3.426259158683498e-05, -7.048262280988631e-08, -1.866762724607039e-06, -5.440385154805663e-03, -8.226603327512984e-06, -8.226603327625166e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
