
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mbrxc_bg_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbrxc_bg", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.204929967116150e+01, -2.204926391859646e+01, -2.204926380181971e+01, -2.204984542751531e+01, -2.204927949307416e+01, -2.204927949307416e+01, -3.851505909220228e+00, -3.851383979852895e+00, -3.848136768241718e+00, -3.853678882426343e+00, -3.851464748843182e+00, -3.851464748843182e+00, -8.502973457998563e-01, -8.518907896952489e-01, -9.016033007098164e-01, -9.032236085237405e-01, -8.508639119873337e-01, -8.508639119873337e-01, -3.278006081784657e-01, -3.230744475052311e-01, -9.671060918529156e-01, -3.857858662830559e-01, -3.262447863093870e-01, -3.262447863093870e-01, -1.207172357345078e+00, -1.165381380952461e+00, -6.321971227177640e-01, -2.452918973309621e+00, -1.155139533214496e+00, -1.155139533214496e+00, -5.144930138946624e+00, -5.141391029488355e+00, -5.144576886661638e+00, -5.141824855099831e+00, -5.143098847794177e+00, -5.143098847794177e+00, -2.674817851149556e+00, -2.674424087876992e+00, -2.693198914134443e+00, -2.692670578568559e+00, -2.651196169509621e+00, -2.651196169509621e+00, -6.195879716576091e-01, -5.937245621958089e-01, -5.974154719523694e-01, -5.548414305204268e-01, -6.278058479569579e-01, -6.278058479569579e-01, -4.652994175719949e-01, -4.347924601890972e-01, -4.426485461922331e-01, -1.816533580904797e+00, -4.021183334061142e-01, -4.021183334061142e-01, -2.457234897614940e+00, -2.212909027933869e+00, -1.735206024052502e+00, -5.089904170224899e-01, -2.000381256633227e+00, -2.000381256633227e+00, -5.497316155286371e-01, -5.551001116600052e-01, -5.528894912175101e-01, -5.514034963304104e-01, -5.521224570167004e-01, -5.521224570167004e-01, -5.313505880792664e-01, -5.970848983403830e-01, -5.701450810829883e-01, -5.446741077041423e-01, -5.567889176726931e-01, -5.567889176726951e-01, -6.258279957095865e-01, -4.499047444146335e-01, -4.457017460739864e-01, -4.396160784661192e-01, -4.378456747428419e-01, -4.378456747429232e-01, -5.500655277695162e-01, -7.143565098598434e-01, -5.823860249280799e-01, -3.832125173316441e-01, -4.299412212578755e-01, -4.299412212576552e-01, -1.216320962627249e+00, -4.881844075418756e+00, -3.106152011513644e+00, -4.072161220971543e-01, -1.918234112988803e+00, -1.918234112988803e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mbrxc_bg_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbrxc_bg", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.046437656574343e+01, -2.046453665753624e+01, -2.046512112940363e+01, -2.046250208169021e+01, -2.046446208336418e+01, -2.046446208336418e+01, -3.221692878297186e+00, -3.221758747365068e+00, -3.223621310574275e+00, -3.219790958273833e+00, -3.221748185654553e+00, -3.221748185654553e+00, -5.618186052672555e-01, -5.592750016900014e-01, -4.833386355863184e-01, -4.885404696443176e-01, -5.608986127347767e-01, -5.608986127347767e-01, -6.436125897609567e-02, -7.331918550306236e-02, -7.660196894089454e-01, 7.995249021202891e-02, -6.718529755278593e-02, -6.718529755278593e-02, 1.168967989453911e+00, 1.122706981907875e+00, 4.798972792733514e-01, 2.543720219263829e+00, 1.112958929250018e+00, 1.112958929250018e+00, -5.371389569147228e+00, -5.382421412866969e+00, -5.372497132250150e+00, -5.381074949594474e+00, -5.377067376570608e+00, -5.377067376570608e+00, -1.401359076518503e+00, -1.424753381678312e+00, -1.375511704312289e+00, -1.394005734275027e+00, -1.449936613397759e+00, -1.449936613397759e+00, -5.446161938143127e-01, -7.341623199279077e-01, -5.147581406141349e-01, -6.378526152819917e-01, -5.780101953426764e-01, -5.780101953426764e-01, 2.173035709362138e-01, 2.695145300890044e-02, 2.000114354674787e-01, -2.220762015911641e+00, 1.338657066675030e-01, 1.338657066675030e-01, 2.551717968154676e+00, 2.277530650930237e+00, 1.789020484955726e+00, 3.285119047393993e-01, 2.058144631285728e+00, 2.058144631285708e+00, -7.233311447593930e-01, -7.027975483543881e-01, -7.114143937866861e-01, -7.170777301547328e-01, -7.143495933328059e-01, -7.143495933328058e-01, -7.016602792415253e-01, -4.246309785813916e-01, -4.782205628399361e-01, -5.548298865982499e-01, -5.092539191064318e-01, -5.092539191065282e-01, -7.634604926297009e-01, -5.041403831049084e-02, -1.382955074613641e-01, -2.866070271215893e-01, -2.132340228562082e-01, -2.132340228556932e-01, -3.798903474802437e-01, 5.647672599591395e-01, 4.084557927095724e-01, -2.931786790775396e-01, 2.221422082558808e-01, 2.221422082545640e-01, 1.166346224432901e+00, 5.340108783005876e+00, 3.305288716864696e+00, 2.092867231035100e-01, 1.982779708495245e+00, 1.982779708495239e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbrxc_bg_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbrxc_bg", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.156744729474876e-08, -2.156723138606397e-08, -2.156614677726161e-08, -2.156968549794720e-08, -2.156733442455200e-08, -2.156733442455200e-08, -2.811324985425988e-05, -2.811418174962055e-05, -2.813667090116484e-05, -2.809751309178001e-05, -2.811311170105787e-05, -2.811311170105787e-05, -1.807268759115035e-02, -1.811939275274369e-02, -1.942798718388332e-02, -1.893654407295909e-02, -1.808993117661442e-02, -1.808993117661442e-02, -2.860328634153645e+00, -2.739389474407987e+00, -8.445787146633804e-03, -8.864031471656185e+00, -2.823575230955157e+00, -2.823575230955157e+00, -1.240492416398068e+05, -1.041780711071291e+05, -5.267513731247745e+02, -1.969747172154854e+06, -1.086121990592616e+05, -1.086121990592616e+05, -5.731258689144355e-06, -5.709107811417982e-06, -5.729037204152705e-06, -5.711816335320395e-06, -5.719908868182269e-06, -5.719908868182269e-06, -2.437360364445021e-04, -2.380789401667488e-04, -2.452961953618489e-04, -2.408154574478998e-04, -2.379970151477445e-04, -2.379970151477445e-04, -3.823273946559969e-02, -1.757000396578625e-02, -4.598288388683208e-02, -3.234071463070446e-02, -3.347196573621113e-02, -3.347196573621113e-02, -2.669940941135973e+01, -2.540554779901113e+00, -2.837585732010752e+01, -2.146834145926711e-04, -1.611287191504907e+01, -1.611287191504907e+01, -2.265089750836682e+06, -1.363134713703403e+06, -4.297905725888160e+06, -1.560265167537287e+02, -1.979490796440958e+06, -1.979490796440949e+06, -1.416747909599615e-02, -1.957281852794383e-02, -1.747398216806570e-02, -1.597306930117283e-02, -1.670988784147812e-02, -1.670988784147812e-02, -1.549690847411410e-02, -6.190259347890313e-02, -5.707268304800734e-02, -4.837786060563327e-02, -5.445529891575947e-02, -5.445529891573758e-02, -1.537736762330137e-02, -1.081480368931714e+00, -5.797470353635470e-01, -2.464551181861767e-01, -3.768938535435539e-01, -3.768938535441881e-01, -9.102188429394749e-02, -6.895190610090194e+02, -2.266373894063096e+02, -3.303281349924190e-01, -5.959682274632995e+01, -5.959682274620931e+01, -6.709230197366225e+04, -1.971985966389140e+08, -1.678104624981963e+07, -7.206581431149979e+01, -3.743931452252398e+06, -3.743931452252407e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbrxc_bg_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbrxc_bg", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbrxc_bg_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbrxc_bg", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-2.443725647516385e-04, -2.443745727493244e-04, -2.443795974916961e-04, -2.443468026554802e-04, -2.443736563292788e-04, -2.443736563292788e-04, -1.182605138566979e-03, -1.182749801311055e-03, -1.186747269266686e-03, -1.180601201353929e-03, -1.182668679434771e-03, -1.182668679434771e-03, -3.790933725948794e-03, -3.760484765733998e-03, -3.011575615677143e-03, -3.039899578424241e-03, -3.779984428013224e-03, -3.779984428013224e-03, -5.579901808969499e-03, -5.874796245083234e-03, -3.750620553469165e-03, -2.825237473268353e-03, -5.671542144186371e-03, -5.671542144186371e-03, -1.562291236555581e-04, -1.657376321216833e-04, -6.347805365749602e-04, -5.283241397425969e-05, -1.671260173752639e-04, -1.671260173752639e-04, -1.061865424707855e-03, -1.061194866774697e-03, -1.061800766180460e-03, -1.061280067183498e-03, -1.061531870723728e-03, -1.061531870723728e-03, -1.046762400827529e-03, -1.061261796418665e-03, -1.020912171517901e-03, -1.032019779034572e-03, -1.091649000167001e-03, -1.091649000167001e-03, -8.094127617340399e-03, -7.278030147654644e-03, -8.057013794782786e-03, -9.210231558886610e-03, -8.442600915496869e-03, -8.442600915496869e-03, -1.596053250527402e-03, -3.059904669599231e-03, -1.720894404317724e-03, -2.499077235771920e-03, -2.284960940599891e-03, -2.284960940599891e-03, -5.227771744187283e-05, -6.141351121568109e-05, -7.747799556670071e-05, -1.036243119184541e-03, -6.806791747068639e-05, -6.806791747068604e-05, -5.771537188649353e-03, -6.992533088016162e-03, -6.535133269154834e-03, -6.194956169270098e-03, -6.363303647810735e-03, -6.363303647810735e-03, -5.841522787793325e-03, -6.364150590133535e-03, -8.428332586922795e-03, -1.012302146270372e-02, -9.551559934810657e-03, -9.551559934806803e-03, -7.221527258934770e-03, -3.674696780417713e-03, -4.723466573942192e-03, -7.618440763810189e-03, -6.039627030576294e-03, -6.039627030586450e-03, -6.563790686161382e-03, -5.142019853248722e-04, -7.986856950702512e-04, -1.060325366487200e-02, -1.585380092923913e-03, -1.585380092920706e-03, -1.621014199879673e-04, -1.790375350325426e-05, -3.498186700005961e-05, -1.681669150149168e-03, -6.896735092785217e-05, -6.896735092785177e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
