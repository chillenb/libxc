
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mbrxc_bg_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbrxc_bg", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.963810831131181e+01, -1.963815141376191e+01, -1.963837923206738e+01, -1.963767223625696e+01, -1.963813075112991e+01, -1.963813075112991e+01, -3.256966428200017e+00, -3.256950156203537e+00, -3.256579732268083e+00, -3.256982795104316e+00, -3.256977403115716e+00, -4.632100942897694e+00, -6.504529444698260e-01, -1.177674830306115e+00, -1.222698616482406e+00, -1.197121296499153e+00, -1.176574725318280e+00, -1.176574725318280e+00, -3.463197317927150e-01, -3.434533844207608e-01, -8.110300227767634e-01, -4.885314162716541e-01, -3.455545314341470e-01, -3.455545314341470e-01, -1.228426835947327e+00, -1.191353529573297e+00, -7.071959700593120e-01, -3.397257305417270e+00, -1.177411567822408e+00, -1.177411567822408e+00, -5.148432949793516e+00, -5.144841812682496e+00, -5.148029832358197e+00, -4.772844159977792e+00, -5.146634808941799e+00, -5.146634808941799e+00, -1.844970492024836e+00, -1.855028360651212e+00, -1.841054418181713e+00, -1.848804131275469e+00, -1.856894393641668e+00, -2.763053395501136e+00, -6.867934337236673e-01, -6.586244610114055e-01, -6.946478601374572e-01, -6.561297763813048e-01, -6.827827058396542e-01, -5.567828326645921e-01, -1.267054814176480e-01, -4.550688816730168e-01, -1.237911603559067e-01, -2.163108160654070e+00, -4.464310421232258e-01, -4.464310421232258e-01, -3.315393759540456e-02, -2.836729051827337e+00, -1.931911379155584e+00, -9.590361429288446e-02, -3.338299679122714e-02, -2.779844665339408e+00, -5.532689809191309e-01, -5.597272342190472e-01, -5.453859337890481e-01, -5.553167121288395e-01, -5.561880411686426e-01, -5.561880411686426e-01, -5.385006373146000e-01, -6.054186288111787e-01, -5.815877850212943e-01, -5.582200617360368e-01, -5.702722472277976e-01, -4.928171426691224e-01, -7.156841926433113e-01, -2.314284759249490e-01, -4.719522780451286e-01, -3.306809114637212e-01, -4.725158155626907e-01, -4.725158155628061e-01, -4.239687076848092e-01, -7.624587048910491e-01, -6.666597499113718e-01, -4.370151739818826e-01, -1.058772496843756e-01, -4.866357213378157e-01, -1.643668970216145e+00, -7.703146041810498e+00, -3.360089824316401e+00, -4.652753523699961e-01, -2.712998972203751e+00, -2.712998972203755e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mbrxc_bg_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbrxc_bg", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.590204701624803e+01, -2.590211233555064e+01, -2.590244981572576e+01, -2.590137951658906e+01, -2.590208107504473e+01, -2.590208107504473e+01, -4.175579008069377e+00, -4.175606390621767e+00, -4.176576458761384e+00, -4.176535161331050e+00, -4.175606471966653e+00, -2.571127784563638e+00, -7.799863848027007e-01, -2.475072362139704e-01, -1.741645183842308e-01, -2.063209470936723e-01, -2.492990128081419e-01, -2.492990128081419e-01, -4.696735092580526e-02, -5.413356530411964e-02, -9.254741051771120e-01, 1.718778660167774e-01, -4.903447445964772e-02, -4.903447445964772e-02, 1.190837660915492e+00, 1.149352929618724e+00, 5.499257618846541e-01, 3.563212115102089e+00, 1.135808899834057e+00, 1.135808899834055e+00, -5.363008452979888e+00, -5.374092030809905e+00, -5.364227578551215e+00, -6.318791415274528e+00, -5.368568944345342e+00, -5.368568944345342e+00, -2.335785109406734e+00, -2.354718221617268e+00, -2.328001402576960e+00, -2.342867847268096e+00, -2.358633044548177e+00, -1.349239700077938e+00, -4.903953701834453e-01, -5.939692341109000e-01, -4.361366394179927e-01, -5.001994535874771e-01, -5.282938738703084e-01, -7.292048799078658e-01, -1.284110115946084e-01, 4.542632145109078e-02, -1.259343810905765e-01, -1.686694983303991e+00, 1.731479398441441e-01, 1.731479398441441e-01, -2.373375610660027e-02, 2.946903191054075e+00, 1.999929445709946e+00, -9.081697083200084e-02, -2.398096585953010e-02, 2.895301852511142e+00, -7.164558737491801e-01, -6.907561910861918e-01, -7.252385130181725e-01, -7.084350038066338e-01, -7.049849953966147e-01, -7.049849953966147e-01, -6.871334974930058e-01, -4.181231977905714e-01, -4.688963692823754e-01, -5.295327439114098e-01, -4.942432398016717e-01, -6.489503182680829e-01, -6.011023508019383e-01, -2.678788830411802e-01, -1.135193475537695e-01, -4.193584039046626e-01, -1.809924775390869e-01, -1.809924775383930e-01, -5.451787734441924e-01, 6.101245046519017e-01, 4.858369275896859e-01, -2.484069868072920e-01, -1.061755928914270e-01, 2.725559443446189e-01, 1.606045245388756e+00, 8.506828973577248e+00, 3.583576208014863e+00, 2.609164744331335e-01, 2.839186129057156e+00, 2.839186129057135e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbrxc_bg_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbrxc_bg", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-8.413090091964079e-09, -8.412980830713836e-09, -8.412435814372524e-09, -8.414223404686068e-09, -8.413032989036927e-09, -8.413032989036927e-09, -1.482356685788756e-05, -1.482247354660719e-05, -1.478754623398471e-05, -1.479632347677455e-05, -1.482298131045265e-05, -2.482160824500236e-05, -1.365476918732063e-02, -1.621885059422769e-02, -1.765663875141768e-02, -1.728680676002768e-02, -1.618599880064212e-02, -1.618599880064212e-02, -2.811603641141140e+00, -2.686845144884077e+00, -6.592784420536207e-03, -8.331443535999885e+00, -2.773093008271560e+00, -2.773093008271560e+00, -1.237634259864394e+05, -1.038714212700818e+05, -5.156838768967406e+02, -1.902366504935547e+06, -1.083351560735620e+05, -1.083351560735619e+05, -5.746151939309336e-06, -5.724159266079617e-06, -5.743758496647389e-06, -2.293504083906294e-06, -5.735140500295340e-06, -5.735140500295340e-06, -1.582073377802481e-04, -1.519495653869738e-04, -1.608994969890751e-04, -1.558586185494041e-04, -1.506271097048673e-04, -2.333735241141058e-04, -3.506000008303056e-02, -2.842908602684616e-02, -4.096182662107592e-02, -3.787561927439465e-02, -3.153413846007039e-02, -1.417351576552448e-02, -1.312966235049684e+01, -2.507730676473697e+00, -1.427262773553580e+01, -3.091440973244277e-04, -1.568448645451515e+01, -1.568448645451515e+01, -8.331611105271777e+04, -1.326399443089369e+06, -4.247279699099045e+06, -5.104249542837713e+01, -7.473606944510523e+04, -1.909390518367762e+06, -1.642274324506704e-02, -2.231686013219816e-02, -1.260348603387807e-02, -1.842835783011246e-02, -1.923848047523095e-02, -1.923848047523095e-02, -2.080397310358804e-02, -6.122743360466347e-02, -5.605605209704484e-02, -5.046132522592648e-02, -5.398603945017803e-02, -2.165612939528976e-02, -2.289069597558447e-02, -9.596208723177932e-01, -5.687179513322549e-01, -1.514968787563679e-01, -3.655717514904497e-01, -3.655717514911399e-01, -5.036134913055105e-02, -6.813524217613879e+02, -2.205473047337303e+02, -3.028635008934017e-01, -2.772403488088117e+01, -5.789243442359975e+01, -6.447152484821864e+04, -1.895414524452832e+08, -1.665101135079203e+07, -6.984995701666816e+01, -3.606526047953247e+06, -3.606526047953250e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbrxc_bg_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbrxc_bg", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.653966425866290e-04, -1.653956989743722e-04, -1.653912439708388e-04, -1.654066456422342e-04, -1.653961477250117e-04, -1.653961477250117e-04, -1.257562115338433e-03, -1.257477281082026e-03, -1.254886257630405e-03, -1.255787928591129e-03, -1.257532583088006e-03, -6.365986452274206e-04, -8.159105713353619e-03, -1.587000081576029e-03, -1.406350825721906e-03, -1.490170965016190e-03, -1.591858333947518e-03, -1.591858333947518e-03, -4.923735528427771e-03, -5.100839093946268e-03, -6.781689003097653e-03, -1.834922748958271e-03, -4.972873021663149e-03, -4.972873021663149e-03, -1.527513110063265e-04, -1.610780001143466e-04, -5.395298262089168e-04, -3.540563427667694e-05, -1.630473122553767e-04, -1.630473122553764e-04, -1.062183874843921e-03, -1.061575643198873e-03, -1.062121743746845e-03, -6.525644554760148e-04, -1.061888169921427e-03, -1.061888169921427e-03, -2.384543169125705e-03, -2.338975420220137e-03, -2.404457064748607e-03, -2.367873269580842e-03, -2.328379876091595e-03, -9.692719385099786e-04, -5.579739239758872e-03, -8.001083103909493e-03, -4.753983078044447e-03, -6.392855827806528e-03, -6.277911237051133e-03, -6.257989946532402e-03, -2.427549680404187e-02, -2.792130642361400e-03, -2.538698948920155e-02, -2.004438162980733e-03, -1.899855191547162e-03, -1.899855191547162e-03, -1.760054251741384e-02, -4.517782155607125e-05, -6.784002574316724e-05, -2.274167050682544e-02, -1.782611228102602e-02, -4.533274250413878e-05, -6.297274774858789e-03, -7.560626548413231e-03, -5.404264138671258e-03, -6.746775850244008e-03, -6.922771272748341e-03, -6.922771272748341e-03, -6.950710481018978e-03, -6.068622957663549e-03, -7.836006296053218e-03, -9.784699186071570e-03, -8.845039782290535e-03, -6.705153133509431e-03, -6.759442590614549e-03, -2.386352349401568e-02, -4.111640973814095e-03, -1.318747691425255e-02, -4.918857465416656e-03, -4.918857465425939e-03, -9.476405961645062e-03, -4.684735163740186e-04, -6.528920720720317e-04, -6.884198692861868e-03, -2.740886173074002e-02, -1.296095827144611e-03, -1.099132278060287e-04, -1.043746091414318e-05, -3.180713559560566e-05, -1.353793234729158e-03, -4.500680932557046e-05, -4.500680932557015e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
