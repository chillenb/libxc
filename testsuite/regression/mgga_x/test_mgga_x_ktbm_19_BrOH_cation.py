
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_19_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_19", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.503802108015745e+01, -2.503808314685897e+01, -2.503851142150886e+01, -2.503759137855426e+01, -2.503805174928203e+01, -2.503805174928203e+01, -3.404209715672049e+00, -3.404380042271353e+00, -3.409192797074305e+00, -3.410102732331831e+00, -3.408592975142335e+00, -3.408592975142335e+00, -5.661903848561198e-01, -5.653320919457223e-01, -5.459557147067224e-01, -5.589326952453908e-01, -5.570127519697986e-01, -5.570127519697986e-01, -1.556830676841172e-01, -1.591693729237513e-01, -6.025211395106651e-01, -1.032840823527575e-01, -1.441156554741466e-01, -1.441156554741465e-01, -4.447721600225329e-03, -4.682854943955586e-03, -2.586801024097138e-02, -2.556227406398956e-03, -3.574448993328629e-03, -3.574448993328630e-03, -6.091044368197489e+00, -6.090620228982992e+00, -6.091100015240780e+00, -6.090722617005952e+00, -6.090792134346934e+00, -6.090792134346934e+00, -2.086562620587695e+00, -2.125469802886265e+00, -2.074246441876024e+00, -2.109784887129631e+00, -2.113957272014891e+00, -2.113957272014891e+00, -6.377964635690074e-01, -6.824128656145980e-01, -5.512680447028970e-01, -5.638156662562599e-01, -6.533343180317133e-01, -6.533343180317132e-01, -6.898921121235219e-02, -1.444268028974724e-01, -6.364325975238065e-02, -1.932705306603206e+00, -8.364301394990438e-02, -8.364301394990437e-02, -1.968163281204346e-03, -2.493537461426380e-03, -1.913042080141395e-03, -4.220833172317588e-02, -2.407582980214420e-03, -2.407582980214421e-03, -6.574727933453060e-01, -6.639805944385426e-01, -6.618813923158762e-01, -6.599806496752025e-01, -6.609452491996509e-01, -6.609452491996509e-01, -6.321704090549456e-01, -5.691931373422374e-01, -6.017192944867362e-01, -6.214531615312415e-01, -6.122703378020687e-01, -6.122703378020686e-01, -7.032570573324854e-01, -1.948817637648738e-01, -2.472233891781420e-01, -3.488963417898904e-01, -2.998987119892204e-01, -2.998987119892204e-01, -4.883453845101078e-01, -2.475597489535785e-02, -3.380189727311129e-02, -3.506253755501422e-01, -5.456689750826188e-02, -5.456689750826189e-02, -6.236865943320939e-03, -6.693107298154999e-04, -1.406360227619080e-03, -5.118830798412944e-02, -2.210277921687944e-03, -2.210277921687943e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_19_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_19", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.913410511775475e+01, -2.913315090648373e+01, -2.913420267807535e+01, -2.913322190130236e+01, -2.913439774960804e+01, -2.913353436521727e+01, -2.913329009177028e+01, -2.913212382303470e+01, -2.913416569761831e+01, -2.913260210904664e+01, -2.913416569761831e+01, -2.913260210904664e+01, -5.026182106393859e+00, -5.025913673618390e+00, -5.026322735333762e+00, -5.025991724025952e+00, -5.028896365668461e+00, -5.029378892308605e+00, -5.028820738843907e+00, -5.028801080351059e+00, -5.025072984016833e+00, -5.031178845415448e+00, -5.025072984016833e+00, -5.031178845415448e+00, -8.426597629804830e-01, -8.500701291977808e-01, -8.403428410265857e-01, -8.488164873084625e-01, -8.073978835928133e-01, -8.016108013684740e-01, -8.247195927476371e-01, -8.300110723292843e-01, -8.565676054467900e-01, -7.880575249319854e-01, -8.565676054467900e-01, -7.880575249319854e-01, -2.118031927476094e-01, -2.303644771140040e-01, -2.158091666902382e-01, -2.371774167146940e-01, -8.234171178612191e-01, -8.781326513205763e-01, -1.384125715716075e-01, -1.434304871858666e-01, -2.209522176962035e-01, -9.571020957764234e-02, -2.209522176962034e-01, -9.571020957764227e-02, -5.585845348402250e-03, -5.932857179116871e-03, -5.856895371061807e-03, -6.270551378120421e-03, -3.298382878034613e-02, -3.483109869619547e-02, -3.381980303172028e-03, -3.321799742294082e-03, -4.991521124319312e-03, -2.873346392879092e-03, -4.991521124319317e-03, -2.873346392879094e-03, -7.122310452112108e+00, -7.120290173834664e+00, -7.126101710507991e+00, -7.123952513618444e+00, -7.122431118748710e+00, -7.120351314537650e+00, -7.125687439391728e+00, -7.123681513624449e+00, -7.124315727418626e+00, -7.122137085382770e+00, -7.124315727418626e+00, -7.122137085382770e+00, -2.855777335641819e+00, -2.856294936444321e+00, -2.879091676172052e+00, -2.878577818986611e+00, -2.840004537048150e+00, -2.845092509742849e+00, -2.861468146655464e+00, -2.866248860608120e+00, -2.880442421104746e+00, -2.869864033922239e+00, -2.880442421104746e+00, -2.869864033922239e+00, -8.474411539013429e-01, -8.438063731877044e-01, -9.374358266755859e-01, -9.371850445940063e-01, -7.726791544247111e-01, -8.052132459898396e-01, -8.227900000901122e-01, -8.507990707564071e-01, -8.732063052803510e-01, -8.389608395713358e-01, -8.732063052803513e-01, -8.389608395713353e-01, -9.154969895807540e-02, -9.249411453556770e-02, -1.998774257289398e-01, -2.009588133541088e-01, -8.215983795765734e-02, -8.702333263080078e-02, -2.864930892681428e+00, -2.863697993866962e+00, -1.075410458915549e-01, -1.172283474553188e-01, -1.075410458915547e-01, -1.172283474553189e-01, -2.576087664250858e-03, -2.674204940710581e-03, -3.275543797194232e-03, -3.328830954465238e-03, -2.433946486296195e-03, -2.578702816437501e-03, -5.572498202096449e-02, -5.601244967551343e-02, -2.536140056567257e-03, -3.391743865464626e-03, -2.536140056567256e-03, -3.391743865464627e-03, -8.600231558586019e-01, -8.636510340835920e-01, -8.347641811121905e-01, -8.384713251286335e-01, -8.431436241580250e-01, -8.468884169844911e-01, -8.505490119647795e-01, -8.541646803300882e-01, -8.468047158125763e-01, -8.504835431859998e-01, -8.468047158125763e-01, -8.504835431859998e-01, -8.457438385222629e-01, -8.484383943718957e-01, -6.961380219178139e-01, -6.982104384690959e-01, -7.104839035942532e-01, -7.129498656967810e-01, -7.445733845051088e-01, -7.472887732429578e-01, -7.246297947084885e-01, -7.268155184663869e-01, -7.246297947084883e-01, -7.268155184663871e-01, -9.873716446874377e-01, -9.877361880644475e-01, -2.753822339054625e-01, -2.776330936616312e-01, -3.529643662842751e-01, -3.588542020868636e-01, -4.990440235311564e-01, -5.016959533415650e-01, -4.298599629658537e-01, -4.300112222226814e-01, -4.298599629658538e-01, -4.300112222226818e-01, -6.563064408392856e-01, -6.598815256243923e-01, -3.223612777148329e-02, -3.247826661111788e-02, -4.375921006528474e-02, -4.525687517277023e-02, -4.823584974041900e-01, -4.894748380728908e-01, -7.003554491274497e-02, -7.459840090782531e-02, -7.003554491274494e-02, -7.459840090782534e-02, -8.108973411400499e-03, -8.410113622504843e-03, -8.976304744081222e-04, -9.040339670403745e-04, -1.774203501430617e-03, -1.887328156944390e-03, -6.704923950996268e-02, -6.830878123809453e-02, -2.394174888332998e-03, -3.108844181674016e-03, -2.394174888332996e-03, -3.108844181674019e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_19_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_19", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.833498384706323e-08, 0.000000000000000e+00, -4.833945807204848e-08, -4.833473386345886e-08, 0.000000000000000e+00, -4.833927565753929e-08, -4.833390934499675e-08, 0.000000000000000e+00, -4.833810000507230e-08, -4.833677406148358e-08, 0.000000000000000e+00, -4.834174167761816e-08, -4.833485209660852e-08, 0.000000000000000e+00, -4.834026494386170e-08, -4.833485209660852e-08, 0.000000000000000e+00, -4.834026494386170e-08, -3.433347875957461e-05, 0.000000000000000e+00, -3.432013913940717e-05, -3.434432209045183e-05, 0.000000000000000e+00, -3.432672538767176e-05, -3.454907038606998e-05, 0.000000000000000e+00, -3.458260188160000e-05, -3.449073227357528e-05, 0.000000000000000e+00, -3.448304273495539e-05, -3.433194951563653e-05, 0.000000000000000e+00, -3.466566711781099e-05, -3.433194951563653e-05, 0.000000000000000e+00, -3.466566711781099e-05, -8.957983052383817e-03, 0.000000000000000e+00, -9.206900720036470e-03, -8.903988871181974e-03, 0.000000000000000e+00, -9.170914102258216e-03, -8.044164546652651e-03, 0.000000000000000e+00, -8.026373132213278e-03, -8.686615137769846e-03, 0.000000000000000e+00, -8.912200352885992e-03, -9.127217388148898e-03, 0.000000000000000e+00, -8.040381802392083e-03, -9.127217388148898e-03, 0.000000000000000e+00, -8.040381802392083e-03, -1.124594621865117e+00, 0.000000000000000e+00, -1.320983426974788e+00, -1.144551126774752e+00, 0.000000000000000e+00, -1.360695359182743e+00, -1.469808110493544e-03, 0.000000000000000e+00, -1.926989290281226e-03, -5.526089889081393e-01, 0.000000000000000e+00, -7.308192878671125e-01, -9.524352203459484e-01, 0.000000000000000e+00, -3.398300845115595e-01, -9.524352203459477e-01, 0.000000000000000e+00, -3.398300845115597e-01, -1.297576736753886e+02, 0.000000000000000e+00, -1.177252652723539e+02, -1.175034049727753e+02, 0.000000000000000e+00, -1.060486511064058e+02, -2.309433175420190e+00, 0.000000000000000e+00, -2.315674501159848e+00, -2.058575302246512e+02, 0.000000000000000e+00, -2.306803365438074e+02, -1.467312345570339e+02, 0.000000000000000e+00, -2.457057229197574e+02, -1.467312345570331e+02, 0.000000000000000e+00, -2.457057229197568e+02, -1.461077756103910e-05, 0.000000000000000e+00, -1.462551106780058e-05, -1.461246815001321e-05, 0.000000000000000e+00, -1.462715152365138e-05, -1.461125199425833e-05, 0.000000000000000e+00, -1.462584221544372e-05, -1.461268548532922e-05, 0.000000000000000e+00, -1.462731548529418e-05, -1.461137375201029e-05, 0.000000000000000e+00, -1.462630068581334e-05, -1.461137375201029e-05, 0.000000000000000e+00, -1.462630068581334e-05, -3.123175593127839e-04, 0.000000000000000e+00, -3.142592030056119e-04, -3.193569066891332e-04, 0.000000000000000e+00, -3.210529707259797e-04, -3.086938887682992e-04, 0.000000000000000e+00, -3.116145253406644e-04, -3.154508249902252e-04, 0.000000000000000e+00, -3.183562790144799e-04, -3.188616228176924e-04, 0.000000000000000e+00, -3.184099442811591e-04, -3.188616228176924e-04, 0.000000000000000e+00, -3.184099442811591e-04, -6.374367243279114e-02, 0.000000000000000e+00, -6.529703122732372e-02, -5.608340566610630e-02, 0.000000000000000e+00, -5.661597574144733e-02, -6.509315484618267e-02, 0.000000000000000e+00, -6.745499375073366e-02, -7.089381639647002e-02, 0.000000000000000e+00, -6.837794987874782e-02, -6.016464808909684e-02, 0.000000000000000e+00, -6.776538387365835e-02, -6.016464808909688e-02, 0.000000000000000e+00, -6.776538387365837e-02, -6.386581258231359e-01, 0.000000000000000e+00, -6.189910780503822e-01, -5.186705156098167e-01, 0.000000000000000e+00, -5.117935218421089e-01, -6.435585460255208e-01, 0.000000000000000e+00, -6.922680848847899e-01, -5.609640674809830e-04, 0.000000000000000e+00, -5.621760549337578e-04, -8.202561429592428e-01, 0.000000000000000e+00, -1.140702110938848e+00, -8.202561429592433e-01, 0.000000000000000e+00, -1.140702110938850e+00, 5.454959694313461e+01, 0.000000000000000e+00, 2.187804405085471e+01, -1.142240146521774e+02, 0.000000000000000e+00, -8.733998663179834e+01, -1.023837800075493e+03, 0.000000000000000e+00, -9.308554874850861e+02, -9.829465251282236e-01, 0.000000000000000e+00, -1.303606728979677e+00, 2.750925095418086e+02, 0.000000000000000e+00, -5.815613545954875e+02, 2.750925095418069e+02, 0.000000000000000e+00, -5.815613545954889e+02, -9.324629282878745e-02, 0.000000000000000e+00, -9.188321325662235e-02, -9.412884899610506e-02, 0.000000000000000e+00, -9.277514053200364e-02, -9.388936516780355e-02, 0.000000000000000e+00, -9.252871986602720e-02, -9.363443644487579e-02, 0.000000000000000e+00, -9.227250199857599e-02, -9.376779569931716e-02, 0.000000000000000e+00, -9.240640989731159e-02, -9.376779569931716e-02, 0.000000000000000e+00, -9.240640989731159e-02, -1.023119653665938e-01, 0.000000000000000e+00, -1.011110234917930e-01, -1.243112521234231e-01, 0.000000000000000e+00, -1.233246586522611e-01, -1.259710759691205e-01, 0.000000000000000e+00, -1.246911019498764e-01, -1.206997233222438e-01, 0.000000000000000e+00, -1.192123774579953e-01, -1.240474041298803e-01, 0.000000000000000e+00, -1.227195961679867e-01, -1.240474041298803e-01, 0.000000000000000e+00, -1.227195961679867e-01, -4.337398463573703e-02, 0.000000000000000e+00, -4.410984927097939e-02, -4.305610054977873e-01, 0.000000000000000e+00, -4.292433532735049e-01, -3.736873714204828e-01, 0.000000000000000e+00, -3.789472075555743e-01, -2.909455140293055e-01, 0.000000000000000e+00, -2.850569687348140e-01, -3.650847004593006e-01, 0.000000000000000e+00, -3.690030323896139e-01, -3.650847004593009e-01, 0.000000000000000e+00, -3.690030323896142e-01, -1.352089084604179e-01, 0.000000000000000e+00, -1.376136136993315e-01, -3.048881615673218e+00, 0.000000000000000e+00, -2.888142122418328e+00, -1.365805363629096e+00, 0.000000000000000e+00, -1.363653252868865e+00, -4.224379163827306e-01, 0.000000000000000e+00, -4.805058966142458e-01, -1.147041552457360e+00, 0.000000000000000e+00, -1.345086972891639e+00, -1.147041552457360e+00, 0.000000000000000e+00, -1.345086972891641e+00, -1.428025647395788e+01, 0.000000000000000e+00, -1.148026735888656e+01, 3.618091992726419e+03, 0.000000000000000e+00, 5.425042034954443e+03, -1.630697980244036e+03, 0.000000000000000e+00, -1.471699063756392e+03, -1.388721579908773e+00, 0.000000000000000e+00, -1.665439120330961e+00, 2.469335388332396e+02, 0.000000000000000e+00, -7.027618790612681e+02, 2.469335388332414e+02, 0.000000000000000e+00, -7.027618790612688e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_19_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_19", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([3.104847087390255e-03, 3.104947211577605e-03, 3.104808519996088e-03, 3.104919189511190e-03, 3.104735379928593e-03, 3.104800250415197e-03, 3.105170600956969e-03, 3.105355298568558e-03, 3.104821925216970e-03, 3.105170345515676e-03, 3.104821925216970e-03, 3.105170345515676e-03, 1.173037312420397e-02, 1.171960909395654e-02, 1.173401353045785e-02, 1.172121565732245e-02, 1.179574090438483e-02, 1.180441993513785e-02, 1.180881138666367e-02, 1.180079408350389e-02, 1.172496640503476e-02, 1.185676399469763e-02, 1.172496640503476e-02, 1.185676399469763e-02, 2.057101611316596e-02, 2.119232004264724e-02, 2.043585778910009e-02, 2.108009847890016e-02, 1.812199596850148e-02, 1.826261813318413e-02, 2.088085719669203e-02, 2.153249693130546e-02, 2.086794727719228e-02, 1.995203693842932e-02, 2.086794727719228e-02, 1.995203693842932e-02, 7.459812881170955e-02, 1.030782795115171e-01, 7.783521926872077e-02, 1.109067116142874e-01, 3.029669251481382e-03, 4.679616051402792e-03, 1.350077820485141e-02, 2.042670993201650e-02, 7.095494083663356e-02, 2.806332233705025e-03, 7.095494083663355e-02, 2.806332233705029e-03, 2.039704242017333e-04, 2.237481534176379e-04, 2.110125499328708e-04, 2.364200924027032e-04, 7.513300286608007e-04, 9.110685919976931e-04, 6.263155130515515e-05, 6.798628754853919e-05, 1.595761178087206e-04, 4.044288384857238e-05, 1.595761178087200e-04, 4.044288384857379e-05, 1.162012343138558e-02, 1.162409860907906e-02, 1.158861724053926e-02, 1.159363682487893e-02, 1.161849232069898e-02, 1.162313707352316e-02, 1.159145478441394e-02, 1.159546138622017e-02, 1.160389912457124e-02, 1.160878748334909e-02, 1.160389912457124e-02, 1.160878748334909e-02, 2.737941996921556e-02, 2.757402437409320e-02, 2.852051287337354e-02, 2.867495614259114e-02, 2.723161109350212e-02, 2.745867050634598e-02, 2.830150993008782e-02, 2.853506031289610e-02, 2.811238521222278e-02, 2.818393160800822e-02, 2.811238521222278e-02, 2.818393160800822e-02, 9.994262046488565e-02, 1.012432371534320e-01, 7.847842611312300e-02, 7.840744568136530e-02, 8.120969869397984e-02, 9.182068322419240e-02, 7.581313205375029e-02, 7.982939135682725e-02, 9.936500411180751e-02, 9.937139703159356e-02, 9.936500411180758e-02, 9.937139703159353e-02, 5.139548795531602e-03, 5.096311972278819e-03, 3.604434718111420e-02, 3.600577418112164e-02, 3.669433497664892e-03, 4.776560581888486e-03, 2.321908015338371e-02, 2.323154578139789e-02, 1.070624585013981e-02, 1.870738445731614e-02, 1.070624585013981e-02, 1.870738445731619e-02, -4.993143002711784e-06, -2.295963984779892e-06, 2.747225448021479e-05, 2.148574066812604e-05, 1.156813882370443e-04, 1.241917706697573e-04, 1.662605567233436e-03, 2.336729826241627e-03, -2.025498116213988e-05, 2.007658137120389e-04, -2.025498116213939e-05, 2.007658137120366e-04, 7.309835559203207e-02, 7.259748145716673e-02, 8.386217038044881e-02, 8.319645122803053e-02, 8.010572408847362e-02, 7.947151744148820e-02, 7.694408384135672e-02, 7.640628508577253e-02, 7.852632962120430e-02, 7.794126233726222e-02, 7.852632962120430e-02, 7.794126233726222e-02, 7.359706324146270e-02, 7.321864999613752e-02, 1.475836069877048e-01, 1.473400711006985e-01, 1.388275223189272e-01, 1.379296352979767e-01, 1.155133793508043e-01, 1.148477268869748e-01, 1.282315506201949e-01, 1.276623610248782e-01, 1.282315506201948e-01, 1.276623610248782e-01, 7.366913912934726e-02, 7.397740431448131e-02, 6.301606397967573e-02, 6.386699083780660e-02, 8.953668047461612e-02, 9.332232587664112e-02, 1.242109863189044e-01, 1.231190138926720e-01, 1.225275442077947e-01, 1.234507907724772e-01, 1.225275442077949e-01, 1.234507907724773e-01, 1.258905398053713e-01, 1.297540114260092e-01, 9.792266652021643e-04, 9.401037032362851e-04, 1.084023570303672e-03, 1.212798694540176e-03, 1.429955432618913e-01, 1.694522522638413e-01, 4.144316247931983e-03, 5.935185841757428e-03, 4.144316247931999e-03, 5.935185841757418e-03, 5.224354916949132e-05, 4.617064385928627e-05, -9.566219902071808e-06, -1.082803197042427e-05, 7.707726421342870e-05, 8.350400194394528e-05, 4.453129153009671e-03, 5.882704385535604e-03, -1.720641895762190e-05, 1.865753202157501e-04, -1.720641895761852e-05, 1.865753202157555e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
