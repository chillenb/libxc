
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_19_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_19", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.170584715860595e+01, -2.170597121075998e+01, -2.170651583579996e+01, -2.349435667164495e+01, -2.349508381361610e+01, -2.528472191435635e+01, -3.492529938983741e+00, -3.960066105308883e+00, -3.963822744989065e+00, -3.962667020539878e+00, -3.962376308733886e+00, -3.495297989126948e+00, -5.212762501198470e-01, -5.940777042092069e-01, -6.276680713241296e-01, -5.735376969144910e-01, -5.074196155127180e-01, -6.419599870500111e-01, -1.460446400378037e-01, -1.496209345048759e-01, -6.345104159868528e-01, -1.057091995723419e-01, -1.474541413520950e-01, -1.472307816772010e-01, -4.449035309968178e-03, -4.727678267828720e-03, -2.613577115574394e-02, -2.564670739256738e-03, -3.580260164881140e-03, -3.580260164881140e-03, -6.095439397633783e+00, -6.094964395922369e+00, -6.095403665097043e+00, -6.094985298227033e+00, -5.773602826643215e+00, -5.773890534211024e+00, -2.161354840736748e+00, -2.191675603592312e+00, -2.138170944053448e+00, -2.165468275457513e+00, -1.929137502187137e+00, -2.189392056908602e+00, -6.253992824331055e-01, -7.533433860755390e-01, -6.281005976652352e-01, -6.686668425823336e-01, -6.454209384545506e-01, -7.085527759046104e-01, -6.975486043667083e-02, -1.375659766792761e-01, -6.431882390919497e-02, -2.281260719570716e+00, -8.460540036516145e-02, -8.460540036516144e-02, -1.999309936613437e-03, -2.507104256594649e-03, -1.920055308334358e-03, -4.251297406377208e-02, -2.411959017474488e-03, -2.411959017474489e-03, -6.669296849544262e-01, -6.730813593084168e-01, -6.367428284027611e-01, -6.549737193106957e-01, -6.387365005460778e-01, -6.544294571993511e-01, -6.502897681420956e-01, -5.126982361587363e-01, -5.560599859528732e-01, -6.360896779915258e-01, -6.258562910555320e-01, -5.753798316443693e-01, -7.326609590126855e-01, -1.969607189367082e-01, -2.288960676755611e-01, -3.371368690914101e-01, -3.153196731954868e-01, -2.785088177682952e-01, -5.191267049883451e-01, -2.516546011344385e-02, -3.397689233338320e-02, -3.849210766049883e-01, -5.503150967212693e-02, -5.503150967212694e-02, -6.402560863676071e-03, -6.700534764684525e-04, -1.439048096322381e-03, -5.074431724847682e-02, -2.214938330574505e-03, -2.250310747520134e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_19_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_19", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.235635099193669e+01, -3.235624207704727e+01, -3.235644566122571e+01, -3.235631085542670e+01, -3.235677284676348e+01, -3.235677282645306e+01, -3.235570239486768e+01, -2.884977173059362e+01, -3.235640597147065e+01, -2.885039712667642e+01, -2.885073473881814e+01, -2.885039712667642e+01, -5.042062509856376e+00, -4.925688487591679e+00, -5.041941872939680e+00, -5.042022141292462e+00, -5.039552367701130e+00, -5.039173299223560e+00, -5.040850893254853e+00, -5.040918026753132e+00, -5.041522908456058e+00, -5.038836791220794e+00, -4.924526061853541e+00, -5.038836791220794e+00, -7.819885813729793e-01, -7.911559428386856e-01, -7.790473474134987e-01, -9.496074938181965e-01, -9.002705338110039e-01, -8.900584089085859e-01, -9.116893021916447e-01, -7.568339829663404e-01, -8.012168504267585e-01, -6.989392808842648e-01, -9.609482464793729e-01, -8.535031055102832e-01, -1.775265174640087e-01, -2.317209471567904e-01, -1.809406753953822e-01, -2.390326745322155e-01, -9.495285564435655e-01, -8.424671256746900e-01, -1.407235928788129e-01, -1.451966702664758e-01, -2.248661994629578e-01, -9.575636387810335e-02, -2.248661994629580e-01, -9.387321762772335e-02, -5.580888205700592e-03, -5.930596620592264e-03, -6.136082931993822e-03, -6.265363688314945e-03, -3.401539467543086e-02, -3.462657236885780e-02, -3.354105042702958e-03, -3.298206869087638e-03, -4.978337366806841e-03, -2.832592727009717e-03, -4.978337366806841e-03, -2.832592727009716e-03, -7.116544363537829e+00, -7.114855336861398e+00, -7.120394208641549e+00, -7.118574575312612e+00, -7.116800025105341e+00, -7.115013375293439e+00, -7.120101681442891e+00, -7.118390432180353e+00, -7.849819645177144e+00, -7.116714183101234e+00, -7.118479860309981e+00, -7.847916011373828e+00, -2.872539205685294e+00, -2.872065939902355e+00, -2.889663718892757e+00, -2.888529981214898e+00, -2.856894378198598e+00, -2.861174603160911e+00, -2.873136649869996e+00, -2.877058099677859e+00, -2.892405902914188e+00, -2.681642911216580e+00, -2.892405902914188e+00, -2.882276351958232e+00, -8.107058273140645e-01, -8.797433930837038e-01, -8.613125987576524e-01, -8.624368004465924e-01, -7.700831998656891e-01, -7.823730845526764e-01, -7.693613367216561e-01, -7.851581866712956e-01, -8.317531012314134e-01, -8.725107471967940e-01, -8.317531012314142e-01, -7.985119315986980e-01, -9.150265839696439e-02, -9.246496917496279e-02, -1.731920474050463e-01, -2.027365803900212e-01, -8.194958091780535e-02, -8.692648749208776e-02, -2.614517199388666e+00, -2.613225077311322e+00, -1.079150530465872e-01, -1.179133501939189e-01, -1.079150530465871e-01, -1.179133501939192e-01, -2.641046012852958e-03, -2.614829947817346e-03, -3.227209394271000e-03, -3.276044088942626e-03, -2.413325541168304e-03, -2.555855276646259e-03, -5.530588670063981e-02, -5.661464433848733e-02, -2.464669313214507e-03, -3.385252148126404e-03, -2.464669313214507e-03, -3.385252148126404e-03, -8.473036289856769e-01, -8.512232914949909e-01, -8.226008627691372e-01, -8.265637387123759e-01, -8.750339393390938e-01, -8.782720126506256e-01, -8.752235067253010e-01, -8.418837518413752e-01, -8.751252594565436e-01, -8.783687176104202e-01, -8.751252594565436e-01, -8.382745818590338e-01, -8.216185695642595e-01, -8.250429211231498e-01, -6.927038311162429e-01, -7.283327293891753e-01, -7.008244176650553e-01, -7.811171493076021e-01, -7.274964238528109e-01, -7.302077203226591e-01, -7.103831663496741e-01, -7.128992744440253e-01, -7.103831663496741e-01, -8.001668687518981e-01, -9.016042184852687e-01, -1.013706403929802e+00, -2.775193214701192e-01, -2.798707357902086e-01, -2.952584951337194e-01, -3.655156402269215e-01, -4.674246927593810e-01, -5.118497842247407e-01, -4.395765824854913e-01, -4.396926896911250e-01, -4.395765824854910e-01, -3.783545827509090e-01, -6.536565201036142e-01, -6.553777235150005e-01, -3.338036800821081e-02, -3.360840080040880e-02, -4.345301197102221e-02, -4.495927594381199e-02, -4.829160186478405e-01, -4.815424910166397e-01, -6.984955418909809e-02, -7.452341023807646e-02, -6.984955418909804e-02, -7.452341023807639e-02, -8.375902574935751e-03, -8.679452847554730e-03, -8.681680766210432e-04, -8.701523480471035e-04, -1.854325494315791e-03, -1.972218121346631e-03, -6.666091035553630e-02, -6.769098584667314e-02, -2.334626070265392e-03, -3.102744058692209e-03, -2.334626070265392e-03, -3.256255270984148e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_19_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_19", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.190067225080830e-08, 0.000000000000000e+00, -4.190415632564900e-08, -4.190061048641653e-08, 0.000000000000000e+00, -4.190411073624949e-08, -4.190012605993277e-08, 0.000000000000000e+00, -4.190349609078630e-08, -4.190086240740438e-08, 0.000000000000000e+00, -4.884034689791252e-08, -4.190066228807259e-08, 0.000000000000000e+00, -4.883854256751999e-08, -4.883528673844521e-08, 0.000000000000000e+00, -4.883854256751999e-08, -4.045089250075634e-05, 0.000000000000000e+00, -3.051038788706974e-05, -4.046215684247955e-05, 0.000000000000000e+00, -4.045097161689001e-05, -4.068189704258539e-05, 0.000000000000000e+00, -4.071952304636555e-05, -4.058830130577421e-05, 0.000000000000000e+00, -4.058633130001674e-05, -4.045171472647615e-05, 0.000000000000000e+00, -4.078130915288290e-05, -3.051524704289893e-05, 0.000000000000000e+00, -4.078130915288290e-05, -7.902494261294567e-03, 0.000000000000000e+00, -8.163993739596065e-03, -7.840171296153923e-03, 0.000000000000000e+00, -1.165517883524147e-02, -1.018292415277090e-02, 0.000000000000000e+00, -1.009314895022430e-02, -1.079747777229743e-02, 0.000000000000000e+00, -7.603868343008162e-03, -8.165167455218447e-03, 0.000000000000000e+00, -6.395449786433693e-03, -1.166765693509246e-02, 0.000000000000000e+00, -9.679236905751081e-03, -7.056271338082291e-01, 0.000000000000000e+00, -1.342196778946398e+00, -7.363986619085532e-01, 0.000000000000000e+00, -1.388708914774100e+00, -2.300970748850591e-03, 0.000000000000000e+00, -1.759265876353273e-03, -6.945887789422521e-01, 0.000000000000000e+00, -8.283360374939731e-01, -1.004328759656903e+00, 0.000000000000000e+00, -6.602458962180072e-01, -1.004328759656902e+00, 0.000000000000000e+00, 2.830585877494241e-01, -1.345958460305695e+02, 0.000000000000000e+00, -1.195645141153683e+02, 2.869093813515966e+02, 0.000000000000000e+00, -1.097226695032907e+02, 5.873558690764631e+00, 0.000000000000000e+00, -3.073668527328870e+00, -3.168659278534267e+02, 0.000000000000000e+00, -3.293456629510012e+02, -1.645306242834748e+02, 0.000000000000000e+00, -6.622685638495700e+02, -1.645306242834748e+02, 0.000000000000000e+00, -6.622685638495700e+02, -1.462207190245893e-05, 0.000000000000000e+00, -1.463616897715976e-05, -1.462363328368030e-05, 0.000000000000000e+00, -1.463768467919777e-05, -1.462228087129399e-05, 0.000000000000000e+00, -1.463630948481638e-05, -1.462361344234139e-05, 0.000000000000000e+00, -1.463767910359071e-05, -1.307155444122953e-05, 0.000000000000000e+00, -1.463692853112168e-05, -1.462279737661344e-05, 0.000000000000000e+00, -1.308406686325026e-05, -3.256465785542038e-04, 0.000000000000000e+00, -3.272552868045473e-04, -3.310842006858858e-04, 0.000000000000000e+00, -3.324989067521465e-04, -3.198282441808403e-04, 0.000000000000000e+00, -3.230918836378910e-04, -3.251182246477450e-04, 0.000000000000000e+00, -3.283043322083797e-04, -3.328626468025409e-04, 0.000000000000000e+00, -2.453664196928116e-04, -3.328626468025409e-04, 0.000000000000000e+00, -3.308031778190562e-04, -6.985537329170276e-02, 0.000000000000000e+00, -5.693915526497974e-02, -6.214483560823229e-02, 0.000000000000000e+00, -6.249514625606670e-02, -7.588792465507518e-02, 0.000000000000000e+00, -7.669704895738626e-02, -8.545965321074206e-02, 0.000000000000000e+00, -8.054841592429503e-02, -6.487376558261014e-02, 0.000000000000000e+00, -5.974231221276528e-02, -6.487376558261020e-02, 0.000000000000000e+00, -7.465009722907189e-02, -8.075957801104295e-01, 0.000000000000000e+00, -7.988543914959259e-01, -2.494368202102012e-01, 0.000000000000000e+00, -5.353778400472866e-01, -8.865143698814150e-01, 0.000000000000000e+00, -8.865365540592900e-01, -6.638675117492011e-04, 0.000000000000000e+00, -6.652664753332678e-04, -9.433416100591897e-01, 0.000000000000000e+00, -1.251832279349549e+00, -9.433416100591900e-01, 0.000000000000000e+00, -1.251832279349550e+00, 1.113082360140148e+03, 0.000000000000000e+00, -4.259285283598467e+02, -3.332617707263021e+02, 0.000000000000000e+00, -3.036025957588813e+02, -1.601332289168054e+03, 0.000000000000000e+00, -1.496847150403830e+03, -1.588864013388041e+00, 0.000000000000000e+00, 1.838647502546332e+00, -6.650229821571920e+02, 0.000000000000000e+00, -6.307982545664942e+02, -6.650229821571921e+02, 0.000000000000000e+00, -6.307982545664943e+02, -9.463105496690159e-02, 0.000000000000000e+00, -9.321088220833050e-02, -9.546926993515899e-02, 0.000000000000000e+00, -9.406228860783876e-02, -9.026103252044324e-02, 0.000000000000000e+00, -8.902887885021972e-02, -9.085484015060896e-02, 0.000000000000000e+00, -9.358815183545548e-02, -9.056197797049198e-02, 0.000000000000000e+00, -8.931192344243505e-02, -9.056197797049198e-02, 0.000000000000000e+00, -9.371639083067292e-02, -1.053419870036629e-01, 0.000000000000000e+00, -1.040013665993819e-01, -1.260622465542385e-01, 0.000000000000000e+00, -9.725483199472157e-02, -1.284453270565705e-01, 0.000000000000000e+00, -1.037264696320568e-01, -1.236701949221535e-01, 0.000000000000000e+00, -1.221280292692083e-01, -1.269948739595233e-01, 0.000000000000000e+00, -1.255330325432617e-01, -1.269948739595233e-01, 0.000000000000000e+00, -1.053832248747319e-01, -4.919789880813431e-02, 0.000000000000000e+00, -4.210706974608253e-02, -4.407990422089182e-01, 0.000000000000000e+00, -4.397266793512051e-01, -2.644991938693806e-01, 0.000000000000000e+00, -3.964044963619107e-01, -2.388421635113339e-01, 0.000000000000000e+00, -3.174578700640608e-01, -3.894329550665319e-01, 0.000000000000000e+00, -3.937291354269141e-01, -3.894329550665321e-01, 0.000000000000000e+00, -2.828606657740557e-01, -1.450759694924594e-01, 0.000000000000000e+00, -1.468382523094610e-01, 6.265260019570493e+00, 0.000000000000000e+00, 6.116292841927072e+00, -1.965139755715865e+00, 0.000000000000000e+00, -1.916005873339632e+00, -4.759338018362376e-01, 0.000000000000000e+00, -5.238637315124015e-01, -1.457303334223978e+00, 0.000000000000000e+00, -1.647288891438832e+00, -1.457303334223980e+00, 0.000000000000000e+00, -1.647288891438834e+00, 1.049315709716026e+02, 0.000000000000000e+00, 9.697744385298461e+01, -4.926030383754152e+03, 0.000000000000000e+00, -4.892799827665040e+03, 4.603628747443981e+03, 0.000000000000000e+00, 4.188521197691692e+03, 1.153088562472207e+00, 0.000000000000000e+00, 1.092886747400473e+00, -1.191625887635978e+03, 0.000000000000000e+00, -7.639169028761502e+02, -1.191625887635980e+03, 0.000000000000000e+00, 1.765529829501768e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_19_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_19", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.002389635838559e-03, 2.002450840863490e-03, 2.002391774429616e-03, 2.002452377814129e-03, 2.002394105788880e-03, 2.002456942602252e-03, 2.002370613747969e-03, 3.192048522341179e-03, 2.002391361304675e-03, 3.191803357899734e-03, 3.191836223895699e-03, 3.191803357899734e-03, 1.981071750702422e-02, 6.707932147764323e-03, 1.981374496989434e-02, 1.981045590737510e-02, 1.987231574858792e-02, 1.988251529277269e-02, 1.984942755295640e-02, 1.984922930771581e-02, 1.980713841360899e-02, 1.990127287939928e-02, 6.705309110640780e-03, 1.990127287939928e-02, 8.443563299563929e-03, 9.037542390758041e-03, 8.280033069875509e-03, 5.039137850461489e-02, 4.132746506339337e-02, 4.018077117424237e-02, 4.416178060480326e-02, 7.331180442947288e-03, 9.385710796309036e-03, 4.642045258514385e-03, 5.156803453865234e-02, 3.596300741996960e-02, 6.926022296551234e-03, 1.075256127699421e-01, 7.971901792806079e-03, 1.171683015525549e-01, 1.513684985720947e-02, 1.991567310026398e-03, 2.058300629822646e-02, 2.604019703336838e-02, 8.147759917937326e-02, 6.680037486233073e-03, 8.147759917937339e-02, -3.689915075554430e-04, 2.141199494752241e-04, 2.284043773027643e-04, -4.398051519548297e-07, 2.473408701536157e-04, -3.449117499033974e-05, 1.293416716280707e-03, 1.090372136029019e-04, 1.077544582160610e-04, 1.855733478627707e-04, 1.372775889577429e-04, 1.855733478627707e-04, 1.372775889577428e-04, 1.164415449803995e-02, 1.164675888268252e-02, 1.161230733359117e-02, 1.161597165973720e-02, 1.164195393398532e-02, 1.164538927951592e-02, 1.161464628194652e-02, 1.161743948345514e-02, 8.374021034699088e-03, 1.163135343901451e-02, 1.162817140867546e-02, 8.376065863194565e-03, 3.083517020848087e-02, 3.093731690809159e-02, 3.157624064818654e-02, 3.165132538574234e-02, 3.010771806188445e-02, 3.042166882452585e-02, 3.081079179546484e-02, 3.111520901952019e-02, 3.175943843668046e-02, 9.285802540872119e-03, 3.175943843668046e-02, 3.139985279885082e-02, 1.300744309699366e-01, 6.134549648696876e-02, 1.056575399803893e-01, 1.042989597455582e-01, 1.315863778074351e-01, 1.352659470157768e-01, 1.377255746686529e-01, 1.325016191377395e-01, 1.229577247857155e-01, 6.251828291755855e-02, 1.229577247857156e-01, 1.314297701031945e-01, 7.129729014242577e-03, 7.277271942372198e-03, 1.079327522031899e-03, 3.982263634408465e-02, 5.601811690062072e-03, 6.707401432320491e-03, 3.916204975062537e-02, 3.917507622417736e-02, 1.337926456666213e-02, 2.208524960425142e-02, 1.337926456666206e-02, 2.208524960425146e-02, -1.800268904250631e-08, 6.938813062200229e-05, 1.021333466420265e-04, 9.732734433497295e-05, 2.053734334051148e-04, 2.281213657203225e-04, 2.957610376003383e-03, -1.759099479319860e-04, 9.074263965886190e-05, 2.235469234738761e-04, 9.074263965886237e-05, 2.235469234738754e-04, 7.606076149065169e-02, 7.545780335063536e-02, 8.712990682333886e-02, 8.635283684786427e-02, 7.170423002188031e-02, 7.131811605050720e-02, 7.074297010380458e-02, 7.938184983660444e-02, 7.123844530613578e-02, 7.086021618835751e-02, 7.123844530613578e-02, 8.096050777964076e-02, 7.968928393774845e-02, 7.905807523100247e-02, 1.532785596376029e-01, 6.299240908580907e-02, 1.463083077067719e-01, 7.525897021973825e-02, 1.233933851282436e-01, 1.226323621532970e-01, 1.366473338679152e-01, 1.357358070481536e-01, 1.366473338679152e-01, 7.865709087316552e-02, 1.069825946453175e-01, 6.301127718647813e-02, 6.692875213475463e-02, 6.795818101445446e-02, 1.493517263457305e-02, 1.060191747255684e-01, 4.872493560016674e-02, 1.708480873058116e-01, 1.481575695536690e-01, 1.494110320127456e-01, 1.481575695536691e-01, 3.332415725245678e-02, 1.542062340369076e-01, 1.561830909005526e-01, -3.432631730155408e-05, -3.433007565242044e-05, 1.686543868918000e-03, 1.835596574643698e-03, 2.053850685389770e-01, 2.177086996609939e-01, 5.682834251320774e-03, 7.853447570867384e-03, 5.682834251320790e-03, 7.853447570867360e-03, -5.204831193618450e-07, -5.707175306864449e-07, 2.935129659003536e-05, 2.935365742489359e-05, -2.590332232459392e-08, -3.301617424904678e-08, -3.331327040104731e-04, -3.788626248035986e-04, 1.382545913951726e-04, 2.083448374755363e-04, 1.382545913951752e-04, -1.966636943370812e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
