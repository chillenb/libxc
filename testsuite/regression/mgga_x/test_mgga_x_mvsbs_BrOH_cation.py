
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mvsbs_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvsbs", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.350008439848930e+01, -2.350012992242788e+01, -2.350022907854294e+01, -2.349954512335153e+01, -2.349991826481965e+01, -2.349991826481965e+01, -3.088807413747104e+00, -3.088727080480041e+00, -3.086733425254127e+00, -3.088624698567377e+00, -3.087751732305325e+00, -3.087751732305325e+00, -6.241646943271071e-01, -6.238828013672886e-01, -6.182152549547308e-01, -6.243314234494642e-01, -6.273505637521635e-01, -6.273505637521635e-01, -1.831886712741930e-01, -1.860253175263918e-01, -7.246867480856707e-01, -1.296712731449005e-01, -1.721950660529635e-01, -1.721950660529635e-01, -1.466530930072977e-03, -1.594443258409851e-03, -1.910625853209247e-02, -6.258015555276871e-04, -1.074378471851223e-03, -1.074378471851223e-03, -5.674713441570305e+00, -5.675719430568757e+00, -5.674706764901091e+00, -5.675597561322462e+00, -5.675250359195618e+00, -5.675250359195618e+00, -2.058518630645722e+00, -2.078193318881642e+00, -2.056929883441868e+00, -2.075258304069330e+00, -2.069270237149217e+00, -2.069270237149217e+00, -6.128470188636910e-01, -7.639364344482912e-01, -4.752520824274834e-01, -5.829277411124719e-01, -6.476011339798706e-01, -6.476011339798707e-01, -7.787674106123696e-02, -1.783994049906547e-01, -7.016446233863330e-02, -2.020491757530967e+00, -1.016709351392447e-01, -1.016709351392447e-01, -4.282807595768819e-04, -6.094952961224517e-04, -5.199510580644021e-04, -4.022014556498197e-02, -6.704641915581854e-04, -6.704641915581855e-04, -6.467137173730704e-01, -6.434019307143938e-01, -6.445587226447935e-01, -6.455191849946097e-01, -6.450401658991249e-01, -6.450401658991249e-01, -6.339740295449922e-01, -4.944422020523359e-01, -5.921534047439895e-01, -6.005934630803769e-01, -5.936806429809298e-01, -5.936806429809298e-01, -7.540038113622620e-01, -2.313446131697936e-01, -2.783290144899999e-01, -3.349149790672019e-01, -3.166886074036016e-01, -3.166886074036016e-01, -4.304391602073019e-01, -1.774114418690840e-02, -2.814872238135158e-02, -3.019758358412923e-01, -5.930896599567051e-02, -5.930896599567054e-02, -2.326217520066173e-03, -9.631012725300542e-05, -2.916934448066660e-04, -5.415262108266707e-02, -6.040203577079672e-04, -6.040203577079667e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mvsbs_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvsbs", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.420861372339364e+01, -3.420810594575609e+01, -3.420850143429124e+01, -3.420802458243642e+01, -3.420839846557603e+01, -3.420780508407451e+01, -3.420965623841452e+01, -3.420941104505696e+01, -3.420853210495316e+01, -3.420895718170294e+01, -3.420853210495316e+01, -3.420895718170294e+01, -3.390357355989278e+00, -3.391532092786552e+00, -3.390044986995721e+00, -3.391419409935942e+00, -3.385018772184473e+00, -3.384418305218397e+00, -3.382688777800866e+00, -3.383702395672981e+00, -3.390409245053067e+00, -3.379127166817788e+00, -3.390409245053067e+00, -3.379127166817788e+00, -7.452800866813934e-01, -7.478563696896111e-01, -7.440235707335221e-01, -7.475351171985363e-01, -7.280821062192199e-01, -7.186320429966908e-01, -7.174803975071730e-01, -7.181443909271525e-01, -7.560124335960040e-01, -6.767184053043812e-01, -7.560124335960040e-01, -6.767184053043812e-01, -2.327715010438618e-01, -2.350571355862699e-01, -2.346311503560622e-01, -2.377971445261709e-01, -9.144793207782662e-01, -9.352987805765306e-01, -1.983970774512076e-01, -2.005323814620366e-01, -2.430216057574548e-01, -1.461117461532505e-01, -2.430216057574547e-01, -1.461117461532505e-01, -2.589594072865725e-03, -2.831066987181831e-03, -2.798352188290371e-03, -3.098112846758341e-03, -3.453138394188145e-02, -3.748246933625810e-02, -1.203086885322443e-03, -1.168035996542087e-03, -2.186500215523524e-03, -1.062763599838628e-03, -2.186500215523526e-03, -1.062763599838629e-03, -7.995309228958073e+00, -7.993526195948741e+00, -7.991486773613532e+00, -7.989831213945045e+00, -7.995093410810956e+00, -7.993396662303318e+00, -7.991814169016775e+00, -7.990040702951183e+00, -7.993344799274565e+00, -7.991663702023946e+00, -7.993344799274565e+00, -7.991663702023946e+00, -2.247629681308887e+00, -2.250780151599812e+00, -2.244423822073450e+00, -2.244982868842676e+00, -2.295873235718166e+00, -2.286509504965071e+00, -2.282165103696936e+00, -2.273535931799173e+00, -2.158235887861552e+00, -2.241358304324259e+00, -2.158235887861552e+00, -2.241358304324259e+00, -1.057295565732257e+00, -1.071304860502844e+00, -1.250295432789975e+00, -1.163994894479769e+00, -5.078999534692419e-01, -4.837141606939289e-01, -8.648452679614854e-01, -9.391539965567907e-01, -1.257269248353263e+00, -1.043772586330278e+00, -1.257269248353263e+00, -1.043772586330278e+00, -1.389022908966009e-01, -1.407805566134434e-01, -2.502733207465490e-01, -2.513678039681986e-01, -1.231292261453770e-01, -1.314890021169941e-01, -3.192991963861024e+00, -3.192374473279725e+00, -1.623595161769955e-01, -1.700116151143009e-01, -1.623595161769955e-01, -1.700116151143009e-01, -8.051498948165943e-04, -8.412321458606840e-04, -1.165323598552055e-03, -1.179644437200726e-03, -9.346892999752128e-04, -1.032639575895010e-03, -7.561583588993211e-02, -7.580872360391554e-02, -8.469526606904225e-04, -1.410194362746191e-03, -8.469526606904227e-04, -1.410194362746191e-03, -8.581326150750981e-01, -8.613599561325962e-01, -8.644951876589541e-01, -8.675489222644429e-01, -8.619704638370903e-01, -8.650810738755630e-01, -8.601059014109473e-01, -8.632919857352545e-01, -8.610075852328852e-01, -8.641595465450056e-01, -8.610075852328852e-01, -8.641595465450056e-01, -8.281525800417417e-01, -8.312550781007467e-01, 1.554135185094828e+00, 2.166483120955298e+00, -9.381046438325633e-01, -9.375845927430154e-01, -8.336047947222556e-01, -8.357975732511174e-01, -8.616052813319977e-01, -8.643017028780903e-01, -8.616052813319977e-01, -8.643017028780902e-01, -1.297740045849152e+00, -1.352032925011424e+00, -2.976424568004026e-01, -2.989462130374682e-01, -3.441447230758188e-01, -3.463377816049444e-01, -2.470636471321302e-01, -2.532960033568391e-01, -3.729564381575504e-01, -3.717588699069154e-01, -3.729564381575504e-01, -3.717588699069155e-01, -1.556807688480892e-01, -1.250840053960348e-01, -3.303233885852312e-02, -3.340775288967452e-02, -5.182789044748524e-02, -5.459482327905524e-02, -2.840689967257368e-01, -2.359435264978625e-01, -1.029277352179312e-01, -1.122067241765601e-01, -1.029277352179312e-01, -1.122067241765602e-01, -4.347845941237200e-03, -4.596740558580538e-03, -1.771631931418791e-04, -1.893114404687140e-04, -5.179233182735821e-04, -5.726626370776729e-04, -9.792339514840466e-02, -9.949060286061827e-02, -8.737429141857275e-04, -1.243300576536156e-03, -8.737429141857262e-04, -1.243300576536154e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mvsbs_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvsbs", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [4.984360507482587e-08, 0.000000000000000e+00, 4.980121550472255e-08, 4.984048968164247e-08, 0.000000000000000e+00, 4.979896235432743e-08, 4.982763375119762e-08, 0.000000000000000e+00, 4.978138306842976e-08, 4.986247731045317e-08, 0.000000000000000e+00, 4.982581459484137e-08, 4.984173005531633e-08, 0.000000000000000e+00, 4.980595081510734e-08, 4.984173005531633e-08, 0.000000000000000e+00, 4.980595081510734e-08, -1.086877179634155e-05, 0.000000000000000e+00, -1.084540354856929e-05, -1.086667477896486e-05, 0.000000000000000e+00, -1.084159351238470e-05, -1.079584355642370e-05, 0.000000000000000e+00, -1.077535513376862e-05, -1.093630013661114e-05, 0.000000000000000e+00, -1.090975467867795e-05, -1.088307157163257e-05, 0.000000000000000e+00, -1.084531491703345e-05, -1.088307157163257e-05, 0.000000000000000e+00, -1.084531491703345e-05, -6.676191492974585e-03, 0.000000000000000e+00, -6.440523855262822e-03, -6.780473246100997e-03, 0.000000000000000e+00, -6.463260698404363e-03, -8.096187914514425e-03, 0.000000000000000e+00, -9.010516519156244e-03, -9.446675334280270e-03, 0.000000000000000e+00, -9.382216880956968e-03, -5.828355522209253e-03, 0.000000000000000e+00, -1.427583768779988e-02, -5.828355522209253e-03, 0.000000000000000e+00, -1.427583768779988e-02, -6.556444627241338e-01, 0.000000000000000e+00, -9.443291365132865e-01, -6.465392090275198e-01, 0.000000000000000e+00, -9.464385471147321e-01, -1.432803985744552e-03, 0.000000000000000e+00, -1.474968107602395e-03, 3.154075855911735e-01, 0.000000000000000e+00, 1.239666545735263e-01, -5.314300463324965e-01, 0.000000000000000e+00, 1.652275021870548e+00, -5.314300463324962e-01, 0.000000000000000e+00, 1.652275021870546e+00, 1.301861762293581e+02, 0.000000000000000e+00, 1.146990769744154e+02, 1.294812470541851e+02, 0.000000000000000e+00, 1.124006276615242e+02, 9.235855414862383e+00, 0.000000000000000e+00, 8.260659821867780e+00, 3.585272704650392e+02, 0.000000000000000e+00, 3.486713652486908e+02, 1.691014717484465e+02, 0.000000000000000e+00, 9.991618598604804e+02, 1.691014717484474e+02, 0.000000000000000e+00, 9.991618598604821e+02, 9.338070947104090e-06, 0.000000000000000e+00, 9.342457125344103e-06, 9.290821133813127e-06, 0.000000000000000e+00, 9.296787047721433e-06, 9.333110105156995e-06, 0.000000000000000e+00, 9.339204414705367e-06, 9.292672632175331e-06, 0.000000000000000e+00, 9.297815161789951e-06, 9.315550768563597e-06, 0.000000000000000e+00, 9.319748477466643e-06, 9.315550768563597e-06, 0.000000000000000e+00, 9.319748477466643e-06, -2.411762206294346e-04, 0.000000000000000e+00, -2.419917593392682e-04, -2.551312502804287e-04, 0.000000000000000e+00, -2.569929643178192e-04, -2.250423678585616e-04, 0.000000000000000e+00, -2.298504244953572e-04, -2.443740383299638e-04, 0.000000000000000e+00, -2.490311602709833e-04, -2.815619793282291e-04, 0.000000000000000e+00, -2.519561239278880e-04, -2.815619793282291e-04, 0.000000000000000e+00, -2.519561239278880e-04, -1.873000190652513e-02, 0.000000000000000e+00, -2.510579715385965e-02, -7.115362558578733e-02, 0.000000000000000e+00, -4.655239220214193e-02, -2.088536266060964e-02, 0.000000000000000e+00, -1.226942318440460e-02, -2.571621536626251e-03, 0.000000000000000e+00, -1.194358487080799e-02, -9.141223898027898e-02, 0.000000000000000e+00, -2.477476358376453e-02, -9.141223898027932e-02, 0.000000000000000e+00, -2.477476358376457e-02, 1.619941197486467e+00, 0.000000000000000e+00, 1.637740478676828e+00, -2.354411608948484e-01, 0.000000000000000e+00, -2.298266170147591e-01, 2.258104504144318e+00, 0.000000000000000e+00, 1.893012853975562e+00, -1.353561876690736e-04, 0.000000000000000e+00, -1.361485030270696e-04, 9.338043475734304e-01, 0.000000000000000e+00, 4.202378710517581e-01, 9.338043475734298e-01, 0.000000000000000e+00, 4.202378710517558e-01, 7.760625473112261e+02, 0.000000000000000e+00, 6.845684138516393e+02, 4.939438812665197e+02, 0.000000000000000e+00, 4.659024885698050e+02, 1.976104989149735e+03, 0.000000000000000e+00, 1.960377248616300e+03, 5.443282342406063e+00, 0.000000000000000e+00, 4.703967201109569e+00, 1.145653873932509e+03, 0.000000000000000e+00, 5.879675615989662e+02, 1.145653873932509e+03, 0.000000000000000e+00, 5.879675615989647e+02, 4.586615278756773e-02, 0.000000000000000e+00, 4.488708957973572e-02, 5.269393670156539e-02, 0.000000000000000e+00, 5.144570059430736e-02, 5.010673800724350e-02, 0.000000000000000e+00, 4.894548571236928e-02, 4.810815490397614e-02, 0.000000000000000e+00, 4.706226148440767e-02, 4.909395526309408e-02, 0.000000000000000e+00, 4.799108930496598e-02, 4.909395526309408e-02, 0.000000000000000e+00, 4.799108930496600e-02, 5.790811898637796e-02, 0.000000000000000e+00, 5.647466252121860e-02, -1.118986745185219e+00, 0.000000000000000e+00, -1.316784553454951e+00, 4.901130878913796e-01, 0.000000000000000e+00, 4.410739158028047e-01, 1.367169010241162e-01, 0.000000000000000e+00, 1.332007170492185e-01, 2.326442428341431e-01, 0.000000000000000e+00, 2.198456556159044e-01, 2.326442428341433e-01, 0.000000000000000e+00, 2.198456556159046e-01, -4.184739687934085e-02, 0.000000000000000e+00, -5.473289270117201e-02, -2.875131542141718e-01, 0.000000000000000e+00, -2.860593846350428e-01, -2.200871829427583e-01, 0.000000000000000e+00, -2.232338976899449e-01, -4.547597030022035e-01, 0.000000000000000e+00, -4.290084216124269e-01, -2.319322158233133e-01, 0.000000000000000e+00, -2.370943483976246e-01, -2.319322158233134e-01, 0.000000000000000e+00, -2.370943483976249e-01, -2.566135511359999e-01, 0.000000000000000e+00, -2.618203621821550e-01, 7.538990115430045e+00, 0.000000000000000e+00, 7.718562938843734e+00, 5.968331137266482e+00, 0.000000000000000e+00, 5.716425915386881e+00, -2.769665399029947e-01, 0.000000000000000e+00, -2.924565742103109e-01, 3.422755668936747e+00, 0.000000000000000e+00, 3.242357377108165e+00, 3.422755668936748e+00, 0.000000000000000e+00, 3.242357377108165e+00, 1.043009352599402e+02, 0.000000000000000e+00, 1.010948640664691e+02, 5.747681609724587e+03, 0.000000000000000e+00, 1.022101267277828e+04, 1.503719693181381e+03, 0.000000000000000e+00, 1.435209122457168e+03, 3.748505807611895e+00, 0.000000000000000e+00, 2.960805244950997e+00, 2.269839615166882e+03, 0.000000000000000e+00, 6.874698091424749e+02, 2.269839615166886e+03, 0.000000000000000e+00, 6.874698091424794e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mvsbs_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvsbs", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mvsbs_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvsbs", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-4.085594606596704e-03, -4.081125738443436e-03, -4.085356030801082e-03, -4.080953443604329e-03, -4.084254578605109e-03, -4.079473307758734e-03, -4.086913932099633e-03, -4.082865016778365e-03, -4.085452296984240e-03, -4.081263092033165e-03, -4.085452296984240e-03, -4.081263092033165e-03, -2.920092361874050e-03, -2.918087164506645e-03, -2.923366393138842e-03, -2.920276476363194e-03, -2.988404223782691e-03, -3.000292072971873e-03, -2.961642491812497e-03, -2.962298581384168e-03, -2.913209986089308e-03, -3.021808430907239e-03, -2.913209986089308e-03, -3.021808430907239e-03, 8.265406322852529e-04, 3.769209699655722e-04, 9.845036076037428e-04, 4.281345595979981e-04, 3.067682491091456e-03, 4.162024168516176e-03, 4.371133327282248e-03, 4.130403146843753e-03, -2.783071010793518e-04, 1.214712950435861e-02, -2.783071010793518e-04, 1.214712950435861e-02, 3.259832495952662e-02, 4.907676004291656e-02, 3.174781962821946e-02, 4.973400756519560e-02, 8.795265828799967e-05, -2.284799198375137e-04, 9.685581585056243e-03, 1.365987172785808e-02, 2.948381772762286e-02, 5.531955627349693e-03, 2.948381772762287e-02, 5.531955627349696e-03, 2.698394759939811e-04, 3.028283233159733e-04, 2.888870866287803e-04, 3.318663801383949e-04, 1.800966299483313e-03, 2.118708372314771e-03, 7.519382518061832e-05, 7.754016252090062e-05, 2.041510822267564e-04, 7.567097776185455e-05, 2.041510822267557e-04, 7.567097776185455e-05, -1.046599435209231e-02, -1.046132927353677e-02, -1.041841099007676e-02, -1.041539064416009e-02, -1.045994271876407e-02, -1.045729605419627e-02, -1.041926912468829e-02, -1.041570967929562e-02, -1.044410834528535e-02, -1.043861769434992e-02, -1.044410834528535e-02, -1.043861769434992e-02, 1.047255245603015e-02, 1.060937759711338e-02, 1.165275425472125e-02, 1.182926252377507e-02, 1.041923623565578e-02, 1.054256885934599e-02, 1.184022686087282e-02, 1.197611742888185e-02, 1.186754084844494e-02, 1.125222451518094e-02, 1.186754084844494e-02, 1.125222451518094e-02, 1.329732677254596e-01, 1.509312931303109e-01, 2.363394557650106e-01, 1.502399137699327e-01, -2.173448660784283e-02, -4.390234358555661e-02, 5.088761646817132e-02, 7.758544527399763e-02, 3.374330054326424e-01, 1.412827641068163e-01, 3.374330054326433e-01, 1.412827641068164e-01, 6.544500575276832e-03, 6.383010238921768e-03, 2.166493459976325e-02, 2.136559523010454e-02, 5.232188707683427e-03, 6.311043989300249e-03, 2.617212888275517e-02, 2.623459497767908e-02, 1.064700424863740e-02, 1.557449652617995e-02, 1.064700424863741e-02, 1.557449652617997e-02, 3.207405335576250e-05, 3.062786135357141e-05, 5.306582113180404e-05, 4.858043125121514e-05, 1.509834755390510e-04, 1.715152003364809e-04, 3.327856657402438e-03, 4.363573099718932e-03, 6.268382772793682e-05, 2.419851071036197e-04, 6.268382772793663e-05, 2.419851071036199e-04, -7.739133660689362e-02, -7.652395688963157e-02, -8.763971842875938e-02, -8.644713484700890e-02, -8.375131585349568e-02, -8.265734182060666e-02, -8.074838742683220e-02, -7.981061185422006e-02, -8.223192119548718e-02, -8.121603593393620e-02, -8.223192119548718e-02, -8.121603593393620e-02, -9.398115455609431e-02, -9.227426034462567e-02, 5.012624936191280e-01, 5.036951154344619e-01, -6.735681351670966e-01, -6.047455235752840e-01, -1.910903933573813e-01, -1.878155804401449e-01, -3.188309209324404e-01, -3.019919333883096e-01, -3.188309209324406e-01, -3.019919333883102e-01, 1.988355163141444e-01, 2.419175080817116e-01, 3.090126618375749e-02, 3.097671841270410e-02, 3.106204031966004e-02, 3.195184278322628e-02, 4.188448064311203e-02, 3.799302554046659e-02, 3.728893824145835e-02, 3.782043411667562e-02, 3.728893824145836e-02, 3.782043411667565e-02, 3.893532649455345e-02, 3.261034932142630e-02, 2.213041829684838e-03, 2.137352631791556e-03, 2.454692186476510e-03, 2.681487293949245e-03, -1.880596283656322e-02, -5.734286726359014e-02, 6.242884159003433e-03, 7.942343861344391e-03, 6.242884159003433e-03, 7.942343861344398e-03, 1.609955059479398e-04, 1.647568074598828e-04, 1.329853264953313e-05, 9.383160439960426e-06, 6.816265353770159e-05, 7.697240436720420e-05, 6.813829706163010e-03, 9.035098644237289e-03, 8.202879929133757e-05, 2.167110573463950e-04, 8.202879929133755e-05, 2.167110573463943e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
