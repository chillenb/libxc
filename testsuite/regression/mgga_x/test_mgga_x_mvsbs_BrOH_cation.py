
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mvsbs_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvsbs", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.394596976346165e+01, -2.394620756915699e+01, -2.394721678839990e+01, -2.360399776765807e+01, -2.360530907901274e+01, -2.326527074440046e+01, -3.399318053436839e+00, -3.780450307776596e+00, -3.780844773738576e+00, -3.781028100078362e+00, -3.780615627225890e+00, -3.399808948582717e+00, -6.027498983734695e-01, -6.634228656248202e-01, -7.014915483441557e-01, -6.500375493989620e-01, -5.926482861379778e-01, -7.083237213034043e-01, -1.725701754656068e-01, -1.755227567690631e-01, -7.647313028762917e-01, -1.293236421547025e-01, -1.737363904548215e-01, -1.748778170468792e-01, -1.465279393260274e-03, -3.466560181157838e-03, -2.509568442556878e-02, -6.168407343038872e-04, -1.067537858738764e-03, -1.067537858738764e-03, -5.671917239341434e+00, -5.672969464964183e+00, -5.671969739342094e+00, -5.672898581076308e+00, -5.981019515597117e+00, -5.980718696198119e+00, -2.125136081274231e+00, -2.141110489868782e+00, -2.113417808471917e+00, -2.127574427995643e+00, -1.935927901027832e+00, -2.139646311627539e+00, -6.206767506182320e-01, -6.942835802536730e-01, -5.908762692912558e-01, -6.146949596519597e-01, -6.338798653347765e-01, -6.499574897247514e-01, -7.658098880114811e-02, -1.692459130620610e-01, -6.883168242710314e-02, -2.090219271882422e+00, -1.012714828178910e-01, -1.012714828178910e-01, -1.367722093074049e-03, -5.871132625514931e-04, -5.112392783250475e-04, -4.589525191206261e-02, -6.573182461785457e-04, -6.573182461785458e-04, -6.423440878051423e-01, -6.386432264818629e-01, -6.605603687648833e-01, -6.489590150394756e-01, -6.585801706105844e-01, -6.496115795334474e-01, -6.249295228130181e-01, -4.763184471161759e-01, -5.504191150612995e-01, -5.867314254092435e-01, -5.738274222521131e-01, -5.717563604060427e-01, -7.303312963183375e-01, -2.328465822573716e-01, -2.609104012053544e-01, -3.420445178623561e-01, -3.273798435976433e-01, -2.984078033565380e-01, -4.929062329107706e-01, -3.108274818159815e-02, -2.766376490223020e-02, -3.644648121894345e-01, -5.846594091981196e-02, -5.846594091981197e-02, -7.901219041079089e-03, -8.319565876913940e-05, -1.775794759101969e-03, -6.286788880777969e-02, -5.921307906732737e-04, -2.239144763708566e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mvsbs_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvsbs", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-4.112081123680428e+01, -4.112627961720611e+01, -4.112175444398900e+01, -4.112696379806469e+01, -4.112449435340375e+01, -4.113096752603872e+01, -4.111390370994588e+01, -3.442951539880141e+01, -4.112140873995180e+01, -3.442885515498725e+01, -3.442981926231629e+01, -3.442885515498725e+01, -3.294291986851354e+00, -3.690538141283504e+00, -3.293031325831282e+00, -3.294459789636624e+00, -3.268060720311026e+00, -3.263533595330423e+00, -3.277516464772238e+00, -3.277528391379657e+00, -3.296564959531232e+00, -3.254613011470407e+00, -3.690241913270825e+00, -3.254613011470408e+00, -7.714232732505395e-01, -7.728997731254997e-01, -7.706704504318058e-01, -8.417134085278103e-01, -8.387711382110166e-01, -8.356847333926518e-01, -8.363559726640236e-01, -7.618145158688263e-01, -7.777809627191674e-01, -7.419006133517478e-01, -8.457652067962250e-01, -8.254767718797635e-01, -2.013463363834497e-01, -2.332642161330109e-01, -2.034511527148984e-01, -2.352985759485068e-01, -1.059422094589418e+00, -9.388480295555747e-01, -1.993830774169964e-01, -1.999019606076503e-01, -2.398932869146658e-01, -1.404020137673534e-01, -2.398932869146657e-01, -1.168095519338998e-01, -2.578391798656957e-03, -2.825796705181104e-03, -7.572684626807549e-03, -3.085594634913634e-03, -4.206080706201570e-02, -3.622918966928621e-02, -1.155572534009560e-03, -1.128244170644151e-03, -2.158515372583182e-03, -9.909025413544280e-04, -2.158515372583182e-03, -9.909025413544280e-04, -7.998157431279358e+00, -7.996207929313943e+00, -7.994299969397195e+00, -7.992479378629973e+00, -7.997873359191796e+00, -7.996029549356199e+00, -7.994566700092311e+00, -7.992645620073214e+00, -8.383110335179262e+00, -7.994336915870488e+00, -7.996225261576336e+00, -8.382550927714876e+00, -2.160783278547917e+00, -2.156596442822411e+00, -2.133520711395928e+00, -2.129658839430155e+00, -2.181260230786663e+00, -2.172118333163483e+00, -2.161934915340971e+00, -2.150886027449882e+00, -2.125044490709814e+00, -2.141680459411448e+00, -2.125044490709814e+00, -2.139983417657560e+00, -1.679977111565163e+00, -9.016456137968142e-01, -1.019267881698129e+00, -1.012806666422488e+00, -4.789863831805474e-01, -1.340501358892820e-01, -2.276455205810428e+00, -1.243489217181236e+00, -1.177017082575780e+00, -8.972172913355649e-01, -1.177017082575780e+00, -1.437094513969561e+00, -1.342897264870198e-01, -1.358912040648610e-01, -2.080422498152571e-01, -2.501759431157475e-01, -1.177504189106294e-01, -1.268461315216691e-01, -3.719074655929132e+00, -3.714509514978142e+00, -1.596969994328874e-01, -1.686928395906929e-01, -1.596969994328874e-01, -1.686928395906929e-01, -3.259090541599959e-03, -7.565067753986686e-04, -1.083448530618979e-03, -1.090795119069827e-03, -8.967267529981878e-04, -9.887722637765179e-04, -7.125551602791566e-02, -7.024438118102214e-02, -7.512421653411490e-04, -1.397103162888071e-03, -7.512421653411490e-04, -1.397103162888071e-03, -8.644036271263633e-01, -8.674426410330248e-01, -8.710264620091049e-01, -8.738797228669073e-01, -8.289788375780290e-01, -8.334720012796769e-01, -8.384087511821313e-01, -8.694665520662646e-01, -8.340168311444540e-01, -8.382120499647212e-01, -8.340168311444541e-01, -8.703703359317611e-01, -8.426402216674714e-01, -8.450744358489649e-01, 9.553900752074225e-02, -4.941033584596273e-01, -1.003602024368234e+00, -8.326047381579025e-01, -8.532390073725301e-01, -8.551003975850996e-01, -8.918164361290665e-01, -8.914106428185520e-01, -8.918164361290665e-01, -9.257081527366745e-01, -1.123003687459539e+00, -1.217846256737081e+00, -2.953090458604659e-01, -2.964934555279310e-01, -3.045286400745218e-01, -3.378419851406189e-01, -3.801329895174170e-01, -3.876677623840096e-01, -3.649686969611246e-01, -3.643304471483763e-01, -3.649686969611244e-01, -3.414334172275892e-01, -4.150280296751485e-01, -3.871162167796792e-01, -4.127462904479873e-02, -4.155687003517138e-02, -4.958844502773641e-02, -5.232320077885316e-02, -3.212557174624268e-01, -2.037131788878167e-01, -9.922339280293581e-02, -1.087699270120404e-01, -9.922339280293582e-02, -1.087699270120404e-01, -1.033718238470436e-02, -1.071190203722499e-02, -1.538386154135215e-04, -1.542813272206666e-04, -2.288265735039001e-03, -2.433752438786150e-03, -8.287122122372390e-02, -8.418043170210633e-02, -7.797105997692246e-04, -1.231476056117484e-03, -7.797105997692230e-04, -4.018412547373017e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mvsbs_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvsbs", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.520899234310535e-08, 0.000000000000000e+00, -3.524049489185152e-08, -3.521313324935829e-08, 0.000000000000000e+00, -3.524349854789364e-08, -3.522456881727925e-08, 0.000000000000000e+00, -3.526039927223852e-08, -3.517816310357610e-08, 0.000000000000000e+00, 4.283576806398346e-08, -3.521167233409524e-08, 0.000000000000000e+00, 4.282430029021411e-08, 4.282538898715773e-08, 0.000000000000000e+00, 4.282430029021411e-08, -6.660739167290695e-05, 0.000000000000000e+00, -3.426605974027581e-06, -6.667505403132867e-05, 0.000000000000000e+00, -6.659945482573957e-05, -6.801583621590641e-05, 0.000000000000000e+00, -6.825791906335824e-05, -6.750015364716061e-05, 0.000000000000000e+00, -6.749820022009984e-05, -6.649965654290831e-05, 0.000000000000000e+00, -6.872628470325296e-05, -3.430529425468220e-06, 0.000000000000000e+00, -6.872628470325296e-05, -2.617133832000668e-03, 0.000000000000000e+00, -2.609979562065115e-03, -2.623234200207775e-03, 0.000000000000000e+00, -9.779321954217858e-03, -8.337260518626969e-03, 0.000000000000000e+00, -8.241529853761800e-03, -8.894255900890963e-03, 0.000000000000000e+00, -2.715809621873178e-03, -2.551970775364196e-03, 0.000000000000000e+00, -2.855528153171175e-03, -9.838709725687489e-03, 0.000000000000000e+00, -7.831500534220250e-03, -4.612540021934120e-01, 0.000000000000000e+00, -1.072820587359515e+00, -4.528072598621575e-01, 0.000000000000000e+00, -1.117813894458584e+00, -1.731650704581932e-03, 0.000000000000000e+00, -1.020337528744132e-03, -8.703293611111862e-02, 0.000000000000000e+00, -2.416991699658095e-01, -7.823199207299885e-01, 0.000000000000000e+00, 6.380167445162795e-01, -7.823199207299875e-01, 0.000000000000000e+00, -1.039856079811287e+00, 1.216571598021769e+02, 0.000000000000000e+00, 1.113498483048950e+02, -4.425839942019335e+02, 0.000000000000000e+00, 1.054940429461904e+02, -9.874523771697783e+00, 0.000000000000000e+00, 5.235702471544508e+00, 2.146565631969077e+02, 0.000000000000000e+00, 2.215403188725106e+02, 1.397938428362359e+02, 0.000000000000000e+00, 4.554779492061400e+02, 1.397938428362359e+02, 0.000000000000000e+00, 4.554779492061398e+02, 9.263127859907279e-06, 0.000000000000000e+00, 9.271764784788599e-06, 9.217491975154763e-06, 0.000000000000000e+00, 9.227611824839249e-06, 9.259990548204662e-06, 0.000000000000000e+00, 9.269814131284327e-06, 9.220856617053608e-06, 0.000000000000000e+00, 9.229727583906244e-06, 3.103520906943906e-08, 0.000000000000000e+00, 9.249604076271656e-06, 9.240132337337496e-06, 0.000000000000000e+00, 1.835513543357057e-08, -3.750066400672247e-04, 0.000000000000000e+00, -3.788312700987692e-04, -4.026110267200478e-04, 0.000000000000000e+00, -4.059918216124694e-04, -3.525430861523416e-04, 0.000000000000000e+00, -3.621357799472709e-04, -3.740405694634219e-04, 0.000000000000000e+00, -3.849746840976206e-04, -4.105593700366676e-04, 0.000000000000000e+00, -3.826993400767805e-05, -4.105593700366676e-04, 0.000000000000000e+00, -3.958022769218619e-04, 3.655141596721507e-01, 0.000000000000000e+00, -3.299230970886316e-03, 5.196932706203786e-02, 0.000000000000000e+00, 5.005451455575882e-02, -1.372841077858342e-01, 0.000000000000000e+00, -3.138322849136227e-01, 8.229689429444729e-01, 0.000000000000000e+00, 2.252411110313284e-01, 1.264691559272980e-01, 0.000000000000000e+00, -4.039536999021510e-03, 1.264691559272977e-01, 0.000000000000000e+00, 2.893317135993184e-01, 7.700207914573961e-01, 0.000000000000000e+00, 7.454147920409130e-01, -3.131046674610983e-01, 0.000000000000000e+00, -3.370065048735887e-01, 1.035612134733199e+00, 0.000000000000000e+00, 9.091784937757701e-01, 1.318774651803364e-03, 0.000000000000000e+00, 1.318063164085012e-03, 3.587294767607535e-01, 0.000000000000000e+00, -6.669953892601904e-02, 3.587294767607548e-01, 0.000000000000000e+00, -6.669953892601939e-02, -1.711065763514962e+03, 0.000000000000000e+00, 2.425754780975156e+02, 2.200447886442132e+02, 0.000000000000000e+00, 1.988255078452787e+02, 1.169035968633002e+03, 0.000000000000000e+00, 1.137123426905414e+03, 2.533074734152523e+00, 0.000000000000000e+00, -3.870701565229240e+00, 3.989198697749742e+02, 0.000000000000000e+00, 5.106678060176276e+02, 3.989198697749744e+02, 0.000000000000000e+00, 5.106678060176266e+02, 4.125887653335882e-02, 0.000000000000000e+00, 4.050926779800212e-02, 4.694726175601151e-02, 0.000000000000000e+00, 4.600274602838116e-02, 6.882277778127598e-02, 0.000000000000000e+00, 6.667061373132710e-02, 6.080138443587253e-02, 0.000000000000000e+00, 4.233937889815760e-02, 6.465840373139145e-02, 0.000000000000000e+00, 6.276566827341648e-02, 6.465840373139145e-02, 0.000000000000000e+00, 4.311833893235816e-02, 4.665187419944783e-02, 0.000000000000000e+00, 4.588307098621653e-02, -7.102121889798143e-01, 0.000000000000000e+00, -3.118068108488177e-03, 2.613306569026546e-01, 0.000000000000000e+00, -1.769816833052905e-02, 9.833854435946024e-02, 0.000000000000000e+00, 9.627791774811220e-02, 1.469073066064624e-01, 0.000000000000000e+00, 1.422306842850439e-01, 1.469073066064625e-01, 0.000000000000000e+00, -4.613992165256218e-02, 5.461640451364759e-02, 0.000000000000000e+00, -2.462818347301097e-02, -3.438733056398711e-01, 0.000000000000000e+00, -3.438938463046078e-01, -1.041004651003120e-01, 0.000000000000000e+00, -3.255304931917263e-01, -4.015791318602129e-02, 0.000000000000000e+00, -3.582901743665557e-01, -3.509683648260457e-01, 0.000000000000000e+00, -3.560244690665082e-01, -3.509683648260458e-01, 0.000000000000000e+00, -6.892088440563382e-02, -2.527317329574426e-01, 0.000000000000000e+00, -2.893861520937335e-01, -1.052100329750249e+01, 0.000000000000000e+00, -1.027427091237740e+01, 3.364162763233642e+00, 0.000000000000000e+00, 3.267544538758846e+00, -7.544194950946967e-01, 0.000000000000000e+00, -1.480709910839960e+00, 1.817666175261261e+00, 0.000000000000000e+00, 1.685436967653464e+00, 1.817666175261263e+00, 0.000000000000000e+00, 1.685436967653465e+00, -1.620433938640962e+02, 0.000000000000000e+00, -1.498106721747143e+02, 1.719959908810901e+03, 0.000000000000000e+00, 1.709365929540252e+03, -7.076864390975024e+03, 0.000000000000000e+00, -6.439310871443519e+03, -3.127499406071195e+00, 0.000000000000000e+00, -3.198446076752810e+00, 7.827421671420047e+02, 0.000000000000000e+00, 5.951525641395313e+02, 7.827421671420055e+02, 0.000000000000000e+00, -2.717884703150068e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mvsbs_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvsbs", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([5.389908322996900e-03, 5.393416624695934e-03, 5.390404733932347e-03, 5.393776684824847e-03, 5.391796843425251e-03, 5.395826831157251e-03, 5.386230475377959e-03, -3.300670843556957e-03, 5.390227568086279e-03, -3.299975975251159e-03, -3.300186036523653e-03, -3.299975975251159e-03, 2.243618978967367e-02, -2.508306489232224e-03, 2.245891629490570e-02, 2.243272350204629e-02, 2.290899040302749e-02, 2.299098167385045e-02, 2.274160234487410e-02, 2.274189444426428e-02, 2.238927820362240e-02, 2.315559781469332e-02, -2.506433015621676e-03, 2.315559781469332e-02, -2.928809065811048e-03, -3.084939263858452e-03, -2.886256792991326e-03, 2.561558054666840e-02, 2.099314588013343e-02, 2.046539266213973e-02, 2.235780405579235e-02, -2.644141298987869e-03, -3.173373462858087e-03, -1.946326559424707e-03, 2.629734845851843e-02, 1.860585580636436e-02, -4.202926061869803e-03, 5.744771996331127e-02, -4.516185645173509e-03, 6.139860706208422e-02, 9.148238852663512e-03, -1.060128860228832e-03, 2.004821695310911e-02, 2.335859878697788e-02, 4.638841813153199e-02, 1.000608840218662e-02, 4.638841813153196e-02, -2.477210623297100e-04, 2.802349050731529e-04, 3.077775869449206e-04, -1.890922951179571e-07, 3.437890169749655e-04, -1.564432545111340e-05, 2.876459042412593e-03, 1.073666676672268e-04, 1.053618353166426e-04, 2.285884338075519e-04, 1.372181680356854e-04, 2.285884338075519e-04, 1.372181680356855e-04, -1.034635596234345e-02, -1.034856349792083e-02, -1.030128250283155e-02, -1.030498427193694e-02, -1.034321368596183e-02, -1.034660653377755e-02, -1.030456505920175e-02, -1.030704388790227e-02, -5.250781890381757e-05, -1.032669485304107e-02, -1.032367453143673e-02, -3.103345636733156e-05, 2.275740648040127e-02, 2.297973329462244e-02, 2.491200293828047e-02, 2.509636097256838e-02, 2.105383387523503e-02, 2.171653993198061e-02, 2.271270960390634e-02, 2.348036009251419e-02, 2.549366787487087e-02, -3.100724242060530e-03, 2.549366787487087e-02, 2.428728440378078e-02, -5.874324669977501e-01, 4.360069781208079e-02, -1.063484020683380e-01, -1.025714359607048e-01, 1.661966676369268e-01, 4.211125402507728e-01, -1.115501319241871e+00, -3.363044594059954e-01, -2.283402268851838e-01, 4.590089056715183e-02, -2.283402268851832e-01, -4.485705353094665e-01, 1.062651287873928e-02, 1.076130163939880e-02, -1.863032529268933e-03, 2.830662992293267e-02, 9.096042557812304e-03, 1.028264987030563e-02, -7.388481535081599e-02, -7.374516566213993e-02, 1.605540190864368e-02, 2.222496960603354e-02, 1.605540190864368e-02, 2.222496960603354e-02, -7.723114117793860e-09, 5.749107625079438e-05, 9.803773700578631e-05, 9.266669833945030e-05, 2.177968075646690e-04, 2.516398010905660e-04, 5.879374004223425e-03, -9.088047762855636e-05, 7.917323974182125e-05, 2.625723535234142e-04, 7.917323974182127e-05, 2.625723535234143e-04, -6.663326756208325e-02, -6.618629244121767e-02, -7.444912548874177e-02, -7.381175820300058e-02, -1.294968275936741e-01, -1.263816965171547e-01, -1.114914744566709e-01, -6.872652975025507e-02, -1.200880197423954e-01, -1.174970753775026e-01, -1.200880197423954e-01, -6.980833196049334e-02, -6.942919285655463e-02, -6.896681035387678e-02, 6.695835182470679e-01, -3.195777094657158e-02, -2.816537857543643e-01, 7.467153984263243e-02, -1.208930741218900e-01, -1.196134399727641e-01, -1.689944063931540e-01, -1.654415896349052e-01, -1.689944063931540e-01, 1.320788210776292e-01, -1.285655366722318e-01, 1.294457364155495e-01, 3.798535092002253e-02, 3.836215596117524e-02, -5.715168054497537e-03, 5.374282834190116e-02, -1.593667615747475e-02, 1.230047343141560e-01, 8.086029352522668e-02, 8.186413912468705e-02, 8.086029352522664e-02, -1.055674819693029e-02, 1.864617876183397e-01, 2.176066212632121e-01, -1.555868604158208e-05, -1.556355375960611e-05, 3.673083643960583e-03, 3.961076247208597e-03, 2.224772615312400e-01, 4.540142253709379e-01, 9.539489593071063e-03, 1.202827415905036e-02, 9.539489593071064e-03, 1.202827415905038e-02, -2.239342680227403e-07, -2.455998663201078e-07, 1.492027540504943e-05, 1.493028170727599e-05, -1.111248760979047e-08, -1.416467910734266e-08, -1.959430837645241e-04, -2.308862651786936e-04, 1.320299647567836e-04, 2.356241349383055e-04, 1.320299647567834e-04, -8.444431017450041e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
