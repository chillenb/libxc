
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mk00b_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mk00b", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.052726884168360e+01, -2.052746156061048e+01, -2.052844915553623e+01, -2.052530580388973e+01, -2.052736911985239e+01, -2.052736911985239e+01, -3.326167041558163e+00, -3.326635163552439e+00, -3.340816174476934e+00, -3.336064575228928e+00, -3.326301363471096e+00, -3.326301363471096e+00, -4.227801721618381e-01, -4.212498359545150e-01, -3.863605457120103e-01, -4.055617554355537e-01, -4.222258745247656e-01, -4.222258745247656e-01, -1.360157627361318e-01, -1.392585953740342e-01, -3.475827455772345e-01, -6.894724542892175e-02, -1.367430234407435e-01, -1.367430234407435e-01, -5.133673977106896e-02, -5.146485204636642e-02, -6.256573451551095e-02, -5.184169567673903e-02, -5.097479015867574e-02, -5.097479015867574e-02, 5.852837882259420e-01, 5.037122339976934e+00, -2.258149958353366e-01, 3.788404230388719e-01, -3.803769405011526e+00, 2.452738865570632e+01, -1.687290373898992e-01, 6.356855088229788e+00, -2.348302310742465e+00, -2.517418778773155e+00, -2.519790956945019e+00, -1.458243579778917e+00, 1.850849187904621e-02, 1.464973299986501e-01, 3.446918980059412e-02, -1.177928772875787e+00, -1.576608078478060e+00, -4.670539129824629e+01, -5.503420825240554e-02, -3.151099826560665e-02, -5.105573628666932e-02, -5.276472612440246e+00, -6.111233497077241e-02, -5.651951893693788e-02, -5.096206814397947e-02, -5.167240327171849e-02, -3.962012869215316e-02, -5.616738633638842e-02, -4.689247649575074e-02, -4.689370892868012e-02, -1.369571371445630e-03, -4.115571133426599e-03, -3.130475015068510e-03, -1.697922090991369e-03, -2.777211247581300e-03, -2.752626353830920e-03, -8.896056661356635e-04, -7.932674659055435e-01, 4.247060721809293e-02, -3.514315164504809e-01, 3.956861199593251e+00, 1.197222988627379e-02, 3.615101699353442e-02, -4.047305052990842e-02, -3.346314953134917e-02, -3.441415398795279e-02, 2.335953000415039e-01, -1.414488828991435e+00, -6.072174937765550e-01, -6.496909495147303e-02, -6.936068792136565e-02, -3.959871318401995e-01, -4.960593034629655e-02, -5.530235051545529e-02, -5.539657342967678e-02, -3.955654874888111e-02, -4.403951228700784e-02, -4.929305679717473e-02, -4.235109970926369e-02, -4.235074788811718e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mk00b_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mk00b", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-5.936043348693265e+01, -5.936105915903333e+01, -5.936415344100756e+01, -5.935394689923644e+01, -5.936076005214063e+01, -5.936076005214063e+01, -9.492031666068410e+00, -9.493507446521257e+00, -9.537991988471155e+00, -9.520287151280474e+00, -9.492469290353554e+00, -9.492469290353554e+00, -1.109723982472152e+00, -1.103685194146750e+00, -9.562075650291457e-01, -1.014967154483053e+00, -1.107541323480334e+00, -1.107541323480334e+00, -3.045117189839098e-01, -3.181699857423529e-01, -9.017892827908999e-01, -5.513673046857519e-02, -3.079493798344177e-01, -3.079493798344176e-01, -5.099484349298100e-03, -4.873622137511999e-03, 6.282772133003947e-03, -7.554979263238910e-03, -4.834912472879330e-03, -4.834912472879329e-03, 2.158786266581361e+00, 1.551144834647972e+01, -2.747950061002067e-01, 1.536952296412734e+00, -1.100984690053719e+01, 7.398362728161635e+01, 9.867848460835416e-02, 1.966806996880251e+01, -6.425311694602664e+00, -6.938520262609803e+00, -6.978332567380890e+00, -3.793690435882588e+00, 1.254229544968206e-01, 4.604739530157030e-01, 1.739462603104857e-01, -3.504601892572017e+00, -4.665939753423874e+00, -1.400522894127294e+02, 2.165097231198847e-02, 6.692516650795835e-02, 2.500660099197020e-02, -1.576513303319511e+01, -2.098540458989172e-02, -7.206956488388143e-03, -7.449569007228820e-03, -7.340929572514326e-03, -5.662969270439529e-03, 1.623059049239678e-02, -6.651144297344471e-03, -6.654841596132549e-03, 1.817517970075341e-03, 5.149750083182880e-03, 4.008591034695958e-03, 5.100938908906373e-03, 3.469822246604776e-03, 3.543576927855914e-03, 1.163085424647100e-03, -2.280506406642170e+00, 1.984200698691536e-01, -1.009505166159879e+00, 1.192836289311139e+01, 9.369598399046446e-02, 1.324105920936323e-01, 2.958984147704359e-02, 2.743388818073502e-02, -2.106590780980136e-02, 8.047455085420776e-01, -4.139506878556739e+00, -1.726054424490185e+00, 9.021345524299045e-03, -1.040915351654396e-02, -1.130639026614921e+00, 2.131883201030203e-02, 4.229571502825692e-03, -4.837378083366194e-03, -6.110422286620659e-03, -6.760103417660522e-03, 1.341366429742574e-02, -6.106113857956404e-03, -6.105058394516812e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mk00b_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mk00b", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.383647225991437e-09, -3.383622472140173e-09, -3.383476138337264e-09, -3.383882218052938e-09, -3.383634471757425e-09, -3.383634471757425e-09, -4.659769753836170e-06, -4.659816044029628e-06, -4.660320929586383e-06, -4.655502536072030e-06, -4.659714161996561e-06, -4.659714161996561e-06, -3.189736156959772e-03, -3.197120580518341e-03, -3.382682599536299e-03, -3.287674653362606e-03, -3.192454609880646e-03, -3.192454609880646e-03, -4.614960306217788e-01, -4.449373848334762e-01, -1.621791172111145e-03, -1.250468931106242e+00, -4.565489373354258e-01, -4.565489373354258e-01, -2.831965872007527e+03, -2.484746556776469e+03, -3.672948686785025e+01, -2.085915081326959e+04, -2.588212677222100e+03, -2.588212677222100e+03, -9.860864427318074e-07, -9.859731077880531e-07, -9.860711798674985e-07, -9.859831045814806e-07, -9.860333468540049e-07, -9.860333468540049e-07, -4.097860354149023e-05, -4.000556592974910e-05, -4.121109731175801e-05, -4.044440797371638e-05, -4.002435498394948e-05, -4.002435498394948e-05, -6.113539217504945e-03, -4.827936679097223e-03, -7.488158156736781e-03, -6.849459709347560e-03, -5.329618442093557e-03, -5.329618442093557e-03, -3.127629763609865e+00, -3.808700738097253e-01, -3.374000999622667e+00, -5.638656717540267e-05, -2.110379888772776e+00, -2.110379888772776e+00, -2.351362412210030e+04, -1.604985179001905e+04, -4.940938012911606e+04, -1.426476619167921e+01, -2.340504814980170e+04, -2.340504814980171e+04, -6.151673642542998e-03, -6.090355229413548e-03, -6.105734246926161e-03, -6.122037977955614e-03, -6.113353737951866e-03, -6.113353737951866e-03, -7.054713812560147e-03, -1.016237279372235e-02, -8.992320585656520e-03, -8.102018377233533e-03, -8.539013428080392e-03, -8.539013428080394e-03, -3.978764170212444e-03, -1.709120109714375e-01, -9.558555898698791e-02, -4.172601479146363e-02, -6.351295717897863e-02, -6.351295717897867e-02, -1.519759013950077e-02, -4.339568143224110e+01, -1.844340094939934e+01, -5.493039161552200e-02, -6.614558782715636e+00, -6.614558782715637e+00, -1.661199489289817e+03, -7.760595200497450e+05, -1.170880837446795e+05, -8.023579333903223e+00, -4.152851835650185e+04, -4.152851835650201e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mk00b_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mk00b", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([-1.097300403703526e-03, -1.097314843725162e-03, -1.097385249446670e-03, -1.097150319376260e-03, -1.097307937381721e-03, -1.097307937381721e-03, -6.548706744539433e-03, -6.550648535898053e-03, -6.608678177645264e-03, -6.584892799468679e-03, -6.549185208571557e-03, -6.549185208571557e-03, -1.330548278424180e-02, -1.321467566958147e-02, -1.108851957298896e-02, -1.212555438573200e-02, -1.327277730417183e-02, -1.327277730417183e-02, -5.284190724886742e-02, -5.488895871725565e-02, -5.150880564086881e-03, -8.962721991134428e-03, -5.324617009002295e-02, -5.324617009002293e-02, -5.769931808122068e-05, -6.237056717236403e-05, -7.221320141495577e-04, -1.151634602572566e-06, -6.518064886076886e-05, -6.518064886076867e-05, -8.797573533161371e-05, -4.993961205996661e-03, -3.214573054959010e-06, -4.259160361777587e-05, -2.608195171024284e-03, -1.149833981511495e-01, -1.253634070802534e-06, -1.483051890103479e-01, -1.738543292187890e-02, -1.986453136145266e-02, -1.970347183595383e-02, -6.030323844732827e-03, -1.702876063724991e-04, -2.447513052698776e-03, -4.234253504548054e-04, -1.935370459639881e-01, -2.978731780178421e-01, -2.663741461799218e+02, -8.167361261427329e-05, -5.458871362682244e-04, -3.458445041774302e-06, -1.050136137275285e-01, -4.898884306783470e-03, -2.503970617958703e-03, -1.443356258689692e-08, -2.921621240014883e-14, -1.303602459392867e-14, -2.829114030068399e-05, -3.198184687179397e-07, -4.248962131215473e-10, -5.600307330141201e-12, -4.407268768669406e-11, -1.221235008138445e-13, -5.752351232647354e-08, -7.270623374833874e-11, -3.389613897734798e-14, -2.306489418825970e-13, -1.244312225884311e-01, -6.548067780912780e-04, -1.908169011447493e-02, -2.747278088065393e+00, -1.159567257317460e-04, -1.616175229085033e-04, -4.094712747445086e-06, -1.507939511799748e-06, -1.262530591397633e-04, -6.031190701127407e-02, -1.727302677476740e+00, -9.774619677739028e-02, -6.206540932674457e-06, -1.218277014027001e-02, -1.072741757720987e-01, -6.959034026242814e-06, -1.999775179563757e-03, -5.447771854315975e-08, -1.131847151572361e-11, -2.127760124873672e-10, -4.372705903250847e-04, -5.457393326159273e-08, -4.017991290158687e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mk00b_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mk00b", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([8.778403229628211e-03, 8.778518749801295e-03, 8.779081995573359e-03, 8.777202555010079e-03, 8.778463499053767e-03, 8.778463499053767e-03, 5.238965395631547e-02, 5.240518828718442e-02, 5.286942542116211e-02, 5.267914239574943e-02, 5.239348166857245e-02, 5.239348166857245e-02, 1.064438622739344e-01, 1.057174053566518e-01, 8.870815658391169e-02, 9.700443508585599e-02, 1.061822184333747e-01, 1.061822184333747e-01, 4.227352579909394e-01, 4.391116697380452e-01, 4.120704451269504e-02, 7.170177592907542e-02, 4.259693607201836e-01, 4.259693607201834e-01, 4.615945446497655e-04, 4.989645373789123e-04, 5.777056113196462e-03, 9.213076820580524e-06, 5.214451908861509e-04, 5.214451908861494e-04, 7.038058826529097e-04, 3.995168964797328e-02, 2.571658443967208e-05, 3.407328289422070e-04, 2.086556136819427e-02, 9.198671852091960e-01, 1.002907256642027e-05, 1.186441512082784e+00, 1.390834633750312e-01, 1.589162508916213e-01, 1.576277746876306e-01, 4.824259075786261e-02, 1.362300850979993e-03, 1.958010442159021e-02, 3.387402803638443e-03, 1.548296367711905e+00, 2.382985424142737e+00, 2.130993169439374e+03, 6.533889009141863e-04, 4.367097090145795e-03, 2.766756033419442e-05, 8.401089098202282e-01, 3.919107445426776e-02, 2.003176494366962e-02, 1.154685006951754e-07, 2.337296992011906e-13, 1.042881967514294e-13, 2.263291224054719e-04, 2.558547749743518e-06, 3.399169704972379e-09, 4.480245864112960e-11, 3.525815014935525e-10, 9.769880065107561e-13, 4.601880986117883e-07, 5.816498699867099e-10, 2.711691118187838e-13, 1.845191535060776e-12, 9.954497807074485e-01, 5.238454224730224e-03, 1.526535209157994e-01, 2.197822470452315e+01, 9.276538058539677e-04, 1.292940183268026e-03, 3.275770197956069e-05, 1.206351609439798e-05, 1.010024473118107e-03, 4.824952560901926e-01, 1.381842141981392e+01, 7.819695742191223e-01, 4.965232746139566e-05, 9.746216112216008e-02, 8.581934061767893e-01, 5.567227220994251e-05, 1.599820143651005e-02, 4.358217483452780e-07, 9.054777212578885e-11, 1.702208099898937e-09, 3.498164722600678e-03, 4.365914660927418e-07, 3.214393032126950e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
