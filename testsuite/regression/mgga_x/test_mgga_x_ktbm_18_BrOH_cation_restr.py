
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_18_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_18", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.172444351797376e+01, -2.172457085930529e+01, -2.172512882208080e+01, -2.172323885456253e+01, -2.172423025037419e+01, -2.172423025037419e+01, -3.036300445680403e+00, -3.036435540546518e+00, -3.040057634848595e+00, -3.038867367471110e+00, -3.038679135067728e+00, -3.945111116381574e+00, -5.328728384712040e-01, -6.769030007814091e-01, -6.424745134893723e-01, -6.553474621777299e-01, -6.524591165823276e-01, -6.524591165823276e-01, -1.629229052629248e-01, -1.667180692909888e-01, -6.076845101503320e-01, -1.120876521836015e-01, -1.302038998303371e-01, -1.302038998303371e-01, -4.802448578191764e-03, -5.054897586578538e-03, -2.800677540881061e-02, -2.773200432985193e-03, -3.484896308477016e-03, -3.484896308477016e-03, -6.083909466645943e+00, -6.083862748327162e+00, -6.083898356795273e+00, -5.469466880982088e+00, -6.083891515895503e+00, -6.083891515895503e+00, -1.654127318204028e+00, -1.676504121153354e+00, -1.637521906595412e+00, -1.657141270609874e+00, -1.674767584171074e+00, -2.187488338120273e+00, -6.889886763549282e-01, -7.498407556118090e-01, -6.240484194416734e-01, -6.630383223774037e-01, -7.021215996150825e-01, -5.722449669381354e-01, -7.221016945665051e-02, -1.535068536404922e-01, -6.690317729005199e-02, -2.263294813197465e+00, -8.985881669526800e-02, -8.985881669526799e-02, -2.152829732085139e-03, -2.711034350197603e-03, -2.073051888842191e-03, -4.523810329073243e-02, -2.512575783829921e-03, -2.497365042811998e-03, -6.712049742550106e-01, -6.750657406669416e-01, -6.408802617555475e-01, -6.727474941320171e-01, -6.733280746116845e-01, -6.733280746116845e-01, -6.541312781815264e-01, -5.721515860618507e-01, -6.079339695714898e-01, -6.332975335189475e-01, -6.217091675862435e-01, -5.252857894410238e-01, -7.882145578427734e-01, -1.703522043021754e-01, -2.600659426122878e-01, -2.929405816542090e-01, -3.182394069919833e-01, -3.182394069919833e-01, -3.987727011938279e-01, -2.679677962152269e-02, -3.664653819536279e-02, -3.829292368085385e-01, -5.731952122438386e-02, -5.899080317629764e-02, -6.778199005032962e-03, -7.246454192056566e-04, -1.521099386023551e-03, -5.528516165150121e-02, -2.310847450953360e-03, -2.310847450953358e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_18_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_18", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.255514831778061e+01, -3.255524056121060e+01, -3.255567807314912e+01, -3.255430512947756e+01, -3.255502066931010e+01, -3.255502066931010e+01, -4.866344444655670e+00, -4.866610101822553e+00, -4.873678664424779e+00, -4.871267933891084e+00, -4.871020591221141e+00, -4.925685681156543e+00, -7.777890009365771e-01, -9.189451842476796e-01, -8.744576200264258e-01, -8.913771821637877e-01, -8.876512405078010e-01, -8.876512405078010e-01, -2.207395171836561e-01, -2.262279544039861e-01, -8.223092391122884e-01, -1.466498019748648e-01, -1.728058853938366e-01, -1.728058853938366e-01, -6.127013649661334e-03, -6.449128530049959e-03, -3.577040706997195e-02, -3.537964913341912e-03, -4.445973814471742e-03, -4.445973814471742e-03, -7.216679136995111e+00, -7.220662815951371e+00, -7.216897494338760e+00, -7.919261192829934e+00, -7.218676941649981e+00, -7.218676941649981e+00, -2.613539656417836e+00, -2.659000982216684e+00, -2.578730108648327e+00, -2.619509723896607e+00, -2.655704410617177e+00, -2.807138713948344e+00, -8.062869358527629e-01, -8.724287846993529e-01, -7.629363274435980e-01, -7.749728947902783e-01, -8.155932024564868e-01, -8.985072996760615e-01, -9.493012123921997e-02, -2.040223074480127e-01, -8.807195872266584e-02, -2.620802874281660e+00, -1.167564358388266e-01, -1.167564358388266e-01, -2.870391001647223e-03, -3.458650842623441e-03, -2.644753304667496e-03, -5.987900245277185e-02, -3.349947128914413e-03, -3.186076425496189e-03, -8.598512644609712e-01, -8.360262273270346e-01, -8.860319173053511e-01, -8.509039755290581e-01, -8.473938726216909e-01, -8.473938726216909e-01, -8.337891941856215e-01, -6.854096570291719e-01, -7.039088321249692e-01, -7.380317050180485e-01, -7.177077561703866e-01, -8.018755493632670e-01, -9.106424647466164e-01, -2.313083191296459e-01, -3.539342049068743e-01, -4.618966648205088e-01, -4.260311846353889e-01, -4.260311846353886e-01, -6.400643346834287e-01, -3.422182515748318e-02, -4.684083318030427e-02, -4.728491117042193e-01, -7.548442513038704e-02, -7.580707161652506e-02, -8.647842632423436e-03, -9.244696941564648e-04, -1.940560801005238e-03, -7.099533285465708e-02, -2.948123022778541e-03, -2.948123022778539e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_18_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_18", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.002266333046510e-08, -2.002263931478343e-08, -2.002238335479784e-08, -2.002275690905858e-08, -2.002258225292668e-08, -2.002258225292668e-08, -1.463490802433535e-05, -1.463862240324193e-05, -1.473562186102533e-05, -1.469107034400295e-05, -1.470195391133903e-05, -1.988220926797192e-05, -3.909927835015925e-03, -5.875934858858493e-03, -5.250753503839324e-03, -5.630162574859895e-03, -5.538893448998849e-03, -5.538893448998849e-03, -6.694743553425325e-01, -6.866454996522088e-01, -7.543366689815317e-04, -4.456791933470974e-01, -5.403521096700030e-01, -5.403521096700031e-01, -1.085222963606616e+02, -1.000636724971494e+02, -2.542736961414295e+00, -2.776642646899126e+02, -2.077452559871759e+02, -2.077452559871759e+02, -7.021320890970539e-06, -7.022053306881326e-06, -7.021404381657236e-06, -6.259252352052233e-06, -7.021673959787654e-06, -7.021673959787654e-06, -1.162039059997578e-04, -1.184692566498185e-04, -1.141548398658892e-04, -1.163391803292809e-04, -1.184707035596408e-04, -1.637092942200077e-04, -3.407652820121145e-02, -2.992299539728997e-02, -3.732101992002203e-02, -4.009733483255237e-02, -3.352227750526449e-02, -2.684392667276463e-02, 1.526922296110382e-01, -3.003813678518746e-01, 2.200804808366076e-01, -3.200787624105871e-04, -6.641495210257068e-01, -6.641495210257071e-01, 5.054645051911414e+02, -2.731274481817906e+02, -1.329500786675533e+03, 8.687766872450498e-01, 7.380702903529547e+02, -5.673780527531729e+02, -4.513006106334808e-02, -4.550280770400377e-02, -4.299637633387766e-02, -4.529717317345332e-02, -4.535376322332903e-02, -4.535376322332903e-02, -5.029062725421680e-02, -6.090450461727012e-02, -6.153995862672815e-02, -5.900193866167004e-02, -6.068778187580017e-02, -5.059094309205787e-02, -2.375946161656576e-02, -1.315843197468242e-01, -2.036160088146178e-01, -1.138890260865803e-01, -1.970649229961904e-01, -1.970649229961905e-01, -5.303360227994335e-02, -2.773663470419734e+00, -1.503941461077547e+00, -2.444125773257738e-01, 4.113311794434997e-01, -1.051672227122769e+00, -3.773644460007657e+01, -4.224565274172417e+03, -1.624650025732696e+03, -1.204248612486357e+00, -7.911424529767569e+02, -7.911424529767587e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_18_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_18", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.104475136543919e-03, 2.104483165333804e-03, 2.104511447438052e-03, 2.104393045141581e-03, 2.104456143180689e-03, 2.104456143180689e-03, 6.149496114521315e-03, 6.151723565586654e-03, 6.210408692394588e-03, 6.186114244871900e-03, 6.189361129248484e-03, 1.870845378379393e-02, 6.422545925399178e-03, 4.643944864159846e-02, 3.853354775965956e-02, 4.226306927644716e-02, 4.138594007658156e-02, 4.138594007658156e-02, 9.153019697699194e-02, 9.845201183358902e-02, 4.894391087970654e-04, 2.398468309539740e-02, 4.357281600296354e-02, 4.357281600296359e-02, 3.786734403545883e-04, 4.073043603193897e-04, 1.853317461021703e-03, 1.862131939743330e-04, 2.766483792535787e-04, 2.766483792535787e-04, 1.227050605253880e-02, 1.224603544901064e-02, 1.226911616143321e-02, 9.092467470461035e-03, 1.225824348144193e-02, 1.225824348144193e-02, 7.862891094881792e-03, 8.387307941687001e-03, 7.452832654436079e-03, 7.920561295617995e-03, 8.359517141114632e-03, 2.961388885617128e-02, 1.261395205534547e-01, 1.075371352332712e-01, 1.271708644902561e-01, 1.312126536241927e-01, 1.242124033956107e-01, 6.314257804964328e-02, -7.370553244844744e-04, 3.944507198466074e-02, -6.281574626445342e-04, 3.845775655778592e-02, 1.855173983452622e-02, 1.855173983452622e-02, -2.825113931893761e-08, 1.711134014499484e-04, 3.725860411895321e-04, -2.728235694781522e-04, -1.779957426518711e-07, 2.779566156743082e-04, 8.681701404859864e-02, 9.590490570741622e-02, 8.146855987393041e-02, 9.010604681305441e-02, 9.143585557717067e-02, 9.143585557717065e-02, 9.047446282787051e-02, 1.462115347346809e-01, 1.431610931769745e-01, 1.263737769108101e-01, 1.363933262739406e-01, 8.121864456305654e-02, 1.066408388553138e-01, 2.231553569563151e-03, 9.814804705959737e-02, 4.266210422048379e-02, 1.392927181324198e-01, 1.392927181324199e-01, 5.020900503971165e-02, 1.764330665252973e-03, 2.520818485259593e-03, 2.007281508298441e-01, -6.842990204830819e-04, 8.035187989380858e-03, 3.705839532716239e-04, 5.051288685952713e-05, 1.797322535029392e-04, 7.525275974343404e-03, 3.070694428219732e-04, 3.070694428219758e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
