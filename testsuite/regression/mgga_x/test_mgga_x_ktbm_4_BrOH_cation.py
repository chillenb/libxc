
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_4_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.116718858114145e+01, -2.116729394483854e+01, -2.116776194030697e+01, -2.194568151568773e+01, -2.194637660022919e+01, -2.272582901550840e+01, -3.356460250033814e+00, -3.626680457440150e+00, -3.627822158685170e+00, -3.627689862598418e+00, -3.627327600391482e+00, -3.357281431277906e+00, -5.541562228761902e-01, -6.158371234130955e-01, -6.551564926736495e-01, -6.013428144314429e-01, -5.414755290780230e-01, -6.626617086881228e-01, -1.579975913302448e-01, -1.608351152869789e-01, -7.001825498491705e-01, -1.279660622052456e-01, -1.645518231315801e-01, -1.628060339776406e-01, -5.804939769317541e-03, -5.776936774919179e-03, -3.177261047959722e-02, -3.346789790622728e-03, -4.671703031916836e-03, -4.671703031916836e-03, -5.546908241283507e+00, -5.548002529675140e+00, -5.546963393168691e+00, -5.547929330402066e+00, -5.413111134238235e+00, -5.413230228733059e+00, -2.024974534518204e+00, -2.043031184063977e+00, -2.011588606512649e+00, -2.027624601395530e+00, -1.878503770333882e+00, -2.041476582092370e+00, -5.863275130665396e-01, -6.783850506184130e-01, -5.691098878284567e-01, -5.968973234300678e-01, -6.014354191082946e-01, -6.320440647842382e-01, -8.817273333969886e-02, -1.557536621668415e-01, -8.162552416206909e-02, -2.034439426323465e+00, -1.041162516585751e-01, -1.041162516585750e-01, -2.431952453177835e-03, -3.271687537227587e-03, -2.505518070545166e-03, -5.098118999230342e-02, -3.147364305672917e-03, -3.147364305672917e-03, -6.279415136634708e-01, -6.246371043067622e-01, -6.121003746506900e-01, -6.210888214721986e-01, -6.137644914935272e-01, -6.200137922785245e-01, -6.109752195777729e-01, -4.847553629307486e-01, -5.199677310260683e-01, -5.733739543172601e-01, -5.598402049569414e-01, -5.372456517453604e-01, -6.835735301053671e-01, -2.173218438036564e-01, -2.407635861976049e-01, -3.302402984666709e-01, -3.087467878527383e-01, -2.814022636782700e-01, -4.735091935402666e-01, -2.804869305335847e-02, -4.398199015948014e-02, -3.504109027401450e-01, -6.990236933740132e-02, -6.990236933740135e-02, -7.139868255752789e-03, -8.744403671252798e-04, -1.604815301761213e-03, -5.641319833360510e-02, -2.890305763638627e-03, -2.611564841368229e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_4_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.071405088817767e+01, -3.071400172261389e+01, -3.071414870955599e+01, -3.071407278185409e+01, -3.071448176302160e+01, -3.071454435190263e+01, -3.071337639577516e+01, -2.883371808451140e+01, -3.071410817916764e+01, -2.883450283175415e+01, -2.883477655174881e+01, -2.883450283175415e+01, -4.408419481991593e+00, -4.731479550951043e+00, -4.408543466313792e+00, -4.408346454351821e+00, -4.410932052145347e+00, -4.411405546166902e+00, -4.410435738594606e+00, -4.410500521240536e+00, -4.407436750608096e+00, -4.412735066210405e+00, -4.730455739936191e+00, -4.412735066210405e+00, -7.890304038281267e-01, -7.965630595735789e-01, -7.865530073883350e-01, -7.953195642049564e-01, -7.637687337103495e-01, -7.569186336400683e-01, -7.699641256752799e-01, -7.671483463186748e-01, -8.055775256650286e-01, -7.176864515946189e-01, -8.037203085097682e-01, -7.330812844561999e-01, -1.857671750171971e-01, -2.019940719594489e-01, -1.888250660119191e-01, -2.066174028656843e-01, -8.630561454320388e-01, -8.767927068995348e-01, -1.423039642744589e-01, -1.446727529494665e-01, -2.006145646664282e-01, -1.028702812449680e-01, -2.006145646664282e-01, -1.036944355182031e-01, -6.303369573714315e-03, -6.698073667519286e-03, -6.842536513245567e-03, -7.075807423354575e-03, -3.788508130857014e-02, -3.878556644269052e-02, -3.789136266931034e-03, -3.725998187156377e-03, -5.623210634206181e-03, -3.199963694139225e-03, -5.623210634206181e-03, -3.199963694139225e-03, -7.127966774315290e+00, -7.126271012354341e+00, -7.131162761346324e+00, -7.129358767520519e+00, -7.128177887732517e+00, -7.126401304820430e+00, -7.130918957686099e+00, -7.129205136517665e+00, -7.472880361026331e+00, -7.127817683829238e+00, -7.129578450089815e+00, -7.471063048727891e+00, -2.437609523895071e+00, -2.438404850097875e+00, -2.464622939586582e+00, -2.464584538833574e+00, -2.414342346799683e+00, -2.421776218401853e+00, -2.437897152684853e+00, -2.445597994656092e+00, -2.470174013457922e+00, -2.599352969254469e+00, -2.470174013457922e+00, -2.454641731127344e+00, -7.698384542391734e-01, -8.343511598648460e-01, -8.617446941512651e-01, -8.635550696257068e-01, -6.775808279207274e-01, -7.125237612852372e-01, -7.250597875605211e-01, -7.555105210605625e-01, -8.090433103129078e-01, -8.273678117785498e-01, -8.090433103129080e-01, -7.624528581678051e-01, -9.824506987154125e-02, -9.918929182831424e-02, -1.852420001042513e-01, -1.923337679108245e-01, -8.881287768480099e-02, -9.362628261571405e-02, -2.541553067788628e+00, -2.540517780236648e+00, -1.127352564494064e-01, -1.198994372121452e-01, -1.127352564494064e-01, -1.198994372121455e-01, -2.945262351131552e-03, -2.954120263705764e-03, -3.645816858071024e-03, -3.700996505818005e-03, -2.726243308369455e-03, -2.887187490237843e-03, -6.113158219568268e-02, -6.287228318222281e-02, -2.784444237965084e-03, -3.823930467682851e-03, -2.784444237965084e-03, -3.823930467682853e-03, -8.262245379676809e-01, -8.296588584778276e-01, -8.134635315548252e-01, -8.169709724708050e-01, -8.363264564836185e-01, -8.394783061106668e-01, -8.369088700573085e-01, -8.250565005732050e-01, -8.366188222294253e-01, -8.397681868121117e-01, -8.366188222294253e-01, -8.232201052699526e-01, -8.029407085630729e-01, -8.058643913942751e-01, -6.353043745766643e-01, -6.930424825061787e-01, -6.807348885495010e-01, -7.402299853128773e-01, -7.285240929954750e-01, -7.313353110853476e-01, -7.039472757728746e-01, -7.069556826673103e-01, -7.039472757728747e-01, -7.586922948367767e-01, -8.947199682164045e-01, -9.615843989653133e-01, -2.473296198652433e-01, -2.489732107785076e-01, -3.010093547220805e-01, -3.093578328415405e-01, -4.543939531352294e-01, -4.335268052729208e-01, -3.658509694281916e-01, -3.659725394553873e-01, -3.658509694281915e-01, -3.747472851481410e-01, -5.737245858059280e-01, -5.796793104187247e-01, -3.717840412212257e-02, -3.743220900227302e-02, -4.848278661216390e-02, -5.010674061467393e-02, -4.210708911270010e-01, -4.333747781979663e-01, -7.595943152632513e-02, -8.025892540261131e-02, -7.595943152632510e-02, -8.025892540261134e-02, -9.340079880656908e-03, -9.678524999517910e-03, -9.808588367001482e-04, -9.831006566112120e-04, -2.067921127266181e-03, -2.199390718897825e-03, -7.382654023102062e-02, -7.491364515634699e-02, -2.637459613027054e-03, -3.504914754922620e-03, -2.637459613027047e-03, -3.631260755131121e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_4_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.819976761282962e-08, 0.000000000000000e+00, -1.820072104026579e-08, -1.819965860674200e-08, 0.000000000000000e+00, -1.820064165672733e-08, -1.819921612504084e-08, 0.000000000000000e+00, -1.820003362413327e-08, -1.820045784889911e-08, 0.000000000000000e+00, -2.124809645231307e-08, -1.819971059297498e-08, 0.000000000000000e+00, -2.124672771242551e-08, -2.124554420217715e-08, 0.000000000000000e+00, -2.124672771242551e-08, -2.395954580279746e-05, 0.000000000000000e+00, -1.685489624558687e-05, -2.396265753559869e-05, 0.000000000000000e+00, -2.396017819563497e-05, -2.402343537560275e-05, 0.000000000000000e+00, -2.403327477018631e-05, -2.399327590758613e-05, 0.000000000000000e+00, -2.399201816452885e-05, -2.396796872674396e-05, 0.000000000000000e+00, -2.404483162254577e-05, -1.686012139818840e-05, 0.000000000000000e+00, -2.404483162254577e-05, -6.038069704757522e-03, 0.000000000000000e+00, -6.144973137772638e-03, -6.016846811910930e-03, 0.000000000000000e+00, -1.056874834882617e-02, -1.022050881834269e-02, 0.000000000000000e+00, -1.028639598628438e-02, -1.050661221618932e-02, 0.000000000000000e+00, -6.003814594568553e-03, -6.087735304593447e-03, 0.000000000000000e+00, -5.595173258711348e-03, -1.042436701355819e-02, 0.000000000000000e+00, -1.045083740207710e-02, -7.500090157677161e-01, 0.000000000000000e+00, -1.563691839435144e+00, -7.573252949712498e-01, 0.000000000000000e+00, -1.550878508391107e+00, -3.243925003441353e-03, 0.000000000000000e+00, -1.754245868480248e-03, -1.646904668046629e+00, 0.000000000000000e+00, -1.805515101710632e+00, -1.303423095498101e+00, 0.000000000000000e+00, -2.452980506828289e+00, -1.303423095498101e+00, 0.000000000000000e+00, -7.024229463633387e-01, -1.014212978293656e+03, 0.000000000000000e+00, -9.001360378670429e+02, -2.020387346416312e+02, 0.000000000000000e+00, -8.251365143304874e+02, -4.819105312722250e+00, 0.000000000000000e+00, -1.963636211216106e+01, -2.399039517392482e+03, 0.000000000000000e+00, -2.493674875275939e+03, -1.241691631315856e+03, 0.000000000000000e+00, -5.013462159149338e+03, -1.241691631315856e+03, 0.000000000000000e+00, -5.013462159149339e+03, -6.099612907546531e-06, 0.000000000000000e+00, -6.105466624040796e-06, -6.095979888245553e-06, 0.000000000000000e+00, -6.101953754348073e-06, -6.099400534534698e-06, 0.000000000000000e+00, -6.105338386654346e-06, -6.096282877947793e-06, 0.000000000000000e+00, -6.102146739404156e-06, -5.459704351446174e-06, 0.000000000000000e+00, -6.103706314261744e-06, -6.097763739125233e-06, 0.000000000000000e+00, -5.464973204293753e-06, -2.145297399650736e-04, 0.000000000000000e+00, -2.150949627200791e-04, -2.132780437155350e-04, 0.000000000000000e+00, -2.138558805361477e-04, -2.151058221726476e-04, 0.000000000000000e+00, -2.155197868929392e-04, -2.142725584334214e-04, 0.000000000000000e+00, -2.145950838213227e-04, -2.132844439887345e-04, 0.000000000000000e+00, -1.445464003453917e-04, -2.132844439887345e-04, 0.000000000000000e+00, -2.144496562250483e-04, -3.442303796335083e-02, 0.000000000000000e+00, -2.730744693842427e-02, -2.688147117731799e-02, 0.000000000000000e+00, -2.688941815586693e-02, -4.416925222571927e-02, 0.000000000000000e+00, -4.113699897605923e-02, -4.274882098187698e-02, 0.000000000000000e+00, -3.865425975211546e-02, -3.043704966764655e-02, 0.000000000000000e+00, -2.853523647268197e-02, -3.043704966764656e-02, 0.000000000000000e+00, -3.638477306782958e-02, -2.984207986670152e+00, 0.000000000000000e+00, -2.926811705313298e+00, -3.941715236343541e-01, 0.000000000000000e+00, -9.139111722692238e-01, -3.599441095302931e+00, 0.000000000000000e+00, -3.377984210406292e+00, -3.118856268888318e-04, 0.000000000000000e+00, -3.124845102244207e-04, -2.771119188102543e+00, 0.000000000000000e+00, -3.068705267774515e+00, -2.771119188102543e+00, 0.000000000000000e+00, -3.068705267774517e+00, -7.788109847919928e+02, 0.000000000000000e+00, -3.228227985430648e+03, -2.523703952587331e+03, 0.000000000000000e+00, -2.299246470200557e+03, -1.211481012671092e+04, 0.000000000000000e+00, -1.131861994573181e+04, -8.212585835784841e+00, 0.000000000000000e+00, -2.160782951373863e+00, -5.039149512078767e+03, 0.000000000000000e+00, -4.765107294619586e+03, -5.039149512078766e+03, 0.000000000000000e+00, -4.765107294619584e+03, -3.732574619675077e-02, 0.000000000000000e+00, -3.674659253340603e-02, -3.837498160334452e-02, 0.000000000000000e+00, -3.777759651844801e-02, -3.609775900545925e-02, 0.000000000000000e+00, -3.557667870809658e-02, -3.612586801396577e-02, 0.000000000000000e+00, -3.713250351463904e-02, -3.611309255978877e-02, 0.000000000000000e+00, -3.558968316801380e-02, -3.611309255978877e-02, 0.000000000000000e+00, -3.728252741103568e-02, -4.165458001024792e-02, 0.000000000000000e+00, -4.109944699599276e-02, -6.661703055560884e-02, 0.000000000000000e+00, -4.923924792673230e-02, -6.044468773793511e-02, 0.000000000000000e+00, -4.799631686372369e-02, -5.316281805293589e-02, 0.000000000000000e+00, -5.244307521217909e-02, -5.696268816167516e-02, 0.000000000000000e+00, -5.618746315237302e-02, -5.696268816167516e-02, 0.000000000000000e+00, -4.692956673213326e-02, -2.197406690310776e-02, 0.000000000000000e+00, -1.854110478887977e-02, -5.693759679305421e-01, 0.000000000000000e+00, -5.633552783383772e-01, -2.181489998284172e-01, 0.000000000000000e+00, -3.915928552895618e-01, -1.434138784920168e-01, 0.000000000000000e+00, -2.110666315774605e-01, -3.070210330402421e-01, 0.000000000000000e+00, -3.090672196424372e-01, -3.070210330402424e-01, 0.000000000000000e+00, -1.911887878761100e-01, -8.500522057733532e-02, 0.000000000000000e+00, -8.430004156077453e-02, -5.130391428899758e+00, 0.000000000000000e+00, -5.011276657221788e+00, -1.173162097822002e+01, 0.000000000000000e+00, -1.122642771705374e+01, -2.841504796164358e-01, 0.000000000000000e+00, -2.884427077274818e-01, -6.142307008818564e+00, 0.000000000000000e+00, -6.270247759223803e+00, -6.142307008818567e+00, 0.000000000000000e+00, -6.270247759223809e+00, -7.404028509653830e+01, 0.000000000000000e+00, -6.847034958429533e+01, -3.736978438761163e+04, 0.000000000000000e+00, -3.711767808035145e+04, -3.221122466119506e+03, 0.000000000000000e+00, -2.931149400272554e+03, -1.938947288305403e+00, 0.000000000000000e+00, -2.032786104782220e+00, -9.024228364287821e+03, 0.000000000000000e+00, -5.774356202235199e+03, -9.024228364287836e+03, 0.000000000000000e+00, -1.238559582586959e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_4_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.460581508753898e-03, 1.460649277309103e-03, 1.460586462349415e-03, 1.460652859775195e-03, 1.460597747717026e-03, 1.460670281406082e-03, 1.460542547029641e-03, 1.769078602203877e-03, 1.460584943322149e-03, 1.769025916292247e-03, 1.769010936080707e-03, 1.769025916292247e-03, 9.582100286411172e-03, 4.634515471997874e-03, 9.583298974518631e-03, 9.582017489063474e-03, 9.606550286402995e-03, 9.610592040703164e-03, 9.597307567729431e-03, 9.597204913844522e-03, 9.580962747469430e-03, 9.617887139037848e-03, 4.632577706012542e-03, 9.617887139037848e-03, 4.935054534770863e-03, 5.364093062222809e-03, 4.816694857605205e-03, 3.004023090789417e-02, 2.655488476794397e-02, 2.612651903222179e-02, 2.771355471853834e-02, 4.126275984260972e-03, 5.622152386873822e-03, 2.216737063286513e-03, 3.042552529527920e-02, 2.448885335333154e-02, 1.525354625328621e-03, 7.803910310313199e-02, 2.191064644143036e-03, 8.204219213159333e-02, 1.306033012572875e-02, 6.400346535452992e-04, 3.065522566968287e-02, 3.528102607275451e-02, 6.507571199213570e-02, 1.714724203300839e-02, 6.507571199213570e-02, -6.903540490436143e-04, 1.603843271364378e-03, 1.707970869113251e-03, -6.756225794599506e-07, 1.845806751820020e-03, -5.414708213427682e-05, 7.260152783523352e-03, 8.240051086603026e-04, 8.144023943224449e-04, 1.394014920526285e-03, 1.037160398559462e-03, 1.394014920526285e-03, 1.037160398559460e-03, 7.064112674738804e-03, 7.065776125104999e-03, 7.058129610948488e-03, 7.059992762683929e-03, 7.063708064346355e-03, 7.065525159718864e-03, 7.058577332255842e-03, 7.060274292332102e-03, 6.267517346075055e-03, 7.062883966719239e-03, 7.061106932512681e-03, 6.269007036508555e-03, 1.537760324436993e-02, 1.541527270619830e-02, 1.562083775368242e-02, 1.564966972116042e-02, 1.513702877546405e-02, 1.524456080871374e-02, 1.536790165867640e-02, 1.547233607515215e-02, 1.568322014509103e-02, 6.327046403150622e-03, 1.568322014509103e-02, 1.556772492260248e-02, 6.388900299935790e-02, 4.335801080179803e-02, 5.915251357867091e-02, 5.897517947745244e-02, 6.345982523976997e-02, 6.502222080505522e-02, 6.722570187833612e-02, 6.601767699400463e-02, 6.225108154201570e-02, 4.422252586125892e-02, 6.225108154201570e-02, 6.490261462930599e-02, 1.817384231094468e-02, 1.834681198086589e-02, -1.372055134007125e-03, 4.153166608373988e-02, 1.615709963768638e-02, 1.779188390633409e-02, 1.980600162795550e-02, 1.981550174057158e-02, 2.561415369492229e-02, 3.416942538270775e-02, 2.561415369492230e-02, 3.416942538270767e-02, -2.763101775700484e-08, 5.254252621768046e-04, 7.721344119981626e-04, 7.358866908393052e-04, 1.549847676783583e-03, 1.719893385651405e-03, 1.194951709749990e-02, -2.917377757985686e-04, 6.868110239403917e-04, 1.682266062005054e-03, 6.868110239403906e-04, 1.682266062005051e-03, 5.725903072501086e-02, 5.696668694145535e-02, 5.989541138682278e-02, 5.957337452659707e-02, 5.639612910802821e-02, 5.616208443131263e-02, 5.616495617752924e-02, 5.793911047876781e-02, 5.628854434458900e-02, 5.605377084019186e-02, 5.628854434458900e-02, 5.831931998866779e-02, 5.918884354624857e-02, 5.890991114579766e-02, 7.380016418407562e-02, 4.411953302707668e-02, 7.389831809134591e-02, 5.362332025269029e-02, 6.989354604713013e-02, 6.960908796338118e-02, 7.240253824545098e-02, 7.211413585114439e-02, 7.240253824545104e-02, 5.673661817577482e-02, 5.699419253478142e-02, 4.566347728330749e-02, 5.322572945489006e-02, 5.364307661885794e-02, 7.916005812736071e-03, 6.729665402313739e-02, 3.302522115723582e-02, 8.550315201465736e-02, 8.067612643321219e-02, 8.115300441191567e-02, 8.067612643321220e-02, 2.148449209713521e-02, 7.444584210192430e-02, 7.518646033232995e-02, -5.387285610257032e-05, -5.388324557726551e-05, 8.485503691605095e-03, 8.967658107346239e-03, 9.949544114656497e-02, 1.045432165665474e-01, 1.723352379788493e-02, 2.080397592416319e-02, 1.723352379788487e-02, 2.080397592416319e-02, -7.997808806867328e-07, -8.770470766882607e-07, 2.226353898212907e-04, 2.226531499176408e-04, -3.975715247953426e-08, -5.067528952943932e-08, -5.854253094190863e-04, -6.768196205656340e-04, 1.045290804623050e-03, 1.569720421447102e-03, 1.045290804623048e-03, -3.019537986438092e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
