
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_4_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.261854139820084e+01, -2.261861364048739e+01, -2.261900616973247e+01, -2.261793357110344e+01, -2.261848539795141e+01, -2.261848539795141e+01, -3.300838382076100e+00, -3.300934382262247e+00, -3.303676362551967e+00, -3.304333843234767e+00, -3.303310219104886e+00, -3.303310219104886e+00, -5.899569535780580e-01, -5.893297170732099e-01, -5.755718096398286e-01, -5.850189813366666e-01, -5.846975063389133e-01, -5.846975063389133e-01, -1.696606072237617e-01, -1.720378499021703e-01, -6.541827601779995e-01, -1.223376421842230e-01, -1.596574530108913e-01, -1.596574530108913e-01, -5.794939741283771e-03, -6.093880419101031e-03, -3.299308541989624e-02, -3.273771062398199e-03, -4.622097888618338e-03, -4.622097888618337e-03, -5.545074809648430e+00, -5.546191568493333e+00, -5.545168154384896e+00, -5.546152264812685e+00, -5.545619578340254e+00, -5.545619578340254e+00, -1.975897249188086e+00, -2.000509343720298e+00, -1.968884571172373e+00, -1.991152620939372e+00, -1.993002758800824e+00, -1.993002758800824e+00, -5.921341347228689e-01, -6.477330917893382e-01, -5.264288948040825e-01, -5.456778823430788e-01, -6.056213153973055e-01, -6.056213153973055e-01, -8.520341224217698e-02, -1.671548893769444e-01, -7.879520972875928e-02, -1.870884674644680e+00, -1.015164238512347e-01, -1.015164238512347e-01, -2.419017449962179e-03, -3.129979778268894e-03, -2.443724687515554e-03, -5.295964247438253e-02, -3.079606993744390e-03, -3.079606993744390e-03, -6.242110634510279e-01, -6.209790593902980e-01, -6.221457535145064e-01, -6.230816031017485e-01, -6.226140031802525e-01, -6.226140031802525e-01, -6.038080012179210e-01, -5.140520784541562e-01, -5.412823110744154e-01, -5.670812566103280e-01, -5.537494344776714e-01, -5.537494344776714e-01, -6.703286270528785e-01, -2.146547107231201e-01, -2.575966647061269e-01, -3.371675273280466e-01, -2.967034550073901e-01, -2.967034550073900e-01, -4.557006799749608e-01, -3.186602832324677e-02, -4.283069447729112e-02, -3.307459620889500e-01, -6.795561870111695e-02, -6.795561870111697e-02, -7.813944319974746e-03, -7.895345966268342e-04, -1.816111542938575e-03, -6.435669806912497e-02, -2.829121319317156e-03, -2.829121319317152e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_4_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.898230770381267e+01, -2.898202127744148e+01, -2.898243684408058e+01, -2.898211510452331e+01, -2.898278498249295e+01, -2.898263219476044e+01, -2.898132575435023e+01, -2.898077239316806e+01, -2.898238704193638e+01, -2.898146816851630e+01, -2.898238704193638e+01, -2.898146816851630e+01, -4.649328428601577e+00, -4.649335713943853e+00, -4.649478206091433e+00, -4.649447051451783e+00, -4.652562933428896e+00, -4.653212908158563e+00, -4.650996083049959e+00, -4.651248087672103e+00, -4.648230492137127e+00, -4.654085383264576e+00, -4.648230492137127e+00, -4.654085383264576e+00, -8.022088995739333e-01, -8.088869094206549e-01, -7.999895642432170e-01, -8.078262641311912e-01, -7.703538750967998e-01, -7.631619884276010e-01, -7.790067153271785e-01, -7.830256504707833e-01, -8.171141834135816e-01, -7.389389190166076e-01, -8.171141834135816e-01, -7.389389190166076e-01, -1.926015454905942e-01, -2.023206896907367e-01, -1.956713735743519e-01, -2.070821129325551e-01, -8.473720573228372e-01, -8.905138466579783e-01, -1.433331570655071e-01, -1.453937151654910e-01, -2.013180948619397e-01, -1.044752979301142e-01, -2.013180948619397e-01, -1.044752979301142e-01, -6.310302901929943e-03, -6.701246111040014e-03, -6.617136959699504e-03, -7.083073663365207e-03, -3.706734881025306e-02, -3.909473984698143e-02, -3.826336224184480e-03, -3.757710280754850e-03, -5.641448629023707e-03, -3.252221145934234e-03, -5.641448629023710e-03, -3.252221145934234e-03, -7.130628932602488e+00, -7.128780180813858e+00, -7.133792991974757e+00, -7.131837223595434e+00, -7.130777372833803e+00, -7.128865531349193e+00, -7.133493421023311e+00, -7.131643763349641e+00, -7.132270324906121e+00, -7.130319096459026e+00, -7.132270324906121e+00, -7.130319096459026e+00, -2.473038310817972e+00, -2.472972415179799e+00, -2.496960950413853e+00, -2.496124238235146e+00, -2.443414531317856e+00, -2.451915379267768e+00, -2.463986008866430e+00, -2.472599201264981e+00, -2.508671435240731e+00, -2.488291360681457e+00, -2.508671435240731e+00, -2.488291360681457e+00, -8.016990696968819e-01, -7.995289811813333e-01, -9.015275625388289e-01, -9.019590218306164e-01, -7.138512596636220e-01, -7.493436977902053e-01, -7.785944546435816e-01, -8.073324938758020e-01, -8.376629359176805e-01, -7.957856290337609e-01, -8.376629359176806e-01, -7.957856290337608e-01, -9.910125900299752e-02, -1.001075507854255e-01, -1.917584705367283e-01, -1.927753788345642e-01, -8.976150245019619e-02, -9.446998083239039e-02, -2.721245307319199e+00, -2.720103190798954e+00, -1.134070302450232e-01, -1.204058949860292e-01, -1.134070302450231e-01, -1.204058949860294e-01, -2.914186461289074e-03, -3.025651571897672e-03, -3.707532008256121e-03, -3.767858394571817e-03, -2.753732283807064e-03, -2.917576429655600e-03, -6.192746615191036e-02, -6.205492413636803e-02, -2.865996571229532e-03, -3.832944402537553e-03, -2.865996571229533e-03, -3.832944402537554e-03, -8.313552305583708e-01, -8.346657366300049e-01, -8.185917538451535e-01, -8.219810033239070e-01, -8.230271798014575e-01, -8.264167807608266e-01, -8.267643680733248e-01, -8.300777801580568e-01, -8.248930533648691e-01, -8.282429688761863e-01, -8.248930533648691e-01, -8.282429688761863e-01, -8.127411403941154e-01, -8.153540498080661e-01, -6.395011590529746e-01, -6.428318067238525e-01, -6.873285837143512e-01, -6.909802104824895e-01, -7.371405535780214e-01, -7.399264188348765e-01, -7.121483506204193e-01, -7.149085298758885e-01, -7.121483506204193e-01, -7.149085298758887e-01, -9.447451150450162e-01, -9.465373523644680e-01, -2.477829988761464e-01, -2.494481087852095e-01, -3.071203949151721e-01, -3.112793358183805e-01, -4.448615857249594e-01, -4.476520173295697e-01, -3.713356554975051e-01, -3.715358554622920e-01, -3.713356554975047e-01, -3.715358554622917e-01, -5.896627444059185e-01, -5.950169243496201e-01, -3.618899137034233e-02, -3.646729642176175e-02, -4.897009009256706e-02, -5.059088533207163e-02, -4.389366651466410e-01, -4.489135425452341e-01, -7.661147293525755e-02, -8.088238868740845e-02, -7.661147293525757e-02, -8.088238868740850e-02, -9.175783907551020e-03, -9.516277936670755e-03, -1.012843916208471e-03, -1.017754822419207e-03, -2.006224415791908e-03, -2.134188549452940e-03, -7.331891251899775e-02, -7.425855372970989e-02, -2.707574895786421e-03, -3.513379688180379e-03, -2.707574895786415e-03, -3.513379688180375e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_4_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.104007133066105e-08, 0.000000000000000e+00, -2.104125520188793e-08, -2.103985593989622e-08, 0.000000000000000e+00, -2.104109853773980e-08, -2.103919069870147e-08, 0.000000000000000e+00, -2.104013831087145e-08, -2.104163307230974e-08, 0.000000000000000e+00, -2.104324924041350e-08, -2.103994577245945e-08, 0.000000000000000e+00, -2.104202245193365e-08, -2.103994577245945e-08, 0.000000000000000e+00, -2.104202245193365e-08, -1.980956393463202e-05, 0.000000000000000e+00, -1.980295766869013e-05, -1.981334839594833e-05, 0.000000000000000e+00, -1.980505952193441e-05, -1.988221154408387e-05, 0.000000000000000e+00, -1.989245463562129e-05, -1.987070391790038e-05, 0.000000000000000e+00, -1.986529288387085e-05, -1.981428689132592e-05, 0.000000000000000e+00, -1.992611464109474e-05, -1.981428689132592e-05, 0.000000000000000e+00, -1.992611464109474e-05, -7.509264843838787e-03, 0.000000000000000e+00, -7.573851325283747e-03, -7.506715510838560e-03, 0.000000000000000e+00, -7.564171522912909e-03, -7.366448348626115e-03, 0.000000000000000e+00, -7.494776932694026e-03, -7.783542990541704e-03, 0.000000000000000e+00, -7.877460860758335e-03, -7.393996926443115e-03, 0.000000000000000e+00, -8.146762350774880e-03, -7.393996926443115e-03, 0.000000000000000e+00, -8.146762350774880e-03, -1.453614460466802e+00, 0.000000000000000e+00, -1.532889217994346e+00, -1.433753140892932e+00, 0.000000000000000e+00, -1.511608009453937e+00, -1.820811839869112e-03, 0.000000000000000e+00, -2.044857501380589e-03, -1.369214073305369e+00, 0.000000000000000e+00, -1.616462837964252e+00, -1.221385165061120e+00, 0.000000000000000e+00, -1.815079457938344e+00, -1.221385165061120e+00, 0.000000000000000e+00, -1.815079457938344e+00, -1.004122543159789e+03, 0.000000000000000e+00, -8.962961239535554e+02, -9.251926436201456e+02, 0.000000000000000e+00, -8.174730842608318e+02, -1.934495096954140e+01, 0.000000000000000e+00, -1.807527631308972e+01, -2.171149263714540e+03, 0.000000000000000e+00, -2.290608542968826e+03, -1.204704686153646e+03, 0.000000000000000e+00, -4.170071643663494e+03, -1.204704686153644e+03, 0.000000000000000e+00, -4.170071643663491e+03, -6.095204115542812e-06, 0.000000000000000e+00, -6.101306370687343e-06, -6.091624616884455e-06, 0.000000000000000e+00, -6.097845010062471e-06, -6.095095616539732e-06, 0.000000000000000e+00, -6.101252699020769e-06, -6.092019938889939e-06, 0.000000000000000e+00, -6.098104020405627e-06, -6.093306039657742e-06, 0.000000000000000e+00, -6.099559215360795e-06, -6.093306039657742e-06, 0.000000000000000e+00, -6.099559215360795e-06, -2.045002061088291e-04, 0.000000000000000e+00, -2.053527900813231e-04, -2.047523417496843e-04, 0.000000000000000e+00, -2.055567477037344e-04, -2.064972467076727e-04, 0.000000000000000e+00, -2.067469524284102e-04, -2.070259432201946e-04, 0.000000000000000e+00, -2.072242590296422e-04, -2.031566502391591e-04, 0.000000000000000e+00, -2.053497808837086e-04, -2.031566502391591e-04, 0.000000000000000e+00, -2.053497808837086e-04, -3.134590115661293e-02, 0.000000000000000e+00, -3.193907778245574e-02, -2.429930993390610e-02, 0.000000000000000e+00, -2.440472422309198e-02, -3.706192671345306e-02, 0.000000000000000e+00, -3.579302617684044e-02, -3.492681478231752e-02, 0.000000000000000e+00, -3.255256070581529e-02, -2.823899061387504e-02, 0.000000000000000e+00, -3.296371057763561e-02, -2.823899061387505e-02, 0.000000000000000e+00, -3.296371057763560e-02, -2.640619718404368e+00, 0.000000000000000e+00, -2.561617056544660e+00, -8.859707411840114e-01, 0.000000000000000e+00, -8.710535300855115e-01, -3.105710890078467e+00, 0.000000000000000e+00, -2.982610828035057e+00, -2.616641967411484e-04, 0.000000000000000e+00, -2.621857771784463e-04, -2.523000880908620e+00, 0.000000000000000e+00, -2.848571305624591e+00, -2.523000880908620e+00, 0.000000000000000e+00, -2.848571305624593e+00, -2.578322392406028e+03, 0.000000000000000e+00, -2.340096251594843e+03, -2.080846164624656e+03, 0.000000000000000e+00, -1.863185042874289e+03, -1.092988905935549e+04, 0.000000000000000e+00, -1.015832464004381e+04, -6.980581253249537e+00, 0.000000000000000e+00, -7.808773840131535e+00, -3.206699764305933e+03, 0.000000000000000e+00, -4.662637402064874e+03, -3.206699764305937e+03, 0.000000000000000e+00, -4.662637402064872e+03, -3.680412414193836e-02, 0.000000000000000e+00, -3.624667631667389e-02, -3.786491395285795e-02, 0.000000000000000e+00, -3.728816289540617e-02, -3.750862672905554e-02, 0.000000000000000e+00, -3.693592250122107e-02, -3.719881381462361e-02, 0.000000000000000e+00, -3.663571780205808e-02, -3.735504656762752e-02, 0.000000000000000e+00, -3.678721113397118e-02, -3.735504656762752e-02, 0.000000000000000e+00, -3.678721113397118e-02, -4.050401421578252e-02, 0.000000000000000e+00, -4.000274432212390e-02, -6.567411384604657e-02, 0.000000000000000e+00, -6.482919807892620e-02, -5.931388469554284e-02, 0.000000000000000e+00, -5.845510638989457e-02, -5.195165142825841e-02, 0.000000000000000e+00, -5.125582315805224e-02, -5.569704919074598e-02, 0.000000000000000e+00, -5.498312449933567e-02, -5.569704919074598e-02, 0.000000000000000e+00, -5.498312449933567e-02, -1.936613748442326e-02, 0.000000000000000e+00, -1.949683782826422e-02, -5.532936760837059e-01, 0.000000000000000e+00, -5.469791993945606e-01, -3.728574509855713e-01, 0.000000000000000e+00, -3.697094003657623e-01, -1.899291356977378e-01, 0.000000000000000e+00, -1.857278268496152e-01, -2.834139805473646e-01, 0.000000000000000e+00, -2.852248199294636e-01, -2.834139805473648e-01, 0.000000000000000e+00, -2.852248199294637e-01, -7.867066909865361e-02, 0.000000000000000e+00, -7.856594848576824e-02, -2.182048176569923e+01, 0.000000000000000e+00, -2.112264223455618e+01, -1.050290268677827e+01, 0.000000000000000e+00, -1.009328530991366e+01, -2.481289888226854e-01, 0.000000000000000e+00, -2.628639261100561e-01, -5.507980368671975e+00, 0.000000000000000e+00, -5.653526941918414e+00, -5.507980368671975e+00, 0.000000000000000e+00, -5.653526941918416e+00, -2.807709604944397e+02, 0.000000000000000e+00, -2.561878005195542e+02, -2.096265001946552e+04, 0.000000000000000e+00, -1.763926930152769e+04, -1.430137494328491e+04, 0.000000000000000e+00, -1.298770813899464e+04, -6.560606469127441e+00, 0.000000000000000e+00, -7.094736792716627e+00, -6.192591439621286e+03, 0.000000000000000e+00, -5.647095406174692e+03, -6.192591439621297e+03, 0.000000000000000e+00, -5.647095406174705e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_4_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_4_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.746837349635333e-03, 1.746900273973753e-03, 1.746829725821078e-03, 1.746894726116420e-03, 1.746815563457345e-03, 1.746871539916155e-03, 1.746901991450869e-03, 1.746981684587948e-03, 1.746832519513662e-03, 1.746945146082737e-03, 1.746832519513662e-03, 1.746945146082737e-03, 6.520596156788823e-03, 6.516049644557697e-03, 6.522575593079907e-03, 6.517050984317641e-03, 6.557645150001404e-03, 6.563006892814841e-03, 6.558148853044644e-03, 6.555102862563120e-03, 6.517542993392880e-03, 6.586774889420227e-03, 6.517542993392880e-03, 6.586774889420227e-03, 1.173674220039470e-02, 1.206387042752481e-02, 1.166979191924526e-02, 1.200317417781534e-02, 1.056044875552496e-02, 1.073936517012577e-02, 1.214395289079650e-02, 1.247173786884368e-02, 1.186655258927505e-02, 1.239554889259217e-02, 1.186655258927505e-02, 1.239554889259217e-02, 5.852786628334230e-02, 7.426792519505690e-02, 5.926985630458424e-02, 7.697724147995935e-02, 1.585744254035570e-03, 2.479002333790152e-03, 1.905316999233811e-02, 2.665900995504696e-02, 5.512992551244970e-02, 8.054321870491311e-03, 5.512992551244959e-02, 8.054321870491325e-03, 1.568682303741654e-03, 1.691871493975039e-03, 1.649748702771510e-03, 1.808015784677212e-03, 5.366944692216250e-03, 6.018573516531408e-03, 6.587092310424980e-04, 6.733741665960071e-04, 1.303393440029646e-03, 6.828788129812603e-04, 1.303393440029647e-03, 6.828788129812591e-04, 7.058326677275062e-03, 7.060320244005558e-03, 7.052431257467895e-03, 7.054620291872352e-03, 7.058059573287593e-03, 7.060167765170273e-03, 7.052998528445076e-03, 7.054987406618864e-03, 7.055265698761385e-03, 7.057453350816497e-03, 7.055265698761385e-03, 7.057453350816497e-03, 1.388727302028894e-02, 1.396899112173051e-02, 1.433957566544188e-02, 1.440414956351046e-02, 1.386427259818505e-02, 1.394674664980687e-02, 1.428534824025592e-02, 1.437064600589169e-02, 1.416393166999177e-02, 1.420850175075185e-02, 1.416393166999177e-02, 1.420850175075185e-02, 5.481324471752447e-02, 5.549654053572277e-02, 5.219197491216328e-02, 5.239332588709014e-02, 4.477436733274289e-02, 5.045036958334612e-02, 4.808668667636252e-02, 5.056150484750461e-02, 5.557739481897652e-02, 5.537165125111760e-02, 5.557739481897657e-02, 5.537165125111757e-02, 1.355501390135411e-02, 1.331422045528692e-02, 3.699744886346713e-02, 3.678640397478191e-02, 1.136162174091124e-02, 1.321265822197151e-02, 1.524650216587412e-02, 1.525690837606014e-02, 2.037338251013906e-02, 2.842229431164543e-02, 2.037338251013906e-02, 2.842229431164546e-02, 2.376837311959453e-04, 2.496793542887406e-04, 4.981229665722051e-04, 4.558846764746668e-04, 1.230185440905864e-03, 1.348993313657676e-03, 8.174960066003899e-03, 1.012524844557703e-02, 2.366450074595055e-04, 1.603003795367792e-03, 2.366450074595052e-04, 1.603003795367784e-03, 5.660816125946039e-02, 5.633899560948927e-02, 5.915046316182438e-02, 5.885489557074847e-02, 5.829691160428357e-02, 5.800371993424282e-02, 5.755129336677409e-02, 5.727710625363912e-02, 5.792766928578893e-02, 5.764401775294781e-02, 5.792766928578893e-02, 5.764401775294781e-02, 5.784145481996329e-02, 5.762024586270072e-02, 7.194377194236612e-02, 7.188049134829372e-02, 7.178991537111690e-02, 7.156937536929478e-02, 6.791174041940577e-02, 6.765407134424693e-02, 7.016811295472122e-02, 6.997660396477565e-02, 7.016811295472122e-02, 6.997660396477563e-02, 4.808257819716086e-02, 4.860292214522361e-02, 4.952585448987304e-02, 4.980798710224629e-02, 5.692367625766499e-02, 5.838551619865041e-02, 6.521559473664555e-02, 6.469133616309378e-02, 6.690881533844077e-02, 6.728108014045624e-02, 6.690881533844080e-02, 6.728108014045606e-02, 6.388600992523766e-02, 6.558098952982272e-02, 6.154443142515582e-03, 6.013375539196615e-03, 6.589511656776281e-03, 7.030303655436275e-03, 7.564061248289471e-02, 8.787076643817644e-02, 1.332813871975058e-02, 1.626156130466700e-02, 1.332813871975050e-02, 1.626156130466698e-02, 1.001012598693090e-03, 9.984524423036385e-04, 5.543183635502879e-05, 3.520824539592058e-05, 6.752425744701368e-04, 7.359840561753256e-04, 1.429495056096114e-02, 1.737031560168304e-02, 4.345324974022142e-04, 1.493944038126109e-03, 4.345324974022138e-04, 1.493944038126106e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
