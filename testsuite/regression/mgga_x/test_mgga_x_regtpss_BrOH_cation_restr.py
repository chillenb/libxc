
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_regtpss_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_regtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.265858997183524e+01, -2.265865917397607e+01, -2.265904929835113e+01, -2.265802203113401e+01, -2.265854850561224e+01, -2.265854850561224e+01, -3.398028815598775e+00, -3.398043259158573e+00, -3.398660479937309e+00, -3.400386967355821e+00, -3.399146539858668e+00, -3.399146539858668e+00, -6.547242878686427e-01, -6.543881700158900e-01, -6.482154529206272e-01, -6.547633632324119e-01, -6.526673219307498e-01, -6.526673219307498e-01, -1.967431593767021e-01, -1.980009128171852e-01, -7.525807173143574e-01, -1.670769250546062e-01, -1.772450604671860e-01, -1.772450604671860e-01, -1.008393578702906e-02, -1.061234309354621e-02, -5.716346742797559e-02, -5.827612263113681e-03, -7.321093888746766e-03, -7.321093888746766e-03, -5.554428780835366e+00, -5.555529828675513e+00, -5.554530884986392e+00, -5.555500863333630e+00, -5.554960546733809e+00, -5.554960546733809e+00, -2.063222441750181e+00, -2.080781842961833e+00, -2.058419530855203e+00, -2.073929475096273e+00, -2.075277312293391e+00, -2.075277312293391e+00, -5.929888398084359e-01, -6.230619372398177e-01, -5.354011432134648e-01, -5.347633192590735e-01, -6.028727598076719e-01, -6.028727598076719e-01, -1.323886650043135e-01, -2.108182470834681e-01, -1.242870580354794e-01, -1.813731547129484e+00, -1.445344456483157e-01, -1.445344456483157e-01, -4.496826322446205e-03, -5.696942455028839e-03, -4.355513173398902e-03, -8.862713119968796e-02, -5.247067323263532e-03, -5.247067323263532e-03, -6.198977452353104e-01, -6.187525767833991e-01, -6.193081724350347e-01, -6.196413411826681e-01, -6.194848202680637e-01, -6.194848202680637e-01, -5.938549209741331e-01, -5.213516134724594e-01, -5.444028310982898e-01, -5.664089548287519e-01, -5.550095056331621e-01, -5.550095056331621e-01, -6.446951603181390e-01, -2.515900399004150e-01, -2.873441586930419e-01, -3.552057626832698e-01, -3.191521991419188e-01, -3.191521991419188e-01, -4.695621999520039e-01, -5.488504291973674e-02, -7.342901896014981e-02, -3.397462731479335e-01, -1.073309390467866e-01, -1.073309390467866e-01, -1.422073630923048e-02, -1.523235854140461e-03, -3.197007952057089e-03, -1.021828353572977e-01, -4.855262881361226e-03, -4.855262881361222e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_regtpss_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_regtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.857186807875631e+01, -2.857197560379628e+01, -2.857257426784929e+01, -2.857097986875871e+01, -2.857179800824007e+01, -2.857179800824007e+01, -4.216226397497016e+00, -4.216268946478406e+00, -4.217428789973479e+00, -4.216932913718061e+00, -4.216716819363706e+00, -4.216716819363706e+00, -7.964694178579989e-01, -7.949563206101755e-01, -7.561946295432415e-01, -7.641992933853113e-01, -7.630677767660052e-01, -7.630677767660052e-01, -1.919096156828851e-01, -1.957783454220274e-01, -9.413740282830436e-01, -1.484851033399864e-01, -1.591015186788279e-01, -1.591015186788279e-01, -1.341939823991975e-02, -1.411881760462426e-02, -7.251302247408739e-02, -7.765396905421485e-03, -9.750834312730447e-03, -9.750834312730447e-03, -7.063700766484367e+00, -7.066204780963339e+00, -7.063897961423488e+00, -7.066104686524738e+00, -7.064926822571418e+00, -7.064926822571418e+00, -2.445474143481149e+00, -2.478381094221017e+00, -2.432462509034828e+00, -2.462412037565442e+00, -2.469608229983391e+00, -2.469608229983391e+00, -7.344312509320913e-01, -8.512383528889459e-01, -6.613159166335307e-01, -7.072607764200667e-01, -7.515301040864485e-01, -7.515301040864485e-01, -1.352398461702766e-01, -1.898531809484521e-01, -1.300311214730431e-01, -2.438527192057897e+00, -1.342621495376033e-01, -1.342621495376033e-01, -5.993262054573546e-03, -7.591106235920902e-03, -5.801955489565132e-03, -1.029597234494227e-01, -6.989654779870130e-03, -6.989654779870130e-03, -8.255982324285631e-01, -8.038563992964216e-01, -8.103126184855965e-01, -8.165220239838761e-01, -8.133021640181609e-01, -8.133021640181609e-01, -8.129978047466475e-01, -6.435528115769166e-01, -6.790173227580535e-01, -7.154572715398398e-01, -6.954022529966390e-01, -6.954022529966390e-01, -8.758248035040426e-01, -2.416416105929137e-01, -3.029410400015646e-01, -4.208991647091738e-01, -3.635628188098391e-01, -3.635628188098391e-01, -5.658706286014051e-01, -7.005726286272773e-02, -9.031440141515643e-02, -4.108315422723975e-01, -1.138955360715985e-01, -1.138955360715985e-01, -1.889584641347185e-02, -2.030777218665803e-03, -4.261365532966636e-03, -1.110623029875292e-01, -6.467953968523785e-03, -6.467953968523779e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_regtpss_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_regtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.237552272056827e-08, -1.237558577987724e-08, -1.237487686252617e-08, -1.237392464040162e-08, -1.237456481188586e-08, -1.237456481188586e-08, -1.122774119086576e-05, -1.123089147439652e-05, -1.131778817342619e-05, -1.131763310348687e-05, -1.130598629177454e-05, -1.130598629177454e-05, -4.016468764415521e-03, -4.039170483709202e-03, -4.580817170777233e-03, -4.657543668443362e-03, -4.617676120943669e-03, -4.617676120943669e-03, -6.130973145538775e-01, -6.024914897304917e-01, -1.301274306693387e-03, -1.043777909660914e+00, -9.022230605409249e-01, -9.022230605409246e-01, -3.819684990583796e+00, -4.035102832751404e+00, -2.221834479546415e+00, -3.472269550710999e+00, -4.410864221730601e+00, -4.410864221730608e+00, -3.850832499077573e-06, -3.863258116597857e-06, -3.850632694912422e-06, -3.861627515691770e-06, -3.857525019977341e-06, -3.857525019977341e-06, -7.261370224972548e-05, -7.093137966458805e-05, -7.014677454959662e-05, -6.851886558228628e-05, -7.299562613584173e-05, -7.299562613584173e-05, -2.421665185667215e-02, -2.492483445798243e-02, -2.296817880274169e-02, -1.727112580621619e-02, -2.497481178122216e-02, -2.497481178122216e-02, -1.398967686856897e+00, -4.438511926381777e-01, -1.563072246319827e+00, -1.381671236775976e-04, -1.545863400650268e+00, -1.545863400650268e+00, -4.575405384035033e+00, -4.086562800275944e+00, -2.566204907358649e+01, -2.421587739591804e+00, -1.194205937732892e+01, -1.194205937732890e+01, -5.032771804194573e-02, -4.119557902496705e-02, -4.438687055309734e-02, -4.725035143398828e-02, -4.581012427609771e-02, -4.581012427609768e-02, -5.136636637504218e-02, -2.341691567210686e-02, -2.903778386199082e-02, -3.942125000581716e-02, -3.383340913106984e-02, -3.383340913106985e-02, -1.664237157091009e-02, -2.273215337519485e-01, -1.416694370423668e-01, -9.294128591154063e-02, -1.097123073494886e-01, -1.097123073494886e-01, -3.742381216692729e-02, -2.030863152394234e+00, -1.997283939980313e+00, -1.478707553740927e-01, -2.564030268503988e+00, -2.564030268503989e+00, -3.077021918370100e+00, -2.005742298924256e+01, -9.706634210323768e+00, -2.625951900083164e+00, -1.508403867666400e+01, -1.508403867666401e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_regtpss_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_regtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.904620916510609e-03, 1.904647779150850e-03, 1.904666124948928e-03, 1.904265936126729e-03, 1.904490040041531e-03, 1.904490040041531e-03, 2.910124241414477e-03, 2.911508824625016e-03, 2.951639589862193e-03, 2.967291561508832e-03, 2.952392919045151e-03, 2.952392919045151e-03, 3.446606185800467e-03, 3.465192047342432e-03, 3.856038303365838e-03, 4.625042925776228e-03, 4.356785916208147e-03, 4.356785916208147e-03, 1.120781030529712e-02, 1.266565040061280e-02, 3.253607428402283e-04, 1.650384027434359e-03, 4.348999417812607e-03, 4.348999417812604e-03, 3.899661161149663e-12, 5.951404792006543e-12, 2.877965925205979e-07, 6.211713129778651e-14, 5.080081939949567e-13, 5.080081939949584e-13, 8.783847822810312e-03, 8.813014337726950e-03, 8.784012303574061e-03, 8.809795766570644e-03, 8.799235492791923e-03, 8.799235492791923e-03, 6.189562894742736e-03, 6.416363040332204e-03, 5.830304012987572e-03, 6.013899560082550e-03, 6.501780179151674e-03, 6.501780179151674e-03, 5.271580583093911e-02, 6.674800163149085e-02, 2.768001646450511e-02, 1.562593344635330e-02, 5.842236986716302e-02, 5.842236986716302e-02, 1.362389007045572e-04, 3.645193316843986e-03, 9.181830975108697e-05, 5.615334598527551e-03, 7.945649353683619e-04, 7.945649353683622e-04, 1.151198099587840e-14, 6.406066027387740e-14, 4.377595476617427e-13, 1.117532218662440e-05, 3.192527285927197e-13, 3.192527285927187e-13, 1.431084043207772e-01, 1.201543723461673e-01, 1.283703962670440e-01, 1.355111485829830e-01, 1.319433217536848e-01, 1.319433217536847e-01, 1.405911300487994e-01, 4.177545374329692e-02, 6.086843012292182e-02, 9.047939179176707e-02, 7.424805606569708e-02, 7.424805606569707e-02, 4.480180266884712e-02, 7.483216693687279e-03, 1.477693162100468e-02, 3.469697166213589e-02, 2.605954391078999e-02, 2.605954391078999e-02, 4.043257706726313e-02, 1.864305261592462e-07, 1.547070425349695e-06, 5.423352505796519e-02, 8.560451892945354e-05, 8.560451892945357e-05, 2.188766829605853e-11, 2.983649659067259e-17, 7.437414790165121e-15, 6.202930813502491e-05, 3.143711253866530e-13, 3.143711253866522e-13])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
