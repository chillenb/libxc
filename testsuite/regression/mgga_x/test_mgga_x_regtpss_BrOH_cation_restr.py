
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_regtpss_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_regtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.009641938664036e+01, -2.009650377777101e+01, -2.009688487328812e+01, -2.009563116087313e+01, -2.009628715346696e+01, -2.009628715346696e+01, -3.231620685437595e+00, -3.231622686483074e+00, -3.231732419226978e+00, -3.231980802219631e+00, -3.231618350283791e+00, -3.706604559564114e+00, -6.260559431840975e-01, -7.358529929808288e-01, -7.253653179507950e-01, -7.269315747563921e-01, -7.266397524601369e-01, -7.266397524601369e-01, -1.988483961262682e-01, -2.005478142179547e-01, -7.302885524736786e-01, -1.736317025365162e-01, -1.828181969932939e-01, -1.828181969932939e-01, -1.008401655222408e-02, -1.061251994931641e-02, -5.731224625048077e-02, -5.827805741988443e-03, -7.321360888249241e-03, -7.321360888249241e-03, -5.556729563580403e+00, -5.557811167381709e+00, -5.556783946595183e+00, -5.008654587401659e+00, -5.557275561199954e+00, -5.557275561199954e+00, -1.821096801901568e+00, -1.833797804573400e+00, -1.811851514293115e+00, -1.823068562209057e+00, -1.832581818794501e+00, -2.105552357510254e+00, -6.243966504029497e-01, -6.797940106078889e-01, -5.779879537345086e-01, -6.006034235087522e-01, -6.346436628354246e-01, -5.538023767224693e-01, -8.487867218281388e-02, -2.135968867698068e-01, -7.850565485122182e-02, -2.043900164336899e+00, -1.472818728322747e-01, -1.472818728322746e-01, -2.493194360215581e-03, -5.697353355012517e-03, -4.355762995006377e-03, -5.275974836844200e-02, -2.909893789427524e-03, -5.247559739093688e-03, -6.287950257019980e-01, -6.256789865161528e-01, -5.937765318123431e-01, -6.277426439337025e-01, -6.272949970060110e-01, -6.272949970060110e-01, -6.118502634312917e-01, -5.239444957271505e-01, -5.489924152523533e-01, -5.745271514739396e-01, -5.614621513250923e-01, -4.922203226829044e-01, -7.122122165124692e-01, -2.046381920956654e-01, -2.922139548259356e-01, -3.235324800603726e-01, -3.270649672458050e-01, -3.270649672458050e-01, -4.211482093752144e-01, -5.494833420681106e-02, -7.380058433412233e-02, -3.569508395926231e-01, -6.722900794019029e-02, -1.088560988380791e-01, -1.422652960078061e-02, -1.523282810792290e-03, -3.197037755882507e-03, -1.030067541066272e-01, -4.855594804140438e-03, -4.855594804140433e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_regtpss_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_regtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.831919335439829e+01, -2.831939070286442e+01, -2.832024483013272e+01, -2.831731715525411e+01, -2.831885431163841e+01, -2.831885431163841e+01, -4.277169532107946e+00, -4.277181989146813e+00, -4.277589955209104e+00, -4.277811565443812e+00, -4.277343254233021e+00, -4.512135190519349e+00, -8.311788389946355e-01, -7.931590283932440e-01, -7.546880817630114e-01, -7.689239556464188e-01, -7.657320181427053e-01, -7.657320181427053e-01, -1.930571943999551e-01, -1.970733444907699e-01, -9.755873035965925e-01, -1.589462370568558e-01, -1.647907086623875e-01, -1.647907086623875e-01, -1.341972039018262e-02, -1.411952301711801e-02, -7.307588651116992e-02, -7.766170312005376e-03, -9.751901013890516e-03, -9.751901013890516e-03, -7.066845962385701e+00, -7.069302746313525e+00, -7.066977097303889e+00, -7.221448011988643e+00, -7.068080801250176e+00, -7.068080801250176e+00, -2.407734984208068e+00, -2.424743279440099e+00, -2.395449957606262e+00, -2.410358917827013e+00, -2.423119130044782e+00, -2.518650860852274e+00, -7.798543942978707e-01, -8.597164866861320e-01, -7.105925663126805e-01, -7.504576730747066e-01, -7.948458582126959e-01, -7.471728764551963e-01, -1.134141628336938e-01, -1.928660197884374e-01, -1.048749471531634e-01, -2.563563350164114e+00, -1.399599051567899e-01, -1.399599051567898e-01, -3.324267170715501e-03, -7.592748799078645e-03, -5.802953788475779e-03, -7.042109375101693e-02, -3.879883778398711e-03, -6.991622614491272e-03, -8.208867025325877e-01, -8.060811478837364e-01, -8.399298984716120e-01, -8.150973178937551e-01, -8.129113863591056e-01, -8.129113863591056e-01, -7.970191130111133e-01, -6.491995626309383e-01, -6.886020146476164e-01, -7.269798390157727e-01, -7.071892008672219e-01, -6.813887381728063e-01, -8.978082920605037e-01, -2.733042053144911e-01, -3.053911535090232e-01, -4.277445620280292e-01, -3.709309840197397e-01, -3.709309840197397e-01, -5.576528378781557e-01, -7.029782964171070e-02, -9.167124206384153e-02, -4.369137390060865e-01, -8.980504863635748e-02, -1.184011317252852e-01, -1.891894070560865e-02, -2.030965030714310e-03, -4.261484707054290e-03, -1.135739917214249e-01, -6.469280435651489e-03, -6.469280435651483e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_regtpss_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_regtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.023017076580266e-08, -1.023045695605104e-08, -1.023153302769125e-08, -1.022730620313817e-08, -1.022954825203279e-08, -1.022954825203279e-08, -5.386546293571308e-06, -5.387053371907773e-06, -5.400125137782586e-06, -5.392868424596494e-06, -5.395887354171950e-06, -6.770761417793618e-06, -3.150042613763929e-03, -3.153834268820550e-03, -3.286176853064347e-03, -3.278540676348138e-03, -3.278532966265143e-03, -3.278532966265143e-03, -5.735330442634734e-01, -5.554938599816186e-01, -1.584386074013630e-03, -8.028363210240036e-01, -7.574452957602350e-01, -7.574452957602351e-01, -3.756488236025517e+00, -3.913480450379799e+00, -1.790296169719278e+00, -2.759676922302109e+00, -3.840020394661704e+00, -3.840020394661704e+00, -3.804658293850824e-06, -3.817252725884950e-06, -3.805403996123791e-06, -4.332310054997886e-06, -3.810952746403906e-06, -3.810952746403906e-06, -4.985194935457129e-05, -4.909911207019204e-05, -5.039346247136894e-05, -4.970720460593760e-05, -4.919363228744124e-05, -5.804429055559417e-05, -1.236524247552237e-02, -1.419330589873695e-02, -1.263953440356861e-02, -1.462090274726786e-02, -1.261913460426303e-02, -9.200714258130563e-03, -8.553394546396394e+00, -4.095970179479452e-01, -1.171217044415565e+01, -1.235385278374184e-04, -1.313289684550192e+00, -1.313289684550192e+00, -1.173434334282788e+07, -2.439644002376628e+00, -1.972061524645124e+01, -5.789118467986552e+01, -6.323481932857989e+06, -7.568627919856977e+00, -3.497451099342241e-02, -3.047418192822276e-02, -3.624736024261155e-02, -3.325194232504861e-02, -3.258718480241056e-02, -3.258718480241056e-02, -3.815534657175052e-02, -2.093585076340532e-02, -2.377013195555635e-02, -2.838522485911460e-02, -2.579257783395261e-02, -2.165267819259947e-02, -1.032332925462780e-02, -2.577458995282632e-01, -1.249609479394145e-01, -4.974057053133687e-02, -8.524154537773858e-02, -8.524154537773858e-02, -1.900389556201151e-02, -1.825809397721620e+00, -1.542366854203143e+00, -8.278225062544890e-02, -2.179043400458754e+01, -2.031896161392261e+00, -1.793760705988379e+00, -2.988458329828018e+00, -8.566349882620134e+00, -2.268302617460320e+00, -1.078675535858391e+01, -1.078675535858392e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_regtpss_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_regtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [8.935502653167865e-04, 8.936227178947547e-04, 8.939139274856596e-04, 8.928417609434223e-04, 8.934077799691337e-04, 8.934077799691337e-04, -2.380127266617349e-04, -2.380004291519583e-04, -2.376339460436669e-04, -2.377694221188222e-04, -2.377801851022056e-04, 3.983478374143121e-03, -3.400082736692038e-04, 6.220767350518557e-03, 4.794009498709857e-03, 5.440216673485608e-03, 5.285991098601336e-03, 5.285991098601336e-03, 9.776113398149098e-03, 1.083163431360530e-02, 7.584008413606655e-05, 1.190673889591280e-03, 3.237522497106525e-03, 3.237522497106519e-03, 3.056488663603622e-10, 4.205810631887418e-10, 8.746483477915018e-07, 1.224768355264878e-11, 6.319039322114189e-11, 6.319039322114189e-11, 8.708381222340623e-03, 8.737687781171767e-03, 8.710079362253813e-03, 7.882388021019086e-03, 8.723051592083191e-03, 8.723051592083191e-03, -3.929953412372988e-04, -4.022874213521913e-04, -3.836442870198762e-04, -3.940915977429378e-04, -4.019412916209143e-04, 5.556977475666186e-03, 4.061976841786227e-02, 6.063079202653499e-02, 3.009100373951742e-02, 4.282302811590451e-02, 4.398210287119561e-02, 4.086233873844781e-03, 1.324412579075033e-04, 3.018205548175150e-03, 1.113655804201972e-04, 1.443846366633217e-02, 6.624527724544573e-04, 6.624527724544571e-04, 4.660261535452028e-09, 9.085883614382995e-12, 5.470913411740995e-11, 4.651871864909908e-05, 2.936504602674333e-08, 3.298600921094882e-11, 1.081491028353466e-01, 9.572981889350883e-02, 1.246333461900847e-01, 1.035037148339185e-01, 1.016768547157182e-01, 1.016768547157182e-01, 1.092006977851966e-01, 3.896696509992207e-02, 5.384044810267953e-02, 7.307317166439516e-02, 6.264874818468556e-02, 2.008167818707106e-02, 5.112344866508049e-02, 2.424527557771566e-04, 1.232353083922441e-02, -2.172960056627099e-03, 2.113371299903763e-02, 2.113371299903765e-02, -1.796812900509479e-03, 7.091327143036954e-07, 3.073830400655937e-06, 4.510938245676387e-02, 1.209084442784220e-04, 8.921005524758390e-05, 5.675281216835857e-10, 1.675757755370576e-14, 3.319786016652271e-12, 7.209166912930512e-05, 3.807437515444527e-11, 3.807437515450854e-11]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
