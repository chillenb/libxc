
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_b00_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_b00", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.343732668416175e+01, -2.343746148633929e+01, -2.343811314734018e+01, -2.343611283484135e+01, -2.343715369043949e+01, -2.343715369043949e+01, -2.973919891985157e+00, -2.974206206138984e+00, -2.982003377527862e+00, -2.980662294932242e+00, -2.979877255176719e+00, -2.979877255176719e+00, -5.527847063476182e-01, -5.534207737715192e-01, -5.730505208115887e-01, -5.687553192022015e-01, -5.685230144236899e-01, -5.685230144236899e-01, -1.955272976395505e-01, -1.934216646803589e-01, -7.097211035337818e-01, -2.073257225747786e-01, -2.004061102903564e-01, -2.004061102903603e-01, -7.930654604580262e-02, -7.947908748514322e-02, -1.347017143739846e-01, -7.231291694304803e-02, -7.310321360466873e-02, -7.310321360466870e-02, -1.092534962371423e+01, -8.837683655937163e+00, -4.816997234656569e+00, -1.307634189583945e+01, -5.228820898359410e+00, -7.510774152203325e+00, -1.112129912525281e+00, -2.070856358678168e+00, -1.795980116171880e+00, -1.821376368292722e+00, -1.839752354922175e+00, -1.674737227542701e+00, -1.290483424822683e+00, -1.221804514472030e+00, -9.975316986789092e-01, -6.255599058897434e-01, -7.175071313644302e-01, -7.627074370028792e-01, -6.593295541240696e-02, -3.760788637500249e-01, -6.101685183607770e-02, -2.284568216898497e+00, -1.755574781085553e-01, -1.549846338853084e-01, -1.437667094528238e-01, -3.067378817668053e+00, -1.900915597369466e-03, -4.140616248291617e-02, -8.407970032885759e-02, -2.290014340472107e-03, -3.243617389883726e+01, -5.020631731147099e-01, -4.888090660025874e-01, -5.092490871185980e+00, -4.828671965839909e-01, -1.005940797416623e+02, -4.549578192925468e-01, -5.235819977232735e-01, -1.098731416221279e+00, -5.310139652559684e-01, -7.482500089689754e-01, -1.522347906025856e+00, -1.712531666909595e+00, -1.304366866001664e-01, -1.451712707967445e-01, -1.978688101756285e-01, -3.265298474555171e-01, -2.970382721700178e-01, -4.412746661041747e-01, -2.448193156808946e-02, -1.551995625541589e-01, -3.211226107301558e-01, -5.230966436696127e-02, -1.456823759525363e-01, -6.214295856148501e-03, -6.645242493244979e-04, -1.394865423202377e-03, -5.018364833975565e-02, -2.118980983302286e-03, -2.118980166351161e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_b00_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_b00", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.985924171388933e+01, -3.985885880279648e+01, -3.985743357999897e+01, -3.986309159473359e+01, -3.986008872032998e+01, -3.986008872032998e+01, -5.918150298737362e+00, -5.919418512618170e+00, -5.952804204693304e+00, -5.939038944309541e+00, -5.940261125048959e+00, -5.940261125048959e+00, -5.339914789555475e-01, -5.302793192848232e-01, -4.581204455537793e-01, -4.809547517256048e-01, -4.754717574721179e-01, -4.754717574721179e-01, -1.067525088367394e-01, -1.082438557976399e-01, -5.643365920877265e-01, -1.319556887947659e-01, -1.157070999943519e-01, -1.157070999943410e-01, -3.459360164987783e-02, -3.502286386465341e-02, -7.452034824660002e-02, -2.962707997301704e-02, -3.143346940524443e-02, -3.143346940524459e-02, -9.692731054923625e+00, -8.679888406937684e+00, -6.082048296019630e+00, -1.076006400356956e+01, -7.186163009755847e+00, -8.257044880750838e+00, -2.042944516509349e+00, -3.256807712368499e+00, -2.725841417830297e+00, -2.855897091094141e+00, -2.977859537412241e+00, -2.785899116694294e+00, -2.070631617435567e+00, -1.414274187068598e+00, -1.670952153001823e+00, -1.253430612608710e+00, -1.327548905133072e+00, -1.369116858040418e+00, -8.534677226244620e-02, -2.025143827405800e-01, -7.930984880290606e-02, -4.294083693132469e+00, -1.091675045560220e-01, -8.544450132128248e-02, -8.537406171585471e-02, -1.802727900097002e+00, -2.534553282381308e-03, -5.487024080667013e-02, -4.725445902111124e-02, -3.053352217435149e-03, -1.519296476705449e+01, -5.441744062479229e-01, -5.341474028809576e-01, -2.522545303519812e+00, -5.325565219504305e-01, -3.829991688533602e+01, -5.212727101193542e-01, -1.014082372777884e+00, -1.652565418569459e+00, -8.293638411345338e-01, -1.138739453162534e+00, -1.884054828356510e+00, -2.096729814003272e+00, -1.271696371895756e-01, -1.541818981121771e-01, -3.608330028950235e-01, -3.466791336947428e-01, -3.243081985748918e-01, -8.231966318234051e-01, -3.263539186297294e-02, -9.330012187411037e-02, -6.161205413764895e-01, -6.813335089828548e-02, -8.780913575345790e-02, -8.285729004866162e-03, -8.860327380495547e-04, -1.859820805229576e-03, -6.488492661538159e-02, -2.825310024846140e-03, -2.825307605102113e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_b00_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_b00", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.207362035902666e-09, -7.207247271332403e-09, -7.206900204888425e-09, -7.208608162880666e-09, -7.207690095394207e-09, -7.207690095394207e-09, -1.087141186451950e-05, -1.087297141223495e-05, -1.091225466715600e-05, -1.087942340790590e-05, -1.089265277305607e-05, -1.089265277305607e-05, -5.098755881577185e-03, -5.092158306926146e-03, -4.930082916489598e-03, -4.809655320740762e-03, -4.873234262731803e-03, -4.873234262731803e-03, -5.555111029969372e-01, -5.390045904844752e-01, -3.122686151313506e-03, -1.223077693325278e+00, -9.331673154069702e-01, -9.331673154071078e-01, -7.657705860959559e+03, -6.710409388396441e+03, -4.814390020863407e+01, -3.547859642791547e+04, -1.945001670303524e+04, -1.945001670303518e+04, -6.849933487707723e-07, -1.217647853211583e-06, -7.962170162492857e-10, -4.500181481082281e-07, -4.408092761062996e-07, -2.144524841777545e-06, -2.022113868454586e-09, -3.798648746175863e-05, -5.600358884227346e-05, -5.584365597723248e-05, -5.654038431017337e-05, -8.167394432823405e-05, -2.108028449441731e-03, -3.761963718120916e-03, -2.510819900524803e-03, -1.848293954876606e-02, -1.301398955471893e-02, -1.022014710086563e-02, -4.968491124036373e-03, -1.656883266669839e-01, -9.279200940829863e-05, -1.417195672541052e-04, -2.729490599606090e+00, -3.747827328014006e+00, -2.709878356426255e+04, -2.888212839643602e+02, -8.690128414974710e-09, -4.825538316945035e-03, -3.761685918519798e+04, -8.271512488722554e-06, -1.323280153831809e-05, -4.710055431333226e-12, -1.521050521592797e-14, -2.074771311708572e-04, -4.408172325826336e-11, -3.375358045433760e-06, -5.079966535631709e-14, -2.263157973678422e-02, -4.715157419087709e-03, -2.559052705002212e-03, -1.742977071532309e-02, -2.771412144709041e-03, -1.422960221140890e-03, -7.225547455585348e-06, -1.978198385093085e-06, -1.315238836647892e-04, -4.856709945607233e-02, -6.394589653226344e-02, -2.592882346647288e-02, -1.322879574522611e-02, -2.072935879342080e+01, -9.840014481353891e-02, -4.628632889863588e-04, -9.033783818697383e+00, -5.462508025204690e-05, -7.242038190728412e-03, -4.663840717661281e-05, -6.465411676183697e-01, -3.076188096019713e-04, -8.648388589745426e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_b00_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_b00", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([-2.786828909469492e-04, -2.786807850130035e-04, -2.786784500788553e-04, -2.787097832573451e-04, -2.786923702568532e-04, -2.786923702568532e-04, -1.814062315170580e-03, -1.814334297832617e-03, -1.821295764078028e-03, -1.816145961021241e-03, -1.817752248095420e-03, -1.817752248095420e-03, -6.105141744721554e-03, -6.077097022396748e-03, -5.427208909603226e-03, -5.427581058733308e-03, -5.470496122585207e-03, -5.470496122585207e-03, -1.145115841400610e-02, -1.162340381433078e-02, -5.928049997558318e-03, -1.103178857169447e-02, -1.191784799894750e-02, -1.191784799894925e-02, -6.658984064170257e-03, -6.804181522279774e-03, -8.197879448639919e-03, -5.942951837348237e-03, -6.464316351942809e-03, -6.464316351942790e-03, -3.836218641030354e-04, -6.823039330822109e-04, -4.459235046249403e-07, -2.521564421174150e-04, -2.469383129410857e-04, -1.201348009657334e-03, -6.014107194524165e-08, -1.154545483328353e-03, -1.639320452850884e-03, -1.666445086375160e-03, -1.714967934942814e-03, -2.477312408681725e-03, -1.689432366207484e-03, -3.865368245267168e-03, -1.594155217610537e-03, -1.318175326524317e-02, -1.094240158322667e-02, -8.593287503966847e-03, -1.499783900402275e-05, -3.431039265859198e-03, -2.217772886199439e-07, -3.977771779742904e-03, -1.331594920087619e-02, -1.828395317451991e-02, -2.084998507445225e-03, -4.519945396518228e-05, -6.080159975918609e-16, -3.509034703285359e-06, -4.601476217650583e-03, -1.011811426424072e-12, -1.076036381977931e-05, -3.764488700689499e-12, -1.223111292164409e-14, -1.676737084921533e-04, -3.553582234695794e-11, -2.720994439312284e-06, -3.803923649429495e-14, -1.072006418779997e-02, -2.564587621567030e-03, -1.586851928543239e-03, -1.011536022936616e-02, -1.608387892511215e-03, -1.684654932315175e-03, -3.017633587437353e-07, -1.430995177595798e-07, -2.192523937842422e-05, -5.324772204375872e-03, -7.010864067492088e-03, -9.583753542369358e-03, -1.975100555129585e-06, -7.842715638958468e-03, -1.469558489325947e-02, -6.948725979159286e-07, -1.356195010595663e-02, -1.335260284943814e-10, -2.164676026663643e-11, -1.289260226004537e-12, -8.037199284937857e-04, -2.981214672322883e-11, -8.381380503942118e-12])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_b00_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_b00", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([3.983781781357975e-03, 3.983481045342537e-03, 3.982291268833465e-03, 3.986743581454806e-03, 3.984390585255959e-03, 3.984390585255959e-03, 2.315318630001859e-02, 2.316417486719851e-02, 2.345409701229274e-02, 2.333436206990320e-02, 2.334974697781092e-02, 2.334974697781092e-02, 1.535158554003987e-02, 1.497508269011507e-02, 7.709945749785314e-03, 9.268723787950656e-03, 9.053173907836947e-03, 9.053173907836947e-03, -1.859203838645430e-02, -1.809119667065514e-02, 1.341766839670475e-02, 2.268519818788564e-02, 7.500170617704812e-03, 7.500170617710857e-03, 2.663577600032684e-02, 2.721651641588646e-02, 3.268309929252855e-02, 2.377179713316817e-02, 2.585722311439029e-02, 2.585722311439021e-02, -1.053673250517575e-02, -7.709048626828322e-03, -5.341508546383118e-03, -1.437571391542759e-02, -4.988791238878286e-03, -3.779425982943362e-03, 1.075488827836768e-02, 2.722131597744261e-02, 2.215723184362839e-02, 2.452963588887740e-02, 2.682113827723693e-02, 2.808010621211137e-02, 4.064010000677113e-01, 1.474565870092822e-01, 2.829379215029965e-01, 2.625196486272875e-01, 2.585021034917461e-01, 2.626330033190698e-01, -1.505838398738457e-03, -4.481383381950766e-02, -1.155369279817461e-03, 8.054256107963480e-02, 3.908390905602391e-02, 6.061760649714988e-02, 8.339989884880961e-03, 1.804688626131255e-04, -1.602389938217257e-09, -2.426682656313127e-04, 1.840586938172595e-02, -9.625360817890018e-10, -2.260762119885688e+01, -2.675544209238738e-01, -3.039043869862867e-01, -3.444913363123764e+00, -3.148883314235166e-01, -6.559960358419048e+01, -3.346687321851514e-01, 2.496601562610661e-01, 4.407520932924682e-01, 7.456231795460769e-02, 2.688832528255980e-01, 4.711678821825245e-01, 3.060802380420471e-01, -2.509405904894540e-02, -2.136728358497201e-02, 5.645279127332310e-02, 3.852872443170016e-02, 4.371694288333901e-02, 1.899341694756587e-01, -9.045601606355337e-06, 3.106952028725787e-02, 2.706296195531518e-01, -1.207723924189168e-03, 5.087654932388283e-02, -1.592118111329994e-08, 8.609407739279252e-11, -9.236482632523024e-11, 2.176994595936394e-03, -9.963373687019602e-10, -1.082060011063524e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
