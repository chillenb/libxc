
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_tlda_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tlda", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.722002304580689e+01, -1.721996431294053e+01, -1.721976096724893e+01, -1.722062640117272e+01, -1.722016488070111e+01, -1.722016488070111e+01, -3.478929542106748e+00, -3.478754825177319e+00, -3.474209125037294e+00, -3.476361374008943e+00, -3.475769402170552e+00, -3.475769402170552e+00, -7.796379837601251e-01, -7.797604296473089e-01, -7.820447301375349e-01, -7.777529372456434e-01, -7.788415046144251e-01, -7.788415046144251e-01, -2.202014651111608e-01, -2.211435390735400e-01, -1.014437396744861e+00, -2.015754348467233e-01, -2.085660057044475e-01, -2.085660057044475e-01, -3.004492794887133e-02, -3.085450396054064e-02, -9.229418719215275e-02, -2.229497816019777e-02, -2.473654250345737e-02, -2.473654250345737e-02, -3.891659175438612e+00, -3.886097748620169e+00, -3.891334178796418e+00, -3.886428550734911e+00, -3.888878855725259e+00, -3.888878855725259e+00, -2.041230583399970e+00, -2.039066496651750e+00, -2.043718726977246e+00, -2.041559619445284e+00, -2.038643749185572e+00, -2.038643749185572e+00, -5.317275018676270e-01, -5.075170777549338e-01, -5.283271252337298e-01, -5.099246453036909e-01, -5.290155128390515e-01, -5.290155128390515e-01, -1.662378437080669e-01, -2.433035102467931e-01, -1.581443833267155e-01, -1.681310835441904e+00, -1.733734340417252e-01, -1.733734340417252e-01, -1.979795460830014e-02, -2.226680249942962e-02, -1.537984760440256e-02, -1.218246836215160e-01, -1.892663731313554e-02, -1.892663731313554e-02, -3.382070899764741e-01, -3.861910316109918e-01, -3.722140807384418e-01, -3.586246452779436e-01, -3.657010505164627e-01, -3.657010505164627e-01, -3.375788730293479e-01, -4.657891281335178e-01, -4.514247316355883e-01, -4.261261250408744e-01, -4.408500334183624e-01, -4.408500334183624e-01, -5.535485346056486e-01, -2.822949503272910e-01, -3.144143099744554e-01, -3.640862019972192e-01, -3.353387593597628e-01, -3.353387593597628e-01, -4.493342913002263e-01, -8.977513907056972e-02, -1.093932729998132e-01, -3.303388798461456e-01, -1.365244636602868e-01, -1.365244636602868e-01, -3.977351754243879e-02, -9.887440817107225e-03, -1.388493879651296e-02, -1.304268100560745e-01, -1.743644990105780e-02, -1.743644990105779e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_tlda_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tlda", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.722002304580689e+01, -1.721996431294053e+01, -1.721976096724893e+01, -1.722062640117272e+01, -1.722016488070111e+01, -1.722016488070111e+01, -3.478929542106748e+00, -3.478754825177319e+00, -3.474209125037294e+00, -3.476361374008943e+00, -3.475769402170552e+00, -3.475769402170552e+00, -7.796379837601251e-01, -7.797604296473089e-01, -7.820447301375349e-01, -7.777529372456434e-01, -7.788415046144251e-01, -7.788415046144251e-01, -2.202014651111608e-01, -2.211435390735400e-01, -1.014437396744861e+00, -2.015754348467233e-01, -2.085660057044475e-01, -2.085660057044475e-01, -3.004492794887133e-02, -3.085450396054063e-02, -9.229418719215275e-02, -2.229497816019777e-02, -2.473654250345737e-02, -2.473654250345737e-02, -3.891659175438612e+00, -3.886097748620169e+00, -3.891334178796418e+00, -3.886428550734911e+00, -3.888878855725259e+00, -3.888878855725259e+00, -2.041230583399970e+00, -2.039066496651750e+00, -2.043718726977246e+00, -2.041559619445284e+00, -2.038643749185572e+00, -2.038643749185572e+00, -5.317275018676270e-01, -5.075170777549338e-01, -5.283271252337298e-01, -5.099246453036909e-01, -5.290155128390515e-01, -5.290155128390515e-01, -1.662378437080669e-01, -2.433035102467931e-01, -1.581443833267155e-01, -1.681310835441904e+00, -1.733734340417252e-01, -1.733734340417252e-01, -1.979795460830014e-02, -2.226680249942962e-02, -1.537984760440256e-02, -1.218246836215160e-01, -1.892663731313554e-02, -1.892663731313554e-02, -3.382070899764741e-01, -3.861910316109918e-01, -3.722140807384418e-01, -3.586246452779436e-01, -3.657010505164627e-01, -3.657010505164627e-01, -3.375788730293479e-01, -4.657891281335178e-01, -4.514247316355883e-01, -4.261261250408744e-01, -4.408500334183624e-01, -4.408500334183624e-01, -5.535485346056486e-01, -2.822949503272910e-01, -3.144143099744554e-01, -3.640862019972192e-01, -3.353387593597628e-01, -3.353387593597628e-01, -4.493342913002263e-01, -8.977513907056972e-02, -1.093932729998132e-01, -3.303388798461456e-01, -1.365244636602868e-01, -1.365244636602868e-01, -3.977351754243879e-02, -9.887440817107225e-03, -1.388493879651296e-02, -1.304268100560745e-01, -1.743644990105780e-02, -1.743644990105779e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_tlda_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tlda", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_tlda_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tlda", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-3.365547735397431e-03, -3.365621810397911e-03, -3.365914675816060e-03, -3.364819045933280e-03, -3.365398145151004e-03, -3.365398145151004e-03, -8.718472827126574e-03, -8.720280930221706e-03, -8.767965998819148e-03, -8.747861646804932e-03, -8.750923889700406e-03, -8.750923889700406e-03, -2.480368871902639e-02, -2.470621422313042e-02, -2.252436929692706e-02, -2.360382701328920e-02, -2.334908015348744e-02, -2.334908015348744e-02, -6.710155137051392e-02, -6.900817447912068e-02, -1.371952943988757e-02, -4.181173236109421e-02, -5.165601816977376e-02, -5.165601816977375e-02, -8.167352994534477e-03, -8.562671808150232e-03, -1.796054696867552e-02, -5.188768253506395e-03, -6.793652587960898e-03, -6.793652587960898e-03, -1.868678124330381e-02, -1.880433522033829e-02, -1.869353752962765e-02, -1.879723570001195e-02, -1.874548981396793e-02, -1.874548981396793e-02, -1.311154860020082e-02, -1.345590935216594e-02, -1.284163139541464e-02, -1.314696766011351e-02, -1.343966945510577e-02, -1.343966945510577e-02, -7.672988510425677e-02, -1.185305577448921e-01, -6.236775434923616e-02, -8.072997614953649e-02, -8.216469820869222e-02, -8.216469820869222e-02, -3.025110757838442e-02, -4.522691619597373e-02, -2.924476263325351e-02, -2.688281208455787e-02, -4.132539562380516e-02, -4.132539562380518e-02, -3.832934115795984e-03, -4.872246638191927e-03, -9.570559994991415e-03, -2.526721785746920e-02, -7.295877099223300e-03, -7.295877099223298e-03, -4.756648116180244e-01, -2.749969912773377e-01, -3.206327226354090e-01, -3.739305150449099e-01, -3.449527992738115e-01, -3.449527992738113e-01, -4.412925576236111e-01, -7.701615354064927e-02, -1.002389825713275e-01, -1.439332822011769e-01, -1.175933779907630e-01, -1.175933779907630e-01, -9.650550229845728e-02, -5.033151554720176e-02, -5.665207356721556e-02, -7.260717443113543e-02, -6.635605400584113e-02, -6.635605400584116e-02, -6.939549392997614e-02, -1.759143438462589e-02, -2.021970584560861e-02, -9.598625997242934e-02, -3.307251570199510e-02, -3.307251570199511e-02, -7.475746001017157e-03, -2.393608990745573e-03, -5.692167808004289e-03, -3.287742247739656e-02, -8.024256382896729e-03, -8.024256382896730e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
