
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_bloc_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_bloc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.241624868509430e+01, -2.241630166618226e+01, -2.241661995546804e+01, -2.241575373696418e+01, -2.241627590184638e+01, -2.241627590184638e+01, -3.413851368838121e+00, -3.413868014231045e+00, -3.414642474908480e+00, -3.416742739806624e+00, -3.413858607231214e+00, -3.413858607231214e+00, -6.591862106964254e-01, -6.590708278777818e-01, -6.594999529021734e-01, -6.660184741364304e-01, -6.591430493071248e-01, -6.591430493071248e-01, -2.072256635815449e-01, -2.083147092031700e-01, -7.716001911182780e-01, -1.741003861322943e-01, -2.075242643395547e-01, -2.075242643395547e-01, -1.700699695672897e-02, -1.780954026760715e-02, -7.036486416187364e-02, -8.175611152746183e-03, -1.762404115829026e-02, -1.762404115829026e-02, -5.475247255997137e+00, -5.476212878913509e+00, -5.475376911263115e+00, -5.476126334024046e+00, -5.475700377181917e+00, -5.475700377181917e+00, -2.091006646261179e+00, -2.104171348601112e+00, -2.088441589630309e+00, -2.098516887278029e+00, -2.103375467457314e+00, -2.103375467457314e+00, -5.850682378650582e-01, -5.996052402665439e-01, -5.446193361056404e-01, -5.453451587069815e-01, -6.101529294908501e-01, -6.101529294908501e-01, -1.430342333437077e-01, -2.274585090525075e-01, -1.403218564193757e-01, -1.805675639635609e+00, -1.561651875362579e-01, -1.561651875362579e-01, -7.887066913669813e-03, -9.012320642804444e-03, -6.754987126656772e-03, -9.508952814961551e-02, -8.211575926838485e-03, -8.211575926838485e-03, -5.860767316945946e-01, -6.076397973821858e-01, -6.028245834778946e-01, -5.972165564276674e-01, -6.002634932424613e-01, -6.002634932424613e-01, -5.519350756613367e-01, -5.307205008073693e-01, -5.511796925236970e-01, -5.670114012333470e-01, -5.594035120157317e-01, -5.594035120157317e-01, -6.263634496579286e-01, -2.688590908525714e-01, -3.033941355910769e-01, -3.636533834298022e-01, -3.323491001261178e-01, -3.323491001261178e-01, -4.742307824919771e-01, -6.561475987317546e-02, -8.694014451509499e-02, -3.360220247626655e-01, -1.184092780730530e-01, -1.184092780730530e-01, -1.992234167237892e-02, -2.468790697302122e-03, -4.689135495013837e-03, -1.128494422171271e-01, -6.979305648351677e-03, -6.979305648351667e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_bloc_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_bloc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.852309688708389e+01, -2.852314647554378e+01, -2.852375853382111e+01, -2.852296226513560e+01, -2.852311946732103e+01, -2.852311946732103e+01, -4.102849448278635e+00, -4.102879049841026e+00, -4.103782210975348e+00, -4.101898479581878e+00, -4.102889358059327e+00, -4.102889358059327e+00, -7.612054419521833e-01, -7.593091958720608e-01, -7.086994022348447e-01, -7.163990101009478e-01, -7.605165147613535e-01, -7.605165147613535e-01, -2.073530301187592e-01, -2.115856569947596e-01, -9.678456318514184e-01, -1.531157139142603e-01, -2.085705291660999e-01, -2.085705291660999e-01, -2.256059484485071e-02, -2.361325971898297e-02, -8.811618660247261e-02, -1.089008803839747e-02, -2.336756102132090e-02, -2.336756102132090e-02, -6.962414168860835e+00, -6.961029736365472e+00, -6.962422086604533e+00, -6.961337587388292e+00, -6.961504808280812e+00, -6.961504808280812e+00, -2.508230429031677e+00, -2.547434981446028e+00, -2.503950674523497e+00, -2.535090098163054e+00, -2.538686805261051e+00, -2.538686805261051e+00, -6.915804341837171e-01, -7.851501354246714e-01, -6.508004902674696e-01, -7.111279790367039e-01, -7.238373605950202e-01, -7.238373605950202e-01, -1.481116378364302e-01, -2.026456434547429e-01, -1.436869063400724e-01, -2.387766613713719e+00, -1.475449842395904e-01, -1.475449842395904e-01, -1.050617042143927e-02, -1.200160751581860e-02, -8.996092895963129e-03, -1.118306429866378e-01, -1.093514334141662e-02, -1.093514334141662e-02, -7.422065509670465e-01, -7.363550103554563e-01, -7.341176566309290e-01, -7.348992840401982e-01, -7.341192349889265e-01, -7.341192349889265e-01, -7.268406674335444e-01, -6.821634596847781e-01, -6.987145476333023e-01, -6.955246431510972e-01, -6.973632172548690e-01, -6.973632172548692e-01, -8.232071281421284e-01, -2.587585619464630e-01, -3.245929358600959e-01, -4.164602989282706e-01, -3.797829409921986e-01, -3.797829409921984e-01, -5.638624433850589e-01, -8.330413489634861e-02, -1.056913376497072e-01, -3.903875398895156e-01, -1.272011953396153e-01, -1.272011953396153e-01, -2.640211465121301e-02, -3.291322021397545e-03, -6.249643296104536e-03, -1.209876255350562e-01, -9.295633895706762e-03, -9.295633895706748e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_bloc_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_bloc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-8.054974205147924e-09, -8.055264808336187e-09, -8.054730826227255e-09, -8.049915833109349e-09, -8.055143969693746e-09, -8.055143969693746e-09, -1.493766847965733e-05, -1.494101533172996e-05, -1.504518925360715e-05, -1.507457103199415e-05, -1.493782542268237e-05, -1.493782542268237e-05, -5.620194588511551e-03, -5.667713193124021e-03, -6.741759175189588e-03, -6.856217671120202e-03, -5.638064142655383e-03, -5.638064142655383e-03, -5.458859750402064e-01, -5.362117748271304e-01, -1.145348424218020e-03, -1.224378853823664e+00, -5.442282079023916e-01, -5.442282079023916e-01, -5.152390264427960e+00, -5.168939993406248e+00, -2.272617916733623e+00, -3.634057619369742e+00, -5.369608615158001e+00, -5.369608615158001e+00, -3.609999204043255e-06, -3.664528832089725e-06, -3.614816064233613e-06, -3.657244769954059e-06, -3.638833053331916e-06, -3.638833053331916e-06, -3.872302397552653e-05, -3.370413761474836e-05, -3.601590637259717e-05, -3.198916885196594e-05, -3.921002577305640e-05, -3.921002577305640e-05, -2.906533055995492e-02, -1.777975788919072e-02, -2.938988192315125e-02, -1.740386774396762e-02, -2.832055512080952e-02, -2.832055512080952e-02, -1.365336702324693e+00, -4.209142641181444e-01, -1.568225954913011e+00, -1.093962862035521e-04, -1.469549139202298e+00, -1.469549139202298e+00, -3.855023918381402e+00, -3.864131319523128e+00, -1.105921462399024e+01, -2.323739843186112e+00, -5.707580909656992e+00, -5.707580909656991e+00, -1.739985169772331e-01, -1.022640558028429e-01, -1.277522733089794e-01, -1.508119760931572e-01, -1.390782877283802e-01, -1.390782877283802e-01, -8.621646904684857e-02, -5.919003236091893e-03, -1.598046716423146e-02, -4.136512176228065e-02, -2.645748610469587e-02, -2.645748610469589e-02, -1.120555072619114e-02, -1.903311326853703e-01, -1.105180628195816e-01, -1.106677655637313e-01, -9.188117336598302e-02, -9.188117336598320e-02, -3.509664083204614e-02, -1.901369205041204e+00, -1.958510759743937e+00, -1.940413873673413e-01, -2.305923045526900e+00, -2.305923045526902e+00, -3.874763612631813e+00, -6.638767351418825e+00, -5.717845646589529e+00, -2.834216143053160e+00, -8.334100666319891e+00, -8.334100666319888e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_bloc_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_bloc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_bloc_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_bloc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.064747652802773e-03, 1.064800599776268e-03, 1.064857960386506e-03, 1.063987360655143e-03, 1.064777164510869e-03, 1.064777164510869e-03, 3.646578457115599e-03, 3.647952779454657e-03, 3.692332905768670e-03, 3.717447194921879e-03, 3.646668056822981e-03, 3.646668056822981e-03, 4.443013966266952e-03, 4.495721108155626e-03, 5.637927229001008e-03, 6.699637681303809e-03, 4.463570009208655e-03, 4.463570009208655e-03, 1.238536444959581e-03, 2.948784703195800e-03, -7.222891709868268e-05, 1.443547588310010e-03, 1.841812270681645e-03, 1.841812270681645e-03, -2.618477474576045e-10, -3.584753498283636e-10, -1.801858672858833e-07, 6.087836045129132e-13, -3.625576747081948e-10, -3.625576747081947e-10, 7.969695514464798e-03, 8.095696637682686e-03, 7.982261150243617e-03, 8.080232633181776e-03, 8.034370015802206e-03, 8.034370015802206e-03, 1.066366223374260e-03, 7.366144308177927e-04, 6.970771564313478e-04, 4.210797301481023e-04, 1.363226408664751e-03, 1.363226408664751e-03, 4.683220497883944e-02, 2.176110547353049e-02, 3.299383328384289e-02, 1.460867955583574e-02, 5.437790350515077e-02, 5.437790350515077e-02, 6.046480916753108e-05, -5.798509963872369e-04, 7.555055673969976e-05, 2.690038018365402e-03, 1.108225077802324e-04, 1.108225077802324e-04, 7.199943502317395e-14, 9.712348968640637e-13, -5.639442157592632e-13, 1.191749801016741e-05, 1.566478582421180e-12, 1.566478582421179e-12, 2.866655445630797e-01, 2.413500251841939e-01, 2.826078126474428e-01, 3.074525400858994e-01, 2.967548835107990e-01, 2.967548835107990e-01, 6.995771534749111e-02, 4.656393487012397e-03, 2.749873838716221e-02, 7.884040088022881e-02, 4.870947552924161e-02, 4.870947552924167e-02, 1.440406762548565e-02, -2.417889196122278e-03, 3.197140727008921e-03, 3.702823669347205e-02, 1.547916482383104e-02, 1.547916482383106e-02, 2.944716061510606e-02, -2.947750873316497e-07, 4.298559330928878e-07, 5.406508331668239e-02, 1.518304504013851e-05, 1.518304504013896e-05, 3.466884056529211e-10, 5.040836105147245e-16, -2.115953583304132e-14, 2.478671750236970e-05, 1.105433320906475e-12, 1.105433320906460e-12]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
