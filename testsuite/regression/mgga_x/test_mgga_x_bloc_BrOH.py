
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_bloc_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_bloc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.990338901221756e+01, -1.990344161135224e+01, -1.990371145172059e+01, -1.990284986317251e+01, -1.990341645144343e+01, -1.990341645144343e+01, -3.234741860871859e+00, -3.234738920464273e+00, -3.234768638086799e+00, -3.235015012814634e+00, -3.234756430855024e+00, -3.705129607366430e+00, -6.297387846829025e-01, -7.524653302094728e-01, -7.464681489647486e-01, -7.458316216121823e-01, -7.526182727779425e-01, -7.526182727779425e-01, -2.104442569968707e-01, -2.118595826776800e-01, -7.595787439483167e-01, -1.851611880718851e-01, -2.108858342167783e-01, -2.108858342167783e-01, -1.700786315872614e-02, -1.781079834142412e-02, -7.065012101340765e-02, -8.176842833869205e-03, -1.762511958577812e-02, -1.762511958577812e-02, -5.477422304081036e+00, -5.478396868546555e+00, -5.477525125156367e+00, -4.864268007904076e+00, -5.477917626104591e+00, -5.477917626104591e+00, -1.824915457841453e+00, -1.836381423473254e+00, -1.820348712960410e+00, -1.829253192508462e+00, -1.838607631551097e+00, -2.114882674821561e+00, -6.125345147693473e-01, -6.635270981396167e-01, -5.835821766058709e-01, -6.054308105483718e-01, -6.350676711315129e-01, -5.597237005376324e-01, -9.314592199875676e-02, -2.306735243049260e-01, -9.194338434813180e-02, -2.020399017246559e+00, -1.597969463365368e-01, -1.597969463365368e-01, -4.526749921166493e-03, -9.013677025352360e-03, -6.755438350965167e-03, -5.801922208956858e-02, -4.713708806792633e-03, -8.213158037139139e-03, -6.300068976540847e-01, -6.268241050509582e-01, -5.600922525115027e-01, -6.288662914193871e-01, -6.284268498171404e-01, -6.284268498171404e-01, -6.098708175825855e-01, -5.311730667762515e-01, -5.531868803439869e-01, -5.746364920845660e-01, -5.636178582708613e-01, -4.984008617177044e-01, -6.959236275697457e-01, -2.192761172270668e-01, -3.076402672571896e-01, -3.272594092610478e-01, -3.377925918493249e-01, -3.377925918493248e-01, -4.215402528328613e-01, -6.573806404104249e-02, -8.756555418531088e-02, -3.526885122451805e-01, -7.562004254826979e-02, -1.203237314039493e-01, -1.994014396650019e-02, -2.468849559299357e-03, -4.689215096782771e-03, -1.148211780053371e-01, -6.980528531910210e-03, -6.980528531910201e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_bloc_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_bloc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.680273363826898e+01, -2.680280330404684e+01, -2.680316158131530e+01, -2.680202028425340e+01, -2.680276997464684e+01, -2.680276997464684e+01, -4.242645917843479e+00, -4.242685350725913e+00, -4.244032010619688e+00, -4.243847581855046e+00, -4.242677043322308e+00, -4.685784560181687e+00, -8.195621520961215e-01, -7.801372532303968e-01, -7.389990657297102e-01, -7.533413519804526e-01, -7.812301876756795e-01, -7.812301876756795e-01, -2.074080126540901e-01, -2.118691825217358e-01, -9.968271858569109e-01, -1.770851153233639e-01, -2.087011937835870e-01, -2.087011937835870e-01, -2.256404206600947e-02, -2.361826521430365e-02, -8.919858958982324e-02, -1.089501145801009e-02, -2.337185116289545e-02, -2.337185116289545e-02, -6.975551795003069e+00, -6.974072551932533e+00, -6.975382484742903e+00, -6.539668052473914e+00, -6.974819817864200e+00, -6.974819817864200e+00, -2.374579346718907e+00, -2.392325730276114e+00, -2.367524543661647e+00, -2.381177587107881e+00, -2.396017506153175e+00, -2.602798391921403e+00, -8.021730898518922e-01, -8.607850970853970e-01, -7.539840246558727e-01, -7.944471659413910e-01, -8.332622012573924e-01, -7.516633823879463e-01, -1.239339620259787e-01, -2.055206465264506e-01, -1.223168871421789e-01, -2.650593545671069e+00, -1.563815711283797e-01, -1.563815711283797e-01, -6.035631399655858e-03, -1.200702829482274e-02, -8.997896140192113e-03, -7.730150067512800e-02, -6.284904977093653e-03, -1.094146642436409e-02, -7.600058005369380e-01, -7.720803918852214e-01, -7.495459360562514e-01, -7.647118745469308e-01, -7.664147628129501e-01, -7.664147628129501e-01, -7.415355152858533e-01, -6.939572069931139e-01, -7.248749660568883e-01, -7.409039336364527e-01, -7.343698317779591e-01, -6.711683507775006e-01, -9.094024752977835e-01, -2.870695585338809e-01, -3.257765950923600e-01, -4.261409132050040e-01, -3.930157889153023e-01, -3.930157889153021e-01, -5.544548026119507e-01, -8.377674612245829e-02, -1.080026172232442e-01, -4.480861743363568e-01, -1.006489487652081e-01, -1.333112909196730e-01, -2.647302530109926e-02, -3.291557451028545e-03, -6.249961599036359e-03, -1.272786886186006e-01, -9.300521846162280e-03, -9.300521846162268e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_bloc_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_bloc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.856764342848270e-09, -6.856796981437590e-09, -6.856884407653874e-09, -6.856361453573708e-09, -6.856781910414764e-09, -6.856781910414764e-09, -4.831944147205846e-06, -4.832896725742821e-06, -4.860928231772798e-06, -4.848507908224041e-06, -4.832116618855080e-06, -7.705915510621905e-07, -1.803970858452403e-03, -2.394591820934560e-03, -2.820462660919007e-03, -2.682031983940936e-03, -2.383512821319887e-03, -2.383512821319887e-03, -4.515870806519550e-01, -4.233456855874040e-01, -6.370124827439307e-04, -7.030011862161725e-01, -4.431719070708848e-01, -4.431719070708848e-01, -4.949233197219910e+00, -4.912380087630285e+00, -1.729159059223780e+00, -1.750247023861252e+00, -5.137975476408467e+00, -5.137975476408465e+00, -3.517322409511604e-06, -3.572042422956909e-06, -3.523347052140817e-06, -2.429580144506570e-06, -3.544646838229146e-06, -3.544646838229146e-06, -3.978663972594695e-05, -4.012993180490994e-05, -3.959660564838305e-05, -3.988287473469392e-05, -4.028471361387398e-05, -1.247487578581404e-05, -7.740156833159693e-04, -6.394114465277601e-03, -6.410793580816952e-04, -1.706689260256008e-03, -1.676344959447669e-03, -8.560647639067836e-03, -1.219043110863393e+00, -3.811596539701528e-01, -1.306631440579021e+00, -1.789764238606982e-05, -1.153336779843043e+00, -1.153336779843043e+00, -1.532919798201385e+05, -2.209206759084618e+00, -8.683508087240559e+00, -6.605625787887988e+00, -1.303979960079591e+05, -2.721925180343419e+00, -1.755453134953295e-01, -7.215386086326761e-02, -2.841928846553891e-02, -1.202407032227835e-01, -1.062111213954260e-01, -1.062111213954260e-01, -1.365694967665928e-01, -1.018605744934101e-03, -4.630568731779060e-03, -1.636847897395502e-02, -8.810699619736490e-03, -1.626078950753416e-02, -2.824560463994611e-03, -9.989635947394852e-02, -7.979981011052754e-02, -3.929957249038713e-02, -3.424085320517808e-02, -3.424085320517815e-02, -1.764950081061940e-02, -1.623791348039708e+00, -1.405467966070951e+00, -8.271354880831087e-03, -2.685001425503192e+00, -1.705318748768766e+00, -1.932698065747140e+00, -2.442354499808625e+00, -4.801416361450392e+00, -2.047784002924933e+00, -3.826112937238850e+00, -3.826112937238844e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_bloc_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_bloc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.553028533403943e-04, 1.553060152525317e-04, 1.553195144523438e-04, 1.552681061196581e-04, 1.553045212217794e-04, 1.553045212217794e-04, -5.295704463602061e-04, -5.293638943106338e-04, -5.230365792572778e-04, -5.254666120393311e-04, -5.295106109493756e-04, -1.092389543044565e-03, -1.877921041005190e-03, -2.828970419084974e-03, -2.234250619846610e-03, -2.500983570177306e-03, -2.844728293704241e-03, -2.844728293704241e-03, -7.717960833602338e-03, -8.339139826319068e-03, -6.935918520053238e-04, -3.521070581893996e-04, -7.892015828747498e-03, -7.892015828747498e-03, 6.792514278705370e-09, 8.437357265062231e-09, 1.176020927477117e-06, 3.755452660998395e-11, 8.564068148114390e-09, 8.564068148115447e-09, 7.870076904068116e-03, 7.997103396726797e-03, 7.884038775497378e-03, 7.827353745426298e-04, 7.933534444984342e-03, 7.933534444984342e-03, -1.126088257071842e-03, -1.107518146544142e-03, -1.130859339293568e-03, -1.120469525483508e-03, -1.101549483788544e-03, -1.883866378245830e-03, -2.297472774177968e-03, 2.478102730284579e-02, -6.066537568550907e-03, 1.770057673012773e-03, 2.904822579774326e-03, 2.548910470401492e-03, -1.560885192826283e-04, -2.200708794160686e-03, -1.779999729764478e-04, 1.131592267619002e-03, -2.713113360177200e-04, -2.713113360177200e-04, -3.023074456143677e-08, 8.657217008448884e-11, 1.594340505093159e-10, -3.526653629042714e-05, -3.481798560312385e-08, 7.439549154146691e-11, 5.961332703951487e-01, 2.412118845561222e-01, 7.667341384037245e-03, 4.058554657713291e-01, 3.577170006232999e-01, 3.577170006232999e-01, 4.204498667744040e-01, -4.184669463196134e-03, 8.161778800600625e-03, 4.194904268478023e-02, 2.023168720153085e-02, 5.465042652873639e-03, 1.156583931948378e-02, -3.107291676449878e-03, -7.636132576774123e-03, -6.245058499013256e-03, -1.008130635394009e-02, -1.008130635394006e-02, -3.580298350339336e-03, 8.221757516343116e-07, 1.810758995612445e-06, -1.137129481495520e-02, -1.392407300421027e-04, -2.162358859618905e-05, 3.686035564380445e-09, 1.558325638108928e-13, 1.060105466628983e-11, -2.228562766487577e-05, 5.502272803695294e-11, 5.502272803699784e-11])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
