
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_br89_explicit_1_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89_explicit_1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.880877255036527e+01, -1.880880770083686e+01, -1.880903546106882e+01, -1.880851158354859e+01, -1.880877594236899e+01, -1.880877594236899e+01, -3.542720119819466e+00, -3.542665305798677e+00, -3.541458674103866e+00, -3.544112140083485e+00, -3.542724278276803e+00, -3.542724278276803e+00, -7.460842900635560e-01, -7.464507633943714e-01, -7.568925869396244e-01, -7.593973387917632e-01, -7.580436917904079e-01, -7.580436917904079e-01, -2.436199428790009e-01, -2.438478026693290e-01, -8.652660083845738e-01, -2.204863240987251e-01, -2.419292554578898e-01, -2.419292554578896e-01, -8.036326580311710e-02, -8.020046879542050e-02, -1.356474025545059e-01, -7.598854399853860e-02, -7.676728076806341e-02, -7.676728076806327e-02, -8.637140848241348e+00, -7.005693490189516e+00, -3.817007167443830e+00, -1.034424853260258e+01, -4.143971542305636e+00, -5.950850879281991e+00, -1.430856245435661e+00, -2.629764032950715e+00, -2.332559828684679e+00, -2.339967109522119e+00, -2.338020253331939e+00, -2.128113793946849e+00, -1.220224956165381e+00, -9.733543965614840e-01, -1.113685988076917e+00, -5.897330873282867e-01, -6.524621867891118e-01, -6.934641595152891e-01, -6.689301003452770e-02, -4.253652835585668e-01, -6.178674909562623e-02, -2.025557294495580e+00, -1.827519961132734e-01, -1.614941536132420e-01, -1.478214055235552e-01, -2.321522309021465e+00, -1.904029587943562e-03, -4.153711324644775e-02, -8.845506095855259e-02, -2.391785781528573e-03, -3.122481553511658e+01, -4.281194102556939e-01, -4.289870040018517e-01, -4.526431575731811e+00, -4.293496236296186e-01, -8.295525676847420e+01, -4.189152287667590e-01, -5.478029160490462e-01, -9.714739180128036e-01, -4.224133066879446e-01, -6.205107466380086e-01, -1.263444248006611e+00, -1.402847498572772e+00, -1.601834955472047e-01, -1.923453741771812e-01, -2.561224569820639e-01, -4.436812906755686e-01, -4.037342702029141e-01, -5.152280826603487e-01, -2.449157381418722e-02, -1.564371720743664e-01, -3.702987487993429e-01, -5.293409698635045e-02, -1.469434262845441e-01, -6.218240997834411e-03, -6.645260194515017e-04, -1.397502496359625e-03, -5.112208368887354e-02, -2.196444044372687e-03, -2.196442952995662e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_br89_explicit_1_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89_explicit_1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.806064131995428e+01, -2.806059740304183e+01, -2.806073823358929e+01, -2.806066783149474e+01, -2.806108759603808e+01, -2.806115706290821e+01, -2.805999245909798e+01, -2.805976170022999e+01, -2.806069814257837e+01, -2.806034761431022e+01, -2.806069814257837e+01, -2.806034761431022e+01, -4.530999474222013e+00, -4.531413891303489e+00, -4.531073649849498e+00, -4.531509330051014e+00, -4.533090950012632e+00, -4.533650607628679e+00, -4.530348105522346e+00, -4.530938405035152e+00, -4.530029524768547e+00, -4.532811887930287e+00, -4.530029524768547e+00, -4.532811887930287e+00, -8.464838134812805e-01, -8.514665828461291e-01, -8.446570245143520e-01, -8.507293036549787e-01, -8.226295226463435e-01, -8.156121192020523e-01, -8.235735416851168e-01, -8.257384707228898e-01, -8.608927798136902e-01, -7.905834502308250e-01, -8.608927798136902e-01, -7.905834502308250e-01, -2.178188648955353e-01, -2.242303416186082e-01, -2.197741689441842e-01, -2.273208435744732e-01, -9.794731080932538e-01, -1.016073924399780e+00, -1.773448268876050e-01, -1.786821885918682e-01, -2.255309754268049e-01, -1.400537513901298e-01, -2.255309754268045e-01, -1.400537513901300e-01, -2.820833369027183e-02, -2.900966407757071e-02, -2.868016442226785e-02, -2.970140149068157e-02, -7.609471012919088e-02, -7.755073955687949e-02, -2.729525940582988e-02, -2.754855880396041e-02, -2.784535464519829e-02, -2.462580400417220e-02, -2.784535464519828e-02, -2.462580400417218e-02, -8.496054435810798e+00, -8.219208106980233e+00, -7.456662616923374e+00, -7.448046058225249e+00, -5.116473591872845e+00, -5.110149381407050e+00, -9.291852770956098e+00, -9.364924296937218e+00, -6.021065165066787e+00, -6.024362308511585e+00, -7.035407345367052e+00, -6.995096019613803e+00, -1.910093727317709e+00, -1.910707726566536e+00, -2.686803579094866e+00, -2.685888688447246e+00, -2.462569913342802e+00, -2.468043028622411e+00, -2.476195555960775e+00, -2.485790652751478e+00, -2.508737157864189e+00, -2.494604041121209e+00, -2.376405476088893e+00, -2.369950699969551e+00, -1.056860862734130e+00, -1.103111259146840e+00, -9.781008077810430e-01, -9.804334573138842e-01, -9.993682985082082e-01, -9.814983491003619e-01, -7.522360853184532e-01, -7.769870563038432e-01, -8.072565487283465e-01, -7.661499182290615e-01, -8.184888927208334e-01, -7.776313823009536e-01, -8.906186702310633e-02, -8.992494057997569e-02, -3.424308908769487e-01, -3.427925630867721e-01, -8.009672726191064e-02, -8.440799617023985e-02, -2.613161927078310e+00, -2.612050385766540e+00, -1.313355940616924e-01, -1.385484970885482e-01, -1.062902389549714e-01, -1.097600532855769e-01, -9.710420905183906e-02, -9.560417281995225e-02, -1.579497044574344e+00, -1.553631299225260e+00, -2.459864961726814e-03, -2.605083828337354e-03, -5.530046944984977e-02, -5.561307929646064e-02, -6.020135717972176e-02, -4.405670578926684e-02, -2.512378330929179e-03, -3.450301759188286e-03, -2.136015515031538e+01, -2.149368232332458e+01, -5.697098512045211e-01, -5.719343699050207e-01, -5.708622119912420e-01, -5.730904287333441e-01, -3.264525775073454e+00, -3.173355260820615e+00, -5.713596863554565e-01, -5.735770635064635e-01, -5.718921844663306e+01, -5.734738189951486e+01, -5.576276824376148e-01, -5.594710215524845e-01, -6.235893290712885e-01, -6.260924957819426e-01, -8.869113807650281e-01, -8.931947996107876e-01, -6.129647681960794e-01, -6.000302461620450e-01, -7.063237485234225e-01, -7.089228422582381e-01, -1.067755926072286e+00, -1.068281791577175e+00, -1.243813259555384e+00, -1.239597868284148e+00, -2.131670225460448e-01, -2.143993475295070e-01, -2.553579752966286e-01, -2.579225538476204e-01, -3.443484037772849e-01, -3.458725771344869e-01, -4.321738552758023e-01, -4.330623695821275e-01, -4.044048554481615e-01, -4.055684903422926e-01, -5.766084290889995e-01, -5.815831456761600e-01, -3.255964083941508e-02, -3.279237507844443e-02, -8.955042091331798e-02, -9.869754794717295e-02, -4.271165368648535e-01, -4.332450264642895e-01, -6.854621089201532e-02, -7.240614985361220e-02, -9.319543281119483e-02, -9.177228260345995e-02, -8.135653630630277e-03, -8.430646725681961e-03, -8.850205819824595e-04, -8.870427825629829e-04, -1.800810240452094e-03, -1.915307191846731e-03, -5.967914023145575e-02, -6.769063337543917e-02, -2.379757828375417e-03, -3.162462451177115e-03, -2.379756847681373e-03, -3.162458272551071e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_br89_explicit_1_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89_explicit_1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.156767285628465e-08, 0.000000000000000e+00, -1.156768180423894e-08, -1.156740740862518e-08, 0.000000000000000e+00, -1.156748917037019e-08, -1.156683267111451e-08, 0.000000000000000e+00, -1.156658693749827e-08, -1.156982558237014e-08, 0.000000000000000e+00, -1.157040482201550e-08, -1.156750570756648e-08, 0.000000000000000e+00, -1.156907647701825e-08, -1.156750570756648e-08, 0.000000000000000e+00, -1.156907647701825e-08, -2.589743879166863e-05, 0.000000000000000e+00, -2.590539009982722e-05, -2.589796526001684e-05, 0.000000000000000e+00, -2.590650539995482e-05, -2.591673203006339e-05, 0.000000000000000e+00, -2.592129664308032e-05, -2.586900740283559e-05, 0.000000000000000e+00, -2.587505194158808e-05, -2.591019813415332e-05, 0.000000000000000e+00, -2.589010610715528e-05, -2.591019813415332e-05, 0.000000000000000e+00, -2.589010610715528e-05, -1.368279766780362e-02, 0.000000000000000e+00, -1.384410924997521e-02, -1.364000663745903e-02, 0.000000000000000e+00, -1.383267992357462e-02, -1.311097511439821e-02, 0.000000000000000e+00, -1.293140371173816e-02, -1.280226925578118e-02, 0.000000000000000e+00, -1.288087977360370e-02, -1.398808293291807e-02, 0.000000000000000e+00, -1.196455133158720e-02, -1.398808293291807e-02, 0.000000000000000e+00, -1.196455133158720e-02, -1.434314814799953e+00, 0.000000000000000e+00, -1.327253737737735e+00, -1.417987985155993e+00, 0.000000000000000e+00, -1.296597281061534e+00, -7.502184778780199e-03, 0.000000000000000e+00, -7.700344248826837e-03, -2.622942691319130e+00, 0.000000000000000e+00, -2.534442609548412e+00, -1.251815483486424e+00, 0.000000000000000e+00, -6.165485430629191e+00, -1.251815483486420e+00, 0.000000000000000e+00, -6.165485430629179e+00, -1.858965465608169e+04, 0.000000000000000e+00, -1.549038956604036e+04, -1.637912318874175e+04, 0.000000000000000e+00, -1.332664992009941e+04, -1.026911967928735e+02, 0.000000000000000e+00, -8.914701429975089e+01, -7.705530905750999e+04, 0.000000000000000e+00, -8.001547533903687e+04, -2.564699915719669e+04, 0.000000000000000e+00, -1.552234971411981e+05, -2.564699915719659e+04, 0.000000000000000e+00, -1.552234971411981e+05, -1.006593524118632e-06, 0.000000000000000e+00, -1.156318610960009e-06, -1.922073287770161e-06, 0.000000000000000e+00, -1.935392373715544e-06, -1.423766776438242e-09, 0.000000000000000e+00, -1.125892318420118e-09, -7.250480171496391e-07, 0.000000000000000e+00, -7.065280849731614e-07, -6.945149310364547e-07, 0.000000000000000e+00, -7.028008208912825e-07, -3.248710321353053e-06, 0.000000000000000e+00, -3.567703542805816e-06, -4.492336855895680e-09, 0.000000000000000e+00, -6.097193803860509e-09, -9.636550849066165e-05, 0.000000000000000e+00, -9.648749503143205e-05, -1.454661063306884e-04, 0.000000000000000e+00, -1.455230550754709e-04, -1.441623308585028e-04, 0.000000000000000e+00, -1.428493532762459e-04, -1.435374104660999e-04, 0.000000000000000e+00, -1.438745218253317e-04, -2.122398849697416e-04, 0.000000000000000e+00, -2.030158294326926e-04, -4.324466516778512e-03, 0.000000000000000e+00, -3.791433290672562e-03, -5.976624729018889e-03, 0.000000000000000e+00, -5.912430600872279e-03, -5.590709720803873e-03, 0.000000000000000e+00, -5.751443396176533e-03, -3.715113867604376e-02, 0.000000000000000e+00, -3.274186613259486e-02, -2.162900734070345e-02, 0.000000000000000e+00, -2.600578669174421e-02, -1.696273394730186e-02, 0.000000000000000e+00, -2.047357748960867e-02, -1.005321697605402e-02, 0.000000000000000e+00, -1.010820349828030e-02, -3.855608000231279e-01, 0.000000000000000e+00, -3.817321485914396e-01, -1.873800849960800e-04, 0.000000000000000e+00, -1.879116755562345e-04, -2.510696711284914e-04, 0.000000000000000e+00, -2.515432806190811e-04, -5.867870555062436e+00, 0.000000000000000e+00, -5.395065043506527e+00, -7.795718830834348e+00, 0.000000000000000e+00, -7.663235916180475e+00, -5.350280240275490e+04, 0.000000000000000e+00, -4.940911170399706e+04, -3.885062299100090e+02, 0.000000000000000e+00, -3.840194398023244e+02, -1.275422091810891e-07, 0.000000000000000e+00, -1.028786427667325e-08, -1.219100409954561e-02, 0.000000000000000e+00, -7.902244213920519e-03, -1.087016159272010e+05, 0.000000000000000e+00, -6.424564352714030e+04, -6.138336805710566e-06, 0.000000000000000e+00, -2.929452077937300e-05, -2.378832664528512e-05, 0.000000000000000e+00, -2.333779373188683e-05, -8.068866430169036e-12, 0.000000000000000e+00, -7.996933647143269e-12, -2.692302909183746e-14, 0.000000000000000e+00, -2.655061408785322e-14, -3.613538956934159e-04, 0.000000000000000e+00, -3.778948898636194e-04, -9.256673954366231e-11, 0.000000000000000e+00, -6.735300351957772e-11, -4.990933667312892e-06, 0.000000000000000e+00, -4.922894576008445e-06, -9.639373157117811e-14, 0.000000000000000e+00, -9.083878314923555e-14, -4.741390285590979e-02, 0.000000000000000e+00, -4.730179486988196e-02, -8.443221484898513e-03, 0.000000000000000e+00, -8.223922767126218e-03, -5.043955158405495e-03, 0.000000000000000e+00, -3.355009203269854e-03, -2.907616027048658e-02, 0.000000000000000e+00, -2.873792915361750e-02, -4.718596208276732e-03, 0.000000000000000e+00, -4.689846035466715e-03, -2.346671058381158e-03, 0.000000000000000e+00, -2.368926269360424e-03, -1.804886690640577e-05, 0.000000000000000e+00, -1.745603907342045e-05, -5.297238413324579e-06, 0.000000000000000e+00, -5.188649594630888e-06, -3.656123602649901e-04, 0.000000000000000e+00, -3.181963325443036e-04, -1.315834721684604e-01, 0.000000000000000e+00, -1.307376950692964e-01, -1.746102258395352e-01, 0.000000000000000e+00, -1.728563819093759e-01, -6.131009527191428e-02, 0.000000000000000e+00, -5.978231799361254e-02, -2.093188621820186e-02, 0.000000000000000e+00, -3.432858876818782e-02, -4.584735214839329e+01, 0.000000000000000e+00, -3.856070046895898e+01, -2.281090858914443e-01, 0.000000000000000e+00, -2.255667491093702e-01, -7.781942108613700e-04, 0.000000000000000e+00, -1.110072646392909e-03, -1.861913159005790e+01, 0.000000000000000e+00, -1.813064990818827e+01, -6.294329354167898e-05, 0.000000000000000e+00, -2.138734145320800e-04, -3.522940138609051e-02, 0.000000000000000e+00, -7.875610961273470e-03, -8.302978557288231e-05, 0.000000000000000e+00, -1.020134692894751e-04, -7.393257789467391e+00, 0.000000000000000e+00, -5.410283255383088e-01, -3.425902390058597e-04, 0.000000000000000e+00, -8.420070016488733e-04, -1.133096869334125e-04, 0.000000000000000e+00, -2.137192985460195e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_br89_explicit_1_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89_explicit_1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([-2.236406832259527e-04, -2.236399922663933e-04, -2.236377187817065e-04, -2.236378426798444e-04, -2.236339689686145e-04, -2.236308285189785e-04, -2.236673399186051e-04, -2.236734263541912e-04, -2.236387228615578e-04, -2.236605391041894e-04, -2.236387228615578e-04, -2.236605391041894e-04, -2.160737255287248e-03, -2.161312198233189e-03, -2.160801447338801e-03, -2.161412967368950e-03, -2.162732545953154e-03, -2.163247060325811e-03, -2.159163335766577e-03, -2.159758774941301e-03, -2.160717540912432e-03, -2.161466455679601e-03, -2.160717540912432e-03, -2.161466455679601e-03, -8.143136089813836e-03, -8.337503142667180e-03, -8.079827876444200e-03, -8.314273128432923e-03, -7.291337901157628e-03, -7.043870845872226e-03, -7.200079797040408e-03, -7.291474052629711e-03, -8.619525533276764e-03, -6.058307088450339e-03, -8.619525533276764e-03, -6.058307088450339e-03, -1.393799355806022e-02, -1.446203161877490e-02, -1.429501364599185e-02, -1.488931639552866e-02, -6.768118249866588e-03, -7.671303593222473e-03, -1.158591049635967e-02, -1.166490796287112e-02, -1.384904873591264e-02, -1.053202771632558e-02, -1.384904873591258e-02, -1.053202771632558e-02, -7.348266976173075e-03, -7.346960525701067e-03, -7.449711756690386e-03, -7.451522017491721e-03, -8.029876462977427e-03, -8.209038065055045e-03, -6.616324578120087e-03, -6.532741128839769e-03, -7.197544446220819e-03, -8.027609363529153e-03, -7.197544446220797e-03, -8.027609363529153e-03, -2.819662764312542e-04, -3.236744544728275e-04, -5.387115246132355e-04, -5.420445551545934e-04, -3.988381636387281e-07, -3.151641225293540e-07, -2.032045191912047e-04, -1.978713281994991e-04, -1.946024207095752e-04, -1.967800482918180e-04, -9.102855309043062e-04, -9.989357646934482e-04, -6.680989561689739e-08, -9.066353336765782e-08, -1.465044455782248e-03, -1.465701732411167e-03, -2.123501655017068e-03, -2.135374746543176e-03, -2.145184538169216e-03, -2.137157781181103e-03, -2.191200470976630e-03, -2.167617106344217e-03, -3.239992517599175e-03, -3.058641510351742e-03, -1.739764360211392e-03, -1.513238402805142e-03, -3.068361243074158e-03, -3.039540300951689e-03, -1.678787553333402e-03, -1.924620176651706e-03, -1.259879778171484e-02, -1.224749131884648e-02, -9.788930408071569e-03, -1.009635513884605e-02, -7.677052373471074e-03, -7.948558209292484e-03, -1.495727302858000e-05, -1.547344230346493e-05, -3.962247199386539e-03, -3.981927862362430e-03, -2.063805134269177e-07, -2.421517793532996e-07, -3.525875242642087e-03, -3.527767329367151e-03, -1.307883797581056e-02, -1.429507390686266e-02, -1.737579971076463e-02, -2.030494959822101e-02, -1.939562526516884e-03, -2.010410393033443e-03, -2.971501945715764e-05, -3.072576444829206e-05, -4.078886478672056e-15, -3.907905677989347e-16, -4.391771785121422e-06, -2.899594329811216e-06, -3.703776980888793e-03, -5.669803933749005e-03, -2.091508046479860e-13, -2.585298863588260e-12, -9.615865466200493e-06, -9.543574927589579e-06, -3.205652256015809e-12, -3.214435665689059e-12, -1.076145662008023e-14, -1.073735438189436e-14, -1.451695658140908e-04, -1.535829843369590e-04, -3.709364237773621e-11, -2.730570434193215e-11, -1.999983033884621e-06, -1.995799693730342e-06, -3.591157859925281e-14, -3.417880318778382e-14, -1.115662767751885e-02, -1.127553521395309e-02, -2.280894857242121e-03, -2.251362756690555e-03, -1.555627902035023e-03, -1.045686556520016e-03, -8.390243960032346e-03, -8.385401631268514e-03, -1.361602528257860e-03, -1.368443856409550e-03, -1.385729464310206e-03, -1.405720973302590e-03, -3.736271021416135e-07, -3.676683184463336e-07, -1.887287850333403e-07, -1.904781082240450e-07, -3.022203349329626e-05, -2.674127403259579e-05, -7.217054733080054e-03, -7.163079751494206e-03, -9.576974494380650e-03, -9.470750180468682e-03, -1.121401891475229e-02, -1.116202779732131e-02, -1.546615658916597e-06, -2.588894101914305e-06, -8.244901882048671e-03, -7.654483783562245e-03, -1.665115300245822e-02, -1.722172969279703e-02, -5.365809570341798e-07, -9.010763841189422e-07, -1.283827521240623e-02, -1.471714532745056e-02, -7.282397349420876e-11, -2.753473376278122e-10, -5.247078993933156e-11, -1.181057453267090e-11, -1.041816696793655e-12, -1.540019737559854e-12, -4.483515539154208e-03, -3.444587299787155e-04, -9.920325211628570e-12, -5.721926140596032e-11, -3.281088647483388e-12, -1.452346640906474e-11])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_br89_explicit_1_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89_explicit_1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([8.945627329038110e-04, 8.945599690655732e-04, 8.945508751268261e-04, 8.945513707193774e-04, 8.945358758744579e-04, 8.945233140759142e-04, 8.946693596744205e-04, 8.946937054167647e-04, 8.945548914462311e-04, 8.946421564167577e-04, 8.945548914462311e-04, 8.946421564167577e-04, 8.642949021148993e-03, 8.645248792932755e-03, 8.643205789355204e-03, 8.645651869475799e-03, 8.650930183812491e-03, 8.652988241303245e-03, 8.636653343066307e-03, 8.639035099765241e-03, 8.642870163649730e-03, 8.645865822718403e-03, 8.642870163649730e-03, 8.645865822718403e-03, 3.257254435925534e-02, 3.335001257066868e-02, 3.231931150577680e-02, 3.325709251373169e-02, 2.916535160463051e-02, 2.817548338348890e-02, 2.880031918816163e-02, 2.916589621051885e-02, 3.447810213310686e-02, 2.423322835380136e-02, 3.447810213310686e-02, 2.423322835380136e-02, 5.575197423224090e-02, 5.784812647509961e-02, 5.718005458396736e-02, 5.955726558211463e-02, 2.707247299946645e-02, 3.068521437288989e-02, 4.634364198543867e-02, 4.665963185148449e-02, 5.539619494365057e-02, 4.212811086530231e-02, 5.539619494365031e-02, 4.212811086530231e-02, 2.939306790469230e-02, 2.938784210280427e-02, 2.979884702676154e-02, 2.980608806996688e-02, 3.211950585190971e-02, 3.283615226022018e-02, 2.646529831248035e-02, 2.613096451535908e-02, 2.879017778488328e-02, 3.211043745411660e-02, 2.879017778488316e-02, 3.211043745411661e-02, 1.127865105725017e-03, 1.294697817891310e-03, 2.154846098452942e-03, 2.168178220618374e-03, 1.595352654554853e-06, 1.260656490117416e-06, 8.128180767648190e-04, 7.914853127979965e-04, 7.784096828383006e-04, 7.871201931672739e-04, 3.641142123617225e-03, 3.995743058773785e-03, 2.672395824675392e-07, 3.626541334706313e-07, 5.860177823128991e-03, 5.862806929644669e-03, 8.494006620068271e-03, 8.541498986172687e-03, 8.580738152676863e-03, 8.548631124724411e-03, 8.764801883906518e-03, 8.670468425376866e-03, 1.295997007039670e-02, 1.223456604140697e-02, 6.959057440845563e-03, 6.052953611220567e-03, 1.227344497229664e-02, 1.215816120380676e-02, 6.715150213333619e-03, 7.698480706606826e-03, 5.039519112685960e-02, 4.898996527538576e-02, 3.915572163228628e-02, 4.038542055538420e-02, 3.070820949388429e-02, 3.179423283716998e-02, 5.982909211432805e-05, 6.189376921385973e-05, 1.584898879754616e-02, 1.592771144944972e-02, 8.255220537076709e-07, 9.686071174126679e-07, 1.410350097056837e-02, 1.411106931746861e-02, 5.231535190324230e-02, 5.718029562745060e-02, 6.950319884305853e-02, 8.121979839288412e-02, 7.758250106067538e-03, 8.041641572133773e-03, 1.188600778286306e-04, 1.229030577931683e-04, 1.631554591468822e-14, 1.563162271195739e-15, 1.756708714048569e-05, 1.159837731924357e-05, 1.481510792355517e-02, 2.267921573499602e-02, 8.366032185919441e-13, 1.034119545435304e-11, 3.846346186480197e-05, 3.817429971035832e-05, 1.282260902541721e-11, 1.285774266275624e-11, 4.304582643775102e-14, 4.294941752757743e-14, 5.806782632563621e-04, 6.143319373478361e-04, 1.483745695109449e-10, 1.092228173677286e-10, 7.999932135538484e-06, 7.983198774921366e-06, 1.436463143970112e-13, 1.367152127511353e-13, 4.462651071007542e-02, 4.510214085581237e-02, 9.123579428968487e-03, 9.005451026762208e-03, 6.222511608140058e-03, 4.182746226080063e-03, 3.356097584012921e-02, 3.354160652507406e-02, 5.446410113031437e-03, 5.473775425638198e-03, 5.542917857240826e-03, 5.622883893210360e-03, 1.494508408566454e-06, 1.470673273785624e-06, 7.549151401333610e-07, 7.619124328961799e-07, 1.208881339731851e-04, 1.069650961303832e-04, 2.886821893232022e-02, 2.865231900597683e-02, 3.830789797752260e-02, 3.788300072187473e-02, 4.485607565900918e-02, 4.464811118928524e-02, 6.186462635666386e-06, 1.035557640765722e-05, 3.297960752819468e-02, 3.061793513424898e-02, 6.660461200983286e-02, 6.888691877118797e-02, 2.146323828136719e-06, 3.604305536475769e-06, 5.135310084962492e-02, 5.886858130980224e-02, 2.912958939768351e-10, 1.101389350511249e-09, 2.098831597573262e-10, 4.724229813068361e-11, 4.167266787174620e-12, 6.160078950239417e-12, 1.793406215661683e-02, 1.377834919914862e-03, 3.968130084651428e-11, 2.288770456238413e-10, 1.312435458993355e-11, 5.809386562524127e-11])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
