
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_24_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_24", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.184159290470322e+01, -2.184170327716094e+01, -2.184222940625837e+01, -2.184042722705674e+01, -2.184165075359247e+01, -2.184165075359247e+01, -2.998627051933700e+00, -2.998776995907892e+00, -3.003398442824648e+00, -3.001847799092696e+00, -2.998682938189136e+00, -3.897093928844376e+00, -4.955295243164348e-01, -6.368671425105334e-01, -5.998103454239301e-01, -6.133344990831507e-01, -6.378219445595106e-01, -6.378219445595106e-01, -1.682006295473695e-01, -1.722536346705552e-01, -5.673207978482684e-01, -1.008971986117718e-01, -1.693817859265710e-01, -1.693817859265710e-01, -7.089217946572079e-03, -7.426374812406461e-03, -3.051234495708246e-02, -3.397760116261889e-03, -7.348997568354392e-03, -7.348997568354392e-03, -6.095511702927749e+00, -6.095310896763781e+00, -6.095484482157737e+00, -5.488183549098498e+00, -6.095419585654894e+00, -6.095419585654894e+00, -1.611613189923558e+00, -1.636595432425829e+00, -1.601114719468200e+00, -1.620677838965830e+00, -1.642431645342424e+00, -2.151860694655027e+00, -6.796052497562117e-01, -7.447612568365334e-01, -6.320810411159460e-01, -6.771203652522109e-01, -7.111932469448048e-01, -5.841423052767593e-01, -6.636952926608509e-02, -1.527043989069818e-01, -6.551789590791927e-02, -2.263945626347028e+00, -8.487213777458413e-02, -8.487213777458413e-02, -3.233190545654320e-03, -3.746163241334545e-03, -2.807832713397307e-03, -4.136406646587180e-02, -3.366717606456271e-03, -3.413281615371011e-03, -6.791218362054057e-01, -6.841756379348923e-01, -6.526374476864850e-01, -6.811387870705058e-01, -6.818568816294712e-01, -6.818568816294712e-01, -6.605229789134414e-01, -5.862089830805673e-01, -6.210820942134038e-01, -6.434360495075944e-01, -6.333259724207585e-01, -5.404354637753395e-01, -7.821220497622773e-01, -1.658616060883143e-01, -2.663475737995247e-01, -2.906828998908000e-01, -3.229028478650265e-01, -3.229028478650264e-01, -3.961397454764717e-01, -2.820097455951684e-02, -3.845981138477856e-02, -3.731729449806070e-01, -5.387624498980401e-02, -5.725881093207232e-02, -8.307233320095073e-03, -1.025444631997842e-03, -1.948096659082492e-03, -5.461880096193681e-02, -2.900760352866434e-03, -2.900760352866429e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_24_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_24", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.266593509159895e+01, -3.266599948325698e+01, -3.266634651062597e+01, -3.266528929374584e+01, -3.266596856975082e+01, -3.266596856975082e+01, -5.036457159531786e+00, -5.036674290234035e+00, -5.043353844466797e+00, -5.041177374686388e+00, -5.036541397429048e+00, -5.283586524456640e+00, -7.802582629028292e-01, -9.779553353313075e-01, -9.250697483438579e-01, -9.447225178616167e-01, -9.792436437289466e-01, -9.792436437289466e-01, -2.594520111791316e-01, -2.655220115188002e-01, -8.357300191164637e-01, -1.481079100844300e-01, -2.612362605850052e-01, -2.612362605850052e-01, -9.986595278063460e-03, -1.046195624240719e-02, -4.317028744334887e-02, -4.784714671070987e-03, -1.035295762944226e-02, -1.035295762944227e-02, -7.237915989787185e+00, -7.240717196240705e+00, -7.238217672209737e+00, -7.901574234717176e+00, -7.239325547709420e+00, -7.239325547709420e+00, -2.705163731633991e+00, -2.750441821709172e+00, -2.685655723347228e+00, -2.721713591190490e+00, -2.760885718278686e+00, -3.030006729994503e+00, -8.368512112862621e-01, -8.731851523501868e-01, -8.191433511601713e-01, -8.147948463137943e-01, -8.519611520215269e-01, -9.231581444037079e-01, -8.844296660149470e-02, -2.318959426354775e-01, -8.734852283534660e-02, -2.706073372151378e+00, -1.240172316656597e-01, -1.240172316656597e-01, -4.310783709396947e-03, -5.275443862187998e-03, -3.954097312545935e-03, -5.502476550066395e-02, -4.488800613683319e-03, -4.806642219074861e-03, -8.707424965594186e-01, -8.495868596163110e-01, -8.945172614532592e-01, -8.625538869379772e-01, -8.595778888442807e-01, -8.595778888442807e-01, -8.365825361642761e-01, -7.312873785393065e-01, -7.362597345780134e-01, -7.559889675930410e-01, -7.433003149028062e-01, -8.203017864981905e-01, -9.206672464212686e-01, -2.490428975295809e-01, -4.074550558672755e-01, -4.883294430159256e-01, -4.766180973492829e-01, -4.766180973492827e-01, -6.637461443507776e-01, -3.986594963183111e-02, -5.453497555457062e-02, -5.018587291700778e-01, -7.172746929730728e-02, -8.214281369457234e-02, -1.170172344546981e-02, -1.443954996011359e-03, -2.743232739447179e-03, -7.835067806433185e-02, -4.084859151388532e-03, -4.084859151388521e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_24_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_24", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.121618390867835e-08, -2.121612179499492e-08, -2.121567965088604e-08, -2.121671477181094e-08, -2.121615234146358e-08, -2.121615234146358e-08, -1.761676099543490e-05, -1.761993992243158e-05, -1.771306275957774e-05, -1.767134941812433e-05, -1.761730822785897e-05, -1.591073576226918e-05, -5.644078331376288e-03, -3.676456352229158e-03, -3.083113323190179e-03, -3.395578318142469e-03, -3.692452341896995e-03, -3.692452341896995e-03, -4.776628493323342e-01, -4.982857046713916e-01, -1.586465660438233e-03, -5.128834507154082e-02, -4.831736984383651e-01, -4.831736984383651e-01, 6.085255699089031e+01, 5.519260724637410e+01, 1.729616695014627e+00, 1.589268731968683e+02, 5.763961785383852e+01, 5.763961785383852e+01, -6.609443359778249e-06, -6.612608902031184e-06, -6.609820026227565e-06, -6.493304593707421e-06, -6.611005933533074e-06, -6.611005933533074e-06, -1.455401280872744e-04, -1.470284174129041e-04, -1.446886800192579e-04, -1.459936420930313e-04, -1.476283224597320e-04, -1.271965894500013e-04, -3.001626802040872e-02, -2.831125378287925e-02, -3.054006512997298e-02, -3.428004684836930e-02, -2.884906277573515e-02, -2.892537607602969e-02, -7.668782889184582e-01, -1.393980303123506e-01, -8.676726657318654e-01, -2.843346577023250e-04, -4.523110859809050e-02, -4.523110859809050e-02, -3.101784553995232e+02, 1.468109533337121e+02, 5.179949389266166e+02, -1.625357271195871e+00, -2.889558064808216e+02, 1.963233151092096e+02, -4.135692295860362e-02, -4.126631027486715e-02, -4.087675946205156e-02, -4.135113876347910e-02, -4.134025177867508e-02, -4.134025177867508e-02, -4.675362092455260e-02, -5.073009563026128e-02, -5.264570947594475e-02, -5.206166722341038e-02, -5.262937706583788e-02, -5.195086280386589e-02, -2.197180248340846e-02, -2.681765826444104e-01, -1.440066111962526e-01, -1.439220809200965e-01, -1.482362315860184e-01, -1.482362315860184e-01, -6.401281753154017e-02, 2.010094330424421e+00, 9.184076739692928e-01, -2.000156174624106e-01, -1.454638471947203e+00, 2.725647694986225e-01, 2.773382406946044e+01, 2.063704143297562e+03, 8.012531581888613e+02, 3.295429463448188e-01, 3.223604327093910e+02, 3.223604327093913e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_24_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_24", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.077773421361122e-03, 2.077770851791722e-03, 2.077755438515913e-03, 2.077797819006815e-03, 2.077772096018908e-03, 2.077772096018908e-03, 7.816623021323490e-03, 7.818522382295313e-03, 7.875342010422653e-03, 7.852719995898746e-03, 7.817113091400213e-03, 1.764808251238123e-02, 1.117543838778785e-02, 3.956070454122093e-02, 3.194692937328155e-02, 3.535108278807100e-02, 3.976558192277826e-02, 3.976558192277826e-02, 1.106914252874783e-01, 1.185026101702451e-01, 3.449685803254793e-03, 1.110303678291699e-02, 1.128722418244580e-01, 1.128722418244580e-01, -1.005275879459286e-03, -1.046346669544274e-03, -1.801071205386308e-03, -2.936067665770437e-04, -1.058903296591696e-03, -1.058903296591682e-03, 1.084612873541361e-02, 1.081870069988381e-02, 1.084310637803187e-02, 8.468630754972362e-03, 1.083236323294658e-02, 1.083236323294658e-02, 1.068351568353363e-02, 1.120304299050657e-02, 1.045040642551472e-02, 1.086644452772659e-02, 1.134090866060256e-02, 2.794276923958934e-02, 1.197156787795012e-01, 1.004673636565085e-01, 1.208970510905734e-01, 1.206178264457863e-01, 1.145744499054134e-01, 6.855625815483121e-02, -2.979156309700384e-05, 3.916269804468824e-02, -5.627447940861611e-06, 3.593153492681603e-02, 9.626431693078075e-03, 9.626431693078075e-03, -1.178025225728132e-07, -3.631813269754139e-04, -5.393616605765441e-04, -7.814271655501531e-05, -1.356253984413632e-07, -3.674568474857461e-04, 6.865623722789845e-02, 7.784776605174668e-02, 6.769196664906402e-02, 7.202923174849195e-02, 7.330908215260215e-02, 7.330908215260215e-02, 7.422780195790708e-02, 1.374075302716989e-01, 1.295384148593502e-01, 1.115393277667600e-01, 1.217845075302921e-01, 8.215122718816677e-02, 1.007040355491342e-01, 1.635811503954350e-02, 1.061821752436608e-01, 6.165661543430583e-02, 1.413151634585917e-01, 1.413151634585917e-01, 6.387064495542120e-02, -1.745250862878460e-03, -1.615004811822781e-03, 1.885285210548078e-01, -8.421743401253398e-05, 1.149362791611529e-03, -7.391314910812033e-04, -1.050297504298698e-04, -2.793000851743035e-04, 1.179875592677776e-03, -3.704981775438410e-04, -3.704981775438393e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
