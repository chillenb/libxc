
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_24_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_24", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.501089539407287e+01, -2.501095359534739e+01, -2.501136974609534e+01, -2.501042171533179e+01, -2.501092467362464e+01, -2.501092467362464e+01, -3.405375832656230e+00, -3.405540148562507e+00, -3.410771412452760e+00, -3.411440128325153e+00, -3.405422094617828e+00, -3.405422094617828e+00, -5.544373647048962e-01, -5.536656567722623e-01, -5.349996132677490e-01, -5.479097388475531e-01, -5.541679813111596e-01, -5.541679813111596e-01, -1.649371658095322e-01, -1.683282177623439e-01, -5.969268289018034e-01, -9.941474025121139e-02, -1.658888373345009e-01, -1.658888373345009e-01, -7.099433952427550e-03, -7.439783402553698e-03, -3.071819076552943e-02, -3.449404525456159e-03, -7.360555467570624e-03, -7.360555467570622e-03, -6.091477623300300e+00, -6.091319480136415e+00, -6.091506001407551e+00, -6.091380698684903e+00, -6.091338417420396e+00, -6.091338417420396e+00, -2.057268843377611e+00, -2.094090336533680e+00, -2.050498277822165e+00, -2.079924584384952e+00, -2.090638707267519e+00, -2.090638707267519e+00, -6.240911373957420e-01, -6.715550141408571e-01, -5.618897429001544e-01, -5.870503932353370e-01, -6.624966041735604e-01, -6.624966041735604e-01, -7.111741865831675e-02, -1.515062208530321e-01, -7.036627075709670e-02, -1.938344926963317e+00, -8.458625916803247e-02, -8.458625916803247e-02, -3.311528446532621e-03, -3.796278876458223e-03, -2.828788506451050e-03, -4.323839795161873e-02, -3.465390713141774e-03, -3.465390713141774e-03, -6.695601355815554e-01, -6.750667012239281e-01, -6.732636812236420e-01, -6.717355622044368e-01, -6.725110013471849e-01, -6.725110013471849e-01, -6.420644635445611e-01, -5.793301006730981e-01, -6.104287609200536e-01, -6.292386468855162e-01, -6.202593886622505e-01, -6.202593886622505e-01, -6.903017776270963e-01, -2.061060108347301e-01, -2.595143189674396e-01, -3.511948184199080e-01, -3.085738832734661e-01, -3.085738832734660e-01, -4.836173763293447e-01, -2.832825005922513e-02, -3.872510069824865e-02, -3.380703480681916e-01, -5.739932169671761e-02, -5.739932169671760e-02, -8.428944425115506e-03, -1.042513392973579e-03, -1.959192149990787e-03, -5.475456991295856e-02, -2.945897118371488e-03, -2.945897118371482e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_24_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_24", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.977812698459165e+01, -2.977818819416335e+01, -2.977841539082218e+01, -2.977740538997323e+01, -2.977815976019960e+01, -2.977815976019960e+01, -5.085788860940541e+00, -5.085890379005350e+00, -5.089124528598453e+00, -5.088822194138809e+00, -5.085837726627633e+00, -5.085837726627633e+00, -8.382841291414985e-01, -8.366057273589544e-01, -7.965279973896616e-01, -8.199818208188376e-01, -8.376962977236764e-01, -8.376962977236764e-01, -2.509994714867687e-01, -2.558610278862085e-01, -8.688881341090896e-01, -1.384411206206633e-01, -2.523279446981858e-01, -2.523279446981858e-01, -9.967688637441578e-03, -1.043693262895698e-02, -4.254213596396210e-02, -4.655510972998275e-03, -1.033145618895631e-02, -1.033145618895630e-02, -7.242325615477459e+00, -7.245092124343235e+00, -7.242567844081340e+00, -7.244721204883350e+00, -7.243792778833236e+00, -7.243792778833236e+00, -2.952441969225118e+00, -2.979896817135215e+00, -2.949035492084287e+00, -2.971487624648958e+00, -2.975190890336522e+00, -2.975190890336522e+00, -8.520408033241756e-01, -9.390765603476008e-01, -8.128658950292958e-01, -8.599694090269642e-01, -8.770118017261883e-01, -8.770118017261883e-01, -9.905026363215907e-02, -2.268422369276707e-01, -9.811316290258185e-02, -2.891587626102142e+00, -1.203086476920790e-01, -1.203086476920790e-01, -4.545337122263355e-03, -5.160107325431420e-03, -3.912664677292095e-03, -5.874664179334266e-02, -4.675407209928508e-03, -4.675407209928509e-03, -8.831805760213215e-01, -8.610131475801017e-01, -8.685051962836768e-01, -8.746483678511530e-01, -8.715400162927749e-01, -8.715400162927749e-01, -8.602511863965315e-01, -7.319988158727042e-01, -7.427800756743637e-01, -7.698402430460733e-01, -7.538215343851759e-01, -7.538215343851760e-01, -9.900277324591854e-01, -3.153147787653114e-01, -3.932931679156877e-01, -5.145997307219431e-01, -4.571782694040107e-01, -4.571782694040105e-01, -6.734839486845945e-01, -3.953023500388501e-02, -5.350510903670042e-02, -4.882893891240204e-01, -8.011398402982231e-02, -8.011398402982232e-02, -1.139258910243606e-02, -1.395120064957034e-03, -2.722082052590724e-03, -7.628594502182516e-02, -3.969087093078956e-03, -3.969087093078950e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_24_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_24", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.154214991925449e-08, -2.154209616880758e-08, -2.154169497085947e-08, -2.154259472360519e-08, -2.154212271006268e-08, -2.154212271006268e-08, -1.705384551427344e-05, -1.705723649306707e-05, -1.715654695843998e-05, -1.710832824816604e-05, -1.705448995645174e-05, -1.705448995645174e-05, -5.021953920972847e-03, -4.997170578337980e-03, -4.346087862142992e-03, -4.610067024686935e-03, -5.013622665632057e-03, -5.013622665632057e-03, -5.215970497877216e-01, -5.465665665607939e-01, -1.462187700930059e-03, -1.978458331489965e-01, -5.289209104740432e-01, -5.289209104740432e-01, 5.825460013498888e+01, 5.221021941336497e+01, 1.125236398678742e+00, 5.036559572541316e+01, 5.493842795192076e+01, 5.493842795192067e+01, -6.608790008257478e-06, -6.611956603945082e-06, -6.609175040641302e-06, -6.611632374939431e-06, -6.610341936710660e-06, -6.610341936710660e-06, -1.269231389331781e-04, -1.292344708558646e-04, -1.251880144030651e-04, -1.271296412439312e-04, -1.306868126743351e-04, -1.306868126743351e-04, -3.045017081531414e-02, -2.803059399343638e-02, -3.177325627086082e-02, -3.453509201234327e-02, -2.898789173106308e-02, -2.898789173106308e-02, -5.331391999888907e-02, -1.589106306903920e-01, -7.506849676473938e-02, -2.852495191731928e-04, -1.605335134027507e-01, -1.605335134027507e-01, 1.339141447331741e+02, 6.777693076032052e+01, 3.911792032419230e+02, 4.346687354416927e-02, 6.053511571727057e+01, 6.053511571727043e+01, -4.120603945796814e-02, -4.114019185702524e-02, -4.118996561169940e-02, -4.120910205592714e-02, -4.120157145956233e-02, -4.120157145956233e-02, -4.642417299432477e-02, -5.089577690281634e-02, -5.268501834852920e-02, -5.193855382144393e-02, -5.258882069671809e-02, -5.258882069671807e-02, -2.184896140267081e-02, -1.544262627991845e-01, -1.548346632745834e-01, -1.320353898861421e-01, -1.583017975455541e-01, -1.583017975455541e-01, -6.056426876464010e-02, 1.614622576330516e+00, 4.841265941101063e-01, -2.105345424847531e-01, 1.623287759693240e-02, 1.623287759693097e-02, 9.323998251881527e+00, 2.257540415544100e+02, 6.585424487438358e+02, -9.434483731524754e-04, 8.955706049862124e+01, 8.955706049862134e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_24_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_24", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_24_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_24", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.895299251731963e-03, 2.895272897797024e-03, 2.895182067760467e-03, 2.895613371247346e-03, 2.895285126154929e-03, 2.895285126154929e-03, 1.212701313083121e-02, 1.212923400372750e-02, 1.219729054541593e-02, 1.219642657631287e-02, 1.212740241717629e-02, 1.212740241717629e-02, 2.305950638774568e-02, 2.293576099912793e-02, 2.001952006841637e-02, 2.276009720175544e-02, 2.301872461037887e-02, 2.301872461037887e-02, 1.035379741366066e-01, 1.096515447932556e-01, 6.467758319563607e-03, 1.135374396672776e-02, 1.051528718487245e-01, 1.051528718487245e-01, -9.424861464852024e-04, -9.639253020458065e-04, -8.867021017434584e-04, -6.430321274574878e-05, -9.863780493398085e-04, -9.863780493398033e-04, 1.082983665481313e-02, 1.080262857356992e-02, 1.082704401242747e-02, 1.080589065747849e-02, 1.081590552493317e-02, 1.081590552493317e-02, 2.512649783579038e-02, 2.603686631175847e-02, 2.500921782826256e-02, 2.576184895090784e-02, 2.586835234877061e-02, 2.586835234877061e-02, 9.662545497962610e-02, 7.832999904611389e-02, 8.852354086419277e-02, 8.386289829353465e-02, 9.627776366067078e-02, 9.627776366067078e-02, 3.530526560558804e-03, 3.805309278367534e-02, 4.136986176597706e-03, 2.419427468062564e-02, 1.044348691832178e-02, 1.044348691832178e-02, -1.844947265930078e-04, -1.263734610975795e-04, -3.605518032113901e-04, 5.003982697986824e-04, -7.781528053433497e-05, -7.781528053433370e-05, 6.664147594948508e-02, 7.560872469852314e-02, 7.241492706169989e-02, 6.992609251804502e-02, 7.117308459481769e-02, 7.117308459481769e-02, 6.986858435792165e-02, 1.334975353897920e-01, 1.243105667985585e-01, 1.059141879347118e-01, 1.159533586532535e-01, 1.159533586532536e-01, 7.402404959190015e-02, 6.924063412583831e-02, 9.783308088022259e-02, 1.224840897990364e-01, 1.239581596518505e-01, 1.239581596518503e-01, 1.199690927248269e-01, -1.234883567333970e-03, -4.304088830274151e-04, 1.445096005026310e-01, 2.635970944480086e-03, 2.635970944480040e-03, -1.711514946766095e-04, -6.957532101219679e-06, -2.103030318029281e-04, 2.822277912716188e-03, -6.936473611283767e-05, -6.936473611283931e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
