
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_17_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_17", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.166076463569760e+01, -2.166087625218274e+01, -2.166140745733385e+01, -2.165958511291275e+01, -2.166082314236869e+01, -2.166082314236869e+01, -3.059335073142071e+00, -3.059436724461965e+00, -3.062612655371864e+00, -3.061625399751489e+00, -3.059377841379870e+00, -3.922706203077875e+00, -5.476576487900426e-01, -6.853630374688747e-01, -6.549362949818182e-01, -6.654291673869216e-01, -6.861365276445740e-01, -6.861365276445740e-01, -1.839266418940669e-01, -1.874756028714298e-01, -6.544727579278040e-01, -1.204757467520664e-01, -1.849703140859734e-01, -1.849703140859734e-01, -8.858703084233368e-03, -9.279543027431288e-03, -3.791998715436042e-02, -4.247846573024419e-03, -9.182848931239445e-03, -9.182848931239444e-03, -6.037456023672077e+00, -6.037817475282547e+00, -6.037490836333294e+00, -5.457300174233856e+00, -6.037645306207403e+00, -6.037645306207403e+00, -1.674086032422997e+00, -1.693769615120376e+00, -1.665976598703186e+00, -1.681269494301213e+00, -1.698234452454109e+00, -2.189382851428026e+00, -6.723000442019342e-01, -7.347667284459597e-01, -6.301768737189600e-01, -6.681914739323885e-01, -7.015510130709102e-01, -5.803650432021266e-01, -8.300960307919202e-02, -1.750648308239484e-01, -8.185395206136391e-02, -2.232876633261549e+00, -1.018306831845771e-01, -1.018306831845771e-01, -4.119873086263747e-03, -4.683289386582466e-03, -3.510189045763957e-03, -5.233580505669837e-02, -4.289995000333909e-03, -4.267169369633598e-03, -6.820764825233147e-01, -6.833986100222129e-01, -6.542898213784963e-01, -6.826622042290793e-01, -6.828561430323586e-01, -6.828561430323586e-01, -6.620185263838559e-01, -5.808935558483601e-01, -6.122569983672720e-01, -6.355439378913177e-01, -6.244227862175525e-01, -5.358279731324527e-01, -7.709297483465114e-01, -1.890756268786058e-01, -2.847629749827211e-01, -3.012400583261280e-01, -3.350850302591069e-01, -3.350850302591069e-01, -4.024090843310167e-01, -3.508418160408142e-02, -4.767050354323132e-02, -3.748989438002492e-01, -6.756730535861263e-02, -7.004837013593840e-02, -1.038154109486778e-02, -1.282085956968291e-03, -2.435573955541136e-03, -6.682311087526485e-02, -3.626481378916153e-03, -3.626481378916147e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_17_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_17", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.252880079714396e+01, -3.252889224826184e+01, -3.252935720766707e+01, -3.252785972859187e+01, -3.252884853262383e+01, -3.252884853262383e+01, -4.767378923786904e+00, -4.767623422747810e+00, -4.775133781245086e+00, -4.772610199402989e+00, -4.767469475308301e+00, -4.799313374109411e+00, -7.582828509172689e-01, -8.919868800989130e-01, -8.546391989337158e-01, -8.675893272360499e-01, -8.929031032671079e-01, -8.929031032671079e-01, -2.400413623489049e-01, -2.445484707187851e-01, -8.595027956728425e-01, -1.550511767262269e-01, -2.413741273446033e-01, -2.413741273446033e-01, -1.135305562152282e-02, -1.189234026108816e-02, -4.858188862980443e-02, -5.444141742790549e-03, -1.176841956723389e-02, -1.176841956723388e-02, -7.282466471944589e+00, -7.286508082344383e+00, -7.282906101112375e+00, -7.939011010085222e+00, -7.284500211628330e+00, -7.284500211628330e+00, -2.549034028739983e+00, -2.592512232847465e+00, -2.530528632151252e+00, -2.564832789097033e+00, -2.602681249292593e+00, -2.726743990008578e+00, -7.918129996181510e-01, -8.668212687049719e-01, -7.560581865943160e-01, -7.825267119787498e-01, -8.210293410850883e-01, -9.027932492193476e-01, -1.078871518978288e-01, -2.274568281924924e-01, -1.062716029869749e-01, -2.612474624604314e+00, -1.309254994390610e-01, -1.309254994390610e-01, -5.492583570477821e-03, -6.002200907841153e-03, -4.498726467143919e-03, -6.897971894783049e-02, -5.719331371677580e-03, -5.468896792873540e-03, -8.820070812179241e-01, -8.606157971034130e-01, -9.046412321082220e-01, -8.739219801560899e-01, -8.709288703645135e-01, -8.709288703645135e-01, -8.476070021644825e-01, -6.870031106760214e-01, -7.161509497229501e-01, -7.550167713374686e-01, -7.333762570962358e-01, -8.134005672666140e-01, -9.031713933337504e-01, -2.514359350363276e-01, -3.698484273667212e-01, -4.602220679789890e-01, -4.272019046720553e-01, -4.272019046720553e-01, -6.298034224722759e-01, -4.495040087611921e-02, -6.107107144323373e-02, -4.570009035856226e-01, -8.806471078755200e-02, -8.979641752534567e-02, -1.330476886578818e-02, -1.643161931467467e-03, -3.121499414542343e-03, -8.566134124115596e-02, -4.647782823354688e-03, -4.647782823354679e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_17_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_17", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.899590150481220e-08, -1.899587998311347e-08, -1.899563304010651e-08, -1.899600512973247e-08, -1.899589120129470e-08, -1.899589120129470e-08, -1.413887602558580e-05, -1.414191821781905e-05, -1.423147111218368e-05, -1.419224174191599e-05, -1.413945146511408e-05, -1.863947556914550e-05, -3.775220380286189e-03, -5.528200228900082e-03, -4.966001274279135e-03, -5.299390246323958e-03, -5.543231462684662e-03, -5.543231462684662e-03, -7.751639128769775e-01, -7.896456008730444e-01, -8.862183564119109e-04, -4.094371219659406e-01, -7.787127215733821e-01, -7.787127215733821e-01, -5.442439470176714e+01, -4.951949358623655e+01, -2.171292372186395e+00, -1.380133352626862e+02, -5.171787850264086e+01, -5.171787850264084e+01, -6.609341730871640e-06, -6.610467535032220e-06, -6.609492357289225e-06, -5.943867641443581e-06, -6.609880193087691e-06, -6.609880193087691e-06, -1.126793832684731e-04, -1.146662403862309e-04, -1.116477756525599e-04, -1.133277651099610e-04, -1.153453496776522e-04, -1.549322990678005e-04, -3.251336284953448e-02, -2.888153438955329e-02, -3.442929752041623e-02, -3.641532956735441e-02, -3.051637976104989e-02, -2.502268000451051e-02, 7.510748301115500e-02, -3.257492598268338e-01, 6.491481240314896e-02, -3.001121679996942e-04, -6.581621820218461e-01, -6.581621820218461e-01, 2.384597638421993e+02, -1.277094498374467e+02, -4.509255590674770e+02, 6.945606204520610e-01, 2.220449499361798e+02, -1.706943908389037e+02, -4.024939876603370e-02, -4.047821362095706e-02, -3.861164933127464e-02, -4.035560965378051e-02, -4.038877174822876e-02, -4.038877174822876e-02, -4.562628956302514e-02, -5.551532789180103e-02, -5.506474371054006e-02, -5.267792567900405e-02, -5.410721431109152e-02, -4.611173264900661e-02, -2.274770184201783e-02, -1.595077083379360e-01, -2.105699643077726e-01, -1.119475545793571e-01, -1.935282029658606e-01, -1.935282029658607e-01, -5.184725270565318e-02, -2.365292194237060e+00, -1.359942923476528e+00, -2.326004852671100e-01, 2.323123722427914e-01, -1.037428140934511e+00, -2.468447152949789e+01, -1.784690220178804e+03, -6.943372742483033e+02, -1.246916490233638e+00, -2.800417009726415e+02, -2.800417009726418e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_17_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_17", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.138732152715826e-03, 2.138745824641459e-03, 2.138801242984252e-03, 2.138579386295809e-03, 2.138739384499139e-03, 2.138739384499139e-03, 5.181523003421456e-03, 5.183516686333552e-03, 5.243419101327176e-03, 5.219778895620288e-03, 5.182051758333426e-03, 1.665876034382939e-02, 2.624160147199964e-03, 3.941574603391879e-02, 3.275917161275724e-02, 3.576373894387221e-02, 3.959418408178593e-02, 3.959418408178593e-02, 1.138769524080837e-01, 1.206664150499071e-01, -5.710543482840985e-04, 2.069718514146983e-02, 1.157717066075265e-01, 1.157717066075265e-01, 9.217540124200603e-04, 9.647219354316428e-04, 3.079609307628114e-03, 2.558346345427723e-04, 9.763940009458830e-04, 9.763940009458727e-04, 1.260263031449834e-02, 1.258817295264836e-02, 1.260104520079839e-02, 9.608634964867016e-03, 1.259537066572081e-02, 1.259537066572081e-02, 6.085802055568918e-03, 6.587069416920898e-03, 5.866613723337823e-03, 6.261274786355781e-03, 6.720776605144197e-03, 2.632191531379170e-02, 1.172052600840720e-01, 1.087211835194136e-01, 1.153418942949148e-01, 1.206390052263466e-01, 1.152528078310700e-01, 6.127382511662757e-02, -1.672478318150366e-03, 4.761232001270215e-02, -1.860520544398671e-03, 3.625733685422699e-02, 2.010846470334785e-02, 2.010846470334785e-02, -4.991281465934466e-07, 3.173917610974249e-04, 4.719496399498530e-04, -4.918196653422082e-04, -5.747873925504789e-07, 3.208510837587728e-04, 9.567841841945815e-02, 1.012716949852429e-01, 8.972595055501799e-02, 9.776223439957339e-02, 9.854333895033771e-02, 9.854333895033771e-02, 1.007810688144275e-01, 1.333801329604666e-01, 1.326126769585264e-01, 1.237955307434611e-01, 1.291475686152045e-01, 8.152686344767629e-02, 1.051211075031377e-01, -3.899221675736016e-04, 1.046478606039103e-01, 3.584183379232094e-02, 1.344074046505889e-01, 1.344074046505891e-01, 4.393962199556228e-02, 2.630000989352063e-03, 3.918244380465117e-03, 1.781844606668313e-01, -1.586090256716524e-03, 1.008849908881895e-02, 6.720588728648754e-04, 9.086272383645406e-05, 2.424776094006225e-04, 1.052479252584413e-02, 3.230358991502889e-04, 3.230358991502895e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
