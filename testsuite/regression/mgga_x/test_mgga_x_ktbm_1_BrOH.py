
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_1_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.081844297612730e+01, -2.081852781698251e+01, -2.081894035402832e+01, -2.081755391458249e+01, -2.081848738838288e+01, -2.081848738838288e+01, -3.151268450084864e+00, -3.151312499932087e+00, -3.152757745009334e+00, -3.152448227765591e+00, -3.151295666112369e+00, -3.876935752403770e+00, -5.997871896485190e-01, -7.448841873288221e-01, -7.235078267792282e-01, -7.299447590204897e-01, -7.454042631560365e-01, -7.454042631560365e-01, -2.035028546655776e-01, -2.063727233556612e-01, -7.327500922821835e-01, -1.440597308364534e-01, -2.043621932849215e-01, -2.043621932849215e-01, -1.089971250686290e-02, -1.141719542765993e-02, -4.651481838137910e-02, -5.227872314377302e-03, -1.129822117718936e-02, -1.129822117718936e-02, -5.577529287605381e+00, -5.577627043118564e+00, -5.577535002192395e+00, -5.179779301744720e+00, -5.577584879241130e+00, -5.577584879241130e+00, -1.755873116039536e+00, -1.770538070956001e+00, -1.749968663147039e+00, -1.761301429165318e+00, -1.773661701485052e+00, -2.204428254704477e+00, -6.393042993363203e-01, -6.818355903964436e-01, -6.110924485843582e-01, -6.297187062789733e-01, -6.599276546496023e-01, -5.701633099020375e-01, -9.595619654683095e-02, -2.027457623095825e-01, -9.458763960462845e-02, -2.098421525468695e+00, -1.221769495814353e-01, -1.221769495814353e-01, -4.787151281329916e-03, -5.763691417886465e-03, -4.319937900815567e-03, -6.070265316178725e-02, -4.984820447065583e-03, -5.251598203224496e-03, -6.309671391240674e-01, -6.311257027335426e-01, -6.119616144094858e-01, -6.310338267657418e-01, -6.310584422119477e-01, -6.310584422119477e-01, -6.119569496169228e-01, -5.551039552504471e-01, -5.732150810364395e-01, -5.884645255447782e-01, -5.808634850202706e-01, -5.177370751829278e-01, -7.189245037702757e-01, -2.104828207118262e-01, -3.071178387443340e-01, -3.152831050296188e-01, -3.476494991456194e-01, -3.476494991456195e-01, -4.123580315036467e-01, -4.306165978660257e-02, -5.838709951162815e-02, -3.691894319242528e-01, -7.817054385437790e-02, -8.512538965515819e-02, -1.277394517516612e-02, -1.577934452666870e-03, -2.997543325736395e-03, -8.120928838677369e-02, -4.463137207496325e-03, -4.463137207496317e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_1_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.987766274410235e+01, -2.987775094097165e+01, -2.987819635490157e+01, -2.987675262078296e+01, -2.987770880120776e+01, -2.987770880120776e+01, -4.472224411795230e+00, -4.472389898002771e+00, -4.477521156897780e+00, -4.475893258424075e+00, -4.472291624177768e+00, -4.301941312530333e+00, -7.658287307253566e-01, -8.689156180121920e-01, -8.552312444009241e-01, -8.578596006203703e-01, -8.692257430298526e-01, -8.692257430298526e-01, -2.408667526258402e-01, -2.432335192572266e-01, -9.074307924544013e-01, -1.821881087711670e-01, -2.415938867356278e-01, -2.415938867356278e-01, -1.413774473261622e-02, -1.480856709203982e-02, -6.016075242991191e-02, -6.782601147109365e-03, -1.465424581448007e-02, -1.465424581448008e-02, -6.839575856414602e+00, -6.843611402321481e+00, -6.840015909096933e+00, -7.310702758456697e+00, -6.841607784877488e+00, -6.841607784877488e+00, -2.428887375203992e+00, -2.462285646000479e+00, -2.414845926369134e+00, -2.441077367377457e+00, -2.469932998012895e+00, -2.454761277820790e+00, -7.202349957994444e-01, -8.098286581276321e-01, -6.797409912422721e-01, -7.177735748151995e-01, -7.545753009597216e-01, -8.293451683674703e-01, -1.237327567472406e-01, -2.494836897223455e-01, -1.217672136644248e-01, -2.403486088645607e+00, -1.549620805196468e-01, -1.549620805196468e-01, -6.382081610707649e-03, -7.477663005880450e-03, -5.604541160186521e-03, -7.980634908735210e-02, -6.645530130981561e-03, -6.813314857312921e-03, -8.232975798964040e-01, -8.066176047422059e-01, -8.371357955761691e-01, -8.171447364579968e-01, -8.148232685352647e-01, -8.148232685352647e-01, -7.925224554173392e-01, -6.225453195802625e-01, -6.617105644056147e-01, -7.073291254565746e-01, -6.830114269741359e-01, -7.467204445583463e-01, -8.385262749581690e-01, -2.621271668061619e-01, -3.561016247151389e-01, -4.376182964138915e-01, -3.924857723990011e-01, -3.924857723990013e-01, -5.886453971782011e-01, -5.572514768363284e-02, -7.541071242753085e-02, -4.096275285662460e-01, -1.012230231741424e-01, -1.091728729250587e-01, -1.656943179608988e-02, -2.047270571869408e-03, -3.889058020129003e-03, -1.041542900489110e-01, -5.790422354623053e-03, -5.790422354623047e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_1_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.412335386081700e-08, -1.412328638786139e-08, -1.412287793766228e-08, -1.412399210359742e-08, -1.412331908390197e-08, -1.412331908390197e-08, -1.346589476274312e-05, -1.346774805335584e-05, -1.352151294873513e-05, -1.349639231792430e-05, -1.346615301095878e-05, -1.374681645993867e-05, -4.983946168519834e-03, -4.617473501809868e-03, -4.226025161200735e-03, -4.474081828760718e-03, -4.627688693398430e-03, -4.627688693398430e-03, -6.608089667867851e-01, -6.693214060279805e-01, -1.475356181745501e-03, -3.710479383533428e-01, -6.627703100236534e-01, -6.627703100236534e-01, -4.661620356776817e+01, -4.242462357694360e+01, -1.896967516696714e+00, -1.179595511022961e+02, -4.430821319844290e+01, -4.430821319844281e+01, -4.355823782216820e-06, -4.355940455144876e-06, -4.355853526430813e-06, -4.234439807292052e-06, -4.355864120196507e-06, -4.355864120196507e-06, -1.159168862429663e-04, -1.161937557539824e-04, -1.156373170284511e-04, -1.159568617391547e-04, -1.164347046242248e-04, -1.173026199657759e-04, -2.262042197694230e-02, -1.924560112734101e-02, -2.469183817145857e-02, -2.496387759218633e-02, -2.085391327480429e-02, -2.003928278323466e-02, -7.405389584686040e-01, -2.903838789898492e-01, -8.386346875895585e-01, -2.047558042738210e-04, -5.963766850074942e-01, -5.963766850074942e-01, -2.871915861858375e+02, -1.091666425181891e+02, -3.854739594374651e+02, -1.541806979450134e+00, -2.675487331668814e+02, -1.459049741206157e+02, -2.633700183251862e-02, -2.650395079124692e-02, -2.610241518852580e-02, -2.640788893517528e-02, -2.643159368818064e-02, -2.643159368818064e-02, -2.985685125801412e-02, -3.892655675357858e-02, -3.732046713923533e-02, -3.493124929931883e-02, -3.623546607796626e-02, -3.490523121226535e-02, -1.530654020831945e-02, -2.461710528327629e-01, -1.742780665143975e-01, -1.140634854404746e-01, -1.525603277569532e-01, -1.525603277569532e-01, -4.837272142114155e-02, -2.059934750794114e+00, -1.196454494103444e+00, -1.706531534295435e-01, -1.400882706638310e+00, -9.316384773903545e-01, -2.113569285075199e+01, -1.524897032789186e+03, -5.933542178944849e+02, -1.119693357562653e+00, -2.393571590584992e+02, -2.393571590584999e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_1_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.242824918457677e-03, 1.242837796670779e-03, 1.242891553382784e-03, 1.242682364805823e-03, 1.242831719872880e-03, 1.242831719872880e-03, 2.036675859073221e-03, 2.037940853120507e-03, 2.076019978537174e-03, 2.061086671625004e-03, 2.037017299690719e-03, 8.149197529268385e-03, -3.167719366334950e-03, 2.304733698382177e-02, 1.993866031718975e-02, 2.138782103739873e-02, 2.312789554382432e-02, 2.312789554382432e-02, 6.958694609079963e-02, 7.279230746722400e-02, -3.026297678821731e-03, 1.587650791182776e-02, 7.048602137321049e-02, 7.048602137321049e-02, 7.866425594126950e-04, 8.232234735014291e-04, 2.596925255215957e-03, 2.185510500561169e-04, 8.331819813180878e-04, 8.331819813181069e-04, 6.989949492971567e-03, 6.990960939055377e-03, 6.990068404306719e-03, 5.863265324972218e-03, 6.990450204309571e-03, 6.990450204309571e-03, 1.684549106996616e-03, 2.002188851884825e-03, 1.547241318896772e-03, 1.795711762506828e-03, 2.086548185184843e-03, 1.319992746434611e-02, 5.646011425966432e-02, 5.645085235194066e-02, 5.552712627646623e-02, 5.876334434260030e-02, 5.635004840369204e-02, 3.284172084890472e-02, -2.520912439024606e-03, 3.298376205516805e-02, -2.822669569974851e-03, 1.776507762239998e-02, 1.560690032866047e-02, 1.560690032866047e-02, -6.764274380847558e-07, 2.711217539595482e-04, 4.031380732549604e-04, -6.938413372411346e-04, -7.789872434737434e-07, 2.740813671501438e-04, 6.240628034785940e-02, 6.226783848997704e-02, 5.893762730565261e-02, 6.236174388404089e-02, 6.234287170208164e-02, 6.234287170208164e-02, 6.430635973542916e-02, 6.408892722305624e-02, 6.566975116102251e-02, 6.578815300018677e-02, 6.585533496117554e-02, 4.646642424088872e-02, 5.288191627166856e-02, -1.085880856904059e-02, 6.008809664024743e-02, 1.055074073447417e-02, 7.102324108788793e-02, 7.102324108788789e-02, 1.829743249558117e-02, 2.222967677077688e-03, 3.284444988698612e-03, 8.682570366071211e-02, -2.353150591539442e-03, 8.203281028166953e-03, 5.736418810139394e-04, 7.763183973061638e-05, 2.071553374719945e-04, 8.559385565921562e-03, 2.759555134446194e-04, 2.759555134446165e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
