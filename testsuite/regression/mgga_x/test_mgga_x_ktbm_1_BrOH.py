
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_1_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.294620628942146e+01, -2.294625135127498e+01, -2.294657001335213e+01, -2.294583441350704e+01, -2.294622901042501e+01, -2.294622901042501e+01, -3.469029177770210e+00, -3.469069024621295e+00, -3.470529678538318e+00, -3.472176319749403e+00, -3.469044299027644e+00, -3.469044299027644e+00, -6.542889992327809e-01, -6.540056491753018e-01, -6.473945278141432e-01, -6.547804240024045e-01, -6.541871065872618e-01, -6.541871065872618e-01, -1.991510744724249e-01, -2.013001806308673e-01, -7.611472789602699e-01, -1.393515082283346e-01, -1.997487653338663e-01, -1.997487653338663e-01, -1.089165434620454e-02, -1.140649997683454e-02, -4.622958104179593e-02, -5.163245614729584e-03, -1.128904684308351e-02, -1.128904684308351e-02, -5.574870812429265e+00, -5.574997869956129e+00, -5.574913296893965e+00, -5.575010549847336e+00, -5.574895984125729e+00, -5.574895984125729e+00, -2.134207868933378e+00, -2.155097728149281e+00, -2.133787665670369e+00, -2.150450235499112e+00, -2.148699943510669e+00, -2.148699943510669e+00, -5.980772982469872e-01, -6.324688241893734e-01, -5.558837983930333e-01, -5.653346613339020e-01, -6.250638533244022e-01, -6.250638533244022e-01, -1.035290182807578e-01, -2.003893017740164e-01, -1.022178322005899e-01, -1.868239450078456e+00, -1.204646562443158e-01, -1.204646562443158e-01, -5.010742826860402e-03, -5.708112386488090e-03, -4.301393608676277e-03, -6.391378523745014e-02, -5.185819993791837e-03, -5.185819993791837e-03, -6.248801348607264e-01, -6.252779830803297e-01, -6.251433380994585e-01, -6.250309868682511e-01, -6.250853716536641e-01, -6.250853716536641e-01, -6.001782638693409e-01, -5.498386360200538e-01, -5.656794907699245e-01, -5.789545091296503e-01, -5.718855916767888e-01, -5.718855916767887e-01, -6.557172707235516e-01, -2.546693623190434e-01, -2.990968752031351e-01, -3.653876912351009e-01, -3.333305211286950e-01, -3.333305211286950e-01, -4.808519512844869e-01, -4.291318155382431e-02, -5.791277917374447e-02, -3.401176304309188e-01, -8.418914859445725e-02, -8.418914859445725e-02, -1.262052876763792e-02, -1.552129469849792e-03, -2.988232482417191e-03, -8.025258909644649e-02, -4.404643047869776e-03, -4.404643047869770e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_1_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.762307437692671e+01, -2.762318265762832e+01, -2.762362912519073e+01, -2.762185475807418e+01, -2.762313181210276e+01, -2.762313181210276e+01, -4.388104896853593e+00, -4.388192664051062e+00, -4.390952971897938e+00, -4.389747694096781e+00, -4.388153209212328e+00, -4.388153209212328e+00, -7.983171774000641e-01, -7.976223454845787e-01, -7.828869124918818e-01, -7.909491402730329e-01, -7.980661216104674e-01, -7.980661216104674e-01, -2.361842704593546e-01, -2.380485524855639e-01, -9.323377000185262e-01, -1.750375041585349e-01, -2.367017301071433e-01, -2.367017301071433e-01, -1.412866629962002e-02, -1.479652962059823e-02, -5.980632751699417e-02, -6.721665312546011e-03, -1.464390129178084e-02, -1.464390129178083e-02, -6.842771501564816e+00, -6.846776236986883e+00, -6.843167848841245e+00, -6.846282411135023e+00, -6.844842256512583e+00, -6.844842256512583e+00, -2.434622638729490e+00, -2.449702487343617e+00, -2.429569193648148e+00, -2.441106107380790e+00, -2.452192034461362e+00, -2.452192034461362e+00, -7.485824908445011e-01, -8.624056494349268e-01, -7.038414168460311e-01, -7.700020087098788e-01, -7.839495670240051e-01, -7.839495670240051e-01, -1.321933616393645e-01, -2.460056292444855e-01, -1.303922285593848e-01, -2.599215911668833e+00, -1.522542445037895e-01, -1.522542445037895e-01, -6.509896289746970e-03, -7.423318010673638e-03, -5.585027705388071e-03, -8.252788365182191e-02, -6.751359446505911e-03, -6.751359446505920e-03, -8.312929013194603e-01, -8.141528849154526e-01, -8.202323474713756e-01, -8.249829593878463e-01, -8.226025461934622e-01, -8.226025461934622e-01, -8.078400315055516e-01, -6.257798740602040e-01, -6.686426891463675e-01, -7.180738936533059e-01, -6.922767095925033e-01, -6.922767095925032e-01, -9.000257931070322e-01, -3.043487781499101e-01, -3.495702375887830e-01, -4.358111242793221e-01, -3.870321443471254e-01, -3.870321443471255e-01, -5.667453200012861e-01, -5.554046175924645e-02, -7.479793170948038e-02, -4.167543895474312e-01, -1.077820735518591e-01, -1.077820735518592e-01, -1.642123787255755e-02, -2.024194823759505e-03, -3.879122601416125e-03, -1.027387214218762e-01, -5.735766567165224e-03, -5.735766567165222e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_1_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.460228902508945e-08, -1.460221347686566e-08, -1.460178178801193e-08, -1.460302877646357e-08, -1.460224987167768e-08, -1.460224987167768e-08, -1.364391920686027e-05, -1.364588284904032e-05, -1.370299898016782e-05, -1.367735989580481e-05, -1.364419939445992e-05, -1.364419939445992e-05, -4.894780811371606e-03, -4.881136828264925e-03, -4.514079232967236e-03, -4.739358649046584e-03, -4.890396679724698e-03, -4.890396679724698e-03, -6.717486393896582e-01, -6.809630187806259e-01, -1.449527121032032e-03, -4.152763918226582e-01, -6.740578171818826e-01, -6.740578171818826e-01, -4.733644581766354e+01, -4.325112308340349e+01, -2.066974650177712e+00, -1.469467448345486e+02, -4.505711407958823e+01, -4.505711407958825e+01, -4.355046873350811e-06, -4.355170538059700e-06, -4.355087188720769e-06, -4.355181006394244e-06, -4.355077515012214e-06, -4.355077515012214e-06, -1.164587568446472e-04, -1.171022067928085e-04, -1.159790467023169e-04, -1.165993911275016e-04, -1.174630137670374e-04, -1.174630137670374e-04, -2.230554815394492e-02, -1.876469801650930e-02, -2.437209602505165e-02, -2.427925635639201e-02, -2.056561003164192e-02, -2.056561003164192e-02, -5.490206336011915e-01, -2.962490438949777e-01, -6.253546490159815e-01, -1.983863165230971e-04, -6.318229857045685e-01, -6.318229857045685e-01, -1.774713485232282e+02, -1.304243416703516e+02, -4.201257709555092e+02, -1.115915541767531e+00, -1.821519758702792e+02, -1.821519758702789e+02, -2.622304960572589e-02, -2.639931185070091e-02, -2.634564626805323e-02, -2.629725066315499e-02, -2.632218575547880e-02, -2.632218575547880e-02, -2.960260334522967e-02, -3.886201729052452e-02, -3.718604196931233e-02, -3.473388936718810e-02, -3.606022193826358e-02, -3.606022193826355e-02, -1.487949792617396e-02, -2.204292744807439e-01, -1.765419984096565e-01, -1.149943982848230e-01, -1.538493133555492e-01, -1.538493133555492e-01, -4.940770811144993e-02, -2.171376174216065e+00, -1.319657521973610e+00, -1.696587520017114e-01, -1.007741108343827e+00, -1.007741108343827e+00, -2.606892734604221e+01, -2.010757207300582e+03, -6.324812121759790e+02, -1.217653516084720e+00, -3.014055685758581e+02, -3.014055685758582e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_1_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.638849594854926e-03, 1.638850287460689e-03, 1.638864642941955e-03, 1.638854666991185e-03, 1.638849845471787e-03, 1.638849845471787e-03, 4.631662670653050e-03, 4.632908059623426e-03, 4.671364517084906e-03, 4.672313023352866e-03, 4.631882115885078e-03, 4.631882115885078e-03, 6.528813552723007e-03, 6.525101465577302e-03, 6.653937989910601e-03, 7.888061081682964e-03, 6.529127833279199e-03, 6.529127833279199e-03, 6.010401475369342e-02, 6.164486215585388e-02, -3.255543768287112e-04, 1.004826043572516e-02, 6.041095276809594e-02, 6.041095276809594e-02, 7.825035555664636e-04, 8.176209509607846e-04, 2.399766606339028e-03, 1.887342919870485e-04, 8.283023610327108e-04, 8.283023610327132e-04, 6.982150267685518e-03, 6.983267378571698e-03, 6.982379190422415e-03, 6.983240387832241e-03, 6.982571888537064e-03, 6.982571888537064e-03, 1.147282462177034e-02, 1.188499077514802e-02, 1.150747884509385e-02, 1.184727042478182e-02, 1.170240362569018e-02, 1.170240362569018e-02, 4.399275523459806e-02, 4.571222956648672e-02, 3.652076454084755e-02, 3.978614922519022e-02, 4.693177183490563e-02, 4.693177183490563e-02, 6.783532724039172e-03, 2.983555610711621e-02, 7.435716381384247e-03, 1.178070528658698e-02, 1.310729917301136e-02, 1.310729917301136e-02, 2.454880370106248e-04, 2.446365795524469e-04, 3.891129714054471e-04, 2.762280430382217e-03, 2.359608301223926e-04, 2.359608301223986e-04, 6.139914811170029e-02, 6.117732847320845e-02, 6.126025656749379e-02, 6.132207931219209e-02, 6.129088388831943e-02, 6.129088388831943e-02, 6.214968422990005e-02, 6.190470520585897e-02, 6.302532085154167e-02, 6.307833865883590e-02, 6.299177530262583e-02, 6.299177530262579e-02, 3.969266068332274e-02, 4.427840546825870e-02, 5.109804105709771e-02, 5.053949314380750e-02, 5.648659909482846e-02, 5.648659909482842e-02, 5.180319574872578e-02, 2.135341464600034e-03, 2.930698664945753e-03, 5.899272313300221e-02, 7.006316385181961e-03, 7.006316385181878e-03, 4.964287696406667e-04, 6.207940902804898e-05, 2.023173742005538e-04, 7.217108692487056e-03, 2.351465553671571e-04, 2.351465553671606e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
