
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_gvt4_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gvt4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.151684074824963e+01, -2.151691537361715e+01, -2.151725977155873e+01, -2.177874315804021e+01, -2.177924478740522e+01, -2.204180546669442e+01, -3.510621136833842e+00, -3.757937773350895e+00, -3.756026530290060e+00, -3.757137235140504e+00, -3.756629898142934e+00, -3.509227579550352e+00, -4.815141985917269e-01, -6.372670122903558e-01, -8.024690313328788e-01, -6.212119005466776e-01, -4.310301573188566e-01, -8.004364035878373e-01, -1.410539897460747e-01, -1.467721348114334e-01, -6.521831209012326e-01, -2.011367652317132e-01, -2.220064850605732e-01, -1.095000901558728e-01, -1.258576750800713e-04, 3.713063008332552e-03, 2.145603564958171e-01, -2.069738218466605e-05, -6.929271927643797e-05, -6.929271927643798e-05, -5.348686357326724e+00, -5.349303116366013e+00, -5.348714166801692e+00, -5.349258816609973e+00, -5.313528905696680e+00, -5.313558399473497e+00, -2.158160791843107e+00, -2.164167960748503e+00, -2.154607437842848e+00, -2.159443876228121e+00, -1.976579181880041e+00, -2.163258855862114e+00, -5.970275606970908e-01, -6.571272587175054e-01, -5.809235113997795e-01, -5.916675042709794e-01, -6.071931332047540e-01, -6.233476925052222e-01, -1.257104042115380e-01, -8.804819289591215e-02, -1.111001128447671e-01, -2.000079509232814e+00, -1.637107324418927e-01, -1.637107324418927e-01, 2.317837350306579e-04, -1.818761271895249e-05, -2.330729282068861e-05, 3.633127462182871e-01, -3.431507769097777e-05, -3.431507769097778e-05, -6.029467847610555e-01, -6.002135786970098e-01, -5.986597426549904e-01, -6.009623723878337e-01, -5.993364170747953e-01, -6.004252353836295e-01, -5.866810575262277e-01, -4.996740133916898e-01, -5.249903417255941e-01, -5.550677683689709e-01, -5.456296326562495e-01, -5.369473662497813e-01, -6.815748919940396e-01, -2.910533369908853e-01, -2.446586513840410e-01, -3.485848358466714e-01, -3.470731866582543e-01, -2.976596982074889e-01, -4.880387727382633e-01, 4.774040946721458e-01, -2.904121984136105e-02, -3.601032584502759e-01, -9.373892202617858e-02, -9.373892202617856e-02, 1.533155208744253e-02, -3.846414201037652e-07, 3.994810094931327e-04, 6.478962912189425e-01, -2.802337331887730e-05, 1.564252754613039e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_gvt4_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gvt4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.947517445300743e+01, -2.947497127910393e+01, -2.947524542562229e+01, -2.947502287689024e+01, -2.947550037608300e+01, -2.947538044524824e+01, -2.947469656953945e+01, -2.817389530558650e+01, -2.947521474758176e+01, -2.817472608241902e+01, -2.817496801359663e+01, -2.817472608241902e+01, -3.951918452925203e+00, -5.174197827248618e+00, -3.952271915650184e+00, -3.951813124828666e+00, -3.959108278791017e+00, -3.960370051491097e+00, -3.956959859618050e+00, -3.957024303527688e+00, -3.950497304671004e+00, -3.963244881635481e+00, -5.173757653128129e+00, -3.963244881635481e+00, -1.234236505677793e+00, -1.223734904638550e+00, -1.236878364912880e+00, -5.606216582030069e-01, -5.018046802073166e-01, -4.921490328063437e-01, -5.168125064567526e-01, -1.248176341907929e+00, -1.223512191122461e+00, -1.316822067826935e+00, -5.723474907290758e-01, -4.588953834809810e-01, -4.191956360321428e-01, -1.210144883010318e-01, -4.124048668665424e-01, -1.267025426960128e-01, -4.951135878410993e-01, -1.855564292882721e+00, -1.515256695675934e-01, -1.333265760914112e-01, -1.154647804530266e-01, -1.973015139162914e-01, -1.154647804530265e-01, -3.614338796425253e-01, -3.492758081228232e-04, -4.193456154731030e-04, 2.486717134621453e-02, -5.047953464724900e-04, 9.046478877290931e-01, -4.426093128624137e-02, -6.537181014526219e-05, -6.248111201607929e-05, -2.422367237087213e-04, -5.867013156850605e-05, -2.422367237087214e-04, -5.867013156850610e-05, -6.972454569336850e+00, -6.970794546893369e+00, -6.975373688868413e+00, -6.973614902189881e+00, -6.972647027106798e+00, -6.970913247290242e+00, -6.975150704697187e+00, -6.973474329145566e+00, -7.141342956505190e+00, -6.972208791862104e+00, -6.973928712694051e+00, -7.139608686264733e+00, -2.082666068634660e+00, -2.085692203340004e+00, -2.128651124153176e+00, -2.130190258539611e+00, -2.041591903878041e+00, -2.056378634533722e+00, -2.082477812513826e+00, -2.097486252275846e+00, -2.138822057246915e+00, -3.019425569028364e+00, -2.138822057246915e+00, -2.113644460524553e+00, -7.349553344226479e-01, -8.275866991164871e-01, -8.423920193747650e-01, -8.444425466488158e-01, -6.117521218159262e-01, -6.630140894810373e-01, -6.893911671586820e-01, -7.260859680344636e-01, -7.814684827754957e-01, -8.190416035863050e-01, -7.814684827754957e-01, -7.299727268215789e-01, -1.877146306734457e-01, -1.883458265091772e-01, -5.710875759441385e-01, -1.238671961704810e-01, -1.784829638576846e-01, -1.825315399833739e-01, -2.454237275061355e+00, -2.453334415354720e+00, -1.684358456899701e-01, -1.351117421507428e-01, -1.684358456899702e-01, -1.351117421507426e-01, 1.498926674347211e-03, -2.538278497097513e-05, -5.673063727537184e-05, -5.572236192648242e-05, -6.356856075207784e-05, -7.905011591095946e-05, -1.152830603961913e-01, 4.304728263896611e-01, -2.946487404748848e-05, -1.354024450475567e-04, -2.946487404748848e-05, -1.354024450475568e-04, -7.999422925343352e-01, -8.031100648152502e-01, -7.920294306608542e-01, -7.952904877966926e-01, -8.000799209987074e-01, -8.031529161373725e-01, -8.010866601111253e-01, -8.004602414299348e-01, -8.005764281733245e-01, -8.036453454212523e-01, -8.005764281733244e-01, -7.993452170819496e-01, -7.781094787448464e-01, -7.807733403304018e-01, -5.940857186876056e-01, -7.090232965015146e-01, -6.571144876847080e-01, -7.228834018072799e-01, -7.124352006858451e-01, -7.152245389637880e-01, -6.854352888416428e-01, -6.885720183553706e-01, -6.854352888416428e-01, -7.319728703995645e-01, -8.717078701580904e-01, -9.252569635337675e-01, -1.424947825595092e-01, -1.437185455402709e-01, -5.157572115122561e-01, -2.054870929614871e-01, -5.381850617419220e-01, -3.687206657170787e-01, -2.828279364400534e-01, -2.836812189045492e-01, -2.828279364400532e-01, -5.063136702778650e-01, -5.165946864355708e-01, -5.262048317973873e-01, 8.894156570027275e-01, 8.950172928261508e-01, -7.054368227914716e-02, -7.659445517104727e-02, -3.762232630289830e-01, -3.995955939846985e-01, -1.542011627487243e-01, -1.563740661187580e-01, -1.542011627487243e-01, -1.563740661187576e-01, 4.242907900700701e-02, 4.662548242722909e-02, -1.187550669310509e-06, -1.193079780131940e-06, 1.057757613133596e-03, 1.308081393694967e-03, -5.885030503238647e-02, -1.359292297443974e-01, -4.019510276351242e-05, -1.062571416080480e-04, -4.019510276351207e-05, 6.635183991564896e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gvt4_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gvt4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.265549099138867e-09, 0.000000000000000e+00, -5.264859757118235e-09, -5.265375889748688e-09, 0.000000000000000e+00, -5.264734086530963e-09, -5.264847809455180e-09, 0.000000000000000e+00, -5.263970299585903e-09, -5.266796422254960e-09, 0.000000000000000e+00, -7.844226538727741e-09, -5.265441762457322e-09, 0.000000000000000e+00, -7.842758864326045e-09, -7.842705975366781e-09, 0.000000000000000e+00, -7.842758864326045e-09, -1.981458864505715e-05, 0.000000000000000e+00, -1.623924259693033e-05, -1.981160368228649e-05, 0.000000000000000e+00, -1.981602592741128e-05, -1.975386095434945e-05, 0.000000000000000e+00, -1.974268195771215e-05, -1.976820530575318e-05, 0.000000000000000e+00, -1.976702377181454e-05, -1.983394969957423e-05, 0.000000000000000e+00, -1.971343677547960e-05, -1.625557261752498e-05, 0.000000000000000e+00, -1.971343677547960e-05, -2.468355002741892e-02, 0.000000000000000e+00, -2.357804205999306e-02, -2.505521850460994e-02, 0.000000000000000e+00, -1.757433892402201e-02, -1.962474085521389e-02, 0.000000000000000e+00, -2.016758321653450e-02, -1.932569089578263e-02, 0.000000000000000e+00, -2.813903193631444e-02, -2.243353761476505e-02, 0.000000000000000e+00, -3.941236952458372e-02, -1.696175338317920e-02, 0.000000000000000e+00, -2.212468078624829e-02, -1.040916786865512e+01, 0.000000000000000e+00, -3.642834566172160e+00, -9.455893286006793e+00, 0.000000000000000e+00, -3.428434028420682e+00, -9.299690830204379e-03, 0.000000000000000e+00, -1.977156993696802e-02, -5.884548058981411e+00, 0.000000000000000e+00, -6.501843942947648e+00, -3.436415836405752e+00, 0.000000000000000e+00, -5.520031383733983e+00, -3.436415836405750e+00, 0.000000000000000e+00, -5.024132944644479e+02, 8.813510211091552e+00, 0.000000000000000e+00, 8.786244788617120e+00, -8.547556466305030e+04, 0.000000000000000e+00, 9.111926436558361e+00, -1.606921110972465e+04, 0.000000000000000e+00, -7.492603753117349e-01, 6.690559534231443e+00, 0.000000000000000e+00, 6.762127849817993e+00, 8.472510887689944e+00, 0.000000000000000e+00, 1.484636051595566e+01, 8.472510887689944e+00, 0.000000000000000e+00, 1.484636051595570e+01, -1.799910130586185e-06, 0.000000000000000e+00, -1.801586169649212e-06, -1.790653740870790e-06, 0.000000000000000e+00, -1.792631361777171e-06, -1.799275907083171e-06, 0.000000000000000e+00, -1.801191809242430e-06, -1.791338444599311e-06, 0.000000000000000e+00, -1.793061827433556e-06, -1.230732994981192e-06, 0.000000000000000e+00, -1.797101243354699e-06, -1.795256457249522e-06, 0.000000000000000e+00, -1.231986903630265e-06, -2.149049831262514e-04, 0.000000000000000e+00, -2.146161890759433e-04, -2.054646431299769e-04, 0.000000000000000e+00, -2.054576841642013e-04, -2.232876526449956e-04, 0.000000000000000e+00, -2.205888273591922e-04, -2.148049198642553e-04, 0.000000000000000e+00, -2.120729716971658e-04, -2.035527405526631e-04, 0.000000000000000e+00, -1.869899205387579e-04, -2.035527405526631e-04, 0.000000000000000e+00, -2.088978288317183e-04, -1.914049603727921e-02, 0.000000000000000e+00, -1.344839423463694e-02, -9.667543474355118e-03, 0.000000000000000e+00, -9.428788108936688e-03, -3.532966819110391e-02, 0.000000000000000e+00, -2.788336277715263e-02, -2.468679405040862e-02, 0.000000000000000e+00, -2.002233660013092e-02, -1.476798946179807e-02, 0.000000000000000e+00, -1.377033086891291e-02, -1.476798946179807e-02, 0.000000000000000e+00, -1.965996823675395e-02, -6.790943270945855e+00, 0.000000000000000e+00, -6.776169008382954e+00, -1.501500814002756e+01, 0.000000000000000e+00, -3.041387336694247e+00, -6.557063889813426e+00, 0.000000000000000e+00, -7.197908887587841e+00, -1.519358455499706e-04, 0.000000000000000e+00, -1.521423094779910e-04, -8.789748686309832e+00, 0.000000000000000e+00, -1.086955655055976e+01, -8.789748686309828e+00, 0.000000000000000e+00, -1.086955655055976e+01, -4.583915580744202e+04, 0.000000000000000e+00, 4.513876994331301e+00, 6.356307372418292e+00, 0.000000000000000e+00, 5.605436367200386e+00, 4.544856386289861e+01, 0.000000000000000e+00, 4.970107950606302e+01, -5.589107438210115e+00, 0.000000000000000e+00, -4.418025109064948e+03, 8.664314972190571e+00, 0.000000000000000e+00, 2.688958050210556e+01, 8.664314972190544e+00, 0.000000000000000e+00, 2.688958050210571e+01, -6.287621935303809e-03, 0.000000000000000e+00, -6.137276207338114e-03, -8.319158884186582e-03, 0.000000000000000e+00, -8.114082690599605e-03, -5.805048303512820e-03, 0.000000000000000e+00, -5.680489687524980e-03, -5.509447844254028e-03, 0.000000000000000e+00, -6.845641000601745e-03, -5.656590920360288e-03, 0.000000000000000e+00, -5.538792797922615e-03, -5.656590920360288e-03, 0.000000000000000e+00, -7.131285435848320e-03, -7.302499712818503e-03, 0.000000000000000e+00, -7.137204850940007e-03, -4.371778324437069e-02, 0.000000000000000e+00, -3.155200485278305e-02, -2.959334447500723e-02, 0.000000000000000e+00, -1.970481174446884e-02, -1.855982376907844e-02, 0.000000000000000e+00, -1.821158564100358e-02, -2.379947943776464e-02, 0.000000000000000e+00, -2.329077509753209e-02, -2.379947943776465e-02, 0.000000000000000e+00, -1.567629571488625e-02, -9.036547002067187e-03, 0.000000000000000e+00, -5.810537746885678e-03, -1.493519058328791e+00, 0.000000000000000e+00, -1.464633680959847e+00, -1.220447307619407e+00, 0.000000000000000e+00, -7.356012622105459e-01, -2.023691865969433e-01, 0.000000000000000e+00, -2.148146843953008e-01, -4.130906899702225e-01, 0.000000000000000e+00, -4.130296500266707e-01, -4.130906899702231e-01, 0.000000000000000e+00, -4.595062338833351e-01, -6.886962866425650e-02, 0.000000000000000e+00, -6.565955766003916e-02, -1.709278350801166e+04, 0.000000000000000e+00, -1.670023472303459e+04, -2.158806669334611e+00, 0.000000000000000e+00, -2.641308766509284e+00, -2.385313145233244e-01, 0.000000000000000e+00, -2.066006411678432e-01, -1.005333900279936e+01, 0.000000000000000e+00, -1.339158585949191e+01, -1.005333900279937e+01, 0.000000000000000e+00, -1.339158585949191e+01, -3.923542820544896e+04, 0.000000000000000e+00, -3.850286143510911e+04, 7.404375066536095e+00, 0.000000000000000e+00, 7.371799807899747e+00, -1.905503625608207e+05, 0.000000000000000e+00, -2.016472049972345e+05, -2.222511249411955e+03, 0.000000000000000e+00, -2.030230711332251e+03, 2.226633148896758e+01, 0.000000000000000e+00, 2.801085417468584e+01, 2.226633148896781e+01, 0.000000000000000e+00, -2.624339797994572e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gvt4_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gvt4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [4.608652476014147e-04, 4.607915345659902e-04, 4.608528518915870e-04, 4.607825453642786e-04, 4.608169937586159e-04, 4.607301149540917e-04, 4.609561685739951e-04, 2.585107787654355e-04, 4.608573810358937e-04, 2.584856351828062e-04, 2.584904068172532e-04, 2.584856351828062e-04, 2.619780291220721e-03, 6.188434781415983e-03, 2.619363518801748e-03, 2.619880123556401e-03, 2.611278860194408e-03, 2.609805526480917e-03, 2.613996905954927e-03, 2.613949523408632e-03, 2.621129178671620e-03, 2.606618798122718e-03, 6.191495075482005e-03, 2.606618798122718e-03, 5.669777471789186e-02, 5.533390390288969e-02, 5.712119033458908e-02, 1.887900774536002e-02, 2.042786710647332e-02, 2.071753483013694e-02, 2.004476499827448e-02, 6.018079720896336e-02, 5.419431402306224e-02, 7.041086917220321e-02, 1.856471830485956e-02, 2.176800765168983e-02, 3.132695379897263e-01, 8.049710823528831e-02, 3.017097032819944e-01, 7.792639328578529e-02, 1.928757824657851e-02, 6.363381288199831e-02, 9.806735684850221e-02, 1.023659262999498e-01, 8.249960407254942e-02, 7.204729464337366e-02, 8.249960407254939e-02, 6.451017427783260e-01, 1.390504713753745e-04, 1.673571621911941e-04, -1.124990153131630e-02, 2.061682050960214e-04, -1.474785100029582e-01, 1.374275081108521e-02, 2.220896827774464e-05, 2.133462257133757e-05, 9.391204494351032e-05, 2.970878537419519e-05, 9.391204494351032e-05, 2.970878537419519e-05, 9.228318346413298e-04, 9.230371979190575e-04, 9.201453612149354e-04, 9.204400491390665e-04, 9.226458408754256e-04, 9.229214246667285e-04, 9.203422956035805e-04, 9.205636349569212e-04, 1.489602069602776e-03, 9.217366789383920e-04, 9.214826251608262e-04, 1.490048537205177e-03, 5.156357493620338e-03, 5.146143597326986e-03, 5.016583815452428e-03, 5.010799196865037e-03, 5.282825123308179e-03, 5.236391433855529e-03, 5.157323339146909e-03, 5.110449678233042e-03, 4.985271456385704e-03, 1.255690306121319e-02, 4.985271456385704e-03, 5.060785977001801e-03, 1.223188702162509e-02, 2.513770138407569e-02, 8.521640411439747e-03, 8.382540138508903e-03, 1.677877912720672e-02, 1.469734406123705e-02, 1.326121471281492e-02, 1.197920844416929e-02, 1.077904407678370e-02, 2.503325497168629e-02, 1.077904407678369e-02, 1.215501787387513e-02, 7.634048072020895e-02, 7.702089909005218e-02, 3.776193105147603e-01, 8.507104629469713e-02, 6.726755733905115e-02, 7.475840095030047e-02, 3.439131634372816e-03, 3.439433798073140e-03, 9.885027660515958e-02, 1.132174847148399e-01, 9.885027660515960e-02, 1.132174847148398e-01, -4.933023924888761e-04, 7.050507080524826e-06, 1.876871716891429e-05, 1.730740352430915e-05, 5.647032025063403e-05, 7.359582446630405e-05, 4.095723382427018e-02, 3.832672869319351e-01, 1.135104948051744e-05, 9.312693803855347e-05, 1.135104948051745e-05, 9.312693803855338e-05, 6.088139179463214e-03, 6.041823693243808e-03, 6.911405198910156e-03, 6.851677477740624e-03, 8.878361162913991e-03, 8.758435694930962e-03, 8.235181391006527e-03, 6.332307901765808e-03, 8.556799660273617e-03, 8.447686605069366e-03, 8.556799660273617e-03, 6.449370701762487e-03, 6.368950237052143e-03, 6.320774976048501e-03, 1.620911865293877e-02, 3.510136017964757e-02, 1.287678705544355e-02, 2.515779823483644e-02, 9.911547257685564e-03, 9.843842508578634e-03, 1.136854215748329e-02, 1.126873402610784e-02, 1.136854215748328e-02, 2.104882299901263e-02, 8.863217243431070e-03, 1.576455351250659e-02, 6.688100100209704e-02, 6.637353374818167e-02, 1.596096443021209e-01, 5.015881573148966e-02, 7.394028045344475e-02, 2.918380671342546e-02, 3.840587032691639e-02, 3.830434468639661e-02, 3.840587032691640e-02, 1.047165133059223e-01, 1.993673252911839e-02, 1.936431430886681e-02, -1.509267563875828e-01, -1.497254384855077e-01, 2.104211758720588e-02, 2.354593050338104e-02, 2.761913386825469e-02, 2.485346299801083e-02, 7.088097769771785e-02, 8.741800595613543e-02, 7.088097769771790e-02, 8.741800595613544e-02, -1.302974878301077e-02, -1.419232431437797e-02, 4.208339678160685e-07, 4.218629050828258e-07, -7.097541939854815e-04, -9.030772518337813e-04, 6.985659855306585e-01, 7.569765156468767e-01, 2.488500731080774e-05, 7.438378209835198e-05, 2.488500731080772e-05, -5.239599439069549e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
