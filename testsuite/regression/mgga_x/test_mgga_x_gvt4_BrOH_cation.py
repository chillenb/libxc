
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_gvt4_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gvt4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.200238619090611e+01, -2.200243918560491e+01, -2.200271744500774e+01, -2.200192870088609e+01, -2.200233591042786e+01, -2.200233591042786e+01, -3.469153627342390e+00, -3.469207643500960e+00, -3.470827179965753e+00, -3.471861090933537e+00, -3.470808958132187e+00, -3.470808958132187e+00, -6.042319527923699e-01, -6.035072505684800e-01, -5.914229244401907e-01, -6.121845756904652e-01, -6.154450918043568e-01, -6.154450918043568e-01, -2.197040448997247e-01, -2.191513116057868e-01, -4.115534926553736e-01, -1.725563738221865e-01, -2.048779207740956e-01, -2.048779207740956e-01, -1.259397771046287e-04, -1.502327931693333e-04, -1.492562433529753e-02, -2.062292466046706e-05, -6.929686826112051e-05, -6.929686826112051e-05, -5.348145638101263e+00, -5.348771414558177e+00, -5.348184842976138e+00, -5.348736918931100e+00, -5.348457023596319e+00, -5.348457023596319e+00, -2.107771769302718e+00, -2.122363168924230e+00, -2.109514651336243e+00, -2.122425942912233e+00, -2.115376306363115e+00, -2.115376306363115e+00, -5.996614619851983e-01, -6.468471621147303e-01, -5.477835088734049e-01, -5.637584105752405e-01, -6.098092224822278e-01, -6.098092224822278e-01, -1.147235195787503e-01, -2.408602100040316e-01, -1.013757461021481e-01, -1.922836616017452e+00, -1.528006878576986e-01, -1.528006878576986e-01, -6.061905051033410e-06, -1.714153607733631e-05, -2.314851239766485e-05, -4.981196350261978e-02, -3.282863008269077e-05, -3.282863008269079e-05, -6.023407171841464e-01, -5.994398278907840e-01, -6.004229661028802e-01, -6.012624792880065e-01, -6.008384244899709e-01, -6.008384244899709e-01, -5.855050252814069e-01, -5.191999620975868e-01, -5.346718642088075e-01, -5.529023588867599e-01, -5.431084451882482e-01, -5.431084451882482e-01, -6.759280411502138e-01, -2.838146849776225e-01, -3.084901875964369e-01, -3.599360345694038e-01, -3.299098089952338e-01, -3.299098089952338e-01, -4.734720711110743e-01, -1.340285686888920e-02, -2.818510795392452e-02, -3.439433348080835e-01, -8.793459776241899e-02, -8.793459776241899e-02, -2.262720449988281e-04, 4.134473293310410e-07, -6.090364251861690e-06, -8.202210972082763e-02, -2.674768649289201e-05, -2.674768649289195e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_gvt4_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gvt4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.827566413502297e+01, -2.827560455143165e+01, -2.827580149323337e+01, -2.827570431452664e+01, -2.827619358881246e+01, -2.827627942122465e+01, -2.827464325890670e+01, -2.827430305584939e+01, -2.827574834583327e+01, -2.827505829570701e+01, -2.827574834583327e+01, -2.827505829570701e+01, -4.622901878142181e+00, -4.623652166220135e+00, -4.622894835403197e+00, -4.623721006220083e+00, -4.623639601166881e+00, -4.624041794717239e+00, -4.620126559678376e+00, -4.620981610909708e+00, -4.622093696133650e+00, -4.621702600248190e+00, -4.622093696133650e+00, -4.621702600248190e+00, -8.900180149378532e-01, -9.024826219393485e-01, -8.851696315352410e-01, -9.010697071048721e-01, -8.192358922193178e-01, -7.894839122013313e-01, -8.002395851348142e-01, -8.073956178510747e-01, -9.273683412205835e-01, -6.478574451412853e-01, -9.273683412205835e-01, -6.478574451412853e-01, -1.103056770803541e-01, -1.222033226173969e-01, -1.144608392074119e-01, -1.289727514432897e-01, -1.314789890069677e+00, -1.337435156389675e+00, -6.537775622999810e-02, -8.779227868843290e-02, -1.160391241143048e-01, -2.000001752854262e-02, -1.160391241143048e-01, -2.000001752854245e-02, -3.468848998863864e-04, -4.181454222644753e-04, -4.039494340749011e-04, -5.015629694874374e-04, -3.337320401393469e-02, -3.970917315958835e-02, -5.900769829526789e-05, -5.759540793858754e-05, -2.367927358785487e-04, -4.429890592937594e-05, -2.367927358785484e-04, -4.429890592937590e-05, -6.973849721080436e+00, -6.972109487811737e+00, -6.976744698915116e+00, -6.974907000643776e+00, -6.974008827119023e+00, -6.972204337272518e+00, -6.976493178274396e+00, -6.974745979701265e+00, -6.975335629486949e+00, -6.973516258415573e+00, -6.975335629486949e+00, -6.973516258415573e+00, -2.182577923012329e+00, -2.182192597404127e+00, -2.212944076358184e+00, -2.211812321885148e+00, -2.126714311057659e+00, -2.142870025889104e+00, -2.153652224180342e+00, -2.169645751348869e+00, -2.239612923390638e+00, -2.203445491666641e+00, -2.239612923390638e+00, -2.203445491666641e+00, -7.746881903360774e-01, -7.724311476523131e-01, -8.690948964492434e-01, -8.692905716301620e-01, -7.041032083238197e-01, -7.292736861468669e-01, -7.691853192421457e-01, -7.886930037300921e-01, -8.103530559745699e-01, -7.700725689170675e-01, -8.103530559745699e-01, -7.700725689170677e-01, -1.283079654735581e-01, -1.222732516807147e-01, -1.112468636028789e-01, -1.109226257989335e-01, -1.140547359288504e-01, -1.251811614038297e-01, -2.651151653991751e+00, -2.649942358892533e+00, -1.207956963111605e-01, -1.026488767463063e-01, -1.207956963111606e-01, -1.026488767463061e-01, -5.383310554995053e-06, -8.228690633589990e-06, -4.172659547649943e-05, -3.866678585098930e-05, -5.710100840184130e-05, -7.042085276886700e-05, -7.817094269029734e-02, -9.660729504588349e-02, 1.218052896690049e-05, -1.332970565540439e-04, 1.218052896690017e-05, -1.332970565540443e-04, -8.011402575323078e-01, -8.042631427338998e-01, -7.938187956368541e-01, -7.970166966373383e-01, -7.965552342274748e-01, -7.997393284883033e-01, -7.986989326416670e-01, -8.018301482105729e-01, -7.976428888510001e-01, -8.007989878995929e-01, -7.976428888510001e-01, -8.007989878995929e-01, -7.804317266223674e-01, -7.829911254433745e-01, -5.999999944713906e-01, -6.039942301449183e-01, -6.634925013780131e-01, -6.675246487471862e-01, -7.179615175374364e-01, -7.206988695021765e-01, -6.919778092624543e-01, -6.948521947658042e-01, -6.919778092624543e-01, -6.948521947658042e-01, -9.128078025943754e-01, -9.136217460703739e-01, -1.422197067671483e-01, -1.436841762459120e-01, -2.122741147224150e-01, -2.187857110438793e-01, -4.154231759054017e-01, -4.188924624219009e-01, -3.103123560584590e-01, -3.112774841076905e-01, -3.103123560584587e-01, -3.112774841076906e-01, -5.509045695847700e-01, -5.568220966702001e-01, -3.540430189703599e-02, -3.534008515506337e-02, -5.897402507798660e-02, -6.432345463964906e-02, -4.220742077271400e-01, -4.279414406095264e-01, -1.163892848660624e-01, -1.163433954758701e-01, -1.163892848660624e-01, -1.163433954758700e-01, -4.986930111563778e-04, -5.240808289866050e-04, 1.894932629842559e-06, 5.051250323616566e-06, -1.597580341150884e-05, -1.973929005334288e-05, -1.180778691182749e-01, -1.349983559014027e-01, -2.459047099028931e-06, -1.045621677313945e-04, -2.459047099028858e-06, -1.045621677313942e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gvt4_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gvt4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.705130578223594e-09, 0.000000000000000e+00, -7.704585820075325e-09, -7.704876211400680e-09, 0.000000000000000e+00, -7.704401197858925e-09, -7.704168081754685e-09, 0.000000000000000e+00, -7.703357081565148e-09, -7.707032534962462e-09, 0.000000000000000e+00, -7.707010327285950e-09, -7.704971340348907e-09, 0.000000000000000e+00, -7.705627973404765e-09, -7.704971340348907e-09, 0.000000000000000e+00, -7.705627973404765e-09, -1.863182046762885e-05, 0.000000000000000e+00, -1.863352454386587e-05, -1.862786137026841e-05, 0.000000000000000e+00, -1.863077928306719e-05, -1.854871175849002e-05, 0.000000000000000e+00, -1.853313026906793e-05, -1.858203022189524e-05, 0.000000000000000e+00, -1.857853577679521e-05, -1.865284530898989e-05, 0.000000000000000e+00, -1.850621734217644e-05, -1.865284530898989e-05, 0.000000000000000e+00, -1.850621734217644e-05, -2.273243579272943e-02, 0.000000000000000e+00, -2.200135398851423e-02, -2.297699498848882e-02, 0.000000000000000e+00, -2.211824303537845e-02, -2.656265160731381e-02, 0.000000000000000e+00, -2.737543627924200e-02, -2.508348475185106e-02, 0.000000000000000e+00, -2.458858443956511e-02, -2.118586615803474e-02, 0.000000000000000e+00, -2.932954105144814e-02, -2.118586615803474e-02, 0.000000000000000e+00, -2.932954105144814e-02, -4.467190539559645e+00, 0.000000000000000e+00, -3.747161326091640e+00, -4.352491775310419e+00, 0.000000000000000e+00, -3.546313671724289e+00, -2.296836966018270e-02, 0.000000000000000e+00, -1.723627506128135e-02, -1.099621192585333e+01, 0.000000000000000e+00, -9.237086398565094e+00, -3.827485979215838e+00, 0.000000000000000e+00, -2.670532389174407e+01, -3.827485979215837e+00, 0.000000000000000e+00, -2.670532389174408e+01, 6.570236092980922e+00, 0.000000000000000e+00, 7.841682829619817e+00, 5.133381600076182e+00, 0.000000000000000e+00, 6.919151269477350e+00, -1.326313127225977e+01, 0.000000000000000e+00, -1.176785663640299e+01, -1.551688235173135e+01, 0.000000000000000e+00, -1.139147455222788e+01, 1.574423323756589e+00, 0.000000000000000e+00, -1.065682599144911e+02, 1.574423323756294e+00, 0.000000000000000e+00, -1.065682599144918e+02, -1.796601913171306e-06, 0.000000000000000e+00, -1.798464602022207e-06, -1.787378433009798e-06, 0.000000000000000e+00, -1.789541831748646e-06, -1.796045214619560e-06, 0.000000000000000e+00, -1.798125950424700e-06, -1.788133167773523e-06, 0.000000000000000e+00, -1.790022303783197e-06, -1.791907754449102e-06, 0.000000000000000e+00, -1.793986195800175e-06, -1.791907754449102e-06, 0.000000000000000e+00, -1.793986195800175e-06, -2.161921775956127e-04, 0.000000000000000e+00, -2.158151959016115e-04, -2.060854309376602e-04, 0.000000000000000e+00, -2.060356134956218e-04, -2.249437533770679e-04, 0.000000000000000e+00, -2.220637784499015e-04, -2.158138039874559e-04, 0.000000000000000e+00, -2.129295777489157e-04, -2.040866166286798e-04, 0.000000000000000e+00, -2.096958869673112e-04, -2.040866166286798e-04, 0.000000000000000e+00, -2.096958869673112e-04, -1.747949017870389e-02, 0.000000000000000e+00, -1.750164299996042e-02, -7.628973566983197e-03, 0.000000000000000e+00, -7.451636760578769e-03, -3.313835048148284e-02, 0.000000000000000e+00, -2.554777669281731e-02, -1.962476560186633e-02, 0.000000000000000e+00, -1.585612646602422e-02, -1.343909107021195e-02, 0.000000000000000e+00, -1.772683088240641e-02, -1.343909107021196e-02, 0.000000000000000e+00, -1.772683088240640e-02, -1.411972220083785e+01, 0.000000000000000e+00, -1.478421487297522e+01, -3.452976655765020e+00, 0.000000000000000e+00, -3.416172570489946e+00, -1.750544718404092e+01, 0.000000000000000e+00, -1.563335053090519e+01, -1.154690684262310e-04, 0.000000000000000e+00, -1.156071192055637e-04, -1.347869758750473e+01, 0.000000000000000e+00, -1.432359125634073e+01, -1.347869758750473e+01, 0.000000000000000e+00, -1.432359125634073e+01, -1.238164803780328e+02, 0.000000000000000e+00, -9.846960414081522e+01, -4.962810693619442e+01, 0.000000000000000e+00, -5.148700951636418e+01, -1.126170849622855e+02, 0.000000000000000e+00, -1.358577486971885e+02, -2.783116942281583e+01, 0.000000000000000e+00, -1.990261542972013e+01, -4.309519577890121e+02, 0.000000000000000e+00, 1.170214567979753e+01, -4.309519577890092e+02, 0.000000000000000e+00, 1.170214567979808e+01, -5.801913136384548e-03, 0.000000000000000e+00, -5.671037224064707e-03, -7.877622025919922e-03, 0.000000000000000e+00, -7.689318369389502e-03, -7.149783236703083e-03, 0.000000000000000e+00, -6.976866974238266e-03, -6.540985520678138e-03, 0.000000000000000e+00, -6.394102571729896e-03, -6.845446759957720e-03, 0.000000000000000e+00, -6.685738253999717e-03, -6.845446759957720e-03, 0.000000000000000e+00, -6.685738253999717e-03, -6.221868532072372e-03, 0.000000000000000e+00, -6.106017929580825e-03, -4.340567514264475e-02, 0.000000000000000e+00, -4.235856196423243e-02, -2.898625181969538e-02, 0.000000000000000e+00, -2.817646935455830e-02, -1.770072264215022e-02, 0.000000000000000e+00, -1.736696322765913e-02, -2.300735123415197e-02, 0.000000000000000e+00, -2.253336451281508e-02, -2.300735123415198e-02, 0.000000000000000e+00, -2.253336451281509e-02, -7.062292402550230e-03, 0.000000000000000e+00, -6.765748027512658e-03, -1.566496277531356e+00, 0.000000000000000e+00, -1.537424316516422e+00, -8.146655912304622e-01, 0.000000000000000e+00, -7.803753787351888e-01, -2.222974619306271e-01, 0.000000000000000e+00, -2.171001876064302e-01, -4.306940873741419e-01, 0.000000000000000e+00, -4.303526766172037e-01, -4.306940873741422e-01, 0.000000000000000e+00, -4.303526766172037e-01, -6.768036635877278e-02, 0.000000000000000e+00, -6.437002613218992e-02, -4.918522637758417e+00, 0.000000000000000e+00, -6.017870983921851e+00, -1.506910791226567e+01, 0.000000000000000e+00, -1.517284117942063e+01, -2.311699688716410e-01, 0.000000000000000e+00, -1.980706158200898e-01, -2.249330422800288e+01, 0.000000000000000e+00, -2.587854994391239e+01, -2.249330422800293e+01, 0.000000000000000e+00, -2.587854994391239e+01, -3.853068219629930e+01, 0.000000000000000e+00, -4.275884970893254e+01, -7.398214346784092e+02, 0.000000000000000e+00, -1.731306406119121e+03, -7.878624584070400e+00, 0.000000000000000e+00, -9.758573014808400e+00, -2.340870654245849e+01, 0.000000000000000e+00, -1.867510240548068e+01, -7.019526812912073e+02, 0.000000000000000e+00, 1.183890607590210e+01, -7.019526812912094e+02, 0.000000000000000e+00, 1.183890607590141e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gvt4_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gvt4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gvt4_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gvt4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.701640148156980e-04, 2.700951060688416e-04, 2.701587925339757e-04, 2.700913236202732e-04, 2.701378821044468e-04, 2.700625507624869e-04, 2.701962901640032e-04, 2.701371350130697e-04, 2.701608480349646e-04, 2.701042788807724e-04, 2.701608480349646e-04, 2.701042788807724e-04, 4.357897753600478e-03, 4.361163104215329e-03, 4.356766593691894e-03, 4.360653586688996e-03, 4.337427735886663e-03, 4.334564579884023e-03, 4.333600967461912e-03, 4.335792501557114e-03, 4.360878291487665e-03, 4.318175987485626e-03, 4.360878291487665e-03, 4.318175987485626e-03, 3.878065100671839e-02, 3.838519796192078e-02, 3.886936021255667e-02, 3.847042462358635e-02, 4.040256086283887e-02, 4.005846418379844e-02, 3.780723424209532e-02, 3.742766345958830e-02, 3.858130448717447e-02, 3.669432002990780e-02, 3.858130448717447e-02, 3.669432002990780e-02, 9.683343560249241e-02, 8.406315611740169e-02, 9.691622703020186e-02, 8.245235129483421e-02, 5.655700993249377e-02, 5.026874824256763e-02, 1.429443306772748e-01, 1.282800461603474e-01, 9.460844535435674e-02, 1.395769211949518e-01, 9.460844535435674e-02, 1.395769211949520e-01, 1.428611383263657e-04, 1.693025716142891e-04, 1.733798746519799e-04, 2.114334314476755e-04, 1.468593113599292e-02, 1.703025721604700e-02, 2.908541032859490e-05, 2.684246417467411e-05, 1.019152354020774e-04, 4.878071059450081e-05, 1.019152354020776e-04, 4.878071059450090e-05, 9.263227725106422e-04, 9.263288160305399e-04, 9.235944665522089e-04, 9.236914095507813e-04, 9.260544890243883e-04, 9.261540143824738e-04, 9.237181661750706e-04, 9.237626747166864e-04, 9.250126274542939e-04, 9.250181475286038e-04, 9.250126274542939e-04, 9.250181475286038e-04, 5.877762194618981e-03, 5.843349797303326e-03, 5.620252465132803e-03, 5.595885537993477e-03, 5.901704621688017e-03, 5.864148805648213e-03, 5.670348389295433e-03, 5.629900824732693e-03, 5.707526982029632e-03, 5.706574323960913e-03, 5.707526982029632e-03, 5.706574323960913e-03, 1.671760635991423e-02, 1.643865298776662e-02, 1.280419191588885e-02, 1.247412315286103e-02, 2.708092880843081e-02, 2.219857598702141e-02, 2.429735518837286e-02, 2.075983053601077e-02, 1.413672528181968e-02, 1.694065653568117e-02, 1.413672528181967e-02, 1.694065653568117e-02, 1.003597496035157e-01, 1.036711648974468e-01, 9.377297718714367e-02, 9.384922288902259e-02, 9.423415374902844e-02, 9.895944083565397e-02, 6.104208130275622e-03, 6.104296480409922e-03, 1.207273690849542e-01, 1.321117474465433e-01, 1.207273690849542e-01, 1.321117474465432e-01, 1.699197106405916e-05, 1.660955508159959e-05, 3.154587671996806e-05, 3.046073934946155e-05, 7.457427415167133e-05, 9.856391802452279e-05, 6.083481791922803e-02, 5.828871074509889e-02, 3.705678443457634e-05, 9.876800758062370e-05, 3.705678443457625e-05, 9.876800758062360e-05, 6.681353477003112e-03, 6.616742313139300e-03, 7.482807240488627e-03, 7.406086912879079e-03, 7.202248642044351e-03, 7.127593349285763e-03, 6.966880747174643e-03, 6.900215671718306e-03, 7.085096596482430e-03, 7.014339542804924e-03, 7.085096596482430e-03, 7.014339542804928e-03, 7.592546622281080e-03, 7.497471176625459e-03, 1.699860387495741e-02, 1.680568742923529e-02, 1.384660603846205e-02, 1.366053960490250e-02, 1.101483998257627e-02, 1.093577355754480e-02, 1.248339163047255e-02, 1.233855114430939e-02, 1.248339163047255e-02, 1.233855114430939e-02, 1.411722336689032e-02, 1.349056005213597e-02, 7.107564288138681e-02, 7.067018316071172e-02, 5.832710396284353e-02, 5.714209205361316e-02, 4.077049526994700e-02, 4.069886416871469e-02, 4.673189445048224e-02, 4.665612800993001e-02, 4.673189445048223e-02, 4.665612800992996e-02, 2.495348965103683e-02, 2.384909106885749e-02, 1.261846701964031e-02, 1.290721752866165e-02, 2.786912763739085e-02, 3.081204204233608e-02, 4.011629616538304e-02, 3.285221302640576e-02, 9.122190719237157e-02, 1.104224692455323e-01, 9.122190719237169e-02, 1.104224692455323e-01, 3.390123949916811e-04, 3.846836964818331e-04, 1.843073967320960e-06, 2.572051756231900e-06, 1.123706933330724e-05, 1.439657306795272e-05, 9.020270255935012e-02, 8.838438738719605e-02, 6.739321402958637e-05, 7.900696474448624e-05, 6.739321402958631e-05, 7.900696474448624e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
