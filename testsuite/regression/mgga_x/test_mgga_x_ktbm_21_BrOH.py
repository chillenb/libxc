
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_21_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_21", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.495987141388348e+01, -2.495993534515477e+01, -2.496038518710527e+01, -2.495934445179137e+01, -2.495990363099103e+01, -2.495990363099103e+01, -3.411237984024509e+00, -3.411371591946916e+00, -3.415678721516123e+00, -3.416619127743186e+00, -3.411276311040509e+00, -3.411276311040509e+00, -5.855234832891886e-01, -5.849145843710620e-01, -5.701539458788237e-01, -5.804588790007608e-01, -5.853088278514520e-01, -5.853088278514520e-01, -1.764017989619613e-01, -1.792471415088632e-01, -6.619739053882433e-01, -1.130178930920819e-01, -1.771843176286510e-01, -1.771843176286510e-01, -8.506603372222808e-03, -8.909325180566375e-03, -3.629317801102986e-02, -4.061584388363737e-03, -8.817400058995067e-03, -8.817400058995065e-03, -6.104041890383248e+00, -6.104367267361756e+00, -6.104127196822484e+00, -6.104377344021345e+00, -6.104139997699354e+00, -6.104139997699354e+00, -2.091697393734836e+00, -2.125975683598885e+00, -2.087797898788485e+00, -2.115228974245873e+00, -2.119690130334245e+00, -2.119690130334245e+00, -6.192799939861900e-01, -6.680149212868065e-01, -5.594269663476843e-01, -5.824404080234891e-01, -6.572607848580696e-01, -6.572607848580696e-01, -8.246423092754732e-02, -1.684673231479363e-01, -8.150265706092433e-02, -1.924395915394984e+00, -9.708098065240471e-02, -9.708098065240471e-02, -3.921777061336435e-03, -4.478561022642857e-03, -3.362466364364526e-03, -5.054428500144694e-02, -4.080043547899700e-03, -4.080043547899700e-03, -6.783525960172884e-01, -6.808421199423803e-01, -6.800682433035991e-01, -6.793767187299823e-01, -6.797286657944689e-01, -6.797286657944689e-01, -6.492038431562147e-01, -5.786480306471244e-01, -6.077668117699080e-01, -6.280562521493733e-01, -6.178597724324818e-01, -6.178597724324818e-01, -6.854652152794922e-01, -2.231004713600009e-01, -2.726381197131964e-01, -3.546732481277257e-01, -3.163736553272454e-01, -3.163736553272454e-01, -4.841679017905816e-01, -3.363758969055447e-02, -4.557230847625188e-02, -3.381057120949247e-01, -6.685519463682786e-02, -6.685519463682785e-02, -9.924676189108599e-03, -1.226566092441862e-03, -2.334623672964766e-03, -6.373760263075215e-02, -3.467571402892276e-03, -3.467571402892270e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_21_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_21", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.980373662996369e+01, -2.980382808796815e+01, -2.980415429019368e+01, -2.980265021130688e+01, -2.980378565052382e+01, -2.980378565052382e+01, -4.892892655644497e+00, -4.893033791837671e+00, -4.897452344513088e+00, -4.896466008497486e+00, -4.892952907487514e+00, -4.892952907487514e+00, -8.173343134072200e-01, -8.160272732659080e-01, -7.853000162409464e-01, -8.028253939041989e-01, -8.168741461267326e-01, -8.168741461267326e-01, -2.385847964227496e-01, -2.427737913476470e-01, -8.883277270784579e-01, -1.501670966794752e-01, -2.397660407049229e-01, -2.397660407049229e-01, -1.109048334194854e-02, -1.162176767842609e-02, -4.778884464264593e-02, -5.418816616394868e-03, -1.149793111101550e-02, -1.149793111101549e-02, -7.318043454751223e+00, -7.322019240130333e+00, -7.318407556712281e+00, -7.321501289386231e+00, -7.320135397275310e+00, -7.320135397275310e+00, -2.748550897129852e+00, -2.772861707472553e+00, -2.740475441011494e+00, -2.759837057523518e+00, -2.775708515125233e+00, -2.775708515125233e+00, -8.365061747622213e-01, -9.466592767886588e-01, -7.886506317875627e-01, -8.522436226334584e-01, -8.692385298514751e-01, -8.692385298514751e-01, -1.089720508743433e-01, -2.250708357564914e-01, -1.077114652212984e-01, -2.869748569769002e+00, -1.283066925156295e-01, -1.283066925156295e-01, -5.182862182156724e-03, -5.951884015653674e-03, -4.423526615277632e-03, -6.719523218639313e-02, -5.444481829274117e-03, -5.444481829274113e-03, -9.005612486986405e-01, -8.774124102755102e-01, -8.853968708634318e-01, -8.918123201208762e-01, -8.885796640375521e-01, -8.885796640375521e-01, -8.772608655694686e-01, -7.012057471496845e-01, -7.327809209422154e-01, -7.759745157658868e-01, -7.525965477340426e-01, -7.525965477340427e-01, -9.916305952269096e-01, -3.002518289124810e-01, -3.690507153304744e-01, -4.883270040877314e-01, -4.281747818401774e-01, -4.281747818401773e-01, -6.419652463993849e-01, -4.409561243551130e-02, -6.012170928642312e-02, -4.688266515725176e-01, -8.818000418063660e-02, -8.818000418063666e-02, -1.323029725590980e-02, -1.643736197454161e-03, -3.062916476120367e-03, -8.412046887279795e-02, -4.630581838009577e-03, -4.630581838009567e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_21_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_21", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.323304907039734e-08, -2.323296807791319e-08, -2.323254808924211e-08, -2.323389946609955e-08, -2.323300653892561e-08, -2.323300653892561e-08, -1.643672495745203e-05, -1.644036905917996e-05, -1.654858024829373e-05, -1.651372198265015e-05, -1.643734478454964e-05, -1.643734478454964e-05, -4.307036004925610e-03, -4.288683915307377e-03, -3.841555735279046e-03, -4.188345164650804e-03, -4.301077549556929e-03, -4.301077549556929e-03, -7.232762887965576e-01, -7.354509155691664e-01, -9.363038805356289e-04, -2.571129381630186e-01, -7.257188272295455e-01, -7.257188272295455e-01, -3.098642228376293e+01, -2.772431264639498e+01, -9.930241665384820e-01, 2.796010825600607e+00, -2.929463094056632e+01, -2.929463094056628e+01, -7.077094731730120e-06, -7.078683431502410e-06, -7.077366490107749e-06, -7.078594046602649e-06, -7.077772343676238e-06, -7.077772343676238e-06, -1.504022594344321e-04, -1.535126161605909e-04, -1.497649198350418e-04, -1.524059428139463e-04, -1.532870124981952e-04, -1.532870124981952e-04, -3.105598261761771e-02, -2.755631769580294e-02, -3.134984648427552e-02, -3.299095144012505e-02, -2.981241951413672e-02, -2.981241951413672e-02, -3.348322112521279e-01, -2.915760336006422e-01, -3.883979623084740e-01, -2.692201097474486e-04, -4.845754493124008e-01, -4.845754493124008e-01, -4.833307450553606e+01, -1.393465369640528e+01, -1.686011584915389e+02, -2.957824651413831e-01, 4.557206034874971e+00, 4.557206034875034e+00, -4.261248956874723e-02, -4.284739246160917e-02, -4.278744291280232e-02, -4.272320877929443e-02, -4.275702903827631e-02, -4.275702903827631e-02, -4.756122678459222e-02, -5.763954825473928e-02, -5.734600265619744e-02, -5.491739764606716e-02, -5.631924861410503e-02, -5.631924861410500e-02, -2.114987298487790e-02, -2.396955956531150e-01, -1.993011761595571e-01, -1.389050450345325e-01, -1.833465568666886e-01, -1.833465568666887e-01, -6.556951844412950e-02, -1.257616324575184e+00, -6.184126856460281e-01, -2.139046176732617e-01, -6.297436170575269e-01, -6.297436170575259e-01, -4.515368089167879e-01, 3.687369538738924e+02, -3.008879203465364e+02, -7.403999535311395e-01, 1.520542274822651e+01, 1.520542274822651e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_21_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_21", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_21_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_21", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [3.341744636497884e-03, 3.341729741501867e-03, 3.341701820720370e-03, 3.341947579646399e-03, 3.341736425421604e-03, 3.341736425421604e-03, 1.032568967412973e-02, 1.032827309423962e-02, 1.040783892116611e-02, 1.040805755450697e-02, 1.032615348747042e-02, 1.032615348747042e-02, 1.526186583867805e-02, 1.518605891686189e-02, 1.358703244429706e-02, 1.601037843307331e-02, 1.523780887192138e-02, 1.523780887192138e-02, 1.016438271310292e-01, 1.060111271252060e-01, 2.356328877874180e-03, 9.881832684591724e-03, 1.026479249966366e-01, 1.026479249966366e-01, 5.192177177413649e-04, 5.321144153634128e-04, 1.352240079273820e-03, -3.399151328133237e-06, 5.466336230251981e-04, 5.466336230251802e-04, 1.334460366480519e-02, 1.332726968699576e-02, 1.334300939459661e-02, 1.332952137158341e-02, 1.333548691190118e-02, 1.333548691190118e-02, 2.423382981161166e-02, 2.531350373734737e-02, 2.421779850180421e-02, 2.510702050177160e-02, 2.496569344600499e-02, 2.496569344600499e-02, 9.452995502823629e-02, 8.567059021965226e-02, 8.003095361638801e-02, 8.105690604685067e-02, 9.872528359578941e-02, 9.872528359578941e-02, 5.685175849741451e-03, 4.233647054460864e-02, 6.373302896555670e-03, 2.350600230131231e-02, 1.394445866884338e-02, 1.394445866884338e-02, 6.722009382468119e-05, 2.652977080875044e-05, 1.569317245784632e-04, 1.048846292902532e-03, -5.604704834062461e-06, -5.604704834067997e-06, 9.592424139100626e-02, 1.024002012307294e-01, 1.001220769367552e-01, 9.832536986567951e-02, 9.922707075076610e-02, 9.922707075076610e-02, 9.786581816043551e-02, 1.383464661790426e-01, 1.351981740770822e-01, 1.238592331086226e-01, 1.300823120080956e-01, 1.300823120080957e-01, 7.673784627244164e-02, 7.223486981897329e-02, 9.350368673839156e-02, 1.084651940130911e-01, 1.142737186083740e-01, 1.142737186083741e-01, 1.135714964257218e-01, 1.386182952173385e-03, 1.695858786669128e-03, 1.295701236058900e-01, 5.814094397585380e-03, 5.814094397585410e-03, 1.184667830723449e-05, -1.137974294038581e-05, 9.639215699783762e-05, 5.872760426264174e-03, -1.161849650881641e-05, -1.161849650881128e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
