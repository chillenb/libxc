
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_21_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_21", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.175595542303476e+01, -2.175606997133898e+01, -2.175661417603138e+01, -2.175474410064622e+01, -2.175601547294566e+01, -2.175601547294566e+01, -3.048400251062644e+00, -3.048508899252649e+00, -3.051894976053775e+00, -3.050825465831790e+00, -3.048444909557035e+00, -3.942278188470136e+00, -5.411939395274689e-01, -6.777207088741316e-01, -6.455966910349182e-01, -6.568424598423694e-01, -6.785408875041118e-01, -6.785408875041118e-01, -1.812476129574042e-01, -1.849304844130528e-01, -6.446427005494210e-01, -1.166901920074745e-01, -1.823280808015675e-01, -1.823280808015675e-01, -8.512102265092287e-03, -8.916553589658659e-03, -3.647036253281108e-02, -4.081322091668101e-03, -8.823643234408337e-03, -8.823643234408337e-03, -6.108363260098598e+00, -6.108641829989383e+00, -6.108388903778740e+00, -5.488264036968198e+00, -6.108511217164551e+00, -6.108511217164551e+00, -1.664235214885394e+00, -1.684544879296558e+00, -1.655849756883731e+00, -1.671638066261289e+00, -1.689176351515675e+00, -2.194002245349128e+00, -6.791976633624224e-01, -7.437278310010296e-01, -6.350551267104334e-01, -6.756965535962557e-01, -7.095558351499004e-01, -5.815387497890432e-01, -8.135866000671781e-02, -1.708659876296389e-01, -8.023049244202173e-02, -2.258546685911482e+00, -9.854493111647221e-02, -9.854493111647221e-02, -4.034429543750352e-03, -4.499715379041883e-03, -3.372604439060849e-03, -5.126633638367364e-02, -4.201024227801254e-03, -4.099900753211232e-03, -6.882989156430047e-01, -6.903848139625534e-01, -6.589143056238416e-01, -6.891828504278485e-01, -6.894845079610169e-01, -6.894845079610169e-01, -6.683383027657959e-01, -5.865101744715032e-01, -6.194882386319246e-01, -6.432432933026997e-01, -6.320198964345043e-01, -5.378820750120655e-01, -7.802311827375670e-01, -1.863955672791534e-01, -2.819959571796677e-01, -2.995511531882002e-01, -3.341352232345223e-01, -3.341352232345223e-01, -4.012299638509458e-01, -3.373693015903542e-02, -4.586893875432285e-02, -3.769716901751061e-01, -6.621448508121648e-02, -6.755430875275727e-02, -9.975227638582605e-03, -1.231811648074106e-03, -2.340080920031246e-03, -6.444313555120867e-02, -3.484319123777661e-03, -3.484319123777657e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_21_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_21", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.282259234583664e+01, -3.282268376642400e+01, -3.282314918301152e+01, -3.282165211266165e+01, -3.282264006124031e+01, -3.282264006124031e+01, -4.803538414699069e+00, -4.803791130139044e+00, -4.811548835342697e+00, -4.808932626981949e+00, -4.803631419297370e+00, -4.893775243823371e+00, -7.577818772060685e-01, -9.058669642238343e-01, -8.652905162513110e-01, -8.796304313006801e-01, -9.068627403467127e-01, -9.068627403467127e-01, -2.429533036188422e-01, -2.477739780138516e-01, -8.538688622752454e-01, -1.532169326181101e-01, -2.443760231330126e-01, -2.443760231330126e-01, -1.107446277890499e-02, -1.160067185931339e-02, -4.746005786228613e-02, -5.309879983123755e-03, -1.147979316672544e-02, -1.147979316672543e-02, -7.312643258160369e+00, -7.316670441920914e+00, -7.313081079649559e+00, -8.007565334313563e+00, -7.314669329317860e+00, -7.314669329317860e+00, -2.564457606275833e+00, -2.609056611836869e+00, -2.545452908648945e+00, -2.580659183847342e+00, -2.619503459255204e+00, -2.784023475895504e+00, -8.018499174366506e-01, -8.713940989168170e-01, -7.689091437170437e-01, -7.904718245857940e-01, -8.289039403499464e-01, -9.111549968112703e-01, -1.058766992493537e-01, -2.274291537188199e-01, -1.043064867869338e-01, -2.636776618666208e+00, -1.291940196436894e-01, -1.291940196436894e-01, -5.378687550956202e-03, -5.854218993396886e-03, -4.387825673034565e-03, -6.759882268623398e-02, -5.600736407805811e-03, -5.334051920379072e-03, -8.874358279255481e-01, -8.649163216910302e-01, -9.118922853431698e-01, -8.788886966825540e-01, -8.757346475743659e-01, -8.757346475743659e-01, -8.524292443924233e-01, -6.965624050683846e-01, -7.219622454573330e-01, -7.585151579080802e-01, -7.378109795858802e-01, -8.208383880567985e-01, -9.093524779989489e-01, -2.502224984919919e-01, -3.760631397557005e-01, -4.631043586350855e-01, -4.360822307724299e-01, -4.360822307724301e-01, -6.347934870375908e-01, -4.389987857540040e-02, -5.970427777928226e-02, -4.658122892146976e-01, -8.639325490070007e-02, -8.811071761594312e-02, -1.297801419346520e-02, -1.602610373135617e-03, -3.044490405745644e-03, -8.405167281429569e-02, -4.533167613699276e-03, -4.533167613699266e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_21_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_21", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.015187436793193e-08, -2.015185966107800e-08, -2.015163318227166e-08, -2.015189571893051e-08, -2.015186771756130e-08, -2.015186771756130e-08, -1.459423507993014e-05, -1.459750125939386e-05, -1.469374735251806e-05, -1.465177449495720e-05, -1.459486402669813e-05, -1.938094849354586e-05, -3.747873647312156e-03, -5.492065706780710e-03, -4.880908568345390e-03, -5.233780812785974e-03, -5.508448281097861e-03, -5.508448281097861e-03, -7.610266806885886e-01, -7.780320218270903e-01, -8.497414173122069e-04, -3.569413482575320e-01, -7.653014449148935e-01, -7.653014449148935e-01, -3.312606953023531e+01, -3.017752650022074e+01, -1.468265528126707e+00, -8.303539677439652e+01, -3.151791533862718e+01, -3.151791533862717e+01, -7.082486721860819e-06, -7.084017252694482e-06, -7.082684102832049e-06, -6.335436776536610e-06, -7.083226603622616e-06, -7.083226603622616e-06, -1.153055854216629e-04, -1.175394890851133e-04, -1.141618936092372e-04, -1.160400370393324e-04, -1.182868060570514e-04, -1.598561469446600e-04, -3.434152492366844e-02, -3.085005382848914e-02, -3.607606713575542e-02, -3.860950027189306e-02, -3.238146171878255e-02, -2.632827883892646e-02, 1.576218141001256e-01, -3.056461636621402e-01, 1.558321834975685e-01, -3.185868717392317e-04, -5.657571334809222e-01, -5.657571334809222e-01, 2.969089874080739e+02, -7.688869359977281e+01, -2.715628565285471e+02, 9.341731408044363e-01, 2.764831341193254e+02, -1.027475864685735e+02, -4.327481887423366e-02, -4.348630248561230e-02, -4.139382499821893e-02, -4.337774964147058e-02, -4.340871346865467e-02, -4.340871346865467e-02, -4.904332138656040e-02, -5.851806634412295e-02, -5.855469571083615e-02, -5.634524068959243e-02, -5.771726656427591e-02, -4.882070996429292e-02, -2.423498811398615e-02, -1.548378758877242e-01, -2.101554274258122e-01, -1.146814492716232e-01, -1.970463713569026e-01, -1.970463713569026e-01, -5.363974275942127e-02, -1.572965729476899e+00, -9.543235786438365e-01, -2.422098395591719e-01, 3.997407497441313e-01, -8.184161568829584e-01, -1.499641389062258e+01, -1.071955077914205e+03, -4.173893855411916e+02, -9.832680958683330e-01, -1.685109296435158e+02, -1.685109296435161e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_21_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_21", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.236570063950588e-03, 2.236583590205866e-03, 2.236638174919617e-03, 2.236418715060568e-03, 2.236577220327807e-03, 2.236577220327807e-03, 5.563507299952661e-03, 5.565579091364015e-03, 5.627817294486805e-03, 5.603241972534305e-03, 5.564055920056690e-03, 1.796522254818712e-02, 3.382945198321870e-03, 4.138655430453828e-02, 3.413028031802096e-02, 3.739276147436926e-02, 4.158169841150963e-02, 4.158169841150963e-02, 1.185445928232224e-01, 1.259454397415770e-01, -2.459837075181651e-04, 1.953206533159783e-02, 1.206093150906137e-01, 1.206093150906137e-01, 5.658422828464551e-04, 5.933858824957556e-04, 2.204491305412147e-03, 1.541111959462722e-04, 6.005859469460561e-04, 6.005859469460541e-04, 1.336905082367619e-02, 1.335139892231272e-02, 1.336711330541442e-02, 1.000407003284415e-02, 1.336018865337140e-02, 1.336018865337140e-02, 6.634201381089501e-03, 7.155664494346493e-03, 6.405922797021234e-03, 6.816761647273832e-03, 7.294790424923146e-03, 2.829527963961463e-02, 1.266331476425364e-01, 1.163424687248362e-01, 1.246358856133340e-01, 1.301584974489803e-01, 1.242881573358637e-01, 6.450291687492525e-02, -1.558194500866900e-03, 4.784339063793518e-02, -1.731058527789474e-03, 3.908913303660003e-02, 1.873611245183151e-02, 1.873611245183151e-02, -4.744497829926922e-07, 1.914081091082749e-04, 2.847527281308741e-04, -4.641635360764514e-04, -5.463651870631780e-07, 1.934304215120836e-04, 9.923179149818327e-02, 1.059200954210828e-01, 9.274439453337703e-02, 1.017177401320998e-01, 1.026513809168601e-01, 1.026513809168601e-01, 1.048543054654770e-01, 1.441567769888766e-01, 1.427769617892471e-01, 1.320718191278427e-01, 1.385247683119242e-01, 8.539795848043448e-02, 1.129506023696226e-01, 9.940542906230864e-04, 1.102360391159350e-01, 3.898375079663333e-02, 1.434476858888437e-01, 1.434476858888440e-01, 4.703149365293763e-02, 1.840865173476240e-03, 2.941357139544609e-03, 1.922532009630719e-01, -1.482463701315524e-03, 8.647510355685952e-03, 4.113162283993156e-04, 5.458297816130612e-05, 1.458591435447870e-04, 9.017586740090754e-03, 1.946389587983564e-04, 1.946389587983558e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
