
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_14_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_14", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.483412985597705e+01, -2.483419246980761e+01, -2.483461561087702e+01, -2.483368725730982e+01, -2.483415304367887e+01, -2.483415304367887e+01, -3.394772181079782e+00, -3.394938529643647e+00, -3.399638343147263e+00, -3.400508880011962e+00, -3.399027552353124e+00, -3.399027552353124e+00, -5.661571336287288e-01, -5.653020729323212e-01, -5.461203086395668e-01, -5.589822474673344e-01, -5.554196232490825e-01, -5.554196232490825e-01, -1.555344601794239e-01, -1.588473068129155e-01, -6.019774521359189e-01, -1.038105092565523e-01, -1.213370002292012e-01, -1.213370002292012e-01, -4.493510062525895e-03, -4.728216251781179e-03, -2.610493542797418e-02, -2.583876119575545e-03, -3.252242022906069e-03, -3.252242022906069e-03, -6.043846481470919e+00, -6.043533504862578e+00, -6.043903625907631e+00, -6.043624515397639e+00, -6.043652363466411e+00, -6.043652363466411e+00, -2.075223997243811e+00, -2.113103619122251e+00, -2.063075702306274e+00, -2.097655055462539e+00, -2.101964737393344e+00, -2.101964737393344e+00, -6.341992130128328e-01, -6.797280085464732e-01, -5.485405775187949e-01, -5.620799093460170e-01, -6.486984946025993e-01, -6.486984946025993e-01, -6.958295841991896e-02, -1.451411253408557e-01, -6.409989946879313e-02, -1.928424629855969e+00, -8.398380578041978e-02, -8.398380578041981e-02, -1.982075846480018e-03, -2.516842387162467e-03, -1.930495598752411e-03, -4.260608793803777e-02, -2.319850298388574e-03, -2.319850298388574e-03, -6.543145483478081e-01, -6.601187067120918e-01, -6.582559544687190e-01, -6.565602321087378e-01, -6.574214239786875e-01, -6.574214239786875e-01, -6.294916101454817e-01, -5.644769635907028e-01, -5.966944951554229e-01, -6.169006341720863e-01, -6.074135682798595e-01, -6.074135682798594e-01, -7.007932588137084e-01, -1.953062524042119e-01, -2.470549325165946e-01, -3.476109545434057e-01, -2.989966429383915e-01, -2.989966429383916e-01, -4.854688062730680e-01, -2.503614068746338e-02, -3.412937329023476e-02, -3.485391737247774e-01, -5.496127333083990e-02, -5.496127333083990e-02, -6.291101174282298e-03, -6.720535826137067e-04, -1.419913214827918e-03, -5.167319324599057e-02, -2.149704886875866e-03, -2.149704886875865e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_14_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_14", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.913039547993952e+01, -2.913048053238219e+01, -2.913074563894439e+01, -2.912947538138912e+01, -2.913015707948824e+01, -2.913015707948824e+01, -5.006626784388857e+00, -5.006735039611306e+00, -5.009675806987247e+00, -5.009264309183701e+00, -5.008655960042628e+00, -5.008655960042628e+00, -8.443039873144409e-01, -8.425048907910979e-01, -8.021187281501592e-01, -8.246583649506366e-01, -8.188122816853468e-01, -8.188122816853468e-01, -2.196496063207607e-01, -2.250380267280753e-01, -8.494779015306071e-01, -1.405364697087876e-01, -1.671426166292336e-01, -1.671426166292337e-01, -5.782909656937801e-03, -6.089823883592567e-03, -3.400923899175857e-02, -3.360988947537227e-03, -4.212452804171713e-03, -4.212452804171711e-03, -7.121267755731584e+00, -7.124876661367178e+00, -7.121358643085851e+00, -7.124547591123221e+00, -7.123131647468556e+00, -7.123131647468556e+00, -2.835244983540012e+00, -2.858139644084426e+00, -2.821182446733907e+00, -2.842523312696897e+00, -2.854703139295100e+00, -2.854703139295100e+00, -8.427418219765702e-01, -9.340214759112245e-01, -7.872140886705647e-01, -8.347319729497131e-01, -8.540485070226389e-01, -8.540485070226389e-01, -9.205553118186686e-02, -1.995917429790052e-01, -8.468939913518340e-02, -2.854278551273739e+00, -1.122038804912527e-01, -1.122038804912528e-01, -2.629644994743303e-03, -3.309142001994738e-03, -2.514809501586576e-03, -5.595015624033652e-02, -3.044234937549346e-03, -3.044234937549347e-03, -8.587149003537133e-01, -8.346788785552164e-01, -8.426903998444157e-01, -8.496860245537076e-01, -8.461485025249497e-01, -8.461485025249497e-01, -8.435936785657954e-01, -6.943652417951455e-01, -7.106846344513643e-01, -7.452881753990163e-01, -7.250857904276903e-01, -7.250857904276902e-01, -9.840462279448771e-01, -2.747358917877193e-01, -3.532498673905649e-01, -4.974413035097764e-01, -4.267257142555512e-01, -4.267257142555511e-01, -6.545052472130131e-01, -3.244142355887610e-02, -4.460739941331579e-02, -4.845356884299895e-01, -7.240973662306670e-02, -7.240973662306668e-02, -8.278343941060664e-03, -9.011029045583486e-04, -1.837825887451140e-03, -6.774851400649146e-02, -2.808600964127352e-03, -2.808600964127351e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_14_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_14", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.285338437975724e-08, -2.285327876900231e-08, -2.285278400457545e-08, -2.285437192801654e-08, -2.285354330495300e-08, -2.285354330495300e-08, -1.659782833085967e-05, -1.660192425309728e-05, -1.671008652552771e-05, -1.667241237703745e-05, -1.667829463928942e-05, -1.667829463928942e-05, -4.510978057163171e-03, -4.489713692309024e-03, -4.014437512136025e-03, -4.379409036605987e-03, -4.284502844124525e-03, -4.284502844124525e-03, -6.109151517134243e-01, -6.248932904332861e-01, -8.722450219887152e-04, -3.411371322335528e-01, -4.503807022066615e-01, -4.503807022066615e-01, -8.278932960799060e+01, -7.518904406818642e+01, -1.607567404148828e+00, -1.644682315131816e+02, -1.378003747469957e+02, -1.378003747469954e+02, -6.900156160419909e-06, -6.900848316513905e-06, -6.900334011191004e-06, -6.900937358633323e-06, -6.900439455733889e-06, -6.900439455733889e-06, -1.509723477864127e-04, -1.540789676409299e-04, -1.495330539305420e-04, -1.525772639446626e-04, -1.533968981397149e-04, -1.533968981397149e-04, -3.079244132058473e-02, -2.679018601895762e-02, -3.204360360663137e-02, -3.345331298494403e-02, -3.043747706831702e-02, -3.043747706831702e-02, -3.689973915262452e-01, -2.644678865500683e-01, -4.016197316695692e-01, -2.688725101944727e-04, -5.281868819012788e-01, -5.281868819012792e-01, -6.417625532404124e+01, -1.059306313495438e+02, -7.540087634551081e+02, -7.448665649393095e-01, -2.432429927313283e+02, -2.432429927313291e+02, -4.370123706377196e-02, -4.412329514009284e-02, -4.400670891912734e-02, -4.388511867691005e-02, -4.394862272109856e-02, -4.394862272109856e-02, -4.806136660311069e-02, -5.895672465330324e-02, -5.943490801300209e-02, -5.674644956660551e-02, -5.843441799849449e-02, -5.843441799849448e-02, -2.084383458669604e-02, -2.152231092962907e-01, -1.855612967551203e-01, -1.394909028153228e-01, -1.787786462326862e-01, -1.787786462326863e-01, -6.548523180205171e-02, -1.971105217241630e+00, -9.307571191090623e-01, -2.170981340814447e-01, -7.394531194823402e-01, -7.394531194823404e-01, -1.412512421597920e+01, 1.319384459402981e+03, -1.094514266559553e+03, -9.014209295599848e-01, -4.066768962950267e+02, -4.066768962950275e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_14_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_14", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_14_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_14", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.957814864899901e-03, 2.957783226261271e-03, 2.957690039262972e-03, 2.958160458334483e-03, 2.957907220739449e-03, 2.957907220739449e-03, 1.140789043167226e-02, 1.141039148506869e-02, 1.147941824086962e-02, 1.148338226159887e-02, 1.147033328014200e-02, 1.147033328014200e-02, 2.060617260675804e-02, 2.048424351452866e-02, 1.795471827387425e-02, 2.088912023222523e-02, 2.002227281775725e-02, 2.002227281775725e-02, 8.652803647729343e-02, 9.177463796222401e-02, 3.806544735861655e-03, 1.696785794414953e-02, 3.479685315911641e-02, 3.479685315911646e-02, 2.869259985280909e-04, 3.019519617786785e-04, 1.099681992751361e-03, 9.840531383182173e-05, 1.714104240788551e-04, 1.714104240788570e-04, 1.107196126442922e-02, 1.104277138377277e-02, 1.107072219453977e-02, 1.104495097205431e-02, 1.105711535951409e-02, 1.105711535951409e-02, 2.642390857043003e-02, 2.747182996042962e-02, 2.629710796688736e-02, 2.730106433021878e-02, 2.705473864644782e-02, 2.705473864644782e-02, 9.674060120986795e-02, 7.573354322289400e-02, 8.435262657159263e-02, 7.607252984733498e-02, 9.582952180483564e-02, 9.582952180483564e-02, 5.585806579493132e-03, 3.587370129966842e-02, 4.679166262961465e-03, 2.261714791572868e-02, 1.471376318417672e-02, 1.471376318417671e-02, 1.279664765554087e-05, 5.134509517331946e-05, 1.854602804943073e-04, 2.380614589194920e-03, 9.502841311990890e-05, 9.502841311990654e-05, 6.985749134640025e-02, 7.992470381982165e-02, 7.640038348204582e-02, 7.346634245793240e-02, 7.493535083244100e-02, 7.493535083244100e-02, 7.053863422928547e-02, 1.406936520236834e-01, 1.319083043341777e-01, 1.099579188468726e-01, 1.220326054424166e-01, 1.220326054424165e-01, 7.145048697936478e-02, 6.225618332443419e-02, 8.901585529374970e-02, 1.197197890159614e-01, 1.190733250037411e-01, 1.190733250037412e-01, 1.229083824483585e-01, 1.229262792184291e-03, 1.464082443466094e-03, 1.508591280598518e-01, 5.513552442899834e-03, 5.513552442899850e-03, 1.066928590793500e-04, -6.087839402109379e-06, 1.137850931910504e-04, 5.689265927868222e-03, 1.336551364997316e-04, 1.336551364997349e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
