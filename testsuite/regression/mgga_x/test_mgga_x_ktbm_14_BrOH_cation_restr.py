
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_14_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_14", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.166894328527580e+01, -2.166906558799450e+01, -2.166960306592101e+01, -2.166778768897546e+01, -2.166873973897644e+01, -2.166873973897644e+01, -3.026925527849840e+00, -3.027071650305014e+00, -3.030982295669635e+00, -3.029675042914572e+00, -3.029500339715782e+00, -3.931553987460546e+00, -5.213912791710709e-01, -6.635360200258518e-01, -6.271168781182325e-01, -6.409416104964967e-01, -6.378298349109650e-01, -6.378298349109650e-01, -1.577328405685603e-01, -1.616424606746478e-01, -5.851703842413470e-01, -1.064549978772965e-01, -1.245116019857533e-01, -1.245116019857533e-01, -4.495291477433755e-03, -4.731619554443915e-03, -2.624030050867913e-02, -2.595755132235916e-03, -3.261945456376536e-03, -3.261945456376536e-03, -6.047995540622023e+00, -6.047634491949582e+00, -6.047966411488482e+00, -5.440377633325824e+00, -6.047820195266651e+00, -6.047820195266651e+00, -1.642846746644342e+00, -1.666503959972504e+00, -1.625191534741415e+00, -1.646007506826350e+00, -1.664698739191901e+00, -2.174478163386287e+00, -6.883546484742028e-01, -7.469689984764135e-01, -6.227259611834954e-01, -6.624207180858146e-01, -7.013614610024722e-01, -5.722343254414147e-01, -6.799511972683481e-02, -1.468987946126478e-01, -6.295714360735404e-02, -2.260421314567010e+00, -8.505618857376222e-02, -8.505618857376222e-02, -2.017364339460898e-03, -2.537563789512336e-03, -1.940417295277960e-03, -4.248064775968802e-02, -2.354491049750768e-03, -2.337578630679280e-03, -6.632408072063030e-01, -6.687094833963552e-01, -6.344900675556052e-01, -6.653755309945577e-01, -6.661921620621150e-01, -6.661921620621150e-01, -6.466017877607652e-01, -5.714247541078975e-01, -6.071582500675246e-01, -6.307382984941869e-01, -6.202730487567375e-01, -5.245869884417708e-01, -7.861693376865603e-01, -1.641870284285567e-01, -2.539839824548554e-01, -2.908127339948321e-01, -3.139883814576078e-01, -3.139883814576078e-01, -3.977916202166363e-01, -2.510470221394975e-02, -3.435604082833284e-02, -3.819003635028541e-01, -5.392963890174604e-02, -5.550535270710209e-02, -6.344773733608436e-03, -6.782710927928511e-04, -1.423762901542966e-03, -5.199629281838272e-02, -2.162995558413764e-03, -2.162995558413763e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_14_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_14", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.221856281488521e+01, -3.221864290362674e+01, -3.221903060647085e+01, -3.221783768022046e+01, -3.221845829610368e+01, -3.221845829610368e+01, -4.924168246936016e+00, -4.924409280409380e+00, -4.930824361922581e+00, -4.928684174513269e+00, -4.928401937048752e+00, -5.007749214754786e+00, -7.879577111202916e-01, -9.364645587082654e-01, -8.876910137788282e-01, -9.066041150100171e-01, -9.024355765867738e-01, -9.024355765867738e-01, -2.218517067756728e-01, -2.278217720950284e-01, -8.167762746764730e-01, -1.426069804468184e-01, -1.702482546108970e-01, -1.702482546108969e-01, -5.779648480481321e-03, -6.083571049651808e-03, -3.381084133254142e-02, -3.337174897754034e-03, -4.193741996868743e-03, -4.193741996868743e-03, -7.116001072067650e+00, -7.119664288638786e+00, -7.116201015072068e+00, -7.813382107883243e+00, -7.117837745631830e+00, -7.117837745631830e+00, -2.654351407011513e+00, -2.698954721206146e+00, -2.620030383823511e+00, -2.660248944655764e+00, -2.695703912677917e+00, -2.865062071202494e+00, -8.073572351798168e-01, -8.622469106307882e-01, -7.726520121655885e-01, -7.756564630357475e-01, -8.142098745158433e-01, -8.962042331678590e-01, -8.995359670138688e-02, -2.012570522622433e-01, -8.332943418001557e-02, -2.611898029238657e+00, -1.127684422985746e-01, -1.127684422985746e-01, -2.689788084510481e-03, -3.262353869584263e-03, -2.494686474176267e-03, -5.638031057160767e-02, -3.139223217541085e-03, -3.005282877934522e-03, -8.468550258803913e-01, -8.233388391244718e-01, -8.726564600673048e-01, -8.379783189866962e-01, -8.345091129995408e-01, -8.345091129995408e-01, -8.211570161954772e-01, -6.910015276750688e-01, -7.014833252183728e-01, -7.291793801684309e-01, -7.117807888457142e-01, -7.955219624972352e-01, -9.023629349465896e-01, -2.300913189831684e-01, -3.594836365686327e-01, -4.692291437970554e-01, -4.356857068897874e-01, -4.356857068897874e-01, -6.470083197296130e-01, -3.234179073136981e-02, -4.433262584843516e-02, -4.797952177045997e-01, -7.139171782600362e-02, -7.230796773381835e-02, -8.157830548388846e-03, -8.719830677463040e-04, -1.830406730788082e-03, -6.765637299371241e-02, -2.780834181144090e-03, -2.780834181144090e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_14_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_14", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.998792002953567e-08, -1.998788736789196e-08, -1.998759672553457e-08, -1.998809823311969e-08, -1.998785600784148e-08, -1.998785600784148e-08, -1.485112610220053e-05, -1.485484091432462e-05, -1.495182585857568e-05, -1.490720437236084e-05, -1.491818545970350e-05, -1.941526986385344e-05, -4.015329983366492e-03, -5.611695206918107e-03, -4.985615707376023e-03, -5.360425421371683e-03, -5.270280754073502e-03, -5.270280754073502e-03, -6.279046322648698e-01, -6.455176863958479e-01, -7.924366762413439e-04, -3.991823594194022e-01, -4.944359358446974e-01, -4.944359358446972e-01, -8.430855985368120e+01, -7.774826886838652e+01, -2.020300453296216e+00, -2.155436934344831e+02, -1.613106833583961e+02, -1.613106833583961e+02, -6.904994957336215e-06, -6.905631306047916e-06, -6.905072260523482e-06, -6.217974003251013e-06, -6.905300252369091e-06, -6.905300252369091e-06, -1.182589687413240e-04, -1.204962411581334e-04, -1.162256030986735e-04, -1.183889296401691e-04, -1.205015865831799e-04, -1.592662102432262e-04, -3.347807779515766e-02, -2.943806890526599e-02, -3.652750747331724e-02, -3.939691422462704e-02, -3.295295839025413e-02, -2.699337979308509e-02, 9.543491812546694e-02, -2.753393437705904e-01, 1.509049348610162e-01, -3.147276490922303e-04, -5.860308176065631e-01, -5.860308176065632e-01, 4.246874648588737e+02, -2.120151728781778e+02, -1.032216363915087e+03, 6.869072567744717e-01, 6.200264891422062e+02, -4.404882025468551e+02, -4.430226709338053e-02, -4.470439124044663e-02, -4.242347782426572e-02, -4.447994792428325e-02, -4.454085255923181e-02, -4.454085255923181e-02, -4.937412894542623e-02, -5.972134027154650e-02, -6.051154769132223e-02, -5.804440696644314e-02, -5.970325016387412e-02, -5.064015363324350e-02, -2.337490520020829e-02, -1.379153341304235e-01, -1.934774400079078e-01, -1.159357868881078e-01, -1.898141161862835e-01, -1.898141161862836e-01, -5.378218571385476e-02, -2.200158811950103e+00, -1.209574913972575e+00, -2.389700104680768e-01, 2.872112375947610e-01, -8.891865147611703e-01, -2.932856528584455e+01, -3.278471954787938e+03, -1.260989590547283e+03, -1.013632939065646e+00, -6.142150627184867e+02, -6.142150627184886e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_14_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_14", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.950513147400430e-03, 1.950514074688000e-03, 1.950513948815763e-03, 1.950500635498231e-03, 1.950508226805363e-03, 1.950508226805363e-03, 6.678206337023373e-03, 6.680274248478927e-03, 6.734684460996888e-03, 6.712083936955869e-03, 6.715204738733251e-03, 1.896611471957191e-02, 8.854193301823124e-03, 4.778057928139584e-02, 3.957831674423034e-02, 4.345011410053167e-02, 4.254009290065502e-02, 4.254009290065502e-02, 9.338896865376493e-02, 1.006032928558079e-01, 1.482899967711939e-03, 2.345826824677266e-02, 4.355870393157334e-02, 4.355870393157317e-02, 2.946232473176199e-04, 3.170055071638787e-04, 1.515005617517870e-03, 1.446148039518605e-04, 2.149847031837133e-04, 2.149847031837133e-04, 1.109307190088194e-02, 1.106357981248307e-02, 1.109139076587560e-02, 8.118948333593079e-03, 1.107829208325575e-02, 1.107829208325575e-02, 8.939172638448012e-03, 9.442244954935643e-03, 8.541268681807891e-03, 8.994393557073899e-03, 9.416115701954473e-03, 3.024003120931624e-02, 1.238992971476813e-01, 9.989716698134987e-02, 1.280116578461953e-01, 1.287314380369710e-01, 1.209764495640993e-01, 6.207607837497587e-02, -3.857300635483117e-04, 3.949758681945205e-02, -3.403112614760095e-04, 3.725314715674551e-02, 1.783995042064116e-02, 1.783995042064107e-02, -1.802523045387273e-08, 1.328781808181547e-04, 2.894593746059610e-04, -1.621211386799031e-04, -1.135423134906578e-07, 2.159183844043573e-04, 7.247826709676204e-02, 8.282228219008797e-02, 6.892146239461532e-02, 7.619362958836859e-02, 7.770483801111926e-02, 7.770483801111926e-02, 7.591389047461208e-02, 1.458792176526116e-01, 1.386544585206360e-01, 1.170612748556197e-01, 1.295259169698053e-01, 7.687993162072075e-02, 1.008229484935100e-01, 5.977459030255761e-03, 1.008374408475217e-01, 4.874626712670171e-02, 1.433009504741453e-01, 1.433009504741454e-01, 5.403238163397470e-02, 1.437396003954382e-03, 2.110691936616659e-03, 2.027769021176896e-01, -3.738831105901685e-04, 7.308441564291641e-03, 2.886071517825416e-04, 3.920170521728201e-05, 1.395330029510713e-04, 6.799923042764586e-03, 2.385386553503031e-04, 2.385386553503070e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
