
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_br89_1_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89_1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.880815586034122e+01, -1.880818644781883e+01, -1.880840557396117e+01, -1.880790357586902e+01, -1.880817127430518e+01, -1.880817127430518e+01, -3.542639134490252e+00, -3.542595916199233e+00, -3.541522809087775e+00, -3.543993995684244e+00, -3.542629805035031e+00, -3.542629805035031e+00, -7.489326204916915e-01, -7.493019014105059e-01, -7.607613209997743e-01, -7.629321216809405e-01, -7.490463459342260e-01, -7.490463459342260e-01, -2.414114676641877e-01, -2.415768588648358e-01, -8.617097197190989e-01, -2.153427334398516e-01, -2.413949487817873e-01, -2.413949487817873e-01, -7.792239105302061e-02, -7.865250407454846e-02, -1.334710987268689e-01, -7.063951885376701e-02, -7.796758072382087e-02, -7.796758072382087e-02, -9.180014594826483e+00, -6.625924664751447e+00, -3.815495385669105e+00, -9.987338606811667e+00, -4.290330870179640e+00, -6.008897088458670e+00, -1.429807665131221e+00, -2.631871288376679e+00, -2.333208737823993e+00, -2.351401888042616e+00, -2.338565440913983e+00, -2.073918863182981e+00, -1.240343978926599e+00, -9.811362835957184e-01, -1.062690702446574e+00, -5.959505999111716e-01, -6.569980667447461e-01, -7.010520911765630e-01, -7.122514049787813e-02, -4.217483240343167e-01, -7.006940858986065e-02, -2.023094439764363e+00, -1.844188336110799e-01, -1.620858586720874e-01, -1.398163209014591e-01, -2.297384250433266e+00, -2.948498102367647e-03, -4.423215824105006e-02, -9.597261668676584e-02, -3.584422243740326e-03, -2.965311916391841e+01, -4.350030633584900e-01, -4.358380681010250e-01, -4.676566784812164e+00, -4.361631667732088e-01, -8.794250268884815e+01, -4.233001017797259e-01, -5.560884344773361e-01, -9.644244345572677e-01, -4.447669574696324e-01, -6.275909135772341e-01, -1.212951748159286e+00, -1.390884956758391e+00, -1.688587239943095e-01, -2.004829288324643e-01, -2.578274069925243e-01, -4.501820063441824e-01, -4.074950655144250e-01, -5.098680681443697e-01, -2.430795763478633e-01, -1.625892709182399e-01, -3.606858886015682e-01, -5.762229184939240e-02, -1.509284861237449e-01, -8.717529231302928e-03, -2.308428857155951e-01, -2.045987425295140e-03, -5.681189334522722e-02, -3.046376264820169e-03, -3.046284116912566e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_br89_1_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89_1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.805975965356737e+01, -2.805983245779522e+01, -2.806023217914646e+01, -2.805903904088385e+01, -2.805979739193761e+01, -2.805979739193761e+01, -4.530921564459765e+00, -4.530991544149193e+00, -4.533109657810705e+00, -4.530449032811324e+00, -4.530977315766247e+00, -4.530977315766247e+00, -8.414692215289646e-01, -8.403117331726179e-01, -8.125976712184808e-01, -8.178004072118251e-01, -8.410395431418157e-01, -8.410395431418157e-01, -2.297756735655865e-01, -2.323745367581125e-01, -1.022843105922548e+00, -1.763665794851866e-01, -2.305224536837257e-01, -2.305224536837257e-01, -3.751941194798069e-02, -3.806356252105516e-02, -7.924900646345226e-02, -3.070666035393367e-02, -3.776836146569531e-02, -3.776836146569529e-02, -8.649578407201705e+00, -7.269681158004614e+00, -5.111479210538843e+00, -9.136561150840750e+00, -6.373367126733842e+00, -7.028303475461536e+00, -1.909910201677715e+00, -2.684337852182536e+00, -2.469915023711108e+00, -2.491340172506132e+00, -2.504988971181141e+00, -2.353397948603511e+00, -1.095095818336714e+00, -9.763799434519380e-01, -9.675633072662879e-01, -7.784115532044273e-01, -7.966766047118828e-01, -8.084732843340670e-01, -9.537414765742729e-02, -3.513333965515227e-01, -9.349164244207246e-02, -2.609680099650169e+00, -1.396452752518950e-01, -1.114658560423091e-01, -8.458225096427265e-02, -1.369558579521680e+00, -3.931330859861777e-03, -5.909945396600909e-02, -5.494512982277869e-02, -4.779237970877607e-03, -1.881506945342117e+01, -5.800075403735678e-01, -5.811176067180142e-01, -3.327130274516946e+00, -5.815553455423684e-01, -5.379820717824813e+01, -5.644003756960462e-01, -6.419465286928281e-01, -8.922820948472101e-01, -6.561519200391699e-01, -7.196113423886302e-01, -1.054112041417211e+00, -1.237896528362092e+00, -2.254034673067495e-01, -2.675118261457758e-01, -3.465147544106120e-01, -4.428003332144008e-01, -4.151365663591957e-01, -5.792209823146484e-01, -1.670485820051731e-01, -1.068440924977822e-01, -4.257713086021171e-01, -7.690144419337276e-02, -1.017417526582157e-01, -1.162376433337018e-02, -1.393308125059255e-01, -2.727985799832584e-03, -7.419878228547802e-02, -4.061946746245312e-03, -4.061718498681373e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_br89_1_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89_1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.784367596485385e-09, -5.784267868211237e-09, -5.783923441759247e-09, -5.785556169494982e-09, -5.784314088532104e-09, -5.784314088532104e-09, -1.295240905066464e-05, -1.295272419518534e-05, -1.295946473563209e-05, -1.293790281994357e-05, -1.295236879352830e-05, -1.295236879352830e-05, -6.777841874113389e-03, -6.764631051104321e-03, -6.392602053490277e-03, -6.314100656126114e-03, -6.773771684615601e-03, -6.773771684615601e-03, -6.744916975755542e-01, -6.655086898160927e-01, -3.861558596735048e-03, -1.374240651904952e+00, -6.723006834155980e-01, -6.723006834155978e-01, -2.148017650395457e+03, -1.891779795092548e+03, -3.074808278540327e+01, -1.544672748520093e+04, -1.967348125942054e+03, -1.967348125942055e+03, -4.713214626589858e-07, -1.152455475779262e-06, -6.466499446624273e-10, -3.878367616631976e-07, -7.058577758972730e-07, -1.638124186186089e-06, -4.843163394237097e-09, -4.817005161998661e-05, -7.263017814687982e-05, -7.046153081915557e-05, -7.177449234561085e-05, -1.141523787837053e-04, -1.981440228096948e-03, -2.986136253212675e-03, -3.056282121630051e-03, -1.656853192119814e-02, -1.143942968071055e-02, -8.850572038793188e-03, -5.938917958685937e-03, -1.698633587894890e-01, -1.264873744347106e-04, -1.262622028434001e-04, -2.585679407709084e+00, -3.633272967420689e+00, -6.400715980700408e+03, -1.158023234377492e+02, -9.486876651233135e-09, -9.631399599736475e-03, -9.794757378158647e+03, -1.105375586101800e-04, -1.218692602864015e-05, -5.840595971687318e-12, -1.610325244895151e-14, -1.748505899005811e-04, -9.558506767230256e-12, -2.938811194123853e-06, -3.317164468122491e-14, -2.229738659899945e-02, -4.136269323697017e-03, -4.731359976334447e-03, -1.379909010856613e-02, -2.419080658237618e-03, -1.217454016815263e-03, -9.750473945323857e-06, -2.088071113672627e-06, -9.158473577652239e-05, -6.147019818502961e-02, -8.252895997140895e-02, -3.155257577078663e-02, -1.292480990854648e+01, -1.313559252249946e+01, -1.259209246430195e-01, -5.013956229197369e-04, -7.407125278490681e+00, -1.281703072893408e-03, -7.307118992598027e+04, -3.094740442134460e-04, -1.184295517876034e+00, -1.061444240012510e-01, -1.709231534284082e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_br89_1_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89_1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([-2.236435681623781e-04, -2.236413408682686e-04, -2.236364883376208e-04, -2.236729204595511e-04, -2.236423481800632e-04, -2.236423481800632e-04, -2.161009413620746e-03, -2.161075599327514e-03, -2.162841481119794e-03, -2.159512636473469e-03, -2.161037312008125e-03, -2.161037312008125e-03, -7.964875789262280e-03, -7.924896415874296e-03, -6.906511195247388e-03, -6.984092009691399e-03, -7.951155543354849e-03, -7.951155543354849e-03, -1.622787220038321e-02, -1.665989296246093e-02, -7.811977839069407e-03, -1.259971347899629e-02, -1.636974374835000e-02, -1.636974374834999e-02, -9.003413083823797e-03, -9.112638344461755e-03, -9.945683714960921e-03, -7.148314547580518e-03, -9.183456432356596e-03, -9.183456432356598e-03, -2.636124365466997e-04, -6.449180514609959e-04, -3.616948885122417e-07, -2.170212431299174e-04, -3.948968339150554e-04, -9.164594862785903e-04, -1.435611954126754e-07, -1.458252352175671e-03, -2.134562265240220e-03, -2.105276219315520e-03, -2.181977168642305e-03, -3.470284165200153e-03, -1.536547487007911e-03, -2.967999799438778e-03, -2.024977653243955e-03, -1.245654339540934e-02, -9.933242115368373e-03, -7.685249822295464e-03, -2.159490376655134e-05, -4.175282674556028e-03, -4.424699901891338e-07, -3.531497551167079e-03, -1.453697289834967e-02, -2.042665865777103e-02, -2.659224475424751e-03, -7.181186026659706e-05, -2.476999380687644e-15, -8.439354778814010e-06, -4.594618375390462e-03, -5.185201410978253e-11, -1.038339224538344e-05, -4.896976339306700e-12, -1.357965894990796e-14, -1.481055110866948e-04, -8.078470292279948e-12, -2.483766503018564e-06, -2.562782711961316e-14, -1.124606431245125e-02, -2.377589213382416e-03, -3.055255811103457e-03, -8.402483957177079e-03, -1.473016428042665e-03, -1.394796532887364e-03, -4.768590039025517e-07, -1.710763643102164e-07, -1.567871631073423e-05, -7.280890577635027e-03, -9.775213758529711e-03, -1.167644123377581e-02, -3.321408155352191e-03, -8.374900660685521e-03, -1.818274796813736e-02, -9.748650033864403e-07, -1.440169574606679e-02, -8.648301503371338e-09, -9.299148192913509e-04, -2.699803875261831e-11, -1.999393309774240e-03, -3.056376564435982e-08, -4.921648266541210e-11])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_br89_1_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89_1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([8.945742726495125e-04, 8.945653634730756e-04, 8.945459533504824e-04, 8.946916818382053e-04, 8.945693927202518e-04, 8.945693927202518e-04, 8.644037654482975e-03, 8.644302397310054e-03, 8.651365924479177e-03, 8.638050545893875e-03, 8.644149248032501e-03, 8.644149248032501e-03, 3.185950315704912e-02, 3.169958566349720e-02, 2.762604478098954e-02, 2.793636803876560e-02, 3.180462217341939e-02, 3.180462217341939e-02, 6.491148880153283e-02, 6.663957184984372e-02, 3.124791135627763e-02, 5.039885391598514e-02, 6.547897499339998e-02, 6.547897499339995e-02, 3.601365233529519e-02, 3.645055337784704e-02, 3.978273485984368e-02, 2.859325819032207e-02, 3.673382572942639e-02, 3.673382572942639e-02, 1.054449746186799e-03, 2.579672205843982e-03, 1.446779554048967e-06, 8.680849725196697e-04, 1.579587335660226e-03, 3.665837945114361e-03, 5.742447816507016e-07, 5.833009408702684e-03, 8.538249060960880e-03, 8.421104877262079e-03, 8.727908674569221e-03, 1.388113666080061e-02, 6.146189948031645e-03, 1.187199919775511e-02, 8.099910612975821e-03, 4.982617358163732e-02, 3.973296846147349e-02, 3.074099928918186e-02, 8.637961506619889e-05, 1.670113069822411e-02, 1.769879960756147e-06, 1.412599020466832e-02, 5.814789159339868e-02, 8.170663463108413e-02, 1.063689790169900e-02, 2.872474410663882e-04, 9.907997522750578e-15, 3.375741911525604e-05, 1.837847350156184e-02, 2.074080564657948e-10, 4.153356898153375e-05, 1.958790535793698e-11, 5.431863575498860e-14, 5.924220443467791e-04, 3.231388116911979e-11, 9.935066012074256e-06, 1.025113084784526e-13, 4.498425724980498e-02, 9.510356853529663e-03, 1.222102324441381e-02, 3.360993582870832e-02, 5.892065712170661e-03, 5.579186131549458e-03, 1.907436015610207e-06, 6.843054572408654e-07, 6.271486524293811e-05, 2.912356231054011e-02, 3.910085503411883e-02, 4.670576493510329e-02, 1.328563262140876e-02, 3.349960264274209e-02, 7.273099187254944e-02, 3.899460013544034e-06, 5.760678298426716e-02, 3.459320601348535e-08, 3.719659277165405e-03, 1.079921550303090e-10, 7.997573239096958e-03, 1.222550625774393e-07, 1.968659307598551e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
