
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_m06_l_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_m06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.305300408909383e+01, -2.305303290441067e+01, -2.305325165406676e+01, -2.305277883851452e+01, -2.305301852180040e+01, -2.305301852180040e+01, -3.347908392104505e+00, -3.347976092282625e+00, -3.350261557784283e+00, -3.351426488816050e+00, -3.347931605646266e+00, -3.347931605646266e+00, -5.900965584871142e-01, -5.898944719214593e-01, -5.889379525515815e-01, -5.991508306720131e-01, -5.900296883250522e-01, -5.900296883250522e-01, -1.897135392894211e-01, -1.911706582644814e-01, -5.998756055374078e-01, -1.695577825910983e-01, -1.901095712665837e-01, -1.901095712665837e-01, -7.376460597879292e-02, -7.706434724332835e-02, -2.383216855020419e-01, -3.625199308502394e-02, -7.625755157213168e-02, -7.625755157213146e-02, -5.685306156773281e+00, -5.691237823990480e+00, -5.685970130578500e+00, -5.690578060209877e+00, -5.688240937827890e+00, -5.688240937827890e+00, -2.026042655255731e+00, -2.045461190505242e+00, -2.023933684640726e+00, -2.039460781108729e+00, -2.041697600922646e+00, -2.041697600922646e+00, -5.948587337690365e-01, -6.505949805012012e-01, -5.412117547555246e-01, -5.789086334786527e-01, -6.339023764433561e-01, -6.339023764433561e-01, -2.260347041217744e-01, -1.949872561723043e-01, -2.117590559233416e-01, -1.927940382175086e+00, -1.616457949411058e-01, -1.616457949411058e-01, -3.495152780330391e-02, -3.991148159942220e-02, -2.989560043112053e-02, -2.728558541344097e-01, -3.638059811962602e-02, -3.638059811962617e-02, -4.978647776247043e-01, -6.532380392240740e-01, -6.126963166031177e-01, -5.658910536007191e-01, -5.907692329775541e-01, -5.907692329775541e-01, -5.444099084160007e-01, -5.326344526430651e-01, -5.703225019049906e-01, -5.832633862008114e-01, -5.783376526294978e-01, -5.783376526294978e-01, -6.798718412792580e-01, -2.444131256863409e-01, -2.818281029416907e-01, -3.495993596440686e-01, -3.156846725148111e-01, -3.156846725148110e-01, -4.609796281689441e-01, -2.324719397034546e-01, -2.623999246397567e-01, -3.277823220979274e-01, -2.105776705243072e-01, -2.105776705243065e-01, -8.680962943487369e-02, -1.097933549277640e-02, -2.082199886498743e-02, -2.014164520741960e-01, -3.093990267553827e-02, -3.093990267553820e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_m06_l_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_m06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.763851964912364e+01, -2.763873819140569e+01, -2.763970738477575e+01, -2.763614531999475e+01, -2.763863478794127e+01, -2.763863478794127e+01, -4.465340142687031e+00, -4.465543566259415e+00, -4.471940532990131e+00, -4.468317680945535e+00, -4.465427192420823e+00, -4.465427192420823e+00, -7.402411695221160e-01, -7.371464165428776e-01, -6.713806960859150e-01, -6.901822713666887e-01, -7.391425633959271e-01, -7.391425633959271e-01, -2.037510130911468e-01, -2.059452984963133e-01, -8.716372226009096e-01, 2.073600722477922e-02, -2.041935078021710e-01, -2.041935078021710e-01, -9.497705687265931e-02, -9.889748641600171e-02, -1.999966649723431e-01, -4.810911602265717e-02, -9.785611580555843e-02, -9.785611580555201e-02, -8.366167356505152e+00, -8.403178801871370e+00, -8.370275715731141e+00, -8.399035423257086e+00, -8.384862529957106e+00, -8.384862529957106e+00, -2.443421224941644e+00, -2.451330073044558e+00, -2.442471245873844e+00, -2.448027974723070e+00, -2.451287189909628e+00, -2.451287189909628e+00, -8.770477027266224e-01, -8.472631998784054e-01, -7.555399380680833e-01, -8.886214702994163e-01, -9.016792475450361e-01, -9.016792475450361e-01, 6.241365856391620e-02, -2.317628076414140e-01, 6.560631701416014e-02, -2.944553123056405e+00, 2.830843582411700e-02, 2.830843582411700e-02, -4.635139215058359e-02, -5.287497359567559e-02, -3.957688274853252e-02, -1.406639483003474e-01, -4.822085389643448e-02, -4.822085389643375e-02, -3.861706359064097e-01, -5.878979547649575e-01, -4.044444903589787e-01, -3.186327716197685e-01, -3.515009093303630e-01, -3.515009093303630e-01, -3.151330176473288e-01, -7.344079761900831e-01, -7.430376111156406e-01, -7.472892738019253e-01, -6.972724113665884e-01, -6.972724113665885e-01, -9.253685630810238e-01, -2.682733827229679e-01, -3.200469143888082e-01, -4.378713372323459e-01, -3.901529043710973e-01, -3.901529043710974e-01, -5.782903396816399e-01, -2.146844146489620e-01, -1.660980607766835e-01, -4.231733830111362e-01, 3.169022953014210e-02, 3.169022953013282e-02, -1.123313586737859e-01, -1.463166221768916e-02, -2.769184099743788e-02, 3.035664188754524e-02, -4.104432035249640e-02, -4.104432035249631e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_m06_l_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_m06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-8.969167834273141e-09, -8.969109301415891e-09, -8.968713740286929e-09, -8.969672738560368e-09, -8.969138118159740e-09, -8.969138118159740e-09, -1.261682656160751e-05, -1.261688179885001e-05, -1.261523556863363e-05, -1.258996167613593e-05, -1.261674297365541e-05, -1.261674297365541e-05, -8.760524918615434e-03, -8.761970317886086e-03, -8.603747455071179e-03, -8.230659480345844e-03, -8.761039600267185e-03, -8.761039600267185e-03, -6.602373241105229e-01, -6.722281760239835e-01, -5.531946222268843e-03, -8.998803284848643e-01, -6.651904254941665e-01, -6.651904254941665e-01, 6.430629385806539e+00, 6.376135972100553e+00, 9.784964873201898e-01, 1.692068735345504e+00, 6.652578476460639e+00, 6.652578476460691e+00, -2.680659850333691e-06, -2.683430620622516e-06, -2.680938119762366e-06, -2.683091935143885e-06, -2.682076689535309e-06, -2.682076689535309e-06, -8.583860710519827e-05, -8.411338906147837e-05, -8.514067077244039e-05, -8.381105890418345e-05, -8.549455108524947e-05, -8.549455108524947e-05, -1.638798618059610e-02, -1.375742794778078e-02, -2.011895553079509e-02, -1.980608383588411e-02, -1.452269561666397e-02, -1.452269561666397e-02, -4.052158733505076e-01, -2.807569815536614e-01, -4.837869511699300e-01, -1.649506268776106e-04, -4.433996999558198e-01, -4.433996999558198e-01, 3.830269044089067e+00, 2.838915552419523e+00, 1.246641336616132e+01, -1.158146883578682e+00, 2.533954441075326e+00, 2.533954441075220e+00, -1.364303606415106e-02, -1.716493897179823e-02, -1.626248933539141e-02, -1.520066995494179e-02, -1.576676439437105e-02, -1.576676439437105e-02, -1.752374873047895e-02, -2.425326454640897e-02, -2.347046095901131e-02, -2.186187202130662e-02, -2.278523003255950e-02, -2.278523003255950e-02, -1.151022596086946e-02, -2.022387584500855e-01, -1.612117478073484e-01, -1.004724083971668e-01, -1.316699615234062e-01, -1.316699615234062e-01, -3.649073888505459e-02, 1.308133097838606e+00, 3.208998709993935e-01, -1.409348590295024e-01, -3.502113869792147e-01, -3.502113869792049e-01, 1.694458589541611e+00, -2.135921126755957e-01, 6.875090286026268e+00, -5.399117585791600e-01, 3.165584033929970e+00, 3.165584033929981e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_m06_l_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_m06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_m06_l_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_m06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.600184854321708e-04, 2.600878385157919e-04, 2.603868243129962e-04, 2.592607619337251e-04, 2.600550570854647e-04, 2.600550570854647e-04, 5.945780184769762e-03, 5.947090974684350e-03, 5.987912597307898e-03, 5.967861189371670e-03, 5.946136962119562e-03, 5.946136962119562e-03, 1.972511886910472e-02, 1.954997973326515e-02, 1.600613426019796e-02, 1.671829303767193e-02, 1.966374278005244e-02, 1.966374278005244e-02, 3.758957957421818e-02, 4.037402678275919e-02, 1.558141166494278e-02, -1.114381812474142e-01, 3.833345895828424e-02, 3.833345895828424e-02, -4.131276385641912e-03, -4.700678292589542e-03, -8.601287427495077e-02, -1.614298335688367e-04, -4.764762044371660e-03, -4.764762044375337e-03, 2.085195031566402e-02, 2.137428378134476e-02, 2.091010965305939e-02, 2.131595944684706e-02, 2.111472287528065e-02, 2.111472287528065e-02, 9.319658598406107e-03, 9.097348367950911e-03, 9.375396594278346e-03, 9.195272341895294e-03, 9.102136053688746e-03, 9.102136053688746e-03, 8.290198903197285e-02, 1.078224277912687e-02, 5.372376427008416e-02, 8.457462737814665e-02, 7.656911575035732e-02, 7.656911575035732e-02, -2.103056589117082e-01, 2.331199802397642e-02, -2.170874379339211e-01, 2.339414108175220e-02, -1.661661966431425e-01, -1.661661966431425e-01, -2.239671294857899e-04, -2.747616872822609e-04, -4.588319657009053e-04, -1.323707404858495e-01, -2.541183855335809e-04, -2.541183855322033e-04, -1.216798466990267e+00, -5.799177725475617e-01, -1.086803313330183e+00, -1.401666645326070e+00, -1.266310460717873e+00, -1.266310460717873e+00, -1.440530897911882e+00, 8.638907796248624e-02, 6.535883279913328e-02, 4.326870503749666e-02, 1.552979308386474e-02, 1.552979308386474e-02, 3.019269060657439e-02, 2.578399862285967e-02, 4.034606838332410e-02, 5.433028376271282e-02, 5.988330663369885e-02, 5.988330663369885e-02, 4.702029539321514e-02, -6.764374959438620e-02, -1.214864109480673e-01, 6.328591691351615e-02, -2.410808719821369e-01, -2.410808719821436e-01, -2.555226834878798e-03, -6.115757421745933e-06, -8.517139718802791e-05, -2.516201565830992e-01, -2.189757898834482e-04, -2.189757898824886e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
