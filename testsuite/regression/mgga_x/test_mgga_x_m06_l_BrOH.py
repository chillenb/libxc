
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_m06_l_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_m06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.157108726181123e+01, -2.157115017290091e+01, -2.157146843770242e+01, -2.157043866914655e+01, -2.157112011065441e+01, -2.157112011065441e+01, -3.005676300341187e+00, -3.005802782741270e+00, -3.009714776665918e+00, -3.008440247636041e+00, -3.005725708274964e+00, -3.661948420189395e+00, -4.659591609749121e-01, -7.016804520846428e-01, -6.876076757384799e-01, -6.907496266894606e-01, -7.020470358729207e-01, -7.020470358729207e-01, -1.936040334527930e-01, -1.956949497311043e-01, -4.732034547486326e-01, -1.740226921915447e-01, -1.942376035381757e-01, -1.942376035381757e-01, -7.376351153909863e-02, -7.706277024655672e-02, -2.381397798500041e-01, -3.625083684135610e-02, -7.625619697485178e-02, -7.625619697485157e-02, -5.686941532231073e+00, -5.692856811375032e+00, -5.687583052959323e+00, -5.423415983154068e+00, -5.689895877703434e+00, -5.689895877703434e+00, -1.620830507523433e+00, -1.646513124291336e+00, -1.609717831429055e+00, -1.630253530358683e+00, -1.652375768277492e+00, -2.080282465002123e+00, -6.224029939728389e-01, -6.834837156684104e-01, -5.806379122779176e-01, -6.243601941646879e-01, -6.567642108442474e-01, -5.900764903055923e-01, -6.639511079547457e-02, -1.969494255112328e-01, -6.116232774571099e-02, -2.092126672676725e+00, -1.620938628351644e-01, -1.620938628351644e-01, -1.922667878615322e-02, -3.991004815634973e-02, -2.989504423573437e-02, -1.003764365975651e-01, -1.999804314371932e-02, -3.637913063512468e-02, -5.009914606467497e-01, -6.569965848389274e-01, -6.043395652380398e-01, -5.693187355065377e-01, -5.943042107080174e-01, -5.943042107080174e-01, -5.512119490147023e-01, -5.358735150309955e-01, -5.749936802653016e-01, -5.891244045611765e-01, -5.838948680315909e-01, -5.394026219122746e-01, -7.232894074740142e-01, -1.450094278656132e-01, -2.885467265971812e-01, -2.924280667359619e-01, -3.268029900069180e-01, -3.268029900069180e-01, -3.962227695223920e-01, -2.323736997775972e-01, -2.621261842260794e-01, -3.488652621801905e-01, -6.466242368631460e-02, -2.103832969557480e-01, -8.679367140413828e-02, -1.097929316101457e-02, -2.082189760315030e-02, -2.012551046178183e-01, -3.093880227258611e-02, -3.093880227258605e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_m06_l_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_m06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.941330507984386e+01, -2.941348140909670e+01, -2.941431178966702e+01, -2.941143820390904e+01, -2.941339756360953e+01, -2.941339756360953e+01, -4.876200591173228e+00, -4.876326986644542e+00, -4.880514467491877e+00, -4.879234128527932e+00, -4.876258827366152e+00, -4.351608772750055e+00, -8.870804987375038e-01, -7.858545083116598e-01, -7.528495557807917e-01, -7.602315612286339e-01, -7.870601257994033e-01, -7.870601257994033e-01, -2.119894176793428e-01, -2.145947715650481e-01, -1.050862385667604e+00, -1.615373745328149e-02, -2.126648256469339e-01, -2.126648256469339e-01, -9.497409597000514e-02, -9.889329091980163e-02, -2.003124707167394e-01, -4.810752383853183e-02, -9.785249769308327e-02, -9.785249769307687e-02, -8.364854262578497e+00, -8.401880971135933e+00, -8.368980923005958e+00, -8.671347721834781e+00, -8.383534799150876e+00, -8.383534799150876e+00, -2.763512621081860e+00, -2.770484456055942e+00, -2.761294081192673e+00, -2.766304610222303e+00, -2.771399095771550e+00, -2.462331850097354e+00, -8.642712160443993e-01, -8.114147066642688e-01, -7.386703894130735e-01, -8.544399175641196e-01, -8.877089241646632e-01, -9.492154275345102e-01, 5.116032105088644e-02, -2.427067898718543e-01, 4.914905988514367e-02, -2.805995421254211e+00, 1.626912212915093e-02, 1.626912212915093e-02, -2.525264890377496e-02, -5.287221776065686e-02, -3.957542283355599e-02, -2.050734104694545e-02, -2.622840704962403e-02, -4.821892474524348e-02, -3.807005736370688e-01, -5.820620221863961e-01, -4.201201253560705e-01, -3.121059722314579e-01, -3.449067826926517e-01, -3.449067826926517e-01, -3.020020400407143e-01, -7.337823587279231e-01, -7.401803369551386e-01, -7.418848440993652e-01, -6.925769186326614e-01, -7.437966169145972e-01, -8.819498096815654e-01, -3.003030714627226e-01, -3.295247750035578e-01, -4.943809095106947e-01, -3.972204537919759e-01, -3.972204537919761e-01, -6.421771081898334e-01, -2.147039457806569e-01, -1.674537642001271e-01, -4.176946239579213e-01, 4.055606261492422e-02, 2.568725432607870e-02, -1.123145060402006e-01, -1.463166180605074e-02, -2.769155915938056e-02, 2.407008771694904e-02, -4.104303199223604e-02, -4.104303199223595e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_m06_l_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_m06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.111611198359383e-08, -1.111597989694528e-08, -1.111531341846637e-08, -1.111747557034279e-08, -1.111604300290622e-08, -1.111604300290622e-08, -1.678564659737995e-05, -1.678500869459729e-05, -1.676349776170860e-05, -1.676645025113191e-05, -1.678515013361278e-05, -8.706516555524857e-06, -1.418045286974734e-02, -3.597389416383268e-03, -3.408563937847308e-03, -3.558134956162915e-03, -3.601794051309159e-03, -3.601794051309159e-03, -5.345045809205188e-01, -5.361660642889907e-01, -7.631760355101349e-03, -3.085910161735498e-03, -5.346911803069156e-01, -5.346911803069156e-01, 6.327784519573539e+00, 6.253050231417753e+00, 1.452873698127935e+00, 2.331941798972101e+00, 6.539707047217884e+00, 6.539707047217947e+00, -2.677880079158818e-06, -2.680681663075494e-06, -2.678196825491374e-06, -3.135193414466892e-06, -2.679265195535275e-06, -2.679265195535275e-06, -1.731947413073242e-04, -1.674175251436119e-04, -1.756386639180993e-04, -1.710144667097854e-04, -1.662338418599170e-04, -7.718309439704767e-05, -1.370776748060600e-02, -1.162658145804140e-02, -1.515144652085409e-02, -1.516767244284907e-02, -1.268033318890040e-02, -1.802217927583710e-02, -6.499125872373770e+01, -2.097280007401275e-01, -6.680589368455298e+01, -1.245471665975941e-04, 7.549148944536516e-02, 7.549148944536516e-02, -1.524930013515886e+07, 2.936359898919813e+00, 1.152986659219678e+01, -5.516280201382222e+02, -1.296516322460147e+07, 3.620391169317101e+00, -1.335617375488479e-02, -1.683900083617490e-02, -1.699307187019188e-02, -1.489548874782424e-02, -1.545495047034160e-02, -1.545495047034160e-02, -1.681799122175497e-02, -2.360277956474758e-02, -2.271892727738687e-02, -2.107755538333993e-02, -2.197001650816014e-02, -2.845869518959945e-02, -9.305047910744465e-03, -1.057266225697767e+00, -1.333760917515790e-01, -1.665270561726274e-01, -1.070152861230055e-01, -1.070152861230055e-01, -5.758658239127756e-02, 1.466402140753954e+00, 9.983959156846489e-01, -1.073426466100355e-01, -1.591873917152915e+02, 6.237220622130892e-01, 2.487694197800069e+00, 3.273279271291866e+00, 6.416402367081374e+00, 7.514078635467244e-01, 5.095116768762049e+00, 5.095116768762072e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_m06_l_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_m06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [3.821896076801457e-04, 3.822522662072001e-04, 3.825257561806184e-04, 3.815087572992490e-04, 3.822226169076246e-04, 3.822226169076246e-04, 6.539391737559864e-03, 6.540554226847821e-03, 6.577006579028972e-03, 6.561969800301994e-03, 6.539682962276393e-03, 5.299185027239090e-03, 2.484645905057073e-02, 1.302818306254817e-02, 9.662867884685167e-03, 1.086046378167202e-02, 1.314702957491413e-02, 1.314702957491413e-02, 3.358790152318084e-02, 3.592444681468387e-02, 1.826690533699861e-02, -1.284948062686106e-01, 3.414535121596183e-02, 3.414535121596183e-02, -4.133732671986763e-03, -4.704297215779225e-03, -8.686413077774356e-02, -1.648943505573835e-04, -4.767914871602214e-03, -4.767914871605892e-03, 2.085452799260302e-02, 2.137696397538707e-02, 2.091266618721069e-02, 2.088352536718996e-02, 2.111739743573880e-02, 2.111739743573880e-02, 1.156798926239519e-02, 1.133746512103456e-02, 1.166778650524148e-02, 1.148306631047270e-02, 1.128637767170581e-02, 8.832284634471775e-03, 8.255638921658576e-02, 7.578987682607633e-03, 5.131645703838987e-02, 8.403845042272412e-02, 7.618101643911224e-02, 7.717677668854730e-02, -8.366655667288556e-02, 2.087515528116276e-02, -8.481614194889417e-02, 2.308440132407490e-02, -1.739752356469190e-01, -1.739752356469190e-01, -3.292211702179930e-04, -2.785585222823130e-04, -4.607553847970126e-04, -6.955335793213063e-02, -3.782790592025669e-04, -2.597113266517502e-04, -1.223834286976558e+00, -5.833357154850513e-01, -1.072840046682730e+00, -1.409534362310608e+00, -1.273414157898017e+00, -1.273414157898017e+00, -1.457135665311530e+00, 8.628454354384189e-02, 6.509015031688237e-02, 4.276953887517249e-02, 1.481243869886948e-02, 2.026004218557304e-02, 2.746927533623645e-02, 6.272359806260945e-02, 3.757684967346535e-02, 6.393591788178526e-02, 5.693027480588107e-02, 5.693027480588107e-02, 5.365597603687287e-02, -6.796904407875988e-02, -1.233350693392359e-01, 5.848591889584737e-02, -9.929376851965464e-02, -2.475889871241614e-01, -2.607789822098243e-03, -6.346844348920171e-06, -8.540569198262662e-05, -2.589834827805412e-01, -2.242293771058218e-04, -2.242293771048620e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
