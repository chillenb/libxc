
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_gx_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.248582224385825e+01, -2.248594845896935e+01, -2.248650336738478e+01, -2.345877570045943e+01, -2.345956892097109e+01, -2.443365506200340e+01, -3.558308636497554e+00, -3.978033798043001e+00, -3.978329731819487e+00, -3.978570614030547e+00, -3.978131678503393e+00, -3.558654822452481e+00, -5.754891425564969e-01, -6.711972395881841e-01, -7.460992354158087e-01, -6.565925673329860e-01, -5.616189215210510e-01, -7.525567749501065e-01, -1.734945555727855e-01, -1.765733871937707e-01, -7.674718142012313e-01, -1.504239041434595e-01, -1.902768931165794e-01, -1.858958810368228e-01, -6.909474785769886e-03, -6.306668931923259e-03, -3.460997610837502e-02, -3.983688077344691e-03, -5.560665713144127e-03, -5.560665713144132e-03, -5.955951124640031e+00, -5.957044569126424e+00, -5.956005589978570e+00, -5.956970823698654e+00, -5.796633262697013e+00, -5.796773595111677e+00, -2.238724403313162e+00, -2.254963066713725e+00, -2.226872891930453e+00, -2.241223696261034e+00, -2.006317320447704e+00, -2.253454080580713e+00, -6.198724807739813e-01, -7.291287937844485e-01, -6.214405846572856e-01, -6.459185831360770e-01, -6.369041941794354e-01, -6.828804916879402e-01, -1.044318715025121e-01, -1.707403744976763e-01, -9.674010848883544e-02, -2.195914901965632e+00, -1.227514910844047e-01, -1.227514910844047e-01, -2.637151336902574e-03, -3.894297214794898e-03, -2.982308124706851e-03, -5.494491578205534e-02, -3.746286598932354e-03, -3.746286598932933e-03, -6.744354631933562e-01, -6.705668368465189e-01, -6.562515087903130e-01, -6.665671598909089e-01, -6.581927860949095e-01, -6.653100932308669e-01, -6.561525067004988e-01, -5.081328126830127e-01, -5.529532062891866e-01, -6.161699491124543e-01, -6.027145265433855e-01, -5.734009191177374e-01, -7.303088020560419e-01, -2.506982296909487e-01, -2.632343464780078e-01, -3.536209387413600e-01, -3.458319362543714e-01, -3.045673257905999e-01, -5.185690759470258e-01, -2.654172973536792e-02, -5.228863999044253e-02, -3.834050113299373e-01, -8.285824122733304e-02, -8.285824122733307e-02, -6.732774704751305e-03, -1.040855906578014e-03, -1.513000398659372e-03, -5.418836275960685e-02, -3.440317448162536e-03, -2.635954911030253e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_gx_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.339577278856036e+01, -3.339542462452263e+01, -3.339583588177208e+01, -3.339547053551939e+01, -3.339607583974180e+01, -3.339580383631462e+01, -3.339535944336593e+01, -3.068917868565827e+01, -3.339580733739150e+01, -3.069013304458832e+01, -3.069037685440552e+01, -3.069013304458831e+01, -4.399873032027832e+00, -4.569037136128965e+00, -4.400173632447856e+00, -4.399771051723307e+00, -4.405983745929848e+00, -4.407067217390232e+00, -4.404245431280597e+00, -4.404314736226505e+00, -4.398497940649926e+00, -4.409621958518814e+00, -4.568165673283065e+00, -4.409621958518814e+00, -8.213966514404916e-01, -8.268084127687473e-01, -8.194998798263557e-01, -6.583364936680813e-01, -5.819969721617489e-01, -5.683807181237870e-01, -6.032680159341316e-01, -8.033561719545549e-01, -8.345524485292938e-01, -7.621218349038195e-01, -6.721523149065829e-01, -5.174580695142637e-01, -1.993949555935333e-01, -1.289296462503306e-01, -2.025348518782598e-01, -1.398989170164841e-01, -3.619144480786234e-01, -9.395095116982256e-01, 1.078685941095287e-01, 6.989410022186354e-02, -1.051102008063251e-01, 3.593359429029787e-01, -1.051102008063250e-01, -1.028037007310649e-01, 4.960494582572416e+00, 4.657314441147692e+00, -6.453460619067723e-03, 4.308671958814995e+00, -3.601772080401944e-02, 1.059012666685989e+00, 9.663378295808661e+00, 9.777425491105552e+00, 5.708742124113310e+00, 7.677193726611441e+00, 5.708742124113310e+00, 7.677193726611407e+00, -7.626943169851568e+00, -7.625132354617951e+00, -7.630944458866225e+00, -7.628998288991614e+00, -7.627209809550850e+00, -7.625297155866113e+00, -7.630641421706611e+00, -7.628807474926604e+00, -8.062419521177565e+00, -7.627069245210063e+00, -7.628960096682131e+00, -8.060466668960983e+00, -2.356762916861432e+00, -2.359318100839516e+00, -2.400206806707809e+00, -2.401350319313100e+00, -2.318004091067612e+00, -2.331693053675745e+00, -2.356710347100675e+00, -2.370561261072881e+00, -2.409646825176520e+00, -2.543011138360545e+00, -2.409646825176520e+00, -2.385679344796750e+00, -8.019531757675135e-01, -9.928694955543748e-01, -9.179326204450412e-01, -9.205259834000524e-01, -6.794296367688450e-01, -7.289314067154791e-01, -7.530323506367601e-01, -7.910719999584300e-01, -8.506514364773666e-01, -9.753216603916435e-01, -8.506514364773667e-01, -7.959703680265686e-01, 3.377784133499510e-01, 3.326052699199578e-01, -1.974167631115304e-01, -2.081877381882662e-02, 4.028508758069027e-01, 3.521641055162389e-01, -2.671620223998496e+00, -2.670621688478292e+00, 1.931759247991308e-01, 1.055159118364972e-01, 1.931759247991307e-01, 1.055159118364972e-01, -2.776832645296603e-03, 1.515763532182226e+01, 1.031293595106310e+01, 1.082104368820421e+01, 5.137019124765224e+00, 4.628702543074926e+00, 6.056534081309067e-01, -6.078711836437564e-02, 1.159540674709839e+01, 4.731382071538468e+00, 1.159540674709834e+01, 4.731382071538015e+00, -8.878780159070051e-01, -8.915860490207860e-01, -8.732901307722881e-01, -8.771044080255125e-01, -8.996254645608528e-01, -9.029971744890958e-01, -9.001306200132699e-01, -8.863979868652251e-01, -8.998750935040533e-01, -9.032481184133876e-01, -8.998750935040531e-01, -8.843078352764725e-01, -8.627696761357563e-01, -8.659332745964465e-01, -6.521230377807568e-01, -6.629321114805469e-01, -7.153566913801594e-01, -8.332457774331612e-01, -7.766803145366702e-01, -7.797894755476482e-01, -7.458140256844700e-01, -7.492532965852587e-01, -7.458140256844700e-01, -8.324564166836400e-01, -9.485665241272266e-01, -1.050218015160519e+00, -1.309466044650787e-01, -1.341648880524894e-01, -3.173550599971368e-01, -2.391944507867230e-01, -4.465455868505231e-01, -4.178647073597353e-01, -3.289653954306609e-01, -3.297743486915796e-01, -3.289653954306608e-01, -3.795098312805605e-01, -5.742758551064733e-01, -5.833334652763864e-01, -3.534234399361573e-02, -3.558465088753832e-02, 8.908402731998236e-01, 8.387069938802524e-01, -4.193455060625024e-01, -4.406420167367098e-01, 3.853354211487922e-01, 3.009769832132855e-01, 3.853354211487922e-01, 3.009769832132848e-01, -8.809940503497170e-03, -9.129480263493063e-03, 3.577825313217424e+01, 3.577539699019865e+01, -1.949664158333597e-03, -2.073633549865988e-03, -7.236099044951812e-02, -7.366850864729144e-02, 7.618003927090940e+00, 5.071190893872508e+00, 7.618003927092874e+00, -3.424083609938153e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gx_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.588894720694703e-08, 0.000000000000000e+00, -2.588803459238693e-08, -2.588845908992100e-08, 0.000000000000000e+00, -2.588768027600700e-08, -2.588688921510136e-08, 0.000000000000000e+00, -2.588543373143181e-08, -2.589239225940319e-08, 0.000000000000000e+00, -2.385861732923772e-08, -2.588865253995471e-08, 0.000000000000000e+00, -2.385679797326552e-08, -2.385558175904030e-08, 0.000000000000000e+00, -2.385679797326552e-08, -3.395258618724844e-05, 0.000000000000000e+00, -8.656782613589339e-06, -3.395216159271036e-05, 0.000000000000000e+00, -3.395427758453123e-05, -3.394451569302179e-05, 0.000000000000000e+00, -3.394172053380653e-05, -3.393585099021665e-05, 0.000000000000000e+00, -3.393394597994184e-05, -3.397530535123465e-05, 0.000000000000000e+00, -3.392450299450595e-05, -8.657499697393505e-06, 0.000000000000000e+00, -3.392450299450595e-05, -2.232259499338216e-03, 0.000000000000000e+00, -2.295285855012440e-03, -2.217846443776812e-03, 0.000000000000000e+00, -2.440295622595810e-02, -2.706678940813924e-02, 0.000000000000000e+00, -2.782565747591140e-02, -2.666444712030031e-02, 0.000000000000000e+00, -2.172462276543321e-03, -2.289160672673466e-03, 0.000000000000000e+00, -1.908190340129353e-03, -2.360656717716261e-02, 0.000000000000000e+00, -3.067090319054843e-02, -2.338024703985994e-01, 0.000000000000000e+00, -5.124276870805656e+00, -2.393391611724538e-01, 0.000000000000000e+00, -4.777934412788245e+00, -1.420014606521838e-02, 0.000000000000000e+00, -5.618279665682347e-04, -1.707960792361843e+01, 0.000000000000000e+00, -1.616843232634778e+01, -5.021423921820366e+00, 0.000000000000000e+00, -6.061872022574084e+01, -5.021423921820364e+00, 0.000000000000000e+00, -9.901723707540896e-02, -4.266924060336710e+06, 0.000000000000000e+00, -3.346616115150389e+06, -2.998337644125246e-01, 0.000000000000000e+00, -2.687206576847388e+06, -1.431426403095066e-01, 0.000000000000000e+00, -2.976819011303827e+03, -3.267739334444477e+07, 0.000000000000000e+00, -3.494924307327614e+07, -6.737043055253515e+06, 0.000000000000000e+00, -6.424332798794422e+07, -6.737043055253515e+06, 0.000000000000000e+00, -6.424332798794390e+07, -6.753708893080926e-06, 0.000000000000000e+00, -6.760183862680600e-06, -6.748666320784113e-06, 0.000000000000000e+00, -6.755307231599081e-06, -6.753401687681009e-06, 0.000000000000000e+00, -6.759996918081356e-06, -6.749075128508171e-06, 0.000000000000000e+00, -6.755566936281938e-06, -7.038249544712728e-06, 0.000000000000000e+00, -6.757737477135801e-06, -6.751146280329835e-06, 0.000000000000000e+00, -7.045164907742410e-06, -3.384608296459503e-04, 0.000000000000000e+00, -3.385292498263900e-04, -3.286705605705929e-04, 0.000000000000000e+00, -3.290285830816748e-04, -3.469594073828500e-04, 0.000000000000000e+00, -3.445693590739203e-04, -3.382069827545188e-04, 0.000000000000000e+00, -3.357803749589838e-04, -3.268714923433252e-04, 0.000000000000000e+00, -6.794851600265778e-05, -3.268714923433252e-04, 0.000000000000000e+00, -3.326606905759135e-04, -4.167950302774897e-02, 0.000000000000000e+00, -6.495565369150402e-02, -3.011149964987838e-02, 0.000000000000000e+00, -3.005688157084702e-02, -6.155943954061641e-02, 0.000000000000000e+00, -5.328138116634285e-02, -5.234281621952754e-02, 0.000000000000000e+00, -4.592770782101584e-02, -3.562335750835886e-02, 0.000000000000000e+00, -6.518817235211972e-02, -3.562335750835886e-02, 0.000000000000000e+00, -4.370591566747145e-02, -7.287913894430679e+01, 0.000000000000000e+00, -7.016423087340338e+01, -1.073536193728641e-01, 0.000000000000000e+00, -5.431088150337316e+00, -1.088276816347094e+02, 0.000000000000000e+00, -8.827163834115134e+01, -3.653446929192695e-04, 0.000000000000000e+00, -3.660019807278845e-04, -4.251558966473597e+01, 0.000000000000000e+00, -3.376085421491488e+01, -4.251558966473597e+01, 0.000000000000000e+00, -3.376085421491489e+01, -1.536979663390620e-01, 0.000000000000000e+00, -8.844965714416611e+07, -3.812668191683996e+07, 0.000000000000000e+00, -3.590324786075539e+07, -1.219409227116400e+08, 0.000000000000000e+00, -9.694105218768378e+07, -4.829097835300463e+02, 0.000000000000000e+00, -1.741058293578882e-01, -1.120610315847651e+08, 0.000000000000000e+00, -3.150411206852413e+07, -1.120610315847646e+08, 0.000000000000000e+00, -3.150411206852109e+07, -4.141589710719867e-02, 0.000000000000000e+00, -4.078163807287616e-02, -4.238327803246444e-02, 0.000000000000000e+00, -4.172772676388328e-02, -4.263160574961766e-02, 0.000000000000000e+00, -4.195545285243590e-02, -4.222350550534559e-02, 0.000000000000000e+00, -4.111846963274295e-02, -4.242604409395361e-02, 0.000000000000000e+00, -4.175858205298882e-02, -4.242604409395361e-02, 0.000000000000000e+00, -4.125448453646435e-02, -4.617626300548595e-02, 0.000000000000000e+00, -4.557069602831969e-02, -8.521121168165993e-02, 0.000000000000000e+00, -2.939797309378702e-02, -7.088215966123680e-02, 0.000000000000000e+00, -8.726631721161798e-02, -5.940464120463057e-02, 0.000000000000000e+00, -5.857639518916345e-02, -6.491568940658091e-02, 0.000000000000000e+00, -6.396000979851944e-02, -6.491568940658091e-02, 0.000000000000000e+00, -7.221510878223257e-02, -2.498607702927533e-02, 0.000000000000000e+00, -2.747966641643269e-02, -2.177785730772220e+00, 0.000000000000000e+00, -2.128069049527282e+00, -7.687289907109798e-02, 0.000000000000000e+00, -1.014562371841800e+00, -6.585635019769183e-02, 0.000000000000000e+00, -3.362666678817612e-01, -5.940023699163594e-01, 0.000000000000000e+00, -5.948412853534972e-01, -5.940023699163598e-01, 0.000000000000000e+00, -7.771261407725726e-02, -1.192231692571590e-01, 0.000000000000000e+00, -1.159949959744618e-01, -1.506713499998154e-01, 0.000000000000000e+00, -1.476622299103644e-01, -1.219470810095998e+03, 0.000000000000000e+00, -1.068985291134496e+03, -4.057551900805266e-01, 0.000000000000000e+00, -3.821766384805989e-01, -2.032060840105430e+02, 0.000000000000000e+00, -1.634755390742591e+02, -2.032060840105430e+02, 0.000000000000000e+00, -1.634755390742590e+02, -1.395741688918981e-01, 0.000000000000000e+00, -1.375622196748523e-01, -7.277517668610428e+09, 0.000000000000000e+00, -7.211363043213855e+09, -6.389350327905788e-01, 0.000000000000000e+00, -6.769195499649788e-01, -2.236678309947770e-01, 0.000000000000000e+00, -2.500690348078472e-01, -1.392083076537680e+08, 0.000000000000000e+00, -4.463727361088945e+07, -1.392083076538039e+08, 0.000000000000000e+00, -8.963684812595588e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gx_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.002069703489818e-03, 2.001991394304068e-03, 2.002051360039914e-03, 2.001978090021931e-03, 2.001995859724363e-03, 2.001897715623015e-03, 2.002202179992907e-03, 1.844892644015367e-03, 2.002058295715370e-03, 1.844857472106718e-03, 1.844833959051870e-03, 1.844857472106718e-03, 1.133125456587461e-02, 2.888975582008851e-03, 1.133121913991815e-02, 1.133139568395507e-02, 1.133058114900539e-02, 1.133034788778715e-02, 1.132985801659835e-02, 1.132969901108006e-02, 1.133314965021468e-02, 1.132891073443083e-02, 2.887883969045283e-03, 1.132891073443083e-02, 5.313998885962846e-03, 5.529269578545106e-03, 5.255075895018437e-03, 5.867058135510655e-02, 6.021004715583290e-02, 6.062770657570149e-02, 5.998503645701114e-02, 4.919059132030335e-03, 5.642368282346393e-03, 3.864884772803087e-03, 5.818593141386778e-02, 6.212142689142459e-02, 9.087927678495721e-03, 2.233407283682242e-01, 9.651299195187698e-03, 2.194673033120833e-01, 5.124281556306987e-02, 2.238836477662356e-03, 3.017722184642007e-01, 2.976643058007337e-01, 2.222114857480021e-01, 4.142013138975417e-01, 2.222114857480020e-01, 6.765743246048146e-04, 6.746655113822210e+00, 6.349086674124230e+00, 5.454932096323523e-07, 6.010146313733890e+00, 4.477181118409284e-05, 1.096472866467762e+00, 1.122332741913394e+01, 1.141351003311343e+01, 7.562704163412252e+00, 1.328974931755785e+01, 7.562704163412252e+00, 1.328974931755779e+01, 7.567376912543077e-03, 7.569190024789216e-03, 7.565963995042708e-03, 7.567824598285649e-03, 7.567290856912645e-03, 7.569137695078268e-03, 7.566078571542545e-03, 7.567897332621997e-03, 7.888443215555688e-03, 7.568505144361015e-03, 7.566658973082149e-03, 7.890417026042842e-03, 2.013431621396334e-02, 2.013533367965609e-02, 1.998710908434436e-02, 1.999254987720429e-02, 2.025953383604909e-02, 2.022455362601963e-02, 2.013053994855179e-02, 2.009433363618408e-02, 1.995970153413593e-02, 4.094856094587073e-03, 1.995970153413593e-02, 2.004749678684730e-02, 6.707186991751128e-02, 1.037005080765739e-01, 6.183621203313842e-02, 6.180815236430400e-02, 7.394068091670312e-02, 7.131873804115681e-02, 7.100256739108103e-02, 6.871925999018499e-02, 6.449016583298028e-02, 1.012333057593291e-01, 6.449016583298028e-02, 6.787265487912882e-02, 4.337211389645552e-01, 4.296241872737477e-01, 4.412913114389471e-03, 2.266112645589164e-01, 4.794514382110610e-01, 4.550038570505695e-01, 2.052274656679651e-02, 2.053197091041753e-02, 3.790502898475845e-01, 3.578187860714631e-01, 3.790502898475845e-01, 3.578187860714632e-01, 2.228719263479990e-08, 1.439573421584029e+01, 1.166452435275682e+01, 1.149061346754810e+01, 1.559901409854799e+01, 1.472945621112546e+01, 6.958670655012352e-01, 2.555407106775507e-04, 1.527296777322129e+01, 1.112119849557921e+01, 1.527296777322123e+01, 1.112119849557814e+01, 6.696556688215109e-02, 6.670769706676410e-02, 6.735322837138863e-02, 6.709126226568472e-02, 6.816144996651446e-02, 6.786894840337553e-02, 6.785113468443592e-02, 6.684501375336796e-02, 6.800440481785192e-02, 6.771769249589998e-02, 6.800440481785192e-02, 6.690022411135010e-02, 6.881204697011264e-02, 6.858532435044913e-02, 8.020177251145889e-02, 2.803089242170826e-02, 7.659387058870847e-02, 9.555932955456731e-02, 7.328496345912427e-02, 7.302817401396551e-02, 7.492852782322136e-02, 7.465122036226379e-02, 7.492852782322136e-02, 8.428619720618122e-02, 5.901797444227497e-02, 6.522574200904532e-02, 1.803281670573484e-01, 1.792900590303870e-01, 1.095523947510789e-02, 1.489805142853926e-01, 2.177511526118428e-02, 1.130396323798233e-01, 1.303187260411320e-01, 1.303647142994216e-01, 1.303187260411321e-01, 1.703140481518915e-02, 8.722680134140683e-02, 8.663025542471978e-02, 4.453123179263314e-05, 4.454384987068607e-05, 8.772081008928029e-01, 8.487948067688671e-01, 1.184747503619849e-01, 1.167147691546221e-01, 5.604591425210661e-01, 5.307902978045204e-01, 5.604591425210663e-01, 5.307902978045204e-01, 6.459366838920061e-07, 7.084076537045950e-07, 4.335663801045463e+01, 4.325776941729898e+01, 3.206816350897708e-08, 4.087575788227211e-08, 5.425582196268873e-04, 6.368499250105724e-04, 1.612412178876914e+01, 1.213344697373074e+01, 1.612412178877325e+01, 2.436537574203835e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
