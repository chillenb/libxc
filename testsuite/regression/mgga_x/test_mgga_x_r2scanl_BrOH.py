
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_r2scanl_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scanl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.219326327748687e+01, -2.219327524895274e+01, -2.219342881985949e+01, -2.219323125083918e+01, -2.219326876727844e+01, -2.219326876727844e+01, -3.699117494433711e+00, -3.699083666163697e+00, -3.698302833862472e+00, -3.789138188091469e+00, -3.699115854529817e+00, -3.788618221429089e+00, -7.229855969753853e-01, -7.254814554861531e-01, -7.061606377660302e-01, -7.117202230557103e-01, -7.259550334117690e-01, -7.259550334117690e-01, -1.955864419050110e-01, -2.013180188138601e-01, -8.626722846024252e-01, -1.440375685902481e-01, -1.994661775489321e-01, -1.994661775489321e-01, -1.109599534820572e-02, -1.162253884604193e-02, -4.724059473633906e-02, -5.323111285904825e-03, -1.150142028597832e-02, -1.150142028597832e-02, -5.670126071678872e+00, -5.671134510792952e+00, -5.670232470255376e+00, -5.286906635779595e+00, -5.670638627425906e+00, -5.670638627425906e+00, -2.115679313308162e+00, -2.130986838565838e+00, -2.109082014040734e+00, -2.121035662317853e+00, -2.134565671714780e+00, -2.147846200755332e+00, -6.322635701848238e-01, -6.867962335926016e-01, -5.999551059098538e-01, -6.257694079355642e-01, -6.565563990547856e-01, -6.271102610899782e-01, -9.869913648677783e-02, -2.000960648563435e-01, -9.769173793159767e-02, -1.813019490462338e+00, -1.223703654715559e-01, -1.223703654715559e-01, -2.140045881771969e-03, -5.868621816548378e-03, -4.398561913211362e-03, -5.865346706775319e-02, -2.300238705417826e-03, -5.347224399219016e-03, -6.524163719572357e-01, -6.489333631220664e-01, -5.735208250472722e-01, -6.511452271055599e-01, -6.506631067866769e-01, -6.506631067866769e-01, -6.314777935070441e-01, -5.478041971503828e-01, -5.722061132170410e-01, -5.948356898733590e-01, -5.833048259106925e-01, -5.579380404020761e-01, -7.201051548892908e-01, -2.469681565538326e-01, -2.988991853227085e-01, -3.804603377122939e-01, -3.379738658849086e-01, -3.379738658849086e-01, -4.921662588661436e-01, -4.375313570171257e-02, -5.923155777199417e-02, -3.610469612143536e-01, -7.934201670628320e-02, -8.589432470268908e-02, -1.300441901811388e-02, -1.606727223245715e-03, -1.237051721565209e-03, -8.194501493713406e-02, -4.544433101043258e-03, -4.544433101043251e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_r2scanl_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scanl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.526333089907703e+01, -2.526336235212487e+01, -2.526359092947235e+01, -2.526307502049369e+01, -2.526334676532866e+01, -2.526334676532866e+01, -4.257522653560320e+00, -4.257400231987699e+00, -4.254234998932386e+00, "nan", -4.257477817598028e+00, "nan", -9.756752515512865e-01, "nan", "nan", "nan", "nan", "nan", "nan", "nan", -1.049694819787865e+00, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", -6.117593128429887e+00, "nan", "nan", -2.868218460214353e+00, -2.887885222061612e+00, -2.860808463346153e+00, -2.876158006029287e+00, -2.891116717692727e+00, "nan", "nan", "nan", "nan", "nan", "nan", -7.134929269443938e-01, -1.444169877172828e-01, "nan", -1.426146569217966e-01, -3.705963661180453e+00, "nan", "nan", -3.482172069670072e-03, "nan", "nan", -8.882930394026804e-02, -3.785424292218335e-03, "nan", "nan", "nan", -7.327828677789848e-01, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", -6.345508963388629e-01, "nan", -3.417667085470044e-01, "nan", -5.133137748867712e-01, "nan", "nan", -6.524645332501607e-01, "nan", "nan", "nan", -1.170300601543348e-01, "nan", "nan", "nan", -2.264193011003574e-03, "nan", "nan", "nan"]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_r2scanl_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scanl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.095777612654446e-08, -1.095788689552572e-08, -1.095798901381546e-08, -1.095618054149647e-08, -1.095783776523154e-08, -1.095783776523154e-08, -1.079731547244420e-05, -1.080021492096357e-05, -1.087796250499190e-05, "nan", -1.079862277516250e-05, "nan", 3.977558881369605e-04, "nan", "nan", "nan", "nan", "nan", "nan", "nan", -1.941968531967292e-03, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", -3.796786400989419e-06, "nan", "nan", 5.463878286766157e-06, 5.311720408842593e-06, 5.526304797839623e-06, 5.406420214374689e-06, 5.279134156583421e-06, "nan", "nan", "nan", "nan", "nan", "nan", -1.701442267927833e-02, 4.098456755006047e-01, "nan", 4.452974303655813e-01, -2.567597042426769e-04, "nan", "nan", 2.443796931383747e+02, "nan", "nan", 1.648701441684885e+00, 3.009675082295105e+02, "nan", "nan", "nan", -2.380728059398066e-02, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", -2.688303550821525e-02, "nan", 2.483900449184239e-02, "nan", 5.179210111204572e-03, "nan", "nan", -1.007017536471506e-03, "nan", "nan", "nan", 8.443824490305261e-01, "nan", "nan", "nan", 1.385405682562207e+03, "nan", "nan", "nan"]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_r2scanl_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scanl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [3.035016260221491e-04, 3.035055222547499e-04, 3.035156697021570e-04, 3.034519477019141e-04, 3.035037399529357e-04, 3.035037399529357e-04, 1.358075137676482e-03, 1.358411009334135e-03, 1.367563810893210e-03, "nan", 1.358242106054401e-03, "nan", 0.000000000000000e+00, "nan", "nan", "nan", "nan", "nan", 0.000000000000000e+00, "nan", 3.165060491123985e-03, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 1.416192943040965e-03, "nan", "nan", 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, "nan", "nan", "nan", "nan", "nan", "nan", 1.062204253837330e-02, 0.000000000000000e+00, "nan", 0.000000000000000e+00, 1.550443416718013e-68, "nan", "nan", 5.660246631706067e-04, "nan", "nan", 0.000000000000000e+00, 6.725405967629972e-04, "nan", "nan", "nan", 1.335584807157655e-02, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 1.180757733666290e-02, "nan", 0.000000000000000e+00, "nan", 0.000000000000000e+00, "nan", "nan", 7.807438158282198e-04, "nan", "nan", "nan", 0.000000000000000e+00, "nan", "nan", "nan", 1.451671723384277e-63, "nan", "nan", "nan"]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_r2scanl_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scanl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
