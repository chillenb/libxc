
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_r2scanl_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scanl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.324520175794887e+01, -2.324525930539924e+01, -2.324555596604401e+01, -2.324461280581122e+01, -2.324523177275895e+01, -2.324523177275895e+01, -3.428440684360930e+00, -3.428528643838090e+00, -3.431487267175297e+00, -3.433084792882890e+00, -3.428468043334501e+00, -3.428468043334501e+00, -5.954547397687074e-01, -5.948742128244213e-01, -5.804878815251906e-01, -5.902843489700949e-01, -5.952538480380358e-01, -5.952538480380358e-01, -1.828179663709911e-01, -1.851048406312959e-01, -6.718317707025885e-01, -1.120523158537776e-01, -1.834573226871883e-01, -1.834573226871884e-01, -5.506340818482817e-03, -5.847610647142762e-03, -3.160682147659784e-02, -2.028525278332089e-03, -5.785077071458101e-03, -5.785077071458101e-03, -4.087626683971124e+00, -4.338371752200722e+00, -5.666696849724065e+00, -4.120366026196673e+00, -5.667123817654300e+00, -4.659063029622613e+00, -2.115324680919304e+00, -1.722039338196303e+00, -1.966106104816283e+00, -1.966861133268729e+00, -1.974085062021435e+00, -2.134565671714780e+00, -4.722715475473052e-01, -4.796763525018511e-01, -4.432710091273488e-01, -5.258746327948853e-01, -5.714759173279157e-01, -5.369630582590766e-01, -9.869913648677783e-02, -1.524409435744443e-01, -9.769173793159767e-02, -1.698857082155979e+00, -1.163761399426922e-01, -1.163761399426922e-01, -2.114262247978405e-03, -2.889938072617023e-03, -2.148841813155718e-03, -5.865346706775319e-02, -2.167080199599045e-03, -2.669201186467721e-03, -5.645544533207534e-01, -5.628781876682278e-01, -5.632042727860344e-01, -5.584365730823695e-01, -5.636349241266609e-01, -5.634371877093225e-01, -5.464528792853461e-01, -5.224116105050137e-01, -4.214882715034245e-01, -5.944196453552949e-01, -4.803615706363687e-01, -4.387653108187766e-01, -5.201837552514641e-01, -2.469681565538326e-01, -2.881500326003116e-01, -3.804603377122939e-01, -2.619551823059174e-01, -2.754528751253829e-01, -4.508192428324517e-01, -2.880832170999904e-02, -4.083954422959320e-02, -3.225557458489650e-01, -7.934201670628320e-02, -7.934201670628321e-02, -8.353210216005349e-03, -5.131246261441505e-04, -1.242112455353296e-03, -7.573601679173018e-02, -2.215180555247518e-03, -2.215180555247510e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_r2scanl_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scanl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.110958665630960e+01, -3.110965931127327e+01, -3.111004318683604e+01, -3.110885224260417e+01, -3.110962447265709e+01, -3.110962447265709e+01, -3.993626832605083e+00, -3.993646957324281e+00, -3.994241561133163e+00, -3.992019557906068e+00, -3.993665556981322e+00, -3.993665556981322e+00, -7.760837017765582e-01, -7.752188323942940e-01, -7.527436020980673e-01, -7.584117833614961e-01, -7.757704400602972e-01, -7.757704400602972e-01, -1.538954559506935e-01, -1.604596884795003e-01, -8.887018656457173e-01, -1.525457115034774e-01, -1.559443488627240e-01, -1.559443488627240e-01, -9.504168947734159e-03, -1.006147795574910e-02, -4.910582630982458e-02, -3.671440096562359e-03, -9.954537743373591e-03, -9.954537743373591e-03, -4.936169959130067e+00, -5.818181499559009e+00, -7.572991280275788e+00, -4.909215351911032e+00, -7.573472181337625e+00, -6.118509696025733e+00, -2.868230054905581e+00, -2.276367238617608e+00, -2.017321663572402e+00, -2.034856252576112e+00, -2.071400180597127e+00, -2.891116717692727e+00, -5.751537335630349e-01, -6.246756430970317e-01, -5.439032612787763e-01, -6.877063127740911e-01, -7.112222583653409e-01, -7.082628033406044e-01, -1.444169877172828e-01, -2.078577039691348e-01, -1.426146569217966e-01, -2.323455256993135e+00, -1.672215976081116e-01, -1.672215976081116e-01, -3.639446565141646e-03, -5.106052078659438e-03, -3.805406839711956e-03, -8.882930394026804e-02, -3.855625040083242e-03, -4.793501308312294e-03, -7.521962527635316e-01, -7.427517465592922e-01, -7.468485586569463e-01, -7.347687009096698e-01, -7.488735543398993e-01, -7.483127381713137e-01, -7.284526297247488e-01, -5.708597712198089e-01, -5.206228904251872e-01, -7.945746382715408e-01, -6.313539363168161e-01, -5.303988238682479e-01, -6.255796187344491e-01, -3.417667085470044e-01, -3.881450188064551e-01, -5.133137748867712e-01, -3.450935509539703e-01, -3.599202273736226e-01, -5.011375204037313e-01, -4.573683488153676e-02, -6.258387792773326e-02, -3.766643509841062e-01, -1.170300601543348e-01, -1.170300601543348e-01, -1.432574463516081e-02, -9.610054468016050e-04, -2.286648328361740e-03, -1.116610350248450e-01, -3.991420014507982e-03, -3.991420014507955e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_r2scanl_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scanl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([2.936742355323545e-10, 2.936679409474924e-10, 2.936427393780465e-10, 2.937457560329895e-10, 2.936708919133796e-10, 2.936708919133796e-10, -1.704891476303003e-05, -1.704974838838908e-05, -1.707119719189132e-05, -1.704794926009962e-05, -1.704889030336664e-05, -1.704889030336664e-05, -4.172007604371552e-03, -4.162186420969607e-03, -3.962017151699834e-03, -4.166587813802525e-03, -4.168988556929748e-03, -4.168988556929748e-03, -1.731267679023371e+00, -1.654834227863675e+00, -1.612206328974472e-03, -2.761698284925509e-01, -1.708079331778481e+00, -1.708079331778482e+00, 9.734556687886447e+01, 8.882157911124125e+01, 2.358987037308319e+00, 3.435460843480013e+02, 9.245035727016690e+01, 9.245035727016690e+01, -1.680650218252904e-06, -2.240725095716706e-06, 7.051578566157443e-08, -1.516182103051122e-06, 7.035975823262518e-08, -2.719053770234348e-06, 2.652098236745663e-06, -3.986348410152401e-05, -1.460218674090178e-04, -1.436260082037667e-04, -1.420080738260755e-04, 5.279134156583421e-06, -3.388759245219477e-03, -9.276793149014995e-03, -5.050589673832514e-03, -2.700453836445800e-02, -1.842247080334734e-02, -1.063573922012709e-02, 4.098456755006047e-01, 2.680478913320945e-02, 4.452974303655813e-01, -1.721404683631483e-04, 2.912106979751847e-01, 2.912106979751847e-01, 4.446394383484162e+02, 3.269401227845754e+02, 9.845583955576627e+02, 1.648701441684885e+00, 4.699554570329946e+02, 5.171826545857887e+02, -7.727011091363014e-04, -4.572681043952961e-03, -3.061581911069174e-03, -1.178559032613953e-03, -2.510904405820085e-03, -2.483255731669058e-03, -5.033632344452727e-04, -3.198875778107765e-02, -6.482482551968355e-03, 6.038398902244138e-04, -1.791905990457863e-02, -4.650511079703297e-03, -5.252384479796139e-03, 2.483900449184239e-02, -3.201144145156059e-02, 5.179210111204572e-03, -2.896300346377873e-02, -6.899138274542961e-02, -5.420641946704603e-02, 3.615031993990231e+00, 1.500925542725551e+00, -1.913668449143312e-01, 8.443824490305261e-01, 8.443824490305318e-01, 7.672444905713759e+01, 4.634538969924451e+03, 1.420802301432597e+03, 1.025801523302871e+00, 8.557968102682165e+02, 8.557968102682084e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_r2scanl_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scanl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.982573555814583e-03, 1.982707762552216e-03, 1.986717964982446e-03, 1.986363894092235e-03, 1.982594958631624e-03, 1.982594958631624e-03, 2.795056079592165e-03, 2.789508889463036e-03, 2.695116409217607e-03, 2.967261537305900e-03, 2.793568779646814e-03, 2.793568779646814e-03, 3.211905634134630e-02, 3.188273852360660e-02, 9.258762706400628e-04, 2.608678123174197e-03, 3.204985868132115e-02, 3.204985868132116e-02, -3.296082613036406e-06, -3.179367916938191e-06, 1.344881551153066e-04, -5.737963856538716e-06, -3.220534924358286e-06, -3.220534924358286e-06, -7.365808239519144e-06, 2.575193155401686e-04, 0.000000000000000e+00, -1.113128616569929e-05, 0.000000000000000e+00, 6.320293004116486e-04, -1.015067591482109e-06, 6.886367637526027e-04, 3.230532584882540e-03, 3.219912369911631e-03, 3.223922295290052e-03, 0.000000000000000e+00, -8.590706910513316e-05, 8.395999153127035e-05, -8.291520783999221e-05, 9.715003287167161e-03, 1.012704246916590e-02, 4.168982692833095e-03, 0.000000000000000e+00, -3.675777492822542e-05, 0.000000000000000e+00, 2.128696899652346e-03, 0.000000000000000e+00, 0.000000000000000e+00, -8.804152278872181e-06, -4.682220608380904e-11, -2.058677990822252e-11, 0.000000000000000e+00, -1.010029001391488e-05, 0.000000000000000e+00, -4.346998437274342e-11, -3.646147966985043e-10, -9.898988116989783e-13, -4.386199252761370e-07, -5.852025889585326e-10, -2.724278188577459e-13, -1.768952966579380e-12, 1.204870475317653e-02, -6.565391114488628e-05, 0.000000000000000e+00, 5.261682493830480e-03, -9.383225833403093e-05, -1.090541849029467e-04, 0.000000000000000e+00, -2.432315812222540e-05, 0.000000000000000e+00, 1.183375691595610e-03, 5.152530157642709e-03, 1.456340834008863e-02, -1.403469535402855e-05, 2.641539998941061e-05, 1.935432478782743e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -9.043377306918313e-09, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
