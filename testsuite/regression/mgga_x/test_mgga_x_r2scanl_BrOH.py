
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_r2scanl_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scanl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.219326327748687e+01, -2.219327524895274e+01, -2.219342881985949e+01, -2.219323125083918e+01, -2.219326876727844e+01, -2.219326876727844e+01, -3.699117494433711e+00, -3.699083666163697e+00, -3.698302833862472e+00, -3.789138188091469e+00, -3.699115854529817e+00, -3.788618221429089e+00, -7.229855969753853e-01, -7.254814554861531e-01, -7.061606377660302e-01, -7.117202230557103e-01, -7.259550334117690e-01, -7.259550334117690e-01, -1.955864419050110e-01, -2.013180188138601e-01, -8.626722846024252e-01, -1.440375685902481e-01, -1.994661775489321e-01, -1.994661775489321e-01, -1.109599534820572e-02, -1.162253884604193e-02, -4.724059473633906e-02, -5.323111285904825e-03, -1.150142028597832e-02, -1.150142028597832e-02, -5.670126071678872e+00, -5.671134510792952e+00, -5.670232470255376e+00, -5.286906635779595e+00, -5.670638627425906e+00, -5.670638627425906e+00, -2.115679313308162e+00, -2.130986838565838e+00, -2.109082014040734e+00, -2.121035662317853e+00, -2.134565671714780e+00, -2.147846200755332e+00, -6.322635701848238e-01, -6.867962335926016e-01, -5.999551059098538e-01, -6.257694079355642e-01, -6.565563990547856e-01, -6.271102610899782e-01, -9.869913648677783e-02, -2.000960648563435e-01, -9.769173793159767e-02, -1.813019490462338e+00, -1.223703654715559e-01, -1.223703654715559e-01, -2.140045881771969e-03, -5.868621816548378e-03, -4.398561913211362e-03, -5.865346706775319e-02, -2.300238705417826e-03, -5.347224399219016e-03, -6.524163719572357e-01, -6.489333631220664e-01, -5.735208250472722e-01, -6.511452271055599e-01, -6.506631067866769e-01, -6.506631067866769e-01, -6.314777935070441e-01, -5.478041971503828e-01, -5.722061132170410e-01, -5.948356898733590e-01, -5.833048259106925e-01, -5.579380404020761e-01, -7.201051548892908e-01, -2.469681565538326e-01, -2.988991853227085e-01, -3.804603377122939e-01, -3.379738658849086e-01, -3.379738658849086e-01, -4.921662588661436e-01, -4.375313570171257e-02, -5.923155777199417e-02, -3.610469612143536e-01, -7.934201670628320e-02, -8.589432470268908e-02, -1.300441901811388e-02, -1.606727223245715e-03, -1.237051721565209e-03, -8.194501493713406e-02, -4.544433101043258e-03, -4.544433101043251e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08

# test_mgga_x_r2scanl_BrOH_1_vrho() not generated due to NaN

# test_mgga_x_r2scanl_BrOH_1_vsigma() not generated due to NaN

# test_mgga_x_r2scanl_BrOH_1_vlapl() not generated due to NaN


def test_mgga_x_r2scanl_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scanl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
