
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_22_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_22", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.178502085826487e+01, -2.178515220851057e+01, -2.178572650408307e+01, -2.352894557358669e+01, -2.352973951311196e+01, -2.527486731453011e+01, -3.492430513531887e+00, -3.946515074782614e+00, -3.949803908034269e+00, -3.948835028361569e+00, -3.948527292129816e+00, -3.494871443659922e+00, -5.375862463476897e-01, -6.094209038327643e-01, -6.454296181026106e-01, -5.905743830265595e-01, -5.253674305945339e-01, -6.581867548674499e-01, -1.525833743999996e-01, -1.559452316987691e-01, -6.665864650418061e-01, -1.134385200053854e-01, -1.544741035460491e-01, -1.542658023277600e-01, -4.887410858821826e-03, -5.195575143135284e-03, -2.868352004796873e-02, -2.817509569989718e-03, -3.933116331250359e-03, -3.933116331250359e-03, -6.123657338879818e+00, -6.123811318752320e+00, -6.123657731397197e+00, -6.123794231413418e+00, -5.808779608274737e+00, -5.809061696152322e+00, -2.163852952033072e+00, -2.191847489296392e+00, -2.142578580474042e+00, -2.167694778844767e+00, -1.936314019634666e+00, -2.189695178934023e+00, -6.231744514302708e-01, -7.536744420857813e-01, -6.248941767075946e-01, -6.646314678899466e-01, -6.433970400289162e-01, -7.046455940318364e-01, -7.586218640482553e-02, -1.464145809379726e-01, -7.003762177406393e-02, -2.269599353638966e+00, -9.124983540176809e-02, -9.124983540176812e-02, -2.197371734418505e-03, -2.754273169292026e-03, -2.109324299304642e-03, -4.654543235483742e-02, -2.649704198042482e-03, -2.649704198042483e-03, -6.778991782885753e-01, -6.808965444047328e-01, -6.461048941411494e-01, -6.649650292753833e-01, -6.484971610478418e-01, -6.639854996419159e-01, -6.605305046115122e-01, -5.110316116144428e-01, -5.545737072205922e-01, -6.366424408132152e-01, -6.241401261186277e-01, -5.750164336081152e-01, -7.325491980643362e-01, -2.056698206433590e-01, -2.361553634374490e-01, -3.389591640938700e-01, -3.189357046032112e-01, -2.828595677386481e-01, -5.169820130588335e-01, -2.764207442261762e-02, -3.723046467315044e-02, -3.832333916493682e-01, -5.994157286123167e-02, -5.994157286123166e-02, -7.039838853145645e-03, -7.361238710987392e-04, -1.582378102202411e-03, -5.547422081812384e-02, -2.433272385565224e-03, -2.473865390477384e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_22_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_22", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.284237994523619e+01, -3.284240297757435e+01, -3.284249564573548e+01, -3.284248700401975e+01, -3.284288312154239e+01, -3.284303728508186e+01, -3.284157660719551e+01, -2.947734848809305e+01, -3.284244832395400e+01, -2.947807792273344e+01, -2.947838679932382e+01, -2.947807792273344e+01, -4.931393255123838e+00, -4.843974283141192e+00, -4.931345757183159e+00, -4.931342181903130e+00, -4.930385871746877e+00, -4.930262997035622e+00, -4.931153726828081e+00, -4.931221259101116e+00, -4.930708562891144e+00, -4.930434186654589e+00, -4.842765387732148e+00, -4.930434186654589e+00, -7.675673303066862e-01, -7.758644274839830e-01, -7.648913363652343e-01, -9.228604230239954e-01, -8.799372694003602e-01, -8.708308129870056e-01, -8.893775241597923e-01, -7.444903131560606e-01, -7.853070593239665e-01, -6.930102399184540e-01, -9.332503547455854e-01, -8.384727670106376e-01, -1.788560969382256e-01, -2.289877023075006e-01, -1.818221727905877e-01, -2.354237603597550e-01, -9.537473230336047e-01, -8.444593049467739e-01, -1.473614986833456e-01, -1.511590742333898e-01, -2.242380611203248e-01, -1.027392765044240e-01, -2.242380611203245e-01, -1.014758336298471e-01, -6.112710282140138e-03, -6.495631764763485e-03, -6.746515571993254e-03, -6.862149734105550e-03, -3.731092715542946e-02, -3.779521702014517e-02, -3.674061665095501e-03, -3.612835331479877e-03, -5.452900580608850e-03, -3.102793059565446e-03, -5.452900580608850e-03, -3.102793059565448e-03, -7.295908890106862e+00, -7.294178679514284e+00, -7.300073369983583e+00, -7.298202008328418e+00, -7.296186437111133e+00, -7.294350323944973e+00, -7.299757895833292e+00, -7.298003459026101e+00, -8.004344881805281e+00, -7.296190603695570e+00, -7.298003337670376e+00, -8.002397654836042e+00, -2.787869465629880e+00, -2.787732543840534e+00, -2.807918053677934e+00, -2.807076752703948e+00, -2.770062902039215e+00, -2.775199295731594e+00, -2.788390384275452e+00, -2.793380318932457e+00, -2.811486041213556e+00, -2.624869145463626e+00, -2.811486041213556e+00, -2.799714331206492e+00, -8.128074290737870e-01, -8.801987183712603e-01, -8.805949429880793e-01, -8.822169912801978e-01, -7.545022566594908e-01, -7.742427108921545e-01, -7.694717459015310e-01, -7.906480861138353e-01, -8.406850444793514e-01, -8.734828966966210e-01, -8.406850444793516e-01, -8.020293146883113e-01, -9.815281755513625e-02, -9.914888490784056e-02, -1.787722317504436e-01, -2.070465566578722e-01, -8.824056577207069e-02, -9.336379423028633e-02, -2.642018614712990e+00, -2.640793248713401e+00, -1.144825499462019e-01, -1.237470032409867e-01, -1.144825499462020e-01, -1.237470032409868e-01, -2.904073058079113e-03, -2.864323494784484e-03, -3.535075184998549e-03, -3.588572814021618e-03, -2.643501044348407e-03, -2.799597978618218e-03, -6.003583645946074e-02, -6.176698842011667e-02, -2.699822709907015e-03, -3.708020987200369e-03, -2.699822709907018e-03, -3.708020987200373e-03, -8.675702936826277e-01, -8.715414568221481e-01, -8.433725835098099e-01, -8.474032182627748e-01, -8.947581483187205e-01, -8.980847750074338e-01, -8.950334778649716e-01, -8.624560141485524e-01, -8.949016030210397e-01, -8.982277352307326e-01, -8.949016030210397e-01, -8.589293510381778e-01, -8.414603491158039e-01, -8.449223416691620e-01, -6.869593590054112e-01, -7.232425659713599e-01, -7.080031178076414e-01, -7.856761841103386e-01, -7.442464014774867e-01, -7.470967871431472e-01, -7.230061425364365e-01, -7.257842180672300e-01, -7.230061425364362e-01, -8.093892268275673e-01, -9.181698688536930e-01, -1.027024458459235e+00, -2.766312571043309e-01, -2.787782818795784e-01, -2.913757819751008e-01, -3.568996293497638e-01, -4.570970728326096e-01, -4.965434837067764e-01, -4.253436256296076e-01, -4.254333542346524e-01, -4.253436256296075e-01, -3.694639435258705e-01, -6.399921435983361e-01, -6.430630480254887e-01, -3.661548543882502e-02, -3.686529323657348e-02, -4.735265928499790e-02, -4.897114809750300e-02, -4.719622522584648e-01, -4.748627464200153e-01, -7.531720719085824e-02, -8.003883021155346e-02, -7.531720719085819e-02, -8.003883021155343e-02, -9.208870770034986e-03, -9.542516444489569e-03, -9.510206181245486e-04, -9.531942496481516e-04, -2.039001313773825e-03, -2.168629640135238e-03, -7.237761193239564e-02, -7.340565470191864e-02, -2.557344099961278e-03, -3.398617977378064e-03, -2.557344099961280e-03, -3.580406610264654e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_22_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_22", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.073240873749038e-08, 0.000000000000000e+00, -4.073593814853456e-08, -4.073236960475518e-08, 0.000000000000000e+00, -4.073590899445422e-08, -4.073195773740264e-08, 0.000000000000000e+00, -4.073539829853323e-08, -4.073243901053165e-08, 0.000000000000000e+00, -4.777224489000359e-08, -4.073241245956270e-08, 0.000000000000000e+00, -4.777055919100963e-08, -4.776734296776917e-08, 0.000000000000000e+00, -4.777055919100963e-08, -3.966000687578209e-05, 0.000000000000000e+00, -2.933890107864584e-05, -3.967078746529206e-05, 0.000000000000000e+00, -3.966012779064204e-05, -3.988111166199286e-05, 0.000000000000000e+00, -3.991708657368314e-05, -3.979120794682064e-05, 0.000000000000000e+00, -3.978926975677862e-05, -3.966140067800566e-05, 0.000000000000000e+00, -3.997582592674811e-05, -2.934354964731320e-05, 0.000000000000000e+00, -3.997582592674811e-05, -7.591122944719635e-03, 0.000000000000000e+00, -7.844356549233125e-03, -7.530628475846107e-03, 0.000000000000000e+00, -1.172231861443701e-02, -1.031148379152656e-02, 0.000000000000000e+00, -1.023105521968806e-02, -1.091109005600472e-02, 0.000000000000000e+00, -7.299130555006049e-03, -7.846625710569358e-03, 0.000000000000000e+00, -6.117751501229340e-03, -1.172326871367086e-02, 0.000000000000000e+00, -9.849502574875699e-03, -6.666175547510098e-01, 0.000000000000000e+00, -1.372751578753130e+00, -6.975471472964202e-01, 0.000000000000000e+00, -1.416326944298351e+00, -2.383138357511062e-03, 0.000000000000000e+00, -1.670273399099602e-03, -7.448874489633917e-01, 0.000000000000000e+00, -8.830912567258421e-01, -1.034554355699389e+00, 0.000000000000000e+00, -7.340166852815856e-01, -1.034554355699387e+00, 0.000000000000000e+00, 3.870486679654605e-01, -1.629843129530438e+02, 0.000000000000000e+00, -1.447620895515988e+02, 3.374966430346813e+02, 0.000000000000000e+00, -1.328232261416780e+02, 6.979534165512350e+00, 0.000000000000000e+00, -3.632435840599157e+00, -3.839857884996929e+02, 0.000000000000000e+00, -3.991128104203149e+02, -1.992811918303476e+02, 0.000000000000000e+00, -8.025360454202784e+02, -1.992811918303476e+02, 0.000000000000000e+00, -8.025360454202784e+02, -1.435046715765102e-05, 0.000000000000000e+00, -1.436430887153402e-05, -1.435303854364803e-05, 0.000000000000000e+00, -1.436680157101032e-05, -1.435074457704004e-05, 0.000000000000000e+00, -1.436449188583058e-05, -1.435294326179904e-05, 0.000000000000000e+00, -1.436674853689342e-05, -1.277381242757428e-05, 0.000000000000000e+00, -1.436555688478371e-05, -1.435169979665996e-05, 0.000000000000000e+00, -1.278602425401402e-05, -3.210014481240884e-04, 0.000000000000000e+00, -3.225461637287894e-04, -3.259624184231098e-04, 0.000000000000000e+00, -3.273279020839046e-04, -3.156337082682139e-04, 0.000000000000000e+00, -3.187057264062420e-04, -3.204881785788841e-04, 0.000000000000000e+00, -3.234815867589748e-04, -3.276200854552668e-04, 0.000000000000000e+00, -2.359226693375023e-04, -3.276200854552668e-04, 0.000000000000000e+00, -3.257969065598255e-04, -6.813556189248283e-02, 0.000000000000000e+00, -5.493067403574525e-02, -6.080766105851625e-02, 0.000000000000000e+00, -6.117241385505352e-02, -7.434747197116880e-02, 0.000000000000000e+00, -7.492101300595459e-02, -8.336555114950071e-02, 0.000000000000000e+00, -7.856382767972481e-02, -6.328817214702701e-02, 0.000000000000000e+00, -5.764639318583911e-02, -6.328817214702706e-02, 0.000000000000000e+00, -7.280940306255813e-02, -8.973853305023349e-01, 0.000000000000000e+00, -8.869822843510886e-01, -2.239649471722895e-01, 0.000000000000000e+00, -5.614841581044898e-01, -9.938754888301256e-01, 0.000000000000000e+00, -9.878963291153720e-01, -6.476300216640245e-04, 0.000000000000000e+00, -6.489963829545207e-04, -1.028013680769137e+00, 0.000000000000000e+00, -1.345696615827463e+00, -1.028013680769138e+00, 0.000000000000000e+00, -1.345696615827464e+00, 1.308826426956060e+03, 0.000000000000000e+00, -5.162379347997493e+02, -4.038680423485415e+02, 0.000000000000000e+00, -3.679287792106466e+02, -1.940302663325829e+03, 0.000000000000000e+00, -1.813555660243025e+03, -1.827811004240712e+00, 0.000000000000000e+00, 2.253495032751393e+00, -8.059961075194788e+02, 0.000000000000000e+00, -7.641444947766372e+02, -8.059961075194786e+02, 0.000000000000000e+00, -7.641444947766372e+02, -9.363520451284003e-02, 0.000000000000000e+00, -9.223954871265956e-02, -9.414538445271568e-02, 0.000000000000000e+00, -9.277044174969296e-02, -8.892886001846394e-02, 0.000000000000000e+00, -8.773068569166005e-02, -8.963374925712071e-02, 0.000000000000000e+00, -9.249789692600673e-02, -8.928459208664569e-02, 0.000000000000000e+00, -8.806649079510613e-02, -8.928459208664569e-02, 0.000000000000000e+00, -9.257939195014638e-02, -1.041820013707084e-01, 0.000000000000000e+00, -1.028683503418211e-01, -1.230945006432012e-01, 0.000000000000000e+00, -9.363975626600141e-02, -1.253009889754291e-01, 0.000000000000000e+00, -1.002715208477466e-01, -1.210603515997370e-01, 0.000000000000000e+00, -1.195599425096029e-01, -1.240325809998445e-01, 0.000000000000000e+00, -1.226149778218107e-01, -1.240325809998445e-01, 0.000000000000000e+00, -1.021825118874767e-01, -4.805836840485659e-02, 0.000000000000000e+00, -4.087290324292173e-02, -4.539237946621197e-01, 0.000000000000000e+00, -4.525750000406600e-01, -2.535853123936073e-01, 0.000000000000000e+00, -4.009813067173610e-01, -2.296578015362097e-01, 0.000000000000000e+00, -3.130902391161337e-01, -3.880848646133219e-01, 0.000000000000000e+00, -3.922568671669812e-01, -3.880848646133220e-01, 0.000000000000000e+00, -2.720307129080062e-01, -1.421717495395264e-01, 0.000000000000000e+00, -1.437759515006627e-01, 7.443945038880613e+00, 0.000000000000000e+00, 7.267250104796283e+00, -2.301325500386767e+00, 0.000000000000000e+00, -2.238344788542947e+00, -4.667962191349627e-01, 0.000000000000000e+00, -5.121466240236486e-01, -1.639839009120893e+00, 0.000000000000000e+00, -1.835451476535905e+00, -1.639839009120894e+00, 0.000000000000000e+00, -1.835451476535907e+00, 1.234480765746550e+02, 0.000000000000000e+00, 1.140946945421887e+02, -5.971355166196216e+03, 0.000000000000000e+00, -5.931072611946002e+03, 5.413213806857762e+03, 0.000000000000000e+00, 4.925154750843541e+03, 1.476038904444911e+00, 0.000000000000000e+00, 1.420157799936933e+00, -1.444097926548532e+03, 0.000000000000000e+00, -9.254959771726026e+02, -1.444097926548534e+03, 0.000000000000000e+00, 2.076342841460250e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_22_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_22", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.225461918975540e-03, 2.225612068997893e-03, 2.225476349476319e-03, 2.225622517814749e-03, 2.225512982146506e-03, 2.225677629688878e-03, 2.225351663567281e-03, 3.435554456247015e-03, 2.225471565375875e-03, 3.435385679744667e-03, 3.435383109035159e-03, 3.435385679744667e-03, 1.869203182889810e-02, 5.959909870998736e-03, 1.869534785597175e-02, 1.869170945838071e-02, 1.875962434515143e-02, 1.877087713286174e-02, 1.873473321238942e-02, 1.873455825280589e-02, 1.868763211508247e-02, 1.879186790571707e-02, 5.956795323834242e-03, 1.879186790571707e-02, 4.991531805424376e-03, 5.501681882955443e-03, 4.851295613875768e-03, 4.628850841533878e-02, 3.799023563280252e-02, 3.694498156519629e-02, 4.057994495898909e-02, 4.036976813674180e-03, 5.815580346653052e-03, 1.871993728147229e-03, 4.737099935905669e-02, 3.310554126397187e-02, -5.637378835230329e-06, 9.919086652116221e-02, 6.598086675276338e-04, 1.079515009762861e-01, 1.406961218356160e-02, 3.078643565720651e-04, 1.978360736689522e-02, 2.486149434257138e-02, 7.545753701661263e-02, 6.738821413077466e-03, 7.545753701661251e-02, -8.853633407707575e-04, 2.587355164676055e-04, 2.758819290595398e-04, -8.407096773105122e-07, 2.986043637810996e-04, -6.760744001857558e-05, 1.465790884107891e-03, 1.320470877522174e-04, 1.304972726153797e-04, 2.244001739475421e-04, 1.662365935381278e-04, 2.244001739475421e-04, 1.662365935381307e-04, 1.319847309546502e-02, 1.320151294264328e-02, 1.317640066406079e-02, 1.318017589515569e-02, 1.319695773102226e-02, 1.320057070773443e-02, 1.317803101297665e-02, 1.318119960963496e-02, 9.801912139707467e-03, 1.319083995601120e-02, 1.318739448476638e-02, 9.804192780610647e-03, 2.869779443593209e-02, 2.879935748530819e-02, 2.945572788033584e-02, 2.953082720735293e-02, 2.796709417926602e-02, 2.827956131346933e-02, 2.867391911908839e-02, 2.898100748314829e-02, 2.964414016631820e-02, 7.784040719837193e-03, 2.964414016631820e-02, 2.927122279826653e-02, 1.290127403107338e-01, 6.160571808437114e-02, 1.143940165776882e-01, 1.135774159770152e-01, 1.245316201229902e-01, 1.303521151489343e-01, 1.357688072722420e-01, 1.330332560092906e-01, 1.249512140539532e-01, 6.301711527631884e-02, 1.249512140539532e-01, 1.309861030721401e-01, 7.187056659428522e-03, 7.327167137397571e-03, -2.392235578227762e-03, 3.739530531332681e-02, 5.725883104861324e-03, 6.790709909067267e-03, 3.976656681799323e-02, 3.978402640369538e-02, 1.311935524971722e-02, 2.128742484499671e-02, 1.311935524971729e-02, 2.128742484499683e-02, -3.437785198435834e-08, 8.407291497932415e-05, 1.236983787401164e-04, 1.178810370628342e-04, 2.486259791270060e-04, 2.761000636170490e-04, 3.163873777104150e-03, -3.674118124977566e-04, 1.099341207601173e-04, 2.704383253146916e-04, 1.099341207601184e-04, 2.704383253146964e-04, 9.741555251126627e-02, 9.680219357409847e-02, 1.059489348204767e-01, 1.052160842163383e-01, 9.050887355754790e-02, 9.017138749950114e-02, 9.041004174821715e-02, 9.987518472989533e-02, 9.047471598363672e-02, 9.013019042167388e-02, 9.047471598363672e-02, 1.010978945274058e-01, 1.012735468897153e-01, 1.006584349059983e-01, 1.483264834156352e-01, 6.031617803050317e-02, 1.484262042870349e-01, 7.816083139106000e-02, 1.345059355947887e-01, 1.338394133675515e-01, 1.431263964666572e-01, 1.424116013858906e-01, 1.431263964666572e-01, 8.496756608230645e-02, 1.124356562967106e-01, 6.892389717123533e-02, 6.197173618730069e-02, 6.290420467945579e-02, 7.350690457012604e-03, 9.743701902954084e-02, 4.010222253534307e-02, 1.588662116950556e-01, 1.363839130595437e-01, 1.375568403046092e-01, 1.363839130595436e-01, 2.401741979473516e-02, 1.457660506455535e-01, 1.481877025936761e-01, -6.726201878788841e-05, -6.727587180006017e-05, 1.871834863511979e-03, 2.026464740269879e-03, 1.935375414720764e-01, 2.084153455528207e-01, 5.843835646541920e-03, 7.949813916089919e-03, 5.843835646541921e-03, 7.949813916089930e-03, -9.952489785883051e-07, -1.091413848564484e-06, 3.557812474091379e-05, 3.558098054836898e-05, -4.946490435569289e-08, -6.304921070227746e-08, -7.438769333148509e-04, -8.621361747001128e-04, 1.674495672756863e-04, 2.521214315659917e-04, 1.674495672756899e-04, -3.757048862242463e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
