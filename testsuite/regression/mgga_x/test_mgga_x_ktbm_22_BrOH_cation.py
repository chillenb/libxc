
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_22_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_22", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.503363360812198e+01, -2.503370570473774e+01, -2.503417168550792e+01, -2.503310307831121e+01, -2.503364225374516e+01, -2.503364225374516e+01, -3.404521238780359e+00, -3.404674917255160e+00, -3.409043966181994e+00, -3.410055042157137e+00, -3.408567889929979e+00, -3.408567889929979e+00, -5.811298854186480e-01, -5.803930943046189e-01, -5.638044076749651e-01, -5.753281176947829e-01, -5.736066964483774e-01, -5.736066964483774e-01, -1.621220191439549e-01, -1.653770705764369e-01, -6.339834546424885e-01, -1.108717621889732e-01, -1.510354915169380e-01, -1.510354915169379e-01, -4.885819870102811e-03, -5.143940893491109e-03, -2.836434068185104e-02, -2.807250013581432e-03, -3.926058800519296e-03, -3.926058800519295e-03, -6.119344009838516e+00, -6.119547602308602e+00, -6.119434064557570e+00, -6.119610508583714e+00, -6.119406940691690e+00, -6.119406940691690e+00, -2.090251020811780e+00, -2.126756542332569e+00, -2.079597990656893e+00, -2.112882348898547e+00, -2.115541862585502e+00, -2.115541862585502e+00, -6.350222603989299e-01, -6.843978258067314e-01, -5.500554014392351e-01, -5.627907036634641e-01, -6.508921263371663e-01, -6.508921263371663e-01, -7.501978266016199e-02, -1.531903010806461e-01, -6.929009916945078e-02, -1.930856703708618e+00, -9.021530581599566e-02, -9.021530581599566e-02, -2.160612184292520e-03, -2.737703431413167e-03, -2.100800277500630e-03, -4.614833063607236e-02, -2.644273161204802e-03, -2.644273161204803e-03, -6.685439395205544e-01, -6.719237860882268e-01, -6.708930191120778e-01, -6.699030617733541e-01, -6.704087708427893e-01, -6.704087708427893e-01, -6.426194640743114e-01, -5.657669190014433e-01, -5.988723453300131e-01, -6.223212560610910e-01, -6.108770705579737e-01, -6.108770705579737e-01, -7.038576895005548e-01, -2.035329041682179e-01, -2.541356646162253e-01, -3.501579784509025e-01, -3.036186699609476e-01, -3.036186699609475e-01, -4.868957270558030e-01, -2.715230440067465e-02, -3.702658718439797e-02, -3.497582535389109e-01, -5.942563013110407e-02, -5.942563013110408e-02, -6.846984168002342e-03, -7.349093897350189e-04, -1.544696884237265e-03, -5.579192480885659e-02, -2.427532153150083e-03, -2.427532153150080e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_22_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_22", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.975353096981345e+01, -2.975272117777476e+01, -2.975364774153307e+01, -2.975280609665800e+01, -2.975390220798174e+01, -2.975320419533169e+01, -2.975257902817220e+01, -2.975151864709349e+01, -2.975360366387556e+01, -2.975210526481573e+01, -2.975360366387556e+01, -2.975210526481573e+01, -4.937355583031082e+00, -4.937062034257569e+00, -4.937547268664485e+00, -4.937174873307815e+00, -4.941138221760922e+00, -4.941807497837172e+00, -4.940613420813259e+00, -4.940609229933703e+00, -4.936145444256857e+00, -4.943909296650538e+00, -4.936145444256857e+00, -4.943909296650538e+00, -8.257218631652896e-01, -8.322862145516253e-01, -8.236568890563131e-01, -8.311606937886437e-01, -7.947897699735130e-01, -7.897357379255209e-01, -8.100555104257919e-01, -8.146008857829651e-01, -8.383213876208735e-01, -7.786331394746508e-01, -8.383213876208735e-01, -7.786331394746508e-01, -2.116193816389200e-01, -2.277764969198273e-01, -2.151339033306547e-01, -2.337709701484396e-01, -8.345276513789830e-01, -8.794705304185257e-01, -1.454032728621235e-01, -1.496384552494868e-01, -2.207032994517273e-01, -1.030373809516958e-01, -2.207032994517273e-01, -1.030373809516957e-01, -6.118635158971447e-03, -6.498334283800561e-03, -6.415776272436226e-03, -6.868351687225083e-03, -3.604748580226145e-02, -3.804543896510949e-02, -3.707295739686667e-03, -3.640971846292332e-03, -5.468647790662837e-03, -3.151310541859222e-03, -5.468647790662836e-03, -3.151310541859224e-03, -7.301522605202429e+00, -7.299469915517540e+00, -7.305630485965929e+00, -7.303438249118280e+00, -7.301668761342869e+00, -7.299547244789810e+00, -7.305196450541008e+00, -7.303155117024667e+00, -7.303685206500003e+00, -7.301470420614632e+00, -7.303685206500003e+00, -7.301470420614632e+00, -2.776684075411356e+00, -2.777353943226482e+00, -2.802005742509750e+00, -2.801639993982541e+00, -2.758090236720958e+00, -2.764072266544878e+00, -2.780821691026820e+00, -2.786686493322716e+00, -2.804954787957565e+00, -2.792276820342203e+00, -2.804954787957565e+00, -2.792276820342203e+00, -8.490241511938079e-01, -8.460865276803492e-01, -9.539681113145033e-01, -9.542983341335544e-01, -7.599679568086001e-01, -7.981318186298725e-01, -8.218467211877887e-01, -8.542598777240696e-01, -8.810378709244485e-01, -8.417237270884604e-01, -8.810378709244485e-01, -8.417237270884604e-01, -9.836010805425424e-02, -9.935230750590775e-02, -2.043988461899568e-01, -2.054583242212805e-01, -8.862129680362148e-02, -9.361569329617088e-02, -2.883418361117308e+00, -2.882243255317969e+00, -1.142568113418118e-01, -1.231968421108925e-01, -1.142568113418118e-01, -1.231968421108923e-01, -2.827436911323063e-03, -2.934872583099561e-03, -3.592607459205721e-03, -3.651388117221140e-03, -2.668086874132756e-03, -2.826837394244086e-03, -6.058420177540456e-02, -6.082409252894357e-02, -2.784646711630773e-03, -3.715775639980848e-03, -2.784646711630773e-03, -3.715775639980851e-03, -8.801003905754288e-01, -8.837867617053724e-01, -8.552841767352239e-01, -8.590672515848053e-01, -8.635764818945207e-01, -8.673880063772853e-01, -8.708500418141367e-01, -8.745294433881879e-01, -8.671779544752731e-01, -8.709216744891987e-01, -8.671779544752731e-01, -8.709216744891987e-01, -8.651836406759613e-01, -8.679344393430591e-01, -6.905217262637158e-01, -6.930720237589948e-01, -7.174633383644784e-01, -7.204513463190970e-01, -7.608113024296438e-01, -7.636662659417001e-01, -7.368478158534741e-01, -7.393032358998360e-01, -7.368478158534744e-01, -7.393032358998362e-01, -1.000717809148161e+00, -1.002480728219862e+00, -2.747111602756201e-01, -2.767680807190237e-01, -3.457414704978815e-01, -3.510111626771335e-01, -4.861164447155117e-01, -4.887578951590382e-01, -4.171121299461726e-01, -4.172433757576418e-01, -4.171121299461722e-01, -4.172433757576420e-01, -6.440272022147258e-01, -6.487145536079872e-01, -3.521566444684472e-02, -3.548240994035214e-02, -4.773287640961429e-02, -4.934250718773586e-02, -4.731375828086246e-01, -4.835420783532793e-01, -7.561533310871718e-02, -8.022681320262863e-02, -7.561533310871714e-02, -8.022681320262878e-02, -8.893191543978515e-03, -9.223978450425920e-03, -9.859548183228524e-04, -9.933408383077835e-04, -1.944235324576525e-03, -2.068224255300696e-03, -7.239168401094799e-02, -7.360431230529059e-02, -2.628068168297993e-03, -3.405904233359783e-03, -2.628068168297990e-03, -3.405904233359780e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_22_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_22", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.725796548444424e-08, 0.000000000000000e+00, -4.726251302838692e-08, -4.725773661253828e-08, 0.000000000000000e+00, -4.726234594210055e-08, -4.725698394908370e-08, 0.000000000000000e+00, -4.726127206488232e-08, -4.725961092333842e-08, 0.000000000000000e+00, -4.726461044919719e-08, -4.725784640791896e-08, 0.000000000000000e+00, -4.726325804528956e-08, -4.725784640791896e-08, 0.000000000000000e+00, -4.726325804528956e-08, -3.328947566037045e-05, 0.000000000000000e+00, -3.327617615485996e-05, -3.329994408061879e-05, 0.000000000000000e+00, -3.328249345233776e-05, -3.349714032694587e-05, 0.000000000000000e+00, -3.352930420791320e-05, -3.344290541696187e-05, 0.000000000000000e+00, -3.343504565747453e-05, -3.328813592502349e-05, 0.000000000000000e+00, -3.361096054945092e-05, -3.328813592502349e-05, 0.000000000000000e+00, -3.361096054945092e-05, -8.761234424201398e-03, 0.000000000000000e+00, -8.997043716127424e-03, -8.710994847073562e-03, 0.000000000000000e+00, -8.962747303137239e-03, -7.900873586635037e-03, 0.000000000000000e+00, -7.896591969076810e-03, -8.541385053742171e-03, 0.000000000000000e+00, -8.758709566747748e-03, -8.907853426186257e-03, 0.000000000000000e+00, -7.983480304174831e-03, -8.907853426186257e-03, 0.000000000000000e+00, -7.983480304174831e-03, -1.151949656693848e+00, 0.000000000000000e+00, -1.348294709865992e+00, -1.169101521409567e+00, 0.000000000000000e+00, -1.384183845258809e+00, -1.414024280961976e-03, 0.000000000000000e+00, -1.863611162697466e-03, -5.756768022242036e-01, 0.000000000000000e+00, -7.668808937692636e-01, -9.741596868510265e-01, 0.000000000000000e+00, -3.519265563723751e-01, -9.741596868510261e-01, 0.000000000000000e+00, -3.519265563723751e-01, -1.571963354428247e+02, 0.000000000000000e+00, -1.425614965122813e+02, -1.423772762054370e+02, 0.000000000000000e+00, -1.284278573175028e+02, -2.727477436572646e+00, 0.000000000000000e+00, -2.726529532371390e+00, -2.514157993671066e+02, 0.000000000000000e+00, -2.812522009682875e+02, -1.779965016069399e+02, 0.000000000000000e+00, -3.057333008536755e+02, -1.779965016069391e+02, 0.000000000000000e+00, -3.057333008536749e+02, -1.433894669856675e-05, 0.000000000000000e+00, -1.435343757016344e-05, -1.434164930468850e-05, 0.000000000000000e+00, -1.435605699757136e-05, -1.433949485253641e-05, 0.000000000000000e+00, -1.435381501462320e-05, -1.434179599633579e-05, 0.000000000000000e+00, -1.435617692475561e-05, -1.434004717626493e-05, 0.000000000000000e+00, -1.435471598638261e-05, -1.434004717626493e-05, 0.000000000000000e+00, -1.435471598638261e-05, -3.068498823540425e-04, 0.000000000000000e+00, -3.087524235751577e-04, -3.135520018345237e-04, 0.000000000000000e+00, -3.152177160625137e-04, -3.037716968922738e-04, 0.000000000000000e+00, -3.064942723467526e-04, -3.102197158497136e-04, 0.000000000000000e+00, -3.129286749933963e-04, -3.128187562497965e-04, 0.000000000000000e+00, -3.126699364351772e-04, -3.128187562497965e-04, 0.000000000000000e+00, -3.126699364351772e-04, -6.189318999591239e-02, 0.000000000000000e+00, -6.341338378774748e-02, -5.465046130808526e-02, 0.000000000000000e+00, -5.519910126739059e-02, -6.313008942724192e-02, 0.000000000000000e+00, -6.540988065163586e-02, -6.850563010545097e-02, 0.000000000000000e+00, -6.618103035668330e-02, -5.849275699468998e-02, 0.000000000000000e+00, -6.578463553250662e-02, -5.849275699468998e-02, 0.000000000000000e+00, -6.578463553250662e-02, -6.954049643930971e-01, 0.000000000000000e+00, -6.719803172708899e-01, -5.410083064080820e-01, 0.000000000000000e+00, -5.335469324532888e-01, -7.035456194266447e-01, 0.000000000000000e+00, -7.556424384068056e-01, -5.430796488985442e-04, 0.000000000000000e+00, -5.442569739157150e-04, -8.808342319119723e-01, 0.000000000000000e+00, -1.212942370661572e+00, -8.808342319119725e-01, 0.000000000000000e+00, -1.212942370661573e+00, 5.451543153056030e+01, 0.000000000000000e+00, 1.691030181594788e+01, -1.426715994112222e+02, 0.000000000000000e+00, -1.101042209282419e+02, -1.250675313992845e+03, 0.000000000000000e+00, -1.137724858044693e+03, -1.104250083730001e+00, 0.000000000000000e+00, -1.475820721689038e+00, 3.119754844392061e+02, 0.000000000000000e+00, -7.052564547077735e+02, 3.119754844392032e+02, 0.000000000000000e+00, -7.052564547077741e+02, -9.221274690069493e-02, 0.000000000000000e+00, -9.087557624163610e-02, -9.277310574453869e-02, 0.000000000000000e+00, -9.145252024118243e-02, -9.264229841437090e-02, 0.000000000000000e+00, -9.131323805939597e-02, -9.248201558801150e-02, 0.000000000000000e+00, -9.114799692596215e-02, -9.256757672245013e-02, 0.000000000000000e+00, -9.123596875411860e-02, -9.256757672245013e-02, 0.000000000000000e+00, -9.123596875411860e-02, -1.010722741598682e-01, 0.000000000000000e+00, -9.990153468115950e-02, -1.212897425624024e-01, 0.000000000000000e+00, -1.203142005164009e-01, -1.227772009721204e-01, 0.000000000000000e+00, -1.215391197950783e-01, -1.180365462295899e-01, 0.000000000000000e+00, -1.165918453091754e-01, -1.210322545187404e-01, 0.000000000000000e+00, -1.197511474585642e-01, -1.210322545187404e-01, 0.000000000000000e+00, -1.197511474585642e-01, -4.214595026726304e-02, 0.000000000000000e+00, -4.289757294992771e-02, -4.420045748019918e-01, 0.000000000000000e+00, -4.403792077223302e-01, -3.765053625699994e-01, 0.000000000000000e+00, -3.812675531428760e-01, -2.845257449314043e-01, 0.000000000000000e+00, -2.787095277350704e-01, -3.615084483755139e-01, 0.000000000000000e+00, -3.652867042406951e-01, -3.615084483755142e-01, 0.000000000000000e+00, -3.652867042406955e-01, -1.318847645335274e-01, 0.000000000000000e+00, -1.341839387842344e-01, -3.609351476659212e+00, 0.000000000000000e+00, -3.417780028562506e+00, -1.585266782603970e+00, 0.000000000000000e+00, -1.578336264528952e+00, -4.109557188697269e-01, 0.000000000000000e+00, -4.673335108929590e-01, -1.268849283286842e+00, 0.000000000000000e+00, -1.474023065657995e+00, -1.268849283286842e+00, 0.000000000000000e+00, -1.474023065657996e+00, -1.785464849516016e+01, 0.000000000000000e+00, -1.445567259798499e+01, 4.180990471013425e+03, 0.000000000000000e+00, 6.320401841072051e+03, -1.982350395103133e+03, 0.000000000000000e+00, -1.789271755910318e+03, -1.541807634426251e+00, 0.000000000000000e+00, -1.856218450486505e+00, 2.676962921151847e+02, 0.000000000000000e+00, -8.523546376210016e+02, 2.676962921151858e+02, 0.000000000000000e+00, -8.523546376210027e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_22_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_22", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([3.346749718339866e-03, 3.346956450913534e-03, 3.346725175137283e-03, 3.346938595850419e-03, 3.346691968036146e-03, 3.346878245477745e-03, 3.346969965080935e-03, 3.347232575128049e-03, 3.346733572848249e-03, 3.347124151050117e-03, 3.346733572848249e-03, 3.347124151050117e-03, 1.081411171764572e-02, 1.080336686850083e-02, 1.081801166922971e-02, 1.080516483314972e-02, 1.088513380265801e-02, 1.089487146484987e-02, 1.089519692067587e-02, 1.088743987350875e-02, 1.080795596713937e-02, 1.094835297109737e-02, 1.080795596713937e-02, 1.094835297109737e-02, 1.678831705665079e-02, 1.731398019734145e-02, 1.667917695461756e-02, 1.721582978137467e-02, 1.477857720716358e-02, 1.498457397896340e-02, 1.733030360628975e-02, 1.789761289832952e-02, 1.696432547599486e-02, 1.694328781696321e-02, 1.696432547599486e-02, 1.694328781696321e-02, 6.809544829798796e-02, 9.462344417547229e-02, 7.079642242860271e-02, 1.015475833162325e-01, 1.714087163721323e-03, 2.938863292104493e-03, 1.210559356085143e-02, 1.879663844829562e-02, 6.456890997425986e-02, 2.396364516696324e-03, 6.456890997425999e-02, 2.396364516696309e-03, 2.465590044286295e-04, 2.702957422618679e-04, 2.550351228806161e-04, 2.855043782857978e-04, 8.394983322966031e-04, 1.013438114457616e-03, 7.640918600153478e-05, 8.281042265326803e-05, 1.932154247230161e-04, 5.021287000068456e-05, 1.932154247230167e-04, 5.021287000068531e-05, 1.317345887749452e-02, 1.317792552406116e-02, 1.315173028349121e-02, 1.315691712925796e-02, 1.317253549576606e-02, 1.317740759863896e-02, 1.315388064813074e-02, 1.315831280671050e-02, 1.316212349207849e-02, 1.316734561208829e-02, 1.316212349207849e-02, 1.316734561208829e-02, 2.530679059250553e-02, 2.549920445118935e-02, 2.645902736701087e-02, 2.661198424700012e-02, 2.514162309440486e-02, 2.536988188740675e-02, 2.621041457272079e-02, 2.644881551101440e-02, 2.606915355338040e-02, 2.611700004125586e-02, 2.606915355338040e-02, 2.611700004125586e-02, 9.926971280823674e-02, 1.008538384057153e-01, 8.666632964458185e-02, 8.709891101281238e-02, 7.539493616677219e-02, 8.783520843131649e-02, 7.488632002076680e-02, 8.089795297608848e-02, 1.014633617655160e-01, 9.929576422048980e-02, 1.014633617655160e-01, 9.929576422048982e-02, 4.940168505763996e-03, 4.867849011623473e-03, 3.341241141178441e-02, 3.334418635197724e-02, 3.529086215050482e-03, 4.605363042253708e-03, 2.392264876989949e-02, 2.393891502458815e-02, 1.015525403171956e-02, 1.759457545504251e-02, 1.015525403171960e-02, 1.759457545504252e-02, -5.004093187761649e-06, -1.780433218218595e-06, 3.424427003428668e-05, 2.702066853290128e-05, 1.410995166741388e-04, 1.515159472883893e-04, 1.661698924535231e-03, 2.395782934374053e-03, -2.300082658862455e-05, 2.431066270237030e-04, -2.300082658862488e-05, 2.431066270237058e-04, 9.416143217624631e-02, 9.365782490522261e-02, 1.024427589789006e-01, 1.018263472880022e-01, 9.959336677343127e-02, 9.899573759577493e-02, 9.716192083957928e-02, 9.663320725806945e-02, 9.838200512436887e-02, 9.781954295430828e-02, 9.838200512436887e-02, 9.781954295430828e-02, 9.460500209261551e-02, 9.426113651424106e-02, 1.427314571302123e-01, 1.427141949204675e-01, 1.409755211448488e-01, 1.404260527886791e-01, 1.264377152721550e-01, 1.258648438176692e-01, 1.346456062184313e-01, 1.342703889852830e-01, 1.346456062184314e-01, 1.342703889852831e-01, 7.886737006836674e-02, 7.999503193400943e-02, 5.791710283839516e-02, 5.866795055153120e-02, 8.118649894797442e-02, 8.461455157263764e-02, 1.131526473819719e-01, 1.121399386510894e-01, 1.109997128606436e-01, 1.118538753579035e-01, 1.109997128606434e-01, 1.118538753579035e-01, 1.180767069334028e-01, 1.223348012962823e-01, 1.109782892986318e-03, 1.063333496403081e-03, 1.163367520543367e-03, 1.295208541390978e-03, 1.326256422449534e-01, 1.611945140551488e-01, 4.086527144153413e-03, 5.776930722721429e-03, 4.086527144153414e-03, 5.776930722721492e-03, 6.458706784999152e-05, 5.732731375791655e-05, -1.105561754388722e-05, -1.261615212132812e-05, 9.366110808438336e-05, 1.014752646485237e-04, 4.428323437824319e-03, 5.927008575867956e-03, -1.871512703042907e-05, 2.260023445009117e-04, -1.871512703042392e-05, 2.260023445009120e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
