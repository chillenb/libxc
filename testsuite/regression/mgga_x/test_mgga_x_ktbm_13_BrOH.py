
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_13_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_13", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.161357365176532e+01, -2.161368104882455e+01, -2.161419372381098e+01, -2.161244003721398e+01, -2.161362993623146e+01, -2.161362993623146e+01, -3.048728451519168e+00, -3.048840661392900e+00, -3.052331744715854e+00, -3.051222096229249e+00, -3.048774100733503e+00, -3.890323595281149e+00, -5.348412811099603e-01, -6.760853843530722e-01, -6.451211119358362e-01, -6.558860988502652e-01, -6.768732079112783e-01, -6.768732079112783e-01, -1.811430171437368e-01, -1.847275201977766e-01, -6.316932439560191e-01, -1.175178797680952e-01, -1.821960902174307e-01, -1.821960902174307e-01, -8.597507018695867e-03, -9.005989367732321e-03, -3.682428954206000e-02, -4.122385407799586e-03, -8.912146622622968e-03, -8.912146622622968e-03, -5.971109694934567e+00, -5.971336510267795e+00, -5.971129677926214e+00, -5.430561651622420e+00, -5.971231376340309e+00, -5.971231376340309e+00, -1.661419905674774e+00, -1.682440106646945e+00, -1.652699817773000e+00, -1.669081580549849e+00, -1.687245056653260e+00, -2.170061430009689e+00, -6.668230782109966e-01, -7.275528104270256e-01, -6.251480875284871e-01, -6.625384743455324e-01, -6.955503045383331e-01, -5.804081165523608e-01, -7.829149644884044e-02, -1.715418726744407e-01, -7.722709190746797e-02, -2.213661923384563e+00, -9.927706363079779e-02, -9.927706363079779e-02, -3.863529172702827e-03, -4.544981001371115e-03, -3.406529390707618e-03, -4.918810306468450e-02, -4.023073028945707e-03, -4.141146315853796e-03, -6.728909741513524e-01, -6.747810386302698e-01, -6.477146523065980e-01, -6.736862079759220e-01, -6.739592449185577e-01, -6.739592449185577e-01, -6.533111528720743e-01, -5.762178510304213e-01, -6.068378533962775e-01, -6.290314785846002e-01, -6.185114928321884e-01, -5.350956023256317e-01, -7.638443842069594e-01, -1.830964242187420e-01, -2.810880324079986e-01, -2.991300041746720e-01, -3.316502000870098e-01, -3.316502000870098e-01, -4.013758893539660e-01, -3.406646669158460e-02, -4.630668014602561e-02, -3.718335086367971e-01, -6.367485961735263e-02, -6.814360634059169e-02, -1.007535829708577e-02, -1.244210099144028e-03, -2.363629829934147e-03, -6.500556758511969e-02, -3.519374633084446e-03, -3.519374633084441e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_13_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_13", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.221225916025362e+01, -3.221233955738519e+01, -3.221275559166804e+01, -3.221143807394664e+01, -3.221230107657509e+01, -3.221230107657509e+01, -4.829731691229410e+00, -4.829954983953248e+00, -4.836824269706970e+00, -4.834555122914104e+00, -4.829816653798347e+00, -4.809569881934316e+00, -7.679916650386951e-01, -8.894651702874791e-01, -8.496598027718029e-01, -8.637337870843272e-01, -8.904410282316704e-01, -8.904410282316704e-01, -2.385643281020614e-01, -2.432977631616240e-01, -8.575802417348717e-01, -1.500370719296454e-01, -2.399615754699659e-01, -2.399615754699659e-01, -1.080650982498016e-02, -1.132003879556641e-02, -4.633423950385684e-02, -5.181184775796733e-03, -1.120208519562985e-02, -1.120208519562986e-02, -7.213398487220972e+00, -7.217124787086203e+00, -7.213803286659654e+00, -7.836494266089933e+00, -7.215273958246095e+00, -7.215273958246095e+00, -2.592217457527324e+00, -2.634992961858991e+00, -2.573946546619514e+00, -2.607804807361822e+00, -2.644919974989693e+00, -2.734190212778093e+00, -7.904688886508853e-01, -8.606048046304076e-01, -7.566071704435096e-01, -7.799919718275534e-01, -8.180692722354871e-01, -9.004698010270115e-01, -1.025273674177445e-01, -2.231485299537951e-01, -1.010709234595813e-01, -2.602552677950571e+00, -1.264732191750736e-01, -1.264732191750736e-01, -5.150948172218590e-03, -5.712344694059932e-03, -4.281493203592511e-03, -6.501674373335295e-02, -5.363613853818824e-03, -5.204779886081303e-03, -8.703583661595296e-01, -8.502603712336130e-01, -8.912066075629699e-01, -8.627525053773375e-01, -8.599395742079710e-01, -8.599395742079710e-01, -8.367689763986664e-01, -6.863283244401294e-01, -7.128352139792156e-01, -7.489117343783953e-01, -7.287242777496014e-01, -8.067891085934273e-01, -8.980910950746460e-01, -2.521446653432063e-01, -3.692384095201434e-01, -4.678615555900345e-01, -4.281064720167915e-01, -4.281064720167914e-01, -6.371337844425649e-01, -4.285458282344226e-02, -5.830138635164455e-02, -4.578845402652638e-01, -8.352887572973812e-02, -8.613327024546298e-02, -1.266391552259737e-02, -1.563758648303299e-03, -2.970692214461019e-03, -8.216489224446075e-02, -4.423299836114358e-03, -4.423299836114349e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_13_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_13", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.798107610778531e-08, -1.798104132352585e-08, -1.798074461233776e-08, -1.798133132500423e-08, -1.798105876203844e-08, -1.798105876203844e-08, -1.402316633470829e-05, -1.402599007465770e-05, -1.410896229306689e-05, -1.407232552547108e-05, -1.402368334217969e-05, -1.785359039981753e-05, -4.010176763935619e-03, -5.502661589793290e-03, -4.989333096276801e-03, -5.301887519726414e-03, -5.516375387003562e-03, -5.516375387003562e-03, -7.795743574712239e-01, -7.916436092909533e-01, -1.010205195885473e-03, -4.585116841701410e-01, -7.824323674809800e-01, -7.824323674809800e-01, -7.763346220704935e+01, -7.059328376912801e+01, -2.924122121882053e+00, -1.980131511172513e+02, -7.372642450061468e+01, -7.372642450061463e+01, -6.119453303604340e-06, -6.119951651682800e-06, -6.119532520975345e-06, -5.571038029827216e-06, -6.119678823410814e-06, -6.119678823410814e-06, -1.133333497427425e-04, -1.150092788205587e-04, -1.124384901779862e-04, -1.138710536352673e-04, -1.156088144367193e-04, -1.493883681754106e-04, -3.068506187466954e-02, -2.688627533003151e-02, -3.274915773748251e-02, -3.422566005113280e-02, -2.865461434955112e-02, -2.405020556384162e-02, -1.505625885893429e-01, -3.413269341108611e-01, -1.837630040810170e-01, -2.816656981336469e-04, -7.460835373825925e-01, -7.460835373825925e-01, 7.786839468262795e+01, -1.831675592652213e+02, -6.466477770329359e+02, 3.825537030683576e-02, 7.247451782768199e+01, -2.448431652217783e+02, -3.694562720395062e-02, -3.725615176007672e-02, -3.569210083238667e-02, -3.707929143559858e-02, -3.712366213268099e-02, -3.712366213268099e-02, -4.192151085925980e-02, -5.250275681538365e-02, -5.157356826224684e-02, -4.893337974913695e-02, -5.046806895514527e-02, -4.381789286388433e-02, -2.125414765721189e-02, -1.772771640925698e-01, -2.087758514083354e-01, -1.123964309372347e-01, -1.886859701072278e-01, -1.886859701072278e-01, -5.123524315815067e-02, -3.216593074682821e+00, -1.790623144087160e+00, -2.225047896552811e-01, -2.255600913041098e-01, -1.260251546055826e+00, -3.524427311283522e+01, -2.562693094543972e+03, -9.966150841904945e+02, -1.515212144848892e+00, -4.017578509092561e+02, -4.017578509092567e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_13_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_13", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.990031915077183e-03, 1.990039115067384e-03, 1.990066559044485e-03, 1.989949961638795e-03, 1.990035735306824e-03, 1.990035735306824e-03, 5.757405771730456e-03, 5.759264149529830e-03, 5.815016169752946e-03, 5.792951091075331e-03, 5.757894240755603e-03, 1.622187381577989e-02, 5.129103991798053e-03, 4.014149936291937e-02, 3.360810558648820e-02, 3.657179992661368e-02, 4.031568645270527e-02, 4.031568645270527e-02, 1.169147772264534e-01, 1.235897725377466e-01, 6.665393695478123e-04, 2.293884422409636e-02, 1.187788562057726e-01, 1.187788562057726e-01, 1.311618462558175e-03, 1.371615050785556e-03, 4.075199005436950e-03, 3.669283586775475e-04, 1.388189703814344e-03, 1.388189703814339e-03, 1.112842628554384e-02, 1.111090682493095e-02, 1.112650033852157e-02, 8.639008368543156e-03, 1.111963056292110e-02, 1.111963056292110e-02, 7.239357019072442e-03, 7.722262410036085e-03, 7.026181631757594e-03, 7.408791759482612e-03, 7.850767251727625e-03, 2.590286131540094e-02, 1.106471940462500e-01, 9.828969539219852e-02, 1.108588820282277e-01, 1.126219736423341e-01, 1.073012204922434e-01, 6.014269405275668e-02, -1.114834966356530e-03, 5.029985431033683e-02, -1.232040062763717e-03, 3.370704543490602e-02, 2.250010380621121e-02, 2.250010380621121e-02, -3.645875461698282e-07, 4.550041589528397e-04, 6.764404908977483e-04, -3.482296367251403e-04, -4.198429375235704e-07, 4.600260957940169e-04, 8.036527651832312e-02, 8.658276116376391e-02, 7.674131930116104e-02, 8.266344794538980e-02, 8.353030266245810e-02, 8.353030266245810e-02, 8.520853657266581e-02, 1.265662849794785e-01, 1.224993565078665e-01, 1.109412635339133e-01, 1.176262909516508e-01, 7.688472739840560e-02, 9.632901779789291e-02, 4.700934288374488e-03, 1.062217561959801e-01, 4.223861457530866e-02, 1.341815322854008e-01, 1.341815322854009e-01, 4.804248028822774e-02, 3.520918403015459e-03, 5.052446305940888e-03, 1.731190069549116e-01, -1.073776832264061e-03, 1.198126695692612e-02, 9.575337959757884e-04, 1.304677471737945e-04, 3.479734773543863e-04, 1.250308459488374e-02, 4.632652927582487e-04, 4.632652927582489e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
