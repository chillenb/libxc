
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_13_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_13", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.444130740354860e+01, -2.444136726964834e+01, -2.444178299076856e+01, -2.444080769577827e+01, -2.444133762910913e+01, -2.444133762910913e+01, -3.394618946609240e+00, -3.394747200612151e+00, -3.398881809736667e+00, -3.399759691325702e+00, -3.394656525891194e+00, -3.394656525891194e+00, -5.817171413188624e-01, -5.811000044220372e-01, -5.663170181114306e-01, -5.769645722808365e-01, -5.814999930647853e-01, -5.814999930647853e-01, -1.761552879416453e-01, -1.789145135944826e-01, -6.520454097131704e-01, -1.125508635919108e-01, -1.769109692747803e-01, -1.769109692747803e-01, -8.584349715994347e-03, -8.988630560782758e-03, -3.643311217220341e-02, -4.043719345133903e-03, -8.897207550862053e-03, -8.897207550862055e-03, -5.967375682091789e+00, -5.967643442430600e+00, -5.967447276716410e+00, -5.967653082197240e+00, -5.967454541918523e+00, -5.967454541918523e+00, -2.073713860627266e+00, -2.106261200644694e+00, -2.069974283589932e+00, -2.096013771508792e+00, -2.100370235843134e+00, -2.100370235843134e+00, -6.128429443188341e-01, -6.609633267909509e-01, -5.557111306553585e-01, -5.788231393148826e-01, -6.489586883577577e-01, -6.489586883577577e-01, -8.253416078162445e-02, -1.688484196896646e-01, -8.156907698397067e-02, -1.914243740488233e+00, -9.729550535576507e-02, -9.729550535576507e-02, -3.930866261898491e-03, -4.472563232091389e-03, -3.378811567287578e-03, -5.036116144091533e-02, -4.061399048333263e-03, -4.061399048333262e-03, -6.643887553776607e-01, -6.665956085605411e-01, -6.659069158402622e-01, -6.652935719720932e-01, -6.656056605572541e-01, -6.656056605572541e-01, -6.369147038612321e-01, -5.691549002406515e-01, -5.964958505167413e-01, -6.158140764928453e-01, -6.061045121549423e-01, -6.061045121549424e-01, -6.798193724670369e-01, -2.231062629303955e-01, -2.717477726484658e-01, -3.524471777980895e-01, -3.145384626969326e-01, -3.145384626969325e-01, -4.794976414992219e-01, -3.385033620965280e-02, -4.568645868013223e-02, -3.357666365155758e-01, -6.700607080144969e-02, -6.700607080144969e-02, -9.886825830706552e-03, -1.215766933499911e-03, -2.349257807108479e-03, -6.385165874256006e-02, -3.449476227895759e-03, -3.449476227895753e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_13_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_13", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.940774968254124e+01, -2.940783908556623e+01, -2.940817007028679e+01, -2.940670033960135e+01, -2.940779749001699e+01, -2.940779749001699e+01, -4.863342305390741e+00, -4.863463538938343e+00, -4.867259495686771e+00, -4.866196746410147e+00, -4.863398928356828e+00, -4.863398928356828e+00, -8.174033339520801e-01, -8.159953085954406e-01, -7.824365075852263e-01, -7.999579227152888e-01, -8.169066322047638e-01, -8.169066322047638e-01, -2.348972493965678e-01, -2.391386453082911e-01, -8.876087671500309e-01, -1.468391425247852e-01, -2.361016426339325e-01, -2.361016426339325e-01, -1.081766232047544e-02, -1.133470700402596e-02, -4.653972235406675e-02, -5.254830013477475e-03, -1.121470141200030e-02, -1.121470141200030e-02, -7.218100754812047e+00, -7.221781119194365e+00, -7.218441220008552e+00, -7.221304909075881e+00, -7.220032994355982e+00, -7.220032994355982e+00, -2.706655931032361e+00, -2.729564012844981e+00, -2.697918044216819e+00, -2.716129803643787e+00, -2.733694187891082e+00, -2.733694187891082e+00, -8.253737591910955e-01, -9.295432671541557e-01, -7.811133892001412e-01, -8.411385739752300e-01, -8.565087399892619e-01, -8.565087399892619e-01, -1.063035357295543e-01, -2.209951469022662e-01, -1.050943404669006e-01, -2.831261203737209e+00, -1.254770763109117e-01, -1.254770763109117e-01, -5.039860034945866e-03, -5.778885679081548e-03, -4.306204079580344e-03, -6.529534132853522e-02, -5.279379555176164e-03, -5.279379555176161e-03, -8.816125511120795e-01, -8.610257543052898e-01, -8.681460716475730e-01, -8.738513256739961e-01, -8.709780399123133e-01, -8.709780399123133e-01, -8.581750758348191e-01, -6.909085889811676e-01, -7.227563465403197e-01, -7.643772503133559e-01, -7.420286845986823e-01, -7.420286845986827e-01, -9.754376107502802e-01, -2.951486684792628e-01, -3.636480288516767e-01, -4.836510348973880e-01, -4.227060416477106e-01, -4.227060416477104e-01, -6.336374660371581e-01, -4.298107541377787e-02, -5.854087594488672e-02, -4.643481293837745e-01, -8.601410029923490e-02, -8.601410029923491e-02, -1.283377175659473e-02, -1.591254651887687e-03, -2.983501615273983e-03, -8.204152246924142e-02, -4.489003946882183e-03, -4.489003946882173e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_13_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_13", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.027541183917600e-08, -2.027532491381787e-08, -2.027486988678664e-08, -2.027631255371893e-08, -2.027536632851845e-08, -2.027536632851845e-08, -1.554066353914995e-05, -1.554376102809391e-05, -1.563543815192663e-05, -1.560490662909754e-05, -1.554116387567189e-05, -1.554116387567189e-05, -4.502781090634036e-03, -4.487245465723119e-03, -4.106143911946145e-03, -4.417901100943729e-03, -4.497803369515905e-03, -4.497803369515905e-03, -7.480694113145308e-01, -7.562040463056946e-01, -1.086947541061783e-03, -3.717202855233492e-01, -7.494212761594522e-01, -7.494212761594522e-01, -7.577073383475566e+01, -6.845778234377487e+01, -2.511047813526435e+00, -1.238432466487611e+02, -7.179094591797111e+01, -7.179094591797106e+01, -6.115569636802645e-06, -6.116110278301889e-06, -6.115702475671450e-06, -6.116117232600403e-06, -6.115750500957336e-06, -6.115750500957336e-06, -1.421924329373623e-04, -1.444506257660125e-04, -1.417428100889311e-04, -1.436909101213039e-04, -1.442597920488802e-04, -1.442597920488802e-04, -2.820490556947521e-02, -2.445272320945005e-02, -2.910234489536311e-02, -2.997828189747312e-02, -2.673905234438227e-02, -2.673905234438227e-02, -5.676270597158410e-01, -3.292643683843994e-01, -6.451406446851926e-01, -2.443755443065403e-04, -6.754825906088623e-01, -6.754825906088623e-01, -2.090982200894953e+02, -1.286640304257299e+02, -5.572003689790342e+02, -9.871882996270155e-01, -1.521269368923495e+02, -1.521269368923494e+02, -3.647096985992034e-02, -3.679751408626952e-02, -3.669977712174532e-02, -3.660996326880728e-02, -3.665627586514768e-02, -3.665627586514768e-02, -4.085611137626196e-02, -5.184624995914669e-02, -5.068543753067232e-02, -4.789647334185476e-02, -4.944701544302007e-02, -4.944701544302006e-02, -1.895325087969155e-02, -2.509895500589935e-01, -1.998684256721609e-01, -1.325127104879915e-01, -1.777095732394225e-01, -1.777095732394225e-01, -6.085633026784550e-02, -2.942234922682380e+00, -1.498714900697550e+00, -2.004691944776125e-01, -1.096090918276815e+00, -1.096090918276816e+00, -2.266955744117944e+01, -1.321387166896506e+03, -8.953350334444592e+02, -1.303925518995902e+00, -2.430850457172766e+02, -2.430850457172772e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_13_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_13", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_13_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_13", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.830092847158109e-03, 2.830076616490050e-03, 2.830032825435954e-03, 2.830299553723776e-03, 2.830084028760282e-03, 2.830084028760282e-03, 9.848548413080187e-03, 9.850735426210653e-03, 9.918003062296956e-03, 9.918233442348339e-03, 9.848935143806191e-03, 9.848935143806191e-03, 1.628070108015136e-02, 1.620403083278722e-02, 1.456728277187016e-02, 1.690648189771644e-02, 1.625622923371917e-02, 1.625622923371917e-02, 1.014600537295057e-01, 1.054448831591954e-01, 3.240162167252666e-03, 1.281320524944467e-02, 1.023748311195253e-01, 1.023748311195253e-01, 1.254648968288590e-03, 1.296697035261701e-03, 3.050689663323732e-03, 1.592641391733538e-04, 1.322266013626954e-03, 1.322266013626943e-03, 1.111058811251485e-02, 1.109330788678613e-02, 1.110891344296284e-02, 1.109547243674419e-02, 1.110161032916674e-02, 1.110161032916674e-02, 2.252462266433094e-02, 2.341199435819959e-02, 2.252009222063257e-02, 2.325386681085401e-02, 2.311346567236358e-02, 2.311346567236358e-02, 8.519376471854688e-02, 7.508494333579911e-02, 7.446891473897109e-02, 7.397053623297972e-02, 8.741068659267258e-02, 8.741068659267258e-02, 8.391877332498975e-03, 4.498118488230981e-02, 9.241684234515435e-03, 2.148488588703422e-02, 1.747151340853165e-02, 1.747151340853165e-02, 2.894850056147813e-04, 2.416757815619648e-04, 5.165029291075152e-04, 2.767232862138030e-03, 1.973864667418098e-04, 1.973864667418037e-04, 7.806589642030388e-02, 8.409017398639852e-02, 8.195977100306787e-02, 8.028830580063429e-02, 8.112658825540481e-02, 8.112658825540481e-02, 8.030813638237917e-02, 1.219766221991340e-01, 1.166975709802713e-01, 1.048440532737311e-01, 1.112565898950923e-01, 1.112565898950924e-01, 6.847236510570642e-02, 7.256427569298915e-02, 9.128952006220750e-02, 1.028630527858785e-01, 1.089848240784303e-01, 1.089848240784301e-01, 1.042964364611454e-01, 2.975966719755597e-03, 3.572666579467198e-03, 1.212362038732826e-01, 8.822609563979388e-03, 8.822609563979358e-03, 4.350025060186791e-04, 4.080318912401208e-05, 2.864681940270383e-04, 8.992052125645801e-03, 1.899213986802262e-04, 1.899213986802249e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
