
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_12_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_12", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.398308741181088e+01, -2.398315564388911e+01, -2.398357593169595e+01, -2.398256381317881e+01, -2.398307744879222e+01, -2.398307744879222e+01, -3.414292947363668e+00, -3.414394748039081e+00, -3.417366470221304e+00, -3.418645402725672e+00, -3.417250700296517e+00, -3.417250700296517e+00, -6.120989966638608e-01, -6.115504918904220e-01, -5.993409197352659e-01, -6.089748977746379e-01, -6.075437207486412e-01, -6.075437207486412e-01, -1.750548505953304e-01, -1.779113199479209e-01, -6.850903220284343e-01, -1.248903129202980e-01, -1.646128684367183e-01, -1.646128684367182e-01, -5.692214899225879e-03, -5.991592143484955e-03, -3.288034117372474e-02, -3.259873169504852e-03, -4.567431822422967e-03, -4.567431822422967e-03, -5.863122536832856e+00, -5.863647788260200e+00, -5.863211247376191e+00, -5.863672293439846e+00, -5.863356105741276e+00, -5.863356105741276e+00, -2.093658329596892e+00, -2.122658214970830e+00, -2.086683869010214e+00, -2.113073814100306e+00, -2.113041050752166e+00, -2.113041050752166e+00, -6.195068935706685e-01, -6.664773178698482e-01, -5.465407021551055e-01, -5.560684736025158e-01, -6.332997969784863e-01, -6.332997969784863e-01, -8.596500949382838e-02, -1.701466163142933e-01, -7.949831039076263e-02, -1.902453383114072e+00, -1.024517808185663e-01, -1.024517808185663e-01, -2.484176335740849e-03, -3.164906215785870e-03, -2.438199162101217e-03, -5.322646007150031e-02, -3.067249791614490e-03, -3.067249791614491e-03, -6.484496630303753e-01, -6.487073504542358e-01, -6.486892535754872e-01, -6.486084203546285e-01, -6.486520908085871e-01, -6.486520908085871e-01, -6.246182484574315e-01, -5.492235936728118e-01, -5.759207481489346e-01, -5.978509027774849e-01, -5.866690927756085e-01, -5.866690927756086e-01, -6.876183359409562e-01, -2.208242150478890e-01, -2.685837941798235e-01, -3.536709702393009e-01, -3.120073080189140e-01, -3.120073080189140e-01, -4.814580461704817e-01, -3.153448771899155e-02, -4.284026054709242e-02, -3.468351363188303e-01, -6.827377024659223e-02, -6.827377024659223e-02, -7.911553284425044e-03, -8.338178734202508e-04, -1.796735825895186e-03, -6.424649203355523e-02, -2.816768338498469e-03, -2.816768338498466e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_12_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_12", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.914268363748917e+01, -2.914222611054509e+01, -2.914281978810304e+01, -2.914232504856310e+01, -2.914315728544050e+01, -2.914283617182923e+01, -2.914161810363511e+01, -2.914087463245603e+01, -2.914276816911071e+01, -2.914158683424016e+01, -2.914276816911071e+01, -2.914158683424016e+01, -4.683952955340565e+00, -4.683792017072937e+00, -4.684126143234820e+00, -4.683904137539503e+00, -4.687498774339375e+00, -4.688160063216877e+00, -4.686507195626705e+00, -4.686612677390809e+00, -4.682812858309136e+00, -4.689716207511045e+00, -4.682812858309136e+00, -4.689716207511045e+00, -8.094048598474425e-01, -8.145315114140975e-01, -8.077288891518332e-01, -8.136418086940216e-01, -7.851379586886811e-01, -7.807850653870670e-01, -7.960384964612369e-01, -7.992664650939981e-01, -8.202817932268800e-01, -7.714334597041669e-01, -8.202817932268800e-01, -7.714334597041669e-01, -2.131670165737391e-01, -2.253282316075731e-01, -2.158646379755637e-01, -2.298527491318165e-01, -8.638742624253632e-01, -8.977521706128978e-01, -1.567547884013317e-01, -1.602698043620102e-01, -2.222021487196295e-01, -1.137777974806461e-01, -2.222021487196293e-01, -1.137777974806460e-01, -6.957134366937560e-03, -7.390627846323853e-03, -7.292749585230274e-03, -7.809521436378658e-03, -4.071898552154783e-02, -4.298018372268026e-02, -4.199989269492730e-03, -4.127270553950023e-03, -6.212744345974907e-03, -3.559095303512206e-03, -6.212744345974908e-03, -3.559095303512210e-03, -7.190493395104959e+00, -7.188545733406118e+00, -7.194651167875060e+00, -7.192562531952696e+00, -7.190674640100348e+00, -7.188647977608515e+00, -7.194243967687608e+00, -7.192298721898465e+00, -7.192659199682518e+00, -7.190568214237543e+00, -7.192659199682518e+00, -7.190568214237543e+00, -2.593237956859691e+00, -2.593490275882174e+00, -2.615389901739413e+00, -2.614819538145619e+00, -2.574832185761819e+00, -2.580290695087157e+00, -2.594089489955387e+00, -2.599643906438346e+00, -2.620015662383894e+00, -2.606767643689327e+00, -2.620015662383894e+00, -2.606767643689327e+00, -8.114136992396287e-01, -8.091733304035524e-01, -9.240287468292320e-01, -9.248729288569958e-01, -7.203081339983523e-01, -7.577259037421268e-01, -7.877901437741528e-01, -8.201171542905826e-01, -8.476509629646938e-01, -8.055433005380684e-01, -8.476509629646939e-01, -8.055433005380682e-01, -1.090123434391971e-01, -1.100391688070424e-01, -2.134592973388112e-01, -2.144827030049185e-01, -9.854497667901446e-02, -1.038892404417577e-01, -2.773018889797256e+00, -2.771921051705726e+00, -1.251757777812732e-01, -1.333056833660427e-01, -1.251757777812732e-01, -1.333056833660426e-01, -3.177797622625041e-03, -3.300519681271462e-03, -4.056306375773792e-03, -4.120280960500749e-03, -3.022263998482992e-03, -3.201412601089493e-03, -6.788764770353606e-02, -6.824039811699754e-02, -3.121072261349769e-03, -4.223002656280863e-03, -3.121072261349766e-03, -4.223002656280864e-03, -8.585683619658663e-01, -8.621096012484473e-01, -8.378352169509232e-01, -8.414932152457545e-01, -8.448953043775463e-01, -8.485617625333857e-01, -8.509710586204143e-01, -8.545162876648844e-01, -8.479156810169388e-01, -8.515195404395874e-01, -8.479156810169388e-01, -8.515195404395876e-01, -8.422511808902282e-01, -8.449538372871997e-01, -6.533929062591943e-01, -6.563008109849473e-01, -6.925914853089797e-01, -6.960626365367015e-01, -7.443046781808533e-01, -7.471919076454635e-01, -7.169749098364097e-01, -7.196878261466717e-01, -7.169749098364094e-01, -7.196878261466723e-01, -9.660587539660036e-01, -9.687848827411067e-01, -2.760658770640531e-01, -2.778050259382315e-01, -3.356237730921476e-01, -3.396745946975198e-01, -4.574880925844744e-01, -4.600603742301930e-01, -3.940774241566934e-01, -3.940702431939329e-01, -3.940774241566934e-01, -3.940702431939329e-01, -6.048332925533477e-01, -6.097114179678489e-01, -3.986977907329966e-02, -4.015696625504897e-02, -5.378307212556966e-02, -5.557933935343973e-02, -4.462430166175788e-01, -4.566368325983454e-01, -8.429546062186714e-02, -8.907677414776249e-02, -8.429546062186717e-02, -8.907677414776249e-02, -1.003576433875862e-02, -1.040439884261382e-02, -1.102102574682445e-03, -1.107149927762226e-03, -2.207125167039845e-03, -2.347679047407444e-03, -8.075888948267952e-02, -8.210802866695315e-02, -2.951056294438449e-03, -3.870786384258696e-03, -2.951056294438445e-03, -3.870786384258691e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_12_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_12", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.666205314751770e-08, 0.000000000000000e+00, -3.666491231986823e-08, -3.666183698808201e-08, 0.000000000000000e+00, -3.666475476531231e-08, -3.666108609368319e-08, 0.000000000000000e+00, -3.666369471328833e-08, -3.666355464699188e-08, 0.000000000000000e+00, -3.666683461506624e-08, -3.666193738820081e-08, 0.000000000000000e+00, -3.666553401146467e-08, -3.666193738820081e-08, 0.000000000000000e+00, -3.666553401146467e-08, -2.930034615411978e-05, 0.000000000000000e+00, -2.929156555043139e-05, -2.930797749358767e-05, 0.000000000000000e+00, -2.929625580520853e-05, -2.945251402104887e-05, 0.000000000000000e+00, -2.947606721746116e-05, -2.940780993561188e-05, 0.000000000000000e+00, -2.940249858516389e-05, -2.930252268449116e-05, 0.000000000000000e+00, -2.953089660009059e-05, -2.930252268449116e-05, 0.000000000000000e+00, -2.953089660009059e-05, -9.010596513066370e-03, 0.000000000000000e+00, -9.201707443854271e-03, -8.972349075222621e-03, 0.000000000000000e+00, -9.174804102761825e-03, -8.330664386192453e-03, 0.000000000000000e+00, -8.343883663936489e-03, -8.859826251946507e-03, 0.000000000000000e+00, -9.043030141238320e-03, -9.096664432513590e-03, 0.000000000000000e+00, -8.439931106032540e-03, -9.096664432513590e-03, 0.000000000000000e+00, -8.439931106032540e-03, -1.217319223620533e+00, 0.000000000000000e+00, -1.363429366542667e+00, -1.228466961806067e+00, 0.000000000000000e+00, -1.385563853843538e+00, -1.837069966497059e-03, 0.000000000000000e+00, -2.236975453506814e-03, -8.058194817927290e-01, 0.000000000000000e+00, -9.875506761438134e-01, -1.031050842481115e+00, 0.000000000000000e+00, -7.963864990510370e-01, -1.031050842481114e+00, 0.000000000000000e+00, -7.963864990510368e-01, -3.307487611785747e+02, 0.000000000000000e+00, -2.959185527317226e+02, -3.041142744931838e+02, 0.000000000000000e+00, -2.695158019935278e+02, -6.526668597143332e+00, 0.000000000000000e+00, -6.180203725311339e+00, -6.885975952362103e+02, 0.000000000000000e+00, -7.312695482835704e+02, -3.936825890332226e+02, 0.000000000000000e+00, -1.267933130185327e+03, -3.936825890332220e+02, 0.000000000000000e+00, -1.267933130185326e+03, -1.102097767635093e-05, 0.000000000000000e+00, -1.103195602231383e-05, -1.102211000449843e-05, 0.000000000000000e+00, -1.103305511483845e-05, -1.102127176571166e-05, 0.000000000000000e+00, -1.103216081671305e-05, -1.102223258094229e-05, 0.000000000000000e+00, -1.103314854328713e-05, -1.102139394173617e-05, 0.000000000000000e+00, -1.103248719105479e-05, -1.102139394173617e-05, 0.000000000000000e+00, -1.103248719105479e-05, -2.671608874742135e-04, 0.000000000000000e+00, -2.685267869159635e-04, -2.707606132703886e-04, 0.000000000000000e+00, -2.719836649988595e-04, -2.654197784220877e-04, 0.000000000000000e+00, -2.672547683477314e-04, -2.690340955521725e-04, 0.000000000000000e+00, -2.708181413273153e-04, -2.703755377435093e-04, 0.000000000000000e+00, -2.706731181638469e-04, -2.703755377435093e-04, 0.000000000000000e+00, -2.706731181638469e-04, -5.065181740153578e-02, 0.000000000000000e+00, -5.176373131778830e-02, -4.358446911732965e-02, 0.000000000000000e+00, -4.392919360761520e-02, -5.510589910736210e-02, 0.000000000000000e+00, -5.537677844568491e-02, -5.795935850949085e-02, 0.000000000000000e+00, -5.501644914204486e-02, -4.705962784760760e-02, 0.000000000000000e+00, -5.377757411284536e-02, -4.705962784760762e-02, 0.000000000000000e+00, -5.377757411284536e-02, -1.173256196021332e+00, 0.000000000000000e+00, -1.143402689670155e+00, -6.195035453482340e-01, 0.000000000000000e+00, -6.109337123561934e-01, -1.307029425745020e+00, 0.000000000000000e+00, -1.302526643075278e+00, -4.497224790124616e-04, 0.000000000000000e+00, -4.506698499418029e-04, -1.277883552508591e+00, 0.000000000000000e+00, -1.603390496494470e+00, -1.277883552508592e+00, 0.000000000000000e+00, -1.603390496494471e+00, -7.043508070372635e+02, 0.000000000000000e+00, -6.501178860175432e+02, -6.295075230922627e+02, 0.000000000000000e+00, -5.580406656148142e+02, -3.462633417242986e+03, 0.000000000000000e+00, -3.211155525807323e+03, -2.572905073060602e+00, 0.000000000000000e+00, -2.953227221678596e+00, -7.935904750371187e+02, 0.000000000000000e+00, -1.528008898000826e+03, -7.935904750371204e+02, 0.000000000000000e+00, -1.528008898000826e+03, -7.095780716918884e-02, 0.000000000000000e+00, -6.992170486343785e-02, -7.138427496702666e-02, 0.000000000000000e+00, -7.035828648215085e-02, -7.127524584958528e-02, 0.000000000000000e+00, -7.024392344500471e-02, -7.115316157083465e-02, 0.000000000000000e+00, -7.011909943437332e-02, -7.121761150099949e-02, 0.000000000000000e+00, -7.018486439820935e-02, -7.121761150099949e-02, 0.000000000000000e+00, -7.018486439820935e-02, -7.810539282362139e-02, 0.000000000000000e+00, -7.717855570961395e-02, -9.851627177203438e-02, 0.000000000000000e+00, -9.759185322119357e-02, -9.708548775989986e-02, 0.000000000000000e+00, -9.600216408186894e-02, -9.179260918488874e-02, 0.000000000000000e+00, -9.064876659608068e-02, -9.484038350236593e-02, 0.000000000000000e+00, -9.377173524938302e-02, -9.484038350236590e-02, 0.000000000000000e+00, -9.377173524938302e-02, -3.406480860492519e-02, 0.000000000000000e+00, -3.452153928174945e-02, -4.616565442071077e-01, 0.000000000000000e+00, -4.589951139073094e-01, -3.699554326629634e-01, 0.000000000000000e+00, -3.722393274493103e-01, -2.540126080167817e-01, 0.000000000000000e+00, -2.488488909268187e-01, -3.336686122044890e-01, 0.000000000000000e+00, -3.367808963726635e-01, -3.336686122044892e-01, 0.000000000000000e+00, -3.367808963726639e-01, -1.122475117738960e-01, 0.000000000000000e+00, -1.133554286566653e-01, -7.498292582091747e+00, 0.000000000000000e+00, -7.239902615990504e+00, -3.665080274945639e+00, 0.000000000000000e+00, -3.556603473691903e+00, -3.573235825196948e-01, 0.000000000000000e+00, -3.931130071728254e-01, -2.279671974126437e+00, 0.000000000000000e+00, -2.472316018569592e+00, -2.279671974126437e+00, 0.000000000000000e+00, -2.472316018569594e+00, -8.468646894207536e+01, 0.000000000000000e+00, -7.670266923596481e+01, -4.446485543157495e+03, 0.000000000000000e+00, -2.760078829834413e+03, -4.631205811727791e+03, 0.000000000000000e+00, -4.202770375796819e+03, -2.712144455212397e+00, 0.000000000000000e+00, -3.002084156132412e+00, -1.646407098376445e+03, 0.000000000000000e+00, -1.849849666651093e+03, -1.646407098376448e+03, 0.000000000000000e+00, -1.849849666651097e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_12_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_12", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_12_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_12", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.582980333233111e-03, 2.583167268083012e-03, 2.582972002692888e-03, 2.583161188842422e-03, 2.582969923789394e-03, 2.583151272274576e-03, 2.583065168788168e-03, 2.583272485563496e-03, 2.582974828240712e-03, 2.583241990552180e-03, 2.582974828240712e-03, 2.583241990552180e-03, 7.873656746687736e-03, 7.865716177753427e-03, 7.876643756674745e-03, 7.867121739445600e-03, 7.928413530106886e-03, 7.936031114265522e-03, 7.934638309641574e-03, 7.929004183565696e-03, 7.868846153624718e-03, 7.975971918175820e-03, 7.868846153624718e-03, 7.975971918175820e-03, 1.162634372999889e-02, 1.194836162024280e-02, 1.156928210989482e-02, 1.188284426543382e-02, 1.047347248924478e-02, 1.075764971496243e-02, 1.247066418501379e-02, 1.285508945243596e-02, 1.158194073740165e-02, 1.289116088240277e-02, 1.158194073740165e-02, 1.289116088240277e-02, 5.740132093737669e-02, 7.749464284717451e-02, 5.913429743736723e-02, 8.221245178150223e-02, 6.024402632875779e-04, 1.291321642403612e-03, 1.272912941602474e-02, 1.889829957491846e-02, 5.428578215071364e-02, 3.763943292374887e-03, 5.428578215071361e-02, 3.763943292374901e-03, 5.172529013689608e-04, 5.592481161966244e-04, 5.429155049427539e-04, 5.969005696546722e-04, 1.852099313251619e-03, 2.111535973636987e-03, 2.089810452443824e-04, 2.150391916040576e-04, 4.262794142323087e-04, 2.076972242340574e-04, 4.262794142323063e-04, 2.076972242340601e-04, 1.058558422177717e-02, 1.058896613881384e-02, 1.057808071006416e-02, 1.058171095925197e-02, 1.058542934776885e-02, 1.058890547940762e-02, 1.057898046952898e-02, 1.058230456275710e-02, 1.058154951719835e-02, 1.058529465336279e-02, 1.058154951719835e-02, 1.058529465336279e-02, 1.838677907036317e-02, 1.852062947927648e-02, 1.917187857704285e-02, 1.927815678893507e-02, 1.830483500565267e-02, 1.845320935609973e-02, 1.903048936658198e-02, 1.918629680966744e-02, 1.888977680565641e-02, 1.893906850823245e-02, 1.888977680565641e-02, 1.893906850823245e-02, 7.405361804009926e-02, 7.529793367615507e-02, 7.078281963650501e-02, 7.139983806127853e-02, 5.500086201446395e-02, 6.471769699796073e-02, 5.742513579508501e-02, 6.283316205068842e-02, 7.678501713775526e-02, 7.451022666056260e-02, 7.678501713775526e-02, 7.451022666056256e-02, 6.652546541725478e-03, 6.563020935202470e-03, 3.064924599293240e-02, 3.055124529613805e-02, 5.207058171072391e-03, 6.348394591924843e-03, 1.887486654114085e-02, 1.888962662086018e-02, 1.173383460830438e-02, 1.854278121683534e-02, 1.173383460830438e-02, 1.854278121683539e-02, 6.493578882564245e-05, 6.937150015554155e-05, 1.507335213846099e-04, 1.365746969657045e-04, 3.898941742136636e-04, 4.266444881641074e-04, 3.176768375261727e-03, 4.064738020741354e-03, 5.856241271991645e-05, 5.256773117291643e-04, 5.856241271991802e-05, 5.256773117291670e-04, 8.514593246948926e-02, 8.478772480138952e-02, 8.842685620216967e-02, 8.803294620428345e-02, 8.731802001410643e-02, 8.692834615978859e-02, 8.635568152685037e-02, 8.598971789449983e-02, 8.684002185469200e-02, 8.646254440055634e-02, 8.684002185469200e-02, 8.646254440055634e-02, 8.586308136459921e-02, 8.562947445370339e-02, 1.026008984574605e-01, 1.026325730430408e-01, 1.041822216355025e-01, 1.039540214486280e-01, 9.940122558959928e-02, 9.905158987362357e-02, 1.021931779986873e-01, 1.020135960639270e-01, 1.021931779986873e-01, 1.020135960639271e-01, 6.325996941792458e-02, 6.455090441258748e-02, 4.876851551173841e-02, 4.928441859534237e-02, 6.391466881968047e-02, 6.625429080348134e-02, 8.231520050328349e-02, 8.156348886583695e-02, 8.271565404615384e-02, 8.328776263177502e-02, 8.271565404615405e-02, 8.328776263177515e-02, 8.544385803577041e-02, 8.848404051935760e-02, 2.163949297448868e-03, 2.108958541839457e-03, 2.381862541760486e-03, 2.573359900250585e-03, 9.636740642648495e-02, 1.173173385572093e-01, 6.000047690048108e-03, 7.840943517185384e-03, 6.000047690048081e-03, 7.840943517185379e-03, 3.023158059375220e-04, 2.993370689077776e-04, 1.175740017368008e-05, 5.508126780807399e-06, 2.186975009188648e-04, 2.382047076249078e-04, 6.430886581245550e-03, 8.063777016535639e-03, 1.155387648251479e-04, 4.896594214915959e-04, 1.155387648251488e-04, 4.896594214915926e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
