
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_12_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_12", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.140672612114807e+01, -2.140684500465159e+01, -2.140736814505750e+01, -2.278740845342396e+01, -2.278814093707253e+01, -2.416990673581315e+01, -3.482316229325589e+00, -3.878531638544036e+00, -3.880114477020300e+00, -3.879827734733500e+00, -3.879454152413826e+00, -3.483537593746749e+00, -5.664416219731419e-01, -6.383178546991031e-01, -6.816459685913586e-01, -6.223884176953126e-01, -5.556796511107800e-01, -6.911938877120170e-01, -1.639258707914340e-01, -1.669808043709419e-01, -7.221739527252879e-01, -1.281931429417517e-01, -1.683609125387832e-01, -1.676132843739807e-01, -5.695516161763533e-03, -5.920834551846092e-03, -3.262154592185233e-02, -3.283562120271152e-03, -4.583554210125978e-03, -4.583554210125978e-03, -5.866437365451777e+00, -5.866924217552738e+00, -5.866457146389744e+00, -5.866887260770617e+00, -5.620487862813163e+00, -5.620707772640311e+00, -2.157244722357569e+00, -2.178495222672694e+00, -2.141309881898346e+00, -2.160304746019279e+00, -1.949285332660613e+00, -2.176724611782235e+00, -6.088564564887283e-01, -7.208174506834095e-01, -6.094007004458398e-01, -6.391541996733034e-01, -6.260337624156185e-01, -6.762966548966023e-01, -8.728831488356970e-02, -1.610010979721867e-01, -8.071702362452546e-02, -2.175709380670958e+00, -1.038353738045890e-01, -1.038353738045890e-01, -2.500353926097987e-03, -3.209873192782728e-03, -2.458204801890545e-03, -5.266240336160633e-02, -3.087944290112521e-03, -3.087944290112522e-03, -6.556325201408919e-01, -6.555962895181070e-01, -6.295081338958183e-01, -6.447683732006078e-01, -6.317084743370251e-01, -6.436584818641895e-01, -6.383982705076454e-01, -5.029955868782464e-01, -5.397763036955858e-01, -6.089439873650845e-01, -5.970197661427471e-01, -5.577781346850736e-01, -7.100735592540283e-01, -2.230430819524680e-01, -2.494858166971536e-01, -3.425822813912676e-01, -3.259721686114973e-01, -2.915812004893573e-01, -5.066793233276560e-01, -3.056734481220192e-02, -4.325044060233513e-02, -3.750176390047051e-01, -6.910680005612613e-02, -6.910680005612613e-02, -7.789004712242907e-03, -8.579069022319566e-04, -1.750825907259200e-03, -6.118452836016457e-02, -2.835729388159040e-03, -2.772029331569188e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_12_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_12", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.172437859419447e+01, -3.172445977356001e+01, -3.172449900543186e+01, -3.172454721191147e+01, -3.172489771897495e+01, -3.172511466986594e+01, -3.172353866058564e+01, -2.892978025258098e+01, -3.172445019108001e+01, -2.893060552448533e+01, -2.893086502310989e+01, -2.893060552448533e+01, -4.605123077611750e+00, -4.680945288204101e+00, -4.605129030938508e+00, -4.605067115330236e+00, -4.605223821568264e+00, -4.605289127895505e+00, -4.605577641596015e+00, -4.605642056198050e+00, -4.604371833796177e+00, -4.605813919380380e+00, -4.679818632236017e+00, -4.605813919380381e+00, -7.666356852616472e-01, -7.735073581277497e-01, -7.643718432692448e-01, -8.795814074358678e-01, -8.505062007016402e-01, -8.435833033462893e-01, -8.558216662064997e-01, -7.465530798979941e-01, -7.820152723223339e-01, -7.032824316858690e-01, -8.878020092490498e-01, -8.192553266273093e-01, -1.849778728265623e-01, -2.263429321044811e-01, -1.875172372990171e-01, -2.312078935955327e-01, -9.700239975572618e-01, -8.684906802004285e-01, -1.591779895000159e-01, -1.620370079507366e-01, -2.253069773348153e-01, -1.142943720662264e-01, -2.253069773348149e-01, -1.111827184018108e-01, -6.953513661594878e-03, -7.388976040029435e-03, -7.464282125452114e-03, -7.805734027932731e-03, -4.122898277457372e-02, -4.284075757345028e-02, -4.179815016595392e-03, -4.110165337645228e-03, -6.203133341659929e-03, -3.529899193183982e-03, -6.203133341659929e-03, -3.529899193183986e-03, -7.186245277088519e+00, -7.184541736466772e+00, -7.190446391858703e+00, -7.188600616723114e+00, -7.186526021552304e+00, -7.184715396171772e+00, -7.190128898315157e+00, -7.188400806070980e+00, -7.752342157062192e+00, -7.186573090897928e+00, -7.188359743807805e+00, -7.750451829991685e+00, -2.593553344984673e+00, -2.593430870784493e+00, -2.612626487268160e+00, -2.611904464399018e+00, -2.577321495241832e+00, -2.581887061297138e+00, -2.594037983862684e+00, -2.598732119218889e+00, -2.616171648329426e+00, -2.548105639024490e+00, -2.616171648329426e+00, -2.604789591732034e+00, -7.789495951036041e-01, -8.473089316405654e-01, -8.648920603055541e-01, -8.670402111480616e-01, -7.055709190877241e-01, -7.310260569634037e-01, -7.352629828257943e-01, -7.617875965023815e-01, -8.137734300192976e-01, -8.408749529581460e-01, -8.137734300192976e-01, -7.703091784722975e-01, -1.091634677053886e-01, -1.102253385454513e-01, -1.892389887553903e-01, -2.160709283758634e-01, -9.856210566824578e-02, -1.039888540003700e-01, -2.556741028305683e+00, -2.555653328523926e+00, -1.256805154829728e-01, -1.340466446951235e-01, -1.256805154829728e-01, -1.340466446951235e-01, -3.213205372520469e-03, -3.258679908401603e-03, -4.021712674875771e-03, -4.082579715123125e-03, -3.007348601840530e-03, -3.184899306871113e-03, -6.765606761049220e-02, -6.805047778755713e-02, -3.071516233779895e-03, -4.218264360310722e-03, -3.071516233779893e-03, -4.218264360310722e-03, -8.489858541263998e-01, -8.527445890955534e-01, -8.287736365457203e-01, -8.326203098270439e-01, -8.692418984046805e-01, -8.725156720464746e-01, -8.698015902983824e-01, -8.453046845567034e-01, -8.695316626400303e-01, -8.727988490790733e-01, -8.695316626400302e-01, -8.423772569380445e-01, -8.240082809703432e-01, -8.272618834457053e-01, -6.500965514346392e-01, -6.964559336462286e-01, -6.849150425715234e-01, -7.567974087118947e-01, -7.315178827950667e-01, -7.344076233393479e-01, -7.060775331146688e-01, -7.090621956098380e-01, -7.060775331146687e-01, -7.807750354773045e-01, -8.973528107938877e-01, -9.912874192330656e-01, -2.777533808990085e-01, -2.795649899078311e-01, -2.937053470285509e-01, -3.441725343617369e-01, -4.444502911244853e-01, -4.619457496360373e-01, -3.991422962304455e-01, -3.990739413483257e-01, -3.991422962304454e-01, -3.636385006473643e-01, -5.981507373518453e-01, -6.021169585006796e-01, -4.046116816093828e-02, -4.073702055767877e-02, -5.358331638435338e-02, -5.538745933811143e-02, -4.404893983262228e-01, -4.467302884118984e-01, -8.425872892562623e-02, -8.914320238159244e-02, -8.425872892562623e-02, -8.914320238159239e-02, -1.018844414775186e-02, -1.055752774994997e-02, -1.081975010708078e-03, -1.084447941263707e-03, -2.256048515612792e-03, -2.399472366591872e-03, -7.951543350112951e-02, -8.058494160889398e-02, -2.909389631274315e-03, -3.866333452254184e-03, -2.909389631274309e-03, -3.961449682957890e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_12_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_12", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.300966140326508e-08, 0.000000000000000e+00, -3.301202273390375e-08, -3.300955646300202e-08, 0.000000000000000e+00, -3.301194601481516e-08, -3.300901589324510e-08, 0.000000000000000e+00, -3.301122822960126e-08, -3.301022738243736e-08, 0.000000000000000e+00, -3.693887217668456e-08, -3.300961746680294e-08, 0.000000000000000e+00, -3.693739247663383e-08, -3.693497593627213e-08, 0.000000000000000e+00, -3.693739247663383e-08, -3.304950929427680e-05, 0.000000000000000e+00, -2.677408335751173e-05, -3.305716021310065e-05, 0.000000000000000e+00, -3.304982923845474e-05, -3.320644104608204e-05, 0.000000000000000e+00, -3.323175426027599e-05, -3.314099446476803e-05, 0.000000000000000e+00, -3.313934528177956e-05, -3.305364126231321e-05, 0.000000000000000e+00, -3.327131455702948e-05, -2.678032869836149e-05, 0.000000000000000e+00, -3.327131455702948e-05, -8.177073267545260e-03, 0.000000000000000e+00, -8.382368571357834e-03, -8.131064843601099e-03, 0.000000000000000e+00, -1.098702988101812e-02, -9.940461471242697e-03, 0.000000000000000e+00, -9.904853627964885e-03, -1.042847144397277e-02, 0.000000000000000e+00, -8.003075299437674e-03, -8.342525726950187e-03, 0.000000000000000e+00, -7.101515237226280e-03, -1.094291563181383e-02, 0.000000000000000e+00, -9.689826806581722e-03, -8.696345823597534e-01, 0.000000000000000e+00, -1.379520541111461e+00, -8.913864758987660e-01, 0.000000000000000e+00, -1.406550448793153e+00, -2.528591226762147e-03, 0.000000000000000e+00, -2.094256162445806e-03, -9.308103149045225e-01, 0.000000000000000e+00, -1.072386356066741e+00, -1.071878782599400e+00, 0.000000000000000e+00, -1.087571034294496e+00, -1.071878782599399e+00, 0.000000000000000e+00, -2.399044543344383e-01, -3.352454894203352e+02, 0.000000000000000e+00, -2.976279940542639e+02, 6.217183642838090e+01, 0.000000000000000e+00, -2.729304007410508e+02, 8.609143402971504e-01, 0.000000000000000e+00, -6.881956969652292e+00, -7.917307193456526e+02, 0.000000000000000e+00, -8.229457243678238e+02, -4.102251945044337e+02, 0.000000000000000e+00, -1.654616623453845e+03, -4.102251945044337e+02, 0.000000000000000e+00, -1.654616623453846e+03, -1.102715035959915e-05, 0.000000000000000e+00, -1.103778081503365e-05, -1.102821293237162e-05, 0.000000000000000e+00, -1.103881251115938e-05, -1.102729939627093e-05, 0.000000000000000e+00, -1.103788143621754e-05, -1.102820577859678e-05, 0.000000000000000e+00, -1.103881321653962e-05, -1.015526138958271e-05, 0.000000000000000e+00, -1.103829595107705e-05, -1.102763774346960e-05, 0.000000000000000e+00, -1.016500862835240e-05, -2.754043764166222e-04, 0.000000000000000e+00, -2.765545301329628e-04, -2.779397574597499e-04, 0.000000000000000e+00, -2.789844558269599e-04, -2.723508627497211e-04, 0.000000000000000e+00, -2.743776178916618e-04, -2.749961779324040e-04, 0.000000000000000e+00, -2.769344447052157e-04, -2.789441963979418e-04, 0.000000000000000e+00, -2.222993603605340e-04, -2.789441963979418e-04, 0.000000000000000e+00, -2.782828038448554e-04, -5.411853550128953e-02, 0.000000000000000e+00, -4.674291040976154e-02, -4.697215863633666e-02, 0.000000000000000e+00, -4.721245516585302e-02, -6.166228640033153e-02, 0.000000000000000e+00, -6.080030983604595e-02, -6.645974852544508e-02, 0.000000000000000e+00, -6.200705383633066e-02, -4.969166227354326e-02, 0.000000000000000e+00, -4.895523763886631e-02, -4.969166227354326e-02, 0.000000000000000e+00, -5.767778182585161e-02, -1.326653576658159e+00, 0.000000000000000e+00, -1.306665038347038e+00, -3.870834831022598e-01, 0.000000000000000e+00, -6.306357902113875e-01, -1.528654958694421e+00, 0.000000000000000e+00, -1.479198467220898e+00, -5.086498821842926e-04, 0.000000000000000e+00, -5.097015225372125e-04, -1.388011344055592e+00, 0.000000000000000e+00, -1.701196232624669e+00, -1.388011344055593e+00, 0.000000000000000e+00, -1.701196232624671e+00, 2.442244229208007e+02, 0.000000000000000e+00, -1.064996363507390e+03, -8.328138799946796e+02, 0.000000000000000e+00, -7.587277552108573e+02, -3.999137620007126e+03, 0.000000000000000e+00, -3.736945674232652e+03, -3.130493506837388e+00, 0.000000000000000e+00, -1.224432047414663e-01, -1.662558780318472e+03, 0.000000000000000e+00, -1.573771623216685e+03, -1.662558780318472e+03, 0.000000000000000e+00, -1.573771623216685e+03, -7.173500304126970e-02, 0.000000000000000e+00, -7.066704826482451e-02, -7.212834432636106e-02, 0.000000000000000e+00, -7.107300644519378e-02, -6.922626892322571e-02, 0.000000000000000e+00, -6.826749308961928e-02, -6.958206888822578e-02, 0.000000000000000e+00, -7.085458382303378e-02, -6.940646484761322e-02, 0.000000000000000e+00, -6.843660092110124e-02, -6.940646484761322e-02, 0.000000000000000e+00, -7.091600122999017e-02, -7.980931322093669e-02, 0.000000000000000e+00, -7.880416843113923e-02, -9.950867319794880e-02, 0.000000000000000e+00, -8.184272577990095e-02, -9.844888004448911e-02, 0.000000000000000e+00, -8.383132312103912e-02, -9.341994878031343e-02, 0.000000000000000e+00, -9.224611321511375e-02, -9.645589494230297e-02, 0.000000000000000e+00, -9.531319857832597e-02, -9.645589494230297e-02, 0.000000000000000e+00, -8.383092167188866e-02, -3.734199829065950e-02, 0.000000000000000e+00, -3.334682907523175e-02, -4.696675595463127e-01, 0.000000000000000e+00, -4.671804635644218e-01, -2.847716651570718e-01, 0.000000000000000e+00, -3.848524958559247e-01, -2.184726920916709e-01, 0.000000000000000e+00, -2.692988167608164e-01, -3.499199087563972e-01, 0.000000000000000e+00, -3.532578435903779e-01, -3.499199087563973e-01, 0.000000000000000e+00, -2.747861322728071e-01, -1.181276744614438e-01, 0.000000000000000e+00, -1.188045275559651e-01, 9.244087279996535e-01, 0.000000000000000e+00, 9.007011100904450e-01, -4.218948542976378e+00, 0.000000000000000e+00, -4.066814122024001e+00, -3.898316015941090e-01, 0.000000000000000e+00, -4.184984257102329e-01, -2.563100173965001e+00, 0.000000000000000e+00, -2.747082145969548e+00, -2.563100173965002e+00, 0.000000000000000e+00, -2.747082145969550e+00, 2.264849224988617e+01, 0.000000000000000e+00, 2.090598848774205e+01, -1.232456984825790e+04, 0.000000000000000e+00, -1.224142653679926e+04, 1.010084942396994e+03, 0.000000000000000e+00, 9.187195304539669e+02, -4.263614064079720e-01, 0.000000000000000e+00, -5.207033959012947e-01, -2.977925586040622e+03, 0.000000000000000e+00, -1.906690182589556e+03, -2.977925586040627e+03, 0.000000000000000e+00, 3.854244203388604e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_12_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_12", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.865693422196267e-03, 1.865858741090939e-03, 1.865711308644310e-03, 1.865871698644877e-03, 1.865758367991198e-03, 1.865941933682844e-03, 1.865558194738775e-03, 2.637902966764453e-03, 1.865705220875306e-03, 2.637834854487163e-03, 2.637808348142438e-03, 2.637834854487163e-03, 1.339013805017960e-02, 4.256007703390075e-03, 1.339238859797154e-02, 1.338992768538845e-02, 1.343605249907959e-02, 1.344369693345300e-02, 1.341907701411909e-02, 1.341894851119685e-02, 1.338726553016379e-02, 1.345790465171571e-02, 4.253214241037981e-03, 1.345790465171571e-02, 1.233011115845774e-03, 1.600735490507467e-03, 1.131932937047408e-03, 3.564400472265272e-02, 2.997410635637145e-02, 2.926013579221608e-02, 3.177533081006892e-02, 5.423130292156228e-04, 1.841868458795929e-03, -8.911218107151037e-04, 3.635333393855450e-02, 2.660512696140822e-02, -6.458544545549691e-03, 8.131543182499490e-02, -6.208163288801076e-03, 8.751607124127177e-02, 1.216192584992109e-02, -1.288139533625118e-03, 2.032272454151960e-02, 2.474807770114315e-02, 6.370748900419285e-02, 8.464003506087926e-03, 6.370748900419275e-02, -1.287278167202467e-03, 5.307041580529282e-04, 5.654089972633802e-04, -1.135036537242041e-06, 6.113666803568559e-04, -9.214876179225752e-05, 2.612654920462073e-03, 2.720266565409503e-04, 2.688486729077422e-04, 4.609252498499958e-04, 3.424174820544818e-04, 4.609252498499958e-04, 3.424174820544854e-04, 1.060096930393313e-02, 1.060347351630029e-02, 1.059325410849965e-02, 1.059601601260055e-02, 1.060045025401451e-02, 1.060315183671108e-02, 1.059383399170177e-02, 1.059638081417381e-02, 8.464196120690898e-03, 1.059974469502103e-02, 1.059709246725525e-02, 8.466109779191438e-03, 2.078206507454458e-02, 2.084917361637496e-02, 2.126935631380997e-02, 2.131952227998534e-02, 2.031187440018016e-02, 2.051457240745623e-02, 2.076596636984901e-02, 2.096533103650211e-02, 2.139159465059088e-02, 5.200307640583771e-03, 2.139159465059088e-02, 2.115278968311924e-02, 9.334768033977738e-02, 4.858903701206877e-02, 8.827647600637781e-02, 8.807996560074637e-02, 8.912307728530168e-02, 9.327909418597659e-02, 9.793288878867741e-02, 9.693421136548677e-02, 9.176133474620086e-02, 4.982298093312740e-02, 9.176133474620086e-02, 9.502642970521155e-02, 9.001539192897730e-03, 9.136495800998149e-03, -5.418554184757499e-03, 3.425679511729816e-02, 7.544616454007084e-03, 8.643483085549356e-03, 2.918854006810392e-02, 2.920345569320078e-02, 1.471957822849461e-02, 2.215183688144405e-02, 1.471957822849462e-02, 2.215183688144405e-02, -4.639492087813779e-08, 1.733665260089715e-04, 2.548766303023851e-04, 2.429040797787823e-04, 5.118351537294352e-04, 5.681325276102002e-04, 4.831941592927358e-03, -5.121365619662478e-04, 2.266437311194150e-04, 5.559743948285227e-04, 2.266437311194141e-04, 5.559743948285240e-04, 8.716623759358931e-02, 8.674001967360512e-02, 9.059455480076559e-02, 9.012876823036790e-02, 8.163094839822072e-02, 8.140520540681424e-02, 8.213198424228380e-02, 8.799915468420839e-02, 8.189181249912568e-02, 8.165154592635239e-02, 8.189181249912568e-02, 8.849325312219034e-02, 9.001270549607909e-02, 8.961012525925725e-02, 1.062420825529903e-01, 4.600207505590210e-02, 1.088749476226062e-01, 6.296909253178262e-02, 1.044004139095102e-01, 1.039919920602026e-01, 1.074820655372170e-01, 1.070876622827045e-01, 1.074820655372171e-01, 7.007255403980023e-02, 8.466133666615608e-02, 5.725497813567310e-02, 5.225274050075623e-02, 5.291814455477944e-02, -4.628306216956001e-04, 7.657735288052443e-02, 2.614555445356577e-02, 1.151915325868933e-01, 1.018705138977487e-01, 1.026571093683360e-01, 1.018705138977487e-01, 1.235038017647761e-02, 1.043547282016004e-01, 1.059945223713813e-01, -9.166668123408576e-05, -9.168884490625488e-05, 3.166322657493844e-03, 3.380459151353712e-03, 1.387146867888523e-01, 1.490111907124577e-01, 7.864434485408547e-03, 1.011331304633203e-02, 7.864434485408535e-03, 1.011331304633204e-02, -1.343845818049930e-06, -1.473750114282661e-06, 7.342691541236296e-05, 7.343278549011586e-05, -6.675580065044941e-08, -8.508947252351587e-08, -1.059289838382879e-03, -1.234682963632924e-03, 3.450371229761751e-04, 5.186183846782370e-04, 3.450371229761743e-04, -5.071177239256890e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
