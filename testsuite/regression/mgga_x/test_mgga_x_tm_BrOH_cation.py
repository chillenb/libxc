
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_tm_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tm", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.989491685511638e+01, -1.989497667914657e+01, -1.989525802178686e+01, -2.111275442021959e+01, -2.111317963534306e+01, -2.233161033985436e+01, -3.502477630339933e+00, -3.768027422723396e+00, -3.766990469664276e+00, -3.767750378262762e+00, -3.767277123434599e+00, -3.501840601271488e+00, -6.537693748559273e-01, -7.083157014089001e-01, -7.501878279208590e-01, -6.996711976107292e-01, -6.494525243920817e-01, -7.531335496638354e-01, -1.937401743297616e-01, -1.955777715862619e-01, -8.727449661959809e-01, -1.698430443260223e-01, -2.005613715323742e-01, -2.014064598720844e-01, -2.031163432404340e-02, -2.290558215793392e-02, -7.054558900761304e-02, -1.497588326163293e-02, -1.770915557065932e-02, -1.770915557065932e-02, -5.414459318472469e+00, -5.414982522217799e+00, -5.414481654581387e+00, -5.414943780290436e+00, -5.138433245374589e+00, -5.138698525975220e+00, -2.144749925856069e+00, -2.155184443469633e+00, -2.137476957169845e+00, -2.146550997915853e+00, -1.998907987885772e+00, -2.154027411566321e+00, -5.839353692743382e-01, -6.656876150061841e-01, -5.847069572606914e-01, -5.988973934493217e-01, -5.959521000471970e-01, -6.313123433225621e-01, -1.304724755377964e-01, -2.061183071703592e-01, -1.230050898281508e-01, -2.026254182901182e+00, -1.427123619878508e-01, -1.427123619878508e-01, -1.469790628014868e-02, -1.495133306899344e-02, -1.035205670539059e-02, -9.541697127847831e-02, -1.290849008501027e-02, -1.290849008501027e-02, -6.094162590842086e-01, -6.069122835285797e-01, -5.506254929159263e-01, -5.803668765823449e-01, -5.512478062582797e-01, -5.798698079442630e-01, -5.929969748519923e-01, -4.916464941384189e-01, -5.113822553935972e-01, -5.622615014007448e-01, -5.529222858812506e-01, -5.213328758942420e-01, -6.613310467700846e-01, -2.598209620576354e-01, -2.821355266024940e-01, -3.538879689706611e-01, -3.378218397178244e-01, -3.129666115032899e-01, -4.900692333960520e-01, -7.398948457797641e-02, -7.940392451406189e-02, -3.618339187089028e-01, -1.058822225004840e-01, -1.058822225004841e-01, -3.282115215637980e-02, -6.614647469910029e-03, -1.146540455531350e-02, -1.070745359954316e-01, -1.194744356678316e-02, -1.391959079067407e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_tm_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tm", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.675988518141312e+01, -2.675989162584010e+01, -2.675997764027642e+01, -2.675995878360628e+01, -2.676028824187794e+01, -2.676039968746094e+01, -2.675924408504076e+01, -2.833018337067658e+01, -2.675993973314877e+01, -2.789927150773092e+01, -2.789951631219972e+01, -2.789927150773092e+01, -4.242237291798765e+00, -4.214352796672144e+00, -4.296185365179354e+00, -4.242169688782681e+00, -4.244328307514439e+00, -4.244729334472478e+00, -4.243962549236638e+00, -4.244024469756721e+00, -4.241327855495793e+00, -4.245899668790148e+00, -4.213558888331709e+00, -4.245899668790148e+00, -7.440021649623273e-01, -7.492962026254283e-01, -7.421916896382923e-01, -7.906940598017244e-01, -7.620543552776903e-01, -7.583708763311610e-01, -7.660996227867900e-01, -7.272273531815021e-01, -7.566222820353184e-01, -6.922157292623097e-01, -7.936707124070350e-01, -7.372475291311458e-01, -1.855930218078367e-01, -2.042370392078352e-01, -1.875146103020901e-01, -2.082350150390526e-01, -8.809319430361661e-01, -8.657994167464969e-01, -1.509247958681478e-01, -1.527795305171195e-01, -2.047075313662474e-01, -1.116773958233349e-01, -2.047075313662473e-01, -1.413810909633829e-01, -1.202422781946783e-02, -1.076091029281210e-02, -2.492195798561999e-02, -1.290600410979756e-02, -7.486127605020974e-02, -4.644938964390265e-02, -8.961539637619444e-03, -8.859625736146137e-03, -1.122456019624820e-02, -7.481814968001539e-03, -1.122456019624820e-02, -7.481814968001527e-03, -7.025821512805387e+00, -6.915380238289594e+00, -6.920473185513494e+00, -6.918713042412113e+00, -6.917252835694635e+00, -6.915521836859277e+00, -6.920211296254339e+00, -7.027399418169047e+00, -6.533735380113304e+00, -7.025863560181413e+00, -6.918762452183707e+00, -6.532140412490870e+00, -2.355179157618977e+00, -2.355683213895217e+00, -2.406318899680823e+00, -2.378577977223913e+00, -2.360730930105715e+00, -2.367269913550528e+00, -2.355506157747043e+00, -2.362004404748961e+00, -2.383578197875635e+00, -2.343746433990086e+00, -2.383578197875635e+00, -2.369824357496893e+00, -7.514608274366829e-01, -7.279938006044069e-01, -8.341103432598941e-01, -8.361641529532876e-01, -6.517686949871124e-01, -6.847734127043492e-01, -6.973242172593969e-01, -7.274330691261379e-01, -7.796371578558371e-01, -7.216637052055166e-01, -7.796371578558371e-01, -7.337594854685674e-01, -1.066193783994317e-01, -1.024790268196309e-01, -1.975359500174667e-01, -2.002505592989798e-01, -9.179715599705560e-02, -9.673808969393453e-02, -2.485713270368424e+00, -2.448062457663410e+00, -1.165255327254861e-01, -1.273729039082460e-01, -1.208209565594630e-01, -1.239233343409541e-01, -1.606807642051176e-02, -7.979581235650471e-03, -8.792451766473593e-03, -8.981414210366342e-03, -6.093269322785468e-03, -5.365146985051600e-03, -6.862348448036260e-02, -9.928611211221199e-02, -7.226616605102013e-03, -7.910854785567547e-03, -7.226616605102015e-03, -7.910854785567545e-03, -8.168839507805516e-01, -8.071016191686331e-01, -8.039013423801259e-01, -7.946528259654008e-01, -7.357880164838322e-01, -7.386557955185145e-01, -7.369905967477332e-01, -8.027208882854110e-01, -7.363910617475059e-01, -7.392471286595756e-01, -7.363910617475058e-01, -8.009255861628664e-01, -7.938808570689725e-01, -7.840110741038825e-01, -6.105825691074239e-01, -6.083949874620265e-01, -6.559119348070886e-01, -6.444816470505251e-01, -7.054598093730789e-01, -7.082346946436276e-01, -6.902413933297911e-01, -6.932835523880350e-01, -6.798477712775650e-01, -6.603528397260769e-01, -8.642973958559201e-01, -8.372263552615444e-01, -2.522777532803414e-01, -2.537825263223109e-01, -2.874109783179101e-01, -3.093129956957281e-01, -4.112047677607045e-01, -4.237187038298998e-01, -3.605363488128780e-01, -3.575759052827113e-01, -3.605363488128780e-01, -3.464029138513001e-01, -5.519510666746473e-01, -5.574456339476402e-01, -7.364266427204544e-02, -7.409297146362366e-02, -5.635057763706392e-02, -5.788104996835968e-02, -4.052840423538142e-01, -4.165336996910425e-01, -8.322901799263073e-02, -8.726868072475828e-02, -8.322901799263070e-02, -8.726868072475838e-02, -3.242385619732120e-02, -3.317178316114090e-02, -3.885511051811818e-03, -3.892575094796363e-03, -1.127018404971324e-02, -1.162742669662723e-02, -1.064437644562255e-01, -1.061451631793192e-01, -6.385752781277163e-03, -7.460996230080516e-03, -6.385752781277158e-03, -1.527338955425764e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_tm_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tm", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.503732703310967e-08, 0.000000000000000e+00, -1.504010647134676e-08, -1.503752922685369e-08, 0.000000000000000e+00, -1.504025289053471e-08, -1.503798908554089e-08, 0.000000000000000e+00, -1.504096433497729e-08, -1.503573705062924e-08, 0.000000000000000e+00, -9.822720014390138e-09, -1.503746731361706e-08, 0.000000000000000e+00, -1.527686602997605e-08, -1.527599428774946e-08, 0.000000000000000e+00, -1.527686602997605e-08, -1.739693593505938e-05, 0.000000000000000e+00, -9.848647945981538e-06, -1.537615705475146e-05, 0.000000000000000e+00, -1.739748544400259e-05, -1.743217321727750e-05, 0.000000000000000e+00, -1.743743393747112e-05, -1.741411755632351e-05, 0.000000000000000e+00, -1.741319045703117e-05, -1.740427716037774e-05, 0.000000000000000e+00, -1.744205327887031e-05, -9.851014199521112e-06, 0.000000000000000e+00, -1.744205327887031e-05, -2.772445088364922e-03, 0.000000000000000e+00, -2.873203831066602e-03, -2.747679657862779e-03, 0.000000000000000e+00, -8.709427850696415e-03, -9.169958150333227e-03, 0.000000000000000e+00, -9.166605134886483e-03, -9.272552044114443e-03, 0.000000000000000e+00, -2.642987168136639e-03, -2.878269003729523e-03, 0.000000000000000e+00, -2.118697323877132e-03, -8.808658736096162e-03, 0.000000000000000e+00, -9.692342079455959e-03, -2.008982711695854e-01, 0.000000000000000e+00, -1.525094515017878e+00, -2.161170257761836e-01, 0.000000000000000e+00, -1.472733324991501e+00, -3.642357421591556e-03, 0.000000000000000e+00, -5.303054664813312e-04, -2.484507141573036e+00, 0.000000000000000e+00, -2.584640349864802e+00, -1.354871807929834e+00, 0.000000000000000e+00, -4.934727954850103e+00, -1.354871807929835e+00, 0.000000000000000e+00, 2.773002319080190e-01, -6.935397006316764e+03, 0.000000000000000e+00, -7.249044017779661e+03, 4.202389985835664e+02, 0.000000000000000e+00, -5.351765343242444e+03, 4.932978590308141e+00, 0.000000000000000e+00, -6.482200000690695e+01, -2.085660067596974e+04, 0.000000000000000e+00, -2.180521212516177e+04, -8.946866522269955e+03, 0.000000000000000e+00, -4.304860164729472e+04, -8.946866522269955e+03, 0.000000000000000e+00, -4.304860164729470e+04, -2.067293865971260e-06, 0.000000000000000e+00, -4.402136427355492e-06, -4.395135843376339e-06, 0.000000000000000e+00, -4.399447601048722e-06, -4.397753011149226e-06, 0.000000000000000e+00, -4.402037347922285e-06, -4.395366731378473e-06, 0.000000000000000e+00, -2.049215408474302e-06, -5.695792665781863e-06, 0.000000000000000e+00, -2.058704242169674e-06, -4.396504968448665e-06, 0.000000000000000e+00, -5.700923718196108e-06, -1.601476004619334e-04, 0.000000000000000e+00, -1.604572186121807e-04, -1.432422690226543e-04, 0.000000000000000e+00, -1.585158952478316e-04, -1.479494374925291e-04, 0.000000000000000e+00, -1.475572809386137e-04, -1.599763649513682e-04, 0.000000000000000e+00, -1.598176926990661e-04, -1.579227945578956e-04, 0.000000000000000e+00, -8.202980866751351e-05, -1.579227945578956e-04, 0.000000000000000e+00, -1.593192913321665e-04, -1.970449977704006e-02, 0.000000000000000e+00, -1.772517311918520e-02, -1.934172068889525e-02, 0.000000000000000e+00, -1.935905041149779e-02, -3.195688093462781e-02, 0.000000000000000e+00, -2.939694767640273e-02, -3.041914921118594e-02, 0.000000000000000e+00, -2.752169552950248e-02, -2.170000392431530e-02, 0.000000000000000e+00, -1.862307569887748e-02, -2.170000392431531e-02, 0.000000000000000e+00, -2.589279182577893e-02, -5.981422212615048e+00, 0.000000000000000e+00, -6.591062174395694e+00, -4.066318210376031e-02, 0.000000000000000e+00, -1.123758827421683e+00, -8.776523417655705e+00, 0.000000000000000e+00, -7.838305341537311e+00, -1.701887472965436e-04, 0.000000000000000e+00, -2.227659960148581e-04, -5.301701411949515e+00, 0.000000000000000e+00, -4.726681947111084e+00, -4.782496295084377e+00, 0.000000000000000e+00, -5.152523525808291e+00, 2.436582739026868e+03, 0.000000000000000e+00, -3.233083308692890e+04, -2.240635551927321e+04, 0.000000000000000e+00, -2.055085339167397e+04, -9.904121853874713e+04, 0.000000000000000e+00, -1.083252018949714e+05, -2.125298971804504e+01, 0.000000000000000e+00, 1.427467380198081e+00, -4.838302275935275e+04, 0.000000000000000e+00, -3.575352552117075e+04, -4.838302275935278e+04, 0.000000000000000e+00, -3.575352552117076e+04, 3.062428501652872e-02, 0.000000000000000e+00, -2.535070917996855e-02, 9.383113652785166e-04, 0.000000000000000e+00, -2.684633565517424e-02, -7.025174488477841e-02, 0.000000000000000e+00, -7.069227477696172e-02, -8.316053035200478e-02, 0.000000000000000e+00, -2.596512001362052e-02, -7.607730699600267e-02, 0.000000000000000e+00, -7.653331570402035e-02, -7.607730699600267e-02, 0.000000000000000e+00, -2.618590238999998e-02, 2.614926650156018e-02, 0.000000000000000e+00, -2.851294290468087e-02, -4.753738026203419e-02, 0.000000000000000e+00, -3.026079548420154e-02, -4.308445736631841e-02, 0.000000000000000e+00, -3.298185071752278e-02, -3.827828531279956e-02, 0.000000000000000e+00, -3.776432689154560e-02, -2.881481346149899e-02, 0.000000000000000e+00, -2.828669005951690e-02, -4.079745035482182e-02, 0.000000000000000e+00, -3.541217203756890e-02, -1.574648179502060e-02, 0.000000000000000e+00, -1.452134367625078e-02, -5.901780029760234e-01, 0.000000000000000e+00, -5.810818797958939e-01, -9.037367642486474e-02, 0.000000000000000e+00, -3.416317890415863e-01, -8.063866960664365e-02, 0.000000000000000e+00, -1.442451698861577e-01, -2.316164314228135e-01, 0.000000000000000e+00, -2.460964440448071e-01, -2.316164314228127e-01, 0.000000000000000e+00, -9.960652810418529e-02, -6.158374265742630e-02, 0.000000000000000e+00, -6.083464608692483e-02, 5.270807379648698e+00, 0.000000000000000e+00, 5.142948889474052e+00, -3.526271045248642e+01, 0.000000000000000e+00, -3.299820647018841e+01, -2.066755390555657e-01, 0.000000000000000e+00, -2.067767819710889e-01, -1.349876284785477e+01, 0.000000000000000e+00, -1.282420410813648e+01, -1.349876284785476e+01, 0.000000000000000e+00, -1.282420410813648e+01, 1.465925584065400e+02, 0.000000000000000e+00, 1.337878094126627e+02, -5.552705770242128e+05, 0.000000000000000e+00, -5.512632279570579e+05, 1.006727774439290e+04, 0.000000000000000e+00, 8.885485683898183e+03, 9.671873114151271e-01, 0.000000000000000e+00, 9.487807704418912e-01, -8.046020412837353e+04, 0.000000000000000e+00, -4.473311748736221e+04, -8.046020412837372e+04, 0.000000000000000e+00, 2.982385319219562e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_tm_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tm", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.367948412304290e-04, 1.368256998578845e-04, 1.367989030179988e-04, 1.368286438444216e-04, 1.368101203553084e-04, 1.368452074245504e-04, 1.367645896511657e-04, 3.683893420660707e-04, 1.367974698245027e-04, 7.902315745724656e-04, 7.902064782504873e-04, 7.902315745724656e-04, 3.410755638100432e-03, -7.628570926435812e-04, 2.736205531712781e-03, 3.410724494504212e-03, 3.419708242166313e-03, 3.421197691142537e-03, 3.416322548669220e-03, 3.416286343268183e-03, 3.410328531924501e-03, 3.423903900360768e-03, -7.640086555652312e-04, 3.423903900360768e-03, -1.203335476694579e-02, -1.183176945609458e-02, -1.209345227668075e-02, 1.175340081608183e-02, 1.174444459783295e-02, 1.137322386548166e-02, 1.200565185678240e-02, -1.250622920393440e-02, -1.163370712056005e-02, -1.328870610725996e-02, 1.249047909850968e-02, 1.125759286177857e-02, -4.674397284678738e-02, 3.837659097842670e-02, -4.689441587942748e-02, 3.895114470728893e-02, 7.771676959502294e-03, -1.027694650007431e-02, 2.562997828435984e-02, 2.778899823839594e-02, 3.470635859056667e-02, 1.942590983754076e-02, 3.470635859056665e-02, -2.403998046661807e-02, 5.721291789110714e-03, 8.312350638815167e-03, -6.893621754178758e-03, 6.254250979943171e-03, -1.446566996855309e-02, 1.304820082573106e-02, 3.720028655265038e-03, 3.697737016000182e-03, 5.233247939505916e-03, 4.625424801645056e-03, 5.233247939505916e-03, 4.625424801645056e-03, 9.076237424712576e-04, 3.519911282481114e-03, 3.523904057543184e-03, 3.524620009810482e-03, 3.519378819918139e-03, 3.520127080161094e-03, 3.523554478308804e-03, 8.913982706743228e-04, 7.190524487532601e-04, 8.991842805077319e-04, 3.521471275973470e-03, 7.191967330146692e-04, 5.534427140416780e-03, 5.545283229888012e-03, 4.690639834466266e-03, 5.606561198602032e-03, 4.675703475057418e-03, 4.682980242260469e-03, 5.531439063164891e-03, 5.559516176430853e-03, 5.615102090271582e-03, -2.109238825146925e-03, 5.615102090271582e-03, 5.584945139613430e-03, 1.649323818452545e-02, 1.230030720526621e-03, 2.675477802411573e-02, 2.700187711647459e-02, 2.260579719073039e-02, 2.353556336992317e-02, 2.518991442629214e-02, 2.557851399849442e-02, 2.469342424117739e-02, 1.403681057125167e-03, 2.469342424117739e-02, 2.479986642651287e-02, 2.051410771519179e-02, 2.523482190977196e-02, -3.686205890657242e-02, 2.731477584005822e-02, 2.418162891795230e-02, 2.526836218860908e-02, 4.915346491421370e-03, 7.850065641973977e-03, 2.943200626777695e-02, 2.924099314039142e-02, 2.480300190514149e-02, 3.375433026682193e-02, -3.180656726811097e-03, 2.728258700020461e-03, 3.558901268279408e-03, 3.414354728500641e-03, 6.585551723816985e-03, 9.930129680868944e-03, 1.720338374576151e-02, -2.165021957276193e-02, 3.420366065662001e-03, 6.570743727381791e-03, 3.420366065662002e-03, 6.570743727381789e-03, -5.463094445836650e-02, 3.650502346007937e-02, -1.037305397855249e-02, 3.444458316332017e-02, 7.916928522393760e-03, 7.914042435851219e-03, 8.106899679379307e-03, 3.572663761506505e-02, 8.012453043820901e-03, 8.006007057950341e-03, 8.012453043820901e-03, 3.542583395929179e-02, -4.485676823470146e-02, 3.719248946230500e-02, 2.686002044908765e-02, -1.125678938849540e-03, 2.921452193209024e-02, 2.975899862337935e-03, 3.206900621540568e-02, 3.202077938261574e-02, 1.671675385610294e-02, 1.656656471688367e-02, 3.054763742314815e-02, 4.518646071411950e-03, 2.421708335701056e-02, 3.931280899138698e-03, 2.828466021537452e-02, 2.832943156647008e-02, -3.198636031757911e-02, 2.845747845097148e-02, -1.317048088792619e-02, 2.620828777979270e-02, 2.803446117184874e-02, 3.107182893696208e-02, 2.803446117184866e-02, -2.236131524822824e-02, 2.650893952109551e-02, 2.681509470647544e-02, -1.459762167606552e-02, -1.454006497664320e-02, 1.400628938266371e-02, 1.450450232180060e-02, 3.541272567289547e-02, 3.755448517172854e-02, 2.128163203483175e-02, 2.395662426050680e-02, 2.128163203483176e-02, 2.395662426050681e-02, -6.120073973190558e-03, -6.216240797151993e-03, 1.711436076544073e-03, 1.710763928485415e-03, -4.548606538683796e-03, -4.830325085288701e-03, -2.679646841465552e-02, -2.837808606451720e-02, 4.838102328077833e-03, 6.326360858636124e-03, 4.838102328077833e-03, -7.302672015356700e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
