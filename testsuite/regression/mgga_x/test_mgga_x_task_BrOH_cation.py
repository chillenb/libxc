
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_task_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_task", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.182680113356763e+01, -2.182691213361224e+01, -2.182740420249618e+01, -2.253387811150531e+01, -2.253459645721793e+01, -2.324267039977430e+01, -3.352382818043536e+00, -3.766103243906016e+00, -3.766583212500542e+00, -3.766730656131347e+00, -3.766323708426962e+00, -3.352724663104671e+00, -4.455127831043306e-01, -5.820131253298794e-01, -6.986030415156342e-01, -5.650492910494220e-01, -4.251316623915077e-01, -7.053255521741781e-01, -1.449387879346135e-01, -1.482595140406622e-01, -6.294200589602832e-01, -1.361525164714246e-01, -1.759189597738228e-01, -1.691410783849449e-01, -3.275295242604161e-03, -3.242541402271136e-03, -2.363774365487844e-02, -1.499323899673616e-03, -2.454868365026178e-03, -2.454868365026178e-03, -5.669017767241344e+00, -5.670111405444924e+00, -5.669072662427109e+00, -5.670038036952315e+00, -5.548964880093244e+00, -5.549073763353151e+00, -2.115661188019765e+00, -2.131829917890167e+00, -2.103797959880326e+00, -2.118118752786469e+00, -1.856248580333997e+00, -2.130357444825592e+00, -5.980360076805856e-01, -6.936732637104804e-01, -5.889131106027345e-01, -6.133492572528516e-01, -6.134436758900174e-01, -6.486927790173864e-01, -9.062580669312796e-02, -1.367622096003364e-01, -8.325844066681184e-02, -2.086481486901979e+00, -1.098713816065548e-01, -1.098713816065549e-01, -1.095185573489215e-03, -1.435765373574762e-03, -1.212401501820248e-03, -3.917387729295550e-02, -1.545273377577879e-03, -1.545273377577879e-03, -6.423267280822331e-01, -6.385502933814650e-01, -6.225359736157992e-01, -6.331101306309304e-01, -6.238393045314692e-01, -6.321517444595059e-01, -6.249058161432779e-01, -4.907976534663493e-01, -5.322770229984682e-01, -5.862422353956178e-01, -5.730856459210854e-01, -5.513744598413146e-01, -7.019119870827285e-01, -2.330514380145082e-01, -2.254226877337285e-01, -3.254188214695961e-01, -3.257142765837746e-01, -2.714869766454891e-01, -4.911114652891904e-01, -1.492803746186766e-02, -4.088116344182916e-02, -3.631759264786351e-01, -7.113980913882120e-02, -7.113980913882123e-02, -3.777861848738993e-03, -2.266204238644036e-04, -8.488581087693404e-04, -3.091267502987031e-02, -1.401435199673021e-03, -1.318013616368167e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_task_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_task", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.179799208520049e+01, -3.179729422783089e+01, -3.179799839399124e+01, -3.179729894650597e+01, -3.179807501621830e+01, -3.179739303475727e+01, -3.179799595261661e+01, -3.111706591914048e+01, -3.179799050712881e+01, -3.111763605359794e+01, -3.111804187899723e+01, -3.111763605359794e+01, -5.098878252753737e+00, -5.317387588188328e+00, -5.098881191317398e+00, -5.098816891406440e+00, -5.098915684997356e+00, -5.098975478452729e+00, -5.099332943406196e+00, -5.099404168981541e+00, -5.098054612121936e+00, -5.099531413130958e+00, -5.316262810769222e+00, -5.099531413130958e+00, -8.289359121901660e-01, -8.416801364625339e-01, -8.249150552930145e-01, -9.912822086438785e-01, -9.673183372229257e-01, -9.608566094717176e-01, -9.705289179152364e-01, -7.954299092989948e-01, -8.542366007579514e-01, -7.118729678770426e-01, -9.993260588096234e-01, -9.384860647990624e-01, -1.690350137800369e-01, -2.612964219276834e-01, -1.742646741026445e-01, -2.657623670875943e-01, -1.141439099983882e+00, -8.201856837547550e-01, -1.944037597218815e-01, -1.970858750565260e-01, -2.629736379803864e-01, -1.407387997556555e-01, -2.629736379803863e-01, -6.104892968962294e-02, -5.631262563435710e-03, -6.095201975321611e-03, -3.621506787248573e-03, -6.564919749807155e-03, -2.032637753754833e-02, -4.970503850839899e-02, -2.797667319682812e-03, -2.737471909833313e-03, -4.831703999681812e-03, -2.387703435129532e-03, -4.831703999681812e-03, -2.387703435129531e-03, -7.577182059518121e+00, -7.575366050251135e+00, -7.578440205637683e+00, -7.576581253498076e+00, -7.577257269225041e+00, -7.575411595676453e+00, -7.578336846610735e+00, -7.576515583136270e+00, -7.555818742309435e+00, -7.575975623968854e+00, -7.577822245821661e+00, -7.554009368306908e+00, -2.874628854832805e+00, -2.874377341351249e+00, -2.894750961323729e+00, -2.893889761504361e+00, -2.857808816245307e+00, -2.862375732828188e+00, -2.875187723412680e+00, -2.879985429789375e+00, -2.898474200568787e+00, -2.916506406348199e+00, -2.898474200568787e+00, -2.886328012238372e+00, -8.584424844053092e-01, -9.121759274602720e-01, -9.282373138491774e-01, -9.285224246151088e-01, -7.811560952400062e-01, -8.086810037476024e-01, -8.111719242394660e-01, -8.373863487095271e-01, -8.918480760318263e-01, -9.030730862160519e-01, -8.918480760318266e-01, -8.481171267512406e-01, -1.344283637288901e-01, -1.357468384128027e-01, -1.468493628934252e-01, -2.585734097113413e-01, -1.211680240546967e-01, -1.280070819535071e-01, -2.802606811775085e+00, -2.801335737836628e+00, -1.545596156862638e-01, -1.639418117221229e-01, -1.545596156862638e-01, -1.639418117221229e-01, -1.557948259865185e-03, -1.924660578791124e-03, -2.643743770358629e-03, -2.668251309378687e-03, -2.119461998468245e-03, -2.305674608399248e-03, -8.199733363851466e-02, -3.485855586485559e-02, -1.884706838224663e-03, -3.184787742830064e-03, -1.884706838224664e-03, -3.184787742830064e-03, -8.549319555697664e-01, -8.582287204152080e-01, -8.503984565169971e-01, -8.536991140190512e-01, -8.425665125349630e-01, -8.460512731380758e-01, -8.457147606781749e-01, -8.565786514606605e-01, -8.440565335248659e-01, -8.475515278757388e-01, -8.440565335248660e-01, -8.559252429639268e-01, -8.320316997566005e-01, -8.347718335693389e-01, -7.189102562000702e-01, -7.704150412529097e-01, -7.509658690376992e-01, -7.962734899495978e-01, -7.830912966015650e-01, -7.858212193495412e-01, -7.667760209774123e-01, -7.695830913571272e-01, -7.667760209774122e-01, -7.983282964932163e-01, -9.733854697450833e-01, -1.004522819738305e+00, -3.240342471932964e-01, -3.258787010152107e-01, -3.064242203911235e-01, -3.908528626569889e-01, -5.089158929585286e-01, -5.120967351818755e-01, -4.453690641238362e-01, -4.451830449709563e-01, -4.453690641238363e-01, -4.102021530074396e-01, -6.622495732425705e-01, -6.665725788042696e-01, -1.994367320522354e-02, -2.008086408663428e-02, -6.346843108208008e-02, -6.588022988898257e-02, -4.877372252243540e-01, -4.943858188591290e-01, -1.034663789014528e-01, -1.097342225835124e-01, -1.034663789014528e-01, -1.097342225835125e-01, -4.944233798791219e-03, -5.123670453654122e-03, -4.338765515118085e-04, -4.350826398901353e-04, -1.093863685108354e-03, -1.163423287606833e-03, -4.222075809649339e-02, -4.318916833403601e-02, -1.905559595053283e-03, -2.846388514279717e-03, -1.905559595053280e-03, -1.921257977275599e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_task_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_task", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.943963239317487e-08, 0.000000000000000e+00, -1.943602591570834e-08, -1.943883721346840e-08, 0.000000000000000e+00, -1.943544891270015e-08, -1.943644771795951e-08, 0.000000000000000e+00, -1.943198171688146e-08, -1.944538777295258e-08, 0.000000000000000e+00, 6.047909948422875e-10, -1.943913628087283e-08, 0.000000000000000e+00, 6.046945217508027e-10, 6.046837873198961e-10, 0.000000000000000e+00, 6.046945217508027e-10, 1.089733370481401e-06, 0.000000000000000e+00, -2.638727902263155e-05, 1.089709499760975e-06, 0.000000000000000e+00, 1.089789338561699e-06, 1.089257920419342e-06, 0.000000000000000e+00, 1.089129896821834e-06, 1.089056389961049e-06, 0.000000000000000e+00, 1.088994974744411e-06, 1.090485271883435e-06, 0.000000000000000e+00, 1.088498998132485e-06, -2.639144966120786e-05, 0.000000000000000e+00, 1.088498998132485e-06, -2.929500903314144e-03, 0.000000000000000e+00, -3.405886832096364e-03, -2.795677696802949e-03, 0.000000000000000e+00, 7.372039003574845e-04, 7.919972641080637e-04, 0.000000000000000e+00, 8.099158546765227e-04, 7.883230002710717e-04, 0.000000000000000e+00, -1.974003478658698e-03, -3.635645192831316e-03, 0.000000000000000e+00, 1.133573762180741e-03, 7.161400294238038e-04, 0.000000000000000e+00, 8.741375710629904e-04, 1.017678243922698e+00, 0.000000000000000e+00, 1.416756956153386e-01, 8.712359853154806e-01, 0.000000000000000e+00, 1.344003388239912e-01, 3.590292549510187e-04, 0.000000000000000e+00, 1.685239515423941e-03, 3.051732413437622e-01, 0.000000000000000e+00, 3.091319012625320e-01, 1.322907696160061e-01, 0.000000000000000e+00, 6.745851511879568e-01, 1.322907696160060e-01, 0.000000000000000e+00, 2.342616600284194e+01, 4.698475760103395e+02, 0.000000000000000e+00, 4.210244978132524e+02, 1.412768703599395e+06, 0.000000000000000e+00, 3.896452170568818e+02, 1.473516552705588e+03, 0.000000000000000e+00, 8.609559560894512e+00, 9.845775535341434e+02, 0.000000000000000e+00, 1.019797937570608e+03, 5.628289185733198e+02, 0.000000000000000e+00, 2.073029756523747e+03, 5.628289185733198e+02, 0.000000000000000e+00, 2.073029756523746e+03, 1.412767893310958e-07, 0.000000000000000e+00, 1.414079507781636e-07, 1.404849933153966e-07, 0.000000000000000e+00, 1.406420019803325e-07, 1.412226238025123e-07, 0.000000000000000e+00, 1.413742635800231e-07, 1.405436621477365e-07, 0.000000000000000e+00, 1.406788770042417e-07, -3.892709067365773e-06, 0.000000000000000e+00, 1.410249561213456e-07, 1.408794293526002e-07, 0.000000000000000e+00, -3.896852222234198e-06, 1.085500790723132e-05, 0.000000000000000e+00, 1.085884492501818e-05, 1.055420419810676e-05, 0.000000000000000e+00, 1.056641601358577e-05, 1.110987802235342e-05, 0.000000000000000e+00, 1.104085786303074e-05, 1.084655736781988e-05, 0.000000000000000e+00, 1.077436321070865e-05, 1.049874921909904e-05, 0.000000000000000e+00, -2.073692142536221e-04, 1.049874921909904e-05, 0.000000000000000e+00, 1.067911904606636e-05, 1.268197987142789e-03, 0.000000000000000e+00, -4.272849481074979e-02, 7.494952306455851e-04, 0.000000000000000e+00, 7.343590819340641e-04, 1.973124507658559e-03, 0.000000000000000e+00, 1.683370992111278e-03, 1.607371429821922e-03, 0.000000000000000e+00, 1.369591435857766e-03, 1.038925291644625e-03, 0.000000000000000e+00, -4.437946305935710e-02, 1.038925291644627e-03, 0.000000000000000e+00, 1.319699298440727e-03, 8.169438853555056e-01, 0.000000000000000e+00, 7.954928703618476e-01, 1.584749008517597e+00, 0.000000000000000e+00, 1.231191345079067e-01, 1.066264672485491e+00, 0.000000000000000e+00, 9.488856785660559e-01, 1.067072271052501e-05, 0.000000000000000e+00, 1.068772880398453e-05, 6.230584618902032e-01, 0.000000000000000e+00, 5.864211283451253e-01, 6.230584618902032e-01, 0.000000000000000e+00, 5.864211283451249e-01, 4.119230884220680e+07, 0.000000000000000e+00, 1.206298913471231e+03, 1.022380988637715e+03, 0.000000000000000e+00, 9.275338422644558e+02, 5.153918184408866e+03, 0.000000000000000e+00, 4.902246226734290e+03, 2.979078106717940e+00, 0.000000000000000e+00, 1.859779254631034e+02, 1.939299333817881e+03, 0.000000000000000e+00, 2.119825855828871e+03, 1.939299333817881e+03, 0.000000000000000e+00, 2.119825855828869e+03, 2.568003921689923e-04, 0.000000000000000e+00, 2.434242939924367e-04, 5.592906353431053e-04, 0.000000000000000e+00, 5.400685952175722e-04, -2.212194779320913e-02, 0.000000000000000e+00, -2.221235088014345e-02, -2.604615995902574e-02, 0.000000000000000e+00, 3.574411598679512e-04, -2.382722015171654e-02, 0.000000000000000e+00, -2.396097933375479e-02, -2.382722015171654e-02, 0.000000000000000e+00, 4.011587767328578e-04, 3.367886601361326e-04, 0.000000000000000e+00, 3.204596382586192e-04, 2.680136671867884e-03, 0.000000000000000e+00, -8.023263735192059e-02, 2.074038474628610e-03, 0.000000000000000e+00, -6.977710033983427e-02, 1.446572720115991e-03, 0.000000000000000e+00, 1.420625890898406e-03, 1.771901119380672e-03, 0.000000000000000e+00, 1.738562452062944e-03, 1.771901119380672e-03, 0.000000000000000e+00, -5.879263556057418e-02, 6.762847628658912e-04, 0.000000000000000e+00, -2.178058026761322e-02, 5.750293384827055e-02, 0.000000000000000e+00, 5.640732906343605e-02, -2.411047412022054e-02, 0.000000000000000e+00, 2.984651643139399e-02, -1.987369553560441e-01, 0.000000000000000e+00, 1.077755886023855e-02, 1.857488987148953e-02, 0.000000000000000e+00, 1.861751038899897e-02, 1.857488987148957e-02, 0.000000000000000e+00, -1.916479195859001e-01, 3.823584373593072e-03, 0.000000000000000e+00, 3.712608962475387e-03, 1.589186252114732e+03, 0.000000000000000e+00, 1.546407454261450e+03, 4.829763167505599e+00, 0.000000000000000e+00, 4.544265078978602e+00, 1.302891732272475e-02, 0.000000000000000e+00, 1.215100762290212e-02, 1.877157389076138e+00, 0.000000000000000e+00, 1.759814653082524e+00, 1.877157389076138e+00, 0.000000000000000e+00, 1.759814653082525e+00, 4.068372118145854e+05, 0.000000000000000e+00, 3.528176227127226e+05, 1.007893233822661e+04, 0.000000000000000e+00, 1.001531642246566e+04, 1.695024212848299e+08, 0.000000000000000e+00, 1.324624632558405e+08, 9.423787305916755e+01, 0.000000000000000e+00, 8.806103384264607e+01, 3.646117910989956e+03, 0.000000000000000e+00, 2.528349493370378e+03, 3.646117910989962e+03, 0.000000000000000e+00, 1.782092263274505e+07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_task_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_task", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.580458128880262e-03, 1.580152382346801e-03, 1.580407852800458e-03, 1.580115913427865e-03, 1.580262936984474e-03, 1.579903792683826e-03, 1.580827287735385e-03, 4.378428343608386e-13, 1.580426171860370e-03, 4.378292186225580e-13, 4.378257405879433e-13, 4.378292186225580e-13, 2.939577720965407e-12, 1.051839044290675e-02, 2.939484436835085e-12, 2.939628160759607e-12, 2.937682017722816e-12, 2.937328116443008e-12, 2.938090177904728e-12, 2.938046736872317e-12, 2.940256736268514e-12, 2.936364671210320e-12, 1.051674628716962e-02, 2.936364671210320e-12, 2.256379070248647e-02, 2.350685380911084e-02, 2.230371289446408e-02, 1.596219945150920e-11, 1.640432064844714e-11, 1.651570474177407e-11, 1.634304155114712e-11, 2.080084175277964e-02, 2.400082324031072e-02, 1.598016042781060e-02, 1.582173786733784e-11, 1.689826474632215e-11, 3.528796722008112e-02, 6.050263296570460e-11, 3.790762973638974e-02, 5.960927729151143e-11, 1.357139394413054e-11, 8.886982547732179e-03, 6.720779973715880e-11, 6.909632939895003e-11, 5.956614244697697e-11, 6.458252931165488e-11, 5.956614244697700e-11, 1.401802781951101e-03, 2.331767106559295e-12, 2.720122834531252e-12, 7.197993041425471e-07, 3.231904805418533e-12, 6.442236774518663e-05, 4.176524875557848e-11, 4.475907576364386e-13, 4.308718275613053e-13, 1.666909028511148e-12, 5.958477239538495e-13, 1.666909028511148e-12, 5.958477239538482e-13, 1.760483570679471e-12, 1.760901383312608e-12, 1.759517633909981e-12, 1.759967661478056e-12, 1.760419051528473e-12, 1.760861472091609e-12, 1.759590643816323e-12, 1.760013646914759e-12, 4.582690606549820e-03, 1.760433529171749e-12, 1.759996704820466e-12, 4.584208802829995e-03, 5.318937285560181e-12, 5.317370994639152e-12, 5.261851805527668e-12, 5.261983527550164e-12, 5.368218289786792e-12, 5.352618404888808e-12, 5.318277530848485e-12, 5.302095741835967e-12, 5.250178147438684e-12, 1.607746924296779e-02, 5.250178147438684e-12, 5.282998511215264e-12, 1.664798116807826e-11, 7.394368242227242e-02, 1.463816263161397e-11, 1.459636549935577e-11, 1.911600310044436e-11, 1.810928141726901e-11, 1.770107796245099e-11, 1.691772539487705e-11, 1.575833091917230e-11, 7.456942856598338e-02, 1.575833091917228e-11, 1.679096300027406e-11, 6.804670446675882e-11, 6.805691502177051e-11, 1.502297667172825e-02, 5.751269069530996e-11, 6.686200690671397e-11, 6.886288617154526e-11, 5.017072380082620e-12, 5.019008030058924e-12, 7.364503000067096e-11, 7.825775493297862e-11, 7.364503000067098e-11, 7.825775493297862e-11, 2.929404754348832e-08, 1.453291869815775e-13, 3.809581819071101e-13, 3.519949509452833e-13, 1.105780179841711e-12, 1.411994491917490e-12, 6.199191018994015e-11, 4.320393022950648e-04, 2.338317576759604e-13, 1.715980592155723e-12, 2.338317576759601e-13, 1.715980592155717e-12, 1.508359536179080e-11, 1.502055105788948e-11, 1.534957463668647e-11, 1.528215960975944e-11, 3.660972158500053e-02, 3.715216344264539e-02, 4.297688940589522e-02, 1.511271665616513e-11, 3.937581352519422e-02, 4.002088507368812e-02, 3.937581352519422e-02, 1.515037506984765e-11, 1.552420333806945e-11, 1.546707740218171e-11, 2.029057765932288e-11, 8.535890416665279e-02, 1.873508195903016e-11, 8.163115250726398e-02, 1.729954316440906e-11, 1.723036804186274e-11, 1.800945857841624e-11, 1.792774400513908e-11, 1.800945857841626e-11, 7.247796907222745e-02, 1.416145384787837e-11, 5.447270527448304e-02, 4.836697284372517e-11, 4.813575732707069e-11, 4.595485807909675e-02, 4.059198556143795e-11, 8.689091169805507e-02, 2.990267050587341e-11, 3.515943305945493e-11, 3.515874379161686e-11, 3.515943305945490e-11, 7.190368069312660e-02, 2.258087283757383e-11, 2.233421740585133e-11, 6.400974018231455e-05, 6.404724908453504e-05, 4.827173466445047e-11, 5.059699092637840e-11, 3.078160592840270e-11, 2.981895596597020e-11, 7.409152870888677e-11, 8.043245637179263e-11, 7.409152870888685e-11, 8.043245637179259e-11, 8.533782991808360e-07, 9.362645953193003e-07, 7.048635740043658e-15, 7.069042469046648e-15, 4.215018011758136e-08, 5.373214102434654e-08, 1.029331848657630e-03, 1.240106468112580e-03, 5.057449218921428e-13, 1.406072500140324e-12, 5.057449218921418e-13, 3.207684310314290e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
