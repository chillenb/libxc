
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_bloc_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_bloc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.990391377412479e+01, -1.990397421011460e+01, -1.990425804443654e+01, -1.990335889573926e+01, -1.990382786975947e+01, -1.990382786975947e+01, -3.234944274553457e+00, -3.234940169035268e+00, -3.234891083518711e+00, -3.235203454901593e+00, -3.234833775077382e+00, -3.704951420064266e+00, -6.332783260003031e-01, -7.541975792608216e-01, -7.479960546337399e-01, -7.475033199367547e-01, -7.476854793776371e-01, -7.476854793776371e-01, -2.073849949275024e-01, -2.087530316413890e-01, -7.446297562288419e-01, -1.833085705253524e-01, -1.930427200588264e-01, -1.930427200588264e-01, -1.008749878382169e-02, -1.061666355343936e-02, -5.776652503199600e-02, -5.828381314070652e-03, -7.322707490841747e-03, -7.322707490841747e-03, -5.479812117260666e+00, -5.480818564519859e+00, -5.479862243822365e+00, -4.866507824758401e+00, -5.480320224152019e+00, -5.480320224152019e+00, -1.826757278562736e+00, -1.838583686591806e+00, -1.818240665491659e+00, -1.828627226147893e+00, -1.837414630838800e+00, -2.113886071053742e+00, -6.189990390173223e-01, -6.708775449049562e-01, -5.761111891543468e-01, -5.953095698659332e-01, -6.284478849698582e-01, -5.536247382153061e-01, -8.757031029975122e-02, -2.254557781953895e-01, -8.102718564975862e-02, -2.022720953445568e+00, -1.548818317754050e-01, -1.548818317754050e-01, -2.580266626392717e-03, -5.697858971713032e-03, -4.356405519282660e-03, -5.452631588912357e-02, -3.011503629504510e-03, -5.248255712351583e-03, -6.203088917024043e-01, -6.169196501018211e-01, -5.511033217035580e-01, -6.191174781299016e-01, -6.186270937782863e-01, -6.186270937782863e-01, -6.035293925820352e-01, -5.209434381590058e-01, -5.432945219748725e-01, -5.669308681714832e-01, -5.547250791001663e-01, -4.902445289179169e-01, -7.034710490847987e-01, -2.085659973049198e-01, -3.011026376791245e-01, -3.246225815311647e-01, -3.320848779258266e-01, -3.320848779258266e-01, -4.214536290800031e-01, -5.535174398207950e-02, -7.471623531607739e-02, -3.562508860053409e-01, -6.939555289989853e-02, -1.124943550398780e-01, -1.423328982899095e-02, -1.523293503010479e-03, -3.197205141949161e-03, -1.062415114315567e-01, -4.856253051946943e-03, -4.856253051946939e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_bloc_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_bloc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.680343652264652e+01, -2.680351656620545e+01, -2.680389335678717e+01, -2.680270236676317e+01, -2.680332345159164e+01, -2.680332345159164e+01, -4.242675846994047e+00, -4.242719571542516e+00, -4.243955546360267e+00, -4.243838452243452e+00, -4.243409925615888e+00, -4.687740382429890e+00, -8.236538745643285e-01, -7.901715885172573e-01, -7.475665571643340e-01, -7.633262966181249e-01, -7.597215961953065e-01, -7.597215961953065e-01, -1.917770311513034e-01, -1.953402183325386e-01, -9.792375961189348e-01, -1.742146401127111e-01, -1.727370116937951e-01, -1.727370116937952e-01, -1.343362043332594e-02, -1.413605856528857e-02, -7.480315188667951e-02, -7.768471236540886e-03, -9.757281479734070e-03, -9.757281479734070e-03, -6.978297083987023e+00, -6.976769109323684e+00, -6.978199585205890e+00, -6.542623349137469e+00, -6.977538367757695e+00, -6.977538367757695e+00, -2.377351668297459e+00, -2.395720998718805e+00, -2.364246107533603e+00, -2.380104571348953e+00, -2.394017260989055e+00, -2.598675534277729e+00, -8.114775325265473e-01, -8.674807118346153e-01, -7.405187514163408e-01, -7.806136461423229e-01, -8.246488442759957e-01, -7.428958865579510e-01, -1.165700060007698e-01, -2.012449650346319e-01, -1.078859935541236e-01, -2.653555219757376e+00, -1.555145813261684e-01, -1.555145813261683e-01, -3.440351105338703e-03, -7.594770189407650e-03, -5.805521611165725e-03, -7.265380963186556e-02, -4.015324251353923e-03, -6.994404292634384e-03, -7.500705574011125e-01, -7.629441600114218e-01, -7.378070358845130e-01, -7.550329717632414e-01, -7.569439057061833e-01, -7.569439057061833e-01, -7.322332749792728e-01, -6.772563277324315e-01, -7.127226441306979e-01, -7.319963558041712e-01, -7.242718309588405e-01, -6.600674121018475e-01, -9.169516307579825e-01, -2.741094687120513e-01, -3.026601995546817e-01, -4.222323364953199e-01, -3.748808111851445e-01, -3.748808111851445e-01, -5.538923964803655e-01, -7.183779445029501e-02, -9.504330314571303e-02, -4.547565751573475e-01, -9.240440760601658e-02, -1.293487191926199e-01, -1.894590441133469e-02, -2.031007797787285e-03, -4.262154041112920e-03, -1.235534376693438e-01, -6.471911285631237e-03, -6.471911285631230e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_bloc_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_bloc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.856381924798151e-09, -6.856419445113126e-09, -6.856516798196853e-09, -6.855967764171030e-09, -6.856265108822309e-09, -6.856265108822309e-09, -4.825647431572352e-06, -4.826732776969010e-06, -4.855082995812677e-06, -4.841852668983780e-06, -4.845283226648162e-06, -7.613572493065433e-07, -1.807744877466234e-03, -2.292604630481009e-03, -2.729037821496500e-03, -2.575874648147142e-03, -2.610998896585707e-03, -2.610998896585707e-03, -5.506313949723431e-01, -5.241118971320007e-01, -6.376179254522234e-04, -7.498172588832190e-01, -7.526678773910699e-01, -7.526678773910700e-01, -2.399977351782230e+00, -2.500843693616475e+00, -1.188951013342389e+00, -1.760948870702513e+00, -2.451361262776015e+00, -2.451361262776015e+00, -3.517422501777577e-06, -3.573894142752498e-06, -3.520668905733199e-06, -2.427514923569799e-06, -3.545591673694105e-06, -3.545591673694105e-06, -3.981591422627927e-05, -4.017074166220670e-05, -3.948151048435457e-05, -3.981125035032954e-05, -4.019341278217460e-05, -1.270837452415888e-05, -9.276966494847250e-04, -7.506094478289337e-03, -7.980126935892362e-04, -1.165919499783623e-03, -1.450009362972579e-03, -8.727711128657181e-03, -1.465789266377065e+00, -4.082535856457122e-01, -1.931160258371017e+00, -1.813092415002606e-05, -1.162304510911768e+00, -1.162304510911768e+00, -1.450585644593285e+06, -1.556657877734206e+00, -1.258679073577209e+01, -8.340229616962446e+00, -7.821525800339279e+05, -4.830358089200114e+00, -1.654767613003629e-01, -6.608310687716329e-02, -2.767069078088866e-02, -1.129242767543116e-01, -9.870320388257010e-02, -9.870320388257010e-02, -1.571623104336966e-01, -9.116866930809866e-04, -3.512770399117641e-03, -1.600484872260522e-02, -7.700025987977198e-03, -1.679125063767338e-02, -3.505752879522353e-03, -1.061117836599466e-01, -1.023329604446963e-01, -3.924891766572964e-02, -4.432757562511271e-02, -4.432757562511257e-02, -1.740829295021180e-02, -1.208855192282453e+00, -1.048791865564727e+00, -6.879860941085865e-03, -3.556163631369872e+00, -1.561002935337583e+00, -1.146759873613698e+00, -1.906058351433907e+00, -5.464914628005929e+00, -1.720393567738610e+00, -6.884293703742165e+00, -6.884293703742172e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_bloc_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_bloc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.553103355137504e-04, 1.553139682816644e-04, 1.553283468305688e-04, 1.552745988728305e-04, 1.553030139351567e-04, 1.553030139351567e-04, -5.306611526724353e-04, -5.304278808121622e-04, -5.241729159643874e-04, -5.266753939383726e-04, -5.264632254956952e-04, -1.091700564338174e-03, -1.977316349178808e-03, -2.966134427069474e-03, -2.353799905695995e-03, -2.641563508651093e-03, -2.574132206400543e-03, -2.574132206400543e-03, -4.820920482594770e-03, -5.363768612612329e-03, -5.518747293747750e-04, -3.976609602215927e-04, -1.378055782134555e-03, -1.378055782134555e-03, 1.718253800038728e-10, 2.358100433679794e-10, 3.091146753270706e-07, 6.985679850646549e-12, 3.586194404105775e-11, 3.586194404105775e-11, 7.880644205507150e-03, 8.011906114098641e-03, 7.888154075342128e-03, 7.827549275532276e-04, 7.946135060567761e-03, 7.946135060567761e-03, -1.123920813889822e-03, -1.103175360280430e-03, -1.132433002676997e-03, -1.121759323032141e-03, -1.104940080954716e-03, -1.880852290575436e-03, -1.239463674607162e-03, 3.042601271318364e-02, -6.542104187501059e-03, -9.155835686267974e-04, 1.614268412028597e-03, 2.203736535011386e-03, -1.039482586459168e-04, -1.304879389289223e-03, -8.335690186733466e-05, 1.174857639847212e-03, -1.749697660516183e-04, -1.749697660516186e-04, -2.553531180824801e-09, 5.185340827674784e-12, 3.111511693429252e-11, -2.983222779093524e-05, -1.609925139437391e-08, 1.877677221704119e-11, 5.362573632778941e-01, 2.106743769281041e-01, 7.759518702218329e-03, 3.636739610273295e-01, 3.171149701961936e-01, 3.171149701961934e-01, 4.689663699940789e-01, -5.834947027957105e-03, 4.453863214734281e-03, 3.928697489940323e-02, 1.630694960112993e-02, 5.127887292443394e-03, 1.557463181935542e-02, -2.128043682102258e-03, -6.035005830594498e-03, -6.340319611859287e-03, -9.203349414808097e-03, -9.203349414808104e-03, -3.727785199889203e-03, 2.603011823174608e-07, 7.951120908119131e-07, -1.107153600830809e-02, -8.938608469360378e-05, -4.508928097734287e-06, 3.166182757616747e-10, 9.609589557429078e-15, 1.898663439915176e-12, -1.898337452471398e-06, 2.166950801920164e-11, 2.166950801923796e-11]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
