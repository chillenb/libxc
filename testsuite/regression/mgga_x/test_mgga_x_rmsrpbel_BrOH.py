
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_rmsrpbel_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmsrpbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.037158675078431e+01, -2.037167094824672e+01, -2.037207977676810e+01, -2.037070394188677e+01, -2.037163083015627e+01, -2.037163083015627e+01, -3.202952759054152e+00, -3.202995711247364e+00, -3.204391682698558e+00, -3.204109544175938e+00, -3.202979920091416e+00, -3.758862099097692e+00, -5.864546349883316e-01, -7.786391484725622e-01, -7.729148568714058e-01, -7.721220855773980e-01, -7.787762269456614e-01, -7.787762269456614e-01, -2.179043762038583e-01, -2.193503770519646e-01, -6.944257216795038e-01, -1.935153565585142e-01, -2.183577282179884e-01, -2.183577282179884e-01, -1.705040511768579e-02, -1.785950602918197e-02, -7.258776986791722e-02, -8.179636081577773e-03, -1.767339198969752e-02, -1.767339198969752e-02, -5.291716312015276e+00, -5.291824880312567e+00, -5.291723421004598e+00, -5.067341095235361e+00, -5.291776831154877e+00, -5.291776831154877e+00, -1.777410291769182e+00, -1.794714218594601e+00, -1.770230962847732e+00, -1.783820498902586e+00, -1.798444968307554e+00, -2.158738491556591e+00, -6.103036130798827e-01, -6.471014289171132e-01, -5.874728497423439e-01, -5.995937497109531e-01, -6.280534353936991e-01, -5.609699140651649e-01, -8.358266210213304e-02, -2.386616957812547e-01, -8.251552566940852e-02, -1.996595162229505e+00, -1.675172237343390e-01, -1.675172237343390e-01, -4.054032964265054e-03, -9.017882246212330e-03, -6.758948629840969e-03, -5.199338388427114e-02, -4.221470085050505e-03, -8.216688940537569e-03, -5.994275659633185e-01, -5.992081715009681e-01, -5.921140005699055e-01, -5.993464364481429e-01, -5.993174926575765e-01, -5.993174926575765e-01, -5.812293276031941e-01, -5.307666636132733e-01, -5.449108863883749e-01, -5.583486599774773e-01, -5.514789604488752e-01, -5.065678894663563e-01, -6.828610559619478e-01, -2.013458407836249e-01, -3.181588296572133e-01, -3.194364694081307e-01, -3.473823904689587e-01, -3.473823904689586e-01, -4.188670919859942e-01, -6.723177794947986e-02, -9.094893785247597e-02, -3.573228661887811e-01, -6.783290334727246e-02, -1.276194121141569e-01, -1.998294029699953e-02, -2.468940298752360e-03, -4.690087237165435e-03, -1.217836124491785e-01, -6.983098223408890e-03, -6.983098223408880e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_rmsrpbel_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmsrpbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.930911529155015e+01, -2.930920976629016e+01, -2.930968138604024e+01, -2.930813532678713e+01, -2.930916466449510e+01, -2.930916466449510e+01, -4.532558108495396e+00, -4.532444009463982e+00, -4.529089737189872e+00, -4.530769887002550e+00, -4.532548013608428e+00, -4.275023666432853e+00, -8.221531806740530e-01, -7.734914139706588e-01, -7.456293228798816e-01, -7.545920132144642e-01, -7.741995218168825e-01, -7.741995218168825e-01, -2.095902765424968e-01, -2.130049854753552e-01, -9.496981010217703e-01, -1.711985578417749e-01, -2.105996995183824e-01, -2.105996995183824e-01, -2.273387349024772e-02, -2.381267470557596e-02, -9.670151107611069e-02, -1.090618144210370e-02, -2.356452265293002e-02, -2.356452265293002e-02, -6.770502305102264e+00, -6.772747424603716e+00, -6.770744590681140e+00, -7.106492485624531e+00, -6.771636682868831e+00, -6.771636682868831e+00, -2.568071112834104e+00, -2.588952829098323e+00, -2.558742154913113e+00, -2.576159646988139e+00, -2.592862196178240e+00, -2.397385515765102e+00, -7.311268595611133e-01, -8.125264095217806e-01, -6.848103300909750e-01, -7.285965403720691e-01, -7.656287796227355e-01, -7.770636004893392e-01, -1.115658788927521e-01, -2.093197592972784e-01, -1.101554287101350e-01, -2.438007416851428e+00, -1.515813632173074e-01, -1.515813632173074e-01, -5.405377352335055e-03, -1.202384299494977e-02, -9.011931506454626e-03, -6.933638411794847e-02, -5.628626863295357e-03, -1.095558525405009e-02, -7.911380863729076e-01, -7.830296978662131e-01, -7.969023555152295e-01, -7.881733818789266e-01, -7.870486041092593e-01, -7.870486041092593e-01, -7.643856780173151e-01, -6.312808615885974e-01, -6.700993442502234e-01, -7.062977664728821e-01, -6.878186470783763e-01, -7.295070246310728e-01, -8.466973662599238e-01, -2.770436762055194e-01, -3.201880652080200e-01, -4.611207436611011e-01, -3.706677496864242e-01, -3.706677496864242e-01, -5.859707463024342e-01, -8.962867662625026e-02, -1.201254890987452e-01, -4.082728933516988e-01, -9.051741850041878e-02, -1.409824653745224e-01, -2.664392039599937e-02, -3.291920398336480e-03, -6.253449649553913e-03, -1.346715481799177e-01, -9.310797631211854e-03, -9.310797631211841e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rmsrpbel_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmsrpbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.257572744428927e-08, -1.257572765758633e-08, -1.257562706298953e-08, -1.257563679937406e-08, -1.257572824457512e-08, -1.257572824457512e-08, -9.554277895304919e-06, -9.552845308644636e-06, -9.507306765616802e-06, -9.522145087231323e-06, -9.553698675510631e-06, -5.194894516741081e-06, -5.954658133322676e-03, -3.287953095630824e-03, -3.494778488126687e-03, -3.460887167096351e-03, -3.283000778933358e-03, -3.283000778933358e-03, -5.549395657329252e-01, -5.349930530948425e-01, -2.658991660901703e-03, -8.819485908517809e-01, -5.487574231253856e-01, -5.487574231253856e-01, -2.556785692850895e-39, -1.101063190449632e-35, -2.840291209984849e-02, -3.423846026446236e-313, -1.317629082208023e-35, -1.317629082208005e-35, -1.147429937281751e-06, -1.146893002517134e-06, -1.147374732884445e-06, -3.490746632901188e-06, -1.147155213358756e-06, -1.147155213358756e-06, -9.922683699118185e-05, -9.696850504396910e-05, -1.000191751210342e-04, -9.840351939412882e-05, -9.648575314073379e-05, -4.909682430464697e-05, -7.028035817438712e-03, -5.251726252322549e-03, -8.457352698346892e-03, -7.415334636291055e-03, -6.136022883117132e-03, -1.120080962335231e-02, -1.170996643667508e+01, -4.216813798588750e-01, -1.233036657905069e+01, -5.995646495348295e-05, -1.470013617328877e+00, -1.470013617328877e+00, -2.112134957413403e+06, -5.022073095625976e-228, -1.094662675894196e-203, -7.808687068633935e+01, -1.796453186552788e+06, -9.586609397956233e-248, -6.703449974467574e-03, -6.797615824577258e-03, -1.300260052386279e-02, -6.737698310784896e-03, -6.750698205350286e-03, -6.750698205350286e-03, -7.617396342593916e-03, -1.239243335363940e-02, -1.071431944942319e-02, -9.388716595480616e-03, -1.003831604967114e-02, -2.964836130992467e-02, -4.300980250921963e-03, -3.867620517564935e-01, -1.162885004203034e-01, -9.611470246897812e-02, -7.665182920445428e-02, -7.665182920445425e-02, -3.148106204669342e-02, -5.738067954933718e-03, -1.829858358874837e-01, -6.327083725763047e-02, -2.698022137054265e+01, -1.836493993523726e+00, -8.548954273240598e-47, 0.000000000000000e+00, 0.000000000000000e+00, -2.199946101246097e+00, -5.820429773564134e-290, -5.820429773550932e-290])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rmsrpbel_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmsrpbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.258808237467951e-03, 1.258825653084221e-03, 1.258899156573629e-03, 1.258615949704216e-03, 1.258817429945534e-03, 1.258817429945534e-03, 1.972092045253884e-03, 1.971248137095773e-03, 1.945045078306482e-03, 1.955207309433393e-03, 1.971848564153496e-03, 1.934609070077058e-18, 3.759071328734516e-03, -1.066446307560871e-17, 1.641072548385743e-17, -8.456377437450134e-17, -5.609368828248132e-17, -5.609368828248132e-17, 9.998376852836131e-17, 1.110958512046797e-16, 1.035186414051357e-03, -4.501337907717122e-16, 5.469005318679950e-17, 5.469005318679950e-17, 0.000000000000000e+00, 0.000000000000000e+00, -3.164172924811895e-18, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.408627461695446e-18, 1.720447063451362e-19, -9.579559078008120e-20, 5.075957891082438e-03, 5.146818396727894e-20, 5.146818396727894e-20, 3.805856704328816e-03, 3.863709523735391e-03, 3.764673548171311e-03, 3.831329643229693e-03, 3.871867106063789e-03, 7.534461508075064e-18, 1.534701492172962e-17, -4.642800651836471e-18, -2.626418595618969e-17, 1.161119395418697e-17, 6.497039473206560e-18, 1.382687305042279e-02, 7.327003728577247e-05, 9.644502182361802e-17, 8.743072667599232e-05, 2.298074392197766e-18, 4.534392730590665e-16, 4.534392730590665e-16, 5.730146135828730e-11, 0.000000000000000e+00, 0.000000000000000e+00, 7.286434717785600e-06, 7.226760412362265e-11, 0.000000000000000e+00, 3.856241439283274e-18, -1.101681590342125e-18, 2.063256392931241e-02, -2.906853552599236e-18, -3.831509651878603e-20, -3.831509651878603e-20, 3.227348761982859e-18, -1.542401684365988e-17, 1.658455934185797e-17, 1.230043596071143e-17, -1.128087664723945e-17, 4.455422087464912e-02, -6.430389370387061e-18, 5.033124493829081e-03, -8.761750506837769e-17, 2.154442315718607e-02, -2.323838784946663e-17, -5.026780961095934e-17, 1.294814182571751e-02, -7.933490714651975e-20, -2.790463758374691e-18, 1.092398743566936e-17, 5.760546062663144e-05, -1.763376833059730e-16, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.641006069915923e-16, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
