
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_rmsrpbel_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmsrpbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.187273017893306e+01, -2.187276833729598e+01, -2.187300411091510e+01, -2.187237832159660e+01, -2.187274974974741e+01, -2.187274974974741e+01, -3.380513421740939e+00, -3.380515037365522e+00, -3.380789752925017e+00, -3.382146307005554e+00, -3.380522366841960e+00, -3.380522366841960e+00, -6.537954159927453e-01, -6.536206171606247e-01, -6.520623453135058e-01, -6.597308772158232e-01, -6.537332092300024e-01, -6.537332092300024e-01, -2.093145101385057e-01, -2.095884996759115e-01, -7.447668981027121e-01, -1.732693537049244e-01, -2.092725523708897e-01, -2.092725523708897e-01, -1.705040511768579e-02, -1.785950602918197e-02, -7.257761174715353e-02, -8.179636081577773e-03, -1.767339198969752e-02, -1.767339198969752e-02, -5.291010796623191e+00, -5.291127547641137e+00, -5.291027773556970e+00, -5.291118459196227e+00, -5.291063362289895e+00, -5.291063362289895e+00, -2.109324308551765e+00, -2.125413226493713e+00, -2.111456654020353e+00, -2.123878362457817e+00, -2.117798271312851e+00, -2.117798271312851e+00, -5.813829064689539e-01, -6.173443870923212e-01, -5.389837411575505e-01, -5.504544060611541e-01, -6.075056121285154e-01, -6.075056121285154e-01, -1.488705162169612e-01, -2.302359671790322e-01, -1.456620847075863e-01, -1.822208019668818e+00, -1.593930160275921e-01, -1.593930160275921e-01, -7.890788560303988e-03, -9.017882246212330e-03, -6.758948629840969e-03, -1.001317486086899e-01, -8.216688940537569e-03, -8.216688940537569e-03, -5.976569407701130e-01, -5.974986824969956e-01, -5.975559390009646e-01, -5.975977245221988e-01, -5.975761806024501e-01, -5.975761806024501e-01, -5.773480771039369e-01, -5.287581048972564e-01, -5.422278437352280e-01, -5.551054594092761e-01, -5.483224860204723e-01, -5.483224860204723e-01, -6.397044631307000e-01, -2.761225106064228e-01, -3.059953974373795e-01, -3.557145465794210e-01, -3.303568932871859e-01, -3.303568932871858e-01, -4.690808337810464e-01, -6.723092270262192e-02, -9.079218070979378e-02, -3.298692854192481e-01, -1.242270361653937e-01, -1.242270361653937e-01, -1.998294029699953e-02, -2.468940298752360e-03, -4.690087237165435e-03, -1.183380647989742e-01, -6.983098223408890e-03, -6.983098223408880e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_rmsrpbel_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmsrpbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.747392567565888e+01, -2.747401888240427e+01, -2.747450768760236e+01, -2.747298466997223e+01, -2.747397415882003e+01, -2.747397415882003e+01, -4.179676802226423e+00, -4.179863607203106e+00, -4.185748640475190e+00, -4.184837198309707e+00, -4.179741896263432e+00, -4.179741896263432e+00, -7.787950561154121e-01, -7.769748997210840e-01, -7.287632577363918e-01, -7.403321191051928e-01, -7.781424831276393e-01, -7.781424831276393e-01, -1.571812207923466e-01, -1.638782717610570e-01, -8.995868704315614e-01, -1.290403694931396e-01, -1.592625245780830e-01, -1.592625245780830e-01, -2.273387349024772e-02, -2.381267470557596e-02, -9.648563339598383e-02, -1.090618144210370e-02, -2.356452265293002e-02, -2.356452265293002e-02, -6.769848075321338e+00, -6.772112882408369e+00, -6.770100563003077e+00, -6.771860295884387e+00, -6.770981684414219e+00, -6.770981684414219e+00, -2.177560498143829e+00, -2.227914498148901e+00, -2.173643597903825e+00, -2.216077405739185e+00, -2.217820044671202e+00, -2.217820044671202e+00, -7.301757230770275e-01, -8.440082842350816e-01, -6.851660915924973e-01, -7.555322301471424e-01, -7.645049351908128e-01, -7.645049351908128e-01, -1.339717657152608e-01, -1.335542447498372e-01, -1.280114528198612e-01, -2.536353475456803e+00, -1.190961026568137e-01, -1.190961026568137e-01, -1.052105141373865e-02, -1.202384299494977e-02, -9.011931506454626e-03, -1.226507243355516e-01, -1.095558525405009e-02, -1.095558525405009e-02, -7.932073310711599e-01, -7.841718021048831e-01, -7.873981140140910e-01, -7.899002365353565e-01, -7.886476295239527e-01, -7.886476295239527e-01, -7.695480905380663e-01, -6.231453438155409e-01, -6.646241263097659e-01, -7.045854523550188e-01, -6.839901167103842e-01, -6.839901167103842e-01, -8.861412366039213e-01, -2.042141891656166e-01, -2.580381774446129e-01, -4.056821693611081e-01, -3.269004801979442e-01, -3.269004801979442e-01, -5.316106592840324e-01, -8.960545052640609e-02, -1.178890474658601e-01, -4.003932115536629e-01, -1.214587453405748e-01, -1.214587453405747e-01, -2.664392039599937e-02, -3.291920398336480e-03, -6.253449649553913e-03, -1.152329193847691e-01, -9.310797631211854e-03, -9.310797631211841e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rmsrpbel_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmsrpbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.838619279390091e-09, -4.838540586797340e-09, -4.837716967403924e-09, -4.838978173396979e-09, -4.838582202680372e-09, -4.838582202680372e-09, -8.311144150435326e-06, -8.316646285175092e-06, -8.489793306871457e-06, -8.511797518936955e-06, -8.311936258828513e-06, -8.311936258828513e-06, -6.387503309499830e-03, -6.400450070713777e-03, -6.751019094373456e-03, -6.796789018064487e-03, -6.392563791377388e-03, -6.392563791377388e-03, -1.777927896195479e+00, -1.695580183233306e+00, -2.536878025363371e-03, -1.643199747201891e+00, -1.752071316279380e+00, -1.752071316279380e+00, -2.272865903568947e-38, -1.334757344670027e-34, -1.136120010376904e-01, -1.459507758373005e-215, -1.172384398714169e-34, -1.172384398714169e-34, -1.164299055025158e-06, -1.163552911169299e-06, -1.164007724408391e-06, -1.163440537248308e-06, -1.164205730090573e-06, -1.164205730090573e-06, -1.257958026534522e-04, -1.122322728810048e-04, -1.211019690878796e-04, -1.097382152106008e-04, -1.223114107735435e-04, -1.223114107735435e-04, -2.227238625551007e-02, -1.637402975040320e-02, -2.271988012102375e-02, -2.124436489669881e-02, -1.765212667574899e-02, -1.765212667574899e-02, -2.156637814574958e+00, -1.285689150584804e+00, -2.510528482703470e+00, -1.626789207802092e-04, -2.828446720377173e+00, -2.828446720377173e+00, -4.439444970293930e-225, -5.163539900516647e-171, -9.841302733631518e-180, -1.686659469723629e+00, -2.794943842697652e-169, -2.794943842697334e-169, -8.598608551725947e-03, -8.680626257772122e-03, -8.651871837357611e-03, -8.629030612720539e-03, -8.641413483575906e-03, -8.641413483575906e-03, -1.201826724939737e-02, -1.732369625167101e-02, -1.586160590629058e-02, -1.441758238017318e-02, -1.543158183526459e-02, -1.543158183526460e-02, -1.377232662821197e-02, -5.459239258056687e-01, -3.713044145370920e-01, -1.319880003871552e-01, -2.457254119249479e-01, -2.457254119249477e-01, -5.589464131867229e-02, -1.636145568363235e-02, -6.084817102808756e-01, -1.775266153147700e-01, -3.479488512645390e+00, -3.479488512645392e+00, -8.784626992507400e-32, 0.000000000000000e+00, 0.000000000000000e+00, -4.251866114222685e+00, -1.697405212276905e-194, -1.697405212274182e-194]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rmsrpbel_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmsrpbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rmsrpbel_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmsrpbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.297269145226457e-04, 1.297210301119924e-04, 1.296279916710286e-04, 1.297200045285907e-04, 1.297244424676830e-04, 1.297244424676830e-04, 1.442584169732103e-03, 1.446287793127283e-03, 1.563743249075584e-03, 1.581343504339301e-03, 1.443207805955112e-03, 1.443207805955112e-03, 8.867961088074467e-03, 8.837312835147661e-03, 8.208236716728346e-03, 9.389101881538870e-03, 8.858457424878965e-03, 8.858457424878965e-03, 1.123970933904474e-01, 1.103495483999703e-01, 1.648556247358192e-03, 4.358710596655927e-03, 1.116366935529869e-01, 1.116366935529869e-01, 0.000000000000000e+00, 0.000000000000000e+00, 4.335677512921174e-07, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 3.721046117101102e-05, 3.676863243151820e-05, 3.669171600663992e-05, 3.637690784011635e-05, 3.762076325654407e-05, 3.762076325654407e-05, 8.726163794858818e-03, 7.451498430286965e-03, 8.073441858783966e-03, 6.990482458812649e-03, 8.687017006521427e-03, 8.687017006521427e-03, 4.552325623055824e-02, 4.268164617942022e-02, 3.452816889013399e-02, 3.853808820893816e-02, 3.883793072231296e-02, 3.883793072231296e-02, 1.753581377354368e-03, 7.983101516807256e-02, 2.254296933079998e-03, 1.052194641475967e-02, 1.742362096423483e-02, 1.742362096423483e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 6.762902264255804e-06, 0.000000000000000e+00, 0.000000000000000e+00, 6.358164547880708e-03, 6.216963987505625e-03, 6.269964696026740e-03, 6.308380360460823e-03, 6.292346230997496e-03, 6.292346230997494e-03, 1.336421283919087e-02, 9.786624923118058e-03, 1.163644596956822e-02, 1.276735762577983e-02, 1.291136678423146e-02, 1.291136678423149e-02, 4.137721978084272e-02, 6.465514737709180e-02, 8.025703545658376e-02, 5.210894754324009e-02, 7.647406598709507e-02, 7.647406598709494e-02, 5.404718563622230e-02, 1.411989869005888e-07, 7.187580206958401e-06, 6.087651220928792e-02, 1.678351976015601e-03, 1.678351976015587e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.471554786115981e-03, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
