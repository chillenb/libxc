
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_revscan_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.175026809039901e+01, -2.175039812852076e+01, -2.175096702383456e+01, -2.174903703585031e+01, -2.175004960683947e+01, -2.175004960683947e+01, -3.071575426545311e+00, -3.071779285765633e+00, -3.077224287457097e+00, -3.075298463317083e+00, -3.075185182399180e+00, -3.766325441934736e+00, -5.174577943228980e-01, -7.194181627176343e-01, -6.985863068674087e-01, -7.052126301367840e-01, -7.037928610605996e-01, -7.037928610605996e-01, -1.844445176345545e-01, -1.874540182037779e-01, -5.786212537744190e-01, -1.361348958646294e-01, -1.550772367155599e-01, -1.550772367155599e-01, -3.266592248877455e-03, -3.512129854116967e-03, -2.983887182016578e-02, -1.499012184282067e-03, -2.117620244635281e-03, -2.117620244635281e-03, -5.669020238107875e+00, -5.670113867240779e+00, -5.669075127231132e+00, -5.455855683700545e+00, -5.669572219297150e+00, -5.669572219297150e+00, -1.650016864191508e+00, -1.676039491910472e+00, -1.630844779961945e+00, -1.653424634390572e+00, -1.674081843999547e+00, -2.130338031114095e+00, -6.372884967710133e-01, -6.936736504139552e-01, -5.885323787494607e-01, -6.130235478238717e-01, -6.478475773775266e-01, -5.621610707058278e-01, -6.502004899387072e-02, -1.823822910979960e-01, -6.009064209596950e-02, -2.086482294341687e+00, -1.096591404144310e-01, -1.096591404144310e-01, -1.898898406684475e-03, -1.435447759839328e-03, -1.209202939332944e-03, -4.028245114748985e-02, -2.216289336686749e-03, -1.427901351070142e-03, -6.423222446650778e-01, -6.385457484253162e-01, -6.306935981512890e-01, -6.409770585945976e-01, -6.404297020408238e-01, -6.404297020408238e-01, -6.249027054028327e-01, -5.342430517468889e-01, -5.604301062593527e-01, -5.862388968371893e-01, -5.730819819835090e-01, -5.242999250238706e-01, -7.269126642340168e-01, -1.624195373080579e-01, -2.819955461907219e-01, -2.919148628155854e-01, -3.257144272995348e-01, -3.257144272995348e-01, -4.049738661422935e-01, -2.831373003341612e-02, -4.085366351593658e-02, -3.631370888591166e-01, -5.144861287297559e-02, -7.101296358457464e-02, -4.869645795054259e-03, -2.266195359241595e-04, -7.258370710918937e-04, -6.631515269511655e-02, -1.326719251986739e-03, -1.326719251986591e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_revscan_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.273076769549374e+01, -3.273074111448771e+01, -3.273069860149831e+01, -3.273108487373180e+01, -3.273087170543999e+01, -3.273087170543999e+01, -5.350407689007307e+00, -5.350914889432770e+00, -5.364031832881175e+00, -5.359299024994826e+00, -5.359255174253283e+00, -4.744546058741488e+00, -7.938409234715689e-01, -8.534341124758267e-01, -8.126678133985901e-01, -8.281822798781281e-01, -8.247836040249003e-01, -8.247836040249003e-01, -2.039427585220571e-01, -2.095196478187552e-01, -8.202839917114239e-01, -9.990600961988716e-02, -1.462071553264509e-01, -1.462071553264511e-01, 8.160712364467078e-01, 7.750795736136624e-01, 2.628345509497264e-01, 1.318079460478316e+00, 9.975457830985074e-01, 9.975457830985074e-01, -7.428128496137030e+00, -7.430408650129656e+00, -7.428249186643083e+00, -7.745872317020219e+00, -7.429276198212683e+00, -7.429276198212683e+00, -2.746372979329854e+00, -2.815550029057111e+00, -2.697156284645492e+00, -2.754805922379099e+00, -2.810707012518845e+00, -2.658176715484136e+00, -8.183266637805614e-01, -9.043479295419491e-01, -7.459923137479743e-01, -7.875247670888821e-01, -8.344453756794049e-01, -9.249510984684856e-01, -8.754059902029442e-02, -1.745098408597728e-01, -8.079850699587258e-02, -2.692173110298207e+00, -5.872898391119605e-02, -5.872898391119635e-02, -2.531886505421071e-03, 1.405039034885877e+00, 7.109387910556452e-01, -5.393674786084204e-02, -2.955121979753458e-03, 9.341053834290677e-01, -8.517083745293138e-01, -8.426986720905142e-01, -8.581507672059904e-01, -8.484315905003564e-01, -8.471182765301070e-01, -8.471182765301070e-01, -8.280395215919711e-01, -6.810494711737013e-01, -7.231552519186495e-01, -7.647212598110229e-01, -7.434872332792877e-01, -8.281690067846275e-01, -9.440632213635807e-01, -2.308406499452589e-01, -3.289106716970976e-01, -4.838747209565791e-01, -3.961462115711502e-01, -3.961462115711502e-01, -7.063563784447803e-01, 2.740586183082957e-01, 1.986884243515370e-01, -4.589770925249251e-01, -6.915487916002228e-02, 3.301996992305532e-02, 8.810336239004027e-01, 2.810830620164693e+00, 1.205446662625644e+00, 4.211900608585553e-02, 8.490444394452874e-01, 8.490444394476188e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revscan_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.628463273970643e-08, -1.628399326744201e-08, -1.628127878469898e-08, -1.629076063263385e-08, -1.628577392503109e-08, -1.628577392503109e-08, -2.099974162722004e-05, -2.100519573341482e-05, -2.114388575418447e-05, -2.108105987847808e-05, -2.109661926869065e-05, -6.135941838728180e-06, -1.051208061531517e-02, -4.129183633870504e-03, -4.552067719021222e-03, -4.424086462497407e-03, -4.450475430665730e-03, -4.450475430665730e-03, -8.999344339738591e-01, -8.498847243434182e-01, -5.789352328099619e-03, -2.601854506043449e+00, -1.662405173409881e+00, -1.662405173409877e+00, -3.209602718352358e+05, -2.671134138497277e+05, -4.398433202239748e+02, -2.293449635401377e+06, -1.033983205717444e+06, -1.033983205717444e+06, -1.517112762309073e-06, -1.517632560981245e-06, -1.517151245746669e-06, -3.405530063405470e-06, -1.517368483884008e-06, -1.517368483884008e-06, -1.610792207691764e-04, -1.642847313444609e-04, -1.591048690270566e-04, -1.612106365711559e-04, -1.642511753451617e-04, -5.834413332254629e-05, -8.125686686043151e-03, -6.457238354298621e-03, -1.051617646798235e-02, -9.515220654122036e-03, -7.749391478779337e-03, -3.147728638360807e-02, -3.217880925246654e+01, -8.740085597583488e-01, -4.400172310489322e+01, -7.284605999893539e-05, -5.846893092391293e+00, -5.846893092391281e+00, -4.346445302291550e+07, -2.459801658387109e+06, -7.925963841067637e+06, -2.162165150923694e+02, -2.342321070986307e+07, -3.688820790531861e+06, -1.041570455377374e-02, -1.014205408313610e-02, -1.465816431201392e-02, -1.031037343364933e-02, -1.026955151063217e-02, -1.026955151063217e-02, -1.154273037176996e-02, -1.585849407211522e-02, -1.399984426434574e-02, -1.272242486073151e-02, -1.331056914554626e-02, -5.218535825406173e-02, -5.185310553016953e-03, -9.391266142710075e-01, -1.718710663138596e-01, -1.583126775456896e-01, -1.015416910260918e-01, -1.015416910260920e-01, -7.545385207530429e-02, -5.199058442937907e+02, -1.585018429875826e+02, -7.179756803987782e-02, -8.183288541191789e+01, -2.727309305299911e+01, -8.543700589031364e+04, -2.846042378707821e+08, -2.236817584461340e+07, -3.492592910975021e+01, -5.052693701580536e+06, -5.052693701594397e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revscan_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.187257306352111e-03, 2.187195658888180e-03, 2.186942078594882e-03, 2.187855206780337e-03, 2.187373850700120e-03, 2.187373850700120e-03, 9.435190964195348e-03, 9.439391836691950e-03, 9.547771390659671e-03, 9.503637197106394e-03, 9.509392790511748e-03, 4.459458571923135e-03, 9.916270645097040e-03, 2.148263504276840e-02, 2.180757105855091e-02, 2.174544996034375e-02, 2.175636918073658e-02, 2.175636918073658e-02, 8.034603226362189e-02, 7.945689743517323e-02, 1.979506890905730e-03, 9.941274167353679e-02, 9.088093490781733e-02, 9.088093490781719e-02, 1.117173590115085e+00, 1.084221307457601e+00, 3.026636425621305e-01, 1.537021060168660e+00, 1.375133491552922e+00, 1.375133491552922e+00, 3.556870473014530e-03, 3.559121997659763e-03, 3.557005039173417e-03, 6.839941005367931e-03, 3.557995450895509e-03, 3.557995450895509e-03, 1.052820946788768e-02, 1.149879910525360e-02, 9.853034125632381e-03, 1.063008501953364e-02, 1.144314354233375e-02, 7.721044243013652e-03, 2.808816974928986e-02, 2.806371530958933e-02, 2.902043305885016e-02, 2.925855252228360e-02, 2.802507275020867e-02, 8.172880315262135e-02, 4.625074901164358e-04, 7.753961638173584e-02, 3.759426360289840e-04, 8.778026262967900e-03, 1.199981613989662e-01, 1.199981613989660e-01, 1.275637885053406e-08, 1.540103483762790e+00, 2.218904066741721e+00, 1.411273951452551e-04, 8.040864926295136e-08, 1.805456182324789e+00, 3.428507377495834e-02, 3.330243137873086e-02, 4.451639399028401e-02, 3.391936622229693e-02, 3.377471394390431e-02, 3.377471394390431e-02, 3.506519575369257e-02, 3.256222360479842e-02, 3.268898578016201e-02, 3.333416656981008e-02, 3.293626948708298e-02, 1.033112683616698e-01, 2.613332897404753e-02, 7.638795570655559e-03, 5.411945280279096e-02, 5.662910386294383e-02, 4.860875102268610e-02, 4.860875102268613e-02, 7.709272163348585e-02, 3.134932155851254e-01, 2.434126181731563e-01, 4.665277747001707e-02, 4.045960030743401e-04, 1.692322113138982e-01, 8.361422310722119e-01, 3.402836762091747e+00, 2.473658437045901e+00, 1.791494281784002e-01, 1.959253532780143e+00, 1.959253532785510e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
