
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_revscan_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.318952965865135e+01, -2.318959831466164e+01, -2.318995051214925e+01, -2.318892993179240e+01, -2.318945798770607e+01, -2.318945798770607e+01, -3.358238650797402e+00, -3.358378856416021e+00, -3.362488392760468e+00, -3.363793756143928e+00, -3.362171999765581e+00, -3.362171999765581e+00, -5.885295332481054e-01, -5.878235056562077e-01, -5.721517395592511e-01, -5.847244082732861e-01, -5.809932276016975e-01, -5.809932276016975e-01, -1.802758568461081e-01, -1.823490088892460e-01, -6.438745304728183e-01, -1.129063273143325e-01, -1.383446221925405e-01, -1.383446221925405e-01, -2.559478024519121e-03, -2.751806846241574e-03, -2.368920689083124e-02, -1.195277493687267e-03, -1.673116553802929e-03, -1.673116553802929e-03, -5.668106158517381e+00, -5.669210180403487e+00, -5.668180092498607e+00, -5.669153828426819e+00, -5.668653878325218e+00, -5.668653878325218e+00, -2.081599762982151e+00, -2.103905751798898e+00, -2.074506990061435e+00, -2.094364488811705e+00, -2.097532441787431e+00, -2.097532441787431e+00, -6.178263960092313e-01, -6.712186332003279e-01, -5.438343686670097e-01, -5.556771255942872e-01, -6.300531977608785e-01, -6.300531977608785e-01, -7.330489931756481e-02, -1.729364388674975e-01, -6.698739610098649e-02, -1.914728398282499e+00, -9.336517990349888e-02, -9.336517990349892e-02, -8.567058020284836e-04, -1.176520971377808e-03, -9.666116380716612e-04, -4.259255388917369e-02, -1.162259122509190e-03, -1.162259122509190e-03, -6.401047416250526e-01, -6.364920232543098e-01, -6.377729721472760e-01, -6.388197539002359e-01, -6.382955494913299e-01, -6.382955494913299e-01, -6.204365471813249e-01, -5.322898141839544e-01, -5.578243667180717e-01, -5.829191998671913e-01, -5.699558592031133e-01, -5.699558592031132e-01, -6.946452744163325e-01, -2.288944059006400e-01, -2.730582292078861e-01, -3.517176200943258e-01, -3.132907994163617e-01, -3.132907994163617e-01, -4.785082737614113e-01, -2.246413424817870e-02, -3.252985864656641e-02, -3.461115577423552e-01, -5.740444169180772e-02, -5.740444169180772e-02, -3.973056972526647e-03, -2.169330399687061e-04, -5.732739883142926e-04, -5.425800152382591e-02, -1.067821677345194e-03, -1.067821677345194e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_revscan_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.027457717643016e+01, -3.027468214447692e+01, -3.027516075037447e+01, -3.027359983466319e+01, -3.027441601115683e+01, -3.027441601115683e+01, -4.761373740479995e+00, -4.762148179309473e+00, -4.782610962807098e+00, -4.783036518578737e+00, -4.779202474993367e+00, -4.779202474993367e+00, -8.338096458847565e-01, -8.320385883467858e-01, -7.966291777913177e-01, -8.236884587686301e-01, -8.159574497686755e-01, -8.159574497686755e-01, -1.789671733431113e-01, -1.812858509303533e-01, -8.336931586609110e-01, -1.398892381518563e-01, -1.186137584122402e-01, -1.186137584122401e-01, -3.646166288285744e-03, -4.591496381563438e-03, -3.712288400605366e-02, -2.201577700485673e-03, -3.041744917097475e-03, -3.041744917097476e-03, -7.428477423037539e+00, -7.430758891113395e+00, -7.428591050779956e+00, -7.430604714003326e+00, -7.429629489560165e+00, -7.429629489560165e+00, -2.583974297150105e+00, -2.620915506583686e+00, -2.566831196191080e+00, -2.600634594745913e+00, -2.613198724048301e+00, -2.613198724048301e+00, -8.218298289346769e-01, -9.272721877606940e-01, -7.627243314367761e-01, -8.558016192911219e-01, -8.390219240052018e-01, -8.390219240052018e-01, -9.972791322041762e-02, -7.774270113985500e-02, -9.374757939518050e-02, -2.924453118963664e+00, -7.110849208865311e-02, -7.110849208865280e-02, -1.589568379991478e-03, -2.165964605012437e-03, -1.765291508691612e-03, -6.338256990710157e-02, -2.123481924764059e-03, -2.123481924764059e-03, -8.542702647129449e-01, -8.444921832803916e-01, -8.478588404986402e-01, -8.506960259378965e-01, -8.492700405602799e-01, -8.492700405602799e-01, -8.336073783089917e-01, -6.795586674944666e-01, -7.225766111118082e-01, -7.657885941076042e-01, -7.436351119560002e-01, -7.436351119560000e-01, -9.788720300327255e-01, -2.268661675282218e-01, -2.949113347977761e-01, -4.533024817063304e-01, -3.716722190863638e-01, -3.716722190863637e-01, -6.114110034925589e-01, -3.213070240906906e-02, -4.980581123418648e-02, -4.556256335329898e-01, -7.678334886504694e-02, -7.678334886504697e-02, -7.028256862256502e-03, -4.113594573736118e-04, -1.068806269403944e-03, -5.601700655405351e-02, -1.952378529928637e-03, -1.952378529928636e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revscan_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.416030486163560e-09, -5.415979579073764e-09, -5.415544164172230e-09, -5.416296140231051e-09, -5.415931985989069e-09, -5.415931985989069e-09, -1.753359216674581e-05, -1.755977725019009e-05, -1.825246893371352e-05, -1.831835617587302e-05, -1.817668251021546e-05, -1.817668251021546e-05, -5.414139301842806e-03, -5.373956571614717e-03, -4.577687204258152e-03, -5.590879839141439e-03, -5.265925553378303e-03, -5.265925553378303e-03, -1.515503566771852e+00, -1.557493851976235e+00, -1.529726109196945e-03, -1.080215792957234e+00, -3.078727376170601e+00, -3.078727376170600e+00, -2.052273367683735e+02, 4.415190156271620e+01, 1.953201566061360e+00, 4.431963990670146e+02, 3.331570250553061e+02, 3.331570250553065e+02, -1.524308644139610e-06, -1.524747978340740e-06, -1.524197218464406e-06, -1.524590484316726e-06, -1.524598632033593e-06, -1.524598632033593e-06, -8.840644231730586e-05, -8.085879770448628e-05, -8.582801350362605e-05, -7.904854687383024e-05, -8.524160856545947e-05, -8.524160856545947e-05, -1.610734198285597e-02, -1.335277899988111e-02, -3.574312792064816e-02, -3.837865512752570e-02, -1.457382418671776e-02, -1.457382418671776e-02, -7.466421402652534e-01, -2.245581792915189e+00, -5.410922618150034e-01, -2.771744831742282e-04, -5.348918275177382e+00, -5.348918275177416e+00, 8.164629472163460e+02, 5.064865500179131e+02, 2.260762344729178e+03, 1.825386829643958e-01, 1.064017729730292e+03, 1.064017729730291e+03, -1.146477406465351e-02, -1.111165479008983e-02, -1.122943152214922e-02, -1.133375653163542e-02, -1.128144394090707e-02, -1.128144394090707e-02, -1.396890974316573e-02, -1.754186360713513e-02, -1.592325504079082e-02, -1.488978973626214e-02, -1.547929973417228e-02, -1.547929973417228e-02, -1.296877144692177e-02, -5.361196215465325e-01, -3.398334025765506e-01, -1.778322289515229e-01, -2.222604466551585e-01, -2.222604466551585e-01, -3.836737653133615e-02, -3.913252831465690e+00, 7.681634196505298e-01, -1.802882636984104e-01, -1.950245020515351e+00, -1.950245020515346e+00, 8.156957666659562e+01, 1.201112238784413e+04, 2.245355360657335e+03, -7.379196484430139e+00, 1.389625999189113e+03, 1.389625999189117e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revscan_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revscan_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [8.761968678711546e-04, 8.761954859611893e-04, 8.761638788107544e-04, 8.761836854781125e-04, 8.761769474162291e-04, 8.761769474162291e-04, 1.036983673512444e-02, 1.038763475723990e-02, 1.086164768797846e-02, 1.092458838283589e-02, 1.081549671209117e-02, 1.081549671209117e-02, 1.917427020999610e-02, 1.900762031758848e-02, 1.610391256778730e-02, 2.145589994586860e-02, 1.967305567507629e-02, 1.967305567507629e-02, 1.306925600494858e-01, 1.399465020226305e-01, 2.336354082862807e-03, 4.291800213163548e-02, 1.617170630150749e-01, 1.617170630150749e-01, 1.323083511622657e-03, 4.858059249361087e-04, 1.330987073851325e-03, 8.624701129591507e-07, 6.975175869554105e-06, 6.975175869553871e-06, 3.570048717646413e-03, 3.572150512898204e-03, 3.569908654008736e-03, 3.571774089259347e-03, 3.571235221849978e-03, 3.571235221849978e-03, 1.101277836097790e-02, 1.034591168327195e-02, 1.057739626117695e-02, 9.981085064791700e-03, 1.083235962674956e-02, 1.083235962674956e-02, 5.041215271097535e-02, 5.070851140529319e-02, 8.535815741208110e-02, 9.537022802199867e-02, 4.782350188255816e-02, 4.782350188255816e-02, 1.318511128141460e-02, 1.906261871217187e-01, 9.343207955491954e-03, 2.713835201215650e-02, 1.092027217621271e-01, 1.092027217621278e-01, 2.394705594086213e-08, 1.632895198674623e-07, 2.154317382043328e-06, 3.387755897221362e-03, 5.280343196058137e-07, 5.280343196058183e-07, 3.686027151141996e-02, 3.569921437197680e-02, 3.609159210564702e-02, 3.643022490585045e-02, 3.626053508715052e-02, 3.626053508715052e-02, 4.056967180632934e-02, 3.550085781571989e-02, 3.637790336735961e-02, 3.780131547281682e-02, 3.725367838769782e-02, 3.725367838769782e-02, 5.584877174753709e-02, 9.409456475772186e-02, 1.020305066064016e-01, 1.173594370394914e-01, 9.998645580711274e-02, 9.998645580711284e-02, 5.772869260679740e-02, 4.818264513338326e-03, 1.947466341969598e-03, 1.058297588512631e-01, 1.639021701613001e-02, 1.639021701612996e-02, 2.344037214897768e-06, 3.612027259097794e-10, 1.239469055390512e-06, 4.133994663215967e-02, 1.033104695561951e-06, 1.033104695561946e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
