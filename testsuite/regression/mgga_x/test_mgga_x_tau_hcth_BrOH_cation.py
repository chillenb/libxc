
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_tau_hcth_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tau_hcth", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.195575749310369e+01, -2.195581883860147e+01, -2.195611041809190e+01, -2.155827494906742e+01, -2.155875803952934e+01, -2.116181801975605e+01, -3.523842540623062e+00, -3.474654399185001e+00, -3.474409338808309e+00, -3.474821962508532e+00, -3.474419101965331e+00, -3.523544459064810e+00, -6.891009433453439e-01, -7.042391918678146e-01, -7.337532190496949e-01, -7.010729934176461e-01, -6.758778167870356e-01, -7.303395867272970e-01, -1.958396603575319e-01, -1.960403515495615e-01, -9.384263737346079e-01, -2.693895838431890e-01, -2.369703474732705e-01, -2.144548249662117e-01, -2.154600042564783e-02, -1.571383747947159e-02, -8.268182230028912e-02, -1.243669434096405e-02, -1.734878619018918e-02, -1.734878619018918e-02, -5.180440217204072e+00, -5.182044274009403e+00, -5.180524930456008e+00, -5.181940513833128e+00, -5.266915001836747e+00, -5.266835316864919e+00, -1.968332266590001e+00, -1.979160988392012e+00, -1.961012259536541e+00, -1.970114250301756e+00, -2.000343129712888e+00, -1.978031588403229e+00, -5.926419462866495e-01, -6.317697531057517e-01, -5.415336602866603e-01, -5.603606946090902e-01, -6.014504003594772e-01, -5.919472454354446e-01, -2.540986790184271e-01, -2.309068435292688e-01, -2.427763240027840e-01, -1.902529444753995e+00, -2.460402440451397e-01, -2.460402440451398e-01, -6.446056192649345e-03, -1.215818390792089e-02, -9.308342655433210e-03, -1.196876703586169e-01, -1.169147819999209e-02, -1.169147819999209e-02, -5.989019144305274e-01, -5.897459791715637e-01, -6.037145089080864e-01, -6.001023549428801e-01, -6.042080768087834e-01, -5.991826128854763e-01, -5.818245159563842e-01, -4.980203839982059e-01, -5.205790614654366e-01, -5.340345876388369e-01, -5.217362663508189e-01, -5.317255590948928e-01, -6.743181878260711e-01, -2.854721320653953e-01, -2.818503512101304e-01, -3.535240471716199e-01, -3.119180432484305e-01, -3.113261923222457e-01, -4.525431903557722e-01, -3.443675941259842e-02, -1.533084567057372e-01, -3.344614488362640e-01, -2.094541548979443e-01, -2.094541548979443e-01, -8.749613243814069e-03, -3.250824417205422e-03, -1.966415460460173e-03, -6.980371855810563e-02, -1.073756290057213e-02, -4.948061891606481e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_tau_hcth_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tau_hcth", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.928047740274516e+01, -2.928043465857554e+01, -2.928057126030577e+01, -2.928050284380526e+01, -2.928089047555296e+01, -2.928095495049490e+01, -2.927982998107028e+01, -2.850788243390243e+01, -2.928053240552194e+01, -2.850887820197881e+01, -2.850906109132630e+01, -2.850887820197881e+01, -4.240506234260287e+00, -4.766291678745906e+00, -4.240717077983491e+00, -4.240420907031158e+00, -4.244757521361349e+00, -4.245517487285074e+00, -4.243654716274061e+00, -4.243719384766098e+00, -4.239356198605085e+00, -4.247402680084388e+00, -4.765557393600663e+00, -4.247402680084389e+00, -9.168733985854859e-01, -9.205198498881139e-01, -9.154431988747015e-01, -5.374136207892343e-01, -4.161169851398484e-01, -3.966651246008857e-01, -4.514071317094457e-01, -9.016751358340791e-01, -9.275881428770756e-01, -8.687515274471889e-01, -5.573086209756961e-01, -3.258778451082181e-01, -2.325965186089039e-01, -6.881877298070781e-02, -2.354609096504718e-01, -8.223620387414154e-02, -1.086111958652126e-01, -1.088592548364021e+00, -6.378155478662129e-02, -4.093571687284049e-02, -4.151161654860840e-02, -1.933028085590297e-01, -4.151161654860767e-02, -1.303463342111559e-01, -2.769945185085800e-02, -2.941658552029099e-02, -8.385990912240135e-03, -3.105320247042566e-02, -4.662971301811264e-02, -1.507188802477981e-01, -1.670253360718328e-02, -1.642485878696480e-02, -2.473543972635560e-02, -1.410423046313830e-02, -2.473543972635559e-02, -1.410423046313840e-02, -7.123614063875152e+00, -7.121924819948736e+00, -7.127670053992322e+00, -7.125843892507569e+00, -7.123886131724324e+00, -7.122093097213654e+00, -7.127364627934749e+00, -7.125651625827132e+00, -7.136970566524936e+00, -7.123891026910377e+00, -7.125660838157636e+00, -7.135230097827939e+00, -2.279045256301214e+00, -2.281900070052858e+00, -2.323715058228328e+00, -2.324913383183325e+00, -2.236944193345305e+00, -2.252268749520939e+00, -2.278920626838764e+00, -2.293591990638645e+00, -2.333118105208373e+00, -2.693500303770831e+00, -2.333118105208373e+00, -2.309159979230962e+00, -7.465087074995351e-01, -8.033942535451413e-01, -8.533885440387035e-01, -8.564720219803801e-01, -6.532472106985459e-01, -6.901157178966624e-01, -7.027797834026652e-01, -7.336878471793590e-01, -7.874104806442970e-01, -7.960257108897668e-01, -7.874104806442971e-01, -7.397029154404087e-01, -1.825869778063187e-01, -1.811283380896291e-01, -2.370000933394332e-01, -1.073238887664290e-02, -1.972001535094743e-01, -1.849678318216784e-01, -2.473199477445869e+00, -2.472246681533643e+00, -1.172370604669148e-01, -6.295347864862670e-02, -1.172370604669152e-01, -6.295347864862777e-02, -3.608947243471549e-03, -1.303082781128377e-02, -1.607296569517318e-02, -1.631689191570383e-02, -1.201143079061257e-02, -1.271635920925071e-02, -1.921354615417672e-01, -7.806597299478209e-02, -1.228041798977189e-02, -1.683122309988629e-02, -1.228041798977191e-02, -1.683122309988625e-02, -8.140275080854245e-01, -8.170229954576009e-01, -8.112803277677982e-01, -8.145018003830773e-01, -8.031994655883528e-01, -8.063333731231958e-01, -8.045497330683850e-01, -8.168443045325740e-01, -8.038728164007768e-01, -8.069953917013550e-01, -8.038728164007768e-01, -8.165543117073827e-01, -7.928220599927052e-01, -7.952982760637878e-01, -6.154338615793468e-01, -6.765055719748240e-01, -6.622980924995003e-01, -7.085178385696618e-01, -7.227327312839159e-01, -7.257427624799093e-01, -6.905174534767741e-01, -6.938090810996650e-01, -6.905174534767741e-01, -7.236838466778044e-01, -8.785193638410715e-01, -9.168302971397067e-01, -5.248793883496960e-02, -5.516137451246070e-02, -3.586577391020878e-01, -1.751609628047660e-01, -4.750371341520100e-01, -4.037645680348649e-01, -3.009808833814232e-01, -3.024567690923561e-01, -3.009808833814229e-01, -4.140686032302561e-01, -5.526802175525970e-01, -5.596421710853606e-01, -4.575749274466619e-02, -4.607057665602163e-02, -1.773604552041356e-01, -1.800647841041118e-01, -4.045394159203605e-01, -4.194703605569873e-01, -1.796533145237575e-01, -1.582434895024649e-01, -1.796533145237576e-01, -1.582434895024646e-01, -1.144756406013325e-02, -1.186258869038739e-02, -4.329189248196917e-03, -4.339082914771234e-03, -2.533906473178559e-03, -2.695014080597276e-03, -9.229678520456545e-02, -9.380568722489978e-02, -1.162781628861827e-02, -1.543342063326197e-02, -1.162781628861824e-02, -4.449866308591412e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_tau_hcth_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tau_hcth", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [2.049817985537303e-08, 0.000000000000000e+00, 2.049851181926796e-08, 2.049794820095411e-08, 0.000000000000000e+00, 2.049834345979652e-08, 2.049714235078864e-08, 0.000000000000000e+00, 2.049720669096258e-08, 2.049976230061738e-08, 0.000000000000000e+00, 1.073492986465160e-09, 2.049804581997687e-08, 0.000000000000000e+00, 1.076067221399456e-09, 1.074952530399457e-09, 0.000000000000000e+00, 1.076067221399456e-09, -1.012129282464896e-05, 0.000000000000000e+00, 2.574702430216724e-05, -1.012050643130505e-05, 0.000000000000000e+00, -1.012190552457293e-05, -1.010531935520262e-05, 0.000000000000000e+00, -1.010215959341524e-05, -1.010745097692906e-05, 0.000000000000000e+00, -1.010686616408043e-05, -1.012953532462621e-05, 0.000000000000000e+00, -1.009233608686886e-05, 2.576149323994538e-05, 0.000000000000000e+00, -1.009233608686886e-05, 1.815269270737940e-02, 0.000000000000000e+00, 1.785435548976196e-02, 1.827047264923129e-02, 0.000000000000000e+00, -9.512237131166234e-03, -1.143637924948329e-02, 0.000000000000000e+00, -1.188802261334814e-02, -1.100495699271882e-02, 0.000000000000000e+00, 1.944382228459338e-02, 1.730971541109896e-02, 0.000000000000000e+00, 2.273519075203009e-02, -9.088346100632661e-03, 0.000000000000000e+00, -1.361560850423748e-02, 4.494937265835980e+00, 0.000000000000000e+00, -2.368307702684593e+00, 4.269330645925567e+00, 0.000000000000000e+00, -2.162677614956432e+00, -6.815749020797722e-03, 0.000000000000000e+00, 9.321983678272300e-03, -5.338772910638252e+00, 0.000000000000000e+00, -5.720492599920366e+00, -2.399489661621428e+00, 0.000000000000000e+00, -6.574767781313404e+00, -2.399489661621431e+00, 0.000000000000000e+00, 4.817560475374837e+01, -2.665004974084231e+01, 0.000000000000000e+00, -2.675506944567617e+01, 2.824596944261383e+06, 0.000000000000000e+00, -2.798675877852484e+01, 2.954414225941051e+03, 0.000000000000000e+00, -1.326186651511864e+01, -1.950813629943033e+01, 0.000000000000000e+00, -1.970791754738424e+01, -2.531534901738808e+01, 0.000000000000000e+00, -4.333236525099247e+01, -2.531534901738808e+01, 0.000000000000000e+00, -4.333236525059114e+01, 1.740046664847559e-06, 0.000000000000000e+00, 1.741897751577434e-06, 1.767950739527230e-06, 0.000000000000000e+00, 1.768894247087925e-06, 1.742004533629793e-06, 0.000000000000000e+00, 1.743120196332679e-06, 1.765929465351981e-06, 0.000000000000000e+00, 1.767626867169865e-06, 5.827298621998710e-06, 0.000000000000000e+00, 1.755408076232969e-06, 1.754035380705445e-06, 0.000000000000000e+00, 5.832997432209408e-06, -1.053157000543293e-04, 0.000000000000000e+00, -1.052311732162184e-04, -1.013044989889509e-04, 0.000000000000000e+00, -1.013505196998395e-04, -1.089870175270973e-04, 0.000000000000000e+00, -1.078200780193688e-04, -1.052563503472336e-04, 0.000000000000000e+00, -1.041280165110358e-04, -1.005327720142785e-04, 0.000000000000000e+00, 2.476787626383025e-04, -1.005327720142785e-04, 0.000000000000000e+00, -1.028019725447337e-04, -9.432950839753974e-03, 0.000000000000000e+00, 3.424025522958664e-02, 2.077177592996974e-03, 0.000000000000000e+00, 2.782587090605972e-03, -1.820223896641409e-02, 0.000000000000000e+00, -1.477852981838503e-02, -1.253955553124751e-02, 0.000000000000000e+00, -9.011880560902527e-03, -5.769589928444387e-03, 0.000000000000000e+00, 3.561491120961718e-02, -5.769589928444389e-03, 0.000000000000000e+00, -9.397323170106340e-03, -8.043962655962998e+00, 0.000000000000000e+00, -7.958335262727966e+00, 4.264750077810875e+00, 0.000000000000000e+00, -2.442753568086168e+00, -8.674104588001923e+00, 0.000000000000000e+00, -8.807704204483688e+00, -6.000819250340123e-05, 0.000000000000000e+00, -5.999985554697634e-05, -8.773645037728384e+00, 0.000000000000000e+00, -9.988263046485883e+00, -8.773645037728370e+00, 0.000000000000000e+00, -9.988263046485926e+00, 8.234780253897190e+07, 0.000000000000000e+00, -1.305592892266923e+01, -1.850430644981780e+01, 0.000000000000000e+00, -1.631072405732143e+01, -1.332725206917148e+02, 0.000000000000000e+00, -1.463011660848095e+02, -1.253246934860774e+01, 0.000000000000000e+00, 3.757102491394763e+02, -2.510686437539522e+01, 0.000000000000000e+00, -7.975752145770826e+01, -2.510686437542959e+01, 0.000000000000000e+00, -7.975752145793594e+01, 2.740906605189118e-02, 0.000000000000000e+00, 2.714897612567552e-02, 2.192424347668013e-02, 0.000000000000000e+00, 2.185340237406174e-02, 3.503196331506404e-02, 0.000000000000000e+00, 3.444893973054786e-02, 3.448131551233049e-02, 0.000000000000000e+00, 2.536901679025018e-02, 3.475851896140247e-02, 0.000000000000000e+00, 3.418557724290883e-02, 3.475851896140247e-02, 0.000000000000000e+00, 2.461232175183567e-02, 2.968258043675017e-02, 0.000000000000000e+00, 2.950411687154716e-02, -2.315842559178910e-02, 0.000000000000000e+00, 6.599168502206171e-02, -1.184190184135875e-02, 0.000000000000000e+00, 5.786934770606981e-02, 5.745021672788972e-03, 0.000000000000000e+00, 5.958136089089992e-03, -3.907396123509982e-03, 0.000000000000000e+00, -3.451951535888008e-03, -3.907396123509985e-03, 0.000000000000000e+00, 5.434526332791386e-02, -1.190242755889340e-03, 0.000000000000000e+00, 2.120983964910069e-02, -1.039799372007657e+00, 0.000000000000000e+00, -1.014466370428849e+00, 7.790352605039701e-01, 0.000000000000000e+00, -4.236126897690999e-01, 2.549403661415304e-01, 0.000000000000000e+00, -1.050638582091090e-01, -2.063299359452808e-01, 0.000000000000000e+00, -2.059338062734136e-01, -2.063299359452809e-01, 0.000000000000000e+00, 4.357709065457129e-01, -3.536639114972313e-02, 0.000000000000000e+00, -3.405212712617923e-02, 3.186212283137447e+03, 0.000000000000000e+00, 3.100477869929684e+03, -1.112730610081986e+01, 0.000000000000000e+00, -1.149556431889869e+01, -1.213692918951913e-01, 0.000000000000000e+00, -1.089572201606773e-01, -1.403619025688700e+01, 0.000000000000000e+00, -1.636795058559655e+01, -1.403619025688703e+01, 0.000000000000000e+00, -1.636795058559665e+01, 8.134327117996484e+05, 0.000000000000000e+00, 7.054334484590474e+05, -2.127121886751664e+01, 0.000000000000000e+00, -2.117769263088865e+01, 3.388533818977336e+08, 0.000000000000000e+00, 2.648073244319839e+08, 1.919914338343970e+02, 0.000000000000000e+00, 1.798469785314171e+02, -6.480178060710993e+01, 0.000000000000000e+00, -8.268259456401631e+01, -6.480178060685387e+01, 0.000000000000000e+00, 3.562757556476326e+07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_tau_hcth_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tau_hcth", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [3.585459998053193e-06, 3.582685360606472e-06, 3.585040598569278e-06, 3.582381064542734e-06, 3.583849339700880e-06, 3.580631140036615e-06, 3.588553985083621e-06, 3.887670685930844e-05, 3.585191720296469e-06, 3.882700816796536e-05, 3.884604495986007e-05, 3.882700816796536e-05, 2.454064783748513e-03, 1.715998541088917e-05, 2.454489048883580e-03, 2.454024184443607e-03, 2.462504157514423e-03, 2.463863905984903e-03, 2.459436109444990e-03, 2.459412498153679e-03, 2.453508109941051e-03, 2.466344618550422e-03, 1.714374411490728e-05, 2.466344618550422e-03, -9.520432125095220e-06, -8.382293627961996e-06, -9.827299522971659e-06, -4.247462750198332e-03, -8.075364972842336e-03, -8.605691371761650e-03, -7.019357163522515e-03, -1.157425767934791e-05, -7.534086825111959e-06, -1.451748319842862e-05, -3.614363716305135e-03, -1.041889723694928e-02, -4.774376421872584e-05, -4.295281495527248e-02, -4.905799147624278e-05, -3.949364803454646e-02, -1.076552220441082e-02, -1.096353863372641e-05, -2.869349776604546e-02, -3.482450448148793e-02, -4.655301864851850e-02, -7.683975024255805e-03, -4.655301864851868e-02, -2.136881457440804e-06, -6.124663184593489e-08, -8.345087098714715e-08, -1.520525997515950e-11, -1.174249867667200e-07, -2.590169656090876e-08, -1.822586391701643e-04, -3.014529797341966e-09, -2.814334377932191e-09, -3.205077845748338e-08, -4.286707406816078e-09, -3.205077845748338e-08, -4.286707427533238e-09, -1.546228439011445e-05, -1.546697546607499e-05, -1.556460633933580e-05, -1.556696011078379e-05, -1.547286998055843e-05, -1.547360797551646e-05, -1.556072581243436e-05, -1.556446385441507e-05, -8.263235266286797e-06, -1.552931373860840e-05, -1.552675271017944e-05, -8.258741659613504e-06, 3.376511508397141e-03, 3.405368974767019e-03, 3.618283130962654e-03, 3.636801332636843e-03, 3.126267813787631e-03, 3.230738652942956e-03, 3.370552350464411e-03, 3.466270968250524e-03, 3.672595091004537e-03, 1.783738335266833e-05, 3.672595091004537e-03, 3.556433532325074e-03, 1.100801755490995e-02, 2.122727715276836e-04, 9.753238613964661e-04, 7.009774700648916e-04, 1.629285513611321e-02, 1.539118378413033e-02, 1.257161477787235e-02, 9.448916858774678e-03, 7.193384868849802e-03, 2.162432768358044e-04, 7.193384868849802e-03, 1.043013800822954e-02, -8.258962962855151e-03, -8.521161032945033e-03, -2.623862632444301e-05, -4.105106736849156e-02, -5.625325007703240e-03, -7.453437208004275e-03, 2.322090505063435e-03, 2.318540618040262e-03, -1.863522765104475e-02, -3.109506693363166e-02, -1.863522765104504e-02, -3.109506693363163e-02, -8.247772560328584e-14, -4.755164994490779e-10, -2.296684646542520e-09, -2.048934338585575e-09, -1.037637923501379e-08, -1.589654957476064e-08, -1.560393369075185e-03, -4.283639647415432e-07, -9.433377901085388e-10, -2.607075543138117e-08, -9.433377828492439e-10, -2.607075554019073e-08, 7.522166990719099e-04, 7.257457094041016e-04, 7.722569108817929e-04, 7.939646252512044e-04, -4.559357964628351e-04, -4.594326931445431e-04, -4.857319382153396e-04, 9.205530289514083e-04, -4.733484890476099e-04, -4.751135579336021e-04, -4.733484890476099e-04, 9.405496599909856e-04, 8.701941795332531e-04, 8.469013162655193e-04, 1.687957847976654e-02, 2.058721887103492e-04, 8.819270740896381e-03, 2.500345946863020e-04, 7.798034092473581e-04, 7.172454238650288e-04, 4.153861680135120e-03, 3.943686021321248e-03, 4.153861680135119e-03, 2.113615684822645e-04, 2.965895781615146e-03, 1.476885053605698e-04, -3.771669804327794e-02, -3.737776502876691e-02, -3.299774590746626e-05, -1.870470220652833e-02, 8.391573020156993e-05, 1.829805661480049e-02, 4.318156440587365e-03, 4.770494646251339e-03, 4.318156440587361e-03, 1.363185251601196e-05, 1.910985728761593e-02, 1.925344291954926e-02, -2.546113422903131e-08, -2.555621213008519e-08, -4.212203468780997e-04, -5.194719692668747e-04, 2.539983414629143e-02, 2.586876448255939e-02, -5.319801241844207e-03, -8.739748833877953e-03, -5.319801241843991e-03, -8.739748833877672e-03, -2.288273782157051e-11, -2.675036502556954e-11, -3.991484309292206e-12, -4.010712773640344e-12, -1.192804700392645e-13, -1.770226331742522e-13, -1.360520974195721e-06, -1.718976892979681e-06, -2.982165783050780e-09, -1.780428193162334e-08, -2.982165788122442e-09, -3.308870751355565e-12]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
