
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_tau_hcth_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tau_hcth", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.116987960887371e+01, -2.116994417852485e+01, -2.117024177333150e+01, -2.116928099780017e+01, -2.116978291705277e+01, -2.116978291705277e+01, -3.413437215878933e+00, -3.413461881910137e+00, -3.414142829262891e+00, -3.413901696851557e+00, -3.413688348601300e+00, -3.413688348601300e+00, -6.541834022182145e-01, -6.535999699245858e-01, -6.437284040412485e-01, -6.476604994980236e-01, -6.563939828087905e-01, -6.563939828087905e-01, -2.142432693714180e-01, -2.116018205726731e-01, -7.674811624404985e-01, -2.471853013400203e-01, -2.254692849538231e-01, -2.254692849538230e-01, -2.154572175004688e-02, -2.268433562568581e-02, -1.199348869457850e-01, -1.243600522048548e-02, -1.734789080121871e-02, -1.734789080121871e-02, -5.180966818395410e+00, -5.182572844664084e+00, -5.181040974563929e+00, -5.182458622905017e+00, -5.181779513158953e+00, -5.181779513158953e+00, -1.945729951880419e+00, -1.960124539810503e+00, -1.940526833814598e+00, -1.953081369765128e+00, -1.956515206606333e+00, -1.956515206606333e+00, -5.793717801137845e-01, -6.431039227109318e-01, -5.340965284927883e-01, -5.670072376156536e-01, -5.904464944292989e-01, -5.904464944292991e-01, -2.442633709012321e-01, -2.746736032250898e-01, -2.339502399430753e-01, -1.939062504422164e+00, -2.366326664619242e-01, -2.366326664619242e-01, -9.602493449627068e-03, -1.215672893310798e-02, -9.307444383016766e-03, -1.783216669303457e-01, -1.169063282214950e-02, -1.169063282214950e-02, -6.018035500185857e-01, -5.919931323261689e-01, -5.952980102421059e-01, -5.981535886256344e-01, -5.967119686608613e-01, -5.967119686608613e-01, -5.875469161354345e-01, -4.886160913036405e-01, -5.102042941215648e-01, -5.351058036181766e-01, -5.216385148066601e-01, -5.216385148066601e-01, -6.732865595774671e-01, -2.805186855440894e-01, -2.864611563472819e-01, -3.410373308637690e-01, -3.041286011120896e-01, -3.041286011120897e-01, -4.465775656330462e-01, -1.152912000251856e-01, -1.519403808147020e-01, -3.290779814249656e-01, -2.037734945059067e-01, -2.037734945059068e-01, -3.033278403846994e-02, -3.250653430805714e-03, -6.834962061013512e-03, -1.971886235563391e-01, -1.073669156065287e-02, -1.073669156065286e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_tau_hcth_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tau_hcth", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.868788279621625e+01, -2.868773602537042e+01, -2.868804463175757e+01, -2.868785357968956e+01, -2.868847170570465e+01, -2.868849101153016e+01, -2.868664521127355e+01, -2.868616229898110e+01, -2.868798345458342e+01, -2.868702651275747e+01, -2.868798345458342e+01, -2.868702651275747e+01, -4.721363137930621e+00, -4.721710730380896e+00, -4.721392283464908e+00, -4.721766954727173e+00, -4.722408607115751e+00, -4.722755833773226e+00, -4.720494359527938e+00, -4.720985515884138e+00, -4.720497140844118e+00, -4.721957521336441e+00, -4.720497140844118e+00, -4.721957521336441e+00, -8.383795847998348e-01, -8.530189337813117e-01, -8.331221682102796e-01, -8.511431241484471e-01, -7.550051764971293e-01, -7.252057642725279e-01, -7.516138222107692e-01, -7.624384889465744e-01, -8.738753735542950e-01, -5.746955011418436e-01, -8.738753735542950e-01, -5.746955011418436e-01, -4.761594198069376e-02, -7.277432024788505e-02, -5.728213450075303e-02, -8.768725590803625e-02, -9.318785373522528e-01, -1.022661722481812e+00, -2.988053080342096e-02, -2.456164453458577e-02, -5.322822623409606e-02, -1.222661670453947e-01, -5.322822623409548e-02, -1.222661670453953e-01, -2.769793423279952e-02, -2.941580941201616e-02, -2.900735729081731e-02, -3.105115176896100e-02, -1.430240059810680e-01, -1.486377702833738e-01, -1.669948502322057e-02, -1.642241187395280e-02, -2.473220691538184e-02, -1.409877701138100e-02, -2.473220691538185e-02, -1.409877701138111e-02, -7.125800006241287e+00, -7.123985483986570e+00, -7.129802770636386e+00, -7.127854740943164e+00, -7.126018965029289e+00, -7.124115898933825e+00, -7.129454257702544e+00, -7.127631440881894e+00, -7.127857180026011e+00, -7.125932897902271e+00, -7.127857180026011e+00, -7.125932897902271e+00, -2.355349651017980e+00, -2.355544518967567e+00, -2.387770533793720e+00, -2.386933036769207e+00, -2.302630907678233e+00, -2.318706203796113e+00, -2.333307075038118e+00, -2.348582436266964e+00, -2.409655700475991e+00, -2.377454176743497e+00, -2.409655700475991e+00, -2.377454176743497e+00, -7.920410842146138e-01, -7.894726032334980e-01, -8.828650612696790e-01, -8.832961405292300e-01, -7.215284322110480e-01, -7.478120369700391e-01, -7.688782107692722e-01, -7.940817514834279e-01, -8.263782333119621e-01, -7.865461191529063e-01, -8.263782333119624e-01, -7.865461191529064e-01, -1.568504976460471e-01, -1.526203776446269e-01, -1.027148039207217e-02, -1.036123169218112e-02, -1.701194930637980e-01, -1.602613349681407e-01, -2.658339281262226e+00, -2.657133920895214e+00, -9.616659466369230e-02, -4.940284584385627e-02, -9.616659466369204e-02, -4.940284584385685e-02, -1.253431591418317e-02, -1.302612585313823e-02, -1.606739867598541e-02, -1.631083489096960e-02, -1.200836245517355e-02, -1.271232855590584e-02, -1.774095486984741e-01, -1.785553425819582e-01, -1.227162006995879e-02, -1.682993504554694e-02, -1.227162006995875e-02, -1.682993504554694e-02, -8.113437762223549e-01, -8.143488806882830e-01, -8.112389431679901e-01, -8.143659103257523e-01, -8.120206897965000e-01, -8.150831463185173e-01, -8.120291673364998e-01, -8.150563987948364e-01, -8.120940516754845e-01, -8.151349572692426e-01, -8.120940516754845e-01, -8.151349572692426e-01, -7.871749589188171e-01, -7.897511166414350e-01, -6.214100266160012e-01, -6.246571658600609e-01, -6.717061282930382e-01, -6.755655126610106e-01, -7.319853384219239e-01, -7.348873263502975e-01, -7.014303253475832e-01, -7.043432408050914e-01, -7.014303253475832e-01, -7.043432408050914e-01, -9.247905508997237e-01, -9.263690390929724e-01, -5.843659565261260e-02, -6.146057978197433e-02, -1.828289438335071e-01, -1.943670407434087e-01, -4.381926910059483e-01, -4.415288412005555e-01, -3.263232838621534e-01, -3.277321538889031e-01, -3.263232838621534e-01, -3.277321538889032e-01, -5.799391540198188e-01, -5.847227069522032e-01, -1.417905940233296e-01, -1.425172114911710e-01, -1.724269739631754e-01, -1.748100373254119e-01, -4.391546052857013e-01, -4.441374920208840e-01, -1.634310862239823e-01, -1.407955148201755e-01, -1.634310862239816e-01, -1.407955148201752e-01, -3.947252108358735e-02, -4.087472065507862e-02, -4.328665148663596e-03, -4.338240284822737e-03, -8.803511578112506e-03, -9.362136179617286e-03, -1.606893332985605e-01, -1.590703049688710e-01, -1.161858858272743e-02, -1.543238473441910e-02, -1.161858858272737e-02, -1.543238473441903e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_tau_hcth_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tau_hcth", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [2.068488077895784e-09, 0.000000000000000e+00, 2.068168607509820e-09, 2.068911996627936e-09, 0.000000000000000e+00, 2.068476402095818e-09, 2.069607912647321e-09, 0.000000000000000e+00, 2.069658795050383e-09, 2.064833788393568e-09, 0.000000000000000e+00, 2.063568373636111e-09, 2.068772849337364e-09, 0.000000000000000e+00, 2.065517445108437e-09, 2.068772849337364e-09, 0.000000000000000e+00, 2.065517445108437e-09, 3.750943321802752e-06, 0.000000000000000e+00, 3.773624211817573e-06, 3.751187819469261e-06, 0.000000000000000e+00, 3.776012189714517e-06, 3.781723253893425e-06, 0.000000000000000e+00, 3.793381989740754e-06, 3.665292138327435e-06, 0.000000000000000e+00, 3.687714422060820e-06, 3.750428717994791e-06, 0.000000000000000e+00, 3.713151823708663e-06, 3.750428717994791e-06, 0.000000000000000e+00, 3.713151823708663e-06, -1.691772038898385e-03, 0.000000000000000e+00, -1.029068113740538e-03, -1.920279027539827e-03, 0.000000000000000e+00, -1.107539094284906e-03, -5.141858232332198e-03, 0.000000000000000e+00, -6.307495013652823e-03, -5.336171895309590e-03, 0.000000000000000e+00, -4.929814144796230e-03, -9.438449005031830e-05, 0.000000000000000e+00, -1.128951960794266e-02, -9.438449005031830e-05, 0.000000000000000e+00, -1.128951960794266e-02, -2.958157327374839e+00, 0.000000000000000e+00, -2.386406311523273e+00, -2.800912866417434e+00, 0.000000000000000e+00, -2.175822895431586e+00, -2.075036943284985e-03, 0.000000000000000e+00, -7.301795656809922e-05, -7.285948210899696e+00, 0.000000000000000e+00, -6.816152095631342e+00, -2.497398425939997e+00, 0.000000000000000e+00, -1.281692982426256e+01, -2.497398425939998e+00, 0.000000000000000e+00, -1.281692982426254e+01, -2.730579500406323e+01, 0.000000000000000e+00, -2.703417650542152e+01, -2.877296214059200e+01, 0.000000000000000e+00, -2.862867691116337e+01, -1.612934235859638e+01, 0.000000000000000e+00, -1.622989741833325e+01, -2.500062532760765e+01, 0.000000000000000e+00, -2.432170933213908e+01, -2.725663155102767e+01, 0.000000000000000e+00, -6.914124145741621e+01, -2.725663155100509e+01, 0.000000000000000e+00, -6.914124145706043e+01, 1.763076051797463e-06, 0.000000000000000e+00, 1.763627400725327e-06, 1.790725725054864e-06, 0.000000000000000e+00, 1.790377807730224e-06, 1.764492411070367e-06, 0.000000000000000e+00, 1.764460952218441e-06, 1.788219200240040e-06, 0.000000000000000e+00, 1.788763709734615e-06, 1.777333761536090e-06, 0.000000000000000e+00, 1.777080759594042e-06, 1.777333761536090e-06, 0.000000000000000e+00, 1.777080759594042e-06, -8.706781334168511e-05, 0.000000000000000e+00, -8.749799117675457e-05, -8.534750360101681e-05, 0.000000000000000e+00, -8.581887288105122e-05, -9.433600392795106e-05, 0.000000000000000e+00, -9.258207622177874e-05, -9.260351608133337e-05, 0.000000000000000e+00, -9.099826585117639e-05, -8.091358520187353e-05, 0.000000000000000e+00, -8.587994779796869e-05, -8.091358520187353e-05, 0.000000000000000e+00, -8.587994779796869e-05, 3.008828899668301e-03, 0.000000000000000e+00, 2.917811272856609e-03, 1.715058798428347e-02, 0.000000000000000e+00, 1.735822458116153e-02, 5.458518193942906e-03, 0.000000000000000e+00, 4.609508671824620e-03, 2.605808820426008e-02, 0.000000000000000e+00, 2.226651663996996e-02, 4.008604935912749e-03, 0.000000000000000e+00, 5.007122126554155e-03, 4.008604935912746e-03, 0.000000000000000e+00, 5.007122126554156e-03, -1.048618251270329e+01, 0.000000000000000e+00, -1.061841343806038e+01, -2.629667039022893e+00, 0.000000000000000e+00, -2.590564101327714e+00, -1.208464414968063e+01, 0.000000000000000e+00, -1.157137161238775e+01, 2.141329782396453e-04, 0.000000000000000e+00, 2.146552702337186e-04, -1.053637970273497e+01, 0.000000000000000e+00, -1.137581258005066e+01, -1.053637970273497e+01, 0.000000000000000e+00, -1.137581258005068e+01, -3.509363896635301e+01, 0.000000000000000e+00, -3.037479552532942e+01, -3.022084005883656e+01, 0.000000000000000e+00, -2.790213814846265e+01, -1.721540382182949e+02, 0.000000000000000e+00, -1.915206783867943e+02, -1.851267106525917e+01, 0.000000000000000e+00, -1.781718658235639e+01, -8.560219688822606e+01, 0.000000000000000e+00, -8.409937794645215e+01, -8.560219688837282e+01, 0.000000000000000e+00, -8.409937794650669e+01, 3.014450123883167e-02, 0.000000000000000e+00, 2.976565559527675e-02, 2.469430244444818e-02, 0.000000000000000e+00, 2.450728420855526e-02, 2.673185422664817e-02, 0.000000000000000e+00, 2.648551111204449e-02, 2.833432176475350e-02, 0.000000000000000e+00, 2.800804148717137e-02, 2.754624584264167e-02, 0.000000000000000e+00, 2.725826756348846e-02, 2.754624584264167e-02, 0.000000000000000e+00, 2.725826756348846e-02, 3.589913551927308e-02, 0.000000000000000e+00, 3.541114694778087e-02, -2.051455824613483e-02, 0.000000000000000e+00, -1.997327128436485e-02, -7.404259353298435e-03, 0.000000000000000e+00, -6.750054013234770e-03, 1.193724304580779e-02, 0.000000000000000e+00, 1.204249036804273e-02, 1.850813831366095e-03, 0.000000000000000e+00, 2.052221833965145e-03, 1.850813831366096e-03, 0.000000000000000e+00, 2.052221833965147e-03, 1.354627523717440e-02, 0.000000000000000e+00, 1.374361409723072e-02, -1.059514982358724e+00, 0.000000000000000e+00, -1.033599518587934e+00, -4.421132502230875e-01, 0.000000000000000e+00, -4.152692872360532e-01, -5.026614787588614e-02, 0.000000000000000e+00, -4.764815983157964e-02, -1.745221276239561e-01, 0.000000000000000e+00, -1.734192828279467e-01, -1.745221276239567e-01, 0.000000000000000e+00, -1.734192828279470e-01, -1.921836354968950e-02, 0.000000000000000e+00, -1.901942623305099e-02, -1.474428013318841e+01, 0.000000000000000e+00, -1.476323788595771e+01, -1.456378618099266e+01, 0.000000000000000e+00, -1.487746504482320e+01, -1.861719569248446e-02, 0.000000000000000e+00, -3.084160206339888e-02, -1.795528061343161e+01, 0.000000000000000e+00, -2.052304807171340e+01, -1.795528061343170e+01, 0.000000000000000e+00, -2.052304807171350e+01, -2.165022126607821e+01, 0.000000000000000e+00, -2.210395158214632e+01, -1.079641176728938e+02, 0.000000000000000e+00, -1.912439669978931e+02, -6.663824348802748e+01, 0.000000000000000e+00, -7.094204379988240e+01, -2.007534342750991e+01, 0.000000000000000e+00, -1.956012723673207e+01, -1.764974447871850e+02, 0.000000000000000e+00, -8.730079683699188e+01, -1.764974447869724e+02, 0.000000000000000e+00, -8.730079683694346e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_tau_hcth_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tau_hcth", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_tau_hcth_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tau_hcth", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [3.099390086651106e-05, 3.096961569310014e-05, 3.098650878996746e-05, 3.096425315636854e-05, 3.096920243189259e-05, 3.093768369820189e-05, 3.105231548483524e-05, 3.104372943823972e-05, 3.098908077816627e-05, 3.100600257081058e-05, 3.098908077816627e-05, 3.100600257081058e-05, 3.973703970660295e-04, 3.957482105147042e-04, 3.975058052960622e-04, 3.956886998671725e-04, 3.983747295708044e-04, 3.980900338938782e-04, 4.050529605389629e-04, 4.035187136456060e-04, 3.972902006411259e-04, 4.043906233578218e-04, 3.972902006411259e-04, 4.043906233578218e-04, -7.883410362640648e-04, -6.191997059568544e-04, -8.451826621066234e-04, -6.409073111208689e-04, -1.766799689592935e-03, -2.122289215683862e-03, -1.767628177827598e-03, -1.605928140446429e-03, -4.643594425709199e-04, -4.273684691407945e-03, -4.643594425709199e-04, -4.273684691407945e-03, -4.322021312206525e-02, -4.096398079985725e-02, -4.112051206768777e-02, -3.702337682704272e-02, -7.231386250797544e-04, -5.265775724322250e-04, -2.309218501728557e-02, -3.041239899519252e-02, -4.031282125552433e-02, -6.330582371454676e-03, -4.031282125552449e-02, -6.330582371454787e-03, -6.124455301703084e-08, -8.344950746504944e-08, -8.168074085562743e-08, -1.174201863421930e-07, -1.296205068005787e-04, -1.807950337840549e-04, -3.014188337514860e-09, -2.814074177610476e-09, -3.204818195129115e-08, -4.285678869302966e-09, -3.204818195129114e-08, -4.285678890015155e-09, -1.471840370110700e-05, -1.476507762834514e-05, -1.478944604080391e-05, -1.483699902635843e-05, -1.474361674302978e-05, -1.478256855432993e-05, -1.480475049735235e-05, -1.484786172004803e-05, -1.475385564541335e-05, -1.481095967937524e-05, -1.475385564541335e-05, -1.481095967937524e-05, 2.633710941097323e-03, 2.676694002750121e-03, 2.912153128137249e-03, 2.945771132454080e-03, 2.553854060157118e-03, 2.621902806926249e-03, 2.831966678679538e-03, 2.896730301462693e-03, 2.816975853358992e-03, 2.827592080698905e-03, 2.816975853358992e-03, 2.827592080698905e-03, 3.182762773019748e-03, 3.201056909842923e-03, -2.100689506019946e-04, -1.739938770059907e-04, 3.056673552041825e-03, 3.328514382555831e-03, -3.776863211986731e-04, -3.795219170873127e-04, 2.086481823494033e-03, 2.480022386413191e-03, 2.086481823494035e-03, 2.480022386413189e-03, -7.725030822195911e-03, -7.907475379681943e-03, -3.826944765753366e-02, -3.806947263389746e-02, -5.252894297624966e-03, -6.989446017283154e-03, -1.351785445966182e-04, -1.351804306221345e-04, -1.731033005018428e-02, -2.884794301366251e-02, -1.731033005018457e-02, -2.884794301366249e-02, -4.441773070793612e-10, -4.754099769450695e-10, -2.296190951032295e-09, -2.048462286341248e-09, -1.037473473354526e-08, -1.589342412697338e-08, -1.496411186597884e-03, -1.842569273016752e-03, -9.429182738470829e-10, -2.606951829329572e-08, -9.429182665910163e-10, -2.606951840210011e-08, 3.443078392058844e-04, 3.221816513433120e-04, 8.056268732359360e-04, 8.143674308094099e-04, 8.198964320721277e-04, 8.132065814708469e-04, 6.884592592810950e-04, 6.731458792809843e-04, 7.718302695830290e-04, 7.599436645806998e-04, 7.718302695830290e-04, 7.599436645806992e-04, -5.574439661123313e-05, -5.912035146884751e-05, 1.511573119836205e-02, 1.489479599997793e-02, 6.986143455308761e-03, 6.623138889599078e-03, 3.653724433409595e-04, 3.315380942543766e-04, 2.790421527865655e-03, 2.670806312379006e-03, 2.790421527865655e-03, 2.670806312379007e-03, -3.303556134129847e-04, -2.990139604632781e-04, -3.547628094170611e-02, -3.507074873540136e-02, -1.745915058818587e-02, -1.571762757518849e-02, 8.631226397412249e-03, 8.486678077993531e-03, 3.092250511447923e-03, 3.404822542859597e-03, 3.092250511447921e-03, 3.404822542859621e-03, 1.116506305716542e-02, 1.162870078047190e-02, -1.281744784699727e-04, -1.285257856846800e-04, -4.145853782476557e-04, -5.109507040600909e-04, 8.894699002468604e-03, 1.174752573383512e-02, -5.085154784286915e-03, -8.292345215414389e-03, -5.085154784286708e-03, -8.292345215414122e-03, -1.226833676357725e-07, -1.433567967189409e-07, -3.991184208526460e-12, -4.010229066096177e-12, -6.425089834272676e-10, -9.534693350412427e-10, -5.184826615763094e-03, -6.497199449243129e-03, -2.980697038383134e-09, -1.780354074435267e-08, -2.980697043452297e-09, -1.780354089130219e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
