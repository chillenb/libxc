
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_scan_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_scan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.164337316528371e+01, -2.164350545028436e+01, -2.164408320996540e+01, -2.244203409902710e+01, -2.244285105840478e+01, -2.324268142333106e+01, -3.441114278660204e+00, -3.766105205887187e+00, -3.766585173402737e+00, -3.766732617647796e+00, -3.766325669671105e+00, -3.441443652612447e+00, -5.319722407410119e-01, -6.257312303661740e-01, -6.986034280212388e-01, -6.108122104288647e-01, -5.177469819283755e-01, -7.053259413460424e-01, -1.604995007439950e-01, -1.635108240283742e-01, -7.066367412286230e-01, -1.361525816044937e-01, -1.759190536795791e-01, -1.726334783394200e-01, -3.275295249624498e-03, -4.022631866501246e-03, -2.806216493984614e-02, -1.499323900345513e-03, -2.454868368297383e-03, -2.454868368297384e-03, -5.669020401279267e+00, -5.670114039027997e+00, -5.669075296435043e+00, -5.670040670559274e+00, -5.552863711321866e+00, -5.552963411133412e+00, -2.115662312237330e+00, -2.131831046408172e+00, -2.103799081065715e+00, -2.118119877819924e+00, -1.919595151981524e+00, -2.130358572801335e+00, -5.915509223470639e-01, -6.936735914393457e-01, -5.889134131261431e-01, -6.133495613459321e-01, -6.069679355413562e-01, -6.486930980092167e-01, -9.062583806764841e-02, -1.564804402649794e-01, -8.325846759329422e-02, -2.086482507408975e+00, -1.098714301826628e-01, -1.098714301826628e-01, -1.447867472808758e-03, -1.435765374143016e-03, -1.212401502708692e-03, -4.723346532786867e-02, -1.545273379036178e-03, -1.545273379036120e-03, -6.423270168158682e-01, -6.385505838162961e-01, -6.298346196109537e-01, -6.368892857820425e-01, -6.313431852825301e-01, -6.358649321014086e-01, -6.249060974897975e-01, -4.952765501051033e-01, -5.255474583288311e-01, -5.862425118353438e-01, -5.730859212015429e-01, -5.472754084313909e-01, -6.978011906220751e-01, -2.330515659552025e-01, -2.446041727626343e-01, -3.374067467640527e-01, -3.257144539533124e-01, -2.867275596239081e-01, -4.911117199801327e-01, -2.441565437625136e-02, -4.088116920782864e-02, -3.631761142377015e-01, -7.113983171293523e-02, -7.113983171293523e-02, -6.197070081141986e-03, -2.266204238703957e-04, -1.392664637252774e-03, -4.972882070243227e-02, -1.401435200780610e-03, -1.965154627877371e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_scan_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_scan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.272546319343072e+01, -3.272456453627522e+01, -3.272544318762571e+01, -3.272455020079050e+01, -3.272544723302863e+01, -3.272453720997517e+01, -3.272566322681022e+01, -3.018217116217415e+01, -3.272544457810838e+01, -3.018288435703047e+01, -3.018321407270152e+01, -3.018288435703047e+01, -4.708053249822280e+00, -5.188534836945485e+00, -4.708164644186113e+00, -4.707978714112748e+00, -4.710304406744965e+00, -4.710735963973910e+00, -4.709924412739856e+00, -4.709993039371712e+00, -4.707050503648121e+00, -4.712006140885745e+00, -5.187378651328104e+00, -4.712006140885745e+00, -8.050659295721523e-01, -8.166221648900881e-01, -8.014519463400923e-01, -8.441561380881702e-01, -8.020941011757143e-01, -7.932564159975765e-01, -8.116792797369718e-01, -7.754394986058900e-01, -8.283842007214240e-01, -7.144784445515269e-01, -8.540485042083288e-01, -7.613263548195323e-01, -1.834301519156096e-01, -2.065779740846169e-01, -1.866893177260601e-01, -2.132282637300362e-01, -8.312082285163096e-01, -8.678840605150825e-01, -8.295614997832597e-02, -9.758952841086689e-02, -1.991653838860127e-01, 3.329159537851575e-02, -1.991653838860125e-01, -9.390807754901696e-02, 9.172964875107357e-01, 8.794497372241755e-01, -5.939814650503372e-03, 8.317652706374888e-01, -3.310693583592712e-02, 2.816515677009331e-01, 1.444110684106203e+00, 1.453213132141839e+00, 1.010175369562269e+00, 1.160708930920912e+00, 1.010175369562269e+00, 1.160708930920836e+00, -7.414369122377923e+00, -7.412599598817327e+00, -7.416793524531130e+00, -7.414941765247833e+00, -7.414525970472092e+00, -7.412696034146348e+00, -7.416605500906472e+00, -7.414823056084038e+00, -7.754518922101875e+00, -7.413773258466901e+00, -7.415594208339628e+00, -7.752662694487098e+00, -2.609319236850155e+00, -2.610091387416255e+00, -2.637351464983170e+00, -2.637240532671310e+00, -2.585009700605889e+00, -2.592755458159049e+00, -2.609641488755298e+00, -2.617589919418279e+00, -2.643047845872403e+00, -2.781634140120989e+00, -2.643047845872403e+00, -2.626942200220924e+00, -8.152407258108102e-01, -7.781918691510872e-01, -9.013572678085623e-01, -9.025883836977051e-01, -7.232377600668760e-01, -7.581005998726902e-01, -7.685598252921730e-01, -7.985718136120121e-01, -8.536193863773234e-01, -7.944922508922515e-01, -8.536193863773235e-01, -8.068177051417875e-01, 3.003344171782099e-02, 2.757384243119174e-02, -1.797704418341776e-01, -1.668925851304902e-01, 5.871546074642774e-02, 3.847246765641617e-02, -2.681886899356923e+00, -2.680752513942167e+00, -2.970580836148542e-02, -6.500544124458527e-02, -2.970580836148550e-02, -6.500544124458531e-02, -2.555966924339433e-03, 1.975760909413871e+00, 1.510901688460872e+00, 1.575282498391476e+00, 8.127548841113321e-01, 7.545343972907060e-01, 1.425515704282355e-01, -5.572602865189542e-02, 1.575457065483444e+00, 8.083724579765511e-01, 1.575457065483337e+00, 8.083724579773733e-01, -8.495101148402473e-01, -8.529356731657501e-01, -8.400375393360447e-01, -8.435033333113739e-01, -8.569270347060790e-01, -8.600794177490069e-01, -8.570491640873676e-01, -8.494944340248830e-01, -8.569641177087302e-01, -8.601339128569302e-01, -8.569641177087302e-01, -8.481297389971995e-01, -8.260626378212181e-01, -8.289505822244655e-01, -6.754632619957185e-01, -6.114775395162577e-01, -7.184223016488636e-01, -8.110004380468252e-01, -7.613572556488798e-01, -7.641781108351136e-01, -7.395488233085425e-01, -7.425374940661142e-01, -7.395488233085425e-01, -8.261033928602312e-01, -9.395331959230853e-01, -1.036822934413436e+00, -2.459160464255939e-01, -2.481906167030439e-01, -3.015571157398971e-01, -3.255362887916771e-01, -4.829123564237240e-01, -4.641172429476313e-01, -3.912011668299856e-01, -3.913787453142079e-01, -3.912011668299855e-01, -3.936165413059216e-01, -6.125152087494142e-01, -6.184529645969158e-01, -3.248667177835732e-02, -3.270924410528992e-02, 2.327770863730231e-01, 2.172733571381429e-01, -4.497956578698759e-01, -4.616263172364177e-01, 6.327605739997892e-02, 3.268491534788742e-02, 6.327605739997851e-02, 3.268491534788785e-02, -8.108589265193891e-03, -8.402643468135315e-03, 3.088032740624434e+00, 3.089383320001870e+00, -1.794590280279178e-03, -1.908696489376909e-03, -6.620280702889492e-02, -6.736794106502288e-02, 1.111604937607528e+00, 8.423049440382475e-01, 1.111604937616799e+00, -3.151661359203933e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_scan_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_scan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.391069203159009e-08, 0.000000000000000e+00, -3.390419203410777e-08, -3.390927410017089e-08, 0.000000000000000e+00, -3.390316343509402e-08, -3.390501912993523e-08, 0.000000000000000e+00, -3.389698946024377e-08, -3.392096133549876e-08, 0.000000000000000e+00, -1.120837889942523e-08, -3.390980684538522e-08, 0.000000000000000e+00, -1.120785200428476e-08, -1.120714983117667e-08, 0.000000000000000e+00, -1.120785200428476e-08, -1.358583158519973e-05, 0.000000000000000e+00, -3.616001219456600e-05, -1.358620932429615e-05, 0.000000000000000e+00, -1.358641831878478e-05, -1.359382462726941e-05, 0.000000000000000e+00, -1.359462202749922e-05, -1.358646729184676e-05, 0.000000000000000e+00, -1.358571900389935e-05, -1.359370182332351e-05, 0.000000000000000e+00, -1.359158745277619e-05, -3.617351863268131e-05, 0.000000000000000e+00, -1.359158745277619e-05, -1.996707368068187e-02, 0.000000000000000e+00, -1.960169414893774e-02, -2.010625641202220e-02, 0.000000000000000e+00, -9.070894498936954e-03, -9.952966675090432e-03, 0.000000000000000e+00, -1.021659401751353e-02, -9.835920378676385e-03, 0.000000000000000e+00, -2.144948171751124e-02, -1.897642134169878e-02, 0.000000000000000e+00, -2.512748597740024e-02, -8.789863547227057e-03, 0.000000000000000e+00, -1.119985556655331e-02, -4.901612178725363e+00, 0.000000000000000e+00, -1.858649478250039e+00, -4.666912482580694e+00, 0.000000000000000e+00, -1.739415836299197e+00, -5.073166394137863e-03, 0.000000000000000e+00, -1.021482937302825e-02, -5.894467105633344e+00, 0.000000000000000e+00, -5.609449322839332e+00, -1.805345229054781e+00, 0.000000000000000e+00, -2.023876589653869e+01, -1.805345229054782e+00, 0.000000000000000e+00, -5.152159994513379e+01, -7.919920744653959e+05, 0.000000000000000e+00, -6.346161002593477e+05, -3.050191884125607e+06, 0.000000000000000e+00, -5.212444118617784e+05, -3.184012547047680e+03, 0.000000000000000e+00, -8.769760910935863e+02, -4.889127861944894e+06, 0.000000000000000e+00, -5.200449799732725e+06, -1.195609650734420e+06, 0.000000000000000e+00, -9.725076110193307e+06, -1.195609650734420e+06, 0.000000000000000e+00, -9.725076110192662e+06, -3.346505280563522e-06, 0.000000000000000e+00, -3.349736072117437e-06, -3.347587811672544e-06, 0.000000000000000e+00, -3.350784223768687e-06, -3.346602646861798e-06, 0.000000000000000e+00, -3.349799121237111e-06, -3.347529376567616e-06, 0.000000000000000e+00, -3.350749153005360e-06, -7.287629862886032e-06, 0.000000000000000e+00, -3.350257129913440e-06, -3.347031064032015e-06, 0.000000000000000e+00, -7.295171732718073e-06, -1.320710805430106e-04, 0.000000000000000e+00, -1.321605552188709e-04, -1.288613282242135e-04, 0.000000000000000e+00, -1.290455387364215e-04, -1.348236618907474e-04, 0.000000000000000e+00, -1.341139012718733e-04, -1.319604812320138e-04, 0.000000000000000e+00, -1.312387689326481e-04, -1.283056226233197e-04, 0.000000000000000e+00, -2.986174793849190e-04, -1.283056226233197e-04, 0.000000000000000e+00, -1.302476012085836e-04, -1.786176216727395e-02, 0.000000000000000e+00, -3.085569567983250e-02, -1.423450499956530e-02, 0.000000000000000e+00, -1.429485751267370e-02, -2.475273302321276e-02, 0.000000000000000e+00, -2.200090331564229e-02, -2.226289215202160e-02, 0.000000000000000e+00, -1.997307680104269e-02, -1.571177486981566e-02, 0.000000000000000e+00, -3.881082075103378e-02, -1.571177486981566e-02, 0.000000000000000e+00, -1.883997340260634e-02, -2.434484934266427e+01, 0.000000000000000e+00, -2.345698798432491e+01, -4.579353134394055e+00, 0.000000000000000e+00, -1.914219927824731e+00, -3.599560802349673e+01, 0.000000000000000e+00, -2.939759519197218e+01, -1.609943400931819e-04, 0.000000000000000e+00, -1.613037713230166e-04, -1.446853313615937e+01, 0.000000000000000e+00, -1.162706282563228e+01, -1.446853313615937e+01, 0.000000000000000e+00, -1.162706282563228e+01, -8.893275284692100e+07, 0.000000000000000e+00, -1.153604467789748e+07, -5.591725286339863e+06, 0.000000000000000e+00, -5.232041430646435e+06, -1.932357645658809e+07, 0.000000000000000e+00, -1.583198761904933e+07, -1.537163991906831e+02, 0.000000000000000e+00, -4.034304898029505e+02, -1.523673091067224e+07, 0.000000000000000e+00, -5.395503936370132e+06, -1.523673091067122e+07, 0.000000000000000e+00, -5.395503936375599e+06, -2.307593916052484e-02, 0.000000000000000e+00, -2.275641572436831e-02, -2.249698393167441e-02, 0.000000000000000e+00, -2.219170259972154e-02, -3.224588241246165e-02, 0.000000000000000e+00, -3.153892177505250e-02, -3.052290476222636e-02, 0.000000000000000e+00, -2.253843231080204e-02, -3.137184384793622e-02, 0.000000000000000e+00, -3.070908102893007e-02, -3.137184384793622e-02, 0.000000000000000e+00, -2.245495468679266e-02, -2.554654569711470e-02, 0.000000000000000e+00, -2.525456247633048e-02, -3.538522919707593e-02, 0.000000000000000e+00, -3.164037084541044e-02, -3.120111714275183e-02, 0.000000000000000e+00, -1.183225725976682e-01, -2.828216001959903e-02, 0.000000000000000e+00, -2.792326612220934e-02, -2.961827492238513e-02, 0.000000000000000e+00, -2.923605105698143e-02, -2.961827492238513e-02, 0.000000000000000e+00, -1.046548900922626e-01, -1.144233796045951e-02, 0.000000000000000e+00, -3.832283107629653e-02, -7.832669025361046e-01, 0.000000000000000e+00, -7.658812029665788e-01, -8.611191544169658e-01, 0.000000000000000e+00, -3.736706319011820e-01, -2.945809726053790e-01, 0.000000000000000e+00, -1.309689010822120e-01, -2.247675388635134e-01, 0.000000000000000e+00, -2.252247294480039e-01, -2.247675388635134e-01, 0.000000000000000e+00, -4.660475334844758e-01, -4.784857248384398e-02, 0.000000000000000e+00, -4.682771769358576e-02, -3.433906655783111e+03, 0.000000000000000e+00, -3.341483984727719e+03, -3.717385987454401e+02, 0.000000000000000e+00, -3.282560972819591e+02, -1.620136565796841e-01, 0.000000000000000e+00, -1.563467711959912e-01, -6.691092215167122e+01, 0.000000000000000e+00, -5.444883271946980e+01, -6.691092215167109e+01, 0.000000000000000e+00, -5.444883271947005e+01, -8.783753284908120e+05, 0.000000000000000e+00, -7.617470444445891e+05, -6.281787676696692e+08, 0.000000000000000e+00, -6.227905348610919e+08, -3.659498008763151e+08, 0.000000000000000e+00, -2.859819979457346e+08, -2.056589153114435e+02, 0.000000000000000e+00, -1.925526836998604e+02, -2.033424094712475e+07, 0.000000000000000e+00, -7.429342992467890e+06, -2.033424094729416e+07, 0.000000000000000e+00, -3.847512365726400e+07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_scan_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_scan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.267645579954014e-03, 2.267257332194394e-03, 2.267580838549000e-03, 2.267210382034466e-03, 2.267393811987470e-03, 2.266936832225159e-03, 2.268120663709449e-03, 9.134651069113199e-04, 2.267604469140122e-03, 9.134691477706962e-04, 9.134489441247904e-04, 9.134691477706962e-04, 4.897785583304596e-03, 7.771001528128861e-03, 4.897949620267578e-03, 4.897817084292055e-03, 4.901168247433850e-03, 4.901694406069320e-03, 4.899583159864799e-03, 4.899519111269421e-03, 4.898205118563948e-03, 4.902336017173521e-03, 7.768796833267798e-03, 4.902336017173521e-03, 9.289870211052599e-03, 1.010445576541111e-02, 9.066208136712594e-03, 2.358102827811371e-02, 2.390216224572285e-02, 2.402502146323250e-02, 2.390057506570775e-02, 7.795755366071834e-03, 1.059308168365646e-02, 4.881379206056599e-03, 2.343058306445891e-02, 2.445489515282830e-02, 9.478524222371323e-03, 8.718383754985894e-02, 1.031638527333732e-02, 8.607096215982117e-02, 1.960268882281681e-02, 2.453495520016526e-03, 1.095387888402460e-01, 1.089623703466462e-01, 8.574560507470066e-02, 1.428987339220144e-01, 8.574560507470066e-02, 4.390553280841747e-04, 1.253002679051662e+00, 1.204770911183485e+00, 3.183353201575943e-07, 1.166675101328530e+00, 2.653194328367659e-05, 3.261940488695313e-01, 1.679550521255126e+00, 1.698664126016237e+00, 1.342769894432618e+00, 2.012214773008416e+00, 1.342769894432618e+00, 2.012214773008285e+00, 3.907977529520583e-03, 3.908934151890664e-03, 3.910493288324299e-03, 3.911366492036800e-03, 3.908159263439485e-03, 3.909048102905918e-03, 3.910315897869926e-03, 3.911255738942789e-03, 7.305286679018095e-03, 3.910150044403610e-03, 3.909233962199190e-03, 7.307440584964843e-03, 8.502366664381804e-03, 8.506627872640280e-03, 8.478132122675404e-03, 8.483147327993703e-03, 8.521298101145715e-03, 8.519878988193903e-03, 8.500066407237042e-03, 8.498585598007686e-03, 8.475785964806117e-03, 1.008738796449220e-02, 8.475785964806117e-03, 8.492818774310568e-03, 3.078446911762369e-02, 2.281026754566833e-02, 3.077074052426420e-02, 3.090564908721303e-02, 3.210112352482581e-02, 3.170209885471649e-02, 3.237978112978367e-02, 3.193391219657590e-02, 3.032433678139219e-02, 3.368976168667170e-02, 3.032433678139220e-02, 3.130673715199622e-02, 1.497438486409065e-01, 1.485009291486825e-01, 3.811072321480524e-03, 8.500765554196468e-02, 1.632798696043620e-01, 1.564235970916988e-01, 9.643047330586805e-03, 9.648368710293837e-03, 1.345500103315106e-01, 1.294462148561571e-01, 1.345500103315104e-01, 1.294462148561572e-01, 1.299773963578392e-08, 1.877759665850834e+00, 1.711052157822613e+00, 1.674779504401956e+00, 2.472583698063593e+00, 2.406295068264285e+00, 2.257962665022176e-01, 1.566843094237176e-04, 2.076901450333324e+00, 1.905403495704379e+00, 2.076901450333183e+00, 1.905403495706308e+00, 3.772679764582779e-02, 3.762147602979517e-02, 3.663976835092257e-02, 3.654889267592642e-02, 4.863419717679457e-02, 4.818629972417083e-02, 4.669645127386805e-02, 3.722108383644685e-02, 4.765163657795295e-02, 4.724355023003723e-02, 4.765163657795295e-02, 3.706453122948608e-02, 3.857142159277573e-02, 3.849118509824459e-02, 3.582753963285765e-02, 4.196892105337582e-04, 3.595645552348012e-02, 1.034222052482077e-01, 3.667503861529132e-02, 3.658349560233083e-02, 3.623188813707714e-02, 3.615213709337643e-02, 3.623188813707714e-02, 1.034725619630107e-01, 2.862458369958671e-02, 7.780357052484625e-02, 6.961865057976754e-02, 6.927791126054637e-02, 1.547106306812911e-02, 5.925332334218569e-02, 5.190599263961782e-02, 4.764957076650644e-02, 5.338710995969456e-02, 5.344016818305092e-02, 5.338710995969455e-02, 3.778720874213620e-02, 3.780468928524675e-02, 3.774576001233410e-02, 2.638422944845509e-05, 2.639320508372033e-05, 2.708788275665282e-01, 2.642498705551136e-01, 5.110992179660272e-02, 5.145832306812388e-02, 1.897232123932290e-01, 1.825044148060982e-01, 1.897232123932286e-01, 1.825044148060990e-01, 3.770283392503615e-07, 4.135182668719240e-07, 3.742506396350508e+00, 3.735904354156513e+00, 1.870194505627262e-08, 2.383886921626591e-08, 3.427593643769227e-04, 4.053721453215692e-04, 2.355682455236170e+00, 2.020155120351128e+00, 2.355682455255787e+00, 1.421350379299167e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
