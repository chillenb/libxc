
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_scan_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_scan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.318402800960981e+01, -2.318409691048025e+01, -2.318445300307262e+01, -2.318342890353785e+01, -2.318395840214606e+01, -2.318395840214606e+01, -3.350988325763745e+00, -3.351106856109261e+00, -3.354608774625789e+00, -3.355820050203394e+00, -3.354436491530410e+00, -3.354436491530410e+00, -5.987506207265668e-01, -5.980339405163975e-01, -5.819368605211173e-01, -5.940939007864003e-01, -5.925863859822884e-01, -5.925863859822884e-01, -1.795974101912419e-01, -1.815299159339541e-01, -6.575213423888562e-01, -1.155951541601510e-01, -1.642267434398412e-01, -1.642267434398412e-01, -2.608194825171637e-03, -2.804663647187665e-03, -2.410586660381208e-02, -1.214044888917251e-03, -1.964337424034971e-03, -1.964337424034972e-03, -5.668011847908859e+00, -5.669116975345589e+00, -5.668087755562707e+00, -5.669062370849377e+00, -5.668559145542265e+00, -5.668559145542265e+00, -2.078320061151543e+00, -2.101157742805722e+00, -2.071650885090586e+00, -2.092003293979808e+00, -2.094377113674517e+00, -2.094377113674517e+00, -6.161279657502661e-01, -6.692629586158934e-01, -5.415925371313119e-01, -5.532285551980590e-01, -6.291365996354444e-01, -6.291365996354445e-01, -7.446537768039634e-02, -1.723356950714390e-01, -6.818610856314503e-02, -1.904714069391811e+00, -9.571080374328156e-02, -9.571080374328159e-02, -8.708334424405312e-04, -1.194811425126147e-03, -9.841610316193485e-04, -4.329802316690506e-02, -1.257636628098438e-03, -1.257636628098438e-03, -6.398916453557528e-01, -6.362920040761255e-01, -6.375684953872396e-01, -6.386113718590211e-01, -6.380890186573125e-01, -6.380890186573125e-01, -6.200081398711577e-01, -5.320906331448815e-01, -5.575614600408066e-01, -5.825875134657614e-01, -5.696411317575134e-01, -5.696411317575134e-01, -6.920274957175794e-01, -2.285109014884557e-01, -2.723304819733188e-01, -3.502915132608471e-01, -3.123124915079833e-01, -3.123124915079833e-01, -4.773833826023747e-01, -2.281866296696161e-02, -3.306049850450755e-02, -3.444442378664707e-01, -5.846081730698253e-02, -5.846081730698253e-02, -4.038110226133245e-03, -2.206048726024504e-04, -5.839056580918369e-04, -5.571082739524259e-02, -1.139177020863874e-03, -1.139177020863873e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_scan_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_scan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.019362032549463e+01, -3.019371146226985e+01, -3.019374425521871e+01, -3.019380145771551e+01, -3.019414297620394e+01, -3.019437213282479e+01, -3.019274460413193e+01, -3.019258955535963e+01, -3.019369461699770e+01, -3.019330368073720e+01, -3.019369461699770e+01, -3.019330368073720e+01, -4.688313876264566e+00, -4.685029888102626e+00, -4.689414651745516e+00, -4.685524913482541e+00, -4.707615416486976e+00, -4.710233119768584e+00, -4.711087298169563e+00, -4.709157666330289e+00, -4.685338331520845e+00, -4.724584969948624e+00, -4.685338331520845e+00, -4.724584969948624e+00, -8.420022600208206e-01, -8.490409692772718e-01, -8.399478241197021e-01, -8.477569927172817e-01, -8.111742901496759e-01, -8.078698411377704e-01, -8.314505084541722e-01, -8.366121405146317e-01, -8.533718703543598e-01, -7.981760924191134e-01, -8.533718703543598e-01, -7.981760924191134e-01, -1.429898446368322e-01, -1.956993200184038e-01, -1.440852147976242e-01, -2.002546232612082e-01, -8.398701548497258e-01, -8.739265515614658e-01, -1.500991226919461e-01, -1.179856675139959e-01, -1.424423331169978e-01, -1.122515820859758e-01, -1.424423331169978e-01, -1.122515820859758e-01, -4.067599864567652e-03, -1.968797509642157e-03, -4.599505396892643e-03, -4.503109986375917e-03, -3.669889909162544e-02, -3.855394159234369e-02, -2.263344227368606e-03, -2.207448426176037e-03, -3.823145342326263e-03, -1.967805510593060e-03, -3.823145342326265e-03, -1.967805510593060e-03, -7.414798452986088e+00, -7.413003927592622e+00, -7.417223895935233e+00, -7.415346780611349e+00, -7.414945469041629e+00, -7.413093269679274e+00, -7.417026161375245e+00, -7.415221203524649e+00, -7.416031624351678e+00, -7.414179199873945e+00, -7.416031624351678e+00, -7.414179199873945e+00, -2.559164658891358e+00, -2.561806283559724e+00, -2.597318061999681e+00, -2.598542711720577e+00, -2.538299566532269e+00, -2.546656793087843e+00, -2.572572916008950e+00, -2.581052704198378e+00, -2.597254138421538e+00, -2.583695503284297e+00, -2.597254138421538e+00, -2.583695503284297e+00, -8.200808052867532e-01, -8.180154517498143e-01, -9.269086392593733e-01, -9.267054333367323e-01, -7.370574586341686e-01, -7.713885150983664e-01, -8.275737025502601e-01, -8.570852276832686e-01, -8.581517201925520e-01, -8.141466773642992e-01, -8.581517201925520e-01, -8.141466773642995e-01, -1.000130429047609e-01, -1.026505954543610e-01, -7.623865277790930e-02, -7.348593604247175e-02, -9.386708390048362e-02, -9.605469122734975e-02, -2.911032943369527e+00, -2.909725011915546e+00, -9.199989113424423e-02, -5.435643353293224e-02, -9.199989113424403e-02, -5.435643353293202e-02, -1.582168468452515e-03, -1.645655841366592e-03, -2.184644260907489e-03, -2.213983217569027e-03, -1.714576991614514e-03, -1.866509262714224e-03, -6.488421344786167e-02, -6.278785825767805e-02, -1.663254539643536e-03, -2.505054438806042e-03, -1.663254539643535e-03, -2.505054438806042e-03, -8.523638896824559e-01, -8.557342625770366e-01, -8.420559663451843e-01, -8.454941578556728e-01, -8.455928658331473e-01, -8.490308626791896e-01, -8.486061074899039e-01, -8.519808448463176e-01, -8.470921691715010e-01, -8.504976658656562e-01, -8.470921691715010e-01, -8.504976658656562e-01, -8.322807606538435e-01, -8.349619542438216e-01, -6.739742127838507e-01, -6.774088453543080e-01, -7.179208410806793e-01, -7.216156553650606e-01, -7.626451070627011e-01, -7.654847630480476e-01, -7.398626467360618e-01, -7.428604222448592e-01, -7.398626467360618e-01, -7.428604222448592e-01, -9.785906237865942e-01, -9.777578938970009e-01, -2.184566289089095e-01, -2.203076121282916e-01, -2.856313655964394e-01, -2.930599079842249e-01, -4.493183965311798e-01, -4.524326386458144e-01, -3.674331992487132e-01, -3.679346972112948e-01, -3.674331992487132e-01, -3.679346972112948e-01, -6.039003761635968e-01, -6.110452747965881e-01, -3.138115917335649e-02, -3.349595516067371e-02, -4.972774221918470e-02, -5.136427946860975e-02, -4.487214665164616e-01, -4.587682005318359e-01, -7.681017049336027e-02, -7.835766840221715e-02, -7.681017049336029e-02, -7.835766840221718e-02, -6.967398044640322e-03, -7.300692430337855e-03, -4.057076773967944e-04, -4.307241918122623e-04, -1.035311705819067e-03, -1.132684343594704e-03, -7.023400853271460e-02, -1.389355583799892e-03, -1.644320106379251e-03, -2.244129794156671e-03, -1.644320106379249e-03, -2.244129794156670e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_scan_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_scan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.193742506369379e-08, 0.000000000000000e+00, -1.193508721602182e-08, -1.193729537918995e-08, 0.000000000000000e+00, -1.193499331581277e-08, -1.193647399697682e-08, 0.000000000000000e+00, -1.193393083538706e-08, -1.193792534898544e-08, 0.000000000000000e+00, -1.193578305079767e-08, -1.193735903206821e-08, 0.000000000000000e+00, -1.193474540524227e-08, -1.193735903206821e-08, 0.000000000000000e+00, -1.193474540524227e-08, -3.053051535069064e-05, 0.000000000000000e+00, -3.028265671685950e-05, -3.060822491862290e-05, 0.000000000000000e+00, -3.031585928830407e-05, -3.186953608000740e-05, 0.000000000000000e+00, -3.203834078615650e-05, -3.219646912148731e-05, 0.000000000000000e+00, -3.202843590198909e-05, -3.039520147194407e-05, 0.000000000000000e+00, -3.309274524676737e-05, -3.039520147194407e-05, 0.000000000000000e+00, -3.309274524676737e-05, -9.869244947567428e-03, 0.000000000000000e+00, -1.024698632115548e-02, -9.787850152605193e-03, 0.000000000000000e+00, -1.018795749489084e-02, -8.508916979102622e-03, 0.000000000000000e+00, -8.652559472459144e-03, -1.011273874129705e-02, 0.000000000000000e+00, -1.048787064384915e-02, -1.014989524010964e-02, 0.000000000000000e+00, -1.178079786289999e-02, -1.014989524010964e-02, 0.000000000000000e+00, -1.178079786289999e-02, -4.643130418390500e+00, 0.000000000000000e+00, -2.377493178168610e+00, -4.822244650454534e+00, 0.000000000000000e+00, -2.364065679786616e+00, -2.584670820340514e-03, 0.000000000000000e+00, -3.148772828370287e-03, -1.015774002713394e+00, 0.000000000000000e+00, -4.857501226320194e+00, -4.354931483165142e+00, 0.000000000000000e+00, 3.333363418440480e-01, -4.354931483165138e+00, 0.000000000000000e+00, 3.333363418440484e-01, 1.423408280984732e+01, 0.000000000000000e+00, -1.763571465013034e+03, 2.169631607177996e+02, 0.000000000000000e+00, -1.485170541446591e+02, 5.143359949763182e+00, 0.000000000000000e+00, 2.651187628120562e+00, 8.940327176823042e+02, 0.000000000000000e+00, 9.059299970879531e+02, 4.281283576372126e+02, 0.000000000000000e+00, 2.130648179482451e+03, 4.281283576372157e+02, 0.000000000000000e+00, 2.130648179482453e+03, -3.362250942001182e-06, 0.000000000000000e+00, -3.364591310168382e-06, -3.363159801483563e-06, 0.000000000000000e+00, -3.365471464947713e-06, -3.361977341820683e-06, 0.000000000000000e+00, -3.364388000409218e-06, -3.362768855278142e-06, 0.000000000000000e+00, -3.365198871986105e-06, -3.362961277776979e-06, 0.000000000000000e+00, -3.365073570922866e-06, -3.362961277776979e-06, 0.000000000000000e+00, -3.365073570922866e-06, -1.929975639400463e-04, 0.000000000000000e+00, -1.906144864655602e-04, -1.768849326109453e-04, 0.000000000000000e+00, -1.753664511494642e-04, -1.868328174038497e-04, 0.000000000000000e+00, -1.866076490394038e-04, -1.728079660206474e-04, 0.000000000000000e+00, -1.723683343666277e-04, -1.874002152224354e-04, 0.000000000000000e+00, -1.827629395384580e-04, -1.874002152224354e-04, 0.000000000000000e+00, -1.827629395384580e-04, -3.472848334963385e-02, 0.000000000000000e+00, -3.414797046630764e-02, -2.897631381776429e-02, 0.000000000000000e+00, -2.823476676651558e-02, -7.329185143629181e-02, 0.000000000000000e+00, -6.087608756391539e-02, -7.827046262857262e-02, 0.000000000000000e+00, -6.759987122080660e-02, -2.640676765791254e-02, 0.000000000000000e+00, -3.800352679625476e-02, -2.640676765791254e-02, 0.000000000000000e+00, -3.800352679625475e-02, -1.707917371310058e+00, 0.000000000000000e+00, -1.316256881207875e+00, -4.521452315457038e+00, 0.000000000000000e+00, -4.572380105519294e+00, -6.224623552640314e-01, 0.000000000000000e+00, -1.626627839714186e+00, -5.590819676851937e-04, 0.000000000000000e+00, -5.599488563782772e-04, -6.239301658670531e+00, 0.000000000000000e+00, -1.486924124803265e+01, -6.239301658670557e+00, 0.000000000000000e+00, -1.486924124803269e+01, 1.792356513447086e+03, 0.000000000000000e+00, 1.544903984386259e+03, 1.066081892820171e+03, 0.000000000000000e+00, 9.929854353018754e+02, 4.691257150574022e+03, 0.000000000000000e+00, 4.490831550518510e+03, 1.275301979116225e+00, 0.000000000000000e+00, -1.622748336175743e+00, 3.070789748294635e+03, 0.000000000000000e+00, 1.518051981476907e+03, 3.070789748294630e+03, 0.000000000000000e+00, 1.518051981476903e+03, -2.535343190372329e-02, 0.000000000000000e+00, -2.493821912777476e-02, -2.459866251105656e-02, 0.000000000000000e+00, -2.421003231958848e-02, -2.484946199601255e-02, 0.000000000000000e+00, -2.445350722292579e-02, -2.507306672970195e-02, 0.000000000000000e+00, -2.466793359651378e-02, -2.496115892190483e-02, 0.000000000000000e+00, -2.456020187297022e-02, -2.496115892190483e-02, 0.000000000000000e+00, -2.456020187297022e-02, -3.082650641106050e-02, 0.000000000000000e+00, -3.027263336512237e-02, -3.899145587095275e-02, 0.000000000000000e+00, -3.834305807924581e-02, -3.533110201690614e-02, 0.000000000000000e+00, -3.474144129700849e-02, -3.291677075963349e-02, 0.000000000000000e+00, -3.246780457937682e-02, -3.432734798489787e-02, 0.000000000000000e+00, -3.370231874265068e-02, -3.432734798489787e-02, 0.000000000000000e+00, -3.370231874265069e-02, -2.821965669622557e-02, 0.000000000000000e+00, -2.669614691985329e-02, -1.165665047120558e+00, 0.000000000000000e+00, -1.149761338333722e+00, -7.387626604181441e-01, 0.000000000000000e+00, -7.002128291625518e-01, -3.592054565084765e-01, 0.000000000000000e+00, -3.549023899899205e-01, -4.657661242000746e-01, 0.000000000000000e+00, -4.668043335206578e-01, -4.657661242000744e-01, 0.000000000000000e+00, -4.668043335206578e-01, -8.576372909858478e-02, 0.000000000000000e+00, -7.899810001616980e-02, -1.228126630093680e+01, 0.000000000000000e+00, -5.129549953798000e+00, 1.841080700302286e+00, 0.000000000000000e+00, 1.224142021675218e+00, -4.473507813493482e-01, 0.000000000000000e+00, -3.100692012533752e-01, -2.974311283322478e+00, 0.000000000000000e+00, -5.298398199750010e+00, -2.974311283322474e+00, 0.000000000000000e+00, -5.298398199750003e+00, 1.704491622380202e+02, 0.000000000000000e+00, 1.611064282400152e+02, 2.078383927523701e+04, 0.000000000000000e+00, 2.890963009210974e+04, 4.727119522361219e+03, 0.000000000000000e+00, 4.405097470458336e+03, -5.750363030933873e+00, 0.000000000000000e+00, -4.876648477652079e+01, 5.060921342974507e+03, 0.000000000000000e+00, 1.861877013861780e+03, 5.060921342974517e+03, 0.000000000000000e+00, 1.861877013861795e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_scan_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_scan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_scan_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_scan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [9.609911209359310e-04, 9.608359286503119e-04, 9.609894671627414e-04, 9.608347469665032e-04, 9.609592489552765e-04, 9.607984649716344e-04, 9.609770235522684e-04, 9.608212984556615e-04, 9.609907927383249e-04, 9.607939528302063e-04, 9.609907927383249e-04, 9.607939528302063e-04, 8.830109768505781e-03, 8.742315189497668e-03, 8.856585131367204e-03, 8.753298600088957e-03, 9.283405842261779e-03, 9.339990145875629e-03, 9.413121478780968e-03, 9.353151576467413e-03, 8.779107624342164e-03, 9.715328301847334e-03, 8.779107624342164e-03, 9.715328301847334e-03, 1.759306424662173e-02, 1.833149845973862e-02, 1.744941443229469e-02, 1.818700730387205e-02, 1.497094397409639e-02, 1.556485767218994e-02, 1.945766124336720e-02, 2.031585270736910e-02, 1.777292097345232e-02, 2.301143068875654e-02, 1.777292097345232e-02, 2.301143068875654e-02, 1.857442088883350e-01, 1.095859073333222e-01, 1.994734782552999e-01, 1.144624659155452e-01, 1.910856204794430e-03, 2.847366889274874e-03, 2.197093841756018e-02, 9.381679708024808e-02, 1.975008077673903e-01, 2.210778436920782e-03, 1.975008077673901e-01, 2.210778436920782e-03, 5.748932314405826e-04, 3.985453641598747e-03, 2.535387514171134e-04, 1.032809844516573e-03, 1.029061041003104e-03, 1.786737479618411e-03, 7.910563558953297e-07, 1.028208950960767e-06, 4.066988289551231e-05, 3.425806818526118e-07, 4.066988289550975e-05, 3.425806818526107e-07, 3.922354372128624e-03, 3.922488486471505e-03, 3.924709048324273e-03, 3.924765253931252e-03, 3.922197276841694e-03, 3.922359343132803e-03, 3.924228345389857e-03, 3.924437962901656e-03, 3.923777979626147e-03, 3.923667818756946e-03, 3.923777979626147e-03, 3.923667818756946e-03, 1.195939958453171e-02, 1.182266143915496e-02, 1.125807142109477e-02, 1.116228360818273e-02, 1.142945922418841e-02, 1.146688341434734e-02, 1.082438969043893e-02, 1.084877452424835e-02, 1.190297247192862e-02, 1.150684715787791e-02, 1.190297247192862e-02, 1.150684715787791e-02, 5.432002687580498e-02, 5.313935871347968e-02, 5.479574091522626e-02, 5.361130058581164e-02, 8.061026496049596e-02, 7.705815927231847e-02, 8.854034732552078e-02, 8.873886851242553e-02, 4.686341143435466e-02, 5.689515679092381e-02, 4.686341143435466e-02, 5.689515679092379e-02, 1.440173256106483e-02, 1.232208042037205e-02, 1.904738751216365e-01, 1.953291264495097e-01, 6.949306409504941e-03, 1.266891241752803e-02, 2.718733427819938e-02, 2.719388728672015e-02, 6.028954332975484e-02, 1.629181798664510e-01, 6.028954332975510e-02, 1.629181798664515e-01, 2.302334790701187e-08, 2.662493286252805e-08, 1.928371822364779e-07, 1.514743072746431e-07, 2.010710683363616e-06, 2.459647013272730e-06, 2.156848765130156e-03, 6.359276073243434e-03, 2.613947850494081e-08, 7.468381229136014e-05, 2.613947850494095e-08, 7.468381229136085e-05, 4.049975058229248e-02, 4.030852434810369e-02, 3.921658125711919e-02, 3.904994667410693e-02, 3.964910078289494e-02, 3.947631881484323e-02, 4.002497377429981e-02, 3.984177089922802e-02, 3.983686842936549e-02, 3.965829622406400e-02, 3.983686842936549e-02, 3.965829622406400e-02, 4.451242072483691e-02, 4.419372426208411e-02, 3.894791051738101e-02, 3.879436164856845e-02, 3.988018862304520e-02, 3.972657628783668e-02, 4.140873919593414e-02, 4.127038569009393e-02, 4.087678541787278e-02, 4.060247124931173e-02, 4.087678541787278e-02, 4.060247124931171e-02, 6.029626133020821e-02, 5.760665697401050e-02, 1.010383054664857e-01, 1.013653708547542e-01, 1.089273180695422e-01, 1.064469462069893e-01, 1.173708855732036e-01, 1.177168054805696e-01, 1.045869977579501e-01, 1.046869503690558e-01, 1.045869977579500e-01, 1.046869503690558e-01, 6.351137303068172e-02, 5.995117179839599e-02, 6.145581094519307e-03, 4.072360586554662e-03, 1.780931988657776e-03, 2.237277284035235e-03, 1.264677835086906e-01, 9.397889228448746e-02, 1.274371733269071e-02, 2.215967957822478e-02, 1.274371733269067e-02, 2.215967957822476e-02, 2.445505264503137e-06, 2.423571230517058e-06, 4.415247412091761e-10, 3.269181796323157e-10, 1.158850558561837e-06, 1.412300824634594e-06, 1.860492445193916e-02, 1.290961555486789e-01, 8.140575430324874e-08, 5.509904583155211e-05, 8.140575430324841e-08, 5.509904583154993e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
