
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_2_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.299884040132637e+01, -2.299889244607662e+01, -2.299922605563273e+01, -2.299845312199719e+01, -2.299884354085796e+01, -2.299884354085796e+01, -3.461300427442897e+00, -3.461347385718329e+00, -3.462859343684764e+00, -3.464596901206507e+00, -3.463201693258058e+00, -3.463201693258058e+00, -6.482931313452687e-01, -6.479190839019580e-01, -6.397100992677363e-01, -6.480835137878820e-01, -6.465071301285130e-01, -6.465071301285130e-01, -1.883397085308993e-01, -1.910297267163243e-01, -7.360786822730223e-01, -1.378514468881393e-01, -1.782918858640680e-01, -1.782918858640679e-01, -6.331859334456591e-03, -6.665834849405933e-03, -3.661680329620987e-02, -3.632299589246567e-03, -5.084448882712583e-03, -5.084448882712581e-03, -5.589531936194344e+00, -5.589642658006564e+00, -5.589583174699519e+00, -5.589679110667030e+00, -5.589564263506158e+00, -5.589564263506158e+00, -2.129420386006398e+00, -2.151770671678423e+00, -2.125860445147290e+00, -2.146201330039427e+00, -2.143432013360526e+00, -2.143432013360526e+00, -6.091724813836594e-01, -6.453320678733483e-01, -5.488192139274952e-01, -5.507460560939477e-01, -6.199687699672708e-01, -6.199687699672709e-01, -9.548386201033623e-02, -1.860321362271282e-01, -8.834968276529517e-02, -1.873780914804600e+00, -1.132829187360292e-01, -1.132829187360292e-01, -2.766810797375483e-03, -3.528631668652225e-03, -2.717184580199514e-03, -5.924272673315335e-02, -3.412251896875049e-03, -3.412251896875050e-03, -6.168462638821066e-01, -6.175663115058928e-01, -6.173317908193907e-01, -6.171163724413462e-01, -6.172231723091781e-01, -6.172231723091781e-01, -5.952837819553822e-01, -5.407857041255456e-01, -5.584057974442455e-01, -5.734626228318473e-01, -5.655609938685264e-01, -5.655609938685264e-01, -6.696413572653785e-01, -2.382094105768195e-01, -2.852142693390304e-01, -3.622110640918830e-01, -3.245642379031136e-01, -3.245642379031136e-01, -4.830356226165186e-01, -3.509250402156820e-02, -4.770494713619054e-02, -3.484281153863416e-01, -7.586001145988280e-02, -7.586001145988283e-02, -8.820460588650391e-03, -9.213440217916271e-04, -2.000680357643648e-03, -7.135801102901482e-02, -3.134662807805085e-03, -3.134662807805082e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_2_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.768626030386748e+01, -2.768602740951635e+01, -2.768640187700427e+01, -2.768613025315418e+01, -2.768677396368582e+01, -2.768668608624161e+01, -2.768517526517838e+01, -2.768464825695046e+01, -2.768634805035914e+01, -2.768540349191026e+01, -2.768634805035914e+01, -2.768540349191026e+01, -4.425847959177123e+00, -4.425825856697363e+00, -4.425960077560105e+00, -4.425906788323856e+00, -4.428252439189571e+00, -4.428743143554225e+00, -4.427238384289977e+00, -4.427423701074926e+00, -4.424876455580381e+00, -4.429552456783401e+00, -4.424876455580381e+00, -4.429552456783401e+00, -8.044540178526606e-01, -8.078758160584980e-01, -8.032543576507279e-01, -8.072514034609253e-01, -7.878925971276731e-01, -7.847324965585225e-01, -7.952027567510932e-01, -7.970078283212125e-01, -8.129531632613437e-01, -7.805644564129764e-01, -8.129531632613437e-01, -7.805644564129764e-01, -2.231555424721496e-01, -2.328092309643914e-01, -2.249566539602424e-01, -2.358588239819827e-01, -9.002378626082221e-01, -9.252770095895959e-01, -1.710077739270078e-01, -1.750091899487405e-01, -2.322585977850214e-01, -1.249948057327016e-01, -2.322585977850212e-01, -1.249948057327016e-01, -7.868945889079446e-03, -8.363591066978378e-03, -8.243577194107876e-03, -8.833491517893687e-03, -4.567267378622625e-02, -4.825857631035566e-02, -4.714401501991122e-03, -4.638308865233500e-03, -7.014307375525703e-03, -3.970064062899480e-03, -7.014307375525696e-03, -3.970064062899479e-03, -6.856843825203252e+00, -6.855032179316948e+00, -6.860983778062089e+00, -6.859031888697200e+00, -6.857046755716008e+00, -6.855150162262408e+00, -6.860599944851896e+00, -6.858784548890030e+00, -6.858984319182377e+00, -6.857044007562934e+00, -6.858984319182377e+00, -6.857044007562934e+00, -2.455001505181239e+00, -2.454748929001365e+00, -2.471038136641426e+00, -2.470216737468696e+00, -2.443184192019017e+00, -2.446175981885734e+00, -2.456662805269249e+00, -2.459876971096042e+00, -2.473886567745782e+00, -2.464195095790970e+00, -2.473886567745782e+00, -2.464195095790970e+00, -7.615533163099647e-01, -7.595832060831651e-01, -8.726390185677743e-01, -8.736996200504008e-01, -6.792880640703348e-01, -7.114833463260329e-01, -7.436494870086972e-01, -7.729146212951277e-01, -7.974015888668987e-01, -7.564080937749015e-01, -7.974015888668986e-01, -7.564080937749018e-01, -1.211738194076347e-01, -1.221913966635653e-01, -2.303414876939831e-01, -2.313262718177067e-01, -1.095220243903613e-01, -1.155299799695849e-01, -2.615613764806080e+00, -2.614579931549180e+00, -1.386365526329084e-01, -1.468583208972806e-01, -1.386365526329084e-01, -1.468583208972807e-01, -3.510530775616070e-03, -3.650362464237929e-03, -4.521969289255915e-03, -4.587924800187893e-03, -3.391579191400360e-03, -3.591133681745713e-03, -7.561592895712221e-02, -7.633725923674425e-02, -3.429688107292263e-03, -4.771479527092607e-03, -3.429688107292263e-03, -4.771479527092611e-03, -8.158300532795079e-01, -8.191852808908947e-01, -7.973991480114482e-01, -8.008845305971146e-01, -8.037679251799654e-01, -8.072503959351328e-01, -8.091700802537117e-01, -8.125363164759091e-01, -8.064617165661484e-01, -8.098840511198485e-01, -8.064617165661484e-01, -8.098840511198485e-01, -7.992175512154900e-01, -8.018185191600443e-01, -6.130105498914756e-01, -6.158046072386294e-01, -6.532490038219081e-01, -6.567541054485069e-01, -7.065385411736074e-01, -7.093388458449067e-01, -6.785419153448629e-01, -6.812775058275502e-01, -6.785419153448629e-01, -6.812775058275502e-01, -9.110504498971815e-01, -9.139769503572327e-01, -2.892046724278269e-01, -2.906875242929352e-01, -3.382261428171324e-01, -3.410693022367279e-01, -4.339118837188378e-01, -4.363195334676734e-01, -3.814398520228349e-01, -3.811897652962171e-01, -3.814398520228351e-01, -3.811897652962169e-01, -5.677255795097884e-01, -5.718007682130088e-01, -4.493481996757511e-02, -4.522370815866951e-02, -6.022226948704486e-02, -6.224450660331105e-02, -4.201180799466906e-01, -4.279889644979600e-01, -9.401909778487248e-02, -9.921834036663064e-02, -9.401909778487250e-02, -9.921834036663071e-02, -1.117862571385487e-02, -1.157904853420615e-02, -1.205042360949803e-03, -1.204414313069862e-03, -2.487712932482174e-03, -2.645688965873881e-03, -9.020369271096382e-02, -9.202984294341648e-02, -3.254418780968350e-03, -4.373318918234351e-03, -3.254418780968347e-03, -4.373318918234345e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_2_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.936398065678909e-08, 0.000000000000000e+00, -2.936553380790373e-08, -2.936377362740701e-08, 0.000000000000000e+00, -2.936538310831361e-08, -2.936300418744167e-08, 0.000000000000000e+00, -2.936431015461499e-08, -2.936535851090206e-08, 0.000000000000000e+00, -2.936730701401424e-08, -2.936386791465248e-08, 0.000000000000000e+00, -2.936602932019383e-08, -2.936386791465248e-08, 0.000000000000000e+00, -2.936602932019383e-08, -2.749480046739581e-05, 0.000000000000000e+00, -2.749107314959700e-05, -2.750021800209668e-05, 0.000000000000000e+00, -2.749464127547541e-05, -2.760535371454017e-05, 0.000000000000000e+00, -2.762284471087389e-05, -2.756030129739668e-05, 0.000000000000000e+00, -2.755837146385822e-05, -2.750040549452049e-05, 0.000000000000000e+00, -2.765102404769491e-05, -2.750040549452049e-05, 0.000000000000000e+00, -2.765102404769491e-05, -9.976569049576250e-03, 0.000000000000000e+00, -1.015397864311357e-02, -9.940687225471962e-03, 0.000000000000000e+00, -1.013117581731074e-02, -9.336367233879138e-03, 0.000000000000000e+00, -9.315304078642943e-03, -9.715831416975004e-03, 0.000000000000000e+00, -9.883939362436794e-03, -1.006488067809336e-02, 0.000000000000000e+00, -9.104916477727584e-03, -1.006488067809336e-02, 0.000000000000000e+00, -9.104916477727584e-03, -1.147244076245295e+00, 0.000000000000000e+00, -1.243459652305249e+00, -1.166025801334632e+00, 0.000000000000000e+00, -1.268011249157729e+00, -2.570518221520188e-03, 0.000000000000000e+00, -2.949222782597557e-03, -8.714391940651206e-01, 0.000000000000000e+00, -9.822624363800903e-01, -9.801684379315030e-01, 0.000000000000000e+00, -1.029227353089965e+00, -9.801684379315023e-01, 0.000000000000000e+00, -1.029227353089966e+00, -2.553248400614947e+02, 0.000000000000000e+00, -2.258648563320591e+02, -2.379075206445915e+02, 0.000000000000000e+00, -2.078291993039720e+02, -6.059000682693219e+00, 0.000000000000000e+00, -5.588579603080548e+00, -6.365497313889050e+02, 0.000000000000000e+00, -6.559427063949906e+02, -3.164153906671838e+02, 0.000000000000000e+00, -1.393123264399905e+03, -3.164153906671843e+02, 0.000000000000000e+00, -1.393123264399905e+03, -8.726285378133804e-06, 0.000000000000000e+00, -8.734787674833457e-06, -8.726254327495086e-06, 0.000000000000000e+00, -8.734760610424872e-06, -8.726380106689357e-06, 0.000000000000000e+00, -8.734856523978592e-06, -8.726348355770900e-06, 0.000000000000000e+00, -8.734826776449291e-06, -8.726204020588056e-06, 0.000000000000000e+00, -8.734767442311465e-06, -8.726204020588056e-06, 0.000000000000000e+00, -8.734767442311465e-06, -2.358869507128791e-04, 0.000000000000000e+00, -2.367781706401741e-04, -2.371539085205781e-04, 0.000000000000000e+00, -2.379834896116341e-04, -2.340489043539495e-04, 0.000000000000000e+00, -2.354794959873615e-04, -2.355277743234135e-04, 0.000000000000000e+00, -2.368706707552720e-04, -2.377802454043223e-04, 0.000000000000000e+00, -2.377006697014390e-04, -2.377802454043223e-04, 0.000000000000000e+00, -2.377006697014390e-04, -4.345898864335488e-02, 0.000000000000000e+00, -4.426805174121456e-02, -3.647883925747788e-02, 0.000000000000000e+00, -3.665719709380057e-02, -5.112815276069076e-02, 0.000000000000000e+00, -4.954361250149533e-02, -5.258432813431418e-02, 0.000000000000000e+00, -4.873476570769385e-02, -3.957286508031041e-02, 0.000000000000000e+00, -4.615160235358268e-02, -3.957286508031043e-02, 0.000000000000000e+00, -4.615160235358268e-02, -1.168262754605172e+00, 0.000000000000000e+00, -1.157308940594178e+00, -5.780553159239382e-01, 0.000000000000000e+00, -5.716009231997634e-01, -1.348693850330393e+00, 0.000000000000000e+00, -1.299824161415017e+00, -3.969921771568280e-04, 0.000000000000000e+00, -3.977972358635658e-04, -1.234076206577098e+00, 0.000000000000000e+00, -1.523738839761802e+00, -1.234076206577098e+00, 0.000000000000000e+00, -1.523738839761804e+00, -1.087434675498954e+03, 0.000000000000000e+00, -9.570902014794680e+02, -7.043428317971994e+02, 0.000000000000000e+00, -6.473419752284174e+02, -3.221338291218659e+03, 0.000000000000000e+00, -3.019327004541104e+03, -2.712838273534208e+00, 0.000000000000000e+00, -2.808006148547030e+00, -1.573898299720307e+03, 0.000000000000000e+00, -1.207239634236777e+03, -1.573898299720307e+03, 0.000000000000000e+00, -1.207239634236775e+03, -5.620053350293213e-02, 0.000000000000000e+00, -5.536857531491873e-02, -5.660848410910194e-02, 0.000000000000000e+00, -5.578093320999580e-02, -5.649101271396027e-02, 0.000000000000000e+00, -5.566039896724995e-02, -5.637351272805099e-02, 0.000000000000000e+00, -5.554250746148778e-02, -5.643457668632822e-02, 0.000000000000000e+00, -5.560368604947973e-02, -5.643457668632822e-02, 0.000000000000000e+00, -5.560368604947973e-02, -6.227182348942562e-02, 0.000000000000000e+00, -6.150283455140385e-02, -8.203876857224587e-02, 0.000000000000000e+00, -8.118501764818772e-02, -7.929588271051032e-02, 0.000000000000000e+00, -7.833244725461933e-02, -7.387326418787231e-02, 0.000000000000000e+00, -7.293332980960092e-02, -7.690210494193880e-02, 0.000000000000000e+00, -7.597281197931190e-02, -7.690210494193880e-02, 0.000000000000000e+00, -7.597281197931190e-02, -2.905329610021336e-02, 0.000000000000000e+00, -2.926541978438342e-02, -4.250644709096132e-01, 0.000000000000000e+00, -4.228909326598844e-01, -3.454719284002230e-01, 0.000000000000000e+00, -3.469475531944202e-01, -2.355846382444570e-01, 0.000000000000000e+00, -2.309994313299807e-01, -3.087203771002106e-01, 0.000000000000000e+00, -3.114791264385339e-01, -3.087203771002108e-01, 0.000000000000000e+00, -3.114791264385341e-01, -9.887158047756042e-02, 0.000000000000000e+00, -9.906367133428924e-02, -6.240309674136543e+00, 0.000000000000000e+00, -6.127787220657019e+00, -3.505908889780921e+00, 0.000000000000000e+00, -3.379052082804258e+00, -3.263610191921725e-01, 0.000000000000000e+00, -3.450794841054757e-01, -2.212480771877017e+00, 0.000000000000000e+00, -2.391009507128410e+00, -2.212480771877018e+00, 0.000000000000000e+00, -2.391009507128410e+00, -9.704001549673212e+01, 0.000000000000000e+00, -9.033894159100907e+01, -1.217450049851526e+04, 0.000000000000000e+00, -1.266697704036181e+04, -3.869404420055699e+03, 0.000000000000000e+00, -3.525375376340263e+03, -2.562245042755217e+00, 0.000000000000000e+00, -2.634844727145898e+00, -2.738547261992043e+03, 0.000000000000000e+00, -1.463012083303155e+03, -2.738547261992047e+03, 0.000000000000000e+00, -1.463012083303161e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_2_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_2_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.653459625502359e-03, 1.653584739976007e-03, 1.653458224243836e-03, 1.653583702517390e-03, 1.653464948015384e-03, 1.653590166940088e-03, 1.653481689782358e-03, 1.653611319354950e-03, 1.653458694455312e-03, 1.653611022979653e-03, 1.653458694455312e-03, 1.653611022979653e-03, 5.037658548283692e-03, 5.032328671817578e-03, 5.039530039781651e-03, 5.033174938075017e-03, 5.071568134071224e-03, 5.076172281804172e-03, 5.077209901772570e-03, 5.073329339774250e-03, 5.034698411815809e-03, 5.102405959332632e-03, 5.034698411815809e-03, 5.102405959332632e-03, 7.849191542059765e-03, 7.970736078675366e-03, 7.843729332699294e-03, 7.937305208664347e-03, 7.502199029454922e-03, 7.852890305741666e-03, 8.988529435539024e-03, 9.206514551423685e-03, 7.566667747349796e-03, 1.002264216612284e-02, 7.566667747349796e-03, 1.002264216612284e-02, 4.623710735002413e-02, 6.013068554887777e-02, 4.748563056937636e-02, 6.329392818327106e-02, 1.241356584366031e-04, 3.999130771440395e-04, 1.234826230934166e-02, 1.708113499426319e-02, 4.383680681415937e-02, 4.537189038635489e-03, 4.383680681415943e-02, 4.537189038635488e-03, 3.993303394411169e-04, 4.269031436483632e-04, 4.247481090410560e-04, 4.603305776592131e-04, 1.711138647976313e-03, 1.900735288793672e-03, 1.931733775450397e-04, 1.928794107185089e-04, 3.426180633698711e-04, 2.281740561399715e-04, 3.426180633698663e-04, 2.281740561399748e-04, 6.947673079014229e-03, 6.949786422722062e-03, 6.947116888106649e-03, 6.949247907605276e-03, 6.947822495106353e-03, 6.949897916259701e-03, 6.947337657772426e-03, 6.949401394366859e-03, 6.947254141441171e-03, 6.949494956837759e-03, 6.947254141441171e-03, 6.949494956837759e-03, 1.220611649177928e-02, 1.228546705612861e-02, 1.263948801863222e-02, 1.270266309466220e-02, 1.221811791618442e-02, 1.228834757970175e-02, 1.262040346736442e-02, 1.269441256736241e-02, 1.244282659015474e-02, 1.251092125493304e-02, 1.244282659015474e-02, 1.251092125493304e-02, 4.703655672297579e-02, 4.781877801562128e-02, 4.709696475390888e-02, 4.762049523011058e-02, 3.521053660653818e-02, 4.122969159815758e-02, 3.671968749401667e-02, 4.053918866341118e-02, 4.892174810274013e-02, 4.741611864824569e-02, 4.892174810274011e-02, 4.741611864824572e-02, 6.353851031256376e-03, 6.351723652848850e-03, 2.573937231923923e-02, 2.568468496674759e-02, 5.167340945823323e-03, 6.089121068052893e-03, 1.227440140664423e-02, 1.228475503188338e-02, 1.072417773611563e-02, 1.645947760876255e-02, 1.072417773611560e-02, 1.645947760876243e-02, 1.002453051444246e-04, 1.021187571984400e-04, 1.686327913271594e-04, 1.584109189406634e-04, 3.626929949570115e-04, 4.011140860598012e-04, 3.273141777829353e-03, 3.800849289927894e-03, 1.161397481979064e-04, 4.153347477007026e-04, 1.161397481979078e-04, 4.153347477007122e-04, 6.073322475305550e-02, 6.052715059158301e-02, 6.101558524683773e-02, 6.081094043798516e-02, 6.092174436710971e-02, 6.071628631653347e-02, 6.083955507693128e-02, 6.063376727883800e-02, 6.088056249458902e-02, 6.067514282459413e-02, 6.088056249458902e-02, 6.067514282459413e-02, 6.141586026802819e-02, 6.128845079364686e-02, 6.450125901668437e-02, 6.447598633221216e-02, 6.537303027428486e-02, 6.526263242471042e-02, 6.440663756117058e-02, 6.422013931883790e-02, 6.488813820392039e-02, 6.480342819268574e-02, 6.488813820392034e-02, 6.480342819268568e-02, 4.161494574277541e-02, 4.262330617531566e-02, 3.879736971169798e-02, 3.915705957594883e-02, 4.834631964208058e-02, 4.979292481189458e-02, 5.477760163614477e-02, 5.424102739159704e-02, 5.813068202544264e-02, 5.845196376699807e-02, 5.813068202544267e-02, 5.845196376699809e-02, 5.511754041828921e-02, 5.681637752597303e-02, 1.798799747697000e-03, 1.781869754201420e-03, 2.257166727549195e-03, 2.420963380278787e-03, 6.232158418373792e-02, 7.487833390052544e-02, 5.657326452686876e-03, 7.321294654646190e-03, 5.657326452686819e-03, 7.321294654646233e-03, 3.461981543386269e-04, 3.523054188092914e-04, 3.219256428531541e-05, 2.528257193859768e-05, 1.827219659965084e-04, 1.998094233901557e-04, 5.924082436836202e-03, 6.957083593148362e-03, 1.921556708657532e-04, 3.872710089059345e-04, 1.921556708657570e-04, 3.872710089059271e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
