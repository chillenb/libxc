
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_2_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.086159574460819e+01, -2.086169392164829e+01, -2.086213225781575e+01, -2.200411043345322e+01, -2.200470148187570e+01, -2.314809743995695e+01, -3.507972655147432e+00, -3.874278441862300e+00, -3.874177855403499e+00, -3.874570618589013e+00, -3.874123233401011e+00, -3.508009669867968e+00, -5.950903747403592e-01, -6.703225659614410e-01, -7.220340297420014e-01, -6.563665052139481e-01, -5.852467558217315e-01, -7.292172825730547e-01, -1.750476926664480e-01, -1.779538391916417e-01, -7.746522908214192e-01, -1.410014309345837e-01, -1.817913838631405e-01, -1.805898761655398e-01, -6.334377415198949e-03, -6.493585288633547e-03, -3.574960916771593e-02, -3.651936780126268e-03, -5.097724907759947e-03, -5.097724907759947e-03, -5.592156081444966e+00, -5.592236139457960e+00, -5.592152727994679e+00, -5.592223948336877e+00, -5.392108775635472e+00, -5.392286790785196e+00, -2.184679347828713e+00, -2.200026187449077e+00, -2.173366807925329e+00, -2.187067537729057e+00, -1.982296616431469e+00, -2.198580033265434e+00, -5.985568894105175e-01, -6.896537973500999e-01, -6.036469671944134e-01, -6.217910026026454e-01, -6.121841372237169e-01, -6.556620805194746e-01, -9.669028960625137e-02, -1.740921253895107e-01, -8.946105477590516e-02, -2.104699889342748e+00, -1.145380767340136e-01, -1.145380767340135e-01, -2.739541764175649e-03, -3.569983237775839e-03, -2.733975642082597e-03, -5.756979814476810e-02, -3.434355866744014e-03, -3.434355866744015e-03, -6.225162177643886e-01, -6.230112317438412e-01, -6.019967250747897e-01, -6.140248692862289e-01, -6.036936836985431e-01, -6.132037238346226e-01, -6.061973836217954e-01, -4.993544794560149e-01, -5.272605935232935e-01, -5.823361059898974e-01, -5.739010587806584e-01, -5.410502718755732e-01, -6.877990490397364e-01, -2.402266973486198e-01, -2.635591898050542e-01, -3.496496669448855e-01, -3.371307949157285e-01, -3.025644131256375e-01, -5.046813737708442e-01, -3.288271161959487e-02, -4.805817116563543e-02, -3.728815880990159e-01, -7.660247877913302e-02, -7.660247877913302e-02, -8.379339638465743e-03, -9.541591330510029e-04, -1.883526025794748e-03, -6.579352344234213e-02, -3.153851061530539e-03, -3.007186253636724e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_2_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.996594761636879e+01, -2.996602504206513e+01, -2.996606146128323e+01, -2.996610771476070e+01, -2.996643838244240e+01, -2.996664418825969e+01, -2.996515345860712e+01, -2.752095212013940e+01, -2.996601531386095e+01, -2.752179607962474e+01, -2.752201945069719e+01, -2.752179607962474e+01, -4.331796958332729e+00, -4.511872746140631e+00, -4.331771091008087e+00, -4.331749498904312e+00, -4.331260459934829e+00, -4.331216916528616e+00, -4.331808713475601e+00, -4.331868494647749e+00, -4.331160630466670e+00, -4.331501398419075e+00, -4.510882352550151e+00, -4.331501398419074e+00, -7.745463228501963e-01, -7.800052884088605e-01, -7.726822375561023e-01, -8.741057123930736e-01, -8.597095127375333e-01, -8.548628578079377e-01, -8.606346255827235e-01, -7.572712532165399e-01, -7.876171465009812e-01, -7.212187507290269e-01, -8.800795162587121e-01, -8.380005522256870e-01, -1.925373626457422e-01, -2.342558681212722e-01, -1.947809253504170e-01, -2.377546767238422e-01, -1.030080374493295e+00, -9.002607321969818e-01, -1.762511987548170e-01, -1.786253793669301e-01, -2.367701960456788e-01, -1.283946982322284e-01, -2.367701960456786e-01, -1.193795145211972e-01, -7.872070117113694e-03, -8.365016883112317e-03, -8.029993705899120e-03, -8.836774661605287e-03, -4.434893925912705e-02, -4.845064530730528e-02, -4.732085696921553e-03, -4.653234809378637e-03, -7.022622160347837e-03, -3.996294964475957e-03, -7.022622160347837e-03, -3.996294964475956e-03, -6.853573619361141e+00, -6.851950000641565e+00, -6.857746812782196e+00, -6.855981990255484e+00, -6.853853178749867e+00, -6.852122981541741e+00, -6.857432087943823e+00, -6.855783950029932e+00, -7.328000452061314e+00, -6.853968597775973e+00, -6.855674497018701e+00, -7.326211518496723e+00, -2.459649238309196e+00, -2.458958148688442e+00, -2.472336293494384e+00, -2.471298817037219e+00, -2.449658090348096e+00, -2.451793539005771e+00, -2.460215712175203e+00, -2.462621607454877e+00, -2.474489802888668e+00, -2.479328114715043e+00, -2.474489802888668e+00, -2.466383405690479e+00, -7.336376475216143e-01, -8.036031167346597e-01, -8.231333305455925e-01, -8.254966608640597e-01, -6.631835608308233e-01, -6.863270785763008e-01, -6.918938606007287e-01, -7.187688401461491e-01, -7.691780806343933e-01, -7.972504782603907e-01, -7.691780806343934e-01, -7.260118792944699e-01, -1.226174435151563e-01, -1.237886435881827e-01, -1.999730226947764e-01, -2.340442142474602e-01, -1.109021640652666e-01, -1.168753994973869e-01, -2.416365181581385e+00, -2.415374076403530e+00, -1.403447400221491e-01, -1.486562261049437e-01, -1.403447400221490e-01, -1.486562261049438e-01, -3.456742573518305e-03, -3.689263603237778e-03, -4.553098622908933e-03, -4.622009498149655e-03, -3.404690143880841e-03, -3.605689895897918e-03, -7.637401764672980e-02, -7.316722732434412e-02, -3.477364678895488e-03, -4.775558534587002e-03, -3.477364678895485e-03, -4.775558534586998e-03, -8.082933622559243e-01, -8.118199344735352e-01, -7.903197030527890e-01, -7.939528103453201e-01, -8.235524313310516e-01, -8.266975687330365e-01, -8.244009263580012e-01, -8.053113572715795e-01, -8.239858464669829e-01, -8.271206708463583e-01, -8.239858464669829e-01, -8.027205857383573e-01, -7.847433867972954e-01, -7.877876299531101e-01, -6.104926402244431e-01, -6.639250763598822e-01, -6.472221718065703e-01, -7.160655361257194e-01, -6.965119661452344e-01, -6.993160170876447e-01, -6.699768705704080e-01, -6.729336917636431e-01, -6.699768705704079e-01, -7.376899865805737e-01, -8.517869395866543e-01, -9.364111103782464e-01, -2.917011929927774e-01, -2.932805598091409e-01, -2.993944303052147e-01, -3.469804843311227e-01, -4.337091552074576e-01, -4.385156661163581e-01, -3.876716203516851e-01, -3.873447931168349e-01, -3.876716203516848e-01, -3.612753345915672e-01, -5.623698738909163e-01, -5.656748856967762e-01, -4.352309675730202e-02, -4.381980234933028e-02, -6.056871565424021e-02, -6.259843277736704e-02, -4.145137917201400e-01, -4.193788927814741e-01, -9.486546478628519e-02, -1.001880793307831e-01, -9.486546478628514e-02, -1.001880793307831e-01, -1.096060638118314e-02, -1.135765846988960e-02, -1.224946979164053e-03, -1.227746680011854e-03, -2.427040300409733e-03, -2.581334412191084e-03, -8.544073166992427e-02, -8.657340105038791e-02, -3.293805837764677e-03, -4.377147059902226e-03, -3.293805837764676e-03, -4.261692734099487e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_2_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.833956094166397e-08, 0.000000000000000e+00, -2.834095910309771e-08, -2.833937851358590e-08, 0.000000000000000e+00, -2.834082629235488e-08, -2.833865367231295e-08, 0.000000000000000e+00, -2.833982684380186e-08, -2.834072957938901e-08, 0.000000000000000e+00, -2.943421784189017e-08, -2.833946401672244e-08, 0.000000000000000e+00, -2.943290023609903e-08, -2.943102992756120e-08, 0.000000000000000e+00, -2.943290023609903e-08, -2.783086407339004e-05, 0.000000000000000e+00, -2.704353580971091e-05, -2.783663164876495e-05, 0.000000000000000e+00, -2.783124453577236e-05, -2.794915754714338e-05, 0.000000000000000e+00, -2.796810354792967e-05, -2.789885409617056e-05, 0.000000000000000e+00, -2.789744804650704e-05, -2.783584824242952e-05, 0.000000000000000e+00, -2.799664441567372e-05, -2.705247297998481e-05, 0.000000000000000e+00, -2.799664441567372e-05, -1.008194731948603e-02, 0.000000000000000e+00, -1.024478225296062e-02, -1.005093719321535e-02, 0.000000000000000e+00, -9.738603644081351e-03, -8.866882060375964e-03, 0.000000000000000e+00, -8.841774134303555e-03, -9.286513318971738e-03, 0.000000000000000e+00, -1.005698422422059e-02, -1.013934245271738e-02, 0.000000000000000e+00, -9.455994382560218e-03, -9.688663097016048e-03, 0.000000000000000e+00, -8.670445434055924e-03, -1.283585800009953e+00, 0.000000000000000e+00, -1.236914355339273e+00, -1.293782813695135e+00, 0.000000000000000e+00, -1.259910723504700e+00, -2.267125933216770e-03, 0.000000000000000e+00, -2.991507802858312e-03, -8.099504503770546e-01, 0.000000000000000e+00, -9.398764547435895e-01, -9.618898287060863e-01, 0.000000000000000e+00, -9.017566610868253e-01, -9.618898287060861e-01, 0.000000000000000e+00, -1.251818460211172e+00, -2.536766271743765e+02, 0.000000000000000e+00, -2.252382657348430e+02, -3.651856045336700e+02, 0.000000000000000e+00, -2.065771182530176e+02, -8.689169055395684e+00, 0.000000000000000e+00, -5.321346428138163e+00, -5.987243211465022e+02, 0.000000000000000e+00, -6.223249586971104e+02, -3.103508013375356e+02, 0.000000000000000e+00, -1.251279563361575e+03, -3.103508013375356e+02, 0.000000000000000e+00, -1.251279563361574e+03, -8.727951058925657e-06, 0.000000000000000e+00, -8.736359441331085e-06, -8.727903888706622e-06, 0.000000000000000e+00, -8.736316656008666e-06, -8.728006810117786e-06, 0.000000000000000e+00, -8.736400275674831e-06, -8.727962638937585e-06, 0.000000000000000e+00, -8.736357633436085e-06, -8.471414402677046e-06, 0.000000000000000e+00, -8.736336131130544e-06, -8.727890298341905e-06, 0.000000000000000e+00, -8.479595041362871e-06, -2.357359839926420e-04, 0.000000000000000e+00, -2.366424055911211e-04, -2.371310789980654e-04, 0.000000000000000e+00, -2.379675195175220e-04, -2.338055525476640e-04, 0.000000000000000e+00, -2.352741160543269e-04, -2.354008970873454e-04, 0.000000000000000e+00, -2.367784423232496e-04, -2.378000678587603e-04, 0.000000000000000e+00, -2.339477838895798e-04, -2.378000678587603e-04, 0.000000000000000e+00, -2.376449821899932e-04, -4.411749889601501e-02, 0.000000000000000e+00, -4.300344197837178e-02, -3.739256357253026e-02, 0.000000000000000e+00, -3.755031489360806e-02, -5.177602497861348e-02, 0.000000000000000e+00, -5.033753154638924e-02, -5.432898482627282e-02, 0.000000000000000e+00, -5.029938141753862e-02, -4.014011967274091e-02, 0.000000000000000e+00, -4.491415425914849e-02, -4.014011967274093e-02, 0.000000000000000e+00, -4.692322038926916e-02, -1.100714053814512e+00, 0.000000000000000e+00, -1.085249270859501e+00, -6.844647253244753e-01, 0.000000000000000e+00, -5.617108021885567e-01, -1.253689967577183e+00, 0.000000000000000e+00, -1.222702122070396e+00, -4.109812403645483e-04, 0.000000000000000e+00, -4.118166531099789e-04, -1.182386161908506e+00, 0.000000000000000e+00, -1.475809850711965e+00, -1.182386161908507e+00, 0.000000000000000e+00, -1.475809850711966e+00, -1.407856488783651e+03, 0.000000000000000e+00, -8.052617709669645e+02, -6.297751755106904e+02, 0.000000000000000e+00, -5.737464759731947e+02, -3.024531928688896e+03, 0.000000000000000e+00, -2.826422374506130e+03, -2.489052517089343e+00, 0.000000000000000e+00, -3.877207493060971e+00, -1.257128986915404e+03, 0.000000000000000e+00, -1.190469645079935e+03, -1.257128986915404e+03, 0.000000000000000e+00, -1.190469645079935e+03, -5.644196401526325e-02, 0.000000000000000e+00, -5.560033767444753e-02, -5.682947469185601e-02, 0.000000000000000e+00, -5.599357049125078e-02, -5.584968831219291e-02, 0.000000000000000e+00, -5.504138547072033e-02, -5.587852173020080e-02, 0.000000000000000e+00, -5.576771559344294e-02, -5.586580823197502e-02, 0.000000000000000e+00, -5.505437473538975e-02, -5.586580823197502e-02, 0.000000000000000e+00, -5.582614803774046e-02, -6.280300473534563e-02, 0.000000000000000e+00, -6.200999762667225e-02, -8.216574325752944e-02, 0.000000000000000e+00, -7.808339681000853e-02, -7.956990153858477e-02, 0.000000000000000e+00, -7.525582679154803e-02, -7.429019050431453e-02, 0.000000000000000e+00, -7.334357159161244e-02, -7.727450570640208e-02, 0.000000000000000e+00, -7.632982170769784e-02, -7.727450570640207e-02, 0.000000000000000e+00, -7.326494570808260e-02, -2.989330243161856e-02, 0.000000000000000e+00, -2.891122903851469e-02, -4.214781884885446e-01, 0.000000000000000e+00, -4.192501554189558e-01, -3.668793110450511e-01, 0.000000000000000e+00, -3.430004288060297e-01, -2.327069486375369e-01, 0.000000000000000e+00, -2.308119588019514e-01, -3.062985152743245e-01, 0.000000000000000e+00, -3.090788921139371e-01, -3.062985152743247e-01, 0.000000000000000e+00, -3.149342851320927e-01, -9.929825214402853e-02, 0.000000000000000e+00, -9.952791927695633e-02, -9.250716036258147e+00, 0.000000000000000e+00, -9.035858752130469e+00, -3.291511064809386e+00, 0.000000000000000e+00, -3.180652256396502e+00, -3.287000891453219e-01, 0.000000000000000e+00, -3.480890047683949e-01, -2.092220431400398e+00, 0.000000000000000e+00, -2.271017439936678e+00, -2.092220431400399e+00, 0.000000000000000e+00, -2.271017439936677e+00, -1.338234811921181e+02, 0.000000000000000e+00, -1.237548473919225e+02, -9.317712782420582e+03, 0.000000000000000e+00, -9.254854583421589e+03, -5.822822054324538e+03, 0.000000000000000e+00, -5.298623236184172e+03, -3.466149400921215e+00, 0.000000000000000e+00, -3.630671235398288e+00, -2.251900442397788e+03, 0.000000000000000e+00, -1.442185086796662e+03, -2.251900442397794e+03, 0.000000000000000e+00, -2.238844249572419e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_2_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.260855216221017e-03, 1.260986608411985e-03, 1.260870190666324e-03, 1.260997458554551e-03, 1.260910146206715e-03, 1.261056908027305e-03, 1.260742487730272e-03, 1.682136482272246e-03, 1.260865040751998e-03, 1.682115957681025e-03, 1.682089912967437e-03, 1.682115957681025e-03, 8.590632852840738e-03, 2.428391750161909e-03, 8.591762572394813e-03, 8.590549568174234e-03, 8.613682501060278e-03, 8.617499197915981e-03, 8.605004477591549e-03, 8.604913884794597e-03, 8.589490368531212e-03, 8.624428848203346e-03, 2.426310611097589e-03, 8.624428848203346e-03, -1.654400692312760e-03, -1.429642965320368e-03, -1.716294684003154e-03, 2.582784206373484e-02, 2.230901794967258e-02, 2.186091929967636e-02, 2.346301676061482e-02, -2.081180246738931e-03, -1.267496572347433e-03, -2.840928108381369e-03, 2.623410116399993e-02, 2.015483517886828e-02, -1.063522285788049e-02, 6.264723064457112e-02, -1.070931403227181e-02, 6.680932319395383e-02, 9.700396459060217e-03, -2.347156221932248e-03, 1.689427049455527e-02, 2.053303467487680e-02, 5.012211946555387e-02, 6.939148305468372e-03, 5.012211946555385e-02, -1.460085216123507e-03, 4.016235192409504e-04, 4.279436220336857e-04, -1.234809685068797e-06, 4.628019177511542e-04, -1.008373420078201e-04, 2.023485922633564e-03, 2.057198829934948e-04, 2.033147529944079e-04, 3.487380410649309e-04, 2.589579577179425e-04, 3.487380410649309e-04, 2.589579577179382e-04, 6.955433676790199e-03, 6.957104160361780e-03, 6.954766095750755e-03, 6.956459387753105e-03, 6.955399035384034e-03, 6.957083775779025e-03, 6.954825900217857e-03, 6.956497700260611e-03, 5.844124216967176e-03, 6.956781653848053e-03, 6.955092033228405e-03, 5.845417986743160e-03, 1.372029244467177e-02, 1.375556289344868e-02, 1.395307344394257e-02, 1.397987429931607e-02, 1.349016298565242e-02, 1.359236780736966e-02, 1.371132878565327e-02, 1.381042802271734e-02, 1.401235898061289e-02, 2.646827554258544e-03, 1.401235898061289e-02, 1.390133823730889e-02, 5.815923969210021e-02, 3.124678759444027e-02, 5.645944095328937e-02, 5.650208013883056e-02, 5.693747377257369e-02, 5.861287955742886e-02, 6.105175342902395e-02, 6.040887433387431e-02, 5.728598180832134e-02, 3.211195894191331e-02, 5.728598180832134e-02, 5.919865710258800e-02, 7.382627657998919e-03, 7.497699826098673e-03, -7.174062995122395e-03, 2.798156889395281e-02, 6.143456841657953e-03, 7.073423372312610e-03, 1.821948186251586e-02, 1.822916659143339e-02, 1.221271955161673e-02, 1.842085717899775e-02, 1.221271955161678e-02, 1.842085717899774e-02, -5.046068580534989e-08, 1.310876823704775e-04, 1.927442780201472e-04, 1.836886464681103e-04, 3.871174314878275e-04, 4.297286719583489e-04, 3.841893529845408e-03, -5.678526216377386e-04, 1.713783667852276e-04, 4.205938482419644e-04, 1.713783667852255e-04, 4.205938482419697e-04, 6.169194863496440e-02, 6.145269276732811e-02, 6.207257601697710e-02, 6.183170257291760e-02, 5.813355234658119e-02, 5.801257886866319e-02, 5.879053602887879e-02, 6.159623104185555e-02, 5.846722582174139e-02, 5.833198485656620e-02, 5.846722582174139e-02, 6.165163179833180e-02, 6.340064924461482e-02, 6.319003087059932e-02, 6.660590602320768e-02, 2.859380631411471e-02, 6.794758633462206e-02, 4.125693867102734e-02, 6.700684956400177e-02, 6.678764798469732e-02, 6.771620920078641e-02, 6.751239352816914e-02, 6.771620920078635e-02, 4.677589680185034e-02, 5.341034845973546e-02, 3.843060584379373e-02, 4.107535833560738e-02, 4.153686321352839e-02, -6.166198891356955e-03, 5.676526837644578e-02, 1.266346181987988e-02, 7.625029334044117e-02, 7.091526112311532e-02, 7.137150256600282e-02, 7.091526112311523e-02, 2.416749038715581e-03, 6.677440744993542e-02, 6.750179155663390e-02, -1.003023246194573e-04, -1.003287566963386e-04, 2.474145392999806e-03, 2.647746379063433e-03, 8.917019829394093e-02, 9.406937960617899e-02, 6.383417217241360e-03, 8.276890703244076e-03, 6.383417217241297e-03, 8.276890703244034e-03, -1.462087180164887e-06, -1.603459842644950e-06, 5.551290016793851e-05, 5.551734099282675e-05, -7.260588162871084e-08, -9.254678553206489e-08, -1.188483184270849e-03, -1.389467422840951e-03, 2.609244507799226e-04, 3.922977161579650e-04, 2.609244507799214e-04, -5.516141326612483e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
