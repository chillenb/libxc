
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_regtm_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_regtm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.995101895654819e+01, -1.995108692283285e+01, -1.995142403762420e+01, -1.995031260328370e+01, -1.995105449033672e+01, -1.995105449033672e+01, -3.236651250387049e+00, -3.236644129320721e+00, -3.236551241982105e+00, -3.236844536748383e+00, -3.236664668261048e+00, -3.767663416444095e+00, -6.518060629845462e-01, -7.589499309517347e-01, -7.473656319548664e-01, -7.493361426747536e-01, -7.592278920746069e-01, -7.592278920746069e-01, -2.105194657302525e-01, -2.124991629237649e-01, -8.284183762325443e-01, -1.713760720397708e-01, -2.111253663657351e-01, -2.111253663657351e-01, -2.618598074319085e-02, -2.697687149761136e-02, -7.359323752810308e-02, -1.840511937076980e-02, -2.668829207074232e-02, -2.668829207074232e-02, -5.412148145803089e+00, -5.412654214319200e+00, -5.412199076545577e+00, -5.030478569339559e+00, -5.412408084416886e+00, -5.412408084416886e+00, -1.830508989820361e+00, -1.840724747640287e+00, -1.826572989290989e+00, -1.834377434966070e+00, -1.842663625695684e+00, -2.154928470340843e+00, -6.168364472747231e-01, -6.592195460911939e-01, -5.912145144580249e-01, -6.073808090878807e-01, -6.365388777349652e-01, -5.596894769661980e-01, -1.385981503556804e-01, -2.222341255360821e-01, -1.352914958240601e-01, -2.024117825777095e+00, -1.474293392178278e-01, -1.474293392178278e-01, -2.115670036612846e-02, -1.909359327440902e-02, -1.401379392537160e-02, -1.042419542305148e-01, -2.163381164216511e-02, -1.767664742802364e-02, -6.189015572447260e-01, -6.164341059589467e-01, -6.080582355974844e-01, -6.179461759047398e-01, -6.176016647540445e-01, -6.176016647540445e-01, -5.992777863463443e-01, -5.358426086969181e-01, -5.530661629737491e-01, -5.696376238934923e-01, -5.611049824885682e-01, -4.985638243036346e-01, -6.940565038294454e-01, -2.348991936363268e-01, -3.111286547978111e-01, -3.281122653617756e-01, -3.441555623841894e-01, -3.441555623841894e-01, -4.216710356276029e-01, -7.022196238270502e-02, -8.734989218613820e-02, -3.584347644423628e-01, -1.160121241937835e-01, -1.117137947605547e-01, -3.158118565702290e-02, -8.629454082496218e-03, -1.189095169556524e-02, -1.066184785470655e-01, -1.548476722014205e-02, -1.548476722014204e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_regtm_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_regtm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.780845953006539e+01, -2.780876695005830e+01, -2.781016637918520e+01, -2.780515844833496e+01, -2.780862110098114e+01, -2.780862110098114e+01, -4.214920602246830e+00, -4.215003917895926e+00, -4.217649588860342e+00, -4.216964572535710e+00, -4.214963781719052e+00, -4.292077241375807e+00, -7.406382724858909e-01, -7.818855170933622e-01, -7.555805051478647e-01, -7.638883923407054e-01, -7.825477997381624e-01, -7.825477997381624e-01, -2.124311211615433e-01, -2.157412055824094e-01, -8.703890774220175e-01, -1.489694247428616e-01, -2.134139357984337e-01, -2.134139357984337e-01, -1.434147718740430e-02, -1.484255588181506e-02, -4.927882463846711e-02, -9.459957228164135e-03, -1.468493950353824e-02, -1.468493950353829e-02, -6.942602442060842e+00, -6.945639476883901e+00, -6.942932164122128e+00, -7.714321818776698e+00, -6.944134212724741e+00, -6.944134212724741e+00, -2.323792895851874e+00, -2.349740891980054e+00, -2.312845042410307e+00, -2.333384428786958e+00, -2.355431757634291e+00, -2.405832505679749e+00, -7.377097079488507e-01, -8.282582392119034e-01, -6.886692105678187e-01, -7.369551864002617e-01, -7.748942336652178e-01, -7.511235982229020e-01, -1.370246196650410e-01, -2.098682865418572e-01, -1.337099630266991e-01, -2.468336781308790e+00, -1.263470874582549e-01, -1.263470874582549e-01, -2.115564475227065e-02, -9.874101356429119e-03, -7.264325520117879e-03, -1.036600976725127e-01, -2.163262885841987e-02, -9.125732848804949e-03, -8.195041323375654e-01, -8.087988999239398e-01, -8.286803759714489e-01, -8.156745571637432e-01, -8.141913417198690e-01, -8.141913417198690e-01, -7.910675401118361e-01, -6.362981948286925e-01, -6.794570618657042e-01, -7.215692236774754e-01, -6.998326497135026e-01, -6.778142966996342e-01, -8.601887203899549e-01, -2.518361650365565e-01, -3.232694626294256e-01, -4.180142601796102e-01, -3.724502410363135e-01, -3.724502410363135e-01, -5.521850780862382e-01, -4.599760245576845e-02, -6.113808089194222e-02, -4.099891045876490e-01, -1.148093999098436e-01, -8.811002719817565e-02, -1.716815451499371e-02, -4.335171782619910e-03, -6.055231281810427e-03, -8.405752636458899e-02, -7.969890214811199e-03, -7.969890214811187e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_regtm_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_regtm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.335986082241604e-08, -1.336102121284926e-08, -1.336598461604908e-08, -1.334712737917739e-08, -1.336047284651001e-08, -1.336047284651001e-08, -4.988327085290631e-06, -4.989116563969436e-06, -5.012235046955320e-06, -5.001664649558390e-06, -4.988451304110559e-06, -7.769194882521421e-06, -2.134316062468874e-03, -4.411374358015683e-03, -4.591686874377884e-03, -4.588297070684119e-03, -4.407170589612191e-03, -4.407170589612191e-03, -7.276709170074189e-01, -7.060912640923833e-01, -7.966966068391007e-04, -1.314016910657872e+00, -7.208817550475121e-01, -7.208817550475121e-01, -1.451372149914341e+03, -1.292803219073782e+03, -2.757838182380772e+01, -5.691909193163567e+03, -1.349710314774547e+03, -1.349710314774545e+03, -1.885713903635097e-06, -1.884859039362034e-06, -1.885626843503293e-06, -8.656631818853782e-06, -1.885277802121876e-06, -1.885277802121876e-06, -4.286775598405673e-05, -4.286747229576891e-05, -4.282634174449394e-05, -4.284012800739582e-05, -4.293850663036157e-05, -7.204903701918226e-05, -1.095954000645225e-02, -8.548982123189223e-03, -1.289583936445065e-02, -1.171135559896321e-02, -9.719727680870106e-03, -8.759242598492869e-03, -1.281278789291765e+00, -5.328597759921285e-01, -1.413339841443388e+00, -9.512181284270857e-05, -2.344727632940934e+00, -2.344727632940934e+00, -5.561792017164861e+02, -4.934269097620901e+03, -1.703086321739002e+04, -3.573848879464267e+00, -5.250584614492526e+02, -6.709357450061359e+03, -1.036330109021054e-02, -1.092843163712177e-02, -1.571311451570709e-02, -1.060138686004951e-02, -1.068157435508705e-02, -1.068157435508705e-02, -1.198304097540176e-02, -1.920689904800697e-02, -1.711255249117404e-02, -1.536499611253282e-02, -1.624679674407498e-02, -2.257669178306042e-02, -6.923426528480558e-03, -1.225551028057031e-01, -1.575722374878709e-01, -4.211242501827581e-02, -1.088767636424068e-01, -1.088767636424073e-01, -1.804414567450437e-02, -3.256248848473726e+01, -1.454592815081666e+01, -9.496890441097959e-02, -2.589864883280328e+00, -6.285231020365146e+00, -6.823678744239047e+02, -1.160503073024236e+05, -3.247158710506864e+04, -7.571464921611558e+00, -1.137071609985000e+04, -1.137071609985003e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_regtm_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_regtm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([7.077358404549093e-04, 7.078786098185035e-04, 7.085011993193511e-04, 7.061798398819458e-04, 7.078110602634222e-04, 7.078110602634222e-04, -7.574632528611463e-04, -7.569358840804064e-04, -7.410610532773660e-04, -7.471450300684420e-04, -7.573132540454850e-04, 2.788899389827460e-03, -1.200591526105043e-02, 1.164987855688472e-02, 1.131768515465620e-02, 1.151720244764277e-02, 1.165806555203491e-02, 1.165806555203491e-02, 3.999003357993394e-02, 4.021720526368341e-02, -1.018644798570809e-02, 2.969829688825617e-02, 4.004871018701087e-02, 4.004871018701087e-02, 1.478655691710211e-02, 1.514398714166034e-02, 2.214394790529304e-02, 6.358970008687901e-03, 1.532157749477499e-02, 1.532157749477496e-02, 2.808739722908256e-03, 2.814055603027432e-03, 2.809329696750480e-03, 1.460293079167113e-02, 2.811401140062840e-03, 2.811401140062840e-03, -2.244557334931386e-03, -2.061140883882718e-03, -2.325681726846293e-03, -2.178911726982920e-03, -2.015090558570506e-03, 4.734326803453048e-03, 1.861377154427998e-02, 2.069142963329921e-02, 1.840948097676729e-02, 1.965175971953467e-02, 1.894264376317162e-02, 2.314143632614853e-03, -2.861391076426981e-02, 3.116695099261944e-02, -3.029183256823133e-02, 5.989853825316003e-03, 3.261545234390092e-02, 3.261545234390092e-02, -6.064125755829367e-03, 7.391741654105404e-03, 1.074469699038726e-02, -2.168276797493454e-02, -6.262635335220594e-03, 7.601558295270952e-03, 3.079226698050919e-02, 2.858650545702674e-02, 4.989427986353726e-02, 2.995236021643964e-02, 2.964337567867657e-02, 2.964337567867657e-02, 3.089741759490670e-02, 2.108024930601135e-02, 2.247935916422224e-02, 2.492176057369581e-02, 2.351873374388965e-02, 1.076103468078588e-02, 1.851853745455138e-02, -3.598536841718693e-02, 2.894811797612976e-02, -1.191415525156432e-02, 2.825026256464244e-02, 2.825026256464230e-02, -4.731866329645542e-03, 2.072904827465530e-02, 2.310803780839694e-02, 2.949418108822498e-02, -3.123058533091166e-02, 3.055668497878086e-02, 1.118232842633282e-02, 3.556703832993274e-03, 6.831929736336392e-03, 3.196287980744946e-02, 7.905379933602821e-03, 7.905379933602795e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
