
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_pkzb_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_pkzb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.095555377551057e+01, -2.095558726065778e+01, -2.095580642929031e+01, -2.095530747740105e+01, -2.095555890556606e+01, -2.095555890556606e+01, -3.399252498895897e+00, -3.399237658822100e+00, -3.399047375973065e+00, -3.400779595415787e+00, -3.399673707554863e+00, -3.399673707554863e+00, -6.719406317233997e-01, -6.717886320589960e-01, -6.703534391711317e-01, -6.753695433426852e-01, -6.734951200090813e-01, -6.734951200090813e-01, -2.223075493088686e-01, -2.222128902995756e-01, -8.317273319693383e-01, -1.912464450087694e-01, -2.028780452946461e-01, -2.028780452946461e-01, -1.009363312322627e-02, -1.062396303352443e-02, -5.855815103666682e-02, -5.829394653685730e-03, -7.325078582876213e-03, -7.325078582876213e-03, -5.054591024737420e+00, -5.054280319318888e+00, -5.054593058486091e+00, -5.054318286669197e+00, -5.054424609650875e+00, -5.054424609650875e+00, -2.096577619482866e+00, -2.108268604485791e+00, -2.101273772768281e+00, -2.111690960504750e+00, -2.100919770924951e+00, -2.100919770924951e+00, -5.750446841811383e-01, -6.033356807028997e-01, -5.319055094943244e-01, -5.333784623337423e-01, -5.817858378461482e-01, -5.817858378461482e-01, -1.474436380318293e-01, -2.443987639855770e-01, -1.373265279251639e-01, -1.806281617859792e+00, -1.658975165386703e-01, -1.658975165386703e-01, -4.497766040025888e-03, -5.698748711147231e-03, -4.357536582069613e-03, -9.429820172262439e-02, -5.249480292581733e-03, -5.249480292581733e-03, -5.569662074383247e-01, -5.584029226152447e-01, -5.578902894450797e-01, -5.574676338561693e-01, -5.576773173775793e-01, -5.576773173775793e-01, -5.399846835134455e-01, -5.080704205363302e-01, -5.152438642447217e-01, -5.236447798017427e-01, -5.189322235418509e-01, -5.189322235418508e-01, -6.321785831423107e-01, -2.864012544812453e-01, -3.131497194177031e-01, -3.580718986960744e-01, -3.323392350729486e-01, -3.323392350729486e-01, -4.649614615546692e-01, -5.606354982265579e-02, -7.628304793735290e-02, -3.363295718094057e-01, -1.181993935869268e-01, -1.181993935869268e-01, -1.424515041086416e-02, -1.523312326065234e-03, -3.197499875893620e-03, -1.117348760224735e-01, -4.857411625551112e-03, -4.857411625551108e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_pkzb_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_pkzb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.533141997168193e+01, -2.533153552875251e+01, -2.533198664423041e+01, -2.533026796162654e+01, -2.533117744302939e+01, -2.533117744302939e+01, -4.099519631739371e+00, -4.099572788121964e+00, -4.100842601261403e+00, -4.098751999160466e+00, -4.099370845849129e+00, -4.099370845849129e+00, -7.666647806208376e-01, -7.651532445634839e-01, -7.250051796448628e-01, -7.291098737959113e-01, -7.295680167974619e-01, -7.295680167974619e-01, -1.520840480308897e-01, -1.533932541961654e-01, -8.382903111475748e-01, -1.486482069174923e-01, -1.414120770488956e-01, -1.414120770488957e-01, -1.345809736740356e-02, -1.416517337407563e-02, -7.770170840001679e-02, -7.772520555942459e-03, -9.766750739149264e-03, -9.766750739149264e-03, -6.272889882638738e+00, -6.276219477968048e+00, -6.273030979716773e+00, -6.275970828134171e+00, -6.274584659703885e+00, -6.274584659703885e+00, -2.014417224908922e+00, -2.035313733965662e+00, -1.980169988929175e+00, -1.998446007266829e+00, -2.042562044863232e+00, -2.042562044863232e+00, -6.931592054908894e-01, -7.883968713844572e-01, -6.391924982481448e-01, -6.937769490686314e-01, -7.089762377441005e-01, -7.089762377441005e-01, -1.664295514830254e-01, -1.781580009893343e-01, -1.596439760481307e-01, -2.374167366243344e+00, -1.581701149996794e-01, -1.581701149996794e-01, -5.997018038944298e-03, -7.598323882663330e-03, -5.810038723290856e-03, -1.206064848812739e-01, -6.999292858632322e-03, -6.999292858632322e-03, -7.359674824113150e-01, -7.240529244043130e-01, -7.282793424348298e-01, -7.317433400710551e-01, -7.300142727151226e-01, -7.300142727151226e-01, -7.183483335852576e-01, -5.397719124101940e-01, -5.944818014820658e-01, -6.467073980930921e-01, -6.207770847876894e-01, -6.207770847876893e-01, -8.254169464835978e-01, -1.952583873881430e-01, -2.347569380585246e-01, -3.801438549095078e-01, -2.981961778321737e-01, -2.981961778321737e-01, -5.000480924701979e-01, -7.450191544091714e-02, -1.003666800247641e-01, -3.817821214122038e-01, -1.406087850947030e-01, -1.406087850947031e-01, -1.899295285267665e-02, -2.031083094003921e-03, -4.263332454770944e-03, -1.371035044533113e-01, -6.476537960070044e-03, -6.476537960070037e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_pkzb_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_pkzb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.991449151732975e-09, -7.991351493727160e-09, -7.990941437094236e-09, -7.992396058386307e-09, -7.991630368728734e-09, -7.991630368728734e-09, -9.104576589922195e-06, -9.105118773731171e-06, -9.121081161362608e-06, -9.134103461278015e-06, -9.126944978401023e-06, -9.126944978401023e-06, -4.153556520366845e-03, -4.181985757701052e-03, -5.102666483303547e-03, -5.483771299539593e-03, -5.329510526538549e-03, -5.329510526538549e-03, -1.391845295152410e+00, -1.369482706093615e+00, 1.131484185559505e-03, -1.964689218050834e+00, -1.879407769010258e+00, -1.879407769010257e+00, -1.606449373645701e-02, -1.959312885048356e-02, -3.120877145357117e-01, -5.732338474644364e-03, -1.182661175578483e-02, -1.182661175578490e-02, -2.248195529762705e-06, -2.245805301457229e-06, -2.248110085878388e-06, -2.245998788575167e-06, -2.246971180719075e-06, -2.246971180719075e-06, -1.143815533595163e-04, -1.117541819326476e-04, -1.170792932503810e-04, -1.147159641043034e-04, -1.116307319997973e-04, -1.116307319997973e-04, -1.303287462100604e-02, -8.740958877386561e-03, -1.632511919592892e-02, -1.240699765182237e-02, -1.223131099307698e-02, -1.223131099307698e-02, -1.402696155649068e+00, -8.870333727989118e-01, -1.416079747672746e+00, -9.355413044830311e-05, -2.219540862964622e+00, -2.219540862964622e+00, -8.164509019470150e-03, -9.275959012998670e-03, -6.662550731914091e-02, -1.134639156213872e+00, -3.720563145371986e-02, -3.720563145371962e-02, -1.292579536577698e-02, -1.344907622336282e-02, -1.326474640075210e-02, -1.311274866608518e-02, -1.318868294595217e-02, -1.318868294595217e-02, -1.415839994303044e-02, -2.922844380168430e-02, -2.380960784182502e-02, -1.933738886325160e-02, -2.148138508271585e-02, -2.148138508271586e-02, -7.016084955975034e-03, -5.118101060527530e-01, -3.115946337100461e-01, -1.058298004865358e-01, -1.932282795434196e-01, -1.932282795434198e-01, -3.870294001823806e-02, -2.220685817931345e-01, -4.910974010786566e-01, -1.224188179459603e-01, -2.046907419384146e+00, -2.046907419384145e+00, -3.881032875658046e-02, 2.037211288176704e-03, -7.249179774588423e-03, -1.686999493446472e+00, -4.013394646963463e-02, -4.013394646963475e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_pkzb_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_pkzb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([3.207585369316993e-04, 3.207565277514990e-04, 3.207530280459525e-04, 3.207830271976267e-04, 3.207665318778983e-04, 3.207665318778983e-04, 1.023030621679959e-03, 1.023270092707521e-03, 1.030541566318291e-03, 1.037109859212498e-03, 1.032483378223008e-03, 1.032483378223008e-03, -1.222116607698902e-03, -1.189780720764812e-03, 1.139084436496739e-04, 1.506808113158472e-03, 1.003535628985624e-03, 1.003535628985624e-03, 3.963950261690542e-02, 4.019385731964861e-02, -1.345478959308287e-02, 2.393835301413010e-02, 3.266852685752258e-02, 3.266852685752258e-02, 2.331165651337491e-08, 3.307316945185595e-08, 8.444871861654651e-05, 1.534183422680633e-09, 6.411278950149428e-09, 6.411278950149460e-09, 1.285173660475095e-03, 1.283694695187465e-03, 1.285150946386740e-03, 1.283843446575379e-03, 1.284400503386817e-03, 1.284400503386817e-03, 3.972455354823477e-03, 3.984614318286880e-03, 4.064343126267881e-03, 4.076999910511875e-03, 3.934410820998827e-03, 3.934410820998827e-03, 9.621045865207021e-03, 7.127686753379558e-03, 8.107071300259746e-03, 4.927890263106387e-03, 9.450260518304568e-03, 9.450260518304568e-03, 6.265381177220112e-03, 2.659728246909484e-02, 5.004608147446810e-03, 1.504628421378584e-03, 1.608332633188353e-02, 1.608332633188353e-02, 6.532369692232920e-10, 2.101804870338784e-09, 7.383556382044157e-09, 1.250993934391662e-03, 6.765358682492067e-09, 6.765358682492028e-09, 9.689253461963370e-03, 1.021575819701538e-02, 1.003215248165221e-02, 9.878873672959223e-03, 9.955480764637380e-03, 9.955480764637380e-03, 9.447900067381857e-03, 1.579802378956660e-02, 1.387534926598668e-02, 1.197248115417517e-02, 1.288465666604078e-02, 1.288465666604079e-02, 6.162157877629260e-03, 3.000935121799207e-02, 2.903384293685017e-02, 1.721251394186781e-02, 2.466044544185847e-02, 2.466044544185849e-02, 1.511320534853649e-02, 5.409290145825807e-05, 2.900725882303856e-04, 1.722101624317325e-02, 4.668823498538022e-03, 4.668823498538020e-03, 1.356233445067303e-07, -2.042842165062852e-11, 3.278228658051914e-10, 3.292453388589521e-03, 6.035180465684152e-09, 6.035180465684147e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
