
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_pkzb_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_pkzb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.989578641632927e+01, -1.989584634682570e+01, -1.989612812123048e+01, -1.989523645748988e+01, -1.989570148323662e+01, -1.989570148323662e+01, -3.236982508605571e+00, -3.236973254002550e+00, -3.236791876533333e+00, -3.237157103401302e+00, -3.236781502355651e+00, -3.718994785424979e+00, -6.589990445635920e-01, -8.053749357811720e-01, -8.066811818612667e-01, -8.026086495659027e-01, -8.036328722073414e-01, -8.036328722073414e-01, -2.271143340568130e-01, -2.280693122172185e-01, -8.741896826119328e-01, -2.021925110466595e-01, -2.139268374319027e-01, -2.139268374319028e-01, -1.009363345877956e-02, -1.062396387328042e-02, -5.857599144578381e-02, -5.829394924631750e-03, -7.325079230387904e-03, -7.325079230387904e-03, -5.055942976879209e+00, -5.055615052335704e+00, -5.055916812040897e+00, -4.863511681203769e+00, -5.055781884425761e+00, -5.055781884425761e+00, -1.832696776882953e+00, -1.843107603704669e+00, -1.825512490179566e+00, -1.834390675813518e+00, -1.842010292218051e+00, -2.153348268024752e+00, -5.984454733534490e-01, -6.260812702011003e-01, -5.719996976666228e-01, -5.749608465020449e-01, -6.033682595552177e-01, -5.536024156641289e-01, -1.483884207007689e-01, -2.498122245337498e-01, -1.382565844145813e-01, -1.934131167316342e+00, -1.694410791228073e-01, -1.694410791228073e-01, -4.497766430578667e-03, -5.698749373887976e-03, -4.357537119663708e-03, -9.454876258407385e-02, -5.249481346484305e-03, -5.249481418275450e-03, -5.596154935330123e-01, -5.610287238884997e-01, -5.508041212774579e-01, -5.601100531019825e-01, -5.603175271872463e-01, -5.603175271872463e-01, -5.450640865131856e-01, -5.115117274392084e-01, -5.194390279915296e-01, -5.283755926233121e-01, -5.236694921724435e-01, -4.901209717365907e-01, -6.624192916470852e-01, -2.423648867767081e-01, -3.243499987100551e-01, -3.258266913041767e-01, -3.482370740246920e-01, -3.482370740246919e-01, -4.216194193063522e-01, -5.606994340617181e-02, -7.635865549506786e-02, -3.555554405174635e-01, -1.186068455861534e-01, -1.192255710605123e-01, -1.424520172252588e-02, -1.523312329906490e-03, -3.197499896224084e-03, -1.122079438017937e-01, -4.857412323260049e-03, -4.857412323260045e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_pkzb_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_pkzb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.676663950850509e+01, -2.676671979475380e+01, -2.676709749525828e+01, -2.676590292779714e+01, -2.676652590664736e+01, -2.676652590664736e+01, -4.212567307724011e+00, -4.212667007758120e+00, -4.215354022446730e+00, -4.214653421909374e+00, -4.214290855471410e+00, -3.600420397511725e+00, -7.115841348385803e-01, -5.960071082881530e-01, -5.723127513636698e-01, -5.797497278128265e-01, -5.779634700714570e-01, -5.779634700714570e-01, -1.554880563983168e-01, -1.562578817812539e-01, -7.116598934017137e-01, -1.892045471160653e-01, -1.667984416239465e-01, -1.667984416239466e-01, -1.345810024839815e-02, -1.416518058720228e-02, -7.785162397766347e-02, -7.772522901455217e-03, -9.766756327439246e-03, -9.766756327439246e-03, -6.270811595072589e+00, -6.274169035517943e+00, -6.270996100916377e+00, -6.536352599874163e+00, -6.272498898855937e+00, -6.272498898855937e+00, -2.320687058646212e+00, -2.349173558336688e+00, -2.298705463419157e+00, -2.324650889701378e+00, -2.346939823524628e+00, -1.969481855787657e+00, -6.558466472857289e-01, -7.550748281796056e-01, -5.758239229781943e-01, -6.319904507797389e-01, -6.747224642728498e-01, -7.424520813189027e-01, -1.835141108089257e-01, -1.919534949781336e-01, -1.741158697061962e-01, -2.187750543660831e+00, -1.763458618499641e-01, -1.763458618499641e-01, -5.997021538256575e-03, -7.598329605995777e-03, -5.810043379893553e-03, -1.242391386849651e-01, -6.999305291723077e-03, -6.999302605084300e-03, -7.323121077701834e-01, -7.202642365631420e-01, -7.376722579555639e-01, -7.280344353089720e-01, -7.262839157765648e-01, -7.262839157765648e-01, -7.114225755463086e-01, -5.343797713569965e-01, -5.877434743733466e-01, -6.393484137753676e-01, -6.132403256080413e-01, -6.591914008054937e-01, -7.808321002616793e-01, -2.003483662800341e-01, -2.311660988893725e-01, -4.111520828872051e-01, -2.805496950597437e-01, -2.805496950597435e-01, -5.511174470359226e-01, -7.455568878644574e-02, -1.009886274382762e-01, -3.514558876254504e-01, -1.500235171087897e-01, -1.478298942312780e-01, -1.899339449083081e-02, -2.031083101707621e-03, -4.263332630218161e-03, -1.405430337247648e-01, -6.476544009574037e-03, -6.476544009574031e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_pkzb_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_pkzb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.158053657561362e-09, -6.158030391155959e-09, -6.157887462831598e-09, -6.158237430707342e-09, -6.158059641799182e-09, -6.158059641799182e-09, -4.413231047767508e-06, -4.414980614608270e-06, -4.460646794462972e-06, -4.440615480196795e-06, -4.444611915887802e-06, -1.185421267619679e-05, 1.862859135908193e-03, -7.542431379467506e-03, -7.870616463825246e-03, -7.864006158156295e-03, -7.863831068670750e-03, -7.863831068670750e-03, -1.315013856265388e+00, -1.289332757267862e+00, 2.891707466313330e-03, -1.144722848686629e+00, -1.408698210344980e+00, -1.408698210344979e+00, -1.541627487316869e-02, -1.816654816375995e-02, -1.807849231087881e-01, -3.231946027802023e-03, -8.381554302440680e-03, -8.381554302440680e-03, -2.250149149516305e-06, -2.247736994752825e-06, -2.250023062804180e-06, -1.873355861560049e-06, -2.248934032983462e-06, -2.248934032983462e-06, -2.827330451842234e-05, -3.074451759253735e-05, -2.607696015184009e-05, -2.854000391804278e-05, -3.064440498720399e-05, -1.140546132950069e-04, -1.457350719932658e-02, -1.016175623937068e-02, -2.000669588528357e-02, -1.701704176677320e-02, -1.361552444469323e-02, -8.614280393835527e-03, 1.093874044944750e+00, -7.762766817180412e-01, 1.008583747598203e+00, -1.263268831458273e-04, -1.507558826475095e+00, -1.507558826475095e+00, 1.238552123587322e-03, -2.567124031226286e-03, -3.451016983858103e-02, 6.791091446705654e-01, 1.331892651203435e-02, -1.190681481656558e-02, -1.319060350896998e-02, -1.369873267151655e-02, -1.248484111188301e-02, -1.337227115081871e-02, -1.344611074055708e-02, -1.344611074055708e-02, -1.475460762602714e-02, -2.954566554014234e-02, -2.426858646984783e-02, -1.989448862011156e-02, -2.202549213800474e-02, -1.581577345561310e-02, -8.492602112308402e-03, 4.587932725066440e-01, -2.995158202578469e-01, -2.666847677351717e-02, -1.954716521715869e-01, -1.954716521715870e-01, -1.634924467972593e-02, -1.698382126339550e-01, -2.543938840695680e-01, -1.376864117502179e-01, 1.673083620963398e+00, -1.129632229056017e+00, -1.014162156097914e-02, -2.485352373231672e-04, -5.316154501017845e-03, -1.156608592189225e+00, -1.734572869525786e-02, -1.734572869525783e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_pkzb_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_pkzb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.400888529611432e-04, 1.400926362824747e-04, 1.401076547340501e-04, 1.400516787799757e-04, 1.400812628196739e-04, 1.400812628196739e-04, -7.774562046773267e-04, -7.768139378850837e-04, -7.599088466988665e-04, -7.666621847036402e-04, -7.660170784871122e-04, 2.401690350833683e-03, -1.594675323052016e-02, 1.218951996541462e-02, 1.196650180786819e-02, 1.214716124849246e-02, 1.210826282085276e-02, 1.210826282085276e-02, 3.879932554046250e-02, 3.954905842841919e-02, -1.841707317807437e-02, 1.605852660686034e-02, 2.714172113332176e-02, 2.714172113332175e-02, 2.243363290586572e-08, 3.082456627996797e-08, 5.124196796070446e-05, 9.061136644076089e-10, 4.662138387674188e-09, 4.662138387674188e-09, 1.288182025495015e-03, 1.286668858776746e-03, 1.288096719346417e-03, 7.497319637373025e-04, 1.287422851678408e-03, 1.287422851678408e-03, -2.368457542991316e-03, -2.144096827484278e-03, -2.550668648318410e-03, -2.341528170096192e-03, -2.157194686626670e-03, 4.308387591963499e-03, 1.324151646964706e-02, 1.098093573941149e-02, 1.512735129822915e-02, 1.373230578486308e-02, 1.280288483565205e-02, 2.010814275853176e-03, -7.826984267252332e-03, 2.417751617668243e-02, -5.673246909952382e-03, 3.932985479637250e-03, 1.161946909493682e-02, 1.161946909493682e-02, -2.144235037446572e-10, 6.724137173679080e-10, 4.041145327710053e-09, -1.136096352703638e-03, -3.666229411545933e-09, 2.437716407195512e-09, 1.024377351187029e-02, 1.073967915445571e-02, 8.442166563100212e-03, 1.042263572867493e-02, 1.049501852511408e-02, 1.049501852511408e-02, 1.059202097985274e-02, 1.633590497137397e-02, 1.463791004425340e-02, 1.293337702816237e-02, 1.380007612779583e-02, 4.558711068876715e-03, 1.079474800023305e-02, -6.568611131460975e-02, 2.985264412903081e-02, -1.392980182110605e-02, 2.806866141026106e-02, 2.806866141026107e-02, -5.115899467250508e-03, 4.222724600096476e-05, 1.596713905073226e-04, 2.471488831218801e-02, -5.900346756213284e-03, 2.759420531064195e-03, 4.148147152233756e-08, 1.243453608481683e-12, 2.459748969140980e-10, 2.344713956682750e-03, 2.813487479176434e-09, 2.813487479176422e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
