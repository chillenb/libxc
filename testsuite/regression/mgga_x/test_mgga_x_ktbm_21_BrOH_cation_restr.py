
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_21_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_21", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.496060802705806e+01, -2.496068150872105e+01, -2.496115084278980e+01, -2.496006166710773e+01, -2.496061200090589e+01, -2.496061200090589e+01, -3.410288083905744e+00, -3.410432321310906e+00, -3.414550815410148e+00, -3.415629200729067e+00, -3.414135493774022e+00, -3.414135493774022e+00, -5.887615362893677e-01, -5.880667128078687e-01, -5.724737571082705e-01, -5.834666388105608e-01, -5.803549619559896e-01, -5.803549619559896e-01, -1.643372214895978e-01, -1.674281365158496e-01, -6.473712855684409e-01, -1.137547009091570e-01, -1.312510433902299e-01, -1.312510433902299e-01, -5.035328498299451e-03, -5.298851128841312e-03, -2.924947721060191e-02, -2.900146671429751e-03, -3.647854199575120e-03, -3.647854199575121e-03, -6.106691329142477e+00, -6.107027097664868e+00, -6.106787687531423e+00, -6.107080802237721e+00, -6.106821044562960e+00, -6.106821044562960e+00, -2.094018838829881e+00, -2.129339346687219e+00, -2.083931139411678e+00, -2.116112547747368e+00, -2.118360173447230e+00, -2.118360173447230e+00, -6.336327109853588e-01, -6.832248187666657e-01, -5.493742485950408e-01, -5.616520726762391e-01, -6.483833455411543e-01, -6.483833455411543e-01, -7.731796412618736e-02, -1.565860846463062e-01, -7.133515797139042e-02, -1.928069664149309e+00, -9.244298166004128e-02, -9.244298166004131e-02, -2.233707418088096e-03, -2.830362495395977e-03, -2.167286067109068e-03, -4.763092278995530e-02, -2.607805787599670e-03, -2.607805787599671e-03, -6.690602348214961e-01, -6.716712780520393e-01, -6.708984672652933e-01, -6.701323874907925e-01, -6.705249020941229e-01, -6.705249020941229e-01, -6.431007001657174e-01, -5.642564995273470e-01, -5.968673107266286e-01, -6.207497445721109e-01, -6.089780275636058e-01, -6.089780275636058e-01, -7.025560364317796e-01, -2.069605881064020e-01, -2.571111281197498e-01, -3.513062480153660e-01, -3.055780429229135e-01, -3.055780429229135e-01, -4.867216206663744e-01, -2.803218692349464e-02, -3.821388581964510e-02, -3.493404945440542e-01, -6.115381090366161e-02, -6.115381090366160e-02, -7.075332966999262e-03, -7.607984866998051e-04, -1.592517875268299e-03, -5.749225485296865e-02, -2.414592683579065e-03, -2.414592683579063e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_21_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_21", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.980446924720436e+01, -2.980457430633672e+01, -2.980492220863367e+01, -2.980335562840248e+01, -2.980419346785701e+01, -2.980419346785701e+01, -4.892342418832227e+00, -4.892501127634455e+00, -4.896784259920376e+00, -4.895849036202706e+00, -4.895295226192387e+00, -4.895295226192387e+00, -8.247250651846731e-01, -8.232232175461014e-01, -7.905025162938492e-01, -8.094220122566126e-01, -8.043874846798991e-01, -8.043874846798991e-01, -2.208152282564004e-01, -2.253500513318885e-01, -8.620660359648213e-01, -1.508166546750287e-01, -1.748603755794006e-01, -1.748603755794006e-01, -6.556850879353890e-03, -6.904985606219063e-03, -3.844137286369706e-02, -3.813517477323411e-03, -4.778268046991938e-03, -4.778268046991939e-03, -7.321442372737316e+00, -7.325548869930412e+00, -7.321560939213558e+00, -7.325188892266195e+00, -7.323557008906391e+00, -7.323557008906391e+00, -2.751865493297875e+00, -2.776810426161023e+00, -2.736222897326847e+00, -2.758920614420906e+00, -2.773433276613955e+00, -2.773433276613955e+00, -8.440261180394972e-01, -9.542686362365690e-01, -7.741604564027865e-01, -8.349316775645602e-01, -8.594632841471226e-01, -8.594632841471226e-01, -1.019691149563162e-01, -2.081395995253035e-01, -9.411342001690873e-02, -2.873394047882080e+00, -1.218678430724575e-01, -1.218678430724575e-01, -2.987863531404299e-03, -3.757249701044169e-03, -2.853590402953919e-03, -6.282618073284398e-02, -3.455948356146744e-03, -3.455948356146748e-03, -8.839854993838313e-01, -8.594131279413039e-01, -8.676719388658588e-01, -8.748219144505902e-01, -8.712126240405795e-01, -8.712126240405795e-01, -8.684459454716471e-01, -6.882634813708289e-01, -7.181158962860168e-01, -7.635131012064603e-01, -7.383948444195785e-01, -7.383948444195785e-01, -1.000600287186494e+00, -2.775287100233140e-01, -3.477108440973808e-01, -4.827528200560998e-01, -4.138961202024913e-01, -4.138961202024912e-01, -6.411159538439194e-01, -3.666768089082301e-02, -5.030844237167900e-02, -4.752073293790441e-01, -8.051182512359574e-02, -8.051182512359566e-02, -9.398218937221103e-03, -1.025283094646891e-03, -2.084729607100630e-03, -7.542518849295229e-02, -3.187545929852664e-03, -3.187545929852659e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_21_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_21", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.323121791499932e-08, -2.323112490100870e-08, -2.323068778076166e-08, -2.323208991642046e-08, -2.323135838310911e-08, -2.323135838310911e-08, -1.641089733620971e-05, -1.641501397809525e-05, -1.652383198484720e-05, -1.648669925985857e-05, -1.649213318364389e-05, -1.649213318364389e-05, -4.402770618934992e-03, -4.381704830034663e-03, -3.911488424816908e-03, -4.279873581560080e-03, -4.183527531407222e-03, -4.183527531407222e-03, -6.083054265509489e-01, -6.222727268484225e-01, -8.163405096005602e-04, -3.180238513058931e-01, -4.363225330209703e-01, -4.363225330209702e-01, -6.233145862293935e+01, -5.615324614105079e+01, -1.130467506487365e+00, -1.042622262554246e+02, -9.518617153878640e+01, -9.518617153878600e+01, -7.065572102373921e-06, -7.067200324765560e-06, -7.065813868555943e-06, -7.067242523633077e-06, -7.066319273912794e-06, -7.066319273912794e-06, -1.505364720262855e-04, -1.537129109486976e-04, -1.491696959765107e-04, -1.522767678728255e-04, -1.529668124207392e-04, -1.529668124207392e-04, -3.080067016148290e-02, -2.711778800843685e-02, -3.177965043465227e-02, -3.330350897251153e-02, -3.051253629028532e-02, -3.051253629028532e-02, -3.123685615888494e-01, -2.591065484891355e-01, -3.313260331797688e-01, -2.685836945517114e-04, -4.883690719128851e-01, -4.883690719128855e-01, 4.651648812621267e+01, -3.773569604911626e+01, -4.605446365397477e+02, -5.525335490134498e-01, -1.053727719674720e+02, -1.053727719674722e+02, -4.531918382027431e-02, -4.551765328640765e-02, -4.547954859275647e-02, -4.542315072157280e-02, -4.545396882876527e-02, -4.545396882876527e-02, -4.976002082374864e-02, -5.908339086772936e-02, -5.990537750999799e-02, -5.773643018987405e-02, -5.913972149735926e-02, -5.913972149735926e-02, -2.099168809108176e-02, -2.142310359196173e-01, -1.849828542482797e-01, -1.383165247975862e-01, -1.779141240646737e-01, -1.779141240646737e-01, -6.522228516551794e-02, -1.481238587156641e+00, -6.634265604502068e-01, -2.157164567753636e-01, -6.186917419550688e-01, -6.186917419550692e-01, -4.666088767840308e+00, 2.855155406715951e+03, -7.633211281871179e+02, -7.665787610181062e-01, -2.252679395473647e+02, -2.252679395473652e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_21_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_21", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_21_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_21", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [3.341667919282265e-03, 3.341650813064086e-03, 3.341619768442949e-03, 3.341875290228420e-03, 3.341734988042166e-03, 3.341734988042166e-03, 1.030532263891262e-02, 1.030816749346362e-02, 1.038644172370644e-02, 1.038704983325946e-02, 1.037411315796850e-02, 1.037411315796850e-02, 1.557136877681939e-02, 1.547652608541422e-02, 1.361833155913905e-02, 1.621905271132870e-02, 1.542875815109165e-02, 1.542875815109165e-02, 7.654212365797658e-02, 8.102321504391874e-02, 1.739441748496628e-03, 1.405411813000908e-02, 2.974770609837625e-02, 2.974770609837623e-02, 2.160327725530958e-04, 2.255216149021566e-04, 7.749333938405062e-04, 6.239617122142665e-05, 1.184239398415016e-04, 1.184239398415000e-04, 1.333753707889373e-02, 1.331965204232847e-02, 1.333701134749061e-02, 1.332121021193817e-02, 1.332832800650172e-02, 1.332832800650172e-02, 2.426178629073069e-02, 2.536982650134454e-02, 2.411073458840318e-02, 2.515847105504339e-02, 2.494212335450774e-02, 2.494212335450774e-02, 9.764975951771489e-02, 8.734161439742699e-02, 7.880414253725493e-02, 7.627906558901502e-02, 9.879714289186486e-02, 9.879714289186486e-02, 4.449864892191775e-03, 3.147202075358051e-02, 3.661024376853150e-03, 2.354706411126578e-02, 1.246189521575350e-02, 1.246189521575350e-02, -9.231609110320591e-06, 1.832377086294803e-05, 1.133254284871825e-04, 1.737732157471024e-03, 4.123208749120094e-05, 4.123208749121023e-05, 9.825349737961123e-02, 1.054533808610303e-01, 1.029799674165238e-01, 1.008819552399303e-01, 1.019360573048312e-01, 1.019360573048312e-01, 9.874165687351526e-02, 1.381771412422106e-01, 1.381970231125459e-01, 1.265088666713734e-01, 1.333056256192866e-01, 1.333056256192867e-01, 7.920189543607713e-02, 5.518677099867270e-02, 7.853661829464637e-02, 1.071475437535023e-01, 1.057527616242061e-01, 1.057527616242061e-01, 1.154507845598508e-01, 9.225227441612846e-04, 1.041896532038652e-03, 1.409460013189966e-01, 4.397261704509277e-03, 4.397261704509238e-03, 3.564520849045341e-05, -1.317629591164427e-05, 7.935810692126319e-05, 4.646163752959366e-03, 7.408308947921572e-05, 7.408308947921371e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
