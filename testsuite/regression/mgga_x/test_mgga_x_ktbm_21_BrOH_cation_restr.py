
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_21_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_21", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.175671393355705e+01, -2.175684555522126e+01, -2.175742089097565e+01, -2.175546756366117e+01, -2.175649238404205e+01, -2.175649238404205e+01, -3.047984435603637e+00, -3.048107068063295e+00, -3.051402675094920e+00, -3.050344967051335e+00, -3.050141300339876e+00, -3.943887954742644e+00, -5.453592913488612e-01, -6.852570373635756e-01, -6.525545056022911e-01, -6.646132943465235e-01, -6.619153463688249e-01, -6.619153463688249e-01, -1.665306593985937e-01, -1.702181407973491e-01, -6.317867731650011e-01, -1.162661466833728e-01, -1.343535999924002e-01, -1.343535999924002e-01, -5.036676346594124e-03, -5.301416480313074e-03, -2.935173234868659e-02, -2.908520769620284e-03, -3.654916517548048e-03, -3.654916517548048e-03, -6.110939953554293e+00, -6.111227041682386e+00, -6.110948001130838e+00, -5.491358095537372e+00, -6.111089168643999e+00, -6.111089168643999e+00, -1.667289669721738e+00, -1.688293450146900e+00, -1.651803258120461e+00, -1.670147024301474e+00, -1.686630562060528e+00, -2.190795519177313e+00, -6.879606847063254e-01, -7.514918656140854e-01, -6.233131084844301e-01, -6.620752770387440e-01, -7.013196164757393e-01, -5.720124419563376e-01, -7.675811207650822e-02, -1.583143078161963e-01, -7.116355536323415e-02, -2.261362687220849e+00, -9.344754767508524e-02, -9.344754767508523e-02, -2.299780914016979e-03, -2.843323794005548e-03, -2.174198487265137e-03, -4.822185933139789e-02, -2.684062540235436e-03, -2.619217857949040e-03, -6.783211985218279e-01, -6.805374076685613e-01, -6.463664506978031e-01, -6.792607392407140e-01, -6.796001156604732e-01, -6.796001156604732e-01, -6.608314078514627e-01, -5.712227106359171e-01, -6.074205957542531e-01, -6.348395098323093e-01, -6.220023074776482e-01, -5.255287054296147e-01, -7.888498203853685e-01, -1.769541333292667e-01, -2.640374827952106e-01, -2.954116727117521e-01, -3.205460742546093e-01, -3.205460742546093e-01, -4.000210895813661e-01, -2.808525542903598e-02, -3.838870433848819e-02, -3.826161082803662e-01, -6.098006400112108e-02, -6.162522353737088e-02, -7.108706334012417e-03, -7.600112514368088e-04, -1.595329156939317e-03, -5.777290399060629e-02, -2.423598959987519e-03, -2.423598959987517e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_21_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_21", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.282347288845197e+01, -3.282357792415341e+01, -3.282406768822801e+01, -3.282250530639991e+01, -3.282332076006361e+01, -3.282332076006361e+01, -4.802438138514600e+00, -4.802724375158964e+00, -4.810339741203227e+00, -4.807701012705459e+00, -4.807484641187498e+00, -4.893563341938591e+00, -7.679920478250540e-01, -9.149831059221691e-01, -8.743293159562909e-01, -8.894330247671174e-01, -8.861143317074407e-01, -8.861143317074407e-01, -2.229418201318975e-01, -2.280371102753239e-01, -8.285273489021301e-01, -1.527325071983895e-01, -1.778551098347857e-01, -1.778551098347858e-01, -6.552817404649672e-03, -6.897250591353236e-03, -3.819015817102112e-02, -3.784041546928961e-03, -4.755117852494054e-03, -4.755117852494054e-03, -7.316132238470667e+00, -7.320292396389005e+00, -7.316360688880527e+00, -8.011121752141099e+00, -7.318218878224743e+00, -7.318218878224743e+00, -2.571094911933463e+00, -2.617056720152056e+00, -2.536065382754108e+00, -2.577096789538309e+00, -2.613735692522639e+00, -2.782031153464230e+00, -8.095085035079972e-01, -8.833853932978520e-01, -7.599613439397988e-01, -7.783079200695247e-01, -8.205487660229024e-01, -8.987564607727840e-01, -1.002634322995631e-01, -2.097388817537839e-01, -9.316175607803616e-02, -2.639761972223635e+00, -1.223372436095486e-01, -1.223372436095486e-01, -3.066305470895404e-03, -3.699218931893252e-03, -2.828674469155530e-03, -6.365286500273967e-02, -3.578531435720627e-03, -3.407653182979828e-03, -8.717573302433538e-01, -8.478337043131886e-01, -8.982032521641828e-01, -8.627937914573414e-01, -8.592717038827633e-01, -8.592717038827633e-01, -8.453776008581487e-01, -6.848968450970103e-01, -7.090238423044130e-01, -7.474387249038561e-01, -7.252093297341088e-01, -8.064399834394763e-01, -9.206445573720103e-01, -2.327114147599382e-01, -3.536821603114435e-01, -4.543035583794919e-01, -4.223162962294735e-01, -4.223162962294733e-01, -6.322358597649603e-01, -3.654194534640713e-02, -4.995360056221818e-02, -4.703807844828182e-01, -7.987850180770191e-02, -8.030470920429486e-02, -9.248573878061593e-03, -9.887890545301522e-04, -2.075553722356506e-03, -7.526713461344674e-02, -3.153149230553839e-03, -3.153149230553834e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_21_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_21", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.015039190066343e-08, -2.015037501864911e-08, -2.015014688941269e-08, -2.015041496350598e-08, -2.015029611831110e-08, -2.015029611831110e-08, -1.457309396675657e-05, -1.457681555613475e-05, -1.467401557947119e-05, -1.462940392300798e-05, -1.464026820943835e-05, -1.943419320584899e-05, -3.866220335595297e-03, -5.625149498153103e-03, -4.996926928402462e-03, -5.373317897883929e-03, -5.282858098453833e-03, -5.282858098453833e-03, -6.277505772358621e-01, -6.458295235822060e-01, -7.273560262416849e-04, -3.851723739931033e-01, -4.871562286752578e-01, -4.871562286752578e-01, -6.409756055779897e+01, -5.912817064245812e+01, -1.609887651513231e+00, -1.635952338970838e+02, -1.225046938186790e+02, -1.225046938186790e+02, -7.070862338125792e-06, -7.072430177232982e-06, -7.070994217354093e-06, -6.326057841296036e-06, -7.071633879940139e-06, -7.071633879940139e-06, -1.155751753716568e-04, -1.178561040707278e-04, -1.135155304879590e-04, -1.157128931081398e-04, -1.178559733072711e-04, -1.593715560702546e-04, -3.368494302943726e-02, -2.997933895367024e-02, -3.659216909008581e-02, -3.964997634985495e-02, -3.321594126978417e-02, -2.686581169930817e-02, 2.263886485218362e-01, -2.716696537589909e-01, 3.102007631633755e-01, -3.176119708961064e-04, -5.554454509160223e-01, -5.554454509160226e-01, 6.185023204129499e+02, -1.609060308191809e+02, -7.837033154543174e+02, 1.114703031467309e+00, 9.032393572927439e+02, -3.344034796376371e+02, -4.598452886298734e-02, -4.615749375818060e-02, -4.373941139424577e-02, -4.608033731994404e-02, -4.610776898272142e-02, -4.610776898272142e-02, -5.121073210824325e-02, -5.990980633407588e-02, -6.106825453935757e-02, -5.914704877297852e-02, -6.051315783819628e-02, -5.080245154944200e-02, -2.371498557544692e-02, -1.272330998296414e-01, -1.939262793978187e-01, -1.132592648286166e-01, -1.901331829389311e-01, -1.901331829389312e-01, -5.282453190557981e-02, -1.747406998912235e+00, -9.872218354926998e-01, -2.392867572476989e-01, 5.735350220950802e-01, -7.924855075922690e-01, -2.231749862576521e+01, -2.486750511631049e+03, -9.567710444463731e+02, -8.968953396303633e-01, -4.663003476631899e+02, -4.663003476631913e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_21_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_21", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.236574086186789e-03, 2.236589627371624e-03, 2.236648022539004e-03, 2.236418445410082e-03, 2.236540255024970e-03, 2.236540255024970e-03, 5.551909313699695e-03, 5.554262533813021e-03, 5.616330382804327e-03, 5.590709600328400e-03, 5.594035981569986e-03, 1.799965740674540e-02, 3.898499985311238e-03, 4.308859670949746e-02, 3.557287421109355e-02, 3.910623977335900e-02, 3.827429577533902e-02, 3.827429577533902e-02, 8.364144183983566e-02, 9.014370473546009e-02, -5.621370756448118e-04, 2.081008138763221e-02, 3.886534423616740e-02, 3.886534423616739e-02, 2.239969556758194e-04, 2.410881004860600e-04, 1.202451876669330e-03, 1.097616379603456e-04, 1.632680369650968e-04, 1.632680369650968e-04, 1.336154700378999e-02, 1.334333304613406e-02, 1.336051935070454e-02, 1.000183616965700e-02, 1.335242062448245e-02, 1.335242062448245e-02, 6.706792290537644e-03, 7.245736964272729e-03, 6.289640563649691e-03, 6.766174571172014e-03, 7.216661699492700e-03, 2.818806241534417e-02, 1.261190415239606e-01, 1.140419236820816e-01, 1.235028526551472e-01, 1.313645838321244e-01, 1.253712177722200e-01, 6.340313396044171e-02, -1.135914600021665e-03, 3.525325041536798e-02, -9.558658155738958e-04, 3.904763032369991e-02, 1.572679070246820e-02, 1.572679070246819e-02, -4.012284317845101e-08, 1.008466174585101e-04, 2.197718186643493e-04, -4.000542221572626e-04, -2.528197953930070e-07, 1.639190018185350e-04, 1.014651108710235e-01, 1.088922141003635e-01, 9.401880489052188e-02, 1.041836148184338e-01, 1.052730050916189e-01, 1.052730050916189e-01, 1.052956322109313e-01, 1.435560408777351e-01, 1.453824487883072e-01, 1.343985888278607e-01, 1.414349221371043e-01, 8.461204436989656e-02, 1.110921235992227e-01, -1.726294716380762e-03, 9.066338358555587e-02, 3.614821339929179e-02, 1.303978253979536e-01, 1.303978253979536e-01, 4.581069223697298e-02, 1.137676783617071e-03, 1.707642731686731e-03, 1.940411291495432e-01, -1.037964018187837e-03, 6.260818459031955e-03, 2.196173102413155e-04, 2.973486053563349e-05, 1.058704814513903e-04, 5.802063044235921e-03, 1.810953377178296e-04, 1.810953377178319e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
