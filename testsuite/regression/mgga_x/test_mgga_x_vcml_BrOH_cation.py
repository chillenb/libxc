
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_vcml_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_vcml", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.065388913914279e+01, -2.065400221250681e+01, -2.065450032081172e+01, -2.121906713202790e+01, -2.121968066751245e+01, -2.178579721506664e+01, -3.514724878450708e+00, -3.814256258722073e+00, -3.812126490903468e+00, -3.813331939716389e+00, -3.812805222725666e+00, -3.513304670407701e+00, -6.108572041424989e-01, -7.043466146556759e-01, -7.918630132109634e-01, -6.950847111955836e-01, -5.985899758029356e-01, -7.925225607631605e-01, -1.887878541334556e-01, -1.911154480377692e-01, -8.480029771856518e-01, -1.741614294041318e-01, -2.107628549754592e-01, -2.064435428842901e-01, -5.620590537629303e-03, -5.851008029619732e-03, -3.419836349988536e-02, -3.227820481600311e-03, -4.515523740526363e-03, -4.515523740526363e-03, -5.230569526725926e+00, -5.230077114530223e+00, -5.230533697899311e+00, -5.230099864699481e+00, -5.174560699050151e+00, -5.174604764898726e+00, -2.190491715069890e+00, -2.197140662676427e+00, -2.186240044634985e+00, -2.191867806383895e+00, -2.005383005266928e+00, -2.196184552951014e+00, -5.820872277573071e-01, -6.482952581384237e-01, -5.885712715430449e-01, -5.947332915086047e-01, -5.917777277685246e-01, -6.249736227880001e-01, -1.138009944576390e-01, -1.928543714770048e-01, -1.039153750551467e-01, -2.001793469124443e+00, -1.405372748289599e-01, -1.405372748289599e-01, -2.463060063910209e-03, -3.154886859966066e-03, -2.418366789491672e-03, -5.779750840836383e-02, -3.039119022104332e-03, -3.039119022104333e-03, -5.762067908719489e-01, -5.789613586577240e-01, -5.721119467041493e-01, -5.745240025092053e-01, -5.719558311767268e-01, -5.747977699179067e-01, -5.614182423670226e-01, -4.919982297811411e-01, -5.092031743508970e-01, -5.470914845325832e-01, -5.423367648581425e-01, -5.213470158104104e-01, -6.634228268729857e-01, -2.777099398278923e-01, -2.795047624295605e-01, -3.551660461362950e-01, -3.499998362174512e-01, -3.132644920280218e-01, -4.951546382946402e-01, -3.030789639607749e-02, -4.904330012048844e-02, -3.651560981175190e-01, -8.864471533745058e-02, -8.864471533745059e-02, -7.700544855112935e-03, -8.421251986675626e-04, -1.730644533921120e-03, -6.143792471884554e-02, -2.790048001882346e-03, -2.736318071311730e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_vcml_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_vcml", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.052169415134427e+01, -3.052052538203143e+01, -3.052162712575025e+01, -3.052047667172423e+01, -3.052149400146540e+01, -3.052026167595313e+01, -3.052223657385275e+01, -2.637247157408266e+01, -3.052164578347137e+01, -2.637311807616520e+01, -2.637339686365167e+01, -2.637311807616520e+01, -4.152248118766625e+00, -4.400495434354255e+00, -4.152302176676641e+00, -4.152189652793258e+00, -4.153336577204060e+00, -4.153565785828157e+00, -4.153310098291755e+00, -4.153369467559579e+00, -4.151462313331716e+00, -4.154382313635486e+00, -4.399868421567874e+00, -4.154382313635486e+00, -8.253439528342640e-01, -8.295397196574579e-01, -8.237996893751672e-01, -8.020599556148753e-01, -7.940052862361161e-01, -7.910764088583266e-01, -7.923586409498703e-01, -8.098699814759944e-01, -8.365185579466474e-01, -7.761009237703993e-01, -8.074700283001464e-01, -7.832066723807858e-01, -2.065529968144801e-01, -2.232377485655290e-01, -2.092516428898651e-01, -2.239307513498366e-01, -1.063491722277142e+00, -9.681720363338123e-01, -2.442588939749332e-01, -2.380795494541312e-01, -2.348801034177730e-01, -1.906214222432700e-01, -2.348801034177730e-01, -1.147554198477757e-01, -7.317714366855439e-03, -7.791209749472268e-03, -7.380520477186230e-03, -8.250160517000133e-03, -4.103917561643784e-02, -5.771712141512871e-02, -4.352961599429848e-03, -4.279855262492741e-03, -6.506103569468666e-03, -3.677221899097880e-03, -6.506103569468666e-03, -3.677221899506449e-03, -6.493223067642809e+00, -6.491675698625420e+00, -6.495717855956433e+00, -6.494085906102291e+00, -6.493386230116764e+00, -6.491776226138750e+00, -6.495526006501727e+00, -6.493964910750302e+00, -6.887021218126034e+00, -6.492882812305342e+00, -6.494481892512090e+00, -6.885438689022278e+00, -2.322965837012302e+00, -2.323085197988221e+00, -2.342530769744049e+00, -2.342074378566753e+00, -2.306627798371725e+00, -2.311374668805086e+00, -2.323358191312168e+00, -2.328408570738522e+00, -2.346373021378464e+00, -2.485638102266356e+00, -2.346373021378464e+00, -2.334754701526061e+00, -7.125625010283655e-01, -7.336191040145802e-01, -7.877415930562041e-01, -7.889844249401521e-01, -6.370834906080985e-01, -6.647005070122627e-01, -6.720463473407501e-01, -6.975786081559865e-01, -7.454203166508045e-01, -7.296906381176294e-01, -7.454203166508045e-01, -7.050092927277150e-01, -1.821283354512411e-01, -1.839920082655703e-01, -2.094611577725317e-01, -2.703604993805451e-01, -1.628165720976286e-01, -1.730865174172266e-01, -2.341982372716650e+00, -2.340986991129902e+00, -2.069425195250874e-01, -2.087733791618790e-01, -2.069425195250879e-01, -2.087733791618789e-01, -3.176238667209455e-03, -3.385549717990400e-03, -4.186352953987148e-03, -4.249119427559038e-03, -3.137169962363406e-03, -3.326102828723968e-03, -1.047980040935468e-01, -6.871096289304736e-02, -3.192858085721964e-03, -4.415008840544606e-03, -3.192858086326701e-03, -4.415008847820426e-03, -7.499681207480734e-01, -7.530825143793622e-01, -7.388803285435562e-01, -7.420311727379031e-01, -7.492705478561440e-01, -7.522862434278504e-01, -7.514905337014337e-01, -7.489886247600558e-01, -7.503004377908470e-01, -7.533379244602386e-01, -7.503004377908469e-01, -7.473833332885361e-01, -7.288567060451598e-01, -7.315034880047583e-01, -5.918450655955071e-01, -6.127721743650856e-01, -6.273806815946210e-01, -6.837915177590606e-01, -6.655549785664332e-01, -6.680524966636597e-01, -6.457904040641912e-01, -6.484157843843250e-01, -6.457904040641913e-01, -7.541571777074680e-01, -8.204627642481823e-01, -9.628023986189012e-01, -2.887789612932415e-01, -2.893276028080183e-01, -3.213202920848940e-01, -3.199013908556204e-01, -4.377168469247554e-01, -4.135971780815088e-01, -3.579153444359890e-01, -3.577578529234797e-01, -3.579153444359892e-01, -3.767778825384264e-01, -5.397951634121405e-01, -5.442942112045812e-01, -4.027152039486884e-02, -4.054707008760028e-02, -7.654893793468899e-02, -8.019320949782653e-02, -3.969248489929336e-01, -4.052852296126023e-01, -1.383398421407600e-01, -1.483901247181028e-01, -1.383398421407415e-01, -1.483901247181100e-01, -1.007501471277491e-02, -1.044027842045510e-02, -1.121799745279868e-03, -1.124365147134984e-03, -2.230094034703652e-03, -2.371885027655239e-03, -8.124547378453822e-02, -8.257667204571600e-02, -3.028225693206507e-03, -4.041010227200079e-03, -3.028225666162147e-03, -3.916332528874872e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_vcml_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_vcml", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.618956361462555e-08, 0.000000000000000e+00, -2.617956472401192e-08, -2.618773883542005e-08, 0.000000000000000e+00, -2.617823949123319e-08, -2.618239005157293e-08, 0.000000000000000e+00, -2.617042891640906e-08, -2.620287873519857e-08, 0.000000000000000e+00, -1.267384525288137e-08, -2.618841214023590e-08, 0.000000000000000e+00, -1.267343716359933e-08, -1.267256828426790e-08, 0.000000000000000e+00, -1.267343716359933e-08, -1.314502158225310e-05, 0.000000000000000e+00, -1.617895121774751e-05, -1.314636416968469e-05, 0.000000000000000e+00, -1.314542854752522e-05, -1.317270288843211e-05, 0.000000000000000e+00, -1.317686405268365e-05, -1.315868736299860e-05, 0.000000000000000e+00, -1.315798818045738e-05, -1.315045720400922e-05, 0.000000000000000e+00, -1.318073430754680e-05, -1.619110611153347e-05, 0.000000000000000e+00, -1.318073430754680e-05, -1.172963801484081e-02, 0.000000000000000e+00, -1.155913170080871e-02, -1.179913391100938e-02, 0.000000000000000e+00, -6.574591118328381e-03, -6.436425475266058e-03, 0.000000000000000e+00, -6.478256033955859e-03, -6.605382171711625e-03, 0.000000000000000e+00, -1.251226529894341e-02, -1.122035726743567e-02, 0.000000000000000e+00, -1.445841783737804e-02, -6.464050518759631e-03, 0.000000000000000e+00, -6.547740615759711e-03, -2.808173835236743e+00, 0.000000000000000e+00, -9.578266351324579e-01, -2.674175846420808e+00, 0.000000000000000e+00, -9.643513965786801e-01, -1.669128343851761e-03, 0.000000000000000e+00, -5.854092993999293e-03, 2.916852439019674e-01, 0.000000000000000e+00, 8.930552724770539e-02, -7.420513666295687e-01, 0.000000000000000e+00, 1.479518813656187e+00, -7.420513666295675e-01, 0.000000000000000e+00, -2.861547263503259e+01, 2.376584614735774e+01, 0.000000000000000e+00, 2.381327508233770e+01, -1.671188505112700e+06, 0.000000000000000e+00, 2.485083064110364e+01, -1.748177618366612e+03, 0.000000000000000e+00, 8.266496346403363e+00, 1.757539239263583e+01, 0.000000000000000e+00, 1.775772786436141e+01, 2.265053021727192e+01, 0.000000000000000e+00, 3.902832677770309e+01, 2.265053021727192e+01, 0.000000000000000e+00, 3.902833019469966e+01, -3.869628737013587e-06, 0.000000000000000e+00, -3.873373369150377e-06, -3.872282993834268e-06, 0.000000000000000e+00, -3.875942308821013e-06, -3.869839399471836e-06, 0.000000000000000e+00, -3.873507452159409e-06, -3.872113548917086e-06, 0.000000000000000e+00, -3.875837831605628e-06, -2.246411998324237e-06, 0.000000000000000e+00, -3.874655917059832e-06, -3.870941185574215e-06, 0.000000000000000e+00, -2.249409399762147e-06, -1.208870529831448e-04, 0.000000000000000e+00, -1.211216668582588e-04, -1.193932259046765e-04, 0.000000000000000e+00, -1.196637526295034e-04, -1.219905110108034e-04, 0.000000000000000e+00, -1.219105377596155e-04, -1.207576257632493e-04, 0.000000000000000e+00, -1.206409289159515e-04, -1.192174269621266e-04, 0.000000000000000e+00, -1.626706520870370e-04, -1.192174269621266e-04, 0.000000000000000e+00, -1.202675019162933e-04, -1.892288015090061e-02, 0.000000000000000e+00, -1.842009272438727e-02, -1.614550634302489e-02, 0.000000000000000e+00, -1.626051260069278e-02, -2.415933338609621e-02, 0.000000000000000e+00, -2.235190400286446e-02, -2.340892029470022e-02, 0.000000000000000e+00, -2.144581823915034e-02, -1.706766250403864e-02, 0.000000000000000e+00, -1.989715762814585e-02, -1.706766250403867e-02, 0.000000000000000e+00, -2.006989249841356e-02, 1.793700693890659e+00, 0.000000000000000e+00, 1.749187048749737e+00, -2.608199067935382e+00, 0.000000000000000e+00, -2.859879178894834e-01, 2.262174851710863e+00, 0.000000000000000e+00, 2.067446584355526e+00, -1.747665240191254e-04, 0.000000000000000e+00, -1.751193810833299e-04, 1.234612152443630e+00, 0.000000000000000e+00, 6.912296199015300e-01, 1.234612152443690e+00, 0.000000000000000e+00, 6.912296199015119e-01, -4.872152459387844e+07, 0.000000000000000e+00, 1.178942602027627e+01, 1.667859058610162e+01, 0.000000000000000e+00, 1.470347599813666e+01, 1.198756049707687e+02, 0.000000000000000e+00, 1.314519378840643e+02, 5.030666136308215e+00, 0.000000000000000e+00, -2.225032115920985e+02, 2.265975151460983e+01, 0.000000000000000e+00, 7.150860946533970e+01, 2.265975735689848e+01, 0.000000000000000e+00, 7.150865785637083e+01, -2.733406803391211e-02, 0.000000000000000e+00, -2.695982633660390e-02, -2.647285788696267e-02, 0.000000000000000e+00, -2.612243658363627e-02, -7.124668885077236e-03, 0.000000000000000e+00, -7.253841304346329e-03, -9.222008495276372e-03, 0.000000000000000e+00, -2.664805057445697e-02, -8.066613561305204e-03, 0.000000000000000e+00, -8.205644537053016e-03, -8.066613561305204e-03, 0.000000000000000e+00, -2.652569481571838e-02, -3.023730493865470e-02, 0.000000000000000e+00, -2.989735009606177e-02, -3.621207717488903e-02, 0.000000000000000e+00, -3.343547251660892e-02, -3.384087553071139e-02, 0.000000000000000e+00, -5.020012908768654e-02, -3.218680502798829e-02, 0.000000000000000e+00, -3.179685938037732e-02, -3.294568289971694e-02, 0.000000000000000e+00, -3.255747691623907e-02, -3.294568289971695e-02, 0.000000000000000e+00, -7.530321995094892e-02, -1.275668188055454e-02, 0.000000000000000e+00, -2.994707585177898e-02, -3.255948297025045e-01, 0.000000000000000e+00, -3.245478588859936e-01, -4.987018249617673e-01, 0.000000000000000e+00, -2.464561057873363e-01, -1.681169342519169e-01, 0.000000000000000e+00, -1.192700951546053e-01, -1.836660507879487e-01, 0.000000000000000e+00, -1.846253904865003e-01, -1.836660507879478e-01, 0.000000000000000e+00, -2.860914326156287e-01, -4.654670721787639e-02, 0.000000000000000e+00, -4.601628862336479e-02, -1.885331839876917e+03, 0.000000000000000e+00, -1.834602759470329e+03, 5.997281459619285e+00, 0.000000000000000e+00, 5.955621788654440e+00, -1.561334380359165e-01, 0.000000000000000e+00, -1.568191511218437e-01, 3.896579493526908e+00, 0.000000000000000e+00, 3.835518415428677e+00, 3.896579493519267e+00, 0.000000000000000e+00, 3.835518415431533e+00, -4.812720610424570e+05, 0.000000000000000e+00, -4.173737079874505e+05, 1.925601176911848e+01, 0.000000000000000e+00, 1.928309926742713e+01, -2.004844436830072e+08, 0.000000000000000e+00, -1.566746918767970e+08, -1.138549921377544e+02, 0.000000000000000e+00, -1.066977575205373e+02, 5.841340076604936e+01, 0.000000000000000e+00, 7.423215887982880e+01, 5.841290681034217e+01, 0.000000000000000e+00, -2.107924965174422e+07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_vcml_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_vcml", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.749074365016221e-03, 1.748500011481422e-03, 1.748984179846628e-03, 1.748434450791222e-03, 1.748726073481441e-03, 1.748055113606276e-03, 1.749737339174404e-03, 8.119469995006485e-20, 1.749016852024783e-03, -2.965222944583483e-19, 8.813696065325484e-19, -2.965222944583483e-19, 1.419114665620562e-17, 8.545194880132861e-04, -2.856740432799315e-17, -1.041112179855217e-17, 1.324752078125830e-17, 1.318725488159621e-17, 2.861936028526772e-18, -3.680547502431016e-18, -9.445631090187106e-18, -1.463735200605069e-17, 8.549409041039176e-04, -1.463735200605069e-17, 1.193713197197322e-03, 1.284022926218752e-03, 1.169084246068927e-03, 1.930473767435773e-16, -1.354261997357384e-16, -7.940378544370072e-17, 1.305501690827262e-16, 1.028339530053529e-03, 1.338239944380884e-03, 6.526786394969429e-04, 4.899889782925355e-17, 7.635156542414709e-18, 1.086503767530673e-03, 1.357976469493704e-16, 1.216563045980734e-03, 5.828530098907631e-18, -4.925638214364417e-17, 2.971424833765056e-04, 3.973663401578144e-16, -1.078169185213459e-16, 3.724216132829712e-18, -4.553329824299728e-15, 2.814421108665664e-18, 1.124414888621190e-05, 1.758388510183164e-12, -1.628275226212081e-12, 5.901491034492884e-11, -4.425901321945102e-13, 1.050331568097785e-07, 3.148619477869793e-14, 3.160278577967165e-11, 1.001147488229055e-11, 7.712277791683896e-12, -2.119550502168448e-11, 7.712277791683896e-12, -2.190238148179048e-11, -1.841709803358172e-19, -1.147202261573692e-18, 4.619323592165604e-19, 2.835680183751873e-19, 3.391554463185921e-19, 2.466210768953666e-18, -8.079825655720126e-19, 1.272318064207392e-18, 8.829197675070469e-04, 6.668468355232499e-20, 1.239825172433534e-18, 8.845272965726727e-04, 3.020433166420674e-17, -3.812131148060084e-17, -7.583814868722529e-18, -4.610956980296985e-17, 1.054959741753409e-17, -1.664263445756631e-17, 3.374864722832135e-17, -2.276891241439903e-17, 7.331613830906894e-18, 1.429383896202644e-03, 7.331613830906894e-18, -2.984252642972730e-18, -7.429783209163880e-17, 3.643615912075395e-03, 1.579117434304144e-18, -2.264546245847796e-18, -1.556083510064293e-16, -8.658622933486763e-17, -1.178209986214206e-17, 6.198817300539264e-18, -2.390840274427595e-17, 4.956445168445068e-03, 3.229621867872056e-17, 4.996626166026617e-17, 8.218127193024079e-15, 7.029077949955575e-15, 3.228175047472450e-04, 5.900739374889038e-16, 6.006309702400641e-15, 5.993875754665473e-15, 3.108942101167905e-18, -4.058443593545666e-18, 2.326371950132669e-16, -6.337450478227662e-16, -3.126278806918412e-16, -4.472963322774574e-16, 3.195196162219801e-13, 2.872107601586360e-11, 6.269875669998001e-12, -1.545600600006294e-11, -1.483644047902791e-11, -7.784511026172957e-12, -1.207392437056531e-13, 1.914885459295334e-06, -5.484783577544276e-12, 1.279466396599361e-11, -6.281037923450443e-12, -4.287745850344979e-12, -2.211670807595616e-18, -4.565469371436640e-19, -1.231878007979690e-17, -7.416677078377323e-18, -3.118709294194519e-02, -3.098310303857492e-02, -2.960774965366143e-02, 4.710092916090690e-18, -3.066360229444726e-02, -3.034467429047269e-02, -3.066360229444726e-02, 4.858328853701142e-18, -5.255191214582780e-19, 1.251902991267900e-19, -3.608737087803134e-17, 1.117433237503130e-03, 2.648335815987298e-17, 2.749242206472791e-02, 2.703895832257754e-17, 2.340163928764610e-17, -5.229417457206528e-18, -6.572570215318902e-17, 3.313133737238267e-18, 6.864976029074114e-02, -3.919478243699640e-18, 5.882567775616900e-02, -7.570050453098201e-18, 1.514751725573041e-17, 2.086653982499887e-03, 9.948976217555361e-17, 7.604052480244779e-03, 1.582609763754535e-16, 8.314584219708084e-17, -2.701501894153729e-16, -1.619275710626790e-16, 5.004540015135042e-03, -1.027429020962521e-16, 3.601076796693502e-17, 1.031891714671406e-07, 1.035913096249665e-07, -6.797129885968690e-14, 5.165578362813255e-14, 3.121308031649272e-16, 1.364393520506402e-16, 1.875644773614856e-15, 9.040300951364011e-15, 2.295517236006872e-14, -2.003957542055856e-16, 8.886453156341039e-11, 1.039030628752115e-10, -6.135451355472673e-11, -7.319495281791918e-10, 4.620945530692617e-13, 6.858207943184097e-13, 6.626368604118545e-06, 8.555697780755479e-06, -2.280858087947472e-11, 1.636772587640284e-11, 3.440496680458535e-11, 1.282833241260388e-11])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
