
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_vcml_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_vcml", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.173059348093043e+01, -2.173062479052198e+01, -2.173081873179014e+01, -2.173035115652394e+01, -2.173058839236311e+01, -2.173058839236311e+01, -3.383197383151679e+00, -3.383192088815183e+00, -3.383261326303617e+00, -3.384780747960744e+00, -3.383763046282382e+00, -3.383763046282382e+00, -6.652260799891125e-01, -6.650087549155786e-01, -6.612728230047684e-01, -6.673299370787836e-01, -6.674550157346202e-01, -6.674550157346202e-01, -2.110094360807774e-01, -2.115404181991318e-01, -7.637390094418709e-01, -1.481455498335006e-01, -1.919849841355825e-01, -1.919849841355823e-01, -3.787913292553442e-03, -3.990064536006003e-03, -2.455962561055380e-02, -2.176898908772983e-03, -3.043528061902904e-03, -3.043528061902904e-03, -5.229415777993452e+00, -5.228935921988744e+00, -5.229403705968794e+00, -5.228979950127610e+00, -5.229167088186150e+00, -5.229167088186150e+00, -2.181385049597368e+00, -2.194768706177145e+00, -2.183640284449603e+00, -2.192414390117403e+00, -2.188203774189825e+00, -2.188203774189825e+00, -5.968158868222199e-01, -6.318607012309629e-01, -5.342435406005351e-01, -5.378197574844475e-01, -6.066733725222844e-01, -6.066733725222844e-01, -9.065106421822812e-02, -2.066764904237688e-01, -8.185493390538136e-02, -1.832522789837791e+00, -1.183385025373430e-01, -1.183385025373430e-01, -1.679946139193299e-03, -2.128148657307915e-03, -1.630803489592268e-03, -4.757173092838142e-02, -2.049067572990633e-03, -2.049067572990633e-03, -5.737888256488803e-01, -5.767368431464491e-01, -5.757346516856812e-01, -5.748726912273103e-01, -5.753065707989453e-01, -5.753065707989453e-01, -5.573882386046620e-01, -5.262089601750889e-01, -5.357367454733555e-01, -5.443154141767358e-01, -5.399482580987732e-01, -5.399482580987732e-01, -6.579667787230187e-01, -2.735915890504842e-01, -3.074585664119338e-01, -3.558277107000033e-01, -3.322909977865461e-01, -3.322909977865462e-01, -4.817920941895335e-01, -2.316301067313116e-02, -3.430354609619560e-02, -3.414460686807234e-01, -6.926139695517988e-02, -6.926139695517990e-02, -5.354347413334657e-03, -5.681726226360764e-04, -1.195390907589879e-03, -6.409810788016880e-02, -1.881328392427493e-03, -1.881328392427491e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_vcml_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_vcml", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.667171178699444e+01, -2.667090301307606e+01, -2.667179926454352e+01, -2.667096667028449e+01, -2.667198378635411e+01, -2.667125770515120e+01, -2.667099073695321e+01, -2.666999294904116e+01, -2.667176580547748e+01, -2.667042871120404e+01, -2.667176580547748e+01, -2.667042871120404e+01, -4.165354201607035e+00, -4.164781627486043e+00, -4.165642276565387e+00, -4.164936342298730e+00, -4.170966732261228e+00, -4.171891627340104e+00, -4.170771294459860e+00, -4.170529116883643e+00, -4.164077019733844e+00, -4.175550424086492e+00, -4.164077019733844e+00, -4.175550424086492e+00, -7.794258469836711e-01, -7.845594635002837e-01, -7.775728404164435e-01, -7.837854917002348e-01, -7.543594824054279e-01, -7.476815057180947e-01, -7.569919016655902e-01, -7.593146482968618e-01, -7.933228226707691e-01, -7.287650602133613e-01, -7.933228226707691e-01, -7.287650602133613e-01, -5.053437876292933e-02, -2.184355327774184e-01, -8.444398154131114e-02, -2.032408632642273e-01, -8.803041174640407e-01, -9.196840579016321e-01, -2.129847237261670e-01, -1.999887302059504e-01, -9.428138499000373e-02, -1.708748771727482e-01, -9.428138499000326e-02, -1.708748771727481e-01, -4.858647299232344e-03, -4.189671533076219e-03, -5.144119983528020e-03, -5.402762380280794e-03, -3.803836813375144e-02, -4.124034892232611e-02, -2.934055261241743e-03, -2.884638043750269e-03, -4.375605192120650e-03, -2.479658661015792e-03, -4.375605192120663e-03, -2.479658661015781e-03, -6.497555780328208e+00, -6.495761633402110e+00, -6.499971441823279e+00, -6.498097072487893e+00, -6.497616038761393e+00, -6.495788533305242e+00, -6.499692261086952e+00, -6.497913385725872e+00, -6.498848224107650e+00, -6.496943464142341e+00, -6.498848224107650e+00, -6.496943464142341e+00, -2.139062374197040e+00, -2.176262707017755e+00, -2.338286410912193e+00, -2.365625140283051e+00, -2.276621535538744e+00, -2.268574940769289e+00, -2.455115075098309e+00, -2.449033669728561e+00, -2.175622627483774e+00, -2.268379854855147e+00, -2.175622627483774e+00, -2.268379854855147e+00, -7.330646815714572e-01, -7.287289655201948e-01, -8.420420505755765e-01, -8.387479333008540e-01, -6.456471351549061e-01, -6.936668493275967e-01, -7.112719182856918e-01, -7.733332582494248e-01, -7.611258488726037e-01, -7.348787956848148e-01, -7.611258488726037e-01, -7.348787956848148e-01, -1.570930466708734e-01, -1.601441623405253e-01, 2.842063371777001e-02, -2.694775711212324e-03, -1.430625237462412e-01, -1.498210036328974e-01, -2.629773636879485e+00, -2.629034438148397e+00, -1.645856776083132e-01, -1.644723148317625e-01, -1.645856776083131e-01, -1.644723148317626e-01, -2.198214922007468e-03, -2.284506581929176e-03, -2.823278847573769e-03, -2.865896464193603e-03, -2.114006495294770e-03, -2.241005902669503e-03, -8.866686173654753e-02, -8.764770573974741e-02, -2.156083215763991e-03, -2.969806950241407e-03, -2.156083215763992e-03, -2.969806950241415e-03, -7.536237331224852e-01, -7.566562983976938e-01, -7.435316510053140e-01, -7.465667927812559e-01, -7.469446958374358e-01, -7.500022944454052e-01, -7.498974740422902e-01, -7.529111475088511e-01, -7.484092819887384e-01, -7.514443703988686e-01, -7.484092819887384e-01, -7.514443703988686e-01, -7.338898895419318e-01, -7.364490868984019e-01, -6.226294703915042e-01, -6.246419973143281e-01, -6.465399459983106e-01, -6.491416233796742e-01, -6.767488831600773e-01, -6.791703186147725e-01, -6.606187157730004e-01, -6.629700567935847e-01, -6.606187157730004e-01, -6.629700567935848e-01, -9.053435728514519e-01, -9.003161113722669e-01, -1.509517459451220e-01, -1.497924681389023e-01, -1.527943131803774e-01, -1.605627779626632e-01, -3.915823389799986e-01, -3.953023844385491e-01, -2.588474660792971e-01, -2.600272807196230e-01, -2.588474660792969e-01, -2.600272807196232e-01, -4.841383127196970e-01, -4.932311129644431e-01, -3.430062444920186e-02, -3.576901603543538e-02, -5.827865295032642e-02, -6.165144754067325e-02, -3.963704811343539e-01, -3.918725521783132e-01, -1.179691121596111e-01, -1.250024310868735e-01, -1.179691121596112e-01, -1.250024310868735e-01, -7.101621683469497e-03, -7.372376685112609e-03, -7.569477301220872e-04, -7.588173544074210e-04, -1.542106990744973e-03, -1.640642439589905e-03, -1.098212434835270e-01, -6.489243210086476e-02, -2.044589523839806e-03, -2.719551495008958e-03, -2.044589523839802e-03, -2.719551495008948e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_vcml_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_vcml", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-9.170964192393970e-09, 0.000000000000000e+00, -9.183733802160514e-09, -9.171172055999261e-09, 0.000000000000000e+00, -9.183882931952522e-09, -9.173190728139249e-09, 0.000000000000000e+00, -9.186395835829097e-09, -9.170933348710842e-09, 0.000000000000000e+00, -9.183499171730698e-09, -9.171068495936295e-09, 0.000000000000000e+00, -9.185645239273380e-09, -9.171068495936295e-09, 0.000000000000000e+00, -9.185645239273380e-09, -1.657826084324293e-05, 0.000000000000000e+00, -1.651870506678101e-05, -1.659660235734150e-05, 0.000000000000000e+00, -1.652618043830872e-05, -1.690814717607893e-05, 0.000000000000000e+00, -1.695105885700943e-05, -1.700702421618350e-05, 0.000000000000000e+00, -1.695824650361275e-05, -1.655290229403638e-05, 0.000000000000000e+00, -1.725406897524108e-05, -1.655290229403638e-05, 0.000000000000000e+00, -1.725406897524108e-05, -9.627043154218107e-03, 0.000000000000000e+00, -9.612895842344638e-03, -9.643786288636595e-03, 0.000000000000000e+00, -9.619288710465638e-03, -9.768146700306004e-03, 0.000000000000000e+00, -9.850624028390096e-03, -9.817377800005748e-03, 0.000000000000000e+00, -9.851194304673081e-03, -9.435879418365952e-03, 0.000000000000000e+00, -9.982521447620222e-03, -9.435879418365952e-03, 0.000000000000000e+00, -9.982521447620222e-03, -9.575729408462342e+00, 0.000000000000000e+00, -1.415291314712576e+00, -8.044206918822265e+00, 0.000000000000000e+00, -2.161846342067485e+00, -4.845326915840984e-03, 0.000000000000000e+00, -4.544168391029931e-03, 3.147626245392751e-02, 0.000000000000000e+00, -1.444202914771433e+00, -6.624443767209540e+00, 0.000000000000000e+00, 2.736431130147692e+00, -6.624443767209552e+00, 0.000000000000000e+00, 2.736431130147688e+00, -4.060278311713180e+01, 0.000000000000000e+00, -7.492525995576704e+02, -6.061553422758934e-01, 0.000000000000000e+00, -7.511300030996716e+01, 7.958546673086844e+00, 0.000000000000000e+00, 7.419760383674863e+00, 1.099792981149222e+01, 0.000000000000000e+00, 1.068833160689091e+01, 1.066314907622274e+01, 0.000000000000000e+00, 3.048172328750402e+01, 1.066314907624096e+01, 0.000000000000000e+00, 3.048172328745623e+01, -3.802577058826386e-06, 0.000000000000000e+00, -3.810099749514480e-06, -3.806227383765799e-06, 0.000000000000000e+00, -3.813618226452531e-06, -3.804378885407402e-06, 0.000000000000000e+00, -3.811374553738860e-06, -3.807444262328511e-06, 0.000000000000000e+00, -3.814506829330908e-06, -3.803240366998281e-06, 0.000000000000000e+00, -3.811666628991228e-06, -3.803240366998281e-06, 0.000000000000000e+00, -3.811666628991228e-06, -2.866763020243623e-04, 0.000000000000000e+00, -2.569593694460006e-04, -1.427206597925104e-04, 0.000000000000000e+00, -1.220467102425767e-04, -1.662050434768722e-04, 0.000000000000000e+00, -1.756032806681206e-04, -4.829293366003745e-05, 0.000000000000000e+00, -5.465080923019911e-05, -2.777571128704295e-04, 0.000000000000000e+00, -1.919516616039420e-04, -2.777571128704295e-04, 0.000000000000000e+00, -1.919516616039420e-04, -5.445111943855567e-02, 0.000000000000000e+00, -5.471614089471367e-02, -2.013162356516865e-02, 0.000000000000000e+00, -1.892492445433438e-02, -3.860800857319017e-02, 0.000000000000000e+00, -5.586219919267942e-02, -3.523369800184000e-02, 0.000000000000000e+00, -4.732093498521703e-02, -3.715785033735718e-02, 0.000000000000000e+00, -5.467819671905099e-02, -3.715785033735715e-02, 0.000000000000000e+00, -5.467819671905100e-02, 1.429073420110339e+00, 0.000000000000000e+00, 1.691616637857428e+00, -8.362574425280892e+00, 0.000000000000000e+00, -7.438513956425791e+00, 3.020496766784003e+00, 0.000000000000000e+00, 1.907336578450681e+00, -3.872629022261804e-04, 0.000000000000000e+00, -3.882721175917854e-04, -2.041905068884023e+00, 0.000000000000000e+00, -3.329551545733001e+00, -2.041905068884035e+00, 0.000000000000000e+00, -3.329551545732984e+00, 1.542458269601009e+01, 0.000000000000000e+00, 1.335075111634873e+01, 1.331010227883978e+01, 0.000000000000000e+00, 1.228856418875143e+01, 7.587757078172760e+01, 0.000000000000000e+00, 8.454079539063515e+01, 7.899912692730891e+00, 0.000000000000000e+00, 6.033661553248673e+00, 3.770206248115732e+01, 0.000000000000000e+00, 2.732482362276586e+01, 3.770206248117262e+01, 0.000000000000000e+00, 2.732482362270579e+01, -2.062633436935132e-02, 0.000000000000000e+00, -2.052316812024137e-02, -1.987807035961964e-02, 0.000000000000000e+00, -1.978868046042334e-02, -2.015429222101006e-02, 0.000000000000000e+00, -2.006330378395977e-02, -2.037742581641295e-02, 0.000000000000000e+00, -2.027175278629510e-02, -2.026328224539951e-02, 0.000000000000000e+00, -2.016616587403083e-02, -2.026328224539951e-02, 0.000000000000000e+00, -2.016616587403082e-02, -1.619424049006212e-02, 0.000000000000000e+00, -1.642378733479317e-02, -7.151465495248179e-03, 0.000000000000000e+00, -7.727844678576852e-03, -1.228130558275335e-02, 0.000000000000000e+00, -1.263745174368117e-02, -1.653992116200678e-02, 0.000000000000000e+00, -1.644352780148700e-02, -1.427903717754421e-02, 0.000000000000000e+00, -1.449196792562172e-02, -1.427903717754418e-02, 0.000000000000000e+00, -1.449196792562170e-02, -2.240954908829541e-02, 0.000000000000000e+00, -2.032712442716457e-02, -2.165258234267026e+00, 0.000000000000000e+00, -2.167077630874140e+00, -1.740889906552289e+00, 0.000000000000000e+00, -1.667762965586742e+00, -3.453994366184657e-01, 0.000000000000000e+00, -3.293662383674771e-01, -9.585516960721496e-01, 0.000000000000000e+00, -9.590714032614391e-01, -9.585516960721507e-01, 0.000000000000000e+00, -9.590714032614394e-01, -1.930443170809391e-01, 0.000000000000000e+00, -1.744542392196635e-01, -1.548670073161294e+00, 0.000000000000000e+00, 2.712492147028664e+00, 7.001515171535122e+00, 0.000000000000000e+00, 6.912605782576769e+00, -4.047939794078415e-01, 0.000000000000000e+00, -5.728522891197700e-01, 3.510937402014329e+00, 0.000000000000000e+00, 1.617072312870249e+00, 3.510937402014386e+00, 0.000000000000000e+00, 1.617072312870249e+00, 9.771114593691992e+00, 0.000000000000000e+00, 1.000125600449956e+01, 4.729731625869285e+01, 0.000000000000000e+00, 8.380559926164848e+01, 2.910288333725298e+01, 0.000000000000000e+00, 3.099183114403496e+01, 2.164000553897656e+00, 0.000000000000000e+00, -2.682801531481961e+01, 7.787225416515757e+01, 0.000000000000000e+00, 3.042661916364013e+01, 7.787225416514495e+01, 0.000000000000000e+00, 3.042661916352002e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_vcml_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_vcml", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-2.880566663777654e-04, -2.870535089331073e-04, -2.880375118443006e-04, -2.870397317242628e-04, -2.878572715973314e-04, -2.868147941875494e-04, -2.880667921747109e-04, -2.870833977745556e-04, -2.880474063756641e-04, -2.868891411381649e-04, -2.880474063756641e-04, -2.868891411381649e-04, 1.297047233677268e-03, 1.276393004050653e-03, 1.303237514188972e-03, 1.278866692166318e-03, 1.407984248473963e-03, 1.422544022216426e-03, 1.444755921819339e-03, 1.428274057786571e-03, 1.285148962764081e-03, 1.528272949266269e-03, 1.285148962764081e-03, 1.528272949266269e-03, 2.836342111699332e-03, 2.871590523918426e-03, 2.836013021065426e-03, 2.861685190396413e-03, 2.756298988073113e-03, 2.928517005818432e-03, 3.334125783189508e-03, 3.384886180572312e-03, 2.753182328308403e-03, 4.370042381493379e-03, 2.753182328308403e-03, 4.370042381493379e-03, 3.484306075262741e-01, 2.454288275793777e-02, 2.983947261267729e-01, 6.120323522054209e-02, 2.799049755586007e-04, 4.563777298649323e-04, 1.028034688820172e-02, 3.550848012177146e-02, 2.702306763211501e-01, 6.684879683887291e-04, 2.702306763211506e-01, 6.684879683887555e-04, 8.343036759849755e-05, 1.444334238750426e-03, 2.447138569235797e-05, 1.966536126586354e-04, 2.133262326163896e-04, 4.772260118347736e-04, 4.561931092827519e-09, 6.794840991363997e-09, 1.612570223227596e-06, 1.138319683707499e-09, 1.612570223216137e-06, 1.138319684670626e-09, -8.021640985747057e-05, -7.563929172219208e-05, -7.909474335842671e-05, -7.456794802912155e-05, -7.831602890752199e-05, -7.427736876256570e-05, -7.742822707443959e-05, -7.337576880843358e-05, -8.103023328494978e-05, -7.533182999013601e-05, -8.103023328494978e-05, -7.533182999013601e-05, 9.006561209636206e-03, 7.257900978825233e-03, 7.058330913232243e-04, -5.384903428007203e-04, 1.959341860951526e-03, 2.490885334063946e-03, -4.812976226806535e-03, -4.478820328583991e-03, 8.749929555895925e-03, 3.549539163627296e-03, 8.749929555895925e-03, 3.549539163627296e-03, 5.939863841054037e-02, 5.812571688561158e-02, 2.101507139928728e-02, 1.705331926397836e-02, 1.886959983640187e-02, 4.920578857349902e-02, 2.145050070896367e-02, 4.874244552107020e-02, 3.577927475715129e-02, 5.781799673695301e-02, 3.577927475715121e-02, 5.781799673695302e-02, 8.765283091431956e-03, 7.165950461829064e-03, 3.409014248849970e-01, 3.076032059299151e-01, 3.484339230862283e-03, 7.508471686561537e-03, 1.542747466802021e-02, 1.545804200712479e-02, 3.576615605610490e-02, 4.984737474530118e-02, 3.576615605610499e-02, 4.984737474530099e-02, 2.209380164067142e-11, 2.796990681367892e-11, 5.361071741903985e-10, 3.771272798081833e-10, 1.436772861265948e-08, 1.908227500504385e-08, 6.580571945523192e-04, 2.996222943470447e-03, 2.351367615037414e-11, 3.498910739819881e-06, 2.351367615037431e-11, 3.498910739843075e-06, -1.189879978285383e-02, -1.155373430210219e-02, -1.147112452339944e-02, -1.114756971948195e-02, -1.157866311656326e-02, -1.124622115974233e-02, -1.169893573443265e-02, -1.137016900472808e-02, -1.164127635936300e-02, -1.130858688820131e-02, -1.164127635936300e-02, -1.130858688820133e-02, -2.261192689356881e-02, -2.194055586790456e-02, -2.829519678441810e-02, -2.764834843342874e-02, -2.480584681400529e-02, -2.423368600943499e-02, -2.116325760984729e-02, -2.098153317281713e-02, -2.341496646220873e-02, -2.286817179332092e-02, -2.341496646220878e-02, -2.286817179332097e-02, 3.940788757899823e-02, 3.381636078859739e-02, 1.585250174580996e-01, 1.615703798009872e-01, 2.148667700316964e-01, 2.103975819555661e-01, 7.333209305548302e-02, 7.016121051380686e-02, 1.658280653113713e-01, 1.654681205476199e-01, 1.658280653113715e-01, 1.654681205476199e-01, 1.022645456288222e-01, 9.060567870382802e-02, 2.782812377038661e-03, 1.560262367439507e-03, 4.902772387035892e-04, 6.819820532213007e-04, 7.428580292689467e-02, 1.248573603810366e-01, 7.546942069549973e-03, 1.450352696752442e-02, 7.546942069549908e-03, 1.450352696752449e-02, 2.434365602213121e-08, 2.394730830872969e-08, 5.578594186075841e-14, 3.245506846605279e-14, 7.413211379971345e-09, 9.818594187167102e-09, 1.209242254194280e-02, 8.558015983938096e-02, 1.169960492727126e-10, 2.219347368159626e-06, 1.169960491860982e-10, 2.219347368217624e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
