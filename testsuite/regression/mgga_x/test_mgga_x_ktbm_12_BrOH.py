
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_12_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_12", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.398240093656747e+01, -2.398246030299941e+01, -2.398286286241711e+01, -2.398189528290081e+01, -2.398243099900951e+01, -2.398243099900951e+01, -3.414990455525206e+00, -3.415086037125637e+00, -3.418231755883415e+00, -3.419369050207490e+00, -3.415019857740782e+00, -3.415019857740782e+00, -6.096262923376301e-01, -6.091485163297982e-01, -5.977656324116793e-01, -6.068175701298308e-01, -6.094569837900329e-01, -6.094569837900329e-01, -1.849948513595484e-01, -1.874558020861112e-01, -6.979057924169447e-01, -1.236250639636863e-01, -1.856700287714600e-01, -1.856700287714600e-01, -9.592438899904103e-03, -1.004427836246750e-02, -4.064416451884680e-02, -4.524113237890566e-03, -9.941930438174337e-03, -9.941930438174335e-03, -5.860569722098731e+00, -5.861078252272208e+00, -5.860663337118100e+00, -5.861056472829413e+00, -5.860775001145685e+00, -5.860775001145685e+00, -2.091891559162700e+00, -2.120031773988766e+00, -2.089522857695771e+00, -2.112007679805436e+00, -2.113824467334549e+00, -2.113824467334549e+00, -6.069642602603454e-01, -6.528887053732257e-01, -5.547781114070319e-01, -5.741184105049099e-01, -6.404796266108713e-01, -6.404796266108713e-01, -9.138002190542591e-02, -1.816036412001477e-01, -9.025899523865243e-02, -1.899081818876603e+00, -1.069575853082925e-01, -1.069575853082925e-01, -4.396268002705818e-03, -5.003213612172555e-03, -3.778012349215014e-03, -5.612753628656417e-02, -4.543885354676935e-03, -4.543885354676934e-03, -6.577990520928553e-01, -6.580429069719305e-01, -6.580137792899556e-01, -6.579446127152164e-01, -6.579808581618802e-01, -6.579808581618802e-01, -6.305565812123655e-01, -5.615534155817944e-01, -5.859665718948772e-01, -6.050717245303642e-01, -5.952091424933088e-01, -5.952091424933088e-01, -6.724662810168620e-01, -2.354819031960556e-01, -2.819076653365382e-01, -3.564109904986428e-01, -3.209576576363122e-01, -3.209576576363121e-01, -4.789479000496191e-01, -3.776867278964662e-02, -5.091935649012233e-02, -3.366169853235236e-01, -7.428053594966952e-02, -7.428053594966952e-02, -1.105951545772087e-02, -1.360352277590129e-03, -2.626538846810536e-03, -7.079041214918426e-02, -3.859361045594858e-03, -3.859361045594854e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_12_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_12", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.914167996886522e+01, -2.914178228876395e+01, -2.914218131141269e+01, -2.914050214230821e+01, -2.914173447144545e+01, -2.914173447144545e+01, -4.684264314927565e+00, -4.684390212244938e+00, -4.688319037737553e+00, -4.687022248438947e+00, -4.684322453217502e+00, -4.684322453217502e+00, -8.054936083078205e-01, -8.043758114528322e-01, -7.784892341976851e-01, -7.920224191462815e-01, -8.050969204544829e-01, -8.050969204544829e-01, -2.328408951796014e-01, -2.362100759867109e-01, -9.022749461084919e-01, -1.579074191716103e-01, -2.337997861062999e-01, -2.337997861062999e-01, -1.213703008964841e-02, -1.271593512492310e-02, -5.192022589142208e-02, -5.883971476043353e-03, -1.258169842177953e-02, -1.258169842177953e-02, -7.186157808932915e+00, -7.190116256960316e+00, -7.186535808456497e+00, -7.189615182626255e+00, -7.188221863150921e+00, -7.188221863150921e+00, -2.590063571525958e+00, -2.611178826524625e+00, -2.581604521344036e+00, -2.598151074893096e+00, -2.615802849370311e+00, -2.615802849370311e+00, -8.023558920393352e-01, -9.162004067664733e-01, -7.544326731001854e-01, -8.214733806721052e-01, -8.375615120289721e-01, -8.375615120289721e-01, -1.165471586317154e-01, -2.284062667145240e-01, -1.150739568973029e-01, -2.768923580680057e+00, -1.355369132067660e-01, -1.355369132067660e-01, -5.649242765023797e-03, -6.473609364425034e-03, -4.829003594123083e-03, -7.252392409671753e-02, -5.911224396718260e-03, -5.911224396718263e-03, -8.759597696227878e-01, -8.565992241298966e-01, -8.633702653109284e-01, -8.687354354721917e-01, -8.660394957079113e-01, -8.660394957079112e-01, -8.522092812151321e-01, -6.700163272149211e-01, -7.103657018020025e-01, -7.579262008447127e-01, -7.329223207064586e-01, -7.329223207064587e-01, -9.579976417013107e-01, -2.950866531710745e-01, -3.546575585099349e-01, -4.641739311220605e-01, -4.063832181917802e-01, -4.063832181917799e-01, -6.087955097325469e-01, -4.801335991123252e-02, -6.514692282994515e-02, -4.466838442859908e-01, -9.461171508379586e-02, -9.461171508379583e-02, -1.436701356910116e-02, -1.780799325132122e-03, -3.346831920242775e-03, -9.024389078974047e-02, -5.025846172367502e-03, -5.025846172367502e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_12_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_12", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.833326139987473e-08, -1.833318005601756e-08, -1.833274621961990e-08, -1.833409478721889e-08, -1.833321889965726e-08, -1.833321889965726e-08, -1.466763911728691e-05, -1.467036052811641e-05, -1.475070046609361e-05, -1.472308356558797e-05, -1.466806294741415e-05, -1.466806294741415e-05, -4.480717001261549e-03, -4.466524169726907e-03, -4.114162642809610e-03, -4.404827033049149e-03, -4.476194321157621e-03, -4.476194321157621e-03, -7.354928851334480e-01, -7.420942400514898e-01, -1.119649475436267e-03, -3.866677952517206e-01, -7.364841097098058e-01, -7.364841097098058e-01, -7.840533308277986e+01, -7.087590178598803e+01, -2.624366088898561e+00, -1.339672497228565e+02, -7.430063490172449e+01, -7.430063490172439e+01, -5.522318008489260e-06, -5.522865154963114e-06, -5.522438661364771e-06, -5.522859326406535e-06, -5.522518128312072e-06, -5.522518128312072e-06, -1.338870861259378e-04, -1.356228313022403e-04, -1.335408231968195e-04, -1.350610834534150e-04, -1.354691170948652e-04, -1.354691170948652e-04, -2.598631213035480e-02, -2.235647904769158e-02, -2.715980039552567e-02, -2.768862344813514e-02, -2.448052890132841e-02, -2.448052890132841e-02, -5.907612230336041e-01, -3.307746553045445e-01, -6.709613593984666e-01, -2.257268221598381e-04, -6.951618336397200e-01, -6.951618336397200e-01, -2.204572370218997e+02, -1.373867901914787e+02, -5.830431803578718e+02, -1.051170264799846e+00, -1.646898337149613e+02, -1.646898337149611e+02, -3.311814657435187e-02, -3.334755774999925e-02, -3.328066421049492e-02, -3.321771538166943e-02, -3.325029216474380e-02, -3.325029216474380e-02, -3.712863179700666e-02, -4.741220619500569e-02, -4.600916385671690e-02, -4.336578216821649e-02, -4.481084058516858e-02, -4.481084058516856e-02, -1.739740639909762e-02, -2.475207583681824e-01, -1.941560490932958e-01, -1.255936859726040e-01, -1.698238808971593e-01, -1.698238808971594e-01, -5.670844342617557e-02, -3.057896942934597e+00, -1.569182394042600e+00, -1.880579934616411e-01, -1.139349802933827e+00, -1.139349802933826e+00, -2.444215023490493e+01, -1.464730915985539e+03, -9.333368197004103e+02, -1.356871163059618e+00, -2.639906089382579e+02, -2.639906089382584e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_12_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_12", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_12_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_12", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.583120519164247e-03, 2.583114243302441e-03, 2.583109338464246e-03, 2.583213741635723e-03, 2.583116989384719e-03, 2.583116989384719e-03, 7.885237675718460e-03, 7.887229613032416e-03, 7.948532124550536e-03, 7.947870643299873e-03, 7.885600964960016e-03, 7.885600964960016e-03, 1.162826870657377e-02, 1.158169717351981e-02, 1.070018023736307e-02, 1.260990226297698e-02, 1.161404726237565e-02, 1.161404726237565e-02, 8.514263719370418e-02, 8.804602931413177e-02, 1.291862277336264e-03, 1.120199748428456e-02, 8.576824220267373e-02, 8.576824220267373e-02, 1.294857942883017e-03, 1.338595898221110e-03, 3.086570833760241e-03, 1.721438973748376e-04, 1.364536121286008e-03, 1.364536121286025e-03, 1.059222579081558e-02, 1.058507593923370e-02, 1.059163832197814e-02, 1.058607034921048e-02, 1.058837423323598e-02, 1.058837423323598e-02, 1.843924581727688e-02, 1.919066952509845e-02, 1.844765764370485e-02, 1.906666319512211e-02, 1.892626276517679e-02, 1.892626276517679e-02, 7.235727772067016e-02, 6.968500260979349e-02, 6.121204346512502e-02, 6.424562602519139e-02, 7.604505822295930e-02, 7.604505822295930e-02, 7.896345133699401e-03, 3.935355393424052e-02, 8.663929749636584e-03, 1.884757162709822e-02, 1.599145853169059e-02, 1.599145853169059e-02, 3.050236775303364e-04, 2.578255952578340e-04, 5.400793048960449e-04, 2.738019167249926e-03, 2.134663696632210e-04, 2.134663696632237e-04, 8.327315254984187e-02, 8.623065223440764e-02, 8.520154053777199e-02, 8.438140513049250e-02, 8.479367173209154e-02, 8.479367173209154e-02, 8.482393855819299e-02, 1.028701492039114e-01, 1.024067602933657e-01, 9.747604087713400e-02, 1.001843862884649e-01, 1.001843862884649e-01, 6.187718578996373e-02, 6.182947655395051e-02, 7.549179965076684e-02, 8.277706420629923e-02, 8.861268991027657e-02, 8.861268991027646e-02, 8.564568337929146e-02, 3.018843922686441e-03, 3.570641677501170e-03, 9.848853241301017e-02, 8.410784183707212e-03, 8.410784183707163e-03, 4.667572744702879e-04, 4.522410882753282e-05, 2.985576331190257e-04, 8.564736900194355e-03, 2.060642403987647e-04, 2.060642403987692e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
