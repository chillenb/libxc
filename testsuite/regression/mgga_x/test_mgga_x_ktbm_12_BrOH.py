
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_12_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_12", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.140600976084639e+01, -2.140611322386796e+01, -2.140660829682168e+01, -2.140491868957873e+01, -2.140606397559470e+01, -2.140606397559470e+01, -3.086440769925658e+00, -3.086525668194211e+00, -3.089198112187341e+00, -3.088408083589558e+00, -3.086479016671790e+00, -3.878563934094498e+00, -5.626444384266527e-01, -7.024318768796716e-01, -6.757174800286730e-01, -6.845658349771214e-01, -7.031028299906844e-01, -7.031028299906844e-01, -1.898855189182647e-01, -1.931432098403108e-01, -6.768426324628060e-01, -1.287285944279214e-01, -1.908492761642645e-01, -1.908492761642645e-01, -9.606039557361353e-03, -1.006222662034495e-02, -4.104999805307930e-02, -4.606861422120423e-03, -9.957374139330894e-03, -9.957374139330896e-03, -5.863941373218453e+00, -5.864412968985462e+00, -5.863988387478375e+00, -5.373227529683215e+00, -5.864185339458668e+00, -5.864185339458668e+00, -1.698008390062720e+00, -1.716257316937762e+00, -1.690527926495343e+00, -1.704690745163107e+00, -1.720337741459698e+00, -2.179113167915907e+00, -6.564205823289234e-01, -7.134027857470256e-01, -6.190747183902534e-01, -6.507784127558548e-01, -6.829411715472101e-01, -5.772985621392622e-01, -8.672037281729164e-02, -1.843035598509822e-01, -8.550281289179874e-02, -2.173133327710622e+00, -1.089858827713636e-01, -1.089858827713636e-01, -4.312237381836446e-03, -5.079064548381325e-03, -3.806814542058130e-03, -5.474149515907517e-02, -4.490300204099179e-03, -4.627790295531418e-03, -6.655136742680239e-01, -6.654552791542365e-01, -6.414887484029109e-01, -6.655537352440428e-01, -6.655524363179354e-01, -6.655524363179354e-01, -6.454340625811976e-01, -5.680067810623008e-01, -5.953435217630674e-01, -6.170222639346180e-01, -6.064377068133415e-01, -5.303630319829974e-01, -7.490288528818035e-01, -1.952008656500422e-01, -2.909546400253997e-01, -3.053514365331515e-01, -3.372440788786794e-01, -3.372440788786792e-01, -4.053491425474461e-01, -3.799238176520619e-02, -5.156300502356031e-02, -3.702158470215506e-01, -7.060835462499333e-02, -7.545449293802864e-02, -1.125761189679284e-02, -1.390471922675478e-03, -2.641448311578320e-03, -7.198185793698574e-02, -3.932973467037509e-03, -3.932973467037503e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_12_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_12", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.172356135608194e+01, -3.172365180790071e+01, -3.172411078344330e+01, -3.172262980663534e+01, -3.172360857605142e+01, -3.172360857605142e+01, -4.682020352326210e+00, -4.682239706099289e+00, -4.688992790834589e+00, -4.686755097013481e+00, -4.682103517221915e+00, -4.604871986759620e+00, -7.609921219094635e-01, -8.700502387419693e-01, -8.403287828266084e-01, -8.499765531383403e-01, -8.707754937117462e-01, -8.707754937117462e-01, -2.362206899365619e-01, -2.400086274966276e-01, -8.735195606468957e-01, -1.613235593460939e-01, -2.373482797920915e-01, -2.373482797920915e-01, -1.212688043427595e-02, -1.270259045549929e-02, -5.174456491970889e-02, -5.816618965841908e-03, -1.257022098788755e-02, -1.257022098788757e-02, -7.181961572982686e+00, -7.185960967418762e+00, -7.182396985103924e+00, -7.748500203231602e+00, -7.183974936641236e+00, -7.183974936641236e+00, -2.515351519316932e+00, -2.555749940998518e+00, -2.498204441234764e+00, -2.530050402206442e+00, -2.565144106159726e+00, -2.612448990494447e+00, -7.689743176915148e-01, -8.532897516054476e-01, -7.285938464743346e-01, -7.634843827830300e-01, -8.018795688849198e-01, -8.806096633237716e-01, -1.124015324663757e-01, -2.305479710380112e-01, -1.106844608658103e-01, -2.552898483425742e+00, -1.366306448093027e-01, -1.366306448093027e-01, -5.749001958113619e-03, -6.412770029667130e-03, -4.806424811295239e-03, -7.208299476756450e-02, -5.986328185624463e-03, -5.843010143378104e-03, -8.657855264452912e-01, -8.469216318722119e-01, -8.842900955056100e-01, -8.587246013089735e-01, -8.560910692104265e-01, -8.560910692104265e-01, -8.328564029931873e-01, -6.656847127013024e-01, -7.013500252406263e-01, -7.440557721469759e-01, -7.209332663602774e-01, -7.931556301128992e-01, -8.865653547637847e-01, -2.546185523686985e-01, -3.595564857967758e-01, -4.538568213598740e-01, -4.104463921634112e-01, -4.104463921634107e-01, -6.178181227897478e-01, -4.790330027485822e-02, -6.495432079695011e-02, -4.387473304961340e-01, -9.181770712627581e-02, -9.480772260679156e-02, -1.421218773301183e-02, -1.755643450471182e-03, -3.335124010752865e-03, -9.044534807638568e-02, -4.965760081315663e-03, -4.965760081315658e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_12_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_12", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.650672443483181e-08, -1.650668489473323e-08, -1.650637927878925e-08, -1.650704168224701e-08, -1.650670450330530e-08, -1.650670450330530e-08, -1.340491103515096e-05, -1.340742283382651e-05, -1.348107462242487e-05, -1.344825239709936e-05, -1.340535322102314e-05, -1.654303153988647e-05, -4.049107978588264e-03, -5.334434609020893e-03, -4.875426646707143e-03, -5.163049701714120e-03, -5.346609902139409e-03, -5.346609902139409e-03, -7.623624717586536e-01, -7.722323529534928e-01, -1.050641278822612e-03, -4.661446258732705e-01, -7.646162840703087e-01, -7.646162840703087e-01, -8.016784383118157e+01, -7.289661634466427e+01, -3.014152229731695e+00, -2.045090158925907e+02, -7.613196341769553e+01, -7.613196341769542e+01, -5.525375183271145e-06, -5.525889296086809e-06, -5.525453651805686e-06, -5.089420427972459e-06, -5.525610591796131e-06, -5.525610591796131e-06, -1.098493074090113e-04, -1.111732913232233e-04, -1.091137119554251e-04, -1.102642739891655e-04, -1.116760454773711e-04, -1.396179869725300e-04, -2.795564217090776e-02, -2.428495292084902e-02, -3.008663869969853e-02, -3.107053511824935e-02, -2.599480060807787e-02, -2.231360692052968e-02, -1.978813770818877e-01, -3.414132590061577e-01, -2.367713921987480e-01, -2.554313676015581e-04, -7.598408693553911e-01, -7.598408693553911e-01, 5.471838175546448e+01, -1.891747189226939e+02, -6.678526862577114e+02, -7.372875960604042e-02, 5.090996329128807e+01, -2.528737000529967e+02, -3.349722093076396e-02, -3.371192650090081e-02, -3.247529249791839e-02, -3.359178045101730e-02, -3.362253594337514e-02, -3.362253594337514e-02, -3.797894775886861e-02, -4.793019431585617e-02, -4.670671770680354e-02, -4.418180748885581e-02, -4.561305089996651e-02, -4.031980211835021e-02, -1.922344368552117e-02, -1.827543687874411e-01, -2.016363694199272e-01, -1.087544751522228e-01, -1.788618008663356e-01, -1.788618008663357e-01, -4.879501964191521e-02, -3.316768836729368e+00, -1.844146164281582e+00, -2.058323823622957e-01, -3.175645199583914e-01, -1.292258306739213e+00, -3.639576508407506e+01, -2.646820572360136e+03, -1.029320728657109e+03, -1.553729157904529e+00, -4.149368173335982e+02, -4.149368173335986e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_12_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_12", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.865765797697001e-03, 1.865779219649071e-03, 1.865834096292624e-03, 1.865616232521520e-03, 1.865772894063146e-03, 1.865772894063146e-03, 4.266828800037019e-03, 4.268594239347039e-03, 4.321655181150744e-03, 4.300739618519098e-03, 4.267298549504300e-03, 1.339937149570982e-02, 1.009513278680956e-03, 3.380028783501552e-02, 2.856925035057026e-02, 3.095488909811053e-02, 3.393920200723675e-02, 3.393920200723675e-02, 9.948575117844667e-02, 1.048283609559772e-01, -1.258785021136319e-03, 2.120446929236948e-02, 1.009784041379045e-01, 1.009784041379045e-01, 1.351036791450800e-03, 1.412487179666121e-03, 4.101344582841386e-03, 3.788336693365656e-04, 1.429549513013926e-03, 1.429549513013948e-03, 1.060744481619666e-02, 1.060009484052613e-02, 1.060664339207435e-02, 8.471540576273286e-03, 1.060375064644981e-02, 1.060375064644981e-02, 4.826488704340742e-03, 5.271324315013938e-03, 4.632315401276769e-03, 4.982228246002282e-03, 5.389840315542583e-03, 2.134413025594134e-02, 9.388180777936203e-02, 8.941815049766948e-02, 9.231679531498845e-02, 9.702397373095102e-02, 9.281547388497752e-02, 5.267710474730655e-02, -1.932013726763596e-03, 4.445555852087277e-02, -2.154031082178686e-03, 2.922090070588967e-02, 2.094079062513859e-02, 2.094079062513859e-02, -5.570241122896040e-07, 4.697033588073109e-04, 6.982530728418795e-04, -5.558390168962040e-04, -6.414657429120988e-07, 4.749064359861184e-04, 8.531844949643874e-02, 8.841152332618187e-02, 8.059323886075750e-02, 8.648047677243123e-02, 8.691306822110738e-02, 8.691306822110738e-02, 8.916037406262727e-02, 1.067303640608316e-01, 1.072768586002089e-01, 1.026458310655117e-01, 1.055496776939584e-01, 7.085165487470194e-02, 8.550756903478661e-02, -3.312937827637774e-03, 8.909136898192058e-02, 2.859186006099535e-02, 1.109569149753338e-01, 1.109569149753338e-01, 3.644561138969298e-02, 3.557605185420790e-03, 5.037954889545019e-03, 1.431440028925992e-01, -1.822422868536749e-03, 1.153881412857079e-02, 9.866830695369675e-04, 1.347456563058922e-04, 3.593246734325142e-04, 1.204309097253410e-02, 4.782825409949711e-04, 4.782825409949763e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
