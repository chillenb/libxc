
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_9_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_9", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.151148439795703e+01, -2.151160100873156e+01, -2.151211516053980e+01, -2.272848858647686e+01, -2.272922033038174e+01, -2.394728677407235e+01, -3.404400946081937e+00, -3.766057579895863e+00, -3.768572119035182e+00, -3.767899154126858e+00, -3.767578847028130e+00, -3.406228845785964e+00, -5.289673895070929e-01, -5.970851762917659e-01, -6.342413934851421e-01, -5.793414833522044e-01, -5.152400016051468e-01, -6.452630294591053e-01, -1.494475280975135e-01, -1.526768185107723e-01, -6.551464120002934e-01, -1.147065744292581e-01, -1.538004378792794e-01, -1.527459409766465e-01, -5.013000439715374e-03, -5.118121878753227e-03, -2.821665008334485e-02, -2.889993501443857e-03, -4.034235579338516e-03, -4.034235579338517e-03, -5.817426006428517e+00, -5.817934583141735e+00, -5.817447169995212e+00, -5.817896446805353e+00, -5.602453334536786e+00, -5.602645194515810e+00, -2.076705991075386e+00, -2.100989626196483e+00, -2.058339444412340e+00, -2.080094058824188e+00, -1.889853459151825e+00, -2.099069630877972e+00, -6.043622541476670e-01, -7.143576232224251e-01, -5.945817354826886e-01, -6.294574998108714e-01, -6.220513298739526e-01, -6.670660494594522e-01, -7.733992362022432e-02, -1.436136252365209e-01, -7.145601427401267e-02, -2.148074159108227e+00, -9.255630418250654e-02, -9.255630418250656e-02, -2.158483146097617e-03, -2.825133548498637e-03, -2.163576730995021e-03, -4.554830542936816e-02, -2.717847229438354e-03, -2.717847229438354e-03, -6.492876038062998e-01, -6.498416800613889e-01, -6.271363625170462e-01, -6.401690994809066e-01, -6.289748785608851e-01, -6.392920679745836e-01, -6.323178524150588e-01, -4.968401222284196e-01, -5.372183171945464e-01, -6.035548137029200e-01, -5.908526384660260e-01, -5.560992092296394e-01, -7.079695556693540e-01, -2.043366249227926e-01, -2.314762111029537e-01, -3.310820891880714e-01, -3.092119290618508e-01, -2.770093217961487e-01, -4.928171653762450e-01, -2.580494439636739e-02, -3.812880249730162e-02, -3.651135838924428e-01, -6.116604613998664e-02, -6.116604613998666e-02, -6.566656945432878e-03, -7.550696203629627e-04, -1.475949079902460e-03, -5.198389869817557e-02, -2.495855019967317e-03, -2.362433932340007e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_9_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_9", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.172623887690943e+01, -3.172613426962711e+01, -3.172633202258632e+01, -3.172620194221235e+01, -3.172665374194226e+01, -3.172665625740811e+01, -3.172560055506449e+01, -2.914608734153252e+01, -3.172629299090176e+01, -2.914679318147176e+01, -2.914710473665142e+01, -2.914679318147177e+01, -4.739253803227289e+00, -4.878085645639895e+00, -4.739272388203043e+00, -4.739194156850095e+00, -4.739601678124163e+00, -4.739708273805793e+00, -4.739883852833775e+00, -4.739950454622559e+00, -4.738452731065119e+00, -4.740325730795466e+00, -4.876980258394044e+00, -4.740325730795466e+00, -7.864803007542984e-01, -7.953500492776958e-01, -7.836198989300112e-01, -8.702951688280135e-01, -8.291770800589189e-01, -8.205501986418114e-01, -8.382041716995041e-01, -7.618567117029768e-01, -8.052299729500217e-01, -7.051409454275570e-01, -8.802538247853601e-01, -7.899816929918603e-01, -1.796013955726106e-01, -2.157629564018546e-01, -1.829846964919556e-01, -2.218110779417678e-01, -8.994548391698503e-01, -8.516540164788099e-01, -1.395001330131395e-01, -1.430068809530769e-01, -2.113746671949502e-01, -9.753785988237226e-02, -2.113746671949499e-01, -9.595849971999533e-02, -5.820126133521484e-03, -6.184702783092849e-03, -6.293286251979213e-03, -6.533655472035188e-03, -3.486968220665861e-02, -3.596733134842577e-02, -3.498251730812375e-03, -3.439955779539913e-03, -5.191921568001147e-03, -2.954318118477562e-03, -5.191921568001147e-03, -2.954318118477561e-03, -7.190327344179473e+00, -7.188617497359753e+00, -7.193678502666323e+00, -7.191855043795427e+00, -7.190548711327867e+00, -7.188754162908124e+00, -7.193422816384769e+00, -7.191693967725167e+00, -7.700583218631571e+00, -7.190237472298397e+00, -7.192015135089774e+00, -7.698714493054531e+00, -2.657319071964950e+00, -2.657578951085899e+00, -2.680417740724414e+00, -2.679904620759112e+00, -2.637002118724271e+00, -2.643190318650130e+00, -2.657743843529187e+00, -2.663918815959367e+00, -2.684823622110962e+00, -2.666224492262529e+00, -2.684823622110961e+00, -2.671429194669413e+00, -7.969391778818731e-01, -8.644213731764420e-01, -8.705688051790811e-01, -8.719871432022742e-01, -7.262926793585766e-01, -7.517337497708485e-01, -7.531632746886346e-01, -7.774340881960038e-01, -8.284353538614562e-01, -8.571730044809082e-01, -8.284353538614561e-01, -7.873261878085930e-01, -9.318083450266711e-02, -9.412201864433418e-02, -1.757897262411722e-01, -1.955200945622000e-01, -8.381247357357739e-02, -8.864915975234526e-02, -2.603210218871046e+00, -2.602046524860816e+00, -1.085344761390034e-01, -1.171733899054353e-01, -1.085344761390034e-01, -1.171733899054354e-01, -2.708764952074135e-03, -2.727269392995022e-03, -3.365918041099751e-03, -3.416856373459371e-03, -2.516999619843840e-03, -2.665622806262518e-03, -5.708665139637906e-02, -5.797369234456484e-02, -2.570637910992704e-03, -3.530562799106308e-03, -2.570637910992703e-03, -3.530562799106308e-03, -8.416579165446211e-01, -8.453175308000919e-01, -8.240952731135355e-01, -8.278059254819613e-01, -8.594479087152583e-01, -8.626497809813765e-01, -8.597879513169622e-01, -8.387746360078691e-01, -8.596154357058750e-01, -8.628201053616417e-01, -8.596154357058750e-01, -8.362216988707405e-01, -8.172104238699700e-01, -8.203599968734839e-01, -6.681219901551441e-01, -7.175366666560349e-01, -6.974977290500814e-01, -7.665553015899177e-01, -7.355844699112920e-01, -7.383610957909479e-01, -7.146198239998605e-01, -7.174227806023437e-01, -7.146198239998603e-01, -7.846651474217796e-01, -9.076574472981520e-01, -9.939826262272651e-01, -2.607562454802890e-01, -2.627696719581271e-01, -2.975255759050468e-01, -3.363359419691976e-01, -4.652582426852584e-01, -4.730191621551186e-01, -4.021964907943926e-01, -4.023310425606186e-01, -4.021964907943921e-01, -3.788742360862224e-01, -6.156733097484245e-01, -6.198485247582646e-01, -3.421892050749364e-02, -3.445261910958753e-02, -4.505176605478425e-02, -4.658841211743467e-02, -4.532485288110491e-01, -4.597159527845125e-01, -7.155105734627307e-02, -7.599665394387171e-02, -7.155105734627307e-02, -7.599665394387159e-02, -8.590432679458457e-03, -8.901739677408115e-03, -9.055179397001829e-04, -9.075875703830712e-04, -1.901872137842986e-03, -2.022786573494514e-03, -6.819751762445712e-02, -6.923528319524454e-02, -2.434972720160794e-03, -3.235973165569255e-03, -2.434972720160792e-03, -3.339720221366493e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_9_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_9", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.889253008997680e-08, 0.000000000000000e+00, -2.889448844579757e-08, -2.889242232126618e-08, 0.000000000000000e+00, -2.889440975242002e-08, -2.889190422170132e-08, 0.000000000000000e+00, -2.889371541207635e-08, -2.889314315364132e-08, 0.000000000000000e+00, -3.277853032299446e-08, -2.889248142755490e-08, 0.000000000000000e+00, -3.277700756549943e-08, -3.277494688158350e-08, 0.000000000000000e+00, -3.277700756549943e-08, -3.091984743570965e-05, 0.000000000000000e+00, -2.374956569752632e-05, -3.092633186218910e-05, 0.000000000000000e+00, -3.092025752081180e-05, -3.105286046543598e-05, 0.000000000000000e+00, -3.107418452257355e-05, -3.099641829119765e-05, 0.000000000000000e+00, -3.099485817158404e-05, -3.092521417855036e-05, 0.000000000000000e+00, -3.110645021301158e-05, -2.375517827433637e-05, 0.000000000000000e+00, -3.110645021301158e-05, -7.314235539669381e-03, 0.000000000000000e+00, -7.492812095261661e-03, -7.274573497331278e-03, 0.000000000000000e+00, -1.097542602820261e-02, -1.011026400730631e-02, 0.000000000000000e+00, -1.010245918739376e-02, -1.054713210821845e-02, 0.000000000000000e+00, -7.170151478556036e-03, -7.454162459301816e-03, 0.000000000000000e+00, -6.402162700622037e-03, -1.090377064457278e-02, 0.000000000000000e+00, -9.991497921286535e-03, -7.966615210344271e-01, 0.000000000000000e+00, -1.443976661317150e+00, -8.141175167397512e-01, 0.000000000000000e+00, -1.459899294651069e+00, -2.756998997343668e-03, 0.000000000000000e+00, -1.907492860133760e-03, -1.154864742405702e+00, 0.000000000000000e+00, -1.301438289422686e+00, -1.147553711728988e+00, 0.000000000000000e+00, -1.519583625540134e+00, -1.147553711728988e+00, 0.000000000000000e+00, -3.674441841157153e-01, -5.530221125648145e+02, 0.000000000000000e+00, -4.908780590167392e+02, -2.393729246421890e+01, 0.000000000000000e+00, -4.500437667413524e+02, -9.564362895336599e-01, 0.000000000000000e+00, -1.096268831752176e+01, -1.307304012011487e+03, 0.000000000000000e+00, -1.358862686429939e+03, -6.769211078306445e+02, 0.000000000000000e+00, -2.732024909610310e+03, -6.769211078306445e+02, 0.000000000000000e+00, -2.732024909610310e+03, -9.681135694292031e-06, 0.000000000000000e+00, -9.690456610254503e-06, -9.680161454825867e-06, 0.000000000000000e+00, -9.689517306730436e-06, -9.681133454435302e-06, 0.000000000000000e+00, -9.690461935920490e-06, -9.680293992460820e-06, 0.000000000000000e+00, -9.689605025638859e-06, -8.839092839223401e-06, 0.000000000000000e+00, -9.689985203009978e-06, -9.680606720290855e-06, 0.000000000000000e+00, -8.847588275345097e-06, -2.616888826528913e-04, 0.000000000000000e+00, -2.626934283044283e-04, -2.632343348613990e-04, 0.000000000000000e+00, -2.641636866026323e-04, -2.595749699242052e-04, 0.000000000000000e+00, -2.611906582804560e-04, -2.613172452488910e-04, 0.000000000000000e+00, -2.628416973108350e-04, -2.639803761361252e-04, 0.000000000000000e+00, -1.974162177285420e-04, -2.639803761361252e-04, 0.000000000000000e+00, -2.638028089892997e-04, -4.920823559865871e-02, 0.000000000000000e+00, -4.126020566375935e-02, -4.162549539983301e-02, 0.000000000000000e+00, -4.178487967296001e-02, -5.754067686027931e-02, 0.000000000000000e+00, -5.604427679630133e-02, -6.058250980882360e-02, 0.000000000000000e+00, -5.612131116003542e-02, -4.478991722985347e-02, 0.000000000000000e+00, -4.320288099206352e-02, -4.478991722985348e-02, 0.000000000000000e+00, -5.234584390996420e-02, -1.851029877877298e+00, 0.000000000000000e+00, -1.819098559405415e+00, -3.696130560795161e-01, 0.000000000000000e+00, -7.192980384923392e-01, -2.185251725427424e+00, 0.000000000000000e+00, -2.080342900311241e+00, -4.585894196875477e-04, 0.000000000000000e+00, -4.595215653441026e-04, -1.822992339827886e+00, 0.000000000000000e+00, -2.129368199867638e+00, -1.822992339827886e+00, 0.000000000000000e+00, -2.129368199867640e+00, -8.944516187387988e+01, 0.000000000000000e+00, -1.758902284538540e+03, -1.375198957527364e+03, 0.000000000000000e+00, -1.252878796176201e+03, -6.602358703349842e+03, 0.000000000000000e+00, -6.168861882579860e+03, -4.750322808619922e+00, 0.000000000000000e+00, -7.449578032842282e-01, -2.745673623862541e+03, 0.000000000000000e+00, -2.597417922912209e+03, -2.745673623862541e+03, 0.000000000000000e+00, -2.597417922912209e+03, -6.181654173337287e-02, 0.000000000000000e+00, -6.088357388298110e-02, -6.259675723566613e-02, 0.000000000000000e+00, -6.166269668762395e-02, -5.973171280124068e-02, 0.000000000000000e+00, -5.889309798370700e-02, -5.995283400358252e-02, 0.000000000000000e+00, -6.119930609682381e-02, -5.984470971371084e-02, 0.000000000000000e+00, -5.899819173602154e-02, -5.984470971371084e-02, 0.000000000000000e+00, -6.131435028578564e-02, -6.884297341863421e-02, 0.000000000000000e+00, -6.795960041136748e-02, -9.151353593606111e-02, 0.000000000000000e+00, -7.242414751484007e-02, -8.878730966523674e-02, 0.000000000000000e+00, -7.382510493579621e-02, -8.266214741928316e-02, 0.000000000000000e+00, -8.160188037387132e-02, -8.617164030223383e-02, 0.000000000000000e+00, -8.511264359768796e-02, -8.617164030223383e-02, 0.000000000000000e+00, -7.357846305905005e-02, -3.333065990742470e-02, 0.000000000000000e+00, -2.923386939697313e-02, -5.023150381608481e-01, 0.000000000000000e+00, -4.987772122177598e-01, -2.557548672564253e-01, 0.000000000000000e+00, -3.902933918641083e-01, -1.940803164964929e-01, 0.000000000000000e+00, -2.562323372652511e-01, -3.416253214422640e-01, 0.000000000000000e+00, -3.446499110604938e-01, -3.416253214422642e-01, 0.000000000000000e+00, -2.447061106977043e-01, -1.103402808969535e-01, 0.000000000000000e+00, -1.106391003081484e-01, -1.013325769079534e+00, 0.000000000000000e+00, -9.911915868074096e-01, -6.619865070282231e+00, 0.000000000000000e+00, -6.354151565040877e+00, -3.651361415307763e-01, 0.000000000000000e+00, -3.873084925673165e-01, -3.698965933195103e+00, 0.000000000000000e+00, -3.862467778819194e+00, -3.698965933195105e+00, 0.000000000000000e+00, -3.862467778819196e+00, -8.856004727684972e+00, 0.000000000000000e+00, -8.213737871771581e+00, -2.035849596536908e+04, 0.000000000000000e+00, -2.022115318980744e+04, -3.699497850083510e+02, 0.000000000000000e+00, -3.369154394238564e+02, -8.662025057851389e-01, 0.000000000000000e+00, -9.543209484388978e-01, -4.917393009948426e+03, 0.000000000000000e+00, -3.147285789570082e+03, -4.917393009948436e+03, 0.000000000000000e+00, -1.440857575938152e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_9_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_9", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.784888741920246e-03, 1.784941065739652e-03, 1.784890320228535e-03, 1.784942198308725e-03, 1.784891472507352e-03, 1.784944908824940e-03, 1.784874213458040e-03, 2.424006401544650e-03, 1.784890069652872e-03, 2.423867318338411e-03, 2.423873484926106e-03, 2.423867318338411e-03, 1.438927684099931e-02, 6.172352612185891e-03, 1.439122284508430e-02, 1.438912845990110e-02, 1.442889455557606e-02, 1.443544069839745e-02, 1.441403082647732e-02, 1.441388033179222e-02, 1.438724184199977e-02, 1.444733940400868e-02, 6.170069168880077e-03, 1.444733940400868e-02, 7.894694100119941e-03, 8.457593359303539e-03, 7.739507266052195e-03, 4.036231238393564e-02, 3.419749686417650e-02, 3.342024253226646e-02, 3.617050964028994e-02, 6.836902137588690e-03, 8.787558895636970e-03, 4.268611625914449e-03, 4.111893305781675e-02, 3.051766746264976e-02, 6.015467200792616e-03, 9.382170140281421e-02, 7.015372348912346e-03, 1.006430635054514e-01, 1.427343611883520e-02, 1.771711192456666e-03, 2.566605696321296e-02, 3.079640124389733e-02, 7.418004078803554e-02, 1.174711358500658e-02, 7.418004078803542e-02, -4.652001277084993e-04, 8.752232968983974e-04, 9.322548491045641e-04, -5.210522171828091e-07, 1.007763914752314e-03, -4.112785834908160e-05, 4.138559100163861e-03, 4.491334238699020e-04, 4.438927767555176e-04, 7.604283213775604e-04, 5.653349126325375e-04, 7.604283213775604e-04, 5.653349126325337e-04, 9.187897622095105e-03, 9.189999613022562e-03, 9.170275685618868e-03, 9.172964519105500e-03, 9.186685022822114e-03, 9.189245390904890e-03, 9.171574650612972e-03, 9.173780006883521e-03, 7.467134923827552e-03, 9.181476786324342e-03, 9.179052325696869e-03, 7.468954160508360e-03, 2.277235189743107e-02, 2.283789478369437e-02, 2.322417956956206e-02, 2.327301225222025e-02, 2.232492892302446e-02, 2.252101969492782e-02, 2.275617583099534e-02, 2.294555274297035e-02, 2.333713863663804e-02, 8.614600487850822e-03, 2.333713863663804e-02, 2.312054849590278e-02, 9.430653536694872e-02, 5.525806089609343e-02, 8.057248057880702e-02, 7.986695007006277e-02, 9.539079203528532e-02, 9.757326417213895e-02, 9.966171044278969e-02, 9.652843259826911e-02, 9.009298468416282e-02, 5.628149265532204e-02, 9.009298468416288e-02, 9.545645738212535e-02, 1.247742349402117e-02, 1.263943309677356e-02, 5.760858327046453e-04, 4.109808609288374e-02, 1.069261664766392e-02, 1.206723382454358e-02, 2.868344822627570e-02, 2.869453965954139e-02, 1.938976258056924e-02, 2.814845094593849e-02, 1.938976258056919e-02, 2.814845094593852e-02, -2.132281695809970e-08, 2.863131643350909e-04, 4.208388870883519e-04, 4.010764786608690e-04, 8.449194562917067e-04, 9.377391668103110e-04, 7.263144981833889e-03, -2.132992966232521e-04, 3.742777740185531e-04, 9.174505115552935e-04, 3.742777740185542e-04, 9.174505115552842e-04, 6.610554627460530e-02, 6.566730167322757e-02, 7.265652906832347e-02, 7.212438588059175e-02, 6.445154043100983e-02, 6.412174731974758e-02, 6.372104753219782e-02, 6.802021384207270e-02, 6.409773799549862e-02, 6.377377868684216e-02, 6.409773799549862e-02, 6.895784235306569e-02, 6.883227300596267e-02, 6.838833307947638e-02, 1.105654281521524e-01, 5.720904204275769e-02, 1.071093301191926e-01, 6.746300977993734e-02, 9.455738983570902e-02, 9.405729341433856e-02, 1.018923374239413e-01, 1.013215350721176e-01, 1.018923374239413e-01, 7.022415022333553e-02, 7.994586966555348e-02, 5.620827073180364e-02, 6.081644893378902e-02, 6.154587062208668e-02, 1.386101407883192e-02, 8.726582393404221e-02, 4.529616117170071e-02, 1.263970268110483e-01, 1.140214315423742e-01, 1.148551975157887e-01, 1.140214315423740e-01, 3.122587814591120e-02, 1.118679708954043e-01, 1.130712276984186e-01, -4.092776767193983e-05, -4.093327162489427e-05, 4.932315952842012e-03, 5.241571147383573e-03, 1.493232462857163e-01, 1.571615655783100e-01, 1.124614689727533e-02, 1.411587477161064e-02, 1.124614689727528e-02, 1.411587477161064e-02, -6.166848275441798e-07, -6.762213486440302e-07, 1.212904860432649e-04, 1.213001722272085e-04, -3.068052289698084e-08, -3.910541525095017e-08, -4.114115182310910e-04, -4.703882140465674e-04, 5.697125978124081e-04, 8.559375864704512e-04, 5.697125978124069e-04, -2.329580846999295e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
