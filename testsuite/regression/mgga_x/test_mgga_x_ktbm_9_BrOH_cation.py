
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_9_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_9", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.378159369301066e+01, -2.378166400960292e+01, -2.378208134023148e+01, -2.378103802207374e+01, -2.378156975971455e+01, -2.378156975971455e+01, -3.337634673679635e+00, -3.337774286326711e+00, -3.341717660760338e+00, -3.342400480781095e+00, -3.341159557235959e+00, -3.341159557235959e+00, -5.707550531094463e-01, -5.699894311533377e-01, -5.529779513159897e-01, -5.645558190455369e-01, -5.634243843931553e-01, -5.634243843931553e-01, -1.605217341124389e-01, -1.634706307684545e-01, -6.155650692144350e-01, -1.106867767423137e-01, -1.496898725594676e-01, -1.496898725594676e-01, -5.007550241354079e-03, -5.268727359924940e-03, -2.878566566846111e-02, -2.850453589608570e-03, -4.007356753037979e-03, -4.007356753037979e-03, -5.814515876620404e+00, -5.815058720895395e+00, -5.814597584764497e+00, -5.815074497831832e+00, -5.814762697814998e+00, -5.814762697814998e+00, -2.016528316124217e+00, -2.048283002918913e+00, -2.006485307515855e+00, -2.035366742238666e+00, -2.038977564017358e+00, -2.038977564017358e+00, -6.135488806536735e-01, -6.664319340073569e-01, -5.369026532458229e-01, -5.547712438617450e-01, -6.283570439437258e-01, -6.283570439437258e-01, -7.549720681363548e-02, -1.532455115303298e-01, -6.972760947371839e-02, -1.903924252016087e+00, -9.079289087808287e-02, -9.079289087808284e-02, -2.143564049695767e-03, -2.749026863411256e-03, -2.130140877273726e-03, -4.655775655583207e-02, -2.681975750940840e-03, -2.681975750940841e-03, -6.431010714497849e-01, -6.438665268865620e-01, -6.437055181996330e-01, -6.434773785842196e-01, -6.435986164555247e-01, -6.435986164555247e-01, -6.204425257169350e-01, -5.384825845692714e-01, -5.693552254840024e-01, -5.937498012323340e-01, -5.816171353427226e-01, -5.816171353427225e-01, -6.879292391056981e-01, -2.019726052469895e-01, -2.495822009937215e-01, -3.407333426413353e-01, -2.956824644520549e-01, -2.956824644520550e-01, -4.694181037090699e-01, -2.768989102260370e-02, -3.748155054530630e-02, -3.390734330770871e-01, -5.998047714008141e-02, -5.998047714008142e-02, -6.868537586563672e-03, -7.113119222178991e-04, -1.575536048475583e-03, -5.656108730207817e-02, -2.463286506946051e-03, -2.463286506946049e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_9_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_9", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.934600174302751e+01, -2.934543180128120e+01, -2.934611565706950e+01, -2.934551461482305e+01, -2.934639699287866e+01, -2.934594110612227e+01, -2.934510746847566e+01, -2.934429813154316e+01, -2.934607183270175e+01, -2.934489408696511e+01, -2.934607183270175e+01, -2.934489408696511e+01, -4.866066376043841e+00, -4.865957192456256e+00, -4.866216207012884e+00, -4.866057357575209e+00, -4.869163250969024e+00, -4.869757807027968e+00, -4.868185366667144e+00, -4.868327362826937e+00, -4.864945323658986e+00, -4.871039371350062e+00, -4.864945323658986e+00, -4.871039371350062e+00, -8.213816597509244e-01, -8.288683743983943e-01, -8.189827232074685e-01, -8.276486273462429e-01, -7.859282886709740e-01, -7.791000779821320e-01, -7.994290716021716e-01, -8.043641484019404e-01, -8.366020305529784e-01, -7.591198956355680e-01, -8.366020305529784e-01, -7.591198956355680e-01, -2.006790049671367e-01, -2.151831065674402e-01, -2.042504302689143e-01, -2.210416374747673e-01, -8.240806220550352e-01, -8.759007678316607e-01, -1.383049908368473e-01, -1.421147582386826e-01, -2.095274159894985e-01, -9.777024001820685e-02, -2.095274159894981e-01, -9.777024001820690e-02, -5.824711016776497e-03, -6.186797236381409e-03, -6.106830789895183e-03, -6.538455996476490e-03, -3.425300879615954e-02, -3.615873425080231e-02, -3.523383753307523e-03, -3.461313245484390e-03, -5.204043684843295e-03, -2.990237511927296e-03, -5.204043684843306e-03, -2.990237511927292e-03, -7.194201424109904e+00, -7.192268952794469e+00, -7.197511069151286e+00, -7.195466312471578e+00, -7.194331921300229e+00, -7.192340413812119e+00, -7.197173764070387e+00, -7.195246988919382e+00, -7.195935007795330e+00, -7.193879920358420e+00, -7.195935007795330e+00, -7.193879920358420e+00, -2.668188897005183e+00, -2.668453921869266e+00, -2.692550735607875e+00, -2.691900887312142e+00, -2.644365180609286e+00, -2.651519876426598e+00, -2.666001417205812e+00, -2.673075218672202e+00, -2.699620389204932e+00, -2.683400324602233e+00, -2.699620389204932e+00, -2.683400324602233e+00, -8.302196888792149e-01, -8.273589494869370e-01, -9.253154730883216e-01, -9.253581047535331e-01, -7.475551091681095e-01, -7.820835912975925e-01, -8.068821381490715e-01, -8.351007769715656e-01, -8.617925109783771e-01, -8.230450349777653e-01, -8.617925109783771e-01, -8.230450349777653e-01, -9.337645787949017e-02, -9.431705735113788e-02, -1.935934927034680e-01, -1.946283821036399e-01, -8.412464235293558e-02, -8.887306592808036e-02, -2.813273972584950e+00, -2.812072620763808e+00, -1.084415569098855e-01, -1.168701764135144e-01, -1.084415569098854e-01, -1.168701764135143e-01, -2.675038223920683e-03, -2.777767035165584e-03, -3.408418389906750e-03, -3.463059855090074e-03, -2.535577449170717e-03, -2.686178823069440e-03, -5.750223635233274e-02, -5.776901910054980e-02, -2.629518519367366e-03, -3.536545033677792e-03, -2.629518519367370e-03, -3.536545033677799e-03, -8.499928204790491e-01, -8.534594431982763e-01, -8.321130923130865e-01, -8.356514093411161e-01, -8.381329984580492e-01, -8.416897539204793e-01, -8.433708159758001e-01, -8.468319756416154e-01, -8.407303992849487e-01, -8.442379501996490e-01, -8.407303992849487e-01, -8.442379501996490e-01, -8.330973986087443e-01, -8.357595662201390e-01, -6.718360372337377e-01, -6.746519794015614e-01, -7.051307909370325e-01, -7.082803092565292e-01, -7.474733135997279e-01, -7.502387361057279e-01, -7.250620681186104e-01, -7.275899826484705e-01, -7.250620681186104e-01, -7.275899826484703e-01, -9.724594269846298e-01, -9.734445108735419e-01, -2.597747687444249e-01, -2.617457477541358e-01, -3.287527211641736e-01, -3.338566172108433e-01, -4.731651194902641e-01, -4.759239856949987e-01, -4.003389342580940e-01, -4.005388057450296e-01, -4.003389342580939e-01, -4.005388057450300e-01, -6.254002833831369e-01, -6.300683785306088e-01, -3.349371850583753e-02, -3.374260244373448e-02, -4.534142971433074e-02, -4.687208507812002e-02, -4.627398919153669e-01, -4.716305829199628e-01, -7.179515410151117e-02, -7.616612023762691e-02, -7.179515410151117e-02, -7.616612023762703e-02, -8.435418680778578e-03, -8.747029403562994e-03, -9.290921801100429e-04, -9.337482870096466e-04, -1.849514046256347e-03, -1.967390132597688e-03, -6.874167068370830e-02, -6.990226085017803e-02, -2.484936905128799e-03, -3.241593133700892e-03, -2.484936905128791e-03, -3.241593133700895e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_9_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_9", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.250548417890398e-08, 0.000000000000000e+00, -3.250786365466006e-08, -3.250525615431044e-08, 0.000000000000000e+00, -3.250769757703958e-08, -3.250450086504429e-08, 0.000000000000000e+00, -3.250662192042947e-08, -3.250709814277487e-08, 0.000000000000000e+00, -3.250992729705528e-08, -3.250535791013558e-08, 0.000000000000000e+00, -3.250858554276799e-08, -3.250535791013558e-08, 0.000000000000000e+00, -3.250858554276799e-08, -2.663924652992075e-05, 0.000000000000000e+00, -2.663053661197691e-05, -2.664597346776481e-05, 0.000000000000000e+00, -2.663457580387257e-05, -2.677223116426584e-05, 0.000000000000000e+00, -2.679246760342146e-05, -2.673759001417558e-05, 0.000000000000000e+00, -2.673185746866239e-05, -2.664179013322063e-05, 0.000000000000000e+00, -2.684398916309072e-05, -2.664179013322063e-05, 0.000000000000000e+00, -2.684398916309072e-05, -8.435338158675565e-03, 0.000000000000000e+00, -8.589271315718086e-03, -8.407720241628008e-03, 0.000000000000000e+00, -8.567188594131669e-03, -7.916165219524849e-03, 0.000000000000000e+00, -7.967794060792170e-03, -8.424692922602060e-03, 0.000000000000000e+00, -8.581976413252807e-03, -8.460246068240748e-03, 0.000000000000000e+00, -8.261993698104845e-03, -8.460246068240748e-03, 0.000000000000000e+00, -8.261993698104845e-03, -1.290459472414374e+00, 0.000000000000000e+00, -1.421343807478406e+00, -1.291692324831545e+00, 0.000000000000000e+00, -1.430598989228856e+00, -1.770070420508869e-03, 0.000000000000000e+00, -2.110234341052660e-03, -9.758080617137049e-01, 0.000000000000000e+00, -1.179111265917625e+00, -1.089340357434278e+00, 0.000000000000000e+00, -1.113867713210387e+00, -1.089340357434277e+00, 0.000000000000000e+00, -1.113867713210387e+00, -5.468164249724833e+02, 0.000000000000000e+00, -4.885178548374540e+02, -5.034506162115707e+02, 0.000000000000000e+00, -4.453309568428500e+02, -1.064027637066311e+01, 0.000000000000000e+00, -9.994463854141221e+00, -1.165921393175973e+03, 0.000000000000000e+00, -1.233056251224980e+03, -6.541275170770110e+02, 0.000000000000000e+00, -2.204851974959990e+03, -6.541275170770100e+02, 0.000000000000000e+00, -2.204851974959990e+03, -9.675190702516751e-06, 0.000000000000000e+00, -9.684846695285851e-06, -9.674286207169846e-06, 0.000000000000000e+00, -9.683974637855447e-06, -9.675328343013758e-06, 0.000000000000000e+00, -9.684952456736755e-06, -9.674543454285006e-06, 0.000000000000000e+00, -9.684151514191587e-06, -9.674594547959008e-06, 0.000000000000000e+00, -9.684391909576915e-06, -9.674594547959008e-06, 0.000000000000000e+00, -9.684391909576915e-06, -2.518589165691827e-04, 0.000000000000000e+00, -2.531292210211427e-04, -2.547484535015631e-04, 0.000000000000000e+00, -2.558936637811119e-04, -2.512425538691959e-04, 0.000000000000000e+00, -2.526550373775767e-04, -2.542056866728973e-04, 0.000000000000000e+00, -2.555698382867906e-04, -2.538742150396960e-04, 0.000000000000000e+00, -2.547855997802028e-04, -2.538742150396960e-04, 0.000000000000000e+00, -2.547855997802028e-04, -4.555885752649817e-02, 0.000000000000000e+00, -4.653924531170489e-02, -3.828778721936520e-02, 0.000000000000000e+00, -3.855990521821216e-02, -5.010965285246184e-02, 0.000000000000000e+00, -5.010986122823818e-02, -5.156701120920811e-02, 0.000000000000000e+00, -4.885162690934199e-02, -4.208439792002692e-02, 0.000000000000000e+00, -4.826133811704617e-02, -4.208439792002693e-02, 0.000000000000000e+00, -4.826133811704617e-02, -1.635166549819725e+00, 0.000000000000000e+00, -1.589410613223567e+00, -7.013478466286999e-01, 0.000000000000000e+00, -6.907331887724234e-01, -1.875222410638779e+00, 0.000000000000000e+00, -1.832120611203021e+00, -3.979349555917869e-04, 0.000000000000000e+00, -3.987653684368505e-04, -1.666028503111749e+00, 0.000000000000000e+00, -1.988680961405374e+00, -1.666028503111749e+00, 0.000000000000000e+00, -1.988680961405376e+00, -1.311899805047755e+03, 0.000000000000000e+00, -1.197741302300597e+03, -1.098180559707386e+03, 0.000000000000000e+00, -9.797184730967620e+02, -5.867020255057968e+03, 0.000000000000000e+00, -5.448455668129199e+03, -3.979083842363992e+00, 0.000000000000000e+00, -4.500979494605437e+00, -1.577659943707843e+03, 0.000000000000000e+00, -2.534324157863389e+03, -1.577659943707846e+03, 0.000000000000000e+00, -2.534324157863388e+03, -6.109556203889409e-02, 0.000000000000000e+00, -6.019241384244078e-02, -6.189712420904588e-02, 0.000000000000000e+00, -6.099105681167824e-02, -6.165132790756572e-02, 0.000000000000000e+00, -6.074368588959730e-02, -6.141867634912510e-02, 0.000000000000000e+00, -6.051408018733389e-02, -6.153800971499867e-02, 0.000000000000000e+00, -6.063186778980693e-02, -6.153800971499867e-02, 0.000000000000000e+00, -6.063186778980693e-02, -6.725885655459404e-02, 0.000000000000000e+00, -6.644899351715690e-02, -9.043459629885930e-02, 0.000000000000000e+00, -8.951897672945126e-02, -8.738407575809862e-02, 0.000000000000000e+00, -8.634231317166292e-02, -8.106601762468409e-02, 0.000000000000000e+00, -8.003614699514407e-02, -8.454947133623496e-02, 0.000000000000000e+00, -8.356659079264453e-02, -8.454947133623496e-02, 0.000000000000000e+00, -8.356659079264452e-02, -3.004426006582716e-02, 0.000000000000000e+00, -3.040755325736029e-02, -4.908879406034219e-01, 0.000000000000000e+00, -4.871128433629137e-01, -3.723437962630561e-01, 0.000000000000000e+00, -3.731441702457960e-01, -2.367086323814480e-01, 0.000000000000000e+00, -2.317707419063722e-01, -3.209366195468467e-01, 0.000000000000000e+00, -3.237045867248757e-01, -3.209366195468469e-01, 0.000000000000000e+00, -3.237045867248760e-01, -1.036558620286724e-01, 0.000000000000000e+00, -1.044977379544362e-01, -1.208768589810574e+01, 0.000000000000000e+00, -1.168954298823212e+01, -5.855355910337688e+00, 0.000000000000000e+00, -5.649236593702757e+00, -3.278976927640128e-01, 0.000000000000000e+00, -3.592102175271586e-01, -3.302210200806203e+00, 0.000000000000000e+00, -3.475906187965009e+00, -3.302210200806205e+00, 0.000000000000000e+00, -3.475906187965012e+00, -1.480156841756689e+02, 0.000000000000000e+00, -1.346914812731996e+02, -9.823928500673630e+03, 0.000000000000000e+00, -7.613251554989442e+03, -7.739106103645531e+03, 0.000000000000000e+00, -7.026363528362080e+03, -3.931800247688277e+00, 0.000000000000000e+00, -4.298778153432399e+00, -3.121331997363148e+03, 0.000000000000000e+00, -3.068923556363002e+03, -3.121331997363155e+03, 0.000000000000000e+00, -3.068923556363008e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_9_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_9", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.378422991132595e-03, 2.378481478206268e-03, 2.378401113139398e-03, 2.378465580506524e-03, 2.378356668609431e-03, 2.378394699928492e-03, 2.378603635728519e-03, 2.378709645993750e-03, 2.378408869495725e-03, 2.378602522052547e-03, 2.378408869495725e-03, 2.378602522052547e-03, 9.386022990741791e-03, 9.378889611429133e-03, 9.388751778944725e-03, 9.380185315569011e-03, 9.436075462555560e-03, 9.443026230287243e-03, 9.441137870256546e-03, 9.436057536779330e-03, 9.381967995338985e-03, 9.478845740555542e-03, 9.381967995338985e-03, 9.478845740555542e-03, 1.725522025004674e-02, 1.776722789775685e-02, 1.714322498646501e-02, 1.767562372461727e-02, 1.528525735946204e-02, 1.541453901605226e-02, 1.748689299773360e-02, 1.799939900337673e-02, 1.753604973598740e-02, 1.695417138800132e-02, 1.753604973598740e-02, 1.695417138800132e-02, 6.784968017052813e-02, 8.989073559691733e-02, 6.994942079643665e-02, 9.523196829379826e-02, 2.671122079610085e-03, 4.078971604743755e-03, 1.676109211132671e-02, 2.401656481432609e-02, 6.434346159487722e-02, 5.657013041138138e-03, 6.434346159487704e-02, 5.657013041138145e-03, 8.549422190447904e-04, 9.229679481983177e-04, 8.985305740347235e-04, 9.859599452276019e-04, 3.011913859498419e-03, 3.403780747263147e-03, 3.538264774702731e-04, 3.625772545428755e-04, 7.081606411576893e-04, 3.611721597610353e-04, 7.081606411576877e-04, 3.611721597610304e-04, 9.175533657651752e-03, 9.178341043535465e-03, 9.158089606567395e-03, 9.161475622808224e-03, 9.174614256483162e-03, 9.177796900742913e-03, 9.159644914912963e-03, 9.162474539094809e-03, 9.166565484630239e-03, 9.169867871061372e-03, 9.166565484630239e-03, 9.169867871061372e-03, 2.053926739100025e-02, 2.066764659755426e-02, 2.127536027453068e-02, 2.137668615313078e-02, 2.044615207957785e-02, 2.059420660655947e-02, 2.113647416221518e-02, 2.128765479044797e-02, 2.101612237821440e-02, 2.106181235472794e-02, 2.101612237821440e-02, 2.106181235472794e-02, 7.745873372086604e-02, 7.836662399681399e-02, 6.613681150394017e-02, 6.614967499968959e-02, 6.451653994839271e-02, 7.211360717919077e-02, 6.425364953825870e-02, 6.706609146105950e-02, 7.722715446696317e-02, 7.760568972314195e-02, 7.722715446696318e-02, 7.760568972314190e-02, 9.406377066708013e-03, 9.283707579869710e-03, 3.711173969608062e-02, 3.699938897682528e-02, 7.575387907125068e-03, 9.046229300346867e-03, 1.983926437989861e-02, 1.985081446153807e-02, 1.567740942984195e-02, 2.383537403407060e-02, 1.567740942984192e-02, 2.383537403407062e-02, 1.209575318441745e-04, 1.278154052688094e-04, 2.629574926904685e-04, 2.397803396358061e-04, 6.605887454327348e-04, 7.238500495007177e-04, 4.937590965648956e-03, 6.187051727437914e-03, 1.164525968287431e-04, 8.717430916019060e-04, 1.164525968287454e-04, 8.717430916019053e-04, 6.459838305789546e-02, 6.421238640306355e-02, 7.098657234951469e-02, 7.051177580590763e-02, 6.878498474272124e-02, 6.832507194697289e-02, 6.690943746885317e-02, 6.650428458937259e-02, 6.785086476675627e-02, 6.741868915659123e-02, 6.785086476675627e-02, 6.741868915659123e-02, 6.572183960403045e-02, 6.540802629827572e-02, 1.073137072853987e-01, 1.071433578165484e-01, 1.030676103233280e-01, 1.025251004332003e-01, 9.044515832511256e-02, 8.999642005657479e-02, 9.743262197421987e-02, 9.704749601640170e-02, 9.743262197421987e-02, 9.704749601640160e-02, 6.196961635031768e-02, 6.228641331193994e-02, 5.716570451263935e-02, 5.774484711463474e-02, 7.438131357621804e-02, 7.699383305227911e-02, 9.595957380692070e-02, 9.518042549724619e-02, 9.568475698868927e-02, 9.632625911916386e-02, 9.568475698868932e-02, 9.632625911916388e-02, 9.464331970457614e-02, 9.718063835488917e-02, 3.474047872899486e-03, 3.391825977871711e-03, 3.796771273249444e-03, 4.077462230580856e-03, 1.107439890541221e-01, 1.286848189017688e-01, 8.734519588160657e-03, 1.112173347618621e-02, 8.734519588160622e-03, 1.112173347618623e-02, 5.284311030657355e-04, 5.257135907016606e-04, 2.597825241028297e-05, 1.519653730726428e-05, 3.654488618541203e-04, 3.982256644655211e-04, 9.342685722776306e-03, 1.150672678667339e-02, 2.190897437239160e-04, 8.122440055028146e-04, 2.190897437239151e-04, 8.122440055028195e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
