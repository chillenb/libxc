
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mtask_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mtask", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.509492805997988e+01, -2.509502052186787e+01, -2.509565431018638e+01, -2.509428722917191e+01, -2.509497166941319e+01, -2.509497166941319e+01, -3.309239625977051e+00, -3.309460909069015e+00, -3.315638913173815e+00, -3.316374872025371e+00, -3.314720494133351e+00, -3.314720494133351e+00, -4.619533709099623e-01, -4.604230254435177e-01, -4.278001969331999e-01, -4.575183435199421e-01, -4.490390202159583e-01, -4.490390202159583e-01, -1.802866211871184e-01, -1.809923719257732e-01, -3.189992667223184e-01, -8.210318024227913e-02, -1.187609666707285e-01, -1.187609666707284e-01, -3.584085096906935e-03, -3.855145674218372e-03, -2.730489033320813e-02, -1.683000595608840e-03, -2.353676520342873e-03, -2.353676520342874e-03, -6.221134965488144e+00, -6.222437428165557e+00, -6.221361619621718e+00, -6.222504077041468e+00, -6.221709666537494e+00, -6.221709666537494e+00, -2.120057534182850e+00, -2.159311442584673e+00, -2.122791123511754e+00, -2.160268003791136e+00, -2.140665782578378e+00, -2.140665782578378e+00, -6.253242515776699e-01, -6.866386821573018e-01, -5.391167848751680e-01, -5.617478381423058e-01, -6.404949492586610e-01, -6.404949492586610e-01, -5.402172221368103e-02, -1.690580689065623e-01, -4.914415818651340e-02, -1.940399836198901e+00, -8.015244077719763e-02, -8.015244077719766e-02, -1.206623311526115e-03, -1.656603318044292e-03, -1.360336733855993e-03, -3.690317192084696e-02, -1.635766977251508e-03, -1.635766977251508e-03, -6.913307595834524e-01, -6.874021422666824e-01, -6.887912244613336e-01, -6.899276510219127e-01, -6.893528161305540e-01, -6.893528161305540e-01, -6.614233133830673e-01, -5.693485859030597e-01, -5.949497583498674e-01, -6.209758587705972e-01, -6.065943756689490e-01, -6.065943756689489e-01, -7.059772505388733e-01, -2.311167013377725e-01, -2.694376281364402e-01, -3.439942079683212e-01, -3.083056342380495e-01, -3.083056342380494e-01, -4.819881302651829e-01, -2.688974293224461e-02, -3.350868678990827e-02, -3.437032098642303e-01, -4.577483965310214e-02, -4.577483965310213e-02, -5.554254467089246e-03, -3.056105198797654e-04, -8.074649397347954e-04, -4.946865949438112e-02, -1.502919242818470e-03, -1.502919242818469e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mtask_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mtask", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.835947170869875e+01, -2.835967474909081e+01, -2.835976262674755e+01, -2.835672291207651e+01, -2.835843209219552e+01, -2.835843209219552e+01, -5.140418115430315e+00, -5.140435265916603e+00, -5.140526412854384e+00, -5.136659084301635e+00, -5.138348256252405e+00, -5.138348256252405e+00, -9.482399277033938e-01, -9.453398511585549e-01, -8.668596225184316e-01, -8.819425475833176e-01, -8.809149939220767e-01, -8.809149939220767e-01, -6.299664499226447e-02, -8.441097799970003e-02, -9.288149473570095e-01, 2.072520509266543e-02, -2.382120530540715e-03, -2.382120530540740e-03, -6.312077812259681e-03, -6.807000451722650e-03, -2.461932852858202e-02, -3.096989546442820e-03, -4.271830954573440e-03, -4.271830954573441e-03, -7.090975954426333e+00, -7.102086475269406e+00, -7.091053615916382e+00, -7.100882771651305e+00, -7.096833144910714e+00, -7.096833144910714e+00, -2.190210063813713e+00, -2.151902390858503e+00, -2.071856986583870e+00, -2.011387686752568e+00, -2.226011712669897e+00, -2.226011712669897e+00, -8.492028469654332e-01, -9.779556115248655e-01, -7.936117337874311e-01, -8.721477702945626e-01, -8.690606305996259e-01, -8.690606305996259e-01, 4.638497303723259e-02, 2.706747734414551e-02, 3.534264602332220e-02, -2.976993127058953e+00, 9.137918877729261e-02, 9.137918877729265e-02, -2.237434453344628e-03, -3.046049830105798e-03, -2.479162682687909e-03, 5.134987185202733e-04, -2.981878108761191e-03, -2.981878108761191e-03, -9.270212649918647e-01, -8.922750462563941e-01, -9.045864671216489e-01, -9.146942357004296e-01, -9.096519043345119e-01, -9.096519043345117e-01, -9.099549746041741e-01, -5.120465675467037e-01, -6.510490849922868e-01, -7.669316123265751e-01, -7.136235195610726e-01, -7.136235195610727e-01, -1.024376978448433e+00, -4.004285202130953e-02, -2.043861347379705e-01, -4.585329591145451e-01, -3.310327965959066e-01, -3.310327965959065e-01, -5.949215194609664e-01, -1.733334024085255e-02, -1.742983448405578e-02, -4.659083807197719e-01, 4.270289988804359e-02, 4.270289988804361e-02, -9.661034907842965e-03, -5.794862680403172e-04, -1.505593531618398e-03, 7.781223999175126e-02, -2.742313517205388e-03, -2.742313517205385e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mtask_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mtask", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.977892592103422e-08, -3.977879497343953e-08, -3.978172026266994e-08, -3.978382682154380e-08, -3.978222051994044e-08, -3.978222051994044e-08, -1.981535120845932e-05, -1.981554627190422e-05, -1.982136220092555e-05, -1.983426381754575e-05, -1.983174549070458e-05, -1.983174549070458e-05, -9.886622913953418e-03, -9.931335326835355e-03, -1.134571845516261e-02, -1.205733925824983e-02, -1.177617291807407e-02, -1.177617291807407e-02, -4.064211152204982e+00, -3.697135706626928e+00, -1.025175113591847e-03, -6.554647313064764e+00, -6.302933675912135e+00, -6.302933675912135e+00, 2.057078721047521e+02, 2.086214817524851e+02, -1.385581076232189e+01, 6.231600905177543e+02, 4.704970100329571e+02, 4.704970100329572e+02, -1.326392820129555e-05, -1.325333671019190e-05, -1.326700026798915e-05, -1.325748643782947e-05, -1.325673373656174e-05, -1.325673373656174e-05, -2.818228084090080e-04, -2.997973042585988e-04, -3.069873906770624e-04, -3.304850778158889e-04, -2.795498460835684e-04, -2.795498460835684e-04, -2.721332015600116e-02, -1.927892269677408e-02, -3.393203895133887e-02, -2.758146447633983e-02, -2.626068252674923e-02, -2.626068252674923e-02, -1.088994066790288e+01, -3.511651677264440e+00, -1.131356937811610e+01, -2.065104410654904e-04, -1.600911782592658e+01, -1.600911782592658e+01, 1.147519165031472e+03, 7.102787825065916e+02, 3.164564201403996e+03, -1.609357794813000e+01, 1.486203841666589e+03, 1.486203841666587e+03, -6.340268179558102e-02, -6.559262570633372e-02, -6.480466244218069e-02, -6.416694962790288e-02, -6.447718066616606e-02, -6.447718066616609e-02, -5.768811210861036e-02, -1.285185449221181e-01, -9.890498688151353e-02, -7.804184407173174e-02, -8.604354142389489e-02, -8.604354142389481e-02, -1.483744514098865e-02, -1.689505100733433e+00, -7.260479107864097e-01, -2.157603485594058e-01, -4.024967326298658e-01, -4.024967326298662e-01, -8.191092300828601e-02, -3.096968872145187e+01, -1.369407846722870e+01, -2.448818988719940e-01, -2.422046689123873e+01, -2.422046689123874e+01, 1.064971864323073e+02, 1.691832768802524e+04, 3.174300583554276e+03, -4.137477882417441e+01, 1.943856987318024e+03, 1.943856987318030e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mtask_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mtask", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([6.221581094689590e-03, 6.221610716919589e-03, 6.222292808414607e-03, 6.221875771863932e-03, 6.222015461029752e-03, 6.222015461029752e-03, 1.478266477439971e-02, 1.478267429421950e-02, 1.478327493510620e-02, 1.478933103649334e-02, 1.478704226266660e-02, 1.478704226266660e-02, 5.817151099630056e-02, 5.815171864830852e-02, 5.829912808039504e-02, 6.237866976312142e-02, 6.106836195676769e-02, 6.106836195676769e-02, 3.388535317030373e-01, 3.227427034806718e-01, 2.266795912289724e-02, 2.196276015945714e-01, 3.153513012662730e-01, 3.153513012662730e-01, 1.151362519728773e-04, 5.448305561384976e-05, 6.609004333140243e-03, 1.302838259675257e-08, 2.762657717405397e-07, 2.762657717405324e-07, 2.989275849765899e-02, 2.988445309144157e-02, 2.990028981826307e-02, 2.989260001129326e-02, 2.988449064722440e-02, 2.988449064722440e-02, 3.460380853426265e-02, 3.749035259248965e-02, 3.696364780042390e-02, 4.043672811720862e-02, 3.500290870998930e-02, 3.500290870998930e-02, 9.327208203751138e-02, 8.427126182463701e-02, 9.487416303165616e-02, 8.781142133736362e-02, 9.407488603815796e-02, 9.407488603815796e-02, 1.118329963532388e-01, 2.905918462087330e-01, 8.799740180521043e-02, 2.564081572527841e-02, 2.993166637484043e-01, 2.993166637484046e-01, 1.869155895399651e-10, 2.628891430606172e-09, 6.598371264063531e-08, 3.203434241488362e-02, 1.593344274827958e-08, 1.593344274828539e-08, 2.073802467769593e-01, 2.114140050923112e-01, 2.099763940651819e-01, 2.087944622547604e-01, 2.093610610527604e-01, 2.093610610527605e-01, 1.745922050402119e-01, 2.471401514947902e-01, 2.188925015360169e-01, 1.970220455131897e-01, 2.034540519444993e-01, 2.034540519444992e-01, 7.582359970343892e-02, 2.851443338564684e-01, 2.141530401626364e-01, 1.536775160473376e-01, 1.830562680072145e-01, 1.830562680072147e-01, 1.274430071223655e-01, 1.711013545433793e-02, 1.376113788316712e-02, 1.573381847830708e-01, 1.259612527477146e-01, 1.259612527477147e-01, 5.617508151990539e-07, 2.059200793574135e-13, 5.595475250611695e-09, 1.922964025760506e-01, 2.921233486582067e-08, 2.921233486582247e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
