
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mtask_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mtask", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.218648403715531e+01, -2.218661827420799e+01, -2.218720503121290e+01, -2.218521286636856e+01, -2.218625807961536e+01, -2.218625807961536e+01, -2.901554108991507e+00, -2.901817303803383e+00, -2.908798255547342e+00, -2.906242168335891e+00, -2.906214405832347e+00, -4.138466626611285e+00, -3.968193991191296e-01, -7.905020696040117e-01, -7.676118702253154e-01, -7.748929239131983e-01, -7.733328710077265e-01, -7.733328710077265e-01, -2.026690184615042e-01, -2.059758802475182e-01, -3.223219227445915e-01, -1.495860439063930e-01, -1.704000300372384e-01, -1.704000300372384e-01, -3.589356045776727e-03, -3.859154606474060e-03, -3.278717595790224e-02, -1.647125823724348e-03, -2.326856996693990e-03, -2.326856996693990e-03, -6.229161931014509e+00, -6.230363618904331e+00, -6.229222243594639e+00, -5.595394792741192e+00, -6.229768452083307e+00, -6.229768452083307e+00, -1.511390002006713e+00, -1.547633591938574e+00, -1.483432052709246e+00, -1.515985620689313e+00, -1.545157121916732e+00, -2.340831396787440e+00, -7.002573771626123e-01, -7.622138066514773e-01, -6.466837892037463e-01, -6.735948693777895e-01, -7.118597740847267e-01, -5.793499694893642e-01, -7.944861849766895e-03, -2.004030284521974e-01, -6.300346301834466e-03, -2.292642384647272e+00, -1.204942853654398e-01, -1.204942853654398e-01, 3.713781218798165e-05, -1.577280757749828e-03, -1.328681252998168e-03, -1.830834806591434e-03, 4.281236179051070e-05, -1.568988707062178e-03, -7.057884971154985e-01, -7.016388547358816e-01, -6.613364845585120e-01, -7.043103965767670e-01, -7.037089570920954e-01, -7.037089570920954e-01, -6.866477768013903e-01, -5.870302697660784e-01, -6.158048015682203e-01, -6.441636941221541e-01, -6.297067774546601e-01, -5.355563174441319e-01, -7.987370841818056e-01, -9.261828602351672e-02, -3.098588198475493e-01, -2.662317558896288e-01, -3.578974541300701e-01, -3.578974541300701e-01, -3.840510405544846e-01, -3.111133873354991e-02, -4.489031161847613e-02, -3.990177551853269e-01, -5.157858792181969e-03, -7.802957658383018e-02, -5.350803296214027e-03, -2.490112447460187e-04, -7.975552142323251e-04, -7.286758676780219e-02, -1.457809058192325e-03, -1.457809058192323e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mtask_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mtask", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.347269355629335e+01, -3.347276952008731e+01, -3.347314306296646e+01, -3.347201104403501e+01, -3.347259907952247e+01, -3.347259907952247e+01, -5.503874949565549e+00, -5.503984268698724e+00, -5.506925614362668e+00, -5.506244319230153e+00, -5.505745811767553e+00, -5.602594718911590e+00, -9.118888883094228e-01, -1.086762503734578e+00, -1.059359560802320e+00, -1.067476159161228e+00, -1.065762487368999e+00, -1.065762487368999e+00, -2.820371933336946e-01, -2.861790824275579e-01, -8.247445885732415e-01, -2.151028689607626e-01, -2.412928634368288e-01, -2.412928634368288e-01, -6.449432977332448e-03, -6.912898558170561e-03, -5.299117218423473e-02, -3.041249894225133e-03, -4.242468036788312e-03, -4.242468036788312e-03, -8.324870359618760e+00, -8.326229234035489e+00, -8.324936706480077e+00, -8.147458775800473e+00, -8.325556987172115e+00, -8.325556987172115e+00, -3.033154841800207e+00, -3.071464331260507e+00, -3.003169482615510e+00, -3.038489589709716e+00, -3.068499409577076e+00, -3.178207822437290e+00, -9.419594184195341e-01, -1.020111164714190e+00, -8.737273845458894e-01, -9.059521040652148e-01, -9.565483312784329e-01, -9.467349994415137e-01, -2.498930234851408e-02, -2.834225996501326e-01, -2.017733434052131e-02, -3.078828458404768e+00, -1.751666418932367e-01, -1.751666418932367e-01, 4.907308514786274e-05, -2.918121258737931e-03, -2.433874226218222e-03, -6.686860747639875e-03, 5.567793329042855e-05, -2.880320902527613e-03, -9.412207525361298e-01, -9.362414561368649e-01, -9.313408563785008e-01, -9.394120450113442e-01, -9.386887358722517e-01, -9.386887358722517e-01, -9.157509343238439e-01, -7.916208621951749e-01, -8.269604575912460e-01, -8.619693844032217e-01, -8.440846075030201e-01, -8.291215604171666e-01, -1.070285744980997e+00, -2.356121490719132e-01, -4.274167402035828e-01, -5.372448500296326e-01, -4.892729502338305e-01, -4.892729502338306e-01, -7.194820663695277e-01, -5.045077747556143e-02, -7.108763515718339e-02, -5.396116258015812e-01, -1.660970904165963e-02, -1.172419781569159e-01, -9.536248761939807e-03, -4.774098661577910e-04, -1.489197984018524e-03, -1.099031779388924e-01, -2.675032989198142e-03, -2.675032989198140e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mtask_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mtask", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.369030663883840e-08, -1.369020209241323e-08, -1.368967086243422e-08, -1.369123119490730e-08, -1.369042281493777e-08, -1.369042281493777e-08, -1.496611559936775e-05, -1.496875188797256e-05, -1.503690122254897e-05, -1.500399017032053e-05, -1.501376164227402e-05, 5.985698443211394e-07, -3.465122944615221e-03, 4.076923074755532e-04, 4.400043199256512e-04, 4.322165114007435e-04, 4.337912170128799e-04, 4.337912170128799e-04, 8.184918142780406e-02, 7.830773522567837e-02, 8.089519221287070e-04, 1.687554319024521e-01, 1.281086235163007e-01, 1.281086235163006e-01, 2.437797123648685e+02, 2.267409336505997e+02, 4.968636468701799e+00, 5.503787286829680e+02, 4.415753413503651e+02, 4.415753413503651e+02, 7.765264283453066e-08, 7.722472099034626e-08, 7.762850386480093e-08, -4.215002182543744e-06, 7.743827430935509e-08, 7.743827430935509e-08, -1.245849336131638e-04, -1.261612731677085e-04, -1.228992428220722e-04, -1.246433213973148e-04, -1.262162952243996e-04, 5.817307359854987e-06, 6.990940279176849e-04, 4.076615586080721e-04, 1.000722220358086e-03, 8.143034052352745e-04, 6.409188058858688e-04, -2.166053938680480e-02, 2.159277031133681e+01, 6.824462305844006e-02, 3.002368222563803e+01, 5.867139721911956e-06, 3.322619678530334e-01, 3.322619678530334e-01, 3.234710402400665e+07, 5.342063707877223e+02, 2.761163114726151e+03, 1.548131669285106e+02, 1.742995157723454e+07, 1.164506767226801e+03, 1.373589360351763e-04, 3.019362318911007e-04, -3.898469386326072e-02, 2.004943420334160e-04, 2.249493140848785e-04, 2.249493140848785e-04, 1.804923386300358e-04, 1.458531692044533e-03, 1.126662795236714e-03, 7.875645510942062e-04, 9.642552825207816e-04, -3.639584588355745e-02, 3.660482183163186e-04, 1.082583117356837e-01, 1.666328237036069e-02, -1.224394601772815e-01, 1.021679575876891e-02, 1.021679575876892e-02, -5.346722769254710e-02, 5.517739623548688e+00, 2.572615710505116e+00, 6.920286983246873e-03, 5.607286550983687e+01, 9.986266690926434e-01, 8.657107970712315e+01, 5.519853959730469e+03, 2.959883654043311e+03, 1.211576954716399e+00, 1.627780509198200e+03, 1.627780509198206e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mtask_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mtask", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.281248953786524e-03, 2.281246539725698e-03, 2.281232265598988e-03, 2.281268562561415e-03, 2.281250016074706e-03, 2.281250016074706e-03, 1.229334179802074e-02, 1.229469190435551e-02, 1.232989474275251e-02, 1.231459226638843e-02, 1.231751546789876e-02, 4.869841981729534e-12, 3.653527095336350e-02, 2.572513736487259e-11, 2.630407741546410e-11, 2.615536401774632e-11, 2.618747996494890e-11, 2.618747996494890e-11, 9.703716867225959e-11, 9.607046714839119e-11, 1.602553554241849e-02, 1.053614336191193e-10, 1.048012968214004e-10, 1.048012968214004e-10, 3.832283618769787e-12, 4.503691442652565e-12, 6.086394388913120e-11, 6.657408334457130e-13, 1.708561913211212e-12, 1.708561913211212e-12, 3.029214835026392e-12, 3.027869516206570e-12, 3.029141659720015e-12, 9.967323308215478e-03, 3.028538463116832e-12, 3.028538463116832e-12, 1.961631274073116e-02, 1.995460551796637e-02, 1.932655190540684e-02, 1.965081843253660e-02, 1.994132102820638e-02, 8.668144011510007e-12, 2.808633895397642e-11, 2.503386834826731e-11, 3.097317135788358e-11, 2.917543924393662e-11, 2.747854244580573e-11, 8.120012342622829e-02, 7.859213701090521e-03, 8.988371536764410e-11, 6.533494961554419e-03, 8.503935460155749e-12, 1.173426691442365e-10, 1.173426691442365e-10, 2.578772754327615e-07, 5.538771244912123e-13, 1.907379051856940e-12, 2.641785594146577e-03, 1.625055947249645e-06, 1.296592040956786e-12, 2.608746494288848e-11, 2.648503580919285e-11, 1.280730510345522e-01, 2.622903947728197e-11, 2.628685030546537e-11, 2.628685030546537e-11, 2.684909577754929e-11, 3.387941310161692e-11, 3.165712520830109e-11, 2.958432620634682e-11, 3.062316673353018e-11, 9.206330088801458e-02, 2.408831417011563e-11, 5.997158220842581e-02, 6.523470881199803e-11, 1.090460150405602e-01, 5.705222675964286e-11, 5.705222675964283e-11, 9.609948390333115e-02, 5.835043232467054e-11, 7.515195732307419e-11, 5.035079214511532e-11, 7.073026326533885e-03, 1.183216200551136e-10, 4.694661516925565e-12, 1.069998335459014e-14, 3.488179483000908e-13, 1.194897112773405e-10, 1.460281121931363e-12, 1.460281121931365e-12]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
