
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_14_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_14", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.166894328703249e+01, -2.166906558976240e+01, -2.166960306775713e+01, -2.336721314415899e+01, -2.336793608218757e+01, -2.506731819108960e+01, -3.478076681289791e+00, -3.929344266757169e+00, -3.932937955620702e+00, -3.931845120665121e+00, -3.931551043449809e+00, -3.480719135456953e+00, -5.214091868934889e-01, -5.933629461369183e-01, -6.271459833584943e-01, -5.731471826229892e-01, -5.074834171020626e-01, -6.410388341526668e-01, -1.461008343444411e-01, -1.496358601315390e-01, -6.354290604706341e-01, -1.065037095737676e-01, -1.478686220278553e-01, -1.475327854356323e-01, -4.503549925533165e-03, -4.757182143293803e-03, -2.628977508248919e-02, -2.596121529262144e-03, -3.624145359848065e-03, -3.624145359848065e-03, -6.047995700476379e+00, -6.047634662205372e+00, -6.047966579119436e+00, -6.047648741019214e+00, -5.743153410901392e+00, -5.743425827319170e+00, -2.147200693188535e+00, -2.176736062378107e+00, -2.124638404796909e+00, -2.151219071847997e+00, -1.922109939210987e+00, -2.174500599675929e+00, -6.221400495527896e-01, -7.469598297431256e-01, -6.228693582348146e-01, -6.625782382925851e-01, -6.417656732352353e-01, -7.020826836165103e-01, -7.046569212580511e-02, -1.378923383894861e-01, -6.499058290928397e-02, -2.260421532491989e+00, -8.532592016549896e-02, -8.532592016549895e-02, -2.010973198329373e-03, -2.537850105790182e-03, -1.943597287949407e-03, -4.272033132236411e-02, -2.441529793600025e-03, -2.441529793600026e-03, -6.632456647940331e-01, -6.687142034093276e-01, -6.344947248064509e-01, -6.518270413095250e-01, -6.364332600319262e-01, -6.512606060062401e-01, -6.466051983005723e-01, -5.102358982674069e-01, -5.531050905056984e-01, -6.307417243738265e-01, -6.202763478734943e-01, -5.722707491943284e-01, -7.286532800990274e-01, -1.973908203385854e-01, -2.287510303727969e-01, -3.359951151158300e-01, -3.139887681968820e-01, -2.779137082497743e-01, -5.149876687183620e-01, -2.512785374642999e-02, -3.437540118039838e-02, -3.818113792222648e-01, -5.560945665880830e-02, -5.560945665880833e-02, -6.392883307747168e-03, -6.782728603447162e-04, -1.436871528534267e-03, -5.067280881453461e-02, -2.242095338318047e-03, -2.254315782978925e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_14_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_14", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.221862210962443e+01, -3.221850349735390e+01, -3.221871488420773e+01, -3.221857090186756e+01, -3.221903646474465e+01, -3.221902471846768e+01, -3.221798730564857e+01, -2.886292110630647e+01, -3.221867589863007e+01, -2.886354877705585e+01, -2.886388575050087e+01, -2.886354877705585e+01, -5.009407135086461e+00, -4.924020825545106e+00, -5.009300822586352e+00, -5.009364800988185e+00, -5.007191136256129e+00, -5.006862052292461e+00, -5.008384916124740e+00, -5.008451974122965e+00, -5.008840872921790e+00, -5.006623613257863e+00, -4.922870083267695e+00, -5.006623613257863e+00, -7.833777141164735e-01, -7.925659796650146e-01, -7.804290340873846e-01, -9.412101625087448e-01, -8.926943647099759e-01, -8.826409479141851e-01, -9.038775577137222e-01, -7.581538573185044e-01, -8.026451233847337e-01, -7.000039123214165e-01, -9.524094864106798e-01, -8.466822039547029e-01, -1.776945773642550e-01, -2.299887668774709e-01, -1.811294501614323e-01, -2.371752488266716e-01, -9.438527670386258e-01, -8.434240591225578e-01, -1.404667608120818e-01, -1.448430099353459e-01, -2.233703316004613e-01, -9.583514881595313e-02, -2.233703316004611e-01, -9.376146068423108e-02, -5.598920179005751e-03, -5.949746181287349e-03, -6.126813015731741e-03, -6.285578334033296e-03, -3.396536863891936e-02, -3.472406819882323e-02, -3.364978870673192e-03, -3.308899931202233e-03, -4.994440152284920e-03, -2.841774968993630e-03, -4.994440152284920e-03, -2.841774968993632e-03, -7.116845926459020e+00, -7.115156062726956e+00, -7.120572333011923e+00, -7.118756047716871e+00, -7.117093055779689e+00, -7.115308786153666e+00, -7.120288876687051e+00, -7.118577587595597e+00, -7.814138525075935e+00, -7.116955504580836e+00, -7.118719805959323e+00, -7.812243806361226e+00, -2.849596117652426e+00, -2.849196642728882e+00, -2.867313793545696e+00, -2.866243133496923e+00, -2.833491292752416e+00, -2.837960069954501e+00, -2.850175958577050e+00, -2.854321854978411e+00, -2.870222653557771e+00, -2.683066323516766e+00, -2.870222653557771e+00, -2.859768330996566e+00, -8.090648296121118e-01, -8.772896252626742e-01, -8.617105025259899e-01, -8.628267923045855e-01, -7.653483174366056e-01, -7.789961983430242e-01, -7.674829674383882e-01, -7.841363171155497e-01, -8.311503901855687e-01, -8.700144139294298e-01, -8.311503901855687e-01, -7.971371578479021e-01, -9.157556986790767e-02, -9.253484244681627e-02, -1.732061404371630e-01, -2.018493510302731e-01, -8.205027532068382e-02, -8.700836534865232e-02, -2.612537447834061e+00, -2.611258236450778e+00, -1.078683329280925e-01, -1.177255132331449e-01, -1.078683329280925e-01, -1.177255132331449e-01, -2.637051758359794e-03, -2.623313508626854e-03, -3.237673384253006e-03, -3.286666891006046e-03, -2.421145249139145e-03, -2.564133853036417e-03, -5.542565210688895e-02, -5.653683555531067e-02, -2.472664303412874e-03, -3.396209426926575e-03, -2.472664303412875e-03, -3.396209426926581e-03, -8.449139934200788e-01, -8.487867084696539e-01, -8.213771102037225e-01, -8.252920840561083e-01, -8.710408617261760e-01, -8.742666303177925e-01, -8.712495696822952e-01, -8.398958518942005e-01, -8.711412093864975e-01, -8.743723729897921e-01, -8.711412093864975e-01, -8.364581303745435e-01, -8.194655460380271e-01, -8.228413654252938e-01, -6.899783068438118e-01, -7.270131766186066e-01, -7.002649589600883e-01, -7.784622212442989e-01, -7.278230562392661e-01, -7.305323060339443e-01, -7.105113177120698e-01, -7.130495192136361e-01, -7.105113177120694e-01, -7.969945712805808e-01, -9.018201389909123e-01, -1.009544719701701e+00, -2.756627530946831e-01, -2.779802500595038e-01, -2.957508296213914e-01, -3.624101692255878e-01, -4.677724177979584e-01, -5.077134002223667e-01, -4.356262155580550e-01, -4.357440098933544e-01, -4.356262155580545e-01, -3.789583869403436e-01, -6.495538266129526e-01, -6.515272801891578e-01, -3.333125849635680e-02, -3.355896090825642e-02, -4.356699207597097e-02, -4.507470891331469e-02, -4.797201560005219e-01, -4.791560156881041e-01, -6.994658966656560e-02, -7.459324867735195e-02, -6.994658966656565e-02, -7.459324867735195e-02, -8.363253254829589e-03, -8.666346497468695e-03, -8.709865752706559e-04, -8.729772879098652e-04, -1.851521059413857e-03, -1.969235470886242e-03, -6.657550478375444e-02, -6.760593903840727e-02, -2.342196136590823e-03, -3.112791441325295e-03, -2.342196136590822e-03, -3.251332786497048e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_14_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_14", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.997423385667625e-08, 0.000000000000000e+00, -3.997744629574618e-08, -3.997415857431957e-08, 0.000000000000000e+00, -3.997739094194584e-08, -3.997365022580691e-08, 0.000000000000000e+00, -3.997673666238235e-08, -3.997453621740788e-08, 0.000000000000000e+00, -4.615021355703535e-08, -3.997421386353444e-08, 0.000000000000000e+00, -4.614847500156789e-08, -4.614541191444981e-08, 0.000000000000000e+00, -4.614847500156789e-08, -3.867605491291219e-05, 0.000000000000000e+00, -2.969926652706943e-05, -3.868656644104019e-05, 0.000000000000000e+00, -3.867617308262779e-05, -3.889162433447015e-05, 0.000000000000000e+00, -3.892669461682824e-05, -3.880397244139272e-05, 0.000000000000000e+00, -3.880208226780138e-05, -3.867741739151370e-05, 0.000000000000000e+00, -3.898394910716661e-05, -2.970435523775275e-05, 0.000000000000000e+00, -3.898394910716661e-05, -7.905761382542814e-03, 0.000000000000000e+00, -8.156049140106600e-03, -7.846626376306008e-03, 0.000000000000000e+00, -1.138854056974313e-02, -1.001008539454758e-02, 0.000000000000000e+00, -9.931174339697512e-03, -1.059427292614039e-02, 0.000000000000000e+00, -7.630599488266397e-03, -8.150131225025940e-03, 0.000000000000000e+00, -6.484186993900959e-03, -1.139106648376463e-02, 0.000000000000000e+00, -9.558659041441760e-03, -7.316150649600672e-01, 0.000000000000000e+00, -1.332151495073278e+00, -7.604077674996100e-01, 0.000000000000000e+00, -1.374424744462128e+00, -2.315703125859906e-03, 0.000000000000000e+00, -1.809892466876376e-03, -7.353662330009761e-01, 0.000000000000000e+00, -8.684483423982643e-01, -1.004435227420644e+00, 0.000000000000000e+00, -7.463354677948728e-01, -1.004435227420643e+00, 0.000000000000000e+00, 1.666087587879755e-01, -1.794037110015956e+02, 0.000000000000000e+00, -1.593253382828879e+02, 2.327260260491788e+02, 0.000000000000000e+00, -1.461626566186414e+02, 4.679183240703291e+00, 0.000000000000000e+00, -3.910232749135209e+00, -4.229551985424905e+02, 0.000000000000000e+00, -4.396211620244233e+02, -2.194052708292561e+02, 0.000000000000000e+00, -8.839658076004124e+02, -2.194052708292561e+02, 0.000000000000000e+00, -8.839658076004122e+02, -1.380333953640635e-05, 0.000000000000000e+00, -1.381664612345229e-05, -1.380463076711598e-05, 0.000000000000000e+00, -1.381790015523698e-05, -1.380352398289801e-05, 0.000000000000000e+00, -1.381677076539430e-05, -1.380462526397652e-05, 0.000000000000000e+00, -1.381790319242008e-05, -1.242545334400524e-05, 0.000000000000000e+00, -1.381727438491571e-05, -1.380393243853017e-05, 0.000000000000000e+00, -1.243735650234534e-05, -3.129024473204487e-04, 0.000000000000000e+00, -3.144135717772596e-04, -3.177875176867964e-04, 0.000000000000000e+00, -3.191218612147428e-04, -3.076191353323562e-04, 0.000000000000000e+00, -3.106343473541392e-04, -3.124011307065349e-04, 0.000000000000000e+00, -3.153380506819164e-04, -3.194140452536709e-04, 0.000000000000000e+00, -2.400777427754707e-04, -3.194140452536709e-04, 0.000000000000000e+00, -3.176131443732807e-04, -6.627940669027207e-02, 0.000000000000000e+00, -5.479080062142306e-02, -5.871309505920569e-02, 0.000000000000000e+00, -5.903612296424685e-02, -7.250144661465575e-02, 0.000000000000000e+00, -7.301675200595889e-02, -8.113125942267568e-02, 0.000000000000000e+00, -7.635034493137624e-02, -6.144366098567182e-02, 0.000000000000000e+00, -5.746852918272273e-02, -6.144366098567187e-02, 0.000000000000000e+00, -7.079966692335458e-02, -9.120365755069463e-01, 0.000000000000000e+00, -9.008308897590233e-01, -2.745981774407738e-01, 0.000000000000000e+00, -5.475910334914476e-01, -1.018352433213781e+00, 0.000000000000000e+00, -1.006610493333041e+00, -6.287954973872341e-04, 0.000000000000000e+00, -6.301164890900432e-04, -1.027296310133060e+00, 0.000000000000000e+00, -1.330714778609944e+00, -1.027296310133060e+00, 0.000000000000000e+00, -1.330714778609944e+00, 9.034988679465190e+02, 0.000000000000000e+00, -5.687160247927065e+02, -4.448685188501346e+02, 0.000000000000000e+00, -4.052843275223582e+02, -2.136988451279745e+03, 0.000000000000000e+00, -1.997249834815585e+03, -1.918602576233103e+00, 0.000000000000000e+00, 1.383276396167314e+00, -8.878983823468875e+02, 0.000000000000000e+00, -8.414247279319952e+02, -8.878983823468878e+02, 0.000000000000000e+00, -8.414247279319952e+02, -8.927879200587042e-02, 0.000000000000000e+00, -8.793894454732687e-02, -9.007695138243851e-02, 0.000000000000000e+00, -8.874884121168536e-02, -8.543675978693456e-02, 0.000000000000000e+00, -8.426370144745257e-02, -8.594850477814885e-02, 0.000000000000000e+00, -8.829565442345322e-02, -8.569647093843330e-02, 0.000000000000000e+00, -8.450757882874423e-02, -8.569647093843330e-02, 0.000000000000000e+00, -8.841745327312238e-02, -9.938409624877524e-02, 0.000000000000000e+00, -9.811922907019445e-02, -1.199394242311298e-01, 0.000000000000000e+00, -9.400533761160602e-02, -1.216666210244321e-01, 0.000000000000000e+00, -9.951029145368440e-02, -1.168226026968090e-01, 0.000000000000000e+00, -1.153627551260531e-01, -1.201044956283610e-01, 0.000000000000000e+00, -1.187143471385940e-01, -1.201044956283610e-01, 0.000000000000000e+00, -1.007628225968537e-01, -4.652262769369373e-02, 0.000000000000000e+00, -4.022059370216042e-02, -4.406931510216842e-01, 0.000000000000000e+00, -4.393582688232858e-01, -2.665595007460470e-01, 0.000000000000000e+00, -3.892987727142468e-01, -2.340539831496868e-01, 0.000000000000000e+00, -3.051691337958269e-01, -3.775977805794158e-01, 0.000000000000000e+00, -3.816759527757704e-01, -3.775977805794160e-01, 0.000000000000000e+00, -2.799145554096549e-01, -1.386432820425005e-01, 0.000000000000000e+00, -1.402004969185385e-01, 4.992492234553756e+00, 0.000000000000000e+00, 4.873429379448268e+00, -2.456398939969202e+00, 0.000000000000000e+00, -2.383755218291678e+00, -4.552147243799377e-01, 0.000000000000000e+00, -4.992776731430985e-01, -1.685989885027729e+00, 0.000000000000000e+00, -1.870058023569744e+00, -1.685989885027730e+00, 0.000000000000000e+00, -1.870058023569745e+00, 8.509655392681046e+01, 0.000000000000000e+00, 7.864068134546882e+01, -6.579227593283897e+03, 0.000000000000000e+00, -6.534844023499591e+03, 3.736804457460172e+03, 0.000000000000000e+00, 3.399799053441328e+03, 7.944001575016092e-01, 0.000000000000000e+00, 7.284740725763431e-01, -1.590711000415302e+03, 0.000000000000000e+00, -1.019186060077247e+03, -1.590711000415304e+03, 0.000000000000000e+00, 1.432692896277754e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_14_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_14", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.950486739501925e-03, 1.950539545964053e-03, 1.950487822808659e-03, 1.950540318112682e-03, 1.950487270070018e-03, 1.950540614451405e-03, 1.950475602960744e-03, 3.036865648092358e-03, 1.950487779145072e-03, 3.036633863849252e-03, 3.036664548817162e-03, 3.036633863849252e-03, 1.892542163352588e-02, 6.677223392327113e-03, 1.892824070991412e-02, 1.892518374729535e-02, 1.898277389748109e-02, 1.899226364024761e-02, 1.896142482045196e-02, 1.896123353392068e-02, 1.892216541045798e-02, 1.900967216196127e-02, 6.674684298646622e-03, 1.900967216196127e-02, 8.559397024659654e-03, 9.155055203145170e-03, 8.395355044781295e-03, 4.875472116316839e-02, 4.012271480451753e-02, 3.903032871807214e-02, 4.282857438920848e-02, 7.443176001212798e-03, 9.503475969416114e-03, 4.735898037208127e-03, 4.986893868493131e-02, 3.500580094443792e-02, 7.143227240518040e-03, 1.049644312081984e-01, 8.204597531074005e-03, 1.141926198297099e-01, 1.489656297615848e-02, 2.045910387659729e-03, 2.094241660915496e-02, 2.631166320416454e-02, 7.988802555294333e-02, 7.171868867510371e-03, 7.988802555294319e-02, -3.598241334099040e-04, 2.849083241745177e-04, 3.037653716484254e-04, -4.337474048254261e-07, 3.287530450454929e-04, -3.397959787349120e-05, 1.594213546751879e-03, 1.454649983026484e-04, 1.437584562765062e-04, 2.471329593559611e-04, 1.831264982931775e-04, 2.471329593559611e-04, 1.831264982931777e-04, 1.109183040694188e-02, 1.109431341558498e-02, 1.106183957509300e-02, 1.106532074469273e-02, 1.108975829845882e-02, 1.109302378338545e-02, 1.106404236200421e-02, 1.106670313461334e-02, 8.118957213850373e-03, 1.107980583608314e-02, 1.107677871685640e-02, 8.120947733463519e-03, 2.954300017801748e-02, 2.963893162953836e-02, 3.023387236296045e-02, 3.030444185553495e-02, 2.886313133475127e-02, 2.915721265881949e-02, 2.951999960574384e-02, 2.980468672018127e-02, 3.040474878074264e-02, 9.283535145644332e-03, 3.040474878074264e-02, 3.007032856354850e-02, 1.237749229484511e-01, 6.036451883655375e-02, 1.005318559370017e-01, 9.925065110886351e-02, 1.256495075979794e-01, 1.289133674417615e-01, 1.310846274181589e-01, 1.260442239785239e-01, 1.169439604923080e-01, 6.149522541462436e-02, 1.169439604923081e-01, 1.250465595858994e-01, 7.648013946990286e-03, 7.795698075763392e-03, 1.171251050131527e-03, 3.958141469418376e-02, 6.106901563628194e-03, 7.231180623828071e-03, 3.724697163956710e-02, 3.725931747017957e-02, 1.390953266626990e-02, 2.253758522267934e-02, 1.390953266626990e-02, 2.253758522267930e-02, -1.775548542688104e-08, 9.262468412221909e-05, 1.362704496005121e-04, 1.298625764333964e-04, 2.738719140232620e-04, 3.041223084580218e-04, 3.402601145920899e-03, -1.727969205068647e-04, 1.211138286337233e-04, 2.978598831102327e-04, 1.211138286337226e-04, 2.978598831102364e-04, 7.276640814250386e-02, 7.219415104100858e-02, 8.319273482596394e-02, 8.245688033090119e-02, 6.911240075889906e-02, 6.873216415950496e-02, 6.812696958545007e-02, 7.589171096780427e-02, 6.863384409282279e-02, 6.826228130993821e-02, 6.863384409282279e-02, 7.737880459627688e-02, 7.621495028907715e-02, 7.561667574440865e-02, 1.460343110617396e-01, 6.228177581102738e-02, 1.391551315329655e-01, 7.380161012447088e-02, 1.174233393035356e-01, 1.167021564234491e-01, 1.299598909500344e-01, 1.290945868826968e-01, 1.299598909500342e-01, 7.682943990876179e-02, 1.017496145558690e-01, 6.147182033771991e-02, 6.560975654234286e-02, 6.659568554414863e-02, 1.519428848904454e-02, 1.028718611726091e-01, 4.877147780716270e-02, 1.637314958344215e-01, 1.427086275128754e-01, 1.438967734397619e-01, 1.427086275128754e-01, 3.357947065738546e-02, 1.472739411777724e-01, 1.490849748738498e-01, -3.381767429999605e-05, -3.382123456436788e-05, 2.027530815542843e-03, 2.192740511074905e-03, 1.962476055264357e-01, 2.076058242422371e-01, 6.239161983013754e-03, 8.465268204010133e-03, 6.239161983013769e-03, 8.465268204010140e-03, -5.133072377538067e-07, -5.628467253522344e-07, 3.920022764690791e-05, 3.920337297368501e-05, -2.554763044612256e-08, -3.256277701888806e-08, -3.261404632308872e-04, -3.705383765123737e-04, 1.844689289153255e-04, 2.777011254349861e-04, 1.844689289153230e-04, -1.939598241899059e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
