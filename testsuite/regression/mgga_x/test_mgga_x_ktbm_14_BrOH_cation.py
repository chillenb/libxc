
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_14_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_14", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.483412985892812e+01, -2.483419247347890e+01, -2.483461561138466e+01, -2.483368726537091e+01, -2.483415306533021e+01, -2.483415306533021e+01, -3.394772275253719e+00, -3.394938657637657e+00, -3.399638408241805e+00, -3.400508940739467e+00, -3.399039228632071e+00, -3.399039228632071e+00, -5.661708695915026e-01, -5.653197186003331e-01, -5.461387262652566e-01, -5.589907512820691e-01, -5.571553489668812e-01, -5.571553489668812e-01, -1.559385998784691e-01, -1.593648443899652e-01, -6.027910675320015e-01, -1.039242699008232e-01, -1.444873327462204e-01, -1.444873327462204e-01, -4.501792113037991e-03, -4.739398990370500e-03, -2.614491014478143e-02, -2.584249876700551e-03, -3.616017273950376e-03, -3.616017273950377e-03, -6.043846658734276e+00, -6.043533690872830e+00, -6.043903807684851e+00, -6.043624692364057e+00, -6.043652551769613e+00, -6.043652551769613e+00, -2.075227202369113e+00, -2.113105752312044e+00, -2.063082886867269e+00, -2.097662407681047e+00, -2.101983337886639e+00, -2.101983337886639e+00, -6.342134844274834e-01, -6.797302326809513e-01, -5.492280095331477e-01, -5.625249984185181e-01, -6.495902253352637e-01, -6.495902253352639e-01, -6.958631303311555e-02, -1.451434166772564e-01, -6.420267278590368e-02, -1.928424915499991e+00, -8.428554437454450e-02, -8.428554437454450e-02, -1.983558142292647e-03, -2.517176597896179e-03, -1.933660316736287e-03, -4.261373675373174e-02, -2.433432840808368e-03, -2.433432840808368e-03, -6.543196977522711e-01, -6.601237360250929e-01, -6.582610515649083e-01, -6.565653250372270e-01, -6.574265210987434e-01, -6.574265210987434e-01, -6.294957305590965e-01, -5.644816271861748e-01, -5.966986199162290e-01, -6.169045543086837e-01, -6.074176744925085e-01, -6.074176744925085e-01, -7.008047782244965e-01, -1.953111268757425e-01, -2.470799842495263e-01, -3.476197075892831e-01, -2.990017619201631e-01, -2.990017619201630e-01, -4.855105799759879e-01, -2.503677573798887e-02, -3.414876804273292e-02, -3.489363935229344e-01, -5.506864745888076e-02, -5.506864745888077e-02, -6.295111421458706e-03, -6.721507089306664e-04, -1.422598906004558e-03, -5.169121173579867e-02, -2.234182576708063e-03, -2.234182576708061e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_14_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_14", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.913084275291362e+01, -2.912994816212779e+01, -2.913094121420278e+01, -2.913001980296769e+01, -2.913114645460032e+01, -2.913034478792353e+01, -2.913002901075930e+01, -2.912892168808254e+01, -2.913090373058632e+01, -2.912941031963026e+01, -2.913090373058632e+01, -2.912941031963026e+01, -5.006748425145405e+00, -5.006504996133869e+00, -5.006886351614519e+00, -5.006583494144473e+00, -5.009433715810202e+00, -5.009917685919950e+00, -5.009263125135861e+00, -5.009265475316917e+00, -5.005646093611354e+00, -5.011618915187303e+00, -5.005646093611354e+00, -5.011618915187303e+00, -8.405826091088509e-01, -8.480422086754886e-01, -8.382433212913646e-01, -8.467871333133008e-01, -8.051031571805934e-01, -7.991538296722309e-01, -8.220258249887130e-01, -8.273022164937356e-01, -8.547270500548011e-01, -7.847312938573322e-01, -8.547270500548011e-01, -7.847312938573322e-01, -2.105241129409255e-01, -2.287001238222220e-01, -2.144852539843270e-01, -2.354165537498694e-01, -8.227783347746679e-01, -8.776043135248736e-01, -1.381751280927845e-01, -1.431048636381790e-01, -2.196328562396519e-01, -9.570218903108703e-02, -2.196328562396519e-01, -9.570218903108696e-02, -5.603501241957375e-03, -5.951835290353234e-03, -5.875129072405613e-03, -6.290372127759290e-03, -3.305864537108644e-02, -3.491135015010167e-02, -3.390717361033506e-03, -3.330688416801084e-03, -5.006621820776426e-03, -2.879360816831167e-03, -5.006621820776432e-03, -2.879360816831170e-03, -7.122268292572536e+00, -7.120266900294032e+00, -7.125939598326497e+00, -7.123813372744142e+00, -7.122388464098519e+00, -7.120328495761227e+00, -7.125541646814098e+00, -7.123553227973379e+00, -7.124207794855471e+00, -7.122055116853139e+00, -7.124207794855471e+00, -7.122055116853139e+00, -2.834991539878295e+00, -2.835488883919629e+00, -2.858396110582600e+00, -2.857877583338365e+00, -2.818530560567426e+00, -2.823796771080300e+00, -2.840010611826679e+00, -2.844994009087062e+00, -2.860229757500946e+00, -2.849174539292934e+00, -2.860229757500946e+00, -2.849174539292934e+00, -8.444977759930110e-01, -8.409425599409179e-01, -9.341369640056666e-01, -9.338954300927248e-01, -7.695479366568365e-01, -8.019526481251633e-01, -8.201877493737535e-01, -8.478800763184786e-01, -8.707369334516841e-01, -8.361068411646204e-01, -8.707369334516843e-01, -8.361068411646209e-01, -9.158389174860332e-02, -9.252245372121505e-02, -1.990538762874712e-01, -2.001283986992625e-01, -8.221284879305518e-02, -8.706576438318331e-02, -2.854894247602530e+00, -2.853662583153835e+00, -1.074764455835310e-01, -1.170414753398483e-01, -1.074764455835310e-01, -1.170414753398482e-01, -2.579450303144786e-03, -2.677957347579821e-03, -3.282245595086697e-03, -3.335332475268474e-03, -2.440184178497938e-03, -2.585226708823004e-03, -5.579965976003010e-02, -5.609937395373567e-02, -2.538291528935295e-03, -3.402208472140050e-03, -2.538291528935290e-03, -3.402208472140051e-03, -8.569118412853622e-01, -8.605093452404553e-01, -8.328378199468875e-01, -8.365118289769812e-01, -8.408314493501307e-01, -8.445407614927432e-01, -8.478888647791408e-01, -8.514748567953385e-01, -8.443211215826535e-01, -8.479674116947180e-01, -8.443211215826535e-01, -8.479674116947180e-01, -8.422479227741967e-01, -8.449334452557246e-01, -6.932890111070603e-01, -6.954366436607972e-01, -7.094202841697216e-01, -7.119507246515596e-01, -7.439296737548600e-01, -7.466419967734342e-01, -7.239730230901512e-01, -7.261961111141042e-01, -7.239730230901512e-01, -7.261961111141041e-01, -9.838327425603447e-01, -9.841991830757630e-01, -2.736223721316254e-01, -2.758447062304092e-01, -3.503275254518851e-01, -3.561388605643648e-01, -4.961088957785352e-01, -4.987707992200778e-01, -4.266510382578979e-01, -4.268062727909243e-01, -4.266510382578976e-01, -4.268062727909244e-01, -6.525989781144812e-01, -6.562676302150067e-01, -3.232044015859761e-02, -3.256139046725674e-02, -4.384577908341608e-02, -4.534524507033927e-02, -4.799723530239950e-01, -4.871503028722451e-01, -7.010006024909783e-02, -7.463964279196757e-02, -7.010006024909776e-02, -7.463964279196761e-02, -8.124945899592685e-03, -8.426083335624395e-03, -8.979809253169984e-04, -9.039291870215644e-04, -1.779356183176704e-03, -1.892784335376286e-03, -6.711681150177499e-02, -6.838092054862903e-02, -2.396946805443999e-03, -3.118428712197618e-03, -2.396946805443998e-03, -3.118428712197621e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_14_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_14", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.570473380522293e-08, 0.000000000000000e+00, -4.570880377589323e-08, -4.570448955698445e-08, 0.000000000000000e+00, -4.570862559812153e-08, -4.570367237375328e-08, 0.000000000000000e+00, -4.570746363523528e-08, -4.570646880736103e-08, 0.000000000000000e+00, -4.571101908166642e-08, -4.570460454151208e-08, 0.000000000000000e+00, -4.570956897240628e-08, -4.570460454151208e-08, 0.000000000000000e+00, -4.570956897240628e-08, -3.320180319926029e-05, 0.000000000000000e+00, -3.318951235895231e-05, -3.321198294124436e-05, 0.000000000000000e+00, -3.319571744536186e-05, -3.340441338849066e-05, 0.000000000000000e+00, -3.343593979554221e-05, -3.334836615304084e-05, 0.000000000000000e+00, -3.334128500751252e-05, -3.320096899551040e-05, 0.000000000000000e+00, -3.351280985508449e-05, -3.320096899551040e-05, 0.000000000000000e+00, -3.351280985508449e-05, -8.903473087137913e-03, 0.000000000000000e+00, -9.140999237529790e-03, -8.852439532691254e-03, 0.000000000000000e+00, -9.106810933868168e-03, -8.035532201518035e-03, 0.000000000000000e+00, -8.022345338904446e-03, -8.651122887444147e-03, 0.000000000000000e+00, -8.867603608831525e-03, -9.058601521607354e-03, 0.000000000000000e+00, -8.044506886762606e-03, -9.058601521607354e-03, 0.000000000000000e+00, -8.044506886762606e-03, -1.129039204660074e+00, 0.000000000000000e+00, -1.312679166272161e+00, -1.147202191740352e+00, 0.000000000000000e+00, -1.348773932378263e+00, -1.529086653792621e-03, 0.000000000000000e+00, -1.971305513452055e-03, -5.996003209553230e-01, 0.000000000000000e+00, -7.756083701374459e-01, -9.563594399722908e-01, 0.000000000000000e+00, -4.367136542577730e-01, -9.563594399722904e-01, 0.000000000000000e+00, -4.367136542577730e-01, -1.747092770833295e+02, 0.000000000000000e+00, -1.575408297934791e+02, -1.592764753552481e+02, 0.000000000000000e+00, -1.425978557838681e+02, -3.251044478206772e+00, 0.000000000000000e+00, -3.175146952613349e+00, -3.151720038951045e+02, 0.000000000000000e+00, -3.438312102305988e+02, -2.021316635283663e+02, 0.000000000000000e+00, -4.793351021948640e+02, -2.021316635283656e+02, 0.000000000000000e+00, -4.793351021948637e+02, -1.379338168265473e-05, 0.000000000000000e+00, -1.380724941896710e-05, -1.379478647267443e-05, 0.000000000000000e+00, -1.380861311448959e-05, -1.379380016810530e-05, 0.000000000000000e+00, -1.380754213532087e-05, -1.379499012548284e-05, 0.000000000000000e+00, -1.380876565513163e-05, -1.379386040638857e-05, 0.000000000000000e+00, -1.380790402029151e-05, -1.379386040638857e-05, 0.000000000000000e+00, -1.380790402029151e-05, -3.010417638257407e-04, 0.000000000000000e+00, -3.028514815347327e-04, -3.073667638824079e-04, 0.000000000000000e+00, -3.089526276372056e-04, -2.977076399646188e-04, 0.000000000000000e+00, -3.004205821004175e-04, -3.038067563349296e-04, 0.000000000000000e+00, -3.064968275570183e-04, -3.069685212503520e-04, 0.000000000000000e+00, -3.065958634904287e-04, -3.069685212503520e-04, 0.000000000000000e+00, -3.065958634904287e-04, -6.086602483993613e-02, 0.000000000000000e+00, -6.232069978552442e-02, -5.333736502476248e-02, 0.000000000000000e+00, -5.382269421640749e-02, -6.285541883932667e-02, 0.000000000000000e+00, -6.479430343247583e-02, -6.813469629052320e-02, 0.000000000000000e+00, -6.551552212472921e-02, -5.727911505822696e-02, 0.000000000000000e+00, -6.469995463095292e-02, -5.727911505822700e-02, 0.000000000000000e+00, -6.469995463095293e-02, -7.491054328147242e-01, 0.000000000000000e+00, -7.273608890502030e-01, -5.325393604381309e-01, 0.000000000000000e+00, -5.254141115607197e-01, -7.836488144868732e-01, 0.000000000000000e+00, -8.191568509975365e-01, -5.371681977324204e-04, 0.000000000000000e+00, -5.383231359351523e-04, -9.091544175832660e-01, 0.000000000000000e+00, -1.224601665252141e+00, -9.091544175832665e-01, 0.000000000000000e+00, -1.224601665252142e+00, -1.212815063831425e+02, 0.000000000000000e+00, -1.335695697895997e+02, -2.320971660739336e+02, 0.000000000000000e+00, -1.951951768257078e+02, -1.576264258103131e+03, 0.000000000000000e+00, -1.447679129960916e+03, -1.331645327177054e+00, 0.000000000000000e+00, -1.661327949053096e+00, 2.571723292918163e+01, 0.000000000000000e+00, -7.936452202329970e+02, 2.571723292917843e+01, 0.000000000000000e+00, -7.936452202329976e+02, -8.805119007226235e-02, 0.000000000000000e+00, -8.676191680941778e-02, -8.889099372794837e-02, 0.000000000000000e+00, -8.760996071979031e-02, -8.866105476195145e-02, 0.000000000000000e+00, -8.737369540391894e-02, -8.841842137794249e-02, 0.000000000000000e+00, -8.713013505117403e-02, -8.854520669766115e-02, 0.000000000000000e+00, -8.725728651668826e-02, -8.854520669766115e-02, 0.000000000000000e+00, -8.725728651668826e-02, -9.669607376948464e-02, 0.000000000000000e+00, -9.555511983586519e-02, -1.183960033887459e-01, 0.000000000000000e+00, -1.174308136431478e-01, -1.194876930984662e-01, 0.000000000000000e+00, -1.182531657163131e-01, -1.142024582849694e-01, 0.000000000000000e+00, -1.127909026290075e-01, -1.175072645843501e-01, 0.000000000000000e+00, -1.162352991477874e-01, -1.175072645843501e-01, 0.000000000000000e+00, -1.162352991477874e-01, -4.135196353605861e-02, 0.000000000000000e+00, -4.202021897670025e-02, -4.312277829395562e-01, 0.000000000000000e+00, -4.296707863578912e-01, -3.687413681190517e-01, 0.000000000000000e+00, -3.734118758500577e-01, -2.818660859435986e-01, 0.000000000000000e+00, -2.761712742595725e-01, -3.557006356627836e-01, 0.000000000000000e+00, -3.594436619331882e-01, -3.557006356627839e-01, 0.000000000000000e+00, -3.594436619331884e-01, -1.298818846941430e-01, 0.000000000000000e+00, -1.320185534501013e-01, -4.034687537521460e+00, 0.000000000000000e+00, -3.853508252952479e+00, -1.875349367466878e+00, 0.000000000000000e+00, -1.848350123947800e+00, -4.074976925463011e-01, 0.000000000000000e+00, -4.608023261711938e-01, -1.386250172981677e+00, 0.000000000000000e+00, -1.578540298656701e+00, -1.386250172981678e+00, 0.000000000000000e+00, -1.578540298656702e+00, -3.039383661674053e+01, 0.000000000000000e+00, -2.642534783733305e+01, 1.723305652391234e+03, 0.000000000000000e+00, 3.488257019175200e+03, -2.305896626089256e+03, 0.000000000000000e+00, -2.086420012640287e+03, -1.667683379104991e+00, 0.000000000000000e+00, -1.942669160522315e+00, -1.927372563426751e+02, 0.000000000000000e+00, -9.598407041823233e+02, -1.927372563426749e+02, 0.000000000000000e+00, -9.598407041823249e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_14_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_14", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_14_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_14", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.957773425400473e-03, 2.957856290120491e-03, 2.957736776373139e-03, 2.957829663559425e-03, 2.957665481536529e-03, 2.957714576244570e-03, 2.958078979833772e-03, 2.958241934944061e-03, 2.957749558193988e-03, 2.958064903398207e-03, 2.957749558193988e-03, 2.958064903398207e-03, 1.141295788070440e-02, 1.140282548435650e-02, 1.141642158924841e-02, 1.140436475852174e-02, 1.147526624753813e-02, 1.148357037360431e-02, 1.148714492012055e-02, 1.147962167925701e-02, 1.140784266129668e-02, 1.153294956531902e-02, 1.140784266129668e-02, 1.153294956531902e-02, 2.030180053539539e-02, 2.091374890509904e-02, 2.016805141972058e-02, 2.080365685589114e-02, 1.789132538358167e-02, 1.802248360308916e-02, 2.057309098503080e-02, 2.120931113436174e-02, 2.060742899510535e-02, 1.964380360848438e-02, 2.060742899510535e-02, 1.964380360848438e-02, 7.332498800930481e-02, 1.007128394084565e-01, 7.644322993222151e-02, 1.082185909205364e-01, 3.052727622490123e-03, 4.692928147799924e-03, 1.387039932730975e-02, 2.074532466137789e-02, 6.975490836337271e-02, 3.175255599116513e-03, 6.975490836337275e-02, 3.175255599116516e-03, 2.741274259892460e-04, 2.988220457672599e-04, 2.854191562804803e-04, 3.171548547596022e-04, 1.006696581156004e-03, 1.189797166553964e-03, 9.578731500673306e-05, 1.012402139903223e-04, 2.194703128695296e-04, 7.869065407672148e-05, 2.194703128695309e-04, 7.869065407672320e-05, 1.107010044128038e-02, 1.107382303342645e-02, 1.104041890640731e-02, 1.104512552498545e-02, 1.106854334387459e-02, 1.107290244576738e-02, 1.104307247349024e-02, 1.104683044874180e-02, 1.105483111732124e-02, 1.105940118647436e-02, 1.105483111732124e-02, 1.105940118647436e-02, 2.633287768414845e-02, 2.651531060823658e-02, 2.739970008591570e-02, 2.754427204231180e-02, 2.618947115143474e-02, 2.640387495266071e-02, 2.719059860136167e-02, 2.741047774034733e-02, 2.702173378813814e-02, 2.708619417183204e-02, 2.702173378813814e-02, 2.708619417183204e-02, 9.614435788695178e-02, 9.734958840346530e-02, 7.577800494721454e-02, 7.568148395437617e-02, 7.888267113226652e-02, 8.881260847785788e-02, 7.399603173641150e-02, 7.764221984269210e-02, 9.538571526276994e-02, 9.565904417090838e-02, 9.538571526277000e-02, 9.565904417090845e-02, 5.610542681021863e-03, 5.563087311059453e-03, 3.589620535452819e-02, 3.585423694276854e-02, 4.114411572063070e-03, 5.250436393518711e-03, 2.261114101010223e-02, 2.262316513492967e-02, 1.121418336551411e-02, 1.916950635715089e-02, 1.121418336551407e-02, 1.916950635715087e-02, 1.121427082981801e-05, 1.428788544485636e-05, 5.568266146812375e-05, 4.786988315895723e-05, 1.778346071986705e-04, 1.927936692051329e-04, 2.044595186476488e-03, 2.766596163642963e-03, -1.853616770303210e-06, 2.736349779156811e-04, -1.853616770305679e-06, 2.736349779156830e-04, 7.009918231882328e-02, 6.961906313072565e-02, 8.024436866994455e-02, 7.960925830022439e-02, 7.670526775392884e-02, 7.609966010218079e-02, 7.372540607916840e-02, 7.321068041296960e-02, 7.521689723735787e-02, 7.465757896661085e-02, 7.521689723735787e-02, 7.465757896661088e-02, 7.072461615602033e-02, 7.035480606472050e-02, 1.408148472462513e-01, 1.405666974055081e-01, 1.323387454313276e-01, 1.314765604871153e-01, 1.102764703165559e-01, 1.096422810116419e-01, 1.223094131576953e-01, 1.217564739394059e-01, 1.223094131576953e-01, 1.217564739394058e-01, 7.131722825707228e-02, 7.156072303419343e-02, 6.184765937427766e-02, 6.266353335714987e-02, 8.719996648789391e-02, 9.082028715807060e-02, 1.202499732571777e-01, 1.192096687366014e-01, 1.186406518817755e-01, 1.195238624399351e-01, 1.186406518817756e-01, 1.195238624399352e-01, 1.210936109333735e-01, 1.246835095991123e-01, 1.250855578875424e-03, 1.208603863269751e-03, 1.391737757866747e-03, 1.536533576081386e-03, 1.383509359005791e-01, 1.630994363362993e-01, 4.651857720043501e-03, 6.499358288250806e-03, 4.651857720043431e-03, 6.499358288250779e-03, 1.096239167295585e-04, 1.043440642020062e-04, -4.555832850030181e-06, -6.962142420640609e-06, 1.089524189428930e-04, 1.183331324634702e-04, 4.986234502385958e-03, 6.465895927432440e-03, 1.363976927636177e-05, 2.545500466245440e-04, 1.363976927636155e-05, 2.545500466245464e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
