
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mk00_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mk00", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.999776817414354e+01, -1.999800303564769e+01, -1.999907959189146e+01, -1.999559663930539e+01, -1.999741694608110e+01, -1.999741694608110e+01, -3.206430318571041e+00, -3.206982331931444e+00, -3.221542287276358e+00, -3.215739814044703e+00, -3.216267897438850e+00, -3.216267897438850e+00, -3.949372247104205e-01, -3.928262137862326e-01, -3.454758179986445e-01, -3.664666910516594e-01, -3.652465550632983e-01, -3.652465550632983e-01, -8.980221176010578e-02, -9.403859799452041e-02, -2.848657971952420e-01, -3.079111333541184e-02, -7.187833415158214e-02, -7.187833415158210e-02, -6.882070943092088e-06, -8.276598362494698e-06, -7.003324946191596e-04, -9.889332058994467e-07, -3.934840922183989e-06, -3.934840922183989e-06, 9.140891067977961e-01, 3.164756491820042e+00, -1.291989425978236e-01, 4.086351893057912e-01, -2.700728559894297e+00, 4.566852492665455e+01, -1.389725026473104e-02, 6.829663406587976e+00, -2.168578407518056e+00, -2.243600804523450e+00, -2.352105912179400e+00, -1.412392239914209e+00, 3.998846790843769e-02, 1.687059163693593e-01, 4.004734126344700e-02, -1.140119356672776e+00, -1.506014506803788e+00, -1.546244263233724e+01, -1.266206085942979e-03, 8.402201786681940e-03, -1.996239279632516e-04, -5.288210634430893e+00, -1.404885438694342e-02, -9.984688960128430e-03, 3.289383101389252e-08, 4.867836529709440e-11, -7.403305841878939e-11, -3.157144092048868e-04, 4.443609779738514e-07, -4.736579486244836e-09, 6.055771014583117e-06, -1.475238924794083e-05, -8.563826867847517e-07, 6.746663040239569e-04, -4.675612158280470e-05, 4.743164985603023e-07, -1.491896965688439e-06, -6.829315397682565e-01, 5.207605923976458e-02, -2.268171520663790e-01, 4.004047300071052e+00, 2.073424483343731e-02, 4.233619510301054e-02, -1.117830110093879e-03, -1.064984765470818e-03, -1.855025588507421e-02, 2.624348194593613e-01, -1.132669946666835e+00, -6.016486146040591e-01, -8.397855930315160e-05, -2.309025867528248e-03, -4.222763515868233e-01, -2.701521009906368e-04, -4.226817732820132e-03, -1.744093213800693e-07, -1.806107214734368e-09, -1.718971438393106e-09, -1.608336417399275e-03, -1.889946667670986e-08, -9.954172528964678e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mk00_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mk00", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-5.999174062594349e+01, -5.999486842495931e+01, -5.999255706304741e+01, -5.999546116029775e+01, -5.999521990857207e+01, -5.999925762823690e+01, -5.998603530524921e+01, -5.998754454782760e+01, -5.999225032060934e+01, -5.999225135589709e+01, -5.999225032060934e+01, -5.999225135589709e+01, -9.620149630646367e+00, -9.618432245631467e+00, -9.622153778919882e+00, -9.619740156261694e+00, -9.661165073161580e+00, -9.668088436698778e+00, -9.647181028083606e+00, -9.647257854567302e+00, -9.615177180570941e+00, -9.682392486398006e+00, -9.615177180570941e+00, -9.682392486398006e+00, -1.170349943870762e+00, -1.199102787090881e+00, -1.161926838296744e+00, -1.194790929282814e+00, -1.047027454486152e+00, -1.025605332544551e+00, -1.089339047292189e+00, -1.109395994038500e+00, -1.219242490570872e+00, -9.454437459690374e-01, -1.219242490570872e+00, -9.454437459690374e-01, -2.464216799960765e-01, -2.899052299888993e-01, -2.552349893566920e-01, -3.057143068539301e-01, -7.736817566256823e-01, -9.278720155575448e-01, -8.460725676884920e-02, -9.982657051960818e-02, -2.443184528607470e-01, -2.986897256064260e-02, -2.443184528607469e-01, -2.986897256064264e-02, -1.843638685618375e-05, -2.248794431180124e-05, -2.172522086465827e-05, -2.735517584885264e-05, -1.883047327544604e-03, -2.286072316927653e-03, -2.999655406591751e-06, -2.932245112718894e-06, -1.330849121746460e-05, -3.643252561202222e-06, -1.330849121746460e-05, -3.643252561202227e-06, 2.372347955360839e+00, 3.112452642592988e+00, 9.424732222826032e+00, 9.563858042001172e+00, -4.103083205878499e-01, -3.648687023533723e-01, 1.257573525037501e+00, 1.194214767936041e+00, -8.083428967309331e+00, -8.120956124624545e+00, 7.042943199081380e+01, 2.036304607281381e+02, -3.855180988720155e-02, -4.483216774569945e-02, 2.054017229251050e+01, 2.043776633803951e+01, -6.454732829922102e+00, -6.556473888122919e+00, -6.603761687897234e+00, -6.857158894066734e+00, -7.145845306128392e+00, -6.965603568056348e+00, -4.206059953001867e+00, -4.268705908278101e+00, 1.365874113609863e-01, 1.032106737347050e-01, 5.114119264732963e-01, 5.008307755539999e-01, 9.728588293165251e-02, 1.406519225476685e-01, -3.170599157316231e+00, -3.646788222620019e+00, -4.847444434834820e+00, -4.134045636635276e+00, -6.436002393685563e+01, -2.543572472028565e+01, -3.736283502675091e-03, -3.859203194739307e-03, 2.487257345907719e-02, 2.553568573863439e-02, -5.477071473381538e-04, -6.426019624643182e-04, -1.586182710233027e+01, -1.586744048797065e+01, -3.373908078711971e-02, -4.921893164675199e-02, -2.489069825929876e-02, -3.421336913956718e-02, 8.906377529167184e-08, 1.072503246320404e-07, 1.388877683759266e-10, 1.528674792777663e-10, -1.182003736085167e-10, -3.095732238674239e-10, -1.004143061639600e-03, -8.911820192796715e-04, 3.258737961054229e-07, 1.721952654410128e-06, -3.255969082627837e-09, -1.843883952191459e-08, 1.818555590342580e-05, 1.814928012141050e-05, -4.409659735166442e-05, -4.441587182868437e-05, -2.563493691926177e-06, -2.574736731116143e-06, 1.901120911770579e-03, 2.145462159648529e-03, -1.506489682620508e-04, -1.300078133329401e-04, 1.418079146195302e-06, 1.427763519378347e-06, -4.520971476944446e-06, -4.430856416859267e-06, -2.052807615100040e+00, -2.044833331528582e+00, 1.573368983900297e-01, 1.551340884106248e-01, -7.382572637538566e-01, -6.232511740517132e-01, 1.196940996437078e+01, 1.205440114228465e+01, 6.159511508110045e-02, 6.280363253166982e-02, 1.250613795449061e-01, 1.289463029808253e-01, -3.351679453972601e-03, -3.355270111882175e-03, -3.162678809425532e-03, -3.226277826602124e-03, -5.699877882058719e-02, -5.432487190769741e-02, 8.101535744602525e-01, 7.644311440411761e-01, -3.008607687729737e+00, -3.787824386888326e+00, -1.749871356776940e+00, -1.858898074393992e+00, -2.330834694120277e-04, -2.704061474523375e-04, -4.579794362582296e-03, -9.053579321100401e-03, -1.196376965236155e+00, -1.334187789011759e+00, -6.674477898620245e-04, -9.319346698829060e-04, -1.151959320776569e-02, -1.366654397596222e-02, -3.444949345410193e-07, -6.838501923135845e-07, -6.751002015476985e-09, -4.094737458021336e-09, -4.369726256671851e-09, -5.811199557137872e-09, -5.135847421593334e-03, -4.528935450944312e-03, -2.016240755318581e-08, -7.226684691229312e-08, -1.178829853566685e-08, -3.756417012618635e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mk00_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mk00", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mk00_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mk00", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [-1.097322996768584e-03, -1.097441661916333e-03, -1.097342228593681e-03, -1.097455619704344e-03, -1.097403517835446e-03, -1.097543330305956e-03, -1.097187684745877e-03, -1.097267969964298e-03, -1.097335405444011e-03, -1.097377401625766e-03, -1.097335405444011e-03, -1.097377401625766e-03, -6.538451050942702e-03, -6.536384321259673e-03, -6.541114271275784e-03, -6.538138723846184e-03, -6.593147553251792e-03, -6.602192701550072e-03, -6.572816257436829e-03, -6.572644211454628e-03, -6.534971333933482e-03, -6.619223788570321e-03, -6.534971333933482e-03, -6.619223788570321e-03, -1.356660113909844e-02, -1.407337303887441e-02, -1.343465153803445e-02, -1.399981322796515e-02, -1.161984338740075e-02, -1.138285474931476e-02, -1.243747317728446e-02, -1.281621387282489e-02, -1.422038597425028e-02, -1.040573802957240e-02, -1.422038597425028e-02, -1.040573802957240e-02, -3.683480884150286e-02, -4.546666695083608e-02, -3.809120964751910e-02, -4.797535997487857e-02, -3.911117818715724e-03, -5.094170675378488e-03, -9.552789947273764e-03, -1.276291318957868e-02, -3.180455196482670e-02, -3.078592576328434e-03, -3.180455196482668e-02, -3.078592576328444e-03, -5.068674325564377e-06, -6.285075734052991e-06, -6.116964329649169e-06, -7.888808061927859e-06, -2.673026041939489e-04, -3.345421392181318e-04, -6.177103320013949e-07, -6.207767606980562e-07, -3.720199364864537e-06, -1.512885840192940e-06, -3.720199364864537e-06, -1.512885840192944e-06, -1.184322843542781e-04, -2.040003735977847e-04, -1.868134253984140e-03, -1.925114871625465e-03, -3.542575885894893e-06, -2.803429733197302e-06, -3.326262702642428e-05, -3.001703582053448e-05, -1.374614651988658e-03, -1.388423299261304e-03, -1.043513538050809e-01, -8.729574034499615e-01, -5.890842775556324e-07, -7.967704221278139e-07, -1.635819368151837e-01, -1.620871765191342e-01, -1.682372341482005e-02, -1.726850499732177e-02, -1.727532751153238e-02, -1.852620587362691e-02, -1.971726087204106e-02, -1.898345245192058e-02, -6.831094281740543e-03, -7.129353700488848e-03, -2.733504699696286e-04, -1.573264193081796e-04, -3.002946328499235e-03, -2.876050672602964e-03, -1.857920898590549e-04, -3.484813405546892e-04, -1.747358718508839e-01, -2.095722339678398e-01, -3.060436646064519e-01, -2.594850122299929e-01, -5.394983346301270e+01, -9.823131939962639e+00, -5.530808819998103e-05, -5.735069634696263e-05, -3.548535199137033e-04, -3.684824143309448e-04, -1.605491191600160e-06, -1.888889545698211e-06, -1.056063671206217e-01, -1.058236923144518e-01, -3.010469453811377e-03, -5.389283284306799e-03, -1.638482822513537e-03, -2.604104054395536e-03, -1.289826554545830e-09, -1.666387210024753e-09, -1.486641785399382e-15, -1.721619166762738e-15, -2.575172842660946e-15, -1.487182115779941e-14, -1.649860648106634e-05, -1.275858184088352e-05, -1.837157622290929e-08, -1.980498066201735e-07, -1.834036963270453e-12, -2.270906112801518e-11, -4.822642230159362e-12, -4.748144031112026e-12, -2.885111772993753e-11, -2.893020454795491e-11, -9.691114740974156e-14, -9.662718090722202e-14, -5.303138977573215e-08, -6.676148719520615e-08, -3.338444627127144e-10, -2.457530173205832e-10, -2.958099614113833e-14, -2.963961196006275e-14, -3.233956685626654e-13, -3.075715615031431e-13, -1.055663809725890e-01, -1.033981226689743e-01, -5.401575522978493e-04, -5.182083292991419e-04, -1.041687176111520e-02, -7.346403347008979e-03, -2.926606394864702e+00, -2.935480826146142e+00, -7.750172601790734e-05, -7.968149913591231e-05, -1.561264782570850e-04, -1.651682536159200e-04, -3.198842759345222e-06, -3.150654930707727e-06, -1.654923490695647e-06, -1.671356780221404e-06, -2.316779260420262e-04, -2.069983409622412e-04, -7.053950629168880e-02, -6.286865222547276e-02, -9.728118059953338e-01, -1.543608198718788e+00, -9.868231267676758e-02, -1.090930724367313e-01, -4.334163372308416e-06, -5.715196316168894e-06, -6.875069467748225e-04, -2.434030390815543e-03, -1.155821384883166e-01, -1.374322328832457e-01, -3.808410080664294e-06, -6.306916750042493e-06, -1.134444864869031e-03, -1.356324377214282e-03, -6.046403702726586e-10, -2.141185214432416e-09, -1.803767277866608e-10, -6.590550924071527e-11, -8.970309614170690e-12, -1.318618536712004e-11, -2.563880408229395e-04, -1.899028298600564e-04, -8.275423361570781e-11, -4.530102572342188e-10, -2.828835505025840e-11, -1.223988734007521e-10]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mk00_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mk00", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [8.778583974148673e-03, 8.779533295330667e-03, 8.778737828749451e-03, 8.779644957634751e-03, 8.779228142683572e-03, 8.780346642447649e-03, 8.777501477967013e-03, 8.778143759714384e-03, 8.778683243552089e-03, 8.779019213006126e-03, 8.778683243552089e-03, 8.779019213006126e-03, 5.230760840754162e-02, 5.229107457007739e-02, 5.232891417020627e-02, 5.230510979076947e-02, 5.274518042601434e-02, 5.281754161240058e-02, 5.258253005949463e-02, 5.258115369163702e-02, 5.227977067146786e-02, 5.295379030856257e-02, 5.227977067146786e-02, 5.295379030856257e-02, 1.085328091127875e-01, 1.125869843109953e-01, 1.074772123042756e-01, 1.119985058237212e-01, 9.295874709920598e-02, 9.106283799451804e-02, 9.949978541827569e-02, 1.025297109825991e-01, 1.137630877940023e-01, 8.324590423657918e-02, 1.137630877940023e-01, 8.324590423657918e-02, 2.946784707320229e-01, 3.637333356066886e-01, 3.047296771801528e-01, 3.838028797990286e-01, 3.128894254972579e-02, 4.075336540302790e-02, 7.642231957819011e-02, 1.021033055166295e-01, 2.544364157186136e-01, 2.462874061062748e-02, 2.544364157186135e-01, 2.462874061062755e-02, 4.054939460451501e-05, 5.028060587242393e-05, 4.893571463719335e-05, 6.311046449542288e-05, 2.138420833551591e-03, 2.676337113745054e-03, 4.941682656011159e-06, 4.966214085584449e-06, 2.976159491891630e-05, 1.210308672154352e-05, 2.976159491891630e-05, 1.210308672154355e-05, 9.474582748342251e-04, 1.632002988782278e-03, 1.494507403187312e-02, 1.540091897300372e-02, 2.834060708715914e-05, 2.242743786557841e-05, 2.661010162113942e-04, 2.401362865642759e-04, 1.099691721590926e-02, 1.110738639409043e-02, 8.348108304406469e-01, 6.983659227599692e+00, 4.712674220445059e-06, 6.374163377022511e-06, 1.308655494521469e+00, 1.296697412153074e+00, 1.345897873185604e-01, 1.381480399785742e-01, 1.382026200922590e-01, 1.482096469890153e-01, 1.577380869763285e-01, 1.518676196153646e-01, 5.464875425392434e-02, 5.703482960391078e-02, 2.186803759757029e-03, 1.258611354465437e-03, 2.402357062799388e-02, 2.300840538082371e-02, 1.486336718872439e-03, 2.787850724437514e-03, 1.397886974807071e+00, 1.676577871742719e+00, 2.448349316851615e+00, 2.075880097839943e+00, 4.315986677041016e+02, 7.858505551970111e+01, 4.424647055998482e-04, 4.588055707757011e-04, 2.838828159309627e-03, 2.947859314647559e-03, 1.284392953280128e-05, 1.511111636558569e-05, 8.448509369649734e-01, 8.465895385156141e-01, 2.408375563049102e-02, 4.311426627445439e-02, 1.310786258010829e-02, 2.083283243516429e-02, 1.031861243636664e-08, 1.333109768019803e-08, 1.189313428319506e-14, 1.377295333410190e-14, 2.060138274128757e-14, 1.189745692623953e-13, 1.319888518485307e-04, 1.020686547270682e-04, 1.469726097832743e-07, 1.584398452961388e-06, 1.467229570616362e-11, 1.816724890241214e-10, 3.858113784127490e-11, 3.798515224889621e-11, 2.308089418395002e-10, 2.314416363836393e-10, 7.752891792779325e-13, 7.730174472577761e-13, 4.242511182058572e-07, 5.340918975616492e-07, 2.670755701701715e-09, 1.966024138564665e-09, 2.366479691291066e-13, 2.371168956805020e-13, 2.587165348501324e-12, 2.460572492025145e-12, 8.445310477807123e-01, 8.271849813517941e-01, 4.321260418382794e-03, 4.145666634393135e-03, 8.333497408892158e-02, 5.877122677607183e-02, 2.341285115891761e+01, 2.348384660916914e+01, 6.200138081432587e-04, 6.374519930872985e-04, 1.249011826056680e-03, 1.321346028927360e-03, 2.559074207476178e-05, 2.520523944566182e-05, 1.323938792556518e-05, 1.337085424177123e-05, 1.853423408336210e-03, 1.655986727697930e-03, 5.643160503335104e-01, 5.029492178037821e-01, 7.782494447962670e+00, 1.234886558975031e+01, 7.894585014141406e-01, 8.727445794938506e-01, 3.467330697846733e-05, 4.572157052935115e-05, 5.500055574198580e-03, 1.947224312652435e-02, 9.246571079065329e-01, 1.099457863065965e+00, 3.046728064531435e-05, 5.045533400033994e-05, 9.075558918952247e-03, 1.085059501771426e-02, 4.837122962181269e-09, 1.712948171545933e-08, 1.443013822293286e-09, 5.272440739257221e-10, 7.176247691336552e-11, 1.054894829369603e-10, 2.051104326583516e-03, 1.519222638880451e-03, 6.620338689256625e-10, 3.624082057873751e-09, 2.263068404020672e-10, 9.791909872060168e-10]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
