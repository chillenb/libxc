
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_rtpss_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rtpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.990412333677404e+01, -1.990418379861364e+01, -1.990446773844781e+01, -2.130952254080857e+01, -2.130998999352038e+01, -2.271602135107337e+01, -3.493471720111435e+00, -3.751955797272524e+00, -3.751179862241623e+00, -3.751831577327103e+00, -3.751374843874167e+00, -3.493013016484461e+00, -6.333986976005918e-01, -7.027619018104430e-01, -7.705804862175523e-01, -6.953799512563046e-01, -6.222442354289153e-01, -7.705211292961783e-01, -1.908693648610606e-01, -1.925624081551161e-01, -8.744684812206023e-01, -2.014362537266964e-01, -2.165032131077533e-01, -2.075264123252781e-01, -1.011217354967865e-02, -8.691493428611054e-03, -4.755481512120006e-02, -5.830218135953091e-03, -8.138160784503223e-03, -8.138160784503223e-03, -5.536627667008421e+00, -5.537644629469956e+00, -5.536678322855265e+00, -5.537576042044743e+00, -5.201486485556363e+00, -5.201812311717514e+00, -2.134380414630502e+00, -2.144450894161587e+00, -2.127615415237543e+00, -2.136125842100910e+00, -1.991224030726623e+00, -2.143319514602899e+00, -5.853963135622970e-01, -6.778402776931978e-01, -5.834163688858660e-01, -6.020676329894625e-01, -5.990525985704966e-01, -6.359826580871872e-01, -1.519597225921844e-01, -2.044303778160841e-01, -1.411486616340376e-01, -2.044092593939620e+00, -1.707264769481149e-01, -1.707264769481149e-01, -3.616236035701986e-03, -5.699392574836056e-03, -4.364675792400219e-03, -7.458239722056571e-02, -5.482775671063140e-03, -5.482775671063142e-03, -6.267103767344289e-01, -6.233147248217241e-01, -5.511486952367128e-01, -5.892283650789281e-01, -5.517697237742260e-01, -5.886720509068450e-01, -6.097623755394964e-01, -4.916504113510199e-01, -5.137326531976523e-01, -5.728163256997603e-01, -5.605138375920877e-01, -5.251370685549568e-01, -6.663649787709416e-01, -2.778456785185308e-01, -2.797924504850579e-01, -3.524304470681026e-01, -3.383608400063823e-01, -3.112837170577698e-01, -4.882315738451823e-01, -3.220288618994888e-02, -7.652561374046155e-02, -3.606877537822260e-01, -1.209323934109478e-01, -1.209323934109478e-01, -8.183339380899331e-03, -1.523316300276004e-03, -1.839166340603876e-03, -6.522538737468173e-02, -5.034982857663592e-03, -3.411246114496764e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_rtpss_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rtpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.680507255929738e+01, -2.680508071129760e+01, -2.680516542392517e+01, -2.680514816247929e+01, -2.680547725391426e+01, -2.680559083930384e+01, -2.680442852834010e+01, -2.798237907117486e+01, -2.680512736323920e+01, -2.798274135869033e+01, -2.798316632561912e+01, -2.798274135869032e+01, -4.428670418657519e+00, -4.242434879764291e+00, -4.428865929514824e+00, -4.428585375964844e+00, -4.432626353935565e+00, -4.433341896184211e+00, -4.431637096665083e+00, -4.431704018243154e+00, -4.427524740320837e+00, -4.435157061947520e+00, -4.241723578314156e+00, -4.435157061947520e+00, -8.221812984431047e-01, -8.245324328828353e-01, -8.211660322896402e-01, -7.199424607427345e-01, -6.687846264802951e-01, -6.596089591018992e-01, -6.809716817535459e-01, -8.105031691272545e-01, -8.302778202133096e-01, -7.863166474018343e-01, -7.311081385508751e-01, -6.280122400953901e-01, -2.125418173211562e-01, -1.698816562178121e-01, -2.148789724262837e-01, -1.754371746824869e-01, -7.204977848831725e-01, -9.921207352666604e-01, -1.810735111769250e-01, -1.663392968056596e-01, -1.665565678823933e-01, -2.005739818442742e-01, -1.665565678823931e-01, -1.215651889297540e-01, -1.303761629899009e-02, -1.385400848819942e-02, -7.843192692150742e-03, -1.463530105325925e-02, -4.359537254321510e-02, -8.022113758032647e-02, -7.837274757367561e-03, -7.706682731293256e-03, -1.163080014436929e-02, -6.618657626552290e-03, -1.163080014436929e-02, -6.618657626552290e-03, -6.730822339094187e+00, -6.729197148059856e+00, -6.730010442484656e+00, -6.728412271647869e+00, -6.730754975304413e+00, -6.729154019007235e+00, -6.730059583719126e+00, -6.728442262605740e+00, -6.543552254269621e+00, -6.728807022952777e+00, -6.730424732352255e+00, -6.541955437978610e+00, -2.409841688505661e+00, -2.411677904208116e+00, -2.446536537811724e+00, -2.447161910975327e+00, -2.377099637097640e+00, -2.388379198576603e+00, -2.409931213205738e+00, -2.421292032866166e+00, -2.454303254130394e+00, -2.388078411500481e+00, -2.454303254130394e+00, -2.433903306663384e+00, -7.743792771164013e-01, -7.281862159082019e-01, -8.337368657667246e-01, -8.329729320204083e-01, -6.818872059713945e-01, -7.200397711522841e-01, -7.305386355813794e-01, -7.569436297430765e-01, -8.068202934360146e-01, -7.219009409009934e-01, -8.068202934360149e-01, -7.658214641560384e-01, -1.910473632660260e-01, -1.920490816785528e-01, -2.186261044649748e-01, -1.742015883079265e-01, -1.790816254456498e-01, -1.846514070666958e-01, -2.535357564247399e+00, -2.534215485319077e+00, -1.836190818616551e-01, -1.588817884200217e-01, -1.836190818616550e-01, -1.588817884200217e-01, -3.375403830500881e-03, -6.110164258163266e-03, -7.540839044572501e-03, -7.654969939076097e-03, -5.638837180345527e-03, -5.971727633039896e-03, -1.263759945557641e-01, -7.292270378438694e-02, -5.759214710703059e-03, -7.909246535848055e-03, -5.759214710703061e-03, -7.909246535848059e-03, -7.325952113061351e-01, -7.350583914173451e-01, -7.402111815858247e-01, -7.426326324575451e-01, -7.364689477437710e-01, -7.393321020555638e-01, -7.376226434427832e-01, -7.379494072502997e-01, -7.370466113837083e-01, -7.398991842509839e-01, -7.370466113837082e-01, -7.390648075370000e-01, -7.146361365539048e-01, -7.165886417695395e-01, -6.419685196622013e-01, -6.085245093909407e-01, -6.793349504254742e-01, -6.450739242563509e-01, -7.023530966108209e-01, -7.046126423421364e-01, -6.925305346975416e-01, -6.949228972247076e-01, -6.925305346975414e-01, -6.613594885228500e-01, -8.787624519865904e-01, -8.385876944129410e-01, -2.053690848155434e-01, -2.068047431108454e-01, -3.233854873129688e-01, -2.722665594530398e-01, -4.209892954950344e-01, -4.278264109697132e-01, -3.461109325599211e-01, -3.466626752270897e-01, -3.461109325599209e-01, -3.681394837404557e-01, -5.770036169559501e-01, -5.840499796446984e-01, -4.278011489456052e-02, -4.307276686686910e-02, -1.002730057376623e-01, -1.036295982225438e-01, -4.226309221352692e-01, -4.377047817013430e-01, -1.545473526615329e-01, -1.582192254270922e-01, -1.545473526615328e-01, -1.582192254270921e-01, -1.070654825761138e-02, -1.109469118411974e-02, -2.028762023808494e-03, -2.033398898287572e-03, -2.369931433058274e-03, -2.520612406460889e-03, -8.614577632217371e-02, -8.753542366088754e-02, -5.455199472438233e-03, -7.249407432700401e-03, -5.455199472438228e-03, -4.161878817613525e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rtpss_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rtpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.378224830881295e-08, 0.000000000000000e+00, -1.378416321951116e-08, -1.378234080319907e-08, 0.000000000000000e+00, -1.378423008924209e-08, -1.378250011797807e-08, 0.000000000000000e+00, -1.378449668768514e-08, -1.378147719624519e-08, 0.000000000000000e+00, -2.867301151725701e-08, -1.378231736356420e-08, 0.000000000000000e+00, -2.867905724767001e-08, -2.867431015256910e-08, 0.000000000000000e+00, -2.867905724767001e-08, -1.191942878440121e-05, 0.000000000000000e+00, -9.679184305723235e-06, -1.192075071396295e-05, 0.000000000000000e+00, -1.191978083456520e-05, -1.194712614093744e-05, 0.000000000000000e+00, -1.195143834013995e-05, -1.193340884293803e-05, 0.000000000000000e+00, -1.193277828120702e-05, -1.192413283760846e-05, 0.000000000000000e+00, -1.195611723741907e-05, -9.681332710248877e-06, 0.000000000000000e+00, -1.195611723741907e-05, -3.681497117552861e-03, 0.000000000000000e+00, -3.707507436451588e-03, -3.680113888442603e-03, 0.000000000000000e+00, -8.365139181921118e-03, -9.254410854544126e-03, 0.000000000000000e+00, -9.496789494270821e-03, -9.139075725595453e-03, 0.000000000000000e+00, -3.749967900618425e-03, -3.649317851585455e-03, 0.000000000000000e+00, -3.792573222194319e-03, -8.085688762556295e-03, 0.000000000000000e+00, -1.035703848842091e-02, -5.978710555062999e-01, 0.000000000000000e+00, -1.688939235078637e+00, -5.875245576381170e-01, 0.000000000000000e+00, -1.598575013995830e+00, -4.146024083654290e-03, 0.000000000000000e+00, -1.326439869804018e-03, -1.864739938499724e+00, 0.000000000000000e+00, -2.265494386552052e+00, -1.563227132896831e+00, 0.000000000000000e+00, -4.822456425095194e-01, -1.563227132896832e+00, 0.000000000000000e+00, -2.577864307000883e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.262612774049494e-293, -1.127110746098485e+05, 0.000000000000000e+00, -1.372963270325659e-256, -1.233593208649405e+02, 0.000000000000000e+00, -1.461799954779805e-09, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.397375215081041e-05, 0.000000000000000e+00, -1.398814581255730e-05, -1.412362889988733e-05, 0.000000000000000e+00, -1.413312555096858e-05, -1.398422413452263e-05, 0.000000000000000e+00, -1.399468680932431e-05, -1.411272272057832e-05, 0.000000000000000e+00, -1.412629078563617e-05, -4.885664525443949e-06, 0.000000000000000e+00, -1.406042726581131e-05, -1.404857661058494e-05, 0.000000000000000e+00, -4.890135810817921e-06, -1.133089125852968e-04, 0.000000000000000e+00, -1.133736517690127e-04, -1.105346726437471e-04, 0.000000000000000e+00, -1.106995989908469e-04, -1.158715959227425e-04, 0.000000000000000e+00, -1.151636117184135e-04, -1.132164720539477e-04, 0.000000000000000e+00, -1.125629204763833e-04, -1.100863501257779e-04, 0.000000000000000e+00, -8.080916882764397e-05, -1.100863501257779e-04, 0.000000000000000e+00, -1.117072546276068e-04, -2.176523602841849e-02, 0.000000000000000e+00, -1.766112941969579e-02, -3.848470564660636e-02, 0.000000000000000e+00, -4.079221137991636e-02, -2.195978677038938e-02, 0.000000000000000e+00, -2.151702568103494e-02, -2.578630700594014e-02, 0.000000000000000e+00, -2.703634430201096e-02, -2.368373324768977e-02, 0.000000000000000e+00, -1.853532635454337e-02, -2.368373324768977e-02, 0.000000000000000e+00, -2.391688756033396e-02, -6.117183171119402e-01, 0.000000000000000e+00, -6.397384833270409e-01, -4.205867272733362e-01, 0.000000000000000e+00, -1.261648809156748e+00, -3.122251682078173e-01, 0.000000000000000e+00, -5.404308766525973e-01, -2.410165263076424e-04, 0.000000000000000e+00, -2.417110188046891e-04, -1.891607609001244e+00, 0.000000000000000e+00, -3.293968420757582e+00, -1.891607609001245e+00, 0.000000000000000e+00, -3.293968420757585e+00, -3.279563364905548e+06, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -6.992375486207614e-03, 0.000000000000000e+00, -1.728419477383251e+01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -4.339846263782691e-01, 0.000000000000000e+00, -4.414429608269267e-01, -1.978907028871101e-01, 0.000000000000000e+00, -2.000394445070973e-01, -5.595817530039423e-02, 0.000000000000000e+00, -5.625102854607485e-02, -6.578208946126252e-02, 0.000000000000000e+00, -3.139823626582823e-01, -6.037746683746422e-02, 0.000000000000000e+00, -6.068879778525618e-02, -6.037746683746422e-02, 0.000000000000000e+00, -2.797606782052601e-01, -4.184581679861507e-01, 0.000000000000000e+00, -4.271064541216863e-01, -3.559153050582975e-02, 0.000000000000000e+00, -3.021316158513824e-02, -4.631381386582085e-02, 0.000000000000000e+00, -3.234665880821612e-02, -8.147152603903005e-02, 0.000000000000000e+00, -8.136119446120894e-02, -5.887620542752351e-02, 0.000000000000000e+00, -5.902907777655417e-02, -5.887620542752348e-02, 0.000000000000000e+00, -3.355027489360954e-02, -2.346950736765413e-02, 0.000000000000000e+00, -1.356720641657719e-02, -6.800760038331884e-01, 0.000000000000000e+00, -6.680455262229035e-01, -1.409476877025059e-01, 0.000000000000000e+00, -3.473912819690245e-01, -7.988615908681053e-02, 0.000000000000000e+00, -1.124312281867447e-01, -2.006247331869266e-01, 0.000000000000000e+00, -2.007876208677666e-01, -2.006247331869269e-01, 0.000000000000000e+00, -1.085169788078245e-01, -4.225570247335037e-02, 0.000000000000000e+00, -4.199365735017456e-02, -1.329621890554188e+02, 0.000000000000000e+00, -1.294059065084216e+02, -4.104078930718363e-06, 0.000000000000000e+00, -1.813460652062774e-05, -1.415488785296840e-01, 0.000000000000000e+00, -1.467889667935316e-01, -3.442955798364450e-01, 0.000000000000000e+00, -1.011971708653314e+00, -3.442955798364462e-01, 0.000000000000000e+00, -1.011971708653320e+00, -3.247852817157146e+04, 0.000000000000000e+00, -2.817167202969379e+04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.349511214090886e+07, 0.000000000000000e+00, -1.054668656745211e+07, -9.578609623189749e+00, 0.000000000000000e+00, -9.153281451693461e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.420024690575304e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rtpss_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rtpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.560917245745135e-04, 1.561245883764673e-04, 1.560960150067493e-04, 1.561276975212785e-04, 1.561078417689116e-04, 1.561451647365832e-04, 1.560597483997915e-04, 2.196261255962369e-03, 1.560945031996192e-04, 2.196876544002901e-03, 2.196586298898487e-03, 2.196876544002901e-03, 2.048862187075096e-03, -5.323600014235269e-04, 2.050127708383345e-03, 2.048678574252072e-03, 2.074897509032490e-03, 2.079341201937162e-03, 2.065681759316256e-03, 2.065686369783491e-03, 2.046372854741269e-03, 2.088135619392431e-03, -5.328433956483424e-04, 2.088135619392431e-03, -1.975438156903310e-03, -2.065606177058865e-03, -1.950291327372315e-03, 2.291535123654716e-03, 1.675969645934462e-03, 1.603676272139018e-03, 1.851525248181966e-03, -1.802356605221677e-03, -2.113057230006897e-03, -1.326478893416210e-03, 2.388127848007414e-03, 1.354496875274458e-03, -2.699853266256685e-03, 3.767762574041641e-03, -2.936135560345133e-03, 4.271850682156127e-03, 4.452351585158964e-04, -6.967821020017682e-04, 2.853786295325141e-04, 4.333899900148194e-04, 2.586881297692792e-03, 1.092911837874693e-05, 2.586881297692787e-03, -9.961895823761239e-05, 0.000000000000000e+00, 5.283983528512642e-304, -6.438615066356699e-08, 7.732719862979767e-267, -5.464665343201953e-06, 2.895697909512560e-16, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.565855716577604e-02, 1.566342755446171e-02, 1.583577371876953e-02, 1.583472649647352e-02, 1.567085598622735e-02, 1.567109543121919e-02, 1.582279942068076e-02, 1.582659544425918e-02, 7.886662264326119e-04, 1.574884051664298e-02, 1.574709210076882e-02, 7.888340644745550e-04, 2.392618221787185e-03, 2.413494671201905e-03, 2.585758294707365e-03, 2.601940541206028e-03, 2.228597143763493e-03, 2.293750738827260e-03, 2.388359797752675e-03, 2.459326194596633e-03, 2.635514688188814e-03, -1.119013922935335e-03, 2.635514688188814e-03, 2.531692324481099e-03, 2.994165550787031e-02, 1.311336364436177e-03, 7.846987818992042e-02, 8.344338741673048e-02, 1.439583105647896e-02, 2.014830007472437e-02, 2.901334400854703e-02, 3.624709005336083e-02, 3.972555680362742e-02, 1.507075101178482e-03, 3.972555680362744e-02, 3.240656446713443e-02, 1.222352474850615e-05, 1.340821573125056e-05, -1.047832992603226e-03, 9.598799044361016e-04, 3.708403681800839e-06, 8.721427036814174e-06, 1.252146450866299e-02, 1.254381339246984e-02, 9.296764759479465e-05, 2.816632386922498e-04, 9.296764759479472e-05, 2.816632386922506e-04, -2.626852263530770e-09, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.390978287240165e-08, -3.353573170719592e-05, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 6.994095792400217e-01, 7.197212699990534e-01, 3.138010425292481e-01, 3.209104655332676e-01, 7.877225602983103e-03, 7.855508279223619e-03, 7.922544035088065e-03, 5.087943869911719e-01, 7.901889749783078e-03, 7.878277158768567e-03, 7.901889749783078e-03, 4.522823494474347e-01, 6.215325404690856e-01, 6.406876889033684e-01, 2.439251767662568e-02, -1.059788310521852e-03, 4.617932340129630e-02, 3.335754167319674e-03, 1.000086273243052e-01, 1.009639658974720e-01, 6.606485775161500e-02, 6.708859581589542e-02, 6.606485775161500e-02, 5.178722313137855e-03, 5.406773461571641e-02, 4.505230273238619e-03, 2.134117661969738e-03, 2.183157805720426e-03, -3.914732164559732e-03, 4.372762368589349e-03, -6.407834500677712e-03, 1.297831955825873e-02, 8.163816478507870e-03, 8.288874249895774e-03, 8.163816478507875e-03, -6.266491551108052e-03, 1.650645974572527e-02, 1.789498787645470e-02, -5.433006359579956e-06, -5.435214597819448e-06, 2.311067663910498e-12, 1.229959592848305e-11, 2.072598099513129e-02, 2.909699032779083e-02, 2.335987139406189e-06, 1.031141806245941e-05, 2.335987139406206e-06, 1.031141806245943e-05, -7.627599599289068e-08, -8.366454750133290e-08, 0.000000000000000e+00, 0.000000000000000e+00, -3.779678477501558e-09, -4.817950313124063e-09, -7.571710820290301e-05, -9.023770019217298e-05, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.873477383541783e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
