
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_rtpss_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rtpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.256412526266824e+01, -2.256418857933854e+01, -2.256457180924207e+01, -2.256363221060438e+01, -2.256410997084155e+01, -2.256410997084155e+01, -3.461334077977610e+00, -3.461339486682289e+00, -3.461751060994906e+00, -3.463881494472436e+00, -3.462465161643999e+00, -3.462465161643999e+00, -6.712954377355536e-01, -6.711386260624852e-01, -6.697626204043200e-01, -6.764119886639958e-01, -6.778938633078258e-01, -6.778938633078258e-01, -2.134138049287395e-01, -2.136595785626865e-01, -7.664661900520908e-01, -1.925773791838419e-01, -2.107745778305807e-01, -2.107745778305807e-01, -1.011217354967865e-02, -1.064899078704721e-02, -5.870031516951713e-02, -5.830218135953091e-03, -8.138160784503223e-03, -8.138160784503223e-03, -5.532414707022294e+00, -5.533437131250137e+00, -5.532550743580476e+00, -5.533450301130571e+00, -5.532886935469479e+00, -5.532886935469479e+00, -2.105688228383923e+00, -2.120290824843820e+00, -2.102689448990526e+00, -2.115438039429604e+00, -2.115350127089032e+00, -2.115350127089032e+00, -5.982923421575677e-01, -6.133715889653604e-01, -5.454123197912955e-01, -5.372136862893225e-01, -6.074045237675216e-01, -6.074045237675216e-01, -1.509561866370299e-01, -2.381279545449693e-01, -1.405424969165339e-01, -1.813912759849280e+00, -1.679541977260495e-01, -1.679541977260495e-01, -4.501092174754964e-03, -5.699392574836056e-03, -4.364675792400219e-03, -9.508955156826487e-02, -5.482775671063140e-03, -5.482775671063142e-03, -5.848888977311955e-01, -6.036563069880995e-01, -5.997824067542962e-01, -5.947860535552888e-01, -5.975302605693711e-01, -5.975302605693711e-01, -5.467050548686595e-01, -5.246353814189539e-01, -5.446314232385162e-01, -5.619833909167267e-01, -5.534222537788078e-01, -5.534222537788078e-01, -6.402624477587936e-01, -2.745656330420649e-01, -3.033049527149942e-01, -3.637757540561843e-01, -3.295662066640664e-01, -3.295662066640666e-01, -4.769358680847956e-01, -5.610195407095909e-02, -7.652560883223064e-02, -3.460501185322108e-01, -1.205927689107318e-01, -1.205927689107318e-01, -1.425425101214373e-02, -1.523316300276004e-03, -3.203544973302094e-03, -1.134562785911337e-01, -5.034982857663592e-03, -5.034982857663587e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_rtpss_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rtpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.763108005743462e+01, -2.763207960683822e+01, -2.763114847338818e+01, -2.763212920472910e+01, -2.763156100642894e+01, -2.763266606911419e+01, -2.763079353030611e+01, -2.763168649714881e+01, -2.763111506051300e+01, -2.763221978577762e+01, -2.763111506051300e+01, -2.763221978577762e+01, -4.172829879401466e+00, -4.172679264824481e+00, -4.172888080585876e+00, -4.172708033191696e+00, -4.173932876582646e+00, -4.174146544126057e+00, -4.174190385492237e+00, -4.174185670122608e+00, -4.172037508949517e+00, -4.175214187519757e+00, -4.172037508949517e+00, -4.175214187519757e+00, -7.758993505914016e-01, -7.823905694395419e-01, -7.734898147048244e-01, -7.814918773489236e-01, -7.395244197610666e-01, -7.274605009072449e-01, -7.409768531367212e-01, -7.452129833823145e-01, -7.932722554593101e-01, -6.768998868849657e-01, -7.932722554593101e-01, -6.768998868849657e-01, -1.591567421126486e-01, -1.703737985473298e-01, -1.624945295527375e-01, -1.763651378276340e-01, -9.047778129752775e-01, -9.533696209838508e-01, -1.461669140487173e-01, -1.470737207609755e-01, -1.665345707731090e-01, -1.687010681321679e-01, -1.665345707731089e-01, -1.687010681321677e-01, -1.303761629899009e-02, -1.385400848819942e-02, -1.366186325065716e-02, -1.463530105325926e-02, -7.596593310443676e-02, -8.022113755955257e-02, -7.837274757367561e-03, -7.706682731293256e-03, -1.163080014436929e-02, -6.618657626552290e-03, -1.163080014436929e-02, -6.618657626552290e-03, -6.723035407537342e+00, -6.721857131642859e+00, -6.722288246784034e+00, -6.721135979064027e+00, -6.723149218418087e+00, -6.721944185595635e+00, -6.722502988504686e+00, -6.721284000262027e+00, -6.722536306915901e+00, -6.721476522823802e+00, -6.722536306915901e+00, -6.721476522823802e+00, -2.403673942575863e+00, -2.405499763205022e+00, -2.438250040326114e+00, -2.439023520996178e+00, -2.376300072860000e+00, -2.386100331435305e+00, -2.407194346935435e+00, -2.417220342354550e+00, -2.441807882194386e+00, -2.425945830125460e+00, -2.441807882194386e+00, -2.425945830125460e+00, -7.218603374436384e-01, -7.211058881211418e-01, -7.859183849530322e-01, -7.864916463691701e-01, -6.408407210002852e-01, -6.697021622199545e-01, -6.820573911872368e-01, -7.045500457099685e-01, -7.542506166304053e-01, -7.105085448607854e-01, -7.542506166304052e-01, -7.105085448607853e-01, -1.817785445719818e-01, -1.812327254430205e-01, -1.678735029498674e-01, -1.681186405944450e-01, -1.729295193626708e-01, -1.769218621695567e-01, -2.377506860035053e+00, -2.376506377658201e+00, -1.691575238792760e-01, -1.463519549627667e-01, -1.691575238792760e-01, -1.463519549627667e-01, -5.879441569503017e-03, -6.110164258163266e-03, -7.540839044572501e-03, -7.654969939076097e-03, -5.638837180345527e-03, -5.971727633039896e-03, -1.262079509173526e-01, -1.269948630975670e-01, -5.759214710703059e-03, -7.909246535848055e-03, -5.759214710703061e-03, -7.909246535848059e-03, -7.276258003878252e-01, -7.305414956667656e-01, -7.253533737431562e-01, -7.281139643928288e-01, -7.242638545477834e-01, -7.270617232598601e-01, -7.244627554975770e-01, -7.272933893946715e-01, -7.241824266544006e-01, -7.270009161130403e-01, -7.241824266544006e-01, -7.270009161130403e-01, -7.171136737510991e-01, -7.194048721313524e-01, -6.374654979234446e-01, -6.406852950811764e-01, -6.677215029516274e-01, -6.706077202110841e-01, -6.809626375802731e-01, -6.832000806224844e-01, -6.750935936081895e-01, -6.778891644560952e-01, -6.750935936081895e-01, -6.778891644560953e-01, -8.231733544153995e-01, -8.248802328584546e-01, -2.051507847348909e-01, -2.066922060997731e-01, -2.713157009933541e-01, -2.769337561088341e-01, -4.185045910376100e-01, -4.207150336305550e-01, -3.507549547563268e-01, -3.511859479149390e-01, -3.507549547563269e-01, -3.511859479149391e-01, -5.623691554811546e-01, -5.690284002624822e-01, -7.454496921851339e-02, -7.505502475356965e-02, -1.002729134848730e-01, -1.036292783368747e-01, -4.039427543338364e-01, -4.181976814183332e-01, -1.519756221300015e-01, -1.529176826993514e-01, -1.519756221300014e-01, -1.529176826993514e-01, -1.864956171239904e-02, -1.932569049950109e-02, -2.028762023808494e-03, -2.033398898287572e-03, -4.128061189754679e-03, -4.390526307869538e-03, -1.463450015274062e-01, -1.482184305691188e-01, -5.455199472438233e-03, -7.249407432700401e-03, -5.455199472438227e-03, -7.249407432700393e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rtpss_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rtpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.120871233945806e-08, 0.000000000000000e+00, -3.121007416503801e-08, -3.120979546105481e-08, 0.000000000000000e+00, -3.121086030707907e-08, -3.121134795226348e-08, 0.000000000000000e+00, -3.121362206917310e-08, -3.119917765712075e-08, 0.000000000000000e+00, -3.119808633457561e-08, -3.120945907304480e-08, 0.000000000000000e+00, -3.120288692144930e-08, -3.120945907304480e-08, 0.000000000000000e+00, -3.120288692144930e-08, -2.678881647139230e-05, 0.000000000000000e+00, -2.678854808636842e-05, -2.679504803888145e-05, 0.000000000000000e+00, -2.679305074859117e-05, -2.692128901572665e-05, 0.000000000000000e+00, -2.694390494817307e-05, -2.684785944010379e-05, 0.000000000000000e+00, -2.685070883498855e-05, -2.679172059875378e-05, 0.000000000000000e+00, -2.696221441863245e-05, -2.679172059875378e-05, 0.000000000000000e+00, -2.696221441863245e-05, -1.162877124266906e-02, 0.000000000000000e+00, -1.148501858583192e-02, -1.169723032086100e-02, 0.000000000000000e+00, -1.150390139339483e-02, -1.250841124337894e-02, 0.000000000000000e+00, -1.283423580982320e-02, -1.253070647314508e-02, 0.000000000000000e+00, -1.250278630634291e-02, -1.096747408149382e-02, 0.000000000000000e+00, -1.338157687218529e-02, -1.096747408149382e-02, 0.000000000000000e+00, -1.338157687218529e-02, -1.981652189884243e+00, 0.000000000000000e+00, -1.727901374017327e+00, -1.937813947779415e+00, 0.000000000000000e+00, -1.644887533486871e+00, -4.401665441163422e-03, 0.000000000000000e+00, -3.622816533443043e-03, -3.073062725406666e+00, 0.000000000000000e+00, -2.967880539233994e+00, -1.692089776180822e+00, 0.000000000000000e+00, -2.633069349053922e+00, -1.692089776180822e+00, 0.000000000000000e+00, -2.633069349053929e+00, 0.000000000000000e+00, 0.000000000000000e+00, -4.496083912304301e-292, -4.366714905350089e-291, 0.000000000000000e+00, -1.256165866099433e-253, -1.303773711780525e-09, 0.000000000000000e+00, -2.428220652841560e-08, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.404970319435044e-05, 0.000000000000000e+00, -1.405980175622434e-05, -1.419915261931481e-05, 0.000000000000000e+00, -1.420434531023519e-05, -1.405841307608884e-05, 0.000000000000000e+00, -1.406507398278617e-05, -1.418660361443765e-05, 0.000000000000000e+00, -1.419634077034462e-05, -1.412562948599105e-05, 0.000000000000000e+00, -1.413208530573215e-05, -1.412562948599105e-05, 0.000000000000000e+00, -1.413208530573215e-05, -1.336254760228148e-04, 0.000000000000000e+00, -1.331111617730511e-04, -1.284841274984905e-04, 0.000000000000000e+00, -1.281587922763259e-04, -1.316933382645833e-04, 0.000000000000000e+00, -1.317552646893007e-04, -1.269623974954240e-04, 0.000000000000000e+00, -1.269527223849652e-04, -1.326041988459300e-04, 0.000000000000000e+00, -1.307066058520885e-04, -1.326041988459300e-04, 0.000000000000000e+00, -1.307066058520885e-04, -4.353988435817621e-02, 0.000000000000000e+00, -4.425662754213575e-02, -5.130618610530688e-02, 0.000000000000000e+00, -5.309751578381073e-02, -4.957758347712495e-02, 0.000000000000000e+00, -4.891280247025702e-02, -4.316975079488975e-02, 0.000000000000000e+00, -4.683764489670735e-02, -4.298945265803121e-02, 0.000000000000000e+00, -4.911510945671068e-02, -4.298945265803125e-02, 0.000000000000000e+00, -4.911510945671069e-02, -1.270018446615466e+00, 0.000000000000000e+00, -1.395028712962583e+00, -1.390374236695022e+00, 0.000000000000000e+00, -1.375494381583870e+00, -9.009441454909249e-01, 0.000000000000000e+00, -1.190458056364168e+00, -3.255529304139985e-04, 0.000000000000000e+00, -3.261391167739151e-04, -2.748071084758655e+00, 0.000000000000000e+00, -4.118240478983341e+00, -2.748071084758655e+00, 0.000000000000000e+00, -4.118240478983341e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -6.018815123995579e-02, 0.000000000000000e+00, -5.511385483265858e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -3.678082337290076e-01, 0.000000000000000e+00, -3.720035752608339e-01, -2.059342026844091e-01, 0.000000000000000e+00, -2.074170870552302e-01, -2.497750128349602e-01, 0.000000000000000e+00, -2.521775216934687e-01, -2.974813559693775e-01, 0.000000000000000e+00, -2.998163037329760e-01, -2.721978283860134e-01, 0.000000000000000e+00, -2.745725684675363e-01, -2.721978283860134e-01, 0.000000000000000e+00, -2.745725684675361e-01, -2.133441282020558e-01, 0.000000000000000e+00, -2.190444159036399e-01, -3.929577823845994e-02, 0.000000000000000e+00, -3.910499190127428e-02, -5.464184663176329e-02, 0.000000000000000e+00, -5.496904088172293e-02, -9.889127941396593e-02, 0.000000000000000e+00, -9.858423766731662e-02, -7.191141454411337e-02, 0.000000000000000e+00, -7.158340437276996e-02, -7.191141454411337e-02, 0.000000000000000e+00, -7.158340437276996e-02, -3.443826077657202e-02, 0.000000000000000e+00, -3.629894096551473e-02, -7.051383487050290e-01, 0.000000000000000e+00, -6.931469108963362e-01, -3.848085270136656e-01, 0.000000000000000e+00, -3.708539912192325e-01, -1.811542445996120e-01, 0.000000000000000e+00, -1.789394046000694e-01, -2.342059979506386e-01, 0.000000000000000e+00, -2.350612123476106e-01, -2.342059979506386e-01, 0.000000000000000e+00, -2.350612123476108e-01, -6.397472836962688e-02, 0.000000000000000e+00, -6.265758230666590e-02, -1.098183936271365e-10, 0.000000000000000e+00, -1.685558253913185e-10, -5.390096575294082e-05, 0.000000000000000e+00, -1.772011113132260e-04, -2.752343397984162e-01, 0.000000000000000e+00, -2.629483934676177e-01, -8.154647183961742e-01, 0.000000000000000e+00, -1.958868864692402e+00, -8.154647183961774e-01, 0.000000000000000e+00, -1.958868864692407e+00, -2.928135906443130e-178, 0.000000000000000e+00, -6.533280394017285e-164, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -7.913956708727351e-01, 0.000000000000000e+00, -8.562645418872236e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rtpss_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rtpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rtpss_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rtpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.174547288299164e-03, 2.175397641658143e-03, 2.174653622011504e-03, 2.175474780010742e-03, 2.174960655906420e-03, 2.175924288870881e-03, 2.173769019318966e-03, 2.174401848790736e-03, 2.174615599262369e-03, 2.174985180599928e-03, 2.174615599262369e-03, 2.174985180599928e-03, 2.969161355894479e-03, 2.963847157622683e-03, 2.970711317174240e-03, 2.964459317715946e-03, 2.996324700889901e-03, 2.999749254589366e-03, 3.005333686620191e-03, 3.001313202851310e-03, 2.966610404848405e-03, 3.024795825734589e-03, 2.966610404848405e-03, 3.024795825734589e-03, 4.419663818852060e-03, 4.385564521347031e-03, 4.443948780045963e-03, 4.381225540006200e-03, 4.425573301199168e-03, 4.527426464957503e-03, 5.013721198766062e-03, 5.129514554222067e-03, 3.998937394693942e-03, 4.311245867407919e-03, 3.998937394693942e-03, 4.311245867407919e-03, 4.513708459592942e-03, 4.726665659493064e-03, 5.210753871256892e-03, 5.640903776983121e-03, 6.714179161341180e-04, 6.411221391391997e-04, 6.854222557426854e-04, 7.534452384245708e-04, 4.695616831700441e-03, 6.527060120133285e-05, 4.695616831700437e-03, 6.527060120133323e-05, 0.000000000000000e+00, 5.105940853531827e-305, 8.491724749910670e-305, 6.185209611008372e-267, 9.696772258393002e-18, 2.449560511355407e-16, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.559882927774301e-02, 1.560709412103103e-02, 1.577484636794450e-02, 1.577733751820978e-02, 1.561240392085511e-02, 1.561569398386297e-02, 1.576330229605738e-02, 1.577021090226286e-02, 1.568572119582489e-02, 1.569180597286032e-02, 1.568572119582489e-02, 1.569180597286032e-02, 3.326495430150247e-03, 3.322367413177941e-03, 3.417713876248928e-03, 3.411986060995419e-03, 2.989809966033653e-03, 3.082682997047343e-03, 3.055448842912430e-03, 3.149566220216004e-03, 3.640327937663582e-03, 3.406009019603956e-03, 3.640327937663582e-03, 3.406009019603956e-03, 3.632181547163534e-02, 3.736776996544128e-02, 3.192748391062707e-02, 3.350660390796770e-02, 2.146145888707723e-02, 2.760886653151194e-02, 1.087827007768661e-02, 1.615768286119700e-02, 4.342529003776886e-02, 3.770013853257809e-02, 4.342529003776886e-02, 3.770013853257809e-02, 1.293853168825913e-05, 1.592236231903812e-05, 1.548391670886135e-03, 1.585792157473907e-03, 4.925086722331054e-06, 9.182564267409220e-06, 3.484644631191980e-03, 3.485586222601033e-03, 1.116519200956620e-04, 4.260769647153525e-04, 1.116519200956621e-04, 4.260769647153532e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 3.063100141572909e-08, 2.258576147478469e-08, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 3.224830377739222e-01, 3.299649129818905e-01, 2.451927447629673e-01, 2.504637571689038e-01, 2.810338352812742e-01, 2.876661396103283e-01, 3.102934901158386e-01, 3.172068373452065e-01, 2.961528192200544e-01, 3.029579868593921e-01, 2.961528192200544e-01, 3.029579868593918e-01, 7.708948096786174e-02, 8.123473507894124e-02, 2.615545056096485e-02, 2.665978974818444e-02, 4.834110575578671e-02, 4.951144949834693e-02, 9.527608653494228e-02, 9.600814135478394e-02, 6.701267206452084e-02, 6.787744498812835e-02, 6.701267206452083e-02, 6.787744498812834e-02, 2.213581987794539e-02, 2.406879573031403e-02, 2.953326402638940e-03, 3.042068985356768e-03, 6.872641181160440e-03, 7.287123538583465e-03, 2.497598879165649e-02, 2.505202467924160e-02, 1.459292769411732e-02, 1.481266465487011e-02, 1.459292769411732e-02, 1.481266465487014e-02, 2.479869723174628e-02, 2.578577282934690e-02, 5.308254335499925e-19, 7.964616465808101e-19, 2.974609021210122e-12, 1.249511489140465e-11, 3.559963608295254e-02, 4.292673746972486e-02, 1.905549365282578e-06, 8.936270175028604e-06, 1.905549365282589e-06, 8.936270175028648e-06, 2.448745931344111e-190, 7.418451432604765e-176, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.510712738483338e-06, 3.843611536198153e-06, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
