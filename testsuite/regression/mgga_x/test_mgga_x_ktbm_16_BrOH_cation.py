
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_16_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_16", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.148377149790101e+01, -2.148389564641931e+01, -2.148444023046809e+01, -2.301477261934788e+01, -2.301553370741635e+01, -2.454767036924255e+01, -3.507659992716793e+00, -3.925151104626254e+00, -3.926912490237155e+00, -3.926557865630662e+00, -3.926186854202520e+00, -3.509027316322526e+00, -5.738748051390730e-01, -6.448193059935308e-01, -6.862253181441300e-01, -6.288713796460396e-01, -5.639720680882274e-01, -6.960785517137840e-01, -1.660606072298164e-01, -1.691113087909403e-01, -7.316720859743356e-01, -1.286591829360943e-01, -1.692259380338198e-01, -1.688696577266259e-01, -5.710285469254210e-03, -6.031328010548652e-03, -3.324128276727430e-02, -3.292070699944553e-03, -4.595436216614271e-03, -4.595436216614272e-03, -5.959017384689087e+00, -5.959513558371890e+00, -5.959037586260894e+00, -5.959475934439729e+00, -5.683809693098870e+00, -5.684056248149421e+00, -2.180379790075357e+00, -2.202430910667847e+00, -2.163829280055063e+00, -2.183538430679161e+00, -1.964136177269760e+00, -2.200609152397102e+00, -6.137234647520251e-01, -7.321179426934884e-01, -6.172089814692298e-01, -6.483991427436659e-01, -6.316840056048203e-01, -6.862767459775347e-01, -8.755082828788815e-02, -1.635096411580470e-01, -8.095543378400721e-02, -2.208215412661720e+00, -1.041871595405899e-01, -1.041871595405899e-01, -2.549866398937675e-03, -3.218190582584400e-03, -2.464575588845474e-03, -5.375471221532750e-02, -3.095947736530697e-03, -3.095947736530698e-03, -6.657332121084699e-01, -6.658500456422696e-01, -6.362905541208850e-01, -6.534861866451831e-01, -6.387364014893535e-01, -6.522620106717223e-01, -6.482584010894360e-01, -5.067114948493006e-01, -5.443368112203929e-01, -6.185035108226342e-01, -6.062192337989137e-01, -5.629481748145657e-01, -7.168486391393462e-01, -2.242353810259932e-01, -2.522156389740868e-01, -3.452087004792152e-01, -3.288389548022413e-01, -2.941035261700322e-01, -5.129065491059276e-01, -3.179173033543471e-02, -4.336694420822809e-02, -3.796894169030771e-01, -6.931008357911243e-02, -6.931008357911245e-02, -8.104195149825954e-03, -8.601293722367489e-04, -1.821717048354713e-03, -6.351809443652967e-02, -2.843078719266933e-03, -2.858161242657952e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_16_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_16", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.209860493653510e+01, -3.209875734470529e+01, -3.209873708369008e+01, -3.209885329208241e+01, -3.209916963089093e+01, -3.209947024734131e+01, -3.209767881594959e+01, -2.911356285332835e+01, -3.209868399227411e+01, -2.911441174048080e+01, -2.911466555558643e+01, -2.911441174048080e+01, -4.645622192691206e+00, -4.645297943883941e+00, -4.645618097348620e+00, -4.645567399631090e+00, -4.645517377272869e+00, -4.645548117229310e+00, -4.645945685250022e+00, -4.646010399747330e+00, -4.644886848224338e+00, -4.646006776819084e+00, -4.644136229372087e+00, -4.646006776819084e+00, -7.580813568081944e-01, -7.645362660314008e-01, -7.559462593994695e-01, -8.915270955288841e-01, -8.628361186279501e-01, -8.559282784618601e-01, -8.679906932277657e-01, -7.390249888759355e-01, -7.727427581338092e-01, -6.990021243141699e-01, -8.997389664332583e-01, -8.316670066922526e-01, -1.853285243073447e-01, -2.299254685960928e-01, -1.876323380088400e-01, -2.347803080636038e-01, -9.870014317267150e-01, -8.679485613446454e-01, -1.625735612721007e-01, -1.654098032046504e-01, -2.290882973030375e-01, -1.169719410792969e-01, -2.290882973030374e-01, -1.149119254003887e-01, -7.128363671306854e-03, -7.574765557213503e-03, -7.766189202184508e-03, -8.001989141187965e-03, -4.285726063139710e-02, -4.390581766544727e-02, -4.284949838263726e-03, -4.213548645513976e-03, -6.359129575735371e-03, -3.618685954888100e-03, -6.359129575735372e-03, -3.618685954888102e-03, -7.242979523636646e+00, -7.241264205369736e+00, -7.247482233475177e+00, -7.245614486579876e+00, -7.243281132894407e+00, -7.241450853516933e+00, -7.247142605992589e+00, -7.245400799784331e+00, -7.862558315830414e+00, -7.243441134794012e+00, -7.245245043667108e+00, -7.860638110696862e+00, -2.620153720460388e+00, -2.619954379136752e+00, -2.638667238695414e+00, -2.637884528698445e+00, -2.604420810069879e+00, -2.608772089535366e+00, -2.620657270846791e+00, -2.625126373049385e+00, -2.642064022045512e+00, -2.520233797757619e+00, -2.642064022045512e+00, -2.630967518541615e+00, -7.837267055974747e-01, -8.502513115409525e-01, -8.705091053751514e-01, -8.728000702181359e-01, -7.115919203276544e-01, -7.363502648259287e-01, -7.398987266005872e-01, -7.662736829669459e-01, -8.184644630219657e-01, -8.440990230576710e-01, -8.184644630219656e-01, -7.749474415731923e-01, -1.117187131657292e-01, -1.128020360625921e-01, -1.917830578143174e-01, -2.201926182413945e-01, -1.009008389009799e-01, -1.064342542174506e-01, -2.571491508953089e+00, -2.570395797314295e+00, -1.285035415316664e-01, -1.369319836770372e-01, -1.285035415316666e-01, -1.369319836770373e-01, -3.343298350353268e-03, -3.340650870174359e-03, -4.122872063658729e-03, -4.185270508635907e-03, -3.082988869630527e-03, -3.265002791370688e-03, -6.930726404177476e-02, -7.059005284147343e-02, -3.148777982483884e-03, -4.324351461031522e-03, -3.148777982483886e-03, -4.324351461031526e-03, -8.597203396367182e-01, -8.635816542542789e-01, -8.375409247858767e-01, -8.414953235631227e-01, -8.827373701042025e-01, -8.860663808860886e-01, -8.833214291333252e-01, -8.553972980952770e-01, -8.830442602378972e-01, -8.863638457107187e-01, -8.830442602378972e-01, -8.521825136472359e-01, -8.341746715349622e-01, -8.375292268080763e-01, -6.546860719244585e-01, -6.956120740429588e-01, -6.888708712614520e-01, -7.618228842337710e-01, -7.363971368462334e-01, -7.393303421454361e-01, -7.102227099939400e-01, -7.132395436271769e-01, -7.102227099939401e-01, -7.884929727862109e-01, -9.026594111638641e-01, -1.001968655748833e+00, -2.824033894065685e-01, -2.842251861411566e-01, -2.912170228118909e-01, -3.491130098904104e-01, -4.392679066529694e-01, -4.667370468006478e-01, -4.040349232351939e-01, -4.039485119628189e-01, -4.040349232351938e-01, -3.587583400625816e-01, -6.033149603685650e-01, -6.071302510335360e-01, -4.205961648426045e-02, -4.234622167808198e-02, -5.490828839064917e-02, -5.675489740822021e-02, -4.444146666342787e-01, -4.501633394887239e-01, -8.626799310641767e-02, -9.123917443386259e-02, -8.626799310641776e-02, -9.123917443386263e-02, -1.060040728329195e-02, -1.098437353563009e-02, -1.109193250243263e-03, -1.111728389418618e-03, -2.347389033441633e-03, -2.496617251243597e-03, -8.232642951526126e-02, -8.339309597454496e-02, -2.982570592622512e-03, -3.963573502542839e-03, -2.982570592622510e-03, -4.121771993169349e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_16_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_16", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.626394439052907e-08, 0.000000000000000e+00, -3.626685033496306e-08, -3.626387487023035e-08, 0.000000000000000e+00, -3.626679923621005e-08, -3.626341025095818e-08, 0.000000000000000e+00, -3.626620064399839e-08, -3.626422778484601e-08, 0.000000000000000e+00, -4.134975026124559e-08, -3.626392546721634e-08, 0.000000000000000e+00, -4.134826454382389e-08, -4.134549133697184e-08, 0.000000000000000e+00, -4.134826454382389e-08, -3.545133953722374e-05, 0.000000000000000e+00, -2.773362717089581e-05, -3.546024190622676e-05, 0.000000000000000e+00, -3.545156836671279e-05, -3.563393531568328e-05, 0.000000000000000e+00, -3.566352410572858e-05, -3.555878762196060e-05, 0.000000000000000e+00, -3.555703636009087e-05, -3.545422188822765e-05, 0.000000000000000e+00, -3.571086219716497e-05, -2.773913241788568e-05, 0.000000000000000e+00, -3.571086219716497e-05, -7.810143671587868e-03, 0.000000000000000e+00, -8.040000166961455e-03, -7.756544700605248e-03, 0.000000000000000e+00, -1.112942641027853e-02, -9.922326083496063e-03, 0.000000000000000e+00, -9.864355444211043e-03, -1.045698916698102e-02, 0.000000000000000e+00, -7.572391786509735e-03, -8.022914587542996e-03, 0.000000000000000e+00, -6.513281763145192e-03, -1.110799663649375e-02, 0.000000000000000e+00, -9.566294202665197e-03, -7.464577490976489e-01, 0.000000000000000e+00, -1.345815930454189e+00, -7.742508089424964e-01, 0.000000000000000e+00, -1.381382958355676e+00, -2.388702487432260e-03, 0.000000000000000e+00, -1.838941435031807e-03, -7.890471279894682e-01, 0.000000000000000e+00, -9.271952888821632e-01, -1.027268306869870e+00, 0.000000000000000e+00, -8.179799727314024e-01, -1.027268306869870e+00, 0.000000000000000e+00, 2.055547457683031e-01, -2.014824456623440e+02, 0.000000000000000e+00, -1.789280032617249e+02, 2.675477896985495e+02, 0.000000000000000e+00, -1.641401779792456e+02, 5.392441410387911e+00, 0.000000000000000e+00, -4.368405226200040e+00, -4.750781949059693e+02, 0.000000000000000e+00, -4.937989232511938e+02, -2.464188425934101e+02, 0.000000000000000e+00, -9.928973803986130e+02, -2.464188425934101e+02, 0.000000000000000e+00, -9.928973803986134e+02, -1.242365844994656e-05, 0.000000000000000e+00, -1.243564375118459e-05, -1.242622291691348e-05, 0.000000000000000e+00, -1.243812898331567e-05, -1.242392189011573e-05, 0.000000000000000e+00, -1.243581670392903e-05, -1.242611544662668e-05, 0.000000000000000e+00, -1.243806740205142e-05, -1.128450988743577e-05, 0.000000000000000e+00, -1.243688678043789e-05, -1.242489402762156e-05, 0.000000000000000e+00, -1.129531406960473e-05, -2.913107922049001e-04, 0.000000000000000e+00, -2.926158500571760e-04, -2.948611312695920e-04, 0.000000000000000e+00, -2.960301189076923e-04, -2.872958822150812e-04, 0.000000000000000e+00, -2.897480048029925e-04, -2.908627674405154e-04, 0.000000000000000e+00, -2.932311205224618e-04, -2.961342132644397e-04, 0.000000000000000e+00, -2.268609166990495e-04, -2.961342132644397e-04, 0.000000000000000e+00, -2.949793550506585e-04, -5.950613584747422e-02, 0.000000000000000e+00, -5.005015264975657e-02, -5.262660085790465e-02, 0.000000000000000e+00, -5.293848561851411e-02, -6.629669465612599e-02, 0.000000000000000e+00, -6.608545261679723e-02, -7.292476234646576e-02, 0.000000000000000e+00, -6.843234272380223e-02, -5.501598032209454e-02, 0.000000000000000e+00, -5.247123250394396e-02, -5.501598032209457e-02, 0.000000000000000e+00, -6.351633003157466e-02, -9.993715739118360e-01, 0.000000000000000e+00, -9.867553857262371e-01, -2.833526378022792e-01, 0.000000000000000e+00, -5.746095864441464e-01, -1.119962480482074e+00, 0.000000000000000e+00, -1.104342179667831e+00, -5.630433027402186e-04, 0.000000000000000e+00, -5.642223657986299e-04, -1.114562075977415e+00, 0.000000000000000e+00, -1.430525275656855e+00, -1.114562075977415e+00, 0.000000000000000e+00, -1.430525275656856e+00, 1.038596448282094e+03, 0.000000000000000e+00, -6.388234310549896e+02, -4.996953034904678e+02, 0.000000000000000e+00, -4.552335451979608e+02, -2.400284004752286e+03, 0.000000000000000e+00, -2.243292776568960e+03, -2.128389473672652e+00, 0.000000000000000e+00, 1.609664628851847e+00, -9.973446803804925e+02, 0.000000000000000e+00, -9.450508766543895e+02, -9.973446803804919e+02, 0.000000000000000e+00, -9.450508766543896e+02, -8.155452105894846e-02, 0.000000000000000e+00, -8.034730292132269e-02, -8.174620154346969e-02, 0.000000000000000e+00, -8.056122780002038e-02, -7.801991776536801e-02, 0.000000000000000e+00, -7.696079909393476e-02, -7.858142840175891e-02, 0.000000000000000e+00, -8.047471523489885e-02, -7.830296687805842e-02, 0.000000000000000e+00, -7.722794360717201e-02, -7.830296687805842e-02, 0.000000000000000e+00, -8.050898232873115e-02, -9.069628987976477e-02, 0.000000000000000e+00, -8.956310149130696e-02, -1.083752674788186e-01, 0.000000000000000e+00, -8.650684060526324e-02, -1.089508394338925e-01, 0.000000000000000e+00, -9.056415705621851e-02, -1.047644873293798e-01, 0.000000000000000e+00, -1.034651253682376e-01, -1.074857461820902e-01, 0.000000000000000e+00, -1.062454824387669e-01, -1.074857461820902e-01, 0.000000000000000e+00, -9.147016802246632e-02, -4.163798871387837e-02, 0.000000000000000e+00, -3.649645642890787e-02, -4.504810948261104e-01, 0.000000000000000e+00, -4.487163709017417e-01, -2.659899138902658e-01, 0.000000000000000e+00, -3.850524182626855e-01, -2.219591577776770e-01, 0.000000000000000e+00, -2.845078944753637e-01, -3.613849969748087e-01, 0.000000000000000e+00, -3.650461673548471e-01, -3.613849969748091e-01, 0.000000000000000e+00, -2.712193957668142e-01, -1.268937177400963e-01, 0.000000000000000e+00, -1.279658639592692e-01, 5.753298166065254e+00, 0.000000000000000e+00, 5.616151130096301e+00, -2.738166430652822e+00, 0.000000000000000e+00, -2.655555290432344e+00, -4.177238238303924e-01, 0.000000000000000e+00, -4.532820419151370e-01, -1.856817991181439e+00, 0.000000000000000e+00, -2.051539046125057e+00, -1.856817991181440e+00, 0.000000000000000e+00, -2.051539046125060e+00, 9.783182226742319e+01, 0.000000000000000e+00, 9.041054491672797e+01, -7.390481481736933e+03, 0.000000000000000e+00, -7.340625099283155e+03, 4.295558337546214e+03, 0.000000000000000e+00, 3.908169849695932e+03, 9.417365460490420e-01, 0.000000000000000e+00, 8.703045672858803e-01, -1.786756703394274e+03, 0.000000000000000e+00, -1.144727329458945e+03, -1.786756703394277e+03, 0.000000000000000e+00, 1.646976672101047e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_16_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_16", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.024877820801251e-03, 2.025093187342593e-03, 2.024902508623754e-03, 2.025111075729384e-03, 2.024968481349333e-03, 2.025209202178050e-03, 2.024692054383441e-03, 2.996094786972626e-03, 2.024894008626971e-03, 2.996033151924593e-03, 2.995996771407721e-03, 2.996033151924593e-03, 1.450983412157216e-02, 3.947235886159012e-03, 1.451255649220666e-02, 1.450955952194190e-02, 1.456540031693060e-02, 1.457467646065797e-02, 1.454499143976039e-02, 1.454485959587153e-02, 1.450608952023168e-02, 1.459207159202984e-02, 3.944117968217515e-03, 1.459207159202984e-02, -5.296051984680375e-04, -2.016022885260412e-04, -6.195945079660323e-04, 3.665373263601707e-02, 3.044342496781087e-02, 2.966202640288640e-02, 3.239624499535326e-02, -1.144832644085722e-03, 2.424818017035319e-05, -2.317179171955422e-03, 3.745013081442596e-02, 2.677575735554887e-02, -1.003251850166221e-02, 8.103763983159866e-02, -9.978631078832132e-03, 8.769817956690010e-02, 1.180381133181656e-02, -2.156339964201602e-03, 1.796242128748408e-02, 2.226709856535478e-02, 6.256941524060550e-02, 6.656685896203049e-03, 6.256941524060540e-02, -1.551131117440863e-03, 3.192243973803841e-04, 3.402394144371502e-04, -1.339935772752688e-06, 3.680785230568370e-04, -1.090710621740391e-04, 1.689302699636220e-03, 1.632728295293457e-04, 1.613609626266487e-04, 2.770569762739043e-04, 2.055346147308116e-04, 2.770569762739043e-04, 2.055346147308126e-04, 1.214370563537975e-02, 1.214658592649962e-02, 1.213672601246254e-02, 1.213983978364351e-02, 1.214324086719337e-02, 1.214629835217390e-02, 1.213725515024017e-02, 1.214017294361067e-02, 9.400508862349211e-03, 1.214321436914688e-02, 1.214019754136755e-02, 9.402589815968827e-03, 2.221521318104745e-02, 2.229335707499488e-02, 2.280022622029773e-02, 2.285849950335926e-02, 2.165662048737493e-02, 2.189513777701479e-02, 2.219682616094775e-02, 2.243309746449275e-02, 2.294670355814372e-02, 4.509354819724038e-03, 2.294670355814372e-02, 2.265719103828068e-02, 1.038107213023815e-01, 4.980082947730433e-02, 1.003740951181504e-01, 1.002549213776327e-01, 9.679945514093986e-02, 1.024518236736183e-01, 1.086615366810507e-01, 1.082462563982673e-01, 1.028440827766627e-01, 5.118983426745895e-02, 1.028440827766627e-01, 1.058568498481289e-01, 7.091082649763533e-03, 7.215964263533593e-03, -7.203134783395814e-03, 3.225957812920022e-02, 5.771014279102306e-03, 6.745427560098160e-03, 3.270669932698411e-02, 3.272441434283713e-02, 1.236406504133977e-02, 1.943507027226900e-02, 1.236406504133984e-02, 1.943507027226902e-02, -5.476421877418954e-08, 1.040052219934332e-04, 1.529645926311825e-04, 1.457750905666379e-04, 3.073135076709324e-04, 3.411938209432160e-04, 3.398324218983433e-03, -6.099721781717202e-04, 1.359823087576805e-04, 3.340443480302486e-04, 1.359823087576817e-04, 3.340443480302517e-04, 1.012482643199160e-01, 1.007682540699426e-01, 1.046900631160309e-01, 1.041744484513994e-01, 9.319943937654934e-02, 9.299186199313952e-02, 9.414328556612721e-02, 1.020452548606896e-01, 9.368234572746886e-02, 9.345234333744382e-02, 9.368234572746886e-02, 1.025429147358429e-01, 1.044796813644644e-01, 1.040304221888850e-01, 1.169358713554274e-01, 4.557725419727219e-02, 1.219645129677848e-01, 6.590862662461881e-02, 1.188524337464860e-01, 1.184128088104212e-01, 1.213918559408281e-01, 1.209922753327831e-01, 1.213918559408280e-01, 7.497143585004637e-02, 9.569026489419614e-02, 6.165389159759291e-02, 5.135308249978809e-02, 5.206622571311693e-02, -4.358353560314308e-03, 7.792907202054682e-02, 2.210352482283114e-02, 1.229939300628834e-01, 1.065335819228215e-01, 1.074120809012170e-01, 1.065335819228215e-01, 7.706216461216209e-03, 1.132425919346218e-01, 1.153351466789852e-01, -1.084967481708966e-04, -1.085240602895419e-04, 2.105358881889225e-03, 2.264749740405813e-03, 1.501574397218615e-01, 1.630668151365066e-01, 5.942769342970915e-03, 7.894995877585805e-03, 5.942769342970952e-03, 7.894995877585888e-03, -1.586494319229564e-06, -1.739873018060757e-06, 4.403158340009636e-05, 4.403511059152176e-05, -7.879805623942473e-08, -1.004392659157028e-07, -1.269136522143942e-03, -1.481592180108591e-03, 2.070707963893171e-04, 3.115098146252161e-04, 2.070707963893167e-04, -5.986248067596711e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
