
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_16_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_16", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.433867280550948e+01, -2.433874341138116e+01, -2.433918542532827e+01, -2.433813848174348e+01, -2.433866876639637e+01, -2.433866876639637e+01, -3.432455027485357e+00, -3.432557472079864e+00, -3.435559177371638e+00, -3.436937321753236e+00, -3.435485211834844e+00, -3.435485211834844e+00, -6.179984018844966e-01, -6.174729100376899e-01, -6.056654083179891e-01, -6.149106795424507e-01, -6.133648770023989e-01, -6.133648770023989e-01, -1.761328276092101e-01, -1.790514050659716e-01, -6.979027241269242e-01, -1.259013606850678e-01, -1.657515988076356e-01, -1.657515988076355e-01, -5.708311585532409e-03, -6.009713577523091e-03, -3.306864401981631e-02, -3.278756734197420e-03, -4.586320203194363e-03, -4.586320203194363e-03, -5.955282935268800e+00, -5.955821967506748e+00, -5.955380765528346e+00, -5.955853613967930e+00, -5.955519211330794e+00, -5.955519211330794e+00, -2.113299911381335e+00, -2.143331624977246e+00, -2.106315763751504e+00, -2.133659044177000e+00, -2.133236139777726e+00, -2.133236139777726e+00, -6.249032119998521e-01, -6.715961159672659e-01, -5.498725909675628e-01, -5.579655163388477e-01, -6.390630410480589e-01, -6.390630410480591e-01, -8.658936197216691e-02, -1.710754760856020e-01, -8.009198024430512e-02, -1.908896125934095e+00, -1.030652649174947e-01, -1.030652649174947e-01, -2.518510679612476e-03, -3.195058866600283e-03, -2.453434411516020e-03, -5.361318326676087e-02, -3.086934255685785e-03, -3.086934255685787e-03, -6.575742634736446e-01, -6.580488786429832e-01, -6.579635498280303e-01, -6.578193684935263e-01, -6.578951166229301e-01, -6.578951166229301e-01, -6.326260762011097e-01, -5.562214603894602e-01, -5.837589287653826e-01, -6.060815234303156e-01, -5.947002247343656e-01, -5.947002247343656e-01, -6.918911230243772e-01, -2.221103315204018e-01, -2.704908131101931e-01, -3.563099197587716e-01, -3.144795348752636e-01, -3.144795348752637e-01, -4.858988909593058e-01, -3.166643767916529e-02, -4.311490188327187e-02, -3.495541649382706e-01, -6.871683097997273e-02, -6.871683097997275e-02, -7.989534899684590e-03, -8.534406493543185e-04, -1.804552377006177e-03, -6.457762964417235e-02, -2.834251439897296e-03, -2.834251439897294e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_16_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_16", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.934823358292929e+01, -2.934772735533751e+01, -2.934837366831177e+01, -2.934782915541693e+01, -2.934871255417495e+01, -2.934834540314341e+01, -2.934712875468999e+01, -2.934632704191445e+01, -2.934832084009438e+01, -2.934705374584523e+01, -2.934832084009438e+01, -2.934705374584523e+01, -4.688425398314196e+00, -4.688196636583706e+00, -4.688617807728381e+00, -4.688316197498392e+00, -4.692306335908651e+00, -4.693010049602567e+00, -4.691437658797020e+00, -4.691492001973612e+00, -4.687247218781121e+00, -4.694884261932909e+00, -4.687247218781121e+00, -4.694884261932909e+00, -8.088285390179621e-01, -8.134548848532903e-01, -8.073198426338302e-01, -8.126256080308288e-01, -7.869608078138280e-01, -7.833253554260480e-01, -7.980218796561492e-01, -8.009709436487545e-01, -8.185207449834427e-01, -7.771798133546430e-01, -8.185207449834427e-01, -7.771798133546430e-01, -2.165755617916943e-01, -2.287951675604879e-01, -2.192038598749968e-01, -2.332559743015247e-01, -8.713388984800040e-01, -9.009553133697613e-01, -1.603411666728913e-01, -1.637278505412097e-01, -2.257018008214352e-01, -1.169391589327442e-01, -2.257018008214350e-01, -1.169391589327442e-01, -7.133579525120304e-03, -7.577144158593723e-03, -7.478728565835912e-03, -8.007447502802871e-03, -4.181248403203294e-02, -4.412058731729448e-02, -4.314260820752331e-03, -4.238359979834915e-03, -6.372999723001259e-03, -3.661501415374533e-03, -6.372999723001261e-03, -3.661501415374529e-03, -7.247735825441887e+00, -7.245747229266894e+00, -7.252190985171794e+00, -7.250051283726104e+00, -7.247926116625465e+00, -7.245853969168924e+00, -7.251750845466653e+00, -7.249765895928452e+00, -7.250059313404184e+00, -7.247914671109410e+00, -7.250059313404184e+00, -7.247914671109410e+00, -2.614467049269415e+00, -2.614844508210794e+00, -2.637055345650334e+00, -2.636578211339577e+00, -2.597278280418925e+00, -2.602482503446073e+00, -2.616915152174073e+00, -2.622231545333975e+00, -2.640680671256720e+00, -2.628229753091468e+00, -2.640680671256720e+00, -2.628229753091468e+00, -8.167756692416777e-01, -8.146307554090695e-01, -9.345350008528662e-01, -9.355906501254141e-01, -7.216073120918811e-01, -7.609105760467488e-01, -7.908858643254010e-01, -8.252955711737219e-01, -8.541153303986184e-01, -8.110108100043886e-01, -8.541153303986184e-01, -8.110108100043890e-01, -1.117794555891395e-01, -1.128454634396569e-01, -2.175275605180881e-01, -2.185625058640576e-01, -1.011273281132839e-01, -1.065448946348754e-01, -2.793006475536024e+00, -2.791928731922239e+00, -1.281457235168459e-01, -1.362764614815215e-01, -1.281457235168459e-01, -1.362764614815216e-01, -3.277412755713209e-03, -3.402922209969736e-03, -4.173646923818786e-03, -4.240711424686180e-03, -3.104671106181243e-03, -3.289024915824756e-03, -6.974659565519155e-02, -7.003321787283713e-02, -3.223592795840001e-03, -4.331181611755820e-03, -3.223592795840003e-03, -4.331181611755823e-03, -8.705777276332541e-01, -8.741946251166826e-01, -8.477630874035852e-01, -8.515074786450890e-01, -8.555140157225486e-01, -8.592684384048188e-01, -8.622003015175449e-01, -8.658216191203476e-01, -8.588363462584060e-01, -8.625220758116543e-01, -8.588363462584060e-01, -8.625220758116543e-01, -8.547761043466557e-01, -8.575150813433096e-01, -6.579661401076066e-01, -6.608599045984906e-01, -6.970614492754594e-01, -7.005613661935841e-01, -7.505100830795789e-01, -7.534460370020429e-01, -7.220718298442464e-01, -7.248047366070269e-01, -7.220718298442464e-01, -7.248047366070272e-01, -9.756905832945373e-01, -9.789374191708825e-01, -2.805636916792635e-01, -2.823031729893273e-01, -3.398773909102717e-01, -3.438850306548019e-01, -4.595094885582538e-01, -4.620395421914610e-01, -3.974447005932793e-01, -3.974113383512837e-01, -3.974447005932792e-01, -3.974113383512837e-01, -6.085064399704759e-01, -6.135309237057480e-01, -4.089581337316862e-02, -4.119751154435689e-02, -5.522956641389053e-02, -5.706715865522330e-02, -4.478403712491009e-01, -4.591519229597278e-01, -8.646640457199700e-02, -9.132472675673654e-02, -8.646640457199697e-02, -9.132472675673646e-02, -1.032792493031567e-02, -1.070962899103616e-02, -1.139974788473519e-03, -1.147034418084958e-03, -2.264969840801851e-03, -2.409301296807161e-03, -8.281792035382546e-02, -8.412129406196048e-02, -3.044974850778291e-03, -3.969991656949392e-03, -3.044974850778284e-03, -3.969991656949391e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_16_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_16", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.098585155197544e-08, 0.000000000000000e+00, -4.098945988828247e-08, -4.098564377423272e-08, 0.000000000000000e+00, -4.098930828910044e-08, -4.098492586988153e-08, 0.000000000000000e+00, -4.098829362255956e-08, -4.098730665966469e-08, 0.000000000000000e+00, -4.099131997685894e-08, -4.098574324851342e-08, 0.000000000000000e+00, -4.099006881569730e-08, -4.098574324851342e-08, 0.000000000000000e+00, -4.099006881569730e-08, -3.077404359955555e-05, 0.000000000000000e+00, -3.076353425710868e-05, -3.078282730445760e-05, 0.000000000000000e+00, -3.076889595919843e-05, -3.094888083104910e-05, 0.000000000000000e+00, -3.097599286991737e-05, -3.089978455961829e-05, 0.000000000000000e+00, -3.089356041071727e-05, -3.077468605333524e-05, 0.000000000000000e+00, -3.104137555498223e-05, -3.077468605333524e-05, 0.000000000000000e+00, -3.104137555498223e-05, -8.776108886507259e-03, 0.000000000000000e+00, -8.989589940634091e-03, -8.731526897080177e-03, 0.000000000000000e+00, -8.959039460070832e-03, -8.000860091545181e-03, 0.000000000000000e+00, -8.001103007161614e-03, -8.580054181435327e-03, 0.000000000000000e+00, -8.779719580454455e-03, -8.896581492640245e-03, 0.000000000000000e+00, -8.072253278293843e-03, -8.896581492640245e-03, 0.000000000000000e+00, -8.072253278293843e-03, -1.155651798942225e+00, 0.000000000000000e+00, -1.326401176970419e+00, -1.170662351850176e+00, 0.000000000000000e+00, -1.356020937420362e+00, -1.571356463518887e-03, 0.000000000000000e+00, -2.004936331126347e-03, -6.406813967607702e-01, 0.000000000000000e+00, -8.264394571722655e-01, -9.783263725740313e-01, 0.000000000000000e+00, -4.716465744365109e-01, -9.783263725740305e-01, 0.000000000000000e+00, -4.716465744365108e-01, -1.961499343677871e+02, 0.000000000000000e+00, -1.769009974147090e+02, -1.787806429263560e+02, 0.000000000000000e+00, -1.600909653758041e+02, -3.619628888965435e+00, 0.000000000000000e+00, -3.535425741087148e+00, -3.526085797228196e+02, 0.000000000000000e+00, -3.849606600447931e+02, -2.267959009285023e+02, 0.000000000000000e+00, -5.330399766844848e+02, -2.267959009285015e+02, 0.000000000000000e+00, -5.330399766844849e+02, -1.241547786463730e-05, 0.000000000000000e+00, -1.242792417479859e-05, -1.241813417307907e-05, 0.000000000000000e+00, -1.243049817591315e-05, -1.241593348211005e-05, 0.000000000000000e+00, -1.242823515120172e-05, -1.241819867181494e-05, 0.000000000000000e+00, -1.243055950332675e-05, -1.241661889281832e-05, 0.000000000000000e+00, -1.242918817546089e-05, -1.241661889281832e-05, 0.000000000000000e+00, -1.242918817546089e-05, -2.809831935975949e-04, 0.000000000000000e+00, -2.825547180905674e-04, -2.858406990645201e-04, 0.000000000000000e+00, -2.872312935532863e-04, -2.786231236607129e-04, 0.000000000000000e+00, -2.808290318904195e-04, -2.833830184890283e-04, 0.000000000000000e+00, -2.855522242353385e-04, -2.853713352793371e-04, 0.000000000000000e+00, -2.854264685999375e-04, -2.853713352793371e-04, 0.000000000000000e+00, -2.854264685999375e-04, -5.505082827730289e-02, 0.000000000000000e+00, -5.632910006072345e-02, -4.821099170429001e-02, 0.000000000000000e+00, -4.865436776917100e-02, -5.809148886325666e-02, 0.000000000000000e+00, -5.921527076621950e-02, -6.214714538271145e-02, 0.000000000000000e+00, -5.949976697049318e-02, -5.160665981585065e-02, 0.000000000000000e+00, -5.850062162213824e-02, -5.160665981585067e-02, 0.000000000000000e+00, -5.850062162213827e-02, -8.172922653012453e-01, 0.000000000000000e+00, -7.929497618046923e-01, -5.587637373792445e-01, 0.000000000000000e+00, -5.511290059211134e-01, -8.568044169362636e-01, 0.000000000000000e+00, -8.946270070561603e-01, -4.875959966804681e-04, 0.000000000000000e+00, -4.886393681349614e-04, -9.838625793290842e-01, 0.000000000000000e+00, -1.314395368883269e+00, -9.838625793290847e-01, 0.000000000000000e+00, -1.314395368883271e+00, -1.291598211789591e+02, 0.000000000000000e+00, -1.441265169090304e+02, -2.578774206032772e+02, 0.000000000000000e+00, -2.164543048518566e+02, -1.763158021569970e+03, 0.000000000000000e+00, -1.618836428261711e+03, -1.465926986189507e+00, 0.000000000000000e+00, -1.833817627552166e+00, 4.156673453731463e+01, 0.000000000000000e+00, -8.907734694249408e+02, 4.156673453731344e+01, 0.000000000000000e+00, -8.907734694249413e+02, -8.052116023600842e-02, 0.000000000000000e+00, -7.935621138192560e-02, -8.075822323554299e-02, 0.000000000000000e+00, -7.961210975943758e-02, -8.072387001496176e-02, 0.000000000000000e+00, -7.956969269872474e-02, -8.065790387666848e-02, 0.000000000000000e+00, -7.949713855382622e-02, -8.069489232303746e-02, 0.000000000000000e+00, -7.953736475071167e-02, -8.069489232303746e-02, 0.000000000000000e+00, -7.953736475071167e-02, -8.843518769565133e-02, 0.000000000000000e+00, -8.740555703469489e-02, -1.070978916531906e-01, 0.000000000000000e+00, -1.061670348621832e-01, -1.071730715202256e-01, 0.000000000000000e+00, -1.060470769568084e-01, -1.026211857089396e-01, 0.000000000000000e+00, -1.013610299561719e-01, -1.053682603440261e-01, 0.000000000000000e+00, -1.042243404331094e-01, -1.053682603440261e-01, 0.000000000000000e+00, -1.042243404331094e-01, -3.739457512610608e-02, 0.000000000000000e+00, -3.798917679356873e-02, -4.408597674242615e-01, 0.000000000000000e+00, -4.388832109131085e-01, -3.662090537125238e-01, 0.000000000000000e+00, -3.697444542432398e-01, -2.644921381323557e-01, 0.000000000000000e+00, -2.591144619170611e-01, -3.413996808724892e-01, 0.000000000000000e+00, -3.447771156676441e-01, -3.413996808724894e-01, 0.000000000000000e+00, -3.447771156676443e-01, -1.194643330139234e-01, 0.000000000000000e+00, -1.210611370410752e-01, -4.504100457649374e+00, 0.000000000000000e+00, -4.300245502853844e+00, -2.080499064733872e+00, 0.000000000000000e+00, -2.049776984916869e+00, -3.769793087871880e-01, 0.000000000000000e+00, -4.210529729764428e-01, -1.520400196981017e+00, 0.000000000000000e+00, -1.725443094143933e+00, -1.520400196981017e+00, 0.000000000000000e+00, -1.725443094143935e+00, -3.371861614945094e+01, 0.000000000000000e+00, -2.926836574348452e+01, 2.052967427663510e+03, 0.000000000000000e+00, 4.062815126685086e+03, -2.585755179816877e+03, 0.000000000000000e+00, -2.339448569576070e+03, -1.830774366424336e+00, 0.000000000000000e+00, -2.133715338012677e+00, -1.973072175251833e+02, 0.000000000000000e+00, -1.077310439722798e+03, -1.973072175251835e+02, 0.000000000000000e+00, -1.077310439722799e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_16_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_16", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.926165012697216e-03, 2.926424278095638e-03, 2.926158787808941e-03, 2.926419717189013e-03, 2.926169164107411e-03, 2.926426032259542e-03, 2.926241184274689e-03, 2.926517516536806e-03, 2.926160749568613e-03, 2.926503062838699e-03, 2.926160749568613e-03, 2.926503062838699e-03, 8.071493868401379e-03, 8.062386502010762e-03, 8.074884313861476e-03, 8.063972638724232e-03, 8.133577175589353e-03, 8.142201472794675e-03, 8.141139422105757e-03, 8.134667818951523e-03, 8.065904306693310e-03, 8.187984570013612e-03, 8.065904306693310e-03, 8.187984570013612e-03, 1.050568501169294e-02, 1.081151780966693e-02, 1.045495419938701e-02, 1.074696875325036e-02, 9.430509565767204e-03, 9.750902341133254e-03, 1.149431649555050e-02, 1.187857889322808e-02, 1.040328550688847e-02, 1.207081500859774e-02, 1.040328550688847e-02, 1.207081500859774e-02, 5.567223348672232e-02, 7.692390084333234e-02, 5.747239318237118e-02, 8.196270692783784e-02, -7.432299018766858e-05, 4.602206847905272e-04, 1.044610793002753e-02, 1.639594018728827e-02, 5.257218036834373e-02, 2.276153579303767e-03, 5.257218036834361e-02, 2.276153579303760e-03, 3.070232870448113e-04, 3.346450176730958e-04, 3.194813364785668e-04, 3.549533231206413e-04, 1.048011253190753e-03, 1.234357793758221e-03, 1.070484377586407e-04, 1.132383645504916e-04, 2.457493212721951e-04, 8.735346464921495e-05, 2.457493212721927e-04, 8.735346464921196e-05, 1.212375553497210e-02, 1.212777384648644e-02, 1.211704390211275e-02, 1.212128413615373e-02, 1.212376252009299e-02, 1.212782445709987e-02, 1.211798840051704e-02, 1.212191433984300e-02, 1.212003941441513e-02, 1.212447364651448e-02, 1.212003941441513e-02, 1.212447364651448e-02, 1.944022630354271e-02, 1.959437155961057e-02, 2.036002819476196e-02, 2.048274141394270e-02, 1.933779200239139e-02, 1.951057484977635e-02, 2.018422522058016e-02, 2.036732346458781e-02, 2.003538101761862e-02, 2.008494953158484e-02, 2.003538101761862e-02, 2.008494953158484e-02, 8.027864128222574e-02, 8.179157894636074e-02, 7.823094315577973e-02, 7.909166983915315e-02, 5.681324581224839e-02, 6.837505264718843e-02, 5.983455521897672e-02, 6.664381097717646e-02, 8.432153325677089e-02, 8.077921922194763e-02, 8.432153325677087e-02, 8.077921922194772e-02, 4.856864636296417e-03, 4.769057493074064e-03, 2.852624340411435e-02, 2.843308605248232e-02, 3.575049524688079e-03, 4.569685336856743e-03, 2.005852007358076e-02, 2.007534649724129e-02, 9.450711869185445e-03, 1.584486183646049e-02, 9.450711869185422e-03, 1.584486183646065e-02, 1.190930832394593e-05, 1.538215787827034e-05, 6.177072242352252e-05, 5.299445695222914e-05, 1.986233470906953e-04, 2.152008859592811e-04, 1.884245244925308e-03, 2.626833709706088e-03, -3.076434436303570e-06, 3.066262651705071e-04, -3.076434436301085e-06, 3.066262651705128e-04, 9.853725991943953e-02, 9.814720884349044e-02, 1.018236364485200e-01, 1.014013850288592e-01, 1.007231836004469e-01, 1.003039558607232e-01, 9.975954777194712e-02, 9.936226017859755e-02, 1.002450915085073e-01, 9.983726732139477e-02, 1.002450915085073e-01, 9.983726732139477e-02, 9.893003337530372e-02, 9.870351649631720e-02, 1.125322118952209e-01, 1.126519967157749e-01, 1.161351763828634e-01, 1.159721912840576e-01, 1.124653875192106e-01, 1.120981490313483e-01, 1.147327538256969e-01, 1.145988801261021e-01, 1.147327538256969e-01, 1.145988801261021e-01, 6.895434937134189e-02, 7.067375795949778e-02, 4.764589130312002e-02, 4.819676936832255e-02, 6.409190146508609e-02, 6.662682046676947e-02, 8.513325548463534e-02, 8.432020845005020e-02, 8.497626364463000e-02, 8.560075303952835e-02, 8.497626364462993e-02, 8.560075303952841e-02, 9.094710116123070e-02, 9.460211470052964e-02, 1.323275566026859e-03, 1.275691346012357e-03, 1.392067139393397e-03, 1.529096741941104e-03, 1.006153488095762e-01, 1.253113344705520e-01, 4.189700154519338e-03, 5.735499996518892e-03, 4.189700154519354e-03, 5.735499996518857e-03, 1.205971282249941e-04, 1.144560913587522e-04, -5.429585583673420e-06, -8.111074206968316e-06, 1.221236544840349e-04, 1.326176884986536e-04, 4.543197162048881e-03, 5.994134514148656e-03, 1.384565770574424e-05, 2.853065639890014e-04, 1.384565770573455e-05, 2.853065639890013e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
