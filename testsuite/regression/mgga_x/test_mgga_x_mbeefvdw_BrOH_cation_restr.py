
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mbeefvdw_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbeefvdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.164557080091800e+01, -2.164570331103990e+01, -2.164628200858727e+01, -2.164431551280235e+01, -2.164534734129341e+01, -2.164534734129341e+01, -3.283966590956688e+00, -3.284070818748037e+00, -3.286849971308054e+00, -3.286030581290315e+00, -3.285777409175606e+00, -3.725875003417338e+00, -5.667663370473023e-01, -7.319768614433116e-01, -7.172134921298678e-01, -7.208976512654154e-01, -7.201398242291864e-01, -7.201398242291864e-01, -1.934631211533506e-01, -1.957767392792377e-01, -6.343283594478548e-01, -1.563319368884818e-01, -1.707976550166946e-01, -1.707976550166946e-01, -7.203333566794596e-03, -7.582624480779481e-03, -4.247232369187137e-02, -4.157684006471362e-03, -5.225522274110288e-03, -5.225522274110288e-03, -5.545998656631184e+00, -5.547021548093960e+00, -5.546049624295474e+00, -5.439059434160897e+00, -5.546514997147217e+00, -5.546514997147217e+00, -1.794097339464146e+00, -1.819148413528835e+00, -1.775043857807995e+00, -1.797489355845947e+00, -1.817238978865569e+00, -2.116317369224831e+00, -6.259508186725570e-01, -6.789857286390979e-01, -5.807321950316869e-01, -6.020345975983700e-01, -6.357505049815713e-01, -5.750692901647361e-01, -7.247360565917681e-02, -2.001595119490761e-01, -6.703520838725391e-02, -2.046554732855626e+00, -1.293091010816431e-01, -1.293091010816432e-01, -2.131307352968281e-03, -4.064405469592910e-03, -3.108281105048668e-03, -4.506813516966281e-02, -2.487514671317617e-03, -3.744380508024822e-03, -6.283277556791285e-01, -6.245434156731654e-01, -6.243982301976966e-01, -6.269632204874134e-01, -6.264133164595781e-01, -6.264133164595781e-01, -6.112672416850264e-01, -5.260200295041904e-01, -5.496983787805315e-01, -5.737815856892178e-01, -5.614108465378272e-01, -5.225403466137648e-01, -7.119629838291894e-01, -1.780168934951564e-01, -2.891702677065052e-01, -3.176185026604115e-01, -3.274920676380439e-01, -3.274920676380439e-01, -4.301500856393102e-01, -4.061155375001337e-02, -5.578396143058276e-02, -3.587386865159902e-01, -5.740720742338608e-02, -8.917236457781740e-02, -1.016926493624926e-02, -1.086226434378672e-03, -2.280288104775945e-03, -8.377634346579660e-02, -3.464747787992912e-03, -3.464747787992909e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mbeefvdw_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbeefvdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.273974463542798e+01, -3.273979620271245e+01, -3.274006941570686e+01, -3.273929773496508e+01, -3.273969642449360e+01, -3.273969642449360e+01, -4.997026491667169e+00, -4.996674427510924e+00, -4.987302463409476e+00, -4.991583510165384e+00, -4.990608488204002e+00, -4.834323939161095e+00, -8.633053344547129e-01, -8.968762393326442e-01, -8.660384949206268e-01, -8.764051199149641e-01, -8.741292220904665e-01, -8.741292220904665e-01, -2.272871124498884e-01, -2.310828042198837e-01, -8.919978205628954e-01, -1.827523608816446e-01, -1.958609128741734e-01, -1.958609128741743e-01, -9.620277360934192e-03, -1.012896693989989e-02, -5.803351372235717e-02, -5.546224997758692e-03, -6.973530709861375e-03, -6.973530709861375e-03, -7.396140416862406e+00, -7.397671038685911e+00, -7.396218050371938e+00, -7.709974474530508e+00, -7.396912784857489e+00, -7.396912784857489e+00, -2.879105814467332e+00, -2.902158565658713e+00, -2.857338796775496e+00, -2.882925611686679e+00, -2.900262077411992e+00, -2.719506812839572e+00, -8.263786664880425e-01, -9.042335911809475e-01, -7.580714505423377e-01, -7.950778553573863e-01, -8.412051962444317e-01, -8.164982082480614e-01, -9.680901876638381e-02, -2.295311374406346e-01, -8.950429060754206e-02, -2.711154711326987e+00, -1.554859970905099e-01, -1.554859970905114e-01, -2.841743138869181e-03, -5.421533159604233e-03, -4.147322523398639e-03, -6.011217814775244e-02, -3.316686264976827e-03, -4.995702341559313e-03, -8.383605566730389e-01, -8.334799432142317e-01, -8.394053032952671e-01, -8.366456547250536e-01, -8.359403901692213e-01, -8.359403901692213e-01, -8.156429215124978e-01, -6.902760310753496e-01, -7.282318051292618e-01, -7.642798128895039e-01, -7.460839037842667e-01, -8.008566339366210e-01, -9.466509371239208e-01, -2.512110918988020e-01, -3.498127666146646e-01, -5.107751823978465e-01, -4.102032901554967e-01, -4.102032901554966e-01, -6.421729628323880e-01, -5.543752265523957e-02, -7.650953307742574e-02, -4.669941331653844e-01, -7.664093395324607e-02, -1.171475055944787e-01, -1.358957498950036e-02, -1.448350808890466e-03, -3.041155384897292e-03, -1.108710251355441e-01, -4.622685236419742e-03, -4.622685171632681e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbeefvdw_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbeefvdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.513886916812809e-08, -1.513858542020399e-08, -1.513731728160605e-08, -1.514152806065404e-08, -1.513932476744536e-08, -1.513932476744536e-08, -9.270487476897100e-06, -9.265971458265648e-06, -9.144049458482785e-06, -9.190506512200660e-06, -9.189378610220359e-06, -9.441805309324863e-07, -5.778730873385807e-03, -9.843047213213363e-04, -1.106798974347283e-03, -1.068915243911731e-03, -1.077307807300126e-03, -1.077307807300126e-03, -2.124818010741793e-01, -2.031724542207449e-01, -2.620982911620349e-03, -2.769349726243748e-01, -2.897028715779899e-01, -2.897028715779690e-01, 2.320032271357125e+00, 2.412044655772272e+00, 7.519961726949200e-01, 1.723381916829553e+00, 2.389055265840948e+00, 2.389055265840948e+00, 5.930282369338874e-09, 6.647892040595610e-09, 5.971666340961904e-09, -2.946585996411801e-06, 6.289973935997154e-09, 6.289973935997154e-09, -1.090129538190665e-04, -1.053288073216598e-04, -1.110943381043799e-04, -1.085149998365451e-04, -1.056779234819152e-04, -1.041725356208998e-05, -6.939885219395676e-04, -1.151477143158950e-04, -1.415206430737339e-03, -7.944630031364446e-04, -5.595418258421428e-04, -8.968400999270697e-03, -1.397745065623656e+01, -1.571541736059637e-01, -1.909191314887600e+01, -4.695681431580368e-06, -3.876529486825877e-01, -3.876529486825006e-01, -1.867717133491243e+07, 1.524434308693779e+00, 1.228909188716196e+01, -9.341981104666066e+01, -1.006544157071724e+07, 4.719314227730682e+00, 4.785146613373590e-04, 3.154697386231635e-04, -4.928229668411692e-03, 4.201369865409098e-04, 3.963563917894106e-04, 3.963563917894106e-04, 5.073015145513138e-04, -1.813627459672954e-03, -8.993123568199256e-04, -1.946407957967601e-04, -5.308418893305573e-04, -3.804156512696969e-02, -1.817511327448190e-04, -4.269262275025772e-01, -4.173815353288021e-02, -1.093982479093323e-01, -2.237952488093313e-02, -2.237952488093321e-02, -2.909031129663628e-02, 7.928623418099047e-01, 4.879907637312570e-01, -1.032770470351769e-02, -3.549579420020434e+01, -1.322910775577497e-01, 1.101315479301775e+00, 1.826623958285814e+00, 5.361387368116445e+00, -7.896641295779666e-02, 6.725690997478004e+00, 6.725306437021664e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbeefvdw_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbeefvdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.274370538295298e-03, 2.274354994679706e-03, 2.274287507065280e-03, 2.274517575617288e-03, 2.274397135949284e-03, 2.274397135949284e-03, 4.649310916630723e-03, 4.646816015992621e-03, 4.579327131966520e-03, 4.606564319445595e-03, 4.604146931017259e-03, -6.044780005749254e-18, 1.027128913739085e-02, -4.376479938556336e-17, -2.237816925804834e-17, 1.094186712252888e-18, -2.624341519772908e-17, -2.624341519772908e-17, 1.532479142269770e-16, -1.325734650587376e-16, 1.875546659348363e-03, 2.995383183502725e-15, 1.126559388079446e-15, 6.531657588426139e-17, 1.492423954932761e-11, -1.984411669894257e-12, 1.038648100891861e-13, 1.019111495146259e-10, -1.789747648556055e-11, -1.789747648556055e-11, -6.017888315522146e-19, 6.894170932862009e-20, -3.453803941859956e-20, 6.644016041517215e-03, -5.503237352623004e-19, -5.503237352623004e-19, 9.384059670084642e-03, 9.435868415580582e-03, 9.248258490697716e-03, 9.394313761194317e-03, 9.439278530604252e-03, 3.370503328852043e-19, 8.810118572900356e-18, 7.020711992816109e-18, -1.914006513532991e-17, 1.414661605637254e-17, 9.992134536318975e-18, 2.317589485841826e-02, 9.692593372882914e-05, 5.788217184015170e-16, 6.879897201120902e-05, -8.785680059310115e-19, 2.956762878245643e-15, 1.262575144663040e-15, 2.536612701517667e-12, -5.336000804053700e-11, 4.769769124445746e-11, 1.327271570715490e-05, 4.336534701330089e-11, 1.898115660028232e-10, -5.842322920035367e-19, 2.662885552803584e-18, 1.776505910065656e-02, -5.501074378674931e-21, 6.105281205958534e-19, 6.105281205958534e-19, -1.342897803868601e-18, -2.046706957633763e-18, 3.652225912492593e-18, -4.946980456937690e-18, 4.681516816856450e-18, 8.333258443645683e-02, 4.900749105003623e-20, 7.410918118487885e-03, 1.209392708736006e-16, 5.221922743897163e-02, -1.122930856674511e-17, 2.045247641079342e-17, 3.180220045857921e-02, 2.719781516003957e-13, -1.282788832639040e-13, 1.419598999505189e-17, 7.121360393395081e-05, 1.512680692674293e-14, -1.681083785149003e-11, 5.682783933124587e-10, -1.438007464197671e-11, 9.324518549014461e-15, -3.764275777876106e-11, 1.114322952743290e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
