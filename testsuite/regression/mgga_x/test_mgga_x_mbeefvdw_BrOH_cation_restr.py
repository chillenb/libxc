
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mbeefvdw_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbeefvdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.275082845215983e+01, -2.275089175992659e+01, -2.275119598257418e+01, -2.275025378697086e+01, -2.275074423691166e+01, -2.275074423691166e+01, -3.395410718206866e+00, -3.395448083276401e+00, -3.396631092042595e+00, -3.397414225733353e+00, -3.396569157144115e+00, -3.396569157144115e+00, -6.281319583748117e-01, -6.274881015833513e-01, -6.147131381396932e-01, -6.268135165202953e-01, -6.231785295092686e-01, -6.231785295092686e-01, -1.896214985607445e-01, -1.908447738381638e-01, -6.820432902594822e-01, -1.411761542420941e-01, -1.580069362005878e-01, -1.580069362005878e-01, -6.862741969023386e-03, -7.224073688579536e-03, -3.997190460466782e-02, -3.963460852283455e-03, -4.980616449952033e-03, -4.980616449952034e-03, -5.545999482070672e+00, -5.547022825660347e+00, -5.546050512974785e+00, -5.546953864120803e+00, -5.546516033104134e+00, -5.546516033104134e+00, -2.084985219591045e+00, -2.104053332544588e+00, -2.078980151722698e+00, -2.095389482677130e+00, -2.098730680010861e+00, -2.098730680010861e+00, -6.135324653801102e-01, -6.676015817155332e-01, -5.392767047349538e-01, -5.539456497470578e-01, -6.256615012649532e-01, -6.256615012649532e-01, -1.026055813860783e-01, -1.896630465643798e-01, -9.532742562208146e-02, -1.902485201164677e+00, -1.184032116770361e-01, -1.184032116770361e-01, -3.058017170927283e-03, -3.874642180769474e-03, -2.962820973731501e-03, -6.481058140550901e-02, -3.569277780203665e-03, -3.569277780203665e-03, -6.283170839699003e-01, -6.245026162518257e-01, -6.258356826804369e-01, -6.269413871317725e-01, -6.263870014031103e-01, -6.263870014031103e-01, -6.110138344201390e-01, -5.256328532151727e-01, -5.492828435404868e-01, -5.733931837564973e-01, -5.609588748263480e-01, -5.609588748263480e-01, -6.903169265574999e-01, -2.422139968201100e-01, -2.806597048997846e-01, -3.503681384949575e-01, -3.157310103140346e-01, -3.157310103140346e-01, -4.768875279815366e-01, -3.821212310209048e-02, -5.219105834998616e-02, -3.432638386515175e-01, -8.171608628136945e-02, -8.171608628136946e-02, -9.688046906684906e-03, -1.035663559208655e-03, -2.173946905741514e-03, -7.674043199272704e-02, -3.302687389369787e-03, -3.302687389369784e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mbeefvdw_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbeefvdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.023277254274089e+01, -3.023286746918931e+01, -3.023333743375514e+01, -3.023192628344432e+01, -3.023265885586653e+01, -3.023265885586653e+01, -4.518784440614254e+00, -4.519148507426054e+00, -4.529335472196388e+00, -4.529612748628741e+00, -4.527430387902850e+00, -4.527430387902850e+00, -8.630938633662969e-01, -8.606723320681962e-01, -8.040733857845795e-01, -8.258077975173105e-01, -8.213691799838114e-01, -8.213691799838114e-01, -1.497985281975622e-01, -1.517944217842668e-01, -8.551830701624245e-01, -1.552532016498016e-01, -1.679506877170218e-01, -1.679506877170218e-01, -9.360525889135253e-03, -9.680665904350065e-03, -5.372883029059075e-02, -5.285236909649753e-03, -6.642266877652579e-03, -6.642266877652581e-03, -7.395385621653135e+00, -7.396930955783406e+00, -7.395479109930113e+00, -7.396842394509362e+00, -7.396157712205863e+00, -7.396157712205863e+00, -2.525438655558681e+00, -2.586319967513195e+00, -2.521398410484636e+00, -2.577687875793031e+00, -2.562684762901213e+00, -2.562684762901213e+00, -8.143738697842403e-01, -9.236736661662012e-01, -7.397721203557838e-01, -8.091584045325182e-01, -8.324670488449250e-01, -8.324670488449250e-01, -1.302215902502416e-01, -1.100937691188049e-01, -1.221771381915209e-01, -2.839443906191897e+00, -1.247410702238108e-01, -1.247410702238107e-01, -4.077683514917187e-03, -5.166817189751661e-03, -3.951131806636116e-03, -8.607441557136174e-02, -4.759873019276993e-03, -4.759873019276993e-03, -8.382296623309422e-01, -8.329580386832904e-01, -8.348443201462323e-01, -8.363733048130811e-01, -8.356109184140071e-01, -8.356109184140071e-01, -8.161848623272877e-01, -6.846774270195998e-01, -7.239445919549385e-01, -7.618101137614584e-01, -7.424833685344464e-01, -7.424833685344463e-01, -9.831435823335322e-01, -1.929834334392365e-01, -2.590749847420724e-01, -4.375882999242012e-01, -3.422035455942644e-01, -3.422035455942644e-01, -5.949504502377184e-01, -5.274935895406617e-02, -7.006234689030037e-02, -4.444342208029241e-01, -1.065745693529573e-01, -1.065745693529573e-01, -1.292561768534667e-02, -1.380911470235088e-03, -2.898770712644459e-03, -1.041722555162297e-01, -4.404328850873619e-03, -4.404328850873615e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbeefvdw_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbeefvdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.930951716381057e-10, -5.930514585792922e-10, -5.926120848121299e-10, -5.932506597644535e-10, -5.929511458517797e-10, -5.929511458517797e-10, -6.219344127010266e-06, -6.231152491948113e-06, -6.566005982241696e-06, -6.617923681455544e-06, -6.534594182017043e-06, -6.534594182017043e-06, -6.057393134437465e-03, -6.056946362546540e-03, -6.004426772771016e-03, -6.208354960727368e-03, -6.169665559512881e-03, -6.169665559512881e-03, -1.912053225928245e+00, -1.962886353767575e+00, -2.137215061007270e-03, -7.387933439204097e-01, -9.368976653892843e-01, -9.368976653892829e-01, 8.316579150330880e+01, 1.642040457268961e+01, 5.479715970255910e-01, 4.601994730623090e-01, 6.573594119690628e-01, 6.573594119624734e-01, -3.188710484326628e-09, -2.351595728489397e-09, -2.956624111209724e-09, -2.226500711032227e-09, -2.863369901254044e-09, -2.863369901254044e-09, -7.861672400943847e-05, -6.188888081627732e-05, -7.010042102581086e-05, -5.530372804845594e-05, -7.276792590515305e-05, -7.276792590515305e-05, -1.711472061050725e-02, -1.177225870341204e-02, -2.680490324883622e-02, -2.227570100110425e-02, -1.418549901390294e-02, -1.418549901390294e-02, -7.522069933700956e-02, -1.702480178446996e+00, -5.527013221665283e-02, -2.042206627145444e-04, -1.999038721580635e+00, -1.999038721580646e+00, 5.975392171496866e-01, 5.329850808025853e-01, 3.387927855821145e+00, 1.589511239253402e-01, 1.554800711171597e+00, 1.554800711173683e+00, -6.036028369859448e-04, -7.559384386991649e-04, -7.025328393188231e-04, -6.584301145454087e-04, -6.811227498741776e-04, -6.811227498741776e-04, -2.077757756469694e-03, -4.864994049045943e-03, -3.960742243908258e-03, -3.148109611294373e-03, -3.748592929670359e-03, -3.748592929670369e-03, -1.332698043913943e-02, -6.565702583934474e-01, -4.207637286961463e-01, -1.565319355186442e-01, -2.738689242863638e-01, -2.738689242863642e-01, -4.234850703700101e-02, 3.154732013160125e+00, 3.414636737601831e-01, -2.133098019349825e-01, 2.446314577043068e-01, 2.446314577042977e-01, 3.903096562532968e-01, 2.628617485389094e+00, 1.342820369130946e+00, 1.176027613506084e+00, 1.973696186798511e+00, 1.973696186794426e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbeefvdw_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbeefvdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbeefvdw_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbeefvdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [7.774116823744897e-05, 7.773702570071200e-05, 7.767819457064407e-05, 7.773806446063740e-05, 7.771248092557409e-05, 7.771248092557409e-05, 2.858280204292049e-03, 2.866362153794279e-03, 3.095872174825312e-03, 3.132019509264467e-03, 3.073602382222607e-03, 3.073602382222607e-03, 1.865082235627117e-02, 1.853490795229078e-02, 1.595371536655585e-02, 1.846610916977331e-02, 1.783986859201130e-02, 1.783986859201130e-02, 1.415202840912501e-01, 1.532293720815672e-01, 2.470947965866948e-03, 1.336296026236675e-02, 3.235546190244593e-02, 3.235546190244586e-02, -2.875633323461559e-04, -6.450150253216235e-05, -2.807585000506287e-04, -5.217389320968299e-09, -1.140315793457570e-07, -1.140315793402453e-07, 2.172215064720837e-05, 2.145177463129503e-05, 2.126868721334142e-05, 2.104982520589388e-05, 2.181126563416414e-05, 2.181126563416414e-05, 8.169684367321984e-03, 6.373966004079276e-03, 6.982272446752271e-03, 5.399897103018925e-03, 7.685497214474882e-03, 7.685497214474882e-03, 5.286825470356159e-02, 4.824398263152668e-02, 6.136741016441119e-02, 5.719502255977616e-02, 4.621037385884685e-02, 4.621037385884685e-02, -2.376381263399538e-03, 1.295127376055814e-01, -2.029597207956678e-03, 2.139082120115166e-02, 3.138666435174091e-02, 3.138666435174114e-02, -2.371421565858034e-11, -4.207668956553138e-10, -1.580324586125531e-08, -8.332947343672853e-04, -2.111840131922301e-09, -2.111840130992649e-09, 3.761577935869678e-03, 3.648773453920221e-03, 3.688258703802215e-03, 3.721856936803392e-03, 3.707046414268736e-03, 3.707046414268736e-03, 8.206830899174554e-03, 5.975786261031835e-03, 6.942292504692518e-03, 7.692257648464993e-03, 7.810912626355986e-03, 7.810912626356008e-03, 6.188287568724948e-02, 9.702510126352612e-02, 1.103826423221348e-01, 9.385580563324714e-02, 1.101254981734093e-01, 1.101254981734094e-01, 5.837233865469166e-02, -1.793861068586069e-03, -4.569056878155070e-04, 1.197027525711182e-01, -3.763467594612689e-03, -3.763467594612658e-03, -2.277384517369527e-08, -3.959670031609515e-14, -8.151398779996703e-09, -7.155821894717872e-03, -5.618774887093281e-09, -5.618774890810484e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
