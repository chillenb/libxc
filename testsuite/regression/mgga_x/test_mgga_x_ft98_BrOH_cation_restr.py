
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ft98_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ft98", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.248158791713963e+01, -2.248154743841127e+01, -2.248154959433826e+01, -2.248214810852551e+01, -2.248180834946484e+01, -2.248180834946484e+01, -3.457891293983169e+00, -3.457870124913531e+00, -3.457506064987012e+00, -3.459227708925954e+00, -3.458150746961778e+00, -3.458150746961778e+00, -6.842464865839784e-01, -6.839964067978934e-01, -6.787821512837465e-01, -6.837213639790171e-01, -6.821689387032445e-01, -6.821689387032445e-01, -2.057822914736609e-01, -2.067850247680952e-01, -7.928614678979001e-01, -1.654259529305763e-01, -1.831456587693163e-01, -1.831456587693164e-01, -8.080112266618150e-02, -7.672940535760889e-02, -9.341354999986635e-02, -5.777111067250426e-02, -5.345360468369268e-02, -5.345360468369222e-02, -5.123579876000875e+00, -5.087370832583198e+00, -5.149237966664211e+00, -5.136086981648486e+00, -5.242535589704873e+00, -5.037199446210057e+00, -2.047310079260735e+00, -2.057158240462924e+00, -2.065491019669655e+00, -2.076771429943628e+00, -2.072248540365103e+00, -2.143139928276537e+00, -5.823028903694774e-01, -6.526609435090385e-01, -5.410213148517121e-01, -5.385038305928651e-01, -5.847867282241992e-01, -5.850014009742569e-01, -1.154949786120511e-01, -2.054566809768938e-01, -1.070443261400929e-01, -1.820755808544583e+00, -1.778436588135764e-01, -2.362486706529857e-01, -1.753351629380880e-03, -2.340689677584457e-03, -1.877609162392614e-03, -7.123299280283968e-02, -2.259094256981123e-03, -2.259094256981388e-03, -7.878413605827053e-01, -6.119764213710732e-01, -6.393407873776279e-01, -6.805212719004036e-01, -6.569262915754668e-01, -6.569234411119028e-01, -9.896166240399250e-01, -5.078835079403305e-01, -5.151482755117568e-01, -5.401665613423815e-01, -5.181308159919616e-01, -5.223657463143018e-01, -6.836828277005894e-01, -2.510023290886547e-01, -2.902576589990801e-01, -3.581190363200842e-01, -3.215447454475863e-01, -3.215287483296761e-01, -4.645605773267207e-01, -3.843756780691045e-02, -6.410544630391836e-02, -3.385786862387358e-01, -9.172135340253731e-02, -1.683817054438347e-01, -7.231202044348546e-03, -4.966769706065495e-04, -1.199526623823049e-03, -5.489026872850024e-01, -2.080311893546790e-03, -2.080311893546756e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ft98_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ft98", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.308677425614987e+01, -2.308750381626213e+01, -2.308974737495174e+01, -2.307891745519325e+01, -2.308473663973928e+01, -2.308473663973928e+01, -4.115259417608303e+00, -4.115259834474349e+00, -4.115187299987120e+00, -4.114136024726621e+00, -4.114445698623663e+00, -4.114445698623663e+00, -8.034495615387187e-01, -8.025602943776262e-01, -7.822253561940381e-01, -7.887351466766912e-01, -7.872805721688947e-01, -7.872805721688947e-01, -1.569924573780688e-01, -1.643574805059786e-01, -9.396764496000610e-01, -1.118202617263512e-01, -1.200280317936529e-01, -1.200280317936527e-01, 3.381534855725152e-01, 3.350112257737641e-01, 3.062317090516737e-01, 3.636384758014265e-01, 3.425047713789193e-01, 3.425047713789192e-01, -6.849295683217122e+00, -6.616020924234697e+00, -6.993469012537239e+00, -6.926599656053651e+00, -7.255157482934226e+00, -6.284640397065833e+00, -2.360399862970404e+00, -2.365146325428964e+00, -2.182881900847978e+00, -2.193801814869205e+00, -2.234382251074112e+00, -1.982812122185466e+00, -7.322370082907933e-01, -1.056024675687728e+00, -6.706042961281785e-01, -6.845123471491797e-01, -7.143103473317438e-01, -7.177320179362258e-01, -1.481864971506099e-01, -2.299101822707152e-01, -1.400391666775155e-01, -2.343238087385076e+00, 6.320492644889880e-02, 1.500096069072233e-01, -2.923579718035283e-03, -3.903050225204380e-03, -3.130815930080323e-03, -1.024779536488475e-01, -3.766927800387791e-03, -3.766927800390088e-03, -1.740457041882782e+00, -1.036113887239977e+00, -1.175777853858869e+00, -1.359489389652693e+00, -1.257519167162295e+00, -1.257508015129134e+00, -2.190155179007042e+00, -5.558161293407391e-01, -6.327076503395587e-01, -7.363040213928295e-01, -6.336420967274815e-01, -6.620793609739560e-01, -1.100341334281129e+00, -2.774425541155241e-01, -3.227474434418989e-01, -4.209869302616900e-01, -3.642985326449975e-01, -3.642763710660689e-01, -5.267318332324861e-01, -6.127977650876927e-02, 1.239827826673808e-01, -3.943446898990329e-01, -1.214092463997927e-01, 1.777689567806981e-01, -1.204262733405003e-02, -8.279996414100035e-04, -2.000036704460064e-03, 1.437574529103392e-01, -3.468833739339215e-03, -3.468833739338957e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ft98_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ft98", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.149762820289436e-08, -2.149551167331648e-08, -2.148894628614023e-08, -2.152037087734945e-08, -2.150349522655788e-08, -2.150349522655788e-08, -8.490728398516657e-06, -8.491832514886414e-06, -8.521130126077589e-06, -8.512179547275594e-06, -8.513839357943750e-06, -8.513839357943750e-06, -3.851761957566950e-03, -3.845748204622310e-03, -3.658948476959945e-03, -3.543475360114144e-03, -3.589283065764289e-03, -3.589283065764289e-03, -1.266947451742267e+00, -1.177622007832835e+00, -2.163647821729784e-03, -2.650946905344302e+00, -2.177692925297549e+00, -2.177692925297550e+00, -1.491483009245591e+05, -1.297081222167272e+05, -5.802778002474297e+02, -7.647656464821994e+05, -4.088675243549218e+05, -4.088675243549220e+05, 2.116079002894859e-07, -3.765021383982994e-07, 4.928629304243591e-07, 3.904947178067632e-07, 4.505943212338832e-07, -1.674493880470913e-06, -4.281261375910292e-05, -4.314197935977472e-05, -7.728706024136828e-05, -7.673846702396633e-05, -7.275098531735817e-05, -1.128513278394871e-04, -5.878833198283742e-03, 6.709853165380354e-02, -8.780441289062286e-03, -1.370417046725842e-02, -9.462114963121715e-03, -8.454194556199618e-03, -1.959854254947282e-01, -1.998720118275542e-01, -1.171381648671485e-01, -7.679928473223537e-05, -1.285577525967001e+01, -1.668259283568086e+01, 1.069340914721286e+03, 6.635252492617519e+02, 2.983787785456548e+03, 1.192721919913984e+00, 1.400763502607572e+03, 1.400763502610921e+03, 9.964569285130463e-01, 1.171804186513275e-01, 2.204314949050348e-01, 4.032349361500814e-01, 2.947811729329322e-01, 2.947791636411741e-01, 3.051004056456010e+00, -2.340536383925527e-02, -1.118795459418982e-02, 4.384727982119030e-04, -1.366900689833469e-02, -8.329610713621861e-03, 4.606569535918549e-02, -1.206816347404098e-01, -8.467893429592983e-02, -4.774195000262670e-02, -6.673002023199610e-02, -6.646391956775512e-02, -2.646288505254585e-02, 6.520288525796968e+00, -1.397695576753040e+02, -8.847059153068351e-02, -7.745358519681686e-02, -6.085290480623900e+01, 1.134253975116313e+02, 1.630438009914479e+04, 2.964876430366532e+03, -7.028262899591854e+01, 1.829827860975366e+03, 1.829827860974991e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ft98_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ft98", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([-9.578267410381049e-05, -9.577015409047601e-05, -9.573465771695802e-05, -9.592065729616662e-05, -9.582031548728136e-05, -9.582031548728136e-05, 1.430207254675804e-04, 1.430809681797820e-04, 1.449423793128897e-04, 1.466230596477833e-04, 1.453972260190314e-04, 1.453972260190314e-04, -2.456345533430056e-05, -2.410354442131150e-05, -1.956078190091886e-05, -3.686365661109427e-05, -3.330242120152905e-05, -3.330242120152905e-05, 1.042831005071741e-02, 9.844433274683160e-03, -1.022321450351232e-05, 1.052999390044922e-02, 1.202690439475042e-02, 1.202690439475043e-02, 7.217406393939042e-02, 7.287164030543571e-02, 5.449757092968158e-02, 6.890866869934442e-02, 7.299207269014460e-02, 7.299207269014461e-02, -3.326474186904363e-06, -2.242324106528224e-05, -8.870723770924540e-08, -7.880276677902709e-07, -5.697643554956460e-05, -2.379665051024974e-05, -4.368339298341668e-09, -1.209546923717668e-06, 5.346481176813246e-04, 5.488078259770587e-04, 4.727847579679400e-04, 1.391015512387221e-03, -2.822001412494101e-06, -1.446503028593654e-04, -2.829479827537473e-06, -4.039402069868481e-04, 2.292311408495938e-04, -1.314234842720399e-04, -4.806629964866417e-07, -5.589476304124251e-08, -3.844693259892968e-10, -3.669321510016384e-04, 3.490078750583617e-02, 5.279059212420067e-02, -3.129737527789643e-19, -3.130893319576019e-24, -2.284641365767354e-23, -1.702657620035448e-08, -8.746140230351214e-18, -3.732369837603784e-20, -3.211046207421237e-13, -1.475341212801471e-12, -5.594630615770173e-15, -3.780537048555297e-09, -1.726104081928829e-11, -1.797637429719662e-15, -1.791700596901985e-14, 2.746862878034946e-03, -5.108131333166962e-06, -4.140029365217852e-04, -1.377304567734773e-04, -1.295481646073951e-06, -7.506433179643989e-06, -5.876121855126726e-09, -4.889916460035112e-09, -2.824059655345620e-06, -1.678466571155273e-06, -2.440287667251167e-05, 1.524645167313060e-03, -1.816414873169058e-07, 2.779286997941228e-02, 1.483843139557894e-03, -1.371803731889134e-09, 5.451015560282795e-02, -7.035740268502953e-17, -5.906446192151745e-20, -6.536035706637696e-21, 1.219253065509841e-01, -1.249572108477907e-18, -3.135059822869887e-19])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ft98_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ft98", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
