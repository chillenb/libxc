
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_23_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_23", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.176379970209623e+01, -2.176392798841299e+01, -2.176448984973869e+01, -2.176258588312173e+01, -2.176358465726615e+01, -2.176358465726615e+01, -3.029173825306203e+00, -3.029314850395374e+00, -3.033092830693509e+00, -3.031839001117372e+00, -3.031658319419896e+00, -3.961160680485232e+00, -5.276293369055951e-01, -6.734190551797965e-01, -6.377250627570651e-01, -6.511829843693667e-01, -6.481580349178776e-01, -6.481580349178776e-01, -1.610175902492056e-01, -1.648960212405811e-01, -5.985961770810519e-01, -1.096423829447492e-01, -1.278360587220318e-01, -1.278360587220318e-01, -4.660392840895103e-03, -4.905388978928692e-03, -2.719256411291424e-02, -2.691126071734054e-03, -3.381777783114876e-03, -3.381777783114876e-03, -6.116595374701559e+00, -6.116441889865290e+00, -6.116578091104438e+00, -5.480729594896083e+00, -6.116524043856054e+00, -6.116524043856054e+00, -1.647247129997140e+00, -1.670178420956504e+00, -1.630199353265439e+00, -1.650323136865598e+00, -1.668412162806989e+00, -2.192993431172909e+00, -6.933342585592259e-01, -7.543551314808615e-01, -6.271550280934184e-01, -6.672369770152886e-01, -7.066449945953288e-01, -5.727429869696844e-01, -7.070402478005830e-02, -1.507720923570225e-01, -6.549834205742797e-02, -2.277959541615802e+00, -8.773756868123106e-02, -8.773756868123106e-02, -2.105800436688150e-03, -2.630798103074165e-03, -2.011705221047854e-03, -4.426838449075859e-02, -2.457691203938423e-03, -2.423459550834224e-03, -6.732812755387968e-01, -6.778224762821359e-01, -6.422214440966489e-01, -6.750802161335230e-01, -6.757611997900966e-01, -6.757611997900966e-01, -6.562510542515162e-01, -5.754053676769895e-01, -6.118733627831323e-01, -6.370721644929870e-01, -6.256796598322704e-01, -5.261055502685063e-01, -7.932037769673517e-01, -1.678500011581373e-01, -2.582161158321483e-01, -2.916646707266093e-01, -3.177076163865490e-01, -3.177076163865490e-01, -3.979775853673926e-01, -2.601664419928661e-02, -3.559313363636022e-02, -3.846796920775234e-01, -5.611384968152807e-02, -5.741015493154484e-02, -6.577756976843419e-03, -7.031949277858323e-04, -1.476077148300081e-03, -5.379108253151916e-02, -2.242462077584218e-03, -2.242462077584217e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_23_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_23", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.265253211357066e+01, -3.265262270987636e+01, -3.265305375538352e+01, -3.265170517320189e+01, -3.265240782765702e+01, -3.265240782765702e+01, -4.894681756138392e+00, -4.894947386830148e+00, -4.902014355173967e+00, -4.899607159048407e+00, -4.899356513767794e+00, -4.993802474866177e+00, -7.795888118373472e-01, -9.351638698489281e-01, -8.889680987783464e-01, -9.066571922382466e-01, -9.027638249448980e-01, -9.027638249448980e-01, -2.236909215103944e-01, -2.294054837788961e-01, -8.177478854514183e-01, -1.468338887653356e-01, -1.738763306640110e-01, -1.738763306640110e-01, -6.062004184900912e-03, -6.380730496499477e-03, -3.541946158035726e-02, -3.500338767528572e-03, -4.398728864198738e-03, -4.398728864198738e-03, -7.216851238570946e+00, -7.220783863746739e+00, -7.217066584219032e+00, -7.938500052323623e+00, -7.218823131349623e+00, -7.218823131349623e+00, -2.628756073250223e+00, -2.674606605030691e+00, -2.593599857442666e+00, -2.634778520000320e+00, -2.671285450745384e+00, -2.852115661392835e+00, -8.114464516767768e-01, -8.730592509076442e-01, -7.719703051109306e-01, -7.797721881720763e-01, -8.196776659339474e-01, -9.022780355566088e-01, -9.308111130965284e-02, -2.053822678979375e-01, -8.632583478165323e-02, -2.631903386529745e+00, -1.165971509542973e-01, -1.165971509542975e-01, -2.807689247081574e-03, -3.421864739006325e-03, -2.616639318382584e-03, -5.862798183733264e-02, -3.276780266772473e-03, -3.152203382432230e-03, -8.606163807812783e-01, -8.362152061493064e-01, -8.877870929151790e-01, -8.514240602898129e-01, -8.478263581702148e-01, -8.478263581702148e-01, -8.344370661935816e-01, -6.920007852259387e-01, -7.068750151428588e-01, -7.384784888448418e-01, -7.192115659585583e-01, -8.045942071963155e-01, -9.122308929691050e-01, -2.301463601287038e-01, -3.598629854002287e-01, -4.645705622746945e-01, -4.337712383040284e-01, -4.337712383040283e-01, -6.437487062465773e-01, -3.388385966283608e-02, -4.640537908890353e-02, -4.789103105024779e-01, -7.398110900201420e-02, -7.533416324654871e-02, -8.556199033623481e-03, -9.146295210669749e-04, -1.919914005178878e-03, -7.052695050792807e-02, -2.916780666819354e-03, -2.916780666819351e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_23_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_23", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.081854362213904e-08, -2.081851677011337e-08, -2.081824302802774e-08, -2.081865928776294e-08, -2.081846298581377e-08, -2.081846298581377e-08, -1.532715218299996e-05, -1.533098864900614e-05, -1.543116003374440e-05, -1.538507458536294e-05, -1.539641113800605e-05, -2.001485959332498e-05, -4.171906392350570e-03, -5.710521271155744e-03, -5.053404903990082e-03, -5.443697917064611e-03, -5.349886551428738e-03, -5.349886551428738e-03, -6.301012726938531e-01, -6.491281284182119e-01, -8.346168871216710e-04, -3.786774476017663e-01, -4.829906255154099e-01, -4.829906255154097e-01, -5.996404632147967e+01, -5.531849121075692e+01, -1.519914246428437e+00, -1.529941562554465e+02, -1.145795789990192e+02, -1.145795789990192e+02, -7.237007529225950e-06, -7.238137787442731e-06, -7.237115225739770e-06, -6.502214802836606e-06, -7.237559648224604e-06, -7.237559648224604e-06, -1.220996545481137e-04, -1.243883949632089e-04, -1.200201582445915e-04, -1.222311623740190e-04, -1.243949692437195e-04, -1.637961752958500e-04, -3.473076459325401e-02, -3.076678720340355e-02, -3.772153527479721e-02, -4.087875041746867e-02, -3.423109146016470e-02, -2.796529822585556e-02, 8.329545360397247e-02, -2.695534951016211e-01, 1.382645661818527e-01, -3.271961123392971e-04, -5.432525325301780e-01, -5.432525325301784e-01, 4.253101711407468e+02, -1.504771622828871e+02, -7.329674470657285e+02, 6.709820524316984e-01, 6.208968422254706e+02, -3.127483308417615e+02, -4.672824219616181e-02, -4.703884708183251e-02, -4.462133545506849e-02, -4.687489656346930e-02, -4.692255218426097e-02, -4.692255218426097e-02, -5.206030351727286e-02, -6.178668330729600e-02, -6.291028001085834e-02, -6.068342772608094e-02, -6.223497293416877e-02, -5.263405511916201e-02, -2.437963820830228e-02, -1.450972550032537e-01, -1.962120836654630e-01, -1.197131519275628e-01, -1.941405329120914e-01, -1.941405329120915e-01, -5.550911654449560e-02, -1.648696061637163e+00, -9.363316907640417e-01, -2.465752050080345e-01, 2.654797996627318e-01, -7.645057299250797e-01, -2.088194639592896e+01, -2.325316498975115e+03, -8.947150725873328e+02, -8.639821045255924e-01, -4.361056234265471e+02, -4.361056234265488e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_23_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_23", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.130806632939933e-03, 2.130813626521808e-03, 2.130837670663082e-03, 2.130734598093258e-03, 2.130789613126974e-03, 2.130789613126974e-03, 6.433982251080230e-03, 6.436223331185317e-03, 6.495252738216397e-03, 6.470795686744758e-03, 6.474089741435410e-03, 1.920298768081201e-02, 7.261600184116623e-03, 4.715921807984107e-02, 3.894411921756046e-02, 4.281310966321390e-02, 4.190300670336023e-02, 4.190300670336023e-02, 9.135632671919604e-02, 9.852306670193503e-02, 7.960245480797651e-04, 2.226032663659889e-02, 4.202541794129250e-02, 4.202541794129259e-02, 2.098802426743329e-04, 2.259535956396915e-04, 1.167564573866170e-03, 1.026954106577978e-04, 1.528340123080192e-04, 1.528340123080192e-04, 1.241825923315535e-02, 1.239213236357173e-02, 1.241677420732283e-02, 9.153726946647517e-03, 1.240516675918482e-02, 1.240516675918482e-02, 8.332887998940951e-03, 8.863229513275154e-03, 7.917177189375412e-03, 8.391165353395907e-03, 8.835260456827277e-03, 3.037511179956583e-02, 1.292204673707642e-01, 1.093102471174412e-01, 1.305307464791776e-01, 1.343998883385869e-01, 1.271196234642693e-01, 6.459014517383481e-02, -6.501534292237122e-04, 3.815127872730713e-02, -5.577069611228129e-04, 3.933083482231538e-02, 1.668559511381296e-02, 1.668559511381301e-02, -2.594380545690095e-08, 9.434872305986889e-05, 2.056826265418700e-04, -2.467290759836926e-04, -1.634502981196283e-07, 1.533969554686310e-04, 8.668184454017663e-02, 9.631369700925074e-02, 8.138310480785295e-02, 9.016405706448759e-02, 9.157317534596698e-02, 9.157317534596698e-02, 9.041204416650608e-02, 1.500033375342593e-01, 1.464081041439860e-01, 1.283998124008078e-01, 1.391069565330810e-01, 8.251952842763978e-02, 1.086914284422788e-01, 3.394554299266597e-03, 9.925831025033861e-02, 4.527959854047894e-02, 1.422564027416219e-01, 1.422564027416220e-01, 5.240724851787713e-02, 1.102176333143981e-03, 1.683789723425556e-03, 2.060442878339913e-01, -6.085395186995839e-04, 6.464038668334530e-03, 2.059317587660319e-04, 2.780543917604040e-05, 9.902750556389659e-05, 5.970435067738657e-03, 1.694736734919248e-04, 1.694736734919261e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
