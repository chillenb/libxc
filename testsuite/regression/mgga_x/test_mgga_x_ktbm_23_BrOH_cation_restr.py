
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_23_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_23", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.506421409008872e+01, -2.506428127245011e+01, -2.506472868145552e+01, -2.506373283690781e+01, -2.506423341335596e+01, -2.506423341335596e+01, -3.408354469275098e+00, -3.408516786057487e+00, -3.413119917440518e+00, -3.414104299185065e+00, -3.412578255739523e+00, -3.412578255739523e+00, -5.738703250355386e-01, -5.730743837483281e-01, -5.552427938887412e-01, -5.676324337769300e-01, -5.641637125206820e-01, -5.641637125206820e-01, -1.588101280481235e-01, -1.620832413820598e-01, -6.161530182083259e-01, -1.071239397975111e-01, -1.247262067487384e-01, -1.247262067487384e-01, -4.659128687483481e-03, -4.902977572667906e-03, -2.709281014949171e-02, -2.682977698354448e-03, -3.375020761309401e-03, -3.375020761309400e-03, -6.112246858510765e+00, -6.112143481075615e+00, -6.112319979349044e+00, -6.112225604401581e+00, -6.112155712636972e+00, -6.112155712636972e+00, -2.092132908635080e+00, -2.129800679647484e+00, -2.080654017370778e+00, -2.115025610717612e+00, -2.118431193705913e+00, -2.118431193705913e+00, -6.372025846977901e-01, -6.841585146918663e-01, -5.506139028710455e-01, -5.632763489177878e-01, -6.519881149237814e-01, -6.519881149237814e-01, -7.207815999516912e-02, -1.490493411209353e-01, -6.643060904889748e-02, -1.933345998162839e+00, -8.674180866849832e-02, -8.674180866849834e-02, -2.063996345817287e-03, -2.617308231844084e-03, -2.004933524235001e-03, -4.420961677225495e-02, -2.411773078654010e-03, -2.411773078654011e-03, -6.638679119773093e-01, -6.687846759668972e-01, -6.672293322289072e-01, -6.657919313420607e-01, -6.665231155991166e-01, -6.665231155991166e-01, -6.382163156873643e-01, -5.682183114523401e-01, -6.009972871359032e-01, -6.226097213607491e-01, -6.122786362060839e-01, -6.122786362060838e-01, -7.042740734060139e-01, -1.995769276186401e-01, -2.511848303202919e-01, -3.501287291095382e-01, -3.023706607994440e-01, -3.023706607994441e-01, -4.883503404774783e-01, -2.596579003282021e-02, -3.542102278512789e-02, -3.502799564160941e-01, -5.694386776794827e-02, -5.694386776794825e-02, -6.542803332389870e-03, -7.011814736634206e-04, -1.473394179671064e-03, -5.351639822280249e-02, -2.233502977238954e-03, -2.233502977238953e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_23_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_23", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.948804774555377e+01, -2.948814063190765e+01, -2.948843380358696e+01, -2.948704734323728e+01, -2.948779089206166e+01, -2.948779089206166e+01, -4.982925447605493e+00, -4.983057031092184e+00, -4.986620741487048e+00, -4.986000139493248e+00, -4.985397395337600e+00, -4.985397395337600e+00, -8.374604154141289e-01, -8.357612717020658e-01, -7.980830921316515e-01, -8.196644101381005e-01, -8.139961014237941e-01, -8.139961014237941e-01, -2.212945493315056e-01, -2.263833816944990e-01, -8.515031168088132e-01, -1.444256417670910e-01, -1.704112493935081e-01, -1.704112493935082e-01, -6.065004453504723e-03, -6.386482253897642e-03, -3.559685335706873e-02, -3.522261527785130e-03, -4.415949509209136e-03, -4.415949509209136e-03, -7.222326361394789e+00, -7.226203182110985e+00, -7.222428376754435e+00, -7.225853851259511e+00, -7.224326881252307e+00, -7.224326881252307e+00, -2.819765110500139e+00, -2.843687171364676e+00, -2.805501411590007e+00, -2.827618833483025e+00, -2.839979743577016e+00, -2.839979743577016e+00, -8.471455034620857e-01, -9.469079234838995e-01, -7.856769181568991e-01, -8.391024207838456e-01, -8.600799704441634e-01, -8.600799704441634e-01, -9.565482045525410e-02, -2.035214896052865e-01, -8.808899411265672e-02, -2.877241176535397e+00, -1.158908878155799e-01, -1.158908878155800e-01, -2.751231670090020e-03, -3.464945333206057e-03, -2.635161600631757e-03, -5.840360324049389e-02, -3.188062057650962e-03, -3.188062057650961e-03, -8.730879303686585e-01, -8.480849297897224e-01, -8.564383916989137e-01, -8.637148614265304e-01, -8.600371524935377e-01, -8.600371524935376e-01, -8.580023222477522e-01, -6.953645161387095e-01, -7.162692839938646e-01, -7.551244708517514e-01, -7.328784211152192e-01, -7.328784211152189e-01, -9.958104082224728e-01, -2.772955625455317e-01, -3.531490650910638e-01, -4.940593359680909e-01, -4.241360099511878e-01, -4.241360099511879e-01, -6.526390149474047e-01, -3.397324368731152e-02, -4.664487864537085e-02, -4.831991748820794e-01, -7.535675772373832e-02, -7.535675772373820e-02, -8.667030736330350e-03, -9.415218361275109e-04, -1.926744931435658e-03, -7.057280823210535e-02, -2.942340171223990e-03, -2.942340171223989e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_23_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_23", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.386386828635396e-08, -2.386376581470757e-08, -2.386328387194097e-08, -2.386482652060715e-08, -2.386402176459988e-08, -2.386402176459988e-08, -1.709578325270490e-05, -1.710003701291999e-05, -1.721236918023390e-05, -1.717309994111112e-05, -1.717924537563693e-05, -1.717924537563693e-05, -4.636745772614094e-03, -4.614594284232257e-03, -4.117104903099134e-03, -4.490432176496834e-03, -4.393882007403334e-03, -4.393882007403334e-03, -6.138475341691815e-01, -6.293105851925974e-01, -9.044742892304682e-04, -3.264613571990685e-01, -4.426241667977608e-01, -4.426241667977607e-01, -5.861438539217329e+01, -5.304509991833490e+01, -1.153623042314865e+00, -1.076725564885253e+02, -9.370787752061787e+01, -9.370787752061757e+01, -7.231796454351321e-06, -7.232986483892073e-06, -7.232012410863875e-06, -7.233054500609129e-06, -7.232324715451953e-06, -7.232324715451953e-06, -1.551373415732981e-04, -1.584184865262859e-04, -1.535957711729322e-04, -1.568041026137858e-04, -1.577078936746624e-04, -1.577078936746624e-04, -3.189184371178897e-02, -2.794023050439035e-02, -3.304452089977963e-02, -3.462749691591735e-02, -3.156538428065508e-02, -3.156538428065508e-02, -3.219113215583186e-01, -2.595375728639012e-01, -3.440553413553228e-01, -2.787889784378854e-04, -4.914091139615274e-01, -4.914091139615277e-01, -3.971122792194550e+00, -5.646568852302939e+01, -4.861424483143228e+02, -5.826844859743879e-01, -1.379073884391245e+02, -1.379073884391250e+02, -4.607783874118456e-02, -4.641123718144122e-02, -4.632732719484017e-02, -4.623164107661627e-02, -4.628228877979813e-02, -4.628228877979813e-02, -5.064120947591889e-02, -6.097868701638931e-02, -6.176321882663451e-02, -5.929118307577675e-02, -6.087857804978501e-02, -6.087857804978498e-02, -2.168798860678130e-02, -2.156314625704422e-01, -1.884283573730687e-01, -1.433194654564009e-01, -1.829597491095306e-01, -1.829597491095306e-01, -6.748727253094142e-02, -1.445280179024006e+00, -6.889269420571220e-01, -2.237542756329182e-01, -6.313883499274524e-01, -6.313883499274530e-01, -7.410212600294721e+00, 1.734393895345399e+03, -7.469128849979912e+02, -7.641619830549204e-01, -2.520417594148660e+02, -2.520417594148664e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_23_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_23", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([3.221654440549901e-03, 3.221627574865361e-03, 3.221556691683075e-03, 3.221956636251314e-03, 3.221740164912087e-03, 3.221740164912087e-03, 1.132746900132838e-02, 1.133019409755293e-02, 1.140530871448901e-02, 1.140802511109031e-02, 1.139458903727773e-02, 1.139458903727773e-02, 1.930798093529846e-02, 1.919326983102508e-02, 1.685078862200393e-02, 1.973076677350229e-02, 1.887203058928183e-02, 1.887203058928183e-02, 8.440055630861235e-02, 8.955610160093952e-02, 3.192285018096037e-03, 1.596569846537894e-02, 3.333716269604569e-02, 3.333716269604575e-02, 2.034724379251312e-04, 2.134247189619066e-04, 8.155975220379468e-04, 6.447029252496319e-05, 1.166926299145115e-04, 1.166926299145091e-04, 1.239499020636657e-02, 1.236919027227192e-02, 1.239399208175040e-02, 1.237120931980344e-02, 1.238182174875195e-02, 1.238182174875195e-02, 2.638384122590003e-02, 2.749602094296277e-02, 2.623811595919133e-02, 2.729757032126765e-02, 2.706071620163009e-02, 2.706071620163009e-02, 1.004115654961180e-01, 8.304085966985808e-02, 8.484653479661192e-02, 7.863884219581889e-02, 1.003351654948667e-01, 1.003351654948667e-01, 4.971432997428233e-03, 3.455355782995390e-02, 4.108688040975688e-03, 2.373726985936090e-02, 1.370738216493789e-02, 1.370738216493801e-02, 8.200398525846403e-07, 2.741276954737377e-05, 1.197159082549570e-04, 1.942294758788605e-03, 5.397836591363362e-05, 5.397836591363642e-05, 8.370058266155550e-02, 9.306190698915297e-02, 8.980575150325289e-02, 8.707756604979179e-02, 8.844517596227978e-02, 8.844517596227978e-02, 8.431125014039814e-02, 1.445313527299111e-01, 1.391899212277293e-01, 1.206527929571193e-01, 1.310202499226272e-01, 1.310202499226271e-01, 7.701788965688935e-02, 6.068314266698183e-02, 8.716104449542193e-02, 1.184163237656014e-01, 1.172605772505772e-01, 1.172605772505771e-01, 1.239190374214907e-01, 9.257329468686105e-04, 1.129068625182224e-03, 1.517664620683489e-01, 4.835795732550784e-03, 4.835795732550767e-03, 5.647458289784985e-05, -8.003403039105046e-06, 7.767263455136361e-05, 4.967946491192309e-03, 8.294319749251194e-05, 8.294319749251543e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
