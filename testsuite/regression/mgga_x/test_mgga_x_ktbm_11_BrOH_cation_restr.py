
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_11_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.359196730413556e+01, -2.359203036472440e+01, -2.359242261500766e+01, -2.359148692240398e+01, -2.359196122330741e+01, -2.359196122330741e+01, -3.441119011892642e+00, -3.441189666507056e+00, -3.443336149743116e+00, -3.444891116789242e+00, -3.443478991991780e+00, -3.443478991991780e+00, -6.356642361420693e-01, -6.352376987140597e-01, -6.258103374205405e-01, -6.342072146597014e-01, -6.316805887524327e-01, -6.316805887524327e-01, -1.835671210818153e-01, -1.861907946419061e-01, -7.241530159737776e-01, -1.337355240772267e-01, -1.518329822890215e-01, -1.518329822890215e-01, -6.149743450842740e-03, -6.470084178261659e-03, -3.553335209757873e-02, -3.530133358337391e-03, -4.446711844647770e-03, -4.446711844647770e-03, -5.759382113887745e+00, -5.759850029175088e+00, -5.759463023642235e+00, -5.759873687854374e+00, -5.759588932542694e+00, -5.759588932542694e+00, -2.118419966508718e+00, -2.143966687905248e+00, -2.113723556136074e+00, -2.136971063141643e+00, -2.134754280668707e+00, -2.134754280668707e+00, -6.150263621046502e-01, -6.576666909165444e-01, -5.474037377828104e-01, -5.530393778855353e-01, -6.266269700536676e-01, -6.266269700536676e-01, -9.271487975238463e-02, -1.809302331192920e-01, -8.567142014164959e-02, -1.888884875605626e+00, -1.097433131074282e-01, -1.097433131074282e-01, -2.691158215598315e-03, -3.429238454217988e-03, -2.636601044538197e-03, -5.754344830119117e-02, -3.162608500052100e-03, -3.162608500052100e-03, -6.379544021597299e-01, -6.376933040804965e-01, -6.378210868241063e-01, -6.378912245000784e-01, -6.378561551457006e-01, -6.378561551457006e-01, -6.147774980682337e-01, -5.463854113630183e-01, -5.687863802418909e-01, -5.881705377069665e-01, -5.780743177080531e-01, -5.780743177080531e-01, -6.797642319422778e-01, -2.323896038853518e-01, -2.792766986959287e-01, -3.588176471817142e-01, -3.198721147576260e-01, -3.198721147576259e-01, -4.830632367143406e-01, -3.412075809407517e-02, -4.632765850758576e-02, -3.477457835870038e-01, -7.355325865760028e-02, -7.355325865760028e-02, -8.568219151012623e-03, -9.040053114337558e-04, -1.941762900034202e-03, -6.931507487632806e-02, -2.934034291078431e-03, -2.934034291078429e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_11_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.859236211330328e+01, -2.859248835442900e+01, -2.859295345178960e+01, -2.859107470680140e+01, -2.859207281823090e+01, -2.859207281823090e+01, -4.534016540884858e+00, -4.534151010021527e+00, -4.537738529588930e+00, -4.536405142225744e+00, -4.536201234626548e+00, -4.536201234626548e+00, -8.038525653689408e-01, -8.028306167029964e-01, -7.815823772273653e-01, -7.929738610683847e-01, -7.898884980707739e-01, -7.898884980707739e-01, -2.226349715700160e-01, -2.255685286353945e-01, -8.999901018163234e-01, -1.678208091856261e-01, -1.881771062061549e-01, -1.881771062061548e-01, -7.812806711497965e-03, -8.225237424439627e-03, -4.546898862936358e-02, -4.527248874962005e-03, -5.681141186930217e-03, -5.681141186930214e-03, -7.078322374315968e+00, -7.082637701119435e+00, -7.078483398977664e+00, -7.082294317634004e+00, -7.080528280701423e+00, -7.080528280701423e+00, -2.503283622225488e+00, -2.522356830986964e+00, -2.489131260392036e+00, -2.505735669277883e+00, -2.521111358271106e+00, -2.521111358271106e+00, -7.870783516185951e-01, -9.059001527671202e-01, -7.160937894900256e-01, -7.830646422124679e-01, -8.050700348086273e-01, -8.050700348086273e-01, -1.178615270355127e-01, -2.230928065779112e-01, -1.091356407982542e-01, -2.703476117859140e+00, -1.378885313222829e-01, -1.378885313222830e-01, -3.517317973306267e-03, -4.441611722793421e-03, -3.385736422059373e-03, -7.366923232144638e-02, -4.088672622617378e-03, -4.088672622617377e-03, -8.473972600905768e-01, -8.272854918393895e-01, -8.342268610208484e-01, -8.400783901437238e-01, -8.371408862672705e-01, -8.371408862672705e-01, -8.305206334683850e-01, -6.328334782615220e-01, -6.765172339624981e-01, -7.320990293481326e-01, -7.027497799512212e-01, -7.027497799512212e-01, -9.461715871488857e-01, -2.822788926402588e-01, -3.360114689594122e-01, -4.439051203849312e-01, -3.842307464984781e-01, -3.842307464984783e-01, -5.859193302196578e-01, -4.346522096762924e-02, -5.931888674910697e-02, -4.366192707958394e-01, -9.352376989511482e-02, -9.352376989511482e-02, -1.110461496748563e-02, -1.197646571017002e-03, -2.479400219117502e-03, -8.788900844435069e-02, -3.777746092048736e-03, -3.777746092048734e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_11_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.712867749100244e-08, -1.712858450930597e-08, -1.712813098650553e-08, -1.712952491201670e-08, -1.712880011449450e-08, -1.712880011449450e-08, -1.424881503985104e-05, -1.425162318491541e-05, -1.432541180195365e-05, -1.429769962156879e-05, -1.430355046735425e-05, -1.430355046735425e-05, -4.615572248066097e-03, -4.600150591547378e-03, -4.245806113450384e-03, -4.540052907352841e-03, -4.464285895372617e-03, -4.464285895372617e-03, -6.477578786022697e-01, -6.562908358678562e-01, -1.066581539504352e-03, -4.540267991790987e-01, -5.418285804565278e-01, -5.418285804565279e-01, -1.526785178664567e+02, -1.397463312467629e+02, -3.145407309224727e+00, -3.500204761516052e+02, -2.745654238325829e+02, -2.745654238325826e+02, -5.134788717476820e-06, -5.135138942063880e-06, -5.134888797646388e-06, -5.135193347399222e-06, -5.134927372842522e-06, -5.134927372842522e-06, -1.299435028712001e-04, -1.313499134109731e-04, -1.293300443103266e-04, -1.307943020982017e-04, -1.310206623734144e-04, -1.310206623734144e-04, -2.432082804016915e-02, -2.058265166274042e-02, -2.675014881320326e-02, -2.703234483702597e-02, -2.381036932515389e-02, -2.381036932515389e-02, -5.842903733141849e-01, -3.102530059071930e-01, -6.584597658454125e-01, -2.143977893494961e-04, -7.231495018359179e-01, -7.231495018359180e-01, -3.450753288801570e+02, -2.957473569961883e+02, -1.646322569470041e+03, -1.380721089562476e+00, -6.343416784587365e+02, -6.343416784587364e+02, -3.279927499546782e-02, -3.299772706944532e-02, -3.294455085075706e-02, -3.288776771516265e-02, -3.291756149501795e-02, -3.291756149501795e-02, -3.619213184161697e-02, -4.655939110355201e-02, -4.540379876438954e-02, -4.262965691734759e-02, -4.419828365582359e-02, -4.419828365582359e-02, -1.619464588590150e-02, -2.308679582342267e-01, -1.849888757673276e-01, -1.228519058616035e-01, -1.651865329450367e-01, -1.651865329450368e-01, -5.428691468065789e-02, -3.630878294166895e+00, -1.796366856105436e+00, -1.810421854069778e-01, -1.192696006061204e+00, -1.192696006061204e+00, -4.030584146650250e+01, -2.017478565756536e+03, -2.163540896519253e+03, -1.426901985875330e+00, -9.432087200731024e+02, -9.432087200731046e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_11_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.287695905113661e-03, 2.287694821616481e-03, 2.287710320102335e-03, 2.287727722832414e-03, 2.287715695274414e-03, 2.287715695274414e-03, 6.286604413739562e-03, 6.288551219315723e-03, 6.342149646968703e-03, 6.342361555480860e-03, 6.333555642589194e-03, 6.333555642589194e-03, 8.179948807405940e-03, 8.145934103434692e-03, 7.665864186549124e-03, 9.373675524216356e-03, 8.820789921746388e-03, 8.820789921746388e-03, 5.962965850777722e-02, 6.212930538146010e-02, -3.287048879134054e-04, 1.429541210468951e-02, 2.647051164932816e-02, 2.647051164932826e-02, 5.271410341936233e-04, 5.587618339295559e-04, 1.948084658253443e-03, 2.091144306876042e-04, 3.407100570377092e-04, 3.407100570377067e-04, 9.630294932158355e-03, 9.628833271232290e-03, 9.630485407100103e-03, 9.629183007252236e-03, 9.629426890949163e-03, 9.629426890949163e-03, 1.541984001758322e-02, 1.607585819010769e-02, 1.539124068212324e-02, 1.601015650163233e-02, 1.579625977275675e-02, 1.579625977275675e-02, 6.311836356481720e-02, 6.359170470580605e-02, 4.903403738917973e-02, 5.043223559460970e-02, 6.475144194714302e-02, 6.475144194714302e-02, 6.325174456571269e-03, 2.799289601426064e-02, 5.552973284122803e-03, 1.608078560454876e-02, 1.389176612424336e-02, 1.389176612424340e-02, 6.861480491506394e-05, 1.430414982833624e-04, 4.039935650407343e-04, 3.501268221008989e-03, 2.471054471965986e-04, 2.471054471966041e-04, 8.229072780615229e-02, 8.335507456630528e-02, 8.300899764586009e-02, 8.269916900691786e-02, 8.285596295106591e-02, 8.285596295106591e-02, 8.292583361938270e-02, 8.647424359586832e-02, 8.944261754677120e-02, 8.858349191277974e-02, 8.920044518806827e-02, 8.920044518806818e-02, 5.616188302274445e-02, 4.381224317494785e-02, 5.623958287062834e-02, 6.689414612923966e-02, 6.953746607048028e-02, 6.953746607048034e-02, 7.217063986938979e-02, 2.089530641257050e-03, 2.427915942436646e-03, 8.782625633814886e-02, 6.610495564519695e-03, 6.610495564519689e-03, 3.008432409677154e-04, 9.308800544649986e-06, 2.247687321678146e-04, 6.954798515981678e-03, 3.092417784705198e-04, 3.092417784705221e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
