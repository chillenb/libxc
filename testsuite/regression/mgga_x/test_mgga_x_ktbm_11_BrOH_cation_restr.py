
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_11_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.117059491861257e+01, -2.117070672527735e+01, -2.117120078223145e+01, -2.116954091717047e+01, -2.117041101507777e+01, -2.117041101507777e+01, -3.120206692405683e+00, -3.120275740113750e+00, -3.122159976039697e+00, -3.121679133818315e+00, -3.121406200215354e+00, -3.889613064284341e+00, -5.890578157622925e-01, -7.324045535805395e-01, -7.085257728675242e-01, -7.164736914725860e-01, -7.147477151551829e-01, -7.147477151551829e-01, -1.858876948205873e-01, -1.891109653796145e-01, -7.032412070050118e-01, -1.371467086492916e-01, -1.555891145579808e-01, -1.555891145579808e-01, -6.153012895292448e-03, -6.476353149173150e-03, -3.578137391512506e-02, -3.553400918594861e-03, -4.465188033059471e-03, -4.465188033059471e-03, -5.762469322215638e+00, -5.762901374348679e+00, -5.762486025885501e+00, -5.303821096791340e+00, -5.762690064076284e+00, -5.762690064076284e+00, -1.732433734289991e+00, -1.748959913565981e+00, -1.720458157630655e+00, -1.734797480814568e+00, -1.747537020257424e+00, -2.196321551438091e+00, -6.572413484070599e-01, -7.085869058426224e-01, -6.080879926943163e-01, -6.321164354346742e-01, -6.673130443157623e-01, -5.657238253306808e-01, -8.833184521265355e-02, -1.829778777293163e-01, -8.196022422938326e-02, -2.147323952654765e+00, -1.111809269322064e-01, -1.111809269322064e-01, -2.661912153633607e-03, -3.473757571104335e-03, -2.656229835051867e-03, -5.567993131871583e-02, -3.106678296560047e-03, -3.199924917595176e-03, -6.446403186094856e-01, -6.441052580929933e-01, -6.199323809240072e-01, -6.444842014907594e-01, -6.444122999567845e-01, -6.444122999567845e-01, -6.276108790810779e-01, -5.518608628580038e-01, -5.767569999010930e-01, -5.985290878882303e-01, -5.877678502984269e-01, -5.140420295881335e-01, -7.449408107684942e-01, -1.966689647150840e-01, -2.861384407417023e-01, -3.074175259362468e-01, -3.335938348157537e-01, -3.335938348157537e-01, -4.082092414986972e-01, -3.424336998363528e-02, -4.673355188518596e-02, -3.751506112100473e-01, -7.024647406674231e-02, -7.439244410854109e-02, -8.683992321883140e-03, -9.285441393527611e-04, -1.949070963511763e-03, -6.981259049750338e-02, -2.960933041593820e-03, -2.960933041593818e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_11_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.106446429017213e+01, -3.106457325611490e+01, -3.106507542661152e+01, -3.106345527928986e+01, -3.106430170289672e+01, -3.106430170289672e+01, -4.556740167280310e+00, -4.556974815080542e+00, -4.563233919321660e+00, -4.561119109738495e+00, -4.560872059534793e+00, -4.434250079244398e+00, -7.649715754889921e-01, -8.651544690318659e-01, -8.437615161182841e-01, -8.501025493014502e-01, -8.487769705235771e-01, -8.487769705235771e-01, -2.244589785733945e-01, -2.278207722563068e-01, -8.714876529320070e-01, -1.702342836475532e-01, -1.912938729117554e-01, -1.912938729117555e-01, -7.810551675734257e-03, -8.220917767992737e-03, -4.534550062335761e-02, -4.510871789036760e-03, -5.668240882607364e-03, -5.668240882607364e-03, -7.074487788534313e+00, -7.078843124933764e+00, -7.074728266755868e+00, -7.608926999863322e+00, -7.076674105268780e+00, -7.076674105268780e+00, -2.460097992629012e+00, -2.499114458468882e+00, -2.430651396328243e+00, -2.465258263128701e+00, -2.496214009942222e+00, -2.515691793686551e+00, -7.553040655888391e-01, -8.504988733309466e-01, -6.925294466566136e-01, -7.269496658798746e-01, -7.711217540338793e-01, -8.472982185943410e-01, -1.144553632528907e-01, -2.247480470114780e-01, -1.065628741117557e-01, -2.491025560621853e+00, -1.386665361163905e-01, -1.386665361163904e-01, -3.549114764746101e-03, -4.409777609262398e-03, -3.371921856266963e-03, -7.326230916379266e-02, -4.141916667107843e-03, -4.062122251419264e-03, -8.385904344912046e-01, -8.189584197288349e-01, -8.567994860556558e-01, -8.314259767532445e-01, -8.285535564949293e-01, -8.285535564949293e-01, -8.137944365002013e-01, -6.295055987557041e-01, -6.691526735071388e-01, -7.201262728450525e-01, -6.925814476651126e-01, -7.618473863612600e-01, -8.810141984247730e-01, -2.439740809114735e-01, -3.404215079075084e-01, -4.351452923574950e-01, -3.886748501124928e-01, -3.886748501124927e-01, -5.990872139721061e-01, -4.340213303124912e-02, -5.916337232271824e-02, -4.273254629042220e-01, -9.141618887588893e-02, -9.362000023782580e-02, -1.102304301243526e-02, -1.178764758887021e-03, -2.474275943475954e-03, -8.791622716054553e-02, -3.758733383997776e-03, -3.758733383997767e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_11_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.560267576151445e-08, -1.560262332460907e-08, -1.560228752650432e-08, -1.560307784700892e-08, -1.560267824364717e-08, -1.560267824364717e-08, -1.316382405661562e-05, -1.316645450926378e-05, -1.323488706459882e-05, -1.320244239550820e-05, -1.321141020582713e-05, -1.588452293179327e-05, -4.255571424944719e-03, -5.364535172533872e-03, -4.924418754873675e-03, -5.215694046483720e-03, -5.145696895000804e-03, -5.145696895000804e-03, -6.598799204971880e-01, -6.708813469053447e-01, -1.004402730897392e-03, -5.007261353228462e-01, -5.758776996058812e-01, -5.758776996058814e-01, -1.539976698431639e+02, -1.419685985804037e+02, -3.502271638011764e+00, -3.944110682764291e+02, -2.949919963377097e+02, -2.949919963377097e+02, -5.137269219376987e-06, -5.137591160300173e-06, -5.137317764979204e-06, -4.774973396108849e-06, -5.137419322005566e-06, -5.137419322005566e-06, -1.094285695764293e-04, -1.104999512874186e-04, -1.083282747893854e-04, -1.094343368037446e-04, -1.105608114177744e-04, -1.344182578947524e-04, -2.575325512819614e-02, -2.197049693362571e-02, -2.927180202545890e-02, -3.026799482923868e-02, -2.514077319528543e-02, -2.188539509964879e-02, -1.951799256861692e-01, -3.185884385094469e-01, -1.942534248186401e-01, -2.390798564313000e-04, -7.704561697801872e-01, -7.704561697801871e-01, 7.180334924772762e+01, -3.879824667801017e+02, -1.888129761225575e+03, -1.664226947679422e-01, 1.041986971413072e+02, -8.058273128066239e+02, -3.311595514279148e-02, -3.330036833578066e-02, -3.210577821638041e-02, -3.319977423456096e-02, -3.322766979467721e-02, -3.322766979467721e-02, -3.688503971902857e-02, -4.696789767542672e-02, -4.596156645112723e-02, -4.329687716133936e-02, -4.485138504706222e-02, -4.000141777537108e-02, -1.753000096852637e-02, -1.724961443429114e-01, -1.903331635834408e-01, -1.077679079392030e-01, -1.721026726436725e-01, -1.721026726436725e-01, -4.725851050972309e-02, -3.828918818833428e+00, -2.036707319638573e+00, -1.933484239551445e-01, -3.292559542804594e-01, -1.319285621315159e+00, -5.352146118947256e+01, -6.003061903692980e+03, -2.308185449029276e+03, -1.521923975517441e+00, -1.123618724678504e+03, -1.123618724678508e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_11_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.663425252788861e-03, 1.663444019939189e-03, 1.663516597909255e-03, 1.663239147895734e-03, 1.663386056030885e-03, 1.663386056030885e-03, 2.980714846216584e-03, 2.982555001881756e-03, 3.031155902723151e-03, 3.011208266376992e-03, 3.013658051283564e-03, 1.128588391349950e-02, -1.950746780420412e-03, 3.038632659676234e-02, 2.597248351432636e-02, 2.809135719371033e-02, 2.759534157862071e-02, 2.759534157862071e-02, 6.567263810035538e-02, 6.981652542263711e-02, -2.684593694426577e-03, 2.104686756526567e-02, 3.506459851792439e-02, 3.506459851792444e-02, 5.361679577166153e-04, 5.764359295879737e-04, 2.437192142893195e-03, 2.643409001776993e-04, 3.923695692996965e-04, 3.923695692996965e-04, 9.643214854738957e-03, 9.641575126673274e-03, 9.643135131232140e-03, 7.794220647074089e-03, 9.642390785526549e-03, 9.642390785526549e-03, 2.894100650752070e-03, 3.309449997119391e-03, 2.576983716772492e-03, 2.940255289096505e-03, 3.286299482132752e-03, 1.793083864586633e-02, 7.970230570869594e-02, 7.841631784132785e-02, 7.706553170420510e-02, 8.312092958074871e-02, 8.001345834286487e-02, 4.333312956481268e-02, -1.812704506508998e-03, 3.150287814339753e-02, -1.507554868938545e-03, 2.509956828326854e-02, 1.720903077995048e-02, 1.720903077995043e-02, -5.891717948926242e-08, 2.429312965758635e-04, 5.286388260892644e-04, -6.082810012250735e-04, -3.712904019616662e-07, 3.944364829507350e-04, 8.403277231979762e-02, 8.521143847235826e-02, 7.810405039001558e-02, 8.448625206990379e-02, 8.466082177490906e-02, 8.466082177490906e-02, 8.648955462107222e-02, 8.965169490198398e-02, 9.347162253727460e-02, 9.287802619559100e-02, 9.368078538291556e-02, 6.118377277603854e-02, 7.412130104589165e-02, -9.762245049413597e-03, 6.590301248874202e-02, 1.510944026365918e-02, 8.744806894383091e-02, 8.744806894383093e-02, 2.539385891700583e-02, 2.332675926900522e-03, 3.186016878239970e-03, 1.212781933228144e-01, -1.632091672887305e-03, 8.627801952652921e-03, 5.240055686943195e-04, 7.177503378859247e-05, 2.552647967589550e-04, 8.200656849842222e-03, 4.357358829830618e-04, 4.357358829830575e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
