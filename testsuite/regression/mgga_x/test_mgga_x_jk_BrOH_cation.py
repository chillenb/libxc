
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_jk_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_jk", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.074499313628618e+01, -2.074502200752357e+01, -2.074521345742572e+01, -2.074478234890743e+01, -2.074499928078417e+01, -2.074499928078417e+01, -3.727704073611589e+00, -3.727569875123032e+00, -3.724055361872642e+00, -3.725435017639250e+00, -3.725102551196422e+00, -3.725102551196422e+00, -1.066341835444057e+00, -1.060962796596600e+00, -9.498156650242737e-01, -8.918191433542868e-01, -1.044842984893961e+00, -1.044842984893961e+00, -2.218578856394631e-01, -2.235367460648038e-01, -6.060535719874686e-01, -2.008904968519242e-01, -2.247414167617383e-01, -2.247414167617383e-01, -4.872245490796276e-02, -4.928874050111202e-02, -9.648729733748984e-02, -4.767589356673418e-02, -4.933300498099036e-02, -4.933300498099043e-02, -4.799639029733688e+00, -4.714171455985600e+00, -4.836303545706272e+00, -4.818673455501413e+00, -4.917130762398440e+00, -4.446424776331978e+00, -1.820467083173745e+00, -4.010575615256434e+00, -2.236278790514345e+00, -2.240440493988960e+00, -2.251768395316909e+00, -2.128480130135135e+00, -5.417087222635248e-01, -5.899360229223889e-01, -5.008693845859395e-01, -2.192704767911403e-01, -6.594131116392870e-01, -3.338857631729621e+00, -1.008435865898075e-01, -1.351597160262994e-01, -8.176005350483331e-02, -1.672053533098399e+00, -1.545404784294341e-01, -1.439017137793230e-01, 3.681165250475467e-03, -3.154210569188767e-03, -2.423710754782290e-03, -6.544708676579225e-02, 3.906852568903897e-02, -3.263805679551684e-03, -5.471461340731701e-01, -5.440077978247160e-01, -5.451120772410094e-01, -5.460190137345722e-01, -5.455666047123611e-01, -5.455663686019865e-01, -5.323138155447885e-01, -5.301174924664267e-01, -4.734241597154046e-01, -5.086101136172111e-01, -1.186236872292876e+00, -4.876102867571110e-01, -6.196509804680660e-01, -2.050457276488168e-01, -2.451190285765116e-01, -3.266599771437284e-01, -6.996459880388123e-02, -4.433435079565213e-01, -5.055979863423011e-01, -4.830599908394523e-02, -1.251932112420828e-01, -3.717005847145416e-01, -7.203787237930279e-02, -1.170126845359438e-01, -9.486400727817406e-03, -4.276592690894111e-03, -2.271092520294118e-03, -9.092522393183702e-02, -3.834905363488497e-03, -3.349547743320469e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_jk_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_jk", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.612172532819011e+01, -2.612168256539069e+01, -2.612180522278002e+01, -2.612174061178158e+01, -2.612208326706584e+01, -2.612213273974792e+01, -2.612118037426342e+01, -2.612098211749493e+01, -2.612177184637384e+01, -2.612145853081133e+01, -2.612177184637384e+01, -2.612145853081133e+01, -4.664469016159845e+00, -4.665262535645690e+00, -4.664125356847484e+00, -4.665091019686669e+00, -4.658106192323746e+00, -4.657200357049324e+00, -4.658089905834107e+00, -4.658654351971579e+00, -4.664648644261750e+00, -4.653326287977607e+00, -4.664648644261750e+00, -4.653326287977607e+00, -2.886417715847304e+00, -3.158820951346012e+00, -2.775556122437257e+00, -3.153834500358655e+00, -2.097884610961436e+00, -1.776275109115368e+00, -1.528759463867939e+00, -1.519597482298485e+00, -5.172377773585462e+00, -1.168469834913408e+00, -5.172377773585462e+00, -1.168469834913408e+00, -2.784610052514821e-01, -2.750170172658610e-01, -2.808780334756303e-01, -2.773054614304966e-01, -1.198392093881838e+00, -1.255416947850517e+00, -2.959969429423112e-01, -2.629029951837196e-01, -2.866313732942861e-01, -3.961618538442403e-01, -2.866313732942860e-01, -3.961618538442415e-01, -6.528614200927609e-02, -6.588231771707531e-02, -6.714400713878801e-02, -6.763649041438001e-02, -1.342249704902298e-01, -1.330637487812503e-01, -7.364278892013623e-02, -7.099839221892273e-02, -7.006653933390856e-02, -1.243327399776751e-01, -7.006653933390880e-02, -1.243327399776755e-01, -6.471106814319942e+00, -6.479464156485512e+00, -6.591865137350734e+00, -6.593513447807848e+00, -6.439057144175480e+00, -6.437947218835684e+00, -6.458285281067456e+00, -6.456004524826064e+00, -6.384970501866393e+00, -6.383213172365272e+00, -3.199044561963185e+01, -1.676210992232168e+01, -2.418817723104256e+00, -2.418245126271002e+00, -1.914576881242060e+01, -1.854709614759280e+01, -2.779379024421023e+00, -2.782311737090952e+00, -2.770991105034744e+00, -2.786660355454739e+00, -2.817437265234227e+00, -2.801008715913145e+00, -2.557852836146884e+00, -2.562143155253654e+00, -7.298259010037631e-01, -7.271613254642926e-01, -7.904577043838964e-01, -7.907081896707217e-01, -6.619278874170320e-01, -6.869586977010750e-01, -1.052184858998435e+00, -9.160451119269078e+00, -8.656652927710740e-01, -8.832263013398590e-01, -7.157472122868268e+02, -2.145888996069407e+01, -1.081436051705207e-01, -1.092279601660274e-01, -2.473962812580275e-01, -2.490933994556781e-01, -9.966614338945505e-02, -1.051221349583449e-01, -2.643661377854186e+00, -2.641501613507139e+00, -1.798820087760384e-01, -1.839734756714545e-01, -1.571936693583484e-01, -1.602085899620492e-01, -9.666539108817998e-03, -1.148798164995278e-02, -4.183997266361359e-03, -4.247720793094648e-03, -3.123538915319257e-03, -3.305748086069644e-03, -6.617378034042355e-02, -6.640330065935457e-02, -1.792960431014577e-02, -2.532195851597558e-01, -3.098632638453766e-03, -4.173567005114016e-03, -7.281127436063309e-01, -7.309273850089432e-01, -7.239218073513071e-01, -7.267484527948905e-01, -7.253921243079811e-01, -7.282235096039914e-01, -7.266190400939334e-01, -7.294295894766373e-01, -7.260030331721403e-01, -7.288236137094536e-01, -7.260033651657554e-01, -7.288238922606574e-01, -7.085747857582213e-01, -7.109171226422023e-01, -6.477561051001391e-01, -6.484449774809903e-01, -6.413250827419531e-01, -6.439499841635645e-01, -6.590103975060700e-01, -6.620417742574757e-01, -1.121832559768171e+01, -1.054059429757777e+01, -6.519141190269526e-01, -6.543427983181404e-01, -8.267084826623152e-01, -8.280431416598312e-01, -2.692717579242149e-01, -2.708559506611349e-01, -3.234308597335218e-01, -3.266965015484350e-01, -4.262462219108486e-01, -4.287576813531431e-01, -1.654681248256832e+00, -1.377636203507451e+00, -8.054648534672970e-01, -8.872379356752685e-01, -6.321492072612644e-01, -6.343983451131980e-01, -3.794039045476250e-02, -3.897552579915638e-02, -1.738522143382783e-01, -2.526304759649740e-01, -4.841524534552821e-01, -4.593057840624379e-01, -8.429848578287334e-02, -8.916265235867282e-02, -1.369684583647506e-01, -1.314161872721701e-01, -9.496704045141514e-03, -9.311787293164755e-03, 9.030836516314260e-04, 1.213841216655547e-04, -1.909362786632272e-03, -2.032454925276884e-03, -9.139140289898690e-02, -8.761603190214932e-02, -2.637336815413134e-03, -3.098159238960578e-03, -2.793132661572638e-03, -3.505185081350049e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_jk_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_jk", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.142003273474649e-08, 0.000000000000000e+00, -1.141987650171060e-08, -1.142002869309663e-08, 0.000000000000000e+00, -1.141987352362337e-08, -1.141978883157954e-08, 0.000000000000000e+00, -1.141959303439058e-08, -1.141983831011215e-08, 0.000000000000000e+00, -1.141965512432235e-08, -1.142004180393584e-08, 0.000000000000000e+00, -1.141946296275407e-08, -1.142004180393584e-08, 0.000000000000000e+00, -1.141946296275407e-08, 4.644393104617121e-06, 0.000000000000000e+00, 4.716724483888626e-06, 4.624398905063305e-06, 0.000000000000000e+00, 4.709221926540383e-06, 4.300327632729369e-06, 0.000000000000000e+00, 4.255136134517403e-06, 4.164493509478600e-06, 0.000000000000000e+00, 4.214813151331863e-06, 4.699828849963825e-06, 0.000000000000000e+00, 3.921782335485944e-06, 4.699828849963825e-06, 0.000000000000000e+00, 3.921782335485944e-06, 3.321436805057140e-01, 0.000000000000000e+00, 3.934896563885596e-01, 3.094839753265445e-01, 0.000000000000000e+00, 3.913778737635240e-01, 1.714132812692261e-01, 0.000000000000000e+00, 1.182296566013361e-01, 8.154971066393933e-02, 0.000000000000000e+00, 8.150762394124088e-02, 7.999853732747825e-01, 0.000000000000000e+00, 2.806941370306177e-02, 7.999853732747825e-01, 0.000000000000000e+00, 2.806941370306177e-02, 1.026350559528806e+00, 0.000000000000000e+00, 6.167195300352801e-01, 1.035543267620191e+00, 0.000000000000000e+00, 5.775892258604668e-01, 3.112323842228704e-02, 0.000000000000000e+00, 3.552461524450377e-02, 5.711978328353376e+00, 0.000000000000000e+00, 3.395018240347367e+00, 7.917908214406786e-01, 0.000000000000000e+00, 3.783987897895281e+01, 7.917908214406769e-01, 0.000000000000000e+00, 3.783987897895302e+01, 2.720642896421159e+04, 0.000000000000000e+00, 2.249485262298345e+04, 2.526967088971459e+04, 0.000000000000000e+00, 2.034104774516754e+04, 1.728568186499490e+02, 0.000000000000000e+00, 1.385072800575416e+02, 1.600274215043174e+05, 0.000000000000000e+00, 1.572149390676710e+05, 4.430769659757032e+04, 0.000000000000000e+00, 9.576055824083375e+05, 4.430769659757064e+04, 0.000000000000000e+00, 9.576055824083423e+05, 9.267585933308079e-07, 0.000000000000000e+00, 1.246677246222988e-06, 4.590699869494656e-06, 0.000000000000000e+00, 4.688277979799739e-06, -1.467238098164351e-07, 0.000000000000000e+00, -1.308476955162335e-07, 4.721467109916193e-07, 0.000000000000000e+00, 4.480825019117096e-07, -2.271717688282482e-06, 0.000000000000000e+00, -2.282326452256039e-06, 5.869218670456955e-04, 0.000000000000000e+00, 1.986154369668374e-04, -3.379913343460724e-06, 0.000000000000000e+00, -3.922277934196593e-06, 9.296029968306819e-03, 0.000000000000000e+00, 8.953881811786756e-03, 5.102750228512243e-05, 0.000000000000000e+00, 5.167779757793813e-05, 4.051959953315347e-05, 0.000000000000000e+00, 4.644092462937757e-05, 5.883836660813888e-05, 0.000000000000000e+00, 5.362028702888897e-05, -5.039760741616495e-05, 0.000000000000000e+00, -4.535494133126923e-05, 3.438168627710371e-03, 0.000000000000000e+00, 2.608874071200540e-03, 4.595617750367282e-03, 0.000000000000000e+00, 4.439218659455081e-03, 4.187325776539563e-03, 0.000000000000000e+00, 4.943997041308429e-03, 1.072486039456215e+00, 0.000000000000000e+00, 1.887370547793093e+01, 3.494871704598000e-02, 0.000000000000000e+00, 8.208027379742135e-02, 4.827318052655107e+02, 0.000000000000000e+00, 1.784531233281190e+01, -2.764292594792910e+00, 0.000000000000000e+00, -2.709860738358078e+00, 1.242662634270382e+00, 0.000000000000000e+00, 1.244443425160029e+00, -1.068971311696028e+00, 0.000000000000000e+00, -9.227748886567886e-01, 2.365525252548490e-03, 0.000000000000000e+00, 2.364987926454475e-03, 1.716670891619666e+00, 0.000000000000000e+00, 1.527570204154601e+00, -4.528177707397101e-01, 0.000000000000000e+00, -7.074352260392890e-01, 1.053193913212215e+05, 0.000000000000000e+00, 1.086545720570376e+05, 3.253055497842618e+01, 0.000000000000000e+00, 3.335750461308603e+01, -1.044241341167756e+02, 0.000000000000000e+00, -1.908488161951909e+02, -1.122121027462567e+01, 0.000000000000000e+00, -1.007786523067909e+01, 3.694529078161434e+05, 0.000000000000000e+00, 1.930481191192091e+06, -2.946285430000058e+03, 0.000000000000000e+00, -2.566299316348130e+03, 1.400471078084144e-07, 0.000000000000000e+00, 1.346059211528395e-07, -6.084482151148529e-07, 0.000000000000000e+00, -5.953079817444424e-07, -3.085089776147283e-08, 0.000000000000000e+00, -3.002944154120142e-08, 1.960826796379602e-05, 0.000000000000000e+00, 2.145423611377508e-05, -1.688583093779039e-06, 0.000000000000000e+00, -1.412564337041418e-06, 1.589499384238236e-08, 0.000000000000000e+00, 1.551308287447010e-08, -2.392554491290350e-08, 0.000000000000000e+00, -2.291452939079547e-08, -7.310783438598271e-03, 0.000000000000000e+00, -8.342124997635850e-03, 8.926324448448585e-03, 0.000000000000000e+00, 8.515361427516558e-03, -1.903167520340179e-02, 0.000000000000000e+00, -1.635276834576318e-02, 1.339471729435816e+01, 0.000000000000000e+00, 1.238506650757392e+01, 2.616713426805531e-03, 0.000000000000000e+00, 2.611299882420739e-03, 9.489093649729726e-04, 0.000000000000000e+00, 9.525595521453755e-04, -2.570100053128660e-02, 0.000000000000000e+00, -2.488087579175070e-02, -8.461098630682435e-03, 0.000000000000000e+00, -8.105505632733255e-03, -2.461172143307221e-02, 0.000000000000000e+00, -2.284373113617138e-02, 7.871690143896762e+00, 0.000000000000000e+00, 6.310322897640043e+00, 1.791493677645287e+00, 0.000000000000000e+00, 2.219363283911216e+00, 2.417014374897579e-02, 0.000000000000000e+00, 2.263805578655115e-02, -4.917735990418382e+01, 0.000000000000000e+00, -4.995191445009857e+01, 1.014525907104774e+02, 0.000000000000000e+00, 1.814464870996969e+02, 2.307517774528119e-01, 0.000000000000000e+00, 4.984141516238899e-02, -2.825448281984867e+00, 0.000000000000000e+00, -2.724929027205761e+00, 6.841718892800492e+00, 0.000000000000000e+00, 3.361129462032676e+00, -4.108134131855423e+02, 0.000000000000000e+00, -6.379310846524530e+02, -2.289985145797753e+06, 0.000000000000000e+00, -1.462335596016977e+06, -2.863907287860876e+04, 0.000000000000000e+00, -2.609256683723172e+04, -7.068510412548844e+00, 0.000000000000000e+00, -7.799987505432692e+00, -2.096932083017785e+04, 0.000000000000000e+00, -1.543783776142722e+04, -1.239442297135124e+04, 0.000000000000000e+00, -8.390882740199042e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_jk_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_jk", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([-4.286369920484642e-05, -4.285960451563091e-05, -4.286257799673233e-05, -4.285879154235522e-05, -4.286017297059445e-05, -4.285500963016110e-05, -4.287277111811068e-05, -4.287108815605340e-05, -4.286297117618988e-05, -4.286552153865031e-05, -4.286297117618988e-05, -4.286552153865031e-05, -1.828733342527571e-03, -1.833819104436895e-03, -1.827856629194956e-03, -1.833677790464851e-03, -1.815788513793907e-03, -1.814688852770485e-03, -1.800232816513348e-03, -1.804291967376854e-03, -1.831236557789829e-03, -1.793149831797658e-03, -1.831236557789829e-03, -1.793149831797658e-03, -8.854619136738280e-02, -1.039123642245816e-01, -8.292411839998888e-02, -1.032075105696253e-01, -4.726042965042661e-02, -3.439086944944369e-02, -2.677784771602634e-02, -2.700220197832677e-02, -1.996600593698699e-01, -1.150513017796479e-02, -1.996600593698699e-01, -1.150513017796479e-02, -1.507594128823167e-02, -1.352410404035087e-02, -1.558433616933107e-02, -1.375695311178783e-02, -4.533025285536685e-03, -5.958354174614973e-03, -2.109546117948131e-02, -1.636932178883488e-02, -1.416475911677758e-02, -3.783166143779189e-02, -1.416475911677756e-02, -3.783166143779206e-02, -1.059897454209818e-02, -1.058455484263661e-02, -1.107845921603912e-02, -1.106189940633998e-02, -1.268404437382725e-02, -1.238717494576872e-02, -1.158946065508316e-02, -1.110648551551241e-02, -1.134483493631483e-02, -2.921304800876295e-02, -1.134483493631488e-02, -2.921304800876307e-02, -4.258585480938962e-06, -7.455870331267922e-06, -7.735447266187407e-05, -8.006554767973243e-05, -1.201349723984888e-07, -9.522749366066064e-08, -1.155416843824223e-06, -1.041866703332464e-06, -3.985965220562752e-05, -4.025435810152146e-05, -4.623448419772826e-02, -2.482678126091132e-02, -1.803094990911513e-07, -2.435939078135772e-07, -5.663641024625561e-02, -5.470089519244919e-02, -2.005396655508552e-03, -2.028519819506093e-03, -1.930691544452154e-03, -2.000722348206313e-03, -2.194540731191937e-03, -2.106604589794206e-03, -1.061735371906457e-03, -1.099742147068288e-03, -1.899906609873232e-05, -1.093640202586234e-05, -2.698147126833267e-05, -2.489539603815768e-05, -1.605023411818026e-05, -2.662297401670730e-05, -8.048175716879077e-02, -2.147996481448925e+00, -1.994643135765468e-02, -2.829022610193202e-02, -7.371754931850863e+01, -2.155181079848793e+00, -6.505899577422357e-04, -6.524392073697085e-04, -1.283099148827881e-03, -1.315154143682409e-03, -2.823030521269662e-05, -2.842606182948274e-05, -4.991617816540625e-03, -4.978127943088800e-03, -9.374683368864468e-03, -1.037346667400764e-02, -6.306556499309471e-03, -6.541259876150288e-03, -2.379168807211523e-04, -3.112197190098628e-04, -1.545212212269089e-10, -1.814909624804079e-10, -1.770575794801166e-10, -8.040015994053686e-10, -6.164675078636497e-04, -4.658264332772988e-04, -1.377641063554568e-03, -4.111666625428562e-02, -1.964807765657758e-07, -9.788792991687853e-07, -8.561778813076892e-15, -8.012988256255387e-15, -2.699335971176501e-13, -2.624318556806976e-13, -6.059957108455542e-16, -5.822084361290876e-16, -2.120686963898235e-10, -2.578235069811029e-10, -1.696886290859089e-12, -1.205008470245012e-12, -1.503564278927311e-16, -1.453330228548086e-16, -1.517537213852413e-16, -1.420261075339563e-16, -6.961531732779905e-03, -6.800141941251171e-03, -5.492146818648577e-05, -5.121595993555068e-05, -3.824867685921243e-04, -2.706063156956125e-04, -1.418223988553190e+00, -1.330443542752890e+00, -5.115939383796138e-06, -5.200246102239239e-06, -1.781505264421643e-06, -1.771137754276331e-06, -4.752626783743340e-06, -4.593759945168166e-06, -1.361302624417265e-06, -1.310035638644226e-06, -5.076847257150313e-05, -4.471339383139704e-05, -1.124104036887961e-01, -8.738997867119215e-02, -5.473723853066079e-02, -6.445694789098499e-02, -1.144186296999415e-02, -1.140996117518146e-02, -7.592635470295071e-04, -9.479491849594730e-04, -1.515769811759072e-02, -2.335542491258683e-02, -2.327028462114699e-02, -1.599546666902333e-02, -7.871425836939935e-05, -9.510579513188200e-05, -9.623200739356186e-03, -9.012673803004247e-03, -5.918019984717652e-06, -1.851251549633981e-05, -4.811451714467594e-04, -1.111528766932150e-04, -2.916918684551937e-06, -3.430530132042468e-06, -3.427416499049000e-03, -2.439846394432166e-03, -6.197946248329351e-06, -2.330543620749343e-05, -2.111189397543029e-06, -6.470487515457564e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
