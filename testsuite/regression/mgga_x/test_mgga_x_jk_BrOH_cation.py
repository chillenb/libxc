
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_jk_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_jk", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.155090188438052e+01, -2.155093886574148e+01, -2.155115895940601e+01, -2.155060735276912e+01, "nan", -2.068651256837815e+01, -3.389621186399076e+00, -3.227241113941425e+00, -3.227481194770037e+00, -3.227676614169321e+00, -3.389621874294067e+00, -3.227320520970641e+00, -6.224755551273601e-01, -6.217917318499447e-01, -6.052844821978889e-01, -6.102955412432515e-01, -6.546982023152063e-01, -6.105232604833426e-01, -1.963356427975255e-01, -1.983927169986198e-01, -7.686495458857888e-01, -1.220337062521129e-01, -1.543650566269586e-01, -1.589360394013274e-01, -1.466402734349431e-02, -1.480376266142493e-02, -3.253897736679383e-02, -1.291690711797168e-02, -6.817965767342835e-03, -2.106673057614117e-02, -4.831856972034755e+00, -5.014053858504257e+00, -4.831901157878502e+00, -4.832684218582399e+00, -4.832304828449256e+00, -5.013810420863916e+00, -1.948530447370606e+00, -1.961381123617954e+00, -1.806584890227700e+00, -1.952431839145374e+00, -1.828149288426568e+00, -1.959391310996144e+00, -5.445001859275744e-01, -5.915169503630886e-01, -5.041532341088746e-01, -5.405079898449812e-01, -5.539973038358869e-01, -5.539973038358870e-01, -8.472196226300438e-02, -1.609749746789633e-01, -7.848190119347720e-02, -1.866953921948911e+00, -9.958403546498042e-02, -1.177576260828195e-01, -1.175789780298024e-02, -3.159308522636395e-03, -7.864910210189298e-03, -5.271455152020039e-02, -3.039232633627018e-03, -3.039232633627019e-03, -5.540502622154952e-01, -5.570987228862734e-01, -5.564359037199282e-01, -5.460216623739769e-01, -5.560531481818731e-01, -5.455663709699059e-01, -5.323138148502693e-01, -4.569548474627258e-01, -4.785049466155215e-01, -4.998773499433734e-01, -5.113143809438957e-01, -4.889614313954424e-01, -6.201285134079875e-01, -2.267538779515355e-01, -2.442602460870889e-01, -3.440773680858101e-01, -2.805614783220635e-01, -2.805614783220635e-01, -4.472139279633498e-01, -3.109864416350354e-02, -5.740024708451184e-02, -3.284952744288270e-01, -6.722002282868364e-02, -6.722002282868365e-02, -1.954716727523420e-02, -8.444103660066541e-04, -9.392741511555431e-03, -7.886436020784710e-02, -2.791010453250328e-03, -6.315312048647146e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_jk_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_jk", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.665865422559452e+01, -2.665861877084774e+01, -2.665872664214007e+01, -2.665867141265868e+01, -2.665899371466762e+01, -2.665904422802915e+01, -2.665817458490880e+01, -2.665800045925052e+01, "nan", "nan", -2.665869562033883e+01, -2.642940295644244e+01, -4.362027378288224e+00, -4.302949508379306e+00, -4.303021671846731e+00, -4.302954630430289e+00, -4.303263962042434e+00, -4.303352554608536e+00, -4.303538619467307e+00, -4.303599017046092e+00, -4.361333278920428e+00, -4.303898465659674e+00, -4.302288686939610e+00, -4.303898465659674e+00, -8.283160119179346e-01, -8.315993188481663e-01, -8.270269015201128e-01, -8.310550262387753e-01, -8.098063999404922e-01, -8.042277084426908e-01, -8.128440759130906e-01, -8.146049848138635e-01, -8.379771594734902e-01, -8.124081565072871e-01, -8.379771594734902e-01, -7.848899158857379e-01, -2.207544656931548e-01, -2.288563481282298e-01, -2.231976690549818e-01, -2.325530973430787e-01, -9.727558091466608e-01, -9.835055245704585e-01, -1.615737915692080e-01, -1.638035887317735e-01, -2.194237681431400e-01, -1.177168683235354e-01, -2.194237681431399e-01, -1.276862344284138e-01, -1.115008441239643e-02, -7.679605592128279e-03, -1.151260546709493e-02, -8.112694597150364e-03, -4.210971901632834e-02, -4.446847981253337e-02, -7.802802245711095e-03, -4.271997079430854e-03, "nan", -6.413579152851891e-03, -1.024553356008565e-02, -3.668878950417012e-03, -6.443247388232253e+00, -6.441703982569793e+00, -6.469894575055036e+00, -6.442866228500801e+00, -6.443320661181120e+00, -6.441748517696648e+00, -6.444353051117142e+00, -6.442804306730631e+00, -6.443858736196126e+00, -6.442286897808373e+00, -6.443858736196126e+00, -6.468124873697664e+00, -2.421660661795793e+00, -2.491640045288188e+00, -2.439496443520397e+00, -2.508426906823825e+00, -2.406693160962725e+00, -2.410855756281448e+00, -2.494027791517623e+00, -2.426479146325727e+00, -2.442846224134334e+00, -2.432148115344833e+00, -2.510984324800024e+00, -2.432148115344833e+00, -7.269587322893815e-01, -7.250341102719995e-01, -7.885101613498294e-01, -7.888681292416646e-01, -6.594270017940528e-01, -6.836699984704526e-01, -6.867143445525189e-01, -7.080576953101333e-01, -7.560607248830665e-01, -7.183818227582803e-01, -7.560607248830666e-01, -7.183818227582804e-01, -1.124189649688644e-01, -1.134910067259421e-01, -2.140950824654201e-01, -2.151635384164040e-01, -1.016963922549506e-01, -1.071605894586807e-01, -2.361913245486296e+00, -2.360820024406943e+00, -1.286332785739801e-01, -1.362658513904136e-01, -1.286332785739801e-01, -1.462009016791652e-01, -3.259113952052674e-03, -6.509549143931228e-03, -4.180065989230876e-03, -4.243331451816018e-03, -5.351747533253341e-03, -3.310270306563135e-03, -7.006867251633944e-02, -7.049950357415852e-02, -3.192469351830964e-03, -4.384283002133068e-03, -3.192469351830965e-03, -4.384283002133069e-03, -7.281127271470658e-01, -7.235010282391454e-01, -7.197955245738308e-01, -7.267486089980876e-01, -7.198657217127445e-01, -7.282235160718626e-01, -7.266156366924574e-01, -7.294258582609023e-01, -7.199154277023304e-01, -7.288238892347747e-01, -7.260033620697657e-01, -7.288238892347746e-01, -7.085747870382300e-01, -7.109171238787465e-01, -6.079476799661236e-01, -6.105815013237419e-01, -6.365846399032912e-01, -6.394097860681794e-01, -6.653272271153959e-01, -6.676667215886838e-01, -6.575865886241437e-01, -6.531504949403306e-01, -6.507332112883358e-01, -6.531504949403306e-01, -8.261632492182961e-01, -8.275094986109123e-01, -2.703874958813616e-01, -2.857973957681301e-01, -3.240310803667124e-01, -3.272809317472799e-01, -4.289678376515547e-01, -4.418882312562979e-01, -3.741479295318066e-01, -3.740159428073748e-01, -3.741479295318066e-01, -3.740159428073748e-01, -5.589850914820422e-01, -5.752585539779888e-01, -4.132204502139598e-02, -4.160478090560013e-02, -6.383107393858077e-02, -5.744436834283027e-02, -4.194157540639887e-01, -4.177575972661838e-01, -8.699738808468019e-02, -9.186015970749539e-02, -8.699738808468017e-02, -9.186015970749541e-02, -1.033789451906820e-02, -1.528331895117630e-02, -1.124590922288522e-03, -1.127161251822379e-03, -2.288282255961573e-03, -4.882435534192706e-03, -8.335239259842157e-02, -9.344326783040059e-02, -3.023946492482391e-03, -4.018518532539025e-03, -5.219851305748120e-03, -4.018518532539019e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_jk_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_jk", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.051165815282152e-08, 0.000000000000000e+00, -1.051173247296165e-08, -1.051177256638616e-08, 0.000000000000000e+00, -1.051181527696676e-08, -1.051177669563898e-08, 0.000000000000000e+00, -1.051192232927329e-08, -1.051049671006874e-08, 0.000000000000000e+00, -1.051028799909168e-08, -1.051174472223245e-08, 0.000000000000000e+00, "nan", -1.051174472223245e-08, 0.000000000000000e+00, 1.450162651158726e-161, -1.196301177104484e-05, 0.000000000000000e+00, 1.913345527007743e-249, 1.027440430407788e-162, 0.000000000000000e+00, 1.788523858506509e-215, 4.116167213298367e-162, 0.000000000000000e+00, 1.786056869543074e-215, 3.988184824272554e-98, 0.000000000000000e+00, 1.605985258170420e-215, -1.196682148148752e-05, 0.000000000000000e+00, 3.372177214893660e-230, 1.478973449147361e-215, 0.000000000000000e+00, 1.781429278985135e-244, 3.870481697725327e-171, 0.000000000000000e+00, 4.888268350740438e-202, 5.371402634089855e-226, 0.000000000000000e+00, 9.894441124165353e-231, 1.205804676630390e-272, 0.000000000000000e+00, 1.472951102411553e-182, 1.726565051434561e-176, 0.000000000000000e+00, 8.518081543452714e-250, 1.173079960887712e-211, 0.000000000000000e+00, -4.785142168584483e-03, 1.288806580716079e-230, 0.000000000000000e+00, 1.150824148579293e-182, -5.695454598198862e-01, 0.000000000000000e+00, -5.223317642681555e-01, -5.636298723350380e-01, 0.000000000000000e+00, -5.103311670388864e-01, -3.526715163611330e-03, 0.000000000000000e+00, 1.680843876386688e-163, 5.343709611504276e-183, 0.000000000000000e+00, 3.059950808683562e-221, 3.842884453755482e-183, 0.000000000000000e+00, 2.891024603078349e-221, 5.415960101021480e-183, 0.000000000000000e+00, -2.486824044454430e+00, -7.381437024409480e+03, 0.000000000000000e+00, 1.460577594848948e-202, -6.548385674647914e+03, 0.000000000000000e+00, 5.402678917348298e-71, 3.185777642942575e-163, 0.000000000000000e+00, 1.404016547949707e-250, -3.118358761682149e+04, 0.000000000000000e+00, 4.284334500818732e-164, "nan", 0.000000000000000e+00, -6.743644823855440e+04, -1.024626688181899e+04, 0.000000000000000e+00, 4.690256273716617e-164, 1.478578177284581e-239, 0.000000000000000e+00, 1.347359986454466e-228, -3.729589997105754e-06, 0.000000000000000e+00, 6.467355960402206e-211, 5.448026663873416e-166, 0.000000000000000e+00, 2.254308812460986e-244, 3.376849819895085e-230, 0.000000000000000e+00, 9.931624596845890e-163, 4.335186344988874e-230, 0.000000000000000e+00, 2.330299329577235e-201, 7.197232145305660e-248, 0.000000000000000e+00, -3.722861071973739e-06, 2.656985326543755e-249, 0.000000000000000e+00, -6.554314105512832e-05, 2.187675919236941e-225, 0.000000000000000e+00, -6.467053019086296e-05, 3.811110991639468e-177, 0.000000000000000e+00, 6.646531558571086e-200, -6.374600281193440e-05, 0.000000000000000e+00, 3.499952352735397e-254, 3.410226188975998e-254, 0.000000000000000e+00, 2.108120188274537e-254, -6.577761810632011e-05, 0.000000000000000e+00, 6.767977165804773e-253, 1.444062638406621e-253, 0.000000000000000e+00, 6.838641508505775e-260, 3.828346772233828e-46, 0.000000000000000e+00, 5.677567917529289e-183, 3.593301736215106e-226, 0.000000000000000e+00, 1.395853494790941e-253, 9.972754439840645e-254, 0.000000000000000e+00, -3.537223742140467e-02, 4.853331368971233e-255, 0.000000000000000e+00, 1.136815716533850e-163, 1.921823088035463e-158, 0.000000000000000e+00, 3.708346274946480e-250, 4.180827641145221e-46, 0.000000000000000e+00, 4.951770342382434e-183, 3.457249020666987e-255, 0.000000000000000e+00, 5.033178724183795e-226, 1.805038247180687e-245, 0.000000000000000e+00, 1.496945749930443e-221, -3.644325579539923e-04, 0.000000000000000e+00, -3.654750385567254e-04, 6.679542572007088e-172, 0.000000000000000e+00, 1.527586799227930e-234, 4.869368529678316e-178, 0.000000000000000e+00, -1.791473436239242e+00, 5.728242661195142e-230, 0.000000000000000e+00, -6.751339081696700e+04, 2.379562878239349e-255, 0.000000000000000e+00, 3.836923173215562e-172, -1.380895141911353e+05, 0.000000000000000e+00, 5.340259530151335e-164, 3.308290912480909e-183, 0.000000000000000e+00, 2.433936869542517e-231, 1.645649334029217e-244, 0.000000000000000e+00, 3.716779586683256e-183, 2.610821958685475e-178, 0.000000000000000e+00, 1.435425792548601e-182, 1.665704190064180e-250, 0.000000000000000e+00, -7.470906397970227e-02, -4.176782647369477e-02, 0.000000000000000e+00, 5.693134641710023e-236, -4.885779076252699e-02, 0.000000000000000e+00, 1.349895112903523e-197, 3.863918646989386e-183, 0.000000000000000e+00, 5.050806188752231e-249, -5.278265128554686e-02, 0.000000000000000e+00, 4.810261501637636e-212, 3.534879986042873e-159, 0.000000000000000e+00, 1.409592592937290e-250, 1.721354561376322e-245, 0.000000000000000e+00, 1.277568988493185e-162, 1.745165901124548e-163, 0.000000000000000e+00, 8.759522432710914e-212, 5.844012094052482e-159, 0.000000000000000e+00, 1.103617179536261e-216, 5.017673781579873e-260, 0.000000000000000e+00, 3.758885396891087e-226, -2.628294373240513e-02, 0.000000000000000e+00, 2.547402536979741e-216, 4.081394939815991e-226, 0.000000000000000e+00, 1.580861208474602e-221, 1.308170335182861e-176, 0.000000000000000e+00, 2.885361303590001e-226, 1.031728626802730e-259, 0.000000000000000e+00, -2.006948124844762e-01, 8.726258370620479e-164, 0.000000000000000e+00, 2.369829961447396e-173, 6.710248977942932e-236, 0.000000000000000e+00, -7.694046373373213e-02, 4.818787036078564e-183, 0.000000000000000e+00, 3.497810719096153e-231, 3.684692728840331e-226, 0.000000000000000e+00, 4.379968089136657e-250, 7.611252563146447e-260, 0.000000000000000e+00, -2.908385951132174e-02, 1.962555320646644e-245, 0.000000000000000e+00, 3.519887666808651e-46, -1.853915758469234e+01, 0.000000000000000e+00, 6.591551040735540e-217, -1.143808386031612e-01, 0.000000000000000e+00, 1.103783101007468e-176, 4.371701378712188e-183, 0.000000000000000e+00, 4.242178957809929e-178, 2.692849176555627e-221, 0.000000000000000e+00, 5.241530839086626e-231, 1.433070772530425e-202, 0.000000000000000e+00, -2.245098942225209e+03, 6.662521395901786e-246, 0.000000000000000e+00, 4.938552529697967e-169, 1.501451497918554e-250, 0.000000000000000e+00, -2.219623830758650e+05, 4.560662323593717e-212, 0.000000000000000e+00, -6.567532569906735e+00, 5.379577192031987e-164, 0.000000000000000e+00, 1.275794721514757e-162, -1.529750724974050e+05, 0.000000000000000e+00, 4.798763899534025e-230]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_jk_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_jk", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [-1.504262873943752e-04, -1.504267025566304e-04, -1.504286399970429e-04, -1.504284139180060e-04, -1.504322846063608e-04, -1.504347282826388e-04, -1.504057577825939e-04, -1.504008865639860e-04, -1.504278852441528e-04, "nan", -1.504278852441528e-04, -2.760354710491358e-311, -7.704230723583824e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -7.812203397019199e-190, 0.000000000000000e+00, -7.703276989796433e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.046630941873061e-03, 0.000000000000000e+00, 0.000000000000000e+00, -4.754428325355101e-03, -4.883941793790288e-03, -4.878267377676313e-03, -5.024069469240413e-03, -2.581765290201610e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -3.625185248907359e-03, -2.282148188032968e-03, 0.000000000000000e+00, -2.332983902554690e-03, -2.121780591707661e-152, 0.000000000000000e+00, 0.000000000000000e+00, -2.069093918620610e-03, 0.000000000000000e+00, 0.000000000000000e+00, -2.699963924994840e-03, -2.242881227725986e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -7.356025897831342e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -7.340927407978441e-04, 0.000000000000000e+00, -8.107945833878305e-04, 0.000000000000000e+00, -8.162235585998568e-04, 0.000000000000000e+00, 0.000000000000000e+00, -7.908631390495752e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -8.325948437758833e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.007811304994587e-91, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -8.521460532514067e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -6.844394521856460e-96, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -3.040967297612312e-03, -3.044492880494378e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -4.071096977961782e-03, 0.000000000000000e+00, -2.114026550256150e-03, 0.000000000000000e+00, 0.000000000000000e+00, -3.423951768921739e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.448908442453580e-02, -9.899241086155726e-03, 0.000000000000000e+00, -1.101521854264116e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.159193222538370e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -5.708878018897035e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -3.631856007416441e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -5.295078934760848e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -4.401507598031191e-03, 0.000000000000000e+00, -1.528368661594904e-98, -2.765400861435713e-03, 0.000000000000000e+00, -6.667668721538441e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.280490012768771e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.572594175182285e-03, 0.000000000000000e+00, -3.536785849304788e-03, 0.000000000000000e+00, 0.000000000000000e+00, -3.432369426230218e-03, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_jk_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_jk", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
