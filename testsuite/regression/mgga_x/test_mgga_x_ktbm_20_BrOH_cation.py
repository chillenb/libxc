
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_20_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_20", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.170746348237998e+01, -2.170759465743962e+01, -2.170816809406205e+01, -2.338196101750616e+01, -2.338276450394885e+01, -2.505846624697380e+01, -3.496175182483475e+00, -3.932469543897589e+00, -3.935212678966050e+00, -3.934462451116278e+00, -3.934133360625718e+00, -3.498232968238427e+00, -5.545452234981776e-01, -6.243374638690860e-01, -6.610830540673770e-01, -6.068529847345071e-01, -5.435463650591223e-01, -6.725700266816927e-01, -1.584614244117603e-01, -1.616647742800267e-01, -6.953381449944893e-01, -1.198035495312695e-01, -1.604292904987145e-01, -1.602630423877275e-01, -5.239718663991033e-03, -5.577144772999060e-03, -3.076650071527750e-02, -3.020697960987463e-03, -4.216689037453892e-03, -4.216689037453892e-03, -6.083838043539259e+00, -6.084277214950307e+00, -6.083854865256585e+00, -6.084242945061719e+00, -5.780951136788911e+00, -5.781222784641328e+00, -2.166610699947509e+00, -2.192294427231605e+00, -2.147192923529808e+00, -2.170184811373587e+00, -1.946296423774211e+00, -2.190271885347737e+00, -6.195798153579262e-01, -7.474520183480790e-01, -6.212280558233281e-01, -6.584747270992202e-01, -6.392408507765770e-01, -6.979417308882612e-01, -8.082052424321538e-02, -1.540662553993592e-01, -7.467458104938601e-02, -2.247737051396793e+00, -9.669112637404770e-02, -9.669112637404770e-02, -2.359036837968980e-03, -2.952904672531799e-03, -2.261427642075871e-03, -4.986307691238527e-02, -2.840765689815740e-03, -2.840765689815740e-03, -6.774958102133766e-01, -6.787691602029566e-01, -6.456944035862447e-01, -6.643834164016342e-01, -6.482294111371298e-01, -6.632025392116850e-01, -6.598911209158528e-01, -5.091476736861005e-01, -5.509817032524171e-01, -6.314905716162236e-01, -6.183381463484172e-01, -5.712118448460097e-01, -7.277035499843236e-01, -2.131086215016498e-01, -2.430126360115988e-01, -3.412750645361586e-01, -3.223235402041372e-01, -2.874198292426837e-01, -5.146959777055271e-01, -2.970444055351196e-02, -3.985189194714326e-02, -3.813738560584579e-01, -6.392161330378640e-02, -6.392161330378643e-02, -7.569177577520330e-03, -7.892189598866587e-04, -1.701413809875367e-03, -5.945975477805025e-02, -2.608733668887701e-03, -2.658109096810022e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_20_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_20", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.274113920099992e+01, -3.274124748086029e+01, -3.274126706862762e+01, -3.274134032764737e+01, -3.274168871750192e+01, -3.274194088697715e+01, -3.274024573782407e+01, -2.957524687684165e+01, -3.274121539912353e+01, -2.957602613947482e+01, -2.957631712900094e+01, -2.957602613947482e+01, -4.845716403051612e+00, -4.752601684304401e+00, -4.845694237330452e+00, -4.845662189022646e+00, -4.845232914877058e+00, -4.845199524947033e+00, -4.845811038436102e+00, -4.845878053628420e+00, -4.844989102678257e+00, -4.845544610794516e+00, -4.751396089524501e+00, -4.845544610794516e+00, -7.606944567010312e-01, -7.680983602681519e-01, -7.582829115314377e-01, -9.141705878767186e-01, -8.772346891060562e-01, -8.690556517298472e-01, -8.848326658204160e-01, -7.396068144395118e-01, -7.769337630916677e-01, -6.938937928322367e-01, -9.236826686391151e-01, -8.401502801630542e-01, -1.815670412086661e-01, -2.307192049279061e-01, -1.841866262615477e-01, -2.364695687636223e-01, -9.746016524314153e-01, -8.536675016858537e-01, -1.554124792718528e-01, -1.587594779837667e-01, -2.277515702313075e-01, -1.101330441691186e-01, -2.277515702313073e-01, -1.080819531209286e-01, -6.636745644819523e-03, -7.052422415601579e-03, -7.253616092813912e-03, -7.450264687667399e-03, -4.006488578871750e-02, -4.095051624725116e-02, -3.989248860752487e-03, -3.922772744226473e-03, -5.920474577113043e-03, -3.368967669861216e-03, -5.920474577113044e-03, -3.368967669861216e-03, -7.332672016438464e+00, -7.330933711354644e+00, -7.336954883139920e+00, -7.335071480368683e+00, -7.332957909116161e+00, -7.331110550239028e+00, -7.336630884786924e+00, -7.334867581909560e+00, -8.004402260685346e+00, -7.333003454602018e+00, -7.334826466379171e+00, -8.002450595080930e+00, -2.734077772680526e+00, -2.733966683071408e+00, -2.754136456421698e+00, -2.753353011649592e+00, -2.716579135543846e+00, -2.721593678880722e+00, -2.734584779824261e+00, -2.739577458168825e+00, -2.757786764205907e+00, -2.573019368539150e+00, -2.757786764205907e+00, -2.745939814886958e+00, -8.075984402125319e-01, -8.701967799265495e-01, -8.838054227965284e-01, -8.856799645266895e-01, -7.418698060304303e-01, -7.644947507916457e-01, -7.636153634452910e-01, -7.873130844554249e-01, -8.387289088715646e-01, -8.638296666947809e-01, -8.387289088715646e-01, -7.976096753244346e-01, -1.052009790200495e-01, -1.062436328250021e-01, -1.848400277599004e-01, -2.143859341684640e-01, -9.480698059992394e-02, -1.001504589966077e-01, -2.635576207610934e+00, -2.634395016774899e+00, -1.218149962390404e-01, -1.307080253644987e-01, -1.218149962390403e-01, -1.307080253644988e-01, -3.122521511019598e-03, -3.110083126089046e-03, -3.838348196288832e-03, -3.896438113133295e-03, -2.870255063687974e-03, -3.039724365241379e-03, -6.483054073373862e-02, -6.613240165869451e-02, -2.931460015276187e-03, -4.026018983341271e-03, -2.931460015276189e-03, -4.026018983341275e-03, -8.708917032242358e-01, -8.748469731801108e-01, -8.474253133499545e-01, -8.514497546431927e-01, -8.968352201779173e-01, -9.001903130598866e-01, -8.972421252345728e-01, -8.660793746220300e-01, -8.970504545955627e-01, -9.004001727613136e-01, -8.970504545955627e-01, -8.626650204856583e-01, -8.448214456748523e-01, -8.482640309975780e-01, -6.789704595696363e-01, -7.123513935799608e-01, -7.061777869727237e-01, -7.789987757021971e-01, -7.472014305520059e-01, -7.501029564531988e-01, -7.239245787011581e-01, -7.268200636943436e-01, -7.239245787011581e-01, -8.051620105972254e-01, -9.196219205373464e-01, -1.022660172866642e+00, -2.808672632839105e-01, -2.828749819489719e-01, -2.904258525706515e-01, -3.554267242601420e-01, -4.480921051584016e-01, -4.869530718281963e-01, -4.185029130888996e-01, -4.185245778418671e-01, -4.185029130888996e-01, -3.634016983948556e-01, -6.291158067361858e-01, -6.326556861578995e-01, -3.931875096879724e-02, -3.958681450625118e-02, -5.125572386471159e-02, -5.299255431421436e-02, -4.636415437913911e-01, -4.681500904613720e-01, -8.099372570017631e-02, -8.585457478862904e-02, -8.099372570017632e-02, -8.585457478862914e-02, -9.900890490938128e-03, -1.025955629927967e-02, -1.032629002716922e-03, -1.034989152433566e-03, -2.192377765373268e-03, -2.331753813520874e-03, -7.728407847182928e-02, -7.832702615670190e-02, -2.776739104100047e-03, -3.690108142707240e-03, -2.776739104100041e-03, -3.849647098745759e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_20_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_20", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.948692300530443e-08, 0.000000000000000e+00, -3.949030878352862e-08, -3.948687982636080e-08, 0.000000000000000e+00, -3.949027672146516e-08, -3.948646574929562e-08, 0.000000000000000e+00, -3.948975989600766e-08, -3.948699112971170e-08, 0.000000000000000e+00, -4.543633508635310e-08, -3.948692325187450e-08, 0.000000000000000e+00, -4.543486245405534e-08, -4.543175135881904e-08, 0.000000000000000e+00, -4.543486245405534e-08, -3.721478749874992e-05, 0.000000000000000e+00, -2.888749598049158e-05, -3.722497845714972e-05, 0.000000000000000e+00, -3.721488862497227e-05, -3.742381375973507e-05, 0.000000000000000e+00, -3.745783920991082e-05, -3.733891069916073e-05, 0.000000000000000e+00, -3.733709395019643e-05, -3.721592839057416e-05, 0.000000000000000e+00, -3.751350033508602e-05, -2.889244675847131e-05, 0.000000000000000e+00, -3.751350033508602e-05, -7.704749799944965e-03, 0.000000000000000e+00, -7.950238199776393e-03, -7.646600320252978e-03, 0.000000000000000e+00, -1.095968732417456e-02, -9.624516737508540e-03, 0.000000000000000e+00, -9.546441197916799e-03, -1.019013527355057e-02, 0.000000000000000e+00, -7.431974689757637e-03, -7.945246345072467e-03, 0.000000000000000e+00, -6.291807659371837e-03, -1.096266277843647e-02, 0.000000000000000e+00, -9.177949456815722e-03, -6.993324698254805e-01, 0.000000000000000e+00, -1.276301817009900e+00, -7.292333326259702e-01, 0.000000000000000e+00, -1.318538721918636e+00, -2.197626075832593e-03, 0.000000000000000e+00, -1.740549798429001e-03, -6.556885239574348e-01, 0.000000000000000e+00, -7.854264401141189e-01, -9.578857516356346e-01, 0.000000000000000e+00, -5.969212847519002e-01, -9.578857516356341e-01, 0.000000000000000e+00, 3.257581220670538e-01, -1.028594575676573e+02, 0.000000000000000e+00, -9.140328501638584e+01, 3.161086453321482e+02, 0.000000000000000e+00, -8.391398151010196e+01, 6.485626505133726e+00, 0.000000000000000e+00, -2.482257563546500e+00, -2.417188495250468e+02, 0.000000000000000e+00, -2.512332338887395e+02, -1.256630849419774e+02, 0.000000000000000e+00, -5.052323315538189e+02, -1.256630849419774e+02, 0.000000000000000e+00, -5.052323315538191e+02, -1.371976982961776e-05, 0.000000000000000e+00, -1.373301199283702e-05, -1.372363279694711e-05, 0.000000000000000e+00, -1.373675399840792e-05, -1.372013295137659e-05, 0.000000000000000e+00, -1.373324802584906e-05, -1.372343933563046e-05, 0.000000000000000e+00, -1.373663906860312e-05, -1.237403204863309e-05, 0.000000000000000e+00, -1.373488497820202e-05, -1.372165255844368e-05, 0.000000000000000e+00, -1.238586238760334e-05, -3.008888059385965e-04, 0.000000000000000e+00, -3.023419497475031e-04, -3.055928122193846e-04, 0.000000000000000e+00, -3.068769489584716e-04, -2.958134658409750e-04, 0.000000000000000e+00, -2.987097761008267e-04, -3.004067443850732e-04, 0.000000000000000e+00, -3.032315819824011e-04, -3.071606521174993e-04, 0.000000000000000e+00, -2.336183204491919e-04, -3.071606521174993e-04, 0.000000000000000e+00, -3.054218577904324e-04, -6.424246240623553e-02, 0.000000000000000e+00, -5.350603645942940e-02, -5.786986966798399e-02, 0.000000000000000e+00, -5.825156226383862e-02, -6.978114199285411e-02, 0.000000000000000e+00, -7.043457621195429e-02, -7.855203057109178e-02, 0.000000000000000e+00, -7.417079013242599e-02, -5.982674347998846e-02, 0.000000000000000e+00, -5.613696598113276e-02, -5.982674347998846e-02, 0.000000000000000e+00, -6.868414219012016e-02, -7.306814147057654e-01, 0.000000000000000e+00, -7.236101394213266e-01, -2.469058401294340e-01, 0.000000000000000e+00, -5.113069282201633e-01, -7.910760249423122e-01, 0.000000000000000e+00, -7.986711989263968e-01, -6.121587839251697e-04, 0.000000000000000e+00, -6.134573252529445e-04, -8.761632704479636e-01, 0.000000000000000e+00, -1.179302697599808e+00, -8.761632704479639e-01, 0.000000000000000e+00, -1.179302697599809e+00, 1.226263530014763e+03, 0.000000000000000e+00, -3.247847136306067e+02, -2.542061499611980e+02, 0.000000000000000e+00, -2.315771874716986e+02, -1.221911794947179e+03, 0.000000000000000e+00, -1.142400950731406e+03, -1.355014258773935e+00, 0.000000000000000e+00, 2.046059978417280e+00, -5.071494486494816e+02, 0.000000000000000e+00, -4.816096070078851e+02, -5.071494486494818e+02, 0.000000000000000e+00, -4.816096070078854e+02, -9.046785086050912e-02, 0.000000000000000e+00, -8.913060701387418e-02, -9.058122689044092e-02, 0.000000000000000e+00, -8.927354957097487e-02, -8.618199150903633e-02, 0.000000000000000e+00, -8.502286199699868e-02, -8.688161445434327e-02, 0.000000000000000e+00, -8.924508020122229e-02, -8.653458985185339e-02, 0.000000000000000e+00, -8.535599513448074e-02, -8.653458985185339e-02, 0.000000000000000e+00, -8.927005148079417e-02, -1.005975738613215e-01, 0.000000000000000e+00, -9.934346609293228e-02, -1.157699283586937e-01, 0.000000000000000e+00, -9.155316044741343e-02, -1.184260975678357e-01, 0.000000000000000e+00, -9.746638060553239e-02, -1.152918570371931e-01, 0.000000000000000e+00, -1.138771133549086e-01, -1.176302054095006e-01, 0.000000000000000e+00, -1.163066858174566e-01, -1.176302054095006e-01, 0.000000000000000e+00, -9.914452599944391e-02, -4.559413435442153e-02, 0.000000000000000e+00, -3.964075518511645e-02, -4.203715947599211e-01, 0.000000000000000e+00, -4.192708266418375e-01, -2.592972970077547e-01, 0.000000000000000e+00, -3.743828884605324e-01, -2.278115858523758e-01, 0.000000000000000e+00, -2.934535061656736e-01, -3.633417314990527e-01, 0.000000000000000e+00, -3.672593249764388e-01, -3.633417314990529e-01, 0.000000000000000e+00, -2.728656988450882e-01, -1.334264919935740e-01, 0.000000000000000e+00, -1.349747866176463e-01, 6.917924384954135e+00, 0.000000000000000e+00, 6.753501957098612e+00, -1.617802507780325e+00, 0.000000000000000e+00, -1.585238870346114e+00, -4.379700758914667e-01, 0.000000000000000e+00, -4.811787198666589e-01, -1.292589282277816e+00, 0.000000000000000e+00, -1.484242620930141e+00, -1.292589282277817e+00, 0.000000000000000e+00, -1.484242620930142e+00, 1.156135863850534e+02, 0.000000000000000e+00, 1.068505757336372e+02, -3.754965172572231e+03, 0.000000000000000e+00, -3.729635016234608e+03, 5.071738260695710e+03, 0.000000000000000e+00, 4.614430809646582e+03, 1.299319947993670e+00, 0.000000000000000e+00, 1.237185709841792e+00, -9.089373877551631e+02, 0.000000000000000e+00, -5.831053578349022e+02, -9.089373877551651e+02, 0.000000000000000e+00, 1.945117583910841e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_20_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_20", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.226733733798037e-03, 2.226933855900647e-03, 2.226755494284631e-03, 2.226949620067470e-03, 2.226812825790525e-03, 2.227035158763074e-03, 2.226569285272246e-03, 3.373104344129250e-03, 2.226748080349539e-03, 3.372995019817701e-03, 3.372969996679088e-03, 3.372995019817701e-03, 1.688282824930984e-02, 5.057278404218696e-03, 1.688610362646456e-02, 1.688249099919673e-02, 1.694965585020022e-02, 1.696081293385841e-02, 1.692516428807710e-02, 1.692501363675391e-02, 1.687823050108738e-02, 1.698177948888115e-02, 5.054025466857757e-03, 1.698177948888115e-02, 2.178181077649635e-03, 2.600627229717130e-03, 2.062196515772345e-03, 4.090886621867611e-02, 3.351933193264944e-02, 3.258997931205421e-02, 3.582080903929328e-02, 1.387757803471380e-03, 2.873285334938472e-03, -2.847231439192513e-04, 4.187757743109328e-02, 2.918003981634114e-02, -5.199880254856273e-03, 8.733873426588805e-02, -4.847318154021668e-03, 9.510787881690590e-02, 1.234801097203165e-02, -9.667991795479037e-04, 1.696561571456161e-02, 2.144441120954031e-02, 6.633037369483487e-02, 5.483293133349824e-03, 6.633037369483473e-02, -1.236657944779495e-03, 1.634801066930134e-04, 1.744238173739761e-04, -1.106842312908495e-06, 1.889342622430442e-04, -8.967243058967673e-05, 1.018711611835971e-03, 8.315431995359748e-05, 8.217486460410676e-05, 1.416324574528070e-04, 1.046944991689638e-04, 1.416324574528070e-04, 1.046944991689623e-04, 1.336193998038241e-02, 1.336506902849711e-02, 1.334783117372319e-02, 1.335143095137341e-02, 1.336098053727748e-02, 1.336447333469945e-02, 1.334888199393994e-02, 1.335209132900078e-02, 1.011102643041800e-02, 1.335824994877420e-02, 1.335485653841599e-02, 1.011331259651112e-02, 2.567533658203650e-02, 2.577037542157981e-02, 2.639699035624379e-02, 2.646748983678737e-02, 2.498684201484605e-02, 2.527959531700420e-02, 2.565321297535293e-02, 2.594320057460777e-02, 2.657690695338974e-02, 6.238233984222209e-03, 2.657690695338974e-02, 2.621899163267875e-02, 1.203918158567190e-01, 5.768762698081479e-02, 1.127166757271735e-01, 1.123006181226687e-01, 1.127072069496677e-01, 1.193966576135680e-01, 1.262008478469157e-01, 1.251121039149146e-01, 1.184112870810805e-01, 5.916433129308409e-02, 1.184112870810805e-01, 1.226096642707552e-01, 5.853371572116420e-03, 5.975989533050212e-03, -4.897033369016135e-03, 3.264257718306102e-02, 4.583715922064728e-03, 5.501341679641857e-03, 3.766706878051004e-02, 3.768612974503880e-02, 1.102950617882290e-02, 1.820812681200122e-02, 1.102950617882282e-02, 1.820812681200130e-02, -4.524646533191633e-08, 5.290320194642508e-05, 7.788530204262083e-05, 7.421919193237183e-05, 1.566511563269462e-04, 1.740236870093380e-04, 2.385163206974664e-03, -4.960336475173860e-04, 6.918854875891697e-05, 1.705752035651563e-04, 6.918854875891727e-05, 1.705752035651543e-04, 1.054802384831802e-01, 1.049057261164211e-01, 1.115886500793238e-01, 1.109387960505638e-01, 9.729840110909957e-02, 9.702023054695522e-02, 9.782296322223506e-02, 1.071374835016497e-01, 9.757467942098642e-02, 9.727955245582466e-02, 9.757467942098642e-02, 1.080165831376115e-01, 1.092136550007271e-01, 1.086561734736830e-01, 1.362302828249761e-01, 5.451816096854435e-02, 1.405061979476452e-01, 7.490288247768218e-02, 1.330740682731071e-01, 1.325111693982924e-01, 1.382131045120502e-01, 1.376656976436169e-01, 1.382131045120502e-01, 8.353278368637347e-02, 1.088026464607344e-01, 6.829248067288519e-02, 5.448021917531168e-02, 5.530765880265140e-02, 1.343494494610894e-03, 8.599013640212602e-02, 3.151069915539042e-02, 1.420445461620697e-01, 1.209534659161761e-01, 1.220110256619789e-01, 1.209534659161762e-01, 1.587741012953537e-02, 1.318205107899757e-01, 1.343466307831227e-01, -8.920567958677224e-05, -8.922655622538379e-05, 1.340459583810024e-03, 1.462171799092863e-03, 1.746526296505396e-01, 1.900705807006321e-01, 4.642409544278422e-03, 6.441536338888276e-03, 4.642409544278366e-03, 6.441536338888367e-03, -1.310428605589186e-06, -1.437090311332492e-06, 2.237316294742444e-05, 2.237496443777578e-05, -6.510332929863090e-08, -8.298298515284918e-08, -1.021642096018518e-03, -1.189503700276719e-03, 1.054297843778668e-04, 1.589510829250666e-04, 1.054297843778667e-04, -4.945467667889766e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
