
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_20_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_20", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.482888721739985e+01, -2.482896189003629e+01, -2.482943193668427e+01, -2.482832504102213e+01, -2.482888532214353e+01, -2.482888532214353e+01, -3.416778533824447e+00, -3.416910654066397e+00, -3.420704272733010e+00, -3.421861953792162e+00, -3.420394058726389e+00, -3.420394058726389e+00, -5.980413773662372e-01, -5.974036917651993e-01, -5.830212151047478e-01, -5.933684088803487e-01, -5.916809002419440e-01, -5.916809002419440e-01, -1.678426650921772e-01, -1.709634342306622e-01, -6.645455516382737e-01, -1.175081082160480e-01, -1.572531344153862e-01, -1.572531344153861e-01, -5.238718816480780e-03, -5.516065157882809e-03, -3.042982748309427e-02, -3.014626678108056e-03, -4.212484485011006e-03, -4.212484485011006e-03, -6.079714097536693e+00, -6.080200295100450e+00, -6.079816624974555e+00, -6.080242542013595e+00, -6.079920332010831e+00, -6.079920332010831e+00, -2.097358732249760e+00, -2.131073770585596e+00, -2.087969217462631e+00, -2.118661444473522e+00, -2.120495366724019e+00, -2.120495366724019e+00, -6.314450248176440e-01, -6.810898223849324e-01, -5.501162020720749e-01, -5.612009904214046e-01, -6.468694988264279e-01, -6.468694988264280e-01, -8.013289195339784e-02, -1.607292959499885e-01, -7.407532762601790e-02, -1.923817258562998e+00, -9.579065430051517e-02, -9.579065430051517e-02, -2.326132029681155e-03, -2.944143417137134e-03, -2.256431360860136e-03, -4.945800704791000e-02, -2.838841917536188e-03, -2.838841917536188e-03, -6.684495536150215e-01, -6.701287209233081e-01, -6.696670291743279e-01, -6.691722314740081e-01, -6.694274850003273e-01, -6.694274850003273e-01, -6.425688995591525e-01, -5.617545314792702e-01, -5.935753594447439e-01, -6.178302803333171e-01, -6.057393173553569e-01, -6.057393173553567e-01, -7.004295581511286e-01, -2.111244290731201e-01, -2.607409110393929e-01, -3.526284833495433e-01, -3.078899063465645e-01, -3.078899063465647e-01, -4.862942006022788e-01, -2.910949254789794e-02, -3.971216919137481e-02, -3.496698085603486e-01, -6.350943259549238e-02, -6.350943259549241e-02, -7.363756651283844e-03, -7.918958467709376e-04, -1.657680676602996e-03, -5.961012694457803e-02, -2.606235751039910e-03, -2.606235751039908e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_20_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_20", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.982823454302742e+01, -2.982756898731465e+01, -2.982836168198549e+01, -2.982766141110068e+01, -2.982865633034305e+01, -2.982811508536947e+01, -2.982721728563089e+01, -2.982628159735259e+01, -2.982831361665308e+01, -2.982693242487128e+01, -2.982831361665308e+01, -2.982693242487128e+01, -4.834975094937687e+00, -4.834674931618101e+00, -4.835180880539752e+00, -4.834797370853082e+00, -4.839056328215127e+00, -4.839777551178111e+00, -4.838402476007971e+00, -4.838400591764064e+00, -4.833749667985453e+00, -4.841961594811615e+00, -4.833749667985453e+00, -4.841961594811615e+00, -8.169636070450682e-01, -8.225684261064063e-01, -8.151815440286597e-01, -8.215853394621775e-01, -7.905955825863076e-01, -7.863685256028927e-01, -8.041062596142762e-01, -8.078864314828420e-01, -8.280124983991526e-01, -7.785031707917788e-01, -8.280124983991526e-01, -7.785031707917788e-01, -2.148776426761554e-01, -2.294309429084560e-01, -2.179500511228538e-01, -2.347179522375057e-01, -8.511358359876423e-01, -8.882611728815138e-01, -1.530221009314024e-01, -1.569493465941043e-01, -2.239782474235526e-01, -1.100306458585874e-01, -2.239782474235524e-01, -1.100306458585874e-01, -6.641768896601018e-03, -7.054712556941205e-03, -6.963293109887307e-03, -7.455521012882952e-03, -3.899593894990218e-02, -4.115664142382063e-02, -4.017588666630302e-03, -3.946747197929935e-03, -5.933844739545331e-03, -3.410507222835040e-03, -5.933844739545327e-03, -3.410507222835042e-03, -7.337892303752081e+00, -7.335854092986022e+00, -7.342124153382731e+00, -7.339942192541643e+00, -7.338056109999088e+00, -7.335943282504037e+00, -7.341689738998941e+00, -7.339659537788184e+00, -7.340110971436240e+00, -7.337913961914844e+00, -7.340110971436240e+00, -7.337913961914844e+00, -2.719399158749643e+00, -2.720157286854633e+00, -2.744895339718053e+00, -2.744653113609226e+00, -2.701736718959926e+00, -2.707476457439767e+00, -2.724346511763275e+00, -2.730102240697433e+00, -2.747355793765830e+00, -2.735086523788522e+00, -2.747355793765830e+00, -2.735086523788522e+00, -8.397917094410225e-01, -8.373242642617039e-01, -9.522954544414055e-01, -9.530419709490302e-01, -7.445682300050569e-01, -7.847087910025761e-01, -8.111610165893074e-01, -8.455507461170835e-01, -8.751644135974193e-01, -8.331107086164761e-01, -8.751644135974193e-01, -8.331107086164762e-01, -1.052227688577941e-01, -1.062447312957227e-01, -2.115697904007072e-01, -2.126137664224608e-01, -9.499635904547585e-02, -1.002245884228103e-01, -2.858325734169052e+00, -2.857200396651075e+00, -1.214086255348734e-01, -1.299941107799234e-01, -1.214086255348734e-01, -1.299941107799233e-01, -3.054055135325811e-03, -3.170825187331346e-03, -3.887627688323624e-03, -3.950283527651117e-03, -2.891221154702403e-03, -3.062957760889600e-03, -6.524605443562301e-02, -6.553521557225701e-02, -3.004785726185966e-03, -4.032600732276632e-03, -3.004785726185963e-03, -4.032600732276630e-03, -8.829269996649523e-01, -8.866121003350048e-01, -8.587332963775055e-01, -8.625273798763231e-01, -8.668578087385096e-01, -8.706734608874380e-01, -8.739480535119105e-01, -8.776305337404366e-01, -8.703721560429811e-01, -8.741193335201918e-01, -8.703721560429811e-01, -8.741193335201918e-01, -8.676209070246620e-01, -8.703853780853686e-01, -6.819346859660391e-01, -6.846861030278437e-01, -7.146046526231716e-01, -7.178508952599765e-01, -7.624773482573960e-01, -7.653891057031065e-01, -7.364874410863932e-01, -7.390975815051314e-01, -7.364874410863929e-01, -7.390975815051314e-01, -9.962216466518518e-01, -9.988958369041563e-01, -2.788088581357936e-01, -2.807220478415522e-01, -3.445277112043140e-01, -3.492464971355350e-01, -4.755321195657389e-01, -4.781054637862027e-01, -4.097857353184388e-01, -4.098445361219050e-01, -4.097857353184391e-01, -4.098445361219049e-01, -6.314783548965167e-01, -6.366158492264820e-01, -3.813615861426533e-02, -3.841833806374967e-02, -5.156321153841694e-02, -5.329094014700260e-02, -4.633033061613279e-01, -4.751190575524109e-01, -8.116751199268077e-02, -8.591299612596562e-02, -8.116751199268077e-02, -8.591299612596566e-02, -9.621122540708658e-03, -9.977120590080621e-03, -1.062928954613620e-03, -1.069925407080517e-03, -2.108915096148292e-03, -2.243317355740062e-03, -7.773594179167724e-02, -7.902781953634717e-02, -2.837734300291083e-03, -3.696293143015051e-03, -2.837734300291081e-03, -3.696293143015049e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_20_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_20", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.500637388029664e-08, 0.000000000000000e+00, -4.501064474417043e-08, -4.500617622115778e-08, 0.000000000000000e+00, -4.501050037272886e-08, -4.500548842177322e-08, 0.000000000000000e+00, -4.500952932597150e-08, -4.500776120064740e-08, 0.000000000000000e+00, -4.501241649762538e-08, -4.500627416918248e-08, 0.000000000000000e+00, -4.501121889154151e-08, -4.500627416918248e-08, 0.000000000000000e+00, -4.501121889154151e-08, -3.212523688203911e-05, 0.000000000000000e+00, -3.211355732983897e-05, -3.213509877468017e-05, 0.000000000000000e+00, -3.211959083584415e-05, -3.232180422329360e-05, 0.000000000000000e+00, -3.235246788533010e-05, -3.226635740903624e-05, 0.000000000000000e+00, -3.225972931679734e-05, -3.212437960546863e-05, 0.000000000000000e+00, -3.242616220926365e-05, -3.212437960546863e-05, 0.000000000000000e+00, -3.242616220926365e-05, -8.627403237507856e-03, 0.000000000000000e+00, -8.860367812348254e-03, -8.576980352599961e-03, 0.000000000000000e+00, -8.826914258941923e-03, -7.770248728169844e-03, 0.000000000000000e+00, -7.752270176722286e-03, -8.367177578553002e-03, 0.000000000000000e+00, -8.578905612140050e-03, -8.784128076265219e-03, 0.000000000000000e+00, -7.749205792270192e-03, -8.784128076265219e-03, 0.000000000000000e+00, -7.749205792270192e-03, -1.076291107691996e+00, 0.000000000000000e+00, -1.257793692890906e+00, -1.095356314869616e+00, 0.000000000000000e+00, -1.294208871485841e+00, -1.446423832027951e-03, 0.000000000000000e+00, -1.892093688922821e-03, -5.220427012120671e-01, 0.000000000000000e+00, -6.944193937615485e-01, -9.119778890527129e-01, 0.000000000000000e+00, -2.863420729160217e-01, -9.119778890527123e-01, 0.000000000000000e+00, -2.863420729160215e-01, -9.809203424474934e+01, 0.000000000000000e+00, -8.959121003395441e+01, -8.818084566174650e+01, 0.000000000000000e+00, -8.029389833496175e+01, -1.679472806103024e+00, 0.000000000000000e+00, -1.736962937681705e+00, -1.321063241327208e+02, 0.000000000000000e+00, -1.538387005911865e+02, -1.081152083857836e+02, 0.000000000000000e+00, -9.323226059426311e+01, -1.081152083857830e+02, 0.000000000000000e+00, -9.323226059426150e+01, -1.371001935606346e-05, 0.000000000000000e+00, -1.372381095987776e-05, -1.371399082519110e-05, 0.000000000000000e+00, -1.372765789052554e-05, -1.371061145477495e-05, 0.000000000000000e+00, -1.372421145601674e-05, -1.371400241078751e-05, 0.000000000000000e+00, -1.372768950303999e-05, -1.371178890493186e-05, 0.000000000000000e+00, -1.372570849752785e-05, -1.371178890493186e-05, 0.000000000000000e+00, -1.372570849752785e-05, -2.898450142690302e-04, 0.000000000000000e+00, -2.915761255077071e-04, -2.958899978885620e-04, 0.000000000000000e+00, -2.974082029429431e-04, -2.865816693309913e-04, 0.000000000000000e+00, -2.891974297923364e-04, -2.924026011108099e-04, 0.000000000000000e+00, -2.949981251231450e-04, -2.955741133726385e-04, 0.000000000000000e+00, -2.951637391515823e-04, -2.955741133726385e-04, 0.000000000000000e+00, -2.951637391515823e-04, -5.914531911530485e-02, 0.000000000000000e+00, -6.057890263678092e-02, -5.267898450198802e-02, 0.000000000000000e+00, -5.320899970800198e-02, -6.080734290668765e-02, 0.000000000000000e+00, -6.275433548070618e-02, -6.635112625997350e-02, 0.000000000000000e+00, -6.394296631791312e-02, -5.587715376039340e-02, 0.000000000000000e+00, -6.293331757283553e-02, -5.587715376039341e-02, 0.000000000000000e+00, -6.293331757283555e-02, -5.675739364673654e-01, 0.000000000000000e+00, -5.499798225490932e-01, -4.963258812342731e-01, 0.000000000000000e+00, -4.898278096498989e-01, -5.553864524026323e-01, 0.000000000000000e+00, -6.108320271607708e-01, -5.253848869441025e-04, 0.000000000000000e+00, -5.265234046076053e-04, -7.588640876533398e-01, 0.000000000000000e+00, -1.074736084452051e+00, -7.588640876533400e-01, 0.000000000000000e+00, -1.074736084452052e+00, 1.639544526075278e+02, 0.000000000000000e+00, 1.191393019598506e+02, -3.753153306463559e+01, 0.000000000000000e+00, -1.758124154689863e+01, -6.516512429516175e+02, 0.000000000000000e+00, -5.834450691474244e+02, -7.618145154903632e-01, 0.000000000000000e+00, -1.068385638337643e+00, 4.264594539017648e+02, 0.000000000000000e+00, -4.330769198060960e+02, 4.264594539017630e+02, 0.000000000000000e+00, -4.330769198060971e+02, -8.923166131130723e-02, 0.000000000000000e+00, -8.794494342038280e-02, -8.940013856750459e-02, 0.000000000000000e+00, -8.813882108665012e-02, -8.940203130152195e-02, 0.000000000000000e+00, -8.813020376580911e-02, -8.935667798609545e-02, 0.000000000000000e+00, -8.807568828147248e-02, -8.938438114687651e-02, 0.000000000000000e+00, -8.810788061314138e-02, -8.938438114687651e-02, 0.000000000000000e+00, -8.810788061314138e-02, -9.789580206790482e-02, 0.000000000000000e+00, -9.676520957156587e-02, -1.143246735377808e-01, 0.000000000000000e+00, -1.134179446212295e-01, -1.163592793878228e-01, 0.000000000000000e+00, -1.152112888368998e-01, -1.127542128851089e-01, 0.000000000000000e+00, -1.113853856805327e-01, -1.151434265169522e-01, 0.000000000000000e+00, -1.139318654128467e-01, -1.151434265169522e-01, 0.000000000000000e+00, -1.139318654128467e-01, -4.064505989020985e-02, 0.000000000000000e+00, -4.136382955184089e-02, -4.113308940798197e-01, 0.000000000000000e+00, -4.100218274771442e-01, -3.547834650454939e-01, 0.000000000000000e+00, -3.594059887435649e-01, -2.719634642893653e-01, 0.000000000000000e+00, -2.664845574350185e-01, -3.428855900274140e-01, 0.000000000000000e+00, -3.464929952906258e-01, -3.428855900274143e-01, 0.000000000000000e+00, -3.464929952906259e-01, -1.252661444057012e-01, 0.000000000000000e+00, -1.273492553915194e-01, -2.368556122970237e+00, 0.000000000000000e+00, -2.225281352872915e+00, -1.029199233053838e+00, 0.000000000000000e+00, -1.043102614871801e+00, -3.935793199144041e-01, 0.000000000000000e+00, -4.452715429343893e-01, -9.914040282450569e-01, 0.000000000000000e+00, -1.192199002785036e+00, -9.914040282450569e-01, 0.000000000000000e+00, -1.192199002785037e+00, -3.846640629193597e+00, 0.000000000000000e+00, -1.847122528976715e+00, 4.742164044475052e+03, 0.000000000000000e+00, 6.546644605417439e+03, -1.164547807636368e+03, 0.000000000000000e+00, -1.047708575656885e+03, -1.204588185244824e+00, 0.000000000000000e+00, -1.473660323317340e+00, 5.182483749082207e+02, 0.000000000000000e+00, -5.228234445923761e+02, 5.182483749082230e+02, 0.000000000000000e+00, -5.228234445923761e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_20_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_20", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_20_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_20", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [3.289901788685818e-03, 3.290159955797969e-03, 3.289887685231931e-03, 3.290149673713922e-03, 3.289881441235790e-03, 3.290129759739506e-03, 3.290042201674129e-03, 3.290334456158654e-03, 3.289892389130280e-03, 3.290281071277175e-03, 3.289892389130280e-03, 3.290281071277175e-03, 9.647944554051498e-03, 9.637756955698502e-03, 9.651758855151231e-03, 9.639546870200084e-03, 9.717825177034253e-03, 9.727536190918071e-03, 9.726052058296995e-03, 9.718812437369752e-03, 9.641741308410393e-03, 9.778799598372469e-03, 9.641741308410393e-03, 9.778799598372469e-03, 1.362092030708322e-02, 1.405086293621351e-02, 1.353676541391235e-02, 1.396747898938105e-02, 1.201926322725681e-02, 1.226591476245164e-02, 1.432848869567512e-02, 1.481352497083991e-02, 1.368312526829458e-02, 1.430413383362684e-02, 1.368312526829458e-02, 1.430413383362684e-02, 5.962977175263759e-02, 8.322413022218744e-02, 6.197266626545620e-02, 8.933311318315872e-02, 7.712901409782380e-04, 1.650327967824121e-03, 1.016607854600186e-02, 1.607072543818792e-02, 5.649438416323842e-02, 1.784287529225434e-03, 5.649438416323831e-02, 1.784287529225422e-03, 1.540472234553270e-04, 1.700953574353898e-04, 1.581840383955343e-04, 1.787834729880302e-04, 5.305491281663069e-04, 6.614818079472119e-04, 4.018269272958508e-05, 4.532678840939265e-05, 1.174896039927064e-04, 1.537440554172658e-05, 1.174896039927028e-04, 1.537440554172875e-05, 1.333816651969225e-02, 1.334265162793540e-02, 1.332437747967584e-02, 1.332931950837446e-02, 1.333776924268016e-02, 1.334245893148370e-02, 1.332592319966707e-02, 1.333033381773031e-02, 1.333083541300597e-02, 1.333591777242307e-02, 1.333083541300597e-02, 1.333591777242307e-02, 2.260736238031633e-02, 2.278496202533268e-02, 2.368677432942141e-02, 2.382794169682215e-02, 2.243296270370568e-02, 2.264917246036175e-02, 2.342742263841211e-02, 2.365496052506950e-02, 2.334085352130631e-02, 2.336587023889404e-02, 2.334085352130631e-02, 2.336587023889404e-02, 9.296575501540336e-02, 9.461715339926835e-02, 8.650192159884605e-02, 8.723390398757239e-02, 6.760873406718179e-02, 8.033429545556199e-02, 6.968193170670804e-02, 7.658755906349077e-02, 9.664076082874308e-02, 9.333728707772607e-02, 9.664076082874312e-02, 9.333728707772608e-02, 3.955066631848070e-03, 3.895017080726498e-03, 2.908344463587568e-02, 2.902181500557603e-02, 2.745412305541759e-03, 3.661152004459939e-03, 2.287196759824693e-02, 2.288956742197141e-02, 8.470218024800335e-03, 1.497410318254596e-02, 8.470218024800290e-03, 1.497410318254597e-02, -1.510239780257470e-05, -1.269775763026097e-05, 9.050056344309572e-06, 4.358672964636665e-06, 7.360412519263371e-05, 7.781294505787182e-05, 1.165089632444894e-03, 1.759127022821736e-03, -3.146585893516338e-05, 1.494135672468255e-04, -3.146585893516510e-05, 1.494135672468257e-04, 1.022801903597045e-01, 1.018123485826887e-01, 1.081881153706240e-01, 1.076494900011526e-01, 1.061818654530492e-01, 1.056530021298287e-01, 1.044480342232481e-01, 1.039644491566590e-01, 1.053200334356309e-01, 1.048143632210138e-01, 1.053200334356309e-01, 1.048143632210138e-01, 1.026631463419679e-01, 1.023694423336418e-01, 1.311422410886214e-01, 1.312551388067286e-01, 1.336373542505286e-01, 1.333301650710746e-01, 1.254768539136489e-01, 1.249996128185550e-01, 1.303191759038853e-01, 1.300846647956297e-01, 1.303191759038851e-01, 1.300846647956297e-01, 7.726989557803764e-02, 7.884993670233997e-02, 5.083014722318871e-02, 5.149316376867958e-02, 7.134257845837010e-02, 7.438380893477568e-02, 1.003606891951075e-01, 9.945297473958366e-02, 9.793237581464513e-02, 9.870034469923029e-02, 9.793237581464515e-02, 9.870034469923028e-02, 1.066278889657740e-01, 1.108215447795606e-01, 7.420796376682431e-04, 7.060433709211815e-04, 7.761032970629016e-04, 8.782620926506233e-04, 1.189776315617107e-01, 1.469257263385677e-01, 3.180795723988629e-03, 4.613606258713884e-03, 3.180795723988637e-03, 4.613606258713904e-03, 1.437788284323019e-05, 7.892818335687901e-06, -1.254016041646145e-05, -1.306837102803919e-05, 5.503582137823800e-05, 5.943653819718246e-05, 3.456319049378851e-03, 4.713454469231335e-03, -3.633173924778048e-05, 1.387300872135232e-04, -3.633173924777666e-05, 1.387300872135228e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
