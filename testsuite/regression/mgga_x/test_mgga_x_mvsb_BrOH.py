
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mvsb_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvsb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.393717482299884e+01, -2.393736131451883e+01, -2.393822426483340e+01, -2.393518326641761e+01, -2.393727274353143e+01, -2.393727274353143e+01, -3.011505688428035e+00, -3.011463919000866e+00, -3.010308813421646e+00, -3.010998135050392e+00, -3.011508419748304e+00, -3.780305250330242e+00, -5.992339696896560e-01, -7.180249770478837e-01, -6.965586284131039e-01, -7.031646857032651e-01, -7.185468273759670e-01, -7.185468273759670e-01, -1.958943510870027e-01, -1.987463662196896e-01, -7.257252750237064e-01, -1.294210532582744e-01, -1.967478867895261e-01, -1.967478867895261e-01, -3.512622815902817e-03, -3.762330004659386e-03, -2.722385833734725e-02, -1.024303831956326e-03, -3.724522529513408e-03, -3.724522529513408e-03, -5.669442354399266e+00, -5.670461271544923e+00, -5.669549918018602e+00, -6.151758742247845e+00, -5.669960178478293e+00, -5.669960178478293e+00, -1.715731378270385e+00, -1.723899821632450e+00, -1.712515122323730e+00, -1.718911597049718e+00, -1.725280076340913e+00, -2.141316145935783e+00, -6.316915609975929e-01, -6.866155210046788e-01, -5.990573985442731e-01, -6.253540895398056e-01, -6.561524042084094e-01, -6.300233854450712e-01, -8.974780028913480e-02, -1.927642648843027e-01, -8.857587507549158e-02, -2.087764895215783e+00, -1.080820766641251e-01, -1.080820766641251e-01, -4.373986569400004e-03, -1.220794843401093e-03, -9.399801191150760e-04, -5.599648373084663e-02, -4.554631798048000e-03, -1.089824168390526e-03, -6.524117975115561e-01, -6.489153385650743e-01, -6.671763553074855e-01, -6.511367949850575e-01, -6.506528911693866e-01, -6.506528911693866e-01, -6.314696743597533e-01, -5.472325340526240e-01, -5.719234413036939e-01, -5.947168265784176e-01, -5.831129752676218e-01, -5.860407937023955e-01, -7.198221441894125e-01, -2.092799287796134e-01, -2.961924774751740e-01, -3.073892517594352e-01, -3.363121459980756e-01, -3.363121459980756e-01, -3.909890563407446e-01, -2.405101060687663e-02, -3.732809168064914e-02, -3.603067125520877e-01, -7.288864665217870e-02, -6.711175189949664e-02, -3.962119357629209e-03, -1.770693950135319e-04, -5.045022768058589e-04, -6.398371590067869e-02, -8.909651784450457e-04, -8.909651784450435e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mvsb_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvsb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.984870433668883e+01, -3.984913263725561e+01, -3.985108351163329e+01, -3.984410134526710e+01, -3.984892943497980e+01, -3.984892943497980e+01, -3.667793159409659e+00, -3.667656333658900e+00, -3.663650700837972e+00, -3.665499521434765e+00, -3.667772628618938e+00, -3.289356515527176e+00, -7.676115300317439e-01, -8.406561293352767e-01, -8.356532074673333e-01, -8.345431711045890e-01, -8.407424406018194e-01, -8.407424406018194e-01, -2.355946386976847e-01, -2.371317577234025e-01, -9.420465462798893e-01, -2.013654244308883e-01, -2.360824517475161e-01, -2.360824517475161e-01, -6.503919926712942e-03, -6.966176602808946e-03, -5.015064063747036e-02, -1.896773970049101e-03, -6.896172086844128e-03, -6.896172086844126e-03, -7.994258256899784e+00, -7.990576121755494e+00, -7.993841052627451e+00, -8.169710713164619e+00, -7.992414231786579e+00, -7.992414231786579e+00, -2.129532399603290e+00, -2.132984055243818e+00, -2.128380454782931e+00, -2.131150215403208e+00, -2.132915923255504e+00, -2.127932899183494e+00, -2.104478199515492e+00, -1.018723707657935e+00, -2.677342221775326e-01, -1.199449299086634e+00, -1.197381985894214e+00, -9.651135161771851e-01, -1.190105613520360e-01, -2.563760459893968e-01, -1.174206329653227e-01, -3.727416341404349e+00, -1.722490807041805e-01, -1.722490807041805e-01, -5.831874195498980e-03, -2.260620275996121e-03, -1.740615273902464e-03, -7.449998047194253e-02, -6.072719360474623e-03, -2.018096448457152e-03, -8.785183975808373e-01, -8.840147677535073e-01, -8.525247078529353e-01, -8.802937246401386e-01, -8.810380619908751e-01, -8.810380619908751e-01, -8.536577883895080e-01, -5.929969309540247e+03, -9.502662793535600e-01, -8.619376994789966e-01, -8.887205781167632e-01, -9.544832152865941e-01, -1.130099821509572e+00, -2.707412457937234e-01, -3.429336723601790e-01, -3.807766454746225e-01, -3.653420457325671e-01, -3.653420457325671e-01, -4.730398517969013e-01, -4.437353358655844e-02, -6.842243783353065e-02, -2.990155136635075e-01, -9.672767141365582e-02, -1.176828278999539e-01, -7.336348141236526e-03, -3.278947576782346e-04, -9.342263441811445e-04, -1.122301175232019e-01, -1.649860131915195e-03, -1.649860131915191e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mvsb_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvsb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.519243900400698e-08, -1.519340990974209e-08, -1.519752872634726e-08, -1.518174734990267e-08, -1.519295132578721e-08, -1.519295132578721e-08, -1.779496091335680e-06, -1.778988488172706e-06, -1.763223169078023e-06, -1.768818506292639e-06, -1.779321381642637e-06, -3.343884536226272e-05, -1.364009256830703e-03, -4.652112602626484e-03, -4.029703003798974e-03, -4.365277905496910e-03, -4.669706996755001e-03, -4.669706996755001e-03, -6.269473359294989e-01, -6.455688090080204e-01, -5.181945467834311e-04, -5.990114634623286e-02, -6.317270384192089e-01, -6.317270384192089e-01, 4.165133970753521e+01, 3.867869975105178e+01, 2.439420540368459e+00, 6.534453502056762e+01, 4.040964058698485e+01, 4.040964058698483e+01, 4.643858937797290e-06, 4.622039016042009e-06, 4.641450865245175e-06, 1.402044444928817e-07, 4.632863978304434e-06, 4.632863978304434e-06, -2.057652461843000e-05, -1.973854201279423e-05, -2.090752315395065e-05, -2.027326473823441e-05, -1.954492474290332e-05, -2.037995399391252e-04, 2.859205939696008e-01, 2.858963429287360e-02, -1.222787941533944e-01, 1.016489984469800e-01, 7.321693234261369e-02, -3.984163703399376e-03, -6.030875477672365e-01, -2.207631110442944e-01, -6.685456774625654e-01, 6.703164870749031e-04, -1.178975956289837e-02, -1.178975956289837e-02, -3.867634520986942e+02, 6.529998367603466e+01, 2.367601720867477e+02, -1.646005916583021e+00, -3.602327723442564e+02, 8.553822038433181e+01, 1.902824390588036e-02, 2.133868414495757e-02, 2.646815565465327e-02, 1.981722660142694e-02, 2.013289048529418e-02, 2.013289048529418e-02, 2.239372300423352e-02, 2.564396801656948e+03, 9.452971285304591e-02, 4.499058094298489e-02, 6.234558488179390e-02, -2.573118669614162e-02, 3.045968450471581e-02, -8.034548904773019e-02, -1.808082498280708e-01, -1.969950918748213e-02, -1.955296574426079e-01, -1.955296574426079e-01, -5.622643609195203e-03, 2.645767160866337e+00, 1.492130498047477e+00, -4.550865418748207e-01, -1.205752351700117e+00, 6.917252204043369e-01, 1.823444194454896e+01, 4.851385684705476e+02, 2.827455627108975e+02, 8.346443250679044e-01, 1.350625654767424e+02, 1.350625654767428e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mvsb_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvsb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [4.650890493273822e-03, 4.651098703441200e-03, 4.651998754653853e-03, 4.648611554326695e-03, 4.651000247342174e-03, 4.651000247342174e-03, -2.616471004172902e-03, -2.617674352753395e-03, -2.654074951088497e-03, -2.639699898365636e-03, -2.616792533088132e-03, 2.252298217684164e-02, -2.932116362973403e-03, 2.401047719029483e-02, 1.996820755034031e-02, 2.172183723785549e-02, 2.412758014265865e-02, 2.412758014265865e-02, 6.951640041923161e-02, 7.337344432250310e-02, -1.113052883381812e-03, 2.068389430076649e-02, 7.057583531091598e-02, 7.057583531091598e-02, 1.019364826971287e-03, 1.088152235386587e-03, 4.860693387684455e-03, 1.761788380050751e-04, 1.101681835902915e-03, 1.101681835902914e-03, -1.035652040755687e-02, -1.031348332533151e-02, -1.035174643287593e-02, -4.732353603978749e-04, -1.033486419445885e-02, -1.033486419445885e-02, -3.036175727154367e-03, -3.263426780491859e-03, -2.940132787052384e-03, -3.114397089519423e-03, -3.326089876645158e-03, 2.520886065770476e-02, -8.860896147177112e-01, -1.132641837806567e-01, 3.251516438932660e-01, -3.049917635836373e-01, -2.536689040955189e-01, 5.942531978682290e-02, -3.912220167653749e-04, 3.433734907424371e-02, -4.416279124874090e-04, -7.479726182494412e-02, 2.116123789934778e-02, 2.116123789934778e-02, -9.276540045576337e-08, 2.359500202019420e-04, 3.602144045570294e-04, -9.942381964898650e-05, -1.068340194843333e-07, 2.337916958197259e-04, -6.478025527701331e-02, -7.142694605078555e-02, -1.030478172337999e-01, -6.705025943798103e-02, -6.795882444920547e-02, -6.795882444920547e-02, -6.910770122564008e-02, -5.173586723418098e+03, -2.166918756457436e-01, -1.158074800844038e-01, -1.513267974541055e-01, 1.425976772986154e-01, -1.391209917780719e-01, -4.866637537863790e-03, 6.433240250191233e-02, -1.779323807768202e-02, 9.604178721048377e-02, 9.604178721048377e-02, -2.274718208221787e-02, 4.128952051374253e-03, 6.130270864406802e-03, 2.649520093283194e-01, -3.580914688092105e-04, 1.348032715874057e-02, 7.181234940530499e-04, 3.595990693372694e-05, 1.436873849170461e-04, 1.407572828395884e-02, 2.265858031958159e-04, 2.265858031958152e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
