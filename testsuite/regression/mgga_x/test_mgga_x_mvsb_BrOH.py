
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mvsb_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvsb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.349437450651005e+01, -2.349441490796154e+01, -2.349451527184202e+01, -2.349384415882411e+01, -2.349439662331351e+01, -2.349439662331351e+01, -3.085038358099614e+00, -3.084967092388920e+00, -3.082975453337487e+00, -3.084796427179463e+00, -3.085028103183896e+00, -3.085028103183896e+00, -6.229030173534770e-01, -6.226614707697380e-01, -6.176931588945880e-01, -6.237396170910903e-01, -6.228136057286919e-01, -6.228136057286919e-01, -1.922741026430494e-01, -1.945087625974080e-01, -7.375643980446059e-01, -1.295235139146056e-01, -1.929110946851820e-01, -1.929110946851820e-01, -3.520109283387132e-03, -3.772570124026107e-03, -2.768871317505743e-02, -1.078737603340858e-03, -3.733254319980118e-03, -3.733254319980118e-03, -5.672284796691735e+00, -5.673258974268192e+00, -5.672351457324866e+00, -5.673111190050530e+00, -5.672828387237995e+00, -5.672828387237995e+00, -2.049615713661549e+00, -2.069968577711829e+00, -2.051920380659723e+00, -2.068373863266049e+00, -2.058608785409886e+00, -2.058608785409886e+00, -5.997087515943099e-01, -7.292605529649905e-01, -4.771862153381969e-01, -6.029965195864189e-01, -6.599365980734495e-01, -6.599365980734495e-01, -8.669283491086080e-02, -1.911624715372882e-01, -8.644340902656403e-02, -2.023476970279586e+00, -1.083563975600188e-01, -1.083563975600188e-01, -1.047559554588580e-03, -1.268443171059485e-03, -9.538376328400340e-04, -4.496129361547605e-02, -1.148635700169452e-03, -1.148635700169452e-03, -6.569921930310367e-01, -6.538325581368380e-01, -6.549598674686307e-01, -6.558330055523861e-01, -6.553979056610655e-01, -6.553979056610655e-01, -6.410942260962003e-01, -5.111296326754832e-01, -5.950783156567748e-01, -6.085710508461648e-01, -6.011823180897602e-01, -6.011823180897602e-01, -7.274560967934918e-01, -2.451071351037260e-01, -2.890083486936108e-01, -3.329622852983857e-01, -3.203617957031477e-01, -3.203617957031476e-01, -4.220994794466413e-01, -2.427223425454639e-02, -3.811514419649224e-02, -2.975730272077777e-01, -6.810283731659826e-02, -6.810283731659826e-02, -4.161664120454885e-03, -1.903654006255414e-04, -5.096536338486961e-04, -6.501683369394885e-02, -9.418419927658410e-04, -9.418419927658385e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mvsb_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvsb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.407701644907831e+01, -3.407694766952255e+01, -3.407693089314575e+01, -3.407805280695990e+01, -3.407697774167511e+01, -3.407697774167511e+01, -3.355909149818165e+00, -3.355699554700363e+00, -3.349187594064134e+00, -3.347762491561578e+00, -3.355893782392864e+00, -3.355893782392864e+00, -7.424855976072823e-01, -7.418052376606122e-01, -7.221504419669066e-01, -7.173710906252967e-01, -7.422266578148101e-01, -7.422266578148101e-01, -2.365770217266056e-01, -2.378187418829839e-01, -9.391220885692556e-01, -1.905616295249312e-01, -2.369647757505550e-01, -2.369647757505550e-01, -6.543314133247248e-03, -7.019394613412978e-03, -5.203125024265270e-02, -2.057093652218250e-03, -6.941914203997159e-03, -6.941914203997159e-03, -7.990424088174120e+00, -7.986802728567040e+00, -7.990062388801435e+00, -7.987246392286384e+00, -7.988545136541945e+00, -7.988545136541945e+00, -2.094797420590941e+00, -2.092596568679394e+00, -2.147765727964449e+00, -2.144559189697005e+00, -1.987701470013101e+00, -1.987701470013101e+00, -1.018261479379454e+00, -1.196578976864316e+00, -4.930497015116230e-01, -9.562867560085718e-01, -1.168779677094494e+00, -1.168779677094494e+00, -1.498420232907805e-01, -2.560585323488607e-01, -1.481602941370327e-01, -3.193795808129072e+00, -1.717866001327190e-01, -1.717866001327190e-01, -1.988243588239120e-03, -2.418430428316460e-03, -1.799773211603192e-03, -8.366800517647539e-02, -2.190189009837361e-03, -2.190189009837361e-03, -8.719079485193061e-01, -8.768503011528217e-01, -8.748624150841507e-01, -8.734937204870096e-01, -8.741581134744011e-01, -8.741581134744011e-01, -8.385493756350989e-01, -1.963105038160819e+00, -8.875113819162965e-01, -8.370351157646679e-01, -8.510399491643358e-01, -8.510399491643356e-01, -1.212116654077923e+00, -3.044946443446320e-01, -3.440744362570967e-01, -2.761518862737684e-01, -3.296821599179364e-01, -3.296821599179364e-01, -2.300906297122277e-01, -4.538844230868178e-02, -7.133665488368858e-02, -2.865795464901019e-01, -1.203719170057891e-01, -1.203719170057891e-01, -7.936811400779757e-03, -3.614162600413011e-04, -9.576646441035125e-04, -1.148977143281957e-01, -1.795159755813448e-03, -1.795159755813444e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mvsb_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvsb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [2.383692305606271e-08, 2.383588094863297e-08, 2.382982013285082e-08, 2.384673208629062e-08, 2.383638764662887e-08, 2.383638764662887e-08, -5.648433377994539e-06, -5.647243319792291e-06, -5.613705676099498e-06, -5.681316943907451e-06, -5.647636300914955e-06, -5.647636300914955e-06, -3.460539832448923e-03, -3.488949754596551e-03, -4.368208327437405e-03, -4.786648707786561e-03, -3.471290857574788e-03, -3.471290857574788e-03, -5.036262241731252e-01, -5.138110884118292e-01, -7.281716267655102e-04, -7.149449263791595e-02, -5.051976060718394e-01, -5.051976060718394e-01, 4.563506702749938e+01, 4.334842723767073e+01, 4.005684035377712e+00, 1.529613003412460e+02, 4.464410073233779e+01, 4.464410073233785e+01, 4.669849388870745e-06, 4.647494525724179e-06, 4.667052714570422e-06, 4.649703952110988e-06, 4.659025956498291e-06, 4.659025956498291e-06, -1.554987172965626e-04, -1.625201511101642e-04, -1.463029955444947e-04, -1.527842189161730e-04, -1.787280095641850e-04, -1.787280095641850e-04, -5.086310535728292e-03, -2.913487835837031e-02, -6.705883196915362e-03, -7.372394734423412e-03, -3.071300462826346e-02, -3.071300462826346e-02, 6.276914686348821e-01, -1.814296023806011e-01, 6.595523295511989e-01, -6.662915637677201e-05, 1.777337534479460e-01, 1.777337534479460e-01, 1.606673753055288e+02, 1.381345617266699e+02, 3.647472916105098e+02, 2.583321523254907e+00, 2.011838270960380e+02, 2.011838270960380e+02, 2.055177667786884e-02, 2.318398712450328e-02, 2.217595273591563e-02, 2.144758117188651e-02, 2.180783977903867e-02, 2.180783977903867e-02, 2.631363945659683e-02, 3.556395683198935e-04, 1.336678876785784e-01, 5.687605045558128e-02, 8.358907233224482e-02, 8.358907233224482e-02, -1.451819764687518e-02, -1.751822937080664e-01, -1.439253527438858e-01, -1.766343087163252e-01, -2.041521769861840e-01, -2.041521769861839e-01, -9.212047150735320e-02, 3.655320763759440e+00, 2.660090485501924e+00, -1.171036148924463e-01, 1.318524221608481e+00, 1.318524221608483e+00, 4.199423727241879e+01, 1.254925282586581e+03, 3.952360887890686e+02, 1.628093248290369e+00, 3.231239337519616e+02, 3.231239337519622e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mvsb_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvsb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mvsb_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mvsb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-3.906598078878131e-03, -3.906439473306361e-03, -3.905404222724370e-03, -3.907967480792382e-03, -3.906517699672853e-03, -3.906517699672853e-03, -3.045619990482954e-03, -3.048141105487353e-03, -3.124574290823025e-03, -3.091797189332978e-03, -3.046323818552985e-03, -3.046323818552985e-03, 1.279881626206688e-03, 1.381886160710281e-03, 4.426380002220375e-03, 5.170908319604432e-03, 1.316897651844563e-03, 1.316897651844563e-03, 4.740099414122739e-02, 4.799660681040202e-02, -2.871017283936230e-04, 1.348238938382226e-02, 4.735526057661026e-02, 4.735526057661026e-02, 9.715226848142242e-04, 1.024227314502608e-03, 3.620394466884021e-03, 1.164573367797463e-04, 1.045210415886233e-03, 1.045210415886232e-03, -1.044988674027671e-02, -1.040497928957462e-02, -1.044372196712577e-02, -1.040890822761349e-02, -1.042887386567033e-02, -1.042887386567033e-02, 1.360471094193047e-02, 1.493242970805611e-02, 1.330174154594537e-02, 1.446091619929816e-02, 1.524186036542925e-02, 1.524186036542925e-02, 1.070536845616893e-01, 2.002517854916550e-01, -3.835435811772171e-02, 8.628172344205770e-02, 2.424235335698800e-01, 2.424235335698800e-01, 8.756865448636483e-03, 2.688955391035928e-02, 9.472543637677550e-03, 2.595980415933243e-02, 1.470540440732995e-02, 1.470540440732995e-02, 1.531297486625458e-04, 1.544170676951993e-04, 2.789108200103689e-04, 4.340328798717503e-03, 1.549313976260018e-04, 1.549313976260018e-04, -7.319501099347192e-02, -8.145083117829141e-02, -7.828590903323339e-02, -7.600034755054674e-02, -7.713260950953416e-02, -7.713260950953416e-02, -8.899013464015076e-02, 6.698787390325998e-01, -3.757050764214335e-01, -1.669264035807079e-01, -2.393960357405136e-01, -2.393960357405137e-01, 1.460490605158736e-01, 3.851338131049294e-02, 4.098987134762413e-02, 2.323354275673862e-02, 6.158427958692046e-02, 6.158427958692046e-02, 5.177788925186693e-03, 3.436188090445863e-03, 4.338475490177077e-03, -3.205470029709998e-02, 9.411051010302282e-03, 9.411051010302273e-03, 4.713774683447578e-04, 2.646440383279692e-05, 1.184450634612885e-04, 9.658834060312430e-03, 1.518465431225659e-04, 1.518465431225653e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
