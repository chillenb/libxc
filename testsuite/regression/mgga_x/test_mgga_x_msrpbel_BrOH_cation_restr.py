
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_msrpbel_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_msrpbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.187325697745239e+01, -2.187330082505693e+01, -2.187354705197791e+01, -2.187289391111259e+01, -2.187322884378185e+01, -2.187322884378185e+01, -3.380448767458045e+00, -3.380445959913926e+00, -3.380580121929640e+00, -3.382068030263323e+00, -3.381033936915189e+00, -3.381033936915189e+00, -6.543521472511249e-01, -6.540931475541063e-01, -6.505801928937012e-01, -6.589239063214031e-01, -6.561138058801192e-01, -6.561138058801192e-01, -2.101401122623995e-01, -2.103678778955237e-01, -7.343022241527681e-01, -1.782234083571831e-01, -1.882462422789528e-01, -1.882462422789528e-01, -1.009364494008897e-02, -1.062397932832220e-02, -5.861358605966772e-02, -5.829395465871759e-03, -7.325081590875081e-03, -7.325081590875081e-03, -5.293240020146973e+00, -5.293361296353911e+00, -5.293253470518140e+00, -5.293360402481407e+00, -5.293297096403328e+00, -5.293297096403328e+00, -2.109553340700004e+00, -2.126267348086524e+00, -2.111043184996039e+00, -2.125520229432959e+00, -2.118335855272657e+00, -2.118335855272657e+00, -5.915197344791131e-01, -6.281136910972217e-01, -5.320482177301334e-01, -5.360412298147146e-01, -6.009259269791071e-01, -6.009259269791071e-01, -1.450768325685217e-01, -2.258650988848894e-01, -1.361354177161274e-01, -1.825002382635192e+00, -1.571783799898085e-01, -1.571783799898085e-01, -4.497766541329658e-03, -5.698749801072900e-03, -4.357538022585594e-03, -9.481586439500084e-02, -5.249482297479785e-03, -5.249482297479785e-03, -5.888452795556858e-01, -5.887726976173534e-01, -5.887991889614400e-01, -5.888158447166199e-01, -5.888067628958514e-01, -5.888067628958514e-01, -5.713792326724021e-01, -5.207237769382124e-01, -5.343250875448056e-01, -5.483045537544827e-01, -5.409091288362342e-01, -5.409091288362342e-01, -6.520747684595326e-01, -2.701951914159254e-01, -3.008440632047795e-01, -3.543967623819276e-01, -3.263251600241984e-01, -3.263251600241983e-01, -4.721627142597893e-01, -5.610064916309835e-02, -7.648035829395319e-02, -3.387402486063247e-01, -1.174589930243280e-01, -1.174589930243280e-01, -1.424523243919322e-02, -1.523312330620328e-03, -3.197499979622570e-03, -1.114970429800364e-01, -4.857413173248372e-03, -4.857413173248368e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_msrpbel_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_msrpbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.747463778802691e+01, -2.747474489762665e+01, -2.747525935226815e+01, -2.747366851545825e+01, -2.747449659275266e+01, -2.747449659275266e+01, -4.178473708968174e+00, -4.178681333073532e+00, -4.184385675984794e+00, -4.183535193763575e+00, -4.182735539233350e+00, -4.182735539233350e+00, -7.900816356612650e-01, -7.881377284059221e-01, -7.403987399822861e-01, -7.527304003197421e-01, -7.508199345204879e-01, -7.508199345204879e-01, -1.389784217721532e-01, -1.404553840076984e-01, -8.652833293078261e-01, -1.311042374862815e-01, -1.431193050342744e-01, -1.431193050342744e-01, -1.345819325345196e-02, -1.416530577109627e-02, -7.815116526925739e-02, -7.772527287829012e-03, -9.766775454500110e-03, -9.766775454500110e-03, -6.772927555265155e+00, -6.775265483561478e+00, -6.773065131684917e+00, -6.775127537946825e+00, -6.774097529619333e+00, -6.774097529619333e+00, -2.180243373060818e+00, -2.231560700064553e+00, -2.168141098360167e+00, -2.218784884014046e+00, -2.215158560985115e+00, -2.215158560985115e+00, -7.365373293253294e-01, -8.490389733333652e-01, -6.698053343682743e-01, -7.306466831406191e-01, -7.544342538816130e-01, -7.544342538816130e-01, -1.463133506240510e-01, -1.269786707241375e-01, -1.453257287995809e-01, -2.540870075106170e+00, -1.217250293626605e-01, -1.217250293626605e-01, -5.997022055106211e-03, -7.598333068097201e-03, -5.810050696780792e-03, -1.226116780705265e-01, -6.999309729973048e-03, -6.999309729973048e-03, -7.803178107252060e-01, -7.706711364147893e-01, -7.740510212180874e-01, -7.768536699715973e-01, -7.754503623920871e-01, -7.754503623920871e-01, -7.615637925958435e-01, -6.064544134898174e-01, -6.497645626203816e-01, -6.943321665614608e-01, -6.713130724915709e-01, -6.713130724915709e-01, -8.932706746525430e-01, -1.804227290803531e-01, -2.319735637817740e-01, -3.980376352019692e-01, -3.074483550042759e-01, -3.074483550042758e-01, -5.280159653359677e-01, -7.480083289752602e-02, -1.018795100039205e-01, -4.015293736288428e-01, -1.293711688296126e-01, -1.293711688296126e-01, -1.899364325225763e-02, -2.031083107493770e-03, -4.263333306163427e-03, -1.289561582938514e-01, -6.476550897664496e-03, -6.476550897664490e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_msrpbel_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_msrpbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.838463342582182e-09, -4.838372770227477e-09, -4.837518192993206e-09, -4.838847553532528e-09, -4.838215657532921e-09, -4.838215657532921e-09, -8.250680702489066e-06, -8.256619657070839e-06, -8.424757766520933e-06, -8.448302236752033e-06, -8.409089190654059e-06, -8.409089190654059e-06, -6.294315355459835e-03, -6.307595434850616e-03, -6.638302676307574e-03, -6.684670541986500e-03, -6.669578319775417e-03, -6.669578319775417e-03, -1.837667633741566e+00, -1.861278785225778e+00, -2.679201856284359e-03, -1.739628552204924e+00, -1.454244323137615e+00, -1.454244323137613e+00, -5.489482218991603e-172, -1.810807824407262e-150, -1.696634899683777e-04, 0.000000000000000e+00, -1.613980743200575e-307, -1.613980743200575e-307, -1.162018510842711e-06, -1.161248363845130e-06, -1.161647022107059e-06, -1.160982277253759e-06, -1.161800507998481e-06, -1.161800507998481e-06, -1.266619987174632e-04, -1.127659503970982e-04, -1.208787483885537e-04, -1.073329874852081e-04, -1.215072369094374e-04, -1.215072369094374e-04, -2.055374428411414e-02, -1.496809937598240e-02, -2.282214717809371e-02, -1.880090765571347e-02, -1.872004345941396e-02, -1.872004345941396e-02, -1.649351480540236e+00, -1.338092073520768e+00, -1.614479835358103e+00, -1.629684487794686e-04, -2.930035173116865e+00, -2.930035173116866e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -6.079739452690188e-01, 0.000000000000000e+00, 0.000000000000000e+00, -9.034329593603146e-03, -9.131442415653668e-03, -9.097528993204011e-03, -9.069884537064421e-03, -9.084749117388803e-03, -9.084749117388803e-03, -1.222958082792199e-02, -1.845654845777809e-02, -1.668151323655402e-02, -1.490407691601369e-02, -1.610950888745468e-02, -1.610950888745469e-02, -1.319896622134174e-02, -6.382319892567719e-01, -4.170710448340540e-01, -1.373400708897755e-01, -2.665340786598855e-01, -2.665340786598855e-01, -5.378285010613988e-02, -2.129537466006044e-05, -2.483340998286314e-02, -1.931168799001676e-01, -2.471151121918779e+00, -2.471151121918784e+00, -2.119371905017559e-94, 0.000000000000000e+00, 0.000000000000000e+00, -2.246231080824964e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_msrpbel_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_msrpbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.297788737770002e-04, 1.297720873065477e-04, 1.296759256087077e-04, 1.297740173522299e-04, 1.297320692354717e-04, 1.297320692354717e-04, 1.403986487793250e-03, 1.407978072242259e-03, 1.521567668108417e-03, 1.540715220226533e-03, 1.511108784918942e-03, 1.511108784918942e-03, 8.979573251647045e-03, 8.940937934461509e-03, 8.145699792824038e-03, 9.400855874414795e-03, 9.060340415078822e-03, 9.060340415078822e-03, 9.744843143957395e-02, 1.053385007533169e-01, 1.238056341131213e-03, 1.350342298020639e-02, 1.934359770776445e-02, 1.934359770776436e-02, 0.000000000000000e+00, 0.000000000000000e+00, 8.356021573708932e-11, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 3.657299535490871e-05, 3.611446543918776e-05, 3.580945453606279e-05, 3.543809626223399e-05, 3.672128890136635e-05, 3.672128890136635e-05, 8.876901653553005e-03, 7.569756965213193e-03, 7.996580402052112e-03, 6.699122626905169e-03, 8.564262359913564e-03, 8.564262359913564e-03, 4.282064387760021e-02, 3.955847739363853e-02, 3.197538399912161e-02, 2.755011187611678e-02, 4.025047188307286e-02, 4.025047188307286e-02, 1.003447952437693e-03, 6.724757206917083e-02, 4.667749180441270e-04, 1.063750888447323e-02, 1.791074410402879e-02, 1.791074410402884e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 8.503837724781281e-06, 0.000000000000000e+00, 0.000000000000000e+00, 6.103825908379837e-03, 5.972665227240956e-03, 6.019940105743491e-03, 6.059329939624987e-03, 6.042901583239314e-03, 6.042901583239314e-03, 1.260733529388935e-02, 9.519273166432552e-03, 1.115064289642198e-02, 1.220823290048179e-02, 1.241955280745099e-02, 1.241955280745101e-02, 4.126681184982713e-02, 6.569946808355147e-02, 7.967056305657540e-02, 5.330395722630719e-02, 7.690649781284487e-02, 7.690649781284489e-02, 5.115632473237377e-02, 5.601104464615060e-11, 6.459203927564970e-08, 7.513485345143799e-02, 7.462879000922776e-04, 7.462879000922949e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.439671174095218e-03, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
