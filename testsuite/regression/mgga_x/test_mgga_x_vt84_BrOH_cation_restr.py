
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_vt84_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_vt84", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.990401058035628e+01, -1.990407102738395e+01, -1.990435490653564e+01, -1.990345559445664e+01, -1.990392465465644e+01, -1.990392465465644e+01, -3.234950176919499e+00, -3.234946056509203e+00, -3.234896588503146e+00, -3.235209112675347e+00, -3.234839415731568e+00, -3.702996301057390e+00, -6.333259915955902e-01, -7.322559260199112e-01, -7.213797889039240e-01, -7.231196291068166e-01, -7.227840905598544e-01, -7.227840905598544e-01, -1.977176700855533e-01, -1.993877011694193e-01, -7.447519271142601e-01, -1.754666768057662e-01, -1.827942116194733e-01, -1.827942116194733e-01, -5.247225521946999e-03, -5.560550065062927e-03, -5.491483001730198e-02, -2.602436170691287e-03, -3.611608081098094e-03, -3.611608081098094e-03, -5.562334587826189e+00, -5.563423366281116e+00, -5.562389378332343e+00, -4.866571582515128e+00, -5.562884195254561e+00, -5.562884195254561e+00, -1.826774136925601e+00, -1.838596651892508e+00, -1.818261095519326e+00, -1.828643606083395e+00, -1.837427795777332e+00, -2.101900475589923e+00, -6.246296830396734e-01, -6.804327276885067e-01, -5.777023389458830e-01, -6.008426014483057e-01, -6.349826369384285e-01, -5.536248560662190e-01, -8.759429035253909e-02, -2.134269238401880e-01, -8.104959842146371e-02, -2.045159482516429e+00, -1.502227000243005e-01, -1.502227000243005e-01, -2.581025225373322e-03, -2.483053636131274e-03, -2.088436038068981e-03, -5.454187919871193e-02, -3.012388922541174e-03, -2.475718817843500e-03, -6.294958919519694e-01, -6.263438979788223e-01, -5.511204576086642e-01, -6.284276228717864e-01, -6.279746492001980e-01, -6.279746492001980e-01, -6.125261735643631e-01, -5.239015838341958e-01, -5.493318937470270e-01, -5.750728452857221e-01, -5.619229199016786e-01, -4.902455892528128e-01, -7.128187161828101e-01, -2.085992030469945e-01, -2.906264498130358e-01, -3.246259781737100e-01, -3.258879272600990e-01, -3.258879272600990e-01, -4.214541103226578e-01, -5.158748554919081e-02, -7.605990738519652e-02, -3.566963144604574e-01, -6.941479813702206e-02, -1.139806622290133e-01, -7.523973989046203e-03, -4.049294262402568e-05, -1.179275611385928e-03, -1.080901005347700e-01, -2.298755054054544e-03, -2.298755054054542e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_vt84_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_vt84", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.680414453694815e+01, -2.680422462604462e+01, -2.680460160215369e+01, -2.680340993787899e+01, -2.680403137835921e+01, -2.680403137835921e+01, -4.242588776322044e+00, -4.242632664827343e+00, -4.243872894968988e+00, -4.243754088629555e+00, -4.243325755350134e+00, -4.496974579549513e+00, -8.235381980786016e-01, -7.934597432569789e-01, -7.518138140708325e-01, -7.676920933724234e-01, -7.641513736894111e-01, -7.641513736894111e-01, -1.894024105383363e-01, -1.940286032564651e-01, -9.792257053949034e-01, -1.453279247532889e-01, -1.544878446694666e-01, -1.544878446694665e-01, -7.821464101782171e-03, -8.177575239528065e-03, -1.044073912029494e-01, -4.962018766962458e-03, -5.917138539912671e-03, -5.917138539912671e-03, -6.602562275998148e+00, -6.602170438100804e+00, -6.602530368415227e+00, -6.542901834070395e+00, -6.602370903279524e+00, -6.602370903279524e+00, -2.377198637685333e+00, -2.395591703362931e+00, -2.364073852741766e+00, -2.379954270785948e+00, -2.393886677400417e+00, -2.519226825765533e+00, -7.645103719103480e-01, -8.165055354630750e-01, -7.056531096894880e-01, -7.352267096902724e-01, -7.756206412300063e-01, -7.428983665747407e-01, -1.165988009857394e-01, -1.813733974500172e-01, -1.079133561390655e-01, -2.494078147708195e+00, -1.280519335533081e-01, -1.280519335533081e-01, -3.441362494535260e-03, -4.896261324402517e-03, -3.582563250918851e-03, -7.267374320209286e-02, -4.016504401081217e-03, -4.354760594583516e-03, -7.298119401377376e-01, -7.320480965912672e-01, -7.378465086525318e-01, -7.305217951972667e-01, -7.308502081109958e-01, -7.308502081109958e-01, -7.108443632783400e-01, -6.417338636197955e-01, -6.698774393747813e-01, -6.892704969329209e-01, -6.803521751569652e-01, -6.600781979054190e-01, -8.615283256943774e-01, -2.741033963184589e-01, -3.044243279664094e-01, -4.222029062561124e-01, -3.720454615166793e-01, -3.720454615166793e-01, -5.538844311948345e-01, -1.032576556232214e-01, -1.119157940975065e-01, -4.346683463580124e-01, -9.242800142362589e-02, -1.158148507471587e-01, -1.085667814306908e-02, -3.819573624682679e-04, -2.851392789245148e-03, -1.123364703982923e-01, -4.021995745554280e-03, -4.021995745554278e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_vt84_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_vt84", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.819490342655401e-09, -6.819526232019760e-09, -6.819617283875621e-09, -6.819092361136730e-09, -6.819376937863683e-09, -6.819376937863683e-09, -4.789261909133392e-06, -4.790402581710734e-06, -4.820199874898850e-06, -4.806400829454708e-06, -4.809877849396214e-06, -7.425565654164086e-06, -1.600841023896507e-03, -3.193916818636528e-03, -3.353475161714483e-03, -3.331668718690996e-03, -3.334537953264555e-03, -3.334537953264555e-03, -6.022544616876557e-01, -5.795917107313534e-01, -4.674649990497775e-04, -9.844422109568612e-01, -8.626996810927730e-01, -8.626996810927732e-01, 1.209177207065310e+02, 9.795528932842946e+01, 1.671647513916108e+01, 9.717711565073959e+02, 4.267319527557073e+02, 4.267319527557073e+02, -8.874448576827566e-06, -8.953999070204472e-06, -8.879049622444494e-06, -2.411329288620854e-06, -8.914144528391694e-06, -8.914144528391694e-06, -3.889838498827689e-05, -3.940305404297620e-05, -3.843688022865443e-05, -3.891274027186570e-05, -3.941677331332633e-05, -6.116663208863897e-05, -1.628784615024307e-02, -2.682041187628150e-02, -1.442847236179875e-02, -1.939452466699408e-02, -1.749396277568098e-02, -8.718915322220929e-03, -2.488257083114783e-01, -4.636390147667635e-01, -2.602401742319959e-01, -1.770495554505917e-04, -1.686036413922631e+00, -1.686036413922630e+00, 2.388425365171611e+05, 1.039162047894764e+03, 3.326857267485501e+03, -2.763521292202214e-02, 1.282557329780356e+05, 1.556656389882156e+03, -2.340689042049232e-01, -1.139901514637352e-01, -2.758299734057494e-02, -1.712504137333172e-01, -1.540507851831098e-01, -1.540507851831098e-01, -2.283401594294706e-01, -2.515016492514546e-02, -3.410019066057602e-02, -5.475537073449405e-02, -4.192073387964974e-02, -1.672621697714618e-02, -1.727715990119263e-02, -7.895568520716792e-02, -1.273622767978761e-01, -3.826124304358747e-02, -8.639052055236762e-02, -8.639052055236768e-02, -1.731363549593374e-02, 2.121915093107545e+01, 2.407528047890822e+00, -9.260506612586682e-02, -4.453936850324102e-01, -2.749787171359390e+00, 2.972634894308072e+01, 1.245112227154236e+04, 8.891160401463692e+03, -3.035359173573371e+00, 2.130186624611838e+03, 2.130186624611842e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_vt84_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_vt84", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.556497859198319e-04, 1.556534453882183e-04, 1.556679312294017e-04, 1.556137881346298e-04, 1.556424118143887e-04, 1.556424118143887e-04, -5.313749378484296e-04, -5.311404675693235e-04, -5.248542577448260e-04, -5.273692163278796e-04, -5.271557761892287e-04, 4.604653626286976e-03, -1.994422674502204e-03, 7.011381066307320e-03, 5.478959407531653e-03, 6.174515183936565e-03, 6.008552051011850e-03, 6.008552051011850e-03, 1.160238034537329e-02, 1.275516925272640e-02, -5.589662597886644e-04, 1.677264028449120e-03, 4.209252934162914e-03, 4.209252934162909e-03, -1.215908824729869e-08, -1.300850405630023e-08, -9.908134174363676e-06, -5.333914520012713e-09, -8.682591805276406e-09, -8.682591805276406e-09, 2.008394093629188e-02, 2.026934762421361e-02, 2.009457402345891e-02, 7.855622253855003e-04, 2.017649868763675e-02, 2.017649868763675e-02, -1.127302872711031e-03, -1.106077276141682e-03, -1.136193557916776e-03, -1.125084905977622e-03, -1.107869837806105e-03, 6.270786654648630e-03, 5.396226522694447e-02, 1.127931501775482e-01, 3.574585672941619e-02, 5.722622173763275e-02, 6.104615386346991e-02, 2.204818878989137e-03, -1.056834355223123e-04, 3.897778366069623e-03, -8.475554685393960e-05, 2.063731635542472e-02, 9.815302067674870e-04, 9.815302067674879e-04, -2.597736978730881e-09, -4.786557163220754e-09, -1.141292762905616e-08, -3.034089770196227e-05, -1.637794126616932e-08, -8.389731344777774e-09, 7.560650063037241e-01, 3.628829550181264e-01, 7.802481761465261e-03, 5.498461131189885e-01, 4.935591344103288e-01, 4.935591344103286e-01, 6.791534789766841e-01, 4.806792426045384e-02, 7.702424253138555e-02, 1.387769808002370e-01, 1.005852071771717e-01, 5.135387039589778e-03, 8.441466422075418e-02, -2.154973244967811e-03, 1.405681105965144e-02, -6.360636289518494e-03, 2.353315581079236e-02, 2.353315581079236e-02, -3.731772986026924e-03, -1.001064461473278e-05, -5.772813681760780e-06, 5.283662143052334e-02, -9.088788819656342e-05, 1.415270327197071e-04, -1.161903293021253e-08, -8.637290763932630e-11, -4.262054663803996e-09, 1.133075372002993e-04, -9.298191829313519e-09, -9.298191829328982e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
