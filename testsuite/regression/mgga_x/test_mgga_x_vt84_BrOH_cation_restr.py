
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_vt84_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_vt84", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.259064358993706e+01, -2.259071170505925e+01, -2.259114271709839e+01, -2.259013310570606e+01, -2.259064378808526e+01, -2.259064378808526e+01, -3.393610188713054e+00, -3.393624858667215e+00, -3.394241172694950e+00, -3.395913641461005e+00, -3.394702283391684e+00, -3.394702283391684e+00, -6.533470092818697e-01, -6.529697445106211e-01, -6.456584213386783e-01, -6.522109450718957e-01, -6.501621168389332e-01, -6.501621168389332e-01, -1.955145097074761e-01, -1.967405953809459e-01, -7.532089662468844e-01, -1.675947124603591e-01, -1.765400287459654e-01, -1.765400287459654e-01, -5.249803300542095e-03, -5.564907301089306e-03, -5.609636561515847e-02, -2.663861764828479e-03, -3.639374087749181e-03, -3.639374087749181e-03, -5.556987975231761e+00, -5.558092012177801e+00, -5.557151574292520e+00, -5.558122160008544e+00, -5.557489556284351e+00, -5.557489556284351e+00, -2.058172467816019e+00, -2.076060104801374e+00, -2.053253914767446e+00, -2.069105840983975e+00, -2.070440703618956e+00, -2.070440703618956e+00, -5.896842948832912e-01, -6.101899629354988e-01, -5.344795414775169e-01, -5.340742273536374e-01, -5.985235971564473e-01, -5.985235971564473e-01, -1.370638968490532e-01, -2.103000445444644e-01, -1.292551317481710e-01, -1.809009066800612e+00, -1.467303087726341e-01, -1.467303087726341e-01, -1.880520753839535e-03, -2.621915301055165e-03, -2.125668000218674e-03, -9.352105054729504e-02, -2.557536089406490e-03, -2.557536089406490e-03, -5.847576155323728e-01, -6.039025882587707e-01, -5.998674829194945e-01, -5.947417120967029e-01, -5.975471790361967e-01, -5.975471790361967e-01, -5.465163319319851e-01, -5.208274146672498e-01, -5.430010137220743e-01, -5.608915116896385e-01, -5.521083030612512e-01, -5.521083030612512e-01, -6.369167145400013e-01, -2.500845196296312e-01, -2.856814321707296e-01, -3.542973889682278e-01, -3.179255816812097e-01, -3.179255816812097e-01, -4.684251890839985e-01, -5.227087856886591e-02, -7.644049567701607e-02, -3.389468163159702e-01, -1.119073298568882e-01, -1.119073298568882e-01, -7.595605826206478e-03, -2.614155358698358e-04, -1.208694835442544e-03, -1.069804544114666e-01, -2.354790203668169e-03, -2.354790203668167e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_vt84_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_vt84", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.707004795655310e+01, -2.707010659669652e+01, -2.707056871896577e+01, -2.706970046056417e+01, -2.707012664354058e+01, -2.707012664354058e+01, -4.223518763124385e+00, -4.223545499463798e+00, -4.224268355629908e+00, -4.223847557968498e+00, -4.223667123918323e+00, -4.223667123918323e+00, -8.032408901903098e-01, -8.018046033255869e-01, -7.640797937056507e-01, -7.714254295651782e-01, -7.704880124109428e-01, -7.704880124109428e-01, -1.888615181618619e-01, -1.934162935155030e-01, -9.583945237027495e-01, -1.365860523489570e-01, -1.509625414022426e-01, -1.509625414022426e-01, -7.817801357861196e-03, -8.170981792943266e-03, -9.959731702688657e-02, -4.912106338691320e-03, -5.886335579696213e-03, -5.886335579696208e-03, -6.595245819192884e+00, -6.594922287892512e+00, -6.595364284832692e+00, -6.595073414034642e+00, -6.595013393766980e+00, -6.595013393766980e+00, -2.445416249701196e+00, -2.476177084957544e+00, -2.433655972546000e+00, -2.461940611810259e+00, -2.467661624672019e+00, -2.467661624672019e+00, -7.174466259510520e-01, -7.927109501381477e-01, -6.598962997134858e-01, -6.997680344194941e-01, -7.290227780389500e-01, -7.290227780389500e-01, -1.270273816418306e-01, -1.793743996467663e-01, -1.238035307492822e-01, -2.389815631893484e+00, -1.223393468811727e-01, -1.223393468811727e-01, -3.916121941095126e-03, -4.786814813506254e-03, -3.544461619136361e-03, -1.076310744772770e-01, -4.273379446510100e-03, -4.273379446510101e-03, -7.295108325485644e-01, -7.208206386177595e-01, -7.218942761322805e-01, -7.240482936812500e-01, -7.227824691578141e-01, -7.227824691578141e-01, -7.191474304913804e-01, -6.347675138108506e-01, -6.569287923610504e-01, -6.700377677245065e-01, -6.632444422871840e-01, -6.632444422871840e-01, -8.311496513814901e-01, -2.365773964710603e-01, -3.027372338565725e-01, -4.218691779862553e-01, -3.648968463494464e-01, -3.648968463494462e-01, -5.628222812882532e-01, -1.009681579954703e-01, -1.062359925015708e-01, -4.092827934853440e-01, -1.094334542903915e-01, -1.094334542903916e-01, -1.072250573435415e-02, -1.165770800239909e-03, -2.842935860550843e-03, -1.085745753072726e-01, -3.966420377253980e-03, -3.966420377253979e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_vt84_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_vt84", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.096933064842821e-08, -2.096985452960155e-08, -2.097115221634172e-08, -2.096339473877928e-08, -2.096760525365226e-08, -2.096760525365226e-08, -1.086337955484708e-05, -1.086635008326762e-05, -1.094835213480811e-05, -1.095024673508731e-05, -1.093826520749001e-05, -1.093826520749001e-05, -3.595172359788383e-03, -3.618932760728966e-03, -4.212734057971156e-03, -4.326671416903171e-03, -4.271549041335359e-03, -4.271549041335359e-03, -6.393426823953685e-01, -6.236320056451449e-01, -9.209858051492396e-04, -1.226332870616495e+00, -9.962124463370720e-01, -9.962124463370712e-01, 1.208823501992210e+02, 9.785197785098504e+01, 1.487401961335832e+01, 9.937967011972318e+02, 4.292192698063491e+02, 4.292192698063460e+02, -8.915259156628069e-06, -8.994603670691072e-06, -8.919030261793648e-06, -8.989051798184806e-06, -8.955273618855446e-06, -8.955273618855446e-06, -7.396815581415118e-05, -7.286442245325357e-05, -7.154527325781303e-05, -7.041413240981021e-05, -7.463448641956983e-05, -7.463448641956983e-05, -2.372501702377259e-02, -2.115756544544073e-02, -2.207650499345007e-02, -1.570796523118887e-02, -2.473030269012698e-02, -2.473030269012698e-02, -1.890065766881624e+00, -4.964043211581794e-01, -2.127294039917458e+00, -1.189749194491150e-04, -1.943791910554871e+00, -1.943791910554871e+00, 2.571702744277034e+03, 1.095166348627538e+03, 3.378085905365444e+03, -2.717166850676547e+00, 1.602172322365585e+03, 1.602172322365576e+03, -1.919870468584835e-01, -1.163045962922529e-01, -1.378448801809762e-01, -1.603436793961808e-01, -1.485121202203405e-01, -1.485121202203405e-01, -1.041704994526413e-01, -2.736922802388723e-02, -3.845119497519911e-02, -6.245465610093687e-02, -4.811964331152058e-02, -4.811964331152057e-02, -1.361955414404655e-02, -2.393265892392238e-01, -1.432587823443603e-01, -9.179110332892888e-02, -1.095714394487987e-01, -1.095714394487988e-01, -3.775983713142052e-02, 2.033863660357947e+01, 1.135477022179109e+00, -1.447552668159180e-01, -3.493123978529249e+00, -3.493123978529258e+00, 2.810954411242162e+01, 8.038077164697465e+04, 9.111734069523753e+03, -3.554079184096097e+00, 2.176309282830527e+03, 2.176309282830532e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_vt84_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_vt84", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_vt84_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_vt84", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [3.067355562931285e-03, 3.067459568760330e-03, 3.067909608750210e-03, 3.066372117524717e-03, 3.067179200193013e-03, 3.067179200193013e-03, 2.838077730549084e-03, 2.839271230368584e-03, 2.874057131394376e-03, 2.890532904349816e-03, 2.876120834936889e-03, 2.876120834936889e-03, 3.140820386441059e-03, 3.168356844853586e-03, 3.771621981348463e-03, 4.560412043996265e-03, 4.275606741104240e-03, 4.275606741104240e-03, 1.315430770127092e-02, 1.471296095107130e-02, 1.509237912719071e-04, 2.189643328014447e-03, 5.430671483594286e-03, 5.430671483594284e-03, -1.403851625002535e-10, -1.635027964485828e-10, -2.179362057507281e-06, -2.010045454030633e-11, -5.589211064248091e-11, -5.589211064248087e-11, 2.002165746435399e-02, 2.020608853456784e-02, 2.003350404953652e-02, 2.019617038131137e-02, 2.011306755449364e-02, 2.011306755449364e-02, 6.543457048728460e-03, 6.831921020017043e-03, 6.216161253866635e-03, 6.457212929427602e-03, 6.868864025083069e-03, 6.868864025083069e-03, 4.570611393735647e-02, 2.984694167211127e-02, 2.581532417452996e-02, 1.084188691294667e-02, 4.982654406109730e-02, 4.982654406109730e-02, 2.082955318192088e-04, 4.642790320912949e-03, 1.413280356350226e-04, 2.935505896531308e-03, 1.138827883570380e-03, 1.138827883570381e-03, -7.315576162851617e-12, -1.940976709667622e-11, -6.515152646002698e-11, 1.417722931450171e-05, -4.842516160234733e-11, -4.842516160234713e-11, 3.492586081834689e-01, 2.865016890300906e-01, 3.211160267597373e-01, 3.468158620624169e-01, 3.347961452486743e-01, 3.347961452486742e-01, 7.916375514837330e-02, 4.913375256918908e-02, 7.724943903396750e-02, 1.283132997858019e-01, 9.803516979584236e-02, 9.803516979584233e-02, 2.026462341181032e-02, 8.893314127868372e-03, 1.651718026432812e-02, 3.518227207855406e-02, 2.774165095380537e-02, 2.774165095380539e-02, 4.033614465367925e-02, -2.118815606061965e-06, -9.947357427732105e-07, 5.189563880105291e-02, 1.321530151332788e-04, 1.321530151332789e-04, -2.260583498782402e-10, -1.351865229980996e-13, -7.893488024495443e-12, 9.582015077369041e-05, -5.128064488299020e-11, -5.128064488299020e-11]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
