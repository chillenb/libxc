
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_r4scan_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r4scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.170017792529585e+01, -2.170028216802547e+01, -2.170078123025398e+01, -2.169907881076239e+01, -2.170023254689947e+01, -2.170023254689947e+01, -3.039446848501006e+00, -3.039559683019211e+00, -3.043082098062159e+00, -3.041956517988446e+00, -3.039492624348804e+00, -3.765974006981416e+00, -5.260182864222785e-01, -7.146210966597492e-01, -6.938513963493353e-01, -7.001135786908398e-01, -7.151302397147177e-01, -7.151302397147177e-01, -1.951569374341467e-01, -1.979250539134912e-01, -6.120237630934190e-01, -1.367054375752378e-01, -1.959850664055233e-01, -1.959850664055233e-01, -6.927645856155440e-03, -7.351796178558661e-03, -3.931379090709159e-02, -2.387431498604322e-03, -7.276773741675583e-03, -7.276773741675554e-03, -5.666542301438776e+00, -5.667601371595872e+00, -5.666654321922782e+00, -5.431200617319889e+00, -5.667080293845722e+00, -5.667080293845722e+00, -1.657500497589536e+00, -1.678352346334961e+00, -1.648782270554568e+00, -1.665124882655108e+00, -1.683087328552078e+00, -2.132058309946530e+00, -6.301973950768262e-01, -6.859350073953744e-01, -5.971710001205305e-01, -6.241394023091413e-01, -6.549404925248582e-01, -5.787988844140843e-01, -7.137399436341753e-02, -1.942258417220568e-01, -7.049780577346000e-02, -2.084012215862873e+00, -1.155980963486768e-01, -1.155980963486768e-01, -3.430414959781203e-03, -2.784490476470126e-03, -2.127248866081087e-03, -4.415673249523029e-02, -3.572106588604475e-03, -2.500278706319925e-03, -6.523986383663397e-01, -6.488404051827572e-01, -6.407191092899766e-01, -6.511067664901988e-01, -6.506146565996668e-01, -6.506146565996668e-01, -6.314408180569842e-01, -5.458224102951187e-01, -5.710151277364587e-01, -5.942454469897521e-01, -5.824255888894184e-01, -5.374937620060374e-01, -7.188525183816071e-01, -1.782653895505082e-01, -2.947273357607676e-01, -2.984148758743766e-01, -3.346490227504230e-01, -3.346490227504230e-01, -4.003897848379180e-01, -3.577486136498494e-02, -5.084813598301510e-02, -3.589819483615526e-01, -5.785294914062155e-02, -7.857078250518597e-02, -7.936111588989641e-03, -4.640588152052378e-04, -1.221564564401192e-03, -7.494498823676610e-02, -2.066175921159760e-03, -2.066175921159754e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_r4scan_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r4scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.211986639037581e+01, -3.211991059666520e+01, -3.212016835654300e+01, -3.211943979348312e+01, -3.211988924179841e+01, -3.211988924179841e+01, -4.821917834205341e+00, -4.822330246628769e+00, -4.835388112041895e+00, -4.830603881592752e+00, -4.822055155822074e+00, -4.684038068546631e+00, -7.836191202931747e-01, -8.237449821349447e-01, -7.812182918985930e-01, -7.969191552551140e-01, -8.247801221189862e-01, -8.247801221189862e-01, -2.191551939224540e-01, -2.241095986025080e-01, -8.739657101852962e-01, -8.653580411026514e-02, -2.206171854650916e-01, -2.206171854650916e-01, 2.116125484544616e-01, 2.144563666866911e-01, 1.573935955071374e-01, 1.270145804208089e-01, 2.120992105496327e-01, 2.120992105496538e-01, -7.401569247651456e+00, -7.403914039261354e+00, -7.401821971987696e+00, -7.723724959886039e+00, -7.402754335280402e+00, -7.402754335280402e+00, -2.585545308386987e+00, -2.619976786270669e+00, -2.572024396188794e+00, -2.597779445011313e+00, -2.628324618690340e+00, -2.622840313281025e+00, -8.013531861403587e-01, -8.890436006231103e-01, -7.507672211583237e-01, -7.982614471086558e-01, -8.387430529347594e-01, -9.606835146567823e-01, -9.633113137787259e-02, -1.902946468724833e-01, -9.521575631890909e-02, -2.670669012045197e+00, -6.323304700975571e-02, -6.323304700975571e-02, -4.574068231605228e-03, 1.421713388345003e-01, 1.067818611945973e-01, -5.915466441979966e-02, -4.763015891578306e-03, 1.291875039887521e-01, -8.647427406279625e-01, -8.555256928276613e-01, -8.716462181522187e-01, -8.613203121418342e-01, -8.600367756276638e-01, -8.600367756276638e-01, -8.353269959343691e-01, -6.920122335372891e-01, -7.338523057109987e-01, -7.725495512339741e-01, -7.528152572991523e-01, -8.095899531182978e-01, -9.269401771771226e-01, -2.572075629668948e-01, -3.428931373735991e-01, -4.656540443961428e-01, -4.034375412066107e-01, -4.034375412066106e-01, -6.497969468666401e-01, 1.800287830164393e-01, 1.242689368428607e-01, -4.474138886850239e-01, -7.794659620817339e-02, 1.440291424524399e-02, 2.610305673821123e-01, 2.747680598742125e-02, 6.855770532152801e-02, 1.409113008024474e-02, 1.089539633433982e-01, 1.089539633433994e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_r4scan_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r4scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.213098566736669e-08, -1.213080305237465e-08, -1.212990765412365e-08, -1.213289305112759e-08, -1.213089012284044e-08, -1.213089012284044e-08, -8.883566655088203e-06, -8.888472811546597e-06, -9.041053045819395e-06, -8.977611708399075e-06, -8.884758232159280e-06, -7.249365566241580e-06, -1.833300790381525e-03, -4.905632044339413e-03, -5.386624370026575e-03, -5.253034856684029e-03, -4.894701028459409e-03, -4.894701028459409e-03, -8.585564517422498e-01, -8.180291900659913e-01, -4.132183476818752e-04, -2.839820639767199e+00, -8.460677329348442e-01, -8.460677329348442e-01, -2.596661348894100e+04, -2.287004141324842e+04, -1.988015770400917e+02, -8.207052975082368e+04, -2.387177772634866e+04, -2.387177772635090e+04, -1.768802313383269e-06, -1.769566057742418e-06, -1.768892586138482e-06, -3.132533503611053e-06, -1.769175338827432e-06, -1.769175338827432e-06, -6.302193201761709e-05, -6.431527452628056e-05, -6.254320137541960e-05, -6.338386259422153e-05, -6.483533356290257e-05, -6.866301324353591e-05, -9.945097271240466e-03, -7.781219073457946e-03, -1.183755520798686e-02, -1.059447213997762e-02, -8.789494677848534e-03, -2.718903665144195e-02, -5.524836277330143e-01, -7.982650799414327e-01, -5.871771583551849e-01, -8.600607788766480e-05, -5.410478910862539e+00, -5.410478910862539e+00, -9.257905709201684e+04, -7.711603375841666e+04, -2.728785004759841e+05, -3.448840542200467e+00, -7.874169007917424e+04, -1.027864809136444e+05, -1.147729049773915e-02, -1.131920466231449e-02, -1.432935863093957e-02, -1.144447426388596e-02, -1.142376737873966e-02, -1.142376737873966e-02, -1.294032650217448e-02, -1.747009019789471e-02, -1.547071775871508e-02, -1.408928821280941e-02, -1.473124282884770e-02, -3.159787553362273e-02, -6.265858108578041e-03, -7.286370767147915e-02, -1.714181673091630e-01, -6.266070336201979e-02, -1.086306063824956e-01, -1.086306063824956e-01, -3.781032349077849e-02, -2.607832805525778e+02, -8.515274004570760e+01, -8.830459436423753e-02, -1.246758402693431e+00, -2.126269343033140e+01, -1.238692066426463e+04, -7.606236056157293e+05, -3.886297885857460e+05, -2.566112937013376e+01, -1.673313824196732e+05, -1.673313824196755e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_r4scan_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r4scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.868158422043164e-03, 1.868144172538652e-03, 1.868078160887216e-03, 1.868310544580741e-03, 1.868150940595831e-03, 1.868150940595831e-03, 5.791747325084630e-03, 5.795031293841817e-03, 5.897624380318840e-03, 5.856477098241123e-03, 5.792630554127672e-03, 5.201767336601746e-03, 7.689586888355158e-03, 2.475897586448831e-02, 2.504010599626421e-02, 2.501579831829736e-02, 2.475286343891222e-02, 2.475286343891222e-02, 8.886401798791890e-02, 8.813857879723701e-02, 2.520156613686975e-03, 1.095700814743568e-01, 8.863733479017351e-02, 8.863733479017351e-02, 4.373519731247092e-01, 4.427406413954556e-01, 2.614330920011314e-01, 1.524266122140163e-01, 4.478367205123747e-01, 4.478367205124164e-01, 4.115660237027838e-03, 4.118720327242587e-03, 4.116001135093025e-03, 6.991366566298562e-03, 4.117186789568138e-03, 4.117186789568138e-03, 7.211584262029829e-03, 7.533693627801993e-03, 7.088812532521901e-03, 7.316758669010992e-03, 7.631254793229139e-03, 8.991476174034133e-03, 3.292898714616831e-02, 3.252898428509712e-02, 3.364207320310141e-02, 3.389538486985277e-02, 3.245038334038049e-02, 8.976897727874419e-02, 6.982671428061611e-04, 8.374422411149994e-02, 7.908555987674054e-04, 1.022301547648174e-02, 1.276916302239690e-01, 1.276916302239690e-01, 1.561481173721538e-07, 1.919329316282347e-01, 2.859617037799518e-01, 1.712451445126919e-04, 1.798325938609720e-07, 1.935135062082519e-01, 3.946570785944562e-02, 3.874753416656098e-02, 4.827531006303796e-02, 3.929596183420256e-02, 3.920154303612703e-02, 3.920154303612703e-02, 4.052403886530374e-02, 3.767572439741995e-02, 3.771079554071740e-02, 3.812142230199390e-02, 3.784127431486256e-02, 7.655792082984300e-02, 3.035404137304858e-02, 1.144746351901661e-02, 6.053002397096345e-02, 4.147120918370169e-02, 5.548887013978683e-02, 5.548887013978677e-02, 5.462836893292379e-02, 2.719623839766029e-01, 2.216385811354168e-01, 5.481577113858756e-02, 6.339025662778580e-04, 1.712488250420757e-01, 3.357822962452903e-01, 3.885264655139598e-02, 1.360634044907383e-01, 1.794460990868732e-01, 1.933735246823205e-01, 1.933735246823223e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
