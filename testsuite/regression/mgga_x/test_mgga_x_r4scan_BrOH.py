
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_r4scan_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r4scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.318017596447161e+01, -2.318023606861351e+01, -2.318057789997874e+01, -2.317959507525212e+01, -2.318020700841411e+01, -2.318020700841411e+01, -3.401044755061537e+00, -3.401126351903167e+00, -3.403902365398221e+00, -3.404812706127961e+00, -3.401072897000253e+00, -3.401072897000253e+00, -5.899927837046236e-01, -5.893859966321775e-01, -5.745643988134608e-01, -5.848901585237634e-01, -5.897787405401771e-01, -5.897787405401771e-01, -1.873319714171075e-01, -1.891818475739789e-01, -6.632662162192620e-01, -1.120606951278198e-01, -1.877630717650347e-01, -1.877630717650347e-01, -5.566922823631788e-03, -5.899578501538191e-03, -3.180311170830628e-02, -2.020180530537265e-03, -5.845543459594676e-03, -5.845543459594676e-03, -5.665460034908659e+00, -5.666530624240484e+00, -5.665587013830931e+00, -5.666418556223549e+00, -5.665985387882726e+00, -5.665985387882726e+00, -2.074106919007451e+00, -2.096625179924288e+00, -2.071748697020507e+00, -2.089502807181352e+00, -2.092593775910731e+00, -2.092593775910731e+00, -6.042575731037492e-01, -6.556064073967385e-01, -5.540629346520553e-01, -5.768772475699526e-01, -6.353002810077232e-01, -6.353002810077232e-01, -8.002145807355834e-02, -1.850030951811016e-01, -7.932205449336048e-02, -1.909823399942013e+00, -9.817028947775018e-02, -9.817028947775018e-02, -1.934924914035327e-03, -2.317573022276176e-03, -1.722840001323416e-03, -4.664454084869344e-02, -2.114688547284423e-03, -2.114688547284423e-03, -6.496409256625398e-01, -6.462194426314226e-01, -6.474459129664758e-01, -6.483926761616953e-01, -6.479174970352031e-01, -6.479174970352031e-01, -6.258991029448225e-01, -5.433310959098226e-01, -5.676706854883863e-01, -5.900640325553903e-01, -5.784728261907700e-01, -5.784728261907700e-01, -6.764818299314379e-01, -2.419264627141539e-01, -2.839879019645480e-01, -3.542358288628256e-01, -3.202335809796112e-01, -3.202335809796111e-01, -4.747230283807775e-01, -2.894362829797753e-02, -4.122270794160647e-02, -3.352487361388803e-01, -6.448164106780349e-02, -6.448164106780351e-02, -6.618872681648917e-03, -4.077749618706430e-04, -9.851330577387151e-04, -6.139922351073256e-02, -1.754950090848501e-03, -1.754950090848497e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_r4scan_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r4scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.014590083434441e+01, -3.014599499539754e+01, -3.014645910484691e+01, -3.014491785736094e+01, -3.014595010356417e+01, -3.014595010356417e+01, -4.667106752076887e+00, -4.667763320542494e+00, -4.687734138706404e+00, -4.689081458414105e+00, -4.667250977217553e+00, -4.667250977217553e+00, -8.207853382764380e-01, -8.196980482301268e-01, -7.925153846683162e-01, -8.034078830323098e-01, -8.203961162933930e-01, -8.203961162933930e-01, -1.985369729013997e-01, -2.045672822619282e-01, -8.821593270066620e-01, -1.536331517657571e-01, -2.002512992157010e-01, -2.002512992157010e-01, -6.280321480444044e-03, -7.900985022645074e-03, -4.787203548906997e-02, -3.646717933758176e-03, -7.040330192608976e-03, -7.040330192609074e-03, -7.401951300209720e+00, -7.404295392959921e+00, -7.402199084715584e+00, -7.404021333940853e+00, -7.403142611746062e+00, -7.403142611746062e+00, -2.537495441468279e+00, -2.573059223478566e+00, -2.527551973519465e+00, -2.556483258967027e+00, -2.574816905580181e+00, -2.574816905580181e+00, -8.105181560683777e-01, -9.190309156644859e-01, -7.686554500053809e-01, -8.339220512036004e-01, -8.460197118150715e-01, -8.460197118150715e-01, -1.089801562922865e-01, -1.477774425336473e-01, -1.072925349429346e-01, -2.840377294086149e+00, -1.073498689183208e-01, -1.073498689183208e-01, -3.490730544300304e-03, -4.159050549896445e-03, -3.082530941663354e-03, -6.996745245477469e-02, -3.795651469111996e-03, -3.795651469111996e-03, -8.682215841095587e-01, -8.580921000629390e-01, -8.617055097500633e-01, -8.645144413989915e-01, -8.631087067956449e-01, -8.631087067956449e-01, -8.425355709193195e-01, -6.906244366168343e-01, -7.337399287980337e-01, -7.739752856654406e-01, -7.535450737214512e-01, -7.535450737214513e-01, -9.668598105643307e-01, -2.491363495894963e-01, -3.211178338800416e-01, -4.635174778145524e-01, -3.899119420551309e-01, -3.899119420551309e-01, -6.083040232230812e-01, -4.092163225101456e-02, -6.118941968102477e-02, -4.518320375650552e-01, -8.605950882488896e-02, -8.605950882488905e-02, -1.134084699688558e-02, -7.662351542370924e-04, -1.797465236257238e-03, -8.335345313328262e-02, -3.160656638008848e-03, -3.160656638008841e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_r4scan_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r4scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.296845829259837e-09, -6.296792872256954e-09, -6.296302957832644e-09, -6.297160270327120e-09, -6.296820214304352e-09, -6.296820214304352e-09, -1.169697986830280e-05, -1.171806618241258e-05, -1.234609472791788e-05, -1.237443175462776e-05, -1.170073530974550e-05, -1.170073530974550e-05, -4.246620539519396e-03, -4.235847096957330e-03, -3.995786404151468e-03, -4.146467760667395e-03, -4.243042037801386e-03, -4.243042037801386e-03, -1.492046552253162e+00, -1.448927710162430e+00, -1.458375262943459e-03, -2.813276497791179e-01, -1.483543839117861e+00, -1.483543839117861e+00, -3.046387228257278e+02, -1.492326411297230e+02, 4.798764744637842e-01, 3.217447060654345e+02, -2.425326034225732e+02, -2.425326034225622e+02, -1.777414997921197e-06, -1.778106147526956e-06, -1.777387974953733e-06, -1.777930620015141e-06, -1.777898884346021e-06, -1.777898884346021e-06, -1.014150278095356e-04, -9.417442416734519e-05, -9.956002313396831e-05, -9.363894840885674e-05, -9.873902442241743e-05, -9.873902442241743e-05, -1.852239501755534e-02, -1.586782266003267e-02, -2.567877171800153e-02, -2.729605603213112e-02, -1.488359894794988e-02, -1.488359894794988e-02, -6.756812556645498e-01, -1.407307118568632e+00, -8.356517443244127e-01, -2.245102204347908e-04, -2.717703849560378e+00, -2.717703849560378e+00, 3.489305070387208e+02, 2.768841242775698e+02, 7.934983975534138e+02, 8.975146722894930e-01, 4.073677356752328e+02, 4.073677356752327e+02, -1.232572622865938e-02, -1.238764807986210e-02, -1.239195342294559e-02, -1.237264049602753e-02, -1.238484262392485e-02, -1.238484262392485e-02, -1.498017259070087e-02, -1.939525589983461e-02, -1.767653197826093e-02, -1.667968646924177e-02, -1.720481103107777e-02, -1.720481103107777e-02, -1.434705499118242e-02, -4.789744663802711e-01, -2.933176485967982e-01, -1.350135701248716e-01, -1.949769590759650e-01, -1.949769590759650e-01, -4.338216918405457e-02, -3.369271567416571e+00, 1.724315074633705e-01, -1.808750610523404e-01, -1.777146052416925e+00, -1.777146052416907e+00, 6.000631125806083e+01, 3.698229633979965e+03, 1.029251867113049e+03, -1.716998671340400e+00, 6.745628822288987e+02, 6.745628822288999e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_r4scan_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r4scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_r4scan_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r4scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.011906643713982e-03, 1.011905009824515e-03, 1.011868552448506e-03, 1.011893901799334e-03, 1.011906051451273e-03, 1.011906051451273e-03, 6.498698866429970e-03, 6.513367568841993e-03, 6.954693461789535e-03, 6.996511317352495e-03, 6.501296967298596e-03, 6.501296967298596e-03, 1.486137824901746e-02, 1.482705373584645e-02, 1.416027954783638e-02, 1.540137957199883e-02, 1.485052698011694e-02, 1.485052698011694e-02, 1.482276110637293e-01, 1.494015379454401e-01, 3.188750771237483e-03, 1.366859829579122e-02, 1.490055644900292e-01, 1.490055644900292e-01, 6.667867139871144e-03, 4.525211320483030e-03, 3.050402862877767e-03, 2.390557585389521e-06, 6.185120223339910e-03, 6.185120223339706e-03, 4.131104823789126e-03, 4.134020924967371e-03, 4.131233962636042e-03, 4.133510745160473e-03, 4.132822950809722e-03, 4.132822950809722e-03, 1.248561078459800e-02, 1.189101152490102e-02, 1.219071508654858e-02, 1.169847624732386e-02, 1.245168986924021e-02, 1.245168986924021e-02, 5.570410714530424e-02, 5.774294545286521e-02, 6.369284339100760e-02, 6.815033601519509e-02, 5.047637759918234e-02, 5.047637759918234e-02, 1.402587002665534e-02, 1.427797983925700e-01, 1.604375587422444e-02, 2.154299888792176e-02, 6.554558027797698e-02, 6.554558027797698e-02, 1.121875485077024e-05, 5.496605623903067e-06, 4.339054517927626e-05, 1.221887379467215e-03, 3.160184003221239e-06, 3.160184003221226e-06, 4.202832518914309e-02, 4.163459882041605e-02, 4.187871528418670e-02, 4.198476986682554e-02, 4.194172605592773e-02, 4.194172605592773e-02, 4.623729448719215e-02, 4.123694967027820e-02, 4.220297438652678e-02, 4.359879548323019e-02, 4.303676812686728e-02, 4.303676812686728e-02, 5.808305557592759e-02, 9.801771957090782e-02, 9.911438053480290e-02, 9.086543611558910e-02, 9.400369690068601e-02, 9.400369690068598e-02, 6.464214430201649e-02, 6.712569177258126e-03, 3.488573482764121e-03, 1.006383004424003e-01, 1.859572021252540e-02, 1.859572021252527e-02, 1.630634741979891e-05, 2.606545297793714e-07, 3.137232742143829e-05, 1.661241940809703e-02, 2.742425220181454e-06, 2.742425220181451e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
