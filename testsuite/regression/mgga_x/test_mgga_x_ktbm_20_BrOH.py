
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_20_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_20", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.170670710136852e+01, -2.170682126103875e+01, -2.170736366973434e+01, -2.170549993612206e+01, -2.170676694720078e+01, -2.170676694720078e+01, -3.060330754591342e+00, -3.060430358121662e+00, -3.063545506285304e+00, -3.062581685019594e+00, -3.060372958945401e+00, -3.932676884147737e+00, -5.506222843396423e-01, -6.850287794087734e-01, -6.543917969773567e-01, -6.649714010444929e-01, -6.858084991480596e-01, -6.858084991480596e-01, -1.837680277284495e-01, -1.873330899246623e-01, -6.601416601573423e-01, -1.202333698858737e-01, -1.848160746986239e-01, -1.848160746986239e-01, -8.838415550127156e-03, -9.258294008482059e-03, -3.783418065844835e-02, -4.238108800947924e-03, -9.161821369912955e-03, -9.161821369912953e-03, -6.081256348727720e+00, -6.081682143456854e+00, -6.081298260359408e+00, -5.476929246090910e+00, -6.081478010390578e+00, -6.081478010390578e+00, -1.676135042672326e+00, -1.695493124011997e+00, -1.668176725565361e+00, -1.683200911931437e+00, -1.699876958801493e+00, -2.193272232260449e+00, -6.753780913787807e-01, -7.395948000481793e-01, -6.323524542272767e-01, -6.716612835402799e-01, -7.052914635856163e-01, -5.806801425880768e-01, -8.428458766796768e-02, -1.747811243400532e-01, -8.310291359764589e-02, -2.244942608979261e+00, -1.016221593287175e-01, -1.016221593287175e-01, -4.190535685634391e-03, -4.672554019889130e-03, -3.502142938546602e-03, -5.319661518033460e-02, -4.363573015822160e-03, -4.257387698221485e-03, -6.875546173071222e-01, -6.887580763362301e-01, -6.583028451695814e-01, -6.881028979638980e-01, -6.882808091242164e-01, -6.882808091242164e-01, -6.672952815332985e-01, -5.833754511859508e-01, -6.157518801101024e-01, -6.399003836046029e-01, -6.283572813185908e-01, -5.367031263778054e-01, -7.756000413444786e-01, -1.905395746721655e-01, -2.846745317180814e-01, -3.015687703189160e-01, -3.353336715308018e-01, -3.353336715308017e-01, -4.024749851145927e-01, -3.500460515325091e-02, -4.756328720955021e-02, -3.759125473385212e-01, -6.862203011970816e-02, -6.989595664562974e-02, -1.035776217583929e-02, -1.279146489686912e-03, -2.429990242398147e-03, -6.667768857027774e-02, -3.618168126797666e-03, -3.618168126797662e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_20_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_20", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.274029927324166e+01, -3.274039532386634e+01, -3.274088080124559e+01, -3.273930841772316e+01, -3.274034942895813e+01, -3.274034942895813e+01, -4.753883798612265e+00, -4.754138238099907e+00, -4.761949019444057e+00, -4.759307607120854e+00, -4.753977044958970e+00, -4.845345342002256e+00, -7.547262538637830e-01, -9.021496157033545e-01, -8.648162493117005e-01, -8.777146966513791e-01, -9.030655756427276e-01, -9.030655756427276e-01, -2.429132867275350e-01, -2.474306390465392e-01, -8.588214097535045e-01, -1.576444942078695e-01, -2.442494843110317e-01, -2.442494843110317e-01, -1.157663367200628e-02, -1.212650000383617e-02, -4.952155186688141e-02, -5.551517425497132e-03, -1.200013864372756e-02, -1.200013864372756e-02, -7.328301941890036e+00, -7.332378045906329e+00, -7.328745278620959e+00, -8.000432727661986e+00, -7.330352868575431e+00, -7.330352868575431e+00, -2.537263291734029e+00, -2.581266095622751e+00, -2.518553999856937e+00, -2.553235219721511e+00, -2.591590395382375e+00, -2.753911005697601e+00, -7.982785564314979e-01, -8.724550432756821e-01, -7.628928929623148e-01, -7.884914105373313e-01, -8.271848713342201e-01, -9.060805303704008e-01, -1.092939505014182e-01, -2.306953325689067e-01, -1.076324977636457e-01, -2.631891850688666e+00, -1.331562880982241e-01, -1.331562880982241e-01, -5.586749098484167e-03, -6.120572891267762e-03, -4.587444475829074e-03, -7.005209818070775e-02, -5.817376927879647e-03, -5.576754032393250e-03, -8.885084010480023e-01, -8.664743651568648e-01, -9.122539170699360e-01, -8.801631775128467e-01, -8.770788099655942e-01, -8.770788099655942e-01, -8.536627354089967e-01, -6.927891003398499e-01, -7.212799877463874e-01, -7.598175063106727e-01, -7.382744570550152e-01, -8.181731813729631e-01, -9.093727600181586e-01, -2.508945522344792e-01, -3.739869297922938e-01, -4.581769502328658e-01, -4.316598698746381e-01, -4.316598698746384e-01, -6.284116282746268e-01, -4.582285723959164e-02, -6.224183876297082e-02, -4.613438961950455e-01, -8.926402655636860e-02, -9.144099748463388e-02, -1.356684799259713e-02, -1.675577217310312e-03, -3.183071978668786e-03, -8.723056282694383e-02, -4.739450083472227e-03, -4.739450083472224e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_20_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_20", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.974576693040405e-08, -1.974575054331823e-08, -1.974551999454040e-08, -1.974580940545461e-08, -1.974575937273072e-08, -1.974575937273072e-08, -1.446579115135287e-05, -1.446896171831105e-05, -1.456234190987291e-05, -1.452152234914867e-05, -1.446639600308619e-05, -1.863093154500189e-05, -3.798600187903710e-03, -5.271580319542688e-03, -4.680695102255145e-03, -5.021376257631764e-03, -5.287399486488733e-03, -5.287399486488733e-03, -7.297244306652051e-01, -7.462979334484244e-01, -8.776815590764343e-04, -3.317662783816708e-01, -7.339023327303874e-01, -7.339023327303874e-01, -2.518411893127921e+01, -2.296383624643060e+01, -1.200839945208070e+00, -6.256717710809505e+01, -2.398420787018545e+01, -2.398420787018540e+01, -6.874436545513098e-06, -6.876290503880330e-06, -6.874668856003830e-06, -6.201868208240358e-06, -6.875339408499876e-06, -6.875339408499876e-06, -1.148397054507730e-04, -1.169514928234865e-04, -1.137504935866355e-04, -1.155311168159869e-04, -1.176664250777201e-04, -1.536213380753072e-04, -3.307893209557677e-02, -2.985641776060338e-02, -3.470257556474346e-02, -3.722975878100791e-02, -3.123304743696827e-02, -2.586445485347139e-02, 1.228902756628474e-01, -2.907327005452563e-01, 1.171871751450966e-01, -3.073348457527126e-04, -5.230405758893919e-01, -5.230405758893919e-01, 2.766576107412514e+02, -5.796645916954238e+01, -2.047776454963174e+02, 8.440763212201539e-01, 2.576201768576812e+02, -7.744944043006284e+01, -4.226152949895846e-02, -4.237820388321539e-02, -4.050468613357108e-02, -4.232871171901839e-02, -4.234641123300213e-02, -4.234641123300213e-02, -4.785777079405721e-02, -5.634188454115430e-02, -5.652579127013955e-02, -5.458929707731190e-02, -5.580825402770206e-02, -4.786214098211085e-02, -2.341658443704416e-02, -1.588878505985808e-01, -2.017753422695373e-01, -1.141477129006350e-01, -1.893124616752345e-01, -1.893124616752346e-01, -5.310324839664766e-02, -1.272776878167859e+00, -7.983896274963900e-01, -2.328579295251704e-01, 3.309884895201095e-01, -7.288629155382578e-01, -1.138477461240069e+01, -8.066637222016770e+02, -3.142937460745251e+02, -8.755012644947576e-01, -1.269873540795889e+02, -1.269873540795889e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_20_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_20", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.226820516981155e-03, 2.226836846091134e-03, 2.226903695431077e-03, 2.226638630059771e-03, 2.226829149815451e-03, 2.226829149815451e-03, 5.069932107040229e-03, 5.071995937092031e-03, 5.134035776517944e-03, 5.109571312911586e-03, 5.070480859916139e-03, 1.689611210295916e-02, 1.922196382300753e-03, 3.847969043749538e-02, 3.171111879991925e-02, 3.475243703616546e-02, 3.866188803989815e-02, 3.866188803989815e-02, 1.101350209155164e-01, 1.170353993763482e-01, -9.294947313296192e-04, 1.787799674306146e-02, 1.120599255832339e-01, 1.120599255832339e-01, 4.315362787849622e-04, 4.530792474479772e-04, 1.824792438302056e-03, 1.161780715396188e-04, 4.585863834277800e-04, 4.585863834277743e-04, 1.337054649954651e-02, 1.335710367192770e-02, 1.336907480576857e-02, 1.011979590515584e-02, 1.336379606206177e-02, 1.336379606206177e-02, 5.807305717220988e-03, 6.320076997295407e-03, 5.583778106342920e-03, 5.986657855554073e-03, 6.456988248317920e-03, 2.650344742415535e-02, 1.210092564937129e-01, 1.143885329257237e-01, 1.179331872799991e-01, 1.252315951705985e-01, 1.197906001830418e-01, 6.263597768439340e-02, -1.848080974513909e-03, 4.430697825784573e-02, -2.058050652375637e-03, 3.770966314519300e-02, 1.709541831676958e-02, 1.709541831676958e-02, -5.432089613073986e-07, 1.443960076207958e-04, 2.148779021916744e-04, -5.380754347164258e-04, -6.255525770093549e-07, 1.458916465663246e-04, 1.030266257481451e-01, 1.085163620375292e-01, 9.601831239834351e-02, 1.050809150471261e-01, 1.058482922433140e-01, 1.058482922433140e-01, 1.083283628064151e-01, 1.373448998999558e-01, 1.383152239407727e-01, 1.306701855037554e-01, 1.354901087977727e-01, 8.449730821053297e-02, 1.100128313254625e-01, -1.852092286942564e-03, 1.025313857280767e-01, 3.432208535969879e-02, 1.338035300807042e-01, 1.338035300807042e-01, 4.324246141725371e-02, 1.507551026649360e-03, 2.487475436194134e-03, 1.809887693506582e-01, -1.748208949921888e-03, 7.696130392055078e-03, 3.131150479263775e-04, 4.107671797687917e-05, 1.098604507646538e-04, 8.024327013365135e-03, 1.467521955168365e-04, 1.467521955168408e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
