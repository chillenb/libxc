
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_20_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_20", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.482815224441086e+01, -2.482821721219602e+01, -2.482866755317776e+01, -2.482760978563161e+01, -2.482818504450463e+01, -2.482818504450463e+01, -3.417660087962507e+00, -3.417782883522126e+00, -3.421762337138297e+00, -3.422779625760396e+00, -3.417695765116762e+00, -3.417695765116762e+00, -5.950705230399465e-01, -5.945096706328368e-01, -5.809028343718924e-01, -5.906148175355693e-01, -5.948723243405415e-01, -5.948723243405415e-01, -1.791059401271260e-01, -1.818613571092718e-01, -6.778872754019964e-01, -1.167722408803767e-01, -1.798660829711725e-01, -1.798660829711725e-01, -8.834255761503443e-03, -9.252827906406792e-03, -3.769107719571485e-02, -4.225802731743041e-03, -9.157096134933516e-03, -9.157096134933516e-03, -6.077061797048623e+00, -6.077532804419078e+00, -6.077161597725207e+00, -6.077524988300368e+00, -6.077234956535849e+00, -6.077234956535849e+00, -2.095160069144686e+00, -2.127876821383739e+00, -2.091586422463438e+00, -2.117748517123572e+00, -2.121687828935089e+00, -2.121687828935089e+00, -6.173886227382301e-01, -6.659839208215129e-01, -5.590846512161353e-01, -5.811001092819370e-01, -6.546633389749033e-01, -6.546633389749033e-01, -8.541630590443244e-02, -1.724928814814999e-01, -8.440164388264200e-02, -1.920186704818972e+00, -1.002603309220887e-01, -1.002603309220887e-01, -4.077564967397493e-03, -4.658383260746080e-03, -3.494783634343716e-03, -5.250791856032249e-02, -4.245050680418987e-03, -4.245050680418989e-03, -6.778360732734855e-01, -6.794536488560370e-01, -6.789786054660617e-01, -6.785288699762565e-01, -6.787586923543286e-01, -6.787586923543286e-01, -6.486035553330034e-01, -5.758001067949575e-01, -6.044261769415206e-01, -6.251714746068177e-01, -6.146513570694438e-01, -6.146513570694438e-01, -6.835062852790316e-01, -2.268407509159481e-01, -2.756589976817388e-01, -3.558169699121754e-01, -3.181944508803388e-01, -3.181944508803388e-01, -4.837108683373673e-01, -3.492490617039420e-02, -4.731719763516903e-02, -3.382992432595985e-01, -6.927065152282913e-02, -6.927065152282912e-02, -1.032489627420451e-02, -1.276503690203214e-03, -2.425988283772718e-03, -6.604658090983627e-02, -3.607983087080159e-03, -3.607983087080155e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_20_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_20", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.982715050759934e+01, -2.982724607485589e+01, -2.982759725143028e+01, -2.982602668653361e+01, -2.982720162755142e+01, -2.982720162755142e+01, -4.835401720875834e+00, -4.835547641544299e+00, -4.840110939623564e+00, -4.839048302845756e+00, -4.835463126007708e+00, -4.835463126007708e+00, -8.129560334744357e-01, -8.117549473626859e-01, -7.838683637630813e-01, -8.000633675128592e-01, -8.125325208511058e-01, -8.125325208511058e-01, -2.384117193445828e-01, -2.422858990124911e-01, -8.928971383076231e-01, -1.542328048051055e-01, -2.395015915622822e-01, -2.395015915622822e-01, -1.159080338615670e-02, -1.214515524904471e-02, -4.979981730748580e-02, -5.648801284045276e-03, -1.201617670388858e-02, -1.201617670388859e-02, -7.333458261450390e+00, -7.337486166169849e+00, -7.333831299250462e+00, -7.336965340991600e+00, -7.335572542302193e+00, -7.335572542302193e+00, -2.716543528432910e+00, -2.740874170106967e+00, -2.708754684113964e+00, -2.728067625635963e+00, -2.743431666943268e+00, -2.743431666943268e+00, -8.305230781295243e-01, -9.445782247118830e-01, -7.806076268336362e-01, -8.471330184482196e-01, -8.650817323138624e-01, -8.650817323138624e-01, -1.127865187111979e-01, -2.282070041275164e-01, -1.114291490633069e-01, -2.854030783090304e+00, -1.321100010278833e-01, -1.321100010278833e-01, -5.409321247101433e-03, -6.207663016294277e-03, -4.619182172616618e-03, -6.984252884877336e-02, -5.675366089667525e-03, -5.675366089667533e-03, -9.012909380432516e-01, -8.785694341270821e-01, -8.864238914289719e-01, -8.927205766489381e-01, -8.895491579482148e-01, -8.895491579482148e-01, -8.778293377717664e-01, -6.970118132135940e-01, -7.314082006781105e-01, -7.764325927299999e-01, -7.522363521956599e-01, -7.522363521956601e-01, -9.879995083216451e-01, -3.010295207556360e-01, -3.667737529532862e-01, -4.823033130259765e-01, -4.234129317533596e-01, -4.234129317533596e-01, -6.349631357536035e-01, -4.599026792121912e-02, -6.258244825774935e-02, -4.634270698703933e-01, -9.139392427740715e-02, -9.139392427740710e-02, -1.379151550050958e-02, -1.712381514423995e-03, -3.199447353147150e-03, -8.718131847430609e-02, -4.826469394565144e-03, -4.826469394565140e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_20_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_20", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.250602233832515e-08, -2.250594787841491e-08, -2.250554887454495e-08, -2.250679237196352e-08, -2.250598333390009e-08, -2.250598333390009e-08, -1.608445873066650e-05, -1.608797307668338e-05, -1.619221568574398e-05, -1.615744554245137e-05, -1.608505925615137e-05, -1.608505925615137e-05, -4.275478353024903e-03, -4.257167509604890e-03, -3.807662492268927e-03, -4.142539117395880e-03, -4.269518482045968e-03, -4.269518482045968e-03, -6.982336390624690e-01, -7.107448664746053e-01, -9.509706758978828e-04, -2.467626816557980e-01, -7.008740011839312e-01, -7.008740011839312e-01, -2.331521882477386e+01, -2.082090638014333e+01, -7.866283413941850e-01, 1.281682044781845e+01, -2.204225966023914e+01, -2.204225966023910e+01, -6.869607457651505e-06, -6.871512799074062e-06, -6.869906304583818e-06, -6.871380390695390e-06, -6.870454182228966e-06, -6.870454182228966e-06, -1.452109419515019e-04, -1.481192015825365e-04, -1.445319823502285e-04, -1.470027082240068e-04, -1.480150013972730e-04, -1.480150013972730e-04, -3.020017013094263e-02, -2.691442110218865e-02, -3.059001126108936e-02, -3.226566559656352e-02, -2.896976608536685e-02, -2.896976608536685e-02, -3.054460910980333e-01, -2.789826873649716e-01, -3.557605621908644e-01, -2.636119607800563e-04, -4.539352854083811e-01, -4.539352854083811e-01, -2.883453710206073e+01, -2.730846068849235e+00, -1.146469190940342e+02, -2.375050133088120e-01, 1.679771601006216e+01, 1.679771601006229e+01, -4.165858503458159e-02, -4.179955181030968e-02, -4.177216753727543e-02, -4.173397428008249e-02, -4.175469081633632e-02, -4.175469081633632e-02, -4.651004431176577e-02, -5.557790298987554e-02, -5.546100913795941e-02, -5.331563139367661e-02, -5.456910530216015e-02, -5.456910530216012e-02, -2.067221662660918e-02, -2.303973928170734e-01, -1.926801410355846e-01, -1.352139149351795e-01, -1.777077596983051e-01, -1.777077596983051e-01, -6.355453358036574e-02, -9.979846790429800e-01, -5.060594120328206e-01, -2.083988235738656e-01, -5.662346615817823e-01, -5.662346615817815e-01, 1.383413572557482e+00, 4.603360676722666e+02, -2.123634461506065e+02, -6.661050578755271e-01, 3.440646561300866e+01, 3.440646561300883e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_20_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_20", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([3.290094200906784e-03, 3.290083581575131e-03, 3.290072486701289e-03, 3.290248553435569e-03, 3.290088259893433e-03, 3.290088259893433e-03, 9.662711226183490e-03, 9.665253587977145e-03, 9.743542507231487e-03, 9.742944113248185e-03, 9.663175472680075e-03, 9.663175472680075e-03, 1.357595359390865e-02, 1.350978330609754e-02, 1.214901682305817e-02, 1.441044949492238e-02, 1.355515120703550e-02, 1.355515120703550e-02, 9.425945233090657e-02, 9.830068770928779e-02, 1.665144824183747e-03, 8.911121498951796e-03, 9.518463828609185e-02, 9.518463828609185e-02, 3.920252996052653e-04, 4.011464379336976e-04, 1.086902468401253e-03, -1.631528647775233e-05, 4.128559861149230e-04, 4.128559861149330e-04, 1.334703034786486e-02, 1.333388982781165e-02, 1.334588845387786e-02, 1.333565934007812e-02, 1.334003320707351e-02, 1.334003320707351e-02, 2.266730994167612e-02, 2.370084189028739e-02, 2.264529353725734e-02, 2.349469676680816e-02, 2.337852069988581e-02, 2.337852069988581e-02, 9.058921967462111e-02, 8.495793681717403e-02, 7.570595402390538e-02, 7.843894467721806e-02, 9.550983804699573e-02, 9.550983804699573e-02, 5.061842430735989e-03, 3.916050419969239e-02, 5.689662739082073e-03, 2.283556176882931e-02, 1.268869393274458e-02, 1.268869393274458e-02, 4.020048594388471e-05, 5.443929357076186e-06, 1.068794564169246e-04, 8.362254975636990e-04, -2.153344718475787e-05, -2.153344718475353e-05, 9.978381757295984e-02, 1.050883659959386e-01, 1.032348496933515e-01, 1.017633625194847e-01, 1.025026345774193e-01, 1.025026345774193e-01, 1.014892892187511e-01, 1.318735350562745e-01, 1.311252897107995e-01, 1.228010283111166e-01, 1.274442260541087e-01, 1.274442260541087e-01, 7.536821951586560e-02, 6.702758499488497e-02, 8.680939675797174e-02, 1.012143565682278e-01, 1.063658982091372e-01, 1.063658982091371e-01, 1.070173648714882e-01, 1.115492524927044e-03, 1.399347926156214e-03, 1.217793343342966e-01, 5.146660356257002e-03, 5.146660356257007e-03, -2.382612475960902e-05, -1.420961164423089e-05, 6.806233312555980e-05, 5.193908250315600e-03, -2.666170774890358e-05, -2.666170774889886e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
