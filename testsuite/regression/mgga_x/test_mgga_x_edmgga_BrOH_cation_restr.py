
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_edmgga_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_edmgga", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.928538031629272e+01, -1.928541430180893e+01, -1.928564526355219e+01, -1.928513861647451e+01, -1.928539275489592e+01, -1.928539275489592e+01, -3.543162238698065e+00, -3.543122161502294e+00, -3.542262921246779e+00, -3.544340648114776e+00, -3.543187494519252e+00, -3.543187494519252e+00, -7.371613342661644e-01, -7.374898474313335e-01, -7.483757504160499e-01, -7.506578628398055e-01, -7.485751876595903e-01, -7.485751876595903e-01, -2.466894200897583e-01, -2.464240308192779e-01, -8.549535458092374e-01, -2.269812364396409e-01, -2.299670404421396e-01, -2.299670404421396e-01, -7.393796892001003e-02, -7.418735177800381e-02, -1.332603618654264e-01, -6.689660644678980e-02, -6.783080874547859e-02, -6.783080874547856e-02, -8.896041287529558e+00, -7.054565344222349e+00, -3.811671977999705e+00, -1.067016409795103e+01, -4.120546149842953e+00, -5.881563979441817e+00, -1.430259219506964e+00, -2.644948230156402e+00, -2.312460032078548e+00, -2.319033381856888e+00, -2.315686524381471e+00, -2.106890369250534e+00, -1.258162645806582e+00, -9.953092262589314e-01, -1.148532228453625e+00, -5.863664798618592e-01, -6.444520215121041e-01, -6.849826881989394e-01, -6.680901274802829e-02, -4.335718533269456e-01, -6.169335788266753e-02, -2.011496565630093e+00, -1.880427209885115e-01, -1.647187000087550e-01, -1.325554520375655e-01, -2.875743867728283e+00, -1.900915852040418e-03, -4.151620291147351e-02, -7.761006410751942e-02, -2.290014453243276e-03, -2.791113919138327e+01, -4.281155253225676e-01, -4.289837120571030e-01, -4.354189292212387e+00, -4.293443691564399e-01, -8.287470648640077e+01, -4.189128832483349e-01, -5.412472291842723e-01, -1.002801799641337e+00, -4.184716610833102e-01, -6.141710461461933e-01, -1.290072695978328e+00, -1.444242058420039e+00, -1.601324058559195e-01, -1.922900907625855e-01, -2.553395119618497e-01, -4.518141931086401e-01, -4.061254529522059e-01, -5.089983430617807e-01, -2.448401879051157e-02, -1.550312803747255e-01, -3.659214320013796e-01, -5.284287405343500e-02, -1.514586045662944e-01, -6.214297465759706e-03, -6.645241488603292e-04, -1.394865373106781e-03, -5.031292384515345e-02, -2.118980552453186e-03, -2.118980051606629e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_edmgga_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_edmgga", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.912591261502869e+01, -2.912601798419043e+01, -2.912648064957949e+01, -2.912491318197279e+01, -2.912573535467901e+01, -2.912573535467901e+01, -4.577196570213702e+00, -4.577268642492480e+00, -4.579052689820855e+00, -4.576847376173156e+00, -4.577397088282261e+00, -4.577397088282261e+00, -8.430779346210379e-01, -8.412622185682841e-01, -7.988387535195853e-01, -8.058564344748141e-01, -8.049967691049340e-01, -8.049967691049340e-01, -2.103263011196957e-01, -2.123158104707369e-01, -9.921403597514888e-01, -1.773009181552777e-01, -1.850761261374867e-01, -1.850761261374867e-01, -3.381361070844675e-02, -3.435728743341446e-02, -8.136802717352098e-02, -2.810249465034489e-02, -3.017762033651054e-02, -3.017762033651055e-02, -8.426767800377142e+00, -7.235253621802981e+00, -5.097698540546867e+00, -9.735693904717021e+00, -6.111044081333186e+00, -6.902805033073931e+00, -1.908627786942963e+00, -2.584072750207576e+00, -2.377792099472976e+00, -2.395487381516944e+00, -2.421475250524998e+00, -2.396311405504882e+00, -1.136202882879482e+00, -9.704160257080027e-01, -1.038942963413141e+00, -7.647801521002305e-01, -7.843524665238240e-01, -7.821217430993342e-01, -8.927755079271479e-02, -3.674480323270138e-01, -8.228178128507349e-02, -2.608718385192477e+00, -1.343898173598993e-01, -9.916091659053172e-02, -7.852157231670769e-02, -1.676680405501600e+00, -2.534554476342376e-03, -5.540193791070248e-02, -4.399498690982897e-02, -3.053352970466709e-03, -1.765178968828474e+01, -5.708223758996848e-01, -5.719783799383724e-01, -3.216742670504850e+00, -5.724644418935274e-01, -5.027325809916864e+01, -5.585506803080119e-01, -6.204064743944063e-01, -9.202306916492862e-01, -6.065824072177036e-01, -6.906921223025555e-01, -1.138501165765833e+00, -1.306747508840250e+00, -2.136412586084765e-01, -2.565106047777730e-01, -3.429175729843170e-01, -4.222862463764462e-01, -3.882545372088277e-01, -5.700998870692666e-01, -3.265885502489051e-02, -1.020250255745220e-01, -4.280369249223925e-01, -7.049037406170040e-02, -9.880970314753995e-02, -8.285748584222876e-03, -8.860324474321105e-04, -1.859820692975131e-03, -6.658183827978914e-02, -2.825309153557805e-03, -2.825307670179916e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_edmgga_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_edmgga", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.617431681305247e-09, -6.617335461113997e-09, -6.616956505381360e-09, -6.618387811764020e-09, -6.617630892800088e-09, -6.617630892800088e-09, -9.895065112351718e-06, -9.895050769605667e-06, -9.893773812256749e-06, -9.888607463148908e-06, -9.894111876111133e-06, -9.894111876111133e-06, -6.598097859667328e-03, -6.610758880363873e-03, -6.816102742134537e-03, -6.664920394571996e-03, -6.725647493191941e-03, -6.725647493191941e-03, -7.888946046665340e-01, -7.768078982545280e-01, -3.599246083633231e-03, -1.393381002499450e+00, -1.164079800074438e+00, -1.164079800074438e+00, -6.971249188779725e+03, -6.106055513274379e+03, -4.420423284396718e+01, -3.245229900121988e+04, -1.774940744125603e+04, -1.774940744125605e+04, -5.828648510512629e-07, -1.108476639544126e-06, -4.085619647862268e-10, -3.599629434664156e-07, -4.332874105055592e-07, -1.731010749888053e-06, -1.630615748918666e-09, -5.541690152900361e-05, -7.959836331714593e-05, -7.822172813974247e-05, -7.774291258167946e-05, -9.217115801924742e-05, -1.990987914564080e-03, -3.327858733341884e-03, -2.809887795277341e-03, -1.408548098750100e-02, -1.083570192324536e-02, -9.736273115313806e-03, -3.246156466900256e-03, -1.799497740886694e-01, -5.816313486631184e-05, -1.044684884387849e-04, -3.021829880646938e+00, -4.353877137166172e+00, -2.503521914980495e+04, -2.724721248086722e+02, -5.544467472785206e-09, -3.040800063632540e-03, -3.450395141429436e+04, -5.053525198380190e-06, -1.140560274561426e-05, -2.463257985578821e-12, -8.194803314346940e-15, -1.696583067067118e-04, -2.405659686982760e-11, -2.798389197110859e-06, -2.867372138570991e-14, -2.271353422789731e-02, -4.285308011085299e-03, -2.302968468364693e-03, -1.547751168310217e-02, -2.218653349503054e-03, -1.160350311184833e-03, -5.537851538365094e-06, -1.631304338108055e-06, -1.160184229077015e-04, -7.431759044006378e-02, -9.984623595269011e-02, -3.047474349284156e-02, -8.249311898067397e-03, -1.918856074468704e+01, -1.069585846882095e-01, -2.911292415642685e-04, -9.152697351514760e+00, -3.349848014497364e-05, -4.437452003379009e-03, -2.847038379900636e-05, -4.962184431604161e-01, -1.885786896268918e-04, -5.301898954253750e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_edmgga_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_edmgga", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [-2.558723958091148e-04, -2.558708160788147e-04, -2.558663406922294e-04, -2.558898182354067e-04, -2.558771554534434e-04, -2.558771554534434e-04, -1.651143839473125e-03, -1.651152137665776e-03, -1.651307533102656e-03, -1.650745065337906e-03, -1.651116994217994e-03, -1.651116994217994e-03, -7.900421909658581e-03, -7.889429331566306e-03, -7.503405958377572e-03, -7.521203346017086e-03, -7.549940460435916e-03, -7.549940460435916e-03, -1.626206396461712e-02, -1.675153059356740e-02, -6.832742614341481e-03, -1.256787259164048e-02, -1.486692245525332e-02, -1.486692245525332e-02, -6.062055411674837e-03, -6.191382327474407e-03, -7.527038117062713e-03, -5.436022542981007e-03, -5.899109831710403e-03, -5.899109831710407e-03, -3.264260902411324e-04, -6.211302955085886e-04, -2.288162391357674e-07, -2.016962549180891e-04, -2.427246157656907e-04, -9.697002704570111e-04, -4.849725853769426e-08, -1.684318230917611e-03, -2.329979697671740e-03, -2.334234967699681e-03, -2.358077396772361e-03, -2.795711109114529e-03, -1.595632840953018e-03, -3.419331082496442e-03, -1.784037671839895e-03, -1.004555225155770e-02, -9.110857311031017e-03, -8.186437364482570e-03, -9.798816352283209e-06, -3.726362340671444e-03, -1.390126415776969e-07, -2.932211925535348e-03, -1.474214023312316e-02, -2.124059588031844e-02, -1.926226483086343e-03, -4.264087152110539e-05, -3.879257601350904e-16, -2.211208832693123e-06, -4.220690277893305e-03, -6.181716527996193e-13, -9.274561760130663e-06, -1.968746862914233e-12, -6.589627595322483e-15, -1.371102313853919e-04, -1.939286601020911e-11, -2.255879625769213e-06, -2.147113493700720e-14, -1.075888416481566e-02, -2.330791297728878e-03, -1.428055759951860e-03, -8.982367507058719e-03, -1.287594554217703e-03, -1.373748785038898e-03, -2.312794553914231e-07, -1.180057904475141e-07, -1.934045455228225e-05, -8.147989982999995e-03, -1.094688519320184e-02, -1.126400630094025e-02, -1.231648052018595e-06, -7.259772332621555e-03, -1.597374642412312e-02, -4.370571986072099e-07, -1.374046881211102e-02, -8.188398065925728e-11, -1.326373282325234e-11, -7.870280240523162e-13, -6.168526795027120e-04, -1.827565606458540e-11, -5.138209517143058e-12]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_edmgga_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_edmgga", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.023489583236459e-03, 1.023483264315259e-03, 1.023465362768918e-03, 1.023559272941627e-03, 1.023508621813773e-03, 1.023508621813773e-03, 6.604575357892498e-03, 6.604608550663103e-03, 6.605230132410623e-03, 6.602980261351623e-03, 6.604467976871974e-03, 6.604467976871974e-03, 3.160168763863432e-02, 3.155771732626522e-02, 3.001362383351029e-02, 3.008481338406835e-02, 3.019976184174366e-02, 3.019976184174366e-02, 6.504825585846846e-02, 6.700612237426960e-02, 2.733097045736593e-02, 5.027149036656192e-02, 5.946768982101326e-02, 5.946768982101326e-02, 2.424822164669935e-02, 2.476552930989763e-02, 3.010815246825085e-02, 2.174409017192403e-02, 2.359643932684161e-02, 2.359643932684163e-02, 1.305704360964530e-03, 2.484521182034355e-03, 9.152649565430694e-07, 8.067850196723563e-04, 9.708984630627627e-04, 3.878801081828044e-03, 1.939890341507770e-07, 6.737272923670442e-03, 9.319918790686960e-03, 9.336939870798724e-03, 9.432309587089445e-03, 1.118284443645812e-02, 6.382531363812072e-03, 1.367732432998577e-02, 7.136150687359579e-03, 4.018220900623079e-02, 3.644342924412407e-02, 3.274574945793028e-02, 3.919526540913284e-05, 1.490544936268577e-02, 5.560505663107877e-07, 1.172884770214139e-02, 5.896856093249262e-02, 8.496238352127375e-02, 7.704905932345373e-03, 1.705634860844216e-04, 1.551703040540361e-15, 8.844835330772491e-06, 1.688276111157322e-02, 2.472686611198477e-12, 3.709824704052265e-05, 7.874987451656933e-12, 2.635851038128993e-14, 5.484409255415677e-04, 7.757146404083644e-11, 9.023518503076854e-06, 8.588453974802879e-14, 4.303553665926264e-02, 9.323165190915512e-03, 5.712223039807439e-03, 3.592947002823488e-02, 5.150378216870812e-03, 5.494995140155591e-03, 9.251178215656922e-07, 4.720231617900565e-07, 7.736181820912900e-05, 3.259195993199998e-02, 4.378754077280735e-02, 4.505602520376101e-02, 4.926592208074378e-06, 2.903908933048622e-02, 6.389498569649249e-02, 1.748228794428840e-06, 5.496187524844409e-02, 3.275359226370291e-10, 5.305493129300935e-11, 3.148112096209265e-12, 2.467410718010848e-03, 7.310262425834161e-11, 2.055283806857223e-11]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
