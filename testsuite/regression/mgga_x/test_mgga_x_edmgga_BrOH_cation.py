
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_edmgga_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_edmgga", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.928538031640490e+01, -1.928541430198010e+01, -1.928564526371000e+01, -1.928513861755849e+01, -1.928539276085910e+01, -1.928539276085910e+01, -3.543162261895036e+00, -3.543122187808468e+00, -3.542262943217390e+00, -3.544340675945651e+00, -3.543187879454597e+00, -3.543187879454597e+00, -7.371743122470866e-01, -7.375087054062206e-01, -7.484027269015326e-01, -7.506605281835106e-01, -7.512435956764794e-01, -7.512435956764794e-01, -2.467844524536645e-01, -2.465493762932835e-01, -8.555147834541639e-01, -2.269935852076861e-01, -2.455661368791803e-01, -2.455661368791802e-01, -7.396648557092120e-02, -7.422448691762654e-02, -1.333276032045577e-01, -6.689847389252054e-02, -6.943084254786858e-02, -6.943084254786853e-02, -8.885627879961369e+00, -7.054553092039374e+00, -3.811705112426488e+00, -1.066963336604558e+01, -4.120550324233912e+00, -5.880729819975728e+00, -1.430264944711114e+00, -2.644948325759840e+00, -2.312465062714588e+00, -2.319038631937179e+00, -2.315716747723934e+00, -2.106894076153014e+00, -1.256431853954077e+00, -9.953048056564557e-01, -1.147237580754138e+00, -5.866910739509031e-01, -6.452459870788601e-01, -6.857125037835270e-01, -6.681204744006283e-02, -4.335733043856055e-01, -6.177762402802403e-02, -2.011496767837364e+00, -1.882442978184423e-01, -1.648568652479124e-01, -1.325614654172023e-01, -2.875520782808015e+00, -1.904029606521640e-03, -4.151733945697818e-02, -7.749060033108264e-02, -2.391785575281320e-03, -2.791103403284123e+01, -4.281187761223816e-01, -4.289869671414153e-01, -4.352814272065883e+00, -4.293476153485530e-01, -8.287473152701043e+01, -4.189151645595619e-01, -5.412523646378785e-01, -1.002796191578620e+00, -4.188731953808039e-01, -6.141747501917971e-01, -1.290073958753037e+00, -1.444221917284824e+00, -1.601350789560166e-01, -1.922996738604051e-01, -2.553449243595403e-01, -4.518148841239149e-01, -4.061259392697019e-01, -5.090159301813073e-01, -2.448477239162354e-02, -1.550153321345822e-01, -3.659814401331138e-01, -5.292115912096027e-02, -1.514130683125347e-01, -6.218233013140567e-03, -6.645259038746720e-04, -1.397502420066333e-03, -5.075756201295241e-02, -2.196443180115065e-03, -2.196442511076651e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_edmgga_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_edmgga", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.912593127644468e+01, -2.912589395343137e+01, -2.912605334534892e+01, -2.912598262278102e+01, -2.912643240051201e+01, -2.912652889813244e+01, -2.912505418126993e+01, -2.912477218008154e+01, -2.912600490901494e+01, -2.912546577794698e+01, -2.912600490901494e+01, -2.912546577794698e+01, -4.577030588609446e+00, -4.577362511137991e+00, -4.577094730337601e+00, -4.577442509156612e+00, -4.578812235755341e+00, -4.579293087415239e+00, -4.576596169920364e+00, -4.577098515696127e+00, -4.576081604172237e+00, -4.578711594693001e+00, -4.576081604172237e+00, -4.578711594693001e+00, -8.394550393353510e-01, -8.467018388775458e-01, -8.368418555541269e-01, -8.456856484081730e-01, -8.041248030260182e-01, -7.936034942741027e-01, -8.041340698191637e-01, -8.075864203254047e-01, -8.592848786546053e-01, -7.557772169975528e-01, -8.592848786546053e-01, -7.557772169975528e-01, -2.077623941779380e-01, -2.129461212854049e-01, -2.091956328656510e-01, -2.155050006760975e-01, -9.666934530769983e-01, -1.017577274510361e+00, -1.768995537213895e-01, -1.777082697115138e-01, -2.144576205387157e-01, -1.482329353251944e-01, -2.144576205387156e-01, -1.482329353251942e-01, -3.334703094237502e-02, -3.424434803846005e-02, -3.383021666414968e-02, -3.484071371338023e-02, -8.019423815112194e-02, -8.248233222301275e-02, -2.811620173262308e-02, -2.809000650139460e-02, -3.246005383889712e-02, -2.513637015479467e-02, -3.246005383889713e-02, -2.513637015479463e-02, -8.608946577852539e+00, -8.231870216504237e+00, -7.240074471817904e+00, -7.230432028284623e+00, -5.100103523594956e+00, -5.095495297528368e+00, -9.686717591742346e+00, -9.783904213550228e+00, -6.108112123317454e+00, -6.114000309711290e+00, -6.903369101850926e+00, -6.905654546590974e+00, -1.908468687973962e+00, -1.908821442236499e+00, -2.584529205985145e+00, -2.583616014538953e+00, -2.374299764085675e+00, -2.381286889839277e+00, -2.390734626926604e+00, -2.400212062729638e+00, -2.430208279596700e+00, -2.412729781011290e+00, -2.409179620690285e+00, -2.383866672459380e+00, -1.104939083116822e+00, -1.165008418658416e+00, -9.689403466966356e-01, -9.718848003395476e-01, -1.054924726609597e+00, -1.022902188263973e+00, -7.521553452727604e-01, -7.770115110806972e-01, -8.048107410660722e-01, -7.629002077558511e-01, -8.021056213396357e-01, -7.611639417663922e-01, -8.884740855423821e-02, -8.970369654273264e-02, -3.672912025975101e-01, -3.676056443843226e-01, -8.007203944182748e-02, -8.437909912204697e-02, -2.609275939290657e+00, -2.608160609597785e+00, -1.323679164512843e-01, -1.365402058716989e-01, -9.962156066894386e-02, -9.931459058608176e-02, -7.918976691676587e-02, -7.792557294494823e-02, -1.694367822304141e+00, -1.659521561393607e+00, -2.459864937305636e-03, -2.605083817932960e-03, -5.524121370219168e-02, -5.556348225601154e-02, -5.016577336119500e-02, -4.133659450206480e-02, -2.512378189468061e-03, -3.450300957943255e-03, -1.759669499741036e+01, -1.770613674832537e+01, -5.697079562194531e-01, -5.719324612042423e-01, -5.708621017466374e-01, -5.730903179832337e-01, -3.268173080365941e+00, -3.164088825378817e+00, -5.713532193738902e-01, -5.735714816298836e-01, -5.020657319082284e+01, -5.033922314229540e+01, -5.576274880291416e-01, -5.594708309791564e-01, -6.186987510801140e-01, -6.221138070449834e-01, -9.166089559392573e-01, -9.237986917102525e-01, -6.175441118888836e-01, -5.981915186013503e-01, -6.893478390443435e-01, -6.920315855202925e-01, -1.138349509655549e+00, -1.138655128410470e+00, -1.309672569550405e+00, -1.303805783370842e+00, -2.130233907978315e-01, -2.142556029222458e-01, -2.552232675177578e-01, -2.577851931361759e-01, -3.421105823887135e-01, -3.437309489558787e-01, -4.217017055678555e-01, -4.228679218260312e-01, -3.875758826107357e-01, -3.889296644039313e-01, -5.675585550755972e-01, -5.726041801049510e-01, -3.254430408017273e-02, -3.277322597637943e-02, -9.736415662830779e-02, -1.061225061562016e-01, -4.240250302750515e-01, -4.319950267268369e-01, -6.851510709404091e-02, -7.236264617171924e-02, -1.012528868465022e-01, -9.639444935706236e-02, -8.135638304699086e-03, -8.430615456774574e-03, -8.850201419464361e-04, -8.870425638837656e-04, -1.800810048872916e-03, -1.915306936554506e-03, -5.939819202512058e-02, -6.735606469659076e-02, -2.379756932016893e-03, -3.162459174297510e-03, -2.379756330947665e-03, -3.162456612337377e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_edmgga_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_edmgga", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.323484061975839e-08, 0.000000000000000e+00, -1.323488610586355e-08, -1.323461763771559e-08, 0.000000000000000e+00, -1.323472420766359e-08, -1.323400671796819e-08, 0.000000000000000e+00, -1.323381930462998e-08, -1.323652320781411e-08, 0.000000000000000e+00, -1.323702804865914e-08, -1.323470470966947e-08, 0.000000000000000e+00, -1.323581889217964e-08, -1.323470470966947e-08, 0.000000000000000e+00, -1.323581889217964e-08, -1.978914513840273e-05, 0.000000000000000e+00, -1.979111491563888e-05, -1.978901337235392e-05, 0.000000000000000e+00, -1.979118926998689e-05, -1.978790582463470e-05, 0.000000000000000e+00, -1.978718893045272e-05, -1.977725987184829e-05, 0.000000000000000e+00, -1.977716934900600e-05, -1.980176515620219e-05, 0.000000000000000e+00, -1.977469439771566e-05, -1.980176515620219e-05, 0.000000000000000e+00, -1.977469439771566e-05, -1.322875984221841e-02, 0.000000000000000e+00, -1.316116689600914e-02, -1.326084256894732e-02, 0.000000000000000e+00, -1.317856432410265e-02, -1.360051027436568e-02, 0.000000000000000e+00, -1.365792343892092e-02, -1.333358085415026e-02, 0.000000000000000e+00, -1.332538525236235e-02, -1.295213592599594e-02, 0.000000000000000e+00, -1.335269741312760e-02, -1.295213592599594e-02, 0.000000000000000e+00, -1.335269741312760e-02, -1.637084564580991e+00, 0.000000000000000e+00, -1.521649672547441e+00, -1.622442421746783e+00, 0.000000000000000e+00, -1.489092634351538e+00, -7.448745245236657e-03, 0.000000000000000e+00, -6.920909947307680e-03, -2.830415198684654e+00, 0.000000000000000e+00, -2.744306562602473e+00, -1.432249399343586e+00, 0.000000000000000e+00, -6.152773522413878e+00, -1.432249399343586e+00, 0.000000000000000e+00, -6.152773522413876e+00, -1.529118436298350e+04, 0.000000000000000e+00, -1.281748260927214e+04, -1.355274908296991e+04, 0.000000000000000e+00, -1.111837186298460e+04, -9.535080121190511e+01, 0.000000000000000e+00, -8.244379461578752e+01, -6.363026006079267e+04, 0.000000000000000e+00, -6.623095128617588e+04, -2.091547601431126e+04, 0.000000000000000e+00, -1.279428257331272e+05, -2.091547601431127e+04, 0.000000000000000e+00, -1.279428257331272e+05, -1.080663599643894e-06, 0.000000000000000e+00, -1.269469173782125e-06, -2.209294444954502e-06, 0.000000000000000e+00, -2.224670812231295e-06, -9.244005314799324e-10, 0.000000000000000e+00, -7.274142324442413e-10, -7.313725303405516e-07, 0.000000000000000e+00, -7.089306442907712e-07, -8.604380074109233e-07, 0.000000000000000e+00, -8.727759293143322e-07, -3.380113625773072e-06, 0.000000000000000e+00, -3.543671171342217e-06, -2.812628265174896e-09, 0.000000000000000e+00, -3.826394735674792e-09, -1.107638139129373e-04, 0.000000000000000e+00, -1.109038723177108e-04, -1.593393300776390e-04, 0.000000000000000e+00, -1.590516413442613e-04, -1.571135875422868e-04, 0.000000000000000e+00, -1.557779353693731e-04, -1.548978694978425e-04, 0.000000000000000e+00, -1.560653510383588e-04, -1.842714864253165e-04, 0.000000000000000e+00, -1.842673870318573e-04, -4.332393076225597e-03, 0.000000000000000e+00, -3.697331710808101e-03, -6.695561696336160e-03, 0.000000000000000e+00, -6.616409608516944e-03, -5.460828659127291e-03, 0.000000000000000e+00, -5.807104336040731e-03, -3.010788160767533e-02, 0.000000000000000e+00, -2.644079767831366e-02, -1.970091605023324e-02, 0.000000000000000e+00, -2.401334822101317e-02, -1.773159406961182e-02, 0.000000000000000e+00, -2.155247252862287e-02, -6.471820322469344e-03, 0.000000000000000e+00, -6.512456332119641e-03, -3.614863795046134e-01, 0.000000000000000e+00, -3.583286542387715e-01, -1.161035417976776e-04, 0.000000000000000e+00, -1.165215093764290e-04, -2.087473740116676e-04, 0.000000000000000e+00, -2.091268820417738e-04, -6.213661926686040e+00, 0.000000000000000e+00, -5.860290293081549e+00, -8.644602337175614e+00, 0.000000000000000e+00, -8.706854117793473e+00, -5.236732976822803e+04, 0.000000000000000e+00, -4.797314851158816e+04, -5.494088229180114e+02, 0.000000000000000e+00, -5.406370946163835e+02, -5.484273669512840e-09, 0.000000000000000e+00, -2.667506038917469e-08, -7.673183937042926e-03, 0.000000000000000e+00, -4.956338936492163e-03, -9.906023902851851e+04, 0.000000000000000e+00, -5.373295056233450e+04, -3.723910086977945e-06, 0.000000000000000e+00, -1.796736956605710e-05, -2.302686123919858e-05, 0.000000000000000e+00, -2.259987550879824e-05, -4.948771361310018e-12, 0.000000000000000e+00, -4.904666532483503e-12, -1.651079096762542e-14, 0.000000000000000e+00, -1.627113668778268e-14, -3.306822467963793e-04, 0.000000000000000e+00, -3.486762614867906e-04, -5.681793069938537e-11, 0.000000000000000e+00, -4.133628450332982e-11, -5.635928293420383e-06, 0.000000000000000e+00, -5.558186042867940e-06, -5.911820324094435e-14, 0.000000000000000e+00, -5.567137154735286e-14, -4.568792217847611e-02, 0.000000000000000e+00, -4.516630036292379e-02, -8.692554037341036e-03, 0.000000000000000e+00, -8.452456904123594e-03, -5.986599823585056e-03, 0.000000000000000e+00, -3.643865213785357e-03, -3.115523117682795e-02, 0.000000000000000e+00, -3.075700314901228e-02, -4.448323587159994e-03, 0.000000000000000e+00, -4.426365198900160e-03, -2.306400780584504e-03, 0.000000000000000e+00, -2.335263623104833e-03, -1.126498236536822e-05, 0.000000000000000e+00, -1.089429504585628e-05, -3.297012801876977e-06, 0.000000000000000e+00, -3.229741404621337e-06, -2.498184390677013e-04, 0.000000000000000e+00, -2.163355883854506e-04, -1.491706675773522e-01, 0.000000000000000e+00, -1.481005333316438e-01, -2.006949325866314e-01, 0.000000000000000e+00, -1.986933511908898e-01, -6.176182739807877e-02, 0.000000000000000e+00, -6.015296321379410e-02, -1.303097679450209e-02, 0.000000000000000e+00, -2.143422206720920e-02, -4.200339153990136e+01, 0.000000000000000e+00, -3.537363292322295e+01, -2.184331527030044e-01, 0.000000000000000e+00, -2.094076273074378e-01, -4.837205902632249e-04, 0.000000000000000e+00, -6.920300661785153e-04, -1.821606774952435e+01, 0.000000000000000e+00, -1.840449470855161e+01, -3.859557981895354e-05, 0.000000000000000e+00, -1.311801834323899e-04, -2.159913556854625e-02, 0.000000000000000e+00, -4.830850351967919e-03, -5.107329156724448e-05, 0.000000000000000e+00, -6.262305586271512e-05, -7.068622332636570e+00, 0.000000000000000e+00, -3.858339673219814e-01, -2.100450539786272e-04, 0.000000000000000e+00, -5.162126711070307e-04, -6.953443374501919e-05, 0.000000000000000e+00, -1.309936689476194e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_edmgga_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_edmgga", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [-2.558724503503997e-04, -2.558723412738834e-04, -2.558706193092080e-04, -2.558710128595589e-04, -2.558672310603561e-04, -2.558654503317947e-04, -2.558878623178154e-04, -2.558917742235379e-04, -2.558712771400907e-04, -2.558830339475195e-04, -2.558712771400907e-04, -2.558830339475195e-04, -1.651095442094022e-03, -1.651192200502339e-03, -1.651099934186934e-03, -1.651204300518205e-03, -1.651286431234839e-03, -1.651328591902828e-03, -1.650714066150921e-03, -1.650776011636271e-03, -1.651319727178633e-03, -1.650913999157564e-03, -1.651319727178633e-03, -1.650913999157564e-03, -7.872921482141680e-03, -7.926206617940385e-03, -7.855225316347712e-03, -7.921110286407650e-03, -7.563580524965218e-03, -7.439613739631608e-03, -7.498892908131869e-03, -7.543095077092841e-03, -7.981169890111862e-03, -6.761201414575039e-03, -7.981169890111862e-03, -6.761201414575039e-03, -1.590841416381249e-02, -1.658020998651579e-02, -1.635615872736386e-02, -1.709981325655663e-02, -6.719907616177146e-03, -6.894808807442491e-03, -1.250234603601053e-02, -1.263081805603205e-02, -1.584521999859581e-02, -1.051031293471475e-02, -1.584521999859580e-02, -1.051031293471475e-02, -6.044421327876873e-03, -6.079223402852990e-03, -6.164192857910351e-03, -6.216775651226246e-03, -7.455898638729764e-03, -7.591776948950160e-03, -5.463587891629698e-03, -5.407324741071674e-03, -5.869695214795855e-03, -6.616749685244865e-03, -5.869695214795859e-03, -6.616749685244868e-03, -3.027147343642884e-04, -3.553473397378459e-04, -6.192127981455564e-04, -6.230626498058918e-04, -2.589512668391272e-07, -2.036205989978125e-07, -2.049770496053014e-04, -1.985441926097959e-04, -2.410939083236212e-04, -2.443720673242883e-04, -9.471046113684382e-04, -9.922068436725847e-04, -4.182932109327599e-08, -5.689739869768904e-08, -1.683941837863814e-03, -1.684694972485521e-03, -2.326021776921622e-03, -2.333890380095700e-03, -2.337903644626948e-03, -2.330581266736084e-03, -2.364625943123799e-03, -2.351284440959307e-03, -2.813035058467071e-03, -2.776177013165093e-03, -1.742953272779362e-03, -1.475680541833180e-03, -3.437458923913766e-03, -3.401451113815064e-03, -1.639786653511156e-03, -1.943246138959754e-03, -1.021026879737382e-02, -9.890500398391797e-03, -8.916308231495610e-03, -9.322820900822586e-03, -8.025025727600468e-03, -8.367422964300488e-03, -9.628836598839263e-06, -9.969142125603784e-06, -3.714844441454161e-03, -3.737801119086028e-03, -1.278764953518748e-07, -1.501550701599768e-07, -2.931525718284071e-03, -2.932898785225677e-03, -1.384956890459649e-02, -1.552776142265411e-02, -1.926786766550115e-02, -2.307018026778647e-02, -1.898399819650893e-03, -1.951982398146039e-03, -4.202170417376414e-05, -4.325689353055361e-05, -1.753907966018288e-16, -1.013268179642769e-15, -2.764240946995190e-06, -1.818644411370836e-06, -3.375267514706354e-03, -4.742038179469161e-03, -1.268843369199363e-13, -1.585655572143465e-12, -9.308061180036241e-06, -9.241816418049854e-06, -1.966080392606670e-12, -1.971472532631406e-12, -6.599560541168873e-15, -6.580222958213634e-15, -1.328476010968133e-04, -1.417080311033614e-04, -2.276826441582095e-11, -1.675821870201156e-11, -2.258447360431413e-06, -2.253354369218788e-06, -2.202454417825683e-14, -2.094678931520343e-14, -1.075049946117606e-02, -1.076648807147904e-02, -2.348250822927301e-03, -2.313925752384656e-03, -1.846352997085487e-03, -1.135716964386455e-03, -8.990182602278556e-03, -8.974544512237179e-03, -1.283612408317966e-03, -1.291563138075849e-03, -1.361949518552806e-03, -1.385745557237351e-03, -2.331948447806897e-07, -2.294613986216983e-07, -1.174652095645537e-07, -1.185655384126903e-07, -2.065034460890427e-05, -1.818087972843608e-05, -8.181672475533646e-03, -8.114384538683317e-03, -1.100766144303575e-02, -1.088635010673554e-02, -1.129664368616628e-02, -1.123123140784464e-02, -9.628330935376696e-07, -1.616464092481003e-06, -7.553627979187376e-03, -7.021835606810570e-03, -1.594484424964093e-02, -1.598800163294484e-02, -3.335353227231749e-07, -5.617397670058151e-07, -1.256035438200065e-02, -1.493943265551227e-02, -4.465421689246535e-11, -1.688854799260264e-10, -3.216982578494391e-11, -7.244532322206263e-12, -6.408424099739201e-13, -9.453726330619778e-13, -4.286645883488378e-03, -2.456504994154372e-04, -6.082237634666592e-12, -3.507964625396088e-11, -2.013496351464764e-12, -8.901779877538437e-12]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_edmgga_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_edmgga", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.023489801401599e-03, 1.023489365095533e-03, 1.023482477236832e-03, 1.023484051438236e-03, 1.023468924241424e-03, 1.023461801327179e-03, 1.023551449271261e-03, 1.023567096894152e-03, 1.023485108560363e-03, 1.023532135790078e-03, 1.023485108560363e-03, 1.023532135790078e-03, 6.604381768376086e-03, 6.604768802009355e-03, 6.604399736747736e-03, 6.604817202072818e-03, 6.605145724939357e-03, 6.605314367611314e-03, 6.602856264603683e-03, 6.603104046545082e-03, 6.605278908714532e-03, 6.603655996630255e-03, 6.605278908714532e-03, 6.603655996630255e-03, 3.149168592856672e-02, 3.170482647176154e-02, 3.142090126539085e-02, 3.168444114563060e-02, 3.025432209986087e-02, 2.975845495852643e-02, 2.999557163252748e-02, 3.017238030837137e-02, 3.192467956044745e-02, 2.704480565830016e-02, 3.192467956044745e-02, 2.704480565830016e-02, 6.363365665524996e-02, 6.632083994606318e-02, 6.542463490945542e-02, 6.839925302622650e-02, 2.687963046470859e-02, 2.757923522976996e-02, 5.000938414404212e-02, 5.052327222412819e-02, 6.338087999438324e-02, 4.204125173885899e-02, 6.338087999438322e-02, 4.204125173885902e-02, 2.417768531150749e-02, 2.431689361141196e-02, 2.465677143164140e-02, 2.486710260490499e-02, 2.982359455491906e-02, 3.036710779580064e-02, 2.185435156651879e-02, 2.162929896428670e-02, 2.347878085918342e-02, 2.646699874097946e-02, 2.347878085918344e-02, 2.646699874097947e-02, 1.210858937457154e-03, 1.421389358951383e-03, 2.476851192582226e-03, 2.492250599223567e-03, 1.035805067356509e-06, 8.144823959912499e-07, 8.199081984212054e-04, 7.941767704391838e-04, 9.643756332944847e-04, 9.774882692971533e-04, 3.788418445473753e-03, 3.968827374690339e-03, 1.673172843731040e-07, 2.275895947907562e-07, 6.735767351455255e-03, 6.738779889942086e-03, 9.304087107686489e-03, 9.335561520382802e-03, 9.351614578507793e-03, 9.322325066944337e-03, 9.458503772495195e-03, 9.405137763837229e-03, 1.125214023386828e-02, 1.110470805266037e-02, 6.971813091117447e-03, 5.902722167332721e-03, 1.374983569565506e-02, 1.360580445526026e-02, 6.559146614044624e-03, 7.772984555839015e-03, 4.084107518949529e-02, 3.956200159356719e-02, 3.566523292598244e-02, 3.729128360329034e-02, 3.210010291040187e-02, 3.346969185720195e-02, 3.851534639535705e-05, 3.987656850241514e-05, 1.485937776581664e-02, 1.495120447634411e-02, 5.115059814074994e-07, 6.006202806399071e-07, 1.172610287313629e-02, 1.173159514090271e-02, 5.539827561838596e-02, 6.211104569061644e-02, 7.707147066200459e-02, 9.228072107114586e-02, 7.593599278603573e-03, 7.807929592584156e-03, 1.680868166950566e-04, 1.730275741222144e-04, 7.015631864073152e-16, 4.053072718571074e-15, 1.105696378798076e-05, 7.274577645483346e-06, 1.350107005882542e-02, 1.896815271787664e-02, 5.075373476797453e-13, 6.342622288573861e-12, 3.723224472014496e-05, 3.696726567219942e-05, 7.864321570426679e-12, 7.885890130525623e-12, 2.639824216467549e-14, 2.632089183285454e-14, 5.313904043872532e-04, 5.668321244134458e-04, 9.107305766328381e-11, 6.703287480804622e-11, 9.033789441725651e-06, 9.013417476875150e-06, 8.809817671302731e-14, 8.378715726081374e-14, 4.300199784470424e-02, 4.306595228591618e-02, 9.393003291709202e-03, 9.255703009538624e-03, 7.385411988341947e-03, 4.542867857545822e-03, 3.596073040911422e-02, 3.589817804894872e-02, 5.134449633271862e-03, 5.166252552303397e-03, 5.447798074211222e-03, 5.542982228949406e-03, 9.327793791227588e-07, 9.178455944867930e-07, 4.698608382582149e-07, 4.742621536507612e-07, 8.260137843561708e-05, 7.272351891374433e-05, 3.272668990213459e-02, 3.245753815473327e-02, 4.403064577214298e-02, 4.354540042694215e-02, 4.518657474466511e-02, 4.492492563137856e-02, 3.851332374150678e-06, 6.465856369924011e-06, 3.021451191674951e-02, 2.808734242724228e-02, 6.377937699856373e-02, 6.395200653177936e-02, 1.334141290892700e-06, 2.246959068023260e-06, 5.024141752800258e-02, 5.975773062204909e-02, 1.786168675698614e-10, 6.755419197041057e-10, 1.286793031397756e-10, 2.897812928882505e-11, 2.563369639895680e-12, 3.781490532247911e-12, 1.714658353395351e-02, 9.826019976617488e-04, 2.432895053866637e-11, 1.403185850158435e-10, 8.053985405859057e-12, 3.560711951015375e-11]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
