
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_vcml_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_vcml", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.065388915703838e+01, -2.065400222885569e+01, -2.065450034514852e+01, -2.065282173925818e+01, -2.065370195666231e+01, -2.065370195666231e+01, -3.215147804670744e+00, -3.215172599125633e+00, -3.215879842251275e+00, -3.215886010725395e+00, -3.215551250488657e+00, -3.812806417087420e+00, -6.108503314032452e-01, -7.984838240767004e-01, -7.918520742149113e-01, -7.915970644548979e-01, -7.917654080240023e-01, -7.917654080240023e-01, -2.178680558114568e-01, -2.197891469418530e-01, -7.090926852229669e-01, -1.742022813219236e-01, -1.944177581434042e-01, -1.944177581434042e-01, -5.610094958670870e-03, -5.909049977413358e-03, -3.595556798322658e-02, -3.227362805651302e-03, -4.060933012301055e-03, -4.060933012301055e-03, -5.230569390149869e+00, -5.230076967710561e+00, -5.230533553903888e+00, -5.119366773709404e+00, -5.230326223312222e+00, -5.230326223312222e+00, -1.800596893318759e+00, -1.815469154903562e+00, -1.789667293586605e+00, -1.802810425021212e+00, -1.814133588048652e+00, -2.196168712129388e+00, -6.186531972825027e-01, -6.482963715581428e-01, -5.882630057490896e-01, -5.944537691742582e-01, -6.242468798134062e-01, -5.544526795685393e-01, -8.257070449888547e-02, -2.279763487273371e-01, -7.638674456329447e-02, -2.001793311511907e+00, -1.404071335458717e-01, -1.404071335458717e-01, -2.429819198538956e-03, -3.154528022115078e-03, -2.414365337429300e-03, -5.137394733625858e-02, -2.835917061787967e-03, -2.907872243254702e-03, -5.762024812051824e-01, -5.789570121233395e-01, -5.721075115985468e-01, -5.772167288011468e-01, -5.776231378126462e-01, -5.776231378126462e-01, -5.614151589143588e-01, -5.274061613315008e-01, -5.376157310463506e-01, -5.470883437757812e-01, -5.423333385327069e-01, -5.001911032725632e-01, -6.860470538759136e-01, -1.987225263491695e-01, -3.188021264518423e-01, -3.196887920542776e-01, -3.499999821424856e-01, -3.499999821424856e-01, -4.195030638165218e-01, -3.419575609412853e-02, -4.900704687141126e-02, -3.651495032361711e-01, -6.541809538930600e-02, -8.845362524251554e-02, -7.933719306295233e-03, -8.421230035259101e-04, -1.768938199091429e-03, -8.228075966692101e-02, -2.690817323477401e-03, -2.690817323477398e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_vcml_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_vcml", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.052111007620844e+01, -3.052105218478875e+01, -3.052087824580939e+01, -3.052172665499024e+01, -3.052127139701748e+01, -3.052127139701748e+01, -4.400511313841270e+00, -4.400492098077311e+00, -4.400022175043417e+00, -4.400620196048997e+00, -4.400099446466488e+00, -4.152920143005390e+00, -8.274404078746920e-01, -8.011197375072057e-01, -7.925216745437010e-01, -7.922702376778674e-01, -7.922944643413217e-01, -7.922944643413217e-01, -2.239613237665510e-01, -2.240332499839853e-01, -9.510624015633126e-01, -2.414393211497114e-01, -2.332414724043677e-01, -2.332414724043688e-01, -7.561314042768207e-03, -7.975154927251950e-03, -5.566764015909206e-02, -4.316711538112070e-03, -5.446189832902444e-03, -5.446189832902444e-03, -6.492449463114530e+00, -6.494901975453767e+00, -6.492581319099300e+00, -6.883170382114497e+00, -6.493682440938736e+00, -6.493682440938736e+00, -2.472819729851651e+00, -2.493666411986494e+00, -2.456963537179893e+00, -2.475947919778189e+00, -2.491830345928079e+00, -2.340568877023978e+00, -7.118434671987652e-01, -7.883602886690146e-01, -6.510998573783060e-01, -6.850198074717648e-01, -7.257327790681141e-01, -7.662068267203017e-01, -1.101170716803480e-01, -2.699827228378899e-01, -1.018649457814103e-01, -2.341484751705186e+00, -2.090694221168574e-01, -2.090694221168580e-01, -3.239758931953593e-03, -4.217955381789150e-03, -3.234260952108649e-03, -6.850135630224731e-02, -3.781222753930156e-03, -3.893537238805494e-03, -7.515286681628446e-01, -7.404591220198737e-01, -7.507797417416047e-01, -7.474400473463408e-01, -7.458194690310902e-01, -7.458194690310902e-01, -7.301825838067699e-01, -5.932634092075193e-01, -6.289567554952749e-01, -6.668059485006098e-01, -6.471055680815816e-01, -7.519334050945919e-01, -8.218982030199692e-01, -2.666404926662798e-01, -3.190063910625822e-01, -4.389525110989531e-01, -3.578362184613981e-01, -3.578362184613983e-01, -5.727482835837125e-01, -5.262019057722681e-02, -7.839902448271244e-02, -4.010873725124543e-01, -8.723673855241826e-02, -1.436173475506883e-01, -1.073503606354005e-02, -1.123083499576497e-03, -2.362535893509404e-03, -1.339997512389117e-01, -3.603241190069174e-03, -3.603241176924123e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_vcml_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_vcml", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.309228320043429e-08, -1.309149561920647e-08, -1.308820617638265e-08, -1.309987158468385e-08, -1.309373273551565e-08, -1.309373273551565e-08, -8.088935186367715e-06, -8.088217220339563e-06, -8.068281646187019e-06, -8.073514874726915e-06, -8.076316767168843e-06, -6.582785774861204e-06, -5.821828069839893e-03, -3.279551349290642e-03, -3.228937802160328e-03, -3.317899400238937e-03, -3.297283996630826e-03, -3.297283996630826e-03, -4.610103527156181e-01, -4.681607759865704e-01, -3.121208722245924e-03, 9.884642038781252e-02, -2.361872050568530e-01, -2.361872050568283e-01, 1.189682083126048e+01, 1.237028144317955e+01, 4.139334850897685e+00, 8.831972600178350e+00, 1.224508121254854e+01, 1.224508121254854e+01, -1.935750103982937e-06, -1.937055931118075e-06, -1.935836314205443e-06, -1.108780946754310e-06, -1.936398864668723e-06, -1.936398864668723e-06, -8.278592411580119e-05, -8.037211667379679e-05, -8.452851828711991e-05, -8.241746468454794e-05, -8.059724105296017e-05, -5.987072376816868e-05, -9.539735653140629e-03, -8.101352018342819e-03, -1.161323773233233e-02, -1.119490910660456e-02, -9.229931028931059e-03, -1.110222038971059e-02, -1.687558380568609e+01, -1.430055405109511e-01, -2.304063384937526e+01, -8.747138728557086e-05, 5.006492920686544e-01, 5.006492920686894e-01, -2.250570410253531e+07, 7.811120453259498e+00, 6.298262417303582e+01, -1.126182656939082e+02, -1.212870237878351e+07, 2.418750979511264e+01, -1.357293583734392e-02, -1.314833935765915e-02, -3.594416292645084e-03, -1.341538275199011e-02, -1.335277803718663e-02, -1.335277803718663e-02, -1.503327387744401e-02, -1.798978440733280e-02, -1.681447419887454e-02, -1.599538923660022e-02, -1.637528605137847e-02, -3.772938726632159e-02, -6.407866085632210e-03, -5.063665174140357e-01, -1.238371136421687e-01, -8.313468056492312e-02, -9.207241531808492e-02, -9.207241531808456e-02, -2.755297424519364e-02, 4.322314519228748e+00, 2.989956447437086e+00, -7.823095564144998e-02, -4.283274548326527e+01, 1.942346669448743e+00, 5.649603456516603e+00, 9.593387665024064e+00, 2.746973225095294e+01, 2.309022531848500e+00, 3.446769547184117e+01, 3.446761744602761e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_vcml_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_vcml", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.748787391157768e-03, 1.748709502948805e-03, 1.748390859944188e-03, 1.749543194683490e-03, 1.748936181990894e-03, 1.748936181990894e-03, 8.544294527144407e-04, 8.542564551402953e-04, 8.493541740590896e-04, 8.513344880537927e-04, 8.512155788433342e-04, 3.730377395403897e-17, 1.238211907772410e-03, 1.694351672384755e-16, 6.079658576991510e-17, -3.568647910106051e-18, 8.235376852122534e-17, 8.235376852122534e-17, -7.712432167856244e-17, 1.153108227475868e-16, 2.274304662788962e-04, 2.024065958298920e-15, 1.319091299920307e-15, 7.647934756142476e-17, 3.758759873967634e-12, -5.205231321294231e-13, 1.650108878985718e-13, 1.979535380380167e-11, -3.834362422573967e-12, -3.834362422573967e-12, 2.162371755735352e-18, -2.473095954544158e-19, 1.240914587939425e-19, 8.321142521273117e-04, 1.975783529925263e-18, 1.975783529925263e-18, 1.387904688974081e-03, 1.446001916755792e-03, 1.333485589121057e-03, 1.394845509749925e-03, 1.443462341316735e-03, -2.102522076707696e-18, -4.539655835067232e-17, -2.745167450141265e-17, 1.142537472469489e-16, -7.238268700162736e-17, -4.897208624677952e-17, 1.255106804355840e-02, 1.244654246814343e-05, 6.759012364059141e-16, 8.850315947027828e-06, 4.175343295349370e-18, 1.171379065273697e-15, 5.001936758860800e-16, 3.300834947353297e-13, -1.023883475747608e-11, 9.811482279816984e-12, 1.717234005546474e-06, 5.642916680157184e-12, 3.838105904094345e-11, 1.916017822788187e-18, -8.863813910811253e-18, -3.108936188208167e-02, 1.808072726684040e-20, -2.010530760202513e-18, -2.010530760202513e-18, 4.405919621199819e-18, 1.160491253223475e-17, -1.734137679308591e-17, 1.914319280955349e-17, -2.008579492926640e-17, 6.802885157107308e-02, -2.059991642003355e-19, 8.970638973734841e-04, -3.464563767923179e-16, 7.598489183078884e-03, 6.013907393560561e-17, -1.095341697776016e-16, 6.213549443758105e-03, 4.121703869698239e-13, -2.558877224068600e-13, -8.629630018484365e-17, 9.165162299786633e-06, 2.053720154904377e-14, -4.738165668181287e-12, 9.807442566042819e-11, -2.635871242118722e-12, 1.415759187936925e-14, -7.637567548182568e-12, 2.260917457771641e-11]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
