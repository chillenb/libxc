
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_vcml_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_vcml", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.173059344976800e+01, -2.173062475964508e+01, -2.173081869814460e+01, -2.173035112596086e+01, -2.173058834825782e+01, -2.173058834825782e+01, -3.383197193974568e+00, -3.383191830800898e+00, -3.383261228216821e+00, -3.384780623202622e+00, -3.383740350240604e+00, -3.383740350240604e+00, -6.652160685874059e-01, -6.649943575848636e-01, -6.612498160427247e-01, -6.673275019118209e-01, -6.653071302668007e-01, -6.653071302668007e-01, -2.130870348090444e-01, -2.131763339920369e-01, -7.632396308902504e-01, -1.477637289680876e-01, -1.701069353058918e-01, -1.701069353058918e-01, -3.780129598667714e-03, -3.980395084380789e-03, -2.450764755507222e-02, -2.176589873083483e-03, -2.737793956684220e-03, -2.737793956684220e-03, -5.229415628394449e+00, -5.228935763116122e+00, -5.229403551899463e+00, -5.228979801344074e+00, -5.229166926628459e+00, -5.229166926628459e+00, -2.181414346131890e+00, -2.194784941436957e+00, -2.183639889310563e+00, -2.192414726516728e+00, -2.188442321058246e+00, -2.188442321058246e+00, -5.968112383542974e-01, -6.318742445217301e-01, -5.328920019864420e-01, -5.368412292070103e-01, -6.063574327252221e-01, -6.063574327252221e-01, -9.064236958760682e-02, -2.066552120392114e-01, -8.166746137165010e-02, -1.832522520231502e+00, -1.179989927211279e-01, -1.179989927211279e-01, -1.678702954507886e-03, -2.127909258693085e-03, -1.628109419157236e-03, -4.755049692569401e-02, -1.961328587373591e-03, -1.961328587373593e-03, -5.737843689621701e-01, -5.767323538549106e-01, -5.757301353477551e-01, -5.748682617257408e-01, -5.753020976896804e-01, -5.753020976896804e-01, -5.573847028866195e-01, -5.262045894905900e-01, -5.357317811600565e-01, -5.443121953112514e-01, -5.399444874787492e-01, -5.399444874787492e-01, -6.580038641109810e-01, -2.735878331967245e-01, -3.074432558595242e-01, -3.558185402368635e-01, -3.322779654767297e-01, -3.322779654767296e-01, -4.818111638190273e-01, -2.316066920176345e-02, -3.427325508878769e-02, -3.406983128308202e-01, -6.906450537378023e-02, -6.906450537378026e-02, -5.350868094966708e-03, -5.681692834402264e-04, -1.193128943135093e-03, -6.363960691560265e-02, -1.814710246699095e-03, -1.814710246699093e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_vcml_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_vcml", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.667130758917376e+01, -2.667138315820472e+01, -2.667162093659713e+01, -2.667049205316359e+01, -2.667109760668153e+01, -2.667109760668153e+01, -4.165067484958446e+00, -4.165288690015983e+00, -4.171428690517354e+00, -4.170650042324314e+00, -4.169730636797333e+00, -4.169730636797333e+00, -7.819853897508279e-01, -7.806679167217583e-01, -7.509832291027164e-01, -7.581483735313296e-01, -7.568878501288687e-01, -7.568878501288687e-01, -9.456465014206855e-02, -8.206077851113527e-02, -9.000674905555931e-01, -2.090381234500667e-01, -2.087153894646899e-01, -2.087153894646900e-01, -4.865367294466129e-03, -5.309759133756198e-03, -3.968106615206462e-02, -2.909551327675725e-03, -3.667022076404982e-03, -3.667022076404969e-03, -6.496658885121045e+00, -6.499034461885119e+00, -6.496702469252779e+00, -6.498802991364407e+00, -6.497896076404578e+00, -6.497896076404578e+00, -2.157548487648135e+00, -2.352013150881968e+00, -2.272385900353008e+00, -2.451936737929616e+00, -2.218940595265855e+00, -2.218940595265855e+00, -7.309240324046747e-01, -8.404009353651365e-01, -6.726742053488112e-01, -7.447902839604532e-01, -7.474478385997353e-01, -7.474478385997353e-01, -1.586880778811502e-01, 1.314715344239101e-02, -1.468209676907359e-01, -2.629403916513673e+00, -1.621053785730643e-01, -1.621053785730642e-01, -2.242183421508479e-03, -2.844749316634307e-03, -2.179276934137275e-03, -8.851083084538613e-02, -2.625202835047287e-03, -2.625202835047290e-03, -7.551432010941630e-01, -7.450522891831346e-01, -7.484766376089326e-01, -7.514074258712677e-01, -7.499299572732958e-01, -7.499299572732958e-01, -7.351719998597404e-01, -6.236356466708873e-01, -6.478419915247902e-01, -6.779617717946498e-01, -6.617997162240745e-01, -6.617997162240745e-01, -9.029669920774661e-01, -1.503346583821819e-01, -1.566775226662887e-01, -3.934674609917387e-01, -2.594852406176494e-01, -2.594852406176494e-01, -4.880075598263979e-01, -3.514949204384274e-02, -5.999089327106503e-02, -3.968761080001496e-01, -1.221760799988750e-01, -1.221760799988750e-01, -7.239265751271139e-03, -7.578763266155966e-04, -1.592880526201945e-03, -9.989233614741767e-02, -2.428600961908896e-03, -2.428600961908891e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_vcml_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_vcml", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.588673623095426e-09, -4.588762862385773e-09, -4.589895771993712e-09, -4.588607155154014e-09, -4.589176886905907e-09, -4.589176886905907e-09, -8.274203958812136e-06, -8.280644097079044e-06, -8.464784728300484e-06, -8.491294322708155e-06, -8.447458160743435e-06, -8.447458160743435e-06, -4.810409138493463e-03, -4.816344873635093e-03, -4.905088174914817e-03, -4.917431371607434e-03, -4.916879646416680e-03, -4.916879646416680e-03, -3.535520434204384e+00, -3.862683036750872e+00, -2.347294884567392e-03, -2.631170079727864e-01, -5.707067855762652e-01, -5.707067855762642e-01, -8.017830486697500e+01, -1.022621967516942e+01, 3.867030120708282e+00, 5.423547688386900e+00, 6.844023430569701e+00, 6.844023430565416e+00, -1.903167709828209e-06, -1.904959900451021e-06, -1.903936987056090e-06, -1.905486404638740e-06, -1.903724956530706e-06, -1.903724956530706e-06, -1.359293982189935e-04, -6.615859321717121e-05, -8.551037709628573e-05, -2.577138329241037e-05, -1.180810989058272e-04, -1.180810989058272e-04, -2.732891158408322e-02, -9.765243676079885e-03, -2.526979844774809e-02, -2.137935329872374e-02, -2.365422464132745e-02, -2.365422464132745e-02, 7.873491108965580e-01, -3.953319459427560e+00, 1.245110528230182e+00, -1.938834569223295e-04, -1.635234670369087e+00, -1.635234670369097e+00, 7.142793208025358e+00, 6.393464395200722e+00, 4.021661987603755e+01, 3.663216139553202e+00, 1.873642851473743e+01, 1.873642851473603e+01, -1.028746748081152e-02, -9.916807334058106e-03, -1.005451893284901e-02, -1.016236726855365e-02, -1.010746170242040e-02, -1.010746170242040e-02, -8.154699168425787e-03, -3.721683317623840e-03, -6.230923118499105e-03, -8.245715380688591e-03, -7.190935016925827e-03, -7.190935016925858e-03, -1.068053059071098e-02, -1.083355105210537e+00, -8.520550126870456e-01, -1.685998283229028e-01, -4.792860311782859e-01, -4.792860311782856e-01, -9.264914516516183e-02, 5.130705948828633e-01, 3.484272606945053e+00, -2.417266223517463e-01, 1.391524471878260e+00, 1.391524471878253e+00, 4.947602523155562e+00, 3.120759530592185e+01, 1.505852008889337e+01, -2.599342303497810e+00, 2.364804545450303e+01, 2.364804545450193e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_vcml_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_vcml", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-2.875552139206332e-04, -2.875387489480559e-04, -2.873361601015352e-04, -2.875752327655594e-04, -2.874684930346862e-04, -2.874684930346862e-04, 1.286694721277302e-03, 1.291017163251995e-03, 1.415252226412748e-03, 1.436499483568454e-03, 1.403732097656767e-03, 1.403732097656767e-03, 2.853549568766118e-03, 2.848095292299702e-03, 2.838206486508522e-03, 3.359812748363775e-03, 3.192000547791958e-03, 3.192000547791958e-03, 2.625572137558150e-01, 3.013993501430188e-01, 3.586232569057592e-04, 1.954814238576066e-02, 2.560279569893836e-02, 2.560279569893832e-02, 2.999429405076600e-04, 6.748801203483544e-05, 3.240273122083332e-04, 5.476931879674265e-09, 1.197248659909166e-07, 1.197248660047388e-07, -7.792955359512675e-05, -7.683311846009662e-05, -7.629825780631080e-05, -7.540352129356208e-05, -7.818322900299790e-05, -7.818322900299790e-05, 8.134472531721108e-03, 7.935173006863600e-05, 2.231017023259929e-03, -4.642334599500692e-03, 6.209101869245715e-03, 6.209101869245715e-03, 5.889396357542448e-02, 1.905666290258602e-02, 3.752604590350032e-02, 3.650207327605724e-02, 4.997758680341301e-02, 4.997758680341301e-02, 7.893723284237687e-03, 3.246561013374739e-01, 5.200053672249527e-03, 1.544273566945929e-02, 4.846712187016685e-02, 4.846712187016701e-02, 2.489242169783030e-11, 4.417663413018140e-10, 1.659499429032412e-08, 1.290888669188068e-03, 2.217908940663755e-09, 2.217908938806226e-09, -1.172543615454901e-02, -1.130856081028409e-02, -1.141164666117360e-02, -1.153377502578746e-02, -1.147413940424790e-02, -1.147413940424790e-02, -2.227710389071424e-02, -2.797021637145942e-02, -2.451863699654841e-02, -2.107241527228329e-02, -2.314623655223490e-02, -2.314623655223482e-02, 3.670840573034793e-02, 1.600944833641663e-01, 2.126673711761847e-01, 7.171162447972500e-02, 1.655979022055585e-01, 1.655979022055583e-01, 9.762311844855592e-02, 2.045474824508820e-03, 5.799495029051873e-04, 9.871327334879196e-02, 1.029955065107610e-02, 1.029955065107605e-02, 2.399082412501581e-08, 4.154868228004543e-14, 8.553696296636969e-09, 3.028464001537422e-02, 5.900394535057976e-09, 5.900394531884115e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
