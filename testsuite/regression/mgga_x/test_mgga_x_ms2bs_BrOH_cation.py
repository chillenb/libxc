
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ms2bs_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2bs", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.004044234939037e+01, -2.004052775073906e+01, -2.004091284386522e+01, -2.118953629737415e+01, -2.119007501194805e+01, -2.233995576794756e+01, -3.498360370599354e+00, -3.770968242318101e+00, -3.769967457224704e+00, -3.770713026564255e+00, -3.770241029449825e+00, -3.497738071032902e+00, -6.200587136463906e-01, -6.908752076602358e-01, -7.506200947153776e-01, -6.801830600122521e-01, -6.079071296368206e-01, -7.535231343622535e-01, -1.831200639439938e-01, -1.855605424209404e-01, -8.242572379683351e-01, -1.695958479613350e-01, -2.002339117271317e-01, -1.943025102809719e-01, -9.109414606220771e-03, -7.974757510891151e-03, -4.317490501590942e-02, -5.254827911697612e-03, -7.332854152254919e-03, -7.332854152254919e-03, -5.409606389183667e+00, -5.409961130705582e+00, -5.409619077261935e+00, -5.409932593061979e+00, -5.206467967187637e+00, -5.206645884164131e+00, -2.145796702147558e+00, -2.156354744298771e+00, -2.138432664388311e+00, -2.147612061985544e+00, -1.991421852305953e+00, -2.155190530784409e+00, -5.842668399792410e-01, -6.658169756650942e-01, -5.852688587016397e-01, -5.996120224481940e-01, -5.962918923335004e-01, -6.320461044592354e-01, -1.263382480023926e-01, -1.873675179379324e-01, -1.180557038471863e-01, -2.028549380239434e+00, -1.416788882061323e-01, -1.416788882061323e-01, -3.324971873209962e-03, -5.137021929109368e-03, -3.933507553517669e-03, -6.701267434041289e-02, -4.940887398452399e-03, -4.940887398452401e-03, -6.058102467678083e-01, -6.048063507724912e-01, -5.897255985196550e-01, -5.996266167028732e-01, -5.918581752541401e-01, -5.985138804595140e-01, -5.897212963003665e-01, -4.919046872900407e-01, -5.116134277629162e-01, -5.623163657185619e-01, -5.533710771418519e-01, -5.220185176941985e-01, -6.627669350398684e-01, -2.601995684522610e-01, -2.731787405582995e-01, -3.522147955389810e-01, -3.379015263263973e-01, -3.089112269357701e-01, -4.904832788497510e-01, -3.079881132857942e-02, -6.717902362828215e-02, -3.621528389510166e-01, -1.013317490694794e-01, -1.013317490694794e-01, -7.824531102650602e-03, -1.373244265067448e-03, -1.758499587812174e-03, -6.245764035682363e-02, -4.537537341789258e-03, -3.194630989431645e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ms2bs_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2bs", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.830675101888136e+01, -2.830794294433221e+01, -2.830702276280845e+01, -2.830814011898858e+01, -2.830784256844001e+01, -2.830932863440020e+01, -2.830478695322953e+01, -2.855456319231986e+01, -2.830692025295397e+01, -2.855520552080744e+01, -2.855553038636889e+01, -2.855520552080744e+01, -4.532224477896046e+00, -4.316889347667372e+00, -4.532277711926934e+00, -4.532161610126277e+00, -4.533293221165514e+00, -4.533522808158855e+00, -4.533305899419028e+00, -4.533370546973079e+00, -4.531379595307783e+00, -4.534372341335752e+00, -4.316241918334808e+00, -4.534372341335753e+00, -8.299188168344537e-01, -8.333809359271086e-01, -8.285770211660370e-01, -8.621930446011495e-01, -8.399591639670434e-01, -8.342674095285484e-01, -8.430197172237304e-01, -8.158141208078138e-01, -8.398824262594675e-01, -7.850135549571358e-01, -8.695179601468612e-01, -8.148686212607602e-01, -2.097512343145118e-01, -2.271224080296272e-01, -2.123979914490244e-01, -2.308310922578503e-01, -1.000866326456169e+00, -9.822585191613651e-01, -1.844231649780312e-01, -1.835279589801624e-01, -2.294507954304572e-01, -1.524092094678037e-01, -2.294507954304571e-01, -1.167507984864505e-01, -1.172934760096244e-02, -1.246047468025463e-02, -7.499388020127081e-03, -1.315888242975690e-02, -4.170920065291776e-02, -6.861284677283508e-02, -7.060805105384465e-03, -6.943274862014044e-03, -1.046849727160786e-02, -5.962683673289304e-03, -1.046849727160786e-02, -5.962683673289304e-03, -7.001886583250992e+00, -7.000214077207999e+00, -7.003948065769036e+00, -7.002205585723109e+00, -7.002018799222808e+00, -7.000295237831041e+00, -7.003787111038135e+00, -7.002103888975059e+00, -7.253423625475021e+00, -7.001212155900429e+00, -7.002929124366887e+00, -7.251606624906706e+00, -2.536461292242598e+00, -2.536608225586353e+00, -2.557905898122939e+00, -2.557406737253812e+00, -2.518379816579669e+00, -2.523679526262639e+00, -2.536886421134655e+00, -2.542452892631317e+00, -2.562095355726767e+00, -2.442316350957780e+00, -2.562095355726767e+00, -2.549409831414093e+00, -7.755698484623390e-01, -7.260048683819399e-01, -8.525479623086821e-01, -8.535232486854982e-01, -6.952712774453118e-01, -7.246599761942484e-01, -7.317252521803840e-01, -7.587273709593075e-01, -8.101822658231177e-01, -7.196813310106236e-01, -8.101822658231178e-01, -7.671373677050014e-01, -1.453009697508634e-01, -1.462922734722465e-01, -2.131867249280047e-01, -2.310835209976171e-01, -1.354620394424694e-01, -1.398590232469178e-01, -2.545570518195980e+00, -2.544472314240998e+00, -1.551772707465903e-01, -1.567665422053213e-01, -1.551772707465903e-01, -1.567665422053213e-01, -3.227363231720079e-03, -5.506558406958071e-03, -6.794161332428103e-03, -6.897119177315991e-03, -5.079040670260567e-03, -5.378077312787732e-03, -1.009937016185568e-01, -6.986356020771771e-02, -5.189899088026964e-03, -7.120873478687490e-03, -5.189899088026965e-03, -7.120873478687492e-03, -7.994459278917461e-01, -8.026300840245152e-01, -7.917111015826886e-01, -7.949326708342400e-01, -8.165488082955389e-01, -8.192435009510920e-01, -8.141535595935735e-01, -7.998500785796451e-01, -8.153967856932429e-01, -8.181013081889983e-01, -8.153967856932429e-01, -7.987382302510589e-01, -7.775595324752769e-01, -7.802350493173698e-01, -6.450789925082846e-01, -6.108198412790810e-01, -6.819575776673072e-01, -6.457263940276702e-01, -7.199423482232842e-01, -7.225770247404023e-01, -7.005523955775301e-01, -7.033210952325030e-01, -7.005523955775301e-01, -6.779419493591371e-01, -8.898343668540262e-01, -8.701856478484080e-01, -2.826635335343888e-01, -2.841645400632282e-01, -3.243231926089138e-01, -3.394415793697468e-01, -4.307951150927465e-01, -4.515939626773079e-01, -3.892260113752509e-01, -3.891366425426657e-01, -3.892260113752508e-01, -3.753428374605370e-01, -5.891350940255357e-01, -5.939226442249476e-01, -4.092890230955528e-02, -4.120898228746174e-02, -8.393982010217350e-02, -8.623191634051286e-02, -4.332762429690359e-01, -4.420125639721658e-01, -1.172956185831642e-01, -1.198506863491210e-01, -1.172956185831641e-01, -1.198506863491210e-01, -1.023730896578641e-02, -1.060846627631023e-02, -1.828841156096791e-03, -1.833020905575202e-03, -2.265989523566994e-03, -2.410063355096319e-03, -8.263628792103944e-02, -8.399683727586225e-02, -4.915095232781241e-03, -6.528034648662558e-03, -4.915095232781236e-03, -3.979385017493210e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms2bs_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2bs", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.686041622226010e-08, 0.000000000000000e+00, -2.687358277036560e-08, -2.686198114110525e-08, 0.000000000000000e+00, -2.687471715692425e-08, -2.686620201290177e-08, 0.000000000000000e+00, -2.688098453303330e-08, -2.684867599626417e-08, 0.000000000000000e+00, -5.834745465951658e-09, -2.686143863617331e-08, 0.000000000000000e+00, -5.834407011222138e-09, -5.834067090356667e-09, 0.000000000000000e+00, -5.834407011222138e-09, -6.981335140063492e-06, 0.000000000000000e+00, -1.396703480568960e-05, -6.981805251057924e-06, 0.000000000000000e+00, -6.981591230547092e-06, -6.991052285878711e-06, 0.000000000000000e+00, -6.992410076045540e-06, -6.985337915554908e-06, 0.000000000000000e+00, -6.984960364777945e-06, -6.984763386981507e-06, 0.000000000000000e+00, -6.992749707335891e-06, -1.397668452868996e-05, 0.000000000000000e+00, -6.992749707335891e-06, -1.042420179833000e-02, 0.000000000000000e+00, -1.027183424764946e-02, -1.048592725894693e-02, 0.000000000000000e+00, -3.874980899698041e-03, -3.983895065468870e-03, 0.000000000000000e+00, -4.046461437619469e-03, -4.019759819566934e-03, 0.000000000000000e+00, -1.111655221011225e-02, -9.969466663363322e-03, 0.000000000000000e+00, -1.280098484068315e-02, -3.788061515048209e-03, 0.000000000000000e+00, -4.254390806190299e-03, -2.462577608919659e+00, 0.000000000000000e+00, -6.650829029316450e-01, -2.348805127537590e+00, 0.000000000000000e+00, -6.438833953768494e-01, -1.523134461705456e-03, 0.000000000000000e+00, -5.149689683361632e-03, -8.674254628819785e-01, 0.000000000000000e+00, -9.528995499272003e-01, -5.877012814437109e-01, 0.000000000000000e+00, -1.053098562495617e+00, -5.877012814437109e-01, 0.000000000000000e+00, -2.416823134702733e+01, -5.152510085272808e+00, 0.000000000000000e+00, -5.171255773840307e+00, -1.400806480031398e+06, 0.000000000000000e+00, -5.407336001519822e+00, -1.466843831417937e+03, 0.000000000000000e+00, -2.429141950726342e+00, -3.777694443253679e+00, 0.000000000000000e+00, -3.816457993223248e+00, -4.896982306845286e+00, 0.000000000000000e+00, -8.390811310874710e+00, -4.896982306845286e+00, 0.000000000000000e+00, -8.390811310874724e+00, -1.701315392729144e-06, 0.000000000000000e+00, -1.702952144669071e-06, -1.700946686935330e-06, 0.000000000000000e+00, -1.702595928666463e-06, -1.701300977216128e-06, 0.000000000000000e+00, -1.702944332010802e-06, -1.700984104984733e-06, 0.000000000000000e+00, -1.702620212056723e-06, -1.236134276981204e-05, 0.000000000000000e+00, -1.702772747492175e-06, -1.701122418235040e-06, 0.000000000000000e+00, -1.237269010812761e-05, -6.565937777992625e-05, 0.000000000000000e+00, -6.575710609874307e-05, -6.456075668618310e-05, 0.000000000000000e+00, -6.468685760592152e-05, -6.652779260431154e-05, 0.000000000000000e+00, -6.637739552890297e-05, -6.559454734707837e-05, 0.000000000000000e+00, -6.542479629670256e-05, -6.439683180382643e-05, 0.000000000000000e+00, -1.399900030221571e-04, -6.439683180382643e-05, 0.000000000000000e+00, -6.511562626452841e-05, -9.462065569096824e-03, 0.000000000000000e+00, -1.669333931089561e-02, -7.392257203107050e-03, 0.000000000000000e+00, -7.405565508786426e-03, -1.277728835364868e-02, 0.000000000000000e+00, -1.155235700311180e-02, -1.178492267412523e-02, 0.000000000000000e+00, -1.058252597672699e-02, -8.315293702279940e-03, 0.000000000000000e+00, -1.749976645633620e-02, -8.315293702279925e-03, 0.000000000000000e+00, -9.982848271080765e-03, -1.287474831262591e+00, 0.000000000000000e+00, -1.272336379701262e+00, -2.254933225071089e+00, 0.000000000000000e+00, -4.622049452473548e-01, -1.409435520695591e+00, 0.000000000000000e+00, -1.415918879356294e+00, -8.521349988697469e-05, 0.000000000000000e+00, -8.537605796647989e-05, -1.385778390403545e+00, 0.000000000000000e+00, -1.610671565035112e+00, -1.385778390403545e+00, 0.000000000000000e+00, -1.610671565035113e+00, -4.083710209639193e+07, 0.000000000000000e+00, -2.529149927813219e+00, -3.583556976057506e+00, 0.000000000000000e+00, -3.158812293637189e+00, -2.580134740958281e+01, 0.000000000000000e+00, -2.831889345272096e+01, -2.154617796297421e+00, 0.000000000000000e+00, -1.871383288004463e+02, -4.863215561448660e+00, 0.000000000000000e+00, -1.543316776515532e+01, -4.863215561448665e+00, 0.000000000000000e+00, -1.543316776515531e+01, -1.094505149750581e-02, 0.000000000000000e+00, -1.078295843609769e-02, -1.100421762058621e-02, 0.000000000000000e+00, -1.084213133806210e-02, -7.150021017543472e-02, 0.000000000000000e+00, -6.955504011855561e-02, -6.408876527939038e-02, 0.000000000000000e+00, -1.080438947925561e-02, -6.799305144766049e-02, 0.000000000000000e+00, -6.610382036731204e-02, -6.799305144766049e-02, 0.000000000000000e+00, -1.081282104347991e-02, -1.217312771444560e-02, 0.000000000000000e+00, -1.202062900079540e-02, -1.862297016431379e-02, 0.000000000000000e+00, -3.249649843683299e-02, -1.651664061866830e-02, 0.000000000000000e+00, -3.301435729084163e-02, -1.464546139721548e-02, 0.000000000000000e+00, -1.445199950734130e-02, -1.556722886056699e-02, 0.000000000000000e+00, -1.535838434405331e-02, -1.556722886056699e-02, 0.000000000000000e+00, -4.838070642323548e-02, -6.007716195126547e-03, 0.000000000000000e+00, -2.244152741338317e-02, -2.561020993210248e-01, 0.000000000000000e+00, -2.523186859239920e-01, -4.425756514056886e-01, 0.000000000000000e+00, -1.511892740803254e-01, -1.451926453547689e-01, 0.000000000000000e+00, -6.489799958584161e-02, -1.035989729908905e-01, 0.000000000000000e+00, -1.040288879552304e-01, -1.035989729908907e-01, 0.000000000000000e+00, -2.525891908649958e-01, -2.465751715862315e-02, 0.000000000000000e+00, -2.425329139329678e-02, -1.581904986329592e+03, 0.000000000000000e+00, -1.539346202846983e+03, -1.995351215052877e+00, 0.000000000000000e+00, -2.049634195742689e+00, -8.307551582921820e-02, 0.000000000000000e+00, -8.171061662315172e-02, -2.297236177080514e+00, 0.000000000000000e+00, -2.630888444315350e+00, -2.297236177080515e+00, 0.000000000000000e+00, -2.630888444315350e+00, -4.034123556479602e+05, 0.000000000000000e+00, -3.498528701736457e+05, -4.121845175483644e+00, 0.000000000000000e+00, -4.103721579063101e+00, -1.680408000018109e+08, 0.000000000000000e+00, -1.313207579534129e+08, -9.596672089393599e+01, 0.000000000000000e+00, -8.998435738596822e+01, -1.254972492861888e+01, 0.000000000000000e+00, -1.600256357129744e+01, -1.254972492861891e+01, 0.000000000000000e+00, -1.766838318110486e+07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms2bs_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2bs", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([9.299823860603718e-04, 9.307493796647145e-04, 9.300917652036064e-04, 9.308287108866533e-04, 9.303989727011804e-04, 9.312809467559605e-04, 9.291723823924385e-04, -8.120925923207239e-20, 9.300526830680349e-04, 2.966375264337922e-19, -8.816385064009765e-19, 2.966375264337922e-19, -2.846253912092100e-18, 1.199561355053019e-04, 5.732750985397900e-18, 2.087924746012902e-18, -2.686717843171466e-18, -2.679570733866030e-18, -5.781966075343711e-19, 7.435911985863641e-19, 1.892173626476839e-18, 2.985597692080778e-18, 1.200805762224805e-04, 2.985597692080778e-18, 4.605188270186771e-04, 4.778033855843062e-04, 4.557332952920025e-04, -1.400279858035395e-17, 9.478305010800879e-18, 5.598829794652805e-18, -9.106696432054885e-18, 4.279912428022292e-04, 4.864961091722940e-04, 3.360328476058050e-04, -3.607604383482304e-18, -5.790947368124080e-19, 7.728418029402077e-04, -1.356838649182167e-17, 8.243216821228189e-04, -4.827009674001240e-19, -3.942365681163069e-18, 1.919836360253633e-04, 2.112871835949655e-18, -6.826637950704145e-19, -1.028322189268368e-17, -7.004799390931554e-19, -7.771116317537224e-18, 4.933929872712918e-05, 2.699266544615238e-24, -3.937862216719006e-24, 3.782171207661396e-08, -1.735500051775281e-24, 3.128026348492317e-06, 3.696559635225200e-21, 5.625657563881161e-25, 1.595509331094542e-25, 4.600661012116608e-24, -4.779910547286660e-25, 4.600661012116608e-24, -4.939322000037268e-25, 2.591527107654405e-19, 1.614325389773875e-18, -6.539605411973935e-19, -4.013827258710664e-19, -4.774387023385406e-19, -3.471331617746536e-18, 1.143360581191357e-18, -1.800432357616342e-18, 8.407137747909634e-03, -9.411404046680314e-20, -1.749924991244995e-18, 8.408338883712623e-03, -4.252054070032961e-18, 5.403959610194539e-18, 1.143902821438942e-18, 6.989119292104359e-18, -1.396872428934433e-18, 2.257319279397565e-18, -4.744936589157113e-18, 3.282423467549045e-18, -1.124625864923370e-18, 2.537249639920439e-04, -1.124625864923370e-18, 4.413160126593804e-19, 3.356771773298817e-17, 4.122842740241719e-04, -1.650626451344428e-18, 2.467696830714697e-18, 3.330926421824212e-17, 2.589337719378330e-17, 4.918881604429818e-18, -3.243947606978507e-18, 1.429833048294037e-17, 5.701143770604129e-04, -1.931463230550675e-17, -2.396072671159413e-17, 1.346275386323592e-18, 1.271502975757749e-18, 3.584163602956286e-04, 9.158602622438842e-18, 3.328235012299394e-19, 6.884631560754577e-19, -1.844236649183884e-18, 2.410215964035712e-18, 4.769746709916713e-19, -3.143036622412028e-18, -6.409791027927041e-19, -2.218350673111354e-18, 1.544776021484663e-09, 3.329052409592542e-26, 7.465761476734657e-26, -1.618345543651290e-25, -8.488355742202306e-25, -8.265055328631818e-25, -3.935371587810662e-19, 1.815139264139943e-05, -1.443064164483885e-26, 3.630722632751441e-24, -1.652561238734248e-26, -1.216727218762421e-24, 5.206078027004281e-18, 1.079962974462439e-18, 2.424455739150874e-17, 1.471265710404974e-17, 8.226384107568559e-02, 8.107515076459816e-02, 7.456257242692130e-02, -1.048324887217112e-17, 7.875610956905849e-02, 7.751746889688335e-02, 7.875610956905849e-02, -1.054324258486106e-17, 1.207946580288239e-18, -2.894298427784265e-19, 1.153840497914006e-17, 1.215508489538721e-04, -1.555178376195480e-17, 3.943973812671341e-03, -2.967529531432683e-17, -2.590433894612639e-17, 4.189110101335134e-18, 5.343500437211844e-17, -2.654039789195377e-18, 1.764774355400650e-02, 3.234033996977727e-18, 2.004465799651525e-02, 8.059075844783770e-18, -7.956456531185617e-18, 9.546894939279542e-04, -6.938558426515761e-18, 1.445072849029505e-03, -2.167525781863421e-17, -7.447928875576744e-18, 2.441107266424122e-17, 1.450493494805293e-17, 1.396380525068825e-03, 2.144770278781238e-17, -8.124112836542683e-18, 3.110918700331963e-06, 3.111887433176915e-06, -2.843745387657428e-20, 2.926198526694391e-20, -6.082105462932663e-17, -3.643650555121988e-17, 6.783966270084164e-20, 1.050756458435861e-18, 8.302591045240810e-19, -2.329204902662830e-20, 4.479052017195841e-08, 4.912393133081052e-08, -2.952227339947604e-29, -3.555321658787931e-28, 2.222717929693734e-09, 2.833215830759172e-09, 3.908400000200827e-05, 4.603625565284186e-05, -2.504172807840183e-25, 2.568239652538139e-24, 3.777349532696047e-25, 1.689044661737575e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
