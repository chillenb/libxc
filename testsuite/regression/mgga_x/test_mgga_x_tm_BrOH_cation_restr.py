
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_tm_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.989491685412683e+01, -1.989497667819604e+01, -1.989525802047188e+01, -1.989436793201207e+01, -1.989483212684157e+01, -1.989483212684157e+01, -3.236888270105482e+00, -3.236879326369182e+00, -3.236705850524051e+00, -3.237067942857914e+00, -3.236692691477888e+00, -3.767277380507541e+00, -6.537600733839615e-01, -7.617501251762985e-01, -7.501733859347239e-01, -7.523024253506068e-01, -7.519107289377888e-01, -7.519107289377888e-01, -2.041527988686344e-01, -2.062795678733537e-01, -8.281934253581813e-01, -1.698520745962280e-01, -1.828158355799253e-01, -1.828158355799253e-01, -2.029097566246288e-02, -2.085407438420382e-02, -6.574530922244322e-02, -1.497469569704344e-02, -1.665168875138908e-02, -1.665168875138908e-02, -5.414459167479523e+00, -5.414982361950120e+00, -5.414481497063521e+00, -4.862894085152226e+00, -5.414724788037376e+00, -5.414724788037376e+00, -1.832233107402827e+00, -1.842785787582837e+00, -1.824903344738332e+00, -1.833945441500560e+00, -1.841681601700293e+00, -2.154009114071374e+00, -6.226290624281117e-01, -6.656868313260705e-01, -5.843482100734758e-01, -5.985821197410159e-01, -6.305165501343618e-01, -5.536017937747104e-01, -1.363020140721757e-01, -2.140259584215771e-01, -1.297580419528920e-01, -2.026253997860323e+00, -1.426053544550025e-01, -1.426053544550024e-01, -1.633250722090532e-02, -1.495116296278135e-02, -1.034396046541144e-02, -1.002105607702284e-01, -1.561353659594822e-02, -1.272447608348234e-02, -6.094116481792475e-01, -6.069075746872459e-01, -5.506213039476511e-01, -6.084514605325804e-01, -6.080846129760659e-01, -6.080846129760659e-01, -5.929936513692800e-01, -5.267303379753994e-01, -5.442191377275075e-01, -5.622580814654226e-01, -5.529185244153699e-01, -4.901120880004972e-01, -7.004844274351891e-01, -2.306343265411630e-01, -3.022750830545424e-01, -3.257283939312307e-01, -3.378219024414237e-01, -3.378219024414238e-01, -4.216127783886606e-01, -6.377784389623166e-02, -7.937734858185297e-02, -3.618027725119519e-01, -1.120401504371846e-01, -1.057967488430039e-01, -2.691929860613316e-02, -6.614637781125880e-03, -9.311313543031462e-03, -1.004854681431104e-01, -1.172352834542589e-02, -1.172352834542587e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_tm_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.675988840581720e+01, -2.675996821394252e+01, -2.676034396779465e+01, -2.675915647926343e+01, -2.675977572409897e+01, -2.675977572409897e+01, -4.214423867058113e+00, -4.214518619376600e+00, -4.217078839913042e+00, -4.216428813712892e+00, -4.216060586477571e+00, -4.243609884717562e+00, -7.466362873906363e-01, -7.880878685850429e-01, -7.591640202461264e-01, -7.672134095615455e-01, -7.683729929822719e-01, -7.683729929822719e-01, -2.001741862232941e-01, -2.031682985189041e-01, -8.553096408045403e-01, -1.482336928004111e-01, -1.700421398175285e-01, -1.700421398175285e-01, -1.055789173811186e-02, -1.088499164425518e-02, -4.550924456743952e-02, -8.911132096628503e-03, -9.974995719553586e-03, -9.974995719553586e-03, -6.916202013249565e+00, -6.919593212893838e+00, -7.025177198877472e+00, -6.533495462339895e+00, -6.917906168970921e+00, -6.917906168970921e+00, -2.326806672520172e+00, -2.353714995482740e+00, -2.306354844962303e+00, -2.330571253504142e+00, -2.351560055170832e+00, -2.376709998330796e+00, -7.401511604748622e-01, -8.351349767769609e-01, -6.684834027093478e-01, -7.230749052527329e-01, -7.685511182941813e-01, -7.424347959168434e-01, -1.350895291223288e-01, -1.997551202156341e-01, -1.287132510458777e-01, -2.448551948556100e+00, -1.241721907573304e-01, -1.241721907573303e-01, -1.633233481529807e-02, -8.888918188500954e-03, -6.180198445864600e-03, -9.975110407697278e-02, -1.561308971268306e-02, -7.593725721063396e-03, -8.054424884478550e-01, -8.056559231660830e-01, -7.372247328557511e-01, -8.010550753246140e-01, -7.992376280917054e-01, -8.121545393966662e-01, -7.825968494346353e-01, -6.121967320816476e-01, -6.676089717483431e-01, -7.178404862842676e-01, -6.917655769849244e-01, -6.590931069521888e-01, -8.665513292407442e-01, -2.392424463411769e-01, -3.065308979860649e-01, -4.124090165146650e-01, -3.605506363469447e-01, -3.575753929651289e-01, -5.512649224691849e-01, -4.388243003162347e-02, -5.712665499862295e-02, -4.108571812035038e-01, -1.111646446502418e-01, -8.529160657001475e-02, -1.638169077335435e-02, -3.889049427460601e-03, -5.514790973262908e-03, -8.031082000777889e-02, -6.998000644903292e-03, -6.998000644903275e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_tm_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.519358292457375e-09, -7.519445449469049e-09, -7.519738257145943e-09, -7.518455139482299e-09, -7.519140604636191e-09, -7.519140604636191e-09, -4.924721130168774e-06, -4.925754808278403e-06, -4.952683186608873e-06, -4.940004076183083e-06, -4.943417110217827e-06, -8.711581015352893e-06, -1.411462806105998e-03, -4.365827510579000e-03, -4.618664673741045e-03, -4.643506824535067e-03, -4.538164509981243e-03, -4.538164509981243e-03, -7.814795125603273e-01, -7.647033643743110e-01, -2.152859695206577e-04, -1.370714615241246e+00, -1.053984832173467e+00, -1.053984832173468e+00, -3.884561045625168e+03, -3.489046657383210e+03, -3.426442120361112e+01, -1.065953065104775e+04, -7.019004095271313e+03, -7.019004095271313e+03, -2.200012850624651e-06, -2.198645398958572e-06, -1.033507888221382e-06, -2.856278968319936e-06, -2.199323648407190e-06, -2.199323648407190e-06, -4.059650054409846e-05, -4.107744936144275e-05, -4.011215872059096e-05, -4.060892294361504e-05, -4.109569675922842e-05, -7.930988508207510e-05, -1.233770666950814e-02, -9.675452570280107e-03, -1.532675200250325e-02, -1.156087295150178e-02, -9.223952595633448e-03, -8.830911851459412e-03, 1.647115454937966e-01, -5.665100373778018e-01, 2.127413152813696e-01, -1.112754093134930e-04, -2.376852216437616e+00, -2.376852216437616e+00, 1.141330553898922e+03, -1.071677224820636e+04, -4.701047180229576e+04, 7.049692844669241e-01, 1.365944741732902e+03, -2.050555081170039e+04, -1.278259367394223e-02, 6.297480717818414e-04, -3.523557709933539e-02, -1.309064970677063e-02, -1.320246518996959e-02, 5.690248794289999e-03, -1.436158492179852e-02, -2.360785659284604e-02, -1.635827367680369e-02, -1.152650823852323e-02, -1.427459891079991e-02, -1.776255462042391e-02, -7.875230171483750e-03, -3.855152602148672e-02, -1.760044826175567e-01, -3.993402692044089e-02, -1.160406038317894e-01, -1.227528896861700e-01, -1.771331327059388e-02, -3.837822123109289e+01, -1.704476035712230e+01, -1.034119018561958e-01, 3.883914858674951e-01, -6.575949539801122e+00, -1.044677802818372e+03, -2.766293705751591e+05, -7.096599086283961e+04, -7.941367823116514e+00, -2.846429065094676e+04, -2.846429065094686e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_tm_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.368102706660353e-04, 1.368137735019236e-04, 1.368276642587916e-04, 1.367758391000912e-04, 1.368032318439567e-04, 1.368032318439567e-04, -7.625534741389069e-04, -7.619476927888699e-04, -7.459814999409361e-04, -7.523620309965273e-04, -7.517557604269886e-04, 3.417104169681604e-03, -1.193456892312818e-02, 1.171369026986162e-02, 1.171051559632804e-02, 1.206270648091680e-02, 1.154276907289392e-02, 1.154276907289392e-02, 3.725069439638687e-02, 3.825673079149406e-02, -1.010053352297301e-02, 3.044185921944608e-02, 3.137999365597193e-02, 3.137999365597192e-02, 8.165457637466724e-03, 8.554772644986141e-03, 1.273281496351288e-02, 3.708901941560940e-03, 4.855647645990772e-03, 4.855647645990772e-03, 3.519472269300398e-03, 3.524261929678727e-03, 9.066829541447270e-04, 7.202235172840010e-04, 3.521868617820570e-03, 3.521868617820570e-03, -2.238618931902294e-03, -2.045694536886723e-03, -2.391164654384675e-03, -2.215683979037296e-03, -2.057151152232152e-03, 5.600107761340872e-03, 2.431091682733604e-02, 2.687766267154886e-02, 2.309446993631265e-02, 1.713039891691839e-02, 1.602385208402249e-02, 2.003146523194072e-03, -2.546546462818074e-02, 2.733661046349499e-02, -2.457505629441216e-02, 7.847355078358218e-03, 2.703903374041335e-02, 2.703903374041335e-02, -3.162114865908807e-03, 3.482689211477076e-03, 6.840645915662192e-03, -2.107019342376410e-02, -6.019253363371544e-03, 5.214873522285209e-03, 3.653947665822926e-02, -1.081378842784765e-02, 7.915575251966929e-03, 3.575902681825525e-02, 3.545394099539221e-02, -2.546637501580180e-02, 3.721204273187322e-02, 2.686997748994704e-02, 1.829502789689258e-02, 1.348322788441531e-02, 1.664162794825811e-02, 4.489532340783189e-03, 2.440465104150771e-02, -3.651640255496504e-02, 2.931962392601593e-02, -1.309940623410487e-02, 2.806843701219265e-02, 3.101210822546410e-02, -5.043468336831837e-03, 1.247914381704917e-02, 1.426178257736928e-02, 3.647441310880058e-02, -2.777755040797404e-02, 2.265092186468051e-02, 5.341592203745201e-03, 1.711095981570952e-03, 4.068919087539445e-03, 2.259406185173975e-02, 5.735480166284283e-03, 5.735480166284283e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
