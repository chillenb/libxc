
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_gdme_nv_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_nv", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.825956740363737e+01, -1.825977039171876e+01, -1.826070140879718e+01, -1.825769087448450e+01, -1.825926428020065e+01, -1.825926428020065e+01, -2.930242084548684e+00, -2.930725508546855e+00, -2.943420877900380e+00, -2.938387552917844e+00, -2.938801400002379e+00, -2.938801400002379e+00, -2.586651789620277e-01, -2.547396370086155e-01, -1.595559644505245e-01, -2.065806597676948e-01, -1.956945090838981e-01, -1.956945090838981e-01, -3.602104508208392e-02, -4.408285094936576e-02, 3.177429335006028e-01, 2.034309825251208e-01, 6.501564687304179e-02, 6.501564687304170e-02, 3.954123107326036e+00, 3.651220855037160e+00, 1.254960686756406e+00, 9.121640401186145e+00, 4.676486337438428e+00, 4.676486337438426e+00, -3.107260382616272e+01, -1.496954348872698e+01, 1.481134886773560e+02, -5.801585188307872e+01, -1.118653224755995e+00, -9.169379824586127e+00, 2.030638092686693e+02, -3.675687810564569e+00, -1.911010934561443e+00, -1.958597898839342e+00, -2.021959211117951e+00, -1.204913158863588e+00, -7.499467247332556e+00, -2.844116530628313e+00, -6.533349333560619e+00, -7.228448354082444e-01, -8.082585296671261e-01, -9.642501601603117e-01, 4.748947285758641e+00, -2.951722928053756e+00, 2.660154380004824e+01, -2.648423009012578e+00, 4.485331995827943e-01, 6.957480298055916e-01, -1.644422700763200e+02, -1.774886552590951e+05, 8.312420949753796e+04, 7.542665456549622e+00, -2.445454254814610e+01, 2.368324156403886e+03, -4.272320967375846e+04, 1.733555131211421e+04, 2.998578093420153e+05, -3.841750073288877e+02, 5.531900848314865e+03, -5.423025945230101e+05, 1.641597879271331e+05, -5.481295307003857e-01, -4.650688084433973e+00, 7.051736573604289e-02, -9.208664968223913e-01, -1.083480493351182e+01, -8.954005616571447e+00, 3.161766354254317e+01, 4.798142536274470e+01, 4.278934931758615e+00, -7.581996079595216e-01, -4.379162514967228e-01, -4.935038589493153e-01, 9.947145706317897e+00, 6.710932989318332e-01, -3.545312720795804e-01, 1.461558726948963e+01, 8.074398408235918e-01, 3.430187905666667e+02, 3.631463354558582e+02, 1.604947394593079e+03, 2.033904449621987e+00, 4.261211420537924e+02, 7.776045597842590e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_gdme_nv_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_nv", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-5.264626865210372e+01, -5.264589848216055e+01, -5.264637999473046e+01, -5.264597940904672e+01, -5.264676858361639e+01, -5.264652766158312e+01, -5.264550687146853e+01, -5.264492033121640e+01, -5.264633103493940e+01, -5.264558781143076e+01, -5.264633103493940e+01, -5.264558781143076e+01, -8.585409319812120e+00, -8.585446465671687e+00, -8.585244210391538e+00, -8.585330572248411e+00, -8.582002657957521e+00, -8.581531258858806e+00, -8.583960677153469e+00, -8.584086813323410e+00, -8.584300966439757e+00, -8.581362095856290e+00, -8.584300966439757e+00, -8.581362095856290e+00, -1.757540185032915e+00, -1.758753194797509e+00, -1.756421554344799e+00, -1.758429133938332e+00, -1.744122583524812e+00, -1.736296633685778e+00, -1.739896517865704e+00, -1.738952277629478e+00, -1.769706091886309e+00, -1.712110382716533e+00, -1.769706091886309e+00, -1.712110382716533e+00, -4.606938502572290e-01, -4.680322505124939e-01, -4.643746708246222e-01, -4.734481593410902e-01, -2.260451097177383e+00, -2.255212808904887e+00, -4.372348731270090e-01, -4.218644446882880e-01, -4.858825314585084e-01, -4.347983795646376e-01, -4.858825314585083e-01, -4.347983795646378e-01, -1.390003857445642e+00, -1.288515944079067e+00, -1.296733597520754e+00, -1.183992760939947e+00, -5.326229443554329e-01, -4.995397281940346e-01, -3.066313321753571e+00, -3.033094757433760e+00, -1.529745145714515e+00, -1.802550170724344e+00, -1.529745145714514e+00, -1.802550170724334e+00, -2.947851242661663e+00, -4.971033072731045e+00, -9.314708093983940e+00, -9.344090317686874e+00, -6.064115569669012e+01, -6.673688970399633e+01, 4.596542624658244e+00, 5.442868388894755e+00, -1.395282591835637e+01, -1.393728004121549e+01, -1.116915071324329e+01, -1.135387746690201e+01, -7.825162808020424e+01, -6.788612343361785e+01, -4.196040676263352e+00, -4.194231758261789e+00, -4.714778740430417e+00, -4.716896718153621e+00, -4.737832836641866e+00, -4.731133031845098e+00, -4.748789274398619e+00, -4.736635167902690e+00, -5.032525220239178e+00, -4.997445663402792e+00, 5.884365985156277e-01, 1.186920330797547e+00, -8.108069957802987e-01, -7.984093893975248e-01, 1.000482445045609e+00, 3.999972361617108e-01, -1.293126858128612e+00, -1.328496471688387e+00, -1.401431899606782e+00, -1.337806786520778e+00, -1.348425458940498e+00, -1.286986083038661e+00, -1.844132591569825e+00, -1.824172479628541e+00, 5.152218991807216e-01, 4.987903065759202e-01, -9.359854084105915e+00, -8.877385032134997e+00, -4.396677544654152e+00, -4.394563436956845e+00, -4.670828819780306e-01, -4.256411553303464e-01, -5.518321174625495e-01, -5.060740818285256e-01, 5.796824237086732e+01, 5.198994296009965e+01, 6.115581681534338e+04, 5.725775278774245e+04, -4.018119064791391e+04, -1.720676483827964e+04, -2.501339694343995e+00, -2.836405690604340e+00, 1.519768457721414e+01, 5.418601935108526e+00, -1.521634578153142e+03, -5.067640549945348e+02, 1.416989200832722e+04, 1.430820497373311e+04, -5.778441425776423e+03, -5.781796917005956e+03, -9.978254755688968e+04, -1.001238943363469e+05, 1.337087112473114e+02, 1.192559588162754e+02, -1.702064836730319e+03, -1.987442249587437e+03, 1.806796492832402e+05, 1.808511830795354e+05, -5.398651638037351e+04, -5.544925564161123e+04, -1.168318374356647e+00, -1.174104993621326e+00, 1.203312928535979e-01, 1.443828078513086e-01, -1.474277013693419e+00, -1.534652823009725e+00, -1.139661406384328e+00, -1.143952950620590e+00, 2.185054586841229e+00, 2.140845356692672e+00, 1.184307039512560e+00, 1.110374966424500e+00, -1.108411655058341e+01, -1.119856607082778e+01, -1.671420707420227e+01, -1.672077958127559e+01, -2.331958218626813e+00, -2.431678430850993e+00, -5.811565936036031e-01, -5.759607894543383e-01, -6.877700038712478e-01, -6.828697732586458e-01, -1.080553302515293e+00, -1.083434556791272e+00, -3.634590258295015e+00, -3.185719555157159e+00, -4.267481270325082e-01, -2.793014677880418e-01, -8.004676656066395e-01, -8.062670212326203e-01, -5.666934495648925e+00, -4.564845111777903e+00, -4.740443150193122e-01, -4.634520363155889e-01, -1.508237811866188e+02, -8.159676197441580e+01, -9.106804046066634e+01, -1.508298703762504e+02, -5.825102014773478e+02, -4.954885830520632e+02, -8.057786570625117e-01, -9.209146128878186e-01, -2.204712442573695e+02, -1.086317946664176e+02, -3.770846190069020e+02, -2.089818391176669e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gdme_nv_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_nv", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gdme_nv_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_nv", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [-9.317807673390790e-04, -9.317819672040175e-04, -9.317777570225365e-04, -9.317797803020391e-04, -9.317675324705634e-04, -9.317652956124598e-04, -9.318015444047240e-04, -9.318086422125809e-04, -9.317790019208642e-04, -9.317908777705417e-04, -9.317790019208642e-04, -9.317908777705417e-04, -5.723130267684445e-03, -5.723208355519477e-03, -5.723112374929273e-03, -5.723201542859921e-03, -5.722790141845366e-03, -5.722672327500041e-03, -5.722424905944765e-03, -5.722344596276571e-03, -5.724087426883668e-03, -5.721946457665856e-03, -5.724087426883668e-03, -5.721946457665856e-03, -2.973101597144396e-02, -2.961363245684815e-02, -2.977735855323441e-02, -2.963302766026380e-02, -3.041057292402797e-02, -3.062152214006908e-02, -3.029692570751782e-02, -3.023143368728839e-02, -2.938824322515910e-02, -3.137596251564017e-02, -2.938824322515910e-02, -3.137596251564017e-02, -1.171916730678253e-01, -1.128037566449478e-01, -1.157651943215089e-01, -1.108473875554059e-01, -2.588145090602688e-02, -2.503969318371697e-02, -1.524175198252147e-01, -1.503427169722195e-01, -1.122334047406833e-01, -2.092026141236652e-01, -1.122334047406833e-01, -2.092026141236651e-01, -3.407564966709675e+00, -3.206763196924803e+00, -3.251864239506623e+00, -3.035572988090192e+00, -5.848216790566976e-01, -5.538007299452116e-01, -5.668618993876388e+00, -5.764675425062753e+00, -3.819730714859674e+00, -6.712316463026337e+00, -3.819730714859674e+00, -6.712316463026331e+00, -3.822090802335522e-03, -3.823006559502062e-03, -3.821377173419579e-03, -3.822316917088202e-03, -3.822047337811768e-03, -3.822980129087768e-03, -3.821435043113563e-03, -3.822353653363028e-03, -3.821728189260745e-03, -3.822660643709101e-03, -3.821728189260745e-03, -3.822660643709101e-03, -1.016933419625888e-02, -1.016984809246239e-02, -1.009498359595742e-02, -1.009773160290722e-02, -1.023257845212130e-02, -1.021491083220987e-02, -1.016742690004997e-02, -1.014914000683896e-02, -1.008114073511188e-02, -1.012548389810678e-02, -1.008114073511188e-02, -1.012548389810678e-02, -3.387630615864412e-02, -3.396623169976940e-02, -3.123190769993011e-02, -3.121773547044980e-02, -3.734556897539069e-02, -3.602129190227911e-02, -3.586160209858769e-02, -3.470836124422979e-02, -3.257235268178183e-02, -3.428076240178089e-02, -3.257235268178183e-02, -3.428076240178088e-02, -2.190615843737354e-01, -2.169923176309763e-01, -1.150268203087406e-01, -1.144556218074232e-01, -2.421588026249381e-01, -2.298109473280803e-01, -1.036552054934654e-02, -1.037017953215114e-02, -1.914487203680458e-01, -1.807252244671136e-01, -1.914487203680458e-01, -1.807252244671136e-01, -7.556249011859309e+00, -7.270921479809199e+00, -5.891456413171629e+00, -5.803618420897899e+00, -7.878667733959904e+00, -7.439476024332087e+00, -3.514648657571203e-01, -3.493170211309368e-01, -7.713989976320630e+00, -5.617036256043087e+00, -7.713989976320630e+00, -5.617036256043086e+00, -3.382261518244376e-02, -3.369237165671732e-02, -3.401841320196339e-02, -3.388610074353740e-02, -3.394946750741373e-02, -3.381746954914961e-02, -3.389230197664764e-02, -3.376172684424680e-02, -3.392088503492131e-02, -3.378961220054344e-02, -3.392088503492131e-02, -3.378961220054344e-02, -3.475522560246866e-02, -3.464071373801256e-02, -4.050788808192694e-02, -4.033315212849423e-02, -3.868562801558663e-02, -3.851470076985806e-02, -3.701438266175687e-02, -3.688468480372480e-02, -3.784450547864070e-02, -3.770444448945061e-02, -3.784450547864070e-02, -3.770444448945061e-02, -2.980848712773932e-02, -2.975999262978144e-02, -9.107919913034875e-02, -9.055487700558405e-02, -7.600097049907802e-02, -7.524629207164175e-02, -5.740914450499857e-02, -5.709346107793092e-02, -6.582069453264566e-02, -6.584392203948929e-02, -6.582069453264569e-02, -6.584392203948929e-02, -4.405605257636105e-02, -4.375475231238701e-02, -5.959694532781115e-01, -5.919193910818087e-01, -4.430556390813986e-01, -4.287048024057272e-01, -5.983860179040103e-02, -5.894967976858460e-02, -2.830737464872409e-01, -2.680887629430656e-01, -2.830737464872410e-01, -2.680887629430656e-01, -2.382175261540063e+00, -2.298832455740127e+00, -2.189834195853194e+01, -2.184840593119998e+01, -1.076207994690163e+01, -1.011872414252752e+01, -2.954525456561548e-01, -2.906986055995594e-01, -8.143886355448892e+00, -6.128297376340574e+00, -8.143886355448897e+00, -6.128297376340581e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gdme_nv_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_nv", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [7.454246138712632e-03, 7.454255737632140e-03, 7.454222056180292e-03, 7.454238242416313e-03, 7.454140259764507e-03, 7.454122364899679e-03, 7.454412355237792e-03, 7.454469137700647e-03, 7.454232015366913e-03, 7.454327022164334e-03, 7.454232015366913e-03, 7.454327022164334e-03, 4.578504214147556e-02, 4.578566684415582e-02, 4.578489899943419e-02, 4.578561234287937e-02, 4.578232113476293e-02, 4.578137862000033e-02, 4.577939924755812e-02, 4.577875677021256e-02, 4.579269941506935e-02, 4.577557166132685e-02, 4.579269941506935e-02, 4.577557166132685e-02, 2.378481277715516e-01, 2.369090596547852e-01, 2.382188684258753e-01, 2.370642212821104e-01, 2.432845833922238e-01, 2.449721771205526e-01, 2.423754056601426e-01, 2.418514694983072e-01, 2.351059458012728e-01, 2.510077001251214e-01, 2.351059458012728e-01, 2.510077001251214e-01, 9.375333845426020e-01, 9.024300531595824e-01, 9.261215545720713e-01, 8.867791004432475e-01, 2.070516072482151e-01, 2.003175454697357e-01, 1.219340158601717e+00, 1.202741735777756e+00, 8.978672379254662e-01, 1.673620912989321e+00, 8.978672379254661e-01, 1.673620912989321e+00, 2.726051973367740e+01, 2.565410557539842e+01, 2.601491391605298e+01, 2.428458390472154e+01, 4.678573432453581e+00, 4.430405839561693e+00, 4.534895195101110e+01, 4.611740340050203e+01, 3.055784571887739e+01, 5.369853170421069e+01, 3.055784571887739e+01, 5.369853170421065e+01, 3.057672641868417e-02, 3.058405247601649e-02, 3.057101738735664e-02, 3.057853533670562e-02, 3.057637870249414e-02, 3.058384103270215e-02, 3.057148034490850e-02, 3.057882922690422e-02, 3.057382551408596e-02, 3.058128514967281e-02, 3.057382551408596e-02, 3.058128514967281e-02, 8.135467357007103e-02, 8.135878473969915e-02, 8.075986876765939e-02, 8.078185282325773e-02, 8.186062761697040e-02, 8.171928665767894e-02, 8.133941520039978e-02, 8.119312005471169e-02, 8.064912588089501e-02, 8.100387118485428e-02, 8.064912588089501e-02, 8.100387118485428e-02, 2.710104492691530e-01, 2.717298535981552e-01, 2.498552615994409e-01, 2.497418837635984e-01, 2.987645518031256e-01, 2.881703352182329e-01, 2.868928167887015e-01, 2.776668899538383e-01, 2.605788214542546e-01, 2.742460992142471e-01, 2.605788214542546e-01, 2.742460992142470e-01, 1.752492674989883e+00, 1.735938541047810e+00, 9.202145624699248e-01, 9.156449744593854e-01, 1.937270420999505e+00, 1.838487578624642e+00, 8.292416439477229e-02, 8.296143625720913e-02, 1.531589762944367e+00, 1.445801795736909e+00, 1.531589762944367e+00, 1.445801795736909e+00, 6.044999209487447e+01, 5.816737183847359e+01, 4.713165130537303e+01, 4.642894736718319e+01, 6.302934187167923e+01, 5.951580819465670e+01, 2.811718926056963e+00, 2.794536169047494e+00, 6.171191981056504e+01, 4.493629004834469e+01, 6.171191981056504e+01, 4.493629004834469e+01, 2.705809214595501e-01, 2.695389732537385e-01, 2.721473056157071e-01, 2.710888059482992e-01, 2.715957400593098e-01, 2.705397563931969e-01, 2.711384158131812e-01, 2.700938147539744e-01, 2.713670802793705e-01, 2.703168976043475e-01, 2.713670802793705e-01, 2.703168976043475e-01, 2.780418048197493e-01, 2.771257099041005e-01, 3.240631046554155e-01, 3.226652170279538e-01, 3.094850241246930e-01, 3.081176061588645e-01, 2.961150612940550e-01, 2.950774784297984e-01, 3.027560438291256e-01, 3.016355559156049e-01, 3.027560438291256e-01, 3.016355559156049e-01, 2.384678970219146e-01, 2.380799410382515e-01, 7.286335930427900e-01, 7.244390160446724e-01, 6.080077639926241e-01, 6.019703365731340e-01, 4.592731560399886e-01, 4.567476886234474e-01, 5.265655562611653e-01, 5.267513763159143e-01, 5.265655562611655e-01, 5.267513763159143e-01, 3.524484206108884e-01, 3.500380184990960e-01, 4.767755626224892e+00, 4.735355128654470e+00, 3.544445112651188e+00, 3.429638419245818e+00, 4.787088143232082e-01, 4.715974381486768e-01, 2.264589971897927e+00, 2.144710103544525e+00, 2.264589971897928e+00, 2.144710103544525e+00, 1.905740209232050e+01, 1.839065964592101e+01, 1.751867356682555e+02, 1.747872474495999e+02, 8.609663957521308e+01, 8.094979314022018e+01, 2.363620365249238e+00, 2.325588844796475e+00, 6.515109084359113e+01, 4.902637901072459e+01, 6.515109084359118e+01, 4.902637901072465e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
