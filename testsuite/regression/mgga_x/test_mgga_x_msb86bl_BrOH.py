
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_msb86bl_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_msb86bl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.198314820508795e+01, -2.198318793580825e+01, -2.198342945440591e+01, -2.198277797362617e+01, -2.198316861531301e+01, -2.198316861531301e+01, -3.378405388012072e+00, -3.378409103369777e+00, -3.378748112689347e+00, -3.380073962535283e+00, -3.378414949790234e+00, -3.378414949790234e+00, -6.514480002913832e-01, -6.512488016366228e-01, -6.488903774673679e-01, -6.567440470145202e-01, -6.513773018495271e-01, -6.513773018495271e-01, -2.070842570971616e-01, -2.075490271087252e-01, -7.410048290736683e-01, -1.681876033937779e-01, -2.071026402650429e-01, -2.071026402650429e-01, -2.831032225210873e-02, -2.926741447521920e-02, -8.446801395502841e-02, -1.719356270511258e-02, -2.897009956167734e-02, -2.897009956167734e-02, -5.321217191574896e+00, -5.321404670121340e+00, -5.321241286606395e+00, -5.321386969799981e+00, -5.321306221747068e+00, -5.321306221747068e+00, -2.106429783290585e+00, -2.123143222090075e+00, -2.108121009207521e+00, -2.121030536516264e+00, -2.115877083749461e+00, -2.115877083749461e+00, -5.828476367391814e-01, -6.199774285437419e-01, -5.391688413620034e-01, -5.512711802756362e-01, -6.097349314540369e-01, -6.097349314540369e-01, -1.449442138984640e-01, -2.253600582408808e-01, -1.415476168361449e-01, -1.824594977753731e+00, -1.542312532444541e-01, -1.542312532444541e-01, -1.669126610611567e-02, -1.833339286229880e-02, -1.384436227310770e-02, -1.046210997190158e-01, -1.668261110660672e-02, -1.668261110660673e-02, -6.019211817661547e-01, -6.015287024096190e-01, -6.016708922807349e-01, -6.017776098712806e-01, -6.017236613772659e-01, -6.017236613772659e-01, -5.814400583948283e-01, -5.300718048938662e-01, -5.444998789680011e-01, -5.581566057190945e-01, -5.509925229427522e-01, -5.509925229427522e-01, -6.416236910041988e-01, -2.724342653731102e-01, -3.038250876874455e-01, -3.552084002369759e-01, -3.293199384259795e-01, -3.293199384259794e-01, -4.694526425046534e-01, -8.127924449321716e-02, -9.938300886703234e-02, -3.298132526600795e-01, -1.221341232430718e-01, -1.221341232430718e-01, -3.238311103733481e-02, -7.186522658917447e-03, -1.127421346078531e-02, -1.162583894324696e-01, -1.446530862136750e-02, -1.446530862136748e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_msb86bl_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_msb86bl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.774293816254192e+01, -2.774303052509857e+01, -2.774352384938030e+01, -2.774201492204665e+01, -2.774298612573808e+01, -2.774298612573808e+01, -4.193744667521349e+00, -4.193942086875821e+00, -4.200172381350195e+00, -4.199403265872207e+00, -4.193811010400739e+00, -4.193811010400739e+00, -7.829221125227548e-01, -7.811444208433584e-01, -7.349334454694738e-01, -7.470544279171035e-01, -7.822854833075653e-01, -7.822854833075653e-01, -1.631825463057974e-01, -1.695259644560841e-01, -8.968951911422833e-01, -1.333877017662418e-01, -1.651515307175924e-01, -1.651515307175924e-01, -2.726856574601253e-02, -2.822082934504006e-02, -7.776495834019126e-02, -1.611865230091650e-02, -2.793264133670197e-02, -2.793264133670197e-02, -6.832451623685858e+00, -6.834624360498184e+00, -6.832696743832861e+00, -6.834384763002764e+00, -6.833535187169518e+00, -6.833535187169518e+00, -2.212371882683139e+00, -2.264142637787110e+00, -2.210306403354622e+00, -2.253942728087595e+00, -2.251298526214427e+00, -2.251298526214427e+00, -7.358713123913513e-01, -8.518445452559671e-01, -6.892811308179042e-01, -7.613995195849190e-01, -7.707316931813256e-01, -7.707316931813256e-01, -1.148707197911626e-01, -1.415306717514389e-01, -1.116137838172931e-01, -2.556019861023904e+00, -1.147115030806345e-01, -1.147115030806345e-01, -1.563508695446175e-02, -1.726092660984558e-02, -1.302200564240037e-02, -9.040306438922840e-02, -1.570935049498779e-02, -1.570935049498780e-02, -7.991988005704493e-01, -7.903477499574064e-01, -7.935032273595790e-01, -7.959541370552726e-01, -7.947267336608753e-01, -7.947267336608753e-01, -7.754229167278653e-01, -6.312318637512899e-01, -6.715169746376531e-01, -7.107861874743608e-01, -6.904540730762563e-01, -6.904540730762563e-01, -8.944035313733678e-01, -2.132944581532988e-01, -2.649376367280183e-01, -4.088414843306351e-01, -3.315683919255004e-01, -3.315683919255004e-01, -5.364982601120323e-01, -7.594623941070811e-02, -8.860276388938208e-02, -4.029848755410482e-01, -9.819342092365026e-02, -9.819342092365023e-02, -3.125239932843165e-02, -6.476051765751933e-03, -1.039055884310974e-02, -9.356419948783838e-02, -1.358646297112824e-02, -1.358646297112822e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_msb86bl_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_msb86bl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.578722907546833e-09, -4.578645114642172e-09, -4.577787203621578e-09, -4.579031200299451e-09, -4.578686667054302e-09, -4.578686667054302e-09, -8.262604903497609e-06, -8.268541341511287e-06, -8.455331957941527e-06, -8.477374367312007e-06, -8.263485123265993e-06, -8.263485123265993e-06, -6.325214622254287e-03, -6.334485869734344e-03, -6.572531109707595e-03, -6.628876323528573e-03, -6.328955226040453e-03, -6.328955226040453e-03, -1.716921935355229e+00, -1.640406187831127e+00, -2.542162744364284e-03, -1.477627167094850e+00, -1.692740561140889e+00, -1.692740561140889e+00, -4.680530452083428e+02, -4.206018910899552e+02, -1.392249194987274e+01, -2.305783324446198e+03, -4.380082384049857e+02, -4.380082384049857e+02, -1.074811522787149e-06, -1.074188719269697e-06, -1.074513339523078e-06, -1.074043231189194e-06, -1.074807677580630e-06, -1.074807677580630e-06, -1.238111101865184e-04, -1.098410853420733e-04, -1.186548792862636e-04, -1.069537721710486e-04, -1.206389143849163e-04, -1.206389143849163e-04, -2.302629798226164e-02, -1.719236733252095e-02, -2.337025113792772e-02, -2.226461122430749e-02, -1.817508580381493e-02, -1.817508580381493e-02, -2.638763940184031e+00, -1.223918762322596e+00, -2.948003924086439e+00, -1.707806444045267e-04, -2.833113717792003e+00, -2.833113717792003e+00, -2.572893298748155e+03, -1.873032783298301e+03, -5.696011117818540e+03, -7.626856935374356e+00, -2.737268103119844e+03, -2.737268103119841e+03, -8.333496114853798e-03, -8.380353566063680e-03, -8.364310470499330e-03, -8.351189976394184e-03, -8.358814469112550e-03, -8.358814469112548e-03, -1.196332130523205e-02, -1.645073464100093e-02, -1.532709168170920e-02, -1.412124209995408e-02, -1.504800978707530e-02, -1.504800978707531e-02, -1.450723760922027e-02, -5.198982862803900e-01, -3.626244119423771e-01, -1.328578379694793e-01, -2.446342901485133e-01, -2.446342901485134e-01, -5.670396051554435e-02, -1.483186886044307e+01, -8.439592303965510e+00, -1.812368389127180e-01, -5.131178821320631e+00, -5.131178821320627e+00, -2.869849005193050e+02, -5.169074264585523e+04, -1.045993899845726e+04, -6.179624021537107e+00, -4.700667129037931e+03, -4.700667129037955e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_msb86bl_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_msb86bl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_msb86bl_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_msb86bl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.409514986205867e-04, 1.409451711679693e-04, 1.408442814699219e-04, 1.409431752811678e-04, 1.409488483357290e-04, 1.409488483357290e-04, 1.546820326972970e-03, 1.550814215726262e-03, 1.677471657672357e-03, 1.696030594443550e-03, 1.547495501096812e-03, 1.547495501096812e-03, 9.375131334820701e-03, 9.338365523784019e-03, 8.557826324547267e-03, 9.804453743612693e-03, 9.363517143766899e-03, 9.363517143766899e-03, 1.135989432414110e-01, 1.117273860166843e-01, 1.761570453380841e-03, 4.424210519552753e-03, 1.128744982033571e-01, 1.128744982033571e-01, 5.524607410967066e-06, 3.702328577225450e-06, 5.790815052387068e-05, 2.101536881185639e-12, 5.750732478103425e-06, 5.750732478104017e-06, 4.063433315543177e-05, 4.015613552955108e-05, 4.006828378100589e-05, 3.972780214560640e-05, 4.108465245029496e-05, 4.108465245029496e-05, 9.138739141354230e-03, 7.812055615273150e-03, 8.444266487292891e-03, 7.317638929845618e-03, 9.119503695045472e-03, 9.119503695045472e-03, 4.928757248844049e-02, 4.699551458336883e-02, 3.727409438461498e-02, 4.227263660093547e-02, 4.217508181493164e-02, 4.217508181493164e-02, 2.479979385810731e-03, 7.973917449256836e-02, 3.052626529020774e-03, 1.158075636101605e-02, 1.940664866419499e-02, 1.940664866419499e-02, 1.932570633836806e-11, 1.150826306671129e-11, 1.999212532934410e-10, 3.547903551545129e-05, 4.874130816518366e-12, 4.874130813311107e-12, 7.031895435104376e-03, 6.850952276839280e-03, 6.918282805916350e-03, 6.967641555762759e-03, 6.946452785810444e-03, 6.946452785810442e-03, 1.478920086436610e-02, 1.045027575352422e-02, 1.256911563117635e-02, 1.392996858392684e-02, 1.401811021189296e-02, 1.401811021189298e-02, 4.552902862625033e-02, 6.519823900897298e-02, 8.206656129171191e-02, 5.507541295694621e-02, 7.961814167164093e-02, 7.961814167164091e-02, 5.753915432056689e-02, 1.340003658281047e-04, 1.133199359468866e-04, 6.514325918459496e-02, 2.863465761950336e-03, 2.863465761950301e-03, 1.062955752075168e-09, 7.598574755205653e-16, 1.421815518458611e-11, 2.478907759846463e-03, 2.851348178335686e-12, 2.851348178144830e-12]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
