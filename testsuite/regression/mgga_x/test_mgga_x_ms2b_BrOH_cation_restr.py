
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ms2b_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2b", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.244432016187179e+01, -2.244437265374506e+01, -2.244465403877298e+01, -2.244387277366806e+01, -2.244427530094449e+01, -2.244427530094449e+01, -3.405299293068343e+00, -3.405315997445824e+00, -3.406022859734356e+00, -3.407949309907579e+00, -3.406585891928223e+00, -3.406585891928223e+00, -6.653198145456699e-01, -6.650434870219231e-01, -6.595903391163780e-01, -6.646591972433702e-01, -6.630275234859526e-01, -6.630275234859526e-01, -1.999884912386841e-01, -2.019045339153446e-01, -7.676489885528842e-01, -1.598686948722132e-01, -1.748972172315586e-01, -1.748972172315587e-01, -8.410775925071326e-03, -8.852059073756247e-03, -4.822503816513206e-02, -4.859189255169546e-03, -6.105164998016610e-03, -6.105164998016610e-03, -5.448809520844018e+00, -5.449271967244252e+00, -5.448837763299753e+00, -5.449245888904805e+00, -5.449040122315892e+00, -5.449040122315892e+00, -2.117933127575769e+00, -2.134106056722672e+00, -2.114494084662142e+00, -2.128558786378548e+00, -2.128550088176773e+00, -2.128550088176773e+00, -5.990412138682084e-01, -6.297111755395626e-01, -5.379168760343056e-01, -5.355453312943489e-01, -6.087226278401681e-01, -6.087226278401681e-01, -1.185015863376577e-01, -2.075428665118573e-01, -1.104021464820937e-01, -1.817205505589563e+00, -1.345008886194324e-01, -1.345008886194324e-01, -3.749381949191758e-03, -4.750258785218698e-03, -3.631989828945087e-03, -7.643976095798072e-02, -4.375432455065480e-03, -4.375432455065480e-03, -6.093469823820895e-01, -6.081979230458626e-01, -6.086115488600010e-01, -6.089414251995214e-01, -6.087758465542477e-01, -6.087758465542477e-01, -5.894150879181806e-01, -5.273373456352124e-01, -5.453390884128525e-01, -5.628752427562604e-01, -5.537458860307461e-01, -5.537458860307461e-01, -6.503527219628358e-01, -2.546536300363665e-01, -2.956636510425869e-01, -3.609257228731211e-01, -3.285161275065887e-01, -3.285161275065887e-01, -4.784667331154703e-01, -4.623375820140011e-02, -6.241830789203849e-02, -3.440064597562690e-01, -9.496757992628128e-02, -9.496757992628131e-02, -1.186537763447831e-02, -1.269955801579340e-03, -2.665545706146355e-03, -8.980440293406307e-02, -4.048681265890934e-03, -4.048681265890931e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ms2b_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2b", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.864291625773868e+01, -2.864302576583931e+01, -2.864366314362253e+01, -2.864204042845956e+01, -2.864286913866851e+01, -2.864286913866851e+01, -4.191028990627879e+00, -4.191115783099752e+00, -4.193388237670987e+00, -4.191847401804055e+00, -4.191999241676046e+00, -4.191999241676046e+00, -7.884224996188862e-01, -7.872751616626853e-01, -7.598647500554248e-01, -7.653191525078485e-01, -7.646366140312899e-01, -7.646366140312899e-01, -2.212324131140430e-01, -2.220645116231494e-01, -9.170195536297584e-01, -1.711095369973359e-01, -1.851570985310998e-01, -1.851570985310998e-01, -1.120285710994262e-02, -1.178895394501447e-02, -6.265710687185619e-02, -6.476801243590781e-03, -8.135486845348008e-03, -8.135486845348008e-03, -7.080988556166711e+00, -7.082978767717126e+00, -7.081181702338387e+00, -7.082933900947067e+00, -7.081945371280988e+00, -7.081945371280988e+00, -2.426111997020840e+00, -2.468368511558126e+00, -2.431150006563505e+00, -2.470336155658481e+00, -2.447407750266815e+00, -2.447407750266815e+00, -7.339575275517775e-01, -8.613274266723964e-01, -6.589611937966771e-01, -7.136516715168106e-01, -7.538143711258983e-01, -7.538143711258983e-01, -1.386799984448080e-01, -2.282887611728273e-01, -1.306056631120705e-01, -2.466470732686552e+00, -1.511758706053689e-01, -1.511758706053689e-01, -4.998058986381083e-03, -6.331531665004149e-03, -4.840249004205060e-03, -9.506602688412297e-02, -5.831042173203909e-03, -5.831042173203909e-03, -8.096675603312057e-01, -7.984814493987423e-01, -8.022158710806274e-01, -8.054581834571637e-01, -8.038166852186360e-01, -8.038166852186360e-01, -7.933562819535237e-01, -6.451324005554100e-01, -6.783194227525415e-01, -7.165674354227682e-01, -6.953885949195105e-01, -6.953885949195105e-01, -8.909055381544405e-01, -2.833529097965153e-01, -3.229647608043628e-01, -4.037842504610130e-01, -3.584247487585291e-01, -3.584247487585290e-01, -5.505213766744613e-01, -6.026781193259069e-02, -7.984796617461112e-02, -4.008138768509921e-01, -1.133312113242716e-01, -1.133312113242716e-01, -1.579146518260922e-02, -1.693183530893339e-03, -3.553476453230884e-03, -1.086426205349826e-01, -5.395688378995392e-03, -5.395688378995387e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms2b_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2b", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.663739128344192e-09, -4.663635775421273e-09, -4.662012936755386e-09, -4.663506320024480e-09, -4.662890363658825e-09, -4.662890363658825e-09, -1.276134532592238e-05, -1.276649832583967e-05, -1.291304185949914e-05, -1.295568401993109e-05, -1.291174188107585e-05, -1.291174188107585e-05, -3.524547368044732e-03, -3.529339312193282e-03, -3.678436008350414e-03, -3.809924119639506e-03, -3.740879179369440e-03, -3.740879179369440e-03, -4.306377121447763e-01, -4.643404112788168e-01, -2.276514376958148e-03, -7.393329905010940e-01, -7.163323638129236e-01, -7.163323638129238e-01, -1.701002747965605e+00, -1.796924785299743e+00, -1.001672319294693e+00, -1.547504192300820e+00, -1.965544359843270e+00, -1.965544359843275e+00, -7.782051096115402e-07, -7.776404051021754e-07, -7.770920832155911e-07, -7.766387955808902e-07, -7.784781192029205e-07, -7.784781192029205e-07, -7.814301125219324e-05, -7.083591753627597e-05, -7.112187074304845e-05, -6.424741262458520e-05, -7.751034892131694e-05, -7.751034892131694e-05, -2.591806833976864e-02, -2.642737346171613e-02, -2.850116550247273e-02, -2.030051066437423e-02, -2.514953675821957e-02, -2.514953675821957e-02, -7.369942113189450e-01, -2.679546479733155e-01, -8.097147870666516e-01, -1.732450568077819e-04, -8.632886940368428e-01, -8.632886940368426e-01, -2.039127026186585e+00, -1.821662540165319e+00, -1.143844510475367e+01, -1.156856253130261e+00, -5.324131953000252e+00, -5.324131953000240e+00, -1.452035466923432e-02, -1.291928511341717e-02, -1.344217613826321e-02, -1.390894254918269e-02, -1.367622798302286e-02, -1.367622798302286e-02, -2.681287625606102e-02, -1.385086785175379e-02, -1.642306196455841e-02, -2.006475869420861e-02, -1.873993505544099e-02, -1.873993505544101e-02, -1.975569262029184e-02, -1.439935156781287e-01, -1.408993949338762e-01, -1.380031584676695e-01, -1.465718454839484e-01, -1.465718454839485e-01, -4.601270918621631e-02, -9.028340911284237e-01, -9.160207952811709e-01, -1.976088979423101e-01, -1.279306308778378e+00, -1.279306308778381e+00, -1.373711741750181e+00, -8.938035492854052e+00, -4.325387244362339e+00, -1.227812686418394e+00, -6.724107433390657e+00, -6.724107433390674e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms2b_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2b", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms2b_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2b", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [3.278710905856223e-04, 3.278616650344705e-04, 3.276524713109775e-04, 3.277861398024991e-04, 3.277400574667564e-04, 3.277400574667564e-04, 3.368242943320041e-03, 3.370857112098676e-03, 3.446554830978759e-03, 3.477537203350455e-03, 3.448525594897579e-03, 3.448525594897579e-03, 1.389329433281861e-05, 1.670191196701209e-05, 2.632154641943152e-04, 8.809378547940853e-04, 5.983436415215697e-04, 5.983436415215697e-04, 1.156572041438379e-02, 1.485209722290430e-02, 6.532107552268225e-04, 7.745519665151979e-03, 1.331637551007869e-02, 1.331637551007871e-02, 5.221578723729188e-10, 1.327293503095875e-09, 1.610020596157628e-05, 3.016411889247387e-10, 9.447566722020851e-10, 9.447566722020998e-10, 1.194292018954679e-04, 1.184651258253788e-04, 1.169680675369499e-04, 1.162165927105145e-04, 1.201838947735490e-04, 1.201838947735490e-04, 5.330325785540088e-03, 4.794063125481782e-03, 4.559019582419578e-03, 4.020193689028950e-03, 5.423868000952623e-03, 5.423868000952623e-03, 5.443090558600046e-02, 7.076354840057715e-02, 3.680961593430158e-02, 2.138649459387883e-02, 5.643161720062654e-02, 5.643161720062654e-02, 1.395018644951320e-03, 5.906579827413059e-03, 1.095308411900874e-03, 7.912938376331275e-03, 3.649474032421674e-03, 3.649474032421671e-03, 4.285481594349159e-11, 3.742778810912660e-10, 1.522237887206357e-09, 2.619795590290892e-04, 1.323346467062878e-09, 1.323346467062879e-09, 3.063047173543966e-02, 2.525453744571824e-02, 2.700669286711066e-02, 2.857201657515925e-02, 2.778939853324758e-02, 2.778939853324758e-02, 5.930017201779442e-02, 1.108192814425341e-02, 1.957028190762810e-02, 3.217168617388810e-02, 2.653695785474049e-02, 2.653695785474052e-02, 5.553702397013799e-02, 6.472318572982842e-03, 1.928869269650569e-02, 5.200640170439300e-02, 3.671286474128755e-02, 3.671286474128759e-02, 4.350207872412717e-02, 6.584833245201331e-06, 5.894415888533678e-05, 7.115438328581355e-02, 9.751901490771795e-04, 9.751901490771930e-04, 2.302500393821537e-08, 1.279665103669594e-13, 4.485267088986986e-11, 5.413354513666353e-04, 1.288294842160575e-09, 1.288294842160576e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
