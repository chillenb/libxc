
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ms2b_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2b", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.010243443127277e+01, -2.010252444859590e+01, -2.010292831098226e+01, -2.010159133946924e+01, -2.010229125499903e+01, -2.010229125499903e+01, -3.223731763713242e+00, -3.223744835152600e+00, -3.224143977875841e+00, -3.224275232803575e+00, -3.223926175498268e+00, -3.771510807503059e+00, -6.159775113892544e-01, -7.556480144369440e-01, -7.426258517192855e-01, -7.454524814659433e-01, -7.449010669114654e-01, -7.449010669114654e-01, -2.012159975376630e-01, -2.034842807724355e-01, -7.134384843079044e-01, -1.636698586355255e-01, -1.783537585650819e-01, -1.783537585650819e-01, -8.410811890287615e-03, -8.852137824704268e-03, -4.829119825572861e-02, -4.859275469505490e-03, -6.105283953763883e-03, -6.105283953763883e-03, -5.449261120304977e+00, -5.449718094530279e+00, -5.449279636751059e+00, -5.030255790282370e+00, -5.449493812452945e+00, -5.449493812452945e+00, -1.810613695805326e+00, -1.824595837859514e+00, -1.800330846233260e+00, -1.812731753107740e+00, -1.823310522273077e+00, -2.152483552082611e+00, -6.257142043943013e-01, -6.701349009862947e-01, -5.857364827145367e-01, -6.015972586149457e-01, -6.339782980736960e-01, -5.535152698282080e-01, -8.250554739011540e-02, -2.089776483464807e-01, -7.630580454342054e-02, -2.037941544415219e+00, -1.358366368559680e-01, -1.358366368559680e-01, -2.422635641929878e-03, -4.750441914337000e-03, -3.632101151901014e-03, -5.127247988246850e-02, -2.827543086671216e-03, -4.375651919354964e-03, -6.112810374798602e-01, -6.098903315272088e-01, -5.943987801895398e-01, -6.107838428160834e-01, -6.105837698084001e-01, -6.105837698084001e-01, -5.949973055673118e-01, -5.285955692515132e-01, -5.473623444248764e-01, -5.660149469580590e-01, -5.564781391898906e-01, -4.918049868981262e-01, -7.050549273507490e-01, -1.999786628679497e-01, -2.993122534830236e-01, -3.215478756368392e-01, -3.361794760646273e-01, -3.361794760646273e-01, -4.203598679642072e-01, -4.626171034750069e-02, -6.258439854512798e-02, -3.624511836554415e-01, -6.534410515787421e-02, -9.566978024682596e-02, -1.186796127283032e-02, -1.269976726513856e-03, -2.665558986412307e-03, -9.016991515392062e-02, -4.048829184847775e-03, -4.048829184847771e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ms2b_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2b", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.862880000291993e+01, -2.862903257881661e+01, -2.863002973436055e+01, -2.862658042892207e+01, -2.862839285847932e+01, -2.862839285847932e+01, -4.337229186808391e+00, -4.337211991435961e+00, -4.336828007614718e+00, -4.337377693820355e+00, -4.336868184672618e+00, -4.619670156597540e+00, -8.356264946627319e-01, -8.825203607302520e-01, -8.600596979775111e-01, -8.665945213873175e-01, -8.651920450633963e-01, -8.651920450633963e-01, -2.299476907431478e-01, -2.330200443122838e-01, -9.635227334217126e-01, -1.873292937818091e-01, -2.021562953256734e-01, -2.021562953256735e-01, -1.120300098140017e-02, -1.178926898617383e-02, -6.292407734137379e-02, -6.477146129569803e-03, -8.135962735521063e-03, -8.135962735521063e-03, -7.085429378456499e+00, -7.087347402988300e+00, -7.085529703173135e+00, -7.322925387479981e+00, -7.086395373795599e+00, -7.086395373795599e+00, -2.449079101312039e+00, -2.465849404346449e+00, -2.436653164512283e+00, -2.451712502860395e+00, -2.464241138234044e+00, -2.608507415987095e+00, -7.869372334594126e-01, -8.640609111474988e-01, -7.230723917051782e-01, -7.571390806194809e-01, -8.012033040293481e-01, -7.435807234947638e-01, -1.103139881527571e-01, -2.368222257921339e-01, -1.019884931801405e-01, -2.582797564941127e+00, -1.574733237739550e-01, -1.574733237739550e-01, -3.230189343506037e-03, -6.332264131866362e-03, -4.840694348139049e-03, -6.844851575615817e-02, -3.770084316198481e-03, -5.831920003743283e-03, -8.092975370448311e-01, -8.020052133705365e-01, -8.271045708384890e-01, -8.066705569184347e-01, -8.056093789744886e-01, -8.056093789744886e-01, -7.869954638893079e-01, -6.576497327316907e-01, -6.937595557599253e-01, -7.305112605235036e-01, -7.116395471807379e-01, -6.832673251491284e-01, -9.032539372425057e-01, -2.701648071328759e-01, -3.469890875890424e-01, -4.351036375758149e-01, -3.984831376150076e-01, -3.984831376150076e-01, -5.647410771310433e-01, -6.038042670421860e-02, -8.052170548689430e-02, -4.457846451515704e-01, -8.732921327636339e-02, -1.163135895539744e-01, -1.580179480456177e-02, -1.693267224892244e-03, -3.553529576310493e-03, -1.102065848400063e-01, -5.396280099172423e-03, -5.396280099172418e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms2b_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2b", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.470626588944396e-08, -1.470689761374912e-08, -1.470933514365773e-08, -1.469999698362779e-08, -1.470494199600028e-08, -1.470494199600028e-08, -7.634519153789260e-06, -7.633564333722037e-06, -7.607707431199817e-06, -7.615431659656161e-06, -7.617771516126486e-06, -2.892531547210998e-06, -6.058781587114160e-03, -1.555743168987641e-03, -1.595674701409304e-03, -1.605320522013441e-03, -1.602486316111595e-03, -1.602486316111595e-03, -2.656761278455955e-01, -2.597397961853942e-01, -3.122000298772932e-03, -3.330648928141237e-01, -3.240591235142244e-01, -3.240591235142241e-01, -1.672681306125951e+00, -1.742413275907763e+00, -7.843732582744984e-01, -1.229491565905918e+00, -1.710484822504444e+00, -1.710484822504444e+00, -7.244432277601178e-07, -7.243442844061840e-07, -7.244416860017748e-07, -6.440708604730980e-06, -7.243917185344560e-07, -7.243917185344560e-07, -8.163809355830576e-05, -7.849914531119752e-05, -8.396992543104027e-05, -8.118597364637959e-05, -7.876246528755104e-05, -2.663877393533237e-05, -3.996293876404281e-03, -3.138078090981402e-03, -5.047006808922745e-03, -4.681550671792479e-03, -3.818609946040513e-03, -8.936927498347432e-03, -1.543983611321521e+01, -1.759480484799812e-01, -2.102237373069077e+01, -3.590409716672204e-05, -5.414682088645094e-01, -5.414682088645096e-01, -2.016900119291294e+07, -1.086934499419393e+00, -8.784985466991241e+00, -1.018369015030068e+02, -1.086975884391788e+07, -3.371723916436973e+00, -4.656796378296010e-03, -4.669845173288573e-03, -3.737018924739608e-02, -4.661582796798073e-03, -4.663415214956688e-03, -4.663415214956688e-03, -5.183447769622288e-03, -7.714023944470471e-03, -6.900167991399210e-03, -6.172764151587025e-03, -6.534835905024499e-03, -2.728633496934820e-02, -2.541528423015715e-03, -5.080577627055212e-01, -6.082378947112380e-02, -8.236476939173937e-02, -4.209457239461199e-02, -4.209457239461204e-02, -2.587911568169178e-02, -8.009026824632558e-01, -6.696469831332704e-01, -3.418541151268083e-02, -3.905268339126511e+01, -8.506446966138383e-01, -7.984936798344636e-01, -1.331688043255867e+00, -3.816872188229736e+00, -9.524232348438147e-01, -4.805326103168583e+00, -4.805326103168591e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms2b_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2b", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.070380004564918e-03, 1.070473209210642e-03, 1.070847967960821e-03, 1.069468621061608e-03, 1.070196829703960e-03, 1.070196829703960e-03, 2.926110698109575e-04, 2.924260746556551e-04, 2.874733245123883e-04, 2.894651122339302e-04, 2.892826720261699e-04, -7.888338709613183e-18, 1.367045471717592e-03, -1.218245580076742e-17, -4.224991135998032e-18, 2.479611400667728e-19, -5.706797715609452e-18, -5.706797715609452e-18, 1.250506353282149e-17, -1.271024499945220e-17, 4.978861851079607e-04, 1.041903928515722e-17, 1.661266139200598e-17, 9.631823851739808e-19, 5.649251732188645e-24, -1.228374762236366e-24, 1.225238593502718e-20, 2.572777752799435e-25, -5.440844785842807e-25, -5.440844785842807e-25, -3.311601352136000e-18, 3.810577906314262e-19, -1.901086595441657e-19, 8.936906526808409e-03, -3.035091605259900e-18, -3.035091605259900e-18, 6.730553245559783e-04, 6.543942489458502e-04, 6.826109897156535e-04, 6.710810743325757e-04, 6.558262735634341e-04, 3.285025517088083e-19, 2.220352701189311e-17, 3.172732811890900e-17, -3.056038462375579e-17, 3.625534275589790e-17, 2.824771261465081e-17, 2.590844292143836e-03, 1.673759040715285e-04, 9.630371431655653e-18, 1.372622727756200e-04, -2.655003987566842e-18, 3.836778780276164e-18, 1.638353064829304e-18, 4.929662248496316e-09, -8.781208276738575e-26, 5.996201645848809e-25, 5.301882647769999e-05, 3.107058183789210e-08, 1.559038175224209e-24, -4.971826189315852e-18, 1.918643205968298e-17, 8.934528859596001e-02, -4.407086754716076e-20, 4.773567764102804e-18, 4.773567764102804e-18, -1.116307297467017e-17, -3.971924194628543e-18, 1.105807141174725e-17, -2.286295360424683e-17, 1.746578600085264e-17, 2.202812494190489e-02, 1.906023296251031e-19, 1.886310236653704e-03, 2.399841946977439e-17, 3.812850754439399e-03, -5.502308515045685e-18, 1.002161748784314e-17, 1.974332528097406e-03, 2.337617214955535e-20, -9.880585606973362e-20, 2.061985269923743e-17, 1.480654526507834e-04, 1.111536948254922e-18, -2.285517933455137e-23, 3.655903480418580e-29, -2.865413580620236e-27, 4.949606538583947e-19, -3.375043804049248e-25, 9.991002251924229e-25]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
