
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_gdme_kos_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_kos", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-9.143466969918101e+00, -9.143549921140927e+00, -9.144076272640426e+00, -9.142719269493838e+00, -9.143509193577438e+00, -9.143509193577438e+00, -3.755657517865675e+00, -3.755672059964702e+00, -3.756086823728217e+00, -3.755917591843279e+00, -3.755667006630147e+00, -3.755667006630147e+00, -8.929922859691800e-01, -8.939483142233691e-01, -9.257251418694515e-01, -9.130449935092081e-01, -8.932166264202118e-01, -8.932166264202118e-01, -3.381055114483623e-01, -3.310465506248730e-01, -1.004282174054790e+00, -4.766480508306270e-01, -3.354214356318723e-01, -3.354214356318722e-01, -4.612947086937739e+00, -4.336517612484921e+00, -1.210662915334714e+00, -1.172684072147056e+01, -4.332037702067280e+00, -4.332037702067276e+00, -6.828151940249975e+01, -1.757926270112222e+01, 2.959697999033914e+02, -9.383731775482029e+01, 9.117516813862696e-01, -1.144113505180142e+01, 2.944055931503921e+02, -6.522802433287261e+00, -3.188893534697206e+00, -3.298087301811757e+00, -3.226395038145691e+00, -1.284980746889254e+00, -1.536725186421551e+01, -5.119264035505816e+00, -1.003978496435491e+01, -8.555338519295086e-01, -9.776016332126852e-01, -1.308004318135437e+00, 6.527314584363599e+00, -5.543446153474897e+00, 3.836283886133833e+01, -3.150478430371272e+00, -1.594562183504176e-01, 2.993859296217775e-01, -1.603205805727484e+02, -1.032152032426918e+05, 1.337300507972713e+05, 8.499010560784631e+00, -5.162841345396434e+01, 7.949465116905154e+02, -7.858808248145273e+04, 2.793788304707859e+04, 5.312653953376389e+05, -7.756921235743990e+02, 2.178041463152758e+04, -1.008783497071242e+06, 3.809752070010701e+05, -7.001429805816467e-01, -7.926727725999045e+00, 2.170312663566243e-01, -1.200492904293095e+00, -1.742470626124570e+01, -1.674446958959545e+01, 5.601346542766979e+01, 1.014780912663084e+02, 1.165462633150191e+01, -1.534697083656710e+00, -8.878014476357282e-01, -6.662900748838658e-01, -2.276247429431303e+01, -2.196303230767148e+00, -4.518375008748196e-01, 2.394217510922832e+01, -1.289392415874269e-01, 1.018348531525851e+02, -2.820088834427651e+03, 8.432135708975150e+02, 1.584917397116956e+00, 4.475000468197013e+01, 7.526449624141674e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_gdme_kos_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_kos", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-5.568327623939959e+01, -5.568339114859660e+01, -5.568395667757981e+01, -5.568207244779169e+01, -5.568333646833785e+01, -5.568333646833785e+01, -8.309848006195889e+00, -8.309863226020459e+00, -8.310670156318595e+00, -8.311124669439756e+00, -8.309895896342768e+00, -8.309895896342768e+00, -1.535200884382781e+00, -1.533000774522309e+00, -1.473646260719597e+00, -1.491904361254292e+00, -1.534439895204289e+00, -1.534439895204289e+00, -3.887119505672655e-01, -3.977412975962646e-01, -1.861922361457486e+00, -2.046420020866757e-01, -3.916092912810969e-01, -3.916092912810970e-01, 1.509644750228019e+00, 1.416172691836467e+00, 2.843276163959701e-01, 3.895512340216599e+00, 1.414985069631037e+00, 1.414985069631038e+00, 8.450137178134357e+00, -8.453160172988161e+00, -1.129672377878625e+02, 1.696648924433097e+01, -1.461558011419017e+01, -1.049795120312760e+01, -1.035105128460807e+02, -3.238920886818289e+00, -4.297040401590727e+00, -4.290201380865379e+00, -4.345309044336526e+00, -4.992447141422005e+00, 3.526698769086857e+00, -2.692772062129176e-02, 1.832417170186936e+00, -1.294150481271940e+00, -1.331161999743127e+00, -1.221027771435542e+00, -2.442856384310286e+00, 1.342809226736964e+00, -1.305127452105895e+01, -4.222096212736594e+00, -2.556885240278235e-01, -4.086359066852220e-01, 5.342723337222469e+01, 3.440505293622742e+04, -4.457669470026253e+04, -2.999207427480055e+00, 1.719597572725885e+01, -2.649956659875681e+02, 2.619438091328390e+04, -9.314265472410949e+03, -1.770901060538073e+05, 2.569206687967269e+02, -7.261780366119748e+03, 3.362595235348038e+05, -1.269933294023847e+05, -1.149177394132278e+00, 1.198098179555259e+00, -1.573601096289760e+00, -1.071991231184761e+00, 4.336079887799430e+00, 3.764075124377638e+00, -1.930632425212647e+01, -3.458039772684808e+01, -4.849289985414535e+00, -3.414190133407752e-01, -5.570508920144359e-01, -1.024884323496527e+00, 7.477066456482260e+00, 5.826113734155500e-01, -7.606045133101443e-01, -8.197506725355584e+00, -1.738019417503432e-01, -3.397777184464828e+01, 9.400255563879360e+02, -2.810788934891807e+02, -7.351201467887101e-01, -1.492813755182596e+01, -2.508931234625585e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gdme_kos_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_kos", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gdme_kos_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_kos", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([-1.839982610750053e-03, -1.839978144520693e-03, -1.839954930830203e-03, -1.840028133600746e-03, -1.839980282903947e-03, -1.839980282903947e-03, -1.130173688286245e-02, -1.130171316398056e-02, -1.130059609354268e-02, -1.130012566065035e-02, -1.130167653969934e-02, -1.130167653969934e-02, -5.895917116762694e-02, -5.901975487755223e-02, -6.063455732460298e-02, -6.016091194819258e-02, -5.898125324618544e-02, -5.898125324618544e-02, -2.155190038904118e-01, -2.126870606182159e-01, -4.919426054096716e-02, -2.972678453967009e-01, -2.146616443807809e-01, -2.146616443807809e-01, -3.858846036550153e+00, -3.684026204445357e+00, -9.063759232917896e-01, -8.043742723241674e+00, -3.722821756474962e+00, -3.722821756474962e+00, -7.551461313156417e-03, -7.550118515001627e-03, -7.551319614427403e-03, -7.550275573464312e-03, -7.550778754250997e-03, -7.550778754250997e-03, -2.010378879498867e-02, -1.996313314583799e-02, -2.016121287508069e-02, -2.005063930569363e-02, -1.993519724826893e-02, -1.993519724826893e-02, -6.772134231691705e-02, -6.234416494543777e-02, -7.136823613838224e-02, -6.842414654346853e-02, -6.521562767897064e-02, -6.521562767897064e-02, -4.046062424037981e-01, -2.139859057285462e-01, -4.098595073246705e-01, -2.049676768907245e-02, -3.499028339582368e-01, -3.499028339582368e-01, -8.338189232562778e+00, -7.296046501116300e+00, -9.734485615036306e+00, -6.501904911510565e-01, -8.007469758938162e+00, -8.007469758938162e+00, -6.562946534059258e-02, -6.598171723673331e-02, -6.585500811249993e-02, -6.575758508026534e-02, -6.580630932412856e-02, -6.580630932412856e-02, -6.780561107811139e-02, -7.816248559929942e-02, -7.482922094326099e-02, -7.198246238405515e-02, -7.340542332073595e-02, -7.340542332073594e-02, -5.946039599950564e-02, -1.701345333667194e-01, -1.432514365162090e-01, -1.120516078993598e-01, -1.266894928662426e-01, -1.266894928662426e-01, -8.666066183440495e-02, -9.786210058843079e-01, -7.228872459479300e-01, -1.185932642307483e-01, -4.984932103396824e-01, -4.984932103396825e-01, -3.292552909235058e+00, -2.664903976949328e+01, -1.402849987279148e+01, -5.225179067189278e-01, -9.422019582854674e+00, -9.422019582854688e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_gdme_kos_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_gdme_kos", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([7.454442269154826e-03, 7.454424174826798e-03, 7.454330127679505e-03, 7.454626698866522e-03, 7.454432838199174e-03, 7.454432838199174e-03, 4.578746812184977e-02, 4.578737202798742e-02, 4.578284636723329e-02, 4.578094047159225e-02, 4.578722364963404e-02, 4.578722364963404e-02, 2.388651583653452e-01, 2.391106051241629e-01, 2.456527602224237e-01, 2.437338496338806e-01, 2.389546209389781e-01, 2.389546209389781e-01, 8.731462803074663e-01, 8.616730427296933e-01, 1.993039352838843e-01, 1.204340725308501e+00, 8.696728034761558e-01, 8.696728034761558e-01, 1.563359612039704e+01, 1.492533706495015e+01, 3.672060243860844e+00, 3.258814263135697e+01, 1.508251203019984e+01, 1.508251203019984e+01, 3.059373065690751e-02, 3.058829049064424e-02, 3.059315658355003e-02, 3.058892679189847e-02, 3.059096536123243e-02, 3.059096536123243e-02, 8.144779852154940e-02, 8.087795106196019e-02, 8.168044446472530e-02, 8.123247050851810e-02, 8.076477252731049e-02, 8.076477252731049e-02, 2.743639172140560e-01, 2.525790057412469e-01, 2.891388174196441e-01, 2.772112340869096e-01, 2.642123511055406e-01, 2.642123511055406e-01, 1.639207815398475e+00, 8.669351391402592e-01, 1.660490712230449e+00, 8.303989969784782e-02, 1.417584307762604e+00, 1.417584307762604e+00, 3.378105309271920e+01, 2.955895187154500e+01, 3.943796023573599e+01, 2.634159394725592e+00, 3.244118759126482e+01, 3.244118759126482e+01, 2.658889587752757e-01, 2.673160599927764e-01, 2.668027150045931e-01, 2.664080186823367e-01, 2.666054184082171e-01, 2.666054184082171e-01, 2.747053207750169e-01, 3.166648060201546e-01, 3.031605322291518e-01, 2.916272725071093e-01, 2.973922075080034e-01, 2.973922075080033e-01, 2.408958034112696e-01, 6.892771972746041e-01, 5.803639432485040e-01, 4.539620306037867e-01, 5.132654543375993e-01, 5.132654543375993e-01, 3.510940249527584e-01, 3.964751486848577e+00, 2.928680526948299e+00, 4.804646720864189e-01, 2.019578248366177e+00, 2.019578248366177e+00, 1.333933562014768e+01, 1.079650032176767e+02, 5.683458192136990e+01, 2.116911077028103e+00, 3.817204609917773e+01, 3.817204609917779e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
