
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mbrxc_bg_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbrxc_bg", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.963859757307020e+01, -1.963864709636585e+01, -1.963888628067615e+01, -1.963814873136193e+01, -1.963853249278796e+01, -1.963853249278796e+01, -3.257242732862371e+00, -3.257223474425619e+00, -3.256775348907388e+00, -3.257250982503852e+00, -3.256861505669892e+00, -4.627816337655475e+00, -6.528098136925227e-01, -1.168723437550429e+00, -1.213363329725838e+00, -1.187055326434273e+00, -1.193105777330177e+00, -1.193105777330177e+00, -3.696691139436715e-01, -3.655193430477516e-01, -8.047332340396129e-01, -4.761173100448567e-01, -4.177345982045167e-01, -4.177345982043296e-01, -2.505053303374634e+00, -2.364441105897223e+00, -9.491490423404549e-01, -4.434459284583749e+00, -3.187794863561684e+00, -3.187794863561684e+00, -5.150182941349915e+00, -5.146479812420989e+00, -5.149961753262390e+00, -4.774953582500137e+00, -5.148328191289087e+00, -5.148328191289087e+00, -1.846610385465967e+00, -1.856996632575218e+00, -1.839287425357856e+00, -1.848316879505127e+00, -1.855902901010490e+00, -2.766114119840974e+00, -6.867933837637070e-01, -6.579362070085414e-01, -6.954291887109306e-01, -6.583364984877951e-01, -6.815004880209294e-01, -5.511661882753841e-01, -1.242672331431407e-01, -4.809548211900803e-01, -1.182872048159846e-01, -2.163801990322582e+00, -4.619719244459224e-01, -4.619719244459221e-01, -3.370547526654651e-02, -4.773936882359391e+00, -2.310923978412440e+00, -9.248866538395485e-02, -2.678559161065336e-02, -3.062873415541981e+00, -5.455845645664771e-01, -5.532165195177212e-01, -5.369365164012793e-01, -5.479323627352651e-01, -5.490097419662917e-01, -5.490097419662917e-01, -5.320553259449329e-01, -6.073313710021043e-01, -5.809588510010032e-01, -5.532382842707229e-01, -5.675095326296786e-01, -4.852908150627310e-01, -7.131806888397051e-01, -2.245381973202085e-01, -4.856303662025374e-01, -3.282940455454627e-01, -4.792213272227004e-01, -4.792213272227004e-01, -4.240130903130365e-01, -9.705315127706458e-01, -8.397637980462468e-01, -4.370810450149679e-01, -1.021493906808829e-01, -5.335550521697725e-01, -2.664248909793594e+00, -1.292447219092899e+01, -4.317355074531028e+00, -5.336669740216137e-01, -2.778907957278263e+00, -2.778907957280180e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mbrxc_bg_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbrxc_bg", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.590271978244260e+01, -2.590279483292789e+01, -2.590314965293048e+01, -2.590203279753732e+01, -2.590261499680322e+01, -2.590261499680322e+01, -4.175670260099030e+00, -4.175700463409170e+00, -4.176567051702643e+00, -4.176595869673894e+00, -4.176158859949837e+00, -2.574844572578549e+00, -7.859533738569230e-01, -2.632043226250556e-01, -1.901251708772578e-01, -2.235013159825976e-01, -2.160086357427619e-01, -2.160086357427619e-01, -8.976793489252153e-03, -1.763213331720426e-02, -9.070949456161080e-01, 1.625162973954928e-01, 8.150570203082635e-02, 8.150570202975201e-02, 2.579387743444554e+00, 2.424140164221017e+00, 8.028351556569435e-01, 4.737390811318821e+00, 3.348653448589081e+00, 3.348653448589081e+00, -5.366459006815892e+00, -5.377905201017154e+00, -5.367109022368417e+00, -6.321657019908066e+00, -5.372191700567424e+00, -5.372191700567424e+00, -2.338758544753599e+00, -2.358252412163414e+00, -2.324299759033141e+00, -2.341662513716908e+00, -2.356511881261731e+00, -1.344060099745367e+00, -5.006397969314033e-01, -6.098114073351808e-01, -4.223099872130505e-01, -4.829748661574814e-01, -5.189334521991231e-01, -7.212109569739066e-01, -1.240131158179204e-01, 8.727016847828005e-02, -1.168547628173704e-01, -1.689813141664982e+00, 1.964468848400695e-01, 1.964468848400686e-01, -2.294913018875649e-02, 5.113626817910877e+00, 2.442807012139178e+00, -8.685678368369006e-02, -1.881876175598877e-02, 3.247086218343462e+00, -7.036570186704864e-01, -6.736555551972653e-01, -7.137825629573432e-01, -6.945806776720893e-01, -6.903656528476826e-01, -6.903656528476826e-01, -6.819148558708804e-01, -3.996915746759420e-01, -4.540279168698063e-01, -5.189281523794280e-01, -4.813915156632900e-01, -6.384669674296188e-01, -6.156961830000434e-01, -2.540229586643671e-01, -8.022444340371107e-02, -4.152101521842870e-01, -1.604305074242235e-01, -1.604305074242229e-01, -5.447900311228862e-01, 8.282150385508903e-01, 6.680909885755367e-01, -2.548979551349714e-01, -1.006170124566547e-01, 3.270475341859821e-01, 2.711903628769711e+00, 1.452992176617087e+01, 4.681393667171408e+00, 3.361583935958007e-01, 2.944298551735571e+00, 2.944298551747886e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbrxc_bg_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbrxc_bg", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-8.412137018380746e-09, -8.412011494542060e-09, -8.411437265118201e-09, -8.413303120407811e-09, -8.412327720889088e-09, -8.412327720889088e-09, -1.482610776809784e-05, -1.482487843487550e-05, -1.479150228239464e-05, -1.479961008220720e-05, -1.480489216524276e-05, -2.483019968965939e-05, -1.324012163185522e-02, -1.590403533276717e-02, -1.730483650094400e-02, -1.692285665946398e-02, -1.700007682772624e-02, -1.700007682772624e-02, -3.322776049143705e+00, -3.155841322967121e+00, -6.972398043170032e-03, -8.562009792433678e+00, -5.771231781791175e+00, -5.771231781779206e+00, -8.673997268570598e+05, -7.154497186572104e+05, -1.107737284891304e+03, -6.936031728104822e+06, -2.943469312868977e+06, -2.943469312868977e+06, -5.734190372412360e-06, -5.711486400738133e-06, -5.732926974834644e-06, -2.289084971878993e-06, -5.722849533179036e-06, -5.722849533179036e-06, -1.572252019922102e-04, -1.508293451601513e-04, -1.622164192116346e-04, -1.562981540339054e-04, -1.513476978054901e-04, -2.338466182400783e-04, -3.391579044458778e-02, -2.724925791820002e-02, -4.287556414534861e-02, -3.975984579628602e-02, -3.260431111446106e-02, -1.490614971096877e-02, -1.482345305614127e+01, -3.047665186820315e+00, -1.865318020371334e+01, -3.079875676425709e-04, -1.855090169700918e+01, -1.855090169700915e+01, -3.264830453557293e+05, -7.523272791886102e+06, -2.302992251360895e+07, -6.135707525455840e+01, -3.141286097719398e+05, -1.082896977106337e+07, -1.803364770499409e-02, -2.515992025989794e-02, -1.348006210251731e-02, -2.041139098293277e-02, -2.144084423443344e-02, -2.144084423443344e-02, -2.105857809270114e-02, -6.521407684474687e-02, -5.919858962283417e-02, -5.337408273971341e-02, -5.698367174501374e-02, -2.328720129258929e-02, -2.220978506972908e-02, -1.142555535387770e+00, -6.544826067237421e-01, -1.589142512837793e-01, -3.983502698993777e-01, -3.983502698993779e-01, -5.068723409981097e-02, -1.305291417015112e+03, -4.092314811517737e+02, -2.916613795584296e-01, -3.387563377866262e+01, -7.843685360702568e+01, -2.257820160213714e+05, -1.205851356404449e+09, -7.255864384737813e+07, -9.945883425627996e+01, -1.480114551398011e+07, -1.480114551401326e+07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbrxc_bg_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbrxc_bg", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.653906404660601e-04, -1.653895562903434e-04, -1.653848448119365e-04, -1.654009319781928e-04, -1.653924874813871e-04, -1.653924874813871e-04, -1.257951874320611e-03, -1.257855713829746e-03, -1.255303938173622e-03, -1.256220179101789e-03, -1.256252389691129e-03, -6.384411424152631e-04, -8.061096661122074e-03, -1.629145637028395e-03, -1.442201967768006e-03, -1.532560896787675e-03, -1.511272208273704e-03, -1.511272208273704e-03, -4.020803537841136e-03, -4.189074224714589e-03, -6.730329314650223e-03, -1.912716686401919e-03, -2.682489419485643e-03, -2.682489419480079e-03, -5.410428568975347e-05, -5.885183595259270e-05, -3.255520557932960e-04, -2.380081177487705e-05, -3.734022742905738e-05, -3.734022742905738e-05, -1.061678783760683e-03, -1.061040374034196e-03, -1.061646003238451e-03, -6.521876578602121e-04, -1.061369508532600e-03, -1.061369508532600e-03, -2.377707020042263e-03, -2.330979085699299e-03, -2.414423397735084e-03, -2.371601054242040e-03, -2.334230230147452e-03, -9.649412251927636e-04, -5.735192964412239e-03, -8.190727354191287e-03, -4.594210505889205e-03, -6.035413638740413e-03, -6.144445438090372e-03, -6.372917493754108e-03, -2.275224067843281e-02, -2.373123899412278e-03, -2.266887657144522e-02, -2.008336587647124e-03, -1.729912620908386e-03, -1.729912620908384e-03, -1.277283219762784e-02, -2.167124313142572e-05, -4.931521816871042e-05, -2.268700497342463e-02, -1.953856951835981e-02, -3.644797846488743e-05, -6.522061093751691e-03, -7.949546016333854e-03, -5.511690875065484e-03, -7.024601139653162e-03, -7.234372200249416e-03, -7.234372200249416e-03, -6.895268352164759e-03, -5.717760177607776e-03, -7.488204848084875e-03, -9.814816085774130e-03, -8.641918510419750e-03, -6.871912142721361e-03, -7.038112035617981e-03, -2.426295471960979e-02, -3.641246956115227e-03, -1.347017342574041e-02, -4.557709209386290e-03, -4.557709209386295e-03, -9.526251455479797e-03, -3.103510305028615e-04, -4.312706902820456e-04, -7.039972922659178e-03, -2.585892697351218e-02, -1.064121221554902e-03, -5.451758170876204e-05, -5.244813024094929e-06, -2.177658323937612e-05, -1.026719694751503e-03, -4.034285656427190e-05, -4.034285656436210e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
