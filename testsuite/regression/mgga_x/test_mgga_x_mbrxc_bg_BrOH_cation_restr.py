
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mbrxc_bg_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbrxc_bg", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.204965530880031e+01, -2.204961424654434e+01, -2.204960588140730e+01, -2.205021273731432e+01, -2.204986997780166e+01, -2.204986997780166e+01, -3.851674805064528e+00, -3.851523935842585e+00, -3.848050990331040e+00, -3.853953445308135e+00, -3.851175830761464e+00, -3.851175830761464e+00, -8.395381369031309e-01, -8.410847289198540e-01, -8.855307959351829e-01, -8.880671873670848e-01, -8.849125079228569e-01, -8.849125079228569e-01, -3.578184824521238e-01, -3.515504009537179e-01, -9.774162558516064e-01, -4.138232516292035e-01, -3.784169671324102e-01, -3.784169671324102e-01, -2.486551149554647e+00, -2.332575136830163e+00, -8.658605484836389e-01, -3.998769273248372e+00, -2.996221457181984e+00, -2.996221457180381e+00, -5.146740573132742e+00, -5.143091189886333e+00, -5.146591685565030e+00, -5.143369570892987e+00, -5.144877313062401e+00, -5.144877313062401e+00, -2.670586605433681e+00, -2.670340306816553e+00, -2.699587935821512e+00, -2.699130121826139e+00, -2.656609774607691e+00, -2.656609774607691e+00, -6.272873600009837e-01, -6.011372029761405e-01, -5.975401748211081e-01, -5.445439541402610e-01, -6.252345906604085e-01, -6.252345906604085e-01, -5.223256057320312e-01, -4.609903110515884e-01, -5.301803498954868e-01, -1.818724802988628e+00, -4.258978186878193e-01, -4.258978186878193e-01, -4.349099992972189e+00, -3.784173203658580e+00, -2.053654516931697e+00, -5.931025878366105e-01, -2.496342699098591e+00, -2.496342699096779e+00, -5.421676688310705e-01, -5.486262261157863e-01, -5.459967568845608e-01, -5.441184894088359e-01, -5.450241679024431e-01, -5.450241679024431e-01, -5.255850864619777e-01, -5.996609871842049e-01, -5.705413497225851e-01, -5.405216830993534e-01, -5.550084547595652e-01, -5.550084547595652e-01, -6.337218629919155e-01, -4.709456376513212e-01, -4.615051781622907e-01, -4.433355098140352e-01, -4.463826478643456e-01, -4.463826478644770e-01, -5.573811210477602e-01, -9.274616350294617e-01, -7.522419528441991e-01, -3.929385158153312e-01, -4.805454856169032e-01, -4.805454856166888e-01, -2.100017761253606e+00, -5.391296689627525e+00, -4.079586376197557e+00, -4.998673774715141e-01, -2.390881413947292e+00, -2.390881413947290e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mbrxc_bg_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbrxc_bg", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.046514924912626e+01, -2.046533318428851e+01, -2.046595824949718e+01, -2.046322570956882e+01, -2.046468469636578e+01, -2.046468469636578e+01, -3.222126763944003e+00, -3.222210552037612e+00, -3.224111413479907e+00, -3.220121664798215e+00, -3.221689519335401e+00, -3.221689519335401e+00, -5.783092017824406e-01, -5.757723440645752e-01, -5.057825249903650e-01, -5.103649578723534e-01, -5.119934690403746e-01, -5.119934690403746e-01, -1.994438521568711e-02, -3.060849337064091e-02, -7.327038325748503e-01, 1.070285932025873e-01, 4.598269179576504e-02, 4.598269179576480e-02, 2.559597720613965e+00, 2.390159011078402e+00, 7.227993095967348e-01, 4.259443891154491e+00, 3.140987114597121e+00, 3.140987114586848e+00, -5.374703072898108e+00, -5.386094141555238e+00, -5.375183639738654e+00, -5.385239648117179e+00, -5.380494102540974e+00, -5.380494102540974e+00, -1.408905233529794e+00, -1.432839290730936e+00, -1.365455508492780e+00, -1.386933538268099e+00, -1.442763271138798e+00, -1.442763271138798e+00, -5.485901129005872e-01, -7.395088779290876e-01, -5.017293290260493e-01, -6.301451209126412e-01, -5.677807709915261e-01, -5.677807709915261e-01, 2.786635779885587e-01, 6.928321914445303e-02, 2.990151969283391e-01, -2.223009698617047e+00, 1.645306729816786e-01, 1.645306729816786e-01, 4.676404178718829e+00, 4.027071813484036e+00, 2.162828504585740e+00, 4.127927654750796e-01, 2.629794586089259e+00, 2.629794586077614e+00, -7.105979434739285e-01, -6.860992811118430e-01, -6.962967509582884e-01, -7.033921605459085e-01, -6.999899661253841e-01, -6.999899661253841e-01, -6.947279094785214e-01, -4.058678418149798e-01, -4.620563335703949e-01, -5.411345495023385e-01, -4.937294085345718e-01, -4.937294085345718e-01, -7.681567057001615e-01, -9.172939313884484e-03, -1.029239181489975e-01, -2.782889103807381e-01, -1.912522902615646e-01, -1.912522902607656e-01, -3.739336480603533e-01, 7.866344046887805e-01, 5.858078618194569e-01, -2.914845618916504e-01, 2.795940668831029e-01, 2.795940668818071e-01, 2.114996512289107e+00, 5.968431592365922e+00, 4.417501558044068e+00, 3.057993057716161e-01, 2.521449249622230e+00, 2.521449249622220e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbrxc_bg_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbrxc_bg", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.156523484803201e-08, -2.156498676864780e-08, -2.156384554271728e-08, -2.156753746768517e-08, -2.156560888584459e-08, -2.156560888584459e-08, -2.810555952374098e-05, -2.810670512600179e-05, -2.813259188788839e-05, -2.808956764367651e-05, -2.811527719753668e-05, -2.811527719753668e-05, -1.780338876460058e-02, -1.785206801648948e-02, -1.913046703720226e-02, -1.862278688700217e-02, -1.874667897140566e-02, -1.874667897140566e-02, -3.355146120586976e+00, -3.192984343087030e+00, -9.014223473749508e-03, -8.883919677691731e+00, -5.931317736124972e+00, -5.931317736124966e+00, -8.681176539343422e+05, -7.165493304023299e+05, -1.125267688738481e+03, -7.007032623827086e+06, -2.962620086291672e+06, -2.962620086286523e+06, -5.719545622476736e-06, -5.696686559141870e-06, -5.718570743624283e-06, -5.698395507155040e-06, -5.707971455041149e-06, -5.707971455041149e-06, -2.429986498291016e-04, -2.371965347806769e-04, -2.461309347775741e-04, -2.408723785556056e-04, -2.383458143309142e-04, -2.383458143309142e-04, -3.665166222424188e-02, -1.720796979709717e-02, -4.798773935068650e-02, -3.407055386112473e-02, -3.484670431666159e-02, -3.484670431666159e-02, -3.277039689675089e+01, -3.083796200320069e+00, -4.376545431590214e+01, -2.138642450189669e-04, -1.893631682276483e+01, -1.893631682276483e+01, -1.912248422865339e+07, -7.696788346930742e+06, -2.331052504027092e+07, -1.911984970506132e+02, -1.105726171573902e+07, -1.105726171571292e+07, -1.569581186036906e-02, -2.232138368371044e-02, -1.979211423155082e-02, -1.785761492265084e-02, -1.880589217160306e-02, -1.880589217160306e-02, -1.597299247423930e-02, -6.581115418032037e-02, -6.021779251380371e-02, -5.177216003463476e-02, -5.777620485998141e-02, -5.777620485998141e-02, -1.510153446856931e-02, -1.292413467795686e+00, -6.651705579475673e-01, -2.524220436289479e-01, -4.090119955976214e-01, -4.090119955986082e-01, -9.026063730186397e-02, -1.315291474099605e+03, -4.176409372167341e+02, -3.130598035660871e-01, -8.030302492572952e+01, -8.030302492559149e+01, -2.321814352766617e+05, -1.294092789574081e+09, -7.293967078862557e+07, -1.009058500130521e+02, -1.502976264176213e+07, -1.502976264176216e+07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbrxc_bg_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbrxc_bg", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-2.443724198400759e-04, -2.443747259935192e-04, -2.443802454795856e-04, -2.443460347236901e-04, -2.443646391343612e-04, -2.443646391343612e-04, -1.182560624085326e-03, -1.182738218742761e-03, -1.186914133607374e-03, -1.180420197956112e-03, -1.183210250659341e-03, -1.183210250659341e-03, -4.001868139848415e-03, -3.968542585468178e-03, -3.208667586461996e-03, -3.232903979013068e-03, -3.255777866308972e-03, -3.255777866308972e-03, -4.310017824048325e-03, -4.557225387101825e-03, -3.449315267864920e-03, -2.466671380073858e-03, -3.248305850858794e-03, -3.248305850858790e-03, -5.460394701588658e-05, -5.985347932406624e-05, -3.700078057999120e-04, -2.697216528225029e-05, -4.028239377075014e-05, -4.028239377068015e-05, -1.061359200670665e-03, -1.060657821202127e-03, -1.061329764056810e-03, -1.060711853275648e-03, -1.061014284507916e-03, -1.061014284507916e-03, -1.053792240569190e-03, -1.068707694703279e-03, -1.011530078925184e-03, -1.024153571272767e-03, -1.083537238738698e-03, -1.083537238738698e-03, -7.967468402818487e-03, -7.274088462357156e-03, -7.752417759724464e-03, -9.335329029446886e-03, -8.362653095850306e-03, -8.362653095850306e-03, -1.265703390244618e-03, -2.575551852357718e-03, -1.177472003598958e-03, -2.496758531911939e-03, -1.991152171499670e-03, -1.991152171499670e-03, -2.310132881935999e-05, -2.869798354302812e-05, -5.694636840903523e-05, -7.944372378332085e-04, -4.675508957846054e-05, -4.675508957835009e-05, -6.006679509897019e-03, -7.407788294712709e-03, -6.895706830332078e-03, -6.484809654910876e-03, -6.688261405091826e-03, -6.688261405091826e-03, -5.858944062676573e-03, -5.963888272759971e-03, -8.003836342503713e-03, -1.021950339317062e-02, -9.329339635547112e-03, -9.329339635547112e-03, -7.220355701634180e-03, -3.132409286441171e-03, -4.096573610585996e-03, -7.275228119597107e-03, -5.479202233586303e-03, -5.479202233599523e-03, -6.275198943298957e-03, -3.304956998771163e-04, -5.050909006574761e-04, -9.982155370518756e-03, -1.255640383042229e-03, -1.255640383040072e-03, -7.347409506110913e-05, -1.458263782560445e-05, -2.330277973233628e-05, -1.137343396145911e-03, -4.844890940691547e-05, -4.844890940691537e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
