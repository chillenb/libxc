
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_r2scan_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.318017596447161e+01, -2.318023606861351e+01, -2.318057789997874e+01, -2.317959507525212e+01, -2.318020700841411e+01, -2.318020700841411e+01, -3.398441071532188e+00, -3.398559282085114e+00, -3.402383785266046e+00, -3.403327655217750e+00, -3.398476206325088e+00, -3.398476206325088e+00, -5.899927837046235e-01, -5.893859966321775e-01, -5.745643988134608e-01, -5.848901585237354e-01, -5.897787405401771e-01, -5.897787405401771e-01, -1.873319714687845e-01, -1.891818480910650e-01, -6.632662162192620e-01, -1.120606951278198e-01, -1.877630718979764e-01, -1.877630718979764e-01, -5.566922823631788e-03, -5.899578501538191e-03, -3.180311170830628e-02, -2.020180530537265e-03, -5.845543459594676e-03, -5.845543459594676e-03, -5.665460034908659e+00, -5.666530624240484e+00, -5.665587013830931e+00, -5.666418556223549e+00, -5.665985387882726e+00, -5.665985387882726e+00, -2.074106919017567e+00, -2.096625179925717e+00, -2.071748697023558e+00, -2.089502807181931e+00, -2.092593775922799e+00, -2.092593775922799e+00, -6.042576462091934e-01, -6.556064539951416e-01, -5.541474380561136e-01, -5.769530440085684e-01, -6.353002822908601e-01, -6.353002822908601e-01, -8.002145807355834e-02, -1.850030951811016e-01, -7.932205449336048e-02, -1.910431900646206e+00, -9.817028947775018e-02, -9.817028947775018e-02, -1.934924914035327e-03, -2.317573022276176e-03, -1.722840001323416e-03, -4.664454084869344e-02, -2.114688547284423e-03, -2.114688547284423e-03, -6.496409256625398e-01, -6.462194426314226e-01, -6.474459129664759e-01, -6.483926761616955e-01, -6.479174970352031e-01, -6.479174970352031e-01, -6.258991029448273e-01, -5.433310959098228e-01, -5.676706854883871e-01, -5.900640325553924e-01, -5.784728261907719e-01, -5.784728261907719e-01, -6.764842121140020e-01, -2.419264627141541e-01, -2.839879023527825e-01, -3.542478775833130e-01, -3.202336135280345e-01, -3.202336135280344e-01, -4.747230337247058e-01, -2.894362829797753e-02, -4.122270794160647e-02, -3.352664149945808e-01, -6.448164106780349e-02, -6.448164106780351e-02, -6.618872681648917e-03, -4.077749618706430e-04, -9.851330577387151e-04, -6.139922351073256e-02, -1.754950090848501e-03, -1.754950090848497e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_r2scan_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.014590083434445e+01, -3.014599499539759e+01, -3.014645910484696e+01, -3.014491785736099e+01, -3.014595010356421e+01, -3.014595010356421e+01, -4.808130391749638e+00, -4.808229860041755e+00, -4.811282584224844e+00, -4.809326607649700e+00, -4.808188166010960e+00, -4.808188166010960e+00, -8.207853382764293e-01, -8.196980482301207e-01, -7.925153846683162e-01, -8.034078830293393e-01, -8.203961162933853e-01, -8.203961162933853e-01, -1.985369803306285e-01, -2.045673447147375e-01, -8.821593270066620e-01, -1.536331517657571e-01, -2.002513171525364e-01, -2.002513171525364e-01, -6.280321480444044e-03, -7.900985022645074e-03, -4.787203548906997e-02, -3.646717933758176e-03, -7.040330192608976e-03, -7.040330192609074e-03, -7.401951300209720e+00, -7.404295392959921e+00, -7.402199084715584e+00, -7.404021333940853e+00, -7.403142611746062e+00, -7.403142611746062e+00, -2.537495442277899e+00, -2.573059223601582e+00, -2.527551973787754e+00, -2.556483259021150e+00, -2.574816906477071e+00, -2.574816906477071e+00, -8.105181158625251e-01, -9.190300490702745e-01, -7.682835199440665e-01, -8.326132178141223e-01, -8.460197146454165e-01, -8.460197146454165e-01, -1.089801562922865e-01, -1.477774425336485e-01, -1.072925349429346e-01, -2.828874190573515e+00, -1.073498689183208e-01, -1.073498689183208e-01, -3.490730544300304e-03, -4.159050549896445e-03, -3.082530941663354e-03, -6.996745245477469e-02, -3.795651469111996e-03, -3.795651469111996e-03, -8.682215841095584e-01, -8.580921000629396e-01, -8.617055097500638e-01, -8.645144413989918e-01, -8.631087067956450e-01, -8.631087067956450e-01, -8.425355709192827e-01, -6.906244366168467e-01, -7.337399287980693e-01, -7.739752856654856e-01, -7.535450737215099e-01, -7.535450737215099e-01, -9.668117519415198e-01, -2.491363495895340e-01, -3.211178744458608e-01, -4.636502086370221e-01, -3.899135038135402e-01, -3.899135038135403e-01, -6.083041599998665e-01, -4.092163225101456e-02, -6.118941968102477e-02, -4.518802313217892e-01, -8.605950882488896e-02, -8.605950882488905e-02, -1.134084699688558e-02, -7.662351542370924e-04, -1.797465236257238e-03, -8.335345313328262e-02, -3.160656638008848e-03, -3.160656638008841e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_r2scan_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.296845829259520e-09, -6.296792872256636e-09, -6.296302957832325e-09, -6.297160270326800e-09, -6.296820214304031e-09, -6.296820214304031e-09, -1.518521550137448e-05, -1.518676370878280e-05, -1.523020044505731e-05, -1.520747887725949e-05, -1.518536025657260e-05, -1.518536025657260e-05, -4.246620539519017e-03, -4.235847096957059e-03, -3.995786404151465e-03, -4.146467760489787e-03, -4.243042037801044e-03, -4.243042037801044e-03, -1.492046399069100e+00, -1.448926381672335e+00, -1.458375262943459e-03, -2.813276497791179e-01, -1.483543465387583e+00, -1.483543465387583e+00, -3.046387228257277e+02, -1.492326411297230e+02, 4.798764744637832e-01, 3.217447060654345e+02, -2.425326034225733e+02, -2.425326034225622e+02, -1.777414997921197e-06, -1.778106147526955e-06, -1.777387974953732e-06, -1.777930620015140e-06, -1.777898884346021e-06, -1.777898884346021e-06, -1.014150275218885e-04, -9.417442412536740e-05, -9.956002304274388e-05, -9.363894839102824e-05, -9.873902409351861e-05, -9.873902409351861e-05, -1.852173832618707e-02, -1.586753327855190e-02, -2.513946520429446e-02, -2.683510478363564e-02, -1.488358762542707e-02, -1.488358762542707e-02, -6.756812556645498e-01, -1.407307118568621e+00, -8.356517443244126e-01, -2.163357183592123e-04, -2.717703849560378e+00, -2.717703849560378e+00, 3.489305070387207e+02, 2.768841242775698e+02, 7.934983975534138e+02, 8.975146722894930e-01, 4.073677356752329e+02, 4.073677356752328e+02, -1.232572622865736e-02, -1.238764807986028e-02, -1.239195342294370e-02, -1.237264049602558e-02, -1.238484262392292e-02, -1.238484262392293e-02, -1.498017259061909e-02, -1.939525589982852e-02, -1.767653197823777e-02, -1.667968646919105e-02, -1.720481103102917e-02, -1.720481103102917e-02, -1.433743282540009e-02, -4.789744663800869e-01, -2.933174955259262e-01, -1.343794626073301e-01, -1.949710074046321e-01, -1.949710074046321e-01, -4.338199269464126e-02, -3.369271567416572e+00, 1.724315074633705e-01, -1.793769692048629e-01, -1.777146052416925e+00, -1.777146052416908e+00, 6.000631125806085e+01, 3.698229633979965e+03, 1.029251867113049e+03, -1.716998671340400e+00, 6.745628822288987e+02, 6.745628822288999e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_r2scan_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_r2scan_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_r2scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.011906643713934e-03, 1.011905009824467e-03, 1.011868552448457e-03, 1.011893901799285e-03, 1.011906051451224e-03, 1.011906051451224e-03, 9.227328788245325e-03, 9.228609013936103e-03, 9.267092880428339e-03, 9.263879883359765e-03, 9.227558008775063e-03, 9.227558008775063e-03, 1.486137824901563e-02, 1.482705373584513e-02, 1.416027954783638e-02, 1.540137957116764e-02, 1.485052698011528e-02, 1.485052698011528e-02, 1.482275980621511e-01, 1.494014204334345e-01, 3.188750771237483e-03, 1.366859829579122e-02, 1.490055324087247e-01, 1.490055324087247e-01, 6.667867139871144e-03, 4.525211320483031e-03, 3.050402862877767e-03, 2.390557585389521e-06, 6.185120223339910e-03, 6.185120223339706e-03, 4.131104823789125e-03, 4.134020924967370e-03, 4.131233962636041e-03, 4.133510745160473e-03, 4.132822950809720e-03, 4.132822950809720e-03, 1.248561075205550e-02, 1.189101152003352e-02, 1.219071507630999e-02, 1.169847624528353e-02, 1.245168983101342e-02, 1.245168983101342e-02, 5.570214655813838e-02, 5.774181924648109e-02, 6.240740353694837e-02, 6.684015473024207e-02, 5.047633935320807e-02, 5.047633935320807e-02, 1.402587002665533e-02, 1.427797983925692e-01, 1.604375587422444e-02, 2.068142753993495e-02, 6.554558027797698e-02, 6.554558027797698e-02, 1.121875485077024e-05, 5.496605623903066e-06, 4.339054517927625e-05, 1.221887379467215e-03, 3.160184003221239e-06, 3.160184003221226e-06, 4.202832518913623e-02, 4.163459882040998e-02, 4.187871528418033e-02, 4.198476986681896e-02, 4.194172605592125e-02, 4.194172605592125e-02, 4.623729448694108e-02, 4.123694967026618e-02, 4.220297438647442e-02, 4.359879548310083e-02, 4.303676812675070e-02, 4.303676812675069e-02, 5.804028451388856e-02, 9.801771957087556e-02, 9.911433468685166e-02, 9.048478694802728e-02, 9.400107046583488e-02, 9.400107046583488e-02, 6.464189514023271e-02, 6.712569177258124e-03, 3.488573482764121e-03, 9.986023556374084e-02, 1.859572021252540e-02, 1.859572021252527e-02, 1.630634741979891e-05, 2.606545297793714e-07, 3.137232742143830e-05, 1.661241940809703e-02, 2.742425220181454e-06, 2.742425220181451e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
