
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_4_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.116718857893849e+01, -2.116729394268891e+01, -2.116776193773964e+01, -2.116619742967258e+01, -2.116701721345176e+01, -2.116701721345176e+01, -3.086297746393817e+00, -3.086401295773764e+00, -3.089189721447125e+00, -3.088341540057095e+00, -3.088111530635079e+00, -3.627327148356735e+00, -5.541419675921739e-01, -6.771636228684990e-01, -6.551376976050837e-01, -6.624226587985428e-01, -6.608357596246636e-01, -6.608357596246636e-01, -1.721086128124981e-01, -1.750346395247151e-01, -6.355435252181377e-01, -1.279461495044158e-01, -1.446668419846927e-01, -1.446668419846927e-01, -5.794302183066769e-03, -6.098767455160510e-03, -3.367145836585742e-02, -3.346317530741181e-03, -4.204935798015333e-03, -4.204935798015333e-03, -5.546908081402226e+00, -5.548002361564828e+00, -5.546963227494171e+00, -5.280215217596774e+00, -5.547460511709030e+00, -5.547460511709030e+00, -1.695222004223014e+00, -1.715512855554786e+00, -1.680176217175584e+00, -1.698014887009847e+00, -1.713888349874541e+00, -2.041454670613438e+00, -6.200776391457586e-01, -6.783861706648375e-01, -5.687454936111870e-01, -5.965950715030457e-01, -6.312285461529251e-01, -5.668777324281618e-01, -7.561863953848304e-02, -1.700812764634737e-01, -7.005731138066100e-02, -2.034439213040988e+00, -1.039186046607933e-01, -1.039186046607933e-01, -2.253157658006730e-03, -3.271318541028120e-03, -2.501420404063839e-03, -4.736035523612998e-02, -2.629672018682217e-03, -3.013432072766811e-03, -6.279368666431405e-01, -6.246324230945823e-01, -6.120958041991177e-01, -6.267848861444830e-01, -6.263085079355709e-01, -6.263085079355709e-01, -6.109719275657755e-01, -5.178942103641451e-01, -5.464622425766742e-01, -5.733704453578035e-01, -5.598364318366658e-01, -5.147575504739864e-01, -7.103168917306799e-01, -1.781289920640429e-01, -2.645682198123044e-01, -3.004419067140190e-01, -3.087466738910296e-01, -3.087466738910298e-01, -4.045516304199250e-01, -3.222597962698510e-02, -4.395805728711459e-02, -3.503734860133649e-01, -6.002091864223418e-02, -6.979531277858221e-02, -8.177633980025420e-03, -8.744380883913197e-04, -1.835491587877557e-03, -6.551758517255475e-02, -2.788367999191050e-03, -2.788367999191048e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_4_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.071402631351042e+01, -3.071411075321018e+01, -3.071451306825686e+01, -3.071325609103740e+01, -3.071391092284299e+01, -3.071391092284299e+01, -4.731597570780418e+00, -4.731781337227188e+00, -4.736690843735269e+00, -4.735139850881293e+00, -4.734814432727084e+00, -4.410085034433293e+00, -7.927853828330705e-01, -7.921357716169070e-01, -7.603524497211749e-01, -7.715702602725432e-01, -7.690835194059237e-01, -7.690835194059237e-01, -1.970389044545399e-01, -2.008443567555634e-01, -8.545735269594280e-01, -1.434813991040187e-01, -1.630600928255076e-01, -1.630600928255078e-01, -6.506707472885558e-03, -6.848577340507226e-03, -3.778472774054323e-02, -3.757832434972004e-03, -4.722001649513011e-03, -4.722001649513011e-03, -7.127118976434001e+00, -7.130260867173820e+00, -7.127289694326133e+00, -7.472352518379119e+00, -7.128698161336502e+00, -7.128698161336502e+00, -2.575340412479568e+00, -2.612933766309807e+00, -2.546601031169037e+00, -2.580402417162633e+00, -2.610100910444638e+00, -2.462427818699131e+00, -7.692663001819977e-01, -8.626478143292061e-01, -6.954399641938559e-01, -7.405739473294448e-01, -7.863888181424530e-01, -8.521334087800753e-01, -9.946119439589282e-02, -1.918369471421906e-01, -9.226901335492360e-02, -2.541035465057854e+00, -1.163840442682785e-01, -1.163840442682785e-01, -3.004161914365156e-03, -3.673613890508419e-03, -2.809020756741005e-03, -6.270873429807317e-02, -3.506076529504813e-03, -3.383999402378035e-03, -8.279455004984041e-01, -8.152212241252164e-01, -8.379052461604291e-01, -8.233440587428317e-01, -8.214879741545624e-01, -8.214879741545624e-01, -8.044054369434737e-01, -6.369761506296479e-01, -6.825883639316895e-01, -7.299322850234904e-01, -7.054545305060844e-01, -7.572588402805283e-01, -8.967663138460287e-01, -2.402039058121799e-01, -3.073515037086663e-01, -4.557728212580600e-01, -3.659114587529937e-01, -3.659114587529941e-01, -6.206503354795808e-01, -3.616459966912131e-02, -4.930810015709384e-02, -4.272621999302263e-01, -7.907986697234835e-02, -7.816440738321546e-02, -9.182955573820907e-03, -9.819810261502077e-04, -2.061221037597758e-03, -7.338263418857352e-02, -3.131257912910598e-03, -3.131257912910588e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_4_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-9.100122163161551e-09, -9.100075064788001e-09, -9.099812441364388e-09, -9.100517868481350e-09, -9.100155766947284e-09, -9.100155766947284e-09, -8.427958219702787e-06, -8.429383765324452e-06, -8.466354837540910e-06, -8.448355214229705e-06, -8.453797984051881e-06, -1.200322671351917e-05, -3.045808340916104e-03, -5.260716924707898e-03, -5.126802042955566e-03, -5.280986826059003e-03, -5.243230418600446e-03, -5.243230418600446e-03, -7.758260361913006e-01, -7.711305177187270e-01, -8.194000550758781e-04, -8.617237713945828e-01, -8.440348243267577e-01, -8.440348243267579e-01, -4.764639560811832e+02, -4.390941472881182e+02, -1.021813812435254e+01, -1.222608554419405e+03, -9.138281367675969e+02, -9.138281367675969e+02, -3.051269264360240e-06, -3.049482769031192e-06, -3.051184095809122e-06, -2.731450952300383e-06, -3.050366876888927e-06, -3.050366876888927e-06, -7.189954081433289e-05, -7.221258824664580e-05, -7.148655901840330e-05, -7.185823183176124e-05, -7.227431021899511e-05, -1.069359897865134e-04, -1.733925622060471e-02, -1.344298266754754e-02, -2.134388707460370e-02, -2.032054984657321e-02, -1.659917319530956e-02, -1.320166381582307e-02, -4.250533340585665e-01, -4.602384604373438e-01, -4.859867601226259e-01, -1.560924003448450e-04, -1.459890730834891e+00, -1.459890730834892e+00, -3.660852151026714e+02, -1.202773478377673e+03, -5.850696805302327e+03, -1.047278279929299e+00, -5.354811502533615e+02, -2.497280794950667e+03, -1.851709881460678e-02, -1.903713702722131e-02, -1.791781552265929e-02, -1.871129806454043e-02, -1.878753720786168e-02, -1.878753720786168e-02, -2.068770109269658e-02, -3.309026314420969e-02, -2.999814901197339e-02, -2.640042152334880e-02, -2.828645275395501e-02, -2.360481100503622e-02, -1.098211380525574e-02, -1.393153009575703e-01, -1.966676866434547e-01, -7.100198115873062e-02, -1.540206146170473e-01, -1.540206146170474e-01, -3.009571107213900e-02, -1.122230630453464e+01, -5.736088972551616e+00, -1.433617447936621e-01, -8.591727455705362e-01, -3.105692755418748e+00, -1.654285856013674e+02, -1.862160462046875e+04, -7.157540181116984e+03, -3.650803924731775e+00, -3.482046504447811e+03, -3.482046504447821e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_4_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.460615395224980e-03, 1.460619662990404e-03, 1.460634017924717e-03, 1.460571155887154e-03, 1.460604753225980e-03, 1.460604753225980e-03, 4.635248343101051e-03, 4.636786161551749e-03, 4.677263355006616e-03, 4.660478326700233e-03, 4.662762241319339e-03, 9.599468647760944e-03, 5.147191610370895e-03, 2.965381475647940e-02, 2.634203716011186e-02, 2.797437252832772e-02, 2.759357005241544e-02, 2.759357005241544e-02, 7.269766123863609e-02, 7.596830246122904e-02, 2.914005021040956e-04, 3.287189992481403e-02, 4.682533994362845e-02, 4.682533994362859e-02, 1.657534046197709e-03, 1.781213201979383e-03, 6.984396593093732e-03, 8.192212727272778e-04, 1.214956472948492e-03, 1.214956472948492e-03, 7.064944248613974e-03, 7.059060973539977e-03, 7.064616412131490e-03, 6.269230034402018e-03, 7.061995262679272e-03, 7.061995262679272e-03, 6.070926163677567e-03, 6.445624908424695e-03, 5.775119865236847e-03, 6.112196794575636e-03, 6.425992195395198e-03, 1.562628672424635e-02, 6.404147094245741e-02, 5.906576681507145e-02, 6.445872938033630e-02, 6.668247156705728e-02, 6.358078163343542e-02, 4.486919815591105e-02, -7.444545781160911e-04, 4.151174982761176e-02, -6.328494518263359e-04, 1.981074954701782e-02, 2.972544308430943e-02, 2.972544308430957e-02, -2.805086380776019e-08, 7.529463267654961e-04, 1.637507459002710e-03, -2.727846280336765e-04, -1.767381609811515e-07, 1.221985979334541e-03, 5.711210500288382e-02, 5.973359282202365e-02, 5.627875297699903e-02, 5.808735503836071e-02, 5.847287623267836e-02, 5.847287623267838e-02, 5.904873661881092e-02, 7.375177429787809e-02, 7.376134431277777e-02, 6.975085089914893e-02, 7.225805438287741e-02, 5.674845503794378e-02, 5.689181642018245e-02, 1.443424068569160e-03, 6.650606833043966e-02, 3.301464990267607e-02, 8.091395086408068e-02, 8.091395086408100e-02, 3.764406420799860e-02, 6.724000642278869e-03, 8.730813045692672e-03, 1.022431936283119e-01, -6.889656841565506e-04, 1.901395702144749e-02, 1.617824215349640e-03, 2.226437298476831e-04, 7.914622588798522e-04, 1.847775254706619e-02, 1.349893983024685e-03, 1.349893983024680e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
