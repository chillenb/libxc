
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_4_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.261854139602315e+01, -2.261861363811600e+01, -2.261900616804002e+01, -2.261793356719521e+01, -2.261848538769816e+01, -2.261848538769816e+01, -3.300838331016736e+00, -3.300934314750772e+00, -3.303676303263441e+00, -3.304333804310690e+00, -3.303303415911353e+00, -3.303303415911353e+00, -5.899441452918075e-01, -5.893122547910969e-01, -5.755470914175532e-01, -5.850132913113827e-01, -5.823279859076975e-01, -5.823279859076975e-01, -1.694047721405178e-01, -1.717142950005845e-01, -6.535726392319018e-01, -1.222150562439195e-01, -1.392831430265669e-01, -1.392831430265669e-01, -5.784177964579077e-03, -6.079347693828010e-03, -3.294185004661351e-02, -3.273292899829841e-03, -4.147279192649435e-03, -4.147279192649435e-03, -5.545074642178221e+00, -5.546191392913769e+00, -5.545167982118524e+00, -5.546152097054539e+00, -5.545619403056162e+00, -5.545619403056162e+00, -1.975895780686872e+00, -2.000508309274868e+00, -1.968876689100250e+00, -1.991144509638531e+00, -1.992966380749880e+00, -1.992966380749880e+00, -5.921254538679069e-01, -6.477307598601302e-01, -5.258692615252143e-01, -5.452903558784780e-01, -6.047716870398961e-01, -6.047716870398961e-01, -8.519954871670042e-02, -1.671526237948409e-01, -7.867572447027212e-02, -1.870884419066000e+00, -1.012251198815303e-01, -1.012251198815303e-01, -2.417095773668244e-03, -3.129240511323809e-03, -2.439723689842653e-03, -5.294005309873790e-02, -2.894808819540743e-03, -2.894808819540743e-03, -6.242063090745195e-01, -6.209742684520611e-01, -6.221409508702233e-01, -6.230768587309780e-01, -6.226092307824456e-01, -6.226092307824456e-01, -6.038044531973399e-01, -5.140470030016974e-01, -5.412768377007371e-01, -5.670775300204050e-01, -5.537453888948164e-01, -5.537453888948164e-01, -6.703184490223509e-01, -2.146507949228972e-01, -2.575792680042161e-01, -3.371604506506770e-01, -2.966994627740744e-01, -2.966994627740743e-01, -4.556720601681229e-01, -3.186514524123853e-02, -4.280614384583802e-02, -3.305230726588655e-01, -6.782674433405683e-02, -6.782674433405685e-02, -7.808879367920751e-03, -7.891161697010416e-04, -1.812679153745044e-03, -6.432616320992947e-02, -2.703464024290595e-03, -2.703464024290593e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_4_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.898216449988004e+01, -2.898227598382806e+01, -2.898270859737145e+01, -2.898104908572688e+01, -2.898192762954125e+01, -2.898192762954125e+01, -4.649332141173397e+00, -4.649462726197872e+00, -4.652887952974934e+00, -4.651122126571607e+00, -4.651167669331532e+00, -4.651167669331532e+00, -8.055370437919123e-01, -8.038945971810403e-01, -7.667602839777302e-01, -7.810092715385485e-01, -7.777374368492552e-01, -7.777374368492552e-01, -1.975285428999718e-01, -2.014699614824245e-01, -8.683873066113060e-01, -1.443683534802240e-01, -1.637047088498551e-01, -1.637047088498551e-01, -6.511652112004400e-03, -6.858036626500479e-03, -3.810841465825733e-02, -3.792367727361700e-03, -4.749638759037891e-03, -4.749638759037900e-03, -7.129704679392201e+00, -7.132815250253309e+00, -7.129821585158299e+00, -7.132568714013089e+00, -7.131294855474967e+00, -7.131294855474967e+00, -2.473007640843806e+00, -2.496544118215936e+00, -2.447668530301655e+00, -2.468297269529905e+00, -2.498508931879801e+00, -2.498508931879801e+00, -8.006239610775746e-01, -9.017489694754752e-01, -7.324577504901814e-01, -7.934763294655207e-01, -8.173649291205067e-01, -8.173649291205067e-01, -9.960739082435784e-02, -1.922681556124285e-01, -9.217522838173364e-02, -2.720674353325991e+00, -1.169838850222107e-01, -1.169838850222107e-01, -2.970993495422699e-03, -3.738121028464987e-03, -2.838039616742047e-03, -6.199864985387209e-02, -3.438276418230215e-03, -3.438276418230214e-03, -8.330140625404326e-01, -8.202901586083841e-01, -8.247257704564720e-01, -8.284246541746343e-01, -8.265716912560066e-01, -8.265716912560067e-01, -8.140500671801807e-01, -6.411708090147880e-01, -6.891595761402136e-01, -7.385363136866282e-01, -7.135313695767297e-01, -7.135313695767296e-01, -9.456664340886993e-01, -2.486174509022221e-01, -3.092071159593292e-01, -4.462603440249671e-01, -3.714368015121552e-01, -3.714368015121550e-01, -5.923771998450300e-01, -3.632881974282826e-02, -4.979407108377515e-02, -4.443398884322142e-01, -7.880959138650266e-02, -7.880959138650270e-02, -9.349260385841241e-03, -1.015497921838381e-03, -2.072190688554172e-03, -7.379789752877759e-02, -3.170774609085606e-03, -3.170774609085607e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_4_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.052033163206425e-08, -1.052023861683137e-08, -1.051983225717989e-08, -1.052122056596351e-08, -1.052049202884566e-08, -1.052049202884566e-08, -9.903130135540610e-06, -9.904601616170200e-06, -9.943666276838067e-06, -9.933998905397913e-06, -9.935083907433185e-06, -9.935083907433185e-06, -3.770779148262491e-03, -3.767730986130041e-03, -3.714787074813129e-03, -3.915192940279438e-03, -3.856249305923014e-03, -3.856249305923014e-03, -7.478374286315503e-01, -7.379927430565688e-01, -9.661118108265187e-04, -7.431951180257255e-01, -7.584366024558115e-01, -7.584366024558115e-01, -4.731965037297679e+02, -4.335958907737748e+02, -9.342711911331364e+00, -1.114480192543285e+03, -8.637300364973266e+02, -8.637300364973263e+02, -3.049126934014707e-06, -3.047366696126642e-06, -3.049086383259139e-06, -3.047530307860087e-06, -3.048215590405908e-06, -3.048215590405908e-06, -1.024629279777237e-04, -1.025769176585614e-04, -1.033117882950811e-04, -1.035634006791329e-04, -1.021242634867489e-04, -1.021242634867489e-04, -1.581976654334133e-02, -1.217609474217852e-02, -1.825294558848305e-02, -1.686792878682021e-02, -1.523440618601169e-02, -1.523440618601169e-02, -1.300200122036785e+00, -4.392165782571185e-01, -1.521769585061018e+00, -1.309623639094791e-04, -1.339051014620530e+00, -1.339051014620530e+00, -1.225758546950367e+03, -9.823094584058065e+02, -5.263087834692380e+03, -3.689478549860675e+00, -2.085870564716813e+03, -2.085870564716814e+03, -1.826177007064861e-02, -1.878731352624507e-02, -1.861018291777682e-02, -1.845769648581228e-02, -1.853461909894115e-02, -1.853461909894115e-02, -2.012600635736083e-02, -3.262485936831455e-02, -2.944113535043124e-02, -2.580084250738531e-02, -2.766910397154330e-02, -2.766910397154330e-02, -9.716077634023577e-03, -2.750572538449907e-01, -1.856461256279371e-01, -9.390122439917620e-02, -1.421545519672194e-01, -1.421545519672194e-01, -3.931256766708474e-02, -1.073263681546656e+01, -5.146237841661934e+00, -1.278840010301506e-01, -2.788900227736887e+00, -2.788900227736888e+00, -1.338758805414271e+02, -9.614548366592442e+03, -6.802448768302894e+03, -3.411845581180894e+00, -3.045816780697617e+03, -3.045816780697625e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_4_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.746868814765914e-03, 1.746862228599131e-03, 1.746843555990565e-03, 1.746941838657918e-03, 1.746888830072898e-03, 1.746888830072898e-03, 6.518322472897965e-03, 6.519812727174381e-03, 6.560325626654219e-03, 6.556625424034006e-03, 6.552129732056163e-03, 6.552129732056163e-03, 1.189836565810849e-02, 1.183405113301444e-02, 1.064616326216903e-02, 1.230653982721568e-02, 1.180348153786916e-02, 1.180348153786916e-02, 6.627774897686128e-02, 6.801734047950984e-02, 1.987723920544085e-03, 2.252350156378161e-02, 3.554006856648731e-02, 3.554006856648726e-02, 1.632449228037027e-03, 1.732122157789149e-03, 5.702063264126605e-03, 6.657017378434612e-04, 1.071387561998643e-03, 1.071387561998644e-03, 7.059323186937797e-03, 7.053525430778056e-03, 7.059113355005864e-03, 7.053992694613852e-03, 7.056359177782696e-03, 7.056359177782696e-03, 1.392806941144623e-02, 1.437180532250923e-02, 1.390555624865371e-02, 1.432808059742816e-02, 1.418572535220923e-02, 1.418572535220923e-02, 5.515180768170127e-02, 5.229463264231595e-02, 4.787197209818039e-02, 4.947913917695392e-02, 5.562880138701383e-02, 5.562880138701383e-02, 1.343194852202312e-02, 3.689004553944929e-02, 1.230343627832048e-02, 1.525169985815999e-02, 2.403407367831410e-02, 2.403407367831411e-02, 2.437423945509525e-04, 4.750617287443053e-04, 1.291163354593674e-03, 9.092224116436275e-03, 8.124075370831427e-04, 8.124075370831474e-04, 5.647292634720061e-02, 5.900199696093070e-02, 5.814961535777750e-02, 5.741355198848751e-02, 5.778516883516654e-02, 5.778516883516654e-02, 5.773044037534651e-02, 7.191309398055275e-02, 7.168025056602760e-02, 6.778246020072555e-02, 7.007244487268942e-02, 7.007244487268942e-02, 4.834897571920460e-02, 4.966711375088987e-02, 5.765818832206457e-02, 6.494844624070764e-02, 6.709001952699482e-02, 6.709001952699484e-02, 6.474305050416576e-02, 6.082408066143958e-03, 6.812315080225102e-03, 8.186466137865457e-02, 1.473564641138084e-02, 1.473564641138083e-02, 9.988165045575592e-04, 4.436880809676205e-05, 7.066215621449526e-04, 1.577038041942809e-02, 9.983812762718132e-04, 9.983812762718067e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
