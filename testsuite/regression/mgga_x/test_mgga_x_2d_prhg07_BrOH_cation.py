
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_2d_prhg07_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_2d_prhg07", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.636127247792372e+02, -1.636134061978104e+02, -1.636166627972733e+02, -1.636065201397885e+02, -1.636118023876211e+02, -1.636118023876211e+02, -1.076096344054003e+01, -1.076097125183810e+01, -1.076153673328587e+01, -1.076357366448279e+01, -1.076135708558681e+01, -1.076135708558681e+01, -9.622520227062743e-01, -9.618270171565406e-01, -9.534620478372517e-01, -9.612576871665262e-01, -9.608769134892237e-01, -9.608769134892237e-01, -1.899655978300282e-01, -1.904480334649623e-01, -1.200554392957771e+00, -1.651347902582374e-01, -1.882396194465515e-01, -1.882396194465514e-01, -4.827471368858069e-02, -4.842750693162487e-02, -8.885239434101738e-02, -4.342099526993289e-02, -4.516752521642368e-02, -4.516752521642369e-02, -2.195215205448689e+01, -2.063076493872728e+01, -1.976674052969318e+01, -2.358865347860889e+01, -1.873099768464145e+01, -2.000023495124766e+01, -4.555157146802028e+00, -5.035044860865916e+00, -4.730330891375512e+00, -4.769173346232116e+00, -4.796259017245990e+00, -4.651709257531152e+00, -1.341557739708190e+00, -1.147702172759774e+00, -1.201522904120214e+00, -7.103092831172970e-01, -8.011342967612466e-01, -8.406618176929161e-01, -4.589397469250651e-02, -3.496405006783295e-01, -4.092820248203608e-02, -4.445742070221039e+00, -1.307997437381687e-01, -1.121773887093481e-01, -8.894301845478518e-02, -2.069175066983555e+00, -2.215457980839670e-04, -2.252450730967533e-02, -5.074972344625138e-02, -3.139015374341489e-04, -2.797747576013705e+01, -7.467343671848238e-01, -7.490094797187863e-01, -4.533302390272215e+00, -7.499460069281696e-01, -8.074383570648573e+01, -7.227865226238601e-01, -6.143736911798168e-01, -1.043203700772246e+00, -6.577391402601347e-01, -7.114049901952353e-01, -1.327985388640755e+00, -1.595635290774155e+00, -1.706988800704912e-01, -2.246680083110437e-01, -3.410370673521061e-01, -4.116658722488418e-01, -3.731678573444681e-01, -5.562753425456878e-01, -1.020638794851852e-02, -1.048277908867486e-01, -3.503155586353972e-01, -3.244330695442148e-02, -9.997307336636305e-02, -1.307287763771467e-03, -4.566553424084662e-05, -1.393163169063375e-04, -2.945582805736861e-02, -2.759805619303063e-04, -2.759805619303059e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_2d_prhg07_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_2d_prhg07", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.464616750885121e+02, -2.464612011747195e+02, -2.464628803566707e+02, -2.464620767507904e+02, -2.464669528961429e+02, -2.464678517941611e+02, -2.464533359056606e+02, -2.464504975015237e+02, -2.464623828628868e+02, -2.464575939436663e+02, -2.464623828628868e+02, -2.464575939436663e+02, -1.606765823490205e+01, -1.606757445329869e+01, -1.606776520687801e+01, -1.606764993498825e+01, -1.607004403568927e+01, -1.607078592518362e+01, -1.607002265679766e+01, -1.607063724205818e+01, -1.606348824554725e+01, -1.607313539670213e+01, -1.606348824554725e+01, -1.607313539670213e+01, -1.287844303715537e+00, -1.297528053878002e+00, -1.284174947340567e+00, -1.296018543346551e+00, -1.237418631507090e+00, -1.222431172412630e+00, -1.242390070397548e+00, -1.247127028192089e+00, -1.315944966993662e+00, -1.169940843949751e+00, -1.315944966993662e+00, -1.169940843949751e+00, -1.710966988845564e-01, -1.779421859687242e-01, -1.730238046031913e-01, -1.811150842884584e-01, -1.599348872482378e+00, -1.689694575037327e+00, -1.307308882012580e-01, -1.320058078437464e-01, -1.798750580196229e-01, -9.835677561491814e-02, -1.798750580196228e-01, -9.835677561491811e-02, -1.916957222195082e-02, -1.966102670458103e-02, -1.939838562647141e-02, -1.994332325678220e-02, -4.531551570911988e-02, -4.668126919315366e-02, -1.643464351877142e-02, -1.644013477592644e-02, -1.879742257888129e-02, -1.459066514797651e-02, -1.879742257888129e-02, -1.459066514797651e-02, -2.957139587701852e+01, -2.946260801538572e+01, -2.938418460264221e+01, -2.937375221596769e+01, -2.965553534777777e+01, -2.964468226865794e+01, -3.001924909134139e+01, -3.006047931431777e+01, -3.100173551760652e+01, -3.095602235657870e+01, -2.947654904107196e+01, -2.948706832591780e+01, -6.832994657661631e+00, -6.832476743487103e+00, -6.736598160181215e+00, -6.733725382447695e+00, -6.534566017144519e+00, -6.554470238198830e+00, -6.600828266667912e+00, -6.622354787479477e+00, -6.702701417599941e+00, -6.652138411180554e+00, -6.695240397750593e+00, -6.641338261676961e+00, -1.362529423285292e+00, -1.411423956998848e+00, -1.347536773950373e+00, -1.350200203503369e+00, -1.237944633382336e+00, -1.239618694684844e+00, -1.014379989348947e+00, -1.065679579876640e+00, -1.152475169666584e+00, -1.065287674612400e+00, -1.161615644956550e+00, -1.075386070080673e+00, -6.834402061357539e-02, -6.932395366708392e-02, -3.012129513063867e-01, -3.018357691349820e-01, -5.880299820359677e-02, -6.360537119272679e-02, -6.610069315331241e+00, -6.605647539141625e+00, -8.828064268369809e-02, -9.343484764173612e-02, -6.337966998139581e-02, -6.416372145258240e-02, -5.236704816557021e-02, -5.149737554865946e-02, -1.234957325589139e+00, -1.209983892076288e+00, -3.168623821024740e-04, -3.453316138320918e-04, -3.363000912362585e-02, -3.394065654289204e-02, -3.203661733430409e-02, -2.565079433098718e-02, -3.270628792261497e-04, -5.263674441282313e-04, -1.899388329340734e+01, -1.911890971829033e+01, -1.116808685926959e+00, -1.123356142707998e+00, -1.120212490289713e+00, -1.126777586331306e+00, -3.650705325978847e+00, -3.538144037870961e+00, -1.121628661473092e+00, -1.128171306293505e+00, -5.235580696877389e+01, -5.251469163814591e+01, -1.081482989918677e+00, -1.086850009412204e+00, -8.015595423347786e-01, -8.065534741642885e-01, -1.095320438253951e+00, -1.104530240372297e+00, -9.839977270303459e-01, -9.891923432669611e-01, -9.285385633483314e-01, -9.337005205652321e-01, -1.303148951486662e+00, -1.305965736882580e+00, -1.669243834200460e+00, -1.666085992953708e+00, -2.549300647060374e-01, -2.571473738484781e-01, -3.344422633286575e-01, -3.394862624929625e-01, -5.094226470367142e-01, -5.136535618608198e-01, -4.391738850415084e-01, -4.400233352856977e-01, -4.095784532358516e-01, -4.107680783634814e-01, -7.084040455878527e-01, -7.168903951864914e-01, -1.523048946152948e-02, -1.538707283832530e-02, -5.674824922335189e-02, -6.350151815656048e-02, -4.438270385074358e-01, -4.525475855378912e-01, -4.652650944238836e-02, -5.048146441620928e-02, -5.903182037909013e-02, -5.598607675214018e-02, -1.905852541185375e-03, -2.010429651179167e-03, -6.838061634716748e-05, -6.861518311849704e-05, -1.984748763632817e-04, -2.177014022932529e-04, -4.363331974120878e-02, -4.470802015733932e-02, -3.015104049539819e-04, -4.618916529170188e-04, -3.015104049539814e-04, -4.618916529170181e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_2d_prhg07_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_2d_prhg07", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.215310584521604e-09, 0.000000000000000e+00, -3.215329728621980e-09, -3.215264391395902e-09, 0.000000000000000e+00, -3.215296168977622e-09, -3.215105029764625e-09, 0.000000000000000e+00, -3.215071073551105e-09, -3.215626998968933e-09, 0.000000000000000e+00, -3.215736278033332e-09, -3.215283580956958e-09, 0.000000000000000e+00, -3.215461861950358e-09, -3.215283580956958e-09, 0.000000000000000e+00, -3.215461861950358e-09, -1.123350688310440e-05, 0.000000000000000e+00, -1.123560041233754e-05, -1.123353008491105e-05, 0.000000000000000e+00, -1.123580561470519e-05, -1.123595653184284e-05, 0.000000000000000e+00, -1.123635736003175e-05, -1.122390510917336e-05, 0.000000000000000e+00, -1.122479084684820e-05, -1.124102606630082e-05, 0.000000000000000e+00, -1.122602574530263e-05, -1.124102606630082e-05, 0.000000000000000e+00, -1.122602574530263e-05, -1.284652962306702e-02, 0.000000000000000e+00, -1.299698935151558e-02, -1.280875007854014e-02, 0.000000000000000e+00, -1.298654875479062e-02, -1.237975140380671e-02, 0.000000000000000e+00, -1.223892440159895e-02, -1.208277615700330e-02, 0.000000000000000e+00, -1.214725408363096e-02, -1.313875107085629e-02, 0.000000000000000e+00, -1.142281416941543e-02, -1.313875107085629e-02, 0.000000000000000e+00, -1.142281416941543e-02, -1.339935146992078e+00, 0.000000000000000e+00, -1.252614510878892e+00, -1.330834903773562e+00, 0.000000000000000e+00, -1.231494788569049e+00, -6.815880078461088e-03, 0.000000000000000e+00, -6.898674497080492e-03, -2.307406128445254e+00, 0.000000000000000e+00, -2.236446306664265e+00, -1.176827768667878e+00, 0.000000000000000e+00, -5.040451230255491e+00, -1.176827768667878e+00, 0.000000000000000e+00, -5.040451230255486e+00, -1.089780682717560e+04, 0.000000000000000e+00, -9.163406336875907e+03, -9.679932532330396e+03, 0.000000000000000e+00, -7.969466474893946e+03, -7.543242260934478e+01, 0.000000000000000e+00, -6.541923122402558e+01, -4.428819737542431e+04, 0.000000000000000e+00, -4.606956300690540e+04, -1.482468785995649e+04, 0.000000000000000e+00, -8.810539741830948e+04, -1.482468785995650e+04, 0.000000000000000e+00, -8.810539741830948e+04, -9.277794292714128e-07, 0.000000000000000e+00, -1.018354861045648e-06, -1.341765591046822e-06, 0.000000000000000e+00, -1.346776503874202e-06, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -7.223811836336126e-07, 0.000000000000000e+00, -7.072332132998871e-07, -3.353030433363855e-06, 0.000000000000000e+00, -3.322039321853087e-06, -1.621300381801038e-06, 0.000000000000000e+00, -1.662391256046471e-06, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -8.270719180317438e-05, 0.000000000000000e+00, -8.281132204250340e-05, -1.106732471030478e-04, 0.000000000000000e+00, -1.103403716791807e-04, -1.087597567560783e-04, 0.000000000000000e+00, -1.078008400964728e-04, -1.067040645820354e-04, 0.000000000000000e+00, -1.077711367979908e-04, -1.316244971705381e-04, 0.000000000000000e+00, -1.298665533074281e-04, -4.148331508106126e-03, 0.000000000000000e+00, -3.601711225553372e-03, -5.836649375359835e-03, 0.000000000000000e+00, -5.775314286730501e-03, -5.275155604940147e-03, 0.000000000000000e+00, -5.507846453137288e-03, -4.033469579148015e-02, 0.000000000000000e+00, -3.518325803148436e-02, -2.100058300187511e-02, 0.000000000000000e+00, -2.551889906579756e-02, -1.621684202053212e-02, 0.000000000000000e+00, -1.973586275611795e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -3.226260890272618e-01, 0.000000000000000e+00, -3.197614664431419e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.538143935763881e-04, 0.000000000000000e+00, -1.541313650515906e-04, -5.004688160155520e+00, 0.000000000000000e+00, -4.693954342056518e+00, -6.839398024992926e+00, 0.000000000000000e+00, -6.907596317673472e+00, -3.650614834277606e+04, 0.000000000000000e+00, -3.348508661132630e+04, -3.992194927904620e+02, 0.000000000000000e+00, -3.929922238395741e+02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -6.848334620761336e+04, 0.000000000000000e+00, -3.749284280955688e+04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.246915472967161e-05, 0.000000000000000e+00, -2.205719487753298e-05, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -3.411218654030328e-04, 0.000000000000000e+00, -3.602140554404243e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -5.355118753294781e-06, 0.000000000000000e+00, -5.282676364740350e-06, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -4.782156008513764e-02, 0.000000000000000e+00, -4.780706494778931e-02, -8.097010725605560e-03, 0.000000000000000e+00, -7.884889946884690e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.839545516328126e-02, 0.000000000000000e+00, -2.805494570820698e-02, -4.386554505194274e-03, 0.000000000000000e+00, -4.363080016568158e-03, -2.257202829577488e-03, 0.000000000000000e+00, -2.281116631047358e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.258768635484973e-01, 0.000000000000000e+00, -1.250190360894093e-01, -1.700056815030860e-01, 0.000000000000000e+00, -1.681376140737325e-01, -6.197098461682338e-02, 0.000000000000000e+00, -6.037938664602546e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -3.380422938524385e+01, 0.000000000000000e+00, -2.859221318261418e+01, -2.484518481832084e-01, 0.000000000000000e+00, -2.506713581882409e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.461213749222718e+01, 0.000000000000000e+00, -1.461712415674752e+01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_2d_prhg07_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_2d_prhg07", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([-6.216239556907770e-05, -6.216252554417775e-05, -6.216210498781867e-05, -6.216231441554162e-05, -6.216107026885339e-05, -6.216086143741411e-05, -6.216435432922846e-05, -6.216504630767932e-05, -6.216222683275624e-05, -6.216329669368150e-05, -6.216222683275624e-05, -6.216329669368150e-05, -9.372609015551726e-04, -9.373972031334513e-04, -9.372716281952419e-04, -9.374176709492953e-04, -9.376324471828775e-04, -9.377238092118265e-04, -9.368061177791538e-04, -9.369194923004834e-04, -9.374178488930178e-04, -9.372181781966887e-04, -9.374178488930178e-04, -9.372181781966887e-04, -7.645442221850255e-03, -7.827332015865648e-03, -7.587422696905327e-03, -7.805697373147732e-03, -6.884686289912776e-03, -6.666670123290863e-03, -6.795432181752894e-03, -6.876190875020944e-03, -8.096163060636648e-03, -5.783995917165728e-03, -8.096163060636648e-03, -5.783995917165728e-03, -1.302085654717220e-02, -1.364874714411722e-02, -1.341640642174583e-02, -1.414171988039131e-02, -6.148966428874769e-03, -6.872657214771719e-03, -1.019214067138987e-02, -1.029336400550417e-02, -1.301944682507480e-02, -8.610217744756048e-03, -1.301944682507480e-02, -8.610217744756043e-03, -4.307772010958227e-03, -4.346125986758861e-03, -4.402720851360244e-03, -4.456082756084838e-03, -5.898392985699223e-03, -6.024082393819032e-03, -3.802789092662716e-03, -3.761279024684585e-03, -4.160383408576906e-03, -4.556499024431263e-03, -4.160383408576909e-03, -4.556499024431265e-03, -2.598889271120956e-04, -2.850559101829607e-04, -3.760650500819228e-04, -3.771911478258440e-04, 0.000000000000000e+00, 0.000000000000000e+00, -2.024571030069397e-04, -1.980688075092787e-04, -9.395159267083238e-04, -9.301512444913446e-04, -4.542868193272574e-04, -4.654596607184702e-04, 0.000000000000000e+00, 0.000000000000000e+00, -1.257397119595980e-03, -1.257952630456579e-03, -1.615598501379940e-03, -1.619111439666482e-03, -1.618382188875547e-03, -1.612799770850260e-03, -1.628913297293302e-03, -1.623682614056532e-03, -2.009341392293421e-03, -1.956572705992352e-03, -1.668903964024992e-03, -1.437516454721773e-03, -2.996498783972831e-03, -2.969049737782903e-03, -1.584032441984330e-03, -1.843104710141915e-03, -1.367841455130236e-02, -1.316072350807046e-02, -9.504515963033561e-03, -9.907328348672972e-03, -7.339474044143375e-03, -7.662151571078974e-03, 0.000000000000000e+00, 0.000000000000000e+00, -3.315493477606183e-03, -3.335498718769342e-03, 0.000000000000000e+00, 0.000000000000000e+00, -2.160079151875926e-03, -2.161614465397550e-03, -1.115489937140159e-02, -1.243737076273035e-02, -1.524426583401513e-02, -1.830276355959098e-02, -1.323406515795312e-03, -1.362476754051612e-03, -3.053442669038541e-05, -3.144368552258935e-05, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.333424752653788e-03, -3.308816847001564e-03, 0.000000000000000e+00, 0.000000000000000e+00, -9.082621583329740e-06, -9.019896843057839e-06, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.370415918589287e-04, -1.463971890559961e-04, 0.000000000000000e+00, 0.000000000000000e+00, -2.145920455960146e-06, -2.141659486718860e-06, 0.000000000000000e+00, 0.000000000000000e+00, -1.125255059574737e-02, -1.139597864684346e-02, -2.187367719311938e-03, -2.158549887892876e-03, 0.000000000000000e+00, 0.000000000000000e+00, -8.193819058629856e-03, -8.186114811864778e-03, -1.265788264343713e-03, -1.273097239982594e-03, -1.332897704899322e-03, -1.353614729291832e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -6.904060205182098e-03, -6.849756112716457e-03, -9.324425690572664e-03, -9.212210282564106e-03, -1.133489991455340e-02, -1.127350719656199e-02, 0.000000000000000e+00, 0.000000000000000e+00, -6.079141791602234e-03, -5.675691299193434e-03, -1.813610239011216e-02, -1.913843414195329e-02, 0.000000000000000e+00, 0.000000000000000e+00, -1.007537014599015e-02, -1.186512020107378e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_2d_prhg07_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_2d_prhg07", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.486495822763108e-04, 2.486501021767110e-04, 2.486484199512747e-04, 2.486492576621665e-04, 2.486442810754136e-04, 2.486434457496564e-04, 2.486574173169138e-04, 2.486601852307173e-04, 2.486489073310250e-04, 2.486531867747260e-04, 2.486489073310250e-04, 2.486531867747260e-04, 3.749043606220690e-03, 3.749588812533805e-03, 3.749086512780967e-03, 3.749670683797181e-03, 3.750529788731510e-03, 3.750895236847306e-03, 3.747224471116615e-03, 3.747677969201934e-03, 3.749671395572071e-03, 3.748872712786755e-03, 3.749671395572071e-03, 3.748872712786755e-03, 3.058176888740102e-02, 3.130932806346259e-02, 3.034969078762131e-02, 3.122278949259093e-02, 2.753874515965110e-02, 2.666668049316345e-02, 2.718172872701157e-02, 2.750476350008377e-02, 3.238465224254659e-02, 2.313598366866291e-02, 3.238465224254659e-02, 2.313598366866291e-02, 5.208342618868880e-02, 5.459498857646890e-02, 5.366562568698333e-02, 5.656687952156526e-02, 2.459586571549907e-02, 2.749062885908688e-02, 4.076856268555950e-02, 4.117345602201670e-02, 5.207778730029921e-02, 3.444087097902419e-02, 5.207778730029919e-02, 3.444087097902417e-02, 1.723108804383291e-02, 1.738450394703544e-02, 1.761088340544098e-02, 1.782433102433935e-02, 2.359357194279689e-02, 2.409632957527613e-02, 1.521115637065086e-02, 1.504511609873834e-02, 1.664153363430762e-02, 1.822599609772505e-02, 1.664153363430764e-02, 1.822599609772506e-02, 1.039555708448383e-03, 1.140223640731843e-03, 1.504260200327691e-03, 1.508764591303376e-03, 0.000000000000000e+00, 0.000000000000000e+00, 8.098284120277590e-04, 7.922752300371148e-04, 3.758063706833295e-03, 3.720604977965379e-03, 1.817147277309030e-03, 1.861838642873881e-03, 0.000000000000000e+00, 0.000000000000000e+00, 5.029588478383918e-03, 5.031810521826318e-03, 6.462394005519758e-03, 6.476445758665929e-03, 6.473528755502186e-03, 6.451199083401040e-03, 6.515653189173206e-03, 6.494730456226126e-03, 8.037365569173685e-03, 7.826290823969408e-03, 6.675615856099966e-03, 5.750065818887091e-03, 1.198599513589133e-02, 1.187619895113161e-02, 6.336129767937322e-03, 7.372418840567662e-03, 5.471365820520943e-02, 5.264289403228184e-02, 3.801806385213424e-02, 3.962931339469189e-02, 2.935789617657350e-02, 3.064860628431590e-02, 0.000000000000000e+00, 0.000000000000000e+00, 1.326197391042473e-02, 1.334199487507737e-02, 0.000000000000000e+00, 0.000000000000000e+00, 8.640316607503706e-03, 8.646457861590200e-03, 4.461959748560635e-02, 4.974948305092141e-02, 6.097706333606054e-02, 7.321105423836392e-02, 5.293626063181249e-03, 5.449907016206447e-03, 1.221377067615416e-04, 1.257747420903574e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 9.333699010615150e-03, 1.323526738800625e-02, 0.000000000000000e+00, 0.000000000000000e+00, 3.633048633331896e-05, 3.607958737223136e-05, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 5.481663674357147e-04, 5.855887562239843e-04, 0.000000000000000e+00, 0.000000000000000e+00, 8.583681823840584e-06, 8.566637946875441e-06, 0.000000000000000e+00, 0.000000000000000e+00, 4.501020238298948e-02, 4.558391458737385e-02, 8.749470877247751e-03, 8.634199551571506e-03, 0.000000000000000e+00, 0.000000000000000e+00, 3.277527623451942e-02, 3.274445924745911e-02, 5.063153057374850e-03, 5.092388959930375e-03, 5.331590819597287e-03, 5.414458917167329e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 2.761624082072839e-02, 2.739902445086583e-02, 3.729770276229066e-02, 3.684884113025642e-02, 4.533959965821361e-02, 4.509402878624797e-02, 0.000000000000000e+00, 0.000000000000000e+00, 2.431656716640894e-02, 2.270276519677374e-02, 7.254440956044862e-02, 7.655373656781315e-02, 0.000000000000000e+00, 0.000000000000000e+00, 4.030148058396059e-02, 4.746048080429510e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
