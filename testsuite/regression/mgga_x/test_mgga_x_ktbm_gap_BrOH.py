
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_gap_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_gap", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.190786332204791e+01, -2.190796260002648e+01, -2.190844038529950e+01, -2.190681866035261e+01, -2.190791532536466e+01, -2.190791532536466e+01, -2.909676969185886e+00, -2.909903502869758e+00, -2.916815112713846e+00, -2.914373061917076e+00, -2.909753695379379e+00, -3.979787668160947e+00, -4.109017845638878e-01, -6.077624073488876e-01, -5.619279656675636e-01, -5.793499092193450e-01, -6.089528393631659e-01, -6.089528393631659e-01, -1.572794967333522e-01, -1.620524921234264e-01, -4.259126791297588e-01, -8.318742938958125e-02, -1.586602680180565e-01, -1.586602680180565e-01, -5.440317844894774e-03, -5.699522912248512e-03, -2.362303149530339e-02, -2.605484590560766e-03, -5.640146336189466e-03, -5.640146336189466e-03, -6.071126114730189e+00, -6.069500417472420e+00, -6.070941366275017e+00, -5.456922011390311e+00, -6.070319451005131e+00, -6.070319451005131e+00, -1.515397307555144e+00, -1.549216082945139e+00, -1.500899342450281e+00, -1.527606899963225e+00, -1.557326580257930e+00, -2.180489250036298e+00, -6.968940735922957e-01, -7.511489256946804e-01, -6.484013675787834e-01, -6.924139717050520e-01, -7.266097861887175e-01, -5.880208500488172e-01, -4.046826199643001e-02, -1.337800646050936e-01, -4.006611368980643e-02, -2.311862170356376e+00, -6.945771886471398e-02, -6.945771886471398e-02, -1.877516225580643e-03, -2.872774821991963e-03, -2.153248881152634e-03, -2.446554094647212e-02, -1.955083731954833e-03, -2.617468183139254e-03, -6.581440184419781e-01, -6.694126780205929e-01, -6.367068861453575e-01, -6.624551427172538e-01, -6.640393321770289e-01, -6.640393321770289e-01, -6.423743548086412e-01, -6.015475378556404e-01, -6.326917444178789e-01, -6.460045516988089e-01, -6.411134540819846e-01, -5.432352076368455e-01, -7.940026902067795e-01, -1.281247808176265e-01, -2.562182969574013e-01, -2.745015135844080e-01, -3.212358959126996e-01, -3.212358959126995e-01, -3.871253939817847e-01, -2.179681760709703e-02, -2.990288188073090e-02, -3.815287396685833e-01, -3.261529175299972e-02, -4.545711664749239e-02, -6.374234857570211e-03, -7.862513870982039e-04, -1.493765811130852e-03, -4.335669448810475e-02, -2.224393914732743e-03, -2.224393914732739e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_gap_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_gap", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.205889331063710e+01, -3.205890806736631e+01, -3.205903705016541e+01, -3.205878767318207e+01, -3.205890064833280e+01, -3.205890064833280e+01, -5.472883639436700e+00, -5.473017061007394e+00, -5.477159843893901e+00, -5.476008318201088e+00, -5.472946723589283e+00, -5.527034258493506e+00, -8.193667248600306e-01, -1.008918550818880e+00, -9.334907134341087e-01, -9.632601817168659e-01, -1.010747592726744e+00, -1.010747592726744e+00, -2.611622310077290e-01, -2.693833553694084e-01, -7.924831275867152e-01, -1.175053314383202e-01, -2.635625886289607e-01, -2.635625886289607e-01, -6.570934946635895e-03, -6.885278594439948e-03, -2.910544141454983e-02, -3.141598480271743e-03, -6.813571187201273e-03, -6.813571187201277e-03, -6.903078020438356e+00, -6.905514564582141e+00, -6.903339110731381e+00, -7.636293394915841e+00, -6.904302857824343e+00, -6.904302857824343e+00, -2.974998228568920e+00, -3.020924982877588e+00, -2.954739148867310e+00, -2.992010797274687e+00, -3.031157834784813e+00, -3.207077274626496e+00, -8.354885647067611e-01, -8.375067008781613e-01, -8.404727227704599e-01, -8.016864878957333e-01, -8.356393523571425e-01, -9.375417238558810e-01, -5.745268130097730e-02, -2.097801615275701e-01, -5.712133304885524e-02, -2.650018781865568e+00, -9.664339058948626e-02, -9.664339058948626e-02, -2.503750710447019e-03, -3.464228854405556e-03, -2.596673911081497e-03, -3.332770512670647e-02, -2.607229653970165e-03, -3.156267804417089e-03, -8.331238546403648e-01, -8.111949553283180e-01, -8.563985012701418e-01, -8.246222524919435e-01, -8.215337522371976e-01, -8.215337522371976e-01, -7.998015092909603e-01, -7.355977395071341e-01, -7.164096117780357e-01, -7.228590299336786e-01, -7.156283116857390e-01, -8.113129828496340e-01, -8.899489837687692e-01, -2.444537402503072e-01, -4.238210719124173e-01, -5.366348605032268e-01, -5.066264136653312e-01, -5.066264136653313e-01, -7.173584585868598e-01, -2.675356765155296e-02, -3.719801720844590e-02, -5.233566567422168e-01, -4.583413018519550e-02, -5.925489947317219e-02, -7.696780498345635e-03, -9.478052807033179e-04, -1.800907278917019e-03, -5.650377651300167e-02, -2.682149344091791e-03, -2.682149344091785e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_gap_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_gap", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.236441814368814e-08, -2.236429207588735e-08, -2.236356130381525e-08, -2.236563834643906e-08, -2.236435294677812e-08, -2.236435294677812e-08, -2.125425068518829e-05, -2.125741158227413e-05, -2.134936417694835e-05, -2.130696665994362e-05, -2.125472372658181e-05, -1.824280268940378e-05, -7.619166692613972e-03, -5.117972612287853e-03, -4.584410110947633e-03, -4.895979962828085e-03, -5.132515626151654e-03, -5.132515626151654e-03, -7.155520728789754e-01, -7.291845764136887e-01, -2.294184795627984e-03, -4.238384345859142e-01, -7.188709721772696e-01, -7.188709721772696e-01, -8.174400888297434e+01, -7.430887260555986e+01, -2.991456501153989e+00, -2.090805511179189e+02, -7.760651429621637e+01, -7.760651429621640e+01, -6.596177695062635e-06, -6.596340722863560e-06, -6.596222082659860e-06, -6.615754027825361e-06, -6.596234103435356e-06, -6.596234103435356e-06, -1.808884388556333e-04, -1.817241527960782e-04, -1.802743563529763e-04, -1.810939005607362e-04, -1.822047458361742e-04, -1.496840539439067e-04, -3.256883906211424e-02, -2.900972318653620e-02, -3.412184276828643e-02, -3.659881676760184e-02, -3.068485198566022e-02, -3.204261835508429e-02, -1.535645706602119e+00, -3.082491346989480e-01, -1.720359990952479e+00, -3.018314996348190e-04, -6.940631643527129e-01, -6.940631643527129e-01, -7.996131319787366e+02, -1.933736896836708e+02, -6.826318773402634e+02, -3.713005748304690e+00, -7.448175842662038e+02, -2.584982180506048e+02, -3.934886649963308e-02, -3.988618180565337e-02, -3.963940779682235e-02, -3.957154517926535e-02, -3.964794225677313e-02, -3.964794225677313e-02, -4.473805220624791e-02, -5.548024568369318e-02, -5.541034473818585e-02, -5.280727848224304e-02, -5.441142907132011e-02, -5.547879225951227e-02, -2.288847669414589e-02, -3.795068269037764e-01, -1.954324452671116e-01, -1.782474891810422e-01, -1.832436746293737e-01, -1.832436746293737e-01, -7.656996676007573e-02, -3.307256282639796e+00, -1.810271087657175e+00, -2.282130403603880e-01, -2.989599271757069e+00, -1.218653796689007e+00, -3.712729651256383e+01, -2.707006059329424e+03, -1.052532037887558e+03, -1.465460509745198e+00, -4.241983199414432e+02, -4.241983199414445e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_gap_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_gap", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.670051789284617e-03, 1.670019771862751e-03, 1.669876532877100e-03, 1.670397934775113e-03, 1.670034944733602e-03, 1.670034944733602e-03, 1.199507316062759e-02, 1.199651928070102e-02, 1.203922438420627e-02, 1.202181109524691e-02, 1.199541761080732e-02, 2.114103525060974e-02, 2.537891237470506e-02, 5.686674875100845e-02, 4.732562927197300e-02, 5.166306152620501e-02, 5.711889746358512e-02, 5.711889746358512e-02, 1.644981131315345e-01, 1.743322329116977e-01, 9.770183318756114e-03, 2.879744928760148e-02, 1.672489666891990e-01, 1.672489666891990e-01, 1.391381846362190e-03, 1.455588063208249e-03, 4.481367946173489e-03, 3.878354450617510e-04, 1.473187443317970e-03, 1.473187443317967e-03, 6.443520798228741e-03, 6.394987082996911e-03, 6.438154612122958e-03, 5.226185537978669e-03, 6.419161351582527e-03, 6.419161351582527e-03, 1.832865945246777e-02, 1.883165947382776e-02, 1.809046440082880e-02, 1.850831611869959e-02, 1.896297428390560e-02, 3.507685082844940e-02, 1.220758391042599e-01, 7.554362957368588e-02, 1.359282533227196e-01, 1.149072648735543e-01, 1.072565784816921e-01, 7.293287233902918e-02, 2.093353126443979e-03, 6.762384789853580e-02, 2.400991987437189e-03, 3.331977688012386e-02, 2.794555689960498e-02, 2.794555689960498e-02, 3.402434428530450e-07, 4.810317350015914e-04, 7.151992767085814e-04, 4.339010820292766e-04, 3.919064870673349e-07, 4.863107058675246e-04, 1.415969888568738e-02, 2.756345586496966e-02, 2.074095617369247e-02, 1.897193469523564e-02, 2.082973577681374e-02, 2.082973577681374e-02, 1.949582849908324e-02, 1.442903965304966e-01, 1.150395425738032e-01, 7.745864005739669e-02, 9.737895250111979e-02, 7.167089358414812e-02, 8.440570171266824e-02, 4.317387272884026e-02, 1.506576533751364e-01, 1.044209360865366e-01, 1.880974168390358e-01, 1.880974168390360e-01, 9.479369504625870e-02, 3.848186377272391e-03, 5.635979827241910e-03, 2.234721560078334e-01, 1.838329599099736e-03, 1.410339351915954e-02, 1.015166537705777e-03, 1.378300538785532e-04, 3.677031785100989e-04, 1.471434429831317e-02, 4.896835945111431e-04, 4.896835945111429e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
