
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_gap_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_gap", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.521089334680310e+01, -2.521092985456453e+01, -2.521125457742795e+01, -2.521065959990769e+01, -2.521091116764322e+01, -2.521091116764322e+01, -3.400279206169927e+00, -3.400505814522700e+00, -3.407632294517301e+00, -3.408053366355182e+00, -3.400339617454383e+00, -3.400339617454383e+00, -4.919278431803859e-01, -4.908737751859455e-01, -4.661457285963413e-01, -4.848381249797944e-01, -4.915648464547365e-01, -4.915648464547365e-01, -1.523923695233520e-01, -1.563011719956024e-01, -4.695183042680731e-01, -7.702625262634243e-02, -1.534629684532641e-01, -1.534629684532641e-01, -5.426027997135676e-03, -5.680522859224709e-03, -2.314058456363799e-02, -2.472712687526546e-03, -5.623878836088217e-03, -5.623878836088215e-03, -6.067099764066551e+00, -6.065518461466299e+00, -6.066970712619677e+00, -6.065739659300235e+00, -6.066247026029035e+00, -6.066247026029035e+00, -2.067382763419762e+00, -2.111764820159135e+00, -2.059018766525600e+00, -2.094635614788558e+00, -2.107833800058890e+00, -2.107833800058890e+00, -6.357101990764163e-01, -6.751326183023569e-01, -5.681551046504739e-01, -5.942029943687538e-01, -6.741864142304047e-01, -6.741864142304047e-01, -5.462258424085882e-02, -1.311974714183835e-01, -5.416962692219055e-02, -1.958669999389047e+00, -6.732154124161101e-02, -6.732154124161101e-02, -2.450668480758683e-03, -2.761605119647918e-03, -2.118352700626408e-03, -3.163186267975968e-02, -2.482199980290450e-03, -2.482199980290449e-03, -6.490331524881158e-01, -6.605950231962175e-01, -6.566513586860431e-01, -6.534431692000998e-01, -6.550626015838801e-01, -6.550626015838801e-01, -6.246594191503608e-01, -5.940043373621640e-01, -6.214439581262267e-01, -6.315573837925881e-01, -6.275589434771934e-01, -6.275589434771934e-01, -6.967327128740407e-01, -1.887431389661614e-01, -2.468919016564477e-01, -3.494984030332884e-01, -3.032927941893776e-01, -3.032927941893774e-01, -4.911011616534843e-01, -2.154806066226682e-02, -2.912261250086445e-02, -3.405926210817177e-01, -4.413020998246556e-02, -4.413020998246557e-02, -6.063289275336435e-03, -7.313303012969812e-04, -1.476484334845264e-03, -4.199296825714901e-02, -2.103437833654443e-03, -2.103437833654440e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_gap_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_gap", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.858420251871900e+01, -2.858423888719836e+01, -2.858434176210071e+01, -2.858373560207381e+01, -2.858422234892017e+01, -2.858422234892017e+01, -5.410841374163001e+00, -5.410840042829355e+00, -5.410919534321565e+00, -5.411254327989187e+00, -5.410867199608946e+00, -5.410867199608946e+00, -8.718743576872593e-01, -8.692404116933492e-01, -8.038578722432821e-01, -8.380231150827413e-01, -8.709540190969682e-01, -8.709540190969682e-01, -2.523724187886485e-01, -2.593657800382171e-01, -8.253895139603190e-01, -1.062235722359831e-01, -2.543071741651979e-01, -2.543071741651979e-01, -6.539456956022616e-03, -6.843658747923995e-03, -2.814509505347731e-02, -2.926266082078564e-03, -6.777806689671969e-03, -6.777806689671959e-03, -6.907759167014455e+00, -6.910154618283764e+00, -6.907956652649176e+00, -6.909821915951497e+00, -6.909043002558816e+00, -6.909043002558816e+00, -3.137221807710211e+00, -3.160080009071272e+00, -3.134897426007701e+00, -3.154346662910277e+00, -3.154663168907015e+00, -3.154663168907015e+00, -8.613491025334554e-01, -9.157025464318551e-01, -8.474218741232915e-01, -8.671527939721724e-01, -8.697418461407926e-01, -8.697418461407926e-01, -7.070975748446343e-02, -2.043275430214880e-01, -7.045729048068627e-02, -2.909693640213865e+00, -9.221566490555956e-02, -9.221566490555956e-02, -2.912963823395555e-03, -3.271849269779553e-03, -2.527351650486714e-03, -3.869233264955053e-02, -2.937641505811957e-03, -2.937641505811953e-03, -8.452058505827433e-01, -8.226436822820942e-01, -8.302483162024347e-01, -8.365053790990891e-01, -8.333376813412029e-01, -8.333376813412029e-01, -8.231605448098397e-01, -7.371569427770047e-01, -7.244575200881695e-01, -7.382689133247082e-01, -7.279009886314374e-01, -7.279009886314374e-01, -9.776638871058057e-01, -3.106354926396651e-01, -4.092460353072816e-01, -5.494425941122023e-01, -4.873076095843447e-01, -4.873076095843445e-01, -7.043513348931357e-01, -2.623215991058027e-02, -3.567513827199440e-02, -5.149763304252964e-01, -5.658252963075444e-02, -5.658252963075450e-02, -7.185103075524540e-03, -8.664270508320143e-04, -1.765444772784178e-03, -5.378402842279088e-02, -2.489282016110803e-03, -2.489282016110799e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_gap_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_gap", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.211146581718776e-08, -2.211136222536583e-08, -2.211070907910995e-08, -2.211241878785747e-08, -2.211141265829263e-08, -2.211141265829263e-08, -2.047689379826611e-05, -2.048018331968824e-05, -2.057562976437642e-05, -2.052475221270536e-05, -2.047746467888396e-05, -2.047746467888396e-05, -7.011704224600496e-03, -6.987301002014821e-03, -6.336445879927538e-03, -6.613372042866143e-03, -7.003634500756094e-03, -7.003634500756094e-03, -7.806303243745051e-01, -8.013634483918226e-01, -2.192682455301265e-03, -6.048529994889822e-01, -7.868004423868015e-01, -7.868004423868015e-01, -8.486816603453353e+01, -7.789407421823810e+01, -3.715724131731302e+00, -3.357309237166116e+02, -8.085452426833405e+01, -8.085452426833413e+01, -6.596729967053536e-06, -6.596878723435717e-06, -6.596765849237504e-06, -6.596879366228122e-06, -6.596788441053581e-06, -6.596788441053581e-06, -1.530990551433924e-04, -1.544734213402936e-04, -1.512939059016158e-04, -1.524954554085267e-04, -1.563033724112063e-04, -1.563033724112063e-04, -3.399978096826114e-02, -2.942391059983745e-02, -3.695254639983919e-02, -3.823592274445502e-02, -3.153440171399347e-02, -3.153440171399347e-02, -8.309583991965103e-01, -3.346624647514346e-01, -9.365574277786721e-01, -3.141502091225354e-04, -8.384219337221190e-01, -8.384219337221190e-01, -3.687081584099438e+02, -2.863080546995623e+02, -8.338411442791155e+02, -2.128781754060161e+00, -4.168426260615839e+02, -4.168426260615838e+02, -3.931978681263880e-02, -3.988374727361386e-02, -3.970777044062425e-02, -3.955206603894425e-02, -3.963214945500627e-02, -3.963214945500627e-02, -4.467951456792028e-02, -5.595735218369294e-02, -5.579307587177054e-02, -5.301625110896496e-02, -5.472959496562721e-02, -5.472959496562720e-02, -2.344693517095007e-02, -2.451154846391788e-01, -2.123539920560382e-01, -1.618581207232204e-01, -2.004093348725541e-01, -2.004093348725541e-01, -7.067361233821273e-02, -3.782962841985246e+00, -2.330836355489772e+00, -2.496887398392680e-01, -1.530940194458486e+00, -1.530940194458487e+00, -5.864724826176392e+01, -4.824424788163707e+03, -1.223151292937117e+03, -1.867584930030584e+00, -6.951915172827062e+02, -6.951915172827079e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_gap_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_gap", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_gap_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_gap", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.170771083144318e-03, 2.170717749159531e-03, 2.170498092563120e-03, 2.171367492802504e-03, 2.170742850064214e-03, 2.170742850064214e-03, 1.623544260821516e-02, 1.623689824011660e-02, 1.628133028670629e-02, 1.628812553880451e-02, 1.623560774420967e-02, 1.623560774420967e-02, 3.945891831025347e-02, 3.925764562940174e-02, 3.436416532062571e-02, 3.828947414930543e-02, 3.939186054494991e-02, 3.939186054494991e-02, 1.577675287096543e-01, 1.660453533056358e-01, 1.361039497297054e-02, 2.608004848104240e-02, 1.599916407832375e-01, 1.599916407832375e-01, 1.415039744337204e-03, 1.486403306254347e-03, 4.733445746731257e-03, 4.318661916257622e-04, 1.500426909256560e-03, 1.500426909256557e-03, 6.435590026420303e-03, 6.387195002854552e-03, 6.430339175081650e-03, 6.392730971212098e-03, 6.411166149624188e-03, 6.411166149624188e-03, 3.276845887670421e-02, 3.348620836648727e-02, 3.268434866761681e-02, 3.329864121483846e-02, 3.331761972685181e-02, 3.331761972685181e-02, 1.042978678806496e-01, 6.208002725350362e-02, 1.087148878740411e-01, 8.749736216932305e-02, 9.414033052170176e-02, 9.414033052170176e-02, 1.429608376974933e-02, 6.618766954682843e-02, 1.572052505996124e-02, 2.472473716223093e-02, 2.738181789376963e-02, 2.738181789376963e-02, 5.107608655974060e-04, 5.380493872674433e-04, 7.737121386008789e-04, 6.281561304367988e-03, 5.410312045316239e-04, 5.410312045316208e-04, 1.374727223191548e-02, 2.684706974970378e-02, 2.208166163049386e-02, 1.844513566141718e-02, 2.026006146023680e-02, 2.026006146023680e-02, 1.840507225902626e-02, 1.413366124191275e-01, 1.115245235744201e-01, 7.433134571935145e-02, 9.375654664256405e-02, 9.375654664256401e-02, 6.656797047822265e-02, 1.067851788284930e-01, 1.430991567010299e-01, 1.664509243863977e-01, 1.726348797866561e-01, 1.726348797866561e-01, 1.475822969473982e-01, 4.011882258420092e-03, 5.908555647496732e-03, 1.854065265440463e-01, 1.419443257673241e-02, 1.419443257673243e-02, 1.127370297313586e-03, 1.489766352832274e-04, 3.915140898511822e-04, 1.478791873995200e-02, 5.432896409573694e-04, 5.432896409573676e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
