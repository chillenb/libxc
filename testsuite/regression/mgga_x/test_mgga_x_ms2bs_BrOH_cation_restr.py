
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ms2bs_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2bs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.230018808216150e+01, -2.230023815589911e+01, -2.230051094354145e+01, -2.229976555840521e+01, -2.230014897961675e+01, -2.230014897961675e+01, -3.399964393512847e+00, -3.399976030977547e+00, -3.400541027328237e+00, -3.402443068941726e+00, -3.401116694966224e+00, -3.401116694966224e+00, -6.664936201935172e-01, -6.662414341094125e-01, -6.615219924760054e-01, -6.664855851740186e-01, -6.648617913656023e-01, -6.648617913656023e-01, -2.029121244382036e-01, -2.046054488682410e-01, -7.707823887965612e-01, -1.647322290052210e-01, -1.788626146779462e-01, -1.788626146779463e-01, -9.092710752036361e-03, -9.569481002537168e-03, -5.185748732841588e-02, -5.253953804286177e-03, -6.600793678013026e-03, -6.600793678013026e-03, -5.409079829241024e+00, -5.409440946869154e+00, -5.409103769747065e+00, -5.409422436246519e+00, -5.409258850529081e+00, -5.409258850529081e+00, -2.119133097282671e+00, -2.134761609350991e+00, -2.116584623218454e+00, -2.130171809037126e+00, -2.129029777663209e+00, -2.129029777663209e+00, -5.966783700243743e-01, -6.264587669237366e-01, -5.366012287327391e-01, -5.345118030646580e-01, -6.060650764600223e-01, -6.060650764600223e-01, -1.245903734503319e-01, -2.125997352219416e-01, -1.163638802745048e-01, -1.812961953157682e+00, -1.398220502240696e-01, -1.398220502240696e-01, -4.054074637624775e-03, -5.136160507155688e-03, -3.926913097165362e-03, -8.143663822866033e-02, -4.730729430360047e-03, -4.730729430360047e-03, -6.038051602024445e-01, -6.030257633969065e-01, -6.033084749940787e-01, -6.035307711263439e-01, -6.034189759591718e-01, -6.034189759591718e-01, -5.841797899615333e-01, -5.258997414897016e-01, -5.426408991739318e-01, -5.590380765939514e-01, -5.504709664354605e-01, -5.504709664354605e-01, -6.474921726476411e-01, -2.587613011016814e-01, -2.982080914338735e-01, -3.607929099115101e-01, -3.295296240678545e-01, -3.295296240678545e-01, -4.776171963848279e-01, -4.975011370525813e-02, -6.689713461502275e-02, -3.432878230000079e-01, -1.002462297142219e-01, -1.002462297142219e-01, -1.282518689698671e-02, -1.373208375234682e-03, -2.882197057275330e-03, -9.503172450163894e-02, -4.377462542701102e-03, -4.377462542701099e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ms2bs_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2bs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.829834794586082e+01, -2.829845774439779e+01, -2.829908027012360e+01, -2.829745279562245e+01, -2.829828630817088e+01, -2.829828630817088e+01, -4.169681123812490e+00, -4.169760845330260e+00, -4.171824729397502e+00, -4.170154478606452e+00, -4.170412234459596e+00, -4.170412234459596e+00, -7.845131571937682e-01, -7.832951289266389e-01, -7.539617031272426e-01, -7.597973363893636e-01, -7.590635264440795e-01, -7.590635264440795e-01, -2.146348783388448e-01, -2.154783076502367e-01, -9.165224296739897e-01, -1.656760501862534e-01, -1.787999291237600e-01, -1.787999291237601e-01, -1.210585015798235e-02, -1.273802601542459e-02, -6.665004824561722e-02, -7.002002197093025e-03, -8.793751992321510e-03, -8.793751992321510e-03, -6.997110510392180e+00, -6.999202188271616e+00, -6.997299580540407e+00, -6.999141744388568e+00, -6.998123278346431e+00, -6.998123278346431e+00, -2.383772934799779e+00, -2.425142961421590e+00, -2.386557528917918e+00, -2.424900322919330e+00, -2.405685479230249e+00, -2.405685479230249e+00, -7.278824976204110e-01, -8.541813914486179e-01, -6.545416177933496e-01, -7.084472576795537e-01, -7.476112283890172e-01, -7.476112283890172e-01, -1.390685467351966e-01, -2.214302236726163e-01, -1.317054024477680e-01, -2.445604340956084e+00, -1.485217649842313e-01, -1.485217649842313e-01, -5.403708348417705e-03, -6.844899852062777e-03, -5.232172957039533e-03, -9.851364061907593e-02, -6.303212375569278e-03, -6.303212375569278e-03, -8.017044723259983e-01, -7.904272536787170e-01, -7.942136357333992e-01, -7.974835164813431e-01, -7.958302102355649e-01, -7.958302102355649e-01, -7.853099528803120e-01, -6.350710579874869e-01, -6.696528968622828e-01, -7.089631732375284e-01, -6.874019644867339e-01, -6.874019644867339e-01, -8.842050943713613e-01, -2.749000847222418e-01, -3.143063170583615e-01, -3.985625753895182e-01, -3.512962157528345e-01, -3.512962157528344e-01, -5.438172657974517e-01, -6.423704287833162e-02, -8.412964305194560e-02, -3.968634342893937e-01, -1.147389805475244e-01, -1.147389805475244e-01, -1.705546710489679e-02, -1.830804182541782e-03, -3.842026935710495e-03, -1.107075434545602e-01, -5.832675191629793e-03, -5.832675191629788e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms2bs_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2bs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.941091768349508e-09, -4.940989052674056e-09, -4.939457700224223e-09, -4.940945081940870e-09, -4.940319573506437e-09, -4.940319573506437e-09, -1.220135928320347e-05, -1.220665130528746e-05, -1.235855180062709e-05, -1.241352849842627e-05, -1.236196077073461e-05, -1.236196077073461e-05, -3.717447586612878e-03, -3.724102627996294e-03, -3.896769055751759e-03, -3.946134798027464e-03, -3.907460401968751e-03, -3.907460401968751e-03, -5.111714991260039e-01, -5.421584970108639e-01, -2.176240459665933e-03, -9.234883707342314e-01, -8.583922384597910e-01, -8.583922384597911e-01, -2.625071440268957e+00, -2.772828234052228e+00, -1.516179905269997e+00, -2.389062499156374e+00, -3.033960038177414e+00, -3.033960038177422e+00, -9.004949852808284e-07, -8.998800931321187e-07, -8.994673570059170e-07, -8.989661838686735e-07, -9.006974131324353e-07, -9.006974131324353e-07, -8.198397661414469e-05, -7.475106021429831e-05, -7.545535583396554e-05, -6.866069736463199e-05, -8.114197206516808e-05, -8.114197206516808e-05, -2.546044476834512e-02, -2.558074498756699e-02, -2.816674424681888e-02, -1.841016003187667e-02, -2.458704408755686e-02, -2.458704408755686e-02, -1.014965981565994e+00, -3.332016723615926e-01, -1.127078977940375e+00, -1.574469130980065e-04, -1.135197537208685e+00, -1.135197537208685e+00, -3.148248433057628e+00, -2.812238705852061e+00, -1.765642597392367e+01, -1.685450028165125e+00, -8.218235629338595e+00, -8.218235629338578e+00, -1.438381631500793e-02, -1.297824267185950e-02, -1.343729592947044e-02, -1.384717271506913e-02, -1.364296288423931e-02, -1.364296288423931e-02, -2.565811064300696e-02, -1.503676066566124e-02, -1.706306415934332e-02, -2.005339565696234e-02, -1.902419133374349e-02, -1.902419133374351e-02, -1.916946995281888e-02, -1.742714352885266e-01, -1.568873489883328e-01, -1.411764046133185e-01, -1.541136094681279e-01, -1.541136094681280e-01, -4.632102941015712e-02, -1.372560352404786e+00, -1.368168929680714e+00, -1.984454760836956e-01, -1.796347043205430e+00, -1.796347043205427e+00, -2.118130343954637e+00, -1.380155106389631e+01, -6.678509408965016e+00, -1.753434839478837e+00, -1.037942117541738e+01, -1.037942117541741e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms2bs_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2bs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([3.027489036757267e-04, 3.027400370517702e-04, 3.025464026792023e-04, 3.026722521207073e-04, 3.026283945190403e-04, 3.026283945190403e-04, 2.998159002374034e-03, 3.000791659368569e-03, 3.077505839482332e-03, 3.112446274101198e-03, 3.081117742668525e-03, 3.081117742668525e-03, 7.578800735305482e-06, 9.138410836845836e-06, 1.595646523646328e-04, 5.814901861533911e-04, 3.819854209317850e-04, 3.819854209317850e-04, 1.189852864222205e-02, 1.520010693443158e-02, 2.444110244903014e-04, 8.775878565936269e-03, 1.438392268151417e-02, 1.438392268151418e-02, 6.767465358873914e-10, 1.720091596645029e-09, 2.061720291572378e-05, 3.930410825996240e-10, 1.225795326407395e-09, 1.225795326407414e-09, 1.097254583344995e-04, 1.088278787600846e-04, 1.074638106879168e-04, 1.067631457709848e-04, 1.104127121990836e-04, 1.104127121990836e-04, 5.122407509470557e-03, 4.598616415443976e-03, 4.389517254537139e-03, 3.865041058075359e-03, 5.202187663061316e-03, 5.202187663061316e-03, 5.170873437068086e-02, 6.701545608386530e-02, 3.519168428366621e-02, 1.755959378628907e-02, 5.332764893050571e-02, 5.332764893050571e-02, 1.679812692634721e-03, 6.337096668494699e-03, 1.333746056461900e-03, 6.652261023757505e-03, 4.169745067793645e-03, 4.169745067793643e-03, 5.049213991627846e-11, 5.054758861475205e-10, 1.988918776710209e-09, 3.298532966311698e-04, 1.775756950921980e-09, 1.775756950921981e-09, 2.780971237432483e-02, 2.301743832650106e-02, 2.458103261658642e-02, 2.597658333080451e-02, 2.527924558513684e-02, 2.527924558513684e-02, 5.382758860830082e-02, 1.045334208487249e-02, 1.822306921288542e-02, 2.961282605405292e-02, 2.456381064817437e-02, 2.456381064817440e-02, 5.274829413117388e-02, 6.701734660983436e-03, 1.933365816165538e-02, 5.124966429535729e-02, 3.599926116685726e-02, 3.599926116685730e-02, 4.148367496285940e-02, 8.415153174750964e-06, 7.502025484072919e-05, 6.906077125252000e-02, 1.181616867343362e-03, 1.181616867343343e-03, 3.110352627968410e-08, 7.248293858305017e-14, 5.819601527151654e-11, 6.562934655486704e-04, 1.697814517467264e-09, 1.697814517467265e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
