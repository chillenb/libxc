
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ms2bs_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2bs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.004044232531123e+01, -2.004052772847640e+01, -2.004091281199506e+01, -2.003964416031389e+01, -2.004030803428445e+01, -2.004030803428445e+01, -3.225722355543185e+00, -3.225731823595468e+00, -3.226037193265724e+00, -3.226206245567644e+00, -3.225852916829070e+00, -3.770241259142162e+00, -6.200534535414292e-01, -7.620139410516948e-01, -7.506055180341646e-01, -7.526450185769648e-01, -7.522722990569269e-01, -7.522722990569269e-01, -2.044152564369369e-01, -2.065151598994946e-01, -7.213949091746497e-01, -1.696161700033636e-01, -1.831499230311751e-01, -1.831499230311751e-01, -9.092766255872969e-03, -9.569602525311895e-03, -5.195793289067226e-02, -5.254086908461876e-03, -6.600977302988711e-03, -6.600977302988711e-03, -5.409606239890405e+00, -5.409960972064724e+00, -5.409618921326428e+00, -5.004955207258539e+00, -5.409787653294463e+00, -5.409787653294463e+00, -1.813928750004257e+00, -1.827410879482638e+00, -1.804060339451685e+00, -1.815988778882880e+00, -1.826152454400455e+00, -2.155171876799788e+00, -6.233802731501032e-01, -6.658170914986365e-01, -5.849125745536107e-01, -5.993037620286007e-01, -6.312589509200605e-01, -5.534161645284053e-01, -8.395198573761738e-02, -2.144323693500482e-01, -7.765904895929625e-02, -2.028549196467722e+00, -1.416211930004455e-01, -1.416211930004455e-01, -2.468927474302408e-03, -5.136443230956043e-03, -3.927084946531463e-03, -5.221629496143144e-02, -2.881564775077342e-03, -4.731068215412759e-03, -6.058057191233576e-01, -6.048017591482903e-01, -5.897218343121232e-01, -6.054465171936745e-01, -6.053027684995381e-01, -6.053027684995381e-01, -5.897180610049815e-01, -5.273174974067141e-01, -5.448347035282350e-01, -5.623129931128735e-01, -5.533673826584392e-01, -4.909674417752025e-01, -7.009807512878681e-01, -2.021598145322155e-01, -3.024386733707391e-01, -3.221849588788246e-01, -3.379015782624947e-01, -3.379015782624947e-01, -4.205436365377378e-01, -4.979267015444241e-02, -6.714656975118521e-02, -3.621222267603314e-01, -6.650643214459445e-02, -1.012474574677072e-01, -1.282917164146171e-02, -1.373240686622278e-03, -2.882217562582274e-03, -9.555916121285234e-02, -4.377690887618150e-03, -4.377690887618147e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ms2bs_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2bs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.830734695439009e+01, -2.830758141474712e+01, -2.830858557075031e+01, -2.830510851932035e+01, -2.830693563293861e+01, -2.830693563293861e+01, -4.316914310317170e+00, -4.316914534861418e+00, -4.316992654196728e+00, -4.317353027277884e+00, -4.316865850431329e+00, -4.532874661675121e+00, -8.316534312230440e-01, -8.600229614280680e-01, -8.371188375138617e-01, -8.439321519214359e-01, -8.424596098706844e-01, -8.424596098706844e-01, -2.234601741411382e-01, -2.264870938419989e-01, -9.659038277323877e-01, -1.839588732969448e-01, -1.968986737585553e-01, -1.968986737585553e-01, -1.210607200511804e-02, -1.273851170302286e-02, -6.704709390159998e-02, -7.002534520780966e-03, -8.794486249255868e-03, -8.794486249255868e-03, -7.001050422934857e+00, -7.003076929602495e+00, -7.001157119517789e+00, -7.254843372792173e+00, -7.002070739597683e+00, -7.002070739597683e+00, -2.431852865758106e+00, -2.449278499503886e+00, -2.419054542262234e+00, -2.434545835319024e+00, -2.447631621425160e+00, -2.555763711857321e+00, -7.747327552510012e-01, -8.530350305542361e-01, -7.102148533038677e-01, -7.454590295389590e-01, -7.892269015030213e-01, -7.412886064352263e-01, -1.120339959104331e-01, -2.305645445665774e-01, -1.036244434779260e-01, -2.545021507479655e+00, -1.559412906411278e-01, -1.559412906411278e-01, -3.291905999196431e-03, -6.846030433139493e-03, -5.232860170754632e-03, -6.964889050200271e-02, -3.842094914021095e-03, -6.304567038101023e-03, -8.010412695853415e-01, -7.933252514083543e-01, -8.178988880324316e-01, -7.982629724571760e-01, -7.971400098756516e-01, -7.971400098756516e-01, -7.788996859793706e-01, -6.465976247117955e-01, -6.836189981021495e-01, -7.212620559324483e-01, -7.019394395960110e-01, -6.760466132312993e-01, -8.911153660449379e-01, -2.707104867171434e-01, -3.377809710664108e-01, -4.319888509118714e-01, -3.891811862793006e-01, -3.891811862793004e-01, -5.625075927003990e-01, -6.440531312858160e-02, -8.510963193017680e-02, -4.376469031121131e-01, -8.874032137709795e-02, -1.186473347655645e-01, -1.707138073349421e-02, -1.830933416696602e-03, -3.842108949086283e-03, -1.127873449989655e-01, -5.833588322447293e-03, -5.833588322447287e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms2bs_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2bs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.343349947829076e-08, -1.343417431263937e-08, -1.343679634277485e-08, -1.342681928510245e-08, -1.343209980117816e-08, -1.343209980117816e-08, -6.983172926118678e-06, -6.982800860520303e-06, -6.972422512606767e-06, -6.974107528287474e-06, -6.976827372768105e-06, -3.494379607719250e-06, -5.173778927226496e-03, -1.941352685692200e-03, -2.007512379303055e-03, -2.011906102573430e-03, -2.010098233935475e-03, -2.010098233935475e-03, -3.401895458455927e-01, -3.314648767855797e-01, -2.735812057108908e-03, -4.548638707868881e-01, -4.299844355027300e-01, -4.299844355027297e-01, -2.581414418753959e+00, -2.688820589570903e+00, -1.194703945100940e+00, -1.898257694734340e+00, -2.640492329286938e+00, -2.640492329286938e+00, -8.510667079077246e-07, -8.508854764575904e-07, -8.510611507699791e-07, -6.194859769123757e-06, -8.509736129515857e-07, -8.509736129515857e-07, -7.137743246056282e-05, -6.911243119155022e-05, -7.306480719261545e-05, -7.103541309878062e-05, -6.931494984091650e-05, -3.237751551186235e-05, -4.763724296963616e-03, -3.699457520461900e-03, -6.071841013362084e-03, -5.578729027919101e-03, -4.541669305676376e-03, -8.404439035437710e-03, -1.425522382298034e+01, -2.328824195396283e-01, -1.944220498601123e+01, -4.264735307080569e-05, -7.531977967409471e-01, -7.531977967409472e-01, -1.886369217644859e+07, -1.678187600872478e+00, -1.356232256339010e+01, -9.470627245177310e+01, -1.016607716224798e+07, -5.205425086827707e+00, -5.431741588188163e-03, -5.461328607909120e-03, -3.526050162808991e-02, -5.442444495180466e-03, -5.446674395577901e-03, -5.446674395577901e-03, -6.048233252849792e-03, -9.243598017746636e-03, -8.195805843055397e-03, -7.274083909320200e-03, -7.731099411520945e-03, -2.403343603192356e-02, -3.004447192606577e-03, -4.444070212017855e-01, -7.644212254196855e-02, -7.179033358309826e-02, -5.190675445944729e-02, -5.190675445944735e-02, -2.398330603769696e-02, -1.221122365629086e+00, -1.012002191076604e+00, -4.120709637166148e-02, -3.613320399361496e+01, -1.236642272945026e+00, -1.232022160448809e+00, -2.056368686969573e+00, -5.893483436437343e+00, -1.390130684778609e+00, -7.418649537627205e+00, -7.418649537627219e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms2bs_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2bs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [9.303658382183897e-04, 9.304601958927760e-04, 9.308399054120765e-04, 9.294435044803684e-04, 9.301806449373902e-04, 9.301806449373902e-04, 1.199246811183525e-04, 1.198623297605306e-04, 1.181842332312443e-04, 1.188591528713004e-04, 1.187996186108643e-04, -7.540401519425201e-18, 4.691499066530378e-04, -1.217397754282485e-17, -4.268584427912292e-18, 2.492345829919094e-19, -5.742787320432241e-18, -5.742787320432241e-18, 1.293255401710181e-17, -1.308637749287212e-17, 1.640744177327634e-04, 1.169697615012330e-17, 1.798854314549751e-17, 1.042954375812579e-18, 7.321793542955463e-24, -1.591913765685365e-24, 1.564698737156558e-20, 3.336075376724723e-25, -7.053885677657864e-25, -7.053885677657864e-25, -3.042798205570694e-18, 3.500888337045975e-19, -1.746764077755868e-19, 8.438521720299552e-03, -2.788579306848160e-18, -2.788579306848160e-18, 2.559295682193883e-04, 2.520309315674321e-04, 2.571335708617637e-04, 2.555414491115779e-04, 2.523924901409691e-04, 3.166739063807471e-19, 2.082968997820354e-17, 2.929828662211714e-17, -2.904324766296583e-17, 3.399614080644200e-17, 2.641543145867073e-17, 1.584405958580299e-03, 5.350875648609506e-05, 1.039518281640777e-17, 4.385198414014362e-05, -2.478232010082980e-18, 4.405592180109781e-18, 1.881243580624512e-18, 1.568254002522710e-09, -1.138665777845301e-25, 7.774435861077578e-25, 1.690189108405014e-05, 9.884433356864469e-09, 2.021444869150292e-24, -4.521328936713317e-18, 1.751457971441629e-17, 8.167066796197667e-02, -4.013227713450536e-20, 4.349372381347387e-18, 4.349372381347387e-18, -1.015693756636630e-17, -3.753743270350033e-18, 1.032127502047469e-17, -2.110034006001062e-17, 1.621013330650555e-17, 1.714355079283966e-02, 1.767037815145681e-19, 6.226389107884623e-04, 2.421212111870560e-17, 1.441173861853649e-03, -5.410466364425530e-18, 9.854340989213660e-18, 8.259845843622975e-04, 2.988701972015378e-20, -1.250653817674591e-19, 1.964959115037770e-17, 4.729504673586740e-05, 1.345365804279160e-18, -2.961434336044044e-23, 4.741386207710958e-29, -3.715864369994076e-27, 6.018824780017824e-19, -4.376048223659514e-25, 1.295423413605960e-24]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
