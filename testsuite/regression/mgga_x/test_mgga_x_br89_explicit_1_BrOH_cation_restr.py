
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_br89_explicit_1_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89_explicit_1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.880877255026268e+01, -1.880880770068226e+01, -1.880903546090462e+01, -1.880851158248600e+01, -1.880877593590337e+01, -1.880877593590337e+01, -3.542720099695710e+00, -3.542665282877827e+00, -3.541458656273790e+00, -3.544112117077795e+00, -3.542723933713376e+00, -3.542723933713376e+00, -7.460817479670134e-01, -7.464472089569661e-01, -7.568841190102739e-01, -7.593971180539386e-01, -7.573266533434313e-01, -7.573266533434313e-01, -2.435131803794328e-01, -2.437082547853220e-01, -8.651234195614698e-01, -2.204731252211492e-01, -2.249454358785012e-01, -2.249454358785012e-01, -8.034281754769730e-02, -8.017255969981102e-02, -1.355896633742000e-01, -7.598743449135134e-02, -7.566182486500912e-02, -7.566182486500912e-02, -8.645393998288972e+00, -7.005704072782854e+00, -3.816957112104192e+00, -1.034468786933453e+01, -4.143968713160834e+00, -5.952481968421161e+00, -1.430847182432015e+00, -2.629763937627856e+00, -2.332556186495239e+00, -2.339962043957250e+00, -2.337996596965031e+00, -2.128301691784531e+00, -1.221688023693069e+00, -9.733578965424926e-01, -1.114625206900028e+00, -5.894044413567990e-01, -6.516685821685260e-01, -6.927192757542775e-01, -6.688995778870425e-02, -4.253638601438479e-01, -6.170242723734472e-02, -2.025557091477499e+00, -1.825168959407026e-01, -1.613089898360544e-01, -1.478132924435214e-01, -2.321689954714671e+00, -1.900915863653874e-03, -4.153577001872707e-02, -8.902609395808898e-02, -2.290014592693665e-03, -3.122490989407830e+01, -4.281161594352686e-01, -4.289837487551565e-01, -4.527725987870354e+00, -4.293463656731096e-01, -8.295516465321390e+01, -4.189129473786096e-01, -5.478000443747152e-01, -9.714785897068889e-01, -4.221231179619997e-01, -6.205070398511114e-01, -1.263442791233023e+00, -1.402863868972289e+00, -1.601808189764680e-01, -1.923357832147151e-01, -2.561163987978596e-01, -4.436805626159449e-01, -4.037338572822057e-01, -5.152104286943510e-01, -2.449071038070118e-02, -1.564619468337095e-01, -3.702545897756910e-01, -5.285554028409823e-02, -1.469333843941355e-01, -6.214304618869821e-03, -6.645242495310472e-04, -1.394865448301805e-03, -5.063007353530793e-02, -2.118981225806099e-03, -2.118980408732577e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_br89_explicit_1_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89_explicit_1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.806061936150587e+01, -2.806070303255778e+01, -2.806112232959508e+01, -2.805987708029206e+01, -2.806052288375035e+01, -2.806052288375035e+01, -4.531206657029136e+00, -4.531291460858827e+00, -4.533370761141235e+00, -4.530643230547606e+00, -4.531420880504530e+00, -4.531420880504530e+00, -8.489577952176152e-01, -8.476678981290422e-01, -8.191025944834833e-01, -8.246532274275327e-01, -8.234153288203808e-01, -8.234153288203808e-01, -2.210453096788638e-01, -2.235756971272561e-01, -9.971845056338140e-01, -1.780139005738392e-01, -1.914559888203200e-01, -1.914559888203204e-01, -2.861314404158306e-02, -2.919779975668397e-02, -7.683916305370335e-02, -2.741847206063753e-02, -2.681233044527533e-02, -2.681233044527540e-02, -8.362521285880439e+00, -7.452358574622923e+00, -5.113163765556161e+00, -9.328616390383264e+00, -6.022706960032107e+00, -7.014532610003218e+00, -1.910373690765714e+00, -2.686346265576138e+00, -2.465306556412311e+00, -2.481007368130423e+00, -2.501676656868489e+00, -2.372800006438005e+00, -1.080654165466289e+00, -9.792701355345006e-01, -9.901571320129792e-01, -7.648030304006742e-01, -7.871675275393856e-01, -7.985737456592837e-01, -8.949540259353275e-02, -3.426105650596273e-01, -8.230857451541296e-02, -2.612606263586947e+00, -1.350264090090133e-01, -1.079770793396788e-01, -9.631849568551555e-02, -1.566384247759972e+00, -2.534554481262268e-03, -5.545584569049439e-02, -4.959467533301067e-02, -3.053353387195281e-03, -2.142738094423121e+01, -5.708242777344467e-01, -5.719784904881247e-01, -3.219677545168316e+00, -5.724704284857890e-01, -5.726869218182313e+01, -5.585508727775016e-01, -6.248384786500273e-01, -8.900738342357171e-01, -6.057752363349111e-01, -7.076256151622794e-01, -1.068016193111894e+00, -1.241707958456040e+00, -2.137849370646993e-01, -2.566466355357482e-01, -3.451053397968920e-01, -4.326196581928426e-01, -4.049893443217265e-01, -5.791110139962777e-01, -3.267593147319740e-02, -9.443366591084283e-02, -4.301753846172170e-01, -7.052740198678784e-02, -9.245996018185787e-02, -8.285769870658252e-03, -8.860327389897244e-04, -1.859820915818518e-03, -6.684678568875456e-02, -2.825311156118634e-03, -2.825308736443514e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_br89_explicit_1_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89_explicit_1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.783838664913123e-09, -5.783724144375669e-09, -5.783354901409216e-09, -5.785057596739877e-09, -5.784145516815451e-09, -5.784145516815451e-09, -1.295070808417900e-05, -1.295111862557591e-05, -1.295950828594612e-05, -1.293601614919386e-05, -1.295008398572241e-05, -1.295008398572241e-05, -6.881932122465764e-03, -6.868449274682721e-03, -6.510592426246862e-03, -6.420755521876952e-03, -6.490552254444423e-03, -6.490552254444423e-03, -6.894188072624472e-01, -6.773699575083365e-01, -3.806624469387276e-03, -1.288989603490610e+00, -1.038854293535606e+00, -1.038854293535601e+00, -8.450117425196458e+03, -7.348824271380111e+03, -4.770826159409469e+01, -3.925432101099411e+04, -2.181588106646734e+04, -2.181588106646735e+04, -5.370535925319197e-07, -9.643517191986304e-07, -6.309019408612166e-10, -3.578076828927661e-07, -3.493191279337056e-07, -1.699367477333751e-06, -2.601573158718741e-09, -4.821323331748987e-05, -7.274753108938761e-05, -7.175168740874615e-05, -7.185423076922883e-05, -1.037930919665133e-04, -2.016423432559437e-03, -2.972154666692584e-03, -2.830295587919028e-03, -1.741450393296758e-02, -1.182024403087351e-02, -9.280843352609184e-03, -5.040490258608693e-03, -1.918185344683516e-01, -9.383332669406174e-05, -1.256531390334261e-04, -2.813912601940479e+00, -3.870924330575499e+00, -2.568439369467388e+04, -1.931110372114389e+02, 2.877450782172891e-09, -4.840558517926198e-03, -4.008494816452702e+04, -8.238971963337800e-06, -1.178034855103803e-05, -4.016294483781468e-12, -1.339005768625728e-14, -1.846294717914421e-04, -3.919526135190357e-11, -2.478334227200370e-06, -4.678846637323027e-14, -2.367923662270386e-02, -4.165977873407529e-03, -2.034126618041941e-03, -1.445308285914268e-02, -2.352087983254867e-03, -1.178852348099927e-03, -8.873087293160686e-06, -2.620854063856761e-06, -1.702373351709949e-04, -6.558004923961447e-02, -8.686517455999762e-02, -3.027029226164895e-02, -1.323333812176329e-02, -2.092972120059278e+01, -1.134611275145514e-01, -4.676865638888880e-04, -9.180750988242798e+00, -5.462433897871340e-05, -7.241788582324127e-03, -4.632207393033583e-05, -6.522998179774980e-01, -3.076069575431305e-04, -8.649082899668694e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_br89_explicit_1_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89_explicit_1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([-2.236403377379187e-04, -2.236377807189201e-04, -2.236323987235825e-04, -2.236703830319310e-04, -2.236496301390551e-04, -2.236496301390551e-04, -2.161024877270845e-03, -2.161107375969026e-03, -2.162989983799495e-03, -2.159461269242603e-03, -2.161093791247952e-03, -2.161093791247952e-03, -8.240279013359907e-03, -8.196962882886842e-03, -7.167089442723124e-03, -7.245669123734502e-03, -7.286032032753323e-03, -7.286032032753323e-03, -1.421149628327224e-02, -1.460719386589757e-02, -7.226425930433266e-03, -1.162629394225975e-02, -1.326761809913128e-02, -1.326761809913131e-02, -7.348048919144549e-03, -7.451517697902265e-03, -8.123699483375562e-03, -6.575416241455064e-03, -7.250623938435859e-03, -7.250623938435859e-03, -3.007700741328975e-04, -5.403704931178360e-04, -3.533383472119281e-07, -2.004886084256713e-04, -1.956861636214730e-04, -9.519739276506265e-04, -7.737516712093960e-08, -1.465372938716743e-03, -2.129444167321291e-03, -2.141160796674561e-03, -2.179463462490762e-03, -3.148224525936091e-03, -1.616017569329902e-03, -3.053849832021927e-03, -1.796994869252921e-03, -1.241976112486487e-02, -9.938678408624970e-03, -7.803503650304165e-03, -1.521517489167502e-05, -3.972138151912562e-03, -2.242660861546278e-07, -3.526820750073897e-03, -1.372780593879027e-02, -1.888448773328540e-02, -1.976174406169804e-03, -3.022115723882769e-05, 2.013245832288033e-16, -3.519957092256293e-06, -4.903384802987681e-03, -1.007830912623906e-12, -9.579289462319761e-06, -3.210003666505828e-12, -1.076724971336960e-14, -1.492092552924551e-04, -3.159667411559756e-11, -1.997872095404005e-06, -3.503561543340766e-14, -1.121631540819514e-02, -2.265887294157452e-03, -1.261348678138387e-03, -8.387840662561213e-03, -1.365033288755189e-03, -1.395653506818047e-03, -3.705702080664993e-07, -1.895881401392534e-07, -2.837883295996525e-05, -7.190028378543409e-03, -9.523674919966920e-03, -1.118843749567929e-02, -1.975778746145600e-06, -7.918520462438369e-03, -1.694486969134633e-02, -7.021135298322236e-07, -1.378258427881155e-02, -1.335242165357501e-10, -2.164601417471045e-11, -1.280515594119619e-12, -8.108785477537185e-04, -2.981099811251850e-11, -8.382053387324251e-12])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_br89_explicit_1_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89_explicit_1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([8.945613509516748e-04, 8.945511228756805e-04, 8.945295948943299e-04, 8.946815321277242e-04, 8.945985205562206e-04, 8.945985205562206e-04, 8.644099509083380e-03, 8.644429503876104e-03, 8.651959935198026e-03, 8.637845076970411e-03, 8.644375164991808e-03, 8.644375164991808e-03, 3.296111605343963e-02, 3.278785153154737e-02, 2.866835777089250e-02, 2.898267649493801e-02, 2.914412813101329e-02, 2.914412813101329e-02, 5.684598513308896e-02, 5.842877546359027e-02, 2.890570372173306e-02, 4.650517576903898e-02, 5.307047239652512e-02, 5.307047239652522e-02, 2.939219567657820e-02, 2.980607079160906e-02, 3.249479793350225e-02, 2.630166496582026e-02, 2.900249575374344e-02, 2.900249575374344e-02, 1.203080296531590e-03, 2.161481972471344e-03, 1.413353388847712e-06, 8.019544337026837e-04, 7.827446544858918e-04, 3.807895710602513e-03, 3.095006684837584e-07, 5.861491754866970e-03, 8.517776669285165e-03, 8.564643186698242e-03, 8.717853849963047e-03, 1.259289810374436e-02, 6.464070277319608e-03, 1.221539932808771e-02, 7.187979477011682e-03, 4.967904449945948e-02, 3.975471363449988e-02, 3.121401460121666e-02, 6.086069956670010e-05, 1.588855260765025e-02, 8.970643446187764e-07, 1.410728300029555e-02, 5.491122375516108e-02, 7.553795093314161e-02, 7.904697624679217e-03, 1.208846289553108e-04, -8.052983329152133e-16, 1.407982836902517e-05, 1.961353921195072e-02, 4.031323650495624e-12, 3.831715784927904e-05, 1.284001466602331e-11, 4.306899885347839e-14, 5.968370211698203e-04, 1.263866964623902e-10, 7.991488381616021e-06, 1.401424617336306e-13, 4.486526163278053e-02, 9.063549176629809e-03, 5.045394712553549e-03, 3.355136265024485e-02, 5.460133155020755e-03, 5.582614027272189e-03, 1.482280832265997e-06, 7.583525605570136e-07, 1.135153318398610e-04, 2.876011351417363e-02, 3.809469967986768e-02, 4.475374998271716e-02, 7.903114984582399e-06, 3.167408184975348e-02, 6.777947876538533e-02, 2.808454119328894e-06, 5.513033711524622e-02, 5.340968661430003e-10, 8.658405669884181e-11, 5.122062370193017e-12, 3.243514191014874e-03, 1.192439924500740e-10, 3.352821354929700e-11])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
