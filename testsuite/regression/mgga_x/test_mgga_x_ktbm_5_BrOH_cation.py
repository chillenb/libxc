
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_5_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_5", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.067504533291336e+01, -2.067513814862818e+01, -2.067555443898495e+01, -2.170005417421661e+01, -2.170061833706123e+01, -2.272645891904801e+01, -3.508072839037877e+00, -3.845592091047643e+00, -3.844837663656127e+00, -3.845491450025101e+00, -3.845019548709876e+00, -3.507646216660083e+00, -6.146533656408012e-01, -6.866393170857177e-01, -7.388477989186163e-01, -6.743302548086071e-01, -6.059091854277650e-01, -7.444187184955624e-01, -1.815052110801195e-01, -1.842181492748120e-01, -8.069954044576337e-01, -1.488103889081743e-01, -1.887118197119483e-01, -1.873390165241426e-01, -6.780710507907630e-03, -6.916383115093046e-03, -3.804986254719941e-02, -3.909364996085810e-03, -5.456986100056369e-03, -5.456986100056370e-03, -5.492977492278595e+00, -5.493154214944049e+00, -5.492979801342363e+00, -5.493136283288024e+00, -5.314328853240006e+00, -5.314487716552843e+00, -2.181121665667131e+00, -2.193704610712763e+00, -2.172026762848276e+00, -2.183187794404446e+00, -1.991621469566198e+00, -2.192415434038899e+00, -5.928081834898209e-01, -6.771039574678412e-01, -5.973498704892146e-01, -6.119114318105192e-01, -6.053225242285765e-01, -6.447379829676234e-01, -1.028999128584266e-01, -1.826015994373265e-01, -9.527757091315651e-02, -2.068652300644682e+00, -1.212707162725766e-01, -1.212707162725765e-01, -2.916934243625833e-03, -3.821638609101002e-03, -2.926680171044456e-03, -6.117974791811009e-02, -3.676416528988767e-03, -3.676416528988767e-03, -6.133857929072374e-01, -6.129596324567561e-01, -5.945611408273281e-01, -6.055080200098255e-01, -5.961983579061028e-01, -6.046474640677781e-01, -5.971693590523905e-01, -4.962852678990153e-01, -5.212458622629406e-01, -5.717501505297589e-01, -5.635549282172607e-01, -5.340009500507448e-01, -6.785950479827698e-01, -2.487676314826925e-01, -2.711005079735378e-01, -3.519378987215642e-01, -3.400987129587628e-01, -3.074805822226098e-01, -5.003941808177859e-01, -3.477419280777042e-02, -5.137061697176830e-02, -3.694960962092042e-01, -8.159675945022060e-02, -8.159675945022063e-02, -8.862072859823681e-03, -1.021428775929270e-03, -1.992044769155388e-03, -6.954038006471794e-02, -3.376148237430905e-03, -3.190301939528763e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_5_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_5", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.945689937878296e+01, -2.945702336916630e+01, -2.945701831783064e+01, -2.945710973285344e+01, -2.945740868378964e+01, -2.945766626198779e+01, -2.945606674747792e+01, -2.716179661060320e+01, -2.945697043262394e+01, -2.716269052148777e+01, -2.716288665415666e+01, -2.716269052148776e+01, -4.139381043465505e+00, -4.403223754241452e+00, -4.139406496605080e+00, -4.139327441937660e+00, -4.139897446636418e+00, -4.140031769741076e+00, -4.140064685890551e+00, -4.140123142009608e+00, -4.138661260516396e+00, -4.140658485267533e+00, -4.402263362163072e+00, -4.140658485267533e+00, -7.714083578075400e-01, -7.757707096891741e-01, -7.698645226808236e-01, -8.284791286070829e-01, -8.182109154375437e-01, -8.141991286934145e-01, -8.179342336778839e-01, -7.564927214872560e-01, -7.826577082200408e-01, -7.270595706307447e-01, -8.337490296482520e-01, -8.005340402146652e-01, -1.968054173734206e-01, -2.247513230859135e-01, -1.987029607953552e-01, -2.275511187672625e-01, -9.997764270738914e-01, -9.165584968594176e-01, -1.756024545687849e-01, -1.773693738904109e-01, -2.286477026435177e-01, -1.295881355151376e-01, -2.286477026435175e-01, -1.259549592961524e-01, -8.022245358821720e-03, -8.524531946711735e-03, -8.492570717512334e-03, -9.005203338342892e-03, -4.689425066171034e-02, -4.929946585935242e-02, -4.822550031125883e-03, -4.742194087616862e-03, -7.156684369977847e-03, -4.072688496984565e-03, -7.156684369977848e-03, -4.072688496984565e-03, -6.782021380156311e+00, -6.780415901580066e+00, -6.786338654185204e+00, -6.784587172436708e+00, -6.782311274830671e+00, -6.780595335388861e+00, -6.786013720405752e+00, -6.784382739737523e+00, -7.217950525695035e+00, -6.782504796181602e+00, -6.784195088627928e+00, -7.216185747544243e+00, -2.334131509248829e+00, -2.333738383089732e+00, -2.348916366327166e+00, -2.348135384872781e+00, -2.322464961048136e+00, -2.325321085227520e+00, -2.334620949001658e+00, -2.337864443889711e+00, -2.351670625101720e+00, -2.423090051251504e+00, -2.351670625101720e+00, -2.342449626246747e+00, -7.145077818525186e-01, -7.861550282862965e-01, -8.127623895085844e-01, -8.154224850449440e-01, -6.346591906225206e-01, -6.620524381881726e-01, -6.726753052078587e-01, -7.021922112508155e-01, -7.533869984931361e-01, -7.800688555702602e-01, -7.533869984931360e-01, -7.079864927266888e-01, -1.237430217703187e-01, -1.249022413123553e-01, -2.075306928560061e-01, -2.296798724541299e-01, -1.121302349083910e-01, -1.180234235920111e-01, -2.366399729413625e+00, -2.365479137336910e+00, -1.408284274384858e-01, -1.482929200484677e-01, -1.408284274384857e-01, -1.482929200484676e-01, -3.655899553005643e-03, -3.759825448996084e-03, -4.640149280111321e-03, -4.710380099657405e-03, -3.469756726644593e-03, -3.674582378282095e-03, -7.751767461935134e-02, -7.731837256631602e-02, -3.543866471983383e-03, -4.866762866019134e-03, -3.543866471983380e-03, -4.866762866019129e-03, -7.994084047114020e-01, -8.028644663246945e-01, -7.823625313411245e-01, -7.859415455039106e-01, -8.126125109764333e-01, -8.157350778433526e-01, -8.135808125631731e-01, -7.967735259581772e-01, -8.131083836986968e-01, -8.162176255491030e-01, -8.131083836986968e-01, -7.943261369647555e-01, -7.762570170218471e-01, -7.792355572452907e-01, -5.898486895311736e-01, -6.483761996889187e-01, -6.337188171929794e-01, -7.016222728252856e-01, -6.880570055308266e-01, -6.908806845668812e-01, -6.593937414258209e-01, -6.624430474341644e-01, -6.593937414258210e-01, -7.242049633278751e-01, -8.386815278996704e-01, -9.198385623734742e-01, -2.816129417455239e-01, -2.829959350212997e-01, -3.002755124012925e-01, -3.299873458987178e-01, -4.241861048603469e-01, -4.159573075584767e-01, -3.664559981400784e-01, -3.661427039768539e-01, -3.664559981400786e-01, -3.559610989114573e-01, -5.378735303974261e-01, -5.420026755396583e-01, -4.602114268801775e-02, -4.633483927857207e-02, -6.158500760651386e-02, -6.363527980380329e-02, -3.958483628735113e-01, -4.034432471456487e-01, -9.598123754915072e-02, -1.011700758280704e-01, -9.598123754915074e-02, -1.011700758280705e-01, -1.159197735220815e-02, -1.201189230025124e-02, -1.248385057441415e-03, -1.251238323980235e-03, -2.566871934810362e-03, -2.730055043327592e-03, -9.022112191084174e-02, -9.139737368677493e-02, -3.356781189467758e-03, -4.460765949126525e-03, -3.356781189467754e-03, -4.507212438692348e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_5_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_5", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.479581085952925e-08, 0.000000000000000e+00, -2.479710299927629e-08, -2.479566134328916e-08, 0.000000000000000e+00, -2.479699411871896e-08, -2.479505566236914e-08, 0.000000000000000e+00, -2.479616156421114e-08, -2.479675868322367e-08, 0.000000000000000e+00, -2.709205253791485e-08, -2.479573253070311e-08, 0.000000000000000e+00, -2.709062833153261e-08, -2.708899122594317e-08, 0.000000000000000e+00, -2.709062833153261e-08, -2.769030481868334e-05, 0.000000000000000e+00, -2.314598882093197e-05, -2.769503594164708e-05, 0.000000000000000e+00, -2.769084903158346e-05, -2.778737478053094e-05, 0.000000000000000e+00, -2.780270735092405e-05, -2.774447147274632e-05, 0.000000000000000e+00, -2.774304682713730e-05, -2.769750934649365e-05, 0.000000000000000e+00, -2.782402922850596e-05, -2.315328332966972e-05, 0.000000000000000e+00, -2.782402922850596e-05, -8.293570983929025e-03, 0.000000000000000e+00, -8.445050320367185e-03, -8.263007406339389e-03, 0.000000000000000e+00, -1.083425908333023e-02, -1.016264957305462e-02, 0.000000000000000e+00, -1.018066440328175e-02, -1.054569050895486e-02, 0.000000000000000e+00, -8.235137763485192e-03, -8.369072797568785e-03, 0.000000000000000e+00, -7.630976238568277e-03, -1.073319706784096e-02, 0.000000000000000e+00, -1.016171938000398e-02, -1.007957819944256e+00, 0.000000000000000e+00, -1.484942153427999e+00, -1.020559474343059e+00, 0.000000000000000e+00, -1.492300205472826e+00, -2.901359612978885e-03, 0.000000000000000e+00, -2.369871791995530e-03, -1.260867453218191e+00, 0.000000000000000e+00, -1.415164420590221e+00, -1.196559247921843e+00, 0.000000000000000e+00, -1.683019807888048e+00, -1.196559247921842e+00, 0.000000000000000e+00, -7.695828927023807e-01, -6.185671404209806e+02, 0.000000000000000e+00, -5.490535294216318e+02, -1.764089949402257e+02, 0.000000000000000e+00, -5.033752066867473e+02, -4.422498425106875e+00, 0.000000000000000e+00, -1.224315194955195e+01, -1.462305720973814e+03, 0.000000000000000e+00, -1.519978255413237e+03, -7.571605997876761e+02, 0.000000000000000e+00, -3.055946556262037e+03, -7.571605997876761e+02, 0.000000000000000e+00, -3.055946556262037e+03, -7.933804323609906e-06, 0.000000000000000e+00, -7.941436705198234e-06, -7.932018054418522e-06, 0.000000000000000e+00, -7.939711106724921e-06, -7.933733237799247e-06, 0.000000000000000e+00, -7.941397870969460e-06, -7.932198251442621e-06, 0.000000000000000e+00, -7.939827911874199e-06, -7.439108865787124e-06, 0.000000000000000e+00, -7.940570752998898e-06, -7.932873966992917e-06, 0.000000000000000e+00, -7.446287024314370e-06, -2.408022348440360e-04, 0.000000000000000e+00, -2.415889054335318e-04, -2.408732558778556e-04, 0.000000000000000e+00, -2.416290276267396e-04, -2.400788582076252e-04, 0.000000000000000e+00, -2.410857831615954e-04, -2.404855511198377e-04, 0.000000000000000e+00, -2.413932376115445e-04, -2.412324241217325e-04, 0.000000000000000e+00, -1.988737825313673e-04, -2.412324241217325e-04, 0.000000000000000e+00, -2.417767264150266e-04, -4.195991903364844e-02, 0.000000000000000e+00, -3.729882538874257e-02, -3.436074681099899e-02, 0.000000000000000e+00, -3.445270684411115e-02, -5.129447171627734e-02, 0.000000000000000e+00, -4.888556786557534e-02, -5.186537166427194e-02, 0.000000000000000e+00, -4.752142854482633e-02, -3.770482037462665e-02, 0.000000000000000e+00, -3.897011650728843e-02, -3.770482037462666e-02, 0.000000000000000e+00, -4.450601374404220e-02, -2.049868047238628e+00, 0.000000000000000e+00, -2.014121581636857e+00, -5.122820897454111e-01, 0.000000000000000e+00, -7.701315067233236e-01, -2.424729626006888e+00, 0.000000000000000e+00, -2.305351645912572e+00, -3.861801404781814e-04, 0.000000000000000e+00, -3.869465131889598e-04, -2.006512375674108e+00, 0.000000000000000e+00, -2.328196022644248e+00, -2.006512375674109e+00, 0.000000000000000e+00, -2.328196022644250e+00, -6.784363118232644e+02, 0.000000000000000e+00, -1.967465707642062e+03, -1.538253377803544e+03, 0.000000000000000e+00, -1.401430703428274e+03, -7.385127197400808e+03, 0.000000000000000e+00, -6.900206443846954e+03, -5.291756621267369e+00, 0.000000000000000e+00, -2.157786860090498e+00, -3.071238063172515e+03, 0.000000000000000e+00, -2.905328545939431e+03, -3.071238063172516e+03, 0.000000000000000e+00, -2.905328545939430e+03, -5.032445043521003e-02, 0.000000000000000e+00, -4.956409154358226e-02, -5.102644466320859e-02, 0.000000000000000e+00, -5.026083009242168e-02, -4.926375510214346e-02, 0.000000000000000e+00, -4.855508205943693e-02, -4.932138218864941e-02, 0.000000000000000e+00, -4.983542179313409e-02, -4.929403515875698e-02, 0.000000000000000e+00, -4.858190433117292e-02, -4.929403515875698e-02, 0.000000000000000e+00, -4.993739894155336e-02, -5.605009307954401e-02, 0.000000000000000e+00, -5.532942863272788e-02, -7.950658070046022e-02, 0.000000000000000e+00, -6.739533384005565e-02, -7.480037006288344e-02, 0.000000000000000e+00, -6.547856811972126e-02, -6.814395488331061e-02, 0.000000000000000e+00, -6.725445979383166e-02, -7.172992119671773e-02, 0.000000000000000e+00, -7.081219537067683e-02, -7.172992119671773e-02, 0.000000000000000e+00, -6.396108068182560e-02, -2.771648385990952e-02, 0.000000000000000e+00, -2.526504224945255e-02, -5.234721165116849e-01, 0.000000000000000e+00, -5.192743215253818e-01, -2.985708362960203e-01, 0.000000000000000e+00, -3.912592583786084e-01, -1.973987504873514e-01, 0.000000000000000e+00, -2.363177186811262e-01, -3.277903691491574e-01, 0.000000000000000e+00, -3.303817323677891e-01, -3.277903691491577e-01, 0.000000000000000e+00, -2.633627630401361e-01, -9.853551197213162e-02, 0.000000000000000e+00, -9.827256034951892e-02, -4.705447447031303e+00, 0.000000000000000e+00, -4.596972972078607e+00, -7.387657436945722e+00, 0.000000000000000e+00, -7.089607310367914e+00, -3.276772916107881e-01, 0.000000000000000e+00, -3.402163829642019e-01, -4.107219129213396e+00, 0.000000000000000e+00, -4.280136680844048e+00, -4.107219129213397e+00, 0.000000000000000e+00, -4.280136680844048e+00, -6.469463523737177e+01, 0.000000000000000e+00, -5.984112844588822e+01, -2.277269550835585e+04, 0.000000000000000e+00, -2.261906595906416e+04, -2.805983058717761e+03, 0.000000000000000e+00, -2.553532212958780e+03, -2.044365136829226e+00, 0.000000000000000e+00, -2.168362626732884e+00, -5.500439674293782e+03, 0.000000000000000e+00, -3.520399057542893e+03, -5.500439674293792e+03, 0.000000000000000e+00, -1.079958268277015e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_5_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_5", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.108228719058792e-03, 1.108379359218254e-03, 1.108247040355838e-03, 1.108392637128567e-03, 1.108296730369678e-03, 1.108466307342341e-03, 1.108091490131463e-03, 1.511376340054248e-03, 1.108240662570295e-03, 1.511378742589583e-03, 1.511347024349542e-03, 1.511378742589583e-03, 7.356250831929118e-03, 1.322213949849513e-03, 7.357154102140704e-03, 7.356190074352524e-03, 7.374705865142218e-03, 7.377761701061521e-03, 7.367711738479294e-03, 7.367632542071255e-03, 7.355415927270520e-03, 7.383273463977649e-03, 1.320162188489339e-03, 7.383273463977649e-03, -4.442092666505523e-03, -4.325799349411014e-03, -4.473929968881402e-03, 2.401561107908289e-02, 2.140058039589388e-02, 2.107501924716873e-02, 2.228690340249503e-02, -4.663965590326424e-03, -4.218813114800818e-03, -4.841592612152060e-03, 2.428934499058078e-02, 1.980935071291566e-02, -1.504911343281440e-02, 6.324273607804182e-02, -1.545524429711588e-02, 6.643672017891332e-02, 1.053123828386283e-02, -3.460539793074645e-03, 2.305367810407269e-02, 2.693613456582009e-02, 5.267632214794388e-02, 1.181000509093809e-02, 5.267632214794386e-02, -1.637683118063021e-03, 9.782956857199755e-04, 1.041943395567577e-03, -1.339744343791050e-06, 1.126204854965511e-03, -1.099112538044268e-04, 4.538845958766318e-03, 5.022805492719524e-04, 4.964229215594001e-04, 8.501213327712885e-04, 6.322234546587098e-04, 8.501213327712885e-04, 6.322234546587044e-04, 6.405915296637451e-03, 6.407473141173702e-03, 6.408392686557947e-03, 6.409868718697144e-03, 6.406098985853717e-03, 6.407588747912836e-03, 6.408222471653725e-03, 6.409762750988519e-03, 5.341351845171706e-03, 6.408671964060665e-03, 6.407151396726689e-03, 5.342493641995470e-03, 1.187659477044782e-02, 1.190330523825901e-02, 1.204216321879205e-02, 1.206294960396289e-02, 1.171304401618883e-02, 1.178710735103496e-02, 1.186954377023643e-02, 1.194172853047804e-02, 1.208538449764513e-02, 8.673554463632085e-04, 1.208538449764513e-02, 1.200719207768206e-02, 5.021468641798420e-02, 2.436012482715650e-02, 5.087758303061308e-02, 5.106108910562267e-02, 4.871288303534534e-02, 5.014654346503185e-02, 5.258354279257358e-02, 5.243629955547870e-02, 5.000987404797001e-02, 2.518420233052227e-02, 5.000987404797000e-02, 5.121664969659488e-02, 1.253037407482239e-02, 1.267085540571422e-02, -9.028341934626668e-03, 3.289731563399252e-02, 1.093796300188486e-02, 1.219362187332892e-02, 1.589948130046045e-02, 1.590874989519264e-02, 1.848272971454998e-02, 2.553749029697205e-02, 1.848272971455004e-02, 2.553749029697199e-02, -5.473823740967121e-08, 3.202297864013746e-04, 4.706483245140165e-04, 4.485498628852852e-04, 9.448254579533133e-04, 1.048564229530397e-03, 7.738000445129952e-03, -6.254496908996821e-04, 4.186037416787881e-04, 1.025768794297553e-03, 4.186037416787842e-04, 1.025768794297551e-03, 5.958725560706680e-02, 5.938807214622871e-02, 5.886621900731170e-02, 5.868254493347159e-02, 5.542870354676689e-02, 5.535697120810639e-02, 5.637845412101443e-02, 5.913963487482342e-02, 5.590777987938509e-02, 5.581736793169280e-02, 5.590777987938509e-02, 5.903780093626246e-02, 6.108023144611491e-02, 6.091519553298904e-02, 5.703304891245147e-02, 2.029616251072244e-02, 5.926835337431478e-02, 3.376642663779264e-02, 6.058418202036430e-02, 6.042200655181616e-02, 6.001435813809168e-02, 5.988484286122726e-02, 6.001435813809166e-02, 4.003875380590573e-02, 4.741694543492835e-02, 3.329855962289938e-02, 4.309037380869412e-02, 4.343816382775090e-02, -1.189915554189850e-02, 5.417731968458315e-02, 2.917134292115847e-03, 6.609110383490288e-02, 6.353918582088694e-02, 6.388268916879826e-02, 6.353918582088693e-02, -6.171565220835902e-03, 5.714634129097954e-02, 5.772268984878525e-02, -1.093216603110963e-04, -1.093523436767877e-04, 5.362654633753393e-03, 5.684727552656213e-03, 7.639518702690348e-02, 8.041621252420499e-02, 1.158376108525367e-02, 1.426080697331169e-02, 1.158376108525371e-02, 1.426080697331183e-02, -1.586432314738075e-06, -1.739860902923386e-06, 1.356716623245160e-04, 1.356824918975087e-04, -7.876069309341663e-08, -1.003924819655776e-07, -1.321449994556729e-03, -1.548675310227913e-03, 6.371450401113847e-04, 9.570579111820576e-04, 6.371450401113830e-04, -5.984218482548951e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
