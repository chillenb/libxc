
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_5_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_5", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.258931905461785e+01, -2.258936989714574e+01, -2.258969141804391e+01, -2.258893615703313e+01, -2.258931827498035e+01, -2.258931827498035e+01, -3.452670255178285e+00, -3.452696215380775e+00, -3.453636814372832e+00, -3.455422969594644e+00, -3.454099157497229e+00, -3.454099157497229e+00, -6.607147602908534e-01, -6.604090780505243e-01, -6.537205958736739e-01, -6.608181266289039e-01, -6.597755681717639e-01, -6.597755681717639e-01, -1.942513293812150e-01, -1.966287521678263e-01, -7.632559009465185e-01, -1.443307591752808e-01, -1.843316278900783e-01, -1.843316278900782e-01, -6.774606215330509e-03, -7.128944297715470e-03, -3.893016618205038e-02, -3.864442373748819e-03, -5.426488568470960e-03, -5.426488568470960e-03, -5.490592394110552e+00, -5.490797493287001e+00, -5.490644345629980e+00, -5.490823729430506e+00, -5.490674212151594e+00, -5.490674212151594e+00, -2.125410977697727e+00, -2.145222764196938e+00, -2.123849831367021e+00, -2.141875835628368e+00, -2.137084377548325e+00, -2.137084377548325e+00, -6.014660305658768e-01, -6.370757581992710e-01, -5.454427465411926e-01, -5.468245656202646e-01, -6.116133384664514e-01, -6.116133384664515e-01, -1.008187207685147e-01, -1.942424193038360e-01, -9.332022067148560e-02, -1.858539460362139e+00, -1.193124625367056e-01, -1.193124625367056e-01, -2.914654157806568e-03, -3.733589475682582e-03, -2.888612256322349e-03, -6.274142029523609e-02, -3.633791094065109e-03, -3.633791094065110e-03, -6.083411203332816e-01, -6.080812737291610e-01, -6.081633450194093e-01, -6.082331635551419e-01, -6.081948512847037e-01, -6.081948512847037e-01, -5.874693960097110e-01, -5.338418085399257e-01, -5.491581099401341e-01, -5.636442530818102e-01, -5.558468918477264e-01, -5.558468918477264e-01, -6.618325918962247e-01, -2.462953887416520e-01, -2.910405293801307e-01, -3.620833851441508e-01, -3.269843792745284e-01, -3.269843792745285e-01, -4.793471943162574e-01, -3.741712173352267e-02, -5.063547385676640e-02, -3.459885592861520e-01, -8.025986189368886e-02, -8.025986189368886e-02, -9.328641329348571e-03, -9.669119605455789e-04, -2.134081969140261e-03, -7.570583601606005e-02, -3.337826944402145e-03, -3.337826944402142e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_5_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_5", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.732963160409934e+01, -2.732945745715796e+01, -2.732978135527495e+01, -2.732956622892737e+01, -2.733017512257639e+01, -2.733015437081069e+01, -2.732848472718319e+01, -2.732799948430346e+01, -2.732972467525220e+01, -2.732879818300508e+01, -2.732972467525220e+01, -2.732879818300508e+01, -4.320085106530941e+00, -4.320099387195805e+00, -4.320197738164693e+00, -4.320184181870515e+00, -4.322544842798040e+00, -4.323054812820359e+00, -4.321337515079335e+00, -4.321557223807496e+00, -4.319125755766343e+00, -4.323736097641169e+00, -4.319125755766343e+00, -4.323736097641169e+00, -7.967819610159510e-01, -7.995372372969864e-01, -7.957515570635466e-01, -7.990268106082432e-01, -7.830422177819384e-01, -7.798290171068247e-01, -7.876595774007689e-01, -7.888915246640391e-01, -8.045403349851549e-01, -7.730775784291518e-01, -8.045403349851549e-01, -7.730775784291518e-01, -2.175006922776346e-01, -2.241679161346541e-01, -2.192124198949555e-01, -2.268084936526004e-01, -9.209430873109145e-01, -9.388955988781190e-01, -1.735157057602490e-01, -1.759075362939465e-01, -2.266492798861759e-01, -1.289293692487408e-01, -2.266492798861757e-01, -1.289293692487407e-01, -8.024984718116942e-03, -8.525783211879202e-03, -8.411034370473599e-03, -9.008068323153229e-03, -4.680449302700220e-02, -4.939853435965287e-02, -4.837492263489815e-03, -4.754910666842741e-03, -7.163922172912204e-03, -4.093848885282947e-03, -7.163922172912202e-03, -4.093848885282948e-03, -6.785191533021572e+00, -6.783403827892693e+00, -6.789473961605198e+00, -6.787541417614838e+00, -6.785406988528609e+00, -6.783529856553775e+00, -6.789082301061202e+00, -6.787289358918884e+00, -6.787402278549346e+00, -6.785484950557737e+00, -6.787402278549346e+00, -6.785484950557737e+00, -2.351786307111191e+00, -2.351138106056927e+00, -2.366574804171049e+00, -2.365456771675719e+00, -2.335598648995334e+00, -2.339500890379770e+00, -2.347592810055811e+00, -2.351769758978184e+00, -2.373144504414461e+00, -2.360383464711282e+00, -2.373144504414461e+00, -2.360383464711282e+00, -7.465541248828994e-01, -7.448049267728392e-01, -8.602464972180279e-01, -8.614864152436984e-01, -6.629295944448356e-01, -6.953806746174914e-01, -7.286290354726737e-01, -7.585196651957476e-01, -7.837883261415840e-01, -7.421024822584608e-01, -7.837883261415841e-01, -7.421024822584613e-01, -1.235404843654766e-01, -1.246620644002490e-01, -2.274821356099215e-01, -2.284932792528472e-01, -1.120295798312939e-01, -1.178655093231662e-01, -2.567591763127274e+00, -2.566591235912357e+00, -1.403548080658419e-01, -1.476568564626003e-01, -1.403548080658419e-01, -1.476568564626003e-01, -3.647144398440918e-03, -3.789060893838437e-03, -4.665166340841860e-03, -4.737520671495980e-03, -3.480793565054478e-03, -3.686784183694154e-03, -7.764783911871699e-02, -7.805786089718031e-02, -3.577251787072906e-03, -4.870339125149239e-03, -3.577251787072907e-03, -4.870339125149238e-03, -8.061940487199478e-01, -8.094925744396806e-01, -7.888886910909101e-01, -7.923260372256516e-01, -7.949426175989489e-01, -7.983699944988257e-01, -8.000152401589106e-01, -8.033285201490710e-01, -7.974789604864418e-01, -8.008470778784402e-01, -7.974789604864418e-01, -8.008470778784402e-01, -7.892510039261069e-01, -7.918273183147311e-01, -5.935132133080523e-01, -5.965117305617726e-01, -6.405050141570617e-01, -6.442130945566515e-01, -6.980135175490652e-01, -7.008213458552456e-01, -6.683695360677021e-01, -6.711667646835052e-01, -6.683695360677022e-01, -6.711667646835053e-01, -8.967682996155495e-01, -9.000860777781330e-01, -2.805419874286676e-01, -2.818859507669628e-01, -3.255370980544762e-01, -3.279496598235054e-01, -4.202314010220835e-01, -4.226761697434063e-01, -3.662836664888194e-01, -3.660553112245007e-01, -3.662836664888199e-01, -3.660553112245008e-01, -5.495828791971633e-01, -5.537749454962254e-01, -4.586871872254681e-02, -4.619251808703978e-02, -6.172103036251757e-02, -6.376478201298243e-02, -4.086583620519518e-01, -4.165543342444595e-01, -9.595932717141629e-02, -1.010624741435715e-01, -9.595932717141617e-02, -1.010624741435716e-01, -1.153914593432362e-02, -1.196059594161429e-02, -1.261468502452559e-03, -1.265293751305678e-03, -2.544317491992250e-03, -2.706247073871016e-03, -9.195741867981783e-02, -9.340148480044938e-02, -3.385448777341896e-03, -4.464126748082092e-03, -3.385448777341889e-03, -4.464126748082090e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_5_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_5", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.693443501329540e-08, 0.000000000000000e+00, -2.693594588109213e-08, -2.693421207892843e-08, 0.000000000000000e+00, -2.693578365757385e-08, -2.693345749857307e-08, 0.000000000000000e+00, -2.693471359918352e-08, -2.693598954875664e-08, 0.000000000000000e+00, -2.693793760202270e-08, -2.693430936558745e-08, 0.000000000000000e+00, -2.693661746359695e-08, -2.693430936558745e-08, 0.000000000000000e+00, -2.693661746359695e-08, -2.504364091493767e-05, 0.000000000000000e+00, -2.503787244127396e-05, -2.504861511998990e-05, 0.000000000000000e+00, -2.504092010428480e-05, -2.514248262538828e-05, 0.000000000000000e+00, -2.515741874438099e-05, -2.511288658198830e-05, 0.000000000000000e+00, -2.510878808385605e-05, -2.504890246485310e-05, 0.000000000000000e+00, -2.519163068006613e-05, -2.504890246485310e-05, 0.000000000000000e+00, -2.519163068006613e-05, -9.096985713184985e-03, 0.000000000000000e+00, -9.229130250231546e-03, -9.075510771993795e-03, 0.000000000000000e+00, -9.211123040419477e-03, -8.663983640215617e-03, 0.000000000000000e+00, -8.721098571443018e-03, -9.106200277439259e-03, 0.000000000000000e+00, -9.248335803457146e-03, -9.088132638536578e-03, 0.000000000000000e+00, -8.977806926414485e-03, -9.088132638536578e-03, 0.000000000000000e+00, -8.977806926414485e-03, -1.367133923390359e+00, 0.000000000000000e+00, -1.469696787545165e+00, -1.367011203268635e+00, 0.000000000000000e+00, -1.472678418618478e+00, -2.185862152501962e-03, 0.000000000000000e+00, -2.521200648085985e-03, -1.126980204337591e+00, 0.000000000000000e+00, -1.324942372503525e+00, -1.156476715080863e+00, 0.000000000000000e+00, -1.367591411174666e+00, -1.156476715080863e+00, 0.000000000000000e+00, -1.367591411174667e+00, -6.136861767446953e+02, 0.000000000000000e+00, -5.471979354340432e+02, -5.662777857024292e+02, 0.000000000000000e+00, -4.996688145612272e+02, -1.229010625474337e+01, 0.000000000000000e+00, -1.148179236803370e+01, -1.350453591694143e+03, 0.000000000000000e+00, -1.420536557388136e+03, -7.392074980784457e+02, 0.000000000000000e+00, -2.636971031786144e+03, -7.392074980784448e+02, 0.000000000000000e+00, -2.636971031786145e+03, -7.930392889863757e-06, 0.000000000000000e+00, -7.938217576677723e-06, -7.928646382191252e-06, 0.000000000000000e+00, -7.936530328898771e-06, -7.930402066020933e-06, 0.000000000000000e+00, -7.938236372878801e-06, -7.928898177041716e-06, 0.000000000000000e+00, -7.936698317565958e-06, -7.929423840775205e-06, 0.000000000000000e+00, -7.937361041778116e-06, -7.929423840775205e-06, 0.000000000000000e+00, -7.937361041778116e-06, -2.347642134435554e-04, 0.000000000000000e+00, -2.357182424391200e-04, -2.356889142267540e-04, 0.000000000000000e+00, -2.365791593162566e-04, -2.349481295514281e-04, 0.000000000000000e+00, -2.358370866714698e-04, -2.361279611912380e-04, 0.000000000000000e+00, -2.369436714628965e-04, -2.350550193257880e-04, 0.000000000000000e+00, -2.362587577435818e-04, -2.350550193257880e-04, 0.000000000000000e+00, -2.362587577435818e-04, -3.980675223329883e-02, 0.000000000000000e+00, -4.056026797214157e-02, -3.240936939827097e-02, 0.000000000000000e+00, -3.256863106342359e-02, -4.672488233339619e-02, 0.000000000000000e+00, -4.530845858887834e-02, -4.642637888976953e-02, 0.000000000000000e+00, -4.318260824620509e-02, -3.612388130869883e-02, 0.000000000000000e+00, -4.209717539215681e-02, -3.612388130869883e-02, 0.000000000000000e+00, -4.209717539215681e-02, -1.883786964158484e+00, 0.000000000000000e+00, -1.837365513607094e+00, -7.609167010393446e-01, 0.000000000000000e+00, -7.497558301749775e-01, -2.184559321076752e+00, 0.000000000000000e+00, -2.114008261313712e+00, -3.500396491741806e-04, 0.000000000000000e+00, -3.507465846942807e-04, -1.887827431466740e+00, 0.000000000000000e+00, -2.223572666493408e+00, -1.887827431466740e+00, 0.000000000000000e+00, -2.223572666493410e+00, -1.680166015228099e+03, 0.000000000000000e+00, -1.518751928792861e+03, -1.317992552563804e+03, 0.000000000000000e+00, -1.184054293790707e+03, -6.803284316285807e+03, 0.000000000000000e+00, -6.330013799839318e+03, -4.687087907535036e+00, 0.000000000000000e+00, -5.186786888912764e+00, -2.133164888835640e+03, 0.000000000000000e+00, -2.855660344077746e+03, -2.133164888835642e+03, 0.000000000000000e+00, -2.855660344077745e+03, -4.990381668368606e-02, 0.000000000000000e+00, -4.916079544045977e-02, -5.062104866795985e-02, 0.000000000000000e+00, -4.987158681573287e-02, -5.039024184050928e-02, 0.000000000000000e+00, -4.964099583948414e-02, -5.018175189632090e-02, 0.000000000000000e+00, -4.943664881009626e-02, -5.028779486927598e-02, 0.000000000000000e+00, -4.954062104910648e-02, -5.028779486927598e-02, 0.000000000000000e+00, -4.954062104910648e-02, -5.512427663236020e-02, 0.000000000000000e+00, -5.444652433579177e-02, -7.887360128490718e-02, 0.000000000000000e+00, -7.796601459198774e-02, -7.398969288168941e-02, 0.000000000000000e+00, -7.301909591116555e-02, -6.722542538653352e-02, 0.000000000000000e+00, -6.635342753251802e-02, -7.079575637602924e-02, 0.000000000000000e+00, -6.992211685203766e-02, -7.079575637602924e-02, 0.000000000000000e+00, -6.992211685203767e-02, -2.578407339175640e-02, 0.000000000000000e+00, -2.597773433227459e-02, -5.156443517899434e-01, 0.000000000000000e+00, -5.112928875034449e-01, -3.806169233940769e-01, 0.000000000000000e+00, -3.799464823416044e-01, -2.257365393934589e-01, 0.000000000000000e+00, -2.210523359631060e-01, -3.145992043963746e-01, 0.000000000000000e+00, -3.170362392898618e-01, -3.145992043963750e-01, 0.000000000000000e+00, -3.170362392898620e-01, -9.449265962269041e-02, 0.000000000000000e+00, -9.457641274396053e-02, -1.368592150479414e+01, 0.000000000000000e+00, -1.327516419068287e+01, -6.786842135012089e+00, 0.000000000000000e+00, -6.536132057383256e+00, -3.048382239050194e-01, 0.000000000000000e+00, -3.233538545708183e-01, -3.800021224781487e+00, 0.000000000000000e+00, -3.982587304332990e+00, -3.800021224781486e+00, 0.000000000000000e+00, -3.982587304332992e+00, -1.784445371896592e+02, 0.000000000000000e+00, -1.632516181212221e+02, -1.428418399439322e+04, 0.000000000000000e+00, -1.242818897455655e+04, -8.805411440821899e+03, 0.000000000000000e+00, -7.999931018374696e+03, -4.499397242431884e+00, 0.000000000000000e+00, -4.836973521750457e+00, -4.061442216750236e+03, 0.000000000000000e+00, -3.458707976336550e+03, -4.061442216750246e+03, 0.000000000000000e+00, -3.458707976336558e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_5_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_5", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_5_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_5", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.483193368284425e-03, 1.483341041442718e-03, 1.483196124425082e-03, 1.483343019732657e-03, 1.483214646963696e-03, 1.483366810465067e-03, 1.483184698851483e-03, 1.483328374224882e-03, 1.483195078903886e-03, 1.483350774462276e-03, 1.483195078903886e-03, 1.483350774462276e-03, 3.753058063092394e-03, 3.747966241686748e-03, 3.754793862941444e-03, 3.748736813110099e-03, 3.784378248985717e-03, 3.788602377211270e-03, 3.790367955998484e-03, 3.786641856604039e-03, 3.750180222229325e-03, 3.813549188248668e-03, 3.750180222229325e-03, 3.813549188248668e-03, 4.354112983637879e-03, 4.361680118916510e-03, 4.379932533698926e-03, 4.345089904021405e-03, 4.511972896679390e-03, 4.949658214322163e-03, 5.804873394223227e-03, 5.929410143757878e-03, 3.917414277579776e-03, 7.584667958490943e-03, 3.917414277579776e-03, 7.584667958490943e-03, 4.658810341715901e-02, 5.975718130921664e-02, 4.696081176091962e-02, 6.168045610212355e-02, -9.164848419005218e-04, -1.017267220893191e-03, 1.428660418339776e-02, 2.035316038720017e-02, 4.369836079587949e-02, 5.690198915076023e-03, 4.369836079587947e-02, 5.690198915075979e-03, 9.588296836385104e-04, 1.033036510321406e-03, 1.009868211848922e-03, 1.105278494645622e-03, 3.410086123271368e-03, 3.825099074898368e-03, 4.097190291255667e-04, 4.176019634255332e-04, 7.998187768394155e-04, 4.318091829388199e-04, 7.998187768394106e-04, 4.318091829388217e-04, 6.398320590225346e-03, 6.400311773909469e-03, 6.400907576300801e-03, 6.402811873547435e-03, 6.398684419663760e-03, 6.400556448650683e-03, 6.400894809388619e-03, 6.402818570572060e-03, 6.399481370573354e-03, 6.401541249085930e-03, 6.399481370573354e-03, 6.401541249085930e-03, 1.022773982140017e-02, 1.030281453878495e-02, 1.061857862738088e-02, 1.067891746701889e-02, 1.031525996572875e-02, 1.035836687012396e-02, 1.067606510322120e-02, 1.072426945372793e-02, 1.039158894932504e-02, 1.049858744854277e-02, 1.039158894932504e-02, 1.049858744854277e-02, 3.918015598010186e-02, 3.997091588259585e-02, 4.184150612917293e-02, 4.248964935531027e-02, 2.669594975649336e-02, 3.273220847176949e-02, 2.890359991649170e-02, 3.314916994881448e-02, 4.177003845306451e-02, 3.956990469501328e-02, 4.177003845306452e-02, 3.956990469501331e-02, 9.515069709068992e-03, 9.371065401240089e-03, 2.918972100064502e-02, 2.902314581745707e-02, 7.868177171630866e-03, 9.226850771329190e-03, 1.015649922610961e-02, 1.016654020649052e-02, 1.485598933649018e-02, 2.135212237156388e-02, 1.485598933649021e-02, 2.135212237156390e-02, 1.548773211993245e-04, 1.620360768266012e-04, 3.154978181630136e-04, 2.897040517328583e-04, 7.657306388810785e-04, 8.406090387449881e-04, 5.448823566413089e-03, 6.709482163983868e-03, 1.573991759103583e-04, 9.818304417309087e-04, 1.573991759103559e-04, 9.818304417309074e-04, 5.865037803101162e-02, 5.848344231307662e-02, 5.783594714268542e-02, 5.768747603931061e-02, 5.812311133122535e-02, 5.797069370397179e-02, 5.836312999445396e-02, 5.820016826631194e-02, 5.824254399369667e-02, 5.808503308275013e-02, 5.824254399369667e-02, 5.808503308275013e-02, 5.914649924326171e-02, 5.906197209793251e-02, 5.486540272817299e-02, 5.487254451026002e-02, 5.669854461632418e-02, 5.668399257545224e-02, 5.803978586376254e-02, 5.790998845634285e-02, 5.722414156728805e-02, 5.721286997749631e-02, 5.722414156728808e-02, 5.721286997749631e-02, 3.602542793964877e-02, 3.721904323540962e-02, 3.978044357599513e-02, 3.999671437340556e-02, 4.437333139102981e-02, 4.538698982617399e-02, 4.316296535198409e-02, 4.265785057636566e-02, 4.891627282836728e-02, 4.912956938277548e-02, 4.891627282836747e-02, 4.912956938277547e-02, 4.500302167962066e-02, 4.663325418313748e-02, 3.866036517965244e-03, 3.784350559630423e-03, 4.254532051523742e-03, 4.549074726753359e-03, 4.872665873800059e-02, 6.084208861588516e-02, 9.123781125327786e-03, 1.132881084451477e-02, 9.123781125327723e-03, 1.132881084451485e-02, 6.360794517386166e-04, 6.361028922258758e-04, 3.777081560937873e-05, 2.480552826635690e-05, 4.157538907482970e-04, 4.533434945107555e-04, 9.751847403749708e-03, 1.184219867731623e-02, 2.849512598094074e-04, 9.150527332499261e-04, 2.849512598094054e-04, 9.150527332499246e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
