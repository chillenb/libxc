
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_lak_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_lak", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.320429833496535e+01, -2.320436657626558e+01, -2.320470982357646e+01, -2.320369513003410e+01, -2.320422111929478e+01, -2.320422111929478e+01, -3.320376218903810e+00, -3.320567257254540e+00, -3.325960478623541e+00, -3.327070586459731e+00, -3.325352971850536e+00, -3.325352971850536e+00, -5.311934153926436e-01, -5.305982938602788e-01, -5.175741370238893e-01, -5.285751100136531e-01, -5.267583596157387e-01, -5.267583596157387e-01, -1.790452152760670e-01, -1.807986202742464e-01, -5.924407180698625e-01, -9.981716802288923e-02, -1.613791237880643e-01, -1.613791237880642e-01, -3.260837431083177e-03, -3.510306481514830e-03, -2.761895668612722e-02, -1.529226034433130e-03, -2.467996125755639e-03, -2.467996125755640e-03, -5.668412828573233e+00, -5.669514061870920e+00, -5.668480445297592e+00, -5.669451967566376e+00, -5.668962320349102e+00, -5.668962320349102e+00, -2.082110556841220e+00, -2.105389378973714e+00, -2.075674747772573e+00, -2.096184575184009e+00, -2.098355679827793e+00, -2.098355679827793e+00, -6.174064323934720e-01, -6.745837200428111e-01, -5.391294929563936e-01, -5.593076568497219e-01, -6.309332166431175e-01, -6.309332166431176e-01, -6.733513466667670e-02, -1.698767577100060e-01, -6.275869504437834e-02, -1.928384142603682e+00, -8.363825882233489e-02, -8.363825882233494e-02, -1.097639171511071e-03, -1.504959154425243e-03, -1.238462192843070e-03, -4.404268488030253e-02, -1.581468716861547e-03, -1.581468716861548e-03, -6.409710676770284e-01, -6.372429481002360e-01, -6.385634197362631e-01, -6.396438738535032e-01, -6.391031218136415e-01, -6.391031218136415e-01, -6.220852990049011e-01, -5.326872150105127e-01, -5.583751265542474e-01, -5.837859365086441e-01, -5.706614356275812e-01, -5.706614356275812e-01, -6.977233824017338e-01, -2.284734625637095e-01, -2.715599328355958e-01, -3.477750046707475e-01, -3.112938855077188e-01, -3.112938855077188e-01, -4.777497856450771e-01, -2.627133584173744e-02, -3.617620966973890e-02, -3.433703477303388e-01, -5.412291881992147e-02, -5.412291881992148e-02, -5.049715289150587e-03, -2.783791965824796e-04, -7.362055210937786e-04, -5.202367244871871e-02, -1.433046708646874e-03, -1.433046708646872e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_lak_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_lak", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.048881217807187e+01, -3.048896209254702e+01, -3.048893278037220e+01, -3.048904966167033e+01, -3.048933526780897e+01, -3.048962167654557e+01, -3.048797468881899e+01, -3.048788731610942e+01, -3.048888398540165e+01, -3.048859274672267e+01, -3.048888398540165e+01, -3.048859274672267e+01, -4.949407064376313e+00, -4.950330916546402e+00, -4.949492041826076e+00, -4.950484121805889e+00, -4.952299809301792e+00, -4.953143964923998e+00, -4.946915447281513e+00, -4.948025992442510e+00, -4.948315039292424e+00, -4.950575814189630e+00, -4.948315039292424e+00, -4.950575814189630e+00, -7.383591420671689e-01, -7.473706079918203e-01, -7.359654057194366e-01, -7.457423908788077e-01, -7.081461828121718e-01, -7.086077006543665e-01, -7.343696527135335e-01, -7.398374649950928e-01, -7.532025121340692e-01, -7.229804756358930e-01, -7.532025121340692e-01, -7.229804756358930e-01, -1.165305315112775e-01, -1.939929652194329e-01, -1.232251228304660e-01, -1.953021510740891e-01, -7.338410599663341e-01, -7.741670063279488e-01, -1.349653842489872e-01, -8.756898360280381e-02, -1.211910583725986e-01, -8.658278408346799e-02, -1.211910583725985e-01, -8.658278408346609e-02, -5.572319201757636e-03, -6.014029287028359e-03, -5.936564977108710e-03, -6.475353882798223e-03, -3.813795620235889e-02, -3.971549568046237e-02, -2.843643143138257e-03, -2.774169027676769e-03, -4.810473319709819e-03, -2.470091272351120e-03, -4.810473319709820e-03, -2.470091272351121e-03, -7.476680111667062e+00, -7.474892559006596e+00, -7.478783755801865e+00, -7.476924383362172e+00, -7.476814101027736e+00, -7.474974702310290e+00, -7.478618494926280e+00, -7.476819920227133e+00, -7.477744931235929e+00, -7.475911125706795e+00, -7.477744931235929e+00, -7.475911125706795e+00, -2.546585392489383e+00, -2.551993081757671e+00, -2.598831288725921e+00, -2.602247107069270e+00, -2.535658973615614e+00, -2.543527775496921e+00, -2.583882343176300e+00, -2.591846409412053e+00, -2.586911336437240e+00, -2.580322743104010e+00, -2.586911336437240e+00, -2.580322743104010e+00, -8.294303511887038e-01, -8.268709898006108e-01, -9.371927434992480e-01, -9.362556845977411e-01, -7.544179912033203e-01, -7.842946795733252e-01, -8.475180470363037e-01, -8.689359472113680e-01, -8.672088792091428e-01, -8.254581462588774e-01, -8.672088792091429e-01, -8.254581462588776e-01, -7.673779921273714e-02, -7.849337920128362e-02, -2.693097282433489e-02, -2.763581529517415e-02, -7.011180106134826e-02, -7.317350555182563e-02, -2.927997801619131e+00, -2.926666308117541e+00, -6.970624497550221e-02, 1.975531166608080e-02, -6.970624497550207e-02, 1.975531166608197e-02, -1.990379043336803e-03, -2.070217121951585e-03, -2.744172545937123e-03, -2.781126875487778e-03, -2.151093818525500e-03, -2.339409502412123e-03, -5.174417756302722e-02, -5.182212891443924e-02, -2.089378396971519e-03, -3.171154219805125e-03, -2.089378396971519e-03, -3.171154219805127e-03, -8.535810164373551e-01, -8.569174449829909e-01, -8.455592114349062e-01, -8.489494819544775e-01, -8.483534980724574e-01, -8.517420588115989e-01, -8.506971669199133e-01, -8.540363555178923e-01, -8.495233402452150e-01, -8.528863892117482e-01, -8.495233402452150e-01, -8.528863892117482e-01, -8.325882558318780e-01, -8.352647783661615e-01, -6.836002089601673e-01, -6.870427755712467e-01, -7.255635515487581e-01, -7.292807484526064e-01, -7.691341235707619e-01, -7.719730374586214e-01, -7.468996308891841e-01, -7.499487547879768e-01, -7.468996308891841e-01, -7.499487547879768e-01, -9.932998603058389e-01, -9.913496088824622e-01, -1.991610336745380e-01, -2.005697082128486e-01, -2.643289612650649e-01, -2.730355706243848e-01, -4.455049321639829e-01, -4.488551017856925e-01, -3.551335726755818e-01, -3.557917802842429e-01, -3.551335726755818e-01, -3.557917802842429e-01, -5.996571994797528e-01, -6.081243352281119e-01, -3.757618890328149e-02, -3.787039273320104e-02, -4.658520820080501e-02, -4.740435756664212e-02, -4.497430972035779e-01, -4.586474837215731e-01, -5.909670007197610e-02, -6.072384329092845e-02, -5.909670007197613e-02, -6.072384329092848e-02, -8.617752338117448e-03, -9.016306007245359e-03, -5.117178610418484e-04, -5.431262003555765e-04, -1.304251318658760e-03, -1.426450310274410e-03, -5.550731565423045e-02, 9.651852474437212e-03, -2.063136462765400e-03, -2.837697559781781e-03, -2.063136462765397e-03, -2.837697559781779e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_lak_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_lak", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-8.070488808664939e-09, 0.000000000000000e+00, -8.066727202898563e-09, -8.070325611459529e-09, 0.000000000000000e+00, -8.066609229183218e-09, -8.069318842550773e-09, 0.000000000000000e+00, -8.065303587954520e-09, -8.071136832295289e-09, 0.000000000000000e+00, -8.067625068555091e-09, -8.070401377181266e-09, 0.000000000000000e+00, -8.066343323677896e-09, -8.070401377181266e-09, 0.000000000000000e+00, -8.066343323677896e-09, -4.042331104096491e-05, 0.000000000000000e+00, -4.041460374427015e-05, -4.042364718960525e-05, 0.000000000000000e+00, -4.041395414075732e-05, -4.041955469664725e-05, 0.000000000000000e+00, -4.041425857379874e-05, -4.045399631699035e-05, 0.000000000000000e+00, -4.044170849021330e-05, -4.044955533446679e-05, 0.000000000000000e+00, -4.043638534736635e-05, -4.044955533446679e-05, 0.000000000000000e+00, -4.043638534736635e-05, -9.640684481502793e-03, 0.000000000000000e+00, -1.000131301213978e-02, -9.571182328806237e-03, 0.000000000000000e+00, -9.936112751690918e-03, -7.992009368161792e-03, 0.000000000000000e+00, -8.106455434736129e-03, -1.029378073903236e-02, 0.000000000000000e+00, -1.086680988934253e-02, -9.501990979189117e-03, 0.000000000000000e+00, -1.229769270448987e-02, -9.501990979189117e-03, 0.000000000000000e+00, -1.229769270448987e-02, -5.958434439145180e+00, 0.000000000000000e+00, -2.474084153331455e+00, -5.896766742298314e+00, 0.000000000000000e+00, -2.597490134227143e+00, -2.113333015723230e-03, 0.000000000000000e+00, -1.982931257033549e-03, -4.122476609232266e-01, 0.000000000000000e+00, -5.925130198674134e+00, -5.259475989679702e+00, 0.000000000000000e+00, -4.332060673302559e-01, -5.259475989679695e+00, 0.000000000000000e+00, -4.332060673302526e-01, 4.609319482652428e+02, 0.000000000000000e+00, 4.060438840296959e+02, 4.334478708263628e+02, 0.000000000000000e+00, 3.784087737858349e+02, 3.171376838867346e+00, 0.000000000000000e+00, 2.048241158171777e+00, 1.117835064907161e+03, 0.000000000000000e+00, 1.134285408324131e+03, 5.709951274636178e+02, 0.000000000000000e+00, 2.653987123092487e+03, 5.709951274636184e+02, 0.000000000000000e+00, 2.653987123092488e+03, -2.029847594642697e-06, 0.000000000000000e+00, -2.030761136282534e-06, -2.028014823029415e-06, 0.000000000000000e+00, -2.028991661110967e-06, -2.029324263237405e-06, 0.000000000000000e+00, -2.030396364645744e-06, -2.027768564232607e-06, 0.000000000000000e+00, -2.028805111628948e-06, -2.029227432724870e-06, 0.000000000000000e+00, -2.029925394359741e-06, -2.029227432724870e-06, 0.000000000000000e+00, -2.029925394359741e-06, -2.091639970741108e-04, 0.000000000000000e+00, -2.044632436615652e-04, -1.815463492815977e-04, 0.000000000000000e+00, -1.783071067977903e-04, -1.943868466729468e-04, 0.000000000000000e+00, -1.946588225852599e-04, -1.699640239127773e-04, 0.000000000000000e+00, -1.698793721573735e-04, -2.023093964783506e-04, 0.000000000000000e+00, -1.913740566534932e-04, -2.023093964783506e-04, 0.000000000000000e+00, -1.913740566534932e-04, -3.708892523313086e-02, 0.000000000000000e+00, -3.621398304062863e-02, -2.413636175207351e-02, 0.000000000000000e+00, -2.333855668253290e-02, -7.405506725640722e-02, 0.000000000000000e+00, -6.209020252257613e-02, -5.472566178673838e-02, 0.000000000000000e+00, -4.932055731020736e-02, -2.597353340511704e-02, 0.000000000000000e+00, -3.982343596686126e-02, -2.597353340511703e-02, 0.000000000000000e+00, -3.982343596686129e-02, -1.451970566122744e+00, 0.000000000000000e+00, -1.237262301409041e+00, -5.861858134092919e+00, 0.000000000000000e+00, -5.805213820660793e+00, -1.314476125232693e+00, 0.000000000000000e+00, -1.531761368262290e+00, -3.921242340880223e-04, 0.000000000000000e+00, -3.928255009710336e-04, -5.893803996470997e+00, 0.000000000000000e+00, -2.433835234554508e+01, -5.893803996471023e+00, 0.000000000000000e+00, -2.433835234554528e+01, 2.243803203280951e+03, 0.000000000000000e+00, 1.933986369456479e+03, 1.330101627570710e+03, 0.000000000000000e+00, 1.238898640283899e+03, 5.847567287416722e+03, 0.000000000000000e+00, 5.584461923035495e+03, -2.267479213245068e+00, 0.000000000000000e+00, -2.572904251852338e+00, 3.830112088609545e+03, 0.000000000000000e+00, 2.136178996460842e+03, 3.830112088609538e+03, 0.000000000000000e+00, 2.136178996460841e+03, -1.453684210031740e-02, 0.000000000000000e+00, -1.426036625432643e-02, -1.468009717371362e-02, 0.000000000000000e+00, -1.440077159415837e-02, -1.461973870063318e-02, 0.000000000000000e+00, -1.434107202590437e-02, -1.457941553175332e-02, 0.000000000000000e+00, -1.430440272626633e-02, -1.459989263198910e-02, 0.000000000000000e+00, -1.432268396192022e-02, -1.459989263198910e-02, 0.000000000000000e+00, -1.432268396192023e-02, -1.868483366716901e-02, 0.000000000000000e+00, -1.826278315411958e-02, -3.025905254248097e-02, 0.000000000000000e+00, -2.967221180820563e-02, -2.728532259843501e-02, 0.000000000000000e+00, -2.669642375785712e-02, -2.351421631664811e-02, 0.000000000000000e+00, -2.313279345237525e-02, -2.601793697153160e-02, 0.000000000000000e+00, -2.536027765697638e-02, -2.601793697153159e-02, 0.000000000000000e+00, -2.536027765697640e-02, -2.364330410778383e-02, 0.000000000000000e+00, -2.245605962500187e-02, -1.415640993884951e+00, 0.000000000000000e+00, -1.402323011955213e+00, -9.343492910771493e-01, 0.000000000000000e+00, -8.824749487793836e-01, -3.950307122873591e-01, 0.000000000000000e+00, -3.879667046217264e-01, -5.698897728803496e-01, 0.000000000000000e+00, -5.710051466702738e-01, -5.698897728803499e-01, 0.000000000000000e+00, -5.710051466702740e-01, -1.010455620474592e-01, 0.000000000000000e+00, -9.077269748299463e-02, 3.005687372154974e+00, 0.000000000000000e+00, 3.224445447617008e+00, -5.227941755491949e-01, 0.000000000000000e+00, -8.737926797943529e-01, -4.814424136858532e-01, 0.000000000000000e+00, -3.629117822862956e-01, -2.841596959574505e+00, 0.000000000000000e+00, -3.985241686234573e+00, -2.841596959574491e+00, 0.000000000000000e+00, -3.985241686234572e+00, 2.040247825682778e+02, 0.000000000000000e+00, 1.919232355550453e+02, 2.618170763010456e+04, 0.000000000000000e+00, 3.639514041659293e+04, 5.960356883642848e+03, 0.000000000000000e+00, 5.551768495088785e+03, -4.178722152647346e+00, 0.000000000000000e+00, -4.523683845437548e+01, 6.293327029829642e+03, 0.000000000000000e+00, 2.557313284379412e+03, 6.293327029829657e+03, 0.000000000000000e+00, 2.557313284379421e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_lak_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_lak", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([6.704718263421812e-04, 6.701747780381271e-04, 6.704645471597412e-04, 6.701695333171127e-04, 6.704051484233800e-04, 6.700946130656130e-04, 6.704853450911521e-04, 6.701972341863861e-04, 6.704681669736746e-04, 6.701298753775421e-04, 6.704681669736746e-04, 6.701298753775421e-04, 1.342448189853052e-02, 1.342268896394437e-02, 1.342523904698788e-02, 1.342306253194120e-02, 1.343853963947685e-02, 1.344040110307795e-02, 1.343875405196767e-02, 1.343724036044628e-02, 1.342508548269228e-02, 1.344919271526425e-02, 1.342508548269228e-02, 1.344919271526425e-02, 1.597367470908080e-02, 1.691724019579450e-02, 1.579821009721658e-02, 1.672506675589304e-02, 1.277537104997190e-02, 1.357770641263732e-02, 1.884707318748624e-02, 2.005808012750777e-02, 1.606803816788801e-02, 2.464150864560104e-02, 1.606803816788801e-02, 2.464150864560104e-02, 2.383738189530125e-01, 1.141517428057896e-01, 2.446536734661505e-01, 1.256516306863649e-01, 5.523730181879904e-04, 1.097689080810866e-03, 1.237946544262326e-02, 1.144585109407764e-01, 2.393964249892981e-01, 2.761158658190556e-04, 2.393964249892978e-01, 2.761158658190548e-04, 2.254745467927326e-07, 4.774083718386188e-06, 7.333330896680974e-08, 6.994456209276204e-07, 1.590242893253799e-05, 4.129463031760254e-05, 4.057720020405787e-12, 5.765372734385952e-12, 3.337187678968156e-09, 1.200170028201185e-12, 3.337187678967814e-09, 1.200170028201176e-12, 2.432769268404533e-03, 2.432186491565549e-03, 2.431190806876522e-03, 2.430663496639115e-03, 2.432203331642852e-03, 2.431789461209902e-03, 2.430868156064514e-03, 2.430424407758294e-03, 2.432323250300447e-03, 2.431482468921204e-03, 2.432323250300447e-03, 2.431482468921204e-03, 1.296346974855179e-02, 1.268792883561650e-02, 1.157965668754265e-02, 1.137832076098812e-02, 1.190957543972542e-02, 1.197864476632260e-02, 1.068902131246582e-02, 1.073402744392440e-02, 1.285612853675820e-02, 1.206552189336407e-02, 1.285612853675820e-02, 1.206552189336407e-02, 6.137674704772403e-02, 5.952628506920230e-02, 5.191897247952511e-02, 5.019975517191361e-02, 8.851916209402479e-02, 8.414512999670540e-02, 8.246250289810049e-02, 8.010374861875590e-02, 4.894952381975204e-02, 6.389311838040239e-02, 4.894952381975202e-02, 6.389311838040239e-02, 4.740374139395381e-03, 3.761899548119671e-03, 2.465582912424552e-01, 2.478493079679124e-01, 1.359026598203174e-03, 3.706940849117612e-03, 2.367770350333200e-02, 2.368589588349294e-02, 5.182452988160990e-02, 2.614225499693805e-01, 5.182452988161014e-02, 2.614225499693826e-01, 1.308440871244139e-14, 1.664414110125822e-14, 4.849708490272457e-13, 3.377755083172640e-13, 1.737066909767427e-11, 2.730041908050284e-11, 1.368720944580145e-04, 7.282234941677950e-04, 2.087041313468149e-14, 5.891601138501760e-09, 2.087041313468164e-14, 5.891601138501994e-09, 2.379104118607264e-02, 2.359904008752879e-02, 2.416236389209478e-02, 2.396566878039032e-02, 2.402648176092173e-02, 2.382930296107383e-02, 2.391652504913001e-02, 2.372604049009388e-02, 2.397306006248097e-02, 2.377853588072519e-02, 2.397306006248097e-02, 2.377853588072520e-02, 2.811474751754442e-02, 2.774547085218886e-02, 3.083815579252603e-02, 3.063748138772007e-02, 3.155435298749850e-02, 3.129196616731070e-02, 3.084728917165349e-02, 3.066693948719109e-02, 3.199511280528597e-02, 3.155390815018787e-02, 3.199511280528596e-02, 3.155390815018791e-02, 5.899726240856869e-02, 5.612998459842536e-02, 1.221978856344031e-01, 1.231192020690808e-01, 1.376262319148230e-01, 1.339959709384848e-01, 1.297825414041014e-01, 1.294394426919904e-01, 1.279829577311403e-01, 1.280676935562644e-01, 1.279829577311403e-01, 1.280676935562644e-01, 7.513877686420388e-02, 6.920386578793866e-02, 2.298907965904149e-04, 1.235203050032405e-04, 6.137800013265331e-05, 9.351272924877017e-05, 1.390993211836398e-01, 1.118887124514692e-01, 3.055633410281527e-03, 8.112090606901160e-03, 3.055633410281497e-03, 8.112090606901162e-03, 1.144664991738704e-10, 1.221903485520023e-10, 6.896960268416011e-18, 5.364845596787524e-18, 2.985946839639856e-12, 4.616849904661749e-12, 5.325829994963930e-03, 1.114288327492772e-01, 1.338174403037705e-13, 3.190658121269563e-09, 1.338174403037701e-13, 3.190658121269358e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
