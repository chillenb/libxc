
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_lak_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_lak", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.197324599837762e+01, -2.197336981436017e+01, -2.197391399764180e+01, -2.260702763741670e+01, -2.260780609665836e+01, -2.324268142327013e+01, -3.360322877936767e+00, -3.766105205859955e+00, -3.766585173375672e+00, -3.766732617620662e+00, -3.766325669643980e+00, -3.360695974316114e+00, -5.219375540759672e-01, -6.212269074432470e-01, -6.986034280091208e-01, -6.073080753415210e-01, -5.107263189134246e-01, -7.053259413344505e-01, -1.611082091081999e-01, -1.640115738117878e-01, -7.086557174419149e-01, -1.361525815960692e-01, -1.759190536738288e-01, -1.730574424640345e-01, -3.275295248208616e-03, -4.128922602058144e-03, -2.865518094389870e-02, -1.499323899526282e-03, -2.454868367156175e-03, -2.454868367156175e-03, -5.669020401269217e+00, -5.670114039018030e+00, -5.669075296424999e+00, -5.670040670549302e+00, -5.583929006900633e+00, -5.584000170508437e+00, -2.115662312218797e+00, -2.131831046390202e+00, -2.103799081046716e+00, -2.118119877801451e+00, -1.874573664432907e+00, -2.130358572783338e+00, -5.980486076087788e-01, -6.936735914376393e-01, -5.889134131223854e-01, -6.133495613431403e-01, -6.134621565533709e-01, -6.486930980065062e-01, -9.062583805646701e-02, -1.580320834915931e-01, -8.325846758214638e-02, -2.086482507400760e+00, -1.098714301740054e-01, -1.098714301740054e-01, -1.495955473364845e-03, -1.435765373342131e-03, -1.212401502095839e-03, -4.827487200518325e-02, -1.545273378266704e-03, -1.545273378266704e-03, -6.423270168155764e-01, -6.385505838157086e-01, -6.336975433516076e-01, -6.385295191930332e-01, -6.349161573247395e-01, -6.376559336904383e-01, -6.249060974894742e-01, -4.908003457144944e-01, -5.324744904893186e-01, -5.862425118339485e-01, -5.730859211997337e-01, -5.523312648120287e-01, -7.035710785266518e-01, -2.330515659493280e-01, -2.437351517963980e-01, -3.296665418080788e-01, -3.257144539494884e-01, -2.820198899798642e-01, -4.911117199767263e-01, -2.568752970743204e-02, -4.088116919885937e-02, -3.631761142352450e-01, -7.113983170321109e-02, -7.113983170321110e-02, -6.526613870653973e-03, -2.266204236562332e-04, -1.466811612076748e-03, -5.207225021252306e-02, -1.401435200073687e-03, -2.053366836988851e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_lak_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_lak", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.266030955037171e+01, -3.265974342992696e+01, -3.266033815617258e+01, -3.265976429973847e+01, -3.266047932101414e+01, -3.265995262729784e+01, -3.266014981058985e+01, -3.111707880758528e+01, -3.266032211695234e+01, -3.111764894241204e+01, -3.111805476792627e+01, -3.111764894241204e+01, -5.098880396661640e+00, -5.065408024250804e+00, -5.098883335125782e+00, -5.098819035305122e+00, -5.098917826876212e+00, -5.098977620011685e+00, -5.099335086164026e+00, -5.099406311766683e+00, -5.098056755908280e+00, -5.099533554231656e+00, -5.063575548351737e+00, -5.099533554231656e+00, -7.261612826017413e-01, -7.324741039991584e-01, -7.240932743252542e-01, -9.912827150686024e-01, -9.673188585611606e-01, -9.608571314817258e-01, -9.705294325368821e-01, -7.078440856931402e-01, -7.404707973327055e-01, -6.694262255056469e-01, -9.993265653726023e-01, -9.384865901068338e-01, -1.763421075584614e-01, -2.612965738742176e-01, -1.788319191327476e-01, -2.657625184151631e-01, -1.141439823583704e+00, -8.283849025334249e-01, -1.944038987634422e-01, -1.970860152887584e-01, -2.629737988751279e-01, -1.407388904233577e-01, -2.629737988751278e-01, -9.726666204409513e-02, -5.631262594012205e-03, -6.095202014845532e-03, -6.255376503633213e-03, -6.564919801121927e-03, -3.478286893328755e-02, -4.970505079558901e-02, -2.797667321573215e-03, -2.737471911548056e-03, -4.831704017678599e-03, -2.387703437008962e-03, -4.831704017678598e-03, -2.387703437008962e-03, -7.577185260692874e+00, -7.575369250666710e+00, -7.578443408631564e+00, -7.576584455671210e+00, -7.577260470521286e+00, -7.575414796167168e+00, -7.578340049467082e+00, -7.576518785222835e+00, -7.775639140732001e+00, -7.575978825264344e+00, -7.577825447912415e+00, -7.773780336764455e+00, -2.874630111671177e+00, -2.874378596893945e+00, -2.894752215567669e+00, -2.893891014605258e+00, -2.857810076624227e+00, -2.862376990828576e+00, -2.875188980715150e+00, -2.879986684947195e+00, -2.898475453801653e+00, -2.603282907861773e+00, -2.898475453801653e+00, -2.886329265980550e+00, -8.584428331093598e-01, -9.133670672093751e-01, -9.282376991760980e-01, -9.285228109085931e-01, -7.811564219312714e-01, -8.086813352755703e-01, -8.111722539347086e-01, -8.373866889494888e-01, -8.918484390056051e-01, -9.047182879958504e-01, -8.918484390056051e-01, -8.481174712264261e-01, -1.344284505909384e-01, -1.357469265316704e-01, -1.779066449437554e-01, -2.585735850179728e-01, -1.211680977369157e-01, -1.280071632143212e-01, -2.802607952251345e+00, -2.801336877817397e+00, -1.545597242252774e-01, -1.639419290053264e-01, -1.545597242252774e-01, -1.639419290053264e-01, -2.692028125097461e-03, -1.924660578459137e-03, -2.643743771692058e-03, -2.668251310589920e-03, -2.119462001264454e-03, -2.305674612495284e-03, -8.199737137162975e-02, -5.823664418257102e-02, -1.884706838258084e-03, -3.184787751552781e-03, -1.884706838258085e-03, -3.184787751552781e-03, -8.549323309630521e-01, -8.582290974046628e-01, -8.503988246407556e-01, -8.536994837999617e-01, -8.566583413134909e-01, -8.597825346349122e-01, -8.566226754539872e-01, -8.565790258904731e-01, -8.566046794264867e-01, -8.597546321520545e-01, -8.566046794264865e-01, -8.559256163523501e-01, -8.320320643975264e-01, -8.347721995811618e-01, -7.189105501686852e-01, -7.699999039025917e-01, -7.509661745805015e-01, -8.035841908510896e-01, -7.830916225168396e-01, -7.858215465536754e-01, -7.667763355435384e-01, -7.695834072480235e-01, -7.667763355435384e-01, -8.155403219069525e-01, -9.733858695153493e-01, -1.029118088946738e+00, -3.240344450259801e-01, -3.258788992373398e-01, -2.789541428677134e-01, -3.908530715584191e-01, -4.470815925892237e-01, -5.120969599357328e-01, -4.453692757487489e-01, -4.451832560483427e-01, -4.453692757487488e-01, -3.467742899033470e-01, -6.622498507623346e-01, -6.665728564731856e-01, -3.413223996747665e-02, -3.436578306261086e-02, -6.346845179982288e-02, -6.588025269959319e-02, -4.877374308248942e-01, -4.943860226325502e-01, -1.034664399706999e-01, -1.097342922878655e-01, -1.034664399706999e-01, -1.097342922878655e-01, -8.539101077704420e-03, -8.848681146374293e-03, -4.338765510466954e-04, -4.350826394240593e-04, -1.890121143922167e-03, -2.010296414409874e-03, -6.886164918890239e-02, -6.999041409145375e-02, -1.905559595953293e-03, -2.846388520313261e-03, -1.905559595953290e-03, -3.319296319548829e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_lak_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_lak", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.459814223368270e-08, 0.000000000000000e+00, -2.459588492017261e-08, -2.459747458368087e-08, 0.000000000000000e+00, -2.459540016684771e-08, -2.459540693502971e-08, 0.000000000000000e+00, -2.459241724956300e-08, -2.460292109742691e-08, 0.000000000000000e+00, 6.047824246900074e-10, -2.459773154474304e-08, 0.000000000000000e+00, 6.046859519994913e-10, 6.046752181062255e-10, 0.000000000000000e+00, 6.046859519994913e-10, 1.089726727953116e-06, 0.000000000000000e+00, -2.033021066055527e-05, 1.089702854765327e-06, 0.000000000000000e+00, 1.089782696122030e-06, 1.089251227371777e-06, 0.000000000000000e+00, 1.089123195461907e-06, 1.089049716628961e-06, 0.000000000000000e+00, 1.088988301720166e-06, 1.090478630598038e-06, 0.000000000000000e+00, 1.088492282346409e-06, -2.031483383672823e-05, 0.000000000000000e+00, 1.088492282346409e-06, 3.495628649512018e-03, 0.000000000000000e+00, 3.284551283788677e-03, 3.560582495589515e-03, 0.000000000000000e+00, 7.372033167403748e-04, 7.919973710287244e-04, 0.000000000000000e+00, 8.099160691435320e-04, 7.883228930807973e-04, 0.000000000000000e+00, 4.042091371319658e-03, 3.079300788031649e-03, 0.000000000000000e+00, 5.355175792993066e-03, 7.161393588115805e-04, 0.000000000000000e+00, 8.741382114609038e-04, 1.133930600722350e+00, 0.000000000000000e+00, 1.416758790180896e-01, 1.071305515471518e+00, 0.000000000000000e+00, 1.344004718234410e-01, 3.590301293558914e-04, 0.000000000000000e+00, 2.324051510399846e-03, 3.051743833197877e-01, 0.000000000000000e+00, 3.091330423539936e-01, 1.322910324767801e-01, 0.000000000000000e+00, 6.745872999161073e-01, 1.322910324767801e-01, 0.000000000000000e+00, 1.209705591809676e+01, 4.698475840084183e+02, 0.000000000000000e+00, 4.210245064175471e+02, 7.064766570524155e+05, 0.000000000000000e+00, 3.896452267064321e+02, 7.390261905183611e+02, 0.000000000000000e+00, 8.609567909296253e+00, 9.845775552294540e+02, 0.000000000000000e+00, 1.019797939163805e+03, 5.628289250605663e+02, 0.000000000000000e+00, 2.073029760840079e+03, 5.628289250605663e+02, 0.000000000000000e+00, 2.073029760840078e+03, 1.412742895813772e-07, 0.000000000000000e+00, 1.414054486291845e-07, 1.404824950231318e-07, 0.000000000000000e+00, 1.406395012403036e-07, 1.412201241367176e-07, 0.000000000000000e+00, 1.413717614816498e-07, 1.405411637326338e-07, 0.000000000000000e+00, 1.406763761859782e-07, -5.582096358068002e-06, 0.000000000000000e+00, 1.410224546751087e-07, 1.408769303414063e-07, 0.000000000000000e+00, -5.587906005840859e-06, 1.085495898988841e-05, 0.000000000000000e+00, 1.085879564347513e-05, 1.055415330320696e-05, 0.000000000000000e+00, 1.056636482416465e-05, 1.110983111144235e-05, 0.000000000000000e+00, 1.104081000723110e-05, 1.084650855246087e-05, 0.000000000000000e+00, 1.077431348006315e-05, 1.049869778919404e-05, 0.000000000000000e+00, -9.308816331390201e-05, 1.049869778919404e-05, 0.000000000000000e+00, 1.067906851087524e-05, 1.268185683685081e-03, 0.000000000000000e+00, -4.304760055416586e-02, 7.494843500322331e-04, 0.000000000000000e+00, 7.343481657412038e-04, 1.973111914903699e-03, 0.000000000000000e+00, 1.683357780851583e-03, 1.607356420247713e-03, 0.000000000000000e+00, 1.369577196522991e-03, 1.038913803570924e-03, 0.000000000000000e+00, -4.484767820169763e-02, 1.038913803570924e-03, 0.000000000000000e+00, 1.319686127703972e-03, 8.169464989882085e-01, 0.000000000000000e+00, 7.954954326783922e-01, 1.091205130142883e+00, 0.000000000000000e+00, 1.231195292457587e-01, 1.066267799404064e+00, 0.000000000000000e+00, 9.488886369455910e-01, 1.067060515764239e-05, 0.000000000000000e+00, 1.068761100235031e-05, 6.230607281616919e-01, 0.000000000000000e+00, 5.864233257517431e-01, 6.230607281616919e-01, 0.000000000000000e+00, 5.864233257517433e-01, 2.059649126858863e+07, 0.000000000000000e+00, 1.206298912211404e+03, 1.022380989830675e+03, 0.000000000000000e+00, 9.275338431949713e+02, 5.153918203982164e+03, 0.000000000000000e+00, 4.902246252557551e+03, 2.979084157840211e+00, 0.000000000000000e+00, 9.406347888863063e+01, 1.939299333005133e+03, 0.000000000000000e+00, 2.119825873546387e+03, 1.939299333005133e+03, 0.000000000000000e+00, 2.119825873546386e+03, 2.567860329242385e-04, 0.000000000000000e+00, 2.434101829768538e-04, 5.592752353243020e-04, 0.000000000000000e+00, 5.400534531978606e-04, -2.138079214070669e-02, 0.000000000000000e+00, -2.081313742837399e-02, -1.951859702259047e-02, 0.000000000000000e+00, 3.574266245410521e-04, -2.043668027261215e-02, 0.000000000000000e+00, -1.991673103022474e-02, -2.043668027261215e-02, 0.000000000000000e+00, 4.011440897192367e-04, 3.367725064330939e-04, 0.000000000000000e+00, 3.204437293775219e-04, 2.680114847918791e-03, 0.000000000000000e+00, -8.001314562107996e-02, 2.074015732347859e-03, 0.000000000000000e+00, -7.395912982011756e-02, 1.446551127619573e-03, 0.000000000000000e+00, 1.420604578937411e-03, 1.771878671275034e-03, 0.000000000000000e+00, 1.738540269274815e-03, 1.771878671275034e-03, 0.000000000000000e+00, -6.901918496662739e-02, 6.762760720795211e-04, 0.000000000000000e+00, -2.644478228408246e-02, 5.750304651124694e-02, 0.000000000000000e+00, 5.640743683379874e-02, 1.733913785288743e-01, 0.000000000000000e+00, 2.984651635099361e-02, -7.089454005179180e-02, 0.000000000000000e+00, 1.077751166021681e-02, 1.857484793169065e-02, 0.000000000000000e+00, 1.861746743983300e-02, 1.857484793169068e-02, 0.000000000000000e+00, 3.160178321326172e-02, 3.823560393031366e-03, 0.000000000000000e+00, 3.712584412038066e-03, 7.970068126344119e+02, 0.000000000000000e+00, 7.755615792849229e+02, 4.829769633715503e+00, 0.000000000000000e+00, 4.544271602918589e+00, 1.302883956466736e-02, 0.000000000000000e+00, 1.215091829375370e-02, 1.877162670434463e+00, 0.000000000000000e+00, 1.759820144678779e+00, 1.877162670434463e+00, 0.000000000000000e+00, 1.759820144678778e+00, 2.034524998519936e+05, 0.000000000000000e+00, 1.764401704127469e+05, 1.007893229742145e+04, 0.000000000000000e+00, 1.001531638194347e+04, 8.475260427979007e+07, 0.000000000000000e+00, 6.623251120273574e+07, 4.813285234585511e+01, 0.000000000000000e+00, 4.510697588971014e+01, 3.646117914865125e+03, 0.000000000000000e+00, 2.528349509475875e+03, 3.646117914865130e+03, 0.000000000000000e+00, 8.911022100782230e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_lak_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_lak", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.971564939021717e-03, 1.971356743394732e-03, 1.971527649040238e-03, 1.971329679459375e-03, 1.971418673684898e-03, 1.971170554463451e-03, 1.971837404455411e-03, 5.953307500125027e-14, 1.971541377985337e-03, 5.953178724313511e-14, 5.953108950527496e-14, 5.953178724313511e-14, 3.413070083265143e-13, 8.465014915973460e-03, 3.413165936223101e-13, 3.413095071289311e-13, 3.415050682774437e-13, 3.415353352596076e-13, 3.414076226012336e-13, 3.414031113974035e-13, 3.413403591453859e-13, 3.415671830123624e-13, 8.457628325110680e-03, 3.415671830123624e-13, 3.023922530723744e-03, 3.356955521324244e-03, 2.935155293375354e-03, 1.694342520497576e-12, 1.738905744719489e-12, 1.751360710488676e-12, 1.731899630821381e-12, 2.444093849945698e-03, 3.572339111490414e-03, 1.320508386646210e-03, 1.680723738872173e-12, 1.796800773497829e-12, 1.801260833783012e-03, 6.476432784922440e-12, 2.071443978022384e-03, 6.354383169090798e-12, 1.499301292521444e-12, 5.199010203909899e-04, 8.748960741997729e-12, 8.724804873908623e-12, 6.474788508346823e-12, 9.678052158008688e-12, 6.474788508346831e-12, 1.155428743496245e-05, 1.859498700010778e-12, 1.978907741665949e-12, 5.502499187250040e-11, 2.136877604796795e-12, 9.929656179713761e-08, 7.380945815046816e-12, 9.587020099703222e-13, 9.475713976545291e-13, 1.618060151725579e-12, 1.206581773511444e-12, 1.618060151725579e-12, 1.206581773511442e-12, 2.412576670350523e-13, 2.413149379515638e-13, 2.411269835322325e-13, 2.411886229578692e-13, 2.412489751104126e-13, 2.413095621747704e-13, 2.411368989250584e-13, 2.411948678413111e-13, 6.413368386223335e-03, 2.412517600145989e-13, 2.411919167900426e-13, 6.415358939136377e-03, 5.951053792976410e-13, 5.953367847935997e-13, 5.927830017978596e-13, 5.930920253263624e-13, 5.970613289289395e-13, 5.967053103775178e-13, 5.949567808513254e-13, 5.946155785472728e-13, 5.924777234956325e-13, 8.957826450521520e-03, 5.924777234956325e-13, 5.939816419621661e-13, 2.118841093192857e-12, 7.445134304654843e-02, 1.994066533467749e-12, 1.991427205184514e-12, 2.235573270803847e-12, 2.199972948554152e-12, 2.233454624962676e-12, 2.186814865591692e-12, 2.063959608804900e-12, 7.529366008259139e-02, 2.063959608804900e-12, 2.150744017549459e-12, 1.018376495410395e-11, 1.016397833282082e-11, 4.387003638476907e-04, 6.683158397001861e-12, 1.022377545231517e-11, 1.038161498812681e-11, 6.566075588527612e-13, 6.569318201784890e-13, 1.032523473513757e-11, 1.031046486687669e-11, 1.032523473513757e-11, 1.031046486687672e-11, 2.977429275470270e-13, 6.117989339295804e-13, 8.984909838687666e-13, 8.563509133226248e-13, 1.802197116965110e-12, 1.999187791712578e-12, 9.950487323442662e-12, 1.867261254941050e-06, 7.995685762133552e-13, 1.954013496742430e-12, 7.995685762133547e-13, 1.954013496742432e-12, 2.056921165449520e-12, 2.048275985126147e-12, 2.096547996596598e-12, 2.087132210910559e-12, 3.463468761889336e-02, 3.410277284841048e-02, 3.171735538643602e-02, 2.061601920832282e-12, 3.315769543237988e-02, 3.268453734929463e-02, 3.315769543237988e-02, 2.067158970353149e-12, 2.117278385088908e-12, 2.109416241001880e-12, 2.483988310010519e-12, 8.514908990813241e-02, 2.449575444114138e-12, 8.617482951855669e-02, 2.360796405836351e-12, 2.352013886039743e-12, 2.417164274110111e-12, 2.408686388368993e-12, 2.417164274110111e-12, 8.424758462472956e-02, 1.904592290056731e-12, 6.536339389725900e-02, 5.253186376222278e-12, 5.220877246639149e-12, 4.601963187176880e-03, 4.301888545386147e-12, 4.288423266999496e-02, 3.336664009651580e-12, 3.782308824306306e-12, 3.784655964081402e-12, 3.782308824306310e-12, 1.735740346468697e-02, 2.633420357501823e-12, 2.627342617629005e-12, 9.753610223445497e-08, 9.792123667654294e-08, 8.125192249548467e-12, 8.440784770091544e-12, 3.562678509720271e-12, 3.575726068391157e-12, 1.141781448016047e-11, 1.212291099760733e-11, 1.141781448016048e-11, 1.212291099760733e-11, 8.287170786817822e-11, 9.690157027796356e-11, 2.594263876867782e-13, 2.594468362775821e-13, 4.306009427597591e-13, 6.390887843908531e-13, 6.641519061861318e-06, 8.635277053655553e-06, 1.216383847299759e-12, 1.824138100003741e-12, 1.216383847299762e-12, 1.195688299652007e-11]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
