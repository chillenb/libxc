
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_6_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_6", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.290693310123241e+01, -2.290698715066125e+01, -2.290732799537622e+01, -2.290652538634053e+01, -2.290693158854036e+01, -2.290693158854036e+01, -3.453894218468855e+00, -3.453933529347426e+00, -3.455236334992840e+00, -3.456974732704615e+00, -3.455615325275557e+00, -3.455615325275557e+00, -6.537526255480302e-01, -6.534131357287207e-01, -6.459501317111933e-01, -6.535243423460002e-01, -6.522780870754918e-01, -6.522780870754918e-01, -1.910324198582926e-01, -1.935451058575497e-01, -7.511359735360466e-01, -1.410609378496108e-01, -1.810824522774905e-01, -1.810824522774905e-01, -6.566362606739272e-03, -6.911014062580836e-03, -3.783256452304917e-02, -3.754758047819261e-03, -5.265307660607819e-03, -5.265307660607819e-03, -5.573985391846415e+00, -5.574245186073735e+00, -5.574044633921524e+00, -5.574272096113654e+00, -5.574092616672903e+00, -5.574092616672903e+00, -2.126167282899112e+00, -2.147690782276658e+00, -2.123525029484862e+00, -2.143107027803891e+00, -2.139300351581841e+00, -2.139300351581841e+00, -6.062754758501572e-01, -6.435704658131908e-01, -5.469813587936129e-01, -5.492091358035075e-01, -6.170743039031896e-01, -6.170743039031898e-01, -9.822605819057041e-02, -1.899973663482937e-01, -9.091307794360490e-02, -1.868676419333607e+00, -1.163211897022727e-01, -1.163211897022727e-01, -2.846152244159348e-03, -3.637022539494522e-03, -2.807594962617062e-03, -6.106815820765069e-02, -3.530217462174599e-03, -3.530217462174600e-03, -6.172374730439062e-01, -6.170908987892465e-01, -6.171473320585124e-01, -6.171841321019365e-01, -6.171634180506470e-01, -6.171634180506470e-01, -5.956633329381129e-01, -5.382694781945443e-01, -5.556291282468723e-01, -5.713884924140442e-01, -5.630134941167051e-01, -5.630134941167051e-01, -6.676000264292279e-01, -2.419432589190636e-01, -2.876327249303475e-01, -3.616893408744706e-01, -3.252547325031719e-01, -3.252547325031719e-01, -4.812039172855148e-01, -3.631683050358837e-02, -4.924077882406538e-02, -3.471423308298884e-01, -7.813167762184933e-02, -7.813167762184936e-02, -9.089335359864614e-03, -9.476778499506789e-04, -2.071149990073288e-03, -7.361202813277187e-02, -3.242614037059709e-03, -3.242614037059705e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_6_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_6", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.770597491727418e+01, -2.770576076056048e+01, -2.770612289489078e+01, -2.770586825037779e+01, -2.770650961261423e+01, -2.770644668042608e+01, -2.770483890532378e+01, -2.770431698273706e+01, -2.770606684939548e+01, -2.770510462368123e+01, -2.770606684939548e+01, -2.770510462368123e+01, -4.385407691674813e+00, -4.385380305377353e+00, -4.385532949646729e+00, -4.385470296406185e+00, -4.388088583349247e+00, -4.388627729266122e+00, -4.386951422536434e+00, -4.387141818069958e+00, -4.384412905242604e+00, -4.389509250575946e+00, -4.384412905242604e+00, -4.389509250575946e+00, -7.989737910068569e-01, -8.020518866967239e-01, -7.978660100266437e-01, -8.014838315854215e-01, -7.839157827329176e-01, -7.807620625173310e-01, -7.899232024460473e-01, -7.914519452310083e-01, -8.070126334192873e-01, -7.751839734383934e-01, -8.070126334192873e-01, -7.751839734383934e-01, -2.191695472154380e-01, -2.271768429803986e-01, -2.209708185267475e-01, -2.300827720755542e-01, -9.102899072474034e-01, -9.306347939519859e-01, -1.720167416534258e-01, -1.749157651265843e-01, -2.282992300773081e-01, -1.271990122589857e-01, -2.282992300773083e-01, -1.271990122589857e-01, -7.937599151997425e-03, -8.433800359265510e-03, -8.318516085497220e-03, -8.910118181384267e-03, -4.624359252471765e-02, -4.881948815030576e-02, -4.778048755386667e-03, -4.697484968997805e-03, -7.083466618178257e-03, -4.039160855008199e-03, -7.083466618178254e-03, -4.039160855008201e-03, -6.872015046416799e+00, -6.870195989952063e+00, -6.876311006921894e+00, -6.874346548182130e+00, -6.872227036854650e+00, -6.870319433046254e+00, -6.875914091919364e+00, -6.874090852040523e+00, -6.874235554427901e+00, -6.872283860721033e+00, -6.874235554427901e+00, -6.872283860721033e+00, -2.406795485051519e+00, -2.406394475780865e+00, -2.422951387939112e+00, -2.422007284579909e+00, -2.391709707254949e+00, -2.395520804017921e+00, -2.405080363076764e+00, -2.409144639559514e+00, -2.428121549317711e+00, -2.416237215703352e+00, -2.428121549317711e+00, -2.416237215703352e+00, -7.588386050734250e-01, -7.570308774796798e-01, -8.734444224596084e-01, -8.746600214104383e-01, -6.733102648709509e-01, -7.068540843450428e-01, -7.398906602276839e-01, -7.704392502941755e-01, -7.961340438605357e-01, -7.541223907721586e-01, -7.961340438605357e-01, -7.541223907721588e-01, -1.222405588904721e-01, -1.233297412701777e-01, -2.277110676673042e-01, -2.287151330709839e-01, -1.107514015220924e-01, -1.166025020448743e-01, -2.608280456506101e+00, -2.607266361607681e+00, -1.391765956278893e-01, -1.467613291041883e-01, -1.391765956278892e-01, -1.467613291041882e-01, -3.592858580612329e-03, -3.733322511614302e-03, -4.602379524118285e-03, -4.672853021798515e-03, -3.437874577365500e-03, -3.641062604398559e-03, -7.668376953307109e-02, -7.716666846933490e-02, -3.521317246282754e-03, -4.816315642923872e-03, -3.521317246282756e-03, -4.816315642923867e-03, -8.178590324979802e-01, -8.212149238494089e-01, -7.996275509563179e-01, -8.031209074195601e-01, -8.059647486947792e-01, -8.094513764360569e-01, -8.113085861138571e-01, -8.146777250457825e-01, -8.086329825798489e-01, -8.120586838030580e-01, -8.086329825798489e-01, -8.120586838030580e-01, -8.010824513495903e-01, -8.036891549804163e-01, -6.060979313169655e-01, -6.090536118499789e-01, -6.510392400441085e-01, -6.547024048952453e-01, -7.075930293833443e-01, -7.104251257119637e-01, -6.782229261379693e-01, -6.810169767348683e-01, -6.782229261379693e-01, -6.810169767348683e-01, -9.107795376612957e-01, -9.140863809583047e-01, -2.832113878995365e-01, -2.846263995273485e-01, -3.305309738135196e-01, -3.332068392178920e-01, -4.277805431828126e-01, -4.302199559924316e-01, -3.734794304722315e-01, -3.732637997814177e-01, -3.734794304722314e-01, -3.732637997814175e-01, -5.606823031779565e-01, -5.650034736989594e-01, -4.536044498875055e-02, -4.567389811025552e-02, -6.098069650441952e-02, -6.300677873555670e-02, -4.157416322442022e-01, -4.242408586280044e-01, -9.491493086784404e-02, -1.000205325350706e-01, -9.491493086784411e-02, -1.000205325350706e-01, -1.138246097349638e-02, -1.179648621417271e-02, -1.240924338572303e-03, -1.243950132061202e-03, -2.514928495198501e-03, -2.674905837510138e-03, -9.098301126061846e-02, -9.251954390960176e-02, -3.334206692629947e-03, -4.414562878661653e-03, -3.334206692629943e-03, -4.414562878661648e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_6_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_6", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.910286992190322e-08, 0.000000000000000e+00, -2.910459613396508e-08, -2.910265387008332e-08, 0.000000000000000e+00, -2.910443886297770e-08, -2.910189787530774e-08, 0.000000000000000e+00, -2.910337329000900e-08, -2.910435475025406e-08, 0.000000000000000e+00, -2.910650080225312e-08, -2.910275033491255e-08, 0.000000000000000e+00, -2.910520187033857e-08, -2.910275033491255e-08, 0.000000000000000e+00, -2.910520187033857e-08, -2.637114399054599e-05, 0.000000000000000e+00, -2.636550003904891e-05, -2.637666325862245e-05, 0.000000000000000e+00, -2.636895663809083e-05, -2.648174649261672e-05, 0.000000000000000e+00, -2.649877921859802e-05, -2.644528182599173e-05, 0.000000000000000e+00, -2.644163220816340e-05, -2.637598840219016e-05, 0.000000000000000e+00, -2.653446612971169e-05, -2.637598840219016e-05, 0.000000000000000e+00, -2.653446612971169e-05, -9.292453004273128e-03, 0.000000000000000e+00, -9.447639536643774e-03, -9.263944684896441e-03, 0.000000000000000e+00, -9.426711436528165e-03, -8.757427086089065e-03, 0.000000000000000e+00, -8.784713386540417e-03, -9.197650113158772e-03, 0.000000000000000e+00, -9.354144459251498e-03, -9.328143343539968e-03, 0.000000000000000e+00, -8.883344831011433e-03, -9.328143343539968e-03, 0.000000000000000e+00, -8.883344831011433e-03, -1.274973199738809e+00, 0.000000000000000e+00, -1.383501177010277e+00, -1.282133621431230e+00, 0.000000000000000e+00, -1.395871986797344e+00, -2.213479951709064e-03, 0.000000000000000e+00, -2.573825438259566e-03, -9.909575782286025e-01, 0.000000000000000e+00, -1.162249892440764e+00, -1.081412532544249e+00, 0.000000000000000e+00, -1.155154275636336e+00, -1.081412532544249e+00, 0.000000000000000e+00, -1.155154275636336e+00, -4.571902192591923e+02, 0.000000000000000e+00, -4.073760373501729e+02, -4.222744167605110e+02, 0.000000000000000e+00, -3.722785629492961e+02, -9.392721823786998e+00, 0.000000000000000e+00, -8.773577316709341e+00, -1.017938586282723e+03, 0.000000000000000e+00, -1.068592309900539e+03, -5.521273784224798e+02, 0.000000000000000e+00, -2.011009248001333e+03, -5.521273784224792e+02, 0.000000000000000e+00, -2.011009248001333e+03, -8.629942033787804e-06, 0.000000000000000e+00, -8.638438474794341e-06, -8.629218629158900e-06, 0.000000000000000e+00, -8.637741371110001e-06, -8.630023991932178e-06, 0.000000000000000e+00, -8.638502824752019e-06, -8.629397198773734e-06, 0.000000000000000e+00, -8.637863466362166e-06, -8.629486198417215e-06, 0.000000000000000e+00, -8.638078159999597e-06, -8.629486198417215e-06, 0.000000000000000e+00, -8.638078159999597e-06, -2.397043456023676e-04, 0.000000000000000e+00, -2.407031521986859e-04, -2.411443571018142e-04, 0.000000000000000e+00, -2.420674040492140e-04, -2.390060623583100e-04, 0.000000000000000e+00, -2.401970683563022e-04, -2.406512118985913e-04, 0.000000000000000e+00, -2.417679832044771e-04, -2.409129748477393e-04, 0.000000000000000e+00, -2.416038422668778e-04, -2.409129748477393e-04, 0.000000000000000e+00, -2.416038422668778e-04, -4.248835600447725e-02, 0.000000000000000e+00, -4.331213923756384e-02, -3.529959993124959e-02, 0.000000000000000e+00, -3.549369622098209e-02, -4.922301471347854e-02, 0.000000000000000e+00, -4.802961753433319e-02, -4.995427199349484e-02, 0.000000000000000e+00, -4.658746495399000e-02, -3.876714410347071e-02, 0.000000000000000e+00, -4.502403174657182e-02, -3.876714410347072e-02, 0.000000000000000e+00, -4.502403174657184e-02, -1.541881681169076e+00, 0.000000000000000e+00, -1.508463348645934e+00, -6.819166689954962e-01, 0.000000000000000e+00, -6.725682899181931e-01, -1.774746779420008e+00, 0.000000000000000e+00, -1.724240856696110e+00, -3.788404206487255e-04, 0.000000000000000e+00, -3.796128069947579e-04, -1.584193329408596e+00, 0.000000000000000e+00, -1.905631272343979e+00, -1.584193329408597e+00, 0.000000000000000e+00, -1.905631272343980e+00, -1.310767840896442e+03, 0.000000000000000e+00, -1.181101015313827e+03, -1.006329070688668e+03, 0.000000000000000e+00, -9.062640494601226e+02, -5.130679548187584e+03, 0.000000000000000e+00, -4.777397070600841e+03, -3.708536871322335e+00, 0.000000000000000e+00, -4.075129665108800e+00, -1.691728026040190e+03, 0.000000000000000e+00, -2.130334779286959e+03, -1.691728026040191e+03, 0.000000000000000e+00, -2.130334779286959e+03, -5.499936967289570e-02, 0.000000000000000e+00, -5.418567469689580e-02, -5.555339052763256e-02, 0.000000000000000e+00, -5.473960500695504e-02, -5.538379918450637e-02, 0.000000000000000e+00, -5.456827941281200e-02, -5.522343754306004e-02, 0.000000000000000e+00, -5.440936620355195e-02, -5.530576849435092e-02, 0.000000000000000e+00, -5.449094170558253e-02, -5.530576849435092e-02, 0.000000000000000e+00, -5.449094170558253e-02, -6.077086351322584e-02, 0.000000000000000e+00, -6.002834801485982e-02, -8.268570088292972e-02, 0.000000000000000e+00, -8.179241497680220e-02, -7.897009185281594e-02, 0.000000000000000e+00, -7.798635628968728e-02, -7.286771880108055e-02, 0.000000000000000e+00, -7.193566464493208e-02, -7.617412602203884e-02, 0.000000000000000e+00, -7.525578899140627e-02, -7.617412602203884e-02, 0.000000000000000e+00, -7.525578899140627e-02, -2.799614637363128e-02, 0.000000000000000e+00, -2.823651309928306e-02, -4.792588991135684e-01, 0.000000000000000e+00, -4.758320023133614e-01, -3.677740194821210e-01, 0.000000000000000e+00, -3.682180711365270e-01, -2.325354326884342e-01, 0.000000000000000e+00, -2.278141619394422e-01, -3.151958129022330e-01, 0.000000000000000e+00, -3.178281424643450e-01, -3.151958129022332e-01, 0.000000000000000e+00, -3.178281424643452e-01, -9.835171326270359e-02, 0.000000000000000e+00, -9.862566166564955e-02, -1.037179237884766e+01, 0.000000000000000e+00, -1.007372864384008e+01, -5.243350463294815e+00, 0.000000000000000e+00, -5.056266005871636e+00, -3.186851087755930e-01, 0.000000000000000e+00, -3.399318521128507e-01, -3.052661738802605e+00, 0.000000000000000e+00, -3.236794646224344e+00, -3.052661738802605e+00, 0.000000000000000e+00, -3.236794646224347e+00, -1.365731993163747e+02, 0.000000000000000e+00, -1.251867082231992e+02, -1.155468932213605e+04, 0.000000000000000e+00, -1.033687586906227e+04, -6.591763973412201e+03, 0.000000000000000e+00, -5.990449503037627e+03, -3.601810817328248e+00, 0.000000000000000e+00, -3.858173064859741e+00, -3.184501997969479e+03, 0.000000000000000e+00, -2.580259704097265e+03, -3.184501997969486e+03, 0.000000000000000e+00, -2.580259704097272e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_6_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_6", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.706633942085824e-03, 1.706792967287506e-03, 1.706635553237227e-03, 1.706794112213162e-03, 1.706652421970296e-03, 1.706814966126285e-03, 1.706635460558929e-03, 1.706793078603709e-03, 1.706634910919881e-03, 1.706810335751770e-03, 1.706634910919881e-03, 1.706810335751770e-03, 4.543831195182395e-03, 4.538212213529313e-03, 4.545814770020932e-03, 4.539112149430881e-03, 4.579837080555552e-03, 4.584752514565781e-03, 4.585684377632683e-03, 4.581619014632551e-03, 4.540562706834702e-03, 4.612537705117816e-03, 4.540562706834702e-03, 4.612537705117816e-03, 5.711625185892162e-03, 5.779344806800930e-03, 5.721565603774105e-03, 5.753365414424329e-03, 5.614651453474546e-03, 6.018959748005094e-03, 7.038464931427416e-03, 7.213885632753061e-03, 5.348142096442620e-03, 8.503542779642848e-03, 5.348142096442620e-03, 8.503542779642848e-03, 4.670515872363414e-02, 6.083845639511373e-02, 4.746037351264231e-02, 6.342077706542432e-02, -6.670503344189552e-04, -6.272692450682504e-04, 1.301017349603154e-02, 1.861412688610736e-02, 4.396110236515892e-02, 4.856294154003625e-03, 4.396110236515909e-02, 4.856294154003648e-03, 7.144660736396169e-04, 7.692526287812446e-04, 7.532322358758875e-04, 8.237078766370017e-04, 2.616293156257176e-03, 2.936253420459111e-03, 3.088522626311800e-04, 3.141558543084368e-04, 5.974911590319334e-04, 3.293201670565824e-04, 5.974911590319346e-04, 3.293201670565819e-04, 7.293137196180141e-03, 7.295408028011936e-03, 7.294641504591489e-03, 7.296861462526168e-03, 7.293455382775171e-03, 7.295627156450531e-03, 7.294736261260054e-03, 7.296937952279783e-03, 7.293733343096002e-03, 7.296110723882556e-03, 7.293733343096002e-03, 7.296110723882556e-03, 1.167849519587917e-02, 1.176335564457812e-02, 1.214100564337761e-02, 1.220886829343967e-02, 1.172033701655717e-02, 1.178617711410148e-02, 1.214697350646265e-02, 1.221826260086680e-02, 1.191426733024872e-02, 1.200108669368294e-02, 1.191426733024872e-02, 1.200108669368294e-02, 4.598530035890200e-02, 4.687003538767963e-02, 4.805695750310297e-02, 4.872931412858447e-02, 3.212711435400886e-02, 3.890868075491338e-02, 3.459757828407008e-02, 3.915355991928125e-02, 4.870787348157306e-02, 4.643115404982601e-02, 4.870787348157305e-02, 4.643115404982606e-02, 7.943295032451182e-03, 7.845486504084240e-03, 2.765541596132123e-02, 2.752889340635066e-02, 6.493326642190579e-03, 7.667242195159549e-03, 1.194373673356266e-02, 1.195492553145422e-02, 1.283567700562003e-02, 1.899592815395655e-02, 1.283567700562002e-02, 1.899592815395654e-02, 1.208263813100685e-04, 1.260124817299423e-04, 2.409005721216205e-04, 2.217432289570130e-04, 5.775143617672690e-04, 6.344772193568756e-04, 4.348168938266088e-03, 5.328893449180854e-03, 1.248244662223615e-04, 7.325439165152274e-04, 1.248244662223637e-04, 7.325439165152202e-04, 6.535107552206783e-02, 6.514945040599354e-02, 6.502749828954217e-02, 6.483850402849162e-02, 6.514917807634141e-02, 6.495696728618169e-02, 6.524514395649719e-02, 6.504623505695660e-02, 6.519717483526517e-02, 6.500181480804924e-02, 6.519717483526517e-02, 6.500181480804924e-02, 6.591472380777642e-02, 6.580496741870395e-02, 6.365420107391472e-02, 6.367768114262544e-02, 6.585013113265310e-02, 6.581422924141989e-02, 6.662163980144753e-02, 6.645676683964802e-02, 6.617501308925090e-02, 6.614134143866167e-02, 6.617501308925093e-02, 6.614134143866164e-02, 4.173706085374786e-02, 4.299432720773971e-02, 3.973883525737794e-02, 4.002850510634926e-02, 4.694306710037667e-02, 4.823475044723372e-02, 5.042703564479846e-02, 4.988443972233070e-02, 5.472252469569184e-02, 5.500996850436107e-02, 5.472252469569176e-02, 5.500996850436098e-02, 5.250769020992533e-02, 5.440540145567389e-02, 2.942673231804103e-03, 2.884106003475373e-03, 3.306776173760968e-03, 3.542351903688404e-03, 5.774379697002413e-02, 7.152224619593804e-02, 7.447829984174123e-03, 9.388694660077324e-03, 7.447829984174216e-03, 9.388694660077366e-03, 4.869031364797724e-04, 4.878609329786130e-04, 3.055318992870201e-05, 2.063119119172918e-05, 3.112437993888950e-04, 3.394805709175412e-04, 7.935919263357301e-03, 9.630148302959576e-03, 2.234234498836442e-04, 6.827212059716539e-04, 2.234234498836480e-04, 6.827212059716517e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
