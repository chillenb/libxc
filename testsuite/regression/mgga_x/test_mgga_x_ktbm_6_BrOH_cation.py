
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_6_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_6", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.082717135206689e+01, -2.082726984696817e+01, -2.082770940181290e+01, -2.194037121060818e+01, -2.194097021547191e+01, -2.305505616318335e+01, -3.508618103439030e+00, -3.862999977490567e+00, -3.862683190175661e+00, -3.863161934451713e+00, -3.862707049229400e+00, -3.508503769429701e+00, -6.059528137279302e-01, -6.785974999145915e-01, -7.295098069030361e-01, -6.655397072108272e-01, -5.969396796942319e-01, -7.359228244159630e-01, -1.784904771722911e-01, -1.812777422903739e-01, -7.920588529157773e-01, -1.449366188629879e-01, -1.850879452277783e-01, -1.838966958688169e-01, -6.570906704193882e-03, -6.740455517555202e-03, -3.709338720549643e-02, -3.788371509754619e-03, -5.288119747439317e-03, -5.288119747439317e-03, -5.576580813599344e+00, -5.576810074100237e+00, -5.576586054149364e+00, -5.576788893307397e+00, -5.381435173526522e+00, -5.381608956455728e+00, -2.182873523142634e+00, -2.197164774803302e+00, -2.172426239412963e+00, -2.185137682406882e+00, -1.986767225975981e+00, -2.195778914026232e+00, -5.967378776397079e-01, -6.870155014160664e-01, -6.013440427024650e-01, -6.187172250743226e-01, -6.101941084065305e-01, -6.524170387990677e-01, -9.991255104851754e-02, -1.788098087583154e-01, -9.248736373875779e-02, -2.094320031868576e+00, -1.179698940670823e-01, -1.179698940670823e-01, -2.843878536434355e-03, -3.703358939012124e-03, -2.836105352641322e-03, -5.969743273968110e-02, -3.562642072737745e-03, -3.562642072737746e-03, -6.227951034153192e-01, -6.224426890080887e-01, -6.021780784940689e-01, -6.141790638565962e-01, -6.039550841731143e-01, -6.132541694018412e-01, -6.063480881880511e-01, -4.982974065219605e-01, -5.255334264355263e-01, -5.801677610762843e-01, -5.713006282825721e-01, -5.393218042651942e-01, -6.856196151640732e-01, -2.442363699331867e-01, -2.674447622886956e-01, -3.507273540662610e-01, -3.383179446937796e-01, -3.049574626888638e-01, -5.030343694218706e-01, -3.415817586700057e-02, -4.980439380907714e-02, -3.716075224778915e-01, -7.920257789585115e-02, -7.920257789585117e-02, -8.705901240002506e-03, -9.898127605748328e-04, -1.956951198578770e-03, -6.828442183244421e-02, -3.271664012437941e-03, -3.123165567992069e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_6_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_6", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.994227857886479e+01, -2.994240217812873e+01, -2.994239912081251e+01, -2.994248970548665e+01, -2.994279491038042e+01, -2.994305391866183e+01, -2.994143486290273e+01, -2.753259640198996e+01, -2.994235057465588e+01, -2.753347971933932e+01, -2.753368762453294e+01, -2.753347971933932e+01, -4.246260816093291e+00, -4.454690827377619e+00, -4.246271694610606e+00, -4.246208334636443e+00, -4.246476777284060e+00, -4.246560643140805e+00, -4.246757405294928e+00, -4.246816964553218e+00, -4.245556341388783e+00, -4.247094522325933e+00, -4.453693732609212e+00, -4.247094522325933e+00, -7.690830153050485e-01, -7.739247100709101e-01, -7.674029303283695e-01, -8.476508289459418e-01, -8.345225371848287e-01, -8.300119647335852e-01, -8.350767612376648e-01, -7.532044960443668e-01, -7.811161270410192e-01, -7.212726868976395e-01, -8.533971757647343e-01, -8.144932474826739e-01, -1.943222719876556e-01, -2.280748154493367e-01, -1.963177698280072e-01, -2.312514701332117e-01, -1.008232466306893e+00, -9.061364299875745e-01, -1.750270757948619e-01, -1.770252765306992e-01, -2.311882546069124e-01, -1.285640155011893e-01, -2.311882546069120e-01, -1.236068085384452e-01, -7.936276603425338e-03, -8.433196923364503e-03, -8.342872654335145e-03, -8.908739306793985e-03, -4.605782725380783e-02, -4.879091787307038e-02, -4.770821516200190e-03, -4.691326900557100e-03, -7.079967754013626e-03, -4.029004438660960e-03, -7.079967754013626e-03, -4.029004438660954e-03, -6.868660967270072e+00, -6.867034714987417e+00, -6.872992438476514e+00, -6.871219673036779e+00, -6.868951627565101e+00, -6.867214610046295e+00, -6.872666252168735e+00, -6.871014446698114e+00, -7.334966640549387e+00, -6.869130183575937e+00, -6.870841588393282e+00, -7.333173861680459e+00, -2.398374527611346e+00, -2.397930416787977e+00, -2.413086312549460e+00, -2.412243510149727e+00, -2.386659213671107e+00, -2.389504838701696e+00, -2.398884644675674e+00, -2.402065009047120e+00, -2.415773333064861e+00, -2.444936664421128e+00, -2.415773333064861e+00, -2.406597378204036e+00, -7.280321726669121e-01, -7.985255109565338e-01, -8.237203215958850e-01, -8.262979131607072e-01, -6.507554973627288e-01, -6.770207655883738e-01, -6.858717121882131e-01, -7.146193314206251e-01, -7.659371932822194e-01, -7.923970150450295e-01, -7.659371932822194e-01, -7.210275586507559e-01, -1.227696774504762e-01, -1.239271549652412e-01, -2.040728462889249e-01, -2.303978134693394e-01, -1.111812908727848e-01, -1.170708515132508e-01, -2.405963936319429e+00, -2.405007847704310e+00, -1.399932998763054e-01, -1.477359633979812e-01, -1.399932998763052e-01, -1.477359633979812e-01, -3.591491406532700e-03, -3.719487608979883e-03, -4.590375208954363e-03, -4.659852052706665e-03, -3.432544311444445e-03, -3.635177176692370e-03, -7.677200370060508e-02, -7.590917814556683e-02, -3.505847420772315e-03, -4.814583357599998e-03, -3.505847420772311e-03, -4.814583357599997e-03, -8.104279889563450e-01, -8.139543296578456e-01, -7.925623561581643e-01, -7.962058389672453e-01, -8.252671243008561e-01, -8.284266246864862e-01, -8.261646266865260e-01, -8.075255392860645e-01, -8.257279111254930e-01, -8.288749459041338e-01, -8.257279111254930e-01, -8.049552060237051e-01, -7.868564291890998e-01, -7.898995673696904e-01, -6.028322592684890e-01, -6.578080432415480e-01, -6.443623408341346e-01, -7.130095661542668e-01, -6.972176269604375e-01, -7.000598335178885e-01, -6.691062077508357e-01, -6.721454653878858e-01, -6.691062077508358e-01, -7.361390845144409e-01, -8.508968687069925e-01, -9.350108772467327e-01, -2.847860784090696e-01, -2.862618393675316e-01, -2.984778864253488e-01, -3.367402230108571e-01, -4.276465230833419e-01, -4.274309710072652e-01, -3.761588668772796e-01, -3.758644694006406e-01, -3.761588668772794e-01, -3.568654741274977e-01, -5.516123419466582e-01, -5.555359581428608e-01, -4.520040869792459e-02, -4.550847672760820e-02, -6.096188203477584e-02, -6.299512036656357e-02, -4.061451058085249e-01, -4.129628014767123e-01, -9.514867334543033e-02, -1.003542050266655e-01, -9.514867334543038e-02, -1.003542050266655e-01, -1.138761238987333e-02, -1.180011345439864e-02, -1.234989173650180e-03, -1.237811823943413e-03, -2.521649813725683e-03, -2.681957381784741e-03, -8.855369984557332e-02, -8.970347771284415e-02, -3.320773302168943e-03, -4.412933384202855e-03, -3.320773302168935e-03, -4.427788976821503e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_6_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_6", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.709025223841015e-08, 0.000000000000000e+00, -2.709174322226569e-08, -2.709010052276710e-08, 0.000000000000000e+00, -2.709163270307325e-08, -2.708947165546370e-08, 0.000000000000000e+00, -2.709077140194458e-08, -2.709120173112890e-08, 0.000000000000000e+00, -2.925057335555450e-08, -2.709017412240739e-08, 0.000000000000000e+00, -2.924917919513270e-08, -2.924735438520855e-08, 0.000000000000000e+00, -2.924917919513270e-08, -2.851214121400961e-05, 0.000000000000000e+00, -2.480155204960258e-05, -2.851761062366151e-05, 0.000000000000000e+00, -2.851260325150257e-05, -2.862433970280241e-05, 0.000000000000000e+00, -2.864221728304300e-05, -2.857591847247593e-05, 0.000000000000000e+00, -2.857446680505163e-05, -2.851822689566417e-05, 0.000000000000000e+00, -2.866837627107051e-05, -2.480911458424223e-05, 0.000000000000000e+00, -2.866837627107051e-05, -8.737725726315617e-03, 0.000000000000000e+00, -8.902457424545334e-03, -8.704079970520502e-03, 0.000000000000000e+00, -1.052053461986644e-02, -9.731447442870553e-03, 0.000000000000000e+00, -9.728143041162523e-03, -1.014148890233819e-02, 0.000000000000000e+00, -8.665704065443747e-03, -8.825670183220473e-03, 0.000000000000000e+00, -8.003375576745589e-03, -1.044361574699238e-02, 0.000000000000000e+00, -9.632717970769559e-03, -1.052019246788548e+00, 0.000000000000000e+00, -1.392821695238846e+00, -1.065940063823212e+00, 0.000000000000000e+00, -1.407996054200675e+00, -2.649466687207254e-03, 0.000000000000000e+00, -2.477005935019553e-03, -1.070298012033793e+00, 0.000000000000000e+00, -1.215327987464124e+00, -1.105490339400635e+00, 0.000000000000000e+00, -1.347406026116705e+00, -1.105490339400633e+00, 0.000000000000000e+00, -7.785157271601501e-01, -4.602101902408955e+02, 0.000000000000000e+00, -4.085237069249345e+02, -1.718333144755752e+02, 0.000000000000000e+00, -3.745715566278939e+02, -4.347429649848804e+00, 0.000000000000000e+00, -9.243937430182701e+00, -1.087509188518011e+03, 0.000000000000000e+00, -1.130394232853465e+03, -5.632493497239971e+02, 0.000000000000000e+00, -2.272717373281326e+03, -5.632493497239971e+02, 0.000000000000000e+00, -2.272717373281327e+03, -8.633202811233302e-06, 0.000000000000000e+00, -8.641515441883857e-06, -8.632442637031071e-06, 0.000000000000000e+00, -8.640782808167431e-06, -8.633208135161888e-06, 0.000000000000000e+00, -8.641524755473904e-06, -8.632552654526810e-06, 0.000000000000000e+00, -8.640855908464628e-06, -8.158770742817346e-06, 0.000000000000000e+00, -8.641146695642127e-06, -8.632784596246472e-06, 0.000000000000000e+00, -8.166636849641434e-06, -2.442976761721047e-04, 0.000000000000000e+00, -2.451735918216293e-04, -2.451290732485523e-04, 0.000000000000000e+00, -2.459513405224081e-04, -2.428684976866199e-04, 0.000000000000000e+00, -2.441641364873114e-04, -2.439620896465505e-04, 0.000000000000000e+00, -2.451623677422325e-04, -2.456760749892362e-04, 0.000000000000000e+00, -2.122155013306980e-04, -2.456760749892362e-04, 0.000000000000000e+00, -2.458328252382328e-04, -4.438470144194505e-02, 0.000000000000000e+00, -4.039388271421364e-02, -3.713664215122255e-02, 0.000000000000000e+00, -3.727201065001141e-02, -5.294783217224965e-02, 0.000000000000000e+00, -5.105810083624854e-02, -5.473664538055710e-02, 0.000000000000000e+00, -5.047552421545047e-02, -4.019297102580401e-02, 0.000000000000000e+00, -4.221813422293489e-02, -4.019297102580401e-02, 0.000000000000000e+00, -4.715784946376898e-02, -1.642183833918137e+00, 0.000000000000000e+00, -1.615229704457941e+00, -5.311350549736111e-01, 0.000000000000000e+00, -6.844950683593873e-01, -1.920703681105181e+00, 0.000000000000000e+00, -1.839999797529293e+00, -4.115757082586967e-04, 0.000000000000000e+00, -4.124048648628136e-04, -1.654877698386658e+00, 0.000000000000000e+00, -1.967312613461633e+00, -1.654877698386658e+00, 0.000000000000000e+00, -1.967312613461633e+00, -6.605476679753426e+02, 0.000000000000000e+00, -1.463061604567495e+03, -1.143970810756457e+03, 0.000000000000000e+00, -1.042212798549242e+03, -5.492629912785184e+03, 0.000000000000000e+00, -5.132192797629870e+03, -4.080500694282630e+00, 0.000000000000000e+00, -2.151870477588347e+00, -2.283904526651028e+03, 0.000000000000000e+00, -2.161089799278931e+03, -2.283904526651029e+03, 0.000000000000000e+00, -2.161089799278931e+03, -5.541434100476701e-02, 0.000000000000000e+00, -5.458365357013432e-02, -5.594909183849437e-02, 0.000000000000000e+00, -5.511971457741414e-02, -5.427819416438413e-02, 0.000000000000000e+00, -5.350209496163872e-02, -5.437664077646601e-02, 0.000000000000000e+00, -5.480145794063998e-02, -5.432905003925954e-02, 0.000000000000000e+00, -5.354835580849024e-02, -5.432905003925954e-02, 0.000000000000000e+00, -5.488048597105939e-02, -6.168330519323984e-02, 0.000000000000000e+00, -6.089877041113348e-02, -8.322132625955743e-02, 0.000000000000000e+00, -7.267302098302657e-02, -7.969790225344749e-02, 0.000000000000000e+00, -7.112756218950073e-02, -7.373239629628435e-02, 0.000000000000000e+00, -7.278435427014218e-02, -7.703403616383606e-02, 0.000000000000000e+00, -7.607599329979245e-02, -7.703403616383606e-02, 0.000000000000000e+00, -6.971710790240083e-02, -2.978753343769332e-02, 0.000000000000000e+00, -2.756740811331714e-02, -4.839522568489730e-01, 0.000000000000000e+00, -4.806243207922727e-01, -3.137141655312327e-01, 0.000000000000000e+00, -3.754807634979678e-01, -2.103987840694883e-01, 0.000000000000000e+00, -2.394438063296286e-01, -3.244543265304077e-01, 0.000000000000000e+00, -3.272129354818298e-01, -3.244543265304079e-01, 0.000000000000000e+00, -2.789281874243517e-01, -1.016153107821361e-01, 0.000000000000000e+00, -1.016381417781529e-01, -4.625098364070616e+00, 0.000000000000000e+00, -4.518612213245780e+00, -5.614135429675293e+00, 0.000000000000000e+00, -5.397506208727591e+00, -3.370248414154705e-01, 0.000000000000000e+00, -3.539836526736713e-01, -3.239308072864358e+00, 0.000000000000000e+00, -3.416583156336641e+00, -3.239308072864358e+00, 0.000000000000000e+00, -3.416583156336644e+00, -6.302522868822572e+01, 0.000000000000000e+00, -5.829943083324086e+01, -1.693309957274342e+04, 0.000000000000000e+00, -1.681886570716175e+04, -2.731997353019389e+03, 0.000000000000000e+00, -2.486230746021315e+03, -2.056248039191576e+00, 0.000000000000000e+00, -2.184815969864141e+00, -4.090562343804950e+03, 0.000000000000000e+00, -2.618461426586961e+03, -4.090562343804958e+03, 0.000000000000000e+00, -1.051672534424900e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_6_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_6", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.273889139313414e-03, 1.274048242412857e-03, 1.273908136412520e-03, 1.274062009314251e-03, 1.273959428297384e-03, 1.274138128799589e-03, 1.273746648955507e-03, 1.738974920569484e-03, 1.273901545446818e-03, 1.738969498070498e-03, 1.738936270393073e-03, 1.738969498070498e-03, 8.424296651592148e-03, 1.872585877525739e-03, 8.425482320075390e-03, 8.424202189051379e-03, 8.448511044091944e-03, 8.452532329736423e-03, 8.439438990624569e-03, 8.439352211117072e-03, 8.423003205638100e-03, 8.459891822356208e-03, 1.870352807001872e-03, 8.459891822356208e-03, -3.557799095998772e-03, -3.393306673921637e-03, -3.602925433333957e-03, 2.558785102269134e-02, 2.234889367877240e-02, 2.194199024804823e-02, 2.341827349897910e-02, -3.870044915160153e-03, -3.259372660705643e-03, -4.279677058178372e-03, 2.595445158827836e-02, 2.038766636599088e-02, -1.398283328084756e-02, 6.410539924127906e-02, -1.428058928629242e-02, 6.791577563150732e-02, 1.027743014692761e-02, -3.178526076219681e-03, 2.039440331653571e-02, 2.419449819690079e-02, 5.225654228110428e-02, 9.684013945701484e-03, 5.225654228110414e-02, -1.638485263866634e-03, 7.279986963690218e-04, 7.754427203922960e-04, -1.358318937266641e-06, 8.382584158861478e-04, -1.112214941213649e-04, 3.445438305232076e-03, 3.735676912568446e-04, 3.692085792274882e-04, 6.325054600404757e-04, 4.702190781932228e-04, 6.325054600404757e-04, 4.702190781932197e-04, 7.301972057596213e-03, 7.303738789704463e-03, 7.303351134340448e-03, 7.305072694468774e-03, 7.302080839282972e-03, 7.303807862969327e-03, 7.303262519135894e-03, 7.305017990128250e-03, 6.057635490637709e-03, 7.304406870617331e-03, 7.302656989798153e-03, 6.058946241095848e-03, 1.340189414655854e-02, 1.343677379393696e-02, 1.363480116435742e-02, 1.366148458897336e-02, 1.317461364863316e-02, 1.327514726719759e-02, 1.339306296130708e-02, 1.349152268035550e-02, 1.369448648813024e-02, 1.653805246377423e-03, 1.369448648813024e-02, 1.358239763507867e-02, 5.827922536106606e-02, 2.926555242838945e-02, 5.847958591854984e-02, 5.863110424977346e-02, 5.590021428791171e-02, 5.799113947658818e-02, 6.101508031381305e-02, 6.084886345834664e-02, 5.799071535274426e-02, 3.018525241565869e-02, 5.799071535274428e-02, 5.944371634391846e-02, 1.028351101180349e-02, 1.041288098648488e-02, -8.685671645686574e-03, 3.093209128257650e-02, 8.845932371097341e-03, 9.958921451639490e-03, 1.843791953406358e-02, 1.844851462138285e-02, 1.575057459189737e-02, 2.245777771534942e-02, 1.575057459189729e-02, 2.245777771534945e-02, -5.550166560537022e-08, 2.381393640234928e-04, 3.500330106002172e-04, 3.335954333304532e-04, 7.027681686843041e-04, 7.799750785554787e-04, 6.041046842880888e-03, -6.302184744556856e-04, 3.113041024131188e-04, 7.631063503090458e-04, 3.113041024131187e-04, 7.631063503090430e-04, 6.646974944346326e-02, 6.622993678428177e-02, 6.624530078491619e-02, 6.601515940382426e-02, 6.194677610000874e-02, 6.184940348409836e-02, 6.288002779825881e-02, 6.616418038826763e-02, 6.241857325318406e-02, 6.230224129521476e-02, 6.241857325318406e-02, 6.613393959864523e-02, 6.822160644070745e-02, 6.801650282286052e-02, 6.602136287832801e-02, 2.534136790562648e-02, 6.873584522588831e-02, 3.982004226425664e-02, 6.955363243294749e-02, 6.935244346043652e-02, 6.934938729056997e-02, 6.918292291768020e-02, 6.934938729057000e-02, 4.645419550038328e-02, 5.476553315387701e-02, 3.846810502501392e-02, 4.278716435791730e-02, 4.320291948600408e-02, -1.020544777520923e-02, 5.675724053689769e-02, 7.091076583780337e-03, 7.447293786752135e-02, 6.952912559419187e-02, 6.996077865062095e-02, 6.952912559419172e-02, -3.056589837781871e-03, 6.552750916022257e-02, 6.634023175214716e-02, -1.106275662519994e-04, -1.106578309448263e-04, 4.106241775779910e-03, 4.363501510698224e-03, 8.740186954192504e-02, 9.280095040320804e-02, 9.315118842244932e-03, 1.164913144414552e-02, 9.315118842244997e-03, 1.164913144414556e-02, -1.608386051688095e-06, -1.763923933307356e-06, 1.008818743724209e-04, 1.008899310497165e-04, -7.985915476445337e-08, -1.017924290244042e-07, -1.326560315943062e-03, -1.553196626700511e-03, 4.738586498884119e-04, 7.119379453696883e-04, 4.738586498884086e-04, -6.067477842767395e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
