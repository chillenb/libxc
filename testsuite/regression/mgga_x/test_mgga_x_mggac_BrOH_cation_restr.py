
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mggac_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mggac", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.184519501788878e+01, -2.184532551161800e+01, -2.184589644881724e+01, -2.184395974265120e+01, -2.184497580198153e+01, -2.184497580198153e+01, -3.108944399427158e+00, -3.109006090549983e+00, -3.110699860367979e+00, -3.110294099602032e+00, -3.110014241391891e+00, -3.789023000998446e+00, -5.856724420578887e-01, -7.300035787392402e-01, -7.106149445376990e-01, -7.165134592375165e-01, -7.152590693303069e-01, -7.152590693303069e-01, -1.887031389604497e-01, -1.915610396845072e-01, -6.807910489415808e-01, -1.432597512895335e-01, -1.608692384082590e-01, -1.608692384082590e-01, -6.568960657755782e-03, -6.914103150230007e-03, -3.814582251951267e-02, -3.793780068059104e-03, -4.767175074639180e-03, -4.767175074639180e-03, -5.672822963000117e+00, -5.673864419691657e+00, -5.672874833103261e+00, -5.488710962287926e+00, -5.673348761067125e+00, -5.673348761067125e+00, -1.730135160287688e+00, -1.745849343674431e+00, -1.718725914019253e+00, -1.732409538886456e+00, -1.744475650230398e+00, -2.146310980941339e+00, -6.392661063315108e-01, -6.944681328742730e-01, -5.915142964722417e-01, -6.148855349624921e-01, -6.495724990339745e-01, -5.717099331572416e-01, -7.937671446523520e-02, -1.889897092464424e-01, -7.343299129448942e-02, -2.091527502443536e+00, -1.167231699817900e-01, -1.167231699817900e-01, -2.335966136343245e-03, -3.708755649081628e-03, -2.835892862270181e-03, -4.938902390005839e-02, -2.726378252181790e-03, -3.416371648621744e-03, -6.423700492015818e-01, -6.386852570394377e-01, -6.348509031716398e-01, -6.410498604025693e-01, -6.405152881710479e-01, -6.405152881710479e-01, -6.249575871102175e-01, -5.364810714054404e-01, -5.617813876003571e-01, -5.868754679788690e-01, -5.740593451259048e-01, -5.273362438060292e-01, -7.280585350992897e-01, -1.907768057853895e-01, -2.867585267505761e-01, -3.070730468001759e-01, -3.293921058865824e-01, -3.293921058865824e-01, -4.065966129819539e-01, -3.651039498571760e-02, -4.977605015768774e-02, -3.651382060767787e-01, -6.288869401603395e-02, -7.880329572051911e-02, -9.270820614268555e-03, -9.913739164852605e-04, -2.080938164201973e-03, -7.399966425855706e-02, -3.161212423452413e-03, -3.161212423452410e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mggac_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mggac", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.286756899558733e+01, -3.286760336646537e+01, -3.286780748194984e+01, -3.286729107544255e+01, -3.286755452151424e+01, -3.286755452151424e+01, -4.495031054046375e+00, -4.495321882868942e+00, -4.503123450038582e+00, -4.500365220559034e+00, -4.500192528076190e+00, -5.052030668008324e+00, -7.912703431199152e-01, -9.733381049899416e-01, -9.474865927217778e-01, -9.553512789879163e-01, -9.536787591117010e-01, -9.536787591117010e-01, -2.516041852823244e-01, -2.554147195810021e-01, -9.106969989293698e-01, -1.910130017227156e-01, -2.144923178801680e-01, -2.144923178801680e-01, -8.758614265882880e-03, -9.218804251995808e-03, -5.086109670604412e-02, -5.058373536416214e-03, -6.356233508607191e-03, -6.356233508607191e-03, -7.563763950670464e+00, -7.565152559592488e+00, -7.563833110807987e+00, -7.837088998525153e+00, -7.564465014759794e+00, -7.564465014759794e+00, -2.426920144263433e+00, -2.461602483817709e+00, -2.401853460539749e+00, -2.431498013708568e+00, -2.458917501380413e+00, -2.861747974595461e+00, -8.523548084430895e-01, -9.259575104996419e-01, -7.886857286310760e-01, -8.198473799510084e-01, -8.660966653796159e-01, -9.089959645407623e-01, -1.058423731701901e-01, -2.519862789980797e-01, -9.791528382780947e-02, -2.788703336594347e+00, -1.556308933126180e-01, -1.556308933126180e-01, -3.114621515266754e-03, -4.945007654333366e-03, -3.781190539230785e-03, -6.585277819433152e-02, -3.635171004132264e-03, -4.555162273476213e-03, -8.564933989355522e-01, -8.515803427194684e-01, -8.611612749885100e-01, -8.547331472035741e-01, -8.540203842282281e-01, -8.540203842282281e-01, -8.332767828137451e-01, -7.153080952083720e-01, -7.490418501346047e-01, -7.825006239723257e-01, -7.654124601685209e-01, -8.172526104102501e-01, -9.707447134665010e-01, -2.552784118551941e-01, -3.823447023360209e-01, -4.297078878891011e-01, -4.391894745169649e-01, -4.391894745169648e-01, -5.926805399141490e-01, -4.868052666148640e-02, -6.636806688769681e-02, -4.868509414366398e-01, -8.385523119800381e-02, -1.050710609658875e-01, -1.236109420927552e-02, -1.321832302394714e-03, -2.774584335213020e-03, -9.866621901672629e-02, -4.214949966114386e-03, -4.214949966114383e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mggac_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mggac", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.418062922329535e-08, -1.418034175142240e-08, -1.417906680487431e-08, -1.418333452590934e-08, -1.418109837292563e-08, -1.418109837292563e-08, -3.939804359566852e-06, -3.943143774408157e-06, -4.031871277410421e-06, -3.994338935339472e-06, -4.000009708488197e-06, 0.000000000000000e+00, -2.067230703817564e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.589887180476231e-05, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -3.358697946791734e-06, 0.000000000000000e+00, 0.000000000000000e+00, -1.944929864079973e-05, -2.178853514993329e-05, -1.774469119407476e-05, -1.968374491981979e-05, -2.167202529853743e-05, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.032607678568992e-02, -3.053669447255389e-04, 0.000000000000000e+00, -2.686052901480610e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.687874858981785e-07, 0.000000000000000e+00, 0.000000000000000e+00, -1.596507622285002e-04, -2.891023703186466e-06, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.180528274543607e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -3.934525635793282e-02, 0.000000000000000e+00, -2.911571794050948e-03, 0.000000000000000e+00, -1.819298504453002e-02, 0.000000000000000e+00, 0.000000000000000e+00, -1.584185757892243e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -4.404216921613262e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mggac_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mggac", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.193256688207859e-03, 2.193230575982999e-03, 2.193120619634329e-03, 2.193507541130055e-03, 2.193304021726303e-03, 2.193304021726303e-03, 2.629667869050388e-03, 2.631913842114438e-03, 2.691737061803487e-03, 2.667164334865441e-03, 2.670066435237318e-03, 7.852544529219754e-14, 9.901032141152876e-04, 4.075798115876339e-13, 4.187003442379016e-13, 4.152534996722673e-13, 4.159817531214459e-13, 4.159817531214459e-13, 1.576734364596700e-12, 1.553211049514734e-12, 1.207285041101778e-04, 2.076889939251941e-12, 1.849543967098186e-12, 1.849543967098186e-12, 4.529514567400456e-11, 4.303395196234744e-11, 7.799937170853820e-12, 7.843373183312195e-11, 6.241609696525439e-11, 6.241609696525439e-11, 5.244914542513696e-14, 5.243951820956948e-14, 5.244866585473918e-14, 7.527850403103204e-03, 5.244428451130682e-14, 5.244428451130682e-14, 2.313819586697196e-03, 2.648926660673351e-03, 2.077669364075604e-03, 2.349551040603012e-03, 2.629400484324154e-03, 1.386260991390751e-13, 4.654317106948993e-13, 4.284353776386215e-13, 5.030051172996582e-13, 4.838863504142913e-13, 4.580469735924066e-13, 6.836215562194645e-02, 3.687110762465338e-06, 1.574343545532596e-12, 2.567917360069993e-06, 1.422571383275066e-13, 2.549063244847145e-12, 2.549063244847145e-12, 8.272275478176802e-14, 8.023263041393012e-11, 1.049235191603620e-10, 4.643793319928812e-07, 1.414576028190804e-12, 8.709643306516851e-11, 4.631827348145318e-13, 4.658549935445195e-13, 3.797158465717703e-02, 4.641366211634175e-13, 4.645239882931307e-13, 4.645239882931307e-13, 4.760878534910939e-13, 5.546043162773353e-13, 5.296272247419981e-13, 5.069810087077556e-13, 5.182995791366851e-13, 9.133601304975565e-02, 4.086686750978125e-13, 4.863884372481935e-04, 1.037579336050319e-12, 1.213119749796954e-02, 9.032843067064861e-13, 9.032843067064860e-13, 2.342172738937007e-02, 8.149324173992133e-12, 5.977471141261259e-12, 8.148550693057643e-13, 2.644728780125359e-06, 3.775664079966674e-12, 3.209424916586874e-11, 3.004873246769349e-10, 1.430042705405464e-10, 4.020758487678080e-12, 9.412634499752243e-11, 9.412634499752259e-11])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
