
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mggac_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mggac", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.325662958894406e+01, -2.325669558816918e+01, -2.325702036710776e+01, -2.325603851753353e+01, -2.325654851668801e+01, -2.325654851668801e+01, -3.324467001368466e+00, -3.324631040914875e+00, -3.329289302699540e+00, -3.330258319840778e+00, -3.328733725465614e+00, -3.328733725465614e+00, -5.905560279710167e-01, -5.898479736716483e-01, -5.732354666287305e-01, -5.799691906310181e-01, -5.782872430042660e-01, -5.782872430042660e-01, -1.831467042017459e-01, -1.844266334103164e-01, -6.812506628739687e-01, -1.151251336631432e-01, -1.328786845438248e-01, -1.328786845438248e-01, -5.242324814192068e-03, -5.517713809560773e-03, -3.044332363907861e-02, -3.027562761339165e-03, -3.804364539023995e-03, -3.804364539023013e-03, -5.672673777835540e+00, -5.673717190375755e+00, -5.672728930449241e+00, -5.673649864672981e+00, -5.673198928797972e+00, -5.673198928797972e+00, -2.096893948313827e+00, -2.121493617137414e+00, -2.092263013968209e+00, -2.113796639995272e+00, -2.113100901867564e+00, -2.113100901867564e+00, -6.183291778289106e-01, -6.740429275538081e-01, -5.382640561831123e-01, -5.556471450272689e-01, -6.314279433293025e-01, -6.314279433293025e-01, -7.949271583054693e-02, -1.743402449315814e-01, -7.350180987373008e-02, -1.915928278097953e+00, -9.450297547719433e-02, -9.450297547719430e-02, -2.335966136641764e-03, -2.959710435777023e-03, -2.263136887238761e-03, -4.939980519104373e-02, -2.726378260645798e-03, -2.726378260645798e-03, -6.417730535487300e-01, -6.381082779416823e-01, -6.393977400310136e-01, -6.404597304428103e-01, -6.399276884208434e-01, -6.399276884208434e-01, -6.232423763660991e-01, -5.356238938622653e-01, -5.606064950895301e-01, -5.854200717293290e-01, -5.726161952771610e-01, -5.726161952771610e-01, -6.959083198548243e-01, -2.336586910479147e-01, -2.741514704860364e-01, -3.470250569801239e-01, -3.121570846413432e-01, -3.121570846413432e-01, -4.793159722667752e-01, -2.914258241688770e-02, -3.972706423820385e-02, -3.436827942283470e-01, -6.298092100294134e-02, -6.298092100293508e-02, -7.398423485973514e-03, -7.911495598190161e-04, -1.660657939286720e-03, -5.927314873412900e-02, -2.522752714139711e-03, -2.522752714139708e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mggac_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mggac", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.071565490732363e+01, -3.071575904037399e+01, -3.071631877048253e+01, -3.071477303868552e+01, -3.071556913301229e+01, -3.071556913301229e+01, -4.882583184709425e+00, -4.882808058320063e+00, -4.888697332017757e+00, -4.886268229414775e+00, -4.886246157756785e+00, -4.886246157756785e+00, -8.085362301104732e-01, -8.073149968504797e-01, -7.795770898831511e-01, -7.920834051702381e-01, -7.888935628947225e-01, -7.888935628947225e-01, -1.259467600073989e-01, -1.282257403276762e-01, -9.126048839292562e-01, -1.490183282526727e-01, -1.395153961344915e-01, -1.395153961344915e-01, -6.971219404887124e-03, -7.353131834665083e-03, -4.056664214073678e-02, -4.036750096818458e-03, -5.072480625079374e-03, -5.072480625066015e-03, -7.539517448846572e+00, -7.541127746441436e+00, -7.539646982482667e+00, -7.541065879280701e+00, -7.540305402877383e+00, -7.540305402877383e+00, -2.475496498763773e+00, -2.538278302014262e+00, -2.465353319560307e+00, -2.528879939074881e+00, -2.515867992898306e+00, -2.515867992898306e+00, -8.255883777735703e-01, -9.400791757623723e-01, -7.688419144920919e-01, -8.505996958493541e-01, -8.438210813452639e-01, -8.438210813452639e-01, -1.049692513332744e-01, 7.906738920647848e-03, -9.744912330974238e-02, -2.920122912334876e+00, -1.059355703540165e-01, -1.059355703540156e-01, -3.114621515413718e-03, -3.946280569101751e-03, -3.017515580017936e-03, -6.577646128966594e-02, -3.635170974738569e-03, -3.635170974738569e-03, -8.560447455634391e-01, -8.491008030286432e-01, -8.515397559180889e-01, -8.535550605829899e-01, -8.525461900677967e-01, -8.525461900677967e-01, -8.348301667387584e-01, -6.912522003408667e-01, -7.312331130864620e-01, -7.724194507993720e-01, -7.509186537090937e-01, -7.509186537090937e-01, -9.945327890862560e-01, -1.629702380262559e-01, -2.388244820804378e-01, -4.468286687128984e-01, -3.390103002729121e-01, -3.390103002729119e-01, -5.967321305738714e-01, -3.863907166660432e-02, -5.292348030499993e-02, -4.534684678142391e-01, -8.288962972237526e-02, -8.288962972239657e-02, -9.864563933864447e-03, -1.054866079760327e-03, -2.214210322695452e-03, -7.405068180582618e-02, -3.363670171980430e-03, -3.363670171980425e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mggac_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mggac", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.234909013143823e-09, -2.234815277708703e-09, -2.233705691853659e-09, -2.235070307025529e-09, -2.234454460665973e-09, -2.234454460665973e-09, -1.711201471862937e-05, -1.711889392097617e-05, -1.730867769735762e-05, -1.733785741454521e-05, -1.729511906392852e-05, -1.729511906392852e-05, -9.540696613935125e-04, -9.480505594889553e-04, -8.661280512941715e-04, -1.227583202397323e-03, -1.099439346544144e-03, -1.099439346544144e-03, -2.648222697789020e+00, -2.702141531455185e+00, -3.203840437920261e-05, -2.849137012859269e-01, -1.614232407071585e+00, -1.614232407071581e+00, -7.412126124086962e+00, -1.362162120562923e+00, -4.880981200342683e-02, -6.150582194556121e-04, -6.825367142610358e-03, -6.825382333908703e-03, -2.622345166619593e-07, -2.616891532367432e-07, -2.616398440967312e-07, -2.611843644916256e-07, -2.622499435252285e-07, -2.622499435252285e-07, -1.303975752204719e-04, -1.116307901206087e-04, -1.225249634051886e-04, -1.039859605104170e-04, -1.234223002671507e-04, -1.234223002671507e-04, -2.087065957154517e-02, -1.443052795002965e-02, -3.455969270244601e-02, -2.912238850078160e-02, -1.850642809947775e-02, -1.850642809947775e-02, -1.349252041381932e-01, -3.349825629562654e+00, -9.701236635042207e-02, -2.229472910411302e-04, -1.785410720855071e+00, -1.785410720855105e+00, -6.066973614611494e-06, -5.300843744482657e-05, -4.468977843665357e-03, -5.574290782925325e-02, -3.408877020795221e-04, -3.408877020795221e-04, -4.428129776006541e-03, -4.475643445551221e-03, -4.459421345379739e-03, -4.446266150026398e-03, -4.454409166607978e-03, -4.454409166607984e-03, -8.027581244939640e-03, -1.157467071725842e-02, -1.086956622352977e-02, -9.858958202180584e-03, -1.083607921162102e-02, -1.083607921162103e-02, -1.365150195261518e-02, -9.176412755221806e-01, -5.665219620258596e-01, -2.073078620781254e-01, -3.412273796789758e-01, -3.412273796789767e-01, -5.649275208847318e-02, -4.171408707351404e-01, -4.281975646682484e-02, -2.320465060767913e-01, -3.415865783202939e-01, -3.415865783109865e-01, -1.865369286967247e-04, -2.603529844500614e-07, -5.815247732027372e-03, -1.635318663763928e+00, -1.145942022484898e-03, -1.145942022484894e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mggac_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mggac", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([3.456637264417968e-04, 3.456521207080928e-04, 3.454942471471247e-04, 3.456622675338079e-04, 3.455894477327353e-04, 3.455894477327353e-04, 1.142161162673672e-02, 1.142627721685550e-02, 1.155552993713451e-02, 1.157711343169397e-02, 1.154475120598699e-02, 1.154475120598699e-02, 4.569530805106462e-03, 4.525700015504712e-03, 3.813857053899612e-03, 5.541193198289109e-03, 4.936744968969187e-03, 4.936744968969187e-03, 2.183590388335832e-01, 2.330821127541581e-01, 2.432844721484737e-04, 1.027933950857914e-02, 8.246399609083609e-02, 8.246399609083661e-02, 2.578173183330572e-05, 5.524788605300566e-06, 3.324508010212017e-05, 4.121088922138240e-10, 9.073788079888784e-09, 9.073808271050969e-09, 5.874445017286378e-04, 5.865457341462017e-04, 5.861284240256221e-04, 5.853925701775700e-04, 5.876424307132613e-04, 5.876424307132613e-04, 1.551297397274891e-02, 1.357143901908507e-02, 1.434605764717118e-02, 1.241228855182655e-02, 1.497444985544338e-02, 1.497444985544338e-02, 6.690529777926699e-02, 5.930871074785005e-02, 8.776975908006091e-02, 8.307859011257482e-02, 6.224217939752882e-02, 6.224217939752882e-02, 1.629135637948426e-03, 2.774699582043935e-01, 9.274565648057905e-04, 2.503065624194099e-02, 3.484084314492537e-02, 3.484084314492601e-02, 1.867188008799396e-12, 3.318249119543258e-11, 1.250711051632703e-09, 1.621404993081940e-04, 1.667961313593475e-10, 1.667961331985076e-10, 1.440308381956869e-02, 1.430854428490745e-02, 1.434368822750752e-02, 1.437309124356687e-02, 1.436342149142805e-02, 1.436342149142809e-02, 2.404449395449403e-02, 2.193063223774588e-02, 2.364795277105386e-02, 2.445390328378407e-02, 2.515485636380297e-02, 2.515485636380296e-02, 6.464852567570500e-02, 1.532952430943226e-01, 1.639249534870994e-01, 1.382341936518958e-01, 1.496451784879610e-01, 1.496451784879611e-01, 8.352289700242962e-02, 2.491217435736612e-04, 6.480145904083864e-05, 1.386200858016031e-01, 2.051224702745671e-03, 2.051224702689430e-03, 1.823890061389213e-09, 3.112824588267066e-15, 6.430209069630451e-10, 8.131505094077842e-03, 4.442249811589895e-10, 4.442249940159970e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
