
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_br89_explicit_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89_explicit", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.882055715238963e+01, -1.882059164058568e+01, -1.882081088426195e+01, -1.882029659564355e+01, -1.882055672690754e+01, -1.882055672690754e+01, -3.617905209476552e+00, -3.617831630161543e+00, -3.616084934389169e+00, -3.618499890055564e+00, -3.617322005504827e+00, -3.617322005504827e+00, -7.712978038238296e-01, -7.715624486418597e-01, -7.791563126640229e-01, -7.799949915877760e-01, -7.797056042143525e-01, -7.797056042143525e-01, -2.441025323596313e-01, -2.444356585884630e-01, -9.262089920674490e-01, -2.223065981710141e-01, -2.432067969833788e-01, -2.432067969833788e-01, -8.039926394940150e-02, -8.026582910132921e-02, -1.363552313977107e-01, -7.647700028290302e-02, -7.701983596108436e-02, -7.701983596108446e-02, -8.637205716380009e+00, -7.005808056093794e+00, -3.817007242720607e+00, -1.034429027266077e+01, -4.144013722350012e+00, -5.951056287932914e+00, -1.430856492497485e+00, -2.633672275490182e+00, -2.338423651137354e+00, -2.344914230740656e+00, -2.344651415905210e+00, -2.137677032098963e+00, -1.220910587930751e+00, -9.747750566685089e-01, -1.114910422230212e+00, -5.991062876019018e-01, -6.563477683860365e-01, -6.965279207114097e-01, -6.689518937521989e-02, -4.256150050154098e-01, -6.178678173040887e-02, -2.053539868965475e+00, -1.837913312613719e-01, -1.629125673729716e-01, -1.483972103369665e-01, -2.321527333264203e+00, -1.904029602521800e-03, -4.153758737020544e-02, -8.877654010423423e-02, -2.391785782028173e-03, -3.122481601309186e+01, -4.281194102538524e-01, -4.289870040532104e-01, -4.526438950478628e+00, -4.293496236299270e-01, -8.295525686673065e+01, -4.189152286863187e-01, -5.483562834918325e-01, -9.716192770678569e-01, -4.225147046902487e-01, -6.211388504068540e-01, -1.263546648771155e+00, -1.403758606550409e+00, -1.601835125068101e-01, -1.923453933456863e-01, -2.561300611160218e-01, -4.447447049732476e-01, -4.051399774993866e-01, -5.178448030837435e-01, -2.449166796267778e-02, -1.573208138356371e-01, -3.735475461466757e-01, -5.293416038005179e-02, -1.481449280302723e-01, -6.218241034537716e-03, -6.645260321065751e-04, -1.397502496156553e-03, -5.131963900800915e-02, -2.196444044937463e-03, -2.196442953410932e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_br89_explicit_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89_explicit", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.824657430015788e+01, -2.824647404615501e+01, -2.824666357043622e+01, -2.824653893511415e+01, -2.824699388919095e+01, -2.824699934562656e+01, -2.824598442804298e+01, -2.824571339144014e+01, -2.824662615163811e+01, -2.824625953426582e+01, -2.824662615163811e+01, -2.824625953426582e+01, -4.577756353425391e+00, -4.578023727344962e+00, -4.577817723164867e+00, -4.578095601714105e+00, -4.579410825190979e+00, -4.579850180237955e+00, -4.577536147263584e+00, -4.577969944879807e+00, -4.576834584895757e+00, -4.579470950099139e+00, -4.576834584895757e+00, -4.579470950099139e+00, -8.718896501147135e-01, -8.759144755415419e-01, -8.703375010441644e-01, -8.753010120900703e-01, -8.511610025247003e-01, -8.445543489997192e-01, -8.516577056882416e-01, -8.534372728186157e-01, -8.841084079544231e-01, -8.203373970633755e-01, -8.841084079544231e-01, -8.203373970633755e-01, -2.253821868059180e-01, -2.314479106504995e-01, -2.273587238983654e-01, -2.345289411376192e-01, -1.023627755464500e+00, -1.051320481535749e+00, -1.864338243606709e-01, -1.870282385148088e-01, -2.336322498367165e-01, -1.496490616392404e-01, -2.336322498367169e-01, -1.496490616392404e-01, -3.252858759111465e-02, -3.332523011793608e-02, -3.297269786001323e-02, -3.397383254278146e-02, -8.283860193163931e-02, -8.426778650310046e-02, -3.185455139271406e-02, -3.203050876025992e-02, -3.217504881373136e-02, -2.830080015978003e-02, -3.217504881373133e-02, -2.830080015978001e-02, -8.505425582041266e+00, -8.229961537564915e+00, -7.474418576882241e+00, -7.465910347586923e+00, -5.116487048843640e+00, -5.110160004810166e+00, -9.298557588712239e+00, -9.371450998624814e+00, -6.027594395428285e+00, -6.030956977846333e+00, -7.065483435616628e+00, -7.028084823360521e+00, -1.910095820650873e+00, -1.910710537515506e+00, -2.720815032207071e+00, -2.719840532723622e+00, -2.514622724775352e+00, -2.519693172269982e+00, -2.527801156697152e+00, -2.536527916968947e+00, -2.558463247849041e+00, -2.544909299438806e+00, -2.447711832897421e+00, -2.439737720087527e+00, -1.058488455743192e+00, -1.104504002158210e+00, -9.795917483149368e-01, -9.818565830916985e-01, -1.001245511242309e+00, -9.834463089330897e-01, -7.532588634612859e-01, -7.783247945406948e-01, -8.140528646074697e-01, -7.730518974222558e-01, -8.243901556602072e-01, -7.837221355399850e-01, -8.907826480464172e-02, -8.994223598727397e-02, -3.457517396921806e-01, -3.461409526817584e-01, -8.009697357836842e-02, -8.440826508173380e-02, -2.615573900958971e+00, -2.614446374834192e+00, -1.410168074773853e-01, -1.472670667353918e-01, -1.195946073513252e-01, -1.225552234835308e-01, -9.853140574166937e-02, -9.715903241604328e-02, -1.579516542942103e+00, -1.553652636403398e+00, -2.459864953965557e-03, -2.605083825924241e-03, -5.530506329980268e-02, -5.561570294719208e-02, -6.225186839929328e-02, -4.598099485640053e-02, -2.512378330380804e-03, -3.450301760205144e-03, -2.136015611857109e+01, -2.149368326389564e+01, -5.697098512046858e-01, -5.719343699082339e-01, -5.708622120221490e-01, -5.730904286687624e-01, -3.264544732115445e+00, -3.173375122392521e+00, -5.713596863654105e-01, -5.735770635146361e-01, -5.718921875700770e+01, -5.734738220441038e+01, -5.576276824787399e-01, -5.594710215651510e-01, -6.340645986904023e-01, -6.366181559532795e-01, -8.884997134439464e-01, -8.947474410736467e-01, -6.138982438904105e-01, -6.006639645328646e-01, -7.109633728918030e-01, -7.135481974854843e-01, -1.068533309953647e+00, -1.069060510217342e+00, -1.244717492376742e+00, -1.240462847567036e+00, -2.131673912315823e-01, -2.143997112015182e-01, -2.553581821531576e-01, -2.579227600027259e-01, -3.443879544171810e-01, -3.459081248428294e-01, -4.376575519898761e-01, -4.384594218783071e-01, -4.116790840554573e-01, -4.127015265954135e-01, -5.868319930614545e-01, -5.915220089493727e-01, -3.256098208951006e-02, -3.279465259251964e-02, -9.679480060613571e-02, -1.052554808608895e-01, -4.343468355047438e-01, -4.400395789810663e-01, -6.854668576074600e-02, -7.240685259719316e-02, -1.021824953991525e-01, -1.009712332415052e-01, -8.135653720445172e-03, -8.430647072740912e-03, -8.850206517675738e-04, -8.870428007030240e-04, -1.800810241174181e-03, -1.915307192435173e-03, -5.973379325641614e-02, -6.789831454410049e-02, -2.379757835220298e-03, -3.162462471367260e-03, -2.379756849993969e-03, -3.162458277547769e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_br89_explicit_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89_explicit", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-9.308698504747058e-09, 0.000000000000000e+00, -9.308499647255666e-09, -9.308481783384222e-09, 0.000000000000000e+00, -9.308342402970653e-09, -9.307983972348703e-09, 0.000000000000000e+00, -9.307572922553457e-09, -9.310426172653155e-09, 0.000000000000000e+00, -9.310688498226496e-09, -9.308562629181743e-09, 0.000000000000000e+00, -9.309583755735350e-09, -9.308562629181743e-09, 0.000000000000000e+00, -9.309583755735350e-09, -1.956161813249636e-05, 0.000000000000000e+00, -1.956706876753085e-05, -1.956271716718233e-05, 0.000000000000000e+00, -1.956836720648711e-05, -1.959053211087894e-05, 0.000000000000000e+00, -1.959649542622247e-05, -1.954964716822611e-05, 0.000000000000000e+00, -1.955427360677374e-05, -1.956932266162773e-05, 0.000000000000000e+00, -1.957794707698074e-05, -1.956932266162773e-05, 0.000000000000000e+00, -1.957794707698074e-05, -9.607086275782025e-03, 0.000000000000000e+00, -9.692210759333022e-03, -9.589396640440796e-03, 0.000000000000000e+00, -9.686186155963117e-03, -9.363508149752415e-03, 0.000000000000000e+00, -9.316321007279509e-03, -9.254012459575685e-03, 0.000000000000000e+00, -9.304057484984285e-03, -9.708973904017225e-03, 0.000000000000000e+00, -8.947511216851318e-03, -9.708973904017225e-03, 0.000000000000000e+00, -8.947511216851318e-03, -1.137454034036353e+00, 0.000000000000000e+00, -1.058364403423131e+00, -1.122541481048669e+00, 0.000000000000000e+00, -1.032801720472966e+00, -4.631505265601233e-03, 0.000000000000000e+00, -4.706080323392406e-03, -2.045348214954149e+00, 0.000000000000000e+00, -1.997904996545606e+00, -9.905809504541647e-01, 0.000000000000000e+00, -4.751047660757544e+00, -9.905809504541603e-01, 0.000000000000000e+00, -4.751047660757519e+00, -1.485966502783911e+04, 0.000000000000000e+00, -1.238811384762337e+04, -1.308595948925894e+04, 0.000000000000000e+00, -1.065358827944592e+04, -8.124775376907488e+01, 0.000000000000000e+00, -7.065224855265723e+01, -6.102319137405498e+04, 0.000000000000000e+00, -6.346749148210410e+04, -2.046542714873741e+04, 0.000000000000000e+00, -1.220201491566718e+05, -2.046542714873748e+04, 0.000000000000000e+00, -1.220201491566717e+05, -8.052612077758256e-07, 0.000000000000000e+00, -9.250358724499564e-07, -1.537578638280642e-06, 0.000000000000000e+00, -1.548237229756361e-06, -1.139026240196190e-09, 0.000000000000000e+00, -9.007223977801778e-10, -5.800332889450717e-07, 0.000000000000000e+00, -5.652179645155656e-07, -5.557517515749238e-07, 0.000000000000000e+00, -5.623728170667227e-07, -2.598627761874088e-06, 0.000000000000000e+00, -2.853761929615558e-06, -3.594934807368935e-09, 0.000000000000000e+00, -4.879382737321931e-09, -7.672924666415754e-05, 0.000000000000000e+00, -7.683745135699976e-05, -1.153255749943239e-04, 0.000000000000000e+00, -1.153467299008253e-04, -1.144429987785476e-04, 0.000000000000000e+00, -1.133962570577994e-04, -1.135550345224326e-04, 0.000000000000000e+00, -1.139763213553679e-04, -1.666614679489265e-04, 0.000000000000000e+00, -1.598207238417093e-04, -3.455027027736001e-03, 0.000000000000000e+00, -3.030197437290031e-03, -4.761803215518907e-03, 0.000000000000000e+00, -4.711818260768259e-03, -4.462620141105543e-03, 0.000000000000000e+00, -4.590786463119820e-03, -2.798418488920767e-02, 0.000000000000000e+00, -2.493820606805761e-02, -1.695235639884460e-02, 0.000000000000000e+00, -2.024446824975628e-02, -1.337123707313032e-02, 0.000000000000000e+00, -1.606233734682755e-02, -8.195859855212151e-03, 0.000000000000000e+00, -8.254971223471710e-03, -3.081137979061444e-01, 0.000000000000000e+00, -3.050315473754838e-01, -1.503592356432408e-04, 0.000000000000000e+00, -1.507087104118777e-04, -1.910712526450178e-04, 0.000000000000000e+00, -1.914374411251384e-04, -4.623644368611930e+00, 0.000000000000000e+00, -4.263626197296675e+00, -6.080063116745959e+00, 0.000000000000000e+00, -5.993345376160702e+00, -4.253738382728355e+04, 0.000000000000000e+00, -3.927545998188554e+04, -3.108040631546850e+02, 0.000000000000000e+00, -3.072144475822477e+02, -6.394766322634604e-08, 0.000000000000000e+00, 1.376079645538847e-08, -9.984937889663981e-03, 0.000000000000000e+00, -6.394585677459690e-03, -8.552719439790175e+04, 0.000000000000000e+00, -5.135047778501639e+04, -4.819834655006000e-06, 0.000000000000000e+00, -2.344647841891187e-05, -1.903066083554209e-05, 0.000000000000000e+00, -1.867023452963260e-05, -6.455084023564232e-12, 0.000000000000000e+00, -6.397573634326761e-12, -2.155946812208333e-14, 0.000000000000000e+00, -2.119733901764055e-14, -2.890825010167652e-04, 0.000000000000000e+00, -3.023151964855249e-04, -7.405343760407308e-11, 0.000000000000000e+00, -5.388246341592590e-11, -3.992746926291673e-06, 0.000000000000000e+00, -3.938315653532494e-06, -7.717182615335318e-14, 0.000000000000000e+00, -7.268784087999489e-14, -3.777827820442441e-02, 0.000000000000000e+00, -3.768881078382153e-02, -6.752340561266685e-03, 0.000000000000000e+00, -6.577036325372473e-03, -4.065595128490676e-03, 0.000000000000000e+00, -2.700602689143652e-03, -2.317113925009440e-02, 0.000000000000000e+00, -2.290447857185248e-02, -3.774282519495709e-03, 0.000000000000000e+00, -3.751300395060952e-03, -1.874836123231465e-03, 0.000000000000000e+00, -1.892730067564137e-03, -1.444291112105874e-05, 0.000000000000000e+00, -1.396858010783957e-05, -4.239158112884257e-06, 0.000000000000000e+00, -4.152236405659383e-06, -2.945333216024185e-04, 0.000000000000000e+00, -2.562580107377176e-04, -1.045505065460741e-01, 0.000000000000000e+00, -1.038882867846776e-01, -1.381649189254762e-01, 0.000000000000000e+00, -1.368061575234835e-01, -4.802393041851898e-02, 0.000000000000000e+00, -4.692724916235998e-02, -1.687847261696114e-02, 0.000000000000000e+00, -2.780708983433335e-02, -3.623673132397389e+01, 0.000000000000000e+00, -3.053891496144233e+01, -1.750573117492981e-01, 0.000000000000000e+00, -1.753816044316370e-01, -6.248465810161207e-04, 0.000000000000000e+00, -8.914089512874663e-04, -1.465907987535643e+01, 0.000000000000000e+00, -1.425499082482519e+01, -5.046296181992594e-05, 0.000000000000000e+00, -1.718211441772604e-04, -3.108038798467828e-02, 0.000000000000000e+00, -6.660733192943434e-03, -6.676675329688593e-05, 0.000000000000000e+00, -8.154938776692069e-05, -8.005160784171865e+00, 0.000000000000000e+00, -4.482922479833285e-01, -2.752979633912096e-04, 0.000000000000000e+00, -6.738779563760849e-04, -9.090747854777029e-05, 0.000000000000000e+00, -1.709613350651715e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_br89_explicit_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89_explicit", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([-2.249592160205984e-04, -2.249535412922075e-04, -2.249561589104319e-04, -2.249513251391117e-04, -2.249515336241163e-04, -2.249432195749394e-04, -2.249859171082786e-04, -2.249871147715070e-04, -2.249572110331137e-04, -2.249732860893854e-04, -2.249572110331137e-04, -2.249732860893854e-04, -2.040139828720692e-03, -2.040624762258401e-03, -2.040273586376535e-03, -2.040767462523903e-03, -2.043519671943476e-03, -2.044267967531496e-03, -2.039645391852956e-03, -2.040213972573475e-03, -2.039919693001741e-03, -2.043110392383962e-03, -2.039919693001741e-03, -2.043110392383962e-03, -7.146912940395989e-03, -7.296319702319950e-03, -7.100498221251961e-03, -7.277476031259877e-03, -6.509098414151564e-03, -6.343371860163532e-03, -6.505646266741235e-03, -6.583429754829403e-03, -7.478396867258955e-03, -5.663268216954525e-03, -7.478396867258955e-03, -5.663268216954525e-03, -1.381655097210952e-02, -1.441519717678474e-02, -1.414569971481219e-02, -1.482506539865879e-02, -5.222907765670518e-03, -5.860415087990052e-03, -1.129324204774656e-02, -1.149433104909478e-02, -1.369870803712503e-02, -1.014481467187085e-02, -1.369870803712501e-02, -1.014481467187085e-02, -7.342308653736955e-03, -7.344471796396287e-03, -7.439853856288378e-03, -7.446118126605563e-03, -7.941399141739233e-03, -8.132451242286206e-03, -6.549666172614865e-03, -6.477132863871639e-03, -7.179242521273604e-03, -7.888062293641496e-03, -7.179242521273625e-03, -7.888062293641482e-03, -2.819615103697061e-04, -3.236678007094175e-04, -5.386834998119723e-04, -5.420177142593817e-04, -3.988426523695067e-07, -3.151671117816572e-07, -2.032027238318948e-04, -1.978697516411554e-04, -1.946513878554576e-04, -1.968263034326936e-04, -9.101662728638613e-04, -9.987954510549178e-04, -6.682969992407470e-08, -9.069378755411185e-08, -1.458143053234729e-03, -1.459007531640830e-03, -2.104390977592438e-03, -2.115717110931492e-03, -2.128688455051602e-03, -2.120640447171238e-03, -2.166872771350505e-03, -2.146462597700385e-03, -3.180257030880397e-03, -3.009828725687987e-03, -1.737478155715956e-03, -1.511767047790910e-03, -3.055849475269494e-03, -3.027892093196902e-03, -1.675053687786920e-03, -1.920283232617237e-03, -1.186259355263719e-02, -1.166054727490305e-02, -9.590444583697203e-03, -9.824512495497843e-03, -7.564500482898861e-03, -7.794950799594751e-03, -1.524234902250618e-05, -1.579568775065780e-05, -3.957945908831828e-03, -3.977309816175392e-03, -2.070071657513060e-07, -2.427628717203337e-07, -3.354115793106419e-03, -3.356016650279768e-03, -1.288199334566803e-02, -1.412143577280625e-02, -1.693973981711683e-02, -1.985038975681318e-02, -1.927560612302067e-03, -1.997602016501244e-03, -2.971493142511632e-05, -3.072565400720105e-05, -2.556362119179428e-15, 6.533900874027067e-16, -4.496304010516142e-06, -2.932980788418222e-06, -3.642697157132156e-03, -5.664725360373713e-03, -2.052820522355879e-13, -2.586497077361809e-12, -9.615865223318127e-06, -9.543574694561176e-06, -3.205647726465517e-12, -3.214449089155123e-12, -1.077197144991626e-14, -1.071554030790914e-14, -1.451692567079047e-04, -1.535826208956461e-04, -3.709366540491598e-11, -2.730573505155294e-11, -1.999983030098468e-06, -1.995799690044003e-06, -3.593804868827959e-14, -3.418671136150934e-14, -1.111167186303332e-02, -1.123005782164247e-02, -2.280139590097116e-03, -2.250643496363774e-03, -1.567359597189859e-03, -1.052152078967102e-03, -8.357856975079497e-03, -8.354083681234510e-03, -1.361388110485740e-03, -1.368233610534995e-03, -1.383883590882995e-03, -1.403932652520708e-03, -3.737258865493559e-07, -3.677670187473136e-07, -1.887896810053911e-07, -1.905385305522328e-07, -3.043317485187329e-05, -2.691995863603770e-05, -7.167947422266749e-03, -7.115010738585297e-03, -9.472540183467444e-03, -9.369461274317053e-03, -1.097986517729169e-02, -1.095230323074061e-02, -1.558896184502992e-06, -2.621343224653209e-06, -8.145734712369726e-03, -7.577651160931341e-03, -1.597320241949820e-02, -1.673769846695251e-02, -5.385557547226379e-07, -9.044763390112665e-07, -1.263467235905912e-02, -1.446395831594534e-02, -7.298063834601899e-11, -2.765099083160211e-10, -5.786404412093201e-11, -1.248587035776615e-11, -1.047195260647261e-12, -1.538861330450787e-12, -6.068242138870480e-03, -3.567700874210418e-04, -9.964693300570051e-12, -5.724239653874928e-11, -3.290489810999555e-12, -1.452226838126027e-11])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_br89_explicit_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89_explicit", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([7.198694912659132e-04, 7.198513321350635e-04, 7.198597085133809e-04, 7.198442404451591e-04, 7.198449075971724e-04, 7.198183026398058e-04, 7.199549347464878e-04, 7.199587672688228e-04, 7.198630753059646e-04, 7.199145154860337e-04, 7.198630753059646e-04, 7.199145154860337e-04, 6.528447451905632e-03, 6.529999239226955e-03, 6.528875476404801e-03, 6.530455880076412e-03, 6.539262950219938e-03, 6.541657496100892e-03, 6.526865253929449e-03, 6.528684712234623e-03, 6.527743017605888e-03, 6.537953255628781e-03, 6.527743017605888e-03, 6.537953255628781e-03, 2.287012140926702e-02, 2.334822304742386e-02, 2.272159430800627e-02, 2.328792330003163e-02, 2.082911492528502e-02, 2.029878995252331e-02, 2.081806805357195e-02, 2.106697521545407e-02, 2.393086997522854e-02, 1.812245829425446e-02, 2.393086997522854e-02, 1.812245829425446e-02, 4.421296311075028e-02, 4.612863096571127e-02, 4.526623908739916e-02, 4.744020927570833e-02, 1.671330485014567e-02, 1.875332828156811e-02, 3.613837455278913e-02, 3.678185935710327e-02, 4.383586571880022e-02, 3.246340694998672e-02, 4.383586571879992e-02, 3.246340694998667e-02, 2.349538769195829e-02, 2.350230974846809e-02, 2.380753234012285e-02, 2.382757800513778e-02, 2.541247725356561e-02, 2.602384397531587e-02, 2.095893175236759e-02, 2.072682516438925e-02, 2.297357606807554e-02, 2.524179933965276e-02, 2.297357606807562e-02, 2.524179933965274e-02, 9.022768331830619e-04, 1.035736962270134e-03, 1.723787199398308e-03, 1.734456685630015e-03, 1.276296487582339e-06, 1.008534757701374e-06, 6.502487162620631e-04, 6.331832052516981e-04, 6.228844411374654e-04, 6.298441709846190e-04, 2.912532073164358e-03, 3.196145443375730e-03, 2.138550397569383e-07, 2.902201201730975e-07, 4.666057770351148e-03, 4.668824101250666e-03, 6.734051128295788e-03, 6.770294754980782e-03, 6.811803056165107e-03, 6.786049430947982e-03, 6.933992868321589e-03, 6.868680312641220e-03, 1.017682249881733e-02, 9.631451922201556e-03, 5.559930098291060e-03, 4.837654552930928e-03, 9.778718320862391e-03, 9.689254698230088e-03, 5.360171800918149e-03, 6.144906344375160e-03, 3.796029936843869e-02, 3.731375127969030e-02, 3.068942266783091e-02, 3.143843998559284e-02, 2.420640154527632e-02, 2.494384255870308e-02, 4.877551687202246e-05, 5.054620080210282e-05, 1.266542690826185e-02, 1.272739141176123e-02, 6.624229304033300e-07, 7.768411895052801e-07, 1.073317053794048e-02, 1.073925328089526e-02, 4.122237870613764e-02, 4.518859447297988e-02, 5.420716741477389e-02, 6.352124722180250e-02, 6.168193959366611e-03, 6.392326452803979e-03, 9.508778056037227e-05, 9.832209282304337e-05, 8.180358632232075e-15, -2.090848627686882e-15, 1.438817283364985e-05, 9.385538522936504e-06, 1.165663090282290e-02, 1.812712115319588e-02, 6.569025678492173e-13, 8.276790637823082e-12, 3.077076871461801e-05, 3.053943902259576e-05, 1.025807272529894e-11, 1.028623708685346e-11, 3.447030864398902e-14, 3.428972901085118e-14, 4.645416214652958e-04, 4.914643868660665e-04, 1.186997292949118e-10, 8.737835216496940e-11, 6.399945696315096e-06, 6.386559008140809e-06, 1.150017558897062e-13, 1.093974763409732e-13, 3.555734996170666e-02, 3.593618502925586e-02, 7.296446688310775e-03, 7.202059188364082e-03, 5.015550711007531e-03, 3.366886652694717e-03, 2.674514232025436e-02, 2.673306777995024e-02, 4.356441953554351e-03, 4.378347553711998e-03, 4.428427490825600e-03, 4.492584488066271e-03, 1.195922836958287e-06, 1.176854459991346e-06, 6.041269792171260e-07, 6.097232977672454e-07, 9.738615952599500e-05, 8.614386763532178e-05, 2.293743175125365e-02, 2.276803436347301e-02, 3.031212858709573e-02, 2.998227607781462e-02, 3.513556856733344e-02, 3.504737033837008e-02, 4.988467790407666e-06, 8.388298318890268e-06, 2.606635107958311e-02, 2.424848371498030e-02, 5.111424774239426e-02, 5.356063509424832e-02, 1.723378415112975e-06, 2.894324284836319e-06, 4.043095154898920e-02, 4.628466661102502e-02, 2.335380427176819e-10, 8.848317066112676e-10, 1.851649411695839e-10, 3.995478511005465e-11, 3.351024832814142e-12, 4.924356253671241e-12, 1.941837484438554e-02, 1.141664279747319e-03, 3.188701857724892e-11, 1.831756688843340e-10, 1.052956738638443e-11, 4.647125879579396e-11])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
