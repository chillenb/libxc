
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_regtm_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_regtm", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.995159442476695e+01, -1.995167253047330e+01, -1.995202798435770e+01, -2.114097962226870e+01, -2.114148997328572e+01, -2.233161033985436e+01, -3.502471813809998e+00, -3.768027422723396e+00, -3.766990469664276e+00, -3.767750378262762e+00, -3.767277123434599e+00, -3.501834748182958e+00, -6.533790908577519e-01, -7.081104287946334e-01, -7.501878279208590e-01, -6.994379346560926e-01, -6.489685214239029e-01, -7.531335496638354e-01, -1.936276554006312e-01, -1.954689703721675e-01, -8.722029633344790e-01, -1.698430443260223e-01, -2.005613715323742e-01, -2.013953056550527e-01, -2.031163432404340e-02, -2.290556379735856e-02, -7.054330834967995e-02, -1.497588326163293e-02, -1.770915557065932e-02, -1.770915557065932e-02, -5.414459318472469e+00, -5.414982522217799e+00, -5.414481654581387e+00, -5.414943780290436e+00, -5.222842441855401e+00, -5.222998001570451e+00, -2.144749925856069e+00, -2.155184443469633e+00, -2.137476957169845e+00, -2.146550997915853e+00, -1.998879409187824e+00, -2.154027411566321e+00, -5.839353713872582e-01, -6.656876150061841e-01, -5.847069572606914e-01, -5.988973934493217e-01, -5.959521051492074e-01, -6.313123433225621e-01, -1.304724755377964e-01, -2.059754283999576e-01, -1.230050898281508e-01, -2.026254182901182e+00, -1.427123619878508e-01, -1.427123619878508e-01, -1.469790518415570e-02, -1.495133306899344e-02, -1.035205670539059e-02, -9.540416461920463e-02, -1.290849008501027e-02, -1.290849008501027e-02, -6.094162590842086e-01, -6.069122835285797e-01, -5.972707241051283e-01, -6.043860287481968e-01, -5.988595760574744e-01, -6.034365333290008e-01, -5.929969748519923e-01, -4.916464940590378e-01, -5.113832733360122e-01, -5.622615014007448e-01, -5.529222858812506e-01, -5.214077890467012e-01, -6.616034043165364e-01, -2.598209620576354e-01, -2.820274956099843e-01, -3.538801765800519e-01, -3.378218397178244e-01, -3.129285040893230e-01, -4.900692333960520e-01, -7.398464472729731e-02, -7.940392451406189e-02, -3.618339187089028e-01, -1.058822225004840e-01, -1.058822225004841e-01, -3.282107711706884e-02, -6.614647469910029e-03, -1.146540269986284e-02, -1.070260687133345e-01, -1.194744356678316e-02, -1.391958339171228e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_regtm_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_regtm", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.780888002289234e+01, -2.781102280622562e+01, -2.780928944022195e+01, -2.781132011910474e+01, -2.781049748818372e+01, -2.781308151631680e+01, -2.780589932606447e+01, -2.807970944631764e+01, -2.780913761263141e+01, -2.808048724109038e+01, -2.808074838916725e+01, -2.808048724109038e+01, -4.291930346336835e+00, -4.214638558400785e+00, -4.292037437628855e+00, -4.291861489670530e+00, -4.294101596911440e+00, -4.294516485449522e+00, -4.293712650222044e+00, -4.293775367411880e+00, -4.291003983887668e+00, -4.295718692112698e+00, -4.213846157128555e+00, -4.295718692112698e+00, -7.452655959851225e-01, -7.505671832918273e-01, -7.434508299346827e-01, -7.906843947019287e-01, -7.644610323106662e-01, -7.583695051235232e-01, -7.690774118114484e-01, -7.284366792806855e-01, -7.579001215239329e-01, -6.930962029181116e-01, -7.982551442717366e-01, -7.372472006383551e-01, -1.855993139508905e-01, -2.041029816047510e-01, -1.875612148148786e-01, -2.082349934886563e-01, -8.809319810786029e-01, -8.661917591329343e-01, -1.470573490915125e-01, -1.494076623782241e-01, -2.039436982077720e-01, -1.062835710793192e-01, -2.039436982077719e-01, -1.411566665186129e-01, -1.034077657993406e-02, -1.076091029281211e-02, -2.492183495679642e-02, -1.111917561434559e-02, -7.484637710302496e-02, -4.200140207906926e-02, -7.662647435249032e-03, -7.574756278765853e-03, -9.637910525312566e-03, -6.398783237897773e-03, -9.637910525312566e-03, -6.398783237897761e-03, -6.946655523940796e+00, -6.945003365856821e+00, -6.949844713417609e+00, -6.948084577179984e+00, -6.946866500852071e+00, -6.945133604990441e+00, -6.949601724659398e+00, -6.947931477602018e+00, -7.716965564294475e+00, -6.946546864382094e+00, -6.948263717289414e+00, -7.715025999568049e+00, -2.380751759915922e+00, -2.381321085970481e+00, -2.405170525877943e+00, -2.405003299322249e+00, -2.359962053359310e+00, -2.366439580315165e+00, -2.381071198108625e+00, -2.387852820399711e+00, -2.410146819298521e+00, -2.344561830269334e+00, -2.410146819298521e+00, -2.395964017164730e+00, -7.485411760969010e-01, -7.279942065699473e-01, -8.392951805281381e-01, -8.411385171285100e-01, -6.594460854624272e-01, -6.927792516795257e-01, -7.049460815015889e-01, -7.347589927869852e-01, -7.870051751905797e-01, -7.216646378435171e-01, -7.870051751905798e-01, -7.414150282896265e-01, -1.015042211554027e-01, -1.024790268196309e-01, -1.971901627068117e-01, -1.977096441457003e-01, -9.179715599705560e-02, -9.673808969393451e-02, -2.472284044562302e+00, -2.471282219596479e+00, -1.165255327254860e-01, -1.239233343409599e-01, -1.165255327254861e-01, -1.239233343409597e-01, -1.606806943845577e-02, -6.809255597595712e-03, -7.515425206852746e-03, -7.676113637369217e-03, -5.216104074488899e-03, -5.365146985051598e-03, -6.368242930104599e-02, -9.921233189737835e-02, -6.169942573065967e-03, -6.785264783066229e-03, -6.169942573065972e-03, -6.785264783066230e-03, -8.045731894879549e-01, -8.078779218978362e-01, -7.928867513831164e-01, -7.962922353617896e-01, -8.164395572390107e-01, -8.190473896430547e-01, -8.142961544449205e-01, -8.037962016523733e-01, -8.151714236184266e-01, -8.179243918796444e-01, -8.151714236184268e-01, -8.021248844253061e-01, -7.820666971636124e-01, -7.848762327445116e-01, -6.176596661249995e-01, -6.083950072435630e-01, -6.621692474615023e-01, -6.445694643425477e-01, -7.096242388580838e-01, -7.123763799394264e-01, -6.851904197883156e-01, -6.881415208241051e-01, -6.851904197883157e-01, -6.642275750840473e-01, -8.709379131154864e-01, -8.494795171146157e-01, -2.513717282724224e-01, -2.529324336140496e-01, -2.878540468989708e-01, -3.093119935744261e-01, -4.113992633775050e-01, -4.235656411013676e-01, -3.605119557225726e-01, -3.605398843156615e-01, -3.605119557225723e-01, -3.468642961509092e-01, -5.584405444575827e-01, -5.640302736542834e-01, -7.362821955343241e-02, -7.407837640486059e-02, -5.146118731557171e-02, -5.298564020882773e-02, -4.100161450721647e-01, -4.214484699789924e-01, -7.854353856248285e-02, -8.292619905449114e-02, -7.854353856248285e-02, -8.292619905449125e-02, -3.242364241577607e-02, -3.317154691330471e-02, -3.306494953638583e-03, -3.312512212871708e-03, -1.127017912239403e-02, -1.162742059346649e-02, -1.063146841131848e-01, -1.060046998178542e-01, -5.457904816593305e-03, -6.394434199149808e-03, -5.457904816593303e-03, -1.527335786009405e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_regtm_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_regtm", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.671356339938121e-08, 0.000000000000000e+00, -2.673712602811611e-08, -2.671665469058521e-08, 0.000000000000000e+00, -2.673936959258440e-08, -2.672518986935593e-08, 0.000000000000000e+00, -2.675199265010562e-08, -2.669055397469173e-08, 0.000000000000000e+00, -1.298761966039055e-08, -2.671556435386533e-08, 0.000000000000000e+00, -1.298685872534497e-08, -1.298610511471377e-08, 0.000000000000000e+00, -1.298685872534497e-08, -1.553096187072312e-05, 0.000000000000000e+00, -9.965106293243188e-06, -1.553195871427921e-05, 0.000000000000000e+00, -1.553153963675704e-05, -1.555157685621268e-05, 0.000000000000000e+00, -1.555442672028200e-05, -1.553921144043995e-05, 0.000000000000000e+00, -1.553837027743185e-05, -1.553869769879469e-05, 0.000000000000000e+00, -1.555483908569853e-05, -9.968001283248547e-06, 0.000000000000000e+00, -1.555483908569853e-05, -4.251835235522710e-03, 0.000000000000000e+00, -4.270552848435594e-03, -4.253483560112923e-03, 0.000000000000000e+00, -8.710072168304710e-03, -9.013446144506687e-03, 0.000000000000000e+00, -9.166695347119802e-03, -9.073391045820833e-03, 0.000000000000000e+00, -4.355375413701646e-03, -4.196293769035096e-03, 0.000000000000000e+00, -4.486692935374560e-03, -8.508684863371512e-03, 0.000000000000000e+00, -9.692364467210779e-03, -7.369082267972645e-01, 0.000000000000000e+00, -1.529995203701846e+00, -7.190740992846594e-01, 0.000000000000000e+00, -1.472734093661093e+00, -3.642356755463418e-03, 0.000000000000000e+00, -1.612622452128238e-03, -2.699646377263539e+00, 0.000000000000000e+00, -2.785217073035831e+00, -1.378066723928267e+00, 0.000000000000000e+00, -5.582907274861794e+00, -1.378066723928267e+00, 0.000000000000000e+00, -2.256664158624645e+00, -8.380874189989419e+03, 0.000000000000000e+00, -7.249044017779661e+03, -6.812479441516450e+02, 0.000000000000000e+00, -6.463583345304376e+03, -2.021416283041102e+01, 0.000000000000000e+00, -7.670971788805674e+01, -2.524646331661919e+04, 0.000000000000000e+00, -2.639548421332852e+04, -1.081671228062215e+04, 0.000000000000000e+00, -5.210615615378609e+04, -1.081671228062215e+04, 0.000000000000000e+00, -5.210615615378602e+04, -3.763154739940816e-06, 0.000000000000000e+00, -3.766769026541707e-06, -3.761358993381570e-06, 0.000000000000000e+00, -3.765033059553290e-06, -3.763055294068990e-06, 0.000000000000000e+00, -3.766709611869955e-06, -3.761513986857176e-06, 0.000000000000000e+00, -3.765132074503054e-06, -1.728046698190955e-05, 0.000000000000000e+00, -3.765900648775881e-06, -3.762239344393375e-06, 0.000000000000000e+00, -1.729738538840802e-05, -1.463713435732191e-04, 0.000000000000000e+00, -1.465832523729736e-04, -1.438642605527510e-04, 0.000000000000000e+00, -1.441411335384434e-04, -1.483607450974914e-04, 0.000000000000000e+00, -1.480043030286263e-04, -1.462279147933092e-04, 0.000000000000000e+00, -1.458281407520371e-04, -1.434848899365126e-04, 0.000000000000000e+00, -8.587582861214362e-05, -1.434848899365126e-04, 0.000000000000000e+00, -1.451174452460841e-04, -2.099732508965250e-02, 0.000000000000000e+00, -1.773038346735529e-02, -1.645153096885870e-02, 0.000000000000000e+00, -1.647636703073025e-02, -2.841424474846374e-02, 0.000000000000000e+00, -2.564824020751305e-02, -2.614960157348256e-02, 0.000000000000000e+00, -2.349348076521608e-02, -1.847158584876225e-02, 0.000000000000000e+00, -1.863262610765149e-02, -1.847158584876227e-02, 0.000000000000000e+00, -2.215589083515032e-02, -6.764014097348965e+00, 0.000000000000000e+00, -6.591062174395677e+00, -5.483339153543227e-01, 0.000000000000000e+00, -1.180223162511230e+00, -8.776523417655692e+00, 0.000000000000000e+00, -7.838305341537307e+00, -1.892850627902666e-04, 0.000000000000000e+00, -1.896472829093031e-04, -5.301701411949517e+00, 0.000000000000000e+00, -5.152523525807590e+00, -5.301701411949514e+00, 0.000000000000000e+00, -5.152523525807587e+00, -1.805379892016293e+03, 0.000000000000000e+00, -3.915817754233653e+04, -2.712513512134806e+04, 0.000000000000000e+00, -2.487963069293610e+04, -1.198474823011639e+05, 0.000000000000000e+00, -1.083252018949715e+05, -2.470097314357111e+01, 0.000000000000000e+00, -8.411137628404720e+00, -5.859153138837639e+04, 0.000000000000000e+00, -4.323976432443105e+04, -5.859153138837640e+04, 0.000000000000000e+00, -4.323976432443102e+04, -2.235103054859032e-02, 0.000000000000000e+00, -2.197768884047622e-02, -2.357170425369193e-02, 0.000000000000000e+00, -2.319136268159025e-02, -3.761341724669386e-02, 0.000000000000000e+00, -3.613931939112670e-02, -3.156121649325289e-02, 0.000000000000000e+00, -2.248994125542923e-02, -3.435184252935371e-02, 0.000000000000000e+00, -3.314321191513594e-02, -3.435184252935371e-02, 0.000000000000000e+00, -2.266977735357049e-02, -2.507670239764141e-02, 0.000000000000000e+00, -2.471220571298106e-02, -4.133694419006537e-02, 0.000000000000000e+00, -3.026233197260519e-02, -3.668654306590941e-02, 0.000000000000000e+00, -3.336947232109570e-02, -3.258209356229781e-02, 0.000000000000000e+00, -3.214908726933258e-02, -3.463799825705522e-02, 0.000000000000000e+00, -3.417565099832651e-02, -3.463799825705526e-02, 0.000000000000000e+00, -4.170635738293551e-02, -1.336930276874851e-02, 0.000000000000000e+00, -1.973626238451614e-02, -5.999293370204232e-01, 0.000000000000000e+00, -5.900796533853948e-01, -1.649393649947502e-01, 0.000000000000000e+00, -3.416379799945510e-01, -8.570596193159939e-02, 0.000000000000000e+00, -1.446973628972105e-01, -2.317260138493535e-01, 0.000000000000000e+00, -2.326636825704190e-01, -2.317260138493529e-01, 0.000000000000000e+00, -1.220233206622443e-01, -5.484145710487020e-02, 0.000000000000000e+00, -5.391880178515639e-02, -2.151983408189299e+01, 0.000000000000000e+00, -2.102023675551880e+01, -4.147779050746733e+01, 0.000000000000000e+00, -3.875195326047322e+01, -1.848442168128375e-01, 0.000000000000000e+00, -1.814979393231496e-01, -1.543171432419963e+01, 0.000000000000000e+00, -1.453805330599379e+01, -1.543171432419960e+01, 0.000000000000000e+00, -1.453805330599381e+01, -2.570554765417925e+02, 0.000000000000000e+00, -2.394859437532275e+02, -6.730414646396436e+05, 0.000000000000000e+00, -6.681838475285368e+05, -7.477302652623803e+03, 0.000000000000000e+00, -7.080798666110167e+03, -6.835936110799158e+00, 0.000000000000000e+00, -6.982940414072560e+00, -9.740702875790899e+04, 0.000000000000000e+00, -5.411197247669205e+04, -9.740702875790915e+04, 0.000000000000000e+00, -3.768302406441510e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_regtm_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_regtm", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([7.075298307667604e-04, 7.088428007984174e-04, 7.077199863020846e-04, 7.089809022920342e-04, 7.082559485905471e-04, 7.097704635722724e-04, 7.061242378016288e-04, 6.131185313304468e-04, 7.076518769763061e-04, 6.131442264773083e-04, 6.131214944696821e-04, 6.131442264773083e-04, 2.788009935616809e-03, -7.605923143193824e-04, 2.788202891045878e-03, 2.788011488342378e-03, 2.791970616734542e-03, 2.792616508149259e-03, 2.790364469894753e-03, 2.790330601271223e-03, 2.788026804127971e-03, 2.793678569287920e-03, -7.617320729026869e-04, 2.793678569287920e-03, -1.186301492017815e-02, -1.166087728923641e-02, -1.192335159095136e-02, 1.175494991072041e-02, 1.139628379053614e-02, 1.137342042366960e-02, 1.155761407487910e-02, -1.233824987197901e-02, -1.146376224577823e-02, -1.314550409301076e-02, 1.175109759279064e-02, 1.125763820636017e-02, -4.646115110771953e-02, 3.859018665402710e-02, -4.657749795999289e-02, 3.895118001498211e-02, 7.771674555704404e-03, -1.020028359911969e-02, 2.943118055570922e-02, 3.148165871761847e-02, 3.573279587729211e-02, 2.385485068271638e-02, 3.573279587729209e-02, -2.409576672759875e-02, 8.006810794192076e-03, 8.312350638815165e-03, -6.893678540150209e-03, 8.740918333397994e-03, -1.447043703334304e-02, 1.742688829426995e-02, 5.227764147557858e-03, 5.196799997798270e-03, 7.332253420939181e-03, 6.499123325544308e-03, 7.332253420939181e-03, 6.499123325544295e-03, 2.807797206819093e-03, 2.808508058840247e-03, 2.813373620857615e-03, 2.813899119103841e-03, 2.808190228822510e-03, 2.808753513877390e-03, 2.812971238898897e-03, 2.813647177734602e-03, 1.457302306483544e-02, 2.811203625673310e-03, 2.810588786349630e-03, 1.457547368362068e-02, 4.714906864666362e-03, 4.720075541542110e-03, 4.728464373846961e-03, 4.733116898547021e-03, 4.699720406613209e-03, 4.709218275310678e-03, 4.713112596681595e-03, 4.722329892751643e-03, 4.733482635007334e-03, -2.091713189660803e-03, 4.733482635007334e-03, 4.729083681245327e-03, 1.857369032273536e-02, 1.230206239003217e-03, 2.081955771220081e-02, 2.107400555080479e-02, 1.835064259868286e-02, 1.851780519409821e-02, 1.939831080672296e-02, 1.955130404579935e-02, 1.884891008998447e-02, 1.404098540569760e-03, 1.884891008998451e-02, 1.899668423982373e-02, 2.517149868478866e-02, 2.523482190977191e-02, -3.684076625948664e-02, 2.967074098423021e-02, 2.418162891795227e-02, 2.526836218860909e-02, 5.988056320886071e-03, 5.992172816581677e-03, 2.943200626777697e-02, 3.375433026681467e-02, 2.943200626777688e-02, 3.375433026681469e-02, -3.180659031155389e-03, 3.839451658290982e-03, 5.002570552266662e-03, 4.799753257035118e-03, 9.247145506697755e-03, 9.930129680868958e-03, 2.217188550333346e-02, -2.167585915006644e-02, 4.811699173155242e-03, 9.213444703536137e-03, 4.811699173155238e-03, 9.213444703536147e-03, 3.102510274488003e-02, 3.098767718269826e-02, 2.857694602159801e-02, 2.856799295910714e-02, 5.599476401028486e-02, 5.455697036367994e-02, 4.808949536740280e-02, 3.007714788547335e-02, 5.171311449206039e-02, 5.058977457472916e-02, 5.171311449206039e-02, 2.972391923211238e-02, 3.148037012494730e-02, 3.147226098693671e-02, 2.102409870238486e-02, -1.125668997084102e-03, 2.230106130525279e-02, 3.032877389844852e-03, 2.504185823796545e-02, 2.502016599668050e-02, 2.343812842613661e-02, 2.343989263119571e-02, 2.343812842613648e-02, 7.466918205948663e-03, 1.860210462894302e-02, 1.015233032893529e-02, 2.909210429480970e-02, 2.908749501293673e-02, -3.159157562096852e-02, 2.845838754378079e-02, -1.304105516424267e-02, 2.636029729074446e-02, 2.805850256115359e-02, 2.812792078031788e-02, 2.805850256115356e-02, -2.202576939317605e-02, 2.157610636337813e-02, 2.165003259921268e-02, -1.460236354780397e-02, -1.454480807116036e-02, 1.847701432891914e-02, 1.907308753579705e-02, 2.903828976668811e-02, 2.983445734407225e-02, 2.661287165908861e-02, 2.952133768047295e-02, 2.661287165908864e-02, 2.952133768047297e-02, -6.120141315430485e-03, -6.216314683963202e-03, 2.413069514623670e-03, 2.412118883331330e-03, -4.548609854341832e-03, -4.830329312716358e-03, -2.684611008278636e-02, -2.843478398262324e-02, 6.801007192485505e-03, 8.875751322743276e-03, 6.801007192485507e-03, -7.302697292882209e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
