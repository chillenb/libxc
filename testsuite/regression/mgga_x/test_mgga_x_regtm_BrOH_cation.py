
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_regtm_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_regtm", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.226237469420069e+01, -2.226242784685346e+01, -2.226272475102609e+01, -2.226193421369309e+01, -2.226233979206529e+01, -2.226233979206529e+01, -3.402866625357729e+00, -3.402872126241765e+00, -3.403259660739366e+00, -3.405133778900895e+00, -3.403862314921717e+00, -3.403862314921717e+00, -6.700766543203329e-01, -6.698381393440348e-01, -6.647521020288237e-01, -6.684753934158087e-01, -6.698080004210338e-01, -6.698080004210338e-01, -2.014095548336633e-01, -2.029712311644414e-01, -8.288298629587267e-01, -1.608119133398831e-01, -1.945057890535323e-01, -1.945057890535322e-01, -2.023003947175402e-02, -2.072874724100553e-02, -6.305653129060276e-02, -1.426003430292765e-02, -1.728800643463440e-02, -1.728800643463438e-02, -5.413324212214146e+00, -5.413861251799474e+00, -5.413370268612070e+00, -5.413843575553210e+00, -5.413585009627733e+00, -5.413585009627733e+00, -2.105194106782799e+00, -2.121889547827461e+00, -2.103595540508499e+00, -2.118409142400115e+00, -2.115240010549921e+00, -2.115240010549921e+00, -5.933233954291712e-01, -6.279489192316527e-01, -5.364755646088506e-01, -5.347131503936082e-01, -6.038424474562205e-01, -6.038424474562207e-01, -1.240050283160564e-01, -2.101121869662719e-01, -1.166041107107795e-01, -1.810391463217533e+00, -1.380129969315322e-01, -1.380129969315322e-01, -1.227522205666320e-02, -1.377288628128263e-02, -9.802802283103691e-03, -8.598605819718461e-02, -1.264727019095337e-02, -1.264727019095338e-02, -6.070666029733260e-01, -6.045385544433775e-01, -6.053597457477543e-01, -6.060872496091223e-01, -6.057153986442629e-01, -6.057153986442629e-01, -5.882622807227430e-01, -5.241621315241634e-01, -5.407040671803960e-01, -5.578800483417536e-01, -5.487002573412912e-01, -5.487002573412912e-01, -6.457334181319199e-01, -2.569187875048811e-01, -2.955063263168679e-01, -3.591113952521988e-01, -3.267635188590748e-01, -3.267635188590748e-01, -4.742421166030126e-01, -6.234388381548268e-02, -7.562546634516232e-02, -3.417506215218692e-01, -1.013333831777980e-01, -1.013333831777980e-01, -2.479326107587771e-02, -6.936222337787554e-03, -9.054803054198396e-03, -9.762085153357489e-02, -1.162273337397352e-02, -1.162273337397351e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_regtm_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_regtm", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.806654915857112e+01, -2.806687112482867e+01, -2.806668967329844e+01, -2.806697312003910e+01, -2.806714105557761e+01, -2.806761929316766e+01, -2.806555763177263e+01, -2.806560040491988e+01, -2.806663422956542e+01, -2.806640854656041e+01, -2.806663422956542e+01, -2.806640854656041e+01, -4.154123806564992e+00, -4.154303918301763e+00, -4.154180196647196e+00, -4.154363637023579e+00, -4.155570605939328e+00, -4.155940051934129e+00, -4.154164452870915e+00, -4.154496133555690e+00, -4.153304097603084e+00, -4.155812674358673e+00, -4.153304097603084e+00, -4.155812674358673e+00, -7.757209347457344e-01, -7.789913309526644e-01, -7.745094102000230e-01, -7.784268512942729e-01, -7.592498450168715e-01, -7.545347277192294e-01, -7.616743745104293e-01, -7.632090524940528e-01, -7.845888762060440e-01, -7.342908681468933e-01, -7.845888762060440e-01, -7.342908681468933e-01, -1.940327320152938e-01, -2.032767969042574e-01, -1.964264702078949e-01, -2.070595718944600e-01, -8.849005122782835e-01, -9.006283960735442e-01, -1.592744058912746e-01, -1.540931353846412e-01, -2.025265203461875e-01, -1.375607085165254e-01, -2.025265203461875e-01, -1.375607085165254e-01, -1.052981777914724e-02, -1.084255768699251e-02, -1.096214742828319e-02, -1.130578984386233e-02, -4.640359582591811e-02, -4.719217528087295e-02, -9.603442799065734e-03, -9.147881902567516e-03, -1.022029130003722e-02, -9.890750669328575e-03, -1.022029130003723e-02, -9.890750669328569e-03, -6.947018346982037e+00, -6.945344628630837e+00, -6.950216288657529e+00, -6.948433595497519e+00, -6.947221362801252e+00, -6.945469068275343e+00, -6.949964179520000e+00, -6.948274125100097e+00, -6.948637577667868e+00, -6.946893144327245e+00, -6.948637577667868e+00, -6.946893144327245e+00, -2.327683460751821e+00, -2.329783583655793e+00, -2.358514730982452e+00, -2.359678854717070e+00, -2.315738123002618e+00, -2.320996417699924e+00, -2.342781083164635e+00, -2.348585314595436e+00, -2.354368257622334e+00, -2.346838411861270e+00, -2.354368257622334e+00, -2.346838411861270e+00, -7.291128993406948e-01, -7.292734033238550e-01, -8.795948358010087e-01, -8.826299272412339e-01, -6.360172896178354e-01, -6.661153681469160e-01, -6.875064473007952e-01, -7.181501450283478e-01, -7.776091903469438e-01, -7.243227612943878e-01, -7.776091903469443e-01, -7.243227612943879e-01, -1.109819812097995e-01, -1.130885729109559e-01, -1.969584031787802e-01, -1.979927592186722e-01, -1.042855977255515e-01, -1.063832654903966e-01, -2.413914325811991e+00, -2.412982240240503e+00, -1.218670762854673e-01, -1.267818671902336e-01, -1.218670762854673e-01, -1.267818671902335e-01, -1.398044339557230e-02, -1.396804853106005e-02, -1.187737225613262e-02, -1.263050331186947e-02, -6.577425430102001e-03, -6.847185471459980e-03, -7.715151035060468e-02, -7.118668835579281e-02, -1.469086620708911e-02, -7.073202186287660e-03, -1.469086620708910e-02, -7.073202186287644e-03, -8.077666586669447e-01, -8.109903657623877e-01, -7.954955288198724e-01, -7.988551488370946e-01, -7.999036841557770e-01, -8.032434715006033e-01, -8.035105403288139e-01, -8.067577937927209e-01, -8.017176595076569e-01, -8.050094377129527e-01, -8.017176595076569e-01, -8.050094377129527e-01, -7.891784400137748e-01, -7.916974721318996e-01, -6.136276292903263e-01, -6.169249853263892e-01, -6.587067604297618e-01, -6.625058121991232e-01, -7.102694494835403e-01, -7.130821519104696e-01, -6.832764143615416e-01, -6.863686973226207e-01, -6.832764143615417e-01, -6.863686973226208e-01, -8.891229089473043e-01, -9.036739739201159e-01, -2.503252448107305e-01, -2.518227544136429e-01, -3.013720911942108e-01, -3.047033614235853e-01, -4.028037597305115e-01, -4.050604971802327e-01, -3.502633078599665e-01, -3.502010169918119e-01, -3.502633078599667e-01, -3.502010169918118e-01, -5.380344623210205e-01, -5.449448957414260e-01, -4.154894486746020e-02, -4.237704481821583e-02, -5.962906829219513e-02, -6.076240485183090e-02, -3.917307806927964e-01, -4.045890419496715e-01, -8.607959104618861e-02, -8.939224875567335e-02, -8.607959104618858e-02, -8.939224875567335e-02, -2.211023196192555e-02, -2.329966954296680e-02, -8.503459353574756e-03, -8.630875819444503e-03, -5.141937218263926e-03, -5.336529683387509e-03, -8.110529988877878e-02, -7.868966754945467e-02, -1.201017640239258e-02, -6.674786404536255e-03, -1.201017640239258e-02, -6.674786404536246e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_regtm_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_regtm", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.432896358539419e-08, 0.000000000000000e+00, -1.432394902037307e-08, -1.432873528445093e-08, 0.000000000000000e+00, -1.432378392302791e-08, -1.432729925003614e-08, 0.000000000000000e+00, -1.432192564914204e-08, -1.432984538894643e-08, 0.000000000000000e+00, -1.432517630345647e-08, -1.432884354705284e-08, 0.000000000000000e+00, -1.432336169686355e-08, -1.432884354705284e-08, 0.000000000000000e+00, -1.432336169686355e-08, -2.317465437341231e-05, 0.000000000000000e+00, -2.313607634516705e-05, -2.318472156788177e-05, 0.000000000000000e+00, -2.313963811328067e-05, -2.334592314134168e-05, 0.000000000000000e+00, -2.336509908956045e-05, -2.342337441758965e-05, 0.000000000000000e+00, -2.339104423956986e-05, -2.317036169554663e-05, 0.000000000000000e+00, -2.353805368163866e-05, -2.317036169554663e-05, 0.000000000000000e+00, -2.353805368163866e-05, -4.911022920302093e-03, 0.000000000000000e+00, -4.920029591802250e-03, -4.937136639571615e-03, 0.000000000000000e+00, -4.907868571530924e-03, -5.060666290655832e-03, 0.000000000000000e+00, -5.533150274316084e-03, -6.345686686575228e-03, 0.000000000000000e+00, -6.468819619030466e-03, -4.501135467861052e-03, 0.000000000000000e+00, -8.453033670056743e-03, -4.501135467861052e-03, 0.000000000000000e+00, -8.453033670056743e-03, -1.733781683263398e+00, 0.000000000000000e+00, -1.586361176588376e+00, -1.710865644205302e+00, 0.000000000000000e+00, -1.548959088280057e+00, 6.291908973435079e-04, 0.000000000000000e+00, 1.395435209679192e-04, -1.889831578214146e+00, 0.000000000000000e+00, -2.538871144483859e+00, -1.476355210180232e+00, 0.000000000000000e+00, -4.776044382468683e-01, -1.476355210180232e+00, 0.000000000000000e+00, -4.776044382468692e-01, -8.218827003082581e+03, 0.000000000000000e+00, -7.190855625755107e+03, -7.343335066786105e+03, 0.000000000000000e+00, -6.347863982932542e+03, -6.613876295058549e+01, 0.000000000000000e+00, -6.248555268893293e+01, -1.824138654412519e+04, 0.000000000000000e+00, -2.045872232471453e+04, -1.012110931803038e+04, 0.000000000000000e+00, -1.887717796471314e+04, -1.012110931803035e+04, 0.000000000000000e+00, -1.887717796471301e+04, -3.787614807405953e-06, 0.000000000000000e+00, -3.789847158496351e-06, -3.785461394037156e-06, 0.000000000000000e+00, -3.787770144547416e-06, -3.786933781319228e-06, 0.000000000000000e+00, -3.789370883969263e-06, -3.785108720405152e-06, 0.000000000000000e+00, -3.787505670756167e-06, -3.786940427788798e-06, 0.000000000000000e+00, -3.788878003246961e-06, -3.786940427788798e-06, 0.000000000000000e+00, -3.788878003246961e-06, -1.928538786154434e-04, 0.000000000000000e+00, -1.918937635019738e-04, -1.848781670331490e-04, 0.000000000000000e+00, -1.841266604717087e-04, -1.865366193229708e-04, 0.000000000000000e+00, -1.875337801222459e-04, -1.793689282882204e-04, 0.000000000000000e+00, -1.800773316023028e-04, -1.930796206217109e-04, 0.000000000000000e+00, -1.884797649909017e-04, -1.930796206217109e-04, 0.000000000000000e+00, -1.884797649909017e-04, -4.971909370080297e-02, 0.000000000000000e+00, -5.005716427982873e-02, -5.582546199730851e-02, 0.000000000000000e+00, -5.506823419398900e-02, -4.625413855931322e-02, 0.000000000000000e+00, -5.207241388994448e-02, -2.982753761981521e-02, 0.000000000000000e+00, -3.645527202843442e-02, -4.216594787885649e-02, 0.000000000000000e+00, -5.466704730657830e-02, -4.216594787885646e-02, 0.000000000000000e+00, -5.466704730657842e-02, -5.264421409458917e+00, 0.000000000000000e+00, -4.929727413639069e+00, -1.218832215329871e+00, 0.000000000000000e+00, -1.198886223334443e+00, -5.989858657193659e+00, 0.000000000000000e+00, -6.009371616499569e+00, -2.676802814509278e-04, 0.000000000000000e+00, -2.684025306765683e-04, -4.697564592709611e+00, 0.000000000000000e+00, -4.874942955696432e+00, -4.697564592709611e+00, 0.000000000000000e+00, -4.874942955696437e+00, 1.980061699709399e+04, 0.000000000000000e+00, 1.329716617880711e+04, -8.663751521277896e+03, 0.000000000000000e+00, -5.814918342477060e+03, -8.529469815686143e+04, 0.000000000000000e+00, -7.501746164319872e+04, -1.429193052245623e+01, 0.000000000000000e+00, -2.003745657799059e+01, 5.307839117946299e+04, 0.000000000000000e+00, -4.130900620611753e+04, 5.307839117946263e+04, 0.000000000000000e+00, -4.130900620611756e+04, -2.419240641189731e-02, 0.000000000000000e+00, -2.372922550234251e-02, -2.593916281674734e-02, 0.000000000000000e+00, -2.544552692138910e-02, -2.544603998098728e-02, 0.000000000000000e+00, -2.495579067911186e-02, -2.495054941305409e-02, 0.000000000000000e+00, -2.447903163790451e-02, -2.521083041722488e-02, 0.000000000000000e+00, -2.472899180901992e-02, -2.521083041722488e-02, 0.000000000000000e+00, -2.472899180901997e-02, -2.921199287329625e-02, 0.000000000000000e+00, -2.853494357155425e-02, -4.733743522564841e-02, 0.000000000000000e+00, -4.661975295176488e-02, -4.500430041717304e-02, 0.000000000000000e+00, -4.420701352439318e-02, -4.111318552285370e-02, 0.000000000000000e+00, -4.047679000721877e-02, -4.413400449590680e-02, 0.000000000000000e+00, -4.313674214736803e-02, -4.413400449590701e-02, 0.000000000000000e+00, -4.313674214736800e-02, -3.962664329563111e-02, 0.000000000000000e+00, -4.310602193017558e-02, -6.235749926833818e-01, 0.000000000000000e+00, -6.144888338827242e-01, -3.976496149752409e-01, 0.000000000000000e+00, -3.906432654696005e-01, -2.416896343393234e-01, 0.000000000000000e+00, -2.371273955738950e-01, -3.071862091301066e-01, 0.000000000000000e+00, -3.094442891320636e-01, -3.071862091301069e-01, 0.000000000000000e+00, -3.094442891320643e-01, -9.248802989313494e-02, 0.000000000000000e+00, -8.990766824093298e-02, -8.512331000042867e+01, 0.000000000000000e+00, -8.121101295791161e+01, -3.058238816573853e+01, 0.000000000000000e+00, -2.921846613328710e+01, -3.367821022979838e-01, 0.000000000000000e+00, -3.538808570379823e-01, -1.225837111816305e+01, 0.000000000000000e+00, -1.198287976465460e+01, -1.225837111816304e+01, 0.000000000000000e+00, -1.198287976465462e+01, -7.226010829939656e+02, 0.000000000000000e+00, -5.032756704734905e+02, 8.292345771610276e+05, 0.000000000000000e+00, 8.771934757308494e+05, -1.621093629312659e+05, 0.000000000000000e+00, -1.421496550330215e+05, -1.522128209383877e+01, 0.000000000000000e+00, -1.710498740545782e+01, 5.833246905352156e+04, 0.000000000000000e+00, -5.162433351612645e+04, 5.833246905352194e+04, 0.000000000000000e+00, -5.162433351612652e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_regtm_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_regtm", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([7.112759386610821e-04, 7.109301819095969e-04, 7.112744476668149e-04, 7.109291468452067e-04, 7.112185810971870e-04, 7.108635223069620e-04, 7.112333111470954e-04, 7.108826658454428e-04, 7.112762991972091e-04, 7.108376952185135e-04, 7.112762991972091e-04, 7.108376952185135e-04, 2.565405307404988e-03, 2.554194182966001e-03, 2.567877968152570e-03, 2.554903174931267e-03, 2.605699918069081e-03, 2.609879240127897e-03, 2.634339340605365e-03, 2.625070912753132e-03, 2.561274605039087e-03, 2.660256008851891e-03, 2.561274605039087e-03, 2.660256008851891e-03, -4.475268821598819e-03, -4.527273598413313e-03, -4.420600609326209e-03, -4.544099122312859e-03, -3.952306070543727e-03, -3.140417566202361e-03, -1.801704291194685e-03, -1.670108378172870e-03, -5.159698756362415e-03, 2.338207499555290e-03, -5.159698756362415e-03, 2.338207499555290e-03, 3.725595013908850e-02, 3.967250999803075e-02, 3.757951730347107e-02, 4.059540165356510e-02, -8.969434579528038e-03, -9.059695005263617e-03, 8.992384407394362e-03, 2.182420430439845e-02, 3.549768492959317e-02, -1.127646710578513e-02, 3.549768492959311e-02, -1.127646710578514e-02, 7.626394969203896e-03, 8.146053749021206e-03, 7.683121474709270e-03, 8.355605333360596e-03, 8.590193206079722e-03, 1.052029233717405e-02, 2.270963116150725e-03, 2.748014274953873e-03, 6.227120785541524e-03, -8.560514844213076e-04, 6.227120785541470e-03, -8.560514844213372e-04, 2.834284563419170e-03, 2.833480190425508e-03, 2.839511344122191e-03, 2.838536527452399e-03, 2.834049876152989e-03, 2.833275751464488e-03, 2.838555234961890e-03, 2.837888786063192e-03, 2.837356833259624e-03, 2.836084064396083e-03, 2.837356833259624e-03, 2.836084064396083e-03, 6.798840267039264e-03, 6.765141651742857e-03, 6.677847559035045e-03, 6.641420591796785e-03, 6.405916551356704e-03, 6.487854207798372e-03, 6.272196010087143e-03, 6.345507845911675e-03, 7.040226948644866e-03, 6.747169629074175e-03, 7.040226948644866e-03, 6.747169629074175e-03, 5.216351407850188e-02, 5.300125033329217e-02, 8.852621819607182e-02, 8.951134846554441e-02, 2.094141156654624e-02, 3.414602202396694e-02, 8.608855573533376e-03, 1.833669019541186e-02, 5.450453744630047e-02, 5.503380909698988e-02, 5.450453744630031e-02, 5.503380909698988e-02, 1.286469296896686e-02, 1.152393622583829e-02, 2.823660566676657e-02, 2.805401073641456e-02, 8.581595811326576e-03, 1.245930504975868e-02, 4.481365767560675e-03, 4.491800458346014e-03, 2.041629504345233e-02, 2.715611130020969e-02, 2.041629504345236e-02, 2.715611130020982e-02, -4.197688083062753e-03, -3.756329966014068e-03, -9.614134174201942e-04, -1.482395427260061e-03, 3.842985900854182e-03, 3.798227228942820e-03, 4.501704105321845e-03, 1.276341576070469e-02, -6.967251754943470e-03, 8.230609613374391e-03, -6.967251754943458e-03, 8.230609613374419e-03, 3.494000901930748e-02, 3.477541347117100e-02, 3.268514120640390e-02, 3.254008794492357e-02, 3.345784760457659e-02, 3.331093127410613e-02, 3.412725178907012e-02, 3.396823229967487e-02, 3.379263358415847e-02, 3.363887123007898e-02, 3.379263358415847e-02, 3.363887123007896e-02, 4.029927084950560e-02, 3.981518699134890e-02, 2.612339892702649e-02, 2.607768784475728e-02, 3.058848339895313e-02, 3.048514019846284e-02, 3.514746807822094e-02, 3.499713054534787e-02, 3.369712040740105e-02, 3.323962379183672e-02, 3.369712040740084e-02, 3.323962379183693e-02, 5.844365776175614e-02, 6.916584550094383e-02, 2.955564261556273e-02, 2.959714904664213e-02, 3.146106698854197e-02, 3.190551550949939e-02, 4.070968248385116e-02, 4.029863334605639e-02, 3.746325814389979e-02, 3.771260637539954e-02, 3.746325814389979e-02, 3.771260637539962e-02, 4.097242622903061e-02, 4.140673360696322e-02, 1.378038471308923e-02, 1.299843887463374e-02, 8.574887448116353e-03, 9.398545324202897e-03, 4.863412552664976e-02, 6.515838790461227e-02, 1.464857902393391e-02, 1.765829278496820e-02, 1.464857902393393e-02, 1.765829278496818e-02, -1.862145568083699e-03, -2.535320593662468e-03, -3.811501389568566e-03, -3.485744115556856e-03, 4.097570920473843e-03, 4.285010672258764e-03, 1.743133366290958e-02, 2.457729494325551e-02, -8.284904181889825e-03, 7.902297963307353e-03, -8.284904181889836e-03, 7.902297963307338e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
