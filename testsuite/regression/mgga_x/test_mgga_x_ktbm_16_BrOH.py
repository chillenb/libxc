
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_16_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_16", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.433796538882719e+01, -2.433802681891363e+01, -2.433845030785471e+01, -2.433744967325691e+01, -2.433799642905529e+01, -2.433799642905529e+01, -3.433174887592293e+00, -3.433271325492865e+00, -3.436452280129480e+00, -3.437682859373703e+00, -3.433203939704656e+00, -3.433203939704656e+00, -6.156254717408568e-01, -6.151658678089299e-01, -6.040844555358845e-01, -6.127824196905133e-01, -6.154621830464991e-01, -6.154621830464991e-01, -1.862874452448220e-01, -1.887952443696340e-01, -7.101154432436795e-01, -1.250024965022751e-01, -1.869774717480467e-01, -1.869774717480467e-01, -9.622878478717125e-03, -1.007767805569882e-02, -4.090887320786624e-02, -4.579201984190835e-03, -9.974033622646259e-03, -9.974033622646261e-03, -5.952683379196613e+00, -5.953205279523434e+00, -5.952783795138222e+00, -5.953187009648537e+00, -5.952888299697331e+00, -5.952888299697331e+00, -2.111521887421289e+00, -2.140662065330374e+00, -2.109218153043205e+00, -2.132512815969033e+00, -2.134011140231046e+00, -2.134011140231046e+00, -6.118235682330952e-01, -6.573023668109640e-01, -5.580698467465360e-01, -5.765480833117473e-01, -6.463840867575662e-01, -6.463840867575662e-01, -9.212516638760773e-02, -1.826622358418638e-01, -9.099451928006946e-02, -1.905441055046598e+00, -1.076968971961799e-01, -1.076968971961799e-01, -4.429847032973263e-03, -5.053699560689496e-03, -3.800520324493329e-03, -5.677176979902319e-02, -4.599747626442092e-03, -4.599747626442094e-03, -6.669829210071584e-01, -6.674402941264658e-01, -6.673419520548618e-01, -6.672136892366540e-01, -6.672796726042011e-01, -6.672796726042011e-01, -6.385481254674316e-01, -5.688788937580816e-01, -5.939657210608664e-01, -6.133307091324541e-01, -6.033206047755160e-01, -6.033206047755159e-01, -6.759962714843593e-01, -2.369842492497267e-01, -2.840288845158899e-01, -3.590303210797148e-01, -3.235443539203551e-01, -3.235443539203550e-01, -4.832100217784439e-01, -3.795420072886550e-02, -5.129411692393748e-02, -3.389149409590146e-01, -7.482110469515688e-02, -7.482110469515685e-02, -1.118967870796059e-02, -1.381075610629247e-03, -2.639773451437329e-03, -7.132779991804090e-02, -3.908531687266333e-03, -3.908531687266326e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_16_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_16", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.934719987319093e+01, -2.934730515247502e+01, -2.934770684008419e+01, -2.934597887430782e+01, -2.934725603169314e+01, -2.934725603169314e+01, -4.688809108354199e+00, -4.688947305482759e+00, -4.693262987541702e+00, -4.692035079342307e+00, -4.688869268611237e+00, -4.688869268611237e+00, -8.053769373523493e-01, -8.043685159369353e-01, -7.814625540873813e-01, -7.946582490107793e-01, -8.050193665742961e-01, -8.050193665742961e-01, -2.358560462647654e-01, -2.391135120144691e-01, -9.050905732515946e-01, -1.615362024764710e-01, -2.367776634624433e-01, -2.367776634624433e-01, -1.244609685441422e-02, -1.304086440919572e-02, -5.331101949083251e-02, -6.062800437614421e-03, -1.290245438788982e-02, -1.290245438788984e-02, -7.243333004535077e+00, -7.247574472640392e+00, -7.243735845446128e+00, -7.247035483476110e+00, -7.245547350593602e+00, -7.245547350593602e+00, -2.611514174444213e+00, -2.633031981560989e+00, -2.603737059021427e+00, -2.620609884978122e+00, -2.636685105431147e+00, -2.636685105431147e+00, -8.073950701485898e-01, -9.264278661280467e-01, -7.570323169405275e-01, -8.269673438214651e-01, -8.438593838623396e-01, -8.438593838623396e-01, -1.194836077121007e-01, -2.324300323104805e-01, -1.179520381375152e-01, -2.788732310283633e+00, -1.386182342034074e-01, -1.386182342034074e-01, -5.807893351036658e-03, -6.663685054419028e-03, -4.960122235617004e-03, -7.460291140037383e-02, -6.091198069555161e-03, -6.091198069555171e-03, -8.884741651048216e-01, -8.671584168004681e-01, -8.745987816860276e-01, -8.805060360188737e-01, -8.775365892757443e-01, -8.775365892757443e-01, -8.648413512830777e-01, -6.744723638221144e-01, -7.150804858425303e-01, -7.644432626980583e-01, -7.383512439377627e-01, -7.383512439377627e-01, -9.671864179430795e-01, -2.994381396714373e-01, -3.585125133610726e-01, -4.660410202177933e-01, -4.094163447455032e-01, -4.094163447455031e-01, -6.123406864599850e-01, -4.926306998245503e-02, -6.690024575630138e-02, -4.482334910313685e-01, -9.700316362739470e-02, -9.700316362739464e-02, -1.480006716570663e-02, -1.837462219672929e-03, -3.435968852492610e-03, -9.253778654710393e-02, -5.179941827859002e-03, -5.179941827858989e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_16_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_16", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.049547630471660e-08, -2.049539807465535e-08, -2.049498226136586e-08, -2.049628387405409e-08, -2.049543535888320e-08, -2.049543535888320e-08, -1.540675926174991e-05, -1.540988655965648e-05, -1.550249154113734e-05, -1.547170023542233e-05, -1.540727004673140e-05, -1.540727004673140e-05, -4.356826292436017e-03, -4.340460993964814e-03, -3.937548084192296e-03, -4.258001216753310e-03, -4.351551745795008e-03, -4.351551745795008e-03, -7.241252882465707e-01, -7.336058022140293e-01, -1.006027669507451e-03, -3.028746981000048e-01, -7.258731886097955e-01, -7.258731886097955e-01, -4.645878013264410e+01, -4.178909233995305e+01, -1.521589060212175e+00, -3.875187741191053e+01, -4.397561360490973e+01, -4.397561360490964e+01, -6.221002280632520e-06, -6.222278271253282e-06, -6.221218949544578e-06, -6.222204883253707e-06, -6.221548588573821e-06, -6.221548588573821e-06, -1.408056559342355e-04, -1.431444646905970e-04, -1.403330041165826e-04, -1.423453218960846e-04, -1.429576649647609e-04, -1.429576649647609e-04, -2.816675710343875e-02, -2.466930987476060e-02, -2.893974786189684e-02, -2.999141333813574e-02, -2.679322859162061e-02, -2.679322859162061e-02, -4.220022328182192e-01, -3.064144136311736e-01, -4.850294795316374e-01, -2.446868345820632e-04, -5.599155414758533e-01, -5.599155414758533e-01, -1.024268596552330e+02, -5.201951933845316e+01, -3.005905533793457e+02, -5.353221867883082e-01, -4.681973944713209e+01, -4.681973944713186e+01, -3.759072901786176e-02, -3.774966741500059e-02, -3.771120615725795e-02, -3.766791874051301e-02, -3.769085040956307e-02, -3.769085040956307e-02, -4.202208711669068e-02, -5.178654145653234e-02, -5.093361547376975e-02, -4.850392760241961e-02, -4.986273482840722e-02, -4.986273482840720e-02, -1.905005595001986e-02, -2.417184484145035e-01, -1.954401224109063e-01, -1.310923940562485e-01, -1.752370610963434e-01, -1.752370610963434e-01, -6.046083250535061e-02, -1.846029147813681e+00, -9.273667032629963e-01, -1.989460620508445e-01, -8.025717643277120e-01, -8.025717643277114e-01, -7.772746089895453e+00, -1.762750089268838e+02, -5.037409845157114e+02, -9.489810976748588e-01, -6.927273927695173e+01, -6.927273927695214e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_16_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_16", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.926337026954795e-03, 2.926332326548432e-03, 2.926341161849684e-03, 2.926420450967738e-03, 2.926334261356201e-03, 2.926334261356201e-03, 8.084591577338507e-03, 8.086850095764667e-03, 8.156456600276476e-03, 8.156133774213486e-03, 8.085005023635192e-03, 8.085005023635192e-03, 1.052915158124991e-02, 1.048634318109655e-02, 9.710997924425431e-03, 1.166498596392388e-02, 1.051633426628451e-02, 1.051633426628451e-02, 8.496474839238363e-02, 8.807491951722195e-02, 4.502998103342928e-04, 8.948096286102858e-03, 8.563285608812310e-02, 8.563285608812310e-02, 7.701490488279481e-04, 7.925159009971604e-04, 1.849055843677924e-03, 4.983730277928853e-05, 8.109412114327664e-04, 8.109412114327816e-04, 1.213120020654843e-02, 1.212480679657314e-02, 1.213075532416963e-02, 1.212577149010572e-02, 1.212765126742822e-02, 1.212765126742822e-02, 1.949898221286210e-02, 2.037916112557964e-02, 1.950489430801243e-02, 2.022806866122265e-02, 2.007512487549532e-02, 2.007512487549532e-02, 7.806614132188626e-02, 7.663935586019455e-02, 6.422059907328219e-02, 6.837958016730601e-02, 8.321754242861734e-02, 8.321754242861734e-02, 5.898762537930074e-03, 3.743060644894720e-02, 6.546386359568901e-03, 2.002068841460494e-02, 1.341045108324757e-02, 1.341045108324757e-02, 1.418345237768440e-04, 9.773122447681137e-05, 2.787127504262533e-04, 1.446562452083722e-03, 6.075086917940363e-05, 6.075086917940663e-05, 9.640825163336139e-02, 9.938756888583565e-02, 9.835856467255998e-02, 9.753247626494248e-02, 9.794805002575754e-02, 9.794805002575754e-02, 9.765902632907569e-02, 1.133829265400906e-01, 1.145129126097212e-01, 1.103382129542673e-01, 1.126782209601206e-01, 1.126782209601205e-01, 6.708856288408453e-02, 6.149757967349995e-02, 7.667514193112659e-02, 8.570234384836856e-02, 9.160773746954294e-02, 9.160773746954300e-02, 9.123478359936898e-02, 1.872795257449674e-03, 2.195810674087501e-03, 1.029978998342894e-01, 6.207824952754199e-03, 6.207824952754182e-03, 1.491808212808325e-04, 5.442513487849169e-06, 1.611910000971859e-04, 6.274786166408777e-03, 5.412060425450098e-05, 5.412060425449252e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
