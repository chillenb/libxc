
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_16_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_16", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.148303891600784e+01, -2.148314696058517e+01, -2.148366220531806e+01, -2.148189803744683e+01, -2.148309554333613e+01, -2.148309554333613e+01, -3.090476887519758e+00, -3.090556137331066e+00, -3.093060541665333e+00, -3.092335501655118e+00, -3.090513585120727e+00, -3.925208234729215e+00, -5.704036490381700e-01, -7.075434720369225e-01, -6.801619681425867e-01, -6.892725750754813e-01, -7.082326044769385e-01, -7.082326044769385e-01, -1.911220107713850e-01, -1.944423976381867e-01, -6.913677618347173e-01, -1.291912753355408e-01, -1.921035738337042e-01, -1.921035738337042e-01, -9.631027237741117e-03, -1.008841104609749e-02, -4.116125718524576e-02, -4.618802326741324e-03, -9.983285888734539e-03, -9.983285888734539e-03, -5.956481797362828e+00, -5.956962484565979e+00, -5.956529760142368e+00, -5.407379590600310e+00, -5.956730502182994e+00, -5.956730502182994e+00, -1.704181137107716e+00, -1.721603148397763e+00, -1.697082884911218e+00, -1.710565623485014e+00, -1.725476347391779e+00, -2.203102949818064e+00, -6.657710825978498e-01, -7.245447040373103e-01, -6.271879089362237e-01, -6.603892144452366e-01, -6.931004278263950e-01, -5.777486334925992e-01, -8.989880486613051e-02, -1.851747210533650e-01, -8.861782571098979e-02, -2.205578053980962e+00, -1.093649181877636e-01, -1.093649181877636e-01, -4.486798839291497e-03, -5.092232113743039e-03, -3.816684642453095e-03, -5.687603230541428e-02, -4.672064342584158e-03, -4.639787198090856e-03, -6.757478795041699e-01, -6.758389969208873e-01, -6.486555928598975e-01, -6.758504695803362e-01, -6.758706094822163e-01, -6.758706094822163e-01, -6.554187701309961e-01, -5.759346247972551e-01, -6.043602752109773e-01, -6.267190963740297e-01, -6.158347153993752e-01, -5.317968085324680e-01, -7.605370752109633e-01, -1.989691324523493e-01, -2.931715540639834e-01, -3.063594297718745e-01, -3.404335038812142e-01, -3.404335038812140e-01, -4.056945956466891e-01, -3.809455514286090e-02, -5.170551957520670e-02, -3.747429456188637e-01, -7.323460651450013e-02, -7.568370922362677e-02, -1.128687855838357e-02, -1.394074186205824e-03, -2.648293138941314e-03, -7.220042212844342e-02, -3.943168112592426e-03, -3.943168112592420e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_16_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_16", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.209778810253609e+01, -3.209788736406261e+01, -3.209838557666546e+01, -3.209676113936848e+01, -3.209783995854944e+01, -3.209783995854944e+01, -4.646499832609286e+00, -4.646740019513246e+00, -4.654122320058423e+00, -4.651637291442299e+00, -4.646588610861365e+00, -4.645331007758149e+00, -7.527361537867537e-01, -8.821205660526689e-01, -8.527241415335186e-01, -8.621839042364625e-01, -8.828365536694797e-01, -8.828365536694797e-01, -2.397261272456237e-01, -2.435015014318372e-01, -8.726130836373166e-01, -1.647439503451565e-01, -2.408509879900541e-01, -2.408509879900541e-01, -1.243137712728841e-02, -1.302148694289347e-02, -5.301928555207911e-02, -5.962906230058944e-03, -1.288579338721021e-02, -1.288579338721021e-02, -7.238634881151233e+00, -7.242921272400537e+00, -7.239101890578804e+00, -7.858724365049399e+00, -7.240792013643941e+00, -7.240792013643941e+00, -2.486585154630415e+00, -2.528055263018619e+00, -2.469024125535836e+00, -2.501635782879396e+00, -2.537770249377839e+00, -2.638399280354137e+00, -7.737870592956524e-01, -8.586754788399068e-01, -7.340692153732776e-01, -7.679486288949520e-01, -8.065253120327154e-01, -8.859232740030196e-01, -1.159530431185075e-01, -2.346973728982470e-01, -1.141242598021392e-01, -2.567635042191544e+00, -1.395827195215780e-01, -1.395827195215780e-01, -5.981633647900444e-03, -6.574035354095397e-03, -4.927289723030161e-03, -7.475524616144352e-02, -6.228547045061597e-03, -5.989951439364986e-03, -8.769428447986041e-01, -8.562311980511040e-01, -8.980337457177683e-01, -8.691743186933275e-01, -8.662813231538261e-01, -8.662813231538261e-01, -8.429992253679042e-01, -6.700438136100282e-01, -7.053759600594739e-01, -7.491176675899183e-01, -7.252621060308345e-01, -8.015108437329634e-01, -8.917393791034097e-01, -2.534926350804979e-01, -3.644035917747714e-01, -4.488355538836598e-01, -4.151917639830625e-01, -4.151917639830624e-01, -6.139561772773475e-01, -4.908773971700397e-02, -6.653953899977232e-02, -4.424988933202615e-01, -9.483636579863264e-02, -9.701383515548004e-02, -1.456913992339779e-02, -1.799807735004269e-03, -3.419011736214248e-03, -9.255047025039080e-02, -5.090645871006239e-03, -5.090645871006225e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_16_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_16", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.813407490824258e-08, -1.813404864848950e-08, -1.813378794682348e-08, -1.813423614207773e-08, -1.813406206167826e-08, -1.813406206167826e-08, -1.388681326386093e-05, -1.388966334882445e-05, -1.397345313430666e-05, -1.393654188198688e-05, -1.388734017748519e-05, -1.774658006254155e-05, -3.856549963222995e-03, -5.378835365400733e-03, -4.846029961960817e-03, -5.165110551947166e-03, -5.393010916866678e-03, -5.393010916866678e-03, -7.566308845042576e-01, -7.701095024700312e-01, -9.258113199300614e-04, -3.972111482282375e-01, -7.599158308136924e-01, -7.599158308136924e-01, -4.854905659657329e+01, -4.418573364523194e+01, -1.984404499420038e+00, -1.227970128739964e+02, -4.614755164729532e+01, -4.614755164729527e+01, -6.225053892927442e-06, -6.226286390408184e-06, -6.225214692207015e-06, -5.655637394976823e-06, -6.225647108426665e-06, -6.225647108426665e-06, -1.117674411554448e-04, -1.135197760620541e-04, -1.108395956518117e-04, -1.123334890456907e-04, -1.141362249112656e-04, -1.481684412305919e-04, -3.069140455651103e-02, -2.717742958793175e-02, -3.263545423743906e-02, -3.431904653452184e-02, -2.875115944502937e-02, -2.406377810618347e-02, 5.297109134834186e-02, -3.191254942407030e-01, 3.952952320070070e-02, -2.827117768146516e-04, -6.366972713347104e-01, -6.366972713347104e-01, 2.342287958821608e+02, -1.136464083721409e+02, -4.012966232455149e+02, 6.586743038060408e-01, 2.181008928570037e+02, -1.518912007264146e+02, -3.809476838401933e-02, -3.823360727587382e-02, -3.664744320304561e-02, -3.816511763735607e-02, -3.818555239228737e-02, -3.818555239228737e-02, -4.315014954279819e-02, -5.245595344530341e-02, -5.184529574339639e-02, -4.957899761325536e-02, -5.091548610723753e-02, -4.409086311052803e-02, -2.140901625552941e-02, -1.654925910968847e-01, -2.045670619611585e-01, -1.109059096426008e-01, -1.864055484214185e-01, -1.864055484214185e-01, -5.078905205370158e-02, -2.153216011671318e+00, -1.253917088819326e+00, -2.212689825789503e-01, 1.919427547980225e-01, -9.840735661341813e-01, -2.201048373018650e+01, -1.587333316232327e+03, -6.176677325721384e+02, -1.182668992090417e+00, -2.491744244934790e+02, -2.491744244934792e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_16_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_16", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.024961508430198e-03, 2.024980035509348e-03, 2.025056894152675e-03, 2.024756012299550e-03, 2.024971296435664e-03, 2.024971296435664e-03, 3.958902996606067e-03, 3.960812303146333e-03, 4.018259627280535e-03, 3.995658891547381e-03, 3.959414136693378e-03, 1.452090401332031e-02, -7.293153132504454e-04, 3.462260208928342e-02, 2.891466065218197e-02, 3.149812249539985e-02, 3.477526133315210e-02, 3.477526133315210e-02, 1.005632202114136e-01, 1.063873730057192e-01, -2.140683540997347e-03, 1.883061791237723e-02, 1.021891798680455e-01, 1.021891798680455e-01, 8.211362359087027e-04, 8.595408244887624e-04, 2.775508724059764e-03, 2.275860480071411e-04, 8.699425730978412e-04, 8.699425730978400e-04, 1.215093433381585e-02, 1.214428756244581e-02, 1.215021271579772e-02, 9.409593765060738e-03, 1.214759260180105e-02, 1.214759260180105e-02, 4.116041144051226e-03, 4.584878012769528e-03, 3.912896079835157e-03, 4.279878537174871e-03, 4.710046815171312e-03, 2.288784099409152e-02, 1.042274913075532e-01, 1.015248626218512e-01, 1.011794992055323e-01, 1.084502283569854e-01, 1.039052196147437e-01, 5.491644707381901e-02, -2.343136908768158e-03, 4.276950508889296e-02, -2.617085604566835e-03, 3.273833622620312e-02, 1.831294804182114e-02, 1.831294804182114e-02, -6.575472165791612e-07, 2.823699469009356e-04, 4.198884843771980e-04, -6.625050985518450e-04, -7.572331704089903e-07, 2.854405288918566e-04, 9.915747617154809e-02, 1.022797791897253e-01, 9.224296114158592e-02, 1.003395011355411e-01, 1.007769113215393e-01, 1.007769113215393e-01, 1.034512083181256e-01, 1.180874290208513e-01, 1.205971315363792e-01, 1.169532288149886e-01, 1.194579391978188e-01, 7.615987971293255e-02, 9.650441176914497e-02, -6.919683047953383e-03, 9.173668069973580e-02, 2.469655926405284e-02, 1.169850178419057e-01, 1.169850178419056e-01, 3.440898992124595e-02, 2.366321491239024e-03, 3.543551242373820e-03, 1.554498026448137e-01, -2.200737454812811e-03, 9.192451343090579e-03, 5.985619180981861e-04, 8.081321399496418e-05, 2.156811849114901e-04, 9.589859940644846e-03, 2.873722632490938e-04, 2.873722632490873e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
