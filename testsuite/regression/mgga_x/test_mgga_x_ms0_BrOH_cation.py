
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ms0_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.090790305771162e+01, -2.090804019137268e+01, -2.090863614496927e+01, -2.188151855967264e+01, -2.188233311946171e+01, -2.285715206822464e+01, -3.473198202256203e+00, -3.767216771649221e+00, -3.767067790303863e+00, -3.767469196825573e+00, -3.767034738767840e+00, -3.473128342047321e+00, -5.602893173730051e-01, -6.486553860986941e-01, -7.205342195554260e-01, -6.351928458156931e-01, -5.459927556127563e-01, -7.256325632061957e-01, -1.683762141253776e-01, -1.711596863037781e-01, -7.478773857862306e-01, -1.505200507451988e-01, -1.863414620573889e-01, -1.815749807397290e-01, -7.229556697137070e-03, -6.507017610077907e-03, -3.556200696710670e-02, -4.168823757029598e-03, -5.818629221210670e-03, -5.818629221210670e-03, -5.558993498695433e+00, -5.559788348680396e+00, -5.559031330280400e+00, -5.559733111467800e+00, -5.429217073863644e+00, -5.429322889400086e+00, -2.127931991665204e+00, -2.141711298596763e+00, -2.117984745175346e+00, -2.130115894659035e+00, -1.953096667813959e+00, -2.140370257104694e+00, -5.883513977021241e-01, -6.817916586459409e-01, -5.872185989126349e-01, -6.073818147900776e-01, -6.022408608869929e-01, -6.414914470559255e-01, -1.066836499822666e-01, -1.677146856944722e-01, -9.907181412056566e-02, -2.061476151284667e+00, -1.236878953865738e-01, -1.236878953865738e-01, -2.718261858564331e-03, -4.075301813603929e-03, -3.120817461731137e-03, -5.602616791450128e-02, -3.920220491707987e-03, -3.920220491707988e-03, -6.270789513404034e-01, -6.243655604651700e-01, -6.185079764551118e-01, -6.236538477027710e-01, -6.199238748232077e-01, -6.227807826111824e-01, -6.101993378030801e-01, -4.937083238427568e-01, -5.178429037430613e-01, -5.760434130557608e-01, -5.646315164811593e-01, -5.343108210797780e-01, -6.807891675376494e-01, -2.445341645410307e-01, -2.545550675212140e-01, -3.439669237717043e-01, -3.308126228514082e-01, -2.949141979052941e-01, -4.907206120520428e-01, -2.660755105910525e-02, -5.432662409966277e-02, -3.626501873136242e-01, -8.490662516420422e-02, -8.490662516420425e-02, -6.760298288590522e-03, -1.089285016895273e-03, -1.519330517327343e-03, -5.395287451627020e-02, -3.600085455600891e-03, -2.682262674284486e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ms0_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.211520234870443e+01, -3.211557867002312e+01, -3.211536748661508e+01, -3.211569842472358e+01, -3.211589310848412e+01, -3.211645146938525e+01, -3.211403161347038e+01, -3.004373123967454e+01, -3.211530255763297e+01, -3.004433616071757e+01, -3.004470626073441e+01, -3.004433616071757e+01, -4.856941486952519e+00, -4.758012348507288e+00, -4.856966443248854e+00, -4.856879393055650e+00, -4.857430479963450e+00, -4.857564706113729e+00, -4.857671086384959e+00, -4.857739517987748e+00, -4.856107567643051e+00, -4.858249919441158e+00, -4.757750897888612e+00, -4.858249919441159e+00, -8.266946125857431e-01, -8.356616313206564e-01, -8.237986025645037e-01, -9.361932728356928e-01, -9.129748965722834e-01, -9.068386941788257e-01, -9.161237554401747e-01, -8.016946545933117e-01, -8.458357621084308e-01, -7.453392549375781e-01, -9.439263759117320e-01, -8.857114207611253e-01, -1.914164637081913e-01, -2.466857368398365e-01, -1.947946870824695e-01, -2.508419690017091e-01, -1.080686317074049e+00, -9.055343385865463e-01, -1.886882664542436e-01, -1.901815241662549e-01, -2.485770303727374e-01, -1.426413976440979e-01, -2.485770303727372e-01, -1.009208765351812e-01, -9.317753290891699e-03, -9.900496190945518e-03, -6.479349579652955e-03, -1.045790856697462e-02, -3.602963870695509e-02, -5.655286287648117e-02, -5.603300610554578e-03, -5.509959653387585e-03, -8.313356876132019e-03, -4.731992968104295e-03, -8.313356876132019e-03, -4.731992968104296e-03, -7.338003918601710e+00, -7.336247780738527e+00, -7.339629581315830e+00, -7.337818133793000e+00, -7.338105172404561e+00, -7.336309593402660e+00, -7.339499840177324e+00, -7.337735958331792e+00, -7.759780116668516e+00, -7.337035110013005e+00, -7.338828222283548e+00, -7.757932130195172e+00, -2.730117380181155e+00, -2.730037071668196e+00, -2.750816700407919e+00, -2.750111293341530e+00, -2.712752750678667e+00, -2.717634408791725e+00, -2.730618931398031e+00, -2.735748782638126e+00, -2.754743035251963e+00, -2.733201739690400e+00, -2.754743035251964e+00, -2.742358414720547e+00, -8.232866530767141e-01, -7.418217905556312e-01, -8.965625560642299e-01, -8.971638142262713e-01, -7.444975514537164e-01, -7.728932241183024e-01, -7.774389520962517e-01, -8.040796351942036e-01, -8.573327845354555e-01, -7.397281590274769e-01, -8.573327845354555e-01, -8.137891184218933e-01, -1.361559336831397e-01, -1.373498418817054e-01, -1.884999265031849e-01, -2.463077486321333e-01, -1.242155577956146e-01, -1.301437247745992e-01, -2.693959874504103e+00, -2.692763671632064e+00, -1.527378077186175e-01, -1.595197482953715e-01, -1.527378077186175e-01, -1.595197482953715e-01, -2.788415672594498e-03, -4.368869729594516e-03, -5.391453057496640e-03, -5.473080355204820e-03, -4.031272726868861e-03, -4.269087179746364e-03, -8.747066228165756e-02, -6.034427723295295e-02, -4.117853628654759e-03, -5.653733107907374e-03, -4.117853628654760e-03, -5.653733107907390e-03, -8.320691879495625e-01, -8.353189431034885e-01, -8.261781053712304e-01, -8.294494548362508e-01, -8.410250445101536e-01, -8.438007108092617e-01, -8.389850990820161e-01, -8.332028748228343e-01, -8.399327827816858e-01, -8.427790732136455e-01, -8.399327827816859e-01, -8.323561200735735e-01, -8.095878973833701e-01, -8.123013559864324e-01, -6.874798512075270e-01, -6.171723859410009e-01, -7.217923808732365e-01, -7.036728416985321e-01, -7.566914785845577e-01, -7.593863959418672e-01, -7.389199273788184e-01, -7.417182423426522e-01, -7.389199273788183e-01, -7.755954747770918e-01, -9.382595112748593e-01, -9.960014464951147e-01, -3.062721787111140e-01, -3.079773305954476e-01, -3.136361576531920e-01, -3.689166761352281e-01, -4.805510454011974e-01, -4.862411171017786e-01, -4.213894586179326e-01, -4.212440668973836e-01, -4.213894586179325e-01, -3.972111058671743e-01, -6.310382261745132e-01, -6.355712281208242e-01, -3.535565582385415e-02, -3.559757940338638e-02, -7.027708634091560e-02, -7.251135386907520e-02, -4.644820459199677e-01, -4.720595742042303e-01, -1.066213051062762e-01, -1.115514881420694e-01, -1.066213051062760e-01, -1.115514881420696e-01, -8.844843115939513e-03, -9.165507849351271e-03, -1.450704909752502e-03, -1.454020553924179e-03, -1.957796566743778e-03, -2.082274690690941e-03, -7.139515443698709e-02, -7.257913380940260e-02, -3.900301462158117e-03, -5.182326927470963e-03, -3.900301462158101e-03, -3.438143146200090e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms0_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.870797080994754e-08, 0.000000000000000e+00, -3.871141710248890e-08, -3.870794766929839e-08, 0.000000000000000e+00, -3.871139874858755e-08, -3.870759501101778e-08, 0.000000000000000e+00, -3.871096522086668e-08, -3.870789036816835e-08, 0.000000000000000e+00, -2.045695570619363e-09, -3.870798337381847e-08, 0.000000000000000e+00, -2.045587313763147e-09, -2.045463982497339e-09, 0.000000000000000e+00, -2.045587313763147e-09, -2.338172203808795e-06, 0.000000000000000e+00, -2.576869893035138e-05, -2.338376297475871e-06, 0.000000000000000e+00, -2.338250300567943e-06, -2.342380037183156e-06, 0.000000000000000e+00, -2.342997025572459e-06, -2.340136291366963e-06, 0.000000000000000e+00, -2.340011030004832e-06, -2.339216371011073e-06, 0.000000000000000e+00, -2.343436756014636e-06, -2.579699284013969e-05, 0.000000000000000e+00, -2.343436756014636e-06, -1.775478237755704e-02, 0.000000000000000e+00, -1.760610285998872e-02, -1.782895520990100e-02, 0.000000000000000e+00, -1.222623820850237e-03, -1.237277354363648e-03, 0.000000000000000e+00, -1.253636427318697e-03, -1.254558117573284e-03, 0.000000000000000e+00, -1.871252297019354e-02, -1.716189704959614e-02, 0.000000000000000e+00, -2.107106468060645e-02, -1.197883300526993e-03, 0.000000000000000e+00, -1.305705839757158e-03, -4.011046034542723e+00, 0.000000000000000e+00, -2.015228146095350e-01, -3.826820953514777e+00, 0.000000000000000e+00, -1.965044202553591e-01, -4.460699557059544e-04, 0.000000000000000e+00, -8.395579673698873e-03, -2.292697816179521e-01, 0.000000000000000e+00, -2.562086116618126e-01, -1.747350412142407e-01, 0.000000000000000e+00, -2.545035073153019e-01, -1.747350412142410e-01, 0.000000000000000e+00, -4.072689264916623e+01, -1.105785491176939e+00, 0.000000000000000e+00, -1.109949684841486e+00, -2.380505479692220e+06, 0.000000000000000e+00, -1.160801222850574e+00, -2.490116312543175e+03, 0.000000000000000e+00, -5.341847097375725e-01, -8.101924628257289e-01, 0.000000000000000e+00, -8.184990864788783e-01, -1.050718108474789e+00, 0.000000000000000e+00, -1.799589780632583e+00, -1.050718108474789e+00, 0.000000000000000e+00, -1.799589780630546e+00, -6.014850309435838e-07, 0.000000000000000e+00, -6.020642579932266e-07, -6.014452833992906e-07, 0.000000000000000e+00, -6.020259793471851e-07, -6.014862600396080e-07, 0.000000000000000e+00, -6.020654415866038e-07, -6.014519200356922e-07, 0.000000000000000e+00, -6.020304282928476e-07, -1.024226421443052e-05, 0.000000000000000e+00, -6.020447268189418e-07, -6.014622772974945e-07, 0.000000000000000e+00, -1.025278277043528e-05, -2.167867666752946e-05, 0.000000000000000e+00, -2.171767016414344e-05, -2.138038283874737e-05, 0.000000000000000e+00, -2.142663192301729e-05, -2.190399843723093e-05, 0.000000000000000e+00, -2.187883427959352e-05, -2.165603208050039e-05, 0.000000000000000e+00, -2.162402288113791e-05, -2.134137390008581e-05, 0.000000000000000e+00, -2.780767607904418e-04, -2.134137390008581e-05, 0.000000000000000e+00, -2.154578975867732e-05, -3.250926492968445e-03, 0.000000000000000e+00, -2.059725242720276e-02, -2.594548165017467e-03, 0.000000000000000e+00, -2.601848776408495e-03, -4.289420647361293e-03, 0.000000000000000e+00, -3.921559808390812e-03, -4.040125849096888e-03, 0.000000000000000e+00, -3.650345000859863e-03, -2.878319499993333e-03, 0.000000000000000e+00, -2.272586134460331e-02, -2.878319499993316e-03, 0.000000000000000e+00, -3.435435910870668e-03, -3.114685283581148e-01, 0.000000000000000e+00, -3.083108055959284e-01, -3.700212218921206e+00, 0.000000000000000e+00, -1.305063725894838e-01, -3.349519100121990e-01, 0.000000000000000e+00, -3.405418830984193e-01, -2.949025953403762e-05, 0.000000000000000e+00, -2.954738290844975e-05, -3.507193338057030e-01, 0.000000000000000e+00, -4.228409822757020e-01, -3.507193338056949e-01, 0.000000000000000e+00, -4.228409822757058e-01, -6.940082556958476e+07, 0.000000000000000e+00, -5.423385773713711e-01, -7.685336421290527e-01, 0.000000000000000e+00, -6.774364705462840e-01, -5.534134449971456e+00, 0.000000000000000e+00, -6.074554437822221e+00, -4.904128003022896e-01, 0.000000000000000e+00, -3.168772700105099e+02, -1.042880296856157e+00, 0.000000000000000e+00, -3.310962693446960e+00, -1.042880296854933e+00, 0.000000000000000e+00, -3.310962693350170e+00, -3.923393358048175e-03, 0.000000000000000e+00, -3.865869517074290e-03, -3.924314702975023e-03, 0.000000000000000e+00, -3.867350946285262e-03, -3.398966974971668e-02, 0.000000000000000e+00, -3.275631331626724e-02, -2.848384780144585e-02, 0.000000000000000e+00, -3.866488665075699e-03, -3.123968797998396e-02, 0.000000000000000e+00, -3.012539908486378e-02, -3.123968797998396e-02, 0.000000000000000e+00, -3.866659969076353e-03, -4.360474127255503e-03, 0.000000000000000e+00, -4.306597296550821e-03, -6.334791658522170e-03, 0.000000000000000e+00, -3.579519486977989e-02, -5.714498457707926e-03, 0.000000000000000e+00, -6.159225253282170e-02, -5.146382595829693e-03, 0.000000000000000e+00, -5.079457997166174e-03, -5.428394937603608e-03, 0.000000000000000e+00, -5.357524047237187e-03, -5.428394937603604e-03, 0.000000000000000e+00, -9.054545190017042e-02, -2.096458747612679e-03, 0.000000000000000e+00, -3.801594617043340e-02, -7.620866134404806e-02, 0.000000000000000e+00, -7.519295960571357e-02, -7.362344159858930e-01, 0.000000000000000e+00, -4.707361136492645e-02, -2.876759437745684e-01, 0.000000000000000e+00, -2.140071364192450e-02, -3.336668140294168e-02, 0.000000000000000e+00, -3.352580846770653e-02, -3.336668140294202e-02, 0.000000000000000e+00, -4.617284860937081e-01, -8.270254022036249e-03, 0.000000000000000e+00, -8.157056824040606e-03, -2.685481160150930e+03, 0.000000000000000e+00, -2.613221866091198e+03, -4.434848281642607e-01, 0.000000000000000e+00, -4.569174740640684e-01, -2.779379234611087e-02, 0.000000000000000e+00, -2.763777378650401e-02, -5.421675843991165e-01, 0.000000000000000e+00, -6.328770896326663e-01, -5.421675843991818e-01, 0.000000000000000e+00, -6.328770896326151e-01, -6.855424986176279e+05, 0.000000000000000e+00, -5.945232118331075e+05, -8.837551543667009e-01, 0.000000000000000e+00, -8.798693599151206e-01, -2.855778020354294e+08, 0.000000000000000e+00, -2.231734956824900e+08, -1.620993129134068e+02, 0.000000000000000e+00, -1.518957709873312e+02, -2.691413043749047e+00, 0.000000000000000e+00, -3.432812043842765e+00, -2.691413043956945e+00, 0.000000000000000e+00, -3.002609882291956e+07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms0_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.484797649983222e-03, 2.485167434506336e-03, 2.484843467407333e-03, 2.485200578705702e-03, 2.484968191642611e-03, 2.485384937605791e-03, 2.484454528284254e-03, -5.920467706187856e-20, 2.484827468795258e-03, 2.162351353476768e-19, -6.427036860750533e-19, 2.162351353476768e-19, -4.975654170641341e-18, 3.902691356611414e-03, 1.001838494522804e-17, 3.650183772070403e-18, -4.665513476023573e-18, -4.647821034272872e-18, -1.006364169547643e-18, 1.294226091280759e-18, 3.310196642134539e-18, 5.166817026915844e-18, 3.906468594859376e-03, 5.166817026915844e-18, 7.754664394439877e-03, 8.311392519722577e-03, 7.602036886152665e-03, -5.788126863319118e-17, 4.792889028236511e-17, 2.919118301383470e-17, -4.328916160122894e-17, 6.723401868640382e-03, 8.640496334100066e-03, 4.314981523206264e-03, -1.448246485102715e-17, -3.391891612871357e-18, 7.209692832701126e-03, -9.283667206284354e-17, 8.073782815041503e-03, -3.028208355713097e-18, -4.036811012491886e-17, 1.971878756830942e-03, 7.487432730434331e-17, -1.942024360124653e-17, -8.816365881681407e-17, -9.990072828218641e-17, -6.662601029085890e-17, 7.233426456362584e-05, 7.711646603751597e-18, -8.789002730738363e-18, 3.751579335567863e-10, -2.973348866141248e-18, 6.688910463561517e-07, 1.469629150629827e-17, 1.681569033031478e-17, 5.049012739700420e-18, 2.184734578031986e-17, -1.264574790711586e-17, 2.184734578031986e-17, -1.306748739890069e-17, 1.550335292293507e-19, 9.657191009975664e-19, -3.897637943823341e-19, -2.392504257122411e-19, -2.855449627637288e-19, -2.076277673086958e-18, 6.816338333645120e-19, -1.073358500848030e-18, 1.002469563232459e-02, -5.619925056539296e-20, -1.044904780467314e-18, 1.002759893662349e-02, -9.313939998314364e-18, 1.178129708848859e-17, 2.392144974497290e-18, 1.456842133638862e-17, -3.192409077151697e-18, 5.072840533082046e-18, -1.040265529993166e-17, 7.074966261383318e-18, -2.325877656260956e-18, 7.618332746392035e-03, -2.325877656260956e-18, 9.350943016811329e-19, 3.735373297746426e-17, 7.109859198538852e-03, -1.174214883053279e-18, 1.714915880230145e-18, 5.601373937682541e-17, 3.598833614781277e-17, 5.707789441197457e-18, -3.340715081002932e-18, 1.372712044790484e-17, 9.330029505204566e-03, -1.854302391324791e-17, -2.583719518445366e-17, 1.881926882567166e-16, 1.722541386600991e-16, 2.127869324927858e-03, 1.439325888205010e-16, 6.708054643560829e-17, 1.079682433548048e-16, -1.778144130991754e-18, 2.322455501838929e-18, 3.104740026917080e-17, -1.218235895541897e-16, -4.172283347290479e-17, -8.598291218159132e-17, 2.031031628878511e-12, 4.024612141118893e-18, 2.744992301604006e-18, -6.356863464052971e-18, -1.385920885086501e-17, -9.772577528070285e-18, -2.609841557499369e-16, 1.224225859979059e-05, -1.149374655617627e-18, 2.559097638078086e-17, -1.316235307760203e-18, -8.576044128599912e-18, 2.150737383885943e-18, 4.442081798182746e-19, 1.158122199777338e-17, 6.986453781656361e-18, 4.648370167300981e-02, 4.522175991064748e-02, 3.835775825661353e-02, -4.544748084255857e-18, 4.244685510568522e-02, 4.130704108387812e-02, 4.244685510568522e-02, -4.667065621379192e-18, 5.095339145667309e-19, -1.214756630261881e-19, 1.545782650005745e-17, 3.358298880260999e-03, -1.507446062242815e-17, 3.938887061505560e-02, -2.053991754057288e-17, -1.784312039066936e-17, 3.445455278898929e-18, 4.360256302981889e-17, -2.182892113333702e-18, 8.165379281568651e-02, 2.618088817818121e-18, 7.242475394203216e-02, 6.840695356715456e-17, -6.637551884001750e-17, 1.372594651115802e-02, -3.398979573384340e-17, 4.183882538272030e-02, -4.838362545354793e-17, -2.337527679952738e-17, 7.596325871136125e-17, 4.552364489968629e-17, 3.100065056743188e-02, 3.660770674946692e-17, -1.324691724874859e-17, 6.571330115035243e-07, 6.596982618994474e-07, -5.483988169271499e-17, 4.777591809115213e-17, -1.081923499993603e-16, -5.394055952484872e-17, 1.599563929046460e-17, 1.641417725378857e-16, 1.957634313742875e-16, -3.638519832617811e-18, 5.649255489495906e-10, 6.605326930169096e-10, -1.802436698567792e-19, -2.160413865344934e-18, 2.937313294399413e-12, 4.359441373948346e-12, 4.250447507600995e-05, 5.492516134406906e-05, -9.599608630841900e-18, 2.474119288489938e-17, 1.448026153079686e-17, 8.154605957089343e-11]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
