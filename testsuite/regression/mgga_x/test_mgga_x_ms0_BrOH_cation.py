
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ms0_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.283942144080135e+01, -2.283948131494446e+01, -2.283978188681448e+01, -2.283889085795638e+01, -2.283935283444688e+01, -2.283935283444688e+01, -3.366386061428654e+00, -3.366402786418885e+00, -3.367062795046894e+00, -3.368348264581523e+00, -3.367364428085048e+00, -3.367364428085048e+00, -6.383287924533121e-01, -6.379349690444689e-01, -6.305671609523869e-01, -6.404011488356225e-01, -6.392545250708055e-01, -6.392545250708055e-01, -1.904373026267406e-01, -1.923483715016178e-01, -7.049471713313050e-01, -1.461955236593879e-01, -1.808676780255600e-01, -1.808676780255599e-01, -7.229542585659835e-03, -7.613116949541833e-03, -4.175081134271888e-02, -4.168794990862165e-03, -5.818590999304785e-03, -5.818590999304786e-03, -5.558803767350113e+00, -5.559600953578558e+00, -5.558845729746745e+00, -5.559549391404202e+00, -5.559205002927351e+00, -5.559205002927351e+00, -2.098392859614541e+00, -2.119769796292387e+00, -2.094697249436010e+00, -2.113187931083460e+00, -2.112223293180484e+00, -2.112223293180484e+00, -6.070982616148893e-01, -6.547915022528141e-01, -5.347765425901391e-01, -5.406873997884969e-01, -6.199508404091171e-01, -6.199508404091172e-01, -1.055409293860575e-01, -1.923941838651848e-01, -9.814665458208371e-02, -1.847035960830852e+00, -1.219012308082191e-01, -1.219012308082191e-01, -3.218491161947796e-03, -4.075241233462971e-03, -3.120779905515273e-03, -6.693335516365374e-02, -3.920184960367553e-03, -3.920184960367554e-03, -6.263134197447704e-01, -6.236460303931535e-01, -6.245865330444809e-01, -6.253582472626373e-01, -6.249715938860418e-01, -6.249715938860418e-01, -6.079900065365735e-01, -5.303634889469413e-01, -5.524737274761309e-01, -5.743726428646733e-01, -5.630472607769963e-01, -5.630472607769963e-01, -6.735101515707630e-01, -2.424971702247638e-01, -2.834427590022885e-01, -3.509252806263770e-01, -3.179572998513642e-01, -3.179572998513642e-01, -4.764665487554719e-01, -3.993137592839951e-02, -5.423871382812065e-02, -3.411442255561190e-01, -8.425398370570331e-02, -8.425398370570332e-02, -1.018926060793864e-02, -1.089277912016182e-03, -2.290709924138217e-03, -7.936267725042281e-02, -3.600048962372551e-03, -3.600048962372548e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ms0_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.985054506067439e+01, -2.985124393256132e+01, -2.985066473885724e+01, -2.985133075276517e+01, -2.985114064837565e+01, -2.985198649565395e+01, -2.984979395073602e+01, -2.985026921678933e+01, -2.985061456208210e+01, -2.985102364888311e+01, -2.985061456208210e+01, -2.985102364888311e+01, -4.283942337355654e+00, -4.282806150535581e+00, -4.284366665932456e+00, -4.283005679039960e+00, -4.291827881562089e+00, -4.293012144953233e+00, -4.292902210894737e+00, -4.292224176890249e+00, -4.282389566065877e+00, -4.299184139741483e+00, -4.282389566065877e+00, -4.299184139741483e+00, -8.073097085696395e-01, -8.153247581064085e-01, -8.047116033633662e-01, -8.140699062288049e-01, -7.701629625626842e-01, -7.632754831285444e-01, -7.824119495226625e-01, -7.869305556651377e-01, -8.246789151248224e-01, -7.458100921306962e-01, -8.246789151248224e-01, -7.458100921306962e-01, -1.777216717770047e-01, -2.153096690502041e-01, -1.834858731228682e-01, -2.124549287281895e-01, -8.062905527345656e-01, -8.602531647691415e-01, -1.670338259804828e-01, -1.676252410390358e-01, -1.912292006772243e-01, -1.331157386942795e-01, -1.912292006772242e-01, -1.331157386942795e-01, -9.317675881932969e-03, -9.900441317417581e-03, -9.763112636173027e-03, -1.045779623137439e-02, -5.350622853649831e-02, -5.639788259585820e-02, -5.603173008519267e-03, -5.509857137413118e-03, -8.313214700030484e-03, -4.731765349010385e-03, -8.313214700030486e-03, -4.731765349010385e-03, -7.335426227767288e+00, -7.333816908530342e+00, -7.337103744500486e+00, -7.335436083509883e+00, -7.335589017675186e+00, -7.333922708961884e+00, -7.337025499648121e+00, -7.335390921650659e+00, -7.336232979736389e+00, -7.334621460996007e+00, -7.336232979736389e+00, -7.334621460996007e+00, -2.417433160719364e+00, -2.425853256364476e+00, -2.483731468305025e+00, -2.490196413530312e+00, -2.424422572096637e+00, -2.429705344806523e+00, -2.488326641112987e+00, -2.493920090671363e+00, -2.454217008132002e+00, -2.459656254682393e+00, -2.454217008132002e+00, -2.459656254682393e+00, -7.877426536561722e-01, -7.861426616806173e-01, -9.177844956030654e-01, -9.172365057321188e-01, -6.681891842794957e-01, -7.266546437110571e-01, -7.327025207373902e-01, -8.008717562837553e-01, -8.297046315934232e-01, -7.846405460952848e-01, -8.297046315934233e-01, -7.846405460952851e-01, -1.305539839171072e-01, -1.314210753498573e-01, -1.889845415760603e-01, -1.925438925609211e-01, -1.200496330534214e-01, -1.252153629820536e-01, -2.718385154307102e+00, -2.717641051953990e+00, -1.413558448895668e-01, -1.451212761165019e-01, -1.413558448895668e-01, -1.451212761165019e-01, -4.203713502606527e-03, -4.368674095160708e-03, -5.391220892962007e-03, -5.472827847560526e-03, -4.031144000150473e-03, -4.268917880024817e-03, -8.614995707991197e-02, -8.669310051796196e-02, -4.117487553609698e-03, -5.653676034970374e-03, -4.117487553609698e-03, -5.653676034970375e-03, -8.323543615832829e-01, -8.356065702672716e-01, -8.247533026572407e-01, -8.280898364322402e-01, -8.273909733770918e-01, -8.307159266761771e-01, -8.296139165114154e-01, -8.328816260303336e-01, -8.284992468793817e-01, -8.317950218206798e-01, -8.284992468793817e-01, -8.317950218206798e-01, -8.126684446322723e-01, -8.151903706132928e-01, -6.715263468900030e-01, -6.749334278161763e-01, -7.079889051832416e-01, -7.117033100802316e-01, -7.482963616460052e-01, -7.511036374433352e-01, -7.268356151563021e-01, -7.300950464456187e-01, -7.268356151563021e-01, -7.300950464456187e-01, -9.663002838682390e-01, -9.677806151243240e-01, -2.463186897748743e-01, -2.467737138729845e-01, -2.797738457009159e-01, -2.841724727587165e-01, -4.182838048425692e-01, -4.211924243821242e-01, -3.399660320798745e-01, -3.402660606053212e-01, -3.399660320798745e-01, -3.402660606053212e-01, -5.631015719970106e-01, -5.726153013263463e-01, -5.256708946073877e-02, -5.291747102377468e-02, -6.988999458971194e-02, -7.207298960297234e-02, -4.173015421882055e-01, -4.314062062780499e-01, -1.037903714092248e-01, -1.074720648096145e-01, -1.037903714092248e-01, -1.074720648096145e-01, -1.332223876328370e-02, -1.380402419232505e-02, -1.450683130891732e-03, -1.453985538281257e-03, -2.951624905607443e-03, -3.139245261246363e-03, -9.963016323525437e-02, -9.947486748250887e-02, -3.899917186662845e-03, -5.182281500663570e-03, -3.899917186662842e-03, -5.182281500663565e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms0_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.001277962067481e-09, 0.000000000000000e+00, -4.990040623638033e-09, -5.001063245754254e-09, 0.000000000000000e+00, -4.989886255689350e-09, -4.998956373005822e-09, 0.000000000000000e+00, -4.987267811108450e-09, -5.001306756682236e-09, 0.000000000000000e+00, -4.990278370858302e-09, -5.001178442468259e-09, 0.000000000000000e+00, -4.988038738448736e-09, -5.001178442468259e-09, 0.000000000000000e+00, -4.988038738448736e-09, -1.655029673645302e-05, 0.000000000000000e+00, -1.646386161077226e-05, -1.657830300286660e-05, 0.000000000000000e+00, -1.647578733910993e-05, -1.705581014214598e-05, 0.000000000000000e+00, -1.712311437796227e-05, -1.717990663992449e-05, 0.000000000000000e+00, -1.711286947619800e-05, -1.650534241774522e-05, 0.000000000000000e+00, -1.755797254482769e-05, -1.650534241774522e-05, 0.000000000000000e+00, -1.755797254482769e-05, -1.284957588708480e-02, 0.000000000000000e+00, -1.298888443796337e-02, -1.282027440279532e-02, 0.000000000000000e+00, -1.297789894697278e-02, -1.229761559551368e-02, 0.000000000000000e+00, -1.221714978313682e-02, -1.234308151762993e-02, 0.000000000000000e+00, -1.245287378980778e-02, -1.294717435041135e-02, 0.000000000000000e+00, -1.144401766972134e-02, -1.294717435041135e-02, 0.000000000000000e+00, -1.144401766972134e-02, -2.612057366568171e+00, 0.000000000000000e+00, -1.404754201061688e+00, -2.402761751222972e+00, 0.000000000000000e+00, -1.656379568894304e+00, -5.753848402066488e-03, 0.000000000000000e+00, -5.662432850916214e-03, -9.277813562312195e-01, 0.000000000000000e+00, -1.344740386768715e+00, -1.958395936702616e+00, 0.000000000000000e+00, -8.589257018845721e-01, -1.958395936702617e+00, 0.000000000000000e+00, -8.589257018845732e-01, -1.136852885121751e+00, 0.000000000000000e+00, -1.128234214584285e+00, -1.198132986311343e+00, 0.000000000000000e+00, -1.192843945330874e+00, -7.076954979254548e-01, 0.000000000000000e+00, -7.184983797752041e-01, -1.039428744934555e+00, 0.000000000000000e+00, -1.011170629535382e+00, -1.134218033379371e+00, 0.000000000000000e+00, -2.874983138628348e+00, -1.134218033379374e+00, 0.000000000000000e+00, -2.874983138628356e+00, -6.622333321930890e-07, 0.000000000000000e+00, -6.593795314949163e-07, -6.614486670682446e-07, 0.000000000000000e+00, -6.586248219900809e-07, -6.607993200057698e-07, 0.000000000000000e+00, -6.583507639203844e-07, -6.601804660171819e-07, 0.000000000000000e+00, -6.577178566309539e-07, -6.628833075352061e-07, 0.000000000000000e+00, -6.591757299139352e-07, -6.628833075352061e-07, 0.000000000000000e+00, -6.591757299139352e-07, -2.350695510451171e-04, 0.000000000000000e+00, -2.288444151066178e-04, -1.996238683886210e-04, 0.000000000000000e+00, -1.946338006046699e-04, -2.093285862716858e-04, 0.000000000000000e+00, -2.113789677034977e-04, -1.760117108741162e-04, 0.000000000000000e+00, -1.774414906848956e-04, -2.314631197951446e-04, 0.000000000000000e+00, -2.128864789151636e-04, -2.314631197951446e-04, 0.000000000000000e+00, -2.128864789151636e-04, -5.222122836543638e-02, 0.000000000000000e+00, -5.150513448086023e-02, -4.213397665815219e-02, 0.000000000000000e+00, -4.096595759989576e-02, -4.142022991250616e-02, 0.000000000000000e+00, -6.469973060460622e-02, -4.225287377463494e-02, 0.000000000000000e+00, -5.763860432848498e-02, -3.862659543248628e-02, 0.000000000000000e+00, -5.677636098628456e-02, -3.862659543248625e-02, 0.000000000000000e+00, -5.677636098628455e-02, -7.336934155493817e-01, 0.000000000000000e+00, -7.328235011169465e-01, -1.408834745439062e+00, 0.000000000000000e+00, -1.310231818794562e+00, -7.268601640366202e-01, 0.000000000000000e+00, -7.718800477550148e-01, -4.709343246341838e-04, 0.000000000000000e+00, -4.722300911187068e-04, -1.341148178578218e+00, 0.000000000000000e+00, -1.821353872613612e+00, -1.341148178578221e+00, 0.000000000000000e+00, -1.821353872613603e+00, -1.458730312431480e+00, 0.000000000000000e+00, -1.262585798334914e+00, -1.256479985744851e+00, 0.000000000000000e+00, -1.160068426970342e+00, -7.159219637504719e+00, 0.000000000000000e+00, -7.965934176665327e+00, -9.176763030455949e-01, 0.000000000000000e+00, -9.084854399866963e-01, -3.559004048003893e+00, 0.000000000000000e+00, -3.498576940808913e+00, -3.559004048003882e+00, 0.000000000000000e+00, -3.498576940808910e+00, -1.148012808686277e-02, 0.000000000000000e+00, -1.110233317775662e-02, -1.124961039227697e-02, 0.000000000000000e+00, -1.089057383574561e-02, -1.133283492870590e-02, 0.000000000000000e+00, -1.096446476872947e-02, -1.139812437969519e-02, 0.000000000000000e+00, -1.103129739091854e-02, -1.137030813536052e-02, 0.000000000000000e+00, -1.100094436992428e-02, -1.137030813536052e-02, 0.000000000000000e+00, -1.100094436992428e-02, -2.162105334674670e-02, 0.000000000000000e+00, -2.072664116737581e-02, -2.199103111480685e-02, 0.000000000000000e+00, -2.143130333319963e-02, -2.316152288437416e-02, 0.000000000000000e+00, -2.250268366165771e-02, -2.316196900237730e-02, 0.000000000000000e+00, -2.272580854012445e-02, -2.459086106538633e-02, 0.000000000000000e+00, -2.353309476326746e-02, -2.459086106538637e-02, 0.000000000000000e+00, -2.353309476326751e-02, -3.845230045137291e-02, 0.000000000000000e+00, -3.762710692662873e-02, -7.606583834987674e-01, 0.000000000000000e+00, -7.637929895055142e-01, -6.646249973297802e-01, 0.000000000000000e+00, -6.517996992491591e-01, -3.044509609104515e-01, 0.000000000000000e+00, -2.928859456151861e-01, -5.083705662286481e-01, 0.000000000000000e+00, -5.114873683613325e-01, -5.083705662286482e-01, 0.000000000000000e+00, -5.114873683613328e-01, -1.232735851833331e-01, 0.000000000000000e+00, -1.133674052632990e-01, -6.580213790666228e-01, 0.000000000000000e+00, -6.526937659420440e-01, -6.652319166099456e-01, 0.000000000000000e+00, -6.862777307383248e-01, -4.141697850168738e-01, 0.000000000000000e+00, -4.499710970608610e-01, -1.089663129907953e+00, 0.000000000000000e+00, -1.465951711060659e+00, -1.089663129907954e+00, 0.000000000000000e+00, -1.465951711060658e+00, -9.027233745914318e-01, 0.000000000000000e+00, -9.219205922227081e-01, -4.486133719174130e+00, 0.000000000000000e+00, -7.946835071696073e+00, -2.769540975354198e+00, 0.000000000000000e+00, -2.948560443032552e+00, -1.274853508519664e+00, 0.000000000000000e+00, -2.397925719081811e+00, -7.339493016776629e+00, 0.000000000000000e+00, -3.631095680090089e+00, -7.339493016776642e+00, 0.000000000000000e+00, -3.631095680090101e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms0_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms0_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.261090458529498e-04, 2.252477348245540e-04, 2.260962300336609e-04, 2.252385421944636e-04, 2.259482473766315e-04, 2.250566262516743e-04, 2.260872487157100e-04, 2.252350672506230e-04, 2.261035026666984e-04, 2.250856875698177e-04, 2.261035026666984e-04, 2.250856875698177e-04, 2.350587916298060e-03, 2.319361814660876e-03, 2.360136213973385e-03, 2.323259155562511e-03, 2.521247509823724e-03, 2.543699201991555e-03, 2.573106733584611e-03, 2.548958596798513e-03, 2.332192731013023e-03, 2.700016128192189e-03, 2.332192731013023e-03, 2.700016128192189e-03, 1.325375641503106e-02, 1.372771924325481e-02, 1.313639856456337e-02, 1.365074359351235e-02, 1.126457503844534e-02, 1.125660310441495e-02, 1.286052888578032e-02, 1.322633063308398e-02, 1.372564552596742e-02, 1.168286437272268e-02, 1.372564552596742e-02, 1.168286437272268e-02, 8.687239001022216e-02, 5.134538163031639e-02, 8.037178209232011e-02, 6.533486371989683e-02, 1.410976257327067e-03, 2.537918042618895e-03, 4.354066621204342e-03, 1.422031509975031e-02, 7.085943220266752e-02, 8.049044834642052e-05, 7.085943220266758e-02, 8.049044834641725e-05, 2.204742534667931e-10, 4.873006661936577e-09, 8.202557677705841e-11, 8.683032226054540e-10, 4.103218350871377e-07, 1.158386483572028e-06, 1.428553477542848e-15, 1.935375047508027e-15, 2.678928668294449e-12, 5.015217283030934e-16, 2.678928668246399e-12, 5.015217275991721e-16, 6.766741088685187e-05, 6.379893250633727e-05, 6.687540262938959e-05, 6.303583813080573e-05, 6.607156169282943e-05, 6.265418429571089e-05, 6.545212644045203e-05, 6.201934482160931e-05, 6.843593263386084e-05, 6.361114937980464e-05, 6.843593263386084e-05, 6.361114937980464e-05, 1.221104913735429e-02, 1.186560257699764e-02, 1.048712216284983e-02, 1.019183743865834e-02, 1.058246039271929e-02, 1.075050154052386e-02, 8.928458305602379e-03, 9.058954233617678e-03, 1.234026988779270e-02, 1.113388807461835e-02, 1.234026988779270e-02, 1.113388807461835e-02, 7.348665065818871e-02, 7.204717963096521e-02, 7.575532348031495e-02, 7.386747435092725e-02, 2.975473306874590e-02, 7.012549368525985e-02, 3.363911596978350e-02, 6.579713842879738e-02, 6.141870532169603e-02, 7.691169376362776e-02, 6.141870532169600e-02, 7.691169376362773e-02, 6.773941382994313e-04, 5.870299507361299e-04, 4.857763085497572e-02, 4.505694868912021e-02, 1.940264471043870e-04, 5.161623677281814e-04, 2.015580143121385e-02, 2.019205920186436e-02, 5.833866419993641e-03, 1.116494217329140e-02, 5.833866419993668e-03, 1.116494217329131e-02, 3.074027157200070e-18, 3.929014657457642e-18, 1.739150293649840e-16, 1.199469394857133e-16, 8.306877853431020e-15, 1.544467963600461e-14, 1.149453347660858e-05, 5.256392058260457e-05, 7.350522186540950e-18, 3.833985859891130e-12, 7.350522193379656e-18, 3.833985859909622e-12, 1.206208368099975e-02, 1.168767487246642e-02, 1.149514347260307e-02, 1.115278179862252e-02, 1.169608059718785e-02, 1.133865005975896e-02, 1.185822017876076e-02, 1.150181876645045e-02, 1.178456637353467e-02, 1.142491961075247e-02, 1.178456637353467e-02, 1.142491961075248e-02, 2.520544264668729e-02, 2.422919143168017e-02, 1.453039927821423e-02, 1.427781393902810e-02, 1.854715817420831e-02, 1.817724797108304e-02, 2.182352142710609e-02, 2.160445085197742e-02, 2.171996591865225e-02, 2.084158378918849e-02, 2.171996591865227e-02, 2.084158378918854e-02, 7.794753369746410e-02, 7.728168264041622e-02, 5.497994554869953e-02, 5.623389842996720e-02, 8.265794460458077e-02, 8.365224598406050e-02, 7.880307614265968e-02, 7.639741691747241e-02, 9.606244441723355e-02, 9.654702597301833e-02, 9.606244441723355e-02, 9.654702597301838e-02, 7.908849527641627e-02, 7.439546428148740e-02, 4.621486981651539e-06, 2.651026615795971e-06, 2.633359711631140e-06, 4.286026001523062e-06, 9.531606024256442e-02, 1.196487034085536e-01, 3.289196969269049e-04, 9.567476673244227e-04, 3.289196969269043e-04, 9.567476673244205e-04, 2.129152972954033e-13, 2.467167341895192e-13, 3.382746273087259e-22, 3.518261049602451e-22, 4.759103212044002e-16, 8.587862052750834e-16, 4.977158212214855e-04, 3.623370958610517e-03, 6.072809085835938e-17, 1.780507789000440e-12, 6.072809079908435e-17, 1.780507789007100e-12]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
