
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_lta_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_lta", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.128952753166230e+01, -1.128927905760819e+01, -1.128829678399144e+01, -1.129197241038115e+01, -1.129002935517404e+01, -1.129002935517404e+01, -4.358038912512361e+00, -4.357135292464559e+00, -4.333438691139513e+00, -4.343397895055555e+00, -4.341871485369241e+00, -4.341871485369241e+00, -1.531843946847927e+00, -1.537887813199551e+00, -1.686854860807597e+00, -1.609711839163834e+00, -1.627224006252516e+00, -1.627224006252516e+00, -5.662325023321695e-01, -5.505844445729721e-01, -2.769377107673625e+00, -9.086452110179748e-01, -7.126344514705838e-01, -7.126344514705838e-01, -4.649104901031585e+00, -4.433802527616468e+00, -2.114687502385225e+00, -7.322181767095521e+00, -5.295127562823232e+00, -5.295127562823232e+00, -2.033279149880665e+00, -2.020568270692547e+00, -2.032544292803804e+00, -2.021331400817075e+00, -2.026911181416791e+00, -2.026911181416791e+00, -2.897859704425451e+00, -2.823698394817249e+00, -2.958768388472561e+00, -2.890051462748058e+00, -2.827111482165781e+00, -2.827111482165781e+00, -4.951735301005694e-01, -3.205443254848299e-01, -6.092135464137383e-01, -4.706452705040081e-01, -4.623225717636654e-01, -4.623225717636654e-01, -1.255979370748311e+00, -8.401003252564766e-01, -1.298833071251937e+00, -1.413372855387227e+00, -9.194130141700292e-01, -9.194130141700290e-01, -9.908015513021526e+00, -7.796519298688694e+00, -3.968787730674521e+00, -1.503687370771256e+00, -5.193502115553731e+00, -5.193502115553731e+00, -7.987846040877436e-02, -1.381667521893722e-01, -1.185013949968540e-01, -1.016109432734510e-01, -1.101467469504131e-01, -1.101467469504131e-01, -8.610005541761842e-02, -4.933432116394085e-01, -3.790484808297958e-01, -2.639791432611999e-01, -3.231084187019251e-01, -3.231084187019251e-01, -3.936873282752062e-01, -7.548994181955939e-01, -6.706771411641803e-01, -5.232951453130736e-01, -5.725986236500928e-01, -5.725986236500928e-01, -5.475190407369176e-01, -2.159842966865567e+00, -1.878898811127855e+00, -3.957490287423149e-01, -1.148807496132655e+00, -1.148807496132655e+00, -5.081174357566296e+00, -1.587367934612667e+01, -6.671797424941612e+00, -1.155667724468616e+00, -4.687337542194458e+00, -4.687337542194458e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_lta_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_lta", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.010157638101559e-15, -1.182064069287409e-15, 8.817330351287315e-16, 8.817330351287315e-16, -3.532558839627077e-15, -5.628770611752387e-15, 2.462450929827579e-15, 3.665001882088068e-16, -3.300401952125602e-16, 3.862133292944166e-15, -3.300401952125602e-16, 3.862133292944166e-15, 2.519991867761891e-15, 1.362130672094521e-15, -2.904039711986554e-16, 8.674647218721360e-16, 2.176809772999463e-15, -1.394444677690550e-16, 2.916332247499238e-17, -2.287511682264378e-15, 6.143442993485189e-16, 6.143442993485189e-16, 6.143442993485189e-16, 6.143442993485189e-16, 3.205164702221602e-16, -2.112264953966154e-16, -6.912673634264093e-16, -6.912673634264093e-16, -1.345132526682109e-16, -1.345132526682109e-16, 2.771792547998901e-16, 7.783233125405626e-16, 1.060869242249109e-17, -2.386496203930359e-16, 1.060869242249109e-17, -2.386496203930359e-16, 6.554116884090644e-17, -7.693527848450685e-18, 1.331631918388234e-16, -2.006231478729973e-17, 9.823448713000333e-17, 5.197598841443640e-16, 2.114763157054012e-16, -3.012340231282665e-16, -4.297235125595676e-17, -4.059572171736871e-16, -4.902243251221582e-17, -1.397686489916484e-16, -5.230064539271819e-17, 7.575583770834179e-16, -5.873325034409320e-16, -5.873325034409320e-16, 3.537730662242189e-16, 9.732432705076716e-16, -1.651907642694459e-15, -1.651907642694459e-15, -1.575834409654842e-15, 3.995705662465235e-15, -2.194894417668184e-15, 1.519465630411868e-15, 2.957244493479286e-16, -1.900305253184146e-16, -6.749179928144313e-16, 5.411584526150501e-17, -3.209734151336314e-16, -3.209734151336314e-16, 4.405113831614258e-16, 4.405113831614258e-16, -1.611288596491270e-16, -1.611288596491270e-16, -1.611288596491270e-16, -1.611288596491270e-16, -2.255943209992027e-16, -6.383431023664179e-16, 3.196910944383264e-16, 3.196910944383264e-16, -8.901467545602050e-16, -4.839202632946619e-16, -1.984111582724299e-16, -1.026672521085718e-15, -1.030868729734263e-15, -6.099313521639494e-16, -1.030868729734263e-15, -6.099313521639494e-16, -1.358194274388877e-16, 4.213326689094767e-17, 6.464080011350463e-17, 6.464080011350463e-17, -3.465306219461668e-17, -3.465306219461668e-17, -1.260378000947024e-16, -1.260378000947024e-16, -1.764336083702305e-16, -2.697832006018295e-16, -1.764336083702305e-16, -3.631327928334285e-16, -2.211861671813199e-16, -4.959917563206364e-17, -8.196451740439916e-17, 6.517318840174626e-17, -1.876723181955197e-16, -1.876723181955197e-16, 3.444604695972506e-17, 3.444604695972506e-17, -2.235345870297753e-16, -3.621912429757388e-16, -6.947732618345618e-16, -4.174599499426347e-16, 1.115586002731797e-15, 2.262091297875238e-15, -1.257972144974454e-15, -3.589948307410560e-15, -9.108958819157438e-16, 6.529723285280262e-16, -2.002042715553492e-16, -5.308874266106573e-16, 1.051752028762299e-15, -1.682421171794883e-15, 1.403609619099052e-16, -7.710301049424887e-16, 2.097919431436611e-18, 2.097919431436611e-18, -1.239423785765722e-17, -1.239423785765722e-17, 1.892934207348605e-17, 1.892934207348605e-17, 4.312818903833499e-17, -1.733432756256119e-18, -1.093474816115551e-17, -1.093474816115551e-17, -2.437793528769776e-18, -2.437793528769776e-18, -4.308738684298225e-17, -6.387100614656084e-17, -6.055926912598765e-17, -6.055926912598765e-17, -2.856585022995007e-17, -3.304925912764106e-16, -6.113661515398591e-17, 1.109739029584207e-16, -7.184675015371947e-17, -7.415002814972332e-18, -7.184675015371947e-17, 5.701674452377481e-17, -3.962485102852104e-17, 2.609528178394275e-17, 1.497281709352488e-16, 1.497281709352488e-16, -2.426720956618559e-16, 1.432518934532695e-17, 1.560330172471647e-16, 7.972270255339676e-18, -2.432506644971828e-17, -3.164578774295023e-16, -1.692828941495021e-16, -1.692828941495021e-16, -3.729611300574460e-16, -2.908895014790842e-16, -1.010629179550052e-15, 7.569403532496446e-17, -7.776397569500838e-17, 2.663329349826290e-16, -2.203555928034413e-16, -2.138787697643641e-17, -3.382208896122623e-16, 3.123391328670160e-18, 4.975760008919047e-17, -2.915866808517421e-16, -8.048906056704085e-16, -1.943157168172741e-15, 1.321981757645843e-15, -1.528591346824517e-15, -2.218504904593774e-15, -2.218504904593774e-15, -4.179463049788544e-16, -2.766213876176212e-16, 5.715541879517310e-16, -8.725564773653099e-16, -5.961737025849426e-16, 1.569992295390612e-15]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_lta_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_lta", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_lta_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_lta", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_lta_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_lta", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-8.825653501180421e-03, -8.826097062349301e-03, -8.825688418820398e-03, -8.826122348850914e-03, -8.825770717500472e-03, -8.826248504671497e-03, -8.825381371391269e-03, -8.825750721317620e-03, -8.825677450688282e-03, -8.825927700372278e-03, -8.825677450688282e-03, -8.825927700372278e-03, -4.368719430726963e-02, -4.368552985370020e-02, -4.368983007295271e-02, -4.368728242210325e-02, -4.374133380067529e-02, -4.375010645386843e-02, -4.371890581180044e-02, -4.371836501812053e-02, -4.368832299610337e-02, -4.376403625548839e-02, -4.368832299610337e-02, -4.376403625548839e-02, -1.947612752765362e-01, -1.951175127892754e-01, -1.947383111284524e-01, -1.950791720327653e-01, -1.941145729950659e-01, -1.945649533759951e-01, -1.952064871185064e-01, -1.956175718555852e-01, -1.943532259672355e-01, -1.959427107791893e-01, -1.943532259672355e-01, -1.959427107791893e-01, -6.917158552360759e-01, -6.886924233449989e-01, -6.892282541278766e-01, -6.853131416648525e-01, -1.493104009355146e-01, -1.503377294874711e-01, -7.490162283115531e-01, -7.591265170220074e-01, -6.636071115195837e-01, -8.737593579749481e-01, -6.636071115195836e-01, -8.737593579749485e-01, -5.154592196978896e+00, -4.972214710529212e+00, -5.030258663517925e+00, -4.833061689508185e+00, -1.670436840511682e+00, -1.624872008692320e+00, -6.779657220648633e+00, -6.855325126727631e+00, -5.491577534036521e+00, -8.126548419141313e+00, -5.491577534036521e+00, -8.126548419141308e+00, -3.904833208178515e-02, -3.905808768674141e-02, -3.910516643946533e-02, -3.911303078763190e-02, -3.905234587763502e-02, -3.906059614515696e-02, -3.910107196765743e-02, -3.911046855638734e-02, -3.907673582902992e-02, -3.908552474363898e-02, -3.907673582902992e-02, -3.908552474363898e-02, -7.442235931169180e-02, -7.448964483726168e-02, -7.450276844574341e-02, -7.456727029734897e-02, -7.431802756746332e-02, -7.441277230070203e-02, -7.439669182371135e-02, -7.449140187778079e-02, -7.455198335108766e-02, -7.454888404786723e-02, -7.455198335108766e-02, -7.454888404786723e-02, -2.848878601385467e-01, -2.867838709751237e-01, -2.983117889440349e-01, -3.006381190750377e-01, -2.872465075810230e-01, -2.880892893725020e-01, -2.986044689027176e-01, -2.974967446089559e-01, -2.842889623987440e-01, -2.904954218715150e-01, -2.842889623987440e-01, -2.904954218715150e-01, -9.169960024447998e-01, -9.115387431430629e-01, -6.259011907810508e-01, -6.234318462053805e-01, -9.732386719328242e-01, -9.496894791862239e-01, -9.036742204137985e-02, -9.042225015283682e-02, -8.747798291207682e-01, -8.784737793996051e-01, -8.747798291207680e-01, -8.784737793996054e-01, -7.802893909415903e+00, -7.561730433761389e+00, -6.901732534134960e+00, -6.754032018647525e+00, -1.001047553625182e+01, -9.762596231092905e+00, -1.242170655014238e+00, -1.253061958549141e+00, -8.364431430271825e+00, -7.762629566134273e+00, -8.364431430271823e+00, -7.762629566134274e+00, -4.489416522429189e-01, -4.498106579876370e-01, -3.934660040352946e-01, -3.936148929236442e-01, -4.081145706434526e-01, -4.085223973825549e-01, -4.236258955012464e-01, -4.239558116980937e-01, -4.154047438338550e-01, -4.157761690763015e-01, -4.154047438338550e-01, -4.157761690763015e-01, -4.496241600381664e-01, -4.508027849689651e-01, -3.265469179740883e-01, -3.260319004893440e-01, -3.367924015564915e-01, -3.365505662807546e-01, -3.569751540753199e-01, -3.563447885275995e-01, -3.449763063752880e-01, -3.445188265007398e-01, -3.449763063752880e-01, -3.445188265007398e-01, -2.730261016625218e-01, -2.761451934342891e-01, -5.392832630466614e-01, -5.374844771782149e-01, -4.841548914909551e-01, -4.826136646324110e-01, -4.184703929121858e-01, -4.164118224052042e-01, -4.528214489480342e-01, -4.536179246802989e-01, -4.528214489480343e-01, -4.536179246802991e-01, -3.378715705525622e-01, -3.386061254485991e-01, -1.698131301706385e+00, -1.687795483790426e+00, -1.400459570697288e+00, -1.378683288601423e+00, -4.552367849678366e-01, -4.652463392979516e-01, -1.118215622388908e+00, -1.108355535106722e+00, -1.118215622388907e+00, -1.108355535106722e+00, -3.866278070762065e+00, -3.779065134082802e+00, -1.538514643248637e+01, -1.535731804912290e+01, -1.112470607825794e+01, -1.078287952829499e+01, -1.164166909725879e+00, -1.166369004963432e+00, -9.500675292502411e+00, -8.208520981047574e+00, -9.500675292502416e+00, -8.208520981047581e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
