
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_pkzb_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_pkzb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.989526322479380e+01, -1.989531538400652e+01, -1.989558328620928e+01, -1.989472885811113e+01, -1.989529043237104e+01, -1.989529043237104e+01, -3.236755385580287e+00, -3.236747953451445e+00, -3.236646056746999e+00, -3.236942770108409e+00, -3.236768717525566e+00, -3.720215843133428e+00, -6.583260235365177e-01, -8.053527316524575e-01, -8.065624746293416e-01, -8.026207139412479e-01, -8.053095624127624e-01, -8.053095624127624e-01, -2.275882428100200e-01, -2.284528242607290e-01, -8.635258767608907e-01, -2.040729272462156e-01, -2.278793632401524e-01, -2.278793632401524e-01, -1.705007940526988e-02, -1.785909839411885e-02, -7.243171916801648e-02, -8.179633155391311e-03, -1.767298739135318e-02, -1.767298739135318e-02, -5.053871874512941e+00, -5.053553340199393e+00, -5.053831890895722e+00, -4.861275271368029e+00, -5.053717724829665e+00, -5.053717724829665e+00, -1.831073034917374e+00, -1.841121509964812e+00, -1.827227595709843e+00, -1.834876664708494e+00, -1.843024495554140e+00, -2.153301227664550e+00, -5.941183680231868e-01, -6.212247424725140e-01, -5.768253601120952e-01, -5.811605520019171e-01, -6.081585340992651e-01, -5.596896963077562e-01, -1.554595022639151e-01, -2.549282749299249e-01, -1.527093681686933e-01, -1.932384157950576e+00, -1.755487169834624e-01, -1.755487169834624e-01, -7.890784526164226e-03, -9.017876230358971e-03, -6.758943037015290e-03, -1.004674988548063e-01, -8.216683902746573e-03, -8.216684285781485e-03, -5.679475160156431e-01, -5.691364104290876e-01, -5.598056499636015e-01, -5.683734094237327e-01, -5.685394921245733e-01, -5.685394921245733e-01, -5.511859392195386e-01, -5.178468304643562e-01, -5.262799028428486e-01, -5.349117086510755e-01, -5.304395946332308e-01, -4.982488246107739e-01, -6.579225086823862e-01, -2.418166916421963e-01, -3.277372878282379e-01, -3.281930979240640e-01, -3.511130766156009e-01, -3.511130766156010e-01, -4.216766882554536e-01, -6.713022616166130e-02, -9.061501268423842e-02, -3.531174350865734e-01, -1.276149868794984e-01, -1.288584421869369e-01, -1.998265906201671e-02, -2.468940288522227e-03, -4.690086739657469e-03, -1.229494040016966e-01, -6.983095322511198e-03, -6.983095322511188e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_pkzb_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_pkzb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.676593659555149e+01, -2.676600647211877e+01, -2.676636559762537e+01, -2.676522088797073e+01, -2.676597304346286e+01, -2.676597304346286e+01, -4.212806776945245e+00, -4.212895190645591e+00, -4.215689830297582e+00, -4.214947947851248e+00, -4.212851362483953e+00, -3.597876415486107e+00, -7.001714554344918e-01, -5.899231253076107e-01, -5.681647228637989e-01, -5.743234922940126e-01, -5.905676339431909e-01, -5.905676339431909e-01, -1.598110840234819e-01, -1.621579030519342e-01, -7.417217059954953e-01, -1.936012720867974e-01, -1.604830723136021e-01, -1.604830723136021e-01, -2.273124037799877e-02, -2.380938014787930e-02, -9.553658343896665e-02, -1.090615773161104e-02, -2.356125265291437e-02, -2.356125265291437e-02, -6.267841785467787e+00, -6.271094736160356e+00, -6.268196227597664e+00, -6.533386942657311e+00, -6.269481616542524e+00, -6.269481616542524e+00, -2.316426278098892e+00, -2.344179829795006e+00, -2.304547981665102e+00, -2.326702060321344e+00, -2.350277325367373e+00, -1.973361552694663e+00, -6.448409184390266e-01, -7.431478091081166e-01, -5.896117863553739e-01, -6.502360677393053e-01, -6.850428384479709e-01, -7.511053917687516e-01, -1.848249283720465e-01, -1.824069317556723e-01, -1.792962253154067e-01, -2.184280897394431e+00, -1.744517414902746e-01, -1.744517414902746e-01, -1.052103258582771e-02, -1.202379425576774e-02, -9.011886197108800e-03, -1.315354077029205e-01, -1.095556174172771e-02, -1.095554754072602e-02, -7.445363096046314e-01, -7.334187888946280e-01, -7.494438985521964e-01, -7.405085785978749e-01, -7.389682677489119e-01, -7.389682677489119e-01, -7.181759191237141e-01, -5.533447270687669e-01, -6.036727188474011e-01, -6.492008480216551e-01, -6.261396197324604e-01, -6.702467472435721e-01, -7.675030261358416e-01, -2.216847056623440e-01, -2.451917844264380e-01, -4.169107808148995e-01, -2.945499286329086e-01, -2.945499286329088e-01, -5.520492005738451e-01, -8.883737998543281e-02, -1.182509059604077e-01, -3.450886410063230e-01, -1.561463780523007e-01, -1.538396534586641e-01, -2.664164597658022e-02, -3.291920315416317e-03, -6.253445617649108e-03, -1.468673911566064e-01, -9.310774126291960e-03, -9.310774126291945e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_pkzb_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_pkzb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.158557779870247e-09, -6.158537526023678e-09, -6.158399467032104e-09, -6.158736117004115e-09, -6.158547445167278e-09, -6.158547445167278e-09, -4.422613630902572e-06, -4.424148736295511e-06, -4.469532785761162e-06, -4.450572531190297e-06, -4.422955641013621e-06, -1.185612421165268e-05, 2.181463057991453e-03, -7.632786597996951e-03, -7.942679043335179e-03, -7.950468106052315e-03, -7.624336148474398e-03, -7.624336148474398e-03, -1.257738998709523e+00, -1.222871803792061e+00, 2.432076867172743e-03, -1.054042745913026e+00, -1.246907463986026e+00, -1.246907463986026e+00, -1.302372591382013e-01, -1.412930636960914e-01, -4.845191609427857e-01, -6.305284279395586e-03, -1.480033715071737e-01, -1.480033715071735e-01, -2.254159742311932e-06, -2.251818492165490e-06, -2.253908856298702e-06, -1.876324959358611e-06, -2.252974464712096e-06, -2.252974464712096e-06, -2.792229386505111e-05, -3.036603110606747e-05, -2.672320341675973e-05, -2.880337973052683e-05, -3.100137157066466e-05, -1.137623846388299e-04, -1.525137522016468e-02, -1.065993185690895e-02, -1.890242941260751e-02, -1.580399263422545e-02, -1.302107204624383e-02, -8.410362693124077e-03, 1.539261761097094e+00, -7.927013701662230e-01, 1.869804547892129e+00, -1.269416452756667e-04, -1.617509891420512e+00, -1.617509891420512e+00, 1.236715965067310e-02, -1.086786868923541e-02, -4.757500574946198e-02, 7.352014774327497e-01, 1.381417006560404e-02, -1.233930598748586e-02, -1.237643150410874e-02, -1.281643328868880e-02, -1.178335528413584e-02, -1.253669176461488e-02, -1.259766201836451e-02, -1.259766201836451e-02, -1.417205661440777e-02, -2.712008223266170e-02, -2.245950437111177e-02, -1.882111620620470e-02, -2.059792553355422e-02, -1.510397406330784e-02, -8.906069686728017e-03, 2.996656394841918e-01, -2.716167715811543e-01, -2.898388455110613e-02, -1.801415245132182e-01, -1.801415245132182e-01, -1.671553620333738e-02, -3.787954150577773e-01, -5.556600881421860e-01, -1.438938551601926e-01, 2.371151534669635e+00, -1.513022625571914e+00, -4.365621974663302e-02, -9.469753424803251e-04, -9.419160075312495e-03, -1.812424454103656e+00, -1.485317135171842e-02, -1.485317135171834e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_pkzb_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_pkzb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.400806757188284e-04, 1.400839684151626e-04, 1.400980704543597e-04, 1.400445336676286e-04, 1.400824122834110e-04, 1.400824122834110e-04, -7.744222215695494e-04, -7.738571807081240e-04, -7.568764267661637e-04, -7.633809976988956e-04, -7.742616786437039e-04, 2.402765179054177e-03, -1.660127614850771e-02, 1.216253806141436e-02, 1.189916939228102e-02, 1.209220983657760e-02, 1.216678593738608e-02, 1.216678593738608e-02, 4.204052572765291e-02, 4.226908234120737e-02, -1.781979387927121e-02, 1.506098807293773e-02, 4.210626353050724e-02, 4.210626353050724e-02, 9.128577891753963e-07, 1.138031932140920e-06, 2.596273836457979e-04, 4.883452204909435e-09, 1.155196697189598e-06, 1.155196697189596e-06, 1.288880064929526e-03, 1.287412802891929e-03, 1.288718859853795e-03, 7.495161631355661e-04, 1.288142410141380e-03, 1.288142410141380e-03, -2.400460315933717e-03, -2.181193078836624e-03, -2.499651554797651e-03, -2.321289270685866e-03, -2.127026329927315e-03, 4.303427298834469e-03, 1.349244912458622e-02, 1.122776201238896e-02, 1.479562316682401e-02, 1.328277039312154e-02, 1.257946573214489e-02, 2.305354992626122e-03, -1.344921987138363e-02, 2.875978339764298e-02, -1.577987981544643e-02, 3.940239832693149e-03, 1.426950694636383e-02, 1.426950694636383e-02, -1.156294286905353e-08, 1.127866613827926e-08, 2.078773603949718e-08, -1.486011596727388e-03, -1.458347558906890e-08, 9.686948789028220e-09, 1.004402020274745e-02, 1.048813517229510e-02, 8.446517399322687e-03, 1.020718157576053e-02, 1.026894305821449e-02, 1.026894305821449e-02, 1.052310487994259e-02, 1.575655298108309e-02, 1.417080600934132e-02, 1.270473991080457e-02, 1.344958684807087e-02, 4.872816523590535e-03, 1.105075761482867e-02, -5.907618653873010e-02, 2.999965430046664e-02, -1.265539882189408e-02, 2.751554542647655e-02, 2.751554542647653e-02, -4.799437732437255e-03, 1.615451560005422e-04, 5.843056842172481e-04, 2.511294805333500e-02, -1.097083546655611e-02, 4.751224715552281e-03, 4.926592499054731e-07, 2.017163709890716e-11, 1.375311208892049e-09, 4.942411413943859e-03, 7.157800423929788e-09, 7.157800423929717e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
