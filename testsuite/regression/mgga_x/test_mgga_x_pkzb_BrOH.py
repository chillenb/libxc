
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_pkzb_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_pkzb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.095505705078709e+01, -2.095508618782468e+01, -2.095529703937350e+01, -2.095481921823209e+01, -2.095507172900518e+01, -2.095507172900518e+01, -3.399239432571476e+00, -3.399230320542373e+00, -3.399169216723366e+00, -3.400756601915726e+00, -3.399244762630955e+00, -3.399244762630955e+00, -6.715834684863792e-01, -6.714908953463503e-01, -6.718249949073433e-01, -6.765916483476235e-01, -6.715460629471943e-01, -6.715460629471943e-01, -2.191391415721996e-01, -2.190167129884104e-01, -8.313774974602909e-01, -1.842108497856939e-01, -2.190282078433531e-01, -2.190282078433531e-01, -1.705005592192415e-02, -1.785906081453078e-02, -7.233318945331019e-02, -8.179624943336605e-03, -1.767295529385345e-02, -1.767295529385345e-02, -5.052496585515442e+00, -5.052194654217694e+00, -5.052475777445301e+00, -5.052240628371420e+00, -5.052327449164016e+00, -5.052327449164016e+00, -2.096835181674798e+00, -2.108125754109401e+00, -2.100645213899088e+00, -2.109496939345918e+00, -2.099812558695230e+00, -2.099812558695230e+00, -5.676619999569221e-01, -5.955899149966100e-01, -5.376001854352206e-01, -5.440942993129003e-01, -5.872475342934231e-01, -5.872475342934231e-01, -1.536058734444169e-01, -2.481696471033838e-01, -1.508819060816684e-01, -1.804011073784014e+00, -1.698091292191380e-01, -1.698091292191380e-01, -7.890781354253848e-03, -9.017865602633339e-03, -6.758940051465519e-03, -9.934881686140290e-02, -8.216670903469815e-03, -8.216670903469815e-03, -5.651112760790455e-01, -5.663305163320567e-01, -5.658870392321819e-01, -5.655470062159899e-01, -5.657156872355301e-01, -5.657156872355301e-01, -5.456901086504490e-01, -5.141981349546257e-01, -5.217842196555023e-01, -5.298490388201837e-01, -5.253913852513434e-01, -5.253913852513434e-01, -6.239840029546448e-01, -2.894752874465043e-01, -3.151532303031456e-01, -3.588791505076226e-01, -3.344238865202302e-01, -3.344238865202303e-01, -4.623460333967947e-01, -6.709783554007152e-02, -9.029694694017658e-02, -3.299978392710172e-01, -1.267837545456020e-01, -1.267837545456020e-01, -1.998193791134496e-02, -2.468940237742946e-03, -4.690086561115381e-03, -1.207849590948935e-01, -6.983086184667276e-03, -6.983086184667266e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_pkzb_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_pkzb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.533068910576306e+01, -2.533078968927693e+01, -2.533121502373488e+01, -2.532956745070853e+01, -2.533074235749608e+01, -2.533074235749608e+01, -4.099181550266873e+00, -4.099224433471766e+00, -4.100529477747545e+00, -4.098481474473075e+00, -4.099224956684086e+00, -4.099224956684086e+00, -7.573941679565105e-01, -7.559133021225003e-01, -7.124883789128660e-01, -7.159088831827078e-01, -7.568573096053811e-01, -7.568573096053811e-01, -1.612866956946761e-01, -1.652727065275691e-01, -8.636947500494161e-01, -1.334902469316287e-01, -1.624660835261536e-01, -1.624660835261536e-01, -2.273103920953285e-02, -2.380905822358724e-02, -9.473392099165029e-02, -1.090608892405215e-02, -2.356097776363447e-02, -2.356097776363447e-02, -6.269956082946978e+00, -6.273182153133131e+00, -6.270280907855716e+00, -6.272789682481901e+00, -6.271618242693091e+00, -6.271618242693091e+00, -2.008226501487648e+00, -2.028562913747271e+00, -1.987960772577087e+00, -2.003744687631778e+00, -2.048249914098504e+00, -2.048249914098504e+00, -6.869563656037933e-01, -7.805833778024293e-01, -6.516102452567730e-01, -7.056877436752576e-01, -7.181621702930270e-01, -7.181621702930270e-01, -1.585547918785671e-01, -1.709285109514260e-01, -1.526387313140813e-01, -2.371409765680748e+00, -1.484032806041373e-01, -1.484032806041373e-01, -1.052099105958419e-02, -1.202370283644913e-02, -9.011860361458143e-03, -1.213343791191910e-01, -1.095543571485274e-02, -1.095543571485274e-02, -7.484269237360883e-01, -7.374324888898228e-01, -7.414033776140186e-01, -7.444492089726630e-01, -7.429284937017779e-01, -7.429284937017779e-01, -7.256844183397518e-01, -5.591359034627745e-01, -6.108784298679673e-01, -6.570473807889641e-01, -6.341342311956739e-01, -6.341342311956740e-01, -8.173213926596242e-01, -2.016327025092333e-01, -2.541982472122766e-01, -3.875111143682859e-01, -3.155169198932796e-01, -3.155169198932797e-01, -5.048682083752726e-01, -8.857005555159045e-02, -1.157518571072146e-01, -3.815132039956008e-01, -1.404558200131902e-01, -1.404558200131901e-01, -2.663558947829774e-02, -3.291919938952047e-03, -6.253444074522867e-03, -1.329772924894551e-01, -9.310698554671216e-03, -9.310698554671202e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_pkzb_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_pkzb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.992260277933495e-09, -7.992175262708232e-09, -7.991786786181158e-09, -7.993182004485864e-09, -7.992215484374455e-09, -7.992215484374455e-09, -9.113478635574729e-06, -9.114002806225973e-06, -9.129914736712476e-06, -9.142649181723269e-06, -9.113309786819693e-06, -9.113309786819693e-06, -4.392114578880161e-03, -4.424266022068685e-03, -5.514032913509233e-03, -5.848946386214242e-03, -4.404399227109889e-03, -4.404399227109889e-03, -1.322608451955035e+00, -1.280324466387222e+00, 7.633843390981211e-04, -2.259991635357300e+00, -1.310316756937743e+00, -1.310316756937743e+00, -1.438448129683600e-01, -1.602346819917974e-01, -9.467387150293779e-01, -3.665387434225866e-02, -1.650391852870107e-01, -1.650391852870107e-01, -2.252168515422776e-06, -2.249848379216059e-06, -2.251945111243915e-06, -2.250140067570761e-06, -2.250959978556213e-06, -2.250959978556213e-06, -1.149363473047958e-04, -1.123700765766957e-04, -1.164579755249677e-04, -1.144378730447700e-04, -1.112325295759572e-04, -1.112325295759572e-04, -1.339343979762557e-02, -8.950820919618938e-03, -1.539900367588090e-02, -1.209324728185576e-02, -1.172732664556534e-02, -1.172732664556534e-02, -2.042117877511131e+00, -8.892712601819921e-01, -2.412473457307972e+00, -9.382378930627760e-05, -2.563155977817778e+00, -2.563155977817778e+00, -2.771601855127658e-02, -4.348663947932447e-02, -8.697827575947026e-02, -2.395592457447231e+00, -7.309719811643799e-02, -7.309719811643771e-02, -1.211172107064096e-02, -1.256584471707083e-02, -1.240275330770904e-02, -1.227704198278029e-02, -1.233982705572518e-02, -1.233982705572518e-02, -1.356105198517520e-02, -2.677794509085553e-02, -2.198130292810268e-02, -1.825473704773441e-02, -2.004238496087296e-02, -2.004238496087295e-02, -7.134849167201810e-03, -4.745870976949317e-01, -2.770434717075020e-01, -1.013220678301164e-01, -1.749771462460672e-01, -1.749771462460673e-01, -3.820122253637941e-02, -5.585536701913882e-01, -1.238739837973058e+00, -1.230278776524540e-01, -2.962042267494855e+00, -2.962042267494861e+00, -2.355986248421037e-01, -7.753037298595884e-03, -1.454654903940368e-02, -3.724254987226584e+00, -9.441210090627437e-02, -9.441210090627444e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_pkzb_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_pkzb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_pkzb_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_pkzb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [3.207662689684453e-04, 3.207645192649500e-04, 3.207613873163366e-04, 3.207902390502829e-04, 3.207653034102296e-04, 3.207653034102296e-04, 1.026023264641836e-03, 1.026256713669361e-03, 1.033857881157051e-03, 1.040027409435660e-03, 1.026023840338194e-03, 1.026023840338194e-03, -8.335863939122769e-04, -7.899427790752951e-04, 9.034391522788333e-04, 2.168154387147918e-03, -8.162165964084640e-04, -8.162165964084640e-04, 4.116349260850943e-02, 4.073778389225088e-02, -1.236842691342322e-02, 2.276948178100965e-02, 4.101965003761034e-02, 4.101965003761034e-02, 1.001290856341317e-06, 1.279249779560342e-06, 4.762151176690419e-04, 2.125254843097718e-08, 1.278403300218743e-06, 1.278403300218743e-06, 1.285817597269106e-03, 1.284383241620494e-03, 1.285698694776742e-03, 1.284581818248091e-03, 1.285044411003631e-03, 1.285044411003631e-03, 3.988479743019484e-03, 3.999924989602477e-03, 4.047765410015886e-03, 4.058137208740382e-03, 3.918316521734456e-03, 3.918316521734456e-03, 9.276890681907296e-03, 6.751889478648236e-03, 7.927062873309087e-03, 5.793401130231501e-03, 9.362005438460422e-03, 9.362005438460422e-03, 1.055078617391303e-02, 3.084354511702065e-02, 1.195343645714916e-02, 1.495129070540192e-03, 2.069446784937256e-02, 2.069446784937256e-02, 1.768174013206969e-08, 3.818887317969766e-08, 3.616801633773479e-08, 2.643444826238260e-03, 4.254755824794714e-08, 4.254755824794697e-08, 9.464477206428032e-03, 9.938831340471429e-03, 9.769979573384069e-03, 9.638549759632176e-03, 9.704194098842607e-03, 9.704194098842607e-03, 9.312619491550217e-03, 1.517008677781378e-02, 1.334938325434253e-02, 1.169214014268978e-02, 1.248030326744844e-02, 1.248030326744844e-02, 5.684717213499616e-03, 3.168838872122239e-02, 2.815943122852969e-02, 1.654556512513106e-02, 2.336023982441162e-02, 2.336023982441161e-02, 1.457501295653440e-02, 2.306808659569361e-04, 1.196227921861196e-03, 1.545905436893392e-02, 8.492328854157476e-03, 8.492328854157495e-03, 2.049494761661008e-06, 7.220231671004081e-11, 2.054001473505284e-09, 9.183277139614665e-03, 3.239618524135538e-08, 3.239618524135527e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
