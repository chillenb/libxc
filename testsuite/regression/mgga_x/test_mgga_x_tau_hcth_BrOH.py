
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_tau_hcth_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tau_hcth", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.116932444096169e+01, -2.116938063798368e+01, -2.116966338969471e+01, -2.116874262938227e+01, -2.116935380833318e+01, -2.116935380833318e+01, -3.413310876456202e+00, -3.413332577995979e+00, -3.414088851971683e+00, -3.413805878478107e+00, -3.413334847009911e+00, -3.413334847009911e+00, -6.510267905376752e-01, -6.505488485151352e-01, -6.435300401571823e-01, -6.468747595042458e-01, -6.508497655451266e-01, -6.508497655451266e-01, -2.019668093517087e-01, -2.009953736500070e-01, -7.814229693932105e-01, -2.366948274781362e-01, -2.016132418589500e-01, -2.016132418589500e-01, -3.614537780955273e-02, -3.783547706986675e-02, -1.424229805785437e-01, -1.743385776560012e-02, -3.744171368337094e-02, -3.744171368337093e-02, -5.178646716987584e+00, -5.180201311805737e+00, -5.178806766984700e+00, -5.180015459095038e+00, -5.179440789018667e+00, -5.179440789018667e+00, -1.944349350449906e+00, -1.958254793243992e+00, -1.942030979514767e+00, -1.952800980815997e+00, -1.957171439050834e+00, -1.957171439050834e+00, -5.729062279484978e-01, -6.366957695773381e-01, -5.421289052521411e-01, -5.761231250695704e-01, -5.963950186654680e-01, -5.963950186654680e-01, -2.405938255130824e-01, -2.597990959218997e-01, -2.330712123275787e-01, -1.936896750510274e+00, -2.321828911935129e-01, -2.321828911935129e-01, -1.681911057762831e-02, -1.921421113101791e-02, -1.440229801883294e-02, -1.822525446352874e-01, -1.750687405391294e-02, -1.750687405391294e-02, -6.120817066840376e-01, -6.027931362630494e-01, -6.060068348646459e-01, -6.085825049218804e-01, -6.072847666202497e-01, -6.072847666202497e-01, -5.934885092726603e-01, -4.984429461863794e-01, -5.196564112451291e-01, -5.427602498723862e-01, -5.303529166840988e-01, -5.303529166840988e-01, -6.667633723671186e-01, -2.708240727997488e-01, -2.860569095960946e-01, -3.437551064081892e-01, -3.087718210844288e-01, -3.087718210844287e-01, -4.462659885507976e-01, -1.343869262904726e-01, -1.714060263792321e-01, -3.249539487682040e-01, -2.068827100311117e-01, -2.068827100311116e-01, -4.230834030335322e-02, -5.268164864971456e-03, -1.000387695744244e-02, -1.968694075877547e-01, -1.488160461351505e-02, -1.488160461351502e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_tau_hcth_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tau_hcth", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.868696674774483e+01, -2.868708834178603e+01, -2.868758954123057e+01, -2.868559786522026e+01, -2.868703123425378e+01, -2.868703123425378e+01, -4.721128018160376e+00, -4.721161929193330e+00, -4.722214161734199e+00, -4.720395481014791e+00, -4.721171409942911e+00, -4.721171409942911e+00, -8.236687432353467e-01, -8.200821292953709e-01, -7.077397132092532e-01, -7.253314016535712e-01, -8.223831912047519e-01, -8.223831912047519e-01, -1.187243037055527e-01, -1.319550533089360e-01, -1.035337946654336e+00, -1.902148014376191e-02, -1.227324327130817e-01, -1.227324327130817e-01, -4.755053991472265e-02, -4.970700461512043e-02, -1.584235750724259e-01, -2.318542748259602e-02, -4.919107386258004e-02, -4.919107386258003e-02, -7.121538898995595e+00, -7.125354778683273e+00, -7.121928791127775e+00, -7.124896166806900e+00, -7.123501058973100e+00, -7.123501058973100e+00, -2.347520488923852e+00, -2.378933828565670e+00, -2.321605658523662e+00, -2.347327482550582e+00, -2.400619496172943e+00, -2.400619496172943e+00, -7.843770479682989e-01, -8.731675515145079e-01, -7.479588835673681e-01, -7.952113769180433e-01, -8.166616043992364e-01, -8.166616043992364e-01, -1.162288601060953e-01, -2.236286197711607e-02, -1.046572813630132e-01, -2.654595109973155e+00, -4.753993850673773e-02, -4.753993850673773e-02, -2.237025389857095e-02, -2.553644052961708e-02, -1.914428021860133e-02, -1.641795707920713e-01, -2.326665367203792e-02, -2.326665367203795e-02, -8.246445853506785e-01, -8.254249320472533e-01, -8.257296511296841e-01, -8.254959178101337e-01, -8.256605737115101e-01, -8.256605737115101e-01, -7.969947272246130e-01, -6.410494618877152e-01, -6.916309577409242e-01, -7.452141727194880e-01, -7.183215443182143e-01, -7.183215443182143e-01, -9.153972300060149e-01, -1.112674276924921e-01, -2.455072382951225e-01, -4.489903474071443e-01, -3.575945684437811e-01, -3.575945684437809e-01, -5.869156701860521e-01, -1.559386265984323e-01, -1.729173067991327e-01, -4.410650479955162e-01, -1.228227583558296e-01, -1.228227583558299e-01, -5.551536406754637e-02, -7.021998897611429e-03, -1.332437451170352e-02, -1.159028976933524e-01, -1.978587584921293e-02, -1.978587584921278e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_tau_hcth_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tau_hcth", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.033903290598562e-09, 1.034062550038727e-09, 1.034493203469075e-09, 1.031888775305750e-09, 1.033989644765523e-09, 1.033989644765523e-09, 1.875425065836945e-06, 1.875880460262757e-06, 1.885913261292270e-06, 1.833480273310613e-06, 1.875824517234182e-06, 1.875824517234182e-06, -1.167107316526119e-03, -1.243156032919379e-03, -3.485375397259286e-03, -3.154186648500988e-03, -1.194364648255957e-03, -1.194364648255957e-03, -9.678945613155778e-01, -8.867050583563438e-01, 8.819108262047395e-05, -3.905465734212056e+00, -9.433672530797783e-01, -9.433672530797783e-01, -2.861120431262816e+01, -2.869534040437693e+01, -1.212988664355530e+01, -2.022314354505831e+01, -2.980951287481455e+01, -2.980951287481453e+01, 8.818794060731853e-07, 8.950855041297461e-07, 8.831999262975899e-07, 8.934688349969481e-07, 8.886940821633824e-07, 8.886940821633824e-07, -4.419079591135481e-05, -4.333453941786379e-05, -4.607792645924909e-05, -4.537349140666548e-05, -4.118628251223302e-05, -4.118628251223302e-05, 1.952327498212875e-03, 9.299329684658969e-03, 3.063414671646988e-03, 1.072831011708578e-02, 2.395158940744281e-03, 2.395158940744281e-03, -5.924837352483065e+00, -1.090532692809193e+00, -6.700437380774645e+00, 1.078349535630126e-04, -5.473620769079939e+00, -5.473620769079939e+00, -2.145323627153163e+01, -2.150076819953401e+01, -6.153748350060367e+01, -1.172734306681597e+01, -3.175790057062025e+01, -3.175790057063777e+01, 1.438703497657751e-02, 1.218540779150143e-02, 1.302418773680467e-02, 1.363469449458686e-02, 1.333382310380252e-02, 1.333382310380252e-02, 1.704299879344075e-02, -8.374780800703063e-03, -1.786317056126763e-03, 6.388259410397367e-03, 2.180530615413104e-03, 2.180530615413115e-03, 7.392693668957726e-03, -3.996714629540613e-01, -1.594582282319066e-01, -2.012101937302191e-02, -6.880829280723860e-02, -6.880829280723860e-02, -8.147317086951157e-03, -1.025701583347498e+01, -1.018941904567046e+01, -2.788881076080830e-03, -1.048539920133727e+01, -1.048539920133730e+01, -2.150560157584128e+01, -3.696002647052745e+01, -3.182844806331475e+01, -1.286115490644358e+01, -4.637599344955188e+01, -4.637599344954000e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_tau_hcth_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tau_hcth", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([3.099759485567451e-05, 3.099204294429048e-05, 3.097155925893917e-05, 3.106214812586628e-05, 3.099463462010362e-05, 3.099463462010362e-05, 3.980043641197288e-04, 3.980535043744540e-04, 3.999194499388744e-04, 4.056559589533860e-04, 3.979747939643258e-04, 3.979747939643258e-04, -9.397058156550518e-04, -9.805150679905016e-04, -2.350818723387066e-03, -2.105842507534473e-03, -9.540927508597383e-04, -9.540927508597383e-04, -2.769368124635462e-02, -2.383932494322433e-02, -4.839408916499266e-04, -2.193411695294917e-02, -2.652575716469371e-02, -2.652575716469371e-02, -2.906781090296694e-06, -3.620015286313931e-06, -7.386858459056258e-04, -1.568071378467888e-08, -3.674722461027001e-06, -3.674722460865110e-06, -1.472266435802188e-05, -1.480314161174251e-05, -1.474544655362398e-05, -1.480781525706238e-05, -1.476209766082343e-05, -1.476209766082343e-05, 2.644460141157335e-03, 2.914614230601543e-03, 2.623446587099107e-03, 2.855314200417126e-03, 2.827636787081867e-03, 2.827636787081867e-03, 3.000446595210640e-03, -2.528683178440365e-04, 2.847893655542964e-03, -3.523819078089093e-04, 1.996303576604342e-03, 1.996303576604342e-03, -1.153620868509387e-02, -4.006948440701879e-02, -1.306781432791225e-02, -1.352631493096771e-04, -2.614660989999153e-02, -2.614660989999153e-02, -2.467038063798543e-08, -3.619706209992905e-08, -6.672743112799236e-08, -1.994412553748031e-03, -3.108702614929458e-08, -3.108702614446827e-08, 1.823239230100702e-04, 8.158569227755921e-04, 7.309416839697442e-04, 5.514445989966618e-04, 6.536572795433805e-04, 6.536572795433805e-04, -1.365318651909140e-05, 1.312600672662802e-02, 5.029892071099234e-03, 2.187636107436128e-04, 1.905810625653145e-03, 1.905810625653144e-03, -3.564261605069100e-04, -2.878771161302226e-02, -7.446661020640799e-03, 8.622202512169176e-03, 7.408823504749766e-03, 7.408823504749735e-03, 1.050299956193102e-02, -4.721603375306517e-04, -1.574643434152794e-03, 8.173411604446417e-03, -1.052339947031974e-02, -1.052339947031985e-02, -1.564621953555337e-06, -6.489245127977079e-11, -4.421817255726505e-09, -1.088822083525353e-02, -2.297836735816578e-08, -2.297836734388157e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
