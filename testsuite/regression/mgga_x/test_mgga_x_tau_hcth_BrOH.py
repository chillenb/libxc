
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_tau_hcth_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tau_hcth", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.195519364048440e+01, -2.195524703189044e+01, -2.195552446128550e+01, -2.195464938290716e+01, -2.195522146917566e+01, -2.195522146917566e+01, -3.572868061754620e+00, -3.572875876619861e+00, -3.573238633611316e+00, -3.573383669284244e+00, -3.572887226252272e+00, -3.474427252564459e+00, -6.848036435664924e-01, -7.241461842862017e-01, -7.366854741487018e-01, -7.270891997327722e-01, -7.239167534498580e-01, -7.239167534498580e-01, -2.083220967445702e-01, -2.077389124577805e-01, -8.207852383409818e-01, -2.752121644568829e-01, -2.081718989133587e-01, -2.081718989133587e-01, -3.615018789642471e-02, -3.784246143891725e-02, -1.439497513984173e-01, -1.744071245901838e-02, -3.744770071364838e-02, -3.744770071364836e-02, -5.178111916539182e+00, -5.179664412515721e+00, -5.178278525474553e+00, -5.350513116518650e+00, -5.178895707551373e+00, -5.178895707551373e+00, -2.008419884127278e+00, -2.022591948696235e+00, -2.002690834242304e+00, -2.013750963050302e+00, -2.025432105241629e+00, -1.979047941816849e+00, -5.762682398878300e-01, -6.244956461176555e-01, -5.484502810953251e-01, -5.695127265318810e-01, -5.973546425438149e-01, -6.193552453415886e-01, -9.981464248673520e-02, -2.683516990598586e-01, -9.853507443415176e-02, -1.900357299707030e+00, -2.460321664952655e-01, -2.460321664952655e-01, -4.843561974211420e-03, -1.922175887622301e-02, -1.440480887888861e-02, -6.211467306405162e-02, -5.043607720513717e-03, -1.751567802571881e-02, -6.089040734915543e-01, -6.002488387035653e-01, -6.133449838499837e-01, -6.056298126958605e-01, -6.044179757276577e-01, -6.044179757276577e-01, -5.873636651750214e-01, -4.996765722063543e-01, -5.202593725395714e-01, -5.414486832652797e-01, -5.301785642634144e-01, -5.503151164463319e-01, -6.545057831469565e-01, -2.373242762406719e-01, -2.935966749836261e-01, -3.603438890226408e-01, -3.162102155301881e-01, -3.162102155301881e-01, -4.659625746386099e-01, -1.350528075446689e-01, -1.746778159477775e-01, -3.308780315340755e-01, -8.101582368293533e-02, -2.157159933551312e-01, -4.240719267605395e-02, -5.268492571413677e-03, -1.000432006528121e-02, -2.059621631590037e-01, -1.488841007979355e-02, -1.488841007979352e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_tau_hcth_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tau_hcth", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.927970629728044e+01, -2.927977681355935e+01, -2.928014379472085e+01, -2.927898795933437e+01, -2.927974304795919e+01, -2.927974304795919e+01, -4.766111295405479e+00, -4.766122483252178e+00, -4.766629207800834e+00, -4.766813878755087e+00, -4.766137072176577e+00, -4.241044262542908e+00, -9.129623857217636e-01, -4.990773791594446e-01, -3.814202212447453e-01, -4.317244522778016e-01, -5.020159773480828e-01, -5.020159773480828e-01, -1.042664681893700e-01, -1.155603235771155e-01, -1.094127133605991e+00, -5.786232015455491e-02, -1.074958055165538e-01, -1.074958055165538e-01, -4.756966812651118e-02, -4.973476322649092e-02, -1.640431150271065e-01, -2.321282037862853e-02, -4.921486869228783e-02, -4.921486869228779e-02, -7.119376403006632e+00, -7.123242498142246e+00, -7.119798968959878e+00, -7.133437983919992e+00, -7.121327518787619e+00, -7.121327518787619e+00, -2.678718704433881e+00, -2.697713681728233e+00, -2.671036368946078e+00, -2.685862073358288e+00, -2.701525536147033e+00, -2.326599550795516e+00, -7.354972797825670e-01, -8.404880642272586e-01, -6.857382132113828e-01, -7.361986287750211e-01, -7.747315517028850e-01, -8.262590081440492e-01, -1.330796357040532e-01, -1.740341104159379e-02, -1.313730406931193e-01, -2.469025214933242e+00, -6.847223224371689e-02, -6.847223224371689e-02, -6.458082626944930e-03, -2.556659444152128e-02, -1.915431106880605e-02, -8.281875326560878e-02, -6.724810287354551e-03, -2.330182756975624e-02, -8.277935011231267e-01, -8.260908407244973e-01, -8.176246859897596e-01, -8.277654513637887e-01, -8.275862387228484e-01, -8.275862387228484e-01, -8.027466937207584e-01, -6.341920610533341e-01, -6.814041958877221e-01, -7.357144013227599e-01, -7.071133660101180e-01, -7.339864281540642e-01, -8.661464938190193e-01, -3.163641675154731e-01, -2.241550850406055e-01, -4.806171752642304e-01, -3.321298067212511e-01, -3.321298067212511e-01, -6.216070306899162e-01, -1.584357093507350e-01, -1.844070420922456e-01, -4.060736997877333e-01, -1.080169322682107e-01, -1.464026030330789e-01, -5.590841021728111e-02, -7.023309579406544e-03, -1.332614616420857e-02, -1.401351623668328e-01, -1.981306962272775e-02, -1.981306962272763e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_tau_hcth_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tau_hcth", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.025018482043927e-08, 1.025009777408107e-08, 1.024963499448440e-08, 1.025106315632314e-08, 1.025013952099642e-08, 1.025013952099642e-08, 1.287763079116585e-05, 1.287787150970943e-05, 1.288332992626086e-05, 1.287708658443714e-05, 1.287745258031540e-05, -5.060372179179548e-06, 9.237628370078783e-03, -5.054878520329758e-03, -6.065680957253326e-03, -5.696016321484314e-03, -5.031622496632008e-03, -5.031622496632008e-03, -9.747639864949528e-01, -9.039752827916686e-01, 4.563652781377095e-03, -2.628715386121834e+00, -9.533533228085178e-01, -9.533533228085178e-01, -2.748221199304562e+01, -2.727054872751389e+01, -9.275245154211689e+00, -9.741299310495576e+00, -2.852278738593086e+01, -2.852278738592707e+01, 8.704740573107158e-07, 8.838006002545648e-07, 8.719518423585222e-07, 2.919309164276982e-06, 8.771553324057481e-07, 8.771553324057481e-07, 1.262334906719422e-04, 1.231394150370228e-04, 1.275111788752207e-04, 1.250439885344652e-04, 1.225612494492191e-04, -5.061140507478640e-05, -5.174538109598070e-03, 5.931133628093231e-04, -7.617693458876030e-03, -4.288653749540553e-03, -3.270125752930279e-03, 1.557816186855255e-02, 2.211685911513059e+01, -1.038495300420079e+00, 2.327280983465232e+01, -3.043987365925516e-05, -4.502350345874658e+00, -4.502350345874658e+00, 4.015408389751598e+06, -1.229411857580464e+01, -4.832058448901482e+01, 1.482806603663051e+02, 3.415261435356898e+06, -1.514794797086025e+01, 1.306008439912212e-02, 1.084116913450013e-02, 1.622036317955765e-02, 1.229891665607498e-02, 1.199436045236115e-02, 1.199436045236115e-02, 1.391766272990042e-02, -9.836690621905498e-03, -4.148933504079467e-03, 3.258238775377694e-03, -7.402679441350147e-04, 2.578102461075445e-02, -9.316486326414490e-04, 6.485205238191906e-01, -1.692794201011776e-01, 1.220725138363522e-01, -8.870781270362957e-02, -8.870781270362976e-02, 4.485940319676127e-02, -8.775732693071614e+00, -7.386832726093660e+00, -6.090710842937960e-02, 5.103781816041425e+01, -7.977031994529169e+00, -1.073610347157414e+01, -1.359763254566571e+01, -2.672741876081691e+01, -9.584948697920092e+00, -2.129429898206528e+01, -2.129429898206885e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_tau_hcth_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tau_hcth", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [3.585157216077147e-06, 3.584842359961453e-06, 3.583459412882824e-06, 3.588582278752219e-06, 3.584991395673005e-06, 3.584991395673005e-06, 1.721900521943223e-05, 1.722868716749833e-05, 1.751997803119301e-05, 1.740563643177731e-05, 1.722161078325001e-05, 2.455795668226690e-03, -1.020203922873924e-05, -5.542602904017820e-03, -9.015539863723658e-03, -7.600643470156209e-03, -5.446129459434236e-03, -5.446129459434236e-03, -3.304849297603456e-02, -2.929436070530640e-02, -1.101362763982321e-05, -2.998662008035484e-02, -3.199799800343734e-02, -3.199799800343734e-02, -2.907499215539823e-06, -3.621255467957347e-06, -7.530412979075157e-04, -1.569219629780258e-08, -3.675812954416105e-06, -3.675812954254166e-06, -1.545428194168638e-05, -1.556441598098792e-05, -1.547120783060668e-05, -8.403500209968526e-06, -1.552149635415165e-05, -1.552149635415165e-05, 1.585256902797318e-05, 1.822279692075495e-05, 1.483456913838909e-05, 1.667895066141415e-05, 1.885717640743692e-05, 3.647464500626229e-03, 1.180694411923290e-02, 1.428125268068430e-03, 1.572339467275723e-02, 8.978268569121357e-03, 7.844117756879409e-03, 2.147473301042647e-04, -3.925729393601075e-06, -4.399176153386063e-02, -4.580600933688199e-06, 2.346526945593678e-03, -2.928478033662326e-02, -2.928478033662326e-02, -4.588499795443889e-12, -3.622353876587730e-08, -6.674909032255345e-08, -4.976288756063389e-07, -5.786181544413147e-12, -3.111613835531952e-08, 6.457249304900511e-04, 8.658838235379349e-04, -4.690808629914143e-04, 8.719900113305038e-04, 9.126691939393755e-04, 9.126691939393755e-04, 8.972046806306851e-04, 1.497656272716558e-02, 6.691982634971891e-03, 5.463269893815242e-04, 3.056727286657900e-03, 1.918977784503749e-04, 3.603597652131259e-03, -3.999544865665423e-05, -9.309320708731805e-03, 9.709190241199104e-05, 1.103910285023639e-02, 1.103910285023634e-02, 1.524670296631022e-04, -4.764110920856973e-04, -1.628894661211073e-03, 2.617786533187734e-02, -3.262971156921149e-06, -1.134606066966249e-02, -1.571414366568048e-06, -6.489997227433206e-11, -4.422182092345603e-09, -1.181023053650539e-02, -2.299793734827797e-08, -2.299793733398160e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
