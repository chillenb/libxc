
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_3_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.113529869085496e+01, -2.113540344494323e+01, -2.113586891212038e+01, -2.113431343787018e+01, -2.113512846163480e+01, -2.113512846163480e+01, -3.092780143640892e+00, -3.092878199887448e+00, -3.095522269566759e+00, -3.094732928554655e+00, -3.094495940634713e+00, -3.819428497066509e+00, -5.590759342569778e-01, -7.084861259185947e-01, -6.828389567282117e-01, -6.916882844146024e-01, -6.897502129182377e-01, -6.897502129182377e-01, -1.778795884213869e-01, -1.811922237309736e-01, -6.442819846969987e-01, -1.291152652504596e-01, -1.473238089292829e-01, -1.473238089292829e-01, -5.724404533832509e-03, -6.025247088026825e-03, -3.331398509676880e-02, -3.305800394002583e-03, -4.154087549543868e-03, -4.154087549543868e-03, -5.664611814402182e+00, -5.664864958265386e+00, -5.664618380323490e+00, -5.271667444606239e+00, -5.664742953663665e+00, -5.664742953663665e+00, -1.701549304573090e+00, -1.721318514288426e+00, -1.686920722618292e+00, -1.704283688353675e+00, -1.719721966328638e+00, -2.151445638395451e+00, -6.474495814943456e-01, -6.973632790916592e-01, -5.979392622196799e-01, -6.227154362158809e-01, -6.574489588620442e-01, -5.664468724595402e-01, -7.712782959456006e-02, -1.733605731544556e-01, -7.146716758494306e-02, -2.115583138242961e+00, -1.043778801017813e-01, -1.043778801017813e-01, -2.300867962642821e-03, -3.231703544091779e-03, -2.471155397139555e-03, -4.833863932416137e-02, -2.685350222028459e-03, -2.976964028064122e-03, -6.313331749432388e-01, -6.318073578429447e-01, -6.112161426527558e-01, -6.315540517985953e-01, -6.316306815004104e-01, -6.316306815004104e-01, -6.147980587106874e-01, -5.432061780612804e-01, -5.682312040227057e-01, -5.889824400645088e-01, -5.788859938061143e-01, -5.140744926414370e-01, -7.335914840322887e-01, -1.805317300766913e-01, -2.758926502736966e-01, -3.016164323006031e-01, -3.245607138636915e-01, -3.245607138636916e-01, -4.052728772047490e-01, -3.188009128680890e-02, -4.353210905245873e-02, -3.686645433711548e-01, -6.123139361911581e-02, -6.949969201520115e-02, -8.079179220689634e-03, -8.638358615485470e-04, -1.813252044370579e-03, -6.519833222621141e-02, -2.754625128456525e-03, -2.754625128456523e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_3_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.064350734158365e+01, -3.064359378624683e+01, -3.064400406779576e+01, -3.064271742565417e+01, -3.064338793448858e+01, -3.064338793448858e+01, -4.705191529786066e+00, -4.705376068503816e+00, -4.710306824334245e+00, -4.708744538805064e+00, -4.708423053760480e+00, -4.471488052485207e+00, -7.907618287909874e-01, -8.564747474577472e-01, -8.283438726308792e-01, -8.378991723613169e-01, -8.358449875536870e-01, -8.358449875536870e-01, -2.163646174182331e-01, -2.203606900116369e-01, -8.584102185148373e-01, -1.561610043593173e-01, -1.787290849225957e-01, -1.787290849225955e-01, -6.895164537860247e-03, -7.257533741541438e-03, -4.012672748145515e-02, -3.981911346027104e-03, -5.003689824008025e-03, -5.003689824008025e-03, -6.981716306419522e+00, -6.985450780815653e+00, -6.981921149638632e+00, -7.460295027899073e+00, -6.983591379992400e+00, -6.983591379992400e+00, -2.560842498810317e+00, -2.598132341845312e+00, -2.532380645388193e+00, -2.565862318382037e+00, -2.595319047490581e+00, -2.536179607933667e+00, -7.565433819107437e-01, -8.424895161537884e-01, -6.976252126674490e-01, -7.279376103560807e-01, -7.708425284361820e-01, -8.489523139987765e-01, -1.012842456838901e-01, -2.103752944632052e-01, -9.399694477342838e-02, -2.487062005423585e+00, -1.260539897698538e-01, -1.260539897698536e-01, -3.067770677426139e-03, -3.892660252823790e-03, -2.976561685596713e-03, -6.396185640190773e-02, -3.580298379520185e-03, -3.585819765353381e-03, -8.217217434291464e-01, -8.044949650546988e-01, -8.369987534880409e-01, -8.154153589161189e-01, -8.128933766764342e-01, -8.128933766764342e-01, -7.976925619815831e-01, -6.329259596084239e-01, -6.680639512456242e-01, -7.130332921876839e-01, -6.886596504040686e-01, -7.551555250387439e-01, -8.753040564127844e-01, -2.411673149328553e-01, -3.345661265837746e-01, -4.532192490946157e-01, -3.889163685210212e-01, -3.889163685210216e-01, -6.172344397294420e-01, -3.839956729589633e-02, -5.243553084688885e-02, -4.307312694103451e-01, -8.056895155961902e-02, -8.376059662566411e-02, -9.731532347651613e-03, -1.040510420980245e-03, -2.184103721534603e-03, -7.856878220886444e-02, -3.318007527904503e-03, -3.318007527904498e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_3_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.367572252116488e-08, -1.367565395482431e-08, -1.367526823142796e-08, -1.367629558480411e-08, -1.367576871140861e-08, -1.367576871140861e-08, -1.254507460502581e-05, -1.254723687038113e-05, -1.260333629062537e-05, -1.257611092131211e-05, -1.258425914852065e-05, -1.481633143857766e-05, -4.491844349290701e-03, -5.512042159642002e-03, -5.179100786714343e-03, -5.425861614487737e-03, -5.366300690483246e-03, -5.366300690483246e-03, -7.292628968855214e-01, -7.344428515952695e-01, -1.201809418809009e-03, -6.616854885928933e-01, -7.025173031495209e-01, -7.025173031495209e-01, -2.884877886201234e+02, -2.658919540631759e+02, -6.311550642437108e+00, -7.397942969051070e+02, -5.530731916120321e+02, -5.530731916120321e+02, -4.376792080319015e-06, -4.375974250604064e-06, -4.376770498014944e-06, -4.111574136633869e-06, -4.376372476855078e-06, -4.376372476855078e-06, -1.067428740562697e-04, -1.072642113579691e-04, -1.060855610223153e-04, -1.066880278650948e-04, -1.073526749024674e-04, -1.277630917351938e-04, -2.301562432502225e-02, -1.893340855917887e-02, -2.694745766603791e-02, -2.702127168331353e-02, -2.230338597371272e-02, -1.977536106291711e-02, -6.154168817197535e-01, -3.859909431899122e-01, -7.030245099762306e-01, -2.111996246360393e-04, -1.071629825845491e+00, -1.071629825845491e+00, -5.249825334932375e+02, -7.277735648542093e+02, -3.540668322624897e+03, -1.509654871617159e+00, -7.679212724777544e+02, -1.511222843356812e+03, -2.756862233863663e-02, -2.795736165088889e-02, -2.701983841481666e-02, -2.772167261193795e-02, -2.777912715268217e-02, -2.777912715268217e-02, -3.074201081064509e-02, -4.269220863146424e-02, -4.059684261986274e-02, -3.726220106832726e-02, -3.910241657708101e-02, -3.543540448653619e-02, -1.524407759174327e-02, -2.043958760361914e-01, -1.995830113700989e-01, -1.053826739560935e-01, -1.708273776727853e-01, -1.708273776727854e-01, -4.482284346877177e-02, -6.920849896854675e+00, -3.587253237229669e+00, -1.790955305987825e-01, -1.242571576605307e+00, -2.078031051544116e+00, -1.001964546467904e+02, -1.126519920704483e+04, -4.330478188309657e+03, -2.424592487137713e+00, -2.107167014073478e+03, -2.107167014073483e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_3_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.444198626469157e-03, 1.444204129143846e-03, 1.444223509853626e-03, 1.444142364264272e-03, 1.444185606272967e-03, 1.444185606272967e-03, 4.371739853331057e-03, 4.373270672906051e-03, 4.413578358368243e-03, 4.396883307326550e-03, 4.399130025263684e-03, 1.113310431562728e-02, 4.326173239990671e-03, 3.371929732188435e-02, 2.939395021033139e-02, 3.150699186986503e-02, 3.101479516386082e-02, 3.101479516386082e-02, 7.718763005124211e-02, 8.148928766778227e-02, -2.565937868448672e-05, 2.824465693944631e-02, 4.426822963112352e-02, 4.426822963112342e-02, 1.004184139813420e-03, 1.079319698782267e-03, 4.372587614659137e-03, 4.957894357458949e-04, 7.355527471701381e-04, 7.355527471701381e-04, 7.460635930839846e-03, 7.452056322386490e-03, 7.460153076907551e-03, 6.259646825403603e-03, 7.456334114610060e-03, 7.456334114610060e-03, 5.628980442034808e-03, 5.999351307380459e-03, 5.337544646568799e-03, 5.669820519659224e-03, 5.979814404917248e-03, 1.822748214635838e-02, 7.184905918216643e-02, 6.331803403141900e-02, 7.421743501303130e-02, 7.472423659530865e-02, 7.074290918180752e-02, 4.365464934727629e-02, -8.477446634846921e-04, 3.957152773481235e-02, -7.171066814702846e-04, 2.193123215413291e-02, 2.407979741743206e-02, 2.407979741743197e-02, -3.094122595887091e-08, 4.556607255611568e-04, 9.912181031491807e-04, -3.046775170677376e-04, -1.949573251005904e-07, 7.396473653311978e-04, 5.885163277334063e-02, 6.201197441027188e-02, 5.696717256911055e-02, 5.999863256477098e-02, 6.046106248787246e-02, 6.046106248787246e-02, 6.090049484148224e-02, 8.411047503090810e-02, 8.164450298156840e-02, 7.463974354647138e-02, 7.866609300240515e-02, 5.579412705944670e-02, 6.172886472169293e-02, 2.451587125685354e-04, 7.440471521794650e-02, 3.055001677427288e-02, 9.384640568778567e-02, 9.384640568778589e-02, 3.561584503234098e-02, 4.198719594448903e-03, 5.576790195146685e-03, 1.181626184409980e-01, -7.797222431251470e-04, 1.349361291437293e-02, 9.806680069161943e-04, 1.346906335886917e-04, 4.788954418081203e-04, 1.296596308965081e-02, 8.170780972742804e-04, 8.170780972742798e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
