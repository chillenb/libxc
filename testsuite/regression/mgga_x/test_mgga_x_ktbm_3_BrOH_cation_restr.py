
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_3_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.324404559769113e+01, -2.324410464382660e+01, -2.324446775070315e+01, -2.324359113164145e+01, -2.324403610352784e+01, -2.324403610352784e+01, -3.397599220484846e+00, -3.397690295651715e+00, -3.400358582749723e+00, -3.401585218361232e+00, -3.400260944444337e+00, -3.400260944444337e+00, -6.081114067605381e-01, -6.075298640006122e-01, -5.948250346403031e-01, -6.051944611716683e-01, -6.021713017758203e-01, -6.021713017758203e-01, -1.753101490619640e-01, -1.779884201088121e-01, -6.691652673626022e-01, -1.245329041419755e-01, -1.427030184788797e-01, -1.427030184788797e-01, -5.718265244462461e-03, -6.013454824642354e-03, -3.285424186482808e-02, -3.260720788772297e-03, -4.118760820357045e-03, -4.118760820357044e-03, -5.661981508270812e+00, -5.662265857405059e+00, -5.662042816978388e+00, -5.662291931070628e+00, -5.662101114967834e+00, -5.662101114967834e+00, -2.075172788530351e+00, -2.101738216770359e+00, -2.069004528701303e+00, -2.093196903641183e+00, -2.092814147390091e+00, -2.092814147390091e+00, -6.095600334066118e-01, -6.532638662094388e-01, -5.417151711118465e-01, -5.515497346183618e-01, -6.212062495194778e-01, -6.212062495194778e-01, -8.584187545419665e-02, -1.708707352828260e-01, -7.922367743896847e-02, -1.885479465298353e+00, -1.023544319324675e-01, -1.023544319324675e-01, -2.443920335963711e-03, -3.141992480164368e-03, -2.432957420965904e-03, -5.310717966749602e-02, -2.902392030976521e-03, -2.902392030976522e-03, -6.257630124394369e-01, -6.264202988708467e-01, -6.262416606785783e-01, -6.260448343605239e-01, -6.261455218683282e-01, -6.261455218683282e-01, -6.040860994309265e-01, -5.382258160439584e-01, -5.611841881231043e-01, -5.800567106633139e-01, -5.704251950491076e-01, -5.704251950491077e-01, -6.765768606332134e-01, -2.216815659590251e-01, -2.686797327940693e-01, -3.516109593590801e-01, -3.108982148425966e-01, -3.108982148425967e-01, -4.757975987132883e-01, -3.165532332550002e-02, -4.279387771716540e-02, -3.431585546270997e-01, -6.814736612693770e-02, -6.814736612693773e-02, -7.845667574260600e-03, -8.054011805289318e-04, -1.799295967488203e-03, -6.439385437691862e-02, -2.701752610348014e-03, -2.701752610348012e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_3_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.833162287271790e+01, -2.833173530312504e+01, -2.833215313510273e+01, -2.833047920329922e+01, -2.833136799160343e+01, -2.833136799160343e+01, -4.631100032909450e+00, -4.631199543678226e+00, -4.633826363633645e+00, -4.632573391024468e+00, -4.632484787341030e+00, -4.632484787341030e+00, -8.176711742012481e-01, -8.162554544696502e-01, -7.848687387059632e-01, -7.993524111925034e-01, -7.957467039240341e-01, -7.957467039240341e-01, -2.149679631434379e-01, -2.186639159443217e-01, -8.811227160183690e-01, -1.538381142470479e-01, -1.760241244951011e-01, -1.760241244951012e-01, -6.895922275464042e-03, -7.258976294527962e-03, -4.014797956911224e-02, -3.987096639757656e-03, -5.007883603961709e-03, -5.007883603961708e-03, -6.985088204357810e+00, -6.988785723304537e+00, -6.985223071000259e+00, -6.988488599917074e+00, -6.986979605020243e+00, -6.986979605020243e+00, -2.532435772994955e+00, -2.550958692915130e+00, -2.516114402109861e+00, -2.532439650363691e+00, -2.550856393246888e+00, -2.550856393246888e+00, -7.890997212991903e-01, -8.933752538147187e-01, -7.274081272357480e-01, -7.864491138043080e-01, -8.046347552283916e-01, -8.046347552283916e-01, -1.054800479567293e-01, -2.089472380479480e-01, -9.743634485301063e-02, -2.699380193085925e+00, -1.252201529388321e-01, -1.252201529388321e-01, -3.081544612179972e-03, -3.901795380368042e-03, -2.980877374904242e-03, -6.529281726888543e-02, -3.593584839919846e-03, -3.593584839919848e-03, -8.291295489000847e-01, -8.116160639078952e-01, -8.176411342239995e-01, -8.227360202835960e-01, -8.201764703443013e-01, -8.201764703443013e-01, -8.118257052678830e-01, -6.365361057876712e-01, -6.751811179484318e-01, -7.238448432090662e-01, -6.981357520405975e-01, -6.981357520405977e-01, -9.367941228538078e-01, -2.712911239810126e-01, -3.315797032892160e-01, -4.520094610806452e-01, -3.872078441619278e-01, -3.872078441619279e-01, -5.933523066498078e-01, -3.841255250428561e-02, -5.243779446513453e-02, -4.430644177689874e-01, -8.349234614909501e-02, -8.349234614909494e-02, -9.754236309311158e-03, -1.043517464255479e-03, -2.185785826420378e-03, -7.843218742863202e-02, -3.323806666469223e-03, -3.323806666469223e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_3_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.481574212562916e-08, -1.481564075504669e-08, -1.481515584497985e-08, -1.481667132487623e-08, -1.481588202899593e-08, -1.481588202899593e-08, -1.348322387453255e-05, -1.348549983935850e-05, -1.354515636795424e-05, -1.352229865355654e-05, -1.352778923820387e-05, -1.352778923820387e-05, -4.838398323032664e-03, -4.827118709391104e-03, -4.567002702376922e-03, -4.820119926337866e-03, -4.754287212564301e-03, -4.754287212564301e-03, -7.185869132640083e-01, -7.216018194700290e-01, -1.262277631622876e-03, -6.207460991085947e-01, -6.723659872396259e-01, -6.723659872396259e-01, -2.873820987657568e+02, -2.640293296027957e+02, -6.011614299141535e+00, -7.026192790711814e+02, -5.359600354473704e+02, -5.359600354473700e+02, -4.375016591394380e-06, -4.374219445207666e-06, -4.375031925934806e-06, -4.374325241012934e-06, -4.374589015428926e-06, -4.374589015428926e-06, -1.245454771840862e-04, -1.252308600232739e-04, -1.243729321544872e-04, -1.251692546442208e-04, -1.250080380024897e-04, -1.250080380024897e-04, -2.191901410660998e-02, -1.791084008790831e-02, -2.493126399454355e-02, -2.450787688833394e-02, -2.129416254143900e-02, -2.129416254143900e-02, -9.452985979677343e-01, -3.786364195236485e-01, -1.094487808434836e+00, -1.922819414864612e-04, -1.030581647034613e+00, -1.030581647034613e+00, -8.618107873986514e+02, -6.506402668080602e+02, -3.338191633882016e+03, -2.515899707301466e+00, -1.367765799495872e+03, -1.367765799495872e+03, -2.734631487209406e-02, -2.774330238189480e-02, -2.761683019117951e-02, -2.750206764189461e-02, -2.756061918971471e-02, -2.756061918971471e-02, -3.025393758969101e-02, -4.237795831948363e-02, -4.018075346566362e-02, -3.677773572920304e-02, -3.862176506085404e-02, -3.862176506085404e-02, -1.424673276256811e-02, -2.589542739658890e-01, -1.949291879157474e-01, -1.186979622922239e-01, -1.649702836044737e-01, -1.649702836044738e-01, -5.073988789724173e-02, -6.754395328941659e+00, -3.384833264464723e+00, -1.692608579688543e-01, -1.970059482062713e+00, -1.970059482062714e+00, -8.914410002394415e+01, -7.960626049616066e+03, -4.209297239524132e+03, -2.343677010392856e+00, -1.956152143913627e+03, -1.956152143913631e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_3_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.871176234352357e-03, 1.871166090040077e-03, 1.871137892468003e-03, 1.871289055765795e-03, 1.871207441382226e-03, 1.871207441382226e-03, 7.093105997050838e-03, 7.094612479736005e-03, 7.136058011890293e-03, 7.137037476372569e-03, 7.129955341862340e-03, 7.129955341862340e-03, 1.360140220636995e-02, 1.354261254824579e-02, 1.244482985832988e-02, 1.435029206639253e-02, 1.376519136799970e-02, 1.376519136799970e-02, 7.141658927972387e-02, 7.420004494481365e-02, 2.308111668396150e-03, 2.087674320347614e-02, 3.541675595501095e-02, 3.541675595501107e-02, 9.919986496345781e-04, 1.055435118323200e-03, 3.717712620030964e-03, 4.197574212062174e-04, 6.650196174769233e-04, 6.650196174769232e-04, 7.452345392906264e-03, 7.443888605031566e-03, 7.452036418963078e-03, 7.444567511984383e-03, 7.448019716193666e-03, 7.448019716193666e-03, 1.619502810450029e-02, 1.669773040286212e-02, 1.619608203321985e-02, 1.667962350086259e-02, 1.647041600095760e-02, 1.647041600095760e-02, 5.950640934735746e-02, 5.331307346738429e-02, 5.206115927867347e-02, 5.029938620883331e-02, 5.957509215047509e-02, 5.957509215047509e-02, 1.041903327459891e-02, 3.598474691644547e-02, 9.380015042020299e-03, 1.535852625805557e-02, 2.034803973200345e-02, 2.034803973200340e-02, 1.713836261164976e-04, 3.147051667318698e-04, 8.191386965174787e-04, 6.411380237952066e-03, 5.328325370271094e-04, 5.328325370271094e-04, 5.786752621105599e-02, 6.090309842900359e-02, 5.985128637531655e-02, 5.896718339414918e-02, 5.941073887759470e-02, 5.941073887759472e-02, 5.886898926030593e-02, 8.167896060999642e-02, 7.874240661336256e-02, 7.177060215064236e-02, 7.554785698803236e-02, 7.554785698803235e-02, 4.922981461749310e-02, 5.269606181245282e-02, 6.555962504881510e-02, 7.453130093891137e-02, 7.828382826949673e-02, 7.828382826949694e-02, 7.362660338823279e-02, 3.875418240593750e-03, 4.573863239603370e-03, 9.152688560257394e-02, 1.102089871158936e-02, 1.102089871158940e-02, 6.655832754460850e-04, 3.673661702584467e-05, 4.372896936191756e-04, 1.143531167080502e-02, 6.413446007460351e-04, 6.413446007460399e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
