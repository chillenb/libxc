
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_msb86bl_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_msb86bl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.198368503975991e+01, -2.198373069345695e+01, -2.198398306238874e+01, -2.198330311728138e+01, -2.198365236019005e+01, -2.198365236019005e+01, -3.378371011415942e+00, -3.378370739989110e+00, -3.378570784560799e+00, -3.380027374118669e+00, -3.379020568156716e+00, -3.379020568156716e+00, -6.522001317024786e-01, -6.519239129861600e-01, -6.477304418287746e-01, -6.562403075620844e-01, -6.569652420349597e-01, -6.569652420349597e-01, -2.067041172359296e-01, -2.073359953016153e-01, -7.311802984367040e-01, -1.729934291769537e-01, -1.999206928935759e-01, -1.999206928935758e-01, -2.055875237898813e-02, -2.123769305928658e-02, -7.528419466868602e-02, -1.409906473465550e-02, -1.745484366255000e-02, -1.745484366255000e-02, -5.323466052621444e+00, -5.323660314127639e+00, -5.323482592702372e+00, -5.323653948618734e+00, -5.323560297362372e+00, -5.323560297362372e+00, -2.106836128120154e+00, -2.124179939389898e+00, -2.107560646653909e+00, -2.122585877074355e+00, -2.116338401371724e+00, -2.116338401371724e+00, -5.932857421034340e-01, -6.311099440393982e-01, -5.332885070531806e-01, -5.371986132080220e-01, -6.036164945422207e-01, -6.036164945422208e-01, -1.432990024422439e-01, -2.201935926831197e-01, -1.359887797832406e-01, -1.827468247225655e+00, -1.525345078900354e-01, -1.525345078900354e-01, -1.154897769062173e-02, -1.370713822831957e-02, -9.893468055415015e-03, -1.032646674792647e-01, -1.227506605512165e-02, -1.227506605512166e-02, -5.930234404455713e-01, -5.926942621938944e-01, -5.928122306186958e-01, -5.929034965741293e-01, -5.928571994993119e-01, -5.928571994993119e-01, -5.754497227809560e-01, -5.217346656234932e-01, -5.363944703980916e-01, -5.512793159289260e-01, -5.434431795039723e-01, -5.434431795039723e-01, -6.544893685745392e-01, -2.655789239771822e-01, -2.979786620042503e-01, -3.538294015253767e-01, -3.249510084553374e-01, -3.249510084553374e-01, -4.725390097713830e-01, -7.341496404840638e-02, -9.115022180235141e-02, -3.391818391544731e-01, -1.182327965565379e-01, -1.182327965565379e-01, -2.664403585779285e-02, -4.920462927446516e-03, -8.623244317274112e-03, -1.140553521002464e-01, -1.138417559770873e-02, -1.138417559770872e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_msb86bl_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_msb86bl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.774354705662062e+01, -2.774396378494268e+01, -2.774367005436834e+01, -2.774405305214568e+01, -2.774410087882866e+01, -2.774465984992446e+01, -2.774271530059011e+01, -2.774289317890001e+01, -2.774362025507667e+01, -2.774362656353707e+01, -2.774362025507667e+01, -2.774362656353707e+01, -4.192972581415264e+00, -4.192385822573012e+00, -4.193258171126846e+00, -4.192537841529735e+00, -4.198481659519703e+00, -4.199380560498504e+00, -4.198355420402243e+00, -4.198111130146168e+00, -4.191697292548909e+00, -4.202974283232749e+00, -4.191697292548909e+00, -4.202974283232749e+00, -7.899548892509692e-01, -7.977813264565762e-01, -7.872644106868654e-01, -7.966341708642503e-01, -7.508338294917493e-01, -7.405373335520983e-01, -7.564058896571930e-01, -7.608985380160261e-01, -8.086295553587444e-01, -6.994585820394580e-01, -8.086295553587444e-01, -6.994585820394580e-01, -1.367396891534240e-01, -1.752180234508917e-01, -1.461678003919136e-01, -1.736040624249887e-01, -8.361321008194916e-01, -8.895953059909355e-01, -1.336118204401909e-01, -1.302448788265115e-01, -1.519601071041313e-01, -1.134401699215840e-01, -1.519601071041311e-01, -1.134401699215839e-01, -1.887350456457737e-02, -1.975577466004132e-02, -1.947576070910450e-02, -2.050608556009910e-02, -7.037494859677240e-02, -7.280180026791744e-02, -1.305004550505285e-02, -1.291524938823707e-02, -1.734336820572679e-02, -1.077039026762513e-02, -1.734336820572677e-02, -1.077039026762517e-02, -6.836342291314716e+00, -6.834761091679789e+00, -6.838624313941144e+00, -6.836964906674834e+00, -6.836510054724410e+00, -6.834866368168634e+00, -6.838466408602954e+00, -6.836866790086119e+00, -6.837480480310956e+00, -6.835863026090183e+00, -6.837480480310956e+00, -6.835863026090183e+00, -2.212346363169993e+00, -2.217925636586356e+00, -2.265770404573044e+00, -2.269955131467109e+00, -2.201838984653270e+00, -2.209824675375531e+00, -2.253882316553033e+00, -2.261830369283900e+00, -2.253292934043659e+00, -2.246752608369515e+00, -2.253292934043659e+00, -2.246752608369515e+00, -7.433980683037010e-01, -7.414250637092193e-01, -8.567136539640337e-01, -8.565573309212905e-01, -6.492260705836649e-01, -6.933997664434282e-01, -7.088906063306926e-01, -7.574348173112885e-01, -7.803104036491594e-01, -7.402704877064661e-01, -7.803104036491594e-01, -7.402704877064663e-01, -1.160665898025400e-01, -1.162259776460591e-01, -1.299666036609536e-01, -1.352870109006988e-01, -1.109967841122602e-01, -1.128597882678478e-01, -2.561174880620537e+00, -2.560306282239971e+00, -1.138467647529950e-01, -1.132508269776037e-01, -1.138467647529950e-01, -1.132508269776038e-01, -1.034831678955347e-02, -1.074729950815747e-02, -1.252640924549675e-02, -1.273298701063616e-02, -9.011015361658353e-03, -9.332660425828455e-03, -9.142721217265055e-02, -9.204328897655185e-02, -9.590821062874533e-03, -1.211824562064477e-02, -9.590821062874545e-03, -1.211824562064476e-02, -7.846831357697931e-01, -7.877922364319514e-01, -7.752086387854284e-01, -7.784036217961033e-01, -7.785116473600002e-01, -7.816979546010936e-01, -7.812845868714879e-01, -7.844051350815262e-01, -7.798960617352750e-01, -7.830485739922260e-01, -7.798960617352750e-01, -7.830485739922260e-01, -7.661305216911660e-01, -7.685770315964846e-01, -6.132197838437120e-01, -6.165583506539675e-01, -6.550119556353167e-01, -6.586350738468002e-01, -6.991895855481702e-01, -7.018589161909545e-01, -6.763514636533307e-01, -6.793281674558758e-01, -6.763514636533307e-01, -6.793281674558758e-01, -9.007766202808345e-01, -9.020767863372812e-01, -1.897712196936227e-01, -1.904733235792723e-01, -2.377093020299199e-01, -2.430729299011338e-01, -3.997950565652516e-01, -4.028475266149231e-01, -3.125917134462310e-01, -3.131356808055818e-01, -3.125917134462311e-01, -3.131356808055817e-01, -5.296489225330161e-01, -5.370288668250990e-01, -7.001051449338551e-02, -7.034519721114128e-02, -8.405596511744051e-02, -8.538869336128917e-02, -4.002939332456942e-01, -4.084473626591491e-01, -9.869255210965901e-02, -9.699827903696355e-02, -9.869255210965895e-02, -9.699827903696348e-02, -2.501170446983474e-02, -2.565275590367598e-02, -4.475752203897168e-03, -4.296000105339796e-03, -7.669293944438702e-03, -7.981468078608955e-03, -9.520386834870305e-02, -8.906894398832442e-02, -8.780295330404489e-03, -1.133698892069834e-02, -8.780295330404491e-03, -1.133698892069831e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_msb86bl_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_msb86bl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-9.159076986069710e-09, 0.000000000000000e+00, -9.152140776266464e-09, -9.158869067851021e-09, 0.000000000000000e+00, -9.151990745863580e-09, -9.157303351643084e-09, 0.000000000000000e+00, -9.150001222487929e-09, -9.159605781314361e-09, 0.000000000000000e+00, -9.152944580118156e-09, -9.158971692735771e-09, 0.000000000000000e+00, -9.151110621376307e-09, -9.158971692735771e-09, 0.000000000000000e+00, -9.151110621376307e-09, -1.645242496187055e-05, 0.000000000000000e+00, -1.639392619476147e-05, -1.647063454818172e-05, 0.000000000000000e+00, -1.640144802274951e-05, -1.677827416172911e-05, 0.000000000000000e+00, -1.682054119508137e-05, -1.687035235634168e-05, 0.000000000000000e+00, -1.682373207082933e-05, -1.642711437833224e-05, 0.000000000000000e+00, -1.711057704171511e-05, -1.642711437833224e-05, 0.000000000000000e+00, -1.711057704171511e-05, -1.253543953098095e-02, 0.000000000000000e+00, -1.250230882163650e-02, -1.256628548021874e-02, 0.000000000000000e+00, -1.251034891927352e-02, -1.287293726289905e-02, 0.000000000000000e+00, -1.312216430478499e-02, -1.309520101267400e-02, 0.000000000000000e+00, -1.311140070186990e-02, -1.220343179933174e-02, 0.000000000000000e+00, -1.402672048119485e-02, -1.220343179933174e-02, 0.000000000000000e+00, -1.402672048119485e-02, -3.847279002594767e+00, 0.000000000000000e+00, -2.355318090275385e+00, -3.487438515643356e+00, 0.000000000000000e+00, -2.536934900057492e+00, -5.546073251939007e-03, 0.000000000000000e+00, -5.155596733231236e-03, -2.989001928121045e+00, 0.000000000000000e+00, -3.693663601776952e+00, -2.917519817427162e+00, 0.000000000000000e+00, -5.351217893008871e+00, -2.917519817427164e+00, 0.000000000000000e+00, -5.351217893008871e+00, -2.570910052635086e+03, 0.000000000000000e+00, -2.217046471500099e+03, -2.348957677498393e+03, 0.000000000000000e+00, -1.990140269223052e+03, -3.637227971036477e+01, 0.000000000000000e+00, -3.264857125597221e+01, -8.372832877094739e+03, 0.000000000000000e+00, -8.620770729869677e+03, -3.373141544313615e+03, 0.000000000000000e+00, -1.887851273220131e+04, -3.373141544313625e+03, 0.000000000000000e+00, -1.887851273220115e+04, -2.145352884000161e-06, 0.000000000000000e+00, -2.145273420417736e-06, -2.144043370373008e-06, 0.000000000000000e+00, -2.144010948622633e-06, -2.144427343399348e-06, 0.000000000000000e+00, -2.144614969772357e-06, -2.143337269186287e-06, 0.000000000000000e+00, -2.143500456579854e-06, -2.145327277472157e-06, 0.000000000000000e+00, -2.144746850219735e-06, -2.145327277472157e-06, 0.000000000000000e+00, -2.144746850219735e-06, -2.514446385361973e-04, 0.000000000000000e+00, -2.468695987913159e-04, -2.223858257836935e-04, 0.000000000000000e+00, -2.187875379610333e-04, -2.359642459927653e-04, 0.000000000000000e+00, -2.364753250119858e-04, -2.083107582687161e-04, 0.000000000000000e+00, -2.084809917465989e-04, -2.443663311024572e-04, 0.000000000000000e+00, -2.332195559916943e-04, -2.443663311024572e-04, 0.000000000000000e+00, -2.332195559916943e-04, -4.245885812097178e-02, 0.000000000000000e+00, -4.219148324158773e-02, -3.161802249609805e-02, 0.000000000000000e+00, -3.097787583305537e-02, -3.750123851692173e-02, 0.000000000000000e+00, -5.172521519132774e-02, -3.399069782080306e-02, 0.000000000000000e+00, -4.257036662107268e-02, -3.257343709266181e-02, 0.000000000000000e+00, -4.539477836443694e-02, -3.257343709266181e-02, 0.000000000000000e+00, -4.539477836443694e-02, -5.333175948223638e+00, 0.000000000000000e+00, -5.245908839236595e+00, -2.650834129974188e+00, 0.000000000000000e+00, -2.485019796041426e+00, -6.461330632032138e+00, 0.000000000000000e+00, -6.006628959526884e+00, -3.419559979007185e-04, 0.000000000000000e+00, -3.428354458501740e-04, -5.703717310879855e+00, 0.000000000000000e+00, -6.153089859538357e+00, -5.703717310879863e+00, 0.000000000000000e+00, -6.153089859538339e+00, -1.909660699441854e+04, 0.000000000000000e+00, -1.643440016391646e+04, -9.908911806323422e+03, 0.000000000000000e+00, -9.257392598483337e+03, -3.996206144732707e+04, 0.000000000000000e+00, -3.636572657062057e+04, -1.486238441301242e+01, 0.000000000000000e+00, -1.455304748607963e+01, -2.869520783280582e+04, 0.000000000000000e+00, -1.334026632423126e+04, -2.869520783280585e+04, 0.000000000000000e+00, -1.334026632423125e+04, -1.766763270831584e-02, 0.000000000000000e+00, -1.728362536900247e-02, -1.777968796724414e-02, 0.000000000000000e+00, -1.739878772906405e-02, -1.774199894046987e-02, 0.000000000000000e+00, -1.735788488950030e-02, -1.770815802652573e-02, 0.000000000000000e+00, -1.732812541026024e-02, -1.772788564462660e-02, 0.000000000000000e+00, -1.734482266531624e-02, -1.772788564462660e-02, 0.000000000000000e+00, -1.734482266531624e-02, -2.461398441065264e-02, 0.000000000000000e+00, -2.395244841428148e-02, -3.524472983984232e-02, 0.000000000000000e+00, -3.451196447883281e-02, -3.245915629250686e-02, 0.000000000000000e+00, -3.171989918036908e-02, -2.934376104545270e-02, 0.000000000000000e+00, -2.886366629255003e-02, -3.175477983510215e-02, 0.000000000000000e+00, -3.085077705448971e-02, -3.175477983510216e-02, 0.000000000000000e+00, -3.085077705448974e-02, -2.792387502707263e-02, 0.000000000000000e+00, -2.750921469336946e-02, -1.212001588415604e+00, 0.000000000000000e+00, -1.204074229963727e+00, -8.186523762293759e-01, 0.000000000000000e+00, -7.932273422753833e-01, -2.815034678260869e-01, 0.000000000000000e+00, -2.710549983077100e-01, -5.259638385345284e-01, 0.000000000000000e+00, -5.277711404435574e-01, -5.259638385345280e-01, 0.000000000000000e+00, -5.277711404435578e-01, -1.122002890859260e-01, 0.000000000000000e+00, -1.046631709210852e-01, -3.648778796669508e+01, 0.000000000000000e+00, -3.587383054849872e+01, -1.987482615257066e+01, 0.000000000000000e+00, -1.888781353105334e+01, -3.558380754036744e-01, 0.000000000000000e+00, -3.844245155532710e-01, -1.068022360769803e+01, 0.000000000000000e+00, -1.120234389609419e+01, -1.068022360769803e+01, 0.000000000000000e+00, -1.120234389609420e+01, -9.989850387255763e+02, 0.000000000000000e+00, -9.259606021572876e+02, -3.842090238761028e+05, 0.000000000000000e+00, -4.803637191794057e+05, -5.763713683375205e+04, 0.000000000000000e+00, -5.098239133495362e+04, -1.250350065529865e+01, 0.000000000000000e+00, -1.668822810545492e+01, -4.369150329162338e+04, 0.000000000000000e+00, -1.667697980732932e+04, -4.369150329162355e+04, 0.000000000000000e+00, -1.667697980732942e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_msb86bl_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_msb86bl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_msb86bl_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_msb86bl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.411457243488165e-04, 1.406080231853151e-04, 1.411372385318697e-04, 1.406019335767706e-04, 1.410439588476159e-04, 1.404869043228486e-04, 1.411361964230318e-04, 1.406052416266930e-04, 1.411419415896512e-04, 1.405096894153360e-04, 1.411419415896512e-04, 1.405096894153360e-04, 1.523505354552919e-03, 1.503007701210703e-03, 1.529660980593580e-03, 1.505484325918781e-03, 1.633046234518546e-03, 1.647314995890112e-03, 1.668467941225886e-03, 1.652496399189078e-03, 1.511685365596264e-03, 1.749450069936157e-03, 1.511685365596264e-03, 1.749450069936157e-03, 9.409822551402576e-03, 9.640435565543641e-03, 9.361778870672480e-03, 9.598454404025399e-03, 8.453508283330052e-03, 8.620364935142512e-03, 9.746651300964757e-03, 9.957378154142450e-03, 9.485834498487018e-03, 9.926722412807617e-03, 9.485834498487018e-03, 9.926722412807617e-03, 1.010745724592583e-01, 5.683559942880639e-02, 9.080781656642443e-02, 6.991563724737238e-02, 9.959647667432184e-04, 1.719799012200916e-03, 7.499780694516856e-03, 2.422693944205566e-02, 8.134144474928594e-02, 2.110378349610702e-04, 8.134144474928602e-02, 2.110378349610857e-04, 1.530017982976377e-07, 2.943671102396828e-06, 4.935933936860227e-08, 4.448970940179179e-07, 6.816246311077503e-06, 1.714023275573982e-05, 3.525976939139508e-12, 5.055649961472056e-12, 2.443584109312368e-09, 1.009225025420942e-12, 2.443584109267397e-09, 1.009225026823819e-12, 4.108481745703188e-05, 3.873700283263834e-05, 4.057909728130196e-05, 3.825103492759567e-05, 4.011462804803525e-05, 3.804124205106162e-05, 3.971767681639018e-05, 3.763555647596672e-05, 4.153831250093909e-05, 3.861149115437686e-05, 4.153831250093909e-05, 3.861149115437686e-05, 9.405296647522696e-03, 9.139376939700900e-03, 8.027924257711098e-03, 7.803016481866344e-03, 8.287499352235784e-03, 8.377621012880327e-03, 6.953102763800529e-03, 7.020911397224824e-03, 9.361201678432751e-03, 8.534040487783535e-03, 9.361201678432751e-03, 8.534040487783535e-03, 4.675139957548214e-02, 4.582038525448269e-02, 4.408153559737815e-02, 4.293882469629635e-02, 1.935847013796406e-02, 4.508502654308996e-02, 1.980234713630356e-02, 3.878454194477333e-02, 3.848884902579341e-02, 4.843138189380289e-02, 3.848884902579337e-02, 4.843138189380288e-02, 2.123399830686413e-03, 1.797271585252846e-03, 7.066724320149097e-02, 6.520301857901060e-02, 6.871586001375940e-04, 1.690858544937868e-03, 1.169944178264614e-02, 1.171986362581562e-02, 1.389923202045250e-02, 2.216051375064552e-02, 1.389923202045253e-02, 2.216051375064536e-02, 1.232780327544023e-14, 1.566658898785480e-14, 4.202605038095262e-13, 2.932932479963473e-13, 1.421156324685024e-11, 2.161409581422455e-11, 6.615942667836670e-05, 3.042826132971923e-04, 1.815950919440675e-14, 4.482413035960597e-09, 1.815950800515563e-14, 4.482413035974512e-09, 6.855012020849611e-03, 6.639816346719395e-03, 6.676463368952370e-03, 6.473350142970643e-03, 6.741665470137559e-03, 6.531695093485573e-03, 6.791654482803904e-03, 6.584740513289999e-03, 6.771031402706736e-03, 6.561038261298834e-03, 6.771031402706736e-03, 6.561038261298838e-03, 1.423009367860735e-02, 1.367822837379142e-02, 1.021167969974740e-02, 1.000752510212960e-02, 1.213628824208174e-02, 1.186369408960703e-02, 1.337229966353285e-02, 1.322825662977134e-02, 1.373511829687366e-02, 1.316782012284277e-02, 1.373511829687368e-02, 1.316782012284280e-02, 4.552542210986783e-02, 4.506495217251675e-02, 6.498235957606287e-02, 6.601918914529456e-02, 8.056574144606087e-02, 8.041075358759055e-02, 5.723104615765256e-02, 5.534453723208463e-02, 7.934790861298044e-02, 7.953939274564777e-02, 7.934790861298030e-02, 7.953939274564781e-02, 5.595358138366057e-02, 5.236399336794292e-02, 8.367817323463917e-05, 4.728863526505460e-05, 2.630730664407869e-05, 3.974241029501458e-05, 6.494609258082952e-02, 8.093584414503485e-02, 1.292534817492393e-03, 3.195851893127058e-03, 1.292534817492411e-03, 3.195851893127060e-03, 7.242684051424179e-11, 7.619569445580186e-11, 8.871384513246532e-18, 6.512442385829677e-18, 3.033520336140199e-12, 4.548278726057814e-12, 2.009066591472704e-03, 1.434987436837776e-02, 1.107947714628415e-13, 2.506825424747363e-09, 1.107947712560309e-13, 2.506825424698751e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
