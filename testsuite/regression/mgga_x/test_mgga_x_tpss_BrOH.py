
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_tpss_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.990338901221756e+01, -1.990344161135224e+01, -1.990371145172059e+01, -1.990284986317251e+01, -1.990341645144343e+01, -1.990341645144343e+01, -3.234741860871859e+00, -3.234738920464273e+00, -3.234768638086799e+00, -3.235015012814634e+00, -3.234756430855024e+00, -3.705129607366430e+00, -6.297387846829025e-01, -7.524653302094728e-01, -7.464681489647486e-01, -7.458316216121823e-01, -7.526182727779425e-01, -7.526182727779425e-01, -2.104442569968707e-01, -2.118595826776800e-01, -7.595787439483167e-01, -1.851611880718851e-01, -2.108858342167783e-01, -2.108858342167783e-01, -1.700786315872614e-02, -1.781079834142412e-02, -7.065012101340765e-02, -8.176842833869205e-03, -1.762511958577812e-02, -1.762511958577812e-02, -5.477422304081036e+00, -5.478396868546555e+00, -5.477525125156367e+00, -4.864268007904076e+00, -5.477917626104591e+00, -5.477917626104591e+00, -1.824915457841453e+00, -1.836381423473254e+00, -1.820348712960410e+00, -1.829253192508462e+00, -1.838607631551097e+00, -2.114882674821561e+00, -6.125345147693473e-01, -6.635270981396167e-01, -5.835821766058709e-01, -6.054308105483718e-01, -6.350676711315129e-01, -5.597237005376324e-01, -9.314592199875676e-02, -2.306735243049260e-01, -9.194338434813180e-02, -2.020399017246559e+00, -1.597969463365368e-01, -1.597969463365368e-01, -4.526749921166493e-03, -9.013677025352360e-03, -6.755438350965167e-03, -5.801922208956858e-02, -4.713708806792633e-03, -8.213158037139139e-03, -6.300068976540847e-01, -6.268241050509582e-01, -5.600922525115027e-01, -6.288662914193871e-01, -6.284268498171404e-01, -6.284268498171404e-01, -6.098708175825855e-01, -5.311730667762515e-01, -5.531868803439869e-01, -5.746364920845660e-01, -5.636178582708613e-01, -4.984008617177044e-01, -6.959236275697457e-01, -2.192761172270668e-01, -3.076402672571896e-01, -3.272594092610478e-01, -3.377925918493249e-01, -3.377925918493248e-01, -4.215402528328613e-01, -6.573806404104249e-02, -8.756555418531088e-02, -3.526885122451805e-01, -7.562004254826979e-02, -1.203237314039493e-01, -1.994014396650019e-02, -2.468849559299357e-03, -4.689215096782771e-03, -1.148211780053371e-01, -6.980528531910210e-03, -6.980528531910201e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_tpss_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.680273363826898e+01, -2.680280330404684e+01, -2.680316158131530e+01, -2.680202028425340e+01, -2.680276997464684e+01, -2.680276997464684e+01, -4.242645917843479e+00, -4.242685350725913e+00, -4.244032010619688e+00, -4.243847581855046e+00, -4.242677043322308e+00, -4.462212059467677e+00, -8.195621520961215e-01, -7.516018480484417e-01, -7.149984321185053e-01, -7.274613415674668e-01, -7.525791186783851e-01, -7.525791186783851e-01, -2.007635598999797e-01, -2.047839532646055e-01, -9.968271858569109e-01, -1.764897272636444e-01, -2.019304410524359e-01, -2.019304410524359e-01, -2.256404191361089e-02, -2.361826500581958e-02, -8.919778630785088e-02, -1.089501145782274e-02, -2.337185095565403e-02, -2.337185095565403e-02, -6.750560593925891e+00, -6.750091084822268e+00, -6.750502931548926e+00, -6.539668052473914e+00, -6.750334168841642e+00, -6.750334168841642e+00, -2.374579346718907e+00, -2.392325730276114e+00, -2.367524543661647e+00, -2.381177587107881e+00, -2.396017506153175e+00, -2.480693272391081e+00, -7.648441340089120e-01, -8.272882624790564e-01, -7.179740429929905e-01, -7.585744490502716e-01, -7.959707135993948e-01, -7.516633823879463e-01, -1.239339620259787e-01, -2.023310478609669e-01, -1.223168871421789e-01, -2.532560911345583e+00, -1.559923797410030e-01, -1.559923797410030e-01, -6.035631399655858e-03, -1.200702829429675e-02, -8.997896139647504e-03, -7.730150067512800e-02, -6.284904977093653e-03, -1.094146642398906e-02, -7.512972212837030e-01, -7.566575226463619e-01, -7.495459360562514e-01, -7.533767725543037e-01, -7.541349900125109e-01, -7.541349900125109e-01, -7.305759983654018e-01, -6.613285497777681e-01, -6.933689799529084e-01, -7.137539593846952e-01, -7.045196458563880e-01, -6.711683507775006e-01, -8.712607116733058e-01, -2.870695585338809e-01, -3.133215411348991e-01, -4.261409132050040e-01, -3.756053701955904e-01, -3.756053701955903e-01, -5.544548026119507e-01, -8.377631947967695e-02, -1.079997359291765e-01, -4.266727623776725e-01, -1.006489487652081e-01, -1.332574262725275e-01, -2.647302518815445e-02, -3.291557451028474e-03, -6.249961599019014e-03, -1.272277172202582e-01, -9.300521845962133e-03, -9.300521845962119e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_tpss_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.856764342848270e-09, -6.856796981437590e-09, -6.856884407653874e-09, -6.856361453573708e-09, -6.856781910414764e-09, -6.856781910414764e-09, -4.831944147205846e-06, -4.832896725742821e-06, -4.860928231772798e-06, -4.848507908224041e-06, -4.832116618855080e-06, -4.974165328395186e-06, -1.803970858452403e-03, -3.339814427323945e-03, -3.605485578357927e-03, -3.550871171939572e-03, -3.333021758332149e-03, -3.333021758332149e-03, -5.730553189317776e-01, -5.505524731789704e-01, -6.370124827439307e-04, -7.191292692311158e-01, -5.661855369398138e-01, -5.661855369398138e-01, -4.949250978740399e+00, -4.912401181387213e+00, -1.729899384347162e+00, -1.750247141303665e+00, -5.137997605234280e+00, -5.137997605234275e+00, -5.931857977636676e-06, -5.992447201052436e-06, -5.938540404835878e-06, -2.429580144506570e-06, -5.962114153358364e-06, -5.962114153358364e-06, -3.978663972594695e-05, -4.012993180490994e-05, -3.959660564838305e-05, -3.988287473469392e-05, -4.028471361387398e-05, -4.571570930335490e-05, -9.242567131683989e-03, -1.572490027355872e-02, -8.887168691746310e-03, -1.171709365980708e-02, -1.017768454702448e-02, -8.560647639067836e-03, -1.219043110863393e+00, -4.140961904439837e-01, -1.306631440579021e+00, -1.021005855845258e-04, -1.174592729000687e+00, -1.174592729000687e+00, -1.532919798201385e+05, -2.209207035558296e+00, -8.683509435273956e+00, -6.605625787887988e+00, -1.303979960079591e+05, -2.721925469598712e+00, -1.947674122759503e-01, -8.972082383641283e-02, -2.841928846553891e-02, -1.388309610452539e-01, -1.245693711875564e-01, -1.245693711875564e-01, -1.575977732609119e-01, -1.513050805995767e-02, -2.057738393107677e-02, -3.417811597772770e-02, -2.563764386122511e-02, -1.626078950753416e-02, -9.682993712160486e-03, -9.989635947394852e-02, -1.169292832491197e-01, -3.929957249038713e-02, -7.271044345159157e-02, -7.271044345159160e-02, -1.764950081061940e-02, -1.624268074603860e+00, -1.406701524876550e+00, -6.127966129798635e-02, -2.685001425503192e+00, -1.714359929234661e+00, -1.932703179155139e+00, -2.442354501706089e+00, -4.801416456963414e+00, -2.058576552663161e+00, -3.826113235374490e+00, -3.826113235374485e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_tpss_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.553028533403943e-04, 1.553060152525317e-04, 1.553195144523438e-04, 1.552681061196581e-04, 1.553045212217794e-04, 1.553045212217794e-04, -5.295704463602061e-04, -5.293638943106338e-04, -5.230365792572778e-04, -5.254666120393311e-04, -5.295106109493756e-04, 1.712990668530149e-03, -1.877921041005190e-03, 1.600416011003178e-03, 1.158276881443703e-03, 1.343144460769205e-03, 1.613463449094925e-03, 1.613463449094925e-03, 3.971855686280651e-03, 4.398493793218711e-03, -6.935918520053238e-04, 2.393736978836057e-04, 4.088942383451272e-03, 4.088942383451272e-03, 7.090639155253080e-09, 8.843788877662198e-09, 2.133874407289706e-06, 3.777192289985913e-11, 8.977251976771543e-09, 8.977251976772599e-09, 1.327192387832862e-02, 1.341497078003986e-02, 1.328766154017351e-02, 7.827353745426298e-04, 1.334340720652826e-02, 1.334340720652826e-02, -1.126088257071842e-03, -1.107518146544142e-03, -1.130859339293568e-03, -1.120469525483508e-03, -1.101549483788544e-03, 2.158279371955326e-03, 2.397095816221146e-02, 6.187748648522881e-02, 1.578765777440824e-02, 3.187412178724292e-02, 3.243282066546947e-02, 2.548910470401492e-03, -1.560885192826283e-04, 1.037643516286591e-03, -1.779999729764478e-04, 1.055206746953575e-02, 2.067017632274855e-04, 2.067017632274855e-04, -3.023074456143677e-08, 8.725796251109461e-11, 1.608419229388890e-10, -3.526653629042714e-05, -3.481798560312385e-08, 7.493823808817282e-11, 6.616430112271323e-01, 3.001271065336189e-01, 7.667341384037245e-03, 4.688422623865627e-01, 4.197796550448066e-01, 4.197796550448066e-01, 4.854341676852832e-01, 2.428563763779950e-02, 4.482764636240087e-02, 8.795103553384276e-02, 6.121645588556197e-02, 5.465042652873639e-03, 4.299575382452667e-02, -3.107291676449878e-03, 4.531988004393960e-03, -6.245058499013256e-03, 8.144948671787547e-03, 8.144948671787545e-03, -3.580298350339336e-03, 1.312211120588164e-06, 4.956694723540987e-06, 1.924590970552838e-02, -1.392407300421027e-04, 4.869158786407904e-05, 3.824046606164436e-09, 1.559291534511404e-13, 1.063438430219482e-11, 5.059669407427746e-05, 5.536611480978758e-11, 5.536611480983249e-11])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
