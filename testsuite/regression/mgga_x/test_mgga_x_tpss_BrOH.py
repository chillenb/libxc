
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_tpss_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.235262784818804e+01, -2.235268237915558e+01, -2.235303467135495e+01, -2.235214478337361e+01, -2.235265562692783e+01, -2.235265562692783e+01, -3.451551058993517e+00, -3.451561083306279e+00, -3.452110372435364e+00, -3.453917692308699e+00, -3.451559043455111e+00, -3.451559043455111e+00, -6.685170072521840e-01, -6.683697204586534e-01, -6.669040121494002e-01, -6.728307027513568e-01, -6.684624474594172e-01, -6.684624474594172e-01, -2.065256989006580e-01, -2.075042166227357e-01, -7.768414150531807e-01, -1.740145292993683e-01, -2.067855060341145e-01, -2.067855060341145e-01, -1.700699695358424e-02, -1.780954026213681e-02, -7.036474473392135e-02, -8.175611152703915e-03, -1.762404115359311e-02, -1.762404115359311e-02, -5.473790262014820e+00, -5.474768421626617e+00, -5.473939470667713e+00, -5.474697576975498e+00, -5.474225197697143e+00, -5.474225197697143e+00, -2.079248903687047e+00, -2.093287296722521e+00, -2.077588235461929e+00, -2.088479241984589e+00, -2.091032076430941e+00, -2.091032076430941e+00, -5.858987175234877e-01, -6.025538016829319e-01, -5.490783948457164e-01, -5.490495733483490e-01, -6.097961583172720e-01, -6.097961583172720e-01, -1.430150586031361e-01, -2.271979333641957e-01, -1.403001573956854e-01, -1.811118947068374e+00, -1.561052951588796e-01, -1.561052951588796e-01, -7.887066913617753e-03, -9.012320642675842e-03, -6.754987126586579e-03, -9.508845448133549e-02, -8.211575926755275e-03, -8.211575926755275e-03, -5.867301115267273e-01, -6.062428166924619e-01, -6.020158108805108e-01, -5.970404158831775e-01, -5.997538247296890e-01, -5.997538247296890e-01, -5.524533099286595e-01, -5.289958114860277e-01, -5.486015991735734e-01, -5.641552144074063e-01, -5.564770559603203e-01, -5.564770559603203e-01, -6.293263844965793e-01, -2.684374239676307e-01, -3.019978309705112e-01, -3.626158801383698e-01, -3.301613164677206e-01, -3.301613164677206e-01, -4.711143928731227e-01, -6.561472314944276e-02, -8.693963106857588e-02, -3.367115844849339e-01, -1.184000295728130e-01, -1.184000295728129e-01, -1.992234164582884e-02, -2.468790697302122e-03, -4.689135495012226e-03, -1.128401867760965e-01, -6.979305648310677e-03, -6.979305648310666e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_tpss_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.770635626656670e+01, -2.770641009593818e+01, -2.770686169055084e+01, -2.770598675236035e+01, -2.770638274776839e+01, -2.770638274776839e+01, -4.196046693799294e+00, -4.196084313771197e+00, -4.197399317714225e+00, -4.197741304073654e+00, -4.196073900920337e+00, -4.196073900920337e+00, -7.776789374354913e-01, -7.762652718275322e-01, -7.368610260025029e-01, -7.465495136970065e-01, -7.771680830143025e-01, -7.771680830143025e-01, -2.013377099111771e-01, -2.057164388103885e-01, -9.640362477667804e-01, -1.532542517317718e-01, -2.026181128931643e-01, -2.026181128931643e-01, -2.256059466655220e-02, -2.361325946588539e-02, -8.811467011816519e-02, -1.089008803826289e-02, -2.336756077553998e-02, -2.336756077553998e-02, -6.743538100628674e+00, -6.743119519677775e+00, -6.743574567799151e+00, -6.743244947699562e+00, -6.743217857508202e+00, -6.743217857508202e+00, -2.432807427041812e+00, -2.463387029129479e+00, -2.422213352801218e+00, -2.446544106418837e+00, -2.466286683394535e+00, -2.466286683394535e+00, -7.140546107471492e-01, -7.800627263210363e-01, -6.688649555697136e-01, -7.054965664082764e-01, -7.449584470027771e-01, -7.449584470027771e-01, -1.479548488542205e-01, -1.988990377227779e-01, -1.435115503418754e-01, -2.374726228401853e+00, -1.469655942510215e-01, -1.469655942510215e-01, -1.050617042087488e-02, -1.200160751489128e-02, -8.996092894946961e-03, -1.118268100215054e-01, -1.093514334117983e-02, -1.093514334117983e-02, -7.439095350686442e-01, -7.405951246962587e-01, -7.398527769565378e-01, -7.403151772567382e-01, -7.399208612906689e-01, -7.399208612906689e-01, -7.255669577931100e-01, -6.559225066353473e-01, -6.809304419482592e-01, -6.924380801199039e-01, -6.870237556632744e-01, -6.870237556632744e-01, -8.174480745367791e-01, -2.510022097292314e-01, -3.153103134300997e-01, -4.287000666121981e-01, -3.754113572745330e-01, -3.754113572745328e-01, -5.682612670067806e-01, -8.330344927529421e-02, -1.056858108036452e-01, -4.051662935691135e-01, -1.271081677693214e-01, -1.271081677693214e-01, -2.640211454082000e-02, -3.291322021397735e-03, -6.249643296075492e-03, -1.209001516858436e-01, -9.295633895651891e-03, -9.295633895651875e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_tpss_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.333653402832750e-08, -1.333688146627097e-08, -1.333766027745170e-08, -1.333198842700698e-08, -1.333672368733336e-08, -1.333672368733336e-08, -1.230051248725382e-05, -1.230264151850036e-05, -1.236401427041615e-05, -1.232015486465626e-05, -1.230096868134107e-05, -1.230096868134107e-05, -5.359872092746012e-03, -5.372728493649800e-03, -5.649260250891764e-03, -5.546594142193263e-03, -5.364827201286275e-03, -5.364827201286275e-03, -6.283689536357399e-01, -6.109095204155338e-01, -1.632663372512107e-03, -1.202972190976907e+00, -6.236688172866787e-01, -6.236688172866787e-01, -5.152409126874017e+00, -5.168962677479707e+00, -2.273448735611159e+00, -3.634057499217950e+00, -5.369632207823881e+00, -5.369632207823881e+00, -5.969098652382681e-06, -6.029563992801167e-06, -5.975295542521202e-06, -6.022297382846182e-06, -5.999930415139104e-06, -5.999930415139104e-06, -5.568093055970923e-05, -5.364465355245414e-05, -5.492988250645237e-05, -5.327120971345788e-05, -5.544929266073895e-05, -5.544929266073895e-05, -2.055628601565416e-02, -2.282213498076679e-02, -2.243831878238985e-02, -2.372191223013501e-02, -2.042844155100267e-02, -2.042844155100267e-02, -1.369718644541904e+00, -4.514565648712227e-01, -1.573711369844349e+00, -1.589094865090311e-04, -1.487403701949620e+00, -1.487403701949620e+00, -3.855024161743376e+00, -3.864131398288265e+00, -1.105921622150502e+01, -2.322679473009201e+00, -5.707580585783939e+00, -5.707580585783937e+00, -1.656252594880111e-01, -9.586692021050282e-02, -1.164949660082053e-01, -1.367018511911787e-01, -1.261066514680094e-01, -1.261066514680093e-01, -9.526710979279149e-02, -1.708740697466087e-02, -2.490635610928950e-02, -4.289342656211978e-02, -3.210665846137489e-02, -3.210665846137490e-02, -1.539070389068237e-02, -2.242421157984183e-01, -1.305886240248723e-01, -7.937522222444059e-02, -9.263151097907922e-02, -9.263151097907932e-02, -2.920483837910687e-02, -1.901924797299995e+00, -1.959743848453408e+00, -1.337264871521083e-01, -2.314110393817338e+00, -2.314110393817341e+00, -3.874759935271656e+00, -6.638767342950680e+00, -5.717845759841814e+00, -2.843269476020692e+00, -8.334100216261239e+00, -8.334100216261236e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_tpss_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_tpss_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_tpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.858610408149217e-03, 1.858678595766910e-03, 1.858974694294128e-03, 1.857866028492587e-03, 1.858646337720633e-03, 1.858646337720633e-03, 2.729299418615781e-03, 2.730210960504756e-03, 2.758616316398820e-03, 2.761241071938429e-03, 2.729449503610123e-03, 2.729449503610123e-03, 4.104501155361061e-03, 4.107177497513386e-03, 3.930338101294547e-03, 4.375849230014768e-03, 4.106328586925482e-03, 4.106328586925482e-03, 7.058298343797701e-03, 8.136935689414473e-03, 5.555003818298374e-04, 7.456435750004587e-04, 7.395069134320330e-03, 7.395069134320330e-03, 2.966815041086214e-11, 3.566577723415116e-11, 3.405099499645024e-07, 3.074110691952456e-13, 4.029487740575307e-11, 4.029487740575231e-11, 1.323386730990697e-02, 1.337607367977382e-02, 1.324999344438387e-02, 1.336046192412326e-02, 1.330427397018016e-02, 1.330427397018016e-02, 2.738862455089774e-03, 2.812141615971278e-03, 2.583040747331795e-03, 2.634272825569564e-03, 3.003314611978739e-03, 3.003314611978739e-03, 3.120276596151814e-02, 2.463902526968487e-02, 2.311227084561483e-02, 1.751394762392648e-02, 3.760907975158466e-02, 3.760907975158466e-02, 6.395366422452174e-05, 1.755605063867317e-03, 7.932803512722746e-05, 3.364700027220200e-03, 2.873025190214121e-04, 2.873025190214121e-04, 1.847818101672697e-13, 6.162563539516345e-13, 3.703168419785303e-13, 6.249821660120884e-06, 7.859062509077030e-13, 7.859062509077016e-13, 2.681042695659875e-01, 2.296541977278459e-01, 2.595859032751737e-01, 2.783771790810473e-01, 2.699982580921451e-01, 2.699982580921451e-01, 7.370024376412083e-02, 2.606255492174051e-02, 4.695573463810535e-02, 8.475904398654843e-02, 6.233910188442458e-02, 6.233910188442460e-02, 1.718882108465906e-02, 3.351630417756782e-03, 7.936814374574944e-03, 2.305715414794499e-02, 1.501690108364519e-02, 1.501690108364519e-02, 2.312035498138564e-02, 1.085765812756576e-07, 1.476918826441810e-06, 3.377863573152424e-02, 3.734608815266720e-05, 3.734608815266736e-05, 1.796758243841726e-10, 2.420300452458872e-16, 5.773656533963882e-15, 4.119145154913323e-05, 5.433801534457243e-13, 5.433801534457173e-13]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
