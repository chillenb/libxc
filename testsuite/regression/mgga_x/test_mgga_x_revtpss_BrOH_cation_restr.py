
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_revtpss_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.990391377412478e+01, -1.990397421011460e+01, -1.990425804443654e+01, -1.990335889573926e+01, -1.990382786975947e+01, -1.990382786975947e+01, -3.234944274553457e+00, -3.234940169035268e+00, -3.234891083518711e+00, -3.235203454901593e+00, -3.234833775077382e+00, -3.706604559564113e+00, -6.332783260003031e-01, -7.358529929808288e-01, -7.253653179507947e-01, -7.269315747563921e-01, -7.266397524601369e-01, -7.266397524601369e-01, -1.988483961262681e-01, -2.005478142179547e-01, -7.446297562288419e-01, -1.736317025365161e-01, -1.828181969932939e-01, -1.828181969932939e-01, -1.008401655222408e-02, -1.061251994931641e-02, -5.731224625048077e-02, -5.827805741988443e-03, -7.321360888249241e-03, -7.321360888249241e-03, -5.556729563580403e+00, -5.557811167381709e+00, -5.556783946595181e+00, -4.866507824758401e+00, -5.557275561199954e+00, -5.557275561199954e+00, -1.826757278562736e+00, -1.838583686591806e+00, -1.818240665491659e+00, -1.828627226147893e+00, -1.837414630838800e+00, -2.105552357510253e+00, -6.243966504029496e-01, -6.797940106078887e-01, -5.779879537345085e-01, -6.006034235087522e-01, -6.346436628354245e-01, -5.536247382153061e-01, -8.757031029975122e-02, -2.135968867698068e-01, -8.102718564975862e-02, -2.043900164336899e+00, -1.472818728322747e-01, -1.472818728322747e-01, -2.580266626392717e-03, -5.697353355012517e-03, -4.355762995006376e-03, -5.452631588912357e-02, -3.011503629504510e-03, -5.247559739093688e-03, -6.287950257019979e-01, -6.256789865161527e-01, -5.511033217035580e-01, -6.277426439337024e-01, -6.272949970060109e-01, -6.272949970060109e-01, -6.118502634312915e-01, -5.239444957271505e-01, -5.489924152523533e-01, -5.745271514739396e-01, -5.614621513250921e-01, -4.902445289179169e-01, -7.122122165124692e-01, -2.085659973049198e-01, -2.922139548259356e-01, -3.246225815311647e-01, -3.270649672458050e-01, -3.270649672458050e-01, -4.214536290800031e-01, -5.494833420681106e-02, -7.380058433412233e-02, -3.569508395926230e-01, -6.939555289989853e-02, -1.088560988380791e-01, -1.422652960078061e-02, -1.523282810792290e-03, -3.197037755882507e-03, -1.030067541066272e-01, -4.855594804140438e-03, -4.855594804140433e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_revtpss_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.680343652264650e+01, -2.680351656620545e+01, -2.680389335678717e+01, -2.680270236676317e+01, -2.680332345159164e+01, -2.680332345159164e+01, -4.242675846994047e+00, -4.242719571542516e+00, -4.243955546360267e+00, -4.243838452243452e+00, -4.243409925615888e+00, -4.486966364684811e+00, -8.236538745643285e-01, -7.930107992676786e-01, -7.546370272033703e-01, -7.688392582716065e-01, -7.656563555270943e-01, -7.656563555270943e-01, -1.930561121039366e-01, -1.970714983383020e-01, -9.792375961189348e-01, -1.589462370565786e-01, -1.647907075913578e-01, -1.647907075913578e-01, -1.341972039018262e-02, -1.411952301711801e-02, -7.307588651116992e-02, -7.766170312005376e-03, -9.751901013890516e-03, -9.751901013890516e-03, -6.635323399991618e+00, -6.634998847703734e+00, -6.635295347603487e+00, -6.542623349137469e+00, -6.635165892224053e+00, -6.635165892224053e+00, -2.377351668297459e+00, -2.395720998718805e+00, -2.364246107533603e+00, -2.380104571348953e+00, -2.394017260989055e+00, -2.510732356516651e+00, -7.655874144993192e-01, -8.200600121397620e-01, -7.047991974377517e-01, -7.363341682933237e-01, -7.772257861280363e-01, -7.428958865579510e-01, -1.165700060007698e-01, -1.928660175748277e-01, -1.078859935541236e-01, -2.500169276801024e+00, -1.399599051567897e-01, -1.399599051567897e-01, -3.440351105338703e-03, -7.592748799078645e-03, -5.802953788475777e-03, -7.265380963186556e-02, -4.015324251353923e-03, -6.991622614491272e-03, -7.336902213855262e-01, -7.359520459556262e-01, -7.378070358845130e-01, -7.344211352127555e-01, -7.347547621234615e-01, -7.347547621234614e-01, -7.146296471208184e-01, -6.416576588036900e-01, -6.715205069419218e-01, -6.923278732319647e-01, -6.827554286814179e-01, -6.600674121018475e-01, -8.647389796588583e-01, -2.741094687120513e-01, -3.053675160740901e-01, -4.222323364953199e-01, -3.706630115825545e-01, -3.706630115825544e-01, -5.538923964803655e-01, -7.029782964171070e-02, -9.167124206384153e-02, -4.339275045394876e-01, -9.240440760601658e-02, -1.184011317252852e-01, -1.891894070560865e-02, -2.030965030714310e-03, -4.261484707054290e-03, -1.135739917214249e-01, -6.469280435651489e-03, -6.469280435651483e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revtpss_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.785509330936940e-09, -6.785543388163325e-09, -6.785627301552584e-09, -6.785129468020483e-09, -6.785399710279728e-09, -6.785399710279728e-09, -4.767022015455479e-06, -4.768191923580007e-06, -4.798755502186714e-06, -4.784656042447530e-06, -4.788156329378399e-06, -7.245412951756745e-06, -1.505663291604481e-03, -3.158753466744418e-03, -3.287846571634436e-03, -3.281387944444316e-03, -3.281058787597710e-03, -3.281058787597710e-03, -5.735530434233149e-01, -5.555272535630552e-01, -3.965330738943978e-04, -8.028363210319708e-01, -7.574453217229785e-01, -7.574453217229778e-01, -3.756488236025514e+00, -3.913480450379800e+00, -1.790296169719279e+00, -2.759676922302113e+00, -3.840020394661700e+00, -3.840020394661700e+00, -8.429493125300978e-06, -8.505298439080010e-06, -8.433877235610288e-06, -2.393556169600927e-06, -8.467319527156912e-06, -8.467319527156912e-06, -3.839989879749059e-05, -3.897812180535835e-05, -3.787707475351188e-05, -3.842357529829991e-05, -3.898736010137239e-05, -6.019560142345301e-05, -1.557633737990386e-02, -2.546080446282402e-02, -1.398596307202394e-02, -1.853993809668442e-02, -1.668761619639237e-02, -8.709808238747759e-03, 2.060098882222028e-01, -4.095970427864745e-01, 3.624598125126580e-01, -1.686799576371478e-04, -1.313289684550200e+00, -1.313289684550201e+00, 8.569301936412057e+05, -2.439644002376627e+00, -1.972061524645126e+01, 3.041593390920613e+00, 4.613449035361496e+05, -7.568627919856981e+00, -2.234922110890154e-01, -1.085747277147975e-01, -2.734267722129217e-02, -1.633621572191500e-01, -1.469017227594996e-01, -1.469017227594996e-01, -2.179439274075581e-01, -2.422664678930754e-02, -3.248711438145152e-02, -5.197934489384127e-02, -3.983050038238568e-02, -1.666876549420581e-02, -1.641047008689630e-02, -6.758011550318171e-02, -1.250345441644521e-01, -3.772931741201575e-02, -8.584610351589826e-02, -8.584610351589822e-02, -1.725336148565064e-02, -1.825809397721620e+00, -1.542366854203143e+00, -9.004485114906981e-02, 7.130233813072002e-01, -2.031896161392261e+00, -1.793760705988381e+00, -2.988458329828021e+00, -8.566349882620138e+00, -2.268302617460323e+00, -1.078675535858392e+01, -1.078675535858393e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revtpss_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.553103355137365e-04, 1.553139682816644e-04, 1.553283468305688e-04, 1.552745988728305e-04, 1.553030139351567e-04, 1.553030139351567e-04, -5.306611526724353e-04, -5.304278808121622e-04, -5.241729159643874e-04, -5.266753939383726e-04, -5.264632254956952e-04, 4.300315387458236e-03, -1.977316349178808e-03, 6.244250079258579e-03, 4.801361838744384e-03, 5.453068969425644e-03, 5.297332638992135e-03, 5.297332638992135e-03, 9.777762427637454e-03, 1.083451478689774e-02, -5.518747293747750e-04, 1.190673889878734e-03, 3.237523823428271e-03, 3.237523823428267e-03, 3.056488663603619e-10, 4.205810631887417e-10, 8.746483477915019e-07, 1.224768355264878e-11, 6.319039322114186e-11, 6.319039322114186e-11, 1.906870231096640e-02, 1.924539580248711e-02, 1.907883544705720e-02, 7.827549275532276e-04, 1.915690967629264e-02, 1.915690967629264e-02, -1.123920813889822e-03, -1.103175360280430e-03, -1.132433002676997e-03, -1.121759323032141e-03, -1.104940080954716e-03, 5.817989437398326e-03, 5.091360987690458e-02, 1.069396183912614e-01, 3.351047048264755e-02, 5.400301534195672e-02, 5.766551923720978e-02, 2.203736535011386e-03, -1.039482586459168e-04, 3.018207605579431e-03, -8.335690186733466e-05, 1.950656566618236e-02, 6.624527724546207e-04, 6.624527724546212e-04, -2.553531180824801e-09, 9.085883614382994e-12, 5.470913411740995e-11, -2.983222779093524e-05, -1.609925139437391e-08, 3.298600921094879e-11, 7.213281136812849e-01, 3.454157314684804e-01, 7.759518702218329e-03, 5.241006668139315e-01, 4.702886795081545e-01, 4.702886795081543e-01, 6.477097845314306e-01, 4.520206579318749e-02, 7.280521490886896e-02, 1.315954128143358e-01, 9.523635837613946e-02, 5.127887292443394e-03, 7.994992371174417e-02, -2.128043682102258e-03, 1.234482614386357e-02, -6.340319611859287e-03, 2.139884181307464e-02, 2.139884181307469e-02, -3.727785199889203e-03, 7.091327143036957e-07, 3.073830400655937e-06, 4.944791926452741e-02, -8.938608469360378e-05, 8.921005524758387e-05, 5.675281216835855e-10, 1.675757755370574e-14, 3.319786016652271e-12, 7.209166912930510e-05, 3.807437515444528e-11, 3.807437515450855e-11])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
