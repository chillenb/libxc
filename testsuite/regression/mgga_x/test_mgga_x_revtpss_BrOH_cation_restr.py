
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_revtpss_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.257942685039749e+01, -2.257949455200482e+01, -2.257991909794172e+01, -2.257891544634087e+01, -2.257942366840391e+01, -2.257942366840391e+01, -3.397869389497161e+00, -3.397883059895292e+00, -3.398477792604733e+00, -3.400203041654150e+00, -3.398967251281170e+00, -3.398967251281170e+00, -6.550069385929553e-01, -6.546648423009871e-01, -6.483486823297447e-01, -6.548584229742043e-01, -6.527784398324745e-01, -6.527784398324745e-01, -1.967431249219413e-01, -1.980008537937660e-01, -7.544896143243616e-01, -1.670769250551763e-01, -1.772450604770200e-01, -1.772450604770200e-01, -1.008393578702906e-02, -1.061234309354621e-02, -5.716346742797559e-02, -5.827612263113680e-03, -7.321093888746766e-03, -7.321093888746765e-03, -5.551648937188704e+00, -5.552744904141900e+00, -5.551806749321920e+00, -5.552770413218101e+00, -5.552149207082286e+00, -5.552149207082286e+00, -2.062622312704709e+00, -2.080104085889858e+00, -2.057937347423772e+00, -2.073406719505491e+00, -2.074560637160681e+00, -2.074560637160681e+00, -5.902629120566683e-01, -6.103496013018943e-01, -5.351484501761411e-01, -5.341598024836409e-01, -5.990659419740344e-01, -5.990659419740344e-01, -1.323886650043135e-01, -2.108182470647335e-01, -1.242870580354794e-01, -1.809138094799990e+00, -1.445344456483157e-01, -1.445344456483157e-01, -4.496826322446205e-03, -5.696942455028839e-03, -4.355513173398902e-03, -8.862713119968797e-02, -5.247067323263532e-03, -5.247067323263532e-03, -5.850153298880205e-01, -6.040081394426821e-01, -6.000490955991806e-01, -5.949794255558627e-01, -5.977588636909393e-01, -5.977588636909393e-01, -5.465598264311196e-01, -5.209784453066419e-01, -5.429323542321473e-01, -5.609204100249602e-01, -5.520660128824110e-01, -5.520660128824109e-01, -6.370546716846391e-01, -2.515900188789803e-01, -2.873432269604482e-01, -3.551647862775365e-01, -3.191380018311505e-01, -3.191380018311506e-01, -4.691080708673654e-01, -5.488504291973674e-02, -7.342901896014981e-02, -3.394754038769979e-01, -1.073309390467866e-01, -1.073309390467866e-01, -1.422073630923048e-02, -1.523235854140461e-03, -3.197007952057089e-03, -1.021828353572977e-01, -4.855262881361226e-03, -4.855262881361222e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_revtpss_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.717776287932370e+01, -2.717782366280122e+01, -2.717829973938786e+01, -2.717739989675288e+01, -2.717784199557532e+01, -2.717784199557532e+01, -4.213228937760545e+00, -4.213260421170600e+00, -4.214105846678382e+00, -4.213616391303468e+00, -4.213451791677334e+00, -4.213451791677334e+00, -7.976103731129219e-01, -7.961065095336365e-01, -7.571725683225350e-01, -7.648541664916410e-01, -7.638336090594235e-01, -7.638336090594235e-01, -1.919090335915160e-01, -1.957775678463219e-01, -9.514568481762156e-01, -1.484851033752266e-01, -1.591015194376791e-01, -1.591015194376791e-01, -1.341939823991975e-02, -1.411881760462426e-02, -7.251302247408739e-02, -7.765396905421484e-03, -9.750834312730447e-03, -9.750834312730446e-03, -6.627695162020616e+00, -6.627436514739943e+00, -6.627823741391156e+00, -6.627589934162463e+00, -6.627492077393855e+00, -6.627492077393855e+00, -2.438584194733986e+00, -2.469733891082217e+00, -2.426224694069147e+00, -2.454772750914325e+00, -2.461372094717851e+00, -2.461372094717851e+00, -7.175567574502589e-01, -7.923929876803398e-01, -6.587023851628108e-01, -6.995015927082625e-01, -7.292565756817425e-01, -7.292565756817425e-01, -1.352398461702766e-01, -1.898531810405947e-01, -1.300311214730431e-01, -2.389377651459970e+00, -1.342621495376052e-01, -1.342621495376052e-01, -5.993262054573546e-03, -7.591106235920902e-03, -5.801955489565132e-03, -1.029597234494227e-01, -6.989654779870130e-03, -6.989654779870130e-03, -7.296960178293461e-01, -7.225803817935275e-01, -7.231660404783745e-01, -7.248400215406531e-01, -7.238206029581061e-01, -7.238206029581061e-01, -7.190533511522638e-01, -6.349341642547228e-01, -6.586536164628126e-01, -6.722582764554872e-01, -6.654003131495817e-01, -6.654003131495815e-01, -8.308232047734537e-01, -2.416411315061136e-01, -3.029316714309765e-01, -4.205552050599443e-01, -3.634467569509621e-01, -3.634467569509622e-01, -5.623104069338298e-01, -7.005726286272772e-02, -9.031440141515643e-02, -4.087556748222699e-01, -1.138955360715985e-01, -1.138955360715984e-01, -1.889584641347185e-02, -2.030777218665803e-03, -4.261365532966636e-03, -1.110623029875292e-01, -6.467953968523785e-03, -6.467953968523779e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revtpss_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.006628073171569e-08, -2.006677882572914e-08, -2.006792327569333e-08, -2.006054475354614e-08, -2.006456230361404e-08, -2.006456230361404e-08, -1.116142107941638e-05, -1.116434799543125e-05, -1.124492764166553e-05, -1.124482696870508e-05, -1.123422576510605e-05, -1.123422576510605e-05, -3.898517739056114e-03, -3.923435797357402e-03, -4.520053467877348e-03, -4.609549933208299e-03, -4.563743929416920e-03, -4.563743929416920e-03, -6.130952193636129e-01, -6.024838590274851e-01, -1.090293174147906e-03, -1.043777909006325e+00, -9.022230409067157e-01, -9.022230409067156e-01, -3.819684990583800e+00, -4.035102832751408e+00, -2.221834479546410e+00, -3.472269550711002e+00, -4.410864221730594e+00, -4.410864221730610e+00, -8.475217068705674e-06, -8.550860548238936e-06, -8.478673741663509e-06, -8.545433268005497e-06, -8.513435925945535e-06, -8.513435925945535e-06, -7.310794477176359e-05, -7.186026732345080e-05, -7.074526771926337e-05, -6.949706295676934e-05, -7.366247982159042e-05, -7.366247982159042e-05, -2.366734098407008e-02, -2.153311283529417e-02, -2.245589311920159e-02, -1.601239030350421e-02, -2.466978148794412e-02, -2.466978148794412e-02, -1.398967686856897e+00, -4.438511836637157e-01, -1.563072246319828e+00, -1.205618957072991e-04, -1.545863400650187e+00, -1.545863400650187e+00, -4.575405384035037e+00, -4.086562800275944e+00, -2.566204907358649e+01, -2.421587739591804e+00, -1.194205937732893e+01, -1.194205937732890e+01, -1.922272550738097e-01, -1.138301942401979e-01, -1.357193426479201e-01, -1.588864508359511e-01, -1.466640934912561e-01, -1.466640934912561e-01, -1.055687667906445e-01, -2.645073693432988e-02, -3.698027057435004e-02, -6.055019516022436e-02, -4.641175306752039e-02, -4.641175306752041e-02, -1.386748028197597e-02, -2.273218122426749e-01, -1.416471667726712e-01, -9.228206586244145e-02, -1.094887612290153e-01, -1.094887612290152e-01, -3.727588202373244e-02, -2.030863152394237e+00, -1.997283939980314e+00, -1.447927167288818e-01, -2.564030268503987e+00, -2.564030268503991e+00, -3.077021918370099e+00, -2.005742298924254e+01, -9.706634210323768e+00, -2.625951900083167e+00, -1.508403867666399e+01, -1.508403867666403e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revtpss_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.930150125891764e-03, 2.930249543134934e-03, 2.930667546103039e-03, 2.929197470445368e-03, 2.929970906994934e-03, 2.929970906994934e-03, 2.858031603238109e-03, 2.859228392271556e-03, 2.894012928237697e-03, 2.909626811258158e-03, 2.895674101488374e-03, 2.895674101488374e-03, 3.203908475511767e-03, 3.228924870979694e-03, 3.750148105600056e-03, 4.523375875982007e-03, 4.248894079373361e-03, 4.248894079373361e-03, 1.120706187896281e-02, 1.266402683624093e-02, 1.701398948133875e-04, 1.650384018866012e-03, 4.348998628568610e-03, 4.348998628568606e-03, 3.899661161149660e-12, 5.951404792006552e-12, 2.877965925205977e-07, 6.211713129778656e-14, 5.080081939949563e-13, 5.080081939949588e-13, 1.902459009380423e-02, 1.920042828718269e-02, 1.903557712167812e-02, 1.919067388450648e-02, 1.911189974468227e-02, 1.911189974468227e-02, 6.154409793490362e-03, 6.423827396759925e-03, 5.824777214940291e-03, 6.049159066718991e-03, 6.470925251290583e-03, 6.470925251290583e-03, 4.523628850142939e-02, 3.026443266644020e-02, 2.584129029144720e-02, 1.098476945496252e-02, 4.939791392256317e-02, 4.939791392256317e-02, 1.362389007045573e-04, 3.645192279690298e-03, 9.181830975108696e-05, 2.959602685187834e-03, 7.945649353674915e-04, 7.945649353674919e-04, 1.151198099587840e-14, 6.406066027387732e-14, 4.377595476617426e-13, 1.117532218662440e-05, 3.192527285927195e-13, 3.192527285927187e-13, 3.492919395690319e-01, 2.800297983280433e-01, 3.157199071364791e-01, 3.431892122465856e-01, 3.301651910581078e-01, 3.301651910581077e-01, 8.013222319663872e-02, 4.647434788500428e-02, 7.379507058032038e-02, 1.242070832953952e-01, 9.425544368291358e-02, 9.425544368291359e-02, 2.053863821178912e-02, 7.483046071508389e-03, 1.476340249893056e-02, 3.405411127499994e-02, 2.587382400766090e-02, 2.587382400766091e-02, 3.879349366880173e-02, 1.864305261592463e-07, 1.547070425349695e-06, 5.084482454772891e-02, 8.560451892945351e-05, 8.560451892945354e-05, 2.188766829605853e-11, 2.983649659067257e-17, 7.437414790165125e-15, 6.202930813502489e-05, 3.143711253866527e-13, 3.143711253866520e-13])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
