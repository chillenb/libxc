
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_7_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_7", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.117249567197097e+01, -2.117260574034795e+01, -2.117309277135882e+01, -2.117145863250214e+01, -2.117231515566002e+01, -2.117231515566002e+01, -3.110269165147311e+00, -3.110348184957781e+00, -3.112493823424597e+00, -3.111906755678575e+00, -3.111646247430839e+00, -3.837692505823322e+00, -5.791411728423050e-01, -7.232951908606473e-01, -7.000433780819310e-01, -7.077378736014962e-01, -7.060684974080144e-01, -7.060684974080144e-01, -1.838476268915474e-01, -1.870004039469162e-01, -6.843317245710377e-01, -1.360126719517500e-01, -1.541439190150527e-01, -1.541439190150527e-01, -6.116730407791191e-03, -6.438157968997560e-03, -3.556450238639020e-02, -3.532465681769836e-03, -4.438873052050810e-03, -4.438873052050810e-03, -5.709760277036238e+00, -5.710317180500740e+00, -5.709784240739615e+00, -5.298015677715780e+00, -5.710043522212535e+00, -5.710043522212535e+00, -1.721638255597393e+00, -1.739238347534943e+00, -1.708788847100994e+00, -1.724124221170424e+00, -1.737757914982535e+00, -2.166833106720780e+00, -6.491663252284990e-01, -7.014265924491673e-01, -6.000800924570074e-01, -6.243793494054045e-01, -6.593394013250475e-01, -5.660828774574237e-01, -8.486107100134904e-02, -1.812597855420004e-01, -7.871291231021124e-02, -2.122133004634732e+00, -1.103197212454959e-01, -1.103197212454959e-01, -2.550904010617007e-03, -3.453292279772592e-03, -2.640577702618007e-03, -5.341534208820561e-02, -2.977133513898426e-03, -3.181069984488716e-03, -6.402360085109225e-01, -6.391249514499520e-01, -6.178317598975163e-01, -6.398701831557075e-01, -6.397139209733298e-01, -6.397139209733298e-01, -6.232431780058088e-01, -5.447538754428797e-01, -5.699946163569083e-01, -5.925435440532336e-01, -5.813358244878377e-01, -5.143020643351899e-01, -7.369174823104887e-01, -1.914856998032458e-01, -2.826955457481157e-01, -3.053956810860678e-01, -3.292422700908656e-01, -3.292422700908655e-01, -4.071346047337484e-01, -3.403627364740645e-02, -4.644539185452670e-02, -3.701732929022774e-01, -6.745727769420078e-02, -7.388801985625082e-02, -8.632762037740476e-03, -9.230752811511035e-04, -1.937589672773828e-03, -6.934421303344018e-02, -2.943486141892969e-03, -2.943486141892966e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_7_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_7", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.097325377647976e+01, -3.097335573202828e+01, -3.097382937835351e+01, -3.097231303472482e+01, -3.097310469381414e+01, -3.097310469381414e+01, -4.607098611546745e+00, -4.607319699680962e+00, -4.613218826113886e+00, -4.611254827982730e+00, -4.610986448428208e+00, -4.435808828288597e+00, -7.722952748123829e-01, -8.540722773467266e-01, -8.311475200212819e-01, -8.381993302231419e-01, -8.367030594763305e-01, -8.367030594763305e-01, -2.203723861319227e-01, -2.237884641701219e-01, -8.659547601905505e-01, -1.663963648089622e-01, -1.871916263353330e-01, -1.871916263353331e-01, -7.627170118673845e-03, -8.027901477031271e-03, -4.428113670581636e-02, -4.404962049102483e-03, -5.535157686308230e-03, -5.535157686308230e-03, -7.084361648190221e+00, -7.088407284996997e+00, -7.084584324360534e+00, -7.572003034052092e+00, -7.086392995987599e+00, -7.086392995987599e+00, -2.492726354823847e+00, -2.531450996443811e+00, -2.463389117092315e+00, -2.497871836190111e+00, -2.528563475293131e+00, -2.509514562445792e+00, -7.588259630140768e-01, -8.531756552149682e-01, -6.939902291461983e-01, -7.303678808532269e-01, -7.748521476489912e-01, -8.489288002712535e-01, -1.103311123388457e-01, -2.199595620659588e-01, -1.026382956474285e-01, -2.503068530315368e+00, -1.354876932362654e-01, -1.354876932362653e-01, -3.401117460169372e-03, -4.306241423158188e-03, -3.292753315690755e-03, -7.038088243038046e-02, -3.969233193700350e-03, -3.966748643189275e-03, -8.355113565825195e-01, -8.176234654189694e-01, -8.516298284105546e-01, -8.289937091793947e-01, -8.263778642813562e-01, -8.263778642813562e-01, -8.110426150986502e-01, -6.317142883332187e-01, -6.723868814702771e-01, -7.222681033005602e-01, -6.955605820002259e-01, -7.607598358027576e-01, -8.846290448137527e-01, -2.426931143568052e-01, -3.354168891473438e-01, -4.409753693187420e-01, -3.852665199254175e-01, -3.852665199254173e-01, -6.053215243042389e-01, -4.238335013876498e-02, -5.777514533733540e-02, -4.278872690323312e-01, -8.803064660212691e-02, -9.143377584458555e-02, -1.076423684695951e-02, -1.151088774610779e-03, -2.416182942363457e-03, -8.586152491254093e-02, -3.670482974725536e-03, -3.670482974725529e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_7_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_7", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.427569865371251e-08, -1.427563622681763e-08, -1.427527056636043e-08, -1.427620757799716e-08, -1.427572905949379e-08, -1.427572905949379e-08, -1.274167982827142e-05, -1.274397142792744e-05, -1.280347829397202e-05, -1.277480108905927e-05, -1.278318743432927e-05, -1.464530253412239e-05, -4.448206408265393e-03, -5.189304741472269e-03, -4.821347783836639e-03, -5.077717518593060e-03, -5.015991456198392e-03, -5.015991456198392e-03, -6.629032125470825e-01, -6.706527893699015e-01, -1.154364620696867e-03, -5.523472514619607e-01, -6.090474855978991e-01, -6.090474855978990e-01, -2.067222412071413e+02, -1.905483964224041e+02, -4.594381758145940e+00, -5.298469307036526e+02, -3.961851060994121e+02, -3.961851060994121e+02, -4.576773410131751e-06, -4.576738117609359e-06, -4.576798078743334e-06, -4.322552431360219e-06, -4.576745584445433e-06, -4.576745584445433e-06, -1.077541924697566e-04, -1.084154640667254e-04, -1.069841994647539e-04, -1.077143556363249e-04, -1.084972346882833e-04, -1.250314907252253e-04, -2.331582274277369e-02, -1.963970037408436e-02, -2.682959543242740e-02, -2.739182338301939e-02, -2.269758044482914e-02, -2.041459672464154e-02, -4.935006051707450e-01, -3.357326946032161e-01, -5.546307622456853e-01, -2.155086177884445e-04, -8.735001901411016e-01, -8.735001901411018e-01, -3.446721084851279e+02, -5.212268398303028e+02, -2.536110917197192e+03, -1.110957614429625e+00, -5.044391743384535e+02, -1.082425985832734e+03, -2.932880616742286e-02, -2.955180789281626e-02, -2.868470161582998e-02, -2.942368304851043e-02, -2.945702788782244e-02, -2.945702788782244e-02, -3.267563114156100e-02, -4.281468206518122e-02, -4.142831576682608e-02, -3.868781450118614e-02, -4.024339135081927e-02, -3.684106725409948e-02, -1.571563708925883e-02, -1.967945603758790e-01, -1.860626257080551e-01, -1.063145727936677e-01, -1.635578050630293e-01, -1.635578050630294e-01, -4.558510080229587e-02, -5.031747703818254e+00, -2.636088256002528e+00, -1.777027988368526e-01, -9.758108476189390e-01, -1.601623109204511e+00, -7.181715704915706e+01, -8.066708453516319e+03, -3.101229031240633e+03, -1.859476426265315e+00, -1.509285095373535e+03, -1.509285095373538e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_7_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_7", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.608459686509722e-03, 1.608474304867399e-03, 1.608530217058345e-03, 1.608314169009311e-03, 1.608428655395042e-03, 1.608428655395042e-03, 3.458938509331115e-03, 3.460699905612442e-03, 3.507180177595134e-03, 3.488054730151390e-03, 3.490466444802956e-03, 1.049702049072860e-02, 1.021664518687626e-05, 2.914903410161458e-02, 2.513362812918770e-02, 2.707159778008509e-02, 2.661837356337523e-02, 2.661837356337523e-02, 6.482226054272620e-02, 6.864453351081860e-02, -1.886130672636896e-03, 2.257942192390685e-02, 3.615949605157918e-02, 3.615949605157925e-02, 7.194980900135363e-04, 7.733943737334558e-04, 3.174790411005502e-03, 3.550784556895292e-04, 5.268733779060434e-04, 5.268733779060434e-04, 8.788882338602387e-03, 8.786868691036502e-03, 8.788779785000931e-03, 7.370772198012836e-03, 8.787871136453110e-03, 8.787871136453110e-03, 3.800224074137450e-03, 4.206234196831457e-03, 3.487397239737471e-03, 3.845246135720704e-03, 4.183960063915443e-03, 1.676408601972800e-02, 7.338604287292626e-02, 7.165384381637264e-02, 7.144032469350875e-02, 7.651613331021685e-02, 7.355797455860243e-02, 4.386983049084149e-02, -1.537859856677136e-03, 3.238213810524072e-02, -1.282776932049310e-03, 2.305416251254786e-02, 1.897432097753344e-02, 1.897432097753340e-02, -5.104562270035772e-08, 3.263329748986708e-04, 7.099597110093729e-04, -5.223988431228669e-04, -3.216748564507791e-07, 5.297582974975105e-04, 7.610953742234108e-02, 7.737056492076817e-02, 7.198237746133698e-02, 7.659112136589960e-02, 7.677757951089360e-02, 7.677757951089360e-02, 7.836303527496913e-02, 8.285710471699598e-02, 8.585230170278735e-02, 8.484384161283977e-02, 8.581236198910538e-02, 6.003603624302285e-02, 6.785961163470054e-02, -6.750829688242521e-03, 6.370206536383603e-02, 2.021020486629390e-02, 8.287332250218411e-02, 8.287332250218418e-02, 2.894622285123881e-02, 3.045457732843134e-03, 4.080607373110877e-03, 1.125987135207847e-01, -1.389807159224353e-03, 1.024046330359006e-02, 7.028099643042960e-04, 9.644817216607611e-05, 3.429510406535641e-04, 9.804630535300819e-03, 5.852196183534428e-04, 5.852196183534471e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
