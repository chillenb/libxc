
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_7_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_7", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.336520484363495e+01, -2.336526909234225e+01, -2.336565628979492e+01, -2.336470273406663e+01, -2.336518787034312e+01, -2.336518787034312e+01, -3.417933498625720e+00, -3.418008177920626e+00, -3.420248341816570e+00, -3.421655842226223e+00, -3.420307240785012e+00, -3.420307240785012e+00, -6.272436242072595e-01, -6.267890657385832e-01, -6.168766661003316e-01, -6.256615813262419e-01, -6.230317860983944e-01, -6.230317860983944e-01, -1.815077931300045e-01, -1.840685568026906e-01, -7.080753083846403e-01, -1.321674193918321e-01, -1.501194182064340e-01, -1.501194182064340e-01, -6.112331602246216e-03, -6.429708715777755e-03, -3.523008883631092e-02, -3.500224786323022e-03, -4.413588590678152e-03, -4.413588590678152e-03, -5.707009743243886e+00, -5.707598791959593e+00, -5.707090925086234e+00, -5.707608738772074e+00, -5.707280680483590e+00, -5.707280680483590e+00, -2.093115770100916e+00, -2.118060593106304e+00, -2.088007279936780e+00, -2.110665765503393e+00, -2.109342979786786e+00, -2.109342979786786e+00, -6.106679338116520e-01, -6.555665164705551e-01, -5.437755452033021e-01, -5.518097785712683e-01, -6.223573384880237e-01, -6.223573384880237e-01, -9.175687698655552e-02, -1.790896621680880e-01, -8.477716455669472e-02, -1.886099491391233e+00, -1.086660794070458e-01, -1.086660794070458e-01, -2.649522797594137e-03, -3.389247820811051e-03, -2.613261425074009e-03, -5.696702141100922e-02, -3.127807983678166e-03, -3.127807983678167e-03, -6.343086313862164e-01, -6.334291042728889e-01, -6.337707754495029e-01, -6.340211490432861e-01, -6.338958799028154e-01, -6.338958799028154e-01, -6.118513986315316e-01, -5.397566797472347e-01, -5.627991327588450e-01, -5.832708911698551e-01, -5.726227459919067e-01, -5.726227459919067e-01, -6.779433175051077e-01, -2.298368937440409e-01, -2.759522370553311e-01, -3.552382293452573e-01, -3.161124367976598e-01, -3.161124367976597e-01, -4.781116301331397e-01, -3.387291991135329e-02, -4.590317084617206e-02, -3.447543665985910e-01, -7.284425138404348e-02, -7.284425138404350e-02, -8.465939755713076e-03, -8.817036044735671e-04, -1.927602791003611e-03, -6.872675003146705e-02, -2.905693751129132e-03, -2.905693751129130e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_7_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_7", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.867029319455056e+01, -2.867041596572114e+01, -2.867087755114507e+01, -2.866905050465526e+01, -2.867001983303384e+01, -2.867001983303384e+01, -4.552163238899956e+00, -4.552296022009983e+00, -4.555820962676149e+00, -4.554355576035841e+00, -4.554230899289934e+00, -4.554230899289934e+00, -8.031065442191597e-01, -8.019407986282967e-01, -7.771565451282368e-01, -7.892171576657481e-01, -7.860748668964445e-01, -7.860748668964445e-01, -2.186455918495932e-01, -2.216758304912902e-01, -8.906561085436172e-01, -1.636733163135373e-01, -1.839957796396238e-01, -1.839957796396235e-01, -7.627812617002552e-03, -8.029125390978168e-03, -4.429218593513580e-02, -4.409490991480208e-03, -5.538775549428691e-03, -5.538775549428691e-03, -7.087771515302970e+00, -7.091781306664009e+00, -7.087923511200784e+00, -7.091464536826858e+00, -7.089820152815054e+00, -7.089820152815054e+00, -2.497494285502460e+00, -2.517754799400070e+00, -2.481761869171294e+00, -2.499473274689226e+00, -2.516712081143766e+00, -2.516712081143766e+00, -7.887688694764805e-01, -9.038837245734379e-01, -7.184300530904119e-01, -7.847857335489553e-01, -8.065172067711330e-01, -8.065172067711330e-01, -1.147723502320074e-01, -2.182593315988141e-01, -1.062454081277402e-01, -2.705500556442402e+00, -1.344981132215899e-01, -1.344981132215899e-01, -3.407542086138894e-03, -4.314506757473053e-03, -3.296534021647866e-03, -7.169731294674296e-02, -3.973715253326284e-03, -3.973715253326283e-03, -8.433267123293953e-01, -8.250225070749043e-01, -8.313502093837344e-01, -8.366750504104279e-01, -8.340028078258576e-01, -8.340028078258576e-01, -8.259329279525820e-01, -6.348309746911227e-01, -6.790901843457023e-01, -7.330147979377315e-01, -7.047451716646957e-01, -7.047451716646957e-01, -9.449619103513345e-01, -2.770231073743289e-01, -3.314568260642035e-01, -4.437933619844061e-01, -3.817236352977528e-01, -3.817236352977525e-01, -5.866552342778691e-01, -4.239104331703475e-02, -5.775832102703643e-02, -4.375479397675041e-01, -9.109948015932151e-02, -9.109948015932157e-02, -1.078467782635334e-02, -1.154532711630545e-03, -2.417635664075601e-03, -8.568657924300722e-02, -3.675608599370621e-03, -3.675608599370616e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_7_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_7", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.534810162386447e-08, -1.534801056880283e-08, -1.534756057259708e-08, -1.534892373349590e-08, -1.534821579840305e-08, -1.534821579840305e-08, -1.352702553177860e-05, -1.352944467329236e-05, -1.359278361799501e-05, -1.356740493435184e-05, -1.357361007582123e-05, -1.357361007582123e-05, -4.703654784473266e-03, -4.690544515798468e-03, -4.385201895551309e-03, -4.642233693878719e-03, -4.576906367359643e-03, -4.576906367359643e-03, -6.555612197039183e-01, -6.617869952726875e-01, -1.196815326274778e-03, -5.237478522425718e-01, -5.883847842511070e-01, -5.883847842511069e-01, -2.058888926454943e+02, -1.891442864780941e+02, -4.369118466374554e+00, -5.017298129054981e+02, -3.832602625491384e+02, -3.832602625491380e+02, -4.575068336486315e-06, -4.575052258695473e-06, -4.575128420934582e-06, -4.575110759532212e-06, -4.575032524004722e-06, -4.575032524004722e-06, -1.220942809943910e-04, -1.229909795758670e-04, -1.216273680319013e-04, -1.226089652390904e-04, -1.228164042302734e-04, -1.228164042302734e-04, -2.233915263633482e-02, -1.867428650489320e-02, -2.511739669953586e-02, -2.514614159389781e-02, -2.178795058166282e-02, -2.178795058166282e-02, -7.399986325174753e-01, -3.307072729838467e-01, -8.487662900662200e-01, -1.983197656111029e-04, -8.444815625615401e-01, -8.444815625615403e-01, -6.092267913299478e+02, -4.626606526057092e+02, -2.382900376304294e+03, -1.881047127403451e+00, -9.735878564134988e+02, -9.735878564134994e+02, -2.910780443082970e-02, -2.934161420549433e-02, -2.927349695508346e-02, -2.920631579939106e-02, -2.924113386925168e-02, -2.924113386925168e-02, -3.219124284414952e-02, -4.254293861685347e-02, -4.105099051034472e-02, -3.822975216731732e-02, -3.979817704110108e-02, -3.979817704110108e-02, -1.478707797874255e-02, -2.347404463095932e-01, -1.827598116959717e-01, -1.170215176505410e-01, -1.591388760905142e-01, -1.591388760905142e-01, -5.056270854284511e-02, -4.906880479330668e+00, -2.484600819598261e+00, -1.694426195998006e-01, -1.522722206149979e+00, -1.522722206149980e+00, -6.342546938902004e+01, -5.526541401650066e+03, -3.009715266304839e+03, -1.800277017742794e+00, -1.394897845823915e+03, -1.394897845823919e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_7_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_7", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.098315460153563e-03, 2.098313534520618e-03, 2.098320467597649e-03, 2.098350100786535e-03, 2.098332356026961e-03, 2.098332356026961e-03, 6.316379870904119e-03, 6.318164149442257e-03, 6.367107875586805e-03, 6.365898760435060e-03, 6.358638121391670e-03, 6.358638121391670e-03, 9.416031630968956e-03, 9.374651270660176e-03, 8.714228042469262e-03, 1.038786537773642e-02, 9.856240692549678e-03, 9.856240692549678e-03, 5.945472956643187e-02, 6.183229015740305e-02, 4.469374926360310e-04, 1.621351943940305e-02, 2.824662516733120e-02, 2.824662516733115e-02, 7.106204893971194e-04, 7.559915961136235e-04, 2.688564284435256e-03, 2.997245639981963e-04, 4.755084698695854e-04, 4.755084698695854e-04, 8.779081115124591e-03, 8.777205863420089e-03, 8.779183741315515e-03, 8.777519404706759e-03, 8.778038234745111e-03, 8.778038234745111e-03, 1.465302928428170e-02, 1.522187859791116e-02, 1.461244332657608e-02, 1.514945032252819e-02, 1.498744570464146e-02, 1.498744570464146e-02, 6.006051235824092e-02, 6.012946923149719e-02, 4.828388938326660e-02, 5.002319484003154e-02, 6.137399610456731e-02, 6.137399610456731e-02, 7.859393096767730e-03, 2.917871482174043e-02, 7.032530864481287e-03, 1.581545632958537e-02, 1.583734424140364e-02, 1.583734424140363e-02, 1.211420822049847e-04, 2.237601974246497e-04, 5.846689331549458e-04, 4.710156408183981e-03, 3.792251009736869e-04, 3.792251009736836e-04, 7.484071997385039e-02, 7.599356290915278e-02, 7.561582551269787e-02, 7.528032744706600e-02, 7.545017328041548e-02, 7.545017328041548e-02, 7.575709390166811e-02, 8.029525835390257e-02, 8.267158622654217e-02, 8.153646917035878e-02, 8.231509356532823e-02, 8.231509356532821e-02, 5.372781053755406e-02, 4.380382922250100e-02, 5.525913709020358e-02, 6.552776754028398e-02, 6.756056879765461e-02, 6.756056879765451e-02, 6.877067686938493e-02, 2.805849758173952e-03, 3.327383358585969e-03, 8.497519908566879e-02, 8.279270416423647e-03, 8.279270416423685e-03, 4.732977709542624e-04, 2.550271096313274e-05, 3.126617867197492e-04, 8.598937260476612e-03, 4.572836112208021e-04, 4.572836112208033e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
