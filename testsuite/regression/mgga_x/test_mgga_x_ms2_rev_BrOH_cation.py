
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ms2_rev_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2_rev", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.064178971719720e+01, -2.064191209645026e+01, -2.064244786298750e+01, -2.156020097342144e+01, -2.156092145045743e+01, -2.248040225907043e+01, -3.493598081248492e+00, -3.772096567888651e+00, -3.771316584483538e+00, -3.771973154880640e+00, -3.771510593332020e+00, -3.493123235385891e+00, -6.099647082226710e-01, -6.826952689589041e-01, -7.426407439171796e-01, -6.713522184215395e-01, -5.976085537496576e-01, -7.461804137292674e-01, -1.801409617409029e-01, -1.826760012539430e-01, -8.083381420086589e-01, -1.636568339689952e-01, -1.961838921839249e-01, -1.909520151068634e-01, -8.426223520668559e-03, -7.518783957111620e-03, -4.087919105076844e-02, -4.859960923155554e-03, -6.782430495312611e-03, -6.782430495312611e-03, -5.449261271620029e+00, -5.449718255098314e+00, -5.449279794628784e+00, -5.449683509246551e+00, -5.323101040782810e+00, -5.323205198753131e+00, -2.142291547109381e+00, -2.153714398749184e+00, -2.134230894355493e+00, -2.144206383253441e+00, -1.983863123477362e+00, -2.152502330066902e+00, -5.855134222235081e-01, -6.701347839454024e-01, -5.860943384664151e-01, -6.019076081467221e-01, -5.980346558459390e-01, -6.347736314042446e-01, -1.197487911721315e-01, -1.830477714812336e-01, -1.116357222748283e-01, -2.037941732387172e+00, -1.359274742692408e-01, -1.359274742692408e-01, -3.139371437103832e-03, -4.750977304262930e-03, -3.638044113151645e-03, -6.392432164232949e-02, -4.569829259445693e-03, -4.569829259445695e-03, -6.112856025960334e-01, -6.098949606514333e-01, -6.026621976188831e-01, -6.078759542948958e-01, -6.038712867576008e-01, -6.071952957862636e-01, -5.950005654181193e-01, -4.925073822642167e-01, -5.139139509291263e-01, -5.660183551595863e-01, -5.564818687719382e-01, -5.280340889066704e-01, -6.721340797011057e-01, -2.558121085986925e-01, -2.695289747904024e-01, -3.505826405143708e-01, -3.361794324913649e-01, -3.061888539781291e-01, -4.908179395018094e-01, -3.021824326080919e-02, -6.261567998800405e-02, -3.624816865797557e-01, -9.576482106522646e-02, -9.576482106522646e-02, -7.677762714260760e-03, -1.269980035906642e-03, -1.725524401488349e-03, -6.125690840361528e-02, -4.196719244994472e-03, -3.072579835640978e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ms2_rev_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2_rev", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.100701180366377e+01, -3.100732394131657e+01, -3.100716373064380e+01, -3.100743411275451e+01, -3.100764999427660e+01, -3.100812995919782e+01, -3.100593698566452e+01, -2.892951461733769e+01, -3.100710373780076e+01, -2.893014642132617e+01, -2.893048311744504e+01, -2.893014642132617e+01, -4.619175847044422e+00, -4.402688671864693e+00, -4.619218344759876e+00, -4.619113707089217e+00, -4.620024990776744e+00, -4.620218153172849e+00, -4.620120878794460e+00, -4.620186456649867e+00, -4.618340956072734e+00, -4.621001819698926e+00, -4.402071224292209e+00, -4.621001819698926e+00, -8.264088174661648e-01, -8.307194351533822e-01, -8.248304861282769e-01, -8.846197970387035e-01, -8.629038268386806e-01, -8.572033985395426e-01, -8.657320307942769e-01, -8.106790447366758e-01, -8.377770569532617e-01, -7.762171150211702e-01, -8.919550729739187e-01, -8.377644312758554e-01, -2.063477746871009e-01, -2.336463572410907e-01, -2.090755138299946e-01, -2.373871551919863e-01, -1.030017807274065e+00, -9.675084180789209e-01, -1.874457881588253e-01, -1.872205552453803e-01, -2.361486176695798e-01, -1.503472143879016e-01, -2.361486176695796e-01, -1.144238541249425e-01, -1.085393597865152e-02, -1.153142255675225e-02, -7.358685144243492e-03, -1.217894784711471e-02, -4.091782430124027e-02, -6.445132490718490e-02, -6.531062127354758e-03, -6.422315452067897e-03, -9.685858141400012e-03, -5.515394033725953e-03, -9.685858141400012e-03, -5.515394033725954e-03, -7.086276038120667e+00, -7.084582528368872e+00, -7.088227183794634e+00, -7.086467411286084e+00, -7.086400412095293e+00, -7.084658788691145e+00, -7.088074127900569e+00, -7.086370654712268e+00, -7.486509496396140e+00, -7.085527234666169e+00, -7.087263309914943e+00, -7.484722949333385e+00, -2.589747718785075e+00, -2.589799578677105e+00, -2.610673785954170e+00, -2.610096708270971e+00, -2.572161951244153e+00, -2.577226872059438e+00, -2.590199906145751e+00, -2.595529729382901e+00, -2.614717926662554e+00, -2.489421575293755e+00, -2.614717926662554e+00, -2.602275834381304e+00, -7.878313439139857e-01, -7.335285902232324e-01, -8.636236618024747e-01, -8.644993275730357e-01, -7.083968824805082e-01, -7.372786365682732e-01, -7.435075162478091e-01, -7.703217364607554e-01, -8.221868835014321e-01, -7.295574405655846e-01, -8.221868835014323e-01, -7.790994046968618e-01, -1.433990185899702e-01, -1.444782671954998e-01, -2.090371039970841e-01, -2.373622606438607e-01, -1.326300205279638e-01, -1.376777421452103e-01, -2.583359668558837e+00, -2.582235260493373e+00, -1.557975061151275e-01, -1.590755402687098e-01, -1.557975061151276e-01, -1.590755402687097e-01, -3.166841727466366e-03, -5.092938336400787e-03, -6.284306303375191e-03, -6.379502403144575e-03, -4.698295784529178e-03, -4.975138882599883e-03, -9.675223950372422e-02, -6.850872005985310e-02, -4.800169672589168e-03, -6.587946403204759e-03, -4.800169672589170e-03, -6.587946403204784e-03, -8.076931788158460e-01, -8.108953946923156e-01, -8.003842204033805e-01, -8.036195291808710e-01, -8.160800134963428e-01, -8.188655773251916e-01, -8.147333114804901e-01, -8.082664544728773e-01, -8.153485986517098e-01, -8.181881033833828e-01, -8.153485986517098e-01, -8.072155706095316e-01, -7.856497601746202e-01, -7.883364209961340e-01, -6.561353447895760e-01, -6.127558995626891e-01, -6.921050026773694e-01, -6.821799897222248e-01, -7.291844153585774e-01, -7.318333705575121e-01, -7.102502620494930e-01, -7.130235098065246e-01, -7.102502620494932e-01, -7.492597675971044e-01, -9.020670853750618e-01, -9.621400290161142e-01, -2.909123378065509e-01, -2.924522683175207e-01, -3.215199123790999e-01, -3.486496266637657e-01, -4.384933593498033e-01, -4.611509511170575e-01, -3.985421897035665e-01, -3.984243039196110e-01, -3.985421897035664e-01, -3.775973902722033e-01, -6.003261623739830e-01, -6.049912451887496e-01, -4.015243750400691e-02, -4.042717283544396e-02, -7.934511644117420e-02, -8.165346943541710e-02, -4.416487418268079e-01, -4.499201960125490e-01, -1.144693771754701e-01, -1.179915954593124e-01, -1.144693771754698e-01, -1.179915954593126e-01, -1.004520771647353e-02, -1.040939079685150e-02, -1.691332252884271e-03, -1.695197784073664e-03, -2.223496275071296e-03, -2.364867777740095e-03, -8.100824988900776e-02, -8.233619465986929e-02, -4.546235122619458e-03, -6.039134940193350e-03, -4.546235122619436e-03, -3.904746015557329e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms2_rev_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2_rev", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.426293661451942e-08, 0.000000000000000e+00, -3.426624113465455e-08, -3.426295347495562e-08, 0.000000000000000e+00, -3.426625185432132e-08, -3.426274664946986e-08, 0.000000000000000e+00, -3.426602224136125e-08, -3.426258858290863e-08, 0.000000000000000e+00, -4.945311849210229e-09, -3.426297168287044e-08, 0.000000000000000e+00, -4.945037986174611e-09, -4.944744694924860e-09, 0.000000000000000e+00, -4.945037986174611e-09, -5.778055933434674e-06, 0.000000000000000e+00, -1.585172549146282e-05, -5.778505230404519e-06, 0.000000000000000e+00, -5.778257980835428e-06, -5.787328792918702e-06, 0.000000000000000e+00, -5.788661925023736e-06, -5.782173571812528e-06, 0.000000000000000e+00, -5.781862626439178e-06, -5.780759029267347e-06, 0.000000000000000e+00, -5.789363656079986e-06, -1.586300054084943e-05, 0.000000000000000e+00, -5.789363656079986e-06, -1.078827746088033e-02, 0.000000000000000e+00, -1.064919024312657e-02, -1.084712206382433e-02, 0.000000000000000e+00, -3.107987890176565e-03, -3.168649598335753e-03, 0.000000000000000e+00, -3.214225204190033e-03, -3.205525720383210e-03, 0.000000000000000e+00, -1.147043720507695e-02, -1.034860562472078e-02, 0.000000000000000e+00, -1.315484042762642e-02, -3.041884915785942e-03, 0.000000000000000e+00, -3.362486947634155e-03, -2.536178167034119e+00, 0.000000000000000e+00, -5.220714471915157e-01, -2.417204840192667e+00, 0.000000000000000e+00, -5.073725045783205e-01, -1.173962161590113e-03, 0.000000000000000e+00, -5.296372884003041e-03, -6.321913781497611e-01, 0.000000000000000e+00, -7.010622241755419e-01, -4.566694506668547e-01, 0.000000000000000e+00, -7.301485487841485e-01, -4.566694506668550e-01, 0.000000000000000e+00, -2.564769562159811e+01, -3.338551870674948e+00, 0.000000000000000e+00, -3.350944147208595e+00, -1.497646034179737e+06, 0.000000000000000e+00, -3.504235956333227e+00, -1.566644758098461e+03, 0.000000000000000e+00, -1.596206157305246e+00, -2.446798837646174e+00, 0.000000000000000e+00, -2.471893820753265e+00, -3.172585476863888e+00, 0.000000000000000e+00, -5.434756914824521e+00, -3.172585476863888e+00, 0.000000000000000e+00, -5.434756914821403e+00, -1.448189788670895e-06, 0.000000000000000e+00, -1.449583725868304e-06, -1.447988414868659e-06, 0.000000000000000e+00, -1.449389325686649e-06, -1.448185370749943e-06, 0.000000000000000e+00, -1.449581973935493e-06, -1.448012082806252e-06, 0.000000000000000e+00, -1.449404861768899e-06, -9.087152380200630e-06, 0.000000000000000e+00, -1.449485509203253e-06, -1.448081973271658e-06, 0.000000000000000e+00, -9.096459275380467e-06, -5.393798878637060e-05, 0.000000000000000e+00, -5.402704226277945e-05, -5.311943429207848e-05, 0.000000000000000e+00, -5.322902857837586e-05, -5.457122032563467e-05, 0.000000000000000e+00, -5.447966387220491e-05, -5.388311513127893e-05, 0.000000000000000e+00, -5.377500420999535e-05, -5.300443569387551e-05, 0.000000000000000e+00, -1.567645634585634e-04, -5.300443569387551e-05, 0.000000000000000e+00, -5.355208786719935e-05, -7.935989757432172e-03, 0.000000000000000e+00, -1.844671657414814e-02, -6.268871253390419e-03, 0.000000000000000e+00, -6.283437732034911e-03, -1.058804138449196e-02, 0.000000000000000e+00, -9.628639631958046e-03, -9.872950203681704e-03, 0.000000000000000e+00, -8.894034577029560e-03, -7.001216427691960e-03, 0.000000000000000e+00, -1.993912435036682e-02, -7.001216427691945e-03, 0.000000000000000e+00, -8.379848852653622e-03, -8.931709335117441e-01, 0.000000000000000e+00, -8.834826154306471e-01, -2.344216076430912e+00, 0.000000000000000e+00, -3.492694242395609e-01, -9.680063326657466e-01, 0.000000000000000e+00, -9.790438967826398e-01, -7.173928418239911e-05, 0.000000000000000e+00, -7.187723003931070e-05, -9.859593839531589e-01, 0.000000000000000e+00, -1.169492289355704e+00, -9.859593839531486e-01, 0.000000000000000e+00, -1.169492289355709e+00, -4.366209881925003e+07, 0.000000000000000e+00, -1.637978578438173e+00, -2.321017202251116e+00, 0.000000000000000e+00, -2.045905932741192e+00, -1.671245912873077e+01, 0.000000000000000e+00, -1.834391603325888e+01, -1.443989553564869e+00, 0.000000000000000e+00, -1.994034981761248e+02, -3.149675676014719e+00, 0.000000000000000e+00, -9.997838355975908e+00, -3.149675676012843e+00, 0.000000000000000e+00, -9.997838355827561e+00, -9.383158720951143e-03, 0.000000000000000e+00, -9.244910227633222e-03, -9.408901133724041e-03, 0.000000000000000e+00, -9.271348348169719e-03, -3.300057455260819e-02, 0.000000000000000e+00, -3.194181768434189e-02, -2.868944308280726e-02, 0.000000000000000e+00, -9.254597532921223e-03, -3.084727887924935e-02, 0.000000000000000e+00, -2.988167008108361e-02, -3.084727887924935e-02, 0.000000000000000e+00, -9.258316627763434e-03, -1.043212598618394e-02, 0.000000000000000e+00, -1.030235855567495e-02, -1.553850593943557e-02, 0.000000000000000e+00, -3.340235361331927e-02, -1.390309138928371e-02, 0.000000000000000e+00, -5.049004898418027e-02, -1.242741988942669e-02, 0.000000000000000e+00, -1.226457613434215e-02, -1.315720079096416e-02, 0.000000000000000e+00, -1.298313888400418e-02, -1.315720079096415e-02, 0.000000000000000e+00, -7.863354561305221e-02, -5.079552706182633e-03, 0.000000000000000e+00, -3.341797544208490e-02, -1.990930216341742e-01, 0.000000000000000e+00, -1.963062628203504e-01, -4.555099093034922e-01, 0.000000000000000e+00, -1.204122542331111e-01, -1.612631172549848e-01, 0.000000000000000e+00, -5.327785176353270e-02, -8.400153395893487e-02, 0.000000000000000e+00, -8.437754336815168e-02, -8.400153395893523e-02, 0.000000000000000e+00, -2.677019910903014e-01, -2.042313546817368e-02, 0.000000000000000e+00, -2.011716054621474e-02, -1.689556603400910e+03, 0.000000000000000e+00, -1.644095327823955e+03, -1.319188079683954e+00, 0.000000000000000e+00, -1.357405725016331e+00, -6.871859714843141e-02, 0.000000000000000e+00, -6.797641858302604e-02, -1.571583144876585e+00, 0.000000000000000e+00, -1.819340520517583e+00, -1.571583144876678e+00, 0.000000000000000e+00, -1.819340520517513e+00, -4.312949700489989e+05, 0.000000000000000e+00, -3.740320614812933e+05, -2.669274188253503e+00, 0.000000000000000e+00, -2.657537566866934e+00, -1.796653874193243e+08, 0.000000000000000e+00, -1.404050044921399e+08, -1.020398892761640e+02, 0.000000000000000e+00, -9.562698183131938e+01, -8.128246258351638e+00, 0.000000000000000e+00, -1.036616748249278e+01, -8.128246258670375e+00, 0.000000000000000e+00, -1.889030136507723e+07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms2_rev_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2_rev", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.043082930583375e-03, 2.043392044721950e-03, 2.043121354262394e-03, 2.043419828829526e-03, 2.043226013552719e-03, 2.043574432842869e-03, 2.042795169706737e-03, -4.907286485199350e-20, 2.043107930485680e-03, 1.792286162898218e-19, -5.327133721519617e-19, 1.792286162898218e-19, -4.487485791946495e-18, 8.716768228943305e-04, 9.035152426818844e-18, 3.292078010627055e-18, -4.204781434324143e-18, -4.188329676798055e-18, -9.072059565101403e-19, 1.166703450106080e-18, 2.985660456946350e-18, 4.654884555257554e-18, 8.721737760852478e-04, 4.654884555257554e-18, 1.408991836839190e-03, 1.510242542687028e-03, 1.381282322164838e-03, -5.755690704805882e-17, 4.881170229051166e-17, 2.983695252180600e-17, -4.376448372311072e-17, 1.222150156805112e-03, 1.570271588440117e-03, 7.877410608850914e-04, -1.435169837159963e-17, -3.515087009402187e-18, 1.330891048908406e-03, -9.799104903172868e-17, 1.487674236192182e-03, -3.163788675075343e-18, -4.464659688264990e-17, 3.626989913814003e-04, 9.383071184861308e-17, -2.386957120457048e-17, -9.554319753874373e-17, -1.374803455571241e-16, -7.220278908415592e-17, 1.400429243948089e-05, 1.181588402261098e-17, -1.346518929988429e-17, 7.353672447121201e-11, -4.554728031364432e-18, 1.308773028811075e-07, 2.205616601384959e-17, 2.577964816310161e-17, 7.740549856070499e-18, 3.348087086090131e-17, -1.938652427297018e-17, 3.348087086090131e-17, -2.003307068164531e-17, 1.264091967509921e-19, 7.874138403323900e-19, -3.177051498259111e-19, -1.950199420592379e-19, -2.328190157740459e-19, -1.692902671957066e-18, 5.556270506948955e-19, -8.749375344700421e-19, 8.046753515743812e-03, -4.581626749559458e-20, -8.518524638614903e-19, 8.049136464128706e-03, -8.608834445693956e-18, 1.088369700905049e-17, 2.199754451836380e-18, 1.339196352046954e-17, -2.964687442050416e-18, 4.702163415402715e-18, -9.616059958757007e-18, 6.527692668783266e-18, -2.136208621874476e-18, 1.512382953580595e-03, -2.136208621874476e-18, 8.611342810818405e-19, 3.217687890340761e-17, 3.605053721328735e-03, -9.712349483104332e-19, 1.415663994804607e-18, 5.031041144173881e-17, 3.169106643135940e-17, 4.936741966583703e-18, -2.856526833676378e-18, 1.166074745547270e-17, 4.897727960059666e-03, -1.575170260461853e-17, -2.218928024968685e-17, 2.587219653750625e-16, 2.364297677483417e-16, 3.993886847365427e-04, 1.668508975083292e-16, 9.382488907529869e-17, 1.492825884838462e-16, -1.511075255599041e-18, 1.973524440678154e-18, 4.077741691309063e-17, -1.538218214662131e-16, -5.479844884176900e-17, -1.085672176886451e-16, 3.981437831407216e-13, 6.170793982768479e-18, 4.208371992208009e-18, -9.745835185437827e-18, -2.124527194012208e-17, -1.497984062074803e-17, -3.799652244994088e-16, 2.385833532891504e-06, -1.762244141760526e-18, 3.922237097601736e-17, -2.018078221006501e-18, -1.314419502068164e-17, 1.705185913795917e-18, 3.520758997350745e-19, 9.279587530767438e-18, 5.595502805258757e-18, 3.649853342745347e-02, 3.550339209670345e-02, 3.009669213796583e-02, -3.615698164972548e-18, 3.331539376394263e-02, 3.241809421067694e-02, 3.331539376394263e-02, -3.718622738579121e-18, 4.045774904100818e-19, -9.641892566802610e-20, 1.356146570346903e-17, 1.109122707078108e-03, -1.281668162542353e-17, 2.646605267789270e-02, -1.694996122884784e-17, -1.471849903472004e-17, 2.886015776079332e-18, 3.649717547398193e-17, -1.828455332200242e-18, 6.532186468092992e-02, 2.189912634074566e-18, 5.907455689531912e-02, 7.404697533659242e-17, -7.170384676552341e-17, 2.498651044322891e-03, -3.448576458201170e-17, 8.136925642000688e-03, -4.481461257336716e-17, -2.250646826936624e-17, 7.306761672882441e-17, 4.383162938465831e-17, 5.686366159040527e-03, 3.293219618688878e-17, -1.185947224757990e-17, 1.285796249896174e-07, 1.290807025820048e-07, -8.154628997134051e-17, 7.085584539608869e-17, -9.775917024755865e-17, -4.780752355499656e-17, 2.252094939118184e-17, 2.269080018337463e-16, 2.756237653628914e-16, -5.029854692602442e-18, 1.107314489237925e-10, 1.294705140070929e-10, -2.763905843933991e-19, -3.312839924274299e-18, 5.758023437394816e-13, 8.545809604278158e-13, 8.254718795937763e-06, 1.065759062104375e-05, -1.471731358487431e-17, 3.792276862449419e-17, 2.219992063583110e-17, 1.598500365813606e-11]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
