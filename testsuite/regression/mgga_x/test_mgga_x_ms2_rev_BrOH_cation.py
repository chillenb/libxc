
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ms2_rev_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2_rev", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.244916765282228e+01, -2.244921991086796e+01, -2.244949526504482e+01, -2.244871728760122e+01, -2.244911880134502e+01, -2.244911880134502e+01, -3.371458244923696e+00, -3.371459660865487e+00, -3.371698216182313e+00, -3.373052649932315e+00, -3.372096660234088e+00, -3.372096660234088e+00, -6.597704195475227e-01, -6.594856050993194e-01, -6.540086843385637e-01, -6.599154368586962e-01, -6.600219614273930e-01, -6.600219614273930e-01, -1.979739810337195e-01, -1.993736490913233e-01, -7.577650737709700e-01, -1.579443440501005e-01, -1.891231750842616e-01, -1.891231750842616e-01, -8.426186168980153e-03, -8.872853765354849e-03, -4.828489061047826e-02, -4.859874352082393e-03, -6.782317256344915e-03, -6.782317256344915e-03, -5.448818521586881e+00, -5.449280826870780e+00, -5.448846409921514e+00, -5.449254414755270e+00, -5.449049234395800e+00, -5.449049234395800e+00, -2.107206004112973e+00, -2.126819811458855e+00, -2.105790471120672e+00, -2.122761579494755e+00, -2.118975220244795e+00, -2.118975220244795e+00, -6.008481275328216e-01, -6.432529598708441e-01, -5.335599365595116e-01, -5.380550880646651e-01, -6.124776110971972e-01, -6.124776110971972e-01, -1.179903788327503e-01, -2.040681332489722e-01, -1.101427714757033e-01, -1.833574310235902e+00, -1.333306313398795e-01, -1.333306313398795e-01, -3.752153657447145e-03, -4.750794668791631e-03, -3.637931235963740e-03, -7.635632910607695e-02, -4.569722833037263e-03, -4.569722833037264e-03, -6.100459303381820e-01, -6.087158748482504e-01, -6.091875633929096e-01, -6.095700833895168e-01, -6.093782378923569e-01, -6.093782378923569e-01, -5.920306847211719e-01, -5.273058212974062e-01, -5.455373621114401e-01, -5.636594070807637e-01, -5.542233159947849e-01, -5.542233159947849e-01, -6.639307078684100e-01, -2.530548646418731e-01, -2.906628158846279e-01, -3.521710483837745e-01, -3.217066600693090e-01, -3.217066600693090e-01, -4.753275636596688e-01, -4.622827453069794e-02, -6.242326856177039e-02, -3.402308063638324e-01, -9.474298812669521e-02, -9.474298812669524e-02, -1.187285863342674e-02, -1.269958578893185e-03, -2.670583201026791e-03, -8.956191232839675e-02, -4.196609678154795e-03, -4.196609678154791e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ms2_rev_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2_rev", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.878869478773306e+01, -2.878926168384992e+01, -2.878881619616455e+01, -2.878934977723138e+01, -2.878927094966775e+01, -2.878998270782556e+01, -2.878790407745520e+01, -2.878823979001731e+01, -2.878876615586901e+01, -2.878898492381072e+01, -2.878876615586901e+01, -2.878898492381072e+01, -4.213823166145923e+00, -4.213052020796346e+00, -4.214142267881637e+00, -4.213209862170102e+00, -4.219888372361408e+00, -4.220842691200005e+00, -4.220351726313330e+00, -4.219933553585757e+00, -4.212487496396612e+00, -4.225375305001614e+00, -4.212487496396612e+00, -4.225375305001614e+00, -7.879172904459785e-01, -7.931819009382477e-01, -7.860336739544121e-01, -7.923774564546928e-01, -7.614766327095892e-01, -7.544356090635294e-01, -7.655629977397264e-01, -7.683261354113534e-01, -8.016460591060993e-01, -7.316737253253687e-01, -8.016460591060993e-01, -7.316737253253687e-01, -1.606024173763984e-01, -2.008340136171083e-01, -1.680507330012222e-01, -1.977738956206716e-01, -8.823237377546038e-01, -9.228277855637508e-01, -1.679024917445573e-01, -1.690931393212312e-01, -1.757709946286805e-01, -1.375068768563458e-01, -1.757709946286803e-01, -1.375068768563458e-01, -1.085373229493517e-02, -1.153130576008359e-02, -1.137131598702442e-02, -1.217866560257988e-02, -6.100588502423900e-02, -6.414076279805199e-02, -6.530678931896143e-03, -6.422007782463000e-03, -9.685445629184235e-03, -5.514709233815014e-03, -9.685445629184235e-03, -5.514709233815014e-03, -7.084515982533913e+00, -7.082922452074971e+00, -7.086506471427348e+00, -7.084844260372674e+00, -7.084682525076179e+00, -7.083028830617365e+00, -7.086388099208361e+00, -7.084772479994220e+00, -7.085493387264414e+00, -7.083880746976996e+00, -7.085493387264414e+00, -7.083880746976996e+00, -2.315138102411561e+00, -2.322554714785456e+00, -2.376528062801314e+00, -2.382124197086877e+00, -2.315954931413276e+00, -2.322163583606614e+00, -2.375156981777890e+00, -2.381534290954623e+00, -2.353358051765265e+00, -2.354443337406942e+00, -2.353358051765265e+00, -2.354443337406942e+00, -7.651804214449319e-01, -7.633577261619627e-01, -8.883510578647196e-01, -8.878367785614192e-01, -6.548289890666156e-01, -7.096528680829738e-01, -7.143273149938992e-01, -7.785798357968279e-01, -8.046412112979363e-01, -7.623297713764937e-01, -8.046412112979362e-01, -7.623297713764937e-01, -1.369927890742377e-01, -1.375878537865439e-01, -1.706760988424965e-01, -1.754146748375246e-01, -1.271809933768061e-01, -1.318543792139754e-01, -2.638146966546284e+00, -2.637407872978614e+00, -1.460098179945998e-01, -1.468547630836712e-01, -1.460098179945998e-01, -1.468547630836713e-01, -4.900066648244170e-03, -5.092348264354504e-03, -6.283607345489097e-03, -6.378742000926951e-03, -4.697909920411074e-03, -4.974631897451129e-03, -9.447921083606294e-02, -9.511826612968309e-02, -4.799065742564530e-03, -6.587781586361068e-03, -4.799065742564530e-03, -6.587781586361070e-03, -8.087547082447442e-01, -8.119398450111827e-01, -8.000204331475139e-01, -8.032916156427100e-01, -8.030536379355943e-01, -8.063148997864017e-01, -8.056091747058178e-01, -8.088078076133640e-01, -8.043282297932974e-01, -8.075574395528957e-01, -8.043282297932974e-01, -8.075574395528957e-01, -7.897062909996705e-01, -7.921910901168848e-01, -6.427603395807694e-01, -6.461111287454844e-01, -6.813121420746810e-01, -6.849744801401597e-01, -7.235021446857506e-01, -7.262421344056303e-01, -7.013135994436165e-01, -7.044352646610123e-01, -7.013135994436165e-01, -7.044352646610123e-01, -9.361447202172504e-01, -9.370751866278301e-01, -2.264405661449793e-01, -2.267759661424976e-01, -2.593832135492490e-01, -2.641669023463616e-01, -4.075647527410581e-01, -4.106008773393621e-01, -3.240427220106158e-01, -3.244593065194697e-01, -3.240427220106160e-01, -3.244593065194697e-01, -5.449351768907980e-01, -5.537122792648905e-01, -6.003973585491389e-02, -6.042145533173956e-02, -7.860482785920123e-02, -8.084520348288364e-02, -4.077158654127895e-01, -4.190102115708162e-01, -1.109267778959070e-01, -1.134524983368583e-01, -1.109267778959070e-01, -1.134524983368583e-01, -1.550714562726122e-02, -1.606574061372893e-02, -1.691266484186155e-03, -1.695092044957049e-03, -3.440793882720827e-03, -3.659422936243988e-03, -1.067581196084976e-01, -1.075926785358375e-01, -4.545077195748827e-03, -6.039002814833885e-03, -4.545077195748822e-03, -6.039002814833879e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms2_rev_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2_rev", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.403829260727388e-09, 0.000000000000000e+00, -7.394592698109573e-09, -7.403616606054777e-09, 0.000000000000000e+00, -7.394439548501194e-09, -7.401749727864957e-09, 0.000000000000000e+00, -7.392099151567783e-09, -7.404090411772692e-09, 0.000000000000000e+00, -7.395094404374050e-09, -7.403726803126535e-09, 0.000000000000000e+00, -7.393031050261070e-09, -7.403726803126535e-09, 0.000000000000000e+00, -7.393031050261070e-09, -1.525579874997466e-05, 0.000000000000000e+00, -1.519054120631724e-05, -1.527666021288429e-05, 0.000000000000000e+00, -1.519928962693243e-05, -1.563412433795590e-05, 0.000000000000000e+00, -1.568442953995432e-05, -1.573411418163900e-05, 0.000000000000000e+00, -1.568159931532972e-05, -1.522437257954049e-05, 0.000000000000000e+00, -1.602104098718804e-05, -1.522437257954049e-05, 0.000000000000000e+00, -1.602104098718804e-05, -8.480274485986525e-03, 0.000000000000000e+00, -8.492407821907034e-03, -8.485518020706354e-03, 0.000000000000000e+00, -8.495966560981456e-03, -8.512590163882880e-03, 0.000000000000000e+00, -8.530014254477403e-03, -8.421485500453151e-03, 0.000000000000000e+00, -8.448624802565240e-03, -8.396954840897381e-03, 0.000000000000000e+00, -8.300854453889939e-03, -8.396954840897381e-03, 0.000000000000000e+00, -8.300854453889939e-03, -3.219804180809912e+00, 0.000000000000000e+00, -1.790203669469428e+00, -2.921241958600258e+00, 0.000000000000000e+00, -2.029482906740484e+00, -4.476625942358220e-03, 0.000000000000000e+00, -4.182471410031111e-03, -1.204149758847151e+00, 0.000000000000000e+00, -1.307041370344694e+00, -2.386307812067824e+00, 0.000000000000000e+00, -1.660489074846715e+00, -2.386307812067827e+00, 0.000000000000000e+00, -1.660489074846717e+00, -3.424258630161633e+00, 0.000000000000000e+00, -3.390809261674353e+00, -3.607882531804779e+00, 0.000000000000000e+00, -3.589504224278861e+00, -1.994779600414368e+00, 0.000000000000000e+00, -2.005444125172368e+00, -3.136602680670876e+00, 0.000000000000000e+00, -3.051460452491585e+00, -3.418541343980499e+00, 0.000000000000000e+00, -8.674124499227458e+00, -3.418541343980507e+00, 0.000000000000000e+00, -8.674124499227474e+00, -1.498147448433192e-06, 0.000000000000000e+00, -1.496719093483400e-06, -1.497319037551162e-06, 0.000000000000000e+00, -1.495922345375857e-06, -1.496962151325295e-06, 0.000000000000000e+00, -1.495870019466041e-06, -1.496296048838194e-06, 0.000000000000000e+00, -1.495189437252434e-06, -1.498585121809117e-06, 0.000000000000000e+00, -1.496462631295718e-06, -1.498585121809117e-06, 0.000000000000000e+00, -1.496462631295718e-06, -2.490653637251681e-04, 0.000000000000000e+00, -2.433403643686816e-04, -2.153860746868787e-04, 0.000000000000000e+00, -2.108967561068244e-04, -2.269575566784779e-04, 0.000000000000000e+00, -2.284109847492714e-04, -1.954001529657516e-04, 0.000000000000000e+00, -1.963339069940471e-04, -2.438213199352001e-04, 0.000000000000000e+00, -2.279196330344590e-04, -2.438213199352001e-04, 0.000000000000000e+00, -2.279196330344590e-04, -4.936977532607945e-02, 0.000000000000000e+00, -4.874079650847557e-02, -3.814492399311718e-02, 0.000000000000000e+00, -3.714246241590929e-02, -3.719941767546107e-02, 0.000000000000000e+00, -6.121028775694173e-02, -3.569875383155122e-02, 0.000000000000000e+00, -5.116463792085614e-02, -3.674344754727331e-02, 0.000000000000000e+00, -5.337237336620745e-02, -3.674344754727331e-02, 0.000000000000000e+00, -5.337237336620743e-02, -1.365981636378979e+00, 0.000000000000000e+00, -1.381195288645304e+00, -1.868023279131428e+00, 0.000000000000000e+00, -1.727591707065563e+00, -1.524786097666782e+00, 0.000000000000000e+00, -1.491234172308329e+00, -4.144378152975738e-04, 0.000000000000000e+00, -4.156228028907861e-04, -1.611945803499606e+00, 0.000000000000000e+00, -2.006085046206023e+00, -1.611945803499607e+00, 0.000000000000000e+00, -2.006085046206021e+00, -4.403247986896843e+00, 0.000000000000000e+00, -3.811165064237264e+00, -3.791518832826034e+00, 0.000000000000000e+00, -3.500622256815428e+00, -2.159668430944908e+01, 0.000000000000000e+00, -2.402474010403816e+01, -2.271509794023274e+00, 0.000000000000000e+00, -2.197579652428819e+00, -1.073973535394624e+01, 0.000000000000000e+00, -1.054891778855635e+01, -1.073973535394621e+01, 0.000000000000000e+00, -1.054891778855634e+01, -1.538545654128737e-02, 0.000000000000000e+00, -1.499217707256494e-02, -1.529080285612435e-02, 0.000000000000000e+00, -1.490922691498795e-02, -1.532637541729339e-02, 0.000000000000000e+00, -1.493829517820495e-02, -1.535250426044797e-02, 0.000000000000000e+00, -1.496689553278767e-02, -1.534332421150605e-02, 0.000000000000000e+00, -1.495508518441818e-02, -1.534332421150605e-02, 0.000000000000000e+00, -1.495508518441818e-02, -2.406384203351126e-02, 0.000000000000000e+00, -2.327200476448663e-02, -2.928510040882954e-02, 0.000000000000000e+00, -2.863531583823578e-02, -2.871847128766655e-02, 0.000000000000000e+00, -2.800802219233630e-02, -2.724818885263256e-02, 0.000000000000000e+00, -2.677678786170430e-02, -2.916127103491285e-02, 0.000000000000000e+00, -2.815855613503845e-02, -2.916127103491286e-02, 0.000000000000000e+00, -2.815855613503848e-02, -3.478848541596156e-02, 0.000000000000000e+00, -3.399802950473307e-02, -9.420009454645826e-01, 0.000000000000000e+00, -9.424542841967172e-01, -7.610878327043955e-01, 0.000000000000000e+00, -7.417129950621670e-01, -3.026800745249767e-01, 0.000000000000000e+00, -2.900275190339376e-01, -5.447629089662198e-01, 0.000000000000000e+00, -5.474613191328196e-01, -5.447629089662196e-01, 0.000000000000000e+00, -5.474613191328195e-01, -1.227355599730435e-01, 0.000000000000000e+00, -1.130448135189121e-01, -1.830355387295815e+00, 0.000000000000000e+00, -1.830011030349472e+00, -1.791843213454707e+00, 0.000000000000000e+00, -1.829660972986147e+00, -4.001365229959190e-01, 0.000000000000000e+00, -4.381266129209872e-01, -2.267334628569042e+00, 0.000000000000000e+00, -2.676423092908876e+00, -2.267334628569043e+00, 0.000000000000000e+00, -2.676423092908879e+00, -2.713401440530008e+00, 0.000000000000000e+00, -2.769964893101143e+00, -1.354819790330842e+01, 0.000000000000000e+00, -2.399853476222882e+01, -8.361641059269399e+00, 0.000000000000000e+00, -8.901505238476929e+00, -2.554250975086462e+00, 0.000000000000000e+00, -2.887034215073272e+00, -2.214195172529585e+01, 0.000000000000000e+00, -1.095121371881422e+01, -2.214195172529589e+01, 0.000000000000000e+00, -1.095121371881426e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms2_rev_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms2_rev", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.868009293051718e-04, 1.860893207435075e-04, 1.867900331404623e-04, 1.860815032603243e-04, 1.866672019870312e-04, 1.859302778084788e-04, 1.867855093271405e-04, 1.860821078465967e-04, 1.867961450890335e-04, 1.859572339533722e-04, 1.867961450890335e-04, 1.859572339533722e-04, 1.468390773358601e-03, 1.445122216124127e-03, 1.475437418245882e-03, 1.447961318677687e-03, 1.595023100292828e-03, 1.611740285527544e-03, 1.635591817121304e-03, 1.617087308011235e-03, 1.454820854675099e-03, 1.731320388368770e-03, 1.454820854675099e-03, 1.731320388368770e-03, 2.799706269577155e-03, 2.896545942242292e-03, 2.777700401250275e-03, 2.879631314535482e-03, 2.408727793175973e-03, 2.436039018169462e-03, 2.833315239782804e-03, 2.921131365048824e-03, 2.864883121122104e-03, 2.775231978456845e-03, 2.864883121122104e-03, 2.775231978456845e-03, 9.722829758302839e-02, 5.396628681022489e-02, 8.785885676267918e-02, 6.799098545260684e-02, 2.895424808469941e-04, 5.073835844633216e-04, 1.212394084266462e-03, 4.247403429029448e-03, 7.702717606112125e-02, 2.558696189189796e-05, 7.702717606112140e-02, 2.558696189189721e-05, 8.390787506483438e-11, 1.835235129229314e-09, 3.127934446861812e-11, 3.295688541904660e-10, 1.515352125382649e-07, 4.245234994230780e-07, 5.473862696237163e-16, 7.415765044109084e-16, 1.024612044428562e-12, 1.921767600221155e-16, 1.024612044419907e-12, 1.921767603147784e-16, 5.516033374258348e-05, 5.200750037805331e-05, 5.449851556158186e-05, 5.137068467590856e-05, 5.385862892183650e-05, 5.107387013187330e-05, 5.334008809762434e-05, 5.054317586798162e-05, 5.577825665814099e-05, 5.184693104101448e-05, 5.577825665814099e-05, 5.184693104101448e-05, 1.117783016990381e-02, 1.085340959160028e-02, 9.543967151556218e-03, 9.272308555618551e-03, 9.731227418920694e-03, 9.866222917252107e-03, 8.174067217522750e-03, 8.276873947280486e-03, 1.121931503565634e-02, 1.014788976630299e-02, 1.121931503565634e-02, 1.014788976630299e-02, 6.281076771008745e-02, 6.137048230213980e-02, 6.174226117053856e-02, 6.000641377611822e-02, 2.141767148670380e-02, 6.106785036295187e-02, 2.308548494414018e-02, 5.333889701312391e-02, 5.137830347184852e-02, 6.561857605913153e-02, 5.137830347184849e-02, 6.561857605913150e-02, 2.143960385314128e-04, 1.856557069339609e-04, 5.767196617423033e-02, 5.266382783380487e-02, 6.338854589173844e-05, 1.648879227664747e-04, 1.621897871094023e-02, 1.625197317599026e-02, 1.768348457815339e-03, 3.984742429450207e-03, 1.768348457815344e-03, 3.984742429450194e-03, 1.178210116094366e-18, 1.505902959186087e-18, 6.664676210004540e-17, 4.596602941462722e-17, 3.182457893763653e-15, 5.916417199196535e-15, 4.025746011676869e-06, 1.812055271109847e-05, 2.817033887654315e-18, 1.466227529119728e-12, 2.817033953941883e-18, 1.466227529149535e-12, 9.517617254226200e-03, 9.220505812851420e-03, 9.168920316911787e-03, 8.892932822528754e-03, 9.294058339572545e-03, 9.007323855656647e-03, 9.393049144243647e-03, 9.108810509038803e-03, 9.349535509836634e-03, 9.061892914163613e-03, 9.349535509836634e-03, 9.061892914163618e-03, 1.982486422929576e-02, 1.905622443345644e-02, 1.268722384007415e-02, 1.245161363662627e-02, 1.566993280485800e-02, 1.533881008564658e-02, 1.787053773254323e-02, 1.768476344531489e-02, 1.805712000501317e-02, 1.731921748962595e-02, 1.805712000501318e-02, 1.731921748962599e-02, 6.488569794638581e-02, 6.390341399264458e-02, 5.960849130727256e-02, 6.087292155777176e-02, 8.594642735796801e-02, 8.633429987592511e-02, 7.073307558378283e-02, 6.807823957569056e-02, 9.409957624968576e-02, 9.446795908412664e-02, 9.409957624968568e-02, 9.446795908412663e-02, 7.086546404308389e-02, 6.606360115957421e-02, 1.675758320536963e-06, 9.666237075073318e-07, 9.523946267652726e-07, 1.541404509611324e-06, 8.380423467453835e-02, 1.060081797814694e-01, 1.078283367063778e-04, 3.043083724123814e-04, 1.078283367063767e-04, 3.043083724123837e-04, 8.146242638308315e-14, 9.438272867190126e-14, 1.296768513587615e-22, 1.348705789594785e-22, 1.823872728705511e-16, 3.291051952253089e-16, 1.626204956353497e-04, 1.216611981217143e-03, 2.327118389773389e-17, 6.811849674486422e-13, 2.327118398929974e-17, 6.811849674492204e-13])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
