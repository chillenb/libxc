
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_8_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_8", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.130583412485223e+01, -2.130594524983145e+01, -2.130643681459001e+01, -2.130478699273439e+01, -2.130565176328852e+01, -2.130565176328852e+01, -3.075545213651481e+00, -3.075654833212553e+00, -3.078604113385873e+00, -3.077689721983218e+00, -3.077467903438323e+00, -3.827100065650064e+00, -5.508224394149179e-01, -6.974600428752229e-01, -6.701033996317529e-01, -6.797483280612331e-01, -6.776206174407842e-01, -6.776206174407842e-01, -1.736466493768646e-01, -1.770344356317279e-01, -6.327178407913535e-01, -1.248742279493109e-01, -1.428999096160987e-01, -1.428999096160987e-01, -5.509823679445932e-03, -5.799397397390356e-03, -3.207346308241915e-02, -3.181856663020329e-03, -3.998349950083759e-03, -3.998349950083759e-03, -5.755321333091065e+00, -5.755651639267098e+00, -5.755332249579300e+00, -5.328356945396717e+00, -5.755491369787340e+00, -5.755491369787340e+00, -1.686910294629139e+00, -1.707514714214268e+00, -1.671645890647747e+00, -1.689734594361547e+00, -1.705873297586157e+00, -2.147467815138969e+00, -6.541216590370502e-01, -7.079662262034854e-01, -6.007409491782119e-01, -6.292475423124241e-01, -6.650268840434862e-01, -5.681578750565051e-01, -7.559903623994327e-02, -1.682090510793958e-01, -7.004952871955748e-02, -2.141361040023938e+00, -1.008206918296071e-01, -1.008206918296071e-01, -2.255168946765385e-03, -3.110536924709053e-03, -2.378508523885445e-03, -4.737839817176161e-02, -2.632014561328763e-03, -2.865352370347105e-03, -6.415974997457272e-01, -6.421684563743753e-01, -6.196276626920373e-01, -6.418735833888991e-01, -6.419661944652540e-01, -6.419661944652540e-01, -6.248155104882904e-01, -5.471171719779420e-01, -5.751653851947406e-01, -5.980053287246430e-01, -5.869811356056707e-01, -5.173408383724345e-01, -7.440701626069394e-01, -1.773146538868906e-01, -2.708484997155087e-01, -2.989353800827027e-01, -3.212864160975895e-01, -3.212864160975895e-01, -4.032946408368016e-01, -3.069231485022348e-02, -4.191821862396512e-02, -3.699307529060624e-01, -6.001658630814210e-02, -6.699555942266248e-02, -7.776361161502099e-03, -8.314458165739677e-04, -1.745265573048781e-03, -6.284077369761761e-02, -2.651349597013150e-03, -2.651349597013148e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_8_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_8", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.118786249289164e+01, -3.118795003318351e+01, -3.118836582252023e+01, -3.118706283115696e+01, -3.118774182088639e+01, -3.118774182088639e+01, -4.756028964090969e+00, -4.756236509134690e+00, -4.761773087918900e+00, -4.759970968313682e+00, -4.759669901065670e+00, -4.564202381160452e+00, -7.869546100586439e-01, -8.606849997507741e-01, -8.281617456170953e-01, -8.397103607817996e-01, -8.371967087781497e-01, -8.371967087781497e-01, -2.142102365391742e-01, -2.185407800079391e-01, -8.469017551710936e-01, -1.515701649088716e-01, -1.745816829555294e-01, -1.745816829555296e-01, -6.628589774125990e-03, -6.976965740880269e-03, -3.859196040881848e-02, -3.827917312512391e-03, -4.810201330961694e-03, -4.810201330961694e-03, -7.075912165632251e+00, -7.079661201565143e+00, -7.076117643352460e+00, -7.589901261112251e+00, -7.077794281028707e+00, -7.077794281028707e+00, -2.578379401363884e+00, -2.618114321743763e+00, -2.548002287483791e+00, -2.583685263278720e+00, -2.615156587214797e+00, -2.585666586036677e+00, -7.704213032703400e-01, -8.543443623514535e-01, -7.120852439043605e-01, -7.411950133074351e-01, -7.842674730224362e-01, -8.634364353028560e-01, -9.929245300498891e-02, -2.056381575897806e-01, -9.214298293055158e-02, -2.529000949625462e+00, -1.220134829444421e-01, -1.220134829444420e-01, -3.006839550529687e-03, -3.742115925770959e-03, -2.861455147752751e-03, -6.269236215625401e-02, -3.509186998246866e-03, -3.447149971525990e-03, -8.337249101323911e-01, -8.156108953924871e-01, -8.507950759092486e-01, -8.270559618090519e-01, -8.244006345757191e-01, -8.244006345757192e-01, -8.092374435985010e-01, -6.456210337596098e-01, -6.793188085269055e-01, -7.229958352755333e-01, -6.991340965678244e-01, -7.685592259889537e-01, -8.883668700666099e-01, -2.380285790738162e-01, -3.347073006945442e-01, -4.561294794638591e-01, -3.937701000547998e-01, -3.937701000547997e-01, -6.243749141497623e-01, -3.692953482747805e-02, -5.044474216795302e-02, -4.396992603944675e-01, -7.897873457128703e-02, -8.074174364236077e-02, -9.355363633910863e-03, -1.000265613410363e-03, -2.099631982575866e-03, -7.571753205872671e-02, -3.189694976468117e-03, -3.189694976468114e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_8_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_8", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.457401532122610e-08, -1.457395725231302e-08, -1.457360684308074e-08, -1.457447960294143e-08, -1.457403533651081e-08, -1.457403533651081e-08, -1.257814534053211e-05, -1.258058605368112e-05, -1.264404930338041e-05, -1.261382826631990e-05, -1.262231304022400e-05, -1.579741687428333e-05, -4.178938745406973e-03, -5.691761458623602e-03, -5.316504713384896e-03, -5.584728593148879e-03, -5.520002885817889e-03, -5.520002885817889e-03, -7.409102094561559e-01, -7.474928089019686e-01, -1.042072171895148e-03, -6.574807855312426e-01, -7.036154410562259e-01, -7.036154410562258e-01, -2.808812346604928e+02, -2.588836632176544e+02, -6.155299226038535e+00, -7.202504985949420e+02, -5.384718868600667e+02, -5.384718868600667e+02, -4.799357186847532e-06, -4.798666763860039e-06, -4.799345453200927e-06, -4.428098905937288e-06, -4.799000704133961e-06, -4.799000704133961e-06, -1.050828782585278e-04, -1.059981954617837e-04, -1.041179062567111e-04, -1.050752124556706e-04, -1.060628979771105e-04, -1.352766300358860e-04, -2.492115531359856e-02, -2.071432121284348e-02, -2.887241201921709e-02, -2.926894271963469e-02, -2.420796649717322e-02, -2.064926637413866e-02, -3.927491174475031e-01, -3.869034392071680e-01, -4.368078311851347e-01, -2.295384601812914e-04, -1.060471091589259e+00, -1.060471091589260e+00, -2.378507189731463e+02, -7.085458252902041e+02, -3.447166969447199e+03, -8.352790450191433e-01, -3.482538630362185e+02, -1.471310093202408e+03, -3.031104736443504e-02, -3.071836688354838e-02, -2.945276196646814e-02, -3.047357495825163e-02, -3.053394410844324e-02, -3.053394410844324e-02, -3.379785103445744e-02, -4.595499592840805e-02, -4.412357909629953e-02, -4.077907840341761e-02, -4.265892532579846e-02, -3.750743708196572e-02, -1.664170468709549e-02, -1.780934984452327e-01, -2.050239948183491e-01, -1.035452019774953e-01, -1.781956928846788e-01, -1.781956928846788e-01, -4.511051434359727e-02, -6.748630778200016e+00, -3.502035203233423e+00, -1.914505137351012e-01, -7.662439143480876e-01, -2.040090979780208e+00, -9.755726526785432e+01, -1.096738341385413e+04, -4.216034686162270e+03, -2.378837949414567e+00, -2.051516120722138e+03, -2.051516120722144e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_8_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_8", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.630050826371599e-03, 1.630056715207492e-03, 1.630077287908056e-03, 1.629990464821643e-03, 1.630036757442353e-03, 1.630036757442353e-03, 4.926716152953274e-03, 4.928447014023179e-03, 4.974026664771077e-03, 4.955148515579311e-03, 4.957687221215288e-03, 1.280394737608710e-02, 5.013119327553306e-03, 3.688959151961110e-02, 3.181350417899600e-02, 3.426872118033509e-02, 3.369516560211099e-02, 3.369516560211099e-02, 8.191431518630295e-02, 8.677641409187006e-02, 1.329963911065048e-04, 2.866395923375907e-02, 4.565910746115219e-02, 4.565910746115222e-02, 9.777807869855517e-04, 1.050961244576639e-03, 4.271933097341072e-03, 4.827021640385169e-04, 7.161627643634271e-04, 7.161627643634271e-04, 8.589867334829335e-03, 8.578317790343784e-03, 8.589215356754869e-03, 7.043475234862455e-03, 8.584077848301003e-03, 8.584077848301003e-03, 6.343043920993708e-03, 6.759305856763108e-03, 6.015934063672895e-03, 6.388907485969200e-03, 6.737335699098091e-03, 2.076965020295557e-02, 8.377946322174916e-02, 7.342999129319955e-02, 8.583737909958505e-02, 8.714351811444183e-02, 8.253934585918177e-02, 4.934052102068943e-02, -8.223054190962768e-04, 4.088114701621660e-02, -6.970109542207185e-04, 2.558856009975303e-02, 2.423367279779714e-02, 2.423367279779706e-02, -3.042182514195303e-08, 4.436308104111837e-04, 9.650733526784686e-04, -2.979405691195411e-04, -1.916811221527762e-07, 7.201335231035931e-04, 6.602441966876284e-02, 7.036959278237769e-02, 6.363705182002308e-02, 6.760440096097657e-02, 6.824056547150585e-02, 6.824056547150585e-02, 6.844023485932210e-02, 9.771228671882098e-02, 9.525948129189139e-02, 8.650130763849093e-02, 9.162047720418975e-02, 6.303504043629872e-02, 7.184340904460255e-02, 8.606471681331631e-04, 8.063549056122300e-02, 3.442977192179283e-02, 1.044895790822415e-01, 1.044895790822414e-01, 4.014626491514733e-02, 4.100977905745170e-03, 5.459757555308053e-03, 1.363173994474791e-01, -7.582645025767190e-04, 1.336163449504592e-02, 9.549364966308421e-04, 1.311300459656533e-04, 4.662447983109036e-04, 1.282288540978303e-02, 7.955224354418185e-04, 7.955224354418150e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
