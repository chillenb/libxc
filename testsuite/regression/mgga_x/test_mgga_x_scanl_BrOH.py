
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_scanl_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_scanl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.324520175794887e+01, -2.324525930539924e+01, -2.324555596604401e+01, -2.324461280581122e+01, -2.324523177275895e+01, -2.324523177275895e+01, -3.385970533334577e+00, -3.386078937224721e+00, -3.389727439855745e+00, -3.391786307091384e+00, -3.385999527779151e+00, -3.385999527779151e+00, -6.023788259808451e-01, -6.017618559416875e-01, -5.866608147475616e-01, -5.985484630611716e-01, -6.021686057001447e-01, -6.021686057001447e-01, -1.817830924821746e-01, -1.839810420594482e-01, -6.784678644226058e-01, -1.126945754802774e-01, -1.823790938837463e-01, -1.823790938837463e-01, -5.505065861764210e-03, -5.846480611004620e-03, -3.164176681477804e-02, -2.020949995964891e-03, -5.783952091599878e-03, -5.783952091599878e-03, -4.124650518246515e+00, -4.367645096349171e+00, -5.666696849724065e+00, -4.156749327796492e+00, -5.667123817654300e+00, -4.773043319474980e+00, -2.115345074579353e+00, -1.737292132174688e+00, -1.957862508954310e+00, -1.955251104734838e+00, -1.960983163079056e+00, -2.134565671714780e+00, -4.766330076021150e-01, -4.871619846343929e-01, -4.478368545162834e-01, -5.397521678530900e-01, -5.733536564844974e-01, -5.463374233131061e-01, -9.869913648677783e-02, -1.536832321562540e-01, -9.769173793159767e-02, -1.755727539993188e+00, -1.163761399426922e-01, -1.163761399426922e-01, -1.954598600349126e-03, -2.653461151608071e-03, -1.971752231819318e-03, -5.865346706775319e-02, -2.123042233469890e-03, -2.669201186467456e-03, -5.575821363559447e-01, -5.577261649482766e-01, -5.577051079416350e-01, -5.574335935721852e-01, -5.577173551736967e-01, -5.576893943881984e-01, -5.391682927867214e-01, -5.231493032249097e-01, -4.261041312079429e-01, -5.944196453552949e-01, -4.902468698853407e-01, -4.421206402016753e-01, -5.273169265411299e-01, -2.469681565538326e-01, -2.884965582019863e-01, -3.804603377122939e-01, -2.652989094991892e-01, -2.778446198515213e-01, -4.466527532560544e-01, -2.880998679762276e-02, -4.091703733729318e-02, -3.188861471814429e-01, -7.934201670628320e-02, -7.934201670628321e-02, -8.353210216005309e-03, -4.353961323869357e-04, -1.242112455353132e-03, -7.573601679173018e-02, -2.215180555247366e-03, -2.215180555247342e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_scanl_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_scanl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.110958665630960e+01, -3.110965931127327e+01, -3.111004318683604e+01, -3.110885224260417e+01, -3.110962447265709e+01, -3.110962447265709e+01, -3.764880220316027e+00, -3.764653372693008e+00, -3.757689871174755e+00, -3.751910218786426e+00, -3.764886825944906e+00, -3.764886825944906e+00, -7.882496300380659e-01, -7.872952385294475e-01, -7.631815924527937e-01, -7.686341987095963e-01, -7.879085301793203e-01, -7.879085301793203e-01, -1.206829101130855e-01, -1.281388945009852e-01, -8.827382003862989e-01, -1.544431184961707e-01, -1.229032913878238e-01, -1.229032913878240e-01, -9.502251076296106e-03, -1.006033978004100e-02, -4.930864917279872e-02, -3.654257208484677e-03, -9.953384679318561e-03, -9.953384679318561e-03, -5.046856468123653e+00, -5.956638736229011e+00, -7.572991280275788e+00, -5.022314069122856e+00, -7.573472181337626e+00, -6.443535072110821e+00, -2.868239354757925e+00, -2.294301893570432e+00, -1.815442874134209e+00, -1.819906275340407e+00, -1.862068018594950e+00, -2.891116717692728e+00, -5.728100739221639e-01, -6.320383962549818e-01, -5.411170938120130e-01, -7.066283265065112e-01, -7.394244943215371e-01, -7.325778477523613e-01, -1.444169877172827e-01, -2.111571998295642e-01, -1.426146569217965e-01, -2.434600016149214e+00, -1.672215976081116e-01, -1.672215976081116e-01, -3.559575966816730e-03, -4.766465434453629e-03, -3.545859591269620e-03, -8.882930394026801e-02, -3.827021760251952e-03, -4.793501308311503e-03, -7.391429584546869e-01, -7.321360442187016e-01, -7.344432731647647e-01, -7.360395588540325e-01, -7.354837902700263e-01, -7.354038550773830e-01, -7.160877298955651e-01, -5.632325858084993e-01, -5.180200669473336e-01, -7.945746382715410e-01, -6.530314391099067e-01, -5.302703168027204e-01, -6.382084130556740e-01, -3.417667085470044e-01, -3.892684998399381e-01, -5.133137748867712e-01, -3.504039970578281e-01, -3.644486105183595e-01, -4.624843649913503e-01, -4.585658390832412e-02, -6.290018791816869e-02, -3.872552248204271e-01, -1.170300601543346e-01, -1.170300601543347e-01, -1.432574463516051e-02, -8.390153855668154e-04, -2.286648328361662e-03, -1.116610350248451e-01, -3.991420014507244e-03, -3.991420014506784e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_scanl_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_scanl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([2.936742355323524e-10, 2.936679409474966e-10, 2.936427393780421e-10, 2.937457560329958e-10, 2.936708919133810e-10, 2.936708919133810e-10, -2.189073245990513e-05, -2.189979870636167e-05, -2.217018997023034e-05, -2.223188962370070e-05, -2.189183232576859e-05, -2.189183232576859e-05, -5.330036948602748e-03, -5.308444354181681e-03, -4.897923438426280e-03, -5.699732601958609e-03, -5.323955440142747e-03, -5.323955440142747e-03, -2.332407774095650e+00, -2.235282222724935e+00, -1.728888307717477e-03, -2.467574876762874e-01, -2.305296327859265e+00, -2.305296327859264e+00, 9.692150846068006e+01, 8.850459629780929e+01, 2.457246882780521e+00, 3.274789587668049e+02, 9.211769597386569e+01, 9.211769597386569e+01, -1.441825023648060e-06, -1.907209105611045e-06, 7.051578566157374e-08, -1.274469818748049e-06, 7.035975823262545e-08, -3.017324910230958e-06, 2.814953533761476e-06, -3.781652759107055e-05, -1.921286227333624e-04, -1.923543218277541e-04, -1.905735831063905e-04, 5.279134156583464e-06, -4.803553983549786e-03, -1.013300649697118e-02, -6.721284376771669e-03, -1.110768360570014e-02, -3.780388356328913e-03, -1.379140699461623e-02, 4.098456755005944e-01, 3.347933222886872e-02, 4.452974303655741e-01, -1.877332967724218e-04, 2.912106979751841e-01, 2.912106979751841e-01, 3.873115135962179e+02, 3.203960903014190e+02, 9.598836818481590e+02, 1.648701441684901e+00, 4.273831852164600e+02, 5.171826545862166e+02, -7.262846169636798e-03, -6.586069092170036e-03, -6.837709332043878e-03, -6.958997552957448e-03, -6.939098408481443e-03, -6.933950098368335e-03, -8.417314487399576e-03, -3.415077826701732e-02, -8.405755708840822e-03, 6.038398902244114e-04, -2.355332215230511e-02, -6.567874452949492e-03, -5.099278378416343e-03, 2.483900449184212e-02, -3.030033740254279e-02, 5.179210111204599e-03, -2.628963549438874e-02, -7.374336344479622e-02, -7.194099545047114e-02, 3.636691430231015e+00, 1.545213315018892e+00, -1.222355030666557e-01, 8.443824490305238e-01, 8.443824490305332e-01, 7.672444905710471e+01, 4.875367465589792e+03, 1.420802301432014e+03, 1.025801523302871e+00, 8.557968102686942e+02, 8.557968102665960e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_scanl_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_scanl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 2.512779794976727e-03, 2.513964486560327e-03, 2.549940766900917e-03, 2.561523286541976e-03, 2.512948162606721e-03, 2.512948162606721e-03, 3.781304316727181e-03, 3.765452454577063e-03, 3.496622174611771e-03, 4.297262394874566e-03, 3.777171292942853e-03, 3.777171292942853e-03, 4.311882338891074e-02, 4.293071061229098e-02, 8.195649658190734e-04, 2.497682704348317e-03, 4.310806238707701e-02, 4.310806238707698e-02, -1.589211122927914e-06, -1.608170938499413e-06, 1.228391713328205e-04, -8.462272302882779e-07, -1.627444909782196e-06, -1.627444909782196e-06, -7.190012791771429e-06, 2.653201806615161e-04, 0.000000000000000e+00, -1.085487391218921e-05, 0.000000000000000e+00, 9.027683226687219e-04, -9.566915355792809e-07, 6.461490976507737e-04, 4.249991703737211e-03, 4.311849429379486e-03, 4.325960016441601e-03, 0.000000000000000e+00, -8.165548802485072e-05, 8.090981822894594e-05, -8.041665056511579e-05, 2.702929172712768e-03, 2.721395473297902e-04, 6.257880641147056e-03, 0.000000000000000e+00, -3.544206604281927e-05, 0.000000000000000e+00, 2.680987977132082e-03, 0.000000000000000e+00, 0.000000000000000e+00, -1.172321636655688e-06, -1.230224855931762e-11, -2.606925690927936e-11, 0.000000000000000e+00, -1.551416765999778e-06, 0.000000000000000e+00, -5.676675714044786e-12, -5.351301304010383e-11, -1.346569706107674e-13, -5.977022967391191e-09, -8.662969792731118e-11, -3.674789762486683e-14, -2.374449031303260e-13, 1.283977466915506e-02, -6.358067673450624e-05, 0.000000000000000e+00, 7.854009564403214e-03, -8.542729249800837e-05, -1.033343040294709e-04, 0.000000000000000e+00, -2.376288958726152e-05, 0.000000000000000e+00, 1.097571519591292e-03, 5.669373264495792e-03, 1.927171741926502e-02, -1.246522043570575e-05, 2.475489834898619e-05, 1.123810129412032e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.900854255539582e-07, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
