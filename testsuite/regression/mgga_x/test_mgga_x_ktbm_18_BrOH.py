
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_18_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_18", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.172369765266733e+01, -2.172380847658189e+01, -2.172433634376933e+01, -2.172252686712620e+01, -2.172375574096421e+01, -2.172375574096421e+01, -3.036776610785038e+00, -3.036896203948371e+00, -3.040609191771612e+00, -3.039412615321980e+00, -3.036824252649057e+00, -3.943391447925322e+00, -5.282602752730604e-01, -6.689766099226495e-01, -6.351858061344683e-01, -6.471864183065816e-01, -6.698414761613163e-01, -6.698414761613163e-01, -1.782659334395224e-01, -1.820820028558081e-01, -6.218579399506410e-01, -1.124584590596543e-01, -1.793831550314114e-01, -1.793831550314114e-01, -8.117031192530230e-03, -8.502811548615628e-03, -3.482207590116231e-02, -3.891469687901202e-03, -8.414214136756689e-03, -8.414214136756689e-03, -6.081379503412989e+00, -6.081334759203844e+00, -6.081369438185085e+00, -5.466439155916718e+00, -6.081365340151166e+00, -6.081365340151166e+00, -1.650881144800461e+00, -1.672530973131930e+00, -1.641885208311450e+00, -1.658762662418386e+00, -1.677504749006413e+00, -2.190850007802494e+00, -6.802813983735795e-01, -7.424930102479849e-01, -6.359527151605437e-01, -6.764611271994482e-01, -7.102424924672918e-01, -5.817507090199326e-01, -7.663198401671374e-02, -1.662355726173292e-01, -7.559599778975265e-02, -2.260519799211164e+00, -9.486476934149700e-02, -9.486476934149700e-02, -3.776697939122067e-03, -4.290427606239907e-03, -3.215748761249190e-03, -4.810649968873272e-02, -3.932657660483930e-03, -3.909201628990191e-03, -6.809096946245439e-01, -6.845197777081015e-01, -6.530400463724862e-01, -6.823615589005264e-01, -6.828760116158308e-01, -6.828760116158308e-01, -6.617158843350732e-01, -5.874930927739571e-01, -6.197389797986320e-01, -6.415411673329624e-01, -6.314634011611580e-01, -5.374674485493792e-01, -7.800058968658747e-01, -1.804053370288196e-01, -2.787613219135261e-01, -2.973184937211784e-01, -3.324056397118872e-01, -3.324056397118871e-01, -4.000794894324898e-01, -3.220432953315848e-02, -4.382289346381222e-02, -3.771797037788929e-01, -6.231329962591652e-02, -6.473797221999567e-02, -9.512077245253108e-03, -1.174492839104384e-03, -2.231208879009599e-03, -6.175555005161946e-02, -3.322242201744758e-03, -3.322242201744755e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_18_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_18", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.255430863176341e+01, -3.255438891909899e+01, -3.255480516106441e+01, -3.255348932631522e+01, -3.255435048559684e+01, -3.255435048559684e+01, -4.867342329929921e+00, -4.867576882887903e+00, -4.874785201284769e+00, -4.872388027516562e+00, -4.867430597387535e+00, -4.926191311893855e+00, -7.667859348071223e-01, -9.090286433740867e-01, -8.645744486646734e-01, -8.806675694671809e-01, -9.101171555370869e-01, -9.101171555370869e-01, -2.426362224220334e-01, -2.478256951325798e-01, -8.515366817288019e-01, -1.469986607287432e-01, -2.441645854428268e-01, -2.441645854428268e-01, -1.035724347961613e-02, -1.084968420819009e-02, -4.452384407222313e-02, -4.964679823276694e-03, -1.073663620582756e-02, -1.073663620582755e-02, -7.213250525717208e+00, -7.217106411129783e+00, -7.213669358542191e+00, -7.915815134775105e+00, -7.215190228667925e+00, -7.215190228667925e+00, -2.606945128845075e+00, -2.651098246951050e+00, -2.588067167018793e+00, -2.623024208141532e+00, -2.661372247110887e+00, -2.808987321940897e+00, -7.994504657870862e-01, -8.610168911277294e-01, -7.709706605550721e-01, -7.856552106587191e-01, -8.232929517721831e-01, -9.101296907645572e-01, -1.005308566053104e-01, -2.228000221698575e-01, -9.912116959945506e-02, -2.618016602987549e+00, -1.236235391801649e-01, -1.236235391801649e-01, -5.035208777224705e-03, -5.473714621836261e-03, -4.102658571148296e-03, -6.362835328290087e-02, -5.243100605579878e-03, -4.987334265398847e-03, -8.753480361643502e-01, -8.528985745791242e-01, -8.994878229120715e-01, -8.668120311075869e-01, -8.636660605367550e-01, -8.636660605367550e-01, -8.407174180245444e-01, -6.955726610669728e-01, -7.158070814526564e-01, -7.488501657876981e-01, -7.297161001334935e-01, -8.154518031892206e-01, -9.002355367682437e-01, -2.507686534646218e-01, -3.779943974886703e-01, -4.706482329286265e-01, -4.403047526774938e-01, -4.403047526774937e-01, -6.424202225655166e-01, -4.115955265782494e-02, -5.609456127085386e-02, -4.686054565358163e-01, -8.186502637747760e-02, -8.339986963002217e-02, -1.213698589460722e-02, -1.498367260974536e-03, -2.846511041993468e-03, -7.955485780058333e-02, -4.238476003422207e-03, -4.238476003422201e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_18_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_18", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.002415682321284e-08, -2.002413590806538e-08, -2.002388333505789e-08, -2.002424673322038e-08, -2.002414689525604e-08, -2.002414689525604e-08, -1.465602838525451e-05, -1.465928809672501e-05, -1.475532464177492e-05, -1.471341464637099e-05, -1.465665436218886e-05, -1.982927317003639e-05, -3.792958327791822e-03, -5.743924514521452e-03, -5.135837148415630e-03, -5.491709472135059e-03, -5.760242131268019e-03, -5.760242131268019e-03, -8.013117464121712e-01, -8.174825528235383e-01, -8.739917833922330e-04, -4.145506768507141e-01, -8.053154567069591e-01, -8.053154567069591e-01, -5.550041334863419e+01, -5.049638805679059e+01, -2.206193680510824e+00, -1.407987398912822e+02, -5.273810207589494e+01, -5.273810207589488e+01, -7.032951733465513e-06, -7.033671109875073e-06, -7.033059173844066e-06, -6.268628341864270e-06, -7.033284916418403e-06, -7.033284916418403e-06, -1.159366856711282e-04, -1.181556191006809e-04, -1.147986684448106e-04, -1.166655541334878e-04, -1.188998940135005e-04, -1.641845100604152e-04, -3.477788981301205e-02, -3.083459055973175e-02, -3.674711077924186e-02, -3.896301289731013e-02, -3.265040752522478e-02, -2.629507003375498e-02, 9.003028218994186e-02, -3.323461403818581e-01, 8.186827398039195e-02, -3.210895882473296e-04, -6.660526912823772e-01, -6.660526912823772e-01, 2.425824927814805e+02, -1.302838008229430e+02, -4.600106180931049e+02, 7.223951284492119e-01, 2.258868399899372e+02, -1.741364402901820e+02, -4.245235393247397e-02, -4.283300816931564e-02, -4.066680749565648e-02, -4.261678757040478e-02, -4.267126660542912e-02, -4.267126660542912e-02, -4.818200722481080e-02, -5.935892701337998e-02, -5.889940896522965e-02, -5.617727148461873e-02, -5.781280605941482e-02, -4.858241780272380e-02, -2.431892451330217e-02, -1.582029410165798e-01, -2.192611809495386e-01, -1.152922470151843e-01, -2.036193398191713e-01, -2.036193398191713e-01, -5.384604343420474e-02, -2.404669411957352e+00, -1.380124457542221e+00, -2.476171769458393e-01, 2.602109231536929e-01, -1.049665195062925e+00, -2.517414511562597e+01, -1.820815218393218e+03, -7.083715330955417e+02, -1.261632772071593e+00, -2.856920982652861e+02, -2.856920982652865e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_18_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_18", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.104489950836550e-03, 2.104496939324610e-03, 2.104523228432188e-03, 2.104410102887127e-03, 2.104493661207081e-03, 2.104493661207081e-03, 6.160523526016571e-03, 6.162483837286370e-03, 6.221291000415457e-03, 6.198009731284863e-03, 6.161038372546097e-03, 1.867682520299527e-02, 5.836629643343276e-03, 4.465522053959903e-02, 3.700953063135659e-02, 4.045851785221455e-02, 4.486004022740064e-02, 4.486004022740064e-02, 1.286096029273031e-01, 1.364184617089000e-01, 9.740953731792894e-04, 2.256917646820116e-02, 1.307891925288663e-01, 1.307891925288663e-01, 9.425009895832648e-04, 9.866339972062412e-04, 3.203732570063858e-03, 2.610956331218102e-04, 9.985746967884662e-04, 9.985746967884669e-04, 1.227822249069815e-02, 1.225450154556041e-02, 1.227561170037743e-02, 9.095566214396569e-03, 1.226631516268699e-02, 1.226631516268699e-02, 7.792006958942441e-03, 8.300190219839434e-03, 7.567641500688074e-03, 7.970278689548020e-03, 8.435500176148997e-03, 2.971673861185902e-02, 1.271756314261440e-01, 1.104427024645072e-01, 1.277962585143551e-01, 1.289209400106866e-01, 1.226820919578600e-01, 6.388153843557660e-02, -9.853570237979377e-04, 5.298467915110622e-02, -1.086002947537963e-03, 3.851277912212848e-02, 2.185587004231349e-02, 2.185587004231349e-02, -3.339946589765429e-07, 3.239550467652235e-04, 4.817319708743889e-04, -3.152429600808714e-04, -3.846101201730374e-07, 3.274751184050623e-04, 8.465716612858895e-02, 9.279341396855664e-02, 8.002574562708716e-02, 8.765160878878417e-02, 8.878509223382160e-02, 8.878509223382160e-02, 9.034247811616097e-02, 1.456667475181461e-01, 1.395137189674951e-01, 1.238592396600576e-01, 1.328397157870563e-01, 8.141587054777367e-02, 1.092069864177245e-01, 5.998193263409409e-03, 1.186708323608985e-01, 4.542205963607257e-02, 1.525310831577766e-01, 1.525310831577766e-01, 5.134766876017956e-02, 2.728500474903758e-03, 4.101243190087123e-03, 1.994086715153228e-01, -9.550654194614294e-04, 1.077649595518258e-02, 6.869746858570577e-04, 9.270567650030089e-05, 2.474291754695252e-04, 1.124167442609909e-02, 3.296867048156732e-04, 3.296867048156707e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
