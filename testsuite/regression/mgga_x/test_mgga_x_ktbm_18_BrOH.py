
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_18_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_18", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.491593938686232e+01, -2.491599849102679e+01, -2.491642702264084e+01, -2.491546482696105e+01, -2.491596906281256e+01, -2.491596906281256e+01, -3.402736605653293e+00, -3.402880608390604e+00, -3.407500123454756e+00, -3.408349077996004e+00, -3.402777587271421e+00, -3.402777587271421e+00, -5.734434896502516e-01, -5.727681054102013e-01, -5.564442727461607e-01, -5.676566518627660e-01, -5.732061524872116e-01, -5.732061524872116e-01, -1.731721577107157e-01, -1.761217753785711e-01, -6.397606379819559e-01, -1.081618132696407e-01, -1.739799765947743e-01, -1.739799765947743e-01, -8.107709443749504e-03, -8.490535349354261e-03, -3.454158051816465e-02, -3.845117436453914e-03, -8.403632848376488e-03, -8.403632848376487e-03, -6.077088405948534e+00, -6.077090623262776e+00, -6.077137638137410e+00, -6.077136719436075e+00, -6.077024990425033e+00, -6.077024990425033e+00, -2.085262015590488e+00, -2.120917085983716e+00, -2.081010414356724e+00, -2.109571938610124e+00, -2.114626026138367e+00, -2.114626026138367e+00, -6.197475284809815e-01, -6.669697635550184e-01, -5.592114603943767e-01, -5.826801610068446e-01, -6.576069833469640e-01, -6.576069833469640e-01, -7.873347948835323e-02, -1.636294643139533e-01, -7.784080189036631e-02, -1.924971734487177e+00, -9.313348674051800e-02, -9.313348674051800e-02, -3.724176592372052e-03, -4.245617979039021e-03, -3.197124007349626e-03, -4.797705256722784e-02, -3.862327443269188e-03, -3.862327443269187e-03, -6.711540361789592e-01, -6.751221241418124e-01, -6.738307735634048e-01, -6.727291026258810e-01, -6.732875655313747e-01, -6.732875655313747e-01, -6.429239951886878e-01, -5.795209127383415e-01, -6.079535187046712e-01, -6.264058003133440e-01, -6.172862234676578e-01, -6.172862234676578e-01, -6.851644610691601e-01, -2.186586258609361e-01, -2.690160903570781e-01, -3.531619918833216e-01, -3.140965508166346e-01, -3.140965508166346e-01, -4.839126438549380e-01, -3.204755870928572e-02, -4.337117341946663e-02, -3.375900937051527e-01, -6.382435097831715e-02, -6.382435097831715e-02, -9.398944176693477e-03, -1.159081260331913e-03, -2.221402581902344e-03, -6.083168381826287e-02, -3.281625122421185e-03, -3.281625122421181e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_18_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_18", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.945754619282331e+01, -2.945763030767598e+01, -2.945791961985941e+01, -2.945653489995925e+01, -2.945759138799943e+01, -2.945759138799943e+01, -4.949582625485103e+00, -4.949703654197948e+00, -4.953508864796149e+00, -4.952694522837266e+00, -4.949638021479536e+00, -4.949638021479536e+00, -8.251042310845306e-01, -8.236421990869227e-01, -7.886334030856857e-01, -8.078272972553797e-01, -8.245900110640485e-01, -8.245900110640485e-01, -2.385651254820889e-01, -2.431660442054490e-01, -8.851164739643357e-01, -1.442656134538704e-01, -2.398679903261900e-01, -2.398679903261900e-01, -1.037350099990839e-02, -1.087108919145307e-02, -4.486256964858141e-02, -5.073355626255049e-03, -1.075504344766719e-02, -1.075504344766719e-02, -7.218732003789631e+00, -7.222534217559874e+00, -7.219075843589167e+00, -7.222034780823873e+00, -7.220737798438286e+00, -7.220737798438286e+00, -2.778425369170999e+00, -2.801573243663650e+00, -2.770223235548090e+00, -2.788753660553390e+00, -2.804812240745267e+00, -2.804812240745267e+00, -8.370724240622007e-01, -9.384234320134925e-01, -7.943598221469442e-01, -8.512520953171194e-01, -8.660559742662782e-01, -8.660559742662782e-01, -1.034345725886616e-01, -2.206241379198602e-01, -1.023187038518542e-01, -2.863856295627711e+00, -1.228619985442765e-01, -1.228619985442765e-01, -4.850188248358136e-03, -5.571481302704785e-03, -4.138652265470790e-03, -6.325669281447335e-02, -5.097485152907237e-03, -5.097485152907235e-03, -8.882916496869311e-01, -8.653377040827682e-01, -8.732385421873353e-01, -8.796007174530296e-01, -8.763935565214728e-01, -8.763935565214728e-01, -8.652776709588617e-01, -7.006781377361245e-01, -7.271892972146353e-01, -7.667390593617828e-01, -7.450601260687879e-01, -7.450601260687881e-01, -9.857750788274218e-01, -2.988742135662607e-01, -3.715081663320499e-01, -4.945884023470146e-01, -4.333222344728384e-01, -4.333222344728382e-01, -6.472294445829903e-01, -4.136083498593615e-02, -5.653055954540975e-02, -4.735449095321455e-01, -8.352585091639585e-02, -8.352585091639583e-02, -1.238910434817499e-02, -1.539194563986688e-03, -2.865115188883386e-03, -7.968080947070529e-02, -4.335572312059871e-03, -4.335572312059870e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_18_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_18", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.320754945006616e-08, -2.320745730686757e-08, -2.320699288482903e-08, -2.320852589403122e-08, -2.320750100476671e-08, -2.320750100476671e-08, -1.664613664200299e-05, -1.664978183269922e-05, -1.675805422157482e-05, -1.672409383734780e-05, -1.664674646062660e-05, -1.664674646062660e-05, -4.418064821222582e-03, -4.400352024576280e-03, -3.971719288678560e-03, -4.322199241531206e-03, -4.412346939021069e-03, -4.412346939021069e-03, -7.589749439785385e-01, -7.697757466344186e-01, -9.709868537516411e-04, -3.040699303639983e-01, -7.609361848414117e-01, -7.609361848414117e-01, -5.318413789593720e+01, -4.784094596673855e+01, -1.691149544128429e+00, -4.864285754012198e+01, -5.033131761202100e+01, -5.033131761202092e+01, -7.027438427695913e-06, -7.028218346945541e-06, -7.027622036337265e-06, -7.028221117992541e-06, -7.027708486518245e-06, -7.027708486518245e-06, -1.542557461372130e-04, -1.573566197732955e-04, -1.537041530110887e-04, -1.563444569586363e-04, -1.570206297604364e-04, -1.570206297604364e-04, -3.129744536383978e-02, -2.742960947214850e-02, -3.168313690656691e-02, -3.305334986479373e-02, -2.995141712023467e-02, -2.995141712023467e-02, -4.389304599405774e-01, -3.165322610105625e-01, -5.033833997442372e-01, -2.692934167213013e-04, -5.761484536598588e-01, -5.761484536598588e-01, -1.201669093342950e+02, -6.257586725958524e+01, -3.488775360315357e+02, -5.784624571961904e-01, -5.893377653516144e+01, -5.893377653516127e+01, -4.178862924064308e-02, -4.218854945817043e-02, -4.206934513660367e-02, -4.195929857155564e-02, -4.201605131792924e-02, -4.201605131792924e-02, -4.669324257597204e-02, -5.842461504192571e-02, -5.763479311269098e-02, -5.470716647706161e-02, -5.636145380130346e-02, -5.636145380130345e-02, -2.110736003364496e-02, -2.533665253382379e-01, -2.071568792273552e-01, -1.417038053177545e-01, -1.885198163066596e-01, -1.885198163066596e-01, -6.669505741079704e-02, -2.062683540082165e+00, -1.015633034257911e+00, -2.170568166108557e-01, -8.430713611358140e-01, -8.430713611358139e-01, -9.547599589797784e+00, -2.776624595917409e+02, -5.825256171784224e+02, -9.957759855211097e-01, -8.852490300151784e+01, -8.852490300151796e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_18_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_18", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_18_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_18", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [3.167208660307354e-03, 3.167186871519540e-03, 3.167127611899982e-03, 3.167485401206122e-03, 3.167196829771728e-03, 3.167196829771728e-03, 1.093631287747485e-02, 1.093876412627382e-02, 1.101428282392957e-02, 1.101626175705879e-02, 1.093673564278748e-02, 1.093673564278748e-02, 1.779893222208788e-02, 1.771138302968680e-02, 1.580830357244574e-02, 1.840685057306564e-02, 1.777088277877666e-02, 1.777088277877666e-02, 1.110092730229345e-01, 1.156867504631294e-01, 3.583127014167759e-03, 1.208526615863669e-02, 1.120921529517385e-01, 1.120921529517385e-01, 8.854810319766903e-04, 9.116958918813332e-04, 2.183033172940402e-03, 6.273828684294681e-05, 9.326032121862488e-04, 9.326032121862570e-04, 1.225509484637105e-02, 1.223168317826851e-02, 1.225280971406828e-02, 1.223460059889875e-02, 1.224295105160917e-02, 1.224295105160917e-02, 2.561304722938270e-02, 2.667679530288071e-02, 2.561244613417139e-02, 2.649256917862302e-02, 2.631041634921851e-02, 2.631041634921851e-02, 9.520535885112456e-02, 8.090112921617644e-02, 8.289985153905603e-02, 8.047795763384025e-02, 9.747002868178321e-02, 9.747002868178321e-02, 7.297917556498593e-03, 4.715738358698619e-02, 8.113168931356227e-03, 2.318950813516286e-02, 1.660397571842781e-02, 1.660397571842781e-02, 1.666240623799883e-04, 1.178557664819712e-04, 3.239276967661835e-04, 1.850448705500968e-03, 7.675501654979774e-05, 7.675501654979558e-05, 8.167076448816851e-02, 8.956017364918678e-02, 8.675768516650889e-02, 8.456840775479077e-02, 8.566535825183334e-02, 8.566535825183334e-02, 8.399306506576097e-02, 1.398467164270800e-01, 1.320735459598771e-01, 1.159942275373669e-01, 1.246451794967241e-01, 1.246451794967241e-01, 7.396398921465712e-02, 7.892688183054297e-02, 1.013327778526126e-01, 1.155252341746922e-01, 1.225258574785670e-01, 1.225258574785671e-01, 1.181907159113379e-01, 2.182766604025727e-03, 2.625079275875615e-03, 1.358892594143074e-01, 7.558268894513033e-03, 7.558268894512951e-03, 1.861568038276109e-04, 8.580534920163124e-06, 1.864810401910402e-04, 7.668931128521097e-03, 6.941074455025871e-05, 6.941074455026080e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
