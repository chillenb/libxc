
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_br89_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.881994598366091e+01, -1.881997599589891e+01, -1.882018688686632e+01, -1.881969391296983e+01, -1.881996114806351e+01, -1.881996114806351e+01, -3.617641245863141e+00, -3.617580424904738e+00, -3.615951680092862e+00, -3.618199771395881e+00, -3.617630406322289e+00, -3.617630406322289e+00, -7.732713582400798e-01, -7.735343609242766e-01, -7.818653653379093e-01, -7.825290865309390e-01, -7.733457824147123e-01, -7.733457824147123e-01, -2.422875184173644e-01, -2.425702928897477e-01, -9.235086172281034e-01, -2.185725281937122e-01, -2.423173820379563e-01, -2.423173820379563e-01, -7.799602939844198e-02, -7.874688043334849e-02, -1.343508128290957e-01, -7.212528988424899e-02, -7.804830309318270e-02, -7.804830309318270e-02, -9.180072131538749e+00, -6.626063792797160e+00, -3.815495463517648e+00, -9.987384926380281e+00, -4.290418038736774e+00, -6.009099337823361e+00, -1.429808108355333e+00, -2.635696678390574e+00, -2.339183687619850e+00, -2.356507944199775e+00, -2.345343458910560e+00, -2.084660131080401e+00, -1.241070680955334e+00, -9.826841603455327e-01, -1.064063582831473e+00, -6.044181307939540e-01, -6.608052619537805e-01, -7.040076047903330e-01, -7.122855600383489e-02, -4.220210647771331e-01, -7.006947267626805e-02, -2.051205115688679e+00, -1.858469334801722e-01, -1.640775655580262e-01, -1.400654916876882e-01, -2.297395002390408e+00, -2.948498096905036e-03, -4.423414754943829e-02, -9.675437656739999e-02, -3.584422252801225e-03, -2.965311972843126e+01, -4.350030633506087e-01, -4.358380681734500e-01, -4.676574750613207e+00, -4.361631667727403e-01, -8.794250282194733e+01, -4.233001018189391e-01, -5.566908290982112e-01, -9.645917367315646e-01, -4.450267173100804e-01, -6.282749348229357e-01, -1.213071898165617e+00, -1.391903555612590e+00, -1.688587470069142e-01, -2.004829479297985e-01, -2.578317141982169e-01, -4.513267677639592e-01, -4.090283386895238e-01, -5.128983509650552e-01, -2.432608908196365e-01, -1.635742922607791e-01, -3.648887607653396e-01, -5.762238888723068e-02, -1.523439011885011e-01, -8.717530910272919e-03, -2.310563895686784e-01, -2.045987426616941e-03, -5.702804317113310e-02, -3.046381093390471e-03, -3.046284124224674e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_br89_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.824568816427653e+01, -2.824575523076665e+01, -2.824613258170906e+01, -2.824503275797804e+01, -2.824572285575886e+01, -2.824572285575886e+01, -4.577632827668036e+00, -4.577688420267486e+00, -4.579422143815954e+00, -4.577568561235923e+00, -4.577680309272511e+00, -4.577680309272511e+00, -8.675260577000623e-01, -8.665337927007700e-01, -8.419797694793894e-01, -8.463360349466289e-01, -8.671560981609824e-01, -8.671560981609824e-01, -2.369497966851631e-01, -2.395441819487470e-01, -1.056604210298180e+00, -1.860298628341153e-01, -2.377041523395458e-01, -2.377041523395459e-01, -4.119644929723325e-02, -4.179698926635667e-02, -8.588802592675088e-02, -3.547377597101700e-02, -4.144800188983135e-02, -4.144800188983135e-02, -8.658338625214851e+00, -7.290932398212543e+00, -5.111491407178435e+00, -9.143726578645207e+00, -6.386586818982712e+00, -7.058581673054985e+00, -1.909914670302066e+00, -2.718285626828418e+00, -2.521506695870050e+00, -2.541409026969245e+00, -2.554780590183626e+00, -2.429062712318250e+00, -1.096570968560561e+00, -9.778177751030689e-01, -9.697008049915151e-01, -7.797086203207341e-01, -8.033175876846811e-01, -8.142557477363641e-01, -9.539696583153513e-02, -3.545379123038958e-01, -9.349209457857026e-02, -2.612027749165259e+00, -1.490834489359984e-01, -1.252575542294476e-01, -8.598339784227065e-02, -1.369598166750950e+00, -3.931330861684172e-03, -5.910921880528940e-02, -5.726789233853100e-02, -4.779238017002482e-03, -1.881507033697528e+01, -5.800075403783753e-01, -5.811176066938762e-01, -3.327148747889690e+00, -5.815553455448134e-01, -5.379820751744349e+01, -5.644003756835130e-01, -6.518426126283925e-01, -8.938506247752426e-01, -6.579509975712079e-01, -7.240624195524721e-01, -1.054926068188207e+00, -1.238862471065868e+00, -2.254039031772989e-01, -2.675120042599285e-01, -3.465354638792216e-01, -4.479178489324434e-01, -4.220050282711142e-01, -5.892377929784072e-01, -1.693081386144684e-01, -1.128588781043653e-01, -4.326114745477334e-01, -7.690222705467931e-02, -1.106048866574947e-01, -1.162377314683954e-02, -1.397884767601238e-01, -2.727985812788553e-03, -7.485845569823302e-02, -4.061966903618114e-03, -4.061718536270330e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_br89_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.654757521879932e-09, -4.654676108769078e-09, -4.654379850822894e-09, -4.655711823456440e-09, -4.654713982916846e-09, -4.654713982916846e-09, -9.785302062109990e-06, -9.785797447584670e-06, -9.798659806386770e-06, -9.779362826431836e-06, -9.785347646179121e-06, -9.785347646179121e-06, -4.781397173523699e-03, -4.775836052947276e-03, -4.620383186627334e-03, -4.593383845822150e-03, -4.779874722361900e-03, -4.779874722361900e-03, -5.335432304685350e-01, -5.255280547811110e-01, -2.349195484629391e-03, -1.059332171053319e+00, -5.314570146823079e-01, -5.314570146823082e-01, -1.715862082886968e+03, -1.510556848576170e+03, -2.429778723672701e+01, -1.198590041519577e+04, -1.571305966710429e+03, -1.571305966710429e+03, -3.770515696064975e-07, -9.219002598454945e-07, -5.173254893336101e-10, -3.102661660857480e-07, -5.648784983778324e-07, -1.310327983549543e-06, -3.876157876743079e-09, -3.836430867587066e-05, -5.756190234389858e-05, -5.592431054864286e-05, -5.680462266192786e-05, -8.968902206719558e-05, -1.583171110919580e-03, -2.379131721659218e-03, -2.437946058870426e-03, -1.266099606285547e-02, -8.944681175003516e-03, -6.967205891534318e-03, -4.864985446470373e-03, -1.357089752028263e-01, -1.015123061612014e-04, -9.606574653638394e-05, -2.029268877287884e+00, -2.809453033800356e+00, -5.107922819561108e+03, -9.264131933129177e+01, -8.808167003486282e-09, -8.057418347330992e-03, -7.745396759017420e+03, -8.873883214640695e-05, -9.749540572580013e-06, -4.672497029359566e-12, -1.287408531043208e-14, -1.398800981082566e-04, -7.646810467529225e-12, -2.351048950723264e-06, -2.653014880428484e-14, -1.776093605183160e-02, -3.307689163131675e-03, -3.826510862921440e-03, -1.099369602143550e-02, -1.934865539324350e-03, -9.724311599350757e-04, -7.802676634611074e-06, -1.670983563218921e-06, -7.364471053715709e-05, -4.882998952189416e-02, -6.524728490452404e-02, -2.465379084073134e-02, -1.032731106495192e+01, -1.038932976153192e+01, -9.621812504061884e-02, -4.028657216320244e-04, -5.802495163210679e+00, -1.039338151845646e-03, -5.838765065532005e+04, -2.478158501981434e-04, -1.177160845657798e+00, -9.367244819553024e-02, -1.372692661531128e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_br89_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([-2.249611914698371e-04, -2.249588949695662e-04, -2.249530910351255e-04, -2.249906123678387e-04, -2.249599410822866e-04, -2.249599410822866e-04, -2.040752591721257e-03, -2.040868755218837e-03, -2.044157332204904e-03, -2.040386480545399e-03, -2.040794787372201e-03, -2.040794787372201e-03, -7.023480942307249e-03, -6.993730650806614e-03, -6.239776842387613e-03, -6.350986696721127e-03, -7.013361455916544e-03, -7.013361455916544e-03, -1.604591907607049e-02, -1.644464091040464e-02, -5.940562147976745e-03, -1.214059725988774e-02, -1.617545422424193e-02, -1.617545422424193e-02, -8.990042007020721e-03, -9.095375618988936e-03, -9.824112795766773e-03, -6.933425412104438e-03, -9.168445899907422e-03, -9.168445899907422e-03, -2.636085210478782e-04, -6.448731987009317e-04, -3.616987574451350e-07, -2.170189746077901e-04, -3.950312976869468e-04, -9.163396468861020e-04, -1.436214858700903e-07, -1.451753773473470e-03, -2.114642077743666e-03, -2.088659579754444e-03, -2.158607913324508e-03, -3.408233761622073e-03, -1.534627160014931e-03, -2.955852426830005e-03, -2.019114275351068e-03, -1.189847776165111e-02, -9.708709944026780e-03, -7.562324447097426e-03, -2.211238083962511e-05, -4.169699523370488e-03, -4.438797677633555e-07, -3.358645154728614e-03, -1.426096492504409e-02, -1.974381592405493e-02, -2.652655074313880e-03, -7.181144213298293e-05, -2.874737629533338e-15, -8.825224637693664e-06, -4.541605894320954e-03, -5.203307404347118e-11, -1.038339197877638e-05, -4.896997564943752e-12, -1.357068147592996e-14, -1.481051152941485e-04, -8.078475631481562e-12, -2.483766498184438e-06, -2.562090580897272e-14, -1.119753587496633e-02, -2.376636245138956e-03, -3.088691625840057e-03, -8.367793974405744e-03, -1.472712740981311e-03, -1.392602504504790e-03, -4.769994551828218e-07, -1.711303023552675e-07, -1.575937456318774e-05, -7.229637717000251e-03, -9.660338584879344e-03, -1.140432012717513e-02, -3.317381013405529e-03, -8.279946692059946e-03, -1.736714849557457e-02, -9.791162784686890e-07, -1.410226079057425e-02, -8.766177880153675e-09, -9.288123962225885e-04, -2.702384116820817e-11, -2.484185201044098e-03, -3.371565182216203e-08, -4.940751385522644e-11])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_br89_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_br89", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([7.198758127034813e-04, 7.198684639026107e-04, 7.198498913124025e-04, 7.199699595770847e-04, 7.198718114633176e-04, 7.198718114633176e-04, 6.530408293508030e-03, 6.530780016700283e-03, 6.541303463055693e-03, 6.529236737745273e-03, 6.530543319591044e-03, 6.530543319591044e-03, 2.247513901538322e-02, 2.237993808258117e-02, 1.996728589564037e-02, 2.032315742950761e-02, 2.244275665893293e-02, 2.244275665893293e-02, 5.134694104342553e-02, 5.262285091329483e-02, 1.900979887352557e-02, 3.884991123164078e-02, 5.176145351757417e-02, 5.176145351757421e-02, 2.876813442246631e-02, 2.910520198076460e-02, 3.143716094645367e-02, 2.218696131873419e-02, 2.933902687970376e-02, 2.933902687970376e-02, 8.435472673532097e-04, 2.063594235842983e-03, 1.157436023824361e-06, 6.944607187449284e-04, 1.264100152598232e-03, 2.932286870035525e-03, 4.595887547841885e-07, 4.645612075115099e-03, 6.766854648779729e-03, 6.683710655214224e-03, 6.907545322638426e-03, 1.090634803719065e-02, 4.910806912047780e-03, 9.458727765856011e-03, 6.461165681123419e-03, 3.807512883728353e-02, 3.106787182088573e-02, 2.419943823071177e-02, 7.075961868679323e-05, 1.334303847478557e-02, 1.420415256842039e-06, 1.074766449513157e-02, 4.563508776014107e-02, 6.318021095697580e-02, 8.488496237804415e-03, 2.297966148255454e-04, 9.199160275366000e-15, 2.824071884061506e-05, 1.453313886182705e-02, 1.665058369977700e-10, 3.322685433208440e-05, 1.567039220639964e-11, 4.342618074529748e-14, 4.739363689412750e-04, 2.585112202074100e-11, 7.948052794190204e-06, 8.198689870323316e-14, 3.583211479989228e-02, 7.605235984444661e-03, 9.883813202688189e-03, 2.677694071809836e-02, 4.712680771140195e-03, 4.456328014415329e-03, 1.526398256585030e-06, 5.476169675365434e-07, 5.042999860219960e-05, 2.313484069440080e-02, 3.091308347161388e-02, 3.649382440696038e-02, 1.061561924289769e-02, 2.649582941459183e-02, 5.557487518583863e-02, 3.133172091101359e-06, 4.512723452983757e-02, 2.805176921687531e-08, 2.972199667912284e-03, 8.647629171446329e-11, 7.949392643341123e-03, 1.078900858312327e-07, 1.581040443465453e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
