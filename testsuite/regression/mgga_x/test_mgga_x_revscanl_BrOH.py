
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_revscanl_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revscanl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.229252048276382e+01, -2.229253213328204e+01, -2.229268525766666e+01, -2.229249288959839e+01, -2.229252579529179e+01, -2.229252579529179e+01, -3.710189495818832e+00, -3.710160636333353e+00, -3.709516528585099e+00, -3.789138188091469e+00, -3.710190458756393e+00, -3.788618221429089e+00, -7.229855969753853e-01, -7.254814554861531e-01, -7.061606377660302e-01, -7.117202230557103e-01, -7.259550334117690e-01, -7.259550334117690e-01, -1.955864419050110e-01, -2.013180188138601e-01, -8.634227338264473e-01, -1.440375685902481e-01, -1.994661775489321e-01, -1.994661775489321e-01, -1.109599534820572e-02, -1.162253884604193e-02, -4.724059473633906e-02, -5.323111285904825e-03, -1.150142028597832e-02, -1.150142028597832e-02, -5.670126071678872e+00, -5.671134510792952e+00, -5.670232470255376e+00, -5.300074945767545e+00, -5.670638627425906e+00, -5.670638627425906e+00, -2.115679313308162e+00, -2.130986838565838e+00, -2.109082014040734e+00, -2.121035662317853e+00, -2.134565671714780e+00, -2.147846200755332e+00, -6.322635701848238e-01, -6.867962335926016e-01, -5.999551059098538e-01, -6.257694079355642e-01, -6.565563990547856e-01, -6.299184993327410e-01, -9.869913648677783e-02, -2.000960648563435e-01, -9.769173793159767e-02, -1.797695651753117e+00, -1.223703654715559e-01, -1.223703654715559e-01, -1.928008903110506e-03, -5.868621816548378e-03, -4.398561913211362e-03, -5.865346706775319e-02, -2.108463879888883e-03, -5.347224399219016e-03, -6.524163719572357e-01, -6.489333631220664e-01, -5.655798462251450e-01, -6.511452271055599e-01, -6.506631067866769e-01, -6.506631067866769e-01, -6.314777935070441e-01, -5.478041971503828e-01, -5.722061132170410e-01, -5.948356898733590e-01, -5.833048259106925e-01, -5.604315267620892e-01, -7.201051548892908e-01, -2.469681565538326e-01, -2.988991853227085e-01, -3.804603377122939e-01, -3.379738658849086e-01, -3.379738658849086e-01, -4.921801004327478e-01, -4.375313570171257e-02, -5.923155777199417e-02, -3.610469612143536e-01, -7.934201670628320e-02, -8.589432470268908e-02, -1.300441901811388e-02, -1.606727223245715e-03, -1.127109590133116e-03, -8.194501493713406e-02, -4.544433101043258e-03, -4.544433101043251e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_revscanl_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revscanl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.533766488710026e+01, -2.533763999355038e+01, -2.533769892135445e+01, -2.533810471702309e+01, -2.533765037526218e+01, -2.533765037526218e+01, -4.352518539497632e+00, -4.352383406327189e+00, -4.348857165162800e+00, "nan", -4.352467575231207e+00, "nan", -9.756752515512865e-01, "nan", "nan", "nan", "nan", "nan", "nan", "nan", -1.066161682461241e+00, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", -5.982063037050239e+00, "nan", "nan", -2.868218460214353e+00, -2.887885222061612e+00, -2.860808463346154e+00, -2.876158006029287e+00, -2.891116717692727e+00, "nan", "nan", "nan", "nan", "nan", "nan", -7.168683443252041e-01, -1.444169877172828e-01, "nan", -1.426146569217966e-01, -2.631052009971271e+00, "nan", "nan", -3.489857136393411e-03, "nan", "nan", -8.882930394026788e-02, -3.792823338605430e-03, "nan", "nan", "nan", -7.114737762577693e-01, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", -6.385981765104222e-01, "nan", -3.417667085470044e-01, "nan", -5.133137748867711e-01, "nan", "nan", -6.539945041881373e-01, "nan", "nan", "nan", -1.170300601543349e-01, "nan", "nan", "nan", -2.074935518047679e-03, "nan", "nan", "nan"]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revscanl_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revscanl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.110465577429344e-08, -1.110491014270192e-08, -1.110544250048456e-08, -1.110128533021986e-08, -1.110479484917920e-08, -1.110479484917920e-08, -9.513206825986300e-06, -9.516218161656244e-06, -9.597513152653929e-06, "nan", -9.514593471560355e-06, "nan", 3.977558881369541e-04, "nan", "nan", "nan", "nan", "nan", "nan", "nan", -1.643216561111973e-03, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", -4.420693672585988e-06, "nan", "nan", 5.463878286766141e-06, 5.311720408842677e-06, 5.526304797839602e-06, 5.406420214374609e-06, 5.279134156583352e-06, "nan", "nan", "nan", "nan", "nan", "nan", -1.706559606726976e-02, 4.098456755006101e-01, "nan", 4.452974303655856e-01, -1.025989528991672e-04, "nan", "nan", 3.572465017881674e+02, "nan", "nan", 1.648701441684791e+00, 4.111844586395159e+02, "nan", "nan", "nan", -3.180565677613857e-02, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", -2.670540766928923e-02, "nan", 2.483900449184213e-02, "nan", 5.179210111204546e-03, "nan", "nan", -6.018900967095415e-04, "nan", "nan", "nan", 8.443824490305331e-01, "nan", "nan", "nan", 1.289255063526503e+03, "nan", "nan", "nan"]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revscanl_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revscanl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [3.076922795804703e-04, 3.077005252971489e-04, 3.077237765050016e-04, 3.075889248701800e-04, 3.076967384801952e-04, 3.076967384801952e-04, 1.197956701395062e-03, 1.198303957264277e-03, 1.207808203178041e-03, "nan", 1.198130196871527e-03, "nan", 0.000000000000000e+00, "nan", "nan", "nan", "nan", "nan", 0.000000000000000e+00, "nan", 2.715938822739974e-03, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 1.708275660673508e-03, "nan", "nan", 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, "nan", "nan", "nan", "nan", "nan", "nan", 1.064916543160090e-02, 0.000000000000000e+00, "nan", 0.000000000000000e+00, 3.227659373503259e-69, "nan", "nan", 7.862169352384960e-05, "nan", "nan", 0.000000000000000e+00, 1.081405854443041e-04, "nan", "nan", "nan", 1.611282246548372e-02, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 1.171666614819596e-02, "nan", 0.000000000000000e+00, "nan", 0.000000000000000e+00, "nan", "nan", 6.689364351833750e-04, "nan", "nan", "nan", 0.000000000000000e+00, "nan", "nan", "nan", 5.538483963849733e-63, "nan", "nan", "nan"]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revscanl_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revscanl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
