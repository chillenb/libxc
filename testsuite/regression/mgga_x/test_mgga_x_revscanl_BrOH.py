
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_revscanl_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revscanl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.324520175794887e+01, -2.324525930539924e+01, -2.324555596604401e+01, -2.324461280581122e+01, -2.324523177275895e+01, -2.324523177275895e+01, -3.397770797138716e+00, -3.397889479949537e+00, -3.401859837405714e+00, -3.404042166258594e+00, -3.397801331279369e+00, -3.397801331279369e+00, -5.928329671155586e-01, -5.922288137060430e-01, -5.775699036011493e-01, -5.900607705253234e-01, -5.926286940495792e-01, -5.926286940495792e-01, -1.824526165985549e-01, -1.846567499284162e-01, -6.647702698460781e-01, -1.109059011118990e-01, -1.830495276971981e-01, -1.830495276971981e-01, -5.421139691391925e-03, -5.757348681073291e-03, -3.115733283461066e-02, -1.990128424166492e-03, -5.695773403357625e-03, -5.695773403357625e-03, -4.025414568602413e+00, -4.269335172861740e+00, -5.666696849724065e+00, -4.056967192467907e+00, -5.667123817654300e+00, -4.714818735343129e+00, -2.115375120623937e+00, -1.707034537184945e+00, -1.965611057277324e+00, -1.962855780130952e+00, -1.968541516547416e+00, -2.134565671714780e+00, -4.660969640910987e-01, -4.742639763936364e-01, -4.379856765001677e-01, -5.391128952804894e-01, -5.733536564844974e-01, -5.381338189592998e-01, -9.869913648677783e-02, -1.511876770514929e-01, -9.769173793159767e-02, -1.737144821475148e+00, -1.163761399426922e-01, -1.163761399426922e-01, -1.924531641544265e-03, -2.653566932517476e-03, -1.972166656142472e-03, -5.865346706775319e-02, -2.090543205422320e-03, -2.669201186467485e-03, -5.576949913070709e-01, -5.578495630409862e-01, -5.578193569018858e-01, -5.574336087028007e-01, -5.578460076537188e-01, -5.578033912434333e-01, -5.392825203302010e-01, -5.247989959774210e-01, -4.168172563167338e-01, -5.944196453552949e-01, -4.837226093654078e-01, -4.322305531242229e-01, -5.137499686019050e-01, -2.469681565538326e-01, -2.890422905413050e-01, -3.804603377122939e-01, -2.604800319816956e-01, -2.733134630665190e-01, -4.483114896399212e-01, -2.836708221608209e-02, -4.029092692103923e-02, -3.192231938690092e-01, -7.934201670628320e-02, -7.934201670628321e-02, -8.353210216005318e-03, -4.292296937187108e-04, -1.242112455353148e-03, -7.573601679173018e-02, -2.215180555247383e-03, -2.215180555247360e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_revscanl_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revscanl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.110958665630960e+01, -3.110965931127327e+01, -3.111004318683604e+01, -3.110885224260417e+01, -3.110962447265708e+01, -3.110962447265708e+01, -3.726197263643366e+00, -3.726061527476499e+00, -3.722004603498522e+00, -3.717190379671392e+00, -3.726218243101665e+00, -3.726218243101665e+00, -7.735600290152341e-01, -7.725897478601838e-01, -7.482943896023333e-01, -7.535014595396200e-01, -7.732146009264742e-01, -7.732146009264742e-01, -1.197383871816388e-01, -1.266008404267288e-01, -8.595510165371353e-01, -1.517323266560224e-01, -1.216438803618757e-01, -1.216438803618758e-01, -9.357271339963317e-03, -9.906843941541087e-03, -4.855412063846028e-02, -3.598452422166624e-03, -9.801520442035321e-03, -9.801520442035321e-03, -4.887148409327305e+00, -5.814658244015732e+00, -7.572991280275788e+00, -4.862562922141572e+00, -7.573472181337626e+00, -6.413602004793525e+00, -2.868237511044946e+00, -2.246187635762636e+00, -1.823073810907590e+00, -1.813229880594400e+00, -1.850170657727003e+00, -2.891116717692727e+00, -5.551302290385516e-01, -6.128237986540961e-01, -5.245262616597861e-01, -7.084639011664730e-01, -7.394244943215371e-01, -7.241145147655104e-01, -1.444169877172828e-01, -2.072958755302478e-01, -1.426146569217966e-01, -2.444628114275877e+00, -1.672215976081115e-01, -1.672215976081115e-01, -3.504600897386221e-03, -4.766803185814400e-03, -3.546413447451820e-03, -8.882930394026788e-02, -3.768232371267595e-03, -4.793501308311389e-03, -7.392927687843083e-01, -7.323325855112415e-01, -7.346079582110986e-01, -7.360390653743533e-01, -7.356886363737074e-01, -7.355655943919787e-01, -7.162446734041565e-01, -5.728612160871045e-01, -5.022786377116167e-01, -7.945746382715408e-01, -6.467815356203905e-01, -5.137765573963370e-01, -6.179624293991739e-01, -3.417667085470044e-01, -3.904187044776419e-01, -5.133137748867711e-01, -3.424258115078546e-01, -3.572022383046728e-01, -4.577079769815555e-01, -4.514736282142361e-02, -6.193143363726016e-02, -3.802437535104174e-01, -1.170300601543349e-01, -1.170300601543348e-01, -1.432574463516083e-02, -8.283748563985136e-04, -2.286648328360471e-03, -1.116610350248451e-01, -3.991420014508221e-03, -3.991420014507613e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revscanl_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revscanl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([2.936742355323533e-10, 2.936679409474956e-10, 2.936427393780547e-10, 2.937457560329883e-10, 2.936708919133763e-10, 2.936708919133763e-10, -2.367477813979550e-05, -2.368112439821913e-05, -2.386365506738194e-05, -2.388433436083804e-05, -2.367548817982924e-05, -2.367548817982924e-05, -5.820581580638744e-03, -5.795440675566435e-03, -5.325358279719260e-03, -6.333926169320569e-03, -5.813584093059953e-03, -5.813584093059953e-03, -2.368329570241835e+00, -2.282361132227562e+00, -1.831891376691096e-03, -2.509382225719581e-01, -2.347164786884973e+00, -2.347164786884973e+00, 9.543191697683727e+01, 8.714454728687294e+01, 2.425423945427902e+00, 3.224183558654200e+02, 9.070209207444165e+01, 9.070209207444165e+01, -1.559312218903659e-06, -2.029287080550483e-06, 7.051578566157365e-08, -1.393118582124269e-06, 7.035975823262528e-08, -3.536460285192421e-06, 3.052914760341947e-06, -4.001322977474229e-05, -1.930844964760245e-04, -1.967872994045203e-04, -1.965161972263840e-04, 5.279134156583352e-06, -5.360824156209257e-03, -1.083922534331876e-02, -7.378722473900196e-03, -1.522900235409307e-02, -3.780388356328913e-03, -1.552853520557826e-02, 4.098456755006101e-01, 3.103909354102584e-02, 4.452974303655856e-01, -2.262117789871957e-04, 2.912106979751842e-01, 2.912106979751842e-01, 3.811263416985168e+02, 3.205116218784049e+02, 9.595504948536978e+02, 1.648701441684791e+00, 4.206105352767967e+02, 5.171826545856188e+02, -7.253520970699783e-03, -6.578843918054056e-03, -6.829204370561516e-03, -6.958937625246340e-03, -6.931873361024583e-03, -6.925270309724202e-03, -8.407029893686732e-03, -3.230460033386536e-02, -9.154729114221891e-03, 6.038398902244209e-04, -2.709045679329335e-02, -7.390328429459660e-03, -5.656225592420067e-03, 2.483900449184213e-02, -2.726966547599267e-02, 5.179210111204546e-03, -2.780593017088428e-02, -7.893462333793949e-02, -7.604552635662851e-02, 3.576312712182050e+00, 1.521205971375136e+00, -1.518718036687398e-01, 8.443824490305331e-01, 8.443824490305464e-01, 7.672444905711484e+01, 4.861453153718925e+03, 1.420802301428045e+03, 1.025801523302895e+00, 8.557968102695505e+02, 8.557968102680139e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revscanl_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revscanl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 2.744750247939084e-03, 2.745603993997694e-03, 2.770895452009651e-03, 2.777395869155930e-03, 2.744874938584139e-03, 2.744874938584139e-03, 4.113619669622470e-03, 4.094624825508280e-03, 3.776551344543199e-03, 4.762173939199134e-03, 4.108680356743435e-03, 4.108680356743435e-03, 4.379187468773710e-02, 4.384217301037268e-02, 8.245186186526762e-04, 2.491885031641192e-03, 4.389858785710512e-02, 4.389858785710508e-02, -1.536788636752812e-06, -1.555132251024569e-06, 1.191325378028756e-04, -8.185476581725014e-07, -1.573770982202963e-06, -1.573770982202963e-06, -7.070431026457505e-06, 2.737248300407629e-04, 0.000000000000000e+00, -1.072896860531518e-05, 0.000000000000000e+00, 1.095474411456183e-03, -8.707491850448762e-07, 6.701365474097001e-04, 4.277075481227755e-03, 4.417391141510367e-03, 4.468250435272261e-03, 0.000000000000000e+00, -8.112869080559232e-05, 7.962882008814310e-05, -7.927263041119239e-05, 5.002677474827493e-03, 2.721395473297902e-04, 7.164247668435758e-03, 0.000000000000000e+00, -3.451557655247319e-05, 0.000000000000000e+00, 3.417367921373534e-03, 0.000000000000000e+00, 0.000000000000000e+00, -1.144343479363579e-06, -2.274980281739146e-11, -4.001788052496209e-11, 0.000000000000000e+00, -1.505366392880339e-06, 0.000000000000000e+00, -8.767917011189507e-12, -8.093802185717153e-11, -2.055324987377874e-13, -6.006289270413938e-09, -1.315582076505825e-10, -5.621600835131013e-14, -3.668911712811822e-13, 1.217956931547675e-02, -6.245809717549139e-05, 0.000000000000000e+00, 9.243384002970695e-03, -8.532490092161098e-05, -1.035916720139725e-04, 0.000000000000000e+00, -2.213529060652846e-05, 0.000000000000000e+00, 1.092503614285869e-03, 5.999887065333184e-03, 2.045712571719491e-02, -1.214831418502782e-05, 2.398075502688837e-05, 1.447461339707842e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.988142329127742e-07, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
