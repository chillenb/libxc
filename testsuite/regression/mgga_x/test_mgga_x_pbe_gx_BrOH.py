
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_pbe_gx_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_pbe_gx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.390192525977298e+01, -2.390199889206358e+01, -2.390241546823609e+01, -2.390121311745852e+01, -2.390196328826078e+01, -2.390196328826078e+01, -3.346306374843057e+00, -3.346517097529801e+00, -3.353115900928774e+00, -3.353552546852076e+00, -3.346363114509701e+00, -3.346363114509701e+00, -5.633355357925492e-01, -5.623954597032235e-01, -5.377738707244799e-01, -5.464171120588578e-01, -5.629990822294186e-01, -5.629990822294186e-01, -1.723415961205740e-01, -1.747632873166747e-01, -6.559545790897559e-01, -8.470141236312105e-02, -1.729107575648609e-01, -1.729107575648609e-01, -2.021120975478169e-04, -2.316969631841273e-04, -8.444609002207717e-03, -1.879078877097474e-05, -2.292980623045331e-04, -2.292980623045330e-04, -5.877938874720853e+00, -5.879570744486999e+00, -5.878133823409676e+00, -5.879401104564001e+00, -5.878738024890896e+00, -5.878738024890896e+00, -2.038316929176164e+00, -2.067337482518775e+00, -2.035142097555083e+00, -2.058286665420278e+00, -2.062278600186097e+00, -2.062278600186097e+00, -6.105222758092945e-01, -6.759913722711662e-01, -5.543618566025234e-01, -5.901597514438078e-01, -6.458854391436099e-01, -6.458854391436099e-01, -4.804840735363641e-02, -1.574778505252658e-01, -4.862182768147202e-02, -1.963700525675331e+00, -6.810867642383221e-02, -6.810867642383221e-02, -1.738067525870676e-05, -2.593943445735377e-05, -1.848767968063287e-05, -1.915975386795468e-02, -2.384446368393643e-05, -2.384446368393642e-05, -6.795197279150259e-01, -6.739408786538111e-01, -6.759392190918232e-01, -6.774839595156604e-01, -6.767089347797337e-01, -6.767089347797337e-01, -6.536315648477871e-01, -5.506984920184244e-01, -5.809007874094821e-01, -6.088122636109402e-01, -5.943044654487585e-01, -5.943044654487585e-01, -6.961586406685614e-01, -2.212228358694353e-01, -2.676401762463304e-01, -3.462466372269600e-01, -3.092182199466919e-01, -3.092182199466918e-01, -4.719829481032277e-01, -6.481215973680879e-03, -1.416384329086451e-02, -3.323891256973160e-01, -3.598545668069505e-02, -3.598545668069505e-02, -2.770173827199192e-04, -7.009679902912512e-07, -4.455131696234902e-06, -3.437864054771382e-02, -1.769822549133590e-05, -1.769822549133580e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_pbe_gx_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_pbe_gx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.140144574182339e+01, -3.140155201437262e+01, -3.140202151078063e+01, -3.140028001989316e+01, -3.140150184178502e+01, -3.140150184178502e+01, -5.262563227188555e+00, -5.262395370046414e+00, -5.257265022565719e+00, -5.252880577662249e+00, -5.262586662232181e+00, -5.262586662232181e+00, -8.556056850637807e-01, -8.546374770919049e-01, -8.306409809462072e-01, -8.410336867073850e-01, -8.552585306454032e-01, -8.552585306454032e-01, -2.003030454441887e-01, -2.074549635811817e-01, -9.767836372567524e-01, -1.656086798420851e-01, -2.024014870321790e-01, -2.024014870321790e-01, -6.577095705581857e-04, -8.020436016923602e-04, -2.744358018231636e-02, -7.491784802757836e-05, -7.591365452067832e-04, -7.591365452067875e-04, -7.724350503301176e+00, -7.727377050057695e+00, -7.724653618400636e+00, -7.727007376672283e+00, -7.725911697212190e+00, -7.725911697212190e+00, -2.610024544796612e+00, -2.636929310233852e+00, -2.589839373965095e+00, -2.611010072224090e+00, -2.654181720060900e+00, -2.654181720060900e+00, -8.571069648912809e-01, -9.652014846248358e-01, -8.196144391221502e-01, -8.854166402703607e-01, -8.927672283805514e-01, -8.927672283805514e-01, -1.110438671801937e-01, -1.366892133354476e-01, -1.105054032150281e-01, -2.987442228597815e+00, -1.289436840769655e-01, -1.289436840769655e-01, -6.928960736559782e-05, -1.033274990087958e-04, -7.359987023858399e-05, -5.629175037765603e-02, -9.498484376980001e-05, -9.498484376980000e-05, -9.118884998874053e-01, -9.009732121691260e-01, -9.048898476756377e-01, -9.079125387069256e-01, -9.064016115643475e-01, -9.064016115643475e-01, -8.850712083347606e-01, -7.101392563331450e-01, -7.630334373685930e-01, -8.109140439182652e-01, -7.869748511231854e-01, -7.869748511231854e-01, -1.016407611867701e+00, -2.390710475944100e-01, -3.289192030005311e-01, -4.909283855054159e-01, -4.072650829051489e-01, -4.072650829051490e-01, -6.399936661926621e-01, -2.059242330129526e-02, -4.327392268147737e-02, -4.806421274576381e-01, -8.568529959103882e-02, -8.568529959103888e-02, -1.086219890346088e-03, -2.802749318652314e-06, -1.778491434890863e-05, -8.251411173759937e-02, -7.053855630053611e-05, -7.053855630053573e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_pbe_gx_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_pbe_gx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-9.037248402677602e-09, -9.037161469597510e-09, -9.036682551100417e-09, -9.038106041830023e-09, -9.037203343312721e-09, -9.037203343312721e-09, -1.939661304913928e-05, -1.938862696862399e-05, -1.914342885000543e-05, -1.910179528521099e-05, -1.939489519214209e-05, -1.939489519214209e-05, 8.227382690618047e-05, 8.751049120916923e-05, 1.757259137856667e-04, -1.169999194606838e-04, 8.385496143877217e-05, 8.385496143877217e-05, -1.748668430933576e+00, -1.691323845470603e+00, 6.336393947386120e-04, 4.573115017404157e-01, -1.735082820652366e+00, -1.735082820652366e+00, 6.531493698842036e+00, 1.168213595873425e+01, 5.501477949365062e+00, 1.688790858508624e+01, 8.306985789178654e+00, 8.306985789179167e+00, -2.560651422099344e-06, -2.558990387638600e-06, -2.560464472117411e-06, -2.559173669148805e-06, -2.559822757587287e-06, -2.559822757587287e-06, -1.296177508411184e-04, -1.252025566432431e-04, -1.304143587989590e-04, -1.269133685884493e-04, -1.255757693635804e-04, -1.255757693635804e-04, -1.792746642773975e-02, -1.291339810862838e-02, -2.471980701422936e-02, -2.059689207023565e-02, -1.502832615552484e-02, -1.502832615552484e-02, 8.695536639492485e-01, -1.652762771350555e+00, 9.039651481608899e-01, -1.696542672732678e-04, -2.967300640387033e-01, -2.967300640387033e-01, 1.790317920596631e+01, 1.791224512190369e+01, 5.111590225913900e+01, 4.476284279546240e+00, 2.646286473257030e+01, 2.646286473257029e+01, -1.481003057764173e-02, -1.509688772756951e-02, -1.499331485624746e-02, -1.491398676300989e-02, -1.495368011331983e-02, -1.495368011331983e-02, -1.699837318471430e-02, -2.919665979468131e-02, -2.477667497694055e-02, -2.138468687310507e-02, -2.305434703827971e-02, -2.305434703827971e-02, -1.106828664780052e-02, -6.297041713978491e-01, -3.425763335811370e-01, -1.475309581635974e-01, -2.177449127752177e-01, -2.177449127752178e-01, -4.694702888122575e-02, 3.594688197287804e+00, 3.949225302992716e+00, -1.842901421724829e-01, 1.464286236771679e+00, 1.464286236771693e+00, 1.721688554353170e+01, 3.108938355443471e+01, 2.663495632145571e+01, 2.024072451595512e+00, 3.869601148052137e+01, 3.869601148052129e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_pbe_gx_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_pbe_gx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_pbe_gx_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_pbe_gx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.818384120274040e-03, 1.818380290126391e-03, 1.818356389594371e-03, 1.818419038770182e-03, 1.818382159996012e-03, 1.818382159996012e-03, 1.515277080920573e-02, 1.514766079986879e-02, 1.499195936478447e-02, 1.496546372533576e-02, 1.515184987993891e-02, 1.515184987993891e-02, 9.541496097522495e-03, 9.517156918093250e-03, 9.111138845849033e-03, 1.039956097222318e-02, 9.534286379475209e-03, 9.534286379475209e-03, 2.059872470322944e-01, 2.068504627702540e-01, 3.017813202418854e-03, 1.326551635399822e-02, 2.065965767699746e-01, 2.065965767699746e-01, 2.839693852104725e-04, 2.257383992530116e-04, 1.701028305364581e-03, 1.013949425271940e-08, 2.996531534769858e-04, 2.996531534769758e-04, 7.479544566929052e-03, 7.478914307343505e-03, 7.479457902256556e-03, 7.478968930720563e-03, 7.479251797907367e-03, 7.479251797907367e-03, 1.948436661749895e-02, 1.928237092413613e-02, 1.945679920005796e-02, 1.929883883505911e-02, 1.937753245710060e-02, 1.937753245710060e-02, 7.012455728387282e-02, 6.516424852747495e-02, 8.013177097769747e-02, 7.643731610030635e-02, 6.647610687733928e-02, 6.647610687733928e-02, 1.184950685759727e-02, 1.937921911013161e-01, 1.335992822855410e-02, 2.332113966691021e-02, 3.715170805655686e-02, 3.715170805655686e-02, 4.412969144066789e-08, 3.378513931451969e-08, 2.431999996167343e-07, 1.165493918347005e-03, 1.974323998245607e-08, 1.974323998245571e-08, 6.592910897410134e-02, 6.607846069238021e-02, 6.602505802386581e-02, 6.598386153405841e-02, 6.600463178134813e-02, 6.600463178134815e-02, 6.840776839915147e-02, 7.609684887549838e-02, 7.378595556166280e-02, 7.170066414051202e-02, 7.279128504486485e-02, 7.279128504486489e-02, 6.366634795254421e-02, 1.527007144375547e-01, 1.387727105901164e-01, 1.230821027667563e-01, 1.278244258541391e-01, 1.278244258541391e-01, 8.756109003835563e-02, 2.787484344382955e-03, 2.464239421730562e-03, 1.304469637453496e-01, 1.426412118854116e-02, 1.426412118854108e-02, 1.063184040405007e-06, 2.911397224775141e-11, 2.899724728733323e-08, 1.338629071903410e-02, 1.370427949664821e-08, 1.370427949664600e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
