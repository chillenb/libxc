
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_pbe_gx_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_pbe_gx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.248506600074316e+01, -2.248517584634243e+01, -2.248570096507573e+01, -2.248390715564964e+01, -2.248512356335367e+01, -2.248512356335367e+01, -3.138743647667975e+00, -3.138803417445074e+00, -3.140715615509254e+00, -3.140225552312286e+00, -3.138775169042618e+00, -3.774661365723939e+00, -5.707751106886387e-01, -6.809104838485679e-01, -6.517785846615159e-01, -6.619674197511544e-01, -6.816250646179373e-01, -6.816250646179373e-01, -1.830398453169033e-01, -1.865496543329637e-01, -6.697064224666700e-01, -1.028493184715149e-01, -1.840787232606383e-01, -1.840787232606383e-01, -2.823870695808892e-04, -3.226744490804737e-04, -1.068159924034218e-02, -1.888864382132854e-05, -3.197796704665039e-04, -3.197796704664968e-04, -5.879501546326106e+00, -5.881115150586767e+00, -5.879674760649284e+00, -5.635475078340441e+00, -5.880318049837586e+00, -5.880318049837586e+00, -1.737212564868065e+00, -1.754474298221577e+00, -1.730081602357431e+00, -1.743585453607107e+00, -1.758236269098691e+00, -2.120503931861554e+00, -6.417274519006082e-01, -7.079618517181752e-01, -6.031525428152860e-01, -6.381971535381959e-01, -6.703108450802114e-01, -6.002728430462521e-01, -7.789281158630129e-02, -1.696311702033402e-01, -7.695209088109560e-02, -2.133942284323919e+00, -8.413107309365576e-02, -8.413107309365576e-02, -3.726878526574749e-03, -2.840589281860586e-05, -2.370069196057835e-05, -4.806854430202218e-02, -3.880822211651549e-03, -2.385853099597491e-05, -6.829370790254360e-01, -6.772660468829284e-01, -6.683351377983764e-01, -6.808684723641184e-01, -6.800825446968380e-01, -6.800825446968380e-01, -6.603129292948301e-01, -5.546301526418723e-01, -5.858802971363422e-01, -6.146083442375291e-01, -5.999887719186746e-01, -5.567122752913334e-01, -7.392997068730638e-01, -1.947762473203100e-01, -2.824530690557795e-01, -3.122485906240580e-01, -3.282411849220532e-01, -3.282411849220531e-01, -4.112233555504203e-01, -8.492006842697384e-03, -1.761196515265964e-02, -3.603365675163036e-01, -6.310388568210194e-02, -4.494135575131086e-02, -2.849355539347920e-04, -6.152352285874336e-07, -5.905629109961308e-06, -4.280896838312084e-02, -1.737289276663514e-05, -1.737289276663244e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_pbe_gx_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_pbe_gx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.339485050572249e+01, -3.339489794085801e+01, -3.339517238711241e+01, -3.339439098681951e+01, -3.339487504064432e+01, -3.339487504064432e+01, -4.569381859598782e+00, -4.569478749375581e+00, -4.572555408627657e+00, -4.571729546336167e+00, -4.569430491085910e+00, -4.690125784788718e+00, -8.165144688683572e-01, -7.597199528417378e-01, -7.011122412344795e-01, -7.243873864336009e-01, -7.611473803505341e-01, -7.611473803505341e-01, -1.960762850323186e-01, -2.024667388668302e-01, -9.453630240570761e-01, -2.083449458225049e-02, -1.979470510133038e-01, -1.979470510133038e-01, 4.682953319052955e-02, 4.883445325405184e-02, 1.275366975803670e-01, 2.341504772782536e-02, 4.832177095672160e-02, 4.832177095672215e-02, -7.722380567292589e+00, -7.725429273452009e+00, -7.722710993681639e+00, -8.058151238140050e+00, -7.723919428907591e+00, -7.723919428907591e+00, -2.521649977438635e+00, -2.548433738571904e+00, -2.510499467517687e+00, -2.531526411408168e+00, -2.554319809701398e+00, -2.597156049039942e+00, -8.193758709014876e-01, -9.229356120760033e-01, -7.596597717495109e-01, -8.202935317330005e-01, -8.628209594254386e-01, -9.777911521021427e-01, -1.056034540590589e-01, -1.426612440695879e-01, -1.044147797941198e-01, -2.748855887862752e+00, -2.577889361630340e-03, -2.577889361630340e-03, -4.969482676910933e-03, 2.575247565087835e-02, 1.928186792617340e-02, -6.454473003526096e-02, -5.174784596837047e-03, 2.348107912362531e-02, -9.073595269598406e-01, -8.966266905811483e-01, -9.151399425756563e-01, -9.034493516220055e-01, -9.019612711794890e-01, -9.019612711794890e-01, -8.761893065423131e-01, -7.057070561971718e-01, -7.570715670506403e-01, -8.036435796740935e-01, -7.800013478800297e-01, -8.416886913326099e-01, -9.587293481645222e-01, -2.760571011852687e-01, -3.195879199192319e-01, -4.534421432730102e-01, -3.910641334678355e-01, -3.910641334678354e-01, -5.989619604555110e-01, 1.281389549306534e-01, 1.308489895502420e-01, -4.489118090450189e-01, -8.537360344941317e-02, 7.075749331790680e-02, 5.525646353247311e-02, 7.109337912156575e-03, 1.346625606418967e-02, 6.787145084033372e-02, 1.997960909424177e-02, 1.997960909424324e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_pbe_gx_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_pbe_gx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.034262142280653e-08, -1.034245696985609e-08, -1.034165536373422e-08, -1.034434342769925e-08, -1.034253534841657e-08, -1.034253534841657e-08, -1.159189791467006e-06, -1.160311136527231e-06, -1.193980924850659e-06, -1.180541239800193e-06, -1.159478982777044e-06, -1.248676764265593e-05, 1.128995694582329e-03, -8.895758036606152e-03, -9.789065328587487e-03, -9.540417108009134e-03, -8.875138852937284e-03, -8.875138852937284e-03, -1.560346825875720e+00, -1.486233539902680e+00, 7.774321691109573e-04, -4.635849009230941e+00, -1.537560908935021e+00, -1.537560908935021e+00, -5.561477648818362e+03, -5.037418054276193e+03, -1.435409811520792e+02, -1.471312496752167e+04, -5.260631926150121e+03, -5.260631926150179e+03, -2.559664133259902e-06, -2.558015467271337e-06, -2.559491020486007e-06, -2.766559101154618e-06, -2.558824910614676e-06, -2.558824910614676e-06, -1.943871120052535e-06, -3.508418695988786e-06, -1.241467176751493e-06, -2.500661762892143e-06, -3.913046164260880e-06, -1.200999439063758e-04, -1.631056637024310e-02, -1.184289775469201e-02, -1.998331007372882e-02, -1.705569916398608e-02, -1.408521581583082e-02, -2.038162272964867e-02, 4.564634184384824e+00, -1.424610203573914e+00, 4.801702375617488e+00, -1.374885231125782e-04, -8.629262411061839e+00, -8.629262411061839e+00, 8.245910582188395e+05, -1.358103505149905e+04, -4.790255901654885e+04, 3.058249725101452e+01, 7.013501824429600e+05, -1.816535348519682e+04, -1.469936191895573e-02, -1.498654383149145e-02, -1.526988371365029e-02, -1.480340147159601e-02, -1.484307644241610e-02, -1.484307644241610e-02, -1.673574395292262e-02, -2.889381621279774e-02, -2.446346283252841e-02, -2.108099859284834e-02, -2.272668347176209e-02, -2.710839186377217e-02, -9.771481916406624e-03, 1.033872177231542e-01, -3.102759385221716e-01, -2.886843253560592e-03, -1.936067333070941e-01, -1.936067333070942e-01, -5.092592250444755e-03, -1.687244508954645e+02, -7.508150647220366e+01, -1.515824257309530e-01, 1.053880232055107e+01, -2.824174878122237e+01, -2.539905433448289e+03, -1.914136596377035e+05, -7.424957605563899e+04, -3.404704797919082e+01, -2.983860380871799e+04, -2.983860380872028e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_pbe_gx_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_pbe_gx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.002110816519805e-03, 2.002097043131747e-03, 2.002032850882036e-03, 2.002257567281148e-03, 2.002103587627021e-03, 2.002103587627021e-03, 2.893835815401812e-03, 2.894620516918744e-03, 2.918199477563917e-03, 2.908818419419163e-03, 2.894039859094313e-03, 1.075293159374647e-02, 5.186221620764504e-03, 5.289906111817706e-02, 5.344457766622176e-02, 5.343533999788285e-02, 5.288550851157718e-02, 5.288550851157718e-02, 1.896181575864175e-01, 1.882087140185578e-01, 2.280343003666980e-03, 2.027031179831650e-01, 1.891801813165729e-01, 1.891801813165729e-01, 9.378272526637246e-02, 9.767268773658845e-02, 1.957114078215192e-01, 2.725713845173943e-02, 9.884585842374448e-02, 9.884585842374553e-02, 7.477658936633364e-03, 7.477051305785931e-03, 7.477598600440789e-03, 7.891314286663748e-03, 7.477345478130848e-03, 7.477345478130848e-03, 3.943654249415621e-03, 4.122619470739169e-03, 3.865030967952340e-03, 4.005978167818441e-03, 4.171176193374543e-03, 1.879504182419830e-02, 6.563944096763862e-02, 6.137120084365279e-02, 6.851729828200007e-02, 6.664027510650362e-02, 6.358325300968032e-02, 8.429389840990359e-02, 1.046001313997282e-03, 1.732363946884183e-01, 1.175880200433390e-03, 1.999477709503560e-02, 2.297282945316607e-01, 2.297282945316607e-01, 2.676498466370181e-07, 3.372459716145140e-02, 5.008990191620175e-02, 2.782293898118146e-04, 3.082333210312644e-07, 3.411909118327355e-02, 6.560569873497549e-02, 6.576119136821389e-02, 6.683636626420876e-02, 6.566260009547834e-02, 6.568403705443068e-02, 6.568403705443068e-02, 6.770865857547870e-02, 7.557242180829792e-02, 7.316687067447500e-02, 7.102561292803020e-02, 7.210453133389623e-02, 8.189130668267930e-02, 5.829606873799392e-02, 9.591427555609584e-03, 1.292728756269667e-01, 2.271035775492403e-02, 1.174998757132482e-01, 1.174998757132482e-01, 2.387102758168071e-02, 1.813854900552600e-01, 2.052636666787395e-01, 1.130294263296223e-01, 9.673749307853888e-04, 2.490736612547025e-01, 6.889303358621161e-02, 9.744677380403596e-03, 2.592100129860025e-02, 2.606755263165239e-01, 3.439721525821830e-02, 3.439721525822077e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
