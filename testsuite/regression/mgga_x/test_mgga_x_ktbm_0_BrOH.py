
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_0_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.081034462654976e+01, -2.081042937180780e+01, -2.081084147504201e+01, -2.080945659390328e+01, -2.081038898855205e+01, -2.081038898855205e+01, -3.153245919652635e+00, -3.153288404625023e+00, -3.154686822010159e+00, -3.154395553852792e+00, -3.153272710650180e+00, -3.878389483796311e+00, -6.015953635566971e-01, -7.460901041358230e-01, -7.248463005104286e-01, -7.312218803532571e-01, -7.466065247411574e-01, -7.466065247411574e-01, -2.038839109220724e-01, -2.067440709363225e-01, -7.359359844157314e-01, -1.444981204834561e-01, -2.047406252702866e-01, -2.047406252702866e-01, -1.093797338048217e-02, -1.145726743435777e-02, -4.667571017201615e-02, -5.246246232126687e-03, -1.133787551510718e-02, -1.133787551510718e-02, -5.575947700126841e+00, -5.576046953661383e+00, -5.575953578083621e+00, -5.177762633604890e+00, -5.576004031665559e+00, -5.576004031665559e+00, -1.757916012443137e+00, -1.772404301646034e+00, -1.752091692704668e+00, -1.763281428608062e+00, -1.775482452883207e+00, -2.205756293208222e+00, -6.392662389165036e-01, -6.816486848668121e-01, -6.111859804806207e-01, -6.296250288121503e-01, -6.598179209873999e-01, -5.700270358964262e-01, -9.663252843601977e-02, -2.032620592518233e-01, -9.525064384988825e-02, -2.098054336125121e+00, -1.225553309628098e-01, -1.225553309628098e-01, -4.824080054333318e-03, -5.783947083713347e-03, -4.335119241779256e-03, -6.115542830461839e-02, -5.023273053634759e-03, -5.270054577197716e-03, -6.308514133914718e-01, -6.309795421260979e-01, -6.117940303647095e-01, -6.309059067639995e-01, -6.309262062564212e-01, -6.309262062564212e-01, -6.118330478543266e-01, -5.550994432358433e-01, -5.730954684462598e-01, -5.882975049730068e-01, -5.807130851999309e-01, -5.175462430645869e-01, -7.187512883377567e-01, -2.113187899857219e-01, -3.075819919362702e-01, -3.156279140574277e-01, -3.479925564124921e-01, -3.479925564124922e-01, -4.125626221674313e-01, -4.321103426742837e-02, -5.858757939796576e-02, -3.693119723653246e-01, -7.872901632987314e-02, -8.540663015348143e-02, -1.281879423443768e-02, -1.583481237866310e-03, -3.008079449393737e-03, -8.147764571496115e-02, -4.478823144135937e-03, -4.478823144135931e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_0_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.986217259328560e+01, -2.986226136622854e+01, -2.986270926553852e+01, -2.986125616224242e+01, -2.986221895408890e+01, -2.986221895408890e+01, -4.463518663983662e+00, -4.463685234588190e+00, -4.468849122664438e+00, -4.467207821518310e+00, -4.463586135907582e+00, -4.297054880701260e+00, -7.646667174057766e-01, -8.696756720697516e-01, -8.565229801560390e-01, -8.589120217408774e-01, -8.699723682048625e-01, -8.699723682048625e-01, -2.412462337055566e-01, -2.435658022361323e-01, -9.076531828047235e-01, -1.831904673095716e-01, -2.419600363659093e-01, -2.419600363659093e-01, -1.423923295361854e-02, -1.491484670691146e-02, -6.058184459090467e-02, -6.831392219699523e-03, -1.475941746007360e-02, -1.475941746007359e-02, -6.837461869983500e+00, -6.841513283981999e+00, -6.837903685863864e+00, -7.308534305218515e+00, -6.839501770182724e+00, -6.839501770182724e+00, -2.423608932855131e+00, -2.457007879433831e+00, -2.409571774348830e+00, -2.435796243377448e+00, -2.464660471735774e+00, -2.452314840846146e+00, -7.195347188153487e-01, -8.094367258466684e-01, -6.789695339785252e-01, -7.171725404513234e-01, -7.539686213888166e-01, -8.285357594338666e-01, -1.244936140982950e-01, -2.504153473255545e-01, -1.225045646407459e-01, -2.401596087085276e+00, -1.558449686225591e-01, -1.558449686225591e-01, -6.431296825018113e-03, -7.531447561534160e-03, -5.644850853293072e-03, -8.037499882362728e-02, -6.696773874785544e-03, -6.862322692367045e-03, -8.231829744544353e-01, -8.064760404537611e-01, -8.370317641112164e-01, -8.170217583241433e-01, -8.146966630399743e-01, -8.146966630399743e-01, -7.924033149672499e-01, -6.219044945446315e-01, -6.612408490369510e-01, -7.070391298982496e-01, -6.826322929797840e-01, -7.462546513775670e-01, -8.380071662399807e-01, -2.620342399953895e-01, -3.563154486415721e-01, -4.366751649036354e-01, -3.922899577717575e-01, -3.922899577717575e-01, -5.875518308427247e-01, -5.611713107310719e-02, -7.593182564268645e-02, -4.091576503588161e-01, -1.018687983386984e-01, -1.098767016849470e-01, -1.668841699006905e-02, -2.062002075674988e-03, -3.917038408435901e-03, -1.048260183874353e-01, -5.832075059601529e-03, -5.832075059601523e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_0_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.413782201841806e-08, -1.413775470518316e-08, -1.413734683630620e-08, -1.413845842036602e-08, -1.413778732643425e-08, -1.413778732643425e-08, -1.347261033499581e-05, -1.347446613572817e-05, -1.352830544516352e-05, -1.350315386693103e-05, -1.347286915223845e-05, -1.371874128844134e-05, -4.980142429979069e-03, -4.580110070380870e-03, -4.183643808311859e-03, -4.433211905892020e-03, -4.590451807933724e-03, -4.590451807933724e-03, -6.540412290521149e-01, -6.629178269992678e-01, -1.471285227786370e-03, -3.567735001192203e-01, -6.561124902088368e-01, -6.561124902088368e-01, -4.071814145540154e+01, -3.706855563796194e+01, -1.703134978633611e+00, -1.027287214502342e+02, -3.871455803335734e+01, -3.871455803335744e+01, -4.359873989431841e-06, -4.360024523632936e-06, -4.359907496684670e-06, -4.239749144214503e-06, -4.359931298731830e-06, -4.359931298731830e-06, -1.159581366265693e-04, -1.162389337602428e-04, -1.156766425776804e-04, -1.159995305892405e-04, -1.164808983123714e-04, -1.169709441623079e-04, -2.260626535753929e-02, -1.925477460213143e-02, -2.465905784472884e-02, -2.495674582289977e-02, -2.084952144061094e-02, -2.005487990623801e-02, -7.254482405220009e-01, -2.845577544267204e-01, -8.221306777829963e-01, -2.047206431677096e-04, -5.712700149537401e-01, -5.712700149537401e-01, -2.750678723433709e+02, -9.508782097847065e+01, -3.357857780510269e+02, -1.494428418985916e+00, -2.562574295791657e+02, -1.270816150163772e+02, -2.638347611906099e-02, -2.654324097706888e-02, -2.614639250798530e-02, -2.645172410652509e-02, -2.647442880489142e-02, -2.647442880489142e-02, -2.990645313739704e-02, -3.889528028642052e-02, -3.732018337829716e-02, -3.495403569357603e-02, -3.624704175391160e-02, -3.493840290583482e-02, -1.530934550165412e-02, -2.456695345753908e-01, -1.730022665267681e-01, -1.141065058297438e-01, -1.518906262220037e-01, -1.518906262220038e-01, -4.839830492046657e-02, -1.841304148768225e+00, -1.084842076404818e+00, -1.703287132951869e-01, -1.369695672198902e+00, -8.718596462417761e-01, -1.845264331712299e+01, -1.327433217851278e+03, -5.166276909230974e+02, -1.047728769056946e+00, -2.084593483843985e+02, -2.084593483843989e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_0_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.240073743979264e-03, 1.240086973834953e-03, 1.240142272304920e-03, 1.239927361578984e-03, 1.240080730608321e-03, 1.240080730608321e-03, 1.951286177489752e-03, 1.952555715124035e-03, 1.990777873884198e-03, 1.975795234436974e-03, 1.951629284826550e-03, 8.067836678391215e-03, -3.501706078573408e-03, 2.268823355951739e-02, 1.960381132091201e-02, 2.104053295005325e-02, 2.276820241638693e-02, 2.276820241638693e-02, 6.840910446494908e-02, 7.159071191330606e-02, -3.201407282257855e-03, 1.528796564403724e-02, 6.930154741493330e-02, 6.930154741493330e-02, 6.876661264907987e-04, 7.199212397887682e-04, 2.343459039946842e-03, 1.903539724700347e-04, 7.286350286079413e-04, 7.286350286079380e-04, 7.004372465953798e-03, 7.005713671202573e-03, 7.004527882548969e-03, 5.870812281996669e-03, 7.005038596746271e-03, 7.005038596746271e-03, 1.530880849563732e-03, 1.849098176574289e-03, 1.393476775255463e-03, 1.642229341972197e-03, 1.933604673044274e-03, 1.305163329528950e-02, 5.611560992173217e-02, 5.641436859494783e-02, 5.506179846330211e-02, 5.848928983629115e-02, 5.610692543712243e-02, 3.254350221773253e-02, -2.605316530561882e-03, 3.221542166840783e-02, -2.917840157787413e-03, 1.769172122475972e-02, 1.498236494734166e-02, 1.498236494734166e-02, -6.963305860564233e-07, 2.361933997387781e-04, 3.512345323880755e-04, -7.153530445753124e-04, -8.019091044827211e-07, 2.387565377953596e-04, 6.283886284280579e-02, 6.260087087826326e-02, 5.926981125996831e-02, 6.275801841972108e-02, 6.272530752382943e-02, 6.272530752382943e-02, 6.471549160036105e-02, 6.365562482851955e-02, 6.545208323619293e-02, 6.581390401181217e-02, 6.575331299213308e-02, 4.629231184866412e-02, 5.276001670203542e-02, -1.156696156058586e-02, 5.918169620162392e-02, 9.692232401370893e-03, 7.010527120001339e-02, 7.010527120001341e-02, 1.765365836020671e-02, 1.996273354632145e-03, 2.995285128437526e-03, 8.598260167569165e-02, -2.430577920251057e-03, 7.716983542725570e-03, 5.011700754622905e-04, 6.757989153267178e-05, 1.803795305797633e-04, 8.051137175531398e-03, 2.403633079346035e-04, 2.403633079346097e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
