
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ktbm_0_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.293976948554397e+01, -2.293981447359977e+01, -2.294013284052591e+01, -2.293939844591437e+01, -2.293979216738189e+01, -2.293979216738189e+01, -3.471002890766135e+00, -3.471041252143121e+00, -3.472457383417705e+00, -3.474120345752521e+00, -3.471017615734823e+00, -3.471017615734823e+00, -6.559915527136146e-01, -6.557162796347531e-01, -6.492888472702928e-01, -6.565610097404047e-01, -6.558924092174707e-01, -6.558924092174707e-01, -1.995740707835868e-01, -2.017167841224597e-01, -7.642308209963438e-01, -1.399472562122576e-01, -2.001706604211531e-01, -2.001706604211531e-01, -1.093092406889622e-02, -1.144790442729898e-02, -4.641778808402502e-02, -5.188709161946672e-03, -1.132984609060645e-02, -1.132984609060645e-02, -5.573286750083730e+00, -5.573415312579605e+00, -5.573329429941216e+00, -5.573427850304784e+00, -5.573312622882468e+00, -5.573312622882468e+00, -2.135843710528559e+00, -2.156582731277495e+00, -2.135469457366414e+00, -2.152010103890354e+00, -2.150172438538025e+00, -2.150172438538025e+00, -5.980529287750831e-01, -6.322484576730882e-01, -5.560213338778526e-01, -5.652337601387385e-01, -6.249544042431115e-01, -6.249544042431115e-01, -1.039531488515164e-01, -2.009511569213585e-01, -1.026347986440591e-01, -1.867818566733666e+00, -1.209106054378794e-01, -1.209106054378794e-01, -5.032308347970646e-03, -5.734663590105803e-03, -4.318824901928684e-03, -6.421655591040375e-02, -5.211473379118621e-03, -5.211473379118620e-03, -6.247535746712440e-01, -6.251230564973727e-01, -6.249974972505058e-01, -6.248930077254871e-01, -6.249433602114466e-01, -6.249433602114466e-01, -6.000344184691767e-01, -5.498381050176949e-01, -5.655595840924745e-01, -5.787808844361063e-01, -5.717319010962398e-01, -5.717319010962398e-01, -6.555148703034861e-01, -2.552242074301805e-01, -2.996155195332501e-01, -3.657010755356680e-01, -3.337288780080203e-01, -3.337288780080201e-01, -4.810373685840489e-01, -4.307771561511323e-02, -5.815423142205720e-02, -3.402792131242421e-01, -8.452633211180176e-02, -8.452633211180176e-02, -1.268204373287159e-02, -1.560385015523922e-03, -2.999920192537296e-03, -8.057791865074448e-02, -4.426688213609714e-03, -4.426688213609708e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ktbm_0_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.760967030480066e+01, -2.760977899011779e+01, -2.761022735571549e+01, -2.760844641770840e+01, -2.760972795184828e+01, -2.760972795184828e+01, -4.380223394154219e+00, -4.380311960367614e+00, -4.383097004703541e+00, -4.381890247829894e+00, -4.380271833990268e+00, -4.380271833990268e+00, -7.975986074464958e-01, -7.969253794758772e-01, -7.828012289574893e-01, -7.906768871225992e-01, -7.973551335308798e-01, -7.973551335308798e-01, -2.364685166265465e-01, -2.382727762469393e-01, -9.328418159108818e-01, -1.759476176235166e-01, -2.369677235676911e-01, -2.369677235676911e-01, -1.423020034786631e-02, -1.490286891518849e-02, -6.022692425901853e-02, -6.770822718403069e-03, -1.474912426696318e-02, -1.474912426696316e-02, -6.840655202213584e+00, -6.844675895151084e+00, -6.841053351574350e+00, -6.844180309762899e+00, -6.842733935453313e+00, -6.842733935453313e+00, -2.431714477730536e+00, -2.446739193532056e+00, -2.426787482988766e+00, -2.438273964338127e+00, -2.449099034630093e+00, -2.449099034630093e+00, -7.476944858422754e-01, -8.619443905223674e-01, -7.027433622100976e-01, -7.692097242820723e-01, -7.832179354382088e-01, -7.832179354382088e-01, -1.330212531220812e-01, -2.468799788890413e-01, -1.312009199146129e-01, -2.596735066279261e+00, -1.531038748385471e-01, -1.531038748385471e-01, -6.557152483920411e-03, -7.477418197729017e-03, -5.625448186822489e-03, -8.309772961141884e-02, -6.800738176121405e-03, -6.800738176121391e-03, -8.311894285975563e-01, -8.140168043726714e-01, -8.201093111437868e-01, -8.248689713214743e-01, -8.224841442080041e-01, -8.224841442080040e-01, -8.077392699845061e-01, -6.251063262259337e-01, -6.681456221124049e-01, -7.177690741979121e-01, -6.918743769096878e-01, -6.918743769096879e-01, -8.993814194286938e-01, -3.049263904001942e-01, -3.496296582269114e-01, -4.351060330281334e-01, -3.866297857220719e-01, -3.866297857220716e-01, -5.659019520886039e-01, -5.593236886395236e-02, -7.531699317059713e-02, -4.160608849694827e-01, -1.084738044819938e-01, -1.084738044819939e-01, -1.654100408665062e-02, -2.039075789165385e-03, -3.907160786082899e-03, -1.033981446554805e-01, -5.777750121564398e-03, -5.777750121564394e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_0_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.461003013247070e-08, -1.460995503966505e-08, -1.460952501829580e-08, -1.461076459076234e-08, -1.460999122182816e-08, -1.460999122182816e-08, -1.363655245980898e-05, -1.363852033417116e-05, -1.369575854127742e-05, -1.366998342718800e-05, -1.363683454887779e-05, -1.363683454887779e-05, -4.879290964953258e-03, -4.865439701648802e-03, -4.492469317617670e-03, -4.718330024011149e-03, -4.874832034343979e-03, -4.874832034343979e-03, -6.656733902912102e-01, -6.753187332224460e-01, -1.443047974324103e-03, -4.033183232601719e-01, -6.681207152103765e-01, -6.681207152103765e-01, -4.147216762556206e+01, -3.793388800712394e+01, -1.881396938162730e+00, -1.332010960113402e+02, -3.949860838248122e+01, -3.949860838248122e+01, -4.359105916999271e-06, -4.359263304644505e-06, -4.359149868757604e-06, -4.359269893401556e-06, -4.359153609954036e-06, -4.359153609954036e-06, -1.161528730238099e-04, -1.168111726982285e-04, -1.156582154311378e-04, -1.162903964680591e-04, -1.171858449093435e-04, -1.171858449093435e-04, -2.230453504890749e-02, -1.878110396124552e-02, -2.436513396054485e-02, -2.429129290736291e-02, -2.056952695029587e-02, -2.056952695029587e-02, -5.217384244826774e-01, -2.907343469963776e-01, -5.952715262840788e-01, -1.985098931547112e-04, -6.084853431033951e-01, -6.084853431033951e-01, -1.582870476927525e+02, -1.174145960456786e+02, -3.721120765482653e+02, -1.040657078189076e+00, -1.651876370842116e+02, -1.651876370842118e+02, -2.627012590681699e-02, -2.643932299268580e-02, -2.638816805582094e-02, -2.634173228941251e-02, -2.636568429225813e-02, -2.636568429225813e-02, -2.965366514544595e-02, -3.883446934838059e-02, -3.718921912517976e-02, -3.475946522031453e-02, -3.607512843444078e-02, -3.607512843444077e-02, -1.489039075972542e-02, -2.179359330692267e-01, -1.754340185458425e-01, -1.147999590306120e-01, -1.533345453557942e-01, -1.533345453557942e-01, -4.935162598936296e-02, -1.958068603841913e+00, -1.214078981747651e+00, -1.695224397669277e-01, -9.517065434359239e-01, -9.517065434359241e-01, -2.363770213366096e+01, -1.838834727576846e+03, -5.576275723325938e+02, -1.150523292465687e+00, -2.737023687667595e+02, -2.737023687667600e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ktbm_0_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ktbm_0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.637815121699283e-03, 1.637816167248445e-03, 1.637832130254521e-03, 1.637816414956660e-03, 1.637815557645547e-03, 1.637815557645547e-03, 4.549050715379296e-03, 4.550300854992935e-03, 4.588907611142675e-03, 4.589816809886570e-03, 4.549271787569374e-03, 4.549271787569374e-03, 6.206871623464148e-03, 6.204501864690296e-03, 6.368000261452907e-03, 7.584750306784028e-03, 6.207645344642883e-03, 6.207645344642883e-03, 5.898493214234816e-02, 6.050523742807808e-02, -4.970634629900077e-04, 9.643169356828893e-03, 5.928693490517467e-02, 5.928693490517467e-02, 6.860569138940918e-04, 7.176485497458685e-04, 2.187939476111190e-03, 1.710730204593935e-04, 7.266814624007510e-04, 7.266814624007356e-04, 6.996523913259225e-03, 6.997971133645463e-03, 6.996790001960439e-03, 6.997907644888704e-03, 6.997110290218805e-03, 6.997110290218805e-03, 1.132423205997511e-02, 1.173724606838373e-02, 1.135852400204579e-02, 1.169881587941779e-02, 1.155501590462866e-02, 1.155501590462866e-02, 4.362860518794492e-02, 4.562983350176611e-02, 3.603983216681262e-02, 3.947063743393791e-02, 4.666692691216203e-02, 4.666692691216203e-02, 6.429620313204221e-03, 2.911626170333079e-02, 7.057897741742384e-03, 1.169288710486553e-02, 1.258339185718376e-02, 1.258339185718376e-02, 2.189574814900003e-04, 2.202308910251347e-04, 3.446705754675549e-04, 2.566600501824591e-03, 2.139740867217703e-04, 2.139740867217630e-04, 6.181922409741892e-02, 6.149952442040074e-02, 6.161747916882766e-02, 6.170646299460165e-02, 6.166165536061520e-02, 6.166165536061520e-02, 6.253409851513261e-02, 6.146873431863203e-02, 6.280036341911119e-02, 6.309056949123605e-02, 6.287910390139055e-02, 6.287910390139054e-02, 3.952724087910901e-02, 4.344888711826018e-02, 5.022572932985262e-02, 4.971368519249807e-02, 5.559060147451565e-02, 5.559060147451570e-02, 5.119076453130329e-02, 1.930932102799932e-03, 2.698578587273221e-03, 5.814022827823519e-02, 6.611720021472240e-03, 6.611720021472291e-03, 4.500355448537627e-04, 5.677104775982926e-05, 1.783798832768237e-04, 6.811101239207083e-03, 2.135226569910243e-04, 2.135226569910246e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
