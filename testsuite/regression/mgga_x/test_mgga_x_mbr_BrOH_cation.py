
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mbr_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbr", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.075315078139439e+01, -2.075315905429787e+01, -2.075328340932391e+01, -2.075315797460138e+01, -2.075321125684955e+01, -2.075321125684955e+01, -3.543778806976207e+00, -3.543698651562076e+00, -3.541829814544245e+00, -3.544632943044099e+00, -3.543238761039831e+00, -3.543238761039831e+00, -7.363199314933337e-01, -7.364915010034352e-01, -7.411766361366912e-01, -7.438379805297138e-01, -7.426754370659936e-01, -7.426754370659936e-01, -2.240245265935786e-01, -2.251007481272289e-01, -8.824347399528994e-01, -1.961625894949625e-01, -2.219893998317283e-01, -2.219893998317217e-01, -5.519524731902420e-02, -5.537235523814610e-02, -1.045861651576915e-01, -5.016306443344802e-02, -5.134032847198084e-02, -5.134032847197928e-02, -4.943273151608646e+00, -4.941743534412812e+00, -4.943212103486743e+00, -4.941861752336704e+00, -4.942492305789564e+00, -4.942492305789564e+00, -2.177060372291078e+00, -2.185088773383245e+00, -2.179306192007168e+00, -2.186423528608995e+00, -2.180295866590222e+00, -2.180295866590222e+00, -5.829736127186589e-01, -5.880270548736743e-01, -5.503003292483333e-01, -5.313982656573469e-01, -5.869129005945934e-01, -5.869129005947098e-01, -1.645208407918141e-01, -2.433847148458642e-01, -1.570970056086408e-01, -1.779982460739848e+00, -1.713402704581790e-01, -1.713402704582002e-01, -4.702731428468911e-02, -4.924603896908336e-02, -3.192415760160719e-02, -1.252267978030308e-01, -3.936068933065083e-02, -3.936068933065085e-02, -5.294250179143867e-01, -5.365847378886474e-01, -5.341440273040239e-01, -5.320648064360025e-01, -5.331112678794001e-01, -5.331112678794000e-01, -5.123228402149621e-01, -5.195049170677897e-01, -5.191305634246861e-01, -5.160199250862403e-01, -5.175248953595571e-01, -5.175248953596109e-01, -6.196089961336610e-01, -2.868868133201107e-01, -3.223193670799890e-01, -3.776169369210141e-01, -3.480145600717644e-01, -3.480145600717644e-01, -4.823351643287166e-01, -1.037914143993643e-01, -1.178946325300869e-01, -3.495527064151710e-01, -1.367194782059195e-01, -1.367194782058972e-01, -6.464472765894952e-02, -3.120919328829986e-02, -3.590986880510756e-02, -1.322165431493245e-01, -3.676208504007065e-02, -3.676208504008904e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mbr_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbr", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.351029760495377e+01, -2.351030179821937e+01, -2.351041165765139e+01, -2.351038462910289e+01, -2.351074507361720e+01, -2.351087120631512e+01, -2.350945822909549e+01, -2.350923065661154e+01, -2.351036733777823e+01, -2.350986321982416e+01, -2.351036733777823e+01, -2.350986321982416e+01, -3.791557973193180e+00, -3.791507753339322e+00, -3.791558368246067e+00, -3.791504141192063e+00, -3.791549081717878e+00, -3.791587914379504e+00, -3.791903192068975e+00, -3.791947922572164e+00, -3.790950471128107e+00, -3.792010616603145e+00, -3.790950471128107e+00, -3.792010616603145e+00, -7.569395665914865e-01, -7.572506908871725e-01, -7.566290970965800e-01, -7.570958179066472e-01, -7.524284913433307e-01, -7.506703677037152e-01, -7.549264544336178e-01, -7.549416902530935e-01, -7.598787610719927e-01, -7.468713688100082e-01, -7.598787610719927e-01, -7.468713688100082e-01, -2.086362225007410e-01, -2.145116024487670e-01, -2.103620446596548e-01, -2.171564251725135e-01, -9.009576845540307e-01, -9.116317906393294e-01, -1.716579918145927e-01, -1.726008248835242e-01, -2.175489088515569e-01, -1.348584812623941e-01, -2.175489088515569e-01, -1.348584812624893e-01, -2.380158435733239e-02, -2.439423874610662e-02, -2.412653349309317e-02, -2.479112237546243e-02, -6.382961313705786e-02, -6.584558251403352e-02, -2.056266959089033e-02, -2.041644913459371e-02, -2.289565640878901e-02, -1.699634124588478e-02, -2.289565640878910e-02, -1.699634124590407e-02, -5.823386570888847e+00, -5.821912062122504e+00, -5.826741000890446e+00, -5.825152610757879e+00, -5.823573443908331e+00, -5.822023834406504e+00, -5.826451524981341e+00, -5.824967523606517e+00, -5.825103643604199e+00, -5.823538957947271e+00, -5.825103643604199e+00, -5.823538957947271e+00, -2.205597848240732e+00, -2.205243006339242e+00, -2.216712557813876e+00, -2.216003039701202e+00, -2.201215491118810e+00, -2.202063076613161e+00, -2.210754960860777e+00, -2.211796883214143e+00, -2.215185965667908e+00, -2.211286019149373e+00, -2.215185965667908e+00, -2.211286019149373e+00, -6.410066482010947e-01, -6.393884109793732e-01, -7.299687166381378e-01, -7.310189170668231e-01, -5.808838809880972e-01, -6.018459129065654e-01, -6.260300829492497e-01, -6.476319497618568e-01, -6.699516860466835e-01, -6.351029236249176e-01, -6.699516860485110e-01, -6.351029236249179e-01, -1.295140127965203e-01, -1.304436613485863e-01, -2.195253461303477e-01, -2.204998056634886e-01, -1.197340889348855e-01, -1.243169135385798e-01, -2.193855230802802e+00, -2.192973532742348e+00, -1.418959538281518e-01, -1.462258088508563e-01, -1.418959538280546e-01, -1.462258088508563e-01, -1.969110897845142e-02, -2.021087053917710e-02, -2.043181584039058e-02, -2.096405897628315e-02, -1.342013563282806e-02, -1.350187445331692e-02, -8.941380690184068e-02, -8.925607368219253e-02, -1.779129011067128e-02, -1.654426297442154e-02, -1.779129011067131e-02, -1.654426297442159e-02, -6.883230438841966e-01, -6.911802340493882e-01, -6.738749405869213e-01, -6.768255375433638e-01, -6.788261716955029e-01, -6.817726557075434e-01, -6.830317716469720e-01, -6.858882515769230e-01, -6.809184083066017e-01, -6.838182438665432e-01, -6.809184083066017e-01, -6.838182438665428e-01, -6.731701783396643e-01, -6.754383379896125e-01, -5.382412568566337e-01, -5.402222134994630e-01, -5.590389278882018e-01, -5.616429640850453e-01, -5.973059099415107e-01, -5.996700441554041e-01, -5.755671489797753e-01, -5.779010824875492e-01, -5.755671489797752e-01, -5.779010824884887e-01, -7.615966498696226e-01, -7.641020662770952e-01, -2.686200193651070e-01, -2.699092142880850e-01, -3.121671177196055e-01, -3.144508147601469e-01, -3.863304466043661e-01, -3.882362678795391e-01, -3.481868210817440e-01, -3.478385758873752e-01, -3.481868210817439e-01, -3.478385758873750e-01, -4.977214690636557e-01, -5.002147571933645e-01, -6.292030489666939e-02, -6.328628329564623e-02, -7.722905991523309e-02, -7.874294135523270e-02, -3.643767925027425e-01, -3.684243963940256e-01, -1.036148893001754e-01, -1.066298672300283e-01, -1.036148893002700e-01, -1.066298672300283e-01, -3.053225152451223e-02, -3.105610169621856e-02, -1.372330427450622e-02, -1.393431940360057e-02, -1.382240811136889e-02, -1.396300379584271e-02, -9.948741356375569e-02, -1.002487510707314e-01, -1.488599715619180e-02, -1.591666098209939e-02, -1.488599715613243e-02, -1.591666098207347e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbr_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbr", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.883289359038046e-08, 0.000000000000000e+00, -1.883295713482938e-08, -1.883280210214386e-08, 0.000000000000000e+00, -1.883289057956642e-08, -1.883225173612429e-08, 0.000000000000000e+00, -1.883217404341236e-08, -1.883329087675329e-08, 0.000000000000000e+00, -1.883349669108363e-08, -1.883285186184189e-08, 0.000000000000000e+00, -1.883277860294537e-08, -1.883285186184189e-08, 0.000000000000000e+00, -1.883277860294537e-08, -2.338562235441137e-05, 0.000000000000000e+00, -2.340035304285012e-05, -2.338766034174096e-05, 0.000000000000000e+00, -2.340325539928398e-05, -2.344499297802380e-05, 0.000000000000000e+00, -2.345852875790358e-05, -2.334613093220464e-05, 0.000000000000000e+00, -2.336012154785605e-05, -2.339446818984326e-05, 0.000000000000000e+00, -2.340888088271852e-05, -2.339446818984326e-05, 0.000000000000000e+00, -2.340888088271852e-05, -1.132832801723851e-02, 0.000000000000000e+00, -1.156762397979086e-02, -1.126218875070605e-02, 0.000000000000000e+00, -1.154606180123740e-02, -1.050185346688807e-02, 0.000000000000000e+00, -1.027287334093302e-02, -1.021273243619200e-02, 0.000000000000000e+00, -1.032188486250347e-02, -1.180769472100401e-02, 0.000000000000000e+00, -9.140732317188678e-03, -1.180769472100401e-02, 0.000000000000000e+00, -9.140732317188678e-03, -1.120686925382949e+00, 0.000000000000000e+00, -1.039792569871701e+00, -1.108876270321375e+00, 0.000000000000000e+00, -1.017518136835273e+00, -5.589903356975084e-03, 0.000000000000000e+00, -5.835613754521090e-03, -1.961199218699129e+00, 0.000000000000000e+00, -1.911419175807589e+00, -9.579968499648153e-01, 0.000000000000000e+00, -4.493594286276207e+00, -9.579968499648147e-01, 0.000000000000000e+00, -4.493594286267823e+00, -1.278272800590855e+04, 0.000000000000000e+00, -1.074451617582537e+04, -1.135477355157357e+04, 0.000000000000000e+00, -9.345567404451785e+03, -7.598723239528513e+01, 0.000000000000000e+00, -6.568916438592728e+01, -5.177811194089925e+04, 0.000000000000000e+00, -5.406279269239672e+04, -1.758138542329296e+04, 0.000000000000000e+00, -1.100865428210400e+05, -1.758138542329293e+04, 0.000000000000000e+00, -1.100865428209427e+05, -5.641002839093467e-06, 0.000000000000000e+00, -5.646100281772336e-06, -5.643181722008108e-06, 0.000000000000000e+00, -5.648210333782541e-06, -5.641053769958152e-06, 0.000000000000000e+00, -5.646122392304633e-06, -5.642924972065993e-06, 0.000000000000000e+00, -5.648040671471422e-06, -5.642177210836402e-06, 0.000000000000000e+00, -5.647172729572439e-06, -5.642177210836402e-06, 0.000000000000000e+00, -5.647172729572439e-06, -1.375988080581917e-04, 0.000000000000000e+00, -1.376880864596826e-04, -1.362262647381958e-04, 0.000000000000000e+00, -1.363722404247254e-04, -1.351796523853842e-04, 0.000000000000000e+00, -1.359908114204606e-04, -1.340185536944754e-04, 0.000000000000000e+00, -1.347679748893481e-04, -1.386437448832620e-04, 0.000000000000000e+00, -1.372716301416190e-04, -1.386437448832620e-04, 0.000000000000000e+00, -1.372716301416190e-04, -3.120253096558181e-02, 0.000000000000000e+00, -3.157894701215003e-02, -2.861887268100140e-02, 0.000000000000000e+00, -2.861459856929708e-02, -4.197595068138279e-02, 0.000000000000000e+00, -3.826652480110077e-02, -4.999746641828201e-02, 0.000000000000000e+00, -4.318066164908058e-02, -2.791524267684591e-02, 0.000000000000000e+00, -3.376003169446851e-02, -2.791524267651220e-02, 0.000000000000000e+00, -3.376003169446851e-02, -4.825735939892651e+00, 0.000000000000000e+00, -4.730192820699705e+00, -7.898582944085696e-01, 0.000000000000000e+00, -7.785280814051238e-01, -6.460550235064932e+00, 0.000000000000000e+00, -5.625626648543585e+00, -3.623256440898280e-04, 0.000000000000000e+00, -3.630390054613634e-04, -3.622673536467908e+00, 0.000000000000000e+00, -3.442317703796518e+00, -3.622673536474550e+00, 0.000000000000000e+00, -3.442317703796518e+00, -1.210849365173751e+05, 0.000000000000000e+00, -1.047994613845813e+05, -5.966099360925873e+04, 0.000000000000000e+00, -5.560731723210401e+04, -2.305825726844629e+05, 0.000000000000000e+00, -2.018508085102472e+05, -1.953575082594076e+01, 0.000000000000000e+00, -1.924377089938053e+01, -1.599968594512896e+05, 0.000000000000000e+00, -7.296751960265987e+04, -1.599968594512894e+05, 0.000000000000000e+00, -7.296751960265976e+04, -4.226850116313526e-02, 0.000000000000000e+00, -4.171951508527076e-02, -3.908629819311916e-02, 0.000000000000000e+00, -3.855662513859011e-02, -3.982855728033000e-02, 0.000000000000000e+00, -3.930230432665292e-02, -4.070965124199163e-02, 0.000000000000000e+00, -4.016581812935403e-02, -4.023368145522811e-02, 0.000000000000000e+00, -3.969957779988165e-02, -4.023368145522811e-02, 0.000000000000000e+00, -3.969957779988174e-02, -5.001218877859377e-02, 0.000000000000000e+00, -4.935836355755113e-02, -4.636130232401355e-02, 0.000000000000000e+00, -4.597622431076399e-02, -4.897847981305586e-02, 0.000000000000000e+00, -4.851660828097520e-02, -4.893755867761063e-02, 0.000000000000000e+00, -4.832848908395668e-02, -4.962266339862460e-02, 0.000000000000000e+00, -4.900965839063703e-02, -4.962266339862460e-02, 0.000000000000000e+00, -4.900965839029197e-02, -2.372247690148082e-02, 0.000000000000000e+00, -2.360948914623801e-02, -4.026367792850765e-01, 0.000000000000000e+00, -3.969517540291337e-01, -2.588142331937559e-01, 0.000000000000000e+00, -2.546940967121676e-01, -1.617097897532209e-01, 0.000000000000000e+00, -1.593283174073188e-01, -2.003659044164478e-01, 0.000000000000000e+00, -2.018553095515112e-01, -2.003659044164479e-01, 0.000000000000000e+00, -2.018553095515117e-01, -6.218125506074734e-02, 0.000000000000000e+00, -6.169554654803164e-02, -7.885457539657422e+01, 0.000000000000000e+00, -7.726597679140941e+01, -3.417087251777613e+01, 0.000000000000000e+00, -3.147418078905863e+01, -2.362953670280732e-01, 0.000000000000000e+00, -2.316913299039753e-01, -1.116959300238566e+01, 0.000000000000000e+00, -1.029401658641354e+01, -1.116959300236301e+01, 0.000000000000000e+00, -1.029401658641353e+01, -4.146429910527359e+03, 0.000000000000000e+00, -3.759255532203888e+03, -3.189070729068580e+06, 0.000000000000000e+00, -3.428573101966096e+06, -4.307498435905963e+05, 0.000000000000000e+00, -3.677781189942498e+05, -1.301768193538316e+01, 0.000000000000000e+00, -1.251293785120649e+01, -2.363735515487781e+05, 0.000000000000000e+00, -9.443369459030940e+04, -2.363735515495897e+05, 0.000000000000000e+00, -9.443369459042560e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbr_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbr", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbr_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbr", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-2.587792546252434e-04, -2.587789167697871e-04, -2.587778567483440e-04, -2.587779015489224e-04, -2.587738811321390e-04, -2.587720649608605e-04, -2.587896437300431e-04, -2.587921627292713e-04, -2.587783934225327e-04, -2.587844979645743e-04, -2.587783934225327e-04, -2.587844979645743e-04, -1.523490331556712e-03, -1.523832692219510e-03, -1.523567959891263e-03, -1.523922271252899e-03, -1.525511972058914e-03, -1.525948407408345e-03, -1.522903683844054e-03, -1.523271984310987e-03, -1.523520661297621e-03, -1.524969243334224e-03, -1.523520661297621e-03, -1.524969243334224e-03, -6.066998905693540e-03, -6.187652498655839e-03, -6.029597927943884e-03, -6.173546608628698e-03, -5.560030576687316e-03, -5.419924559454421e-03, -5.515110587667408e-03, -5.578148162836693e-03, -6.330178939792837e-03, -4.810644383653537e-03, -6.330178939792837e-03, -4.810644383653537e-03, -1.283074568161810e-02, -1.314890411845919e-02, -1.305623529270609e-02, -1.341273672017604e-02, -4.507158261420801e-03, -4.916837502213128e-03, -1.115894757904082e-02, -1.130963043406719e-02, -1.243766202331579e-02, -1.052908280837599e-02, -1.243766202331577e-02, -1.052908280835636e-02, -8.088204404033981e-03, -8.153344140590815e-03, -8.262752750464779e-03, -8.355302307990187e-03, -9.133505418075534e-03, -9.267810232993567e-03, -7.139269718942336e-03, -7.088538158251491e-03, -7.904809958698423e-03, -9.138805153481439e-03, -7.904809958698408e-03, -9.138805153473361e-03, -1.019821310748870e-03, -1.020112862291238e-03, -1.018234578852564e-03, -1.018579922979865e-03, -1.019735133126546e-03, -1.020061518236932e-03, -1.018373967982093e-03, -1.018669194673168e-03, -1.019009514114224e-03, -1.019344764765556e-03, -1.019009514114224e-03, -1.019344764765556e-03, -1.991306253807323e-03, -1.992322846377395e-03, -2.005328622699917e-03, -2.006077318502398e-03, -1.945057283648952e-03, -1.959578397390749e-03, -1.957345001862489e-03, -1.971627875254580e-03, -2.033894674145206e-03, -2.004622772797007e-03, -2.033894674145206e-03, -2.004622772797007e-03, -9.393064779882224e-03, -9.423293848159316e-03, -7.459763565235159e-03, -7.407567146663333e-03, -9.919804947983852e-03, -9.823387689598822e-03, -9.348181523541535e-03, -8.981016123593770e-03, -9.081564574126667e-03, -9.549574914450293e-03, -9.081564574018089e-03, -9.549574914450288e-03, -1.005078896922457e-02, -1.011096851097736e-02, -1.011233777230914e-02, -1.010575036469679e-02, -1.008304863488279e-02, -1.019455627357310e-02, -2.531811040342001e-03, -2.532254182176069e-03, -1.094029107238704e-02, -1.203395244428467e-02, -1.094029107240710e-02, -1.203395244428467e-02, -7.054157449750242e-03, -6.852688819959100e-03, -7.327322770510995e-03, -7.144428299525363e-03, -1.183300708867315e-02, -1.229796322098174e-02, -1.035219316070158e-02, -1.039040386881221e-02, -8.754157382380411e-03, -1.032388916224952e-02, -8.754157382380404e-03, -1.032388916224950e-02, -6.775608527037286e-03, -6.731002392191103e-03, -7.766018595253509e-03, -7.708678961269189e-03, -7.439005167757312e-03, -7.383373419587102e-03, -7.148913626162713e-03, -7.101334191763334e-03, -7.295802499000753e-03, -7.244214257624812e-03, -7.295802499000753e-03, -7.244214257624823e-03, -6.668406447526766e-03, -6.640767759680319e-03, -9.698158393597152e-03, -9.711136155039726e-03, -1.053349399707106e-02, -1.052003540671979e-02, -1.009098855255693e-02, -1.004360461497284e-02, -1.055162811699847e-02, -1.051297473716609e-02, -1.055162811699847e-02, -1.051297473709205e-02, -7.316487638221670e-03, -7.230829901697147e-03, -9.864502030766409e-03, -9.876181089507654e-03, -1.022972378324993e-02, -1.031436574573825e-02, -1.233181216478336e-02, -1.232054537072252e-02, -1.123218207883079e-02, -1.128525573583568e-02, -1.123218207883080e-02, -1.128525573583570e-02, -1.019265677628580e-02, -1.025997189020597e-02, -8.976562652151859e-03, -8.974051825283285e-03, -9.289703688540469e-03, -9.416442107699489e-03, -1.470901464235635e-02, -1.492009756037442e-02, -1.101638754349229e-02, -1.177357593554305e-02, -1.101638754346996e-02, -1.177357593554304e-02, -7.656844622925250e-03, -7.720882006936818e-03, -7.646192106441803e-03, -8.275197630280834e-03, -8.690844627808680e-03, -8.925661971873177e-03, -1.131787031231775e-02, -1.140306949360763e-02, -1.098474072820243e-02, -1.029303507552925e-02, -1.098474072824012e-02, -1.029303507554188e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
