
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mbr_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbr", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.911857425097819e+01, -1.911862180387990e+01, -1.911885199007052e+01, -1.998298820212257e+01, -1.998321539883844e+01, -2.084802299454100e+01, -3.497033685834559e+00, -3.818021341260445e+00, -3.814938302228019e+00, -3.816529901375494e+00, -3.815958740298721e+00, -3.494988206111376e+00, -6.369558865748626e-01, -7.265787448059423e-01, -8.122392701422725e-01, -7.197009255870428e-01, -6.301046607182181e-01, -8.118614731673752e-01, -2.003836109397791e-01, -2.020643419026132e-01, -9.068323407713197e-01, -2.026598811039861e-01, -2.265703223776583e-01, -2.199583040138368e-01, -5.531916645959778e-02, -4.639921917888342e-02, -9.130805377738795e-02, -5.177722500245649e-02, -5.220109909655150e-02, -5.220109909655150e-02, -4.944968388874911e+00, -4.943419617318717e+00, -4.944872090223238e+00, -4.943506339602696e+00, -4.795295024123156e+00, -4.795427186619857e+00, -2.207911325622201e+00, -2.211773126349084e+00, -2.205781128621818e+00, -2.208974727989995e+00, -2.011044529554392e+00, -2.210968077276236e+00, -5.685832170859356e-01, -6.189929234296740e-01, -5.859526493931185e-01, -5.828995986365770e-01, -5.754106306284630e-01, -6.100436287263041e-01, -1.694241217726411e-01, -2.155280921879108e-01, -1.621014983457479e-01, -1.948631862860891e+00, -1.745266758359998e-01, -1.745266758360204e-01, -4.322605266024025e-02, -5.279126055610914e-02, -3.308643296017984e-02, -1.100487491721989e-01, -4.144275719178643e-02, -4.144275719178644e-02, -5.335507169133248e-01, -5.402807034852475e-01, -5.222757918065326e-01, -5.294268128840683e-01, -5.225827954346929e-01, -5.297613508877521e-01, -5.204309611137654e-01, -4.840516208212313e-01, -4.935369632079757e-01, -5.217734363604456e-01, -5.227802693384793e-01, -4.976068969144231e-01, -6.302269882967100e-01, -2.887703219575192e-01, -2.903658561736369e-01, -3.571163774036592e-01, -3.557016165909616e-01, -3.191962659550254e-01, -4.948064579747803e-01, -7.096095611230216e-02, -1.212565279224194e-01, -3.644452902940964e-01, -1.401345758590826e-01, -1.401345758590826e-01, -4.370561333917730e-02, -3.961310410793382e-02, -2.230234595241608e-02, -9.603616328763209e-02, -3.834276029420498e-02, -2.809867153319739e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mbr_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbr", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.518139554984223e+01, -2.518138416325801e+01, -2.518147999239769e+01, -2.518144550328752e+01, -2.518176503766125e+01, -2.518184977625785e+01, -2.518081122592091e+01, -2.344611443699128e+01, -2.518144524067247e+01, -2.344676586079474e+01, -2.344698311779796e+01, -2.344676586079474e+01, -3.884230517880905e+00, -4.063469074021437e+00, -3.884152657604576e+00, -3.884196949371119e+00, -3.882624255992184e+00, -3.882392015351869e+00, -3.883506779211845e+00, -3.883558927439720e+00, -3.883781593208226e+00, -3.882256674577000e+00, -4.062814455358405e+00, -3.882256674577000e+00, -7.642550455047719e-01, -7.682716450204515e-01, -7.627787261989274e-01, -7.947723649438040e-01, -7.836356527323740e-01, -7.795936815364463e-01, -7.837837590306342e-01, -7.495113847508048e-01, -7.747945761786990e-01, -7.164863592023578e-01, -7.999827045798591e-01, -7.658278385072738e-01, -1.904904031348678e-01, -2.148303474660913e-01, -1.928832394743675e-01, -2.175930550270503e-01, -9.564451304425607e-01, -8.922718431339787e-01, -1.731510879924565e-01, -1.735283718541577e-01, -2.185288548087597e-01, -1.364622553946689e-01, -2.185288548087596e-01, -1.281890540389527e-01, -2.381174749269141e-02, -2.439877569610675e-02, -2.549184011739368e-02, -2.480124312851920e-02, -6.286739712455876e-02, -6.607389808444492e-02, -2.062599561757384e-02, -2.047121601982025e-02, -2.292366879578317e-02, -1.707756689207598e-02, -2.292366879578317e-02, -1.707756689207594e-02, -5.821750917626396e+00, -5.820370615814072e+00, -5.825117268744925e+00, -5.823623020536072e+00, -5.821975868447586e+00, -5.820509753174355e+00, -5.824862864195508e+00, -5.823462904744393e+00, -6.145808824472638e+00, -5.821998709765549e+00, -5.823445685602243e+00, -6.144308474007775e+00, -2.221473510122062e+00, -2.220616273339508e+00, -2.230465554405655e+00, -2.229342613264587e+00, -2.214371845395149e+00, -2.215573600573443e+00, -2.222027770669680e+00, -2.223346240250093e+00, -2.231759537549034e+00, -2.288770727558238e+00, -2.231759537549034e+00, -2.225831348366318e+00, -6.393488583192735e-01, -6.887125332085258e-01, -7.008571194844595e-01, -7.025355638080027e-01, -5.936230221983321e-01, -6.077141605229598e-01, -6.048370257892625e-01, -6.229040528474268e-01, -6.634578985730736e-01, -6.824881447202714e-01, -6.634578985730735e-01, -6.312500726919018e-01, -1.301624981033607e-01, -1.311550077829214e-01, -1.977841135467094e-01, -2.210828240774119e-01, -1.204426117557643e-01, -1.249468404441204e-01, -2.084816770854195e+00, -2.083881876815640e+00, -1.424718390200453e-01, -1.467257515254635e-01, -1.424718390199508e-01, -1.467257515254634e-01, -2.178485585483695e-02, -2.027850355858262e-02, -2.052697989185029e-02, -2.106432860586228e-02, -1.346531960595414e-02, -1.355069638101969e-02, -8.998253458666285e-02, -8.571060031914256e-02, -1.781664865316903e-02, -1.655861869112918e-02, -1.781664865316900e-02, -1.655861869112916e-02, -6.838466614473918e-01, -6.867885870481166e-01, -6.699915722125309e-01, -6.730227720042895e-01, -6.925796605528970e-01, -6.952962561027838e-01, -6.938439751097649e-01, -6.817988568728478e-01, -6.932115641732486e-01, -6.959163781347022e-01, -6.932115641732485e-01, -6.798113324826812e-01, -6.641198498646617e-01, -6.666478109972459e-01, -5.392313808255639e-01, -5.788405371795744e-01, -5.586089149869924e-01, -6.080892743488576e-01, -5.927189676572526e-01, -5.950525133427886e-01, -5.730961091784841e-01, -5.754334233413533e-01, -5.730961091756599e-01, -6.218692726128662e-01, -7.281365459746776e-01, -7.881288471838231e-01, -2.691432284432380e-01, -2.704549120743717e-01, -2.970771182990251e-01, -3.161284127937293e-01, -4.032144868673677e-01, -3.962121721483343e-01, -3.517249652137394e-01, -3.514063373921544e-01, -3.517249652137399e-01, -3.486404320029808e-01, -5.037310453467093e-01, -5.055805752784956e-01, -6.184587619073428e-02, -6.222345958472522e-02, -7.757560160134422e-02, -7.908251653339046e-02, -3.719586896830738e-01, -3.728243973633545e-01, -1.040702884460193e-01, -1.070811964798399e-01, -1.040702884460192e-01, -1.070811964798399e-01, -3.227938072548284e-02, -3.279556160709633e-02, -1.350181847736157e-02, -1.352088723956205e-02, -1.526751932213467e-02, -1.537683326102834e-02, -9.449027778678508e-02, -9.482182767445380e-02, -1.495138240999060e-02, -1.593050733388330e-02, -1.495138240999050e-02, -1.709595239052852e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbr_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbr", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.940663561410643e-08, 0.000000000000000e+00, -2.940623154647753e-08, -2.940617405612198e-08, 0.000000000000000e+00, -2.940589636158467e-08, -2.940465309371266e-08, 0.000000000000000e+00, -2.940372951773468e-08, -2.940986154308129e-08, 0.000000000000000e+00, -1.851870263561309e-08, -2.940636046655529e-08, 0.000000000000000e+00, -1.851822929648120e-08, -1.851691067262019e-08, 0.000000000000000e+00, -1.851822929648120e-08, -1.477815712733400e-05, 0.000000000000000e+00, -4.822255357830855e-05, -1.478136849791664e-05, 0.000000000000000e+00, -1.477833478015059e-05, -1.484422487977596e-05, 0.000000000000000e+00, -1.485488364117747e-05, -1.481633711473158e-05, 0.000000000000000e+00, -1.481559464702577e-05, -1.478047576521345e-05, 0.000000000000000e+00, -1.487128092279493e-05, -4.825648223608728e-05, 0.000000000000000e+00, -1.487128092279493e-05, -4.183591589012265e-02, 0.000000000000000e+00, -4.092919487933541e-02, -4.216968361697722e-02, 0.000000000000000e+00, -6.253950279960565e-03, -6.243777403857620e-03, 0.000000000000000e+00, -6.320104447119175e-03, -6.348973819156991e-03, 0.000000000000000e+00, -4.526583562089700e-02, -3.953757141664692e-02, 0.000000000000000e+00, -5.381642703120201e-02, -6.145878992981705e-03, 0.000000000000000e+00, -6.574291511022796e-03, -1.033269285874306e+01, 0.000000000000000e+00, -1.018995423461440e+00, -9.911734825880128e+00, 0.000000000000000e+00, -9.904537190217878e-01, -2.348844577391861e-03, 0.000000000000000e+00, -2.180819550430003e-02, -1.708352608224697e+00, 0.000000000000000e+00, -1.758496062870795e+00, -8.992604084793743e-01, 0.000000000000000e+00, -3.691335415907958e+00, -8.992604084793737e-01, 0.000000000000000e+00, -3.826213761164861e+01, -1.271800641892156e+04, 0.000000000000000e+00, -1.072119991204887e+04, -1.180211823226990e+05, 0.000000000000000e+00, -9.301273189731497e+03, -7.588618864457238e+02, 0.000000000000000e+00, -6.278818238065627e+01, -4.923581905874409e+04, 0.000000000000000e+00, -5.179794101990106e+04, -1.731389580381322e+04, 0.000000000000000e+00, -1.002750964477254e+05, -1.731389580381322e+04, 0.000000000000000e+00, -1.002750964477256e+05, -5.634885255703600e-06, 0.000000000000000e+00, -5.640328111266507e-06, -5.637136087107977e-06, 0.000000000000000e+00, -5.642507543618020e-06, -5.635080417068799e-06, 0.000000000000000e+00, -5.640453757319527e-06, -5.637007922746573e-06, 0.000000000000000e+00, -5.642429786539984e-06, -8.119131747612429e-06, 0.000000000000000e+00, -5.641417823017310e-06, -5.635990502320004e-06, 0.000000000000000e+00, -8.127099812651342e-06, -1.263609943886184e-04, 0.000000000000000e+00, -1.267796963726623e-04, -1.265268017514650e-04, 0.000000000000000e+00, -1.269387801328268e-04, -1.260010782326948e-04, 0.000000000000000e+00, -1.265061680267680e-04, -1.261939089712585e-04, 0.000000000000000e+00, -1.266979563950608e-04, -1.267699143490386e-04, 0.000000000000000e+00, -4.907537989506094e-04, -1.267699143490386e-04, 0.000000000000000e+00, -1.269486484547531e-04, -2.515385896278199e-02, 0.000000000000000e+00, -5.507186098093010e-02, -2.361856744495351e-02, 0.000000000000000e+00, -2.380175425195790e-02, -2.753901326358825e-02, 0.000000000000000e+00, -2.735817430522586e-02, -3.065793075168214e-02, 0.000000000000000e+00, -2.925419151206763e-02, -2.377451274586349e-02, 0.000000000000000e+00, -5.700447935086359e-02, -2.377451274586346e-02, 0.000000000000000e+00, -2.696805610303283e-02, -4.468245203908005e+00, 0.000000000000000e+00, -4.347928108439220e+00, -8.136299036475011e+00, 0.000000000000000e+00, -7.483778965880357e-01, -5.899269556178092e+00, 0.000000000000000e+00, -5.205142875756669e+00, -2.431515162556108e-04, 0.000000000000000e+00, -2.436832057787838e-04, -3.401919208225461e+00, 0.000000000000000e+00, -3.265108082534494e+00, -3.401919208231239e+00, 0.000000000000000e+00, -3.265108082534499e+00, -1.054817388836792e+06, 0.000000000000000e+00, -8.908135832246830e+04, -5.410981467704897e+04, 0.000000000000000e+00, -4.999083810053185e+04, -2.188802170688622e+05, 0.000000000000000e+00, -1.910798006323962e+05, -1.777855480117880e+01, 0.000000000000000e+00, -1.890135311371257e+02, -1.272577806830202e+05, 0.000000000000000e+00, -7.216993365618770e+04, -1.272577806830204e+05, 0.000000000000000e+00, -7.216993365618770e+04, -3.978184214414251e-02, 0.000000000000000e+00, -3.928769477405285e-02, -3.791803487845152e-02, 0.000000000000000e+00, -3.741357362160005e-02, -4.907751766118500e-02, 0.000000000000000e+00, -4.829065074307835e-02, -4.854079414812274e-02, 0.000000000000000e+00, -3.838353566453936e-02, -4.880851599517851e-02, 0.000000000000000e+00, -4.803253626250528e-02, -4.880851599517851e-02, 0.000000000000000e+00, -3.810635149551789e-02, -4.377500399515964e-02, 0.000000000000000e+00, -4.333277217032646e-02, -4.494813484143639e-02, 0.000000000000000e+00, -1.130071380828962e-01, -4.701186693785681e-02, 0.000000000000000e+00, -8.915465030579284e-02, -4.711726818318380e-02, 0.000000000000000e+00, -4.654919124169643e-02, -4.750474456761486e-02, 0.000000000000000e+00, -4.700416069679474e-02, -4.750474456857998e-02, 0.000000000000000e+00, -8.004451096984701e-02, -1.843946087309533e-02, 0.000000000000000e+00, -3.085612621544305e-02, -3.917868506623240e-01, 0.000000000000000e+00, -3.858796817165817e-01, -1.831631188714335e+00, 0.000000000000000e+00, -2.378640361047530e-01, -5.128785734424866e-01, 0.000000000000000e+00, -1.240006160906014e-01, -1.775443958973658e-01, 0.000000000000000e+00, -1.786819374260868e-01, -1.775443958973654e-01, 0.000000000000000e+00, -9.494413016505044e-01, -5.277563910444528e-02, 0.000000000000000e+00, -5.304411528250454e-02, -8.125238327096973e+02, 0.000000000000000e+00, -7.923297439706544e+02, -3.213187971014089e+01, 0.000000000000000e+00, -2.965885473644508e+01, -1.744630425605950e-01, 0.000000000000000e+00, -1.873956306663108e-01, -1.045625478655471e+01, 0.000000000000000e+00, -9.652456168856531e+00, -1.045625478655471e+01, 0.000000000000000e+00, -9.652456168856531e+00, -3.916160772361475e+04, 0.000000000000000e+00, -3.526985282121907e+04, -2.393790269589596e+06, 0.000000000000000e+00, -2.375207543545627e+06, -4.353339705155002e+06, 0.000000000000000e+00, -3.716429734032802e+06, -1.277513704217500e+02, 0.000000000000000e+00, -1.263886896367361e+02, -1.951991565680983e+05, 0.000000000000000e+00, -9.337734736973638e+04, -1.951991565680992e+05, 0.000000000000000e+00, -9.748348896342323e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbr_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbr", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.817892938701461e-04, -1.817860936924501e-04, -1.817882024681359e-04, -1.817853015692388e-04, -1.817847841162717e-04, -1.817803835818245e-04, -1.817970747522159e-04, -2.595032946990706e-04, -1.817886262174837e-04, -2.594965493348851e-04, -2.594939600860601e-04, -2.594965493348851e-04, -1.181121183650512e-03, -1.286458327067589e-03, -1.181307822338072e-03, -1.181104589957313e-03, -1.184946085213577e-03, -1.185585770823349e-03, -1.183522370963931e-03, -1.183510756797712e-03, -1.180894596930823e-03, -1.186772644736819e-03, -1.286770433818227e-03, -1.186772644736819e-03, -7.961304212581203e-03, -7.881744358824071e-03, -7.987410783785074e-03, -4.140622280751547e-03, -3.919801538078561e-03, -3.900043862599038e-03, -4.001598773527332e-03, -8.193293267274261e-03, -7.790284198102872e-03, -8.713404528408616e-03, -4.155983094865049e-03, -3.820701875519695e-03, -3.210609197393734e-02, -1.295499597622729e-02, -3.195066104718974e-02, -1.315093536886070e-02, -2.569233745196183e-03, -6.946993800367535e-03, -1.000946071828739e-02, -1.059287841032945e-02, -1.186842396440366e-02, -8.940239349026637e-03, -1.186842396440365e-02, -2.089931717196176e-02, -8.047645489289849e-03, -8.135833248743665e-03, -1.716433298877729e-02, -8.316143126696266e-03, -1.897389704833645e-02, -8.884761538213925e-03, -6.790469948540607e-03, -6.793018168375023e-03, -7.785544488803127e-03, -8.328612372197645e-03, -7.785544488803127e-03, -8.328612372197657e-03, -1.020792256294270e-03, -1.021028178759480e-03, -1.019209003354410e-03, -1.019497816009263e-03, -1.020684118147669e-03, -1.020960957496778e-03, -1.019326515994675e-03, -1.019571603432378e-03, -7.274353303430949e-04, -1.020264233055674e-03, -1.019999179287597e-03, -7.276165125530911e-04, -1.880865093517975e-03, -1.885201893655023e-03, -1.908994563400756e-03, -1.912494037888650e-03, -1.854886681155148e-03, -1.866458320836247e-03, -1.879730930157769e-03, -1.891625977580068e-03, -1.916584692087864e-03, -2.364179769780955e-03, -1.916584692087864e-03, -1.902720233239245e-03, -8.646980778518224e-03, -7.028325031135979e-03, -8.681209259297757e-03, -8.653999383874499e-03, -7.856267809923203e-03, -8.320039102004542e-03, -8.996375305527831e-03, -9.122521342883732e-03, -8.756398902673776e-03, -7.076552874720638e-03, -8.756398902673776e-03, -8.859140430504869e-03, -9.418258888948558e-03, -9.417896664908906e-03, -2.673583464095457e-02, -9.804345661933086e-03, -9.328869439398460e-03, -9.544334369094253e-03, -2.783076043184033e-03, -2.784814893637858e-03, -1.039140521245831e-02, -1.153558804545209e-02, -1.039140521247595e-02, -1.153558804545211e-02, -1.222707806617875e-02, -5.828564099690361e-03, -6.648828330248922e-03, -6.426248018397252e-03, -1.123602445374016e-02, -1.164600935014728e-02, -9.518459246396381e-03, -2.217674692334332e-02, -6.970501667275403e-03, -1.021187656205726e-02, -6.970501667275412e-03, -1.021187656205726e-02, -7.174422917565309e-03, -7.119448500983654e-03, -8.074311385663899e-03, -8.010471624330466e-03, -6.272604080505628e-03, -6.244589918411955e-03, -6.235450905592314e-03, -7.457243143650549e-03, -6.254005618370632e-03, -6.226587358962730e-03, -6.254005618370632e-03, -7.587665180779364e-03, -7.505312611159101e-03, -7.448845040201614e-03, -9.522181070373252e-03, -8.613577624263822e-03, -1.037045326531999e-02, -7.804203859069731e-03, -1.025529939673623e-02, -1.021229111200696e-02, -1.050356938747969e-02, -1.047359831831157e-02, -1.050356938769310e-02, -7.468237223939200e-03, -8.286606627240138e-03, -5.854733523334149e-03, -9.666201014707321e-03, -9.670868138864367e-03, -2.086626912807509e-02, -9.820858703711752e-03, -1.355612357252944e-02, -1.046539324257004e-02, -1.033123552615637e-02, -1.037346018878115e-02, -1.033123552615634e-02, -1.663356090139773e-02, -9.200067870261602e-03, -9.345849001484934e-03, -1.919677594965139e-02, -1.910655750041688e-02, -8.778845927375647e-03, -8.917788206966816e-03, -1.224373019935279e-02, -1.320495102901626e-02, -1.040649365434130e-02, -1.114715038365536e-02, -1.040649365434131e-02, -1.114715038365535e-02, -1.448783765303204e-02, -1.451930659256925e-02, -5.741833965051847e-03, -5.736409065340987e-03, -1.746618697032480e-02, -1.793960373991625e-02, -2.477231236087687e-02, -2.573022323507966e-02, -9.081063604442661e-03, -1.017867308379154e-02, -9.081063604442684e-03, -2.118242898233002e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
