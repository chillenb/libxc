
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mbrxh_bg_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbrxh_bg", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.898782696609603e+01, -1.898785820287996e+01, -1.898802216166516e+01, -1.898755546846404e+01, -1.898779645290864e+01, -1.898779645290864e+01, -3.378137587675151e+00, -3.378012516090970e+00, -3.374785517020436e+00, -3.376393041663418e+00, -3.375869688714533e+00, -4.980291902818110e+00, -7.468221314509720e-01, -1.325131182723402e+00, -1.389215138221225e+00, -1.353045295658858e+00, -1.361338186505289e+00, -1.361338186505289e+00, -4.310048799183305e-01, -4.247932807986946e-01, -9.700420071196203e-01, -5.814770873325995e-01, -5.011093665516129e-01, -5.011093665512788e-01, -3.269401015569960e+00, -3.085177579356889e+00, -1.222889998503851e+00, -5.797821004921806e+00, -4.164661147684844e+00, -4.164661147684844e+00, -4.943764350673096e+00, -4.938222818038731e+00, -4.943436600406088e+00, -4.577255925884741e+00, -4.940983676799988e+00, -4.940983676799988e+00, -1.967021498141956e+00, -1.967105629475573e+00, -1.967939305047737e+00, -1.967570862617042e+00, -1.966564844547962e+00, -3.013069976554001e+00, -7.137096474552919e-01, -6.463174144564694e-01, -7.414487647681420e-01, -6.833700848850289e-01, -7.025080406902284e-01, -5.432197328765325e-01, -1.665107245133124e-01, -5.759575602154642e-01, -1.597456722594472e-01, -2.218975119611525e+00, -5.698145626692401e-01, -5.698145626692397e-01, -5.567701810069040e-02, -6.242382149104364e+00, -3.019976427700670e+00, -1.294957578657021e-01, -4.367701121231476e-02, -4.003178236607011e+00, -5.154006805148763e-01, -5.237515490515459e-01, -5.100792413868405e-01, -5.178972368861912e-01, -5.190631583507251e-01, -5.190631583507251e-01, -5.027124905147257e-01, -6.410739405810870e-01, -5.956799084548550e-01, -5.418851458556359e-01, -5.706212856889632e-01, -4.720190142446999e-01, -7.137734512343432e-01, -2.699356071241032e-01, -5.553479818303008e-01, -3.506796203369105e-01, -5.346393410787834e-01, -5.346393410787834e-01, -4.373990184597902e-01, -1.251236630486817e+00, -1.077157479592176e+00, -4.681003055456156e-01, -1.382588953344784e-01, -6.720457412890573e-01, -3.475010690855417e+00, -1.692764007644813e+01, -5.648156903248947e+00, -6.733945861407897e-01, -3.631936979701251e+00, -3.631936979701255e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mbrxh_bg_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbrxh_bg", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.414938308644049e+01, -2.414946908644331e+01, -2.414986469597595e+01, -2.414858612869955e+01, -2.414925418139356e+01, -2.414925418139356e+01, -3.661754745732244e+00, -3.661833196482005e+00, -3.663993742085447e+00, -3.663445965879601e+00, -3.663123638663367e+00, -1.941019090273539e+00, -7.539672510416763e-01, -8.083558154563228e-02, 5.196434937800114e-03, -3.511445041449605e-02, -2.603975681105544e-02, -2.603975681105544e-02, 5.403817080919621e-02, 4.404919215250095e-02, -9.685789027226901e-01, 2.571170944428475e-01, 1.594471921849739e-01, 1.594471921830070e-01, 3.382194874773024e+00, 3.178741522475892e+00, 1.060301351245526e+00, 6.210706836985820e+00, 4.390346490615199e+00, 4.390346490615199e+00, -4.613413649333507e+00, -4.636637355988166e+00, -4.614745815409782e+00, -5.928278558220659e+00, -4.625060841536931e+00, -4.625060841536931e+00, -2.047499625480510e+00, -2.061511483009789e+00, -2.038686095204541e+00, -2.049586884923954e+00, -2.060107899121809e+00, -9.592116816373037e-01, -3.952491470173881e-01, -4.631472537549327e-01, -3.268108604882597e-01, -3.810607091687326e-01, -4.068463009394924e-01, -6.610399579769881e-01, -1.504558667133690e-01, 1.765015024453142e-01, -1.429723336659727e-01, -1.315529498100245e+00, 2.919213680469425e-01, 2.919213680469392e-01, -3.683459895663252e-02, 6.703902248633718e+00, 3.202626023866124e+00, -1.107295824632327e-01, -2.962908228353589e-02, 4.257025287374980e+00, -6.651509416627530e-01, -6.333573393091808e-01, -6.724127427496389e-01, -6.561989719897370e-01, -6.518536766928407e-01, -6.518536766928407e-01, -6.445280426647915e-01, -3.143393265549824e-01, -3.533801186921948e-01, -3.977703210538124e-01, -3.625509989330072e-01, -5.923981932855696e-01, -4.611890141567975e-01, -2.698454451230519e-01, -2.347076873415187e-03, -3.639073407791570e-01, -8.938260211117335e-02, -8.938260211117366e-02, -4.790857810090112e-01, 1.093157422867118e+00, 8.867260485015057e-01, -1.950705107842982e-01, -1.234040715289082e-01, 4.492590451535113e-01, 3.556323960421194e+00, 1.904611121923390e+01, 6.137074230917137e+00, 4.596953145650435e-01, 3.860069934634713e+00, 3.860069934634693e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbrxh_bg_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbrxh_bg", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.725560837292329e-09, -6.725420087119582e-09, -6.724797685441652e-09, -6.726887458064005e-09, -6.725791957294917e-09, -6.725791957294917e-09, -1.441662467291300e-05, -1.441604791526274e-05, -1.439924628069586e-05, -1.440095221278763e-05, -1.440676494226133e-05, -3.145930815046603e-05, -7.320521668887764e-03, -2.040217985093299e-02, -2.223091639436520e-02, -2.172692495838454e-02, -2.182927199822110e-02, -2.182927199822110e-02, -4.276494371530219e+00, -4.060592010864113e+00, -2.636709761809354e-03, -1.104577186488309e+01, -7.439226014304434e+00, -7.439226014282752e+00, -1.134363458665669e+06, -9.355347732444240e+05, -1.440751223738188e+03, -9.079422375520615e+06, -3.851460879889599e+06, -3.851460879889599e+06, -6.816375341960433e-06, -6.754420872175256e-06, -6.812855680872240e-06, -1.718584956113629e-06, -6.785352680499113e-06, -6.785352680499113e-06, -1.415513132841333e-04, -1.388652633125528e-04, -1.431468415696003e-04, -1.411041507297008e-04, -1.391783390615237e-04, -2.971718830735842e-04, -4.329132628063381e-02, -3.737806662569173e-02, -5.424711023406216e-02, -5.080561385892793e-02, -4.201096126268763e-02, -1.331367111100158e-02, -4.915525306334209e+00, -3.928209370495074e+00, -6.173388482541197e+00, -4.000487911823075e-04, -2.394741175623738e+01, -2.394741175623730e+01, -1.072371175276891e+05, -9.848744789406672e+06, -3.013892847756473e+07, -2.012765754873867e+01, -1.027217940320020e+05, -1.417274099998245e+07, -1.379869509171400e-02, -2.204926674311010e-02, -9.390428254454380e-03, -1.636474713791067e-02, -1.752519753237166e-02, -1.752519753237166e-02, -1.640667166433381e-02, -8.255139384768741e-02, -7.691402092003399e-02, -7.278504591534252e-02, -7.698062939218099e-02, -1.935717424527392e-02, -3.026161404114178e-02, -4.381440688386845e-01, -8.406590254673647e-01, -1.413096069679916e-01, -5.093913371691684e-01, -5.093913371691684e-01, -4.956959506309325e-02, -1.698061592336635e+03, -5.315244902269254e+02, -3.692045244881836e-01, -1.120512366121226e+01, -1.014842963568969e+02, -2.951764928380350e+05, -1.579944212648821e+09, -9.501236335989967e+07, -1.287195600311478e+02, -1.937116238173832e+07, -1.937116238173836e+07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbrxh_bg_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbrxh_bg", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-6.846708322413585e-04, -6.846622319636048e-04, -6.846261025125006e-04, -6.847535748514515e-04, -6.846864851556622e-04, -6.846864851556622e-04, -6.333579062257942e-03, -6.333366688049310e-03, -6.327397178331909e-03, -6.329296361175131e-03, -6.329754308411311e-03, -1.895432746393699e-03, -2.307772079504192e-02, -4.430179383916888e-03, -3.872624574209474e-03, -4.138659088255370e-03, -4.075783604566684e-03, -4.075783604566684e-03, -1.056891897292371e-02, -1.105081386330955e-02, -1.317847629537809e-02, -4.819472985388539e-03, -6.856084982428086e-03, -6.856084982408099e-03, -1.339365158543036e-04, -1.456734168337860e-04, -8.031643987380980e-04, -5.897195568710355e-05, -9.248240867596763e-05, -9.248240867596763e-05, -4.065996392631300e-03, -4.050641611518985e-03, -4.065129541591839e-03, -2.535306078909406e-03, -4.058352279573211e-03, -4.058352279573211e-03, -1.108405856788840e-02, -1.111206782670100e-02, -1.103186963135128e-02, -1.108603653089354e-02, -1.111445699226640e-02, -2.795515906015514e-03, -1.880774366565404e-02, -3.349045379034409e-02, -1.393682607444436e-02, -1.987568206157365e-02, -2.080314513595887e-02, -2.947266255833396e-02, -3.906550630551198e-02, -6.074539468736214e-03, -3.884628119498507e-02, -6.953136871570205e-03, -4.330089254581944e-03, -4.330089254581930e-03, -2.172303170388032e-02, -5.369865204301133e-05, -1.221598204995532e-04, -3.853492176456332e-02, -3.308236874813862e-02, -9.029227099738229e-05, -2.122388211694403e-02, -2.602204419205156e-02, -1.988049017465233e-02, -2.274603726718942e-02, -2.342697174934232e-02, -2.342697174934232e-02, -2.237711742456972e-02, -1.781366164278529e-02, -2.594304310463399e-02, -4.021243679625414e-02, -3.278801627693641e-02, -2.957678680500030e-02, -2.725286223225253e-02, -4.817614399908877e-02, -9.792237047374724e-03, -6.201985689913459e-02, -1.268279324639559e-02, -1.268279324639559e-02, -4.823780627881612e-02, -7.656996918581129e-04, -1.063926809350936e-03, -2.112850195644482e-02, -4.428824333355827e-02, -2.635664384230730e-03, -1.349205327888563e-04, -1.300691451379383e-05, -5.397368843877685e-05, -2.541394271128199e-03, -9.993963321742830e-05, -9.993963321742807e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
