
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mbrxh_bg_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbrxh_bg", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.170176851039115e+01, -2.170166807241161e+01, -2.170146051133015e+01, -2.170294786838367e+01, -2.170213454543104e+01, -2.170213454543104e+01, -4.029300712271552e+00, -4.029073316763956e+00, -4.023655584536003e+00, -4.031047896105068e+00, -4.027802883385362e+00, -4.027802883385362e+00, -9.169826646108140e-01, -9.190492815407387e-01, -9.780929687765718e-01, -9.780854205996015e-01, -9.750103505364129e-01, -9.750103505364129e-01, -4.157646545338252e-01, -4.068379471856522e-01, -1.102117464541718e+00, -5.012074013837379e-01, -4.504913412068037e-01, -4.504913412068037e-01, -3.245204464307899e+00, -3.043509396645764e+00, -1.114582198423852e+00, -5.227512453526433e+00, -3.913998446014751e+00, -3.913998446014751e+00, -4.939679568005943e+00, -4.934222478667766e+00, -4.939438650122609e+00, -4.934620817567491e+00, -4.936899409675649e+00, -4.936899409675649e+00, -2.897341189101220e+00, -2.891386780730675e+00, -2.938152243467560e+00, -2.932568578265649e+00, -2.874542128585213e+00, -2.874542128585213e+00, -6.379207644272191e-01, -5.789795526987530e-01, -6.205887307379451e-01, -5.407216203384965e-01, -6.297621089769571e-01, -6.297621089769571e-01, -6.526150857019127e-01, -5.502379666470577e-01, -6.646328124333833e-01, -1.785978975263800e+00, -5.232702737502081e-01, -5.232702737502081e-01, -5.687790358901297e+00, -4.946773942131007e+00, -2.683307084310068e+00, -7.537087720518342e-01, -3.261770653901424e+00, -3.261770653901424e+00, -5.128405087901207e-01, -5.198142930262425e-01, -5.169195178521163e-01, -5.148993976231363e-01, -5.158692653707443e-01, -5.158692653707443e-01, -4.978750467180509e-01, -6.313786225450893e-01, -5.821256969589100e-01, -5.250363156101808e-01, -5.536958363409352e-01, -5.536958363409352e-01, -6.145145814063442e-01, -5.497685268183993e-01, -5.244245105057306e-01, -4.762182118436269e-01, -4.928761038288773e-01, -4.928761038290750e-01, -5.910986006437681e-01, -1.195211516184962e+00, -9.635108134511161e-01, -4.131180870521062e-01, -6.034893225729853e-01, -6.034893225733987e-01, -2.737471016149769e+00, -7.058228026444123e+00, -5.336813672727891e+00, -6.296621344537778e-01, -3.124131741520117e+00, -3.124131741522762e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mbrxh_bg_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbrxh_bg", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.561313604678860e+01, -1.561337995091227e+01, -1.561411895370798e+01, -1.561049725050743e+01, -1.561244309752838e+01, -1.561244309752838e+01, -2.821357010923915e+00, -2.821327572984073e+00, -2.820160099156614e+00, -2.816808099446174e+00, -2.818591437254377e+00, -2.818591437254377e+00, -5.373070659791664e-01, -5.341430734708522e-01, -4.441517590019732e-01, -4.442202118406750e-01, -4.482666434783111e-01, -4.482666434783111e-01, 3.943188520280449e-02, 2.671614087032283e-02, -7.607338344773397e-01, 1.842859642787592e-01, 1.126574926623854e-01, 1.126574926623847e-01, 3.356252040911223e+00, 3.134195548160960e+00, 9.553707214436149e-01, 5.584160623874321e+00, 4.118113834211215e+00, 4.118113834211236e+00, -4.629789408991407e+00, -4.652767882866960e+00, -4.630778480970584e+00, -4.651065474360150e+00, -4.641483315526857e+00, -4.641483315526857e+00, -1.061786618218725e+00, -1.083732558471199e+00, -1.009023722893171e+00, -1.028895937146128e+00, -1.098805377562617e+00, -1.098805377562617e+00, -4.408898927767942e-01, -6.840935349583958e-01, -4.286985816778249e-01, -5.542480716723640e-01, -4.506178445064983e-01, -4.506178445064983e-01, 3.919869987528604e-01, 1.528567605686894e-01, 4.161223099447680e-01, -2.011230948676050e+00, 2.501216453436584e-01, 2.501216453436584e-01, 6.130623876821635e+00, 5.279523938497428e+00, 2.835597982168389e+00, 5.557710641600545e-01, 3.447807712826069e+00, 3.447807712826048e+00, -6.710528187537699e-01, -6.464610365190612e-01, -6.571968236511323e-01, -6.642481385847284e-01, -6.609091763157493e-01, -6.609091763157493e-01, -6.554303511787559e-01, -3.224229104179441e-01, -3.599889704999311e-01, -4.431509618783311e-01, -3.746308769891258e-01, -3.746308769891258e-01, -7.027063861222851e-01, 7.048515294918033e-02, -3.315050533238530e-02, -2.295612192522073e-01, -1.325076385553725e-01, -1.325076385541894e-01, -3.052646749305165e-01, 1.038645725642117e+00, 7.788441147035239e-01, -2.452316189891317e-01, 3.870728065367863e-01, 3.870728065393140e-01, 2.773833515394079e+00, 7.823932490292835e+00, 5.791139766847172e+00, 4.199148668728478e-01, 3.305750291404986e+00, 3.305750291421947e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbrxh_bg_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbrxh_bg", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.943316173769401e-08, -2.943272081268778e-08, -2.943095036356295e-08, -2.943750798220709e-08, -2.943404701714681e-08, -2.943404701714681e-08, -3.273110557216213e-05, -3.273332320520850e-05, -3.278976667875888e-05, -3.275460525146845e-05, -3.277218871079280e-05, -3.277218871079280e-05, -2.024160916036284e-02, -2.033422713200877e-02, -2.270521597848774e-02, -2.219827667676658e-02, -2.228223788825969e-02, -2.228223788825969e-02, -4.311185468951659e+00, -4.099565384388512e+00, -9.120651512360535e-03, -1.143033029042982e+01, -7.624459115704441e+00, -7.624459115704434e+00, -1.135293106477448e+06, -9.369579780891549e+05, -1.463013942106281e+03, -9.171719671821076e+06, -3.876311038695617e+06, -3.876311038695629e+06, -6.774879932507201e-06, -6.713190413123629e-06, -6.772211712728549e-06, -6.717754727561323e-06, -6.743555450000737e-06, -6.743555450000737e-06, -3.061183488722174e-04, -2.989446520323813e-04, -3.107806498461134e-04, -3.042620237156400e-04, -2.999877517839880e-04, -2.999877517839880e-04, -4.662427784036637e-02, -1.643663619063111e-02, -5.732424582676768e-02, -3.845244176677378e-02, -4.509028074899137e-02, -4.509028074899137e-02, -4.232419530617255e+01, -3.970537642127420e+00, -5.655042472058358e+01, -2.231198563716506e-04, -2.441836340984094e+01, -2.441836340984094e+01, -2.503544946517707e+07, -1.007432462772445e+07, -3.050325575327302e+07, -2.476909918957996e+02, -1.446919878462234e+07, -1.446919878462229e+07, -1.148955201910287e-02, -1.873336036196814e-02, -1.583831876448493e-02, -1.374236724561135e-02, -1.475890417737890e-02, -1.475890417737890e-02, -1.134453213180693e-02, -8.306002548418719e-02, -7.847168877836021e-02, -6.612293104201779e-02, -7.826842967360020e-02, -7.826842967360020e-02, -1.522883448569829e-02, -1.661951014301567e+00, -8.505841118340240e-01, -3.100820018666203e-01, -5.167076573215976e-01, -5.167076573230226e-01, -1.119848751948415e-01, -1.710776322348772e+03, -5.421510141641984e+02, -3.818690880335407e-01, -1.038056427938197e+02, -1.038056427940879e+02, -3.034475022035657e+05, -1.695206090272381e+09, -9.550852781240615e+07, -1.305247717939702e+02, -1.966805242919245e+07, -1.966805242924647e+07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbrxh_bg_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbrxh_bg", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-9.952129698854824e-04, -9.952261154953534e-04, -9.952618960526200e-04, -9.950668417032717e-04, -9.951723369326722e-04, -9.951723369326722e-04, -3.803280954058413e-03, -3.804134553037293e-03, -3.824815497016183e-03, -3.798404390367757e-03, -3.809045512624169e-03, -3.809045512624169e-03, -1.124621086129501e-02, -1.114660227363284e-02, -8.900080848138692e-03, -9.026582318558109e-03, -9.076801687169558e-03, -9.076801687169558e-03, -1.136617474379129e-02, -1.207174832522455e-02, -8.825461941607991e-03, -6.246991497334657e-03, -8.350105090406401e-03, -8.350105090406389e-03, -1.351724415940434e-04, -1.481506542887397e-04, -9.127391847475012e-04, -6.682522176244468e-05, -9.976440252388333e-05, -9.976440252388377e-05, -4.056805919626000e-03, -4.041296280796923e-03, -4.056116656073395e-03, -4.042430608902323e-03, -4.048984743239916e-03, -4.048984743239916e-03, -3.071477449511806e-03, -3.127965675730433e-03, -2.930922645700362e-03, -2.978066178820319e-03, -3.175048594928404e-03, -3.175048594928404e-03, -2.899805476636950e-02, -2.702251612262631e-02, -2.568185561171057e-02, -3.830403965189044e-02, -3.180985917181606e-02, -3.180985917181606e-02, -3.144300037513813e-03, -6.609279620812133e-03, -2.920745316768968e-03, -1.024976218787160e-02, -4.994138382564169e-03, -4.994138382564169e-03, -5.724691166651869e-05, -7.109944341246020e-05, -1.410504921592538e-04, -1.961951382667264e-03, -1.158083917464252e-04, -1.158083917464247e-04, -2.016195869538667e-02, -2.441869403856304e-02, -2.273619885110232e-02, -2.149998107131659e-02, -2.210120220879901e-02, -2.210120220879901e-02, -2.025805072234339e-02, -1.871408426590103e-02, -2.840167611259848e-02, -4.098300858870165e-02, -3.664225758243877e-02, -3.664225758243877e-02, -2.777999959879174e-02, -8.219311549372305e-03, -1.109365440650316e-02, -2.156873452943114e-02, -1.545824840664011e-02, -1.545824840668275e-02, -1.925525151435711e-02, -8.153526560604617e-04, -1.245999671446058e-03, -3.141572911197211e-02, -3.112654402045651e-03, -3.112654402053694e-03, -1.817841402036250e-04, -3.615686187127863e-05, -5.775476959289009e-05, -2.816469642455442e-03, -1.200070545197033e-04, -1.200070545200325e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
