
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_revm06_l_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revm06_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.199405219712674e+01, -2.199417088681237e+01, -2.199469434610847e+01, -2.307168102896079e+01, -2.307243689585113e+01, -2.415114451803311e+01, -3.379353973945336e+00, -3.768467270174051e+00, -3.769639105920305e+00, -3.769505077639884e+00, -3.769133842491928e+00, -3.380223768120207e+00, -4.858669094208450e-01, -5.943731339106165e-01, -6.697685166892792e-01, -5.728681193377421e-01, -4.608744124530660e-01, -6.798667351389174e-01, -1.371737921000193e-01, -1.423573468513523e-01, -5.731597357093121e-01, -8.189360584360286e-02, -1.491538756642101e-01, -1.485245783981571e-01, -4.482967358498898e-03, -3.864924221200479e-03, -2.296392626369334e-02, -2.591854784057458e-03, -3.612273211065936e-03, -3.612273211065936e-03, -5.789877316483507e+00, -5.786238916576889e+00, -5.789663731412292e+00, -5.786454902767835e+00, -5.602000064179420e+00, -5.602164528101067e+00, -2.109077036312378e+00, -2.126274806928870e+00, -2.096515234168588e+00, -2.111644781277219e+00, -1.881219700014917e+00, -2.124748643133685e+00, -6.044903215346409e-01, -7.204227475182357e-01, -5.922105686302912e-01, -6.269628578949706e-01, -6.237131554429367e-01, -6.658151750577523e-01, -4.937507739956123e-02, -1.068564496546087e-01, -4.630307477577818e-02, -2.147283040499031e+00, -6.154035278952566e-02, -6.154035278952572e-02, -1.593571687771380e-03, -2.533978291170655e-03, -1.939259777377941e-03, -3.506596037664728e-02, -2.435342975129155e-03, -2.435342975129152e-03, -5.331608458397983e-01, -5.762948524222242e-01, -5.341871199403083e-01, -5.279419987883207e-01, -5.266454917011446e-01, -5.346236346181095e-01, -5.161263826246913e-01, -4.940826282441105e-01, -5.404029499197482e-01, -6.085481865952169e-01, -5.941958297069556e-01, -5.630539644806883e-01, -7.174969945988328e-01, -2.039534985358355e-01, -2.272995409691420e-01, -3.303657418868015e-01, -3.231965715263159e-01, -2.783345852630044e-01, -4.920713378634070e-01, -2.089230391261057e-02, -2.978805569158320e-02, -3.643685525487336e-01, -3.985461446266397e-02, -3.985461446266400e-02, -3.717710849409913e-03, -6.778924214579451e-04, -7.955067553740206e-04, -3.681400108511891e-02, -2.236925066809826e-03, -1.504509849068911e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_revm06_l_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revm06_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.240979465399663e+01, -3.240821545137824e+01, -3.240967380116347e+01, -3.240812778880991e+01, -3.240939222876535e+01, -3.240769392405712e+01, -3.241073847877750e+01, -3.020446013020760e+01, -3.240971143697891e+01, -3.020398160718344e+01, -3.020478741310944e+01, -3.020398160718344e+01, -4.597562090596664e+00, -5.007384301555819e+00, -4.597883516329845e+00, -4.597454339930660e+00, -4.604128581111962e+00, -4.605298083114856e+00, -4.602242058954484e+00, -4.602314724956860e+00, -4.596109490826062e+00, -4.608048392283115e+00, -5.006120141996177e+00, -4.608048392283114e+00, -8.981588288942348e-01, -9.003863037546508e-01, -8.971443655122809e-01, -9.190439971546858e-01, -9.496455318394493e-01, -9.513510696332292e-01, -9.362320555134280e-01, -8.859286205823020e-01, -9.064489668725282e-01, -8.550567918566088e-01, -9.191452487103422e-01, -9.578527036401212e-01, -2.181847050444478e-01, -2.757242777776200e-01, -2.237480382655336e-01, -2.755992397381818e-01, -1.242224682038535e+00, -1.045318218612114e+00, -1.439118321947354e-01, -1.618159398992507e-01, -2.854088549852554e-01, -6.071043884633797e-02, -2.854088549852559e-01, -3.012102433413094e-02, -5.756882631608867e-03, -6.111062178825752e-03, -3.697348030751000e-03, -6.447596758271282e-03, -3.321342444840706e-02, -2.926566175408976e-02, -3.479466568950910e-03, -3.421722434097208e-03, -5.144748009883716e-03, -2.937994734184339e-03, -5.144748009883716e-03, -2.937994734184149e-03, -6.407358363024177e+00, -6.405637453334063e+00, -6.378565979603186e+00, -6.377819810770920e+00, -6.405354541152794e+00, -6.404388083161609e+00, -6.380668667678931e+00, -6.379136478915125e+00, -6.846620996540162e+00, -6.391770240054716e+00, -6.392981347582525e+00, -6.845321069145157e+00, -2.492188147143548e+00, -2.493380349847234e+00, -2.525078103503319e+00, -2.525528826911443e+00, -2.466678090661865e+00, -2.474594925191870e+00, -2.492416191051595e+00, -2.501799078931138e+00, -2.532508628364365e+00, -2.722987535730571e+00, -2.532508628364365e+00, -2.513030920020658e+00, -8.411110583336441e-01, -9.116701771582553e-01, -8.937509473353031e-01, -8.855870999795064e-01, -7.102480316186311e-01, -7.655195405379454e-01, -7.908361361019585e-01, -8.264708610457435e-01, -8.840213550536622e-01, -9.042930085493734e-01, -8.840213550536622e-01, -8.337112505339750e-01, -5.819668655041089e-02, -5.911634604325503e-02, -1.742314281309660e-01, -2.640507433903440e-01, -5.028176160455652e-02, -5.439982653323790e-02, -2.777466984166803e+00, -2.776284728738751e+00, -8.554998984854574e-02, -1.161691875315446e-01, -8.554998984854610e-02, -1.161691875315440e-01, -1.469953175667385e-03, -2.716012868336913e-03, -3.348661041952811e-03, -3.399585596374496e-03, -2.501290808258870e-03, -2.647429544714661e-03, -3.726205517270334e-02, -3.669331307337380e-02, -2.559294481786813e-03, -3.502386167718108e-03, -2.559294481786939e-03, -3.502386167718116e-03, -7.620712751552259e-01, -7.842732198173981e-01, -5.081664432829546e-01, -5.090565835405461e-01, -5.485490580483922e-01, -5.554090697839220e-01, -6.086750701382910e-01, -6.017627667740545e-01, -5.711322311012431e-01, -5.808978262358868e-01, -5.711322311012432e-01, -5.586715589274677e-01, -6.627960280622305e-01, -6.824901521615951e-01, -6.852873899138007e-01, -7.505895202216184e-01, -7.440385634247773e-01, -8.087842733210743e-01, -7.455177827148591e-01, -7.464120762454254e-01, -7.594879043480600e-01, -7.618093032450197e-01, -7.594879043480600e-01, -8.201387889745687e-01, -9.628961129529600e-01, -1.031155021072114e+00, -3.514409365499724e-01, -3.529816452463732e-01, -3.532984948977940e-01, -3.802893089271138e-01, -4.757834871602371e-01, -4.430292477924498e-01, -3.881881656079182e-01, -3.875385254693659e-01, -3.881881656079182e-01, -4.028911088033543e-01, -6.002005584585041e-01, -6.101488979980840e-01, -3.259364916332212e-02, -3.281644481944074e-02, -3.391442159758869e-02, -3.435491695627164e-02, -4.381729896228110e-01, -4.620556900326642e-01, -4.274662561342424e-02, -4.665989926333726e-02, -4.274662561342479e-02, -4.665989926333663e-02, -5.160587034636647e-03, -5.383379991091914e-03, -9.027381961444109e-04, -9.048011014123328e-04, -1.032149948872514e-03, -1.100160878175064e-03, -2.756659803384585e-02, -2.557197702129381e-02, -2.422600635253704e-03, -3.212519943811899e-03, -2.422600635253718e-03, -1.875118146641097e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revm06_l_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revm06_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.929458795771783e-08, 0.000000000000000e+00, -2.929528405712160e-08, -2.929428942595807e-08, 0.000000000000000e+00, -2.929506704304544e-08, -2.929322963916235e-08, 0.000000000000000e+00, -2.929357752043450e-08, -2.929660896776458e-08, 0.000000000000000e+00, -2.537269417498937e-08, -2.929441726327598e-08, 0.000000000000000e+00, -2.537182101191092e-08, -2.537010397829028e-08, 0.000000000000000e+00, -2.537182101191092e-08, -2.404091309381477e-05, 0.000000000000000e+00, -3.557140052037066e-05, -2.404481098824937e-05, 0.000000000000000e+00, -2.404142013560261e-05, -2.412102883765554e-05, 0.000000000000000e+00, -2.413365891250384e-05, -2.408518993161014e-05, 0.000000000000000e+00, -2.408394791742539e-05, -2.404763797017333e-05, 0.000000000000000e+00, -2.415082430781145e-05, -3.559005761803623e-05, 0.000000000000000e+00, -2.415082430781145e-05, -2.123105372924137e-02, 0.000000000000000e+00, -2.112029559987714e-02, -2.129673931896749e-02, 0.000000000000000e+00, -1.010444215710632e-02, -9.565031323441789e-03, 0.000000000000000e+00, -9.586288941128214e-03, -9.908543086460605e-03, 0.000000000000000e+00, -2.216193218056127e-02, -2.062041208360577e-02, 0.000000000000000e+00, -2.373621526482073e-02, -9.989305244117721e-03, 0.000000000000000e+00, -9.559691633918647e-03, -3.911228042675849e+00, 0.000000000000000e+00, -1.385410194798717e+00, -3.833272256314842e+00, 0.000000000000000e+00, -1.400209439014903e+00, -2.539531464302229e-03, 0.000000000000000e+00, -8.618986282285874e-03, -6.170701285882187e-01, 0.000000000000000e+00, -7.981846322726652e-01, -1.085628929728415e+00, 0.000000000000000e+00, -2.232082816007801e-01, -1.085628929728415e+00, 0.000000000000000e+00, -6.983955636651623e+00, 1.282145041027913e+00, 0.000000000000000e+00, 1.284372712652547e+00, -1.073274391217199e+06, 0.000000000000000e+00, 1.339906353322923e+00, -8.745246044246137e+02, 0.000000000000000e+00, 3.863698607928311e-01, 9.494083768555153e-01, 0.000000000000000e+00, 9.592696158806793e-01, 1.222502353616067e+00, 0.000000000000000e+00, 2.108187947750619e+00, 1.222502353616067e+00, 0.000000000000000e+00, 2.108187947750629e+00, -7.611258524275886e-06, 0.000000000000000e+00, -7.618590409949366e-06, -7.611052068176476e-06, 0.000000000000000e+00, -7.618394290962203e-06, -7.611299199356791e-06, 0.000000000000000e+00, -7.618621098087936e-06, -7.611119102759481e-06, 0.000000000000000e+00, -7.618439869669526e-06, -8.405964575490826e-06, 0.000000000000000e+00, -7.618503572176726e-06, -7.611136487286002e-06, 0.000000000000000e+00, -8.414178819610838e-06, -2.116276719759969e-04, 0.000000000000000e+00, -2.122413771571774e-04, -2.109696673817692e-04, 0.000000000000000e+00, -2.115844255285074e-04, -2.117213982820943e-04, 0.000000000000000e+00, -2.123112814541062e-04, -2.113637215520684e-04, 0.000000000000000e+00, -2.118860121748867e-04, -2.111249228133516e-04, 0.000000000000000e+00, -3.356656912869374e-04, -2.111249228133516e-04, 0.000000000000000e+00, -2.119569329975074e-04, -3.704710174436531e-02, 0.000000000000000e+00, -4.832831844559737e-02, -3.230273353238167e-02, 0.000000000000000e+00, -3.250342345384247e-02, -4.449710970051839e-02, 0.000000000000000e+00, -4.249656506428487e-02, -4.561239052288986e-02, 0.000000000000000e+00, -4.231296253680682e-02, -3.386931238520560e-02, 0.000000000000000e+00, -5.028453168465259e-02, -3.386931238520561e-02, 0.000000000000000e+00, -3.942318879808034e-02, -2.788574179315428e-01, 0.000000000000000e+00, -2.849448368066598e-01, -2.605833006804090e+00, 0.000000000000000e+00, -5.874706359927289e-01, -1.964960195885573e-01, 0.000000000000000e+00, -2.699602370604182e-01, -3.466998762666854e-04, 0.000000000000000e+00, -3.474152407547597e-04, -6.104771891304835e-01, 0.000000000000000e+00, -1.070511757582116e+00, -6.104771891304843e-01, 0.000000000000000e+00, -1.070511757582118e+00, -3.140336482565568e+07, 0.000000000000000e+00, 6.370378869681530e-01, 9.010094669711440e-01, 0.000000000000000e+00, 7.943192991274535e-01, 6.474262611781698e+00, 0.000000000000000e+00, 7.098531684860751e+00, 6.751104804222634e-02, 0.000000000000000e+00, -5.923338252238999e+01, 1.224314669092174e+00, 0.000000000000000e+00, 3.860499122278696e+00, 1.224314669092172e+00, 0.000000000000000e+00, 3.860499122278705e+00, -4.616845298918244e-02, 0.000000000000000e+00, -4.557991055214307e-02, -4.765189793945983e-02, 0.000000000000000e+00, -4.685058192265241e-02, -4.883499349847156e-02, 0.000000000000000e+00, -4.796680506463478e-02, -4.779254567767086e-02, 0.000000000000000e+00, -4.535510393306428e-02, -4.827064370926108e-02, 0.000000000000000e+00, -4.744242157349746e-02, -4.827064370926108e-02, 0.000000000000000e+00, -4.559757964793392e-02, -5.106091603097895e-02, 0.000000000000000e+00, -5.045988352395250e-02, -6.922747487713267e-02, 0.000000000000000e+00, -9.264991939563795e-02, -6.710636434380338e-02, 0.000000000000000e+00, -8.190998943986041e-02, -6.432661013591852e-02, 0.000000000000000e+00, -6.353194910486720e-02, -6.590440538511638e-02, 0.000000000000000e+00, -6.514203571319201e-02, -6.590440538511638e-02, 0.000000000000000e+00, -7.727116422321421e-02, -2.552901449210336e-02, 0.000000000000000e+00, -3.021913804657739e-02, -4.757281830130212e-01, 0.000000000000000e+00, -4.732229828364433e-01, -8.564310354527944e-01, 0.000000000000000e+00, -3.679752985530269e-01, -3.430937602115844e-01, 0.000000000000000e+00, -2.079980655378735e-01, -2.982872684386295e-01, 0.000000000000000e+00, -3.003816696852579e-01, -2.982872684386297e-01, 0.000000000000000e+00, -5.538465234590360e-01, -8.550112243453335e-02, 0.000000000000000e+00, -8.521859435758963e-02, -9.469888764507990e+02, 0.000000000000000e+00, -9.204147322317983e+02, 2.392731912741061e-01, 0.000000000000000e+00, 2.231139593898061e-01, -2.846356837545826e-01, 0.000000000000000e+00, -2.952030494056215e-01, -2.542324889029559e-01, 0.000000000000000e+00, -5.038567552695711e-01, -2.542324889029556e-01, 0.000000000000000e+00, -5.038567552695724e-01, -3.086670267902655e+05, 0.000000000000000e+00, -2.675683342453226e+05, 1.040161195518353e+00, 0.000000000000000e+00, 1.035586891050594e+00, -1.292215528116129e+08, 0.000000000000000e+00, -1.009762840504249e+08, -2.532259330275237e+01, 0.000000000000000e+00, -2.394623929170872e+01, 3.155622030448634e+00, 0.000000000000000e+00, 4.008221292550585e+00, 3.155622030448633e+00, 0.000000000000000e+00, -1.356833601890804e+07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revm06_l_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revm06_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.808418535364598e-03, 1.807607933755065e-03, 1.808293451606360e-03, 1.807517102335126e-03, 1.807936716299398e-03, 1.806993044717023e-03, 1.809339657286402e-03, 1.968876021399899e-03, 1.808338655312066e-03, 1.968121709991749e-03, 1.968382729186030e-03, 1.968121709991749e-03, 9.626247308402827e-03, 7.670863084378655e-03, 9.629342498458218e-03, 9.625853263259541e-03, 9.689791303527831e-03, 9.700555474176913e-03, 9.666945251748755e-03, 9.666891881483949e-03, 9.620895959519890e-03, 9.721430367848801e-03, 7.667631133997586e-03, 9.721430367848801e-03, 2.404115313414103e-02, 2.395806778357298e-02, 2.407445450722805e-02, 3.667111110882916e-02, 3.853234689590659e-02, 3.886683174153455e-02, 3.818405718614303e-02, 2.439519604404713e-02, 2.378327902793503e-02, 2.457770169001896e-02, 3.621276135293238e-02, 3.982398723418857e-02, 7.658766285452963e-02, 1.405087794306605e-01, 7.882006480646007e-02, 1.399215749451465e-01, 2.749347136202884e-02, 1.765553490480444e-02, 4.019850073281731e-02, 5.565350433333817e-02, 1.304341485755117e-01, -1.494705663817419e-03, 1.304341485755118e-01, -1.591478541785889e-02, -2.323128370473725e-05, -2.795571059489617e-05, 1.484712647396246e-04, -3.443155519546116e-05, 2.812331644911330e-03, -2.174458113359321e-03, -3.713760852503867e-06, -3.567592814890755e-06, -1.569452924791431e-05, -4.967750411871553e-06, -1.569452924791431e-05, -4.967750411902153e-06, -5.269979312843121e-03, -5.274264406340760e-03, -5.757715066887419e-03, -5.745671608882543e-03, -5.303638710593634e-03, -5.295242150043270e-03, -5.721817111613480e-03, -5.723172076174911e-03, -5.431795263518325e-03, -5.508868089122981e-03, -5.513202906769004e-03, -5.427662927606765e-03, 1.399254045612097e-02, 1.404191872417229e-02, 1.439593497528893e-02, 1.443788674661577e-02, 1.367375744745031e-02, 1.380350138581301e-02, 1.398101447087868e-02, 1.413349950462495e-02, 1.450756142221528e-02, 1.081791418100382e-02, 1.450756142221528e-02, 1.428842379414291e-02, 8.362817409836343e-02, 7.401695553330226e-02, 6.024227938975726e-02, 5.333992258262070e-02, 6.529530434547391e-02, 7.568707886313819e-02, 8.642737906887044e-02, 8.876550923310686e-02, 8.501468416508719e-02, 7.542072014513389e-02, 8.501468416508719e-02, 8.597790794445229e-02, -1.364332058421145e-03, -1.020847345167913e-03, 3.815369299336024e-02, 8.685301893507635e-02, -4.174761902362274e-03, -2.511012888035712e-03, 2.703072642408468e-02, 2.704624566698746e-02, 1.483902418507734e-02, 4.098258551521143e-02, 1.483902418507655e-02, 4.098258551521141e-02, 6.419990149460156e-06, -1.179209231969620e-06, -3.138606054187740e-06, -2.894270384060722e-06, -9.441604015332730e-06, -1.230377174525959e-05, -5.372371930146136e-03, -6.992059704390610e-03, -1.898397221139463e-06, -1.556610347063331e-05, -1.898397221104377e-06, -1.556610347063331e-05, 3.424473851901492e-01, 4.228632582945316e-01, -4.321289078909424e-01, -4.360810794239630e-01, -4.199945815193050e-01, -4.082335573469392e-01, -2.640195044519677e-01, -2.358067289941538e-01, -3.674558526223084e-01, -3.464572659658547e-01, -3.674558526223084e-01, -3.518901798868692e-01, 2.762315104825645e-02, 9.468384689438435e-02, 8.786757968093339e-02, 7.492711588508667e-02, 1.007659459915176e-01, 8.979521763419655e-02, 6.165480810126771e-02, 5.945223016062663e-02, 9.682105609918158e-02, 9.595848859834014e-02, 9.682105609918158e-02, 8.732550691140580e-02, 7.541557843115747e-02, 6.584075144577896e-02, 1.062892887833997e-01, 1.064143306246342e-01, 6.087686088274138e-02, 9.510863497976579e-02, 5.797762348821565e-02, 7.750888165646599e-02, 7.942551917913555e-02, 7.947856780863317e-02, 7.942551917913561e-02, 5.462854272199458e-02, 7.588948268726259e-02, 7.889964168770969e-02, 2.859844106834398e-03, 2.842309871463078e-03, -3.197011977624883e-03, -3.528423618615224e-03, 9.892711670426034e-02, 1.168652632820648e-01, -5.421626409686592e-03, -2.892133635024392e-03, -5.421626409686872e-03, -2.892133635024394e-03, 1.727139120872818e-04, 1.883787156346773e-04, -7.039682165184673e-08, -7.056893707188109e-08, 9.237061990328367e-06, 1.175721080549731e-05, -1.611757821320231e-02, -1.798240958700781e-02, -4.161435268453858e-06, -1.243466214925503e-05, -4.161435268482086e-06, 6.858052521617940e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
