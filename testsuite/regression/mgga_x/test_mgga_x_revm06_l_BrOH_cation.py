
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_revm06_l_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revm06_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.402180914424071e+01, -2.402188199533445e+01, -2.402229174816054e+01, -2.402121013311374e+01, -2.402176472914221e+01, -2.402176472914221e+01, -3.370495268171767e+00, -3.370612047872821e+00, -3.373985166524395e+00, -3.375113605789224e+00, -3.373733522516793e+00, -3.373733522516793e+00, -5.816982741092573e-01, -5.808998796705839e-01, -5.617576504390811e-01, -5.799397521578744e-01, -5.748835463881610e-01, -5.748835463881610e-01, -1.626747967404514e-01, -1.674562486741376e-01, -5.241998145311211e-01, -7.917151544292703e-02, -1.454239237956457e-01, -1.454239237956456e-01, -4.482980975283956e-03, -4.718550632059665e-03, -2.396142696601361e-02, -2.591895030268564e-03, -3.612322790616978e-03, -3.612322790616977e-03, -5.787587988039742e+00, -5.783976398374893e+00, -5.787422050451328e+00, -5.784234833799778e+00, -5.785777998942589e+00, -5.785777998942589e+00, -2.058182329419797e+00, -2.082391173003578e+00, -2.052584041344557e+00, -2.074306500756096e+00, -2.074410795883212e+00, -2.074410795883212e+00, -6.179492438596497e-01, -6.798281856972517e-01, -5.410767593764898e-01, -5.604051681559240e-01, -6.342207533456166e-01, -6.342207533456166e-01, -4.908152320640692e-02, -1.313306449480398e-01, -4.612081568336354e-02, -1.931537797309763e+00, -6.072319128827142e-02, -6.072319128827150e-02, -2.002197110008320e-03, -2.534080523957889e-03, -1.939313332208951e-03, -3.438466745224276e-02, -2.435414791430027e-03, -2.435414791430023e-03, -5.284806981421248e-01, -5.716992663242062e-01, -5.472831191277590e-01, -5.306012443506812e-01, -5.380964421738790e-01, -5.380964421738790e-01, -5.071079357571545e-01, -5.361095336702610e-01, -5.709384045616430e-01, -6.007607845838057e-01, -5.869898886420311e-01, -5.869898886420311e-01, -7.018783908349224e-01, -2.016389452900601e-01, -2.641733740165074e-01, -3.494124707115451e-01, -3.104139219826239e-01, -3.104139219826240e-01, -4.726943967323814e-01, -2.304368868124672e-02, -2.982718848537189e-02, -3.419375750454181e-01, -3.973818837101031e-02, -3.973818837101034e-02, -6.311650195450776e-03, -6.779127899414039e-04, -1.424890470513028e-03, -3.770586381102652e-02, -2.236996121111459e-03, -2.236996121111453e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_revm06_l_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revm06_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.031501901878467e+01, -3.031326278630256e+01, -3.031492047401298e+01, -3.031319133197523e+01, -3.031464403660726e+01, -3.031278337414677e+01, -3.031573829423512e+01, -3.031418636931415e+01, -3.031495175290100e+01, -3.031365647246056e+01, -3.031495175290100e+01, -3.031365647246056e+01, -4.716387907599765e+00, -4.716306502766644e+00, -4.716749975241529e+00, -4.716564176169710e+00, -4.724076403287023e+00, -4.725513402141414e+00, -4.720589251101767e+00, -4.720929530707441e+00, -4.714797738363435e+00, -4.727608432970204e+00, -4.714797738363435e+00, -4.727608432970204e+00, -8.656905640132866e-01, -8.652607074873377e-01, -8.655433253718673e-01, -8.652371242125788e-01, -8.674413051939559e-01, -8.670182357187665e-01, -8.654244985902848e-01, -8.634620593936694e-01, -8.698852681871528e-01, -8.770443409385827e-01, -8.698852681871528e-01, -8.770443409385827e-01, -2.671446689985276e-01, -2.735011796877141e-01, -2.681246609577047e-01, -2.728231500650132e-01, -9.675086176413418e-01, -1.046683125954997e+00, -1.325229185384441e-01, -1.541016223055940e-01, -2.775002138586985e-01, -5.723409421180784e-02, -2.775002138586989e-01, -5.723409421180833e-02, -5.757019771401905e-03, -6.111131759303332e-03, -6.027202803001831e-03, -6.447781069902276e-03, -2.848965746172213e-02, -2.939362348039213e-02, -3.479770470354700e-03, -3.421963018619699e-03, -5.145047192223890e-03, -2.938580623357971e-03, -5.145047192223891e-03, -2.938580623357780e-03, -6.409924269090772e+00, -6.408055699472282e+00, -6.381115065795723e+00, -6.380221164113955e+00, -6.407860882870015e+00, -6.406763502905345e+00, -6.383162598545718e+00, -6.381498575088132e+00, -6.395583143535760e+00, -6.394187437677036e+00, -6.395583143535760e+00, -6.394187437677036e+00, -2.488123922701686e+00, -2.489576564898716e+00, -2.523109150471801e+00, -2.523684875682870e+00, -2.461158861255204e+00, -2.469703902839962e+00, -2.488897925009806e+00, -2.498829165808043e+00, -2.531177673928819e+00, -2.510522475212532e+00, -2.531177673928819e+00, -2.510522475212532e+00, -8.598463928864497e-01, -8.584898482275171e-01, -9.344408547521538e-01, -9.255267941133666e-01, -7.277534512342274e-01, -7.852278218663411e-01, -8.374211991233707e-01, -8.715607292439556e-01, -9.028577454199426e-01, -8.545330279582853e-01, -9.028577454199423e-01, -8.545330279582855e-01, -5.694133722914110e-02, -5.766184725948480e-02, -2.569490000260878e-01, -2.584383167487885e-01, -4.957159720274377e-02, -5.338416434920609e-02, -2.946677236226801e+00, -2.945449698910099e+00, -8.286073218752131e-02, -1.127041644886376e-01, -8.286073218752171e-02, -1.127041644886372e-01, -2.614144983521245e-03, -2.716576821096388e-03, -3.349264073170410e-03, -3.400251358128358e-03, -2.501597023342485e-03, -2.647833267457361e-03, -3.760315832125773e-02, -3.699574179486254e-02, -2.560438137598066e-03, -3.502504636142964e-03, -2.560438137598192e-03, -3.502504636142972e-03, -7.676553364429766e-01, -7.896635893103152e-01, -5.146872297216615e-01, -5.154263205341946e-01, -5.293055599446550e-01, -5.366605851740525e-01, -5.949401588623039e-01, -6.077615931573698e-01, -5.546451607504561e-01, -5.648435443550851e-01, -5.546451607504561e-01, -5.648435443550849e-01, -6.743923267430657e-01, -6.935742825246324e-01, -6.865228327841528e-01, -6.910314539329405e-01, -7.475173124586504e-01, -7.512681280701353e-01, -7.527078736746865e-01, -7.536255811851640e-01, -7.649349043375437e-01, -7.671311585610426e-01, -7.649349043375437e-01, -7.671311585610427e-01, -1.010641456729339e+00, -1.005830713200349e+00, -3.471518912282766e-01, -3.485599016557140e-01, -3.737482878158558e-01, -3.729140865587884e-01, -4.403559887840816e-01, -4.430712838033985e-01, -3.828240118548458e-01, -3.822825100168599e-01, -3.828240118548462e-01, -3.822825100168600e-01, -6.037511622268023e-01, -6.139628205784048e-01, -2.792579030678353e-02, -2.811306089379111e-02, -3.415820535896346e-02, -3.459403285237445e-02, -4.438177513526680e-01, -4.678554781842609e-01, -4.244510205497837e-02, -4.593706835692830e-02, -4.244510205497892e-02, -4.593706835692767e-02, -8.215771055981732e-03, -8.508709918943416e-03, -9.028104139015741e-04, -9.049204140290525e-04, -1.835055199922511e-03, -1.951360852006420e-03, -4.071294443854617e-02, -4.168061526448497e-02, -2.423746560889297e-03, -3.212615414584117e-03, -2.423746560889311e-03, -3.212615414583973e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revm06_l_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revm06_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.559706606427755e-08, 0.000000000000000e+00, -2.559768211585082e-08, -2.559691939341592e-08, 0.000000000000000e+00, -2.559757537734314e-08, -2.559620575846567e-08, 0.000000000000000e+00, -2.559662100462058e-08, -2.559787288344090e-08, 0.000000000000000e+00, -2.559874310436821e-08, -2.559699272997071e-08, 0.000000000000000e+00, -2.559771479488351e-08, -2.559699272997071e-08, 0.000000000000000e+00, -2.559771479488351e-08, -2.961066027821362e-05, 0.000000000000000e+00, -2.961743991580556e-05, -2.961301141366698e-05, 0.000000000000000e+00, -2.961978988840075e-05, -2.966761186310979e-05, 0.000000000000000e+00, -2.967819450305495e-05, -2.960397440467916e-05, 0.000000000000000e+00, -2.960973558385524e-05, -2.962363398318339e-05, 0.000000000000000e+00, -2.965620692590050e-05, -2.962363398318339e-05, 0.000000000000000e+00, -2.965620692590050e-05, -1.563667661010022e-02, 0.000000000000000e+00, -1.578878349122547e-02, -1.560422902997000e-02, 0.000000000000000e+00, -1.577879437910627e-02, -1.504178268269417e-02, 0.000000000000000e+00, -1.487787345310631e-02, -1.491168852427208e-02, 0.000000000000000e+00, -1.505248790258111e-02, -1.575332055897445e-02, 0.000000000000000e+00, -1.355978770023983e-02, -1.575332055897445e-02, 0.000000000000000e+00, -1.355978770023983e-02, -1.378433428516292e+00, 0.000000000000000e+00, -1.424026119788294e+00, -1.415900481195010e+00, 0.000000000000000e+00, -1.450122508370970e+00, -6.345015674902658e-03, 0.000000000000000e+00, -6.753326315877137e-03, -8.092884282214000e-01, 0.000000000000000e+00, -9.409902979342820e-01, -1.191893474122271e+00, 0.000000000000000e+00, -1.544008746969154e-01, -1.191893474122270e+00, 0.000000000000000e+00, -1.544008746969185e-01, 1.368873175149536e+00, 0.000000000000000e+00, 1.321103210078697e+00, 1.477991230211025e+00, 0.000000000000000e+00, 1.424494653974831e+00, 7.675904505148569e-01, 0.000000000000000e+00, 6.916585573220189e-01, 1.722035541565481e+00, 0.000000000000000e+00, 1.602731916109627e+00, 1.483109813494200e+00, 0.000000000000000e+00, 5.912660452242058e+00, 1.483109813494212e+00, 0.000000000000000e+00, 5.912660452242092e+00, -7.616155883665594e-06, 0.000000000000000e+00, -7.623211488212102e-06, -7.615890170815870e-06, 0.000000000000000e+00, -7.622958333180774e-06, -7.616081106758753e-06, 0.000000000000000e+00, -7.623159303822214e-06, -7.615854546770447e-06, 0.000000000000000e+00, -7.622930510244038e-06, -7.616088348606103e-06, 0.000000000000000e+00, -7.623110147625428e-06, -7.616088348606103e-06, 0.000000000000000e+00, -7.623110147625428e-06, -2.233216665983280e-04, 0.000000000000000e+00, -2.235704049107051e-04, -2.207540474319426e-04, 0.000000000000000e+00, -2.210899543370201e-04, -2.217384993291598e-04, 0.000000000000000e+00, -2.225010724107232e-04, -2.196738415130976e-04, 0.000000000000000e+00, -2.203222546966909e-04, -2.228419524840108e-04, 0.000000000000000e+00, -2.224539842074562e-04, -2.228419524840108e-04, 0.000000000000000e+00, -2.224539842074562e-04, -4.064885875460930e-02, 0.000000000000000e+00, -4.122777679802042e-02, -3.545322537116066e-02, 0.000000000000000e+00, -3.552885578556863e-02, -5.382470135373109e-02, 0.000000000000000e+00, -4.910814805383260e-02, -5.595494535449456e-02, 0.000000000000000e+00, -5.012541758717749e-02, -3.640574408455553e-02, 0.000000000000000e+00, -4.345414961485033e-02, -3.640574408455555e-02, 0.000000000000000e+00, -4.345414961485033e-02, -2.593556079676558e-01, 0.000000000000000e+00, -2.671475687637122e-01, -6.353350960094238e-01, 0.000000000000000e+00, -6.313467383236898e-01, -1.134156911917202e-01, 0.000000000000000e+00, -2.333354010559700e-01, -4.114447992000114e-04, 0.000000000000000e+00, -4.122565542481880e-04, -6.740910738873264e-01, 0.000000000000000e+00, -1.186738716385013e+00, -6.740910738873271e-01, 0.000000000000000e+00, -1.186738716385015e+00, 4.014811886180349e+00, 0.000000000000000e+00, 3.366258987542064e+00, 2.637132152930034e+00, 0.000000000000000e+00, 2.527549227842016e+00, 1.194681493050144e+01, 0.000000000000000e+00, 1.347709463623749e+01, 4.624224399339797e-01, 0.000000000000000e+00, 2.670939206132175e-01, 1.114751291979934e+01, 0.000000000000000e+00, 4.441258189759897e+00, 1.114751291979928e+01, 0.000000000000000e+00, 4.441258189759902e+00, -4.672037072182738e-02, 0.000000000000000e+00, -4.610998200440217e-02, -4.820440697143707e-02, 0.000000000000000e+00, -4.737938142110922e-02, -4.725414237846603e-02, 0.000000000000000e+00, -4.644931057144411e-02, -4.661525876754688e-02, 0.000000000000000e+00, -4.587661564121268e-02, -4.689486419660514e-02, 0.000000000000000e+00, -4.611972441019244e-02, -4.689486419660514e-02, 0.000000000000000e+00, -4.611972441019244e-02, -5.228669349548996e-02, 0.000000000000000e+00, -5.162837053205237e-02, -7.023442328176846e-02, 0.000000000000000e+00, -6.944942320661686e-02, -6.833117276804022e-02, 0.000000000000000e+00, -6.752876241851502e-02, -6.569025966028486e-02, 0.000000000000000e+00, -6.486913454611636e-02, -6.730150534479352e-02, 0.000000000000000e+00, -6.647142747740728e-02, -6.730150534479352e-02, 0.000000000000000e+00, -6.647142747740728e-02, -2.875704782797500e-02, 0.000000000000000e+00, -2.881003930917460e-02, -4.955440829085675e-01, 0.000000000000000e+00, -4.934902058455892e-01, -3.985352139256347e-01, 0.000000000000000e+00, -3.969738415971777e-01, -2.450886234768419e-01, 0.000000000000000e+00, -2.407283653501662e-01, -3.287802028405208e-01, 0.000000000000000e+00, -3.311445358191765e-01, -3.287802028405209e-01, 0.000000000000000e+00, -3.311445358191767e-01, -9.290728462576611e-02, 0.000000000000000e+00, -9.183678256964375e-02, 5.652796515687599e-01, 0.000000000000000e+00, 5.869173885608095e-01, 5.517194808629270e-01, 0.000000000000000e+00, 5.177773075330477e-01, -3.300172435595130e-01, 0.000000000000000e+00, -3.252922954252149e-01, -1.375735336332020e-01, 0.000000000000000e+00, -4.510989192463979e-01, -1.375735336332008e-01, 0.000000000000000e+00, -4.510989192464000e-01, 1.907563588707673e+00, 0.000000000000000e+00, 1.999685330693328e+00, 1.544468491125717e+01, 0.000000000000000e+00, 2.787224351521158e+01, 3.926432062998600e+00, 0.000000000000000e+00, 4.206683668520763e+00, -1.709062817377123e-01, 0.000000000000000e+00, -3.537395820183371e-01, 2.108702240289225e+01, 0.000000000000000e+00, 4.626788708360866e+00, 2.108702240289228e+01, 0.000000000000000e+00, 4.626788708360905e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revm06_l_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revm06_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_revm06_l_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_revm06_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.958865075886859e-03, 1.958008654603789e-03, 1.958727983077888e-03, 1.957909104890320e-03, 1.958341696717567e-03, 1.957340184694921e-03, 1.959879567943899e-03, 1.959305527156320e-03, 1.958777412493877e-03, 1.958559812037578e-03, 1.958777412493877e-03, 1.958559812037578e-03, 8.629477884455677e-03, 8.625711936933976e-03, 8.632683848776255e-03, 8.627683748248719e-03, 8.693869656464156e-03, 8.704427339984890e-03, 8.676570366021636e-03, 8.675286367887025e-03, 8.623850401517846e-03, 8.730609869886130e-03, 8.623850401517846e-03, 8.730609869886130e-03, 2.977388037291451e-02, 2.942566555031202e-02, 2.990082633075115e-02, 2.947079849679955e-02, 3.147023221236702e-02, 3.205639684181419e-02, 3.176068055065780e-02, 3.158956205841587e-02, 2.883767601786815e-02, 3.462433330304348e-02, 2.883767601786815e-02, 3.462433330304348e-02, 1.321486071381898e-01, 1.392354853676983e-01, 1.332015517312191e-01, 1.382547691914842e-01, 1.847984726956532e-02, 2.105585188286999e-02, 3.568292019912885e-02, 5.243769031594493e-02, 1.266150775199995e-01, -4.176418469495115e-03, 1.266150775199996e-01, -4.176418469495122e-03, -2.331737407656280e-05, -2.799987318619755e-05, -2.786232429612870e-05, -3.455072277892442e-05, -1.898435644310031e-03, -2.253898229810730e-03, -3.858100266165990e-06, -3.684617809305638e-06, -1.587243324775588e-05, -5.339748215061345e-06, -1.587243324775588e-05, -5.339748215091944e-06, -5.269536997876151e-03, -5.273846617187337e-03, -5.757154662059262e-03, -5.745146535020201e-03, -5.303198413191657e-03, -5.294826884427798e-03, -5.721277501115666e-03, -5.722660733739993e-03, -5.512692685474792e-03, -5.508395152248717e-03, -5.512692685474792e-03, -5.508395152248717e-03, 1.362910796458965e-02, 1.368938588153372e-02, 1.408117774590300e-02, 1.413198331363136e-02, 1.336957996928436e-02, 1.349178820838690e-02, 1.372152716133030e-02, 1.386779259681544e-02, 1.412894299400806e-02, 1.395511299351498e-02, 1.412894299400806e-02, 1.395511299351498e-02, 7.986136469305403e-02, 8.093083455246368e-02, 5.700289517961939e-02, 5.047174277263769e-02, 5.915786495644989e-02, 7.036842155720865e-02, 7.766012302278519e-02, 8.126244369903705e-02, 8.198715668191126e-02, 8.189618286574531e-02, 8.198715668191126e-02, 8.189618286574532e-02, -2.418185399155670e-03, -2.199640840637721e-03, 8.489742347868559e-02, 8.502126066325168e-02, -5.190009369565339e-03, -3.522687034461038e-03, 2.469672895923048e-02, 2.471194057692989e-02, 1.337824087359490e-02, 3.913559501665780e-02, 1.337824087359412e-02, 3.913559501665780e-02, -1.310066736475856e-06, -1.341477751132998e-06, -3.385754581120915e-06, -3.144581708407204e-06, -9.820836183207270e-06, -1.282470673700168e-05, -5.925230175342738e-03, -6.135625162471079e-03, -2.271269921871785e-06, -1.569222675365215e-05, -2.271269921836702e-06, -1.569222675365215e-05, 3.405393250846706e-01, 4.206068709479293e-01, -4.302029810918985e-01, -4.341845765022019e-01, -4.255562610141013e-01, -4.135064801910503e-01, -2.665527457328319e-01, -2.348111096300320e-01, -3.716905403148473e-01, -3.503424572949236e-01, -3.716905403148473e-01, -3.503424572949242e-01, 2.701352687567871e-02, 9.343651264717477e-02, 8.726901058800600e-02, 8.781895975503445e-02, 9.988002002865205e-02, 9.973877017665848e-02, 6.087763185580171e-02, 5.869851689524357e-02, 9.579095523072638e-02, 9.497239360697766e-02, 9.579095523072638e-02, 9.497239360697766e-02, 7.072583208282297e-02, 6.773903265602155e-02, 1.049414909313286e-01, 1.050213278027076e-01, 9.362979998725438e-02, 9.238147361761408e-02, 7.225514382907687e-02, 7.193041247444426e-02, 7.589883196770435e-02, 7.593317032587350e-02, 7.589883196770439e-02, 7.593317032587356e-02, 7.284775174198618e-02, 7.606458467857632e-02, -1.847385552099363e-03, -1.853291752980913e-03, -3.368246643578985e-03, -3.714245708143463e-03, 9.174629633526490e-02, 1.114084499508506e-01, -6.164428901134740e-03, -3.865441548581347e-03, -6.164428901135019e-03, -3.865441548581349e-03, -3.545478894393474e-05, -3.906485057924324e-05, -8.742152695000391e-08, -8.838448369824541e-08, -1.673487856895962e-06, -2.134235325604334e-06, -6.347566703077973e-03, -5.415183315318777e-03, -4.839828741627262e-06, -1.253794149645488e-05, -4.839828741655488e-06, -1.253794149658694e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
