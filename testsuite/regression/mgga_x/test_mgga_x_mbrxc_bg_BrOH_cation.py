
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mbrxc_bg_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbrxc_bg", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.204965530901396e+01, -2.204961424690362e+01, -2.204960588144408e+01, -2.205021273909025e+01, -2.204986999025903e+01, -2.204986999025903e+01, -3.851674862374087e+00, -3.851524002583744e+00, -3.848051018157123e+00, -3.853953508136274e+00, -3.851175772399297e+00, -3.851175772399297e+00, -8.395642555768124e-01, -8.411232515852948e-01, -8.856113311464262e-01, -8.880745064725417e-01, -8.929258807476111e-01, -8.929258807476111e-01, -3.579130392700164e-01, -3.516629311996037e-01, -9.779860927852877e-01, -4.138325322580071e-01, -3.832920890327289e-01, -3.832920890325952e-01, -2.484528111544500e+00, -2.330230020513252e+00, -8.654792807835332e-01, -3.998865002103236e+00, -2.793194908122048e+00, -2.793194908121053e+00, -5.146740693719590e+00, -5.143091333193311e+00, -5.146591820100945e+00, -5.143369693337577e+00, -5.144877452077960e+00, -5.144877452077960e+00, -2.670586809521441e+00, -2.670340595920943e+00, -2.699600062082058e+00, -2.699141821311820e+00, -2.656670202100047e+00, -2.656670202100047e+00, -6.272965901495094e-01, -6.011413134489896e-01, -5.977975254611101e-01, -5.448153515038709e-01, -6.258016673730958e-01, -6.258016673730676e-01, -5.223332396318447e-01, -4.609910067852226e-01, -5.300549569893935e-01, -1.818724983385471e+00, -4.270715768008349e-01, -4.270715768008349e-01, -4.347103687235943e+00, -3.785417873560402e+00, -2.053633317223531e+00, -5.931242413561939e-01, -2.450918053301361e+00, -2.450918053301673e+00, -5.421719978587078e-01, -5.486310028115184e-01, -5.460014468879921e-01, -5.441228710824100e-01, -5.450286886464579e-01, -5.450286886464579e-01, -5.255882624258005e-01, -5.996647506064855e-01, -5.705458502424141e-01, -5.405250274902735e-01, -5.550119275771742e-01, -5.550119275771742e-01, -6.337363630613616e-01, -4.709478112105157e-01, -4.615217284511920e-01, -4.433411059620740e-01, -4.463935988836368e-01, -4.463935988834373e-01, -5.574105783094714e-01, -9.274564909864313e-01, -7.522262935594188e-01, -3.930126519774795e-01, -4.813230435724215e-01, -4.813230435720709e-01, -2.099995628711715e+00, -5.414666253181165e+00, -4.077920281856272e+00, -4.998765106158687e-01, -2.335602169879925e+00, -2.335602169879923e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mbrxc_bg_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbrxc_bg", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.046517870317200e+01, -2.046511979492113e+01, -2.046539182337674e+01, -2.046527454374476e+01, -2.046588379439815e+01, -2.046603271071848e+01, -2.046348175534523e+01, -2.046296966289898e+01, -2.046531522947964e+01, -2.046405420961937e+01, -2.046531522947964e+01, -2.046405420961937e+01, -3.221768037701346e+00, -3.222485532022849e+00, -3.221824036526418e+00, -3.222597115696042e+00, -3.223805492637977e+00, -3.224417354802906e+00, -3.219701177628460e+00, -3.220542168417312e+00, -3.221043597781085e+00, -3.222335396292388e+00, -3.221043597781085e+00, -3.222335396292388e+00, -5.729626240352178e-01, -5.835264623422837e-01, -5.691158423589061e-01, -5.822375957028406e-01, -5.162743296225675e-01, -4.949330076198846e-01, -5.071342693291692e-01, -5.135553066102899e-01, -6.010466991411839e-01, -3.869823260857806e-01, -6.010466991411839e-01, -3.869823260857806e-01, -1.144279541636385e-02, -2.781252593594782e-02, -2.118610393308262e-02, -3.927215061328513e-02, -7.055052264189434e-01, -7.566770373254423e-01, 1.079222276374804e-01, 1.061447944316225e-01, -1.660481706884436e-02, 2.159607136019035e-01, -1.660481706971387e-02, 2.159607136019012e-01, 2.622458568086785e+00, 2.503078622386838e+00, 2.461016752578582e+00, 2.327794403208530e+00, 7.432202221299549e-01, 7.045914169820153e-01, 4.203391771010327e+00, 4.318616875962869e+00, 2.890163277027806e+00, 3.031435657414647e+00, 2.890163277020249e+00, 3.031435657414663e+00, -5.375557085543266e+00, -5.373848906637306e+00, -5.387144876666404e+00, -5.385043130604912e+00, -5.376161469380508e+00, -5.374205580690098e+00, -5.386104268204662e+00, -5.384374866799289e+00, -5.381516718174472e+00, -5.379471223757748e+00, -5.381516718174472e+00, -5.379471223757748e+00, -1.409103098139493e+00, -1.408706950482696e+00, -1.433324696927285e+00, -1.432353232564205e+00, -1.358017317945049e+00, -1.372830805147859e+00, -1.379621650034041e+00, -1.394183216932685e+00, -1.458892978512300e+00, -1.426322324884966e+00, -1.458892978512300e+00, -1.426322324884966e+00, -5.493085954111484e-01, -5.478553582408263e-01, -7.384300207770536e-01, -7.405629679379642e-01, -4.904882614650642e-01, -5.127072220679243e-01, -6.199725764040949e-01, -6.401087352381856e-01, -5.837988667652182e-01, -5.514302997100003e-01, -5.837988667700168e-01, -5.514302996861168e-01, 2.828173259180711e-01, 2.746257886887027e-01, 7.019169963038793e-02, 6.838112634751041e-02, 3.096599165487524e-01, 2.893265079395140e-01, -2.223378741092440e+00, -2.222640577731492e+00, 1.972339424621120e-01, 1.383812175596811e-01, 1.972339424621120e-01, 1.383812175596811e-01, 4.590009901385585e+00, 4.749040373518860e+00, 3.978686861090155e+00, 4.075966593471020e+00, 2.278170056786255e+00, 2.065735640328469e+00, 4.100037115155147e-01, 4.155643979678767e-01, 3.091047173933450e+00, 2.381005818914214e+00, 3.091047173940623e+00, 2.381005818914205e+00, -7.091025859268372e-01, -7.120850726191983e-01, -6.843252324979638e-01, -6.878585167730120e-01, -6.946146183448725e-01, -6.979659640013975e-01, -7.018453615287060e-01, -7.049295167860107e-01, -6.983815939621668e-01, -7.015873489800817e-01, -6.983815939621668e-01, -7.015873489800817e-01, -6.935600559129294e-01, -6.958907857778689e-01, -4.043017896383046e-01, -4.074215639958094e-01, -4.603537230484936e-01, -4.637508348218380e-01, -5.396093348760747e-01, -5.426546005909123e-01, -4.924672767238697e-01, -4.949880834349715e-01, -4.924672767238697e-01, -4.949880834349715e-01, -7.658638069128311e-01, -7.703675937997330e-01, -7.714343740746123e-03, -1.061680632111778e-02, -9.941826268058104e-02, -1.063445966380982e-01, -2.769740198075145e-01, -2.795905544453554e-01, -1.907256938336488e-01, -1.917585187804135e-01, -1.907256938352364e-01, -1.917585187812522e-01, -3.715467126759520e-01, -3.762513864266049e-01, 7.893363335584281e-01, 7.839741759463010e-01, 5.992978238708787e-01, 5.734811362941469e-01, -2.889317587260148e-01, -2.939042363058720e-01, 3.087836992677605e-01, 2.558290659630875e-01, 3.087836992661615e-01, 2.558290659605322e-01, 2.158963105453944e+00, 2.075404565833028e+00, 6.799260495916295e+00, 5.197449084680132e+00, 4.613686255518141e+00, 4.251055193563311e+00, 3.073943901853954e-01, 3.042644131486077e-01, 2.316249826571847e+00, 2.519442849157344e+00, 2.316249826571835e+00, 2.519442849157334e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbrxc_bg_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbrxc_bg", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.313020373880685e-08, 0.000000000000000e+00, -4.313073565378694e-08, -4.312962900222067e-08, 0.000000000000000e+00, -4.313031807772012e-08, -4.312774791801511e-08, 0.000000000000000e+00, -4.312763422441577e-08, -4.313424088515117e-08, 0.000000000000000e+00, -4.313590897289428e-08, -4.312986428833160e-08, 0.000000000000000e+00, -4.313257083687441e-08, -4.312986428833160e-08, 0.000000000000000e+00, -4.313257083687441e-08, -5.620563330184462e-05, 0.000000000000000e+00, -5.621660160777500e-05, -5.620769433639452e-05, 0.000000000000000e+00, -5.621912228723092e-05, -5.626025165262144e-05, 0.000000000000000e+00, -5.627011545077551e-05, -5.617559572054286e-05, 0.000000000000000e+00, -5.618267095254437e-05, -5.623601741401305e-05, 0.000000000000000e+00, -5.622511354200057e-05, -5.623601741401305e-05, 0.000000000000000e+00, -5.622511354200057e-05, -3.575593958875255e-02, 0.000000000000000e+00, -3.546117569915205e-02, -3.589408991336446e-02, 0.000000000000000e+00, -3.551936379449444e-02, -3.789999546863753e-02, 0.000000000000000e+00, -3.862941708880315e-02, -3.733376310357891e-02, 0.000000000000000e+00, -3.715850313402257e-02, -3.471285220845818e-02, 0.000000000000000e+00, -4.097057036935128e-02, -3.471285220845818e-02, 0.000000000000000e+00, -4.097057036935128e-02, -7.191418236798524e+00, 0.000000000000000e+00, -6.284639268590851e+00, -6.912749620474635e+00, 0.000000000000000e+00, -5.927974102146264e+00, -1.898352057200342e-02, 0.000000000000000e+00, -1.719172595217816e-02, -1.822665663840656e+01, 0.000000000000000e+00, -1.732939917200182e+01, -6.074524518891181e+00, 0.000000000000000e+00, -5.779329451844089e+01, -6.074524518877528e+00, 0.000000000000000e+00, -5.779329451844070e+01, -1.959548361624462e+06, 0.000000000000000e+00, -1.554733911980722e+06, -1.644590968162222e+06, 0.000000000000000e+00, -1.265833584072011e+06, -2.499641922925593e+03, 0.000000000000000e+00, -2.043042424306120e+03, -1.358484151191483e+07, 0.000000000000000e+00, -1.446810617560618e+07, -3.025608560633653e+06, 0.000000000000000e+00, -2.712076790130099e+07, -3.025608560629469e+06, 0.000000000000000e+00, -2.712076790130107e+07, -1.143286000139860e-05, 0.000000000000000e+00, -1.144532772759794e-05, -1.138636134951955e-05, 0.000000000000000e+00, -1.140039093008430e-05, -1.143041152618970e-05, 0.000000000000000e+00, -1.144387723131347e-05, -1.139052459705876e-05, 0.000000000000000e+00, -1.140306273323718e-05, -1.140905463552356e-05, 0.000000000000000e+00, -1.142283711431295e-05, -1.140905463552356e-05, 0.000000000000000e+00, -1.142283711431295e-05, -4.859134521683292e-04, 0.000000000000000e+00, -4.860811407247835e-04, -4.741288392678182e-04, 0.000000000000000e+00, -4.746575227924290e-04, -4.932284989003926e-04, 0.000000000000000e+00, -4.913027567597094e-04, -4.827585108280527e-04, 0.000000000000000e+00, -4.807389345418087e-04, -4.740831378640881e-04, 0.000000000000000e+00, -4.793437830060081e-04, -4.740831378640881e-04, 0.000000000000000e+00, -4.793437830060081e-04, -7.286158709022399e-02, 0.000000000000000e+00, -7.374900598811744e-02, -3.472955096214460e-02, 0.000000000000000e+00, -3.410722640053862e-02, -1.018700042044006e-01, 0.000000000000000e+00, -9.064469066422372e-02, -7.280186077052310e-02, 0.000000000000000e+00, -6.393523414269066e-02, -6.342591640267885e-02, 0.000000000000000e+00, -7.709419513776243e-02, -6.342591640156468e-02, 0.000000000000000e+00, -7.709419514466775e-02, -6.661837725639249e+01, 0.000000000000000e+00, -6.449475370679839e+01, -6.224777442492759e+00, 0.000000000000000e+00, -6.111349110037029e+00, -9.667136922988865e+01, 0.000000000000000e+00, -7.985138991316441e+01, -4.274995082145235e-04, 0.000000000000000e+00, -4.279574623452658e-04, -4.161585115170208e+01, 0.000000000000000e+00, -3.469713928193927e+01, -4.161585115170208e+01, 0.000000000000000e+00, -3.469713928193927e+01, -4.139290572209381e+07, 0.000000000000000e+00, -3.550077259263668e+07, -1.587532850357245e+07, 0.000000000000000e+00, -1.493633810344563e+07, -5.211931836016876e+07, 0.000000000000000e+00, -4.208277968518439e+07, -3.873195549180942e+02, 0.000000000000000e+00, -3.775813965857060e+02, -4.658324550050210e+07, 0.000000000000000e+00, -1.387065297451457e+07, -4.658324550056000e+07, 0.000000000000000e+00, -1.387065297451454e+07, -3.173159840372577e-02, 0.000000000000000e+00, -3.105857461720604e-02, -4.521411003051871e-02, 0.000000000000000e+00, -4.408386933324960e-02, -4.008344762288648e-02, 0.000000000000000e+00, -3.909608789244091e-02, -3.611654082438471e-02, 0.000000000000000e+00, -3.532215947910866e-02, -3.805988977444152e-02, 0.000000000000000e+00, -3.717326513527743e-02, -3.805988977444152e-02, 0.000000000000000e+00, -3.717326513527743e-02, -3.218341954163938e-02, 0.000000000000000e+00, -3.171262092998571e-02, -1.325751621524057e-01, 0.000000000000000e+00, -1.306826296055526e-01, -1.212603652852457e-01, 0.000000000000000e+00, -1.196195824777443e-01, -1.043929980183746e-01, 0.000000000000000e+00, -1.027048578127019e-01, -1.163561793525751e-01, 0.000000000000000e+00, -1.147568736619627e-01, -1.163561793525751e-01, 0.000000000000000e+00, -1.147568736619627e-01, -3.067822723985878e-02, 0.000000000000000e+00, -2.974222311744983e-02, -2.612099428751785e+00, 0.000000000000000e+00, -2.558064018173194e+00, -1.353698547618864e+00, 0.000000000000000e+00, -1.307702173567725e+00, -5.100210520147731e-01, 0.000000000000000e+00, -4.997611157650624e-01, -8.169046320130042e-01, 0.000000000000000e+00, -8.191329811778396e-01, -8.169046320091026e-01, 0.000000000000000e+00, -8.191329811757593e-01, -1.824508216833479e-01, 0.000000000000000e+00, -1.786255081586626e-01, -2.664174475308585e+03, 0.000000000000000e+00, -2.597749555410883e+03, -8.880635570289089e+02, 0.000000000000000e+00, -7.879213449309466e+02, -6.394031776373655e-01, 0.000000000000000e+00, -6.133093389943944e-01, -1.763702669715381e+02, 0.000000000000000e+00, -1.472247182994301e+02, -1.763702669711896e+02, 0.000000000000000e+00, -1.472247182988997e+02, -4.973887873452629e+05, 0.000000000000000e+00, -4.350591441258631e+05, -2.572195403970881e+09, 0.000000000000000e+00, -2.606369500548641e+09, -1.648318828936944e+08, 0.000000000000000e+00, -1.304964541978604e+08, -2.080865221378199e+02, 0.000000000000000e+00, -1.958682560389317e+02, -5.920729849667214e+07, 0.000000000000000e+00, -1.936825591198811e+07, -5.920729849667218e+07, 0.000000000000000e+00, -1.936825591198816e+07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbrxc_bg_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbrxc_bg", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-2.443712429374336e-04, -2.443735967228534e-04, -2.443739158068473e-04, -2.443755361693159e-04, -2.443779317302682e-04, -2.443825590681041e-04, -2.443478693389195e-04, -2.443441998134179e-04, -2.443730728519305e-04, -2.443562023424620e-04, -2.443730728519305e-04, -2.443562023424620e-04, -1.182081994598791e-03, -1.183039390896582e-03, -1.182233446676165e-03, -1.183243138926575e-03, -1.186397884296427e-03, -1.187430558078663e-03, -1.179895730271358e-03, -1.180944789354729e-03, -1.181822460587575e-03, -1.184598667221556e-03, -1.181822460587575e-03, -1.184598667221556e-03, -3.926565604170000e-03, -4.078000950730585e-03, -3.877838077478064e-03, -4.060465730640637e-03, -3.301929842156757e-03, -3.116528095335342e-03, -3.200147705527877e-03, -3.265878234637665e-03, -4.300716723121979e-03, -2.359670794648357e-03, -4.300716723121979e-03, -2.359670794648357e-03, -4.148721606327404e-03, -4.462916886384906e-03, -4.369357047227633e-03, -4.734282995579641e-03, -3.217815738071683e-03, -3.677628871977007e-03, -2.456630810748679e-03, -2.476481444864658e-03, -4.090402641785200e-03, -1.598943816681927e-03, -4.090402641776006e-03, -1.598943816681925e-03, -5.272133197513612e-05, -5.639590494642596e-05, -5.739299206719624e-05, -6.217344862869075e-05, -3.553999317656355e-04, -3.839019808035521e-04, -2.743634701452571e-05, -2.649788273706686e-05, -4.594445847015968e-05, -3.913043626194445e-05, -4.594445847009621e-05, -3.913043626194459e-05, -1.061223399002026e-03, -1.061495035666857e-03, -1.060507641539055e-03, -1.060807967429035e-03, -1.061186420900804e-03, -1.061473102118753e-03, -1.060573726524537e-03, -1.060850012410029e-03, -1.060867898552863e-03, -1.061160648082704e-03, -1.060867898552863e-03, -1.061160648082704e-03, -1.053713951454251e-03, -1.053870091122240e-03, -1.068760051554693e-03, -1.068654766529954e-03, -1.004285830067521e-03, -1.018802720557297e-03, -1.016979029861289e-03, -1.031353455515692e-03, -1.100152899606645e-03, -1.067016858153089e-03, -1.100152899606645e-03, -1.067016858153089e-03, -7.945411687676901e-03, -7.989111008844956e-03, -7.314575149597617e-03, -7.233921759101309e-03, -7.600804161913021e-03, -7.887488874068068e-03, -9.521875945767458e-03, -9.160051140734333e-03, -8.276351396437927e-03, -8.457947538916660e-03, -8.276351396292542e-03, -8.457947539674245e-03, -1.247415690719723e-03, -1.283875179342153e-03, -2.568697520182295e-03, -2.582364141646687e-03, -1.134154943917945e-03, -1.218752412146544e-03, -2.496737133844968e-03, -2.496778773794717e-03, -1.726671686634652e-03, -2.249935052242121e-03, -1.726671686634652e-03, -2.249935052242121e-03, -2.353147270831284e-05, -2.276082071610521e-05, -2.907016618972698e-05, -2.833036871983411e-05, -5.326250273952948e-05, -6.043107019914282e-05, -8.000403441459366e-04, -7.889382855516554e-04, -3.730433789614624e-05, -5.379602549823263e-05, -3.730433789619255e-05, -5.379602549823246e-05, -6.029834112794971e-03, -5.983910907894423e-03, -7.445082704973807e-03, -7.371084646378759e-03, -6.929814647589651e-03, -6.862182133299115e-03, -6.511524624150994e-03, -6.458530897588599e-03, -6.718552819947965e-03, -6.658478538566157e-03, -6.718552819947965e-03, -6.658478538566157e-03, -5.872268210357432e-03, -5.845847463176877e-03, -5.942851754578458e-03, -5.984755987145739e-03, -7.966625304484011e-03, -8.040567960575049e-03, -1.023184348959929e-02, -1.020692587120224e-02, -9.324784782026425e-03, -9.333619431875544e-03, -9.324784782026425e-03, -9.333619431875544e-03, -7.284140997737581e-03, -7.157520785847912e-03, -3.118665903940070e-03, -3.146038081736369e-03, -4.046161603341925e-03, -4.146198073939458e-03, -7.261531078127823e-03, -7.288607023616806e-03, -5.456684257622912e-03, -5.501183129931780e-03, -5.456684257596850e-03, -5.501183129917811e-03, -6.225571763912109e-03, -6.322849848732280e-03, -3.288658622234198e-04, -3.321140079062510e-04, -4.897527370350199e-04, -5.198439748575655e-04, -9.836983158343891e-03, -1.011571563005529e-02, -1.127807866059349e-03, -1.378155557866394e-03, -1.127807866057122e-03, -1.378155557861431e-03, -7.141453179069648e-05, -7.542793228500083e-05, -1.254471872130395e-05, -1.711238090511217e-05, -2.203104531404760e-05, -2.449314562395264e-05, -1.129753700066430e-03, -1.144704987880618e-03, -5.191645384320596e-05, -4.950615881046320e-05, -5.191645384320581e-05, -4.950615881046316e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
