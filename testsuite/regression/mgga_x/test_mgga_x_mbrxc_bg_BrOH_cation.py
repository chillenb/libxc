
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mbrxc_bg_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbrxc_bg", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.963859757323120e+01, -1.963864709652976e+01, -1.963888628096557e+01, -2.095361010409239e+01, -2.095366751519002e+01, -2.226900577957665e+01, -3.945607934618903e+00, -4.633750710394642e+00, -4.624639633827267e+00, -4.628736888889806e+00, -4.627813799879888e+00, -3.939514605907171e+00, -6.528163638670590e-01, -9.094620096771915e-01, -1.213375400455288e+00, -9.170871656637380e-01, -6.457099768179564e-01, -1.194389443709223e+00, -2.735346540972483e-01, -2.724764468403599e-01, -1.288536362800469e+00, -4.761094094685641e-01, -4.246092967864986e-01, -3.583716807225260e-01, -2.503190293209855e+00, -1.284428696186683e+00, -5.339390417312853e-01, -4.434118558938086e+00, -2.975764646075703e+00, -2.975764646075954e+00, -5.150183045879036e+00, -5.146479933948152e+00, -5.149961870018311e+00, -5.146695626897530e+00, -4.961423389880361e+00, -4.961579527588312e+00, -2.783165775984932e+00, -2.765894269068278e+00, -2.798449034777853e+00, -2.781926327865667e+00, -2.310484243950036e+00, -2.766130308134250e+00, -6.161850139355329e-01, -6.579364060797908e-01, -6.957034739511803e-01, -6.585620337853808e-01, -6.184413718092810e-01, -6.820762377425169e-01, -5.913747228696133e-01, -3.357229927275437e-01, -6.050519176390268e-01, -2.163802043615638e+00, -4.621916861727474e-01, -4.621916861727859e-01, -3.438963373226348e+00, -4.772677177639945e+00, -2.310385042024650e+00, -3.906239365148108e-01, -3.088176675972692e+00, -3.088176675973229e+00, -5.455890227002862e-01, -5.532215363370288e-01, -5.369406005105888e-01, -5.427386615181455e-01, -5.372752040658488e-01, -5.431007108763239e-01, -5.320587595901352e-01, -5.324520539166939e-01, -5.286674240594271e-01, -5.532410568797639e-01, -5.675123918324551e-01, -5.263975291319073e-01, -6.659957321357655e-01, -4.832498462417285e-01, -3.730173403486963e-01, -4.138478378185078e-01, -4.792210178485804e-01, -3.847608771840178e-01, -5.959872037268132e-01, -7.279671257188593e-02, -8.396945106182723e-01, -4.370671109126472e-01, -5.336875614904057e-01, -5.336875614901924e-01, -4.540454369308409e-02, -1.292444373958433e+01, -2.334152048217819e-02, -9.767952884011903e-02, -2.749591771005361e+00, -1.044619588798704e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mbrxc_bg_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbrxc_bg", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.590272535727241e+01, -2.590271420701789e+01, -2.590281230130365e+01, -2.590277736399239e+01, -2.590310574501923e+01, -2.590319355979531e+01, -2.590212368385360e+01, -2.017590617924336e+01, -2.590277652448381e+01, -2.017706975755559e+01, -2.017701607369584e+01, -2.017706975755559e+01, -2.569991139758864e+00, -4.175631303908903e+00, -2.570334996439616e+00, -2.569903890391231e+00, -2.576989248566545e+00, -2.578203596239060e+00, -2.574790876370594e+00, -2.574835781201098e+00, -2.568812819974886e+00, -2.580864632327500e+00, -4.174953745768732e+00, -2.580864632327500e+00, -7.839264172066889e-01, -7.879777414661707e-01, -7.824369097186117e-01, -2.708405045827819e-01, -1.961549932987585e-01, -1.840073073693309e-01, -2.184594496624866e-01, -7.690391185550730e-01, -7.946371590195191e-01, -7.366065936276142e-01, -2.827054202260216e-01, -1.380921233324783e-01, -1.969177666641766e-01, -2.199197308304087e-02, -1.992250472739467e-01, -3.185477662636470e-02, 1.149873675983815e-01, -9.208155779709635e-01, 1.792598825144705e-01, 1.463940952326923e-01, 4.018599771814116e-03, 3.623917347623068e-01, 4.018599772451092e-03, -1.295751742656689e-01, 2.652001322091978e+00, 2.515074129104903e+00, -2.628951752583538e-02, 2.352230740597290e+00, -6.384046953808936e-02, 7.765274051351811e-01, 4.714839701383132e+00, 4.760318907289939e+00, 2.990353842973127e+00, 3.762958509805559e+00, 2.990353842973126e+00, 3.762958509815979e+00, -5.367068659419296e+00, -5.365849418859637e+00, -5.378711443742453e+00, -5.377098862029103e+00, -5.367870162777418e+00, -5.366347818905816e+00, -5.377853446133069e+00, -5.376560567390062e+00, -6.321886852018683e+00, -5.371474588803019e+00, -5.372908787513567e+00, -6.320343540617158e+00, -1.305174270028987e+00, -1.308288641172126e+00, -1.345788573665863e+00, -1.347555593352911e+00, -1.268321975136433e+00, -1.282035901788227e+00, -1.304830783619197e+00, -1.318602128639284e+00, -1.354930367874957e+00, -2.350665340204170e+00, -1.354930367874956e+00, -1.333067349989021e+00, -5.003095137591743e-01, -7.082913188307998e-01, -6.070809605558286e-01, -6.126611399821064e-01, -3.998705791690407e-01, -4.427090709085585e-01, -4.677199932189266e-01, -4.973118177706122e-01, -5.383462334424859e-01, -7.019000123361329e-01, -5.383462334424859e-01, -4.981559107022601e-01, 3.418491532397818e-01, 3.384988129841681e-01, -2.046264930609466e-01, 8.687714195134529e-02, 3.847522781995213e-01, 3.495027908868461e-01, -1.690081045679062e+00, -1.689545432231528e+00, 2.348259594879644e-01, 1.640000522273548e-01, 2.348259594896456e-01, 1.640000522263777e-01, -2.264206060664875e-02, 7.026650841287062e+00, 4.993034276128926e+00, 5.226186830555647e+00, 2.564365882438309e+00, 2.339425652963280e+00, 5.064510234498451e-01, -8.660218242673144e-02, 5.456771787354640e+00, 2.439982207602386e+00, 5.456771787366908e+00, 2.439982207602409e+00, -7.020164847845302e-01, -7.052859661186832e-01, -6.716268369476186e-01, -6.756645250062838e-01, -7.123832734853430e-01, -7.151763437363657e-01, -7.136745567562736e-01, -6.962917232644433e-01, -7.130287686879813e-01, -7.158097826747553e-01, -7.130287686879814e-01, -6.921628396419733e-01, -6.804403324969467e-01, -6.833779779872655e-01, -3.980803869162505e-01, -5.951548554947025e-01, -4.523090371786214e-01, -6.254442186436771e-01, -5.175221164076446e-01, -5.203322973975757e-01, -4.800232660987819e-01, -4.827571118356343e-01, -4.800232661072512e-01, -6.396658991244925e-01, -6.118598795033048e-01, -8.106950408076751e-01, 3.454047518085265e-03, 8.803110661398015e-04, -3.050184611039155e-01, -8.376719679344408e-02, -4.140458886326515e-01, -2.301954062998824e-01, -1.599137503297370e-01, -1.609482222252853e-01, -1.599137503281417e-01, -3.576431708685877e-01, -3.370216324726454e-01, -3.452810908297840e-01, -6.280724608889630e-02, -6.318948858270744e-02, 6.850020184922387e-01, 6.525746282824836e-01, -2.440776618421038e-01, -2.651072943144799e-01, 3.601852550583661e-01, 2.988945735122929e-01, 3.601852550583646e-01, 2.988945735099057e-01, -3.325462538021587e-02, -3.377681361472255e-02, 1.452937458133900e+01, 1.453039945136734e+01, -1.586799581767657e-02, -1.597313450875738e-02, -9.543172036346889e-02, -9.578054688853060e-02, 3.682560331076515e+00, 2.583488303542918e+00, 3.682560331087465e+00, -1.768335868608287e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbrxc_bg_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbrxc_bg", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.682448096995361e-08, 0.000000000000000e+00, -1.682406710215082e-08, -1.682419008265417e-08, 0.000000000000000e+00, -1.682385589254670e-08, -1.682324416884272e-08, 0.000000000000000e+00, -1.682250490023013e-08, -1.682652491672364e-08, 0.000000000000000e+00, -4.317000149552343e-08, -1.682430635526095e-08, 0.000000000000000e+00, -4.316713118359056e-08, -4.316476247724660e-08, 0.000000000000000e+00, -4.316713118359056e-08, -4.962292840118574e-05, 0.000000000000000e+00, -2.965411282560778e-05, -4.962519342795783e-05, 0.000000000000000e+00, -4.962492587119297e-05, -4.967025614692785e-05, 0.000000000000000e+00, -4.967626239879366e-05, -4.963709958552098e-05, 0.000000000000000e+00, -4.963438901957564e-05, -4.964970136299859e-05, 0.000000000000000e+00, -4.967140173974427e-05, -2.967610997835744e-05, 0.000000000000000e+00, -4.967140173974427e-05, -2.676135268456386e-02, 0.000000000000000e+00, -2.620008682796215e-02, -2.696785640309889e-02, 0.000000000000000e+00, -3.158252948695688e-02, -3.419785889056404e-02, 0.000000000000000e+00, -3.503063472772336e-02, -3.393628968941698e-02, 0.000000000000000e+00, -2.888427361359864e-02, -2.531721942778030e-02, 0.000000000000000e+00, -3.386557051349022e-02, -3.066064179645289e-02, 0.000000000000000e+00, -3.809298987924137e-02, -6.296962436658109e+00, 0.000000000000000e+00, -6.251567865119980e+00, -6.068237073976047e+00, 0.000000000000000e+00, -5.887324356723328e+00, -1.655287603390434e-02, 0.000000000000000e+00, -1.341570102312429e-02, -1.740299346917260e+01, 0.000000000000000e+00, -1.685995431148239e+01, -5.971241398385083e+00, 0.000000000000000e+00, -5.381027603002237e+01, -5.971241398393974e+00, 0.000000000000000e+00, -2.484187123695151e+01, -1.957206441496405e+06, 0.000000000000000e+00, -1.553931091917995e+06, -7.797195253441451e+04, 0.000000000000000e+00, -1.264386703407025e+06, -4.989413992072011e+02, 0.000000000000000e+00, -2.013417122922794e+03, -1.343602559062979e+07, 0.000000000000000e+00, -1.433404470741227e+07, -3.014879946014361e+06, 0.000000000000000e+00, -2.655823457577822e+07, -3.014879946014361e+06, 0.000000000000000e+00, -2.655823457581764e+07, -1.146300403643738e-05, 0.000000000000000e+00, -1.147376114768091e-05, -1.141683974269237e-05, 0.000000000000000e+00, -1.142911095753124e-05, -1.145988740413196e-05, 0.000000000000000e+00, -1.147182531589903e-05, -1.142030103503079e-05, 0.000000000000000e+00, -1.143128758299620e-05, -4.578730887466527e-06, 0.000000000000000e+00, -1.145150451595616e-05, -1.143989814903235e-05, 0.000000000000000e+00, -4.583238236540522e-06, -4.767075539178960e-04, 0.000000000000000e+00, -4.771474623950267e-04, -4.662409210049309e-04, 0.000000000000000e+00, -4.669859201772770e-04, -4.855717612207718e-04, 0.000000000000000e+00, -4.834380954912163e-04, -4.762867897259070e-04, 0.000000000000000e+00, -4.740995080691025e-04, -4.644974928234066e-04, 0.000000000000000e+00, -3.064050588760792e-04, -4.644974928234066e-04, 0.000000000000000e+00, -4.709358422611919e-04, -6.732141487170230e-02, 0.000000000000000e+00, -3.254593266968765e-02, -5.455125451600346e-02, 0.000000000000000e+00, -5.442030269377210e-02, -9.060453496257903e-02, 0.000000000000000e+00, -8.147431823868712e-02, -8.359570158965740e-02, 0.000000000000000e+00, -7.583964853404523e-02, -6.008060681675225e-02, 0.000000000000000e+00, -3.364592477223370e-02, -6.008060681675222e-02, 0.000000000000000e+00, -7.121766685813981e-02, -6.481500648737379e+01, 0.000000000000000e+00, -6.258411792111120e+01, -4.898153543022819e+00, 0.000000000000000e+00, -6.037755184009298e+00, -9.357743519217249e+01, 0.000000000000000e+00, -7.766802558400731e+01, -6.153659128995058e-04, 0.000000000000000e+00, -6.165855497214307e-04, -4.071120787038873e+01, 0.000000000000000e+00, -3.408049040439352e+01, -4.071120787048179e+01, 0.000000000000000e+00, -3.408049040433821e+01, -6.996910256715474e+05, 0.000000000000000e+00, -3.425325502084480e+07, -1.553454764156218e+07, 0.000000000000000e+00, -1.458641959349795e+07, -5.151423906053321e+07, 0.000000000000000e+00, -4.156127521139809e+07, -3.746934667412119e+02, 0.000000000000000e+00, -1.238964661473451e+02, -4.416416408563755e+07, 0.000000000000000e+00, -1.383600945701494e+07, -4.416416408569121e+07, 0.000000000000000e+00, -1.383600945701502e+07, -3.652432604080351e-02, 0.000000000000000e+00, -3.562020250050292e-02, -5.102257174959414e-02, 0.000000000000000e+00, -4.963217272499292e-02, -2.718445140101579e-02, 0.000000000000000e+00, -2.673906783100305e-02, -2.681685682999121e-02, 0.000000000000000e+00, -4.030859104656808e-02, -2.700013294930344e-02, 0.000000000000000e+00, -2.656243223984479e-02, -2.700013294930344e-02, 0.000000000000000e+00, -4.231592122395496e-02, -4.263272674479221e-02, 0.000000000000000e+00, -4.161211477358089e-02, -1.313742271553336e-01, 0.000000000000000e+00, -6.786698712350332e-02, -1.191957151293432e-01, 0.000000000000000e+00, -5.210092407379460e-02, -1.075247310947373e-01, 0.000000000000000e+00, -1.059789288721048e-01, -1.146939842242297e-01, 0.000000000000000e+00, -1.132473272320846e-01, -1.146939842206273e-01, 0.000000000000000e+00, -4.619192374758768e-02, -4.433283650390096e-02, 0.000000000000000e+00, -1.773808081725359e-02, -2.592644578938721e+00, 0.000000000000000e+00, -2.538417649366932e+00, -1.162998362699212e+00, 0.000000000000000e+00, -1.286664728469277e+00, -3.215094785501944e-01, 0.000000000000000e+00, -4.722664696479155e-01, -7.956990490419634e-01, 0.000000000000000e+00, -7.977061454800716e-01, -7.956990490452092e-01, 0.000000000000000e+00, -6.059987875489472e-01, -1.749992121825387e-01, 0.000000000000000e+00, -1.717067172556317e-01, -5.342318278138396e+02, 0.000000000000000e+00, -5.209518789845251e+02, -8.699253985129142e+02, 0.000000000000000e+00, -7.722892605626273e+02, -5.912030777607206e-01, 0.000000000000000e+00, -5.766114019214097e-01, -1.722784004673984e+02, 0.000000000000000e+00, -1.438902125176884e+02, -1.722784004673981e+02, 0.000000000000000e+00, -1.438902125172579e+02, -2.586048028207186e+04, 0.000000000000000e+00, -2.328768944062310e+04, -2.422553528709431e+09, 0.000000000000000e+00, -2.400938217540049e+09, -2.887667592161143e+06, 0.000000000000000e+00, -2.464447231117368e+06, -8.337915960644179e+01, 0.000000000000000e+00, -8.237871108284234e+01, -5.661639901491392e+07, 0.000000000000000e+00, -1.931936270104384e+07, -5.661639901500469e+07, 0.000000000000000e+00, -6.449560212668291e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mbrxc_bg_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mbrxc_bg", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.653929941847128e-04, -1.653882867411524e-04, -1.653917376132889e-04, -1.653873749489274e-04, -1.653878831474801e-04, -1.653818065347680e-04, -1.654020224300050e-04, -2.376471344457244e-04, -1.653922177258502e-04, -2.376653744150210e-04, -2.376532602282109e-04, -2.376653744150210e-04, -6.359010662144372e-04, -1.258006616857535e-03, -6.360768914157124e-04, -6.358797441106711e-04, -6.395082310256736e-04, -6.401177758364315e-04, -6.382044572388129e-04, -6.382001778854044e-04, -6.356112974454556e-04, -6.412916717902292e-04, -1.258359862363434e-03, -6.412916717902292e-04, -8.098330025710325e-03, -8.023139531747355e-03, -8.122777858013469e-03, -1.651830280146383e-03, -1.453862399920594e-03, -1.430451069789180e-03, -1.517968287775742e-03, -8.313844170088604e-03, -7.932531210235341e-03, -8.719345450075237e-03, -1.675367509937198e-03, -1.342652136512630e-03, -3.111411837430523e-02, -4.297197023318619e-03, -3.110607283126633e-02, -4.505416399597401e-03, -7.320997340447212e-04, -6.795838074723123e-03, -1.785193254935512e-03, -2.050132772868931e-03, -3.617011417366468e-03, -9.713009560613787e-04, -3.617011417371850e-03, -2.157742648674201e-02, -5.202165562322088e-05, -5.607477996752409e-05, -1.803257933858411e-02, -6.140143970673614e-05, -1.983790521951379e-02, -3.410467796980824e-04, -2.396956668255603e-05, -2.363085738464257e-05, -4.412001698403345e-05, -3.033319454191213e-05, -4.412001698403345e-05, -3.033319454195714e-05, -1.061552903919547e-03, -1.061804714688196e-03, -1.060903180489486e-03, -1.061177614913959e-03, -1.061512386853891e-03, -1.061779671858030e-03, -1.060955309459442e-03, -1.061210366078313e-03, -6.523525915935769e-04, -1.061501622525778e-03, -1.061237450145483e-03, -6.525170392706059e-04, -9.356459878888551e-04, -9.393281089818003e-04, -9.649197136322429e-04, -9.677715889816462e-04, -9.093920336434196e-04, -9.203543785508547e-04, -9.348014495655767e-04, -9.462305959197201e-04, -9.724776102406471e-04, -2.347281790527048e-03, -9.724776102406471e-04, -9.573986535204267e-04, -5.681851505863277e-03, -6.604976527684816e-03, -8.122103364446317e-03, -8.256522098696602e-03, -4.290161659314750e-03, -4.898321937411992e-03, -5.774677699680139e-03, -6.286799898508856e-03, -6.335240357355243e-03, -6.641982298313643e-03, -6.335240357355243e-03, -5.930741652557831e-03, -1.030260890726325e-03, -1.041326869475303e-03, -2.559479827636755e-02, -2.373892552647109e-03, -9.018079855751915e-04, -1.003963894906904e-03, -2.007275057624236e-03, -2.009401291182095e-03, -1.485134088969628e-03, -1.990398347008880e-03, -1.485134088973023e-03, -1.990398347005650e-03, -1.289745970674719e-02, -1.439693054444855e-05, -2.225760592650793e-05, -2.115166499427804e-05, -4.631707239638925e-05, -5.215969711919622e-05, -6.262287151387732e-04, -2.311619427710259e-02, -1.915116837304996e-05, -5.225734655976869e-05, -1.915116837307324e-05, -5.225734655976898e-05, -6.554490075304854e-03, -6.490168372299236e-03, -7.994279179824001e-03, -7.905395890291900e-03, -5.525076975384013e-03, -5.498441393722502e-03, -5.477991221359635e-03, -6.989347836955974e-03, -5.501498996496734e-03, -5.475639875508293e-03, -5.501498996496734e-03, -7.195501251004623e-03, -6.930658665193368e-03, -6.860419684647136e-03, -5.696845621629097e-03, -8.226000596091727e-03, -7.450821314924984e-03, -7.252412575158426e-03, -9.816245011009948e-03, -9.813120230903614e-03, -8.623539111487267e-03, -8.659976405850993e-03, -8.623539111216405e-03, -6.853384061475108e-03, -6.900704258836213e-03, -5.352107546737514e-03, -2.957007572411530e-03, -2.977836868287682e-03, -2.106872960608675e-02, -3.684960483848105e-03, -1.351348039397234e-02, -5.172435799086005e-03, -4.541726264768540e-03, -4.573822754806366e-03, -4.541726264787068e-03, -1.688267808506510e-02, -4.996558701033150e-03, -5.162540241085628e-03, -2.007124987700378e-02, -1.997682966297067e-02, -4.169394605023329e-04, -4.451792949607409e-04, -6.550529060286295e-03, -7.573240702812219e-03, -9.548347572901533e-04, -1.174120096134931e-03, -9.548347572901525e-04, -1.174120096131419e-03, -1.521360428954193e-02, -1.524477788400145e-02, -5.244172996986761e-06, -5.245478957327622e-06, -1.842363060873965e-02, -1.891728970965762e-02, -2.571052619374096e-02, -2.666875902686597e-02, -3.007681734997933e-05, -4.805670698476435e-05, -3.007681735002743e-05, -2.228575070380223e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
