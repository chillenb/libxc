
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ft98_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ft98", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.248117974520164e+01, -2.248114448752769e+01, -2.248115468523570e+01, -2.248172840824547e+01, -2.248115975385489e+01, -2.248115975385489e+01, -3.457825991182087e+00, -3.457811131507066e+00, -3.457575105554828e+00, -3.459151974196142e+00, -3.457830722657560e+00, -3.457830722657560e+00, -6.832422419233668e-01, -6.830330281328348e-01, -6.784971208398242e-01, -6.830213942964964e-01, -6.831635155349385e-01, -6.831635155349385e-01, -2.077680825869155e-01, -2.087972865564937e-01, -8.035268246349212e-01, -1.596564178008308e-01, -2.080395595271044e-01, -2.080395595271044e-01, -6.308927063915971e-02, -6.351054480131958e-02, -9.015399582187809e-02, -3.755501100120651e-03, -6.275561729955272e-02, -6.275561729955272e-02, -5.126173653099712e+00, -5.067262484582839e+00, -5.147069755029906e+00, -5.132101803931537e+00, -5.280725250926733e+00, -5.036785509239921e+00, -2.046289220840297e+00, -2.055781332799542e+00, -2.065730780448426e+00, -2.072442604612871e+00, -2.071732913304051e+00, -2.166463760826720e+00, -5.757785897202707e-01, -6.519017704869626e-01, -5.472088062392543e-01, -5.485281044844670e-01, -5.901345400492219e-01, -5.904091022716453e-01, -1.220086353084734e-01, -2.137465826641073e-01, -1.201876212573943e-01, -1.818635266875421e+00, -1.723106084868897e-01, -2.245292073030606e-01, -3.603696885069518e-03, -4.259109603001660e-03, -3.171940445790975e-03, -7.645061892315694e-02, -3.885056509559272e-03, -3.885056509563472e-03, -8.669539047930038e-01, -6.359889782504097e-01, -6.728606921140220e-01, -7.241814294473974e-01, -6.949532511250536e-01, -6.949516816734370e-01, -9.661081598242214e-01, -5.142579954806010e-01, -5.227676228027750e-01, -5.530643375766306e-01, -5.248348494760529e-01, -5.298026079978327e-01, -6.819474295012615e-01, -2.599516893217844e-01, -2.979121522543260e-01, -3.598479025268422e-01, -3.266429712595155e-01, -3.266215350791840e-01, -4.631109578318765e-01, -4.834883349734991e-02, -6.808503505644727e-02, -3.333371569105613e-01, -9.959543844579936e-02, -1.507185231364193e-01, -1.149931292356442e-02, -8.719110606805548e-04, -1.927104796576809e-03, -4.084992521830857e-01, -9.999802138646087e-01, -3.246012593873210e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ft98_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ft98", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.308547698579786e+01, -2.308611213904256e+01, -2.308819404075821e+01, -2.307781727582926e+01, -2.308581818246008e+01, -2.308581818246008e+01, -4.114772091559039e+00, -4.114769705648168e+00, -4.114740299314938e+00, -4.113685497872014e+00, -4.114799085375481e+00, -4.114799085375481e+00, -7.984667611851596e-01, -7.976630232682608e-01, -7.781284296274277e-01, -7.836435647858331e-01, -7.981730891746809e-01, -7.981730891746809e-01, -1.844179763937058e-01, -1.901734890894428e-01, -9.612574979617571e-01, -1.541346270543037e-01, -1.862642105221995e-01, -1.862642105221995e-01, 2.768678501112873e-01, 2.755745326633134e-01, 2.122058947179830e-01, -6.261022838750826e-03, 2.730480561647218e-01, 2.730480561647218e-01, -6.874339421520302e+00, -6.486258834179194e+00, -6.990300891128977e+00, -6.912512566814035e+00, -7.143393343281599e+00, -6.287680444959845e+00, -2.357960593683735e+00, -2.362250546812312e+00, -2.189953263053179e+00, -2.212414077462746e+00, -2.239884204798347e+00, -1.920559670223714e+00, -7.254148297897400e-01, -1.082062550523398e+00, -6.832624059234695e-01, -6.956665744902195e-01, -7.223234659979938e-01, -7.259788840795824e-01, -1.507693770516285e-01, -2.370487295231096e-01, -1.473654445518996e-01, -2.340840437719412e+00, 2.313926882719597e-02, 1.169483465948953e-01, -6.008085602711850e-03, -7.099413407261932e-03, -5.287473720388917e-03, -1.059825069326648e-01, -6.475858671196461e-03, -6.475858671232362e-03, -1.953185797293340e+00, -1.129908147521854e+00, -1.303633220161478e+00, -1.511929613511109e+00, -1.397414367059868e+00, -1.397408640611654e+00, -2.158089220603580e+00, -5.738769628360582e-01, -6.480075640458841e-01, -7.481536776541475e-01, -6.443812657769283e-01, -6.776681871891166e-01, -1.123367182728194e+00, -2.874808730446244e-01, -3.337103165786864e-01, -4.249640332815668e-01, -3.729069138468520e-01, -3.727914744051511e-01, -5.277921390061538e-01, -7.446893498659538e-02, -9.834580440838424e-02, -3.912838272686031e-01, -1.264880319977607e-01, 1.178670451089711e-01, -1.905010368295456e-02, -1.453678341108211e-03, -3.213406499108070e-03, 1.796969015364792e-01, -7.392058513729381e-01, -5.411271655597256e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ft98_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ft98", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.150235520960386e-08, -2.150051236113892e-08, -2.149441324184686e-08, -2.152453137373898e-08, -2.150136570125779e-08, -2.150136570125779e-08, -8.498751226712407e-06, -8.499732332126770e-06, -8.528646927621269e-06, -8.520448714028417e-06, -8.498846123732911e-06, -8.498846123732911e-06, -3.797375680098650e-03, -3.790668643659821e-03, -3.567455526706054e-03, -3.515297768536948e-03, -3.795004185924523e-03, -3.795004185924523e-03, -9.845446991522294e-01, -9.249631251452619e-01, -2.101174997086415e-03, -1.430266038953716e+00, -9.652810162396244e-01, -9.652810162396250e-01, -3.677365504163806e+04, -3.195426324123132e+04, -2.938699693276194e+02, 4.247269116321142e+02, -3.329119747926742e+04, -3.329119747926742e+04, 2.703384756803565e-07, -7.850713659257416e-07, 4.923736000476828e-07, 3.653531503449708e-07, -3.055363043986771e-07, -1.633696262177785e-06, -4.280141191272617e-05, -4.314361543593731e-05, -7.661432138916629e-05, -7.377681760187195e-05, -7.217663258918085e-05, -1.211355686873718e-04, -6.034229226107551e-03, 8.598234790100835e-02, -8.017088342975449e-03, -1.344034660697332e-02, -9.206765338575704e-03, -8.172775066174977e-03, -3.813552150436599e-01, -2.024398238696722e-01, -4.642468859473461e-01, -7.590288323267126e-05, -1.006662080575034e+01, -1.385444737412111e+01, 4.676168740149886e+02, 3.704037712474579e+02, 1.108602512675994e+03, 6.277237559181745e-01, 5.428275576274079e+02, 5.428275576388166e+02, 1.350170751163321e+00, 1.609443690249168e-01, 3.032541611354697e-01, 5.364942281252142e-01, 3.990379524982007e-01, 3.990370894530803e-01, 2.610040044764284e+00, -2.133774309265978e-02, -1.012455872738394e-02, -3.134383655747114e-03, -1.315947182051082e-02, -6.873116945604753e-03, 5.937388943074514e-02, -1.177194009694079e-01, -8.220542373222690e-02, -4.729738268346674e-02, -6.532029628786108e-02, -6.521039211680230e-02, -2.689410808649671e-02, 4.548528608274665e+00, 1.448515932912436e+00, -9.266101345269077e-02, -4.737033571233867e-01, -4.211841965983093e+01, 8.946854546628387e+01, 4.845088147719734e+03, 1.451077634516597e+03, -6.149460139687562e+01, 5.342140649073215e+05, 8.932405289011562e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ft98_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ft98", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([-9.581709119415720e-05, -9.580618954551464e-05, -9.577336671302881e-05, -9.595177197301267e-05, -9.581120922066092e-05, -9.581120922066092e-05, 1.437412825221082e-04, 1.438004599889653e-04, 1.457671017910397e-04, 1.473391518510379e-04, 1.437440961245509e-04, 1.437440961245509e-04, -2.335989523460032e-05, -2.310130489870062e-05, -2.431673029363522e-05, -1.255414202023920e-05, -2.329387119195227e-05, -2.329387119195227e-05, 8.206900561755045e-03, 7.732856991166956e-03, -1.617668047930900e-05, 4.413330799852861e-03, 8.047247795181758e-03, 8.047247795181761e-03, 8.509632336144225e-02, 8.503317110155235e-02, 5.222015265427161e-02, 1.251127175979624e-16, 8.582756467390056e-02, 8.582756467390056e-02, -2.028311536228845e-06, -3.428563301193487e-05, -9.079992902743612e-08, -1.043918955430239e-06, -9.776338404000244e-05, -2.876035874679835e-05, -8.180488963646206e-09, -1.123926916810719e-06, 5.243103413000140e-04, 4.928239749707317e-04, 4.619328571204019e-04, 1.650974720182506e-03, -2.434171105048610e-06, -1.283736077864587e-04, -4.796239196127679e-06, -1.624701279794224e-04, 2.279940664270672e-04, -1.400333314610669e-04, -8.796156446758842e-07, -1.077624600557179e-07, -1.474972668263869e-09, -3.745143867143875e-04, 3.047317041199255e-02, 4.927206523782168e-02, -2.902900609964840e-17, -4.600491319566222e-22, -1.873103495952987e-22, -2.024232211666943e-07, -1.037379416047722e-16, -9.138871131667319e-18, -3.675989474077649e-13, -2.429114167713824e-12, -7.513683899367274e-15, -3.800889236722754e-09, -4.641120745347583e-12, -2.164004707378775e-15, -1.362472124424524e-14, 2.421716548450700e-03, -6.966217854466558e-06, -9.679695648471799e-04, -1.536914870117236e-04, -2.033796955368834e-06, -7.942710319521226e-06, -9.696598970506209e-09, -5.451544720164175e-09, -1.506364898389418e-06, -3.060631035532749e-06, -2.220291683084208e-05, 1.516573794581951e-03, -1.544487467492089e-11, 3.626114394887669e-10, 1.314503967020052e-03, -2.831763182393345e-09, 4.679436355397862e-02, -5.627527198537926e-14, -1.786118487205416e-21, -6.511485404280473e-19, 1.154359903338497e-01, 3.119388838894586e-01, -6.772420738267103e-18])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ft98_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ft98", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
