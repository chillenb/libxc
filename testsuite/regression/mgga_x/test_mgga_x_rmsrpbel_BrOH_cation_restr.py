
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_rmsrpbel_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmsrpbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.187326092109414e+01, -2.187330476819956e+01, -2.187355098912214e+01, -2.187289785550209e+01, -2.187323278491559e+01, -2.187323278491559e+01, -3.380489047712678e+00, -3.380486333971887e+00, -3.380623174109517e+00, -3.382111922855037e+00, -3.381076923464918e+00, -3.381076923464918e+00, -6.543916745346083e-01, -6.541330265374370e-01, -6.506294083478050e-01, -6.589749708535267e-01, -6.561641180444667e-01, -6.561641180444667e-01, -2.101589213602442e-01, -2.103903892836030e-01, -7.343166319626806e-01, -1.782495753973986e-01, -1.882633005885753e-01, -1.882633005885753e-01, -1.009364494008897e-02, -1.062397932832220e-02, -5.861358606130702e-02, -5.829395465871759e-03, -7.325081590875081e-03, -7.325081590875081e-03, -5.293240023449903e+00, -5.293361299549777e+00, -5.293253473683677e+00, -5.293360405560572e+00, -5.293297099720006e+00, -5.293297099720006e+00, -2.109607905934517e+00, -2.126305983163516e+00, -2.111088745457855e+00, -2.125551587218638e+00, -2.118385105526470e+00, -2.118385105526470e+00, -5.915321393923020e-01, -6.281171158878228e-01, -5.320653932694840e-01, -5.360466710477001e-01, -6.009357181525945e-01, -6.009357181525945e-01, -1.450812154010603e-01, -2.259036997622399e-01, -1.361378100556394e-01, -1.825017540304180e+00, -1.572033496847907e-01, -1.572033496847907e-01, -4.497766541329658e-03, -5.698749801072900e-03, -4.357538022585594e-03, -9.481593879980212e-02, -5.249482297479785e-03, -5.249482297479785e-03, -5.888452988413018e-01, -5.887727487267521e-01, -5.887992292142378e-01, -5.888158757156883e-01, -5.888067985901613e-01, -5.888067985901613e-01, -5.713792680856010e-01, -5.207243903040416e-01, -5.343256957311955e-01, -5.483050000368220e-01, -5.409097355295478e-01, -5.409097355295478e-01, -6.520802686184841e-01, -2.702134432052911e-01, -3.008754952456562e-01, -3.544184684795424e-01, -3.263535301355929e-01, -3.263535301355929e-01, -4.721789090945757e-01, -5.610064916373885e-02, -7.648035923927694e-02, -3.387562712427130e-01, -1.174615265810626e-01, -1.174615265810626e-01, -1.424523243919322e-02, -1.523312330620328e-03, -3.197499979622570e-03, -1.115004668533063e-01, -4.857413173248372e-03, -4.857413173248368e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_rmsrpbel_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmsrpbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.747473543149560e+01, -2.747484253107858e+01, -2.747535691071952e+01, -2.747376622095920e+01, -2.747459422556064e+01, -2.747459422556064e+01, -4.178717170743650e+00, -4.178924739349106e+00, -4.184627053393058e+00, -4.183775853727330e+00, -4.182976993242441e+00, -4.182976993242441e+00, -7.900553777531306e-01, -7.881119866141809e-01, -7.403811079609491e-01, -7.526844366099991e-01, -7.507836133313688e-01, -7.507836133313688e-01, -1.393457646488789e-01, -1.407509878073527e-01, -8.653057444980599e-01, -1.310650931184750e-01, -1.434227484426322e-01, -1.434227484426323e-01, -1.345819325345196e-02, -1.416530577109627e-02, -7.815116531111425e-02, -7.772527287829012e-03, -9.766775454500110e-03, -9.766775454500110e-03, -6.772928559474829e+00, -6.775266459787765e+00, -6.773066114590264e+00, -6.775128497306385e+00, -6.774098529754078e+00, -6.774098529754078e+00, -2.180719142029570e+00, -2.231996437774683e+00, -2.168662055423284e+00, -2.219246079844576e+00, -2.215593648940123e+00, -2.215593648940123e+00, -7.365218914308326e-01, -8.490281097157456e-01, -6.698049869348022e-01, -7.306576360756752e-01, -7.544214217360028e-01, -7.544214217360028e-01, -1.463047930584090e-01, -1.267530050337496e-01, -1.453237090167051e-01, -2.540874857490363e+00, -1.217794420052600e-01, -1.217794420052600e-01, -5.997022055106211e-03, -7.598333068097201e-03, -5.810050696780792e-03, -1.226120481392244e-01, -6.999309729973048e-03, -6.999309729973048e-03, -7.803177702453253e-01, -7.706712732944486e-01, -7.740510601189171e-01, -7.768536567988911e-01, -7.754503718558150e-01, -7.754503718558150e-01, -7.615636486007846e-01, -6.064746395470469e-01, -6.497743407494950e-01, -6.943346883955874e-01, -6.713188455518351e-01, -6.713188455518351e-01, -8.932557361487095e-01, -1.809617325006294e-01, -2.321749240024945e-01, -3.980069414017600e-01, -3.074890347257758e-01, -3.074890347257758e-01, -5.280421915015645e-01, -7.480083290601466e-02, -1.018795221098599e-01, -4.015126497552418e-01, -1.293640449330694e-01, -1.293640449330693e-01, -1.899364325225763e-02, -2.031083107493770e-03, -4.263333306163427e-03, -1.289319266187338e-01, -6.476550897664496e-03, -6.476550897664490e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rmsrpbel_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmsrpbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.837707883165240e-09, -4.837617378687289e-09, -4.836763440614415e-09, -4.838091808295891e-09, -4.837460384261663e-09, -4.837460384261663e-09, -8.263372063423379e-06, -8.269321550941545e-06, -8.437750420098412e-06, -8.461434444687106e-06, -8.422103978036686e-06, -8.422103978036686e-06, -6.298421384140511e-03, -6.311743439512093e-03, -6.643415079146038e-03, -6.688358768018334e-03, -6.673823481142855e-03, -6.673823481142855e-03, -1.829567697341370e+00, -1.854611828364906e+00, -2.680139375238912e-03, -1.743985411687073e+00, -1.441702671121029e+00, -1.441702671121027e+00, -5.460520552349632e-172, -1.807877943409979e-150, -1.696706564215966e-04, 0.000000000000000e+00, -1.613881965358937e-307, -1.613881965358937e-307, -1.162007549631162e-06, -1.161237632508956e-06, -1.161636293003889e-06, -1.160971739536651e-06, -1.161789550541354e-06, -1.161789550541354e-06, -1.264618020499265e-04, -1.125944068974052e-04, -1.206776818112482e-04, -1.071647871841890e-04, -1.213230450706248e-04, -1.213230450706248e-04, -2.054712502835282e-02, -1.496885967292748e-02, -2.284318079399828e-02, -1.881202997135728e-02, -1.871410168155791e-02, -1.871410168155791e-02, -1.652679115250512e+00, -1.341640248896445e+00, -1.616696656435592e+00, -1.630402955504552e-04, -2.929491551771197e+00, -2.929491551771201e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -6.081789988191941e-01, 0.000000000000000e+00, 0.000000000000000e+00, -9.034212157135721e-03, -9.130982178883798e-03, -9.097189626259612e-03, -9.069644957008731e-03, -9.084459558522868e-03, -9.084459558522868e-03, -1.222970826704303e-02, -1.844625324230490e-02, -1.667481504177664e-02, -1.490070365829092e-02, -1.610428167931706e-02, -1.610428167931707e-02, -1.320082526953807e-02, -6.349457778049755e-01, -4.161709885993530e-01, -1.374912034912940e-01, -2.663129041962355e-01, -2.663129041962355e-01, -5.373470399528940e-02, -2.131618133637401e-05, -2.483700640477150e-02, -1.931149174452541e-01, -2.477165807630592e+00, -2.477165807630598e+00, -2.119361950419685e-94, 0.000000000000000e+00, 0.000000000000000e+00, -2.260168053169424e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rmsrpbel_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmsrpbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rmsrpbel_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmsrpbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.296580905752853e-04, 1.296513140239020e-04, 1.295552522895152e-04, 1.296531992698090e-04, 1.296113190089844e-04, 1.296113190089844e-04, 1.411375122758289e-03, 1.415371047842178e-03, 1.529079209715894e-03, 1.548309274793311e-03, 1.518641200578161e-03, 1.518641200578161e-03, 8.983024276628624e-03, 8.944566580810663e-03, 8.153233476317315e-03, 9.401980149484108e-03, 9.063905655284626e-03, 9.063905655284626e-03, 9.676280232559174e-02, 1.047402479503700e-01, 1.240235067957922e-03, 1.365719193558047e-02, 1.869408221162504e-02, 1.869408221162496e-02, 0.000000000000000e+00, 0.000000000000000e+00, 1.136977991137046e-10, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 3.654836330621683e-05, 3.609033701304423e-05, 3.578534497693150e-05, 3.541440548460506e-05, 3.669665780147153e-05, 3.669665780147153e-05, 8.851373151390070e-03, 7.547674182027373e-03, 7.971680455181974e-03, 6.678100413635086e-03, 8.540319331373421e-03, 8.540319331373421e-03, 4.278573881042603e-02, 3.954926451948297e-02, 3.200954286123957e-02, 2.756369190795374e-02, 4.021871283138136e-02, 4.021871283138136e-02, 1.049512238352811e-03, 6.752890138940515e-02, 4.920921148317268e-04, 1.063918450542989e-02, 1.791086864857480e-02, 1.791086864857487e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 9.474690584461340e-06, 0.000000000000000e+00, 0.000000000000000e+00, 6.103203505354175e-03, 5.970965001208861e-03, 6.018615557234377e-03, 6.058319030740400e-03, 6.041732932854102e-03, 6.041732932854102e-03, 1.260672803952557e-02, 9.499284596395577e-03, 1.113537623912869e-02, 1.219899598547828e-02, 1.240653867965585e-02, 1.240653867965587e-02, 4.125921945981056e-02, 6.514118749088935e-02, 7.938750166722452e-02, 5.337597782890159e-02, 7.678149092889042e-02, 7.678149092889039e-02, 5.107056375429962e-02, 7.930851236165699e-11, 7.818807863972521e-08, 7.510044486387224e-02, 7.886571493089493e-04, 7.886571493089592e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.519291757293468e-03, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
