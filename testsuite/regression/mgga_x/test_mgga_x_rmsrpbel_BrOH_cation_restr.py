
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_rmsrpbel_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmsrpbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.037222225517052e+01, -2.037231900181139e+01, -2.037275058403039e+01, -2.037131383785136e+01, -2.037206640039070e+01, -2.037206640039070e+01, -3.202902913795306e+00, -3.202951124781026e+00, -3.204267891821760e+00, -3.204028414811436e+00, -3.203721341399474e+00, -3.758189441748243e+00, -5.909620895542393e-01, -7.802295316701217e-01, -7.744473013502168e-01, -7.737319824253956e-01, -7.739798731375144e-01, -7.739798731375144e-01, -2.146548845060890e-01, -2.161041506102590e-01, -6.784502127736431e-01, -1.914198216197505e-01, -2.000164075731388e-01, -2.000164075731388e-01, -1.009364494008897e-02, -1.062397932832220e-02, -5.861359208004814e-02, -5.829395465871759e-03, -7.325081590875081e-03, -7.325081590875081e-03, -5.293933517479592e+00, -5.294046299569811e+00, -5.293932418355253e+00, -5.069939082394976e+00, -5.293993551284561e+00, -5.293993551284561e+00, -1.780080700476915e+00, -1.797907241885402e+00, -1.766780400453137e+00, -1.782631463465715e+00, -1.796410378208864e+00, -2.158157278426638e+00, -6.155993125297531e-01, -6.529218523694211e-01, -5.812847311649122e-01, -5.916937992175102e-01, -6.224582016666368e-01, -5.543553764782444e-01, -7.854211623075517e-02, -2.335167054875080e-01, -7.265631510059704e-02, -1.998595797981471e+00, -1.629086974071982e-01, -1.629086974071981e-01, -2.310807544667004e-03, -5.698749801072900e-03, -4.357538022585594e-03, -4.885955798536529e-02, -2.697014886269652e-03, -5.249482297479785e-03, -5.904834351093203e-01, -5.903542869237136e-01, -5.822889599212644e-01, -5.904343369195892e-01, -5.904177991104778e-01, -5.904177991104778e-01, -5.749156113995086e-01, -5.225834072707409e-01, -5.367769552677012e-01, -5.512888981095605e-01, -5.438184921576343e-01, -4.966005807647782e-01, -6.885546877027816e-01, -1.902157112026346e-01, -3.117336328731830e-01, -3.157661878082014e-01, -3.423594865240455e-01, -3.423594865240455e-01, -4.183986597350650e-01, -5.610064964697280e-02, -7.648338837059558e-02, -3.603806775449049e-01, -6.222260604576304e-02, -1.191018693287796e-01, -1.424523243919322e-02, -1.523312330620328e-03, -3.197499979622570e-03, -1.123082468882587e-01, -4.857413173248372e-03, -4.857413173248368e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_rmsrpbel_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmsrpbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.930994316884150e+01, -2.931005169263011e+01, -2.931054851286171e+01, -2.930893496405842e+01, -2.930977861876877e+01, -2.930977861876877e+01, -4.533437392117984e+00, -4.533307841679542e+00, -4.529887421951528e+00, -4.531699908749326e+00, -4.531035970951045e+00, -4.276217232632959e+00, -8.305682098012296e-01, -7.800878063348712e-01, -7.517429114092402e-01, -7.613987837657851e-01, -7.592630641415561e-01, -7.592630641415561e-01, -1.969159893550562e-01, -2.002202663487316e-01, -9.234418040378857e-01, -1.684544475378790e-01, -1.719946234565849e-01, -1.719946234565852e-01, -1.345819325345196e-02, -1.416530577109627e-02, -7.815141319361221e-02, -7.772527287829012e-03, -9.766775454500110e-03, -9.766775454500110e-03, -6.773570681130932e+00, -6.775888457922517e+00, -6.773694501203500e+00, -7.109334917929816e+00, -6.774736911995022e+00, -6.774736911995022e+00, -2.571496095804475e+00, -2.592594291695680e+00, -2.554119065633141e+00, -2.574783107844546e+00, -2.590772771006552e+00, -2.394624420230257e+00, -7.407928218510115e-01, -8.232495283099230e-01, -6.729855894810921e-01, -7.130176608009249e-01, -7.561885519280754e-01, -7.613437041768292e-01, -1.047971373979480e-01, -2.011244445397030e-01, -9.692700896333716e-02, -2.441248928670499e+00, -1.520569604136698e-01, -1.520569604136699e-01, -3.081076728052704e-03, -7.598333068097201e-03, -5.810050696780792e-03, -6.515501372676134e-02, -3.596019864072367e-03, -6.999309729973048e-03, -7.785189619637864e-01, -7.698174019503690e-01, -7.853725507037461e-01, -7.753967470776363e-01, -7.741307628241402e-01, -7.741307628241402e-01, -7.568421200075098e-01, -6.151883147092815e-01, -6.557656295177782e-01, -6.962873492553622e-01, -6.755772954027803e-01, -7.133465419167352e-01, -8.581797239091796e-01, -2.592591082826078e-01, -3.037130340814803e-01, -4.563919504712197e-01, -3.583269102475525e-01, -3.583269102475525e-01, -5.873278376179437e-01, -7.480085556924483e-02, -1.019547322814212e-01, -4.138548919246041e-01, -8.300450442622190e-02, -1.418272527994440e-01, -1.899364325225763e-02, -2.031083107493770e-03, -4.263333306163427e-03, -1.367205808700133e-01, -6.476550897664496e-03, -6.476550897664490e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rmsrpbel_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmsrpbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.257483265825711e-08, -1.257483282017308e-08, -1.257473337815851e-08, -1.257474095377077e-08, -1.257475196490157e-08, -1.257475196490157e-08, -9.559836220043167e-06, -9.558231942470840e-06, -9.514183050923842e-06, -9.528783325582364e-06, -9.531195370862455e-06, -5.195824060241737e-06, -5.869244451595322e-03, -3.238394447287805e-03, -3.444449611954571e-03, -3.406791182835935e-03, -3.413923355988869e-03, -3.413923355988869e-03, -6.187316424950471e-01, -5.963585790793545e-01, -2.861731933615547e-03, -9.353829874590602e-01, -8.608003897727167e-01, -8.608003897727086e-01, -1.485677221306328e-173, -5.937422154446184e-153, -2.298880040232777e-05, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.145460282538286e-06, -1.144906751527090e-06, -1.145434955538131e-06, -3.482715980867764e-06, -1.145179757075677e-06, -1.145179757075677e-06, -9.887885193169112e-05, -9.649856389375031e-05, -1.003531439545105e-04, -9.851230805519619e-05, -9.674791553605700e-05, -4.920001428562393e-05, -6.752682653916593e-03, -5.041092028717171e-03, -8.894920248459750e-03, -7.898636193342766e-03, -6.386334048339293e-03, -1.062261900474995e-02, -1.500796122748111e+01, -4.638317725384726e-01, -2.048878750919645e+01, -5.969305297936977e-05, -1.492212061952271e+00, -1.492212061952260e+00, -2.000855171269546e+07, 0.000000000000000e+00, 0.000000000000000e+00, -1.001270555259522e+02, -1.078294497517707e+07, 0.000000000000000e+00, -7.128303644453840e-03, -7.233962449577433e-03, -1.456697929237897e-02, -7.166058037178973e-03, -7.181333412081427e-03, -7.181333412081427e-03, -7.947520080579678e-03, -1.335014066351318e-02, -1.147007019040886e-02, -9.897865064053650e-03, -1.066772576277278e-02, -2.982118175521362e-02, -4.134251754619567e-03, -4.656849578089801e-01, -1.306892861240355e-01, -9.893623499873708e-02, -8.303862691610812e-02, -8.303862691610822e-02, -3.202436793450057e-02, -6.537575836172250e-06, -5.294338151624796e-03, -6.078789783676331e-02, -3.808802611923945e+01, -1.283989576610821e+00, -3.173200735244466e-125, 0.000000000000000e+00, 0.000000000000000e+00, -1.237940044774484e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_rmsrpbel_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_rmsrpbel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.258842256385371e-03, 1.258862253390797e-03, 1.258940557775381e-03, 1.258644608806395e-03, 1.258801297099923e-03, 1.258801297099923e-03, 1.976545940168978e-03, 1.975597493300502e-03, 1.949810368991956e-03, 1.960228412924120e-03, 1.959326264862844e-03, -9.421261095555663e-18, 4.067666298140290e-03, -4.871199291038830e-17, -2.219729112626191e-17, 1.147092165272806e-18, -2.717507994568796e-17, -2.717507994568796e-17, 1.153331453630869e-16, -1.054692317784973e-16, 7.644536582212476e-04, 6.309303328865036e-16, 4.444974008474120e-16, 2.577143159962691e-17, 0.000000000000000e+00, 0.000000000000000e+00, 1.205820692698625e-21, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.012658560283761e-18, 1.160013766778672e-19, -5.811850502492137e-20, 5.069994840972191e-03, -9.260155617952669e-19, -9.260155617952669e-19, 3.816535820659049e-03, 3.868061124686447e-03, 3.740140952195244e-03, 3.824026434113810e-03, 3.867641060192435e-03, 5.021635372285056e-19, 1.463903511121745e-17, 1.184149876067893e-17, -3.059348145403700e-17, 2.352854499218264e-17, 1.670043456572000e-17, 1.034555337735905e-02, 4.057079738009378e-05, 2.397891449195261e-16, 2.880503158527605e-05, -1.472378979026536e-18, 3.810378206746620e-16, 1.627079686030979e-16, 1.062896805151605e-12, 0.000000000000000e+00, 0.000000000000000e+00, 5.560407446112376e-06, 1.817103945995616e-11, 0.000000000000000e+00, -9.688089792058101e-19, 4.446319469716705e-18, 2.322544947316561e-02, -9.146506849925921e-21, 1.016149663014983e-18, 1.016149663014983e-18, -2.229220327717381e-18, -3.336463454717710e-18, 6.121141470578789e-18, -8.342994971923757e-18, 7.887995567141720e-18, 4.098157658908413e-02, 8.261685554311044e-20, 3.015751482562564e-03, 1.218083627796723e-16, 2.116099736174500e-02, -1.450662520402432e-17, 2.642160984552308e-17, 1.365083787706797e-02, 7.335766285944609e-22, -1.134767479857837e-18, 2.243771505151336e-17, 2.981785050298705e-05, 2.643158983586092e-16, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.194785387883549e-16, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
