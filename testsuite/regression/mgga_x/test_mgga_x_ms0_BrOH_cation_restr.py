
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ms0_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.283942146742878e+01, -2.283948134130545e+01, -2.283978191532207e+01, -2.283889088333411e+01, -2.283935286895521e+01, -2.283935286895521e+01, -3.366385793861740e+00, -3.366402417418350e+00, -3.367062655335214e+00, -3.368348101894222e+00, -3.367330170106933e+00, -3.367330170106933e+00, -6.383129775381549e-01, -6.379139257988053e-01, -6.305479958655102e-01, -6.403946731389693e-01, -6.372908056302812e-01, -6.372908056302812e-01, -1.905016751406911e-01, -1.922615423305027e-01, -7.041919805026319e-01, -1.460301281546055e-01, -1.620939984405582e-01, -1.620939984405583e-01, -7.216304716975036e-03, -7.595249810439068e-03, -4.169033580613840e-02, -4.168206930443509e-03, -5.237412941978659e-03, -5.237412941978659e-03, -5.558803616891548e+00, -5.559600794145741e+00, -5.558845571446509e+00, -5.559549238224094e+00, -5.559204850495466e+00, -5.559204850495466e+00, -2.098398564603019e+00, -2.119773491354202e+00, -2.094690861055488e+00, -2.113181675198698e+00, -2.112250186587938e+00, -2.112250186587938e+00, -6.070936787046218e-01, -6.547945660645202e-01, -5.330850979574162e-01, -5.395888699261167e-01, -6.193937950546305e-01, -6.193937950546305e-01, -1.055370418315387e-01, -1.923902953600364e-01, -9.802410095253378e-02, -1.847035669250993e+00, -1.216777114992994e-01, -1.216777114992994e-01, -3.216113363667273e-03, -4.074781572519269e-03, -3.115678886034419e-03, -6.693172865717277e-02, -3.753430663136383e-03, -3.753430663136383e-03, -6.263087789418196e-01, -6.236413137366195e-01, -6.245818127177294e-01, -6.253536072493620e-01, -6.249669160541560e-01, -6.249669160541560e-01, -6.079870091726051e-01, -5.303585947243120e-01, -5.524682909818993e-01, -5.743690392506502e-01, -5.630436784200566e-01, -5.630436784200566e-01, -6.735021568098409e-01, -2.424935126589659e-01, -2.834253058866563e-01, -3.509167947027739e-01, -3.179503014676306e-01, -3.179503014676305e-01, -4.764589074509825e-01, -3.993046095572697e-02, -5.421042112860473e-02, -3.407369969202922e-01, -8.414985074326670e-02, -8.414985074326671e-02, -1.018282230120494e-02, -1.089275249588582e-03, -2.286388018272396e-03, -7.933291932628443e-02, -3.473109901768985e-03, -3.473109901768983e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ms0_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.985089446035293e+01, -2.985099770747716e+01, -2.985156354198963e+01, -2.985003153038456e+01, -2.985081899316810e+01, -2.985081899316810e+01, -4.283373980774738e+00, -4.283685775069307e+00, -4.292419434345526e+00, -4.292563144819455e+00, -4.290711591557530e+00, -4.290711591557530e+00, -8.113073528810241e-01, -8.093724358277380e-01, -7.666738415113832e-01, -7.846731894552449e-01, -7.805975054861262e-01, -7.805975054861262e-01, -1.882040247936478e-01, -1.870381164225752e-01, -8.322168095830922e-01, -1.675436221869299e-01, -1.846598571708785e-01, -1.846598571708786e-01, -9.617913059974755e-03, -1.012241326071358e-02, -5.499350330756264e-02, -5.556907322994208e-03, -6.981646968164047e-03, -6.981646968164047e-03, -7.334621612512042e+00, -7.336269956297222e+00, -7.334755915091492e+00, -7.336208263286856e+00, -7.335427240913678e+00, -7.335427240913678e+00, -2.421614551126715e+00, -2.486946797071275e+00, -2.427020505502108e+00, -2.491085334446931e+00, -2.456288880552458e+00, -2.456288880552458e+00, -7.869414382327160e-01, -9.175309219867502e-01, -7.005327880337449e-01, -7.698755601691408e-01, -8.075298778042025e-01, -8.075298778042025e-01, -1.309933242380055e-01, -1.907232118886569e-01, -1.227319318091660e-01, -2.718012896218841e+00, -1.421098235715204e-01, -1.421098235715204e-01, -4.287781114832268e-03, -5.432330662410028e-03, -4.153441269292264e-03, -8.642697011643559e-02, -5.003623375159749e-03, -5.003623375159749e-03, -8.339838200950391e-01, -8.264252569062795e-01, -8.290570981886981e-01, -8.312511859797492e-01, -8.301506628053472e-01, -8.301506628053472e-01, -8.139307781208004e-01, -6.732341933428672e-01, -7.098514118129654e-01, -7.497025755003004e-01, -7.284693399256875e-01, -7.284693399256875e-01, -9.672043768704549e-01, -2.465356425046742e-01, -2.819589612028613e-01, -4.197468293379315e-01, -3.401153456340069e-01, -3.401153456340068e-01, -5.678065764176348e-01, -5.274306926884516e-02, -7.100113391018567e-02, -4.244848111029001e-01, -1.057359249822181e-01, -1.057359249822181e-01, -1.356743155394200e-02, -1.452336908934304e-03, -3.048323730802998e-03, -9.998657893550807e-02, -4.629966597053862e-03, -4.629966597053858e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms0_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.497829588268043e-09, -2.497737327243967e-09, -2.496555940989177e-09, -2.497896290048439e-09, -2.497304374519139e-09, -2.497304374519139e-09, -8.253505935931901e-06, -8.263476225486087e-06, -8.544713428900967e-06, -8.573173617269105e-06, -8.511935762401501e-06, -8.511935762401501e-06, -6.460473371114730e-03, -6.450631954323460e-03, -6.129316667324405e-03, -6.199684086522670e-03, -6.209952587359663e-03, -6.209952587359663e-03, -1.184075112338662e+00, -1.265819571429742e+00, -2.855028156829641e-03, -5.500303343826700e-01, -5.449772067155260e-01, -5.449772067155250e-01, -5.656002381091800e-01, -5.975557856677908e-01, -3.566615909549100e-01, -5.128046560922077e-01, -6.519382978330334e-01, -6.519382978330351e-01, -3.304040422629052e-07, -3.300192010334231e-07, -3.297882541124305e-07, -3.294753151886462e-07, -3.305157981055865e-07, -3.305157981055865e-07, -1.159875986965073e-04, -9.856963810475263e-05, -1.051902341941066e-04, -8.837544952738560e-05, -1.112514995276605e-04, -1.112514995276605e-04, -2.594809362724912e-02, -2.078257589629080e-02, -2.826019415330491e-02, -2.575906737235261e-02, -2.353241196180918e-02, -2.353241196180918e-02, -3.662981435738367e-01, -6.801630668239866e-01, -3.727395581481319e-01, -2.357906269586237e-04, -8.860517575243428e-01, -8.860517575243440e-01, -6.755045700427686e-01, -6.035495560583408e-01, -3.791918837234580e+00, -4.534724336384515e-01, -1.764575412489756e+00, -1.764575412489751e+00, -5.644678811903489e-03, -5.534174922055255e-03, -5.573420549682643e-03, -5.606459423213960e-03, -5.591905331128721e-03, -5.591905331128721e-03, -1.058481818325825e-02, -1.085452411035133e-02, -1.141482069732885e-02, -1.147142666222824e-02, -1.202824502914586e-02, -1.202824502914588e-02, -1.904988927587808e-02, -3.811917397630953e-01, -3.291826729325141e-01, -1.492854386885420e-01, -2.549683088215171e-01, -2.549683088215172e-01, -5.924713989125615e-02, -3.273383157386400e-01, -3.381133474990651e-01, -2.344790296431751e-01, -6.323196182863305e-01, -6.323196182863303e-01, -4.565714280586073e-01, -2.959678664394955e+00, -1.432807204156499e+00, -7.796222943052217e-01, -2.228710138109363e+00, -2.228710138109367e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms0_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.256783849916206e-04, 2.256673817040583e-04, 2.255024270437121e-04, 2.256611586939716e-04, 2.255946036632152e-04, 2.255946036632152e-04, 2.334950551790536e-03, 2.341664180153307e-03, 2.532460314299195e-03, 2.561018288799294e-03, 2.513201033517436e-03, 2.513201033517436e-03, 1.349114707743569e-02, 1.339366196814368e-02, 1.125765419004884e-02, 1.304521837627937e-02, 1.260274683346407e-02, 1.260274683346407e-02, 8.581545304489034e-02, 9.590806358870667e-02, 1.909552991896008e-03, 8.325547673012572e-03, 1.390708324633597e-02, 1.390708324633591e-02, 8.985484501749965e-10, 2.612939244795474e-10, 7.036380919885011e-07, 1.637041763910057e-15, 1.135356390428841e-13, 1.135356390531157e-13, 6.573448654045459e-05, 6.495692775936900e-05, 6.436404407629735e-05, 6.373691779621678e-05, 6.602515469965287e-05, 6.602515469965287e-05, 1.203948875196197e-02, 1.034010936429461e-02, 1.066781014720889e-02, 8.994974098976703e-03, 1.175371880942279e-02, 1.175371880942279e-02, 7.281567725565376e-02, 7.484418037505729e-02, 5.332775362926624e-02, 5.133228165941595e-02, 6.946989090850987e-02, 6.946989090850987e-02, 6.282048966008036e-04, 4.686216935203458e-02, 3.230146363567251e-04, 2.017389840688867e-02, 1.001983431791042e-02, 1.001983431791045e-02, 3.472057072507835e-18, 1.419240562738783e-16, 1.145658602510904e-14, 2.255544543031278e-05, 1.500522058136910e-15, 1.500522055245108e-15, 1.187367744400887e-02, 1.132290788041536e-02, 1.151624387922791e-02, 1.167890134162629e-02, 1.160360739561752e-02, 1.160360739561752e-02, 2.471455549802663e-02, 1.440380383823730e-02, 1.836189498249043e-02, 2.171414260528292e-02, 2.127800459431949e-02, 2.127800459431951e-02, 7.775930017463988e-02, 5.561847279404848e-02, 8.318772824838046e-02, 7.758022341883423e-02, 9.630200603854222e-02, 9.630200603854222e-02, 7.691513709681688e-02, 3.435162997884698e-06, 3.377946031065658e-06, 1.182754327625299e-01, 5.590692660036808e-04, 5.590692660036788e-04, 2.283850651372565e-13, 3.339609262968422e-22, 6.464155567729268e-16, 1.293047779258167e-03, 3.696198855702831e-15, 3.696198857919038e-15])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
