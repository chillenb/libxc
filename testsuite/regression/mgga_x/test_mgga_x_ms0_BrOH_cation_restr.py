
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_ms0_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.090790304600544e+01, -2.090804018041316e+01, -2.090863613003962e+01, -2.090660142098460e+01, -2.090766941019816e+01, -2.090766941019816e+01, -3.179203750579316e+00, -3.179292135423600e+00, -3.181657619068976e+00, -3.180994542925460e+00, -3.180735435530557e+00, -3.767034694406867e+00, -5.602720172939034e-01, -7.373414265754504e-01, -7.205181801964604e-01, -7.251941847764203e-01, -7.242195916740176e-01, -7.242195916740176e-01, -1.928867851311760e-01, -1.955081932114236e-01, -6.322991007503634e-01, -1.505168027620979e-01, -1.670162591898023e-01, -1.670162591898023e-01, -7.216319136966725e-03, -7.595279318944425e-03, -4.172189008206841e-02, -4.168235619431231e-03, -5.237452910777120e-03, -5.237452910777120e-03, -5.558993341274272e+00, -5.559788182343580e+00, -5.559031166580489e+00, -5.301030733116549e+00, -5.559395455663151e+00, -5.559395455663151e+00, -1.744900080323299e+00, -1.767258495312570e+00, -1.728012569448303e+00, -1.747963292943676e+00, -1.765513123613945e+00, -2.140350510412272e+00, -6.312409468761176e-01, -6.817916769342360e-01, -5.868473545318867e-01, -6.070626742766698e-01, -6.406699095210275e-01, -5.554059369987917e-01, -7.252652480356493e-02, -1.960048889856458e-01, -6.708624709309385e-02, -2.061475950487997e+00, -1.235335521736019e-01, -1.235335521736019e-01, -2.133135018367021e-03, -4.074842343529670e-03, -3.115715991386667e-03, -4.510567312374001e-02, -2.489647795259864e-03, -3.753503601064984e-03, -6.270742779306129e-01, -6.243608208390325e-01, -6.185041044914306e-01, -6.261027989864699e-01, -6.257098688891988e-01, -6.257098688891988e-01, -6.101960069280616e-01, -5.311716977231181e-01, -5.536989233160906e-01, -5.760398974009699e-01, -5.646276759730191e-01, -5.040445558908127e-01, -7.158052781904156e-01, -1.773939796565360e-01, -2.906127896414960e-01, -3.090925844462690e-01, -3.308126297804094e-01, -3.308126297804094e-01, -4.161695366926439e-01, -3.994682025611224e-02, -5.429810979506947e-02, -3.626143569431972e-01, -5.745134241679381e-02, -8.479793257876536e-02, -1.018368793759934e-02, -1.089282178323325e-03, -2.286392435533983e-03, -7.974369039961478e-02, -3.473159121672394e-03, -3.473159121672391e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_ms0_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.211539065758633e+01, -3.211553309180677e+01, -3.211617248829664e+01, -3.211405592021554e+01, -3.211516453207462e+01, -3.211516453207462e+01, -4.757909124882786e+00, -4.757644343150415e+00, -4.750580566814656e+00, -4.753904665138657e+00, -4.753056786957456e+00, -4.857178289560803e+00, -8.311597308271742e-01, -9.339829817872568e-01, -9.099158332407773e-01, -9.170614049400696e-01, -9.155390627872737e-01, -9.155390627872737e-01, -2.424483521387231e-01, -2.459187732906488e-01, -8.802590479208839e-01, -1.894411978264409e-01, -2.093976714680671e-01, -2.093976714680674e-01, -9.617977945117052e-03, -1.012254030480328e-02, -5.513949555929648e-02, -5.557022388985019e-03, -6.981808194865905e-03, -6.981808194865905e-03, -7.337125952320612e+00, -7.338723967791421e+00, -7.337207491030933e+00, -7.757796212890260e+00, -7.337931773727972e+00, -7.337931773727972e+00, -2.717498735352955e+00, -2.742038277638650e+00, -2.695686194225026e+00, -2.721357969891482e+00, -2.740055182607128e+00, -2.748562785426847e+00, -8.222546865501367e-01, -8.968629325174706e-01, -7.589365597213444e-01, -7.909773838123529e-01, -8.361193245284078e-01, -7.843708643651136e-01, -9.684873402867131e-02, -2.457179529591311e-01, -8.955082496125023e-02, -2.693361897240644e+00, -1.562316964621117e-01, -1.562316964621118e-01, -2.844180028101885e-03, -5.432573990698958e-03, -4.153590207472566e-03, -6.015853817624343e-02, -3.319530424697297e-03, -5.003915629447969e-03, -8.336972663403389e-01, -8.278170422379714e-01, -8.424132118075593e-01, -8.315835652649087e-01, -8.307290606051200e-01, -8.307290606051200e-01, -8.109469292974076e-01, -6.890057077253432e-01, -7.234425083937799e-01, -7.580413177763529e-01, -7.403217095976410e-01, -7.731538921738765e-01, -9.392037868490827e-01, -2.476551594862045e-01, -3.671351699487914e-01, -4.819453366115243e-01, -4.213167290513861e-01, -4.213167290513860e-01, -6.130532499874692e-01, -5.282735520263909e-02, -7.141379924075804e-02, -4.682847165103620e-01, -7.668278342662019e-02, -1.091678635490520e-01, -1.357091153951133e-02, -1.452364624273557e-03, -3.048341447678753e-03, -1.028642828784389e-01, -4.630163962976410e-03, -4.630163962976394e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms0_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.935484746389996e-08, -1.935483704832599e-08, -1.935464072140860e-08, -1.935480963747603e-08, -1.935474398603225e-08, -1.935474398603225e-08, -1.288219850994986e-05, -1.287844017148701e-05, -1.277648249164427e-05, -1.281350197985278e-05, -1.281488875015307e-05, -1.170663506029595e-06, -8.839465962232052e-03, -6.115298036011602e-04, -6.227167859566919e-04, -6.286057017256301e-04, -6.270152152231473e-04, -6.270152152231473e-04, -1.020982857805509e-01, -1.001101861731184e-01, -4.456002875768822e-03, -1.212496066923875e-01, -1.208168113065225e-01, -1.208168113065170e-01, -5.540357836001465e-01, -5.771657867859136e-01, -2.623303549145862e-01, -4.071127617300193e-01, -5.664416337789379e-01, -5.664416337789379e-01, -3.008872593035371e-07, -3.008677532024286e-07, -3.008878630751559e-07, -5.112484963421398e-06, -3.008766878010387e-07, -3.008766878010387e-07, -1.417000952881268e-04, -1.372072208687824e-04, -1.445697513865197e-04, -1.410576580409100e-04, -1.376289090610105e-04, -1.072169461677429e-05, -1.637389729530729e-03, -1.299099186185874e-03, -2.050417166681345e-03, -1.918745907206873e-03, -1.567861719050261e-03, -1.348389845088730e-02, -2.401740110919578e+01, -6.573398058339036e-02, -3.279779433399079e+01, -1.475939741953889e-05, -1.942075188716637e-01, -1.942075188716573e-01, -3.205799608513287e+07, -3.599042989617248e-01, -2.909088847467578e+00, -1.603872179667179e+02, -1.727659305250994e+07, -1.116502678889405e+00, -1.947224476657958e-03, -1.947827364894396e-03, -1.668290672326439e-02, -1.947491981030360e-03, -1.947550910022670e-03, -1.947550910022670e-03, -2.166696614440712e-03, -3.145411252970333e-03, -2.836607329766319e-03, -2.556364377741409e-03, -2.696379990317900e-03, -4.526570373500220e-02, -1.049435885156910e-03, -7.239223348830705e-01, -2.375854927508704e-02, -1.422643655639210e-01, -1.672303440191429e-02, -1.672303440191441e-02, -4.211007079017602e-02, -2.676569266385698e-01, -2.252677148424983e-01, -1.386354605362943e-02, -6.097426904388787e+01, -2.946929336056223e-01, -2.645254497269908e-01, -4.409011969718956e-01, -1.263779460576559e+00, -3.289423159458902e-01, -1.591227374426046e+00, -1.591227374498986e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_ms0_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_ms0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.484982615283642e-03, 2.485022089817395e-03, 2.485176664414335e-03, 2.484592454566586e-03, 2.484901760743321e-03, 2.484901760743321e-03, 3.901745651383842e-03, 3.899873396168594e-03, 3.848969039185140e-03, 3.869534489641998e-03, 3.867753629302020e-03, -1.312014104038231e-17, 8.029663752056576e-03, -5.140033618509157e-17, -2.191514611267007e-17, 1.168266846837338e-18, -2.748212125410779e-17, -2.748212125410779e-17, 9.920797630299147e-17, -9.309277106440858e-17, 1.509048525527432e-03, 3.713366397966205e-16, 2.995126387614885e-16, 1.736538721790006e-17, 1.838343218545187e-17, -3.125526838568836e-18, 7.048338634115134e-17, 1.025733832792957e-17, -6.249845487498423e-18, -6.249845487498423e-18, -1.820279087075235e-18, 2.086653106061607e-19, -1.044737931799067e-19, 1.000828259099839e-02, -1.665135973090546e-18, -1.665135973090546e-18, 7.533926603463629e-03, 7.635638699721786e-03, 7.383121433819451e-03, 7.548713241041512e-03, 7.634809483066854e-03, 6.628687474854073e-19, 2.299032038091332e-17, 2.060055929539833e-17, -4.421251263509124e-17, 3.706283279973174e-17, 2.677392315122698e-17, 2.042235248922122e-02, 8.008765646875033e-05, 1.640062116771168e-16, 5.686177307682839e-05, -2.388708088234127e-18, 2.185036178287500e-16, 9.330380833691358e-17, 2.098181368735192e-12, -4.336281857086802e-18, 1.071179431895117e-17, 1.097636798208482e-05, 3.587003394746805e-11, 3.445716616726234e-17, -1.863742751792330e-18, 8.341487111879314e-18, 4.584755387755456e-02, -1.743810063514935e-20, 1.930241531507212e-18, 1.930241531507212e-18, -4.273574299531820e-18, -4.997080119242398e-18, 9.933987705700564e-18, -1.456919860469369e-17, 1.327954355664984e-17, 8.089854376450398e-02, 1.400912403858467e-19, 5.953160507737532e-03, 1.212791045950400e-16, 4.177227948877056e-02, -1.690860514184154e-17, 3.079645071176215e-17, 2.694705761306125e-02, 1.576657968712372e-16, -2.213639611211064e-16, 3.186773634911859e-17, 5.886110014913665e-05, 2.555001817748045e-16, -3.923270231949999e-17, 2.887953022858688e-19, -4.066699099202399e-19, 1.336051074807949e-16, -7.139493856437954e-18, 2.113474767698162e-17])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
