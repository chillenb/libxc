
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_vt84_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_vt84", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.258997259169970e+01, -2.259003184959471e+01, -2.259044480773266e+01, -2.258948014337736e+01, -2.259000248835341e+01, -2.259000248835341e+01, -3.393787562142186e+00, -3.393805120661684e+00, -3.394565548532897e+00, -3.396092162501485e+00, -3.393798651654394e+00, -3.393798651654394e+00, -6.517004840887031e-01, -6.513921871263803e-01, -6.454539776908308e-01, -6.515630057798469e-01, -6.515876885476446e-01, -6.515876885476446e-01, -1.988079665545218e-01, -2.001413973142919e-01, -7.670710398349937e-01, -1.640439947400162e-01, -1.991697485588248e-01, -1.991697485588248e-01, -9.212652745691935e-03, -9.655600437980931e-03, -7.262194063942376e-02, -4.192542217200648e-03, -9.554829229571175e-03, -9.554829229571175e-03, -5.554468151828539e+00, -5.555536204803493e+00, -5.554650045895289e+00, -5.555476732237925e+00, -5.554917761274304e+00, -5.554917761274304e+00, -2.056840161845298e+00, -2.074145182754309e+00, -2.054975734397790e+00, -2.068535757847606e+00, -2.070940800140446e+00, -2.070940800140446e+00, -5.795252128181678e-01, -6.003076877741025e-01, -5.408887348213665e-01, -5.458983736056215e-01, -6.049353447668667e-01, -6.049353447668667e-01, -1.398504231924274e-01, -2.150130724358743e-01, -1.367489608026749e-01, -1.806641964768593e+00, -1.491126772447250e-01, -1.491126772447250e-01, -4.031508413964923e-03, -4.691491518530221e-03, -3.505598238335518e-03, -9.712449425268960e-02, -4.276891189336423e-03, -4.276891189336423e-03, -5.876609847623721e-01, -6.096247896858908e-01, -6.046097903504241e-01, -5.989301350327771e-01, -6.020026938350124e-01, -6.020026938350124e-01, -5.524698225633297e-01, -5.313806496437991e-01, -5.521283426426432e-01, -5.671021791884110e-01, -5.597420745216589e-01, -5.597420745216589e-01, -6.269827588133204e-01, -2.571878225603416e-01, -2.934344862473218e-01, -3.561570110400816e-01, -3.239592486019839e-01, -3.239592486019839e-01, -4.663728270622293e-01, -6.698870949464153e-02, -8.970963090544190e-02, -3.313072376071375e-01, -1.171171749933285e-01, -1.171171749933285e-01, -1.081444782799717e-02, -7.363970348873770e-04, -2.159014877415039e-03, -1.115445320912520e-01, -3.604204756224439e-03, -3.604204756224433e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_vt84_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_vt84", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.706928199327142e+01, -2.706933299666635e+01, -2.706977825332824e+01, -2.706894992277565e+01, -2.706930692631920e+01, -2.706930692631920e+01, -4.223311726667442e+00, -4.223334831484473e+00, -4.224144439671033e+00, -4.223681187130884e+00, -4.223341426410166e+00, -4.223341426410166e+00, -7.944459356256671e-01, -7.930477600239952e-01, -7.537432844769110e-01, -7.613136746456460e-01, -7.939384282467188e-01, -7.939384282467188e-01, -2.073541516683939e-01, -2.117434520256745e-01, -9.845150725273786e-01, -1.332759971686072e-01, -2.086358574224996e-01, -2.086358574224996e-01, -1.241629470017660e-02, -1.308715353010752e-02, -9.539154555492535e-02, -6.418705459603857e-03, -1.294728137986770e-02, -1.294728137986770e-02, -6.592414048538467e+00, -6.592099335499819e+00, -6.592466585028228e+00, -6.592217269923532e+00, -6.592138583769704e+00, -6.592138583769704e+00, -2.442834815913674e+00, -2.472765485685953e+00, -2.437589515640114e+00, -2.461650557556392e+00, -2.469063299159493e+00, -2.469063299159493e+00, -7.082931456617511e-01, -7.854875110187184e-01, -6.700640909130463e-01, -7.120436638853554e-01, -7.369575703276727e-01, -7.369575703276727e-01, -1.220390339351401e-01, -1.921219502160578e-01, -1.179999246060568e-01, -2.386952421863528e+00, -1.222680415920729e-01, -1.222680415920729e-01, -6.208635181950090e-03, -6.982883880720970e-03, -5.248751131821708e-03, -1.033602393359093e-01, -6.359330593810044e-03, -6.359330593810041e-03, -7.436932624606087e-01, -7.319302194564364e-01, -7.339458025360708e-01, -7.368978044666548e-01, -7.352304269958750e-01, -7.352304269958750e-01, -7.265540901291693e-01, -6.472609018196422e-01, -6.661326822503583e-01, -6.774899391143593e-01, -6.712897083518409e-01, -6.712897083518409e-01, -8.231981876179928e-01, -2.578782761312070e-01, -3.236615814372478e-01, -4.256592318236587e-01, -3.774307591585528e-01, -3.774307591585527e-01, -5.606040490310544e-01, -9.683754118946748e-02, -1.042221171239596e-01, -4.025753283042318e-01, -1.067400003794818e-01, -1.067400003794817e-01, -1.494022433717398e-02, -2.197995111073030e-03, -3.938546565064552e-03, -1.013884226231182e-01, -5.446928958318412e-03, -5.446928958318407e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_vt84_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_vt84", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.096979969928257e-08, -2.097025569832286e-08, -2.097143762016405e-08, -2.096400783945298e-08, -2.097004705619706e-08, -2.097004705619706e-08, -1.088740189076651e-05, -1.089010895789067e-05, -1.097294940218519e-05, -1.097465841242100e-05, -1.088770357292881e-05, -1.088770357292881e-05, -3.768836440256396e-03, -3.791992245930166e-03, -4.383582081220452e-03, -4.464905904935861e-03, -3.777618984326990e-03, -3.777618984326990e-03, -6.069986418375710e-01, -5.971830138271835e-01, -7.715610180885721e-04, -1.342998538416995e+00, -6.045007866793610e-01, -6.045007866793610e-01, 5.927355264219338e+00, 8.291738406739791e+00, -5.732058477560781e-01, 2.807314398226438e+02, 8.495314620046672e+00, 8.495314620046672e+00, -8.922397998326360e-06, -8.999314941109002e-06, -8.930368253359419e-06, -8.990154307373823e-06, -8.961516532166893e-06, -8.961516532166893e-06, -7.362141119307382e-05, -7.253876719670844e-05, -7.199304905607582e-05, -7.106433243114546e-05, -7.516068607662568e-05, -7.516068607662568e-05, -2.364561113529688e-02, -1.854264895717469e-02, -2.181195719997141e-02, -1.771300124901126e-02, -2.467092723083248e-02, -2.467092723083248e-02, -2.083056087568602e+00, -4.479034230020741e-01, -2.346778873405379e+00, -1.186690793169992e-04, -1.902048182574747e+00, -1.902048182574747e+00, 3.238654601552028e+02, 1.897026593398629e+02, 6.019784033621214e+02, -4.065118744448542e+00, 2.751494759951875e+02, 2.751494759951880e+02, -1.811619711063472e-01, -1.196786195970655e-01, -1.402107579150627e-01, -1.588556251288094e-01, -1.492737829934585e-01, -1.492737829934585e-01, -9.432579078820288e-02, -2.856067809265294e-02, -4.017444124814131e-02, -6.167821399372939e-02, -4.910889486224831e-02, -4.910889486224833e-02, -1.190561995577410e-02, -2.121262265236069e-01, -1.347437376919237e-01, -9.298441152563408e-02, -1.100425137642503e-01, -1.100425137642504e-01, -3.964303470857652e-02, 3.420027765401354e+00, -2.950339855691309e+00, -1.481901320090284e-01, -3.741209420051251e+00, -3.741209420051253e+00, 1.253731759177810e+01, 2.023928626730061e+04, 2.388351307519110e+03, -4.583036799307816e+00, 5.288279433734724e+02, 5.288279433734737e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_vt84_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_vt84", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_vt84_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_vt84", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [3.067092245051002e-03, 3.067182734774494e-03, 3.067606768353884e-03, 3.066137445566611e-03, 3.067139632729940e-03, 3.067139632729940e-03, 2.849674856503349e-03, 2.850802940703559e-03, 2.886875128410159e-03, 2.902240846396568e-03, 2.849784734171198e-03, 2.849784734171198e-03, 3.395086810936642e-03, 3.421789485748678e-03, 4.012427796842312e-03, 4.748749784051977e-03, 3.405739543339290e-03, 3.405739543339290e-03, 2.137399038129552e-02, 2.332485122913282e-02, 7.382353968677842e-05, 2.313101537934553e-03, 2.195266559557161e-02, 2.195266559557161e-02, -5.623655155927238e-10, -1.071179598440077e-09, 5.819745161413667e-07, -7.435326218166064e-11, -1.074722597908865e-09, -1.074722597908854e-09, 2.000948593486631e-02, 2.018798853979303e-02, 2.002994381001896e-02, 2.016859632405455e-02, 2.009760233937341e-02, 2.009760233937341e-02, 6.488355475825696e-03, 6.765565202966448e-03, 6.299461904947429e-03, 6.510211540161811e-03, 6.930014695844622e-03, 6.930014695844622e-03, 4.130806409247513e-02, 2.270504072214741e-02, 2.623712357778819e-02, 1.510091006226536e-02, 5.141687929718795e-02, 5.141687929718795e-02, 4.315350489388312e-04, 7.011498255482608e-03, 5.202221377708290e-04, 2.897739058327125e-03, 1.605202039810381e-03, 1.605202039810381e-03, -8.991742041421920e-11, -1.204162537842642e-10, -1.706680648750127e-10, 3.537949409324654e-05, -1.171776538165951e-10, -1.171776538165951e-10, 3.029331733280854e-01, 2.950585408431133e-01, 3.219627718313505e-01, 3.338129024927277e-01, 3.295702942566838e-01, 3.295702942566840e-01, 7.601760727062200e-02, 5.472993413630003e-02, 8.375724398321856e-02, 1.292975943733688e-01, 1.027730456230730e-01, 1.027730456230730e-01, 1.526022210083535e-02, 1.261153088480753e-02, 2.140677592558171e-02, 3.616814925964221e-02, 3.195280470575061e-02, 3.195280470575059e-02, 4.084047553999696e-02, -1.784693253683629e-06, 1.258895004530151e-05, 4.545357390942605e-02, 3.039071277343352e-04, 3.039071277343359e-04, -1.897757812749883e-09, -1.731384334172567e-12, -2.762361828166335e-11, 3.231291503895852e-04, -1.019090750499737e-10, -1.019090750499723e-10]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
