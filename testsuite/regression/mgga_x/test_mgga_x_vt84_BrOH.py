
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_vt84_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_vt84", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.990348578559971e+01, -1.990353839433801e+01, -1.990380827686340e+01, -1.990294653206183e+01, -1.990351322988355e+01, -1.990351322988355e+01, -3.234747691776483e+00, -3.234744738379400e+00, -3.234774075517143e+00, -3.235020595739253e+00, -3.234762258179416e+00, -3.702841086723123e+00, -6.297897360417284e-01, -7.294888964375466e-01, -7.189279301852088e-01, -7.203812252209442e-01, -7.297610353853363e-01, -7.297610353853363e-01, -2.025495496665753e-01, -2.043390079017064e-01, -7.596909900057642e-01, -1.774824802675560e-01, -2.030949778728529e-01, -2.030949778728529e-01, -9.211645834266676e-03, -9.653746069711564e-03, -7.256672213397952e-02, -4.056487372697145e-03, -9.553243103566559e-03, -9.553243103566559e-03, -5.559901547598134e+00, -5.560956052718838e+00, -5.560013208829650e+00, -4.864331562643152e+00, -5.560437247628686e+00, -5.560437247628686e+00, -1.824932906807931e+00, -1.836394989771372e+00, -1.820368098739845e+00, -1.829269190592136e+00, -1.838620298158155e+00, -2.103286454299883e+00, -6.177051550895187e-01, -6.727692691305284e-01, -5.859096053818779e-01, -6.117463290575766e-01, -6.419542149175156e-01, -5.597238876140517e-01, -9.317093953300673e-02, -2.184841066946728e-01, -9.196793822764954e-02, -2.042729800080230e+00, -1.539857609087916e-01, -1.539857609087916e-01, -4.528080506555847e-03, -4.603276374993175e-03, -3.477859655920028e-03, -5.803572216904445e-02, -4.715094311020401e-03, -4.166300227206132e-03, -6.392914721869628e-01, -6.363680903883250e-01, -5.601106924776269e-01, -6.382787368843660e-01, -6.378775330064453e-01, -6.378775330064453e-01, -6.189973162837363e-01, -5.350736763633417e-01, -5.597673207754259e-01, -5.829482950666127e-01, -5.711437102599638e-01, -4.984023202641988e-01, -7.048214672628763e-01, -2.193043876526269e-01, -2.991433393990994e-01, -3.272620728700455e-01, -3.329734654026723e-01, -3.329734654026721e-01, -4.215406498975841e-01, -6.670597196714190e-02, -9.055296081026971e-02, -3.527883466976204e-01, -7.564063626934127e-02, -1.203003303971077e-01, -1.078503393945837e-02, -4.927194237229774e-04, -2.123019263828785e-03, -1.148189880702328e-01, -3.490218933147673e-03, -3.490218933147667e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_vt84_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_vt84", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.680344151153646e+01, -2.680351121694320e+01, -2.680386966876199e+01, -2.680272772671045e+01, -2.680347786878185e+01, -2.680347786878185e+01, -4.242559636335501e+00, -4.242599212749480e+00, -4.243950120705089e+00, -4.243764055502190e+00, -4.242590801261636e+00, -4.495927830777035e+00, -8.194498094805061e-01, -7.840264644032684e-01, -7.428365081834686e-01, -7.577653905922480e-01, -7.850610881016343e-01, -7.850610881016343e-01, -2.084133610386845e-01, -2.130773743518292e-01, -9.967825891472276e-01, -1.472676200427119e-01, -2.097797629296018e-01, -2.097797629296018e-01, -1.241566389882925e-02, -1.304783369519720e-02, -1.003957430926533e-01, -6.581414470122308e-03, -1.291371637965544e-02, -1.291371637965543e-02, -6.599853388371903e+00, -6.599473398694006e+00, -6.599805437371232e+00, -6.539946113689987e+00, -6.599670851001243e+00, -6.599670851001243e+00, -2.374422993639062e+00, -2.392192555241321e+00, -2.367357694951536e+00, -2.381029523957441e+00, -2.395890197706975e+00, -2.522274744702132e+00, -7.564855489926543e-01, -8.095198698326190e-01, -7.167450964259902e-01, -7.471871683428984e-01, -7.833607541362830e-01, -7.516668466622940e-01, -1.239630115554061e-01, -1.935208216670143e-01, -1.223451054191431e-01, -2.491381858446497e+00, -1.290691047639717e-01, -1.290691047639717e-01, -6.037404904864078e-03, -7.100621590869800e-03, -5.286271998350460e-03, -7.732252282048309e-02, -6.286751621975239e-03, -6.504520471839717e-03, -7.406852680355787e-01, -7.425118105906048e-01, -7.495862293858453e-01, -7.412621746869832e-01, -7.415164356542255e-01, -7.415164356542255e-01, -7.188455455239847e-01, -6.556068833253100e-01, -6.809470306808669e-01, -6.979507734767121e-01, -6.900241767095244e-01, -6.711815612650635e-01, -8.541975440864350e-01, -2.870470253546172e-01, -3.267802440117533e-01, -4.261156262279923e-01, -3.872577648069196e-01, -3.872577648069194e-01, -5.544479263020063e-01, -9.993245417126675e-02, -1.107492836822213e-01, -4.291382188754983e-01, -1.006734478935207e-01, -1.147113304550488e-01, -1.461865092876717e-02, -1.998905291424826e-03, -3.968904376981546e-03, -1.095689982394918e-01, -5.587920133632999e-03, -5.587920133632994e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_vt84_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_vt84", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.819874734218537e-09, -6.819905953275867e-09, -6.819987475456252e-09, -6.819487577070217e-09, -6.819891551935767e-09, -6.819891551935767e-09, -4.795815323628684e-06, -4.796816479660736e-06, -4.826299890550767e-06, -4.813331912399214e-06, -4.796001970200816e-06, -7.402144319024108e-06, -1.583466542356858e-03, -3.230123284897104e-03, -3.398030860220006e-03, -3.375978193894165e-03, -3.226592782366488e-03, -3.226592782366488e-03, -5.393145119831367e-01, -5.209143710324516e-01, -4.893078996452407e-04, -9.339839168512317e-01, -5.335435951085938e-01, -5.335435951085938e-01, 5.840290383048360e+00, 6.684769737882373e+00, 1.259576089466132e+00, 2.756821221424713e+02, 7.050301951048687e+00, 7.050301951049074e+00, -8.880833387619734e-06, -8.957942145863577e-06, -8.889346803702224e-06, -2.413380802724063e-06, -8.919343205985277e-06, -8.919343205985277e-06, -3.884676825052582e-05, -3.933789364660433e-05, -3.858775335256897e-05, -3.899765765195859e-05, -3.952718185292511e-05, -6.129005385672417e-05, -1.603426785242710e-02, -2.550496746026895e-02, -1.453446252648049e-02, -2.038573353241646e-02, -1.766775855521172e-02, -8.548805901166884e-03, -2.799112014386324e-01, -4.160687439328042e-01, -3.209566742890648e-01, -1.769590095309194e-04, -1.598356091080750e+00, -1.598356091080750e+00, 2.502524117907310e+04, 1.898060967441826e+02, 6.025352426139477e+02, -1.362350017907986e-01, 2.126552490937163e+04, 2.746107862427547e+02, -2.437996695565650e-01, -1.196668174686253e-01, -2.834838884516630e-02, -1.779826834700320e-01, -1.611212767360922e-01, -1.611212767360922e-01, -2.019781321792554e-01, -2.600789361464841e-02, -3.531460791328003e-02, -5.386681153118320e-02, -4.252395305245691e-02, -1.618890786265554e-02, -1.632634439274760e-02, -8.026627520044070e-02, -1.152330662527909e-01, -3.846990983777492e-02, -8.311186401158747e-02, -8.311186401158745e-02, -1.756576435168345e-02, 4.609863913232195e+00, -1.606727219327889e+00, -9.298272182967725e-02, -5.040806204172775e-01, -2.898763218177356e+00, 4.051208521895939e+00, 1.354558770171308e+04, 2.350355221545043e+03, -3.483196491067018e+00, 5.218940382154790e+02, 5.218940382154821e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_vt84_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_vt84", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.556422344863446e-04, 1.556454196333309e-04, 1.556590196615260e-04, 1.556072334133709e-04, 1.556439146127865e-04, 1.556439146127865e-04, -5.302785358672591e-04, -5.300709329195481e-04, -5.237123506463188e-04, -5.261543510757407e-04, -5.302184052897965e-04, 4.582416909449987e-03, -1.894772947485513e-03, 6.651033324753752e-03, 5.199086832875184e-03, 5.830065948223899e-03, 6.691822813958799e-03, 6.691822813958799e-03, 1.796312147378816e-02, 1.941211866548549e-02, -7.020421689985269e-04, 1.531140779394895e-03, 1.836480496503333e-02, 1.836480496503333e-02, -1.201394076723511e-08, -1.734743803747189e-08, -3.142598082385241e-06, -8.231888317460578e-09, -1.775789426430298e-08, -1.775789426430502e-08, 2.007271813555092e-02, 2.025219851224033e-02, 2.009247513887482e-02, 7.855387644079214e-04, 2.016242407694470e-02, 2.016242407694470e-02, -1.129537468814813e-03, -1.110499964711325e-03, -1.134515156103203e-03, -1.123751760761645e-03, -1.104413571680345e-03, 6.321475783765341e-03, 5.123818750257908e-02, 1.040947903829747e-01, 3.815693648650714e-02, 6.361092698854538e-02, 6.370451385620693e-02, 2.550437807111363e-03, -1.586683356812518e-04, 5.881605788355258e-03, -1.809333457459220e-04, 2.055432995581074e-02, 1.323638711046144e-03, 1.323638711046144e-03, -3.075403167652860e-08, -1.039557824611136e-08, -1.549025916859578e-08, -3.586674541712387e-05, -3.542066885980449e-08, -1.047699580579260e-08, 8.252387291474785e-01, 3.992291162348700e-01, 7.711034079588374e-03, 5.988526668601093e-01, 5.410135080596042e-01, 5.410135080596042e-01, 6.198483628817256e-01, 5.367899590863951e-02, 8.424284230731703e-02, 1.419875293199420e-01, 1.068154428173135e-01, 5.474323489996705e-03, 7.740458712733110e-02, -3.142611040662236e-03, 1.817270222839908e-02, -6.262706558406247e-03, 2.738478821854863e-02, 2.738478821854859e-02, -3.583787649267285e-03, -7.126763020887354e-06, 1.297275468878346e-05, 5.054512511624837e-02, -1.415584763423827e-04, 2.851993608523658e-04, -1.144059464673333e-08, -1.190180964028884e-09, -7.183113217422436e-09, 2.961125513397587e-04, -1.045421133889715e-08, -1.045421133890567e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
