
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mn12_l_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mn12_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.851083922275766e+01, -2.851112300849680e+01, -2.851296996959977e+01, -2.850878458934678e+01, -2.851089332200765e+01, -2.851089332200765e+01, -3.547193837083712e+00, -3.547093290516429e+00, -3.544697226661383e+00, -3.548382311162936e+00, -3.546581896404478e+00, -3.546581896404478e+00, -4.436332535154472e-01, -4.417969317714494e-01, -4.021469862518186e-01, -4.317175711253040e-01, -4.317153962967779e-01, -4.317153962967779e-01, -2.332388731026334e-01, -2.342623756488704e-01, -1.184740371613046e-01, -1.864957785691614e-01, -2.242656083784536e-01, -2.242656083784533e-01, -2.556479585841751e-02, -2.686847804822044e-02, -1.176063713179431e-01, -1.494537753423567e-02, -2.069279467927308e-02, -2.069279467927306e-02, -7.502940807343280e+00, -7.506392196845865e+00, -7.503666302307662e+00, -7.506691932838049e+00, -7.504436494018817e+00, -7.504436494018817e+00, -2.043625141760380e+00, -2.084009620335942e+00, -2.025204775879847e+00, -2.063485186400424e+00, -2.073917917347456e+00, -2.073917917347456e+00, -5.791426955502055e-01, -6.423167594012416e-01, -4.937418945987428e-01, -5.259857095117721e-01, -6.006922690824452e-01, -6.006922690824454e-01, -1.650315131284350e-01, -2.265989990511209e-01, -1.621280580776618e-01, -1.574632246943700e+00, -1.686239128083235e-01, -1.686239128083236e-01, -1.158223006851355e-02, -1.461458184945368e-02, -1.122101072371509e-02, -1.454690392504296e-01, -1.404918761456649e-02, -1.404918761456650e-02, -2.189477096003664e-01, -4.435529583772156e-01, -3.806425503879843e-01, -3.162473383632065e-01, -3.500069811097390e-01, -3.500069811097392e-01, -2.351807119801720e-01, -4.879955864785109e-01, -5.308874377516730e-01, -5.623485495414339e-01, -5.518941716596055e-01, -5.518941716596055e-01, -6.659733736709395e-01, -2.686275457746893e-01, -2.949262696591654e-01, -3.237800576662957e-01, -3.082920506574437e-01, -3.082920506574438e-01, -4.288043619751069e-01, -1.146521347908080e-01, -1.371556413244625e-01, -3.130449558113811e-01, -1.492105375733152e-01, -1.492105375733150e-01, -3.555137174995455e-02, -3.951708376063515e-03, -8.271572198895082e-03, -1.474377795450750e-01, -1.291979023711591e-02, -1.291979023711588e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mn12_l_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mn12_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.970510277121333e+01, -2.971018779087638e+01, -2.970537492554529e+01, -2.971038432428108e+01, -2.970675508377276e+01, -2.971221563386801e+01, -2.970371694656211e+01, -2.970834254492400e+01, -2.970525895347452e+01, -2.971026402142305e+01, -2.970525895347452e+01, -2.971026402142305e+01, -3.637098512300704e+00, -3.636525915449316e+00, -3.635374246593615e+00, -3.635208931515527e+00, -3.599968607236258e+00, -3.593175201361466e+00, -3.622015874518279e+00, -3.620053236116728e+00, -3.640686998375082e+00, -3.588754717395116e+00, -3.640686998375082e+00, -3.588754717395116e+00, -9.915412492897502e-01, -1.005876180296720e+00, -9.858630240391802e-01, -1.004140168241374e+00, -9.066744003526439e-01, -8.788965575133606e-01, -9.034456255108922e-01, -9.111329689178822e-01, -1.034679248255312e+00, -8.026503105218384e-01, -1.034679248255312e+00, -8.026503105218384e-01, -2.231835871503306e-01, -2.157220768163309e-01, -2.133495344314322e-01, -2.042855613158268e-01, -9.961838963271170e-01, -1.338713925085562e+00, -2.069262586683689e-01, -2.221821308722753e-01, -2.253498927399509e-01, -1.150870426814233e-01, -2.253498927399520e-01, -1.150870426814245e-01, -3.253791491882831e-02, -3.445637095347261e-02, -3.399354832895364e-02, -3.625912805835355e-02, -1.202835428814487e-01, -1.210186910247336e-01, -1.995992970077876e-02, -1.963688231451497e-02, -2.919726582726942e-02, -1.689277299266993e-02, -2.919726582726951e-02, -1.689277299266994e-02, -6.444189301525442e+00, -6.442957531866458e+00, -6.391717064659041e+00, -6.392248469220345e+00, -6.440828527910304e+00, -6.440889287608162e+00, -6.395825133145567e+00, -6.394844198327875e+00, -6.417799248968413e+00, -6.417666364643476e+00, -6.417799248968413e+00, -6.417666364643476e+00, -3.096918519972570e+00, -3.089591782732058e+00, -3.043464246195370e+00, -3.038706412846365e+00, -3.171633069648510e+00, -3.142333592307102e+00, -3.120490884662463e+00, -3.092834214423970e+00, -3.013045136742834e+00, -3.053705612952648e+00, -3.013045136742834e+00, -3.053705612952648e+00, -8.926562953332321e-01, -8.935689151675025e-01, -8.111027598982250e-01, -7.866032053623739e-01, -7.223353513194704e-01, -7.857248479117478e-01, -8.104411332276171e-01, -8.492117021347738e-01, -9.519829828651889e-01, -8.847312628618826e-01, -9.519829828651889e-01, -8.847312628618826e-01, -1.115083554142847e-01, -1.127377173688413e-01, -2.909346449271341e-01, -2.908922790471509e-01, -1.014803901808796e-01, -1.064544076093510e-01, -1.794329033293532e+00, -1.794888378407479e+00, -1.496312150651536e-01, -1.818592976748533e-01, -1.496312150651543e-01, -1.818592976748553e-01, -1.506496538937160e-02, -1.564736781138773e-02, -1.921826539782424e-02, -1.950496302032938e-02, -1.441364042500258e-02, -1.523711251126966e-02, -1.026499503250204e-01, -1.030718754704073e-01, -1.474256962034160e-02, -2.006521536723225e-02, -1.474256962034158e-02, -2.006521536723220e-02, 2.225986747940832e-01, 2.329355945830670e-01, -9.126480486054198e-02, -7.722997549063608e-02, 2.351062453059572e-02, 3.757415473378127e-02, 1.175004892016680e-01, 1.289691613601231e-01, 7.095704070363103e-02, 8.374009014473589e-02, 7.095704070363092e-02, 8.374009014473489e-02, 1.736032881106552e-01, 1.840905910501812e-01, -6.601049487785016e-01, -6.679885405559288e-01, -7.786162569337101e-01, -7.837976271974783e-01, -6.868261829654239e-01, -6.853833390007363e-01, -7.776740479145284e-01, -7.790349744672667e-01, -7.776740479145279e-01, -7.790349744672659e-01, -9.485067680633693e-01, -9.271113430627941e-01, -2.950872570704594e-01, -2.934381393282145e-01, -2.472144639562897e-01, -2.441191130260815e-01, -3.544528906406226e-01, -3.587355658984887e-01, -2.526933303178684e-01, -2.526863690131614e-01, -2.526933303178694e-01, -2.526863690131608e-01, -5.465268567784072e-01, -5.601826753261081e-01, -1.210090196988154e-01, -1.212365969443732e-01, -1.223691645139096e-01, -1.206018281615463e-01, -3.784930858559177e-01, -3.930052798651653e-01, -9.408291613932772e-02, -9.564504426456835e-02, -9.408291613932888e-02, -9.564504426457016e-02, -4.550834927229790e-02, -4.699946605657180e-02, -5.256269306540383e-03, -5.267354422561979e-03, -1.062868873417669e-02, -1.129398778194017e-02, -9.248101732348452e-02, -9.346416162861136e-02, -1.395775975348497e-02, -1.844054568246443e-02, -1.395775975348497e-02, -1.844054568246425e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mn12_l_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mn12_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.432511487959572e-07, 0.000000000000000e+00, -2.433151290652155e-07, -2.432588067966673e-07, 0.000000000000000e+00, -2.433206797496192e-07, -2.432771449861927e-07, 0.000000000000000e+00, -2.433486791718126e-07, -2.431914321834431e-07, 0.000000000000000e+00, -2.432391957054028e-07, -2.432562647214295e-07, 0.000000000000000e+00, -2.432783757524853e-07, -2.432562647214295e-07, 0.000000000000000e+00, -2.432783757524853e-07, -3.138636889635789e-05, 0.000000000000000e+00, -3.132972315021612e-05, -3.142255501318425e-05, 0.000000000000000e+00, -3.135059925946854e-05, -3.209967454362608e-05, 0.000000000000000e+00, -3.221281184108783e-05, -3.197100493174892e-05, 0.000000000000000e+00, -3.194227849162904e-05, -3.132795963840328e-05, 0.000000000000000e+00, -3.255663301658208e-05, -3.132795963840328e-05, 0.000000000000000e+00, -3.255663301658208e-05, -1.566844879345489e-02, 0.000000000000000e+00, -1.492387628769945e-02, -1.592045083818592e-02, 0.000000000000000e+00, -1.503095725497696e-02, -1.879440549823689e-02, 0.000000000000000e+00, -1.935914921625348e-02, -1.820564751473906e-02, 0.000000000000000e+00, -1.795976971286391e-02, -1.373072016585709e-02, 0.000000000000000e+00, -1.885805727239717e-02, -1.373072016585709e-02, 0.000000000000000e+00, -1.885805727239717e-02, -2.171717464508894e+00, 0.000000000000000e+00, -2.272376791301401e+00, -2.364839115161483e+00, 0.000000000000000e+00, -2.432561416240017e+00, -1.455390964069461e-02, 0.000000000000000e+00, -1.035321988101820e-02, -1.255134928262873e+00, 0.000000000000000e+00, -1.056830379777127e+00, -1.904091473503189e+00, 0.000000000000000e+00, -5.376646176344704e+00, -1.904091473503180e+00, 0.000000000000000e+00, -5.376646176344766e+00, -7.244193461533679e+01, 0.000000000000000e+00, -7.152676495528051e+01, -7.616143106630919e+01, 0.000000000000000e+00, -7.552616601343564e+01, -3.123864681208794e+01, 0.000000000000000e+00, -3.041947134365832e+01, -6.742124252773361e+01, 0.000000000000000e+00, -6.561597883064587e+01, -7.264775868587765e+01, 0.000000000000000e+00, -1.869148918082471e+02, -7.264775868593382e+01, 0.000000000000000e+00, -1.869148918086002e+02, -8.761180724739069e-05, 0.000000000000000e+00, -8.768994590891839e-05, -8.821500663124125e-05, 0.000000000000000e+00, -8.827343162580666e-05, -8.765204397577917e-05, 0.000000000000000e+00, -8.771487620936843e-05, -8.816927334966760e-05, 0.000000000000000e+00, -8.824459812185261e-05, -8.791523649829976e-05, 0.000000000000000e+00, -8.798176742088752e-05, -8.791523649829976e-05, 0.000000000000000e+00, -8.798176742088752e-05, -2.498124368599106e-04, 0.000000000000000e+00, -2.516640994284324e-04, -2.602629550996598e-04, 0.000000000000000e+00, -2.618764935245608e-04, -2.417220110698519e-04, 0.000000000000000e+00, -2.456564548908219e-04, -2.499828502308673e-04, 0.000000000000000e+00, -2.543782172329358e-04, -2.626386751335189e-04, 0.000000000000000e+00, -2.580698029355754e-04, -2.626386751335189e-04, 0.000000000000000e+00, -2.580698029355754e-04, -3.971817846703377e-02, 0.000000000000000e+00, -4.044319988241562e-02, -7.002520788298384e-02, 0.000000000000000e+00, -7.262429754973029e-02, -4.280495561998299e-02, 0.000000000000000e+00, -4.094219414478419e-02, -4.114707120951586e-02, 0.000000000000000e+00, -4.751717247934666e-02, -4.178066877048904e-02, 0.000000000000000e+00, -4.234743151940995e-02, -4.178066877048909e-02, 0.000000000000000e+00, -4.234743151941003e-02, -5.225780300500070e+00, 0.000000000000000e+00, -5.108811350255642e+00, -4.762961561975387e-01, 0.000000000000000e+00, -4.843343092036558e-01, -7.800005332001910e+00, 0.000000000000000e+00, -6.404066897777842e+00, -1.438936701088985e-03, 0.000000000000000e+00, -1.443343361071999e-03, -2.763125671811380e+00, 0.000000000000000e+00, -2.096268374573423e+00, -2.763125671811411e+00, 0.000000000000000e+00, -2.096268374573428e+00, -9.514726610976385e+01, 0.000000000000000e+00, -8.230860104641584e+01, -8.155716369897280e+01, 0.000000000000000e+00, -7.528272926337019e+01, -4.662226667765307e+02, 0.000000000000000e+00, -5.179894806250619e+02, -2.214190367536126e+01, 0.000000000000000e+00, -2.102922706462110e+01, -2.320082770133986e+02, 0.000000000000000e+00, -2.262867640071075e+02, -2.320082770128424e+02, 0.000000000000000e+00, -2.262867640070575e+02, -1.956036947096448e-01, 0.000000000000000e+00, -1.967688794305037e-01, -1.319898224628768e-01, 0.000000000000000e+00, -1.334431025533182e-01, -1.506591358064446e-01, 0.000000000000000e+00, -1.522147906070725e-01, -1.690923941248081e-01, 0.000000000000000e+00, -1.702797015915720e-01, -1.595221253706308e-01, 0.000000000000000e+00, -1.609053545464744e-01, -1.595221253706308e-01, 0.000000000000000e+00, -1.609053545464743e-01, -2.047446004969243e-01, 0.000000000000000e+00, -2.058707622348607e-01, -5.563342143363189e-02, 0.000000000000000e+00, -5.458382784028537e-02, -4.590746588458392e-02, 0.000000000000000e+00, -4.569340613198213e-02, -6.102127929684233e-02, 0.000000000000000e+00, -6.158263742256465e-02, -4.909373303658231e-02, 0.000000000000000e+00, -4.919007186686085e-02, -4.909373303658231e-02, 0.000000000000000e+00, -4.919007186686085e-02, -5.165879804477067e-02, 0.000000000000000e+00, -5.529655333117507e-02, -6.068918961861660e-01, 0.000000000000000e+00, -6.140169057096529e-01, -6.499333475345545e-01, 0.000000000000000e+00, -6.514325077009139e-01, -3.063064922704820e-01, 0.000000000000000e+00, -2.990267579968287e-01, -5.196542438675650e-01, 0.000000000000000e+00, -5.222647889926197e-01, -5.196542438675656e-01, 0.000000000000000e+00, -5.222647889926206e-01, -8.917738091058468e-02, 0.000000000000000e+00, -8.498407455524230e-02, -2.895474246748121e+01, 0.000000000000000e+00, -2.890389104553210e+01, -2.361836964991840e+01, 0.000000000000000e+00, -2.333495571608078e+01, -3.229420276100847e-01, 0.000000000000000e+00, -2.426843592565938e-01, -1.408974104208425e+01, 0.000000000000000e+00, -1.288375609729766e+01, -1.408974104208410e+01, 0.000000000000000e+00, -1.288375609729764e+01, -5.644119658264195e+01, 0.000000000000000e+00, -5.748231611776031e+01, -2.956343021195856e+02, 0.000000000000000e+00, -5.236318456695744e+02, -1.814584839923105e+02, 0.000000000000000e+00, -1.930285680666089e+02, -1.644577415895534e+01, 0.000000000000000e+00, -1.522639848668388e+01, -4.783892105374178e+02, 0.000000000000000e+00, -2.354028146561611e+02, -4.783892105383108e+02, 0.000000000000000e+00, -2.354028146564370e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mn12_l_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mn12_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.329234646378569e-02, 2.330369857581234e-02, 2.329330720424823e-02, 2.330439459647815e-02, 2.329659164186608e-02, 2.330904063137763e-02, 2.328584599810993e-02, 2.329531556327051e-02, 2.329295194576281e-02, 2.330094909914223e-02, 2.329295194576281e-02, 2.330094909914223e-02, -1.607804937119779e-03, -1.630278311311229e-03, -1.612491407094311e-03, -1.635918514796197e-03, -1.730587043286601e-03, -1.758686715992124e-03, -1.566733634635770e-03, -1.593469460456662e-03, -1.593682555199382e-03, -1.693996523630918e-03, -1.593682555199382e-03, -1.693996523630918e-03, 6.132953321835408e-02, 6.085875000423767e-02, 6.143895447265770e-02, 6.094366174636160e-02, 6.203000712426283e-02, 6.176862888651509e-02, 6.153455405285500e-02, 6.143238429366328e-02, 6.057580869301842e-02, 6.027464556240448e-02, 6.057580869301842e-02, 6.027464556240448e-02, 7.580475168472234e-02, 8.354871227793366e-02, 7.844723288755699e-02, 8.579198464692848e-02, 5.592464599282490e-02, 6.284014466432679e-02, 1.991418412604356e-02, 2.527160373654172e-02, 7.406547753160395e-02, -8.586875498888177e-04, 7.406547753160486e-02, -8.586875498895694e-04, -2.991431630118284e-05, -3.598051054680003e-05, -3.564024741308847e-05, -4.429093087221065e-05, -2.221159134473212e-03, -2.658573341314152e-03, -4.797615092340932e-06, -4.609500233687836e-06, -2.022512936957390e-05, -6.421413359770215e-06, -2.022512936957392e-05, -6.421413359845256e-06, 1.036269742742576e-01, 1.036718922356049e-01, 1.035325176860259e-01, 1.035809173032401e-01, 1.036323734726419e-01, 1.036763713377356e-01, 1.035510503523686e-01, 1.035934336086452e-01, 1.035736449503121e-01, 1.036273913814744e-01, 1.035736449503121e-01, 1.036273913814744e-01, 2.621434193202901e-02, 2.624830108000693e-02, 2.596287212200789e-02, 2.602958333555165e-02, 2.747082786777183e-02, 2.711545417272387e-02, 2.710153430055729e-02, 2.681947944353201e-02, 2.522440652084982e-02, 2.598558436383627e-02, 2.522440652084982e-02, 2.598558436383627e-02, 1.098376855375030e-01, 1.119320139236865e-01, 3.337167966715396e-02, 1.646381924279966e-02, 6.908880242446969e-02, 8.335578451487405e-02, 8.156954900569473e-02, 9.304204359047566e-02, 1.251641523742996e-01, 1.116094887832391e-01, 1.251641523742998e-01, 1.116094887832395e-01, -4.851722147742283e-03, -4.398571114114143e-03, 4.365198989606004e-02, 4.396442843026389e-02, -5.990832450986916e-03, -5.598561653777390e-03, 1.353124984794366e-02, 1.361596274025822e-02, 2.569516694745988e-03, 1.456534830398877e-02, 2.569516694746630e-03, 1.456534830398780e-02, -1.476240083119743e-06, -1.524686350532300e-06, -4.054220464305791e-06, -3.738071880657020e-06, -1.221757899866139e-05, -1.591653186230959e-05, -6.174801751402060e-03, -7.128204421245371e-03, -2.453742367692950e-06, -2.011811561559318e-05, -2.453742367692124e-06, -2.011811561576445e-05, -1.830796457781162e+00, -1.862356840178367e+00, -9.154646939950170e-01, -9.411591405338091e-01, -1.181093874123876e+00, -1.211259190320645e+00, -1.446804344518173e+00, -1.474347207768225e+00, -1.308480712480240e+00, -1.337493200535309e+00, -1.308480712480240e+00, -1.337493200535306e+00, -1.719760952668407e+00, -1.753531537886744e+00, 7.941598393947456e-02, 8.061524605096301e-02, 9.849560961837203e-02, 9.871435346294070e-02, -2.255810735758581e-02, -2.556584191634593e-02, 7.683048324418290e-02, 7.533687986110743e-02, 7.683048324418312e-02, 7.533687986110722e-02, 8.889101888516612e-02, 7.952460582579757e-02, 6.462537754184473e-02, 6.512383226264261e-02, 7.343429745740875e-02, 7.371298144892394e-02, 7.191453562189108e-02, 7.214428462252312e-02, 7.114801927357468e-02, 7.106105267895714e-02, 7.114801927357454e-02, 7.106105267895717e-02, 7.155681079768036e-02, 7.278067892439363e-02, -2.253276653597053e-03, -2.245814499695014e-03, -3.818967580251819e-03, -4.223360920292412e-03, 7.212241852168218e-02, 5.393788429014448e-02, -8.140474375114762e-03, -7.670313066991186e-03, -8.140474375114845e-03, -7.670313066991328e-03, -4.178782751342352e-05, -4.574423877204808e-05, -9.133221334876991e-08, -9.154304801164720e-08, -2.128241328886493e-06, -2.711631022964016e-06, -8.868380365554936e-03, -9.960361118405266e-03, -5.379725145833789e-06, -1.607805580546287e-05, -5.379725145799954e-06, -1.607805580555458e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
