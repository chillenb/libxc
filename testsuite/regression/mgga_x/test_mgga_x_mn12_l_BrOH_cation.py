
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_x_mn12_l_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mn12_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-8.783436069662798e+00, -8.783510101304689e+00, -8.783825314468132e+00, -1.925932830492371e+01, -1.926046751907242e+01, -2.973799813253886e+01, -3.740097581262596e+00, -4.117896300485292e+00, -4.120303697085496e+00, -4.119749078550102e+00, -4.119322326630193e+00, -3.742368584943194e+00, -4.027042100512335e-01, -4.890436308215428e-01, -5.319766120633289e-01, -4.536978369588003e-01, -3.421911558355867e-01, -5.492984489712753e-01, -1.609253310555017e-01, -1.645461855792724e-01, -1.845538014151705e-01, -1.892813274614405e-01, -2.312069595912794e-01, -2.081251866009518e-01, -2.556553443518342e-02, -1.466492100277367e-02, -6.387802223650124e-02, -1.494723641596362e-02, -2.069518949301204e-02, -2.069518949301204e-02, -7.529269130881699e+00, -7.532589365273265e+00, -7.529456647069688e+00, -7.532386877356060e+00, -5.307425420839817e+00, -5.309672657983231e+00, -2.102319209485348e+00, -2.137037204706031e+00, -2.074467510970822e+00, -2.107058521002472e+00, -2.021826505760389e+00, -2.134437477749812e+00, -5.680086836562174e-01, -7.144617164130765e-01, -5.406001362923293e-01, -5.858898794836636e-01, -5.941146921821430e-01, -6.326862927420998e-01, -1.700581136911171e-01, -1.361281201843293e-01, -1.676367804407245e-01, -2.345937294101286e+00, -1.706690347042795e-01, -1.706690347042797e-01, -5.939606014656908e-03, -1.461850865012854e-02, -1.122344181470365e-02, -7.418388937275487e-02, -1.405147492283226e-02, -1.405147492283227e-02, -2.381100130049848e-01, -4.558883021050244e-01, -3.344139160480488e-01, -3.052830560699702e-01, -3.074002129391966e-01, -3.365456083417005e-01, -2.685390756157758e-01, -4.608485981295264e-01, -5.060154919314257e-01, -5.691349223121731e-01, -5.568820590349449e-01, -5.276110838891659e-01, -6.877160301428140e-01, -2.713169184092644e-01, -2.257181872165555e-01, -3.134154080515782e-01, -3.276759853835902e-01, -2.691929750093984e-01, -4.470804686498659e-01, 2.744803065614567e-03, -1.393638752666737e-01, -3.329006928181187e-01, -1.532796969354442e-01, -1.532796969354441e-01, 1.706580689396844e-03, -3.952176596934690e-03, 4.673105076749843e-04, -1.891808140832925e-03, -1.292215019740004e-02, -2.613870611771840e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_x_mn12_l_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mn12_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.419605246899837e+01, -1.420522707568093e+01, -1.419744386319052e+01, -1.420623575656830e+01, -1.420139721452560e+01, -1.421203724412909e+01, -1.418578454802986e+01, -3.087121754755077e+01, -1.419694231968612e+01, -3.087227057715872e+01, -3.087246451847625e+01, -3.087227057715872e+01, -5.050565515892607e+00, -1.493544733131722e+00, -5.049513411856786e+00, -5.050680185420964e+00, -5.029288515421948e+00, -5.025769823894101e+00, -5.036998199729585e+00, -5.037039046268136e+00, -5.052128770432869e+00, -5.019147585032228e+00, -1.497280180619949e+00, -5.019147585032229e+00, -1.347387037285486e+00, -1.334602956534102e+00, -1.350029331681190e+00, -9.606967903821779e-01, -1.004332222815555e+00, -1.006534613163328e+00, -9.840678073095026e-01, -1.353227045582105e+00, -1.335154135825000e+00, -1.346068552400195e+00, -9.617232591018493e-01, -1.017476556342504e+00, -2.110003994798785e-01, -2.251506355439029e-01, -2.177887981269478e-01, -2.161220818784377e-01, -1.562232801171787e+00, -1.906667924385300e+00, -2.191956491318365e-01, -2.336365882623359e-01, -2.575336334420149e-01, -1.156983658912819e-01, -2.575336334420157e-01, -2.103914852385918e-02, -3.254191525924181e-02, -3.445840977051707e-02, 1.667457615510039e-03, -3.626449538583629e-02, 1.611192575084424e-03, -1.244221173730115e-01, -1.996812904749976e-02, -1.964346635593495e-02, -2.920583702693891e-02, -1.690747904373763e-02, -2.920583702693891e-02, -1.690747904373759e-02, -6.456395149698552e+00, -6.454461576007626e+00, -6.403563264002576e+00, -6.403417561585843e+00, -6.452732817876394e+00, -6.452178927603436e+00, -6.407435862399249e+00, -6.405843146510967e+00, -5.287604789596001e+00, -6.429037176849899e+00, -6.430032074281985e+00, -5.286295593983880e+00, -3.180063445475299e+00, -3.171198438841865e+00, -3.124024389184491e+00, -3.117576188426970e+00, -3.237607950557823e+00, -3.211619578704793e+00, -3.182361105908150e+00, -3.157923005316981e+00, -3.110130831059136e+00, -2.168105629203351e+00, -3.110130831059137e+00, -3.136026330478208e+00, -9.062353947606617e-01, -8.112275663143617e-01, -9.155400994216845e-01, -8.894966526184664e-01, -6.572175600948538e-01, -7.572794681755192e-01, -8.277872563785580e-01, -8.978336718741361e-01, -9.866168339057159e-01, -8.073806588049157e-01, -9.866168339057159e-01, -9.015587480459344e-01, -1.126655127414569e-01, -1.136444509835362e-01, -1.676303858120775e-01, -3.073934435421666e-01, -1.066169162337506e-01, -1.087895255236631e-01, -3.162172272141791e+00, -3.161586442015920e+00, -1.478644415615624e-01, -1.835580503692653e-01, -1.478644415615621e-01, -1.835580503692667e-01, 8.234966700780389e-04, -1.566008727193951e-02, -1.923325197144643e-02, -1.952126533290623e-02, -1.442192776172370e-02, -1.524798096741556e-02, -1.145107323987165e-01, -5.281989225313735e-03, -1.476637366045194e-02, -2.006866727286576e-02, -1.476637366045190e-02, -2.006866727286570e-02, 2.136870342301939e-01, 2.247620961231761e-01, -1.076687723624714e-01, -9.310914871459226e-02, 4.737539230029147e-02, 6.021837245613365e-02, 1.315728350798117e-01, 1.166596552022240e-01, 8.981475193694874e-02, 1.015161515311654e-01, 8.981475193694882e-02, 7.026150403544357e-02, 1.549083055166926e-01, 1.667477623959544e-01, -6.563816058441213e-01, -6.921004330995421e-01, -7.805131614400349e-01, -7.322468293258699e-01, -7.045918059395978e-01, -7.034189254595847e-01, -7.867729567271284e-01, -7.882901403320929e-01, -7.867729567271279e-01, -7.089519456252519e-01, -1.075793638623376e+00, -8.708918699123768e-01, -3.122368191402586e-01, -3.111945098660742e-01, -3.851736877795658e-01, -2.722504136828505e-01, -5.074052005869576e-01, -3.151792224508907e-01, -2.579898733007840e-01, -2.572250146898599e-01, -2.579898733007839e-01, -4.524879303035583e-01, -5.159987193507589e-01, -5.326193610755190e-01, 1.656553360803476e-03, 1.642010041746455e-03, -1.288896035780024e-01, -1.271837244918462e-01, -3.124272217388974e-01, -3.454543256694758e-01, -9.922259201922190e-02, -9.830976751296655e-02, -9.922259201922209e-02, -9.830976751296944e-02, 2.087880318270369e-03, 2.136936520415799e-03, -5.257703781771286e-03, -5.269660553706874e-03, 5.948508030918645e-04, 6.298408427310944e-04, -1.281868904784000e-02, -1.481068196975811e-02, -1.398272158309215e-02, -1.844332912272079e-02, -1.398272158309224e-02, 9.891274697003734e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mn12_l_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mn12_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.894845928265361e-07, 0.000000000000000e+00, -2.895710662039077e-07, -2.894933709458551e-07, 0.000000000000000e+00, -2.895774267863592e-07, -2.895160454907672e-07, 0.000000000000000e+00, -2.896114252016673e-07, -2.894178774049732e-07, 0.000000000000000e+00, -2.401169027764846e-07, -2.894904236416830e-07, 0.000000000000000e+00, -2.401573151027728e-07, -2.401218867703007e-07, 0.000000000000000e+00, -2.401573151027728e-07, -4.070336038808111e-05, 0.000000000000000e+00, 6.683479207436281e-06, -4.072935807990589e-05, 0.000000000000000e+00, -4.070094137227073e-05, -4.123929275396102e-05, 0.000000000000000e+00, -4.132968311683189e-05, -4.103982248833207e-05, 0.000000000000000e+00, -4.103832491878669e-05, -4.067037269415142e-05, 0.000000000000000e+00, -4.149877647417159e-05, 6.763517608924090e-06, 0.000000000000000e+00, -4.149877647417159e-05, 5.777902524070479e-03, 0.000000000000000e+00, 6.857162994576816e-03, 5.443078756369095e-03, 0.000000000000000e+00, -1.014582439263900e-02, -8.502408518909602e-03, 0.000000000000000e+00, -8.314722982800794e-03, -9.239046887763893e-03, 0.000000000000000e+00, 2.999493471043346e-03, 7.448711414969776e-03, 0.000000000000000e+00, -8.997600078594029e-03, -1.013167491234202e-02, 0.000000000000000e+00, -7.368686532326429e-03, -1.143891689929314e+01, 0.000000000000000e+00, -2.080776471903854e+00, -1.045398858620172e+01, 0.000000000000000e+00, -2.187144912862538e+00, 4.724106545986536e-04, 0.000000000000000e+00, -8.705202151833910e-03, -4.790501269238721e-01, 0.000000000000000e+00, -4.954921537411305e-01, -1.374372359254585e+00, 0.000000000000000e+00, -3.461484880160206e+00, -1.374372359254578e+00, 0.000000000000000e+00, -2.672641481932474e+02, -7.070621716932780e+01, 0.000000000000000e+00, -7.079021885377402e+01, -1.792541813366561e+07, 0.000000000000000e+00, -7.383769589840418e+01, -1.851706159883244e+04, 0.000000000000000e+00, -2.518982873464868e+01, -5.261901178751886e+01, 0.000000000000000e+00, -5.317682243602589e+01, -6.748263933984128e+01, 0.000000000000000e+00, -1.171899921047905e+02, -6.748263933984128e+01, 0.000000000000000e+00, -1.171899921054977e+02, -8.751214950199179e-05, 0.000000000000000e+00, -8.759590673001108e-05, -8.811569239333878e-05, 0.000000000000000e+00, -8.817976698888015e-05, -8.755467603601976e-05, 0.000000000000000e+00, -8.762248823796856e-05, -8.807212782645098e-05, 0.000000000000000e+00, -8.815247631357680e-05, -1.035764074147955e-04, 0.000000000000000e+00, -8.788762713409272e-05, -8.781402819842002e-05, 0.000000000000000e+00, -1.036646317306952e-04, -2.488392351900652e-04, 0.000000000000000e+00, -2.506219202054875e-04, -2.592217045511550e-04, 0.000000000000000e+00, -2.607776808154267e-04, -2.397857170578218e-04, 0.000000000000000e+00, -2.439635417055407e-04, -2.483404003243750e-04, 0.000000000000000e+00, -2.528756515997160e-04, -2.622662895621385e-04, 0.000000000000000e+00, 2.806580207403462e-04, -2.622662895621385e-04, 0.000000000000000e+00, -2.570903699876314e-04, -3.348416316278143e-02, 0.000000000000000e+00, -3.510652753962163e-02, -4.808575685821754e-02, 0.000000000000000e+00, -5.010247182145363e-02, -4.347057418055643e-02, 0.000000000000000e+00, -3.809392550677494e-02, -3.772558646885790e-02, 0.000000000000000e+00, -3.633165808286264e-02, -3.409885013026174e-02, 0.000000000000000e+00, -3.757247407328858e-02, -3.409885013026178e-02, 0.000000000000000e+00, -3.480002075534101e-02, -4.359219763237484e+00, 0.000000000000000e+00, -4.197948097463805e+00, -1.443231542663150e+01, 0.000000000000000e+00, -2.948255093859159e-01, -6.157797335252202e+00, 0.000000000000000e+00, -5.298978977721729e+00, -1.229912539337072e-03, 0.000000000000000e+00, -1.233369299339137e-03, -2.349702154145692e+00, 0.000000000000000e+00, -1.627882166183709e+00, -2.349702154145735e+00, 0.000000000000000e+00, -1.627882166183699e+00, -5.226278266324812e+08, 0.000000000000000e+00, -3.539155603897004e+01, -4.995536380239987e+01, 0.000000000000000e+00, -4.402464905817747e+01, -3.610188229737606e+02, 0.000000000000000e+00, -3.958159942982716e+02, -1.599793828216703e+01, 0.000000000000000e+00, -2.253799872141069e+03, -6.809709297441768e+01, 0.000000000000000e+00, -2.146208601201860e+02, -6.809709297441069e+01, 0.000000000000000e+00, -2.146208601197383e+02, -1.809082602968762e-01, 0.000000000000000e+00, -1.825306550340003e-01, -1.215489427136924e-01, 0.000000000000000e+00, -1.232754985031210e-01, -1.846459490729457e-01, 0.000000000000000e+00, -1.853956685744029e-01, -1.972737494421629e-01, 0.000000000000000e+00, -1.576582780219017e-01, -1.907611036730929e-01, 0.000000000000000e+00, -1.913898518037923e-01, -1.907611036730929e-01, 0.000000000000000e+00, -1.488833138142918e-01, -1.737157440775975e-01, 0.000000000000000e+00, -1.759525280717406e-01, -5.386170884003783e-02, 0.000000000000000e+00, -2.330957002875987e-02, -4.192377389980220e-02, 0.000000000000000e+00, -6.477922961867061e-02, -5.096179725699764e-02, 0.000000000000000e+00, -5.158678408993646e-02, -4.233497546079110e-02, 0.000000000000000e+00, -4.261665766269191e-02, -4.233497546079108e-02, 0.000000000000000e+00, -8.643968721405081e-02, -3.640443914385687e-02, 0.000000000000000e+00, -6.096044281038345e-02, -5.137151364266984e-01, 0.000000000000000e+00, -5.187162883744812e-01, -9.909286102280139e-01, 0.000000000000000e+00, -5.310024908809993e-01, -3.380656316079399e-02, 0.000000000000000e+00, -2.492426991979153e-01, -4.291883483122498e-01, 0.000000000000000e+00, -4.316705750099236e-01, -4.291883483122502e-01, 0.000000000000000e+00, -2.121800845366576e-01, -8.084403500054321e-02, 0.000000000000000e+00, -7.728734476391816e-02, -1.996980982852107e+04, 0.000000000000000e+00, -1.943289006981692e+04, -1.852028452247811e+01, 0.000000000000000e+00, -1.852262758342347e+01, -2.739713136896966e-01, 0.000000000000000e+00, -2.028805251905470e-01, -1.172731235982008e+01, 0.000000000000000e+00, -1.095904868643724e+01, -1.172731235982011e+01, 0.000000000000000e+00, -1.095904868643717e+01, -5.164001691752805e+06, 0.000000000000000e+00, -4.478376907928075e+06, -5.825339684264100e+01, 0.000000000000000e+00, -5.799663010436348e+01, -2.150183216443151e+09, 0.000000000000000e+00, -1.680329965003389e+09, -1.101885409679531e+03, 0.000000000000000e+00, -1.020089915871721e+03, -1.757848096069605e+02, 0.000000000000000e+00, -2.229652996208933e+02, -1.757848096071472e+02, 0.000000000000000e+00, -2.260591773224149e+08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_x_mn12_l_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_x_mn12_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.642485436732430e-03, 1.647962612503807e-03, 1.643283376782853e-03, 1.648541169357707e-03, 1.645533601617589e-03, 1.651849498075799e-03, 1.636583037469955e-03, 2.454852326347266e-02, 1.642997379805476e-03, 2.455364318981364e-02, 2.455112190094797e-02, 2.455364318981364e-02, 1.740789808750995e-02, -2.311092675126971e-02, 1.741181770318164e-02, 1.740747195511341e-02, 1.749124338792888e-02, 1.750590307556460e-02, 1.746012817920823e-02, 1.745998137119325e-02, 1.740213153710738e-02, 1.753442609449955e-02, -2.308340139205644e-02, 1.753442609449955e-02, 7.664360289705226e-02, 7.475846996678483e-02, 7.717176013623642e-02, 6.018408818048331e-02, 6.065273857686061e-02, 6.059780305633749e-02, 6.074722425382477e-02, 8.033806305682792e-02, 7.331150583043260e-02, 8.637099258714331e-02, 5.991559235018912e-02, 5.997277047372321e-02, 1.069451813576541e-01, 8.259688107370822e-02, 1.102577473842445e-01, 8.441272918905104e-02, 4.783606699888075e-02, 8.069452021933406e-02, 1.342852343534265e-02, 2.081887911935616e-02, 7.227394247456340e-02, -6.963301011112154e-03, 7.227394247456435e-02, 1.171896340641906e-02, -2.991727630493613e-05, -3.598222430673788e-05, 9.327324935062109e-06, -4.429620970716226e-05, 6.933322764837949e-04, -2.725199707392485e-03, -4.799200509404644e-06, -4.610743542737582e-06, -2.022990670497206e-05, -6.425912220853444e-06, -2.022990670497206e-05, -6.425912220928489e-06, 1.041185672811504e-01, 1.041354090610951e-01, 1.040223180894933e-01, 1.040424985466891e-01, 1.041126563860116e-01, 1.041317398494589e-01, 1.040301542368803e-01, 1.040474107113847e-01, 2.000168154430400e-02, 1.040913613211661e-01, 1.040728411454936e-01, 2.000370466983139e-02, 2.920165836712438e-02, 2.917222869550232e-02, 2.881962804361895e-02, 2.882118064655217e-02, 2.971539438407100e-02, 2.951133251786592e-02, 2.920300687301266e-02, 2.905761492903595e-02, 2.877255397051349e-02, -8.992347096188598e-03, 2.877255397051349e-02, 2.892813172817002e-02, 1.132708212392337e-01, 5.590098386065474e-02, 8.346133856983592e-02, 6.739342032703204e-02, 6.796290923872866e-02, 8.355497405747064e-02, 1.022689535370967e-01, 1.174887852517333e-01, 1.325664455768136e-01, 5.802474093015887e-02, 1.325664455768138e-01, 1.152906056046354e-01, -7.521946071308293e-03, -7.371177186522263e-03, 7.064965681206072e-02, 4.255419735713003e-02, -8.456581327329946e-03, -8.154204803499194e-03, 1.098237541384015e-01, 1.100029036308913e-01, -9.146933355734913e-04, 1.093409355851490e-02, -9.146933355728105e-04, 1.093409355851397e-02, 3.906730224791726e-07, -1.525683449819906e-06, -4.056763721022290e-06, -3.740585037187032e-06, -1.222323550456587e-05, -1.592567466579032e-05, -7.160589054131290e-03, 4.002442372846489e-03, -2.456930362371527e-06, -2.012090237074761e-05, -2.456930362370704e-06, -2.012090237091888e-05, -1.796721481454730e+00, -1.828306416218701e+00, -8.998358195162881e-01, -9.252630965386628e-01, -1.252180638722487e+00, -1.282778403657622e+00, -1.510555494811084e+00, -1.448309201737802e+00, -1.376378112822754e+00, -1.405696221241227e+00, -1.376378112822754e+00, -1.314155150517467e+00, -1.658921018561208e+00, -1.693118263561108e+00, 7.653100712214826e-02, 6.060842077901576e-02, 9.377807588107213e-02, 6.939075828053384e-02, -2.524689256781538e-02, -2.792844760436357e-02, 7.174436784544871e-02, 7.058044898976451e-02, 7.174436784544899e-02, 4.020971291914758e-02, 1.454732171901319e-01, 3.448635201882239e-02, 6.400421797361415e-02, 6.448384169096118e-02, 1.094603367150245e-01, 7.121944442802962e-02, 8.818943627009236e-02, 5.011446995013084e-02, 6.213854260352366e-02, 6.180876122192618e-02, 6.213854260352352e-02, 1.036518301445461e-01, 6.021586832390240e-02, 6.152966874829076e-02, 6.898945354915430e-04, 6.899826397111247e-04, -4.016866078033240e-03, -4.454009888031941e-03, 2.834196323898734e-02, 7.567389096642741e-03, -9.956565584961293e-03, -1.023715389134824e-02, -9.956565584961410e-03, -1.023715389134840e-02, 1.088608339144123e-05, 1.191670717681786e-05, -9.135228469909096e-08, -9.157532189610073e-08, 5.655220673856704e-07, 7.201903732737836e-07, 8.560753825193305e-03, 1.001603054469158e-02, -5.387469287958058e-06, -1.608000974271955e-05, -5.387469287924227e-06, 4.251698247628276e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
