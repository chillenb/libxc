
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_ge2_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_ge2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.174556056790110e+03, 2.174563864369937e+03, 2.174610446148311e+03, 2.174482361036222e+03, 2.174560076020624e+03, 2.174560076020624e+03, 5.871850545877722e+01, 5.871811068177015e+01, 5.871211140005142e+01, 5.874736424142573e+01, 5.871880267784184e+01, 5.871880267784184e+01, 2.274838431592477e+00, 2.273213683269095e+00, 2.243546466455679e+00, 2.273546513449760e+00, 2.274229510380687e+00, 2.274229510380687e+00, 2.063583609456427e-01, 2.082532398291437e-01, 3.159782043993545e+00, 1.548049508826698e-01, 2.068684751095595e-01, 2.068684751095595e-01, 5.613233850200296e-02, 5.607191280507077e-02, 8.934286726281178e-02, 6.655000272041854e-02, 5.501358756767662e-02, 5.501358756767662e-02, 1.273832284956865e+02, 1.273928661948242e+02, 1.273844412407223e+02, 1.273919311307969e+02, 1.273878408444685e+02, 1.273878408444685e+02, 2.036719753406923e+01, 2.058596055962299e+01, 2.034904978921623e+01, 2.051862045993555e+01, 2.054115827997623e+01, 2.054115827997623e+01, 1.618884635702623e+00, 1.829180032814498e+00, 1.463456551397987e+00, 1.531350014126415e+00, 1.732768318952765e+00, 1.732768318952765e+00, 1.323666918398365e-01, 2.532708813751493e-01, 1.243278442314280e-01, 1.692494031756486e+01, 1.338781302465511e-01, 1.338781302465511e-01, 6.461177827573325e-02, 6.455535074550378e-02, 3.815644902344559e-02, 9.317213172018106e-02, 5.311745367238958e-02, 5.311745367238960e-02, 1.632812790616875e+00, 1.630045599969158e+00, 1.631035265615234e+00, 1.631790725139462e+00, 1.631410115191010e+00, 1.631410115191010e+00, 1.527418704576832e+00, 1.265959097039120e+00, 1.336152401117601e+00, 1.405146602266476e+00, 1.369026497333944e+00, 1.369026497333944e+00, 2.013735983580452e+00, 3.488731465589179e-01, 4.394315393123891e-01, 6.285469442896220e-01, 5.204660139194653e-01, 5.204660139194653e-01, 1.037342013505271e+00, 9.646198118046227e-02, 9.873398062240714e-02, 5.426985561608370e-01, 9.949805596606340e-02, 9.949805596606336e-02, 6.479455275020227e-02, 4.919313427703775e-02, 5.302279536957000e-02, 8.988231023969329e-02, 4.395025408395732e-02, 4.395025408395737e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_ge2_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_ge2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.340513684108847e+03, 3.340532650321271e+03, 3.340625231246267e+03, 3.340314494262643e+03, 3.340523619638456e+03, 3.340523619638456e+03, 8.746152952431265e+01, 8.746253787743366e+01, 8.749743867029413e+01, 8.747435971358473e+01, 8.746279331068172e+01, 8.746279331068172e+01, 3.096415771298540e+00, 3.087019006893380e+00, 2.834983546710080e+00, 2.885264569153498e+00, 3.093003541797470e+00, 3.093003541797470e+00, 1.956242842511134e-01, 2.045055280864499e-01, 4.555460297355385e+00, 5.648681617323172e-02, 1.983316232902824e-01, 1.983316232902824e-01, -5.487843665019004e-02, -5.469618338569922e-02, -6.661484088022410e-02, -6.626142546197934e-02, -5.366638171982977e-02, -5.366638171982977e-02, 2.000452441837050e+02, 2.001520839798623e+02, 2.000563197898707e+02, 2.001393922111266e+02, 2.000998308469549e+02, 2.000998308469549e+02, 2.583074346372236e+01, 2.626527399135601e+01, 2.558609985152638e+01, 2.592456471890540e+01, 2.644147686151581e+01, 2.644147686151581e+01, 2.452361228665220e+00, 2.974641023065068e+00, 2.202341358446899e+00, 2.456691473376859e+00, 2.657338512602889e+00, 2.657338512602889e+00, -1.831196517486288e-02, 1.544923923327761e-01, -1.317811256702430e-02, 2.751850188428746e+01, 1.862667428893440e-02, 1.862667428893440e-02, -6.434322221880800e-02, -6.420459623918823e-02, -3.795940991645777e-02, -4.900520116696192e-02, -5.282625604538313e-02, -5.282625604538316e-02, 2.702103480013018e+00, 2.658709202199329e+00, 2.674239074603077e+00, 2.686250008045672e+00, 2.680238666150462e+00, 2.680238666150462e+00, 2.533713965587940e+00, 1.790240559388912e+00, 1.998388113147998e+00, 2.198357725541781e+00, 2.096124393693765e+00, 2.096124393693765e+00, 3.267345293716214e+00, 2.961770284025224e-01, 4.704408252007984e-01, 8.585602003508596e-01, 6.428487786096538e-01, 6.428487786096537e-01, 1.448848717608963e+00, -7.696580778215500e-02, -6.300362646055518e-02, 7.848744093006031e-01, -2.436000058986354e-02, -2.436000058986349e-02, -6.307223641415091e-02, -4.916684277997063e-02, -5.292791945381198e-02, -2.149491078971424e-02, -4.373992930516602e-02, -4.373992930516608e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_ge2_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_ge2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [7.184506981371736e-07, 7.184454664173825e-07, 7.184182744200265e-07, 7.185040248363264e-07, 7.184479713061685e-07, 7.184479713061685e-07, 1.664912415598493e-04, 1.664901933197832e-04, 1.664408301245251e-04, 1.664200446771928e-04, 1.664885747428965e-04, 1.664885747428965e-04, 2.363795624356835e-02, 2.371089894750388e-02, 2.571085085416388e-02, 2.511302609544826e-02, 2.366452568393155e-02, 2.366452568393155e-02, 1.154549423168824e+00, 1.109632128882582e+00, 1.373090384864063e-02, 3.029699961466519e+00, 1.140825370931600e+00, 1.140825370931600e+00, 6.627170873969095e+03, 5.766654701545125e+03, 8.587779736257205e+01, 6.002474578053259e+04, 5.950761508640644e+03, 5.950761508640644e+03, 4.966481484388984e-05, 4.963832541585422e-05, 4.966201910325279e-05, 4.964142322732890e-05, 4.965134880217484e-05, 4.965134880217484e-05, 9.371078035390106e-04, 9.175757456847092e-04, 9.451609734595366e-04, 9.296949858735887e-04, 9.137290376552178e-04, 9.137290376552178e-04, 3.582056968717878e-02, 2.794751848419681e-02, 4.192477159677917e-02, 3.694740853876630e-02, 3.198975036394842e-02, 3.198975036394842e-02, 7.639299766288211e+00, 1.130085553678851e+00, 7.940737805149471e+00, 9.931433794021999e-04, 4.940810476441970e+00, 4.940810476441970e+00, 6.686072115148074e+04, 4.479387102161440e+04, 1.063885373940969e+05, 3.170134267160714e+01, 5.921636393025099e+04, 5.921636393025099e+04, 3.260261338661206e-02, 3.313039838056553e-02, 3.293989709270265e-02, 3.279392370300548e-02, 3.286687544179671e-02, 3.286687544179671e-02, 3.595445566521901e-02, 5.507454277017253e-02, 4.832473560024300e-02, 4.301658326993696e-02, 4.561842194817578e-02, 4.561842194817577e-02, 2.424595009836338e-02, 5.679802546760833e-01, 3.390414310804852e-01, 1.622594852676255e-01, 2.345187703252563e-01, 2.345187703252563e-01, 7.506229171454362e-02, 1.080934593603282e+02, 4.356798783086254e+01, 1.923693529952399e-01, 1.428675369803360e+01, 1.428675369803359e+01, 4.116746290816189e+03, 2.182732475721234e+06, 3.184120632844685e+05, 1.645353996032586e+01, 9.646901028340461e+04, 9.646901028340503e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
