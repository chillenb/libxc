
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_gr_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_gr", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [1.298941514996839e+03, 1.298923078549405e+03, 1.298881252446379e+03, 1.299182354720962e+03, 1.298931454339519e+03, 1.298931454339519e+03, 4.415521065627183e+01, 4.414962481467980e+01, 4.399987723491539e+01, 4.427681932140725e+01, 4.415271383656850e+01, 4.415271383656850e+01, 2.677960375132537e+00, 2.699853184784469e+00, 3.366161736661419e+00, 3.370181704768371e+00, 2.685802620947466e+00, 2.685802620947466e+00, 5.254103193341164e-01, 5.067616901658999e-01, 2.876549472968432e+00, 6.932105312525710e-01, 5.193415527585584e-01, 5.193415527585584e-01, 5.010367248677742e-01, 5.000892647939955e-01, 7.287852290624767e-01, 5.979939346982936e-01, 4.906588395441437e-01, 4.906588395441437e-01, 6.164071121909566e+01, 6.134154711724400e+01, 6.161091319768482e+01, 6.137827881172770e+01, 6.148608919427981e+01, 6.148608919427981e+01, 3.024566380440941e+01, 3.005009404273154e+01, 3.095299221684369e+01, 3.079594784173407e+01, 2.921152819386968e+01, 2.921152819386968e+01, 1.081453977761904e+00, 5.470063359712715e-01, 1.025897118208851e+00, 5.693080935392958e-01, 1.049983916940067e+00, 1.049983916940067e+00, 8.134237447486574e-01, 9.284711133278352e-01, 7.506987002125409e-01, 5.078205996781421e+00, 6.996371417610652e-01, 6.996371417610652e-01, 5.806162472490232e-01, 5.798360665208930e-01, 3.427552278931876e-01, 6.922190436470361e-01, 4.770923116823388e-01, 4.770923116823392e-01, 3.332368643131683e-01, 4.612704247606068e-01, 4.154462781474842e-01, 3.799488795546337e-01, 3.977006646937013e-01, 3.977006646937013e-01, 2.917667780140642e-01, 1.268089446058497e+00, 9.776537747034435e-01, 7.074934077013093e-01, 8.407933780294613e-01, 8.407933780294612e-01, 6.267916597385451e-01, 1.002732591472607e+00, 9.403716275167211e-01, 7.299647799516762e-01, 8.299978644788979e-01, 8.299978644788977e-01, 1.099041095090973e+00, 8.035647565102929e-01, 7.702270357058163e-01, 4.858844472786972e-01, 6.465414484150686e-01, 6.465414484150680e-01, 5.774447418173231e-01, 4.426511017271079e-01, 4.768908234598476e-01, 5.823654396057129e-01, 3.948554564727242e-01, 3.948554564727246e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_gr_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_gr", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.888151698772890e+02, -3.887923150752687e+02, -3.887275235976350e+02, -3.891010426446043e+02, -3.888028063307181e+02, -3.888028063307181e+02, -2.003179840239132e+01, -2.002611130518291e+01, -1.987159424326510e+01, -2.014652733011119e+01, -2.002904397721122e+01, -2.002904397721122e+01, -1.791567240312742e+00, -1.815278879021891e+00, -2.528075515342106e+00, -2.518847071417639e+00, -1.800073077953960e+00, -1.800073077953960e+00, -4.590729903677600e-01, -4.386460277159389e-01, -1.603338862090656e+00, -6.583420322600099e-01, -4.524732624332541e-01, -4.524732624332541e-01, -5.008297992687981e-01, -4.998622345573621e-01, -7.250345284267323e-01, -5.979463121336032e-01, -4.904365164200445e-01, -4.904365164200445e-01, -7.606711083460596e+00, -7.288325241529222e+00, -7.574885172523094e+00, -7.327305708935191e+00, -7.442319720633375e+00, -7.442319720633375e+00, -2.262183216352155e+01, -2.231845240092144e+01, -2.337252781309993e+01, -2.313164469266110e+01, -2.145820212288486e+01, -2.145820212288486e+01, -4.095951812825301e-01, 2.457459419869316e-01, -4.209475145996335e-01, 8.881987106099555e-02, -3.255049759653623e-01, -3.255049759653623e-01, -7.946018229235522e-01, -8.611798340858635e-01, -7.323561762204046e-01, 2.256088856416678e+00, -6.744699821627483e-01, -6.744699821627483e-01, -5.805719286902321e-01, -5.797781831337624e-01, -3.427227114444912e-01, -6.849303802269793e-01, -4.770442566903940e-01, -4.770442566903939e-01, 3.821342347193101e-01, 2.464828615242702e-01, 2.950331507783194e-01, 3.326373279101773e-01, 3.138307086451673e-01, 3.138307086451673e-01, 3.784230849957532e-01, -7.637390109890984e-01, -4.273700405929604e-01, -1.128238246189331e-01, -2.689556200494978e-01, -2.689556200494972e-01, 2.447206559700581e-01, -8.962829569733897e-01, -7.902196170174495e-01, -4.845543946004661e-01, -6.380214271736001e-01, -6.380214271735994e-01, -6.887565856134422e-01, -8.003473935625076e-01, -7.643306213047436e-01, -2.668012465759630e-01, -6.341417641079422e-01, -6.341417641079414e-01, -5.771605159515205e-01, -4.426467629634553e-01, -4.768751665281120e-01, -5.710797846933063e-01, -3.948207475513137e-01, -3.948207475513142e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_gr_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_gr", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [6.466056283234563e-06, 6.466009197756443e-06, 6.465764469780239e-06, 6.466536223526939e-06, 6.466031741755516e-06, 6.466031741755516e-06, 1.498421174038643e-03, 1.498411739878048e-03, 1.497967471120726e-03, 1.497780402094735e-03, 1.498397172686069e-03, 1.498397172686069e-03, 2.127416061921152e-01, 2.133980905275349e-01, 2.313976576874749e-01, 2.260172348590344e-01, 2.129807311553839e-01, 2.129807311553839e-01, 1.039094480851941e+01, 9.986689159943243e+00, 1.235781346377657e-01, 2.726729965319867e+01, 1.026742833838440e+01, 1.026742833838440e+01, 5.964453786572185e+04, 5.189989231390612e+04, 7.729001762631485e+02, 5.402227120247934e+05, 5.355685357776580e+04, 5.355685357776580e+04, 4.469833335950086e-04, 4.467449287426880e-04, 4.469581719292752e-04, 4.467728090459601e-04, 4.468621392195736e-04, 4.468621392195736e-04, 8.433970231851093e-03, 8.258181711162384e-03, 8.506448761135831e-03, 8.367254872862299e-03, 8.223561338896960e-03, 8.223561338896960e-03, 3.223851271846090e-01, 2.515276663577714e-01, 3.773229443710125e-01, 3.325266768488966e-01, 2.879077532755357e-01, 2.879077532755357e-01, 6.875369789659389e+01, 1.017076998310966e+01, 7.146664024634525e+01, 8.938290414619800e-03, 4.446729428797773e+01, 4.446729428797773e+01, 6.017464903633266e+05, 4.031448391945296e+05, 9.574968365468717e+05, 2.853120840444644e+02, 5.329472753722590e+05, 5.329472753722590e+05, 2.934235204795085e-01, 2.981735854250898e-01, 2.964590738343240e-01, 2.951453133270494e-01, 2.958018789761704e-01, 2.958018789761704e-01, 3.235901009869711e-01, 4.956708849315528e-01, 4.349226204021869e-01, 3.871492494294326e-01, 4.105657975335820e-01, 4.105657975335819e-01, 2.182135508852704e-01, 5.111822292084749e+00, 3.051372879724367e+00, 1.460335367408629e+00, 2.110668932927307e+00, 2.110668932927307e+00, 6.755606254308927e-01, 9.728411342429538e+02, 3.921118904777629e+02, 1.731324176957159e+00, 1.285807832823024e+02, 1.285807832823023e+02, 3.705071661734571e+04, 1.964459228149110e+07, 2.865708569560217e+06, 1.480818596429327e+02, 8.682210925506415e+05, 8.682210925506453e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
