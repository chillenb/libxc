
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_fr_b88_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_fr_b88", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.197498341832353e+03, 2.197507307348608e+03, 2.197556229482517e+03, 2.197422653828797e+03, 2.197491356044640e+03, 2.197491356044640e+03, 5.932899162078303e+01, 5.932848153309514e+01, 5.931959429034875e+01, 5.935758035334148e+01, 5.933124990249161e+01, 5.933124990249161e+01, 2.294992983082330e+00, 2.292437059981730e+00, 2.236155833883433e+00, 2.270076932905718e+00, 2.270748978184591e+00, 2.270748978184591e+00, 1.839409592334694e-01, 1.874671946232289e-01, 3.093885539608261e+00, 1.226389646443742e-01, 1.775585762693660e-01, 1.775585762693659e-01, 1.787342028629913e-03, 1.882987110097809e-03, 1.856871245113087e-02, 9.428240685216210e-04, 1.359461385381094e-03, 1.359461385381093e-03, 1.287148332876080e+02, 1.287210084951013e+02, 1.287154907687770e+02, 1.287209367278791e+02, 1.287177629322450e+02, 1.287177629322450e+02, 2.026620866451998e+01, 2.051009999754559e+01, 2.016778304683318e+01, 2.038270712137276e+01, 2.044895436560945e+01, 2.044895436560945e+01, 1.673699549758109e+00, 1.883386029513812e+00, 1.446538111275428e+00, 1.489406381206225e+00, 1.722755191213994e+00, 1.722755191213995e+00, 7.302970327833222e-02, 2.011957396898928e-01, 6.476173884583764e-02, 1.706283963506244e+01, 8.861469441924513e-02, 8.861469441924513e-02, 6.573903326435322e-04, 8.880070525725402e-04, 4.450403092208961e-04, 3.518066864004134e-02, 6.842997984566987e-04, 6.842997984566991e-04, 1.588660381455473e+00, 1.591421591304705e+00, 1.590663974655501e+00, 1.589846274961996e+00, 1.590271573599050e+00, 1.590271573599050e+00, 1.497402391290722e+00, 1.233514802971978e+00, 1.309475999517632e+00, 1.383986474333930e+00, 1.345498996823612e+00, 1.345498996823612e+00, 2.074134989713349e+00, 2.981985059486980e-01, 4.004336844586937e-01, 6.236827205301925e-01, 4.970889713726369e-01, 4.970889713726367e-01, 1.048007847523613e+00, 1.773515864509331e-02, 2.700836250076121e-02, 5.631384257626479e-01, 4.847795839796791e-02, 4.847795839796792e-02, 2.836259803397939e-03, 1.374180446277900e-04, 3.777275797335142e-04, 4.426966176183921e-02, 5.946323210102085e-04, 5.946323210102077e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_fr_b88_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_fr_b88", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.366773438748307e+03, 3.366764886696662e+03, 3.366796682237072e+03, 3.366781771413238e+03, 3.366873345125437e+03, 3.366890979323249e+03, 3.366610793986837e+03, 3.366556354786415e+03, 3.366787185410122e+03, 3.366691804617556e+03, 3.366787185410122e+03, 3.366691804617556e+03, 8.887513741653359e+01, 8.887413644379528e+01, 8.887587139641646e+01, 8.887461723257805e+01, 8.889113268498909e+01, 8.889617422356282e+01, 8.889339013455616e+01, 8.889744754615495e+01, 8.884485642190087e+01, 8.891443799539633e+01, 8.884485642190087e+01, 8.891443799539633e+01, 3.274884675219935e+00, 3.302249337502020e+00, 3.264283732538630e+00, 3.297762061134744e+00, 3.126398497505055e+00, 3.083122194521521e+00, 3.149660664407196e+00, 3.163469451791682e+00, 3.355495099403994e+00, 2.941534598593464e+00, 3.355495099403994e+00, 2.941534598593464e+00, 2.154305615172005e-01, 2.314221561868889e-01, 2.201486609554918e-01, 2.389567419836277e-01, 4.322442880617365e+00, 4.627166746621312e+00, 1.339241102261673e-01, 1.374145708577859e-01, 2.345766641616316e-01, 7.653636110352638e-02, 2.345766641616314e-01, 7.653636110352637e-02, 1.056339390703470e-03, 1.149018440316497e-03, 1.116214336935786e-03, 1.227187544269109e-03, 1.461768884942456e-02, 1.589109447274441e-02, 5.457565043233846e-04, 5.365605747136024e-04, 9.058384404321103e-04, 3.667896873605991e-04, 9.058384404321110e-04, 3.667896873605986e-04, 2.009029525638632e+02, 2.008059022899031e+02, 2.009980984435262e+02, 2.008977852000636e+02, 2.009085477543603e+02, 2.008092812644787e+02, 2.009901835151939e+02, 2.008927487893656e+02, 2.009514341923889e+02, 2.008519997794178e+02, 2.009514341923889e+02, 2.008519997794178e+02, 2.795488774710946e+01, 2.795206284679137e+01, 2.836830273644889e+01, 2.835285705818479e+01, 2.761200445032625e+01, 2.770683447176442e+01, 2.796614571457464e+01, 2.806652708648103e+01, 2.844718370509276e+01, 2.819759862044411e+01, 2.844718370509276e+01, 2.819759862044411e+01, 2.541391771600566e+00, 2.528044975466293e+00, 3.034343941890003e+00, 3.037862444542272e+00, 2.086501630168245e+00, 2.245263934130096e+00, 2.295360063990505e+00, 2.449726301377320e+00, 2.753785682152871e+00, 2.484686194911926e+00, 2.753785682152871e+00, 2.484686194911927e+00, 7.234250229693374e-02, 7.337386657951006e-02, 2.295056301868995e-01, 2.316414481356825e-01, 6.072462967537041e-02, 6.633373317940409e-02, 2.756417509609851e+01, 2.753977902874906e+01, 8.973668898164859e-02, 9.747017665205465e-02, 8.973668898164859e-02, 9.747017665205465e-02, 3.546581336769639e-04, 3.823817555699331e-04, 5.021325156033511e-04, 5.192369696478827e-04, 2.540791568492395e-04, 2.691219548901279e-04, 3.203287153537935e-02, 3.246903812402793e-02, 2.947902900237536e-04, 4.487853468922839e-04, 2.947902900237537e-04, 4.487853468922837e-04, 2.604415658888277e+00, 2.624899966813417e+00, 2.558778936992757e+00, 2.579222576875776e+00, 2.574239184730692e+00, 2.594798143497993e+00, 2.587550340774511e+00, 2.607926481415794e+00, 2.580840283014703e+00, 2.601305458221810e+00, 2.580840283014703e+00, 2.601305458221810e+00, 2.472091203915003e+00, 2.488508748293377e+00, 1.764822906581881e+00, 1.780339838771693e+00, 1.943475494597765e+00, 1.961199534432674e+00, 2.139064198063344e+00, 2.154375037642274e+00, 2.037751679279515e+00, 2.053132224707590e+00, 2.037751679279515e+00, 2.053132224707590e+00, 3.328119243447421e+00, 3.340223373277581e+00, 3.572294430470223e-01, 3.611329508808009e-01, 5.047616764195572e-01, 5.144795324595829e-01, 8.777416277919504e-01, 8.875292530143433e-01, 6.678812574513543e-01, 6.673691034260273e-01, 6.678812574513541e-01, 6.673691034260271e-01, 1.491621597997899e+00, 1.512528387726470e+00, 1.434559146670528e-02, 1.449478381881951e-02, 2.276994913297031e-02, 2.392313215947486e-02, 8.099699779308379e-01, 8.349441812670191e-01, 4.543336200706320e-02, 4.894181286313593e-02, 4.543336200706321e-02, 4.894181286313596e-02, 1.790305566703595e-03, 1.875336173445554e-03, 7.603243196635024e-05, 6.825308432435881e-05, 2.012448112719102e-04, 2.151168993975461e-04, 4.194731097287847e-02, 4.315331315121426e-02, 2.422283303457862e-04, 3.972796824604163e-04, 2.422283303457865e-04, 3.972796824604149e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_fr_b88_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_fr_b88", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.497469744287433e-06, 0.000000000000000e+00, 1.497476468469394e-06, 1.497467004487116e-06, 0.000000000000000e+00, 1.497474471196627e-06, 1.497439629812988e-06, 0.000000000000000e+00, 1.497440455807780e-06, 1.497471049407781e-06, 0.000000000000000e+00, 1.497480352938050e-06, 1.497469049951692e-06, 0.000000000000000e+00, 1.497450713944415e-06, 1.497469049951692e-06, 0.000000000000000e+00, 1.497450713944415e-06, 3.202447360855656e-04, 0.000000000000000e+00, 3.203684253619581e-04, 3.202555757436550e-04, 0.000000000000000e+00, 3.203881742503168e-04, 3.206087330219031e-04, 0.000000000000000e+00, 3.206958676773729e-04, 3.198421342385618e-04, 0.000000000000000e+00, 3.199500798106490e-04, 3.203618460283724e-04, 0.000000000000000e+00, 3.202416078612932e-04, 3.203618460283724e-04, 0.000000000000000e+00, 3.202416078612932e-04, 3.814542319508434e-02, 0.000000000000000e+00, 3.837437371916711e-02, 3.809156365399717e-02, 0.000000000000000e+00, 3.837007024569954e-02, 3.747376130669441e-02, 0.000000000000000e+00, 3.714776803646917e-02, 3.652437953833750e-02, 0.000000000000000e+00, 3.664306734795871e-02, 3.852640944692712e-02, 0.000000000000000e+00, 3.473548279116152e-02, 3.852640944692712e-02, 0.000000000000000e+00, 3.473548279116152e-02, 1.264972494595332e+00, 0.000000000000000e+00, 1.189072503928818e+00, 1.257519539247452e+00, 0.000000000000000e+00, 1.170097948556828e+00, 2.540237444749396e-02, 0.000000000000000e+00, 2.466103352329487e-02, 1.892869044825549e+00, 0.000000000000000e+00, 1.835376378989598e+00, 1.126887045585549e+00, 0.000000000000000e+00, 3.352590820603144e+00, 1.126887045585548e+00, 0.000000000000000e+00, 3.352590820603145e+00, 5.867112831407889e+02, 0.000000000000000e+00, 5.222396929953220e+02, 5.455825565667297e+02, 0.000000000000000e+00, 4.790576534133466e+02, 1.967385094668433e+01, 0.000000000000000e+00, 1.788749091106057e+01, 1.487154470466281e+03, 0.000000000000000e+00, 1.523141671532016e+03, 7.261647033150613e+02, 0.000000000000000e+00, 2.716611920468594e+03, 7.261647033150615e+02, 0.000000000000000e+00, 2.716611920468593e+03, 1.105595152609787e-04, 0.000000000000000e+00, 1.106318604028369e-04, 1.106736066466541e-04, 0.000000000000000e+00, 1.107422029237575e-04, 1.105647351319637e-04, 0.000000000000000e+00, 1.106348527345763e-04, 1.106626386179524e-04, 0.000000000000000e+00, 1.107350993981837e-04, 1.106187726998095e-04, 0.000000000000000e+00, 1.106873870518594e-04, 1.106187726998095e-04, 0.000000000000000e+00, 1.106873870518594e-04, 1.349444145559909e-03, 0.000000000000000e+00, 1.349616556472242e-03, 1.331726977732746e-03, 0.000000000000000e+00, 1.332536880879270e-03, 1.342971752048317e-03, 0.000000000000000e+00, 1.345283517681406e-03, 1.327852525577403e-03, 0.000000000000000e+00, 1.329665122110848e-03, 1.343752390018419e-03, 0.000000000000000e+00, 1.341347013283867e-03, 1.343752390018419e-03, 0.000000000000000e+00, 1.341347013283867e-03, 6.901659871551219e-02, 0.000000000000000e+00, 6.961696670940341e-02, 6.849390423526290e-02, 0.000000000000000e+00, 6.865092121370095e-02, 8.831102996863302e-02, 0.000000000000000e+00, 8.116802351216960e-02, 9.975413856252360e-02, 0.000000000000000e+00, 9.005613126433630e-02, 6.340817538840973e-02, 0.000000000000000e+00, 7.312531262280203e-02, 6.340817538840976e-02, 0.000000000000000e+00, 7.312531262280204e-02, 3.305525376256878e+00, 0.000000000000000e+00, 3.276945566097647e+00, 9.556801215563783e-01, 0.000000000000000e+00, 9.463225976031097e-01, 4.036607715062652e+00, 0.000000000000000e+00, 3.678789562647856e+00, 2.526320833971449e-03, 0.000000000000000e+00, 2.530217402628885e-03, 2.793930631468035e+00, 0.000000000000000e+00, 2.768448094029970e+00, 2.793930631468035e+00, 0.000000000000000e+00, 2.768448094029970e+00, 2.808711537284156e+03, 0.000000000000000e+00, 2.509082452605177e+03, 1.686138835198362e+03, 0.000000000000000e+00, 1.602961910467416e+03, 4.740226355056359e+03, 0.000000000000000e+00, 4.385491273179060e+03, 8.485747491780680e+00, 0.000000000000000e+00, 8.296514444477111e+00, 3.746046468413918e+03, 0.000000000000000e+00, 2.054191926789426e+03, 3.746046468413915e+03, 0.000000000000000e+00, 2.054191926789426e+03, 9.592252386021340e-02, 0.000000000000000e+00, 9.499304659275440e-02, 8.910302307924442e-02, 0.000000000000000e+00, 8.827739147002331e-02, 9.113602435682019e-02, 0.000000000000000e+00, 9.029275326042092e-02, 9.309523280550130e-02, 0.000000000000000e+00, 9.219285412158777e-02, 9.208245279349370e-02, 0.000000000000000e+00, 9.121002176829747e-02, 9.208245279349370e-02, 0.000000000000000e+00, 9.121002176829747e-02, 1.079375401711643e-01, 0.000000000000000e+00, 1.069079329023859e-01, 9.809677927438512e-02, 0.000000000000000e+00, 9.725935672655220e-02, 9.706135471449398e-02, 0.000000000000000e+00, 9.626345449683954e-02, 9.810983314345606e-02, 0.000000000000000e+00, 9.726096952543367e-02, 9.747544030565519e-02, 0.000000000000000e+00, 9.658596032264040e-02, 9.747544030565519e-02, 0.000000000000000e+00, 9.658596032264040e-02, 5.878975759433811e-02, 0.000000000000000e+00, 5.882267740561462e-02, 5.841659083350674e-01, 0.000000000000000e+00, 5.781598853610238e-01, 4.184685342135643e-01, 0.000000000000000e+00, 4.126598165708785e-01, 2.649408508334837e-01, 0.000000000000000e+00, 2.616172200198074e-01, 3.326103246709671e-01, 0.000000000000000e+00, 3.341106030820539e-01, 3.326103246709674e-01, 0.000000000000000e+00, 3.341106030820539e-01, 1.248272401432270e-01, 0.000000000000000e+00, 1.233144429273869e-01, 1.980377631390862e+01, 0.000000000000000e+00, 1.957106896760300e+01, 1.167268574451725e+01, 0.000000000000000e+00, 1.109622792787771e+01, 3.333062246095020e-01, 0.000000000000000e+00, 3.228034173410285e-01, 5.929186851258266e+00, 0.000000000000000e+00, 5.746663834021394e+00, 5.929186851258269e+00, 0.000000000000000e+00, 5.746663834021396e+00, 2.815748128029003e+02, 0.000000000000000e+00, 2.650613384222602e+02, 2.865457771372352e+04, 0.000000000000000e+00, 3.341899159635396e+04, 6.542022009905477e+03, 0.000000000000000e+00, 5.926181539579175e+03, 6.599257244655090e+00, 0.000000000000000e+00, 6.381627441611075e+00, 5.079784037951933e+03, 0.000000000000000e+00, 2.444436673249280e+03, 5.079784037951940e+03, 0.000000000000000e+00, 2.444436673249288e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
