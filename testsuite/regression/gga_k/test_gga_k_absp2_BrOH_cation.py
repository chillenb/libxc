
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_absp2_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_absp2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.709753666027794e+02, 2.709484543159136e+02, 2.708748723443017e+02, 2.712743292921572e+02, 2.710584723186182e+02, 2.710584723186182e+02, 1.690429473621931e+01, 1.689720042437504e+01, 1.673410822423343e+01, 1.702422514552523e+01, 1.689660531801269e+01, 1.689660531801269e+01, 1.518312480616897e+00, 1.542228778591187e+00, 2.199748077459609e+00, 2.196280323626253e+00, 2.245855275057101e+00, 2.245855275057101e+00, 5.681153488534664e-01, 5.433111350831270e-01, 1.742490575357222e+00, 7.401514501618803e-01, 6.343222520167835e-01, 6.343222520167835e-01, 7.295514220289409e-01, 7.096419607871056e-01, 9.163518732005687e-01, 7.660910667373834e-01, 6.862764811231521e-01, 6.862764811231512e-01, 5.827143485774782e-01, 2.514806719715487e-01, 5.690286550273529e-01, 2.765851073377897e-01, 4.139117582457968e-01, 4.139117582457968e-01, 2.143992887146694e+01, 2.111730838611592e+01, 2.266808633547630e+01, 2.238073157361222e+01, 2.067491940304383e+01, 2.067491940304383e+01, 3.417385538381588e-01, -3.376949079917964e-01, 3.960414795701044e-01, -1.855009282205813e-01, 2.567856172541900e-01, 2.567856172541900e-01, 9.094019572661657e-01, 9.520151260840750e-01, 8.888942084428640e-01, -3.204957532479208e+00, 7.257062054151922e-01, 7.257062054151922e-01, 6.677759904133060e-01, 7.065156528471008e-01, 2.817587858643931e-01, 8.059184537623110e-01, 4.137754805364273e-01, 4.137754805364279e-01, -4.433355927139885e-01, -2.968197960226119e-01, -3.482806782345728e-01, -3.909302862498079e-01, -3.696009823291518e-01, -3.696009823291518e-01, -4.594570589771465e-01, 7.828833708804364e-01, 4.203633784845714e-01, 5.823071438352053e-02, 2.381874174596505e-01, 2.381874174596505e-01, -3.415691616937369e-01, 9.922543261740200e-01, 8.793696582994858e-01, 4.879767096278738e-01, 6.876617548413901e-01, 6.876617548413901e-01, 6.904042344499554e-01, 9.639380138900316e-01, 9.390712367925955e-01, 2.743033803593996e-01, 7.078173269952330e-01, 7.078173269952329e-01, 8.119264919608966e-01, 3.205930411277006e-01, 4.583290101531718e-01, 7.186701831594569e-01, 3.710393224558589e-01, 3.710393224558585e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_absp2_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_absp2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.102076536496844e+03, -2.102068495184164e+03, -2.102057180765114e+03, -2.102054453165446e+03, -2.102041988185065e+03, -2.102019599747571e+03, -2.102259388663677e+03, -2.102297074830006e+03, -2.102062632604651e+03, -2.102220532344943e+03, -2.102062632604651e+03, -2.102220532344943e+03, -6.546426069746146e+01, -6.541683293767359e+01, -6.545895316281407e+01, -6.540837068732782e+01, -6.529843773421572e+01, -6.525714760684534e+01, -6.559801003890186e+01, -6.554956624416538e+01, -6.546036187888264e+01, -6.541058132864870e+01, -6.546036187888264e+01, -6.541058132864870e+01, -3.370766545218238e+00, -3.277859552188352e+00, -3.401551692966608e+00, -3.287265399132890e+00, -3.821264935841180e+00, -3.994785432842096e+00, -3.961465405511934e+00, -3.902777891630470e+00, -3.152991833339071e+00, -4.996895015653340e+00, -3.152991833339071e+00, -4.996895015653340e+00, -6.954214984088180e-01, -6.827525449578746e-01, -6.742544146441587e-01, -6.618850723560751e-01, -4.364640244675748e+00, -4.052791479940755e+00, -8.054775648585987e-01, -8.134693016191799e-01, -7.392804343369679e-01, -8.082854946096009e-01, -7.392804343369683e-01, -8.082854946096002e-01, -7.277516798779032e-01, -7.313200855486572e-01, -7.088762581326409e-01, -7.105596327332406e-01, -9.244760363109212e-01, -9.185839006329359e-01, -7.609934240975963e-01, -7.715521413374904e-01, -7.285370540049970e-01, -4.575764575083144e-01, -7.285370540049957e-01, -4.575764575083135e-01, -1.094032017524863e+02, -1.093644881008430e+02, -1.091069133052299e+02, -1.090782186007459e+02, -1.093884357344462e+02, -1.093558646683551e+02, -1.091341707041849e+02, -1.090957770935148e+02, -1.092500267503508e+02, -1.092204013304472e+02, -1.092500267503508e+02, -1.092204013304472e+02, -3.681299889180013e+01, -3.681100527257858e+01, -3.671564152800710e+01, -3.671074536069141e+01, -3.806919625915043e+01, -3.768748582321827e+01, -3.797052754088150e+01, -3.760477807787755e+01, -3.587673664760958e+01, -3.662823899165897e+01, -3.587673664760958e+01, -3.662823899165897e+01, -1.729174486469614e+00, -1.717582458526614e+00, -1.296329859818886e+00, -1.289426918483553e+00, -1.561092626681683e+00, -1.598698380708221e+00, -1.052662355353465e+00, -1.132384588775275e+00, -1.750643435500082e+00, -1.614949814401021e+00, -1.750643435500082e+00, -1.614949814401021e+00, -9.494761875279237e-01, -9.364153418148154e-01, -1.072176296929620e+00, -1.073365965146638e+00, -9.184550285051531e-01, -9.169021887477484e-01, -1.159193236193892e+01, -1.157773701163659e+01, -8.392483289422676e-01, -7.153557921862499e-01, -8.392483289422676e-01, -7.153557921862499e-01, -6.423700239693957e-01, -6.904661196404439e-01, -6.921508728874229e-01, -7.203384392187666e-01, -2.899688244552205e-01, -2.748969115094761e-01, -8.109488282764483e-01, -8.266438086926479e-01, -4.112576702211692e-01, -4.148082754516440e-01, -4.112576702211699e-01, -4.148082754516446e-01, -9.492939135107743e-01, -9.542591913466413e-01, -1.080301980684745e+00, -1.084369375061174e+00, -1.034435034345333e+00, -1.038525386709121e+00, -9.959911354183285e-01, -1.000915671891211e+00, -1.015204268537016e+00, -1.019731247010524e+00, -1.015204268537016e+00, -1.019731247010524e+00, -8.583580130718004e-01, -8.637228440519379e-01, -1.756146902825601e+00, -1.755806020450643e+00, -1.488387451058524e+00, -1.486430249289257e+00, -1.220618448070964e+00, -1.224789122423515e+00, -1.349995549634914e+00, -1.354716269383233e+00, -1.349995549634914e+00, -1.354716269383233e+00, -1.455083965353770e+00, -1.446055374310615e+00, -1.185590265440179e+00, -1.184466243147394e+00, -1.163115808619178e+00, -1.151889974011090e+00, -9.714687939286516e-01, -9.745853904299937e-01, -1.058365286386669e+00, -1.050608272091450e+00, -1.058365286386669e+00, -1.050608272091450e+00, -1.517609145477415e+00, -1.512851594637408e+00, -9.689284852627464e-01, -9.679714492263638e-01, -9.547696967107248e-01, -9.408365575699686e-01, -7.237486171430200e-01, -7.265756116714966e-01, -7.722705406791082e-01, -6.920404958842894e-01, -7.722705406791079e-01, -6.920404958842895e-01, -8.167127842627399e-01, -8.081777849281331e-01, -3.662924097426217e-01, -2.752122157574171e-01, -4.661925576767185e-01, -4.518200196037532e-01, -7.343990436971820e-01, -7.398484333959880e-01, -2.863847930107069e-01, -4.071642296382446e-01, -2.863847930107065e-01, -4.071642296382441e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_absp2_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_absp2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.293109184051877e-05, 0.000000000000000e+00, 1.293114179513549e-05, 1.293096651097146e-05, 0.000000000000000e+00, 1.293105074677587e-05, 1.293054083471756e-05, 0.000000000000000e+00, 1.293044770940055e-05, 1.293195688134498e-05, 0.000000000000000e+00, 1.293225240321300e-05, 1.293101834015489e-05, 0.000000000000000e+00, 1.293151277752772e-05, 1.293101834015489e-05, 0.000000000000000e+00, 1.293151277752772e-05, 2.996366023714674e-03, 0.000000000000000e+00, 2.996488674912871e-03, 2.996337920348051e-03, 0.000000000000000e+00, 2.996477974254268e-03, 2.995831833038986e-03, 0.000000000000000e+00, 2.995646812433001e-03, 2.995258276008431e-03, 0.000000000000000e+00, 2.995132169597408e-03, 2.997869647877723e-03, 0.000000000000000e+00, 2.994507043947534e-03, 2.997869647877723e-03, 0.000000000000000e+00, 2.994507043947534e-03, 4.200715030699055e-01, 0.000000000000000e+00, 4.151155631692661e-01, 4.220388987872136e-01, 0.000000000000000e+00, 4.159317269801374e-01, 4.495394155411678e-01, 0.000000000000000e+00, 4.589594270924217e-01, 4.445183114860597e-01, 0.000000000000000e+00, 4.416418299177148e-01, 4.057091912691514e-01, 0.000000000000000e+00, 4.937250273428979e-01, 4.057091912691514e-01, 0.000000000000000e+00, 4.937250273428979e-01, 2.572670895608398e+01, 0.000000000000000e+00, 2.294376358600035e+01, 2.479864693157502e+01, 0.000000000000000e+00, 2.177059790083632e+01, 2.771148678928619e-01, 0.000000000000000e+00, 2.509464054984751e-01, 5.659768155776936e+01, 0.000000000000000e+00, 5.431767266435860e+01, 2.259749942680681e+01, 0.000000000000000e+00, 1.463508641615167e+02, 2.259749942680681e+01, 0.000000000000000e+00, 1.463508641615166e+02, 6.324503014234192e+05, 0.000000000000000e+00, 5.271019733892687e+05, 5.496562727421005e+05, 0.000000000000000e+00, 4.471116735888455e+05, 3.197159921025622e+03, 0.000000000000000e+00, 2.714904401504723e+03, 2.911560192811907e+06, 0.000000000000000e+00, 3.062094217456303e+06, 8.908246190359765e+05, 0.000000000000000e+00, 4.834051151218385e+06, 8.908246190359765e+05, 0.000000000000000e+00, 4.834051151218379e+06, 8.924768742371638e-04, 0.000000000000000e+00, 8.931185292667896e-04, 8.919770600555195e-04, 0.000000000000000e+00, 8.926352803062284e-04, 8.924464270475136e-04, 0.000000000000000e+00, 8.931000056290367e-04, 8.920175841013226e-04, 0.000000000000000e+00, 8.926610178974752e-04, 8.922228825623769e-04, 0.000000000000000e+00, 8.928761159884677e-04, 8.922228825623769e-04, 0.000000000000000e+00, 8.928761159884677e-04, 1.681014771245246e-02, 0.000000000000000e+00, 1.681269628863544e-02, 1.644412702125274e-02, 0.000000000000000e+00, 1.645755969611644e-02, 1.712573498435997e-02, 0.000000000000000e+00, 1.703717992720586e-02, 1.680069107032818e-02, 0.000000000000000e+00, 1.671020204194981e-02, 1.637657215386190e-02, 0.000000000000000e+00, 1.659362732978037e-02, 1.637657215386190e-02, 0.000000000000000e+00, 1.659362732978037e-02, 6.214155513929877e-01, 0.000000000000000e+00, 6.263773909722783e-01, 4.869557603842461e-01, 0.000000000000000e+00, 4.862931574736049e-01, 8.325516992461210e-01, 0.000000000000000e+00, 7.470881093773013e-01, 7.371961063213970e-01, 0.000000000000000e+00, 6.683382188279615e-01, 5.523843371812366e-01, 0.000000000000000e+00, 6.439399747262756e-01, 5.523843371812368e-01, 0.000000000000000e+00, 6.439399747262758e-01, 1.680322502110340e+02, 0.000000000000000e+00, 1.633153648043942e+02, 2.432715455530025e+01, 0.000000000000000e+00, 2.396654094362242e+01, 2.269837421716149e+02, 0.000000000000000e+00, 1.940019561885622e+02, 1.780193950795826e-02, 0.000000000000000e+00, 1.782595457225113e-02, 1.121634537776805e+02, 0.000000000000000e+00, 9.435182145012413e+01, 1.121634537776805e+02, 0.000000000000000e+00, 9.435182145012413e+01, 6.896246147170695e+06, 0.000000000000000e+00, 6.144157416218541e+06, 3.268601510341825e+06, 0.000000000000000e+00, 3.124571891844912e+06, 7.817219853849012e+06, 0.000000000000000e+00, 6.581441351138420e+06, 6.939684423521389e+02, 0.000000000000000e+00, 6.813232572463984e+02, 7.337213909483019e+06, 0.000000000000000e+00, 2.832798288875730e+06, 7.337213909483017e+06, 0.000000000000000e+00, 2.832798288875732e+06, 6.184655642516127e-01, 0.000000000000000e+00, 6.113483131048588e-01, 6.292686936810393e-01, 0.000000000000000e+00, 6.219547129496448e-01, 6.254503941826527e-01, 0.000000000000000e+00, 6.181833347862691e-01, 6.222962328002316e-01, 0.000000000000000e+00, 6.151314409845747e-01, 6.238720007562847e-01, 0.000000000000000e+00, 6.166568959141232e-01, 6.238720007562847e-01, 0.000000000000000e+00, 6.166568959141232e-01, 6.710491118734169e-01, 0.000000000000000e+00, 6.644380041926748e-01, 1.062460454592638e+00, 0.000000000000000e+00, 1.048770501185330e+00, 9.254286161076486e-01, 0.000000000000000e+00, 9.132160890872123e-01, 8.105979508028869e-01, 0.000000000000000e+00, 8.021068030259340e-01, 8.663681416474144e-01, 0.000000000000000e+00, 8.567845172274138e-01, 8.663681416474144e-01, 0.000000000000000e+00, 8.567845172274138e-01, 4.233638525448552e-01, 0.000000000000000e+00, 4.213009399359828e-01, 1.207679180856774e+01, 0.000000000000000e+00, 1.186942020676453e+01, 7.016998509778441e+00, 0.000000000000000e+00, 6.810034028331159e+00, 3.024385837125076e+00, 0.000000000000000e+00, 2.974767882753505e+00, 4.558073793085399e+00, 0.000000000000000e+00, 4.562901000858759e+00, 4.558073793085403e+00, 0.000000000000000e+00, 4.562901000858760e+00, 1.366818081411902e+00, 0.000000000000000e+00, 1.338966339251527e+00, 3.383498365853440e+03, 0.000000000000000e+00, 3.314985802507890e+03, 1.390172763857115e+03, 0.000000000000000e+00, 1.259415447184266e+03, 3.424824182712280e+00, 0.000000000000000e+00, 3.274449679751296e+00, 3.625707363724646e+02, 0.000000000000000e+00, 3.079851680605962e+02, 3.625707363724646e+02, 0.000000000000000e+00, 3.079851680605963e+02, 2.160802635499018e+05, 0.000000000000000e+00, 1.941851121390783e+05, 1.678524443444068e+08, 0.000000000000000e+00, 1.667067706068541e+08, 1.992427887587956e+07, 0.000000000000000e+00, 1.656041588063657e+07, 4.122466915137551e+02, 0.000000000000000e+00, 3.926655637176916e+02, 8.633543549065115e+06, 0.000000000000000e+00, 3.678861720624852e+06, 8.633543549065135e+06, 0.000000000000000e+00, 3.678861720624864e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
