
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_golden_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_golden", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.344803903114911e+03, 2.344808138547111e+03, 2.344845753548863e+03, 2.344776025514858e+03, 2.344805980258174e+03, 2.344805980258174e+03, 6.496009320296685e+01, 6.495869863708009e+01, 6.492575959792636e+01, 6.501011265470062e+01, 6.495992936927463e+01, 6.495992936927463e+01, 2.691827400405830e+00, 2.694215962402162e+00, 2.786102804885310e+00, 2.815934285407422e+00, 2.692656895682891e+00, 2.692656895682891e+00, 2.953421513406175e-01, 2.938031628064174e-01, 3.586287909573858e+00, 2.757178120614006e-01, 2.947379762449496e-01, 2.947379762449496e-01, 1.451917389941199e-01, 1.449615356415611e-01, 2.186546390537580e-01, 1.728568607180247e-01, 1.422270041672511e-01, 1.422270041672511e-01, 1.347393104811501e+02, 1.346944820017310e+02, 1.347350906075221e+02, 1.347002269349179e+02, 1.347157831807640e+02, 1.347157831807640e+02, 2.523594898990505e+01, 2.541275672443237e+01, 2.534643966751664e+01, 2.548250208852785e+01, 2.521743044304296e+01, 2.521743044304296e+01, 1.766352534206114e+00, 1.873575451789955e+00, 1.605508287727835e+00, 1.588685144226715e+00, 1.871133530343797e+00, 1.871133530343797e+00, 2.757205627845909e-01, 4.138463273506330e-01, 2.565625560030707e-01, 1.733877950455724e+01, 2.565802559197415e-01, 2.565802559197415e-01, 1.678294898827512e-01, 1.676334592345205e-01, 9.908854399676584e-02, 2.157473841405392e-01, 1.379306609720090e-01, 1.379306609720091e-01, 1.644363493225940e+00, 1.664865678618719e+00, 1.657527086468622e+00, 1.651831445451520e+00, 1.654677030691744e+00, 1.654677030691744e+00, 1.534609029800900e+00, 1.457773858444893e+00, 1.473271934346403e+00, 1.491278569207884e+00, 1.480378358451628e+00, 1.480378358451628e+00, 2.067064790931175e+00, 5.200400760763225e-01, 5.965985835042992e-01, 7.419577683687282e-01, 6.552227606731384e-01, 6.552227606731383e-01, 1.205374796445164e+00, 2.391034470302175e-01, 2.352701371211474e-01, 6.144724667413120e-01, 2.136121122860450e-01, 2.136121122860448e-01, 1.674324473488951e-01, 1.278863742220578e-01, 1.378023424114272e-01, 1.926615669532151e-01, 1.141444657510143e-01, 1.141444657510144e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_golden_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_golden", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.170265837784045e+03, 3.170288376144097e+03, 3.170389923845716e+03, 3.170020829784007e+03, 3.170277715400906e+03, 3.170277715400906e+03, 8.121994178012304e+01, 8.122194992212373e+01, 8.128379047241918e+01, 8.121161130030987e+01, 8.122166661924891e+01, 8.122166661924891e+01, 2.679426802485186e+00, 2.666016727760313e+00, 2.292427208280448e+00, 2.342876797195836e+00, 2.674576156495265e+00, 2.674576156495265e+00, 1.066404938561388e-01, 1.189556051091763e-01, 4.128954431775071e+00, -6.442604500549910e-02, 1.104621221548923e-01, 1.104621221548923e-01, -1.439378371423070e-01, -1.435858062221895e-01, -1.959266126711702e-01, -1.725682834595855e-01, -1.408797983194042e-01, -1.408797983194042e-01, 1.926891621982414e+02, 1.928504681729554e+02, 1.927056704230708e+02, 1.928310964070056e+02, 1.927718885106594e+02, 1.927718885106594e+02, 2.096199200788655e+01, 2.143847782654665e+01, 2.058870997322597e+01, 2.096068309031310e+01, 2.176520469844909e+01, 2.176520469844909e+01, 2.304893330161728e+00, 2.930245604089611e+00, 2.060289622117051e+00, 2.399356343276559e+00, 2.518973301211858e+00, 2.518973301211858e+00, -1.616658361196172e-01, -6.083053642707683e-03, -1.454128243386668e-01, 2.710466269729509e+01, -1.040754513842561e-01, -1.040754513842561e-01, -1.675609338258261e-01, -1.672827047282049e-01, -9.889150488977806e-02, -1.715804535873200e-01, -1.376394633450026e-01, -1.376394633450026e-01, 2.690552777403953e+00, 2.623889123549769e+00, 2.647747253749689e+00, 2.666209287733613e+00, 2.656971750649729e+00, 2.656971750649729e+00, 2.526523640363872e+00, 1.598425797983139e+00, 1.861268579919196e+00, 2.112225758600374e+00, 1.984772532576081e+00, 1.984772532576081e+00, 3.214016486365491e+00, 1.250100988851179e-01, 3.132737810088884e-01, 7.451493762717534e-01, 5.080920318559806e-01, 5.080920318559807e-01, 1.280815934669070e+00, -2.196072736319102e-01, -1.995397829592954e-01, 7.131004987201282e-01, -1.384740569098450e-01, -1.384740569098450e-01, -1.657101310128437e-01, -1.278600827249907e-01, -1.377074664956691e-01, -1.242741675032360e-01, -1.139341409722229e-01, -1.139341409722230e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_golden_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_golden", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.867971815156651e-06, 1.867958212685195e-06, 1.867887513492069e-06, 1.868110464574448e-06, 1.867964725396038e-06, 1.867964725396038e-06, 4.328772280556080e-04, 4.328745026314362e-04, 4.327461583237654e-04, 4.326921161607012e-04, 4.328702943315309e-04, 4.328702943315309e-04, 6.145868623327770e-02, 6.164833726351007e-02, 6.684821222082607e-02, 6.529386784816546e-02, 6.152776677822201e-02, 6.152776677822201e-02, 3.001828500238942e+00, 2.885043535094714e+00, 3.570035000646563e-02, 7.877219899812947e+00, 2.966145964422159e+00, 2.966145964422159e+00, 1.723064427231965e+04, 1.499330222401732e+04, 2.232822731426873e+02, 1.560643390293847e+05, 1.547197992246567e+04, 1.547197992246567e+04, 1.291285185941136e-04, 1.290596460812210e-04, 1.291212496684572e-04, 1.290677003910551e-04, 1.290935068856545e-04, 1.290935068856545e-04, 2.436480289201427e-03, 2.385696938780244e-03, 2.457418530994795e-03, 2.417206963271330e-03, 2.375695497903566e-03, 2.375695497903566e-03, 9.313348118666481e-02, 7.266354805891172e-02, 1.090044061516258e-01, 9.606326220079237e-02, 8.317335094626588e-02, 8.317335094626588e-02, 1.986217939234935e+01, 2.938222439565011e+00, 2.064591829338862e+01, 2.582172786445720e-03, 1.284610723874912e+01, 1.284610723874912e+01, 1.738378749938499e+05, 1.164640646561974e+05, 2.766101972246518e+05, 8.242349094617856e+01, 1.539625462186526e+05, 1.539625462186526e+05, 8.476679480519134e-02, 8.613903578947037e-02, 8.564373244102691e-02, 8.526420162781424e-02, 8.545387614867145e-02, 8.545387614867145e-02, 9.348158472956941e-02, 1.431938112024486e-01, 1.256443125606318e-01, 1.118431165018361e-01, 1.186078970652570e-01, 1.186078970652570e-01, 6.303947025574479e-02, 1.476748662157816e+00, 8.815077208092615e-01, 4.218746616958262e-01, 6.097488028456662e-01, 6.097488028456665e-01, 1.951619584578134e-01, 2.810429943368533e+02, 1.132767683602426e+02, 5.001603177876236e-01, 3.714555961488735e+01, 3.714555961488734e+01, 1.070354035612209e+04, 5.675104436875206e+06, 8.278713645396183e+05, 4.277920389684723e+01, 2.508194267368520e+05, 2.508194267368531e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
