
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_absp1_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_absp1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [1.055658606081190e+02, 1.055416307268120e+02, 1.054696919706376e+02, 1.058657485486532e+02, 1.055527803568911e+02, 1.055527803568911e+02, 1.252411565617927e+01, 1.251839704622147e+01, 1.236239562717815e+01, 1.263670347362211e+01, 1.252128105908265e+01, 1.252128105908265e+01, 1.515704175228452e+00, 1.539981869493399e+00, 2.267246516632567e+00, 2.253894904999643e+00, 1.524416535763376e+00, 1.524416535763376e+00, 4.384275022888339e-01, 4.174470871042054e-01, 1.207090552150857e+00, 6.474902661202238e-01, 4.316625286837938e-01, 4.316625286837938e-01, 5.007653999320532e-01, 4.997915782599651e-01, 7.238672362479627e-01, 5.979314910501059e-01, 4.903673250691140e-01, 4.903673250691140e-01, -9.209737860733439e+00, -9.534105888138100e+00, -9.242194890977419e+00, -9.494425558146656e+00, -9.377169634662494e+00, -9.377169634662494e+00, 2.024914505491766e+01, 1.991221268892649e+01, 2.101333744594506e+01, 2.074636205070078e+01, 1.904521378788984e+01, 1.904521378788984e+01, 2.004994430373072e-01, -4.924661213964474e-01, 2.326752397843598e-01, -2.936423030050690e-01, 1.000328085992045e-01, 1.000328085992045e-01, 7.887440687945046e-01, 8.402374578242218e-01, 7.266476201733396e-01, -4.538666393354049e+00, 6.666374646109638e-01, 6.666374646109638e-01, 5.805581358786815e-01, 5.797601686794931e-01, 3.427125916828968e-01, 6.826620040940427e-01, 4.770293010269870e-01, 4.770293010269873e-01, -6.047718616363293e-01, -4.667496745312534e-01, -5.161483932634210e-01, -5.544082415217735e-01, -5.352733370256317e-01, -5.352733370256317e-01, -5.869994181550745e-01, 6.067751859893418e-01, 2.561108649579773e-01, -7.224910460095713e-02, 9.098840612319395e-02, 9.098840612319370e-02, -5.159525159945157e-01, 8.631537265038586e-01, 7.434893432622073e-01, 4.081778315980181e-01, 5.782745650436623e-01, 5.782745650436621e-01, 5.610679360797497e-01, 7.993460866148351e-01, 7.624955405874081e-01, 1.986182238513794e-01, 6.302827372442733e-01, 6.302827372442729e-01, 5.770720592437271e-01, 4.426454126544412e-01, 4.768702937814622e-01, 5.675674657985387e-01, 3.948099454488720e-01, 3.948099454488724e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_absp1_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_absp1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.377774593858489e+03, -2.377761394779590e+03, -2.377746791057205e+03, -2.377962052931785e+03, -2.377767262968432e+03, -2.377767262968432e+03, -7.275029006921227e+01, -7.274482425261344e+01, -7.260073025616049e+01, -7.288005374308644e+01, -7.274809860635432e+01, -7.274809860635432e+01, -3.728660906819550e+00, -3.748397737840340e+00, -4.359600882056859e+00, -4.379325071032186e+00, -3.735716553260776e+00, -3.735716553260776e+00, -6.040443521098975e-01, -5.875036994854300e-01, -4.385770396786615e+00, -7.345424741472553e-01, -5.986049692245284e-01, -5.986049692245284e-01, -5.012820074949998e-01, -5.003583787807462e-01, -7.332311831175889e-01, -5.980503848805828e-01, -4.909223738784275e-01, -4.909223738784275e-01, -1.256907928831758e+02, -1.254144135838327e+02, -1.256633986536268e+02, -1.254484796587258e+02, -1.255477511022039e+02, -1.255477511022039e+02, -3.928269674600779e+01, -3.921492132392985e+01, -3.993861909793098e+01, -3.988095434438324e+01, -3.840205946618458e+01, -3.840205946618458e+01, -1.877852739156858e+00, -1.486708153625933e+00, -1.742983978640452e+00, -1.349430789846279e+00, -1.908756823200133e+00, -1.908756823200133e+00, -8.357346161804735e-01, -1.008235926591886e+00, -7.724413096190734e-01, -1.377203179380910e+01, -7.294694440795839e-01, -7.294694440795839e-01, -5.806687809741349e-01, -5.799046795360956e-01, -3.427937717949759e-01, -7.008587794819684e-01, -4.771492744493137e-01, -4.771492744493138e-01, -1.181213641863186e+00, -1.300217303962163e+00, -1.257624634906523e+00, -1.224624540550502e+00, -1.241125960887054e+00, -1.241125960887054e+00, -1.086187241952811e+00, -1.865929444437691e+00, -1.629941556835404e+00, -1.412394678456044e+00, -1.518630573226610e+00, -1.518630573226609e+00, -1.659852970251710e+00, -1.128914398587971e+00, -1.118356757441639e+00, -1.020865975189896e+00, -1.057560259565659e+00, -1.057560259565659e+00, -1.585378517298814e+00, -8.073785100549373e-01, -7.772164465020908e-01, -7.455782856214926e-01, -6.612396160592675e-01, -6.612396160592670e-01, -5.777816535741807e-01, -4.426562447512331e-01, -4.769093826587543e-01, -5.957430743719300e-01, -3.948965992577340e-01, -3.948965992577344e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_absp1_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_absp1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [6.466056283234563e-06, 6.466009197756443e-06, 6.465764469780239e-06, 6.466536223526939e-06, 6.466031741755516e-06, 6.466031741755516e-06, 1.498421174038643e-03, 1.498411739878048e-03, 1.497967471120726e-03, 1.497780402094735e-03, 1.498397172686069e-03, 1.498397172686069e-03, 2.127416061921152e-01, 2.133980905275349e-01, 2.313976576874749e-01, 2.260172348590344e-01, 2.129807311553839e-01, 2.129807311553839e-01, 1.039094480851941e+01, 9.986689159943243e+00, 1.235781346377657e-01, 2.726729965319867e+01, 1.026742833838440e+01, 1.026742833838440e+01, 5.964453786572185e+04, 5.189989231390612e+04, 7.729001762631485e+02, 5.402227120247934e+05, 5.355685357776580e+04, 5.355685357776580e+04, 4.469833335950086e-04, 4.467449287426880e-04, 4.469581719292752e-04, 4.467728090459601e-04, 4.468621392195736e-04, 4.468621392195736e-04, 8.433970231851093e-03, 8.258181711162384e-03, 8.506448761135831e-03, 8.367254872862299e-03, 8.223561338896960e-03, 8.223561338896960e-03, 3.223851271846090e-01, 2.515276663577714e-01, 3.773229443710125e-01, 3.325266768488966e-01, 2.879077532755357e-01, 2.879077532755357e-01, 6.875369789659389e+01, 1.017076998310966e+01, 7.146664024634525e+01, 8.938290414619800e-03, 4.446729428797773e+01, 4.446729428797773e+01, 6.017464903633266e+05, 4.031448391945296e+05, 9.574968365468717e+05, 2.853120840444644e+02, 5.329472753722590e+05, 5.329472753722590e+05, 2.934235204795085e-01, 2.981735854250898e-01, 2.964590738343240e-01, 2.951453133270494e-01, 2.958018789761704e-01, 2.958018789761704e-01, 3.235901009869711e-01, 4.956708849315528e-01, 4.349226204021869e-01, 3.871492494294326e-01, 4.105657975335820e-01, 4.105657975335819e-01, 2.182135508852704e-01, 5.111822292084749e+00, 3.051372879724367e+00, 1.460335367408629e+00, 2.110668932927307e+00, 2.110668932927307e+00, 6.755606254308927e-01, 9.728411342429538e+02, 3.921118904777629e+02, 1.731324176957159e+00, 1.285807832823024e+02, 1.285807832823023e+02, 3.705071661734571e+04, 1.964459228149110e+07, 2.865708569560217e+06, 1.480818596429327e+02, 8.682210925506415e+05, 8.682210925506453e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
