
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_pg1_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_pg1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.524120731550128e+03, 2.524119487316905e+03, 2.524142480625232e+03, 2.524162295543502e+03, 2.524119836775174e+03, 2.524119836775174e+03, 7.243635117635311e+01, 7.243324201125701e+01, 7.235389442119103e+01, 7.252151185037627e+01, 7.243536913613384e+01, 7.243536913613384e+01, 3.347095301205485e+00, 3.359477546858476e+00, 3.779986240930482e+00, 3.801918682372063e+00, 3.351503148379617e+00, 3.351503148379617e+00, 5.210932412481505e-01, 5.051848995577694e-01, 4.158262077097284e+00, 6.805942192403678e-01, 5.158479615804147e-01, 5.158479615804147e-01, 5.009591277681581e-01, 5.000041284552580e-01, 7.273787163240724e-01, 5.979760762365348e-01, 4.905754683726063e-01, 4.905754683726063e-01, 1.416858498151406e+02, 1.415726706346258e+02, 1.416747968595606e+02, 1.415867807797044e+02, 1.416269851752132e+02, 1.416269851752132e+02, 3.409677174984687e+01, 3.410205940125347e+01, 3.458093072186034e+01, 3.457753595784208e+01, 3.349741324028229e+01, 3.349741324028229e+01, 1.931503400985194e+00, 1.907384618803825e+00, 1.768964294160115e+00, 1.636515637106039e+00, 2.018001034453817e+00, 2.018001034453817e+00, 8.063660469584929e-01, 9.076549218153610e-01, 7.438211865889555e-01, 1.765435285315034e+01, 6.902404299126749e-01, 6.902404299126749e-01, 5.805996277894765e-01, 5.798143602507189e-01, 3.427430342249264e-01, 6.894857948647501e-01, 4.770742910603595e-01, 4.770742910603596e-01, 1.652046404339361e+00, 1.690819064658660e+00, 1.676515160732377e+00, 1.665750053502559e+00, 1.671095221637793e+00, 1.671095221637794e+00, 1.539295306612579e+00, 1.730430827780008e+00, 1.634951359619531e+00, 1.574251813913276e+00, 1.599437028303220e+00, 1.599437028303220e+00, 2.108331809622696e+00, 9.850187871461451e-01, 9.561504678963436e-01, 9.186661612854555e-01, 9.118065708916365e-01, 9.118065708916365e-01, 1.452635208913560e+00, 8.023582454048735e-01, 7.680158803054141e-01, 7.097641496691145e-01, 6.418915994380476e-01, 6.418915994380471e-01, 5.773381571176470e-01, 4.426494746907381e-01, 4.768849521104466e-01, 5.781333532671624e-01, 3.948424406271953e-01, 3.948424406271957e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_pg1_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_pg1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [2.813705307024196e+03, 2.813740795108543e+03, 2.813877609091030e+03, 2.813296886622071e+03, 2.813724202028456e+03, 2.813724202028456e+03, 6.535473892937753e+01, 6.536084259105337e+01, 6.553368481897232e+01, 6.526318879412089e+01, 6.535843513210718e+01, 6.535843513210718e+01, 1.189715402938073e+00, 1.152773416227634e+00, 2.849809005253957e-02, 9.569265941285406e-02, 1.176434007002344e+00, 1.176434007002344e+00, -3.570422024444388e-01, -3.220563300934866e-01, 2.866810078493666e+00, -6.730601013117136e-01, -3.459720841267542e-01, -3.459720841267542e-01, -5.009591277681580e-01, -5.000041284552579e-01, -7.273787163240724e-01, -5.979760762365345e-01, -4.905754683726066e-01, -4.905754683726066e-01, 1.798868053529584e+02, 1.801989772224609e+02, 1.799184109689405e+02, 1.801611585868008e+02, 1.800475506267983e+02, 1.800475506267983e+02, 7.686273096676471e-01, 1.622498018759096e+00, -4.310980119891127e-01, 2.437928893510059e-01, 2.868248346593339e+00, 2.868248346593339e+00, 1.965145249446371e+00, 2.880713032173712e+00, 1.719539554242021e+00, 2.320886638635431e+00, 2.225588410773403e+00, 2.225588410773403e+00, -8.063488793217382e-01, -8.541181741161518e-01, -7.437920628018615e-01, 2.664147391679482e+01, -6.893399844305391e-01, -6.893399844305391e-01, -5.805996277894765e-01, -5.798143602507190e-01, -3.427430342249262e-01, -6.894857948484525e-01, -4.770742910603593e-01, -4.770742910603596e-01, 2.681643119861066e+00, 2.587029074488331e+00, 2.622395903948537e+00, 2.648626959917440e+00, 2.635630259604601e+00, 2.635630259604602e+00, 2.521327217638974e+00, 9.881435853420278e-01, 1.520468840160580e+00, 1.956919181809545e+00, 1.745925708960648e+00, 1.745925708960649e+00, 3.152216926544547e+00, -7.843944935871666e-01, -4.650791312541899e-01, 3.437699607290395e-01, -7.409053540691518e-02, -7.409053540691472e-02, 7.236899895510959e-01, -8.023582454048731e-01, -7.680158803054121e-01, 5.034242236820994e-01, -6.418903227618102e-01, -6.418903227618097e-01, -5.773381571176468e-01, -4.426494746907382e-01, -4.768849521104467e-01, -5.781320264124923e-01, -3.948424406271951e-01, -3.948424406271954e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_pg1_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_pg1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [3.527511151645819e-06, 3.527464371471307e-06, 3.527267267164601e-06, 3.528033111912987e-06, 3.527486384455857e-06, 3.527486384455857e-06, 8.862205086938692e-04, 8.861762567436025e-04, 8.848511427879679e-04, 8.865710705369957e-04, 8.861864234386242e-04, 8.861864234386242e-04, 1.492726008266181e-01, 1.502515767166445e-01, 1.783170327815117e-01, 1.733737532319139e-01, 1.496266326471307e-01, 1.496266326471307e-01, 9.540632273129843e+00, 9.058895663652958e+00, 7.849449054693250e-02, 2.717244754266112e+01, 9.392436171524103e+00, 9.392436171524103e+00, 5.964453786572185e+04, 5.189989231390612e+04, 7.729001762631485e+02, 5.402227120247934e+05, 5.355685357776579e+04, 5.355685357776579e+04, 2.278895982878830e-04, 2.274243203536879e-04, 2.278423914645574e-04, 2.274806000084069e-04, 2.276503446517625e-04, 2.276503446517625e-04, 6.473975757079858e-03, 6.297751686398173e-03, 6.589243816496106e-03, 6.448697286291766e-03, 6.209022287541010e-03, 6.209022287541010e-03, 1.827650562433535e-01, 1.126557328956086e-01, 2.175872182640225e-01, 1.572258355840497e-01, 1.578268012797618e-01, 1.578268012797618e-01, 6.875319356448119e+01, 9.994452582345653e+00, 7.146568054153801e+01, 4.006439320059908e-03, 4.444817926011563e+01, 4.444817926011563e+01, 6.017464903633265e+05, 4.031448391945296e+05, 9.574968365468716e+05, 2.853120840420326e+02, 5.329472753722589e+05, 5.329472753722589e+05, 1.215411683872752e-01, 1.318758332474953e-01, 1.281665824420763e-01, 1.253027764962985e-01, 1.267344452695166e-01, 1.267344452695166e-01, 1.325053080528602e-01, 3.266159104953794e-01, 2.546890186761163e-01, 1.998206785484114e-01, 2.260938216483339e-01, 2.260938216483339e-01, 9.865983373999838e-02, 4.830276353356092e+00, 2.664574381052474e+00, 1.019253120454488e+00, 1.664192212533538e+00, 1.664192212533539e+00, 4.549411668655404e-01, 9.728411342429536e+02, 3.921118904777625e+02, 1.092748525218106e+00, 1.285806939184980e+02, 1.285806939184980e+02, 3.705071661734569e+04, 1.964459228149110e+07, 2.865708569560217e+06, 1.480817409699108e+02, 8.682210925506414e+05, 8.682210925506451e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
