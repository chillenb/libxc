
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_dk_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_dk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.189205334174215e+03, 2.189213790898022e+03, 2.189261178911148e+03, 2.189135158883382e+03, 2.189199797665740e+03, 2.189199797665740e+03, 5.928910810506132e+01, 5.928845984248679e+01, 5.927637716382102e+01, 5.931990419103216e+01, 5.929118930347926e+01, 5.929118930347926e+01, 2.303377253486494e+00, 2.300710084910368e+00, 2.229372759776515e+00, 2.264707833281864e+00, 2.255677532121350e+00, 2.255677532121350e+00, 1.507722754936348e-01, 1.552040978641654e-01, 3.100781950697251e+00, 1.462790696353772e-01, 1.261876508616260e-01, 1.261876508616261e-01, 7.218046858976206e-01, 7.013086493832767e-01, 7.442295992172244e-01, 7.621934884134086e-01, 6.745923307527013e-01, 6.745923307527002e-01, 1.280260759377182e+02, 1.280293766489405e+02, 1.280266106193065e+02, 1.280295181609552e+02, 1.280275318457057e+02, 1.280275318457057e+02, 2.013865999225045e+01, 2.040846325499057e+01, 1.997028760243473e+01, 2.021235626224705e+01, 2.036411655481160e+01, 2.036411655481160e+01, 1.669858176020806e+00, 1.874079857052643e+00, 1.443089177896794e+00, 1.479183672980396e+00, 1.711774758444292e+00, 1.711774758444292e+00, 3.277890066088314e-01, 1.834653970016179e-01, 3.505870067129098e-01, 1.698097100779633e+01, 1.760184899639193e-01, 1.760184899639193e-01, 6.646474287008319e-01, 7.024937163038177e-01, 2.799076243043965e-01, 4.675969934744861e-01, 4.103378342390477e-01, 4.103378342390482e-01, 1.584868990277200e+00, 1.583720427365120e+00, 1.584005915548892e+00, 1.584312487227357e+00, 1.584144546077279e+00, 1.584144546077279e+00, 1.495535123952781e+00, 1.238062142109693e+00, 1.309497495237673e+00, 1.377097826608729e+00, 1.341702815895681e+00, 1.341702815895681e+00, 2.063430289214391e+00, 2.431288939316124e-01, 3.556361327421605e-01, 6.252711708430473e-01, 4.830685095549767e-01, 4.830685095549767e-01, 1.051795172482876e+00, 8.025976146136296e-01, 6.757418605553588e-01, 5.645202512591636e-01, 2.935344080285280e-01, 2.935344080285279e-01, 7.979559672747349e-01, 3.179660259981978e-01, 4.565823169914826e-01, 3.260619980287464e-01, 3.651742382605374e-01, 3.651742382605370e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_dk_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_dk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.311391604000868e+03, 3.311413340510389e+03, 3.311510437817696e+03, 3.311187040901747e+03, 3.311356423968320e+03, 3.311356423968320e+03, 8.700625347175688e+01, 8.700690026806457e+01, 8.702624625648316e+01, 8.702581694141183e+01, 8.701122383194597e+01, 8.701122383194597e+01, 3.315014239190605e+00, 3.313697308760345e+00, 3.373270717978809e+00, 3.414259295042091e+00, 3.393527953985555e+00, 3.393527953985555e+00, 2.328348347598732e-01, 2.634447961003161e-01, 4.447896447908421e+00, -2.941833440437348e-01, -2.909754987021310e-02, -2.909754987021308e-02, -7.377651874492350e-01, -7.189556788045871e-01, -1.128002312675209e+00, -7.675687568374863e-01, -6.830499693434350e-01, -6.830499693434349e-01, 1.988205388464085e+02, 1.989424285311870e+02, 1.988261917033612e+02, 1.989337950811745e+02, 1.988822889897964e+02, 1.988822889897964e+02, 3.102942285946623e+01, 3.122280805506949e+01, 3.130845407325970e+01, 3.146898585884632e+01, 3.101405934117282e+01, 3.101405934117282e+01, 2.485093044889105e+00, 3.032919287186699e+00, 2.121177923612663e+00, 2.365407487345562e+00, 2.574639874619278e+00, 2.574639874619278e+00, -9.539960391028673e-01, -1.092805472038670e-01, -9.866060999728696e-01, 2.753078423465344e+01, -5.138120397452761e-01, -5.138120397452761e-01, -6.678519873199746e-01, -7.076298953346587e-01, -2.829041461612645e-01, -1.037028810463989e+00, -4.146869178075464e-01, -4.146869178075461e-01, 2.616712839781510e+00, 2.566926456742324e+00, 2.584738254724478e+00, 2.599217768869459e+00, 2.592002233688882e+00, 2.592002233688882e+00, 2.481735567414654e+00, 1.779122936324069e+00, 1.911405805699940e+00, 2.120451658624008e+00, 2.007223316044211e+00, 2.007223316044211e+00, 3.328941175951692e+00, 3.183235454229590e-01, 6.904058020806264e-01, 9.110544211843199e-01, 8.147763594749937e-01, 8.147763594749938e-01, 1.513471205150014e+00, -1.169421869475771e+00, -1.207541158832443e+00, 8.111445871618086e-01, -8.070623524558197e-01, -8.070623524558186e-01, -8.293933863795955e-01, -3.183344700951968e-01, -4.582031916328098e-01, -8.567283881781117e-01, -3.688988942148140e-01, -3.688988942148134e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_dk_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_dk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [8.539494451174168e-07, 8.539435353208005e-07, 8.539130750218095e-07, 8.540010710311214e-07, 8.539555650024018e-07, 8.539555650024018e-07, 1.889912527341922e-04, 1.890001604254582e-04, 1.891906141840937e-04, 1.887500146892903e-04, 1.889882644428021e-04, 1.889882644428021e-04, 1.868802787001350e-02, 1.845064050646284e-02, 1.026877642618671e-02, 1.051199964613623e-02, 1.085985795323727e-02, 1.085985795323727e-02, 1.368384403327508e-01, -3.516313154973112e-02, 1.336945562866058e-02, 7.298679936306607e+00, 2.599972002210372e+00, 2.599972002210373e+00, 2.867810582453198e+05, 2.459378577167630e+05, 1.420122245734490e+03, 1.488835891826161e+06, 7.503681501727609e+05, 7.503681501727618e+05, 5.888171719139851e-05, 5.882832162114263e-05, 5.887925088135684e-05, 5.883212466302266e-05, 5.885475575737567e-05, 5.885475575737567e-05, 2.937281278336762e-04, 3.192881857236732e-04, 2.229919057939572e-04, 2.474976094813753e-04, 3.411098737084722e-04, 3.411098737084722e-04, 4.054492624668191e-02, 3.018146613010424e-02, 4.989783852258872e-02, 4.463260655494680e-02, 3.911969330949538e-02, 3.911969330949538e-02, 5.054156741768022e+01, 1.884165986159740e+00, 6.849166928293769e+01, 1.099716601447589e-03, 2.094947396916935e+01, 2.094947396916935e+01, 3.241365745648343e+06, 1.593596702714069e+06, 3.564432969935069e+06, 2.888456625246588e+02, 2.038753406934814e+06, 2.038753406934816e+06, 3.572137089290603e-02, 3.864827095522064e-02, 3.768240361436781e-02, 3.683074752034588e-02, 3.726252304260581e-02, 3.726252304260581e-02, 3.792605341251670e-02, 4.902576757688359e-02, 5.694895852470467e-02, 5.337154633122161e-02, 5.637861991229901e-02, 5.637861991229901e-02, 2.639369464304178e-02, 1.832268982338854e-01, -1.287010234077698e-01, 1.100345296853145e-01, -1.001266801669552e-02, -1.001266801669524e-02, 6.078004578096333e-02, 1.630279818219927e+03, 6.138229760335099e+02, 1.837745392822311e-01, 1.133207500023137e+02, 1.133207500023138e+02, 1.020071715820961e+05, 8.343591547360103e+07, 9.021685223937184e+06, 1.455366736640238e+02, 2.573353326022012e+06, 2.573353326022023e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
