
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_ghds10_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_ghds10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [3.028424017343219e+03, 3.028413965371870e+03, 3.028415719436533e+03, 3.028579400260348e+03, 3.028418326756133e+03, 3.028418326756133e+03, 9.166754016239268e+01, 9.166214746724943e+01, 9.152149773389857e+01, 9.180227200929369e+01, 9.166553472858918e+01, 9.166553472858918e+01, 5.293105649850013e+00, 5.311045237386327e+00, 5.875948853930218e+00, 5.908940877559486e+00, 5.299505699370019e+00, 5.299505699370019e+00, 9.507559797586536e-01, 9.419496244853096e-01, 6.314176110176104e+00, 9.015931138807224e-01, 9.476438257524886e-01, 9.476438257524886e-01, -6.098933604688808e-01, -5.881316793731584e-01, 3.329783208704967e-01, -8.724217709853762e-01, -6.026936462583877e-01, -6.026936462583877e-01, 1.661019066993086e+02, 1.658393004672000e+02, 1.660759655269092e+02, 1.658717552171132e+02, 1.659658650038131e+02, 1.659658650038131e+02, 4.617041032942691e+01, 4.618283020051895e+01, 4.679405991765744e+01, 4.679877862713731e+01, 4.538609268548198e+01, 4.538609268548198e+01, 3.221792526285215e+00, 2.957181129683259e+00, 3.013634837975257e+00, 2.678545429463853e+00, 3.308599174272777e+00, 3.308599174272777e+00, 8.406106000718140e-01, 1.359117719257152e+00, 7.706678161487229e-01, 2.044412526394324e+01, 8.098948919795069e-01, 8.098948919795069e-01, -9.073860532719203e-01, -8.428524202520337e-01, -1.220980711878496e+00, 4.655652936264881e-01, -9.911124588970163e-01, -9.911124588970159e-01, 2.571477867322595e+00, 2.682439974007200e+00, 2.642728313048819e+00, 2.611952210794972e+00, 2.627340377777068e+00, 2.627340377777069e+00, 2.428330621983511e+00, 3.020484359857509e+00, 2.838512801067286e+00, 2.671535501145666e+00, 2.751942541116966e+00, 2.751942541116965e+00, 3.209562869067656e+00, 1.619815202419114e+00, 1.724476355921641e+00, 1.814929516964690e+00, 1.753538973281933e+00, 1.753538973281932e+00, 2.622487574302694e+00, 3.692443495999808e-01, 4.891035926878055e-01, 1.493150632412567e+00, 5.595005148831761e-01, 5.595005148831755e-01, -4.557319500571907e-01, -1.613599600292177e+00, -1.265565610788605e+00, 4.701938905853452e-01, -1.152922532083475e+00, -1.152922532083475e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_ghds10_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_ghds10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [2.492066181413943e+03, 2.492103009551465e+03, 2.492240430528977e+03, 2.491637888700408e+03, 2.492085827998465e+03, 2.492085827998465e+03, 5.815768678603187e+01, 5.816369510981346e+01, 5.833334302539189e+01, 5.806478334870384e+01, 5.816125844710102e+01, 5.816125844710102e+01, 2.107793301422539e+00, 2.077827769679941e+00, 1.204822549888305e+00, 1.259781213686607e+00, 2.097005877764755e+00, 2.097005877764755e+00, 2.131839991143769e-01, 2.457026829698789e-01, 3.607795707734804e+00, -2.428536326160235e-01, 2.234119625793107e-01, 2.234119625793107e-01, -1.448498140542244e+00, -1.424796003928831e+00, -9.530971051820014e-01, -1.905301779143836e+00, -1.420507781541639e+00, -1.420507781541639e+00, 1.653661025326915e+02, 1.657453601831698e+02, 1.654043504080591e+02, 1.656992582562331e+02, 1.655614316433441e+02, 1.655614316433441e+02, 3.109441700721885e+00, 3.757181984158187e+00, 2.220211196963540e+00, 2.728906600184139e+00, 4.686689636354237e+00, 4.686689636354237e+00, 2.743590134212898e+00, 3.821687930179260e+00, 2.495002281725690e+00, 3.193535587711299e+00, 3.012517254012585e+00, 3.012517254012585e+00, -5.806067663904284e-01, -1.824152295400575e-01, -5.261852583661556e-01, 2.706229496074205e+01, -3.693778207100145e-01, -3.693778207100145e-01, -1.905518169836642e+00, -1.839393452126893e+00, -1.743417520551601e+00, -7.393645634642365e-01, -1.782188241610984e+00, -1.782188241610984e+00, 3.688261530628091e+00, 3.525902789741766e+00, 3.584013913502781e+00, 3.629004290580597e+00, 3.606499773729185e+00, 3.606499773729186e+00, 3.525722630753939e+00, 1.789618208149572e+00, 2.292553180809662e+00, 2.766426955006894e+00, 2.528521826299943e+00, 2.528521826299943e+00, 4.092884105696184e+00, 1.844978908867390e-02, 3.468151998909495e-01, 1.073834532234866e+00, 6.913542704353902e-01, 6.913542704353903e-01, 1.516666449007455e+00, -1.067598097860189e+00, -8.749955793825597e-01, 1.180587379747583e+00, -5.424981048725661e-01, -5.424981048725657e-01, -1.446977685208472e+00, -2.335891976799386e+00, -2.056311796030559e+00, -5.059758975792809e-01, -1.779554832143168e+00, -1.779554832143168e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_ghds10_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_ghds10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [6.466056283234563e-06, 6.466009197756443e-06, 6.465764469780239e-06, 6.466536223526939e-06, 6.466031741755516e-06, 6.466031741755516e-06, 1.498421174038643e-03, 1.498411739878048e-03, 1.497967471120726e-03, 1.497780402094735e-03, 1.498397172686069e-03, 1.498397172686069e-03, 2.127416061921152e-01, 2.133980905275349e-01, 2.313976576874749e-01, 2.260172348590344e-01, 2.129807311553839e-01, 2.129807311553839e-01, 1.039094480851941e+01, 9.986689159943243e+00, 1.235781346377657e-01, 2.726729965319867e+01, 1.026742833838440e+01, 1.026742833838440e+01, 5.964453786572185e+04, 5.189989231390612e+04, 7.729001762631485e+02, 5.402227120247934e+05, 5.355685357776580e+04, 5.355685357776580e+04, 4.469833335950086e-04, 4.467449287426880e-04, 4.469581719292752e-04, 4.467728090459601e-04, 4.468621392195736e-04, 4.468621392195736e-04, 8.433970231851093e-03, 8.258181711162384e-03, 8.506448761135831e-03, 8.367254872862299e-03, 8.223561338896960e-03, 8.223561338896960e-03, 3.223851271846090e-01, 2.515276663577714e-01, 3.773229443710125e-01, 3.325266768488966e-01, 2.879077532755357e-01, 2.879077532755357e-01, 6.875369789659389e+01, 1.017076998310966e+01, 7.146664024634525e+01, 8.938290414619800e-03, 4.446729428797773e+01, 4.446729428797773e+01, 6.017464903633266e+05, 4.031448391945296e+05, 9.574968365468717e+05, 2.853120840444644e+02, 5.329472753722590e+05, 5.329472753722590e+05, 2.934235204795085e-01, 2.981735854250898e-01, 2.964590738343240e-01, 2.951453133270494e-01, 2.958018789761704e-01, 2.958018789761704e-01, 3.235901009869711e-01, 4.956708849315528e-01, 4.349226204021869e-01, 3.871492494294326e-01, 4.105657975335820e-01, 4.105657975335819e-01, 2.182135508852704e-01, 5.111822292084749e+00, 3.051372879724367e+00, 1.460335367408629e+00, 2.110668932927307e+00, 2.110668932927307e+00, 6.755606254308927e-01, 9.728411342429538e+02, 3.921118904777629e+02, 1.731324176957159e+00, 1.285807832823024e+02, 1.285807832823023e+02, 3.705071661734571e+04, 1.964459228149110e+07, 2.865708569560217e+06, 1.480818596429327e+02, 8.682210925506415e+05, 8.682210925506453e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
