
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_absp4_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_absp4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [1.297510844088386e+03, 1.297506533128562e+03, 1.297507282654832e+03, 1.297577480029761e+03, 1.297508403605649e+03, 1.297508403605649e+03, 3.856194004276388e+01, 3.855962712620922e+01, 3.849929347745546e+01, 3.861968538070333e+01, 3.856107896012259e+01, 3.856107896012259e+01, 1.869546859202078e+00, 1.877455008119395e+00, 2.125355128046243e+00, 2.137858221800201e+00, 1.872369827140528e+00, 1.872369827140528e+00, 2.792784360722626e-01, 2.727284968762917e-01, 2.269430262390701e+00, 3.256300414992812e-01, 2.771080535105104e-01, 2.771080535105104e-01, 2.150211582172333e-01, 2.146312294114590e-01, 3.155667779663563e-01, 2.564683930996782e-01, 2.105834779440605e-01, 2.105834779440605e-01, 7.039607136492467e+01, 7.028342419783807e+01, 7.038494342826824e+01, 7.029734569099566e+01, 7.033771549140059e+01, 7.033771549140059e+01, 1.917279365919739e+01, 1.917664724857199e+01, 1.944082297629429e+01, 1.944169322594214e+01, 1.883469944052739e+01, 1.883469944052739e+01, 1.010387705068645e+00, 8.795699518403871e-01, 9.321248855262548e-01, 7.795993416071673e-01, 1.039705993099453e+00, 1.039705993099453e+00, 3.641235191096090e-01, 4.528937012232281e-01, 3.368359361447861e-01, 8.144998393021766e+00, 3.204926066091353e-01, 3.204926066091353e-01, 2.490138663425487e-01, 2.486903487095143e-01, 1.470055419768640e-01, 3.027651774536759e-01, 2.046241381520098e-01, 2.046241381520099e-01, 7.249426688088332e-01, 7.736475099558151e-01, 7.562154244777763e-01, 7.427076872640459e-01, 7.494617035568943e-01, 7.494617035568943e-01, 6.703989411222865e-01, 9.541307478850705e-01, 8.669597200950310e-01, 7.872240295769789e-01, 8.258086633457830e-01, 8.258086633457830e-01, 9.778645027161530e-01, 5.165985395136968e-01, 5.254145627238164e-01, 5.126934239644738e-01, 5.121139569844901e-01, 5.121139569844900e-01, 8.051054580637809e-01, 3.471995327741161e-01, 3.350835176312645e-01, 3.866072508847393e-01, 2.873363368636241e-01, 2.873363368636239e-01, 2.478490676430816e-01, 1.898196114931982e-01, 2.045113767490806e-01, 2.589102031763733e-01, 1.693487617578225e-01, 1.693487617578227e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_absp4_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_absp4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [1.067441874993499e+03, 1.067457666996313e+03, 1.067516592728778e+03, 1.067258221213321e+03, 1.067450299507164e+03, 1.067450299507164e+03, 2.412246603917863e+01, 2.412504206727442e+01, 2.419776915991399e+01, 2.408259761887237e+01, 2.412399650665423e+01, 2.412399650665423e+01, 4.337353890359230e-01, 4.211010339742901e-01, 5.240216747938443e-02, 7.432491825265401e-02, 4.291880854573101e-01, 4.291880854573101e-01, -1.069016585436364e-01, -9.573074048023945e-02, 1.038992697021362e+00, -2.350246525387746e-01, -1.033515790680394e-01, -1.033515790680394e-01, -2.144834644557354e-01, -2.140412939829119e-01, -3.058206260012674e-01, -2.563446464193867e-01, -2.100057738926681e-01, -2.100057738926681e-01, 7.001064933807342e+01, 7.017324397312524e+01, 7.002704672207180e+01, 7.015347906969200e+01, 7.009439072276037e+01, 7.009439072276037e+01, 6.376441614679621e-01, 9.139336051925911e-01, 2.569255832008340e-01, 4.739093378833101e-01, 1.312228150163869e+00, 1.312228150163869e+00, 7.354295609553019e-01, 1.180387619291503e+00, 6.398296212682929e-01, 9.305385175280273e-01, 8.428441061954252e-01, 8.428441061954252e-01, -3.152149742275449e-01, -2.780380950019908e-01, -2.891731009542185e-01, 1.091308145339862e+01, -2.550960351959769e-01, -2.550960351959769e-01, -2.488987050831468e-01, -2.485399394014887e-01, -1.469210483632330e-01, -2.838256703553828e-01, -2.044992678145286e-01, -2.044992678145287e-01, 1.133940809162819e+00, 1.065441170219351e+00, 1.089957105632992e+00, 1.108939282369374e+00, 1.099444291872553e+00, 1.099444291872553e+00, 1.071081620697942e+00, 3.564179898627991e-01, 5.629461608078850e-01, 7.580179634797353e-01, 6.601050978153271e-01, 6.601050978153276e-01, 1.286750110189793e+00, -2.399904027377785e-01, -1.352463103596710e-01, 1.250026071849607e-01, -1.326541816411315e-02, -1.326541816411301e-02, 2.610140664277433e-01, -3.388392525861626e-01, -3.197617534109161e-01, 1.826778972548148e-01, -2.551159014535895e-01, -2.551159014535894e-01, -2.471105100375708e-01, -1.898083372663256e-01, -2.044706923941242e-01, -2.295845601875317e-01, -1.692585710293528e-01, -1.692585710293530e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_absp4_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_absp4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [2.772751407905044e-06, 2.772731216876691e-06, 2.772626273490668e-06, 2.772957214205376e-06, 2.772740884114715e-06, 2.772740884114715e-06, 6.425476732584234e-04, 6.425436277350122e-04, 6.423531179762977e-04, 6.422728996975708e-04, 6.425373810832198e-04, 6.425373810832198e-04, 9.122710385596704e-02, 9.150861514902869e-02, 9.922712593802525e-02, 9.691991203217597e-02, 9.132964457778041e-02, 9.132964457778041e-02, 4.455808236929423e+00, 4.282456758123174e+00, 5.299233903849300e-02, 1.169266708970783e+01, 4.402842340645110e+00, 4.402842340645110e+00, 2.557655997672463e+04, 2.225552843649490e+04, 3.314323225828252e+02, 2.316563945217810e+05, 2.296606071087727e+04, 2.296606071087727e+04, 1.916738137199865e-04, 1.915715817936055e-04, 1.916630239833942e-04, 1.915835373267410e-04, 1.916218435761464e-04, 1.916218435761464e-04, 3.616625313829800e-03, 3.541244301527608e-03, 3.647705300658589e-03, 3.588016669323456e-03, 3.526398515822024e-03, 3.526398515822024e-03, 1.382440511083229e-01, 1.078592051276892e-01, 1.618022917542936e-01, 1.425929146007275e-01, 1.234595854526311e-01, 1.234595854526311e-01, 2.948271779442277e+01, 4.361393646273437e+00, 3.064607214680328e+01, 3.832886112615694e-03, 1.906830801371257e+01, 1.906830801371257e+01, 2.580388037578588e+05, 1.728751454521996e+05, 4.105904101830496e+05, 1.223465197446245e+02, 2.285365674838160e+05, 2.285365674838160e+05, 1.258248372553638e-01, 1.278617433212220e-01, 1.271265325190068e-01, 1.265631703803813e-01, 1.268447165420971e-01, 1.268447165420971e-01, 1.387607637165399e-01, 2.125518374492079e-01, 1.865019813045399e-01, 1.660159731687104e-01, 1.760573745855840e-01, 1.760573745855840e-01, 9.357356384445560e-02, 2.192033572935141e+00, 1.308478936416967e+00, 6.262158522335460e-01, 9.050895938796339e-01, 9.050895938796342e-01, 2.896915203391477e-01, 4.171702977028103e+02, 1.681440353678228e+02, 7.424203160193649e-01, 5.513755715364596e+01, 5.513755715364595e+01, 1.588795738308135e+04, 8.423924649009906e+06, 1.228863022967503e+06, 6.349993981257837e+01, 3.723075010937570e+05, 3.723075010937587e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
