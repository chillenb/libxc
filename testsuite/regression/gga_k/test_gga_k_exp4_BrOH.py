
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_exp4_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_exp4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.485954690919843e+03, 2.485935315584962e+03, 2.485903237225584e+03, 2.486219458147397e+03, 2.485944018610490e+03, 2.485944018610490e+03, 7.857726541776483e+01, 7.857012797655304e+01, 7.838047681223239e+01, 7.874066347394167e+01, 7.857426386247349e+01, 7.857426386247349e+01, 3.891372415367147e+00, 3.897771714930232e+00, 3.917006628660519e+00, 3.973176447346053e+00, 3.893694459042496e+00, 3.893694459042496e+00, 3.133655651385666e-01, 3.217660464361049e-01, 4.804840642630460e+00, 1.647124970084280e-01, 3.158737247339669e-01, 3.158737247339669e-01, 9.774791885807214e-04, 1.072449868871075e-03, 1.771763296654627e-02, 2.249604018162767e-04, 1.050214318689029e-03, 1.050214318689029e-03, 1.291841574477548e+02, 1.288832316841357e+02, 1.291542366640451e+02, 1.289202145951569e+02, 1.290282150647955e+02, 1.290282150647955e+02, 3.558838208468770e+01, 3.600990094315437e+01, 3.548166416735268e+01, 3.582241355051103e+01, 3.596539167362156e+01, 3.596539167362156e+01, 1.994148665479210e+00, 1.601000809304837e+00, 1.864150903017689e+00, 1.403534270494581e+00, 1.999271938660635e+00, 1.999271938660635e+00, 8.891136217168025e-02, 3.178718600190132e-01, 8.664677331898593e-02, 1.482101277186713e+01, 1.188851203756377e-01, 1.188851203756377e-01, 2.093528741761247e-04, 2.734306753983202e-04, 1.536018358523499e-04, 3.443033071276199e-02, 2.270031101328704e-04, 2.270031101328704e-04, 1.379135481709866e+00, 1.416157850746312e+00, 1.402385206523276e+00, 1.394941101042642e+00, 1.398364951273149e+00, 1.398364951273149e+00, 1.246428465575636e+00, 2.031387627282479e+00, 1.753988469277835e+00, 1.453886893734291e+00, 1.593477748929799e+00, 1.593477748929799e+00, 1.773766771792266e+00, 5.028488638861399e-01, 7.092795644487015e-01, 1.071065782024636e+00, 9.021181693613582e-01, 9.021181693613580e-01, 1.709243289673597e+00, 1.519824197265040e-02, 2.785359758687167e-02, 8.167906602815489e-01, 5.857387106851657e-02, 5.857387106851657e-02, 1.342631699768848e-03, 2.049553653870824e-05, 7.396052012915659e-05, 5.331139724123119e-02, 1.639586813067610e-04, 1.639586813067605e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_exp4_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_exp4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [8.978556818732319e+02, 8.979190592227638e+02, 8.981196807146201e+02, 8.970836644565212e+02, 8.978897912038002e+02, 8.978897912038002e+02, 9.826161332877209e+00, 9.828018034235626e+00, 9.883127782948760e+00, 9.796265435187212e+00, 9.827198961569351e+00, 9.827198961569351e+00, 3.137410073723958e+00, 3.242953719765421e+00, 5.628852228532121e+00, 5.617640005783159e+00, 3.175375362870332e+00, 3.175375362870332e+00, 5.222753966459750e-01, 5.362726217840537e-01, 1.065541198538386e+00, 2.745208283473801e-01, 5.264551503509484e-01, 5.264551503509484e-01, 1.629131980967869e-03, 1.787416448118459e-03, 2.952938827757712e-02, 3.749340030271279e-04, 1.750357197815048e-03, 1.750357197815048e-03, 9.580354665246078e+01, 9.678323428659724e+01, 9.590169429430271e+01, 9.666350243089612e+01, 9.630900712325028e+01, 9.630900712325028e+01, 5.044363843881210e+01, 4.979043274126857e+01, 5.186524640795501e+01, 5.150017410925218e+01, 4.766367415299280e+01, 4.766367415299280e+01, 4.168482720377671e-01, 2.324437132450152e+00, 3.049267097087113e-01, 1.677209348730342e+00, 6.771915174302258e-01, 6.771915174302258e-01, 1.481856036194671e-01, 5.297864333650221e-01, 1.444112888649766e-01, 2.147322265654780e+01, 1.981418672927296e-01, 1.981418672927296e-01, 3.489214569602078e-04, 4.557177923305337e-04, 2.560030597539165e-04, 5.738388452127000e-02, 3.783385168881174e-04, 3.783385168881174e-04, 2.125109818888145e+00, 2.121653406248723e+00, 2.197732996724846e+00, 2.237878051236929e+00, 2.221087608349146e+00, 2.221087608349146e+00, 1.609838356588452e+00, 7.882921034701925e-01, 2.382835083516937e-01, 9.689475190274932e-01, 5.072844055221725e-01, 5.072844055221729e-01, 2.507529215860089e+00, 8.380814391422962e-01, 1.181491664798269e+00, 8.215719370496104e-01, 1.383973753888965e+00, 1.383973753888964e+00, 8.852199478579680e-01, 2.533040328775068e-02, 4.642266264478614e-02, 1.639076180273402e-01, 9.762311844752762e-02, 9.762311844752763e-02, 2.237719499614746e-03, 3.415922756451373e-05, 1.232675335485943e-04, 8.885232873538530e-02, 2.732644688446017e-04, 2.732644688446009e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_exp4_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_exp4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [8.217412957334950e-06, 8.217283298749766e-06, 8.216761732197723e-06, 8.218883288900767e-06, 8.217344104979150e-06, 8.217344104979150e-06, 1.938744610135368e-03, 1.938822865592214e-03, 1.940685672364856e-03, 1.936186315373364e-03, 1.938760097475556e-03, 1.938760097475556e-03, 1.138805033440643e-01, 1.099368454346225e-01, 2.557527055655466e-02, 2.790055482512454e-02, 1.124596120756920e-01, 1.124596120756920e-01, 4.244727892038377e-06, 3.208098758404670e-05, 1.341043658282151e-01, 7.405705864788963e-48, 8.238130198983793e-06, 8.238130198983793e-06, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 4.840984676236985e-04, 4.814075789455907e-04, 4.838289689197050e-04, 4.817367453033563e-04, 4.827141762160485e-04, 4.827141762160485e-04, 1.024384645670077e-03, 1.166387692248736e-03, 8.250867502026553e-04, 9.219087838129673e-04, 1.439525463689216e-03, 1.439525463689216e-03, 4.236345423367394e-01, 1.298929035841856e-01, 4.961833840052765e-01, 2.559657692744821e-01, 3.682883664209690e-01, 3.682883664209690e-01, 1.227349748457823e-238, 4.424497388915308e-22, 1.667967675167045e-213, 4.648659241114484e-03, 2.037815231226568e-96, 2.037815231226568e-96, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 2.937432236980150e-01, 1.362185383905848e-01, 1.041289367333320e-01, 8.544157943324460e-02, 9.282540327457307e-02, 9.282540327457310e-02, 1.402737650804430e+00, 4.474569518621523e-01, 5.677676598448121e-01, 4.357587662320104e-01, 5.281189850814756e-01, 5.281189850814755e-01, 1.224142075654848e-01, 1.329842949968356e-09, 8.295865191041257e-04, 8.271333840591391e-01, 1.248393896208178e-01, 1.248393896208177e-01, 5.262766830306551e-01, 0.000000000000000e+00, 0.000000000000000e+00, 1.925588396600021e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
