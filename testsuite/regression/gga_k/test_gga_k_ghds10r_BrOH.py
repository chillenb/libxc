
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_ghds10r_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_ghds10r", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([3.025917239243409e+03, 3.025907186129749e+03, 3.025908934257089e+03, 3.026072633803589e+03, 3.025911548060938e+03, 3.025911548060938e+03, 9.001500421798866e+01, 9.000961053518893e+01, 8.986891428457152e+01, 9.014966896873175e+01, 9.001299627148606e+01, 9.001299627148606e+01, 4.417956654811548e+00, 4.436379565839826e+00, 5.013986110858638e+00, 5.043287582537747e+00, 4.424532927785809e+00, 4.424532927785809e+00, 6.856068917024267e-01, 6.705757492443311e-01, 5.353815519230805e+00, 7.877832569272871e-01, 6.806188833446567e-01, 6.806188833446567e-01, 4.826876881505185e-01, 4.826312069391064e-01, 7.438084903613067e-01, 5.658309550964775e-01, 4.729991492252463e-01, 4.729991492252463e-01, 1.642596156474817e+02, 1.639969257251367e+02, 1.642336656443754e+02, 1.640293902645271e+02, 1.641235314131887e+02, 1.641235314131887e+02, 4.478892015919035e+01, 4.479803588280039e+01, 4.541391205814582e+01, 4.541604264537335e+01, 4.400063935410042e+01, 4.400063935410042e+01, 2.411848752431220e+00, 2.108303602372832e+00, 2.228375006308191e+00, 1.873460370407328e+00, 2.480912536779910e+00, 2.480912536779910e+00, 8.718791908565302e-01, 1.090609011531106e+00, 8.080072490709564e-01, 1.907174548946726e+01, 7.728039540601503e-01, 7.728039540601503e-01, 5.477856656666240e-01, 5.494872157762553e-01, 3.070541633793599e-01, 7.200658034816738e-01, 4.450132921895225e-01, 4.450132921895228e-01, 1.746768103876288e+00, 1.860249325744639e+00, 1.819633061718462e+00, 1.788160251594888e+00, 1.803896992462896e+00, 1.803896992462897e+00, 1.618972079274353e+00, 2.278019883770221e+00, 2.075538730174963e+00, 1.890308571346425e+00, 1.979927847533334e+00, 1.979927847533334e+00, 2.338397679681184e+00, 1.243387070804276e+00, 1.267109775472218e+00, 1.241962685978665e+00, 1.238352825875410e+00, 1.238352825875410e+00, 1.928594345133442e+00, 8.161653488812832e-01, 7.934825152405551e-01, 9.468859897897226e-01, 6.889728730362528e-01, 6.889728730362522e-01, 5.621617665484631e-01, 3.883712670854974e-01, 4.344359031369980e-01, 6.218172850665290e-01, 3.597586983006082e-01, 3.597586983006086e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_ghds10r_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_ghds10r", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([2.489402535014133e+03, 2.489439362009344e+03, 2.489576777049533e+03, 2.488974253943649e+03, 2.489422181003271e+03, 2.489422181003271e+03, 5.634828254162785e+01, 5.635428987775295e+01, 5.652389127606484e+01, 5.625531200814190e+01, 5.635185168999791e+01, 5.635185168999791e+01, 1.075776006384075e+00, 1.046293798133440e+00, 1.859915068167245e-01, 2.372596186648687e-01, 1.065164806180546e+00, 1.065164806180546e+00, -2.088333889418499e-01, -1.825394922710997e-01, 2.490566816789506e+00, -5.135317895694587e-01, -2.004812798285213e-01, -2.004812798285213e-01, -5.127853919228446e-01, -5.109014176165667e-01, -6.991352356911915e-01, -6.239173530619821e-01, -5.016832860580053e-01, -5.016832860580053e-01, 1.633669431808646e+02, 1.637461171411065e+02, 1.634051822255253e+02, 1.637000250036470e+02, 1.635622297527198e+02, 1.635622297527198e+02, 1.571083230485321e+00, 2.215519366439628e+00, 6.831950374519211e-01, 1.189302318420178e+00, 3.144368004972679e+00, 3.144368004972679e+00, 1.776778060358904e+00, 2.815942102868834e+00, 1.552874150058624e+00, 2.231582228654774e+00, 2.027962316519718e+00, 2.027962316519718e+00, -7.062064756057123e-01, -6.077922372661035e-01, -6.457141254439220e-01, 2.553304688626607e+01, -5.633370586293710e-01, -5.633370586293710e-01, -6.072147508980977e-01, -6.039221160986040e-01, -3.722509452937461e-01, -6.417323536090509e-01, -5.029307905244451e-01, -5.029307905244450e-01, 2.706683467181783e+00, 2.546843841479205e+00, 2.604050362172424e+00, 2.648344031380512e+00, 2.626188088415013e+00, 2.626188088415014e+00, 2.559495788044780e+00, 8.902854320622838e-01, 1.372710809917339e+00, 1.828331725207653e+00, 1.599638832716311e+00, 1.599638832716312e+00, 3.064850616309712e+00, -5.148466425261642e-01, -2.674196805584739e-01, 3.439994012488404e-01, 1.929982302886745e-02, 1.929982302886757e-02, 6.659049198382025e-01, -7.775453985788866e-01, -7.274849568298098e-01, 4.774544371247387e-01, -5.698940467194894e-01, -5.698940467194890e-01, -5.859522686028183e-01, -4.907894094217122e-01, -5.131785821049557e-01, -5.112208030980971e-01, -4.237419017590844e-01, -4.237419017590849e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_ghds10r_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_ghds10r", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([6.466056283234563e-06, 6.466009197756443e-06, 6.465764469780239e-06, 6.466536223526939e-06, 6.466031741755516e-06, 6.466031741755516e-06, 1.498421174038643e-03, 1.498411739878048e-03, 1.497967471120726e-03, 1.497780402094735e-03, 1.498397172686069e-03, 1.498397172686069e-03, 2.127416061921152e-01, 2.133980905275349e-01, 2.313976576874749e-01, 2.260172348590344e-01, 2.129807311553839e-01, 2.129807311553839e-01, 1.039094480851941e+01, 9.986689159943243e+00, 1.235781346377657e-01, 2.726729965319867e+01, 1.026742833838440e+01, 1.026742833838440e+01, 5.964453786572185e+04, 5.189989231390612e+04, 7.729001762631485e+02, 5.402227120247934e+05, 5.355685357776580e+04, 5.355685357776580e+04, 4.469833335950086e-04, 4.467449287426880e-04, 4.469581719292752e-04, 4.467728090459601e-04, 4.468621392195736e-04, 4.468621392195736e-04, 8.433970231851093e-03, 8.258181711162384e-03, 8.506448761135831e-03, 8.367254872862299e-03, 8.223561338896960e-03, 8.223561338896960e-03, 3.223851271846090e-01, 2.515276663577714e-01, 3.773229443710125e-01, 3.325266768488966e-01, 2.879077532755357e-01, 2.879077532755357e-01, 6.875369789659389e+01, 1.017076998310966e+01, 7.146664024634525e+01, 8.938290414619800e-03, 4.446729428797773e+01, 4.446729428797773e+01, 6.017464903633266e+05, 4.031448391945296e+05, 9.574968365468717e+05, 2.853120840444644e+02, 5.329472753722590e+05, 5.329472753722590e+05, 2.934235204795085e-01, 2.981735854250898e-01, 2.964590738343240e-01, 2.951453133270494e-01, 2.958018789761704e-01, 2.958018789761704e-01, 3.235901009869711e-01, 4.956708849315528e-01, 4.349226204021869e-01, 3.871492494294326e-01, 4.105657975335820e-01, 4.105657975335819e-01, 2.182135508852704e-01, 5.111822292084749e+00, 3.051372879724367e+00, 1.460335367408629e+00, 2.110668932927307e+00, 2.110668932927307e+00, 6.755606254308927e-01, 9.728411342429538e+02, 3.921118904777629e+02, 1.731324176957159e+00, 1.285807832823024e+02, 1.285807832823023e+02, 3.705071661734571e+04, 1.964459228149110e+07, 2.865708569560217e+06, 1.480818596429327e+02, 8.682210925506415e+05, 8.682210925506453e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
