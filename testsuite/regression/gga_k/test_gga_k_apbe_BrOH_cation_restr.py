
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_apbe_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_apbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.195052924342219e+03, 2.195061691318292e+03, 2.195110023268182e+03, 2.194979395608752e+03, 2.195046510901777e+03, 2.195046510901777e+03, 5.933880459875632e+01, 5.933823309575305e+01, 5.932793011990185e+01, 5.936838500368360e+01, 5.934098023013232e+01, 5.934098023013232e+01, 2.303545935982343e+00, 2.301201405020076e+00, 2.250747110569406e+00, 2.284707667558242e+00, 2.274629124691556e+00, 2.274629124691556e+00, 1.847101511558372e-01, 1.884368195413830e-01, 3.098706140256470e+00, 1.184131166431855e-01, 1.424814411921739e-01, 1.424814411921739e-01, 2.971070890620503e-04, 3.291223764463911e-04, 9.877725356840724e-03, 9.913593487628520e-05, 1.565122260579606e-04, 1.565122260579606e-04, 1.284885276582667e+02, 1.284934114172164e+02, 1.284891302616420e+02, 1.284934362670370e+02, 1.284907962410521e+02, 1.284907962410521e+02, 2.041099113942856e+01, 2.065229488660095e+01, 2.032127116196880e+01, 2.053414352866511e+01, 2.058741336879003e+01, 2.058741336879003e+01, 1.672815064483625e+00, 1.879981558439425e+00, 1.444464761771749e+00, 1.484525840146057e+00, 1.715852996016136e+00, 1.715852996016136e+00, 6.247656039282087e-02, 1.984529978101383e-01, 5.396821788205588e-02, 1.703273457298777e+01, 8.203305729796576e-02, 8.203305729796576e-02, 5.902045422137347e-05, 9.474152795378943e-05, 5.538931669388377e-05, 2.530564284785969e-02, 8.038550950578934e-05, 8.038550950578934e-05, 1.587131798881478e+00, 1.588573750512869e+00, 1.588138692701731e+00, 1.587695806199492e+00, 1.587920404061052e+00, 1.587920404061052e+00, 1.496619736505794e+00, 1.237795141955694e+00, 1.310086795584594e+00, 1.381763441799607e+00, 1.344498843131677e+00, 1.344498843131677e+00, 2.070246017344139e+00, 2.992512686912000e-01, 4.044892677753342e-01, 6.266980542301024e-01, 5.016218115313232e-01, 5.016218115313231e-01, 1.051837302438403e+00, 9.065728568796578e-03, 1.666321111963175e-02, 5.641283083080098e-01, 3.978813247303833e-02, 3.978813247303834e-02, 5.915110555941842e-04, 6.770598755662073e-06, 2.982935566660057e-05, 3.538471633047222e-02, 6.882707775677607e-05, 6.882707775677595e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_apbe_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_apbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.346081928287309e+03, 3.346102654612694e+03, 3.346197251081807e+03, 3.345888837747515e+03, 3.346050088972337e+03, 3.346050088972337e+03, 8.808869944750637e+01, 8.808945512553768e+01, 8.811126299622424e+01, 8.810683064200499e+01, 8.809385249928010e+01, 8.809385249928010e+01, 3.248607173148673e+00, 3.241073588967274e+00, 3.070366670743565e+00, 3.121183845082909e+00, 3.110070448564056e+00, 3.110070448564056e+00, 2.358233130272319e-01, 2.404761057044862e-01, 4.423094612682983e+00, 1.584266457458128e-01, 1.850153926730437e-01, 1.850153926730437e-01, 4.947320156175594e-04, 5.479741712453580e-04, 1.608457038636681e-02, 1.651791713318864e-04, 2.607205823096609e-04, 2.607205823096609e-04, 2.000707884746430e+02, 2.001738266132121e+02, 2.000756667182307e+02, 2.001666264740323e+02, 2.001229323929979e+02, 2.001229323929979e+02, 2.766505118105108e+01, 2.805924232638802e+01, 2.739659526118740e+01, 2.774067988719955e+01, 2.801613384006571e+01, 2.801613384006571e+01, 2.515546323557118e+00, 3.034006459953863e+00, 2.147746745244430e+00, 2.369497089031353e+00, 2.603505947473858e+00, 2.603505947473858e+00, 9.181853399402150e-02, 2.589154739224377e-01, 8.026779784504869e-02, 2.753611708388338e+01, 1.141006150838519e-01, 1.141006150838519e-01, 9.834814404133649e-05, 1.578555951083999e-04, 9.227531165564589e-05, 3.955897372029150e-02, 1.339180664910455e-04, 1.339180664910455e-04, 2.615248998861246e+00, 2.567486933085005e+00, 2.584010474726447e+00, 2.597873422101543e+00, 2.590911515981171e+00, 2.590911515981171e+00, 2.480826004172861e+00, 1.751186396407362e+00, 1.934076825846127e+00, 2.136808783252294e+00, 2.030919332344983e+00, 2.030919332344983e+00, 3.331180331588524e+00, 3.825991934037482e-01, 5.193471268649192e-01, 8.719016265780011e-01, 6.642645619520789e-01, 6.642645619520786e-01, 1.483853799156461e+00, 1.480508596526037e-02, 2.674787633361289e-02, 8.132883359184689e-01, 5.958489342716902e-02, 5.958489342716902e-02, 9.842631782982464e-04, 1.128380006118209e-05, 4.970841984887446e-05, 5.360330581352944e-02, 1.146641884235000e-04, 1.146641884234998e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_apbe_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_apbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [7.907943329636410e-07, 7.907912961524489e-07, 7.907700113659005e-07, 7.908153523647846e-07, 7.907927016733353e-07, 7.907927016733353e-07, 1.729932577664864e-04, 1.729993759774479e-04, 1.731280724436187e-04, 1.728058345497091e-04, 1.729880827995911e-04, 1.729880827995911e-04, 2.106664437998479e-02, 2.105243011976791e-02, 2.042289478818954e-02, 2.003641406700309e-02, 2.020941819623411e-02, 2.020941819623411e-02, 5.341371403330015e-01, 5.423025944329510e-01, 1.376571094820668e-02, 5.281350047850399e-01, 5.696416913492144e-01, 5.696416913492144e-01, 6.597270050191102e-02, 7.336209950996161e-02, 2.268379706264902e-01, 3.461968935138809e-02, 5.527082027976193e-02, 5.527082027976207e-02, 5.694209784208670e-05, 5.696239214200924e-05, 5.694267043834835e-05, 5.696059218914793e-05, 5.695258923110652e-05, 5.695258923110652e-05, 7.361442342228721e-04, 7.276443285261758e-04, 7.306248022847002e-04, 7.233101130769689e-04, 7.339727918914879e-04, 7.339727918914879e-04, 3.707210421127033e-02, 3.309770985916219e-02, 4.563215556694049e-02, 4.678340498459065e-02, 3.601772815472608e-02, 3.601772815472608e-02, 4.146603615501716e-01, 3.261186839919049e-01, 4.220123825467054e-01, 1.215189951427877e-03, 5.871098998571915e-01, 5.871098998571915e-01, 3.519515289721183e-02, 3.983157174096739e-02, 1.912791695317202e-01, 4.161831961729998e-01, 1.072332390053496e-01, 1.072332390053494e-01, 4.328169046297486e-02, 4.265555829804301e-02, 4.287457169604383e-02, 4.305781671469050e-02, 4.296623575956716e-02, 4.296623575956716e-02, 4.744789226557212e-02, 5.376627978954342e-02, 5.239269494218745e-02, 5.075015713264572e-02, 5.169099842960719e-02, 5.169099842960719e-02, 2.857989334105274e-02, 2.449306764765654e-01, 2.039655262690700e-01, 1.449016928993423e-01, 1.780027352711094e-01, 1.780027352711095e-01, 6.831348523259295e-02, 1.979820267175368e-01, 2.693667187473756e-01, 1.798121194573336e-01, 5.882163822086047e-01, 5.882163822086054e-01, 7.504522597006982e-02, 5.224822603627007e-02, 5.307849459568193e-02, 5.582982490311122e-01, 1.253288513649940e-01, 1.253288513649942e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
