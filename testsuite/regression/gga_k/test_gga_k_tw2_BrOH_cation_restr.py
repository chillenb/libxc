
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_tw2_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tw2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.192417687204107e+03, 2.192426557318099e+03, 2.192475154213980e+03, 2.192342995920005e+03, 2.192410940821665e+03, 2.192410940821665e+03, 5.922467936330281e+01, 5.922414272971353e+01, 5.921463874756977e+01, 5.925365916102515e+01, 5.922689130066754e+01, 5.922689130066754e+01, 2.294269100469277e+00, 2.291774829605425e+00, 2.236914422671287e+00, 2.270917437367698e+00, 2.261045961885591e+00, 2.261045961885591e+00, 1.807905028333775e-01, 1.846757980926375e-01, 3.088080664875996e+00, 1.140754190516268e-01, 1.382945781070896e-01, 1.382945781070896e-01, 2.762928419034129e-04, 3.060707777403588e-04, 9.215486127054801e-03, 9.218264845942399e-05, 1.455393245167050e-04, 1.455393245167050e-04, 1.283911729546597e+02, 1.283971685632324e+02, 1.283918213015469e+02, 1.283971090343835e+02, 1.283940089682506e+02, 1.283940089682506e+02, 2.027498438571691e+01, 2.051876321587039e+01, 2.017640494019600e+01, 2.039152785215839e+01, 2.045696361084720e+01, 2.045696361084720e+01, 1.670229028555162e+00, 1.879521651917764e+00, 1.441758278027349e+00, 1.483970467072435e+00, 1.713600939138150e+00, 1.713600939138150e+00, 5.919235198974820e-02, 1.923519248065588e-01, 5.103567355157340e-02, 1.702887760889291e+01, 7.843662504335046e-02, 7.843662504335046e-02, 5.488010486692992e-05, 8.809659450699546e-05, 5.150547666165590e-05, 2.375079298029804e-02, 7.474891610515647e-05, 7.474891610515647e-05, 1.587028919873152e+00, 1.588209595857895e+00, 1.587877613235770e+00, 1.587510970109083e+00, 1.587698495209759e+00, 1.587698495209759e+00, 1.496577699951402e+00, 1.233014659199901e+00, 1.307333530385002e+00, 1.380535203787302e+00, 1.342581146086008e+00, 1.342581146086008e+00, 2.069672588635430e+00, 2.924464839663979e-01, 3.984279970193143e-01, 6.236919474662282e-01, 4.971075836239186e-01, 4.971075836239185e-01, 1.047619469427339e+00, 8.454378401722510e-03, 1.557853183911152e-02, 5.624421577796768e-01, 3.758619719096325e-02, 3.758619719096326e-02, 5.501283388581099e-04, 6.295498598082228e-06, 2.773658681577030e-05, 3.336767825570503e-02, 6.400080576613534e-05, 6.400080576613524e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_tw2_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tw2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.352276848881005e+03, 3.352297318271683e+03, 3.352391250763280e+03, 3.352086650550178e+03, 3.352245835632355e+03, 3.352245835632355e+03, 8.836035783297847e+01, 8.836103071881395e+01, 8.838094065181298e+01, 8.837991487788352e+01, 8.836542471427816e+01, 8.836542471427816e+01, 3.269776647989148e+00, 3.262540357773233e+00, 3.099785753453639e+00, 3.150627857812675e+00, 3.139138626077781e+00, 3.139138626077781e+00, 2.399526153732038e-01, 2.447483419865594e-01, 4.447752042516928e+00, 1.589415082242548e-01, 1.872926153441226e-01, 1.872926153441226e-01, 4.601686224641539e-04, 5.097150260762454e-04, 1.508586423082001e-02, 1.536038509335638e-04, 2.424703034917510e-04, 2.424703034917510e-04, 2.002914818568665e+02, 2.003917397568684e+02, 2.002962456372971e+02, 2.003847505261956e+02, 2.003422068713149e+02, 2.003422068713149e+02, 2.794893813569485e+01, 2.833997954499283e+01, 2.769381743655216e+01, 2.803528715517550e+01, 2.829167859186988e+01, 2.829167859186988e+01, 2.521686873761727e+00, 3.034883383462905e+00, 2.154189288081304e+00, 2.370641016111662e+00, 2.608823338487943e+00, 2.608823338487943e+00, 8.933099237926642e-02, 2.617375342019433e-01, 7.777178231461340e-02, 2.754335975080230e+01, 1.130721576213210e-01, 1.130721576213210e-01, 9.145305093969641e-05, 1.467940722494312e-04, 8.581369204777290e-05, 3.765974372302613e-02, 1.245401914713777e-04, 1.245401914713777e-04, 2.615396665389911e+00, 2.568172422065055e+00, 2.584469212652517e+00, 2.598174669373484e+00, 2.591287976120524e+00, 2.591287976120524e+00, 2.480877720440659e+00, 1.762148223302755e+00, 1.940625639117817e+00, 2.139635523311492e+00, 2.035462064099726e+00, 2.035462064099726e+00, 3.332300086534528e+00, 3.891024600338728e-01, 5.282761972547215e-01, 8.785982425401018e-01, 6.728829211799430e-01, 6.728829211799426e-01, 1.493483696091683e+00, 1.387096862043599e-02, 2.521977480572899e-02, 8.172432976398291e-01, 5.759443597662364e-02, 5.759443597662364e-02, 9.157435893367126e-04, 1.049211772785407e-05, 4.622251409738247e-05, 5.160433435167610e-02, 1.066339531445643e-04, 1.066339531445641e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_tw2_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tw2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [7.639897733513826e-07, 7.639874004615290e-07, 7.639684311203409e-07, 7.640039071182082e-07, 7.639865161615651e-07, 7.639865161615651e-07, 1.656014899843253e-04, 1.656084339737694e-04, 1.657567815760375e-04, 1.654046194159469e-04, 1.655978395571900e-04, 1.655978395571900e-04, 1.976010467335328e-02, 1.973536558626919e-02, 1.884895461294206e-02, 1.850660275969826e-02, 1.867491364133149e-02, 1.867491364133149e-02, 4.550695477932603e-01, 4.646213085333949e-01, 1.297909984929732e-02, 4.230690073235321e-01, 4.691297540871665e-01, 4.691297540871663e-01, 4.720359173725680e-02, 5.249350537157187e-02, 1.638627322393357e-01, 2.476399284984288e-02, 3.953981096161537e-02, 3.953981096161547e-02, 5.539301626292479e-05, 5.542111694645716e-05, 5.539391848814115e-05, 5.541873212963811e-05, 5.540748070098639e-05, 5.540748070098639e-05, 6.769857936898830e-04, 6.700744852939700e-04, 6.698165364099457e-04, 6.639202637757833e-04, 6.765065866881148e-04, 6.765065866881148e-04, 3.565024633085428e-02, 3.254991499391456e-02, 4.370749069274660e-02, 4.585877412147129e-02, 3.474275639066991e-02, 3.474275639066991e-02, 3.140651226777004e-01, 2.671476662831947e-01, 3.177409648159041e-01, 1.195686195822120e-03, 4.582326712468406e-01, 4.582326712468406e-01, 2.517466151359059e-02, 2.849225937664692e-02, 1.368335495163674e-01, 3.061084483532789e-01, 7.671027486563192e-02, 7.671027486563176e-02, 4.282082140293166e-02, 4.196761996759054e-02, 4.226515960593634e-02, 4.251448513136831e-02, 4.238974134725358e-02, 4.238974134725358e-02, 4.702115845679398e-02, 5.050220036035405e-02, 5.005297741143946e-02, 4.926128779771051e-02, 4.978529035789159e-02, 4.978529035789159e-02, 2.808239400029806e-02, 2.073019740367369e-01, 1.788901716376613e-01, 1.350732913090598e-01, 1.612751164267766e-01, 1.612751164267766e-01, 6.408599184542399e-02, 1.428394602724747e-01, 1.958016056881005e-01, 1.702280161164131e-01, 4.414009845919640e-01, 4.414009845919645e-01, 5.371119034092216e-02, 3.737015659338191e-02, 3.796556427407837e-02, 4.166496894103414e-01, 8.965451742209966e-02, 8.965451742209982e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
