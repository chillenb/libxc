
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_tfvw_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tfvw", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([3.025894119759776e+03, 3.025882573730302e+03, 3.025882049543284e+03, 3.026052790643281e+03, 3.025956101141172e+03, 3.025956101141172e+03, 8.992796388398355e+01, 8.992118480640511e+01, 8.976895781001031e+01, 9.006791930759783e+01, 8.992418583959744e+01, 8.992418583959744e+01, 4.235058250898959e+00, 4.253014233473941e+00, 4.768528397777883e+00, 4.807741662247667e+00, 4.862014860097431e+00, 4.862014860097431e+00, 7.495744786372016e-01, 7.304076849791248e-01, 5.441345758893616e+00, 8.445712080057948e-01, 8.061199765763090e-01, 8.061199765763090e-01, 7.297719243991956e-01, 7.098865578086762e-01, 9.237808529223517e-01, 7.661643036218436e-01, 6.864231674810169e-01, 6.864231674810160e-01, 1.642759920540637e+02, 1.640048684463556e+02, 1.642653003116485e+02, 1.640259184158659e+02, 1.641375358470505e+02, 1.641375358470505e+02, 4.456749093922789e+01, 4.458160081329596e+01, 4.555144510398117e+01, 4.555998005868639e+01, 4.410793086560266e+01, 4.410793086560266e+01, 2.420475456701080e+00, 2.115528550413465e+00, 2.178701794140448e+00, 1.740247928336621e+00, 2.410056963525853e+00, 2.410056963525854e+00, 9.597293563537816e-01, 1.133701400466919e+00, 9.321093419073081e-01, 1.904655934473137e+01, 7.952948039915357e-01, 7.952948039915357e-01, 6.678196545975654e-01, 7.065856388601750e-01, 2.817998616719935e-01, 8.254019911512843e-01, 4.138413698373842e-01, 4.138413698373848e-01, 1.655657458948254e+00, 1.778162424514166e+00, 1.735135084899902e+00, 1.699444034023320e+00, 1.717288811339329e+00, 1.717288811339329e+00, 1.527275253712666e+00, 2.246917849152096e+00, 2.025742795228676e+00, 1.810218013248120e+00, 1.914493799985441e+00, 1.914493799985441e+00, 2.354719510777537e+00, 1.282278862473660e+00, 1.297699732183728e+00, 1.217763166997756e+00, 1.239559721696112e+00, 1.239559721696112e+00, 1.931333222781817e+00, 9.707189656668612e-01, 9.516912694516775e-01, 9.526762289956425e-01, 7.395215696474076e-01, 7.395215696474076e-01, 8.123643722870599e-01, 3.205980404412532e-01, 4.583511409756731e-01, 7.465336158284698e-01, 3.710947565390498e-01, 3.710947565390493e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_tfvw_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tfvw", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([2.489460631317828e+03, 2.489456847501647e+03, 2.489509655073968e+03, 2.489492442311820e+03, 2.489625617362545e+03, 2.489670051955372e+03, 2.489073019658739e+03, 2.488965387218790e+03, 2.489491934166237e+03, 2.489216994721794e+03, 2.489491934166237e+03, 2.489216994721794e+03, 5.624351509247666e+01, 5.628762169696419e+01, 5.624958364340196e+01, 5.629637369125950e+01, 5.642380554046024e+01, 5.647010758296387e+01, 5.613977166664188e+01, 5.619163251859885e+01, 5.620671433094114e+01, 5.634755976602719e+01, 5.620671433094114e+01, 5.634755976602719e+01, 1.139124894684131e+00, 1.267855666459780e+00, 1.094313158317418e+00, 1.252501306946721e+00, 4.893217577357974e-01, 2.566152554930848e-01, 3.815209442807043e-01, 4.590457413714262e-01, 1.462716279953123e+00, -9.474876047836202e-01, 1.462716279953123e+00, -9.474876047836202e-01, -4.051582311740853e-01, -3.694683666858911e-01, -3.767937266502942e-01, -3.374448697008156e-01, 1.586611887910619e+00, 2.305311857099026e+00, -6.338781480706950e-01, -6.371008917622831e-01, -4.228040470239534e-01, -7.171995483861560e-01, -4.228040470239541e-01, -7.171995483861553e-01, -7.274083613046045e-01, -7.309324248207252e-01, -7.084992759921733e-01, -7.101270150880491e-01, -9.128203282380553e-01, -9.055858405358210e-01, -7.608693643043621e-01, -7.714321814999900e-01, -7.282638292189854e-01, -4.574879783992958e-01, -7.282638292189839e-01, -4.574879783992951e-01, 1.634842634884654e+02, 1.633922587027255e+02, 1.638824830253267e+02, 1.637769614802052e+02, 1.635052361230688e+02, 1.634046535902018e+02, 1.638469576887873e+02, 1.637541582426410e+02, 1.636892251443578e+02, 1.635857116837764e+02, 1.636892251443578e+02, 1.635857116837764e+02, 1.734885567775051e+00, 1.732983531762820e+00, 2.402152279305388e+00, 2.385760231319141e+00, 3.656761593060970e-03, 5.171820352120060e-01, 5.918205840026127e-01, 1.096659831817209e+00, 3.348559667763900e+00, 2.254246046419841e+00, 3.348559667763900e+00, 2.254246046419841e+00, 1.744534962201093e+00, 1.737758058422072e+00, 2.790518871768180e+00, 2.801133351074483e+00, 1.297204859313323e+00, 1.473625657603198e+00, 2.047084393797399e+00, 2.176772396433112e+00, 2.006755701004396e+00, 1.777275136609854e+00, 2.006755701004396e+00, 1.777275136609856e+00, -8.664044796045116e-01, -8.517517144830646e-01, -7.708844644589932e-01, -7.690593943452674e-01, -8.504744169485005e-01, -8.414200560630086e-01, 2.551058307026351e+01, 2.549144801375854e+01, -7.304854605922816e-01, -5.933029090933474e-01, -7.304854605922816e-01, -5.933029090933474e-01, -6.423002050592247e-01, -6.903907135058313e-01, -6.920360204410065e-01, -7.202200838706114e-01, -2.899046030184473e-01, -2.748248835865254e-01, -7.786771349475893e-01, -7.939740375371530e-01, -4.111906775263495e-01, -4.146819266480010e-01, -4.111906775263500e-01, -4.146819266480018e-01, 2.535452817963448e+00, 2.557481362484781e+00, 2.364446239019450e+00, 2.387332251866251e+00, 2.424318808302715e+00, 2.447281896795838e+00, 2.474440181717766e+00, 2.496411681970264e+00, 2.449380871681332e+00, 2.471826050826166e+00, 2.449380871681332e+00, 2.471826050826166e+00, 2.441880775873546e+00, 2.458371218392013e+00, 6.732942592384296e-01, 6.947309525065138e-01, 1.175318526335125e+00, 1.200971107877460e+00, 1.689057119761209e+00, 1.705385044233696e+00, 1.433431984825839e+00, 1.449428912971810e+00, 1.433431984825839e+00, 1.449428912971810e+00, 3.031395854776378e+00, 3.055057974541220e+00, -7.050307489565626e-01, -6.983256369313249e-01, -4.729597383753398e-01, -4.478207186629305e-01, 2.380801258222675e-01, 2.483762798643377e-01, -1.382109713494401e-01, -1.311030411358393e-01, -1.382109713494409e-01, -1.311030411358397e-01, 5.362678224333896e-01, 5.694092319290665e-01, -9.577047455206410e-01, -9.565935926962963e-01, -9.344616080257132e-01, -9.191460911387221e-01, 3.895783124799712e-01, 4.205809347751197e-01, -7.225213061740910e-01, -6.365743018170329e-01, -7.225213061740906e-01, -6.365743018170329e-01, -8.160102974632620e-01, -8.074234383090123e-01, -3.662840966403836e-01, -2.752038646114243e-01, -4.661581390799406e-01, -4.517810851509207e-01, -6.887312410322758e-01, -6.926747605200019e-01, -2.863246864083911e-01, -4.070580830778692e-01, -2.863246864083909e-01, -4.070580830778689e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_tfvw_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tfvw", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.293109184051877e-05, 0.000000000000000e+00, 1.293114179513549e-05, 1.293096651097146e-05, 0.000000000000000e+00, 1.293105074677587e-05, 1.293054083471756e-05, 0.000000000000000e+00, 1.293044770940055e-05, 1.293195688134498e-05, 0.000000000000000e+00, 1.293225240321300e-05, 1.293101834015489e-05, 0.000000000000000e+00, 1.293151277752772e-05, 1.293101834015489e-05, 0.000000000000000e+00, 1.293151277752772e-05, 2.996366023714674e-03, 0.000000000000000e+00, 2.996488674912871e-03, 2.996337920348051e-03, 0.000000000000000e+00, 2.996477974254268e-03, 2.995831833038986e-03, 0.000000000000000e+00, 2.995646812433001e-03, 2.995258276008431e-03, 0.000000000000000e+00, 2.995132169597408e-03, 2.997869647877723e-03, 0.000000000000000e+00, 2.994507043947534e-03, 2.997869647877723e-03, 0.000000000000000e+00, 2.994507043947534e-03, 4.200715030699055e-01, 0.000000000000000e+00, 4.151155631692661e-01, 4.220388987872136e-01, 0.000000000000000e+00, 4.159317269801374e-01, 4.495394155411678e-01, 0.000000000000000e+00, 4.589594270924217e-01, 4.445183114860597e-01, 0.000000000000000e+00, 4.416418299177148e-01, 4.057091912691514e-01, 0.000000000000000e+00, 4.937250273428979e-01, 4.057091912691514e-01, 0.000000000000000e+00, 4.937250273428979e-01, 2.572670895608398e+01, 0.000000000000000e+00, 2.294376358600035e+01, 2.479864693157502e+01, 0.000000000000000e+00, 2.177059790083632e+01, 2.771148678928619e-01, 0.000000000000000e+00, 2.509464054984751e-01, 5.659768155776936e+01, 0.000000000000000e+00, 5.431767266435860e+01, 2.259749942680681e+01, 0.000000000000000e+00, 1.463508641615167e+02, 2.259749942680681e+01, 0.000000000000000e+00, 1.463508641615166e+02, 6.324503014234192e+05, 0.000000000000000e+00, 5.271019733892687e+05, 5.496562727421005e+05, 0.000000000000000e+00, 4.471116735888455e+05, 3.197159921025622e+03, 0.000000000000000e+00, 2.714904401504723e+03, 2.911560192811907e+06, 0.000000000000000e+00, 3.062094217456303e+06, 8.908246190359765e+05, 0.000000000000000e+00, 4.834051151218385e+06, 8.908246190359765e+05, 0.000000000000000e+00, 4.834051151218379e+06, 8.924768742371638e-04, 0.000000000000000e+00, 8.931185292667896e-04, 8.919770600555195e-04, 0.000000000000000e+00, 8.926352803062284e-04, 8.924464270475136e-04, 0.000000000000000e+00, 8.931000056290367e-04, 8.920175841013226e-04, 0.000000000000000e+00, 8.926610178974752e-04, 8.922228825623769e-04, 0.000000000000000e+00, 8.928761159884677e-04, 8.922228825623769e-04, 0.000000000000000e+00, 8.928761159884677e-04, 1.681014771245246e-02, 0.000000000000000e+00, 1.681269628863544e-02, 1.644412702125274e-02, 0.000000000000000e+00, 1.645755969611644e-02, 1.712573498435997e-02, 0.000000000000000e+00, 1.703717992720586e-02, 1.680069107032818e-02, 0.000000000000000e+00, 1.671020204194981e-02, 1.637657215386190e-02, 0.000000000000000e+00, 1.659362732978037e-02, 1.637657215386190e-02, 0.000000000000000e+00, 1.659362732978037e-02, 6.214155513929877e-01, 0.000000000000000e+00, 6.263773909722783e-01, 4.869557603842461e-01, 0.000000000000000e+00, 4.862931574736049e-01, 8.325516992461210e-01, 0.000000000000000e+00, 7.470881093773013e-01, 7.371961063213970e-01, 0.000000000000000e+00, 6.683382188279615e-01, 5.523843371812366e-01, 0.000000000000000e+00, 6.439399747262756e-01, 5.523843371812368e-01, 0.000000000000000e+00, 6.439399747262758e-01, 1.680322502110340e+02, 0.000000000000000e+00, 1.633153648043942e+02, 2.432715455530025e+01, 0.000000000000000e+00, 2.396654094362242e+01, 2.269837421716149e+02, 0.000000000000000e+00, 1.940019561885622e+02, 1.780193950795826e-02, 0.000000000000000e+00, 1.782595457225113e-02, 1.121634537776805e+02, 0.000000000000000e+00, 9.435182145012413e+01, 1.121634537776805e+02, 0.000000000000000e+00, 9.435182145012413e+01, 6.896246147170695e+06, 0.000000000000000e+00, 6.144157416218541e+06, 3.268601510341825e+06, 0.000000000000000e+00, 3.124571891844912e+06, 7.817219853849012e+06, 0.000000000000000e+00, 6.581441351138420e+06, 6.939684423521389e+02, 0.000000000000000e+00, 6.813232572463984e+02, 7.337213909483019e+06, 0.000000000000000e+00, 2.832798288875730e+06, 7.337213909483017e+06, 0.000000000000000e+00, 2.832798288875732e+06, 6.184655642516127e-01, 0.000000000000000e+00, 6.113483131048588e-01, 6.292686936810393e-01, 0.000000000000000e+00, 6.219547129496448e-01, 6.254503941826527e-01, 0.000000000000000e+00, 6.181833347862691e-01, 6.222962328002316e-01, 0.000000000000000e+00, 6.151314409845747e-01, 6.238720007562847e-01, 0.000000000000000e+00, 6.166568959141232e-01, 6.238720007562847e-01, 0.000000000000000e+00, 6.166568959141232e-01, 6.710491118734169e-01, 0.000000000000000e+00, 6.644380041926748e-01, 1.062460454592638e+00, 0.000000000000000e+00, 1.048770501185330e+00, 9.254286161076486e-01, 0.000000000000000e+00, 9.132160890872123e-01, 8.105979508028869e-01, 0.000000000000000e+00, 8.021068030259340e-01, 8.663681416474144e-01, 0.000000000000000e+00, 8.567845172274138e-01, 8.663681416474144e-01, 0.000000000000000e+00, 8.567845172274138e-01, 4.233638525448552e-01, 0.000000000000000e+00, 4.213009399359828e-01, 1.207679180856774e+01, 0.000000000000000e+00, 1.186942020676453e+01, 7.016998509778441e+00, 0.000000000000000e+00, 6.810034028331159e+00, 3.024385837125076e+00, 0.000000000000000e+00, 2.974767882753505e+00, 4.558073793085399e+00, 0.000000000000000e+00, 4.562901000858759e+00, 4.558073793085403e+00, 0.000000000000000e+00, 4.562901000858760e+00, 1.366818081411902e+00, 0.000000000000000e+00, 1.338966339251527e+00, 3.383498365853440e+03, 0.000000000000000e+00, 3.314985802507890e+03, 1.390172763857115e+03, 0.000000000000000e+00, 1.259415447184266e+03, 3.424824182712280e+00, 0.000000000000000e+00, 3.274449679751296e+00, 3.625707363724646e+02, 0.000000000000000e+00, 3.079851680605962e+02, 3.625707363724646e+02, 0.000000000000000e+00, 3.079851680605963e+02, 2.160802635499018e+05, 0.000000000000000e+00, 1.941851121390783e+05, 1.678524443444068e+08, 0.000000000000000e+00, 1.667067706068541e+08, 1.992427887587956e+07, 0.000000000000000e+00, 1.656041588063657e+07, 4.122466915137551e+02, 0.000000000000000e+00, 3.926655637176916e+02, 8.633543549065115e+06, 0.000000000000000e+00, 3.678861720624852e+06, 8.633543549065135e+06, 0.000000000000000e+00, 3.678861720624864e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
