
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_vw_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_vw", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [9.576367975698388e+02, 9.576137153110917e+02, 9.575583429374415e+02, 9.579007926319267e+02, 9.577146380611766e+02, 9.577146380611766e+02, 3.510538944872512e+01, 3.509837370878493e+01, 3.493798965252017e+01, 3.523031107781360e+01, 3.509867493750679e+01, 3.509867493750679e+01, 2.195459324260775e+00, 2.217890018096498e+00, 2.840014643785185e+00, 2.847185101721080e+00, 2.897931087544631e+00, 2.897931087544631e+00, 6.133439007214845e-01, 5.899448096818292e-01, 2.664427452935363e+00, 7.661779964112645e-01, 6.771427058859745e-01, 6.771427058859746e-01, 7.296063820791845e-01, 7.097029264111007e-01, 9.182035408189111e-01, 7.661093209758525e-01, 6.863130425877251e-01, 6.863130425877241e-01, 4.138314092381880e+01, 4.106688963675796e+01, 4.137020147034134e+01, 4.109098349955350e+01, 4.122190214674667e+01, 4.122190214674667e+01, 2.720445635382177e+01, 2.696576565775539e+01, 2.837174632882736e+01, 2.815814185667875e+01, 2.651557991773567e+01, 2.651557991773567e+01, 8.598621662634515e-01, 2.737691972563620e-01, 8.403682246431932e-01, 2.944905285189016e-01, 7.934868837423223e-01, 7.934868837423226e-01, 9.219460237054213e-01, 9.973002935728918e-01, 8.996655480150828e-01, 2.341216343822528e+00, 7.430511113666532e-01, 7.430511113666532e-01, 6.677868736784518e-01, 7.065330968083177e-01, 2.817690239785998e-01, 8.107747108292321e-01, 4.137919033952243e-01, 4.137919033952250e-01, 7.983684959221625e-02, 2.203679646517202e-01, 1.710091366007468e-01, 1.300939437281790e-01, 1.505547320086377e-01, 1.505547320086377e-01, 3.573447842001412e-02, 1.147792865464664e+00, 8.205029928682370e-01, 4.949122333197422e-01, 6.560055248159289e-01, 6.560055248159289e-01, 3.304787656789833e-01, 1.064542724110567e+00, 9.836381151535164e-01, 6.698754362395862e-01, 8.252219087421166e-01, 8.252219087421166e-01, 9.997048531633024e-01, 9.656281610296018e-01, 9.422167704583727e-01, 4.433873035930578e-01, 7.157195856743035e-01, 7.157195856743035e-01, 8.120356333034537e-01, 3.205942872028503e-01, 4.583345262440655e-01, 7.256151228337153e-01, 3.710531393594771e-01, 3.710531393594767e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_vw_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_vw", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-9.576393445190130e+02, -9.576342506108238e+02, -9.576125940544720e+02, -9.576148365750165e+02, -9.575722847002254e+02, -9.575444012750654e+02, -9.578732328355670e+02, -9.579283530580844e+02, -9.576211039500457e+02, -9.578081757487296e+02, -9.576211039500457e+02, -9.578081757487296e+02, -3.512868895402340e+01, -3.508208898970081e+01, -3.512319173664011e+01, -3.507355452089314e+01, -3.495925998106826e+01, -3.491672063761359e+01, -3.525495934352609e+01, -3.520566384984277e+01, -3.513493447523287e+01, -3.506245607081657e+01, -3.513493447523287e+01, -3.506245607081657e+01, -2.246679489626957e+00, -2.144843446639417e+00, -2.280960754057975e+00, -2.155731955875810e+00, -2.746854438643315e+00, -2.935127003016810e+00, -2.878979318326382e+00, -2.815596625747115e+00, -2.002530051347323e+00, -3.987583258589717e+00, -2.002530051347323e+00, -3.987583258589717e+00, -6.230735969659266e-01, -6.046666987219148e-01, -6.001125614805227e-01, -5.810185954179773e-01, -2.881295118535602e+00, -2.468038996534442e+00, -7.627065390526043e-01, -7.695096078710645e-01, -6.603989323940845e-01, -7.855823908962498e-01, -6.603989323940849e-01, -7.855823908962490e-01, -7.276661079812554e-01, -7.312234614032568e-01, -7.087822956171489e-01, -7.104518031099643e-01, -9.215708598242909e-01, -9.153441439120331e-01, -7.609625022872707e-01, -7.715222414380534e-01, -7.284689529322073e-01, -4.575544041568170e-01, -7.284689529322061e-01, -4.575544041568166e-01, -4.138620591164850e+01, -4.138007373238595e+01, -4.106451121683289e+01, -4.106926981180015e+01, -4.136989289908963e+01, -4.137051026757365e+01, -4.109382939302367e+01, -4.108813555327173e+01, -4.122012312494294e+01, -4.122368247104612e+01, -4.122012312494294e+01, -4.122368247104612e+01, -2.720496763010421e+01, -2.720394500002503e+01, -2.696556078924752e+01, -2.696597069361371e+01, -2.857956622695310e+01, -2.816500104168760e+01, -2.835889122146594e+01, -2.795847373401968e+01, -2.609986098942338e+01, -2.693680878697265e+01, -2.609986098942338e+01, -2.693680878697265e+01, -8.633550142784167e-01, -8.563414287766413e-01, -2.776858816755633e-01, -2.698578422874057e-01, -8.486641241664111e-01, -8.329239207086779e-01, -2.800528052648109e-01, -3.075796945641752e-01, -8.141145215965634e-01, -7.694402920769889e-01, -8.141145215965632e-01, -7.694402920769884e-01, -9.287706266941603e-01, -9.153129962636583e-01, -9.970795338813860e-01, -9.975177808327829e-01, -9.015109121111528e-01, -8.980883238443448e-01, -2.344158245203783e+00, -2.338270473775343e+00, -8.121392656598388e-01, -6.849342027066374e-01, -8.121392656598388e-01, -6.849342027066374e-01, -6.423526216584521e-01, -6.904473247180029e-01, -6.921222460013792e-01, -7.203089392370940e-01, -2.899528173103191e-01, -2.748789586037557e-01, -8.029051329422283e-01, -8.185008927589960e-01, -4.112409723422803e-01, -4.147767831071923e-01, -4.112409723422807e-01, -4.147767831071931e-01, -8.072340686704906e-02, -7.896049474601612e-02, -2.217010730707867e-01, -2.190503509321161e-01, -1.723432357273512e-01, -1.696905382679446e-01, -1.309887350510737e-01, -1.292094545623749e-01, -1.516590233774878e-01, -1.494632118139913e-01, -1.516590233774878e-01, -1.494632118139913e-01, -3.577597258392101e-02, -3.569339305239468e-02, -1.150610517085917e+00, -1.145011519683544e+00, -8.244607359724189e-01, -8.165974785840395e-01, -4.953839972299117e-01, -4.944454112146601e-01, -6.562283263308819e-01, -6.557851878953391e-01, -6.562283263308819e-01, -6.557851878953391e-01, -3.368322384144236e-01, -3.241562513235210e-01, -1.065811166737055e+00, -1.063296062018464e+00, -9.910949262460887e-01, -9.764012406960826e-01, -6.699896337504943e-01, -6.697631122485235e-01, -8.290175141701822e-01, -8.214222835950062e-01, -8.290175141701830e-01, -8.214222835950066e-01, -1.005681853175323e+00, -9.938496468745931e-01, -9.661309765582577e-01, -9.651355270281787e-01, -9.497079208522984e-01, -9.354302250961144e-01, -4.462527157655176e-01, -4.406477036983160e-01, -7.598705813280079e-01, -6.782155886543126e-01, -7.598705813280076e-01, -6.782155886543128e-01, -8.165376899553626e-01, -8.079897645996438e-01, -3.662903377081300e-01, -2.752101342405479e-01, -4.661839788673114e-01, -4.518103152206148e-01, -7.230163781680916e-01, -7.280904308473187e-01, -2.863698114852048e-01, -4.071377726877606e-01, -2.863698114852044e-01, -4.071377726877601e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_vw_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_vw", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.293109184051877e-05, 0.000000000000000e+00, 1.293114179513549e-05, 1.293096651097146e-05, 0.000000000000000e+00, 1.293105074677587e-05, 1.293054083471756e-05, 0.000000000000000e+00, 1.293044770940055e-05, 1.293195688134498e-05, 0.000000000000000e+00, 1.293225240321300e-05, 1.293101834015489e-05, 0.000000000000000e+00, 1.293151277752772e-05, 1.293101834015489e-05, 0.000000000000000e+00, 1.293151277752772e-05, 2.996366023714674e-03, 0.000000000000000e+00, 2.996488674912871e-03, 2.996337920348051e-03, 0.000000000000000e+00, 2.996477974254268e-03, 2.995831833038986e-03, 0.000000000000000e+00, 2.995646812433001e-03, 2.995258276008431e-03, 0.000000000000000e+00, 2.995132169597408e-03, 2.997869647877723e-03, 0.000000000000000e+00, 2.994507043947534e-03, 2.997869647877723e-03, 0.000000000000000e+00, 2.994507043947534e-03, 4.200715030699055e-01, 0.000000000000000e+00, 4.151155631692661e-01, 4.220388987872136e-01, 0.000000000000000e+00, 4.159317269801374e-01, 4.495394155411678e-01, 0.000000000000000e+00, 4.589594270924217e-01, 4.445183114860597e-01, 0.000000000000000e+00, 4.416418299177148e-01, 4.057091912691514e-01, 0.000000000000000e+00, 4.937250273428979e-01, 4.057091912691514e-01, 0.000000000000000e+00, 4.937250273428979e-01, 2.572670895608398e+01, 0.000000000000000e+00, 2.294376358600035e+01, 2.479864693157502e+01, 0.000000000000000e+00, 2.177059790083632e+01, 2.771148678928619e-01, 0.000000000000000e+00, 2.509464054984751e-01, 5.659768155776936e+01, 0.000000000000000e+00, 5.431767266435860e+01, 2.259749942680681e+01, 0.000000000000000e+00, 1.463508641615167e+02, 2.259749942680681e+01, 0.000000000000000e+00, 1.463508641615166e+02, 6.324503014234192e+05, 0.000000000000000e+00, 5.271019733892687e+05, 5.496562727421005e+05, 0.000000000000000e+00, 4.471116735888455e+05, 3.197159921025622e+03, 0.000000000000000e+00, 2.714904401504723e+03, 2.911560192811907e+06, 0.000000000000000e+00, 3.062094217456303e+06, 8.908246190359765e+05, 0.000000000000000e+00, 4.834051151218385e+06, 8.908246190359765e+05, 0.000000000000000e+00, 4.834051151218379e+06, 8.924768742371638e-04, 0.000000000000000e+00, 8.931185292667896e-04, 8.919770600555195e-04, 0.000000000000000e+00, 8.926352803062284e-04, 8.924464270475136e-04, 0.000000000000000e+00, 8.931000056290367e-04, 8.920175841013226e-04, 0.000000000000000e+00, 8.926610178974752e-04, 8.922228825623769e-04, 0.000000000000000e+00, 8.928761159884677e-04, 8.922228825623769e-04, 0.000000000000000e+00, 8.928761159884677e-04, 1.681014771245246e-02, 0.000000000000000e+00, 1.681269628863544e-02, 1.644412702125274e-02, 0.000000000000000e+00, 1.645755969611644e-02, 1.712573498435997e-02, 0.000000000000000e+00, 1.703717992720586e-02, 1.680069107032818e-02, 0.000000000000000e+00, 1.671020204194981e-02, 1.637657215386190e-02, 0.000000000000000e+00, 1.659362732978037e-02, 1.637657215386190e-02, 0.000000000000000e+00, 1.659362732978037e-02, 6.214155513929877e-01, 0.000000000000000e+00, 6.263773909722783e-01, 4.869557603842461e-01, 0.000000000000000e+00, 4.862931574736049e-01, 8.325516992461210e-01, 0.000000000000000e+00, 7.470881093773013e-01, 7.371961063213970e-01, 0.000000000000000e+00, 6.683382188279615e-01, 5.523843371812366e-01, 0.000000000000000e+00, 6.439399747262756e-01, 5.523843371812368e-01, 0.000000000000000e+00, 6.439399747262758e-01, 1.680322502110340e+02, 0.000000000000000e+00, 1.633153648043942e+02, 2.432715455530025e+01, 0.000000000000000e+00, 2.396654094362242e+01, 2.269837421716149e+02, 0.000000000000000e+00, 1.940019561885622e+02, 1.780193950795826e-02, 0.000000000000000e+00, 1.782595457225113e-02, 1.121634537776805e+02, 0.000000000000000e+00, 9.435182145012413e+01, 1.121634537776805e+02, 0.000000000000000e+00, 9.435182145012413e+01, 6.896246147170695e+06, 0.000000000000000e+00, 6.144157416218541e+06, 3.268601510341825e+06, 0.000000000000000e+00, 3.124571891844912e+06, 7.817219853849012e+06, 0.000000000000000e+00, 6.581441351138420e+06, 6.939684423521389e+02, 0.000000000000000e+00, 6.813232572463984e+02, 7.337213909483019e+06, 0.000000000000000e+00, 2.832798288875730e+06, 7.337213909483017e+06, 0.000000000000000e+00, 2.832798288875732e+06, 6.184655642516127e-01, 0.000000000000000e+00, 6.113483131048588e-01, 6.292686936810393e-01, 0.000000000000000e+00, 6.219547129496448e-01, 6.254503941826527e-01, 0.000000000000000e+00, 6.181833347862691e-01, 6.222962328002316e-01, 0.000000000000000e+00, 6.151314409845747e-01, 6.238720007562847e-01, 0.000000000000000e+00, 6.166568959141232e-01, 6.238720007562847e-01, 0.000000000000000e+00, 6.166568959141232e-01, 6.710491118734169e-01, 0.000000000000000e+00, 6.644380041926748e-01, 1.062460454592638e+00, 0.000000000000000e+00, 1.048770501185330e+00, 9.254286161076486e-01, 0.000000000000000e+00, 9.132160890872123e-01, 8.105979508028869e-01, 0.000000000000000e+00, 8.021068030259340e-01, 8.663681416474144e-01, 0.000000000000000e+00, 8.567845172274138e-01, 8.663681416474144e-01, 0.000000000000000e+00, 8.567845172274138e-01, 4.233638525448552e-01, 0.000000000000000e+00, 4.213009399359828e-01, 1.207679180856774e+01, 0.000000000000000e+00, 1.186942020676453e+01, 7.016998509778441e+00, 0.000000000000000e+00, 6.810034028331159e+00, 3.024385837125076e+00, 0.000000000000000e+00, 2.974767882753505e+00, 4.558073793085399e+00, 0.000000000000000e+00, 4.562901000858759e+00, 4.558073793085403e+00, 0.000000000000000e+00, 4.562901000858760e+00, 1.366818081411902e+00, 0.000000000000000e+00, 1.338966339251527e+00, 3.383498365853440e+03, 0.000000000000000e+00, 3.314985802507890e+03, 1.390172763857115e+03, 0.000000000000000e+00, 1.259415447184266e+03, 3.424824182712280e+00, 0.000000000000000e+00, 3.274449679751296e+00, 3.625707363724646e+02, 0.000000000000000e+00, 3.079851680605962e+02, 3.625707363724646e+02, 0.000000000000000e+00, 3.079851680605963e+02, 2.160802635499018e+05, 0.000000000000000e+00, 1.941851121390783e+05, 1.678524443444068e+08, 0.000000000000000e+00, 1.667067706068541e+08, 1.992427887587956e+07, 0.000000000000000e+00, 1.656041588063657e+07, 4.122466915137551e+02, 0.000000000000000e+00, 3.926655637176916e+02, 8.633543549065115e+06, 0.000000000000000e+00, 3.678861720624852e+06, 8.633543549065135e+06, 0.000000000000000e+00, 3.678861720624864e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
