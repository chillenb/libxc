
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_baltin_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_baltin", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.600277765230171e+03, 2.600276477963558e+03, 2.600300563750155e+03, 2.600319104767883e+03, 2.600305149149116e+03, 2.600305149149116e+03, 7.432556641133037e+01, 7.432190514841631e+01, 7.424096058136269e+01, 7.441000086399021e+01, 7.432475995018464e+01, 7.432475995018464e+01, 3.259087176174164e+00, 3.266977867865523e+00, 3.505751169484952e+00, 3.542265034757388e+00, 3.517081340914257e+00, 3.517081340914257e+00, 4.766930742752651e-01, 4.678567729344693e-01, 4.250807522895508e+00, 5.040027689405399e-01, 4.743479947260396e-01, 4.743479947260397e-01, 4.054994584045863e-01, 3.944612259081101e-01, 5.156682267267403e-01, 4.256505961828390e-01, 3.775450608867761e-01, 3.775450608867757e-01, 1.458834761236524e+02, 1.457529081766262e+02, 1.458785349286175e+02, 1.457632501600616e+02, 1.458166812645698e+02, 1.458166812645698e+02, 3.247661744887154e+01, 3.259680989325960e+01, 3.294150025167594e+01, 3.304497862082405e+01, 3.232188775206797e+01, 3.232188775206797e+01, 2.038260691447364e+00, 1.993833558453064e+00, 1.803008508047745e+00, 1.607289215858663e+00, 2.052025358905274e+00, 2.052025358905274e+00, 5.499644903412675e-01, 6.904517183940717e-01, 5.321470176676414e-01, 1.800601401663556e+01, 4.633710037728166e-01, 4.633710037728166e-01, 3.708494806350884e-01, 3.923510128227617e-01, 1.565410375687876e-01, 4.650202548318577e-01, 2.294757402263232e-01, 2.294757402263234e-01, 1.620143552716298e+00, 1.680190064838179e+00, 1.659099844363162e+00, 1.641593773753657e+00, 1.650344648822935e+00, 1.650344648822935e+00, 1.511369382470241e+00, 1.736760592503074e+00, 1.661042639572084e+00, 1.590235077632624e+00, 1.622911306566579e+00, 1.622911306566579e+00, 2.207762915790364e+00, 8.091388573515493e-01, 8.604710668848380e-01, 9.200135745050512e-01, 8.727593479981796e-01, 8.727593479981796e-01, 1.486874032554080e+00, 5.415497132241813e-01, 5.328626339187826e-01, 7.553178061774747e-01, 4.205751231016362e-01, 4.205751231016363e-01, 4.513642420398356e-01, 1.771580803008573e-01, 2.546290938823939e-01, 4.239969602357239e-01, 2.041864807091719e-01, 2.041864807091717e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_baltin_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_baltin", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [2.915075093931565e+03, 2.915107144455165e+03, 2.915229320492356e+03, 2.914752889529061e+03, 2.915005417944308e+03, 2.915005417944308e+03, 7.186796538200564e+01, 7.187225773421132e+01, 7.197495442781469e+01, 7.182362104609810e+01, 7.187657687942333e+01, 7.187657687942333e+01, 2.179736900743974e+00, 2.159859900526997e+00, 1.636645025660906e+00, 1.685855189750123e+00, 1.692749316046307e+00, 1.692749316046307e+00, -1.140702723115771e-01, -9.416698357892535e-02, 3.144217883074430e+00, -2.950032694033600e-01, -2.108102215159671e-01, -2.108102215159671e-01, -4.050600279153335e-01, -3.939744057274691e-01, -5.008501844932066e-01, -4.255040275027561e-01, -3.773136311975703e-01, -3.773136311975696e-01, 1.818307700466067e+02, 1.820816772059716e+02, 1.818417042541419e+02, 1.820632192767821e+02, 1.819583175516477e+02, 1.819583175516477e+02, 1.382480796442038e+01, 1.437874617152674e+01, 1.287085880317659e+01, 1.335973527210043e+01, 1.458991855362820e+01, 1.458991855362820e+01, 2.123338191220695e+00, 2.917523451931647e+00, 1.760086082057266e+00, 2.242929612129910e+00, 2.244843708462654e+00, 2.244843708462654e+00, -4.492202787211428e-01, -3.267267002557424e-01, -4.459243113696815e-01, 2.654155607465821e+01, -3.246280271234284e-01, -3.246280271234284e-01, -3.707622261102068e-01, -3.922109401810684e-01, -1.564591389627584e-01, -4.260160058719990e-01, -2.293568825897661e-01, -2.293568825897662e-01, 2.581966550690907e+00, 2.473849638459551e+00, 2.511823563265757e+00, 2.543261857564173e+00, 2.527534380555062e+00, 2.527534380555062e+00, 2.466018535421334e+00, 1.194170899363120e+00, 1.552851394118412e+00, 1.917192984017327e+00, 1.732999757146299e+00, 1.732999757146299e+00, 3.190194516961084e+00, -2.285333449890069e-01, -2.307765184826378e-02, 5.409648515407818e-01, 2.321413146124262e-01, 2.321413146124262e-01, 9.973220574584847e-01, -5.279750231360092e-01, -5.076314445381348e-01, 6.024059455744627e-01, -3.573360315626707e-01, -3.573360315626705e-01, -4.504889898234363e-01, -1.771480717303204e-01, -2.545849962533336e-01, -3.682326468606485e-01, -2.040847143513063e-01, -2.040847143513062e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_baltin_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_baltin", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [3.591976893827471e-06, 3.591946841315690e-06, 3.591803964414274e-06, 3.592251289052969e-06, 3.592018209476392e-06, 3.592018209476392e-06, 8.323409300162963e-04, 8.323355404623913e-04, 8.321498110775602e-04, 8.319986726320997e-04, 8.322742784597644e-04, 8.322742784597644e-04, 1.159941191734347e-01, 1.163786272769375e-01, 1.261668289919197e-01, 1.230765006008251e-01, 1.237251753550698e-01, 1.237251753550698e-01, 6.737686884701291e+00, 6.440604651978147e+00, 7.316173279295733e-02, 1.539840078938722e+01, 1.087499786838592e+01, 1.087499786838593e+01, 1.597195980974512e+05, 1.369747854157305e+05, 8.156563961018109e+02, 8.291473617947383e+05, 4.178927920108689e+05, 4.178927920108689e+05, 2.479993295728811e-04, 2.478627913319102e-04, 2.479925268669006e-04, 2.478719958361538e-04, 2.479303832650961e-04, 2.479303832650961e-04, 4.669839417765072e-03, 4.569677949062571e-03, 4.744817411730950e-03, 4.654256773046220e-03, 4.578995906680088e-03, 4.578995906680088e-03, 1.733018349508597e-01, 1.351733981593812e-01, 2.187522158016084e-01, 1.947445749949914e-01, 1.651829843310803e-01, 1.651829843310803e-01, 4.601117610921570e+01, 6.707083717059692e+00, 5.811135650849334e+01, 4.948316373999978e-03, 2.846931231811943e+01, 2.846931231811943e+01, 1.805142750002561e+06, 8.874900844636896e+05, 1.985083245071319e+06, 1.909965878946058e+02, 1.135410361501227e+06, 1.135410361501227e+06, 1.708017622197718e-01, 1.737750906976959e-01, 1.727210089687825e-01, 1.718591929367575e-01, 1.722898517392609e-01, 1.722898517392609e-01, 1.854797762323563e-01, 2.932141924130897e-01, 2.553560538801722e-01, 2.239805620251837e-01, 2.393193552525622e-01, 2.393193552525622e-01, 1.173138547582226e-01, 3.325613361073137e+00, 1.919990926655773e+00, 8.331587970041154e-01, 1.266801699886182e+00, 1.266801699886182e+00, 3.757635737953510e-01, 9.302476968172427e+02, 3.671021292542594e+02, 9.299859024955712e-01, 9.251561812561323e+01, 9.251561812561320e+01, 5.681900964442069e+04, 4.646601273260278e+07, 5.024242912881801e+06, 1.117272089541513e+02, 1.433135126741390e+06, 1.433135126741394e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
