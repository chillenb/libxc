
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_tfvw_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tfvw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([3.025795288414117e+03, 3.025785235255807e+03, 3.025786983151067e+03, 3.025950683429403e+03, 3.025789597208374e+03, 3.025789597208374e+03, 8.992644417972534e+01, 8.992105045831988e+01, 8.978035238942611e+01, 9.006110630780016e+01, 8.992443613500585e+01, 8.992443613500585e+01, 4.359783275659244e+00, 4.378225078934430e+00, 4.956328158603836e+00, 4.985485373238069e+00, 4.366366436891710e+00, 4.366366436891710e+00, 6.512773129205163e-01, 6.360028547155122e-01, 5.292311371895114e+00, 7.593692567763237e-01, 6.462159807865101e-01, 6.462159807865101e-01, 5.014293409625881e-01, 5.005200269875223e-01, 7.359017262175428e-01, 5.980842927084494e-01, 4.910806705655489e-01, 4.910806705655489e-01, 1.641636384230043e+02, 1.639009452293584e+02, 1.641376880747215e+02, 1.639334101514018e+02, 1.640275525259462e+02, 1.640275525259462e+02, 4.471095481324831e+01, 4.471994138366988e+01, 4.533599918071828e+01, 4.533802860289707e+01, 4.392251909530988e+01, 4.392251909530988e+01, 2.356224128220080e+00, 2.051157127691782e+00, 2.173715233047226e+00, 1.818025664627914e+00, 2.424594375907923e+00, 2.424594375907923e+00, 8.491360465636083e-01, 1.056148111252568e+00, 7.855014030896413e-01, 1.899413625252675e+01, 7.473887586125034e-01, 7.473887586125034e-01, 5.807003363108235e-01, 5.799458931905873e-01, 3.428169238900468e-01, 7.060483938219723e-01, 4.771834901704869e-01, 4.771834901704872e-01, 1.690566303662199e+00, 1.804145993216961e+00, 1.763494369882174e+00, 1.731994326699755e+00, 1.747744692694677e+00, 1.747744692694678e+00, 1.563370330697172e+00, 2.225032904067984e+00, 2.021750067261612e+00, 1.835806436973515e+00, 1.925785802922366e+00, 1.925785802922366e+00, 2.280380020334069e+00, 1.204707794145941e+00, 1.225266760271940e+00, 1.195601064685153e+00, 1.194249747687831e+00, 1.194249747687831e+00, 1.877505928204737e+00, 8.096693104292388e-01, 7.814147631161087e-01, 9.015681090632119e-01, 6.700683375659712e-01, 6.700683375659706e-01, 5.779840257436663e-01, 4.426593340021382e-01, 4.769205305788561e-01, 6.037785938073025e-01, 3.949213124192421e-01, 3.949213124192424e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_tfvw_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tfvw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([2.489274452484841e+03, 2.489311279435401e+03, 2.489448694243511e+03, 2.488846171869463e+03, 2.489294098450707e+03, 2.489294098450707e+03, 5.625359080336452e+01, 5.625959810088391e+01, 5.642919768091943e+01, 5.616061764721032e+01, 5.625715985351769e+01, 5.625715985351769e+01, 1.011470927231771e+00, 9.820076112280443e-01, 1.222018545619222e-01, 1.733257093651900e-01, 1.000866615286447e+00, 1.000866615286447e+00, -2.492946677237604e-01, -2.232440867999185e-01, 2.422930969453815e+00, -5.480774897204221e-01, -2.410158823866678e-01, -2.410158823866678e-01, -5.001754391107750e-01, -4.991442975681508e-01, -7.131736998349554e-01, -5.977957154500102e-01, -4.897334647177026e-01, -4.897334647177026e-01, 1.632648342563872e+02, 1.636440049453281e+02, 1.633030729558714e+02, 1.635979131905217e+02, 1.634601191654772e+02, 1.634601191654772e+02, 1.486986184543282e+00, 2.131293167309117e+00, 5.991504600243759e-01, 1.105156575943897e+00, 3.060116046182138e+00, 3.060116046182138e+00, 1.715021736147763e+00, 2.752663928187784e+00, 1.492082676797659e+00, 2.170015822875360e+00, 1.965512455647732e+00, 1.965512455647732e+00, -7.350813198986341e-01, -6.483848375446416e-01, -6.743516714252372e-01, 2.544930594932556e+01, -5.948839540770180e-01, -5.948839540770180e-01, -5.804317802538983e-01, -5.795951386842720e-01, -3.426198847830592e-01, -6.618814632687524e-01, -4.768922925434806e-01, -4.768922925434805e-01, 2.644349966967695e+00, 2.484608808951526e+00, 2.541779970336136e+00, 2.586046406485380e+00, 2.563904088646794e+00, 2.563904088646795e+00, 2.497762339467600e+00, 8.311667523600469e-01, 1.312790447003988e+00, 1.767697890834743e+00, 1.539365088105343e+00, 1.539365088105344e+00, 3.000701256962597e+00, -5.596576191844993e-01, -3.153943957587517e-01, 2.915060799553285e-01, -3.093495515871141e-02, -3.093495515871128e-02, 6.086848029094980e-01, -7.901731370309311e-01, -7.456844089542564e-01, 4.260048563982280e-01, -5.949302821897711e-01, -5.949302821897706e-01, -5.762617094076152e-01, -4.426330425050714e-01, -4.768256546630976e-01, -5.353911943573236e-01, -3.947109876404507e-01, -3.947109876404511e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_tfvw_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tfvw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([6.466056283234563e-06, 6.466009197756443e-06, 6.465764469780239e-06, 6.466536223526939e-06, 6.466031741755516e-06, 6.466031741755516e-06, 1.498421174038643e-03, 1.498411739878048e-03, 1.497967471120726e-03, 1.497780402094735e-03, 1.498397172686069e-03, 1.498397172686069e-03, 2.127416061921152e-01, 2.133980905275349e-01, 2.313976576874749e-01, 2.260172348590344e-01, 2.129807311553839e-01, 2.129807311553839e-01, 1.039094480851941e+01, 9.986689159943243e+00, 1.235781346377657e-01, 2.726729965319867e+01, 1.026742833838440e+01, 1.026742833838440e+01, 5.964453786572185e+04, 5.189989231390612e+04, 7.729001762631485e+02, 5.402227120247934e+05, 5.355685357776580e+04, 5.355685357776580e+04, 4.469833335950086e-04, 4.467449287426880e-04, 4.469581719292752e-04, 4.467728090459601e-04, 4.468621392195736e-04, 4.468621392195736e-04, 8.433970231851093e-03, 8.258181711162384e-03, 8.506448761135831e-03, 8.367254872862299e-03, 8.223561338896960e-03, 8.223561338896960e-03, 3.223851271846090e-01, 2.515276663577714e-01, 3.773229443710125e-01, 3.325266768488966e-01, 2.879077532755357e-01, 2.879077532755357e-01, 6.875369789659389e+01, 1.017076998310966e+01, 7.146664024634525e+01, 8.938290414619800e-03, 4.446729428797773e+01, 4.446729428797773e+01, 6.017464903633266e+05, 4.031448391945296e+05, 9.574968365468717e+05, 2.853120840444644e+02, 5.329472753722590e+05, 5.329472753722590e+05, 2.934235204795085e-01, 2.981735854250898e-01, 2.964590738343240e-01, 2.951453133270494e-01, 2.958018789761704e-01, 2.958018789761704e-01, 3.235901009869711e-01, 4.956708849315528e-01, 4.349226204021869e-01, 3.871492494294326e-01, 4.105657975335820e-01, 4.105657975335819e-01, 2.182135508852704e-01, 5.111822292084749e+00, 3.051372879724367e+00, 1.460335367408629e+00, 2.110668932927307e+00, 2.110668932927307e+00, 6.755606254308927e-01, 9.728411342429538e+02, 3.921118904777629e+02, 1.731324176957159e+00, 1.285807832823024e+02, 1.285807832823023e+02, 3.705071661734571e+04, 1.964459228149110e+07, 2.865708569560217e+06, 1.480818596429327e+02, 8.682210925506415e+05, 8.682210925506453e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
