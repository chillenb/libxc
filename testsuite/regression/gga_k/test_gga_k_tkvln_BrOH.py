
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_tkvln_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tkvln", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([3.025928469301309e+03, 3.025918416223976e+03, 3.025920164540132e+03, 3.026083863491225e+03, 3.025922778137773e+03, 3.025922778137773e+03, 9.000592759003673e+01, 9.000053392278448e+01, 8.985983840445260e+01, 9.014059339703473e+01, 9.000391968308855e+01, 9.000391968308855e+01, 4.402323233102056e+00, 4.420745601606735e+00, 4.998339462296752e+00, 5.027644306476793e+00, 4.408899307759343e+00, 4.408899307759343e+00, 6.727836907332037e-01, 6.576885427967081e-01, 5.338346386383189e+00, 7.767403266513229e-01, 6.677763174888313e-01, 6.677763174888313e-01, 5.012326960241725e-01, 5.003981599143034e-01, 7.422707750119170e-01, 5.978969989432117e-01, 4.909411244926142e-01, 4.909411244926142e-01, 1.642538645644861e+02, 1.639911762581934e+02, 1.642279147318939e+02, 1.640236406085429e+02, 1.641177811515977e+02, 1.641177811515977e+02, 4.477626736230313e+01, 4.478541836501495e+01, 4.540124498774205e+01, 4.540340312618275e+01, 4.398802889729777e+01, 4.398802889729777e+01, 2.396181808391953e+00, 2.092647059694928e+00, 2.212716228845071e+00, 1.857794128404756e+00, 2.465246798594652e+00, 2.465246798594652e+00, 8.629471152110901e-01, 1.077751175273710e+00, 7.991721280361024e-01, 1.905899648204555e+01, 7.628279670285650e-01, 7.628279670285650e-01, 5.805711656215933e-01, 5.796279877911612e-01, 3.429995579069915e-01, 7.151545439740455e-01, 4.769892702431073e-01, 4.769892702431076e-01, 1.731101750187072e+00, 1.844582581340664e+00, 1.803966443889911e+00, 1.772493741739271e+00, 1.788230427446042e+00, 1.788230427446042e+00, 1.603305196286289e+00, 2.262402410052513e+00, 2.059897165275619e+00, 1.874652216776773e+00, 1.964278174459124e+00, 1.964278174459123e+00, 2.322759917291828e+00, 1.229529547285693e+00, 1.252646182723281e+00, 1.226847040912106e+00, 1.223531693553313e+00, 1.223531693553312e+00, 1.913065464593552e+00, 8.154717409267223e-01, 7.895977059778024e-01, 9.318986472518408e-01, 6.816942128913767e-01, 6.816942128913761e-01, 5.780804753839545e-01, 4.473060592606213e-01, 4.782348252889937e-01, 6.149366326230828e-01, 3.950299433437073e-01, 3.950299433437077e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_tkvln_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tkvln", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([2.489418753701340e+03, 2.489455580736247e+03, 2.489592995982761e+03, 2.488990472226256e+03, 2.489438399711169e+03, 2.489438399711169e+03, 5.634167529909618e+01, 5.634768265368146e+01, 5.651728492146286e+01, 5.624870601973830e+01, 5.634524449443084e+01, 5.634524449443084e+01, 1.060319379746658e+00, 1.030835203604049e+00, 1.704827657767516e-01, 2.217651339254426e-01, 1.049707461525907e+00, 1.049707461525907e+00, -2.232787443843695e-01, -1.970304956841772e-01, 2.475525776366575e+00, -5.266431885523333e-01, -2.149404680792046e-01, -2.149404680792046e-01, -4.998666178414373e-01, -4.986963545333733e-01, -7.042886346343337e-01, -5.984969626826470e-01, -4.893177394682391e-01, -4.893177394682391e-01, 1.633642210897094e+02, 1.637433969128142e+02, 1.634024603309268e+02, 1.636973045574437e+02, 1.635595086084202e+02, 1.635595086084202e+02, 1.560100478450218e+00, 2.204581637761244e+00, 6.721940532943048e-01, 1.178336518102059e+00, 3.133439280773011e+00, 3.133439280773011e+00, 1.761095614800084e+00, 2.800384878128360e+00, 1.537127075709810e+00, 2.215886156306242e+00, 2.012333402259734e+00, 2.012333402259734e+00, -7.176348705275697e-01, -6.222623201489283e-01, -6.570634692639946e-01, 2.552194105624597e+01, -5.756077659835439e-01, -5.756077659835439e-01, -5.811248001796241e-01, -5.802915953460590e-01, -3.432159805959257e-01, -6.497982652136879e-01, -4.775941932804161e-01, -4.775941932804160e-01, 2.691045158324350e+00, 2.531197712789298e+00, 2.588407027821099e+00, 2.632702859661952e+00, 2.610545833556642e+00, 2.610545833556643e+00, 2.543811677633126e+00, 8.744534537585467e-01, 1.356915225238321e+00, 1.812575180329212e+00, 1.583861801545313e+00, 1.583861801545313e+00, 3.049377900358892e+00, -5.299981477060033e-01, -2.829385595458189e-01, 3.281693864190516e-01, 3.593920041398389e-03, 3.593920041398510e-03, 6.500182933419802e-01, -7.819611255235018e-01, -7.346715145199463e-01, 4.616739774515924e-01, -5.799586386811111e-01, -5.799586386811106e-01, -5.754395332932472e-01, -4.401627307937246e-01, -4.767972362641221e-01, -5.209527129366631e-01, -3.953358071414078e-01, -3.953358071414082e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_tkvln_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tkvln", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([6.466056283234563e-06, 6.466009197756443e-06, 6.465764469780239e-06, 6.466536223526939e-06, 6.466031741755516e-06, 6.466031741755516e-06, 1.498421174038643e-03, 1.498411739878048e-03, 1.497967471120726e-03, 1.497780402094735e-03, 1.498397172686069e-03, 1.498397172686069e-03, 2.127416061921152e-01, 2.133980905275349e-01, 2.313976576874749e-01, 2.260172348590344e-01, 2.129807311553839e-01, 2.129807311553839e-01, 1.039094480851941e+01, 9.986689159943243e+00, 1.235781346377657e-01, 2.726729965319867e+01, 1.026742833838440e+01, 1.026742833838440e+01, 5.964453786572185e+04, 5.189989231390612e+04, 7.729001762631485e+02, 5.402227120247934e+05, 5.355685357776580e+04, 5.355685357776580e+04, 4.469833335950086e-04, 4.467449287426880e-04, 4.469581719292752e-04, 4.467728090459601e-04, 4.468621392195736e-04, 4.468621392195736e-04, 8.433970231851093e-03, 8.258181711162384e-03, 8.506448761135831e-03, 8.367254872862299e-03, 8.223561338896960e-03, 8.223561338896960e-03, 3.223851271846090e-01, 2.515276663577714e-01, 3.773229443710125e-01, 3.325266768488966e-01, 2.879077532755357e-01, 2.879077532755357e-01, 6.875369789659389e+01, 1.017076998310966e+01, 7.146664024634525e+01, 8.938290414619800e-03, 4.446729428797773e+01, 4.446729428797773e+01, 6.017464903633266e+05, 4.031448391945296e+05, 9.574968365468717e+05, 2.853120840444644e+02, 5.329472753722590e+05, 5.329472753722590e+05, 2.934235204795085e-01, 2.981735854250898e-01, 2.964590738343240e-01, 2.951453133270494e-01, 2.958018789761704e-01, 2.958018789761704e-01, 3.235901009869711e-01, 4.956708849315528e-01, 4.349226204021869e-01, 3.871492494294326e-01, 4.105657975335820e-01, 4.105657975335819e-01, 2.182135508852704e-01, 5.111822292084749e+00, 3.051372879724367e+00, 1.460335367408629e+00, 2.110668932927307e+00, 2.110668932927307e+00, 6.755606254308927e-01, 9.728411342429538e+02, 3.921118904777629e+02, 1.731324176957159e+00, 1.285807832823024e+02, 1.285807832823023e+02, 3.705071661734571e+04, 1.964459228149110e+07, 2.865708569560217e+06, 1.480818596429327e+02, 8.682210925506415e+05, 8.682210925506453e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
