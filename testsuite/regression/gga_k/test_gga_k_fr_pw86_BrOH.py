
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_fr_pw86_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_fr_pw86", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.188331454176393e+03, 2.188338754191387e+03, 2.188383951471948e+03, 2.188264159727384e+03, 2.188335198380286e+03, 2.188335198380286e+03, 5.927275256934683e+01, 5.927227301283435e+01, 5.926397868108712e+01, 5.930340871757110e+01, 5.927301090918755e+01, 5.927301090918755e+01, 2.296178355040718e+00, 2.294162856403323e+00, 2.245955258668950e+00, 2.277413916987300e+00, 2.295430656483895e+00, 2.295430656483895e+00, 1.939335616132580e-01, 1.974943800317910e-01, 3.194439777540232e+00, 1.155126983060819e-01, 1.949803141289053e-01, 1.949803141289053e-01, 1.544742208128246e-03, 1.663794316731788e-03, 1.756246674600780e-02, 4.922726380566621e-04, 1.629906684412057e-03, 1.629906684412057e-03, 1.278198690310706e+02, 1.278215725085815e+02, 1.278202888739292e+02, 1.278216089712720e+02, 1.278203832282721e+02, 1.278203832282721e+02, 2.039997196421641e+01, 2.063664492221942e+01, 2.035577011440535e+01, 2.054028608211418e+01, 2.061643353887912e+01, 2.061643353887912e+01, 1.631711403906566e+00, 1.828226506908957e+00, 1.476000892529667e+00, 1.532410418269411e+00, 1.744102642502029e+00, 1.744102642502029e+00, 6.964921735294814e-02, 2.119742788758359e-01, 6.733796176839288e-02, 1.691631255234177e+01, 8.739637118852346e-02, 8.739637118852346e-02, 4.620042608157612e-04, 5.720324943876261e-04, 3.246169422243176e-04, 3.038104939881946e-02, 4.740588413745959e-04, 4.740588413745959e-04, 1.631744427024013e+00, 1.628933416253865e+00, 1.629661259300272e+00, 1.630415268188957e+00, 1.630011756208694e+00, 1.630011756208694e+00, 1.526670770653390e+00, 1.279894436021063e+00, 1.348330492141779e+00, 1.410686853778986e+00, 1.378246102999223e+00, 1.378246102999223e+00, 2.012993041182094e+00, 3.184607977324986e-01, 4.256570888706890e-01, 6.345915338816753e-01, 5.191665257051847e-01, 5.191665257051846e-01, 1.048457123032756e+00, 1.572401914419172e-02, 2.585753959013885e-02, 5.486152307694625e-01, 4.717098053910573e-02, 4.717098053910572e-02, 2.050380755370362e-03, 6.813516031712563e-05, 1.931217388980394e-04, 4.286678109773373e-02, 3.518015759234953e-04, 3.518015759234946e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_fr_pw86_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_fr_pw86", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.304183921354137e+03, 3.304202267465552e+03, 3.304292594425847e+03, 3.303992010241067e+03, 3.304193525571634e+03, 3.304193525571634e+03, 8.697244972371757e+01, 8.697301588554014e+01, 8.699579860678651e+01, 8.699348561356001e+01, 8.697348188665556e+01, 8.697348188665556e+01, 3.209290483511057e+00, 3.203879223416104e+00, 3.077397230347869e+00, 3.123243599770301e+00, 3.207307313994257e+00, 3.207307313994257e+00, 2.580627189704793e-01, 2.633135530884303e-01, 4.583409674433546e+00, 1.504468077357538e-01, 2.596108598784033e-01, 2.596108598784033e-01, 1.769287443278046e-03, 1.907486194400992e-03, 2.139818650382833e-02, 5.591157578332348e-04, 1.868597171262189e-03, 1.868597171262189e-03, 1.979919961983909e+02, 1.981083609620455e+02, 1.980040059367113e+02, 1.980944823511873e+02, 1.980514660939208e+02, 1.980514660939208e+02, 2.797282406485279e+01, 2.833315411516725e+01, 2.786396841511004e+01, 2.814352190442974e+01, 2.836115012538844e+01, 2.836115012538844e+01, 2.429542440717155e+00, 2.965715774610715e+00, 2.184555688056628e+00, 2.441103007456337e+00, 2.628735678495691e+00, 2.628735678495691e+00, 8.915323541941778e-02, 2.781807393744670e-01, 8.631287635583682e-02, 2.743471310247031e+01, 1.130312970779744e-01, 1.130312970779744e-01, 5.246909797915657e-04, 6.500552549658543e-04, 3.688447040585692e-04, 3.798790595786928e-02, 5.387312478540219e-04, 5.387312478540217e-04, 2.702134808581854e+00, 2.652575601180695e+00, 2.670975054013217e+00, 2.684770371958932e+00, 2.677924553900276e+00, 2.677924553900276e+00, 2.534015518992907e+00, 1.817494987310695e+00, 1.985072540469226e+00, 2.174966641466899e+00, 2.073828671871414e+00, 2.073828671871415e+00, 3.255742602696231e+00, 4.217001921798291e-01, 5.709238106159880e-01, 8.880581049216171e-01, 7.083335797667621e-01, 7.083335797667620e-01, 1.480304339585739e+00, 1.898205083552260e-02, 3.197061229902837e-02, 7.886317485367962e-01, 6.008146337480860e-02, 6.008146337480860e-02, 2.352784862491643e-03, 7.724065466312811e-05, 2.190680522164558e-04, 5.461478920609558e-02, 3.996590346001078e-04, 3.996590346001071e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_fr_pw86_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_fr_pw86", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [8.685708345710888e-07, 8.685670877152674e-07, 8.685419853431853e-07, 8.686034926249476e-07, 8.685689287298179e-07, 8.685689287298179e-07, 1.891030828553317e-04, 1.891103312425397e-04, 1.892855868616460e-04, 1.888627792106167e-04, 1.891043943666519e-04, 1.891043943666519e-04, 2.100852378788377e-02, 2.094181003389180e-02, 1.893244853686296e-02, 1.868090845187053e-02, 2.098484527903953e-02, 2.098484527903953e-02, 5.072629913387526e-01, 5.124189566176034e-01, 1.430679248509209e-02, 6.325514449113010e-01, 5.091197207361853e-01, 5.091197207361853e-01, 3.595407587230207e+01, 3.368940810840235e+01, 3.136980338920647e+00, 8.853682063275136e+01, 3.471301096979429e+01, 3.471301096979429e+01, 6.093034724530619e-05, 6.088904835355866e-05, 6.092609921694790e-05, 6.089400019273417e-05, 6.090945546842441e-05, 6.090945546842441e-05, 6.960392041914261e-04, 6.913479935967448e-04, 6.879427608350655e-04, 6.843971136940520e-04, 7.033786777469953e-04, 7.033786777469953e-04, 4.226191281522577e-02, 3.071839997740263e-02, 4.877660433891724e-02, 4.365797561569277e-02, 3.857797210982784e-02, 3.857797210982784e-02, 8.610180857415666e-01, 3.171608776946990e-01, 9.337967684251867e-01, 1.093085477075869e-03, 7.883251881690451e-01, 7.883251881690451e-01, 9.534417616564177e+01, 7.909007202943067e+01, 1.803813334695273e+02, 1.962545281177213e+00, 1.053022020913253e+02, 1.053022020913253e+02, 2.953403112762170e-02, 3.557376154608501e-02, 3.366654683452357e-02, 3.199590914661566e-02, 3.285290250913209e-02, 3.285290250913210e-02, 3.130976030472690e-02, 5.438047381531572e-02, 5.543230024366506e-02, 5.279280724292298e-02, 5.487593447222545e-02, 5.487593447222543e-02, 2.707327033408856e-02, 2.171506819366198e-01, 1.792697268796817e-01, 1.455856191991171e-01, 1.638788681845407e-01, 1.638788681845408e-01, 7.159658079938831e-02, 3.284895434950881e+00, 2.130013244135253e+00, 2.021850187425408e-01, 1.392455446324593e+00, 1.392455446324592e+00, 2.561828032679418e+01, 6.044155249979081e+02, 2.316589994794582e+02, 1.616535584109594e+00, 1.539318225485049e+02, 1.539318225485050e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
