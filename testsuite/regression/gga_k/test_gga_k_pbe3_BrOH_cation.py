
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_pbe3_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_pbe3", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.804882264921882e+03, 2.804863738680464e+03, 2.804841019298302e+03, 2.805115404947805e+03, 2.804963160207012e+03, 2.804963160207012e+03, 8.505680510526204e+01, 8.505000114088688e+01, 8.489668688820636e+01, 8.519533143795776e+01, 8.505274278682249e+01, 8.505274278682249e+01, 3.869043259405309e+00, 3.877078142247882e+00, 4.050493260489010e+00, 4.101774847582749e+00, 3.997958338427315e+00, 3.997958338427315e+00, 3.602175299313842e-01, 3.679831559649968e-01, 5.042354909129287e+00, 2.227439135247564e-01, 3.439023577736254e-01, 3.439023577736252e-01, 5.021284981600574e-04, 5.569850296319038e-04, 1.685198789998886e-02, 1.667923667140735e-04, 3.340484744182351e-04, 3.340484744182351e-04, 1.471002699981071e+02, 1.467219898687717e+02, 1.470851024310105e+02, 1.467511182078865e+02, 1.469072711650293e+02, 1.469072711650293e+02, 3.714616648193012e+01, 3.743457081229668e+01, 3.730302009886870e+01, 3.757073599343336e+01, 3.721272074290453e+01, 3.721272074290453e+01, 2.274692846011778e+00, 1.785641257507475e+00, 2.059054978935815e+00, 1.485404528621613e+00, 2.245608090128194e+00, 2.245608090128194e+00, 1.115988545686523e-01, 3.794603418685759e-01, 9.612663818321313e-02, 1.607288304208591e+01, 1.513201232859628e-01, 1.513201232859628e-01, 9.944390702196894e-05, 1.593884435838605e-04, 9.354517842107062e-05, 4.385185642835285e-02, 1.500533029552685e-04, 1.500533029552685e-04, 1.474328267025506e+00, 1.500548686108369e+00, 1.471392846595762e+00, 1.461294927365938e+00, 1.464433291158096e+00, 1.464433291158096e+00, 1.429602097874381e+00, 2.062984370825015e+00, 1.917562786933152e+00, 1.641697615399796e+00, 1.792458990696284e+00, 1.792458990696284e+00, 1.990613554796697e+00, 5.818035963829596e-01, 7.866915284289744e-01, 1.085693893411926e+00, 9.447273830576974e-01, 9.447273830576973e-01, 1.765524962958904e+00, 1.539031620218724e-02, 2.855269070829553e-02, 8.934833447784298e-01, 7.063665929833524e-02, 7.063665929833524e-02, 9.970249533802688e-04, 1.138607018459604e-05, 5.040272361463231e-05, 6.227354390157041e-02, 1.262441802710606e-04, 1.262441802710604e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_pbe3_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_pbe3", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [1.604752551515397e+03, 1.604748075837593e+03, 1.604758625358774e+03, 1.604752490640503e+03, 1.604785856742697e+03, 1.604789336027850e+03, 1.604717192532574e+03, 1.604701909196152e+03, 1.604755780296776e+03, 1.604742520009206e+03, 1.604755780296776e+03, 1.604742520009206e+03, 4.813361809215363e+01, 4.809129283159069e+01, 4.812877672451967e+01, 4.808367447369879e+01, 4.798386834067798e+01, 4.794668600691195e+01, 4.825161327826802e+01, 4.820751287775830e+01, 4.813371646974178e+01, 4.808102637352557e+01, 4.813371646974178e+01, 4.808102637352557e+01, 2.876525460019020e+00, 2.753867667482841e+00, 2.917350577781861e+00, 2.766986643816386e+00, 3.438839569463201e+00, 3.629143641263706e+00, 3.583548805160290e+00, 3.518542628018791e+00, 2.581389137602030e+00, 4.492288412421512e+00, 2.581389137602030e+00, 4.492288412421512e+00, 4.673334657654334e-01, 4.859900929963174e-01, 4.688478700529236e-01, 4.891941623519742e-01, 3.694686539889215e+00, 3.202533221304875e+00, 3.294226014695282e-01, 3.375173053055876e-01, 5.046988718231313e-01, 1.898117560906250e-01, 5.046988718231301e-01, 1.898117560906250e-01, 7.816380567213804e-04, 8.825526079473846e-04, 8.582404786665239e-04, 9.848419937014486e-04, 2.628817741836348e-02, 2.928059173641078e-02, 2.825160911011799e-04, 2.731810308910861e-04, 6.221011335052926e-04, 2.014849823706194e-04, 6.221011335052928e-04, 2.014849823706203e-04, 1.013141932589366e+02, 1.012519575677984e+02, 1.016950838052279e+02, 1.016193303261051e+02, 1.013337917250661e+02, 1.012635001022649e+02, 1.016604619903863e+02, 1.015971282479291e+02, 1.015090487470502e+02, 1.014354677340772e+02, 1.015090487470502e+02, 1.014354677340772e+02, 3.350544110749633e+01, 3.350378966457788e+01, 3.335040557458925e+01, 3.334768095563204e+01, 3.476812095604184e+01, 3.439410262998076e+01, 3.464833161038393e+01, 3.428108882957748e+01, 3.246837479983948e+01, 3.328603035638288e+01, 3.246837479983948e+01, 3.328603035638288e+01, 1.267464980429338e+00, 1.259293951931942e+00, 2.303951795474571e+00, 2.335881256383193e+00, 1.152247117379072e+00, 1.169517878190182e+00, 1.516623666056518e+00, 1.594070239525731e+00, 1.318947048888161e+00, 1.201429638476170e+00, 1.318947048888163e+00, 1.201429638476168e+00, 1.766377840259273e-01, 1.796040340489461e-01, 5.462507971594782e-01, 5.505449585117401e-01, 1.461063179632294e-01, 1.611618147297620e-01, 2.157544151825225e+01, 2.157037277918435e+01, 2.235805698476559e-01, 2.426597824736450e-01, 2.235805698476559e-01, 2.426597824736450e-01, 1.590023185638369e-04, 1.717263328216005e-04, 2.615480024961939e-04, 2.695253336520605e-04, 1.462421329144892e-04, 1.640135633956201e-04, 7.125701720242687e-02, 7.215148675451544e-02, 1.525596297517843e-04, 2.876972431696033e-04, 1.525596297517842e-04, 2.876972431696034e-04, 2.547475496649982e+00, 2.574009844211409e+00, 1.987845172419615e+00, 2.019936946985262e+00, 2.191199833624883e+00, 2.224201270681278e+00, 2.363059488576635e+00, 2.391993205175256e+00, 2.277916577643399e+00, 2.308926832138864e+00, 2.277916577643399e+00, 2.308926832138864e+00, 2.495380488889620e+00, 2.512207362181033e+00, 1.477054338128023e+00, 1.470827653558735e+00, 1.106531162568759e+00, 1.101312013921072e+00, 1.038365673940462e+00, 1.048234521394295e+00, 9.963753088469526e-01, 1.001317768617554e+00, 9.963753088469526e-01, 1.001317768617554e+00, 2.415130743489450e+00, 2.471326975806549e+00, 7.820533997398129e-01, 7.875645287478663e-01, 9.456791377227410e-01, 9.485987186841465e-01, 8.516416545728838e-01, 8.521392036169506e-01, 9.616857094400202e-01, 9.553455231395352e-01, 9.616857094400201e-01, 9.553455231395348e-01, 1.288827120311794e+00, 1.275331658444468e+00, 2.533406878331846e-02, 2.567853493707849e-02, 4.549500806316797e-02, 4.852433251380294e-02, 5.777651185819760e-01, 5.722519590912114e-01, 1.077385996754410e-01, 1.186307494260810e-01, 1.077385996754411e-01, 1.186307494260807e-01, 1.598880642457183e-03, 1.716817794456704e-03, 1.893312955126085e-05, 1.901966183030996e-05, 7.838541555289071e-05, 8.866904542026376e-05, 9.907462685550859e-02, 1.022140533518760e-01, 1.368732471867914e-04, 2.417047817913009e-04, 1.368732471867913e-04, 2.417047817913005e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_pbe3_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_pbe3", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.554573745599846e-05, 0.000000000000000e+00, 1.554581524266059e-05, 1.554580904822252e-05, 0.000000000000000e+00, 1.554586712292537e-05, 1.554571107143417e-05, 0.000000000000000e+00, 1.554581825569433e-05, 1.554491046616920e-05, 0.000000000000000e+00, 1.554479505947444e-05, 1.554579666792573e-05, 0.000000000000000e+00, 1.554496379343178e-05, 1.554579666792573e-05, 0.000000000000000e+00, 1.554496379343178e-05, 2.996084617702079e-03, 0.000000000000000e+00, 2.998981503009618e-03, 2.996403879295816e-03, 0.000000000000000e+00, 2.999494827683430e-03, 3.006108636905779e-03, 0.000000000000000e+00, 3.008601524098182e-03, 2.987841598857991e-03, 0.000000000000000e+00, 2.990764882148362e-03, 2.996494104271543e-03, 0.000000000000000e+00, 2.999131126091305e-03, 2.996494104271543e-03, 0.000000000000000e+00, 2.999131126091305e-03, 2.529935472121423e-01, 0.000000000000000e+00, 2.655337743156359e-01, 2.489709017842661e-01, 0.000000000000000e+00, 2.642083889938894e-01, 2.012014037899316e-01, 0.000000000000000e+00, 1.850566909121552e-01, 1.890618395895447e-01, 0.000000000000000e+00, 1.944195263796424e-01, 2.837143640556810e-01, 0.000000000000000e+00, 1.204370501406997e-01, 2.837143640556810e-01, 0.000000000000000e+00, 1.204370501406997e-01, 1.752087025824361e+00, 0.000000000000000e+00, 1.879608562024566e+00, 1.881769630249106e+00, 0.000000000000000e+00, 2.027907046588128e+00, 1.723085588295952e-01, 0.000000000000000e+00, 1.959680015295790e-01, 1.025402883704046e+00, 0.000000000000000e+00, 1.018865990956406e+00, 1.616927510218811e+00, 0.000000000000000e+00, 7.486596803048432e-01, 1.616927510218807e+00, 0.000000000000000e+00, 7.486596803048439e-01, 5.722880305456782e-02, 0.000000000000000e+00, 6.022008177864163e-02, 6.320477752052375e-02, 0.000000000000000e+00, 6.738741287932308e-02, 2.064386348618426e-01, 0.000000000000000e+00, 2.207806286666522e-01, 3.146275735051166e-02, 0.000000000000000e+00, 3.009751878917881e-02, 5.094393988181436e-02, 0.000000000000000e+00, 7.349115044727988e-02, 5.094393988154453e-02, 0.000000000000000e+00, 7.349115044573402e-02, 1.163653399571853e-03, 0.000000000000000e+00, 1.164456436231412e-03, 1.163786120092785e-03, 0.000000000000000e+00, 1.164589517703116e-03, 1.163655784608901e-03, 0.000000000000000e+00, 1.164457155708480e-03, 1.163771145229356e-03, 0.000000000000000e+00, 1.164579139777348e-03, 1.163736932400063e-03, 0.000000000000000e+00, 1.164533686050111e-03, 1.163736932400063e-03, 0.000000000000000e+00, 1.164533686050111e-03, 6.582427567604668e-03, 0.000000000000000e+00, 6.582866799436506e-03, 6.643780988222429e-03, 0.000000000000000e+00, 6.644282138961835e-03, 6.168785179767027e-03, 0.000000000000000e+00, 6.290125535227036e-03, 6.223579990708707e-03, 0.000000000000000e+00, 6.341272388453724e-03, 6.931430283343417e-03, 0.000000000000000e+00, 6.660185747353703e-03, 6.931430283343417e-03, 0.000000000000000e+00, 6.660185747353703e-03, 6.844850813364618e-01, 0.000000000000000e+00, 6.910920326831348e-01, 4.450808647373388e-01, 0.000000000000000e+00, 4.294424927305691e-01, 8.155872755199084e-01, 0.000000000000000e+00, 7.797861299918066e-01, 8.546944454855959e-01, 0.000000000000000e+00, 7.872208478037582e-01, 6.531777297707858e-01, 0.000000000000000e+00, 7.450797392590165e-01, 6.531777297707850e-01, 0.000000000000000e+00, 7.450797392590164e-01, 5.192633196427765e-01, 0.000000000000000e+00, 5.388061856343292e-01, 7.618076185529031e-01, 0.000000000000000e+00, 7.637232297496590e-01, 5.025754104959756e-01, 0.000000000000000e+00, 5.310017073864267e-01, 1.488654638272640e-02, 0.000000000000000e+00, 1.487476686056399e-02, 7.577142914429973e-01, 0.000000000000000e+00, 1.100728651290529e+00, 7.577142914429973e-01, 0.000000000000000e+00, 1.100728651290529e+00, 3.312538465759293e-02, 0.000000000000000e+00, 2.979638009724198e-02, 3.659414001938335e-02, 0.000000000000000e+00, 3.429760393142582e-02, 1.559116061138217e-01, 0.000000000000000e+00, 1.837174391686141e-01, 4.454323373220525e-01, 0.000000000000000e+00, 4.313240883000106e-01, 7.916418932947686e-02, 0.000000000000000e+00, 1.068633876601454e-01, 7.916418933050505e-02, 0.000000000000000e+00, 1.068633876604593e-01, -2.895119432330736e-01, 0.000000000000000e+00, -3.089574159793191e-01, 5.389662009939465e-01, 0.000000000000000e+00, 5.191765287787031e-01, 3.447241950665945e-01, 0.000000000000000e+00, 3.221968335899869e-01, 1.128888243048117e-01, 0.000000000000000e+00, 9.365546363449806e-02, 2.380580170974139e-01, 0.000000000000000e+00, 2.168866778247867e-01, 2.380580170974139e-01, 0.000000000000000e+00, 2.168866778247867e-01, -8.507573160998170e-01, 0.000000000000000e+00, -8.472952375452991e-01, 6.768374692022534e-01, 0.000000000000000e+00, 6.780297962914067e-01, 8.785940204412731e-01, 0.000000000000000e+00, 8.792956876208551e-01, 1.038776322277835e+00, 0.000000000000000e+00, 1.029788614994982e+00, 9.827285984735794e-01, 0.000000000000000e+00, 9.760199984040292e-01, 9.827285984735794e-01, 0.000000000000000e+00, 9.760199984040292e-01, 4.282291417778325e-01, 0.000000000000000e+00, 4.095997117685093e-01, 7.766734674358399e-01, 0.000000000000000e+00, 7.822146826531883e-01, 9.457738583961908e-01, 0.000000000000000e+00, 9.717390578286178e-01, 1.610201722366118e+00, 0.000000000000000e+00, 1.605397733687102e+00, 1.268117684784094e+00, 0.000000000000000e+00, 1.285275452943160e+00, 1.268117684784096e+00, 0.000000000000000e+00, 1.285275452943164e+00, 8.392652793084822e-01, 0.000000000000000e+00, 8.457724951447657e-01, 1.844309811846163e-01, 0.000000000000000e+00, 1.860577382244491e-01, 2.552984806450710e-01, 0.000000000000000e+00, 2.716780525302792e-01, 2.593127228876758e+00, 0.000000000000000e+00, 2.582598753904708e+00, 6.085946493770908e-01, 0.000000000000000e+00, 7.991916903243045e-01, 6.085946493770623e-01, 0.000000000000000e+00, 7.991916903243330e-01, 6.499792070443280e-02, 0.000000000000000e+00, 6.878412619274415e-02, 3.515390775691941e-02, 0.000000000000000e+00, 6.241446439501748e-02, 4.415826859985933e-02, 0.000000000000000e+00, 5.000135829584323e-02, 6.449049435296070e-01, 0.000000000000000e+00, 6.457464887548601e-01, 1.546331611487384e-01, 0.000000000000000e+00, 1.016607788074324e-01, 1.546331611495217e-01, 0.000000000000000e+00, 1.016607788078380e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
