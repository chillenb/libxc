
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_rational_p_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_rational_p", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([1.693929720123066e+03, 1.693948567318309e+03, 1.694020196735752e+03, 1.693740043075275e+03, 1.693888564790858e+03, 1.693888564790858e+03, 4.186742069926254e+01, 4.186971087315827e+01, 4.192472747883500e+01, 4.184499529897353e+01, 4.187219602655463e+01, 4.187219602655463e+01, 1.328391774333605e+00, 1.319409406316807e+00, 1.101633180211815e+00, 1.126939856623703e+00, 1.153928524159253e+00, 1.153928524159253e+00, 3.706714390507931e-02, 4.058025396835650e-02, 1.886519718319529e+00, 9.781093615505634e-03, 3.301664622608202e-02, 3.301664622608199e-02, 3.335217411297714e-09, 4.514125800192962e-09, 1.512700837288810e-05, 1.962034043377248e-10, 1.366963714382680e-09, 1.366963714382682e-09, 1.060092399617796e+02, 1.061677757093191e+02, 1.060161170171168e+02, 1.061560775047229e+02, 1.060898184824525e+02, 1.060898184824525e+02, 9.626281537780063e+00, 9.877013659888622e+00, 9.279191799218655e+00, 9.495891489666850e+00, 9.937895647698056e+00, 9.937895647698056e+00, 1.234078142606018e+00, 1.722340949082164e+00, 1.027088010783182e+00, 1.319842056033028e+00, 1.309275622692736e+00, 1.309275622692736e+00, 1.524535615544672e-03, 2.330091548253078e-02, 1.108207187036293e-03, 1.568090347097057e+01, 4.299245673861728e-03, 4.299245673861728e-03, 6.611063147817228e-11, 1.975630732591554e-10, 2.096557390712367e-10, 1.908529006463561e-04, 4.178057531676846e-10, 4.178057531676842e-10, 1.539702627572946e+00, 1.461415619528411e+00, 1.488442642076804e+00, 1.511204839920630e+00, 1.499774605649589e+00, 1.499774605649589e+00, 1.475209794577912e+00, 7.238495178426383e-01, 9.062757303383820e-01, 1.116112803887992e+00, 1.006945756662870e+00, 1.006945756662870e+00, 1.880855092962683e+00, 5.497584970926818e-02, 1.142052059966031e-01, 3.394641846954114e-01, 2.023712056736672e-01, 2.023712056736672e-01, 6.074334800146906e-01, 1.114277463953525e-05, 5.354490815342470e-05, 3.568287957683624e-01, 7.392626939330757e-04, 7.392626939330762e-04, 1.572269158263554e-08, 9.170549577578645e-13, 2.149720366420831e-11, 5.251332135029387e-04, 2.937155898044783e-10, 2.937155898044775e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_rational_p_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_rational_p", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.667648528780418e+03, 3.667638936072163e+03, 3.667670384540454e+03, 3.667654814613309e+03, 3.667747446372289e+03, 3.667763238627553e+03, 3.667500431511311e+03, 3.667448452931010e+03, 3.667661203432367e+03, 3.667579538755183e+03, 3.667661203432367e+03, 3.667579538755183e+03, 9.732909695855922e+01, 9.732773976946439e+01, 9.732986905100141e+01, 9.732821498506071e+01, 9.734552470604265e+01, 9.735072833858378e+01, 9.734967554687515e+01, 9.735388141842844e+01, 9.729603352286948e+01, 9.737166172108475e+01, 9.729603352286948e+01, 9.737166172108475e+01, 3.511900058419036e+00, 3.557563495284444e+00, 3.494575058473518e+00, 3.550938072128734e+00, 3.252236963666242e+00, 3.163429586419273e+00, 3.255148623858205e+00, 3.283977490755061e+00, 3.636000474693075e+00, 2.762286599109244e+00, 3.636000474693075e+00, 2.762286599109244e+00, 1.366052647146455e-01, 1.576259571337512e-01, 1.456511660777106e-01, 1.705667981235010e-01, 4.646887270169849e+00, 5.041754873862250e+00, 4.460190154221581e-02, 4.666868183302496e-02, 1.516901692689648e-01, 1.154512676722816e-02, 1.516901692689646e-01, 1.154512676722818e-02, 1.590021658468336e-08, 2.138112415613917e-08, 2.089327072171422e-08, 2.936461919277487e-08, 7.206108651661784e-05, 9.513362399252746e-05, 1.168218003133659e-09, 1.052128368549089e-09, 8.971754019673606e-09, 1.076183464984184e-09, 8.971754019673623e-09, 1.076183464984187e-09, 2.165188480401109e+02, 2.164169799639410e+02, 2.165538658603086e+02, 2.164508119421522e+02, 2.165214415064860e+02, 2.164186040536716e+02, 2.165514908389449e+02, 2.164493398212551e+02, 2.165363605151865e+02, 2.164339528889875e+02, 2.165363605151865e+02, 2.164339528889875e+02, 2.856448193121573e+01, 2.856124730839385e+01, 2.911537747778588e+01, 2.909652576432993e+01, 2.786359307308419e+01, 2.806570380732821e+01, 2.834276667240241e+01, 2.854763602445691e+01, 2.938106180926405e+01, 2.891360688724640e+01, 2.938106180926405e+01, 2.891360688724640e+01, 2.779257945106986e+00, 2.764535150913655e+00, 3.171421057138629e+00, 3.171939578791761e+00, 2.285002060063285e+00, 2.458031429687931e+00, 2.423919414496602e+00, 2.589744875976408e+00, 3.002904288634705e+00, 2.712438757524092e+00, 3.002904288634706e+00, 2.712438757524093e+00, 7.677612901641351e-03, 8.158438221424341e-03, 1.024059803632714e-01, 1.042668108056423e-01, 5.062271197581645e-03, 6.452507145820482e-03, 2.873956875314411e+01, 2.871261367910950e+01, 1.630564056262320e-02, 2.505591149751543e-02, 1.630564056262320e-02, 2.505591149751543e-02, 3.579643714318681e-10, 3.893924535072878e-10, 1.110614845180280e-09, 1.127666970885710e-09, 9.574545610773888e-10, 1.381631509758557e-09, 1.037803773147270e-03, 1.040548244482053e-03, 6.301085582441998e-10, 3.037376900897123e-09, 6.301085582441985e-10, 3.037376900897121e-09, 2.650793047234811e+00, 2.670375482127293e+00, 2.669513474214628e+00, 2.689088028137699e+00, 2.664563863317055e+00, 2.684074946754861e+00, 2.659065050586476e+00, 2.678663267687994e+00, 2.661958922355802e+00, 2.681511658327607e+00, 2.661958922355802e+00, 2.681511658327607e+00, 2.493605964930763e+00, 2.509981822218373e+00, 1.900708629470422e+00, 1.919437034657242e+00, 2.128055324514095e+00, 2.147657055731393e+00, 2.315185595088091e+00, 2.331016542623761e+00, 2.226365457184921e+00, 2.242802822005149e+00, 2.226365457184921e+00, 2.242802822005149e+00, 3.490572108014041e+00, 3.498127688557963e+00, 2.213353121811598e-01, 2.259864941407169e-01, 4.068330702115385e-01, 4.217585147075804e-01, 9.309047429529969e-01, 9.425339045319268e-01, 6.442059699059545e-01, 6.452520557220579e-01, 6.442059699059540e-01, 6.452520557220576e-01, 1.602032623468324e+00, 1.627977505464463e+00, 6.128522374325735e-05, 6.347431355873168e-05, 2.685346466691030e-04, 3.220500398591210e-04, 8.813461621940478e-01, 9.101217425313120e-01, 3.084736624416723e-03, 4.580566348573816e-03, 3.084736624416725e-03, 4.580566348573817e-03, 8.001002357540628e-08, 9.710223132320682e-08, 4.067782099755516e-12, 6.317509338113372e-12, 9.880142206346374e-11, 1.409288685387527e-10, 2.701463074374587e-03, 2.885333505182755e-03, 8.266848836337515e-10, 2.020723158485006e-09, 8.266848836337490e-10, 2.020723158485000e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_rational_p_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_rational_p", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.275902930646070e-06, 0.000000000000000e+00, -4.275923104444870e-06, -4.275907309666013e-06, 0.000000000000000e+00, -4.275926258901657e-06, -4.275851860154469e-06, 0.000000000000000e+00, -4.275866250097537e-06, -4.275804170068862e-06, 0.000000000000000e+00, -4.275804899336166e-06, -4.275909049844454e-06, 0.000000000000000e+00, -4.275778338608203e-06, -4.275909049844454e-06, 0.000000000000000e+00, -4.275778338608203e-06, -8.815525035993998e-04, 0.000000000000000e+00, -8.820600960547594e-04, -8.816032704067671e-04, 0.000000000000000e+00, -8.821460151613256e-04, -8.831900280630387e-04, 0.000000000000000e+00, -8.835908910000172e-04, -8.800140595961512e-04, 0.000000000000000e+00, -8.804951174086679e-04, -8.818089576636250e-04, 0.000000000000000e+00, -8.818393087784380e-04, -8.818089576636250e-04, 0.000000000000000e+00, -8.818393087784380e-04, -9.320248933301842e-02, 0.000000000000000e+00, -9.526494822872114e-02, -9.255329859948466e-02, 0.000000000000000e+00, -9.508157582785870e-02, -8.405458808757099e-02, 0.000000000000000e+00, -8.062236836206832e-02, -8.063180614136566e-02, 0.000000000000000e+00, -8.177087299057782e-02, -9.783302782582950e-02, 0.000000000000000e+00, -6.297717107128392e-02, -9.783302782582950e-02, 0.000000000000000e+00, -6.297717107128392e-02, -1.243460356105991e+00, 0.000000000000000e+00, -1.294279179348637e+00, -1.312824318764804e+00, 0.000000000000000e+00, -1.363661531691892e+00, -6.259570892415521e-02, 0.000000000000000e+00, -6.431167413336907e-02, -7.986834506641203e-01, 0.000000000000000e+00, -7.936252346586203e-01, -1.138815895952407e+00, 0.000000000000000e+00, -5.422426141779415e-01, -1.138815895952406e+00, 0.000000000000000e+00, -5.422426141779427e-01, -3.657401258675367e-03, 0.000000000000000e+00, -4.078866188661294e-03, -4.287941339528882e-03, 0.000000000000000e+00, -4.890524298938725e-03, -6.581725079587389e-02, 0.000000000000000e+00, -7.423669525258751e-02, -1.183094668571108e-03, 0.000000000000000e+00, -1.105282585972292e-03, -2.903701271249243e-03, 0.000000000000000e+00, -3.009415996424476e-03, -2.903701271249252e-03, 0.000000000000000e+00, -3.009415996424483e-03, -3.217736310121672e-04, 0.000000000000000e+00, -3.219799768913601e-04, -3.222084605155028e-04, 0.000000000000000e+00, -3.224006065455329e-04, -3.217941163905005e-04, 0.000000000000000e+00, -3.219918010071409e-04, -3.221672762268388e-04, 0.000000000000000e+00, -3.223739636879719e-04, -3.219992909754866e-04, 0.000000000000000e+00, -3.221917976996986e-04, -3.219992909754866e-04, 0.000000000000000e+00, -3.221917976996986e-04, -2.900986745311598e-03, 0.000000000000000e+00, -2.901276871548392e-03, -2.892145430522426e-03, 0.000000000000000e+00, -2.893212333467235e-03, -2.807953333066230e-03, 0.000000000000000e+00, -2.836253502894904e-03, -2.802639310461384e-03, 0.000000000000000e+00, -2.829111655226690e-03, -2.961931013768281e-03, 0.000000000000000e+00, -2.906847160998273e-03, -2.961931013768281e-03, 0.000000000000000e+00, -2.906847160998273e-03, -1.937073580822044e-01, 0.000000000000000e+00, -1.954560449294921e-01, -2.005273353625400e-01, 0.000000000000000e+00, -2.009010583578797e-01, -2.420747226060610e-01, 0.000000000000000e+00, -2.253880172633898e-01, -2.927628083143233e-01, 0.000000000000000e+00, -2.643108215332961e-01, -1.804635091181181e-01, 0.000000000000000e+00, -2.072319405337898e-01, -1.804635091181181e-01, 0.000000000000000e+00, -2.072319405337898e-01, -3.540391860416570e-01, 0.000000000000000e+00, -3.705573397424372e-01, -5.851879487254502e-01, 0.000000000000000e+00, -5.860857962024464e-01, -3.267731907329332e-01, 0.000000000000000e+00, -3.560653353779764e-01, -7.388087914378177e-03, 0.000000000000000e+00, -7.399289477000581e-03, -5.635836990652814e-01, 0.000000000000000e+00, -8.484926568106080e-01, -5.635836990652814e-01, 0.000000000000000e+00, -8.484926568106080e-01, -1.017237378495423e-03, 0.000000000000000e+00, -9.171966704385018e-04, -1.388273980694986e-03, 0.000000000000000e+00, -1.294748521193467e-03, -6.832274610035131e-03, 0.000000000000000e+00, -8.755608001047825e-03, -2.333981496510169e-01, 0.000000000000000e+00, -2.254002370179040e-01, -2.975659893592748e-03, 0.000000000000000e+00, -5.490431683929431e-03, -2.975659893592738e-03, 0.000000000000000e+00, -5.490431683929422e-03, -2.742773012744765e-01, 0.000000000000000e+00, -2.714309381676569e-01, -2.606536540066381e-01, 0.000000000000000e+00, -2.581568275030119e-01, -2.653298101223538e-01, 0.000000000000000e+00, -2.627443630886350e-01, -2.693309282514960e-01, 0.000000000000000e+00, -2.665842220499232e-01, -2.673231751294005e-01, 0.000000000000000e+00, -2.646554506941362e-01, -2.673231751294005e-01, 0.000000000000000e+00, -2.646554506941362e-01, -3.038490347154588e-01, 0.000000000000000e+00, -3.009045650073012e-01, -2.432672337486701e-01, 0.000000000000000e+00, -2.421142108926320e-01, -2.643271688923783e-01, 0.000000000000000e+00, -2.629287279295071e-01, -2.840159160916283e-01, 0.000000000000000e+00, -2.816912349653393e-01, -2.751647425140989e-01, 0.000000000000000e+00, -2.728823696457601e-01, -2.751647425140989e-01, 0.000000000000000e+00, -2.728823696457601e-01, -1.723291893199902e-01, 0.000000000000000e+00, -1.723443838979056e-01, -5.558800287508453e-01, 0.000000000000000e+00, -5.578641168637813e-01, -5.864868808701431e-01, 0.000000000000000e+00, -5.940812053368459e-01, -6.256596321955042e-01, 0.000000000000000e+00, -6.201917058470389e-01, -6.342497284440313e-01, 0.000000000000000e+00, -6.400654519978600e-01, -6.342497284440316e-01, 0.000000000000000e+00, -6.400654519978602e-01, -3.065740918515543e-01, 0.000000000000000e+00, -3.051266187804836e-01, -5.653024496532737e-02, 0.000000000000000e+00, -5.741885769616108e-02, -1.031002058372036e-01, 0.000000000000000e+00, -1.136389115672108e-01, -8.628938812351121e-01, 0.000000000000000e+00, -8.437677179106321e-01, -3.789248748243263e-01, 0.000000000000000e+00, -5.318688799668513e-01, -3.789248748243268e-01, 0.000000000000000e+00, -5.318688799668516e-01, -5.602552001031916e-03, 0.000000000000000e+00, -6.174875491810265e-03, -4.934228230922094e-04, 0.000000000000000e+00, -1.012960762493010e-03, -1.117733429294525e-03, 0.000000000000000e+00, -1.367295956079171e-03, -3.969265869710981e-01, 0.000000000000000e+00, -4.007182671655664e-01, -6.596691352136910e-03, 0.000000000000000e+00, -4.832742938898082e-03, -6.596691352136914e-03, 0.000000000000000e+00, -4.832742938898087e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
