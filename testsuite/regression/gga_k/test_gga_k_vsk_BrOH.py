
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_vsk_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_vsk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.173552654430526e+03, 2.173560485912277e+03, 2.173607129133842e+03, 2.173478653594628e+03, 2.173556686643763e+03, 2.173556686643763e+03, 5.868498651396010e+01, 5.868459231217265e+01, 5.867860799661536e+01, 5.871382314870930e+01, 5.868528374268826e+01, 5.868528374268826e+01, 2.276993021814159e+00, 2.275579442109510e+00, 2.256665844469347e+00, 2.285927085484785e+00, 2.276459060717137e+00, 2.276459060717137e+00, 2.226626815967119e-01, 2.216731078912894e-01, 3.158451280055499e+00, 3.017267854997454e-01, 2.222111659257393e-01, 2.222111659257393e-01, 5.014132004062519e-01, 5.004935700379316e-01, 7.191535218028788e-01, 5.980954909881381e-01, 4.910549436076871e-01, 4.910549436076871e-01, 1.273440338403546e+02, 1.273541075462888e+02, 1.273452901043381e+02, 1.273531190371365e+02, 1.273488713718842e+02, 1.273488713718842e+02, 2.047929822750666e+01, 2.068819014425718e+01, 2.047790349445528e+01, 2.063884062307338e+01, 2.062797343622647e+01, 2.062797343622647e+01, 1.618022236230541e+00, 1.829052926680779e+00, 1.462644508033274e+00, 1.531117878343640e+00, 1.731951265612558e+00, 1.731951265612558e+00, 5.807599615857972e-01, 3.536133935729446e-01, 5.200894121762567e-01, 1.692374799218342e+01, 3.778172863858726e-01, 3.778172863858726e-01, 5.807108952158494e-01, 5.799584073743081e-01, 3.428241051943322e-01, 6.417981777614096e-01, 4.771938390036717e-01, 4.771938390036719e-01, 1.632802146594140e+00, 1.629956279424711e+00, 1.630982004763350e+00, 1.631759564943941e+00, 1.631368572125904e+00, 1.631368572125904e+00, 1.527414239571507e+00, 1.265775667851403e+00, 1.335394238711066e+00, 1.404674599343012e+00, 1.368368242670213e+00, 1.368368242670213e+00, 2.013571681636942e+00, 3.961734454384916e-01, 4.551492877752299e-01, 6.290574589962727e-01, 5.247632936200012e-01, 5.247632936200012e-01, 1.037470522174991e+00, 7.986270650566287e-01, 7.423960109294221e-01, 5.424535249452367e-01, 5.056343093461747e-01, 5.056343093461739e-01, 5.779406849698734e-01, 4.426606385592263e-01, 4.769248999415617e-01, 4.533892104079311e-01, 3.949292048374807e-01, 3.949292048374811e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_vsk_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_vsk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.341811031959305e+03, 3.341830083780717e+03, 3.341922936496593e+03, 3.341610798794707e+03, 3.341821013557767e+03, 3.341821013557767e+03, 8.741723832142128e+01, 8.741832633384070e+01, 8.745539327648204e+01, 8.742853910497425e+01, 8.741854270791798e+01, 8.741854270791798e+01, 3.051700654000740e+00, 3.040307463385774e+00, 2.696952796339200e+00, 2.752743791669261e+00, 3.047577976342768e+00, 3.047577976342768e+00, 7.783218949299173e-02, 1.056508053075719e-01, 4.541191959918783e+00, -7.238664909625931e-01, 8.682340146767877e-02, 8.682340146767877e-02, -5.004165502597901e-01, -4.994467751386399e-01, -7.869174178438104e-01, -5.977865431040635e-01, -4.900288839604027e-01, -4.900288839604027e-01, 2.001345107768887e+02, 2.002409917465696e+02, 2.001455515873897e+02, 2.002283451509499e+02, 2.001889144702854e+02, 2.001889144702854e+02, 2.463396562955153e+01, 2.514536822201336e+01, 2.425535854887936e+01, 2.466030085621111e+01, 2.544858819332024e+01, 2.544858819332024e+01, 2.452681468996711e+00, 2.975051626263531e+00, 2.202185262168070e+00, 2.457369119736061e+00, 2.658316373261101e+00, 2.658316373261101e+00, -1.393163036112014e+00, -4.619085672767309e-01, -1.286682694573590e+00, 2.752234897482436e+01, -1.047349229546859e+00, -1.047349229546859e+00, -5.804226480691823e-01, -5.795887446421759e-01, -3.426156367670654e-01, -9.130277827150434e-01, -4.768871596841443e-01, -4.768871596841454e-01, 2.702141310894219e+00, 2.659003153783171e+00, 2.674419706707155e+00, 2.686357956633051e+00, 2.680381092175569e+00, 2.680381092175569e+00, 2.533730008316729e+00, 1.779819604128127e+00, 1.997761497361854e+00, 2.199366614466259e+00, 2.096849629847961e+00, 2.096849629847961e+00, 3.267868189103230e+00, -2.888423611053675e-02, 3.473837956397207e-01, 8.470233932486197e-01, 6.009324479207728e-01, 6.009324479207727e-01, 1.437114622418731e+00, -8.399732442740109e-01, -9.089902193532248e-01, 7.826907152938507e-01, -1.074238587888943e+00, -1.074238587888942e+00, -5.766847072774423e-01, -4.426309746315374e-01, -4.768196585037531e-01, -9.701661835944020e-01, -3.947054696558622e-01, -3.947054696558621e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_vsk_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_vsk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [7.109314053254100e-07, 7.109259546902236e-07, 7.108982223358476e-07, 7.109875511337777e-07, 7.109285593969251e-07, 7.109285593969251e-07, 1.663060078709188e-04, 1.663036713480506e-04, 1.662191419814842e-04, 1.662593118099743e-04, 1.663026807646795e-04, 1.663026807646795e-04, 2.528096014124805e-02, 2.542261861552485e-02, 3.025718644798009e-02, 2.936775378990433e-02, 2.533206932939002e-02, 2.533206932939002e-02, 2.283094527745812e+00, 2.053017462857648e+00, 1.396367370712670e-02, 1.844303886723365e+01, 2.208660909345546e+00, 2.208660909345546e+00, 5.965410187177781e+04, 5.190994975482117e+04, 7.911620089295862e+02, 5.402259275581815e+05, 5.356719243065800e+04, 5.356719243065800e+04, 4.903857921976838e-05, 4.901218263827262e-05, 4.903579099834308e-05, 4.901526659516206e-05, 4.902514844495908e-05, 4.902514844495908e-05, 1.096893397476502e-03, 1.064746329636751e-03, 1.120541794616378e-03, 1.094283106296330e-03, 1.047096863949332e-03, 1.047096863949332e-03, 3.556441661632245e-02, 2.771241527873848e-02, 4.171274918249393e-02, 3.653580780308633e-02, 3.166520170793897e-02, 3.166520170793897e-02, 7.549341640509830e+01, 4.439104015771666e+00, 7.759097040014495e+01, 9.847425858912190e-04, 4.051744015829694e+01, 4.051744015829694e+01, 6.017497807417492e+05, 4.031486102221419e+05, 9.575049249661959e+05, 3.076672262931623e+02, 5.329523506515217e+05, 5.329523506515219e+05, 3.250850185493964e-02, 3.287759983992844e-02, 3.273891397562663e-02, 3.263694832145708e-02, 3.268747693913313e-02, 3.268747693913314e-02, 3.588399690726369e-02, 5.681713717028959e-02, 4.819004018457219e-02, 4.247853302721695e-02, 4.517048137641278e-02, 4.517048137641278e-02, 2.402860951687739e-02, 1.372123111441844e+00, 5.322233219307827e-01, 1.728934762692806e-01, 2.857658708623358e-01, 2.857658708623360e-01, 7.826475608813042e-02, 9.871164013084619e+02, 4.109272349369539e+02, 1.952242759591032e-01, 1.439989308914126e+02, 1.439989308914125e+02, 3.705915796330878e+04, 1.964459405204082e+07, 2.865711467760568e+06, 1.657674795262689e+02, 8.682273891534308e+05, 8.682273891534351e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
