
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_perdew_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_perdew", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.174762709709141e+03, 2.174770512752269e+03, 2.174817083041309e+03, 2.174689072045931e+03, 2.174766726474013e+03, 2.174766726474013e+03, 5.872616148069218e+01, 5.872576544273754e+01, 5.871973216654631e+01, 5.875504687281974e+01, 5.872645811643073e+01, 5.872645811643073e+01, 2.275356325674182e+00, 2.273736654501763e+00, 2.244223147903602e+00, 2.274222862676849e+00, 2.274749224272444e+00, 2.274749224272444e+00, 2.064699885647032e-01, 2.083605201166797e-01, 3.160308496933938e+00, 1.549571396346249e-01, 2.069786924384527e-01, 2.069786924384527e-01, 5.624466944997629e-02, 5.618402942234119e-02, 8.950593678131365e-02, 6.668408979306716e-02, 5.512358998739438e-02, 5.512358998739438e-02, 1.273920338410870e+02, 1.274016028687135e+02, 1.273932397355751e+02, 1.274006762258382e+02, 1.273966107120900e+02, 1.273966107120900e+02, 2.037326895659779e+01, 2.059197809701628e+01, 2.035528383725219e+01, 2.052481149122410e+01, 2.054698578959100e+01, 2.054698578959100e+01, 1.619064637538580e+00, 1.829229579398388e+00, 1.463630307653304e+00, 1.531416737610323e+00, 1.732936401482259e+00, 1.732936401482259e+00, 1.325473338317137e-01, 2.534727990428163e-01, 1.244944657858323e-01, 1.692540257179040e+01, 1.340326651953730e-01, 1.340326651953730e-01, 6.474196896091451e-02, 6.468536522034500e-02, 3.823330390626325e-02, 9.332667160892161e-02, 5.322443025898174e-02, 5.322443025898177e-02, 1.632822868677886e+00, 1.630083854522820e+00, 1.631063227644619e+00, 1.631810820959366e+00, 1.631434128638444e+00, 1.631434128638444e+00, 1.527424153289503e+00, 1.266196466428852e+00, 1.336320416821364e+00, 1.405250019711269e+00, 1.369161860548512e+00, 1.369161860548512e+00, 2.013796084338256e+00, 3.490880641458514e-01, 4.396283998276675e-01, 6.286877600593782e-01, 5.206342301046569e-01, 5.206342301046567e-01, 1.037550233464098e+00, 9.664186870583340e-02, 9.890614261037932e-02, 5.427871069124706e-01, 9.964187634423237e-02, 9.964187634423230e-02, 6.492400987952472e-02, 4.929239199911680e-02, 5.312972979917788e-02, 9.001184404261584e-02, 4.403879148717494e-02, 4.403879148717495e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_perdew_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_perdew", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.340286316515406e+03, 3.340305287205933e+03, 3.340397879224111e+03, 3.340087069086156e+03, 3.340296254480881e+03, 3.340296254480881e+03, 8.745331232500104e+01, 8.745432194200164e+01, 8.748925676423072e+01, 8.746611564518497e+01, 8.745457669142289e+01, 8.745457669142289e+01, 3.095876715003794e+00, 3.086474909070049e+00, 2.834286680571409e+00, 2.884567723860086e+00, 3.092462678710270e+00, 3.092462678710270e+00, 1.955110395054956e-01, 2.043965885987566e-01, 4.554903835826759e+00, 5.633377149178075e-02, 1.982197762747791e-01, 1.982197762747791e-01, -5.499077269984481e-02, -5.480830560030452e-02, -6.677800283334220e-02, -6.639551370877991e-02, -5.377638962083074e-02, -5.377638962083074e-02, 2.000352443033193e+02, 2.001421533373733e+02, 2.000463268137035e+02, 2.001294530751112e+02, 2.000898667383822e+02, 2.000898667383822e+02, 2.582448848544784e+01, 2.625907040342377e+01, 2.557968315693556e+01, 2.591818909660036e+01, 2.643546293758413e+01, 2.643546293758413e+01, 2.452165756456628e+00, 2.974576338472414e+00, 2.202153611186567e+00, 2.456611032388552e+00, 2.657153914162859e+00, 2.657153914162859e+00, -1.849307030264152e-02, 1.542888261253105e-01, -1.334518541013932e-02, 2.751789932540026e+01, 1.847152076853162e-02, 1.847152076853162e-02, -6.447341399668007e-02, -6.433461214116339e-02, -3.803626560097951e-02, -4.915992059861935e-02, -5.293323381678677e-02, -5.293323381678685e-02, 2.702085269847910e+00, 2.658657870180762e+00, 2.674199042612981e+00, 2.686219043270130e+00, 2.680203121204320e+00, 2.680203121204319e+00, 2.533702875405529e+00, 1.789991239461755e+00, 1.998207324408636e+00, 2.198241077409294e+00, 2.095975975054468e+00, 2.095975975054468e+00, 3.267268207167752e+00, 2.959595109832086e-01, 4.702403160138683e-01, 8.584135288865899e-01, 6.426759304245832e-01, 6.426759304245823e-01, 1.448630748635155e+00, -7.714577460603973e-02, -6.317593373201261e-02, 7.847807001023702e-01, -2.450412618245274e-02, -2.450412618245255e-02, -6.320170055091913e-02, -4.926610060902408e-02, -5.303485426944894e-02, -2.162472238071684e-02, -4.382846756414427e-02, -4.382846756414443e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_perdew_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_perdew", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([7.198984778478507e-07, 7.198932354791459e-07, 7.198659883656664e-07, 7.199519133176860e-07, 7.198957454645775e-07, 7.198957454645775e-07, 1.668269759449511e-04, 1.668259255064472e-04, 1.667764604301837e-04, 1.667556370816754e-04, 1.668243037067618e-04, 1.668243037067618e-04, 2.368564880283088e-02, 2.375873894303945e-02, 2.576273167575525e-02, 2.516370037985024e-02, 2.371227194646763e-02, 2.371227194646763e-02, 1.156879371080839e+00, 1.111871421456649e+00, 1.375860125565356e-02, 3.035814231925622e+00, 1.143127619951718e+00, 1.143127619951718e+00, 6.640545301574645e+03, 5.778292504054507e+03, 8.605110907459812e+01, 6.014588293430209e+04, 5.962770860821815e+03, 5.962770860821815e+03, 4.976477310633114e-05, 4.973822633627154e-05, 4.976197133968602e-05, 4.974133087996760e-05, 4.975127789287572e-05, 4.975127789287572e-05, 9.389987463987596e-04, 9.194272644042485e-04, 9.470681819675530e-04, 9.315709776671901e-04, 9.155727761305609e-04, 9.155727761305609e-04, 3.589278149692621e-02, 2.800314062799880e-02, 4.200930029197363e-02, 3.702150816052688e-02, 3.205421796297750e-02, 3.205421796297750e-02, 7.654716776850605e+00, 1.132366179930285e+00, 7.956763151541069e+00, 9.951203336663907e-04, 4.950781602621250e+00, 4.950781602621250e+00, 6.699565412543934e+04, 4.488427043890942e+04, 1.066032422536673e+05, 3.176531977993125e+01, 5.933586967225394e+04, 5.933586967225394e+04, 3.266189900183902e-02, 3.319610124013071e-02, 3.300453048126494e-02, 3.285720958579401e-02, 3.293092337183467e-02, 3.293092337183498e-02, 3.601497453852811e-02, 5.518564850075316e-02, 4.842217799203041e-02, 4.310318697647064e-02, 4.571035961857636e-02, 4.571035961857621e-02, 2.429430336308187e-02, 5.691264825475826e-01, 3.397256230138834e-01, 1.625868613924104e-01, 2.349920048068364e-01, 2.349920048068367e-01, 7.521372774543628e-02, 1.083116049512055e+02, 4.365591325932321e+01, 1.927573842070556e-01, 1.431558606567966e+01, 1.431558606567964e+01, 4.125054379784622e+03, 2.187137492287550e+06, 3.190546571109140e+05, 1.648674515981507e+01, 9.666369634463989e+04, 9.666369634464035e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
