
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_apbeint_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_apbeint", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.176857424203106e+03, 2.176866379900649e+03, 2.176915053997861e+03, 2.176781629612395e+03, 2.176850281288824e+03, 2.176850281288824e+03, 5.877604218679821e+01, 5.877551550232855e+01, 5.876622358240257e+01, 5.880471122335118e+01, 5.877825421605108e+01, 5.877825421605108e+01, 2.279239212009421e+00, 2.276923673580619e+00, 2.227262180089195e+00, 2.260725352276077e+00, 2.261155241056972e+00, 2.261155241056972e+00, 1.838484953336857e-01, 1.875656151569798e-01, 3.070238586935683e+00, 1.181344685470731e-01, 1.762988150653472e-01, 1.762988150653472e-01, 2.984686699313483e-04, 3.310562001276190e-04, 9.913131050344630e-03, 9.917090168198103e-05, 1.985837955725088e-04, 1.985837955725088e-04, 1.275927946063105e+02, 1.276019624574812e+02, 1.275935711602698e+02, 1.276016584652303e+02, 1.275972443089007e+02, 1.275972443089007e+02, 2.019889072121233e+01, 2.043690820715620e+01, 2.011215612180909e+01, 2.032201926401243e+01, 2.037262322673604e+01, 2.037262322673604e+01, 1.657846799646854e+00, 1.872663204174284e+00, 1.433022502659366e+00, 1.479102570142344e+00, 1.706484623978177e+00, 1.706484623978177e+00, 6.244278322042075e-02, 1.977282063962033e-01, 5.410365235200254e-02, 1.696947029671455e+01, 8.211681754073678e-02, 8.211681754073678e-02, 5.912952582327290e-05, 9.476825397982518e-05, 5.561588818233588e-05, 2.530333652909450e-02, 8.920930219350383e-05, 8.920930219350386e-05, 1.584752250979883e+00, 1.582657882077774e+00, 1.583371955436593e+00, 1.583955440295378e+00, 1.583658026876111e+00, 1.583658026876111e+00, 1.495524983595451e+00, 1.224762387529300e+00, 1.297439773363105e+00, 1.371509417082809e+00, 1.332751942221889e+00, 1.332751942221889e+00, 2.061581179965327e+00, 2.975837590985017e-01, 4.013255247007720e-01, 6.200684046023792e-01, 4.967073400887944e-01, 4.967073400887944e-01, 1.040787332938187e+00, 9.066155887711539e-03, 1.668397617445461e-02, 5.584931915635314e-01, 3.988621750978616e-02, 3.988621750978617e-02, 5.924455013263260e-04, 6.770639806391873e-06, 2.997024538694164e-05, 3.538363871265762e-02, 7.505620721672175e-05, 7.505620721672160e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_apbeint_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_apbeint", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.341832647043836e+03, 3.341824284916833e+03, 3.341857304993512e+03, 3.341842196269250e+03, 3.341936354103920e+03, 3.341955422329141e+03, 3.341657883668614e+03, 3.341600489952801e+03, 3.341847345328861e+03, 3.341742484011182e+03, 3.341847345328861e+03, 3.341742484011182e+03, 8.776661510479558e+01, 8.776760952139584e+01, 8.776758821481368e+01, 8.776845890631390e+01, 8.778996156612548e+01, 8.779685693209808e+01, 8.777953784578280e+01, 8.778572476004361e+01, 8.773593053396985e+01, 8.780893564101980e+01, 8.773593053396985e+01, 8.780893564101980e+01, 3.204015359961784e+00, 3.233303041921278e+00, 3.192863744057564e+00, 3.228602638894083e+00, 3.051828737161294e+00, 3.009277726323401e+00, 3.074233508898430e+00, 3.087885910962875e+00, 3.289799898429801e+00, 2.886856829122097e+00, 3.289799898429801e+00, 2.886856829122097e+00, 2.249816455484060e-01, 2.386089726447558e-01, 2.281658434025992e-01, 2.443464071547080e-01, 4.230595909076823e+00, 4.545269373424277e+00, 1.551254824715655e-01, 1.587567401969438e-01, 2.441165911877434e-01, 9.512717946797776e-02, 2.441165911877433e-01, 9.512717946797775e-02, 4.643341525699894e-04, 5.242170712187790e-04, 5.097743142433981e-04, 5.848759067179347e-04, 1.522941565121418e-02, 1.691122991721626e-02, 1.679408052317177e-04, 1.623942432840666e-04, 3.696375871494685e-04, 1.197643012915192e-04, 3.696375871494686e-04, 1.197643012915192e-04, 2.001572657675875e+02, 2.000599434074437e+02, 2.002676067736918e+02, 2.001665090990141e+02, 2.001636368757575e+02, 2.000637778867764e+02, 2.002583130321090e+02, 2.001605856238517e+02, 2.002135938371337e+02, 2.001134331123191e+02, 2.002135938371337e+02, 2.001134331123191e+02, 2.728649050275667e+01, 2.728373775967494e+01, 2.768879954164962e+01, 2.767374115863343e+01, 2.695985129233642e+01, 2.704930489960860e+01, 2.730208263189192e+01, 2.739767767529755e+01, 2.776581146749200e+01, 2.752235685677588e+01, 2.776581146749200e+01, 2.752235685677588e+01, 2.515976678794019e+00, 2.502877325567632e+00, 3.036016518977664e+00, 3.039720019966516e+00, 2.059458347563162e+00, 2.219639569796969e+00, 2.294651213644586e+00, 2.448680874235207e+00, 2.731922009464546e+00, 2.463311867792249e+00, 2.731922009464546e+00, 2.463311867792251e+00, 9.097363083155124e-02, 9.218318293594438e-02, 2.546848626272843e-01, 2.566928630088289e-01, 7.653260837663937e-02, 8.352665177209012e-02, 2.758323850983252e+01, 2.755890311736879e+01, 1.103412446077556e-01, 1.163799235471854e-01, 1.103412446077556e-01, 1.163799235471854e-01, 9.452947835456045e-05, 1.020939984641329e-04, 1.554754168488034e-04, 1.602180484825123e-04, 8.692225076778594e-05, 9.747659814456499e-05, 3.927907843928845e-02, 3.979037582707278e-02, 9.068861858070795e-05, 1.709686796552282e-04, 9.068861858070795e-05, 1.709686796552283e-04, 2.606998293610232e+00, 2.627469086447238e+00, 2.560463854117909e+00, 2.581012394809475e+00, 2.576775178813130e+00, 2.597399973034059e+00, 2.590395017432840e+00, 2.610797813723931e+00, 2.583582409418651e+00, 2.604092036597143e+00, 2.583582409418651e+00, 2.604092036597143e+00, 2.473633149825084e+00, 2.490050687564756e+00, 1.727879096360781e+00, 1.743425959024417e+00, 1.916874467118138e+00, 1.934989928382681e+00, 2.128586512824554e+00, 2.144032875431082e+00, 2.019041784037951e+00, 2.034533080023411e+00, 2.019041784037951e+00, 2.034533080023411e+00, 3.329153844180043e+00, 3.341620394379826e+00, 3.746208248924082e-01, 3.780402052429929e-01, 5.057067322012750e-01, 5.140736643581194e-01, 8.576555268648549e-01, 8.673213442454074e-01, 6.538613996840560e-01, 6.532343880769242e-01, 6.538613996840560e-01, 6.532343880769241e-01, 1.459691530796571e+00, 1.480696127372929e+00, 1.470674006916069e-02, 1.490161137847187e-02, 2.591762290742222e-02, 2.755105045302605e-02, 7.951846272241292e-01, 8.203191806390608e-01, 5.717925021578391e-02, 6.165110180608190e-02, 5.717925021578389e-02, 6.165110180608192e-02, 9.490285968426095e-04, 1.018871330394803e-03, 1.125813845910695e-05, 1.130940661607425e-05, 4.660490708420054e-05, 5.271775151205552e-05, 5.274869291712665e-02, 5.429782060187785e-02, 8.135567453417810e-05, 1.436504779647616e-04, 8.135567453417797e-05, 1.436504779647613e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_apbeint_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_apbeint", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.449563525903903e-06, 0.000000000000000e+00, 1.449569379259737e-06, 1.449552654070620e-06, 0.000000000000000e+00, 1.449561479331699e-06, 1.449510851386742e-06, 0.000000000000000e+00, 1.449503544890311e-06, 1.449633805270798e-06, 0.000000000000000e+00, 1.449660203561288e-06, 1.449557396313187e-06, 0.000000000000000e+00, 1.449592417198651e-06, 1.449557396313187e-06, 0.000000000000000e+00, 1.449592417198651e-06, 3.262262692674467e-04, 0.000000000000000e+00, 3.262902024476436e-04, 3.262295465401481e-04, 0.000000000000000e+00, 3.262985832980054e-04, 3.263602219478491e-04, 0.000000000000000e+00, 3.263886392664988e-04, 3.259752421838874e-04, 0.000000000000000e+00, 3.260173082309037e-04, 3.263700094451826e-04, 0.000000000000000e+00, 3.261132589205387e-04, 3.263700094451826e-04, 0.000000000000000e+00, 3.261132589205387e-04, 4.133307494860571e-02, 0.000000000000000e+00, 4.141177023201775e-02, 4.132610236420298e-02, 0.000000000000000e+00, 4.142816599520491e-02, 4.104381410562667e-02, 0.000000000000000e+00, 4.070299166932130e-02, 4.002010078201242e-02, 0.000000000000000e+00, 4.014099953801092e-02, 4.127055465375137e-02, 0.000000000000000e+00, 3.729948448149793e-02, 4.127055465375137e-02, 0.000000000000000e+00, 3.729948448149793e-02, 1.110158230032344e+00, 0.000000000000000e+00, 1.088339266334852e+00, 1.131686388431178e+00, 0.000000000000000e+00, 1.099966484601643e+00, 2.746806949226901e-02, 0.000000000000000e+00, 2.611389609940613e-02, 1.092165501483410e+00, 0.000000000000000e+00, 1.073371112288245e+00, 1.000565518964623e+00, 0.000000000000000e+00, 1.094961751464347e+00, 1.000565518964622e+00, 0.000000000000000e+00, 1.094961751464348e+00, 1.284810162199338e-01, 0.000000000000000e+00, 1.351629203178419e-01, 1.418609774635723e-01, 0.000000000000000e+00, 1.511990668851007e-01, 4.403708563515818e-01, 0.000000000000000e+00, 4.679599663951531e-01, 7.072831547505466e-02, 0.000000000000000e+00, 6.766143703994892e-02, 1.144184501566635e-01, 0.000000000000000e+00, 1.651867942603099e-01, 1.144184501566638e-01, 0.000000000000000e+00, 1.651867942603103e-01, 1.014643015899852e-04, 0.000000000000000e+00, 1.015363309577907e-04, 1.014298519278508e-04, 0.000000000000000e+00, 1.015030572042048e-04, 1.014619962075956e-04, 0.000000000000000e+00, 1.015349056522040e-04, 1.014324490356551e-04, 0.000000000000000e+00, 1.015046875557036e-04, 1.014470254547554e-04, 0.000000000000000e+00, 1.015197253268159e-04, 1.014470254547554e-04, 0.000000000000000e+00, 1.015197253268159e-04, 1.478320443759299e-03, 0.000000000000000e+00, 1.478508257277057e-03, 1.459191377157006e-03, 0.000000000000000e+00, 1.460074629648478e-03, 1.469435826503402e-03, 0.000000000000000e+00, 1.472652279145706e-03, 1.453652965264297e-03, 0.000000000000000e+00, 1.456159783762646e-03, 1.472387771190762e-03, 0.000000000000000e+00, 1.469690657994808e-03, 1.472387771190762e-03, 0.000000000000000e+00, 1.469690657994808e-03, 6.872592259788630e-02, 0.000000000000000e+00, 6.929267470056032e-02, 5.552784372397657e-02, 0.000000000000000e+00, 5.543561388265383e-02, 9.033024010015515e-02, 0.000000000000000e+00, 8.191694363112871e-02, 8.423094053537949e-02, 0.000000000000000e+00, 7.636918862535140e-02, 6.176511637270899e-02, 0.000000000000000e+00, 7.176320156623853e-02, 6.176511637270903e-02, 0.000000000000000e+00, 7.176320156623855e-02, 8.296599293890765e-01, 0.000000000000000e+00, 8.519325739965088e-01, 6.718469868924165e-01, 0.000000000000000e+00, 6.691085692295720e-01, 8.432992651860636e-01, 0.000000000000000e+00, 8.643783725881102e-01, 2.028417434466337e-03, 0.000000000000000e+00, 2.031117771878881e-03, 1.046639401978226e+00, 0.000000000000000e+00, 1.332262519136604e+00, 1.046639401978226e+00, 0.000000000000000e+00, 1.332262519136604e+00, 7.448318033522459e-02, 0.000000000000000e+00, 6.699768889481172e-02, 8.226264700182709e-02, 0.000000000000000e+00, 7.710063202198247e-02, 3.504020233846313e-01, 0.000000000000000e+00, 4.128225266766837e-01, 8.512969133695671e-01, 0.000000000000000e+00, 8.252223919299292e-01, 1.779612865761122e-01, 0.000000000000000e+00, 2.400838891970216e-01, 1.779612865761116e-01, 0.000000000000000e+00, 2.400838891970212e-01, 6.961651541071300e-02, 0.000000000000000e+00, 6.879400462506788e-02, 7.171553593319807e-02, 0.000000000000000e+00, 7.086672944363599e-02, 7.106315419765519e-02, 0.000000000000000e+00, 7.021659929375550e-02, 7.045215257842875e-02, 0.000000000000000e+00, 6.962199104347409e-02, 7.076574086200235e-02, 0.000000000000000e+00, 6.992709406559101e-02, 7.076574086200235e-02, 0.000000000000000e+00, 6.992709406559101e-02, 7.506368703077722e-02, 0.000000000000000e+00, 7.432012249187778e-02, 1.058930482467819e-01, 0.000000000000000e+00, 1.048743355396687e-01, 9.986760753189032e-02, 0.000000000000000e+00, 9.879001550297406e-02, 9.180610795355348e-02, 0.000000000000000e+00, 9.087539099657924e-02, 9.625626093374723e-02, 0.000000000000000e+00, 9.525442239493032e-02, 9.625626093374723e-02, 0.000000000000000e+00, 9.525442239493032e-02, 4.832036489836350e-02, 0.000000000000000e+00, 4.806773567081501e-02, 5.056004120809965e-01, 0.000000000000000e+00, 5.033992433031941e-01, 4.199016836531349e-01, 0.000000000000000e+00, 4.176129649327531e-01, 2.888874342582644e-01, 0.000000000000000e+00, 2.851040331965752e-01, 3.602783056653668e-01, 0.000000000000000e+00, 3.621554592904319e-01, 3.602783056653669e-01, 0.000000000000000e+00, 3.621554592904320e-01, 1.350915549483775e-01, 0.000000000000000e+00, 1.331962433722634e-01, 3.951051601243888e-01, 0.000000000000000e+00, 3.983068860075591e-01, 5.255060790562337e-01, 0.000000000000000e+00, 5.551703435019947e-01, 3.541903806025986e-01, 0.000000000000000e+00, 3.414154943798255e-01, 1.058240994559270e+00, 0.000000000000000e+00, 1.311254915657063e+00, 1.058240994559272e+00, 0.000000000000000e+00, 1.311254915657064e+00, 1.456815071811901e-01, 0.000000000000000e+00, 1.541194967113912e-01, 7.907339207918634e-02, 0.000000000000000e+00, 1.403873001387236e-01, 9.930565146699731e-02, 0.000000000000000e+00, 1.124400007607502e-01, 1.130831424868860e+00, 0.000000000000000e+00, 1.125615949070422e+00, 3.475459988902623e-01, 0.000000000000000e+00, 2.284382819593467e-01, 3.475459988902623e-01, 0.000000000000000e+00, 2.284382819593472e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
