
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_pbe4_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_pbe4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.478390268854959e+03, 2.478361255654881e+03, 2.478300033937352e+03, 2.478773761290790e+03, 2.478374398101982e+03, 2.478374398101982e+03, 8.053469351126458e+01, 8.052716020889548e+01, 8.032645421329077e+01, 8.070611752442284e+01, 8.053150513642728e+01, 8.053150513642728e+01, 3.871277216171875e+00, 3.875157419496202e+00, 3.840137632868466e+00, 3.898572257728069e+00, 3.872684447184743e+00, 3.872684447184743e+00, 2.523649271241615e-01, 2.681389256078408e-01, 4.889841978779513e+00, 5.053228683266180e-02, 2.572149347505698e-01, 2.572149347505698e-01, -4.043852171564893e-04, -4.428255749725119e-04, -5.754982143113538e-03, -9.451880227563650e-05, -4.336618958658062e-04, -4.336618958658062e-04, 1.211871347695781e+02, 1.207050092038274e+02, 1.211390878504037e+02, 1.207641650354338e+02, 1.209376978555311e+02, 1.209376978555311e+02, 3.491577118784120e+01, 3.536985602349212e+01, 3.474862156251345e+01, 3.511854856798030e+01, 3.538208967093600e+01, 3.538208967093600e+01, 2.026661609361326e+00, 1.376263262316657e+00, 1.903798373360478e+00, 1.217615082268289e+00, 1.999311759001200e+00, 1.999311759001200e+00, -2.692603530074797e-03, 1.614059069712174e-01, -9.962453865336588e-04, 1.273495245061530e+01, 1.702888800982685e-02, 1.702888800982685e-02, -8.797461663692416e-05, -1.147768434050682e-04, -6.449157403648716e-05, -7.911789668254786e-03, -9.528418720210655e-05, -9.528418720210694e-05, 1.406041500092450e+00, 1.229657583282447e+00, 1.258829164662099e+00, 1.305370289997862e+00, 1.279193797686296e+00, 1.279193797686296e+00, 1.374106547678882e+00, 2.049609712814418e+00, 1.796048396717359e+00, 1.381883420398398e+00, 1.597848803580120e+00, 1.597848803580119e+00, 1.518675559832295e+00, 3.618017383006371e-01, 6.379983911719749e-01, 1.066616769249749e+00, 8.795765741443429e-01, 8.795765741443407e-01, 1.715492349748421e+00, -5.255631858680876e-03, -7.791969966730187e-03, 8.323279694712044e-01, -5.251063065108368e-03, -5.251063065108068e-03, -5.533951114840600e-04, -8.639138838444994e-06, -3.114226018182054e-05, -4.615332166592020e-03, -6.886217564627380e-05, -6.886217564627303e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_pbe4_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_pbe4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.056792739321052e+02, -1.056687803674972e+02, -1.056382260888348e+02, -1.058093102636862e+02, -1.056736044786525e+02, -1.056736044786525e+02, 6.540489819811208e+00, 6.528431579496837e+00, 6.200219265459663e+00, 6.771781617561006e+00, 6.534342775105402e+00, 6.534342775105402e+00, 3.697887940756992e+00, 3.786333653302651e+00, 6.090383298721418e+00, 6.055544297456748e+00, 3.729703728639494e+00, 3.729703728639494e+00, 7.881864750914344e-01, 7.990645931225303e-01, 1.875365881469894e+00, 3.099559461420774e-01, 7.917740067223765e-01, 7.917740067223765e-01, -6.531744513841934e-04, -7.129688572125177e-04, -5.164886439840139e-03, -1.566043537506370e-04, -6.982626029608575e-04, -6.982626029608575e-04, 2.122581997100318e+01, 2.227833355309900e+01, 2.133020241551970e+01, 2.214846647349085e+01, 2.176658313895191e+01, 2.176658313895191e+01, 5.440363625945385e+01, 5.347387786935155e+01, 5.640496135922643e+01, 5.572921906377410e+01, 5.101611318696021e+01, 5.101611318696021e+01, -4.610093789866399e-02, 2.216024312618854e+00, 1.962797958488887e-02, 1.104416619865646e+00, -8.977292274317546e-02, -8.977292274317546e-02, 7.505419369266939e-02, 7.364150014213598e-01, 7.885479946861680e-02, 2.038869857534809e+01, 1.686906476520766e-01, 1.686906476520766e-01, -1.457974795373741e-04, -1.898827360502689e-04, -1.067321115569340e-04, 3.258745061748441e-03, -1.576242022461685e-04, -1.576242022461661e-04, 2.779121650227490e+00, 2.151222767318823e+00, 2.439359013054605e+00, 2.624014133601748e+00, 2.537194644850173e+00, 2.537194644850172e+00, 2.620620231220614e+00, 1.187583051011684e+00, 9.083732573890345e-02, 1.473617723857713e-01, -7.299437399500977e-02, -7.299437399501989e-02, 2.270400666288017e+00, 1.277040695429196e+00, 1.652565039386727e+00, 9.833623270358053e-01, 1.541493130536288e+00, 1.541493130536288e+00, 1.208533447324287e+00, -5.762385547126981e-03, -2.956922823018139e-03, 2.929398968812537e-01, 3.692207621825079e-02, 3.692207621825091e-02, -8.883072647431646e-04, -1.438816086391397e-05, -5.177805026269743e-05, 3.420599549113397e-02, -1.140246305248488e-04, -1.140246305248543e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_pbe4_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_pbe4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.072645832072582e-05, 1.072645626887527e-05, 1.072627953048342e-05, 1.072631550276514e-05, 1.072645864044060e-05, 1.072645864044060e-05, 2.043544218520385e-03, 2.043850781459168e-03, 2.052002226273777e-03, 2.036636109714691e-03, 2.043675780571369e-03, 2.043675780571369e-03, 9.367819381749314e-02, 9.030127170958395e-02, 8.809857367268416e-03, 1.228110589729704e-02, 9.246105804073157e-02, 9.246105804073157e-02, -2.861558964057199e+00, -2.740681374459136e+00, 1.211980257660572e-01, -3.393736938980302e+00, -2.828378429267873e+00, -2.828378429267873e+00, -9.287140116121629e-01, -9.759863256411949e-01, -1.763920983400423e+00, -3.140452601082047e-01, -1.003308765100993e+00, -1.003308765100993e+00, 7.322146176693876e-04, 7.297123218622744e-04, 7.319667793402446e-04, 7.300219273257154e-04, 7.309385700306366e-04, 7.309385700306366e-04, 4.376067290055612e-04, 6.245803419506529e-04, 1.712854292955433e-04, 3.148409477902047e-04, 9.325163696325150e-04, 9.325163696325150e-04, 4.990034527677308e-01, 2.936597355753119e-02, 5.584062179195549e-01, 3.576258154634444e-01, 4.746899270607405e-01, 4.746899270607405e-01, -2.543262304090341e+00, -1.973680889374483e+00, -2.900978802156532e+00, 1.204074254329091e-03, -3.389872840060113e+00, -3.389872840060113e+00, -3.213744665633090e-01, -3.681620432382667e-01, -7.897363629237506e-01, -2.551887967364309e+00, -4.954868804198765e-01, -4.954868804182758e-01, -7.379074750226008e-01, -5.811229740469834e-02, -2.546309599998733e-01, -4.402445492988340e-01, -3.434358543832025e-01, -3.434358543832025e-01, -9.914059769660787e-01, 3.839014324509502e-01, 6.137692279538012e-01, 6.459913227011314e-01, 6.725462248323444e-01, 6.725462248323457e-01, 7.112326850827853e-02, -1.341988764058280e+00, -7.626593895091549e-01, 6.818817301997396e-01, -7.886972447558206e-02, -7.886972447558495e-02, 4.424113663318451e-01, -1.362673292770029e+00, -1.920254333139541e+00, 1.759731313060884e+00, -3.430941136088522e+00, -3.430941136088574e+00, -8.186634239172119e-01, -1.731446666458755e-01, -2.832974517743517e-01, -4.024395521790600e+00, -6.148651966420752e-01, -6.148651966420706e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
