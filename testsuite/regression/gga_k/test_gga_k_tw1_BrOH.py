
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_tw1_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tw1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.192491019441472e+03, 2.192498685983701e+03, 2.192545032471566e+03, 2.192419248233408e+03, 2.192494961001639e+03, 2.192494961001639e+03, 5.925159968810443e+01, 5.925119132849499e+01, 5.924485470043381e+01, 5.928090534695878e+01, 5.925189446561451e+01, 5.925189446561451e+01, 2.288352355482261e+00, 2.286321821923447e+00, 2.240193324460472e+00, 2.271342097276599e+00, 2.287598580786641e+00, 2.287598580786641e+00, 1.955034333535458e-01, 1.988319337805194e-01, 3.187659768655274e+00, 1.178908054557564e-01, 1.964774496755823e-01, 1.964774496755823e-01, 8.540999165246942e-04, 9.368546848825376e-04, 1.507004896304445e-02, 1.969572747035771e-04, 9.174352234299526e-04, 9.174352234299526e-04, 1.282674538484915e+02, 1.282728410309306e+02, 1.282682447684638e+02, 1.282724296897805e+02, 1.282698735470004e+02, 1.282698735470004e+02, 2.034588099004565e+01, 2.057917950139479e+01, 2.030603448597709e+01, 2.048764976179293e+01, 2.055536343594953e+01, 2.055536343594953e+01, 1.633069335206607e+00, 1.835610660099398e+00, 1.476516936952435e+00, 1.539095295710806e+00, 1.747189462621027e+00, 1.747189462621027e+00, 6.955617560199767e-02, 2.159272770264981e-01, 6.743965643263551e-02, 1.698482878029848e+01, 8.879252581664836e-02, 8.879252581664836e-02, 1.832962088540155e-04, 2.393649974104641e-04, 1.344691680593183e-04, 2.848125853137607e-02, 1.987205957198495e-04, 1.987205957198495e-04, 1.634634605704792e+00, 1.635164729258539e+00, 1.635031319588860e+00, 1.634873172229942e+00, 1.634954228783059e+00, 1.634954228783059e+00, 1.528565609635389e+00, 1.276311541740796e+00, 1.348219585336791e+00, 1.415277589601522e+00, 1.380513607290729e+00, 1.380513607290729e+00, 2.021372862422790e+00, 3.222188022397350e-01, 4.270829648238569e-01, 6.324412936100680e-01, 5.181504534670694e-01, 5.181504534670693e-01, 1.045209818229630e+00, 1.300852760551075e-02, 2.337793284654784e-02, 5.475255166067264e-01, 4.657495282204579e-02, 4.657495282204579e-02, 1.172609447889770e-03, 1.795176399486531e-05, 6.477207128198045e-05, 4.235450100120316e-02, 1.435419534467970e-04, 1.435419534467966e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_tw1_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tw1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.346862540861016e+03, 3.346880603086138e+03, 3.346970525812700e+03, 3.346674567353436e+03, 3.346871988164624e+03, 3.346871988164624e+03, 8.809354677950348e+01, 8.809422832864684e+01, 8.812023109303779e+01, 8.811279206721251e+01, 8.809464785508513e+01, 8.809464785508513e+01, 3.204098622725087e+00, 3.197226917060095e+00, 3.030613618715283e+00, 3.077931998671689e+00, 3.201590307326039e+00, 3.201590307326039e+00, 2.496528774874834e-01, 2.546452970497351e-01, 4.624925125652542e+00, 1.546652347293699e-01, 2.511096399444472e-01, 2.511096399444472e-01, 1.417900551230627e-03, 1.554678717229889e-03, 2.399509178300756e-02, 3.280114596236876e-04, 1.522465291747939e-03, 1.522465291747939e-03, 1.999560303676246e+02, 2.000557739011122e+02, 1.999663911845433e+02, 2.000439445453417e+02, 2.000069400645266e+02, 2.000069400645266e+02, 2.756409958956947e+01, 2.794718886885376e+01, 2.741849752647175e+01, 2.771513405034964e+01, 2.801757822097867e+01, 2.801757822097867e+01, 2.462242994657342e+00, 2.970316828947250e+00, 2.213790711288752e+00, 2.453071503498160e+00, 2.663005951498084e+00, 2.663005951498084e+00, 9.899126035987096e-02, 2.761969438587525e-01, 9.542074542440793e-02, 2.747839048900455e+01, 1.204440658754240e-01, 1.204440658754240e-01, 3.052700749070293e-04, 3.985599489439928e-04, 2.239114757856197e-04, 4.354719301577836e-02, 3.308812512658552e-04, 3.308812512658552e-04, 2.700445007666155e+00, 2.655049655771315e+00, 2.671093013928685e+00, 2.683656268755300e+00, 2.677351734771963e+00, 2.677351734771963e+00, 2.532634932493255e+00, 1.827964527623869e+00, 2.011151964567792e+00, 2.198062005060799e+00, 2.101072454142088e+00, 2.101072454142089e+00, 3.262461380639777e+00, 4.094786729376045e-01, 5.530091339578809e-01, 8.872368243351337e-01, 6.951213338810197e-01, 6.951213338810195e-01, 1.485383736294778e+00, 2.091081814535821e-02, 3.649525754167001e-02, 7.961557907993794e-01, 6.758757869787932e-02, 6.758757869787932e-02, 1.945201751028656e-03, 2.991679066899331e-05, 1.079194354217333e-04, 6.139872369486178e-02, 2.390349778759765e-04, 2.390349778759759e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_tw1_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tw1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([7.780613323826867e-07, 7.780586111031242e-07, 7.780380405537736e-07, 7.780827696292271e-07, 7.780599677441061e-07, 7.780599677441061e-07, 1.705960172446177e-04, 1.706004696122573e-04, 1.707016739337943e-04, 1.704187954618140e-04, 1.705961270640309e-04, 1.705961270640309e-04, 2.074147679958326e-02, 2.072499724580167e-02, 1.998959892839124e-02, 1.965855786261220e-02, 2.073589358640648e-02, 2.073589358640648e-02, 5.931015587696836e-01, 5.972271902471495e-01, 1.328658974801406e-02, 6.287190178580063e-01, 5.947810087693435e-01, 5.947810087693435e-01, 2.499966196567722e-01, 2.625759006972783e-01, 4.469448712166866e-01, 8.492074425688978e-02, 2.699298038189363e-01, 2.699298038189363e-01, 5.599608753955241e-05, 5.601347320797357e-05, 5.599766198644981e-05, 5.601118406477077e-05, 5.600530231529577e-05, 5.600530231529577e-05, 7.328293884511062e-04, 7.244470778334523e-04, 7.290876083011198e-04, 7.226789090931160e-04, 7.317254985365582e-04, 7.317254985365582e-04, 3.782589917015924e-02, 3.362896890752437e-02, 4.375190012295260e-02, 4.333820569766502e-02, 3.453770883624015e-02, 3.453770883624015e-02, 5.415000531873710e-01, 3.533578271145200e-01, 6.117452517938968e-01, 1.194621762516974e-03, 6.654510656203214e-01, 6.654510656203214e-01, 8.690655529880317e-02, 9.952697829555973e-02, 2.135076052463456e-01, 6.085359160273265e-01, 1.339456595401612e-01, 1.339456595401611e-01, 4.055349358185355e-02, 4.009029453097970e-02, 4.025567038959373e-02, 4.038451253271930e-02, 4.032014480152949e-02, 4.032014480152949e-02, 4.492678634681771e-02, 5.154810915393581e-02, 4.987854514694617e-02, 4.816488078209306e-02, 4.910817236149860e-02, 4.910817236149859e-02, 2.905034126494574e-02, 2.539534763893289e-01, 2.055330037125170e-01, 1.432142358437570e-01, 1.759066428393705e-01, 1.759066428393705e-01, 6.878455313040678e-02, 3.501306365197812e-01, 4.725087738492874e-01, 1.871647323335440e-01, 7.539879686951302e-01, 7.539879686951307e-01, 2.201364242977339e-01, 4.686464223404018e-02, 7.665527421861831e-02, 8.829180646834770e-01, 1.662464695495458e-01, 1.662464695495453e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
