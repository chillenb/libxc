
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_vjks_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_vjks", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.178883738830735e+03, 2.178893396793576e+03, 2.178944087876429e+03, 2.178800235318580e+03, 2.178874508790934e+03, 2.178874508790934e+03, 5.851681239524549e+01, 5.851656870341840e+01, 5.851378274027225e+01, 5.854082933429103e+01, 5.851934143738824e+01, 5.851934143738824e+01, 2.220392191093549e+00, 2.216287939629127e+00, 2.110092597478025e+00, 2.145272865764109e+00, 2.137744384393348e+00, 2.137744384393348e+00, 1.133951776259890e-01, 1.230989903061195e-01, 3.007780936600647e+00, -3.047262294894791e-02, 3.801544713567691e-02, 3.801544713567683e-02, -4.352834344661012e-01, -4.230774534906719e-01, -4.760794960389649e-01, -4.588141776894523e-01, -4.063472769221298e-01, -4.063472769221293e-01, 1.279940038941103e+02, 1.280071102814049e+02, 1.279949460560419e+02, 1.280065127982267e+02, 1.280004720374044e+02, 1.280004720374044e+02, 1.899208693271682e+01, 1.927258182200936e+01, 1.877629085393786e+01, 1.902615235767776e+01, 1.924815854936110e+01, 1.924815854936110e+01, 1.655467376634865e+00, 1.878863950484861e+00, 1.425131613442435e+00, 1.482625417056456e+00, 1.701579469591745e+00, 1.701579469591745e+00, -2.315589825145463e-01, 3.739418931485793e-02, -2.499416804771708e-01, 1.702404398934375e+01, -9.756984336317956e-02, -9.756984336317956e-02, -3.999882941494817e-01, -4.228900476223450e-01, -1.685682198545873e-01, -3.233332583885795e-01, -2.471138046060204e-01, -2.471138046060206e-01, 1.587155431945877e+00, 1.587743062397071e+00, 1.587736565467349e+00, 1.587543849746371e+00, 1.587655306556993e+00, 1.587655306556993e+00, 1.496674304068797e+00, 1.195459999443816e+00, 1.289700699984418e+00, 1.375071066228442e+00, 1.331983539003896e+00, 1.331983539003896e+00, 2.068687865394487e+00, 1.682684624535191e-01, 3.165235593921095e-01, 5.983424619181877e-01, 4.493962836985071e-01, 4.493962836985070e-01, 1.014077235095172e+00, -5.098524353533852e-01, -4.461984890009795e-01, 5.502614842545516e-01, -2.096081257304182e-01, -2.096081257304182e-01, -4.822009670779892e-01, -1.912699880323016e-01, -2.747319308544130e-01, -2.323326836649042e-01, -2.199048893258741e-01, -2.199048893258739e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_vjks_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_vjks", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.407286995971660e+03, 3.407304653466673e+03, 3.407391183119388e+03, 3.407128318408722e+03, 3.407264907693058e+03, 3.407264907693058e+03, 9.104678727216748e+01, 9.104645190232620e+01, 9.104324381760480e+01, 9.108350761675423e+01, 9.105077478595882e+01, 9.105077478595882e+01, 3.527171054267416e+00, 3.525075755830593e+00, 3.523243917663040e+00, 3.570889955666057e+00, 3.551993223750493e+00, 3.551993223750493e+00, 4.408256067912629e-01, 4.294193510356761e-01, 4.732366529653514e+00, 5.529843046263655e-01, 4.739618574908802e-01, 4.739618574908804e-01, 4.418612888376369e-01, 4.303554548144043e-01, 6.542540549549765e-01, 4.610219075456646e-01, 4.098253427104243e-01, 4.098253427104229e-01, 2.020558439244461e+02, 2.021291087727343e+02, 2.020594939256650e+02, 2.021241637957126e+02, 2.020927854784767e+02, 2.020927854784767e+02, 3.219936790216209e+01, 3.248068239137497e+01, 3.230297200299253e+01, 3.254118387088240e+01, 3.231599835172067e+01, 3.231599835172067e+01, 2.579404472976693e+00, 3.039859337592262e+00, 2.217505354857124e+00, 2.378198431501407e+00, 2.656992328303977e+00, 2.656992328303977e+00, 7.404546367590693e-01, 7.012564238265188e-01, 7.277619882668984e-01, 2.758315181159779e+01, 5.616329312344586e-01, 5.616329312344586e-01, 4.013038017096908e-01, 4.249997031533251e-01, 1.697999759705481e-01, 6.480111063554574e-01, 2.489015039335221e-01, 2.489015039335229e-01, 2.615719229827443e+00, 2.571958311684082e+00, 2.586630183558582e+00, 2.599321153523757e+00, 2.592903686706849e+00, 2.592903686706849e+00, 2.480877364594645e+00, 1.893570433755795e+00, 2.006789086157772e+00, 2.163091549398505e+00, 2.077389626848515e+00, 2.077389626848515e+00, 3.338970376235639e+00, 7.564859733193054e-01, 7.804867253855460e-01, 9.653418918654537e-01, 8.265946646106821e-01, 8.265946646106817e-01, 1.610400704563049e+00, 6.776367153021216e-01, 7.116972182222148e-01, 8.610771414275318e-01, 5.794797041082578e-01, 5.794797041082586e-01, 4.952087264128081e-01, 1.914211124652364e-01, 2.753971256610555e-01, 5.898294428223386e-01, 2.214357771846833e-01, 2.214357771846835e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_vjks_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_vjks", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [5.676031278869591e-07, 5.676081083753087e-07, 5.676131755858643e-07, 5.675394196871553e-07, 5.675804986374269e-07, 5.675804986374269e-07, 1.037263121164500e-04, 1.037452424644674e-04, 1.041751553669203e-04, 1.033687442335544e-04, 1.037415062073194e-04, 1.037415062073194e-04, 6.187729596296055e-03, 5.977722664783590e-03, -1.926550109902706e-04, 1.331988666913948e-04, 3.238977604871193e-04, 3.238977604871193e-04, -1.867547122577728e+00, -1.652691378875139e+00, 5.209873863764394e-03, -8.191241238847706e+00, -4.459105240780062e+00, -4.459105240780064e+00, -1.724927069959562e+05, -1.479278149962159e+05, -8.680764439229979e+02, -8.954767989115285e+05, -4.513204676039567e+05, -4.513204676039563e+05, 4.557831221702346e-05, 4.569452891614331e-05, 4.558290205845881e-05, 4.568551184500545e-05, 4.563766031518259e-05, 4.563766031518259e-05, -6.325147626180232e-05, -4.114646213603782e-05, -1.139201533379986e-04, -9.270861964784980e-05, -2.748035627714550e-05, -2.748035627714550e-05, 2.445014979636642e-02, 3.052593524454562e-02, 2.771267449927631e-02, 4.148071332302997e-02, 2.515606332641981e-02, 2.515606332641981e-02, -3.794501667876000e+01, -2.900463542772462e+00, -4.989259955045114e+01, 1.127423333764147e-03, -1.879718805287247e+01, -1.879718805287247e+01, -1.949551777280489e+06, -9.584865855708449e+05, -2.143876926503776e+06, -1.887464051996973e+02, -1.226235914450127e+06, -1.226235914450127e+06, 4.265949565205927e-02, 3.953854503805728e-02, 4.063160936695022e-02, 4.154100805840562e-02, 4.108606441118471e-02, 4.108606441118471e-02, 4.758660853915513e-02, 1.704745475253052e-02, 2.998009429305047e-02, 3.931383363502521e-02, 3.511115073795700e-02, 3.511115073795700e-02, 2.609009133676761e-02, -1.003818410595235e+00, -3.332817242102892e-01, 2.677780308888789e-02, -8.041579478565193e-02, -8.041579478565181e-02, 2.023153635873491e-02, -9.932151443899819e+02, -3.827846526030758e+02, 7.936965271551781e-02, -8.119758679760994e+01, -8.119758679760997e+01, -6.135948798335682e+04, -5.018329019475122e+07, -5.426178735851946e+06, -1.015570925626333e+02, -1.547777431941361e+06, -1.547777431941367e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
