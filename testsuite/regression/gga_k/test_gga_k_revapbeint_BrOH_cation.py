
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_revapbeint_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_revapbeint", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.179429204173969e+03, 2.179438021522102e+03, 2.179486329953724e+03, 2.179354959086584e+03, 2.179422499207526e+03, 2.179422499207526e+03, 5.890576976085126e+01, 5.890519159231300e+01, 5.889471893884166e+01, 5.893531298580460e+01, 5.890792649956997e+01, 5.890792649956997e+01, 2.292329972435816e+00, 2.290293234421720e+00, 2.249174531352342e+00, 2.282440310639528e+00, 2.285396687571813e+00, 2.285396687571813e+00, 1.925278794973153e-01, 1.957453444742625e-01, 3.084719243662569e+00, 1.295632143420402e-01, 1.857384932040471e-01, 1.857384932040471e-01, 3.712359332619285e-04, 4.117377380120168e-04, 1.217172264049121e-02, 1.233933874256825e-04, 2.470350299476523e-04, 2.470350299476523e-04, 1.276733420409475e+02, 1.276812420498002e+02, 1.276740662512345e+02, 1.276810340181439e+02, 1.276771441904145e+02, 1.276771441904145e+02, 2.041877174473695e+01, 2.065105653253064e+01, 2.035063116622548e+01, 2.055516236205599e+01, 2.058076278785299e+01, 2.058076278785299e+01, 1.660591143497028e+00, 1.872893415027859e+00, 1.436075275463931e+00, 1.479444950863312e+00, 1.708744492252346e+00, 1.708744492252346e+00, 7.239516737303024e-02, 2.128768577129670e-01, 6.313058294841870e-02, 1.697132306219289e+01, 9.220689291415561e-02, 9.220689291415561e-02, 7.357577602428254e-05, 1.179146953099725e-04, 6.919392103356218e-05, 3.036343792970696e-02, 1.109846669220741e-04, 1.109846669220742e-04, 1.584774615154457e+00, 1.582833971643263e+00, 1.583476872037252e+00, 1.584015578796037e+00, 1.583738964170402e+00, 1.583738964170402e+00, 1.495529678018549e+00, 1.231425287584557e+00, 1.300655856613491e+00, 1.372587812555744e+00, 1.334734218488993e+00, 1.334734218488993e+00, 2.061887269575808e+00, 3.129704828377202e-01, 4.135002245424057e-01, 6.245161960384582e-01, 5.046142145584025e-01, 5.046142145584025e-01, 1.046729879384545e+00, 1.115111221053503e-02, 2.031983189698830e-02, 5.606816235775732e-01, 4.670892469117464e-02, 4.670892469117467e-02, 7.365829818485685e-04, 8.425535208638764e-06, 3.729352595878171e-05, 4.172131097748511e-02, 9.337978754099359e-05, 9.337978754099341e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_revapbeint_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_revapbeint", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.332400071825633e+03, 3.332391784243918e+03, 3.332425298760433e+03, 3.332410108576923e+03, 3.332505313657977e+03, 3.332524957740586e+03, 3.332220438595808e+03, 3.332161855032441e+03, 3.332415152615037e+03, 3.332306486844649e+03, 3.332415152615037e+03, 3.332306486844649e+03, 8.730234918450424e+01, 8.730447930142391e+01, 8.730346011468568e+01, 8.730553951870118e+01, 8.732990660786199e+01, 8.733786139292449e+01, 8.731225887861987e+01, 8.731967282627022e+01, 8.727137686311295e+01, 8.734646428546884e+01, 8.727137686311295e+01, 8.734646428546884e+01, 3.158953886437853e+00, 3.191799793787022e+00, 3.146574769104483e+00, 3.186709591056253e+00, 2.988258059866285e+00, 2.938650150309064e+00, 3.006278780834526e+00, 3.022296494527895e+00, 3.253241344327551e+00, 2.778672901775687e+00, 3.253241344327551e+00, 2.778672901775687e+00, 2.101681614689970e-01, 2.233781747771194e-01, 2.133824631427693e-01, 2.292342473784950e-01, 4.173875187253368e+00, 4.503757115581544e+00, 1.481078684144176e-01, 1.513659104723862e-01, 2.281492601543374e-01, 9.707395417802073e-02, 2.281492601543373e-01, 9.707395417802074e-02, 5.771062244991001e-04, 6.514301450515357e-04, 6.334795868859404e-04, 7.266546729342572e-04, 1.834607015649229e-02, 2.029574121322317e-02, 2.089027336366224e-04, 2.020074555742377e-04, 4.595309931870179e-04, 1.489634032008145e-04, 4.595309931870180e-04, 1.489634032008145e-04, 1.998578266275235e+02, 1.997604504621420e+02, 1.999728932921363e+02, 1.998715838217310e+02, 1.998644393871499e+02, 1.997644268101486e+02, 1.999631714937144e+02, 1.998653848556236e+02, 1.999165981385641e+02, 1.998162426701874e+02, 1.999165981385641e+02, 1.998162426701874e+02, 2.662528832708526e+01, 2.662254167692322e+01, 2.704038578378638e+01, 2.702514987627402e+01, 2.624671221599418e+01, 2.635172473541554e+01, 2.660042345735334e+01, 2.671115528499979e+01, 2.714863811583572e+01, 2.687315086392755e+01, 2.714863811583572e+01, 2.687315086392755e+01, 2.505978623938411e+00, 2.492986034911462e+00, 3.035130048197323e+00, 3.038884404589249e+00, 2.047966598254726e+00, 2.209216478642527e+00, 2.293451950867374e+00, 2.447324781524253e+00, 2.723611268541534e+00, 2.455115649156440e+00, 2.723611268541534e+00, 2.455115649156441e+00, 9.560397128600813e-02, 9.651206259086674e-02, 2.390490489052319e-01, 2.408456772138486e-01, 8.194011339021892e-02, 8.838456353897060e-02, 2.757629689212205e+01, 2.755199049156239e+01, 1.107842341242474e-01, 1.133881818028726e-01, 1.107842341242474e-01, 1.133881818028726e-01, 1.176031867096506e-04, 1.270139518563117e-04, 1.933954248544034e-04, 1.992956509232153e-04, 1.081060755737234e-04, 1.212193183620678e-04, 4.457562938915122e-02, 4.518013773060044e-02, 1.128082409112070e-04, 2.125876287932586e-04, 1.128082409112070e-04, 2.125876287932587e-04, 2.606913234467114e+00, 2.627388382277668e+00, 2.559794682017722e+00, 2.580364631807460e+00, 2.576375887189969e+00, 2.597016179436469e+00, 2.590167165742773e+00, 2.610577957198123e+00, 2.583275036197288e+00, 2.603796017507823e+00, 2.583275036197288e+00, 2.603796017507823e+00, 2.473615742182822e+00, 2.490033476130828e+00, 1.705558248903297e+00, 1.721415638470101e+00, 1.905309989901475e+00, 1.923712649579869e+00, 2.124570566806886e+00, 2.140059282452326e+00, 2.011798491718533e+00, 2.027348161804870e+00, 2.011798491718533e+00, 2.027348161804870e+00, 3.327961835847342e+00, 3.340521478888460e+00, 3.498030607742074e-01, 3.530561344664568e-01, 4.784167006437930e-01, 4.870738162309903e-01, 8.433043156053375e-01, 8.530716503766584e-01, 6.318444991531286e-01, 6.314706229126557e-01, 6.318444991531282e-01, 6.314706229126557e-01, 1.439745982438269e+00, 1.461315980627421e+00, 1.776111394434276e-02, 1.798887881019141e-02, 3.058857747190478e-02, 3.238521705195361e-02, 7.874951028663741e-01, 8.129665032475999e-01, 6.212322304937821e-02, 6.543216483916160e-02, 6.212322304937820e-02, 6.543216483916164e-02, 1.178282293410799e-03, 1.264747189761694e-03, 1.400940415769005e-05, 1.407290930478935e-05, 5.798618163051997e-05, 6.558963473501025e-05, 5.751575575542445e-02, 5.905463659347152e-02, 1.011860461309030e-04, 1.786405722643481e-04, 1.011860461309028e-04, 1.786405722643477e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_revapbeint_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_revapbeint", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.519031324219374e-06, 0.000000000000000e+00, 1.519037262953734e-06, 1.519017485321674e-06, 0.000000000000000e+00, 1.519027208877259e-06, 1.518969125457444e-06, 0.000000000000000e+00, 1.518959056891422e-06, 1.519125514206883e-06, 0.000000000000000e+00, 1.519158355704864e-06, 1.519023276807827e-06, 0.000000000000000e+00, 1.519075681868947e-06, 1.519023276807827e-06, 0.000000000000000e+00, 1.519075681868947e-06, 3.480011995192735e-04, 0.000000000000000e+00, 3.480406872763068e-04, 3.480010999180270e-04, 0.000000000000000e+00, 3.480442050192631e-04, 3.480348668850980e-04, 0.000000000000000e+00, 3.480374981763651e-04, 3.478073089677708e-04, 0.000000000000000e+00, 3.478205967208180e-04, 3.481658592015314e-04, 0.000000000000000e+00, 3.478298832422107e-04, 3.481658592015314e-04, 0.000000000000000e+00, 3.478298832422107e-04, 4.609414471941697e-02, 0.000000000000000e+00, 4.593405307947732e-02, 4.617226691101783e-02, 0.000000000000000e+00, 4.598072067327385e-02, 4.704436375080726e-02, 0.000000000000000e+00, 4.712460807149576e-02, 4.609537127339054e-02, 0.000000000000000e+00, 4.608227557068375e-02, 4.541862284445952e-02, 0.000000000000000e+00, 4.546205029515297e-02, 4.541862284445952e-02, 0.000000000000000e+00, 4.546205029515297e-02, 1.570515830840239e+00, 0.000000000000000e+00, 1.505152566061130e+00, 1.579838249316109e+00, 0.000000000000000e+00, 1.497652996164848e+00, 3.054464744798635e-02, 0.000000000000000e+00, 2.846338561698960e-02, 1.814404673782494e+00, 0.000000000000000e+00, 1.776038299838017e+00, 1.406900096589998e+00, 0.000000000000000e+00, 2.073333923271901e+00, 1.406900096589997e+00, 0.000000000000000e+00, 2.073333923271903e+00, 3.076795857195015e-01, 0.000000000000000e+00, 3.236289005218548e-01, 3.396648582856508e-01, 0.000000000000000e+00, 3.619465017599450e-01, 1.020947420348306e+00, 0.000000000000000e+00, 1.080618242699687e+00, 1.695211335764044e-01, 0.000000000000000e+00, 1.621738477335326e-01, 2.740765506935102e-01, 0.000000000000000e+00, 3.958853095426799e-01, 2.740765506935109e-01, 0.000000000000000e+00, 3.958853095426807e-01, 1.049712888022081e-04, 0.000000000000000e+00, 1.050470006168153e-04, 1.049063359063366e-04, 0.000000000000000e+00, 1.049842217270224e-04, 1.049674024847960e-04, 0.000000000000000e+00, 1.050446430821709e-04, 1.049116790229375e-04, 0.000000000000000e+00, 1.049876188358271e-04, 1.049382872091584e-04, 0.000000000000000e+00, 1.050155498184675e-04, 1.049382872091584e-04, 0.000000000000000e+00, 1.050155498184675e-04, 1.716446931133049e-03, 0.000000000000000e+00, 1.716679252547478e-03, 1.689074074437183e-03, 0.000000000000000e+00, 1.690218249902491e-03, 1.720247690794820e-03, 0.000000000000000e+00, 1.719797180597708e-03, 1.697047775792909e-03, 0.000000000000000e+00, 1.695929067826557e-03, 1.696699047150270e-03, 0.000000000000000e+00, 1.702317392014190e-03, 1.696699047150270e-03, 0.000000000000000e+00, 1.702317392014190e-03, 7.266582765938494e-02, 0.000000000000000e+00, 7.325352276920238e-02, 5.637054308558621e-02, 0.000000000000000e+00, 5.625194174182212e-02, 9.653505578528002e-02, 0.000000000000000e+00, 8.704762893975557e-02, 8.594188871249127e-02, 0.000000000000000e+00, 7.796622279990649e-02, 6.484285015925413e-02, 0.000000000000000e+00, 7.551060350488255e-02, 6.484285015925415e-02, 0.000000000000000e+00, 7.551060350488258e-02, 1.638784543170348e+00, 0.000000000000000e+00, 1.674144074760772e+00, 1.045872345092342e+00, 0.000000000000000e+00, 1.039400288905763e+00, 1.707303172054244e+00, 0.000000000000000e+00, 1.723272713789353e+00, 2.056998102423308e-03, 0.000000000000000e+00, 2.059689322266952e-03, 1.931228180576555e+00, 0.000000000000000e+00, 2.324830596614675e+00, 1.931228180576555e+00, 0.000000000000000e+00, 2.324830596614675e+00, 1.785476233460818e-01, 0.000000000000000e+00, 1.606035189892359e-01, 1.971649496696313e-01, 0.000000000000000e+00, 1.847936018345820e-01, 8.397052714276519e-01, 0.000000000000000e+00, 9.891791350258338e-01, 1.848935237574572e+00, 0.000000000000000e+00, 1.793401639365205e+00, 4.265365205045125e-01, 0.000000000000000e+00, 5.752060260437941e-01, 4.265365205045110e-01, 0.000000000000000e+00, 5.752060260437932e-01, 6.997080391321775e-02, 0.000000000000000e+00, 6.913372991783603e-02, 7.274526155554314e-02, 0.000000000000000e+00, 7.186388615085425e-02, 7.184923821624233e-02, 0.000000000000000e+00, 7.097511599839217e-02, 7.103983262095290e-02, 0.000000000000000e+00, 7.019027545261777e-02, 7.145190980896877e-02, 0.000000000000000e+00, 7.058991279658462e-02, 7.145190980896877e-02, 0.000000000000000e+00, 7.058991279658462e-02, 7.524147553346870e-02, 0.000000000000000e+00, 7.449458036748174e-02, 1.174996541418198e-01, 0.000000000000000e+00, 1.162171391072322e-01, 1.070225078542589e-01, 0.000000000000000e+00, 1.057368461375720e-01, 9.537927304667036e-02, 0.000000000000000e+00, 9.438011273085936e-02, 1.014850941815859e-01, 0.000000000000000e+00, 1.003862539908024e-01, 1.014850941815859e-01, 0.000000000000000e+00, 1.003862539908024e-01, 4.913243015538049e-02, 0.000000000000000e+00, 4.884190542172834e-02, 7.203296542426784e-01, 0.000000000000000e+00, 7.150368552952737e-01, 5.470789691537522e-01, 0.000000000000000e+00, 5.404908150794766e-01, 3.257912887110676e-01, 0.000000000000000e+00, 3.211248864140328e-01, 4.330453028586931e-01, 0.000000000000000e+00, 4.347383986098219e-01, 4.330453028586934e-01, 0.000000000000000e+00, 4.347383986098221e-01, 1.503914335967566e-01, 0.000000000000000e+00, 1.479071925837593e-01, 9.184357407049971e-01, 0.000000000000000e+00, 9.254684130176541e-01, 1.192011836955803e+00, 0.000000000000000e+00, 1.253807026427698e+00, 3.870944097899131e-01, 0.000000000000000e+00, 3.718124951044546e-01, 2.182540316713936e+00, 0.000000000000000e+00, 2.624584176227606e+00, 2.182540316713939e+00, 0.000000000000000e+00, 2.624584176227608e+00, 3.484966309591772e-01, 0.000000000000000e+00, 3.686073985352745e-01, 1.895962170466638e-01, 0.000000000000000e+00, 3.366029497722126e-01, 2.380738808219462e-01, 0.000000000000000e+00, 2.695527585651758e-01, 2.342632756575143e+00, 0.000000000000000e+00, 2.324521633296495e+00, 8.328878063243774e-01, 0.000000000000000e+00, 5.473713114618970e-01, 8.328878063243776e-01, 0.000000000000000e+00, 5.473713114618980e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
