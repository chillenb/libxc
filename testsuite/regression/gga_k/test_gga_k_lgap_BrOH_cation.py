
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_lgap_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_lgap", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.192960650164589e+03, 2.192969398237540e+03, 2.193017654171116e+03, 2.192887308515994e+03, 2.192954275196763e+03, 2.192954275196763e+03, 5.930790198803869e+01, 5.930729658537904e+01, 5.929621363610180e+01, 5.933802109002556e+01, 5.931004547512568e+01, 5.931004547512568e+01, 2.310809556581324e+00, 2.308849699839685e+00, 2.270331576983857e+00, 2.303724485751209e+00, 2.307967106532809e+00, 2.307967106532809e+00, 1.969351494455229e-01, 2.000247839565244e-01, 3.108567952438283e+00, 1.318878146875445e-01, 1.894704912413371e-01, 1.894704912413371e-01, 2.979761760200160e-04, 3.305365156358005e-04, 1.003916178619290e-02, 9.896876278411955e-05, 1.982248079253640e-04, 1.982248079253640e-04, 1.283864068414332e+02, 1.283923007523045e+02, 1.283870507025343e+02, 1.283922475307783e+02, 1.283891874946097e+02, 1.283891874946097e+02, 2.061823625213530e+01, 2.084984706510308e+01, 2.055645203989927e+01, 2.076022611518445e+01, 2.077701484610623e+01, 2.077701484610623e+01, 1.671450831296273e+00, 1.880336374418627e+00, 1.445822844129898e+00, 1.486216157554007e+00, 1.719543354372929e+00, 1.719543354372929e+00, 6.788602253903050e-02, 2.182496343930366e-01, 5.835233252615010e-02, 1.703694438990225e+01, 9.158423454833897e-02, 9.158423454833897e-02, 5.900565440456252e-05, 9.457569334334518e-05, 5.550784810861002e-05, 2.632910023688008e-02, 8.903959588774606e-05, 8.903959588774609e-05, 1.588480249044426e+00, 1.588980860035257e+00, 1.588914903145962e+00, 1.588762823782961e+00, 1.588845445278633e+00, 1.588845445278633e+00, 1.497916298584067e+00, 1.241233992904764e+00, 1.309690754433110e+00, 1.380556194172435e+00, 1.343322599735421e+00, 1.343322599735421e+00, 2.070441822941823e+00, 3.204924054124328e-01, 4.206421246809571e-01, 6.298357114591641e-01, 5.104782541586093e-01, 5.104782541586093e-01, 1.055156811521335e+00, 9.163448347066902e-03, 1.705409818794773e-02, 5.648725850501115e-01, 4.282014031977233e-02, 4.282014031977234e-02, 5.917301704910856e-04, 6.755829125197908e-06, 2.990651689366712e-05, 3.764936629515316e-02, 7.491092323082617e-05, 7.491092323082603e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_lgap_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_lgap", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.341947745576657e+03, 3.341939415587070e+03, 3.341972810830259e+03, 3.341957622595472e+03, 3.342052619337363e+03, 3.342072088943557e+03, 3.341769561705498e+03, 3.341711305105037e+03, 3.341962714238202e+03, 3.341855238977068e+03, 3.341962714238202e+03, 3.341855238977068e+03, 8.759425347535554e+01, 8.759632558861817e+01, 8.759536003201276e+01, 8.759737691144407e+01, 8.762164856814491e+01, 8.762956256609876e+01, 8.760435828511987e+01, 8.761172879894491e+01, 8.756320292057126e+01, 8.763839996677170e+01, 8.756320292057126e+01, 8.763839996677170e+01, 3.164151473810378e+00, 3.198397077935884e+00, 3.151253088210556e+00, 3.193150653373801e+00, 2.984437794926043e+00, 2.930959528026289e+00, 3.000524545238080e+00, 3.017820793469608e+00, 3.261639858176112e+00, 2.749525472345002e+00, 3.261639858176112e+00, 2.749525472345002e+00, 2.086354466230842e-01, 2.204059601757747e-01, 2.110032172591176e-01, 2.255831014380359e-01, 4.181705778354724e+00, 4.517441848039319e+00, 1.652633863866341e-01, 1.682566195246832e-01, 2.260555803234958e-01, 1.154971567441368e-01, 2.260555803234957e-01, 1.154971567441368e-01, 4.639440179711572e-04, 5.238658485569040e-04, 5.094353249560778e-04, 5.846184394476219e-04, 1.575095685522421e-02, 1.756494607718201e-02, 1.676483692355222e-04, 1.621078885140053e-04, 3.692226837994541e-04, 1.195663635385084e-04, 3.692226837994542e-04, 1.195663635385084e-04, 2.002939800053200e+02, 2.001965303792999e+02, 2.004058653092997e+02, 2.003045910004612e+02, 2.003004319430924e+02, 2.002004124847638e+02, 2.003964342310417e+02, 2.002985790588218e+02, 2.003511110645242e+02, 2.002507783711109e+02, 2.003511110645242e+02, 2.002507783711109e+02, 2.654493005823042e+01, 2.654216033980554e+01, 2.697035422736863e+01, 2.695488751406705e+01, 2.613602445821432e+01, 2.625014011463540e+01, 2.649917258141836e+01, 2.661875623568150e+01, 2.709497549174574e+01, 2.680115828245755e+01, 2.709497549174574e+01, 2.680115828245755e+01, 2.513954489913445e+00, 2.500909835629807e+00, 3.038035050576385e+00, 3.041710875928933e+00, 2.054840381323390e+00, 2.216492194503249e+00, 2.296384144924861e+00, 2.450548163677289e+00, 2.731622772739874e+00, 2.462551752719849e+00, 2.731622772739873e+00, 2.462551752719850e+00, 1.101464818389383e-01, 1.118317266487853e-01, 2.512250674435531e-01, 2.526651278623410e-01, 9.127000969829706e-02, 1.006614223416816e-01, 2.760090573528750e+01, 2.757653994811489e+01, 1.322603844430724e-01, 1.320307565451664e-01, 1.322603844430724e-01, 1.320307565451664e-01, 9.434987860942611e-05, 1.019001819088442e-04, 1.552060086704432e-04, 1.599396596685873e-04, 8.678572536929337e-05, 9.733503101459313e-05, 4.361016593683064e-02, 4.414813222922022e-02, 9.053066867557941e-05, 1.707416265445683e-04, 9.053066867557940e-05, 1.707416265445683e-04, 2.608014602604124e+00, 2.628479887856825e+00, 2.562119619136747e+00, 2.582664398295087e+00, 2.578231919439168e+00, 2.598850542201721e+00, 2.591665080716147e+00, 2.612064361686947e+00, 2.584947820824865e+00, 2.605452597880148e+00, 2.584947820824865e+00, 2.605452597880148e+00, 2.474328079828320e+00, 2.490747565004507e+00, 1.709037868112374e+00, 1.725091166495140e+00, 1.911716313049848e+00, 1.930179584568341e+00, 2.129734125902047e+00, 2.145219018430371e+00, 2.018030401364141e+00, 2.033599856343579e+00, 2.018030401364141e+00, 2.033599856343579e+00, 3.331478620785381e+00, 3.343907486637955e+00, 3.481085634488812e-01, 3.509648969403996e-01, 4.699241101637401e-01, 4.785775967904876e-01, 8.438092301650879e-01, 8.536907599346660e-01, 6.265933312297167e-01, 6.263517248620993e-01, 6.265933312297165e-01, 6.263517248620992e-01, 1.442319118475295e+00, 1.464214898264725e+00, 1.516721586771024e-02, 1.537548179738918e-02, 2.744336308784724e-02, 2.931144112316387e-02, 7.898029674659346e-01, 8.154622312962321e-01, 6.708380692677134e-02, 7.412088113597237e-02, 6.708380692677134e-02, 7.412088113597239e-02, 9.493064857806386e-04, 1.019387323136273e-03, 1.123392194333539e-05, 1.128533242253812e-05, 4.651161726741349e-05, 5.261412544938369e-05, 6.161633731507712e-02, 6.362269744164661e-02, 8.122513826435410e-05, 1.434412978042891e-04, 8.122513826435397e-05, 1.434412978042888e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_lgap_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_lgap", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.584883082222460e-06, 0.000000000000000e+00, 1.584889433337023e-06, 1.584870585551951e-06, 0.000000000000000e+00, 1.584880353187270e-06, 1.584823745439657e-06, 0.000000000000000e+00, 1.584815155926140e-06, 1.584965051367794e-06, 0.000000000000000e+00, 1.584995208746888e-06, 1.584875975436395e-06, 0.000000000000000e+00, 1.584918185216837e-06, 1.584875975436395e-06, 0.000000000000000e+00, 1.584918185216837e-06, 3.601073458327434e-04, 0.000000000000000e+00, 3.601548352883550e-04, 3.601080698628736e-04, 0.000000000000000e+00, 3.601597330975189e-04, 3.601676823159502e-04, 0.000000000000000e+00, 3.601769903622493e-04, 3.598898970982401e-04, 0.000000000000000e+00, 3.599107912024435e-04, 3.602751339718059e-04, 0.000000000000000e+00, 3.599418240026869e-04, 3.602751339718059e-04, 0.000000000000000e+00, 3.599418240026869e-04, 4.791040471407713e-02, 0.000000000000000e+00, 4.766891550041964e-02, 4.801968798186457e-02, 0.000000000000000e+00, 4.772554434894827e-02, 4.939536900478423e-02, 0.000000000000000e+00, 4.968957949467386e-02, 4.849761463996735e-02, 0.000000000000000e+00, 4.841685719614029e-02, 4.704275302368729e-02, 0.000000000000000e+00, 4.900507070227112e-02, 4.704275302368729e-02, 0.000000000000000e+00, 4.900507070227112e-02, 1.708633671581704e+00, 0.000000000000000e+00, 1.651431298274999e+00, 1.728385413261294e+00, 0.000000000000000e+00, 1.648256798582576e+00, 3.172096383993021e-02, 0.000000000000000e+00, 2.943305608245864e-02, 1.441153694566129e+00, 0.000000000000000e+00, 1.434842008960173e+00, 1.534885161236043e+00, 0.000000000000000e+00, 4.695456736798995e-01, 1.534885161236041e+00, 0.000000000000000e+00, 4.695456736799016e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.839601471790184e-25, 0.000000000000000e+00, 1.183561821331561e-21, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.110565065050903e-04, 0.000000000000000e+00, 1.111347410942160e-04, 1.110339943279696e-04, 0.000000000000000e+00, 1.111129827831254e-04, 1.110547452360534e-04, 0.000000000000000e+00, 1.111336282326185e-04, 1.110354326096087e-04, 0.000000000000000e+00, 1.111138652381854e-04, 1.110453558786133e-04, 0.000000000000000e+00, 1.111238668928292e-04, 1.110453558786133e-04, 0.000000000000000e+00, 1.111238668928292e-04, 1.812100768887118e-03, 0.000000000000000e+00, 1.812352543695141e-03, 1.780860096045559e-03, 0.000000000000000e+00, 1.782121531761239e-03, 1.822642061424360e-03, 0.000000000000000e+00, 1.820214884617641e-03, 1.795877715604995e-03, 0.000000000000000e+00, 1.792831504783537e-03, 1.785475011121924e-03, 0.000000000000000e+00, 1.795316712219848e-03, 1.785475011121924e-03, 0.000000000000000e+00, 1.795316712219848e-03, 7.541365710340270e-02, 0.000000000000000e+00, 7.602896976983153e-02, 6.267194241379155e-02, 0.000000000000000e+00, 6.266912006443283e-02, 9.985645280613445e-02, 0.000000000000000e+00, 9.016854681837964e-02, 9.373133372110154e-02, 0.000000000000000e+00, 8.487679636158553e-02, 6.756487408795922e-02, 0.000000000000000e+00, 7.856504387607798e-02, 6.756487408795925e-02, 0.000000000000000e+00, 7.856504387607798e-02, 1.309839248697745e-01, 0.000000000000000e+00, 1.571009445732877e-01, 1.015904218825330e+00, 0.000000000000000e+00, 1.014068324031689e+00, 5.225827135756337e-02, 0.000000000000000e+00, 9.994572883378759e-02, 2.298640676136562e-03, 0.000000000000000e+00, 2.301911084447339e-03, 6.602763807231979e-01, 0.000000000000000e+00, 1.396242868895778e+00, 6.602763807231979e-01, 0.000000000000000e+00, 1.396242868895778e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 7.221248073036634e-05, 0.000000000000000e+00, 6.253793825827054e-05, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 8.461860297818033e-02, 0.000000000000000e+00, 8.382857074925827e-02, 8.118494065214146e-02, 0.000000000000000e+00, 8.031359183512957e-02, 8.168143051430489e-02, 0.000000000000000e+00, 8.082743794768257e-02, 8.248908004102913e-02, 0.000000000000000e+00, 8.163987453350051e-02, 8.202331417689925e-02, 0.000000000000000e+00, 8.117186522859605e-02, 8.202331417689925e-02, 0.000000000000000e+00, 8.117186522859605e-02, 9.818107316370993e-02, 0.000000000000000e+00, 9.730485803723786e-02, 1.219497211984702e-01, 0.000000000000000e+00, 1.205755295830777e-01, 1.106570750076038e-01, 0.000000000000000e+00, 1.093468276666330e-01, 1.003452195596962e-01, 0.000000000000000e+00, 9.933488605093065e-02, 1.054701302395703e-01, 0.000000000000000e+00, 1.043521837943418e-01, 1.054701302395703e-01, 0.000000000000000e+00, 1.043521837943418e-01, 5.425040296266963e-02, 0.000000000000000e+00, 5.408347213993549e-02, 7.807581504386961e-01, 0.000000000000000e+00, 7.763098213660359e-01, 6.015095146289273e-01, 0.000000000000000e+00, 5.935779325189211e-01, 3.399114268255262e-01, 0.000000000000000e+00, 3.348924631436035e-01, 4.641120930703467e-01, 0.000000000000000e+00, 4.656702564965375e-01, 4.641120930703472e-01, 0.000000000000000e+00, 4.656702564965378e-01, 1.562350151212387e-01, 0.000000000000000e+00, 1.535413871241864e-01, 1.065378089965824e-28, 0.000000000000000e+00, 4.063472675183497e-28, 3.320557515389668e-12, 0.000000000000000e+00, 7.071460128749697e-11, 4.004267100236935e-01, 0.000000000000000e+00, 3.844409423991832e-01, 2.436782783409723e-02, 0.000000000000000e+00, 1.308868023916413e-01, 2.436782783409739e-02, 0.000000000000000e+00, 1.308868023916417e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.952797471314294e-02, 0.000000000000000e+00, 2.387716730317690e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
