
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_gds08_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_gds08", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [9.607075833180717e+02, 9.606845029138207e+02, 9.606291395088653e+02, 9.609715611587253e+02, 9.607854189418038e+02, 9.607854189418038e+02, 3.695637058980910e+01, 3.694935578173605e+01, 3.678902286510298e+01, 3.708138390320701e+01, 3.694966849828107e+01, 3.694966849828107e+01, 2.940235882970320e+00, 2.961788578219372e+00, 3.565489201707368e+00, 3.578905404774528e+00, 3.544742722112923e+00, 3.544742722112923e+00, 4.484894891555854e-01, 4.352150418207555e-01, 3.508130814558629e+00, 4.161961439741713e-01, 4.039108059797250e-01, 4.039108059797253e-01, -1.691639918779366e+00, -1.677129194579351e+00, -3.209529616826857e-01, -2.024093290611567e+00, -1.957261788555957e+00, -1.957261788555957e+00, 4.350534867076597e+01, 4.318922075694784e+01, 4.349241538074593e+01, 4.321330627232189e+01, 4.334417217130622e+01, 4.334417217130622e+01, 2.866911538873584e+01, 2.843528035644028e+01, 2.983245629414444e+01, 2.962319448313356e+01, 2.798299529989301e+01, 2.798299529989301e+01, 1.514940271191661e+00, 9.845434091671098e-01, 1.443306047760094e+00, 9.232426463740353e-01, 1.459157026172073e+00, 1.459157026172073e+00, 3.268045325002595e-01, 8.335307980371648e-01, 2.522362982215528e-01, 3.792906866672148e+00, 2.528199880884675e-01, 2.528199880884675e-01, -2.296966602014596e+00, -2.099260032861350e+00, -2.704002927666062e+00, -1.032557738401628e-01, -2.447604066571925e+00, -2.447604066571924e+00, 7.382393331877373e-01, 8.749047198760088e-01, 8.269086952870704e-01, 7.871139947702168e-01, 8.070141608336860e-01, 8.070141608336860e-01, 6.756662369933365e-01, 1.685146017921853e+00, 1.388820757847111e+00, 1.092597985545364e+00, 1.238851500157331e+00, 1.238851500157331e+00, 1.072903004318425e+00, 1.057911579757310e+00, 1.100028463855100e+00, 9.732918272546839e-01, 1.034724796287751e+00, 1.034724796287751e+00, 1.481331887892218e+00, -3.029735499424397e-01, -1.182008103666551e-01, 7.219086311612266e-01, -3.724283785041305e-02, -3.724283785041327e-02, -1.377862552373231e+00, -3.373129229049439e+00, -2.735428430551655e+00, -6.830300095656672e-02, -2.545276145012726e+00, -2.545276145012727e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_gds08_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_gds08", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-9.543420116422014e+02, -9.543189274897136e+02, -9.542635462643030e+02, -9.546060237047800e+02, -9.544198524188918e+02, -9.544198524188918e+02, -3.303040056997660e+01, -3.302338286101537e+01, -3.286294996541324e+01, -3.315522962853852e+01, -3.302366260241287e+01, -3.302366260241287e+01, -1.226065447417183e+00, -1.249100758766610e+00, -1.888980144991553e+00, -1.891286417266928e+00, -1.859478718281641e+00, -1.859478718281641e+00, -5.540647955843903e-01, -5.205881251133495e-01, -1.587491969805783e+00, -8.920644998365787e-01, -7.239659812004197e-01, -7.239659812004197e-01, -2.926844737875386e+00, -2.872532400604683e+00, -1.933354220883680e+00, -3.332237569151675e+00, -3.092111577667923e+00, -3.092111577667922e+00, -3.903693304453283e+01, -3.872055841239958e+01, -3.902398746555181e+01, -3.874466056416071e+01, -3.887563197925139e+01, -3.887563197925139e+01, -2.551578311925763e+01, -2.527223457183273e+01, -2.668625988783803e+01, -2.646836479638498e+01, -2.482086209486188e+01, -2.482086209486188e+01, 1.936027358303027e-02, 6.610745627554393e-01, -1.334688457002375e-02, 5.587968870674215e-01, 9.663897505978680e-02, 9.663897505978680e-02, -1.293062947041135e+00, -9.370666136947485e-01, -1.323092311879711e+00, -6.655239699692677e-01, -1.004012607016998e+00, -1.004012607016998e+00, -3.407906938692324e+00, -3.287534580957005e+00, -3.043440099795558e+00, -1.500672955139041e+00, -3.049556273577336e+00, -3.049556273577336e+00, 8.025711830087922e-01, 6.581740859104981e-01, 7.088958558787278e-01, 7.509315115361236e-01, 7.299101147314144e-01, 7.299101147314144e-01, 8.282101492540930e-01, -3.864346010698503e-01, -2.817579913022195e-02, 3.267795892953524e-01, 1.508507325300332e-01, 1.508507325300332e-01, 6.361990416875685e-01, -8.471708650188349e-01, -6.431862666309413e-01, -1.424361658016253e-01, -3.915929619813771e-01, -3.915929619813768e-01, -2.937499077855088e-01, -2.010226685930460e+00, -1.778444186810398e+00, 5.969159378743299e-02, -1.241940507438700e+00, -1.241940507438700e+00, -2.777592233224500e+00, -3.786884806562300e+00, -3.428033636729041e+00, -1.295410234748821e+00, -3.056210090982626e+00, -3.056210090982627e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_gds08_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_gds08", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [6.465558408889447e-06, 6.465504314368241e-06, 6.465247135945692e-06, 6.466052320295342e-06, 6.465632777057505e-06, 6.465632777057505e-06, 1.498213674029333e-03, 1.498203972832304e-03, 1.497869659939608e-03, 1.497597610737780e-03, 1.498093701227576e-03, 1.498093701227576e-03, 2.087894145121824e-01, 2.094815290984875e-01, 2.271002921854555e-01, 2.215377010814852e-01, 2.227053156391256e-01, 2.227053156391256e-01, 1.212783639246232e+01, 1.159308837356066e+01, 1.316911190273232e-01, 2.771712142089699e+01, 1.957499616309466e+01, 1.957499616309467e+01, 2.874952765754121e+05, 2.465546137483149e+05, 1.468181512983260e+03, 1.492465251230529e+06, 7.522070256195640e+05, 7.522070256195640e+05, 4.463987932311861e-04, 4.461530243974384e-04, 4.463865483604211e-04, 4.461695925050767e-04, 4.462746898771731e-04, 4.462746898771731e-04, 8.405710951977129e-03, 8.225420308312626e-03, 8.540671341115708e-03, 8.377662191483195e-03, 8.242192632024159e-03, 8.242192632024159e-03, 3.119433029115474e-01, 2.433121166868861e-01, 3.937539884428952e-01, 3.505402349909846e-01, 2.973293717959445e-01, 2.973293717959445e-01, 8.282011699658827e+01, 1.207275069070744e+01, 1.046004417152880e+02, 8.906969473199959e-03, 5.124476217261497e+01, 5.124476217261497e+01, 3.249256950004610e+06, 1.597482152034641e+06, 3.573149841128374e+06, 3.437938582102904e+02, 2.043738650702208e+06, 2.043738650702208e+06, 3.074431719955891e-01, 3.127951632558527e-01, 3.108978161438085e-01, 3.093465472861635e-01, 3.101217331306696e-01, 3.101217331306696e-01, 3.338635972182413e-01, 5.277855463435615e-01, 4.596408969843099e-01, 4.031650116453307e-01, 4.307748394546119e-01, 4.307748394546119e-01, 2.111649385648006e-01, 5.986104049931646e+00, 3.455983667980389e+00, 1.499685834607408e+00, 2.280243059795127e+00, 2.280243059795128e+00, 6.763744328316319e-01, 1.674445854271037e+03, 6.607838326576669e+02, 1.673974624492028e+00, 1.665281126261038e+02, 1.665281126261038e+02, 1.022742173599572e+05, 8.363882291868500e+07, 9.043637243187241e+06, 2.011089761174724e+02, 2.579643228134502e+06, 2.579643228134509e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
