
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_thakkar_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_thakkar", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.181944034148534e+03, 2.181951136690941e+03, 2.181995670830610e+03, 2.181879107841273e+03, 2.181947672391819e+03, 2.181947672391819e+03, 5.915691558853933e+01, 5.915640559519307e+01, 5.914726695035076e+01, 5.918810497892672e+01, 5.915715728630979e+01, 5.915715728630979e+01, 2.300921913797417e+00, 2.299244695235644e+00, 2.263455680951038e+00, 2.294300813936560e+00, 2.300295132139398e+00, 2.300295132139398e+00, 2.013538241104779e-01, 2.042707056310680e-01, 3.191632467605687e+00, 1.299982281587949e-01, 2.021944094473255e-01, 2.021944094473255e-01, 3.721002514256733e-03, 3.938063047698238e-03, 2.738896883789970e-02, 1.638842976638195e-03, 3.859219014042826e-03, 3.859219014042826e-03, 1.272960788620624e+02, 1.272933853967046e+02, 1.272960609142401e+02, 1.272939625217736e+02, 1.272943328146906e+02, 1.272943328146906e+02, 2.055236865309350e+01, 2.078009421321083e+01, 2.052336296188728e+01, 2.070055324918192e+01, 2.074429244934963e+01, 2.074429244934963e+01, 1.627720512560293e+00, 1.811623486370643e+00, 1.472679151796134e+00, 1.522541776454016e+00, 1.739123726649761e+00, 1.739123726649761e+00, 8.639954983362878e-02, 2.298370920854120e-01, 8.290983145537290e-02, 1.676342981181595e+01, 1.023061673551033e-01, 1.023061673551033e-01, 1.551636624650203e-03, 1.818004263484108e-03, 1.042481158156566e-03, 4.231087020382173e-02, 1.503880538944939e-03, 1.503880538944939e-03, 1.608991971789031e+00, 1.612939698260352e+00, 1.611330285486503e+00, 1.610130659603666e+00, 1.610713853871126e+00, 1.610713853871126e+00, 1.504700560082788e+00, 1.279825722640978e+00, 1.345535880710679e+00, 1.405277824816915e+00, 1.374392800301631e+00, 1.374392800301631e+00, 1.995762479142447e+00, 3.345430345501929e-01, 4.361681420275382e-01, 6.357621690413916e-01, 5.242884565544296e-01, 5.242884565544295e-01, 1.049049135429693e+00, 2.554227802775361e-02, 3.784719557472439e-02, 5.480676043507817e-01, 6.008062705102276e-02, 6.008062705102273e-02, 4.781277425934915e-03, 3.577236538407006e-04, 7.755255837157746e-04, 5.451742434586099e-02, 1.147593210252450e-03, 1.147593210252449e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_thakkar_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_thakkar", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.276357515460251e+03, 3.276375061245424e+03, 3.276462679797694e+03, 3.276175178490871e+03, 3.276366690412519e+03, 3.276366690412519e+03, 8.629348759255792e+01, 8.629412494388062e+01, 8.631876216363366e+01, 8.631291001119457e+01, 8.629455060053617e+01, 8.629455060053617e+01, 3.138369308439685e+00, 3.131448081759564e+00, 2.958219498208885e+00, 3.005248722771559e+00, 3.135845080767251e+00, 3.135845080767251e+00, 2.358748529933676e-01, 2.417647997211363e-01, 4.532414867555864e+00, 1.317461748794818e-01, 2.376229014497971e-01, 2.376229014497971e-01, 2.415883913899100e-03, 2.573907882642596e-03, 2.160366288421943e-02, 9.579351935196266e-04, 2.522034175082192e-03, 2.522034175082192e-03, 1.956833462185297e+02, 1.957805427978357e+02, 1.956934418836142e+02, 1.957690144439340e+02, 1.957329473909390e+02, 1.957329473909390e+02, 2.691209293526809e+01, 2.729641289862224e+01, 2.675457873407590e+01, 2.705287047030644e+01, 2.737949256971445e+01, 2.737949256971445e+01, 2.411085723598379e+00, 2.910413667892840e+00, 2.168102568730429e+00, 2.401342319530686e+00, 2.606995949421289e+00, 2.606995949421289e+00, 7.903811218743846e-02, 2.461658962330377e-01, 7.633882938529502e-02, 2.692368982462002e+01, 9.893340527244175e-02, 9.893340527244175e-02, 9.047826627633018e-04, 1.076651383221122e-03, 6.155313004047732e-04, 3.559800067505065e-02, 8.910921680615674e-04, 8.910921680615680e-04, 2.656917671921395e+00, 2.602438041370490e+00, 2.620390777793806e+00, 2.635200483757369e+00, 2.627664660913589e+00, 2.627664660913588e+00, 2.495527174317309e+00, 1.791453757478319e+00, 1.969897821591040e+00, 2.151150378563678e+00, 2.056949551614018e+00, 2.056949551614019e+00, 3.195940279409443e+00, 3.809223537222232e-01, 5.310068351539787e-01, 8.691105644389314e-01, 6.774083462064134e-01, 6.774083462064134e-01, 1.455587746068789e+00, 1.972649709572301e-02, 3.091039929229410e-02, 7.802128487120896e-01, 5.378783057625746e-02, 5.378783057625743e-02, 3.143023737866027e-03, 1.891803478442255e-04, 4.325286865387481e-04, 4.886426745175757e-02, 6.745988941138794e-04, 6.745988941138783e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_thakkar_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_thakkar", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [9.120726716059422e-07, 9.120707138579948e-07, 9.120503156941888e-07, 9.120826078705758e-07, 9.120717366584518e-07, 9.120717366584518e-07, 1.968797749646969e-04, 1.968862687113987e-04, 1.970405008333123e-04, 1.966497757074109e-04, 1.968805987528771e-04, 1.968805987528771e-04, 2.368961872753853e-02, 2.367561816831101e-02, 2.315034651866710e-02, 2.274074580942988e-02, 2.368492529519694e-02, 2.368492529519694e-02, 7.762698789843401e-01, 7.680117296323218e-01, 1.520144834335727e-02, 1.276661529345515e+00, 7.740657505299298e-01, 7.740657505299298e-01, 1.690268977313730e+02, 1.552908714520112e+02, 9.581025057468949e+00, 6.008195931179972e+02, 1.600725917062058e+02, 1.600725917062058e+02, 6.674611474180648e-05, 6.679336799001522e-05, 6.675063860136649e-05, 6.678738524333392e-05, 6.677077832718452e-05, 6.677077832718452e-05, 8.478694597466801e-04, 8.368686916080593e-04, 8.455316895704058e-04, 8.369759904836635e-04, 8.434496112963571e-04, 8.434496112963571e-04, 4.398243690244367e-02, 4.115462914545664e-02, 5.070979253795831e-02, 5.267185395803908e-02, 4.044256528213706e-02, 4.044256528213706e-02, 2.077059794146608e+00, 5.780613780430289e-01, 2.228259524357638e+00, 1.462014167956900e-03, 1.729298976398954e+00, 1.729298976398954e+00, 6.534429977998975e+02, 5.093129797167002e+02, 1.175353659616155e+03, 5.418783410643814e+00, 6.767105767788231e+02, 6.767105767788232e+02, 4.189073341688297e-02, 4.897890500343089e-02, 4.861169247257915e-02, 4.747153915733668e-02, 4.819097484961255e-02, 4.819097484961255e-02, 3.692418332255075e-02, 5.884697541011154e-02, 5.765619716676550e-02, 5.722807817219974e-02, 5.744632446646386e-02, 5.744632446646385e-02, 3.555287381279693e-02, 3.517035261792800e-01, 2.536096602643241e-01, 1.635256842189906e-01, 2.050843566382099e-01, 2.050843566382099e-01, 7.848576205699495e-02, 1.038667119588375e+01, 6.158836147635092e+00, 2.142559291955833e-01, 3.481473195121900e+00, 3.481473195121899e+00, 1.161353451987919e+02, 6.773859908925916e+03, 1.938006229891719e+03, 4.033990193902544e+00, 1.020888288465144e+03, 1.020888288465147e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
