
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_lkt_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_lkt", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.620019857714518e+03, 2.620016588799602e+03, 2.620034493410193e+03, 2.620087384623572e+03, 2.620017862224371e+03, 2.620017862224371e+03, 7.593597851799346e+01, 7.593233064989528e+01, 7.583847083953782e+01, 7.603258688361485e+01, 7.593474922076776e+01, 7.593474922076776e+01, 3.565686054781007e+00, 3.579622968729427e+00, 4.039346514482604e+00, 4.062741103901459e+00, 3.570652528974667e+00, 3.570652528974667e+00, 5.474634131960878e-01, 5.321949710707233e-01, 4.393443893885491e+00, 6.884042981802664e-01, 5.424220846709746e-01, 5.424220846709746e-01, 5.009591277681582e-01, 5.000041284552580e-01, 7.273802707490139e-01, 5.979760762365348e-01, 4.905754683726064e-01, 4.905754683726064e-01, 1.458073816965215e+02, 1.456628595473638e+02, 1.457932024368119e+02, 1.456808137129853e+02, 1.457323246279969e+02, 1.457323246279969e+02, 3.643600274168711e+01, 3.644019902831657e+01, 3.695335838997589e+01, 3.695004370121372e+01, 3.578967379062996e+01, 3.578967379062996e+01, 2.014525800498088e+00, 1.931561362272513e+00, 1.848843459352373e+00, 1.668194191399121e+00, 2.095947528451935e+00, 2.095947528451935e+00, 8.074450366320574e-01, 9.295002230290288e-01, 7.450045335346774e-01, 1.787977231831205e+01, 6.936563322189718e-01, 6.936563322189718e-01, 5.805996277894765e-01, 5.798143602507189e-01, 3.427430342249264e-01, 6.895357427168335e-01, 4.770742910603595e-01, 4.770742910603597e-01, 1.658172392364939e+00, 1.709708604517309e+00, 1.690781231914324e+00, 1.676474860776887e+00, 1.683586305788507e+00, 1.683586305788507e+00, 1.543092019676816e+00, 1.834690565293544e+00, 1.711934289888585e+00, 1.622583712224988e+00, 1.662168398175133e+00, 1.662168398175133e+00, 2.137453692392769e+00, 1.026554889302236e+00, 1.013914297262426e+00, 9.783381423208014e-01, 9.741677542915471e-01, 9.741677542915469e-01, 1.542993679603237e+00, 8.023586287783805e-01, 7.680289762629295e-01, 7.494226540501236e-01, 6.423524327944437e-01, 6.423524327944431e-01, 5.773381571176470e-01, 4.426494746907381e-01, 4.768849521104466e-01, 5.785634437556858e-01, 3.948424406271953e-01, 3.948424406271957e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_lkt_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_lkt", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([2.716514038289150e+03, 2.716550958199856e+03, 2.716691059941472e+03, 2.716086956627683e+03, 2.716533714298550e+03, 2.716533714298550e+03, 6.221012457309347e+01, 6.221644037960746e+01, 6.239490252914108e+01, 6.211344674694875e+01, 6.221390308147914e+01, 6.221390308147914e+01, 1.094522902781697e+00, 1.059826028248093e+00, 2.900269913146415e-02, 8.948882901424035e-02, 1.082041885192421e+00, 1.082041885192421e+00, -3.132077541117387e-01, -2.823095015969685e-01, 2.691284680563703e+00, -6.340007361412956e-01, -3.034058246276649e-01, -3.034058246276649e-01, -5.009591277681574e-01, -5.000041284552569e-01, -7.273568454279752e-01, -5.979760762365345e-01, -4.905754683726053e-01, -4.905754683726053e-01, 1.754819589881908e+02, 1.758242088128715e+02, 1.755165587182279e+02, 1.757826943296569e+02, 1.756582302176936e+02, 1.756582302176936e+02, 7.218900256401058e-01, 1.491899679195334e+00, -3.559070812499296e-01, 2.501158116374397e-01, 2.618966193032518e+00, 2.618966193032518e+00, 1.884959906037884e+00, 2.854566341909740e+00, 1.644399123959092e+00, 2.286345083410706e+00, 2.147006353670609e+00, 2.147006353670609e+00, -7.982750314634732e-01, -7.750366344453338e-01, -7.351321526856275e-01, 2.639762679996610e+01, -6.683435352674624e-01, -6.683435352674624e-01, -5.805996277894765e-01, -5.798143602507190e-01, -3.427430342249262e-01, -6.889698643037435e-01, -4.770742910603593e-01, -4.770742910603595e-01, 2.675308212593581e+00, 2.566693084792683e+00, 2.607202079161737e+00, 2.637329733418404e+00, 2.622395796935736e+00, 2.622395796935736e+00, 2.517440298336440e+00, 9.207376260673648e-01, 1.449969946911247e+00, 1.905623593975912e+00, 1.683008416317635e+00, 1.683008416317636e+00, 3.120635529182406e+00, -6.918737313435231e-01, -4.081343973026602e-01, 3.165925648311474e-01, -6.543891766595930e-02, -6.543891766595925e-02, 6.713195485631127e-01, -8.023522141539720e-01, -7.678609330165395e-01, 4.732035824085724e-01, -6.381704836210227e-01, -6.381704836210220e-01, -5.773381571176422e-01, -4.426494746907382e-01, -4.768849521104467e-01, -5.746748616366635e-01, -3.948424406271951e-01, -3.948424406271954e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_lkt_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_lkt", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([4.178298092336353e-06, 4.178248058403674e-06, 4.178030800355092e-06, 4.178850031609563e-06, 4.178271656361920e-06, 4.178271656361920e-06, 1.029899935612785e-03, 1.029860029738463e-03, 1.028636030697672e-03, 1.030089751459665e-03, 1.029866249648652e-03, 1.029866249648652e-03, 1.649016290449432e-01, 1.657910781642372e-01, 1.905933412157867e-01, 1.856224040947131e-01, 1.652238742463027e-01, 1.652238742463027e-01, 9.541534061967248e+00, 9.099908306090619e+00, 8.945643200602252e-02, 2.678092014047854e+01, 9.405865547443970e+00, 9.405865547443970e+00, 5.964453786572183e+04, 5.189989231390608e+04, 7.728924937140192e+02, 5.402227120247934e+05, 5.355685357776575e+04, 5.355685357776575e+04, 2.735599219600544e-04, 2.730750151914008e-04, 2.735106368181362e-04, 2.731335879080286e-04, 2.733107815040556e-04, 2.733107815040556e-04, 6.929614201761982e-03, 6.757128974643613e-03, 7.029410699179046e-03, 6.892338308427888e-03, 6.686148244775207e-03, 6.686148244775207e-03, 2.146179578164346e-01, 1.377511386010153e-01, 2.544685906271092e-01, 1.909952376150255e-01, 1.867486746205813e-01, 1.867486746205813e-01, 6.855254044864024e+01, 9.814261371705069e+00, 7.122472264830323e+01, 4.898522406477212e-03, 4.407845168249253e+01, 4.407845168249253e+01, 6.017464903633265e+05, 4.031448391945296e+05, 9.574968365468715e+05, 2.852449416094581e+02, 5.329472753722589e+05, 5.329472753722589e+05, 1.495605841450705e-01, 1.614582375595988e-01, 1.572401873054831e-01, 1.539442989997253e-01, 1.555963787965189e-01, 1.555963787965189e-01, 1.631520431193643e-01, 3.681636451259764e-01, 2.967274054841853e-01, 2.393299316679914e-01, 2.672589949680236e-01, 2.672589949680235e-01, 1.205151941915424e-01, 4.783898856238538e+00, 2.715477908310656e+00, 1.127957198653227e+00, 1.763686214263358e+00, 1.763686214263360e+00, 5.093421052839322e-01, 9.728386824797595e+02, 3.920864035992009e+02, 1.247640405344973e+00, 1.283589610004180e+02, 1.283589610004180e+02, 3.705071661734559e+04, 1.964459228149110e+07, 2.865708569560217e+06, 1.478185259098034e+02, 8.682210925506414e+05, 8.682210925506451e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
