
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_fr_pw86_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_fr_pw86", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.188436203616492e+03, 2.188444592046848e+03, 2.188491777715147e+03, 2.188366771521540e+03, 2.188430865431360e+03, 2.188430865431360e+03, 5.927736890877487e+01, 5.927672017354884e+01, 5.926462458540913e+01, 5.930816893048097e+01, 5.927945827520145e+01, 5.927945827520145e+01, 2.306958501664981e+00, 2.304670392822494e+00, 2.253178948686236e+00, 2.287258834968805e+00, 2.282915716281323e+00, 2.282915716281323e+00, 1.822035693260926e-01, 1.861745829984131e-01, 3.105825093187625e+00, 1.163396851706177e-01, 1.747570477205679e-01, 1.747570477205678e-01, 7.197232103419853e-04, 7.777222059693423e-04, 1.287735755677170e-02, 3.007541130069798e-04, 5.118959386029760e-04, 5.118959386029759e-04, 1.279272198634013e+02, 1.279290189946269e+02, 1.279276926719611e+02, 1.279292739287933e+02, 1.279279118960677e+02, 1.279279118960677e+02, 2.042550644201204e+01, 2.066982687692689e+01, 2.032847921801609e+01, 2.054444529414529e+01, 2.060693350438885e+01, 2.060693350438885e+01, 1.669501475929562e+00, 1.871421509662076e+00, 1.444951527831714e+00, 1.479164323826053e+00, 1.716520397163885e+00, 1.716520397163885e+00, 6.389797295383917e-02, 1.945679888660921e-01, 5.591618863757063e-02, 1.695691899471802e+01, 8.161574690437987e-02, 8.161574690437987e-02, 1.934488345326653e-04, 2.853838481686388e-04, 1.549812189624393e-04, 2.807604877144121e-02, 2.431487754126763e-04, 2.431487754126764e-04, 1.583504513897767e+00, 1.581505117682021e+00, 1.581908039298174e+00, 1.582448381449447e+00, 1.582146151494473e+00, 1.582146151494473e+00, 1.494835928679914e+00, 1.239562437238167e+00, 1.309271642635437e+00, 1.376276813602769e+00, 1.341382298460933e+00, 1.341382298460933e+00, 2.060531660099083e+00, 2.944028671660585e-01, 4.010853374264094e-01, 6.276871352474704e-01, 5.009016443352383e-01, 5.009016443352382e-01, 1.053444468490708e+00, 1.205954987963609e-02, 2.003348074412501e-02, 5.647244496351242e-01, 4.150356740938839e-02, 4.150356740938840e-02, 1.274275608703888e-03, 2.944725872273705e-05, 1.041214822149845e-04, 3.730323949469057e-02, 2.081226948835065e-04, 2.081226948835061e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_fr_pw86_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_fr_pw86", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.304362940136193e+03, 3.304354674871292e+03, 3.304387360580570e+03, 3.304372413675630e+03, 3.304465596306604e+03, 3.304484489569369e+03, 3.304189814775911e+03, 3.304132985171359e+03, 3.304377499475706e+03, 3.304273566546318e+03, 3.304377499475706e+03, 3.304273566546318e+03, 8.698110870020768e+01, 8.698032647900580e+01, 8.698185133141099e+01, 8.698083519027567e+01, 8.699755642870838e+01, 8.700270985182581e+01, 8.699850021849132e+01, 8.700266662305627e+01, 8.695139738144969e+01, 8.701992651193731e+01, 8.695139738144969e+01, 8.701992651193731e+01, 3.231979012042248e+00, 3.253338234913798e+00, 3.223542230921617e+00, 3.249544617592349e+00, 3.117372225513888e+00, 3.086951203093002e+00, 3.146834085822183e+00, 3.156360966842060e+00, 3.298271128898262e+00, 3.009867562895636e+00, 3.298271128898262e+00, 3.009867562895636e+00, 2.323111683387699e-01, 2.479128922000394e-01, 2.364956675171359e-01, 2.547464928227756e-01, 4.261818058444130e+00, 4.537967450647535e+00, 1.491816435612712e-01, 1.529941261376778e-01, 2.525222089038994e-01, 8.568292091178402e-02, 2.525222089038992e-01, 8.568292091178399e-02, 7.741453190855260e-04, 8.543597499886902e-04, 8.302982542662699e-04, 9.279328537495459e-04, 1.456921459938418e-02, 1.597473734262414e-02, 3.451699352425011e-04, 3.369214141246567e-04, 6.445523044492743e-04, 2.379676822320895e-04, 6.445523044492746e-04, 2.379676822320893e-04, 1.982176601066978e+02, 1.981207567501755e+02, 1.983399775576378e+02, 1.982388785408661e+02, 1.982246305285641e+02, 1.981249419663471e+02, 1.983295797751549e+02, 1.982322454425882e+02, 1.982801387653769e+02, 1.981800299944702e+02, 1.982801387653769e+02, 1.981800299944702e+02, 2.802303624989217e+01, 2.802030196807277e+01, 2.840121833398313e+01, 2.838660682358774e+01, 2.777563167432948e+01, 2.784216763511345e+01, 2.809881780035208e+01, 2.817135478554184e+01, 2.842713904423236e+01, 2.823785478739318e+01, 2.842713904423236e+01, 2.823785478739318e+01, 2.489209752796969e+00, 2.476198215045380e+00, 3.026647873198906e+00, 3.030867030545502e+00, 2.041980346870020e+00, 2.197868672255468e+00, 2.282926275001436e+00, 2.435595434086026e+00, 2.701329938955468e+00, 2.435958299429067e+00, 2.701329938955468e+00, 2.435958299429068e+00, 8.061662322639589e-02, 8.183048167630427e-02, 2.530922768276248e-01, 2.553453372766210e-01, 6.734204095796534e-02, 7.380177951013916e-02, 2.750957294013856e+01, 2.748554401171046e+01, 1.005617761345764e-01, 1.090726739956275e-01, 1.005617761345764e-01, 1.090726739956275e-01, 2.105749039652238e-04, 2.272095910880669e-04, 3.184299928196932e-04, 3.287863842966825e-04, 1.681357550284087e-04, 1.823956741679474e-04, 3.452543130336173e-02, 3.498175043294403e-02, 1.864216203897494e-04, 3.105608158052698e-04, 1.864216203897495e-04, 3.105608158052696e-04, 2.606797759071882e+00, 2.627324287694447e+00, 2.553365491397074e+00, 2.574138134006296e+00, 2.572685815506714e+00, 2.593500661832089e+00, 2.588415606250513e+00, 2.608926401692957e+00, 2.580607701330328e+00, 2.601264214286350e+00, 2.580607701330328e+00, 2.601264214286350e+00, 2.473996774738782e+00, 2.490417252200220e+00, 1.738880212664774e+00, 1.753460858380784e+00, 1.902081072416572e+00, 1.919371127035226e+00, 2.106220540502142e+00, 2.121622101956742e+00, 1.996922922061870e+00, 2.012169596776051e+00, 1.996922922061870e+00, 2.012169596776051e+00, 3.316758474997986e+00, 3.330098838821858e+00, 3.859750893220213e-01, 3.898696919072344e-01, 5.301239499912817e-01, 5.390224340496376e-01, 8.696816215728159e-01, 8.789748289482587e-01, 6.794096926294221e-01, 6.785168982350204e-01, 6.794096926294219e-01, 6.785168982350203e-01, 1.471236425961900e+00, 1.490647566091700e+00, 1.420758695248949e-02, 1.437111781429250e-02, 2.357281932058958e-02, 2.490552782169444e-02, 7.948050801143001e-01, 8.187098963167644e-01, 5.013122728375457e-02, 5.441014481911735e-02, 5.013122728375460e-02, 5.441014481911739e-02, 1.408781844722221e-03, 1.489053213304605e-03, 3.427360080214891e-05, 3.248925000445974e-05, 1.121249748464831e-04, 1.229861880756361e-04, 4.621915214707874e-02, 4.759606030492585e-02, 1.590505341685613e-04, 2.690631058626823e-04, 1.590505341685609e-04, 2.690631058626815e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_fr_pw86_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_fr_pw86", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.737016055481799e-06, 0.000000000000000e+00, 1.737023313245545e-06, 1.737006081965522e-06, 0.000000000000000e+00, 1.737016063791824e-06, 1.736961674357472e-06, 0.000000000000000e+00, 1.736955929035853e-06, 1.737074599593488e-06, 0.000000000000000e+00, 1.737099755628250e-06, 1.737010738313756e-06, 0.000000000000000e+00, 1.737033082309116e-06, 1.737010738313756e-06, 0.000000000000000e+00, 1.737033082309116e-06, 3.780991556514964e-04, 0.000000000000000e+00, 3.782480792219412e-04, 3.781123281506277e-04, 0.000000000000000e+00, 3.782719151927902e-04, 3.785386474998153e-04, 0.000000000000000e+00, 3.786434480524666e-04, 3.776153150388672e-04, 0.000000000000000e+00, 3.777465858780276e-04, 3.782362185878849e-04, 0.000000000000000e+00, 3.781004105410207e-04, 3.782362185878849e-04, 0.000000000000000e+00, 3.781004105410207e-04, 4.262536897225096e-02, 0.000000000000000e+00, 4.329662945675628e-02, 4.242007542520737e-02, 0.000000000000000e+00, 4.324458246317357e-02, 3.973358004851462e-02, 0.000000000000000e+00, 3.862138664131829e-02, 3.835873388497123e-02, 0.000000000000000e+00, 3.873287309372211e-02, 4.404997598713314e-02, 0.000000000000000e+00, 3.277539713475586e-02, 4.404997598713314e-02, 0.000000000000000e+00, 3.277539713475586e-02, 9.499152810428974e-01, 0.000000000000000e+00, 9.204705027566503e-01, 9.611528753136608e-01, 0.000000000000000e+00, 9.256564353704697e-01, 2.853273605958145e-02, 0.000000000000000e+00, 2.860439546510989e-02, 1.175961752561885e+00, 0.000000000000000e+00, 1.145235819908979e+00, 8.530452787705989e-01, 0.000000000000000e+00, 1.811087720399742e+00, 8.530452787705990e-01, 0.000000000000000e+00, 1.811087720399743e+00, 1.177998918750909e+02, 0.000000000000000e+00, 1.077195389754377e+02, 1.126183888899011e+02, 0.000000000000000e+00, 1.020102504508601e+02, 7.639796147961409e+00, 0.000000000000000e+00, 7.067474348891452e+00, 2.324161118472535e+02, 0.000000000000000e+00, 2.353557485886568e+02, 1.382182761897511e+02, 0.000000000000000e+00, 4.422164982242690e+02, 1.382182761897511e+02, 0.000000000000000e+00, 4.422164982242696e+02, 1.216556906770736e-04, 0.000000000000000e+00, 1.217438583775723e-04, 1.215687141923012e-04, 0.000000000000000e+00, 1.216599256710289e-04, 1.216506495027898e-04, 0.000000000000000e+00, 1.217408141178136e-04, 1.215760725296523e-04, 0.000000000000000e+00, 1.216646048080197e-04, 1.216117251965667e-04, 0.000000000000000e+00, 1.217020830088863e-04, 1.216117251965667e-04, 0.000000000000000e+00, 1.217020830088863e-04, 1.395174836975111e-03, 0.000000000000000e+00, 1.395330494153597e-03, 1.385084877918045e-03, 0.000000000000000e+00, 1.385732116997686e-03, 1.366432927985952e-03, 0.000000000000000e+00, 1.375291859031886e-03, 1.358343621335601e-03, 0.000000000000000e+00, 1.366508031564734e-03, 1.409945541072466e-03, 0.000000000000000e+00, 1.393345650267362e-03, 1.409945541072466e-03, 0.000000000000000e+00, 1.393345650267362e-03, 8.121849434307477e-02, 0.000000000000000e+00, 8.191320840436557e-02, 6.037114824812483e-02, 0.000000000000000e+00, 5.997519237740533e-02, 1.042314409251697e-01, 0.000000000000000e+00, 9.579794798520266e-02, 9.578871296720622e-02, 0.000000000000000e+00, 8.720373912056897e-02, 7.385201273132601e-02, 0.000000000000000e+00, 8.552919782339247e-02, 7.385201273132604e-02, 0.000000000000000e+00, 8.552919782339247e-02, 1.704516467376155e+00, 0.000000000000000e+00, 1.699577508515770e+00, 6.383656285306846e-01, 0.000000000000000e+00, 6.336610603835839e-01, 2.023227550376810e+00, 0.000000000000000e+00, 1.877105486936805e+00, 2.178679172306403e-03, 0.000000000000000e+00, 2.180986833004254e-03, 1.551733913411985e+00, 0.000000000000000e+00, 1.631474229182805e+00, 1.551733913411985e+00, 0.000000000000000e+00, 1.631474229182805e+00, 3.982132827519650e+02, 0.000000000000000e+00, 3.561430613118859e+02, 2.646321079177138e+02, 0.000000000000000e+00, 2.509844969627130e+02, 7.969442413632453e+02, 0.000000000000000e+00, 7.672573513697259e+02, 3.873903737892369e+00, 0.000000000000000e+00, 3.783852667574120e+00, 5.853326671597831e+02, 0.000000000000000e+00, 3.723788004091508e+02, 5.853326671597816e+02, 0.000000000000000e+00, 3.723788004091513e+02, 6.418978962546758e-02, 0.000000000000000e+00, 6.320467670270162e-02, 7.726756684313495e-02, 0.000000000000000e+00, 7.609926826597035e-02, 7.333648311138938e-02, 0.000000000000000e+00, 7.218211607939724e-02, 6.951408987032084e-02, 0.000000000000000e+00, 6.846853949993154e-02, 7.148678953112635e-02, 0.000000000000000e+00, 7.038455110146571e-02, 7.148678953112635e-02, 0.000000000000000e+00, 7.038455110146571e-02, 6.442512798665485e-02, 0.000000000000000e+00, 6.374741218508474e-02, 1.106087322028325e-01, 0.000000000000000e+00, 1.099160720808787e-01, 1.144433315494355e-01, 0.000000000000000e+00, 1.135624689183118e-01, 1.104406658582423e-01, 0.000000000000000e+00, 1.093080986939405e-01, 1.143477544088920e-01, 0.000000000000000e+00, 1.132392467873559e-01, 1.143477544088920e-01, 0.000000000000000e+00, 1.132392467873559e-01, 5.340234397551664e-02, 0.000000000000000e+00, 5.276469915658685e-02, 4.346440106797695e-01, 0.000000000000000e+00, 4.318654799830040e-01, 3.532841804271289e-01, 0.000000000000000e+00, 3.520074205803938e-01, 2.899103238003511e-01, 0.000000000000000e+00, 2.869541749156450e-01, 3.219199021518477e-01, 0.000000000000000e+00, 3.241486048457516e-01, 3.219199021518481e-01, 0.000000000000000e+00, 3.241486048457518e-01, 1.399270003694158e-01, 0.000000000000000e+00, 1.388573642364554e-01, 7.590976221364621e+00, 0.000000000000000e+00, 7.518751631874145e+00, 4.888845592868736e+00, 0.000000000000000e+00, 4.699453902638159e+00, 3.851599914002648e-01, 0.000000000000000e+00, 3.748511942509938e-01, 2.906141752667039e+00, 0.000000000000000e+00, 2.918905215284751e+00, 2.906141752667036e+00, 0.000000000000000e+00, 2.918905215284749e+00, 6.485583149630426e+01, 0.000000000000000e+00, 6.218320252184258e+01, 2.770551755253548e+03, 0.000000000000000e+00, 3.471172986061452e+03, 8.446062455572711e+02, 0.000000000000000e+00, 7.943412474043994e+02, 3.216748799161208e+00, 0.000000000000000e+00, 3.122861023011286e+00, 8.431883790199855e+02, 0.000000000000000e+00, 4.271524004158866e+02, 8.431883790199887e+02, 0.000000000000000e+00, 4.271524004158885e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
