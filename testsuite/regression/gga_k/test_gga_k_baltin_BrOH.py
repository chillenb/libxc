
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_baltin_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_baltin", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.600175672602113e+03, 2.600174549812872e+03, 2.600198714649689e+03, 2.600216522232813e+03, 2.600174836614499e+03, 2.600174836614499e+03, 7.432247481925128e+01, 7.431958057004502e+01, 7.424623189473877e+01, 7.440423527461294e+01, 7.432161940642384e+01, 7.432161940642384e+01, 3.317310853625861e+00, 3.325719381101763e+00, 3.599937312529758e+00, 3.629515943343915e+00, 3.320297973636198e+00, 3.320297973636198e+00, 4.288178369330796e-01, 4.221280472723279e-01, 4.226046707944329e+00, 4.570871038294967e-01, 4.265422279480348e-01, 4.265422279480348e-01, 2.787808397322955e-01, 2.782959698962966e-01, 4.126222967401774e-01, 3.323171477144340e-01, 2.730471290666128e-01, 2.730471290666128e-01, 1.457734334593454e+02, 1.456469057120913e+02, 1.457610646577219e+02, 1.456626706410994e+02, 1.457076966852073e+02, 1.457076966852073e+02, 3.253907617365877e+01, 3.265295097164643e+01, 3.284252448496725e+01, 3.292832453141631e+01, 3.223183868764306e+01, 3.223183868764306e+01, 1.987554381961351e+00, 1.940168580253140e+00, 1.818585892222607e+00, 1.674687839377165e+00, 2.078681347430344e+00, 2.078681347430344e+00, 4.907513692017224e-01, 6.547094963138588e-01, 4.549146236605346e-01, 1.795953828504581e+01, 4.406334444295272e-01, 4.406334444295272e-01, 3.226560572932783e-01, 3.222506219680456e-01, 1.904866864567462e-01, 3.996102627710766e-01, 2.651504719214383e-01, 2.651504719214384e-01, 1.661689547139537e+00, 1.717095796593059e+00, 1.697264817748704e+00, 1.681892525919608e+00, 1.689577403942844e+00, 1.689577403942844e+00, 1.545394517637002e+00, 1.745496000553552e+00, 1.678951234189607e+00, 1.620476519619996e+00, 1.647406150128155e+00, 1.647406150128155e+00, 2.147058001957260e+00, 7.767904703524294e-01, 8.323491497921645e-01, 9.120740044873874e-01, 8.573578808036483e-01, 8.573578808036481e-01, 1.457423970855004e+00, 4.530656458048505e-01, 4.400743718692580e-01, 7.221333326120244e-01, 3.847831967660173e-01, 3.847831967660171e-01, 3.213892892469343e-01, 2.459262341395880e-01, 2.649716629742129e-01, 3.468304520234979e-01, 2.194357832515998e-01, 2.194357832515999e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_baltin_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_baltin", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([2.914894068296843e+03, 2.914921964878336e+03, 2.915036962744889e+03, 2.914580333066054e+03, 2.914908859044580e+03, 2.914908859044580e+03, 7.185756016383861e+01, 7.186106798915880e+01, 7.196331817560677e+01, 7.181748868039753e+01, 7.185997658209968e+01, 7.185997658209968e+01, 2.053943349265155e+00, 2.034513309060712e+00, 1.478592700636002e+00, 1.529295139259345e+00, 2.046935078541959e+00, 2.046935078541959e+00, -2.683519173632342e-02, -9.369279356734360e-03, 3.489195633404599e+00, -2.457953367735952e-01, -2.134212954819288e-02, -2.134212954819288e-02, -2.775269378804825e-01, -2.769202404769248e-01, -3.898942703575897e-01, -3.320285704559948e-01, -2.716999232187661e-01, -2.716999232187661e-01, 1.816550392200461e+02, 1.818980444625952e+02, 1.816796963728711e+02, 1.818686527008241e+02, 1.817799750062160e+02, 1.817799750062160e+02, 1.365886482413282e+01, 1.419828357933256e+01, 1.309262515577536e+01, 1.351486064742464e+01, 1.475079645384898e+01, 1.475079645384898e+01, 2.083691482406491e+00, 2.863652475626426e+00, 1.847212017622279e+00, 2.313353648126109e+00, 2.311425484125311e+00, 2.311425484125311e+00, -3.766966425367487e-01, -2.469462226059330e-01, -3.437648919961310e-01, 2.648390391680652e+01, -2.881286398940419e-01, -2.881286398940419e-01, -3.223875012363533e-01, -3.218998674617301e-01, -1.902896473497584e-01, -3.554433322178572e-01, -2.648592742944317e-01, -2.648592742944321e-01, 2.673226723490356e+00, 2.571659005575428e+00, 2.608009522469606e+00, 2.636148207265526e+00, 2.622071377398628e+00, 2.622071377398628e+00, 2.515738152527770e+00, 1.310703655874479e+00, 1.655589280075993e+00, 1.983027808188262e+00, 1.817744740899555e+00, 1.817744740899555e+00, 3.134023275339406e+00, -1.317402953909887e-01, 7.752321472102321e-02, 5.750331401530938e-01, 3.059569117254712e-01, 3.059569117254707e-01, 1.028766760259231e+00, -4.335694724065430e-01, -4.043440177074057e-01, 6.054396328494155e-01, -3.096451413898176e-01, -3.096451413898168e-01, -3.196669729108829e-01, -2.458999426425209e-01, -2.648767870584549e-01, -2.784430525735190e-01, -2.192254584728084e-01, -2.192254584728084e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_baltin_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_baltin", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([3.592253490685868e-06, 3.592227332086913e-06, 3.592091372100133e-06, 3.592520124181632e-06, 3.592239856530842e-06, 3.592239856530842e-06, 8.324562077992464e-04, 8.324509665989160e-04, 8.322041506226257e-04, 8.321002233859641e-04, 8.324428737144826e-04, 8.324428737144826e-04, 1.181897812178418e-01, 1.185544947375194e-01, 1.285542542708194e-01, 1.255651304772413e-01, 1.183226284196577e-01, 1.183226284196577e-01, 5.772747115844119e+00, 5.548160644412912e+00, 6.865451924320315e-02, 1.514849980733259e+01, 5.704126854658000e+00, 5.704126854658000e+00, 3.313585436984547e+04, 2.883327350772563e+04, 4.293889868128603e+02, 3.001237289026630e+05, 2.975380754320322e+04, 2.975380754320322e+04, 2.483240742194492e-04, 2.481916270792711e-04, 2.483100955162640e-04, 2.482071161366445e-04, 2.482567440108742e-04, 2.482567440108742e-04, 4.685539017695053e-03, 4.587878728423546e-03, 4.725804867297683e-03, 4.648474929367943e-03, 4.568645188276089e-03, 4.568645188276089e-03, 1.791028484358939e-01, 1.397375924209841e-01, 2.096238579838959e-01, 1.847370426938315e-01, 1.599487518197421e-01, 1.599487518197421e-01, 3.819649883144105e+01, 5.650427768394254e+00, 3.970368902574737e+01, 4.965716897011000e-03, 2.470405238220985e+01, 2.470405238220985e+01, 3.343036057574037e+05, 2.239693551080720e+05, 5.319426869704843e+05, 1.585067133580357e+02, 2.960818196512550e+05, 2.960818196512550e+05, 1.630130669330603e-01, 1.656519919028276e-01, 1.646994854635133e-01, 1.639696185150274e-01, 1.643343772089836e-01, 1.643343772089836e-01, 1.797722783260950e-01, 2.753727138508627e-01, 2.416236780012150e-01, 2.150829163496848e-01, 2.280921097408789e-01, 2.280921097408788e-01, 1.212297504918169e-01, 2.839901273380416e+00, 1.695207155402426e+00, 8.112974263381276e-01, 1.172593851626281e+00, 1.172593851626282e+00, 3.753114585727182e-01, 5.404672968016411e+02, 2.178399391543127e+02, 9.618467649761995e-01, 7.143376849016799e+01, 7.143376849016798e+01, 2.058373145408095e+04, 1.091366237860617e+07, 1.592060316422343e+06, 8.226769980162931e+01, 4.823450514170231e+05, 4.823450514170252e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
