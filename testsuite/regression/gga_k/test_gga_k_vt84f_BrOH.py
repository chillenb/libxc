
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_vt84f_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_vt84f", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.909332393697524e+03, 2.909318253643483e+03, 2.909306444788078e+03, 2.909536975971356e+03, 2.909324508116747e+03, 2.909324508116747e+03, 8.803286705340972e+01, 8.802694478219965e+01, 8.787146337027279e+01, 8.817676852999507e+01, 8.803057105876795e+01, 8.803057105876795e+01, 4.229811867202159e+00, 4.243021160820789e+00, 4.611224400558929e+00, 4.650028462182205e+00, 4.234533741553969e+00, 4.234533741553969e+00, 5.669897879791564e-01, 5.534297051530430e-01, 5.213768425055315e+00, 6.954260278275379e-01, 5.624368530164344e-01, 5.624368530164344e-01, 5.009598633586017e-01, 5.000050156189183e-01, 7.275451626241315e-01, 5.979761088766495e-01, 4.905763354809727e-01, 4.905763354809727e-01, 1.551959554829857e+02, 1.548953588025146e+02, 1.551661727361675e+02, 1.549324161900968e+02, 1.550402595320312e+02, 1.550402595320312e+02, 4.168693948128171e+01, 4.184294543596406e+01, 4.205812796155200e+01, 4.217823903950968e+01, 4.131354329642454e+01, 4.131354329642454e+01, 2.287051473122640e+00, 1.924912477315940e+00, 2.117810300103383e+00, 1.699735202202469e+00, 2.334160948940931e+00, 2.334160948940931e+00, 8.101464996733412e-01, 9.449791266177070e-01, 7.477129983341478e-01, 1.782239479007008e+01, 6.980926528639886e-01, 6.980926528639886e-01, 5.805996569036479e-01, 5.798144099819073e-01, 3.427430607738863e-01, 6.901488969575742e-01, 4.770743327186012e-01, 4.770743327186012e-01, 1.641453910959592e+00, 1.698038285513692e+00, 1.672428042547482e+00, 1.656442980703591e+00, 1.663978829879093e+00, 1.663978829879093e+00, 1.531089551537730e+00, 2.187592769969123e+00, 1.975724555464430e+00, 1.740467804468432e+00, 1.856107009835645e+00, 1.856107009835645e+00, 2.136555376586103e+00, 1.054682941258563e+00, 1.071928764306689e+00, 1.161832771799851e+00, 1.096870551269753e+00, 1.096870551269753e+00, 1.840096251592753e+00, 8.024692757584109e-01, 7.684054774157054e-01, 8.881450157592059e-01, 6.439530006387402e-01, 6.439530006387398e-01, 5.773393613405016e-01, 4.426494750567390e-01, 4.768849565343908e-01, 5.800293058844211e-01, 3.948424668856000e-01, 3.948424668856005e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_vt84f_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_vt84f", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([1.931707127251217e+03, 1.931743623265778e+03, 1.931874141300757e+03, 1.931277256220355e+03, 1.931726643895387e+03, 1.931726643895387e+03, 4.465444534372395e+01, 4.465621310463246e+01, 4.470942034679539e+01, 4.463779911583366e+01, 4.465573470266809e+01, 4.465573470266809e+01, 2.032262957485464e+00, 2.043178228852854e+00, 2.053896868844368e+00, 2.102985115753919e+00, 2.036207403402286e+00, 2.036207403402286e+00, -2.396809518906502e-01, -1.925824861549269e-01, 2.391802535661967e+00, -6.152685191259442e-01, -2.252260454936204e-01, -2.252260454936204e-01, -5.009559402095695e-01, -5.000002840793978e-01, -7.266574490238182e-01, -5.979759347960354e-01, -4.905717109030191e-01, -4.905717109030191e-01, 1.362970955497945e+02, 1.368867537205976e+02, 1.363561780281256e+02, 1.368146666039794e+02, 1.366006975686777e+02, 1.366006975686777e+02, 1.881246966755830e+01, 1.924360893456180e+01, 1.836827124978076e+01, 1.877827104762037e+01, 1.943286009160939e+01, 1.943286009160939e+01, 1.315645768150812e+00, 2.686815742036093e+00, 1.152387001129450e+00, 2.001076229295371e+00, 1.520522660219940e+00, 1.520522660219940e+00, -7.899819403164435e-01, -7.354517264801439e-01, -7.269529865765185e-01, 2.482415372050961e+01, -6.560970385408638e-01, -6.560970385408638e-01, -5.805995016280671e-01, -5.798141447489032e-01, -3.427429191794346e-01, -6.866123524612704e-01, -4.770741105413127e-01, -4.770741105413127e-01, 2.672237726941499e+00, 2.449462712989117e+00, 2.541493927428138e+00, 2.604609374026287e+00, 2.574103695102599e+00, 2.574103695102599e+00, 2.520774849366295e+00, 1.005888351327055e+00, 1.028180418743658e+00, 1.452419120106935e+00, 1.187821546605209e+00, 1.187821546605208e+00, 2.904559089198730e+00, -6.115171645088688e-01, -1.024659135313621e-01, 5.561664566839323e-01, 4.375852421542508e-01, 4.375852421542505e-01, 8.570468929424907e-01, -8.018771138728793e-01, -7.663276261608196e-01, 4.086248922554671e-01, -6.329587114314724e-01, -6.329587114314722e-01, -5.773329388186116e-01, -4.426494731047351e-01, -4.768849329400225e-01, -5.699174025322390e-01, -3.948423268407746e-01, -3.948423268407749e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_vt84f_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_vt84f", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([7.386349466435360e-06, 7.386298580222708e-06, 7.386027744945153e-06, 7.386861645706354e-06, 7.386322997341209e-06, 7.386322997341209e-06, 1.633551801850589e-03, 1.633616927685806e-03, 1.635193233008544e-03, 1.631425433393768e-03, 1.633564424918043e-03, 1.633564424918043e-03, 1.706543516469450e-01, 1.699242355979955e-01, 1.601198530469370e-01, 1.568783414015469e-01, 1.703920573879513e-01, 1.703920573879513e-01, 9.222486835649981e+00, 8.677048260716532e+00, 1.216508159334497e-01, 2.667524019762200e+01, 9.056707655345818e+00, 9.056707655345818e+00, 5.964445028581832e+04, 5.189980022726966e+04, 7.727233132731177e+02, 5.402226825371060e+05, 5.355675891425568e+04, 5.355675891425568e+04, 4.956818578482681e-04, 4.946643024474665e-04, 4.955795579378198e-04, 4.947885087696946e-04, 4.951611938143618e-04, 4.951611938143618e-04, 5.851103568212689e-03, 5.759429157595243e-03, 5.870087785681440e-03, 5.789432713436975e-03, 5.794265620836506e-03, 5.794265620836506e-03, 3.637888561683918e-01, 1.969263422555078e-01, 4.209774380385783e-01, 3.216189152208223e-01, 3.287281637828501e-01, 3.287281637828501e-01, 6.843133856227078e+01, 9.756045034879975e+00, 7.109266988347849e+01, 7.026466154429064e-03, 4.396121205035728e+01, 4.396121205035728e+01, 6.017464601887456e+05, 4.031448046164418e+05, 9.574967623789313e+05, 2.850376896457503e+02, 5.329472288351750e+05, 5.329472288351747e+05, 1.075715651121686e-01, 2.172792210167625e-01, 1.834407149524315e-01, 1.532903022928533e-01, 1.688293244790226e-01, 1.688293244790225e-01, 9.313053877982622e-02, 4.548209236750168e-01, 4.788846423585451e-01, 4.340097498439014e-01, 4.684317399349034e-01, 4.684317399349034e-01, 1.790502858918895e-01, 4.717248201840200e+00, 2.444993339532699e+00, 1.184828862849835e+00, 1.451975992756285e+00, 1.451975992756286e+00, 5.922814437992029e-01, 9.727065124631074e+02, 3.919129809716470e+02, 1.723296631918961e+00, 1.281678481305730e+02, 1.281678481305730e+02, 3.705063933625980e+04, 1.964459226524815e+07, 2.865708542975747e+06, 1.475962280871721e+02, 8.682210348108987e+05, 8.682210348109028e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
