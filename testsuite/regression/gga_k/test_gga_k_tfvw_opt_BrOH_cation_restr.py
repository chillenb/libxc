
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_tfvw_opt_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tfvw_opt", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.015199795254000e+03, 2.015194009715552e+03, 2.015199070882950e+03, 2.015284517175984e+03, 2.015235366246572e+03, 2.015235366246572e+03, 5.923946033483901e+01, 5.923542254695084e+01, 5.914503864826334e+01, 5.932476667950712e+01, 5.923747507849662e+01, 5.923747507849662e+01, 2.736467891555535e+00, 2.746689078140896e+00, 3.044795374842575e+00, 3.071910374382066e+00, 3.047371809361240e+00, 3.047371809361240e+00, 4.621335431428816e-01, 4.510242171895699e-01, 3.526101789402534e+00, 5.135393070128501e-01, 4.737692832332359e-01, 4.737692832332361e-01, 4.371466994633863e-01, 4.252385028293018e-01, 5.538752429194878e-01, 4.589155208115190e-01, 4.070360017740499e-01, 4.070360017740494e-01, 1.104448124664835e+02, 1.102868316155961e+02, 1.104386281688599e+02, 1.102991425165816e+02, 1.103641096586808e+02, 1.103641096586808e+02, 2.839750017054321e+01, 2.843072468745129e+01, 2.896864884446583e+01, 2.899554209797893e+01, 2.814341666288043e+01, 2.814341666288043e+01, 1.602752117241149e+00, 1.447672858089599e+00, 1.434659401721568e+00, 1.182590451077844e+00, 1.598256308791421e+00, 1.598256308791421e+00, 5.785703284348578e-01, 6.924505514296139e-01, 5.614353785839576e-01, 1.304600916818601e+01, 4.797733077558208e-01, 4.797733077558208e-01, 3.998374369864206e-01, 4.230128386413716e-01, 1.687708393009349e-01, 4.958091813708970e-01, 2.474037524128758e-01, 2.474037524128761e-01, 1.146147139256652e+00, 1.217760952322114e+00, 1.192607951071807e+00, 1.171741294364309e+00, 1.182173793111304e+00, 1.182173793111304e+00, 1.060990865316813e+00, 1.453598614074542e+00, 1.331510021870565e+00, 1.213204619290634e+00, 1.270095484182329e+00, 1.270095484182329e+00, 1.608771960793351e+00, 7.894159580042150e-01, 8.080545156357539e-01, 7.831117700280942e-01, 7.830635792914511e-01, 7.830635792914510e-01, 1.248031750832513e+00, 5.819583988502079e-01, 5.709256933692677e-01, 6.202970483076137e-01, 4.444240695926890e-01, 4.444240695926889e-01, 4.865358084630165e-01, 1.910104114552260e-01, 2.745347852679229e-01, 4.491820139291905e-01, 2.201393159997722e-01, 2.201393159997719e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_tfvw_opt_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tfvw_opt", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [1.829001147581729e+03, 1.829028375110298e+03, 1.829125258434080e+03, 1.828720662848986e+03, 1.828936099017545e+03, 1.828936099017545e+03, 4.265743132511617e+01, 4.266190898224059e+01, 4.276745411313330e+01, 4.260006779182444e+01, 4.266485669174013e+01, 4.266485669174013e+01, 1.054392490056406e+00, 1.035816846428691e+00, 5.394547731740877e-01, 5.720894220996685e-01, 5.838801585402756e-01, 5.838801585402756e-01, -2.093854501741911e-01, -1.905624340087556e-01, 1.628230918558513e+00, -3.678666558354356e-01, -2.900834553058153e-01, -2.900834553058155e-01, -4.368404164123768e-01, -4.248991891633950e-01, -5.435470674827144e-01, -4.588133624415014e-01, -4.068746952806734e-01, -4.068746952806730e-01, 1.179720171141871e+02, 1.182138743960746e+02, 1.179823785415234e+02, 1.181959066808985e+02, 1.180950645162227e+02, 1.180950645162227e+02, 3.874593342521250e+00, 4.311237889704779e+00, 2.962565416766379e+00, 3.348543485389437e+00, 4.554112332189822e+00, 4.554112332189822e+00, 1.297882303978488e+00, 1.975542978148545e+00, 1.048817527581625e+00, 1.501012072030192e+00, 1.396661431164024e+00, 1.396661431164024e+00, -5.083516129356305e-01, -4.389342137871987e-01, -5.013381522942795e-01, 1.800364718544574e+01, -3.830694530311974e-01, -3.830694530311974e-01, -3.997766205825779e-01, -4.229152080101111e-01, -1.687137559725326e-01, -4.686232198458758e-01, -2.473209086401956e-01, -2.473209086401957e-01, 1.782723602818169e+00, 1.677604720876403e+00, 1.714525664045549e+00, 1.745103080664218e+00, 1.729807890365160e+00, 1.729807890365160e+00, 1.711248513453614e+00, 5.892606357561957e-01, 9.085741196117109e-01, 1.231472739679381e+00, 1.068974527225546e+00, 1.068974527225546e+00, 2.153604369834408e+00, -3.847339158875230e-01, -2.243913053552616e-01, 2.351901929258515e-01, -1.294781745185881e-02, -1.294781745185902e-02, 4.834529239062446e-01, -5.724968398587523e-01, -5.533395543709567e-01, 3.260364066634865e-01, -4.003464227900301e-01, -4.003464227900299e-01, -4.859257576681864e-01, -1.910034354815618e-01, -2.745040492204678e-01, -4.103142875067624e-01, -2.200683848483400e-01, -2.200683848483399e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_tfvw_opt_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tfvw_opt", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [3.872869486924779e-06, 3.872837084306576e-06, 3.872683034431470e-06, 3.873165339856911e-06, 3.872914033457445e-06, 3.872914033457445e-06, 8.974299907435707e-04, 8.974241797265501e-04, 8.972239263038253e-04, 8.970609688319298e-04, 8.973581270353179e-04, 8.973581270353179e-04, 1.250648592927972e-01, 1.254794359299940e-01, 1.360330750190879e-01, 1.327010829478096e-01, 1.334004840678362e-01, 1.334004840678362e-01, 7.264573999084931e+00, 6.944259935762837e+00, 7.888298029736660e-02, 1.660255573111730e+01, 1.172542270169370e+01, 1.172542270169370e+01, 1.722096706686719e+05, 1.476862136352406e+05, 8.794407262769723e+02, 8.939866854870869e+05, 4.505720083461188e+05, 4.505720083461188e+05, 2.673928771454804e-04, 2.672456616140656e-04, 2.673855424678923e-04, 2.672555859105410e-04, 2.673185392364266e-04, 2.673185392364266e-04, 5.035020860234300e-03, 4.927026764679264e-03, 5.115862133328310e-03, 5.018219652698433e-03, 4.937073386582471e-03, 4.937073386582471e-03, 1.868540384440169e-01, 1.457439578954448e-01, 2.358586390772942e-01, 2.099736007595998e-01, 1.781002937057708e-01, 1.781002937057708e-01, 4.960925008095637e+01, 7.231577663733759e+00, 6.265566458745752e+01, 5.335274714446775e-03, 3.069561254139637e+01, 3.069561254139637e+01, 1.946304913052762e+06, 9.568918090687501e+05, 2.140316754835896e+06, 2.059325210679639e+02, 1.224199451770623e+06, 1.224199451770623e+06, 1.841584600253578e-01, 1.873643027902558e-01, 1.862277918701412e-01, 1.852985818244119e-01, 1.857629181452711e-01, 1.857629181452711e-01, 1.999842947337266e-01, 3.161435422597933e-01, 2.753248972936016e-01, 2.414958419755531e-01, 2.580341288333125e-01, 2.580341288333125e-01, 1.264877982003156e-01, 3.585676325909057e+00, 2.070134217120254e+00, 8.983118149298370e-01, 1.365865592817281e+00, 1.365865592817281e+00, 4.051482852661475e-01, 1.002993066708351e+03, 3.958095157619425e+02, 1.002710800070725e+00, 9.975033946303618e+01, 9.975033946303616e+01, 6.126225619861438e+04, 5.009965492829231e+07, 5.417138708669157e+06, 1.204642766943660e+02, 1.545206293652567e+06, 1.545206293652571e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
