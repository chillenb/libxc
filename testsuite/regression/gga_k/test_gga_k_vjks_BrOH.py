
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_vjks_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_vjks", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.178776850371089e+03, 2.178785255550299e+03, 2.178833683719517e+03, 2.178695826470815e+03, 2.178781191609053e+03, 2.178781191609053e+03, 5.851187984113184e+01, 5.851172592212411e+01, 5.851229984355353e+01, 5.853610215378133e+01, 5.851229918986139e+01, 5.851229918986139e+01, 2.197431544725868e+00, 2.193522746484966e+00, 2.082534193492660e+00, 2.115903292472998e+00, 2.196005685168197e+00, 2.196005685168197e+00, 1.490844977038458e-01, 1.563635216127556e-01, 3.120994704505833e+00, -4.060230959089786e-03, 1.513422751549080e-01, 1.513422751549080e-01, -2.936048645912515e-01, -2.923687433660487e-01, -3.320101911245587e-01, -3.571568390491096e-01, -2.868695281307767e-01, -2.868695281307767e-01, 1.278855457610207e+02, 1.278982150326282e+02, 1.278870671015992e+02, 1.278969152056946e+02, 1.278917340641120e+02, 1.278917340641120e+02, 1.894769167064691e+01, 1.922016290577130e+01, 1.883088904551202e+01, 1.904466272132407e+01, 1.927792731542610e+01, 1.927792731542610e+01, 1.618610211337776e+00, 1.835453297162636e+00, 1.461441153145676e+00, 1.537785248636410e+00, 1.735746444852375e+00, 1.735746444852375e+00, -1.579802607588341e-01, 8.943294566771703e-02, -1.366395601114606e-01, 1.698325117662271e+01, -6.374068101853993e-02, -6.374068101853993e-02, -3.468437443532251e-01, -3.459107012330137e-01, -2.045344580055350e-01, -2.431874788538495e-01, -2.846025704187525e-01, -2.846025704187526e-01, 1.634891645896904e+00, 1.635191582357492e+00, 1.635254178248216e+00, 1.635161097662845e+00, 1.635219124241412e+00, 1.635219124241412e+00, 1.528751547691787e+00, 1.242230990361224e+00, 1.332642959020629e+00, 1.410375098510122e+00, 1.371077688360706e+00, 1.371077688360706e+00, 2.021009531254423e+00, 2.201436867935858e-01, 3.592805591322827e-01, 6.081228028632689e-01, 4.761771330669746e-01, 4.761771330669744e-01, 1.013105300471985e+00, -3.879842157107310e-01, -3.101449788124841e-01, 5.365616598749376e-01, -1.519943378497842e-01, -1.519943378497839e-01, -3.368624410707370e-01, -2.654408102793585e-01, -2.855943108076760e-01, -1.356178707587929e-01, -2.357187866113514e-01, -2.357187866113516e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_vjks_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_vjks", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.407114769267394e+03, 3.407130136449532e+03, 3.407212571940041e+03, 3.406960660682068e+03, 3.407122757375563e+03, 3.407122757375563e+03, 9.103907158826782e+01, 9.103886701719769e+01, 9.104082315306054e+01, 9.107614993277537e+01, 9.103974197963882e+01, 9.103974197963882e+01, 3.521907374923429e+00, 3.520906256392508e+00, 3.552235703153340e+00, 3.593531505863247e+00, 3.521500545881439e+00, 3.521500545881439e+00, 3.888319349102680e-01, 3.829412198395749e-01, 4.874436341425645e+00, 4.840719103189353e-01, 3.867550943351150e-01, 3.867550943351150e-01, 3.118463391930445e-01, 3.123087676951474e-01, 5.589447093890526e-01, 3.614844137391833e-01, 3.063976530615643e-01, 3.063976530615643e-01, 2.018797508719054e+02, 2.019506290389818e+02, 2.018872196559429e+02, 2.019423252702940e+02, 2.019157279332377e+02, 2.019157279332377e+02, 3.220019378935677e+01, 3.246998543586000e+01, 3.228496050736243e+01, 3.248898042649421e+01, 3.229298624618973e+01, 3.229298624618973e+01, 2.522541496217275e+00, 2.974662740769884e+00, 2.275431977050078e+00, 2.462497375980123e+00, 2.712916387062118e+00, 2.712916387062118e+00, 6.331440599446545e-01, 6.331247795024200e-01, 5.804867624005449e-01, 2.751928784924144e+01, 5.119405466558014e-01, 5.119405466558014e-01, 3.508723013191458e-01, 3.511609496055944e-01, 2.074851704144529e-01, 5.591274498340233e-01, 2.889609857835083e-01, 2.889609857835080e-01, 2.700517890307287e+00, 2.657932415896115e+00, 2.672572311079429e+00, 2.684350575924705e+00, 2.678405261921760e+00, 2.678405261921760e+00, 2.532586400161751e+00, 1.952124552188665e+00, 2.073802081906335e+00, 2.221995939110522e+00, 2.141956396804610e+00, 2.141956396804610e+00, 3.268288621759710e+00, 7.095537755822529e-01, 7.624179022620581e-01, 9.725222915878202e-01, 8.322364324673446e-01, 8.322364324673442e-01, 1.600614085988025e+00, 5.993900688027441e-01, 6.124039265593738e-01, 8.373939597453502e-01, 5.129789664790216e-01, 5.129789664790214e-01, 3.617402929033644e-01, 2.658376293796562e-01, 2.870232388071305e-01, 4.616427157315416e-01, 2.388704721077034e-01, 2.388704721077029e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_vjks_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_vjks", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [5.676274945744335e-07, 5.676318313698954e-07, 5.676358851304968e-07, 5.675651658200993e-07, 5.676299094995438e-07, 5.676299094995438e-07, 1.037221155532734e-04, 1.037372477241358e-04, 1.041400525681813e-04, 1.033799425480901e-04, 1.037285728629666e-04, 1.037285728629666e-04, 4.778004690944890e-03, 4.560746596279456e-03, -2.312894129322530e-03, -1.862017806874643e-03, 4.700095977006673e-03, 4.700095977006673e-03, -1.092670816080033e+00, -9.520562778225451e-01, 6.320729408391763e-03, -7.379337993545336e+00, -1.047882439205191e+00, -1.047882439205191e+00, -3.577123779436610e+04, -3.112371944409629e+04, -4.432146231994734e+02, -3.241282372532246e+05, -3.211744100072496e+04, -3.211744100072496e+04, 4.562478822610278e-05, 4.573762868713685e-05, 4.563594005994807e-05, 4.572368776522539e-05, 4.568324091732845e-05, 4.568324091732845e-05, -7.168203282427090e-05, -4.977366778307532e-05, -1.021472032023566e-04, -8.404267279914224e-05, -1.912240571479194e-05, -1.912240571479194e-05, 2.552566244838844e-02, 3.188842053646720e-02, 2.838688986738869e-02, 3.884951297353982e-02, 2.496859321051234e-02, 2.496859321051234e-02, -2.866281115055336e+01, -2.044049874992441e+00, -2.912030265589870e+01, 1.131947774664392e-03, -1.493512312225410e+01, -1.493512312225410e+01, -3.610423768663488e+05, -2.418805959110206e+05, -5.744845657456131e+05, -1.496584650566663e+02, -3.197598768677101e+05, -3.197598768677103e+05, 4.115557671919792e-02, 3.847012182764170e-02, 3.942915882722203e-02, 4.017397972454401e-02, 3.980140817187199e-02, 3.980140817187199e-02, 4.600215825297611e-02, 2.037321577918088e-02, 3.114112312399679e-02, 3.854450305353980e-02, 3.519292852061381e-02, 3.519292852061378e-02, 2.729553907698473e-02, -6.822010159078323e-01, -2.117731439317414e-01, 3.520927687392205e-02, -4.031384909676907e-02, -4.031384909676911e-02, 2.355819302290615e-02, -5.665438391131312e+02, -2.162146460811246e+02, 9.146302265127700e-02, -5.756335694308273e+01, -5.756335694308270e+01, -2.221687242453916e+04, -1.178675237893346e+07, -1.719420259489109e+06, -6.605212370036851e+01, -5.209221102323270e+05, -5.209221102323293e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
