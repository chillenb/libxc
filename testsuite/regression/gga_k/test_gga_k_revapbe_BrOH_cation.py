
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_revapbe_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_revapbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.198572645818466e+03, 2.198581236753705e+03, 2.198629106015164e+03, 2.198501091519313e+03, 2.198566792485344e+03, 2.198566792485344e+03, 5.950888806040964e+01, 5.950825383584839e+01, 5.949651145919010e+01, 5.953953798049407e+01, 5.951100648187131e+01, 5.951100648187131e+01, 2.319565195853460e+00, 2.317553301447829e+00, 2.276504372392278e+00, 2.310190110529861e+00, 2.311889123165956e+00, 2.311889123165956e+00, 1.940949433638985e-01, 1.974169939083604e-01, 3.120454767538265e+00, 1.300668551546675e-01, 1.871536359921250e-01, 1.871536359921250e-01, 3.712357842730242e-04, 4.117375532087437e-04, 1.217203764997652e-02, 1.233933702719771e-04, 2.470349556036682e-04, 2.470349556036682e-04, 1.286030861701500e+02, 1.286062697598237e+02, 1.286036189395978e+02, 1.286064230230681e+02, 1.286044866996411e+02, 1.286044866996411e+02, 2.066647537597389e+01, 2.090184068729672e+01, 2.059662946271035e+01, 2.080402305154859e+01, 2.083079553129493e+01, 2.083079553129493e+01, 1.676509168077406e+00, 1.880339417167933e+00, 1.450651678641727e+00, 1.487000536278643e+00, 1.724217584821390e+00, 1.724217584821390e+00, 7.247262559495686e-02, 2.140150694803428e-01, 6.318561180107481e-02, 1.703559039539853e+01, 9.243371062279829e-02, 9.243371062279829e-02, 7.357576894112739e-05, 1.179146783582282e-04, 6.919390660143542e-05, 3.037108211360646e-02, 1.109846406878425e-04, 1.109846406878425e-04, 1.587197570264607e+00, 1.588874459541933e+00, 1.588332637763110e+00, 1.587820677758896e+00, 1.588077536182886e+00, 1.588077536182886e+00, 1.496648651989398e+00, 1.245985623217821e+00, 1.314297527809652e+00, 1.383298095050189e+00, 1.347192754529291e+00, 1.347192754529291e+00, 2.070735313635669e+00, 3.153660859799682e-01, 4.176795863394940e-01, 6.320557469068361e-01, 5.105571570548606e-01, 5.105571570548606e-01, 1.059162196082537e+00, 1.115131476879264e-02, 2.032143129079981e-02, 5.670496449966187e-01, 4.674509671661242e-02, 4.674509671661244e-02, 7.365825136870739e-04, 8.425535006968494e-06, 3.729352327331937e-05, 4.174601284964215e-02, 9.337976760421222e-05, 9.337976760421205e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_revapbe_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_revapbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.334371140986362e+03, 3.334362801426812e+03, 3.334395792727054e+03, 3.334380708244319e+03, 3.334474756269305e+03, 3.334493830072152e+03, 3.334196357402421e+03, 3.334138988332775e+03, 3.334385838885916e+03, 3.334280897961460e+03, 3.334385838885916e+03, 3.334280897961460e+03, 8.754207059723333e+01, 8.754327830893949e+01, 8.754306829990016e+01, 8.754416617962151e+01, 8.756617373710388e+01, 8.757325634680214e+01, 8.755440013604138e+01, 8.756081139758784e+01, 8.751137920662829e+01, 8.758466423841104e+01, 8.751137920662829e+01, 8.758466423841104e+01, 3.186183339614679e+00, 3.217084990099569e+00, 3.174449578467352e+00, 3.212212125854917e+00, 3.024053194653608e+00, 2.977167675207839e+00, 3.043960893238106e+00, 3.059047646757666e+00, 3.275641469055510e+00, 2.828309878006725e+00, 3.275641469055510e+00, 2.828309878006725e+00, 2.147271686978783e-01, 2.282865836582635e-01, 2.180532422594220e-01, 2.342791722155345e-01, 4.208311529594052e+00, 4.528983265772755e+00, 1.502333152109410e-01, 1.535755248992954e-01, 2.331213881556207e-01, 9.770587960433069e-02, 2.331213881556206e-01, 9.770587960433068e-02, 5.771057022386917e-04, 6.514295014692249e-04, 6.334789595496856e-04, 7.266538809244697e-04, 1.834809384689480e-02, 2.029861609009536e-02, 2.089026584584696e-04, 2.020073860196532e-04, 4.595306469925689e-04, 1.489633404356917e-04, 4.595306469925689e-04, 1.489633404356917e-04, 1.997280353238050e+02, 1.996309048675155e+02, 1.998385582900567e+02, 1.997376459071844e+02, 1.997344139618025e+02, 1.996347435585075e+02, 1.998292461266560e+02, 1.997317105032992e+02, 1.997844573556833e+02, 1.996844819496515e+02, 1.997844573556833e+02, 1.996844819496515e+02, 2.698252131747231e+01, 2.697976160183740e+01, 2.739423101639145e+01, 2.737900887377462e+01, 2.662157403092518e+01, 2.672143078881509e+01, 2.697270297123968e+01, 2.707830823117079e+01, 2.749036087880945e+01, 2.722668876160377e+01, 2.749036087880945e+01, 2.722668876160377e+01, 2.510066013822613e+00, 2.497004397449336e+00, 3.030863123977984e+00, 3.034634714898112e+00, 2.054072260706215e+00, 2.214192664989405e+00, 2.290263529594950e+00, 2.443953227843584e+00, 2.725773867595481e+00, 2.457704112931701e+00, 2.725773867595481e+00, 2.457704112931702e+00, 9.602675181314636e-02, 9.696162717198861e-02, 2.433804664270986e-01, 2.452363282191723e-01, 8.221611195410809e-02, 8.873903516021781e-02, 2.753809541231449e+01, 2.751383757916711e+01, 1.116635763834720e-01, 1.146678436230443e-01, 1.116635763834720e-01, 1.146678436230443e-01, 1.176031578413346e-04, 1.270139205352658e-04, 1.933953541013413e-04, 1.992955786778710e-04, 1.081060240325413e-04, 1.212192511970895e-04, 4.462564643634799e-02, 4.523018322304580e-02, 1.128082003440137e-04, 2.125874944456462e-04, 1.128082003440137e-04, 2.125874944456463e-04, 2.604854446630321e+00, 2.625360265039392e+00, 2.556233402543351e+00, 2.576791205540944e+00, 2.573087988875742e+00, 2.593736177744582e+00, 2.587306968273006e+00, 2.607731927127269e+00, 2.580176779172261e+00, 2.600709525670566e+00, 2.580176779172261e+00, 2.600709525670566e+00, 2.472580681274856e+00, 2.488999804306003e+00, 1.719150633752497e+00, 1.734840083913118e+00, 1.911677019179109e+00, 1.929829611952497e+00, 2.123963116293617e+00, 2.139380394018919e+00, 2.014391063203501e+00, 2.029859002913557e+00, 2.014391063203501e+00, 2.029859002913557e+00, 3.323235832336770e+00, 3.335790222807790e+00, 3.573420957977878e-01, 3.606873837150860e-01, 4.886191011236522e-01, 4.973586915987512e-01, 8.517668931682599e-01, 8.615004591950649e-01, 6.424286471763218e-01, 6.419789304989351e-01, 6.424286471763215e-01, 6.419789304989351e-01, 1.451834087230571e+00, 1.473105829051616e+00, 1.776273924418422e-02, 1.799057925909265e-02, 3.059871092368015e-02, 3.239783836142669e-02, 7.921888939756088e-01, 8.174261901522059e-01, 6.228870165375184e-02, 6.568342269656044e-02, 6.228870165375183e-02, 6.568342269656047e-02, 1.178280716620817e-03, 1.264745433643734e-03, 1.400940341393923e-05, 1.407290830892855e-05, 5.798617182173241e-05, 6.558962185060478e-05, 5.765991879163587e-02, 5.920919041444585e-02, 1.011860001839627e-04, 1.786404737247996e-04, 1.011860001839625e-04, 1.786404737247993e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_revapbe_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_revapbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.670610618843407e-06, 0.000000000000000e+00, 1.670617536610971e-06, 1.670600243038262e-06, 0.000000000000000e+00, 1.670609995486651e-06, 1.670556076165476e-06, 0.000000000000000e+00, 1.670549779793200e-06, 1.670673532767182e-06, 0.000000000000000e+00, 1.670699400427123e-06, 1.670604984613585e-06, 0.000000000000000e+00, 1.670631519171873e-06, 1.670604984613585e-06, 0.000000000000000e+00, 1.670631519171873e-06, 3.724963394585512e-04, 0.000000000000000e+00, 3.725780992713782e-04, 3.725011751714341e-04, 0.000000000000000e+00, 3.725893295260955e-04, 3.726829244053717e-04, 0.000000000000000e+00, 3.727240321709925e-04, 3.721874374928766e-04, 0.000000000000000e+00, 3.722449423343573e-04, 3.726570283898399e-04, 0.000000000000000e+00, 3.723828252896890e-04, 3.726570283898399e-04, 0.000000000000000e+00, 3.723828252896890e-04, 4.737786402881439e-02, 0.000000000000000e+00, 4.738288933917519e-02, 4.740225402275746e-02, 0.000000000000000e+00, 4.741078487204193e-02, 4.764937215269414e-02, 0.000000000000000e+00, 4.753075965974247e-02, 4.658998337204776e-02, 0.000000000000000e+00, 4.664245310272727e-02, 4.712221678597752e-02, 0.000000000000000e+00, 4.516965366465579e-02, 4.712221678597752e-02, 0.000000000000000e+00, 4.516965366465579e-02, 1.537579997582257e+00, 0.000000000000000e+00, 1.474756098794179e+00, 1.547363374504224e+00, 0.000000000000000e+00, 1.468516010633525e+00, 3.145407369896709e-02, 0.000000000000000e+00, 2.976929354180500e-02, 1.778072373186107e+00, 0.000000000000000e+00, 1.740265940165574e+00, 1.377644082410894e+00, 0.000000000000000e+00, 2.043029889838095e+00, 1.377644082410893e+00, 0.000000000000000e+00, 2.043029889838096e+00, 3.077785156242142e-01, 0.000000000000000e+00, 3.237290834580775e-01, 3.397698855063888e-01, 0.000000000000000e+00, 3.620526981025057e-01, 1.018861018266951e+00, 0.000000000000000e+00, 1.078103837796816e+00, 1.695864015581646e-01, 0.000000000000000e+00, 1.622365388404789e-01, 2.741701214899105e-01, 0.000000000000000e+00, 3.960352581198947e-01, 2.741701214899113e-01, 0.000000000000000e+00, 3.960352581198955e-01, 1.185534459853230e-04, 0.000000000000000e+00, 1.186357504186863e-04, 1.185590964394496e-04, 0.000000000000000e+00, 1.186412454352095e-04, 1.185530900799283e-04, 0.000000000000000e+00, 1.186354591845022e-04, 1.185579490253535e-04, 0.000000000000000e+00, 1.186404593853921e-04, 1.185568828334394e-04, 0.000000000000000e+00, 1.186386177367887e-04, 1.185568828334394e-04, 0.000000000000000e+00, 1.186386177367887e-04, 1.729336357917507e-03, 0.000000000000000e+00, 1.729564987604663e-03, 1.703762539773197e-03, 0.000000000000000e+00, 1.704868399259906e-03, 1.728031346132869e-03, 0.000000000000000e+00, 1.729048933933579e-03, 1.706376606904375e-03, 0.000000000000000e+00, 1.706711796757332e-03, 1.714569894590189e-03, 0.000000000000000e+00, 1.716690454783701e-03, 1.714569894590189e-03, 0.000000000000000e+00, 1.716690454783701e-03, 7.874769162268387e-02, 0.000000000000000e+00, 7.940350895102052e-02, 6.743484256304416e-02, 0.000000000000000e+00, 6.740997080896023e-02, 1.030927148349389e-01, 0.000000000000000e+00, 9.365478191235220e-02, 1.009493560076953e-01, 0.000000000000000e+00, 9.140134909469265e-02, 7.108454028627220e-02, 0.000000000000000e+00, 8.246045535312332e-02, 7.108454028627219e-02, 0.000000000000000e+00, 8.246045535312335e-02, 1.618553743537954e+00, 0.000000000000000e+00, 1.652994974250113e+00, 1.023444463669328e+00, 0.000000000000000e+00, 1.017083103457332e+00, 1.688651090915313e+00, 0.000000000000000e+00, 1.702906118135088e+00, 2.471170337251252e-03, 0.000000000000000e+00, 2.474630982885159e-03, 1.900530655314107e+00, 0.000000000000000e+00, 2.282226724627398e+00, 1.900530655314107e+00, 0.000000000000000e+00, 2.282226724627398e+00, 1.786183645047880e-01, 0.000000000000000e+00, 1.606671334010490e-01, 1.972407426903673e-01, 0.000000000000000e+00, 1.848647011624174e-01, 8.400184663059003e-01, 0.000000000000000e+00, 9.895398299976759e-01, 1.836854128905245e+00, 0.000000000000000e+00, 1.781755775524551e+00, 4.267007540615843e-01, 0.000000000000000e+00, 5.754107324355737e-01, 4.267007540615830e-01, 0.000000000000000e+00, 5.754107324355728e-01, 8.760671471941456e-02, 0.000000000000000e+00, 8.662847844025003e-02, 8.729995959223087e-02, 0.000000000000000e+00, 8.634011247028718e-02, 8.740781002346121e-02, 0.000000000000000e+00, 8.644229404485854e-02, 8.749987754103798e-02, 0.000000000000000e+00, 8.652744956347327e-02, 8.745425794718042e-02, 0.000000000000000e+00, 8.648511920739915e-02, 8.745425794718042e-02, 0.000000000000000e+00, 8.648511920739915e-02, 9.565337840418585e-02, 0.000000000000000e+00, 9.471565444072995e-02, 1.211753235023990e-01, 0.000000000000000e+00, 1.199617043269245e-01, 1.139102718322935e-01, 0.000000000000000e+00, 1.127087592702472e-01, 1.066984372682777e-01, 0.000000000000000e+00, 1.056589628905043e-01, 1.104661843938509e-01, 0.000000000000000e+00, 1.093443586263088e-01, 1.104661843938509e-01, 0.000000000000000e+00, 1.093443586263088e-01, 5.841898074826175e-02, 0.000000000000000e+00, 5.822365508068569e-02, 7.050948862970491e-01, 0.000000000000000e+00, 6.999659703702186e-01, 5.382015357253265e-01, 0.000000000000000e+00, 5.320805209707438e-01, 3.326440580856478e-01, 0.000000000000000e+00, 3.281058114179097e-01, 4.316485221844028e-01, 0.000000000000000e+00, 4.334777273107012e-01, 4.316485221844032e-01, 0.000000000000000e+00, 4.334777273107013e-01, 1.547539407134832e-01, 0.000000000000000e+00, 1.524551765220462e-01, 9.167334992001795e-01, 0.000000000000000e+00, 9.237237020174470e-01, 1.187735773560865e+00, 0.000000000000000e+00, 1.248927954838083e+00, 4.038997592490956e-01, 0.000000000000000e+00, 3.891744324076012e-01, 2.161119784533728e+00, 0.000000000000000e+00, 2.594164105241044e+00, 2.161119784533730e+00, 0.000000000000000e+00, 2.594164105241045e+00, 3.485809398476130e-01, 0.000000000000000e+00, 3.686910489079180e-01, 1.896746954268773e-01, 0.000000000000000e+00, 3.367417469901729e-01, 2.381699163083846e-01, 0.000000000000000e+00, 2.696608066343559e-01, 2.320276634691515e+00, 0.000000000000000e+00, 2.301892130010585e+00, 8.332004460956726e-01, 0.000000000000000e+00, 5.475710540409877e-01, 8.332004460956730e-01, 0.000000000000000e+00, 5.475710540409885e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
