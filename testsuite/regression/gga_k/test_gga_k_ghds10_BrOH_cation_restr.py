
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_ghds10_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_ghds10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([3.028522861146070e+03, 3.028511316452827e+03, 3.028510798805346e+03, 3.028681519322110e+03, 3.028584837945817e+03, 3.028584837945817e+03, 9.166907855871685e+01, 9.166230001414114e+01, 9.151011053175638e+01, 9.180910057762678e+01, 9.166529847088415e+01, 9.166529847088415e+01, 5.171088669473681e+00, 5.188348373092865e+00, 5.690309532789598e+00, 5.734359510755104e+00, 5.693658896522893e+00, 5.693658896522893e+00, 1.023544677597676e+00, 1.011669601402406e+00, 6.444446213382347e+00, 9.840619601122363e-01, 9.710128407738199e-01, 9.710128407738200e-01, -6.379225340067448e-01, -6.327650358816422e-01, 4.162483089239704e-01, -8.700200629691298e-01, -8.449522896107707e-01, -8.449522896107715e-01, 1.662144647497912e+02, 1.659434304472581e+02, 1.662037771661850e+02, 1.659644747481967e+02, 1.660760535315945e+02, 1.660760535315945e+02, 4.602748637309938e+01, 4.604512773595601e+01, 4.700839901831974e+01, 4.702009475795420e+01, 4.556906077723688e+01, 4.556906077723688e+01, 3.291324822658129e+00, 3.026930198134423e+00, 3.009458686561540e+00, 2.589975573968123e+00, 3.283341060195887e+00, 3.283341060195887e+00, 9.208464763377026e-01, 1.408721619024557e+00, 8.550747613715637e-01, 2.049711539041875e+01, 8.318279564628815e-01, 8.318279564628815e-01, -1.095457796784010e+00, -9.410412747213402e-01, -1.496699839181750e+00, 5.544593294923991e-01, -1.274365787928964e+00, -1.274365787928963e+00, 2.528929190072608e+00, 2.648620931931906e+00, 2.606585157029357e+00, 2.571709910343227e+00, 2.589146518257865e+00, 2.589146518257865e+00, 2.387114251825236e+00, 3.032108281773524e+00, 2.833461059584328e+00, 2.639316472804087e+00, 2.732791728973925e+00, 2.732791728973925e+00, 3.289120914800295e+00, 1.671640469216819e+00, 1.776543463175347e+00, 1.832725265261522e+00, 1.786189683399120e+00, 1.786189683399119e+00, 2.675899839534186e+00, 4.417803838143902e-01, 5.742058517845705e-01, 1.549328221724747e+00, 5.853427680450829e-01, 5.853427680450827e-01, -3.870282124316756e-01, -1.973516421879425e+00, -1.471494067815484e+00, 5.629892133850435e-01, -1.357839187102374e+00, -1.357839187102375e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_ghds10_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_ghds10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([2.492250480976231e+03, 2.492292791653974e+03, 2.492439584092806e+03, 2.491810933032840e+03, 2.492146208358477e+03, 2.492146208358477e+03, 5.816969034726515e+01, 5.817710209204662e+01, 5.835111645353452e+01, 5.806989252340332e+01, 5.818130157759221e+01, 5.818130157759221e+01, 2.303493358315712e+00, 2.273168478205013e+00, 1.460439234877143e+00, 1.510197744840525e+00, 1.530895120368471e+00, 1.530895120368471e+00, 5.064609334862263e-02, 8.828888180718741e-02, 3.136579780510419e+00, -3.329488088142184e-01, -1.519795031038065e-01, -1.519795031038068e-01, -1.934017495480451e+00, -1.889046536861814e+00, -1.253448439718641e+00, -2.239127699339218e+00, -2.040744221300435e+00, -2.040744221300434e+00, 1.655397445770572e+02, 1.659312976235602e+02, 1.655564341155771e+02, 1.659021252709250e+02, 1.657389990850913e+02, 1.657389990850913e+02, 3.356944218428889e+00, 4.020501823879573e+00, 1.881772600050393e+00, 2.468713951666795e+00, 4.432154958906050e+00, 4.432154958906050e+00, 2.775144545716513e+00, 3.870300604318930e+00, 2.382579401757676e+00, 3.127084521658653e+00, 2.934040275925583e+00, 2.934040275925583e+00, -7.348349502986609e-01, -3.319445381727739e-01, -7.596981721552097e-01, 2.711457707660078e+01, -4.513188944802375e-01, -4.513188944802375e-01, -2.267376319830518e+00, -2.190280804656572e+00, -1.897116536659738e+00, -8.942067895665142e-01, -1.937288280525236e+00, -1.937288280525236e+00, 3.582788565745464e+00, 3.409400223790828e+00, 3.470303169528245e+00, 3.520741334938592e+00, 3.495512229500093e+00, 3.495512229500093e+00, 3.473005143558887e+00, 1.632260535748368e+00, 2.158938011029619e+00, 2.689355091966563e+00, 2.422768727274847e+00, 2.422768727274847e+00, 4.140906310357300e+00, -1.492905974686897e-01, 1.816770864484498e-01, 1.021241878716671e+00, 5.750970907826423e-01, 5.750970907826428e-01, 1.460867066359601e+00, -1.323079079651587e+00, -1.140729727314011e+00, 1.165542122288938e+00, -6.645451286584628e-01, -6.645451286584624e-01, -1.847539080228845e+00, -2.448269497249652e+00, -2.225088249585605e+00, -7.111769420634416e-01, -1.929747691482808e+00, -1.929747691482808e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_ghds10_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_ghds10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([6.465558408889447e-06, 6.465504314368241e-06, 6.465247135945692e-06, 6.466052320295342e-06, 6.465632777057505e-06, 6.465632777057505e-06, 1.498213674029333e-03, 1.498203972832304e-03, 1.497869659939608e-03, 1.497597610737780e-03, 1.498093701227576e-03, 1.498093701227576e-03, 2.087894145121824e-01, 2.094815290984875e-01, 2.271002921854555e-01, 2.215377010814852e-01, 2.227053156391256e-01, 2.227053156391256e-01, 1.212783639246232e+01, 1.159308837356066e+01, 1.316911190273232e-01, 2.771712142089699e+01, 1.957499616309466e+01, 1.957499616309467e+01, 2.874952765754121e+05, 2.465546137483149e+05, 1.468181512983260e+03, 1.492465251230529e+06, 7.522070256195640e+05, 7.522070256195640e+05, 4.463987932311861e-04, 4.461530243974384e-04, 4.463865483604211e-04, 4.461695925050767e-04, 4.462746898771731e-04, 4.462746898771731e-04, 8.405710951977129e-03, 8.225420308312626e-03, 8.540671341115708e-03, 8.377662191483195e-03, 8.242192632024159e-03, 8.242192632024159e-03, 3.119433029115474e-01, 2.433121166868861e-01, 3.937539884428952e-01, 3.505402349909846e-01, 2.973293717959445e-01, 2.973293717959445e-01, 8.282011699658827e+01, 1.207275069070744e+01, 1.046004417152880e+02, 8.906969473199959e-03, 5.124476217261497e+01, 5.124476217261497e+01, 3.249256950004610e+06, 1.597482152034641e+06, 3.573149841128374e+06, 3.437938582102904e+02, 2.043738650702208e+06, 2.043738650702208e+06, 3.074431719955891e-01, 3.127951632558527e-01, 3.108978161438085e-01, 3.093465472861635e-01, 3.101217331306696e-01, 3.101217331306696e-01, 3.338635972182413e-01, 5.277855463435615e-01, 4.596408969843099e-01, 4.031650116453307e-01, 4.307748394546119e-01, 4.307748394546119e-01, 2.111649385648006e-01, 5.986104049931646e+00, 3.455983667980389e+00, 1.499685834607408e+00, 2.280243059795127e+00, 2.280243059795128e+00, 6.763744328316319e-01, 1.674445854271037e+03, 6.607838326576669e+02, 1.673974624492028e+00, 1.665281126261038e+02, 1.665281126261038e+02, 1.022742173599572e+05, 8.363882291868500e+07, 9.043637243187241e+06, 2.011089761174724e+02, 2.579643228134502e+06, 2.579643228134509e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
