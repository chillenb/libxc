
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_tw2_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tw2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.192311820091268e+03, 2.192319539412769e+03, 2.192366043127716e+03, 2.192239395998384e+03, 2.192315790139548e+03, 2.192315790139548e+03, 5.921996175889607e+01, 5.921957244205520e+01, 5.921375472396803e+01, 5.924889550207692e+01, 5.922026606172882e+01, 5.922026606172882e+01, 2.282331905260131e+00, 2.280158345706622e+00, 2.229287978591436e+00, 2.260595149946759e+00, 2.281526910275598e+00, 2.281526910275598e+00, 1.926954621060733e-01, 1.962013049637817e-01, 3.183892162590355e+00, 1.137570698604754e-01, 1.937261675576352e-01, 1.937261675576352e-01, 7.873183241315794e-04, 8.636596228952566e-04, 1.399138893148025e-02, 1.814591944313163e-04, 8.457561918918813e-04, 8.457561918918813e-04, 1.282830482886460e+02, 1.282888226056634e+02, 1.282838782665898e+02, 1.282883642864690e+02, 1.282856686687313e+02, 1.282856686687313e+02, 2.024920354008908e+01, 2.048529383455590e+01, 2.020396637266547e+01, 2.038783675784447e+01, 2.046728980058985e+01, 2.046728980058985e+01, 1.632637029653165e+00, 1.835953677279151e+00, 1.475979512047674e+00, 1.539408012695433e+00, 1.747011566788866e+00, 1.747011566788866e+00, 6.590124017222711e-02, 2.102618038441674e-01, 6.396892164942193e-02, 1.698801311628627e+01, 8.496888639179385e-02, 8.496888639179385e-02, 1.688721741850964e-04, 2.205372100868337e-04, 1.238911955161559e-04, 2.663049639179797e-02, 1.830900519544746e-04, 1.830900519544746e-04, 1.634759680230405e+00, 1.635451657080342e+00, 1.635273857792313e+00, 1.635071025469494e+00, 1.635175563660708e+00, 1.635175563660708e+00, 1.528646626364185e+00, 1.274229882266588e+00, 1.347594098473495e+00, 1.415411746193190e+00, 1.380345876474713e+00, 1.380345876474713e+00, 2.021764222808277e+00, 3.165001591517901e-01, 4.226501348874664e-01, 6.308388626822485e-01, 5.152477243920516e-01, 5.152477243920515e-01, 1.043180818751624e+00, 1.205763392980874e-02, 2.177911369237277e-02, 5.469161234436539e-01, 4.396386561556209e-02, 4.396386561556208e-02, 1.081061793348569e-03, 1.653730067937744e-05, 5.967076408358501e-05, 3.998788997355980e-02, 1.322487731477093e-04, 1.322487731477089e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_tw2_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tw2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.352101246854204e+03, 3.352119061899807e+03, 3.352208294873832e+03, 3.351916376257046e+03, 3.352110560351288e+03, 3.352110560351288e+03, 8.835192442023880e+01, 8.835252984385279e+01, 8.837646596557259e+01, 8.837270305610414e+01, 8.835298854207990e+01, 8.835298854207990e+01, 3.229413039889126e+00, 3.222919268909331e+00, 3.067359868721275e+00, 3.114531146383345e+00, 3.227040337628646e+00, 3.227040337628646e+00, 2.552482065191935e-01, 2.601837602175115e-01, 4.646314188007562e+00, 1.567478422884730e-01, 2.566885789927397e-01, 2.566885789927397e-01, 1.308434588539012e-03, 1.434898779989487e-03, 2.254835750256395e-02, 3.022638274746852e-04, 1.405162139726866e-03, 1.405162139726866e-03, 2.001143399487570e+02, 2.002113878963105e+02, 2.001244306631319e+02, 2.001998877481158e+02, 2.001638552551396e+02, 2.001638552551396e+02, 2.789281761289687e+01, 2.827127140726007e+01, 2.775830448955603e+01, 2.805136131880191e+01, 2.832868565397881e+01, 2.832868565397881e+01, 2.467536907143817e+00, 2.970471532726864e+00, 2.219207617223034e+00, 2.453704693591542e+00, 2.667353633659793e+00, 2.667353633659793e+00, 9.739792610965661e-02, 2.821773532605660e-01, 9.409639945310065e-02, 2.747987728548494e+01, 1.206561844521171e-01, 1.206561844521171e-01, 2.813036154809352e-04, 3.673059114632390e-04, 2.063485895411266e-04, 4.162842109797015e-02, 3.049355594133738e-04, 3.049355594133738e-04, 2.700360050252558e+00, 2.655109885567123e+00, 2.671054991284613e+00, 2.683577053166777e+00, 2.677289228843802e+00, 2.677289228843802e+00, 2.532570673312232e+00, 1.838383103977965e+00, 2.016653842925835e+00, 2.200061394478207e+00, 2.104639484632118e+00, 2.104639484632118e+00, 3.262717251645692e+00, 4.191337638525184e-01, 5.637594397181704e-01, 8.940655009223709e-01, 7.043919938416603e-01, 7.043919938416601e-01, 1.494902108482866e+00, 1.956970344657950e-02, 3.458445620754027e-02, 7.997016594730101e-01, 6.599483044383934e-02, 6.599483044383934e-02, 1.795620438814259e-03, 2.756027929713346e-05, 9.942845804160052e-05, 5.997665549839456e-02, 2.202793616849739e-04, 2.202793616849733e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_tw2_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tw2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([7.640406141376496e-07, 7.640385493732193e-07, 7.640201810485265e-07, 7.640541735633955e-07, 7.640396017969423e-07, 7.640396017969423e-07, 1.656168343978156e-04, 1.656222470057890e-04, 1.657504646192300e-04, 1.654242280959736e-04, 1.656175017154234e-04, 1.656175017154234e-04, 1.953919130148730e-02, 1.950967171870794e-02, 1.842800601507929e-02, 1.814422140051149e-02, 1.952889577042963e-02, 1.952889577042963e-02, 5.131095524048211e-01, 5.200041603523127e-01, 1.275213676582020e-02, 4.938302720316556e-01, 5.156012082885365e-01, 5.156012082885365e-01, 1.679924718626301e-01, 1.764812008690055e-01, 3.070694728734905e-01, 5.697067623698837e-02, 1.814230921130827e-01, 1.814230921130827e-01, 5.546007466668114e-05, 5.548737701583052e-05, 5.546264195161878e-05, 5.548387515964163e-05, 5.547440547687630e-05, 5.547440547687630e-05, 6.762597052020586e-04, 6.696344510246742e-04, 6.712225682723886e-04, 6.662011455949987e-04, 6.780425291661604e-04, 6.780425291661604e-04, 3.694934224354164e-02, 3.378646999859881e-02, 4.263404724118691e-02, 4.329490314222733e-02, 3.389347462032432e-02, 3.389347462032432e-02, 3.976743409174761e-01, 2.882327147623596e-01, 4.510429358351747e-01, 1.200122790517746e-03, 5.063609094152555e-01, 5.063609094152555e-01, 5.830193477284398e-02, 6.677625405329991e-02, 1.432464484368046e-01, 4.276261752152200e-01, 8.986939521807871e-02, 8.986939521807863e-02, 4.105040332173821e-02, 4.032891463430317e-02, 4.058560847504715e-02, 4.078604790153945e-02, 4.068578031464699e-02, 4.068578031464699e-02, 4.552469458807391e-02, 4.915556419132391e-02, 4.849469725163670e-02, 4.763275334731328e-02, 4.816265609190405e-02, 4.816265609190403e-02, 2.915847424745322e-02, 2.157544097005043e-01, 1.820561199036085e-01, 1.350596337244537e-01, 1.611746849557830e-01, 1.611746849557830e-01, 6.532699063313804e-02, 2.393216898902505e-01, 3.281699232863247e-01, 1.798292194462934e-01, 5.467318307506877e-01, 5.467318307506881e-01, 1.479849060505793e-01, 3.142908546152221e-02, 5.141363967618531e-02, 6.406484047154782e-01, 1.115341564830418e-01, 1.115341564830414e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
