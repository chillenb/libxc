
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_ghds10r_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_ghds10r", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [3.026016070967226e+03, 3.026004524961530e+03, 3.026004001074172e+03, 3.026174741126157e+03, 3.026078049571294e+03, 3.026078049571294e+03, 9.001652088982826e+01, 9.000974132949943e+01, 8.985751683923317e+01, 9.015647839145494e+01, 9.001272823991357e+01, 9.001272823991357e+01, 4.292998055778413e+00, 4.310776901065495e+00, 4.825406143366354e+00, 4.865565951786269e+00, 4.825689940870647e+00, 4.825689940870647e+00, 7.826425035830906e-01, 7.636935693530038e-01, 5.494060179252118e+00, 8.728188065585107e-01, 8.052113194413923e-01, 8.052113194413927e-01, 7.013815817644932e-01, 6.824405159304284e-01, 9.277298772431120e-01, 7.276427124964908e-01, 6.452285658017678e-01, 6.452285658017670e-01, 1.643719684199237e+02, 1.641008477283668e+02, 1.643612765333077e+02, 1.641218978545772e+02, 1.642335135846988e+02, 1.642335135846988e+02, 4.464546970959896e+01, 4.465970986128289e+01, 4.562888099483001e+01, 4.563755377011987e+01, 4.418396244454316e+01, 4.418396244454316e+01, 2.476216092863754e+00, 2.172843397900186e+00, 2.230885347724377e+00, 1.793166165611528e+00, 2.460705643544012e+00, 2.460705643544012e+00, 9.813146059129756e-01, 1.167105312308750e+00, 9.521679971022154e-01, 1.912418496351059e+01, 8.169902696411550e-01, 8.169902696411550e-01, 6.242480542108004e-01, 6.672884590260748e-01, 2.379118221235125e-01, 8.382092853766143e-01, 3.726087758804922e-01, 3.726087758804927e-01, 1.711540977800572e+00, 1.833939997044050e+00, 1.790949795704264e+00, 1.755289873073328e+00, 1.773119082685033e+00, 1.773119082685033e+00, 1.582658615841358e+00, 2.299491663576727e+00, 2.079158259634577e+00, 1.864448303109030e+00, 1.968314453197427e+00, 1.968314453197427e+00, 2.412805010149666e+00, 1.319979463721709e+00, 1.338709419320842e+00, 1.263929488570636e+00, 1.283125865712685e+00, 1.283125865712685e+00, 1.982195466476210e+00, 9.738834993522939e-01, 9.604511277012426e-01, 9.977793570655648e-01, 7.553823304643154e-01, 7.553823304643151e-01, 7.901448570852450e-01, 2.557104462959166e-01, 4.087876817577493e-01, 7.626271244846048e-01, 3.256653452949250e-01, 3.256653452949245e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_ghds10r_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_ghds10r", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [2.489586822497388e+03, 2.489629131862676e+03, 2.489775918061632e+03, 2.489147286536888e+03, 2.489482551683955e+03, 2.489482551683955e+03, 5.636026437837655e+01, 5.636767510740491e+01, 5.654165446101130e+01, 5.626040203723149e+01, 5.637186304662162e+01, 5.637186304662162e+01, 1.268534444620444e+00, 1.238728706177643e+00, 4.386675454538984e-01, 4.845358858716900e-01, 5.060578647162250e-01, 5.060578647162250e-01, -3.471243806659630e-01, -3.165554502422153e-01, 2.029325446380191e+00, -6.010602623679441e-01, -4.746493244362340e-01, -4.746493244362340e-01, -7.515816797092131e-01, -7.307092850497432e-01, -8.988351713994989e-01, -7.983332238735968e-01, -7.074316658878970e-01, -7.074316658878959e-01, 1.635403799471897e+02, 1.639318466046689e+02, 1.635570651826998e+02, 1.639026800773055e+02, 1.637395908381955e+02, 1.637395908381955e+02, 1.818059254928470e+00, 2.478215649206459e+00, 3.453862765606690e-01, 9.293046638324624e-01, 2.890188326212333e+00, 2.890188326212333e+00, 1.803167515922138e+00, 2.859345504084693e+00, 1.447137762920513e+00, 2.173406813302058e+00, 1.954536559273709e+00, 1.954536559273709e+00, -8.312351207233878e-01, -7.304291448885807e-01, -8.194732364245580e-01, 2.558477834969262e+01, -6.230248813019640e-01, -6.230248813019640e-01, -7.045387688357073e-01, -7.388193709091573e-01, -3.193731753544761e-01, -7.673251336822989e-01, -4.471820167157800e-01, -4.471820167157801e-01, 2.608532053473428e+00, 2.437850988902972e+00, 2.497799508203151e+00, 2.547452997668692e+00, 2.522616493927261e+00, 2.522616493927261e+00, 2.511681207575009e+00, 7.427756175515717e-01, 1.247766911079868e+00, 1.757618622271505e+00, 1.501423151498348e+00, 1.501423151498348e+00, 3.107722105706671e+00, -6.578199029638001e-01, -4.130252574060558e-01, 2.955778020257853e-01, -8.483502690379201e-02, -8.483502690379129e-02, 6.102943933016246e-01, -9.478442641136832e-01, -9.113527513973384e-01, 4.571249576297557e-01, -6.513738662392304e-01, -6.513738662392300e-01, -8.272343107119241e-01, -3.759109290743106e-01, -5.016748000123716e-01, -6.684073309638804e-01, -4.031114590855090e-01, -4.031114590855089e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_ghds10r_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_ghds10r", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [6.465558408889447e-06, 6.465504314368241e-06, 6.465247135945692e-06, 6.466052320295342e-06, 6.465632777057505e-06, 6.465632777057505e-06, 1.498213674029333e-03, 1.498203972832304e-03, 1.497869659939608e-03, 1.497597610737780e-03, 1.498093701227576e-03, 1.498093701227576e-03, 2.087894145121824e-01, 2.094815290984875e-01, 2.271002921854555e-01, 2.215377010814852e-01, 2.227053156391256e-01, 2.227053156391256e-01, 1.212783639246232e+01, 1.159308837356066e+01, 1.316911190273232e-01, 2.771712142089699e+01, 1.957499616309466e+01, 1.957499616309467e+01, 2.874952765754121e+05, 2.465546137483149e+05, 1.468181512983260e+03, 1.492465251230529e+06, 7.522070256195640e+05, 7.522070256195640e+05, 4.463987932311861e-04, 4.461530243974384e-04, 4.463865483604211e-04, 4.461695925050767e-04, 4.462746898771731e-04, 4.462746898771731e-04, 8.405710951977129e-03, 8.225420308312626e-03, 8.540671341115708e-03, 8.377662191483195e-03, 8.242192632024159e-03, 8.242192632024159e-03, 3.119433029115474e-01, 2.433121166868861e-01, 3.937539884428952e-01, 3.505402349909846e-01, 2.973293717959445e-01, 2.973293717959445e-01, 8.282011699658827e+01, 1.207275069070744e+01, 1.046004417152880e+02, 8.906969473199959e-03, 5.124476217261497e+01, 5.124476217261497e+01, 3.249256950004610e+06, 1.597482152034641e+06, 3.573149841128374e+06, 3.437938582102904e+02, 2.043738650702208e+06, 2.043738650702208e+06, 3.074431719955891e-01, 3.127951632558527e-01, 3.108978161438085e-01, 3.093465472861635e-01, 3.101217331306696e-01, 3.101217331306696e-01, 3.338635972182413e-01, 5.277855463435615e-01, 4.596408969843099e-01, 4.031650116453307e-01, 4.307748394546119e-01, 4.307748394546119e-01, 2.111649385648006e-01, 5.986104049931646e+00, 3.455983667980389e+00, 1.499685834607408e+00, 2.280243059795127e+00, 2.280243059795128e+00, 6.763744328316319e-01, 1.674445854271037e+03, 6.607838326576669e+02, 1.673974624492028e+00, 1.665281126261038e+02, 1.665281126261038e+02, 1.022742173599572e+05, 8.363882291868500e+07, 9.043637243187241e+06, 2.011089761174724e+02, 2.579643228134502e+06, 2.579643228134509e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
