
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_ol1_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_ol1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.190565253296240e+03, 2.190574077503952e+03, 2.190622524266909e+03, 2.190491048720021e+03, 2.190558627812441e+03, 2.190558627812441e+03, 5.921892650948232e+01, 5.921833510979473e+01, 5.920757476075239e+01, 5.924878980263490e+01, 5.922107250847282e+01, 5.922107250847282e+01, 2.307375764848976e+00, 2.305452628571076e+00, 2.270311342861676e+00, 2.303587695512184e+00, 2.292862507371441e+00, 2.292862507371441e+00, 2.073888602276855e-01, 2.089273713474089e-01, 3.099360071168147e+00, 1.662695056324376e-01, 1.768516513860694e-01, 1.768516513860695e-01, 8.135562993411492e-02, 7.916691972885702e-02, 1.083862544021866e-01, 8.524741793929010e-02, 7.566521621269777e-02, 7.566521621269767e-02, 1.282968565157410e+02, 1.283039068598102e+02, 1.282975475481583e+02, 1.283037660404441e+02, 1.283002263885328e+02, 1.283002263885328e+02, 2.063135325661983e+01, 2.085832475281664e+01, 2.058149388886078e+01, 2.078055686659825e+01, 2.078197748355150e+01, 2.078197748355150e+01, 1.669221853095904e+00, 1.880197621582779e+00, 1.441504449341626e+00, 1.483888884650435e+00, 1.712241899956048e+00, 1.712241899956048e+00, 1.423251534351455e-01, 2.513757196231977e-01, 1.342235897593369e-01, 1.703614588242274e+01, 1.365150781668658e-01, 1.365150781668658e-01, 7.424888354771658e-02, 7.858104777389477e-02, 3.136601709493834e-02, 1.059358872280426e-01, 4.597928850628325e-02, 4.597928850628331e-02, 1.588669881402033e+00, 1.588870898907286e+00, 1.588941355964157e+00, 1.588881426052540e+00, 1.588920918201992e+00, 1.588920918201992e+00, 1.498098918574468e+00, 1.239324122771004e+00, 1.307614235719573e+00, 1.379392858000466e+00, 1.341623259128667e+00, 1.341623259128667e+00, 2.070180796331427e+00, 3.414499002049995e-01, 4.295926863880819e-01, 6.291421375211267e-01, 5.126296936865135e-01, 5.126296936865133e-01, 1.053538195443513e+00, 1.131746403871094e-01, 1.152088171298314e-01, 5.637482325680802e-01, 1.045575837892709e-01, 1.045575837892709e-01, 9.071989310898280e-02, 3.544698132659169e-02, 5.097015797729119e-02, 1.029206498477101e-01, 4.091014416023424e-02, 4.091014416023421e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_ol1_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_ol1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.345992729201076e+03, 3.346014471828936e+03, 3.346111954967769e+03, 3.345788451546738e+03, 3.345957843087105e+03, 3.345957843087105e+03, 8.763561020280761e+01, 8.763676805993046e+01, 8.766781777072718e+01, 8.764710284986722e+01, 8.764122361387315e+01, 8.764122361387315e+01, 3.163329787454098e+00, 3.153392772461731e+00, 2.907341186178753e+00, 2.960130690606597e+00, 2.952297539056352e+00, 2.952297539056352e+00, 1.595851481140370e-01, 1.690945246132708e-01, 4.336586594532544e+00, 4.642212988231015e-02, 9.058041579445597e-02, 9.058041579445594e-02, -8.075098730296625e-02, -7.850859489082598e-02, -9.249195031961488e-02, -8.500307846094396e-02, -7.531808635205085e-02, -7.531808635205078e-02, 2.004919062410952e+02, 2.006012780023952e+02, 2.004970500447437e+02, 2.005936036329045e+02, 2.005472930820228e+02, 2.005472930820228e+02, 2.599754168048268e+01, 2.644562591827478e+01, 2.556351332875152e+01, 2.595768632573436e+01, 2.645523954405008e+01, 2.645523954405008e+01, 2.509830429580173e+00, 3.041857797837602e+00, 2.137555968364151e+00, 2.376150467447645e+00, 2.601661978031367e+00, 2.601661978031367e+00, -3.876895264054789e-02, 1.179064591856441e-01, -4.543105101281603e-02, 2.760565361114769e+01, 5.185211039170137e-03, 5.185211039170137e-03, -7.409121427185586e-02, -7.834921057642195e-02, -3.123979848974634e-02, -6.529088950323274e-02, -4.579578664299089e-02, -4.579578664299094e-02, 2.618784408453987e+00, 2.573996770990886e+00, 2.589774538068560e+00, 2.602782181140570e+00, 2.596275817341346e+00, 2.596275817341346e+00, 2.482767221601037e+00, 1.708530778042564e+00, 1.921263128234933e+00, 2.140191768954759e+00, 2.027978042852862e+00, 2.027978042852862e+00, 3.340097947550581e+00, 2.464095788587789e-01, 4.161746599820152e-01, 8.409641482665285e-01, 6.010811359956868e-01, 6.010811359956866e-01, 1.445197310474289e+00, -9.854356267784191e-02, -8.855504970667626e-02, 8.011322469265294e-01, -3.935738330729997e-02, -3.935738330729991e-02, -8.959868217778880e-02, -3.542048916237593e-02, -5.088458046543840e-02, -4.530038475524438e-02, -4.075195365431517e-02, -4.075195365431512e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_ol1_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_ol1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([7.720833859990280e-07, 7.720777230792437e-07, 7.720492762245284e-07, 7.721336001777917e-07, 7.720898790090794e-07, 7.720898790090794e-07, 1.770469753238142e-04, 1.770469090534674e-04, 1.770324411369630e-04, 1.769568567801201e-04, 1.770340928690570e-04, 1.770340928690570e-04, 2.433596353395977e-02, 2.440963331398815e-02, 2.629087662216338e-02, 2.565403421086968e-02, 2.579350698829222e-02, 2.579350698829222e-02, 1.379805039113379e+00, 1.320047333115544e+00, 1.539212314958254e-02, 3.129770549616305e+00, 2.217291217922696e+00, 2.217291217922697e+00, 3.196833242457062e+04, 2.741730023996340e+04, 1.637766233718525e+02, 1.659009014278530e+05, 8.362659377877723e+04, 8.362659377877723e+04, 5.394640865167301e-05, 5.393420338282405e-05, 5.394564829788770e-05, 5.393487331254099e-05, 5.394030460865371e-05, 5.394030460865371e-05, 9.719113207234396e-04, 9.514996699347945e-04, 9.865150681027512e-04, 9.680639274374908e-04, 9.537334575764862e-04, 9.537334575764862e-04, 3.703498953744026e-02, 3.060070795208879e-02, 4.655587438990205e-02, 4.333651841184896e-02, 3.543096745182210e-02, 3.543096745182210e-02, 9.296963805244737e+00, 1.366643719641086e+00, 1.173431543071908e+01, 1.124096399202229e-03, 5.770616638506533e+00, 5.770616638506533e+00, 3.611570926098988e+05, 1.775758659060074e+05, 3.972274471375511e+05, 3.846023717202265e+01, 2.272020392035389e+05, 2.272020392035389e+05, 4.187807964119947e-02, 3.945405374291340e-02, 3.985686858456133e-02, 4.044264648200821e-02, 4.011061703571688e-02, 4.011061703571688e-02, 4.928440384872803e-02, 6.156103178088106e-02, 5.421881855120568e-02, 4.850974953137973e-02, 5.123510203858873e-02, 5.123510203858873e-02, 2.641624450608127e-02, 6.804190500820785e-01, 3.950316160531377e-01, 1.742950250185691e-01, 2.624900919083321e-01, 2.624900919083321e-01, 7.884219205104633e-02, 1.867364756742632e+02, 7.379458793479542e+01, 1.961359333077375e-01, 1.867456285499849e+01, 1.867456285499848e+01, 1.137542112049979e+04, 9.294823859318186e+06, 1.005155526894102e+06, 2.253835407579924e+01, 2.867755633620288e+05, 2.867755633620296e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
