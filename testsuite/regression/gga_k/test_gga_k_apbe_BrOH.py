
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_apbe_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_apbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.194947156178215e+03, 2.194954785715208e+03, 2.195001046645982e+03, 2.194875866755479e+03, 2.194951077558311e+03, 2.194951077558311e+03, 5.933410994231935e+01, 5.933369262958974e+01, 5.932711649471272e+01, 5.936361457769617e+01, 5.933440081801123e+01, 5.933440081801123e+01, 2.292622221661986e+00, 2.290604383894493e+00, 2.244685461033994e+00, 2.275888671598044e+00, 2.291873019036125e+00, 2.291873019036125e+00, 1.958098132432456e-01, 1.991627463666643e-01, 3.192800511478477e+00, 1.177621562751591e-01, 1.967915574602357e-01, 1.967915574602357e-01, 8.462845824719989e-04, 9.282941765488259e-04, 1.495289710652955e-02, 1.951342835272725e-04, 9.090519103861948e-04, 9.090519103861948e-04, 1.283804253729655e+02, 1.283851220434396e+02, 1.283811475509276e+02, 1.283847955391062e+02, 1.283824885246977e+02, 1.283824885246977e+02, 2.038661885332532e+01, 2.062026827703515e+01, 2.034682388012921e+01, 2.052873440130098e+01, 2.059619603050482e+01, 2.059619603050482e+01, 1.635114169885977e+00, 1.836363605879794e+00, 1.478450224111461e+00, 1.540030810124738e+00, 1.749176065834869e+00, 1.749176065834869e+00, 6.927295851125041e-02, 2.159703671948346e-01, 6.717838305530371e-02, 1.699184378527108e+01, 8.857982641086044e-02, 8.857982641086044e-02, 1.815994686168308e-04, 2.371510261798041e-04, 1.332252034204740e-04, 2.829769298740050e-02, 1.968826155581954e-04, 1.968826155581954e-04, 1.634840510419475e+00, 1.635760306789959e+00, 1.635491234670226e+00, 1.635225101503921e+00, 1.635360480296895e+00, 1.635360480296895e+00, 1.528694659622627e+00, 1.278500477533258e+00, 1.350053407581384e+00, 1.416586273467984e+00, 1.382105063147054e+00, 1.382105063147054e+00, 2.022271492176291e+00, 3.226169963589476e-01, 4.278803686364568e-01, 6.336142355394830e-01, 5.191951918240079e-01, 5.191951918240078e-01, 1.047061053402244e+00, 1.290333181262907e-02, 2.321133773974832e-02, 5.483983610460202e-01, 4.635493289101854e-02, 4.635493289101853e-02, 1.161908796888718e-03, 1.778520752281476e-05, 6.417159120182216e-05, 4.215589475735197e-02, 1.422137393691724e-04, 1.422137393691720e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_apbe_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_apbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.345906064875666e+03, 3.345924103588791e+03, 3.346013945298752e+03, 3.345718371516350e+03, 3.345915499580135e+03, 3.345915499580135e+03, 8.808021161162904e+01, 8.808088350412129e+01, 8.810662103101546e+01, 8.809963494689212e+01, 8.808130760648305e+01, 8.808130760648305e+01, 3.206261192451925e+00, 3.199470705387313e+00, 3.035451605832395e+00, 3.082674902087753e+00, 3.203781990439788e+00, 3.203781990439788e+00, 2.508595365897427e-01, 2.557972058563490e-01, 4.625331295233795e+00, 1.556659969686192e-01, 2.522992437895271e-01, 2.522992437895271e-01, 1.405221903990016e-03, 1.540828850322395e-03, 2.386403107757382e-02, 3.249887596601056e-04, 1.508901324377365e-03, 1.508901324377365e-03, 1.998935715240933e+02, 1.999933142213543e+02, 1.999039318636768e+02, 1.999814845236180e+02, 1.999444802132832e+02, 1.999444802132832e+02, 2.760680006782044e+01, 2.798832548024745e+01, 2.746402649673899e+01, 2.775942069860533e+01, 2.805563849798896e+01, 2.805563849798896e+01, 2.461658024317250e+00, 2.969703965497167e+00, 2.213331734151170e+00, 2.452405480524721e+00, 2.662257233306145e+00, 2.662257233306145e+00, 9.924955346223842e-02, 2.780449492566092e-01, 9.570333155911173e-02, 2.747269038067021e+01, 1.210721891573354e-01, 1.210721891573354e-01, 3.024561079837756e-04, 3.948937728555528e-04, 2.218508969174176e-04, 4.344689325590854e-02, 3.278378665869011e-04, 3.278378665869011e-04, 2.700250219405133e+00, 2.654551525153724e+00, 2.670690239593198e+00, 2.683337367935370e+00, 2.676989779934190e+00, 2.676989779934190e+00, 2.532510516227522e+00, 1.828450065503584e+00, 2.010800104351227e+00, 2.197375177218974e+00, 2.100491660137247e+00, 2.100491660137248e+00, 3.261745283035159e+00, 4.117810994322085e-01, 5.550253135006457e-01, 8.878000020765401e-01, 6.964361875334076e-01, 6.964361875334074e-01, 1.485964955467742e+00, 2.078040451698931e-02, 3.635315415352435e-02, 7.962044754766059e-01, 6.768059742041768e-02, 6.768059742041767e-02, 1.927933298537909e-03, 2.963937221957410e-05, 1.069207565282412e-04, 6.148742766675862e-02, 2.368338481548276e-04, 2.368338481548270e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_apbe_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_apbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([7.908481117980113e-07, 7.908454690705449e-07, 7.908249321315465e-07, 7.908683811007286e-07, 7.908467912335985e-07, 7.908467912335985e-07, 1.730103625164893e-04, 1.730151021958141e-04, 1.731239036546671e-04, 1.728264027949617e-04, 1.730105892514969e-04, 1.730105892514969e-04, 2.090996968076473e-02, 2.089036939367580e-02, 2.006491533600188e-02, 1.973730787770141e-02, 2.090326663940802e-02, 2.090326663940802e-02, 5.876830683320282e-01, 5.925534661258779e-01, 1.344424478997847e-02, 6.104498776972427e-01, 5.895922229806000e-01, 5.895922229806000e-01, 2.345078877749305e-01, 2.463191598834389e-01, 4.213662210554091e-01, 7.962942253477802e-02, 2.532175171943785e-01, 2.532175171943785e-01, 5.701183396543608e-05, 5.703155988618929e-05, 5.701363939994001e-05, 5.702898130587129e-05, 5.702226106198445e-05, 5.702226106198445e-05, 7.357391280172133e-04, 7.275660182876872e-04, 7.316355823993376e-04, 7.253970114698262e-04, 7.352419446678467e-04, 7.352419446678467e-04, 3.840785311743414e-02, 3.433444200357116e-02, 4.440376212733467e-02, 4.419857746095662e-02, 3.510086864304042e-02, 3.510086864304042e-02, 5.181488364045738e-01, 3.458576334336982e-01, 5.858740657728037e-01, 1.219664148504654e-03, 6.417108875954746e-01, 6.417108875954746e-01, 8.149119406760523e-02, 9.332769454605445e-02, 2.002076306917499e-01, 5.766249723374229e-01, 1.256026510111732e-01, 1.256026510111731e-01, 4.146455466473816e-02, 4.094134603676439e-02, 4.112801369423027e-02, 4.127349990327618e-02, 4.120079495233429e-02, 4.120079495233429e-02, 4.594536524036207e-02, 5.209295862810237e-02, 5.059923828191436e-02, 4.902428412993493e-02, 4.990292017679433e-02, 4.990292017679432e-02, 2.965424774312303e-02, 2.506907358798123e-01, 2.046435799186018e-01, 1.444089401107882e-01, 1.763518601601854e-01, 1.763518601601855e-01, 6.945573982813973e-02, 3.297097792150324e-01, 4.465558067721568e-01, 1.894258499851336e-01, 7.194546952557794e-01, 7.194546952557807e-01, 2.065160876792450e-01, 4.394107167633061e-02, 7.187514649574125e-02, 8.426037784178010e-01, 1.558892894789067e-01, 1.558892894789062e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
