
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_tfvw_opt_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tfvw_opt", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.015130190738092e+03, 2.015125152833130e+03, 2.015131314051740e+03, 2.015213243806446e+03, 2.015127294543287e+03, 2.015127294543287e+03, 5.923805634928404e+01, 5.923484805908435e+01, 5.915163204635144e+01, 5.932025103371893e+01, 5.923691089744674e+01, 5.923691089744674e+01, 2.808903774076132e+00, 2.819545373645195e+00, 3.155476544987540e+00, 3.175892045855273e+00, 2.812699310365682e+00, 2.812699310365682e+00, 4.048879726503700e-01, 3.961345946954898e-01, 3.453629667809747e+00, 4.626271572483222e-01, 4.019744761073137e-01, 4.019744761073137e-01, 3.004022561296443e-01, 2.998620542216878e-01, 4.416403889738683e-01, 3.582630965466089e-01, 2.942068314836723e-01, 2.942068314836723e-01, 1.103670157863472e+02, 1.102139431113054e+02, 1.103519231246325e+02, 1.102328888135054e+02, 1.102876758977016e+02, 1.102876758977016e+02, 2.847963626480458e+01, 2.850902775856673e+01, 2.884438025854753e+01, 2.886426618845775e+01, 2.803620077954045e+01, 2.803620077954045e+01, 1.560996538319346e+00, 1.405183543290952e+00, 1.436773497782088e+00, 1.235557897777866e+00, 1.613668457228516e+00, 1.613668457228516e+00, 5.128240030965390e-01, 6.476180189490545e-01, 4.746000930893620e-01, 1.301078411618160e+01, 4.532904179755688e-01, 4.532904179755688e-01, 3.478493708852752e-01, 3.474004802492689e-01, 2.053545785973198e-01, 4.245461225971920e-01, 2.858436121249142e-01, 2.858436121249143e-01, 1.171957388839306e+00, 1.238295188916651e+00, 1.214551959562445e+00, 1.196152598637707e+00, 1.205352163638411e+00, 1.205352163638411e+00, 1.085705453716161e+00, 1.445110046910453e+00, 1.333572654188967e+00, 1.232076839794089e+00, 1.280889991195765e+00, 1.280889991195765e+00, 1.560027369120759e+00, 7.453255626232514e-01, 7.673725987987515e-01, 7.708162253119440e-01, 7.581074174904558e-01, 7.581074174904556e-01, 1.215993560363086e+00, 4.857084013195019e-01, 4.693805336219971e-01, 5.888276038095718e-01, 4.041322577370921e-01, 4.041322577370918e-01, 3.462757265458060e-01, 2.651539072797981e-01, 2.856788845066388e-01, 3.641766146203609e-01, 2.365655955747466e-01, 2.365655955747467e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_tfvw_opt_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tfvw_opt", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([1.828873418668480e+03, 1.828897117906642e+03, 1.828987953092281e+03, 1.828600164336863e+03, 1.828886041331091e+03, 1.828886041331091e+03, 4.264942803392963e+01, 4.265306398668071e+01, 4.275642435267940e+01, 4.259629056292337e+01, 4.265166150655416e+01, 4.265166150655416e+01, 9.348604053389059e-01, 9.165368113980500e-01, 3.842588741889950e-01, 4.197992787191991e-01, 9.282621270024940e-01, 9.282621270024940e-01, -1.247060689482310e-01, -1.084417334583211e-01, 1.923894244110458e+00, -3.153567956103590e-01, -1.195500075226238e-01, -1.195500075226238e-01, -2.995282865389308e-01, -2.989031708163858e-01, -4.257989545852049e-01, -3.580619581974767e-01, -2.932678290077228e-01, -2.932678290077228e-01, 1.178506296711887e+02, 1.180848871604511e+02, 1.178742873136908e+02, 1.180564435558153e+02, 1.179712312712205e+02, 1.179712312712205e+02, 3.720328610656163e+00, 4.146282723465636e+00, 3.172419041050075e+00, 3.506633881194400e+00, 4.710695914079487e+00, 4.710695914079487e+00, 1.276661829145041e+00, 1.943079732657106e+00, 1.118287645379797e+00, 1.544107019011916e+00, 1.446236004365775e+00, 1.446236004365775e+00, -4.333278586110524e-01, -3.634070171746305e-01, -3.971287301192723e-01, 1.796629509850947e+01, -3.469945692143347e-01, -3.469945692143347e-01, -3.476621873135984e-01, -3.471560043583669e-01, -2.052172423397495e-01, -3.937617720015981e-01, -2.856406473788907e-01, -2.856406473788906e-01, 1.849479251789730e+00, 1.750966908194784e+00, 1.786224255569717e+00, 1.813521792392331e+00, 1.799867036956595e+00, 1.799867036956595e+00, 1.744904017388685e+00, 6.850611136198852e-01, 9.906020842541565e-01, 1.279565676688267e+00, 1.134320179850548e+00, 1.134320179850548e+00, 2.120886281155016e+00, -2.957255906751275e-01, -1.331915607330597e-01, 2.656974545024712e-01, 5.272299290234020e-02, 5.272299290234020e-02, 5.168813792235362e-01, -4.721195684608815e-01, -4.444764767711864e-01, 3.364907531170516e-01, -3.517610331398804e-01, -3.517610331398802e-01, -3.450752720595782e-01, -2.651355821063421e-01, -2.856127559933554e-01, -3.165105972037259e-01, -2.364189992039289e-01, -2.364189992039292e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_tfvw_opt_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tfvw_opt", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([3.873167713657503e-06, 3.873139509456109e-06, 3.872992917398363e-06, 3.873455197892636e-06, 3.873153013311554e-06, 3.873153013311554e-06, 8.975542832491473e-04, 8.975486321869511e-04, 8.972825152013150e-04, 8.971704608547464e-04, 8.975399064389551e-04, 8.975399064389551e-04, 1.274322221090770e-01, 1.278254562259934e-01, 1.386071969547975e-01, 1.353843236805616e-01, 1.275754579620750e-01, 1.275754579620750e-01, 6.224175940303128e+00, 5.982026806806001e+00, 7.402330264802165e-02, 1.633311249226600e+01, 6.150189574692256e+00, 6.150189574692256e+00, 3.572707818156738e+04, 3.108803549602977e+04, 4.629672055816259e+02, 3.235934045028512e+05, 3.208055529308171e+04, 3.208055529308171e+04, 2.677430168234101e-04, 2.676002123168701e-04, 2.677279449856359e-04, 2.676169126185301e-04, 2.676704213925245e-04, 2.676704213925245e-04, 5.051948168878806e-03, 4.946650844986268e-03, 5.095362807920363e-03, 5.011985668844517e-03, 4.925913241999279e-03, 4.925913241999279e-03, 1.931086911835808e-01, 1.506650721483050e-01, 2.260164436782365e-01, 1.991834794324891e-01, 1.724567442120459e-01, 1.724567442120459e-01, 4.118346504005974e+01, 6.092291219882684e+00, 4.280851750756080e+01, 5.354035958357260e-03, 2.663590927849866e+01, 2.663590927849866e+01, 3.604461477276327e+05, 2.414837586775232e+05, 5.735406050915762e+05, 1.709019383426341e+02, 3.192354179479831e+05, 3.192354179479831e+05, 1.757606887672256e-01, 1.786059776696287e-01, 1.775789852267600e-01, 1.767920426829026e-01, 1.771853255067261e-01, 1.771853255067261e-01, 1.938304704911957e-01, 2.969068600740001e-01, 2.605186496209100e-01, 2.319024004082301e-01, 2.459289127226156e-01, 2.459289127226156e-01, 1.307099169802770e-01, 3.061981552958765e+00, 1.827772354954896e+00, 8.747408850777690e-01, 1.264290690823457e+00, 1.264290690823457e+00, 4.046608146331047e-01, 5.827318394115292e+02, 2.348750223961800e+02, 1.037063181997338e+00, 7.701988918609912e+01, 7.701988918609911e+01, 2.219337925379008e+04, 1.176711077661317e+07, 1.716559433166570e+06, 8.870103392611672e+01, 5.200644344378343e+05, 5.200644344378365e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
