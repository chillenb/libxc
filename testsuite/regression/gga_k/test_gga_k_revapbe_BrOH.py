
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_revapbe_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_revapbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.198467085924162e+03, 2.198474562201854e+03, 2.198520398346432e+03, 2.198397723272586e+03, 2.198470924315749e+03, 2.198470924315749e+03, 5.950423747218271e+01, 5.950376973213412e+01, 5.949582532581098e+01, 5.953475784755539e+01, 5.950450385984338e+01, 5.950450385984338e+01, 2.310674674895062e+00, 2.308981402892811e+00, 2.273753079903386e+00, 2.304658457953707e+00, 2.310041697630064e+00, 2.310041697630064e+00, 2.026460208904946e-01, 2.055788346435370e-01, 3.207120739199311e+00, 1.282660191878158e-01, 2.034928899238899e-01, 2.034928899238899e-01, 1.050894380051974e-03, 1.152487021478188e-03, 1.815394319261414e-02, 2.427345281893081e-04, 1.128602616821643e-03, 1.128602616821643e-03, 1.284950382789407e+02, 1.284980862098227e+02, 1.284955952867711e+02, 1.284979611002044e+02, 1.284962485146698e+02, 1.284962485146698e+02, 2.064525702799499e+01, 2.087303986104184e+01, 2.061759018723863e+01, 2.079474921649290e+01, 2.083575576298891e+01, 2.083575576298891e+01, 1.638614353097531e+00, 1.836664584726171e+00, 1.482020462582126e+00, 1.540622334833125e+00, 1.752089094992576e+00, 1.752089094992576e+00, 7.922478339918426e-02, 2.299710752830740e-01, 7.658519123373091e-02, 1.699466977901056e+01, 9.859191625969048e-02, 9.859191625969048e-02, 2.259020088629625e-04, 2.949694064178310e-04, 1.657103586553751e-04, 3.362328277915010e-02, 2.448822412915346e-04, 2.448822412915346e-04, 1.634863742286820e+00, 1.635968697684553e+00, 1.635612425425606e+00, 1.635294706670991e+00, 1.635454130552061e+00, 1.635454130552061e+00, 1.528704306751720e+00, 1.285603367436056e+00, 1.353675711913081e+00, 1.418005509211409e+00, 1.384489245234797e+00, 1.384489245234797e+00, 2.022665084038010e+00, 3.365308643513564e-01, 4.388040726264902e-01, 6.384621758118630e-01, 5.267798772698834e-01, 5.267798772698833e-01, 1.053638896938978e+00, 1.574576301350997e-02, 2.788526921264334e-02, 5.507664133459348e-01, 5.357347058725800e-02, 5.357347058725799e-02, 1.442236723559283e-03, 2.213177977652410e-05, 7.984497564333960e-05, 4.869324802701247e-02, 1.768970919919473e-04, 1.768970919919467e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_revapbe_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_revapbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.334190480166114e+03, 3.334209000246733e+03, 3.334300169174532e+03, 3.333996728381530e+03, 3.334200175584881e+03, 3.334200175584881e+03, 8.753405751566865e+01, 8.753487966777423e+01, 8.756469306726076e+01, 8.755044090870696e+01, 8.753522614335432e+01, 8.753522614335432e+01, 3.154035714962945e+00, 3.146447414984987e+00, 2.958167579530270e+00, 3.005811124368527e+00, 3.151270439694899e+00, 3.151270439694899e+00, 2.376136204148272e-01, 2.428826865009716e-01, 4.581069809458873e+00, 1.480144381312637e-01, 2.391557992353036e-01, 2.391557992353036e-01, 1.738968084783955e-03, 1.905733016929856e-03, 2.788412961274866e-02, 4.039945619236200e-04, 1.866266045135713e-03, 1.866266045135713e-03, 1.995020603599630e+02, 1.996072260375810e+02, 1.995129637338190e+02, 1.995947336418955e+02, 1.995557738937433e+02, 1.995557738937433e+02, 2.691629614249798e+01, 2.730889924922822e+01, 2.674813692165035e+01, 2.705224503429027e+01, 2.740523996777427e+01, 2.740523996777427e+01, 2.450197753371106e+00, 2.968632341522043e+00, 2.201731947444104e+00, 2.450333169389771e+00, 2.652580923431279e+00, 2.652580923431279e+00, 1.013804581699168e-01, 2.609716969685964e-01, 9.716984550245264e-02, 2.746263075777681e+01, 1.181136413189724e-01, 1.181136413189724e-01, 3.760011139617488e-04, 4.907585833274263e-04, 2.757262826254450e-04, 4.818487406947151e-02, 4.074191336766517e-04, 4.074191336766517e-04, 2.700165757965914e+00, 2.653806917610933e+00, 2.670254503272262e+00, 2.683085900269695e+00, 2.676652253944294e+00, 2.676652253944294e+00, 2.532475343065957e+00, 1.806980437706035e+00, 1.999115742001385e+00, 2.192548712077246e+00, 2.092587042499202e+00, 2.092587042499202e+00, 3.260347699560801e+00, 3.878236574247791e-01, 5.308687488487956e-01, 8.737185454001724e-01, 6.767807956235528e-01, 6.767807956235526e-01, 1.466364519560410e+00, 2.459329422826393e-02, 4.139187127134921e-02, 7.888584905823608e-01, 7.059467967223754e-02, 7.059467967223751e-02, 2.383290881413072e-03, 3.687996934052095e-05, 1.329985131170737e-04, 6.406089010353362e-02, 2.943757224913035e-04, 2.943757224913026e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_revapbe_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_revapbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([8.353663724114685e-07, 8.353624739865166e-07, 8.353374436045476e-07, 8.354014338581133e-07, 8.353643803684604e-07, 8.353643803684604e-07, 1.862894625114038e-04, 1.862924954214697e-04, 1.863527507623068e-04, 1.861304352964583e-04, 1.862886417226496e-04, 1.862886417226496e-04, 2.370962463073881e-02, 2.371713216377841e-02, 2.363979949134772e-02, 2.320468993559123e-02, 2.371271403053333e-02, 2.371271403053333e-02, 7.794997851462442e-01, 7.762791377599941e-01, 1.476024027432140e-02, 9.886785386081909e-01, 7.789830227903917e-01, 7.789830227903917e-01, 5.591037159231070e-01, 5.869317703361188e-01, 9.453437504158100e-01, 1.907291908810616e-01, 6.033764645293894e-01, 6.033764645293894e-01, 5.937162637582363e-05, 5.937435839090958e-05, 5.937172571573300e-05, 5.937385328347339e-05, 5.937329113059666e-05, 5.937329113059666e-05, 8.652626470492957e-04, 8.531134978850378e-04, 8.640839794895567e-04, 8.546884187633856e-04, 8.583026814299028e-04, 8.583026814299028e-04, 4.092831093134099e-02, 3.492867336782090e-02, 4.751159092826241e-02, 4.538101518485144e-02, 3.711664063629400e-02, 3.711664063629400e-02, 9.803463424967453e-01, 5.164848376388524e-01, 1.097917195704945e+00, 1.240930877163375e-03, 1.116343356996985e+00, 1.116343356996985e+00, 1.951975284727002e-01, 2.234765087251880e-01, 4.794374890586862e-01, 1.218745900968188e+00, 3.007562857330890e-01, 3.007562857330889e-01, 4.167316689035216e-02, 4.156470936380163e-02, 4.160377852833844e-02, 4.163429498902207e-02, 4.161915922035674e-02, 4.161915922035674e-02, 4.609913247170357e-02, 5.783102782733703e-02, 5.434657551185960e-02, 5.117936664957785e-02, 5.282267680113265e-02, 5.282267680113265e-02, 3.021444126008017e-02, 3.445594214887596e-01, 2.594746294399559e-01, 1.634329993926000e-01, 2.100754860128764e-01, 2.100754860128764e-01, 7.764759482815088e-02, 7.500585025621337e-01, 9.732861010331323e-01, 2.075860156356210e-01, 1.404294121824503e+00, 1.404294121824505e+00, 4.918295020855754e-01, 1.053507752416127e-01, 1.722685810335558e-01, 1.641958294691436e+00, 3.733445498455842e-01, 3.733445498455830e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
