
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_absp3_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_absp3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.033174058284290e+02, -1.033426497671175e+02, -1.034198593106821e+02, -1.030071823457913e+02, -1.033310146161965e+02, -1.033310146161965e+02, 6.987546831194739e+00, 6.981804982041626e+00, 6.824708918263817e+00, 7.098555678826092e+00, 6.984653111017318e+00, 6.984653111017318e+00, 1.312267922293955e+00, 1.336963056353496e+00, 2.074897192383915e+00, 2.058504935246045e+00, 1.321132583912129e+00, 1.321132583912129e+00, 4.232024096020067e-01, 4.018138487694022e-01, 9.148757484722663e-01, 6.394875904429816e-01, 4.163155749568999e-01, 4.163155749568999e-01, 5.007179083994158e-01, 4.997394725082064e-01, 7.230064122487222e-01, 5.979205611864425e-01, 4.903162996476268e-01, 4.903162996476268e-01, -2.161109126346539e+01, -2.193987087600435e+01, -2.164401371501113e+01, -2.189967442972201e+01, -2.178076519997515e+01, -2.178076519997515e+01, 1.849939803962630e+01, 1.813772218030817e+01, 1.927354365330194e+01, 1.898732641205218e+01, 1.726574648190583e+01, 1.726574648190583e+01, 4.630100592437522e-02, -6.744108438878859e-01, 9.383314394898477e-02, -4.446893743442555e-01, -6.624248764596592e-02, -6.624248764596592e-02, 7.844242460220688e-01, 8.247934238325341e-01, 7.224378240865502e-01, -6.221961766749206e+00, 6.608613451391823e-01, 6.608613451391823e-01, 5.805479643180255e-01, 5.797468838525665e-01, 3.427051288267196e-01, 6.809891815993395e-01, 4.770182719168641e-01, 4.770182719168644e-01, -7.689568153864366e-01, -6.291862626633848e-01, -6.792106588991894e-01, -7.179540342911603e-01, -6.985770346189399e-01, -6.985770346189399e-01, -7.408148180375651e-01, 4.910216240021300e-01, 1.298151429801677e-01, -2.087318310166948e-01, -4.025418387448051e-02, -4.025418387448076e-02, -7.159734693721270e-01, 8.387224511271940e-01, 7.090279274562703e-01, 3.518536484947599e-01, 5.342140172766219e-01, 5.342140172766218e-01, 4.669034621387981e-01, 7.986076690473742e-01, 7.611422534235279e-01, 1.483363977845274e-01, 6.274368833968998e-01, 6.274368833968993e-01, 5.770068265124991e-01, 4.426444168639898e-01, 4.768667003561528e-01, 5.649772930443707e-01, 3.948019793978754e-01, 3.948019793978757e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_absp3_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_absp3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.725913371252735e+03, -2.725901862269472e+03, -2.725896043192737e+03, -2.726083604422527e+03, -2.725906921256911e+03, -2.725906921256911e+03, -8.197790477751983e+01, -8.197247769291319e+01, -8.183020810435106e+01, -8.211030006774646e+01, -8.197581185312987e+01, -8.197581185312987e+01, -4.067721328377046e+00, -4.086762426406845e+00, -4.680183089137948e+00, -4.704975020621517e+00, -4.074523139679522e+00, -4.074523139679522e+00, -6.294195065879430e-01, -6.135590967101018e-01, -4.872795069584266e+00, -7.478802669426590e-01, -6.241832254360186e-01, -6.241832254360186e-01, -5.013611600493956e-01, -5.004452217003440e-01, -7.346658897829899e-01, -5.980686013200217e-01, -4.910074162475727e-01, -4.910074162475727e-01, -1.463597152210624e+02, -1.460906885636098e+02, -1.463330966936830e+02, -1.461238944446847e+02, -1.462204103777250e+02, -1.462204103777250e+02, -4.219894177149339e+01, -4.217240550496039e+01, -4.283827541900285e+01, -4.281268040879758e+01, -4.136783830949126e+01, -4.136783830949126e+01, -2.134850134345078e+00, -1.789949357778331e+00, -1.974387471699410e+00, -1.601175908744924e+00, -2.185882316942084e+00, -2.185882316942084e+00, -8.429343208012000e-01, -1.033975983244699e+00, -7.794576364303890e-01, -1.657752408280103e+01, -7.390963098658866e-01, -7.390963098658866e-01, -5.806857335752283e-01, -5.799268209143067e-01, -3.428062098886047e-01, -7.036468169731404e-01, -4.771676562995186e-01, -4.771676562995185e-01, -1.454855231446698e+00, -1.570944950849049e+00, -1.529395077632803e+00, -1.497200861832813e+00, -1.513298790209235e+00, -1.513298790209235e+00, -1.342546241756962e+00, -2.058852047749710e+00, -1.840434426798420e+00, -1.639865889148941e+00, -1.737368223222734e+00, -1.737368223222734e+00, -1.993221225881062e+00, -1.169633190882412e+00, -1.175792450451534e+00, -1.114739613695326e+00, -1.130994505844060e+00, -1.130994505844059e+00, -1.742319307200400e+00, -8.086092060007053e-01, -7.794719251085577e-01, -8.293813290662460e-01, -6.659827058048901e-01, -6.659827058048894e-01, -5.778903747928938e-01, -4.426579044019854e-01, -4.769153717009365e-01, -6.000600289622099e-01, -3.949098760093951e-01, -3.949098760093956e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_absp3_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_absp3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [6.466056283234563e-06, 6.466009197756443e-06, 6.465764469780239e-06, 6.466536223526939e-06, 6.466031741755516e-06, 6.466031741755516e-06, 1.498421174038643e-03, 1.498411739878048e-03, 1.497967471120726e-03, 1.497780402094735e-03, 1.498397172686069e-03, 1.498397172686069e-03, 2.127416061921152e-01, 2.133980905275349e-01, 2.313976576874749e-01, 2.260172348590344e-01, 2.129807311553839e-01, 2.129807311553839e-01, 1.039094480851941e+01, 9.986689159943243e+00, 1.235781346377657e-01, 2.726729965319867e+01, 1.026742833838440e+01, 1.026742833838440e+01, 5.964453786572185e+04, 5.189989231390612e+04, 7.729001762631485e+02, 5.402227120247934e+05, 5.355685357776580e+04, 5.355685357776580e+04, 4.469833335950086e-04, 4.467449287426880e-04, 4.469581719292752e-04, 4.467728090459601e-04, 4.468621392195736e-04, 4.468621392195736e-04, 8.433970231851093e-03, 8.258181711162384e-03, 8.506448761135831e-03, 8.367254872862299e-03, 8.223561338896960e-03, 8.223561338896960e-03, 3.223851271846090e-01, 2.515276663577714e-01, 3.773229443710125e-01, 3.325266768488966e-01, 2.879077532755357e-01, 2.879077532755357e-01, 6.875369789659389e+01, 1.017076998310966e+01, 7.146664024634525e+01, 8.938290414619800e-03, 4.446729428797773e+01, 4.446729428797773e+01, 6.017464903633266e+05, 4.031448391945296e+05, 9.574968365468717e+05, 2.853120840444644e+02, 5.329472753722590e+05, 5.329472753722590e+05, 2.934235204795085e-01, 2.981735854250898e-01, 2.964590738343240e-01, 2.951453133270494e-01, 2.958018789761704e-01, 2.958018789761704e-01, 3.235901009869711e-01, 4.956708849315528e-01, 4.349226204021869e-01, 3.871492494294326e-01, 4.105657975335820e-01, 4.105657975335819e-01, 2.182135508852704e-01, 5.111822292084749e+00, 3.051372879724367e+00, 1.460335367408629e+00, 2.110668932927307e+00, 2.110668932927307e+00, 6.755606254308927e-01, 9.728411342429538e+02, 3.921118904777629e+02, 1.731324176957159e+00, 1.285807832823024e+02, 1.285807832823023e+02, 3.705071661734571e+04, 1.964459228149110e+07, 2.865708569560217e+06, 1.480818596429327e+02, 8.682210925506415e+05, 8.682210925506453e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
