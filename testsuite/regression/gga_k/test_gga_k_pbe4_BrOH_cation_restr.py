
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_pbe4_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_pbe4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.478423771538601e+03, 2.478390442836167e+03, 2.478322178560539e+03, 2.478816381567842e+03, 2.478546073763588e+03, 2.478546073763588e+03, 8.053287221051123e+01, 8.052344167420712e+01, 8.030897936003157e+01, 8.071197807332805e+01, 8.052544738965186e+01, 8.052544738965186e+01, 3.830189068467202e+00, 3.836690340844032e+00, 3.867851141329035e+00, 3.926915084118062e+00, 3.909724691295340e+00, 3.909724691295340e+00, 1.851140628288830e-01, 2.012814297272944e-01, 4.996665976391826e+00, 3.935488030586405e-02, 8.779022944048935e-02, 8.779022944048918e-02, -1.437970569225623e-04, -1.592029965574047e-04, -4.283923043174627e-03, -4.811278753770073e-05, -7.588306374645429e-05, -7.588306374645460e-05, 1.212422373932643e+02, 1.207447590078700e+02, 1.212220259116042e+02, 1.207827744577091e+02, 1.209882997082810e+02, 1.209882997082810e+02, 3.498022371650868e+01, 3.544296894407371e+01, 3.466056736664465e+01, 3.509801105817012e+01, 3.535572490098094e+01, 3.535572490098094e+01, 2.089940981442366e+00, 1.410762335810369e+00, 1.941767428990675e+00, 1.158000073954442e+00, 2.008400003311655e+00, 2.008400003311655e+00, -8.580023355505281e-03, 1.109280697687229e-01, -9.669973854979573e-03, 1.276588785626923e+01, 7.953181695046723e-03, 7.953181695046723e-03, -2.865546887014614e-05, -4.597792836670325e-05, -2.686379401699523e-05, -8.365990794238111e-03, -3.898769209817644e-05, -3.898769209817676e-05, 1.323982858824889e+00, 1.190728154199861e+00, 1.202163210237202e+00, 1.238102396810127e+00, 1.216756919734274e+00, 1.216756919734274e+00, 1.357888953374903e+00, 2.043527415763471e+00, 1.834903160052866e+00, 1.384165045589453e+00, 1.627097666478014e+00, 1.627097666478014e+00, 1.562093514421361e+00, 2.767731019805694e-01, 5.419813701894735e-01, 1.065872890271790e+00, 8.257455840174850e-01, 8.257455840174842e-01, 1.747703925349162e+00, -3.992788329911475e-03, -6.653419312199919e-03, 8.802023348395105e-01, -8.041685204460931e-03, -8.041685204461187e-03, -2.853745283558521e-04, -3.289422598208547e-06, -1.448600968578984e-05, -8.454459132913820e-03, -3.338417111182142e-05, -3.338417111182136e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_pbe4_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_pbe4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.056595572189920e+02, -1.056474870526192e+02, -1.056142756426644e+02, -1.057929851919807e+02, -1.056966410333563e+02, -1.056966410333563e+02, 6.526881166722707e+00, 6.511908646757482e+00, 6.168907867613801e+00, 6.771234188115949e+00, 6.509244789389565e+00, 6.509244789389565e+00, 3.103620586050254e+00, 3.194275338178214e+00, 5.468058135110071e+00, 5.442626557295263e+00, 5.354757569556100e+00, 5.354757569556100e+00, 7.083713850546760e-01, 7.368060937287716e-01, 3.048964815422356e+00, 2.781753169393418e-01, 4.444120051955189e-01, 4.444120051955278e-01, -2.379005373889234e-04, -2.631165311175011e-04, -5.600438418582270e-03, -8.000120609308289e-05, -1.259468930344975e-04, -1.259468930344980e-04, 2.134413030853415e+01, 2.243298988075738e+01, 2.138876105680205e+01, 2.234977570763574e+01, 2.189627863889224e+01, 2.189627863889224e+01, 5.386730839142628e+01, 5.290051090263841e+01, 5.711071333576769e+01, 5.636131087431497e+01, 5.165516477813091e+01, 5.165516477813091e+01, -3.569941667373233e-02, 2.145712542814182e+00, 1.279761579415786e-01, 1.170189521385450e+00, -9.054671815057617e-02, -9.054671815057617e-02, 4.382116224722431e-02, 5.911671911516894e-01, 2.877485353570410e-02, 2.038511461131429e+01, 1.295190498592917e-01, 1.295190498592917e-01, -4.768313431003687e-05, -7.644482055146429e-05, -4.461444703450232e-05, -2.659065336171018e-03, -6.475169324700267e-05, -6.475169324700059e-05, 2.657402537937957e+00, 1.887602090592267e+00, 2.211355442236658e+00, 2.447559886467824e+00, 2.334680481967712e+00, 2.334680481967712e+00, 2.565867101152981e+00, 1.545795803430445e+00, 2.547700442563473e-01, 8.521276106540011e-02, -5.856575046698705e-02, -5.856575046698705e-02, 2.165274594678548e+00, 1.115457370039144e+00, 1.623894437221438e+00, 1.116579264486184e+00, 1.681435969267827e+00, 1.681435969267839e+00, 1.406433547872261e+00, -5.420703692711641e-03, -6.836716668807536e-03, 4.005879489612400e-01, 1.748701956939090e-02, 1.748701956939360e-02, -4.693514073648546e-04, -5.480277993652579e-06, -2.411508323234147e-05, 1.015182400346959e-02, -5.545260757799726e-05, -5.545260757799715e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_pbe4_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_pbe4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.072580604365158e-05, 1.072580363692642e-05, 1.072562505252994e-05, 1.072566330193385e-05, 1.072566759559307e-05, 1.072566759559307e-05, 2.043636804062455e-03, 2.044020170998080e-03, 2.052712953358651e-03, 2.036416326826642e-03, 2.043948618699613e-03, 2.043948618699613e-03, 1.169911320250789e-01, 1.133711349348100e-01, 2.934584042019200e-02, 3.216249984362475e-02, 3.446841250411427e-02, 3.446841250411427e-02, -2.965191111079855e+00, -2.957740717604992e+00, 9.801061036038378e-02, -2.884078044979115e+00, -3.237281502526447e+00, -3.237281502526464e+00, -2.602497694845569e-01, -2.894495571297841e-01, -9.230693168089901e-01, -1.364521050061460e-01, -2.179149971318529e-01, -2.179149971300502e-01, 7.310584553642466e-04, 7.284687269756482e-04, 7.309501605990852e-04, 7.286654377096318e-04, 7.297540951009809e-04, 7.297540951009809e-04, 5.136529995543809e-04, 7.058941919389756e-04, 7.415521777800313e-05, 2.382482406085133e-04, 8.476111878063224e-04, 8.476111878063224e-04, 4.787686600265724e-01, 6.851726337629770e-02, 5.461746310750829e-01, 3.394673800215831e-01, 4.832198648521378e-01, 4.832198648521378e-01, -1.957951724247353e+00, -1.844358115170652e+00, -1.957258498298857e+00, 1.271673162370089e-03, -3.017512623856549e+00, -3.017512623856549e+00, -1.387028739746146e-01, -1.569968156196570e-01, -7.540741468683740e-01, -1.794474982330610e+00, -4.227398509945393e-01, -4.227398509918132e-01, -6.509647465819169e-01, 5.160273512542898e-02, -1.416373358282615e-01, -3.424702999168142e-01, -2.369543452530901e-01, -2.369543452530901e-01, -1.060792781042566e+00, 3.207440304721370e-01, 5.889217835944941e-01, 6.787028262910099e-01, 6.822118027434180e-01, 6.822118027434180e-01, 1.050420046056793e-01, -1.379440323739705e+00, -9.494469549107664e-01, 5.539964216713248e-01, -3.162640803893790e-01, -3.162640803893789e-01, 3.822610189293896e-01, -8.023954418540343e-01, -1.118430896815999e+00, 1.510764139745875e+00, -2.700374389678876e+00, -2.700374389679109e+00, -2.963299815080765e-01, -2.058660994543030e-01, -2.091655614307952e-01, -2.519835638576657e+00, -4.940661070592333e-01, -4.940661070518342e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
