
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_lgap_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_lgap", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.192855003815074e+03, 2.192862616871849e+03, 2.192908805991711e+03, 2.192783896532585e+03, 2.192858916489184e+03, 2.192858916489184e+03, 5.930324181454563e+01, 5.930279711973071e+01, 5.929547218156806e+01, 5.933325515682601e+01, 5.930351834178754e+01, 5.930351834178754e+01, 2.302268686092494e+00, 2.300644216790650e+00, 2.268804349708823e+00, 2.299382211675340e+00, 2.301660144477836e+00, 2.301660144477836e+00, 2.043239200498319e-01, 2.070067342316972e-01, 3.194924500800671e+00, 1.305418550031135e-01, 2.050918505185516e-01, 2.050918505185516e-01, 8.463837499736860e-04, 9.286173580757820e-04, 1.534141780818138e-02, 1.947896494464586e-04, 9.093639472966381e-04, 9.093639472966381e-04, 1.282782883365451e+02, 1.282839606327231e+02, 1.282791068750117e+02, 1.282835133260606e+02, 1.282808526560064e+02, 1.282808526560064e+02, 2.059833331827425e+01, 2.082239857427045e+01, 2.057547880779441e+01, 2.074955678636822e+01, 2.078071453977596e+01, 2.078071453977596e+01, 1.633729295856256e+00, 1.836837147886774e+00, 1.477349846257312e+00, 1.539636684582727e+00, 1.747516810188244e+00, 1.747516810188244e+00, 7.640057102767950e-02, 2.343535509029504e-01, 7.429117439330461e-02, 1.699609712308798e+01, 9.892916923156493e-02, 9.892916923156493e-02, 1.812753384245836e-04, 2.367592917630250e-04, 1.330013972167740e-04, 2.981228714066496e-02, 1.965583982293471e-04, 1.965583982293471e-04, 1.636250969647937e+00, 1.636381641678426e+00, 1.636456332992609e+00, 1.636429071097668e+00, 1.636449903369636e+00, 1.636449903369636e+00, 1.530010842252272e+00, 1.280634454884706e+00, 1.349217933009631e+00, 1.415379882368315e+00, 1.380803013964784e+00, 1.380803013964784e+00, 2.022607140322068e+00, 3.406077566411777e-01, 4.403759445645676e-01, 6.361150821205920e-01, 5.259727765634963e-01, 5.259727765634962e-01, 1.049593921864263e+00, 1.315991704385738e-02, 2.411798693625055e-02, 5.486844693049066e-01, 5.057718527354757e-02, 5.057718527354757e-02, 1.162563526834676e-03, 1.774676052033617e-05, 6.404124313665666e-05, 4.602493654383682e-02, 1.419692256841301e-04, 1.419692256841297e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_lgap_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_lgap", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.341766075256717e+03, 3.341784905997814e+03, 3.341877091793762e+03, 3.341568569946346e+03, 3.341775937593432e+03, 3.341775937593432e+03, 8.758653922231422e+01, 8.758747109036726e+01, 8.762029277176545e+01, 8.760086499061210e+01, 8.758776473106477e+01, 8.758776473106477e+01, 3.128642139644309e+00, 3.120272310916021e+00, 2.908039578780127e+00, 2.956431507692733e+00, 3.125596536805561e+00, 3.125596536805561e+00, 2.284304705864265e-01, 2.336735067119279e-01, 4.571782092419595e+00, 1.578892502403156e-01, 2.299531183429167e-01, 2.299531183429167e-01, 1.410639583289477e-03, 1.547695596792970e-03, 2.556902967472518e-02, 3.246494157440976e-04, 1.515606578827730e-03, 1.515606578827730e-03, 2.000672433288882e+02, 2.001737142875600e+02, 2.000782809121202e+02, 2.001610662967550e+02, 2.001216362442645e+02, 2.001216362442645e+02, 2.647205015980091e+01, 2.687795126689426e+01, 2.627893422349317e+01, 2.659343705366099e+01, 2.700217839839759e+01, 2.700217839839759e+01, 2.454187079873867e+00, 2.975362113555556e+00, 2.204499091384689e+00, 2.457038465962917e+00, 2.658430062215137e+00, 2.658430062215137e+00, 1.199319474250839e-01, 2.594917674933596e-01, 1.151406049714565e-01, 2.752513262062374e+01, 1.352714226444586e-01, 1.352714226444586e-01, 3.021255640409727e-04, 3.945988196050417e-04, 2.216689953612900e-04, 4.967393483948298e-02, 3.275973303822452e-04, 3.275973303822452e-04, 2.702909697299437e+00, 2.659414069183954e+00, 2.675036738098481e+00, 2.687088503352904e+00, 2.681061468748438e+00, 2.681061468748438e+00, 2.534396509409773e+00, 1.799945904809972e+00, 2.000860925674683e+00, 2.198645174607356e+00, 2.097061671489608e+00, 2.097061671489608e+00, 3.268078487632643e+00, 3.734401537602072e-01, 5.130416861769748e-01, 8.670351503723221e-01, 6.634759666080028e-01, 6.634759666080027e-01, 1.458759064790508e+00, 2.193319507309516e-02, 4.019653692549599e-02, 7.874836186992724e-01, 8.205159657957492e-02, 8.205159657957492e-02, 1.937605878057794e-03, 2.957793420056028e-05, 1.067354052277611e-04, 7.456303433614497e-02, 2.366153761402169e-04, 2.366153761402162e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_lgap_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_lgap", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([7.925016935576489e-07, 7.924969984812900e-07, 7.924702475347601e-07, 7.925472483332825e-07, 7.924992660603227e-07, 7.924992660603227e-07, 1.800880495258490e-04, 1.800889865474751e-04, 1.800924381423202e-04, 1.799719516680757e-04, 1.800862300250362e-04, 1.800862300250362e-04, 2.409680738598106e-02, 2.413209184451142e-02, 2.483057733473752e-02, 2.433218668688332e-02, 2.410989396328730e-02, 2.410989396328730e-02, 8.727601157307763e-01, 8.664688662374566e-01, 1.454700023632272e-02, 8.972446668919580e-01, 8.714306390180854e-01, 8.714306390180854e-01, 5.079777439231027e-317, 2.403087945497524e-277, 2.222307090700166e-09, 0.000000000000000e+00, 4.392182292507836e-278, 4.392182292507836e-278, 5.561872227363854e-05, 5.560799315597918e-05, 5.561748227841330e-05, 5.560914139191016e-05, 5.561340997863680e-05, 5.561340997863680e-05, 9.075345217922090e-04, 8.926405934487850e-04, 9.093638596840932e-04, 8.977828613309447e-04, 8.948019838810560e-04, 8.948019838810560e-04, 3.916029562237532e-02, 3.249541454623599e-02, 4.564310514905062e-02, 4.215326945076070e-02, 3.524815259216692e-02, 3.524815259216692e-02, 2.366814750900842e-01, 5.535766887836324e-01, 3.126707326476520e-01, 1.154359980598948e-03, 7.153910169400237e-01, 7.153910169400237e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 2.049943601867984e-03, 0.000000000000000e+00, 0.000000000000000e+00, 4.094173791149049e-02, 3.875657957194156e-02, 3.908535724708082e-02, 3.956069808394150e-02, 3.928871163296239e-02, 3.928871163296239e-02, 4.686837148060746e-02, 5.761620402119638e-02, 5.240649954776445e-02, 4.804121831537409e-02, 5.021261390174042e-02, 5.021261390174041e-02, 2.807921478139790e-02, 3.867248209974802e-01, 2.859394486829234e-01, 1.658122108144900e-01, 2.225636104253358e-01, 2.225636104253359e-01, 7.787912476545912e-02, 2.172723859868119e-13, 2.067127010675637e-05, 2.042169321144836e-01, 1.685438134928232e-01, 1.685438134928240e-01, 1.560178299198961e-247, 0.000000000000000e+00, 0.000000000000000e+00, 2.060494915502593e-01, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
