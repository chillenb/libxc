
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_rational_p_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_rational_p", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([1.693929720148469e+03, 1.693948567342059e+03, 1.694020196723896e+03, 1.693740042930295e+03, 1.693888564568412e+03, 1.693888564568412e+03, 4.186742092791823e+01, 4.186971113295538e+01, 4.192472757006896e+01, 4.184499546605857e+01, 4.187218545543305e+01, 4.187218545543305e+01, 1.328312256678910e+00, 1.319284956122156e+00, 1.101356241178671e+00, 1.126910964855916e+00, 1.127201807734253e+00, 1.127201807734253e+00, 3.687953874619960e-02, 4.032284133411463e-02, 1.881954308251539e+00, 9.776014430631615e-03, 1.807967942179714e-02, 1.807967942179713e-02, 3.276955924734314e-09, 4.411800438037619e-09, 1.490137927316323e-05, 1.958390583233803e-10, 7.343748393743985e-10, 7.343748393743999e-10, 1.060092312622148e+02, 1.061677664239482e+02, 1.060161079218513e+02, 1.061560687460010e+02, 1.060898093657842e+02, 1.060898093657842e+02, 9.626282715357291e+00, 9.877013598455443e+00, 9.279042760420339e+00, 9.495738698419522e+00, 9.937076492797781e+00, 9.937076492797781e+00, 1.234087354750688e+00, 1.722353477253972e+00, 1.024924242375226e+00, 1.318033345510898e+00, 1.304245386375573e+00, 1.304245386375573e+00, 1.523537132490200e-03, 2.329900913538364e-02, 1.094646946743170e-03, 1.568089961896846e+01, 4.174322922390861e-03, 4.174322922390861e-03, 6.585232520280988e-11, 1.975808610317716e-10, 2.049226477574490e-10, 1.908494046666444e-04, 2.929574737128199e-10, 2.929574737128195e-10, 1.539674400228200e+00, 1.461386773547224e+00, 1.488413782724149e+00, 1.511176614845166e+00, 1.499746080093073e+00, 1.499746080093073e+00, 1.475192401377687e+00, 7.238233671874104e-01, 9.062447753230958e-01, 1.116093558514268e+00, 1.006925913039175e+00, 1.006925913039175e+00, 1.880896662576425e+00, 5.496976853326650e-02, 1.141674829274388e-01, 3.394468387271126e-01, 2.023789741886691e-01, 2.023789741886692e-01, 6.074100463915023e-01, 1.114011353370188e-05, 5.322298905750807e-05, 3.567548730300200e-01, 7.213754629630689e-04, 7.213754629630702e-04, 1.561724224543933e-08, 8.888360395669868e-13, 2.101774087869558e-11, 5.246520763535459e-04, 2.367641711624384e-10, 2.367641711624379e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_rational_p_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_rational_p", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.667643732423281e+03, 3.667662599576201e+03, 3.667755342534992e+03, 3.667474442408396e+03, 3.667620372513085e+03, 3.667620372513085e+03, 9.732842037845882e+01, 9.732904429700284e+01, 9.734812842500023e+01, 9.735178094181335e+01, 9.733386086282860e+01, 9.733386086282860e+01, 3.534990283750004e+00, 3.523141139742437e+00, 3.208465100171635e+00, 3.269632723506392e+00, 3.262648298536196e+00, 3.262648298536196e+00, 1.471760267642794e-01, 1.581969299295484e-01, 4.851039631402353e+00, 4.563526745565911e-02, 7.914583698933254e-02, 7.914583698933252e-02, 1.855979568956036e-08, 2.498545153655174e-08, 8.329064192410470e-05, 1.109571919514717e-09, 4.160237620919554e-09, 4.160237620919562e-09, 2.164679173013160e+02, 2.165023424074005e+02, 2.164700262065915e+02, 2.165004186465226e+02, 2.164851601418922e+02, 2.164851601418922e+02, 2.856286606539480e+01, 2.910595401050092e+01, 2.796494837194684e+01, 2.844550166778209e+01, 2.914891197163979e+01, 2.914891197163979e+01, 2.771901009493587e+00, 3.171673908677262e+00, 2.372531386581622e+00, 2.507585576087335e+00, 2.859628020280341e+00, 2.859628020280341e+00, 7.916715458486216e-03, 1.033362495551812e-01, 5.744771498885578e-03, 2.872609305669625e+01, 2.054844582394612e-02, 2.054844582394612e-02, 3.731211874554683e-10, 1.119433727381126e-09, 1.160937820390381e-09, 1.039169356707837e-03, 1.659681174125507e-09, 1.659681174125504e-09, 2.660591441432481e+00, 2.679309093589946e+00, 2.674327202628200e+00, 2.668871776314663e+00, 2.671742964644325e+00, 2.671742964644325e+00, 2.501797814551511e+00, 1.910090599977259e+00, 2.137877085884498e+00, 2.323108670551385e+00, 2.234593004625183e+00, 2.234593004625183e+00, 3.494323830163049e+00, 2.236622525360741e-01, 4.143238327809048e-01, 9.367311374244672e-01, 6.447422194718401e-01, 6.447422194718403e-01, 1.615074534207350e+00, 6.237620288124468e-05, 2.948633568257489e-04, 8.958451259263095e-01, 3.806614345364842e-03, 3.806614345364849e-03, 8.841567891585093e-08, 5.036601467236481e-12, 1.190906672073109e-10, 2.793174239845362e-03, 1.341343872542097e-09, 1.341343872542093e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_rational_p_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_rational_p", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.137956508820795e-06, -2.137958392209069e-06, -2.137929527632548e-06, -2.137902267709320e-06, -2.137921849830963e-06, -2.137921849830963e-06, -4.409031411772338e-04, -4.409373109897825e-04, -4.416952348426633e-04, -4.401272968130670e-04, -4.409122228935595e-04, -4.409122228935595e-04, -4.712193428597097e-02, -4.691604269483437e-02, -4.117916322078205e-02, -4.060165416587459e-02, -4.107239717400882e-02, -4.107239717400882e-02, -6.356088961063974e-01, -6.705867852991597e-01, -3.183182322847024e-02, -3.980752005794015e-01, -5.322767054124012e-01, -5.322767054124010e-01, -1.935474356904157e-03, -2.297107375608085e-03, -3.505057689712218e-02, -5.721683171517409e-04, -1.219058645245749e-03, -1.219058645245753e-03, -1.609383843619803e-04, -1.611522527034372e-04, -1.609464638916997e-04, -1.611352923925677e-04, -1.610477579060781e-04, -1.610477579060781e-04, -1.450566206713045e-03, -1.446339746140325e-03, -1.411071094290295e-03, -1.407958831483333e-03, -1.467324744386638e-03, -1.467324744386638e-03, -9.729140866591894e-02, -1.003585531645173e-01, -1.167315737809881e-01, -1.388871925865627e-01, -9.640638836367729e-02, -9.640638836367729e-02, -1.811535127278330e-01, -2.928213329762515e-01, -1.709268295054671e-01, -3.696842150167484e-03, -3.527474573684105e-01, -3.527474573684105e-01, -4.807788290924868e-04, -6.703134863768965e-04, -3.897292443838811e-03, -1.146706520335950e-01, -2.173921526299485e-03, -2.173921526299479e-03, -1.364237468219027e-01, -1.297000856915287e-01, -1.320158684168708e-01, -1.339756476054912e-01, -1.329917432420923e-01, -1.329917432420923e-01, -1.511853168814074e-01, -1.213458881458593e-01, -1.318149348685913e-01, -1.414246901733690e-01, -1.370097494457021e-01, -1.370097494457021e-01, -8.617281817881693e-02, -2.784442169892639e-01, -2.951996520742458e-01, -3.114604575215335e-01, -3.185963198108067e-01, -3.185963198108070e-01, -1.529454973639364e-01, -2.848786809002934e-02, -5.422313921007518e-02, -4.267783561883185e-01, -2.276686074444295e-01, -2.276686074444299e-01, -2.947184986558623e-03, -3.496873589032276e-04, -6.220383223755244e-04, -1.994401237300105e-01, -2.492309172261496e-03, -2.492309172261501e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
