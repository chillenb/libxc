
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_gds08_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_gds08", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [9.607075834077743e+02, 9.606845030231467e+02, 9.606291395597240e+02, 9.609715613589137e+02, 9.607854213226740e+02, 9.607854213226740e+02, 3.695637445868828e+01, 3.694936016920644e+01, 3.678902610247186e+01, 3.708138821519749e+01, 3.694967792070812e+01, 3.694967792070812e+01, 2.940548485748629e+00, 2.962239876830874e+00, 3.566281213624482e+00, 3.578995775571461e+00, 3.629637316529148e+00, 3.629637316529148e+00, 4.489226286872451e-01, 4.357321300277499e-01, 3.513022034290354e+00, 4.162911486816000e-01, 4.722448482836399e-01, 4.722448482836400e-01, -1.690710200599354e+00, -1.675940397114966e+00, -3.202039852711254e-01, -2.023984978849173e+00, -1.891946367323015e+00, -1.891946367323016e+00, 4.350534875139827e+01, 4.318922082426816e+01, 4.349241544294462e+01, 4.321330636819224e+01, 4.334417225777198e+01, 4.334417225777198e+01, 2.866912248920436e+01, 2.843528856872756e+01, 2.983284528453065e+01, 2.962355751670761e+01, 2.798465137445837e+01, 2.798465137445837e+01, 1.515014209654852e+00, 9.845782351307263e-01, 1.443675808030517e+00, 9.237792110615664e-01, 1.460041505825608e+00, 1.460041505825608e+00, 3.268395138106033e-01, 8.335386306429826e-01, 2.529256812006613e-01, 3.792907843060782e+00, 2.562889839070404e-01, 2.562889839070404e-01, -2.296277148832329e+00, -2.098807360762004e+00, -2.703126471788161e+00, -1.031801850797671e-01, -2.424035682401852e+00, -2.424035682401852e+00, 7.382458588561959e-01, 8.749111945444201e-01, 8.269152364922415e-01, 7.871204516912318e-01, 8.070206585066761e-01, 8.070206585066761e-01, 6.756754162056257e-01, 1.685153283159854e+00, 1.388830413474782e+00, 1.092604125607773e+00, 1.238860105593862e+00, 1.238860105593862e+00, 1.073030456735614e+00, 1.057921480881836e+00, 1.100084307651000e+00, 9.733109285878154e-01, 1.034787857266242e+00, 1.034787857266242e+00, 1.481507710301311e+00, -3.029602400005240e-01, -1.178328494067445e-01, 7.222438509263026e-01, -3.512909457810909e-02, -3.512909457810909e-02, -1.377372612662159e+00, -3.371411417209726e+00, -2.734443074456101e+00, -6.817520636645846e-02, -2.523028772865378e+00, -2.523028772865378e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_gds08_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_gds08", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-9.543445582484075e+02, -9.543394652055598e+02, -9.543178056128236e+02, -9.543200495925597e+02, -9.542774888845689e+02, -9.542496038461627e+02, -9.545784615492076e+02, -9.546335868905282e+02, -9.543263164062199e+02, -9.545133967697245e+02, -9.543263164062199e+02, -9.545133967697245e+02, -3.305369935971648e+01, -3.300710856426907e+01, -3.304820004139371e+01, -3.299857329554121e+01, -3.288423044859022e+01, -3.284167727061549e+01, -3.317988692176650e+01, -3.313058199703313e+01, -3.306005725949696e+01, -3.298732746121871e+01, -3.306005725949696e+01, -3.298732746121871e+01, -1.278927431076787e+00, -1.174432957151601e+00, -1.314255345546812e+00, -1.185761443160867e+00, -1.794289265462200e+00, -1.987207203308011e+00, -1.923898112680352e+00, -1.859061204086999e+00, -1.026985409811170e+00, -3.056019250166817e+00, -1.026985409811170e+00, -3.056019250166817e+00, -5.770501891738711e-01, -5.329989755438660e-01, -5.458592550850713e-01, -4.975940483138880e-01, -1.820360664625338e+00, -1.384885374835793e+00, -8.932933129819614e-01, -8.908858635440391e-01, -5.853248624777607e-01, -1.128977877392161e+00, -5.853248624777611e-01, -1.128977877392161e+00, -2.946243995326642e+00, -2.908986842994363e+00, -2.895931074822535e+00, -2.851348002405944e+00, -1.955784866800770e+00, -1.912932773398464e+00, -3.321553159479802e+00, -3.343404734246865e+00, -3.023777128442446e+00, -3.131712115517602e+00, -3.023777128442445e+00, -3.131712115517601e+00, -3.903991761842558e+01, -3.903394642830149e+01, -3.871809744166005e+01, -3.872302127289684e+01, -3.902359696389075e+01, -3.902437831759086e+01, -3.874742579432338e+01, -3.874189347292710e+01, -3.887377107406520e+01, -3.887749435986482e+01, -3.887377107406520e+01, -3.887749435986482e+01, -2.551628451704436e+01, -2.551529584489366e+01, -2.527194646378588e+01, -2.527253927180455e+01, -2.689504941700490e+01, -2.647932295043292e+01, -2.667008206050199e+01, -2.626845484154816e+01, -2.440532454395542e+01, -2.524522173596398e+01, -2.440532454395542e+01, -2.524522173596398e+01, 1.668422616478482e-02, 2.191633352806965e-02, 6.569705496857965e-01, 6.651035944475892e-01, -3.414383049680669e-02, 5.858303962691047e-03, 5.617151568648717e-01, 5.561536141700858e-01, 9.230205299479977e-02, 1.026233182059213e-01, 9.230205299480010e-02, 1.026233182059222e-01, -1.303111491125966e+00, -1.283275944190750e+00, -9.385263470910027e-01, -9.356192733106584e-01, -1.343213609376097e+00, -1.304620747045946e+00, -6.683158599989347e-01, -6.627300640509532e-01, -1.095939618962124e+00, -9.299989888177068e-01, -1.095939618962124e+00, -9.299989888177068e-01, -3.396095822363308e+00, -3.418323988721666e+00, -3.278623685324854e+00, -3.296715831651429e+00, -3.071774809346682e+00, -3.018156105333628e+00, -1.494938603001241e+00, -1.506415089374069e+00, -3.178868133718912e+00, -2.969224448963748e+00, -3.178868133718913e+00, -2.969224448963749e+00, 8.003817395863679e-01, 8.047373725819080e-01, 6.555251040454981e-01, 6.607946236520333e-01, 7.062462771924105e-01, 7.115168512738441e-01, 7.487332732637494e-01, 7.531065337254561e-01, 7.274964928686433e-01, 7.322979699885577e-01, 7.274964928686433e-01, 7.322979699885577e-01, 8.270505919137026e-01, 8.293509393287767e-01, -3.907120320061480e-01, -3.822080065816993e-01, -3.363105813726208e-02, -2.279208034384572e-02, 3.251222786645312e-01, 3.284196779388865e-01, 1.493734962810509e-01, 1.523082932401472e-01, 1.493734962810509e-01, 1.523082932401472e-01, 6.291710434849167e-01, 6.429411766732080e-01, -8.503890732059606e-01, -8.439942400351017e-01, -6.540520294498942e-01, -6.326521317875511e-01, -1.444221720090421e-01, -1.404902361297357e-01, -3.953330780502137e-01, -3.879749481504847e-01, -3.953330780502146e-01, -3.879749481504850e-01, -3.022085353870038e-01, -2.857647195638122e-01, -2.013033979333235e+00, -2.007456194755969e+00, -1.797366918947056e+00, -1.760962425360773e+00, 5.146211668207779e-02, 6.712480012276062e-02, -1.306481706396559e+00, -1.188277089806495e+00, -1.306481706396559e+00, -1.188277089806496e+00, -2.794550393472367e+00, -2.762070747432296e+00, -3.835065743645075e+00, -3.742451390712197e+00, -3.457582623931577e+00, -3.401786035829788e+00, -1.298389628716426e+00, -1.292563019472505e+00, -3.090440839868043e+00, -3.020125233762561e+00, -3.090440839868043e+00, -3.020125233762561e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_gds08_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_gds08", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.293109184051877e-05, 0.000000000000000e+00, 1.293114179513549e-05, 1.293096651097146e-05, 0.000000000000000e+00, 1.293105074677587e-05, 1.293054083471756e-05, 0.000000000000000e+00, 1.293044770940055e-05, 1.293195688134498e-05, 0.000000000000000e+00, 1.293225240321300e-05, 1.293101834015489e-05, 0.000000000000000e+00, 1.293151277752772e-05, 1.293101834015489e-05, 0.000000000000000e+00, 1.293151277752772e-05, 2.996366023714674e-03, 0.000000000000000e+00, 2.996488674912871e-03, 2.996337920348051e-03, 0.000000000000000e+00, 2.996477974254268e-03, 2.995831833038986e-03, 0.000000000000000e+00, 2.995646812433001e-03, 2.995258276008431e-03, 0.000000000000000e+00, 2.995132169597408e-03, 2.997869647877723e-03, 0.000000000000000e+00, 2.994507043947534e-03, 2.997869647877723e-03, 0.000000000000000e+00, 2.994507043947534e-03, 4.200715030699055e-01, 0.000000000000000e+00, 4.151155631692661e-01, 4.220388987872136e-01, 0.000000000000000e+00, 4.159317269801374e-01, 4.495394155411678e-01, 0.000000000000000e+00, 4.589594270924217e-01, 4.445183114860597e-01, 0.000000000000000e+00, 4.416418299177148e-01, 4.057091912691514e-01, 0.000000000000000e+00, 4.937250273428979e-01, 4.057091912691514e-01, 0.000000000000000e+00, 4.937250273428979e-01, 2.572670895608398e+01, 0.000000000000000e+00, 2.294376358600035e+01, 2.479864693157502e+01, 0.000000000000000e+00, 2.177059790083632e+01, 2.771148678928619e-01, 0.000000000000000e+00, 2.509464054984751e-01, 5.659768155776936e+01, 0.000000000000000e+00, 5.431767266435860e+01, 2.259749942680681e+01, 0.000000000000000e+00, 1.463508641615167e+02, 2.259749942680681e+01, 0.000000000000000e+00, 1.463508641615166e+02, 6.324503014234192e+05, 0.000000000000000e+00, 5.271019733892687e+05, 5.496562727421005e+05, 0.000000000000000e+00, 4.471116735888455e+05, 3.197159921025622e+03, 0.000000000000000e+00, 2.714904401504723e+03, 2.911560192811907e+06, 0.000000000000000e+00, 3.062094217456303e+06, 8.908246190359765e+05, 0.000000000000000e+00, 4.834051151218385e+06, 8.908246190359765e+05, 0.000000000000000e+00, 4.834051151218379e+06, 8.924768742371638e-04, 0.000000000000000e+00, 8.931185292667896e-04, 8.919770600555195e-04, 0.000000000000000e+00, 8.926352803062284e-04, 8.924464270475136e-04, 0.000000000000000e+00, 8.931000056290367e-04, 8.920175841013226e-04, 0.000000000000000e+00, 8.926610178974752e-04, 8.922228825623769e-04, 0.000000000000000e+00, 8.928761159884677e-04, 8.922228825623769e-04, 0.000000000000000e+00, 8.928761159884677e-04, 1.681014771245246e-02, 0.000000000000000e+00, 1.681269628863544e-02, 1.644412702125274e-02, 0.000000000000000e+00, 1.645755969611644e-02, 1.712573498435997e-02, 0.000000000000000e+00, 1.703717992720586e-02, 1.680069107032818e-02, 0.000000000000000e+00, 1.671020204194981e-02, 1.637657215386190e-02, 0.000000000000000e+00, 1.659362732978037e-02, 1.637657215386190e-02, 0.000000000000000e+00, 1.659362732978037e-02, 6.214155513929877e-01, 0.000000000000000e+00, 6.263773909722783e-01, 4.869557603842461e-01, 0.000000000000000e+00, 4.862931574736049e-01, 8.325516992461210e-01, 0.000000000000000e+00, 7.470881093773013e-01, 7.371961063213970e-01, 0.000000000000000e+00, 6.683382188279615e-01, 5.523843371812366e-01, 0.000000000000000e+00, 6.439399747262756e-01, 5.523843371812368e-01, 0.000000000000000e+00, 6.439399747262758e-01, 1.680322502110340e+02, 0.000000000000000e+00, 1.633153648043942e+02, 2.432715455530025e+01, 0.000000000000000e+00, 2.396654094362242e+01, 2.269837421716149e+02, 0.000000000000000e+00, 1.940019561885622e+02, 1.780193950795826e-02, 0.000000000000000e+00, 1.782595457225113e-02, 1.121634537776805e+02, 0.000000000000000e+00, 9.435182145012413e+01, 1.121634537776805e+02, 0.000000000000000e+00, 9.435182145012413e+01, 6.896246147170695e+06, 0.000000000000000e+00, 6.144157416218541e+06, 3.268601510341825e+06, 0.000000000000000e+00, 3.124571891844912e+06, 7.817219853849012e+06, 0.000000000000000e+00, 6.581441351138420e+06, 6.939684423521389e+02, 0.000000000000000e+00, 6.813232572463984e+02, 7.337213909483019e+06, 0.000000000000000e+00, 2.832798288875730e+06, 7.337213909483017e+06, 0.000000000000000e+00, 2.832798288875732e+06, 6.184655642516127e-01, 0.000000000000000e+00, 6.113483131048588e-01, 6.292686936810393e-01, 0.000000000000000e+00, 6.219547129496448e-01, 6.254503941826527e-01, 0.000000000000000e+00, 6.181833347862691e-01, 6.222962328002316e-01, 0.000000000000000e+00, 6.151314409845747e-01, 6.238720007562847e-01, 0.000000000000000e+00, 6.166568959141232e-01, 6.238720007562847e-01, 0.000000000000000e+00, 6.166568959141232e-01, 6.710491118734169e-01, 0.000000000000000e+00, 6.644380041926748e-01, 1.062460454592638e+00, 0.000000000000000e+00, 1.048770501185330e+00, 9.254286161076486e-01, 0.000000000000000e+00, 9.132160890872123e-01, 8.105979508028869e-01, 0.000000000000000e+00, 8.021068030259340e-01, 8.663681416474144e-01, 0.000000000000000e+00, 8.567845172274138e-01, 8.663681416474144e-01, 0.000000000000000e+00, 8.567845172274138e-01, 4.233638525448552e-01, 0.000000000000000e+00, 4.213009399359828e-01, 1.207679180856774e+01, 0.000000000000000e+00, 1.186942020676453e+01, 7.016998509778441e+00, 0.000000000000000e+00, 6.810034028331159e+00, 3.024385837125076e+00, 0.000000000000000e+00, 2.974767882753505e+00, 4.558073793085399e+00, 0.000000000000000e+00, 4.562901000858759e+00, 4.558073793085403e+00, 0.000000000000000e+00, 4.562901000858760e+00, 1.366818081411902e+00, 0.000000000000000e+00, 1.338966339251527e+00, 3.383498365853440e+03, 0.000000000000000e+00, 3.314985802507890e+03, 1.390172763857115e+03, 0.000000000000000e+00, 1.259415447184266e+03, 3.424824182712280e+00, 0.000000000000000e+00, 3.274449679751296e+00, 3.625707363724646e+02, 0.000000000000000e+00, 3.079851680605962e+02, 3.625707363724646e+02, 0.000000000000000e+00, 3.079851680605963e+02, 2.160802635499018e+05, 0.000000000000000e+00, 1.941851121390783e+05, 1.678524443444068e+08, 0.000000000000000e+00, 1.667067706068541e+08, 1.992427887587956e+07, 0.000000000000000e+00, 1.656041588063657e+07, 4.122466915137551e+02, 0.000000000000000e+00, 3.926655637176916e+02, 8.633543549065115e+06, 0.000000000000000e+00, 3.678861720624852e+06, 8.633543549065135e+06, 0.000000000000000e+00, 3.678861720624864e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
