
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_perdew_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_perdew", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.174868061671780e+03, 2.174877027983997e+03, 2.174925711084333e+03, 2.174792129625189e+03, 2.174860868322975e+03, 2.174860868322975e+03, 5.873082802835587e+01, 5.873028352959858e+01, 5.872058428780133e+01, 5.875976988594237e+01, 5.873300673009161e+01, 5.873300673009161e+01, 2.283948733826402e+00, 2.281935994970837e+00, 2.244498003044143e+00, 2.277519619919319e+00, 2.266988642805446e+00, 2.266988642805446e+00, 2.042624230204664e-01, 2.058100006912890e-01, 3.069254485400636e+00, 1.636718790518059e-01, 1.740820993495874e-01, 1.740820993495874e-01, 8.139532297751403e-02, 7.919743084441040e-02, 1.077849286604571e-01, 8.534587024829626e-02, 7.573079196706875e-02, 7.573079196706865e-02, 1.274997751885857e+02, 1.275096924772383e+02, 1.275005819515165e+02, 1.275093314891263e+02, 1.275046058703801e+02, 1.275046058703801e+02, 2.039178151449982e+01, 2.061800467916266e+01, 2.033830052512490e+01, 2.053665388121737e+01, 2.054379411669260e+01, 2.054379411669260e+01, 1.656318459391023e+00, 1.872228547268578e+00, 1.429713231743771e+00, 1.476584090630320e+00, 1.699637355063818e+00, 1.699637355063818e+00, 1.404227383060021e-01, 2.474309254354106e-01, 1.324978207021981e-01, 1.696593891889095e+01, 1.344629100153545e-01, 1.344629100153545e-01, 7.434574291243444e-02, 7.867056524534262e-02, 3.139594830146756e-02, 1.048870558740352e-01, 4.602340909144159e-02, 4.602340909144165e-02, 1.584674973249945e+00, 1.582293746289757e+00, 1.583129910636909e+00, 1.583799415207350e+00, 1.583461070534042e+00, 1.583461070534042e+00, 1.495494870691782e+00, 1.226884548956475e+00, 1.296555951602628e+00, 1.370381314529305e+00, 1.331497737724228e+00, 1.331497737724228e+00, 2.061006508065652e+00, 3.362472507233621e-01, 4.235315276265038e-01, 6.224442548254364e-01, 5.062054283545570e-01, 5.062054283545568e-01, 1.042854041363391e+00, 1.125988567957727e-01, 1.143531023118618e-01, 5.584780198668101e-01, 1.032468380786507e-01, 1.032468380786508e-01, 9.071747172173328e-02, 3.550612236233289e-02, 5.104181574845020e-02, 1.016912959579378e-01, 4.095022506415322e-02, 4.095022506415318e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_perdew_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_perdew", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.340464081847980e+03, 3.340485878725421e+03, 3.340583457036535e+03, 3.340259149554353e+03, 3.340428983142848e+03, 3.340428983142848e+03, 8.746214254198827e+01, 8.746331813418421e+01, 8.749476957153291e+01, 8.747329054192950e+01, 8.746776885443917e+01, 8.746776885443917e+01, 3.154853970633073e+00, 3.144880439058571e+00, 2.897877795623489e+00, 2.950579875382187e+00, 2.942821361807053e+00, 2.942821361807053e+00, 1.583589157927275e-01, 1.678782817567756e-01, 4.325741983085485e+00, 4.532677338826826e-02, 8.945460748060362e-02, 8.945460748060355e-02, -8.095589427619591e-02, -7.871061264451908e-02, -9.296694670462814e-02, -8.519930216456903e-02, -7.549936321949688e-02, -7.549936321949684e-02, 2.002132754990083e+02, 2.003236980086427e+02, 2.002184617687694e+02, 2.003159430023999e+02, 2.002691977619799e+02, 2.002691977619799e+02, 2.590945997078730e+01, 2.635736488433691e+01, 2.547387632199085e+01, 2.586787553405797e+01, 2.636782601192066e+01, 2.636782601192066e+01, 2.505264594882202e+00, 3.039112733335245e+00, 2.133367694225425e+00, 2.373621617357053e+00, 2.597215497735609e+00, 2.597215497735609e+00, -3.967893595884047e-02, 1.162926204014036e-01, -4.627546475029353e-02, 2.758149042563162e+01, 4.279503614115552e-03, 4.279503614115552e-03, -7.425848874257260e-02, -7.853049317357319e-02, -3.131405002866502e-02, -6.588296550610385e-02, -4.590455193848924e-02, -4.590455193848932e-02, 2.617426059675298e+00, 2.571732803407904e+00, 2.587781159144992e+00, 2.601044923288848e+00, 2.594406087261964e+00, 2.594406087261964e+00, 2.481887989452197e+00, 1.704035437653730e+00, 1.917325702131261e+00, 2.137033808181312e+00, 2.024400610015960e+00, 2.024400610015960e+00, 3.336933282912962e+00, 2.443559174304329e-01, 4.138585209684376e-01, 8.385284063537813e-01, 5.986908227519721e-01, 5.986908227519716e-01, 1.441332287771224e+00, -9.902422192915221e-02, -8.912201555265671e-02, 7.992404398668905e-01, -4.000800352373765e-02, -4.000800352373769e-02, -8.984222306649606e-02, -3.549611383251881e-02, -5.099771829881359e-02, -4.592720922918854e-02, -4.084845912035193e-02, -4.084845912035191e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_perdew_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_perdew", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([7.198430467572001e-07, 7.198370240207538e-07, 7.198083907101459e-07, 7.198980377340424e-07, 7.198513269041312e-07, 7.198513269041312e-07, 1.668038737966569e-04, 1.668027936070861e-04, 1.667655703783808e-04, 1.667352859671625e-04, 1.667905164783319e-04, 1.667905164783319e-04, 2.324562846814349e-02, 2.332268556222260e-02, 2.528428191337023e-02, 2.466496888555452e-02, 2.479496548735488e-02, 2.479496548735488e-02, 1.350256823924303e+00, 1.290720463458511e+00, 1.466186580931975e-02, 3.085895300493343e+00, 2.179388952326154e+00, 2.179388952326156e+00, 3.200838628990432e+04, 2.745024340023914e+04, 1.634604977509985e+02, 1.661641361718741e+05, 8.374722998169316e+04, 8.374722998169322e+04, 4.969969307337728e-05, 4.967232630554829e-05, 4.969832962375542e-05, 4.967417122976831e-05, 4.968587395033283e-05, 4.968587395033283e-05, 9.358524860371748e-04, 9.157797584000650e-04, 9.508783694211578e-04, 9.327296842218369e-04, 9.176471021132376e-04, 9.176471021132376e-04, 3.473024192338780e-02, 2.708857233743460e-02, 4.383866468275026e-02, 3.902697509949240e-02, 3.310318122155743e-02, 3.310318122155743e-02, 9.220806428232398e+00, 1.344123866408006e+00, 1.164572643216078e+01, 9.916334635939039e-04, 5.705353343248666e+00, 5.705353343248666e+00, 3.617571490209386e+05, 1.778562292314445e+05, 3.978178763453531e+05, 3.827640838590899e+01, 2.275403512242629e+05, 2.275403512242628e+05, 3.422440701851840e-02, 3.482422280106385e-02, 3.461246251594636e-02, 3.443890988437277e-02, 3.452570760322091e-02, 3.452570760322091e-02, 3.715683972901854e-02, 5.876115088714882e-02, 5.117420644190199e-02, 4.488631786936766e-02, 4.796035259806290e-02, 4.796035259806290e-02, 2.350963205813977e-02, 6.664649506326467e-01, 3.847731130815005e-01, 1.669679675344136e-01, 2.538716082332698e-01, 2.538716082332700e-01, 7.530433835662707e-02, 1.864250096990761e+02, 7.356859709244797e+01, 1.863723824106116e-01, 1.854046513914073e+01, 1.854046513914074e+01, 1.138673544744724e+04, 9.311957346582804e+06, 1.006876487829120e+06, 2.239053756613172e+01, 2.872054731466463e+05, 2.872054731466471e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
