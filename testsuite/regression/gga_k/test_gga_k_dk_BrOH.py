
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_dk_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_dk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.189100418054653e+03, 2.189107777512110e+03, 2.189153162204358e+03, 2.189032399047515e+03, 2.189104194256189e+03, 2.189104194256189e+03, 5.928449049664372e+01, 5.928401135680306e+01, 5.927572988342485e+01, 5.931514324028679e+01, 5.928474915066649e+01, 5.928474915066649e+01, 2.289815445859598e+00, 2.287283952981799e+00, 2.211137694752845e+00, 2.244492080480986e+00, 2.288885132048404e+00, 2.288885132048404e+00, 1.697017905154049e-01, 1.754311707560545e-01, 3.194617313801028e+00, 1.252978240952215e-01, 1.714186860794323e-01, 1.714186860794323e-01, 4.829195061264316e-01, 4.803848002992645e-01, 4.970680437970663e-01, 5.925613925114002e-01, 4.713595519263267e-01, 4.713595519263267e-01, 1.279185114461928e+02, 1.279216690492992e+02, 1.279190765304337e+02, 1.279215272971633e+02, 1.279197750383541e+02, 1.279197750383541e+02, 2.010196248519511e+01, 2.036420007294146e+01, 2.001467528885762e+01, 2.022125192701101e+01, 2.038432526984889e+01, 2.038432526984889e+01, 1.632092404665551e+00, 1.830817441384335e+00, 1.476311339055999e+00, 1.534398679359634e+00, 1.744680232350370e+00, 1.744680232350370e+00, 2.367371002991353e-01, 1.797080814173971e-01, 2.094365385853957e-01, 1.694030381976746e+01, 1.467812148069723e-01, 1.467812148069723e-01, 5.755012515574446e-01, 5.735965485940862e-01, 3.392078686883165e-01, 3.443833781175641e-01, 4.719229030179657e-01, 4.719229030179659e-01, 1.632947094446893e+00, 1.631191870328953e+00, 1.631714426051606e+00, 1.632186210057398e+00, 1.631938602212816e+00, 1.631938602212816e+00, 1.527474898572493e+00, 1.279407699208812e+00, 1.348601135183370e+00, 1.411647776613381e+00, 1.378678223947111e+00, 1.378678223947111e+00, 2.015858905214098e+00, 2.683577952512204e-01, 3.933170210495021e-01, 6.330385471222562e-01, 5.079251937132757e-01, 5.079251937132756e-01, 1.047511231187485e+00, 5.916106301861792e-01, 4.497375803577558e-01, 5.486661312433064e-01, 2.171234964604486e-01, 2.171234964604483e-01, 5.529552342693469e-01, 4.412127160621709e-01, 4.744204665533258e-01, 1.940599299731159e-01, 3.909971555962906e-01, 3.909971555962911e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_dk_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_dk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.311215129108404e+03, 3.311234047038468e+03, 3.311326172558716e+03, 3.311016238647706e+03, 3.311225041174361e+03, 3.311225041174361e+03, 8.699796458835716e+01, 8.699854771062444e+01, 8.702185559604520e+01, 8.701871721718450e+01, 8.699900567365194e+01, 8.699900567365194e+01, 3.316703118626771e+00, 3.317249136488035e+00, 3.431556468704150e+00, 3.465410626418182e+00, 3.316841201569540e+00, 3.316841201569540e+00, 3.285532846320723e-01, 3.404893264446829e-01, 4.599583734829618e+00, -1.799100938145314e-01, 3.325173065495278e-01, 3.325173065495278e-01, -5.264925792337093e-01, -5.279189748497513e-01, -9.386459572131318e-01, -6.030723097546078e-01, -5.179138074283105e-01, -5.179138074283105e-01, 1.986426126943722e+02, 1.987606151615023e+02, 1.986547956406935e+02, 1.987465471237339e+02, 1.987029488722273e+02, 1.987029488722273e+02, 3.106018047411750e+01, 3.124396504240288e+01, 3.125021612222571e+01, 3.138676050457017e+01, 3.096186116247151e+01, 3.096186116247151e+01, 2.432094260176114e+00, 2.969212273952438e+00, 2.185949647153433e+00, 2.447312711698070e+00, 2.633982270013510e+00, 2.633982270013510e+00, -7.163132984469628e-01, 9.566891638867936e-02, -6.345472985486661e-01, 2.746761142342951e+01, -3.897352919658025e-01, -3.897352919658025e-01, -5.852875451304210e-01, -5.863354657933749e-01, -3.463691114444917e-01, -8.491125532500582e-01, -4.824974455224655e-01, -4.824974455224658e-01, 2.701623371808827e+00, 2.654854021341413e+00, 2.671900517534150e+00, 2.684865052789398e+00, 2.678403248990596e+00, 2.678403248990596e+00, 2.533511306757257e+00, 1.835318453357537e+00, 1.985821690910782e+00, 2.181926016086302e+00, 2.077703644804019e+00, 2.077703644804020e+00, 3.260386436706123e+00, 4.807279484303155e-01, 7.362953029847343e-01, 9.152999131023274e-01, 8.110296361747723e-01, 8.110296361747724e-01, 1.503760847771405e+00, -1.022085153907685e+00, -9.849092824659224e-01, 7.908757508749026e-01, -6.411747844567159e-01, -6.411747844567164e-01, -6.121490559388164e-01, -4.421799407200923e-01, -4.778993255243135e-01, -5.742091710529956e-01, -3.986488447901212e-01, -3.986488447901230e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_dk_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_dk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [8.540127471109204e-07, 8.540076037817170e-07, 8.539785223933260e-07, 8.540628531187536e-07, 8.540100860010754e-07, 8.540100860010754e-07, 1.890078284376077e-04, 1.890148017917700e-04, 1.891815757781373e-04, 1.887723130239713e-04, 1.890090000112638e-04, 1.890090000112638e-04, 1.699447210951117e-02, 1.672338509073949e-02, 7.212687921848829e-03, 7.651020002825269e-03, 1.689778671485158e-02, 1.689778671485158e-02, -3.559018857306386e-01, -3.743623968997513e-01, 1.400008404773045e-02, 5.844365673945612e+00, -3.647195125276694e-01, -3.647195125276694e-01, 5.944216812706159e+04, 5.171367571964592e+04, 7.041309222261981e+02, 5.388918953311980e+05, 5.336492239175433e+04, 5.336492239175433e+04, 5.896074013241561e-05, 5.890901277717648e-05, 5.895542652947680e-05, 5.891521245736639e-05, 5.893437691241107e-05, 5.893437691241107e-05, 2.821387418951038e-04, 3.075483826863883e-04, 2.391646827758470e-04, 2.601851339163768e-04, 3.531229346983281e-04, 3.531229346983281e-04, 4.198255091860126e-02, 3.102877211647191e-02, 4.862138307299303e-02, 4.253827129445029e-02, 3.798370902980813e-02, 3.798370902980813e-02, 3.551899121718321e+01, 8.607609316686695e-01, 3.543959683946003e+01, 1.103290210575230e-03, 1.532641004950697e+01, 1.532641004950697e+01, 6.002659441593130e+05, 4.021431083853419e+05, 9.551230914815033e+05, 2.208294068829581e+02, 5.316224489722790e+05, 5.316224489722792e+05, 3.379477680830670e-02, 3.642190732333481e-02, 3.552901970457030e-02, 3.480085617858524e-02, 3.516904452058282e-02, 3.516904452058282e-02, 3.684347209941891e-02, 5.117019766796952e-02, 5.536926950998834e-02, 5.118730003715269e-02, 5.410046998006249e-02, 5.410046998006249e-02, 2.710944394837253e-02, -6.662771067209472e-02, -1.045384694521055e-01, 1.199784347024949e-01, 3.708154273092264e-02, 3.708154273092250e-02, 6.488705456339408e-02, 9.130421568744720e+02, 3.320766599161880e+02, 1.987128005854869e-01, 7.534719145930919e+01, 7.534719145930912e+01, 3.691047870531466e+04, 1.959692643435254e+07, 2.858738389690117e+06, 8.622009168751333e+01, 8.660751774928336e+05, 8.660751774928384e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
