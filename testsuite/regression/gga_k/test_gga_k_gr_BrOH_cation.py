
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_gr_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_gr", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [1.298951697624874e+03, 1.298930519136465e+03, 1.298884198104317e+03, 1.299198311526938e+03, 1.299026920960954e+03, 1.299026920960954e+03, 4.415250428950195e+01, 4.414552760485217e+01, 4.398648967029305e+01, 4.427990687587798e+01, 4.414627436976680e+01, 4.414627436976680e+01, 2.532044862399117e+00, 2.553737115417855e+00, 3.158268311806446e+00, 3.170726645284837e+00, 3.222054710527271e+00, 3.222054710527271e+00, 6.358254002848509e-01, 6.131247456255717e-01, 3.122689383832614e+00, 7.791148640308359e-01, 6.984272258452371e-01, 6.984272258452371e-01, 7.296337007594103e-01, 7.097332302477839e-01, 9.191239387320420e-01, 7.661183945065586e-01, 6.863312159874003e-01, 6.863312159873993e-01, 6.166357738159230e+01, 6.135477330586380e+01, 6.165100885743218e+01, 6.137836484908755e+01, 6.150609830624551e+01, 6.150609830624551e+01, 3.006979731047560e+01, 2.987282511839011e+01, 3.120683222820112e+01, 3.102988639396060e+01, 2.941876388864821e+01, 2.941876388864821e+01, 1.117402929463207e+00, 5.777061894303528e-01, 1.061227197853348e+00, 5.330771575269991e-01, 1.060261936001804e+00, 1.060261936001804e+00, 9.281812316112570e-01, 1.019809934741543e+00, 9.050195966389776e-01, 5.098021512873274e+00, 7.516726453196370e-01, 7.516726453196370e-01, 6.677922833612852e-01, 7.065417675791090e-01, 2.817741129799178e-01, 8.131885829657572e-01, 4.138000666124317e-01, 4.138000666124323e-01, 3.398872060041187e-01, 4.774435493334455e-01, 4.291295774131816e-01, 3.890765004311768e-01, 4.091055805719885e-01, 4.091055805719885e-01, 2.818765252461726e-01, 1.329176356740328e+00, 1.019398119829245e+00, 7.119710373677408e-01, 8.636879999371113e-01, 8.636879999371113e-01, 6.645298144474658e-01, 1.100474707769679e+00, 1.035466245182467e+00, 7.602908038337406e-01, 8.935981536610395e-01, 8.935981536610393e-01, 1.153447156141393e+00, 9.664682728751269e-01, 9.437803030238212e-01, 5.274328896078893e-01, 7.196475165433163e-01, 7.196475165433163e-01, 8.120898835711212e-01, 3.205949065823523e-01, 4.583372680960571e-01, 7.290672045786728e-01, 3.710600072493349e-01, 3.710600072493345e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_gr_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_gr", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.887804452372260e+02, -3.887768163786579e+02, -3.887500191148182e+02, -3.887547321048069e+02, -3.886972251081821e+02, -3.886666103206927e+02, -3.890397018030451e+02, -3.891034878729169e+02, -3.887600490609490e+02, -3.889616212491190e+02, -3.887600490609490e+02, -3.889616212491190e+02, -2.004995848980924e+01, -2.000376999308006e+01, -2.004436698790501e+01, -1.999519962705144e+01, -1.987873709807524e+01, -1.983557681387204e+01, -2.017251135912216e+01, -2.012279251627750e+01, -2.006124640041877e+01, -1.997748570245529e+01, -2.006124640041877e+01, -1.997748570245529e+01, -1.687935917133074e+00, -1.581661561963663e+00, -1.723954976439858e+00, -1.593287049729994e+00, -2.212803311069846e+00, -2.408408601840666e+00, -2.340914103074140e+00, -2.275197604669018e+00, -1.430676543302413e+00, -3.485890392279495e+00, -1.430676543302413e+00, -3.485890392279495e+00, -5.871120362366529e-01, -5.658530103424695e-01, -5.632592913517460e-01, -5.408227547180595e-01, -2.143977176034278e+00, -1.680315074536934e+00, -7.414465880201654e-01, -7.476588124114200e-01, -6.211897519484775e-01, -7.742974879944685e-01, -6.211897519484777e-01, -7.742974879944675e-01, -7.276235732442879e-01, -7.311754329877334e-01, -7.087355902028971e-01, -7.103982048511551e-01, -9.201268002376328e-01, -9.137337764273762e-01, -7.609471321585221e-01, -7.715073792647494e-01, -7.284351023184917e-01, -4.575434422225615e-01, -7.284351023184908e-01, -4.575434422225610e-01, -7.577383848111089e+00, -7.587446756395013e+00, -7.243060614025095e+00, -7.264447650672292e+00, -7.560301879767385e+00, -7.577416035050749e+00, -7.273403129059641e+00, -7.283963178836729e+00, -7.404885062192870e+00, -7.424939371580922e+00, -7.404885062192870e+00, -7.424939371580922e+00, -2.242915806527559e+01, -2.242861807925813e+01, -2.211914349711643e+01, -2.212219086041667e+01, -2.386260968923537e+01, -2.343171358019968e+01, -2.358128971105863e+01, -2.316363998547580e+01, -2.124012489877874e+01, -2.211954458291758e+01, -2.124012489877874e+01, -2.211954458291758e+01, -4.329870435589163e-01, -4.282492384545247e-01, 2.286456987977983e-01, 2.369335714242905e-01, -4.945413321087584e-01, -4.522847563517380e-01, 1.039838385272949e-01, 1.024013926742458e-01, -3.485994100262963e-01, -3.491676728602978e-01, -3.485994100262964e-01, -3.491676728602967e-01, -9.184786310936408e-01, -9.048237731357829e-01, -9.597516121162643e-01, -9.598163543641666e-01, -8.930885963486460e-01, -8.887366228028132e-01, 2.252580345370139e+00, 2.254338715720889e+00, -7.986643174429326e-01, -6.698127158945330e-01, -7.986643174429326e-01, -6.698127158945330e-01, -6.423439715905256e-01, -6.904379824325837e-01, -6.921080165976177e-01, -7.202942758486439e-01, -2.899448607296582e-01, -2.748700348548085e-01, -7.989068989578237e-01, -8.144533397543997e-01, -4.112326724223967e-01, -4.147611293862838e-01, -4.112326724223972e-01, -4.147611293862847e-01, 3.510120049331162e-01, 3.561192602473532e-01, 2.050788067263049e-01, 2.110688649096398e-01, 2.561718414470903e-01, 2.621762684090963e-01, 2.989730984145342e-01, 3.040846071499935e-01, 2.775785102197129e-01, 2.831159808688806e-01, 2.775785102197129e-01, 2.831159808688806e-01, 3.731002133710401e-01, 3.758905063265298e-01, -8.496199828027394e-01, -8.414073640083315e-01, -4.944464520998882e-01, -4.836475051672185e-01, -1.348958251235094e-01, -1.314176080569908e-01, -3.113813904108216e-01, -3.083714822974754e-01, -3.113813904108216e-01, -3.083714822974754e-01, 2.190108003873040e-01, 2.334997779293305e-01, -1.006273250001347e+00, -1.003066687837034e+00, -9.055894826217674e-01, -8.891720520873090e-01, -5.201350987725135e-01, -5.182468325799084e-01, -7.150169187942785e-01, -7.075021051345524e-01, -7.150169187942792e-01, -7.075021051345527e-01, -7.512210596493858e-01, -7.358722945139770e-01, -9.647404347849547e-01, -9.637258912775962e-01, -9.471918926565884e-01, -9.327429300992498e-01, -3.083194031125056e-01, -2.985231413861901e-01, -7.537070039145412e-01, -6.713437204865836e-01, -7.537070039145407e-01, -6.713437204865838e-01, -8.164506568218157e-01, -8.078963064021495e-01, -3.662893077737059e-01, -2.752090995927725e-01, -4.661797146472120e-01, -4.518054915179694e-01, -7.173584612206521e-01, -7.222459472579408e-01, -2.863623647033574e-01, -4.071246218815511e-01, -2.863623647033570e-01, -4.071246218815507e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_gr_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_gr", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.293109184051877e-05, 0.000000000000000e+00, 1.293114179513549e-05, 1.293096651097146e-05, 0.000000000000000e+00, 1.293105074677587e-05, 1.293054083471756e-05, 0.000000000000000e+00, 1.293044770940055e-05, 1.293195688134498e-05, 0.000000000000000e+00, 1.293225240321300e-05, 1.293101834015489e-05, 0.000000000000000e+00, 1.293151277752772e-05, 1.293101834015489e-05, 0.000000000000000e+00, 1.293151277752772e-05, 2.996366023714674e-03, 0.000000000000000e+00, 2.996488674912871e-03, 2.996337920348051e-03, 0.000000000000000e+00, 2.996477974254268e-03, 2.995831833038986e-03, 0.000000000000000e+00, 2.995646812433001e-03, 2.995258276008431e-03, 0.000000000000000e+00, 2.995132169597408e-03, 2.997869647877723e-03, 0.000000000000000e+00, 2.994507043947534e-03, 2.997869647877723e-03, 0.000000000000000e+00, 2.994507043947534e-03, 4.200715030699055e-01, 0.000000000000000e+00, 4.151155631692661e-01, 4.220388987872136e-01, 0.000000000000000e+00, 4.159317269801374e-01, 4.495394155411678e-01, 0.000000000000000e+00, 4.589594270924217e-01, 4.445183114860597e-01, 0.000000000000000e+00, 4.416418299177148e-01, 4.057091912691514e-01, 0.000000000000000e+00, 4.937250273428979e-01, 4.057091912691514e-01, 0.000000000000000e+00, 4.937250273428979e-01, 2.572670895608398e+01, 0.000000000000000e+00, 2.294376358600035e+01, 2.479864693157502e+01, 0.000000000000000e+00, 2.177059790083632e+01, 2.771148678928619e-01, 0.000000000000000e+00, 2.509464054984751e-01, 5.659768155776936e+01, 0.000000000000000e+00, 5.431767266435860e+01, 2.259749942680681e+01, 0.000000000000000e+00, 1.463508641615167e+02, 2.259749942680681e+01, 0.000000000000000e+00, 1.463508641615166e+02, 6.324503014234192e+05, 0.000000000000000e+00, 5.271019733892687e+05, 5.496562727421005e+05, 0.000000000000000e+00, 4.471116735888455e+05, 3.197159921025622e+03, 0.000000000000000e+00, 2.714904401504723e+03, 2.911560192811907e+06, 0.000000000000000e+00, 3.062094217456303e+06, 8.908246190359765e+05, 0.000000000000000e+00, 4.834051151218385e+06, 8.908246190359765e+05, 0.000000000000000e+00, 4.834051151218379e+06, 8.924768742371638e-04, 0.000000000000000e+00, 8.931185292667896e-04, 8.919770600555195e-04, 0.000000000000000e+00, 8.926352803062284e-04, 8.924464270475136e-04, 0.000000000000000e+00, 8.931000056290367e-04, 8.920175841013226e-04, 0.000000000000000e+00, 8.926610178974752e-04, 8.922228825623769e-04, 0.000000000000000e+00, 8.928761159884677e-04, 8.922228825623769e-04, 0.000000000000000e+00, 8.928761159884677e-04, 1.681014771245246e-02, 0.000000000000000e+00, 1.681269628863544e-02, 1.644412702125274e-02, 0.000000000000000e+00, 1.645755969611644e-02, 1.712573498435997e-02, 0.000000000000000e+00, 1.703717992720586e-02, 1.680069107032818e-02, 0.000000000000000e+00, 1.671020204194981e-02, 1.637657215386190e-02, 0.000000000000000e+00, 1.659362732978037e-02, 1.637657215386190e-02, 0.000000000000000e+00, 1.659362732978037e-02, 6.214155513929877e-01, 0.000000000000000e+00, 6.263773909722783e-01, 4.869557603842461e-01, 0.000000000000000e+00, 4.862931574736049e-01, 8.325516992461210e-01, 0.000000000000000e+00, 7.470881093773013e-01, 7.371961063213970e-01, 0.000000000000000e+00, 6.683382188279615e-01, 5.523843371812366e-01, 0.000000000000000e+00, 6.439399747262756e-01, 5.523843371812368e-01, 0.000000000000000e+00, 6.439399747262758e-01, 1.680322502110340e+02, 0.000000000000000e+00, 1.633153648043942e+02, 2.432715455530025e+01, 0.000000000000000e+00, 2.396654094362242e+01, 2.269837421716149e+02, 0.000000000000000e+00, 1.940019561885622e+02, 1.780193950795826e-02, 0.000000000000000e+00, 1.782595457225113e-02, 1.121634537776805e+02, 0.000000000000000e+00, 9.435182145012413e+01, 1.121634537776805e+02, 0.000000000000000e+00, 9.435182145012413e+01, 6.896246147170695e+06, 0.000000000000000e+00, 6.144157416218541e+06, 3.268601510341825e+06, 0.000000000000000e+00, 3.124571891844912e+06, 7.817219853849012e+06, 0.000000000000000e+00, 6.581441351138420e+06, 6.939684423521389e+02, 0.000000000000000e+00, 6.813232572463984e+02, 7.337213909483019e+06, 0.000000000000000e+00, 2.832798288875730e+06, 7.337213909483017e+06, 0.000000000000000e+00, 2.832798288875732e+06, 6.184655642516127e-01, 0.000000000000000e+00, 6.113483131048588e-01, 6.292686936810393e-01, 0.000000000000000e+00, 6.219547129496448e-01, 6.254503941826527e-01, 0.000000000000000e+00, 6.181833347862691e-01, 6.222962328002316e-01, 0.000000000000000e+00, 6.151314409845747e-01, 6.238720007562847e-01, 0.000000000000000e+00, 6.166568959141232e-01, 6.238720007562847e-01, 0.000000000000000e+00, 6.166568959141232e-01, 6.710491118734169e-01, 0.000000000000000e+00, 6.644380041926748e-01, 1.062460454592638e+00, 0.000000000000000e+00, 1.048770501185330e+00, 9.254286161076486e-01, 0.000000000000000e+00, 9.132160890872123e-01, 8.105979508028869e-01, 0.000000000000000e+00, 8.021068030259340e-01, 8.663681416474144e-01, 0.000000000000000e+00, 8.567845172274138e-01, 8.663681416474144e-01, 0.000000000000000e+00, 8.567845172274138e-01, 4.233638525448552e-01, 0.000000000000000e+00, 4.213009399359828e-01, 1.207679180856774e+01, 0.000000000000000e+00, 1.186942020676453e+01, 7.016998509778441e+00, 0.000000000000000e+00, 6.810034028331159e+00, 3.024385837125076e+00, 0.000000000000000e+00, 2.974767882753505e+00, 4.558073793085399e+00, 0.000000000000000e+00, 4.562901000858759e+00, 4.558073793085403e+00, 0.000000000000000e+00, 4.562901000858760e+00, 1.366818081411902e+00, 0.000000000000000e+00, 1.338966339251527e+00, 3.383498365853440e+03, 0.000000000000000e+00, 3.314985802507890e+03, 1.390172763857115e+03, 0.000000000000000e+00, 1.259415447184266e+03, 3.424824182712280e+00, 0.000000000000000e+00, 3.274449679751296e+00, 3.625707363724646e+02, 0.000000000000000e+00, 3.079851680605962e+02, 3.625707363724646e+02, 0.000000000000000e+00, 3.079851680605963e+02, 2.160802635499018e+05, 0.000000000000000e+00, 1.941851121390783e+05, 1.678524443444068e+08, 0.000000000000000e+00, 1.667067706068541e+08, 1.992427887587956e+07, 0.000000000000000e+00, 1.656041588063657e+07, 4.122466915137551e+02, 0.000000000000000e+00, 3.926655637176916e+02, 8.633543549065115e+06, 0.000000000000000e+00, 3.678861720624852e+06, 8.633543549065135e+06, 0.000000000000000e+00, 3.678861720624864e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
