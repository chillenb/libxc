
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_apbeint_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_apbeint", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.176857424188769e+03, 2.176866379876235e+03, 2.176915053978234e+03, 2.176781629444399e+03, 2.176850280643435e+03, 2.176850280643435e+03, 5.877604184906505e+01, 5.877551511685316e+01, 5.876622328973352e+01, 5.880471085758758e+01, 5.877824403063041e+01, 5.877824403063041e+01, 2.279188627227386e+00, 2.276849843869234e+00, 2.227148634976283e+00, 2.260713697683589e+00, 2.250719085288431e+00, 2.250719085288431e+00, 1.835973056758071e-01, 1.872332689436259e-01, 3.066317481093058e+00, 1.181101458254041e-01, 1.419157644382661e-01, 1.419157644382661e-01, 2.971071506090118e-04, 3.291224525845224e-04, 9.877592417970385e-03, 9.913594202486650e-05, 1.565122455121783e-04, 1.565122455121783e-04, 1.275927857844982e+02, 1.276019531666188e+02, 1.275935620115589e+02, 1.276016495807297e+02, 1.275972351621652e+02, 1.275972351621652e+02, 2.019889004047517e+01, 2.043690584461765e+01, 2.011209740589769e+01, 2.032195419336638e+01, 2.037222129608753e+01, 2.037222129608753e+01, 1.657825097894621e+00, 1.872658730661745e+00, 1.430850911362741e+00, 1.477147044651337e+00, 1.701212359360796e+00, 1.701212359360796e+00, 6.243729784941367e-02, 1.977232528052820e-01, 5.394120929406840e-02, 1.696946597429656e+01, 8.190989712837800e-02, 8.190989712837800e-02, 5.902045716679618e-05, 9.474153502624236e-05, 5.538932263426381e-05, 2.530212495213161e-02, 8.038551804624933e-05, 8.038551804624933e-05, 1.584722608747355e+00, 1.582628000559614e+00, 1.583341962963516e+00, 1.583925897370827e+00, 1.583628265369969e+00, 1.583628265369969e+00, 1.495503957696104e+00, 1.224736839631153e+00, 1.297410134996372e+00, 1.371488835570927e+00, 1.332729770017181e+00, 1.332729770017181e+00, 2.061559935359649e+00, 2.975741773872813e-01, 4.012874913820986e-01, 6.200464875994641e-01, 4.967025679252203e-01, 4.967025679252202e-01, 1.040717693721668e+00, 9.065641446018914e-03, 1.666251060184363e-02, 5.583228341471456e-01, 3.977082902406057e-02, 3.977082902406059e-02, 5.915112506783525e-04, 6.770598838484947e-06, 2.982935677026645e-05, 3.537279017520953e-02, 6.882708480973223e-05, 6.882708480973211e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_apbeint_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_apbeint", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.341828465989604e+03, 3.341849750645681e+03, 3.341945888224272e+03, 3.341629186877954e+03, 3.341794914917173e+03, 3.341794914917173e+03, 8.776711206578469e+01, 8.776802327938265e+01, 8.779340908160408e+01, 8.778263105441731e+01, 8.777243610145392e+01, 8.777243610145392e+01, 3.218617708683479e+00, 3.210669123169980e+00, 3.030383607023416e+00, 3.081040774139741e+00, 3.070367758124032e+00, 3.070367758124032e+00, 2.318219768883652e-01, 2.362942748536329e-01, 4.388353553939093e+00, 1.569490197799983e-01, 1.825776351994373e-01, 1.825776351994374e-01, 4.947322592211665e-04, 5.479744680075638e-04, 1.608350722342020e-02, 1.651792015287198e-04, 2.607206627109397e-04, 2.607206627109397e-04, 2.001086073950692e+02, 2.002170610701412e+02, 2.001137104028234e+02, 2.002094521645105e+02, 2.001635165431027e+02, 2.001635165431027e+02, 2.728511412756729e+01, 2.768127075998435e+01, 2.700448717391233e+01, 2.734979595547396e+01, 2.764372342090372e+01, 2.764372342090372e+01, 2.509436364102140e+00, 3.037872714753989e+00, 2.140243390760993e+00, 2.372260999060085e+00, 2.599213461135137e+00, 2.599213461135137e+00, 9.158137534576363e-02, 2.556904063393188e-01, 8.010108786345839e-02, 2.757107209336674e+01, 1.134345030431075e-01, 1.134345030431075e-01, 9.834815658784383e-05, 1.578556249540901e-04, 9.227533639147474e-05, 3.953512863628388e-02, 1.339181020689562e-04, 1.339181020689562e-04, 2.617244401844973e+00, 2.570749174791156e+00, 2.587098703447219e+00, 2.600607095575844e+00, 2.593848119995851e+00, 2.593848119995851e+00, 2.481849443024071e+00, 1.735659165766549e+00, 1.925941585499764e+00, 2.136316812862376e+00, 2.026794851498226e+00, 2.026794851498226e+00, 3.335405605157228e+00, 3.763323027012433e-01, 5.098875751420106e-01, 8.624943348239276e-01, 6.535458662227284e-01, 6.535458662227281e-01, 1.470211337172694e+00, 1.480436353514367e-02, 2.674276159281732e-02, 8.078072837604593e-01, 5.947676493712149e-02, 5.947676493712151e-02, 9.842638768722924e-04, 1.128380041864508e-05, 4.970842457199508e-05, 5.352722292088515e-02, 1.146642178519515e-04, 1.146642178519513e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_apbeint_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_apbeint", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([7.247832262921607e-07, 7.247785333495272e-07, 7.247535990771001e-07, 7.248235022059200e-07, 7.247874538004422e-07, 7.247874538004422e-07, 1.631291217148670e-04, 1.631320366796516e-04, 1.631872201882180e-04, 1.629981435920708e-04, 1.631208197105768e-04, 1.631208197105768e-04, 2.068835069985898e-02, 2.069173964459716e-02, 2.044245960491947e-02, 2.004088205505285e-02, 2.020504453469543e-02, 2.020504453469543e-02, 5.500558427382805e-01, 5.583384603645282e-01, 1.340848509560806e-02, 5.413310658691926e-01, 5.858768392142505e-01, 5.858768392142500e-01, 6.595186169401933e-02, 7.333996992145717e-02, 2.273426066058249e-01, 3.460633255978784e-02, 5.525090137018651e-02, 5.525090137018663e-02, 5.075015174906712e-05, 5.073322082848507e-05, 5.074921900313019e-05, 5.073427772640056e-05, 5.074168131345940e-05, 5.074168131345940e-05, 7.392072465281994e-04, 7.298165185472636e-04, 7.355337027870393e-04, 7.274645055812758e-04, 7.355764898105506e-04, 7.355764898105506e-04, 3.450429467827720e-02, 2.774088287818390e-02, 4.296368192281248e-02, 4.005406404885699e-02, 3.319131693221513e-02, 3.319131693221513e-02, 4.204451968578823e-01, 3.352378378986023e-01, 4.273182868928747e-01, 1.014883362613647e-03, 5.990706865728267e-01, 5.990706865728267e-01, 3.518121064442679e-02, 3.981625190005942e-02, 1.912086092559485e-01, 4.190427664580555e-01, 1.071936291128442e-01, 1.071936291128439e-01, 3.460139895549305e-02, 3.564433167505522e-02, 3.531868964625009e-02, 3.501730737035542e-02, 3.517196850398655e-02, 3.517196850398655e-02, 3.734498621491698e-02, 5.269086859174012e-02, 4.966330306266914e-02, 4.566923192670448e-02, 4.787641697559804e-02, 4.787641697559804e-02, 2.409692161169974e-02, 2.522515019763876e-01, 2.093983005237219e-01, 1.434923854220201e-01, 1.806141019447481e-01, 1.806141019447482e-01, 6.707255830343758e-02, 1.983573786610933e-01, 2.704049020350669e-01, 1.738695414629792e-01, 5.951478253418204e-01, 5.951478253418212e-01, 7.502758480422381e-02, 5.222664358593616e-02, 5.305715585594546e-02, 5.641404384916977e-01, 1.252823253593318e-01, 1.252823253593319e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
