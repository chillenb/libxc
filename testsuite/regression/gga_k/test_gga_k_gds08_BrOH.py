
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_gds08_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_gds08", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [9.607149041666941e+02, 9.606948124674519e+02, 9.606443828271460e+02, 9.609726146563261e+02, 9.607039807760838e+02, 9.607039807760838e+02, 3.695988504951747e+01, 3.695426264739280e+01, 3.680279293612526e+01, 3.707900962304269e+01, 3.695729521576760e+01, 3.695729521576760e+01, 3.086447684659360e+00, 3.108332393701568e+00, 3.773934837734835e+00, 3.778256572893732e+00, 3.094287139227608e+00, 3.094287139227608e+00, 3.703695349088048e-01, 3.599427120136345e-01, 3.261658079011607e+00, 3.338657888627858e-01, 3.667802829809201e-01, 3.667802829809201e-01, -1.567975136775701e+00, -1.537774903598683e+00, -3.680497670976353e-01, -1.964559864054367e+00, -1.554243224686055e+00, -1.554243224686055e+00, 4.349987585468751e+01, 4.319362310573155e+01, 4.346932998450715e+01, 4.323118411118264e+01, 4.334165107136908e+01, 4.334165107136908e+01, 2.885064126805810e+01, 2.861936091155700e+01, 2.957231564258318e+01, 2.938752744567719e+01, 2.777360443994085e+01, 2.777360443994085e+01, 1.477281905564288e+00, 9.530946393816734e-01, 1.411568572093915e+00, 9.633470842574393e-01, 1.451415202625027e+00, 1.451415202625027e+00, 2.529317816460719e-01, 7.778699645509111e-01, 1.817176557107922e-01, 3.778750571355403e+00, 2.343796647289282e-01, 2.343796647289282e-01, -2.006095778753680e+00, -1.917160009142822e+00, -2.347997275052089e+00, -1.827118397599540e-01, -2.082424436492528e+00, -2.082424436492528e+00, 7.338327651203369e-01, 8.611258362504871e-01, 8.155711135845312e-01, 7.802785366469160e-01, 7.979281387005551e-01, 7.979281387005551e-01, 6.873848753862415e-01, 1.630375984421911e+00, 1.352001990194043e+00, 1.091261089349479e+00, 1.219968386612682e+00, 1.219968386612682e+00, 1.035170603411153e+00, 9.915505395979213e-01, 1.028377196742274e+00, 9.473197707861770e-01, 9.848826914898944e-01, 9.848826914898940e-01, 1.427245071067220e+00, -3.446061179433091e-01, -1.754056054365486e-01, 6.749827576302361e-01, -5.177218952492646e-02, -5.177218952492713e-02, -1.384946374044267e+00, -2.924847465689179e+00, -2.459415021302506e+00, -1.471609970706018e-01, -2.273973640161814e+00, -2.273973640161815e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_gds08_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_gds08", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-9.543493669873210e+02, -9.543292720257551e+02, -9.542788254290546e+02, -9.546071107283298e+02, -9.543384418963540e+02, -9.543384418963540e+02, -3.303397707261581e+01, -3.302835184984413e+01, -3.287674928996780e+01, -3.315291002629976e+01, -3.303138006285143e+01, -3.303138006285143e+01, -1.380678214490868e+00, -1.403943246545436e+00, -2.105823969598518e+00, -2.099605861629962e+00, -1.389020945422194e+00, -1.389020945422194e+00, -4.066981070346609e-01, -3.784939214806946e-01, -1.312532908766924e+00, -8.024038993979354e-01, -3.977516047922184e-01, -3.977516047922184e-01, -2.345893392312017e+00, -2.313783160509199e+00, -1.598807199745780e+00, -2.936512016527436e+00, -2.311394161431268e+00, -2.311394161431268e+00, -3.903204648177751e+01, -3.872555472197038e+01, -3.900147539199119e+01, -3.876314368517836e+01, -3.887370021195569e+01, -3.887370021195569e+01, -2.569881261009482e+01, -2.545809594254851e+01, -2.642432048829637e+01, -2.623214087598621e+01, -2.461045739455989e+01, -2.461045739455989e+01, 4.226804740000989e-02, 6.776461759077828e-01, 3.748653838312632e-02, 5.423268706290663e-01, 1.188065744759209e-01, 1.188065744759209e-01, -1.135799266482414e+00, -8.046038026732804e-01, -1.081922851720187e+00, -6.529402823088644e-01, -9.220192490944646e-01, -9.220192490944646e-01, -2.943295034332634e+00, -2.852788729644260e+00, -2.809483343501942e+00, -1.337683429488983e+00, -2.812573018613248e+00, -2.812573018613247e+00, 8.278873607683592e-01, 6.933999514429313e-01, 7.415381289839154e-01, 7.788204331362569e-01, 7.601753393173040e-01, 7.601753393173040e-01, 8.304937166154762e-01, -3.035400813930340e-01, 3.340724137001805e-02, 3.462764612586423e-01, 1.912599490387323e-01, 1.912599490387326e-01, 6.592215207155154e-01, -7.100774174728793e-01, -5.157520504167141e-01, -1.045520001037676e-01, -3.071307094889280e-01, -3.071307094889277e-01, -2.391237370065775e-01, -1.725322608753056e+00, -1.487437366047377e+00, 9.152626359989235e-02, -1.111555323124719e+00, -1.111555323124718e+00, -2.315622688279561e+00, -3.586146415070655e+00, -3.189184925523400e+00, -1.079427635097723e+00, -2.839658521416205e+00, -2.839658521416206e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_gds08_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_gds08", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [6.466056283234563e-06, 6.466009197756443e-06, 6.465764469780239e-06, 6.466536223526939e-06, 6.466031741755516e-06, 6.466031741755516e-06, 1.498421174038643e-03, 1.498411739878048e-03, 1.497967471120726e-03, 1.497780402094735e-03, 1.498397172686069e-03, 1.498397172686069e-03, 2.127416061921152e-01, 2.133980905275349e-01, 2.313976576874749e-01, 2.260172348590344e-01, 2.129807311553839e-01, 2.129807311553839e-01, 1.039094480851941e+01, 9.986689159943243e+00, 1.235781346377657e-01, 2.726729965319867e+01, 1.026742833838440e+01, 1.026742833838440e+01, 5.964453786572185e+04, 5.189989231390612e+04, 7.729001762631485e+02, 5.402227120247934e+05, 5.355685357776580e+04, 5.355685357776580e+04, 4.469833335950086e-04, 4.467449287426880e-04, 4.469581719292752e-04, 4.467728090459601e-04, 4.468621392195736e-04, 4.468621392195736e-04, 8.433970231851093e-03, 8.258181711162384e-03, 8.506448761135831e-03, 8.367254872862299e-03, 8.223561338896960e-03, 8.223561338896960e-03, 3.223851271846090e-01, 2.515276663577714e-01, 3.773229443710125e-01, 3.325266768488966e-01, 2.879077532755357e-01, 2.879077532755357e-01, 6.875369789659389e+01, 1.017076998310966e+01, 7.146664024634525e+01, 8.938290414619800e-03, 4.446729428797773e+01, 4.446729428797773e+01, 6.017464903633266e+05, 4.031448391945296e+05, 9.574968365468717e+05, 2.853120840444644e+02, 5.329472753722590e+05, 5.329472753722590e+05, 2.934235204795085e-01, 2.981735854250898e-01, 2.964590738343240e-01, 2.951453133270494e-01, 2.958018789761704e-01, 2.958018789761704e-01, 3.235901009869711e-01, 4.956708849315528e-01, 4.349226204021869e-01, 3.871492494294326e-01, 4.105657975335820e-01, 4.105657975335819e-01, 2.182135508852704e-01, 5.111822292084749e+00, 3.051372879724367e+00, 1.460335367408629e+00, 2.110668932927307e+00, 2.110668932927307e+00, 6.755606254308927e-01, 9.728411342429538e+02, 3.921118904777629e+02, 1.731324176957159e+00, 1.285807832823024e+02, 1.285807832823023e+02, 3.705071661734571e+04, 1.964459228149110e+07, 2.865708569560217e+06, 1.480818596429327e+02, 8.682210925506415e+05, 8.682210925506453e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
