
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_lgap_ge_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_lgap_ge", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.196825861227152e+03, 2.196833283514657e+03, 2.196878939540057e+03, 2.196757148130433e+03, 2.196829670637652e+03, 2.196829670637652e+03, 5.950779496186344e+01, 5.950728222468060e+01, 5.949811034626131e+01, 5.953917039724096e+01, 5.950803823357380e+01, 5.950803823357380e+01, 2.327848626126169e+00, 2.326786448173274e+00, 2.315226349072646e+00, 2.345025885156713e+00, 2.327441119012641e+00, 2.327441119012641e+00, 2.202801652876636e-01, 2.213818292828444e-01, 3.213254030387075e+00, 1.814633193655937e-01, 2.205321682300463e-01, 2.205321682300463e-01, 2.554225092391639e-01, 2.458057439712746e-01, 1.720056686998921e-01, 6.079272209701130e-01, 2.413474938507461e-01, 2.413474938507461e-01, 1.284013484754607e+02, 1.284051203797279e+02, 1.284019764869122e+02, 1.284049050368216e+02, 1.284029293648620e+02, 1.284029293648620e+02, 2.100906884523866e+01, 2.122011098133671e+01, 2.101119714674632e+01, 2.117446998054948e+01, 2.115246061567937e+01, 2.115246061567937e+01, 1.637796283190846e+00, 1.837132317128140e+00, 1.481554773046939e+00, 1.540239196131281e+00, 1.750815025780470e+00, 1.750815025780470e+00, 1.769307951559831e-01, 2.838240998111914e-01, 1.644182087300696e-01, 1.699887009699257e+01, 1.651300275745372e-01, 1.651300275745372e-01, 6.015195321450784e-01, 5.334302684951876e-01, 3.224696819016157e-01, 1.484648526157635e-01, 4.371881381145627e-01, 4.371881381145629e-01, 1.636272409735454e+00, 1.636584172296025e+00, 1.636572155285658e+00, 1.636494663754667e+00, 1.636538790731814e+00, 1.636538790731814e+00, 1.530019647202559e+00, 1.290051888032702e+00, 1.353537713463545e+00, 1.416917129228576e+00, 1.383511797973296e+00, 1.383511797973296e+00, 2.022995719863583e+00, 3.772148782455126e-01, 4.623829016318679e-01, 6.429437603888079e-01, 5.385109469184978e-01, 5.385109469184977e-01, 1.058509600613491e+00, 1.996353897345025e-01, 1.706096244349136e-01, 5.516978139553890e-01, 1.382049177622600e-01, 1.382049177622598e-01, 2.752082188986629e-01, 1.191314987256996e+00, 7.253791202808397e-01, 1.245753824504748e-01, 3.842048602933109e-01, 3.842048602933118e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_lgap_ge_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_lgap_ge", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.326704492091682e+03, 3.326724048718440e+03, 3.326818263468126e+03, 3.326497877289807e+03, 3.326714747346859e+03, 3.326714747346859e+03, 8.680960839206858e+01, 8.681079897114017e+01, 8.685064325146432e+01, 8.681875554511146e+01, 8.681096035213781e+01, 8.681096035213781e+01, 3.031718853660623e+00, 3.021232831107064e+00, 2.733197476085933e+00, 2.784449668300755e+00, 3.027916569470347e+00, 3.027916569470347e+00, 1.706108269438069e-01, 1.812936542648234e-01, 4.502164506163413e+00, 6.171431056850600e-04, 1.739027654740001e-01, 1.739027654740001e-01, -5.194355341840293e-01, -4.969359349989284e-01, -2.573089843785158e-01, -1.329211904278744e+00, -4.879822935805875e-01, -4.879822935805875e-01, 1.996015111118089e+02, 1.997152025835158e+02, 1.996132726181057e+02, 1.997016732706696e+02, 1.996596405918040e+02, 1.996596405918040e+02, 2.492452450686721e+01, 2.537864239630877e+01, 2.463865982710266e+01, 2.499307838665474e+01, 2.559962033677125e+01, 2.559962033677125e+01, 2.438748209363863e+00, 2.974253732829197e+00, 2.188532382182524e+00, 2.454766934942771e+00, 2.645918322747904e+00, 2.645918322747904e+00, -1.172085021655911e-01, 9.332631407646189e-02, -1.019013525036187e-01, 2.751471921163617e+01, -4.886605299563249e-02, -4.886605299563249e-02, -1.316877028994351e+00, -1.157965783552799e+00, -7.011947823493324e-01, -1.750776222416629e-01, -9.487596922619226e-01, -9.487596922619230e-01, 2.702829976804244e+00, 2.658654426370812e+00, 2.674603350476858e+00, 2.686843626919221e+00, 2.680729227055397e+00, 2.680729227055397e+00, 2.534363853708112e+00, 1.764196043017886e+00, 1.984455089498241e+00, 2.192824524447571e+00, 2.086784813043525e+00, 2.086784813043525e+00, 3.266618182992588e+00, 2.431780308357674e-01, 4.318162346634792e-01, 8.411555499320287e-01, 6.163616762932437e-01, 6.163616762932436e-01, 1.424930724038650e+00, -3.155704217269157e-01, -2.279102527443769e-01, 7.760380007443967e-01, -1.109882386406069e-01, -1.109882386406068e-01, -5.534711453069451e-01, -2.714027728594114e+00, -1.621611712397652e+00, -9.910672770702073e-02, -8.374863902739057e-01, -8.374863902739083e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_lgap_ge_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_lgap_ge", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [8.473950061347955e-07, 8.473884200752402e-07, 8.473550955253723e-07, 8.474630274484325e-07, 8.473915658265905e-07, 8.473915658265905e-07, 1.979789483097524e-04, 1.979766824215253e-04, 1.978900224057153e-04, 1.979135372807120e-04, 1.979752528170714e-04, 1.979752528170714e-04, 2.884345223056976e-02, 2.895117469910213e-02, 3.200172687562388e-02, 3.122327385519428e-02, 2.888258490482121e-02, 2.888258490482121e-02, 1.529909639312200e+00, 1.460560431309434e+00, 1.648185859296866e-02, 4.537627769906163e+00, 1.508522055478718e+00, 1.508522055478718e+00, 4.219836894082758e+04, 3.528951430546513e+04, 2.167609712993043e+02, 7.935710119413923e+05, 3.644532286735268e+04, 3.644532286735268e+04, 5.833620987780860e-05, 5.830192000350174e-05, 5.833260341748838e-05, 5.830594130255671e-05, 5.831873934852859e-05, 5.831873934852859e-05, 1.165305430456961e-03, 1.139257374187113e-03, 1.177907641382048e-03, 1.157206235900025e-03, 1.131873301005492e-03, 1.131873301005492e-03, 4.239828362029339e-02, 3.309987200943337e-02, 4.971155930554229e-02, 4.341981495214231e-02, 3.774630616178232e-02, 3.774630616178232e-02, 1.317621839965921e+01, 1.603392609803482e+00, 1.354489313171949e+01, 1.176008886434855e-03, 7.829847355083377e+00, 7.829847355083377e+00, 9.014580632828501e+05, 5.337337813625557e+05, 1.297617130013061e+06, 6.556505025981140e+01, 7.026965884409981e+05, 7.026965884409981e+05, 4.113726374667028e-02, 3.938295039897455e-02, 3.955269471992234e-02, 3.990845584565397e-02, 3.969586906927160e-02, 3.969586906927160e-02, 4.701037451238444e-02, 6.647894840861032e-02, 5.739803393740457e-02, 5.055315209123015e-02, 5.384846593636407e-02, 5.384846593636406e-02, 2.865423915855775e-02, 7.675455244332033e-01, 4.385448904529818e-01, 1.977980837515649e-01, 2.935800736596069e-01, 2.935800736596070e-01, 9.092878632425765e-02, 2.947665937841163e+02, 9.807565303912290e+01, 2.306993519486361e-01, 2.564010685085273e+01, 2.564010685085272e+01, 2.435808523584752e+04, 7.821154388516115e+07, 6.378589175518748e+06, 2.946217002192175e+01, 1.218601227998985e+06, 1.218601227998993e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
