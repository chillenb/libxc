
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_tw4_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tw4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.191602742067135e+03, 2.191610413636673e+03, 2.191656765874663e+03, 2.191530899689558e+03, 2.191606686417901e+03, 2.191606686417901e+03, 5.922606862213814e+01, 5.922566038696706e+01, 5.921932548778764e+01, 5.925536282497412e+01, 5.922636324599976e+01, 5.922636324599976e+01, 2.287789250228249e+00, 2.285779060710678e+00, 2.240414865002397e+00, 2.271514076715057e+00, 2.287042749406287e+00, 2.287042749406287e+00, 1.959015323541083e-01, 1.991862728679744e-01, 3.186375917260266e+00, 1.187493049707038e-01, 1.968615692769658e-01, 1.968615692769658e-01, 8.717427443753557e-04, 9.561873721369038e-04, 1.534765359071749e-02, 2.010594336470431e-04, 9.363675814940313e-04, 9.363675814940313e-04, 1.282226438378284e+02, 1.282282254166231e+02, 1.282234540240964e+02, 1.282277900941521e+02, 1.282251637812768e+02, 1.282251637812768e+02, 2.034749086912859e+01, 2.058015229002639e+01, 2.030859443340605e+01, 2.048968922475242e+01, 2.055539337817268e+01, 2.055539337817268e+01, 1.632377223027249e+00, 1.835273019961531e+00, 1.475884249665243e+00, 1.538694164502231e+00, 1.746476495918172e+00, 1.746476495918172e+00, 7.041545973076158e-02, 2.169912178978368e-01, 6.825064745239033e-02, 1.698168492184644e+01, 8.963956706705820e-02, 8.963956706705820e-02, 1.871141525288556e-04, 2.443479174311076e-04, 1.372687896558878e-04, 2.894426322505542e-02, 2.028573192751113e-04, 2.028573192751113e-04, 1.634537260690182e+00, 1.634895143989989e+00, 1.634819773355954e+00, 1.634709332716222e+00, 1.634766229048656e+00, 1.634766229048656e+00, 1.528504180938788e+00, 1.275847343070975e+00, 1.347638993775144e+00, 1.414766171930453e+00, 1.379946667580064e+00, 1.379946667580064e+00, 2.020972802337622e+00, 3.231279364053534e-01, 4.275803109145918e-01, 6.322775715127894e-01, 5.182681061059846e-01, 5.182681061059845e-01, 1.044863909364631e+00, 1.325477242533458e-02, 2.378393794492234e-02, 5.473023215982726e-01, 4.720059968444894e-02, 4.720059968444893e-02, 1.196784281963639e-03, 1.832630477671267e-05, 6.612268727124011e-05, 4.292101789889853e-02, 1.465309842514661e-04, 1.465309842514656e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_tw4_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tw4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.346346008579352e+03, 3.346364121809722e+03, 3.346454192843572e+03, 3.346157400606429e+03, 3.346355483443875e+03, 3.346355483443875e+03, 8.805474356231117e+01, 8.805544200884256e+01, 8.808190468836786e+01, 8.807365509306466e+01, 8.805585299855510e+01, 8.805585299855510e+01, 3.198824270775819e+00, 3.191851149447869e+00, 3.022127840804106e+00, 3.069519393315932e+00, 3.196279588467691e+00, 3.196279588467691e+00, 2.480819293963485e-01, 2.531181191118025e-01, 4.621092733937657e+00, 1.537259022358079e-01, 2.495521779696080e-01, 2.495521779696080e-01, 1.446709788376720e-03, 1.586182931738023e-03, 2.434690563194527e-02, 3.348215913952233e-04, 1.553318472158453e-03, 1.553318472158453e-03, 1.999532953652496e+02, 2.000534907128045e+02, 1.999637016104177e+02, 2.000416063537178e+02, 2.000044390146364e+02, 2.000044390146364e+02, 2.748848860390621e+01, 2.787313877740524e+01, 2.733961433832388e+01, 2.763747942851034e+01, 2.794721991926438e+01, 2.794721991926438e+01, 2.461571938860278e+00, 2.970521694066954e+00, 2.213048871967192e+00, 2.453217870866075e+00, 2.662559768886540e+00, 2.662559768886540e+00, 9.911624422469724e-02, 2.741462459863438e-01, 9.548302663983781e-02, 2.748028808528884e+01, 1.200325585382448e-01, 1.200325585382448e-01, 3.116094062424364e-04, 4.068240179699692e-04, 2.285557273712454e-04, 4.396061112381848e-02, 3.377416169098435e-04, 3.377416169098435e-04, 2.700531782245226e+00, 2.655226825644847e+00, 2.671250317289905e+00, 2.683788731807118e+00, 2.677497668809795e+00, 2.677497668809795e+00, 2.532691953204299e+00, 1.825974730758903e+00, 2.010352930966494e+00, 2.197988568723625e+00, 2.100693359898747e+00, 2.100693359898747e+00, 3.262688504732851e+00, 4.066212483886840e-01, 5.501846515595972e-01, 8.858233520827147e-01, 6.929307185113037e-01, 6.929307185113036e-01, 1.483505469225465e+00, 2.124378666240407e-02, 3.693692821500659e-02, 7.955283019389265e-01, 6.781521742095523e-02, 6.781521742095523e-02, 1.984521564998710e-03, 3.054072389807560e-05, 1.101668224567035e-04, 6.159840199266443e-02, 2.439951434964263e-04, 2.439951434964256e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_tw4_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tw4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([7.756206453391896e-07, 7.756177826890361e-07, 7.755968246997056e-07, 7.756438640366786e-07, 7.756192041131961e-07, 7.756192041131961e-07, 1.705360226723544e-04, 1.705401986467825e-04, 1.706338142535462e-04, 1.703640461033061e-04, 1.705359911044455e-04, 1.705359911044455e-04, 2.088894900532083e-02, 2.087608719579822e-02, 2.024137358902920e-02, 1.990022723202051e-02, 2.088466945984225e-02, 2.088466945984225e-02, 6.104964943198754e-01, 6.137082040313928e-01, 1.331928538564304e-02, 6.643523928115247e-01, 6.119005855097108e-01, 6.119005855097108e-01, 2.765832850032671e-01, 2.904821482731560e-01, 4.911193096769406e-01, 9.400003377833181e-02, 2.986180113155851e-01, 2.986180113155851e-01, 5.570463063966479e-05, 5.571947743335725e-05, 5.570595211342211e-05, 5.571749995279440e-05, 5.571253365336212e-05, 5.571253365336212e-05, 7.418711350815707e-04, 7.330781752651420e-04, 7.385233237629800e-04, 7.317873345960989e-04, 7.399800251600250e-04, 7.399800251600250e-04, 3.775558358221343e-02, 3.333904063738070e-02, 4.369653717041040e-02, 4.302311971856701e-02, 3.443476630839721e-02, 3.443476630839721e-02, 5.832949170368166e-01, 3.695048950380033e-01, 6.582015240294625e-01, 1.184344694870858e-03, 7.095006541009651e-01, 7.095006541009651e-01, 9.619864847268139e-02, 1.101644598502248e-01, 2.363291876258636e-01, 6.641289077002782e-01, 1.482616176849543e-01, 1.482616176849542e-01, 4.013177475891668e-02, 3.973264765244694e-02, 3.987527958457560e-02, 3.998635666221629e-02, 3.993088816113320e-02, 3.993088816113320e-02, 4.444854309388124e-02, 5.175761733639610e-02, 4.984288953259147e-02, 4.793147089538891e-02, 4.896909353430778e-02, 4.896909353430779e-02, 2.880649668706334e-02, 2.626592859340359e-01, 2.102616722879916e-01, 1.441933672956345e-01, 1.783988075283461e-01, 1.783988075283461e-01, 6.913345829788536e-02, 3.853407563475544e-01, 5.175020110259851e-01, 1.875756044185633e-01, 8.152173371813130e-01, 8.152173371813137e-01, 2.435180371416212e-01, 5.188076484887525e-02, 8.485699488422269e-02, 9.544301551401527e-01, 1.840183406977463e-01, 1.840183406977457e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
