
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_fr_b88_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_fr_b88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.197392080608537e+03, 2.197399882970231e+03, 2.197446690872384e+03, 2.197318684972935e+03, 2.197396095003650e+03, 2.197396095003650e+03, 5.932423948999746e+01, 5.932387159894748e+01, 5.931865001922753e+01, 5.935280612688955e+01, 5.932455570161333e+01, 5.932455570161333e+01, 2.282503177452075e+00, 2.280259117992901e+00, 2.228314937140896e+00, 2.259612692361826e+00, 2.281672614432480e+00, 2.281672614432480e+00, 1.938873347458205e-01, 1.971401125027997e-01, 3.187329597137705e+00, 1.206725130671913e-01, 1.948350257883572e-01, 1.948350257883572e-01, 2.962982949378338e-03, 3.140855621355015e-03, 2.321674669748790e-02, 1.277943592035891e-03, 3.077871178611378e-03, 3.077871178611378e-03, 1.286064108504893e+02, 1.286123608061118e+02, 1.286072599004262e+02, 1.286118826593601e+02, 1.286091234157547e+02, 1.286091234157547e+02, 2.024039318563694e+01, 2.047653785794539e+01, 2.019519030992424e+01, 2.037893779455987e+01, 2.045902492180566e+01, 2.045902492180566e+01, 1.636047439846469e+00, 1.839594315879546e+00, 1.478880633802897e+00, 1.543071469589447e+00, 1.751016892779278e+00, 1.751016892779278e+00, 7.759679138863750e-02, 2.166109585828237e-01, 7.463383244624387e-02, 1.702183061232003e+01, 9.362239753817356e-02, 9.362239753817356e-02, 1.209466978152401e-03, 1.420769544394653e-03, 8.142817179531261e-04, 3.680659161401841e-02, 1.175388832340485e-03, 1.175388832340485e-03, 1.636121974581159e+00, 1.638475246353804e+00, 1.637825901102390e+00, 1.637170974894414e+00, 1.637512027360551e+00, 1.637512027360551e+00, 1.529545425738431e+00, 1.275119413861645e+00, 1.350079087885175e+00, 1.418957154692003e+00, 1.383476950393435e+00, 1.383476950393435e+00, 2.025953996996781e+00, 3.200691987755420e-01, 4.234733737297333e-01, 6.309166361070214e-01, 5.150472140698414e-01, 5.150472140698413e-01, 1.043674634269878e+00, 2.147385768916393e-02, 3.253222016031802e-02, 5.475420806662999e-01, 5.353734817364707e-02, 5.353734817364707e-02, 3.818751995167308e-03, 2.752404896685593e-04, 6.005169545844779e-04, 4.860100856486021e-02, 8.957144159765208e-04, 8.957144159765197e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_fr_b88_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_fr_b88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.366593782956688e+03, 3.366611245227338e+03, 3.366699568011511e+03, 3.366413412196819e+03, 3.366602904865804e+03, 3.366602904865804e+03, 8.886621994231255e+01, 8.886677301325017e+01, 8.888930302547941e+01, 8.888816971366278e+01, 8.886726152233487e+01, 8.886726152233487e+01, 3.245935126165185e+00, 3.239042588012280e+00, 3.066080780384646e+00, 3.114523934541785e+00, 3.243420448835368e+00, 3.243420448835368e+00, 2.450263981592062e-01, 2.511534102864515e-01, 4.676238842321490e+00, 1.356251798055464e-01, 2.468465113018784e-01, 2.468465113018784e-01, 2.055497520467043e-03, 2.196930245551917e-03, 2.039520098258675e-02, 7.787490803006160e-04, 2.152514092727014e-03, 2.152514092727014e-03, 2.006774446379285e+02, 2.007679618676307e+02, 2.006868840766653e+02, 2.007572629432845e+02, 2.007235888409425e+02, 2.007235888409425e+02, 2.789105921036042e+01, 2.828543037063502e+01, 2.773309205659639e+01, 2.803933477197725e+01, 2.836540704476394e+01, 2.836540704476394e+01, 2.480133568055172e+00, 2.971354305672589e+00, 2.231226216144541e+00, 2.456672761189823e+00, 2.679160616426986e+00, 2.679160616426986e+00, 7.962334367088945e-02, 2.548601024425124e-01, 7.705031677190118e-02, 2.748834110769787e+01, 1.010524730536866e-01, 1.010524730536866e-01, 7.348485453877185e-04, 8.798147164676201e-04, 5.023954022769409e-04, 3.473254945854416e-02, 7.283345895000694e-04, 7.283345895000684e-04, 2.699608272904022e+00, 2.655461643449184e+00, 2.670773867850128e+00, 2.682962373916889e+00, 2.676821108018393e+00, 2.676821108018393e+00, 2.531957135582906e+00, 1.850015823178029e+00, 2.028090188502832e+00, 2.206861376758002e+00, 2.114157893189986e+00, 2.114157893189986e+00, 3.264132341535584e+00, 3.955318247252919e-01, 5.515170005236441e-01, 8.987853849306552e-01, 7.024365042023470e-01, 7.024365042023468e-01, 1.503981075069491e+00, 1.840689079151108e-02, 2.972515964792804e-02, 8.048400877516623e-01, 5.381251992135161e-02, 5.381251992135164e-02, 2.690134094614104e-03, 1.485559675934364e-04, 3.455483142170093e-04, 4.890612372435787e-02, 5.496362331869216e-04, 5.496362331869207e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_fr_b88_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_fr_b88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([7.487841104632413e-07, 7.487830803599792e-07, 7.487680743086290e-07, 7.487851520235019e-07, 7.487836542429899e-07, 7.487836542429899e-07, 1.601672448902757e-04, 1.601732283778587e-04, 1.603180110126512e-04, 1.599669468147860e-04, 1.601682754004501e-04, 1.601682754004501e-04, 1.898694530911979e-02, 1.897050686444688e-02, 1.841826351727047e-02, 1.809893310763524e-02, 1.898130131151054e-02, 1.898130131151054e-02, 6.081496220470760e-01, 6.024583650292652e-01, 1.228476582561958e-02, 9.846706612565753e-01, 6.066665018599773e-01, 6.066665018599773e-01, 1.287108857611148e+02, 1.182462769294066e+02, 7.291726754301104e+00, 4.577476073254839e+02, 1.218874222203444e+02, 1.218874222203444e+02, 5.536217576951248e-05, 5.541663302173716e-05, 5.536744513451992e-05, 5.540979136228606e-05, 5.539048668922794e-05, 5.539048668922794e-05, 6.747670095219100e-04, 6.663549620938731e-04, 6.724238138726305e-04, 6.658859266808328e-04, 6.721224502206812e-04, 6.721224502206812e-04, 3.594187616097606e-02, 3.574487085739177e-02, 4.136199420948918e-02, 4.450808247453167e-02, 3.318164771517456e-02, 3.318164771517456e-02, 1.589250394152702e+00, 4.482670599982617e-01, 1.705648039411546e+00, 1.269091969353112e-03, 1.328435438029439e+00, 1.328435438029439e+00, 4.978441331345516e+02, 3.880123932221005e+02, 8.954357108288827e+02, 4.129522819563198e+00, 5.155406637561215e+02, 5.155406637561216e+02, 4.616873263776666e-02, 4.300496803576363e-02, 4.396854506922920e-02, 4.482583422727789e-02, 4.438303286669094e-02, 4.438303286669094e-02, 5.185980320785474e-02, 4.740695284183827e-02, 4.695218493063100e-02, 4.736576951674260e-02, 4.710569831531854e-02, 4.710569831531854e-02, 3.067733320209227e-02, 2.745882352568746e-01, 1.996776801492685e-01, 1.311191977247875e-01, 1.628676315922293e-01, 1.628676315922293e-01, 6.311417303858723e-02, 7.903626450300711e+00, 4.689777068499507e+00, 1.732436692891375e-01, 2.660418759976017e+00, 2.660418759976018e+00, 8.842809386979627e+01, 5.162090095156319e+03, 1.476721637450516e+03, 3.082833346569274e+00, 7.777701871761363e+02, 7.777701871761379e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
