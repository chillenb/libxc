
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_llp_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_llp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.194573979522891e+03, 2.194581797268688e+03, 2.194628621705369e+03, 2.194500365020263e+03, 2.194578002466447e+03, 2.194578002466447e+03, 5.924154652623313e+01, 5.924118123942971e+01, 5.923602509219285e+01, 5.927003418327613e+01, 5.924186337255244e+01, 5.924186337255244e+01, 2.279569251576227e+00, 2.277346768605058e+00, 2.226207974906297e+00, 2.257423759330380e+00, 2.278746421640514e+00, 2.278746421640514e+00, 1.940749204219012e-01, 1.972818225432956e-01, 3.182828585845833e+00, 1.214374124919794e-01, 1.950080444025997e-01, 1.950080444025997e-01, 3.090510233642586e-03, 3.274711870233705e-03, 2.383468489731874e-02, 1.339919998258650e-03, 3.209069883548134e-03, 3.209069883548134e-03, 1.284621648703582e+02, 1.284686573313093e+02, 1.284630676574992e+02, 1.284681122317216e+02, 1.284651572671936e+02, 1.284651572671936e+02, 2.022085488803586e+01, 2.045611959054708e+01, 2.017664403293577e+01, 2.035968198315393e+01, 2.043768845605273e+01, 2.043768845605273e+01, 1.633844021835725e+00, 1.838409592578353e+00, 1.476856299982940e+00, 1.541726083041164e+00, 1.748755180220121e+00, 1.748755180220121e+00, 7.859292072509973e-02, 2.174424266856254e-01, 7.555520539913113e-02, 1.701080759102802e+01, 9.446360829357943e-02, 9.446360829357943e-02, 1.268244228104283e-03, 1.488869363454024e-03, 8.534189490191467e-04, 3.754858491735380e-02, 1.231699608494586e-03, 1.231699608494586e-03, 1.635745560664007e+00, 1.637517277671923e+00, 1.637054883219958e+00, 1.636559979613708e+00, 1.636819214289705e+00, 1.636819214289705e+00, 1.529303179774095e+00, 1.273349307009759e+00, 1.348208986273594e+00, 1.417317973162985e+00, 1.381678392198398e+00, 1.381678392198398e+00, 2.024562667548782e+00, 3.206249817176743e-01, 4.235212468520211e-01, 6.300980854308159e-01, 5.146262793091698e-01, 5.146262793091697e-01, 1.042253158812447e+00, 2.209090342397787e-02, 3.328356404259304e-02, 5.467679226680638e-01, 5.431675038425165e-02, 5.431675038425163e-02, 3.980078722934310e-03, 2.895194451361226e-04, 6.307133957959926e-04, 4.930387367682303e-02, 9.389380262711189e-04, 9.389380262711177e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_llp_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_llp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.364896748298948e+03, 3.364914311017908e+03, 3.365002918683681e+03, 3.364715121145541e+03, 3.364905924545722e+03, 3.364905924545722e+03, 8.877626164477714e+01, 8.877684194960489e+01, 8.880011211932266e+01, 8.879766405783293e+01, 8.877731646589272e+01, 8.877731646589272e+01, 3.237548640518259e+00, 3.230545439220777e+00, 3.054439662956172e+00, 3.102906537945142e+00, 3.234994226832669e+00, 3.234994226832669e+00, 2.432463948115593e-01, 2.494116654355774e-01, 4.668844413581818e+00, 1.341383101594116e-01, 2.450786784734949e-01, 2.450786784734949e-01, 2.109262129280579e-03, 2.252570822511139e-03, 2.040543509424866e-02, 8.083602987097086e-04, 2.207066235318527e-03, 2.207066235318527e-03, 2.006401989507875e+02, 2.007319006067116e+02, 2.006497570396196e+02, 2.007210569799061e+02, 2.006869554875154e+02, 2.006869554875154e+02, 2.778674762086767e+01, 2.818229472438910e+01, 2.762567669874418e+01, 2.793282459003117e+01, 2.826595312478755e+01, 2.826595312478755e+01, 2.478327127518530e+00, 2.971759481095003e+00, 2.229356525677892e+00, 2.456797550382711e+00, 2.677739182857934e+00, 2.677739182857934e+00, 7.878505412217336e-02, 2.523429566438961e-01, 7.622636873588506e-02, 2.749207094764250e+01, 9.991293678403820e-02, 9.991293678403820e-02, 7.629690838332641e-04, 9.120849294229517e-04, 5.209787194216509e-04, 3.452231743649326e-02, 7.550086262418722e-04, 7.550086262418719e-04, 2.699888634818237e+00, 2.655846329425340e+00, 2.671169102490972e+00, 2.683332676455709e+00, 2.677207934321510e+00, 2.677207934321510e+00, 2.532155167025354e+00, 1.846461939609409e+00, 2.026179227266269e+00, 2.206340460847968e+00, 2.112982495669432e+00, 2.112982495669432e+00, 3.264547041806400e+00, 3.923057368201094e-01, 5.481949133886743e-01, 8.965171814940652e-01, 6.995264519209379e-01, 6.995264519209378e-01, 1.500765018572364e+00, 1.846403886803452e-02, 2.962582964625800e-02, 8.036119819562224e-01, 5.328493792656567e-02, 5.328493792656566e-02, 2.756324314612555e-03, 1.555204681211985e-04, 3.602377574650425e-04, 4.842438372393356e-02, 5.702182327908160e-04, 5.702182327908152e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_llp_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_llp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [7.411885650302259e-07, 7.411872414470098e-07, 7.411714712391904e-07, 7.411933437209589e-07, 7.411879494822076e-07, 7.411879494822076e-07, 1.594012069502230e-04, 1.594067060769155e-04, 1.595382506827832e-04, 1.592104518912350e-04, 1.594019981411295e-04, 1.594019981411295e-04, 1.910587319616094e-02, 1.909361926154387e-02, 1.864941007244928e-02, 1.832032094896191e-02, 1.910173932653868e-02, 1.910173932653868e-02, 6.244406569719506e-01, 6.178512911266594e-01, 1.228269401531729e-02, 1.026190455384559e+00, 6.226840862538389e-01, 6.226840862538389e-01, 1.358000953299647e+02, 1.247643242740569e+02, 7.698030380022906e+00, 4.827100092207344e+02, 1.286060688685199e+02, 1.286060688685199e+02, 5.453917382176423e-05, 5.458679101919630e-05, 5.454376338249380e-05, 5.458079107582995e-05, 5.456395504710073e-05, 5.456395504710073e-05, 6.830527542192983e-04, 6.742371166895558e-04, 6.811054789736833e-04, 6.742485672618892e-04, 6.796131631676115e-04, 6.796131631676115e-04, 3.566993188473920e-02, 3.484603341325943e-02, 4.109562699320325e-02, 4.359285077060580e-02, 3.285592395347459e-02, 3.285592395347459e-02, 1.669137303546278e+00, 4.647476877639592e-01, 1.790663797229289e+00, 1.237268013238105e-03, 1.389839448069909e+00, 1.389839448069909e+00, 5.249886375774390e+02, 4.091919617004709e+02, 9.443019382825534e+02, 4.354045843979589e+00, 5.436824568755513e+02, 5.436824568755512e+02, 4.463147584277453e-02, 4.187387455811555e-02, 4.271500183692949e-02, 4.346245326511700e-02, 4.307650540471217e-02, 4.307650540471217e-02, 5.005433697219275e-02, 4.751095569277609e-02, 4.669719465169404e-02, 4.670321440286662e-02, 4.665778915502924e-02, 4.665778915502924e-02, 2.993163894067281e-02, 2.828555230968940e-01, 2.040808047438510e-01, 1.318951809926106e-01, 1.651737129914718e-01, 1.651737129914719e-01, 6.334117360631314e-02, 8.345238626058908e+00, 4.948544467613134e+00, 1.731437120370987e-01, 2.797628743816396e+00, 2.797628743816398e+00, 9.330590439486264e+01, 5.442243192758552e+03, 1.557030318349475e+03, 3.241624300471289e+00, 8.202013756800824e+02, 8.202013756800840e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
