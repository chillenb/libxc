
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_absp3_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_absp3", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.033792087135989e+02, -1.034082090579631e+02, -1.034917185513554e+02, -1.030611823478975e+02, -1.032932324988605e+02, -1.032932324988605e+02, 6.981408763437539e+00, 6.974271615705792e+00, 6.809702987727726e+00, 7.098618055934289e+00, 6.973187844734291e+00, 6.973187844734291e+00, 1.149145074895386e+00, 1.173871295607870e+00, 1.850687087986931e+00, 1.841419586170941e+00, 1.890356112225045e+00, 1.890356112225045e+00, 5.434576142507216e-01, 5.178873546543165e-01, 1.239868361978779e+00, 7.259622788632705e-01, 6.109773660218328e-01, 6.109773660218329e-01, 7.295214588690189e-01, 7.096087235041444e-01, 9.153423797098461e-01, 7.660811148784590e-01, 6.862565485174663e-01, 6.862565485174654e-01, -2.166089170599683e+01, -2.200029349256560e+01, -2.167498423524923e+01, -2.197463811251473e+01, -2.183381794150917e+01, -2.183381794150917e+01, 1.829721961150844e+01, 1.792884222296308e+01, 1.955856085717347e+01, 1.923099885904884e+01, 1.749070388147991e+01, 1.749070388147991e+01, 5.926754826894835e-02, -6.710533509132317e-01, 1.538031034911016e-01, -4.471830175875883e-01, -3.581356718662883e-02, -3.581356718662881e-02, 9.025631740568124e-01, 9.273265257362561e-01, 8.830218817483713e-01, -6.228624615643705e+00, 7.162500970500886e-01, 7.162500970500886e-01, 6.677700570669465e-01, 7.065061427357148e-01, 2.817532042418889e-01, 8.032709160240195e-01, 4.137665271103963e-01, 4.137665271103970e-01, -7.285591230074311e-01, -5.787805932577144e-01, -6.313874748767194e-01, -6.749826525932281e-01, -6.531798506880067e-01, -6.531798506880067e-01, -7.294259393051163e-01, 5.839417488330114e-01, 2.022149742573322e-01, -1.798396317835157e-01, 1.040103965396897e-02, 1.040103965396897e-02, -7.079567365565748e-01, 9.528440851303002e-01, 8.225245056170174e-01, 3.888090303606452e-01, 6.126666106967170e-01, 6.126666106967170e-01, 5.217794995490044e-01, 9.630165782506876e-01, 9.373563524748074e-01, 1.821220848615319e-01, 7.035091678961012e-01, 7.035091678961011e-01, 8.118669902048639e-01, 3.205923617915496e-01, 4.583260028867508e-01, 7.148839359274064e-01, 3.710317897463564e-01, 3.710317897463559e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_absp3_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_absp3", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.726001632123312e+03, -2.725991983942521e+03, -2.725986307857361e+03, -2.725980870643963e+03, -2.725984808458426e+03, -2.725965415782279e+03, -2.726156660365146e+03, -2.726184841820120e+03, -2.725990092503698e+03, -2.726132088200107e+03, -2.725990092503698e+03, -2.726132088200107e+03, -8.200262962987793e+01, -8.195475057195993e+01, -8.199742550660167e+01, -8.194632769372744e+01, -8.183877259361235e+01, -8.179816351476984e+01, -8.214045635174226e+01, -8.209247688685331e+01, -8.199320031280010e+01, -8.195579419511743e+01, -8.199320031280010e+01, -8.195579419511743e+01, -3.983597138778544e+00, -3.895558091659307e+00, -4.012476271106553e+00, -3.904155619703769e+00, -4.407012827385799e+00, -4.572490781632385e+00, -4.551615953043816e+00, -4.495488160078925e+00, -3.780201419304450e+00, -5.547152328992244e+00, -3.780201419304450e+00, -5.547152328992244e+00, -7.348641796171410e-01, -7.253234430563950e-01, -7.146751237484299e-01, -7.059719167108813e-01, -5.173331412842512e+00, -4.916767984448412e+00, -8.287955036263241e-01, -8.374352792348695e-01, -7.822851085889618e-01, -8.206627891039280e-01, -7.822851085889621e-01, -8.206627891039271e-01, -7.277983320263768e-01, -7.313727631700954e-01, -7.089274846847614e-01, -7.106184193652070e-01, -9.260598825280298e-01, -9.203501535440299e-01, -7.610102820725029e-01, -7.715684421862797e-01, -7.285741813970898e-01, -4.575884805704257e-01, -7.285741813970888e-01, -4.575884805704251e-01, -1.464847567139069e+02, -1.464282802715981e+02, -1.462023192630607e+02, -1.461553864645989e+02, -1.464708340874569e+02, -1.464201693266124e+02, -1.462284531659927e+02, -1.461722322705749e+02, -1.463386187870942e+02, -1.462909016724701e+02, -1.463386187870942e+02, -1.462909016724701e+02, -4.205111232061627e+01, -4.204858933683219e+01, -4.203119759341517e+01, -4.202340865810426e+01, -4.324275962007727e+01, -4.287896096013709e+01, -4.321060637767131e+01, -4.286375725329402e+01, -4.120690078656047e+01, -4.191181991650300e+01, -4.120690078656047e+01, -4.191181991650300e+01, -2.201202572212404e+00, -2.187114465709580e+00, -1.851674920192203e+00, -1.845276324482054e+00, -1.949494912691514e+00, -2.016183854382671e+00, -1.473874188383725e+00, -1.582052317245783e+00, -2.261220945790855e+00, -2.075905306993339e+00, -2.261220945790855e+00, -2.075905306993339e+00, -9.607644601511501e-01, -9.479199338171034e-01, -1.113117604495073e+00, -1.114716933100878e+00, -9.276926341295935e-01, -9.271591452161700e-01, -1.663364054003850e+01, -1.661491605788022e+01, -8.540276676594954e-01, -7.319410563302553e-01, -8.540276676594954e-01, -7.319410563302553e-01, -6.423795113738558e-01, -6.904763662698470e-01, -6.921664797138501e-01, -7.203545220400998e-01, -2.899775512420493e-01, -2.749066990875949e-01, -8.153340959134782e-01, -8.310831694878015e-01, -4.112667735828527e-01, -4.148254444707575e-01, -4.112667735828534e-01, -4.148254444707583e-01, -1.422821810205094e+00, -1.431455167505415e+00, -1.548394644173078e+00, -1.556124626167678e+00, -1.504430864314774e+00, -1.512197397455665e+00, -1.467573769353488e+00, -1.476153097603619e+00, -1.485992489542662e+00, -1.494184603548392e+00, -1.485992489542662e+00, -1.494184603548392e+00, -1.306813884542602e+00, -1.315148538723375e+00, -2.086273667340307e+00, -2.088799407917043e+00, -1.850347497536189e+00, -1.851610163438788e+00, -1.616002290246356e+00, -1.622958434859667e+00, -1.728224065954280e+00, -1.735760021640187e+00, -1.728224065954280e+00, -1.735760021640187e+00, -2.064733250221304e+00, -2.057693149192133e+00, -1.250891521058448e+00, -1.250525890088166e+00, -1.256898277623784e+00, -1.247563048499090e+00, -1.135829420411321e+00, -1.140768620402421e+00, -1.183401270637223e+00, -1.175556054976559e+00, -1.183401270637223e+00, -1.175556054976559e+00, -1.796702036762592e+00, -1.795801451700870e+00, -9.704536330805549e-01, -9.695175393404348e-01, -9.575292793323368e-01, -9.437839858162568e-01, -8.750340332554531e-01, -8.824579952351884e-01, -7.790307594819672e-01, -6.995775688018371e-01, -7.790307594819669e-01, -6.995775688018373e-01, -8.168082423038100e-01, -8.082802899867373e-01, -3.662935393758839e-01, -2.752133505602885e-01, -4.661972346782325e-01, -4.518253102463678e-01, -7.406046535187649e-01, -7.462586697252321e-01, -2.863929606496101e-01, -4.071786534576347e-01, -2.863929606496098e-01, -4.071786534576344e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_absp3_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_absp3", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.293109184051877e-05, 0.000000000000000e+00, 1.293114179513549e-05, 1.293096651097146e-05, 0.000000000000000e+00, 1.293105074677587e-05, 1.293054083471756e-05, 0.000000000000000e+00, 1.293044770940055e-05, 1.293195688134498e-05, 0.000000000000000e+00, 1.293225240321300e-05, 1.293101834015489e-05, 0.000000000000000e+00, 1.293151277752772e-05, 1.293101834015489e-05, 0.000000000000000e+00, 1.293151277752772e-05, 2.996366023714674e-03, 0.000000000000000e+00, 2.996488674912871e-03, 2.996337920348051e-03, 0.000000000000000e+00, 2.996477974254268e-03, 2.995831833038986e-03, 0.000000000000000e+00, 2.995646812433001e-03, 2.995258276008431e-03, 0.000000000000000e+00, 2.995132169597408e-03, 2.997869647877723e-03, 0.000000000000000e+00, 2.994507043947534e-03, 2.997869647877723e-03, 0.000000000000000e+00, 2.994507043947534e-03, 4.200715030699055e-01, 0.000000000000000e+00, 4.151155631692661e-01, 4.220388987872136e-01, 0.000000000000000e+00, 4.159317269801374e-01, 4.495394155411678e-01, 0.000000000000000e+00, 4.589594270924217e-01, 4.445183114860597e-01, 0.000000000000000e+00, 4.416418299177148e-01, 4.057091912691514e-01, 0.000000000000000e+00, 4.937250273428979e-01, 4.057091912691514e-01, 0.000000000000000e+00, 4.937250273428979e-01, 2.572670895608398e+01, 0.000000000000000e+00, 2.294376358600035e+01, 2.479864693157502e+01, 0.000000000000000e+00, 2.177059790083632e+01, 2.771148678928619e-01, 0.000000000000000e+00, 2.509464054984751e-01, 5.659768155776936e+01, 0.000000000000000e+00, 5.431767266435860e+01, 2.259749942680681e+01, 0.000000000000000e+00, 1.463508641615167e+02, 2.259749942680681e+01, 0.000000000000000e+00, 1.463508641615166e+02, 6.324503014234192e+05, 0.000000000000000e+00, 5.271019733892687e+05, 5.496562727421005e+05, 0.000000000000000e+00, 4.471116735888455e+05, 3.197159921025622e+03, 0.000000000000000e+00, 2.714904401504723e+03, 2.911560192811907e+06, 0.000000000000000e+00, 3.062094217456303e+06, 8.908246190359765e+05, 0.000000000000000e+00, 4.834051151218385e+06, 8.908246190359765e+05, 0.000000000000000e+00, 4.834051151218379e+06, 8.924768742371638e-04, 0.000000000000000e+00, 8.931185292667896e-04, 8.919770600555195e-04, 0.000000000000000e+00, 8.926352803062284e-04, 8.924464270475136e-04, 0.000000000000000e+00, 8.931000056290367e-04, 8.920175841013226e-04, 0.000000000000000e+00, 8.926610178974752e-04, 8.922228825623769e-04, 0.000000000000000e+00, 8.928761159884677e-04, 8.922228825623769e-04, 0.000000000000000e+00, 8.928761159884677e-04, 1.681014771245246e-02, 0.000000000000000e+00, 1.681269628863544e-02, 1.644412702125274e-02, 0.000000000000000e+00, 1.645755969611644e-02, 1.712573498435997e-02, 0.000000000000000e+00, 1.703717992720586e-02, 1.680069107032818e-02, 0.000000000000000e+00, 1.671020204194981e-02, 1.637657215386190e-02, 0.000000000000000e+00, 1.659362732978037e-02, 1.637657215386190e-02, 0.000000000000000e+00, 1.659362732978037e-02, 6.214155513929877e-01, 0.000000000000000e+00, 6.263773909722783e-01, 4.869557603842461e-01, 0.000000000000000e+00, 4.862931574736049e-01, 8.325516992461210e-01, 0.000000000000000e+00, 7.470881093773013e-01, 7.371961063213970e-01, 0.000000000000000e+00, 6.683382188279615e-01, 5.523843371812366e-01, 0.000000000000000e+00, 6.439399747262756e-01, 5.523843371812368e-01, 0.000000000000000e+00, 6.439399747262758e-01, 1.680322502110340e+02, 0.000000000000000e+00, 1.633153648043942e+02, 2.432715455530025e+01, 0.000000000000000e+00, 2.396654094362242e+01, 2.269837421716149e+02, 0.000000000000000e+00, 1.940019561885622e+02, 1.780193950795826e-02, 0.000000000000000e+00, 1.782595457225113e-02, 1.121634537776805e+02, 0.000000000000000e+00, 9.435182145012413e+01, 1.121634537776805e+02, 0.000000000000000e+00, 9.435182145012413e+01, 6.896246147170695e+06, 0.000000000000000e+00, 6.144157416218541e+06, 3.268601510341825e+06, 0.000000000000000e+00, 3.124571891844912e+06, 7.817219853849012e+06, 0.000000000000000e+00, 6.581441351138420e+06, 6.939684423521389e+02, 0.000000000000000e+00, 6.813232572463984e+02, 7.337213909483019e+06, 0.000000000000000e+00, 2.832798288875730e+06, 7.337213909483017e+06, 0.000000000000000e+00, 2.832798288875732e+06, 6.184655642516127e-01, 0.000000000000000e+00, 6.113483131048588e-01, 6.292686936810393e-01, 0.000000000000000e+00, 6.219547129496448e-01, 6.254503941826527e-01, 0.000000000000000e+00, 6.181833347862691e-01, 6.222962328002316e-01, 0.000000000000000e+00, 6.151314409845747e-01, 6.238720007562847e-01, 0.000000000000000e+00, 6.166568959141232e-01, 6.238720007562847e-01, 0.000000000000000e+00, 6.166568959141232e-01, 6.710491118734169e-01, 0.000000000000000e+00, 6.644380041926748e-01, 1.062460454592638e+00, 0.000000000000000e+00, 1.048770501185330e+00, 9.254286161076486e-01, 0.000000000000000e+00, 9.132160890872123e-01, 8.105979508028869e-01, 0.000000000000000e+00, 8.021068030259340e-01, 8.663681416474144e-01, 0.000000000000000e+00, 8.567845172274138e-01, 8.663681416474144e-01, 0.000000000000000e+00, 8.567845172274138e-01, 4.233638525448552e-01, 0.000000000000000e+00, 4.213009399359828e-01, 1.207679180856774e+01, 0.000000000000000e+00, 1.186942020676453e+01, 7.016998509778441e+00, 0.000000000000000e+00, 6.810034028331159e+00, 3.024385837125076e+00, 0.000000000000000e+00, 2.974767882753505e+00, 4.558073793085399e+00, 0.000000000000000e+00, 4.562901000858759e+00, 4.558073793085403e+00, 0.000000000000000e+00, 4.562901000858760e+00, 1.366818081411902e+00, 0.000000000000000e+00, 1.338966339251527e+00, 3.383498365853440e+03, 0.000000000000000e+00, 3.314985802507890e+03, 1.390172763857115e+03, 0.000000000000000e+00, 1.259415447184266e+03, 3.424824182712280e+00, 0.000000000000000e+00, 3.274449679751296e+00, 3.625707363724646e+02, 0.000000000000000e+00, 3.079851680605962e+02, 3.625707363724646e+02, 0.000000000000000e+00, 3.079851680605963e+02, 2.160802635499018e+05, 0.000000000000000e+00, 1.941851121390783e+05, 1.678524443444068e+08, 0.000000000000000e+00, 1.667067706068541e+08, 1.992427887587956e+07, 0.000000000000000e+00, 1.656041588063657e+07, 4.122466915137551e+02, 0.000000000000000e+00, 3.926655637176916e+02, 8.633543549065115e+06, 0.000000000000000e+00, 3.678861720624852e+06, 8.633543549065135e+06, 0.000000000000000e+00, 3.678861720624864e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
