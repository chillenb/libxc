
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_ol2_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_ol2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.189497569669970e+03, 2.189506608269031e+03, 2.189555652862956e+03, 2.189420995058398e+03, 2.189490292046446e+03, 2.189490292046446e+03, 5.912066543464598e+01, 5.912012174102608e+01, 5.911046002011136e+01, 5.914972821396536e+01, 5.912286389669571e+01, 5.912286389669571e+01, 2.298462409893492e+00, 2.296416000613607e+00, 2.258148561738119e+00, 2.291402451020591e+00, 2.280825620323214e+00, 2.280825620323214e+00, 2.051505003471002e-01, 2.067337327402272e-01, 3.089003434294497e+00, 1.640957718116836e-01, 1.746792593081264e-01, 1.746792593081265e-01, 8.123299250280207e-02, 7.903969997857824e-02, 1.076218003630397e-01, 8.517451414314078e-02, 7.557911095240820e-02, 7.557911095240813e-02, 1.283618101128564e+02, 1.283718287970507e+02, 1.283626238146990e+02, 1.283714628813236e+02, 1.283666913696257e+02, 1.283666913696257e+02, 2.051448394173426e+01, 2.074257481300622e+01, 2.045951328529537e+01, 2.065951242100233e+01, 2.066824717011799e+01, 2.066824717011799e+01, 1.667393154920595e+00, 1.884702786682420e+00, 1.439212585496276e+00, 1.486519383515438e+00, 1.711049167519049e+00, 1.711049167519049e+00, 1.405048866890320e-01, 2.482413274545454e-01, 1.325434870973267e-01, 1.707871333961193e+01, 1.346934386234438e-01, 1.346934386234438e-01, 7.419632509747372e-02, 7.851262985092339e-02, 3.133301415997113e-02, 1.048175032073822e-01, 4.593114938349960e-02, 4.593114938349966e-02, 1.594542081437017e+00, 1.592815472867605e+00, 1.593530765322919e+00, 1.594036532260047e+00, 1.593789742311451e+00, 1.593789742311451e+00, 1.504105793074926e+00, 1.234707837781283e+00, 1.305131307530445e+00, 1.379637474804237e+00, 1.340420026234241e+00, 1.340420026234241e+00, 2.074785503567514e+00, 3.376522121504764e-01, 4.256680503774427e-01, 6.263368920257590e-01, 5.091079993835682e-01, 5.091079993835682e-01, 1.049483384899097e+00, 1.124215161482529e-01, 1.142145777847219e-01, 5.621046795723683e-01, 1.032681798740235e-01, 1.032681798740235e-01, 9.053795630941411e-02, 3.543464761281845e-02, 5.093917574008618e-02, 1.016887721662922e-01, 4.086812062680691e-02, 4.086812062680686e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_ol2_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_ol2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.364009919331799e+03, 3.364031797074937e+03, 3.364129856383362e+03, 3.363804343181503e+03, 3.363974791306593e+03, 3.363974791306593e+03, 8.810041300382831e+01, 8.810158269290773e+01, 8.813292848475371e+01, 8.811187502658056e+01, 8.810606301076801e+01, 8.810606301076801e+01, 3.179398352810514e+00, 3.169389453567307e+00, 2.921541471487219e+00, 2.974617229090562e+00, 2.966762382168212e+00, 2.966762382168212e+00, 1.601729890537186e-01, 1.697356760195531e-01, 4.358875745882226e+00, 4.647834940952281e-02, 9.083454446082619e-02, 9.083454446082613e-02, -8.079017220809301e-02, -7.854912472067654e-02, -9.269000886094951e-02, -8.502681423944924e-02, -7.534589547400326e-02, -7.534589547400317e-02, 2.015789137439432e+02, 2.016889585118353e+02, 2.015840888327875e+02, 2.016812366300596e+02, 2.016346422289978e+02, 2.016346422289978e+02, 2.612336227835532e+01, 2.657406231942381e+01, 2.568622893086859e+01, 2.608269412783746e+01, 2.658401728060064e+01, 2.658401728060064e+01, 2.523250075079628e+00, 3.058073893616575e+00, 2.148905264375419e+00, 2.388974610078905e+00, 2.615640152838298e+00, 2.615640152838298e+00, -3.899476389488386e-02, 1.182135538250930e-01, -4.566461806102142e-02, 2.775236365940804e+01, 5.099250071696223e-03, 5.099250071696223e-03, -7.410839706091539e-02, -7.837147613539051e-02, -3.125048355425388e-02, -6.551515477443312e-02, -4.581137453601734e-02, -4.581137453601739e-02, 2.631437004986734e+00, 2.587683230263742e+00, 2.603320428576636e+00, 2.616083489221942e+00, 2.609719187194324e+00, 2.609719187194324e+00, 2.493361223046498e+00, 1.717237408986032e+00, 1.931414174072063e+00, 2.151777727494910e+00, 2.038848537473357e+00, 2.038848537473357e+00, 3.357982641399810e+00, 2.472835842930715e-01, 4.179176033740661e-01, 8.451738954367191e-01, 6.038751461055255e-01, 6.038751461055255e-01, 1.452540838816939e+00, -9.874257915871107e-02, -8.879004128026008e-02, 8.052867863147163e-01, -3.954755833751098e-02, -3.954755833751100e-02, -8.965595499971360e-02, -3.542456176523311e-02, -5.089473769797748e-02, -4.549943613387109e-02, -4.076556893731853e-02, -4.076556893731846e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_ol2_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_ol2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [7.219613772279995e-07, 7.219554881219484e-07, 7.219272006526822e-07, 7.220148650796675e-07, 7.219692282076247e-07, 7.219692282076247e-07, 1.669872575636200e-04, 1.669863288176101e-04, 1.669526108149992e-04, 1.669161512183813e-04, 1.669740685527201e-04, 1.669740685527201e-04, 2.323296920548079e-02, 2.330937694993198e-02, 2.525690421125305e-02, 2.463872776885193e-02, 2.476886775528018e-02, 2.476886775528018e-02, 1.347780360247861e+00, 1.288378066136560e+00, 1.465780250412215e-02, 3.079856888899637e+00, 2.175211470323364e+00, 2.175211470323365e+00, 3.194391981574880e+04, 2.739495728769568e+04, 1.631314173270638e+02, 1.658294725414844e+05, 8.357855862065520e+04, 8.357855862065520e+04, 4.998724663391820e-05, 4.996416215504991e-05, 4.998605726829686e-05, 4.996567847549744e-05, 4.997560092530851e-05, 4.997560092530851e-05, 9.347635225016209e-04, 9.147410618854360e-04, 9.497120973181268e-04, 9.316078978170254e-04, 9.166248090382308e-04, 9.166248090382308e-04, 3.479450692124798e-02, 2.769830011431489e-02, 4.389044537462957e-02, 3.956571399921717e-02, 3.318681748396001e-02, 3.318681748396001e-02, 9.202370730007249e+00, 1.341535130562095e+00, 1.162241205894088e+01, 1.016006679046725e-03, 5.694049530358974e+00, 5.694049530358974e+00, 3.610285502249901e+05, 1.774980170989975e+05, 3.970166498326201e+05, 3.819948307090704e+01, 2.270820727613299e+05, 2.270820727613299e+05, 3.773977120848829e-02, 3.566831933160818e-02, 3.583656878790649e-02, 3.624312312936823e-02, 3.599442972249991e-02, 3.599442972249991e-02, 4.724304296121572e-02, 5.873301692377012e-02, 5.121701698466126e-02, 4.509496791643802e-02, 4.806440667392163e-02, 4.806440667392163e-02, 2.396881812584329e-02, 6.652291214411243e-01, 3.841166737062120e-01, 1.668355202790955e-01, 2.535123266940311e-01, 2.535123266940311e-01, 7.526382729551319e-02, 1.860496674906691e+02, 7.342055842213526e+01, 1.863696714551181e-01, 1.850332271854832e+01, 1.850332271854831e+01, 1.136380209599418e+04, 9.293202547200613e+06, 1.004848582970943e+06, 2.234563654032717e+01, 2.866270258976286e+05, 2.866270258976293e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
