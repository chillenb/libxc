
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_absp1_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_absp1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([1.055147807396484e+02, 1.054869455380745e+02, 1.054089757711165e+02, 1.058221693128751e+02, 1.055991530644134e+02, 1.055991530644134e+02, 1.251848491782245e+01, 1.251137115600974e+01, 1.234762754634020e+01, 1.263721218076412e+01, 1.251055901017253e+01, 1.251055901017253e+01, 1.354852345309900e+00, 1.378998233276347e+00, 2.044734461199426e+00, 2.039351336334319e+00, 2.009191883696875e+00, 2.009191883696875e+00, 5.572519194665981e-01, 5.321665110116209e-01, 1.517279966959852e+00, 7.338398992268808e-01, 6.352218076291162e-01, 6.352218076291165e-01, 7.295345175374202e-01, 7.096263892947566e-01, 9.159112420754161e-01, 7.660494944089813e-01, 6.793891386690005e-01, 6.793891386689997e-01, -9.248710175655630e+00, -9.583553856937650e+00, -9.262575530587437e+00, -9.558206109751049e+00, -9.419335241826769e+00, -9.419335241826769e+00, 2.005087902764313e+01, 1.970803405212701e+01, 2.129334861701652e+01, 2.098825134330244e+01, 1.926605462314738e+01, 1.926605462314738e+01, 2.168229714320998e-01, -4.850702348986028e-01, 2.898283519938348e-01, -3.006359292709273e-01, 1.293927546477985e-01, 1.293927546477985e-01, 9.063687590753878e-01, 9.411031905635850e-01, 8.863428969275967e-01, -4.541384160784180e+00, 7.189805076604027e-01, 7.189805076604027e-01, 6.674566875147699e-01, 7.061156328246864e-01, 2.817059327301164e-01, 8.046824341851412e-01, 4.129577399978576e-01, 4.129577399978581e-01, -5.693919358869403e-01, -4.214338171767437e-01, -4.734012467744964e-01, -5.164689534215580e-01, -4.949302869877645e-01, -4.949302869877645e-01, -5.787783894446261e-01, 6.949613940025252e-01, 3.239516502834854e-01, -4.698843739991108e-02, 1.375121244700098e-01, 1.375121244700098e-01, -5.036324420446702e-01, 9.748376707280597e-01, 8.542300826198699e-01, 4.441428297040735e-01, 6.544517267612262e-01, 6.544517267612261e-01, 6.157326019319227e-01, 9.635292783753877e-01, 9.382234694625614e-01, 2.333401990412227e-01, 7.045783951513732e-01, 7.045783951513730e-01, 8.117296139582005e-01, 3.188762424322827e-01, 4.582957900050035e-01, 7.169380304796781e-01, 3.674512500826600e-01, 3.674512500826596e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_absp1_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_absp1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.377840158714283e+03, -2.377824997974589e+03, -2.377807288079030e+03, -2.378031830963216e+03, -2.377907106706905e+03, -2.377907106706905e+03, -7.275022001667686e+01, -7.274336626365231e+01, -7.258858453012128e+01, -7.288546440772051e+01, -7.274550978397103e+01, -7.274550978397103e+01, -3.595647865000172e+00, -3.614855393854065e+00, -4.163401693599518e+00, -4.193336868831411e+00, -4.155642114364626e+00, -4.155642114364626e+00, -7.066525138756374e-01, -6.861267042261051e-01, -4.564030434219463e+00, -8.199476930361989e-01, -7.437993701916658e-01, -7.437993701916658e-01, -7.297155628989924e-01, -7.098269592091810e-01, -9.220162754756326e-01, -7.661098807051757e-01, -6.794844877009539e-01, -6.794844877009528e-01, -1.257695592464911e+02, -1.254842953206927e+02, -1.257581630127094e+02, -1.255062992982285e+02, -1.256239642704548e+02, -1.256239642704548e+02, -3.912706629791939e+01, -3.906196315081899e+01, -4.016804054761576e+01, -4.010699346718731e+01, -3.859371882109421e+01, -3.859371882109421e+01, -1.931401711091340e+00, -1.538408853379898e+00, -1.757823323117099e+00, -1.285654227860364e+00, -1.899702810403384e+00, -1.899702810403384e+00, -9.478753742628798e-01, -1.090957898036576e+00, -9.218666519223568e-01, -1.381221471682885e+01, -7.761426140399501e-01, -7.761426140399501e-01, -6.674926363790211e-01, -7.061733427530639e-01, -2.817396749558005e-01, -8.207521847566021e-01, -4.130067093441192e-01, -4.130067093441193e-01, -1.161877426716827e+00, -1.290030540581921e+00, -1.245019197168618e+00, -1.207691566681388e+00, -1.226355873115970e+00, -1.226355873115970e+00, -1.059905432726702e+00, -1.902505168651396e+00, -1.648075992163969e+00, -1.398071923999868e+00, -1.520147482719715e+00, -1.520147482719715e+00, -1.720326020248926e+00, -1.214047141821427e+00, -1.199236169614939e+00, -1.046065941234956e+00, -1.109670799756795e+00, -1.109670799756794e+00, -1.639221391017099e+00, -9.691220506917142e-01, -9.486187194873883e-01, -7.927223847630205e-01, -7.306329008654275e-01, -7.306329008654271e-01, -8.120902178713576e-01, -3.188803659633438e-01, -4.583139582281758e-01, -7.399129275902087e-01, -3.674931778221005e-01, -3.674931778221003e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_absp1_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_absp1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([6.465558408889447e-06, 6.465504314368241e-06, 6.465247135945692e-06, 6.466052320295342e-06, 6.465632777057505e-06, 6.465632777057505e-06, 1.498213674029333e-03, 1.498203972832304e-03, 1.497869659939608e-03, 1.497597610737780e-03, 1.498093701227576e-03, 1.498093701227576e-03, 2.087894145121824e-01, 2.094815290984875e-01, 2.271002921854555e-01, 2.215377010814852e-01, 2.227053156391256e-01, 2.227053156391256e-01, 1.212783639246232e+01, 1.159308837356066e+01, 1.316911190273232e-01, 2.771712142089699e+01, 1.957499616309466e+01, 1.957499616309467e+01, 2.874952765754121e+05, 2.465546137483149e+05, 1.468181512983260e+03, 1.492465251230529e+06, 7.522070256195640e+05, 7.522070256195640e+05, 4.463987932311861e-04, 4.461530243974384e-04, 4.463865483604211e-04, 4.461695925050767e-04, 4.462746898771731e-04, 4.462746898771731e-04, 8.405710951977129e-03, 8.225420308312626e-03, 8.540671341115708e-03, 8.377662191483195e-03, 8.242192632024159e-03, 8.242192632024159e-03, 3.119433029115474e-01, 2.433121166868861e-01, 3.937539884428952e-01, 3.505402349909846e-01, 2.973293717959445e-01, 2.973293717959445e-01, 8.282011699658827e+01, 1.207275069070744e+01, 1.046004417152880e+02, 8.906969473199959e-03, 5.124476217261497e+01, 5.124476217261497e+01, 3.249256950004610e+06, 1.597482152034641e+06, 3.573149841128374e+06, 3.437938582102904e+02, 2.043738650702208e+06, 2.043738650702208e+06, 3.074431719955891e-01, 3.127951632558527e-01, 3.108978161438085e-01, 3.093465472861635e-01, 3.101217331306696e-01, 3.101217331306696e-01, 3.338635972182413e-01, 5.277855463435615e-01, 4.596408969843099e-01, 4.031650116453307e-01, 4.307748394546119e-01, 4.307748394546119e-01, 2.111649385648006e-01, 5.986104049931646e+00, 3.455983667980389e+00, 1.499685834607408e+00, 2.280243059795127e+00, 2.280243059795128e+00, 6.763744328316319e-01, 1.674445854271037e+03, 6.607838326576669e+02, 1.673974624492028e+00, 1.665281126261038e+02, 1.665281126261038e+02, 1.022742173599572e+05, 8.363882291868500e+07, 9.043637243187241e+06, 2.011089761174724e+02, 2.579643228134502e+06, 2.579643228134509e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
