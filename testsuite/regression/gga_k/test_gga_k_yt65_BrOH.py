
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_yt65_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_yt65", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.259679979952510e+03, 2.259686001458524e+03, 2.259728099848588e+03, 2.259629193275541e+03, 2.259683028139399e+03, 2.259683028139399e+03, 6.183929933087204e+01, 6.183840465942512e+01, 6.181893549898889e+01, 6.187873844806318e+01, 6.183936602355823e+01, 6.183936602355823e+01, 2.483332915999153e+00, 2.483714822835628e+00, 2.514824635670495e+00, 2.544740399428592e+00, 2.483443203031789e+00, 2.483443203031789e+00, 2.508502561431301e-01, 2.510282013177805e-01, 3.373034976783702e+00, 2.152613814720352e-01, 2.508032256772545e-01, 2.508032256772545e-01, 1.006620387480615e-01, 1.005167242233159e-01, 1.539987531582849e-01, 1.197034317192217e-01, 9.862029586746383e-02, 9.862029586746383e-02, 1.310612694884183e+02, 1.310436740982776e+02, 1.310597659241222e+02, 1.310460790328574e+02, 1.310518120126162e+02, 1.310518120126162e+02, 2.280157326198714e+01, 2.299935864202768e+01, 2.284774472836644e+01, 2.300056127423170e+01, 2.287929436150960e+01, 2.287929436150960e+01, 1.692618584954368e+00, 1.851377742302226e+00, 1.534482419562911e+00, 1.560017579176565e+00, 1.801950924648281e+00, 1.801950924648281e+00, 2.040436273122137e-01, 3.335586043628912e-01, 1.904452001172494e-01, 1.713185991106105e+01, 1.952291930831463e-01, 1.952291930831463e-01, 1.162206340792423e-01, 1.160944049900122e-01, 6.862249651010571e-02, 1.544597579303602e-01, 9.552405732219933e-02, 9.552405732219936e-02, 1.638588141921408e+00, 1.647455639293938e+00, 1.644281176041928e+00, 1.641811085295491e+00, 1.643043572941377e+00, 1.643043572941377e+00, 1.531013867188866e+00, 1.361866477742006e+00, 1.404712167732002e+00, 1.448212585737180e+00, 1.424702427892786e+00, 1.424702427892786e+00, 2.040400387255814e+00, 4.344566113176203e-01, 5.180150614083442e-01, 6.852523563291750e-01, 5.878443872963020e-01, 5.878443872963018e-01, 1.121358404975218e+00, 1.677827141053399e-01, 1.670020588717773e-01, 5.785855114510744e-01, 1.565550841260542e-01, 1.565550841260541e-01, 1.161135000495487e-01, 8.853975424954780e-02, 9.541256889049859e-02, 1.412719385964542e-01, 7.904735991748581e-02, 7.904735991748589e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_yt65_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_yt65", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.255389760946446e+03, 3.255410513232684e+03, 3.255507577545992e+03, 3.255167662023326e+03, 3.255400667519681e+03, 3.255400667519681e+03, 8.434073565221786e+01, 8.434224389977869e+01, 8.439061457135665e+01, 8.434298550694731e+01, 8.434222996496530e+01, 8.434222996496530e+01, 2.887921286891863e+00, 2.876517867326846e+00, 2.563705377495265e+00, 2.614070683174668e+00, 2.883789849146368e+00, 2.883789849146368e+00, 1.511323890536260e-01, 1.617305665978130e-01, 4.342207364565228e+00, -3.969614416133641e-03, 1.543968727225873e-01, 1.543968727225873e-01, -9.940813689624856e-02, -9.914099480394437e-02, -1.312707267756971e-01, -1.194148544607823e-01, -9.727309001961706e-02, -9.727309001961706e-02, 1.963672031909732e+02, 1.965012760764088e+02, 1.963809951064708e+02, 1.964852443090661e+02, 1.964358596788071e+02, 1.964358596788071e+02, 2.339636773580446e+01, 2.385187590895133e+01, 2.308740491237617e+01, 2.344262390460925e+01, 2.410334077998245e+01, 2.410334077998245e+01, 2.378627279413474e+00, 2.952443313577340e+00, 2.131315490281974e+00, 2.428023908326709e+00, 2.588155906907373e+00, 2.588155906907373e+00, -8.998890064724008e-02, 7.420466934503428e-02, -7.929546845284559e-02, 2.731158229079128e+01, -4.272438854766078e-02, -4.272438854766078e-02, -1.159520780223170e-01, -1.157436504836965e-01, -6.842545740311798e-02, -1.102928273771410e-01, -9.523285969519288e-02, -9.523285969519288e-02, 2.696328128708485e+00, 2.641299162874549e+00, 2.660993164176382e+00, 2.676229647889643e+00, 2.668605208400095e+00, 2.668605208400095e+00, 2.530118802975906e+00, 1.694333178686025e+00, 1.929828346533597e+00, 2.155291742071077e+00, 2.040448463134923e+00, 2.040448463134923e+00, 3.240680890040853e+00, 2.105935636438202e-01, 3.918573031048433e-01, 8.018547883113064e-01, 5.754704052328172e-01, 5.754704052328170e-01, 1.364832326139017e+00, -1.482865407070326e-01, -1.312717047099253e-01, 7.489874540103655e-01, -8.141702874985431e-02, -8.141702874985422e-02, -1.143911837134973e-01, -8.851346275248076e-02, -9.531769297474053e-02, -7.288453914647512e-02, -7.883703513869451e-02, -7.883703513869450e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_yt65_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_yt65", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.293211256646913e-06, 1.293201839551289e-06, 1.293152893956048e-06, 1.293307244705387e-06, 1.293206348351103e-06, 1.293206348351103e-06, 2.996842348077286e-04, 2.996823479756097e-04, 2.995934942241453e-04, 2.995560804189471e-04, 2.996794345372137e-04, 2.996794345372137e-04, 4.254832123842303e-02, 4.267961810550698e-02, 4.627953153749498e-02, 4.520344697180687e-02, 4.259614623107679e-02, 4.259614623107679e-02, 2.078188961703883e+00, 1.997337831988648e+00, 2.471562692755314e-02, 5.453459930639734e+00, 2.053485667676880e+00, 2.053485667676880e+00, 1.192890757314437e+04, 1.037997846278123e+04, 1.545800352526297e+02, 1.080445424049587e+05, 1.071137071555316e+04, 1.071137071555316e+04, 8.939666671900170e-05, 8.934898574853759e-05, 8.939163438585502e-05, 8.935456180919202e-05, 8.937242784391469e-05, 8.937242784391469e-05, 1.686794046370219e-03, 1.651636342232477e-03, 1.701289752227166e-03, 1.673450974572460e-03, 1.644712267779392e-03, 1.644712267779392e-03, 6.447702543692181e-02, 5.030553327155427e-02, 7.546458887420252e-02, 6.650533536977932e-02, 5.758155065510715e-02, 5.758155065510715e-02, 1.375073957931878e+01, 2.034153996621932e+00, 1.429332804926905e+01, 1.787658082923960e-03, 8.893458857595547e+00, 8.893458857595547e+00, 1.203492980726653e+05, 8.062896783890593e+04, 1.914993673093744e+05, 5.706241680889286e+01, 1.065894550744518e+05, 1.065894550744518e+05, 5.868470409590170e-02, 5.963471708501795e-02, 5.929181476686479e-02, 5.902906266540987e-02, 5.916037579523410e-02, 5.916037579523410e-02, 6.471802019739421e-02, 9.913417698631057e-02, 8.698452408043739e-02, 7.742984988588653e-02, 8.211315950671641e-02, 8.211315950671640e-02, 4.364271017705409e-02, 1.022364458416950e+00, 6.102745759448734e-01, 2.920670734817259e-01, 4.221337865854612e-01, 4.221337865854614e-01, 1.351121250861785e-01, 1.945682268485908e+02, 7.842237809555257e+01, 3.462648353914318e-01, 2.571615665646048e+01, 2.571615665646047e+01, 7.410143323469140e+03, 3.928918456298220e+06, 5.731417139120435e+05, 2.961637192858655e+01, 1.736442185101283e+05, 1.736442185101291e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
