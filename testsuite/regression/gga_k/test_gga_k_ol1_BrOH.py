
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_ol1_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_ol1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.190459552024140e+03, 2.190467231361767e+03, 2.190513594957631e+03, 2.190387602639602e+03, 2.190463500665687e+03, 2.190463500665687e+03, 5.921426129571973e+01, 5.921382785194499e+01, 5.920680633771927e+01, 5.924403054722303e+01, 5.921454285113045e+01, 5.921454285113045e+01, 2.299401148432784e+00, 2.297868984351099e+00, 2.270790267359602e+00, 2.301000538295964e+00, 2.298825343759775e+00, 2.298825343759775e+00, 2.094624585442331e-01, 2.113373808697366e-01, 3.189554424135883e+00, 1.574282861752613e-01, 2.099653960371614e-01, 2.099653960371614e-01, 5.630577796528852e-02, 5.625340932802651e-02, 9.023263398523709e-02, 6.664090775955825e-02, 5.519149123272857e-02, 5.519149123272857e-02, 1.281887140701337e+02, 1.281955069508950e+02, 1.281896444355214e+02, 1.281949222532285e+02, 1.281918569803981e+02, 1.281918569803981e+02, 2.061334557167247e+01, 2.083277255576342e+01, 2.059771810307169e+01, 2.076782042214777e+01, 2.078443180100697e+01, 2.078443180100697e+01, 1.631601752976700e+00, 1.836759501369605e+00, 1.475300153224416e+00, 1.539198149765579e+00, 1.745559989491235e+00, 1.745559989491235e+00, 1.344653302714916e-01, 2.574705970332258e-01, 1.263176157546375e-01, 1.699532787838267e+01, 1.361232735765145e-01, 1.361232735765145e-01, 6.469818963851749e-02, 6.465403801098547e-02, 3.821331801614514e-02, 9.437974053009911e-02, 5.319901831255269e-02, 5.319901831255270e-02, 1.636485366883173e+00, 1.636388045525511e+00, 1.636578108718054e+00, 1.636618825580405e+00, 1.636608487254699e+00, 1.636608487254699e+00, 1.530223325187164e+00, 1.278525417757866e+00, 1.347250380858287e+00, 1.414290281280533e+00, 1.379221470355777e+00, 1.379221470355777e+00, 2.022445993040476e+00, 3.543267423287638e-01, 4.456380462527450e-01, 6.352871732360617e-01, 5.269643197924609e-01, 5.269643197924608e-01, 1.047950184143224e+00, 9.732749469067153e-02, 9.988033465353417e-02, 5.477648312792183e-01, 1.010178187752055e-01, 1.010178187752054e-01, 6.501276875146832e-02, 4.921674192044709e-02, 5.306934323838949e-02, 9.125830584327260e-02, 4.401331672229289e-02, 4.401331672229293e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_ol1_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_ol1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.345814849186857e+03, 3.345833772651881e+03, 3.345926280849374e+03, 3.345616241463770e+03, 3.345824761186811e+03, 3.345824761186811e+03, 8.762678146996015e+01, 8.762777693415860e+01, 8.766233698285008e+01, 8.763991514885052e+01, 8.762804003511124e+01, 8.762804003511124e+01, 3.104603343578642e+00, 3.095237440587382e+00, 2.844064813678054e+00, 2.894415910768899e+00, 3.101202152923833e+00, 3.101202152923833e+00, 1.966589834506435e-01, 2.055335750999808e-01, 4.565384424069498e+00, 5.736126127076221e-02, 1.993639302661497e-01, 1.993639302661497e-01, -5.482062349576155e-02, -5.463568454471396e-02, -6.631825197274893e-02, -6.623112378226607e-02, -5.360708049814576e-02, -5.360708049814576e-02, 2.003137393751874e+02, 2.004196308985525e+02, 2.003247208548037e+02, 2.004070559186038e+02, 2.003678362255981e+02, 2.003678362255981e+02, 2.591279280959011e+01, 2.634754465673616e+01, 2.566898928947820e+01, 2.600763137297614e+01, 2.652256803519273e+01, 2.652256803519273e+01, 2.456600267756579e+00, 2.977167512583437e+00, 2.206289225722375e+00, 2.459307518589914e+00, 2.661602402782379e+00, 2.661602402782379e+00, -1.761241903097794e-02, 1.558922975521349e-01, -1.251485539262122e-02, 2.754196440456007e+01, 1.937505539892226e-02, 1.937505539892226e-02, -6.431441843121324e-02, -6.417170048402761e-02, -3.794045358555796e-02, -4.860266489698919e-02, -5.279906783199542e-02, -5.279906783199549e-02, 2.703327672101784e+00, 2.660823350718113e+00, 2.676086688970683e+00, 2.687859374859320e+00, 2.681971456838357e+00, 2.681971456838357e+00, 2.534648839124718e+00, 1.794429332961827e+00, 2.002087439728227e+00, 2.201405618546467e+00, 2.099522718034376e+00, 2.099522718034376e+00, 3.270248630202889e+00, 2.979948936591376e-01, 4.725096608475837e-01, 8.608069433330060e-01, 6.450148805673190e-01, 6.450148805673189e-01, 1.452384774488281e+00, -7.667730327875193e-02, -6.262150845017957e-02, 7.865631676733970e-01, -2.385341298681620e-02, -2.385341298681609e-02, -6.299949774706223e-02, -4.915897356550082e-02, -5.291240349753881e-02, -2.103624558852111e-02, -4.371890842572085e-02, -4.371890842572087e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_ol1_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_ol1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [7.721412557582639e-07, 7.721363266652220e-07, 7.721091938885866e-07, 7.721900155301541e-07, 7.721386993115765e-07, 7.721386993115765e-07, 1.770704734073788e-04, 1.770702281607787e-04, 1.770416795401062e-04, 1.769783776449030e-04, 1.770680843698252e-04, 1.770680843698252e-04, 2.475187046062138e-02, 2.482177056307705e-02, 2.674368192017807e-02, 2.612994229899663e-02, 2.477735672924520e-02, 2.477735672924520e-02, 1.186769530458069e+00, 1.141634607618245e+00, 1.449769600241024e-02, 3.082286055335424e+00, 1.172991671368731e+00, 1.172991671368731e+00, 6.637495784787102e+03, 5.776074273765311e+03, 8.635052280886431e+01, 6.006580843231110e+04, 5.960472512506921e+03, 5.960472512506921e+03, 5.401542344160744e-05, 5.400357761158703e-05, 5.401407176654253e-05, 5.400486151442568e-05, 5.400951471293999e-05, 5.400951471293999e-05, 9.750094707662127e-04, 9.551109874757088e-04, 9.827856681606990e-04, 9.670334999935221e-04, 9.517569492064811e-04, 9.517569492064811e-04, 3.829180249192548e-02, 3.176462110302972e-02, 4.472116290763655e-02, 4.099335067889010e-02, 3.435567655680971e-02, 3.435567655680971e-02, 7.728768591788674e+00, 1.153730702990038e+00, 8.036326951123455e+00, 1.128277880369145e-03, 5.013134098383725e+00, 5.013134098383725e+00, 6.690550048976665e+04, 4.482817964218389e+04, 1.064679728240985e+05, 3.195119944083606e+01, 5.926192250839720e+04, 5.926192250839720e+04, 4.089548270862194e-02, 3.795813585017436e-02, 3.845346846760574e-02, 3.911434951705994e-02, 3.874145721390970e-02, 3.874145721390970e-02, 4.717382104851597e-02, 5.796101245713982e-02, 5.145372487864496e-02, 4.666985945687770e-02, 4.895974791357634e-02, 4.895974791357634e-02, 2.741395576307162e-02, 5.824575125108334e-01, 3.497523940861892e-01, 1.699742062446808e-01, 2.435660335710395e-01, 2.435660335710396e-01, 7.885333098700989e-02, 1.086181670889499e+02, 4.386062438814523e+01, 2.032323092838054e-01, 1.443896966604905e+01, 1.443896966604904e+01, 4.123748304388827e+03, 2.183256324224417e+06, 3.185519215731192e+05, 1.662976227889607e+01, 9.653834466481996e+04, 9.653834466482038e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
