
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_lkt_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_lkt", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.620117848504255e+03, 2.620114095989790e+03, 2.620131388836481e+03, 2.620186528388694e+03, 2.620152800476459e+03, 2.620152800476459e+03, 7.593832485366249e+01, 7.593372635422639e+01, 7.583126215131723e+01, 7.603841629504900e+01, 7.593647241752252e+01, 7.593647241752252e+01, 3.472153107318192e+00, 3.485229977395242e+00, 3.884954812815860e+00, 3.917751080749222e+00, 3.885435595707955e+00, 3.885435595707955e+00, 6.448853452465302e-01, 6.248470069415770e-01, 4.475886414787123e+00, 7.728461426127780e-01, 6.900621181455547e-01, 6.900621181455550e-01, 7.296024095480097e-01, 7.097016030126656e-01, 9.182006561611005e-01, 7.660721392700542e-01, 6.794248945559829e-01, 6.794248945559820e-01, 1.459157086299500e+02, 1.457665934711563e+02, 1.459099959819594e+02, 1.457783320631044e+02, 1.458394293660090e+02, 1.458394293660090e+02, 3.631761266278020e+01, 3.632677739274997e+01, 3.713268354843841e+01, 3.713302141117736e+01, 3.593879523380136e+01, 3.593879523380136e+01, 2.067149268336227e+00, 1.984921459466146e+00, 1.840321236691493e+00, 1.600731284354209e+00, 2.071932237346490e+00, 2.071932237346490e+00, 9.224560084670200e-01, 1.015140171928592e+00, 8.999833372072837e-01, 1.792600233347889e+01, 7.427459805337118e-01, 7.427459805337118e-01, 6.674701683388641e-01, 7.061372740478279e-01, 2.817185860647479e-01, 8.107248209043942e-01, 4.129761035027057e-01, 4.129761035027062e-01, 1.615998145388836e+00, 1.672714455154159e+00, 1.652234589818824e+00, 1.635689519413528e+00, 1.643907644916853e+00, 1.643907644916853e+00, 1.509315927599922e+00, 1.844365091524957e+00, 1.703125457201770e+00, 1.593805752987118e+00, 1.642157725745211e+00, 1.642157725745211e+00, 2.197917811351059e+00, 1.110983324645965e+00, 1.086379931012359e+00, 9.946897647106043e-01, 1.014227211311369e+00, 1.014227211311369e+00, 1.583549963264840e+00, 9.656265776454257e-01, 9.421225069205057e-01, 7.883723251997167e-01, 7.145375581872223e-01, 7.145375581872221e-01, 8.118648404256343e-01, 3.188777887564307e-01, 4.583026030886932e-01, 7.256646427740427e-01, 3.674669729849502e-01, 3.674669729849497e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_lkt_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_lkt", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([2.716707683657440e+03, 2.716750099506983e+03, 2.716899611533531e+03, 2.716269335266344e+03, 2.716605148282395e+03, 2.716605148282395e+03, 6.222298891458723e+01, 6.223077702397055e+01, 6.241365698090636e+01, 6.211904637184295e+01, 6.223532679618209e+01, 6.223532679618209e+01, 1.320125398036563e+00, 1.285431215536866e+00, 3.350257123736631e-01, 3.885003602569651e-01, 4.150544019152215e-01, 4.150544019152215e-01, -4.729408075179794e-01, -4.384358385882586e-01, 2.171655003633786e+00, -7.268493669947833e-01, -6.033145742026161e-01, -6.033145742026169e-01, -7.296024095480094e-01, -7.097016030126655e-01, -9.182001269235480e-01, -7.660721392700539e-01, -6.794248945559829e-01, -6.794248945559819e-01, 1.756621034599884e+02, 1.760153817553065e+02, 1.756772625167818e+02, 1.759891712296106e+02, 1.758419189043820e+02, 1.758419189043820e+02, 1.020619811769620e+00, 1.808851110472339e+00, -7.658914638547882e-01, -6.646256039666405e-02, 2.311638624544425e+00, 2.311638624544425e+00, 1.914849569722799e+00, 2.905803176374739e+00, 1.532517453244197e+00, 2.220344773641387e+00, 2.070846300185644e+00, 2.070846300185644e+00, -9.175996389456315e-01, -9.033457686005827e-01, -8.968732280019228e-01, 2.645406638011456e+01, -7.247456161101629e-01, -7.247456161101629e-01, -6.674701683388641e-01, -7.061372740478279e-01, -2.817185860647480e-01, -8.105193055870922e-01, -4.129761035027057e-01, -4.129761035027062e-01, 2.583895188233219e+00, 2.465427698315219e+00, 2.508910719072217e+00, 2.543406564473065e+00, 2.526325467580755e+00, 2.526325467580755e+00, 2.467592638110847e+00, 7.524515956008558e-01, 1.316354624522808e+00, 1.833920945982823e+00, 1.581472109375596e+00, 1.581472109375596e+00, 3.173005671584796e+00, -8.524329782398556e-01, -5.815578011811268e-01, 2.598522211574413e-01, -1.912808208412470e-01, -1.912808208412462e-01, 6.065971925213426e-01, -9.656263734352293e-01, -9.421093551346369e-01, 4.501644843722739e-01, -7.126436503437753e-01, -7.126436503437750e-01, -8.118648404256343e-01, -3.188777887564305e-01, -4.583026030886928e-01, -7.244905288127053e-01, -3.674669729849501e-01, -3.674669729849497e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_lkt_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_lkt", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([4.177931601640988e-06, 4.177874123777465e-06, 4.177643943155466e-06, 4.178498604308082e-06, 4.178047154983744e-06, 4.178047154983744e-06, 1.029718019485309e-03, 1.029669846349435e-03, 1.028480009435555e-03, 1.029961037823703e-03, 1.029585802537021e-03, 1.029585802537021e-03, 1.593204676912805e-01, 1.602426813207891e-01, 1.841657627557482e-01, 1.791933577541563e-01, 1.798628297506400e-01, 1.798628297506400e-01, 1.147779733570082e+01, 1.090605843590838e+01, 9.818409617519104e-02, 2.733605882070383e+01, 1.904194579286125e+01, 1.904194579286126e+01, 2.874952765754121e+05, 2.465546137483149e+05, 1.468181238113583e+03, 1.492465251230529e+06, 7.522070256195636e+05, 7.522070256195636e+05, 2.731695998423918e-04, 2.726699320319797e-04, 2.731476816575970e-04, 2.727065561816912e-04, 2.729157090967058e-04, 2.729157090967058e-04, 6.895194114877724e-03, 6.718610549233745e-03, 7.072775242566370e-03, 6.912432239948661e-03, 6.713044444177319e-03, 6.713044444177319e-03, 2.082184829722097e-01, 1.341290222115867e-01, 2.696667053060162e-01, 1.999517624570581e-01, 1.943030624903773e-01, 1.943030624903773e-01, 8.270343555810311e+01, 1.178123405526276e+01, 1.045019342567347e+02, 4.882885403203299e-03, 5.093881928863833e+01, 5.093881928863833e+01, 3.249256950004610e+06, 1.597482152034641e+06, 3.573149841128374e+06, 3.437680588944613e+02, 2.043738650702208e+06, 2.043738650702208e+06, 1.580390020643782e-01, 1.716260193383200e-01, 1.669060426771106e-01, 1.629552526091759e-01, 1.649364604515371e-01, 1.649364604515371e-01, 1.679708554884435e-01, 4.003068905077407e-01, 3.197720455453156e-01, 2.512368177724396e-01, 2.845322213456100e-01, 2.845322213456100e-01, 1.175009052722051e-01, 5.702053309925384e+00, 3.151933403385973e+00, 1.173656275180878e+00, 1.949915861101544e+00, 1.949915861101544e+00, 5.157996853968281e-01, 1.674445738215488e+03, 6.607809477331239e+02, 1.223708296382786e+00, 1.664065430478968e+02, 1.664065430478968e+02, 1.022742173599572e+05, 8.363882291868499e+07, 9.043637243187241e+06, 2.010177099187291e+02, 2.579643228134502e+06, 2.579643228134509e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
