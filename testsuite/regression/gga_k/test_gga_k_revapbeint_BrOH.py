
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_revapbeint_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_revapbeint", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.179323964730595e+03, 2.179331638094680e+03, 2.179377865700204e+03, 2.179251973474869e+03, 2.179327911135787e+03, 2.179327911135787e+03, 5.890111928781334e+01, 5.890069622826626e+01, 5.889393296301643e+01, 5.893057772216914e+01, 5.890140351668200e+01, 5.890140351668200e+01, 2.283247084815851e+00, 2.281538379160624e+00, 2.246535838688298e+00, 2.277044934487398e+00, 2.282608584344363e+00, 2.282608584344363e+00, 2.006761189684681e-01, 2.035145349947446e-01, 3.171578222762235e+00, 1.276901843571673e-01, 2.014940000546467e-01, 2.014940000546467e-01, 1.050895353772866e-03, 1.152488075589639e-03, 1.815199100606250e-02, 2.427346079307346e-04, 1.128603649588936e-03, 1.128603649588936e-03, 1.275656347388837e+02, 1.275732488345715e+02, 1.275666453726227e+02, 1.275725616671973e+02, 1.275692016015881e+02, 1.275692016015881e+02, 2.039792639682937e+01, 2.062269748034735e+01, 2.037110583831969e+01, 2.054583937007341e+01, 2.058557331630568e+01, 2.058557331630568e+01, 1.623157433190511e+00, 1.829798201386756e+00, 1.467603181410692e+00, 1.532449512351433e+00, 1.736665087131569e+00, 1.736665087131569e+00, 7.909821114409936e-02, 2.284750874741533e-01, 7.645237600439124e-02, 1.693073657043983e+01, 9.829766944491491e-02, 9.829766944491491e-02, 2.259020803180365e-04, 2.949695244993574e-04, 1.657104221405516e-04, 3.360889682552334e-02, 2.448823400776539e-04, 2.448823400776539e-04, 1.632867168288648e+00, 1.630483147072094e+00, 1.631299800606711e+00, 1.631947304030472e+00, 1.631617634358171e+00, 1.631617634358171e+00, 1.527441697598045e+00, 1.270885704460214e+00, 1.340165697864117e+00, 1.407344105998602e+00, 1.372177977390524e+00, 1.372177977390524e+00, 2.014530933807078e+00, 3.335815808080533e-01, 4.340524580313621e-01, 6.308997463687505e-01, 5.205189855441607e-01, 5.205189855441605e-01, 1.041391419972473e+00, 1.574476236314303e-02, 2.787868526973908e-02, 5.447021207112406e-01, 5.350959097428996e-02, 5.350959097428996e-02, 1.442238002609508e-03, 2.213178075791308e-05, 7.984498715727720e-05, 4.863421614037464e-02, 1.768971554041489e-04, 1.768971554041483e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_revapbeint_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_revapbeint", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.332218529718691e+03, 3.332237481881168e+03, 3.332329932674954e+03, 3.332019428656829e+03, 3.332228458401163e+03, 3.332228458401163e+03, 8.729468329993509e+01, 8.729562025651792e+01, 8.732856545799775e+01, 8.730881034627970e+01, 8.729590893685668e+01, 8.729590893685668e+01, 3.124971934643654e+00, 3.116973125720189e+00, 2.918089749795148e+00, 2.965745586118536e+00, 3.122058967272017e+00, 3.122058967272017e+00, 2.326042051613635e-01, 2.378458100351526e-01, 4.557450132606829e+00, 1.456562326602777e-01, 2.341372504551254e-01, 2.341372504551254e-01, 1.738969620965875e-03, 1.905734039218814e-03, 2.787049157297575e-02, 4.039948838808658e-04, 1.866267061466092e-03, 1.866267061466092e-03, 1.996312012658531e+02, 1.997406999134160e+02, 1.996425401015515e+02, 1.997276797265938e+02, 1.996871566013025e+02, 1.996871566013025e+02, 2.655664098494445e+01, 2.695249508163591e+01, 2.637911580129526e+01, 2.668557200865521e+01, 2.706056011933904e+01, 2.706056011933904e+01, 2.446458420042591e+00, 2.972738586515975e+00, 2.197348756131696e+00, 2.453653300539952e+00, 2.650723832050845e+00, 2.650723832050845e+00, 1.007103815468475e-01, 2.557677367813936e-01, 9.647685089940883e-02, 2.750068872005938e+01, 1.167485972440416e-01, 1.167485972440416e-01, 3.760014034279690e-04, 4.907590500354916e-04, 2.757265348997911e-04, 4.809495634312311e-02, 4.074195237367402e-04, 4.074195237367402e-04, 2.701913588574138e+00, 2.657332213410213e+00, 2.673374086227545e+00, 2.685723055732668e+00, 2.679550209753591e+00, 2.679550209753591e+00, 2.533632337307358e+00, 1.795108311892962e+00, 1.994247229329189e+00, 2.193564494196305e+00, 2.090902634708598e+00, 2.090902634708598e+00, 3.264940767374350e+00, 3.794721411854411e-01, 5.206019370374322e-01, 8.658705370302072e-01, 6.668693689401558e-01, 6.668693689401557e-01, 1.455431474962070e+00, 2.458601514823642e-02, 4.134855671059409e-02, 7.849753295821126e-01, 7.024036671703028e-02, 7.024036671703028e-02, 2.383291222152320e-03, 3.687997356046542e-05, 1.329985616877091e-04, 6.373426606866671e-02, 2.943759763450559e-04, 2.943759763450551e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_revapbeint_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_revapbeint", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([7.595748745499336e-07, 7.595696754203578e-07, 7.595419278268679e-07, 7.596271551063362e-07, 7.595721707688280e-07, 7.595721707688280e-07, 1.740326983300050e-04, 1.740331991159480e-04, 1.740252586209426e-04, 1.739280639061030e-04, 1.740307318981047e-04, 1.740307318981047e-04, 2.314335748378084e-02, 2.316753507746332e-02, 2.348955266527267e-02, 2.303920133965075e-02, 2.315245856321893e-02, 2.315245856321893e-02, 7.929384278664185e-01, 7.887026996111531e-01, 1.407223292825097e-02, 1.009703483562237e+00, 7.921251070489669e-01, 7.921251070489669e-01, 5.591075862690049e-01, 5.869603629234055e-01, 9.494816057797756e-01, 1.906651424990689e-01, 6.034053246305981e-01, 6.034053246305981e-01, 5.257359036441291e-05, 5.254263350719253e-05, 5.257034799827448e-05, 5.254628007628978e-05, 5.255785447332581e-05, 5.255785447332581e-05, 8.591924929344823e-04, 8.461748570987916e-04, 8.593421500668620e-04, 8.492745523320900e-04, 8.498274316715186e-04, 8.498274316715186e-04, 3.771874022859764e-02, 2.905522975501918e-02, 4.403269896858392e-02, 3.883063750726198e-02, 3.380825536599926e-02, 3.380825536599926e-02, 9.950262831320911e-01, 5.279309084573413e-01, 1.114910329527901e+00, 1.032702527869252e-03, 1.137474504321497e+00, 1.137474504321497e+00, 1.951313110158314e-01, 2.234061342492066e-01, 4.792840499861056e-01, 1.228978419545857e+00, 3.006618545759593e-01, 3.006618545759592e-01, 3.307768652248448e-02, 3.433281445036479e-02, 3.391413485406153e-02, 3.356751548676139e-02, 3.374352593739150e-02, 3.374352593739150e-02, 3.631433393474086e-02, 5.565050003346070e-02, 5.061475049588825e-02, 4.555039471314153e-02, 4.819305866212882e-02, 4.819305866212879e-02, 2.526330528850800e-02, 3.514004799665543e-01, 2.625129924229548e-01, 1.593502530279561e-01, 2.095289659190424e-01, 2.095289659190426e-01, 7.510685217319871e-02, 7.526098560745101e-01, 9.794780712106668e-01, 1.975770396277162e-01, 1.422911958448272e+00, 1.422911958448274e+00, 4.918726039347190e-01, 1.053077665116230e-01, 1.722023727401671e-01, 1.663880903709350e+00, 3.732223731073614e-01, 3.732223731073601e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
