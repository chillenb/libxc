
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_lieb_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_lieb", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.246290804497977e+03, 2.246298049523200e+03, 2.246342603476643e+03, 2.246234559427814e+03, 2.246289416650806e+03, 2.246289416650806e+03, 6.134898898741086e+01, 6.134792135923605e+01, 6.132626154895654e+01, 6.138724686093890e+01, 6.135067716489451e+01, 6.135067716489451e+01, 2.447754993484912e+00, 2.447450354368738e+00, 2.456498578846954e+00, 2.489874439414806e+00, 2.502835796611973e+00, 2.502835796611973e+00, 2.502568463036325e-01, 2.501390375998935e-01, 3.272259858211658e+00, 2.208327430693494e-01, 2.548643233331470e-01, 2.548643233331470e-01, 1.358060745607892e-01, 1.321239282969957e-01, 1.762797895504197e-01, 1.424817467261712e-01, 1.277020274135244e-01, 1.277020274135242e-01, 1.305863573804311e+02, 1.305726910388536e+02, 1.305861995281654e+02, 1.305741264161087e+02, 1.305791641798867e+02, 1.305791641798867e+02, 2.242059305773993e+01, 2.262901883366945e+01, 2.245426718240331e+01, 2.263669557464603e+01, 2.252184095926908e+01, 2.252184095926908e+01, 1.720469570139174e+00, 1.892655563139753e+00, 1.494565746282777e+00, 1.500505895731831e+00, 1.764086584409177e+00, 1.764086584409177e+00, 2.091815720611021e-01, 3.218083976562258e-01, 1.996998880942810e-01, 1.714059663734486e+01, 1.903837236107079e-01, 1.903837236107079e-01, 1.241804983650938e-01, 1.314035384942164e-01, 5.241428899011476e-02, 1.653577508955736e-01, 7.697718444471618e-02, 7.697718444471627e-02, 1.590663013475716e+00, 1.598762889893164e+00, 1.595918118538208e+00, 1.593535750127646e+00, 1.594723587759639e+00, 1.594723587759639e+00, 1.498184143266524e+00, 1.312510226741539e+00, 1.357778849977651e+00, 1.407314512840855e+00, 1.380445731579572e+00, 1.380445731579572e+00, 2.085679785068613e+00, 4.156444149874247e-01, 4.969289832551674e-01, 6.724237311802432e-01, 5.677541504037181e-01, 5.677541504037181e-01, 1.117482690108878e+00, 1.846099548610904e-01, 1.846412565358535e-01, 5.917187003132416e-01, 1.568608331286691e-01, 1.568608331286691e-01, 1.512936266342239e-01, 5.960517781150644e-02, 8.522521571301006e-02, 1.558170134581360e-01, 6.902380613590332e-02, 6.902380613590323e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_lieb_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_lieb", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.269066020027540e+03, 3.269058089307521e+03, 3.269093266476362e+03, 3.269077879329578e+03, 3.269176413290130e+03, 3.269198148242810e+03, 3.268868814697291e+03, 3.268806055123883e+03, 3.269082473396402e+03, 3.268959827383891e+03, 3.269082473396402e+03, 3.268959827383891e+03, 8.484145790216697e+01, 8.484762790399971e+01, 8.484305121894543e+01, 8.484943206567900e+01, 8.488381778048941e+01, 8.489548893446575e+01, 8.484051003987514e+01, 8.485223988349942e+01, 8.480974156204546e+01, 8.489158299424520e+01, 8.480974156204546e+01, 8.489158299424520e+01, 2.968126017958247e+00, 3.013953003112813e+00, 2.951222343885726e+00, 3.007462878892812e+00, 2.725510709896174e+00, 2.646075171896785e+00, 2.725271546631298e+00, 2.751197076243566e+00, 3.092957589501276e+00, 2.298767276156539e+00, 3.092957589501276e+00, 2.298767276156539e+00, 1.020802574464455e-01, 1.227852352519919e-01, 1.117523940164468e-01, 1.355570286870493e-01, 3.932247761927020e+00, 4.314519720431298e+00, -1.296576466377007e-02, -1.065019255725549e-02, 1.148206541114831e-01, -7.766414424527378e-02, 1.148206541114829e-01, -7.766414424527365e-02, -1.350220707762632e-01, -1.356501255671675e-01, -1.314861235483314e-01, -1.317547319387495e-01, -1.625779614128726e-01, -1.604125859050615e-01, -1.413767851986536e-01, -1.433430158061918e-01, -1.352239499950217e-01, -8.499714335775954e-02, -1.352239499950215e-01, -8.499714335775947e-02, 1.971763933405199e+02, 1.970793964040032e+02, 1.973127241830278e+02, 1.972110765663329e+02, 1.971840857015321e+02, 1.970840057626737e+02, 1.973010665042619e+02, 1.972036317555056e+02, 1.972461485262223e+02, 1.971455326965895e+02, 1.972461485262223e+02, 1.971455326965895e+02, 2.388219967458540e+01, 2.387946512482469e+01, 2.435456747736259e+01, 2.433850912875341e+01, 2.327001895216239e+01, 2.344605051872530e+01, 2.367853328082883e+01, 2.385739633235056e+01, 2.459621661543113e+01, 2.418325450368471e+01, 2.459621661543113e+01, 2.418325450368471e+01, 2.447384344229216e+00, 2.434897744955063e+00, 3.016580395829317e+00, 3.020822140217232e+00, 1.988094522725233e+00, 2.151701366048377e+00, 2.275072808598149e+00, 2.427170198812835e+00, 2.669518850509590e+00, 2.403669406464007e+00, 2.669518850509590e+00, 2.403669406464008e+00, -1.103008487436253e-01, -1.066038168665689e-01, 4.082881991584655e-02, 4.301066284477694e-02, -1.165626691856041e-01, -1.102946059511118e-01, 2.741894075252548e+01, 2.739501251541511e+01, -6.933034879059771e-02, -3.570426990013070e-02, -6.933034879059771e-02, -3.570426990013070e-02, -1.193668396300245e-01, -1.283038923542666e-01, -1.285856612668470e-01, -1.338231967971538e-01, -5.385667940246039e-02, -5.104844979971639e-02, -1.250394457203982e-01, -1.276399835837596e-01, -7.640318165827584e-02, -7.701595973384918e-02, -7.640318165827593e-02, -7.701595973384934e-02, 2.601169001565081e+00, 2.621762375531607e+00, 2.544931044951815e+00, 2.565659129268311e+00, 2.564621852501672e+00, 2.585425404374034e+00, 2.581076907005381e+00, 2.601599911365396e+00, 2.572845088714862e+00, 2.593502677847557e+00, 2.572845088714862e+00, 2.593502677847557e+00, 2.471005666337152e+00, 2.487428881617991e+00, 1.609995705936812e+00, 1.626874306880009e+00, 1.846504433871647e+00, 1.865755609845301e+00, 2.092344678831761e+00, 2.107908509055777e+00, 1.967661433897263e+00, 1.983297607115744e+00, 1.967661433897263e+00, 1.983297607115744e+00, 3.305607884244457e+00, 3.318950599423593e+00, 1.626363260136408e-01, 1.672939144038006e-01, 3.338815319281343e-01, 3.470585572839477e-01, 7.835125287838213e-01, 7.936242737530961e-01, 5.366845674365324e-01, 5.376092902466467e-01, 5.366845674365320e-01, 5.376092902466466e-01, 1.354984175881507e+00, 1.378493094977569e+00, -1.711863972143688e-01, -1.708856307032844e-01, -1.613131184253577e-01, -1.576209424271741e-01, 7.528685468759685e-01, 7.793081803628741e-01, -1.039176498854726e-01, -8.444522457303233e-02, -1.039176498854726e-01, -8.444522457303229e-02, -1.512744688685100e-01, -1.496463971823689e-01, -6.809049928668895e-02, -5.115782378253805e-02, -8.664204658101227e-02, -8.396646011842539e-02, -1.001302528091645e-01, -9.994303264634960e-02, -5.319365490322344e-02, -7.561096433603218e-02, -5.319365490322329e-02, -7.561096433603216e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_lieb_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_lieb", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [2.404008822817545e-06, 0.000000000000000e+00, 2.404018109839927e-06, 2.403985522902797e-06, 0.000000000000000e+00, 2.404001183113048e-06, 2.403906385774806e-06, 0.000000000000000e+00, 2.403889072922459e-06, 2.404169641857728e-06, 0.000000000000000e+00, 2.404224582089134e-06, 2.403995158424358e-06, 0.000000000000000e+00, 2.404087078876342e-06, 2.403995158424358e-06, 0.000000000000000e+00, 2.404087078876342e-06, 5.570519834086819e-04, 0.000000000000000e+00, 5.570747853937138e-04, 5.570467587345287e-04, 0.000000000000000e+00, 5.570727960429299e-04, 5.569526724523249e-04, 0.000000000000000e+00, 5.569182754211479e-04, 5.568460429287820e-04, 0.000000000000000e+00, 5.568225985879291e-04, 5.573315209604024e-04, 0.000000000000000e+00, 5.567063819840874e-04, 5.573315209604024e-04, 0.000000000000000e+00, 5.567063819840874e-04, 7.809515329788017e-02, 0.000000000000000e+00, 7.717379852030763e-02, 7.846091024406177e-02, 0.000000000000000e+00, 7.732553087411020e-02, 8.357350906587133e-02, 0.000000000000000e+00, 8.532477579257558e-02, 8.264003967305937e-02, 0.000000000000000e+00, 8.210527531176195e-02, 7.542506753011219e-02, 0.000000000000000e+00, 9.178802040977103e-02, 7.542506753011219e-02, 0.000000000000000e+00, 9.178802040977103e-02, 4.782831649118026e+00, 0.000000000000000e+00, 4.265456526768585e+00, 4.610296388943745e+00, 0.000000000000000e+00, 4.047354243330780e+00, 5.151820090403382e-02, 0.000000000000000e+00, 4.665324323057946e-02, 1.052202919088052e+01, 0.000000000000000e+00, 1.009815458203372e+01, 4.201082837060617e+00, 0.000000000000000e+00, 2.720797075841845e+01, 4.201082837060618e+00, 0.000000000000000e+00, 2.720797075841844e+01, 1.175783238853340e+05, 0.000000000000000e+00, 9.799310144730248e+04, 1.021861529935593e+05, 0.000000000000000e+00, 8.312216952355836e+04, 5.943814144154971e+02, 0.000000000000000e+00, 5.047256809260822e+02, 5.412857999934655e+05, 0.000000000000000e+00, 5.692714587330793e+05, 1.656124842478616e+05, 0.000000000000000e+00, 8.986945387756285e+05, 1.656124842478616e+05, 0.000000000000000e+00, 8.986945387756276e+05, 1.659196536756399e-04, 0.000000000000000e+00, 1.660389432430987e-04, 1.658267336254800e-04, 0.000000000000000e+00, 1.659491028197892e-04, 1.659139932632438e-04, 0.000000000000000e+00, 1.660354995285897e-04, 1.658342674180513e-04, 0.000000000000000e+00, 1.659538876745561e-04, 1.658724342888595e-04, 0.000000000000000e+00, 1.659938763866382e-04, 1.658724342888595e-04, 0.000000000000000e+00, 1.659938763866382e-04, 3.125160961812538e-03, 0.000000000000000e+00, 3.125634765548917e-03, 3.057114351222336e-03, 0.000000000000000e+00, 3.059611608939213e-03, 3.183831536222759e-03, 0.000000000000000e+00, 3.167368337188281e-03, 3.123402885125635e-03, 0.000000000000000e+00, 3.106580143065437e-03, 3.044555280477593e-03, 0.000000000000000e+00, 3.084907832634959e-03, 3.044555280477593e-03, 0.000000000000000e+00, 3.084907832634959e-03, 1.155268624342892e-01, 0.000000000000000e+00, 1.164493140163470e-01, 9.052955146582504e-02, 0.000000000000000e+00, 9.040636749475349e-02, 1.547790128725217e-01, 0.000000000000000e+00, 1.388905460200536e-01, 1.370515317345609e-01, 0.000000000000000e+00, 1.242502175766873e-01, 1.026933252464349e-01, 0.000000000000000e+00, 1.197143597539224e-01, 1.026933252464349e-01, 0.000000000000000e+00, 1.197143597539224e-01, 3.123873969864291e+01, 0.000000000000000e+00, 3.036182734865479e+01, 4.522641622707833e+00, 0.000000000000000e+00, 4.455600237897221e+00, 4.219836387727751e+01, 0.000000000000000e+00, 3.606674672743305e+01, 3.309544172155459e-03, 0.000000000000000e+00, 3.314008793329959e-03, 2.085221695157448e+01, 0.000000000000000e+00, 1.754087079516902e+01, 2.085221695157448e+01, 0.000000000000000e+00, 1.754087079516902e+01, 1.282075542157371e+06, 0.000000000000000e+00, 1.142255334625839e+06, 6.076630624890268e+05, 0.000000000000000e+00, 5.808866326342272e+05, 1.453293018898208e+06, 0.000000000000000e+00, 1.223550437204091e+06, 1.290151116972163e+02, 0.000000000000000e+00, 1.266642555641628e+02, 1.364055502105935e+06, 0.000000000000000e+00, 5.266432381510714e+05, 1.364055502105935e+06, 0.000000000000000e+00, 5.266432381510716e+05, 1.149784327113759e-01, 0.000000000000000e+00, 1.136552703085390e-01, 1.169868337638688e-01, 0.000000000000000e+00, 1.156270975231057e-01, 1.162769767931281e-01, 0.000000000000000e+00, 1.149259636597974e-01, 1.156905892022387e-01, 0.000000000000000e+00, 1.143585885521066e-01, 1.159835389481523e-01, 0.000000000000000e+00, 1.146421846439659e-01, 1.159835389481523e-01, 0.000000000000000e+00, 1.146421846439659e-01, 1.247541975096554e-01, 0.000000000000000e+00, 1.235251318291148e-01, 1.975211635828095e-01, 0.000000000000000e+00, 1.949760754200292e-01, 1.720456853488225e-01, 0.000000000000000e+00, 1.697752643303875e-01, 1.506976092600225e-01, 0.000000000000000e+00, 1.491190268461477e-01, 1.610658003218443e-01, 0.000000000000000e+00, 1.592841164590741e-01, 1.610658003218443e-01, 0.000000000000000e+00, 1.592841164590741e-01, 7.870723132525732e-02, 0.000000000000000e+00, 7.832371691103818e-02, 2.245186595006256e+00, 0.000000000000000e+00, 2.206634308278648e+00, 1.304524516201115e+00, 0.000000000000000e+00, 1.266047916889517e+00, 5.622611242517805e-01, 0.000000000000000e+00, 5.530366904954869e-01, 8.473878113908079e-01, 0.000000000000000e+00, 8.482852336827420e-01, 8.473878113908085e-01, 0.000000000000000e+00, 8.482852336827426e-01, 2.541040437594589e-01, 0.000000000000000e+00, 2.489261489064828e-01, 6.290234439456350e+02, 0.000000000000000e+00, 6.162863287207276e+02, 2.584458938789102e+02, 0.000000000000000e+00, 2.341369069189302e+02, 6.367062931252760e-01, 0.000000000000000e+00, 6.087502909327726e-01, 6.740523227927916e+01, 0.000000000000000e+00, 5.725727343414447e+01, 6.740523227927918e+01, 0.000000000000000e+00, 5.725727343414449e+01, 4.017130698762903e+04, 0.000000000000000e+00, 3.610079710202033e+04, 3.120531213544120e+07, 0.000000000000000e+00, 3.099232085774283e+07, 3.704106567073158e+06, 0.000000000000000e+00, 3.078733518992698e+06, 7.664044891174881e+01, 0.000000000000000e+00, 7.300013728431499e+01, 1.605055096669964e+06, 0.000000000000000e+00, 6.839342062822342e+05, 1.605055096669968e+06, 0.000000000000000e+00, 6.839342062822363e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
