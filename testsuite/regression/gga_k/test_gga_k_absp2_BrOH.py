
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_absp2_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_absp2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.710179528350874e+02, 2.709945261675480e+02, 2.709267622924746e+02, 2.713096542076189e+02, 2.710052912266632e+02, 2.710052912266632e+02, 1.690951670567195e+01, 1.690381650299758e+01, 1.674868212928851e+01, 1.702335519227242e+01, 1.690672893873834e+01, 1.690672893873834e+01, 1.676841801315182e+00, 1.700788850198273e+00, 2.419602417027540e+00, 2.408659237477741e+00, 1.685433527328721e+00, 1.685433527328721e+00, 4.504869816447366e-01, 4.298298501416732e-01, 1.438547822391324e+00, 6.538290191319008e-01, 4.438185316357891e-01, 4.438185316357891e-01, 5.008030169876075e-01, 4.998328501425462e-01, 7.245490770394403e-01, 5.979401483678590e-01, 4.904077412445494e-01, 4.904077412445494e-01, 6.131163196482846e-01, 2.922426171024739e-01, 5.810279399403512e-01, 3.315141421110296e-01, 4.474605160801879e-01, 4.474605160801879e-01, 2.163508328485140e+01, 2.131774972545586e+01, 2.239139193516734e+01, 2.213965760606601e+01, 2.045469284213460e+01, 2.045469284213460e+01, 3.226368189683423e-01, -3.483514897200607e-01, 3.426491770797061e-01, -1.740010583799711e-01, 2.317360135458739e-01, 2.317360135458739e-01, 7.921657105944540e-01, 8.524703560354595e-01, 7.299821121232717e-01, -3.205363127298482e+00, 6.712126087470284e-01, 6.712126087470284e-01, 5.805661925603893e-01, 5.797706913146826e-01, 3.427185028561064e-01, 6.839870120106393e-01, 4.770380369557973e-01, 4.770380369557974e-01, -4.747243735174329e-01, -3.380870304661990e-01, -3.869901630568719e-01, -4.248670195262196e-01, -4.059238735853878e-01, -4.059238735853878e-01, -4.651654380501316e-01, 6.984611756821825e-01, 3.561470803859451e-01, 3.585602523329037e-02, 1.949429328540250e-01, 1.949429328540248e-01, -3.575200776756162e-01, 8.825052317527018e-01, 7.707855141976028e-01, 4.527910459372325e-01, 6.131740088195358e-01, 6.131740088195357e-01, 6.356536580131766e-01, 7.999309718167843e-01, 7.635674512122637e-01, 2.384454128152226e-01, 6.325368789055594e-01, 6.325368789055589e-01, 5.771237287338086e-01, 4.426462013993532e-01, 4.768731400589349e-01, 5.696190877820380e-01, 3.948162551922358e-01, 3.948162551922361e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_absp2_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_absp2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.102021106813541e+03, -2.102006569045030e+03, -2.101985007187476e+03, -2.102222210166843e+03, -2.102013078185478e+03, -2.102013078185478e+03, -6.544128832005779e+01, -6.543579182465326e+01, -6.529025275264323e+01, -6.556896754533591e+01, -6.543901880692816e+01, -6.543901880692816e+01, -3.460098196674999e+00, -3.480386103332216e+00, -4.105674381398572e+00, -4.121384516902023e+00, -3.467354900651869e+00, -3.467354900651869e+00, -5.839452198500598e-01, -5.668657610896503e-01, -4.000008279719169e+00, -7.239778857944604e-01, -5.783449643045362e-01, -5.783449643045362e-01, -5.012193124024092e-01, -5.002895923097775e-01, -7.320947817984597e-01, -5.980359560176608e-01, -4.908550135860349e-01, -4.908550135860349e-01, -1.093193692492062e+02, -1.090371660750984e+02, -1.092913606020972e+02, -1.090719134916296e+02, -1.091733675176327e+02, -1.091733675176327e+02, -3.697279969611822e+01, -3.687235959638090e+01, -3.764186161589385e+01, -3.755879508544120e+01, -3.605292770910999e+01, -3.605292770910999e+01, -1.674290445938466e+00, -1.246517100831956e+00, -1.559694083148208e+00, -1.150028715471116e+00, -1.689251481622351e+00, -1.689251481622351e+00, -8.300318798472247e-01, -9.878477629064896e-01, -7.668838230358533e-01, -1.154985968371649e+01, -7.218442038528097e-01, -7.218442038528097e-01, -5.806553531712886e-01, -5.798871418107798e-01, -3.427839198396266e-01, -6.986504329543075e-01, -4.771347145679633e-01, -4.771347145679635e-01, -9.644678283316920e-01, -1.085779563853739e+00, -1.042360917895607e+00, -1.008722503891245e+00, -1.025543521819981e+00, -1.025543521819981e+00, -8.831306084445731e-01, -1.713119461616290e+00, -1.463214531122124e+00, -1.232219462065632e+00, -1.345373028675225e+00, -1.345373028675224e+00, -1.395798906386877e+00, -1.096661889839898e+00, -1.072863139215980e+00, -9.465106179578723e-01, -9.993945199392037e-01, -9.993945199392030e-01, -1.461068980743103e+00, -8.064037013850218e-01, -7.754299287939981e-01, -6.791996373484207e-01, -6.574827132904573e-01, -6.574827132904568e-01, -5.776955377573781e-01, -4.426549301763796e-01, -4.769046388629662e-01, -5.923237043994312e-01, -3.948860830187943e-01, -3.948860830187949e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_absp2_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_absp2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [6.466056283234563e-06, 6.466009197756443e-06, 6.465764469780239e-06, 6.466536223526939e-06, 6.466031741755516e-06, 6.466031741755516e-06, 1.498421174038643e-03, 1.498411739878048e-03, 1.497967471120726e-03, 1.497780402094735e-03, 1.498397172686069e-03, 1.498397172686069e-03, 2.127416061921152e-01, 2.133980905275349e-01, 2.313976576874749e-01, 2.260172348590344e-01, 2.129807311553839e-01, 2.129807311553839e-01, 1.039094480851941e+01, 9.986689159943243e+00, 1.235781346377657e-01, 2.726729965319867e+01, 1.026742833838440e+01, 1.026742833838440e+01, 5.964453786572185e+04, 5.189989231390612e+04, 7.729001762631485e+02, 5.402227120247934e+05, 5.355685357776580e+04, 5.355685357776580e+04, 4.469833335950086e-04, 4.467449287426880e-04, 4.469581719292752e-04, 4.467728090459601e-04, 4.468621392195736e-04, 4.468621392195736e-04, 8.433970231851093e-03, 8.258181711162384e-03, 8.506448761135831e-03, 8.367254872862299e-03, 8.223561338896960e-03, 8.223561338896960e-03, 3.223851271846090e-01, 2.515276663577714e-01, 3.773229443710125e-01, 3.325266768488966e-01, 2.879077532755357e-01, 2.879077532755357e-01, 6.875369789659389e+01, 1.017076998310966e+01, 7.146664024634525e+01, 8.938290414619800e-03, 4.446729428797773e+01, 4.446729428797773e+01, 6.017464903633266e+05, 4.031448391945296e+05, 9.574968365468717e+05, 2.853120840444644e+02, 5.329472753722590e+05, 5.329472753722590e+05, 2.934235204795085e-01, 2.981735854250898e-01, 2.964590738343240e-01, 2.951453133270494e-01, 2.958018789761704e-01, 2.958018789761704e-01, 3.235901009869711e-01, 4.956708849315528e-01, 4.349226204021869e-01, 3.871492494294326e-01, 4.105657975335820e-01, 4.105657975335819e-01, 2.182135508852704e-01, 5.111822292084749e+00, 3.051372879724367e+00, 1.460335367408629e+00, 2.110668932927307e+00, 2.110668932927307e+00, 6.755606254308927e-01, 9.728411342429538e+02, 3.921118904777629e+02, 1.731324176957159e+00, 1.285807832823024e+02, 1.285807832823023e+02, 3.705071661734571e+04, 1.964459228149110e+07, 2.865708569560217e+06, 1.480818596429327e+02, 8.682210925506415e+05, 8.682210925506453e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
