
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_vsk_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_vsk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.173658022629756e+03, 2.173667021613914e+03, 2.173715784650754e+03, 2.173581718521384e+03, 2.173650720428704e+03, 2.173650720428704e+03, 5.868965162309302e+01, 5.868910944975321e+01, 5.867946403959239e+01, 5.871854297966718e+01, 5.869183112871790e+01, 5.869183112871790e+01, 2.284423218889886e+00, 2.282567149507381e+00, 2.252737682939516e+00, 2.285301257838486e+00, 2.274406383172114e+00, 2.274406383172114e+00, 2.435829143429818e-01, 2.384264245800692e-01, 3.068404839064466e+00, 3.660310625193638e-01, 2.727508101698939e-01, 2.727508101698941e-01, 7.297829037609238e-01, 7.099005212557286e-01, 9.184041644459002e-01, 7.661338810708646e-01, 6.795215009911213e-01, 6.795215009911204e-01, 1.274517835527178e+02, 1.274622218184913e+02, 1.274526116906318e+02, 1.274618211953811e+02, 1.274568797943850e+02, 1.274568797943850e+02, 2.049354204604963e+01, 2.071000769531113e+01, 2.046755853320110e+01, 2.065568984409052e+01, 2.062870415154257e+01, 2.062870415154257e+01, 1.655241087625585e+00, 1.872026199196566e+00, 1.428715694107932e+00, 1.476320287330993e+00, 1.698631818858194e+00, 1.698631818858194e+00, 7.466493157762811e-01, 4.114930952511278e-01, 7.628956490575154e-01, 1.696427126260499e+01, 4.517274444507236e-01, 4.517274444507236e-01, 6.675070592572204e-01, 7.061962542086209e-01, 2.817528777259208e-01, 7.813754630967019e-01, 4.130258790500423e-01, 4.130258790500429e-01, 1.584645350613940e+00, 1.582135848777584e+00, 1.583025971091319e+00, 1.583733245552274e+00, 1.583376854405674e+00, 1.583376854405674e+00, 1.495486684703979e+00, 1.226951262782917e+00, 1.295642141454825e+00, 1.369783784519786e+00, 1.330668431057680e+00, 1.330668431057680e+00, 2.060747604428489e+00, 4.170933081577096e-01, 4.512356213752031e-01, 6.231490279019034e-01, 5.131650293763810e-01, 5.131650293763808e-01, 1.043053251107374e+00, 9.665307348039216e-01, 9.357426408351325e-01, 5.581916753984780e-01, 6.202677636444787e-01, 6.202677636444786e-01, 8.122137001686546e-01, 3.188820457470823e-01, 4.583212862923547e-01, 6.526074734060622e-01, 3.675096192569710e-01, 3.675096192569707e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_vsk_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_vsk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.341989043903880e+03, 3.342010933949766e+03, 3.342108793179204e+03, 3.341783101196089e+03, 3.341953679679003e+03, 3.341953679679003e+03, 8.742615757659833e+01, 8.742743049564926e+01, 8.746110942516039e+01, 8.743571809410783e+01, 8.743189884144171e+01, 8.743189884144171e+01, 3.122381311513636e+00, 3.110783259022284e+00, 2.795163931344992e+00, 2.851243963880554e+00, 2.846727959008315e+00, 2.846727959008315e+00, -1.037011057744058e-01, -5.368687942102387e-02, 4.298943681235948e+00, -9.611801681523704e-01, -4.876584684858669e-01, -4.876584684858678e-01, -7.293196256662792e-01, -7.093928356463510e-01, -9.340404502613195e-01, -7.659711469576181e-01, -6.792692558027988e-01, -6.792692558027977e-01, 2.003125848540990e+02, 2.004225631671692e+02, 2.003177535060894e+02, 2.004148428815120e+02, 2.003682832678552e+02, 2.003682832678552e+02, 2.475344928018669e+01, 2.527793212087601e+01, 2.409665916089028e+01, 2.456936790603140e+01, 2.534830622210884e+01, 2.534830622210884e+01, 2.505704210936325e+00, 3.039654569930022e+00, 2.132692049595886e+00, 2.374299094103549e+00, 2.598230585418093e+00, 2.598230585418093e+00, -1.512288569879707e+00, -8.189803336574037e-01, -1.408443479504464e+00, 2.758597430236210e+01, -1.226657995352402e+00, -1.226657995352402e+00, -6.674094606102148e-01, -7.060408669848924e-01, -2.816630556843402e-01, -9.692827235613507e-01, -4.128954752737330e-01, -4.128954752737324e-01, 2.617506097948250e+00, 2.572157095791680e+00, 2.588063214878723e+00, 2.601224595508946e+00, 2.594634880297391e+00, 2.594634880297391e+00, 2.481910509217218e+00, 1.688619280507090e+00, 1.915795747782266e+00, 2.138143119672810e+00, 2.025006583910724e+00, 2.025006583910724e+00, 3.337620675358027e+00, -2.823525819679494e-01, 2.088532464811082e-01, 8.239743135833035e-01, 5.355990719043987e-01, 5.355990719043984e-01, 1.426690325906797e+00, -9.770748015624151e-01, -9.971552454725525e-01, 7.961411027029082e-01, -1.083270000504972e+00, -1.083270000504972e+00, -8.113477489118867e-01, -3.188707151728722e-01, -4.582717534949080e-01, -1.036518454721782e+00, -3.673978163101246e-01, -3.673978163101258e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_vsk_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_vsk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([7.108760401075640e-07, 7.108697782333399e-07, 7.108406091461592e-07, 7.109338055659875e-07, 7.108851588267938e-07, 7.108851588267938e-07, 1.662814619109263e-04, 1.662787847821418e-04, 1.662049043917148e-04, 1.662389045477967e-04, 1.662662279427155e-04, 1.662662279427155e-04, 2.443206068433259e-02, 2.456788373090558e-02, 2.877708998727140e-02, 2.794197384146855e-02, 2.801362819542478e-02, 2.801362819542478e-02, 3.779628637336196e+00, 3.324216213836089e+00, 1.513313233978356e-02, 2.131655600341103e+01, 1.023266668716461e+01, 1.023266668716463e+01, 2.874979422528481e+05, 2.465575792546340e+05, 1.477882732381644e+03, 1.492466647135366e+06, 7.522092559075325e+05, 7.522092559075325e+05, 4.897442257217163e-05, 4.894722008033851e-05, 4.897306761344064e-05, 4.894905291165389e-05, 4.896067464184454e-05, 4.896067464184454e-05, 1.089449251258757e-03, 1.056792772543162e-03, 1.130667208353234e-03, 1.099742099135561e-03, 1.052993225961791e-03, 1.052993225961791e-03, 3.442612690844372e-02, 2.679555341997891e-02, 4.366524862695918e-02, 3.852785648581301e-02, 3.272494357893348e-02, 3.272494357893348e-02, 9.286617326215716e+01, 6.831115842665596e+00, 1.168446295622262e+02, 9.812712134932206e-04, 5.137696185432757e+01, 5.137696185432757e+01, 3.249258368670371e+06, 1.597483758146544e+06, 3.573157557653579e+06, 3.612365766435158e+02, 2.043742976608104e+06, 2.043742976608101e+06, 3.403752245935646e-02, 3.445829764342288e-02, 3.430206157869514e-02, 3.418035124592113e-02, 3.424055090995725e-02, 3.424055090995725e-02, 3.703011642560546e-02, 6.143861378365540e-02, 5.117566381666977e-02, 4.424321436749262e-02, 4.747076882345832e-02, 4.747076882345832e-02, 2.324142706635669e-02, 2.061263004652922e+00, 7.157244168124898e-01, 1.801729598265167e-01, 3.312720797615796e-01, 3.312720797615795e-01, 7.910408881062049e-02, 1.682870207393298e+03, 6.724622600373916e+02, 1.900870391682606e-01, 1.850714900135496e+02, 1.850714900135496e+02, 1.022772568739455e+05, 8.363882502365629e+07, 9.043639382324226e+06, 2.207944336469144e+02, 2.579648283755663e+06, 2.579648283755672e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
