
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_ernzerhof_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_ernzerhof", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.179779287280964e+03, 2.179786851147194e+03, 2.179832753471517e+03, 2.179708651701142e+03, 2.179783174575782e+03, 2.179783174575782e+03, 5.898275190051903e+01, 5.898227173422218e+01, 5.897395491988651e+01, 5.901332261315056e+01, 5.898300745017327e+01, 5.898300745017327e+01, 2.306715772295183e+00, 2.305768572691480e+00, 2.300297003887653e+00, 2.329397733203125e+00, 2.306349138628973e+00, 2.306349138628973e+00, 2.252209227847129e-01, 2.252788767908100e-01, 3.183101861777664e+00, 2.168920557553560e-01, 2.251313040793133e-01, 2.251313040793133e-01, 4.721434329704886e-01, 4.685971183618086e-01, 4.334754727042230e-01, 5.909664703329909e-01, 4.598153385019520e-01, 4.598153385019520e-01, 1.275477526468914e+02, 1.275549109938363e+02, 1.275487168777045e+02, 1.275542786287716e+02, 1.275510820868814e+02, 1.275510820868814e+02, 2.086971800961241e+01, 2.107319646191018e+01, 2.088114958128982e+01, 2.103806014327174e+01, 2.099751229592792e+01, 2.099751229592792e+01, 1.624187772218768e+00, 1.829589564505400e+00, 1.468918803222985e+00, 1.532171944404224e+00, 1.737101928202216e+00, 1.737101928202216e+00, 2.763516993675239e-01, 3.118881629346656e-01, 2.514095424049528e-01, 1.692878665599203e+01, 2.189174824661614e-01, 2.189174824661614e-01, 5.740726557374671e-01, 5.713237281814746e-01, 3.379693257951180e-01, 3.119295449310330e-01, 4.700264149885457e-01, 4.700264149885460e-01, 1.632843551918711e+00, 1.630327843274309e+00, 1.631198078452473e+00, 1.631883651083160e+00, 1.631535534898967e+00, 1.631535534898967e+00, 1.527431430700313e+00, 1.277848629533827e+00, 1.341744895278437e+00, 1.407195557657100e+00, 1.372581914370890e+00, 1.372581914370890e+00, 2.014273416997548e+00, 3.920040560175706e-01, 4.656732563817223e-01, 6.370660236987441e-01, 5.357225856698415e-01, 5.357225856698415e-01, 1.048547286358102e+00, 5.201332727886225e-01, 3.944642484449991e-01, 5.465374321728380e-01, 2.324288710601044e-01, 2.324288710601041e-01, 5.382591370345281e-01, 4.420031427465210e-01, 4.745618306684881e-01, 2.086499009949100e-01, 3.897408054025686e-01, 3.897408054025688e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_ernzerhof_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_ernzerhof", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.321447305389849e+03, 3.321467159036462e+03, 3.321562213559786e+03, 3.321236972058456e+03, 3.321457721340981e+03, 3.321457721340981e+03, 8.649859243617283e+01, 8.649991098316325e+01, 8.654323061870697e+01, 8.650520268617353e+01, 8.650000756941444e+01, 8.650000756941444e+01, 2.980831874390751e+00, 2.968993679280975e+00, 2.630064118379158e+00, 2.683544048615709e+00, 2.976546553067930e+00, 2.976546553067930e+00, 1.285940581954744e-01, 1.438853077751759e-01, 4.470634322476122e+00, -1.541627649267769e-01, 1.333923186644248e-01, 1.333923186644248e-01, -5.438491517402702e-01, -5.462347631928258e-01, -8.399931703430187e-01, -6.094045783830546e-01, -5.358645495899359e-01, -5.358645495899359e-01, 1.994439514708420e+02, 1.995598377227373e+02, 1.994559338175985e+02, 1.995460414704820e+02, 1.995032190653068e+02, 1.995032190653068e+02, 2.401583070967664e+01, 2.450497356016706e+01, 2.366528360771206e+01, 2.404894250303483e+01, 2.479193094069639e+01, 2.479193094069639e+01, 2.433018105521288e+00, 2.973141421682054e+00, 2.182425121768120e+00, 2.453684013194295e+00, 2.641521000811354e+00, 2.641521000811354e+00, -4.691269006256562e-01, -4.902539894537527e-02, -4.140086107931055e-01, 2.750441770949821e+01, -2.617512335037733e-01, -2.617512335037733e-01, -5.912509449702666e-01, -5.935807643985412e-01, -3.504935284215479e-01, -6.428961727042568e-01, -4.884986395543338e-01, -4.884986395543332e-01, 2.701990732264735e+00, 2.657675530239025e+00, 2.673642627859319e+00, 2.685909509390388e+00, 2.679779154459526e+00, 2.679779154459526e+00, 2.533667315147926e+00, 1.747038655512522e+00, 1.978003950767548e+00, 2.190870884680965e+00, 2.083148410124658e+00, 2.083148410124658e+00, 3.265377593112107e+00, 1.438267303785595e-01, 3.765579970006398e-01, 8.276648705590445e-01, 5.878292329024020e-01, 5.878292329024021e-01, 1.408161236651775e+00, -9.592904792371556e-01, -8.057284770993413e-01, 7.709080371885750e-01, -4.291861357454088e-01, -4.291861357454083e-01, -6.342698096922059e-01, -4.437237763498853e-01, -4.807218223914093e-01, -3.837797734623720e-01, -4.031412543888255e-01, -4.031412543888264e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_ernzerhof_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_ernzerhof", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [7.887692702195075e-07, 7.887617263696828e-07, 7.887264458641674e-07, 7.888500169021651e-07, 7.887653054368752e-07, 7.887653054368752e-07, 1.889514037362000e-04, 1.889465689573056e-04, 1.887904959749635e-04, 1.889394065098305e-04, 1.889465023613115e-04, 1.889465023613115e-04, 2.937627457376708e-02, 2.953271461117845e-02, 3.422664173505592e-02, 3.330288764200865e-02, 2.943287520630997e-02, 2.943287520630997e-02, 1.921111342867462e+00, 1.802232171006454e+00, 1.612019000144804e-02, 7.752343279295578e+00, 1.883806058915568e+00, 1.883806058915568e+00, 5.941522099886269e+04, 5.166189245022243e+04, 6.225881499627900e+02, 5.401366023329441e+05, 5.331212650588417e+04, 5.331212650588417e+04, 5.321139253419891e-05, 5.315569754374818e-05, 5.320566352115187e-05, 5.316235706603579e-05, 5.318285798720536e-05, 5.318285798720536e-05, 1.243423953651227e-03, 1.210979731781532e-03, 1.263768952170946e-03, 1.237755194631602e-03, 1.196288878876725e-03, 1.196288878876725e-03, 3.992783907672504e-02, 2.877173588698819e-02, 4.706370113979548e-02, 3.863989462212188e-02, 3.518585743286372e-02, 3.518585743286372e-02, 2.972653656083964e+01, 2.401998898522106e+00, 3.001403717076648e+01, 1.022653703449619e-03, 1.513900205627173e+01, 1.513900205627173e+01, 6.016582767279084e+05, 4.030445467186985e+05, 9.572813571217357e+05, 1.804360022144341e+02, 5.328123368654267e+05, 5.328123368654263e+05, 3.288038190754956e-02, 3.398905271459570e-02, 3.358731105550016e-02, 3.328029237186107e-02, 3.343350757767035e-02, 3.343350757767035e-02, 3.615805362542707e-02, 6.593087943744164e-02, 5.460605333716762e-02, 4.628336165849321e-02, 5.026458453216031e-02, 5.026458453216030e-02, 2.502706350169837e-02, 1.014425615337548e+00, 5.171648443523623e-01, 2.009695260511406e-01, 3.185206658952089e-01, 3.185206658952092e-01, 9.097317976678539e-02, 8.303253190638563e+02, 2.801338169165546e+02, 2.251180670582850e-01, 6.133915685832430e+01, 6.133915685832426e+01, 3.685337713259408e+04, 1.964454371502394e+07, 2.865629701222298e+06, 7.026467419436440e+01, 8.680529491866819e+05, 8.680529491866853e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
