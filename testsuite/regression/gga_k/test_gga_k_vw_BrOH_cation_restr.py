
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_vw_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_vw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [9.576367974801365e+02, 9.576137152017669e+02, 9.575583428865842e+02, 9.579007924317530e+02, 9.577146356803473e+02, 9.577146356803473e+02, 3.510538557989286e+01, 3.509836932137571e+01, 3.493798641525810e+01, 3.523030676587275e+01, 3.509866555034696e+01, 3.509866555034696e+01, 2.195150665193752e+00, 2.217444668492991e+00, 2.839234673349461e+00, 2.847095911020729e+00, 2.814110720197283e+00, 2.814110720197283e+00, 6.132771423699879e-01, 5.899015834670525e-01, 2.659811392182207e+00, 7.661303219053751e-01, 6.759383935900724e-01, 6.759383935900727e-01, 7.296024095480098e-01, 7.097016030126657e-01, 9.182006296004971e-01, 7.660721392700541e-01, 6.794248945559829e-01, 6.794248945559821e-01, 4.138314085764939e+01, 4.106688958467370e+01, 4.137020142314888e+01, 4.109098341824129e+01, 4.122190207527881e+01, 4.122190207527881e+01, 2.720444925399674e+01, 2.696575746413650e+01, 2.837135809099123e+01, 2.815777963975927e+01, 2.651392869737744e+01, 2.651392869737744e+01, 8.597899988043149e-01, 2.737344232058351e-01, 8.403264661650589e-01, 2.942228796533070e-01, 7.932590255561430e-01, 7.932590255561430e-01, 9.219337397706971e-01, 9.972987058659568e-01, 8.996643050506317e-01, 2.341215418320707e+00, 7.404162975527331e-01, 7.404162975527331e-01, 6.674701683388641e-01, 7.061372740478281e-01, 2.817185860647479e-01, 8.107085906494393e-01, 4.129761035027057e-01, 4.129761035027062e-01, 7.983407508947260e-02, 2.203653169827554e-01, 1.710064197041713e-01, 1.300912416170466e-01, 1.505520230511357e-01, 1.505520230511357e-01, 3.572804386962178e-02, 1.147790309495852e+00, 8.204982784886669e-01, 4.949091981250061e-01, 6.560003838136493e-01, 6.560003838136493e-01, 3.303519813154284e-01, 1.064541222388073e+00, 9.836073652430206e-01, 6.698639965281546e-01, 8.251588791345648e-01, 8.251588791345645e-01, 9.995408978388637e-01, 9.656265679940104e-01, 9.421216882218716e-01, 4.431085186868970e-01, 7.143488347941435e-01, 7.143488347941432e-01, 8.118648404256343e-01, 3.188777887564307e-01, 4.583026030886933e-01, 7.255536168961272e-01, 3.674669729849502e-01, 3.674669729849497e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_vw_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_vw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-9.576367974801366e+02, -9.576137152017674e+02, -9.575583428865840e+02, -9.579007924317524e+02, -9.577146356803482e+02, -9.577146356803482e+02, -3.510538557989285e+01, -3.509836932137571e+01, -3.493798641525812e+01, -3.523030676587278e+01, -3.509866555034698e+01, -3.509866555034698e+01, -2.195150665193752e+00, -2.217444668492991e+00, -2.839234673349460e+00, -2.847095911020728e+00, -2.814110720197280e+00, -2.814110720197280e+00, -6.132771423699878e-01, -5.899015834670526e-01, -2.659811392182205e+00, -7.661303219053748e-01, -6.759383935900722e-01, -6.759383935900722e-01, -7.296024095480096e-01, -7.097016030126658e-01, -9.182006296004974e-01, -7.660721392700544e-01, -6.794248945559833e-01, -6.794248945559823e-01, -4.138314085764941e+01, -4.106688958467372e+01, -4.137020142314887e+01, -4.109098341824131e+01, -4.122190207527881e+01, -4.122190207527881e+01, -2.720444925399673e+01, -2.696575746413651e+01, -2.837135809099124e+01, -2.815777963975927e+01, -2.651392869737744e+01, -2.651392869737744e+01, -8.597899988043155e-01, -2.737344232058354e-01, -8.403264661650590e-01, -2.942228796533068e-01, -7.932590255561430e-01, -7.932590255561430e-01, -9.219337397706974e-01, -9.972987058659565e-01, -8.996643050506319e-01, -2.341215418320708e+00, -7.404162975527329e-01, -7.404162975527329e-01, -6.674701683388641e-01, -7.061372740478277e-01, -2.817185860647480e-01, -8.107085906494386e-01, -4.129761035027057e-01, -4.129761035027057e-01, -7.983407508947252e-02, -2.203653169827552e-01, -1.710064197041713e-01, -1.300912416170466e-01, -1.505520230511358e-01, -1.505520230511358e-01, -3.572804386962174e-02, -1.147790309495851e+00, -8.204982784886662e-01, -4.949091981250061e-01, -6.560003838136490e-01, -6.560003838136490e-01, -3.303519813154284e-01, -1.064541222388072e+00, -9.836073652430205e-01, -6.698639965281545e-01, -8.251588791345640e-01, -8.251588791345635e-01, -9.995408978388636e-01, -9.656265679940100e-01, -9.421216882218716e-01, -4.431085186868967e-01, -7.143488347941437e-01, -7.143488347941432e-01, -8.118648404256346e-01, -3.188777887564306e-01, -4.583026030886928e-01, -7.255536168961270e-01, -3.674669729849501e-01, -3.674669729849500e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_vw_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_vw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [6.465558408889447e-06, 6.465504314368241e-06, 6.465247135945692e-06, 6.466052320295342e-06, 6.465632777057505e-06, 6.465632777057505e-06, 1.498213674029333e-03, 1.498203972832304e-03, 1.497869659939608e-03, 1.497597610737780e-03, 1.498093701227576e-03, 1.498093701227576e-03, 2.087894145121824e-01, 2.094815290984875e-01, 2.271002921854555e-01, 2.215377010814852e-01, 2.227053156391256e-01, 2.227053156391256e-01, 1.212783639246232e+01, 1.159308837356066e+01, 1.316911190273232e-01, 2.771712142089699e+01, 1.957499616309466e+01, 1.957499616309467e+01, 2.874952765754121e+05, 2.465546137483149e+05, 1.468181512983260e+03, 1.492465251230529e+06, 7.522070256195640e+05, 7.522070256195640e+05, 4.463987932311861e-04, 4.461530243974384e-04, 4.463865483604211e-04, 4.461695925050767e-04, 4.462746898771731e-04, 4.462746898771731e-04, 8.405710951977129e-03, 8.225420308312626e-03, 8.540671341115708e-03, 8.377662191483195e-03, 8.242192632024159e-03, 8.242192632024159e-03, 3.119433029115474e-01, 2.433121166868861e-01, 3.937539884428952e-01, 3.505402349909846e-01, 2.973293717959445e-01, 2.973293717959445e-01, 8.282011699658827e+01, 1.207275069070744e+01, 1.046004417152880e+02, 8.906969473199959e-03, 5.124476217261497e+01, 5.124476217261497e+01, 3.249256950004610e+06, 1.597482152034641e+06, 3.573149841128374e+06, 3.437938582102904e+02, 2.043738650702208e+06, 2.043738650702208e+06, 3.074431719955891e-01, 3.127951632558527e-01, 3.108978161438085e-01, 3.093465472861635e-01, 3.101217331306696e-01, 3.101217331306696e-01, 3.338635972182413e-01, 5.277855463435615e-01, 4.596408969843099e-01, 4.031650116453307e-01, 4.307748394546119e-01, 4.307748394546119e-01, 2.111649385648006e-01, 5.986104049931646e+00, 3.455983667980389e+00, 1.499685834607408e+00, 2.280243059795127e+00, 2.280243059795128e+00, 6.763744328316319e-01, 1.674445854271037e+03, 6.607838326576669e+02, 1.673974624492028e+00, 1.665281126261038e+02, 1.665281126261038e+02, 1.022742173599572e+05, 8.363882291868500e+07, 9.043637243187241e+06, 2.011089761174724e+02, 2.579643228134502e+06, 2.579643228134509e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
