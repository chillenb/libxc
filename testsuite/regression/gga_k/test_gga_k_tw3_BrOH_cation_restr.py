
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_tw3_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tw3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.192051246756200e+03, 2.192060059755366e+03, 2.192108490463962e+03, 2.191977180325531e+03, 2.192044668242143e+03, 2.192044668242143e+03, 5.924063088323069e+01, 5.924007067501087e+01, 5.923002462257478e+01, 5.926999625799686e+01, 5.924281532427365e+01, 5.924281532427365e+01, 2.298955541468898e+00, 2.296606795001287e+00, 2.246274939935711e+00, 2.280155306029594e+00, 2.270089954887995e+00, 2.270089954887995e+00, 1.849212294760842e-01, 1.885822733129110e-01, 3.092681614473097e+00, 1.191877432288306e-01, 1.430265588425855e-01, 1.430265588425855e-01, 3.036430353436257e-04, 3.363597192369136e-04, 1.007957545746943e-02, 1.013210792804888e-04, 1.599595902310915e-04, 1.599595902310915e-04, 1.283479814454316e+02, 1.283537013219950e+02, 1.283486180928247e+02, 1.283536622544536e+02, 1.283506759379079e+02, 1.283506759379079e+02, 2.037109610590566e+01, 2.061164860897554e+01, 2.028230727152175e+01, 2.049445262091754e+01, 2.054672832659760e+01, 2.054672832659760e+01, 1.670267679655572e+00, 1.878935167438694e+00, 1.442097264848361e+00, 1.483439326815888e+00, 1.713412652685343e+00, 1.713412652685343e+00, 6.331195905067856e-02, 1.993089661876674e-01, 5.473425812151975e-02, 1.702373733050880e+01, 8.281220009910784e-02, 8.281220009910784e-02, 6.032175437568658e-05, 9.682974095832336e-05, 5.660962224230881e-05, 2.575133037093237e-02, 8.215654138082014e-05, 8.215654138082014e-05, 1.586807372013717e+00, 1.587727587248525e+00, 1.587468738922607e+00, 1.587177665680036e+00, 1.587325689095222e+00, 1.587325689095222e+00, 1.496472110457439e+00, 1.235341653997031e+00, 1.307851793955651e+00, 1.380124171495282e+00, 1.342517858734440e+00, 1.342517858734440e+00, 2.068994662022491e+00, 2.997319723769215e-01, 4.042690156146157e-01, 6.254332127357922e-01, 5.007673651681599e-01, 5.007673651681599e-01, 1.049742319316247e+00, 9.252812212446998e-03, 1.698714148746534e-02, 5.630629968273670e-01, 4.037164858298600e-02, 4.037164858298601e-02, 6.044939204476462e-04, 6.919949847001648e-06, 3.048715055325886e-05, 3.593156918496527e-02, 7.034353620174329e-05, 7.034353620174316e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_tw3_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tw3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.346718183612086e+03, 3.346738973039172e+03, 3.346833755585063e+03, 3.346524405144908e+03, 3.346686160926650e+03, 3.346686160926650e+03, 8.807810760817510e+01, 8.807888818893969e+01, 8.810126916154145e+01, 8.809583374745765e+01, 8.808329000711603e+01, 8.808329000711603e+01, 3.244129370303388e+00, 3.236458258931799e+00, 3.061716892455447e+00, 3.112627036992077e+00, 3.101681688567328e+00, 3.101681688567328e+00, 2.333598248220320e-01, 2.380432839203057e-01, 4.418710298841445e+00, 1.569775676366193e-01, 1.829849571204979e-01, 1.829849571204979e-01, 5.055652441278207e-04, 5.599607307949675e-04, 1.637232400209803e-02, 1.688147012716261e-04, 2.664482803749847e-04, 2.664482803749847e-04, 2.001315340147941e+02, 2.002348599768386e+02, 2.001364245401569e+02, 2.002276385634348e+02, 2.001838257623647e+02, 2.001838257623647e+02, 2.757726645944497e+01, 2.797401920924089e+01, 2.730092388344942e+01, 2.764729077563027e+01, 2.793353365981202e+01, 2.793353365981202e+01, 2.515686776120688e+00, 3.034793372272589e+00, 2.147541195109001e+00, 2.370213200530416e+00, 2.603896589217856e+00, 2.603896589217856e+00, 9.196751893684094e-02, 2.561210314226431e-01, 8.053417224730224e-02, 2.754301132433974e+01, 1.134913742028041e-01, 1.134913742028041e-01, 1.005143824880563e-04, 1.613296314285983e-04, 9.430374341806389e-05, 3.999317268375875e-02, 1.368620119412704e-04, 1.368620119412704e-04, 2.615546111419613e+00, 2.568133448179808e+00, 2.584558428623125e+00, 2.598320098540365e+00, 2.591411096279402e+00, 2.591411096279402e+00, 2.480967758963554e+00, 1.748962208536129e+00, 1.933667898019793e+00, 2.137405185682222e+00, 2.031134096436012e+00, 2.031134096436012e+00, 3.332090727677515e+00, 3.784840205506181e-01, 5.150895031981367e-01, 8.702508746901410e-01, 6.611103374128011e-01, 6.611103374128010e-01, 1.481825322767506e+00, 1.507749895914750e-02, 2.715984497291782e-02, 8.127046943650871e-01, 5.984220027942636e-02, 5.984220027942637e-02, 1.005688036234731e-03, 1.153264702423880e-05, 5.080377905021023e-05, 5.392679898588668e-02, 1.171852135930948e-04, 1.171852135930946e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_tw3_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tw3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([7.765171499323165e-07, 7.765139228807406e-07, 7.764923260436067e-07, 7.765404866259964e-07, 7.765162825276295e-07, 7.765162825276295e-07, 1.705441339061646e-04, 1.705496810991036e-04, 1.706653518660687e-04, 1.703671423894034e-04, 1.705384514674009e-04, 1.705384514674009e-04, 2.095347587163261e-02, 2.094465119130547e-02, 2.045877352556927e-02, 2.006470465948358e-02, 2.023385656079100e-02, 2.023385656079100e-02, 5.550147247306926e-01, 5.620183929171871e-01, 1.366068671938367e-02, 5.653096392497899e-01, 6.015585578980702e-01, 6.015585578980702e-01, 7.484094479391397e-02, 8.322127859911091e-02, 2.560172299085311e-01, 3.927886975045676e-02, 6.270607521421137e-02, 6.270607521421154e-02, 5.574883260689776e-05, 5.576510440333156e-05, 5.574924461533961e-05, 5.576361490954479e-05, 5.575727129058170e-05, 5.575727129058170e-05, 7.386114243384689e-04, 7.296437359642276e-04, 7.340939897091819e-04, 7.263490698507119e-04, 7.356971214905016e-04, 7.356971214905016e-04, 3.647535414719900e-02, 3.225410297440165e-02, 4.497493358209328e-02, 4.565440930918357e-02, 3.539113954803051e-02, 3.539113954803051e-02, 4.565454516061767e-01, 3.452803561750469e-01, 4.660638269168476e-01, 1.183960916297461e-03, 6.366253128164227e-01, 6.366253128164227e-01, 3.993260565254079e-02, 4.519206819635507e-02, 2.170145116483306e-01, 4.652603797926703e-01, 1.216608796653387e-01, 1.216608796653384e-01, 4.207175941565790e-02, 4.156075167626887e-02, 4.173973941431214e-02, 4.188944602855556e-02, 4.181467177251817e-02, 4.181467177251817e-02, 4.608896287601844e-02, 5.344469505007128e-02, 5.169607390277898e-02, 4.973334739518819e-02, 5.082508123827678e-02, 5.082508123827678e-02, 2.786174150678062e-02, 2.552977327480436e-01, 2.090916690324800e-01, 1.445177536402462e-01, 1.797956428546666e-01, 1.797956428546666e-01, 6.794219772320448e-02, 2.235981317587091e-01, 3.030106078254152e-01, 1.781236170290413e-01, 6.507405810947463e-01, 6.507405810947469e-01, 8.511925155363573e-02, 5.928312157036539e-02, 6.022384818538925e-02, 6.194089888145899e-01, 1.421916836307784e-01, 1.421916836307788e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
