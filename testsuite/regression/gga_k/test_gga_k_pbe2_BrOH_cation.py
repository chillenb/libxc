
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_pbe2_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_pbe2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([3.147008010605732e+03, 3.146995964458507e+03, 3.146995310628613e+03, 3.147173441444221e+03, 3.147072584945223e+03, 3.147072584945223e+03, 9.325565706773389e+01, 9.324900948400152e+01, 9.309990733821692e+01, 9.339459727634282e+01, 9.325219246798255e+01, 9.325219246798255e+01, 4.287472761424308e+00, 4.301351683363754e+00, 4.674463216199087e+00, 4.721980015102767e+00, 4.690406798032683e+00, 4.690406798032683e+00, 5.523726597390921e-01, 5.529226902618736e-01, 5.549181309675584e+00, 4.209707076333968e-01, 5.417039196303146e-01, 5.417039196303146e-01, 1.306830156206022e-03, 1.449398664321894e-03, 4.279349651524805e-02, 4.343805006873439e-04, 8.696239464066924e-04, 8.696239464066924e-04, 1.704905769404776e+02, 1.701931884497778e+02, 1.704788255449894e+02, 1.702162594044820e+02, 1.703387652399761e+02, 1.703387652399761e+02, 4.333079519329173e+01, 4.348465302533950e+01, 4.394791371952218e+01, 4.409020856038600e+01, 4.311108181974872e+01, 4.311108181974872e+01, 2.515517075608912e+00, 2.166826848998820e+00, 2.260007206781785e+00, 1.792148688045416e+00, 2.506335816398316e+00, 2.506335816398316e+00, 2.494525873155888e-01, 6.669290371105862e-01, 2.183386690333009e-01, 1.948933585008420e+01, 3.090998054153091e-01, 3.090998054153091e-01, 2.590088583529485e-04, 4.150937722695316e-04, 2.435813945505913e-04, 1.062381238050235e-01, 3.906953057326993e-04, 3.906953057326995e-04, 1.672242498878986e+00, 1.819779051179649e+00, 1.768561434735141e+00, 1.725588284721922e+00, 1.747130667534319e+00, 1.747130667534319e+00, 1.534901287783630e+00, 2.280059290728150e+00, 2.097788657385938e+00, 1.880814636409801e+00, 1.990501071276391e+00, 1.990501071276391e+00, 2.415657448985645e+00, 9.140058998917318e-01, 1.085875882523545e+00, 1.219257336800711e+00, 1.158334380244455e+00, 1.158334380244455e+00, 1.955787179429050e+00, 3.921408415506984e-02, 7.134807654282077e-02, 9.775796454822201e-01, 1.618369476468514e-01, 1.618369476468515e-01, 2.592864811224949e-03, 2.966056551360554e-05, 1.312846496973563e-04, 1.450465312345974e-01, 3.287220885126372e-04, 3.287220885126366e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_pbe2_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_pbe2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([2.585697770634942e+03, 2.585692745020713e+03, 2.585734956810981e+03, 2.585719747497972e+03, 2.585829834909031e+03, 2.585862446462277e+03, 2.585410515072035e+03, 2.585327796510137e+03, 2.585721165642798e+03, 2.585523780379031e+03, 2.585721165642798e+03, 2.585523780379031e+03, 6.333661162964469e+01, 6.335546128661432e+01, 6.333958333066949e+01, 6.335950144445729e+01, 6.342259289112292e+01, 6.344515627572618e+01, 6.329935664953471e+01, 6.332371098802457e+01, 6.330732867140207e+01, 6.339926082797419e+01, 6.330732867140207e+01, 6.339926082797419e+01, 2.092934169985199e+00, 2.124832365157995e+00, 2.082136160513914e+00, 2.120086585132409e+00, 1.984989654375898e+00, 1.975195954824780e+00, 2.007048046403981e+00, 2.010584168371686e+00, 2.187814357513318e+00, 2.137332515268513e+00, 2.187814357513318e+00, 2.137332515268513e+00, 3.079459621697151e-01, 2.974408264592333e-01, 2.957665785925360e-01, 2.850444788642812e-01, 2.771786073789495e+00, 3.082069567170764e+00, 3.640959372899328e-01, 3.686040905750422e-01, 3.259761420154570e-01, 2.995821332542563e-01, 3.259761420154570e-01, 2.995821332542560e-01, 2.031445881934592e-03, 2.293047744102722e-03, 2.229860757485136e-03, 2.557805513688183e-03, 6.434059163314464e-02, 7.112825436037573e-02, 7.353863344786148e-04, 7.111142056479426e-04, 1.617600536267076e-03, 5.243833638361238e-04, 1.617600536267076e-03, 5.243833638361247e-04, 1.643897119281193e+02, 1.643005489884821e+02, 1.647081755848480e+02, 1.646081378239789e+02, 1.644065800788991e+02, 1.643105315998634e+02, 1.646798410881792e+02, 1.645899629528868e+02, 1.645533905320829e+02, 1.644550791676845e+02, 1.645533905320829e+02, 1.644550791676845e+02, 1.797402774653472e+01, 1.797241203006013e+01, 1.816990424706717e+01, 1.816154900659409e+01, 1.798440160013192e+01, 1.797019862068261e+01, 1.812848739957797e+01, 1.812533745880843e+01, 1.813496980172340e+01, 1.807435322897015e+01, 1.813496980172340e+01, 1.807435322897015e+01, 1.876116743382570e+00, 1.867502327197182e+00, 2.761404857882598e+00, 2.771986817655915e+00, 1.476984970895152e+00, 1.624034540166513e+00, 2.027603629404510e+00, 2.156616331628969e+00, 2.097310868036005e+00, 1.873095188091377e+00, 2.097310868036005e+00, 1.873095188091376e+00, 3.086659690337077e-01, 3.100822747441223e-01, 4.936755399549059e-01, 4.941739126716506e-01, 2.702069053978182e-01, 2.877592870697679e-01, 2.524689462621300e+01, 2.522803807178756e+01, 3.305526896722921e-01, 3.089801632279408e-01, 3.305526896722921e-01, 3.089801632279408e-01, 4.139942239497159e-04, 4.471225615026537e-04, 6.807966743508494e-04, 7.015670192832832e-04, 3.805550205541445e-04, 4.267134601496181e-04, 1.533405145888076e-01, 1.554609496268975e-01, 3.971113207336763e-04, 7.483409009631534e-04, 3.971113207336765e-04, 7.483409009631532e-04, 2.521034897320642e+00, 2.543287144392514e+00, 2.339927659091648e+00, 2.362662012302064e+00, 2.401197336870409e+00, 2.424197144562174e+00, 2.454253811834158e+00, 2.476327609185805e+00, 2.427524790320487e+00, 2.450047656004685e+00, 2.427524790320487e+00, 2.450047656004685e+00, 2.434736382665502e+00, 2.451237392766870e+00, 1.134987322223556e+00, 1.147143198211400e+00, 1.362261200397210e+00, 1.380692841899850e+00, 1.712934414631432e+00, 1.728170830004525e+00, 1.522743532734228e+00, 1.537075036240526e+00, 1.522743532734228e+00, 1.537075036240526e+00, 2.999902234015334e+00, 3.023175473835997e+00, 5.275208594515975e-01, 5.259581697314869e-01, 4.874335422112291e-01, 4.815086097936728e-01, 5.563048327431305e-01, 5.628095682476880e-01, 4.637119378703609e-01, 4.615737046551178e-01, 4.637119378703609e-01, 4.615737046551176e-01, 9.551777922988823e-01, 9.717134874138820e-01, 6.231641144120282e-02, 6.311103631978565e-02, 1.067851106705083e-01, 1.129290882607279e-01, 5.359991204775076e-01, 5.573576434968722e-01, 2.076668229838750e-01, 2.137631684280679e-01, 2.076668229838748e-01, 2.137631684280679e-01, 4.147342301161067e-03, 4.451625462796789e-03, 4.931746502469921e-05, 4.954096351266137e-05, 2.041277740550810e-04, 2.308936310122152e-04, 1.928399093473880e-01, 1.975842072423336e-01, 3.561957979221483e-04, 6.288465739772165e-04, 3.561957979221475e-04, 6.288465739772147e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_pbe2_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_pbe2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.346591400345550e-05, 0.000000000000000e+00, 1.346597160751651e-05, 1.346585347934430e-05, 0.000000000000000e+00, 1.346592759758841e-05, 1.346554049790377e-05, 0.000000000000000e+00, 1.346551253405770e-05, 1.346622704516996e-05, 0.000000000000000e+00, 1.346638663328959e-05, 1.346588393276561e-05, 0.000000000000000e+00, 1.346594943205604e-05, 1.346588393276561e-05, 0.000000000000000e+00, 1.346594943205604e-05, 2.946867557711115e-03, 0.000000000000000e+00, 2.947766499779421e-03, 2.946937382660253e-03, 0.000000000000000e+00, 2.947902968403955e-03, 2.949303215337705e-03, 0.000000000000000e+00, 2.949871807279945e-03, 2.943775315438263e-03, 0.000000000000000e+00, 2.944507378420521e-03, 2.948039364440088e-03, 0.000000000000000e+00, 2.946415338643898e-03, 2.948039364440088e-03, 0.000000000000000e+00, 2.946415338643898e-03, 3.583175546317551e-01, 0.000000000000000e+00, 3.602834887836323e-01, 3.578385850506028e-01, 0.000000000000000e+00, 3.602725983369914e-01, 3.507397532738148e-01, 0.000000000000000e+00, 3.464439867380281e-01, 3.413057707309925e-01, 0.000000000000000e+00, 3.427967037077981e-01, 3.611367400140681e-01, 0.000000000000000e+00, 3.132322615831533e-01, 3.611367400140681e-01, 0.000000000000000e+00, 3.132322615831533e-01, 9.247551378317876e+00, 0.000000000000000e+00, 9.063185729539558e+00, 9.424896721443432e+00, 0.000000000000000e+00, 9.160143238747485e+00, 2.385645404857086e-01, 0.000000000000000e+00, 2.303717893958085e-01, 9.174433357991292e+00, 0.000000000000000e+00, 9.013905352535099e+00, 8.333733601327920e+00, 0.000000000000000e+00, 9.296774539973933e+00, 8.333733601327920e+00, 0.000000000000000e+00, 9.296774539973949e+00, 1.114442275231146e+00, 0.000000000000000e+00, 1.172383599534460e+00, 1.230481039135717e+00, 0.000000000000000e+00, 1.311452535852470e+00, 3.808374084251219e+00, 0.000000000000000e+00, 4.045488496589813e+00, 6.135445297271536e-01, 0.000000000000000e+00, 5.869415121189752e-01, 9.924882435645700e-01, 0.000000000000000e+00, 1.432929220881277e+00, 9.924882435647049e-01, 0.000000000000000e+00, 1.432929220876640e+00, 9.689263087059402e-04, 0.000000000000000e+00, 9.695869192426893e-04, 9.692690632414027e-04, 0.000000000000000e+00, 9.699186826219327e-04, 9.689385743834039e-04, 0.000000000000000e+00, 9.695934629780383e-04, 9.692327855997834e-04, 0.000000000000000e+00, 9.698949389774308e-04, 9.691073852825150e-04, 0.000000000000000e+00, 9.697546570906095e-04, 9.691073852825150e-04, 0.000000000000000e+00, 9.697546570906095e-04, 1.256974901610739e-02, 0.000000000000000e+00, 1.257130894361500e-02, 1.242082264945261e-02, 0.000000000000000e+00, 1.242800974776308e-02, 1.245981169775202e-02, 0.000000000000000e+00, 1.249690094468506e-02, 1.233700896166924e-02, 0.000000000000000e+00, 1.236811176843666e-02, 1.255472195242958e-02, 0.000000000000000e+00, 1.250724193384975e-02, 1.255472195242958e-02, 0.000000000000000e+00, 1.250724193384975e-02, 6.287744130168647e-01, 0.000000000000000e+00, 6.341158438843134e-01, 5.629948967004846e-01, 0.000000000000000e+00, 5.630776352736463e-01, 8.140449535637794e-01, 0.000000000000000e+00, 7.438980948622189e-01, 8.379200450817701e-01, 0.000000000000000e+00, 7.581605738847281e-01, 5.718681083162007e-01, 0.000000000000000e+00, 6.617892769308510e-01, 5.718681083162009e-01, 0.000000000000000e+00, 6.617892769308512e-01, 7.070648897859143e+00, 0.000000000000000e+00, 7.257123118564470e+00, 5.619094031940446e+00, 0.000000000000000e+00, 5.595488013985254e+00, 7.202859304979844e+00, 0.000000000000000e+00, 7.372667254885005e+00, 2.065683382466215e-02, 0.000000000000000e+00, 2.068631428371646e-02, 8.866600546453112e+00, 0.000000000000000e+00, 1.123390377785852e+01, 8.866600546453112e+00, 0.000000000000000e+00, 1.123390377785852e+01, 6.461256819257438e-01, 0.000000000000000e+00, 5.811905651462428e-01, 7.136004760377022e-01, 0.000000000000000e+00, 6.688220302992143e-01, 3.039575302501972e+00, 0.000000000000000e+00, 3.581007263828722e+00, 7.317963372120349e+00, 0.000000000000000e+00, 7.094219491535869e+00, 1.543754812567915e+00, 0.000000000000000e+00, 2.082572456822424e+00, 1.543754812567400e+00, 0.000000000000000e+00, 2.082572456823367e+00, 7.401267622716341e-01, 0.000000000000000e+00, 7.319960381249846e-01, 7.295266809469489e-01, 0.000000000000000e+00, 7.217442009906102e-01, 7.332224186830937e-01, 0.000000000000000e+00, 7.253429889410867e-01, 7.363490866388778e-01, 0.000000000000000e+00, 7.283205325037234e-01, 7.347877592394202e-01, 0.000000000000000e+00, 7.268313981838186e-01, 7.347877592394202e-01, 0.000000000000000e+00, 7.268313981838186e-01, 8.107968882659502e-01, 0.000000000000000e+00, 8.028692599913220e-01, 9.210411626839937e-01, 0.000000000000000e+00, 9.130091562514795e-01, 8.969032698828304e-01, 0.000000000000000e+00, 8.885759868020786e-01, 8.680522844138040e-01, 0.000000000000000e+00, 8.599139122501362e-01, 8.846823095248123e-01, 0.000000000000000e+00, 8.760898926728362e-01, 8.846823095248123e-01, 0.000000000000000e+00, 8.760898926728362e-01, 4.868191640876971e-01, 0.000000000000000e+00, 4.855777606859585e-01, 4.212275647987227e+00, 0.000000000000000e+00, 4.193644409886704e+00, 3.501165509306889e+00, 0.000000000000000e+00, 3.483403397665455e+00, 2.487991084810418e+00, 0.000000000000000e+00, 2.457068645626439e+00, 3.033795429727641e+00, 0.000000000000000e+00, 3.050464994055438e+00, 3.033795429727642e+00, 0.000000000000000e+00, 3.050464994055440e+00, 1.172423068440870e+00, 0.000000000000000e+00, 1.157922212691229e+00, 3.417747074077231e+00, 0.000000000000000e+00, 3.445302011904366e+00, 4.535489837572674e+00, 0.000000000000000e+00, 4.789582443168531e+00, 3.117134906873010e+00, 0.000000000000000e+00, 3.014283789737226e+00, 9.053949795108471e+00, 0.000000000000000e+00, 1.118827104743910e+01, 9.053949795108517e+00, 0.000000000000000e+00, 1.118827104743913e+01, 1.263514273077980e+00, 0.000000000000000e+00, 1.336673166142170e+00, 6.859598374186172e-01, 0.000000000000000e+00, 1.217854186888611e+00, 8.614629779724233e-01, 0.000000000000000e+00, 9.753985948323849e-01, 9.678921258579678e+00, 0.000000000000000e+00, 9.631528528876521e+00, 3.014809524291297e+00, 0.000000000000000e+00, 1.981576511732720e+00, 3.014809524289714e+00, 0.000000000000000e+00, 1.981576511732711e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
