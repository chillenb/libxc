
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_absp3_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_absp3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.033792088011023e+02, -1.034082091610346e+02, -1.034917185945686e+02, -1.030611824711216e+02, -1.032932346642501e+02, -1.032932346642501e+02, 6.981404901149850e+00, 6.974267236830221e+00, 6.809699765367608e+00, 7.098613750919523e+00, 6.973183377751128e+00, 6.973183377751128e+00, 1.148856883396625e+00, 1.173456752798480e+00, 1.849966205308277e+00, 1.841336282831096e+00, 1.811869547564493e+00, 1.811869547564493e+00, 5.435175808422235e-01, 5.180130102397797e-01, 1.237193379708740e+00, 7.259240431819100e-01, 6.252403144687847e-01, 6.252403144687850e-01, 7.295178741076398e-01, 7.096079509804150e-01, 9.153500087258210e-01, 7.660439431202233e-01, 6.793803732695219e-01, 6.793803732695211e-01, -2.166088724935419e+01, -2.200028877830354e+01, -2.167497958963445e+01, -2.197463363967150e+01, -2.183381332199100e+01, -2.183381332199100e+01, 1.829721254011470e+01, 1.792883486617323e+01, 1.955820551781398e+01, 1.923067280460793e+01, 1.748926995931913e+01, 1.748926995931913e+01, 5.920241375104707e-02, -6.710878816669237e-01, 1.548761443936075e-01, -4.464629673809944e-01, -3.335116127876168e-02, -3.335116127876168e-02, 9.025530720602757e-01, 9.273271055015958e-01, 8.830772119265615e-01, -6.228623377991930e+00, 7.137256174198071e-01, 7.137256174198071e-01, 6.674533827496399e-01, 7.061103275733822e-01, 2.817028308204130e-01, 8.032051482557866e-01, 4.129532382648730e-01, 4.129532382648735e-01, -7.285468560534881e-01, -5.787680709391452e-01, -6.313749708384416e-01, -6.749703604577209e-01, -6.531674552254561e-01, -6.531674552254561e-01, -7.294219568347694e-01, 5.839523637480931e-01, 2.022254137574580e-01, -1.798322752349029e-01, 1.040699293188465e-02, 1.040699293188465e-02, -7.080800798101313e-01, 9.528472369473284e-01, 8.225138070253596e-01, 3.888082718175876e-01, 6.126036141648495e-01, 6.126036141648494e-01, 5.216436750226969e-01, 9.630151369882982e-01, 9.372678381647694e-01, 1.819164119436181e-01, 7.021832145593350e-01, 7.021832145593346e-01, 8.116964637805044e-01, 3.188758633576737e-01, 4.582941198073028e-01, 7.148259571105970e-01, 3.674473956818558e-01, 3.674473956818554e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_absp3_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_absp3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.725996807948868e+03, -2.725983589139770e+03, -2.725975112021839e+03, -2.726170750603210e+03, -2.726061086254677e+03, -2.726061086254677e+03, -8.197868671113119e+01, -8.197187279561818e+01, -8.181846416507560e+01, -8.211646179079482e+01, -8.197446917134002e+01, -8.197446917134002e+01, -3.938973634855629e+00, -3.957424527983842e+00, -4.488015453418099e+00, -4.523361958003449e+00, -4.484512674585262e+00, -4.484512674585262e+00, -7.295430782495952e-01, -7.097158721791738e-01, -5.030841412971315e+00, -8.331407864444835e-01, -7.604351921255517e-01, -7.604351921255516e-01, -7.297433019486265e-01, -7.098576897330838e-01, -9.229516643916246e-01, -7.661191328531057e-01, -6.794990967000850e-01, -6.794990967000840e-01, -1.464565210359887e+02, -1.461788535229691e+02, -1.464455031111211e+02, -1.462003451814293e+02, -1.463147610707285e+02, -1.463147610707285e+02, -4.204984377713345e+01, -4.202729512740863e+01, -4.305994571295333e+01, -4.303629103167818e+01, -4.155502659414129e+01, -4.155502659414129e+01, -2.194102640559762e+00, -1.848438264660433e+00, -1.982743669117478e+00, -1.528699291377143e+00, -2.170942670280985e+00, -2.170942670280985e+00, -9.542348526214001e-01, -1.113918039806558e+00, -9.273094602574153e-01, -1.662428007884177e+01, -7.849007644409427e-01, -7.849007644409427e-01, -6.674981443209043e-01, -7.061821848385708e-01, -2.817448448053061e-01, -8.232143279721930e-01, -4.130142122324268e-01, -4.130142122324271e-01, -1.427135626994407e+00, -1.552254296852590e+00, -1.508308737275193e+00, -1.471860578408326e+00, -1.490084486845456e+00, -1.490084486845456e+00, -1.310978045043608e+00, -2.087520219075450e+00, -1.850953053040681e+00, -1.619478320391521e+00, -1.731989368616590e+00, -1.731989368616590e+00, -2.061072083191361e+00, -1.250697864789313e+00, -1.252096628939122e+00, -1.138290204379099e+00, -1.179417654084089e+00, -1.179417654084089e+00, -1.796036269199142e+00, -9.699789530035301e-01, -9.502114383170418e-01, -8.784286965923616e-01, -7.346248685188246e-01, -7.346248685188242e-01, -8.121454681675179e-01, -3.188809977543590e-01, -4.583167418910103e-01, -7.434330498720103e-01, -3.674996018234408e-01, -3.674996018234405e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_absp3_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_absp3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [6.465558408889447e-06, 6.465504314368241e-06, 6.465247135945692e-06, 6.466052320295342e-06, 6.465632777057505e-06, 6.465632777057505e-06, 1.498213674029333e-03, 1.498203972832304e-03, 1.497869659939608e-03, 1.497597610737780e-03, 1.498093701227576e-03, 1.498093701227576e-03, 2.087894145121824e-01, 2.094815290984875e-01, 2.271002921854555e-01, 2.215377010814852e-01, 2.227053156391256e-01, 2.227053156391256e-01, 1.212783639246232e+01, 1.159308837356066e+01, 1.316911190273232e-01, 2.771712142089699e+01, 1.957499616309466e+01, 1.957499616309467e+01, 2.874952765754121e+05, 2.465546137483149e+05, 1.468181512983260e+03, 1.492465251230529e+06, 7.522070256195640e+05, 7.522070256195640e+05, 4.463987932311861e-04, 4.461530243974384e-04, 4.463865483604211e-04, 4.461695925050767e-04, 4.462746898771731e-04, 4.462746898771731e-04, 8.405710951977129e-03, 8.225420308312626e-03, 8.540671341115708e-03, 8.377662191483195e-03, 8.242192632024159e-03, 8.242192632024159e-03, 3.119433029115474e-01, 2.433121166868861e-01, 3.937539884428952e-01, 3.505402349909846e-01, 2.973293717959445e-01, 2.973293717959445e-01, 8.282011699658827e+01, 1.207275069070744e+01, 1.046004417152880e+02, 8.906969473199959e-03, 5.124476217261497e+01, 5.124476217261497e+01, 3.249256950004610e+06, 1.597482152034641e+06, 3.573149841128374e+06, 3.437938582102904e+02, 2.043738650702208e+06, 2.043738650702208e+06, 3.074431719955891e-01, 3.127951632558527e-01, 3.108978161438085e-01, 3.093465472861635e-01, 3.101217331306696e-01, 3.101217331306696e-01, 3.338635972182413e-01, 5.277855463435615e-01, 4.596408969843099e-01, 4.031650116453307e-01, 4.307748394546119e-01, 4.307748394546119e-01, 2.111649385648006e-01, 5.986104049931646e+00, 3.455983667980389e+00, 1.499685834607408e+00, 2.280243059795127e+00, 2.280243059795128e+00, 6.763744328316319e-01, 1.674445854271037e+03, 6.607838326576669e+02, 1.673974624492028e+00, 1.665281126261038e+02, 1.665281126261038e+02, 1.022742173599572e+05, 8.363882291868500e+07, 9.043637243187241e+06, 2.011089761174724e+02, 2.579643228134502e+06, 2.579643228134509e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
