
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_yt65_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_yt65", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.259784681703905e+03, 2.259791601481429e+03, 2.259835375193330e+03, 2.259732156537739e+03, 2.259784390692230e+03, 2.259784390692230e+03, 6.184365232500346e+01, 6.184248583937716e+01, 6.181856608799418e+01, 6.188367044534696e+01, 6.184524588959200e+01, 6.184524588959200e+01, 2.478690791490339e+00, 2.478702218996743e+00, 2.496516682749735e+00, 2.529993580870803e+00, 2.543669990061726e+00, 2.543669990061726e+00, 2.588993580600140e-01, 2.584518372336616e-01, 3.309803796545326e+00, 2.316288108767832e-01, 2.644058118675294e-01, 2.644058118675294e-01, 1.460868187358481e-01, 1.421242166797956e-01, 1.892180202672227e-01, 1.532768468411617e-01, 1.373727334108369e-01, 1.373727334108367e-01, 1.311694793150087e+02, 1.311513567369492e+02, 1.311691391353754e+02, 1.311531316162230e+02, 1.311600141296531e+02, 1.311600141296531e+02, 2.280392585617047e+01, 2.300898828709164e+01, 2.285404804091927e+01, 2.303346657334339e+01, 2.289546693141413e+01, 2.289546693141413e+01, 1.732585723690319e+00, 1.896513192608376e+00, 1.506407214425893e+00, 1.504655505521500e+00, 1.775267456531995e+00, 1.775267456531996e+00, 2.221725373894446e-01, 3.358611656086053e-01, 2.123769034952419e-01, 1.717358626967334e+01, 2.008539148982131e-01, 2.008539148982131e-01, 1.335901556548040e-01, 1.413591614135210e-01, 5.638464248911364e-02, 1.767822224878986e-01, 8.280784712120473e-02, 8.280784712120484e-02, 1.591787979274481e+00, 1.601868052792790e+00, 1.598327775619304e+00, 1.595368879040777e+00, 1.596845025732419e+00, 1.596845025732419e+00, 1.498687670976655e+00, 1.328683556780365e+00, 1.369340400934086e+00, 1.414288226592327e+00, 1.389689380132698e+00, 1.389689380132698e+00, 2.090336498234350e+00, 4.306446831852064e-01, 5.107892400609156e-01, 6.818628180060869e-01, 5.793821947024187e-01, 5.793821947024187e-01, 1.131569340251176e+00, 1.982164368431797e-01, 1.979178530849793e-01, 5.979663861211963e-01, 1.669459011079648e-01, 1.669459011079648e-01, 1.627358656442969e-01, 6.412261067897296e-02, 9.168351998042068e-02, 1.660415175614975e-01, 7.425224505146809e-02, 7.425224505146800e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_yt65_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_yt65", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.255572106933038e+03, 3.255564247990305e+03, 3.255599730317545e+03, 3.255584311571834e+03, 3.255683445122726e+03, 3.255705572975424e+03, 3.255371605927192e+03, 3.255308069665256e+03, 3.255588817326272e+03, 3.255463535320776e+03, 3.255588817326272e+03, 3.255463535320776e+03, 8.434646625569539e+01, 8.435329288872485e+01, 8.434813703271404e+01, 8.435521730797400e+01, 8.439121352531484e+01, 8.440348409305477e+01, 8.434373914146275e+01, 8.435616359847309e+01, 8.431466191112743e+01, 8.439752462268044e+01, 8.431466191112743e+01, 8.439752462268044e+01, 2.936468486385695e+00, 2.983730423771315e+00, 2.919081761563799e+00, 2.977086871647369e+00, 2.686805308650450e+00, 2.604716857906532e+00, 2.684704398941810e+00, 2.711523041969119e+00, 3.064740321030981e+00, 2.242579002088154e+00, 3.064740321030981e+00, 2.242579002088154e+00, 9.330064639865578e-02, 1.142649922916408e-01, 1.032963225341239e-01, 1.273700066335664e-01, 3.891647982739102e+00, 4.279743054326580e+00, -2.371291682861130e-02, -2.149320546543154e-02, 1.055150988913141e-01, -8.873363566915628e-02, 1.055150988913139e-01, -8.873363566915596e-02, -1.452754749196003e-01, -1.459536556981197e-01, -1.414734394984541e-01, -1.417655726000775e-01, -1.755636403786226e-01, -1.733105254061944e-01, -1.520993624745456e-01, -1.542143883495473e-01, -1.454886668732195e-01, -9.144445507384204e-02, -1.454886668732192e-01, -9.144445507384194e-02, 1.965932282177842e+02, 1.964963176886343e+02, 1.967340919987930e+02, 1.966323773296453e+02, 1.966011504423405e+02, 1.965010618042607e+02, 1.967220212032062e+02, 1.966246666852583e+02, 1.966653236443122e+02, 1.965646576606134e+02, 1.966653236443122e+02, 1.965646576606134e+02, 2.349885967185841e+01, 2.349613953178283e+01, 2.397460091070342e+01, 2.395853678621011e+01, 2.286730974315554e+01, 2.304918286856207e+01, 2.327893356117537e+01, 2.346343881903296e+01, 2.422844845930262e+01, 2.380369307599797e+01, 2.422844845930262e+01, 2.380369307599797e+01, 2.435218973623825e+00, 2.422831201443384e+00, 3.012667577108630e+00, 3.017019624904408e+00, 1.976136158646452e+00, 2.139964794170141e+00, 2.271126638009248e+00, 2.422836152084452e+00, 2.658047318281647e+00, 2.392827370271446e+00, 2.658047318281647e+00, 2.392827370271446e+00, -1.233879782491831e-01, -1.195013174721380e-01, 2.677916264611479e-02, 2.895483032095839e-02, -1.292656872595781e-01, -1.229493969875327e-01, 2.738590966642653e+01, 2.736206439277880e+01, -8.077404806441077e-02, -4.535554692803728e-02, -8.077404806441077e-02, -4.535554692803728e-02, -1.284181077324630e-01, -1.380328537314290e-01, -1.383382236399034e-01, -1.439729324809363e-01, -5.794234917019202e-02, -5.492171670352085e-02, -1.363530285938067e-01, -1.391733233299561e-01, -8.219789965252518e-02, -8.286050016224711e-02, -8.219789965252532e-02, -8.286050016224721e-02, 2.600031543457088e+00, 2.620649758281595e+00, 2.541807097476080e+00, 2.562572532611943e+00, 2.562193396884596e+00, 2.583034327410194e+00, 2.579231169758625e+00, 2.599779245620164e+00, 2.570708090383323e+00, 2.591396620277360e+00, 2.570708090383323e+00, 2.591396620277360e+00, 2.470501553940683e+00, 2.486925932833928e+00, 1.593782672907164e+00, 1.610740168253349e+00, 1.834887115113060e+00, 1.854249090744691e+00, 2.085364317545138e+00, 2.100941373205425e+00, 1.958414645890545e+00, 1.974057063288082e+00, 1.958414645890545e+00, 1.974057063288082e+00, 3.300861645507916e+00, 3.314382975600037e+00, 1.476181844330818e-01, 1.523112126834464e-01, 3.199162026215316e-01, 3.333002738939362e-01, 7.740718328226632e-01, 7.841867696631566e-01, 5.250030399867055e-01, 5.260347857401655e-01, 5.250030399867053e-01, 5.260347857401654e-01, 1.340813304973648e+00, 1.364488949428742e+00, -1.847999642740346e-01, -1.844851710737530e-01, -1.746952713438747e-01, -1.708019110618305e-01, 7.465804850923855e-01, 7.730990977337726e-01, -1.146248411116845e-01, -9.400183089358283e-02, -1.146248411116845e-01, -9.400183089358287e-02, -1.627801454989722e-01, -1.610316266292975e-01, -7.325182647387969e-02, -5.503575721898597e-02, -9.321095598609155e-02, -9.033283297442887e-02, -1.103181384978027e-01, -1.102024158421468e-01, -5.722883722022747e-02, -8.134786492766084e-02, -5.722883722022735e-02, -8.134786492766080e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_yt65_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_yt65", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [2.586218368103754e-06, 0.000000000000000e+00, 2.586228359027098e-06, 2.586193302194293e-06, 0.000000000000000e+00, 2.586210149355174e-06, 2.586108166943511e-06, 0.000000000000000e+00, 2.586089541880110e-06, 2.586391376268996e-06, 0.000000000000000e+00, 2.586450480642600e-06, 2.586203668030978e-06, 0.000000000000000e+00, 2.586302555505545e-06, 2.586203668030978e-06, 0.000000000000000e+00, 2.586302555505545e-06, 5.992732047429347e-04, 0.000000000000000e+00, 5.992977349825741e-04, 5.992675840696103e-04, 0.000000000000000e+00, 5.992955948508536e-04, 5.991663666077972e-04, 0.000000000000000e+00, 5.991293624866002e-04, 5.990516552016863e-04, 0.000000000000000e+00, 5.990264339194817e-04, 5.995739295755447e-04, 0.000000000000000e+00, 5.989014087895069e-04, 5.995739295755447e-04, 0.000000000000000e+00, 5.989014087895069e-04, 8.401430061398110e-02, 0.000000000000000e+00, 8.302311263385319e-02, 8.440777975744272e-02, 0.000000000000000e+00, 8.318634539602748e-02, 8.990788310823357e-02, 0.000000000000000e+00, 9.179188541848432e-02, 8.890366229721193e-02, 0.000000000000000e+00, 8.832836598354295e-02, 8.114183825383028e-02, 0.000000000000000e+00, 9.874500546857959e-02, 8.114183825383028e-02, 0.000000000000000e+00, 9.874500546857959e-02, 5.145341791216794e+00, 0.000000000000000e+00, 4.588752717200070e+00, 4.959729386315004e+00, 0.000000000000000e+00, 4.354119580167264e+00, 5.542297357857239e-02, 0.000000000000000e+00, 5.018928109969503e-02, 1.131953631155387e+01, 0.000000000000000e+00, 1.086353453287172e+01, 4.519499885361363e+00, 0.000000000000000e+00, 2.927017283230333e+01, 4.519499885361362e+00, 0.000000000000000e+00, 2.927017283230332e+01, 1.264900602846838e+05, 0.000000000000000e+00, 1.054203946778537e+05, 1.099312545484201e+05, 0.000000000000000e+00, 8.942233471776912e+04, 6.394319842051244e+02, 0.000000000000000e+00, 5.429808803009447e+02, 5.823120385623814e+05, 0.000000000000000e+00, 6.124188434912604e+05, 1.781649238071953e+05, 0.000000000000000e+00, 9.668102302436767e+05, 1.781649238071953e+05, 0.000000000000000e+00, 9.668102302436758e+05, 1.784953748474328e-04, 0.000000000000000e+00, 1.786237058533580e-04, 1.783954120111039e-04, 0.000000000000000e+00, 1.785270560612457e-04, 1.784892854095027e-04, 0.000000000000000e+00, 1.786200011258074e-04, 1.784035168202645e-04, 0.000000000000000e+00, 1.785322035794950e-04, 1.784445765124754e-04, 0.000000000000000e+00, 1.785752231976935e-04, 1.784445765124754e-04, 0.000000000000000e+00, 1.785752231976935e-04, 3.362029542490492e-03, 0.000000000000000e+00, 3.362539257727088e-03, 3.288825404250548e-03, 0.000000000000000e+00, 3.291511939223288e-03, 3.425146996871993e-03, 0.000000000000000e+00, 3.407435985441173e-03, 3.360138214065635e-03, 0.000000000000000e+00, 3.342040408389961e-03, 3.275314430772380e-03, 0.000000000000000e+00, 3.318725465956074e-03, 3.275314430772380e-03, 0.000000000000000e+00, 3.318725465956074e-03, 1.242831102785975e-01, 0.000000000000000e+00, 1.252754781944557e-01, 9.739115207684922e-02, 0.000000000000000e+00, 9.725863149472097e-02, 1.665103398492243e-01, 0.000000000000000e+00, 1.494176218754603e-01, 1.474392212642794e-01, 0.000000000000000e+00, 1.336676437655923e-01, 1.104768674362473e-01, 0.000000000000000e+00, 1.287879949452551e-01, 1.104768674362474e-01, 0.000000000000000e+00, 1.287879949452551e-01, 3.360645004220681e+01, 0.000000000000000e+00, 3.266307296087883e+01, 4.865430911060050e+00, 0.000000000000000e+00, 4.793308188724485e+00, 4.539674843432298e+01, 0.000000000000000e+00, 3.880039123771245e+01, 3.560387901591653e-03, 0.000000000000000e+00, 3.565190914450227e-03, 2.243269075553610e+01, 0.000000000000000e+00, 1.887036429002483e+01, 2.243269075553610e+01, 0.000000000000000e+00, 1.887036429002483e+01, 1.379249229434139e+06, 0.000000000000000e+00, 1.228831483243708e+06, 6.537203020683650e+05, 0.000000000000000e+00, 6.249143783689825e+05, 1.563443970769803e+06, 0.000000000000000e+00, 1.316288270227684e+06, 1.387936884704278e+02, 0.000000000000000e+00, 1.362646514492797e+02, 1.467442781896604e+06, 0.000000000000000e+00, 5.665596577751461e+05, 1.467442781896604e+06, 0.000000000000000e+00, 5.665596577751462e+05, 1.236931128503225e-01, 0.000000000000000e+00, 1.222696626209718e-01, 1.258537387362079e-01, 0.000000000000000e+00, 1.243909425899290e-01, 1.250900788365305e-01, 0.000000000000000e+00, 1.236366669572538e-01, 1.244592465600463e-01, 0.000000000000000e+00, 1.230262881969150e-01, 1.247744001512569e-01, 0.000000000000000e+00, 1.233313791828246e-01, 1.247744001512569e-01, 0.000000000000000e+00, 1.233313791828246e-01, 1.342098223746834e-01, 0.000000000000000e+00, 1.328876008385350e-01, 2.124920909185276e-01, 0.000000000000000e+00, 2.097541002370659e-01, 1.850857232215297e-01, 0.000000000000000e+00, 1.826432178174424e-01, 1.621195901605774e-01, 0.000000000000000e+00, 1.604213606051868e-01, 1.732736283294829e-01, 0.000000000000000e+00, 1.713569034454828e-01, 1.732736283294829e-01, 0.000000000000000e+00, 1.713569034454828e-01, 8.467277050897104e-02, 0.000000000000000e+00, 8.426018798719657e-02, 2.415358361713549e+00, 0.000000000000000e+00, 2.373884041352907e+00, 1.403399701955688e+00, 0.000000000000000e+00, 1.362006805666232e+00, 6.048771674250151e-01, 0.000000000000000e+00, 5.949535765507008e-01, 9.116147586170799e-01, 0.000000000000000e+00, 9.125802001717519e-01, 9.116147586170807e-01, 0.000000000000000e+00, 9.125802001717523e-01, 2.733636162823805e-01, 0.000000000000000e+00, 2.677932678503053e-01, 6.766996731706879e+02, 0.000000000000000e+00, 6.629971605015782e+02, 2.780345527714229e+02, 0.000000000000000e+00, 2.518830894368532e+02, 6.849648365424560e-01, 0.000000000000000e+00, 6.548899359502591e-01, 7.251414727449293e+01, 0.000000000000000e+00, 6.159703361211923e+01, 7.251414727449293e+01, 0.000000000000000e+00, 6.159703361211925e+01, 4.321605270998035e+04, 0.000000000000000e+00, 3.883702242781567e+04, 3.357048886888137e+07, 0.000000000000000e+00, 3.334135412137083e+07, 3.984855775175913e+06, 0.000000000000000e+00, 3.312083176127314e+06, 8.244933830275104e+01, 0.000000000000000e+00, 7.853311274353833e+01, 1.726708709813023e+06, 0.000000000000000e+00, 7.357723441249704e+05, 1.726708709813027e+06, 0.000000000000000e+00, 7.357723441249727e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
