
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_tkvln_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tkvln", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [3.026027301409258e+03, 3.026015755445299e+03, 3.026015231756380e+03, 3.026185971187114e+03, 3.026089279955945e+03, 3.026089279955945e+03, 9.000744460386271e+01, 9.000066505952407e+01, 8.984844112037047e+01, 9.014740312117141e+01, 9.000365215170410e+01, 9.000365215170410e+01, 4.277368030696109e+00, 4.295146264719456e+00, 4.809762161297749e+00, 4.849925746995485e+00, 4.810048911644498e+00, 4.810048911644498e+00, 7.700755630972573e-01, 7.510507248647121e-01, 5.478564761127625e+00, 8.618097828139591e-01, 7.935082352121117e-01, 7.935082352121120e-01, 7.293477461581245e-01, 7.094360432177648e-01, 9.286073205417147e-01, 7.667009564518995e-01, 6.795198681574086e-01, 6.795198681574078e-01, 1.643662213010665e+02, 1.640951022780108e+02, 1.643555294975547e+02, 1.641161522917086e+02, 1.642277673082350e+02, 1.642277673082350e+02, 4.463282252044831e+01, 4.464709902437254e+01, 4.561620723871479e+01, 4.562491217078335e+01, 4.417134818310288e+01, 4.417134818310288e+01, 2.460548889189747e+00, 2.157190408447363e+00, 2.215230754168271e+00, 1.777502141087377e+00, 2.445038959451213e+00, 2.445038959451213e+00, 9.728552107983779e-01, 1.154530666335533e+00, 9.443241488410112e-01, 1.911144172696001e+01, 8.073444652839025e-01, 8.073444652839025e-01, 6.689823529405061e-01, 7.068316409500291e-01, 2.833585578619828e-01, 8.338942798433249e-01, 4.139267300652888e-01, 4.139267300652893e-01, 1.695873819051917e+00, 1.818272795825417e+00, 1.775282593732289e+00, 1.739622683309422e+00, 1.757451885366069e+00, 1.757451885366069e+00, 1.566992497254958e+00, 2.283888567607072e+00, 2.063525915336001e+00, 1.848796389894344e+00, 1.952671433629694e+00, 1.952671433629694e+00, 2.397172916380427e+00, 1.306332006296234e+00, 1.324380812333820e+00, 1.248833001796874e+00, 1.268374487241475e+00, 1.268374487241475e+00, 1.966667016967333e+00, 9.752792701306358e-01, 9.583524325116987e-01, 9.827655602777982e-01, 7.488396005715463e-01, 7.488396005715461e-01, 8.117911038914295e-01, 3.271667113954612e-01, 4.614167287303559e-01, 7.566408602750314e-01, 3.686867596886184e-01, 3.686867596886180e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_tkvln_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tkvln", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [2.489603041604349e+03, 2.489645351015246e+03, 2.489792137431043e+03, 2.489163505227437e+03, 2.489498770728214e+03, 2.489498770728214e+03, 5.635365754189890e+01, 5.636106828991300e+01, 5.653504829787372e+01, 5.625379640670364e+01, 5.636525644494686e+01, 5.636525644494686e+01, 1.253089889732103e+00, 1.223282009025879e+00, 4.231701431616720e-01, 4.690537333487652e-01, 4.905724559218894e-01, 4.905724559218894e-01, -3.613849821523769e-01, -3.308710942300445e-01, 2.014228704734179e+00, -6.141453242794355e-01, -4.882675488556054e-01, -4.882675488556054e-01, -7.299693596277729e-01, -7.099965330462552e-01, -9.018702425401793e-01, -7.663907492537767e-01, -6.799391581453866e-01, -6.799391581453855e-01, 1.635376624255579e+02, 1.639291310063081e+02, 1.635543477568622e+02, 1.638999643492527e+02, 1.637368742875881e+02, 1.637368742875881e+02, 1.807083663310205e+00, 2.467286440333779e+00, 3.343767492434088e-01, 9.183362083122053e-01, 2.879254750449081e+00, 2.879254750449081e+00, 1.787500042690148e+00, 2.843807195226002e+00, 1.431375153355646e+00, 2.157688552726480e+00, 1.938891802560575e+00, 1.938891802560575e+00, -8.422769474177509e-01, -7.446953458150115e-01, -8.300075272952232e-01, 2.557367991447166e+01, -6.350310330015574e-01, -6.350310330015574e-01, -6.672801564394878e-01, -7.064234162268204e-01, -2.814460846458368e-01, -7.748810507972856e-01, -4.131252571661616e-01, -4.131252571661617e-01, 2.592871347584154e+00, 2.422182256517226e+00, 2.482133589761221e+00, 2.531789405521142e+00, 2.506951736403748e+00, 2.506951736403748e+00, 2.495983402412282e+00, 7.269289746972385e-01, 1.231954974573260e+00, 1.741847766140911e+00, 1.485630545249556e+00, 1.485630545249556e+00, 3.092270248340386e+00, -6.728343827342469e-01, -4.284667539973636e-01, 2.797546446406426e-01, -1.005069259794959e-01, -1.005069259794952e-01, 5.944076408812233e-01, -9.504218227396261e-01, -9.169946269185656e-01, 4.413336273957074e-01, -6.608221646123513e-01, -6.608221646123509e-01, -8.114637678631351e-01, -3.134329777541291e-01, -4.569949934450450e-01, -6.773864520866278e-01, -3.674589697866730e-01, -3.674589697866729e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_tkvln_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tkvln", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [6.465558408889447e-06, 6.465504314368241e-06, 6.465247135945692e-06, 6.466052320295342e-06, 6.465632777057505e-06, 6.465632777057505e-06, 1.498213674029333e-03, 1.498203972832304e-03, 1.497869659939608e-03, 1.497597610737780e-03, 1.498093701227576e-03, 1.498093701227576e-03, 2.087894145121824e-01, 2.094815290984875e-01, 2.271002921854555e-01, 2.215377010814852e-01, 2.227053156391256e-01, 2.227053156391256e-01, 1.212783639246232e+01, 1.159308837356066e+01, 1.316911190273232e-01, 2.771712142089699e+01, 1.957499616309466e+01, 1.957499616309467e+01, 2.874952765754121e+05, 2.465546137483149e+05, 1.468181512983260e+03, 1.492465251230529e+06, 7.522070256195640e+05, 7.522070256195640e+05, 4.463987932311861e-04, 4.461530243974384e-04, 4.463865483604211e-04, 4.461695925050767e-04, 4.462746898771731e-04, 4.462746898771731e-04, 8.405710951977129e-03, 8.225420308312626e-03, 8.540671341115708e-03, 8.377662191483195e-03, 8.242192632024159e-03, 8.242192632024159e-03, 3.119433029115474e-01, 2.433121166868861e-01, 3.937539884428952e-01, 3.505402349909846e-01, 2.973293717959445e-01, 2.973293717959445e-01, 8.282011699658827e+01, 1.207275069070744e+01, 1.046004417152880e+02, 8.906969473199959e-03, 5.124476217261497e+01, 5.124476217261497e+01, 3.249256950004610e+06, 1.597482152034641e+06, 3.573149841128374e+06, 3.437938582102904e+02, 2.043738650702208e+06, 2.043738650702208e+06, 3.074431719955891e-01, 3.127951632558527e-01, 3.108978161438085e-01, 3.093465472861635e-01, 3.101217331306696e-01, 3.101217331306696e-01, 3.338635972182413e-01, 5.277855463435615e-01, 4.596408969843099e-01, 4.031650116453307e-01, 4.307748394546119e-01, 4.307748394546119e-01, 2.111649385648006e-01, 5.986104049931646e+00, 3.455983667980389e+00, 1.499685834607408e+00, 2.280243059795127e+00, 2.280243059795128e+00, 6.763744328316319e-01, 1.674445854271037e+03, 6.607838326576669e+02, 1.673974624492028e+00, 1.665281126261038e+02, 1.665281126261038e+02, 1.022742173599572e+05, 8.363882291868500e+07, 9.043637243187241e+06, 2.011089761174724e+02, 2.579643228134502e+06, 2.579643228134509e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
