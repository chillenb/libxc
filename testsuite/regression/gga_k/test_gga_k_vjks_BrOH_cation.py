
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_vjks_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_vjks", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.178883738842906e+03, 2.178893396815249e+03, 2.178944087889005e+03, 2.178800235455916e+03, 2.178874509129307e+03, 2.178874509129307e+03, 5.851681220084593e+01, 5.851656848656138e+01, 5.851378255324944e+01, 5.854082906956474e+01, 5.851934967493895e+01, 5.851934967493895e+01, 2.220371435330202e+00, 2.216255250462071e+00, 2.109977329280183e+00, 2.145259067934208e+00, 2.123866104202214e+00, 2.123866104202214e+00, 1.136175673868622e-01, 1.234083634532155e-01, 3.010569113452061e+00, -3.044702465963285e-02, 7.966723041767347e-02, 7.966723041767340e-02, -4.352745410436762e-01, -4.230622579894067e-01, -4.758577338146166e-01, -4.588361952489574e-01, -4.101297360659570e-01, -4.101297360659564e-01, 1.279940127577009e+02, 1.280071195686527e+02, 1.279949552220880e+02, 1.280065217228203e+02, 1.280004811866605e+02, 1.280004811866605e+02, 1.899208693907264e+01, 1.927258346442843e+01, 1.877622758660521e+01, 1.902610281903106e+01, 1.924804182409448e+01, 1.924804182409448e+01, 1.655486933323709e+00, 1.878868206163242e+00, 1.427301308760062e+00, 1.484586970363726e+00, 1.706907151830902e+00, 1.706907151830902e+00, -2.315625273971792e-01, 3.740027080419444e-02, -2.495119794321808e-01, 1.702404831465060e+01, -9.921026832518424e-02, -9.921026832518424e-02, -4.001774054031557e-01, -4.231273175633026e-01, -1.685965988016842e-01, -3.233642002911040e-01, -2.475297800334492e-01, -2.475297800334494e-01, 1.587185079916431e+00, 1.587772806291953e+00, 1.587766444363850e+00, 1.587573370524618e+00, 1.587685004913328e+00, 1.587685004913328e+00, 1.496695526909884e+00, 1.195484844621049e+00, 1.289728976296511e+00, 1.375091584049144e+00, 1.332005631638264e+00, 1.332005631638264e+00, 2.068708728211538e+00, 1.682782400390934e-01, 3.165496645622803e-01, 5.983639155280425e-01, 4.493932237694268e-01, 4.493932237694267e-01, 1.014132812364514e+00, -5.098500415233371e-01, -4.461449558635228e-01, 5.504149727045806e-01, -2.103361091491383e-01, -2.103361091491382e-01, -4.822957812293596e-01, -1.922998869447223e-01, -2.747499073986287e-01, -2.323264861450934e-01, -2.220046246066668e-01, -2.220046246066665e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_vjks_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_vjks", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.407291445861433e+03, 3.407282546087411e+03, 3.407311900418330e+03, 3.407297406519433e+03, 3.407383772814268e+03, 3.407398593466426e+03, 3.407152617201056e+03, 3.407104019761317e+03, 3.407303320502403e+03, 3.407226496787539e+03, 3.407303320502403e+03, 3.407226496787539e+03, 9.105035074261735e+01, 9.104322718193349e+01, 9.105033841030701e+01, 9.104256921059880e+01, 9.104358638604349e+01, 9.104290452671539e+01, 9.108480190103121e+01, 9.108221758108165e+01, 9.102173487337899e+01, 9.107982724773706e+01, 9.102173487337899e+01, 9.107982724773706e+01, 3.525909208830629e+00, 3.529029167418297e+00, 3.523863451728733e+00, 3.527184125377983e+00, 3.516465688168064e+00, 3.532090700515501e+00, 3.573843588996503e+00, 3.568162514257422e+00, 3.549600526240344e+00, 3.771847439901665e+00, 3.549600526240344e+00, 3.771847439901665e+00, 4.442127380129699e-01, 4.386254941818359e-01, 4.318598037156117e-01, 4.283052339392222e-01, 4.635201897571686e+00, 4.839728948414431e+00, 5.511289703003119e-01, 5.548228071124043e-01, 4.727089122194004e-01, 6.178384181133750e-01, 4.727089122194001e-01, 6.178384181133746e-01, 4.404499674395688e-01, 4.430756653112256e-01, 4.294911994415919e-01, 4.311071280854049e-01, 6.522413960571914e-01, 6.563223481071547e-01, 4.579790646838596e-01, 4.642688321524581e-01, 4.401526159635231e-01, 2.755315128710581e-01, 4.401526159635235e-01, 2.755315128710583e-01, 2.021042243704115e+02, 2.020074578186162e+02, 2.021787781048068e+02, 2.020794338075323e+02, 2.021087647626005e+02, 2.020102174038172e+02, 2.021727256641649e+02, 2.020755962363834e+02, 2.021420516576514e+02, 2.020435137155631e+02, 2.021420516576514e+02, 2.020435137155631e+02, 3.220073954815473e+01, 3.219800044529492e+01, 3.248731908566633e+01, 3.247405016104554e+01, 3.232764585890290e+01, 3.227943900779398e+01, 3.256006654588034e+01, 3.252339077760513e+01, 3.230602655575772e+01, 3.233099366021845e+01, 3.230602655575772e+01, 3.233099366021845e+01, 2.586335030764082e+00, 2.572474143128590e+00, 3.038182503117701e+00, 3.041534339536341e+00, 2.140780356465148e+00, 2.293246270014945e+00, 2.300101191525846e+00, 2.455063953338783e+00, 2.789826973311234e+00, 2.520650112826130e+00, 2.789826973311234e+00, 2.520650112826130e+00, 7.467659067335802e-01, 7.343086906168134e-01, 7.012820135072773e-01, 7.012371125129446e-01, 7.307999427145238e-01, 7.246964923213963e-01, 2.759539952048113e+01, 2.757090156003124e+01, 6.282837746724358e-01, 5.102382245262005e-01, 6.282837746724358e-01, 5.102382245262005e-01, 3.862013708039578e-01, 4.151213852565653e-01, 4.165708012355301e-01, 4.335224402379338e-01, 1.746962234616276e-01, 1.657391969738211e-01, 6.419310608111083e-01, 6.540805290029502e-01, 2.475014344593724e-01, 2.502886990373106e-01, 2.475014344593729e-01, 2.502886990373117e-01, 2.605474301139964e+00, 2.625943181691057e+00, 2.561758233236422e+00, 2.582138525880670e+00, 2.576361358782887e+00, 2.596878539582009e+00, 2.589132687819390e+00, 2.609489116760054e+00, 2.582675403735908e+00, 2.603111450558883e+00, 2.582675403735908e+00, 2.603111450558883e+00, 2.472661012434566e+00, 2.489078417819714e+00, 1.886947702745791e+00, 1.900197710409811e+00, 1.998757987559574e+00, 2.014821454991374e+00, 2.155531983273575e+00, 2.170639358595178e+00, 2.069856895128743e+00, 2.084910973108081e+00, 2.069856895128743e+00, 2.084910973108081e+00, 3.333067772438369e+00, 3.344859825456429e+00, 7.567635980825027e-01, 7.562378589620026e-01, 7.812270965551319e-01, 7.799587613144104e-01, 9.609221788786659e-01, 9.697603376162699e-01, 8.281778633125411e-01, 8.250595900748732e-01, 8.281778633125413e-01, 8.250595900748728e-01, 1.602045649683613e+00, 1.618852825586436e+00, 6.774503831694549e-01, 6.778274847404658e-01, 7.140173398571082e-01, 7.097819203735066e-01, 8.497499214451624e-01, 8.724684572260928e-01, 6.176647504848956e-01, 5.480173655511419e-01, 6.176647504848946e-01, 5.480173655511416e-01, 4.977288415036404e-01, 4.931618645408346e-01, 2.198684338154588e-01, 1.652207257368181e-01, 2.801000566338504e-01, 2.715268551649104e-01, 5.877757292284742e-01, 5.918661301613590e-01, 1.725001841719678e-01, 2.454790718041084e-01, 1.725001841719673e-01, 2.454790718041090e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_vjks_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_vjks", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.135203163569893e-06, 0.000000000000000e+00, 1.135209347875881e-06, 1.135214710282935e-06, 0.000000000000000e+00, 1.135217723064170e-06, 1.135219321322654e-06, 0.000000000000000e+00, 1.135233380823003e-06, 1.135089733607338e-06, 0.000000000000000e+00, 1.135067944018526e-06, 1.135211682761833e-06, 0.000000000000000e+00, 1.135110304212898e-06, 1.135211682761833e-06, 0.000000000000000e+00, 1.135110304212898e-06, 2.073235609546162e-04, 0.000000000000000e+00, 2.075816842598441e-04, 2.073528768916390e-04, 0.000000000000000e+00, 2.076280903495896e-04, 2.082363261580542e-04, 0.000000000000000e+00, 2.084642640677317e-04, 2.066045476095521e-04, 0.000000000000000e+00, 2.068703975741771e-04, 2.073291397071227e-04, 0.000000000000000e+00, 2.076362900560138e-04, 2.073291397071227e-04, 0.000000000000000e+00, 2.076362900560138e-04, 1.142475877658229e-02, 0.000000000000000e+00, 1.329763533853386e-02, 1.077747435963799e-02, 0.000000000000000e+00, 1.309093703943901e-02, 1.497037174782848e-03, 0.000000000000000e+00, -2.357220518743080e-03, -3.553141362763729e-04, 0.000000000000000e+00, 8.790242200659054e-04, 1.590922418744890e-02, 0.000000000000000e+00, -2.316232952800284e-02, 1.590922418744890e-02, 0.000000000000000e+00, -2.316232952800284e-02, -4.201193524642784e+00, 0.000000000000000e+00, -3.337687615222255e+00, -3.789886874384105e+00, 0.000000000000000e+00, -2.901295885569439e+00, 8.246478821468345e-03, 0.000000000000000e+00, 1.209206957173787e-02, -1.682810677294274e+01, 0.000000000000000e+00, -1.595694505458076e+01, -3.581751530903889e+00, 0.000000000000000e+00, -6.139468914691135e+01, -3.581751530903887e+00, 0.000000000000000e+00, -6.139468914691133e+01, -3.794614904852912e+05, 0.000000000000000e+00, -3.162520497415939e+05, -3.297841769478433e+05, 0.000000000000000e+00, -2.682567982558648e+05, -1.893183601498677e+03, 0.000000000000000e+00, -1.602787269819633e+03, -1.746931309303808e+06, 0.000000000000000e+00, -1.837251931976744e+06, -5.344870209315364e+05, 0.000000000000000e+00, -2.900419470521002e+06, -5.344870209315367e+05, 0.000000000000000e+00, -2.900419470521004e+06, 9.112971599029676e-05, 0.000000000000000e+00, 9.118355036436301e-05, 9.136600284755207e-05, 0.000000000000000e+00, 9.141212256273028e-05, 9.114131316090093e-05, 0.000000000000000e+00, 9.119030778127074e-05, 9.134408840898715e-05, 0.000000000000000e+00, 9.139797631197113e-05, 9.125202202381247e-05, 0.000000000000000e+00, 9.129862964134658e-05, 9.125202202381247e-05, 0.000000000000000e+00, 9.129862964134658e-05, -1.264356659415961e-04, 0.000000000000000e+00, -1.265712083374123e-04, -8.176416373700875e-05, 0.000000000000000e+00, -8.282347287674138e-05, -2.458041297860950e-04, 0.000000000000000e+00, -2.100769925111748e-04, -2.025615697666049e-04, 0.000000000000000e+00, -1.684721588997666e-04, -1.955693798131524e-05, 0.000000000000000e+00, -9.140004166293741e-05, -1.955693798131524e-05, 0.000000000000000e+00, -9.140004166293741e-05, 4.865315424183867e-02, 0.000000000000000e+00, 4.914469629433595e-02, 6.095183392436179e-02, 0.000000000000000e+00, 6.114923880861067e-02, 5.608114904497869e-02, 0.000000000000000e+00, 5.462814478174818e-02, 8.753586281638213e-02, 0.000000000000000e+00, 7.886931409439209e-02, 4.741013966000175e-02, 0.000000000000000e+00, 5.370296446485971e-02, 4.741013966000178e-02, 0.000000000000000e+00, 5.370296446485971e-02, -7.740914226013922e+01, 0.000000000000000e+00, -7.441724307296536e+01, -5.866370438205220e+00, 0.000000000000000e+00, -5.736635177183712e+00, -1.099937032915758e+02, 0.000000000000000e+00, -9.112380829664056e+01, 2.253061604809746e-03, 0.000000000000000e+00, 2.256634662744169e-03, -4.425071801058477e+01, 0.000000000000000e+00, -3.225804553669575e+01, -4.425071801058477e+01, 0.000000000000000e+00, -3.225804553669575e+01, -4.137742622589007e+06, 0.000000000000000e+00, -3.686489893153228e+06, -1.961155316246044e+06, 0.000000000000000e+00, -1.874737895790831e+06, -4.690308121591262e+06, 0.000000000000000e+00, -3.948836799073332e+06, -3.808177950291850e+02, 0.000000000000000e+00, -3.742252405364064e+02, -4.402316252205154e+06, 0.000000000000000e+00, -1.699662693183315e+06, -4.402316252205149e+06, 0.000000000000000e+00, -1.699662693183315e+06, 8.574951017613699e-02, 0.000000000000000e+00, 8.489207175941520e-02, 7.942452732365907e-02, 0.000000000000000e+00, 7.873171199486287e-02, 8.163246415400569e-02, 0.000000000000000e+00, 8.089633949372031e-02, 8.348943350243843e-02, 0.000000000000000e+00, 8.267785890990922e-02, 8.256093593312511e-02, 0.000000000000000e+00, 8.178614929599232e-02, 8.256093593312511e-02, 0.000000000000000e+00, 8.178614929599232e-02, 9.563601061974122e-02, 0.000000000000000e+00, 9.471406031644133e-02, 3.368471236892703e-02, 0.000000000000000e+00, 3.449202864755035e-02, 5.978670625586772e-02, 0.000000000000000e+00, 6.012289194914144e-02, 7.888676236894805e-02, 0.000000000000000e+00, 7.836936200943387e-02, 7.041975021789353e-02, 0.000000000000000e+00, 7.002457489000406e-02, 7.041975021789353e-02, 0.000000000000000e+00, 7.002457489000406e-02, 5.211663016488524e-02, 0.000000000000000e+00, 5.223549188502755e-02, -2.039680034801451e+00, 0.000000000000000e+00, -1.976318220850154e+00, -6.950518740371153e-01, 0.000000000000000e+00, -6.394140309827231e-01, 5.234253115494907e-02, 0.000000000000000e+00, 5.472021251406932e-02, -1.631533410869755e-01, 0.000000000000000e+00, -1.585828150427077e-01, -1.631533410869757e-01, 0.000000000000000e+00, -1.585828150427074e-01, 3.929538565612745e-02, 0.000000000000000e+00, 4.153791336846910e-02, -2.007261323322695e+03, 0.000000000000000e+00, -1.966020763598124e+03, -8.072194802936990e+02, 0.000000000000000e+00, -7.278423727953112e+02, 1.563812080477913e-01, 0.000000000000000e+00, 1.604494112353740e-01, -1.821159442785161e+02, 0.000000000000000e+00, -1.458486190194529e+02, -1.821159442785161e+02, 0.000000000000000e+00, -1.458486190194528e+02, -1.296383617469452e+05, 0.000000000000000e+00, -1.165007148710047e+05, -1.007114612217302e+08, 0.000000000000000e+00, -1.000240528048178e+08, -1.195456056803259e+07, 0.000000000000000e+00, -9.936241878558876e+06, -2.087938450444081e+02, 0.000000000000000e+00, -1.977155289301094e+02, -5.180102528492181e+06, 0.000000000000000e+00, -2.207301531641856e+06, -5.180102528492190e+06, 0.000000000000000e+00, -2.207301531641864e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
