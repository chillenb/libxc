
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_lc94_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_lc94", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.193748938079446e+03, 2.193756698638548e+03, 2.193803341923624e+03, 2.193676020451427e+03, 2.193752930246128e+03, 2.193752930246128e+03, 5.924845109056958e+01, 5.924806450320748e+01, 5.924232581382319e+01, 5.927734449212935e+01, 5.924875703944640e+01, 5.924875703944640e+01, 2.285403987603796e+00, 2.283349999527678e+00, 2.237811896694462e+00, 2.268822692251344e+00, 2.284641508341044e+00, 2.284641508341044e+00, 1.973891293037759e-01, 2.003579187093932e-01, 3.185570227893459e+00, 1.274874921271242e-01, 1.982457408482871e-01, 1.982457408482871e-01, 2.028123045260403e-03, 2.298416993733841e-03, 2.814377664752295e-02, 1.472623724495029e-04, 2.249392942874814e-03, 2.249392942874814e-03, 1.283904067638333e+02, 1.283966406237120e+02, 1.283912830775143e+02, 1.283961264724479e+02, 1.283932645515129e+02, 1.283932645515129e+02, 2.032344690607650e+01, 2.055528307152855e+01, 2.028563198228832e+01, 2.046589806802967e+01, 2.053001202896687e+01, 2.053001202896687e+01, 1.633545567268374e+00, 1.837590511991983e+00, 1.476747434129895e+00, 1.540865461179137e+00, 1.748133596133634e+00, 1.748133596133634e+00, 8.588487329981474e-02, 2.249023881929357e-01, 8.231075313819883e-02, 1.700319194408017e+01, 1.007811761325954e-01, 1.007811761325954e-01, 1.317963880754197e-04, 2.194281150089181e-04, 1.178148379268169e-04, 4.293670275245971e-02, 1.836144324996135e-04, 1.836144324996134e-04, 1.635235709169057e+00, 1.636847569783899e+00, 1.636496293841267e+00, 1.636068255175113e+00, 1.636298729393089e+00, 1.636298729393089e+00, 1.528777088582935e+00, 1.275113042479577e+00, 1.348259843269910e+00, 1.416553700157601e+00, 1.381215337589680e+00, 1.381215337589680e+00, 2.023609389940539e+00, 3.275692011776061e-01, 4.285816146614312e-01, 6.316387276788945e-01, 5.177608794789617e-01, 5.177608794789615e-01, 1.044075616641636e+00, 2.622016549388010e-02, 3.869172010435389e-02, 5.471951348631551e-01, 6.000209343429873e-02, 6.000209343429870e-02, 2.947294213007321e-03, 1.716352128816533e-06, 2.070046305268170e-05, 5.443158897587043e-02, 1.174351193366751e-04, 1.174351193366744e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_lc94_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_lc94", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.358032549773478e+03, 3.358050437931908e+03, 3.358139954095067e+03, 3.357846837770058e+03, 3.358041902188359e+03, 3.358041902188359e+03, 8.844171014072563e+01, 8.844238523635802e+01, 8.846822866310661e+01, 8.846119902482438e+01, 8.844281086675285e+01, 8.844281086675285e+01, 3.206223703216542e+00, 3.198772579411135e+00, 3.009261568109749e+00, 3.057923340381181e+00, 3.203508610142248e+00, 3.203508610142248e+00, 2.353599882135523e-01, 2.418006520960771e-01, 4.641708979388803e+00, 1.258941687687270e-01, 2.372802012907045e-01, 2.372802012907045e-01, 5.364086725152944e-03, 5.777258024530409e-03, 2.189838893504160e-02, 6.059443874814922e-04, 5.660017267761832e-03, 5.660017267761832e-03, 2.004387081331396e+02, 2.005341602189053e+02, 2.004486418529783e+02, 2.005228583497899e+02, 2.004874040944439e+02, 2.004874040944439e+02, 2.738271088104572e+01, 2.778408465270468e+01, 2.720770782776960e+01, 2.751944210127609e+01, 2.788376223784108e+01, 2.788376223784108e+01, 2.471409599137829e+00, 2.971838480978363e+00, 2.222300571352753e+00, 2.456183334215971e+00, 2.672041890360071e+00, 2.672041890360071e+00, 7.316243659077809e-02, 2.396210897213938e-01, 7.076386928397303e-02, 2.749275017740682e+01, 9.302798482704307e-02, 9.302798482704307e-02, 5.442369667295658e-04, 8.824515012515459e-04, 4.765583341390408e-04, 3.319938681741098e-02, 7.376409764654294e-04, 7.376409764654288e-04, 2.698670655620881e+00, 2.655963750650948e+00, 2.671142818640707e+00, 2.682885542866482e+00, 2.677010165786862e+00, 2.677010165786862e+00, 2.531070077384457e+00, 1.833380908795766e+00, 2.019037538393636e+00, 2.203767802117753e+00, 2.108308381066639e+00, 2.108308381066640e+00, 3.264542428350188e+00, 3.774363645926530e-01, 5.342000006239627e-01, 8.880587350272385e-01, 6.880958157056719e-01, 6.880958157056718e-01, 1.488881288559752e+00, 2.115804239853026e-02, 2.955742968116537e-02, 7.991051026380153e-01, 4.962162481923219e-02, 4.962162481923220e-02, 7.077188468056753e-03, 7.457257622867316e-06, 8.891114604418420e-05, 4.508482220767076e-02, 4.788177960899566e-04, 4.788177960899536e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_lc94_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_lc94", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [7.550871334039824e-07, 7.550849348742038e-07, 7.550663057814430e-07, 7.551024851214402e-07, 7.550860477085078e-07, 7.550860477085078e-07, 1.649397795171372e-04, 1.649440454865734e-04, 1.650409877261436e-04, 1.647692409601881e-04, 1.649398657011586e-04, 1.649398657011586e-04, 2.050206296811471e-02, 2.050539271778374e-02, 2.048385008725517e-02, 2.009775819647416e-02, 2.050355900217246e-02, 2.050355900217246e-02, 7.288368129994454e-01, 7.169815977735206e-01, 1.289511618134113e-02, 1.301730134330947e+00, 7.254690856764979e-01, 7.254690856764979e-01, -8.857586698609884e+01, -7.576918330366958e+01, 9.964864649124754e+00, -1.221333079038335e+02, -7.823620563110744e+01, -7.823620563110744e+01, 5.487091963719293e-05, 5.490377733082752e-05, 5.487403414374101e-05, 5.489958519259836e-05, 5.488808794569806e-05, 5.488808794569806e-05, 7.494589720559747e-04, 7.385080609127627e-04, 7.491489743914819e-04, 7.405959063799685e-04, 7.424602486197790e-04, 7.424602486197790e-04, 3.660561397708866e-02, 3.430057217408810e-02, 4.231298196915459e-02, 4.327574099662063e-02, 3.350253633673089e-02, 3.350253633673089e-02, 2.237500944785616e+00, 5.709686198732347e-01, 2.393151584314523e+00, 1.218013739784330e-03, 1.810567701445845e+00, 1.810567701445845e+00, -1.261493196186266e+02, -1.347329395085806e+02, -2.935408376929578e+02, 5.952849616419667e+00, -1.808122972572779e+02, -1.808122972572777e+02, 4.525508221547312e-02, 4.116963099320944e-02, 4.204006128239513e-02, 4.309681696452682e-02, 4.250888861041682e-02, 4.250888861041682e-02, 5.067919911450455e-02, 5.027088926255077e-02, 4.822527589491317e-02, 4.709242854611039e-02, 4.761701532074337e-02, 4.761701532074337e-02, 2.949948964113364e-02, 3.355028741801937e-01, 2.331109841832601e-01, 1.413604302648378e-01, 1.825646183322522e-01, 1.825646183322522e-01, 6.734045193029671e-02, 1.024947960843281e+01, 6.687354998701035e+00, 1.815363689757042e-01, 3.784599242691561e+00, 3.784599242691561e+00, -5.210289169253912e+01, -7.649934745114240e+01, -1.226115506357775e+02, 4.383271337477847e+00, -2.334351681264766e+02, -2.334351681264762e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
