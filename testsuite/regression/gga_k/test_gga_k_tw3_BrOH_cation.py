
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_tw3_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tw3", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.192051246771262e+03, 2.192060059780646e+03, 2.192108490482687e+03, 2.191977180489399e+03, 2.192044668850353e+03, 2.192044668850353e+03, 5.924063117519803e+01, 5.924007100876744e+01, 5.923002487076873e+01, 5.926999656660626e+01, 5.924282530282707e+01, 5.924282530282707e+01, 2.299002702615915e+00, 2.296675566050236e+00, 2.246383891777442e+00, 2.280166416079628e+00, 2.280026793257997e+00, 2.280026793257997e+00, 1.851755092456713e-01, 1.889187774085775e-01, 3.096542565360666e+00, 1.192122001526523e-01, 1.776202125608949e-01, 1.776202125608948e-01, 3.050343558742395e-04, 3.383357414704009e-04, 1.011573886632576e-02, 1.013568077768770e-04, 2.029557620550306e-04, 2.029557620550306e-04, 1.283479902832360e+02, 1.283537106162598e+02, 1.283486272506541e+02, 1.283536711547017e+02, 1.283506850899971e+02, 1.283506850899971e+02, 2.037109678666724e+01, 2.061165098521884e+01, 2.028236465196745e+01, 2.049451633213667e+01, 2.054712177837811e+01, 2.054712177837811e+01, 1.670289890719045e+00, 1.878940062739329e+00, 1.444272715969962e+00, 1.485400992824612e+00, 1.718705169063183e+00, 1.718705169063183e+00, 6.331743537032625e-02, 1.993139489382773e-01, 5.489764363477736e-02, 1.702374166743050e+01, 8.301870498039511e-02, 8.301870498039511e-02, 6.043322667603812e-05, 9.685704933194541e-05, 5.684116074680789e-05, 2.575256573922103e-02, 9.117426423343951e-05, 9.117426423343954e-05, 1.586837053871586e+00, 1.587757457567529e+00, 1.587498726772240e+00, 1.587207237425329e+00, 1.587355464204298e+00, 1.587355464204298e+00, 1.496493304692265e+00, 1.235367273893432e+00, 1.307881326093405e+00, 1.380144790163181e+00, 1.342540105636185e+00, 1.342540105636185e+00, 2.069017607025185e+00, 2.997416525707756e-01, 4.043076189823210e-01, 6.254552809320091e-01, 5.007721122866788e-01, 5.007721122866788e-01, 1.049812204336015e+00, 9.253335972390194e-03, 1.700892025941832e-02, 5.632343907741777e-01, 4.048687406533365e-02, 4.048687406533366e-02, 6.054484732496069e-04, 6.919991363496531e-06, 3.063114281674337e-05, 3.594252994503261e-02, 7.670971011815047e-05, 7.670971011815032e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_tw3_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tw3", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.346722395115510e+03, 3.346713972093263e+03, 3.346746479169787e+03, 3.346731466884192e+03, 3.346824508267990e+03, 3.346843002891739e+03, 3.346552498421766e+03, 3.346496311758979e+03, 3.346736709912195e+03, 3.346635611657497e+03, 3.346736709912195e+03, 3.346635611657497e+03, 8.807803509242338e+01, 8.807818067295621e+01, 8.807890490750937e+01, 8.807887209328760e+01, 8.809822071092786e+01, 8.810431802705604e+01, 8.809319870454581e+01, 8.809846937807838e+01, 8.804757758104834e+01, 8.811899719366630e+01, 8.804757758104834e+01, 8.811899719366630e+01, 3.230158953607239e+00, 3.258170491882003e+00, 3.219412143714919e+00, 3.253612930299509e+00, 3.082587027651851e+00, 3.041124568703037e+00, 3.106011198919505e+00, 3.119274017831819e+00, 3.312678479703394e+00, 2.920431866220460e+00, 3.312678479703394e+00, 2.920431866220460e+00, 2.263336290462092e-01, 2.403285171249830e-01, 2.296972816582638e-01, 2.463055661721107e-01, 4.264078683224933e+00, 4.572433481332836e+00, 1.551501722269052e-01, 1.587894001865473e-01, 2.456619464952872e-01, 9.533877056193815e-02, 2.456619464952872e-01, 9.533877056193811e-02, 4.745060416137391e-04, 5.356907186915199e-04, 5.209315619002608e-04, 5.976620631349998e-04, 1.550628442499374e-02, 1.721128736317444e-02, 1.716368781774264e-04, 1.659686511525082e-04, 3.777467886729854e-04, 1.223988966450410e-04, 3.777467886729854e-04, 1.223988966450410e-04, 2.001800914171016e+02, 2.000829709971979e+02, 2.002852173935968e+02, 2.001844963880136e+02, 2.001861948789910e+02, 2.000866482144982e+02, 2.002763951780483e+02, 2.001788762796298e+02, 2.002337246507914e+02, 2.001339208208942e+02, 2.002337246507914e+02, 2.001339208208942e+02, 2.757865284523198e+01, 2.757588015864571e+01, 2.798158260988293e+01, 2.796645504411291e+01, 2.725693776972163e+01, 2.734505877038325e+01, 2.760027163756103e+01, 2.769444670998125e+01, 2.805347245960712e+01, 2.781417088760061e+01, 2.805347245960712e+01, 2.781417088760061e+01, 2.522267833005394e+00, 2.509089217479124e+00, 3.032945105660632e+00, 3.036633976644645e+00, 2.067206047968482e+00, 2.226502732465234e+00, 2.292638309829351e+00, 2.446595513345605e+00, 2.736485775602383e+00, 2.468073610796632e+00, 2.736485775602382e+00, 2.468073610796633e+00, 9.137092752679722e-02, 9.255832591185073e-02, 2.551044893467415e-01, 2.571345728411330e-01, 7.698647894616044e-02, 8.393834915111517e-02, 2.755516583788759e+01, 2.753085428183106e+01, 1.104803294852628e-01, 1.163929893897419e-01, 1.104803294852628e-01, 1.163929893897419e-01, 9.661159791360384e-05, 1.043427176280552e-04, 1.588969996343100e-04, 1.637440897135176e-04, 8.883357445403017e-05, 9.961869613620153e-05, 3.973304320921248e-02, 4.025248646649088e-02, 9.268451460327024e-05, 1.747234026183036e-04, 9.268451460327024e-05, 1.747234026183037e-04, 2.605288549756525e+00, 2.625782212797097e+00, 2.557859718710724e+00, 2.578385512212597e+00, 2.574236782349448e+00, 2.594858149731467e+00, 2.588104897179873e+00, 2.608514040172646e+00, 2.581144370737866e+00, 2.601656232880941e+00, 2.581144370737866e+00, 2.601656232880941e+00, 2.472750817263482e+00, 2.489169371879610e+00, 1.741224661099634e+00, 1.756686161075403e+00, 1.924703584575251e+00, 1.942614161874354e+00, 2.129708321753018e+00, 2.145088141756110e+00, 2.023414867048400e+00, 2.038838795863423e+00, 2.023414867048400e+00, 2.038838795863423e+00, 3.325868424160127e+00, 3.338279693162237e+00, 3.767330284349806e-01, 3.802313965165632e-01, 5.107984650284835e-01, 5.193828379874116e-01, 8.654078514803971e-01, 8.750819408700068e-01, 6.614336637638307e-01, 6.607910169636328e-01, 6.614336637638305e-01, 6.607910169636328e-01, 1.471386322630811e+00, 1.492232164108437e+00, 1.497843797093357e-02, 1.517617444124480e-02, 2.632783006592277e-02, 2.797457600281522e-02, 8.001601725365544e-01, 8.251467331585514e-01, 5.759384266622508e-02, 6.197039440742305e-02, 5.759384266622508e-02, 6.197039440742309e-02, 9.696973533654669e-04, 1.041036737001125e-03, 1.150643192018273e-05, 1.155880215736502e-05, 4.763197036316231e-05, 5.387931247294267e-05, 5.314879823577690e-02, 5.469680681513461e-02, 8.314490681722713e-05, 1.468073331259753e-04, 8.314490681722697e-05, 1.468073331259750e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_tw3_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tw3", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.553030997794680e-06, 0.000000000000000e+00, 1.553037601909011e-06, 1.553023523717740e-06, 0.000000000000000e+00, 1.553032167778199e-06, 1.552986508072624e-06, 0.000000000000000e+00, 1.552982796063579e-06, 1.553071247908356e-06, 0.000000000000000e+00, 1.553090698514394e-06, 1.553027201865631e-06, 0.000000000000000e+00, 1.553037926465171e-06, 1.553027201865631e-06, 0.000000000000000e+00, 1.553037926465171e-06, 3.410389326859527e-04, 0.000000000000000e+00, 3.411376014061248e-04, 3.410463417332359e-04, 0.000000000000000e+00, 3.411523813283146e-04, 3.413003875817386e-04, 0.000000000000000e+00, 3.413610091795667e-04, 3.406948664291915e-04, 0.000000000000000e+00, 3.407736918069812e-04, 3.411766606264937e-04, 0.000000000000000e+00, 3.409771107109260e-04, 3.411766606264937e-04, 0.000000000000000e+00, 3.409771107109260e-04, 4.180925214522191e-02, 0.000000000000000e+00, 4.199790048537004e-02, 4.176732255496513e-02, 0.000000000000000e+00, 4.200133188914907e-02, 4.112455747515302e-02, 0.000000000000000e+00, 4.069208283790714e-02, 4.005255677786723e-02, 0.000000000000000e+00, 4.020433722044121e-02, 4.203728091285217e-02, 0.000000000000000e+00, 3.711517023447108e-02, 4.203728091285217e-02, 0.000000000000000e+00, 3.711517023447108e-02, 1.122457696050519e+00, 0.000000000000000e+00, 1.096171502786417e+00, 1.141603320805184e+00, 0.000000000000000e+00, 1.105161822685830e+00, 2.782190694285810e-02, 0.000000000000000e+00, 2.676860615104115e-02, 1.141054173544880e+00, 0.000000000000000e+00, 1.120425809117928e+00, 1.010577595982431e+00, 0.000000000000000e+00, 1.178256370196813e+00, 1.010577595982430e+00, 0.000000000000000e+00, 1.178256370196815e+00, 1.458005116267563e-01, 0.000000000000000e+00, 1.533776617499730e-01, 1.609781886030307e-01, 0.000000000000000e+00, 1.715665760884982e-01, 4.961380993575832e-01, 0.000000000000000e+00, 5.267538481930841e-01, 8.027784747184044e-02, 0.000000000000000e+00, 7.679724403771539e-02, 1.298499902217128e-01, 0.000000000000000e+00, 1.874863410096692e-01, 1.298499902217132e-01, 0.000000000000000e+00, 1.874863410096698e-01, 1.114595530376045e-04, 0.000000000000000e+00, 1.115358041619915e-04, 1.114926238064744e-04, 0.000000000000000e+00, 1.115678190903061e-04, 1.114606387697540e-04, 0.000000000000000e+00, 1.115363656481722e-04, 1.114890273957061e-04, 0.000000000000000e+00, 1.115654590932104e-04, 1.114771037026747e-04, 0.000000000000000e+00, 1.115520066259061e-04, 1.114771037026747e-04, 0.000000000000000e+00, 1.115520066259061e-04, 1.477129976836134e-03, 0.000000000000000e+00, 1.477315417340753e-03, 1.458856219272815e-03, 0.000000000000000e+00, 1.459718632026611e-03, 1.466296773992873e-03, 0.000000000000000e+00, 1.470040848587027e-03, 1.451149503780146e-03, 0.000000000000000e+00, 1.454209347804183e-03, 1.473428936082832e-03, 0.000000000000000e+00, 1.469169800930739e-03, 1.473428936082832e-03, 0.000000000000000e+00, 1.469169800930739e-03, 7.264370100525076e-02, 0.000000000000000e+00, 7.325857041591101e-02, 6.450617353224364e-02, 0.000000000000000e+00, 6.450939849916611e-02, 9.424148279804444e-02, 0.000000000000000e+00, 8.602718350049564e-02, 9.611090185448869e-02, 0.000000000000000e+00, 8.697325363710420e-02, 6.597747793212067e-02, 0.000000000000000e+00, 7.638590677350969e-02, 6.597747793212067e-02, 0.000000000000000e+00, 7.638590677350970e-02, 9.014278642483973e-01, 0.000000000000000e+00, 9.245406263387320e-01, 6.921280227137090e-01, 0.000000000000000e+00, 6.889997457136334e-01, 9.214159819028067e-01, 0.000000000000000e+00, 9.411401119370836e-01, 2.366240507490948e-03, 0.000000000000000e+00, 2.369605594320674e-03, 1.119635297922498e+00, 0.000000000000000e+00, 1.407264326271135e+00, 1.119635297922498e+00, 0.000000000000000e+00, 1.407264326271135e+00, 8.454250610325287e-02, 0.000000000000000e+00, 7.604603728414219e-02, 9.336934391800951e-02, 0.000000000000000e+00, 8.751046679678169e-02, 3.976980061578191e-01, 0.000000000000000e+00, 4.685321338969158e-01, 9.451232495446220e-01, 0.000000000000000e+00, 9.163018166481881e-01, 2.019891189655292e-01, 0.000000000000000e+00, 2.724756248757860e-01, 2.019891189655285e-01, 0.000000000000000e+00, 2.724756248757856e-01, 8.461219834861088e-02, 0.000000000000000e+00, 8.367979728645189e-02, 8.357213397247808e-02, 0.000000000000000e+00, 8.267546062527371e-02, 8.393517834011184e-02, 0.000000000000000e+00, 8.302844622575518e-02, 8.424225287305816e-02, 0.000000000000000e+00, 8.332040301189519e-02, 8.408900173352712e-02, 0.000000000000000e+00, 8.317445888436255e-02, 8.408900173352712e-02, 0.000000000000000e+00, 8.317445888436255e-02, 9.263311078281640e-02, 0.000000000000000e+00, 9.172693193186869e-02, 1.073719489213383e-01, 0.000000000000000e+00, 1.064104361787542e-01, 1.038882882108970e-01, 0.000000000000000e+00, 1.028996342016806e-01, 9.994075582625407e-02, 0.000000000000000e+00, 9.899694957259893e-02, 1.021527806991565e-01, 0.000000000000000e+00, 1.011522652890199e-01, 1.021527806991565e-01, 0.000000000000000e+00, 1.011522652890199e-01, 5.579766032035317e-02, 0.000000000000000e+00, 5.564705579607089e-02, 5.118452975529403e-01, 0.000000000000000e+00, 5.093420220562803e-01, 4.194384595882755e-01, 0.000000000000000e+00, 4.168605392461552e-01, 2.908853595641266e-01, 0.000000000000000e+00, 2.872065214485672e-01, 3.586343176673543e-01, 0.000000000000000e+00, 3.605258635819120e-01, 3.586343176673547e-01, 0.000000000000000e+00, 3.605258635819121e-01, 1.367581545229702e-01, 0.000000000000000e+00, 1.350051814205601e-01, 4.454039310313265e-01, 0.000000000000000e+00, 4.489688266532412e-01, 5.891651864018731e-01, 0.000000000000000e+00, 6.218120405442726e-01, 3.623820943936679e-01, 0.000000000000000e+00, 3.501962695312862e-01, 1.161161436953007e+00, 0.000000000000000e+00, 1.428995192834487e+00, 1.161161436953008e+00, 0.000000000000000e+00, 1.428995192834487e+00, 1.652803163221073e-01, 0.000000000000000e+00, 1.748456440422183e-01, 8.975739377837549e-02, 0.000000000000000e+00, 1.593549812943788e-01, 1.127197913139197e-01, 0.000000000000000e+00, 1.276273511985102e-01, 1.242066698097562e+00, 0.000000000000000e+00, 1.235455319909889e+00, 3.944592958389215e-01, 0.000000000000000e+00, 2.592657997331411e-01, 3.944592958389219e-01, 0.000000000000000e+00, 2.592657997331416e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
