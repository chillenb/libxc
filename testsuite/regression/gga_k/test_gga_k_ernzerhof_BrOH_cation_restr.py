
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_ernzerhof_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_ernzerhof", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.179884295010038e+03, 2.179892986579307e+03, 2.179940942549748e+03, 2.179811439133542e+03, 2.179877970461299e+03, 2.179877970461299e+03, 5.898734193642093e+01, 5.898669274257971e+01, 5.897459321786030e+01, 5.901805894719733e+01, 5.898940747770548e+01, 5.898940747770548e+01, 2.311069836702301e+00, 2.309672917582390e+00, 2.292459321509412e+00, 2.324960264396535e+00, 2.313501381451197e+00, 2.313501381451197e+00, 2.350464355881038e-01, 2.335450517206531e-01, 3.098522829547862e+00, 2.420253027479942e-01, 2.241448224755533e-01, 2.241448224755535e-01, 7.189644255402040e-01, 6.979440097321914e-01, 6.689565885747739e-01, 7.624824971916322e-01, 6.737808404947349e-01, 6.737808404947342e-01, 1.276553914648698e+02, 1.276628225558914e+02, 1.276560955626243e+02, 1.276626497290215e+02, 1.276589522605675e+02, 1.276589522605675e+02, 2.088058702864936e+01, 2.109146790495580e+01, 2.087534993708547e+01, 2.105900063219035e+01, 2.100219959183879e+01, 2.100219959183879e+01, 1.661704955529844e+00, 1.872655044577682e+00, 1.435741587271665e+00, 1.477232161513229e+00, 1.704064030191469e+00, 1.704064030191469e+00, 3.414007815032842e-01, 3.259544393413260e-01, 3.486970234506486e-01, 1.696935536026242e+01, 2.392614039770423e-01, 2.392614039770423e-01, 6.653295163261689e-01, 7.027074135033333e-01, 2.797184376894828e-01, 4.109483773635864e-01, 4.100730936572604e-01, 4.100730936572607e-01, 1.584709645462580e+00, 1.582618691260835e+00, 1.583318257282130e+00, 1.583903114725254e+00, 1.583603882902968e+00, 1.583603882902968e+00, 1.495500391834271e+00, 1.240642561088098e+00, 1.302937500766895e+00, 1.372471492074216e+00, 1.335380383831201e+00, 1.335380383831201e+00, 2.061577393934571e+00, 3.939217766480300e-01, 4.583631803014875e-01, 6.318475206908235e-01, 5.249945996788214e-01, 5.249945996788214e-01, 1.055165078729214e+00, 7.275090810975385e-01, 5.918003251212819e-01, 5.628987594071141e-01, 2.850379376115090e-01, 2.850379376115089e-01, 7.909556906434795e-01, 3.186315483901100e-01, 4.572196743158674e-01, 3.055179444217884e-01, 3.649806395729942e-01, 3.649806395729938e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_ernzerhof_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_ernzerhof", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.321626328647701e+03, 3.321649139779499e+03, 3.321749398992367e+03, 3.321410036920006e+03, 3.321588019750766e+03, 3.321588019750766e+03, 8.650770252290071e+01, 8.650926258162150e+01, 8.654952828714625e+01, 8.651232765329162e+01, 8.651374378843633e+01, 8.651374378843633e+01, 3.055181880241974e+00, 3.042973354398233e+00, 2.722857626756568e+00, 2.777405063457768e+00, 2.773002056788408e+00, 2.773002056788408e+00, 4.979745820523940e-02, 6.978262704213256e-02, 4.217897934505065e+00, -2.182801912317527e-01, -8.331994037020872e-02, -8.331994037020887e-02, -7.468525331254381e-01, -7.286949419039453e-01, -1.121485582915439e+00, -7.720028581933012e-01, -6.886866351665041e-01, -6.886866351665014e-01, 1.996223548371485e+02, 1.997420359894811e+02, 1.996279233602508e+02, 1.997335801654382e+02, 1.996830059579451e+02, 1.996830059579451e+02, 2.412827843049666e+01, 2.463115651350034e+01, 2.351931343301202e+01, 2.396590679633086e+01, 2.469591606762412e+01, 2.469591606762412e+01, 2.485140562697549e+00, 3.037421224446315e+00, 2.110926722140043e+00, 2.371102000696917e+00, 2.580623031658372e+00, 2.580623031658372e+00, -6.454412098196617e-01, -1.535668635493834e-01, -6.833871942188684e-01, 2.756788329127749e+01, -3.357828011511746e-01, -3.357828011511746e-01, -6.710166913160059e-01, -7.118021870400291e-01, -2.850082463316246e-01, -8.415447286154680e-01, -4.177513389168172e-01, -4.177513389168180e-01, 2.617272800452096e+00, 2.570439483885573e+00, 2.587015966250180e+00, 2.600612437599658e+00, 2.593819079283654e+00, 2.593819079283654e+00, 2.481860494763443e+00, 1.653439371043447e+00, 1.893618546583020e+00, 2.129129648440002e+00, 2.009871951747716e+00, 2.009871951747716e+00, 3.334683514550505e+00, 4.170230785259726e-02, 2.893081860084324e-01, 8.040693923920692e-01, 5.306213284564044e-01, 5.306213284564045e-01, 1.396085151789428e+00, -1.178721952985428e+00, -1.113802314172104e+00, 7.829150016552218e-01, -5.679681112853577e-01, -5.679681112853574e-01, -8.450467942908416e-01, -3.192876013976003e-01, -4.600995715428005e-01, -6.216703656636784e-01, -3.715588321940905e-01, -3.715588321940909e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_ernzerhof_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_ernzerhof", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [7.887044264603045e-07, 7.886957600760116e-07, 7.886585132304002e-07, 7.887874309636500e-07, 7.887196948757263e-07, 7.887196948757263e-07, 1.889209520722480e-04, 1.889152025497956e-04, 1.887685058043296e-04, 1.889160202448826e-04, 1.889003974887035e-04, 1.889003974887035e-04, 2.841295192221468e-02, 2.857055160203738e-02, 3.293165707047866e-02, 3.202526297875963e-02, 3.213530196106106e-02, 3.213530196106106e-02, 2.535806497597535e+00, 2.354323573563349e+00, 1.756988287116753e-02, 8.433865252823670e+00, 4.961830285365239e+00, 4.961830285365241e+00, 2.874243708977668e+05, 2.464761021694517e+05, 1.340989834337200e+03, 1.492427248182778e+06, 7.521468190901594e+05, 7.521468190901594e+05, 5.313917765922387e-05, 5.308178845678789e-05, 5.313655655655083e-05, 5.308589126772802e-05, 5.311006132672085e-05, 5.311006132672085e-05, 1.236630863542797e-03, 1.203499000180658e-03, 1.272565694558347e-03, 1.242068607488167e-03, 1.201610784509120e-03, 1.201610784509120e-03, 3.868965035799552e-02, 2.788932732613010e-02, 4.954732576552315e-02, 4.063526081930992e-02, 3.647238102441003e-02, 3.647238102441003e-02, 4.091140174350323e+01, 3.163264506285572e+00, 5.513405365404359e+01, 1.019169678432745e-03, 1.906457867902078e+01, 1.906457867902078e+01, 3.249218193805591e+06, 1.597438443673241e+06, 3.572940943805846e+06, 2.427446474564887e+02, 2.043621522987923e+06, 2.043621522987923e+06, 3.452918630621842e-02, 3.580091821152551e-02, 3.534816092196523e-02, 3.497868421527389e-02, 3.516301047372365e-02, 3.516301047372365e-02, 3.728543258478053e-02, 7.143964459376677e-02, 5.838879190707735e-02, 4.836510607077193e-02, 5.313155242422793e-02, 5.313155242422793e-02, 2.427698480082803e-02, 1.296495196563693e+00, 6.253696090966530e-01, 2.090553930406664e-01, 3.568615263875809e-01, 3.568615263875809e-01, 9.199279661265548e-02, 1.554947777513948e+03, 5.523713354920787e+02, 2.199381264501662e-01, 9.118131372207341e+01, 9.118131372207338e+01, 1.021954851103599e+05, 8.363876508649905e+07, 9.043578689516159e+06, 1.175451512500304e+02, 2.579506258326069e+06, 2.579506258326076e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
