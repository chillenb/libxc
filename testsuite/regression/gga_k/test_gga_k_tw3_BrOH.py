
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_tw3_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tw3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.191945507924838e+03, 2.191953177523862e+03, 2.191999527450780e+03, 2.191873693387239e+03, 2.191949451182273e+03, 2.191949451182273e+03, 5.923593419779426e+01, 5.923552590587398e+01, 5.922919010107437e+01, 5.926523299124705e+01, 5.923622887657134e+01, 5.923622887657134e+01, 2.288008422412769e+00, 2.285990399891996e+00, 2.240331221061392e+00, 2.271449619076318e+00, 2.287259121090827e+00, 2.287259121090827e+00, 1.957470195417925e-01, 1.990488412400299e-01, 3.186872882730028e+00, 1.184130641046079e-01, 1.967125146796158e-01, 1.967125146796158e-01, 8.647334005493104e-04, 9.485068085798612e-04, 1.523759315340795e-02, 1.994294264148639e-04, 9.288460591962705e-04, 9.288460591962705e-04, 1.282399191164622e+02, 1.282454254297990e+02, 1.282407218428626e+02, 1.282449993918133e+02, 1.282424002469568e+02, 1.282424002469568e+02, 2.034688667522783e+01, 2.057979452592072e+01, 2.030762289308436e+01, 2.048891909250123e+01, 2.055539985264539e+01, 2.055539985264539e+01, 1.632644456443955e+00, 1.835403006648077e+00, 1.476128611315611e+00, 1.538848677279534e+00, 1.746751633401294e+00, 1.746751633401294e+00, 7.007686817015381e-02, 2.165759300726450e-01, 6.793120000318793e-02, 1.698289527179006e+01, 8.930686814104100e-02, 8.930686814104100e-02, 1.855970768671585e-04, 2.423679555174537e-04, 1.361563581799990e-04, 2.876108268793899e-02, 2.012135939909665e-04, 2.012135939909665e-04, 1.634574711481358e+00, 1.634998918367376e+00, 1.634901189468243e+00, 1.634772378396034e+00, 1.634838577304363e+00, 1.634838577304363e+00, 1.528527811722595e+00, 1.276027263584446e+00, 1.347863298972002e+00, 1.414963365518353e+00, 1.380165467714603e+00, 1.380165467714603e+00, 2.021126833580743e+00, 3.227744240502256e-01, 4.273878257922883e-01, 6.323412599769436e-01, 5.182230714419156e-01, 5.182230714419155e-01, 1.044998119987361e+00, 1.315709810973680e-02, 2.362313376968971e-02, 5.473887018121084e-01, 4.695378495062072e-02, 4.695378495062072e-02, 1.187180183057753e-03, 1.817747478587578e-05, 6.558600343888888e-05, 4.269754324596617e-02, 1.453432870084739e-04, 1.453432870084734e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_tw3_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tw3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.346542169159417e+03, 3.346560262806655e+03, 3.346650276876048e+03, 3.346353804763329e+03, 3.346551633442296e+03, 3.346551633442296e+03, 8.806959712325614e+01, 8.807028906375717e+01, 8.809657465856436e+01, 8.808863713144970e+01, 8.807070333963806e+01, 8.807070333963806e+01, 3.200857706254554e+00, 3.193923946371488e+00, 3.025411181633753e+00, 3.072773807505426e+00, 3.198327137958390e+00, 3.198327137958390e+00, 2.486959936918900e-01, 2.537144317273257e-01, 4.622564729809659e+00, 1.541016646522005e-01, 2.501607633668267e-01, 2.501607633668267e-01, 1.435267729467078e-03, 1.573671153086820e-03, 2.420804923209448e-02, 3.321157246671955e-04, 1.541065236050640e-03, 1.541065236050640e-03, 1.999542388213235e+02, 2.000542613790875e+02, 1.999646276921248e+02, 2.000423980540949e+02, 2.000052929970613e+02, 2.000052929970613e+02, 2.751773951455267e+01, 2.790177821341623e+01, 2.737014263061054e+01, 2.766752592890087e+01, 2.797442063394706e+01, 2.797442063394706e+01, 2.461828030786729e+00, 2.970442489867450e+00, 2.213332372214451e+00, 2.453160869801809e+00, 2.662729354060803e+00, 2.662729354060803e+00, 9.907281223571875e-02, 2.749571021047118e-01, 9.546414304201786e-02, 2.747955439832673e+01, 1.202011946044140e-01, 1.202011946044140e-01, 3.090905922149048e-04, 4.035405404488094e-04, 2.267104634232778e-04, 4.379892274138866e-02, 3.350158614186841e-04, 3.350158614186841e-04, 2.700498370414454e+00, 2.655158391615338e+00, 2.671189638083803e+00, 2.683737678587630e+00, 2.677441400363572e+00, 2.677441400363572e+00, 2.532670006485427e+00, 1.826740091880824e+00, 2.010658609962628e+00, 2.198015529383639e+00, 2.100837548039777e+00, 2.100837548039778e+00, 3.262600624581616e+00, 4.077417286670519e-01, 5.512844353700265e-01, 8.863681864818372e-01, 6.937791429213551e-01, 6.937791429213550e-01, 1.484228515689552e+00, 2.111215708646836e-02, 3.676327733239931e-02, 7.957692534569413e-01, 6.772922319323374e-02, 6.772922319323374e-02, 1.968906590172631e-03, 3.029279551767930e-05, 1.092738178001068e-04, 6.152310429663943e-02, 2.420243430406620e-04, 2.420243430406613e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_tw3_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tw3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [7.765704449979697e-07, 7.765676366301993e-07, 7.765468272060579e-07, 7.765929794699005e-07, 7.765690331810983e-07, 7.765690331810983e-07, 1.705614551847551e-04, 1.705657377026180e-04, 1.706622782425303e-04, 1.703874554124466e-04, 1.705614780890648e-04, 1.705614780890648e-04, 2.083221135856217e-02, 2.081794574080353e-02, 2.014405457351547e-02, 1.980683346088042e-02, 2.082742598089626e-02, 2.082742598089626e-02, 6.037112897047979e-01, 6.072849237642294e-01, 1.330685105444849e-02, 6.502779812928208e-01, 6.052245596344489e-01, 6.052245596344489e-01, 2.658597508474628e-01, 2.792266877973497e-01, 4.733565117524904e-01, 9.033712566687316e-02, 2.870471550958955e-01, 2.870471550958955e-01, 5.581744335350188e-05, 5.583326417904606e-05, 5.581886187847335e-05, 5.583116712922190e-05, 5.582584962992595e-05, 5.582584962992595e-05, 7.383768205843045e-04, 7.297435437147864e-04, 7.348752689356393e-04, 7.282666147535064e-04, 7.367923292183007e-04, 7.367923292183007e-04, 3.778317221708571e-02, 3.345078509068733e-02, 4.371845451257577e-02, 4.314472878547685e-02, 3.447485288009400e-02, 3.447485288009400e-02, 5.666401282673768e-01, 3.631582656578706e-01, 6.396989796944949e-01, 1.188305762102217e-03, 6.920297127226765e-01, 6.920297127226765e-01, 9.244987919586536e-02, 1.058729818314335e-01, 2.271222474572606e-01, 6.418436124754818e-01, 1.424861358555551e-01, 1.424861358555550e-01, 4.029406631207318e-02, 3.987045418956192e-02, 4.002178134694059e-02, 4.013964738213806e-02, 4.008077833100371e-02, 4.008077833100371e-02, 4.463255165064149e-02, 5.167742482055849e-02, 4.985730305403041e-02, 4.802187567058218e-02, 4.902328872713761e-02, 4.902328872713759e-02, 2.890049984858578e-02, 2.592553898458163e-01, 2.084229674946707e-01, 1.438167835574395e-01, 1.774345193068998e-01, 1.774345193068999e-01, 6.899961561874750e-02, 3.711725274853336e-01, 4.994368868216257e-01, 1.874196409683833e-01, 7.907765768521636e-01, 7.907765768521640e-01, 2.340877508584218e-01, 4.985698447467158e-02, 8.154802164226940e-02, 9.258874215607621e-01, 1.768485773279685e-01, 1.768485773279679e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
