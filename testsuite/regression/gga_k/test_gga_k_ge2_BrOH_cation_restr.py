
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_ge2_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_ge2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.174661410794555e+03, 2.174670382318328e+03, 2.174719078022784e+03, 2.174585419242660e+03, 2.174654199957851e+03, 2.174654199957851e+03, 5.872317282026687e+01, 5.872262989447155e+01, 5.871296661902575e+01, 5.875208674582453e+01, 5.872535303891933e+01, 5.872535303891933e+01, 2.283464658310274e+00, 2.281446904090860e+00, 2.243869092440748e+00, 2.276889074303730e+00, 2.266365465271021e+00, 2.266365465271021e+00, 2.041254554441593e-01, 2.056782913935570e-01, 3.068669126370083e+00, 1.635004036492621e-01, 1.739309309082295e-01, 1.739309309082296e-01, 8.123172082769314e-02, 7.903829123581417e-02, 1.075790580154082e-01, 8.517408984059263e-02, 7.557844108411697e-02, 7.557844108411689e-02, 1.274909690758082e+02, 1.275009572501046e+02, 1.274917787405513e+02, 1.275005908630654e+02, 1.274958358977792e+02, 1.274958358977792e+02, 2.038575111376188e+01, 2.061202879808782e+01, 2.033200776679095e+01, 2.053040989204215e+01, 2.053791944212245e+01, 2.053791944212245e+01, 1.656131803089891e+00, 1.872173814806027e+00, 1.429530078641053e+00, 1.476523491568305e+00, 1.699465791991433e+00, 1.699465791991433e+00, 1.402161615542910e-01, 2.472078491203130e-01, 1.322962154229163e-01, 1.696547383071524e+01, 1.342970937493796e-01, 1.342970937493796e-01, 7.419607248448211e-02, 7.851222435706047e-02, 3.133277709556631e-02, 1.047053256543291e-01, 4.593080533623174e-02, 4.593080533623178e-02, 1.584661741565421e+00, 1.582249923956955e+00, 1.583096991161308e+00, 1.583775444146081e+00, 1.583432638577986e+00, 1.583432638577986e+00, 1.495490251861520e+00, 1.226631566060473e+00, 1.296376738021565e+00, 1.370275434021510e+00, 1.331355580427179e+00, 1.331355580427179e+00, 2.060939812983507e+00, 3.360094251790727e-01, 4.233122378879400e-01, 6.222962427147601e-01, 5.060220683828175e-01, 5.060220683828175e-01, 1.042633633514585e+00, 1.123823496712878e-01, 1.141418835979508e-01, 5.583806867610761e-01, 1.030867520820169e-01, 1.030867520820169e-01, 9.053542407288702e-02, 3.543461863133250e-02, 5.093904806519685e-02, 1.015286860596674e-01, 4.086782604919399e-02, 4.086782604919395e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_ge2_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_ge2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.340691448367180e+03, 3.340713240100395e+03, 3.340810806219727e+03, 3.340486575054284e+03, 3.340656367135574e+03, 3.340656367135574e+03, 8.747035897306912e+01, 8.747153298815607e+01, 8.750294839015163e+01, 8.748153516426376e+01, 8.747598379068866e+01, 8.747598379068866e+01, 3.155359418607864e+00, 3.145390864301659e+00, 2.898527102705109e+00, 2.951231150203780e+00, 2.943465191689544e+00, 2.943465191689544e+00, 1.584973465195284e-01, 1.680114979619869e-01, 4.326356279599855e+00, 4.549909588791825e-02, 8.960684230184263e-02, 8.960684230184260e-02, -8.079229033844020e-02, -7.855147105517366e-02, -9.276101578187432e-02, -8.502752116050979e-02, -7.534701139491105e-02, -7.534701139491096e-02, 2.002232770944509e+02, 2.003336281324933e+02, 2.002284604422080e+02, 2.003258785737783e+02, 2.002791629184383e+02, 2.002791629184383e+02, 2.591567429953003e+01, 2.636352726669851e+01, 2.548035128806158e+01, 2.587430400088233e+01, 2.637388686357373e+01, 2.637388686357373e+01, 2.505467079578169e+00, 3.039183195578685e+00, 2.133564511463959e+00, 2.373695336420269e+00, 2.597403275376494e+00, 2.597403275376494e+00, -3.947194993416599e-02, 1.165171690180160e-01, -4.607350912495627e-02, 2.758209626057853e+01, 4.445882900008073e-03, 4.445882900008073e-03, -7.410881795960061e-02, -7.837215171536675e-02, -3.125087848953701e-02, -6.570107669447055e-02, -4.581194769967473e-02, -4.581194769967478e-02, 2.617448361841783e+00, 2.571789779340775e+00, 2.587826416467611e+00, 2.601080187171750e+00, 2.594446390800011e+00, 2.594446390800011e+00, 2.481897666030054e+00, 1.704299925805721e+00, 1.917517295668930e+00, 2.137152627628440e+00, 2.024555483285699e+00, 2.024555483285699e+00, 3.337017619767941e+00, 2.445960871834700e-01, 4.140811771486347e-01, 8.386821833310730e-01, 5.988785942277880e-01, 5.988785942277880e-01, 1.441562456497980e+00, -9.880765958311583e-02, -8.891069421730320e-02, 7.993430649908614e-01, -3.984766054305133e-02, -3.984766054305122e-02, -8.966017185648741e-02, -3.542461006079562e-02, -5.089495043613654e-02, -4.576437268459192e-02, -4.076605969132859e-02, -4.076605969132856e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_ge2_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_ge2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([7.183953787654941e-07, 7.183893682631379e-07, 7.183607928828547e-07, 7.184502578105938e-07, 7.184036418952782e-07, 7.184036418952782e-07, 1.664681860032593e-04, 1.664671080924782e-04, 1.664299622155120e-04, 1.663997345264199e-04, 1.664548556919529e-04, 1.664548556919529e-04, 2.319882383468693e-02, 2.327572545538750e-02, 2.523336579838395e-02, 2.461530012016502e-02, 2.474503507101396e-02, 2.474503507101396e-02, 1.347537376940258e+00, 1.288120930395629e+00, 1.463234655859146e-02, 3.079680157877443e+00, 2.174999573677185e+00, 2.174999573677185e+00, 3.194391961949024e+04, 2.739495708314610e+04, 1.631312792203622e+02, 1.658294723589477e+05, 8.357855840217377e+04, 8.357855840217377e+04, 4.959986591457623e-05, 4.957255826638204e-05, 4.959850537338013e-05, 4.957439916723075e-05, 4.958607665301921e-05, 4.958607665301921e-05, 9.339678835530142e-04, 9.139355898125140e-04, 9.489634823461900e-04, 9.308513546092439e-04, 9.157991813360176e-04, 9.157991813360176e-04, 3.466036699017193e-02, 2.703467963187623e-02, 4.375044316032168e-02, 3.894891499899829e-02, 3.303659686621606e-02, 3.303659686621606e-02, 9.202235221843139e+00, 1.341416743411938e+00, 1.162227130169867e+01, 9.896632747999953e-04, 5.693862463623885e+00, 5.693862463623885e+00, 3.610285500005122e+05, 1.774980168927379e+05, 3.970166490142638e+05, 3.819931757892115e+01, 2.270820723002453e+05, 2.270820723002453e+05, 3.416035244395434e-02, 3.475501813953918e-02, 3.454420179375649e-02, 3.437183858735150e-02, 3.445797034785218e-02, 3.445797034785218e-02, 3.709595524647125e-02, 5.864283848261793e-02, 5.107121077603442e-02, 4.479611240503675e-02, 4.786387105051244e-02, 4.786387105051244e-02, 2.346277095164451e-02, 6.651226722146273e-01, 3.839981853311544e-01, 1.666317594008231e-01, 2.533603399772363e-01, 2.533603399772363e-01, 7.515271475907020e-02, 1.860495393634486e+02, 7.342042585085188e+01, 1.859971804991142e-01, 1.850312362512264e+01, 1.850312362512264e+01, 1.136380192888414e+04, 9.293202546520555e+06, 1.004848582576360e+06, 2.234544179083026e+01, 2.866270253482780e+05, 2.866270253482788e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
