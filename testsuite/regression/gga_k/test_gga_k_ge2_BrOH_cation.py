
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_ge2_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_ge2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.174661410808809e+03, 2.174670382342665e+03, 2.174719078043336e+03, 2.174585419414901e+03, 2.174654200642348e+03, 2.174654200642348e+03, 5.872317326289456e+01, 5.872263039859628e+01, 5.871296700777017e+01, 5.875208723843019e+01, 5.872536367292473e+01, 5.872536367292473e+01, 2.283538851556048e+00, 2.281556439610387e+00, 2.244070936635496e+00, 2.276910460717819e+00, 2.286076115613314e+00, 2.286076115613314e+00, 2.043799002181042e-01, 2.060122985952767e-01, 3.072965800728850e+00, 1.635241000846708e-01, 2.042153491221095e-01, 2.042153491221095e-01, 8.123291810658720e-02, 7.903951210991997e-02, 1.075999277499862e-01, 8.517824053219700e-02, 7.636712962526132e-02, 7.636712962526121e-02, 1.274909778995581e+02, 1.275009665470152e+02, 1.274917878935673e+02, 1.275005997495961e+02, 1.274958450499423e+02, 1.274958450499423e+02, 2.038575195805298e+01, 2.061203133973561e+01, 2.033211503391239e+01, 2.053052063052750e+01, 2.053852649428207e+01, 2.053852649428207e+01, 1.656153531133567e+00, 1.872178152852255e+00, 1.431707816679832e+00, 1.478478569653153e+00, 1.704735289088233e+00, 1.704735289088234e+00, 1.402217797267405e-01, 2.472122506243483e-01, 1.324066325605679e-01, 1.696547815022245e+01, 1.348049272211772e-01, 1.348049272211772e-01, 7.423132243894162e-02, 7.855621947500381e-02, 3.133850702434920e-02, 1.047133593030779e-01, 4.602634459718478e-02, 4.602634459718485e-02, 1.584691370421840e+00, 1.582279789268192e+00, 1.583126963477016e+00, 1.583804972931605e+00, 1.583462382887206e+00, 1.583462382887206e+00, 1.495511272894876e+00, 1.226657524294617e+00, 1.296406801568020e+00, 1.370296028075016e+00, 1.331377777926838e+00, 1.331377777926838e+00, 2.060960607951774e+00, 3.360186632642671e-01, 4.233547409361587e-01, 6.223183347847905e-01, 5.060291361475640e-01, 5.060291361475638e-01, 1.042706686636660e+00, 1.123828225294373e-01, 1.141652512664572e-01, 5.585541813573689e-01, 1.033263823813600e-01, 1.033263823813601e-01, 9.055492046176768e-02, 3.562534070538625e-02, 5.094267320317041e-02, 1.015423955318339e-01, 4.126974377507013e-02, 4.126974377507008e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_ge2_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_ge2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.340695604223617e+03, 3.340687292489046e+03, 3.340720849789054e+03, 3.340705630378502e+03, 3.340800981540524e+03, 3.340820630866541e+03, 3.340515893290355e+03, 3.340457256603753e+03, 3.340710693232944e+03, 3.340602039831775e+03, 3.340710693232944e+03, 3.340602039831775e+03, 8.746901638494192e+01, 8.747170079892045e+01, 8.747019852041539e+01, 8.747286659872006e+01, 8.749870330140980e+01, 8.750719259417598e+01, 8.747751330533174e+01, 8.748555594068131e+01, 8.743776719781478e+01, 8.751418738453080e+01, 8.743776719781478e+01, 8.751418738453080e+01, 3.136173329908092e+00, 3.174383174583708e+00, 3.121833828591176e+00, 3.168707489947441e+00, 2.930970147640966e+00, 2.865617035952471e+00, 2.940613671681933e+00, 2.961798297591084e+00, 3.242742992261854e+00, 2.597030847296129e+00, 3.242742992261854e+00, 2.597030847296129e+00, 1.486849661289603e-01, 1.680131432891444e-01, 1.566396613323927e-01, 1.790161040040533e-01, 4.147763104386711e+00, 4.499124298462975e+00, 4.408321997606469e-02, 4.690764856755198e-02, 1.642172262152327e-01, -1.890408981171169e-02, 1.642172262152326e-01, -1.890408981171168e-02, -8.059404309904435e-02, -8.095601468449681e-02, -7.847056877692984e-02, -7.861430121252513e-02, -9.364623061646327e-02, -9.194660150290254e-02, -8.445825116012139e-02, -8.563463355505370e-02, -8.073587105702330e-02, -5.077295248212495e-02, -8.073587105702319e-02, -5.077295248212491e-02, 2.002720020765974e+02, 2.001745464648463e+02, 2.003842707736226e+02, 2.002829790906942e+02, 2.002784742555930e+02, 2.001784404947118e+02, 2.003748060381417e+02, 2.002769454011048e+02, 2.003293345887515e+02, 2.002289849913730e+02, 2.003293345887515e+02, 2.002289849913730e+02, 2.591707901675657e+01, 2.591426797622951e+01, 2.637153964752542e+01, 2.635551195897577e+01, 2.540771562999582e+01, 2.555273851671209e+01, 2.579972389197235e+01, 2.594863648427916e+01, 2.654843610280692e+01, 2.619807607928442e+01, 2.654843610280692e+01, 2.619807607928442e+01, 2.511961641559685e+00, 2.498950439556863e+00, 3.037350766590902e+00, 3.041006988663288e+00, 2.051572969683466e+00, 2.214002476010912e+00, 2.296020220699453e+00, 2.450176569379046e+00, 2.730413053534675e+00, 2.461222062900511e+00, 2.730413053534675e+00, 2.461222062900512e+00, -4.083058920970210e-02, -3.814016224870162e-02, 1.154084545466824e-01, 1.176230775060947e-01, -4.913138396080895e-02, -4.311932375692421e-02, 2.759427928822242e+01, 2.756991065711439e+01, -8.583891116869552e-03, 1.552749331255272e-02, -8.583891116869552e-03, 1.552749331255272e-02, -7.132009691837839e-02, -7.665975820093990e-02, -7.681624621755859e-02, -7.994547121541680e-02, -3.216876540927473e-02, -3.048803149429810e-02, -6.498368344338637e-02, -6.641768841804534e-02, -4.564314655543360e-02, -4.599145277494107e-02, -4.564314655543364e-02, -4.599145277494109e-02, 2.607206957400825e+00, 2.627668468925685e+00, 2.561513859526816e+00, 2.582043674917021e+00, 2.577512795615915e+00, 2.598117930811788e+00, 2.590874612874276e+00, 2.611264530470153e+00, 2.584188892461321e+00, 2.604682239105270e+00, 2.584188892461321e+00, 2.604682239105270e+00, 2.473681640392587e+00, 2.490098678883029e+00, 1.696059163314800e+00, 1.712518970002998e+00, 1.908172513866164e+00, 1.926835533285495e+00, 2.129398450632241e+00, 2.144892076424505e+00, 2.016746052675512e+00, 2.032349079989889e+00, 2.016746052675512e+00, 2.032349079989889e+00, 3.330802288922532e+00, 3.343196864606572e+00, 2.423569548097090e-01, 2.468264181961987e-01, 4.080135293989618e-01, 4.200914952891437e-01, 8.336264669338184e-01, 8.437212685296922e-01, 5.986934856907219e-01, 5.990500998374996e-01, 5.986934856907216e-01, 5.990500998374994e-01, 1.430207247478121e+00, 1.452831140262039e+00, -9.892165524663393e-02, -9.869534644902596e-02, -9.027678949033684e-02, -8.765255771995371e-02, 7.862473931604314e-01, 8.122677825069561e-01, -4.708078943808387e-02, -3.371600079097723e-02, -4.708078943808378e-02, -3.371600079097722e-02, -9.019901750293997e-02, -8.921031422044028e-02, -4.069268534426814e-02, -3.057263417538169e-02, -5.177238008677499e-02, -5.017191606592976e-02, -4.605001599397242e-02, -4.548326643349627e-02, -3.177374286598702e-02, -4.515784068874879e-02, -3.177374286598696e-02, -4.515784068874876e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_ge2_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_ge2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.436787982279863e-06, 0.000000000000000e+00, 1.436793532792832e-06, 1.436774056774607e-06, 0.000000000000000e+00, 1.436783416308430e-06, 1.436726759413062e-06, 0.000000000000000e+00, 1.436716412155616e-06, 1.436884097927220e-06, 0.000000000000000e+00, 1.436916933690333e-06, 1.436779815572765e-06, 0.000000000000000e+00, 1.436834753058636e-06, 1.436779815572765e-06, 0.000000000000000e+00, 1.436834753058636e-06, 3.329295581905194e-04, 0.000000000000000e+00, 3.329431861014301e-04, 3.329264355942279e-04, 0.000000000000000e+00, 3.329419971393631e-04, 3.328702036709984e-04, 0.000000000000000e+00, 3.328496458258889e-04, 3.328064751120478e-04, 0.000000000000000e+00, 3.327924632886009e-04, 3.330966275419693e-04, 0.000000000000000e+00, 3.327230048830593e-04, 3.330966275419693e-04, 0.000000000000000e+00, 3.327230048830593e-04, 4.667461145221172e-02, 0.000000000000000e+00, 4.612395146325177e-02, 4.689321097635706e-02, 0.000000000000000e+00, 4.621463633112637e-02, 4.994882394901864e-02, 0.000000000000000e+00, 5.099549189915795e-02, 4.939092349845107e-02, 0.000000000000000e+00, 4.907131443530164e-02, 4.507879902990570e-02, 0.000000000000000e+00, 5.485833637143311e-02, 4.507879902990570e-02, 0.000000000000000e+00, 5.485833637143311e-02, 2.858523217342663e+00, 0.000000000000000e+00, 2.549307065111150e+00, 2.755405214619447e+00, 0.000000000000000e+00, 2.418955322315147e+00, 3.079054087698465e-02, 0.000000000000000e+00, 2.788293394427501e-02, 6.288631284196593e+00, 0.000000000000000e+00, 6.035296962706513e+00, 2.510833269645201e+00, 0.000000000000000e+00, 1.626120712905740e+01, 2.510833269645201e+00, 0.000000000000000e+00, 1.626120712905740e+01, 7.027225571371322e+04, 0.000000000000000e+00, 5.856688593214097e+04, 6.107291919356672e+04, 0.000000000000000e+00, 4.967907484320507e+04, 3.552399912250690e+02, 0.000000000000000e+00, 3.016560446116359e+02, 3.235066880902119e+05, 0.000000000000000e+00, 3.402326908284780e+05, 9.898051322621961e+04, 0.000000000000000e+00, 5.371167945798205e+05, 9.898051322621961e+04, 0.000000000000000e+00, 5.371167945798200e+05, 9.916409713746264e-05, 0.000000000000000e+00, 9.923539214075439e-05, 9.910856222839104e-05, 0.000000000000000e+00, 9.918169781180316e-05, 9.916071411639040e-05, 0.000000000000000e+00, 9.923333395878186e-05, 9.911306490014697e-05, 0.000000000000000e+00, 9.918455754416392e-05, 9.913587584026410e-05, 0.000000000000000e+00, 9.920845733205195e-05, 9.913587584026410e-05, 0.000000000000000e+00, 9.920845733205195e-05, 1.867794190272496e-03, 0.000000000000000e+00, 1.868077365403937e-03, 1.827125224583637e-03, 0.000000000000000e+00, 1.828617744012937e-03, 1.902859442706663e-03, 0.000000000000000e+00, 1.893019991911762e-03, 1.866743452258686e-03, 0.000000000000000e+00, 1.856689115772201e-03, 1.819619128206878e-03, 0.000000000000000e+00, 1.843736369975596e-03, 1.819619128206878e-03, 0.000000000000000e+00, 1.843736369975596e-03, 6.904617237699862e-02, 0.000000000000000e+00, 6.959748788580869e-02, 5.410619559824957e-02, 0.000000000000000e+00, 5.403257305262276e-02, 9.250574436068010e-02, 0.000000000000000e+00, 8.300978993081126e-02, 8.191067848015521e-02, 0.000000000000000e+00, 7.425980209199573e-02, 6.137603746458183e-02, 0.000000000000000e+00, 7.154888608069727e-02, 6.137603746458186e-02, 0.000000000000000e+00, 7.154888608069732e-02, 1.867025002344822e+01, 0.000000000000000e+00, 1.814615164493268e+01, 2.703017172811138e+00, 0.000000000000000e+00, 2.662948993735825e+00, 2.522041579684610e+01, 0.000000000000000e+00, 2.155577290984025e+01, 1.977993278662029e-03, 0.000000000000000e+00, 1.980661619139015e-03, 1.246260597529783e+01, 0.000000000000000e+00, 1.048353571668046e+01, 1.246260597529783e+01, 0.000000000000000e+00, 1.048353571668046e+01, 7.662495719078551e+05, 0.000000000000000e+00, 6.826841573576157e+05, 3.631779455935362e+05, 0.000000000000000e+00, 3.471746546494347e+05, 8.685799837610015e+05, 0.000000000000000e+00, 7.312712612376021e+05, 7.710760470579324e+01, 0.000000000000000e+00, 7.570258413848872e+01, 8.152459899425574e+05, 0.000000000000000e+00, 3.147553654306367e+05, 8.152459899425574e+05, 0.000000000000000e+00, 3.147553654306369e+05, 6.871839602795697e-02, 0.000000000000000e+00, 6.792759034498430e-02, 6.991874374233770e-02, 0.000000000000000e+00, 6.910607921662718e-02, 6.949448824251696e-02, 0.000000000000000e+00, 6.868703719847434e-02, 6.914402586669240e-02, 0.000000000000000e+00, 6.834793788717498e-02, 6.931911119514277e-02, 0.000000000000000e+00, 6.851743287934703e-02, 6.931911119514277e-02, 0.000000000000000e+00, 6.851743287934703e-02, 7.456101243037964e-02, 0.000000000000000e+00, 7.382644491029720e-02, 1.180511616214042e-01, 0.000000000000000e+00, 1.165300556872588e-01, 1.028254017897387e-01, 0.000000000000000e+00, 1.014684543430236e-01, 9.006643897809856e-02, 0.000000000000000e+00, 8.912297811399267e-02, 9.626312684971271e-02, 0.000000000000000e+00, 9.519827969193487e-02, 9.626312684971271e-02, 0.000000000000000e+00, 9.519827969193487e-02, 4.704042806053946e-02, 0.000000000000000e+00, 4.681121554844254e-02, 1.341865756507527e+00, 0.000000000000000e+00, 1.318824467418282e+00, 7.796665010864933e-01, 0.000000000000000e+00, 7.566704475923508e-01, 3.360428707916751e-01, 0.000000000000000e+00, 3.305297647503894e-01, 5.064526436761554e-01, 0.000000000000000e+00, 5.069890000954177e-01, 5.064526436761558e-01, 0.000000000000000e+00, 5.069890000954178e-01, 1.518686757124336e-01, 0.000000000000000e+00, 1.487740376946141e-01, 3.759442628726043e+02, 0.000000000000000e+00, 3.683317558342100e+02, 1.544636404285683e+02, 0.000000000000000e+00, 1.399350496871407e+02, 3.805360203013644e-01, 0.000000000000000e+00, 3.638277421945884e-01, 4.028563737471830e+01, 0.000000000000000e+00, 3.422057422895514e+01, 4.028563737471828e+01, 0.000000000000000e+00, 3.422057422895514e+01, 2.400891817221131e+04, 0.000000000000000e+00, 2.157612357100870e+04, 1.865027159382298e+07, 0.000000000000000e+00, 1.852297451187268e+07, 2.213808763986618e+06, 0.000000000000000e+00, 1.840046208959619e+06, 4.580518794597280e+01, 0.000000000000000e+00, 4.362950707974350e+01, 9.592826165627907e+05, 0.000000000000000e+00, 4.087624134027612e+05, 9.592826165627928e+05, 0.000000000000000e+00, 4.087624134027626e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
