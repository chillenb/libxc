
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_meyer_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_meyer", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.175101441089121e+03, 2.175110388893834e+03, 2.175159021865773e+03, 2.175025715451102e+03, 2.175094306028517e+03, 2.175094306028517e+03, 5.874552306823017e+01, 5.874497114614648e+01, 5.873510005693419e+01, 5.877459071221996e+01, 5.874770373171177e+01, 5.874770373171177e+01, 2.285900923264781e+00, 2.283973546774377e+00, 2.248272390502653e+00, 2.281057146136475e+00, 2.291105654989426e+00, 2.291105654989426e+00, 2.072495665718981e-01, 2.085806976803008e-01, 3.075547860156561e+00, 1.717589072791224e-01, 2.094533801892565e-01, 2.094533801892556e-01, 7.244683282614245e-01, 7.040024409739398e-01, 7.384774490160995e-01, 7.644042078714229e-01, 6.828961785236760e-01, 6.828961785237387e-01, 1.275047892840022e+02, 1.275145622724815e+02, 1.275055903745407e+02, 1.275142117978799e+02, 1.275095462846891e+02, 1.275095462846891e+02, 2.042854245499360e+01, 2.065345520496615e+01, 2.037919900013041e+01, 2.057629009229969e+01, 2.057863916008290e+01, 2.057863916008290e+01, 1.656624123981543e+00, 1.872218415531922e+00, 1.432233484674009e+00, 1.478537951413933e+00, 1.705122122033502e+00, 1.705122122033504e+00, 1.702117962384361e-01, 2.550061994545635e-01, 1.675991866731613e-01, 1.696580268516062e+01, 1.474211901151178e-01, 1.474211901151178e-01, 6.667703999947949e-01, 7.049036488053417e-01, 2.808124944613148e-01, 2.284917314440961e-01, 4.122574111640984e-01, 4.122574111641937e-01, 1.584695368290753e+00, 1.582310626041259e+00, 1.583145452807556e+00, 1.583815634490563e+00, 1.583476687747488e+00, 1.583476687747488e+00, 1.495512118681328e+00, 1.227854304005200e+00, 1.296962440087360e+00, 1.370480671209467e+00, 1.331717341464163e+00, 1.331717341464163e+00, 2.061014009124271e+00, 3.414337681990765e-01, 4.265003790247867e-01, 6.231376202256487e-01, 5.076865599246574e-01, 5.076865599246589e-01, 1.043778250555936e+00, 8.025887911756229e-01, 6.256021158884590e-01, 5.589390647910160e-01, 1.355698852918568e-01, 1.355698852918567e-01, 8.018225334352044e-01, 3.204779294239165e-01, 4.578193697626490e-01, 1.412873263497884e-01, 3.697622304593787e-01, 3.697622304594066e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_meyer_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_meyer", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.339076516207092e+03, 3.339068217564224e+03, 3.339101863149172e+03, 3.339086629035120e+03, 3.339182167584258e+03, 3.339201919413017e+03, 3.338895938176008e+03, 3.338837089383523e+03, 3.339091673336873e+03, 3.338982343064103e+03, 3.339091673336873e+03, 3.338982343064103e+03, 8.738656147044009e+01, 8.738946348752522e+01, 8.738777008027627e+01, 8.739066972247034e+01, 8.741705619919433e+01, 8.742574859985696e+01, 8.739448182316397e+01, 8.740276018420097e+01, 8.735525488200669e+01, 8.743207925720311e+01, 8.735525488200669e+01, 8.743207925720311e+01, 3.126994824920270e+00, 3.166092584037793e+00, 3.112340065390203e+00, 3.160320520021966e+00, 2.916534938596686e+00, 2.848869824782406e+00, 2.924858362525307e+00, 2.946804694635481e+00, 3.235636517361458e+00, 2.564187953853860e+00, 3.235636517361458e+00, 2.564187953853860e+00, 1.369444494977392e-01, 1.578618206448842e-01, 1.460699266225982e-01, 1.700183374778865e-01, 4.136329626750054e+00, 4.491302332453226e+00, 1.115074941147960e-02, 1.441334487904155e-02, 1.521510115379310e-01, -9.996085571038182e-02, 1.521510115379279e-01, -9.996085571038160e-02, -7.356799213086332e-01, -7.402756593273507e-01, -7.175852355692169e-01, -7.205588304095744e-01, -1.221834231488688e+00, -1.255896772940879e+00, -7.638527161538897e-01, -7.743168070409935e-01, -7.348427308878573e-01, -4.596160881999751e-01, -7.348427308877516e-01, -4.596160882009097e-01, 2.002212365392909e+02, 2.001237715467955e+02, 2.003343124837889e+02, 2.002329844601090e+02, 2.002277500116141e+02, 2.001276898201181e+02, 2.003247746490715e+02, 2.002269037233387e+02, 2.002789865083220e+02, 2.001786034658869e+02, 2.002789865083220e+02, 2.001786034658869e+02, 2.575830249486382e+01, 2.575548705675284e+01, 2.621791995284216e+01, 2.620180154704929e+01, 2.522997948248811e+01, 2.538081051239332e+01, 2.562704999021583e+01, 2.578149542830770e+01, 2.640505498127268e+01, 2.604383470741133e+01, 2.640505498127268e+01, 2.604383470741133e+01, 2.510219426836668e+00, 2.497227352867982e+00, 3.037198670837696e+00, 3.040863488851229e+00, 2.049523134994578e+00, 2.212167413481991e+00, 2.295816076271455e+00, 2.449945880499286e+00, 2.728982683402299e+00, 2.459806250672214e+00, 2.728982683402302e+00, 2.459806250672210e+00, -1.846975540684393e-01, -1.722172559323396e-01, 8.494999631675829e-02, 8.748153159350906e-02, -2.384889318612981e-01, -1.979059372476185e-01, 2.759308561211856e+01, 2.756872190665191e+01, -7.682718139548064e-02, -2.391448888981496e-02, -7.682718139548064e-02, -2.391448888981496e-02, -6.439786367752798e-01, -6.922034666144142e-01, -6.947980055664986e-01, -7.230662790739742e-01, -2.914495279666059e-01, -2.765580298607360e-01, -1.283718174465474e+00, -1.373896830364976e+00, -4.128016960663344e-01, -4.177229374125562e-01, -4.128016960667297e-01, -4.177229374127188e-01, 2.607191910215179e+00, 2.627654182843608e+00, 2.561398855142096e+00, 2.581932281363358e+00, 2.577443619685575e+00, 2.598051391499234e+00, 2.590834805574930e+00, 2.611226096360415e+00, 2.584135427743609e+00, 2.604630714482976e+00, 2.584135427743609e+00, 2.604630714482976e+00, 2.473678521121089e+00, 2.490095594432714e+00, 1.691594613219707e+00, 1.708136944235473e+00, 1.906095559907420e+00, 1.924816429529126e+00, 2.128715794797985e+00, 2.144216803109427e+00, 2.015490528253476e+00, 2.031104608460632e+00, 2.015490528253476e+00, 2.031104608460632e+00, 3.330598377087764e+00, 3.343008648407102e+00, 2.215442864325057e-01, 2.263762998963881e-01, 3.958865010603211e-01, 4.085774628452586e-01, 8.305761684602108e-01, 8.407072232292326e-01, 5.924676570130484e-01, 5.929354101616531e-01, 5.924676570130473e-01, 5.929354101616631e-01, 1.426170291772779e+00, 1.448944289438502e+00, -1.252241887733994e+00, -1.255673081311793e+00, -1.538477755247005e+00, -1.586140026145907e+00, 7.847862302029706e-01, 8.108860328515337e-01, -2.596163074449063e-01, -1.563940619852591e-01, -2.596163074449060e-01, -1.563940619852590e-01, -8.329758719435622e-01, -8.256497664131380e-01, -3.664838381114218e-01, -2.754045294310626e-01, -4.669853805319159e-01, -4.527169337286845e-01, -2.649906390031944e-01, -2.538205408444035e-01, -2.877705222343701e-01, -4.096121764211436e-01, -2.877705222341729e-01, -4.096121764212875e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_meyer_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_meyer", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.448700113235482e-06, 0.000000000000000e+00, 1.448705676845860e-06, 1.448685659607272e-06, 0.000000000000000e+00, 1.448695176936049e-06, 1.448637201843651e-06, 0.000000000000000e+00, 1.448626361893525e-06, 1.448800491543433e-06, 0.000000000000000e+00, 1.448834473173246e-06, 1.448691604825169e-06, 0.000000000000000e+00, 1.448749647534151e-06, 1.448691604825169e-06, 0.000000000000000e+00, 1.448749647534151e-06, 3.367600372137437e-04, 0.000000000000000e+00, 3.367687950333141e-04, 3.367562490872822e-04, 0.000000000000000e+00, 3.367666432551982e-04, 3.366808868641781e-04, 0.000000000000000e+00, 3.366552526474273e-04, 3.366484831505613e-04, 0.000000000000000e+00, 3.366287750494765e-04, 3.369310120128895e-04, 0.000000000000000e+00, 3.365422214270621e-04, 3.369310120128895e-04, 0.000000000000000e+00, 3.365422214270621e-04, 4.760825081263424e-02, 0.000000000000000e+00, 4.699701179712228e-02, 4.784881318621974e-02, 0.000000000000000e+00, 4.709509879273872e-02, 5.123310859747748e-02, 0.000000000000000e+00, 5.241871745018210e-02, 5.071320862740770e-02, 0.000000000000000e+00, 5.034979118878060e-02, 4.586234104374068e-02, 0.000000000000000e+00, 5.706492132437033e-02, 4.586234104374068e-02, 0.000000000000000e+00, 5.706492132437033e-02, 3.119919679928429e+00, 0.000000000000000e+00, 2.757255264296659e+00, 2.991092032348545e+00, 0.000000000000000e+00, 2.601105456568637e+00, 3.138882520616191e-02, 0.000000000000000e+00, 2.831586775848935e-02, 7.589272793610854e+00, 0.000000000000000e+00, 7.256630849363391e+00, 2.733541228281917e+00, 0.000000000000000e+00, 2.409033517241789e+01, 2.733541228281922e+00, 0.000000000000000e+00, 2.409033517241786e+01, 6.324550591749382e+05, 0.000000000000000e+00, 5.271069874500317e+05, 5.496615355516312e+05, 0.000000000000000e+00, 4.471172959809243e+05, 3.222059763339337e+03, 0.000000000000000e+00, 2.743119840671687e+03, 2.911562787583577e+06, 0.000000000000000e+00, 3.062096699148993e+06, 8.908288436328921e+05, 0.000000000000000e+00, 4.834057216886396e+06, 8.908288436328578e+05, 0.000000000000000e+00, 4.834057216891953e+06, 9.976075500947702e-05, 0.000000000000000e+00, 9.983267766181565e-05, 9.970000458543077e-05, 0.000000000000000e+00, 9.977393824750652e-05, 9.975710159304381e-05, 0.000000000000000e+00, 9.983046003180868e-05, 9.970497662403385e-05, 0.000000000000000e+00, 9.977709998109097e-05, 9.972984441270386e-05, 0.000000000000000e+00, 9.980320399601917e-05, 9.972984441270386e-05, 0.000000000000000e+00, 9.980320399601917e-05, 1.921110256310342e-03, 0.000000000000000e+00, 1.921404983472454e-03, 1.878038907595077e-03, 0.000000000000000e+00, 1.879602228193371e-03, 1.960724234149256e-03, 0.000000000000000e+00, 1.949528075521907e-03, 1.922326811566376e-03, 0.000000000000000e+00, 1.910971822446601e-03, 1.868520174473841e-03, 0.000000000000000e+00, 1.895374965247734e-03, 1.868520174473841e-03, 0.000000000000000e+00, 1.895374965247734e-03, 6.972928021012696e-02, 0.000000000000000e+00, 7.028407040482476e-02, 5.425162680801418e-02, 0.000000000000000e+00, 5.417357455557615e-02, 9.360090786918356e-02, 0.000000000000000e+00, 8.390631179250262e-02, 8.220365627862024e-02, 0.000000000000000e+00, 7.453308563327847e-02, 6.190481336369393e-02, 0.000000000000000e+00, 7.219442197690633e-02, 6.190481336369193e-02, 0.000000000000000e+00, 7.219442197690580e-02, 3.192568978574414e+01, 0.000000000000000e+00, 3.036213435769843e+01, 3.101134518742088e+00, 0.000000000000000e+00, 3.050982551222085e+00, 4.911781371249322e+01, 0.000000000000000e+00, 3.849338623278494e+01, 1.982936186439108e-03, 0.000000000000000e+00, 1.985603185053383e-03, 1.738642697441980e+01, 0.000000000000000e+00, 1.335513250757740e+01, 1.738642697441980e+01, 0.000000000000000e+00, 1.335513250757740e+01, 6.896248875220314e+06, 0.000000000000000e+00, 6.144159870139141e+06, 3.268604528534279e+06, 0.000000000000000e+00, 3.124574720500373e+06, 7.817232731561921e+06, 0.000000000000000e+00, 6.581456541477851e+06, 5.375289233079085e+02, 0.000000000000000e+00, 5.496114319445741e+02, 7.337220438217430e+06, 0.000000000000000e+00, 2.832807134454274e+06, 7.337220438230651e+06, 0.000000000000000e+00, 2.832807134455024e+06, 6.878127095552249e-02, 0.000000000000000e+00, 6.798791567594510e-02, 7.009673377122670e-02, 0.000000000000000e+00, 6.927854012664279e-02, 6.963138699168787e-02, 0.000000000000000e+00, 6.881922348942235e-02, 6.924715921805118e-02, 0.000000000000000e+00, 6.844772293290556e-02, 6.943904843908597e-02, 0.000000000000000e+00, 6.863336020941552e-02, 6.943904843908597e-02, 0.000000000000000e+00, 6.863336020941552e-02, 7.459292414219902e-02, 0.000000000000000e+00, 7.385776180296223e-02, 1.202942348473841e-01, 0.000000000000000e+00, 1.187139992351721e-01, 1.040949694686856e-01, 0.000000000000000e+00, 1.026981370999423e-01, 9.067518783055320e-02, 0.000000000000000e+00, 8.971997173368289e-02, 9.716614528268890e-02, 0.000000000000000e+00, 9.608405433340875e-02, 9.716614528268890e-02, 0.000000000000000e+00, 9.608405433340875e-02, 4.718017143478951e-02, 0.000000000000000e+00, 4.694459552229251e-02, 1.468980535604643e+00, 0.000000000000000e+00, 1.441891429891369e+00, 8.261438701425178e-01, 0.000000000000000e+00, 8.001529889506374e-01, 3.435316116326610e-01, 0.000000000000000e+00, 3.378108034770684e-01, 5.250355118481690e-01, 0.000000000000000e+00, 5.254291548591642e-01, 5.250355118481693e-01, 0.000000000000000e+00, 5.254291548591523e-01, 1.548537056407228e-01, 0.000000000000000e+00, 1.516232166855626e-01, 3.404940820350876e+03, 0.000000000000000e+00, 3.336748417455839e+03, 1.435031758538393e+03, 0.000000000000000e+00, 1.312083114830488e+03, 3.866398693030965e-01, 0.000000000000000e+00, 3.694171017019874e-01, 9.027137171966760e+01, 0.000000000000000e+00, 6.237034570212474e+01, 9.027137171966748e+01, 0.000000000000000e+00, 6.237034570212471e+01, 2.160857224550212e+05, 0.000000000000000e+00, 1.941909001882439e+05, 1.678524472314093e+08, 0.000000000000000e+00, 1.667067757348724e+08, 1.992428250922633e+07, 0.000000000000000e+00, 1.656041999612380e+07, 1.070337182122100e+02, 0.000000000000000e+00, 9.893350806608561e+01, 8.633556317349626e+06, 0.000000000000000e+00, 3.678870125970276e+06, 8.633556317343639e+06, 0.000000000000000e+00, 3.678870125971705e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
