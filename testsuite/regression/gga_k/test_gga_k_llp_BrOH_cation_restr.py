
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_llp_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_llp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.194680162435565e+03, 2.194689145615764e+03, 2.194738087920322e+03, 2.194604250475586e+03, 2.194673097664191e+03, 2.194673097664191e+03, 5.924629427708743e+01, 5.924578746928187e+01, 5.923697356095477e+01, 5.927480171762345e+01, 5.924854301787092e+01, 5.924854301787092e+01, 2.291887671731415e+00, 2.289329704064738e+00, 2.233669730395677e+00, 2.267619584996221e+00, 2.257762750915314e+00, 2.257762750915314e+00, 1.841113750624644e-01, 1.874984727676602e-01, 3.085789271979945e+00, 1.235116943574876e-01, 1.445884698347802e-01, 1.445884698347802e-01, 1.868524106163775e-03, 1.966542393279412e-03, 1.911994498212130e-02, 9.901321691189891e-04, 1.235822088588093e-03, 1.235822088588093e-03, 1.285705095328616e+02, 1.285772448787726e+02, 1.285711893060823e+02, 1.285771303715764e+02, 1.285737241117111e+02, 1.285737241117111e+02, 2.024638795613852e+01, 2.048938142647814e+01, 2.014956913179098e+01, 2.036365903350134e+01, 2.042746692895593e+01, 2.042746692895593e+01, 1.671415527307056e+00, 1.882105242078058e+00, 1.442348424080150e+00, 1.486189544812588e+00, 1.715192042944313e+00, 1.715192042944313e+00, 7.413418525958891e-02, 2.022389067418729e-01, 6.567221156554991e-02, 1.705175828530845e+01, 8.929434289090014e-02, 8.929434289090014e-02, 6.899899792536112e-04, 9.322974841537788e-04, 4.663122508107887e-04, 3.598045979932901e-02, 6.795121786755801e-04, 6.795121786755803e-04, 1.588179602230148e+00, 1.590351594897972e+00, 1.589777966747098e+00, 1.589130799179760e+00, 1.589468675534635e+00, 1.589468675534635e+00, 1.497165607309305e+00, 1.231825364430573e+00, 1.307606564488967e+00, 1.382331619539384e+00, 1.343685032907373e+00, 1.343685032907373e+00, 2.072610291173605e+00, 2.990115974713657e-01, 4.006922751550156e-01, 6.228815639688774e-01, 4.968074342516678e-01, 4.968074342516678e-01, 1.046539776047459e+00, 1.831976248033301e-02, 2.773955624668327e-02, 5.621771478553784e-01, 4.919700962302789e-02, 4.919700962302790e-02, 2.964815341796293e-03, 1.446510141414027e-04, 3.962904362385837e-04, 4.507572790819129e-02, 5.909723416753355e-04, 5.909723416753344e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_llp_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_llp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.365072289136568e+03, 3.365092468633444e+03, 3.365185713804447e+03, 3.364885413309097e+03, 3.365042260323327e+03, 3.365042260323327e+03, 8.878470259849473e+01, 8.878534386041486e+01, 8.880453168384479e+01, 8.880490808659432e+01, 8.878975201593683e+01, 8.878975201593683e+01, 3.280915333799014e+00, 3.273255219390318e+00, 3.094024255263276e+00, 3.145843278654160e+00, 3.134986523411443e+00, 3.134986523411443e+00, 2.215361386222476e-01, 2.277053201831380e-01, 4.466840007661470e+00, 1.341604545314124e-01, 1.645498108294304e-01, 1.645498108294304e-01, 1.144315080587818e-03, 1.215302293346886e-03, 1.538003689740390e-02, 5.642700290799114e-04, 7.289461060315480e-04, 7.289461060315484e-04, 2.008172677108449e+02, 2.009120042759410e+02, 2.008218054470391e+02, 2.009054359224924e+02, 2.008651810308871e+02, 2.008651810308871e+02, 2.784996332785990e+01, 2.825827154138261e+01, 2.755088123469505e+01, 2.790881946353771e+01, 2.822200108753223e+01, 2.822200108753223e+01, 2.532823502648148e+00, 3.036498302520697e+00, 2.164456237565735e+00, 2.373310147641665e+00, 2.619362375887226e+00, 2.619362375887226e+00, 7.216816249942472e-02, 2.281353879233899e-01, 6.301316324275491e-02, 2.755570828980784e+01, 9.255145676245581e-02, 9.255145676245581e-02, 3.851352972520156e-04, 5.324010267741215e-04, 2.723671310702909e-04, 3.213372334794475e-02, 3.966515716943283e-04, 3.966515716943281e-04, 2.614980519847984e+00, 2.569356714575414e+00, 2.584912141065060e+00, 2.598126298824466e+00, 2.591468192992569e+00, 2.591468192992569e+00, 2.480487093207308e+00, 1.768637270131573e+00, 1.950135322893996e+00, 2.146127432664756e+00, 2.044087682526916e+00, 2.044087682526916e+00, 3.334572348853203e+00, 3.559132125633773e-01, 5.060760163690154e-01, 8.802126694722782e-01, 6.644491478906743e-01, 6.644491478906743e-01, 1.498615937957153e+00, 1.454970512916499e-02, 2.340048085733570e-02, 8.211031924130897e-01, 4.680061652773979e-02, 4.680061652773981e-02, 1.893424200838507e-03, 7.564785934518329e-05, 2.177689145137075e-04, 4.223824572242391e-02, 3.441625596918381e-04, 3.441625596918377e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_llp_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_llp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([7.411407962272127e-07, 7.411392748523637e-07, 7.411230909930469e-07, 7.411459218553866e-07, 7.411352976107562e-07, 7.411352976107562e-07, 1.593867790333150e-04, 1.593938228568842e-04, 1.595451354324090e-04, 1.591916049996949e-04, 1.593836977926598e-04, 1.593836977926598e-04, 1.922124618088853e-02, 1.921141001116235e-02, 1.885956314727789e-02, 1.848583163111045e-02, 1.863574244480217e-02, 1.863574244480217e-02, 6.326872523454637e-01, 6.248940938046497e-01, 1.255379117096495e-02, 9.726345101151446e-01, 8.300327379886235e-01, 8.300327379886236e-01, 2.910838337195194e+02, 2.686666713037369e+02, 9.885597016297758e+00, 7.933699715233601e+02, 5.524921085016869e+02, 5.524921085016872e+02, 5.447521391217523e-05, 5.452427278261366e-05, 5.447698082622190e-05, 5.452029372718742e-05, 5.450032098127612e-05, 5.450032098127612e-05, 6.829314859735709e-04, 6.738193280913979e-04, 6.809031323597869e-04, 6.728482273787437e-04, 6.788982520917609e-04, 6.788982520917609e-04, 3.440410065742242e-02, 3.344690933566994e-02, 4.207626527661693e-02, 4.631865770637068e-02, 3.363415150793419e-02, 3.363415150793419e-02, 1.731155118250653e+00, 4.944900780093914e-01, 2.024796566044228e+00, 1.232473885590122e-03, 1.460496730192704e+00, 1.460496730192704e+00, 1.396235256533401e+03, 8.665346885319311e+02, 2.401062744367088e+03, 4.426247547316168e+00, 1.365626858867618e+03, 1.365626858867616e+03, 4.619135973951118e-02, 4.323750661562570e-02, 4.412251849833879e-02, 4.496500793974896e-02, 4.452952448765774e-02, 4.452952448765774e-02, 5.182359380564339e-02, 4.904146552333844e-02, 4.815083592195804e-02, 4.819274020907833e-02, 4.811428050510819e-02, 4.811428050510819e-02, 2.871135665801398e-02, 3.003608561314859e-01, 2.131132949210613e-01, 1.325839794990124e-01, 1.694964257996845e-01, 1.694964257996845e-01, 6.232701723012981e-02, 1.039340336628809e+01, 6.005231828004104e+00, 1.641340808154375e-01, 3.076678003824052e+00, 3.076678003824051e+00, 1.439856984370831e+02, 1.627226421521167e+04, 3.276019343815651e+03, 3.418457975409463e+00, 1.686899609761489e+03, 1.686899609761491e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
