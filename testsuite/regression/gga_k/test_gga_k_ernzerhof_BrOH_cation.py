
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_ernzerhof_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_ernzerhof", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.179884295025267e+03, 2.179892986604859e+03, 2.179940942572299e+03, 2.179811439314419e+03, 2.179877971233535e+03, 2.179877971233535e+03, 5.898734254672112e+01, 5.898669343651489e+01, 5.897459375663984e+01, 5.901805963773604e+01, 5.898941872018138e+01, 5.898941872018138e+01, 2.311170985872932e+00, 2.309822928735711e+00, 2.292759799881104e+00, 2.324992535423199e+00, 2.343747982756458e+00, 2.343747982756458e+00, 2.353320409885593e-01, 2.339095242506080e-01, 3.103239286177418e+00, 2.420471747206427e-01, 2.527917845618153e-01, 2.527917845618152e-01, 7.189210228251683e-01, 6.978785082134754e-01, 6.685140132817916e-01, 7.625184292962235e-01, 6.791708816069836e-01, 6.791708816069828e-01, 1.276554002818635e+02, 1.276628318558422e+02, 1.276561047141377e+02, 1.276626586092420e+02, 1.276589614145426e+02, 1.276589614145426e+02, 2.088058812751374e+01, 2.109147072758124e+01, 2.087551238505336e+01, 2.105916294462731e+01, 2.100303449928249e+01, 2.100303449928249e+01, 1.661727578360759e+00, 1.872659608973406e+00, 1.437922527558878e+00, 1.479187725593028e+00, 1.709323680938084e+00, 1.709323680938085e+00, 3.414262913856684e-01, 3.259583381001906e-01, 3.486065551960279e-01, 1.696935968438262e+01, 2.416105496567194e-01, 2.416105496567194e-01, 6.656422764167371e-01, 7.031022642254414e-01, 2.797608671810647e-01, 4.109887119658967e-01, 4.105745581609283e-01, 4.105745581609287e-01, 1.584739287376723e+00, 1.582648594527733e+00, 1.583348262384870e+00, 1.583932661017454e+00, 1.583633651468094e+00, 1.583633651468094e+00, 1.495521416582949e+00, 1.240668881658713e+00, 1.302968027721092e+00, 1.372492122559750e+00, 1.335402640475094e+00, 1.335402640475094e+00, 2.061598950770280e+00, 3.939313765768008e-01, 4.584134750278036e-01, 6.318698778606366e-01, 5.250048507152836e-01, 5.250048507152836e-01, 1.055243476851936e+00, 7.275033828478141e-01, 5.917591820219076e-01, 5.630786591277560e-01, 2.865411193014504e-01, 2.865411193014503e-01, 7.910952627966455e-01, 3.203480487070232e-01, 4.572465129421897e-01, 3.055303438796462e-01, 3.683435904364907e-01, 3.683435904364903e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_ernzerhof_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_ernzerhof", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.321630407915986e+03, 3.321622249350913e+03, 3.321656834828691e+03, 3.321641444687662e+03, 3.321738976912347e+03, 3.321759821021205e+03, 3.321440590783781e+03, 3.321379482750955e+03, 3.321646290835380e+03, 3.321529746672818e+03, 3.321646290835380e+03, 3.321529746672818e+03, 8.650510377166948e+01, 8.651029935243372e+01, 8.650659129795537e+01, 8.651193169987137e+01, 8.654411086232420e+01, 8.655494367159493e+01, 8.650694543641282e+01, 8.651770730139222e+01, 8.647319647187345e+01, 8.655427110694997e+01, 8.647319647187345e+01, 8.655427110694997e+01, 3.030891036787431e+00, 3.079058892778580e+00, 3.013025767498639e+00, 3.072301370794634e+00, 2.767460622559938e+00, 2.676828788477854e+00, 2.762564970703167e+00, 2.792090810333770e+00, 3.160752146372153e+00, 2.236517209182483e+00, 3.160752146372153e+00, 2.236517209182483e+00, 3.263316479897584e-02, 6.569291016161825e-02, 5.093768363002005e-02, 8.717740660392240e-02, 4.016448629377480e+00, 4.408504570496158e+00, -2.204999062632198e-01, -2.160890361452502e-01, 4.430083494983255e-02, -4.626011353785924e-01, 4.430083494983237e-02, -4.626011353785916e-01, -7.438973007637220e-01, -7.494568488415598e-01, -7.265107317772903e-01, -7.306588343376195e-01, -1.125770284407640e+00, -1.117173853497105e+00, -7.669904312589340e-01, -7.773548689849645e-01, -7.414972850232358e-01, -4.618419303856039e-01, -7.414972850232341e-01, -4.618419303856031e-01, 1.996711339733794e+02, 1.995735700638664e+02, 1.997928911806568e+02, 1.996911742189735e+02, 1.996780914659691e+02, 1.995777490186188e+02, 1.997825671441508e+02, 1.996845874815825e+02, 1.997333731476785e+02, 1.996326323554153e+02, 1.997333731476785e+02, 1.996326323554153e+02, 2.412970336583568e+01, 2.412685006053407e+01, 2.463964883287113e+01, 2.462265886211494e+01, 2.341501502982820e+01, 2.362281273193536e+01, 2.386110808204496e+01, 2.406993327703135e+01, 2.492846804986992e+01, 2.445971610970654e+01, 2.492846804986992e+01, 2.445971610970654e+01, 2.491520750311790e+00, 2.478732674372976e+00, 3.035536827723968e+00, 3.039295261013391e+00, 2.027628002195165e+00, 2.192516190435283e+00, 2.293590473141280e+00, 2.447431534388381e+00, 2.713582421806038e+00, 2.444578047632423e+00, 2.713582421806037e+00, 2.444578047632424e+00, -6.574071607019187e-01, -6.338541185838364e-01, -1.557121596029243e-01, -1.514359154476981e-01, -7.075844718901354e-01, -6.610855207581414e-01, 2.758003700240411e+01, 2.755572701012934e+01, -4.246498678856055e-01, -2.695245210079517e-01, -4.246498678856055e-01, -2.695245210079517e-01, -6.457614793923386e-01, -6.941288039779191e-01, -6.977013557066498e-01, -7.260590403088657e-01, -2.930571029104520e-01, -2.783480821097531e-01, -8.325001660759824e-01, -8.505797313986212e-01, -4.144961102965034e-01, -4.208392587328008e-01, -4.144961102965034e-01, -4.208392587328000e-01, 2.607026770089981e+00, 2.627497385142314e+00, 2.560141837160584e+00, 2.580714578191211e+00, 2.576686426724623e+00, 2.597322975979191e+00, 2.590398557470279e+00, 2.610804863732607e+00, 2.583549857498918e+00, 2.604066339057656e+00, 2.583549857498918e+00, 2.604066339057656e+00, 2.473644245913140e+00, 2.490061701528534e+00, 1.644734500252851e+00, 1.662113999238281e+00, 1.883938431778112e+00, 1.903264384523212e+00, 2.121332042155335e+00, 2.136911808544328e+00, 2.001998295804284e+00, 2.017728637563474e+00, 2.001998295804284e+00, 2.017728637563474e+00, 3.328371947833266e+00, 3.340952970876721e+00, 3.794659916141574e-02, 4.542154984614112e-02, 2.802103533201804e-01, 2.982081424904447e-01, 7.988139700000932e-01, 8.093030355885320e-01, 5.298339085565948e-01, 5.313731505796463e-01, 5.298339085565947e-01, 5.313731505796463e-01, 1.383865537645183e+00, 1.408162620507034e+00, -1.179195272526024e+00, -1.178253280558941e+00, -1.128566346578695e+00, -1.100051009078256e+00, 7.693387822294666e-01, 7.962539440869884e-01, -6.435675867501210e-01, -5.076170713331132e-01, -6.435675867501203e-01, -5.076170713331128e-01, -8.486327493206275e-01, -8.422335189420593e-01, -3.666993394059707e-01, -2.756207276550552e-01, -4.678696648358551e-01, -4.537150753455861e-01, -6.234907425103361e-01, -6.199254228066390e-01, -2.892781910127813e-01, -4.122507714853961e-01, -2.892781910127811e-01, -4.122507714853949e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_ernzerhof_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_ernzerhof", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.577405997210801e-06, 0.000000000000000e+00, 1.577411708665735e-06, 1.577385916777496e-06, 0.000000000000000e+00, 1.577397123598247e-06, 1.577325069043720e-06, 0.000000000000000e+00, 1.577308983976215e-06, 1.577551765225072e-06, 0.000000000000000e+00, 1.577597959385143e-06, 1.577393849521364e-06, 0.000000000000000e+00, 1.577484933308197e-06, 1.577393849521364e-06, 0.000000000000000e+00, 1.577484933308197e-06, 3.778629959895447e-04, 0.000000000000000e+00, 3.778208187457597e-04, 3.778522323364180e-04, 0.000000000000000e+00, 3.778085849716349e-04, 3.775764403058740e-04, 0.000000000000000e+00, 3.774975958905662e-04, 3.778717302335368e-04, 0.000000000000000e+00, 3.777923649274683e-04, 3.780753551211649e-04, 0.000000000000000e+00, 3.775266653154751e-04, 3.780753551211649e-04, 0.000000000000000e+00, 3.775266653154751e-04, 5.744777395798358e-02, 0.000000000000000e+00, 5.621895925896879e-02, 5.791185182568659e-02, 0.000000000000000e+00, 5.639282058455263e-02, 6.460707115162415e-02, 0.000000000000000e+00, 6.717190304738478e-02, 6.445250810535766e-02, 0.000000000000000e+00, 6.365379633370177e-02, 5.416580945905004e-02, 0.000000000000000e+00, 7.936592742672929e-02, 5.416580945905004e-02, 0.000000000000000e+00, 7.936592742672929e-02, 5.509321347830297e+00, 0.000000000000000e+00, 4.694102965913585e+00, 5.169744640014035e+00, 0.000000000000000e+00, 4.318247545180423e+00, 3.770168520458743e-02, 0.000000000000000e+00, 3.292187595194937e-02, 1.730707495948957e+01, 0.000000000000000e+00, 1.644835189673049e+01, 4.779892009243284e+00, 0.000000000000000e+00, 6.379359237160294e+01, 4.779892009243283e+00, 0.000000000000000e+00, 6.379359237160286e+01, 6.323119176688630e+05, 0.000000000000000e+00, 5.269569150141337e+05, 5.495040420434222e+05, 0.000000000000000e+00, 4.469501886858033e+05, 2.942461339230681e+03, 0.000000000000000e+00, 2.461252389777942e+03, 2.911482540470366e+06, 0.000000000000000e+00, 3.062019897266857e+06, 8.907006430835333e+05, 0.000000000000000e+00, 4.833870135893242e+06, 8.907006430835337e+05, 0.000000000000000e+00, 4.833870135893244e+06, 1.062390149514711e-04, 0.000000000000000e+00, 1.063177243744559e-04, 1.061223182913891e-04, 0.000000000000000e+00, 1.062048675420054e-04, 1.062324608817677e-04, 0.000000000000000e+00, 1.063137962367389e-04, 1.061323252172157e-04, 0.000000000000000e+00, 1.062112687669575e-04, 1.061792582815947e-04, 0.000000000000000e+00, 1.062610183712257e-04, 1.061792582815947e-04, 0.000000000000000e+00, 1.062610183712257e-04, 2.473055801871462e-03, 0.000000000000000e+00, 2.473467990757837e-03, 2.405858809416201e-03, 0.000000000000000e+00, 2.408138570693370e-03, 2.557448387438959e-03, 0.000000000000000e+00, 2.532935986010497e-03, 2.496276984239981e-03, 0.000000000000000e+00, 2.472118617840096e-03, 2.376521595059885e-03, 0.000000000000000e+00, 2.430551879119073e-03, 2.376521595059885e-03, 0.000000000000000e+00, 2.430551879119073e-03, 7.708467531836952e-02, 0.000000000000000e+00, 7.767732961346648e-02, 5.584205792751950e-02, 0.000000000000000e+00, 5.571582429144376e-02, 1.053441979145323e-01, 0.000000000000000e+00, 9.354094522425914e-02, 8.540149089540015e-02, 0.000000000000000e+00, 7.751529201834575e-02, 6.761405078958264e-02, 0.000000000000000e+00, 7.915824575911165e-02, 6.761405078958267e-02, 0.000000000000000e+00, 7.915824575911168e-02, 8.371347890964158e+01, 0.000000000000000e+00, 8.000104847474915e+01, 6.389388157022911e+00, 0.000000000000000e+00, 6.264770199110094e+00, 1.229365378377530e+02, 0.000000000000000e+00, 9.968634665964986e+01, 2.037013809805180e-03, 0.000000000000000e+00, 2.039666601807719e-03, 4.529062747966853e+01, 0.000000000000000e+00, 3.267533082909873e+01, 4.529062747966853e+01, 0.000000000000000e+00, 3.267533082909873e+01, 6.896164094582661e+06, 0.000000000000000e+00, 6.144083612242511e+06, 3.268511210900474e+06, 0.000000000000000e+00, 3.124487250126828e+06, 7.816836547055149e+06, 0.000000000000000e+00, 6.580990899179136e+06, 4.893850707412959e+02, 0.000000000000000e+00, 4.816554397711844e+02, 7.337018524941687e+06, 0.000000000000000e+00, 2.832537012599503e+06, 7.337018524941684e+06, 0.000000000000000e+00, 2.832537012599503e+06, 6.947151999831651e-02, 0.000000000000000e+00, 6.865021361582650e-02, 7.204382715643222e-02, 0.000000000000000e+00, 7.116535338875772e-02, 7.113083993072873e-02, 0.000000000000000e+00, 7.026720362856392e-02, 7.037795300220742e-02, 0.000000000000000e+00, 6.954187972289574e-02, 7.075340542742485e-02, 0.000000000000000e+00, 6.990387929513654e-02, 7.075340542742485e-02, 0.000000000000000e+00, 6.990387929513654e-02, 7.494362618781929e-02, 0.000000000000000e+00, 7.420192976076258e-02, 1.439837200270563e-01, 0.000000000000000e+00, 1.417916297663290e-01, 1.176936288923024e-01, 0.000000000000000e+00, 1.158759841368530e-01, 9.727417304507460e-02, 0.000000000000000e+00, 9.619236803298330e-02, 1.069001227476973e-01, 0.000000000000000e+00, 1.056337138455866e-01, 1.069001227476973e-01, 0.000000000000000e+00, 1.056337138455866e-01, 4.870746443613563e-02, 0.000000000000000e+00, 4.840272458778367e-02, 2.623760360698866e+00, 0.000000000000000e+00, 2.562875542053495e+00, 1.277935831793759e+00, 0.000000000000000e+00, 1.224634377588619e+00, 4.220770460513633e-01, 0.000000000000000e+00, 4.142188999315515e-01, 7.142050060727579e-01, 0.000000000000000e+00, 7.132691734863394e-01, 7.142050060727587e-01, 0.000000000000000e+00, 7.132691734863396e-01, 1.863356632266054e-01, 0.000000000000000e+00, 1.817043612243232e-01, 3.144574477337324e+03, 0.000000000000000e+00, 3.075926125310129e+03, 1.172795171205014e+03, 0.000000000000000e+00, 1.043409276810724e+03, 4.515084427533269e-01, 0.000000000000000e+00, 4.289033398910754e-01, 2.097294517711189e+02, 0.000000000000000e+00, 1.603926858657984e+02, 2.097294517711188e+02, 0.000000000000000e+00, 1.603926858657984e+02, 2.159270428607679e+05, 0.000000000000000e+00, 1.940237367500622e+05, 1.678523567651371e+08, 0.000000000000000e+00, 1.667066151926823e+08, 1.992416923954723e+07, 0.000000000000000e+00, 1.656029183939149e+07, 2.423518889034820e+02, 0.000000000000000e+00, 2.282138939330142e+02, 8.633163091993866e+06, 0.000000000000000e+00, 3.678612439370626e+06, 8.633163091993893e+06, 0.000000000000000e+00, 3.678612439370637e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
