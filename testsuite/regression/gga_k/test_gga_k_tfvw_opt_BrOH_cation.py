
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_tfvw_opt_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tfvw_opt", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.015199795310720e+03, 2.015194009789534e+03, 2.015199070923800e+03, 2.015284517400437e+03, 2.015235367965401e+03, 2.015235367965401e+03, 5.923946266116147e+01, 5.923542518660343e+01, 5.914504060763021e+01, 5.932476927176995e+01, 5.923748738632374e+01, 5.923748738632374e+01, 2.736680587099019e+00, 2.746997698957880e+00, 3.045342858160236e+00, 3.071971798617958e+00, 3.104827110908535e+00, 3.104827110908535e+00, 4.623457093394240e-01, 4.512795650816308e-01, 3.531504103561185e+00, 5.135806883317351e-01, 4.955056384968620e-01, 4.955056384968619e-01, 4.371496058624793e-01, 4.252400440043594e-01, 5.538913074866257e-01, 4.589378061687914e-01, 4.111782695606717e-01, 4.111782695606712e-01, 1.104448186511482e+02, 1.102868381227076e+02, 1.104386345731256e+02, 1.102991487529023e+02, 1.103641160750130e+02, 1.103641160750130e+02, 2.839750446196730e+01, 2.843073073240725e+01, 2.896892609724979e+01, 2.899580819894990e+01, 2.814470098138696e+01, 2.814470098138696e+01, 1.602804901026834e+00, 1.447694018307062e+00, 1.436199064500859e+00, 1.184092734255772e+00, 1.602047988970772e+00, 1.602047988970772e+00, 5.785806510554545e-01, 6.924544473552992e-01, 5.615129876039155e-01, 1.304601266158315e+01, 4.815014694681684e-01, 4.815014694681684e-01, 4.000271856340148e-01, 4.232499467983267e-01, 1.688011392354767e-01, 4.958492661711804e-01, 2.478958282439248e-01, 2.478958282439251e-01, 1.146169237626896e+00, 1.217783149350505e+00, 1.192630258788358e+00, 1.171763285228892e+00, 1.182195937766666e+00, 1.182195937766666e+00, 1.061008872952567e+00, 1.453618040043474e+00, 1.331533434973299e+00, 1.213220556368605e+00, 1.270113637157892e+00, 1.270113637157892e+00, 1.608852579975403e+00, 7.894231801813053e-01, 8.081001780470143e-01, 7.831331346459562e-01, 7.831013789654626e-01, 7.831013789654626e-01, 1.248168180668923e+00, 5.819595592889012e-01, 5.709915713028986e-01, 6.205633758578432e-01, 4.453060146481614e-01, 4.453060146481614e-01, 4.866384754203422e-01, 1.920385940416741e-01, 2.745539616881257e-01, 4.492236481947393e-01, 2.222898376504889e-01, 2.222898376504887e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_tfvw_opt_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tfvw_opt", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [1.829002715791389e+03, 1.828999579268508e+03, 1.829034263803894e+03, 1.829022486275690e+03, 1.829111139202317e+03, 1.829139377537851e+03, 1.828755471520026e+03, 1.828685853491188e+03, 1.829022746300971e+03, 1.828849446544466e+03, 1.829022746300971e+03, 1.828849446544466e+03, 4.264434153695051e+01, 4.267051704377471e+01, 4.264803258964189e+01, 4.267578080585538e+01, 4.275339993984547e+01, 4.278150360781196e+01, 4.258440686731493e+01, 4.261572292274799e+01, 4.261930346723878e+01, 4.271036985186096e+01, 4.261930346723878e+01, 4.271036985186096e+01, 1.014144641578280e+00, 1.093890057293131e+00, 9.862704252449217e-01, 1.084255142617694e+00, 6.102490001288950e-01, 4.665032793743287e-01, 5.480600713596383e-01, 5.958833510591020e-01, 1.215761192159363e+00, -2.696157011923916e-01, 1.215761192159363e+00, -2.696157011923916e-01, -2.213340746256770e-01, -1.982621151053185e-01, -2.038141964501635e-01, -1.782592518305064e-01, 1.388235407490191e+00, 1.848670186058397e+00, -3.670678283781189e-01, -3.686473799869474e-01, -2.299753254010755e-01, -4.229010109173178e-01, -2.299753254010755e-01, -4.229010109173177e-01, -4.356923492471463e-01, -4.378000008825260e-01, -4.243633303960642e-01, -4.253342528115937e-01, -5.459218245191438e-01, -5.414896047500879e-01, -4.557516216959879e-01, -4.620790508445639e-01, -4.362099315782764e-01, -2.740287893369410e-01, -4.362099315782756e-01, -2.740287893369409e-01, 1.180043798308019e+02, 1.179396515415735e+02, 1.182504127679024e+02, 1.181773305932594e+02, 1.180173990818897e+02, 1.179473535585929e+02, 1.182285247896010e+02, 1.181632855793414e+02, 1.181309619918618e+02, 1.180591619257547e+02, 1.181309619918618e+02, 1.180591619257547e+02, 3.875302068489427e+00, 3.873876131641124e+00, 4.316925096022104e+00, 4.305540009203569e+00, 2.803346253071778e+00, 3.120645980628145e+00, 3.191670286753490e+00, 3.504302328710533e+00, 4.891732465394921e+00, 4.211016755477940e+00, 4.891732465394921e+00, 4.211016755477940e+00, 1.300549660053446e+00, 1.295138826740295e+00, 1.972204870026626e+00, 1.978836014243080e+00, 9.873208711096947e-01, 1.108743627578880e+00, 1.454262997392739e+00, 1.547353170381168e+00, 1.478491946716527e+00, 1.314165918840613e+00, 1.478491946716527e+00, 1.314165918840614e+00, -5.128644008683162e-01, -5.039702713608573e-01, -4.395926774075430e-01, -4.382776553370386e-01, -5.044325992262118e-01, -4.984571233391712e-01, 1.801060390800363e+01, 1.799668977201968e+01, -4.295587179981559e-01, -3.464085757728125e-01, -4.295587179981559e-01, -3.464085757728125e-01, -3.847326860037513e-01, -4.135384894912002e-01, -4.145211261392465e-01, -4.314031224125811e-01, -1.736481322074465e-01, -1.646148059166402e-01, -4.640532600301315e-01, -4.731868166730139e-01, -2.462982869463222e-01, -2.483851781291519e-01, -2.462982869463224e-01, -2.483851781291522e-01, 1.775121507993495e+00, 1.790302638137002e+00, 1.669745733757493e+00, 1.685437513942124e+00, 1.706639846488272e+00, 1.722385154816958e+00, 1.737521702692288e+00, 1.752661468880387e+00, 1.722081051852883e+00, 1.737510152183609e+00, 1.722081051852883e+00, 1.737510152183609e+00, 1.705496946097086e+00, 1.716982691738367e+00, 5.820459293636057e-01, 5.964386028260279e-01, 8.999941649808788e-01, 9.171034150918248e-01, 1.225820444202094e+00, 1.237109026129923e+00, 1.063412469404037e+00, 1.074518900755095e+00, 1.063412469404037e+00, 1.074518900755095e+00, 2.145892470143749e+00, 2.161142720884936e+00, -3.869569376824925e-01, -3.825299548633234e-01, -2.325256348754952e-01, -2.164437193198461e-01, 2.316008318056690e-01, 2.387550520657988e-01, -1.508933064188211e-02, -1.087943587936993e-02, -1.508933064188229e-02, -1.087943587936983e-02, 4.723354938472544e-01, 4.942755000482699e-01, -5.728393719251772e-01, -5.721624524605567e-01, -5.582483645503971e-01, -5.489726634642699e-01, 3.152688499435609e-01, 3.363283865006931e-01, -4.291300334331963e-01, -3.772271606783495e-01, -4.291300334331961e-01, -3.772271606783493e-01, -4.887384837162686e-01, -4.835911395706165e-01, -2.194035622629505e-01, -1.648465004785891e-01, -2.792261930097222e-01, -2.706140054585714e-01, -4.091900699390234e-01, -4.114414458594042e-01, -1.715040649010987e-01, -2.438199821818746e-01, -1.715040649010983e-01, -2.438199821818742e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_tfvw_opt_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tfvw_opt", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [7.745724012470741e-06, 0.000000000000000e+00, 7.745753935286158e-06, 7.745648940071906e-06, 0.000000000000000e+00, 7.745699397318746e-06, 7.745393959995815e-06, 0.000000000000000e+00, 7.745338177930930e-06, 7.746242171925642e-06, 0.000000000000000e+00, 7.746419189524585e-06, 7.745679985752778e-06, 0.000000000000000e+00, 7.745976153739107e-06, 7.745679985752778e-06, 0.000000000000000e+00, 7.745976153739107e-06, 1.794823248205090e-03, 0.000000000000000e+00, 1.794896716272810e-03, 1.794806414288483e-03, 0.000000000000000e+00, 1.794890306578307e-03, 1.794503267990352e-03, 0.000000000000000e+00, 1.794392440647367e-03, 1.794159707329050e-03, 0.000000000000000e+00, 1.794084169588848e-03, 1.795723919078756e-03, 0.000000000000000e+00, 1.793709719324572e-03, 1.795723919078756e-03, 0.000000000000000e+00, 1.793709719324572e-03, 2.516228303388734e-01, 0.000000000000000e+00, 2.486542223383903e-01, 2.528013003735409e-01, 0.000000000000000e+00, 2.491431044611023e-01, 2.692741099091595e-01, 0.000000000000000e+00, 2.749166968283606e-01, 2.662664685801497e-01, 0.000000000000000e+00, 2.645434561207111e-01, 2.430198055702217e-01, 0.000000000000000e+00, 2.957412913783959e-01, 2.430198055702217e-01, 0.000000000000000e+00, 2.957412913783959e-01, 1.541029866469430e+01, 0.000000000000000e+00, 1.374331438801421e+01, 1.485438951201344e+01, 0.000000000000000e+00, 1.304058814260096e+01, 1.659918058678242e-01, 0.000000000000000e+00, 1.503168968935866e-01, 3.390201125310384e+01, 0.000000000000000e+00, 3.253628592595081e+01, 1.353590215665728e+01, 0.000000000000000e+00, 8.766416763274847e+01, 1.353590215665728e+01, 0.000000000000000e+00, 8.766416763274843e+01, 3.788377305526281e+05, 0.000000000000000e+00, 3.157340820601720e+05, 3.292441073725181e+05, 0.000000000000000e+00, 2.678198924797185e+05, 1.915098792694347e+03, 0.000000000000000e+00, 1.626227736501329e+03, 1.744024555494332e+06, 0.000000000000000e+00, 1.834194436256325e+06, 5.336039468025500e+05, 0.000000000000000e+00, 2.895596639579812e+06, 5.336039468025500e+05, 0.000000000000000e+00, 2.895596639579809e+06, 5.345936476680611e-04, 0.000000000000000e+00, 5.349779990308070e-04, 5.342942589732562e-04, 0.000000000000000e+00, 5.346885329034309e-04, 5.345754098014606e-04, 0.000000000000000e+00, 5.349669033717931e-04, 5.343185328766922e-04, 0.000000000000000e+00, 5.347039497205875e-04, 5.344415066548639e-04, 0.000000000000000e+00, 5.348327934770920e-04, 5.344415066548639e-04, 0.000000000000000e+00, 5.348327934770920e-04, 1.006927847975902e-02, 0.000000000000000e+00, 1.007080507689263e-02, 9.850032085730388e-03, 0.000000000000000e+00, 9.858078257973746e-03, 1.025831525563162e-02, 0.000000000000000e+00, 1.020527077639631e-02, 1.006361395112658e-02, 0.000000000000000e+00, 1.000941102312793e-02, 9.809566720163278e-03, 0.000000000000000e+00, 9.939582770538443e-03, 9.809566720163278e-03, 0.000000000000000e+00, 9.939582770538443e-03, 3.722279152843995e-01, 0.000000000000000e+00, 3.752000571923948e-01, 2.916865004701634e-01, 0.000000000000000e+00, 2.912896013266893e-01, 4.986984678484264e-01, 0.000000000000000e+00, 4.475057775170035e-01, 4.415804676865168e-01, 0.000000000000000e+00, 4.003345930779489e-01, 3.308782179715606e-01, 0.000000000000000e+00, 3.857200448610391e-01, 3.308782179715608e-01, 0.000000000000000e+00, 3.857200448610392e-01, 1.006513178764094e+02, 0.000000000000000e+00, 9.782590351783209e+01, 1.457196557862485e+01, 0.000000000000000e+00, 1.435595802522983e+01, 1.359632615607973e+02, 0.000000000000000e+00, 1.162071717569488e+02, 1.066336176526700e-02, 0.000000000000000e+00, 1.067774678877843e-02, 6.718590881283062e+01, 0.000000000000000e+00, 5.651674104862435e+01, 6.718590881283062e+01, 0.000000000000000e+00, 5.651674104862435e+01, 4.130851442155246e+06, 0.000000000000000e+00, 3.680350292314906e+06, 1.957892304694753e+06, 0.000000000000000e+00, 1.871618563215102e+06, 4.682514692455559e+06, 0.000000000000000e+00, 3.942283369331914e+06, 4.156870969689313e+02, 0.000000000000000e+00, 4.081126310905927e+02, 4.394991131780328e+06, 0.000000000000000e+00, 1.696846175036563e+06, 4.394991131780327e+06, 0.000000000000000e+00, 1.696846175036563e+06, 3.704608729867160e-01, 0.000000000000000e+00, 3.661976395498105e-01, 3.769319475149425e-01, 0.000000000000000e+00, 3.725508730568372e-01, 3.746447861154090e-01, 0.000000000000000e+00, 3.702918175369752e-01, 3.727554434473386e-01, 0.000000000000000e+00, 3.684637331497603e-01, 3.736993284530146e-01, 0.000000000000000e+00, 3.693774806525599e-01, 3.736993284530146e-01, 0.000000000000000e+00, 3.693774806525599e-01, 4.019584180121766e-01, 0.000000000000000e+00, 3.979983645114121e-01, 6.364138123009899e-01, 0.000000000000000e+00, 6.282135302100125e-01, 5.543317410484815e-01, 0.000000000000000e+00, 5.470164373632401e-01, 4.855481725309293e-01, 0.000000000000000e+00, 4.804619750125344e-01, 5.189545168468013e-01, 0.000000000000000e+00, 5.132139258192209e-01, 5.189545168468013e-01, 0.000000000000000e+00, 5.132139258192209e-01, 2.535949476743683e-01, 0.000000000000000e+00, 2.523592630216537e-01, 7.233998293332079e+00, 0.000000000000000e+00, 7.109782703851955e+00, 4.203182107357287e+00, 0.000000000000000e+00, 4.079210382970365e+00, 1.811607116437920e+00, 0.000000000000000e+00, 1.781885961769349e+00, 2.730286202058154e+00, 0.000000000000000e+00, 2.733177699514397e+00, 2.730286202058156e+00, 0.000000000000000e+00, 2.733177699514397e+00, 8.187240307657294e-01, 0.000000000000000e+00, 8.020408372116645e-01, 2.026715521146210e+03, 0.000000000000000e+00, 1.985676495702226e+03, 8.327134855504115e+02, 0.000000000000000e+00, 7.543898528633754e+02, 2.051469685444656e+00, 0.000000000000000e+00, 1.961395358171026e+00, 2.171798710871063e+02, 0.000000000000000e+00, 1.844831156682971e+02, 2.171798710871063e+02, 0.000000000000000e+00, 1.844831156682971e+02, 1.294320778663911e+05, 0.000000000000000e+00, 1.163168821713079e+05, 1.005436141622997e+08, 0.000000000000000e+00, 9.985735559350562e+07, 1.193464304665186e+07, 0.000000000000000e+00, 9.919689112501306e+06, 2.469357682167394e+02, 0.000000000000000e+00, 2.352066726668972e+02, 5.171492585890004e+06, 0.000000000000000e+00, 2.203638170654286e+06, 5.171492585890016e+06, 0.000000000000000e+00, 2.203638170654293e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
