
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_baltin_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_baltin", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.600277765284292e+03, 2.600276478036484e+03, 2.600300563793310e+03, 2.600319105029091e+03, 2.600305150891760e+03, 2.600305150891760e+03, 7.432556857343906e+01, 7.432190760250069e+01, 7.424096240889023e+01, 7.441000327301401e+01, 7.432477475626109e+01, 7.432477475626109e+01, 3.259298551227504e+00, 3.267285336542164e+00, 3.506299667206689e+00, 3.542326061482743e+00, 3.574045487855373e+00, 3.574045487855373e+00, 4.769771894276529e-01, 4.682099917872008e-01, 4.257155779811233e+00, 5.040476540452329e-01, 5.051676628492093e-01, 5.051676628492093e-01, 4.055024212528915e-01, 3.944630349592980e-01, 5.156903903361688e-01, 4.256712720770204e-01, 3.813951485531392e-01, 3.813951485531386e-01, 1.458834849768109e+02, 1.457529174966854e+02, 1.458785441026079e+02, 1.457632590827310e+02, 1.458166904484964e+02, 1.458166904484964e+02, 3.247662144864043e+01, 3.259681607651578e+01, 3.294178006894678e+01, 3.304525034460695e+01, 3.232322867994236e+01, 3.232322867994236e+01, 2.038314493917324e+00, 1.993853351632860e+00, 1.805204805410140e+00, 1.609363248994887e+00, 2.057396126307044e+00, 2.057396126307044e+00, 5.499755680402612e-01, 6.904568255456337e-01, 5.322579872339380e-01, 1.800601874747691e+01, 4.650498656063564e-01, 4.650498656063564e-01, 3.710254885182536e-01, 3.925709291675894e-01, 1.565691843481714e-01, 4.650576752271811e-01, 2.299338572172845e-01, 2.299338572172848e-01, 1.620174414685047e+00, 1.680221106891179e+00, 1.659131024188459e+00, 1.641624503477463e+00, 1.650375597113268e+00, 1.650375597113268e+00, 1.511393263303771e+00, 1.736787686723356e+00, 1.661074798398348e+00, 1.590257020661568e+00, 1.622935788956140e+00, 1.622935788956140e+00, 2.207840059364655e+00, 8.091487628689635e-01, 8.605272365599437e-01, 9.200407508912731e-01, 8.727944289218379e-01, 8.727944289218379e-01, 1.487019954709238e+00, 5.415508940981493e-01, 5.329282603590673e-01, 7.556152051765058e-01, 4.214239760143839e-01, 4.214239760143839e-01, 4.514596463744138e-01, 1.781116905733198e-01, 2.546469070894217e-01, 4.240380056801518e-01, 2.061822501570600e-01, 2.061822501570597e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_baltin_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_baltin", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([2.915078117770722e+03, 2.915072069995345e+03, 2.915115252431512e+03, 2.915099036345161e+03, 2.915213299451535e+03, 2.915245341410957e+03, 2.914794456474546e+03, 2.914711321911271e+03, 2.915101313699590e+03, 2.914909517276785e+03, 2.915101313699590e+03, 2.914909517276785e+03, 7.185626573870930e+01, 7.187966124794234e+01, 7.185989108190867e+01, 7.188462014498977e+01, 7.196125442093498e+01, 7.198865008856993e+01, 7.180864248598679e+01, 7.183859422964009e+01, 7.182224076437798e+01, 7.193087357527899e+01, 7.182224076437798e+01, 7.193087357527899e+01, 2.137649112296111e+00, 2.221119420521744e+00, 2.108073493454297e+00, 2.210604398447082e+00, 1.710145952688382e+00, 1.561116145722777e+00, 1.661067307981319e+00, 1.710422019481256e+00, 2.352729636107488e+00, 8.247716212562548e-01, 2.352729636107488e+00, 8.247716212562548e-01, -1.282366325225627e-01, -1.007276116983734e-01, -1.100770326589505e-01, -7.921438284838109e-02, 2.867187496148667e+00, 3.402218077781000e+00, -2.948974640473149e-01, -2.950966215973653e-01, -1.292934104043603e-01, -3.680518190989340e-01, -1.292934104043605e-01, -3.680518190989335e-01, -4.040012022018245e-01, -4.059442197526107e-01, -3.934849223845515e-01, -3.943706581502876e-01, -5.032332794272593e-01, -4.987662210193622e-01, -4.226638077322418e-01, -4.285334075275216e-01, -4.044998501380040e-01, -2.541304654407104e-01, -4.044998501380037e-01, -2.541304654407103e-01, 1.818781327825314e+02, 1.817834025837859e+02, 1.821333768994747e+02, 1.820299702854497e+02, 1.818918551893309e+02, 1.817915470424567e+02, 1.821108818634645e+02, 1.820155518218729e+02, 1.820092798665547e+02, 1.819073483375747e+02, 1.820092798665547e+02, 1.819073483375747e+02, 1.382598229226580e+01, 1.382362575399615e+01, 1.438684596341541e+01, 1.437063609514745e+01, 1.270568619579445e+01, 1.303496027596204e+01, 1.319577223798750e+01, 1.352264815804819e+01, 1.494849788528541e+01, 1.422616106285212e+01, 1.494849788528541e+01, 1.422616106285212e+01, 2.128248301880389e+00, 2.118354248989467e+00, 2.913934819179541e+00, 2.921070169868886e+00, 1.674388914498395e+00, 1.843814066807055e+00, 2.171552307248426e+00, 2.313474482906079e+00, 2.368584377269536e+00, 2.119248599755183e+00, 2.368584377269535e+00, 2.119248599755184e+00, -4.536175344071064e-01, -4.449459383658829e-01, -3.277380049561558e-01, -3.257181584195867e-01, -4.498029004546544e-01, -4.422696899099664e-01, 2.655243117924297e+01, 2.653067933543646e+01, -3.695346758545754e-01, -2.888877078903974e-01, -3.695346758545754e-01, -2.888877078903974e-01, -3.568101509888015e-01, -3.835252358533856e-01, -3.844261333292825e-01, -4.000827775430145e-01, -1.610366842138610e-01, -1.526564575404118e-01, -4.218304091954882e-01, -4.301958629775994e-01, -2.284169120408916e-01, -2.303366897114710e-01, -2.284169120408918e-01, -2.303366897114714e-01, 2.571329887682137e+00, 2.592574915705233e+00, 2.462980049273133e+00, 2.484687963391636e+00, 2.500915801959315e+00, 2.522699913803813e+00, 2.532657397296020e+00, 2.553838106220208e+00, 2.516784882071327e+00, 2.538254144965719e+00, 2.516784882071327e+00, 2.538254144965719e+00, 2.457781208133067e+00, 2.474234948637521e+00, 1.184676711276616e+00, 1.203624961254755e+00, 1.541745520100645e+00, 1.563903320581477e+00, 1.909227785196725e+00, 1.925138560329101e+00, 1.725089018750676e+00, 1.740888996480850e+00, 1.725089018750676e+00, 1.740888996480850e+00, 3.181099071849455e+00, 3.199127419573896e+00, -2.313368970734265e-01, -2.257496093675625e-01, -3.247310448818932e-02, -1.386461168689345e-02, 5.358532963780430e-01, 5.460487741970147e-01, 2.302412571706405e-01, 2.339735293508298e-01, 2.302412571706404e-01, 2.339735293508295e-01, 9.832375349557553e-01, 1.011120186095553e+00, -5.283132003836374e-01, -5.276444695726610e-01, -5.123691987580254e-01, -5.033993244293384e-01, 5.879128528202013e-01, 6.164243586410380e-01, -3.848010478060873e-01, -3.351451513040049e-01, -3.848010478060874e-01, -3.351451513040052e-01, -4.531046574831014e-01, -4.483168762647259e-01, -2.034883909923258e-01, -1.528882493934031e-01, -2.589652595833579e-01, -2.509765006084252e-01, -3.673906285131244e-01, -3.690790134767490e-01, -1.590492146371891e-01, -2.261079618833090e-01, -1.590492146371889e-01, -2.261079618833090e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_baltin_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_baltin", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([7.183939911399315e-06, 0.000000000000000e+00, 7.183967663964161e-06, 7.183870283873035e-06, 0.000000000000000e+00, 7.183917081542149e-06, 7.183633797065310e-06, 0.000000000000000e+00, 7.183582060778082e-06, 7.184420489636100e-06, 0.000000000000000e+00, 7.184584668451666e-06, 7.183899077863828e-06, 0.000000000000000e+00, 7.184173765293179e-06, 7.183899077863828e-06, 0.000000000000000e+00, 7.184173765293179e-06, 1.664647790952597e-03, 0.000000000000000e+00, 1.664715930507150e-03, 1.664632177971140e-03, 0.000000000000000e+00, 1.664709985696816e-03, 1.664351018354992e-03, 0.000000000000000e+00, 1.664248229129445e-03, 1.664032375560239e-03, 0.000000000000000e+00, 1.663962316443005e-03, 1.665483137709846e-03, 0.000000000000000e+00, 1.663615024415297e-03, 1.665483137709846e-03, 0.000000000000000e+00, 1.663615024415297e-03, 2.333730572610586e-01, 0.000000000000000e+00, 2.306197573162589e-01, 2.344660548817853e-01, 0.000000000000000e+00, 2.310731816556318e-01, 2.497441197450932e-01, 0.000000000000000e+00, 2.549774594957898e-01, 2.469546174922554e-01, 0.000000000000000e+00, 2.453565721765082e-01, 2.253939951495285e-01, 0.000000000000000e+00, 2.742916818571656e-01, 2.253939951495285e-01, 0.000000000000000e+00, 2.742916818571656e-01, 1.429261608671332e+01, 0.000000000000000e+00, 1.274653532555575e+01, 1.377702607309724e+01, 0.000000000000000e+00, 1.209477661157574e+01, 1.539527043849233e-01, 0.000000000000000e+00, 1.394146697213751e-01, 3.144315642098298e+01, 0.000000000000000e+00, 3.017648481353256e+01, 1.255416634822601e+01, 0.000000000000000e+00, 8.130603564528704e+01, 1.255416634822600e+01, 0.000000000000000e+00, 8.130603564528701e+01, 3.513612785685661e+05, 0.000000000000000e+00, 2.928344296607049e+05, 3.053645959678337e+05, 0.000000000000000e+00, 2.483953742160253e+05, 1.776199956125346e+03, 0.000000000000000e+00, 1.508280223058180e+03, 1.617533440451059e+06, 0.000000000000000e+00, 1.701163454142391e+06, 4.949025661310981e+05, 0.000000000000000e+00, 2.685583972899102e+06, 4.949025661310981e+05, 0.000000000000000e+00, 2.685583972899099e+06, 4.958204856873133e-04, 0.000000000000000e+00, 4.961769607037719e-04, 4.955428111419553e-04, 0.000000000000000e+00, 4.959084890590158e-04, 4.958035705819520e-04, 0.000000000000000e+00, 4.961666697939093e-04, 4.955653245007349e-04, 0.000000000000000e+00, 4.959227877208197e-04, 4.956793792013205e-04, 0.000000000000000e+00, 4.960422866602598e-04, 4.956793792013205e-04, 0.000000000000000e+00, 4.960422866602598e-04, 9.338970951362479e-03, 0.000000000000000e+00, 9.340386827019688e-03, 9.135626122918189e-03, 0.000000000000000e+00, 9.143088720064689e-03, 9.514297213533316e-03, 0.000000000000000e+00, 9.465099959558814e-03, 9.333717261293431e-03, 0.000000000000000e+00, 9.283445578861004e-03, 9.098095641034388e-03, 0.000000000000000e+00, 9.218681849877983e-03, 9.098095641034388e-03, 0.000000000000000e+00, 9.218681849877983e-03, 3.452308618849931e-01, 0.000000000000000e+00, 3.479874394290436e-01, 2.705309779912479e-01, 0.000000000000000e+00, 2.701628652631139e-01, 4.625287218034006e-01, 0.000000000000000e+00, 4.150489496540564e-01, 4.095533924007762e-01, 0.000000000000000e+00, 3.712990104599787e-01, 3.068801873229092e-01, 0.000000000000000e+00, 3.577444304034865e-01, 3.068801873229093e-01, 0.000000000000000e+00, 3.577444304034865e-01, 9.335125011724114e+01, 0.000000000000000e+00, 9.073075822466343e+01, 1.351508586405569e+01, 0.000000000000000e+00, 1.331474496867912e+01, 1.261020789842305e+02, 0.000000000000000e+00, 1.077788645492013e+02, 9.889966393310150e-03, 0.000000000000000e+00, 9.903308095695075e-03, 6.231302987648917e+01, 0.000000000000000e+00, 5.241767858340230e+01, 6.231302987648917e+01, 0.000000000000000e+00, 5.241767858340230e+01, 3.831247859539275e+06, 0.000000000000000e+00, 3.413420786788079e+06, 1.815889727967680e+06, 0.000000000000000e+00, 1.735873273247174e+06, 4.342899918805007e+06, 0.000000000000000e+00, 3.656356306188012e+06, 3.855380235289661e+02, 0.000000000000000e+00, 3.785129206924435e+02, 4.076229949712789e+06, 0.000000000000000e+00, 1.573776827153184e+06, 4.076229949712788e+06, 0.000000000000000e+00, 1.573776827153184e+06, 3.435919801397849e-01, 0.000000000000000e+00, 3.396379517249216e-01, 3.495937187116886e-01, 0.000000000000000e+00, 3.455303960831360e-01, 3.474724412125849e-01, 0.000000000000000e+00, 3.434351859923717e-01, 3.457201293334619e-01, 0.000000000000000e+00, 3.417396894358749e-01, 3.465955559757137e-01, 0.000000000000000e+00, 3.425871643967352e-01, 3.465955559757137e-01, 0.000000000000000e+00, 3.425871643967352e-01, 3.728050621518982e-01, 0.000000000000000e+00, 3.691322245514859e-01, 5.902558081070211e-01, 0.000000000000000e+00, 5.826502784362942e-01, 5.141270089486936e-01, 0.000000000000000e+00, 5.073422717151179e-01, 4.503321948904928e-01, 0.000000000000000e+00, 4.456148905699634e-01, 4.813156342485637e-01, 0.000000000000000e+00, 4.759913984596744e-01, 4.813156342485637e-01, 0.000000000000000e+00, 4.759913984596744e-01, 2.352021403026973e-01, 0.000000000000000e+00, 2.340560777422128e-01, 6.709328782537636e+00, 0.000000000000000e+00, 6.594122337091409e+00, 3.898332505432468e+00, 0.000000000000000e+00, 3.783352237961755e+00, 1.680214353958375e+00, 0.000000000000000e+00, 1.652648823751947e+00, 2.532263218380777e+00, 0.000000000000000e+00, 2.534945000477089e+00, 2.532263218380780e+00, 0.000000000000000e+00, 2.534945000477089e+00, 7.593433785621679e-01, 0.000000000000000e+00, 7.438701884730704e-01, 1.879721314363022e+03, 0.000000000000000e+00, 1.841658779171050e+03, 7.723182021428415e+02, 0.000000000000000e+00, 6.996752484357035e+02, 1.902680101506822e+00, 0.000000000000000e+00, 1.819138710972942e+00, 2.014281868735915e+02, 0.000000000000000e+00, 1.711028711447757e+02, 2.014281868735915e+02, 0.000000000000000e+00, 1.711028711447757e+02, 1.200445908610566e+05, 0.000000000000000e+00, 1.078806178550435e+05, 9.325135796911491e+07, 0.000000000000000e+00, 9.261487255936339e+07, 1.106904381993309e+07, 0.000000000000000e+00, 9.200231044798095e+06, 2.290259397298640e+02, 0.000000000000000e+00, 2.181475353987176e+02, 4.796413082813954e+06, 0.000000000000000e+00, 2.043812067013806e+06, 4.796413082813964e+06, 0.000000000000000e+00, 2.043812067013813e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
