
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_absp2_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_absp2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.709753665145001e+02, 2.709484542106358e+02, 2.708748722983915e+02, 2.712743291417831e+02, 2.710584700772158e+02, 2.710584700772158e+02, 1.690429087162252e+01, 1.689719604248856e+01, 1.673410499661551e+01, 1.702422083806676e+01, 1.689659911506076e+01, 1.689659911506076e+01, 1.518017067617444e+00, 1.541803366328122e+00, 2.199006347053801e+00, 2.196194943069543e+00, 2.165486803405692e+00, 2.165486803405692e+00, 5.681306035255088e-01, 5.433772046922872e-01, 1.739130729138950e+00, 7.401098842129961e-01, 6.431279408254184e-01, 6.431279408254186e-01, 7.295477004520978e-01, 7.096409939001759e-01, 9.163557833424222e-01, 7.660538914693839e-01, 6.793960815596767e-01, 6.793960815596759e-01, 5.827172094521252e-01, 2.514837045402660e-01, 5.690316448953235e-01, 2.765879733542444e-01, 4.139147226597328e-01, 4.139147226597328e-01, 2.143992179004189e+01, 2.111730073407060e+01, 2.266771938866209e+01, 2.238039276009017e+01, 2.067340881231826e+01, 2.067340881231826e+01, 3.416709379121414e-01, -3.377295245870617e-01, 3.967211896969849e-01, -1.851293644312704e-01, 2.582988266688361e-01, 2.582988266688361e-01, 9.093910854239916e-01, 9.520149411077348e-01, 8.889295781165356e-01, -3.204957058045368e+00, 7.231427969598843e-01, 7.231427969598843e-01, 6.674593051505163e-01, 7.061198350039372e-01, 2.817083896882973e-01, 8.058525616539369e-01, 4.129613057269543e-01, 4.129613057269548e-01, -4.433286327847244e-01, -2.968126260778120e-01, -3.482735445456291e-01, -3.909232844820233e-01, -3.695939161064249e-01, -3.695939161064249e-01, -4.594567519078792e-01, 7.828893387585109e-01, 4.203684712942001e-01, 5.823440444958722e-02, 2.381894563813960e-01, 2.381894563813960e-01, -3.416937190621270e-01, 9.922558360989360e-01, 8.793518850709672e-01, 4.879721824854485e-01, 6.875987466395443e-01, 6.875987466395441e-01, 6.902584846322994e-01, 9.639365190780329e-01, 9.389804051439808e-01, 2.740719115937808e-01, 7.064755678975423e-01, 7.064755678975420e-01, 8.117558715246925e-01, 3.188765426893988e-01, 4.582971129338753e-01, 7.186109598809303e-01, 3.674543030733959e-01, 3.674543030733955e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_absp2_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_absp2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.102072515756197e+03, -2.102055816853653e+03, -2.102030793866905e+03, -2.102278231248369e+03, -2.102141578352234e+03, -2.102141578352234e+03, -6.544054342701007e+01, -6.543365811952094e+01, -6.527778877966243e+01, -6.557378331221609e+01, -6.543544294249065e+01, -6.543544294249065e+01, -3.323706661154266e+00, -3.343513505434439e+00, -3.906281883842226e+00, -3.931930857606036e+00, -3.895150581516598e+00, -3.895150581516598e+00, -6.885213737774528e-01, -6.674422147583279e-01, -4.194279163920967e+00, -8.094977180593400e-01, -7.306224815311622e-01, -7.306224815311623e-01, -7.296935913745296e-01, -7.098026182001489e-01, -9.212753733639557e-01, -7.661025522711714e-01, -6.794729162164936e-01, -6.794729162164925e-01, -1.093838469379782e+02, -1.090925660515628e+02, -1.093721510535715e+02, -1.091149758263864e+02, -1.092352143296439e+02, -1.092352143296439e+02, -3.681199502725480e+01, -3.671318534757967e+01, -3.787742259487314e+01, -3.778675777254110e+01, -3.624812850580940e+01, -3.624812850580940e+01, -1.723321766957938e+00, -1.292841002860663e+00, -1.579668593611849e+00, -1.093143286460936e+00, -1.684859357034988e+00, -1.684859357034988e+00, -9.428381636818733e-01, -1.072771647129660e+00, -9.175555166074587e-01, -1.158483621226417e+01, -7.692054652074809e-01, -7.692054652074809e-01, -6.674882736527770e-01, -7.061663391209789e-01, -2.817355800254990e-01, -8.188019723086092e-01, -4.130007664622913e-01, -4.130007664622914e-01, -9.517719215464676e-01, -1.082328555417035e+00, -1.036473026787172e+00, -9.984487851154965e-01, -1.017461921647071e+00, -1.017461921647071e+00, -8.610360368321237e-01, -1.755958594058087e+00, -1.487381290479444e+00, -1.222700520917371e+00, -1.352351929534071e+00, -1.352351929534071e+00, -1.450428148611354e+00, -1.185016866203300e+00, -1.157366498863110e+00, -9.730170199326647e-01, -1.054425766626265e+00, -1.054425766626264e+00, -1.515011586516471e+00, -9.684433161873058e-01, -9.473571600183560e-01, -7.248361971754236e-01, -7.274709462884790e-01, -7.274709462884787e-01, -8.120464552605378e-01, -3.188798655348170e-01, -4.583117533467228e-01, -7.371247119214550e-01, -3.674880895042072e-01, -3.674880895042071e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_absp2_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_absp2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([6.465558408889447e-06, 6.465504314368241e-06, 6.465247135945692e-06, 6.466052320295342e-06, 6.465632777057505e-06, 6.465632777057505e-06, 1.498213674029333e-03, 1.498203972832304e-03, 1.497869659939608e-03, 1.497597610737780e-03, 1.498093701227576e-03, 1.498093701227576e-03, 2.087894145121824e-01, 2.094815290984875e-01, 2.271002921854555e-01, 2.215377010814852e-01, 2.227053156391256e-01, 2.227053156391256e-01, 1.212783639246232e+01, 1.159308837356066e+01, 1.316911190273232e-01, 2.771712142089699e+01, 1.957499616309466e+01, 1.957499616309467e+01, 2.874952765754121e+05, 2.465546137483149e+05, 1.468181512983260e+03, 1.492465251230529e+06, 7.522070256195640e+05, 7.522070256195640e+05, 4.463987932311861e-04, 4.461530243974384e-04, 4.463865483604211e-04, 4.461695925050767e-04, 4.462746898771731e-04, 4.462746898771731e-04, 8.405710951977129e-03, 8.225420308312626e-03, 8.540671341115708e-03, 8.377662191483195e-03, 8.242192632024159e-03, 8.242192632024159e-03, 3.119433029115474e-01, 2.433121166868861e-01, 3.937539884428952e-01, 3.505402349909846e-01, 2.973293717959445e-01, 2.973293717959445e-01, 8.282011699658827e+01, 1.207275069070744e+01, 1.046004417152880e+02, 8.906969473199959e-03, 5.124476217261497e+01, 5.124476217261497e+01, 3.249256950004610e+06, 1.597482152034641e+06, 3.573149841128374e+06, 3.437938582102904e+02, 2.043738650702208e+06, 2.043738650702208e+06, 3.074431719955891e-01, 3.127951632558527e-01, 3.108978161438085e-01, 3.093465472861635e-01, 3.101217331306696e-01, 3.101217331306696e-01, 3.338635972182413e-01, 5.277855463435615e-01, 4.596408969843099e-01, 4.031650116453307e-01, 4.307748394546119e-01, 4.307748394546119e-01, 2.111649385648006e-01, 5.986104049931646e+00, 3.455983667980389e+00, 1.499685834607408e+00, 2.280243059795127e+00, 2.280243059795128e+00, 6.763744328316319e-01, 1.674445854271037e+03, 6.607838326576669e+02, 1.673974624492028e+00, 1.665281126261038e+02, 1.665281126261038e+02, 1.022742173599572e+05, 8.363882291868500e+07, 9.043637243187241e+06, 2.011089761174724e+02, 2.579643228134502e+06, 2.579643228134509e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
