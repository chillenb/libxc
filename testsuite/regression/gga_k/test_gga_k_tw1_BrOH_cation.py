
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_tw1_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tw1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.192596773263906e+03, 2.192605582761172e+03, 2.192654009300993e+03, 2.192522751296020e+03, 2.192590210798156e+03, 2.192590210798156e+03, 5.925629794987437e+01, 5.925573768362361e+01, 5.924568974252644e+01, 5.928567018058440e+01, 5.925849269769810e+01, 5.925849269769810e+01, 2.299421520040823e+00, 2.297083066903762e+00, 2.246402182249487e+00, 2.280210582442514e+00, 2.279871018044044e+00, 2.279871018044044e+00, 1.847891430299191e-01, 1.885642101757994e-01, 3.097205343087719e+00, 1.186251861583592e-01, 1.771859587481856e-01, 1.771859587481855e-01, 3.012549879263930e-04, 3.341452065907251e-04, 9.997894801397293e-03, 1.000989171455609e-04, 2.004394525120241e-04, 2.004394525120241e-04, 1.283755366787152e+02, 1.283811339044677e+02, 1.283761686696522e+02, 1.283811039020096e+02, 1.283781688584869e+02, 1.283781688584869e+02, 2.037024830800758e+01, 2.061119827944619e+01, 2.028054932948167e+01, 2.049307322145241e+01, 2.054692619424287e+01, 2.054692619424287e+01, 1.670725730684085e+00, 1.879165273765633e+00, 1.444654084295887e+00, 1.485629172219302e+00, 1.719141021882321e+00, 1.719141021882322e+00, 6.279278074044972e-02, 1.985592322675066e-01, 5.442179797041131e-02, 1.702568529700604e+01, 8.249094337898608e-02, 8.249094337898608e-02, 5.968303769271175e-05, 9.565503575268737e-05, 5.613602036769472e-05, 2.548683957902688e-02, 9.004340047769496e-05, 9.004340047769500e-05, 1.586909846873793e+00, 1.587940143131013e+00, 1.587645412973840e+00, 1.587321962874791e+00, 1.587486414736623e+00, 1.587486414736623e+00, 1.496526788303000e+00, 1.235605772578059e+00, 1.308225806897813e+00, 1.380458969763460e+00, 1.342886291262028e+00, 1.342886291262028e+00, 2.069285213486106e+00, 2.990377543152803e-01, 4.038601807282147e-01, 6.255346286205671e-01, 5.006221053520301e-01, 5.006221053520301e-01, 1.050004866406451e+00, 9.144614357951346e-03, 1.681873186591099e-02, 5.633689816080569e-01, 4.012731553070538e-02, 4.012731553070539e-02, 5.979611437153094e-04, 6.834055985977516e-06, 3.025085148430420e-05, 3.560869898703313e-02, 7.575811956567731e-05, 7.575811956567717e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_tw1_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tw1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.347042710124641e+03, 3.347034282775499e+03, 3.347066752350571e+03, 3.347051747205169e+03, 3.347144706750934e+03, 3.347163159628049e+03, 3.346873167841166e+03, 3.346817069237869e+03, 3.347056996988710e+03, 3.346956172452961e+03, 3.347056996988710e+03, 3.346956172452961e+03, 8.810201644934796e+01, 8.810207840782149e+01, 8.810287601740561e+01, 8.810275422887028e+01, 8.812188980068495e+01, 8.812790846369244e+01, 8.811740016618873e+01, 8.812257986892055e+01, 8.807158364979175e+01, 8.814284170884262e+01, 8.807158364979175e+01, 8.814284170884262e+01, 3.233131659990268e+00, 3.260873889847683e+00, 3.222477774072964e+00, 3.256346034549771e+00, 3.086950857159693e+00, 3.046011679589779e+00, 3.110695545546471e+00, 3.123782840615998e+00, 3.315005092317589e+00, 2.928038350929488e+00, 3.315005092317589e+00, 2.928038350929488e+00, 2.273531499296671e-01, 2.413819415208918e-01, 2.307176842701433e-01, 2.473542652972437e-01, 4.267796424330908e+00, 4.574974706561444e+00, 1.556267833862250e-01, 1.592907224534210e-01, 2.467623379862042e-01, 9.525039720156395e-02, 2.467623379862041e-01, 9.525039720156393e-02, 4.686472512283950e-04, 5.290812894120517e-04, 5.145043712201586e-04, 5.902952742191463e-04, 1.534251827354056e-02, 1.703321635375257e-02, 1.695094748379175e-04, 1.639113107748910e-04, 3.730770627588162e-04, 1.208823617022011e-04, 3.730770627588162e-04, 1.208823617022011e-04, 2.001818518659729e+02, 2.000847425872106e+02, 2.002866853567831e+02, 2.001859851924258e+02, 2.001879402749067e+02, 2.000884109572275e+02, 2.002778895146087e+02, 2.001803820581167e+02, 2.002353337336225e+02, 2.001355497010040e+02, 2.002353337336225e+02, 2.001355497010040e+02, 2.762448986206513e+01, 2.762171698890124e+01, 2.802644395967866e+01, 2.801133087863137e+01, 2.730659753544353e+01, 2.739357633360159e+01, 2.764906455075893e+01, 2.774212556996478e+01, 2.809603202656740e+01, 2.785910647750104e+01, 2.809603202656740e+01, 2.785910647750104e+01, 2.522714036472545e+00, 2.509529158707263e+00, 3.032815679384465e+00, 3.036504618800622e+00, 2.067812788391617e+00, 2.227012628373900e+00, 2.292548717781028e+00, 2.446502182517466e+00, 2.736789352842869e+00, 2.468396753530917e+00, 2.736789352842869e+00, 2.468396753530917e+00, 9.112819789876525e-02, 9.233282407960548e-02, 2.561620478717351e-01, 2.582066689589234e-01, 7.669806907482769e-02, 8.368150135119685e-02, 2.755399797389683e+01, 2.752968773432639e+01, 1.104843615758106e-01, 1.166067590082173e-01, 1.104843615758106e-01, 1.166067590082173e-01, 9.541330586069409e-05, 1.030485434284318e-04, 1.569275759458790e-04, 1.617145482774406e-04, 8.773330313239415e-05, 9.838546666412847e-05, 3.944986183047895e-02, 3.996435347100356e-02, 9.153570754849178e-05, 1.725615632196290e-04, 9.153570754849180e-05, 1.725615632196291e-04, 2.605225373264404e+00, 2.625720015667329e+00, 2.557751035021323e+00, 2.578276255306930e+00, 2.574135077099984e+00, 2.594756645886425e+00, 2.588016365802519e+00, 2.608425967613734e+00, 2.581048403861473e+00, 2.601560628772606e+00, 2.581048403861473e+00, 2.601560628772606e+00, 2.472719485103491e+00, 2.489138085711351e+00, 1.742679931514474e+00, 1.758116308676307e+00, 1.925332476157130e+00, 1.943219672808768e+00, 2.129778843910162e+00, 2.145154600172448e+00, 2.023717032423101e+00, 2.039135161739415e+00, 2.023717032423101e+00, 2.039135161739415e+00, 3.325727389276431e+00, 3.338137406597309e+00, 3.784384608071379e-01, 3.819493807301974e-01, 5.127081012773271e-01, 5.212741285773829e-01, 8.663740659393651e-01, 8.760394762669631e-01, 6.629792115732611e-01, 6.623184522475722e-01, 6.629792115732610e-01, 6.623184522475724e-01, 1.472697070306125e+00, 1.493498110203878e+00, 1.481808522855549e-02, 1.501407092632966e-02, 2.608071449715692e-02, 2.771850240348626e-02, 8.006367014048268e-01, 8.255949455235413e-01, 5.732887158563340e-02, 6.176992116710746e-02, 5.732887158563340e-02, 6.176992116710749e-02, 9.577823481724902e-04, 1.028256879165115e-03, 1.136356241651987e-05, 1.141529607772498e-05, 4.704092519927508e-05, 5.321084950533236e-05, 5.289317055887392e-02, 5.444182067668204e-02, 8.211494501572294e-05, 1.449899020622431e-04, 8.211494501572279e-05, 1.449899020622428e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_tw1_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tw1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.556012974076320e-06, 0.000000000000000e+00, 1.556019610511544e-06, 1.556005731846601e-06, 0.000000000000000e+00, 1.556014344658789e-06, 1.555969103486667e-06, 0.000000000000000e+00, 1.555965627120361e-06, 1.556051233938403e-06, 0.000000000000000e+00, 1.556070200763069e-06, 1.556009334323265e-06, 0.000000000000000e+00, 1.556018498751328e-06, 1.556009334323265e-06, 0.000000000000000e+00, 1.556018498751328e-06, 3.411071010480014e-04, 0.000000000000000e+00, 3.412084621872568e-04, 3.411148462095434e-04, 0.000000000000000e+00, 3.412237499359345e-04, 3.413787813353713e-04, 0.000000000000000e+00, 3.414419959377004e-04, 3.407560929693072e-04, 0.000000000000000e+00, 3.408378711782547e-04, 3.412438026369936e-04, 0.000000000000000e+00, 3.410499926535977e-04, 3.412438026369936e-04, 0.000000000000000e+00, 3.410499926535977e-04, 4.164700860328354e-02, 0.000000000000000e+00, 4.185517165579629e-02, 4.159830191839058e-02, 0.000000000000000e+00, 4.185625371634077e-02, 4.086560989762339e-02, 0.000000000000000e+00, 4.040047743767199e-02, 3.978340066531778e-02, 0.000000000000000e+00, 3.994566701281677e-02, 4.192427893761318e-02, 0.000000000000000e+00, 3.668784992322320e-02, 4.192427893761318e-02, 0.000000000000000e+00, 3.668784992322320e-02, 1.096188955874741e+00, 0.000000000000000e+00, 1.072439022288146e+00, 1.116057266198197e+00, 0.000000000000000e+00, 1.082581622906926e+00, 2.772105474459267e-02, 0.000000000000000e+00, 2.672015447444230e-02, 1.100705698713700e+00, 0.000000000000000e+00, 1.081130976508127e+00, 9.874004669048240e-01, 0.000000000000000e+00, 1.125763407882303e+00, 9.874004669048234e-01, 0.000000000000000e+00, 1.125763407882304e+00, 1.370604575626443e-01, 0.000000000000000e+00, 1.441849427831063e-01, 1.513299785512179e-01, 0.000000000000000e+00, 1.612860406646259e-01, 4.674111515522130e-01, 0.000000000000000e+00, 4.963867996773341e-01, 7.546127227572760e-02, 0.000000000000000e+00, 7.218940038324735e-02, 1.220639187757707e-01, 0.000000000000000e+00, 1.762383706877747e-01, 1.220639187757710e-01, 0.000000000000000e+00, 1.762383706877751e-01, 1.118166356100843e-04, 0.000000000000000e+00, 1.118930021078456e-04, 1.118529840820153e-04, 0.000000000000000e+00, 1.119281873381531e-04, 1.118178870806930e-04, 0.000000000000000e+00, 1.118936608149753e-04, 1.118490884208288e-04, 0.000000000000000e+00, 1.119256345318463e-04, 1.118358785195907e-04, 0.000000000000000e+00, 1.119107996036409e-04, 1.118358785195907e-04, 0.000000000000000e+00, 1.119107996036409e-04, 1.466181366724928e-03, 0.000000000000000e+00, 1.466364377607875e-03, 1.448426454321414e-03, 0.000000000000000e+00, 1.449273633297005e-03, 1.454392679460502e-03, 0.000000000000000e+00, 1.458414213300227e-03, 1.439713391414802e-03, 0.000000000000000e+00, 1.443046091780023e-03, 1.463467625246392e-03, 0.000000000000000e+00, 1.458585185947759e-03, 1.463467625246392e-03, 0.000000000000000e+00, 1.458585185947759e-03, 7.271991535290595e-02, 0.000000000000000e+00, 7.333654514940739e-02, 6.484106973232556e-02, 0.000000000000000e+00, 6.484743495314751e-02, 9.424406499355836e-02, 0.000000000000000e+00, 8.607606558791901e-02, 9.655758562045284e-02, 0.000000000000000e+00, 8.737202564890137e-02, 6.609238033570841e-02, 0.000000000000000e+00, 7.650195396614458e-02, 6.609238033570843e-02, 0.000000000000000e+00, 7.650195396614458e-02, 8.586795547841003e-01, 0.000000000000000e+00, 8.810171801636911e-01, 6.709373606191542e-01, 0.000000000000000e+00, 6.680130327656368e-01, 8.761954712591644e-01, 0.000000000000000e+00, 8.959210635838841e-01, 2.378802003456827e-03, 0.000000000000000e+00, 2.382190897302455e-03, 1.071747623099012e+00, 0.000000000000000e+00, 1.352565287276503e+00, 1.071747623099012e+00, 0.000000000000000e+00, 1.352565287276503e+00, 7.946925951196403e-02, 0.000000000000000e+00, 7.148265566597906e-02, 8.776734170106067e-02, 0.000000000000000e+00, 8.225996251639656e-02, 3.738406318251407e-01, 0.000000000000000e+00, 4.404288083452117e-01, 8.943626774543788e-01, 0.000000000000000e+00, 8.670526945928017e-01, 1.898700080734143e-01, 0.000000000000000e+00, 2.561341015764851e-01, 1.898700080734137e-01, 0.000000000000000e+00, 2.561341015764846e-01, 8.514587454834004e-02, 0.000000000000000e+00, 8.420903488385040e-02, 8.401336739616042e-02, 0.000000000000000e+00, 8.311452604358892e-02, 8.440844797353643e-02, 0.000000000000000e+00, 8.349897044483290e-02, 8.474264682344378e-02, 0.000000000000000e+00, 8.381699003672773e-02, 8.457580840466832e-02, 0.000000000000000e+00, 8.365797821299857e-02, 8.457580840466832e-02, 0.000000000000000e+00, 8.365797821299857e-02, 9.324644209105598e-02, 0.000000000000000e+00, 9.233448901680461e-02, 1.070035349395948e-01, 0.000000000000000e+00, 1.060578350778553e-01, 1.038640573833705e-01, 0.000000000000000e+00, 1.028876383469706e-01, 1.002184390234816e-01, 0.000000000000000e+00, 9.927541093867472e-02, 1.022881195706676e-01, 0.000000000000000e+00, 1.012904471073168e-01, 1.022881195706676e-01, 0.000000000000000e+00, 1.012904471073168e-01, 5.607762473213936e-02, 0.000000000000000e+00, 5.593041824850921e-02, 4.995889810902393e-01, 0.000000000000000e+00, 4.972634020912430e-01, 4.123307011662305e-01, 0.000000000000000e+00, 4.100186274724352e-01, 2.894673611031400e-01, 0.000000000000000e+00, 2.858380155964149e-01, 3.549222544770211e-01, 0.000000000000000e+00, 3.568333725918409e-01, 3.549222544770214e-01, 0.000000000000000e+00, 3.568333725918410e-01, 1.362486589410870e-01, 0.000000000000000e+00, 1.345327930756797e-01, 4.195396550285559e-01, 0.000000000000000e+00, 4.229101435246649e-01, 5.558715658853277e-01, 0.000000000000000e+00, 5.868476151341000e-01, 3.616370390990508e-01, 0.000000000000000e+00, 3.495901313257118e-01, 1.102742625697621e+00, 0.000000000000000e+00, 1.359955501464144e+00, 1.102742625697622e+00, 0.000000000000000e+00, 1.359955501464145e+00, 1.553836492728006e-01, 0.000000000000000e+00, 1.643784378062050e-01, 8.436987138968280e-02, 0.000000000000000e+00, 1.497902033768170e-01, 1.059549936761824e-01, 0.000000000000000e+00, 1.199681604071338e-01, 1.179211963263257e+00, 0.000000000000000e+00, 1.173192034731335e+00, 3.707954140971753e-01, 0.000000000000000e+00, 2.437145526219709e-01, 3.707954140971757e-01, 0.000000000000000e+00, 2.437145526219713e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
