
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_pbe3_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_pbe3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.804806201358753e+03, 2.804790073059942e+03, 2.804771159925485e+03, 2.805034190842086e+03, 2.804797252507874e+03, 2.804797252507874e+03, 8.505574243212084e+01, 8.505032659363343e+01, 8.490835543351082e+01, 8.518892026808949e+01, 8.505368159888367e+01, 8.505368159888367e+01, 3.926786627959822e+00, 3.934172623482976e+00, 4.100563473436876e+00, 4.146495318309825e+00, 3.929423611941244e+00, 3.929423611941244e+00, 3.813697314464889e-01, 3.872381091314662e-01, 4.981457913278374e+00, 2.231728147320999e-01, 3.831049918839267e-01, 3.831049918839267e-01, 1.425596941811305e-03, 1.564010001724653e-03, 2.565753201900608e-02, 3.282559390132721e-04, 1.531584725310965e-03, 1.531584725310965e-03, 1.470122853053141e+02, 1.466458228095438e+02, 1.469759362329341e+02, 1.466909691718654e+02, 1.468227104884782e+02, 1.468227104884782e+02, 3.715775476431617e+01, 3.743837201029893e+01, 3.727940619073862e+01, 3.750437736720256e+01, 3.716684680680672e+01, 3.716684680680672e+01, 2.212360725658147e+00, 1.730956649112588e+00, 2.048835479188625e+00, 1.557744906647091e+00, 2.251832924673456e+00, 2.251832924673456e+00, 1.253565815875043e-01, 4.171563594454004e-01, 1.219302619302426e-01, 1.602872594597623e+01, 1.644810078182996e-01, 1.644810078182996e-01, 3.054833866484548e-04, 3.989703186586474e-04, 2.241263877018366e-04, 4.946061693146159e-02, 3.312261180739442e-04, 3.312261180739443e-04, 1.531749837172289e+00, 1.525045241131377e+00, 1.506965153086058e+00, 1.506660074626212e+00, 1.505055518019856e+00, 1.505055518019856e+00, 1.454824753098970e+00, 2.071222032914750e+00, 1.910245378213583e+00, 1.655758098561390e+00, 1.791667209633642e+00, 1.791667209633642e+00, 1.925113999750051e+00, 6.292531427319699e-01, 8.249001363730507e-01, 1.080609104973936e+00, 9.604758643492360e-01, 9.604758643492356e-01, 1.731387421754732e+00, 2.204677944805595e-02, 4.018480581920233e-02, 8.497344411608874e-01, 8.306910177519333e-02, 8.306910177519335e-02, 1.957918030669212e-03, 2.990964986680389e-05, 1.079287087643231e-04, 7.558343288567107e-02, 2.392409630565545e-04, 2.392409630565538e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_pbe3_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_pbe3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [1.604675312434639e+03, 1.604679871462517e+03, 1.604710631930204e+03, 1.604635918382647e+03, 1.604677629452552e+03, 1.604677629452552e+03, 4.811409755053653e+01, 4.810911266109540e+01, 4.797680764260132e+01, 4.822608957691003e+01, 4.811194335714125e+01, 4.811194335714125e+01, 2.993669844245556e+00, 3.020069945492594e+00, 3.742615548794367e+00, 3.752922506283973e+00, 3.003144536175749e+00, 3.003144536175749e+00, 4.673712718304750e-01, 4.651838443510500e-01, 3.123154243737418e+00, 3.293381389691736e-01, 4.666354871625414e-01, 4.666354871625414e-01, 2.373639226450398e-03, 2.603842596373946e-03, 4.223682083017417e-02, 5.469886024315465e-04, 2.549864679990608e-03, 2.549864679990608e-03, 1.011638650731844e+02, 1.015251648464361e+02, 1.011997551982536e+02, 1.014806147170224e+02, 1.013488785750880e+02, 1.013488785750880e+02, 3.367307115015132e+01, 3.352196020931817e+01, 3.434768993305711e+01, 3.423845532624092e+01, 3.266697365722095e+01, 3.266697365722095e+01, 1.229137380181375e+00, 2.336730440808584e+00, 1.140362592761142e+00, 1.560530496179445e+00, 1.279949090018336e+00, 1.279949090018336e+00, 1.975942975244916e-01, 5.831851609992217e-01, 1.915925244050195e-01, 2.155238562557810e+01, 2.513283699710722e-01, 2.513283699710722e-01, 5.090456501510835e-04, 6.647911250681056e-04, 3.734588794768650e-04, 8.037247814839110e-02, 5.519100010892615e-04, 5.519100010892617e-04, 2.686240638899734e+00, 2.191001704682805e+00, 2.387420118611153e+00, 2.532390708957415e+00, 2.461560917848453e+00, 2.461560917848453e+00, 2.552285680546803e+00, 1.392433165728681e+00, 1.071893353486626e+00, 1.087844020966339e+00, 1.012945782833077e+00, 1.012945782833075e+00, 2.473941668737655e+00, 8.100728558518426e-01, 9.316728597348132e-01, 8.151472401256952e-01, 9.135112973948860e-01, 9.135112973948873e-01, 1.215453939617634e+00, 3.639276597036808e-02, 6.575306430951612e-02, 5.267385917495493e-01, 1.321978772357482e-01, 1.321978772357482e-01, 3.259341169044344e-03, 4.984824297517617e-05, 1.798669982013433e-04, 1.202267778062397e-01, 3.986507680378176e-04, 3.986507680378159e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_pbe3_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_pbe3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [7.773296067896231e-06, 7.773322958533575e-06, 7.773280473845927e-06, 7.772843109126262e-06, 7.773311607276608e-06, 7.773311607276608e-06, 1.498767787955017e-03, 1.498933770830369e-03, 1.503309658181300e-03, 1.494818330555372e-03, 1.498834002567233e-03, 1.498834002567233e-03, 1.207769801711618e-01, 1.195186535471369e-01, 8.790511583349117e-02, 8.772819575360971e-02, 1.203247042402211e-01, 1.203247042402211e-01, 1.309769605899394e+00, 1.402480324084731e+00, 1.000447700762062e-01, 6.407028935746263e-01, 1.338873344133655e+00, 1.338873344133655e+00, 1.051756763909755e-01, 1.105746555947710e-01, 2.094878979767289e-01, 3.544650656825666e-02, 1.136691696155944e-01, 1.136691696155944e-01, 5.827514105043274e-04, 5.828202529011462e-04, 5.827582072851941e-04, 5.828120962432227e-04, 5.827939552535458e-04, 5.827939552535458e-04, 3.263186352679293e-03, 3.293526179735089e-03, 3.152962365758423e-03, 3.176715446083902e-03, 3.432471242902047e-03, 3.432471242902047e-03, 3.582541107156442e-01, 2.070585850141276e-01, 4.027497040099634e-01, 4.004543594333801e-01, 3.430661618152289e-01, 3.430661618152289e-01, 3.623708347916841e-01, 4.732535515240273e-01, 4.188358618024741e-01, 7.432978059024611e-03, 5.510090408406547e-01, 5.510090408406547e-01, 3.627255611978351e-02, 4.156312083989803e-02, 8.915170886354214e-02, 3.199559668849232e-01, 5.593777754528633e-02, 5.593777754528633e-02, -2.257898372079498e-01, 2.002321953391801e-01, 9.264947336264913e-02, -2.090349434900442e-02, 3.972089021109640e-02, 3.972089021109618e-02, -3.827633988715202e-01, 3.548164592504621e-01, 4.465645678084632e-01, 5.009505518831284e-01, 4.850178285170865e-01, 4.850178285170871e-01, 2.003865969369086e-01, 4.752093661446005e-01, 5.735929144682808e-01, 8.463024139702924e-01, 7.176508284596699e-01, 7.176508284596693e-01, 4.476570077450326e-01, 1.599862739902047e-01, 2.338860879647226e-01, 1.430406209973596e+00, 4.695362852304485e-01, 4.695362852304549e-01, 9.278629122483784e-02, 1.952927582194341e-02, 3.196097321928218e-02, 5.518757322733688e-01, 6.940601514378134e-02, 6.940601514378082e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
