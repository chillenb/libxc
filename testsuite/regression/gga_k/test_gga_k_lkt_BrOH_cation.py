
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_lkt_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_lkt", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.620117848566473e+03, 2.620114096072856e+03, 2.620131388899926e+03, 2.620186528737638e+03, 2.620152803106459e+03, 2.620152803106459e+03, 7.593832853113723e+01, 7.593373052382378e+01, 7.583126533866536e+01, 7.603842049197057e+01, 7.593649264358609e+01, 7.593649264358609e+01, 3.472547363093206e+00, 3.485809048798831e+00, 3.886026186101668e+00, 3.917870779801860e+00, 3.997486044771408e+00, 3.997486044771408e+00, 6.451341687785506e-01, 6.251404664631297e-01, 4.485179530501810e+00, 7.728981406683615e-01, 7.051852604182833e-01, 7.051852604182832e-01, 7.296063820791847e-01, 7.097029264111008e-01, 9.182035701225248e-01, 7.661093209758524e-01, 6.863130425877250e-01, 6.863130425877240e-01, 1.459157173770724e+02, 1.457666028066952e+02, 1.459100051151224e+02, 1.457783408846535e+02, 1.458394385494157e+02, 1.458394385494157e+02, 3.631761853350044e+01, 3.632678556820531e+01, 3.713322727740358e+01, 3.713354272446765e+01, 3.594129785115540e+01, 3.594129785115540e+01, 2.067210669137575e+00, 1.984942688068102e+00, 1.842523670142850e+00, 1.602796735395600e+00, 2.077162539857283e+00, 2.077162539857283e+00, 9.224690266778628e-01, 1.015143517794099e+00, 8.999924689529972e-01, 1.792600708043805e+01, 7.454997179119365e-01, 7.454997179119365e-01, 6.677868736784518e-01, 7.065330968083176e-01, 2.817690239785998e-01, 8.107909413150535e-01, 4.137919033952244e-01, 4.137919033952249e-01, 1.616029057474555e+00, 1.672745919184656e+00, 1.652266125599216e+00, 1.635720370178450e+00, 1.643938819188097e+00, 1.643938819188097e+00, 1.509339472076860e+00, 1.844393775671126e+00, 1.703161325306708e+00, 1.593827955076128e+00, 1.642182563222856e+00, 1.642182563222856e+00, 2.197999149643144e+00, 1.110990670714266e+00, 1.086447881464365e+00, 9.947182549640873e-01, 1.014282200945935e+00, 1.014282200945936e+00, 1.583735806944865e+00, 9.656281706987407e-01, 9.422176140183092e-01, 7.887210243627230e-01, 7.159203436286661e-01, 7.159203436286661e-01, 8.120356333034537e-01, 3.205942872028503e-01, 4.583345262440654e-01, 7.257263578813936e-01, 3.710531393594771e-01, 3.710531393594766e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_lkt_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_lkt", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([2.716709921771476e+03, 2.716705445377248e+03, 2.716759068478943e+03, 2.716741130306740e+03, 2.716877512353971e+03, 2.716921710431786e+03, 2.716323461348403e+03, 2.716215207736198e+03, 2.716741192494625e+03, 2.716469092514538e+03, 2.716741192494625e+03, 2.716469092514538e+03, 6.219989094206172e+01, 6.224607575584763e+01, 6.220627828222636e+01, 6.225526323385072e+01, 6.238932692721550e+01, 6.243797511188218e+01, 6.209176831335304e+01, 6.214630943686670e+01, 6.216021059832470e+01, 6.231035495411075e+01, 6.216021059832470e+01, 6.231035495411075e+01, 1.244268087793701e+00, 1.394227822182023e+00, 1.191831848089964e+00, 1.376435382100240e+00, 4.730562613494522e-01, 1.922157888822499e-01, 3.414945593625786e-01, 4.349822195066014e-01, 1.618607696434878e+00, -1.277950962248739e+00, 1.618607696434878e+00, -1.277950962248739e+00, -4.932898232631031e-01, -4.539002229366124e-01, -4.611698059108099e-01, -4.172062636160088e-01, 1.739767120300510e+00, 2.559801202844639e+00, -7.244010487091108e-01, -7.292522382781733e-01, -5.160080782837632e-01, -7.780343727131515e-01, -5.160080782837635e-01, -7.780343727131510e-01, -7.276661079812552e-01, -7.312234614032557e-01, -7.087822956171483e-01, -7.104518031099641e-01, -9.215705315094678e-01, -9.153434083859391e-01, -7.609625022872705e-01, -7.715222414380538e-01, -7.284689529322068e-01, -4.575544041568171e-01, -7.284689529322059e-01, -4.575544041568169e-01, 1.757101575418615e+02, 1.756140448105847e+02, 1.760695147329528e+02, 1.759612397654667e+02, 1.757292032396057e+02, 1.756253145224893e+02, 1.760375868154003e+02, 1.759407508573876e+02, 1.758951246545874e+02, 1.757887047022145e+02, 1.758951246545874e+02, 1.757887047022145e+02, 1.021715428974541e+00, 1.019506930833257e+00, 1.818517307494039e+00, 1.799163304647496e+00, -1.079186334232429e+00, -4.550453940167430e-01, -3.740072698169762e-01, 2.386768016243939e-01, 2.966213652979685e+00, 1.645083329719909e+00, 2.966213652979685e+00, 1.645083329719909e+00, 1.918624973311008e+00, 1.910946553669003e+00, 2.901653281893915e+00, 2.909890670940598e+00, 1.435833148755366e+00, 1.626185011805735e+00, 2.150589151979831e+00, 2.289397284003302e+00, 2.193801180147266e+00, 1.946959067142398e+00, 2.193801180147266e+00, 1.946959067142399e+00, -9.246276546843073e-01, -9.107840935497404e-01, -9.040375315565510e-01, -9.026534681291426e-01, -8.991877465815454e-01, -8.947943185312075e-01, 2.646466016486773e+01, 2.644347095980532e+01, -8.005625451206050e-01, -6.648283102762511e-01, -8.005625451206050e-01, -6.648283102762511e-01, -6.423526216584524e-01, -6.904473247180031e-01, -6.921222460013791e-01, -7.203089392370942e-01, -2.899528173103187e-01, -2.748789586037558e-01, -8.027148045529130e-01, -8.183126289402274e-01, -4.112409723422806e-01, -4.147767831071922e-01, -4.112409723422809e-01, -4.147767831071928e-01, 2.573235001099574e+00, 2.594525585898906e+00, 2.454304950618988e+00, 2.476512767960259e+00, 2.497830940791258e+00, 2.519953927414456e+00, 2.532721141778831e+00, 2.554061200066567e+00, 2.515454350385568e+00, 2.537163116666928e+00, 2.515454350385568e+00, 2.537163116666928e+00, 2.459354391001642e+00, 2.475810285724542e+00, 7.401197850375725e-01, 7.647056894128674e-01, 1.302412653339524e+00, 1.330190984573200e+00, 1.825480261983158e+00, 1.842334986602936e+00, 1.572959309217168e+00, 1.589953912744187e+00, 1.572959309217168e+00, 1.589953912744187e+00, 3.162842258016244e+00, 3.182936586881748e+00, -8.560162740711198e-01, -8.488771259941348e-01, -5.965718896223463e-01, -5.668814535073758e-01, 2.538592277037661e-01, 2.657964328173593e-01, -1.957302898852368e-01, -1.869813329068663e-01, -1.957302898852368e-01, -1.869813329068654e-01, 5.871904115430990e-01, 6.254062140525234e-01, -9.661307923585156e-01, -9.651353216910615e-01, -9.496980939169796e-01, -9.354150113111256e-01, 4.323383441957745e-01, 4.670684783600599e-01, -7.586630061516911e-01, -6.759363694317929e-01, -7.586630061516902e-01, -6.759363694317928e-01, -8.165376899553626e-01, -8.079897645996434e-01, -3.662903377081299e-01, -2.752101342405479e-01, -4.661839788673118e-01, -4.518103152206144e-01, -7.220046398783253e-01, -7.269751768443731e-01, -2.863698114852049e-01, -4.071377726877606e-01, -2.863698114852044e-01, -4.071377726877603e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_lkt_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_lkt", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([8.355849145649646e-06, 0.000000000000000e+00, 8.355877261231850e-06, 8.355715959739969e-06, 0.000000000000000e+00, 8.355780535955751e-06, 8.355343711387367e-06, 0.000000000000000e+00, 8.355232061874378e-06, 8.356846485408024e-06, 0.000000000000000e+00, 8.357147936817417e-06, 8.355766992456537e-06, 0.000000000000000e+00, 8.356421648681949e-06, 8.355766992456537e-06, 0.000000000000000e+00, 8.356421648681949e-06, 2.059658145446211e-03, 0.000000000000000e+00, 2.059213886760117e-03, 2.059572650425471e-03, 0.000000000000000e+00, 2.059106681344557e-03, 2.057278883570166e-03, 0.000000000000000e+00, 2.056641174245023e-03, 2.060255800827162e-03, 0.000000000000000e+00, 2.059588353647756e-03, 2.060900127250177e-03, 0.000000000000000e+00, 2.057445660400825e-03, 2.060900127250177e-03, 0.000000000000000e+00, 2.057445660400825e-03, 3.222879169749185e-01, 0.000000000000000e+00, 3.150430193887847e-01, 3.249769180464218e-01, 0.000000000000000e+00, 3.160665475791796e-01, 3.618295113609452e-01, 0.000000000000000e+00, 3.749683943495004e-01, 3.604485744426093e-01, 0.000000000000000e+00, 3.563378307258109e-01, 3.027376297430761e-01, 0.000000000000000e+00, 4.285258749243037e-01, 3.027376297430761e-01, 0.000000000000000e+00, 4.285258749243037e-01, 2.445712441750631e+01, 0.000000000000000e+00, 2.161831588276009e+01, 2.345575883497116e+01, 0.000000000000000e+00, 2.037172527571929e+01, 2.113993633218613e-01, 0.000000000000000e+00, 1.830795179118693e-01, 5.583443836748365e+01, 0.000000000000000e+00, 5.355671588114861e+01, 2.143373438197754e+01, 0.000000000000000e+00, 1.459401128639996e+02, 2.143373438197753e+01, 0.000000000000000e+00, 1.459401128639996e+02, 6.324503014234192e+05, 0.000000000000000e+00, 5.271019733892687e+05, 5.496562727421005e+05, 0.000000000000000e+00, 4.471116735888456e+05, 3.197159530489784e+03, 0.000000000000000e+00, 2.714903657302139e+03, 2.911560192811907e+06, 0.000000000000000e+00, 3.062094217456302e+06, 8.908246190359766e+05, 0.000000000000000e+00, 4.834051151218384e+06, 8.908246190359766e+05, 0.000000000000000e+00, 4.834051151218380e+06, 5.461285255811021e-04, 0.000000000000000e+00, 5.465500294313796e-04, 5.451124831668165e-04, 0.000000000000000e+00, 5.455674293436479e-04, 5.460735686286526e-04, 0.000000000000000e+00, 5.465173323834535e-04, 5.452017176337219e-04, 0.000000000000000e+00, 5.456246643019836e-04, 5.456068109502518e-04, 0.000000000000000e+00, 5.460562050814669e-04, 5.456068109502518e-04, 0.000000000000000e+00, 5.460562050814669e-04, 1.378926385755723e-02, 0.000000000000000e+00, 1.379151408631668e-02, 1.343104710130824e-02, 0.000000000000000e+00, 1.344340189816169e-02, 1.420520291477547e-02, 0.000000000000000e+00, 1.408620092392517e-02, 1.388454889232848e-02, 0.000000000000000e+00, 1.376550545041214e-02, 1.328858723538907e-02, 0.000000000000000e+00, 1.356553049065592e-02, 1.328858723538907e-02, 0.000000000000000e+00, 1.356553049065592e-02, 4.149059210095070e-01, 0.000000000000000e+00, 4.179906461399894e-01, 2.688266667606374e-01, 0.000000000000000e+00, 2.676966531649397e-01, 5.754963826255520e-01, 0.000000000000000e+00, 5.072616501149478e-01, 4.197073389746000e-01, 0.000000000000000e+00, 3.818027424103426e-01, 3.594367708450735e-01, 0.000000000000000e+00, 4.225820680846993e-01, 3.594367708450736e-01, 0.000000000000000e+00, 4.225820680846993e-01, 1.678072411252168e+02, 0.000000000000000e+00, 1.630736024790869e+02, 2.374484231457012e+01, 0.000000000000000e+00, 2.338280270402178e+01, 2.268052342511347e+02, 0.000000000000000e+00, 1.937870352003632e+02, 9.759921538444852e-03, 0.000000000000000e+00, 9.771626485011177e-03, 1.117040348902945e+02, 0.000000000000000e+00, 9.358376547248992e+01, 1.117040348902945e+02, 0.000000000000000e+00, 9.358376547248992e+01, 6.896246147170695e+06, 0.000000000000000e+00, 6.144157416218540e+06, 3.268601510341824e+06, 0.000000000000000e+00, 3.124571891844912e+06, 7.817219853849012e+06, 0.000000000000000e+00, 6.581441351138420e+06, 6.939155821967156e+02, 0.000000000000000e+00, 6.812728762388264e+02, 7.337213909483019e+06, 0.000000000000000e+00, 2.832798288875731e+06, 7.337213909483018e+06, 0.000000000000000e+00, 2.832798288875731e+06, 3.181077866638280e-01, 0.000000000000000e+00, 3.140753973537374e-01, 3.455917791844826e-01, 0.000000000000000e+00, 3.409446735068488e-01, 3.360758056348594e-01, 0.000000000000000e+00, 3.315798218317678e-01, 3.280242978293858e-01, 0.000000000000000e+00, 3.238249883716822e-01, 3.320603477478810e-01, 0.000000000000000e+00, 3.277153256901361e-01, 3.320603477478810e-01, 0.000000000000000e+00, 3.277153256901361e-01, 3.376441635556023e-01, 0.000000000000000e+00, 3.342587181640839e-01, 8.069388051349282e-01, 0.000000000000000e+00, 7.943802206321192e-01, 6.450106330584719e-01, 0.000000000000000e+00, 6.341636814600901e-01, 5.055132257477700e-01, 0.000000000000000e+00, 4.994702193327781e-01, 5.726857872616412e-01, 0.000000000000000e+00, 5.654882308750762e-01, 5.726857872616412e-01, 0.000000000000000e+00, 5.654882308750762e-01, 2.360941650953223e-01, 0.000000000000000e+00, 2.339353306425050e-01, 1.150985699533199e+01, 0.000000000000000e+00, 1.130018880612793e+01, 6.413083180577644e+00, 0.000000000000000e+00, 6.197989115350838e+00, 2.369543144336527e+00, 0.000000000000000e+00, 2.325484128435769e+00, 3.900517390837654e+00, 0.000000000000000e+00, 3.899222092069342e+00, 3.900517390837658e+00, 0.000000000000000e+00, 3.899222092069344e+00, 1.045047922836685e+00, 0.000000000000000e+00, 1.018526603527308e+00, 3.383498143878293e+03, 0.000000000000000e+00, 3.314985559968180e+03, 1.390167955451976e+03, 0.000000000000000e+00, 1.259408630799403e+03, 2.514916431083408e+00, 0.000000000000000e+00, 2.383817670217861e+00, 3.623926324081664e+02, 0.000000000000000e+00, 3.076717210498376e+02, 3.623926324081664e+02, 0.000000000000000e+00, 3.076717210498376e+02, 2.160802635499018e+05, 0.000000000000000e+00, 1.941851121390783e+05, 1.678524443444068e+08, 0.000000000000000e+00, 1.667067706068541e+08, 1.992427887587956e+07, 0.000000000000000e+00, 1.656041588063657e+07, 4.120678192746720e+02, 0.000000000000000e+00, 3.924794771572867e+02, 8.633543549065117e+06, 0.000000000000000e+00, 3.678861720624852e+06, 8.633543549065135e+06, 0.000000000000000e+00, 3.678861720624863e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
