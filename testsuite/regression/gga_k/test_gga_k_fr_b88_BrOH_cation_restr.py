
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_fr_b88_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_fr_b88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.197498341817664e+03, 2.197507307323792e+03, 2.197556229465240e+03, 2.197422653671077e+03, 2.197491355499786e+03, 2.197491355499786e+03, 5.932899140482995e+01, 5.932848128541113e+01, 5.931959411063351e+01, 5.935758013391804e+01, 5.933124016165207e+01, 5.933124016165207e+01, 2.294948114478289e+00, 2.292371344426698e+00, 2.236040991547971e+00, 2.270065263890121e+00, 2.260219896000301e+00, 2.260219896000301e+00, 1.836818057910795e-01, 1.871243925198739e-01, 3.090061273378669e+00, 1.226152360313920e-01, 1.439029872829796e-01, 1.439029872829796e-01, 1.783039609001032e-03, 1.877196918587738e-03, 1.852759213051703e-02, 9.426696004262137e-04, 1.177785532812817e-03, 1.177785532812816e-03, 1.287148244268004e+02, 1.287209991912135e+02, 1.287154815950128e+02, 1.287209278050744e+02, 1.287177537687142e+02, 1.287177537687142e+02, 2.026620803727962e+01, 2.051009766885356e+01, 2.016772035902078e+01, 2.038263852399140e+01, 2.044854240312998e+01, 2.044854240312998e+01, 1.673677692206345e+00, 1.883381173738514e+00, 1.444355866482565e+00, 1.487440314699645e+00, 1.717440004606992e+00, 1.717440004606992e+00, 7.302482141299654e-02, 2.011908997387044e-01, 6.461208916234758e-02, 1.706283529363217e+01, 8.837819632935488e-02, 8.837819632935488e-02, 6.565511882301788e-04, 8.876580388385850e-04, 4.442777952501838e-04, 3.517871013166732e-02, 6.473913884723068e-04, 6.473913884723070e-04, 1.588630706688019e+00, 1.591391783897401e+00, 1.590634051444317e+00, 1.589816718733833e+00, 1.590241836976351e+00, 1.590241836976351e+00, 1.497381050536558e+00, 1.233489023123029e+00, 1.309446524026316e+00, 1.383965838459707e+00, 1.345476712098035e+00, 1.345476712098035e+00, 2.074111918061592e+00, 2.981887900120148e-01, 4.003934753115617e-01, 6.236605767503021e-01, 4.970845166115943e-01, 4.970845166115943e-01, 1.047938979508750e+00, 1.773453836338454e-02, 2.698594427137073e-02, 5.629686554700339e-01, 4.836768685609270e-02, 4.836768685609272e-02, 2.833774631556545e-03, 1.374431529047835e-04, 3.769396114444180e-04, 4.425852910367829e-02, 5.629969381020028e-04, 5.629969381020017e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_fr_b88_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_fr_b88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.366769162727692e+03, 3.366789226834047e+03, 3.366882162227731e+03, 3.366583574431307e+03, 3.366739495082483e+03, 3.366739495082483e+03, 8.887463672997177e+01, 8.887524408778795e+01, 8.889365329637766e+01, 8.889541861997029e+01, 8.887964983220945e+01, 8.887964983220945e+01, 3.288559235208849e+00, 3.281011016706401e+00, 3.104736803784130e+00, 3.156562054926215e+00, 3.145566848648180e+00, 3.145566848648180e+00, 2.234902828364717e-01, 2.296396402898978e-01, 4.475676460469527e+00, 1.356756110934524e-01, 1.662760806924546e-01, 1.662760806924546e-01, 1.103799628412206e-03, 1.173193619656368e-03, 1.526582858404762e-02, 5.411721104830341e-04, 7.009545225442565e-04, 7.009545225442559e-04, 2.008544302571275e+02, 2.009479448669890e+02, 2.008589174871807e+02, 2.009414690064571e+02, 2.009017199786539e+02, 2.009017199786539e+02, 2.795347531351019e+01, 2.836058039838512e+01, 2.765940935742638e+01, 2.801632937145819e+01, 2.832238425844904e+01, 2.832238425844904e+01, 2.534725035144406e+00, 3.036105711557931e+00, 2.166575161999293e+00, 2.373148442104555e+00, 2.620894003560478e+00, 2.620894003560478e+00, 7.285909326494379e-02, 2.305748799958987e-01, 6.357192312565546e-02, 2.755197833273363e+01, 9.359581046322497e-02, 9.359581046322497e-02, 3.688201733823562e-04, 5.106849320164317e-04, 2.617057157476776e-04, 3.225126433767699e-02, 3.811070366043905e-04, 3.811070366043902e-04, 2.614668374069204e+00, 2.569011171905411e+00, 2.584529231857851e+00, 2.597748809580656e+00, 2.591083355807489e+00, 2.591083355807489e+00, 2.480307704872917e+00, 1.772589064780481e+00, 1.952346648950704e+00, 2.146726392811837e+00, 2.045449093259253e+00, 2.045449093259253e+00, 3.334183547580422e+00, 3.591837475437192e-01, 5.096293955847618e-01, 8.826419302934955e-01, 6.676246862088805e-01, 6.676246862088804e-01, 1.502092580799840e+00, 1.442035035873650e-02, 2.335176104430309e-02, 8.225062744848975e-01, 4.719326026479434e-02, 4.719326026479435e-02, 1.833230112262150e-03, 7.214611339045902e-05, 2.083214367939683e-04, 4.255296737151519e-02, 3.306149882384608e-04, 3.306149882384599e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_fr_b88_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_fr_b88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [7.487365532007614e-07, 7.487353689357770e-07, 7.487200214127982e-07, 7.487378506170626e-07, 7.487299412740172e-07, 7.487299412740172e-07, 1.601532860726036e-04, 1.601609325189766e-04, 1.603261492274241e-04, 1.599480514242985e-04, 1.601508718814969e-04, 1.601508718814969e-04, 1.913053732438703e-02, 1.911624126256374e-02, 1.865678410976236e-02, 1.829200303785100e-02, 1.844328432541638e-02, 1.844328432541638e-02, 6.128863853203069e-01, 6.060439243078632e-01, 1.252192218891291e-02, 9.318086301348451e-01, 7.988784991112551e-01, 7.988784991112550e-01, 2.760177612195623e+02, 2.547530012227425e+02, 9.362104137592898e+00, 7.524530269822900e+02, 5.239548984002827e+02, 5.239548984002831e+02, 5.529783762865678e-05, 5.535394694013164e-05, 5.529989118252923e-05, 5.534942821635755e-05, 5.532653446274693e-05, 5.532653446274693e-05, 6.747652384594840e-04, 6.660659715946572e-04, 6.720667966745185e-04, 6.643824219365065e-04, 6.712909689360968e-04, 6.712909689360968e-04, 3.465835241832875e-02, 3.428659847585915e-02, 4.229183438579416e-02, 4.732226708931498e-02, 3.394548289521406e-02, 3.394548289521406e-02, 1.645593503147453e+00, 4.754867725960862e-01, 1.923399585827306e+00, 1.264133761466839e-03, 1.393762054093125e+00, 1.393762054093125e+00, 1.324280723953246e+03, 8.218407646739099e+02, 2.277101472663036e+03, 4.195058947893881e+00, 1.295124716412965e+03, 1.295124716412964e+03, 4.772790004373904e-02, 4.434423854933449e-02, 4.535632541171766e-02, 4.632103621068791e-02, 4.582219223495111e-02, 4.582219223495111e-02, 5.371047627834431e-02, 4.883815908984246e-02, 4.833050655854545e-02, 4.884181385125625e-02, 4.851436927818705e-02, 4.851436927818705e-02, 2.940446523688989e-02, 2.905725616948371e-01, 2.077752276207312e-01, 1.316345308074859e-01, 1.666842519168787e-01, 1.666842519168787e-01, 6.203655766014979e-02, 9.843263443431455e+00, 5.687691471687507e+00, 1.640152179903730e-01, 2.921521588308262e+00, 2.921521588308262e+00, 1.365119296986287e+02, 1.543509418729571e+04, 3.107274253038378e+03, 3.244175521195397e+00, 1.599820661903992e+03, 1.599820661903996e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
