
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_pearson_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_pearson", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.172427902360739e+03, 2.172437122422708e+03, 2.172486500377588e+03, 2.172349151435627e+03, 2.172419926877669e+03, 2.172419926877669e+03, 5.851382407086598e+01, 5.851344428147799e+01, 5.850751481727092e+01, 5.854002922406747e+01, 5.851619827013168e+01, 5.851619827013168e+01, 2.231645690979389e+00, 2.227527342587033e+00, 2.114967724347510e+00, 2.150921033585123e+00, 2.127831475441663e+00, 2.127831475441663e+00, 1.395433189315310e-01, 1.443494821872141e-01, 3.023315644021158e+00, 7.881339697074488e-02, 1.318132935206920e-01, 1.318132935206919e-01, 1.655423244385227e-04, 1.836314039834829e-04, 5.577418998505722e-03, 5.498264613710217e-05, 1.101248948419814e-04, 1.101248948419814e-04, 1.274533631722102e+02, 1.274645215564670e+02, 1.274542219371562e+02, 1.274640669904902e+02, 1.274588300138539e+02, 1.274588300138539e+02, 1.901407003763472e+01, 1.930403550232639e+01, 1.877746269288287e+01, 1.903540309773542e+01, 1.928532700535042e+01, 1.928532700535042e+01, 1.652822092777615e+00, 1.872156560072451e+00, 1.426916209804890e+00, 1.478418875086675e+00, 1.702532850284785e+00, 1.702532850284785e+00, 3.781599305411747e-02, 1.376983453582894e-01, 3.246568078289654e-02, 1.696532356969290e+01, 5.238428164360161e-02, 5.238428164360161e-02, 3.278091915428069e-05, 5.254205200689689e-05, 3.083769358761787e-05, 1.462972937488628e-02, 4.946644258082621e-05, 4.946644258082623e-05, 1.584691120921917e+00, 1.582264817789595e+00, 1.583121596815690e+00, 1.583803193322082e+00, 1.583459174811050e+00, 1.583459174811050e+00, 1.495511261099655e+00, 1.201476136134256e+00, 1.290587561565264e+00, 1.369670386939823e+00, 1.329213834708647e+00, 1.329213834708647e+00, 2.060926036697370e+00, 2.222437932293082e-01, 3.283811336270961e-01, 6.012495240668941e-01, 4.482160749630539e-01, 4.482160749630539e-01, 1.019293567263647e+00, 5.090877434170254e-03, 9.474994198371337e-03, 5.523964223495907e-01, 2.381601701559317e-02, 2.381601701559318e-02, 3.287390114583789e-04, 3.753238403169429e-06, 1.661473161902009e-05, 2.092743931675971e-02, 4.161717984774238e-05, 4.161717984774230e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_pearson_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_pearson", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.360422245409065e+03, 3.360413672796875e+03, 3.360444985172025e+03, 3.360430191836083e+03, 3.360520647749395e+03, 3.360537795750206e+03, 3.360263777237790e+03, 3.360210418269882e+03, 3.360435660778674e+03, 3.360343416568110e+03, 3.360435660778674e+03, 3.360343416568110e+03, 8.926760715830848e+01, 8.926161887365694e+01, 8.926771886323884e+01, 8.926116372651897e+01, 8.926485360562175e+01, 8.926520669949703e+01, 8.929889650477509e+01, 8.929741226178506e+01, 8.923916370686912e+01, 8.929828033760599e+01, 8.923916370686912e+01, 8.929828033760599e+01, 3.542067970536683e+00, 3.525539894682173e+00, 3.547000153046804e+00, 3.525898457193912e+00, 3.621725746613886e+00, 3.650334310633613e+00, 3.689031127856678e+00, 3.678018733340184e+00, 3.520109812717420e+00, 3.658232290328598e+00, 3.520109812717420e+00, 3.658232290328598e+00, 2.368646273588925e-01, 2.596771070503600e-01, 2.449117905490993e-01, 2.721513267377879e-01, 4.642551047201813e+00, 4.766487255598564e+00, 1.316578312013363e-01, 1.354248256738134e-01, 2.592878994283611e-01, 6.878528132537715e-02, 2.592878994283609e-01, 6.878528132537713e-02, 2.577467018025233e-04, 2.910366183906024e-04, 2.830196600733638e-04, 3.247880747095563e-04, 8.751145207747776e-03, 9.759165974388348e-03, 9.313798399382274e-05, 9.005993901778710e-05, 2.051237258716429e-04, 6.642575861027250e-05, 2.051237258716429e-04, 6.642575861027252e-05, 2.006079336708092e+02, 2.005107567779786e+02, 2.007096358489189e+02, 2.006089666407384e+02, 2.006138601008828e+02, 2.005143299853650e+02, 2.007011199551542e+02, 2.006035441037243e+02, 2.006597820889111e+02, 2.005600221533560e+02, 2.006597820889111e+02, 2.005600221533560e+02, 3.328257543115382e+01, 3.327973567140831e+01, 3.357413341062765e+01, 3.356070830787777e+01, 3.334617908182436e+01, 3.332899260397279e+01, 3.362235344868594e+01, 3.360468925993653e+01, 3.335261589506925e+01, 3.341482770482921e+01, 3.335261589506925e+01, 3.341482770482921e+01, 2.541249027820180e+00, 2.527768396997804e+00, 3.037556334011404e+00, 3.041189861009984e+00, 2.098451652245085e+00, 2.249963448246310e+00, 2.296506701107699e+00, 2.450758184905471e+00, 2.749124982280682e+00, 2.481380484998209e+00, 2.749124982280682e+00, 2.481380484998210e+00, 6.258472365504042e-02, 6.379950419708855e-02, 2.350266466232268e-01, 2.375432251524457e-01, 5.116366591589996e-02, 5.684365723375345e-02, 2.759567489005111e+01, 2.757129602820684e+01, 8.229439248748684e-02, 9.290029908544847e-02, 8.229439248748684e-02, 9.290029908544847e-02, 5.241659949892469e-05, 5.661121246758699e-05, 8.622556141334201e-05, 8.885536753419286e-05, 4.821429290870904e-05, 5.407501885798519e-05, 2.424515549745866e-02, 2.454398366054894e-02, 5.029481651598060e-05, 9.485646305000568e-05, 5.029481651598060e-05, 9.485646305000570e-05, 2.607209328626283e+00, 2.627670590033830e+00, 2.561653366128394e+00, 2.582173564548373e+00, 2.577563156213456e+00, 2.598164169919847e+00, 2.590891254427875e+00, 2.611279925595726e+00, 2.584218944184775e+00, 2.604709936590512e+00, 2.584218944184775e+00, 2.604709936590512e+00, 2.473681748098589e+00, 2.490098783505708e+00, 1.885773087684382e+00, 1.896532591282253e+00, 1.959020479620285e+00, 1.974805892611665e+00, 2.135050913029364e+00, 2.150388068572248e+00, 2.035932423496563e+00, 2.051088142152838e+00, 2.035932423496563e+00, 2.051088142152838e+00, 3.331138514038917e+00, 3.343482522778999e+00, 3.904121874523411e-01, 3.956867932548252e-01, 6.007377396251277e-01, 6.162945565652407e-01, 9.767126559237694e-01, 9.844568646761180e-01, 8.281427703058690e-01, 8.269870493807289e-01, 8.281427703058689e-01, 8.269870493807288e-01, 1.606459875798634e+00, 1.619084925888687e+00, 8.426729558077646e-03, 8.542454743479401e-03, 1.524936891587769e-02, 1.628797210632838e-02, 8.382711942144850e-01, 8.588525775693544e-01, 3.741943882389356e-02, 4.176331976866565e-02, 3.741943882389356e-02, 4.176331976866567e-02, 5.273926632219766e-04, 5.663265070246486e-04, 6.241067747706670e-06, 6.269629126163055e-06, 2.583978743253110e-05, 2.923006978925731e-05, 3.434508555092237e-02, 3.548082779301845e-02, 4.512507768500503e-05, 7.968961226580269e-05, 4.512507768500495e-05, 7.968961226580254e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_pearson_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_pearson", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.318049321411094e-06, 0.000000000000000e+00, 1.318055354793416e-06, 1.318048349265340e-06, 0.000000000000000e+00, 1.318054641697399e-06, 1.318026931585556e-06, 0.000000000000000e+00, 1.318029075111302e-06, 1.318038342567991e-06, 0.000000000000000e+00, 1.318043463352818e-06, 1.318049666066376e-06, 0.000000000000000e+00, 1.318024265399380e-06, 1.318049666066376e-06, 0.000000000000000e+00, 1.318024265399380e-06, 2.642107509812104e-04, 0.000000000000000e+00, 2.644641555752259e-04, 2.642386809316190e-04, 0.000000000000000e+00, 2.645089659562912e-04, 2.650836362841546e-04, 0.000000000000000e+00, 2.652992619084235e-04, 2.634863166106837e-04, 0.000000000000000e+00, 2.637435449884088e-04, 2.642475052768574e-04, 0.000000000000000e+00, 2.644753540441995e-04, 2.642475052768574e-04, 0.000000000000000e+00, 2.644753540441995e-04, 1.161918423931211e-02, 0.000000000000000e+00, 1.490451795580491e-02, 1.048104557222811e-02, 0.000000000000000e+00, 1.453771138280102e-02, -4.289786273759017e-03, 0.000000000000000e+00, -8.961735611887072e-03, -6.529350020498427e-03, 0.000000000000000e+00, -4.976260318331789e-03, 1.944828293767412e-02, 0.000000000000000e+00, -1.817252846665867e-02, 1.944828293767412e-02, 0.000000000000000e+00, -1.817252846665867e-02, -2.201106263371521e-01, 0.000000000000000e+00, -2.597561139897964e-01, -2.502139740631308e-01, 0.000000000000000e+00, -2.978055303164351e-01, 8.875600771676524e-03, 0.000000000000000e+00, 1.557224268895890e-02, -5.988596177712153e-02, 0.000000000000000e+00, -6.071761246355300e-02, -2.085321046688244e-01, 0.000000000000000e+00, -2.141573789651001e-02, -2.085321046688242e-01, 0.000000000000000e+00, -2.141573789651007e-02, -6.245923636806322e-06, 0.000000000000000e+00, -7.385408510667570e-06, -7.776599719170734e-06, 0.000000000000000e+00, -9.492916159782497e-06, -6.082302638634563e-04, 0.000000000000000e+00, -7.309883196112642e-04, -1.186325795063812e-06, 0.000000000000000e+00, -1.082319831549467e-06, -4.419713977991657e-06, 0.000000000000000e+00, -3.286851289662580e-06, -4.419713977991674e-06, 0.000000000000000e+00, -3.286851289662586e-06, 9.594075646787266e-05, 0.000000000000000e+00, 9.600657565049334e-05, 9.596400178719472e-05, 0.000000000000000e+00, 9.602915532349724e-05, 9.594145549179887e-05, 0.000000000000000e+00, 9.600692245288181e-05, 9.596143316552812e-05, 0.000000000000000e+00, 9.602745888031802e-05, 9.595333255448859e-05, 0.000000000000000e+00, 9.601817005598487e-05, 9.595333255448859e-05, 0.000000000000000e+00, 9.601817005598487e-05, -3.686185884354724e-04, 0.000000000000000e+00, -3.687870927741879e-04, -3.182672630130175e-04, 0.000000000000000e+00, -3.195697391391498e-04, -4.755322163437758e-04, 0.000000000000000e+00, -4.463701871608486e-04, -4.364350890171012e-04, 0.000000000000000e+00, -4.060270137721463e-04, -2.481649709710241e-04, 0.000000000000000e+00, -3.304322896867993e-04, -2.481649709710241e-04, 0.000000000000000e+00, -3.304322896867993e-04, 5.963020189703704e-02, 0.000000000000000e+00, 6.018237214996888e-02, 5.394596251632484e-02, 0.000000000000000e+00, 5.388609601162776e-02, 7.189193441663544e-02, 0.000000000000000e+00, 6.858093526155669e-02, 8.134139178501230e-02, 0.000000000000000e+00, 7.369797000563524e-02, 5.571448421574130e-02, 0.000000000000000e+00, 6.402226962926935e-02, 5.571448421574132e-02, 0.000000000000000e+00, 6.402226962926937e-02, -1.129725047386865e-02, 0.000000000000000e+00, -1.214283386371463e-02, -6.130756226473235e-02, 0.000000000000000e+00, -6.209596040258276e-02, -9.147761211184749e-03, 0.000000000000000e+00, -1.082389367326065e-02, 1.973282471200672e-03, 0.000000000000000e+00, 1.975967247952282e-03, -2.526815521162282e-02, 0.000000000000000e+00, -4.990283579963814e-02, -2.526815521162282e-02, 0.000000000000000e+00, -4.990283579963814e-02, -8.326955803153378e-07, 0.000000000000000e+00, -7.526022792282146e-07, -1.404459158299878e-06, 0.000000000000000e+00, -1.303384588828034e-06, -7.987027720219490e-06, 0.000000000000000e+00, -1.113458438120450e-05, -4.236988255459868e-03, 0.000000000000000e+00, -4.073611580852245e-03, -2.982628779743804e-06, 0.000000000000000e+00, -7.529403097087130e-06, -2.982628779743789e-06, 0.000000000000000e+00, -7.529403097087116e-06, 6.871032166731199e-02, 0.000000000000000e+00, 6.792029138854946e-02, 6.974274135094972e-02, 0.000000000000000e+00, 6.894215520296731e-02, 6.941325671518679e-02, 0.000000000000000e+00, 6.861216802484453e-02, 6.910888744595942e-02, 0.000000000000000e+00, 6.831536310365335e-02, 6.926416646281627e-02, 0.000000000000000e+00, 6.846664287093016e-02, 6.926416646281627e-02, 0.000000000000000e+00, 6.846664287093016e-02, 7.456011454597546e-02, 0.000000000000000e+00, 7.382557932449957e-02, 3.755236055789300e-02, 0.000000000000000e+00, 3.917757774946654e-02, 7.721372161225702e-02, 0.000000000000000e+00, 7.740776571528284e-02, 8.594906133474756e-02, 0.000000000000000e+00, 8.515416222808686e-02, 8.495695748117242e-02, 0.000000000000000e+00, 8.427158764923071e-02, 8.495695748117242e-02, 0.000000000000000e+00, 8.427158764923071e-02, 4.685257941392455e-02, 0.000000000000000e+00, 4.664618839935568e-02, -9.459511656688170e-02, 0.000000000000000e+00, -9.654325954030524e-02, -1.583897728207227e-01, 0.000000000000000e+00, -1.646584615552976e-01, 3.364536852148312e-02, 0.000000000000000e+00, 3.835744976950961e-02, -1.671434710090498e-01, 0.000000000000000e+00, -1.666671048432445e-01, -1.671434710090500e-01, 0.000000000000000e+00, -1.666671048432446e-01, 4.142482214550834e-02, 0.000000000000000e+00, 4.577057573396025e-02, -4.988210873756270e-04, 0.000000000000000e+00, -5.107074390763094e-04, -1.278133060650262e-03, 0.000000000000000e+00, -1.476422237610302e-03, 1.993971308528914e-01, 0.000000000000000e+00, 2.071536560213013e-01, -9.564867346407458e-03, 0.000000000000000e+00, -1.583197630225959e-02, -9.564867346407480e-03, 0.000000000000000e+00, -1.583197630225960e-02, -1.293825505327415e-05, 0.000000000000000e+00, -1.485887770843777e-05, -1.845081094021688e-07, 0.000000000000000e+00, -4.379988918572617e-07, -7.539887609001901e-07, 0.000000000000000e+00, -9.965058481025369e-07, -9.765672728889663e-03, 0.000000000000000e+00, -1.003958546024252e-02, -7.506694330296755e-06, 0.000000000000000e+00, -6.130301908400371e-06, -7.506694330296752e-06, 0.000000000000000e+00, -6.130301908400381e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
