
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_pbe3_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_pbe3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.804882264811065e+03, 2.804863738541960e+03, 2.804841019294054e+03, 2.805115404904382e+03, 2.804963159926887e+03, 2.804963159926887e+03, 8.505680650548558e+01, 8.505000271169826e+01, 8.489668852732242e+01, 8.519533352093504e+01, 8.505274938125632e+01, 8.505274938125632e+01, 3.869359857672038e+00, 3.877562100785350e+00, 4.051253304593394e+00, 4.101860464249264e+00, 4.077494547192678e+00, 4.077494547192678e+00, 3.597549638406026e-01, 3.673848895477246e-01, 5.046493483968423e+00, 2.226952066279917e-01, 2.733648470725072e-01, 2.733648470725074e-01, 4.998363084778465e-04, 5.537288967075624e-04, 1.679037407599836e-02, 1.667335501855522e-04, 2.632599728462165e-04, 2.632599728462165e-04, 1.471002632940262e+02, 1.467219829551232e+02, 1.470850955842773e+02, 1.467511114376483e+02, 1.469072643257118e+02, 1.469072643257118e+02, 3.714616362454214e+01, 3.743456560966828e+01, 3.730335421835466e+01, 3.757105835058380e+01, 3.721433298128655e+01, 3.721433298128655e+01, 2.274602191009131e+00, 1.785578402707508e+00, 2.057661934042903e+00, 1.483552938694967e+00, 2.241183348980002e+00, 2.241183348980002e+00, 1.115873923237202e-01, 3.794501674312342e-01, 9.581379365025042e-02, 1.607287786025003e+01, 1.508299926060029e-01, 1.508299926060029e-01, 9.926046326864459e-05, 1.593435111515777e-04, 9.316389543948977e-05, 4.384978529295581e-02, 1.352067992839974e-04, 1.352067992839973e-04, 1.474290383596560e+00, 1.500509626172185e+00, 1.471350293123704e+00, 1.461257520831620e+00, 1.464393257900548e+00, 1.464393257900548e+00, 1.429589903881541e+00, 2.062970088665716e+00, 1.917555972945480e+00, 1.641679517623248e+00, 1.792438382020299e+00, 1.792438382020299e+00, 1.990414774691643e+00, 5.817850907411996e-01, 7.866402648259319e-01, 1.085667062541820e+00, 9.447126649543154e-01, 9.447126649543159e-01, 1.765411876625881e+00, 1.538942766699400e-02, 2.851464743765730e-02, 8.931880560662155e-01, 7.039825795783046e-02, 7.039825795783056e-02, 9.954504753827667e-04, 1.138599740340014e-05, 5.016574792978032e-05, 6.225354472420160e-02, 1.157648844274733e-04, 1.157648844274731e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_pbe3_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_pbe3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [1.604750313663294e+03, 1.604755557970311e+03, 1.604787595953363e+03, 1.604709548881015e+03, 1.604749131832430e+03, 1.604749131832430e+03, 4.811244019549003e+01, 4.810620834751745e+01, 4.796526215607620e+01, 4.822954406535551e+01, 4.810728807051699e+01, 4.810728807051699e+01, 2.814644476181871e+00, 2.841396381382804e+00, 3.533823623692236e+00, 3.551024022245210e+00, 3.514087000404421e+00, 3.514087000404421e+00, 4.769805655033034e-01, 4.794456393571331e-01, 3.429367502410340e+00, 3.334889446063705e-01, 3.912777201401283e-01, 3.912777201401289e-01, 8.328616841531226e-04, 9.226306343862590e-04, 2.780564052674274e-02, 2.778681792553169e-04, 4.387073917719581e-04, 4.387073917719581e-04, 1.012830742079682e+02, 1.016572027694899e+02, 1.012986430812940e+02, 1.016287938672281e+02, 1.014722544531139e+02, 1.014722544531139e+02, 3.350460830723014e+01, 3.334903571481615e+01, 3.458116029915762e+01, 3.446472322891948e+01, 3.287673299011959e+01, 3.287673299011959e+01, 1.263343818511713e+00, 2.320003750525974e+00, 1.159119688344701e+00, 1.554714496294463e+00, 1.260724518115906e+00, 1.260724518115906e+00, 1.781265290176128e-01, 5.484029137546879e-01, 1.537577512853364e-01, 2.157290360742435e+01, 2.335089394606507e-01, 2.335089394606507e-01, 1.654255344716192e-04, 2.655516405517544e-04, 1.552552698898219e-04, 7.170494636443810e-02, 2.253189625404885e-04, 2.253189625404885e-04, 2.560797159797817e+00, 2.003925313981547e+00, 2.207752231553952e+00, 2.377575815642221e+00, 2.293473626174040e+00, 2.293473626174040e+00, 2.503807939810589e+00, 1.473920229426159e+00, 1.103844517469129e+00, 1.043289116703401e+00, 9.988321762473020e-01, 9.988321762473020e-01, 2.443572152072129e+00, 7.848202357742067e-01, 9.471813676341657e-01, 8.518818670960752e-01, 9.584725519440314e-01, 9.584725519440322e-01, 1.281825175374533e+00, 2.550660640610164e-02, 4.702311065559785e-02, 5.745604050263272e-01, 1.132976939219535e-01, 1.132976939219538e-01, 1.658375411501609e-03, 1.897642627660214e-05, 8.360639149184243e-05, 1.006514112095983e-01, 1.929202979523524e-04, 1.929202979523524e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_pbe3_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_pbe3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [7.772888174911694e-06, 7.772919043164694e-06, 7.772882332782578e-06, 7.772426386382285e-06, 7.772690156135899e-06, 7.772690156135899e-06, 1.498766494622303e-03, 1.498974633671732e-03, 1.503677587958541e-03, 1.494651652327943e-03, 1.498907644623514e-03, 1.498907644623514e-03, 1.296268073685176e-01, 1.282855016817611e-01, 9.653159943576083e-02, 9.586639597659587e-02, 9.739226726160224e-02, 9.739226726160224e-02, 9.092585601900610e-01, 9.791591906045158e-01, 9.248964721140285e-02, 5.110569327592038e-01, 6.986212773473555e-01, 6.986212773473530e-01, 2.938039182679258e-02, 3.268136986738556e-02, 1.069213406207456e-01, 1.539402142846029e-02, 2.459043881573081e-02, 2.459043881550546e-02, 5.820273962876742e-04, 5.820938678853707e-04, 5.820281843065159e-04, 5.820875085959199e-04, 5.820676109455196e-04, 5.820676109455196e-04, 3.291324731280583e-03, 3.322017168683147e-03, 3.114670546899159e-03, 3.141168968383414e-03, 3.397786756244593e-03, 3.397786756244593e-03, 3.439007888957532e-01, 2.186467945701857e-01, 3.989281359476073e-01, 4.100866600139311e-01, 3.478209557202690e-01, 3.478209557202690e-01, 2.645288421370457e-01, 3.813854075728826e-01, 2.586297433292037e-01, 7.440343779840369e-03, 4.639122111979863e-01, 4.639122111979863e-01, 1.564637551583002e-02, 1.771200599521795e-02, 8.508584833129883e-02, 2.191406789084176e-01, 4.769956134012934e-02, 4.769956134029972e-02, -1.496795775360809e-01, 2.645075553369891e-01, 1.666910537904267e-01, 5.158901813701423e-02, 1.136922850105898e-01, 1.136922850105898e-01, -4.245643763245418e-01, 3.387255897580834e-01, 4.394920075278815e-01, 5.171367066685907e-01, 4.896855881395193e-01, 4.896855881395193e-01, 2.094503776563260e-01, 3.897316978040787e-01, 4.794531920089121e-01, 8.039191704900153e-01, 6.383954414193518e-01, 6.383954414193536e-01, 4.213704465683474e-01, 9.262415035310920e-02, 1.318508358096839e-01, 1.294962716644050e+00, 3.525399024514000e-01, 3.525399024513837e-01, 3.347994950175900e-02, 2.321890447689588e-02, 2.359357048792761e-02, 3.226891839549787e-01, 5.574660790726741e-02, 5.574660790726715e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
