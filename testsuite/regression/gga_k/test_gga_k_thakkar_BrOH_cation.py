
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_thakkar_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_thakkar", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.182048075556954e+03, 2.182056237102467e+03, 2.182102709844270e+03, 2.181981072528108e+03, 2.182043359388261e+03, 2.182043359388261e+03, 5.916148605134931e+01, 5.916079962697236e+01, 5.914782857783607e+01, 5.919285315789244e+01, 5.916352468951306e+01, 5.916352468951306e+01, 2.309635296854255e+00, 2.307657026308969e+00, 2.266550522741491e+00, 2.300149534521162e+00, 2.300566491426588e+00, 2.300566491426588e+00, 1.931331002751465e-01, 1.963261194465070e-01, 3.106372989731791e+00, 1.328322355485916e-01, 1.872659878520856e-01, 1.872659878520856e-01, 2.287040954092342e-03, 2.406130817422207e-03, 2.235960849553512e-02, 1.217900907149615e-03, 1.745157647938714e-03, 1.745157647938713e-03, 1.274025696568588e+02, 1.273998220568150e+02, 1.274028543169156e+02, 1.274004224590929e+02, 1.274009542943893e+02, 1.274009542943893e+02, 2.057387694148083e+01, 2.080914856402575e+01, 2.050190933781657e+01, 2.070934727864572e+01, 2.073898363134458e+01, 2.073898363134458e+01, 1.665485308300831e+00, 1.855192603853562e+00, 1.442038520828824e+00, 1.469137523733326e+00, 1.711812636256599e+00, 1.711812636256599e+00, 8.218669499740430e-02, 2.153193848355270e-01, 7.326032755361488e-02, 1.680400436102691e+01, 9.748522715971591e-02, 9.748522715971591e-02, 8.511500090491129e-04, 1.146823355407116e-03, 5.731556496795251e-04, 4.087828234196110e-02, 8.805630081120954e-04, 8.805630081120961e-04, 1.562227362836838e+00, 1.567329315821301e+00, 1.565453289659469e+00, 1.563876128208328e+00, 1.564655055761245e+00, 1.564655055761245e+00, 1.473268582594888e+00, 1.240610824033387e+00, 1.306982756158174e+00, 1.371265851356485e+00, 1.337941230841413e+00, 1.337941230841413e+00, 2.043816469642397e+00, 3.140861344215413e-01, 4.150206930755008e-01, 6.293931711526584e-01, 5.079302450552188e-01, 5.079302450552188e-01, 1.054627298630161e+00, 2.144241708955664e-02, 3.202313189832132e-02, 5.643908662965955e-01, 5.501304417722047e-02, 5.501304417722049e-02, 3.605582532497481e-03, 1.790080530325975e-04, 4.898408972640602e-04, 5.053029440620979e-02, 7.656644510064467e-04, 7.656644510064456e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_thakkar_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_thakkar", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.276533586080036e+03, 3.276525321826369e+03, 3.276556940871896e+03, 3.276542286994265e+03, 3.276632916176303e+03, 3.276650801894002e+03, 3.276369135240631e+03, 3.276314601534234e+03, 3.276547451827228e+03, 3.276449913264680e+03, 3.276547451827228e+03, 3.276449913264680e+03, 8.630186827684201e+01, 8.630168952505633e+01, 8.630268031596813e+01, 8.630230627155800e+01, 8.632042227236396e+01, 8.632608547944885e+01, 8.631755246092909e+01, 8.632236387665603e+01, 8.627215155897996e+01, 8.634143531299564e+01, 8.627215155897996e+01, 8.634143531299564e+01, 3.167522134582464e+00, 3.195237161625883e+00, 3.156857077634626e+00, 3.190748459055704e+00, 3.018778416196408e+00, 2.975470840817638e+00, 3.040463944890977e+00, 3.054316658188391e+00, 3.248736819650905e+00, 2.833618622305842e+00, 3.248736819650905e+00, 2.833618622305842e+00, 2.076747968139021e-01, 2.229473587825429e-01, 2.121381679457156e-01, 2.301295430264195e-01, 4.181593890024070e+00, 4.483591611316986e+00, 1.304712288011914e-01, 1.338168580110960e-01, 2.260883962928700e-01, 7.601509464475285e-02, 2.260883962928698e-01, 7.601509464475284e-02, 1.294650671324723e-03, 1.404361667489817e-03, 1.364161480550930e-03, 1.494828294175753e-03, 1.600419813699633e-02, 1.730818563262490e-02, 6.833176555486873e-04, 6.723445310651984e-04, 1.115958186671072e-03, 4.578669704942813e-04, 1.115958186671071e-03, 4.578669704942806e-04, 1.959042908870294e+02, 1.958092752399037e+02, 1.960064551672346e+02, 1.959079369044423e+02, 1.959102259291485e+02, 1.958128514729647e+02, 1.959978839499309e+02, 1.959024772684789e+02, 1.959564018149195e+02, 1.958587803125311e+02, 1.959564018149195e+02, 1.958587803125311e+02, 2.697515019883470e+01, 2.697241384507952e+01, 2.737804375108052e+01, 2.736304207227486e+01, 2.663449620502106e+01, 2.672879123148116e+01, 2.697934002083619e+01, 2.707905054373209e+01, 2.746028418564754e+01, 2.721245970300458e+01, 2.746028418564754e+01, 2.721245970300458e+01, 2.470378775156614e+00, 2.457452890665813e+00, 2.971007702862760e+00, 2.974841871361438e+00, 2.025683317227862e+00, 2.181214960453726e+00, 2.244466886732928e+00, 2.395077026237807e+00, 2.679306473036844e+00, 2.416750711338953e+00, 2.679306473036844e+00, 2.416750711338955e+00, 7.254905855532139e-02, 7.348715349815131e-02, 2.223326387751457e-01, 2.243680080479029e-01, 6.131808423427356e-02, 6.668723432690866e-02, 2.699747279057667e+01, 2.697376827782152e+01, 8.868894548823654e-02, 9.550786721520914e-02, 8.868894548823654e-02, 9.550786721520914e-02, 4.469526714615242e-04, 4.818562527340380e-04, 6.285071179416597e-04, 6.500265418013319e-04, 3.163785188711282e-04, 3.340275000612437e-04, 3.325343193402570e-02, 3.371701134940314e-02, 3.690988177555436e-04, 5.553328326867244e-04, 3.690988177555444e-04, 5.553328326867241e-04, 2.560908673027272e+00, 2.581329501354590e+00, 2.505969582389244e+00, 2.526210119247356e+00, 2.523842955236781e+00, 2.544241555472166e+00, 2.539694845674537e+00, 2.559905425753757e+00, 2.531637776619397e+00, 2.551939032016240e+00, 2.531637776619397e+00, 2.551939032016240e+00, 2.437367535859133e+00, 2.453631344478274e+00, 1.707586084299062e+00, 1.722768149906625e+00, 1.886266739868745e+00, 1.903719906309246e+00, 2.084399157053584e+00, 2.099432807915124e+00, 1.981522053844783e+00, 1.996587065897048e+00, 1.981522053844783e+00, 1.996587065897048e+00, 3.257180763643746e+00, 3.269647648219053e+00, 3.444512188775881e-01, 3.481787303674336e-01, 4.858955225375895e-01, 4.952473000329529e-01, 8.483303173890308e-01, 8.578579089121726e-01, 6.436219428710406e-01, 6.431537509032446e-01, 6.436219428710404e-01, 6.431537509032446e-01, 1.442899183437276e+00, 1.463392207163344e+00, 1.576573849479849e-02, 1.591935460577121e-02, 2.433971952772751e-02, 2.547647688728256e-02, 7.846535747039586e-01, 8.090989428516504e-01, 4.615069534595923e-02, 4.925665667144078e-02, 4.615069534595923e-02, 4.925665667144083e-02, 2.161219068641906e-03, 2.258788572160730e-03, 9.759084229221657e-05, 8.737047222063397e-05, 2.550066466743169e-04, 2.720118723221080e-04, 4.267526085834152e-02, 4.385422677374037e-02, 3.019240832558962e-04, 4.931428102427120e-04, 3.019240832558957e-04, 4.931428102427109e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_thakkar_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_thakkar", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.824022255917689e-06, 0.000000000000000e+00, 1.824030297128859e-06, 1.824017046956967e-06, 0.000000000000000e+00, 1.824026505677177e-06, 1.823980217834422e-06, 0.000000000000000e+00, 1.823979378062143e-06, 1.824039560217437e-06, 0.000000000000000e+00, 1.824054852444897e-06, 1.824020167458277e-06, 0.000000000000000e+00, 1.824009848701258e-06, 1.824020167458277e-06, 0.000000000000000e+00, 1.824009848701258e-06, 3.936540060835753e-04, 0.000000000000000e+00, 3.937924244597762e-04, 3.936656258795559e-04, 0.000000000000000e+00, 3.938141243899861e-04, 3.940494701389123e-04, 0.000000000000000e+00, 3.941433442191279e-04, 3.931940540894218e-04, 0.000000000000000e+00, 3.933118310065916e-04, 3.938033272767424e-04, 0.000000000000000e+00, 3.936260558968356e-04, 3.938033272767424e-04, 0.000000000000000e+00, 3.936260558968356e-04, 4.753495971768235e-02, 0.000000000000000e+00, 4.775814369466147e-02, 4.748848177854234e-02, 0.000000000000000e+00, 4.776010139339903e-02, 4.696797146567659e-02, 0.000000000000000e+00, 4.664477809237420e-02, 4.581954485235142e-02, 0.000000000000000e+00, 4.594043563828907e-02, 4.785005198983171e-02, 0.000000000000000e+00, 4.395958697312400e-02, 4.785005198983171e-02, 0.000000000000000e+00, 4.395958697312400e-02, 1.625447733850608e+00, 0.000000000000000e+00, 1.525056456265991e+00, 1.614117895328568e+00, 0.000000000000000e+00, 1.498675565956185e+00, 3.163361581062119e-02, 0.000000000000000e+00, 3.054543002235991e-02, 2.458468847896167e+00, 0.000000000000000e+00, 2.383262878971224e+00, 1.447300686705238e+00, 0.000000000000000e+00, 4.382140989215094e+00, 1.447300686705238e+00, 0.000000000000000e+00, 4.382140989215095e+00, 7.701179004898870e+02, 0.000000000000000e+00, 6.855106314884173e+02, 7.161518602956305e+02, 0.000000000000000e+00, 6.288495564999934e+02, 2.585590184934204e+01, 0.000000000000000e+00, 2.350847930031012e+01, 1.951694213078175e+03, 0.000000000000000e+00, 1.998911323247553e+03, 9.531191669065676e+02, 0.000000000000000e+00, 3.565272781441435e+03, 9.531191669065679e+02, 0.000000000000000e+00, 3.565272781441435e+03, 1.332892044884679e-04, 0.000000000000000e+00, 1.333779812532017e-04, 1.333881380833598e-04, 0.000000000000000e+00, 1.334736907467005e-04, 1.332935348146353e-04, 0.000000000000000e+00, 1.333804353517392e-04, 1.333784397546803e-04, 0.000000000000000e+00, 1.334673942699863e-04, 1.333407929067454e-04, 0.000000000000000e+00, 1.334262131354260e-04, 1.333407929067454e-04, 0.000000000000000e+00, 1.334262131354260e-04, 1.695282447315924e-03, 0.000000000000000e+00, 1.695501483021700e-03, 1.672131782340043e-03, 0.000000000000000e+00, 1.673169996677020e-03, 1.689500835030858e-03, 0.000000000000000e+00, 1.691721741178631e-03, 1.669709481354591e-03, 0.000000000000000e+00, 1.671316874345001e-03, 1.685870688026643e-03, 0.000000000000000e+00, 1.684400986650176e-03, 1.685870688026643e-03, 0.000000000000000e+00, 1.684400986650176e-03, 8.449265840332415e-02, 0.000000000000000e+00, 8.522086696586453e-02, 7.935619879535448e-02, 0.000000000000000e+00, 7.936924331775996e-02, 1.086358559462328e-01, 0.000000000000000e+00, 9.960641168112003e-02, 1.176125530826849e-01, 0.000000000000000e+00, 1.063364098778182e-01, 7.732273300933491e-02, 0.000000000000000e+00, 8.929110735256042e-02, 7.732273300933494e-02, 0.000000000000000e+00, 8.929110735256043e-02, 4.327869536994252e+00, 0.000000000000000e+00, 4.289619307931170e+00, 1.236443421281405e+00, 0.000000000000000e+00, 1.224170500418046e+00, 5.289749160306402e+00, 0.000000000000000e+00, 4.818224618434484e+00, 2.911301394373737e-03, 0.000000000000000e+00, 2.915429624702477e-03, 3.647842592630400e+00, 0.000000000000000e+00, 3.605034738326710e+00, 3.647842592630400e+00, 0.000000000000000e+00, 3.605034738326710e+00, 3.685902207953603e+03, 0.000000000000000e+00, 3.292697260499552e+03, 2.212839746520297e+03, 0.000000000000000e+00, 2.103678218720725e+03, 6.221175753370996e+03, 0.000000000000000e+00, 5.755761118860690e+03, 1.114306503584663e+01, 0.000000000000000e+00, 1.089472778083077e+01, 4.916191741429424e+03, 0.000000000000000e+00, 2.696102696546410e+03, 4.916191741429419e+03, 0.000000000000000e+00, 2.696102696546410e+03, 9.482524353503125e-02, 0.000000000000000e+00, 9.310936222764604e-02, 1.028255756196507e-01, 0.000000000000000e+00, 1.017193165796859e-01, 1.028467023438259e-01, 0.000000000000000e+00, 1.016518341222147e-01, 1.015954196687961e-01, 0.000000000000000e+00, 1.002987487819151e-01, 1.024505404664774e-01, 0.000000000000000e+00, 1.012077434226053e-01, 1.024505404664774e-01, 0.000000000000000e+00, 1.012077434226053e-01, 7.008746634402586e-02, 0.000000000000000e+00, 6.877474438171767e-02, 1.220956038558235e-01, 0.000000000000000e+00, 1.210139406487285e-01, 1.195304747488232e-01, 0.000000000000000e+00, 1.184906577601729e-01, 1.187474527237097e-01, 0.000000000000000e+00, 1.176853332703302e-01, 1.191559808259255e-01, 0.000000000000000e+00, 1.180414939435167e-01, 1.191559808259255e-01, 0.000000000000000e+00, 1.180414939435167e-01, 6.857176583276800e-02, 0.000000000000000e+00, 6.842429616412544e-02, 7.510553327116003e-01, 0.000000000000000e+00, 7.431564288148611e-01, 5.337268632305945e-01, 0.000000000000000e+00, 5.259551130856700e-01, 3.309858159270548e-01, 0.000000000000000e+00, 3.267464104033734e-01, 4.201275522099615e-01, 0.000000000000000e+00, 4.219443799724487e-01, 4.201275522099617e-01, 0.000000000000000e+00, 4.219443799724489e-01, 1.554895775257063e-01, 0.000000000000000e+00, 1.535111736025308e-01, 2.602625823790695e+01, 0.000000000000000e+00, 2.572050995437851e+01, 1.533945456105763e+01, 0.000000000000000e+00, 1.458124281720976e+01, 4.131651568965069e-01, 0.000000000000000e+00, 3.997235629287464e-01, 7.774662057679794e+00, 0.000000000000000e+00, 7.527661253831896e+00, 7.774662057679800e+00, 0.000000000000000e+00, 7.527661253831901e+00, 3.696529282877074e+02, 0.000000000000000e+00, 3.479826399437394e+02, 3.760007067008640e+04, 0.000000000000000e+00, 4.385237104935719e+04, 8.584882244590757e+03, 0.000000000000000e+00, 7.776830346704160e+03, 8.654513400288618e+00, 0.000000000000000e+00, 8.368274303939820e+00, 6.666767379706426e+03, 0.000000000000000e+00, 3.208211200052535e+03, 6.666767379706435e+03, 0.000000000000000e+00, 3.208211200052544e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
