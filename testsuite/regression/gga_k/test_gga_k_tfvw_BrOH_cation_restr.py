
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_tfvw_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tfvw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [3.025894119665787e+03, 3.025882573608788e+03, 3.025882049477525e+03, 3.026052790293107e+03, 3.025956098340382e+03, 3.025956098340382e+03, 8.992796000239386e+01, 8.992118040236107e+01, 8.976895454369962e+01, 9.006791498215587e+01, 8.992416686144996e+01, 8.992416686144996e+01, 4.234709694038053e+00, 4.252508831640186e+00, 4.767633246529157e+00, 4.807640995211044e+00, 4.767797216557494e+00, 4.767797216557494e+00, 7.492606931063708e-01, 7.300352544753814e-01, 5.432945919420933e+00, 8.445051342318177e-01, 7.747650585438494e-01, 7.747650585438497e-01, 7.297671959814797e-01, 7.098841605804059e-01, 9.237573954380722e-01, 7.661271025250852e-01, 6.795116806894351e-01, 6.795116806894343e-01, 1.642759831714966e+02, 1.640048591031479e+02, 1.642652911166836e+02, 1.640259094570577e+02, 1.641375266313603e+02, 1.641375266313603e+02, 4.456748378398120e+01, 4.458159098843138e+01, 4.555099273656093e+01, 4.555954734960595e+01, 4.410585606201350e+01, 4.410585606201350e+01, 2.420389579804837e+00, 2.115493302100103e+00, 2.176486937454438e+00, 1.738054940149022e+00, 2.404584925819116e+00, 2.404584925819116e+00, 9.597128191282441e-01, 1.133695587667830e+00, 9.319978199123666e-01, 1.904655420255587e+01, 7.924449137962534e-01, 7.924449137962534e-01, 6.675028887856946e-01, 7.061898012884632e-01, 2.817492980420089e-01, 8.253351840093862e-01, 4.130206751164145e-01, 4.130206751164150e-01, 1.655625363867174e+00, 1.778130205719404e+00, 1.735102697565016e+00, 1.699412103361233e+00, 1.717256659067884e+00, 1.717256659067884e+00, 1.527248513078962e+00, 2.246889618945675e+00, 2.025708541122603e+00, 1.810194721243737e+00, 1.914467032705978e+00, 1.914467032705978e+00, 2.354586018597221e+00, 1.282268289524026e+00, 1.297629895881736e+00, 1.217730906295342e+00, 1.239496627613542e+00, 1.239496627613542e+00, 1.931114431593575e+00, 9.707170767770749e-01, 9.515833842396144e-01, 9.522549255938735e-01, 7.380634941212556e-01, 7.380634941212554e-01, 8.121930600067843e-01, 3.188815419703820e-01, 4.583191396995909e-01, 7.464652344117805e-01, 3.675051353691497e-01, 3.675051353691493e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_tfvw_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tfvw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [2.489458739495948e+03, 2.489501048809935e+03, 2.489647834764985e+03, 2.489019204003838e+03, 2.489354468753043e+03, 2.489354468753043e+03, 5.626557179094216e+01, 5.627298248026656e+01, 5.644696046547775e+01, 5.616570692793241e+01, 5.627716996815801e+01, 5.627716996815801e+01, 1.204114382880084e+00, 1.174328936752334e+00, 3.747629486167012e-01, 4.204792292964660e-01, 4.420334404030727e-01, 4.420334404030727e-01, -3.866378911426828e-01, -3.563454651198377e-01, 1.962079486549005e+00, -6.355056346946371e-01, -5.112272853337770e-01, -5.112272853337770e-01, -7.293277654922266e-01, -7.093973403997657e-01, -9.089393532045387e-01, -7.659805338450025e-01, -6.792802510002296e-01, -6.792802510002285e-01, 1.634382629987625e+02, 1.638297262794500e+02, 1.634549480660757e+02, 1.638005599797860e+02, 1.636374721848571e+02, 1.636374721848571e+02, 1.733941629310704e+00, 2.393965076354945e+00, 2.613663182915864e-01, 8.451665433185422e-01, 2.805950243682669e+00, 2.805950243682669e+00, 1.741209302863221e+00, 2.795863708284609e+00, 1.386607652650574e+00, 2.112163887839551e+00, 1.892284141548813e+00, 1.892284141548813e+00, -8.589686075081193e-01, -7.699705695295012e-01, -8.457751136144068e-01, 2.550101588873790e+01, -6.537019371468656e-01, -6.537019371468656e-01, -6.674156342608131e-01, -7.060497286467688e-01, -2.816673994359796e-01, -7.863309350495271e-01, -4.129018174798576e-01, -4.129018174798577e-01, 2.546484739540030e+00, 2.375909497578327e+00, 2.435820710063903e+00, 2.485443527956597e+00, 2.460622370310113e+00, 2.460622370310113e+00, 2.450139404812613e+00, 6.840418729205194e-01, 1.188185492567894e+00, 1.697233340406213e+00, 1.441444031006900e+00, 1.441444031006900e+00, 3.043371414154227e+00, -7.016627771614830e-01, -4.602364808451615e-01, 2.432475197504913e-01, -1.345959650029357e-01, -1.345959650029350e-01, 5.530816584189899e-01, -9.571423866889023e-01, -9.263521948589667e-01, 4.054688261580645e-01, -6.748244025822902e-01, -6.748244025822897e-01, -8.113178077903848e-01, -3.188715333998451e-01, -4.582750420705300e-01, -6.907009210367047e-01, -3.674033690112842e-01, -3.674033690112841e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_tfvw_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tfvw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [6.465558408889447e-06, 6.465504314368241e-06, 6.465247135945692e-06, 6.466052320295342e-06, 6.465632777057505e-06, 6.465632777057505e-06, 1.498213674029333e-03, 1.498203972832304e-03, 1.497869659939608e-03, 1.497597610737780e-03, 1.498093701227576e-03, 1.498093701227576e-03, 2.087894145121824e-01, 2.094815290984875e-01, 2.271002921854555e-01, 2.215377010814852e-01, 2.227053156391256e-01, 2.227053156391256e-01, 1.212783639246232e+01, 1.159308837356066e+01, 1.316911190273232e-01, 2.771712142089699e+01, 1.957499616309466e+01, 1.957499616309467e+01, 2.874952765754121e+05, 2.465546137483149e+05, 1.468181512983260e+03, 1.492465251230529e+06, 7.522070256195640e+05, 7.522070256195640e+05, 4.463987932311861e-04, 4.461530243974384e-04, 4.463865483604211e-04, 4.461695925050767e-04, 4.462746898771731e-04, 4.462746898771731e-04, 8.405710951977129e-03, 8.225420308312626e-03, 8.540671341115708e-03, 8.377662191483195e-03, 8.242192632024159e-03, 8.242192632024159e-03, 3.119433029115474e-01, 2.433121166868861e-01, 3.937539884428952e-01, 3.505402349909846e-01, 2.973293717959445e-01, 2.973293717959445e-01, 8.282011699658827e+01, 1.207275069070744e+01, 1.046004417152880e+02, 8.906969473199959e-03, 5.124476217261497e+01, 5.124476217261497e+01, 3.249256950004610e+06, 1.597482152034641e+06, 3.573149841128374e+06, 3.437938582102904e+02, 2.043738650702208e+06, 2.043738650702208e+06, 3.074431719955891e-01, 3.127951632558527e-01, 3.108978161438085e-01, 3.093465472861635e-01, 3.101217331306696e-01, 3.101217331306696e-01, 3.338635972182413e-01, 5.277855463435615e-01, 4.596408969843099e-01, 4.031650116453307e-01, 4.307748394546119e-01, 4.307748394546119e-01, 2.111649385648006e-01, 5.986104049931646e+00, 3.455983667980389e+00, 1.499685834607408e+00, 2.280243059795127e+00, 2.280243059795128e+00, 6.763744328316319e-01, 1.674445854271037e+03, 6.607838326576669e+02, 1.673974624492028e+00, 1.665281126261038e+02, 1.665281126261038e+02, 1.022742173599572e+05, 8.363882291868500e+07, 9.043637243187241e+06, 2.011089761174724e+02, 2.579643228134502e+06, 2.579643228134509e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
