
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_tkvln_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tkvln", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([3.026027301503247e+03, 3.026015755566813e+03, 3.026015231822139e+03, 3.026185971537289e+03, 3.026089282756736e+03, 3.026089282756736e+03, 9.000744848545430e+01, 9.000066946357057e+01, 8.984844438668547e+01, 9.014740744661538e+01, 9.000367113127861e+01, 9.000367113127861e+01, 4.277716706920939e+00, 4.295651846570539e+00, 4.810657674913749e+00, 4.850026449605545e+00, 4.904298920249410e+00, 4.904298920249410e+00, 7.703973636750128e-01, 7.514335655890706e-01, 5.486973190366122e+00, 8.618768112704197e-01, 8.262411077407634e-01, 8.262411077407634e-01, 7.293534644540500e-01, 7.094400854983371e-01, 9.286397076070346e-01, 7.667379919417557e-01, 6.863600266204919e-01, 6.863600266204909e-01, 1.643662301842550e+02, 1.640951116218731e+02, 1.643555386931643e+02, 1.641161612511422e+02, 1.642277765245695e+02, 1.642277765245695e+02, 4.463282967571875e+01, 4.464710884992685e+01, 4.561665963388044e+01, 4.562534491000514e+01, 4.417342316601600e+01, 4.417342316601600e+01, 2.460634818220306e+00, 2.157225658315570e+00, 2.217455108212165e+00, 1.779702980423794e+00, 2.450530389676967e+00, 2.450530389676967e+00, 9.728721545364440e-01, 1.154536615818692e+00, 9.444476615707099e-01, 1.911144687100721e+01, 8.102101196936425e-01, 8.102101196936425e-01, 6.692976514712127e-01, 7.072273381835765e-01, 2.834057061311328e-01, 8.339612287348896e-01, 4.146771850159950e-01, 4.146771850159956e-01, 1.695906024671293e+00, 1.818305127256715e+00, 1.775315093672568e+00, 1.739654724569329e+00, 1.757484149214438e+00, 1.757484149214438e+00, 1.567019318300279e+00, 2.283916931329017e+00, 2.063560310945361e+00, 1.848819771653991e+00, 1.952698300584792e+00, 1.952698300584792e+00, 2.397306428765058e+00, 1.306342775255251e+00, 1.324451262697133e+00, 1.248865463194151e+00, 1.268437582118655e+00, 1.268437582118655e+00, 1.966886138526992e+00, 9.752812961175628e-01, 9.584640343048472e-01, 9.831883291538499e-01, 7.503099088808252e-01, 7.503099088808252e-01, 8.119634395591562e-01, 3.288831958881038e-01, 4.614429587286411e-01, 7.567103074577786e-01, 3.722101807635264e-01, 3.722101807635259e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_tkvln_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tkvln", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([2.489604933448602e+03, 2.489601149587675e+03, 2.489653957317006e+03, 2.489636744479404e+03, 2.489769919986892e+03, 2.489814354663140e+03, 2.489217321014683e+03, 2.489109688310042e+03, 2.489636236362849e+03, 2.489361296475522e+03, 2.489636236362849e+03, 2.489361296475522e+03, 5.633160102893287e+01, 5.637570726241785e+01, 5.633766966486913e+01, 5.638445928908050e+01, 5.651189309295396e+01, 5.655819569525389e+01, 5.622786095460169e+01, 5.627972218817767e+01, 5.629479572024786e+01, 5.643565132758976e+01, 5.629479572024786e+01, 5.643565132758976e+01, 1.188060059105186e+00, 1.316871293302039e+00, 1.143216661780120e+00, 1.301503612563319e+00, 5.377985118275838e-01, 3.049522154711599e-01, 4.300734968834089e-01, 5.076421306006519e-01, 1.511887486017831e+00, -8.996412592829527e-01, 1.511887486017831e+00, -8.996412592829527e-01, -3.801930671295359e-01, -3.439422445191559e-01, -3.516491978890000e-01, -3.116595450897962e-01, 1.638406279323668e+00, 2.357799846392007e+00, -6.126115849184858e-01, -6.156485481776629e-01, -3.972029563328586e-01, -7.000076255583682e-01, -3.972029563328593e-01, -7.000076255583675e-01, -7.280707617883132e-01, -7.315513581314903e-01, -7.091295645132670e-01, -7.106934825744777e-01, -9.059777406695052e-01, -8.983050137617290e-01, -7.612924139507438e-01, -7.718289374886432e-01, -7.289663684621283e-01, -4.575930356651121e-01, -7.289663684621268e-01, -4.575930356651114e-01, 1.635836663730312e+02, 1.634916546705675e+02, 1.639818913012542e+02, 1.638763626567475e+02, 1.636046393359698e+02, 1.635040497576464e+02, 1.639463655274749e+02, 1.638535591416961e+02, 1.637886307682682e+02, 1.636851102641013e+02, 1.637886307682682e+02, 1.636851102641013e+02, 1.808028228299984e+00, 1.806124939192055e+00, 2.475477021430188e+00, 2.459078215849669e+00, 7.664575899530575e-02, 5.902138473309150e-01, 6.649678959668621e-01, 1.169851792930681e+00, 3.421918483412978e+00, 2.327495905701395e+00, 3.421918483412978e+00, 2.327495905701395e+00, 1.790851874868446e+00, 1.784022528454645e+00, 2.838457789669978e+00, 2.849081404160211e+00, 1.341612295602089e+00, 1.518735566251398e+00, 2.092281125595332e+00, 2.222610391631913e+00, 2.053852526032533e+00, 1.823357492741687e+00, 2.053852526032533e+00, 1.823357492741689e+00, -8.497702934374610e-01, -8.350032997875406e-01, -7.456459745298101e-01, -7.437476844231952e-01, -8.350237828075923e-01, -8.253566971394725e-01, 2.558325264783019e+01, 2.556410648412615e+01, -7.121945646814231e-01, -5.742801451819788e-01, -7.121945646814231e-01, -5.742801451819788e-01, -6.421115545637109e-01, -6.903039283202350e-01, -6.923969892079942e-01, -7.206059746620601e-01, -2.895983922909081e-01, -2.746781926262156e-01, -7.672582066557257e-01, -7.824934417198927e-01, -4.109448062253984e-01, -4.151187868489079e-01, -4.109448062253989e-01, -4.151187868489087e-01, 2.581801122453071e+00, 2.603906068498930e+00, 2.410680354925330e+00, 2.433643444370359e+00, 2.470593042096151e+00, 2.493633212980401e+00, 2.520747753656723e+00, 2.542795659471921e+00, 2.495671765875660e+00, 2.518193681312432e+00, 2.495671765875660e+00, 2.518193681312432e+00, 2.487692211262805e+00, 2.504247628714608e+00, 7.161400560952725e-01, 7.376591116205329e-01, 1.219045268991207e+00, 1.244783066631826e+00, 1.733637367977737e+00, 1.750033480799323e+00, 1.477582562669967e+00, 1.493651178569858e+00, 1.477582562669967e+00, 1.493651178569858e+00, 3.080278124707226e+00, 3.103973335333408e+00, -6.762478020087501e-01, -6.694521523578995e-01, -4.412726257839814e-01, -4.159695021102628e-01, 2.745385345560795e-01, 2.849317511596343e-01, -1.041189302396288e-01, -9.701700565841037e-02, -1.041189302396296e-01, -9.701700565841079e-02, 5.775293071413865e-01, 6.107991003993798e-01, -9.510111028354693e-01, -9.498463332871274e-01, -9.252578638939419e-01, -9.096410100850501e-01, 4.253111794118433e-01, 4.565749720425152e-01, -7.088306061036079e-01, -6.222819666047880e-01, -7.088306061036075e-01, -6.222819666047880e-01, -8.161949743534650e-01, -8.075314101570547e-01, -3.608373604490753e-01, -2.697734561296842e-01, -4.647448641357534e-01, -4.506187323657225e-01, -6.755053279867730e-01, -6.792735937294035e-01, -2.859201614591251e-01, -4.073491950799101e-01, -2.859201614591249e-01, -4.073491950799098e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_tkvln_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tkvln", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.293109184051877e-05, 0.000000000000000e+00, 1.293114179513549e-05, 1.293096651097146e-05, 0.000000000000000e+00, 1.293105074677587e-05, 1.293054083471756e-05, 0.000000000000000e+00, 1.293044770940055e-05, 1.293195688134498e-05, 0.000000000000000e+00, 1.293225240321300e-05, 1.293101834015489e-05, 0.000000000000000e+00, 1.293151277752772e-05, 1.293101834015489e-05, 0.000000000000000e+00, 1.293151277752772e-05, 2.996366023714674e-03, 0.000000000000000e+00, 2.996488674912871e-03, 2.996337920348051e-03, 0.000000000000000e+00, 2.996477974254268e-03, 2.995831833038986e-03, 0.000000000000000e+00, 2.995646812433001e-03, 2.995258276008431e-03, 0.000000000000000e+00, 2.995132169597408e-03, 2.997869647877723e-03, 0.000000000000000e+00, 2.994507043947534e-03, 2.997869647877723e-03, 0.000000000000000e+00, 2.994507043947534e-03, 4.200715030699055e-01, 0.000000000000000e+00, 4.151155631692661e-01, 4.220388987872136e-01, 0.000000000000000e+00, 4.159317269801374e-01, 4.495394155411678e-01, 0.000000000000000e+00, 4.589594270924217e-01, 4.445183114860597e-01, 0.000000000000000e+00, 4.416418299177148e-01, 4.057091912691514e-01, 0.000000000000000e+00, 4.937250273428979e-01, 4.057091912691514e-01, 0.000000000000000e+00, 4.937250273428979e-01, 2.572670895608398e+01, 0.000000000000000e+00, 2.294376358600035e+01, 2.479864693157502e+01, 0.000000000000000e+00, 2.177059790083632e+01, 2.771148678928619e-01, 0.000000000000000e+00, 2.509464054984751e-01, 5.659768155776936e+01, 0.000000000000000e+00, 5.431767266435860e+01, 2.259749942680681e+01, 0.000000000000000e+00, 1.463508641615167e+02, 2.259749942680681e+01, 0.000000000000000e+00, 1.463508641615166e+02, 6.324503014234192e+05, 0.000000000000000e+00, 5.271019733892687e+05, 5.496562727421005e+05, 0.000000000000000e+00, 4.471116735888455e+05, 3.197159921025622e+03, 0.000000000000000e+00, 2.714904401504723e+03, 2.911560192811907e+06, 0.000000000000000e+00, 3.062094217456303e+06, 8.908246190359765e+05, 0.000000000000000e+00, 4.834051151218385e+06, 8.908246190359765e+05, 0.000000000000000e+00, 4.834051151218379e+06, 8.924768742371638e-04, 0.000000000000000e+00, 8.931185292667896e-04, 8.919770600555195e-04, 0.000000000000000e+00, 8.926352803062284e-04, 8.924464270475136e-04, 0.000000000000000e+00, 8.931000056290367e-04, 8.920175841013226e-04, 0.000000000000000e+00, 8.926610178974752e-04, 8.922228825623769e-04, 0.000000000000000e+00, 8.928761159884677e-04, 8.922228825623769e-04, 0.000000000000000e+00, 8.928761159884677e-04, 1.681014771245246e-02, 0.000000000000000e+00, 1.681269628863544e-02, 1.644412702125274e-02, 0.000000000000000e+00, 1.645755969611644e-02, 1.712573498435997e-02, 0.000000000000000e+00, 1.703717992720586e-02, 1.680069107032818e-02, 0.000000000000000e+00, 1.671020204194981e-02, 1.637657215386190e-02, 0.000000000000000e+00, 1.659362732978037e-02, 1.637657215386190e-02, 0.000000000000000e+00, 1.659362732978037e-02, 6.214155513929877e-01, 0.000000000000000e+00, 6.263773909722783e-01, 4.869557603842461e-01, 0.000000000000000e+00, 4.862931574736049e-01, 8.325516992461210e-01, 0.000000000000000e+00, 7.470881093773013e-01, 7.371961063213970e-01, 0.000000000000000e+00, 6.683382188279615e-01, 5.523843371812366e-01, 0.000000000000000e+00, 6.439399747262756e-01, 5.523843371812368e-01, 0.000000000000000e+00, 6.439399747262758e-01, 1.680322502110340e+02, 0.000000000000000e+00, 1.633153648043942e+02, 2.432715455530025e+01, 0.000000000000000e+00, 2.396654094362242e+01, 2.269837421716149e+02, 0.000000000000000e+00, 1.940019561885622e+02, 1.780193950795826e-02, 0.000000000000000e+00, 1.782595457225113e-02, 1.121634537776805e+02, 0.000000000000000e+00, 9.435182145012413e+01, 1.121634537776805e+02, 0.000000000000000e+00, 9.435182145012413e+01, 6.896246147170695e+06, 0.000000000000000e+00, 6.144157416218541e+06, 3.268601510341825e+06, 0.000000000000000e+00, 3.124571891844912e+06, 7.817219853849012e+06, 0.000000000000000e+00, 6.581441351138420e+06, 6.939684423521389e+02, 0.000000000000000e+00, 6.813232572463984e+02, 7.337213909483019e+06, 0.000000000000000e+00, 2.832798288875730e+06, 7.337213909483017e+06, 0.000000000000000e+00, 2.832798288875732e+06, 6.184655642516127e-01, 0.000000000000000e+00, 6.113483131048588e-01, 6.292686936810393e-01, 0.000000000000000e+00, 6.219547129496448e-01, 6.254503941826527e-01, 0.000000000000000e+00, 6.181833347862691e-01, 6.222962328002316e-01, 0.000000000000000e+00, 6.151314409845747e-01, 6.238720007562847e-01, 0.000000000000000e+00, 6.166568959141232e-01, 6.238720007562847e-01, 0.000000000000000e+00, 6.166568959141232e-01, 6.710491118734169e-01, 0.000000000000000e+00, 6.644380041926748e-01, 1.062460454592638e+00, 0.000000000000000e+00, 1.048770501185330e+00, 9.254286161076486e-01, 0.000000000000000e+00, 9.132160890872123e-01, 8.105979508028869e-01, 0.000000000000000e+00, 8.021068030259340e-01, 8.663681416474144e-01, 0.000000000000000e+00, 8.567845172274138e-01, 8.663681416474144e-01, 0.000000000000000e+00, 8.567845172274138e-01, 4.233638525448552e-01, 0.000000000000000e+00, 4.213009399359828e-01, 1.207679180856774e+01, 0.000000000000000e+00, 1.186942020676453e+01, 7.016998509778441e+00, 0.000000000000000e+00, 6.810034028331159e+00, 3.024385837125076e+00, 0.000000000000000e+00, 2.974767882753505e+00, 4.558073793085399e+00, 0.000000000000000e+00, 4.562901000858759e+00, 4.558073793085403e+00, 0.000000000000000e+00, 4.562901000858760e+00, 1.366818081411902e+00, 0.000000000000000e+00, 1.338966339251527e+00, 3.383498365853440e+03, 0.000000000000000e+00, 3.314985802507890e+03, 1.390172763857115e+03, 0.000000000000000e+00, 1.259415447184266e+03, 3.424824182712280e+00, 0.000000000000000e+00, 3.274449679751296e+00, 3.625707363724646e+02, 0.000000000000000e+00, 3.079851680605962e+02, 3.625707363724646e+02, 0.000000000000000e+00, 3.079851680605963e+02, 2.160802635499018e+05, 0.000000000000000e+00, 1.941851121390783e+05, 1.678524443444068e+08, 0.000000000000000e+00, 1.667067706068541e+08, 1.992427887587956e+07, 0.000000000000000e+00, 1.656041588063657e+07, 4.122466915137551e+02, 0.000000000000000e+00, 3.926655637176916e+02, 8.633543549065115e+06, 0.000000000000000e+00, 3.678861720624852e+06, 8.633543549065135e+06, 0.000000000000000e+00, 3.678861720624864e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
