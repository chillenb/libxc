
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_absp4_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_absp4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [1.297553224596817e+03, 1.297548273469255e+03, 1.297548048689230e+03, 1.297621265284426e+03, 1.297579803233779e+03, 1.297579803233779e+03, 3.856259171697408e+01, 3.855968473688041e+01, 3.849440729417253e+01, 3.862260690720319e+01, 3.856097162932995e+01, 3.856097162932995e+01, 1.816062714793722e+00, 1.823762535795001e+00, 2.044823498189487e+00, 2.061638791701401e+00, 2.084912032631832e+00, 2.084912032631832e+00, 3.214298793469991e-01, 3.132108426154052e-01, 2.333338661618189e+00, 3.621660411688657e-01, 3.456775199726883e-01, 3.456775199726884e-01, 3.129382180099468e-01, 3.044110453725027e-01, 3.961324412188472e-01, 3.285438694776345e-01, 2.943495572388580e-01, 2.943495572388577e-01, 7.044425045199988e+01, 7.032798818454357e+01, 7.043966565679611e+01, 7.033701475808999e+01, 7.038487815053624e+01, 7.038487815053624e+01, 1.911127398766205e+01, 1.911732453400342e+01, 1.953320973584098e+01, 1.953686966495986e+01, 1.891420706072156e+01, 1.891420706072156e+01, 1.037939732719159e+00, 9.071734778788445e-01, 9.342632050344972e-01, 7.462469675542972e-01, 1.033472111288960e+00, 1.033472111288960e+00, 4.115477514381569e-01, 4.861498286736359e-01, 3.997038344370962e-01, 8.167478278186692e+00, 3.410355077150667e-01, 3.410355077150667e-01, 2.863720645787159e-01, 3.029955569726308e-01, 1.208404209571156e-01, 3.539459653307394e-01, 1.774619939268372e-01, 1.774619939268374e-01, 7.099731813671759e-01, 7.625053278362632e-01, 7.440544960977280e-01, 7.287495857732933e-01, 7.364017201283573e-01, 7.364017201283573e-01, 6.549207777498569e-01, 9.635153727067307e-01, 8.686718675937717e-01, 7.762512921304120e-01, 8.209664665460727e-01, 8.209664665460727e-01, 1.009742500333421e+00, 5.498622909406776e-01, 5.564750138009129e-01, 5.221968983695351e-01, 5.315436199382985e-01, 5.315436199382985e-01, 8.281874883283953e-01, 4.162602768725820e-01, 4.081008874149560e-01, 4.085232542862962e-01, 3.171190264354236e-01, 3.171190264354236e-01, 3.483552196771269e-01, 1.374777188856146e-01, 1.965485167134104e-01, 3.201259073020882e-01, 1.591315422551672e-01, 1.591315422551669e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_absp4_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_absp4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [1.067521711542808e+03, 1.067520088980123e+03, 1.067542733736693e+03, 1.067535352620849e+03, 1.067592460275534e+03, 1.067611514560623e+03, 1.067355497280763e+03, 1.067309342718177e+03, 1.067535134719656e+03, 1.067417236158574e+03, 1.067535134719656e+03, 1.067417236158574e+03, 2.411814540843767e+01, 2.413705904672565e+01, 2.412074770300257e+01, 2.414081204599464e+01, 2.419545692129514e+01, 2.421531199955572e+01, 2.407365851914317e+01, 2.409589730643177e+01, 2.410236463590958e+01, 2.416276147771320e+01, 2.410236463590958e+01, 2.416276147771320e+01, 4.884755123002278e-01, 5.436773869896147e-01, 4.692595018513803e-01, 5.370931847970507e-01, 2.098292271594332e-01, 1.100408471239655e-01, 1.636024632421552e-01, 1.968463728007832e-01, 6.272368267380452e-01, -4.062982867854281e-01, 6.272368267380452e-01, -4.062982867854281e-01, -1.737385210866577e-01, -1.584341195050991e-01, -1.615753544812582e-01, -1.447019166813103e-01, 6.803653035637309e-01, 9.885556848623603e-01, -2.718173876804008e-01, -2.731993532428315e-01, -1.813053374888309e-01, -3.075469761518678e-01, -1.813053374888309e-01, -3.075469761518677e-01, -3.119246832352507e-01, -3.134358597001392e-01, -3.038161560858376e-01, -3.045141574134002e-01, -3.914323877521677e-01, -3.883301202983795e-01, -3.262733123089033e-01, -3.308028222555705e-01, -3.122915219635443e-01, -1.961783783873484e-01, -3.122915219635437e-01, -1.961783783873478e-01, 7.010474420603148e+01, 7.006529103890460e+01, 7.027550730074046e+01, 7.023025792461632e+01, 7.011373761709640e+01, 7.007060617075550e+01, 7.026027345145252e+01, 7.022047952085805e+01, 7.019263513908999e+01, 7.014824686268288e+01, 7.019263513908999e+01, 7.014824686268288e+01, 7.439474990459078e-01, 7.431318746838788e-01, 1.030082452532336e+00, 1.023053272435309e+00, 1.568079585367047e-03, 2.217761729039470e-01, 2.537824116649303e-01, 4.702657940897109e-01, 1.435917524770103e+00, 9.666578243652706e-01, 1.435917524770103e+00, 9.666578243652706e-01, 7.480853182680499e-01, 7.451792703353646e-01, 1.196620442439185e+00, 1.201172105949607e+00, 5.562628041652327e-01, 6.319149475142358e-01, 8.778234964825897e-01, 9.334358475270637e-01, 8.605298889384204e-01, 7.621248441723221e-01, 8.605298889384206e-01, 7.621248441723225e-01, -3.715285075491043e-01, -3.652451605845044e-01, -3.305679521693800e-01, -3.297853320520019e-01, -3.646974343689968e-01, -3.608147753271907e-01, 1.093935809187972e+01, 1.093115266456198e+01, -3.132441940790230e-01, -2.544180570726188e-01, -3.132441940790230e-01, -2.544180570726188e-01, -2.754289043993245e-01, -2.960509063061028e-01, -2.967564410124386e-01, -3.088422315054080e-01, -1.243158675036223e-01, -1.178494355002254e-01, -3.339095775933061e-01, -3.404691413109575e-01, -1.763253334161017e-01, -1.778224385283023e-01, -1.763253334161021e-01, -1.778224385283025e-01, 1.087243918509198e+00, 1.096690121134126e+00, 1.013913481569232e+00, 1.023727380731668e+00, 1.039587825172691e+00, 1.049434775641440e+00, 1.061080695419282e+00, 1.070502436522412e+00, 1.050334850635220e+00, 1.059959713047241e+00, 1.050334850635220e+00, 1.059959713047241e+00, 1.047118686052121e+00, 1.054190059344774e+00, 2.887196651965823e-01, 2.979120722583679e-01, 5.039959375365032e-01, 5.149961869114320e-01, 7.242955059010331e-01, 7.312971887794583e-01, 6.146792387760891e-01, 6.215389849793355e-01, 6.146792387760891e-01, 6.215389849793355e-01, 1.299912459166543e+00, 1.310059165755241e+00, -3.023287945782858e-01, -2.994535321317856e-01, -2.028129238316209e-01, -1.920328982259562e-01, 1.020926783114357e-01, 1.065078387068344e-01, -5.926714037283060e-02, -5.621914285413367e-02, -5.926714037283046e-02, -5.621914285413371e-02, 2.299604727415908e-01, 2.441720548580905e-01, -4.106795649745457e-01, -4.102030843466107e-01, -4.007125248823815e-01, -3.941449790474796e-01, 1.670575954030752e-01, 1.803520303495367e-01, -3.098290335223374e-01, -2.729735428031875e-01, -3.098290335223371e-01, -2.729735428031875e-01, -3.499186524285002e-01, -3.462364658271923e-01, -1.570686520756361e-01, -1.180119488042129e-01, -1.998962860548632e-01, -1.937311685895885e-01, -2.953392971836519e-01, -2.970303432761587e-01, -1.227807403123462e-01, -1.745532088670108e-01, -1.227807403123460e-01, -1.745532088670109e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_absp4_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_absp4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [5.545065111714737e-06, 0.000000000000000e+00, 5.545086533076969e-06, 5.545011368341108e-06, 0.000000000000000e+00, 5.545047490041110e-06, 5.544828831354014e-06, 0.000000000000000e+00, 5.544788897684627e-06, 5.545436055465258e-06, 0.000000000000000e+00, 5.545562780108491e-06, 5.545033593548409e-06, 0.000000000000000e+00, 5.545245616435559e-06, 5.545033593548409e-06, 0.000000000000000e+00, 5.545245616435559e-06, 1.284891090786738e-03, 0.000000000000000e+00, 1.284943685640168e-03, 1.284879039600365e-03, 0.000000000000000e+00, 1.284939097021556e-03, 1.284662021028725e-03, 0.000000000000000e+00, 1.284582681146227e-03, 1.284416070329516e-03, 0.000000000000000e+00, 1.284361993823932e-03, 1.285535869587360e-03, 0.000000000000000e+00, 1.284093929651601e-03, 1.285535869587360e-03, 0.000000000000000e+00, 1.284093929651601e-03, 1.801335776457571e-01, 0.000000000000000e+00, 1.780083890091192e-01, 1.809772293255633e-01, 0.000000000000000e+00, 1.783583734906249e-01, 1.927699037483567e-01, 0.000000000000000e+00, 1.968093598166474e-01, 1.906167716492537e-01, 0.000000000000000e+00, 1.893832889870132e-01, 1.739747818478351e-01, 0.000000000000000e+00, 2.117174216736269e-01, 1.739747818478351e-01, 0.000000000000000e+00, 2.117174216736269e-01, 1.103203643056774e+01, 0.000000000000000e+00, 9.838663630360356e+00, 1.063406815247643e+01, 0.000000000000000e+00, 9.335590866567891e+00, 1.188314184789288e-01, 0.000000000000000e+00, 1.076099508998607e-01, 2.427001782065581e+01, 0.000000000000000e+00, 2.329231246327556e+01, 9.690179857121272e+00, 0.000000000000000e+00, 6.275766044661950e+01, 9.690179857121274e+00, 0.000000000000000e+00, 6.275766044661948e+01, 2.712051035263375e+05, 0.000000000000000e+00, 2.260300057415389e+05, 2.357016606955834e+05, 0.000000000000000e+00, 1.917288480226611e+05, 1.370994820336888e+03, 0.000000000000000e+00, 1.164195712480585e+03, 1.248524954035981e+06, 0.000000000000000e+00, 1.313076422579890e+06, 3.820002654528202e+05, 0.000000000000000e+00, 2.072920733798621e+06, 3.820002654528202e+05, 0.000000000000000e+00, 2.072920733798619e+06, 3.827087796900359e-04, 0.000000000000000e+00, 3.829839319325856e-04, 3.824944511387305e-04, 0.000000000000000e+00, 3.827767068208528e-04, 3.826957234337537e-04, 0.000000000000000e+00, 3.829759886916968e-04, 3.825118285168623e-04, 0.000000000000000e+00, 3.827877435237887e-04, 3.825998638775202e-04, 0.000000000000000e+00, 3.828799811271302e-04, 3.825998638775202e-04, 0.000000000000000e+00, 3.828799811271302e-04, 7.208468144276356e-03, 0.000000000000000e+00, 7.209561015709880e-03, 7.051512444791053e-03, 0.000000000000000e+00, 7.057272596962453e-03, 7.343797163104617e-03, 0.000000000000000e+00, 7.305823296400457e-03, 7.204412980415171e-03, 0.000000000000000e+00, 7.165609795004205e-03, 7.022543805258106e-03, 0.000000000000000e+00, 7.115620638842356e-03, 7.022543805258106e-03, 0.000000000000000e+00, 7.115620638842356e-03, 2.664732210089998e-01, 0.000000000000000e+00, 2.686009395249908e-01, 2.088146485352685e-01, 0.000000000000000e+00, 2.085305134964001e-01, 3.570118778928478e-01, 0.000000000000000e+00, 3.203636832664243e-01, 3.161218294688666e-01, 0.000000000000000e+00, 2.865944334596748e-01, 2.368714996489008e-01, 0.000000000000000e+00, 2.761320646339090e-01, 2.368714996489008e-01, 0.000000000000000e+00, 2.761320646339090e-01, 7.205499580233020e+01, 0.000000000000000e+00, 7.003231766912270e+01, 1.043188445767592e+01, 0.000000000000000e+00, 1.027724740292557e+01, 9.733436628285376e+01, 0.000000000000000e+00, 8.319123335701640e+01, 7.633764797580734e-03, 0.000000000000000e+00, 7.644062852594826e-03, 4.809753592524893e+01, 0.000000000000000e+00, 4.045961468701721e+01, 4.809753592524893e+01, 0.000000000000000e+00, 4.045961468701721e+01, 2.957223905304758e+06, 0.000000000000000e+00, 2.634715873164040e+06, 1.401630150232344e+06, 0.000000000000000e+00, 1.339867878149620e+06, 3.352152595990144e+06, 0.000000000000000e+00, 2.822230425016475e+06, 2.975850953482586e+02, 0.000000000000000e+00, 2.921626317523150e+02, 3.146318143003010e+06, 0.000000000000000e+00, 1.214750552691137e+06, 3.146318143003010e+06, 0.000000000000000e+00, 1.214750552691137e+06, 2.652082179466607e-01, 0.000000000000000e+00, 2.621562234583443e-01, 2.698407777362948e-01, 0.000000000000000e+00, 2.667044223626264e-01, 2.682034280371581e-01, 0.000000000000000e+00, 2.650871933045751e-01, 2.668508716982125e-01, 0.000000000000000e+00, 2.637784909882397e-01, 2.675265869452336e-01, 0.000000000000000e+00, 2.644326311810135e-01, 2.675265869452336e-01, 0.000000000000000e+00, 2.644326311810135e-01, 2.877569090366282e-01, 0.000000000000000e+00, 2.849219572009755e-01, 4.556005379899820e-01, 0.000000000000000e+00, 4.497300605425942e-01, 3.968390292056812e-01, 0.000000000000000e+00, 3.916020965211030e-01, 3.475977490578418e-01, 0.000000000000000e+00, 3.439566050711552e-01, 3.715129252347403e-01, 0.000000000000000e+00, 3.674033092741912e-01, 3.715129252347403e-01, 0.000000000000000e+00, 3.674033092741912e-01, 1.815453913142604e-01, 0.000000000000000e+00, 1.806607804185175e-01, 5.178727190637970e+00, 0.000000000000000e+00, 5.089802833089424e+00, 3.009004506766055e+00, 0.000000000000000e+00, 2.920254729130000e+00, 1.296906448166842e+00, 0.000000000000000e+00, 1.275629452295671e+00, 1.954577098235591e+00, 0.000000000000000e+00, 1.956647084416278e+00, 1.954577098235593e+00, 0.000000000000000e+00, 1.956647084416278e+00, 5.861141000908672e-01, 0.000000000000000e+00, 5.741708144303287e-01, 1.450899813830806e+03, 0.000000000000000e+00, 1.421520498502526e+03, 5.961289724944745e+02, 0.000000000000000e+00, 5.400580819829614e+02, 1.468621004593602e+00, 0.000000000000000e+00, 1.404137941574312e+00, 1.554763020465114e+02, 0.000000000000000e+00, 1.320691115182659e+02, 1.554763020465114e+02, 0.000000000000000e+00, 1.320691115182660e+02, 9.265877510716200e+04, 0.000000000000000e+00, 8.326977364454475e+04, 7.197789208593774e+07, 0.000000000000000e+00, 7.148660832197861e+07, 8.543858866157617e+06, 0.000000000000000e+00, 7.101379022571430e+06, 1.767781696028110e+02, 0.000000000000000e+00, 1.683814595701937e+02, 3.702205638535642e+06, 0.000000000000000e+00, 1.577556483972921e+06, 3.702205638535650e+06, 0.000000000000000e+00, 1.577556483972926e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
