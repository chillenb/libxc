
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_pbe2_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_pbe2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([3.146905298546599e+03, 3.146894810180948e+03, 3.146896528466677e+03, 3.147067309844727e+03, 3.146899361852522e+03, 3.146899361852522e+03, 9.325372033136692e+01, 9.324843529144026e+01, 9.311092188089508e+01, 9.338750662238319e+01, 9.325179655697663e+01, 9.325179655697663e+01, 4.385041692552500e+00, 4.398960729790119e+00, 4.803283000654021e+00, 4.842662783190357e+00, 4.390008981914798e+00, 4.390008981914798e+00, 5.352789133639692e-01, 5.333914926315796e-01, 5.443340604089935e+00, 4.087372772682182e-01, 5.345491818757980e-01, 5.345491818757980e-01, 3.698986003578594e-03, 4.056516188985559e-03, 6.369603484596201e-02, 8.544834491796315e-04, 3.972449278807981e-03, 3.972449278807981e-03, 1.703754494171662e+02, 1.700873451332836e+02, 1.703469835929392e+02, 1.701229482438548e+02, 1.702262650258164e+02, 1.702262650258164e+02, 4.341535292271769e+01, 4.356276722558186e+01, 4.381880670850610e+01, 4.393521514564770e+01, 4.298570865485112e+01, 4.298570865485112e+01, 2.449045780251044e+00, 2.098463480286838e+00, 2.257732564816390e+00, 1.874095691073482e+00, 2.521635620952211e+00, 2.521635620952211e+00, 2.698019760233710e-01, 6.917247430787319e-01, 2.600802414648615e-01, 1.943461003836311e+01, 3.258595735077202e-01, 3.258595735077202e-01, 7.952297806035514e-04, 1.038356146830659e-03, 5.833372300556883e-04, 1.172009825908176e-01, 8.620382434777710e-04, 8.620382434777712e-04, 1.704210773605453e+00, 1.841927165441167e+00, 1.793149372296712e+00, 1.754962567967864e+00, 1.774099849162974e+00, 1.774099849162974e+00, 1.571979340268678e+00, 2.273474260284384e+00, 2.098025576316538e+00, 1.906547523133086e+00, 2.002820383788001e+00, 2.002820383788001e+00, 2.336417510389098e+00, 9.309714383804056e-01, 1.080389345897144e+00, 1.204417837645855e+00, 1.143099379956325e+00, 1.143099379956325e+00, 1.909241452564593e+00, 5.530293371569713e-02, 9.757376983881394e-02, 9.281934722227999e-01, 1.839479026197932e-01, 1.839479026197931e-01, 5.076303842289202e-03, 7.791080457408912e-05, 2.810773988846769e-04, 1.671246715579954e-01, 6.227183666704902e-04, 6.227183666704883e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_pbe2_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_pbe2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([2.585527402634663e+03, 2.585555336920796e+03, 2.585666960523514e+03, 2.585209807158688e+03, 2.585542242855688e+03, 2.585542242855688e+03, 6.333712617073756e+01, 6.333999366437052e+01, 6.342416926183463e+01, 6.330614643005340e+01, 6.333914058226026e+01, 6.333914058226026e+01, 2.064199580939691e+00, 2.057988126857655e+00, 1.979760085576608e+00, 2.004889965343498e+00, 2.061919658766420e+00, 2.061919658766420e+00, 2.456319882666167e-01, 2.371113592280826e-01, 3.140191869834629e+00, 3.318855853403499e-01, 2.427940768755422e-01, 2.427940768755422e-01, 6.119435771217098e-03, 6.705993037158088e-03, 9.700160880448151e-02, 1.422100943987385e-03, 6.567120662421928e-03, 6.567120662421928e-03, 1.641783109223130e+02, 1.644813891728496e+02, 1.642088976399851e+02, 1.644445592720589e+02, 1.643341876876380e+02, 1.643341876876380e+02, 1.796198739667381e+01, 1.814446726939611e+01, 1.797568721645277e+01, 1.810653194790067e+01, 1.810604848734647e+01, 1.810604848734647e+01, 1.837446335355585e+00, 2.724276964781845e+00, 1.627195363674371e+00, 2.150966746958169e+00, 2.048265366090873e+00, 2.048265366090873e+00, 3.097856354638863e-01, 4.494715326160927e-01, 2.931331674843715e-01, 2.518646213197182e+01, 3.142268181912301e-01, 3.142268181912301e-01, 1.323564844604028e-03, 1.727489838813218e-03, 9.705715764305131e-04, 1.631886760429129e-01, 1.434130561728459e-03, 1.434130561728458e-03, 2.632174239707427e+00, 2.459939670757037e+00, 2.519763348688878e+00, 2.567471023844373e+00, 2.543455397277012e+00, 2.543455397277012e+00, 2.489763714678937e+00, 1.211141178231754e+00, 1.458441713171458e+00, 1.785085575330406e+00, 1.609412782564964e+00, 1.609412782564965e+00, 2.969386591765860e+00, 4.723670967345713e-01, 4.480973905492433e-01, 5.724408639027464e-01, 4.626577206411005e-01, 4.626577206411011e-01, 9.723842622644889e-01, 8.588958495470705e-02, 1.424335304811047e-01, 5.430885353239484e-01, 2.238539905045337e-01, 2.238539905045338e-01, 8.386103229990683e-03, 1.298284457639214e-04, 4.681857554482377e-04, 2.027728544052473e-01, 1.036224646448757e-03, 1.036224646448754e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_pbe2_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_pbe2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([6.733429837578958e-06, 6.733407095293551e-06, 6.733231511485988e-06, 6.733605393782612e-06, 6.733418463709149e-06, 6.733418463709149e-06, 1.473804741879699e-03, 1.473844677820814e-03, 1.474759434483441e-03, 1.472245951075811e-03, 1.473806447323636e-03, 1.473806447323636e-03, 1.783676634014840e-01, 1.782063137186182e-01, 1.713291256293016e-01, 1.685226127147025e-01, 1.783125877802603e-01, 1.783125877802603e-01, 5.032932362758477e+00, 5.073113954976100e+00, 1.145854883028991e-01, 5.252072111506596e+00, 5.048803933962946e+00, 5.048803933962946e+00, 2.033299126808001e+00, 2.135686723553379e+00, 3.649354300170866e+00, 6.904844127999993e-01, 2.195498748931138e+00, 2.195498748931138e+00, 4.852221479175912e-04, 4.853860636058056e-04, 4.852371169506960e-04, 4.853646035920551e-04, 4.853088429303174e-04, 4.853088429303174e-04, 6.281995530234542e-03, 6.211736262831393e-03, 6.247636455813482e-03, 6.193986953470393e-03, 6.276554448196846e-03, 6.276554448196846e-03, 3.270894264231890e-01, 2.920296441691059e-01, 3.781935167801092e-01, 3.760241026613104e-01, 2.988641072647581e-01, 2.988641072647581e-01, 4.472644990990884e+00, 2.970213564710914e+00, 5.056258087023673e+00, 1.037382044920673e-02, 5.529564363571152e+00, 5.529564363571152e+00, 7.066288388684445e-01, 8.092610379316987e-01, 1.736038151317202e+00, 4.988351358611231e+00, 1.089122678300155e+00, 1.089122678300055e+00, 3.525560008733463e-01, 3.482046129324874e-01, 3.497573309253206e-01, 3.509673867340334e-01, 3.503627166674215e-01, 3.503627166674215e-01, 3.906362996143333e-01, 4.441197684049027e-01, 4.310052970571559e-01, 4.172688977867758e-01, 4.249069753916523e-01, 4.249069753916525e-01, 2.522333342530939e-01, 2.148757855048874e+00, 1.750638010904907e+00, 1.231785797908604e+00, 1.506248213918429e+00, 1.506248213918429e+00, 5.922558826503760e-01, 2.856280249303722e+00, 3.865404130730484e+00, 1.614400311661241e+00, 6.214223776379332e+00, 6.214223776379352e+00, 1.790560831738694e+00, 3.810295352081238e-01, 6.232527507238470e-01, 7.277671857708227e+00, 1.351747832727199e+00, 1.351747832727545e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
