
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_rational_p_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_rational_p", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [1.693824084714416e+03, 1.693840489059809e+03, 1.693907898361504e+03, 1.693639390467534e+03, 1.693832784072443e+03, 1.693832784072443e+03, 4.186155858245036e+01, 4.186343259099095e+01, 4.191838959925327e+01, 4.184143817445962e+01, 4.186287909302840e+01, 4.186287909302840e+01, 1.272705935164969e+00, 1.264239833811087e+00, 1.044225888937674e+00, 1.069121687018438e+00, 1.269642967566653e+00, 1.269642967566653e+00, 5.246862946101542e-02, 5.658400546566696e-02, 2.057939034018963e+00, 1.141239890907834e-02, 5.371533038649699e-02, 5.371533038649699e-02, 7.894464765861182e-08, 9.977981631494867e-08, 5.994493820098700e-05, 1.543828676009006e-09, 9.743182735753261e-08, 9.743182735753261e-08, 1.059056471636910e+02, 1.060591685421080e+02, 1.059211978064092e+02, 1.060405716266268e+02, 1.059845757042505e+02, 1.059845757042505e+02, 9.562971862384385e+00, 9.805971590387536e+00, 9.359884645375292e+00, 9.547354578533254e+00, 9.996740051532285e+00, 9.996740051532285e+00, 1.210925913581647e+00, 1.692100639961332e+00, 1.074189371273948e+00, 1.358209058871656e+00, 1.343044725226074e+00, 1.343044725226074e+00, 2.413611758954073e-03, 3.235408703870270e-02, 2.522672456468231e-03, 1.564752467698667e+01, 5.593221130934392e-03, 5.593221130934392e-03, 1.348210551958823e-09, 2.632977286205760e-09, 1.370327573116038e-09, 3.230759673938095e-04, 2.215433178242313e-09, 2.215433178242311e-09, 1.596080728019224e+00, 1.521998301279985e+00, 1.548108472737782e+00, 1.568629653169226e+00, 1.558330382110631e+00, 1.558330382110631e+00, 1.504459057550887e+00, 7.826984707796429e-01, 9.636825655451557e-01, 1.155127126144070e+00, 1.056137050627622e+00, 1.056137050627622e+00, 1.849690073884412e+00, 7.293925566191123e-02, 1.416779175692809e-01, 3.548414286365693e-01, 2.295490552624686e-01, 2.295490552624686e-01, 6.205873463759446e-01, 3.569844438420363e-05, 1.667014096832726e-04, 3.565015314115413e-01, 1.244160868680405e-03, 1.244160868680406e-03, 1.409691039298181e-07, 6.077906758383903e-12, 1.344201389883038e-10, 1.148050200498721e-03, 1.304728496648842e-09, 1.304728496648831e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_rational_p_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_rational_p", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.667458621958190e+03, 3.667475042507397e+03, 3.667563410974539e+03, 3.667294205951508e+03, 3.667467155283449e+03, 3.667467155283449e+03, 9.731924159240936e+01, 9.731981446411629e+01, 9.734347385355761e+01, 9.734384492072455e+01, 9.732036541001669e+01, 9.732036541001669e+01, 3.463402974983858e+00, 3.451816028165782e+00, 3.119128540120728e+00, 3.178408342039563e+00, 3.459205506031107e+00, 3.459205506031107e+00, 1.934736740025390e-01, 2.049255412226224e-01, 5.102312566437484e+00, 5.212694529626916e-02, 1.969657041822173e-01, 1.969657041822173e-01, 4.463919785844753e-07, 5.640841424227619e-07, 3.308858988250187e-04, 8.744730075781055e-09, 5.508127663742248e-07, 5.508127663742248e-07, 2.162833230458388e+02, 2.163166727997888e+02, 2.162871073808395e+02, 2.163130379869527e+02, 2.162999970787814e+02, 2.162999970787814e+02, 2.844995734311584e+01, 2.897771313672346e+01, 2.810910113585169e+01, 2.852192951646884e+01, 2.924224135673643e+01, 2.924224135673643e+01, 2.711574735923433e+00, 3.096873185812124e+00, 2.441815554039131e+00, 2.601523271407792e+00, 2.920222794192056e+00, 2.920222794192056e+00, 1.225673773057067e-02, 1.373866373670720e-01, 1.273965003007979e-02, 2.865657017219575e+01, 2.694572354087475e-02, 2.694572354087475e-02, 7.636819291816865e-09, 1.491244008607539e-08, 7.761349165731503e-09, 1.737119355233709e-03, 1.254752942707588e-08, 1.254752942707587e-08, 2.737642436621756e+00, 2.756406950138353e+00, 2.751074735434748e+00, 2.745880028633432e+00, 2.748589585771391e+00, 2.748589585771391e+00, 2.556175385476885e+00, 2.007327910745333e+00, 2.220667874500525e+00, 2.384007782748609e+00, 2.305536126543306e+00, 2.305536126543306e+00, 3.412074540029062e+00, 2.821289362694547e-01, 4.874216220927594e-01, 9.607385857562107e-01, 7.023202299765516e-01, 7.023202299765516e-01, 1.624226311895588e+00, 1.981813751446664e-04, 9.088388463181625e-04, 8.787805721207183e-01, 6.428526969436858e-03, 6.428526969436866e-03, 7.967808146159641e-07, 3.443971065935448e-11, 7.615836914648303e-10, 5.926647149001740e-03, 7.390073202519129e-09, 7.390073202519068e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_rational_p_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_rational_p", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.138081838180505e-06, -2.138083480651851e-06, -2.138054451884579e-06, -2.138028274765734e-06, -2.138083008273794e-06, -2.138083008273794e-06, -4.409291460765462e-04, -4.409561837743899e-04, -4.416448288447084e-04, -4.401783402729603e-04, -4.409374171634809e-04, -4.409374171634809e-04, -4.565227141073192e-02, -4.544187673287454e-02, -3.920207288893614e-02, -3.879657920775702e-02, -4.557726520912231e-02, -4.557726520912231e-02, -8.254011772942462e-01, -8.608745131840401e-01, -3.230496005501017e-02, -4.977242070986193e-01, -8.369487803792764e-01, -8.369487803792764e-01, -1.405589836415955e-02, -1.548359968678653e-02, -9.203734417281802e-02, -2.090854721994978e-03, -1.590190742757355e-02, -1.590190742757355e-02, -1.611208739612692e-04, -1.613285261933548e-04, -1.611411546263275e-04, -1.613026315833803e-04, -1.612287283875929e-04, -1.612287283875929e-04, -1.444902400235470e-03, -1.441085579768162e-03, -1.419536543164658e-03, -1.417013893886045e-03, -1.474973894753833e-03, -1.474973894753833e-03, -1.010527386085212e-01, -1.045139015884318e-01, -1.153691747232826e-01, -1.306253406384675e-01, -9.458051844697941e-02, -9.458051844697941e-02, -2.632745960297025e-01, -3.524343699344927e-01, -3.075247889228653e-01, -3.711137748733504e-03, -4.257887306533904e-01, -4.257887306533904e-01, -2.094791813907503e-03, -2.744038573126567e-03, -5.738256750678254e-03, -1.860038397926089e-01, -3.709581963221164e-03, -3.709581963221161e-03, -1.312626524168395e-01, -1.254479118854946e-01, -1.274935930641136e-01, -1.291064836679732e-01, -1.282972110166075e-01, -1.282972110166075e-01, -1.462423776634380e-01, -1.210795224994706e-01, -1.299465301012173e-01, -1.374808888387042e-01, -1.340403846150534e-01, -1.340403846150534e-01, -8.981825071248271e-02, -3.196770672455759e-01, -3.252526056844910e-01, -3.170507027940320e-01, -3.338668002868397e-01, -3.338668002868399e-01, -1.581130815517373e-01, -6.305668447285485e-02, -1.208099254621001e-01, -4.576913929457209e-01, -3.271345370097174e-01, -3.271345370097182e-01, -1.352086037619459e-02, -4.045730040176606e-04, -1.211347200108498e-03, -3.854776424213299e-01, -4.300667458635588e-03, -4.300667458635567e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
