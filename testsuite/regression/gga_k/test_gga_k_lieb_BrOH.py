
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_lieb_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_lieb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.246185999348125e+03, 2.246192303985419e+03, 2.246235113089376e+03, 2.246131581087599e+03, 2.246189201466404e+03, 2.246189201466404e+03, 6.134458608909638e+01, 6.134377066171653e+01, 6.132643676802323e+01, 6.138234799471406e+01, 6.134468932519321e+01, 6.134468932519321e+01, 2.450282036479214e+00, 2.450345845126592e+00, 2.471821185902394e+00, 2.501750310374017e+00, 2.450278313469310e+00, 2.450278313469310e+00, 2.437973296737773e-01, 2.442474459291947e-01, 3.339229780406547e+00, 2.056777312891495e-01, 2.438386186667442e-01, 2.438386186667442e-01, 9.360311936187375e-02, 9.347126155004143e-02, 1.437493985958972e-01, 1.112774650424032e-01, 9.170769064253993e-02, 9.170769064253993e-02, 1.304782205407873e+02, 1.304649421835660e+02, 1.304771475701960e+02, 1.304668176562185e+02, 1.304709934361076e+02, 1.304709934361076e+02, 2.241567212355346e+01, 2.261678291355121e+01, 2.245164760557707e+01, 2.260712004214174e+01, 2.250864928592452e+01, 2.250864928592452e+01, 1.680930161252496e+00, 1.847858925850149e+00, 1.523223285211236e+00, 1.555473150860876e+00, 1.790983987214781e+00, 1.790983987214781e+00, 1.926812847284396e-01, 3.208312659541580e-01, 1.799641709918129e-01, 1.709905868577003e+01, 1.855037243638999e-01, 1.855037243638999e-01, 1.080395156185897e-01, 1.079243515842621e-01, 6.379296987876180e-02, 1.447443452867111e-01, 8.880169460805738e-02, 8.880169460805742e-02, 1.637672623984832e+00, 1.644695771982349e+00, 1.642181413111074e+00, 1.640222641758456e+00, 1.641199418590715e+00, 1.641199418590715e+00, 1.530443956254852e+00, 1.346663086181291e+00, 1.393843963746961e+00, 1.441385697077998e+00, 1.415876590229515e+00, 1.415876590229515e+00, 2.036173503288819e+00, 4.208897834435478e-01, 5.055578756538286e-01, 6.762633236131240e-01, 5.771634596589854e-01, 5.771634596589853e-01, 1.108039992068155e+00, 1.564768373197647e-01, 1.561800937934268e-01, 5.728966538344789e-01, 1.475103126595661e-01, 1.475103126595660e-01, 1.079783383491919e-01, 8.230246504773028e-02, 8.869287411533615e-02, 1.331255724216981e-01, 7.348371050151417e-02, 7.348371050151423e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_lieb_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_lieb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.268883741550832e+03, 3.268904210705789e+03, 3.269000564305202e+03, 3.268665274211267e+03, 3.268894494192676e+03, 3.268894494192676e+03, 8.483544889399352e+01, 8.483687789748730e+01, 8.488311330232231e+01, 8.483937596029641e+01, 8.483690666333032e+01, 8.483690666333032e+01, 2.920972166411802e+00, 2.909886845035884e+00, 2.606708827263366e+00, 2.657060772229242e+00, 2.916954738708845e+00, 2.916954738708845e+00, 1.581853155229790e-01, 1.685113219863988e-01, 4.376012560942383e+00, 5.614035766752045e-03, 1.613614797330978e-01, 1.613614797330978e-01, -9.234921751006082e-02, -9.209553213066983e-02, -1.210213722133096e-01, -1.109888877839640e-01, -9.036048479469307e-02, -9.036048479469307e-02, 1.969502521386042e+02, 1.970800079911204e+02, 1.969636134603970e+02, 1.970645056857051e+02, 1.970166782553157e+02, 1.970166782553157e+02, 2.378226887423814e+01, 2.423445163742780e+01, 2.348350203516553e+01, 2.383606513669920e+01, 2.447398585556752e+01, 2.447398585556752e+01, 2.390315703115347e+00, 2.955962130029417e+00, 2.142574624633649e+00, 2.432568336642397e+00, 2.599122844340874e+00, 2.599122844340874e+00, -7.862655806346587e-02, 8.693200775376751e-02, -6.881443932740908e-02, 2.734438351608229e+01, -3.299891982841443e-02, -3.299891982841443e-02, -1.077709595616645e-01, -1.075735970779465e-01, -6.359593077177403e-02, -1.005774147334919e-01, -8.851049698105094e-02, -8.851049698105096e-02, 2.697243646645061e+00, 2.644059030186138e+00, 2.663092927107236e+00, 2.677818091426678e+00, 2.670449362750758e+00, 2.670449362750758e+00, 2.530688713909920e+00, 1.709536570246740e+00, 1.940696550518638e+00, 2.162118630730260e+00, 2.049274300798194e+00, 2.049274300798195e+00, 3.244907774007847e+00, 2.241603915178925e-01, 4.043144888593589e-01, 8.108438210273573e-01, 5.861513328701339e-01, 5.861513328701335e-01, 1.378150739046080e+00, -1.369806639214574e-01, -1.204497396315750e-01, 7.546763116269612e-01, -7.237225728336624e-02, -7.237225728336613e-02, -1.062560220131405e-01, -8.227617355066313e-02, -8.859799819957805e-02, -6.473817297171905e-02, -7.327338572272281e-02, -7.327338572272289e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_lieb_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_lieb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.202099292576604e-06, 1.202090538953459e-06, 1.202045041773388e-06, 1.202188517888088e-06, 1.202094730090089e-06, 1.202094730090089e-06, 2.785702682427943e-04, 2.785685143456304e-04, 2.784859207003700e-04, 2.784511428490869e-04, 2.785658061707543e-04, 2.785658061707543e-04, 3.955061989921671e-02, 3.967266637091877e-02, 4.301895133997338e-02, 4.201868128470006e-02, 3.959507542768591e-02, 3.959507542768591e-02, 1.931772143077494e+00, 1.856617302493517e+00, 2.297431103579609e-02, 5.069241619280745e+00, 1.908809296039518e+00, 1.908809296039518e+00, 1.108846778218521e+04, 9.648666993065404e+03, 1.436892464928393e+02, 1.004323673523553e+05, 9.956711321147894e+03, 9.956711321147894e+03, 8.309830993913115e-05, 8.305398828590575e-05, 8.309363215421045e-05, 8.305917149053190e-05, 8.307577879084026e-05, 8.307577879084026e-05, 1.567952582721519e-03, 1.535271881053194e-03, 1.581427007465714e-03, 1.555549584304637e-03, 1.528835635653210e-03, 1.528835635653210e-03, 5.993435818532277e-02, 4.676130496669118e-02, 7.014780333375294e-02, 6.181976547889680e-02, 5.352469749408244e-02, 5.352469749408244e-02, 1.278194435421417e+01, 1.890839619406999e+00, 1.328630527168608e+01, 1.661710339905021e-03, 8.266878707036859e+00, 8.266878707036859e+00, 1.118702032105353e+05, 7.494833091048009e+04, 1.780074622674881e+05, 5.304213872723036e+01, 9.907979681011087e+04, 9.907979681011087e+04, 5.455012931271736e-02, 5.543321004394782e-02, 5.511446658114842e-02, 5.487022642807326e-02, 5.499228801673976e-02, 5.499228801673976e-02, 6.015837389009608e-02, 9.214977321987906e-02, 8.085611250657067e-02, 7.197460375768301e-02, 7.632795527173802e-02, 7.632795527173801e-02, 4.056790471031795e-02, 9.503347468572412e-01, 5.672782635088973e-01, 2.714897667436260e-01, 3.923927537893487e-01, 3.923927537893489e-01, 1.255929293453112e-01, 1.808601082386299e+02, 7.289720434020148e+01, 3.218690770968463e-01, 2.390434939815916e+01, 2.390434939815915e+01, 6.888068752300996e+03, 3.652110258576854e+06, 5.327615618087072e+05, 2.752977872799317e+01, 1.614102809252259e+05, 1.614102809252266e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
