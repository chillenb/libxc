
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_revapbe_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_revapbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.198572645802588e+03, 2.198581236727422e+03, 2.198629105995447e+03, 2.198501091351270e+03, 2.198566791832800e+03, 2.198566791832800e+03, 5.950888769321448e+01, 5.950825341688304e+01, 5.949651114489403e+01, 5.953953758462703e+01, 5.951099626016874e+01, 5.951099626016874e+01, 2.319509914853020e+00, 2.317472558339588e+00, 2.276373667041253e+00, 2.310176541302345e+00, 2.299669478263574e+00, 2.299669478263574e+00, 1.938445221162038e-01, 1.970855928550527e-01, 3.116464398749123e+00, 1.300416254484964e-01, 1.530301114792393e-01, 1.530301114792393e-01, 3.695438494906402e-04, 4.093350475038892e-04, 1.212944032903157e-02, 1.233498894394375e-04, 1.947151219165116e-04, 1.947151219165116e-04, 1.286030773352915e+02, 1.286062604645726e+02, 1.286036097826706e+02, 1.286064141255114e+02, 1.286044775469767e+02, 1.286044775469767e+02, 2.066647458898743e+01, 2.090183819436104e+01, 2.059656144135447e+01, 2.080394925933549e+01, 2.083035458549229e+01, 2.083035458549229e+01, 1.676486264289200e+00, 1.880334263598597e+00, 1.448475632034519e+00, 1.485037497310489e+00, 1.718928245995440e+00, 1.718928245995440e+00, 7.246726325021891e-02, 2.140101145531779e-01, 6.301185323163101e-02, 1.703558605229430e+01, 9.225291775545663e-02, 9.225291775545663e-02, 7.344006464784649e-05, 1.178814283451177e-04, 6.891221645382117e-05, 3.036960441991159e-02, 1.000113001897966e-04, 1.000113001897966e-04, 1.587167869937188e+00, 1.588844559669139e+00, 1.588302622158367e+00, 1.587791085736568e+00, 1.588047737464680e+00, 1.588047737464680e+00, 1.496627428769565e+00, 1.245959932187734e+00, 1.314267837545515e+00, 1.383277448876552e+00, 1.347170463684247e+00, 1.347170463684247e+00, 2.070711459182005e+00, 3.153565497657524e-01, 4.176408446740799e-01, 6.320335652390289e-01, 5.105513749544629e-01, 5.105513749544629e-01, 1.059089956760896e+00, 1.115069533529293e-02, 2.029636410419010e-02, 5.668748095606152e-01, 4.663129575888305e-02, 4.663129575888307e-02, 7.354230377089738e-04, 8.425487651244301e-06, 3.711824095472926e-05, 4.173384811551201e-02, 8.563173214131678e-05, 8.563173214131663e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_revapbe_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_revapbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.334366971215964e+03, 3.334388250500152e+03, 3.334484293179322e+03, 3.334167672938792e+03, 3.334333368706981e+03, 3.334333368706981e+03, 8.754267432979793e+01, 8.754361709870567e+01, 8.756971499227102e+01, 8.755760567262931e+01, 8.754802537726617e+01, 8.754802537726617e+01, 3.201619271046823e+00, 3.193306662596762e+00, 3.000515286432246e+00, 3.051493577148013e+00, 3.041397479677876e+00, 3.041397479677876e+00, 2.215115184820738e-01, 2.261804438111819e-01, 4.369605068977251e+00, 1.519113881361560e-01, 1.741841413386558e-01, 1.741841413386558e-01, 6.148373300886202e-04, 6.808769125395348e-04, 1.934041524678786e-02, 2.054695715657370e-04, 3.242062299398416e-04, 3.242062299398416e-04, 1.996794728947495e+02, 1.997881052209211e+02, 1.996845817717845e+02, 1.997804811428672e+02, 1.997344727102584e+02, 1.997344727102584e+02, 2.698114161052313e+01, 2.738662055411004e+01, 2.667144708292455e+01, 2.702545662737779e+01, 2.735834393861960e+01, 2.735834393861960e+01, 2.503544724479330e+00, 3.032753308695399e+00, 2.134840651748589e+00, 2.367700119425913e+00, 2.593331560288882e+00, 2.593331560288882e+00, 9.649685744062772e-02, 2.443095340687507e-01, 8.555707332741772e-02, 2.752596775388597e+01, 1.130992451566756e-01, 1.130992451566756e-01, 1.223538914608949e-04, 1.963565149362290e-04, 1.147573253507526e-04, 4.492839044650294e-02, 1.665470365564545e-04, 1.665470365564545e-04, 2.615118157118913e+00, 2.566523303314503e+00, 2.583423191735075e+00, 2.597530165935896e+00, 2.590454061377037e+00, 2.590454061377037e+00, 2.480797942845572e+00, 1.727002893942860e+00, 1.920763433878882e+00, 2.131678862635350e+00, 2.022132502109202e+00, 2.022132502109202e+00, 3.329531691931513e+00, 3.590157278440032e-01, 4.929863780020438e-01, 8.566400572654684e-01, 6.422032658971422e-01, 6.422032658971422e-01, 1.462492605086165e+00, 1.787690123938548e-02, 3.150911177196714e-02, 8.048685472366438e-01, 6.404119408792905e-02, 6.404119408792905e-02, 1.221905280775516e-03, 1.404120576377537e-05, 6.184653895279975e-05, 5.843898096359424e-02, 1.426054687829367e-04, 1.426054687829364e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_revapbe_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_revapbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [8.353070388676135e-07, 8.353025596339027e-07, 8.352764639946408e-07, 8.353432332863302e-07, 8.353091262317830e-07, 8.353091262317830e-07, 1.862686103966766e-04, 1.862726269002270e-04, 1.863517415988893e-04, 1.861080976837682e-04, 1.862599557484555e-04, 1.862599557484555e-04, 2.369159397036988e-02, 2.370533716778856e-02, 2.379919203442175e-02, 2.330854847428081e-02, 2.348596859701686e-02, 2.348596859701686e-02, 7.531682309918579e-01, 7.538892831682843e-01, 1.530836348183451e-02, 8.794617389094681e-01, 8.781971802322073e-01, 8.781971802322072e-01, 1.579749600700660e-01, 1.756354548559521e-01, 5.248553242396573e-01, 8.297707717583432e-02, 1.324285021191632e-01, 1.324285021191635e-01, 5.929729182838218e-05, 5.930007836531180e-05, 5.929713011742593e-05, 5.929959480172546e-05, 5.929886809656189e-05, 5.929886809656189e-05, 8.647254011774117e-04, 8.521577199519315e-04, 8.642788544336539e-04, 8.532804237060967e-04, 8.578545403719948e-04, 8.578545403719948e-04, 3.953745714021455e-02, 3.371135566691325e-02, 4.907456145246014e-02, 4.796724925251661e-02, 3.816823050216156e-02, 3.816823050216156e-02, 8.179943924740918e-01, 5.101266901014043e-01, 8.485686531361629e-01, 1.236449716225072e-03, 1.055177069192524e+00, 1.055177069192524e+00, 8.436814522161878e-02, 9.546745886973318e-02, 4.583562657462440e-01, 9.044716194145180e-01, 2.569613611183647e-01, 2.569613611183641e-01, 4.355746274380187e-02, 4.340873669265286e-02, 4.346123209025903e-02, 4.350550952470297e-02, 4.348353545310162e-02, 4.348353545310162e-02, 4.759115088277469e-02, 6.028286649250307e-02, 5.665337232516317e-02, 5.308810795143180e-02, 5.495124246826510e-02, 5.495124246826510e-02, 2.916102715741505e-02, 3.512627116269679e-01, 2.675789589731197e-01, 1.651801803798753e-01, 2.162867604997110e-01, 2.162867604997110e-01, 7.680138783967468e-02, 4.601246094261224e-01, 6.097157412630227e-01, 1.982250482471284e-01, 1.195692230812702e+00, 1.195692230812703e+00, 1.795032798012732e-01, 1.252756610582524e-01, 1.272473657367940e-01, 1.155573875375155e+00, 3.003311185897402e-01, 3.003311185897406e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
