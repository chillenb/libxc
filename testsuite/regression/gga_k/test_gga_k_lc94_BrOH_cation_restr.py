
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_lc94_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_lc94", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.193854957203046e+03, 2.193863874694320e+03, 2.193912621556286e+03, 2.193779759687975e+03, 2.193848081848233e+03, 2.193848081848233e+03, 5.925317439517939e+01, 5.925264113322821e+01, 5.924321834612929e+01, 5.928211069316335e+01, 5.925539174979591e+01, 5.925539174979591e+01, 2.296647098015171e+00, 2.294247642356542e+00, 2.243471628052099e+00, 2.277286637360603e+00, 2.267223048644252e+00, 2.267223048644252e+00, 1.887610945089325e-01, 1.918531593957469e-01, 3.090332408918627e+00, 1.304299240049366e-01, 1.503691949834154e-01, 1.503691949834154e-01, 2.738365493600565e-04, 3.397933733123346e-04, 2.259509893327209e-02, 3.076986599188780e-05, 8.517851737126018e-05, 8.517851737126028e-05, 1.284986658866779e+02, 1.285051354715712e+02, 1.284993342333640e+02, 1.285050404938152e+02, 1.285017437608845e+02, 1.285017437608845e+02, 2.034729589086454e+01, 2.058681267720322e+01, 2.026096270936409e+01, 2.047184616861877e+01, 2.052156332668110e+01, 2.052156332668110e+01, 1.671145307093332e+00, 1.881229192269881e+00, 1.442460320120233e+00, 1.485376608498345e+00, 1.714657366808346e+00, 1.714657366808346e+00, 8.222059064282851e-02, 2.108826445140768e-01, 7.339276892357177e-02, 1.704410776937680e+01, 9.608345835381231e-02, 9.608345835381231e-02, 1.255170549099117e-05, 3.047315794192468e-05, 2.588499756509510e-05, 4.175969994218786e-02, 3.720347434384050e-05, 3.720347434384043e-05, 1.587710376520570e+00, 1.589633808485268e+00, 1.589173414864495e+00, 1.588619614192111e+00, 1.588912874346487e+00, 1.588912874346487e+00, 1.496644178446815e+00, 1.234174661275699e+00, 1.307945298815460e+00, 1.381613635907317e+00, 1.343361174763626e+00, 1.343361174763626e+00, 2.071591084157381e+00, 3.073176207431152e-01, 4.070057370730205e-01, 6.246813258250241e-01, 5.006782199155241e-01, 5.006782199155240e-01, 1.048694460292413e+00, 2.150928067199328e-02, 3.287705822923656e-02, 5.627657530803362e-01, 5.523440026716318e-02, 5.523440026716318e-02, 8.785264900931642e-04, 3.441811060808564e-07, 4.670285538044766e-06, 5.102049939146715e-02, 3.068805525177850e-05, 3.068805525177841e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_lc94_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_lc94", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.358208557461731e+03, 3.358229110803871e+03, 3.358323345013660e+03, 3.358017495861419e+03, 3.358177346155663e+03, 3.358177346155663e+03, 8.845023333317798e+01, 8.845099261671537e+01, 8.847288848270145e+01, 8.846842434476184e+01, 8.845540813284647e+01, 8.845540813284647e+01, 3.252553202506472e+00, 3.244450503982041e+00, 3.052933333761764e+00, 3.104802625549321e+00, 3.094518710142200e+00, 3.094518710142200e+00, 2.122703548367886e-01, 2.186767920645145e-01, 4.434287614773169e+00, 1.254791967915224e-01, 1.555063442995865e-01, 1.555063442995865e-01, 1.101828978465541e-03, 1.344684687548074e-03, 2.036193800472193e-02, 1.322747723607700e-04, 3.588911230815283e-04, 3.588911230815287e-04, 2.006159701851387e+02, 2.007145757476631e+02, 2.006206676193645e+02, 2.007077143608429e+02, 2.006658583877378e+02, 2.006658583877378e+02, 2.744952895453870e+01, 2.786377162215642e+01, 2.712784204653707e+01, 2.749099923383264e+01, 2.783574710604529e+01, 2.783574710604529e+01, 2.525566177769193e+00, 3.036515507530981e+00, 2.156558253451824e+00, 2.372850068155369e+00, 2.613319950029690e+00, 2.613319950029690e+00, 6.732451282872409e-02, 2.151422056155967e-01, 5.905224276598932e-02, 2.755636500397527e+01, 8.598025665547707e-02, 8.598025665547707e-02, 5.428514218443065e-05, 1.308948937901411e-04, 1.098711393482830e-04, 3.191012858508470e-02, 1.579782574697447e-04, 1.579782574697444e-04, 2.614029408762788e+00, 2.569411504693670e+00, 2.585009698291001e+00, 2.597968325907481e+00, 2.591482162449486e+00, 2.591482162449486e+00, 2.479504302010433e+00, 1.754006483850933e+00, 1.941961472485425e+00, 2.143327912627655e+00, 2.038815885188143e+00, 2.038815885188143e+00, 3.334455373559232e+00, 3.401119959783827e-01, 4.905244361251817e-01, 8.710958888628104e-01, 6.516972851005512e-01, 6.516972851005511e-01, 1.485719130909785e+00, 2.043755193603923e-02, 2.609105161452479e-02, 8.159514549386071e-01, 4.401658799653001e-02, 4.401658799653002e-02, 3.194593489269303e-03, 1.496209805842988e-06, 2.025224581433598e-05, 4.004969197477730e-02, 1.305095807552383e-04, 1.305095807552380e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_lc94_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_lc94", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([7.550365277912376e-07, 7.550340013701008e-07, 7.550147393547793e-07, 7.550524947796137e-07, 7.550338525258825e-07, 7.550338525258825e-07, 1.649231756924662e-04, 1.649286954439485e-04, 1.650443226913485e-04, 1.647496082105347e-04, 1.649178669068211e-04, 1.649178669068211e-04, 2.051578872967142e-02, 2.052222364634637e-02, 2.058209379583024e-02, 2.015350633331105e-02, 2.030463042028304e-02, 2.030463042028304e-02, 7.588693791139592e-01, 7.449198157968925e-01, 1.329877054820446e-02, 1.246841363752680e+00, 1.032874047435625e+00, 1.032874047435625e+00, -9.537357280993233e+01, -1.014029204765115e+02, 1.037129950037502e+01, -5.917062287772944e+01, -9.006180826112053e+01, -9.006180826112073e+01, 5.480512583589186e-05, 5.483897537962710e-05, 5.480626364545963e-05, 5.483614917834858e-05, 5.482248863733389e-05, 5.482248863733389e-05, 7.488160280506135e-04, 7.375197818143279e-04, 7.496167785271879e-04, 7.395830994701654e-04, 7.422071570749060e-04, 7.422071570749060e-04, 3.533022139011257e-02, 3.295449491098126e-02, 4.349682713284463e-02, 4.591887348474408e-02, 3.435820527015050e-02, 3.435820527015050e-02, 2.348341568384618e+00, 6.188709182235789e-01, 2.758516162126758e+00, 1.213345863686971e-03, 1.924720675120340e+00, 1.924720675120340e+00, -6.090919124494479e+01, -6.795865944453593e+01, -3.173837709937666e+02, 5.993541265278545e+00, -1.781059227789183e+02, -1.781059227789178e+02, 4.643551711218045e-02, 4.257155855563192e-02, 4.336906704348874e-02, 4.434615245660804e-02, 4.380317520190602e-02, 4.380317520190602e-02, 5.222217438111219e-02, 5.223949927386148e-02, 4.998654796198992e-02, 4.868239472436726e-02, 4.927954721230790e-02, 4.927954721230790e-02, 2.833221533708708e-02, 3.628721481219961e-01, 2.474682288535077e-01, 1.427562509042734e-01, 1.893961844903232e-01, 1.893961844903233e-01, 6.651094787255077e-02, 1.002146035040627e+01, 7.549649394518634e+00, 1.728221851866777e-01, 4.199699608181390e+00, 4.199699608181389e+00, -8.174399454147610e+01, -9.074368623548720e+01, -9.226438222623625e+01, 4.675799226872143e+00, -2.089246599641300e+02, -2.089246599641304e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
