
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_tw4_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tw4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.191708471602251e+03, 2.191717286865437e+03, 2.191765720351847e+03, 2.191634376697462e+03, 2.191701883203856e+03, 2.191701883203856e+03, 5.923076451216605e+01, 5.923020438393041e+01, 5.922015987214633e+01, 5.926012529671731e+01, 5.923294857350388e+01, 5.923294857350388e+01, 2.298689092438839e+00, 2.296347193305302e+00, 2.246258925254416e+00, 2.280124113918718e+00, 2.270050293771958e+00, 2.270050293771958e+00, 1.851678565149113e-01, 1.888084627513818e-01, 3.092254428511287e+00, 1.195663564076480e-01, 1.433508313011544e-01, 1.433508313011544e-01, 3.061235951685724e-04, 3.391066067457455e-04, 1.015688006177730e-02, 1.021502057597303e-04, 1.612677606642016e-04, 1.612677606642016e-04, 1.283306989000914e+02, 1.283364965527751e+02, 1.283313386919043e+02, 1.283364515103154e+02, 1.283334329598043e+02, 1.283334329598043e+02, 2.037160121669860e+01, 2.061190410735471e+01, 2.028342129882640e+01, 2.049533167540419e+01, 2.054681915296420e+01, 2.054681915296420e+01, 1.669993532626875e+00, 1.878794184523837e+00, 1.441857117079884e+00, 1.483296523341347e+00, 1.713139214786544e+00, 1.713139214786544e+00, 6.365400703480946e-02, 1.997937311267136e-01, 5.504448033452483e-02, 1.702252063873940e+01, 8.315563408831353e-02, 8.315563408831353e-02, 6.081550005307766e-05, 9.762209113721798e-05, 5.707267826592506e-05, 2.592555670214876e-02, 8.282857441191334e-05, 8.282857441191334e-05, 1.586761851377629e+00, 1.587613226134037e+00, 1.587376946929756e+00, 1.587105895926622e+00, 1.587243756663957e+00, 1.587243756663957e+00, 1.496451181211338e+00, 1.235190324014076e+00, 1.307634720851175e+00, 1.379926965247237e+00, 1.342300181922017e+00, 1.342300181922017e+00, 2.068827140331654e+00, 3.001813149984192e-01, 4.045525490588598e-01, 6.253824856309980e-01, 5.008613207404982e-01, 5.008613207404982e-01, 1.049619914767924e+00, 9.324372217845664e-03, 1.711201557553502e-02, 5.629778888522953e-01, 4.060659162799566e-02, 4.060659162799567e-02, 6.094225757989866e-04, 6.976614201418463e-06, 3.073672946311131e-05, 3.614978915979856e-02, 7.091896566804942e-05, 7.091896566804928e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_tw4_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tw4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.346522059853750e+03, 3.346542871776126e+03, 3.346637716146979e+03, 3.346328031756463e+03, 3.346489967974298e+03, 3.346489967974298e+03, 8.806326040032924e+01, 8.806404907349315e+01, 8.808661590417107e+01, 8.808085108283427e+01, 8.806845178613487e+01, 8.806845178613487e+01, 3.242352531241518e+00, 3.234643250668631e+00, 3.058805240372743e+00, 3.109731792359975e+00, 3.098834443404961e+00, 3.098834443404961e+00, 2.326872092676138e-01, 2.373731712094542e-01, 4.416786234140218e+00, 1.566480745037745e-01, 1.824662219079410e-01, 1.824662219079410e-01, 5.096789805343006e-04, 5.645129887823471e-04, 1.648453174419311e-02, 1.701943971045700e-04, 2.686224380724629e-04, 2.686224380724629e-04, 2.001306065072281e+02, 2.002341105907500e+02, 2.001355044351397e+02, 2.002268757552793e+02, 2.001829893139157e+02, 2.001829893139157e+02, 2.754835058779998e+01, 2.794572675797718e+01, 2.726992636052710e+01, 2.761684388720887e+01, 2.790596313056408e+01, 2.790596313056408e+01, 2.515413259636074e+00, 3.034875024936636e+00, 2.147196590332975e+00, 2.370271356257863e+00, 2.603703247716566e+00, 2.603703247716566e+00, 9.211178343232214e-02, 2.554177921700051e-01, 8.070549778623247e-02, 2.754374712339332e+01, 1.134047858819333e-01, 1.134047858819333e-01, 1.013364041792260e-04, 1.626480535137167e-04, 9.507365249314573e-05, 4.017812132708649e-02, 1.379794075005114e-04, 1.379794075005114e-04, 2.615585381337668e+00, 2.568202156370417e+00, 2.584622315251639e+00, 2.598375518432954e+00, 2.591471265814017e+00, 2.591471265814017e+00, 2.480987344331839e+00, 1.748058802181953e+00, 1.933284621274902e+00, 2.137364530863628e+00, 2.030949718527291e+00, 2.030949718527291e+00, 3.332180299128801e+00, 3.773724031307213e-01, 5.138717427030125e-01, 8.696468732842385e-01, 6.601364548643861e-01, 6.601364548643861e-01, 1.481018541867895e+00, 1.518329978021762e-02, 2.732426133829612e-02, 8.124166590911787e-01, 5.998914821662411e-02, 5.998914821662411e-02, 1.013829515648475e-03, 1.162706314768393e-05, 5.121941357437246e-05, 5.408952026520911e-02, 1.181420714462144e-04, 1.181420714462142e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_tw4_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tw4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([7.755672836743944e-07, 7.755639942729122e-07, 7.755422354779212e-07, 7.755913213759421e-07, 7.755666160150188e-07, 7.755666160150188e-07, 1.705185794554570e-04, 1.705239943027408e-04, 1.706366061376742e-04, 1.703437263574475e-04, 1.705127401988319e-04, 1.705127401988319e-04, 2.100101229422024e-02, 2.099362216057423e-02, 2.054530769094734e-02, 2.014766930292965e-02, 2.031639267857753e-02, 2.031639267857753e-02, 5.630509316421640e-01, 5.697351882689208e-01, 1.368319130915677e-02, 5.783407350163623e-01, 6.130612482019611e-01, 6.130612482019610e-01, 7.787458452441164e-02, 8.659387815116237e-02, 2.659908068333243e-01, 4.087271963180107e-02, 6.524956236655391e-02, 6.524956236655405e-02, 5.563606802036887e-05, 5.565133642359180e-05, 5.563643910593769e-05, 5.564992351981257e-05, 5.564399514267405e-05, 5.564399514267405e-05, 7.420594102107937e-04, 7.329287346255664e-04, 7.378027990904392e-04, 7.299095572003671e-04, 7.389287619659509e-04, 7.389287619659509e-04, 3.645040230699964e-02, 3.214856477518074e-02, 4.496515654960570e-02, 4.552209057810880e-02, 3.535425889737383e-02, 3.535425889737383e-02, 4.708900648053497e-01, 3.521404282202418e-01, 4.811367714577265e-01, 1.180018177795601e-03, 6.537284545825626e-01, 6.537284545825626e-01, 4.155323795503063e-02, 4.702582907295948e-02, 2.258182075772565e-01, 4.820261281957461e-01, 1.265963720578510e-01, 1.265963720578507e-01, 4.190548510211554e-02, 4.142272361120781e-02, 4.159188217977641e-02, 4.173336280348483e-02, 4.166271036469508e-02, 4.166271036469508e-02, 4.589809708276731e-02, 5.355698315176510e-02, 5.170058802227177e-02, 4.964536118061244e-02, 5.078114597862868e-02, 5.078114597862868e-02, 2.777334466000561e-02, 2.592209992156488e-01, 2.113188173502975e-01, 1.449538614672090e-01, 1.809671255034254e-01, 1.809671255034254e-01, 6.809515561968570e-02, 2.323545619669674e-01, 3.145063181800064e-01, 1.783307187418336e-01, 6.721254800825318e-01, 6.721254800825324e-01, 8.856525894049402e-02, 6.168970023377496e-02, 6.266820329435013e-02, 6.402992176826959e-01, 1.479602247900207e-01, 1.479602247900209e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
