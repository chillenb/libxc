
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_pbe2_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_pbe2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([3.147008010508006e+03, 3.146995964332832e+03, 3.146995310581833e+03, 3.147173441179687e+03, 3.147072582948120e+03, 3.147072582948120e+03, 9.325565473054341e+01, 9.324900682690098e+01, 9.309990549739113e+01, 9.339459481982632e+01, 9.325217989618498e+01, 9.325217989618498e+01, 4.287382552581156e+00, 4.301234917920668e+00, 4.674437112247222e+00, 4.721975654877681e+00, 4.687651531079148e+00, 4.687651531079148e+00, 5.520546208072223e-01, 5.525197432362189e-01, 5.544936760285980e+00, 4.209004084197049e-01, 4.719729703759667e-01, 4.719729703759667e-01, 1.300874504103975e-03, 1.440941901388755e-03, 4.264431973862339e-02, 4.342274391398984e-04, 6.854486367551517e-04, 6.854486367551519e-04, 1.704905679296810e+02, 1.701931791325648e+02, 1.704788163066484e+02, 1.702162503212069e+02, 1.703387560272529e+02, 1.703387560272529e+02, 4.333078981554642e+01, 4.348464503543710e+01, 4.394792522707841e+01, 4.409021317935735e+01, 4.311099724788507e+01, 4.311099724788507e+01, 2.515429738926862e+00, 2.166787900179167e+00, 2.257814109429260e+00, 1.789905757824587e+00, 2.500659624672561e+00, 2.500659624672561e+00, 2.494375834465108e-01, 6.669181384266650e-01, 2.177790943926657e-01, 1.948933058530444e+01, 3.089235538582144e-01, 3.089235538582144e-01, 2.585311407027619e-04, 4.149767215605626e-04, 2.425898074776824e-04, 1.062329343645471e-01, 3.520671204320400e-04, 3.520671204320400e-04, 1.672210029263498e+00, 1.819746899605836e+00, 1.768529019955991e+00, 1.725556070047286e+00, 1.747098345057354e+00, 1.747098345057354e+00, 1.534873207962322e+00, 2.280034198576829e+00, 2.097759458805153e+00, 1.880791241493756e+00, 1.990474056186312e+00, 1.990474056186312e+00, 2.415509358911314e+00, 9.139912363166192e-01, 1.085840916420671e+00, 1.219225722306834e+00, 1.158294825668892e+00, 1.158294825668891e+00, 1.955603918534234e+00, 3.921191275940865e-02, 7.126096581344118e-02, 9.771889226689843e-01, 1.615059674145048e-01, 1.615059674145048e-01, 2.588783770411569e-03, 2.966039953273804e-05, 1.306676087141027e-04, 1.450055281973193e-01, 3.014472744885841e-04, 3.014472744885835e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_pbe2_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_pbe2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([2.585695257881423e+03, 2.585727352225891e+03, 2.585846140686713e+03, 2.585369155851717e+03, 2.585622472918783e+03, 2.585622472918783e+03, 6.334603376144715e+01, 6.334953932434643e+01, 6.343387242134843e+01, 6.331153086865459e+01, 6.335329112837138e+01, 6.335329112837138e+01, 2.108439470195067e+00, 2.100435386435001e+00, 1.978523727458920e+00, 2.008643890159700e+00, 2.000109239827325e+00, 2.000109239827325e+00, 3.023489296665230e-01, 2.899708419335497e-01, 2.920316878580072e+00, 3.663714167372106e-01, 3.358255496680808e-01, 3.358255496680808e-01, 2.164252785664041e-03, 2.396686913929585e-03, 6.779557345217217e-02, 7.233014921357266e-04, 1.141260007129460e-03, 1.141260007129460e-03, 1.643451322580778e+02, 1.646581596387688e+02, 1.643585583640041e+02, 1.646349038952751e+02, 1.645042376518884e+02, 1.645042376518884e+02, 1.797321906827287e+01, 1.816572540502758e+01, 1.797646204121105e+01, 1.812610912167956e+01, 1.810091056641782e+01, 1.810091056641782e+01, 1.871844236805413e+00, 2.766727304649448e+00, 1.550864286333942e+00, 2.092356822434960e+00, 1.985822829770623e+00, 1.985822829770623e+00, 3.093883209065432e-01, 4.939274167214662e-01, 2.793121759952959e-01, 2.523746652331609e+01, 3.198144559109844e-01, 3.198144559109844e-01, 4.307180538226160e-04, 6.912207377070953e-04, 4.039676196776638e-04, 1.544024374747123e-01, 5.862774834747305e-04, 5.862774834747307e-04, 2.532179088567340e+00, 2.351312973662414e+00, 2.412716302864848e+00, 2.465308100964043e+00, 2.438804455013796e+00, 2.438804455013796e+00, 2.443001483197650e+00, 1.141057254479551e+00, 1.371477815814682e+00, 1.720560872686723e+00, 1.529916630564967e+00, 1.529916630564967e+00, 3.011664497404990e+00, 5.267332558950477e-01, 4.843640248162738e-01, 5.595551080734308e-01, 4.626229662531219e-01, 4.626229662531215e-01, 9.634340924927778e-01, 6.271458815716789e-02, 1.098969485367148e-01, 5.467423944367391e-01, 2.110115433513138e-01, 2.110115433513140e-01, 4.300865020550257e-03, 4.942939299626568e-05, 2.177171487932042e-04, 1.952285910560196e-01, 5.019993024623757e-04, 5.019993024623749e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_pbe2_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_pbe2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([6.732971402803676e-06, 6.732945269300152e-06, 6.732763258082286e-06, 6.733153419850380e-06, 6.732958345388995e-06, 6.732958345388995e-06, 1.473658516784561e-03, 1.473710089585057e-03, 1.474793779263353e-03, 1.472070698120954e-03, 1.473613779109321e-03, 1.473613779109321e-03, 1.796653976418590e-01, 1.795500883165714e-01, 1.743366028059159e-01, 1.710298506054305e-01, 1.725020831002689e-01, 1.725020831002689e-01, 4.581049902681999e+00, 4.649520971688468e+00, 1.173652410498698e-01, 4.546624560151907e+00, 4.895600348594589e+00, 4.895600348594587e+00, 5.720610828423937e-01, 6.361336615547930e-01, 1.965717797770207e+00, 3.001986715717843e-01, 4.792684039696522e-01, 4.792684039695396e-01, 4.846282490893030e-04, 4.847968822212258e-04, 4.846329534786777e-04, 4.847818730891837e-04, 4.847154565550685e-04, 4.847154565550685e-04, 6.285265172467272e-03, 6.212208361235306e-03, 6.239262323952737e-03, 6.176362804672991e-03, 6.265914792550864e-03, 6.265914792550864e-03, 3.157209153890527e-01, 2.815200927378780e-01, 3.887089815885157e-01, 3.979993709350473e-01, 3.066885075166875e-01, 3.066885075166875e-01, 3.582350509258014e+00, 2.803635243127375e+00, 3.647251569984917e+00, 1.033578166573904e-02, 5.062544398411958e+00, 5.062544398411958e+00, 3.051894780960955e-01, 3.453925100756083e-01, 1.658637470762917e+00, 3.602299742918679e+00, 9.298508057409829e-01, 9.298508057403013e-01, 3.680199601243015e-01, 3.628078678073753e-01, 3.646313123167756e-01, 3.661568702308456e-01, 3.653944925552828e-01, 3.653944925552828e-01, 4.034074160069445e-01, 4.585054497393667e-01, 4.463626544019080e-01, 4.319823433157832e-01, 4.401830384229009e-01, 4.401830384229009e-01, 2.431045587386830e-01, 2.101491304558825e+00, 1.746298926542647e+00, 1.236222418136121e+00, 1.521114678146945e+00, 1.521114678146945e+00, 5.826019603901185e-01, 1.715800108864304e+00, 2.333309249073260e+00, 1.532708238224129e+00, 5.084763226267397e+00, 5.084763226267387e+00, 6.507176613313245e-01, 4.530645215491895e-01, 4.602628519162871e-01, 4.827847955462357e+00, 1.086763651337889e+00, 1.086763651337190e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
