
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_lc94_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_lc94", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.193854957217818e+03, 2.193863874719252e+03, 2.193912621574505e+03, 2.193779759849820e+03, 2.193848082433703e+03, 2.193848082433703e+03, 5.925317467422095e+01, 5.925264145231019e+01, 5.924321858335057e+01, 5.928211098781964e+01, 5.925540172556106e+01, 5.925540172556106e+01, 2.296698836016790e+00, 2.294323544997902e+00, 2.243604472490792e+00, 2.277300336893577e+00, 2.279650568453627e+00, 2.279650568453627e+00, 1.890174565319628e-01, 1.921920193385464e-01, 3.094268119110894e+00, 1.304539122928726e-01, 1.834321162503941e-01, 1.834321162503940e-01, 2.768894154602028e-04, 3.445796516528286e-04, 2.264246971453409e-02, 3.080659241211189e-05, 1.369323840394278e-04, 1.369323840394280e-04, 1.284986747387454e+02, 1.285051447745616e+02, 1.284993434026195e+02, 1.285050494081239e+02, 1.285017529224033e+02, 1.285017529224033e+02, 2.034729658021691e+01, 2.058681506808837e+01, 2.026103415406756e+01, 2.047192307851514e+01, 2.052201467475342e+01, 2.052201467475342e+01, 1.671167287568138e+00, 1.881233977391199e+00, 1.444641363684695e+00, 1.487340574605304e+00, 1.719961644136708e+00, 1.719961644136708e+00, 8.222524093208974e-02, 2.108874222266882e-01, 7.354279105115888e-02, 1.704411210700132e+01, 9.632402210419561e-02, 9.632402210419561e-02, 1.259218401467095e-05, 3.047409692223907e-05, 2.625539259568941e-05, 4.176209413958765e-02, 4.795419934844699e-05, 4.795419934844701e-05, 1.587739979628791e+00, 1.589663631877021e+00, 1.589203332982994e+00, 1.588649132488840e+00, 1.588942587999656e+00, 1.588942587999656e+00, 1.496665485925866e+00, 1.234200466992678e+00, 1.307974920386656e+00, 1.381634269182779e+00, 1.343383448783158e+00, 1.343383448783158e+00, 2.071613827716823e+00, 3.073272079414139e-01, 4.070460682850701e-01, 6.247034690504807e-01, 5.006833340801264e-01, 5.006833340801264e-01, 1.048764580618726e+00, 2.151000563113688e-02, 3.290090876969286e-02, 5.629369466256068e-01, 5.534305534369455e-02, 5.534305534369456e-02, 8.815046792403680e-04, 3.496616462310648e-07, 4.741680276350924e-06, 5.103236204815114e-02, 3.629767286595873e-05, 3.629767286595865e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_lc94_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_lc94", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.358212797636596e+03, 3.358204317273221e+03, 3.358236608083539e+03, 3.358221613502030e+03, 3.358314241652519e+03, 3.358332448361652e+03, 3.358045308777316e+03, 3.357989682824782e+03, 3.358226925019503e+03, 3.358127766889098e+03, 3.358226925019503e+03, 3.358127766889098e+03, 8.845023855605022e+01, 8.845022826926113e+01, 8.845109253749570e+01, 8.845089287746954e+01, 8.846990540548464e+01, 8.847587161872914e+01, 8.846586181324341e+01, 8.847098699417226e+01, 8.841971356759900e+01, 8.849109570392643e+01, 8.841971356759900e+01, 8.849109570392643e+01, 3.237614147338448e+00, 3.267478068104311e+00, 3.226164522498305e+00, 3.262716674640198e+00, 3.076816604985235e+00, 3.029030250617952e+00, 3.097138347666458e+00, 3.112465511716007e+00, 3.324270294243808e+00, 2.863887208632179e+00, 3.324270294243808e+00, 2.863887208632179e+00, 2.041898699267838e-01, 2.202279396597633e-01, 2.091512160198225e-01, 2.280344618635085e-01, 4.275209843416041e+00, 4.590856884943056e+00, 1.238292355348218e-01, 1.271180650293584e-01, 2.225747373663395e-01, 7.033847451175970e-02, 2.225747373663393e-01, 7.033847451175966e-02, 9.863072657556504e-04, 1.217950484853624e-03, 1.187268966169224e-03, 1.502095559135912e-03, 2.000995055807581e-02, 2.071551222216922e-02, 1.375431741472890e-04, 1.270486821673399e-04, 6.504650617556534e-04, 1.155088692869255e-04, 6.504650617556542e-04, 1.155088692869256e-04, 2.006645426612042e+02, 2.005673920569031e+02, 2.007648662929703e+02, 2.006642790292100e+02, 2.006704026959692e+02, 2.005709265414519e+02, 2.007564822537998e+02, 2.006589407640820e+02, 2.007156999418877e+02, 2.006160107762042e+02, 2.007156999418877e+02, 2.006160107762042e+02, 2.745093541248376e+01, 2.744812214201344e+01, 2.787153090820891e+01, 2.785601095883411e+01, 2.707556177795401e+01, 2.718011083212591e+01, 2.743606735708277e+01, 2.754591346020726e+01, 2.797057412589063e+01, 2.770076724835114e+01, 2.797057412589063e+01, 2.770076724835114e+01, 2.532182415881943e+00, 2.518934200768448e+00, 3.034731591521743e+00, 3.038292943077573e+00, 2.076012916841970e+00, 2.235682222387881e+00, 2.295115000911593e+00, 2.449380466663096e+00, 2.746199699050735e+00, 2.477167817015213e+00, 2.746199699050735e+00, 2.477167817015214e+00, 6.688601042885234e-02, 6.776337338529821e-02, 2.141097347503507e-01, 2.161723255211062e-01, 5.656660073349818e-02, 6.147645654649232e-02, 2.756855584284136e+01, 2.754417160196143e+01, 8.239038751841968e-02, 8.968334471731525e-02, 8.239038751841968e-02, 8.968334471731525e-02, 5.211333425960949e-05, 5.654952737247996e-05, 1.295257616301750e-04, 1.322128807213603e-04, 9.529466486577965e-05, 1.248774970678525e-04, 3.167792826830881e-02, 3.214178348996004e-02, 7.421826941319627e-05, 2.509678387224481e-04, 7.421826941319623e-05, 2.509678387224482e-04, 2.603802028190575e+00, 2.624236244592766e+00, 2.559167951477236e+00, 2.579633710678225e+00, 2.574721374998415e+00, 2.595276226722679e+00, 2.587784635419481e+00, 2.608130890696702e+00, 2.581247641554785e+00, 2.601695182509114e+00, 2.581247641554785e+00, 2.601695182509114e+00, 2.471287138956881e+00, 2.487705784160483e+00, 1.746139023834923e+00, 1.761857462551239e+00, 1.932970254425159e+00, 1.950932593615021e+00, 2.135640301574132e+00, 2.151001655245879e+00, 2.031089984123243e+00, 2.046527116437575e+00, 2.031089984123243e+00, 2.046527116437575e+00, 3.328341866540435e+00, 3.340540288017969e+00, 3.381720598128271e-01, 3.420471781091199e-01, 4.855416792407627e-01, 4.954876702847461e-01, 8.661700721684286e-01, 8.760081046759512e-01, 6.518714790769436e-01, 6.515215472109847e-01, 6.518714790769434e-01, 6.515215472109845e-01, 1.475056748690398e+00, 1.496335555291517e+00, 2.040042118267172e-02, 2.047478732246216e-02, 2.574456935875706e-02, 2.644446931373063e-02, 8.032884067420831e-01, 8.284993893123832e-01, 4.269064937806143e-02, 4.541111978171562e-02, 4.269064937806140e-02, 4.541111978171566e-02, 3.014306884605465e-03, 3.371022797289936e-03, 1.295615409688163e-06, 1.742865852527643e-06, 1.750692741669809e-05, 2.309639777764406e-05, 3.951721369220040e-02, 4.057809688585644e-02, 8.479596284500193e-05, 1.831811239702153e-04, 8.479596284500166e-05, 1.831811239702150e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_lc94_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_lc94", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.510069788339198e-06, 0.000000000000000e+00, 1.510076322794175e-06, 1.510063937937986e-06, 0.000000000000000e+00, 1.510072067506342e-06, 1.510030584571692e-06, 0.000000000000000e+00, 1.510028372832040e-06, 1.510097031418632e-06, 0.000000000000000e+00, 1.510112947697804e-06, 1.510067038173142e-06, 0.000000000000000e+00, 1.510068371200535e-06, 1.510067038173142e-06, 0.000000000000000e+00, 1.510068371200535e-06, 3.297976613006790e-04, 0.000000000000000e+00, 3.298950528336856e-04, 3.298050706435652e-04, 0.000000000000000e+00, 3.299097243868188e-04, 3.300582876697236e-04, 0.000000000000000e+00, 3.301190045307841e-04, 3.294600901224447e-04, 0.000000000000000e+00, 3.295383470470236e-04, 3.299300846189093e-04, 0.000000000000000e+00, 3.297414041116882e-04, 3.299300846189093e-04, 0.000000000000000e+00, 3.297414041116882e-04, 4.100370752083356e-02, 0.000000000000000e+00, 4.105759720481440e-02, 4.101095078396511e-02, 0.000000000000000e+00, 4.107532307966702e-02, 4.118608859565458e-02, 0.000000000000000e+00, 4.113774518416903e-02, 4.029179360225735e-02, 0.000000000000000e+00, 4.032175128870291e-02, 4.093068296811419e-02, 0.000000000000000e+00, 3.984406190342623e-02, 4.093068296811419e-02, 0.000000000000000e+00, 3.984406190342623e-02, 1.575442885104387e+00, 0.000000000000000e+00, 1.464308115494843e+00, 1.555900815122754e+00, 0.000000000000000e+00, 1.429493671124541e+00, 2.723855938072074e-02, 0.000000000000000e+00, 2.596483538427617e-02, 2.534981674978751e+00, 0.000000000000000e+00, 2.453842370808585e+00, 1.399272409214641e+00, 0.000000000000000e+00, 4.724502771992862e+00, 1.399272409214640e+00, 0.000000000000000e+00, 4.724502771992863e+00, -1.892180896017103e+02, 0.000000000000000e+00, -1.919337256707435e+02, -2.012229184227666e+02, 0.000000000000000e+00, -2.038002968980507e+02, 2.105723144770300e+01, 0.000000000000000e+00, 2.038869821660705e+01, -1.207970372536163e+02, 0.000000000000000e+00, -1.158174549842600e+02, -1.781483441615758e+02, 0.000000000000000e+00, -2.793399491555545e+02, -1.781483441615762e+02, 0.000000000000000e+00, -2.793399491555551e+02, 1.095735169324289e-04, 0.000000000000000e+00, 1.096470121875734e-04, 1.096423430656848e-04, 0.000000000000000e+00, 1.097135821243286e-04, 1.095764301789011e-04, 0.000000000000000e+00, 1.096486489511467e-04, 1.096354928707382e-04, 0.000000000000000e+00, 1.097091296638942e-04, 1.096094408106693e-04, 0.000000000000000e+00, 1.096805373627388e-04, 1.096094408106693e-04, 0.000000000000000e+00, 1.096805373627388e-04, 1.497531731618109e-03, 0.000000000000000e+00, 1.497732176805955e-03, 1.474551879848579e-03, 0.000000000000000e+00, 1.475527346283698e-03, 1.499254148914707e-03, 0.000000000000000e+00, 1.499203638908676e-03, 1.479426113320052e-03, 0.000000000000000e+00, 1.478897510091584e-03, 1.482880512486991e-03, 0.000000000000000e+00, 1.485907374464056e-03, 1.482880512486991e-03, 0.000000000000000e+00, 1.485907374464056e-03, 7.036135007836845e-02, 0.000000000000000e+00, 7.096023718062007e-02, 6.585713127781409e-02, 0.000000000000000e+00, 6.595999276647944e-02, 9.112661565135850e-02, 0.000000000000000e+00, 8.322916232321384e-02, 9.674243157501626e-02, 0.000000000000000e+00, 8.742386804795135e-02, 6.408824967543202e-02, 0.000000000000000e+00, 7.411777245781395e-02, 6.408824967543204e-02, 0.000000000000000e+00, 7.411777245781395e-02, 4.720551082586202e+00, 0.000000000000000e+00, 4.672948896729294e+00, 1.244456565384105e+00, 0.000000000000000e+00, 1.231109438107068e+00, 5.799108517415894e+00, 0.000000000000000e+00, 5.266524532562790e+00, 2.424866662771673e-03, 0.000000000000000e+00, 2.428519743918992e-03, 3.901014905678873e+00, 0.000000000000000e+00, 3.783119643596198e+00, 3.901014905678873e+00, 0.000000000000000e+00, 3.783119643596198e+00, -1.289560108640588e+02, 0.000000000000000e+00, -1.159843857420230e+02, -1.403718608114319e+02, 0.000000000000000e+00, -1.316291126071209e+02, -5.864296970047640e+02, 0.000000000000000e+00, -6.794367529074145e+02, 1.212602704287074e+01, 0.000000000000000e+00, 1.185109074228449e+01, -3.039520620549327e+02, 0.000000000000000e+00, -3.875039430208731e+02, -3.039520620549320e+02, 0.000000000000000e+00, -3.875039430208732e+02, 9.327123910271191e-02, 0.000000000000000e+00, 9.247323074226563e-02, 8.556051777301950e-02, 0.000000000000000e+00, 8.472975390530660e-02, 8.715072548209851e-02, 0.000000000000000e+00, 8.632987663332829e-02, 8.911050733690959e-02, 0.000000000000000e+00, 8.827849639516124e-02, 8.802220586609180e-02, 0.000000000000000e+00, 8.719494019404511e-02, 8.802220586609180e-02, 0.000000000000000e+00, 8.719494019404511e-02, 1.049746946401413e-01, 0.000000000000000e+00, 1.039197261633091e-01, 1.049895013204041e-01, 0.000000000000000e+00, 1.039734466183426e-01, 1.004541436031692e-01, 0.000000000000000e+00, 9.949637704353159e-02, 9.781279919768564e-02, 0.000000000000000e+00, 9.692078564066783e-02, 9.903833527459892e-02, 0.000000000000000e+00, 9.808437775379465e-02, 9.903833527459892e-02, 0.000000000000000e+00, 9.808437775379465e-02, 5.668004811183379e-02, 0.000000000000000e+00, 5.664522634770703e-02, 7.300547313610757e-01, 0.000000000000000e+00, 7.214893366815298e-01, 4.993469123952273e-01, 0.000000000000000e+00, 4.905939897908646e-01, 2.874730795886762e-01, 0.000000000000000e+00, 2.835778291828530e-01, 3.780952740436472e-01, 0.000000000000000e+00, 3.794755000149018e-01, 3.780952740436476e-01, 0.000000000000000e+00, 3.794755000149018e-01, 1.339805865705481e-01, 0.000000000000000e+00, 1.320664492040511e-01, 2.005922730686497e+01, 0.000000000000000e+00, 2.002526070012689e+01, 1.534765628121558e+01, 0.000000000000000e+00, 1.485088887361067e+01, 3.518278412351273e-01, 0.000000000000000e+00, 3.395875028192994e-01, 8.543207891424215e+00, 0.000000000000000e+00, 8.234938737868013e+00, 8.543207891424219e+00, 0.000000000000000e+00, 8.234938737868022e+00, -1.633914700080161e+02, 0.000000000000000e+00, -1.631933262097652e+02, -1.372810650299858e+02, 0.000000000000000e+00, -2.441126180735015e+02, -1.727969126797371e+02, 0.000000000000000e+00, -1.953858718166577e+02, 9.512758317063332e+00, 0.000000000000000e+00, 9.196390340410748e+00, -5.842216079857226e+02, 0.000000000000000e+00, -3.761873289759169e+02, -5.842216079857226e+02, 0.000000000000000e+00, -3.761873289759179e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
