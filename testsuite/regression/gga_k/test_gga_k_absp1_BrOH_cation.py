
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_absp1_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_absp1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [1.055147808275847e+02, 1.054869456423771e+02, 1.054089758158347e+02, 1.058221694512492e+02, 1.055991552722190e+02, 1.055991552722190e+02, 1.251848878139864e+01, 1.251137553656543e+01, 1.234763077163423e+01, 1.263721648714250e+01, 1.251056444584544e+01, 1.251056444584544e+01, 1.355144566485843e+00, 1.379418841360992e+00, 2.045466977140194e+00, 2.039435798784126e+00, 2.088728573252878e+00, 2.088728573252878e+00, 5.572169026202091e-01, 5.320741050593434e-01, 1.520337110880562e+00, 7.338799932343180e-01, 6.240040703615566e-01, 6.240040703615568e-01, 7.295381786433399e-01, 7.096272702752995e-01, 9.159056882322936e-01, 7.660866681257040e-01, 6.862676711316887e-01, 6.862676711316879e-01, -9.248713741842096e+00, -9.583557632796243e+00, -9.262579252277202e+00, -9.558209685967181e+00, -9.419338937778489e+00, -9.419338937778489e+00, 2.005088610463445e+01, 1.970804157367268e+01, 2.129371043346400e+01, 2.098858451745161e+01, 1.926753132721447e+01, 1.926753132721447e+01, 2.168894906031488e-01, -4.850356562443644e-01, 2.889747940103243e-01, -3.011615202059986e-01, 1.274600108715078e-01, 1.274600108715078e-01, 9.063792906542968e-01, 9.411030375325529e-01, 8.862987049314860e-01, -4.541384972551913e+00, 7.215267100052016e-01, 7.215267100052016e-01, 6.677733679397769e-01, 7.065114494829523e-01, 2.817563188489216e-01, 8.047482713365468e-01, 4.137715232210545e-01, 4.137715232210551e-01, -5.694012414624713e-01, -4.214433528116073e-01, -4.734107540985049e-01, -5.164782934734189e-01, -4.949397086756068e-01, -4.949397086756068e-01, -5.787803210005584e-01, 6.949533721854420e-01, 3.239441942957365e-01, -4.699374801074954e-02, 1.375083554460897e-01, 1.375083554460897e-01, -5.035084213016209e-01, 9.748354351049725e-01, 8.542447289370689e-01, 4.441456911672202e-01, 6.545147298050705e-01, 6.545147298050706e-01, 6.158739648804743e-01, 9.635307495190509e-01, 9.383132768731310e-01, 2.335602663271930e-01, 7.059131682773847e-01, 7.059131682773846e-01, 8.119001928422080e-01, 3.205927408686283e-01, 4.583276809746432e-01, 7.169967037198766e-01, 3.710359930814932e-01, 3.710359930814927e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_absp1_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_absp1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.377844534563791e+03, -2.377835783033162e+03, -2.377826960695389e+03, -2.377823035476393e+03, -2.377817820350087e+03, -2.377796756006005e+03, -2.378015088863221e+03, -2.378048574052156e+03, -2.377831675653954e+03, -2.377982545982585e+03, -2.377831675653954e+03, -2.377982545982585e+03, -7.277403702118143e+01, -7.272640979260677e+01, -7.276877519321742e+01, -7.271796494430002e+01, -7.260908297593799e+01, -7.256809386449153e+01, -7.290958851971529e+01, -7.286134995364071e+01, -7.276769378337654e+01, -7.272338259559621e+01, -7.276769378337654e+01, -7.272338259559621e+01, -3.641630895963125e+00, -3.550875481236287e+00, -3.671573605956638e+00, -3.559924060158692e+00, -4.080159031551509e+00, -4.250124813522886e+00, -4.222305426520501e+00, -4.164749280999953e+00, -3.430211539843106e+00, -5.240102667957827e+00, -3.430211539843106e+00, -5.240102667957827e+00, -7.128547276721652e-01, -7.015684115207566e-01, -6.921199214305768e-01, -6.813709704134481e-01, -4.722072805191445e+00, -4.434659548231432e+00, -8.157838361371511e-01, -8.240619989078826e-01, -7.582880251665787e-01, -8.137561220104086e-01, -7.582880251665790e-01, -8.137561220104078e-01, -7.277722996120353e-01, -7.313433684752599e-01, -7.088988997026390e-01, -7.105856157749936e-01, -9.251760788378202e-01, -9.193645649030330e-01, -7.610008751362290e-01, -7.715593461325355e-01, -7.285534639020547e-01, -4.575817715689161e-01, -7.285534639020533e-01, -4.575817715689154e-01, -1.257928393044954e+02, -1.257462746956518e+02, -1.255026728446026e+02, -1.254659171041063e+02, -1.257784460562189e+02, -1.257378777769771e+02, -1.255294336707298e+02, -1.254831605971877e+02, -1.256427746118948e+02, -1.256051528628330e+02, -1.256427746118948e+02, -1.256051528628330e+02, -3.912818714763047e+01, -3.912595955512161e+01, -3.906505857349133e+01, -3.905888383468604e+01, -4.035585409823412e+01, -3.998206046937023e+01, -4.028658448531899e+01, -3.992918876314450e+01, -3.823261030018455e+01, -3.896352337833036e+01, -3.823261030018455e+01, -3.896352337833036e+01, -1.937805684587974e+00, -1.925110417502510e+00, -1.541786240094385e+00, -1.535106213952504e+00, -1.732762145360061e+00, -1.783222346973171e+00, -1.238833331278441e+00, -1.331132756055057e+00, -1.976313053308159e+00, -1.818687048695968e+00, -1.976313053308159e+00, -1.818687048695968e+00, -9.544654792950960e-01, -9.415002443572632e-01, -1.090271902483411e+00, -1.091642636065639e+00, -9.225379481181657e-01, -9.214356501702553e-01, -1.382031166717630e+01, -1.380411449063930e+01, -8.457806333476723e-01, -7.226862956753131e-01, -8.457806333476723e-01, -7.226862956753131e-01, -6.423742172973338e-01, -6.904706485374177e-01, -6.921577709322526e-01, -7.203455476480849e-01, -2.899726815985703e-01, -2.749012375108546e-01, -8.128870681160194e-01, -8.286059571103952e-01, -4.112616938064437e-01, -4.148158639683792e-01, -4.112616938064443e-01, -4.148158639683798e-01, -1.158588011497214e+00, -1.165174539925105e+00, -1.287193765651964e+00, -1.292879983285043e+00, -1.242167997867738e+00, -1.247883181514223e+00, -1.204425448759835e+00, -1.210965362813822e+00, -1.223287460141722e+00, -1.229434388021736e+00, -1.223287460141722e+00, -1.229434388021736e+00, -1.056570552948397e+00, -1.063248012967490e+00, -1.902059284931548e+00, -1.902985418225847e+00, -1.648369792043127e+00, -1.647835736206177e+00, -1.395373737430253e+00, -1.400775558859383e+00, -1.517168374527451e+00, -1.523133397452605e+00, -1.517168374527451e+00, -1.523133397452605e+00, -1.724542212809033e+00, -1.716392512379794e+00, -1.214452698862619e+00, -1.213663877154365e+00, -1.204566623648838e+00, -1.194176415773742e+00, -1.044114374694472e+00, -1.048036541799023e+00, -1.113629809812328e+00, -1.105833811488183e+00, -1.113629809812328e+00, -1.105833811488183e+00, -1.640965119526112e+00, -1.637912304941701e+00, -9.696025837457556e-01, -9.686548039729146e-01, -9.559894017368515e-01, -9.421392882865601e-01, -7.906150994026589e-01, -7.954739027493714e-01, -7.752584826914216e-01, -6.953717988312718e-01, -7.752584826914213e-01, -6.953717988312720e-01, -8.167549756621078e-01, -8.082230910313837e-01, -3.662929090280415e-01, -2.752127173277468e-01, -4.661946248597081e-01, -4.518223580093288e-01, -7.371418546680474e-01, -7.426816870221732e-01, -2.863884030168520e-01, -4.071706048070358e-01, -2.863884030168516e-01, -4.071706048070354e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_absp1_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_absp1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.293109184051877e-05, 0.000000000000000e+00, 1.293114179513549e-05, 1.293096651097146e-05, 0.000000000000000e+00, 1.293105074677587e-05, 1.293054083471756e-05, 0.000000000000000e+00, 1.293044770940055e-05, 1.293195688134498e-05, 0.000000000000000e+00, 1.293225240321300e-05, 1.293101834015489e-05, 0.000000000000000e+00, 1.293151277752772e-05, 1.293101834015489e-05, 0.000000000000000e+00, 1.293151277752772e-05, 2.996366023714674e-03, 0.000000000000000e+00, 2.996488674912871e-03, 2.996337920348051e-03, 0.000000000000000e+00, 2.996477974254268e-03, 2.995831833038986e-03, 0.000000000000000e+00, 2.995646812433001e-03, 2.995258276008431e-03, 0.000000000000000e+00, 2.995132169597408e-03, 2.997869647877723e-03, 0.000000000000000e+00, 2.994507043947534e-03, 2.997869647877723e-03, 0.000000000000000e+00, 2.994507043947534e-03, 4.200715030699055e-01, 0.000000000000000e+00, 4.151155631692661e-01, 4.220388987872136e-01, 0.000000000000000e+00, 4.159317269801374e-01, 4.495394155411678e-01, 0.000000000000000e+00, 4.589594270924217e-01, 4.445183114860597e-01, 0.000000000000000e+00, 4.416418299177148e-01, 4.057091912691514e-01, 0.000000000000000e+00, 4.937250273428979e-01, 4.057091912691514e-01, 0.000000000000000e+00, 4.937250273428979e-01, 2.572670895608398e+01, 0.000000000000000e+00, 2.294376358600035e+01, 2.479864693157502e+01, 0.000000000000000e+00, 2.177059790083632e+01, 2.771148678928619e-01, 0.000000000000000e+00, 2.509464054984751e-01, 5.659768155776936e+01, 0.000000000000000e+00, 5.431767266435860e+01, 2.259749942680681e+01, 0.000000000000000e+00, 1.463508641615167e+02, 2.259749942680681e+01, 0.000000000000000e+00, 1.463508641615166e+02, 6.324503014234192e+05, 0.000000000000000e+00, 5.271019733892687e+05, 5.496562727421005e+05, 0.000000000000000e+00, 4.471116735888455e+05, 3.197159921025622e+03, 0.000000000000000e+00, 2.714904401504723e+03, 2.911560192811907e+06, 0.000000000000000e+00, 3.062094217456303e+06, 8.908246190359765e+05, 0.000000000000000e+00, 4.834051151218385e+06, 8.908246190359765e+05, 0.000000000000000e+00, 4.834051151218379e+06, 8.924768742371638e-04, 0.000000000000000e+00, 8.931185292667896e-04, 8.919770600555195e-04, 0.000000000000000e+00, 8.926352803062284e-04, 8.924464270475136e-04, 0.000000000000000e+00, 8.931000056290367e-04, 8.920175841013226e-04, 0.000000000000000e+00, 8.926610178974752e-04, 8.922228825623769e-04, 0.000000000000000e+00, 8.928761159884677e-04, 8.922228825623769e-04, 0.000000000000000e+00, 8.928761159884677e-04, 1.681014771245246e-02, 0.000000000000000e+00, 1.681269628863544e-02, 1.644412702125274e-02, 0.000000000000000e+00, 1.645755969611644e-02, 1.712573498435997e-02, 0.000000000000000e+00, 1.703717992720586e-02, 1.680069107032818e-02, 0.000000000000000e+00, 1.671020204194981e-02, 1.637657215386190e-02, 0.000000000000000e+00, 1.659362732978037e-02, 1.637657215386190e-02, 0.000000000000000e+00, 1.659362732978037e-02, 6.214155513929877e-01, 0.000000000000000e+00, 6.263773909722783e-01, 4.869557603842461e-01, 0.000000000000000e+00, 4.862931574736049e-01, 8.325516992461210e-01, 0.000000000000000e+00, 7.470881093773013e-01, 7.371961063213970e-01, 0.000000000000000e+00, 6.683382188279615e-01, 5.523843371812366e-01, 0.000000000000000e+00, 6.439399747262756e-01, 5.523843371812368e-01, 0.000000000000000e+00, 6.439399747262758e-01, 1.680322502110340e+02, 0.000000000000000e+00, 1.633153648043942e+02, 2.432715455530025e+01, 0.000000000000000e+00, 2.396654094362242e+01, 2.269837421716149e+02, 0.000000000000000e+00, 1.940019561885622e+02, 1.780193950795826e-02, 0.000000000000000e+00, 1.782595457225113e-02, 1.121634537776805e+02, 0.000000000000000e+00, 9.435182145012413e+01, 1.121634537776805e+02, 0.000000000000000e+00, 9.435182145012413e+01, 6.896246147170695e+06, 0.000000000000000e+00, 6.144157416218541e+06, 3.268601510341825e+06, 0.000000000000000e+00, 3.124571891844912e+06, 7.817219853849012e+06, 0.000000000000000e+00, 6.581441351138420e+06, 6.939684423521389e+02, 0.000000000000000e+00, 6.813232572463984e+02, 7.337213909483019e+06, 0.000000000000000e+00, 2.832798288875730e+06, 7.337213909483017e+06, 0.000000000000000e+00, 2.832798288875732e+06, 6.184655642516127e-01, 0.000000000000000e+00, 6.113483131048588e-01, 6.292686936810393e-01, 0.000000000000000e+00, 6.219547129496448e-01, 6.254503941826527e-01, 0.000000000000000e+00, 6.181833347862691e-01, 6.222962328002316e-01, 0.000000000000000e+00, 6.151314409845747e-01, 6.238720007562847e-01, 0.000000000000000e+00, 6.166568959141232e-01, 6.238720007562847e-01, 0.000000000000000e+00, 6.166568959141232e-01, 6.710491118734169e-01, 0.000000000000000e+00, 6.644380041926748e-01, 1.062460454592638e+00, 0.000000000000000e+00, 1.048770501185330e+00, 9.254286161076486e-01, 0.000000000000000e+00, 9.132160890872123e-01, 8.105979508028869e-01, 0.000000000000000e+00, 8.021068030259340e-01, 8.663681416474144e-01, 0.000000000000000e+00, 8.567845172274138e-01, 8.663681416474144e-01, 0.000000000000000e+00, 8.567845172274138e-01, 4.233638525448552e-01, 0.000000000000000e+00, 4.213009399359828e-01, 1.207679180856774e+01, 0.000000000000000e+00, 1.186942020676453e+01, 7.016998509778441e+00, 0.000000000000000e+00, 6.810034028331159e+00, 3.024385837125076e+00, 0.000000000000000e+00, 2.974767882753505e+00, 4.558073793085399e+00, 0.000000000000000e+00, 4.562901000858759e+00, 4.558073793085403e+00, 0.000000000000000e+00, 4.562901000858760e+00, 1.366818081411902e+00, 0.000000000000000e+00, 1.338966339251527e+00, 3.383498365853440e+03, 0.000000000000000e+00, 3.314985802507890e+03, 1.390172763857115e+03, 0.000000000000000e+00, 1.259415447184266e+03, 3.424824182712280e+00, 0.000000000000000e+00, 3.274449679751296e+00, 3.625707363724646e+02, 0.000000000000000e+00, 3.079851680605962e+02, 3.625707363724646e+02, 0.000000000000000e+00, 3.079851680605963e+02, 2.160802635499018e+05, 0.000000000000000e+00, 1.941851121390783e+05, 1.678524443444068e+08, 0.000000000000000e+00, 1.667067706068541e+08, 1.992427887587956e+07, 0.000000000000000e+00, 1.656041588063657e+07, 4.122466915137551e+02, 0.000000000000000e+00, 3.926655637176916e+02, 8.633543549065115e+06, 0.000000000000000e+00, 3.678861720624852e+06, 8.633543549065135e+06, 0.000000000000000e+00, 3.678861720624864e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
