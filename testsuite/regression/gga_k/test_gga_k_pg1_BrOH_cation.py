
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_pg1_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_pg1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.524219485837532e+03, 2.524218059217619e+03, 2.524240938034583e+03, 2.524261571407577e+03, 2.524246602317606e+03, 2.524246602317606e+03, 7.243902866495088e+01, 7.243510286841425e+01, 7.234800632807941e+01, 7.252710932658997e+01, 7.243783012093336e+01, 7.243783012093336e+01, 3.264815295023058e+00, 3.276447858708545e+00, 3.637564581713534e+00, 3.667518560146888e+00, 3.759928540635816e+00, 3.759928540635816e+00, 6.225804855848707e-01, 6.013724403478937e-01, 4.229086442294744e+00, 7.664009247987111e-01, 6.848075636044115e-01, 6.848075636044116e-01, 7.296063820791847e-01, 7.097029264111008e-01, 9.182035408189109e-01, 7.661093209758524e-01, 6.863130425877250e-01, 6.863130425877240e-01, 1.417937490081861e+02, 1.416769884930694e+02, 1.417893607928034e+02, 1.416862618675434e+02, 1.417339650545320e+02, 1.417339650545320e+02, 3.398638579478771e+01, 3.399682337306626e+01, 3.474995206460456e+01, 3.474940771854509e+01, 3.363835420734080e+01, 3.363835420734080e+01, 1.981166663741299e+00, 1.958380513328329e+00, 1.758714064829928e+00, 1.573926178663612e+00, 1.997694276654960e+00, 1.997694276654961e+00, 9.219460407640289e-01, 9.989973612024052e-01, 8.996655507171081e-01, 1.769926926608499e+01, 7.430691189669481e-01, 7.430691189669481e-01, 6.677868736784518e-01, 7.065330968083176e-01, 2.817690239785998e-01, 8.107747108292321e-01, 4.137919033952244e-01, 4.137919033952249e-01, 1.608476253319565e+00, 1.651397954813724e+00, 1.635823053421012e+00, 1.623297276425349e+00, 1.629511093281012e+00, 1.629511093281012e+00, 1.505987937334892e+00, 1.735196024703050e+00, 1.621592754733423e+00, 1.544404725886863e+00, 1.576497675073685e+00, 1.576497675073685e+00, 2.165838319445480e+00, 1.076131155243873e+00, 1.031625196623709e+00, 9.329634251373767e-01, 9.506453837945585e-01, 9.506453837945584e-01, 1.489077518484205e+00, 9.656281610296017e-01, 9.422167704583725e-01, 7.454748466176836e-01, 7.157195868302026e-01, 7.157195868302026e-01, 8.120356333034537e-01, 3.205942872028503e-01, 4.583345262440654e-01, 7.256151228535147e-01, 3.710531393594771e-01, 3.710531393594766e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_pg1_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_pg1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [2.813902059027434e+03, 2.813897130147623e+03, 2.813949299316114e+03, 2.813931431615327e+03, 2.814065157228034e+03, 2.814107322403912e+03, 2.813532542769176e+03, 2.813428170122983e+03, 2.813932015322038e+03, 2.813673708340790e+03, 2.813932015322038e+03, 2.813673708340790e+03, 6.534546402490565e+01, 6.538978013499450e+01, 6.535164818909810e+01, 6.539863749246987e+01, 6.552844669201173e+01, 6.557547488657173e+01, 6.524267143970425e+01, 6.529536066024087e+01, 6.530543226713321e+01, 6.545406882158512e+01, 6.530543226713321e+01, 6.545406882158512e+01, 1.348380856379936e+00, 1.505966417022391e+00, 1.292958953068148e+00, 1.487320210319233e+00, 5.187385268467326e-01, 2.096262992688774e-01, 3.743306156076756e-01, 4.770328551288752e-01, 1.739485566147183e+00, -1.450041916898821e+00, 1.739485566147183e+00, -1.450041916898821e+00, -5.534491200373033e-01, -5.127010428043517e-01, -5.195539587069606e-01, -4.730217291574093e-01, 1.882118787964849e+00, 2.732839955552338e+00, -7.590849713991462e-01, -7.654288705314845e-01, -5.800678167031507e-01, -7.855688033162003e-01, -5.800678167031506e-01, -7.855688033161999e-01, -7.276661079812556e-01, -7.312234614032557e-01, -7.087822956171488e-01, -7.104518031099641e-01, -9.215708598242899e-01, -9.153441439120327e-01, -7.609625022872705e-01, -7.715222414380538e-01, -7.284689529322068e-01, -4.575544041568171e-01, -7.284689529322059e-01, -4.575544041568169e-01, 1.801161862206164e+02, 1.800193103596533e+02, 1.804439438643334e+02, 1.803359826307917e+02, 1.801336338878707e+02, 1.800296435913610e+02, 1.804149023439986e+02, 1.803173507249492e+02, 1.802848543810098e+02, 1.801786266085659e+02, 1.802848543810098e+02, 1.801786266085659e+02, 1.101500056422954e+00, 1.099052243763980e+00, 1.984032922713685e+00, 1.962633079460387e+00, -1.238752771427376e+00, -5.416702141466915e-01, -4.515750869280944e-01, 2.310268104957113e-01, 3.250864606149122e+00, 1.792245752220092e+00, 3.250864606149122e+00, 1.792245752220092e+00, 2.001593127063064e+00, 1.993331894100937e+00, 2.930880730710976e+00, 2.938242893730808e+00, 1.510579752805598e+00, 1.703256086374063e+00, 2.180505883779588e+00, 2.322290411921453e+00, 2.275625640508499e+00, 2.023281410130798e+00, 2.275625640508499e+00, 2.023281410130800e+00, -9.287700991336761e-01, -9.153121449456956e-01, -9.748954233940824e-01, -9.743501899769631e-01, -9.015108802842146e-01, -8.980881282012851e-01, 2.671028121259639e+01, 2.668845006517920e+01, -8.120730944760811e-01, -6.842607021854960e-01, -8.120730944760811e-01, -6.842607021854960e-01, -6.423526216584524e-01, -6.904473247180031e-01, -6.921222460013787e-01, -7.203089392370938e-01, -2.899528173103187e-01, -2.748789586037558e-01, -8.029051329422224e-01, -8.185008927589910e-01, -4.112409723422806e-01, -4.147767831071922e-01, -4.112409723422807e-01, -4.147767831071928e-01, 2.581195170187610e+00, 2.602300719689036e+00, 2.477561827014480e+00, 2.499462933812276e+00, 2.515611961410061e+00, 2.537434407283807e+00, 2.545995366303726e+00, 2.567137729999661e+00, 2.530969094471576e+00, 2.552431127972791e+00, 2.530969094471576e+00, 2.552431127972791e+00, 2.462782815981463e+00, 2.479229958666272e+00, 7.996167765670077e-01, 8.255043665465611e-01, 1.373131857962290e+00, 1.401085598427088e+00, 1.877619279724993e+00, 1.894431931077263e+00, 1.637245636010561e+00, 1.654371607136098e+00, 1.637245636010561e+00, 1.654371607136098e+00, 3.198502136543239e+00, 3.217173356822060e+00, -9.581245703222191e-01, -9.511152629699883e-01, -6.804251807520154e-01, -6.467289837082162e-01, 2.767855034902549e-01, 2.896203139731109e-01, -2.214818169039345e-01, -2.115309901407212e-01, -2.214818169039351e-01, -2.115309901407202e-01, 6.356669004244495e-01, 6.759974182698375e-01, -9.661309765582571e-01, -9.651355270281791e-01, -9.497079208522989e-01, -9.354302250961156e-01, 4.624345263907360e-01, 4.983368019913568e-01, -7.598705794987114e-01, -6.782154934961364e-01, -7.598705794987110e-01, -6.782154934961361e-01, -8.165376899553626e-01, -8.079897645996434e-01, -3.662903377081299e-01, -2.752101342405479e-01, -4.661839788673118e-01, -4.518103152206144e-01, -7.230163773412811e-01, -7.280904294318482e-01, -2.863698114852049e-01, -4.071377726877606e-01, -2.863698114852044e-01, -4.071377726877605e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_pg1_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_pg1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [7.054371372625399e-06, 0.000000000000000e+00, 7.054394145029591e-06, 7.054246847470459e-06, 0.000000000000000e+00, 7.054303713840101e-06, 7.053910083195885e-06, 0.000000000000000e+00, 7.053803909310312e-06, 7.055314863081598e-06, 0.000000000000000e+00, 7.055594947206802e-06, 7.054293992172520e-06, 0.000000000000000e+00, 7.054924275259306e-06, 7.054293992172520e-06, 0.000000000000000e+00, 7.054924275259306e-06, 1.772374149933128e-03, 0.000000000000000e+00, 1.771835107851673e-03, 1.772280944060591e-03, 0.000000000000000e+00, 1.771713266450701e-03, 1.769731101343888e-03, 0.000000000000000e+00, 1.769031652408248e-03, 1.773292386416579e-03, 0.000000000000000e+00, 1.772545268031533e-03, 1.773504757607207e-03, 0.000000000000000e+00, 1.770193222798064e-03, 1.773504757607207e-03, 0.000000000000000e+00, 1.770193222798064e-03, 2.902655383875091e-01, 0.000000000000000e+00, 2.822626709927148e-01, 2.932098289067593e-01, 0.000000000000000e+00, 2.833514480032248e-01, 3.341166515540419e-01, 0.000000000000000e+00, 3.491731071433877e-01, 3.342211011505357e-01, 0.000000000000000e+00, 3.294897802602955e-01, 2.691277148094714e-01, 0.000000000000000e+00, 4.139277515489421e-01, 2.691277148094714e-01, 0.000000000000000e+00, 4.139277515489421e-01, 2.484203996412552e+01, 0.000000000000000e+00, 2.189108232578430e+01, 2.378584787036292e+01, 0.000000000000000e+00, 2.056816896507631e+01, 1.898699346161571e-01, 0.000000000000000e+00, 1.611658526959028e-01, 5.650652594673197e+01, 0.000000000000000e+00, 5.422014307821667e+01, 2.175594365180793e+01, 0.000000000000000e+00, 1.463499638979958e+02, 2.175594365180792e+01, 0.000000000000000e+00, 1.463499638979957e+02, 6.324503014234192e+05, 0.000000000000000e+00, 5.271019733892687e+05, 5.496562727421005e+05, 0.000000000000000e+00, 4.471116735888456e+05, 3.197159921025621e+03, 0.000000000000000e+00, 2.714904401504723e+03, 2.911560192811907e+06, 0.000000000000000e+00, 3.062094217456302e+06, 8.908246190359766e+05, 0.000000000000000e+00, 4.834051151218384e+06, 8.908246190359766e+05, 0.000000000000000e+00, 4.834051151218380e+06, 4.549389418169848e-04, 0.000000000000000e+00, 4.552953017891242e-04, 4.539641896217861e-04, 0.000000000000000e+00, 4.543525667286743e-04, 4.548865722453992e-04, 0.000000000000000e+00, 4.552641880190146e-04, 4.540501309477847e-04, 0.000000000000000e+00, 4.544077207853727e-04, 4.544380150149755e-04, 0.000000000000000e+00, 4.548213495289701e-04, 4.544380150149755e-04, 0.000000000000000e+00, 4.548213495289701e-04, 1.287044571684105e-02, 0.000000000000000e+00, 1.287263211354045e-02, 1.250508143424806e-02, 0.000000000000000e+00, 1.251732196285714e-02, 1.334512785827684e-02, 0.000000000000000e+00, 1.320817920696135e-02, 1.301572566482581e-02, 0.000000000000000e+00, 1.287992203783746e-02, 1.232649684768203e-02, 0.000000000000000e+00, 1.263690113038390e-02, 1.232649684768203e-02, 0.000000000000000e+00, 1.263690113038390e-02, 3.536479621422626e-01, 0.000000000000000e+00, 3.562169049868864e-01, 2.200639684697091e-01, 0.000000000000000e+00, 2.190623274622219e-01, 4.961916009923600e-01, 0.000000000000000e+00, 4.347004265155275e-01, 3.450297522348413e-01, 0.000000000000000e+00, 3.140318695368022e-01, 3.040404541850612e-01, 0.000000000000000e+00, 3.583236364402912e-01, 3.040404541850613e-01, 0.000000000000000e+00, 3.583236364402911e-01, 1.680322158605210e+02, 0.000000000000000e+00, 1.633153102123828e+02, 2.414938798801924e+01, 0.000000000000000e+00, 2.378394263578814e+01, 2.269837392692700e+02, 0.000000000000000e+00, 1.940019409415512e+02, 7.982880798765017e-03, 0.000000000000000e+00, 7.992313558066642e-03, 1.121602293417518e+02, 0.000000000000000e+00, 9.431971470048308e+01, 1.121602293417518e+02, 0.000000000000000e+00, 9.431971470048308e+01, 6.896246147170695e+06, 0.000000000000000e+00, 6.144157416218540e+06, 3.268601510341824e+06, 0.000000000000000e+00, 3.124571891844912e+06, 7.817219853849012e+06, 0.000000000000000e+00, 6.581441351138420e+06, 6.939684423521372e+02, 0.000000000000000e+00, 6.813232572463970e+02, 7.337213909483019e+06, 0.000000000000000e+00, 2.832798288875731e+06, 7.337213909483018e+06, 0.000000000000000e+00, 2.832798288875731e+06, 2.586612193186653e-01, 0.000000000000000e+00, 2.553622435435128e-01, 2.827258951503815e-01, 0.000000000000000e+00, 2.788629858620720e-01, 2.742786764584391e-01, 0.000000000000000e+00, 2.705608289063094e-01, 2.672261066198759e-01, 0.000000000000000e+00, 2.637756563580822e-01, 2.707503831347211e-01, 0.000000000000000e+00, 2.671692574603389e-01, 2.707503831347211e-01, 0.000000000000000e+00, 2.671692574603389e-01, 2.741916159352460e-01, 0.000000000000000e+00, 2.714399665601246e-01, 7.232343183535050e-01, 0.000000000000000e+00, 7.110656797975570e-01, 5.577697533752485e-01, 0.000000000000000e+00, 5.476659116574694e-01, 4.229226282366457e-01, 0.000000000000000e+00, 4.177193984108229e-01, 4.866427208320467e-01, 0.000000000000000e+00, 4.803080272131836e-01, 4.866427208320467e-01, 0.000000000000000e+00, 4.803080272131836e-01, 1.935192228422428e-01, 0.000000000000000e+00, 1.916420182386817e-01, 1.169911726974871e+01, 0.000000000000000e+00, 1.148277052852945e+01, 6.395300937016922e+00, 0.000000000000000e+00, 6.165767205888813e+00, 2.156708134052510e+00, 0.000000000000000e+00, 2.114178926169731e+00, 3.734413742605450e+00, 0.000000000000000e+00, 3.729952578638162e+00, 3.734413742605454e+00, 0.000000000000000e+00, 3.729952578638163e+00, 9.396401278138774e-01, 0.000000000000000e+00, 9.135481822998291e-01, 3.383498365853439e+03, 0.000000000000000e+00, 3.314985802507890e+03, 1.390172763857115e+03, 0.000000000000000e+00, 1.259415447184266e+03, 2.220014654656246e+00, 0.000000000000000e+00, 2.096619267713835e+00, 3.625707360549033e+02, 0.000000000000000e+00, 3.079851524548108e+02, 3.625707360549033e+02, 0.000000000000000e+00, 3.079851524548109e+02, 2.160802635499018e+05, 0.000000000000000e+00, 1.941851121390783e+05, 1.678524443444068e+08, 0.000000000000000e+00, 1.667067706068541e+08, 1.992427887587956e+07, 0.000000000000000e+00, 1.656041588063657e+07, 4.122466913420585e+02, 0.000000000000000e+00, 3.926655634398717e+02, 8.633543549065117e+06, 0.000000000000000e+00, 3.678861720624852e+06, 8.633543549065135e+06, 0.000000000000000e+00, 3.678861720624863e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
