
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_lgap_ge_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_lgap_ge", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.196931231774760e+03, 2.196939760700933e+03, 2.196987436354292e+03, 2.196860343241398e+03, 2.196925548832926e+03, 2.196925548832926e+03, 5.951239257781140e+01, 5.951170244405675e+01, 5.949867844761443e+01, 5.954394640625814e+01, 5.951443434396764e+01, 5.951443434396764e+01, 2.332790713720339e+00, 2.331313780942276e+00, 2.309724155017705e+00, 2.342802358450822e+00, 2.331443947719785e+00, 2.331443947719785e+00, 2.229494809327626e-01, 2.233669135406599e-01, 3.128098043491764e+00, 1.951976194494889e-01, 1.981174441867682e-01, 1.981174441867682e-01, 6.725333130257990e-01, 6.180119554088408e-01, 2.520781891958003e-01, 1.186560204678308e+00, 8.077019212263262e-01, 8.077019212263249e-01, 1.285093775441977e+02, 1.285133111129316e+02, 1.285099401403274e+02, 1.285134066088446e+02, 1.285111567640100e+02, 1.285111567640100e+02, 2.102247873183429e+01, 2.124097395180049e+01, 2.100160296700529e+01, 2.119277203882821e+01, 2.115493078000765e+01, 2.115493078000765e+01, 1.675705695839062e+00, 1.880679296413471e+00, 1.448444827176480e+00, 1.484771191508804e+00, 1.717760440022683e+00, 1.717760440022683e+00, 1.976188059972201e-01, 2.838441109271326e-01, 1.918640384217364e-01, 1.703973872832844e+01, 1.703419571171690e-01, 1.703419571171690e-01, 1.235105374108582e+00, 1.075555473642593e+00, 3.599256680805862e-01, 1.793507301980474e-01, 5.300435396184514e-01, 5.300435396184524e-01, 1.588484161292929e+00, 1.589216936221734e+00, 1.589043128892611e+00, 1.588823796281893e+00, 1.588937634561510e+00, 1.588937634561510e+00, 1.497902044758151e+00, 1.252376499993861e+00, 1.314757550238985e+00, 1.382187126805680e+00, 1.346379843225598e+00, 1.346379843225598e+00, 2.070881496128863e+00, 3.696178149788125e-01, 4.502049570444102e-01, 6.375008099746966e-01, 5.261816463416482e-01, 5.261816463416481e-01, 1.065089396354705e+00, 2.750914148733530e-01, 2.296268150525446e-01, 5.682591534332700e-01, 1.521884197161529e-01, 1.521884197161529e-01, 5.824147776926674e-01, 1.167246193694453e+00, 9.800308860844867e-01, 1.548600223314975e-01, 4.800008958597858e-01, 4.800008958597854e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_lgap_ge_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_lgap_ge", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.326883048727862e+03, 3.326905518688493e+03, 3.327004864634557e+03, 3.326670567323705e+03, 3.326845809944584e+03, 3.326845809944584e+03, 8.681859516874147e+01, 8.681999606574976e+01, 8.685661403327106e+01, 8.682589433029413e+01, 8.682446059320584e+01, 8.682446059320584e+01, 3.097687130487755e+00, 3.086684913940569e+00, 2.808396830332945e+00, 2.861579505682044e+00, 2.855276233030781e+00, 2.855276233030781e+00, 1.224353873155734e-01, 1.345627392234286e-01, 4.261380269538659e+00, -2.177232516959752e-02, 4.021660426242695e-02, 4.021660426242684e-02, -1.460143962431895e+00, -1.335794853327644e+00, -4.279231698116547e-01, -2.654694763075445e+00, -1.783375812354214e+00, -1.783375812354210e+00, 1.997798335454456e+02, 1.998972533503599e+02, 1.997853083391056e+02, 1.998889680159068e+02, 1.998393270874851e+02, 1.998393270874851e+02, 2.502013631782199e+01, 2.548779160132940e+01, 2.451751101268926e+01, 2.492990706639334e+01, 2.552060379521114e+01, 2.552060379521114e+01, 2.491204108756493e+00, 3.038570904283193e+00, 2.118166564485587e+00, 2.372109512935943e+00, 2.585368425682167e+00, 2.585368425682167e+00, -1.682915254076939e-01, 4.108820418238284e-02, -1.803817417291554e-01, 2.757821387533279e+01, -7.429165500250723e-02, -7.429165500250723e-02, -2.782720103056245e+00, -2.404588040008968e+00, -7.978666618017265e-01, -2.368656040656748e-01, -1.175260909352710e+00, -1.175260909352712e+00, 2.618132960781528e+00, 2.571404109725112e+00, 2.587959444286734e+00, 2.601536880832440e+00, 2.594754549065096e+00, 2.594754549065096e+00, 2.482519332517334e+00, 1.674707903384564e+00, 1.901599247824711e+00, 2.131227961865487e+00, 2.014134667309455e+00, 2.014134667309455e+00, 3.335973025085047e+00, 1.792845191601247e-01, 3.664446914797400e-01, 8.196482197528167e-01, 5.677241802025597e-01, 5.677241802025595e-01, 1.415352553899308e+00, -4.764917540659612e-01, -3.557492917689721e-01, 7.891795511818901e-01, -1.508421154439666e-01, -1.508421154439666e-01, -1.236875369609165e+00, -2.676264495165086e+00, -2.218666649781198e+00, -1.668160543636208e-01, -1.065280685145264e+00, -1.065280685145264e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_lgap_ge_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_lgap_ge", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [8.473288099105525e-07, 8.473212435923973e-07, 8.472861841970514e-07, 8.473987896379688e-07, 8.473399859410910e-07, 8.473399859410910e-07, 1.979503337863902e-04, 1.979477862938587e-04, 1.978744024913364e-04, 1.978892918551094e-04, 1.979329650470858e-04, 1.979329650470858e-04, 2.818811012526526e-02, 2.829977329769714e-02, 3.122901114848965e-02, 3.043680425208981e-02, 3.058111805427710e-02, 3.058111805427710e-02, 1.847624116076797e+00, 1.751895759167070e+00, 1.767775015406898e-02, 4.709051827174865e+00, 3.149144505639814e+00, 3.149144505639816e+00, 3.813899532811226e+05, 3.082118667351842e+05, 5.085066959068429e+02, 3.384246953749782e+06, 1.299297170568445e+06, 1.299297170568444e+06, 5.825961083889047e-05, 5.822427715570080e-05, 5.825787576293164e-05, 5.822668223209180e-05, 5.824173868272365e-05, 5.824173868272365e-05, 1.160693856595378e-03, 1.134013651053143e-03, 1.183636200295151e-03, 1.159388315375885e-03, 1.135148048412973e-03, 1.135148048412973e-03, 4.103945934388874e-02, 3.196389497029214e-02, 5.199542289774224e-02, 4.579892535761545e-02, 3.901393571575235e-02, 3.901393571575235e-02, 1.676473987561614e+01, 1.961016406487548e+00, 2.180665395784184e+01, 1.171786452881099e-03, 9.296601141899153e+00, 9.296601141899153e+00, 8.837696751642069e+06, 3.560703338665649e+06, 6.648049626166956e+06, 8.520281263958447e+01, 3.820478555121216e+06, 3.820478555121218e+06, 4.237184987471929e-02, 4.114108742846198e-02, 4.120998371014795e-02, 4.146745624807405e-02, 4.130725953666110e-02, 4.130725953666110e-02, 4.900324663203217e-02, 7.114444094445674e-02, 6.085072892457996e-02, 5.267072423845368e-02, 5.659623026339992e-02, 5.659623026339992e-02, 2.768494173475212e-02, 9.209608294406620e-01, 5.058197543649435e-01, 2.038865731399342e-01, 3.204629624138284e-01, 3.204629624138284e-01, 9.130083380644619e-02, 6.079870156519687e+02, 1.942276399109490e+02, 2.237198544285900e-01, 3.536028198339407e+01, 3.536028198339407e+01, 1.042863641375343e+05, 4.545841565161542e+08, 2.850454793201559e+07, 4.416684624887910e+01, 4.910403070291554e+06, 4.910403070291572e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
