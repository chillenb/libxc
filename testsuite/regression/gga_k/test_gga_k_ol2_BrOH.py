
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_ol2_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_ol2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.189391485243083e+03, 2.189399351198434e+03, 2.189446266175294e+03, 2.189317223660227e+03, 2.189395534650600e+03, 2.189395534650600e+03, 5.911596372694417e+01, 5.911556861906388e+01, 5.910959283667881e+01, 5.914497353553659e+01, 5.911626416213882e+01, 5.911626416213882e+01, 2.289677293553177e+00, 2.288026057633795e+00, 2.257672740298881e+00, 2.287891536034514e+00, 2.289058695180678e+00, 2.289058695180678e+00, 2.074901774983894e-01, 2.094143165829623e-01, 3.180916182204171e+00, 1.554061864793261e-01, 2.080090224807655e-01, 2.080090224807655e-01, 5.613596423947481e-02, 5.607589050723590e-02, 8.940832224364606e-02, 6.655083790749189e-02, 5.501748280471769e-02, 5.501748280471769e-02, 1.282533369484546e+02, 1.282630042894994e+02, 1.282545544967711e+02, 1.282620674337426e+02, 1.282579625049652e+02, 1.282579625049652e+02, 2.049566550145499e+01, 2.071618601096079e+01, 2.047686725536337e+01, 2.064780644623683e+01, 2.067165757174401e+01, 2.067165757174401e+01, 1.629896445755939e+00, 1.841383128752692e+00, 1.473393505092149e+00, 1.541733745866807e+00, 1.744586313315044e+00, 1.744586313315044e+00, 1.326930942224402e-01, 2.544270255713104e-01, 1.246458279605356e-01, 1.703789172198287e+01, 1.343132785481081e-01, 1.343132785481081e-01, 6.461255552979971e-02, 6.455636579797881e-02, 3.815701924843096e-02, 9.329902146265667e-02, 5.311829636956330e-02, 5.311829636956332e-02, 1.642769612891335e+00, 1.640851435447012e+00, 1.641676996594283e+00, 1.642232294984633e+00, 1.641962693114089e+00, 1.641962693114089e+00, 1.536328583649909e+00, 1.274358840684171e+00, 1.345208371364578e+00, 1.414746700305671e+00, 1.378360899270549e+00, 1.378360899270549e+00, 2.027223294724440e+00, 3.506937306113702e-01, 4.419839837035668e-01, 6.326535974374720e-01, 5.237069388202596e-01, 5.237069388202596e-01, 1.044187823624345e+00, 9.651816594658449e-02, 9.883675424504509e-02, 5.463329342427244e-01, 9.971331711667915e-02, 9.971331711667909e-02, 6.479953220943327e-02, 4.919321040333779e-02, 5.302307002403240e-02, 9.007822048045863e-02, 4.395086277468635e-02, 4.395086277468639e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_ol2_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_ol2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.363831045631594e+03, 3.363850086696341e+03, 3.363943140365469e+03, 3.363631174788279e+03, 3.363841019475551e+03, 3.363841019475551e+03, 8.809153205663002e+01, 8.809253738285905e+01, 8.812740648458110e+01, 8.810464879799312e+01, 8.809279965379184e+01, 8.809279965379184e+01, 3.120234927018554e+00, 3.110800684112278e+00, 2.857781933117070e+00, 2.908410158479967e+00, 3.116808985135570e+00, 3.116808985135570e+00, 1.974686479565451e-01, 2.063961732813194e-01, 4.589157141315640e+00, 5.747485255199864e-02, 2.001897890989513e-01, 2.001897890989513e-01, -5.487240146785195e-02, -5.468956275365081e-02, -6.650623926462086e-02, -6.626003426440211e-02, -5.365989833743406e-02, -5.365989833743406e-02, 2.013997732161245e+02, 2.015063168545000e+02, 2.014108222268761e+02, 2.014936643808828e+02, 2.014542041677502e+02, 2.014542041677502e+02, 2.603803340111128e+01, 2.647532396195960e+01, 2.579244300223976e+01, 2.613305937023959e+01, 2.665185165909622e+01, 2.665185165909622e+01, 2.469743886210926e+00, 2.992980091465248e+00, 2.218054497419011e+00, 2.472599573728508e+00, 2.675924041910739e+00, 2.675924041910739e+00, -1.777312742276163e-02, 1.563869095533471e-01, -1.265331111184623e-02, 2.768830869490373e+01, 1.934333855331819e-02, 1.934333855331819e-02, -6.434192750683770e-02, -6.420290554754041e-02, -3.795846012334514e-02, -4.879507510879224e-02, -5.282485243611650e-02, -5.282485243611647e-02, 2.715951083780626e+00, 2.674845384674760e+00, 2.689896095366370e+00, 2.701354576511311e+00, 2.695646310743085e+00, 2.695646310743085e+00, 2.545683228199293e+00, 1.803668748611473e+00, 2.012729376129430e+00, 2.213332156360636e+00, 2.110811987740223e+00, 2.110811987740224e+00, 3.287698768939427e+00, 2.991494847855145e-01, 4.745880751166546e-01, 8.651499948356087e-01, 6.480858293267692e-01, 6.480858293267692e-01, 1.459808814925845e+00, -7.687253767034646e-02, -6.283327475589040e-02, 7.906663829048012e-01, -2.400433484483382e-02, -2.400433484483370e-02, -6.306394887872616e-02, -4.916671592778547e-02, -5.292746186129613e-02, -2.117123230097049e-02, -4.373891541851278e-02, -4.373891541851282e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_ol2_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_ol2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [7.220166705912636e-07, 7.220115445464489e-07, 7.219846145239748e-07, 7.220686390749387e-07, 7.220140012401308e-07, 7.220140012401308e-07, 1.670102406340092e-04, 1.670093118980216e-04, 1.669631835940164e-04, 1.669365134420991e-04, 1.670076286429261e-04, 1.670076286429261e-04, 2.366898505799269e-02, 2.374150150043269e-02, 2.573204491553175e-02, 2.513421656812271e-02, 2.369540059759603e-02, 2.369540059759603e-02, 1.154876367173407e+00, 1.109978308955905e+00, 1.376039452170399e-02, 3.029910784339839e+00, 1.141158362000023e+00, 1.141158362000023e+00, 6.627171218357264e+03, 5.766655046867034e+03, 8.587799261979646e+01, 6.002474604508008e+04, 5.950761863966789e+03, 5.950761863966789e+03, 5.005229217883407e-05, 5.002989444711546e-05, 5.004990124269868e-05, 5.003248645058552e-05, 5.004093112134932e-05, 5.004093112134932e-05, 9.378957928260855e-04, 9.183733058969878e-04, 9.459196864885606e-04, 9.304608592037307e-04, 9.145642447050719e-04, 9.145642447050719e-04, 3.596199227494065e-02, 2.870271751627396e-02, 4.207501725418805e-02, 3.748798687275064e-02, 3.214388465445000e-02, 3.214388465445000e-02, 7.639464950365675e+00, 1.130222323834586e+00, 7.940924132669818e+00, 1.019703052803950e-03, 4.941017839628741e+00, 4.941017839628741e+00, 6.686072142800102e+04, 4.479387129864201e+04, 1.063885380036628e+05, 3.170155322229058e+01, 5.921636430142232e+04, 5.921636430142232e+04, 3.725493505157094e-02, 3.419997499868436e-02, 3.449106006986494e-02, 3.505019017649872e-02, 3.471454548555403e-02, 3.471454548555403e-02, 4.459674332757037e-02, 5.517297738230107e-02, 4.848375541474104e-02, 4.332395006416219e-02, 4.583221063899848e-02, 4.583221063899848e-02, 2.482573179122439e-02, 5.681033968845413e-01, 3.391796958887203e-01, 1.624780660730750e-01, 2.346905294870275e-01, 2.346905294870276e-01, 7.518279309894174e-02, 1.080936281212784e+02, 4.356816735358800e+01, 1.927960265737317e-01, 1.428698677800305e+01, 1.428698677800305e+01, 4.116746569094380e+03, 2.182732476136986e+06, 3.184120636561124e+05, 1.645381261072886e+01, 9.646901077642260e+04, 9.646901077642303e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
