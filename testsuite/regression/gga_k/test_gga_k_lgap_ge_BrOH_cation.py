
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_lgap_ge_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_lgap_ge", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.196931231790811e+03, 2.196939760727481e+03, 2.196987436376223e+03, 2.196860343419439e+03, 2.196925549580061e+03, 2.196925549580061e+03, 5.951239313244015e+01, 5.951170307510382e+01, 5.949867893279893e+01, 5.954394702681838e+01, 5.951444532786749e+01, 5.951444532786749e+01, 2.332877909172052e+00, 2.331442525236417e+00, 2.309966537266000e+00, 2.342828276000438e+00, 2.355470286109155e+00, 2.355470286109155e+00, 2.232106720831341e-01, 2.237070389225843e-01, 3.132602196967968e+00, 1.952218987763863e-01, 2.277859566445144e-01, 2.277859566445144e-01, 6.719323235047709e-01, 6.173474219746764e-01, 2.520147703086049e-01, 1.186682038579381e+00, 7.456291528748089e-01, 7.456291528748076e-01, 1.285093863852251e+02, 1.285133204288612e+02, 1.285099493115213e+02, 1.285134155130839e+02, 1.285111659351574e+02, 1.285111659351574e+02, 2.102247976744697e+01, 2.124097671386657e+01, 2.100173179348220e+01, 2.119290298616318e+01, 2.115562897541504e+01, 2.115562897541504e+01, 1.675728920120942e+00, 1.880684248585387e+00, 1.450629090749258e+00, 1.486734786890111e+00, 1.723042739960639e+00, 1.723042739960640e+00, 1.976283252827591e-01, 2.838484115086002e-01, 1.919417942642065e-01, 1.703974307085549e+01, 1.712251029792955e-01, 1.712251029792955e-01, 1.234897486859664e+00, 1.076306342576849e+00, 3.602138851902570e-01, 1.793664376417160e-01, 5.199881317131378e-01, 5.199881317131387e-01, 1.588513814054962e+00, 1.589246866615875e+00, 1.589073148703772e+00, 1.588853379477699e+00, 1.588967429401431e+00, 1.588967429401431e+00, 1.497923305448151e+00, 1.252402664822695e+00, 1.314787892286476e+00, 1.382207821933040e+00, 1.346402191139484e+00, 1.346402191139484e+00, 2.070904651926020e+00, 3.696271122417960e-01, 4.502497809307402e-01, 6.375232160682289e-01, 5.261906509391786e-01, 5.261906509391786e-01, 1.065166853423622e+00, 2.750908656059503e-01, 2.296608585909030e-01, 5.684394834085290e-01, 1.527009236150567e-01, 1.527009236150567e-01, 5.825078776316732e-01, 1.185506159702995e+00, 9.800062702460361e-01, 1.548751886582247e-01, 4.692658300617367e-01, 4.692658300617363e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_lgap_ge_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_lgap_ge", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.326887151891645e+03, 3.326878945537836e+03, 3.326913183435164e+03, 3.326897853902388e+03, 3.326994641593189e+03, 3.327015087633797e+03, 3.326700706660496e+03, 3.326640427724765e+03, 3.326902769669501e+03, 3.326788848606924e+03, 3.326902769669501e+03, 3.326788848606924e+03, 8.681651209331869e+01, 8.682067699579078e+01, 8.681787341795530e+01, 8.682211730838281e+01, 8.685167927691622e+01, 8.686154740585026e+01, 8.682107412241321e+01, 8.683071282002088e+01, 8.678490419354578e+01, 8.686400079854634e+01, 8.678490419354578e+01, 8.686400079854634e+01, 3.076142614769565e+00, 3.118979844771759e+00, 3.060195421970429e+00, 3.112800157977965e+00, 2.845800019923482e+00, 2.770227368192631e+00, 2.849246599251082e+00, 2.873829470480603e+00, 3.193692673062940e+00, 2.438412495761627e+00, 3.193692673062940e+00, 2.438412495761627e+00, 1.109698382481234e-01, 1.334047800399057e-01, 1.214805704513961e-01, 1.470532736851887e-01, 4.072128695955717e+00, 4.442881864418310e+00, -2.320952517075327e-02, -2.034417556717270e-02, 1.248324568981568e-01, -1.160075174976264e-01, 1.248324568981567e-01, -1.160075174976262e-01, -1.498778430967066e+00, -1.425366227977213e+00, -1.379512865610076e+00, -1.297411581364871e+00, -4.403641054298186e-01, -4.169272787251816e-01, -2.607441999163623e+00, -2.704962340652786e+00, -1.673093197870491e+00, -1.443701346473983e+00, -1.673093197870488e+00, -1.443701346473983e+00, 1.998286020911217e+02, 1.997310593687033e+02, 1.999480601755251e+02, 1.998464400180015e+02, 1.998354415112409e+02, 1.997351689759473e+02, 1.999379435125834e+02, 1.998399868222774e+02, 1.998896496403792e+02, 1.997889981857288e+02, 1.998896496403792e+02, 1.997889981857288e+02, 2.502154035444892e+01, 2.501872993862206e+01, 2.549595309120333e+01, 2.547962625732352e+01, 2.443274159331525e+01, 2.460186718951832e+01, 2.484366504029655e+01, 2.501574290377245e+01, 2.571831577178806e+01, 2.532088633679487e+01, 2.571831577178806e+01, 2.532088633679487e+01, 2.497623008727050e+00, 2.484759637351031e+00, 3.036689120776884e+00, 3.040442525469513e+00, 2.035484013090998e+00, 2.199227293980072e+00, 2.294555883366644e+00, 2.448479627317710e+00, 2.718294874097224e+00, 2.449332660932974e+00, 2.718294874097225e+00, 2.449332660932975e+00, -1.717201104658087e-01, -1.649655697577299e-01, 3.980990813147901e-02, 4.236191472959586e-02, -1.875984673307013e-01, -1.737201877055868e-01, 2.759037341687493e+01, 2.756605176433814e+01, -1.019032585822995e-01, -5.254307617914077e-02, -1.019032585822995e-01, -5.254307617914077e-02, -2.679627123542084e+00, -2.873563257672968e+00, -2.351333210718173e+00, -2.458808062919391e+00, -8.569446561744287e-01, -7.493517809295123e-01, -2.342018846741852e-01, -2.395281852997127e-01, -1.409648065619068e+00, -1.052043902071837e+00, -1.409648065619070e+00, -1.052043902071839e+00, 2.607886277613754e+00, 2.628358154998211e+00, 2.561104138284807e+00, 2.581681577333605e+00, 2.577627090766545e+00, 2.598269266479021e+00, 2.591320437715333e+00, 2.611731846837178e+00, 2.584482552387751e+00, 2.605004567119068e+00, 2.584482552387751e+00, 2.605004567119068e+00, 2.474301959401575e+00, 2.490721740819510e+00, 1.666267892404492e+00, 1.683123098666260e+00, 1.892072278641808e+00, 1.911096218899832e+00, 2.123442637508347e+00, 2.138998122743388e+00, 2.006287980811308e+00, 2.021964922247126e+00, 2.006287980811308e+00, 2.021964922247126e+00, 3.329666748561589e+00, 3.342237955642259e+00, 1.767273312670121e-01, 1.818275709245008e-01, 3.595563403539357e-01, 3.732420203223404e-01, 8.145227440422641e-01, 8.247552323503620e-01, 5.673173538431777e-01, 5.681097448559795e-01, 5.673173538431776e-01, 5.681097448559794e-01, 1.403621652359236e+00, 1.426973662274280e+00, -4.782007946553672e-01, -4.748118852658812e-01, -3.649517996632394e-01, -3.474367423772515e-01, 7.758618393120419e-01, 8.022954063474489e-01, -1.724007021194227e-01, -1.337108625757482e-01, -1.724007021194224e-01, -1.337108625757481e-01, -1.268683291139537e+00, -1.208650372790457e+00, -3.295612726443952e+00, -2.145558857971059e+00, -2.348577622838216e+00, -2.110574213257300e+00, -1.674649849984553e-01, -1.661943304475919e-01, -8.685604401220398e-01, -1.112598946567989e+00, -8.685604401220388e-01, -1.112598946567988e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_lgap_ge_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_lgap_ge", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.694654390591515e-06, 0.000000000000000e+00, 1.694660849068834e-06, 1.694636860103845e-06, 0.000000000000000e+00, 1.694648114310887e-06, 1.694579015671136e-06, 0.000000000000000e+00, 1.694565721183681e-06, 1.694777044283479e-06, 0.000000000000000e+00, 1.694818114833560e-06, 1.694644024020993e-06, 0.000000000000000e+00, 1.694715921882639e-06, 1.694644024020993e-06, 0.000000000000000e+00, 1.694715921882639e-06, 3.959006267784928e-04, 0.000000000000000e+00, 3.959007119404679e-04, 3.958948942537198e-04, 0.000000000000000e+00, 3.958962549564136e-04, 3.957687816323789e-04, 0.000000000000000e+00, 3.957288339657431e-04, 3.957957998642164e-04, 0.000000000000000e+00, 3.957613736032713e-04, 3.961056573815900e-04, 0.000000000000000e+00, 3.956265131129259e-04, 3.961056573815900e-04, 0.000000000000000e+00, 3.956265131129259e-04, 5.679390392857498e-02, 0.000000000000000e+00, 5.596541055244353e-02, 5.711573849690943e-02, 0.000000000000000e+00, 5.609370104584131e-02, 6.165792379328641e-02, 0.000000000000000e+00, 6.328060340455806e-02, 6.112474043036809e-02, 0.000000000000000e+00, 6.062468429353694e-02, 5.447175325868689e-02, 0.000000000000000e+00, 6.991400898994431e-02, 5.447175325868689e-02, 0.000000000000000e+00, 6.991400898994431e-02, 3.945558822669176e+00, 0.000000000000000e+00, 3.474308371318998e+00, 3.774841644292779e+00, 0.000000000000000e+00, 3.268445764154790e+00, 3.740987980314119e-02, 0.000000000000000e+00, 3.352364986120156e-02, 9.630513687675395e+00, 0.000000000000000e+00, 9.214626295249419e+00, 3.453746695932535e+00, 0.000000000000000e+00, 2.813587360610385e+01, 3.453746695932534e+00, 0.000000000000000e+00, 2.813587360610384e+01, 8.627463918685449e+05, 0.000000000000000e+00, 6.816405862282783e+05, 7.097566132191862e+05, 0.000000000000000e+00, 5.428331285109913e+05, 1.130315438695249e+03, 0.000000000000000e+00, 9.229288397635590e+02, 6.529456207022232e+06, 0.000000000000000e+00, 7.023526016398055e+06, 1.350886055951423e+06, 0.000000000000000e+00, 9.997991401889747e+06, 1.350886055951422e+06, 0.000000000000000e+00, 9.997991401889740e+06, 1.164772284776077e-04, 0.000000000000000e+00, 1.165612452129542e-04, 1.164053796203975e-04, 0.000000000000000e+00, 1.164917613660158e-04, 1.164729101572466e-04, 0.000000000000000e+00, 1.165586246225283e-04, 1.164112583802085e-04, 0.000000000000000e+00, 1.164955010751243e-04, 1.164406349308867e-04, 0.000000000000000e+00, 1.165263516219349e-04, 1.164406349308867e-04, 0.000000000000000e+00, 1.165263516219349e-04, 2.321206791663480e-03, 0.000000000000000e+00, 2.321568744891934e-03, 2.267059227778437e-03, 0.000000000000000e+00, 2.268996286170972e-03, 2.374941149555075e-03, 0.000000000000000e+00, 2.359655556362400e-03, 2.326501501419710e-03, 0.000000000000000e+00, 2.311105359502389e-03, 2.252457027432871e-03, 0.000000000000000e+00, 2.288433452506606e-03, 2.252457027432871e-03, 0.000000000000000e+00, 2.288433452506606e-03, 8.175694490993596e-02, 0.000000000000000e+00, 8.240374214195299e-02, 6.394958273160313e-02, 0.000000000000000e+00, 6.390645797525694e-02, 1.101017705867641e-01, 0.000000000000000e+00, 9.852429642441536e-02, 9.633441441534066e-02, 0.000000000000000e+00, 8.730773379138901e-02, 7.244579926137917e-02, 0.000000000000000e+00, 8.453573090634599e-02, 7.244579926137919e-02, 0.000000000000000e+00, 8.453573090634599e-02, 3.414123863391207e+01, 0.000000000000000e+00, 3.293824793064505e+01, 3.954303606142057e+00, 0.000000000000000e+00, 3.890268422794271e+00, 4.794045310311287e+01, 0.000000000000000e+00, 3.996956508133301e+01, 2.341946077397540e-03, 0.000000000000000e+00, 2.345202118709133e-03, 2.094983639301259e+01, 0.000000000000000e+00, 1.670723140238966e+01, 2.094983639301259e+01, 0.000000000000000e+00, 1.670723140238966e+01, 1.876839460942442e+07, 0.000000000000000e+00, 1.668325972757564e+07, 7.268753497782515e+06, 0.000000000000000e+00, 6.981128704662911e+06, 1.516401723743393e+07, 0.000000000000000e+00, 1.179664700327121e+07, 1.718221398067966e+02, 0.000000000000000e+00, 1.690129042980164e+02, 1.646047763599453e+07, 0.000000000000000e+00, 4.732144048919332e+06, 1.646047763599453e+07, 0.000000000000000e+00, 4.732144048919334e+06, 8.515226037761464e-02, 0.000000000000000e+00, 8.434019441086259e-02, 8.274541146805209e-02, 0.000000000000000e+00, 8.182446676099345e-02, 8.287061271983857e-02, 0.000000000000000e+00, 8.197476223424635e-02, 8.337677460846399e-02, 0.000000000000000e+00, 8.249817423908039e-02, 8.306059548983849e-02, 0.000000000000000e+00, 8.217372757414464e-02, 8.306059548983849e-02, 0.000000000000000e+00, 8.217372757414464e-02, 9.844741171414335e-02, 0.000000000000000e+00, 9.756618905423543e-02, 1.432671244363424e-01, 0.000000000000000e+00, 1.413239453223769e-01, 1.225536593527887e-01, 0.000000000000000e+00, 1.208612467351529e-01, 1.059043865776836e-01, 0.000000000000000e+00, 1.047845317261760e-01, 1.138364062583161e-01, 0.000000000000000e+00, 1.125558142777057e-01, 1.138364062583161e-01, 0.000000000000000e+00, 1.125558142777057e-01, 5.548282030825896e-02, 0.000000000000000e+00, 5.525786363443366e-02, 1.859622973475342e+00, 0.000000000000000e+00, 1.824546671848960e+00, 1.028844542238742e+00, 0.000000000000000e+00, 9.949982649837691e-01, 4.113093094873763e-01, 0.000000000000000e+00, 4.042975085120434e-01, 6.408052131049750e-01, 0.000000000000000e+00, 6.410537911473795e-01, 6.408052131049754e-01, 0.000000000000000e+00, 6.410537911473797e-01, 1.846262906791198e-01, 0.000000000000000e+00, 1.806241604861733e-01, 1.231679914572879e+03, 0.000000000000000e+00, 1.200632100630530e+03, 4.139520880564482e+02, 0.000000000000000e+00, 3.657393588919769e+02, 4.581596026750142e-01, 0.000000000000000e+00, 4.372337545384051e-01, 7.918467707279885e+01, 0.000000000000000e+00, 6.384663487664211e+01, 7.918467707279882e+01, 0.000000000000000e+00, 6.384663487664211e+01, 2.245269445526166e+05, 0.000000000000000e+00, 1.945608522304025e+05, 9.775215539184304e+08, 0.000000000000000e+00, 8.421203893231398e+08, 6.532006688152010e+07, 0.000000000000000e+00, 5.039027664554111e+07, 9.082122600947336e+01, 0.000000000000000e+00, 8.597403856332545e+01, 1.717783478826886e+07, 0.000000000000000e+00, 6.609679694421352e+06, 1.717783478826891e+07, 0.000000000000000e+00, 6.609679694421372e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
