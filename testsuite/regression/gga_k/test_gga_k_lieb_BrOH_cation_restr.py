
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_lieb_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_lieb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.246290804477014e+03, 2.246298049490686e+03, 2.246342603452287e+03, 2.246234559240600e+03, 2.246289415788227e+03, 2.246289415788227e+03, 6.134898825540194e+01, 6.134792052694153e+01, 6.132626091807115e+01, 6.138724604580835e+01, 6.135066582874757e+01, 6.135066582874757e+01, 2.447657713133584e+00, 2.447307507553990e+00, 2.456238394361244e+00, 2.489846381707588e+00, 2.476855543736516e+00, 2.476855543736516e+00, 2.499974081331792e-01, 2.498017971603077e-01, 3.267617911371905e+00, 2.208054806724405e-01, 2.244898248719469e-01, 2.244898248719470e-01, 1.358045801441910e-01, 1.321226084352281e-01, 1.762587020622943e-01, 1.424748149143662e-01, 1.263981186256153e-01, 1.263981186256152e-01, 1.305863485517318e+02, 1.305726817380472e+02, 1.305861903716194e+02, 1.305741175234961e+02, 1.305791550223778e+02, 1.305791550223778e+02, 2.242059168239555e+01, 2.262901567915470e+01, 2.245413087583718e+01, 2.263655774303059e+01, 2.252111039899719e+01, 2.252111039899719e+01, 1.720442444108124e+00, 1.892648624061315e+00, 1.492384884790014e+00, 1.498530798025751e+00, 1.758800043957563e+00, 1.758800043957563e+00, 2.091750350739218e-01, 3.218038773947602e-01, 1.995893779852752e-01, 1.714059224861189e+01, 1.896788111247642e-01, 1.896788111247642e-01, 1.241215594593426e-01, 1.313299365938121e-01, 5.240478640222214e-02, 1.653447715843344e-01, 7.682062491822916e-02, 7.682062491822925e-02, 1.590633177091819e+00, 1.598732826541371e+00, 1.595887943003853e+00, 1.593506019229397e+00, 1.594693640825599e+00, 1.594693640825599e+00, 1.498162640941154e+00, 1.312484077325836e+00, 1.357748433804657e+00, 1.407293691760610e+00, 1.380423149542814e+00, 1.380423149542814e+00, 2.085649506873391e+00, 4.156350645762712e-01, 4.968841801726869e-01, 6.724007834417635e-01, 5.677423681453506e-01, 5.677423681453506e-01, 1.117397373443348e+00, 1.846093628469374e-01, 1.846107768986252e-01, 5.915243531412658e-01, 1.565186732954840e-01, 1.565186732954840e-01, 1.512613552660236e-01, 5.928606494952823e-02, 8.521920278431068e-02, 1.557987034599362e-01, 6.835365005105047e-02, 6.835365005105040e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_lieb_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_lieb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.269062054684722e+03, 3.269085572928037e+03, 3.269187280790224e+03, 3.268837435056345e+03, 3.269021151305197e+03, 3.269021151305197e+03, 8.484454353793406e+01, 8.484624235568606e+01, 8.488965409110625e+01, 8.484637586427995e+01, 8.485067100086042e+01, 8.485067100086042e+01, 2.991166363784554e+00, 2.979530260838530e+00, 2.686157800784613e+00, 2.738273842799923e+00, 2.732975113224050e+00, 2.732975113224050e+00, 1.126253938305086e-01, 1.238879921952362e-01, 4.127407494598033e+00, -1.180598113526014e-02, 3.904794833812513e-02, 3.904794833812505e-02, -1.353651496549381e-01, -1.316357882545874e-01, -1.614406598287605e-01, -1.423282462342834e-01, -1.261666889364094e-01, -1.261666889364092e-01, 1.971278976185273e+02, 1.972619036445507e+02, 1.971340488111399e+02, 1.972523519133476e+02, 1.971958437938396e+02, 1.971958437938396e+02, 2.388083373089636e+01, 2.434654038563163e+01, 2.335822817901534e+01, 2.376815614989388e+01, 2.439069590669899e+01, 2.439069590669899e+01, 2.441156438559936e+00, 3.018708386323396e+00, 2.070709705314997e+00, 2.351688029962821e+00, 2.538069023410364e+00, 2.538069023410364e+00, -1.084308234537967e-01, 4.192114074356843e-02, -1.133666716873151e-01, 2.740697784268188e+01, -5.093583447537655e-02, -5.093583447537655e-02, -1.240343049344611e-01, -1.311898639521185e-01, -5.232288779619287e-02, -1.263405226244758e-01, -7.670176728167211e-02, -7.670176728167222e-02, 2.611476926315385e+00, 2.555306876756359e+00, 2.575035464625065e+00, 2.591349612088433e+00, 2.583185388552399e+00, 2.583185388552399e+00, 2.479225276950421e+00, 1.618447414540358e+00, 1.856145599885839e+00, 2.100134369889340e+00, 1.975487914170064e+00, 1.975487914170064e+00, 3.312307925878057e+00, 1.649704477862715e-01, 3.405092348638877e-01, 7.885776426040697e-01, 5.371582944652548e-01, 5.371582944652548e-01, 1.366798716569217e+00, -1.710346727587653e-01, -1.593795875179777e-01, 7.661993986106717e-01, -9.327958175651835e-02, -9.327958175651820e-02, -1.503861030496240e-01, -5.927605637899139e-02, -8.517510515525034e-02, -1.000343900848608e-01, -6.825188369318505e-02, -6.825188369318497e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_lieb_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_lieb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.202006733159884e-06, 1.201996676491209e-06, 1.201948864658730e-06, 1.202098555829780e-06, 1.202020558885844e-06, 1.202020558885844e-06, 2.785316920839311e-04, 2.785298885422396e-04, 2.784677367028176e-04, 2.784171602557934e-04, 2.785093880374143e-04, 2.785093880374143e-04, 3.881587114132348e-02, 3.894454160414277e-02, 4.222003159606166e-02, 4.118589478405873e-02, 4.140296506186949e-02, 4.140296506186949e-02, 2.254676252303029e+00, 2.155261680720169e+00, 2.448258940025436e-02, 5.152867620207729e+00, 3.639171700509032e+00, 3.639171700509032e+00, 5.344801428445612e+04, 4.583676877926669e+04, 2.729484373198737e+02, 2.774630074518794e+05, 1.398421995974494e+05, 1.398421995974494e+05, 8.298963851298606e-05, 8.294394782793102e-05, 8.298736207896825e-05, 8.294702799141847e-05, 8.296656655884111e-05, 8.296656655884111e-05, 1.562698922861908e-03, 1.529181235153371e-03, 1.587789299623707e-03, 1.557484400489928e-03, 1.532299364285772e-03, 1.532299364285772e-03, 5.799312708215370e-02, 4.523395877375659e-02, 7.320248544444197e-02, 6.516865150012384e-02, 5.527626297112226e-02, 5.527626297112226e-02, 1.539702094936107e+01, 2.244435314054112e+00, 1.944618349753184e+01, 1.655887489024300e-03, 9.526872278498251e+00, 9.526872278498251e+00, 6.040667309264845e+05, 2.969866145216991e+05, 6.642813962859545e+05, 6.391443805064379e+01, 3.799497991674790e+05, 3.799497991674790e+05, 5.715651138417381e-02, 5.815149574960848e-02, 5.779876148296216e-02, 5.751036634461389e-02, 5.765448051784067e-02, 5.765448051784067e-02, 6.206831126319309e-02, 9.812018394222449e-02, 8.545146730886738e-02, 7.495208115448901e-02, 8.008500190616177e-02, 8.008500190616177e-02, 3.925750289614679e-02, 1.112871761164616e+00, 6.424991278234468e-01, 2.788053802660229e-01, 4.239181425298766e-01, 4.239181425298766e-01, 1.257442236208125e-01, 3.112948741408323e+02, 1.228457877552662e+02, 3.112072681938416e-01, 3.095910669707584e+01, 3.095910669707583e+01, 1.901371700954780e+04, 1.554922590500498e+07, 1.681295283578410e+06, 3.738800705283761e+01, 4.795793856111136e+05, 4.795793856111150e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
