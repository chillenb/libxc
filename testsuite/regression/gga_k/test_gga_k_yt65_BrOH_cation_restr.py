
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_yt65_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_yt65", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.259784681681679e+03, 2.259791601447374e+03, 2.259835375168258e+03, 2.259732156347705e+03, 2.259784389796104e+03, 2.259784389796104e+03, 6.184365153847957e+01, 6.184248494526051e+01, 6.181856541149315e+01, 6.188366956945767e+01, 6.184523442117239e+01, 6.184523442117239e+01, 2.478589161883052e+00, 2.478553096845793e+00, 2.496245507849589e+00, 2.529964266394462e+00, 2.516508640399669e+00, 2.516508640399669e+00, 2.586389792103805e-01, 2.581139877017394e-01, 3.305096805675168e+00, 2.316008767075176e-01, 2.340143436717915e-01, 2.340143436717915e-01, 1.460852683430718e-01, 1.421228781702734e-01, 1.891968917576746e-01, 1.532693911090419e-01, 1.359717650446488e-01, 1.359717650446486e-01, 1.311694704853770e+02, 1.311513474354090e+02, 1.311691299781645e+02, 1.311531227224647e+02, 1.311600049711373e+02, 1.311600049711373e+02, 2.280392438078382e+01, 2.300898501712218e+01, 2.285390626376795e+01, 2.303332363779852e+01, 2.289471310411155e+01, 2.289471310411155e+01, 1.732557580761385e+00, 1.896505763535434e+00, 1.504225764522391e+00, 1.502676636426376e+00, 1.769977705374201e+00, 1.769977705374201e+00, 2.221658273116863e-01, 3.358566229750647e-01, 2.122663758718614e-01, 1.717358186789930e+01, 2.001118757540670e-01, 2.001118757540670e-01, 1.335267541146034e-01, 1.412799820502007e-01, 5.637442919021058e-02, 1.767683114898348e-01, 8.263979231425003e-02, 8.263979231425013e-02, 1.591758103795596e+00, 1.601837952133200e+00, 1.598297561801679e+00, 1.595339110067596e+00, 1.596815040626976e+00, 1.596815040626976e+00, 1.498666077983264e+00, 1.328657371348993e+00, 1.369309918331669e+00, 1.414267362743732e+00, 1.389666725655059e+00, 1.389666725655059e+00, 2.090304433544879e+00, 4.306353116135680e-01, 5.107440036873195e-01, 6.818397090728183e-01, 5.793695243058898e-01, 5.793695243058898e-01, 1.131481713322484e+00, 1.982158223818666e-01, 1.978860336621172e-01, 5.977681106443558e-01, 1.665844262859409e-01, 1.665844262859408e-01, 1.627011876662767e-01, 6.377931096523745e-02, 9.167705722863627e-02, 1.660223408948787e-01, 7.353155698118957e-02, 7.353155698118949e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_yt65_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_yt65", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.255568177480058e+03, 3.255592020971349e+03, 3.255694509074253e+03, 3.255339837949240e+03, 3.255526177297321e+03, 3.255526177297321e+03, 8.434988025485643e+01, 8.435167793736713e+01, 8.439734959768425e+01, 8.434995234063064e+01, 8.435610240843560e+01, 8.435610240843560e+01, 2.960234915035086e+00, 2.948284671546727e+00, 2.646150687296268e+00, 2.698155958113048e+00, 2.693322016560898e+00, 2.693322016560898e+00, 1.039838227533072e-01, 1.155758016538043e-01, 4.089928600294770e+00, -2.260137717033736e-02, 2.952342953828072e-02, 2.952342953828056e-02, -1.456458378538188e-01, -1.416360579896327e-01, -1.743788495241406e-01, -1.531228224289591e-01, -1.357403353554429e-01, -1.357403353554427e-01, 1.965447756848821e+02, 1.966832379471890e+02, 1.965511092045948e+02, 1.966733467143790e+02, 1.966149938450801e+02, 1.966149938450801e+02, 2.349750103250810e+01, 2.396657104766416e+01, 2.295845279108459e+01, 2.337139025512594e+01, 2.401709320158462e+01, 2.401709320158462e+01, 2.429041301906674e+00, 3.014851246849277e+00, 2.058868825582621e+00, 2.347542191562197e+00, 2.526891361993727e+00, 2.526891361993727e+00, -1.214216156915613e-01, 2.786839516326428e-02, -1.260436695739012e-01, 2.737398822339446e+01, -6.136889910467921e-02, -6.136889910467921e-02, -1.334394995897220e-01, -1.411399094085070e-01, -5.629253058418127e-02, -1.377640625299763e-01, -8.252093467769299e-02, -8.252093467769306e-02, 2.610351999611608e+00, 2.552201751164531e+00, 2.572625845827240e+00, 2.589516521250234e+00, 2.581063988751021e+00, 2.581063988751021e+00, 2.478721839908310e+00, 1.602274120517201e+00, 1.844584115358827e+00, 2.093160698906217e+00, 1.966244338057819e+00, 1.966244338057819e+00, 3.307652999206570e+00, 1.499702007489745e-01, 3.266494113492550e-01, 7.791387169730147e-01, 5.255311383047155e-01, 5.255311383047155e-01, 1.352714376690081e+00, -1.846411322936944e-01, -1.726548442814695e-01, 7.599556411075815e-01, -1.033453347469751e-01, -1.033453347469750e-01, -1.618259354498771e-01, -6.376930239470056e-02, -9.163295959957592e-02, -1.102580275198032e-01, -7.342979062332418e-02, -7.342979062332408e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_yt65_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_yt65", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.293111681777889e-06, 1.293100862873648e-06, 1.293049427189138e-06, 1.293210464059069e-06, 1.293126555411501e-06, 1.293126555411501e-06, 2.996427348058667e-04, 2.996407945664609e-04, 2.995739319879217e-04, 2.995195221475559e-04, 2.996187402455151e-04, 2.996187402455151e-04, 4.175788290243648e-02, 4.189630581969751e-02, 4.542005843709111e-02, 4.430754021629704e-02, 4.454106312782512e-02, 4.454106312782512e-02, 2.425567278492465e+00, 2.318617674712133e+00, 2.633822380546464e-02, 5.543424284179399e+00, 3.914999232618932e+00, 3.914999232618933e+00, 5.749905531508243e+04, 4.931092274966298e+04, 2.936363025966519e+02, 2.984930502461058e+05, 1.504414051239128e+05, 1.504414051239128e+05, 8.927975864623720e-05, 8.923060487948768e-05, 8.927730967208422e-05, 8.923391850101536e-05, 8.925493797543460e-05, 8.925493797543460e-05, 1.681142190395426e-03, 1.645084061662525e-03, 1.708134268223142e-03, 1.675532438296639e-03, 1.648438526404832e-03, 1.648438526404832e-03, 6.238866058230948e-02, 4.866242333737721e-02, 7.875079768857902e-02, 7.010804699819692e-02, 5.946587435918890e-02, 5.946587435918890e-02, 1.656402339931765e+01, 2.414550138141489e+00, 2.092008834305760e+01, 1.781393894639991e-03, 1.024895243452299e+01, 1.024895243452299e+01, 6.498513900009220e+05, 3.194964304069282e+05, 7.146299682256749e+05, 6.875877164205806e+01, 4.087477301404416e+05, 4.087477301404416e+05, 6.148863439911782e-02, 6.255903265117052e-02, 6.217956322876169e-02, 6.186930945723270e-02, 6.202434662613391e-02, 6.202434662613391e-02, 6.677271944364828e-02, 1.055571092687123e-01, 9.192817939686199e-02, 8.063300232906613e-02, 8.615496789092239e-02, 8.615496789092239e-02, 4.223298771296013e-02, 1.197220809986330e+00, 6.911967335960780e-01, 2.999371669214815e-01, 4.560486119590254e-01, 4.560486119590255e-01, 1.352748865663264e-01, 3.348891708542074e+02, 1.321567665315334e+02, 3.347949248984056e-01, 3.330562252522076e+01, 3.330562252522076e+01, 2.045484347199144e+04, 1.672776458373700e+07, 1.808727448637448e+06, 4.022179522349448e+01, 5.159286456269005e+05, 5.159286456269019e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
