
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_ghds10r_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_ghds10r", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([3.026016071061216e+03, 3.026004525083044e+03, 3.026004001139931e+03, 3.026174741476331e+03, 3.026078052372085e+03, 3.026078052372085e+03, 9.001652477141923e+01, 9.000974573354513e+01, 8.985752010554677e+01, 9.015648271689827e+01, 9.001274721902644e+01, 9.001274721902644e+01, 4.293346720593133e+00, 4.311282465745377e+00, 4.826301624234506e+00, 4.865666651126454e+00, 4.919936989937897e+00, 4.919936989937897e+00, 7.829663183080393e-01, 7.640789711941475e-01, 5.502467550833324e+00, 8.728861759333663e-01, 8.384038239269329e-01, 8.384038239269329e-01, 7.014116512295081e-01, 6.824754186708870e-01, 9.277737572628594e-01, 7.276818606832851e-01, 6.537394209464201e-01, 6.537394209464191e-01, 1.643719773028868e+02, 1.641008570719915e+02, 1.643612857286834e+02, 1.641219068137839e+02, 1.642335228007994e+02, 1.642335228007994e+02, 4.464547686486327e+01, 4.465971968665849e+01, 4.562933338285030e+01, 4.563798650155514e+01, 4.418603738100975e+01, 4.418603738100975e+01, 2.476302018238862e+00, 2.172878647634600e+00, 2.233109183020162e+00, 1.795366515009598e+00, 2.466195655384015e+00, 2.466195655384015e+00, 9.813317644487725e-01, 1.167111296053583e+00, 9.522983560084420e-01, 1.912419010707904e+01, 8.198629944516067e-01, 8.198629944516067e-01, 6.245750234956486e-01, 6.676858527723003e-01, 2.379849968889888e-01, 8.382763517082253e-01, 3.740522921238488e-01, 3.740522921238494e-01, 1.711573175564790e+00, 1.833972320597796e+00, 1.790982287724476e+00, 1.755321906518307e+00, 1.773151338667489e+00, 1.773151338667489e+00, 1.582685431606506e+00, 2.299520022693085e+00, 2.079192649000699e+00, 1.864471680105007e+00, 1.968341315311138e+00, 1.968341315311138e+00, 2.412938520617054e+00, 1.319990266593724e+00, 1.338779942534339e+00, 1.263961958999683e+00, 1.283188960653993e+00, 1.283188960653993e+00, 1.982414582510001e+00, 9.738857089766987e-01, 9.605664826028965e-01, 9.982022052960142e-01, 7.568607444121231e-01, 7.568607444121231e-01, 7.903249055826521e-01, 2.574269807191703e-01, 4.088457819836498e-01, 7.626973204643773e-01, 3.297657919801697e-01, 3.297657919801692e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_ghds10r_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_ghds10r", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([2.489588714331111e+03, 2.489584930491243e+03, 2.489637738146680e+03, 2.489620525344589e+03, 2.489753700637112e+03, 2.489798135274099e+03, 2.489201102261849e+03, 2.489093469681779e+03, 2.489620017214373e+03, 2.489345077535480e+03, 2.489620017214373e+03, 2.489345077535480e+03, 5.633820780540261e+01, 5.638231415890446e+01, 5.634427641383831e+01, 5.639106617509650e+01, 5.651849934664013e+01, 5.656480176784522e+01, 5.623446664685841e+01, 5.628632775697775e+01, 5.630140396765421e+01, 5.644225628431055e+01, 5.630140396765421e+01, 5.644225628431055e+01, 1.203508462976149e+00, 1.332312005738317e+00, 1.158668075966382e+00, 1.316945602450356e+00, 5.532896053804164e-01, 3.204559422603814e-01, 4.455576649443640e-01, 5.231222692508607e-01, 1.527313159767888e+00, -8.840946358976974e-01, 1.527313159767888e+00, -8.840946358976974e-01, -3.660057502385561e-01, -3.296139069617355e-01, -3.374159632626826e-01, -2.972685826674309e-01, 1.653546199477769e+00, 2.372854388626569e+00, -5.995601343282960e-01, -6.025307524181313e-01, -3.828563431199091e-01, -6.887068881385978e-01, -3.828563431199098e-01, -6.887068881385972e-01, -7.502463078752997e-01, -7.526531289586814e-01, -7.304768928200914e-01, -7.308385294863667e-01, -9.032378997852770e-01, -8.950008414260976e-01, -7.930694523968062e-01, -8.039413684694355e-01, -7.532021646644145e-01, -4.927968125008624e-01, -7.532021646644130e-01, -4.927968125008617e-01, 1.635863826399277e+02, 1.634943734473258e+02, 1.639846056116893e+02, 1.638790795434462e+02, 1.636073554837200e+02, 1.635067684619773e+02, 1.639490799965826e+02, 1.638562761290876e+02, 1.637913460411006e+02, 1.636878280928895e+02, 1.637913460411006e+02, 1.636878280928895e+02, 1.819003658151609e+00, 1.817100692586565e+00, 2.486405355017143e+00, 2.470008300288370e+00, 8.766080500180833e-02, 6.012178671412306e-01, 6.759421247717317e-01, 1.180814487366171e+00, 3.432837985275845e+00, 2.338443628208546e+00, 3.432837985275845e+00, 2.338443628208546e+00, 1.806517509569957e+00, 1.799691840212803e+00, 2.853996491590405e+00, 2.864619320010322e+00, 1.357393913262849e+00, 1.534478849420240e+00, 2.108019316178607e+00, 2.238308590759746e+00, 2.069460292568779e+00, 1.839039361784728e+00, 2.069460292568780e+00, 1.839039361784730e+00, -8.387589076332460e-01, -8.239315555893350e-01, -7.313889976043387e-01, -7.294723538159218e-01, -8.246727849343016e-01, -8.146556848993713e-01, 2.559434966291244e+01, 2.557520634023312e+01, -7.003614633884585e-01, -5.621185776156565e-01, -7.003614633884585e-01, -5.621185776156565e-01, -6.797875853438763e-01, -7.271700319909709e-01, -7.249453814923448e-01, -7.528531202197943e-01, -3.281606026102748e-01, -3.120257696606484e-01, -7.597279725742002e-01, -7.749121155701202e-01, -4.490581126398008e-01, -4.467138585798431e-01, -4.490581126398013e-01, -4.467138585798439e-01, 2.597464543081789e+00, 2.619564059864668e+00, 2.426351782547235e+00, 2.449309481467401e+00, 2.486261671322224e+00, 2.509296420681790e+00, 2.536414045281980e+00, 2.558456552262159e+00, 2.511339228283861e+00, 2.533855734033571e+00, 2.511339228283861e+00, 2.533855734033571e+00, 2.503392149291091e+00, 2.519943300235145e+00, 7.319881143320172e-01, 7.535043288515433e-01, 1.234859081404687e+00, 1.260593119307770e+00, 1.749410031957200e+00, 1.765802525783530e+00, 1.493376907574543e+00, 1.509442041535553e+00, 1.493376907574543e+00, 1.509442041535553e+00, 3.095731552649691e+00, 3.119423623198575e+00, -6.612412058721669e-01, -6.544298914766133e-01, -4.258409886865664e-01, -4.005183953991160e-01, 2.903594829881606e-01, 3.007570677862019e-01, -8.844678895231151e-02, -8.134534905215549e-02, -8.844678895231231e-02, -8.134534905215593e-02, 5.934171141417942e-01, 6.266847602718857e-01, -9.484696613336558e-01, -9.472330732244503e-01, -9.197724860552562e-01, -9.038512777117704e-01, 4.410952412215735e-01, 4.723731788004754e-01, -6.995914018686573e-01, -6.126439005072777e-01, -6.995914018686569e-01, -6.126439005072777e-01, -8.322630943121693e-01, -8.230211363555970e-01, -4.233445259108460e-01, -3.322222985949386e-01, -5.101510188653895e-01, -4.946400678565424e-01, -6.665886613911474e-01, -6.702337898578280e-01, -3.251897235723869e-01, -4.406924635022994e-01, -3.251897235723867e-01, -4.406924635022991e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_ghds10r_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_ghds10r", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.293109184051877e-05, 0.000000000000000e+00, 1.293114179513549e-05, 1.293096651097146e-05, 0.000000000000000e+00, 1.293105074677587e-05, 1.293054083471756e-05, 0.000000000000000e+00, 1.293044770940055e-05, 1.293195688134498e-05, 0.000000000000000e+00, 1.293225240321300e-05, 1.293101834015489e-05, 0.000000000000000e+00, 1.293151277752772e-05, 1.293101834015489e-05, 0.000000000000000e+00, 1.293151277752772e-05, 2.996366023714674e-03, 0.000000000000000e+00, 2.996488674912871e-03, 2.996337920348051e-03, 0.000000000000000e+00, 2.996477974254268e-03, 2.995831833038986e-03, 0.000000000000000e+00, 2.995646812433001e-03, 2.995258276008431e-03, 0.000000000000000e+00, 2.995132169597408e-03, 2.997869647877723e-03, 0.000000000000000e+00, 2.994507043947534e-03, 2.997869647877723e-03, 0.000000000000000e+00, 2.994507043947534e-03, 4.200715030699055e-01, 0.000000000000000e+00, 4.151155631692661e-01, 4.220388987872136e-01, 0.000000000000000e+00, 4.159317269801374e-01, 4.495394155411678e-01, 0.000000000000000e+00, 4.589594270924217e-01, 4.445183114860597e-01, 0.000000000000000e+00, 4.416418299177148e-01, 4.057091912691514e-01, 0.000000000000000e+00, 4.937250273428979e-01, 4.057091912691514e-01, 0.000000000000000e+00, 4.937250273428979e-01, 2.572670895608398e+01, 0.000000000000000e+00, 2.294376358600035e+01, 2.479864693157502e+01, 0.000000000000000e+00, 2.177059790083632e+01, 2.771148678928619e-01, 0.000000000000000e+00, 2.509464054984751e-01, 5.659768155776936e+01, 0.000000000000000e+00, 5.431767266435860e+01, 2.259749942680681e+01, 0.000000000000000e+00, 1.463508641615167e+02, 2.259749942680681e+01, 0.000000000000000e+00, 1.463508641615166e+02, 6.324503014234192e+05, 0.000000000000000e+00, 5.271019733892687e+05, 5.496562727421005e+05, 0.000000000000000e+00, 4.471116735888455e+05, 3.197159921025622e+03, 0.000000000000000e+00, 2.714904401504723e+03, 2.911560192811907e+06, 0.000000000000000e+00, 3.062094217456303e+06, 8.908246190359765e+05, 0.000000000000000e+00, 4.834051151218385e+06, 8.908246190359765e+05, 0.000000000000000e+00, 4.834051151218379e+06, 8.924768742371638e-04, 0.000000000000000e+00, 8.931185292667896e-04, 8.919770600555195e-04, 0.000000000000000e+00, 8.926352803062284e-04, 8.924464270475136e-04, 0.000000000000000e+00, 8.931000056290367e-04, 8.920175841013226e-04, 0.000000000000000e+00, 8.926610178974752e-04, 8.922228825623769e-04, 0.000000000000000e+00, 8.928761159884677e-04, 8.922228825623769e-04, 0.000000000000000e+00, 8.928761159884677e-04, 1.681014771245246e-02, 0.000000000000000e+00, 1.681269628863544e-02, 1.644412702125274e-02, 0.000000000000000e+00, 1.645755969611644e-02, 1.712573498435997e-02, 0.000000000000000e+00, 1.703717992720586e-02, 1.680069107032818e-02, 0.000000000000000e+00, 1.671020204194981e-02, 1.637657215386190e-02, 0.000000000000000e+00, 1.659362732978037e-02, 1.637657215386190e-02, 0.000000000000000e+00, 1.659362732978037e-02, 6.214155513929877e-01, 0.000000000000000e+00, 6.263773909722783e-01, 4.869557603842461e-01, 0.000000000000000e+00, 4.862931574736049e-01, 8.325516992461210e-01, 0.000000000000000e+00, 7.470881093773013e-01, 7.371961063213970e-01, 0.000000000000000e+00, 6.683382188279615e-01, 5.523843371812366e-01, 0.000000000000000e+00, 6.439399747262756e-01, 5.523843371812368e-01, 0.000000000000000e+00, 6.439399747262758e-01, 1.680322502110340e+02, 0.000000000000000e+00, 1.633153648043942e+02, 2.432715455530025e+01, 0.000000000000000e+00, 2.396654094362242e+01, 2.269837421716149e+02, 0.000000000000000e+00, 1.940019561885622e+02, 1.780193950795826e-02, 0.000000000000000e+00, 1.782595457225113e-02, 1.121634537776805e+02, 0.000000000000000e+00, 9.435182145012413e+01, 1.121634537776805e+02, 0.000000000000000e+00, 9.435182145012413e+01, 6.896246147170695e+06, 0.000000000000000e+00, 6.144157416218541e+06, 3.268601510341825e+06, 0.000000000000000e+00, 3.124571891844912e+06, 7.817219853849012e+06, 0.000000000000000e+00, 6.581441351138420e+06, 6.939684423521389e+02, 0.000000000000000e+00, 6.813232572463984e+02, 7.337213909483019e+06, 0.000000000000000e+00, 2.832798288875730e+06, 7.337213909483017e+06, 0.000000000000000e+00, 2.832798288875732e+06, 6.184655642516127e-01, 0.000000000000000e+00, 6.113483131048588e-01, 6.292686936810393e-01, 0.000000000000000e+00, 6.219547129496448e-01, 6.254503941826527e-01, 0.000000000000000e+00, 6.181833347862691e-01, 6.222962328002316e-01, 0.000000000000000e+00, 6.151314409845747e-01, 6.238720007562847e-01, 0.000000000000000e+00, 6.166568959141232e-01, 6.238720007562847e-01, 0.000000000000000e+00, 6.166568959141232e-01, 6.710491118734169e-01, 0.000000000000000e+00, 6.644380041926748e-01, 1.062460454592638e+00, 0.000000000000000e+00, 1.048770501185330e+00, 9.254286161076486e-01, 0.000000000000000e+00, 9.132160890872123e-01, 8.105979508028869e-01, 0.000000000000000e+00, 8.021068030259340e-01, 8.663681416474144e-01, 0.000000000000000e+00, 8.567845172274138e-01, 8.663681416474144e-01, 0.000000000000000e+00, 8.567845172274138e-01, 4.233638525448552e-01, 0.000000000000000e+00, 4.213009399359828e-01, 1.207679180856774e+01, 0.000000000000000e+00, 1.186942020676453e+01, 7.016998509778441e+00, 0.000000000000000e+00, 6.810034028331159e+00, 3.024385837125076e+00, 0.000000000000000e+00, 2.974767882753505e+00, 4.558073793085399e+00, 0.000000000000000e+00, 4.562901000858759e+00, 4.558073793085403e+00, 0.000000000000000e+00, 4.562901000858760e+00, 1.366818081411902e+00, 0.000000000000000e+00, 1.338966339251527e+00, 3.383498365853440e+03, 0.000000000000000e+00, 3.314985802507890e+03, 1.390172763857115e+03, 0.000000000000000e+00, 1.259415447184266e+03, 3.424824182712280e+00, 0.000000000000000e+00, 3.274449679751296e+00, 3.625707363724646e+02, 0.000000000000000e+00, 3.079851680605962e+02, 3.625707363724646e+02, 0.000000000000000e+00, 3.079851680605963e+02, 2.160802635499018e+05, 0.000000000000000e+00, 1.941851121390783e+05, 1.678524443444068e+08, 0.000000000000000e+00, 1.667067706068541e+08, 1.992427887587956e+07, 0.000000000000000e+00, 1.656041588063657e+07, 4.122466915137551e+02, 0.000000000000000e+00, 3.926655637176916e+02, 8.633543549065115e+06, 0.000000000000000e+00, 3.678861720624852e+06, 8.633543549065135e+06, 0.000000000000000e+00, 3.678861720624864e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
