
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_exp4_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_exp4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.486010507045230e+03, 2.485988251881088e+03, 2.485951538652315e+03, 2.486281397694261e+03, 2.486099702390451e+03, 2.486099702390451e+03, 7.857574097887635e+01, 7.856680560019839e+01, 7.836405959800243e+01, 7.874640113763465e+01, 7.856881821689394e+01, 7.856881821689394e+01, 3.830551221912736e+00, 3.839489595732049e+00, 3.927108292423632e+00, 3.986707183387129e+00, 3.754667402795102e+00, 3.754667402795102e+00, 2.831961253711623e-01, 2.919942251662945e-01, 4.939956246077967e+00, 1.629638082627096e-01, 2.681179503110671e-01, 2.681179503110669e-01, 3.441293748391163e-04, 3.817329492798346e-04, 1.159411640063211e-02, 1.142979244864598e-04, 2.289276281751370e-04, 2.289276281751370e-04, 1.292634187343039e+02, 1.289530203810850e+02, 1.292509585856361e+02, 1.289768734475007e+02, 1.291047763069076e+02, 1.291047763069076e+02, 3.563760064829632e+01, 3.606802885400737e+01, 3.541740799998558e+01, 3.581970861509042e+01, 3.594921933636245e+01, 3.594921933636245e+01, 2.054118135731106e+00, 1.646708195617748e+00, 1.896356619378933e+00, 1.343864799651711e+00, 2.000839008160712e+00, 2.000839008160712e+00, 7.854399190941162e-02, 2.835506210113033e-01, 6.744415874315803e-02, 1.485986521536303e+01, 1.086041882286057e-01, 1.086041882286057e-01, 6.814497465344697e-05, 1.092244174011922e-04, 6.410539702676584e-05, 3.040719033348197e-02, 1.028308399619147e-04, 1.028308399619148e-04, 1.347874465853946e+00, 1.386779083677812e+00, 1.368817348480352e+00, 1.358240806847056e+00, 1.363044486217497e+00, 1.363044486217497e+00, 1.201100998844420e+00, 2.040234676218308e+00, 1.789821387452365e+00, 1.441784838813229e+00, 1.607387972061712e+00, 1.607387972061712e+00, 1.826935833162680e+00, 4.526298844291978e-01, 6.528711950742350e-01, 1.074185117964583e+00, 8.603015895661326e-01, 8.603015895661326e-01, 1.748083267841764e+00, 1.058276467993482e-02, 1.969558850728185e-02, 8.678482895270658e-01, 4.947956428328887e-02, 4.947956428328888e-02, 6.833825991204827e-04, 7.802231991923008e-06, 3.453870406586401e-05, 4.348536323749544e-02, 8.651379289568967e-05, 8.651379289568952e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_exp4_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_exp4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [8.980345680702759e+02, 8.980385233561350e+02, 8.981189466644203e+02, 8.980997753821347e+02, 8.982849649207151e+02, 8.983667753034039e+02, 8.973348572395462e+02, 8.971549727463818e+02, 8.980901412728105e+02, 8.975628303644503e+02, 8.980901412728105e+02, 8.975628303644503e+02, 9.822202367650993e+00, 9.836337216328770e+00, 9.824038746766625e+00, 9.839139760441896e+00, 9.880982052563329e+00, 9.897200911686664e+00, 9.789958155129570e+00, 9.804622780280237e+00, 9.813385841848234e+00, 9.852116363147852e+00, 9.813385841848234e+00, 9.852116363147852e+00, 2.675690791681198e+00, 2.213185624217120e+00, 2.836747949785554e+00, 2.264750146849303e+00, 4.819036074848484e+00, 5.370391403920807e+00, 5.180556812794699e+00, 4.985828661454530e+00, 1.585842943104839e+00, 6.267285925835115e+00, 1.585842943104839e+00, 6.267285925835115e+00, 4.530024624080682e-01, 4.889302926275982e-01, 4.642351938444349e-01, 5.063410605887674e-01, 3.191076941026455e+00, 1.281874242985055e+00, 2.678084591731935e-01, 2.752512390469348e-01, 4.939122477073466e-01, 1.421542530099831e-01, 4.939122477073463e-01, 1.421542530099831e-01, 5.358037914213565e-04, 6.050068477667179e-04, 5.883411963992748e-04, 6.751693399576203e-04, 1.819060506146672e-02, 2.028556105846998e-02, 1.936152388704464e-04, 1.872165992460634e-04, 4.264111750457252e-04, 1.380858647354729e-04, 4.264111750457252e-04, 1.380858647354729e-04, 9.602140557137976e+01, 9.593509069497254e+01, 9.705022572626544e+01, 9.692902543440258e+01, 9.607439680444402e+01, 9.596626211848134e+01, 9.695726592658606e+01, 9.686926857669023e+01, 9.655184980907167e+01, 9.643505203377593e+01, 9.655184980907167e+01, 9.643505203377593e+01, 5.003855962249899e+01, 5.003725033839711e+01, 4.931619076720560e+01, 4.932533571260576e+01, 5.264972980506072e+01, 5.196146634043166e+01, 5.232330416031234e+01, 5.156884396953227e+01, 4.705559088044520e+01, 4.933516066830066e+01, 4.705559088044520e+01, 4.933516066830066e+01, 4.070383213890280e-01, 4.085328994884566e-01, 2.333180079562100e+00, 2.350808776934889e+00, 2.263959777745924e-01, 2.790830585362825e-01, 1.617868526355439e+00, 1.706241056331761e+00, 6.645673633013913e-01, 5.267807502756450e-01, 6.645673633013897e-01, 5.267807502756456e-01, 1.296467465699624e-01, 1.321311925654984e-01, 4.702143103152686e-01, 4.749192938302462e-01, 1.060946661441219e-01, 1.178019950638420e-01, 2.151529714871062e+01, 2.150287982731983e+01, 1.697419299744373e-01, 1.904831331633077e-01, 1.697419299744373e-01, 1.904831331633077e-01, 1.089636264740417e-04, 1.176833878622808e-04, 1.792456949022873e-04, 1.847125358439218e-04, 1.002278699431595e-04, 1.124111458184090e-04, 5.036516223125560e-02, 5.098642663516741e-02, 1.045528633571081e-04, 1.971876073671381e-04, 1.045528633571080e-04, 1.971876073671381e-04, 2.150051509236791e+00, 2.159852839739687e+00, 1.990085588080907e+00, 2.013734346565676e+00, 2.082254230019321e+00, 2.104391861150761e+00, 2.143009517346174e+00, 2.162441758548325e+00, 2.114886270505195e+00, 2.135656439271286e+00, 2.114886270505195e+00, 2.135656439271286e+00, 1.443491071249480e+00, 1.440858335080133e+00, 1.199935554731497e+00, 1.148706735344503e+00, 2.159225293480023e-01, 2.139434171786736e-01, 8.660245523661704e-01, 8.848615445881581e-01, 3.846771842161824e-01, 3.972841669666149e-01, 3.846771842161824e-01, 3.972841669666149e-01, 2.496560502040509e+00, 2.533223525357561e+00, 7.499903324820869e-01, 7.587005196711398e-01, 1.077095356090567e+00, 1.098801851475854e+00, 9.922159710089986e-01, 9.727105784898427e-01, 1.402030610899592e+00, 1.397864810127870e+00, 1.402030610899592e+00, 1.397864810127870e+00, 1.147126427460332e+00, 1.059062940931004e+00, 1.751644908099781e-02, 1.775697308911812e-02, 3.169403510390534e-02, 3.385145767062728e-02, 2.634622447498199e-01, 2.193360975465206e-01, 7.764167318996265e-02, 8.656390707733708e-02, 7.764167318996265e-02, 8.656390707733710e-02, 1.096343512578218e-03, 1.177279092964269e-03, 1.297393163100312e-05, 1.303330502220680e-05, 5.371574998638843e-05, 6.076346888009935e-05, 7.127194307793336e-02, 7.362209547642638e-02, 9.380600967996628e-05, 1.656587610419756e-04, 9.380600967996613e-05, 1.656587610419753e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_exp4_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_exp4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.643321728279535e-05, 0.000000000000000e+00, 1.643326593561074e-05, 1.643287208588340e-05, 0.000000000000000e+00, 1.643301526964679e-05, 1.643198490592089e-05, 0.000000000000000e+00, 1.643168314614736e-05, 1.643587687791932e-05, 0.000000000000000e+00, 1.643664540058559e-05, 1.643300043397231e-05, 0.000000000000000e+00, 1.643482200343295e-05, 1.643300043397231e-05, 0.000000000000000e+00, 1.643482200343295e-05, 3.876369081264948e-03, 0.000000000000000e+00, 3.877957089509092e-03, 3.876512533272275e-03, 0.000000000000000e+00, 3.878211504670400e-03, 3.881035594746253e-03, 0.000000000000000e+00, 3.882119664171750e-03, 3.871189048441387e-03, 0.000000000000000e+00, 3.872639663462807e-03, 3.877746431988003e-03, 0.000000000000000e+00, 3.876480971476936e-03, 3.877746431988003e-03, 0.000000000000000e+00, 3.876480971476936e-03, 2.629657362387779e-01, 0.000000000000000e+00, 2.997216122562824e-01, 2.505751319970350e-01, 0.000000000000000e+00, 2.956457709013158e-01, 1.064914928708649e-01, 0.000000000000000e+00, 6.834460434692988e-02, 8.468165516785768e-02, 0.000000000000000e+00, 9.764796130112847e-02, 3.512097922544888e-01, 0.000000000000000e+00, 2.338299636506865e-03, 3.512097922544888e-01, 0.000000000000000e+00, 2.338299636506865e-03, 1.724343341902356e-13, 0.000000000000000e+00, 1.251122604795137e-10, 9.885601369955574e-12, 0.000000000000000e+00, 5.995323164247920e-09, 1.874859552511114e-01, 0.000000000000000e+00, 2.596601528108467e-01, 1.417015752001017e-63, 0.000000000000000e+00, 3.415686825624357e-61, 1.039622571031261e-12, 0.000000000000000e+00, 7.015000012941388e-246, 1.039622571031238e-12, 0.000000000000000e+00, 7.015000012950950e-246, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 9.660147361012211e-04, 0.000000000000000e+00, 9.669156564060144e-04, 9.603712670135138e-04, 0.000000000000000e+00, 9.614600433461576e-04, 9.657218836427604e-04, 0.000000000000000e+00, 9.667428384710255e-04, 9.608799280143535e-04, 0.000000000000000e+00, 9.617869956073923e-04, 9.631137482219008e-04, 0.000000000000000e+00, 9.641775718618629e-04, 9.631137482219008e-04, 0.000000000000000e+00, 9.641775718618629e-04, 2.168914137211445e-03, 0.000000000000000e+00, 2.168322768726754e-03, 2.472435533865175e-03, 0.000000000000000e+00, 2.465699254422928e-03, 1.419060841065096e-03, 0.000000000000000e+00, 1.617698211163928e-03, 1.624382774774473e-03, 0.000000000000000e+00, 1.836702742962320e-03, 3.052868529030416e-03, 0.000000000000000e+00, 2.417245348837894e-03, 3.052868529030416e-03, 0.000000000000000e+00, 2.417245348837894e-03, 8.173538662126197e-01, 0.000000000000000e+00, 8.237632315916502e-01, 2.721179773033864e-01, 0.000000000000000e+00, 2.643868754791693e-01, 1.067290213582127e+00, 0.000000000000000e+00, 9.791738384585790e-01, 5.329904844024692e-01, 0.000000000000000e+00, 4.952929610657077e-01, 7.101324000361725e-01, 0.000000000000000e+00, 8.370439279161835e-01, 7.101324000361728e-01, 0.000000000000000e+00, 8.370439279161836e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.406473215948862e-34, 0.000000000000000e+00, 6.748761943856441e-34, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 9.295011129289035e-03, 0.000000000000000e+00, 9.293446440016357e-03, 1.170965891193982e-183, 0.000000000000000e+00, 1.433779328706205e-102, 1.170965891193982e-183, 0.000000000000000e+00, 1.433779328706205e-102, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 2.543947581670524e-01, 0.000000000000000e+00, 2.740125106308529e-01, 3.343033372349881e-01, 0.000000000000000e+00, 3.243360628469074e-01, 2.606768730423646e-01, 0.000000000000000e+00, 2.519748718090252e-01, 2.007482761753163e-01, 0.000000000000000e+00, 1.950282695965384e-01, 2.298855293290540e-01, 0.000000000000000e+00, 2.225236295832414e-01, 2.298855293290540e-01, 0.000000000000000e+00, 2.225236295832414e-01, 3.891633702118405e+00, 0.000000000000000e+00, 3.951064369320642e+00, 7.601089874941130e-01, 0.000000000000000e+00, 7.752151013158358e-01, 1.165907902688933e+00, 0.000000000000000e+00, 1.160130080571339e+00, 9.405157936100238e-01, 0.000000000000000e+00, 9.260547275756351e-01, 1.133807288745904e+00, 0.000000000000000e+00, 1.119910770511906e+00, 1.133807288745904e+00, 0.000000000000000e+00, 1.119910770511906e+00, 2.593621562695230e-01, 0.000000000000000e+00, 2.484391142436208e-01, 7.591011976574988e-15, 0.000000000000000e+00, 2.083636477579074e-14, 1.060412006835611e-05, 0.000000000000000e+00, 2.904187983803899e-05, 1.339043103968437e+00, 0.000000000000000e+00, 1.373333921788622e+00, 6.680455635514834e-02, 0.000000000000000e+00, 7.368894850490165e-02, 6.680455635514815e-02, 0.000000000000000e+00, 7.368894850490185e-02, 8.973889274827563e-01, 0.000000000000000e+00, 9.396501173049424e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 3.388013156672643e+00, 0.000000000000000e+00, 3.434681153817229e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
