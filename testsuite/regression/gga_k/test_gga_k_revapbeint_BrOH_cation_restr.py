
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_revapbeint_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_revapbeint", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.179429204159149e+03, 2.179438021497088e+03, 2.179486329933131e+03, 2.179354958914429e+03, 2.179422498519761e+03, 2.179422498519761e+03, 5.890576934680773e+01, 5.890519112044318e+01, 5.889471857796739e+01, 5.893531253019809e+01, 5.890791604211034e+01, 5.890791604211034e+01, 2.292269623429449e+00, 2.290204891807809e+00, 2.249033032053319e+00, 2.282425516744774e+00, 2.272043484402789e+00, 2.272043484402789e+00, 1.922820269511573e-01, 1.954198920238359e-01, 3.080640498535786e+00, 1.295382182945516e-01, 1.521607490037371e-01, 1.521607490037371e-01, 3.695439968679824e-04, 4.093352297854652e-04, 1.212913274139505e-02, 1.233499065732838e-04, 1.947151685286894e-04, 1.947151685286894e-04, 1.276733332225391e+02, 1.276812327574521e+02, 1.276740571033077e+02, 1.276810251368238e+02, 1.276771350428085e+02, 1.276771350428085e+02, 2.041877096384479e+01, 2.065105406213124e+01, 2.035055853103851e+01, 2.055508408089139e+01, 2.058029876133860e+01, 2.058029876133860e+01, 1.660569003372982e+00, 1.872888829937010e+00, 1.433902616517844e+00, 1.477489192031716e+00, 1.703477135254964e+00, 1.703477135254964e+00, 7.238986038539492e-02, 2.128719761719289e-01, 6.295757357468985e-02, 1.697131873750573e+01, 9.203187848013855e-02, 9.203187848013855e-02, 7.344007170847404e-05, 1.178814452962232e-04, 6.891223068856915e-05, 3.036196033452077e-02, 1.000113206551722e-04, 1.000113206551722e-04, 1.584744966678252e+00, 1.582804071184817e+00, 1.583446863375275e+00, 1.583986027347233e+00, 1.583709190765496e+00, 1.583709190765496e+00, 1.495508650392070e+00, 1.231399636328926e+00, 1.300626022140971e+00, 1.372567213237889e+00, 1.334712018764092e+00, 1.334712018764092e+00, 2.061865649521230e+00, 3.129611158960168e-01, 4.134619883231290e-01, 6.244941915981549e-01, 5.046083886246000e-01, 5.046083886246000e-01, 1.046658063757068e+00, 1.115049285795743e-02, 2.029477854913355e-02, 5.605084286497388e-01, 4.659613842224197e-02, 4.659613842224199e-02, 7.354235043377538e-04, 8.425487849828851e-06, 3.711824360059521e-05, 4.170917210508624e-02, 8.563174904263249e-05, 8.563174904263233e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_revapbeint_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_revapbeint", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.332395928045683e+03, 3.332417703685235e+03, 3.332515135711183e+03, 3.332191146901561e+03, 3.332360820151037e+03, 3.332360820151037e+03, 8.730341420771904e+01, 8.730449977468999e+01, 8.733388404836499e+01, 8.731596587862367e+01, 8.730892493536385e+01, 8.730892493536385e+01, 3.175365122610993e+00, 3.166622095200615e+00, 2.963351869532029e+00, 3.014276203483244e+00, 3.004643770231968e+00, 3.004643770231968e+00, 2.167703738089228e-01, 2.213128951621925e-01, 4.339940028665286e+00, 1.497437506370153e-01, 1.709488732344870e-01, 1.709488732344870e-01, 6.148379128655393e-04, 6.808776222486420e-04, 1.933798344879764e-02, 2.054696439218946e-04, 3.242064224832728e-04, 3.242064224832728e-04, 1.998091413493323e+02, 1.999222417337408e+02, 1.998144361444881e+02, 1.999142810099378e+02, 1.998664235102559e+02, 1.998664235102559e+02, 2.662391524688076e+01, 2.703276853736050e+01, 2.629915760672533e+01, 2.665573554717472e+01, 2.701069792148967e+01, 2.701069792148967e+01, 2.499493003755410e+00, 3.037012107076321e+00, 2.129315477788524e+00, 2.370980349173409e+00, 2.590938603894767e+00, 2.590938603894767e+00, 9.606073692515604e-02, 2.399484478497847e-01, 8.524245795752172e-02, 2.756414497034286e+01, 1.120183533429966e-01, 1.120183533429966e-01, 1.223539215311124e-04, 1.963565864490822e-04, 1.147573845990303e-04, 4.487835973509340e-02, 1.665471217750838e-04, 1.665471217750838e-04, 2.617161556204102e+00, 2.570090840792224e+00, 2.586707267091027e+00, 2.600383296717936e+00, 2.593546501696056e+00, 2.593546501696056e+00, 2.481832140357515e+00, 1.713494652825362e+00, 1.914522148212155e+00, 2.132322214207924e+00, 2.019580993468940e+00, 2.019580993468940e+00, 3.334261661571467e+00, 3.514303684286642e-01, 4.827413394525373e-01, 8.481944620364151e-01, 6.316575211575524e-01, 6.316575211575525e-01, 1.450556974367157e+00, 1.787523856126519e-02, 3.149776299156834e-02, 8.002982357018705e-01, 6.383410013159636e-02, 6.383410013159636e-02, 1.221906948642297e-03, 1.404120662082666e-05, 6.184655027417572e-05, 5.828963565048260e-02, 1.426055392749028e-04, 1.426055392749025e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_revapbeint_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_revapbeint", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [7.595171467915859e-07, 7.595111735437720e-07, 7.594820455886243e-07, 7.595709674342931e-07, 7.595247398567960e-07, 7.595247398567960e-07, 1.740104755275176e-04, 1.740113305277587e-04, 1.740180954577862e-04, 1.739069817607992e-04, 1.739989170161608e-04, 1.739989170161608e-04, 2.300868767627126e-02, 2.304068752493479e-02, 2.354710550758069e-02, 2.304493175318140e-02, 2.321028030500473e-02, 2.321028030500473e-02, 7.690156853332091e-01, 7.693021677681343e-01, 1.475058988809623e-02, 8.974869080731773e-01, 8.975965529339910e-01, 8.975965529339909e-01, 1.579251409182177e-01, 1.755825744719089e-01, 5.260060790253397e-01, 8.294507810032568e-02, 1.323808170237873e-01, 1.323808170237876e-01, 5.250456558750247e-05, 5.247263233387665e-05, 5.250300439828085e-05, 5.247481765528260e-05, 5.248845228523445e-05, 5.248845228523445e-05, 8.582815990587540e-04, 8.448230484745732e-04, 8.600212866129094e-04, 8.482536289330745e-04, 8.497977136477552e-04, 8.497977136477552e-04, 3.647934217732861e-02, 2.815557247266365e-02, 4.577759325643323e-02, 4.088100519910873e-02, 3.488496237746618e-02, 3.488496237746618e-02, 8.283403210171700e-01, 5.213129844909519e-01, 8.583415121804682e-01, 1.029171429858762e-03, 1.073669133499547e+00, 1.073669133499547e+00, 8.433473387370632e-02, 9.543075813078872e-02, 4.581873052554145e-01, 9.104017412721268e-01, 2.568665116762860e-01, 2.568665116762854e-01, 3.477485237386712e-02, 3.615095703925909e-02, 3.570475458934864e-02, 3.530623844206997e-02, 3.550914330656782e-02, 3.550914330656782e-02, 3.743302557611708e-02, 5.842764900113376e-02, 5.318818666984997e-02, 4.743856355080736e-02, 5.046638497850799e-02, 5.046638497850799e-02, 2.449326511461989e-02, 3.588391761225673e-01, 2.719010292444923e-01, 1.617212243899821e-01, 2.169507715774053e-01, 2.169507715774053e-01, 7.457233866297205e-02, 4.609863564774775e-01, 6.120056161146104e-01, 1.896678769819837e-01, 1.208673891323047e+00, 1.208673891323049e+00, 1.794612286449410e-01, 1.252239165504125e-01, 1.271962210368685e-01, 1.166822391602294e+00, 3.002197019284340e-01, 3.002197019284344e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
