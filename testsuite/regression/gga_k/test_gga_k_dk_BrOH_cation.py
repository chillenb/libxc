
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_dk_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_dk", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.189205334190332e+03, 2.189213790924583e+03, 2.189261178931841e+03, 2.189135159055326e+03, 2.189199798361431e+03, 2.189199798361431e+03, 5.928910836012790e+01, 5.928846013477769e+01, 5.927637737632737e+01, 5.931990444751108e+01, 5.929119893600534e+01, 5.929119893600534e+01, 2.303353095310711e+00, 2.300669090731087e+00, 2.229162621978238e+00, 2.264683882180571e+00, 2.234078216625651e+00, 2.234078216625651e+00, 1.512271466255858e-01, 1.557735141960166e-01, 3.103579933687479e+00, 1.462911419434763e-01, 1.683484811177259e-01, 1.683484811177259e-01, 7.217813370926309e-01, 7.012712853502736e-01, 7.437785393908927e-01, 7.622298711087154e-01, 6.806120538151124e-01, 6.806120538151115e-01, 1.280260847427640e+02, 1.280293859337403e+02, 1.280266197566318e+02, 1.280295270293627e+02, 1.280275409851589e+02, 1.280275409851589e+02, 2.013866029930361e+01, 2.040846519097000e+01, 1.997017462772290e+01, 2.021225755189343e+01, 2.036376025530953e+01, 2.036376025530953e+01, 1.669881227275460e+00, 1.874084940747190e+00, 1.445241204537248e+00, 1.481140588874169e+00, 1.717034047385516e+00, 1.717034047385516e+00, 3.278153293802317e-01, 1.834704958397806e-01, 3.502086176990700e-01, 1.698097534276473e+01, 1.795026556262602e-01, 1.795026556262602e-01, 6.649611439591370e-01, 7.028880333436622e-01, 2.799533664329136e-01, 4.676435203104490e-01, 4.109729913627170e-01, 4.109729913627176e-01, 1.584898671475429e+00, 1.583750406932142e+00, 1.584035998236092e+00, 1.584342080524859e+00, 1.584174375921184e+00, 1.584174375921184e+00, 1.495556161242211e+00, 1.238085940376897e+00, 1.309526277225521e+00, 1.377118441311665e+00, 1.341724994001677e+00, 1.341724994001677e+00, 2.063453572697924e+00, 2.431442739606506e-01, 3.556890619497108e-01, 6.252924147890681e-01, 4.830671803323248e-01, 4.830671803323248e-01, 1.051857191972659e+00, 8.025922424924931e-01, 6.756413517180919e-01, 5.646875586576312e-01, 2.951533186965171e-01, 2.951533186965170e-01, 7.981079056210499e-01, 3.196783604105274e-01, 4.566112953063771e-01, 3.260582852787947e-01, 3.686252839226711e-01, 3.686252839226707e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_dk_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_dk", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.311395717129120e+03, 3.311387490850577e+03, 3.311420898768874e+03, 3.311405782219551e+03, 3.311500621422528e+03, 3.311520254223088e+03, 3.311216266873746e+03, 3.311157814911837e+03, 3.311410778346792e+03, 3.311302070190637e+03, 3.311410778346792e+03, 3.311302070190637e+03, 8.700658021110925e+01, 8.700593136574709e+01, 8.700733928918082e+01, 8.700646648734951e+01, 8.702358984654703e+01, 8.702890686658507e+01, 8.702367523793509e+01, 8.702796424277332e+01, 8.697681005996408e+01, 8.704565208681720e+01, 8.697681005996408e+01, 8.704565208681720e+01, 3.315454541094093e+00, 3.315801744204170e+00, 3.315011213627144e+00, 3.314235070860741e+00, 3.353922601405308e+00, 3.395748745011081e+00, 3.421558373621484e+00, 3.407314167422903e+00, 3.336041850441439e+00, 3.724094356461715e+00, 3.336041850441439e+00, 3.724094356461715e+00, 2.024104249187764e-01, 2.597566534934567e-01, 2.319350830218418e-01, 2.907301140106636e-01, 4.356313471807651e+00, 4.560539610828516e+00, -2.992612872484200e-01, -2.891482040703151e-01, 2.331907975347016e-01, -7.054350444728666e-01, 2.331907975347016e-01, -7.054350444728662e-01, -7.352326348781024e-01, -7.399640277318239e-01, -7.172870221198825e-01, -7.204281695014265e-01, -1.125150075587606e+00, -1.130766846531902e+00, -7.625271718012775e-01, -7.729494971228114e-01, -7.341548094092528e-01, -4.588741908120891e-01, -7.341548094092534e-01, -4.588741908120874e-01, 1.988691753578310e+02, 1.987718968233957e+02, 1.989931856779088e+02, 1.988916651185899e+02, 1.988762396301042e+02, 1.987761377749546e+02, 1.989826449804863e+02, 1.988849396050420e+02, 1.989325504466568e+02, 1.988320214084016e+02, 1.989325504466568e+02, 1.988320214084016e+02, 3.103063925890994e+01, 3.102821224075954e+01, 3.122826657445434e+01, 3.121735616248541e+01, 3.136329032755504e+01, 3.125477337501346e+01, 3.151800976825418e+01, 3.142117825949715e+01, 3.094097929865480e+01, 3.109434159308465e+01, 3.094097929865480e+01, 3.109434159308465e+01, 2.491573147575151e+00, 2.478595005282371e+00, 3.030928248008482e+00, 3.034897511630130e+00, 2.042566162550987e+00, 2.198900103751981e+00, 2.288204380402259e+00, 2.441449790502542e+00, 2.706415235679703e+00, 2.439786502478352e+00, 2.706415235679703e+00, 2.439786502478352e+00, -9.689467293795956e-01, -9.394001350935739e-01, -1.139629594877333e-01, -1.046268222792070e-01, -1.010184520698181e+00, -9.637815766040486e-01, 2.754287190471664e+01, 2.751869403315755e+01, -6.526955075517635e-01, -4.044039694715585e-01, -6.526955075517635e-01, -4.044039694715585e-01, -6.427176856887892e-01, -6.908495905992333e-01, -6.936004440692478e-01, -7.218152477548548e-01, -2.910112070169163e-01, -2.761851172089160e-01, -1.026752959379433e+00, -1.047287779056094e+00, -4.120851344079133e-01, -4.172260893744582e-01, -4.120851344079111e-01, -4.172260893744596e-01, 2.606452939076358e+00, 2.626950884372403e+00, 2.556584912252745e+00, 2.577244690019517e+00, 2.574370871849132e+00, 2.595082305685813e+00, 2.588981880698428e+00, 2.609431685327611e+00, 2.581703544219418e+00, 2.602278302987691e+00, 2.581703544219418e+00, 2.602278302987691e+00, 2.473518595075225e+00, 2.489937401794674e+00, 1.772986708051142e+00, 1.785284626013865e+00, 1.902821189646971e+00, 1.919996334910409e+00, 2.112693718900286e+00, 2.128195404984476e+00, 1.999527244723474e+00, 2.014906260490458e+00, 1.999527244723474e+00, 2.014906260490458e+00, 3.322447819273975e+00, 3.335384042739594e+00, 3.111768787303765e-01, 3.253709435542519e-01, 6.822944876621647e-01, 6.980104966514619e-01, 9.071548005566838e-01, 9.149631702286272e-01, 8.165170896625581e-01, 8.130800835981085e-01, 8.165170896625579e-01, 8.130800835981080e-01, 1.505917880844550e+00, 1.521190083630846e+00, -1.169124809764637e+00, -1.169723641788376e+00, -1.214241156591965e+00, -1.201486380993851e+00, 7.999431651880425e-01, 8.224308188789784e-01, -8.914831064136712e-01, -7.363063427253072e-01, -8.914831064136710e-01, -7.363063427253069e-01, -8.333805171622916e-01, -8.261886818015213e-01, -3.656315072484818e-01, -2.747732355010062e-01, -4.660024449818527e-01, -4.517877190632446e-01, -8.567317571931000e-01, -8.567333302325736e-01, -2.873247171142467e-01, -4.090578033736407e-01, -2.873247171142457e-01, -4.090578033736424e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_dk_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_dk", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.707895477147174e-06, 0.000000000000000e+00, 1.707902303319946e-06, 1.707881785906190e-06, 0.000000000000000e+00, 1.707892355383163e-06, 1.707830889925548e-06, 0.000000000000000e+00, 1.707821409984835e-06, 1.707985663372379e-06, 0.000000000000000e+00, 1.708018620131311e-06, 1.707887669706247e-06, 0.000000000000000e+00, 1.707934582329967e-06, 1.707887669706247e-06, 0.000000000000000e+00, 1.707934582329967e-06, 3.779101831367795e-04, 0.000000000000000e+00, 3.780547142300321e-04, 3.779228248441672e-04, 0.000000000000000e+00, 3.780776889647015e-04, 3.783314241551347e-04, 0.000000000000000e+00, 3.784309128335298e-04, 3.774363056474821e-04, 0.000000000000000e+00, 3.775636010951595e-04, 3.780487977169765e-04, 0.000000000000000e+00, 3.779035984530283e-04, 3.780487977169765e-04, 0.000000000000000e+00, 3.779035984530283e-04, 3.625875159446956e-02, 0.000000000000000e+00, 3.842152446473539e-02, 3.549140268003790e-02, 0.000000000000000e+00, 3.820418005852310e-02, 2.321677824902798e-02, 0.000000000000000e+00, 1.772117787275311e-02, 2.013331995265107e-02, 0.000000000000000e+00, 2.190001594280864e-02, 4.102879417206990e-02, 0.000000000000000e+00, -8.652475330563642e-03, 4.102879417206990e-02, 0.000000000000000e+00, -8.652475330563642e-03, 6.222765743903222e-01, 0.000000000000000e+00, 1.013993872619821e-02, 2.416992691268575e-01, 0.000000000000000e+00, -2.879598917547143e-01, 2.484724222716739e-02, 0.000000000000000e+00, 2.773740417832499e-02, 1.510608423493856e+01, 0.000000000000000e+00, 1.411362583834615e+01, 3.934335128576186e-01, 0.000000000000000e+00, 7.645308738101755e+01, 3.934335128576195e-01, 0.000000000000000e+00, 7.645308738101750e+01, 6.308833270714370e+05, 0.000000000000000e+00, 5.257888984524271e+05, 5.482867808654585e+05, 0.000000000000000e+00, 4.459886271984327e+05, 3.101938925155336e+03, 0.000000000000000e+00, 2.618005207984214e+03, 2.904479070695115e+06, 0.000000000000000e+00, 3.054648708964135e+06, 8.886343926011784e+05, 0.000000000000000e+00, 4.822282163066006e+06, 8.886343926011786e+05, 0.000000000000000e+00, 4.822282163066000e+06, 1.177202808323179e-04, 0.000000000000000e+00, 1.178066185478956e-04, 1.176116532244004e-04, 0.000000000000000e+00, 1.177016652988457e-04, 1.177141192498780e-04, 0.000000000000000e+00, 1.178029159675588e-04, 1.176209382127409e-04, 0.000000000000000e+00, 1.177075912781684e-04, 1.176649535616496e-04, 0.000000000000000e+00, 1.177541010431631e-04, 1.176649535616496e-04, 0.000000000000000e+00, 1.177541010431631e-04, 5.875001294883208e-04, 0.000000000000000e+00, 5.874109065324610e-04, 6.390775748733609e-04, 0.000000000000000e+00, 6.380726994200481e-04, 4.210747312283035e-04, 0.000000000000000e+00, 4.707144952273875e-04, 4.711302444417987e-04, 0.000000000000000e+00, 5.186540030309443e-04, 7.317681956896246e-04, 0.000000000000000e+00, 6.312112249405315e-04, 7.317681956896246e-04, 0.000000000000000e+00, 6.312112249405315e-04, 8.075144826156525e-02, 0.000000000000000e+00, 8.142935172754061e-02, 6.047589575134022e-02, 0.000000000000000e+00, 6.025087858177752e-02, 1.041841440136405e-01, 0.000000000000000e+00, 9.562112137208510e-02, 9.373947109209453e-02, 0.000000000000000e+00, 8.518497545643430e-02, 7.279817090641340e-02, 0.000000000000000e+00, 8.456445889348430e-02, 7.279817090641338e-02, 0.000000000000000e+00, 8.456445889348431e-02, 1.035319501827797e+02, 0.000000000000000e+00, 9.871511746285650e+01, 3.837783221962815e+00, 0.000000000000000e+00, 3.700301266660868e+00, 1.527988515144175e+02, 0.000000000000000e+00, 1.236607957673746e+02, 2.198091072109816e-03, 0.000000000000000e+00, 2.200776817778236e-03, 5.246673070233393e+01, 0.000000000000000e+00, 3.368609661690553e+01, 5.246673070233393e+01, 0.000000000000000e+00, 3.368609661690553e+01, 6.879497846374382e+06, 0.000000000000000e+00, 6.129235482908055e+06, 3.260651305194492e+06, 0.000000000000000e+00, 3.116972403161794e+06, 7.798166732237026e+06, 0.000000000000000e+00, 6.565370118147650e+06, 5.825553359667408e+02, 0.000000000000000e+00, 5.729074360136609e+02, 7.319369352514975e+06, 0.000000000000000e+00, 2.825864950691903e+06, 7.319369352514977e+06, 0.000000000000000e+00, 2.825864950691904e+06, 7.190264158173947e-02, 0.000000000000000e+00, 7.098896581559981e-02, 7.781218025653590e-02, 0.000000000000000e+00, 7.678765169957331e-02, 7.587003877628394e-02, 0.000000000000000e+00, 7.486633186664354e-02, 7.413763954341732e-02, 0.000000000000000e+00, 7.319161245125422e-02, 7.501580292441043e-02, 0.000000000000000e+00, 7.404080634339942e-02, 7.501580292441043e-02, 0.000000000000000e+00, 7.404080634339942e-02, 7.623700203415593e-02, 0.000000000000000e+00, 7.547165237063100e-02, 9.789808140160926e-02, 0.000000000000000e+00, 9.818743718378016e-02, 1.143090192507908e-01, 0.000000000000000e+00, 1.134796439941064e-01, 1.073175218683179e-01, 0.000000000000000e+00, 1.061742449086066e-01, 1.133374714113312e-01, 0.000000000000000e+00, 1.121819012005606e-01, 1.133374714113312e-01, 0.000000000000000e+00, 1.121819012005606e-01, 5.300855686760658e-02, 0.000000000000000e+00, 5.257001506509953e-02, 3.912833934713053e-01, 0.000000000000000e+00, 3.424797329737302e-01, -2.563759295898573e-01, 0.000000000000000e+00, -2.571568393679218e-01, 2.195109798859176e-01, 0.000000000000000e+00, 2.205679638470080e-01, -2.298283047357073e-02, 0.000000000000000e+00, -1.713666049293993e-02, -2.298283047357055e-02, 0.000000000000000e+00, -1.713666049293866e-02, 1.207673851151558e-01, 0.000000000000000e+00, 1.222217695951104e-01, 3.295277336907701e+03, 0.000000000000000e+00, 3.226544673786172e+03, 1.297315016536084e+03, 0.000000000000000e+00, 1.164581306245564e+03, 3.700235567032965e-01, 0.000000000000000e+00, 3.644704154414992e-01, 2.599236072596951e+02, 0.000000000000000e+00, 1.991403497597528e+02, 2.599236072596952e+02, 0.000000000000000e+00, 1.991403497597528e+02, 2.155192715027559e+05, 0.000000000000000e+00, 1.936751653831263e+05, 1.674452416218789e+08, 0.000000000000000e+00, 1.663023313158740e+08, 1.987592031511691e+07, 0.000000000000000e+00, 1.652021412642362e+07, 2.998852460030981e+02, 0.000000000000000e+00, 2.827124896400453e+02, 8.612510869611802e+06, 0.000000000000000e+00, 3.669878894147884e+06, 8.612510869611824e+06, 0.000000000000000e+00, 3.669878894147898e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
