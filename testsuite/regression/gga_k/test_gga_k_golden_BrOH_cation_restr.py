
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_golden_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_golden", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.344907952568802e+03, 2.344912820576420e+03, 2.344951672313733e+03, 2.344878893452749e+03, 2.344914579634357e+03, 2.344914579634357e+03, 6.496413025669227e+01, 6.496233999604945e+01, 6.492416420396053e+01, 6.501525239309079e+01, 6.496511580342546e+01, 6.496511580342546e+01, 2.673713665455830e+00, 2.675659289600725e+00, 2.748621923258430e+00, 2.783039458485193e+00, 2.766651815528316e+00, 2.766651815528316e+00, 3.131525029766016e-01, 3.105496840099219e-01, 3.541524484980253e+00, 2.997013497657732e-01, 2.940977564353535e-01, 2.940977564353535e-01, 2.109388158584504e-01, 2.052074651047325e-01, 2.708147254999411e-01, 2.213646923774911e-01, 1.963650890051806e-01, 1.963650890051804e-01, 1.348479718949459e+02, 1.348017376207133e+02, 1.348464812157777e+02, 1.348056545818639e+02, 1.348241740444954e+02, 1.348241740444954e+02, 2.522209764780575e+01, 2.540594123615653e+01, 2.537580476074494e+01, 2.553623738355491e+01, 2.525150676610066e+01, 2.525150676610066e+01, 1.808983358432880e+00, 1.920837712264842e+00, 1.578921450403730e+00, 1.528829781284448e+00, 1.840489618756969e+00, 1.840489618756969e+00, 3.041154930690816e-01, 4.245053968298164e-01, 2.922365363208064e-01, 1.738168990508337e+01, 2.659266577587544e-01, 2.659266577587544e-01, 1.928574357447246e-01, 2.040477397433410e-01, 8.141608128485481e-02, 2.488312973253405e-01, 1.193487792922683e-01, 1.193487792922685e-01, 1.598854466025771e+00, 1.621425980309445e+00, 1.613498132442049e+00, 1.606902775989111e+00, 1.610197442675965e+00, 1.610197442675965e+00, 1.501841904105009e+00, 1.430683176637513e+00, 1.442243098641773e+00, 1.458259291465955e+00, 1.447977870882939e+00, 1.447977870882939e+00, 2.119669054106250e+00, 5.252611980480634e-01, 5.981757694866990e-01, 7.413831754308765e-01, 6.527169802289623e-01, 6.527169802289622e-01, 1.220329793130383e+00, 2.840492950924451e-01, 2.816301837262836e-01, 6.371555345276356e-01, 2.300821004898647e-01, 2.300821004898646e-01, 2.348669512596665e-01, 9.212400329914239e-02, 1.324150663920756e-01, 2.305159957300900e-01, 1.061952879131851e-01, 1.061952879131850e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_golden_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_golden", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.170444906592935e+03, 3.170470801842303e+03, 3.170578211928779e+03, 3.170193100844195e+03, 3.170395987459068e+03, 3.170395987459068e+03, 8.122940153664373e+01, 8.123182288657816e+01, 8.129175080521686e+01, 8.121836951699748e+01, 8.123622102618255e+01, 8.123622102618255e+01, 2.765110411462308e+00, 2.751178478791795e+00, 2.393774271887428e+00, 2.445080766022317e+00, 2.443178841432251e+00, 2.443178841432251e+00, 4.947029898708615e-02, 6.314010534562199e-02, 3.853500920989685e+00, -9.070185022859273e-02, -3.055998322528132e-02, -3.055998322528131e-02, -2.104993853691975e-01, -2.047206449240920e-01, -2.559966832664072e-01, -2.212181236974083e-01, -1.961336593159745e-01, -1.961336593159745e-01, 1.928662742753132e+02, 1.930328477618846e+02, 1.928737579669816e+02, 1.930208148549798e+02, 1.929508247717220e+02, 1.929508247717220e+02, 2.107932776548617e+01, 2.156961482862980e+01, 2.043655429410758e+01, 2.086847650936957e+01, 2.166029953959552e+01, 2.166029953959552e+01, 2.352615524235179e+00, 2.990519298119870e+00, 1.984173139701282e+00, 2.321389046704125e+00, 2.456379448610959e+00, 2.456379448610959e+00, -2.033712814489565e-01, -6.078037869148734e-02, -2.060138300228463e-01, 2.716588018621040e+01, -1.271836811093665e-01, -1.271836811093665e-01, -1.927701812198430e-01, -2.039076671016472e-01, -8.133418267882551e-02, -2.098270483654819e-01, -1.192299216557113e-01, -1.192299216557114e-01, 2.603255637381433e+00, 2.532613722988286e+00, 2.557425275186869e+00, 2.577952855328719e+00, 2.567681586702031e+00, 2.567681586702031e+00, 2.475546013786566e+00, 1.500248315228681e+00, 1.771650935048723e+00, 2.049168770183995e+00, 1.907933192829939e+00, 1.907933192829939e+00, 3.278288378645198e+00, 5.534431431447938e-02, 2.392176455498752e-01, 7.195952506149567e-01, 4.521836823816432e-01, 4.521836823816431e-01, 1.263866296882182e+00, -2.704746050042732e-01, -2.563989943456357e-01, 7.205682172243021e-01, -1.668430089508990e-01, -1.668430089508990e-01, -2.339916990432667e-01, -9.211399472860553e-02, -1.323709687630153e-01, -1.747516823550145e-01, -1.060935215553197e-01, -1.060935215553196e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_golden_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_golden", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.867827984790285e-06, 1.867812357484158e-06, 1.867738061495422e-06, 1.867970670307543e-06, 1.867849468927723e-06, 1.867849468927723e-06, 4.328172836084740e-04, 4.328144810404434e-04, 4.327179017603312e-04, 4.326393097686918e-04, 4.327826247990774e-04, 4.327826247990774e-04, 6.031694197018601e-02, 6.051688618400750e-02, 6.560675107579826e-02, 6.399978031242905e-02, 6.433709118463628e-02, 6.433709118463628e-02, 3.503597180044671e+00, 3.349114419028636e+00, 3.804410105233780e-02, 8.007168410481352e+00, 5.654998891560679e+00, 5.654998891560680e+00, 8.305419101067462e+04, 7.122688841617985e+04, 4.241413259729416e+02, 4.311566281332638e+05, 2.173042518456518e+05, 2.173042518456518e+05, 1.289596513778981e-04, 1.288886514925933e-04, 1.289561139707883e-04, 1.288934378348000e-04, 1.289237992978500e-04, 1.289237992978500e-04, 2.428316497237837e-03, 2.376232533512536e-03, 2.467305054100094e-03, 2.420213521984034e-03, 2.381077871473646e-03, 2.381077871473646e-03, 9.011695417444700e-02, 7.029016704287820e-02, 1.137511522168364e-01, 1.012671789973955e-01, 8.589515185216175e-02, 8.589515185216175e-02, 2.392581157679216e+01, 3.487683532871038e+00, 3.021790538441653e+01, 2.573124514479988e-03, 1.480404240542210e+01, 1.480404240542210e+01, 9.386742300013317e+05, 4.614948439211185e+05, 1.032243287437086e+06, 9.931822570519499e+01, 5.904133879806377e+05, 5.904133879806377e+05, 8.881691635428128e-02, 9.036304716280187e-02, 8.981492466376687e-02, 8.936678032711387e-02, 8.959072290441565e-02, 8.959072290441565e-02, 9.644948364082526e-02, 1.524713800548066e-01, 1.327851480176895e-01, 1.164698922530955e-01, 1.244460647313323e-01, 1.244460647313323e-01, 6.100320447427575e-02, 1.729318947758031e+00, 9.983952818610015e-01, 4.332425744421400e-01, 6.587368839408143e-01, 6.587368839408144e-01, 1.953970583735825e-01, 4.837288023449662e+02, 1.908931072122149e+02, 4.835926692976969e-01, 4.810812142531888e+01, 4.810812142531886e+01, 2.954588501509875e+04, 2.416232662095344e+07, 2.612606314698536e+06, 5.809814865615868e+01, 7.452302659055227e+05, 7.452302659055248e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
