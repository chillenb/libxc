
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_pearson_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_pearson", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.172427902347319e+03, 2.172437122399479e+03, 2.172486500361109e+03, 2.172349151281595e+03, 2.172419926368659e+03, 2.172419926368659e+03, 5.851382417855663e+01, 5.851344439988354e+01, 5.850751492707310e+01, 5.854002939400930e+01, 5.851618990777448e+01, 5.851618990777448e+01, 2.231716472679767e+00, 2.227635971827611e+00, 2.115134528770937e+00, 2.150941761127091e+00, 2.143704321189785e+00, 2.143704321189785e+00, 1.392574519913581e-01, 1.439638731923399e-01, 3.021360468407726e+00, 7.879464936607739e-02, 9.989787101657406e-02, 9.989787101657406e-02, 1.647864377939334e-04, 1.825575739539350e-04, 5.556870524974082e-03, 5.496325517659500e-05, 8.678613418061813e-05, 8.678613418061813e-05, 1.274533543467243e+02, 1.274645122713273e+02, 1.274542127899559e+02, 1.274640581026831e+02, 1.274588208716934e+02, 1.274588208716934e+02, 1.901407013219553e+01, 1.930403394466016e+01, 1.877750065264754e+01, 1.903543754852319e+01, 1.928551697514053e+01, 1.928551697514053e+01, 1.652801406301245e+00, 1.872152261062497e+00, 1.424769081265986e+00, 1.476463846590900e+00, 1.697251319382321e+00, 1.697251319382321e+00, 3.781170207257394e-02, 1.376939211883705e-01, 3.235499357139633e-02, 1.696531925091771e+01, 5.216055778376252e-02, 5.216055778376252e-02, 3.272044687097438e-05, 5.252724078465601e-05, 3.071197744874365e-05, 1.462904237776261e-02, 4.457161397594970e-05, 4.457161397594970e-05, 1.584661492418141e+00, 1.582234961152484e+00, 1.583091628901272e+00, 1.583773665806077e+00, 1.583429432950847e+00, 1.583429432950847e+00, 1.495490240075715e+00, 1.201452854780247e+00, 1.290559736736030e+00, 1.369649852029245e+00, 1.329191792285757e+00, 1.329191792285757e+00, 2.060905383604957e+00, 2.222336351122366e-01, 3.283312292849838e-01, 6.012285276289437e-01, 4.482184329524586e-01, 4.482184329524586e-01, 1.019242557394911e+00, 5.090581555784151e-03, 9.462186919597318e-03, 5.522443084766803e-01, 2.372810121204557e-02, 2.372810121204558e-02, 3.282196087448002e-04, 3.753213951575136e-06, 1.653661090869760e-05, 2.092055220510572e-02, 3.816238441125910e-05, 3.816238441125903e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_pearson_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_pearson", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.360417959106817e+03, 3.360437588510379e+03, 3.360529221727110e+03, 3.360237097677373e+03, 3.360389537637850e+03, 3.360389537637850e+03, 8.926460930183575e+01, 8.926443709754102e+01, 8.926502667462687e+01, 8.929814980120014e+01, 8.926870657863634e+01, 8.926870657863634e+01, 3.533259947524690e+00, 3.535669148556342e+00, 3.636874807300104e+00, 3.683605660289714e+00, 3.662464589555209e+00, 3.662464589555209e+00, 2.482981943150416e-01, 2.585769428976622e-01, 4.691549508307277e+00, 1.335469814917224e-01, 1.720873224933197e-01, 1.720873224933197e-01, 2.746440860517479e-04, 3.042626563963992e-04, 9.262009206891500e-03, 9.160542607053720e-05, 1.446435608525140e-04, 1.446435608525140e-04, 2.005593480140337e+02, 2.006593042278370e+02, 2.005640979677945e+02, 2.006523348441836e+02, 2.006099050546322e+02, 2.006099050546322e+02, 3.328115343629550e+01, 3.356741944219051e+01, 3.333841189650239e+01, 3.361426336442190e+01, 3.338613049906415e+01, 3.338613049906415e+01, 2.534511829591137e+00, 3.039377057076842e+00, 2.174471348708997e+00, 2.374231270646681e+00, 2.616888428340190e+00, 2.616888428340190e+00, 6.319340815399542e-02, 2.362859575533892e-01, 5.403950548328557e-02, 2.758348674390988e+01, 8.763625833308719e-02, 8.763625833308719e-02, 5.453407833401362e-05, 8.754540210516320e-05, 5.118663008260991e-05, 2.439479819195953e-02, 7.428602471763549e-05, 7.428602471763549e-05, 2.617450604111320e+00, 2.571924371430860e+00, 2.587874664701515e+00, 2.601096190481475e+00, 2.594475236529846e+00, 2.594475236529846e+00, 2.481897772102021e+00, 1.891140035378310e+00, 1.966901013641553e+00, 2.142725931067004e+00, 2.043515701101974e+00, 2.043515701101974e+00, 3.337327225821634e+00, 3.930508160522938e-01, 6.085449029021915e-01, 9.805847700577868e-01, 8.275665628126205e-01, 8.275665628126203e-01, 1.612669791453309e+00, 8.484690713750104e-03, 1.577292965746898e-02, 8.484519458615151e-01, 3.961850719502249e-02, 3.961850719502250e-02, 5.470328284144414e-04, 6.255356587385035e-06, 2.756101824022864e-05, 3.491523076382500e-02, 6.360397514796900e-05, 6.360397514796888e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_pearson_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_pearson", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([6.590261690634603e-07, 6.590257477589538e-07, 6.590140017453541e-07, 6.590204518102389e-07, 6.590184858439304e-07, 6.590184858439304e-07, 1.321687617101693e-04, 1.321869511360308e-04, 1.325957639246534e-04, 1.318075146743378e-04, 1.321810099288723e-04, 1.321810099288723e-04, 6.643738229503026e-03, 6.272468202332171e-03, -3.348950307639690e-03, -2.880089328865710e-03, -2.659777182656471e-03, -2.659777182656471e-03, -1.201540094907136e-01, -1.373505654810337e-01, 6.387929026845197e-03, -3.015305946228934e-02, -6.071629944969537e-02, -6.071629944969531e-02, -3.407768096904183e-06, -4.317367649664756e-06, -3.347849307946223e-04, -5.670825621525375e-07, -1.612864091941291e-06, -1.612864091941296e-06, 4.798682737970378e-05, 4.799828420553493e-05, 4.798708916556351e-05, 4.799721734305862e-05, 4.799287057577870e-05, 4.799287057577870e-05, -1.843511867664477e-04, -1.594588830587092e-04, -2.305800296518198e-04, -2.107077653683130e-04, -1.449710980128704e-04, -1.449710980128704e-04, 2.995348788740243e-02, 2.695808715073076e-02, 3.516821324589531e-02, 3.866505733649952e-02, 2.977904432777040e-02, 2.977904432777040e-02, -5.858395899790076e-03, -3.085114565702526e-02, -4.992881006234190e-03, 9.873119765650882e-04, -1.821960770382616e-02, -1.821960770382616e-02, -3.938037869016953e-07, -6.764817747931082e-07, -4.762793985776020e-06, -2.077005121919507e-03, -2.643378785418300e-06, -2.643378785418291e-06, 3.415651463327653e-02, 3.467010191340634e-02, 3.450521467091375e-02, 3.435492514807320e-02, 3.443156109096786e-02, 3.443156109096786e-02, 3.709551471381439e-02, 1.918884105184923e-02, 3.866030909362386e-02, 4.277504805539609e-02, 4.230684651911588e-02, 4.230684651911588e-02, 2.337480219744295e-02, -4.778595240819281e-02, -8.080293633563079e-02, 1.801900532667367e-02, -8.345724274840793e-02, -8.345724274840789e-02, 2.184030027435762e-02, -2.523829786033391e-04, -6.886111021409757e-04, 1.019371375442650e-01, -6.265518993106484e-03, -6.265518993106490e-03, -6.952518595130696e-06, -1.403068272148397e-07, -4.370784757366541e-07, -4.952211642301484e-03, -2.972657977736988e-06, -2.972657977736991e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
