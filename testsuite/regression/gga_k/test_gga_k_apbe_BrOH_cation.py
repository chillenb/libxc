
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_apbe_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_apbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.195052924357480e+03, 2.195061691343810e+03, 2.195110023286804e+03, 2.194979395772104e+03, 2.195046511506002e+03, 2.195046511506002e+03, 5.933880488282744e+01, 5.933823342059726e+01, 5.932793036019508e+01, 5.936838530208818e+01, 5.934099016456548e+01, 5.934099016456548e+01, 2.303591523621376e+00, 2.301267791585453e+00, 2.250851229781611e+00, 2.284718240688020e+00, 2.284066467684599e+00, 2.284066467684599e+00, 1.849656609462768e-01, 1.887748680579878e-01, 3.102540425266934e+00, 1.184376005520884e-01, 1.772981519949628e-01, 1.772981519949628e-01, 2.984686077104490e-04, 3.310561229344811e-04, 9.913267264220954e-03, 9.917089452510968e-05, 1.985837645366856e-04, 1.985837645366856e-04, 1.284885364976534e+02, 1.284934207113847e+02, 1.284891394201125e+02, 1.284934451688535e+02, 1.284908053933260e+02, 1.284908053933260e+02, 2.041099181822947e+01, 2.065229726292802e+01, 2.032132611700179e+01, 2.053420492149316e+01, 2.058779580867535e+01, 2.058779580867535e+01, 1.672837419968649e+00, 1.879986554067380e+00, 1.446640203163936e+00, 1.486488527266341e+00, 1.721148144757286e+00, 1.721148144757286e+00, 6.248207838072295e-02, 1.984580084050082e-01, 5.413107371723140e-02, 1.703273891285948e+01, 8.224416463742558e-02, 8.224416463742558e-02, 5.912952286845130e-05, 9.476824690710643e-05, 5.561588215951705e-05, 2.530685446985469e-02, 8.920929124409598e-05, 8.920929124409601e-05, 1.587161489608910e+00, 1.588603624467447e+00, 1.588168685323175e+00, 1.587725385656453e+00, 1.587950185573386e+00, 1.587950185573386e+00, 1.496640956917752e+00, 1.237820745965355e+00, 1.310116290442451e+00, 1.381784067195276e+00, 1.344521102471049e+00, 1.344521102471049e+00, 2.070269341159895e+00, 2.992610021061384e-01, 4.045278725118018e-01, 6.267201426137092e-01, 5.016264950004466e-01, 5.016264950004465e-01, 1.051907186154574e+00, 9.066243045942335e-03, 1.668468304039426e-02, 5.642999409065007e-01, 3.990409466783106e-02, 3.990409466783107e-02, 5.924453055993348e-04, 6.770639722281826e-06, 2.997024426675498e-05, 3.539557832540965e-02, 7.505619889655720e-05, 7.505619889655707e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_apbe_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_apbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.346086141724321e+03, 3.346077714835264e+03, 3.346110152656147e+03, 3.346095156545399e+03, 3.346188039313521e+03, 3.346206462841285e+03, 3.345916853105762e+03, 3.345860822287776e+03, 3.346100408289252e+03, 3.345999769438632e+03, 3.346100408289252e+03, 3.345999769438632e+03, 8.808870656095301e+01, 8.808869296979211e+01, 8.808955652816050e+01, 8.808935444371592e+01, 8.810829046629274e+01, 8.811423602692042e+01, 8.810428337159443e+01, 8.810937861014780e+01, 8.805830818402217e+01, 8.812939208497285e+01, 8.805830818402217e+01, 8.812939208497285e+01, 3.234947427437943e+00, 3.262348875748628e+00, 3.224413308674852e+00, 3.257859062173162e+00, 3.090625118105381e+00, 3.050411286217552e+00, 3.114778095423545e+00, 3.127623549660044e+00, 3.316007878685195e+00, 2.936385151942355e+00, 3.316007878685195e+00, 2.936385151942355e+00, 2.287739662519264e-01, 2.428067887770120e-01, 2.321149305806387e-01, 2.487439362721243e-01, 4.269942784442770e+00, 4.575601428186005e+00, 1.565705849618127e-01, 1.602668217574449e-01, 2.482835098650659e-01, 9.548942935409276e-02, 2.482835098650659e-01, 9.548942935409277e-02, 4.643339342936311e-04, 5.242168021608312e-04, 5.097740519751387e-04, 5.848755754803974e-04, 1.523029791984542e-02, 1.691249019271360e-02, 1.679407738566269e-04, 1.623942142569329e-04, 3.696374425255510e-04, 1.197642750932868e-04, 3.696374425255510e-04, 1.197642750932868e-04, 2.001193257373597e+02, 2.000222456019449e+02, 2.002241592261469e+02, 2.001234878467768e+02, 2.001254137578310e+02, 2.000259137047734e+02, 2.002153628863021e+02, 2.001178843983118e+02, 2.001728069561220e+02, 2.000730517936105e+02, 2.001728069561220e+02, 2.000730517936105e+02, 2.766643681852470e+01, 2.766366571417113e+01, 2.806678338419542e+01, 2.805170060821489e+01, 2.735400359242090e+01, 2.743934697049854e+01, 2.769501937297239e+01, 2.778648856849917e+01, 2.813323925479277e+01, 2.789966578178011e+01, 2.813323925479277e+01, 2.789966578178011e+01, 2.522130663756396e+00, 2.508945828514819e+00, 3.032151881702159e+00, 3.035853386753584e+00, 2.067540554862175e+00, 2.226591647243984e+00, 2.291949693224960e+00, 2.445853015770781e+00, 2.736031369652953e+00, 2.467744468814579e+00, 2.736031369652954e+00, 2.467744468814580e+00, 9.120274313318921e-02, 9.242848923216317e-02, 2.578836912698490e-01, 2.599441227802610e-01, 7.667731881897114e-02, 8.371637826979365e-02, 2.754826513047637e+01, 2.752396651567797e+01, 1.108628386016990e-01, 1.171964470449249e-01, 1.108628386016990e-01, 1.171964470449249e-01, 9.452946630954228e-05, 1.020939853957067e-04, 1.554753873201015e-04, 1.602180183312327e-04, 8.692222925166173e-05, 9.747657010096371e-05, 3.930292703137799e-02, 3.981421810235360e-02, 9.068860165027548e-05, 1.709686235495651e-04, 9.068860165027548e-05, 1.709686235495651e-04, 2.604988686740759e+00, 2.625487815491356e+00, 2.557211880077006e+00, 2.577740333029243e+00, 2.573686440082687e+00, 2.594312578938122e+00, 2.587656169967116e+00, 2.608069393514752e+00, 2.580642541721111e+00, 2.601158886822071e+00, 2.580642541721111e+00, 2.601158886822071e+00, 2.472608909590501e+00, 2.489027720616701e+00, 1.743480790325532e+00, 1.758878820791766e+00, 1.925139268947450e+00, 1.942996882295472e+00, 2.129116792383024e+00, 2.144486926401320e+00, 2.023207843038743e+00, 2.038616384009521e+00, 2.023207843038743e+00, 2.038616384009521e+00, 3.324949626060295e+00, 3.337377638518132e+00, 3.808378548558583e-01, 3.843566215295225e-01, 5.150884565289223e-01, 5.236078341041794e-01, 8.670714363464311e-01, 8.767200810013958e-01, 6.646100813973512e-01, 6.639237462469396e-01, 6.646100813973511e-01, 6.639237462469393e-01, 1.473471443202207e+00, 1.494206971776994e+00, 1.470744603996241e-02, 1.490235044751747e-02, 2.592217603547624e-02, 2.755675557412596e-02, 8.007816679790154e-01, 8.256966528506291e-01, 5.726387712264989e-02, 6.178487178421133e-02, 5.726387712264988e-02, 6.178487178421135e-02, 9.490279365459275e-04, 1.018870594714379e-03, 1.125813814890463e-05, 1.130940620070808e-05, 4.660490299222666e-05, 5.271774613671325e-05, 5.282197882256195e-02, 5.437672187490912e-02, 8.135565535442055e-05, 1.436504368214904e-04, 8.135565535442041e-05, 1.436504368214901e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_apbe_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_apbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.581585280071845e-06, 0.000000000000000e+00, 1.581592051753844e-06, 1.581578246997925e-06, 0.000000000000000e+00, 1.581586937579814e-06, 1.581541627654597e-06, 0.000000000000000e+00, 1.581538417765191e-06, 1.581621412730722e-06, 0.000000000000000e+00, 1.581639996613633e-06, 1.581581798396872e-06, 0.000000000000000e+00, 1.581589006308444e-06, 1.581581798396872e-06, 0.000000000000000e+00, 1.581589006308444e-06, 3.459333435397420e-04, 0.000000000000000e+00, 3.460396864624639e-04, 3.459416424615996e-04, 0.000000000000000e+00, 3.460558606752657e-04, 3.462223717565043e-04, 0.000000000000000e+00, 3.462899069029116e-04, 3.455682465177446e-04, 0.000000000000000e+00, 3.456550800961302e-04, 3.460705804261769e-04, 0.000000000000000e+00, 3.458817002510394e-04, 3.460705804261769e-04, 0.000000000000000e+00, 3.458817002510394e-04, 4.201141078779324e-02, 0.000000000000000e+00, 4.224802324135048e-02, 4.195316113419124e-02, 0.000000000000000e+00, 4.224604021588674e-02, 4.109315318854329e-02, 0.000000000000000e+00, 4.057928322250615e-02, 3.998278183395575e-02, 0.000000000000000e+00, 4.016088304172707e-02, 4.235711336541998e-02, 0.000000000000000e+00, 3.664149303559389e-02, 4.235711336541998e-02, 0.000000000000000e+00, 3.664149303559389e-02, 1.077946468653609e+00, 0.000000000000000e+00, 1.057004957429045e+00, 1.098952911848106e+00, 0.000000000000000e+00, 1.068699284023034e+00, 2.797295843418347e-02, 0.000000000000000e+00, 2.702704524988320e-02, 1.065654560189689e+00, 0.000000000000000e+00, 1.047097578178848e+00, 9.715616093383820e-01, 0.000000000000000e+00, 1.076958503844999e+00, 9.715616093383816e-01, 0.000000000000000e+00, 1.076958503845000e+00, 1.285223895280318e-01, 0.000000000000000e+00, 1.352048337197279e-01, 1.419049180659505e-01, 0.000000000000000e+00, 1.512435199139008e-01, 4.394587118465899e-01, 0.000000000000000e+00, 4.668540682550336e-01, 7.075555969192085e-02, 0.000000000000000e+00, 6.768760447395129e-02, 1.144575582160167e-01, 0.000000000000000e+00, 1.652493969677931e-01, 1.144575582160170e-01, 0.000000000000000e+00, 1.652493969677935e-01, 1.138454194304979e-04, 0.000000000000000e+00, 1.139229991289168e-04, 1.138866688926853e-04, 0.000000000000000e+00, 1.139629251199611e-04, 1.138469105828938e-04, 0.000000000000000e+00, 1.139237973859801e-04, 1.138823177614275e-04, 0.000000000000000e+00, 1.139600782591664e-04, 1.138671992238853e-04, 0.000000000000000e+00, 1.139431830515526e-04, 1.138671992238853e-04, 0.000000000000000e+00, 1.139431830515526e-04, 1.472197113616361e-03, 0.000000000000000e+00, 1.472379500899393e-03, 1.454869030089493e-03, 0.000000000000000e+00, 1.455708156786488e-03, 1.459012409504068e-03, 0.000000000000000e+00, 1.463447205568114e-03, 1.444735338036601e-03, 0.000000000000000e+00, 1.448466213894008e-03, 1.470724061240413e-03, 0.000000000000000e+00, 1.464967221042256e-03, 1.470724061240413e-03, 0.000000000000000e+00, 1.464967221042256e-03, 7.383082192105139e-02, 0.000000000000000e+00, 7.445835519174081e-02, 6.618960681788015e-02, 0.000000000000000e+00, 6.620030203321789e-02, 9.555593175904632e-02, 0.000000000000000e+00, 8.733602117108610e-02, 9.849554399833911e-02, 0.000000000000000e+00, 8.911832078582307e-02, 6.716287697013425e-02, 0.000000000000000e+00, 7.771843625821770e-02, 6.716287697013426e-02, 0.000000000000000e+00, 7.771843625821771e-02, 8.183924654078043e-01, 0.000000000000000e+00, 8.400610492562739e-01, 6.535974911910769e-01, 0.000000000000000e+00, 6.508818509509156e-01, 8.332929156740976e-01, 0.000000000000000e+00, 8.531941597374838e-01, 2.428647218691554e-03, 0.000000000000000e+00, 2.432115111474722e-03, 1.027661440766801e+00, 0.000000000000000e+00, 1.303527710220374e+00, 1.027661440766801e+00, 0.000000000000000e+00, 1.303527710220374e+00, 7.451269995707058e-02, 0.000000000000000e+00, 6.702423467086087e-02, 8.229428512301232e-02, 0.000000000000000e+00, 7.713031058455443e-02, 3.505328020954756e-01, 0.000000000000000e+00, 4.129731759139441e-01, 8.454685572669840e-01, 0.000000000000000e+00, 8.196091966602755e-01, 1.780298410380803e-01, 0.000000000000000e+00, 2.401694095526955e-01, 1.780298410380798e-01, 0.000000000000000e+00, 2.401694095526951e-01, 8.704379270169849e-02, 0.000000000000000e+00, 8.608801426392791e-02, 8.577052349895750e-02, 0.000000000000000e+00, 8.485633191563614e-02, 8.621437458878101e-02, 0.000000000000000e+00, 8.528862332920824e-02, 8.658990103877641e-02, 0.000000000000000e+00, 8.564631311008210e-02, 8.640236398000876e-02, 0.000000000000000e+00, 8.546741288580469e-02, 8.640236398000876e-02, 0.000000000000000e+00, 8.546741288580469e-02, 9.536410815155015e-02, 0.000000000000000e+00, 9.443174854209875e-02, 1.080032457727034e-01, 0.000000000000000e+00, 1.070651760075064e-01, 1.052739237520050e-01, 0.000000000000000e+00, 1.043001708840202e-01, 1.019800020728234e-01, 0.000000000000000e+00, 1.010249408518074e-01, 1.038882060440577e-01, 0.000000000000000e+00, 1.028804758499221e-01, 1.038882060440577e-01, 0.000000000000000e+00, 1.028804758499221e-01, 5.723084612424093e-02, 0.000000000000000e+00, 5.708619229584070e-02, 4.909275593489851e-01, 0.000000000000000e+00, 4.887896275791566e-01, 4.088988758676713e-01, 0.000000000000000e+00, 4.068889925863692e-01, 2.916207627784702e-01, 0.000000000000000e+00, 2.880057953774952e-01, 3.550126683955681e-01, 0.000000000000000e+00, 3.569749161623728e-01, 3.550126683955681e-01, 0.000000000000000e+00, 3.569749161623731e-01, 1.374686751400347e-01, 0.000000000000000e+00, 1.357776557719167e-01, 3.943639641595196e-01, 0.000000000000000e+00, 3.975466846362168e-01, 5.235738641246558e-01, 0.000000000000000e+00, 5.529510662639797e-01, 3.656728917430245e-01, 0.000000000000000e+00, 3.536419243825547e-01, 1.047067564922336e+00, 0.000000000000000e+00, 1.294650286676050e+00, 1.047067564922337e+00, 0.000000000000000e+00, 1.294650286676051e+00, 1.457168651630157e-01, 0.000000000000000e+00, 1.541546004141825e-01, 7.910612450594662e-02, 0.000000000000000e+00, 1.404451933269006e-01, 9.934571825053055e-02, 0.000000000000000e+00, 1.124850824381167e-01, 1.119248054916411e+00, 0.000000000000000e+00, 1.113835133467699e+00, 3.476765369037164e-01, 0.000000000000000e+00, 2.285217065486372e-01, 3.476765369037167e-01, 0.000000000000000e+00, 2.285217065486375e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
