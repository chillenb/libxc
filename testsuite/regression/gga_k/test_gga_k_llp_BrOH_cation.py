
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_llp_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_llp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.194680162450147e+03, 2.194689145640453e+03, 2.194738087937815e+03, 2.194604250634272e+03, 2.194673098218092e+03, 2.194673098218092e+03, 5.924629450577727e+01, 5.924578773136761e+01, 5.923697375270600e+01, 5.927480195265586e+01, 5.924855281154036e+01, 5.924855281154036e+01, 2.291933905204025e+00, 2.289397453495783e+00, 2.233787933874381e+00, 2.267631633674938e+00, 2.268646098251558e+00, 2.268646098251558e+00, 1.843696553479778e-01, 1.878401041410262e-01, 3.089635830673161e+00, 1.235354253651284e-01, 1.781030829973487e-01, 1.781030829973486e-01, 1.873006768710673e-03, 1.972570865178321e-03, 1.916172295568704e-02, 9.902936832226965e-04, 1.425745115987634e-03, 1.425745115987633e-03, 1.285705183898507e+02, 1.285772541814354e+02, 1.285711984774337e+02, 1.285771392906178e+02, 1.285737332736272e+02, 1.285737332736272e+02, 2.024638859014566e+01, 2.048938375994621e+01, 2.014963339778961e+01, 2.036372913787190e+01, 2.042788618242735e+01, 2.042788618242735e+01, 1.671437314118751e+00, 1.882110030718678e+00, 1.444529856769341e+00, 1.488154357582244e+00, 1.720502811991401e+00, 1.720502811991401e+00, 7.413903359951521e-02, 2.022437298649202e-01, 6.582187307661799e-02, 1.705176262408619e+01, 8.953038168373498e-02, 8.953038168373498e-02, 6.908705880855652e-04, 9.326644529932158e-04, 4.671073671263818e-04, 3.598247296617779e-02, 7.180853063322092e-04, 7.180853063322097e-04, 1.588209271818057e+00, 1.590381406922798e+00, 1.589807894258981e+00, 1.589160351894391e+00, 1.589498412269172e+00, 1.589498412269172e+00, 1.497186911753129e+00, 1.231851139264247e+00, 1.307636069086921e+00, 1.382352247963654e+00, 1.343707303609689e+00, 1.343707303609689e+00, 2.072633076297780e+00, 2.990212775282380e-01, 4.007324441959854e-01, 6.229036854412269e-01, 4.968119736349209e-01, 4.968119736349208e-01, 1.046608739188618e+00, 1.832039379845447e-02, 2.776221081708513e-02, 5.623468880027022e-01, 4.930709350938779e-02, 4.930709350938781e-02, 2.967398136033979e-03, 1.446245160675607e-04, 3.971158687211304e-04, 4.508694935130551e-02, 6.240877830242029e-04, 6.240877830242021e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_llp_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_llp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.365076557200664e+03, 3.365068021061307e+03, 3.365099934410768e+03, 3.365085002837321e+03, 3.365176829438132e+03, 3.365194598162633e+03, 3.364912773058668e+03, 3.364858053463457e+03, 3.365090393496996e+03, 3.364994126956112e+03, 3.365090393496996e+03, 3.364994126956112e+03, 8.878509285397833e+01, 8.878431270009365e+01, 8.878585362438808e+01, 8.878483450114651e+01, 8.880190776193976e+01, 8.880715587397832e+01, 8.880276049447424e+01, 8.880705606029957e+01, 8.875475587637538e+01, 8.882474256773463e+01, 8.875475587637538e+01, 8.882474256773463e+01, 3.266985685642516e+00, 3.294856065618674e+00, 3.256214612827498e+00, 3.290313141647796e+00, 3.116103311985248e+00, 3.071984439089708e+00, 3.138798936218491e+00, 3.152892753245368e+00, 3.348829711975011e+00, 2.926253721698008e+00, 3.348829711975011e+00, 2.926253721698008e+00, 2.134933466966708e-01, 2.294535467231906e-01, 2.182307392746597e-01, 2.370090810031287e-01, 4.312414720862090e+00, 4.619393423141169e+00, 1.324270639754937e-01, 1.358815209086098e-01, 2.324969894115926e-01, 7.573441181752390e-02, 2.324969894115924e-01, 7.573441181752390e-02, 1.095504020686902e-03, 1.190797310716501e-03, 1.156777889094536e-03, 1.270728221254207e-03, 1.473657366930516e-02, 1.600048890791026e-02, 5.689947075664101e-04, 5.595176050111789e-04, 9.406375655632908e-04, 3.821259880048629e-04, 9.406375655632884e-04, 3.821259880048631e-04, 2.008658067104892e+02, 2.007687230523432e+02, 2.009621953968407e+02, 2.008618070449888e+02, 2.008714655305336e+02, 2.007721393970029e+02, 2.009541679178625e+02, 2.008566982195005e+02, 2.009149304436774e+02, 2.008154256154819e+02, 2.009149304436774e+02, 2.008154256154819e+02, 2.785137416945989e+01, 2.784855239316625e+01, 2.826599836434228e+01, 2.825054364841895e+01, 2.750259776745857e+01, 2.759918156001806e+01, 2.785777613468816e+01, 2.795987337996125e+01, 2.834865844874862e+01, 2.809533764108673e+01, 2.834865844874862e+01, 2.809533764108673e+01, 2.539479227066068e+00, 2.526153905242001e+00, 3.034730996934195e+00, 3.038260277111031e+00, 2.084273451600215e+00, 2.243247215103380e+00, 2.295526707702890e+00, 2.449884314935530e+00, 2.752262370070877e+00, 2.483156285978844e+00, 2.752262370070877e+00, 2.483156285978845e+00, 7.166252201830024e-02, 7.267215935235567e-02, 2.270743877525447e-01, 2.291937652722800e-01, 6.021094420441237e-02, 6.573161484894519e-02, 2.756790465649584e+01, 2.754350937909677e+01, 8.876004321653951e-02, 9.637187789089685e-02, 8.876004321653951e-02, 9.637187789089685e-02, 3.703484764124936e-04, 3.992916085036261e-04, 5.234742115717430e-04, 5.413281636955079e-04, 2.645399671372247e-04, 2.799781952515353e-04, 3.191511801511093e-02, 3.235171250457542e-02, 3.073434016386969e-04, 4.665379717115649e-04, 3.073434016386974e-04, 4.665379717115652e-04, 2.604729079608195e+00, 2.625210820792067e+00, 2.559120623786338e+00, 2.579571875503394e+00, 2.574620021666828e+00, 2.595183039425213e+00, 2.587927226649048e+00, 2.608304534516473e+00, 2.581223855061877e+00, 2.601691499545099e+00, 2.581223855061877e+00, 2.601691499545099e+00, 2.472270638356910e+00, 2.488688140071553e+00, 1.760851053132800e+00, 1.776407930656887e+00, 1.941237296654788e+00, 1.959014727871075e+00, 2.138458493241412e+00, 2.153782748297778e+00, 2.036383144117694e+00, 2.051777854524847e+00, 2.036383144117694e+00, 2.051777854524847e+00, 3.328495945017363e+00, 3.340623347354912e+00, 3.539658053264423e-01, 3.578556186730241e-01, 5.011976055164420e-01, 5.109368760122314e-01, 8.753081243042495e-01, 8.851041361848249e-01, 6.646911631489882e-01, 6.642076934748550e-01, 6.646911631489881e-01, 6.642076934748549e-01, 1.488107081181815e+00, 1.509087587956905e+00, 1.447541679005231e-02, 1.462366615033737e-02, 2.282737368821557e-02, 2.396330719215558e-02, 8.085403339606484e-01, 8.335642969437579e-01, 4.509018172253579e-02, 4.850485562750612e-02, 4.509018172253580e-02, 4.850485562750614e-02, 1.849630027460881e-03, 1.936380103588085e-03, 7.974681803372102e-05, 7.154171642623260e-05, 2.104271647988950e-04, 2.248176557863974e-04, 4.164083417985007e-02, 4.283042813311768e-02, 2.522635137407807e-04, 4.133159273730422e-04, 2.522635137407806e-04, 4.133159273730413e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_llp_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_llp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.482278296724311e-06, 0.000000000000000e+00, 1.482284888142718e-06, 1.482274775572848e-06, 0.000000000000000e+00, 1.482282323784009e-06, 1.482246172131248e-06, 0.000000000000000e+00, 1.482246191813037e-06, 1.482286382930040e-06, 0.000000000000000e+00, 1.482297304393884e-06, 1.482277072198125e-06, 0.000000000000000e+00, 1.482264117106863e-06, 1.482277072198125e-06, 0.000000000000000e+00, 1.482264117106863e-06, 3.187156207133884e-04, 0.000000000000000e+00, 3.188315103514483e-04, 3.187255063620181e-04, 0.000000000000000e+00, 3.188498024329595e-04, 3.190504053507569e-04, 0.000000000000000e+00, 3.191301389680630e-04, 3.183334503744288e-04, 0.000000000000000e+00, 3.184329761532230e-04, 3.188350123357917e-04, 0.000000000000000e+00, 3.186997558207880e-04, 3.188350123357917e-04, 0.000000000000000e+00, 3.186997558207880e-04, 3.834625195287779e-02, 0.000000000000000e+00, 3.853635510633834e-02, 3.830554248884412e-02, 0.000000000000000e+00, 3.853671839269499e-02, 3.785144103436602e-02, 0.000000000000000e+00, 3.758110121446068e-02, 3.692102449281366e-02, 0.000000000000000e+00, 3.702171973696888e-02, 3.862750146526113e-02, 0.000000000000000e+00, 3.538565675735698e-02, 3.862750146526113e-02, 0.000000000000000e+00, 3.538565675735698e-02, 1.307035277073030e+00, 0.000000000000000e+00, 1.226427692612114e+00, 1.297995885253058e+00, 0.000000000000000e+00, 1.205302608171793e+00, 2.552215198418955e-02, 0.000000000000000e+00, 2.467438804546397e-02, 1.976018205067822e+00, 0.000000000000000e+00, 1.915585000456830e+00, 1.163814335117761e+00, 0.000000000000000e+00, 3.521502427502042e+00, 1.163814335117761e+00, 0.000000000000000e+00, 3.521502427502042e+00, 6.187276531610055e+02, 0.000000000000000e+00, 5.507526280704450e+02, 5.753703925808633e+02, 0.000000000000000e+00, 5.052301308811826e+02, 2.077374987676114e+01, 0.000000000000000e+00, 1.888779424007962e+01, 1.568027486093845e+03, 0.000000000000000e+00, 1.605962553115404e+03, 7.657541965122340e+02, 0.000000000000000e+00, 2.864406841461966e+03, 7.657541965122344e+02, 0.000000000000000e+00, 2.864406841461966e+03, 1.089145498141201e-04, 0.000000000000000e+00, 1.089863308410962e-04, 1.090143034063973e-04, 0.000000000000000e+00, 1.090828097588093e-04, 1.089190470623341e-04, 0.000000000000000e+00, 1.089888994700140e-04, 1.090046481227706e-04, 0.000000000000000e+00, 1.090765518060857e-04, 1.089664143407388e-04, 0.000000000000000e+00, 1.090348916727842e-04, 1.089664143407388e-04, 0.000000000000000e+00, 1.090348916727842e-04, 1.365774752337109e-03, 0.000000000000000e+00, 1.365950950817788e-03, 1.347221594183271e-03, 0.000000000000000e+00, 1.348055713832877e-03, 1.360870635661496e-03, 0.000000000000000e+00, 1.362729882420411e-03, 1.345007943890807e-03, 0.000000000000000e+00, 1.346372989536238e-03, 1.358444570778981e-03, 0.000000000000000e+00, 1.357085746687157e-03, 1.358444570778981e-03, 0.000000000000000e+00, 1.357085746687157e-03, 6.851200588609262e-02, 0.000000000000000e+00, 6.910468659451047e-02, 6.682621371019241e-02, 0.000000000000000e+00, 6.695999220023735e-02, 8.793276212625309e-02, 0.000000000000000e+00, 8.069317785515386e-02, 9.762083851598244e-02, 0.000000000000000e+00, 8.815891690192790e-02, 6.280312558919225e-02, 0.000000000000000e+00, 7.248121670467227e-02, 6.280312558919227e-02, 0.000000000000000e+00, 7.248121670467227e-02, 3.477721517496841e+00, 0.000000000000000e+00, 3.447004360389837e+00, 9.939399550602152e-01, 0.000000000000000e+00, 9.840791984861835e-01, 4.250543119486370e+00, 0.000000000000000e+00, 3.871714813295485e+00, 2.463068783566878e-03, 0.000000000000000e+00, 2.466829797272313e-03, 2.931512951883575e+00, 0.000000000000000e+00, 2.897340637281421e+00, 2.931512951883575e+00, 0.000000000000000e+00, 2.897340637281421e+00, 2.961321972173030e+03, 0.000000000000000e+00, 2.645413853048787e+03, 1.777836688721967e+03, 0.000000000000000e+00, 1.690134274248299e+03, 4.998209410721472e+03, 0.000000000000000e+00, 4.624287139240738e+03, 8.953333296149429e+00, 0.000000000000000e+00, 8.753792132603021e+00, 3.949760020138837e+03, 0.000000000000000e+00, 2.166100087574393e+03, 3.949760020138833e+03, 0.000000000000000e+00, 2.166100087574394e+03, 9.284167258919107e-02, 0.000000000000000e+00, 9.192779678684015e-02, 8.688751560374598e-02, 0.000000000000000e+00, 8.606607165090079e-02, 8.866555834993481e-02, 0.000000000000000e+00, 8.782809589648839e-02, 9.037682411965678e-02, 0.000000000000000e+00, 8.948720648229634e-02, 8.949255225362272e-02, 0.000000000000000e+00, 8.862933261598509e-02, 8.949255225362272e-02, 0.000000000000000e+00, 8.862933261598509e-02, 1.041471084688276e-01, 0.000000000000000e+00, 1.031508500644308e-01, 9.851789995849572e-02, 0.000000000000000e+00, 9.765170589995432e-02, 9.671634671117703e-02, 0.000000000000000e+00, 9.589007369835142e-02, 9.681244190535586e-02, 0.000000000000000e+00, 9.596214169939167e-02, 9.667804962750309e-02, 0.000000000000000e+00, 9.578309349720807e-02, 9.667804962750309e-02, 0.000000000000000e+00, 9.578309349720807e-02, 5.741651590181304e-02, 0.000000000000000e+00, 5.742403122874656e-02, 6.039129604279864e-01, 0.000000000000000e+00, 5.975684563677385e-01, 4.293588930444092e-01, 0.000000000000000e+00, 4.231268934351683e-01, 2.668814197948425e-01, 0.000000000000000e+00, 2.634753997071875e-01, 3.382503528509511e-01, 0.000000000000000e+00, 3.397197079001247e-01, 3.382503528509512e-01, 0.000000000000000e+00, 3.397197079001248e-01, 1.254429530513195e-01, 0.000000000000000e+00, 1.238621296660295e-01, 2.091057316869160e+01, 0.000000000000000e+00, 2.066493034000603e+01, 1.232461486742144e+01, 0.000000000000000e+00, 1.171546770744549e+01, 3.336854442325308e-01, 0.000000000000000e+00, 3.229155536426436e-01, 6.247162041575474e+00, 0.000000000000000e+00, 6.048874358246804e+00, 6.247162041575478e+00, 0.000000000000000e+00, 6.048874358246811e+00, 2.969866653119892e+02, 0.000000000000000e+00, 2.795763740216829e+02, 3.020858302043793e+04, 0.000000000000000e+00, 3.523179621879772e+04, 6.897252298893504e+03, 0.000000000000000e+00, 6.248048799475668e+03, 6.954117267331775e+00, 0.000000000000000e+00, 6.724137728226101e+00, 5.356205894712413e+03, 0.000000000000000e+00, 2.577537431665259e+03, 5.356205894712421e+03, 0.000000000000000e+00, 2.577537431665264e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
