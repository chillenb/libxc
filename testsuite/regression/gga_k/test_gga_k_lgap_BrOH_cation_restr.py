
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_lgap_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_lgap", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.192960650149298e+03, 2.192969398211943e+03, 2.193017654150816e+03, 2.192887308345013e+03, 2.192954274521107e+03, 2.192954274521107e+03, 5.930790157259018e+01, 5.930729611188116e+01, 5.929621327560260e+01, 5.933802063398524e+01, 5.931003500116704e+01, 5.931003500116704e+01, 2.310745563658665e+00, 2.308755834430748e+00, 2.270175302047050e+00, 2.303708062847674e+00, 2.293128927605455e+00, 2.293128927605455e+00, 1.966956488057384e-01, 1.997060994214392e-01, 3.104424719185181e+00, 1.318619781436438e-01, 1.560789529189662e-01, 1.560789529189662e-01, 2.966155802457027e-04, 3.286036219323868e-04, 1.000217850763535e-02, 9.893385905589940e-05, 1.562150402139868e-04, 1.562150402139868e-04, 1.283863979952081e+02, 1.283922914391236e+02, 1.283870415304141e+02, 1.283922386216973e+02, 1.283891783252084e+02, 1.283891783252084e+02, 2.061823543063625e+01, 2.084984453964587e+01, 2.055637151722741e+01, 2.076014031669634e+01, 2.077651595846761e+01, 2.077651595846761e+01, 1.671428312541307e+00, 1.880331592065621e+00, 1.443641547079859e+00, 1.484252915845197e+00, 1.714253143531175e+00, 1.714253143531175e+00, 6.787916567069298e-02, 2.182447603971320e-01, 5.815853057111360e-02, 1.703694005082593e+01, 9.144695781687692e-02, 9.144695781687692e-02, 5.889680429494737e-05, 9.454903314325726e-05, 5.528155906977602e-05, 2.632786371122373e-02, 8.022890467597918e-05, 8.022890467597918e-05, 1.588450605732159e+00, 1.588950958538783e+00, 1.588884907940677e+00, 1.588733253513006e+00, 1.588815668501263e+00, 1.588815668501263e+00, 1.497895040482069e+00, 1.241208150196568e+00, 1.309660807595687e+00, 1.380535528441876e+00, 1.343300300059822e+00, 1.343300300059822e+00, 2.070419238950677e+00, 3.204832363839888e-01, 4.206038774455417e-01, 6.298135313422133e-01, 5.104719675094295e-01, 5.104719675094295e-01, 1.055083838762906e+00, 9.162915809516127e-03, 1.703105283193690e-02, 5.646975331225015e-01, 4.267017909446879e-02, 4.267017909446881e-02, 5.907952460697165e-04, 6.755785112353809e-06, 2.976589961572091e-05, 3.763703224593171e-02, 6.869229155916010e-05, 6.869229155915998e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_lgap_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_lgap", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.341943580592210e+03, 3.341965216728734e+03, 3.342062354153555e+03, 3.341740433497897e+03, 3.341908977080180e+03, 3.341908977080180e+03, 8.759528965013651e+01, 8.759636860326221e+01, 8.762560575631944e+01, 8.760804375385310e+01, 8.760080651607723e+01, 8.760080651607723e+01, 3.181288689653834e+00, 3.172220837466216e+00, 2.957656845773231e+00, 3.009168020204267e+00, 2.999947764953228e+00, 2.999947764953228e+00, 2.144361170862193e-01, 2.182061186737791e-01, 4.351237509327262e+00, 1.667679209652752e-01, 1.773628574811195e-01, 1.773628574811195e-01, 4.943593004095046e-04, 5.476727032206447e-04, 1.667029751272558e-02, 1.648897650931657e-04, 2.603584003566448e-04, 2.603584003566448e-04, 2.002452580109174e+02, 2.003552313341376e+02, 2.002504252666018e+02, 2.003475094935504e+02, 2.003009478271993e+02, 2.003009478271993e+02, 2.654354557182936e+01, 2.696262174461936e+01, 2.619304592393929e+01, 2.655893581002787e+01, 2.694801300663300e+01, 2.694801300663300e+01, 2.507442625415591e+00, 3.039877374386956e+00, 2.136409558074311e+00, 2.374062466945166e+00, 2.598676287258987e+00, 2.598676287258987e+00, 1.109985356331535e-01, 2.519455432537628e-01, 9.607929063304738e-02, 2.758872412823190e+01, 1.326000159645114e-01, 1.326000159645114e-01, 9.816134049157895e-05, 1.575817219054288e-04, 9.213593178296002e-05, 4.387956163351048e-02, 1.337148411266320e-04, 1.337148411266320e-04, 2.618257935089060e+00, 2.572403055308951e+00, 2.588552334353110e+00, 2.601875375795805e+00, 2.595211080143450e+00, 2.595211080143450e+00, 2.482545294467919e+00, 1.717073151116577e+00, 1.920959595569772e+00, 2.137483856078551e+00, 2.025822862771337e+00, 2.025822862771337e+00, 3.337711385884164e+00, 3.495350020189212e-01, 4.742397209684506e-01, 8.487569491215964e-01, 6.264735465105802e-01, 6.264735465105801e-01, 1.453297631241156e+00, 1.527152634919355e-02, 2.838508805319627e-02, 8.027049199285806e-01, 7.075243990083549e-02, 7.075243990083550e-02, 9.846587434495277e-04, 1.125964185392302e-05, 4.960983269286819e-05, 6.262424542709862e-02, 1.144871525986002e-04, 1.144871525986000e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_lgap_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_lgap", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [7.924431288904217e-07, 7.924377346820424e-07, 7.924097253380006e-07, 7.924900649684938e-07, 7.924485401241183e-07, 7.924485401241183e-07, 1.800655459684756e-04, 1.800669514714018e-04, 1.800861696322726e-04, 1.799501738387239e-04, 1.800542096432514e-04, 1.800542096432514e-04, 2.389573211005446e-02, 2.393766029318272e-02, 2.477486167924564e-02, 2.422900659943849e-02, 2.439256665046129e-02, 2.439256665046129e-02, 8.408769298847254e-01, 8.448451309699501e-01, 1.527682642801473e-02, 7.190669827163362e-01, 8.988601632801794e-01, 8.988601632801790e-01, 0.000000000000000e+00, 0.000000000000000e+00, 1.061865880921608e-23, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 5.554780492022554e-05, 5.553673719332318e-05, 5.554708629348301e-05, 5.553731744817665e-05, 5.554229869362430e-05, 5.554229869362430e-05, 9.061133707175100e-04, 8.907453479322440e-04, 9.107225094418591e-04, 8.971847147834706e-04, 8.952280006035457e-04, 8.952280006035457e-04, 3.786019537215111e-02, 3.133525489683846e-02, 4.738318152685884e-02, 4.454046219866451e-02, 3.632178770199642e-02, 3.632178770199642e-02, 7.186892435411943e-02, 5.075016255549033e-01, 3.712929575894875e-02, 1.150137324750267e-03, 5.141903256287966e-01, 5.141903256287966e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 3.358896489094464e-05, 0.000000000000000e+00, 0.000000000000000e+00, 4.211060548660087e-02, 4.037339702958401e-02, 4.062598705080122e-02, 4.103104888158713e-02, 4.079758334198431e-02, 4.079758334198431e-02, 4.887136278603749e-02, 6.062947977739133e-02, 5.499913535352568e-02, 4.991875317008683e-02, 5.245410423128517e-02, 5.245410423128517e-02, 2.708357365347025e-02, 3.892723049389185e-01, 2.987862011383693e-01, 1.686920480889658e-01, 2.324499218786954e-01, 2.324499218786955e-01, 7.744037578970110e-02, 1.047848087223833e-28, 8.386144502004795e-12, 1.961493840481895e-01, 3.186662805594856e-02, 3.186662805594872e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.082474472175783e-02, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
