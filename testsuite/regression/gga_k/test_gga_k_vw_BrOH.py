
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_vw_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_vw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [9.576441355770077e+02, 9.576240422466035e+02, 9.575736041280999e+02, 9.579018626923279e+02, 9.576332113362189e+02, 9.576332113362189e+02, 3.510893106106665e+01, 3.510330724861846e+01, 3.495177111304654e+01, 3.522795982467122e+01, 3.510633763930953e+01, 3.510633763930953e+01, 2.345562949575114e+00, 2.368137820123501e+00, 3.051879403666677e+00, 3.050931217261847e+00, 2.353654042324901e+00, 2.353654042324901e+00, 5.005338209717327e-01, 4.812183167471646e-01, 2.399095493889266e+00, 6.801348441303606e-01, 4.942659438865694e-01, 4.942659438865694e-01, 5.009591277681582e-01, 5.000041284552580e-01, 7.273787163240724e-01, 5.979760762365348e-01, 4.905754683726063e-01, 4.905754683726063e-01, 4.137796116823252e+01, 4.107158891385095e+01, 4.134740268824919e+01, 4.110916389818052e+01, 4.121967564166241e+01, 4.121967564166241e+01, 2.738672693907646e+01, 2.715072842705275e+01, 2.811031806543979e+01, 2.792183416083171e+01, 2.630403091725036e+01, 2.630403091725036e+01, 8.295069290821386e-01, 2.497242317369454e-01, 7.990410168553944e-01, 3.225101068141866e-01, 7.783043140745529e-01, 7.783043140745529e-01, 8.063655240642432e-01, 9.032368836120962e-01, 7.438202537154900e-01, 2.327845426832134e+00, 6.901994569116964e-01, 6.901994569116964e-01, 5.805996277894765e-01, 5.798143602507189e-01, 3.427430342249264e-01, 6.894857948645150e-01, 4.770742910603595e-01, 4.770742910603598e-01, 6.497270217598894e-02, 1.958629424037779e-01, 1.490164923003079e-01, 1.127290517553296e-01, 1.308763996916255e-01, 1.308763996916256e-01, 4.044557938538268e-02, 1.078958032907473e+00, 7.712973744120123e-01, 4.844923140454184e-01, 6.263542187869749e-01, 6.263542187869746e-01, 2.999745413478189e-01, 9.628139785354011e-01, 8.840646235794947e-01, 6.379358854449724e-01, 7.580067004894112e-01, 7.580067004894110e-01, 9.451844040368989e-01, 8.023582454048737e-01, 7.680158803054142e-01, 4.037282470151719e-01, 6.418915667998963e-01, 6.418915667998957e-01, 5.773381571176470e-01, 4.426494746907381e-01, 4.768849521104468e-01, 5.781333190135604e-01, 3.948424406271953e-01, 3.948424406271957e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_vw_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_vw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-9.576441355770074e+02, -9.576240422466036e+02, -9.575736041281007e+02, -9.579018626923280e+02, -9.576332113362189e+02, -9.576332113362189e+02, -3.510893106106663e+01, -3.510330724861847e+01, -3.495177111304652e+01, -3.522795982467124e+01, -3.510633763930951e+01, -3.510633763930951e+01, -2.345562949575113e+00, -2.368137820123503e+00, -3.051879403666676e+00, -3.050931217261847e+00, -2.353654042324900e+00, -2.353654042324900e+00, -5.005338209717329e-01, -4.812183167471646e-01, -2.399095493889265e+00, -6.801348441303606e-01, -4.942659438865691e-01, -4.942659438865691e-01, -5.009591277681581e-01, -5.000041284552580e-01, -7.273787163240727e-01, -5.979760762365347e-01, -4.905754683726068e-01, -4.905754683726068e-01, -4.137796116823250e+01, -4.107158891385098e+01, -4.134740268824915e+01, -4.110916389818049e+01, -4.121967564166237e+01, -4.121967564166237e+01, -2.738672693907646e+01, -2.715072842705275e+01, -2.811031806543976e+01, -2.792183416083170e+01, -2.630403091725038e+01, -2.630403091725038e+01, -8.295069290821390e-01, -2.497242317369452e-01, -7.990410168553943e-01, -3.225101068141865e-01, -7.783043140745528e-01, -7.783043140745528e-01, -8.063655240642427e-01, -9.032368836120952e-01, -7.438202537154895e-01, -2.327845426832134e+00, -6.901994569116965e-01, -6.901994569116965e-01, -5.805996277894766e-01, -5.798143602507192e-01, -3.427430342249266e-01, -6.894857948645144e-01, -4.770742910603596e-01, -4.770742910603595e-01, -6.497270217598888e-02, -1.958629424037779e-01, -1.490164923003079e-01, -1.127290517553296e-01, -1.308763996916256e-01, -1.308763996916256e-01, -4.044557938538268e-02, -1.078958032907473e+00, -7.712973744120125e-01, -4.844923140454182e-01, -6.263542187869748e-01, -6.263542187869746e-01, -2.999745413478190e-01, -9.628139785353995e-01, -8.840646235794937e-01, -6.379358854449723e-01, -7.580067004894112e-01, -7.580067004894108e-01, -9.451844040368989e-01, -8.023582454048730e-01, -7.680158803054137e-01, -4.037282470151719e-01, -6.418915667998958e-01, -6.418915667998955e-01, -5.773381571176474e-01, -4.426494746907382e-01, -4.768849521104465e-01, -5.781333190135605e-01, -3.948424406271951e-01, -3.948424406271956e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_vw_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_vw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [6.466056283234563e-06, 6.466009197756443e-06, 6.465764469780239e-06, 6.466536223526939e-06, 6.466031741755516e-06, 6.466031741755516e-06, 1.498421174038643e-03, 1.498411739878048e-03, 1.497967471120726e-03, 1.497780402094735e-03, 1.498397172686069e-03, 1.498397172686069e-03, 2.127416061921152e-01, 2.133980905275349e-01, 2.313976576874749e-01, 2.260172348590344e-01, 2.129807311553839e-01, 2.129807311553839e-01, 1.039094480851941e+01, 9.986689159943243e+00, 1.235781346377657e-01, 2.726729965319867e+01, 1.026742833838440e+01, 1.026742833838440e+01, 5.964453786572185e+04, 5.189989231390612e+04, 7.729001762631485e+02, 5.402227120247934e+05, 5.355685357776580e+04, 5.355685357776580e+04, 4.469833335950086e-04, 4.467449287426880e-04, 4.469581719292752e-04, 4.467728090459601e-04, 4.468621392195736e-04, 4.468621392195736e-04, 8.433970231851093e-03, 8.258181711162384e-03, 8.506448761135831e-03, 8.367254872862299e-03, 8.223561338896960e-03, 8.223561338896960e-03, 3.223851271846090e-01, 2.515276663577714e-01, 3.773229443710125e-01, 3.325266768488966e-01, 2.879077532755357e-01, 2.879077532755357e-01, 6.875369789659389e+01, 1.017076998310966e+01, 7.146664024634525e+01, 8.938290414619800e-03, 4.446729428797773e+01, 4.446729428797773e+01, 6.017464903633266e+05, 4.031448391945296e+05, 9.574968365468717e+05, 2.853120840444644e+02, 5.329472753722590e+05, 5.329472753722590e+05, 2.934235204795085e-01, 2.981735854250898e-01, 2.964590738343240e-01, 2.951453133270494e-01, 2.958018789761704e-01, 2.958018789761704e-01, 3.235901009869711e-01, 4.956708849315528e-01, 4.349226204021869e-01, 3.871492494294326e-01, 4.105657975335820e-01, 4.105657975335819e-01, 2.182135508852704e-01, 5.111822292084749e+00, 3.051372879724367e+00, 1.460335367408629e+00, 2.110668932927307e+00, 2.110668932927307e+00, 6.755606254308927e-01, 9.728411342429538e+02, 3.921118904777629e+02, 1.731324176957159e+00, 1.285807832823024e+02, 1.285807832823023e+02, 3.705071661734571e+04, 1.964459228149110e+07, 2.865708569560217e+06, 1.480818596429327e+02, 8.682210925506415e+05, 8.682210925506453e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
