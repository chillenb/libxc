
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_pbe4_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_pbe4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.478423771688844e+03, 2.478390443020337e+03, 2.478322178588689e+03, 2.478816381675139e+03, 2.478546075235333e+03, 2.478546075235333e+03, 8.053286787799065e+01, 8.052343679194824e+01, 8.030897490730126e+01, 8.071197225714056e+01, 8.052542090460418e+01, 8.052542090460418e+01, 3.829151752956897e+00, 3.835129105904432e+00, 3.865547417111019e+00, 3.926654089358268e+00, 3.672984942333485e+00, 3.672984942333485e+00, 1.858485593520999e-01, 2.022459680836699e-01, 4.977954138167772e+00, 3.938272502568737e-02, 1.640342102073661e-01, 1.640342102073666e-01, -1.444514090356979e-04, -1.601307741895166e-04, -4.295740061591417e-03, -4.812970106861040e-05, -9.621817506826122e-05, -9.621817506826092e-05, 1.212422416756460e+02, 1.207447643316733e+02, 1.212220307516254e+02, 1.207827788399412e+02, 1.209883048480363e+02, 1.209883048480363e+02, 3.498022424243270e+01, 3.544297157307941e+01, 3.465959889275774e+01, 3.509705809504783e+01, 3.535070250642967e+01, 3.535070250642967e+01, 2.090057670198037e+00, 1.410842320787284e+00, 1.941994406100670e+00, 1.159480834996880e+00, 2.010977442563387e+00, 2.010977442563387e+00, -8.573397381167525e-03, 1.109380802974083e-01, -9.601328359375690e-03, 1.276589294536155e+01, 8.716999395346838e-03, 8.716999395346838e-03, -2.870838911064115e-05, -4.599091050300657e-05, -2.697310874239093e-05, -8.366481226837304e-03, -4.325310168009181e-05, -4.325310168009197e-05, 1.324020744340540e+00, 1.190776210796749e+00, 1.202214233333268e+00, 1.238142069863335e+00, 1.216802083593629e+00, 1.216802083593629e+00, 1.357888915991015e+00, 2.043518911838232e+00, 1.834879469705765e+00, 1.384179755143319e+00, 1.627111579655265e+00, 1.627111579655265e+00, 1.562323267632249e+00, 2.767991967391197e-01, 5.420686681212775e-01, 1.065892802003795e+00, 8.257323203908389e-01, 8.257323203908387e-01, 1.747738740335656e+00, -3.992969740182069e-03, -6.657891295029132e-03, 8.804251392767123e-01, -7.922148657883049e-03, -7.922148657883026e-03, -2.858189888580968e-04, -3.289431644856528e-06, -1.455433101499171e-05, -8.453669789925997e-03, -3.639964897743718e-05, -3.639964897743679e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_pbe4_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_pbe4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.056602782807368e+02, -1.056588362171026e+02, -1.056462905257703e+02, -1.056486835866351e+02, -1.056212683948611e+02, -1.056072805545775e+02, -1.057783658826328e+02, -1.058075937917807e+02, -1.056509392824152e+02, -1.057422436510523e+02, -1.056509392824152e+02, -1.057422436510523e+02, 6.574798907988584e+00, 6.479072094837001e+00, 6.562851413208004e+00, 6.461088734034739e+00, 6.214172088928414e+00, 6.123748626926132e+00, 6.824362953914307e+00, 6.718239419154452e+00, 6.610370604360046e+00, 6.408690372837749e+00, 6.610370604360046e+00, 6.408690372837749e+00, 3.307391995276083e+00, 2.903320859342416e+00, 3.444350490687065e+00, 2.948934686181956e+00, 5.170392413627088e+00, 5.761071477967003e+00, 5.543258065474865e+00, 5.341523023585192e+00, 2.315866235444359e+00, 7.981076952059786e+00, 2.315866235444359e+00, 7.981076952059786e+00, 6.738525763016133e-01, 7.405453772868504e-01, 6.987926101475763e-01, 7.715851450428295e-01, 4.065091351888523e+00, 2.169537764278698e+00, 2.722995819205029e-01, 2.840331910410298e-01, 7.390181152919575e-01, 7.044464802748507e-02, 7.390181152919612e-01, 7.044464802748970e-02, -2.234222165816678e-04, -2.519262292738094e-04, -2.449765098281516e-04, -2.806108525946163e-04, -5.427387870057394e-03, -5.754289266933102e-03, -8.133235804330808e-05, -7.865860002347783e-05, -1.782193434865480e-04, -5.796410419838037e-05, -1.782193434865473e-04, -5.796410419837716e-05, 2.137135984692210e+01, 2.131691227694191e+01, 2.247961904804417e+01, 2.238638062025227e+01, 2.142760879739230e+01, 2.134992905310235e+01, 2.237827554448960e+01, 2.232128731366960e+01, 2.194024063033805e+01, 2.185233497887201e+01, 2.194024063033805e+01, 2.185233497887201e+01, 5.386770321390786e+01, 5.386695187556508e+01, 5.289380851176052e+01, 5.290725314353632e+01, 5.765740275320572e+01, 5.656010699329602e+01, 5.691069322523247e+01, 5.580845596981799e+01, 5.035073293738855e+01, 5.294821870045975e+01, 5.035073293738855e+01, 5.294821870045975e+01, -3.447742042364556e-02, -3.678599812703071e-02, 2.118089180373042e+00, 2.172816301839906e+00, 2.061592042894671e-01, 6.403172709037223e-02, 1.159339413557750e+00, 1.184633384406063e+00, -9.489965396595754e-02, -8.267800063697651e-02, -9.489965396596053e-02, -8.267800063698511e-02, 4.205249955251961e-02, 4.560176028913957e-02, 5.865935793473497e-01, 5.957311775866821e-01, 2.390415086370239e-02, 3.380937843771469e-02, 2.038200314218555e+01, 2.038823460621622e+01, 1.019549292755863e-01, 1.572326427283134e-01, 1.019549292755863e-01, 1.572326427283134e-01, -4.583181530746515e-05, -4.949887066799744e-05, -7.529089153605747e-05, -7.759021240881652e-05, -4.204432364579833e-05, -4.710947364006961e-05, -2.582651112194440e-03, -2.735133166412990e-03, -4.391987198012811e-05, -8.255379267317710e-05, -4.391987198012812e-05, -8.255379267317747e-05, 2.643874411667945e+00, 2.670784375564566e+00, 1.865961915858035e+00, 1.909060841213296e+00, 2.190732039703422e+00, 2.231760202204413e+00, 2.431134531013484e+00, 2.463821430701170e+00, 2.316212996091835e+00, 2.352954407304461e+00, 2.316212996091835e+00, 2.352954407304461e+00, 2.557451036732380e+00, 2.574271707127905e+00, 1.567209709638139e+00, 1.524543781134303e+00, 2.725399416993827e-01, 2.375612591657333e-01, 7.989358479670568e-02, 9.058513512683920e-02, -5.678485599364494e-02, -6.024771977814629e-02, -5.678485599364494e-02, -6.024771977814629e-02, 2.115903750245824e+00, 2.212846424312656e+00, 1.107096379935068e+00, 1.123756041445706e+00, 1.613715283725980e+00, 1.633427519601599e+00, 1.123515669266844e+00, 1.109703489454968e+00, 1.688454716001787e+00, 1.674581080107212e+00, 1.688454716001803e+00, 1.674581080107220e+00, 1.443545245205743e+00, 1.370900762618652e+00, -5.398045647931251e-03, -5.443102148979124e-03, -6.874039288760031e-03, -6.784807842109435e-03, 4.284394815716278e-01, 3.756531416540808e-01, 1.175841250580553e-02, 2.346337698356025e-02, 1.175841250580626e-02, 2.346337698356070e-02, -4.529067640860115e-04, -4.854813151860781e-04, -5.468205601567415e-06, -5.492232199252752e-06, -2.261242834866799e-05, -2.557176247688976e-05, 9.538471267851269e-03, 1.076909412122361e-02, -3.936131554263027e-05, -6.942677220259394e-05, -3.936131554263046e-05, -6.942677220259788e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_pbe4_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_pbe4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([2.145156257760240e-05, 0.000000000000000e+00, 2.145166159610381e-05, 2.145155706862124e-05, 0.000000000000000e+00, 2.145165747753695e-05, 2.145122761263274e-05, 0.000000000000000e+00, 2.145127258562384e-05, 2.145129612937769e-05, 0.000000000000000e+00, 2.145135702343573e-05, 2.145157503754121e-05, 0.000000000000000e+00, 2.145109484519805e-05, 2.145157503754121e-05, 0.000000000000000e+00, 2.145109484519805e-05, 4.084663733683906e-03, 0.000000000000000e+00, 4.089882141079385e-03, 4.085258233249161e-03, 0.000000000000000e+00, 4.090820952385011e-03, 4.103124987282891e-03, 0.000000000000000e+00, 4.107724965150373e-03, 4.070132625600453e-03, 0.000000000000000e+00, 4.075530531391909e-03, 4.084719832148672e-03, 0.000000000000000e+00, 4.091056554714793e-03, 4.084719832148672e-03, 0.000000000000000e+00, 4.091056554714793e-03, 2.177147877959882e-01, 0.000000000000000e+00, 2.502773816968046e-01, 2.069669141266275e-01, 0.000000000000000e+00, 2.465885172402918e-01, 7.929527112580571e-02, 0.000000000000000e+00, 3.877222634472873e-02, 5.767725035040192e-02, 0.000000000000000e+00, 7.104903084466944e-02, 2.991991988816297e-01, 0.000000000000000e+00, -9.381539063984476e-02, 2.991991988816297e-01, 0.000000000000000e+00, -9.381539063984476e-02, -6.047248501168020e+00, 0.000000000000000e+00, -5.794255557262527e+00, -6.091297600408604e+00, 0.000000000000000e+00, -5.718426401566470e+00, 1.558688117792209e-01, 0.000000000000000e+00, 2.305060055643674e-01, -5.811339748216440e+00, 0.000000000000000e+00, -5.725766240822495e+00, -5.423161663921756e+00, 0.000000000000000e+00, -5.273253925879585e+00, -5.423161663921821e+00, 0.000000000000000e+00, -5.273253925879851e+00, -5.069591728511101e-01, 0.000000000000000e+00, -5.333954295347900e-01, -5.598302629949717e-01, 0.000000000000000e+00, -5.967861246138058e-01, -1.785008355391892e+00, 0.000000000000000e+00, -1.903139666395675e+00, -2.788827770695153e-01, 0.000000000000000e+00, -2.667854390390216e-01, -4.513717505809477e-01, 0.000000000000000e+00, -6.513790121089061e-01, -4.513717505798684e-01, 0.000000000000000e+00, -6.513790121336406e-01, 1.461503537747132e-03, 0.000000000000000e+00, 1.462730660516635e-03, 1.456231336635493e-03, 0.000000000000000e+00, 1.457643895785975e-03, 1.461231180990708e-03, 0.000000000000000e+00, 1.462569817416834e-03, 1.456710844402977e-03, 0.000000000000000e+00, 1.457951287839017e-03, 1.458817911753417e-03, 0.000000000000000e+00, 1.460198798913320e-03, 1.458817911753417e-03, 0.000000000000000e+00, 1.460198798913320e-03, 1.027779503662881e-03, 0.000000000000000e+00, 1.026823296667569e-03, 1.416184831651284e-03, 0.000000000000000e+00, 1.407377635760941e-03, 2.747416505661994e-06, 0.000000000000000e+00, 2.952913573848673e-04, 3.311844863240649e-04, 0.000000000000000e+00, 6.230367100053294e-04, 2.054847545786698e-03, 0.000000000000000e+00, 1.340196530067820e-03, 2.054847545786698e-03, 0.000000000000000e+00, 1.340196530067820e-03, 9.528557399084574e-01, 0.000000000000000e+00, 9.621754489075671e-01, 1.539754817571886e-01, 0.000000000000000e+00, 1.201226376608834e-01, 1.103759821741125e+00, 0.000000000000000e+00, 1.076235982999474e+00, 6.909752903740620e-01, 0.000000000000000e+00, 6.633959738052880e-01, 9.055293453623281e-01, 0.000000000000000e+00, 1.036696483590043e+00, 9.055293453623269e-01, 0.000000000000000e+00, 1.036696483590042e+00, -3.855087653307253e+00, 0.000000000000000e+00, -3.976001347611961e+00, -3.694906938157273e+00, 0.000000000000000e+00, -3.682507363453925e+00, -3.836580425691183e+00, 0.000000000000000e+00, -3.984672099473306e+00, 2.575818074919199e-03, 0.000000000000000e+00, 2.510732420221145e-03, -5.149790701362533e+00, 0.000000000000000e+00, -6.849939197353026e+00, -5.149790701362533e+00, 0.000000000000000e+00, -6.849939197353026e+00, -2.936518611463331e-01, 0.000000000000000e+00, -2.641404318644343e-01, -3.243649688009964e-01, 0.000000000000000e+00, -3.040098027917556e-01, -1.381824493460296e+00, 0.000000000000000e+00, -1.628132771235861e+00, -3.646486411596053e+00, 0.000000000000000e+00, -3.532950257574012e+00, -7.017037401796661e-01, 0.000000000000000e+00, -9.469599388096449e-01, -7.017037401755531e-01, 0.000000000000000e+00, -9.469599387970885e-01, -1.292762585624760e+00, 0.000000000000000e+00, -1.310738007812073e+00, 1.186691838600311e-01, 0.000000000000000e+00, 8.800900271265430e-02, -2.673017300602326e-01, 0.000000000000000e+00, -2.989175257295315e-01, -6.737024711599087e-01, 0.000000000000000e+00, -6.958630443075789e-01, -4.601197825366303e-01, 0.000000000000000e+00, -4.873689381526413e-01, -4.601197825366303e-01, 0.000000000000000e+00, -4.873689381526413e-01, -2.128841177791594e+00, 0.000000000000000e+00, -2.114118992603646e+00, 6.342805664596668e-01, 0.000000000000000e+00, 6.485387197917981e-01, 1.173630626390661e+00, 0.000000000000000e+00, 1.181773551190232e+00, 1.365385272000052e+00, 0.000000000000000e+00, 1.349463304767323e+00, 1.369189260700611e+00, 0.000000000000000e+00, 1.359643840333133e+00, 1.369189260700611e+00, 0.000000000000000e+00, 1.359643840333133e+00, 2.306922599442579e-01, 0.000000000000000e+00, 1.898638559182546e-01, -2.767553579948097e+00, 0.000000000000000e+00, -2.750102995452927e+00, -1.931236090911030e+00, 0.000000000000000e+00, -1.865785543094081e+00, 1.092619725673025e+00, 0.000000000000000e+00, 1.122885585893008e+00, -6.444381419562450e-01, 0.000000000000000e+00, -6.208309113567397e-01, -6.444381419562447e-01, 0.000000000000000e+00, -6.208309113567551e-01, 7.447713181232287e-01, 0.000000000000000e+00, 7.830290767916945e-01, -1.597983559523785e+00, 0.000000000000000e+00, -1.611528673055600e+00, -2.169506875501761e+00, 0.000000000000000e+00, -2.300441514321669e+00, 2.967127601518174e+00, 0.000000000000000e+00, 3.063430205520523e+00, -4.738432347542385e+00, 0.000000000000000e+00, -6.024205349376175e+00, -4.738432347542156e+00, 0.000000000000000e+00, -6.024205349376330e+00, -5.753370710332060e-01, 0.000000000000000e+00, -6.087624387448800e-01, -3.116877150232945e-01, 0.000000000000000e+00, -5.533816068505155e-01, -3.914839518758048e-01, 0.000000000000000e+00, -4.432748297135843e-01, -5.044186228646684e+00, 0.000000000000000e+00, -5.034477295999016e+00, -1.370525399203924e+00, 0.000000000000000e+00, -9.009361382795571e-01, -1.370525399197645e+00, 0.000000000000000e+00, -9.009361382665561e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
