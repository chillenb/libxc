
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_vsk_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_vsk", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.173658022643907e+03, 2.173667021638133e+03, 2.173715784671474e+03, 2.173581718694440e+03, 2.173650721120020e+03, 2.173650721120020e+03, 5.868965210404775e+01, 5.868910999720716e+01, 5.867946446350442e+01, 5.871854351921954e+01, 5.869184193801017e+01, 5.869184193801017e+01, 2.284515958206736e+00, 2.282705286064930e+00, 2.253048511653923e+00, 2.285334364113333e+00, 2.306315939386124e+00, 2.306315939386124e+00, 2.440287748523207e-01, 2.389593808169117e-01, 3.072964874236044e+00, 3.660386726614598e-01, 3.022867381579201e-01, 3.022867381579200e-01, 7.297876503875764e-01, 7.099029257786413e-01, 9.183654987318621e-01, 7.661710839390921e-01, 6.864348960951484e-01, 6.864348960951474e-01, 1.274517923777681e+02, 1.274622311168552e+02, 1.274526208450827e+02, 1.274618300831910e+02, 1.274568889479605e+02, 1.274568889479605e+02, 2.049354302108718e+01, 2.071001039488520e+01, 2.046773703432777e+01, 2.065586585031302e+01, 2.062957678671123e+01, 2.062957678671123e+01, 1.655262762150217e+00, 1.872030482386215e+00, 1.430896698198088e+00, 1.478275224775269e+00, 1.703901509821010e+00, 1.703901509821011e+00, 7.466307119519787e-01, 4.114967232011635e-01, 7.619931070594363e-01, 1.696427558096861e+01, 4.567329388932317e-01, 4.567329388932317e-01, 6.678238323742203e-01, 7.065920937803138e-01, 2.818034493628141e-01, 7.814412157425721e-01, 4.138469794977494e-01, 4.138469794977498e-01, 1.584674975405472e+00, 1.582165705930755e+00, 1.583055935233617e+00, 1.583762769435264e+00, 1.583406592293734e+00, 1.583406592293734e+00, 1.495507704448366e+00, 1.226977610880450e+00, 1.295672402588449e+00, 1.369804379639101e+00, 1.330690636507011e+00, 1.330690636507011e+00, 2.060768216813924e+00, 4.171069720218394e-01, 4.513034962494175e-01, 6.231713325819068e-01, 5.131748696238185e-01, 5.131748696238185e-01, 1.043128641418028e+00, 9.665318474254008e-01, 9.357823382603105e-01, 5.583667349667721e-01, 6.207879746659323e-01, 6.207879746659322e-01, 8.123849718088840e-01, 3.205985440946076e-01, 4.583532965623976e-01, 6.526215460983128e-01, 3.710995772564126e-01, 3.710995772564122e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_vsk_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_vsk", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.341993197220896e+03, 3.341984890564579e+03, 3.342018556710231e+03, 3.342003311155108e+03, 3.342098913376925e+03, 3.342118672942664e+03, 3.341812541230083e+03, 3.341753660917590e+03, 3.342008361223147e+03, 3.341898996656568e+03, 3.342008361223147e+03, 3.341898996656568e+03, 8.742449837299769e+01, 8.742781521601171e+01, 8.742575944887176e+01, 8.742909977925905e+01, 8.745656586054851e+01, 8.746565134638497e+01, 8.743134471683466e+01, 8.744008939052900e+01, 8.739301445739540e+01, 8.747076606179607e+01, 8.739301445739540e+01, 8.747076606179607e+01, 3.099475408482298e+00, 3.144796103884821e+00, 3.082457554031644e+00, 3.138363035331666e+00, 2.840936278794816e+00, 2.747077703231380e+00, 2.835930165912933e+00, 2.866310102905473e+00, 3.221805473682919e+00, 2.217484539943619e+00, 3.221805473682919e+00, 2.217484539943619e+00, -1.458673948402288e-01, -6.696738963547118e-02, -9.666096632319648e-02, -1.670064027449271e-02, 4.104661374385257e+00, 4.481965849692212e+00, -9.669035799040636e-01, -9.554584289577241e-01, -1.323705989576660e-01, -1.355811248007788e+00, -1.323705989576662e-01, -1.355811248007788e+00, -7.273990978883639e-01, -7.309255809133769e-01, -7.084927242369299e-01, -7.101248266117361e-01, -9.351046028508003e-01, -9.335798194018244e-01, -7.608598947480356e-01, -7.714228802741007e-01, -7.282522319831713e-01, -4.574816537165270e-01, -7.282522319831701e-01, -4.574816537165281e-01, 2.003613230699936e+02, 2.002638409778427e+02, 2.004732119918631e+02, 2.003719079127532e+02, 2.003677766800681e+02, 2.002677241757696e+02, 2.004637829283858e+02, 2.003658971132607e+02, 2.004184621770803e+02, 2.003180980750139e+02, 2.004184621770803e+02, 2.003180980750139e+02, 2.475492481656086e+01, 2.475196998801360e+01, 2.528673002031997e+01, 2.526912812517032e+01, 2.398214765183568e+01, 2.420971833672773e+01, 2.445574888552049e+01, 2.468162149695371e+01, 2.559013777580425e+01, 2.510054523752197e+01, 2.559013777580425e+01, 2.510054523752197e+01, 2.512189298467207e+00, 2.499196051980926e+00, 3.037833520339812e+00, 3.041467256483578e+00, 2.050182934736179e+00, 2.213549121518596e+00, 2.296590809190466e+00, 2.450811203096543e+00, 2.731364672683958e+00, 2.461922613646956e+00, 2.731364672683958e+00, 2.461922613646957e+00, -1.515190969995964e+00, -1.509218817426395e+00, -8.259833251102544e-01, -8.120368978900359e-01, -1.379989170413109e+00, -1.433818113061991e+00, 2.759816431727649e+01, 2.757378170778102e+01, -1.397712966079646e+00, -1.061339443160393e+00, -1.397712966079646e+00, -1.061339443160393e+00, -6.422942696118977e-01, -6.903843093531139e-01, -6.920273071302889e-01, -7.202110739777423e-01, -2.899003008438086e-01, -2.748205251384375e-01, -9.609936805183368e-01, -9.775587404784569e-01, -4.111855625824246e-01, -4.146751410578626e-01, -4.111855625824246e-01, -4.146751410578634e-01, 2.607266129033054e+00, 2.627724812214636e+00, 2.561885867216733e+00, 2.582406384399146e+00, 2.577753579245003e+00, 2.598350830286428e+00, 2.591021318801997e+00, 2.611406695843096e+00, 2.584380470974345e+00, 2.604867709635994e+00, 2.584380470974345e+00, 2.604867709635994e+00, 2.473694558103666e+00, 2.490111457416856e+00, 1.679996953392523e+00, 1.697209387452638e+00, 1.906327600651936e+00, 1.925232329039807e+00, 2.130385624067156e+00, 2.145885767992542e+00, 2.017179022931179e+00, 2.032817894932951e+00, 2.017179022931179e+00, 2.032817894932951e+00, 3.331424900033886e+00, 3.343781298548865e+00, -2.918220258373608e-01, -2.730471308039158e-01, 1.935152364100613e-01, 2.235671470759571e-01, 8.186738114498940e-01, 8.292510139688478e-01, 5.344713676551857e-01, 5.366736197066003e-01, 5.344713676551855e-01, 5.366736197066005e-01, 1.414626628973361e+00, 1.438613526990297e+00, -9.773492740732209e-01, -9.768148345291194e-01, -1.000221518156819e+00, -9.950480184309348e-01, 7.827368352546378e-01, 8.093292420332964e-01, -1.096222923111511e+00, -1.071859313777005e+00, -1.096222923111509e+00, -1.071859313777004e+00, -8.160349863398030e-01, -8.074587929157294e-01, -3.662832757222162e-01, -2.752030501403881e-01, -4.661550213940368e-01, -4.517776351893937e-01, -1.027227844104741e+00, -1.045713452608182e+00, -2.863205484947495e-01, -4.070516376860027e-01, -2.863205484947495e-01, -4.070516376860037e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_vsk_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_vsk", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.421749363069300e-06, 0.000000000000000e+00, 1.421754797375280e-06, 1.421734854926953e-06, 0.000000000000000e+00, 1.421744258043197e-06, 1.421686696792300e-06, 0.000000000000000e+00, 1.421675739858899e-06, 1.421850593439601e-06, 0.000000000000000e+00, 1.421884629344519e-06, 1.421740798210694e-06, 0.000000000000000e+00, 1.421799839355246e-06, 1.421740798210694e-06, 0.000000000000000e+00, 1.421799839355246e-06, 3.325663187800320e-04, 0.000000000000000e+00, 3.325595450306745e-04, 3.325606432606603e-04, 0.000000000000000e+00, 3.325545141185304e-04, 3.324298016083957e-04, 0.000000000000000e+00, 3.323898336145705e-04, 3.324961167931872e-04, 0.000000000000000e+00, 3.324595232612374e-04, 3.327412637981461e-04, 0.000000000000000e+00, 3.323239896576463e-04, 3.327412637981461e-04, 0.000000000000000e+00, 3.323239896576463e-04, 4.940289717142039e-02, 0.000000000000000e+00, 4.834756189007255e-02, 4.981042588295644e-02, 0.000000000000000e+00, 4.849501524503733e-02, 5.621853099159613e-02, 0.000000000000000e+00, 5.899354067084402e-02, 5.631835107033677e-02, 0.000000000000000e+00, 5.546006037604777e-02, 4.664847698646193e-02, 0.000000000000000e+00, 7.596893548732672e-02, 4.664847698646193e-02, 0.000000000000000e+00, 7.596893548732672e-02, 8.580605730016428e+00, 0.000000000000000e+00, 6.719974986812564e+00, 7.663249473339640e+00, 0.000000000000000e+00, 5.835729170841830e+00, 3.241940035550495e-02, 0.000000000000000e+00, 2.846589936210182e-02, 4.390386427147119e+01, 0.000000000000000e+00, 4.142067607236107e+01, 7.278101239580010e+00, 0.000000000000000e+00, 1.611278789240057e+02, 7.278101239580010e+00, 0.000000000000000e+00, 1.611278789240056e+02, 6.324554935332305e+05, 0.000000000000000e+00, 5.271074373991120e+05, 5.496620075812266e+05, 0.000000000000000e+00, 4.471177886892303e+05, 3.215912923169140e+03, 0.000000000000000e+00, 2.734910165001401e+03, 2.911563045821788e+06, 0.000000000000000e+00, 3.062096946632773e+06, 8.908292402179188e+05, 0.000000000000000e+00, 4.834057815661768e+06, 8.908292402179197e+05, 0.000000000000000e+00, 4.834057815661768e+06, 9.791364819426374e-05, 0.000000000000000e+00, 9.798406747621684e-05, 9.785833228974200e-05, 0.000000000000000e+00, 9.793057492825467e-05, 9.791027891972242e-05, 0.000000000000000e+00, 9.798201797175189e-05, 9.786281456401835e-05, 0.000000000000000e+00, 9.793342261864094e-05, 9.788551245430722e-05, 0.000000000000000e+00, 9.795721257937221e-05, 9.788551245430722e-05, 0.000000000000000e+00, 9.795721257937221e-05, 2.178707008912180e-03, 0.000000000000000e+00, 2.179090464546262e-03, 2.112505738669410e-03, 0.000000000000000e+00, 2.114666933127023e-03, 2.275953533071727e-03, 0.000000000000000e+00, 2.246976245326170e-03, 2.213529156141291e-03, 0.000000000000000e+00, 2.185686940814164e-03, 2.077494201694133e-03, 0.000000000000000e+00, 2.135628574228895e-03, 2.077494201694133e-03, 0.000000000000000e+00, 2.135628574228895e-03, 6.858253687135538e-02, 0.000000000000000e+00, 6.912439914638216e-02, 5.362260453322305e-02, 0.000000000000000e+00, 5.355961588631807e-02, 9.253373235145815e-02, 0.000000000000000e+00, 8.269613007272519e-02, 8.103294392828395e-02, 0.000000000000000e+00, 7.345151598854344e-02, 6.077111380479533e-02, 0.000000000000000e+00, 7.090616052007866e-02, 6.077111380479534e-02, 0.000000000000000e+00, 7.090616052007867e-02, 1.884001040691569e+02, 0.000000000000000e+00, 1.831136972438525e+02, 1.384195302322430e+01, 0.000000000000000e+00, 1.348599740606738e+01, 2.526743577646972e+02, 0.000000000000000e+00, 2.172149170532189e+02, 1.961210596678483e-03, 0.000000000000000e+00, 1.963876078634099e-03, 1.193855624935639e+02, 0.000000000000000e+00, 8.779501123883216e+01, 1.193855624935639e+02, 0.000000000000000e+00, 8.779501123883216e+01, 6.896249150667453e+06, 0.000000000000000e+00, 6.144160117875046e+06, 3.268604828676531e+06, 0.000000000000000e+00, 3.124575001922486e+06, 7.817233993148565e+06, 0.000000000000000e+00, 6.581458013225846e+06, 7.293820117935478e+02, 0.000000000000000e+00, 7.156938606986776e+02, 7.337221088007243e+06, 0.000000000000000e+00, 2.832807981443237e+06, 7.337221088007241e+06, 0.000000000000000e+00, 2.832807981443237e+06, 6.846790001640671e-02, 0.000000000000000e+00, 6.768664824126509e-02, 6.931749829618962e-02, 0.000000000000000e+00, 6.852030712980486e-02, 6.900278826888830e-02, 0.000000000000000e+00, 6.821003113511051e-02, 6.875526571403845e-02, 0.000000000000000e+00, 6.797062596867272e-02, 6.887764966766825e-02, 0.000000000000000e+00, 6.808908153357376e-02, 6.887764966766825e-02, 0.000000000000000e+00, 6.808908153357376e-02, 7.442808643698977e-02, 0.000000000000000e+00, 7.369595226596841e-02, 1.238208437754874e-01, 0.000000000000000e+00, 1.219492339404953e-01, 1.030902743393638e-01, 0.000000000000000e+00, 1.016240266755514e-01, 8.895655612451336e-02, 0.000000000000000e+00, 8.802130791349642e-02, 9.548188727404676e-02, 0.000000000000000e+00, 9.440739218950303e-02, 9.548188727404676e-02, 0.000000000000000e+00, 9.440739218950303e-02, 4.659040284851220e-02, 0.000000000000000e+00, 4.637568130071037e-02, 4.194927824695754e+00, 0.000000000000000e+00, 4.052081786777887e+00, 1.478989130917338e+00, 0.000000000000000e+00, 1.386628018159256e+00, 3.638453990833062e-01, 0.000000000000000e+00, 3.569171815767996e-01, 6.638420123100349e-01, 0.000000000000000e+00, 6.613077064775735e-01, 6.638420123100358e-01, 0.000000000000000e+00, 6.613077064775738e-01, 1.602295819755771e-01, 0.000000000000000e+00, 1.562524875544641e-01, 3.400274422593262e+03, 0.000000000000000e+00, 3.331906402415841e+03, 1.412861926891091e+03, 0.000000000000000e+00, 1.283394490343325e+03, 3.898677817411715e-01, 0.000000000000000e+00, 3.710277060758152e-01, 3.989206985724509e+02, 0.000000000000000e+00, 3.444569723643364e+02, 3.989206985724509e+02, 0.000000000000000e+00, 3.444569723643366e+02, 2.160861641238628e+05, 0.000000000000000e+00, 1.941913571224764e+05, 1.678524475313585e+08, 0.000000000000000e+00, 1.667067762652442e+08, 1.992428287949426e+07, 0.000000000000000e+00, 1.656042041411195e+07, 4.520416098601991e+02, 0.000000000000000e+00, 4.316119258707468e+02, 8.633557572150921e+06, 0.000000000000000e+00, 3.678870940637090e+06, 8.633557572150951e+06, 0.000000000000000e+00, 3.678870940637100e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
