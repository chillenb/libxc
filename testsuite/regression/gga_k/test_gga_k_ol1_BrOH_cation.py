
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_ol1_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_ol1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.190565253311251e+03, 2.190574077529221e+03, 2.190622524287368e+03, 2.190491048891869e+03, 2.190558628494086e+03, 2.190558628494086e+03, 5.921892695329753e+01, 5.921833561534493e+01, 5.920757514805261e+01, 5.924879029407687e+01, 5.922108312953041e+01, 5.922108312953041e+01, 2.307449669934782e+00, 2.305561642872354e+00, 2.270512304315802e+00, 2.303608988378257e+00, 2.312480945710309e+00, 2.312480945710309e+00, 2.076452976831202e-01, 2.092638780398561e-01, 3.103657517443340e+00, 1.662935835545345e-01, 2.074902840592290e-01, 2.074902840592289e-01, 8.135705945955196e-02, 7.916844609605848e-02, 1.084082815547689e-01, 8.525157820266080e-02, 7.646498991285935e-02, 7.646498991285926e-02, 1.282968653662841e+02, 1.283039161783067e+02, 1.282975567252527e+02, 1.283037749538311e+02, 1.283002355630246e+02, 1.283002355630246e+02, 2.063135413332063e+01, 2.085832734087702e+01, 2.058160078344125e+01, 2.078066723813781e+01, 2.078258266130677e+01, 2.078258266130677e+01, 1.669244184656961e+00, 1.880202252046315e+00, 1.443689136807327e+00, 1.485852039326329e+00, 1.717533180544786e+00, 1.717533180544787e+00, 1.423308300825861e-01, 2.513801772018843e-01, 1.343365900912296e-01, 1.703615021904979e+01, 1.370258074033199e-01, 1.370258074033199e-01, 7.428419478273179e-02, 7.862507167422537e-02, 3.137178887248431e-02, 1.059439980835255e-01, 4.607704512739105e-02, 4.607704512739110e-02, 1.588699505985028e+00, 1.588900785539565e+00, 1.588971330964290e+00, 1.588910982365400e+00, 1.588950677868647e+00, 1.588950677868647e+00, 1.498120185790101e+00, 1.239350170840717e+00, 1.307644349865106e+00, 1.379413527568079e+00, 1.341645564079502e+00, 1.341645564079502e+00, 2.070202879537773e+00, 3.414592225709048e-01, 4.296354395237623e-01, 6.291643904960267e-01, 5.126369994084785e-01, 5.126369994084785e-01, 1.053612241207198e+00, 1.131751315953042e-01, 1.152327422389827e-01, 5.639238629057374e-01, 1.047990692076949e-01, 1.047990692076949e-01, 9.073951644597190e-02, 3.563770420581114e-02, 5.097383462755407e-02, 1.029346189941121e-01, 4.131410744430486e-02, 4.131410744430480e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_ol1_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_ol1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.345996895520709e+03, 3.345988562860206e+03, 3.346022084169907e+03, 3.346006859455334e+03, 3.346102162516942e+03, 3.346121747386376e+03, 3.345817713705115e+03, 3.345759189174919e+03, 3.346011944085935e+03, 3.345903740888550e+03, 3.346011944085935e+03, 3.345903740888550e+03, 8.763432358117451e+01, 8.763689606066565e+01, 8.763549329862421e+01, 8.763804196221957e+01, 8.766362117079511e+01, 8.767201348797362e+01, 8.764313774697152e+01, 8.765106687186220e+01, 8.760306144388683e+01, 8.767937283724497e+01, 8.760306144388683e+01, 8.767937283724497e+01, 3.144220723268879e+00, 3.182277236665509e+00, 3.129929766270723e+00, 3.176616384290391e+00, 2.939669514406469e+00, 2.874547645341063e+00, 2.949553210836080e+00, 2.970658035911256e+00, 3.250429168103087e+00, 2.607189877343462e+00, 3.250429168103087e+00, 2.607189877343462e+00, 1.497601118727161e-01, 1.691134883107240e-01, 1.577078126337610e-01, 1.801137542378736e-01, 4.158231971158640e+00, 4.509139078754814e+00, 4.499783486054251e-02, 4.783901171407812e-02, 1.653730069831985e-01, -1.822781504491096e-02, 1.653730069831983e-01, -1.822781504491097e-02, -8.055408393910420e-02, -8.091344968934047e-02, -7.842924324573698e-02, -7.856997903885701e-02, -9.338421008456808e-02, -9.167084034105975e-02, -8.443368717752406e-02, -8.561031186297925e-02, -8.070020400650196e-02, -5.075686665613057e-02, -8.070020400650191e-02, -5.075686665613053e-02, 2.005406733458030e+02, 2.004431334765134e+02, 2.006519457938635e+02, 2.005506038060936e+02, 2.005470956238551e+02, 2.004469983243155e+02, 2.006425725402038e+02, 2.005446290053119e+02, 2.005974916681704e+02, 2.004970882343083e+02, 2.005974916681704e+02, 2.004970882343083e+02, 2.599894924614449e+01, 2.599613252992314e+01, 2.645364917087180e+01, 2.643759976085550e+01, 2.549111008094901e+01, 2.563566910118498e+01, 2.588332807070242e+01, 2.603179790619309e+01, 2.662932777994660e+01, 2.627989461535413e+01, 2.662932777994660e+01, 2.627989461535413e+01, 2.516339816178981e+00, 2.503299250522139e+00, 3.040043992647719e+00, 3.043663187278033e+00, 2.055510494115666e+00, 2.218046724230517e+00, 2.298375729311620e+00, 2.452727150507486e+00, 2.734834741000832e+00, 2.465306492460040e+00, 2.734834741000833e+00, 2.465306492460042e+00, -4.012835427339257e-02, -3.743638556197246e-02, 1.167941257976074e-01, 1.190159700514356e-01, -4.850552041867903e-02, -4.246108532962265e-02, 2.761785673462801e+01, 2.759344789615849e+01, -7.832515311201126e-03, 1.625846418944096e-02, -7.832515311201126e-03, 1.625846418944096e-02, -7.130316621857333e-02, -7.664151629377257e-02, -7.679370573779540e-02, -7.992212830668030e-02, -3.215785589785201e-02, -3.047678226368026e-02, -6.457673010051924e-02, -6.600427530197343e-02, -4.562987678105456e-02, -4.597315094933595e-02, -4.562987678105459e-02, -4.597315094933603e-02, 2.608547828336428e+00, 2.628999743899853e+00, 2.563723208228136e+00, 2.584248351043315e+00, 2.579464700158384e+00, 2.600062315204143e+00, 2.592579165159078e+00, 2.612964013824008e+00, 2.586021465837652e+00, 2.606508565383971e+00, 2.586021465837652e+00, 2.606508565383971e+00, 2.474550340815436e+00, 2.490969244490377e+00, 1.700286034264192e+00, 1.716753811732372e+00, 1.911919048551572e+00, 1.930580706507833e+00, 2.132433703627906e+00, 2.147935115429634e+00, 2.020162848850075e+00, 2.035777410433849e+00, 2.020162848850075e+00, 2.035777410433849e+00, 3.333910147951684e+00, 3.346250652026396e+00, 2.441662746695979e-01, 2.486440657570795e-01, 4.101044276949051e-01, 4.221876506959462e-01, 8.359023365966894e-01, 8.460093351289113e-01, 6.009015606496393e-01, 6.012472612766258e-01, 6.009015606496393e-01, 6.012472612766258e-01, 1.433840697119685e+00, 1.456468024975570e+00, -9.865839309682356e-02, -9.843041958177126e-02, -8.992568920541288e-02, -8.729244225607971e-02, 7.880293755970686e-01, 8.140652404011015e-01, -4.658924289863216e-02, -3.322565811428288e-02, -4.658924289863214e-02, -3.322565811428287e-02, -9.013846824459038e-02, -8.914789906880807e-02, -4.068827374639838e-02, -3.056880145730303e-02, -5.176225317844918e-02, -5.016131262710707e-02, -4.559062682491016e-02, -4.501472917362251e-02, -3.176325405323238e-02, -4.514122090811418e-02, -3.176325405323232e-02, -4.514122090811418e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_ol1_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_ol1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.544163715683686e-06, 0.000000000000000e+00, 1.544169828315021e-06, 1.544150596104666e-06, 0.000000000000000e+00, 1.544160296231230e-06, 1.544103202188768e-06, 0.000000000000000e+00, 1.544093902750139e-06, 1.544251509364355e-06, 0.000000000000000e+00, 1.544282891722959e-06, 1.544156164720197e-06, 0.000000000000000e+00, 1.544203352577090e-06, 1.544156164720197e-06, 0.000000000000000e+00, 1.544203352577090e-06, 3.540798294224654e-04, 0.000000000000000e+00, 3.541080772990745e-04, 3.540782296437119e-04, 0.000000000000000e+00, 3.541094128194986e-04, 3.540691450906272e-04, 0.000000000000000e+00, 3.540606233795234e-04, 3.539136323220568e-04, 0.000000000000000e+00, 3.539137997522840e-04, 3.542520933484069e-04, 0.000000000000000e+00, 3.538844860145214e-04, 3.542520933484069e-04, 0.000000000000000e+00, 3.538844860145214e-04, 4.893159602019433e-02, 0.000000000000000e+00, 4.841569077311698e-02, 4.914015929638901e-02, 0.000000000000000e+00, 4.850357587688035e-02, 5.208438027646297e-02, 0.000000000000000e+00, 5.309018185517760e-02, 5.146133895348875e-02, 0.000000000000000e+00, 5.115586252461162e-02, 4.741460830957279e-02, 0.000000000000000e+00, 5.674510602461550e-02, 4.741460830957279e-02, 0.000000000000000e+00, 5.674510602461550e-02, 2.925112369337716e+00, 0.000000000000000e+00, 2.611935094961774e+00, 2.821614561063021e+00, 0.000000000000000e+00, 2.480648275169105e+00, 3.230084015897855e-02, 0.000000000000000e+00, 2.941036510700525e-02, 6.390436656241743e+00, 0.000000000000000e+00, 6.133910699313289e+00, 2.570155947106848e+00, 0.000000000000000e+00, 1.645018806411693e+01, 2.570155947106847e+00, 0.000000000000000e+00, 1.645018806411692e+01, 7.032435141214886e+04, 0.000000000000000e+00, 5.861291035722134e+04, 6.112099073313188e+04, 0.000000000000000e+00, 4.972091503804821e+04, 3.566035134124251e+02, 0.000000000000000e+00, 3.028829031604624e+02, 3.236476664834160e+05, 0.000000000000000e+00, 3.403774863547636e+05, 9.904593760682968e+04, 0.000000000000000e+00, 5.373717141204048e+05, 9.904593760682968e+04, 0.000000000000000e+00, 5.373717141204044e+05, 1.078547788243688e-04, 0.000000000000000e+00, 1.079308830571657e-04, 1.078299607254079e-04, 0.000000000000000e+00, 1.079068807993097e-04, 1.078529113956652e-04, 0.000000000000000e+00, 1.079297096227354e-04, 1.078316157799504e-04, 0.000000000000000e+00, 1.079079048823375e-04, 1.078423957718038e-04, 0.000000000000000e+00, 1.079188502865429e-04, 1.078423957718038e-04, 0.000000000000000e+00, 1.079188502865429e-04, 1.943676507133280e-03, 0.000000000000000e+00, 1.943968778104626e-03, 1.902233217448048e-03, 0.000000000000000e+00, 1.903766062338375e-03, 1.977818134601201e-03, 0.000000000000000e+00, 1.968267812089811e-03, 1.941038034232823e-03, 0.000000000000000e+00, 1.931244911029366e-03, 1.895753349067004e-03, 0.000000000000000e+00, 1.919339217381130e-03, 1.895753349067004e-03, 0.000000000000000e+00, 1.919339217381130e-03, 7.377307918268632e-02, 0.000000000000000e+00, 7.436894371182085e-02, 6.119054177280557e-02, 0.000000000000000e+00, 6.121241559652783e-02, 9.829989642302472e-02, 0.000000000000000e+00, 8.845100073251318e-02, 9.121145182352701e-02, 0.000000000000000e+00, 8.257301755363464e-02, 6.587627207916591e-02, 0.000000000000000e+00, 7.667623805540631e-02, 6.587627207916592e-02, 0.000000000000000e+00, 7.667623805540634e-02, 1.886082148393613e+01, 0.000000000000000e+00, 1.833450942003775e+01, 2.753729434278688e+00, 0.000000000000000e+00, 2.713147822557868e+00, 2.545678706030992e+01, 0.000000000000000e+00, 2.176905851741005e+01, 2.246570032507366e-03, 0.000000000000000e+00, 2.249818090981414e-03, 1.261826321724933e+01, 0.000000000000000e+00, 1.063457599191171e+01, 1.261826321724933e+01, 0.000000000000000e+00, 1.063457599191171e+01, 7.665222218574997e+05, 0.000000000000000e+00, 6.829276541716278e+05, 3.633376193649470e+05, 0.000000000000000e+00, 3.473265407205471e+05, 8.690211695895116e+05, 0.000000000000000e+00, 7.316752726173723e+05, 7.763521269932652e+01, 0.000000000000000e+00, 7.621877411455768e+01, 8.156011217741279e+05, 0.000000000000000e+00, 3.149428592189912e+05, 8.156011217741276e+05, 0.000000000000000e+00, 3.149428592189912e+05, 8.412809933387323e-02, 0.000000000000000e+00, 8.338860117744683e-02, 7.932515268688506e-02, 0.000000000000000e+00, 7.849576086818634e-02, 8.011996588607942e-02, 0.000000000000000e+00, 7.931213780844998e-02, 8.129090779165304e-02, 0.000000000000000e+00, 8.048411222434265e-02, 8.062695684813144e-02, 0.000000000000000e+00, 7.982004721783166e-02, 8.062695684813144e-02, 0.000000000000000e+00, 7.982004721783166e-02, 9.900230382514996e-02, 0.000000000000000e+00, 9.813501402626765e-02, 1.239057273024592e-01, 0.000000000000000e+00, 1.223483950750379e-01, 1.091334348915699e-01, 0.000000000000000e+00, 1.077508992429060e-01, 9.751632595127095e-02, 0.000000000000000e+00, 9.652776608206401e-02, 1.030295294112143e-01, 0.000000000000000e+00, 1.019169594483758e-01, 1.030295294112143e-01, 0.000000000000000e+00, 1.019169594483758e-01, 5.289982194430985e-02, 0.000000000000000e+00, 5.276465700645869e-02, 1.372618079167856e+00, 0.000000000000000e+00, 1.349259672802579e+00, 8.018719879246288e-01, 0.000000000000000e+00, 7.786002993592619e-01, 3.514530524470232e-01, 0.000000000000000e+00, 3.457735134172294e-01, 5.246631792162021e-01, 0.000000000000000e+00, 5.252964474276748e-01, 5.246631792162025e-01, 0.000000000000000e+00, 5.252964474276749e-01, 1.592759854679630e-01, 0.000000000000000e+00, 1.561237402776022e-01, 3.773272229607611e+02, 0.000000000000000e+00, 3.696966866326178e+02, 1.552345459503087e+02, 0.000000000000000e+00, 1.406623112708569e+02, 4.010501023222264e-01, 0.000000000000000e+00, 3.838630857687846e-01, 4.063744805501634e+01, 0.000000000000000e+00, 3.455457924347117e+01, 4.063744805501633e+01, 0.000000000000000e+00, 3.455457924347119e+01, 2.403295288584952e+04, 0.000000000000000e+00, 2.159862402908978e+04, 1.865330401404952e+07, 0.000000000000000e+00, 1.852645697839941e+07, 2.214457986251151e+06, 0.000000000000000e+00, 1.840629188201412e+06, 4.619808706440561e+01, 0.000000000000000e+00, 4.400853646842187e+01, 9.597569453051895e+05, 0.000000000000000e+00, 4.089876757545383e+05, 9.597569453051917e+05, 0.000000000000000e+00, 4.089876757545394e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
