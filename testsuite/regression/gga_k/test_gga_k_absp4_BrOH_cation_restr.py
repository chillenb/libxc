
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_absp4_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_absp4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [1.297553224556513e+03, 1.297548273417148e+03, 1.297548048661032e+03, 1.297621265134266e+03, 1.297579802032754e+03, 1.297579802032754e+03, 3.856259005248450e+01, 3.855968284835380e+01, 3.849440589352471e+01, 3.862260505238245e+01, 3.856096349118781e+01, 3.856096349118781e+01, 1.815913247872236e+00, 1.823545811166461e+00, 2.044439642593979e+00, 2.061595624018459e+00, 2.044509955642150e+00, 2.044509955642150e+00, 3.212953229444129e-01, 3.130511382827537e-01, 2.329736672135906e+00, 3.621377076465770e-01, 3.322320148129714e-01, 3.322320148129715e-01, 3.129361903865693e-01, 3.044100174015463e-01, 3.961223822633244e-01, 3.285279170347707e-01, 2.913857978942690e-01, 2.913857978942686e-01, 7.044424664300884e+01, 7.032798417802226e+01, 7.043966171384376e+01, 7.033701091640553e+01, 7.038487419869654e+01, 7.038487419869654e+01, 1.911127091937444e+01, 1.911732032093970e+01, 1.953301575324225e+01, 1.953668411218094e+01, 1.891331735077766e+01, 1.891331735077766e+01, 1.037902907291954e+00, 9.071583628216563e-01, 9.333134380164830e-01, 7.453065781084999e-01, 1.031125611414715e+00, 1.031125611414715e+00, 4.115406600035352e-01, 4.861473360496700e-01, 3.996560119692825e-01, 8.167476073137166e+00, 3.398134278714638e-01, 3.398134278714638e-01, 2.862362301825449e-01, 3.028258153038006e-01, 1.208187384399695e-01, 3.539173173282102e-01, 1.771100665164728e-01, 1.771100665164730e-01, 7.099594184679134e-01, 7.624915118865370e-01, 7.440406078752212e-01, 7.287358933796025e-01, 7.363879327049246e-01, 7.363879327049246e-01, 6.549093109257984e-01, 9.635032671293631e-01, 8.686571788690406e-01, 7.762413041353935e-01, 8.209549882958742e-01, 8.209549882958742e-01, 1.009685256688346e+00, 5.498577570857744e-01, 5.564450668446552e-01, 5.221830644491176e-01, 5.315165641567502e-01, 5.315165641567502e-01, 8.280936670641404e-01, 4.162594668855379e-01, 4.080546244595259e-01, 4.083425924502030e-01, 3.164937796403327e-01, 3.164937796403325e-01, 3.482817581504221e-01, 1.367416560764932e-01, 1.965347940392756e-01, 3.200965842246057e-01, 1.575922535888293e-01, 1.575922535888290e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_absp4_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_absp4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [1.067520900298434e+03, 1.067539043228960e+03, 1.067601987463544e+03, 1.067332420241783e+03, 1.067476187286897e+03, 1.067476187286897e+03, 2.412760368393745e+01, 2.413078150954827e+01, 2.420538613442444e+01, 2.408477998624889e+01, 2.413257717330962e+01, 2.413257717330962e+01, 5.163440749914600e-01, 5.035715852282742e-01, 1.607045234205401e-01, 1.803084173655515e-01, 1.895512180116092e-01, 1.895512180116092e-01, -1.657966943150441e-01, -1.528068032246302e-01, 8.413719925167261e-01, -2.725152807438411e-01, -2.192226781019626e-01, -2.192226781019626e-01, -3.127477553568724e-01, -3.042012608918376e-01, -3.897681617515175e-01, -3.284650659712703e-01, -2.912865570326882e-01, -2.912865570326879e-01, 7.008501843857745e+01, 7.025288433938680e+01, 7.009217327018685e+01, 7.024037734982247e+01, 7.017044261786324e+01, 7.017044261786324e+01, 7.435427226889819e-01, 1.026571645092176e+00, 1.120781810855902e-01, 3.624213307540915e-01, 1.203237668817615e+00, 1.203237668817615e+00, 7.466592207818276e-01, 1.198912396348460e+00, 5.946001941040197e-01, 9.057306551627580e-01, 8.114425992919435e-01, 8.114425992919435e-01, -3.683398831509946e-01, -3.301760589749144e-01, -3.626822957180133e-01, 1.093525552690304e+01, -2.803181548657228e-01, -2.803181548657228e-01, -2.861988140054945e-01, -3.027657498485288e-01, -1.207836189691164e-01, -3.371916531087168e-01, -1.770590984047417e-01, -1.770590984047419e-01, 1.091974588138950e+00, 1.018829115599625e+00, 1.044520030044555e+00, 1.065799111473670e+00, 1.055155390355966e+00, 1.055155390355966e+00, 1.050660122132338e+00, 2.933284189196051e-01, 5.095135045316870e-01, 7.278016039477757e-01, 6.181149361093055e-01, 6.181149361093055e-01, 1.305047776223940e+00, -3.008845528136722e-01, -1.973569814944948e-01, 1.043085419170201e-01, -5.771696612475820e-02, -5.771696612475814e-02, 2.371705224781262e-01, -4.104384162473856e-01, -3.972350749824040e-01, 1.738717093302163e-01, -2.893758158586149e-01, -2.893758158586149e-01, -3.479064355876438e-01, -1.367373642366403e-01, -1.965158842497986e-01, -2.961839284033897e-01, -1.575486144988354e-01, -1.575486144988354e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_absp4_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_absp4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [2.772537911187584e-06, 2.772514714566141e-06, 2.772404432223710e-06, 2.772749708531451e-06, 2.772569801482635e-06, 2.772569801482635e-06, 6.424586938376215e-04, 6.424545338045901e-04, 6.423111749312214e-04, 6.421945157537648e-04, 6.424072475246894e-04, 6.424072475246894e-04, 8.953233898464080e-02, 8.982912911598950e-02, 9.738434484796549e-02, 9.499901418588558e-02, 9.549970653478800e-02, 9.549970653478800e-02, 5.200615948740276e+00, 4.971307192779016e+00, 5.647132033761714e-02, 1.188555807071054e+01, 8.394080687433387e+00, 8.394080687433391e+00, 1.232827086515490e+05, 1.057266782797233e+05, 6.295804086549139e+02, 6.399936754847894e+05, 3.225587588420086e+05, 3.225587588420086e+05, 1.914231531866150e-04, 1.913177634637386e-04, 1.914179023844001e-04, 1.913248681411135e-04, 1.913699356248598e-04, 1.913699356248598e-04, 3.604507269286933e-03, 3.527195672518279e-03, 3.662380506481865e-03, 3.592479498920752e-03, 3.534387921108130e-03, 3.534387921108130e-03, 1.337664249191884e-01, 1.043362421470352e-01, 1.688481940149636e-01, 1.503174249532524e-01, 1.274997306157567e-01, 1.274997306157567e-01, 3.551462992992636e+01, 5.176994292756193e+00, 4.485439181616123e+01, 3.819455177186946e-03, 2.197459784417452e+01, 2.197459784417452e+01, 1.393334884221531e+06, 6.850266518158838e+05, 1.532225489334638e+06, 1.474244675001245e+02, 8.763887867505179e+05, 8.763887867505179e+05, 1.318366946807843e-01, 1.341317166620294e-01, 1.333181029776194e-01, 1.326528933474115e-01, 1.329853058021739e-01, 1.329853058021739e-01, 1.431662080695718e-01, 2.263231330804294e-01, 1.971015853277487e-01, 1.728837957312739e-01, 1.847233445345677e-01, 1.847233445345677e-01, 9.055100281509462e-02, 2.566939987106195e+00, 1.481982704965862e+00, 6.430899805349090e-01, 9.778057717817868e-01, 9.778057717817871e-01, 2.900404943531869e-01, 7.180299546616795e+02, 2.833549882751573e+02, 7.178278835729108e-01, 7.140999683795188e+01, 7.140999683795187e+01, 4.385686850770035e+04, 3.586570451058534e+07, 3.878060567404477e+06, 8.623884053064853e+01, 1.106193494054246e+06, 1.106193494054249e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
