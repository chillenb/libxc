
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_tw2_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tw2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.192417687218997e+03, 2.192426557343159e+03, 2.192475154232086e+03, 2.192342996081170e+03, 2.192410941402917e+03, 2.192410941402917e+03, 5.922467960943824e+01, 5.922414301159220e+01, 5.921463895438478e+01, 5.925365941530737e+01, 5.922690111083799e+01, 5.922690111083799e+01, 2.294310895027588e+00, 2.291835643178909e+00, 2.237009363512999e+00, 2.270926964426129e+00, 2.269522161807095e+00, 2.269522161807095e+00, 1.810481017185283e-01, 1.850166177454743e-01, 3.091853722493132e+00, 1.140995068899609e-01, 1.732050949182192e-01, 1.732050949182191e-01, 2.775592629806397e-04, 3.078695566794004e-04, 9.248850144462712e-03, 9.221515937403495e-05, 1.846651659478937e-04, 1.846651659478937e-04, 1.283911817960339e+02, 1.283971778570028e+02, 1.283918304607524e+02, 1.283971179380538e+02, 1.283940181203998e+02, 1.283940181203998e+02, 2.027498501470463e+01, 2.051876553816367e+01, 2.017645563530291e+01, 2.039158518675315e+01, 2.045732642557375e+01, 2.045732642557375e+01, 1.670251064657271e+00, 1.879526537246262e+00, 1.443933598958483e+00, 1.485932701915488e+00, 1.718898361167138e+00, 1.718898361167139e+00, 5.919784468553574e-02, 1.923569321220885e-01, 5.119359533054242e-02, 1.702888194627517e+01, 7.865670505054273e-02, 7.865670505054273e-02, 5.498152437186690e-05, 8.812143849974401e-05, 5.171619091511820e-05, 2.375192535402208e-02, 8.295485956800830e-05, 8.295485956800834e-05, 1.587058603100377e+00, 1.588239455097651e+00, 1.587907592308183e+00, 1.587540540799984e+00, 1.587728265818421e+00, 1.587728265818421e+00, 1.496598912116838e+00, 1.233040237433279e+00, 1.307362946541875e+00, 1.380555817025264e+00, 1.342603386710475e+00, 1.342603386710475e+00, 2.069695531333110e+00, 2.924562810318960e-01, 3.984666947386928e-01, 6.237139894591115e-01, 4.971117989390915e-01, 4.971117989390915e-01, 1.047688250889351e+00, 8.454860786208983e-03, 1.559882630327249e-02, 5.626121740383702e-01, 3.770120195237749e-02, 3.770120195237750e-02, 5.509976148536910e-04, 6.295537364387179e-06, 2.786759705355306e-05, 3.337806845897852e-02, 6.979349768365223e-05, 6.979349768365209e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_tw2_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tw2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.352281083769359e+03, 3.352272613979367e+03, 3.352304796944869e+03, 3.352289839577033e+03, 3.352382190666987e+03, 3.352400310854210e+03, 3.352114355609499e+03, 3.352058945406288e+03, 3.352295149535562e+03, 3.352196521655728e+03, 3.352295149535562e+03, 3.352196521655728e+03, 8.836063605962900e+01, 8.836008037894524e+01, 8.836142074390102e+01, 8.836064156870482e+01, 8.837821981245537e+01, 8.838366213695377e+01, 8.837765871416437e+01, 8.838217192176714e+01, 8.833035758815410e+01, 8.840048808570212e+01, 8.833035758815410e+01, 8.840048808570212e+01, 3.256796063773699e+00, 3.282853444402509e+00, 3.246715824120794e+00, 3.278510694816725e+00, 3.118919412680607e+00, 3.080972639329900e+00, 3.144607130189781e+00, 3.156684562462267e+00, 3.334600643308379e+00, 2.977524230122638e+00, 3.334600643308379e+00, 2.977524230122638e+00, 2.327056706961454e-01, 2.471082572829401e-01, 2.361870021879963e-01, 2.531856467042357e-01, 4.297717243567184e+00, 4.597540386003995e+00, 1.570353911734629e-01, 1.608314696923359e-01, 2.525951790126765e-01, 9.365819702655508e-02, 2.525951790126764e-01, 9.365819702655509e-02, 4.318856304493818e-04, 4.876029551391571e-04, 4.741695055892726e-04, 5.440538690789841e-04, 1.427770763227681e-02, 1.586981565196650e-02, 1.561723231430262e-04, 1.510136696470175e-04, 3.437842555219138e-04, 1.113740735033759e-04, 3.437842555219138e-04, 1.113740735033759e-04, 2.003400127324888e+02, 2.002429453629613e+02, 2.004420185118569e+02, 2.003414548874681e+02, 2.003459565068752e+02, 2.002465288138326e+02, 2.004334787992538e+02, 2.003360165833458e+02, 2.003920327723882e+02, 2.002923749675384e+02, 2.003920327723882e+02, 2.002923749675384e+02, 2.795032835384377e+01, 2.794754824903858e+01, 2.834751001916173e+01, 2.833244859036671e+01, 2.765354807510142e+01, 2.773425115073201e+01, 2.799190786434020e+01, 2.807881993462685e+01, 2.840379450254913e+01, 2.818024247567983e+01, 2.840379450254913e+01, 2.818024247567983e+01, 2.528301749433959e+00, 2.515057153367418e+00, 3.033049380549170e+00, 3.036710322973607e+00, 2.074205420075712e+00, 2.232831801923124e+00, 2.293027780200921e+00, 2.447058272462140e+00, 2.741416004236948e+00, 2.472969328074563e+00, 2.741416004236949e+00, 2.472969328074565e+00, 8.868358962219404e-02, 8.997276338773383e-02, 2.606670645620635e-01, 2.628046526162486e-01, 7.416632302974954e-02, 8.124384024939217e-02, 2.755552036232207e+01, 2.753119661272125e+01, 1.092813855302689e-01, 1.166696651141798e-01, 1.092813855302689e-01, 1.166696651141798e-01, 8.790208896654846e-05, 9.493629969807524e-05, 1.445807328308810e-04, 1.489908686550631e-04, 8.083434221738946e-05, 9.065195409411796e-05, 3.741867208328073e-02, 3.790006215420215e-02, 8.433359016532248e-05, 1.590031827630904e-04, 8.433359016532249e-05, 1.590031827630905e-04, 2.605138908158824e+00, 2.625632994123443e+00, 2.557905606359377e+00, 2.578417762660145e+00, 2.574151781389757e+00, 2.594764866666568e+00, 2.587961152953688e+00, 2.608366993875995e+00, 2.581024049408998e+00, 2.601530417423193e+00, 2.581024049408998e+00, 2.601530417423193e+00, 2.472660756475470e+00, 2.489079330950193e+00, 1.754494070053889e+00, 1.769789732694883e+00, 1.931749924576843e+00, 1.949484866951595e+00, 2.131954018940688e+00, 2.147303341903517e+00, 2.027762565592774e+00, 2.043147330809991e+00, 2.027762565592774e+00, 2.043147330809991e+00, 3.326106091178306e+00, 3.338462758044727e+00, 3.872900638721263e-01, 3.909101800456066e-01, 5.239956103925526e-01, 5.325556235751649e-01, 8.737787534514817e-01, 8.834062756894604e-01, 6.732652586790622e-01, 6.725063007401973e-01, 6.732652586790621e-01, 6.725063007401971e-01, 1.483200124830879e+00, 1.503743736262540e+00, 1.377875199502918e-02, 1.396283984631863e-02, 2.442835053289711e-02, 2.599577943000998e-02, 8.048007387692372e-01, 8.295966062534971e-01, 5.516340001965881e-02, 5.990914801603729e-02, 5.516340001965880e-02, 5.990914801603731e-02, 8.829392113229841e-04, 9.479647875195577e-04, 1.046823199257853e-05, 1.051595726122712e-05, 4.333645420912548e-05, 4.902100615496952e-05, 5.083417444898715e-02, 5.236699169163316e-02, 7.565704980907337e-05, 1.335929361173255e-04, 7.565704980907322e-05, 1.335929361173253e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_tw2_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_tw2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.527976223750343e-06, 0.000000000000000e+00, 1.527982869620937e-06, 1.527970729234756e-06, 0.000000000000000e+00, 1.527978872570221e-06, 1.527937771722519e-06, 0.000000000000000e+00, 1.527935952706111e-06, 1.528000213166691e-06, 0.000000000000000e+00, 1.528015415125857e-06, 1.527973723341578e-06, 0.000000000000000e+00, 1.527972339013818e-06, 1.527973723341578e-06, 0.000000000000000e+00, 1.527972339013818e-06, 3.311451581259165e-04, 0.000000000000000e+00, 3.312608021900980e-04, 3.311548359249597e-04, 0.000000000000000e+00, 3.312789008677750e-04, 3.314745452250453e-04, 0.000000000000000e+00, 3.315525701565354e-04, 3.307600661569942e-04, 0.000000000000000e+00, 3.308584005697585e-04, 3.312710685946993e-04, 0.000000000000000e+00, 3.311202084456584e-04, 3.312710685946993e-04, 0.000000000000000e+00, 3.311202084456584e-04, 3.935542809712516e-02, 0.000000000000000e+00, 3.967766653647679e-02, 3.926653306570535e-02, 0.000000000000000e+00, 3.966417062610105e-02, 3.801102032234600e-02, 0.000000000000000e+00, 3.736605062234358e-02, 3.690237877808936e-02, 0.000000000000000e+00, 3.712209296928636e-02, 3.992948344292520e-02, 0.000000000000000e+00, 3.299110294391669e-02, 3.992948344292520e-02, 0.000000000000000e+00, 3.299110294391669e-02, 9.142587498907382e-01, 0.000000000000000e+00, 9.042961466016419e-01, 9.368059487016837e-01, 0.000000000000000e+00, 9.198518794665318e-01, 2.623977516350531e-02, 0.000000000000000e+00, 2.559666988661029e-02, 8.530641562770062e-01, 0.000000000000000e+00, 8.393608558861114e-01, 8.259341756300687e-01, 0.000000000000000e+00, 8.258528109094372e-01, 8.259341756300685e-01, 0.000000000000000e+00, 8.258528109094380e-01, 9.195593885264643e-02, 0.000000000000000e+00, 9.674143229402923e-02, 1.015355932511938e-01, 0.000000000000000e+00, 1.082238865154152e-01, 3.172755659273164e-01, 0.000000000000000e+00, 3.374300225396287e-01, 5.061267802926606e-02, 0.000000000000000e+00, 4.841783773844385e-02, 8.188671523442416e-02, 0.000000000000000e+00, 1.182084939664054e-01, 8.188671523442437e-02, 0.000000000000000e+00, 1.182084939664056e-01, 1.107486561800011e-04, 0.000000000000000e+00, 1.108234349751320e-04, 1.108057790445681e-04, 0.000000000000000e+00, 1.108787126366743e-04, 1.107509760627736e-04, 0.000000000000000e+00, 1.108247227226154e-04, 1.108000042434358e-04, 0.000000000000000e+00, 1.108749504324974e-04, 1.107786091098808e-04, 0.000000000000000e+00, 1.108513375571926e-04, 1.107786091098808e-04, 0.000000000000000e+00, 1.108513375571926e-04, 1.353890066313987e-03, 0.000000000000000e+00, 1.354052770246415e-03, 1.339784163120489e-03, 0.000000000000000e+00, 1.340513589356523e-03, 1.336853444182406e-03, 0.000000000000000e+00, 1.342374304203554e-03, 1.325405319742307e-03, 0.000000000000000e+00, 1.330237484646410e-03, 1.357127933359245e-03, 0.000000000000000e+00, 1.348696153720280e-03, 1.357127933359245e-03, 0.000000000000000e+00, 1.348696153720280e-03, 7.099610094620444e-02, 0.000000000000000e+00, 7.160537367186015e-02, 6.508547692295635e-02, 0.000000000000000e+00, 6.511311094766224e-02, 9.138692829294981e-02, 0.000000000000000e+00, 8.376708894782246e-02, 9.656707726693430e-02, 0.000000000000000e+00, 8.734382489322072e-02, 6.482419891097296e-02, 0.000000000000000e+00, 7.492283471605077e-02, 6.482419891097299e-02, 0.000000000000000e+00, 7.492283471605077e-02, 6.193596295929066e-01, 0.000000000000000e+00, 6.367679858079772e-01, 5.352064250196450e-01, 0.000000000000000e+00, 5.333858417297930e-01, 6.259000269608330e-01, 0.000000000000000e+00, 6.438605960846832e-01, 2.389651255449522e-03, 0.000000000000000e+00, 2.393096066664799e-03, 7.945618450955568e-01, 0.000000000000000e+00, 1.026357382279080e+00, 7.945618450955568e-01, 0.000000000000000e+00, 1.026357382279080e+00, 5.329801553875540e-02, 0.000000000000000e+00, 4.794162771315236e-02, 5.886665910074981e-02, 0.000000000000000e+00, 5.517270177638867e-02, 2.507533708880016e-01, 0.000000000000000e+00, 2.954291803607461e-01, 6.219096910012427e-01, 0.000000000000000e+00, 6.027804740553996e-01, 1.273478182435572e-01, 0.000000000000000e+00, 1.718158951935204e-01, 1.273478182435567e-01, 0.000000000000000e+00, 1.718158951935202e-01, 8.611285063141946e-02, 0.000000000000000e+00, 8.517529696980476e-02, 8.438006219547980e-02, 0.000000000000000e+00, 8.349476596508679e-02, 8.498228821508490e-02, 0.000000000000000e+00, 8.408280313034028e-02, 8.549254698466238e-02, 0.000000000000000e+00, 8.457013810030566e-02, 8.523742149138633e-02, 0.000000000000000e+00, 8.432614783931838e-02, 8.523742149138633e-02, 0.000000000000000e+00, 8.432614783931838e-02, 9.450576525788357e-02, 0.000000000000000e+00, 9.358305388562106e-02, 1.014148761031058e-01, 0.000000000000000e+00, 1.005963545392186e-01, 1.005411685611139e-01, 0.000000000000000e+00, 9.967313313892130e-02, 9.897897917659965e-02, 0.000000000000000e+00, 9.807015846769979e-02, 1.000470110452317e-01, 0.000000000000000e+00, 9.909841501023012e-02, 1.000470110452317e-01, 0.000000000000000e+00, 9.909841501023012e-02, 5.622297446493760e-02, 0.000000000000000e+00, 5.610359029168637e-02, 4.152687996265310e-01, 0.000000000000000e+00, 4.139310469756197e-01, 3.581417645158545e-01, 0.000000000000000e+00, 3.573395863907955e-01, 2.717616775358107e-01, 0.000000000000000e+00, 2.685475806984967e-01, 3.215594227612801e-01, 0.000000000000000e+00, 3.235175416678541e-01, 3.215594227612803e-01, 0.000000000000000e+00, 3.235175416678543e-01, 1.288829436251654e-01, 0.000000000000000e+00, 1.274494411783821e-01, 2.845067858905810e-01, 0.000000000000000e+00, 2.868385249468392e-01, 3.803439527434546e-01, 0.000000000000000e+00, 4.021849583682022e-01, 3.458692057619203e-01, 0.000000000000000e+00, 3.350663663402245e-01, 7.820807035196670e-01, 0.000000000000000e+00, 9.758188296917343e-01, 7.820807035196681e-01, 0.000000000000000e+00, 9.758188296917352e-01, 1.042891793165255e-01, 0.000000000000000e+00, 1.103341926120332e-01, 5.657992114778854e-02, 0.000000000000000e+00, 1.004527073109503e-01, 7.105887653586705e-02, 0.000000000000000e+00, 8.045780972324353e-02, 8.348812321600976e-01, 0.000000000000000e+00, 8.316257882298433e-01, 2.487079434827250e-01, 0.000000000000000e+00, 1.634777181306101e-01, 2.487079434827251e-01, 0.000000000000000e+00, 1.634777181306103e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
