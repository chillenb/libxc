
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_apbeint_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_apbeint", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.176752013262189e+03, 2.176759807065801e+03, 2.176806370546183e+03, 2.176678509820569e+03, 2.176756024867146e+03, 2.176756024867146e+03, 5.877135447313652e+01, 5.877097278849332e+01, 5.876533257414135e+01, 5.879998289155026e+01, 5.877165887790416e+01, 5.877165887790416e+01, 2.268296257654523e+00, 2.266294969778432e+00, 2.221449308556332e+00, 2.252264308489081e+00, 2.267553025083008e+00, 2.267553025083008e+00, 1.943171966553859e-01, 1.975788835710528e-01, 3.160258809338518e+00, 1.174057159292989e-01, 1.952709821858657e-01, 1.952709821858657e-01, 8.462849908847642e-04, 9.282946189302214e-04, 1.495202690360889e-02, 1.951343168193049e-04, 9.090523438048519e-04, 9.090523438048519e-04, 1.274850360243647e+02, 1.274938794333423e+02, 1.274861698811032e+02, 1.274930421868168e+02, 1.274892389841286e+02, 1.274892389841286e+02, 2.017508492829463e+01, 2.040552229522467e+01, 2.013690338161846e+01, 2.031624532964970e+01, 2.038063581091146e+01, 2.038063581091146e+01, 1.620546174954953e+00, 1.829602781996185e+00, 1.464915548190018e+00, 1.532051978547917e+00, 1.734530936501740e+00, 1.734530936501740e+00, 6.920599698281280e-02, 2.149650517256207e-01, 6.710743701454261e-02, 1.692890078463152e+01, 8.841039246814779e-02, 8.841039246814779e-02, 1.815994984479366e-04, 2.371510754927000e-04, 1.332252299311536e-04, 2.829088477238032e-02, 1.968826568135103e-04, 1.968826568135103e-04, 1.632852858250290e+00, 1.630348954867680e+00, 1.631222933006706e+00, 1.631903694971395e+00, 1.631558594963703e+00, 1.631558594963703e+00, 1.527435802955567e+00, 1.265171548030402e+00, 1.337416905740859e+00, 1.406338944130389e+00, 1.370426917345587e+00, 1.370426917345587e+00, 2.014273816449089e+00, 3.204613121854834e-01, 4.241123134928432e-01, 6.268943551426885e-01, 5.139087414544833e-01, 5.139087414544832e-01, 1.036045393719751e+00, 1.290289193040516e-02, 2.320831650156639e-02, 5.428360732514120e-01, 4.632218236755207e-02, 4.632218236755206e-02, 1.161909333953489e-03, 1.778520793214523e-05, 6.417159600575025e-05, 4.212557933911772e-02, 1.422137658468076e-04, 1.422137658468072e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_apbeint_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_apbeint", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.341651663979001e+03, 3.341670188721203e+03, 3.341761450780276e+03, 3.341457932477280e+03, 3.341661361251225e+03, 3.341661361251225e+03, 8.775850534480462e+01, 8.775930223405103e+01, 8.778844583934666e+01, 8.777545036488240e+01, 8.775966288934387e+01, 8.775966288934387e+01, 3.173581587675372e+00, 3.166404561335573e+00, 2.993003439779229e+00, 3.040113721461439e+00, 3.170963193641653e+00, 3.170963193641653e+00, 2.462968280191503e-01, 2.511384748071941e-01, 4.596628790844131e+00, 1.539990033554245e-01, 2.477060262617643e-01, 2.477060262617643e-01, 1.405222554525600e-03, 1.540829286729598e-03, 2.385780899895283e-02, 3.249888941757948e-04, 1.508901758115647e-03, 1.508901758115647e-03, 1.999308515456096e+02, 2.000358449784172e+02, 1.999417389072395e+02, 2.000233749412761e+02, 1.999844759848213e+02, 1.999844759848213e+02, 2.722491096567702e+01, 2.760829496564347e+01, 2.707449735743761e+01, 2.737109336914082e+01, 2.768575999535498e+01, 2.768575999535498e+01, 2.455931565481603e+00, 2.973469168764814e+00, 2.207044356913562e+00, 2.455141023091234e+00, 2.658541507991878e+00, 2.658541507991878e+00, 9.886406241659758e-02, 2.739605442063802e-01, 9.529949314929061e-02, 2.750755221455622e+01, 1.201937668272057e-01, 1.201937668272057e-01, 3.024562289149845e-04, 3.948939679438894e-04, 2.218510023577629e-04, 4.340237412342288e-02, 3.278380296392285e-04, 3.278380296392285e-04, 2.701966516334380e+00, 2.657833411333917e+00, 2.673660472432279e+00, 2.685885098522220e+00, 2.679769899863921e+00, 2.679769899863921e+00, 2.533654083421876e+00, 1.814486304057306e+00, 2.004109239028155e+00, 2.197294299366094e+00, 2.097309256810247e+00, 2.097309256810247e+00, 3.265902528282499e+00, 4.045034473773727e-01, 5.451363161152857e-01, 8.789446973664139e-01, 6.860959692467438e-01, 6.860959692467437e-01, 1.473318093354259e+00, 2.077714657646116e-02, 3.633259160871872e-02, 7.914550914870592e-01, 6.748514417915924e-02, 6.748514417915923e-02, 1.927933451315639e-03, 2.963937397983292e-05, 1.069207767991058e-04, 6.130684710469675e-02, 2.368339542374708e-04, 2.368339542374701e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_apbeint_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_apbeint", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([7.248363119619937e-07, 7.248322274161143e-07, 7.248083923520544e-07, 7.248753879072498e-07, 7.248342048347019e-07, 7.248342048347019e-07, 1.631479534928491e-04, 1.631501249089501e-04, 1.631894216388057e-04, 1.630177503051626e-04, 1.631469854052666e-04, 1.631469854052666e-04, 2.064250785209992e-02, 2.063863379338279e-02, 2.017072154452176e-02, 1.982585112862307e-02, 2.064148557646353e-02, 2.064148557646353e-02, 6.038368408568098e-01, 6.082657134154966e-01, 1.295102722056744e-02, 6.265803949165469e-01, 6.056310599411481e-01, 6.056310599411481e-01, 2.345092340101367e-01, 2.463308721051210e-01, 4.232676096970039e-01, 7.960264894459305e-02, 2.532293333490432e-01, 2.532293333490432e-01, 5.081556677848637e-05, 5.079917444665321e-05, 5.081378679733510e-05, 5.080104434675053e-05, 5.080734440215301e-05, 5.080734440215301e-05, 7.391265802035020e-04, 7.300890925763130e-04, 7.361363282130480e-04, 7.292378682041122e-04, 7.364860136073789e-04, 7.364860136073789e-04, 3.570381467241668e-02, 2.865626373597782e-02, 4.152255775462039e-02, 3.799923903481008e-02, 3.223038586570826e-02, 3.223038586570826e-02, 5.269061151310208e-01, 3.560294488505027e-01, 5.961641101234522e-01, 1.018414226570479e-03, 6.561110452288778e-01, 6.561110452288778e-01, 8.146351665241472e-02, 9.329825724244843e-02, 2.001434583693438e-01, 5.817725057491548e-01, 1.255631497360663e-01, 1.255631497360662e-01, 3.294766026505984e-02, 3.391900799505188e-02, 3.360490242542182e-02, 3.333705852660477e-02, 3.347392608780608e-02, 3.347392608780608e-02, 3.621961492459830e-02, 5.067150373180501e-02, 4.756061189558099e-02, 4.393073224683770e-02, 4.590089589446614e-02, 4.590089589446612e-02, 2.488404800098752e-02, 2.580271504443830e-01, 2.093146678733567e-01, 1.423963454082505e-01, 1.779489106354159e-01, 1.779489106354161e-01, 6.792461486506665e-02, 3.308577542794967e-01, 4.495285867535325e-01, 1.821553509293524e-01, 7.300365356275907e-01, 7.300365356275917e-01, 2.065339523394856e-01, 4.392313054781156e-02, 7.184750935790209e-02, 8.550957713752269e-01, 1.558382034817759e-01, 1.558382034817754e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
