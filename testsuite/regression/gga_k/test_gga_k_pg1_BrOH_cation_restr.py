
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_pg1_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_pg1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.524219485784334e+03, 2.524218059145506e+03, 2.524240937975030e+03, 2.524261571073102e+03, 2.524246599875224e+03, 2.524246599875224e+03, 7.243902520041881e+01, 7.243509894082150e+01, 7.234800330567822e+01, 7.252710535032567e+01, 7.243781007875302e+01, 7.243781007875302e+01, 3.264404956996415e+00, 3.275842115438532e+00, 3.636389204472597e+00, 3.667387736813294e+00, 3.637333637437738e+00, 3.637333637437738e+00, 6.223616653031323e-01, 6.011121712936246e-01, 4.219516953563651e+00, 7.663526449159093e-01, 6.775700341527298e-01, 6.775700341527300e-01, 7.296024095480097e-01, 7.097016030126657e-01, 9.182006296004971e-01, 7.660721392700542e-01, 6.794248945559829e-01, 6.794248945559820e-01, 1.417937402593921e+02, 1.416769791523571e+02, 1.417893516547007e+02, 1.416862530458150e+02, 1.417339558682123e+02, 1.417339558682123e+02, 3.398638031384383e+01, 3.399681566043896e+01, 3.474934737157817e+01, 3.474882857771178e+01, 3.363559275856542e+01, 3.363559275856542e+01, 1.981112376665880e+00, 1.958362893256986e+00, 1.756502624656514e+00, 1.571886659284857e+00, 1.992484796209114e+00, 1.992484796209114e+00, 9.219337563026241e-01, 9.989951326370796e-01, 8.996643068671234e-01, 1.769926461307001e+01, 7.404264832353111e-01, 7.404264832353111e-01, 6.674701683388641e-01, 7.061372740478279e-01, 2.817185860647479e-01, 8.107085906494393e-01, 4.129761035027057e-01, 4.129761035027062e-01, 1.608445629595256e+00, 1.651366789663518e+00, 1.635791825950765e+00, 1.623266711935778e+00, 1.629480215711296e+00, 1.629480215711296e+00, 1.505965001397382e+00, 1.735166698466326e+00, 1.621556585748185e+00, 1.544382800086107e+00, 1.576473288164832e+00, 1.576473288164832e+00, 2.165770019078308e+00, 1.076125392196431e+00, 1.031554309374105e+00, 9.329356630020994e-01, 9.505921425995587e-01, 9.505921425995583e-01, 1.488901322800358e+00, 9.656265679940100e-01, 9.421216882218714e-01, 7.451479258534847e-01, 7.143488351296892e-01, 7.143488351296889e-01, 8.118648404256343e-01, 3.188777887564307e-01, 4.583026030886931e-01, 7.255536169151540e-01, 3.674669729849502e-01, 3.674669729849497e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_pg1_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_pg1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [2.813899594664175e+03, 2.813940365571679e+03, 2.814086239961269e+03, 2.813480357187927e+03, 2.813802867814612e+03, 2.813802867814612e+03, 6.536762858726705e+01, 6.537515017293379e+01, 6.555196759195020e+01, 6.526902466462720e+01, 6.537979849053636e+01, 6.537979849053636e+01, 1.428258840965199e+00, 1.391751099787678e+00, 3.672325523681066e-01, 4.260164669625427e-01, 4.551738887581037e-01, 4.551738887581037e-01, -5.325832802177127e-01, -4.957105806982299e-01, 2.333247893124855e+00, -7.622825766392215e-01, -6.553632691775987e-01, -6.553632691775992e-01, -7.296024095480094e-01, -7.097016030126654e-01, -9.182006296004968e-01, -7.660721392700539e-01, -6.794248945559829e-01, -6.794248945559819e-01, 1.800677507073477e+02, 1.803899677544395e+02, 1.800816424262596e+02, 1.803661290535255e+02, 1.802317447338130e+02, 1.802317447338130e+02, 1.100285732479309e+00, 1.973345143002151e+00, -8.886573499589443e-01, -1.087485574251755e-01, 2.529142396698909e+00, 2.529142396698909e+00, 1.997523050310219e+00, 2.934588748596705e+00, 1.608543511908925e+00, 2.251794749088952e+00, 2.150060658822563e+00, 2.150060658822563e+00, -9.219330667240977e-01, -9.746251941774560e-01, -8.996642211543457e-01, 2.669936657067404e+01, -7.401673984180457e-01, -7.401673984180457e-01, -6.674701683388641e-01, -7.061372740478279e-01, -2.817185860647480e-01, -8.107085906494339e-01, -4.129761035027057e-01, -4.129761035027062e-01, 2.591761953674057e+00, 2.488530012883940e+00, 2.526540226717034e+00, 2.556581027828524e+00, 2.541715772352838e+00, 2.541715772352838e+00, 2.471016031441334e+00, 8.126065696954921e-01, 1.387166262110379e+00, 1.886038735201943e+00, 1.645824364935798e+00, 1.645824364935798e+00, 3.207938067691310e+00, -9.546119981296206e-01, -6.634023717646563e-01, 2.832312526263521e-01, -2.164203449013790e-01, -2.164203449013788e-01, 6.561622664309175e-01, -9.656265679940098e-01, -9.421216882218711e-01, 4.808728090049029e-01, -7.143488180628552e-01, -7.143488180628548e-01, -8.118648404256343e-01, -3.188777887564305e-01, -4.583026030886930e-01, -7.255536158081595e-01, -3.674669729849501e-01, -3.674669729849497e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_pg1_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_pg1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [3.527191379331799e-06, 3.527137640179412e-06, 3.526928497943024e-06, 3.527727451245029e-06, 3.527304560492335e-06, 3.527304560492335e-06, 8.860523156477586e-04, 8.859985545535536e-04, 8.846906715979194e-04, 8.864593981306934e-04, 8.859237888014069e-04, 8.859237888014069e-04, 1.431137539229563e-01, 1.441131580382231e-01, 1.707735464225646e-01, 1.659228926996408e-01, 1.664006465019966e-01, 1.664006465019966e-01, 1.164170873699170e+01, 1.103662538593813e+01, 8.725056945124851e-02, 2.766994692418266e+01, 1.938108478643225e+01, 1.938108478643225e+01, 2.874952765754122e+05, 2.465546137483149e+05, 1.468181512983259e+03, 1.492465251230529e+06, 7.522070256195636e+05, 7.522070256195636e+05, 2.275585277285590e-04, 2.270791487445284e-04, 2.275376522510730e-04, 2.271144294011368e-04, 2.273148019181294e-04, 2.273148019181294e-04, 6.435768932215619e-03, 6.255598938337716e-03, 6.638221910037753e-03, 6.473801075403967e-03, 6.240201860818316e-03, 6.240201860818316e-03, 1.774607577011307e-01, 1.097798100718461e-01, 2.317608636915621e-01, 1.644219569146229e-01, 1.645573317120995e-01, 1.645573317120995e-01, 8.282009525159907e+01, 1.198265829034353e+01, 1.046004381894262e+02, 3.993797327012986e-03, 5.123874283650003e+01, 5.123874283650003e+01, 3.249256950004610e+06, 1.597482152034641e+06, 3.573149841128374e+06, 3.437938582102896e+02, 2.043738650702208e+06, 2.043738650702208e+06, 1.285002415149025e-01, 1.403903250791912e-01, 1.362032310211258e-01, 1.327445454283222e-01, 1.344736510072918e-01, 1.344736510072918e-01, 1.364039138133090e-01, 3.585512838724451e-01, 2.763372012055429e-01, 2.101524545149866e-01, 2.417273658756154e-01, 2.417273658756154e-01, 9.628416982561624e-02, 5.795009630527347e+00, 3.139374814132435e+00, 1.067619384163970e+00, 1.866061639637096e+00, 1.866061639637095e+00, 4.631926272797823e-01, 1.674445854271037e+03, 6.607838326576669e+02, 1.078146434799007e+00, 1.665281112123511e+02, 1.665281112123511e+02, 1.022742173599572e+05, 8.363882291868500e+07, 9.043637243187241e+06, 2.011089760076825e+02, 2.579643228134502e+06, 2.579643228134509e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
