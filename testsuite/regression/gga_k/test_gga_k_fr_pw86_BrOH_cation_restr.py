
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_fr_pw86_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_fr_pw86", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.188436203600188e+03, 2.188444592020106e+03, 2.188491777695599e+03, 2.188366771355063e+03, 2.188430864783405e+03, 2.188430864783405e+03, 5.927736866181324e+01, 5.927671989052742e+01, 5.926462438245473e+01, 5.930816868210351e+01, 5.927944868409654e+01, 5.927944868409654e+01, 2.306928182828868e+00, 2.304626994458191e+00, 2.253112235202133e+00, 2.287252472170022e+00, 2.277242866549730e+00, 2.277242866549730e+00, 1.819394206394069e-01, 1.858256019853317e-01, 3.102296689656590e+00, 1.163156894767974e-01, 1.397093937694159e-01, 1.397093937694159e-01, 7.172780003451475e-04, 7.743495028765532e-04, 1.284117995496712e-02, 3.006797432437625e-04, 4.231604987677616e-04, 4.231604987677616e-04, 1.279272110801617e+02, 1.279290097369598e+02, 1.279276835597841e+02, 1.279292650823370e+02, 1.279279027828380e+02, 1.279279027828380e+02, 2.042550579549395e+01, 2.066982453863266e+01, 2.032844056888754e+01, 2.054440000192781e+01, 2.060663555350939e+01, 2.060663555350939e+01, 1.669478385169904e+00, 1.871416085019385e+00, 1.442801882544954e+00, 1.477210153694762e+00, 1.711268625407167e+00, 1.711268625407167e+00, 6.389273661713159e-02, 1.945629694348574e-01, 5.576378783020336e-02, 1.695691465685342e+01, 8.137740241578023e-02, 8.137740241578023e-02, 1.931449866911019e-04, 2.852880956381752e-04, 1.545554733167775e-04, 2.807459425516808e-02, 2.247523923832256e-04, 2.247523923832256e-04, 1.583474796966652e+00, 1.581475047447604e+00, 1.581877849646363e+00, 1.582418739126283e+00, 1.582116244498150e+00, 1.582116244498150e+00, 1.494815004304745e+00, 1.239537371388389e+00, 1.309242765799814e+00, 1.376256259522635e+00, 1.341360178701420e+00, 1.341360178701420e+00, 2.060507494092633e+00, 2.943928829579084e-01, 4.010458568140281e-01, 6.276652054643228e-01, 5.008974735051124e-01, 5.008974735051124e-01, 1.053375880167325e+00, 1.205901555075251e-02, 2.001272335974216e-02, 5.645536105290848e-01, 4.139118778519043e-02, 4.139118778519044e-02, 1.272773459911181e-03, 2.946497484332392e-05, 1.037768566232059e-04, 3.729271908056536e-02, 1.939169058033886e-04, 1.939169058033883e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_fr_pw86_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_fr_pw86", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.304358807512893e+03, 3.304379887141688e+03, 3.304475042928088e+03, 3.304161399959335e+03, 3.304325532511115e+03, 3.304325532511115e+03, 8.698071641598995e+01, 8.698134193263900e+01, 8.700013207685792e+01, 8.700058202590429e+01, 8.698566000338106e+01, 8.698566000338106e+01, 3.242577084967236e+00, 3.236423598818368e+00, 3.102024749603081e+00, 3.151581683902778e+00, 3.139308779390323e+00, 3.139308779390323e+00, 2.401892966362550e-01, 2.457246975064115e-01, 4.398906807562047e+00, 1.510952913391541e-01, 1.827935315065739e-01, 1.827935315065738e-01, 8.151021430492984e-04, 8.802788494774165e-04, 1.528354941333235e-02, 3.410650261706922e-04, 4.803170374984660e-04, 4.803170374984662e-04, 1.981692111358492e+02, 1.982894310282883e+02, 1.981747891401835e+02, 1.982809153455808e+02, 1.982300873033583e+02, 1.982300873033583e+02, 2.802166872590191e+01, 2.839391258402288e+01, 2.780884557561550e+01, 2.813503358871472e+01, 2.833222035934360e+01, 2.833222035934360e+01, 2.482711880080912e+00, 3.028764931915097e+00, 2.120489903458489e+00, 2.359830352695123e+00, 2.570202541344134e+00, 2.570202541344134e+00, 8.122520486708648e-02, 2.542204620947882e-01, 7.062377686449160e-02, 2.749755971133264e+01, 1.048665783500802e-01, 1.048665783500802e-01, 2.190271970164282e-04, 3.236163042409478e-04, 1.753923514054704e-04, 3.475392723066973e-02, 2.550497817309779e-04, 2.550497817309780e-04, 2.617072262191368e+00, 2.563763815814754e+00, 2.583105409574754e+00, 2.598682362436464e+00, 2.590947717737232e+00, 2.590947717737232e+00, 2.482214557919820e+00, 1.746175337642007e+00, 1.910730436722233e+00, 2.113927993312086e+00, 2.004552793311955e+00, 2.004552793311955e+00, 3.323457413353419e+00, 3.879254846783486e-01, 5.345817472584670e-01, 8.743333725012067e-01, 6.789597339590069e-01, 6.789597339590069e-01, 1.480943662479267e+00, 1.428951766266364e-02, 2.424521404949645e-02, 8.067849018689282e-01, 5.229651941369208e-02, 5.229651941369211e-02, 1.449331302804462e-03, 3.339839665986041e-05, 1.176650539351065e-04, 4.691070668143528e-02, 2.200468869958146e-04, 2.200468869958142e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_fr_pw86_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_fr_pw86", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [8.685098421872999e-07, 8.685055364454330e-07, 8.684794008994566e-07, 8.685435890077148e-07, 8.685109573892938e-07, 8.685109573892938e-07, 1.890868182934048e-04, 1.890960715254945e-04, 1.892955366550601e-04, 1.888404904017980e-04, 1.890842377921647e-04, 1.890842377921647e-04, 2.148278565860861e-02, 2.141942065849245e-02, 1.959154952380414e-02, 1.927318235140954e-02, 1.947099113562925e-02, 1.947099113562925e-02, 4.675146025602733e-01, 4.715487274750896e-01, 1.432590925525266e-02, 5.801723172494558e-01, 5.435972843751774e-01, 5.435972843751778e-01, 5.620460763985788e+01, 5.345323592341503e+01, 3.668702691552931e+00, 1.169418658591813e+02, 9.339294791135913e+01, 9.339294791135916e+01, 6.084987962705505e-05, 6.080715247628361e-05, 6.084785829593001e-05, 6.081016165097714e-05, 6.082844461457261e-05, 6.082844461457261e-05, 6.976264447625554e-04, 6.927043364262786e-04, 6.854360702036801e-04, 6.812184599631778e-04, 7.008601340378473e-04, 7.008601340378473e-04, 4.078277490524652e-02, 3.008638074923109e-02, 4.993459709146238e-02, 4.565480811900045e-02, 3.962482583120353e-02, 3.962482583120353e-02, 8.510341399893446e-01, 3.180003048723470e-01, 9.729669982998524e-01, 1.089916324684854e-03, 7.984088779723146e-01, 7.984088779723146e-01, 1.878101773225881e+02, 1.288346156620337e+02, 3.909663359748748e+02, 1.914190458627586e+00, 2.218380371195761e+02, 2.218380371195758e+02, 3.184664389914493e-02, 3.833972448053845e-02, 3.637754672787757e-02, 3.449369185279487e-02, 3.546578775330115e-02, 3.546578775330115e-02, 3.204180613184521e-02, 5.513106639581328e-02, 5.700164926164250e-02, 5.493594663118875e-02, 5.689561362505946e-02, 5.689561362505946e-02, 2.654049863425072e-02, 2.166244436117451e-01, 1.763308132588240e-01, 1.442134095812197e-01, 1.615234807177258e-01, 1.615234807177259e-01, 6.970266042184126e-02, 3.777310649319623e+00, 2.395906502034084e+00, 1.900295590953136e-01, 1.458926555797323e+00, 1.458926555797323e+00, 3.174356480134283e+01, 1.545212403115243e+03, 4.091840810019383e+02, 1.584481486192194e+00, 2.715396339451225e+02, 2.715396339451232e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
