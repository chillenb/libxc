
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_pearson_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_pearson", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.172322144180949e+03, 2.172330168139951e+03, 2.172377378566775e+03, 2.172245755544889e+03, 2.172326280337993e+03, 2.172326280337993e+03, 5.850902073737078e+01, 5.850875724375918e+01, 5.850632271947437e+01, 5.853531214349337e+01, 5.850938370312228e+01, 5.850938370312228e+01, 2.208552790004092e+00, 2.204533728242041e+00, 2.083970974546649e+00, 2.118066686345964e+00, 2.207089479716466e+00, 2.207089479716466e+00, 1.569871033998593e-01, 1.619224647812799e-01, 3.130552706530827e+00, 7.978355864340463e-02, 1.584614468343380e-01, 1.584614468343380e-01, 4.702134075298915e-04, 5.158988147844769e-04, 8.523611840539595e-03, 1.082164737378233e-04, 5.052024685480030e-04, 5.052024685480030e-04, 1.273455347621937e+02, 1.273563085967808e+02, 1.273468622487146e+02, 1.273552358324192e+02, 1.273507370640185e+02, 1.273507370640185e+02, 1.896612881816859e+01, 1.924783955492568e+01, 1.883675352267048e+01, 1.905762600588228e+01, 1.931889037261298e+01, 1.931889037261298e+01, 1.615798434457838e+00, 1.829164075864310e+00, 1.459843735699219e+00, 1.531272555110694e+00, 1.730838621566039e+00, 1.730838621566039e+00, 4.283237732330343e-02, 1.551160373870333e-01, 4.174842119034093e-02, 1.692478817336814e+01, 5.739074674840711e-02, 5.739074674840711e-02, 1.007085229056419e-04, 1.315329433503522e-04, 7.388966688694594e-05, 1.656751494396511e-02, 1.091991130704066e-04, 1.091991130704066e-04, 1.632812691055010e+00, 1.630037112787830e+00, 1.631032453853386e+00, 1.631789812353401e+00, 1.631408449544199e+00, 1.631408449544199e+00, 1.527418686394131e+00, 1.247651825423290e+00, 1.332017905966567e+00, 1.404615977157573e+00, 1.367382693209468e+00, 1.367382693209468e+00, 2.013710982395672e+00, 2.492106801388671e-01, 3.618504774182158e-01, 6.112278104155998e-01, 4.757259594301406e-01, 4.757259594301405e-01, 1.018048048878659e+00, 7.311377278011070e-03, 1.340098058339375e-02, 5.380646625818055e-01, 2.820468874804501e-02, 2.820468874804501e-02, 6.458690418109297e-04, 9.859311402702837e-06, 3.557846851112181e-05, 2.567122222382788e-02, 7.887179366564339e-05, 7.887179366564316e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_pearson_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_pearson", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.360243699429556e+03, 3.360260783039017e+03, 3.360347897504087e+03, 3.360067941600357e+03, 3.360252617616667e+03, 3.360252617616667e+03, 8.925689676514412e+01, 8.925682193197834e+01, 8.926229868025733e+01, 8.929092549706132e+01, 8.925761866833058e+01, 8.925761866833058e+01, 3.558113758541436e+00, 3.561726590751654e+00, 3.670407810927220e+00, 3.714092827022315e+00, 3.559367414213076e+00, 3.559367414213076e+00, 2.893369137396081e-01, 3.003165665361163e-01, 4.792884046215618e+00, 1.358694526996972e-01, 2.926537234548893e-01, 2.926537234548893e-01, 7.836901490834975e-04, 8.598328647482687e-04, 1.420923008273523e-02, 1.803607992863674e-04, 8.420055841422675e-04, 8.420055841422675e-04, 2.003820154820030e+02, 2.004787595024631e+02, 2.003920716274163e+02, 2.004672915115513e+02, 2.004313601524775e+02, 2.004313601524775e+02, 3.327963073676010e+01, 3.356002327480536e+01, 3.333888589992580e+01, 3.356942276262986e+01, 3.335264419177251e+01, 3.335264419177251e+01, 2.479310315074515e+00, 2.974784562203987e+00, 2.233680570521097e+00, 2.457387265047959e+00, 2.674361311095236e+00, 2.674361311095236e+00, 7.171684630971017e-02, 2.698982130745055e-01, 6.993904694639980e-02, 2.751987046609728e+01, 9.672138494559883e-02, 9.672138494559883e-02, 1.678475464888754e-04, 2.192215908212801e-04, 1.231494542329949e-04, 2.763874097767089e-02, 1.819985374799657e-04, 1.819985374799657e-04, 2.702104376058823e+00, 2.658785560351939e+00, 2.674264376639780e+00, 2.686258222588068e+00, 2.680253655445478e+00, 2.680253655445478e+00, 2.533714129231659e+00, 1.932640679949214e+00, 2.034002853442515e+00, 2.203091508677640e+00, 2.110608022825563e+00, 2.110608022825563e+00, 3.267570154352284e+00, 4.503709082378496e-01, 6.784854881864633e-01, 9.805785757660477e-01, 8.553784718083465e-01, 8.553784718083463e-01, 1.594137489212230e+00, 1.218729414071360e-02, 2.234615534749994e-02, 8.227500097278166e-01, 4.715662305826519e-02, 4.715662305826520e-02, 1.076450620573741e-03, 1.643218568459046e-05, 5.929744806183293e-05, 4.292367281874246e-02, 1.314529980768959e-04, 1.314529980768955e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_pearson_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_pearson", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [6.590667924917927e-07, 6.590664271761949e-07, 6.590548495885620e-07, 6.590610095696715e-07, 6.590666830115495e-07, 6.590666830115495e-07, 1.321690253668062e-04, 1.321835357793687e-04, 1.325640332430123e-04, 1.318222162765414e-04, 1.321747999009964e-04, 1.321747999009964e-04, 4.176973353178923e-03, 3.801482730299348e-03, -5.604796320785540e-03, -5.111107271916384e-03, 4.041993386611866e-03, 4.041993386611866e-03, -2.155773580256330e-01, -2.369397496094215e-01, 8.203732916905052e-03, -4.355170133540231e-02, -2.224120593982745e-01, -2.224120593982745e-01, -5.074368015920074e-05, -5.865057746164141e-05, -1.279223017434983e-03, -3.294088472242524e-06, -6.017650820995464e-05, -6.017650820995464e-05, 4.804609134093665e-05, 4.805730091509443e-05, 4.804709822637549e-05, 4.805582243655607e-05, 4.805215785344866e-05, 4.805215785344866e-05, -1.927914553600312e-04, -1.688422855840759e-04, -2.206359802386638e-04, -2.030296344144611e-04, -1.353506719792209e-04, -1.353506719792209e-04, 3.114329096825047e-02, 2.788325746652817e-02, 3.530887176891567e-02, 3.662846744026597e-02, 2.918222686628913e-02, 2.918222686628913e-02, -1.053701770438853e-02, -4.801761498282456e-02, -1.291123950529085e-02, 9.908076417286837e-04, -2.585461676684046e-02, -2.585461676684046e-02, -3.230841853358445e-06, -4.842075075925791e-06, -9.869979855158676e-06, -4.068119636748966e-03, -6.575325222117887e-06, -6.575325222117873e-06, 3.260081487801198e-02, 3.307873137182666e-02, 3.291752463894204e-02, 3.278436486083772e-02, 3.285181820820474e-02, 3.285181820820474e-02, 3.595387377476376e-02, 2.528623299723728e-02, 3.933664979717930e-02, 4.133306912067579e-02, 4.138481571596924e-02, 4.138481571596923e-02, 2.417324355329075e-02, -6.972330669337885e-02, -9.759368388636347e-02, 3.273589578845894e-02, -6.526365185582170e-02, -6.526365185582172e-02, 2.750208378683935e-02, -7.571969174239377e-04, -2.141964271152334e-03, 1.190407309907369e-01, -1.117823769293120e-02, -1.117823769293123e-02, -5.336691785039859e-05, -2.233246419703026e-07, -1.224296610158050e-06, -1.328418723563563e-02, -7.119634679837458e-06, -7.119634679837405e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
