
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_k_meyer_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_meyer", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.175101441074754e+03, 2.175110388869408e+03, 2.175159021845039e+03, 2.175025715278107e+03, 2.175094305336484e+03, 2.175094305336484e+03, 5.874552261109331e+01, 5.874497062559809e+01, 5.873509965520306e+01, 5.877459020247891e+01, 5.874769304486037e+01, 5.874769304486037e+01, 2.285824330289068e+00, 2.283860403826079e+00, 2.248061537538910e+00, 2.281034767292345e+00, 2.270429369954849e+00, 2.270429369954849e+00, 2.069910396898623e-01, 2.082426666554482e-01, 3.071213954872925e+00, 1.717354030362856e-01, 1.788461012585424e-01, 1.788461012585421e-01, 7.244878659921593e-01, 7.040345340384068e-01, 7.392015684018171e-01, 7.643676280795660e-01, 6.767326934912874e-01, 6.767326934911728e-01, 1.275047804608209e+02, 1.275145529753037e+02, 1.275055812216465e+02, 1.275142029118796e+02, 1.275095371323632e+02, 1.275095371323632e+02, 2.042854158827789e+01, 2.065345263849218e+01, 2.037908663485295e+01, 2.057617459646583e+01, 2.057801121959805e+01, 2.057801121959805e+01, 1.656602319909692e+00, 1.872214058477298e+00, 1.430055455848791e+00, 1.476582832641016e+00, 1.699853463714373e+00, 1.699853463714373e+00, 1.701940241370945e-01, 2.550018265093434e-01, 1.674444560373695e-01, 1.696579836526612e+01, 1.465250308008387e-01, 1.465250308008387e-01, 6.664555701506588e-01, 7.045082852104001e-01, 2.807659620775461e-01, 2.284361361570756e-01, 4.115935894023229e-01, 4.115935894024795e-01, 1.584665738342755e+00, 1.582280757536916e+00, 1.583115477739688e+00, 1.583786104238446e+00, 1.583446941404321e+00, 1.583446941404321e+00, 1.495491097338060e+00, 1.227828312751422e+00, 1.296932335947317e+00, 1.370460074042825e+00, 1.331695138877021e+00, 1.331695138877021e+00, 2.060993150164796e+00, 3.414244613185228e-01, 4.264570577334061e-01, 6.231155043867891e-01, 5.076792053892257e-01, 5.076792053892267e-01, 1.043704728875717e+00, 8.025974278248498e-01, 6.260690202549261e-01, 5.587650154206959e-01, 1.344464755934450e-01, 1.344464755934449e-01, 8.016679452804413e-01, 3.187614318509217e-01, 4.577898698555070e-01, 1.412684344620585e-01, 3.662832849315933e-01, 3.662832849316344e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_k_meyer_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_meyer", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.339072366896717e+03, 3.339094246109205e+03, 3.339192043515624e+03, 3.338866513890900e+03, 3.339037008837939e+03, 3.339037008837939e+03, 8.738801291173128e+01, 8.738922038820226e+01, 8.742140289322072e+01, 8.739862161102386e+01, 8.739367387886027e+01, 8.739367387886027e+01, 3.146636492053192e+00, 3.136468045391252e+00, 2.882981895928536e+00, 2.935861675726956e+00, 2.928400299006031e+00, 2.928400299006031e+00, 1.476140593583285e-01, 1.582958114895962e-01, 4.316957298867581e+00, 1.278950849594904e-02, 7.057572220608480e-02, 7.057572220608410e-02, -7.381431914249778e-01, -7.191676274810886e-01, -1.238671926148362e+00, -7.689147288410332e-01, -6.839167963638855e-01, -6.839167963633757e-01, 2.001725068663624e+02, 2.002836516799814e+02, 2.001777229873284e+02, 2.002758420402584e+02, 2.002287981222068e+02, 2.002287981222068e+02, 2.575689566271926e+01, 2.620986232467779e+01, 2.530554606213685e+01, 2.570442201330112e+01, 2.622519033245425e+01, 2.622519033245425e+01, 2.503734671344002e+00, 3.039035470590199e+00, 2.131628967956928e+00, 2.373477418963120e+00, 2.595976530031956e+00, 2.595976530031956e+00, -1.782886726455127e-01, 8.621827697510283e-02, -2.162212024460979e-01, 2.758090504705832e+01, -4.618955908623409e-02, -4.618955908623409e-02, -6.691618711907757e-01, -7.088539773744872e-01, -2.833077710758573e-01, -1.327894926193074e+00, -4.152824176324647e-01, -4.152824176333096e-01, 2.617433701417305e+00, 2.571676602668474e+00, 2.587758576664084e+00, 2.601041075829052e+00, 2.594393909244985e+00, 2.594393909244985e+00, 2.481894565391817e+00, 1.699877029983806e+00, 1.915469610159850e+00, 2.136473693995277e+00, 2.023305534890254e+00, 2.023305534890254e+00, 3.336821810140047e+00, 2.239665769393260e-01, 4.022684655754715e-01, 8.356502505952845e-01, 5.927093840264520e-01, 5.927093840264577e-01, 1.437603071992155e+00, -1.253952346638717e+00, -1.561335812081043e+00, 7.979245594581635e-01, -1.966416012715038e-01, -1.966416012715036e-01, -8.289192458787975e-01, -3.190717363226614e-01, -4.591574208652224e-01, -2.592053435852499e-01, -3.694415358841826e-01, -3.694415358841001e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_k_meyer_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_k_meyer", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([7.243514475172254e-07, 7.243452091273232e-07, 7.243158909236284e-07, 7.244087410771285e-07, 7.243603127771782e-07, 7.243603127771782e-07, 1.683822078390693e-04, 1.683807228267002e-04, 1.683340344329611e-04, 1.683193141509955e-04, 1.683682510585648e-04, 1.683682510585648e-04, 2.365022433333533e-02, 2.373432851763766e-02, 2.590922973282065e-02, 2.526538757157450e-02, 2.539312439513110e-02, 2.539312439513110e-02, 1.463663273262477e+00, 1.391220666533707e+00, 1.488560433907016e-02, 3.709647915201204e+00, 2.470639407030232e+00, 2.470639407030236e+00, 2.874977210185620e+05, 2.465573377821399e+05, 1.481456734853368e+03, 1.492466520671002e+06, 7.522090599721443e+05, 7.522090599718840e+05, 4.989835169772658e-05, 4.986847885738348e-05, 4.989688366906814e-05, 4.987051264085324e-05, 4.988325536020019e-05, 4.988325536020019e-05, 9.606287972070998e-04, 9.394101138555427e-04, 9.775543222054050e-04, 9.583155579397346e-04, 9.409226607013221e-04, 9.409226607013221e-04, 3.500276343249680e-02, 2.710627672097899e-02, 4.424440754733720e-02, 3.909046316741600e-02, 3.332795359533443e-02, 3.332795359533443e-02, 1.556173537581478e+01, 1.537928409103005e+00, 2.159476586170876e+01, 9.921343953398481e-04, 7.536996558030389e+00, 7.536996558030389e+00, 3.249258238577109e+06, 1.597483612845431e+06, 3.573156872642112e+06, 2.717130858219551e+02, 2.043742592357656e+06, 2.043742592358632e+06, 3.419114388811005e-02, 3.484261490985251e-02, 3.461145871654080e-02, 3.442255798019375e-02, 3.451692430394405e-02, 3.451692430394405e-02, 3.711175844826303e-02, 5.974943755061589e-02, 5.169590399061478e-02, 4.509752346301499e-02, 4.831103259180520e-02, 4.831103259180520e-02, 2.353101600063304e-02, 7.276550126827962e-01, 4.064685138364105e-01, 1.703235564391928e-01, 2.626154170255582e-01, 2.626154170255564e-01, 7.661043236730417e-02, 1.685247179745973e+03, 6.851022914599216e+02, 1.889141885461233e-01, 3.677906421240338e+01, 3.677906421240335e+01, 1.022770319538220e+05, 8.363882482575354e+07, 9.043639184818508e+06, 5.141544812643071e+01, 2.579647833677568e+06, 2.579647833678400e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
