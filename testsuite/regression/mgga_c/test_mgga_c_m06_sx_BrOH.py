
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m06_sx_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.621562979397302e-01, -1.621560279631122e-01, -1.621549087531688e-01, -1.621592931455933e-01, -1.621561553036113e-01, -1.621561553036113e-01, -1.306200407079896e-01, -1.306111412687250e-01, -1.303458356748940e-01, -1.304509988612419e-01, -1.306177309098471e-01, -6.283345663786852e-02, -1.107230336643021e-01, -2.315865481577858e-02, -1.837045481768475e-02, -2.053174498177364e-02, -2.327203758353581e-02, -2.327203758353581e-02, -1.054275379522871e-02, -1.155210597966803e-02, -1.523479914349517e-01, 2.187802724177220e-02, -1.083566206859441e-02, -1.083566206859441e-02, 1.237872105894044e-02, 1.286131052625920e-02, 3.325335006958308e-02, 6.555406935877317e-03, 1.274664248996246e-02, 1.274664248996246e-02, -8.686503056251167e-02, -8.692203564226024e-02, -8.687131862007694e-02, -1.179443135183311e-01, -8.689364907793694e-02, -8.689364907793694e-02, -1.198447803476857e-01, -1.183396383273475e-01, -1.205487862011573e-01, -1.193058236553331e-01, -1.179525096875640e-01, -5.097992545166678e-02, -4.039459348665887e-02, -4.533668589270728e-02, -3.760177301591484e-02, -4.130014828738832e-02, -4.227472715400481e-02, -6.647673352958339e-02, -1.328471656207417e-01, 2.879271097860854e-03, -1.307562228668445e-01, -6.154428762894313e-02, 2.318028034246295e-02, 2.318028034246295e-02, -2.344701991152982e-03, 7.153993219005931e-03, 5.503954949097793e-03, -9.051593475711339e-02, -2.441669288330946e-03, 6.578926275407139e-03, -4.930579442226747e-02, -4.810621184910452e-02, -6.068530748551188e-02, -4.885686382136614e-02, -4.868948394228305e-02, -4.868948394228305e-02, -4.831814351108371e-02, -3.778542754875976e-02, -4.082062160469807e-02, -4.361659213691597e-02, -4.217938338283521e-02, -6.150979080809381e-02, -4.506139004334958e-02, -8.546510416563580e-02, -1.763361380203451e-02, -6.507022746151370e-02, -2.389174625882185e-02, -2.389174625882186e-02, -6.672391913113493e-02, 3.239998031717164e-02, 3.614923526403530e-02, -2.953353548834091e-02, -1.194631498320061e-01, 3.240151770530047e-02, 1.419428725854421e-02, 2.148434739589806e-03, 3.933761922977436e-03, 3.154299239740837e-02, 5.675734796132435e-03, 5.675734796132443e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m06_sx_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.509557190005320e-01, -1.509562117454853e-01, -1.509584163351810e-01, -1.509503909826362e-01, -1.509559782363072e-01, -1.509559782363072e-01, -7.704541937098211e-02, -7.705667329949839e-02, -7.739461663231489e-02, -7.726541304499637e-02, -7.704862585413862e-02, -6.462061260359531e-02, -1.727003901039275e-02, -6.457214677977607e-02, -7.124880753792677e-02, -6.819219005376660e-02, -6.440448273778944e-02, -6.440448273778944e-02, -4.313374266978771e-02, -4.202464063614663e-02, -9.827279562815705e-05, -3.751309846030373e-02, -4.282307348773820e-02, -4.282307348773820e-02, 1.841843471172951e-02, 1.906535206321166e-02, 3.526385616527195e-02, 1.016598022352970e-02, 1.890132154344153e-02, 1.890132154344156e-02, -1.057972819467669e-01, -1.060204654143788e-01, -1.058219631273253e-01, -1.182068911238964e-01, -1.059092904034593e-01, -1.059092904034593e-01, -5.713439389798545e-02, -5.929250580740915e-02, -5.615930694538908e-02, -5.791084670270907e-02, -5.983016525673820e-02, -5.893218920958606e-02, -4.084694182525017e-02, -5.245841816204783e-02, -3.823569043094172e-02, -4.280616695250726e-02, -4.409843627982956e-02, -6.013927378204376e-02, -1.264309624249446e-01, -5.503296043036392e-02, -1.177002628754475e-01, -6.267913841541937e-02, -3.013768689478335e-02, -3.013768689478335e-02, -3.275585903095836e-03, 1.105317296091020e-02, 8.563601541715508e-03, -1.590190470707481e-01, -3.435231804838219e-03, 1.019327195086436e-02, -6.748083669426519e-02, -6.538412256118178e-02, -6.680141765316004e-02, -6.695631137983701e-02, -6.667374428090223e-02, -6.667374428090223e-02, -6.625506569359974e-02, -3.817241688297688e-02, -4.383833837913048e-02, -5.231186009965977e-02, -4.764861266278909e-02, -6.053627034841162e-02, -4.949185150306951e-02, -5.430722685428435e-03, -4.400757811885644e-02, -3.522359216901474e-02, -3.703889990888710e-02, -3.703889990888713e-02, -4.523956461991474e-02, 3.662831254780657e-02, 3.189493100286334e-02, -3.196389095625299e-02, -1.320278109128660e-01, 1.788412239039850e-03, 2.107610650355008e-02, 3.428218083687708e-03, 6.190884264751389e-03, 1.967151387021423e-03, 8.835472044677568e-03, 8.835472044677561e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_sx_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.423613745691811e-10, 1.423642538358951e-10, 1.423754563115648e-10, 1.423288132230779e-10, 1.423629007184900e-10, 1.423629007184900e-10, 2.138156647918021e-07, 2.138498917105444e-07, 2.148646817507152e-07, 2.143863727425263e-07, 2.138203829590976e-07, -6.691353218532650e-07, 9.014592706255818e-04, -3.153572424951439e-04, -1.565189995166338e-04, -2.322606548990507e-04, -3.192842997544189e-04, -3.192842997544189e-04, -4.238888583615172e-02, -5.874044209535163e-02, 7.765505108948412e-04, 3.485950496501520e-01, -4.710612830569042e-02, -4.710612830569042e-02, -3.274790892183383e+02, -2.924311161866718e+02, -2.873018379021567e+00, -1.036092701128863e+03, -3.061639689500893e+02, -3.061639689500904e+02, 7.857919897011789e-09, 1.031479826261979e-08, 8.128170698035530e-09, 1.887122282663237e-07, 9.086210212465412e-09, 9.086210212465412e-09, 2.963484482632493e-06, 2.856286337537039e-06, 3.016409978288221e-06, 2.920173352583328e-06, 2.838369893658076e-06, -8.164501587808792e-06, -3.765324206391118e-03, -1.760856100411256e-03, -4.337898695200114e-03, -3.968490660218641e-03, -3.157903948204491e-03, 1.666687622609348e-03, 2.206863774694833e+01, 8.656381112608046e-02, 2.455372565031679e+01, -1.412877140527871e-05, 6.397725686314745e-01, 6.397725686314745e-01, -1.340320952549593e+07, -9.380539443810693e+02, -3.482508967235750e+03, -4.348875826162139e+01, -1.131415364289256e+07, -1.277052116278249e+03, 2.259203138146519e-02, 9.028981752736139e-03, 1.295485061358126e-02, 1.576272328175903e-02, 1.390000312496309e-02, 1.390000312496309e-02, 1.824722528293632e-02, -7.174031437855880e-03, -5.743136751778988e-03, -2.389754465525259e-03, -4.451157833819778e-03, 4.376650693303221e-03, -1.838993504819370e-03, 1.913899479445594e-01, -2.337102090797968e-02, 7.779731244393461e-03, -2.976285274035143e-02, -2.976285274035139e-02, 2.769469568379864e-03, -4.148505790892858e+00, -6.439544788558166e-01, -3.975350680418357e-02, 4.600006979813372e+01, 1.023847190400177e+00, -1.443959443520175e+02, -1.607526599823112e+04, -5.735332026954221e+03, 1.245585065715745e+00, -2.160270619118941e+03, -2.160270619118953e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_sx_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.240855846834880e-05, -1.240837277254223e-05, -1.240751654944830e-05, -1.241054451083940e-05, -1.240846094472388e-05, -1.240846094472388e-05, -4.882002199993398e-04, -4.881530265710365e-04, -4.867024164639233e-04, -4.871968048352625e-04, -4.881830925040058e-04, 6.880406378335074e-04, -9.994100536400461e-03, 5.965987176827915e-03, 5.381258225806107e-03, 5.674118112222998e-03, 5.981453748783002e-03, 5.981453748783002e-03, 3.913014718071384e-02, 4.027220452741853e-02, -7.397055798958191e-03, 1.724258030303707e-02, 3.944327367409747e-02, 3.944327367409747e-02, 5.841535909292332e-03, 6.031860363236883e-03, 1.000579382866392e-02, 1.932967680467177e-03, 6.119959302015809e-03, 6.119959302015803e-03, 1.468614782451581e-04, 1.417079305321330e-04, 1.462953429177758e-04, -1.312325420969565e-04, 1.442857112854605e-04, 1.442857112854605e-04, -1.427486495874920e-03, -1.389903578926063e-03, -1.443612924585561e-03, -1.413729323983825e-03, -1.381253232492549e-03, 1.650843058226375e-03, 1.679570994695209e-02, 1.232146959520351e-02, 1.693363150640184e-02, 1.730814614775464e-02, 1.598393239333018e-02, -6.900135299512715e-03, -1.882907064653671e-02, 2.194395093396532e-02, -2.449573205977832e-02, 2.303605814732741e-03, 1.941312641914939e-02, 1.941312641914939e-02, 2.386653528827064e-04, 2.352075655283314e-03, 3.679969152772014e-03, 3.030661078291642e-02, 2.735165896892241e-04, 2.419942748638681e-03, -6.814436683395206e-02, -2.223464182612203e-02, -3.632770747558971e-03, -4.486673293355774e-02, -3.856394866840477e-02, -3.856394866840477e-02, -4.740627105005029e-02, 2.086538792392303e-02, 1.967588868036245e-02, 1.322730120523537e-02, 1.753184647106436e-02, -7.189419494198263e-03, 1.303102098830783e-02, -5.460984818743499e-02, 2.620905684810127e-02, -2.381977369241960e-02, 2.869943401419850e-02, 2.869943401419850e-02, -1.426086990708907e-02, 9.148156832698602e-03, 1.062659694864912e-02, 3.530033707970293e-02, -8.684153849434295e-03, 1.635006264365062e-02, 4.113005312168982e-03, 8.189323887267724e-04, 2.009519110289369e-03, 1.743147118516504e-02, 2.508944671113598e-03, 2.508944671113598e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
