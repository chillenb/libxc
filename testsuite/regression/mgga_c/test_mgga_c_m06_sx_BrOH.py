
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m06_sx_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.116787971086117e-01, -1.116792470630618e-01, -1.116814428601942e-01, -1.116741269099812e-01, -1.116790321092499e-01, -1.116790321092499e-01, -6.924581537039914e-02, -6.924759573971657e-02, -6.928729249123020e-02, -6.906160555627650e-02, -6.924776573131897e-02, -6.924776573131897e-02, -4.118409852740965e-02, -4.093616982093471e-02, -3.399074115047299e-02, -3.298539908791041e-02, -4.109229707349533e-02, -4.109229707349533e-02, -1.057050241612898e-02, -1.150112249755219e-02, -8.194434179240889e-02, 1.375593639886786e-02, -1.084729107733218e-02, -1.084729107733218e-02, 1.243480610617115e-02, 1.293415966750751e-02, 3.354169260584272e-02, 7.059127670379394e-03, 1.280938327405283e-02, 1.280938327405283e-02, -8.687159579951002e-02, -8.693000477648134e-02, -8.687793292946014e-02, -8.692330909537622e-02, -8.690107478977128e-02, -8.690107478977128e-02, -4.696003480629486e-02, -4.811401128195072e-02, -4.677479838188057e-02, -4.773057894576828e-02, -4.796309424599506e-02, -4.796309424599506e-02, -4.043782778139404e-02, -5.691916354632653e-02, -3.949832252222629e-02, -5.350888405096427e-02, -4.252149743756128e-02, -4.252149743756128e-02, 3.072980260247368e-02, 1.999712471156555e-03, 2.917942390029508e-02, -8.626794631431550e-02, 2.071612330114254e-02, 2.071612330114254e-02, 6.612028245626228e-03, 7.587516489299056e-03, 5.664002688310938e-03, 3.616657209199024e-02, 7.088568272538555e-03, 7.088568272538553e-03, -5.506957248286169e-02, -5.065015272925434e-02, -5.187768757482546e-02, -5.304174190794143e-02, -5.243138364014541e-02, -5.243138364014541e-02, -5.729108944191848e-02, -3.692334662264100e-02, -3.998365637960393e-02, -4.378404964120480e-02, -4.164546549929798e-02, -4.164546549929798e-02, -5.846315822918828e-02, -9.164450374579448e-03, -1.702600540949770e-02, -2.636179245007947e-02, -2.227877655490593e-02, -2.227877655490594e-02, -3.136450306373534e-02, 3.265777851457084e-02, 3.609982495681197e-02, -2.881538251936062e-02, 3.081584847877434e-02, 3.081584847877431e-02, 1.510585296247960e-02, 2.383265695041448e-03, 4.020854025796963e-03, 2.985143357832537e-02, 6.141130068198616e-03, 6.141130068198623e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m06_sx_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.374206874618772e-01, -1.374215964794283e-01, -1.374187688153070e-01, -1.374035883647874e-01, -1.374212299419708e-01, -1.374212299419708e-01, -1.398581203524020e-01, -1.398582892973875e-01, -1.398434300727648e-01, -1.395514378077310e-01, -1.398602538077116e-01, -1.398602538077116e-01, -8.820934540296788e-02, -8.814334020496348e-02, -8.750296789650744e-02, -8.484210633207737e-02, -8.818253180863482e-02, -8.818253180863482e-02, -4.407613142047458e-02, -4.317309793390583e-02, -1.070716258140174e-01, -6.024069683210193e-02, -4.383479978695691e-02, -4.383479978695691e-02, 1.841779958052963e-02, 1.906230660726965e-02, 3.231353662787986e-02, 1.027790487799238e-02, 1.889878965875344e-02, 1.889878965875344e-02, -1.066453130675921e-01, -1.068597488238896e-01, -1.066583786634874e-01, -1.068256228380835e-01, -1.067672741314750e-01, -1.067672741314750e-01, -7.012290500140891e-02, -6.830861592747019e-02, -6.927763131393042e-02, -6.773584402128313e-02, -7.020020938695910e-02, -7.020020938695910e-02, -7.594179074162243e-02, -7.871411064482628e-02, -7.901167591628168e-02, -8.164763413513737e-02, -7.626197298908488e-02, -7.626197298908488e-02, -2.004019368188775e-02, -5.693256400437927e-02, -2.244569417498714e-02, -1.086961622778976e-01, -3.964077226076587e-02, -3.964077226076587e-02, 9.902886135552338e-03, 1.114321347472757e-02, 8.598979736175029e-03, 1.513676580490537e-02, 1.029950430260047e-02, 1.029950430260046e-02, -6.855918689743032e-02, -7.052960658117813e-02, -7.032366586574552e-02, -6.977509212202933e-02, -7.009418251092919e-02, -7.009418251092919e-02, -6.714117331022865e-02, -4.284510810028616e-02, -5.256094325132806e-02, -6.478320885429699e-02, -5.893955185734599e-02, -5.893955185734601e-02, -8.094129899479444e-02, -5.219500787952053e-02, -4.595665280368841e-02, -5.275028587418835e-02, -4.372985148703683e-02, -4.372985148703687e-02, -5.343036937916568e-02, 3.531501821658460e-02, 2.626490834897713e-02, -5.804247675826397e-02, -8.332804843996667e-03, -8.332804843996741e-03, 2.098155665380325e-02, 3.496369760560831e-03, 6.214058689593360e-03, -8.684694332970592e-03, 8.938265066541225e-03, 8.938265066541216e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_sx_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.653546866545003e-11, -3.652999154276417e-11, -3.653679003341148e-11, -3.662767990033282e-11, -3.653229547999369e-11, -3.653229547999369e-11, 1.505155515055322e-06, 1.505172159327404e-06, 1.504201206160923e-06, 1.486616547509821e-06, 1.505238208283144e-06, 1.505238208283144e-06, 3.225690706624505e-03, 3.206057299146242e-03, 2.690067189511066e-03, 2.408492420011023e-03, 3.218386389059661e-03, 3.218386389059661e-03, 5.538712168672102e-02, 5.088585183643114e-02, 2.740728454582665e-03, 1.127323669627144e+00, 5.544022387754917e-02, 5.544022387754917e-02, -3.264188692507719e+02, -2.911019947769836e+02, -9.905825578516898e-01, -1.024390893563867e+03, -3.049625787170269e+02, -3.049625787170268e+02, 1.365549259408061e-08, 1.609035462807371e-08, 1.385013010627822e-08, 1.574589814985618e-08, 1.497161317034542e-08, 1.497161317034542e-08, -4.418808886272996e-06, -5.036393086512891e-06, -4.747040427797073e-06, -5.259051918743581e-06, -4.380538755913940e-06, -4.380538755913940e-06, 4.626321119019193e-03, 9.814530173967760e-03, 7.836873871408514e-03, 1.448796285886789e-02, 3.963286137742864e-03, 3.963286137742864e-03, 1.388312181262939e+00, 1.339382585476803e-01, 1.595289513465000e+00, 5.508941214471468e-05, 1.164110602523497e+00, 1.164110602523497e+00, -1.375186537487729e+03, -9.280631222631730e+02, -3.468241593828376e+03, 3.122796269413528e+00, -1.258504588344389e+03, -1.258504588344385e+03, 2.605928578920582e-02, 1.377323546200256e-02, 1.714048232081952e-02, 2.039108400984263e-02, 1.867865030135202e-02, 1.867865030135202e-02, 2.313211766355572e-02, -5.538148332689088e-03, -2.471899393986800e-03, 3.696820541748461e-03, 2.401715888919603e-04, 2.401715888919736e-04, 7.876807616639505e-03, 1.423295428791300e-02, -2.096562548164599e-03, 1.501534997695880e-02, -2.687480043168444e-03, -2.687480043168372e-03, 5.666303577847798e-04, -3.153754963803699e+00, 1.061937858457154e+00, 4.264374891726284e-02, 2.372525027088563e+00, 2.372525027088574e+00, -1.338227976044465e+02, -1.604589853735782e+04, -5.729690581163149e+03, 3.047572012376447e+00, -2.131689638520660e+03, -2.131689638520667e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_sx_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_sx_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.957469424166214e-05, 1.957399771708027e-05, 1.957424398283181e-05, 1.958577250823487e-05, 1.957429641277028e-05, 1.957429641277028e-05, -2.206280357349371e-04, -2.205900670034158e-04, -2.191947181423944e-04, -2.162817803508425e-04, -2.206375842628944e-04, -2.206375842628944e-04, -4.928549342037258e-03, -4.894264496345675e-03, -3.829728015756660e-03, -3.455023233768656e-03, -4.915842219980510e-03, -4.915842219980510e-03, 2.605262318015651e-02, 2.511009911699890e-02, -5.492179598701841e-03, 8.450083849088967e-04, 2.560538511972768e-02, 2.560538511972768e-02, 5.721025954629114e-03, 5.874332465055078e-03, 8.185132395757645e-03, 1.337826171286229e-03, 5.981257153199790e-03, 5.981257153199783e-03, 1.385415937399250e-04, 1.334532643844293e-04, 1.380870874777719e-04, 1.341276724304247e-04, 1.358576821545478e-04, 1.358576821545478e-04, 1.094504990506855e-03, 1.179145544338894e-03, 1.136787047447855e-03, 1.207189589075173e-03, 1.094108648223334e-03, 1.094108648223334e-03, -5.008399400716631e-04, -7.361522798557646e-03, -3.510464051780129e-03, -8.032413069928482e-03, 5.396914480310159e-06, 5.396914480310159e-06, 7.904988057444008e-03, 1.677373598277590e-02, 8.383633078169731e-03, -1.155919373220552e-03, 1.176811714804261e-02, 1.176811714804261e-02, 1.926184350550045e-03, 1.773947247065379e-03, 3.257659803284830e-03, 5.295686240486385e-03, 1.665342033877425e-03, 1.665342033877422e-03, -3.882342811297255e-02, -2.385598495597172e-02, -3.015680088995674e-02, -3.497263358220473e-02, -3.261257229360866e-02, -3.261257229360870e-02, -1.742971867456664e-02, 1.749419660935672e-02, 1.345986993391792e-02, 3.292826224740047e-03, 9.176475399767185e-03, 9.176475399767176e-03, -6.630210253681192e-03, 2.022590633440095e-02, 1.645792325840354e-02, 3.235997604640848e-03, 1.311848140634219e-02, 1.311848140634217e-02, 7.496193190300442e-03, 8.220322712554105e-03, 7.996279257418890e-03, -1.113477627947054e-03, 1.076970892066131e-02, 1.076970892066129e-02, 2.857325943164846e-03, 4.964905700358543e-04, 1.841012826659862e-03, 1.103896650838485e-02, 1.694540623609426e-03, 1.694540623609424e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
