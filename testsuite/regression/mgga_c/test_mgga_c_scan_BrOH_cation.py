
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_scan_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_scan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-9.167227155985419e-02, -9.166950719799519e-02, -9.165835936229709e-02, -4.804219077118884e-02, -3.640504385075847e-02, -2.649775654560951e-02, -4.585323989370913e-02, -2.343143711483012e-02, -2.345083374115381e-02, -2.344306413247777e-02, -2.344386292111606e-02, -4.594344635933728e-02, -8.150961507449259e-02, -4.647443746127428e-02, -1.848390403633554e-02, -3.447359600181338e-02, -8.200992690867873e-02, -1.854331695425843e-02, -2.388243205012980e-02, -3.057415300010271e-02, -3.277767822591096e-02, -1.054618919059695e-02, -5.682074841271054e-03, -5.806318413190958e-03, -7.809395850252683e-04, -7.974790714849694e-04, -5.023895381706664e-03, -3.765612029161451e-04, -6.081918147233311e-05, -6.081918147233311e-05, -3.337946256005339e-02, -2.639582289561532e-02, -2.638796212121709e-02, -2.639531952668601e-02, -4.003092854835754e-02, -3.335262181425203e-02, -4.549934674323641e-02, -4.579609491734480e-02, -2.222365168216449e-02, -2.234337418386798e-02, -5.711820328721057e-02, -4.578610630825861e-02, -3.214254440346977e-02, -2.307894142867022e-02, -2.100998051846312e-02, -2.183220096630707e-02, -2.968554557920943e-02, -2.204879076520756e-02, -7.527441273703053e-03, -2.220926261526684e-02, -1.201720470008192e-02, -2.439949178490633e-02, -1.598784858860113e-02, -1.598784858860113e-02, -2.479699046096555e-04, -9.109177309021290e-05, -3.287065628866179e-04, -8.557628533439381e-03, -3.465136902706604e-04, -3.465136902706579e-04, -2.382828132422560e-02, -2.356640437685781e-02, -2.827098032661244e-02, -2.537576702641740e-02, -2.786767522650469e-02, -2.550490902529900e-02, -2.509163837894551e-02, -4.785403598644438e-02, -3.054470330479378e-02, -2.264896309600323e-02, -2.225616939422319e-02, -2.929608987191182e-02, -3.674999375565967e-02, -2.602066845955854e-02, -2.850944392873402e-02, -3.498090729226816e-02, -3.170934872694303e-02, -3.166863603522379e-02, -2.034196228405905e-02, -1.805287463006499e-02, -3.794191448767115e-03, -3.295510754528825e-02, -6.492211331997013e-03, -6.492211331997035e-03, -6.334177164217780e-03, -1.423188123938469e-05, -1.766529314903254e-03, -2.900278300208124e-02, -6.481207447473012e-05, -4.277459842921618e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_scan_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_scan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([5.433969784058566e-02, 5.433906979736967e-02, 5.433494704099243e-02, 5.433388804004603e-02, 5.431379163724580e-02, 5.431496224771025e-02, -3.450922796753845e-02, -3.451081565832032e-02, -4.298591641606755e-02, -4.298764711568648e-02, -4.101473015172111e-02, -4.101579419812607e-02, -6.506418615145165e-02, -6.506697711572074e-02, -4.629979226526316e-02, -4.630094246805089e-02, -4.626155917183569e-02, -4.626003807952067e-02, -4.627744902951273e-02, -4.627641243809055e-02, -4.628897866963592e-02, -4.626134634949651e-02, -6.490533681393272e-02, -6.482855641389462e-02, -6.664901070844766e-02, -6.583887899321079e-02, -7.369044503486344e-02, -7.303632238226090e-02, -4.595744148734697e-02, -4.636002669704894e-02, -6.180817541679919e-02, -6.159243586519517e-02, -6.352513008803402e-02, -7.660916381034619e-02, -4.377124251787656e-02, -4.760677249431160e-02, -4.371790919288271e-02, -4.113519146746846e-02, -5.148277349638407e-02, -4.798148706079162e-02, -6.363951840246236e-02, -6.072696623231676e-02, -4.137540155377368e-02, -4.091981024267205e-02, -8.498045309044338e-03, -3.512611003233590e-02, -9.075777132229944e-03, -3.576734594951237e-02, -1.541757786136118e-03, -1.460259453254337e-03, -1.579842359248252e-03, -1.484976204211611e-03, -9.728214329703392e-03, -9.142500595845281e-03, -7.229421909125002e-04, -7.332412819198124e-04, -5.218555947393398e-05, -5.369134892922245e-04, -5.218555947393398e-05, -5.369134892922245e-04, -3.677167469058359e-02, -3.680034678094094e-02, -3.779472619178420e-02, -3.781517527208497e-02, -3.783776065138586e-02, -3.785804886180379e-02, -3.779770565924404e-02, -3.781769424178511e-02, -3.009865549667688e-02, -3.013721411646791e-02, -3.674116924754078e-02, -3.677032710629666e-02, -8.310957692451257e-02, -8.311568006052940e-02, -7.815453864805183e-02, -7.819456213298071e-02, -4.669537248190329e-02, -4.657437171384194e-02, -4.650775246346616e-02, -4.638102429520414e-02, -9.802745197242238e-02, -9.863883148643740e-02, -7.816085510514122e-02, -7.879963588042570e-02, -3.805110110956515e-02, -3.839044453638370e-02, -3.412463860883368e-02, -3.409163529230139e-02, -4.059597850685871e-02, -3.820316602466961e-02, -3.840735051985562e-02, -3.615717020885006e-02, -3.526530494938072e-02, -4.095638378397617e-02, -3.520007696616446e-02, -3.875603924869934e-02, -4.761603059636203e-02, -4.739093332064920e-02, -4.154009698406754e-02, -4.125589588105683e-02, -2.348899879284019e-02, -2.204109121040675e-02, -4.100887941404097e-02, -4.104342444710946e-02, -3.143247799245516e-02, -2.923142778091192e-02, -3.143247799245517e-02, -2.923142778091192e-02, -4.890846631637940e-04, -4.738709900506043e-04, -3.669218290094142e-03, -3.661678384675013e-03, -6.545334097975876e-04, -6.245455086164462e-04, -1.614250024273114e-02, -1.602514106876184e-02, -7.979024495590697e-04, -6.212652483963876e-04, -7.979024495590665e-04, -6.212652483963855e-04, -2.762638629011020e-02, -2.733672686296076e-02, -2.953473286157823e-02, -2.924537572002803e-02, -2.241408516332802e-02, -2.203655691433997e-02, -2.653880250266898e-02, -2.622048710021735e-02, -2.275135497105256e-02, -2.238396374488128e-02, -2.669946491698349e-02, -2.637701314004263e-02, -2.619551135842500e-02, -2.592780018548347e-02, -4.313468468994263e-02, -4.235825420659817e-02, -3.482685368627606e-02, -3.430758433013577e-02, -3.322722368060482e-02, -3.297674079771802e-02, -3.469699137134657e-02, -3.443698994761604e-02, -3.265294956828731e-02, -3.225333176323279e-02, -2.410942045428747e-02, -2.386234421789622e-02, -4.691099614418941e-02, -4.649510072726196e-02, -4.959359114015070e-02, -4.876732579755054e-02, -5.854264614440659e-02, -5.802475091529335e-02, -5.532170402709213e-02, -5.534913345657414e-02, -5.530939520499552e-02, -5.533673957242913e-02, -3.907679760297596e-02, -3.863694991490752e-02, -2.240705324819514e-02, -2.219516762979129e-02, -6.179307291520917e-02, -6.139746780612338e-02, -4.113661860713907e-02, -3.900686656795182e-02, -4.569753484866361e-02, -4.458229296261505e-02, -4.569753484866484e-02, -4.458229296261627e-02, -8.215110100419315e-03, -7.893141641564337e-03, -1.946590081791064e-01, -1.946588540035388e-01, -2.365589654226849e-03, -2.230732018889826e-03, -3.525737188418912e-02, -3.438415330190028e-02, -2.280753166635802e-04, -9.368719603674565e-05, -9.655864174683242e-04, -7.709973619390369e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_scan_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_scan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([4.371536621611452e-09, 8.743073243222905e-09, 4.371536621611452e-09, 4.371306742433097e-09, 8.742613484866193e-09, 4.371306742433097e-09, 4.370341831068207e-09, 8.740683662136412e-09, 4.370341831068207e-09, 4.302073284020005e-10, 8.604146568040011e-10, 4.302073284020005e-10, 2.029866015140850e-10, 4.059732030281701e-10, 2.029866015140850e-10, 7.604311152023543e-11, 1.520862230404709e-10, 7.604311152023543e-11, 1.615446023082353e-06, 3.230892046164705e-06, 1.615446023082353e-06, 3.371892152285209e-07, 6.743784304570418e-07, 3.371892152285209e-07, 3.385957548943066e-07, 6.771915097886133e-07, 3.385957548943066e-07, 3.378744857234070e-07, 6.757489714468139e-07, 3.378744857234070e-07, 3.381285194961557e-07, 6.762570389923116e-07, 3.381285194961557e-07, 1.626311678108602e-06, 3.252623356217203e-06, 1.626311678108602e-06, 1.109141024467515e-02, 2.218282048935030e-02, 1.109141024467515e-02, 2.165824740130195e-03, 4.331649480260390e-03, 2.165824740130195e-03, 6.984491006740427e-04, 1.396898201348086e-03, 6.984491006740427e-04, 1.093037178457183e-03, 2.186074356914367e-03, 1.093037178457183e-03, 1.224953492886322e-02, 2.449906985772644e-02, 1.224953492886322e-02, 6.900888636180480e-04, 1.380177727236096e-03, 6.900888636180480e-04, 3.552056985705501e-01, 7.104113971411001e-01, 3.552056985705501e-01, 5.812920498685252e-01, 1.162584099737050e+00, 5.812920498685252e-01, 2.832853214952962e-04, 5.665706429905924e-04, 2.832853214952962e-04, 7.297538091539065e-01, 1.459507618307813e+00, 7.297538091539065e-01, 5.188296294633386e-02, 1.037659258926677e-01, 5.188296294633386e-02, 6.009596537681001e-02, 1.201919307536200e-01, 6.009596537681001e-02, 1.530224412505313e+02, 3.060448825010625e+02, 1.530224412505313e+02, 1.138288292261429e+02, 2.276576584522858e+02, 1.138288292261429e+02, 3.365997126763712e+00, 6.731994253527423e+00, 3.365997126763712e+00, 3.284931990612801e+02, 6.569863981225603e+02, 3.284931990612801e+02, 1.039449953103164e+01, 2.078899906206328e+01, 1.039449953103164e+01, 1.039449953103161e+01, 2.078899906206321e+01, 1.039449953103161e+01, 2.189965532778188e-07, 4.379931065556375e-07, 2.189965532778188e-07, 1.025930558862290e-07, 2.051861117724580e-07, 1.025930558862290e-07, 1.023330460599118e-07, 2.046660921198235e-07, 1.023330460599118e-07, 1.025769987683350e-07, 2.051539975366700e-07, 1.025769987683350e-07, 3.782879299826544e-07, 7.565758599653085e-07, 3.782879299826544e-07, 2.187487812321836e-07, 4.374975624643671e-07, 2.187487812321836e-07, 1.043124207153600e-05, 2.086248414307200e-05, 1.043124207153600e-05, 1.458609369646636e-05, 2.917218739293273e-05, 1.458609369646636e-05, 5.094834305235021e-06, 1.018966861047004e-05, 5.094834305235021e-06, 5.060001130315911e-06, 1.012000226063182e-05, 5.060001130315911e-06, 1.856132238712704e-05, 3.712264477425408e-05, 1.856132238712704e-05, 1.436664003843558e-05, 2.873328007687115e-05, 1.436664003843558e-05, 7.825992132877801e-03, 1.565198426575560e-02, 7.825992132877801e-03, 2.360852011214565e-03, 4.721704022429130e-03, 2.360852011214565e-03, 3.217220504551224e-03, 6.434441009102446e-03, 3.217220504551224e-03, 3.219718602446851e-03, 6.439437204893698e-03, 3.219718602446851e-03, 6.156021984603770e-03, 1.231204396920754e-02, 6.156021984603770e-03, 2.563948518960443e-03, 5.127897037920885e-03, 2.563948518960443e-03, 2.699628886202510e+00, 5.399257772405020e+00, 2.699628886202510e+00, 1.865005553710185e-01, 3.730011107420370e-01, 1.865005553710185e-01, 7.045441603669923e-01, 1.409088320733985e+00, 7.045441603669923e-01, 9.418316182205669e-06, 1.883663236441133e-05, 9.418316182205669e-06, 6.407380744616694e-01, 1.281476148923339e+00, 6.407380744616694e-01, 6.407380744616697e-01, 1.281476148923339e+00, 6.407380744616697e-01, 3.431370190505367e+02, 6.862740381010734e+02, 3.431370190505367e+02, 6.102943292724158e+03, 1.220588658544832e+04, 6.102943292724158e+03, 1.825620602609412e+03, 3.651241205218825e+03, 1.825620602609412e+03, 1.723182641374301e+00, 3.446365282748601e+00, 1.723182641374301e+00, 6.341950211303363e+02, 1.268390042260673e+03, 6.341950211303363e+02, 6.341950211303366e+02, 1.268390042260673e+03, 6.341950211303366e+02, 4.892995351420018e-03, 9.785990702840036e-03, 4.892995351420018e-03, 4.524057614993246e-03, 9.048115229986491e-03, 4.524057614993246e-03, 8.175642849548378e-03, 1.635128569909676e-02, 8.175642849548378e-03, 5.944185689950245e-03, 1.188837137990049e-02, 5.944185689950245e-03, 7.896186393797784e-03, 1.579237278759556e-02, 7.896186393797784e-03, 6.001123678054909e-03, 1.200224735610982e-02, 6.001123678054909e-03, 6.614478852554687e-03, 1.322895770510938e-02, 6.614478852554687e-03, 2.524752656332655e-02, 5.049505312665309e-02, 2.524752656332655e-02, 1.393457920858401e-02, 2.786915841716802e-02, 1.393457920858401e-02, 5.265758214818558e-03, 1.053151642963712e-02, 5.265758214818558e-03, 5.271951941533806e-03, 1.054390388306761e-02, 5.271951941533806e-03, 1.189364257924756e-02, 2.378728515849512e-02, 1.189364257924756e-02, 6.284078393630899e-03, 1.256815678726180e-02, 6.284078393630899e-03, 1.158613068458470e-01, 2.317226136916939e-01, 1.158613068458470e-01, 7.457447680433797e-02, 1.491489536086760e-01, 7.457447680433797e-02, 3.412453971888367e-02, 6.824907943776734e-02, 3.412453971888367e-02, 3.751076242559669e-02, 7.502152485119337e-02, 3.751076242559669e-02, 3.712652434793642e-02, 7.425304869587283e-02, 3.712652434793642e-02, 7.240194342435221e-03, 1.448038868487044e-02, 7.240194342435221e-03, 1.375629421769429e+03, 2.751258843538858e+03, 1.375629421769429e+03, 3.372579146284922e+01, 6.745158292569845e+01, 3.372579146284922e+01, 1.182384785229466e-01, 2.364769570458933e-01, 1.182384785229466e-01, 7.015457024945805e+00, 1.403091404989161e+01, 7.015457024945805e+00, 7.015457024946047e+00, 1.403091404989210e+01, 7.015457024946047e+00, 2.745816285734587e+05, 5.491632571469174e+05, 2.745816285734587e+05, 1.970367764377318e+07, 3.940735528754637e+07, 1.970367764377318e+07, 9.964082293973829e+07, 1.992816458794765e+08, 9.964082293973829e+07, 9.223593264849805e+01, 1.844718652969961e+02, 9.223593264849805e+01, 8.701212795776856e+01, 1.740242559155371e+02, 8.701212795776856e+01, 3.286198162980762e+03, 6.572396325961523e+03, 3.286198162980762e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_scan_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_scan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-8.840711736397688e-05, -8.840711736397684e-05, -8.840471092109724e-05, -8.840471092109729e-05, -8.839466955362842e-05, -8.839466955362840e-05, -3.472373833385198e-05, -3.472373833385196e-05, -2.133732204952662e-05, -2.133732204952662e-05, -1.035380530377526e-05, -1.035380530377526e-05, -7.230775329540053e-04, -7.230775329540047e-04, -1.899128942971528e-04, -1.899128942971527e-04, -1.907897075376871e-04, -1.907897075376871e-04, -1.904008388126081e-04, -1.904008388126082e-04, -1.904826491939059e-04, -1.904826491939059e-04, -7.273063781712279e-04, -7.273063781712279e-04, -2.458980613572447e-03, -2.458980613572447e-03, -1.854555960017014e-03, -1.854555960017014e-03, -2.584103238194383e-03, -2.584103238194382e-03, -1.617328497007992e-03, -1.617328497007992e-03, -2.091155293835395e-03, -2.091155293835396e-03, -2.599545745169680e-03, -2.599545745169680e-03, -1.035573761697381e-02, -1.035573761697381e-02, -7.187503784533304e-03, -7.187503784533309e-03, -5.196605690926572e-04, -5.196605690926572e-04, -2.370886301696592e-02, -2.370886301696593e-02, -1.758490064837684e-03, -1.758490064837682e-03, -2.123036938273948e-03, -2.123036938273949e-03, -2.589657068562475e-07, -2.589657068562477e-07, -4.816421026363236e-07, -4.816421026363239e-07, -2.921072601128238e-05, -2.921072601128238e-05, -3.233514442635520e-08, -3.233514442635520e-08, -1.027527164270877e-07, -1.027527164271449e-07, -1.027527164270217e-07, -1.027527164270825e-07, -3.496332164799825e-04, -3.496332164799825e-04, -2.053743395613262e-04, -2.053743395613262e-04, -2.046917578352321e-04, -2.046917578352321e-04, -2.053310460865067e-04, -2.053310460865067e-04, -4.941202076509416e-04, -4.941202076509414e-04, -3.495378825086582e-04, -3.495378825086580e-04, -2.880390404395816e-04, -2.880390404395818e-04, -7.986239258873509e-04, -7.986239258873506e-04, -5.007469367059773e-04, -5.007469367059773e-04, -5.073980460100607e-04, -5.073980460100608e-04, -1.285807222446296e-04, -1.285807222446296e-04, -7.688409603029889e-04, -7.688409603029888e-04, -1.868066281679629e-02, -1.868066281679629e-02, -8.407105862895611e-03, -8.407105862895619e-03, -6.884712556525422e-03, -6.884712556525424e-03, -7.811617201728222e-03, -7.811617201728229e-03, -1.572895119117231e-02, -1.572895119117231e-02, -7.361869350927972e-03, -7.361869350927972e-03, -3.083528585602331e-02, -3.083528585602334e-02, -3.033455870527911e-03, -3.033455870527914e-03, -2.693582303422973e-04, -2.693582303422975e-04, -9.133427316100643e-04, -9.133427316100643e-04, -1.082478786487502e-03, -1.082478786487501e-03, -1.082478786487503e-03, -1.082478786487503e-03, -1.226452123691596e-08, -1.226452123691595e-08, -3.795466243835999e-03, -3.795466243836000e-03, -1.186207521941881e-07, -1.186207521941881e-07, -1.060130640639918e-04, -1.060130640639918e-04, -9.354076840976672e-08, -9.354076840976666e-08, -9.354076840976538e-08, -9.354076840976538e-08, -1.415007599179916e-02, -1.415007599179916e-02, -1.275273677256262e-02, -1.275273677256262e-02, -2.006751806593437e-02, -2.006751806593439e-02, -1.607529951421201e-02, -1.607529951421202e-02, -1.966257728705896e-02, -1.966257728705895e-02, -1.609376320212395e-02, -1.609376320212393e-02, -1.672708277266673e-02, -1.672708277266674e-02, -2.366550269761784e-02, -2.366550269761784e-02, -2.267811792175988e-02, -2.267811792175989e-02, -1.128846079815791e-02, -1.128846079815790e-02, -1.050019108044092e-02, -1.050019108044092e-02, -2.082028264404862e-02, -2.082028264404862e-02, -2.023959289141205e-02, -2.023959289141206e-02, -5.646782187021047e-03, -5.646782187021043e-03, -7.778552730842576e-03, -7.778552730842576e-03, -6.357982201552682e-03, -6.357982201552685e-03, -7.055944602102485e-04, -7.055944602102484e-04, -6.141267745733006e-04, -6.141267745733000e-04, -8.990716550282819e-03, -8.990716550282824e-03, -2.761222357999061e-05, -2.761222357999063e-05, -5.013092931773826e-02, -5.013092931773823e-02, -5.272588055945079e-02, -5.272588055945079e-02, -4.011658121622461e-02, -4.011658121622463e-02, -4.011658121622609e-02, -4.011658121622610e-02, -5.650953055119701e-07, -5.650953055119702e-07, -2.355762164057517e-01, -2.355762164057517e-01, -4.100206599857102e-08, -4.100206599857101e-08, -3.324531959209556e-04, -3.324531959209555e-04, -1.085416598231525e-06, -1.085416598231697e-06, -4.488580280295459e-08, -4.488580280295462e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
