
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_revm06_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.267573191607040e-01, -1.267572409487558e-01, -1.267569708484340e-01, -1.193153554186611e-01, -1.193162649083892e-01, -1.098872090425991e-01, -8.527148445060209e-02, -6.066415054024935e-02, -6.077489417142611e-02, -6.073157720032898e-02, -6.073453958270900e-02, -8.527652554171146e-02, -8.761473713005632e-02, -6.553305380289347e-02, -2.156710556736751e-02, -6.689534655193426e-02, -9.371229221361417e-02, -2.244738746015097e-02, -4.433302357643781e-02, -4.367965106823925e-02, -8.280614078175121e-02, 2.232000249705877e-02, 2.060713033182947e-02, -3.088070706817466e-02, 1.019109083150472e-02, 9.637944035993763e-03, 2.472307816219577e-02, 6.245497919217475e-03, 4.418534457456803e-03, 4.418534457456802e-03, -8.620129061688216e-02, -8.628502610557130e-02, -8.620607864457272e-02, -8.627995092110774e-02, -9.033993964954376e-02, -9.033544411876022e-02, -4.889160538309131e-02, -4.965834381930950e-02, -4.827394874716794e-02, -4.898424002239368e-02, -7.586648396201232e-02, -4.960860880034438e-02, -4.657458211004659e-02, -4.497020561407648e-02, -3.532781744289010e-02, -3.873634475745426e-02, -4.625683221593775e-02, -4.007329459357564e-02, 4.386355475233381e-02, -5.039434833795320e-02, 4.531951096957411e-02, -5.939846008865077e-02, 2.945597532844572e-02, 2.945597532844572e-02, 4.457715170143731e-03, 6.117507426315122e-03, 4.735009709949145e-03, 8.743193242373831e-03, 4.694274240261942e-03, 4.694274240261937e-03, -5.017104271482370e-02, -4.817229897094302e-02, -4.935589851183680e-02, -4.946451084173892e-02, -4.939444854524647e-02, -4.930279291128344e-02, -4.939562753257221e-02, -4.437851367709549e-02, -4.431294224018494e-02, -4.247358823656479e-02, -4.042956889033102e-02, -4.474936461477936e-02, -4.871728485440232e-02, -5.611522012683284e-03, -4.727952090135194e-02, -4.208808227958712e-02, -2.236395323074190e-02, -4.349171332354914e-02, -3.238388114732658e-02, -4.698574577533360e-02, 4.470399678584274e-02, -2.885656437746801e-02, 4.224023060147845e-02, 4.224023060147845e-02, -6.181474282590280e-03, 1.754644516693506e-03, -1.460483961917653e-03, -1.307801647837454e-01, 4.525724263380170e-03, 3.703721144132338e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_revm06_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.268181182243330e-01, -1.268110084165193e-01, -1.268182582130162e-01, -1.268119216847403e-01, -1.268223761864295e-01, -1.268121481251404e-01, -1.286336949087142e-01, -1.098507584778983e-01, -1.286348433569062e-01, -1.098665559013521e-01, -1.201387750113359e-01, -1.201455343266736e-01, -9.668880321810468e-03, -6.577850321609321e-02, -5.375514825031297e-02, -5.375997113194665e-02, -5.379980396338292e-02, -5.379403919993400e-02, -5.378382660117051e-02, -5.377933678875114e-02, -5.383889939713243e-02, -5.372587489178789e-02, -6.612269121310757e-02, -9.847500607906481e-03, 5.833158896870871e-03, 6.166644536322510e-03, -2.342073197081458e-02, 8.462195138429149e-04, -6.030724079968876e-02, -6.383807500794443e-02, -6.473660339174556e-03, -2.061916630072482e-02, 1.552351161198617e-02, 1.435949981206721e-02, -4.344200181250051e-02, -7.931718164819040e-02, -1.470855823681322e-02, -1.845124941561944e-02, -1.503937996925745e-02, -1.349011310647719e-02, -9.138921426033096e-02, -1.165766979608653e-02, -5.586539327121148e-02, -4.054737336210035e-02, 2.210080588738705e-02, -2.343764224805027e-01, -2.907380297732703e-02, -2.017739790558529e-02, 1.981494355890376e-02, 1.694482726148985e-02, 1.271265662167231e-02, 1.696498596526714e-02, 3.590640387802962e-03, 1.608814629094018e-02, 1.117557586023177e-02, 1.166872762520849e-02, 7.188741878051651e-03, 2.564206330609643e-02, 7.188741878051647e-03, 2.564206330609642e-02, -1.007523268048015e-01, -1.008421060221543e-01, -1.009120943542003e-01, -1.010040173059690e-01, -1.007608615580749e-01, -1.008520829524944e-01, -1.009033335520387e-01, -1.009933937247281e-01, -1.005474384836317e-01, -9.697468229313590e-02, -9.688637325452965e-02, -1.006479957965064e-01, -4.780486641469924e-02, -4.777976209373282e-02, -4.731158362212280e-02, -4.736988193804258e-02, -4.862449088530163e-02, -4.794005896121813e-02, -4.807184362704821e-02, -4.740179590364452e-02, 6.852187696065569e-04, -5.248201971884575e-02, -4.664467839577778e-02, -4.808520421458905e-02, -2.726917090338098e-02, -4.960326089903866e-02, -5.253940028751539e-02, -5.256746681531244e-02, -3.639770367707010e-02, -2.995625983951547e-02, -4.186375423998843e-02, -3.627787375592408e-02, -2.744335669634811e-02, -5.798908511579737e-02, -3.692065812449818e-02, -4.632887783502841e-02, 5.056553215632845e-03, 6.504639764948266e-03, -1.900836824178995e-02, -8.745519411062737e-02, 1.071613741194614e-02, 1.893542481954448e-02, -6.047899075611328e-02, -6.061177975103763e-02, -4.977332300387323e-02, -1.522589847708909e-02, -4.977332300387324e-02, -1.522589847708916e-02, 5.715499954243171e-03, 8.592241866546673e-03, 1.141276760876624e-02, 1.097969274652692e-02, 9.443699046421490e-03, 8.155876365226964e-03, -4.798059210653956e-02, -4.662159532835788e-02, 1.514774057269702e-02, 6.958186075260353e-03, 1.514774057269702e-02, 6.958186075260346e-03, -5.976413964293338e-02, -5.879192058915049e-02, -5.941959656592762e-02, -5.849336530867809e-02, -5.630146758730942e-02, -5.529043081375207e-02, -5.666433476915495e-02, -5.848240498601206e-02, -5.633868665814422e-02, -5.534517884629375e-02, -5.665624358148721e-02, -5.838175647108113e-02, -5.925963723224350e-02, -5.841557106383443e-02, -1.808838598002087e-02, -4.322286419799161e-02, -3.278739481122930e-02, -4.852172604725775e-02, -5.043985658841056e-02, -4.974295870020821e-02, -4.554986377502376e-02, -4.486710407136832e-02, -3.995149459186520e-02, -5.074172976279116e-02, -4.450897053994790e-02, -5.521521843146857e-02, -5.707400692109625e-02, -5.479995172432224e-02, -1.659742862608690e-02, -5.343172295849664e-03, -3.064791211104659e-02, 2.795131375943286e-04, -3.180313086787336e-02, -3.174677556607149e-02, 2.872401738014312e-03, -2.310530305271589e-02, -3.101613126207263e-02, -2.980325078789051e-02, -9.826581940397847e-02, -9.720350361918428e-02, 5.831611279099815e-02, 5.499791340801264e-02, -2.858530214958115e-02, -2.635408290875393e-02, 1.067016323818067e-02, 2.221195168735887e-02, 1.067016323818083e-02, 2.221195168735890e-02, -9.603399726777982e-03, -9.069495094172472e-03, 3.335893566142769e-03, 3.316382524312918e-03, -2.056019668304682e-03, -1.859309209819973e-03, -1.635848886325614e-01, -1.580892467066044e-01, 1.362936422936198e-02, 6.747785124824901e-03, 1.356910457321806e-02, 2.055376939913889e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revm06_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.598315485568925e-10, 0.000000000000000e+00, -1.598701385038960e-10, -1.598315359413253e-10, 0.000000000000000e+00, -1.598698698225844e-10, -1.598290350400133e-10, 0.000000000000000e+00, -1.598681807046038e-10, -1.054459400032388e-10, 0.000000000000000e+00, -3.325868155379860e-10, -1.054682228871410e-10, 0.000000000000000e+00, -3.325170739105157e-10, -2.862167666118218e-10, 0.000000000000000e+00, -2.862251018326186e-10, -2.075816899968690e-06, 0.000000000000000e+00, 4.757719021711014e-07, -1.446998992180186e-06, 0.000000000000000e+00, -1.446950420056336e-06, -1.454357158217150e-06, 0.000000000000000e+00, -1.454683002613167e-06, -1.450902346107485e-06, 0.000000000000000e+00, -1.450804748222981e-06, -1.451031359590702e-06, 0.000000000000000e+00, -1.452871894531919e-06, 4.699198843982207e-07, 0.000000000000000e+00, -2.083819254998533e-06, 1.177232232307318e-03, 0.000000000000000e+00, 1.116216513604922e-03, 4.674432435994798e-03, 0.000000000000000e+00, -2.353371833167418e-03, -6.475638165047073e-04, 0.000000000000000e+00, -6.010189726837573e-04, -2.170596948789438e-03, 0.000000000000000e+00, 5.486682970404526e-03, 1.656638828908060e-03, 0.000000000000000e+00, 2.440139954881320e-03, -9.216345495360013e-04, 0.000000000000000e+00, -4.331470924459344e-04, 3.905240933251783e+00, 0.000000000000000e+00, -4.015921400577638e-01, 3.549913108313544e+00, 0.000000000000000e+00, -4.643843188696702e-01, -1.007638226838457e-05, 0.000000000000000e+00, 3.367228127463668e-03, 8.656782903138462e-01, 0.000000000000000e+00, 5.782095889499304e-01, -5.512435634204190e-01, 0.000000000000000e+00, 1.414167944710154e+01, -1.417717605207036e-01, 0.000000000000000e+00, 1.095386162476722e+02, -4.249318676872585e+03, 0.000000000000000e+00, -3.736993895592762e+03, -3.010270605735101e+06, 0.000000000000000e+00, -3.274334065354007e+03, -1.465663959179482e+03, 0.000000000000000e+00, -6.349025339137208e+00, -1.109836038739141e+04, 0.000000000000000e+00, -1.156475779642422e+04, -5.369478927490028e+03, 0.000000000000000e+00, -2.355224752075863e+04, -5.369478927490027e+03, 0.000000000000000e+00, -2.355224752075868e+04, -1.863932123360507e-07, 0.000000000000000e+00, -1.866630923736392e-07, -1.846952528537127e-07, 0.000000000000000e+00, -1.850233120821963e-07, -1.862755597977654e-07, 0.000000000000000e+00, -1.865917529362246e-07, -1.848218688865317e-07, 0.000000000000000e+00, -1.851007228502280e-07, -1.352889532379374e-07, 0.000000000000000e+00, -2.129401664133748e-07, -2.125879430369653e-07, 0.000000000000000e+00, -1.355246158230904e-07, -1.781833782583424e-05, 0.000000000000000e+00, -1.785720208087751e-05, -1.803213142880089e-05, 0.000000000000000e+00, -1.807758744132986e-05, -1.760132250385620e-05, 0.000000000000000e+00, -1.759400009726606e-05, -1.785185670868472e-05, 0.000000000000000e+00, -1.783020144301147e-05, -2.773247350391773e-05, 0.000000000000000e+00, 1.116527196070073e-05, -1.796745248481816e-05, 0.000000000000000e+00, -1.816349847710358e-05, -9.579814527963453e-03, 0.000000000000000e+00, -6.949566767747976e-04, -4.718297662383962e-03, 0.000000000000000e+00, -4.582887051739132e-03, -1.021580721116383e-02, 0.000000000000000e+00, -8.863384877986758e-03, -1.012346866016607e-02, 0.000000000000000e+00, -8.413090558419005e-03, -7.756297838856074e-03, 0.000000000000000e+00, -1.347066779365661e-03, -6.253726134381939e-03, 0.000000000000000e+00, -8.422238306113184e-03, 3.417526769266471e-01, 0.000000000000000e+00, 1.322334437670067e-01, 4.556317268470356e+00, 0.000000000000000e+00, 3.623973071510523e-01, 6.321019009093919e-01, 0.000000000000000e+00, -8.230394376314000e-01, -3.085110980334421e-05, 0.000000000000000e+00, -3.092303768571790e-05, 2.210453959349625e+00, 0.000000000000000e+00, 3.466509361891648e-01, 2.210453959349627e+00, 0.000000000000000e+00, 3.466509361891664e-01, -1.013008166447143e+08, 0.000000000000000e+00, -1.547664514652273e+04, -1.174859562148148e+04, 0.000000000000000e+00, -1.067908517531639e+04, -5.875501206965270e+04, 0.000000000000000e+00, -5.451184915068188e+04, 1.500211770151305e+01, 0.000000000000000e+00, 7.428417151478669e+01, -2.433110183322130e+04, 0.000000000000000e+00, -2.203484284924731e+04, -2.433110183322129e+04, 0.000000000000000e+00, -2.203484284924729e+04, -1.715425837136978e-03, 0.000000000000000e+00, -1.766000092321970e-03, -2.233570928459240e-03, 0.000000000000000e+00, -2.081617859756098e-03, -8.175462829824153e-03, 0.000000000000000e+00, -8.166154497563895e-03, -9.217935876169458e-03, 0.000000000000000e+00, -1.490587659254997e-03, -8.764571530778073e-03, 0.000000000000000e+00, -8.756115698886147e-03, -8.460796713634061e-03, 0.000000000000000e+00, -1.599175930089960e-03, -1.564867461275435e-03, 0.000000000000000e+00, -1.580232758096711e-03, -2.156653831701531e-02, 0.000000000000000e+00, 7.293594336012698e-04, -1.753765711435151e-02, 0.000000000000000e+00, -2.374104076862651e-03, -1.007683313173751e-02, 0.000000000000000e+00, -9.814200585884732e-03, -1.260840337783233e-02, 0.000000000000000e+00, -1.229091265010183e-02, -1.492481868075098e-02, 0.000000000000000e+00, -3.408125522514413e-03, -4.865916593648195e-03, 0.000000000000000e+00, -1.262483840094067e-03, 3.351069860675718e-02, 0.000000000000000e+00, 2.501107685247409e-02, 4.027276950334920e-01, 0.000000000000000e+00, -1.341160443103554e-01, 3.981669806993460e-02, 0.000000000000000e+00, -8.414184216062626e-02, -6.497882393031959e-02, 0.000000000000000e+00, -6.540709900497425e-02, -1.248995650144550e-01, 0.000000000000000e+00, 1.279494077718905e-01, -2.081145028309732e-02, 0.000000000000000e+00, -2.036633560985720e-02, -1.715183696469682e+03, 0.000000000000000e+00, -1.661263591097081e+03, -1.592432363122829e+01, 0.000000000000000e+00, -1.669041874377346e+01, -8.499122386700789e-02, 0.000000000000000e+00, -8.260422221285744e-02, 1.201281298895400e+00, 0.000000000000000e+00, -2.231310382779194e+00, 1.201281298895402e+00, 0.000000000000000e+00, -2.231310382779185e+00, -1.067511716442342e+06, 0.000000000000000e+00, -8.906726618742265e+05, -2.045676140013947e+05, 0.000000000000000e+00, -2.031457923060794e+05, -5.649574342333704e+08, 0.000000000000000e+00, -4.170077439364347e+08, 3.230248608359070e+02, 0.000000000000000e+00, 3.038627170398605e+02, -4.389293504465661e+04, 0.000000000000000e+00, -2.706254060449166e+04, -4.352597909230451e+04, 0.000000000000000e+00, -4.247170118630596e+07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revm06_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-4.509576803692325e-06, -4.510020245791473e-06, -4.509378159070349e-06, -4.509727034690303e-06, -4.508127189715007e-06, -4.508957543544642e-06, -7.550221744509389e-06, 4.008698099316359e-05, -7.548268587990297e-06, 4.008574958674033e-05, 3.751224146826199e-05, 3.751301975733493e-05, 7.288796580530196e-04, -4.448796045770189e-04, 6.822182138925392e-04, 6.821949585347157e-04, 6.851256713610539e-04, 6.852438759616669e-04, 6.838864396245285e-04, 6.838602513970452e-04, 6.837418918911483e-04, 6.845268204667634e-04, -4.427966375298011e-04, 7.318340428472406e-04, -9.930876856003914e-03, -9.972999274959066e-03, -8.533101703910391e-03, 5.777459694284909e-03, 5.471834764209339e-03, 5.482628999907368e-03, 5.398915495156711e-03, -8.804853822821196e-03, -1.068047893881039e-02, -1.093987423503306e-02, 5.681712951952002e-03, 5.607486875175239e-03, -6.516429573174012e-02, 2.862473979036143e-02, -6.507246773421356e-02, 2.981295062634474e-02, 2.305810427456319e-03, -5.871124702632059e-03, 2.438454111190573e-02, 2.640667450736899e-02, 2.948089065892675e-02, 1.783743135105894e-02, 2.544714346571803e-02, -9.276802098886026e-02, 6.784726105872373e-03, 7.138344534459704e-03, 3.268573362949852e-04, 7.616748784196417e-03, 1.039459484424162e-02, 1.714025723407844e-02, 3.819984383069033e-03, 3.785621475564624e-03, 6.031189385846528e-03, 4.933347711500904e-03, 6.031189385846528e-03, 4.933347711500922e-03, 4.473369174583548e-04, 4.477748883445304e-04, 4.463963654069986e-04, 4.469056234587545e-04, 4.472590085760640e-04, 4.477515221398445e-04, 4.464814993058763e-04, 4.469322777592500e-04, -5.420139043780465e-05, 4.749070910231741e-04, 4.743984604860264e-04, -5.393257864405803e-05, 1.586257961835448e-03, 1.588541874679798e-03, 1.616001557931827e-03, 1.618575921884339e-03, 1.562186347890085e-03, 1.562500932601881e-03, 1.590208371337324e-03, 1.589938468446192e-03, 1.704988121467415e-03, -1.266375750758102e-03, 1.611829820868189e-03, 1.620712598664248e-03, 1.894380092593052e-02, -6.321341518025365e-03, 1.697783343853873e-02, 1.669605952831828e-02, 1.757175682094463e-02, 1.628960537786420e-02, 1.992964139945572e-02, 1.785092131885287e-02, 1.753228248125194e-02, -4.719259740244109e-03, 1.622491376645842e-02, 1.941092688077881e-02, 2.314375456617637e-02, 2.320103423100589e-02, -4.748932461173702e-02, 1.669613021420095e-02, 2.260137180597070e-02, 2.378354147374416e-02, 2.556936071928282e-03, 2.560489653574443e-03, 2.605903756383768e-02, 3.063267667065128e-02, 2.605903756383770e-02, 3.063267667065129e-02, 1.594897009457465e-05, 2.530304884998193e-03, 3.601705963753715e-03, 3.424571430593624e-03, 7.545581782744810e-03, 8.304791692535896e-03, 2.028268989006192e-02, 1.694623517209519e-02, 3.335300055797936e-03, 7.782398044793457e-03, 3.335300055797935e-03, 7.782398044793450e-03, 1.726509101220091e-02, 1.710323193433583e-02, 1.623460542328140e-02, 1.578725209068095e-02, 1.214475583099357e-03, 9.563063300862491e-04, 8.660901282005401e-04, 1.611280522808584e-02, 1.333029721969693e-03, 1.074593681478879e-03, 6.924413115894283e-04, 1.602140793922004e-02, 1.717012446532272e-02, 1.697361368437018e-02, 2.324766186579252e-02, -9.925811415666551e-03, 2.483460595106613e-02, -6.761333322455342e-03, 2.229092007205936e-02, 2.192355822720268e-02, 2.308689591264363e-02, 2.272237036376005e-02, 2.476139875867666e-02, -5.164232900258930e-03, 1.686664892489560e-02, -3.378142027977876e-03, 2.257609962295951e-02, 2.252237140546525e-02, -3.753262831770626e-02, 2.188603704868613e-02, -2.241246934588982e-02, 2.826671441859662e-02, 2.652099330801883e-02, 2.662142873934311e-02, 2.687064699276718e-02, -3.013068880342572e-02, 2.160924948466944e-02, 2.137823330151891e-02, 2.365106643966063e-02, 2.319873693275515e-02, 1.852952333536560e-02, 1.925321678041695e-02, 3.546665522405990e-02, 3.510940685085995e-02, 2.626349874903065e-02, 2.977922531648738e-02, 2.626349874903066e-02, 2.977922531648736e-02, 8.307572234005872e-04, 7.899023691202088e-04, 1.218912434160295e-03, 1.218757159327557e-03, 5.501496548914571e-05, 5.363707419786575e-05, 3.433480878447537e-03, 1.933874085478082e-03, 5.113815096367195e-03, 7.363420759145273e-03, 5.111666404398519e-03, 1.732242996314404e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
