
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_revm06_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.086546977129775e-01, -1.086553225170162e-01, -1.086584141942861e-01, -1.086491797228752e-01, -1.086539731229968e-01, -1.086539731229968e-01, -6.081832276127525e-02, -6.082109474627592e-02, -6.087896714482870e-02, -6.070608893249215e-02, -6.078616628256864e-02, -6.078616628256864e-02, -3.792533764723588e-02, -3.774789494626343e-02, -3.302391938324678e-02, -3.178043764288457e-02, -3.407312461997355e-02, -3.407312461997355e-02, -6.689630916186306e-03, -7.905768127645471e-03, -7.557493929630471e-02, 1.786103443887023e-02, 1.450622028469777e-02, 1.450622028469777e-02, 1.023301567089909e-02, 1.072060040973280e-02, 4.065313641681165e-02, 6.599333201954400e-03, 4.649219482263115e-03, 4.649219482263118e-03, -8.614638143219042e-02, -8.623124716837870e-02, -8.615231688628677e-02, -8.622712976913659e-02, -8.618835042204945e-02, -8.618835042204945e-02, -4.540058354943681e-02, -4.650791650548609e-02, -4.520631039913171e-02, -4.626085588028987e-02, -4.610679785130008e-02, -4.610679785130008e-02, -3.724953241105616e-02, -4.820692590839578e-02, -3.405599688072354e-02, -4.543554662533215e-02, -3.843418583467539e-02, -3.843418583467536e-02, 4.269198781593935e-02, 7.016420350390067e-03, 4.449585750028404e-02, -7.046386322770742e-02, 2.775893036319829e-02, 2.775893036319829e-02, 5.826466270345012e-03, 6.842655886937064e-03, 5.049165816062201e-03, 4.717391966584601e-02, 5.077144072763765e-03, 5.077144072763759e-03, -5.013649877762560e-02, -4.821410968449272e-02, -4.894606362088419e-02, -4.953026155492130e-02, -4.924281285884918e-02, -4.924281285884918e-02, -4.942429775055162e-02, -3.438808742418845e-02, -3.758705799821958e-02, -4.176906158975408e-02, -3.942556149948484e-02, -3.942556149948483e-02, -4.868963719483606e-02, -5.813374869362316e-03, -1.489609809477513e-02, -2.392084894637384e-02, -2.045329467212196e-02, -2.045329467212196e-02, -2.935234788604121e-02, 3.922212723159378e-02, 4.625740174781399e-02, -2.617758034202719e-02, 4.195043958872435e-02, 4.195043958872435e-02, 1.542020676506681e-02, 2.370515482749127e-03, 3.656915704420667e-03, 4.235407415895642e-02, 4.865790846099265e-03, 4.865790846099271e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_revm06_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.301008823485090e-01, -1.300640735751188e-01, -1.301015520737351e-01, -1.300652252372553e-01, -1.301019482360189e-01, -1.300623918369282e-01, -1.300855874558918e-01, -1.300514319972647e-01, -1.300965577526130e-01, -1.300562802407589e-01, -1.300965577526130e-01, -1.300562802407589e-01, -1.162891354083147e-01, -1.163905018478563e-01, -1.162840324867780e-01, -1.164007632450508e-01, -1.164083712637527e-01, -1.163735359891157e-01, -1.161429122252359e-01, -1.162215979163266e-01, -1.167309798933970e-01, -1.158335519083999e-01, -1.167309798933970e-01, -1.158335519083999e-01, -6.898750250505845e-02, -6.959367037666681e-02, -6.877816836782916e-02, -6.967649778068677e-02, -7.020413556019056e-02, -6.760501453527663e-02, -6.708003397575471e-02, -6.704331654863784e-02, -7.714548952243794e-02, -5.695495094823048e-02, -7.714548952243794e-02, -5.695495094823048e-02, -5.625463940264433e-02, -3.992841304626848e-02, -5.513556999197867e-02, -3.755507645420266e-02, -8.351911994575020e-02, -7.955269219819022e-02, -6.816912058954366e-02, -5.923988850258019e-02, 7.493997928576766e-03, -2.786259288974779e-01, 7.493997928576755e-03, -2.786259288974784e-01, 1.982935818658440e-02, 1.695013121416957e-02, 2.091256416476290e-02, 1.750797791454800e-02, 5.804539165224368e-02, 5.138822440197040e-02, 1.127863903396609e-02, 1.175460710148793e-02, 7.228891805508989e-03, 2.578864572855173e-02, 7.228891805508981e-03, 2.578864572855165e-02, -1.013053167444411e-01, -1.013609481731732e-01, -1.014574902305445e-01, -1.015156436249294e-01, -1.013007067222292e-01, -1.013617748531798e-01, -1.014371897105323e-01, -1.014969995213889e-01, -1.013912359200680e-01, -1.014400594217894e-01, -1.013912359200680e-01, -1.014400594217894e-01, -5.735669980340067e-02, -5.679614266816351e-02, -5.605237094355239e-02, -5.565408451307703e-02, -5.583697076711334e-02, -5.569757383001821e-02, -5.459758766674458e-02, -5.437467400962566e-02, -5.777450463255001e-02, -5.655602873088849e-02, -5.777450463255001e-02, -5.655602873088849e-02, -6.500978542811417e-02, -6.451186581152474e-02, -6.622550284692573e-02, -6.515448277445979e-02, -7.196930900821299e-02, -5.930704546667270e-02, -6.852416218553425e-02, -5.924607242975100e-02, -5.867149683892650e-02, -7.421733535577141e-02, -5.867149683892648e-02, -7.421733535577135e-02, -1.196865087193333e-02, -9.262943064968375e-03, -6.472112629825494e-02, -6.285024260786540e-02, -6.262650699057456e-03, 3.030329187292073e-03, -8.697199621402130e-02, -8.704970581899422e-02, -5.970556056463094e-02, -2.568838102163374e-02, -5.970556056463094e-02, -2.568838102163373e-02, 9.775835000520830e-03, 8.874806561477216e-03, 1.159687014615277e-02, 1.118286206162809e-02, 9.522442638611378e-03, 8.244265959950901e-03, 3.568270641643628e-02, 3.538407849277913e-02, 1.545376534521389e-02, 6.972808392237362e-03, 1.545376534521389e-02, 6.972808392237354e-03, -5.886663422455782e-02, -5.783601523582655e-02, -6.168187593138324e-02, -6.062353594726542e-02, -6.114361836312840e-02, -6.006853481112198e-02, -6.031499882202872e-02, -5.927974026824472e-02, -6.077274285863805e-02, -5.971581654312032e-02, -6.077274285863805e-02, -5.971581654312032e-02, -5.658054614120196e-02, -5.573154297472629e-02, -3.734063996721042e-02, -3.659302516740530e-02, -4.723394810262209e-02, -4.642620400140801e-02, -5.839371234484019e-02, -5.763383668891401e-02, -5.339360019208133e-02, -5.242752921596371e-02, -5.339360019208132e-02, -5.242752921596373e-02, -6.833339222161404e-02, -6.624907986603042e-02, -5.725911564845348e-02, -5.508169777121522e-02, -4.464148611393625e-02, -4.166680461958602e-02, -4.265297219430446e-02, -4.246730245101146e-02, -3.528318672202319e-02, -3.536946178823568e-02, -3.528318672202319e-02, -3.536946178823566e-02, -4.520861736450513e-02, -4.272625960437035e-02, 5.553196697427128e-02, 5.468268739188429e-02, 5.382888042912869e-02, 5.096676412375656e-02, -5.163144968737023e-02, -4.158026025519316e-02, -1.683486564085345e-03, 1.172927539253209e-02, -1.683486564085202e-03, 1.172927539253209e-02, 2.583937802340579e-02, 2.362954892345743e-02, 3.503945321912719e-03, 3.518869275991116e-03, 7.208362041408163e-03, 6.164429175053217e-03, 1.316241097798462e-02, 1.500648618146942e-02, 1.388683690367991e-02, 6.761392678434879e-03, 1.388683690367987e-02, 6.761392678434869e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revm06_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.990586777629149e-10, 0.000000000000000e+00, -1.993465407619077e-10, -1.990515362557828e-10, 0.000000000000000e+00, -1.993416962057738e-10, -1.990735615767360e-10, 0.000000000000000e+00, -1.993589525943935e-10, -1.991508735313200e-10, 0.000000000000000e+00, -1.994626715012477e-10, -1.990476843616164e-10, 0.000000000000000e+00, -1.994577738290233e-10, -1.990476843616164e-10, 0.000000000000000e+00, -1.994577738290233e-10, 2.054344110939413e-06, 0.000000000000000e+00, 2.061908396633457e-06, 2.053898806042078e-06, 0.000000000000000e+00, 2.062299961676357e-06, 2.053359441521642e-06, 0.000000000000000e+00, 2.055448256344377e-06, 2.024504452595955e-06, 0.000000000000000e+00, 2.031549266048254e-06, 2.056819296941099e-06, 0.000000000000000e+00, 2.029471150181325e-06, 2.056819296941099e-06, 0.000000000000000e+00, 2.029471150181325e-06, 5.241903893772128e-03, 0.000000000000000e+00, 5.525938234129359e-03, 5.174420281592467e-03, 0.000000000000000e+00, 5.535145087398143e-03, 4.875626638211917e-03, 0.000000000000000e+00, 4.335258438990282e-03, 3.971312396649584e-03, 0.000000000000000e+00, 4.057555527933428e-03, 6.870625044879499e-03, 0.000000000000000e+00, 1.860618724621605e-03, 6.870625044879499e-03, 0.000000000000000e+00, 1.860618724621605e-03, 3.061379378768949e-01, 0.000000000000000e+00, -2.074371040753245e-03, 2.880763617189943e-01, 0.000000000000000e+00, -3.353537421763428e-02, 5.205544535883993e-03, 0.000000000000000e+00, 5.020906280506918e-03, 2.078743767530637e+00, 0.000000000000000e+00, 1.459694987456484e+00, -3.081631361814177e-01, 0.000000000000000e+00, 2.522593660099533e+01, -3.081631361814175e-01, 0.000000000000000e+00, 2.522593660099536e+01, -4.248242658902639e+03, 0.000000000000000e+00, -3.736382831260161e+03, -3.895952264453512e+03, 0.000000000000000e+00, -3.383417102744374e+03, -3.533033988593435e+01, 0.000000000000000e+00, -3.623118767368115e+01, -1.108914512851018e+04, 0.000000000000000e+00, -1.155497549877453e+04, -5.367214266019107e+03, 0.000000000000000e+00, -2.340610094676248e+04, -5.367214266019105e+03, 0.000000000000000e+00, -2.340610094676246e+04, -1.785167651292899e-07, 0.000000000000000e+00, -1.792482867968821e-07, -1.768667334034346e-07, 0.000000000000000e+00, -1.776568604083935e-07, -1.785822795665829e-07, 0.000000000000000e+00, -1.793069125746855e-07, -1.771634949258610e-07, 0.000000000000000e+00, -1.778537732538889e-07, -1.775511467666475e-07, 0.000000000000000e+00, -1.784329252310413e-07, -1.775511467666475e-07, 0.000000000000000e+00, -1.784329252310413e-07, -1.161262863823630e-05, 0.000000000000000e+00, -1.189463426669961e-05, -1.264939516043252e-05, 0.000000000000000e+00, -1.289197431761558e-05, -1.264675007691701e-05, 0.000000000000000e+00, -1.239285350313488e-05, -1.360886610992584e-05, 0.000000000000000e+00, -1.338819551485431e-05, -1.122043885554490e-05, 0.000000000000000e+00, -1.261477184785250e-05, -1.122043885554490e-05, 0.000000000000000e+00, -1.261477184785250e-05, 3.782650120836766e-03, 0.000000000000000e+00, 3.469280227812001e-03, 8.158445023482916e-03, 0.000000000000000e+00, 7.949768208133737e-03, 1.128615606980861e-02, 0.000000000000000e+00, 8.431337742644353e-03, 2.022626208757231e-02, 0.000000000000000e+00, 1.665162674722584e-02, 2.969906548041666e-03, 0.000000000000000e+00, 5.107780823315048e-03, 2.969906548041661e-03, 0.000000000000000e+00, 5.107780823315050e-03, 2.235323172700223e+00, 0.000000000000000e+00, 1.983688061603401e+00, 3.622879543864210e-01, 0.000000000000000e+00, 3.430680525008134e-01, 3.456019692367374e+00, 0.000000000000000e+00, 1.156828985168683e+00, 5.537386926281186e-05, 0.000000000000000e+00, 5.542257972536277e-05, 3.485625744108420e+00, 0.000000000000000e+00, 1.303871665957745e+00, 3.485625744108420e+00, 0.000000000000000e+00, 1.303871665957743e+00, -1.753665247808121e+04, 0.000000000000000e+00, -1.550023408759122e+04, -1.172506372325302e+04, 0.000000000000000e+00, -1.065762636106520e+04, -5.866025960894689e+04, 0.000000000000000e+00, -5.444231248678549e+04, -1.336786723792766e+00, 0.000000000000000e+00, -3.139957483513964e+00, -2.406750759862953e+04, 0.000000000000000e+00, -2.201469414947297e+04, -2.406750759862967e+04, 0.000000000000000e+00, -2.201469414947297e+04, -1.295244412331419e-05, 0.000000000000000e+00, -3.203105997266118e-04, 2.778945813047861e-03, 0.000000000000000e+00, 2.722087429287187e-03, 3.144270072044162e-03, 0.000000000000000e+00, 3.021727229670252e-03, 2.696485049827873e-03, 0.000000000000000e+00, 2.519440081956217e-03, 3.045844831886498e-03, 0.000000000000000e+00, 2.893831076203101e-03, 3.045844831886498e-03, 0.000000000000000e+00, 2.893831076203101e-03, -3.455602716967515e-03, 0.000000000000000e+00, -3.668506885334518e-03, -1.396766218675450e-02, 0.000000000000000e+00, -1.365238793482527e-02, -9.807532598128128e-03, 0.000000000000000e+00, -9.462453502879093e-03, -1.786445070998603e-03, 0.000000000000000e+00, -1.643032024525743e-03, -5.934175088818865e-03, 0.000000000000000e+00, -5.895919215520331e-03, -5.934175088818866e-03, 0.000000000000000e+00, -5.895919215520315e-03, 7.238921015851657e-03, 0.000000000000000e+00, 6.947464673988969e-03, 5.978839276437049e-02, 0.000000000000000e+00, 5.199276708750538e-02, -9.810852139509474e-03, 0.000000000000000e+00, -1.348752248683945e-02, 6.340234027643219e-03, 0.000000000000000e+00, 8.397940165275829e-03, -2.622631369357538e-02, 0.000000000000000e+00, -2.582834473744501e-02, -2.622631369357560e-02, 0.000000000000000e+00, -2.582834473744506e-02, -5.811956094608898e-03, 0.000000000000000e+00, -6.594903544563410e-03, -4.398508130260930e+01, 0.000000000000000e+00, -4.313638575957257e+01, -1.193077206453889e+01, 0.000000000000000e+00, -1.345059072805595e+01, 3.596538363552136e-02, 0.000000000000000e+00, 3.615644632637103e-03, 4.996842719201479e+00, 0.000000000000000e+00, 6.386788629135173e-01, 4.996842719201470e+00, 0.000000000000000e+00, 6.386788629135212e-01, -1.317249442957731e+03, 0.000000000000000e+00, -1.212772513513925e+03, -2.043107121417906e+05, 0.000000000000000e+00, -2.028401181443266e+05, -7.617055851265206e+04, 0.000000000000000e+00, -6.881079332789143e+04, 1.995047671797366e+00, 0.000000000000000e+00, -1.050000157293649e-01, -4.357738808800044e+04, 0.000000000000000e+00, -2.703414295854897e+04, -4.357738808800031e+04, 0.000000000000000e+00, -2.703414295854910e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revm06_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([3.175104720277647e-05, 3.176877395256345e-05, 3.175084182620859e-05, 3.176877439928330e-05, 3.175351423082512e-05, 3.177083621012478e-05, 3.175396714072207e-05, 3.177364207916619e-05, 3.174941466297352e-05, 3.177568048851410e-05, 3.174941466297352e-05, 3.177568048851410e-05, -1.043399769110514e-04, -1.051157067046838e-04, -1.042305500074757e-04, -1.050855120872541e-04, -1.023189495852947e-04, -1.026577427847438e-04, -9.982923614259317e-05, -1.006177016781054e-04, -1.026065125571262e-04, -1.009759907525302e-04, -1.026065125571262e-04, -1.009759907525302e-04, -4.530140184033917e-03, -4.749900504462465e-03, -4.480983347218656e-03, -4.752858151238013e-03, -4.061672260664721e-03, -3.672633341299964e-03, -3.348065826605546e-03, -3.442558923865298e-03, -5.388768519194208e-03, -1.331118298569638e-03, -5.388768519194208e-03, -1.331118298569638e-03, 2.496697039838445e-02, 3.090460872859188e-02, 2.404509310727821e-02, 3.045257416946123e-02, -5.599798115882279e-03, -5.816630373747339e-03, 9.404837297299167e-03, 1.554908845353693e-02, 2.000138660888959e-02, -4.046550594558196e-03, 2.000138660888959e-02, -4.046550594558243e-03, 6.702313051133973e-03, 7.101160283019449e-03, 7.028221534973369e-03, 7.540660170338385e-03, 1.456587193093759e-02, 1.576311663605417e-02, 3.373603314156700e-03, 3.407020724202661e-03, 5.811612470763112e-03, 3.902028474923475e-03, 5.811612470763105e-03, 3.902028474923483e-03, 4.399238724057734e-04, 4.408012347668052e-04, 4.390299914101775e-04, 4.399790063286375e-04, 4.400179513487101e-04, 4.408997422489240e-04, 4.392746592707395e-04, 4.401175140104870e-04, 4.393452166655634e-04, 4.403734467621333e-04, 4.393452166655634e-04, 4.403734467621333e-04, 1.112190568215373e-03, 1.127558972255982e-03, 1.196511133042480e-03, 1.210296002946663e-03, 1.170513797705053e-03, 1.157321722788555e-03, 1.249049386516285e-03, 1.237417805735823e-03, 1.106697739704139e-03, 1.181284731472435e-03, 1.106697739704139e-03, 1.181284731472435e-03, 4.001312398480212e-03, 4.352017793358520e-03, -2.510752362436213e-04, -2.990385074013388e-04, -1.089598654249944e-04, -3.970186514125361e-04, -3.273898440736685e-03, -4.195873477584066e-03, 3.835285186121124e-03, 4.541700520768181e-03, 3.835285186121129e-03, 4.541700520768171e-03, 1.675088031364712e-02, 1.630126114548078e-02, 1.861358231320320e-02, 1.831989127898544e-02, 1.565369840076941e-02, 1.746857773615746e-02, -4.623012853651771e-04, -4.607424772702861e-04, 1.903497195897216e-02, 2.346622134360758e-02, 1.903497195897216e-02, 2.346622134360761e-02, 1.621803510841686e-03, 1.658261806186216e-03, 2.816951829489512e-03, 2.616969078590405e-03, 6.636672988263810e-03, 7.255649752459520e-03, 1.651765440012823e-02, 1.961858351957935e-02, 1.802868480841640e-03, 7.577953927041817e-03, 1.802868480841643e-03, 7.577953927041818e-03, 9.196578177766476e-03, 9.098413145349302e-03, 9.711439727283902e-03, 9.414096532149530e-03, 8.999821978553035e-03, 8.747573688846762e-03, 8.760938562833357e-03, 8.573975403864099e-03, 8.822158470586523e-03, 8.603603257226530e-03, 8.822158470586523e-03, 8.603603257226497e-03, 4.691064255288647e-03, 4.603694354920649e-03, 1.910432193496044e-02, 1.885568193817249e-02, 1.848239066765993e-02, 1.810258218811733e-02, 1.421302223057364e-02, 1.388391375960505e-02, 1.654927304441127e-02, 1.638125328468248e-02, 1.654927304441127e-02, 1.638125328468247e-02, -9.955130014482230e-04, -1.100763686274499e-03, 1.944707589102180e-02, 1.929473271439392e-02, 1.657055816494465e-02, 1.638842051309371e-02, 6.855301045061619e-03, 6.265409105600936e-03, 1.458771038443417e-02, 1.453831295652024e-02, 1.458771038443421e-02, 1.453831295652026e-02, 1.052191722448514e-02, 1.084631627498987e-02, 1.608179169329913e-02, 1.580039748698810e-02, 1.557606940518211e-02, 1.629116962109194e-02, 6.568295681236519e-03, 1.096145240397759e-02, 2.041371711957222e-02, 2.330880170702319e-02, 2.041371711957221e-02, 2.330880170702318e-02, 4.807895079157658e-03, 4.819938383147429e-03, 5.409101102725102e-04, 4.054209458561727e-04, 3.601970404014332e-03, 3.903426898692595e-03, 2.285057032726678e-02, 2.675567692814462e-02, 3.093836171541593e-03, 7.165168295921749e-03, 3.093836171541594e-03, 7.165168295921758e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
