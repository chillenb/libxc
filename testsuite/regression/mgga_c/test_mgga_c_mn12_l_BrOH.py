
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_mn12_l_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn12_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.248481939828940e-01, -2.248539845523125e-01, -2.248793682185640e-01, -2.247851536166948e-01, -2.248512439587985e-01, -2.248512439587985e-01, -1.258175863899774e-01, -1.257858414113229e-01, -1.248399736166016e-01, -1.252070131816218e-01, -1.258089265828626e-01, 2.749280713582511e-02, -2.025047070461878e-01, 9.569679086777499e-02, 1.161227064313525e-01, 1.068985850162378e-01, 9.517662815736372e-02, 9.517662815736372e-02, 5.031255014110125e-02, 4.668558566931826e-02, -3.328486541027667e-01, 4.590497751684537e-02, 4.928805801063697e-02, 4.928805801063697e-02, -4.023208857216146e-02, -4.164957006930430e-02, -8.606562866198673e-02, -2.235326095375944e-02, -4.129812321881385e-02, -4.129812321881385e-02, -2.656812862267346e-01, -2.669075501444686e-01, -2.658156950596033e-01, -2.407305835687227e-01, -2.662934260826567e-01, -2.662934260826567e-01, -1.396406973557705e-01, -1.329076345542616e-01, -1.427681735675240e-01, -1.372082550666186e-01, -1.312288987557987e-01, 4.479566107054103e-02, -4.502791485252222e-02, -1.044659175925245e-01, -1.874196522073866e-02, -6.085250978494564e-02, -6.583138522835716e-02, -6.111629174771215e-02, -3.317872151342287e-01, 8.653279236773939e-02, -3.242494106836806e-01, -1.015331549821389e-01, 3.111836659643979e-02, 3.111836659643979e-02, -4.874601236619267e-02, -2.426453728211856e-02, -1.891569043332706e-02, -2.983294189685285e-01, -5.046700964288448e-02, -2.241723847674671e-02, -4.491347282327393e-01, -2.597545231366106e-01, -2.973815737807727e-01, -3.634375602552199e-01, -3.362771035008653e-01, -3.362771035008653e-01, -3.599986333742741e-01, -3.605362564198038e-02, -7.230356749431510e-02, -1.080612227275745e-01, -8.942374938002877e-02, -7.502763184542166e-02, -9.012008896552087e-02, -1.798189061571314e-01, 4.577427673690265e-02, -7.439670052657471e-02, 2.196938965226171e-02, 2.196938965226172e-02, -6.152609939512717e-02, -8.706490312422162e-02, -8.434513507723450e-02, -7.669120884019193e-03, -3.060928710258596e-01, -3.335582938502391e-02, -4.587725295966461e-02, -7.722571895450434e-03, -1.376795477591299e-02, -3.279223649687428e-02, -1.949386364929482e-02, -1.949386364929490e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_mn12_l_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn12_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-5.902359573328679e-01, -5.902522384404392e-01, -5.903235851127833e-01, -5.900586738802790e-01, -5.902445329984632e-01, -5.902445329984632e-01, 9.339471497841079e-02, 9.329842745050930e-02, 9.039036082012163e-02, 9.152142296343382e-02, 9.336811343413970e-02, -3.411797987204506e-01, 1.685919314156034e-01, -1.963953780146512e-01, -1.730072858036555e-01, -1.859227368644283e-01, -1.967162925983924e-01, -1.967162925983924e-01, -1.367315158007386e-01, -1.407204886786620e-01, 1.675933870851475e-01, 1.819401481449700e-01, -1.380337074730878e-01, -1.380337074730878e-01, -4.910484199065749e-02, -5.059242766164990e-02, -5.308470905160416e-02, -2.860473468980535e-02, -5.017376206026327e-02, -5.017376206026279e-02, -5.345241870622058e-01, -5.398585069839990e-01, -5.351048829985533e-01, -6.431707520260536e-01, -5.371762777516572e-01, -5.371762777516572e-01, 1.463843477925577e-01, 1.354091632836935e-01, 1.510434631846357e-01, 1.425723940737435e-01, 1.324590853320237e-01, -2.590353347189022e-01, -2.309538812331532e-01, -2.332968058506609e-01, -2.015349875963903e-01, -2.340943487460647e-01, -2.393989996119797e-01, -1.289484564235069e-01, -2.378104434898355e-01, 7.543660169570787e-03, -2.247919897440326e-01, -3.932119698672997e-01, 1.738151812501436e-01, 1.738151812501436e-01, -6.265172815953049e-02, -3.094307744739505e-02, -2.421130453271274e-02, -3.018170543175888e-01, -6.481429000119961e-02, -2.864629615463249e-02, -9.335260628772610e-01, -7.019835071959919e-01, -7.368928583605039e-01, -8.636581289621922e-01, -8.309115036912839e-01, -8.309115036912839e-01, -8.541888249179870e-01, -2.099013150841270e-01, -2.212819146758968e-01, -2.331751715410837e-01, -2.175516347892645e-01, -1.985870810074198e-01, -2.408982169355526e-01, 1.026347896999823e-01, -1.606309988587565e-01, 7.352688334070027e-02, -1.447658069695875e-01, -1.447658069695875e-01, 3.192271412404522e-02, -6.417180080188446e-02, -2.344384154372415e-02, -1.430280141785066e-01, -2.406729801029511e-01, 1.088829081824000e-01, -5.611709906833191e-02, -1.007785734119244e-02, -1.779973707905702e-02, 1.050167505035417e-01, -2.499635736312350e-02, -2.499635736312361e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_mn12_l_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn12_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.313864376600025e-09, -5.313823350582456e-09, -5.313601025980988e-09, -5.314273229849356e-09, -5.313843056214110e-09, -5.313843056214110e-09, 2.006279475374163e-05, 2.005342646781480e-05, 1.976911372554182e-05, 1.987277601185252e-05, 2.005981244677698e-05, 6.787111640366223e-07, 4.473374119238298e-02, 2.075778114658597e-03, 2.091521509977544e-03, 2.135767942977086e-03, 2.074855855550757e-03, 2.074855855550757e-03, 1.035328404503133e+00, 1.005848722012497e+00, 3.159763018720571e-02, 6.477470750717793e-01, 1.026183259637974e+00, 1.026183259637974e+00, 2.475074647644035e-01, 2.627189309803287e-01, 4.204804809624469e-01, 1.629590979251267e-02, 2.766485985532090e-01, 2.766485985511778e-01, -1.170478256613621e-07, -1.156090089417800e-07, -1.168906158022089e-07, -9.446312699040715e-07, -1.163290826790377e-07, -1.163290826790377e-07, 2.915877538938731e-04, 2.662523200301169e-04, 3.030268603172799e-04, 2.822331491119003e-04, 2.604138610712159e-04, 1.194976363397797e-05, 1.347639839407887e-03, -2.943489312022702e-03, 4.448630482269913e-03, -3.296637413798091e-04, -6.162555353544045e-04, -1.949524713055919e-03, 2.150503062545564e+02, 5.243702329533110e-01, 2.272291005291800e+02, -3.234890825995987e-06, 1.089317623424268e+00, 1.089317623424268e+00, 3.040712972555182e+07, 2.707044799722121e-02, 1.319217058165485e-01, 1.306595086393674e+03, 2.586684331579115e+07, 3.185075954223184e-02, -5.756481044112235e-02, -8.298658920629117e-03, -2.298021374938372e-02, -2.976854820574531e-02, -2.284316011438410e-02, -2.284316011438410e-02, -3.418329496159372e-02, 4.002006498781779e-03, -3.051736425590782e-03, -5.869636853721313e-03, -5.372972504033835e-03, -1.254115221740898e-02, -1.665111038246113e-03, 4.096354322861093e+00, 1.669604557049283e-01, 2.704979496494113e-01, 1.004525545676857e-01, 1.004525545676858e-01, 6.085243137005145e-02, 3.406718168393831e-01, 4.259075509548334e-01, 6.100598253536203e-02, 4.897313664935247e+02, 1.067672357523785e+00, 7.640388459553968e-02, 3.502543282023601e-03, 2.938096204697331e-02, 1.330763004603594e+00, 4.068363196421239e-02, 4.068363198778565e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_mn12_l_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn12_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.061112101444802e-04, 2.061217144641186e-04, 2.061668577165106e-04, 2.059960843987185e-04, 2.061167490280804e-04, 2.061167490280804e-04, -1.731579707382501e-03, -1.730987125656121e-03, -1.712864389496462e-03, -1.719686418956042e-03, -1.731400900484307e-03, 2.094587047103708e-03, -3.696911755877600e-02, 1.332424583947684e-02, 1.180663333972568e-02, 1.271510022300185e-02, 1.334638760768296e-02, 1.334638760768296e-02, 5.309147255758261e-02, 5.571752533626597e-02, -2.344719033857562e-02, -1.129849467286461e-01, 5.393682473947598e-02, 5.393682473947598e-02, -2.304489934093229e-03, -2.602321604472015e-03, -3.804680317641210e-02, -1.026254304328227e-04, -2.642983651598230e-03, -2.642983651597499e-03, 3.964461123253184e-03, 4.044694685503397e-03, 3.973173410458903e-03, 5.558848370662549e-03, 4.004262930122973e-03, 4.004262930122973e-03, -5.750631187616242e-03, -5.541071489724174e-03, -5.835011953074247e-03, -5.676874547603387e-03, -5.487891639392158e-03, 3.883584706108408e-03, 6.981011518402037e-02, 9.472810376419225e-02, 4.778851133808003e-02, 8.491734850986524e-02, 8.184464860100189e-02, 2.865227864059377e-02, -9.347203249289388e-02, -2.273170268534635e-02, -1.040292732547925e-01, 1.404808373562694e-02, -1.388515403854851e-01, -1.388515403854851e-01, -7.181780850997674e-05, -1.710590900751552e-04, -2.945551742229172e-04, -3.580845823190096e-02, -8.223164987578976e-05, -1.616101540047249e-04, 2.226864641470066e+00, 9.814776780616272e-01, 1.120582290944511e+00, 1.667890682111585e+00, 1.488735066161028e+00, 1.488735066161028e+00, 1.755838908689670e+00, 7.636058945199371e-02, 1.082075199672033e-01, 1.361215371758463e-01, 1.159393993796298e-01, 9.398297399565712e-02, 8.066837931047996e-02, -1.817525728601046e-01, 4.110919065124782e-02, -9.684122309246025e-02, 3.398170432666119e-02, 3.398170432666115e-02, -4.782701651136317e-02, -2.976102981263285e-02, -5.328106214521899e-02, 6.160272783698742e-02, -9.822800836185216e-02, -1.293887848975175e-01, -1.405969558392020e-03, -4.497882968361425e-06, -5.694717880054906e-05, -1.377220172029809e-01, -1.426197967696442e-04, -1.426197967697857e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
