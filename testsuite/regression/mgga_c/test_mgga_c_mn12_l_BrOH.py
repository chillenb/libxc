
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_mn12_l_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn12_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.988292322117890e-01, -2.988347374470520e-01, -2.988595596196801e-01, -2.987699967127127e-01, -2.988321255821103e-01, -2.988321255821103e-01, -5.957660331191079e-03, -5.987954676583730e-03, -6.884004251626804e-03, -6.273685282006614e-03, -5.967695722166585e-03, -5.967695722166585e-03, 1.052160755583154e-02, 1.158156041232473e-02, 4.250212054866993e-02, 4.029954007294936e-02, 1.090281297894964e-02, 1.090281297894964e-02, 4.279069501558989e-02, 3.818296948890860e-02, -4.165986067022517e-02, 3.324071229145548e-02, 4.137197452108305e-02, 4.137197452108305e-02, -4.023213233527702e-02, -4.164963822860202e-02, -8.614034583443135e-02, -2.235327495056612e-02, -4.129818194017533e-02, -4.129818194017533e-02, -2.656096232366656e-01, -2.668375514442928e-01, -2.657451216182624e-01, -2.666990871272234e-01, -2.662213856454168e-01, -2.662213856454168e-01, 4.640884358959357e-02, 4.121331305649521e-02, 4.978436217770973e-02, 4.564525750946445e-02, 3.851955592945475e-02, 3.851955592945475e-02, -4.808441536034486e-02, -9.438196050644959e-02, -3.241030338634994e-02, -5.960880121304522e-02, -6.459730954454110e-02, -6.459730954454110e-02, -2.367391803664078e-02, 8.190980050750730e-02, -1.805016332482796e-02, -9.473420685133922e-02, 2.736424145978746e-02, 2.736424145978746e-02, -2.166003259339486e-02, -2.426455658406252e-02, -1.891569772925324e-02, -8.290974562697717e-02, -2.241726113904796e-02, -2.241726113904798e-02, -4.352066210717709e-01, -2.578498106817521e-01, -3.078284444406433e-01, -3.563713995837237e-01, -3.308912304890929e-01, -3.308912304890929e-01, -3.452671098714008e-01, -3.661049947502923e-02, -7.166189788962626e-02, -1.063736149354988e-01, -8.802502590637062e-02, -8.802502590637062e-02, -8.032042239755591e-02, 6.826931740853603e-02, 3.721700452517250e-02, -7.624471120434314e-03, 1.107620874633023e-02, 1.107620874633027e-02, -1.529263245493885e-02, -8.709188592431449e-02, -8.455312184754585e-02, -2.091698970275712e-02, -3.467401650304879e-02, -3.467401650304860e-02, -4.587810347643509e-02, -7.722572007243056e-03, -1.376795528524845e-02, -3.421171556382709e-02, -1.949387974729648e-02, -1.949387974729656e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_mn12_l_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn12_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-6.303158838019671e-01, -6.303072648010249e-01, -6.302707510579100e-01, -6.304110540606108e-01, -6.303113331577218e-01, -6.303113331577218e-01, -2.846024168818912e-01, -2.846548088785184e-01, -2.862920309998306e-01, -2.862219681153580e-01, -2.846137954398060e-01, -2.846137954398060e-01, -2.251319817398523e-01, -2.264100260135599e-01, -2.440262445571149e-01, -2.402278517576181e-01, -2.255855552561984e-01, -2.255855552561984e-01, -1.459933845647480e-01, -1.495964594498519e-01, -2.580542405417910e-01, 1.230741307631717e-01, -1.473395244143174e-01, -1.473395244143174e-01, -4.910512650712528e-02, -5.059287059618440e-02, -5.355945598749157e-02, -2.860482622777249e-02, -5.017414369835542e-02, -5.017414369835490e-02, -5.347470190636432e-01, -5.400813926877215e-01, -5.353249140856071e-01, -5.394695030687925e-01, -5.374029987690393e-01, -5.374029987690393e-01, -2.511432192142438e-01, -2.555718231809903e-01, -2.499531668501465e-01, -2.529622352186911e-01, -2.561894193001055e-01, -2.561894193001055e-01, -1.898776733215655e-01, -2.328919512131339e-01, -1.448016016731521e-01, -1.627365493709288e-01, -2.096117462125801e-01, -2.096117462125801e-01, 1.312096502819284e-01, -7.164797702997243e-03, 1.342861780667468e-01, -2.684346930403485e-01, 1.549614480434193e-01, 1.549614480434193e-01, -2.771201913818791e-02, -3.094320358832577e-02, -2.421135231405597e-02, -1.071188324007614e-02, -2.864644435406347e-02, -2.864644435406367e-02, -9.100102523459174e-01, -6.906848835161856e-01, -7.787415169725591e-01, -8.418563922961267e-01, -8.111168731133798e-01, -8.111168731133798e-01, -8.105614678353710e-01, -2.053022663891109e-01, -2.160681100554762e-01, -2.355300450441172e-01, -2.147447272271267e-01, -2.147447272271267e-01, -2.066556868314575e-01, -1.328821280043846e-01, -1.660999224534023e-01, -1.196899440344111e-01, -1.402848866193769e-01, -1.402848866193770e-01, -1.506160663826338e-01, -6.434399424335857e-02, -2.475035147577029e-02, -1.067950784005724e-01, 1.011933033645259e-01, 1.011933033645258e-01, -5.612261819192391e-02, -1.007785807779770e-02, -1.779974042297393e-02, 9.674401184840523e-02, -2.499646275969591e-02, -2.499646275969603e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_mn12_l_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn12_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.255110908703090e-10, -1.255133238375802e-10, -1.255170783110643e-10, -1.254806337303413e-10, -1.255123200284174e-10, -1.255123200284174e-10, 1.864054790448749e-06, 1.863505477108496e-06, 1.845742775732612e-06, 1.840105154429088e-06, 1.863935734389018e-06, 1.863935734389018e-06, 8.834076728277825e-03, 8.820471971402342e-03, 8.110488945782755e-03, 7.467514345580685e-03, 8.828709835868023e-03, 8.828709835868023e-03, 1.279038396458621e+00, 1.270831898031523e+00, 7.660969204588284e-03, 1.680239162832617e+00, 1.279706419401497e+00, 1.279706419401497e+00, 2.629456464970996e-01, 2.836214354486017e-01, 6.377577604451541e-01, 4.875935965940234e-02, 2.956205524528865e-01, 2.956205524528865e-01, -1.177674637906031e-07, -1.163155804491478e-07, -1.175996975722235e-07, -1.164721724553509e-07, -1.170544152843591e-07, -1.170544152843591e-07, 1.520165429714654e-05, 1.424632253115471e-05, 1.512468703274540e-05, 1.438083989326968e-05, 1.461410917583048e-05, 1.461410917583048e-05, 2.058388541820052e-03, -5.174587628854650e-03, 8.272136637987088e-03, -6.923980258123584e-04, -8.728828388859660e-04, -8.728828388859660e-04, 1.055266416525229e+00, 6.308117042289570e-01, 1.305400738405058e+00, -1.180754551015569e-05, 1.655519257930190e+00, 1.655519257930190e+00, 5.026156109300043e-02, 6.262735179562154e-02, 1.896201454523153e-01, 1.079888843969166e+00, 9.672429651289816e-02, 9.672429649546868e-02, -6.284334449310977e-02, -8.947450058862825e-03, -1.883923333928169e-02, -3.233696968673053e-02, -2.477168242588417e-02, -2.477168242588417e-02, -4.050866449976236e-02, 4.228074154861068e-03, -3.297431670797033e-03, -6.510812977889127e-03, -5.903453525599937e-03, -5.903453525599941e-03, -3.336357166892176e-03, 3.338300074304177e-01, 2.094055255142337e-01, 8.570446172678878e-02, 1.348636985076882e-01, 1.348636985076883e-01, 1.821811325091496e-02, 4.331685254539651e-01, 7.091068709756967e-01, 9.802070752998528e-02, 1.733939893291152e+00, 1.733939893291161e+00, 2.170643965175396e-01, 1.569655867444812e-02, 3.818275974526959e-02, 2.241585463080429e+00, 1.308019624196385e-01, 1.308019624580091e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_mn12_l_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn12_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.114480465476824e-04, 2.114443499482837e-04, 2.114274794370718e-04, 2.114877586433742e-04, 2.114461038542439e-04, 2.114461038542439e-04, 1.259331683323585e-03, 1.260140496408225e-03, 1.285121490046960e-03, 1.281839071016146e-03, 1.259505293300263e-03, 1.259505293300263e-03, -9.213410663582727e-04, -8.059937464703003e-04, 1.660393919957404e-03, 2.587071881501231e-03, -8.787206635672954e-04, -8.787206635672954e-04, 4.034049818838067e-02, 4.043083411974117e-02, -7.123905729975314e-03, -1.142956452818715e-01, 4.029204690051020e-02, 4.029204690051020e-02, -2.304488989953239e-03, -2.602320007949243e-03, -3.803936136766745e-02, -1.026254051634141e-04, -2.642982242879807e-03, -2.642982242879076e-03, 3.968561260086995e-03, 4.048801376891397e-03, 3.977222573438502e-03, 4.039564241441890e-03, 4.008437208618411e-03, 4.008437208618411e-03, 3.370540700622376e-03, 3.563021700559862e-03, 3.346669998241186e-03, 3.487658672139251e-03, 3.549447407713281e-03, 3.549447407713281e-03, 5.174269295694034e-02, 9.283545583727781e-02, 2.344062904093915e-02, 4.903258093536049e-02, 6.792267428550913e-02, 6.792267428550913e-02, -1.145293400638659e-01, -2.519803418692975e-02, -1.237817105783653e-01, 8.243133010012010e-03, -1.391208195791402e-01, -1.391208195791402e-01, -1.411631914719022e-04, -1.710590366992925e-04, -2.945551297050080e-04, -5.899897315934777e-02, -1.616100898723983e-04, -1.616100898723095e-04, 2.055527452558509e+00, 9.524295996693912e-01, 1.269386577577785e+00, 1.573675225560319e+00, 1.414507622343831e+00, 1.414507622343831e+00, 1.547223258008614e+00, 7.369909672758455e-02, 1.047390005888206e-01, 1.383681543524323e-01, 1.138061181315183e-01, 1.138061181315183e-01, 6.328137881199927e-02, 2.975032353145306e-02, 3.169073529590485e-02, 9.984512484272593e-03, 1.877205978372101e-02, 1.877205978372101e-02, 3.247841810581751e-02, -2.975873138380688e-02, -5.325833343057042e-02, 2.174488106269819e-02, -1.292381792666512e-01, -1.292381792666510e-01, -1.405959671314433e-03, -4.497882942601066e-06, -5.694717796953822e-05, -1.375437276652206e-01, -1.426197504808181e-04, -1.426197504809597e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
