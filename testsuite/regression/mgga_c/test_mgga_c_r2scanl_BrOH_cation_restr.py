
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_r2scanl_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scanl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.659091432039087e-02, -2.659095556456015e-02, -2.659107406690800e-02, -2.659046175965349e-02, -2.659079182648866e-02, -2.659079182648866e-02, -4.660801139875511e-02, -4.660575601467160e-02, -4.652196574288583e-02, -4.633329792744873e-02, -4.644888404980250e-02, -4.644888404980250e-02, -4.127151137640921e-02, -4.110982742172701e-02, -3.727395978976292e-02, -3.743801799690423e-02, -3.752755460042223e-02, -3.752755460042223e-02, -1.736825113886328e-02, -1.779373169401433e-02, -4.775380719102221e-02, -1.538362938485147e-02, -1.700879382603036e-02, -1.700879382603036e-02, -6.577145304572968e-04, -7.056048770507973e-04, -4.482155756027705e-03, -3.215130580150246e-04, -4.463511466679263e-04, -4.463511466679263e-04, -8.760033572728906e-02, -8.127992621843146e-02, -2.639442060614608e-02, -8.488548846668671e-02, -2.639828923551386e-02, -7.188060799843746e-02, -2.415271813322815e-02, -4.171127059055261e-02, -3.160299629097300e-02, -3.119183132714814e-02, -3.335127676121854e-02, -2.283663495604778e-02, -5.511513463147880e-02, -7.551105003779973e-02, -5.260429315332696e-02, -5.754913692108309e-02, -4.615016066236115e-02, -4.999304926119714e-02, -7.882224560082154e-03, -1.928232158760014e-02, -7.406917673241164e-03, -8.166508652593371e-02, -9.529777611094780e-03, -9.529777611094780e-03, -1.519635050727583e-04, -1.758055699337982e-04, -1.530817095499046e-04, -5.255962619890100e-03, -2.955315573240439e-04, -1.781258632994243e-04, -5.832422053956357e-02, -5.411792851107410e-02, -5.553390288495346e-02, -5.838956179335062e-02, -5.601107834369851e-02, -5.613241259451506e-02, -5.909850504634110e-02, -2.595502442272565e-02, -5.193056798903571e-02, -2.282450944844197e-02, -4.791178126886512e-02, -5.200740050216026e-02, -7.131715384309355e-02, -1.472436835921187e-02, -1.755544864907066e-02, -1.978053492042297e-02, -3.206554955464327e-02, -2.971124730870166e-02, -3.223759295440472e-02, -2.914395210852384e-03, -5.793390840391876e-03, -3.305960441280625e-02, -6.828820886569165e-03, -6.828820886569177e-03, -5.803435408961052e-04, -3.137669179882102e-05, -8.419726578695196e-05, -6.416281780916955e-03, -1.617192011757165e-04, -1.617192011757356e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_r2scanl_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scanl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.031674003617101e-02, -3.031669532092040e-02, -3.031656956659642e-02, -3.031723331534398e-02, -3.031687514579560e-02, -3.031687514579560e-02, -1.125634547504168e-01, -1.125670460901425e-01, -1.126511444054525e-01, -1.125267908112429e-01, -1.125777218185167e-01, -1.125777218185167e-01, -7.709560504135375e-02, -7.685416772860111e-02, -7.094011815838168e-02, -7.133776535011230e-02, -7.147195247529604e-02, -7.147195247529604e-02, -6.379738384049800e-02, -6.363455865123960e-02, -8.621970596743436e-02, -3.132690929192000e-02, -3.540211491670094e-02, -3.540211491670103e-02, -1.256048373930941e-03, -1.346715170059614e-03, -8.382342638524649e-03, -6.154623054721728e-04, -8.547021883915938e-04, -8.547021883915936e-04, -1.690914981878741e-01, -1.416435363656129e-01, -2.931794179649750e-02, -1.711009420833173e-01, -2.931323049357288e-02, -1.318789648796602e-01, -3.431327447077393e-02, -8.109616210861890e-02, -9.571031584823228e-02, -9.550720455565186e-02, -9.695593080408306e-02, -3.064695145943203e-02, -1.011087658955529e-01, -1.056582106163085e-01, -9.705932443539200e-02, -8.287529798557723e-02, -8.320370615721068e-02, -8.506212327752606e-02, -1.417286506646017e-02, -3.713451095630417e-02, -1.338479061359653e-02, -1.226355032255948e-01, -1.673536416428108e-02, -1.673536416428108e-02, -3.478743141876493e-04, -3.559206832490803e-04, -3.149891431126013e-04, -9.691231458651998e-03, -6.038231545357940e-04, -3.607264709400936e-04, -7.145440156671634e-02, -7.460733844791669e-02, -7.375623861627212e-02, -7.745003007531805e-02, -7.295018243035165e-02, -7.330406417720059e-02, -6.927043072677953e-02, -7.261736250047085e-02, -9.549772201062127e-02, -2.621832055887406e-02, -8.103480043079109e-02, -9.426558546648540e-02, -1.157087817696583e-01, -2.352472433255288e-02, -2.890731719986854e-02, -2.610437125203407e-02, -5.928014569728703e-02, -5.530006468143978e-02, -7.916651459276115e-02, -5.476702251809455e-03, -1.081264579152114e-02, -7.146991229318592e-02, -1.240368993791512e-02, -1.240368993791514e-02, -1.127812228399547e-03, -6.239937790566048e-05, -1.668619607591226e-04, -1.170444023069657e-02, -3.191650725858510e-04, -3.191650725859327e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_r2scanl_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scanl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([9.226407933608711e-12, 9.226335372122438e-12, 9.225883797924097e-12, 9.226966025547187e-12, 9.226417290225827e-12, 9.226417290225827e-12, 1.484962428619670e-06, 1.485219545202804e-06, 1.491104252424142e-06, 1.481194161878036e-06, 1.485895017726436e-06, 1.485895017726436e-06, 1.233034012655738e-03, 1.224847608599769e-03, 1.031936886036139e-03, 9.340002274958290e-04, 9.617386467340826e-04, 9.617386467340826e-04, 6.896886984272232e-01, 6.692889915277920e-01, 8.474645365087331e-04, 2.983502731815717e-01, 2.593866735724366e-01, 2.593866735724341e-01, 6.255924870858027e+01, 5.942852452630544e+01, 1.957377495491790e+00, 1.325257329640501e+02, 1.130663105968747e+02, 1.130663105968748e+02, 3.236286918914825e-07, 3.112703290623774e-07, 1.097204390735793e-08, 2.972175585107176e-07, 1.097378328111897e-08, 2.773944902118432e-07, 2.512260059962437e-06, 5.928374931283149e-06, 1.215220772397598e-05, 1.190192996885607e-05, 1.232280128432533e-05, 8.713358567616992e-07, 4.749851910506040e-03, 8.989629632181658e-03, 6.064769277146844e-03, 1.233161673278454e-02, 7.220097503047992e-03, 4.515515470764012e-03, 1.798566985884403e-01, 7.157500590912597e-02, 2.200336748352002e-01, 6.291740652375698e-05, 1.592860766336200e-01, 1.592860766336200e-01, 1.611394265196580e+02, 1.080444079094382e+02, 5.483580644786364e+02, 5.778253263539692e-01, 2.450998437632181e+02, 2.468887215326159e+02, 9.617560336915442e-03, 8.156290061011177e-03, 8.605937896639083e-03, 9.154552078356951e-03, 8.794935302302938e-03, 8.803896082066552e-03, 1.150675995724496e-02, 1.054193774551349e-02, 7.602846286616115e-03, 7.374316404947832e-04, 7.646036673822169e-03, 7.136170909368129e-03, 5.908224356694398e-03, 1.625767341411204e-02, 2.159338523946755e-02, 4.359523115635316e-03, 3.114971354923895e-02, 3.132296879677464e-02, 1.850625679733498e-02, 1.307665092666221e+00, 1.119408828861122e+00, 8.179531678278354e-02, 4.057234960491492e-01, 4.057234960491510e-01, 1.843970400429844e+01, 2.058508264936191e+03, 4.180747468883648e+02, 4.557377972536988e-01, 2.845284007180042e+02, 2.845284007181160e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_r2scanl_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scanl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.117010204981835e-04, -1.117325594910947e-04, -1.125681234677888e-04, -1.123027841423162e-04, -1.123093599306377e-04, -1.123093599306377e-04, -2.509795041502480e-05, -2.680068893429563e-05, -5.935634764960538e-05, 2.526425448100081e-06, -6.625977600269698e-06, -6.625977600269698e-06, -9.389014011407237e-03, -9.465412728919641e-03, -1.043273307293314e-04, -9.171811797541773e-04, -1.119214842163860e-03, -1.119214842163889e-03, 1.900058661190372e-06, 1.901105060384707e-06, -7.695053029003958e-06, 3.164386671711983e-06, 2.802529258545874e-06, 2.802529258545868e-06, -4.358840759592331e-09, -5.233684101275995e-06, 0.000000000000000e+00, 5.312207368435636e-07, 0.000000000000000e+00, -1.182270392925429e-05, 3.564589584316542e-07, -2.783781713449263e-05, -2.075548888339895e-04, -2.090799587059114e-04, -2.113875264827482e-04, -2.536279012351361e-07, 2.035820406677279e-05, -4.337458574393625e-05, 2.132065246537302e-05, -1.116830676222447e-03, -2.112339894906505e-03, -4.766629448833601e-05, 0.000000000000000e+00, 8.394062692353480e-06, 0.000000000000000e+00, -9.285712361189886e-05, 0.000000000000000e+00, 0.000000000000000e+00, 1.242061168736101e-06, 1.265152540126028e-12, 5.477928745885135e-12, 0.000000000000000e+00, 7.298906529165222e-06, 7.207305432581814e-09, 1.250721816322063e-11, 7.343976878806694e-11, 2.480793943768933e-13, 1.373458453071814e-07, 7.374415054374861e-10, 7.623750145891962e-14, 8.456489539554182e-13, -3.029071499936170e-03, 1.915872216395643e-05, 0.000000000000000e+00, -1.371669085362084e-04, 2.017960159415745e-05, 2.808784439176795e-05, 0.000000000000000e+00, 5.920991250991462e-06, 0.000000000000000e+00, -2.654172995482813e-04, -5.767454810670210e-04, -3.687157000930164e-03, 0.000000000000000e+00, -6.345655814905911e-06, -6.115590005876363e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 7.085734065925410e-10, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
