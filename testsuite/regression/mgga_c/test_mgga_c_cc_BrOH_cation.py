
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_cc_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_cc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.645995504598874e-01, -1.645996352769430e-01, -1.646000385289871e-01, -1.645987760538133e-01, -1.645994338075784e-01, -1.645994337774956e-01, -1.107858338051924e-01, -1.107858953098242e-01, -1.107880164482024e-01, -1.107897430169389e-01, -1.107865491505717e-01, -1.107865666588138e-01, -6.701332647009471e-02, -6.698536167442511e-02, -6.632837542417740e-02, -6.653649474363980e-02, -6.628241523783372e-02, -6.564643216426826e-02, -3.777493112757793e-02, -3.806422336214956e-02, -7.062854226104461e-02, -3.292854754961669e-02, -6.345884834140819e-03, -7.148213339085570e-03, -3.757995289980192e-03, -3.912201310129007e-03, -1.467301974471760e-02, -2.355238044174780e-03, -6.843802958117777e-04, -6.843802958117766e-04, -1.224262387586378e-01, -1.224315794887550e-01, -1.224264965432826e-01, -1.224312197219673e-01, -1.224289434173626e-01, -1.224289393073420e-01, -9.471366555938479e-02, -9.491132293942686e-02, -9.456769069092415e-02, -9.474321854911349e-02, -9.489040907425314e-02, -9.488938756861920e-02, -6.380898856997751e-02, -6.578526630300179e-02, -6.173882420314481e-02, -6.268950848271709e-02, -6.385063176756697e-02, -6.368672592672460e-02, -2.698688362186722e-02, -3.791101024553907e-02, -2.567857375330983e-02, -9.418614333001731e-02, -2.933292503420526e-02, -2.933292503420526e-02, -1.867909938445255e-03, -2.308438707658670e-03, -1.810468624134205e-03, -2.030994362049462e-02, -1.808699992603046e-03, -1.808699992603045e-03, -6.392182504500529e-02, -6.378538895094106e-02, -6.383563580100113e-02, -6.387410333950284e-02, -6.385539257642651e-02, -6.385430868377164e-02, -6.327297905832054e-02, -5.971102673698291e-02, -6.077622335465540e-02, -6.179445529297954e-02, -6.127881079815628e-02, -6.127976700737407e-02, -6.692270982333541e-02, -4.238427250564013e-02, -4.605451489287161e-02, -5.192543889289274e-02, -4.894362866108916e-02, -4.894362862734689e-02, -5.781201977400380e-02, -1.432337785401933e-02, -1.759848470436148e-02, -5.111572635400898e-02, -2.335004412815762e-02, -2.335004412815762e-02, -5.037446550363285e-03, -6.962981743184040e-04, -1.374982125405463e-03, -2.268013163367492e-02, -1.557234395513451e-03, -1.850051192462515e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_cc_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_cc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.747369753456869e-01, -1.747373592460346e-01, -1.747369289286905e-01, -1.747375762850791e-01, -1.747380160558852e-01, -1.747373003530871e-01, -1.747343127298054e-01, -1.747384640978753e-01, -1.747320037276650e-01, -1.747420964497297e-01, -1.747288567066668e-01, -1.747452435873535e-01, -1.202870828335718e-01, -1.202944686769933e-01, -1.202840324067264e-01, -1.202976448567521e-01, -1.203019968210800e-01, -1.202840095126121e-01, -1.203008958321772e-01, -1.202886336227487e-01, -1.204550550109383e-01, -1.201282035522336e-01, -1.203926198735944e-01, -1.201905716608621e-01, -7.534022876474469e-02, -7.481054072997749e-02, -7.561941310630964e-02, -7.447947918170847e-02, -7.254656281190415e-02, -7.621518509754201e-02, -7.493557647240182e-02, -7.421483612091839e-02, -7.037457509512340e-02, -7.906556863981587e-02, -5.860904907434739e-02, -9.321310748412379e-02, -4.807169898569479e-02, -4.040242802970859e-02, -4.759280603987857e-02, -4.142781179306208e-02, -8.492416577260185e-02, -7.350975965368685e-02, -4.055881359477412e-02, -3.689184771215624e-02, -1.180745683954606e-02, -1.388064747632055e-01, -1.235574247621813e-02, -1.362789224860356e-01, -5.437356553361591e-03, -4.328525747873031e-03, -5.849852887206533e-03, -4.372700272414076e-03, -2.050103972802592e-02, -1.604980731255255e-02, -2.953474824080413e-03, -3.142014771056424e-03, -9.346227449124302e-04, -1.191314071479465e-02, -9.346227449124299e-04, -1.191314071479466e-02, -1.320691286470364e-01, -1.322118441133950e-01, -1.320275375148516e-01, -1.322643372941704e-01, -1.320232748434377e-01, -1.322582722330916e-01, -1.320298338561870e-01, -1.322613048421878e-01, -1.320929771233884e-01, -1.321934684580005e-01, -1.320705220105834e-01, -1.322159393586593e-01, -1.038158590056431e-01, -1.038394068845608e-01, -1.039674312477896e-01, -1.040945173770198e-01, -1.043269060748406e-01, -1.030325469928996e-01, -1.045358841165662e-01, -1.031850893734483e-01, -1.033009108849124e-01, -1.047291335694612e-01, -1.029925311280542e-01, -1.050414029607781e-01, -7.128235348524181e-02, -7.214014952077082e-02, -7.390495613246904e-02, -7.366602512020703e-02, -7.912391727157411e-02, -6.123362641163427e-02, -7.929387356687005e-02, -6.284857044359506e-02, -6.377671271902866e-02, -8.146293901612869e-02, -5.980867737979056e-02, -8.604485482932775e-02, -3.317048539688190e-02, -3.108521377420111e-02, -4.459920158144189e-02, -4.362487354055013e-02, -3.445461384217614e-02, -2.751973840377197e-02, -1.031174335998111e-01, -1.034526950730520e-01, -3.953010143500892e-02, -3.083932553128171e-02, -3.953010143500892e-02, -3.083932553128171e-02, -2.622614909158964e-03, -2.251570859424286e-03, -3.123954751267966e-03, -2.854569266382029e-03, -2.623987711274266e-03, -2.130279124641765e-03, -2.489785435617716e-02, -2.425449274673420e-02, -4.696109907873502e-03, -1.726821012953789e-03, -4.696109907873503e-03, -1.726821012953788e-03, -7.282295268393746e-02, -7.084782428883850e-02, -7.268751561067086e-02, -7.069662666828612e-02, -7.198832468635549e-02, -7.148872356177728e-02, -7.240100396546711e-02, -7.116318110271465e-02, -7.200798844943504e-02, -7.151058106231506e-02, -7.238273597200529e-02, -7.113990078625476e-02, -7.167180686730321e-02, -7.062544748736407e-02, -6.784863322853597e-02, -6.694304220340970e-02, -6.919369651285744e-02, -6.784948200500189e-02, -7.046452648657438e-02, -6.872568452526744e-02, -6.996342025574899e-02, -6.814155478916382e-02, -6.961777640379545e-02, -6.848361623139214e-02, -7.517209619403609e-02, -7.478667730120266e-02, -4.957039170613203e-02, -4.832411034229025e-02, -5.408599607234504e-02, -5.172035400690123e-02, -5.988545312645571e-02, -5.842061949829098e-02, -5.592537525158751e-02, -5.601285874254086e-02, -5.592524780267340e-02, -5.601298631673720e-02, -6.700163886246777e-02, -6.381540924161705e-02, -1.773472996354030e-02, -1.753120798266076e-02, -2.396661723809017e-02, -1.925095688946524e-02, -6.027186006859108e-02, -5.640542155927199e-02, -3.378477260926977e-02, -2.339708280199680e-02, -3.378477260926977e-02, -2.339708280199680e-02, -6.593851617928385e-03, -6.257235187311729e-03, -9.191121109706844e-04, -9.069406036678095e-04, -1.869567052566781e-03, -1.724808884064574e-03, -2.767194528635372e-02, -2.688551334493897e-02, -5.381629588050909e-03, -1.085766761445009e-03, -3.530962085125088e-03, -1.997503835860901e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_cc_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_cc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([3.880126779038862e-21, 7.760253558077725e-21, 3.880126779038862e-21, 1.103323848581038e-20, 2.206647697162077e-20, 1.103323848581038e-20, 1.348671983874828e-20, 2.697343967749655e-20, 1.348671983874828e-20, 1.357467447964293e-19, 2.714934895928585e-19, 1.357467447964293e-19, 3.800922807008812e-19, 7.601845614017624e-19, 3.800922807008812e-19, 3.800922807008812e-19, 7.601845614017624e-19, 3.800922807008812e-19, 8.711618955463939e-16, 1.742323791092788e-15, 8.711618955463939e-16, 1.136215359171872e-15, 2.272430718343745e-15, 1.136215359171872e-15, 1.996879610259783e-15, 3.993759220519566e-15, 1.996879610259783e-15, 9.251363804864193e-16, 1.850272760972839e-15, 9.251363804864193e-16, 6.578885458470467e-13, 1.315777091694093e-12, 6.578885458470467e-13, 6.578885458470467e-13, 1.315777091694093e-12, 6.578885458470467e-13, 7.836957323832844e-08, 1.567391464766569e-07, 7.836957323832844e-08, 1.180780372772274e-07, 2.361560745544547e-07, 1.180780372772274e-07, 2.332431584347811e-07, 4.664863168695622e-07, 2.332431584347811e-07, 2.356781875401449e-08, 4.713563750802898e-08, 2.356781875401449e-08, 2.118860801964251e-05, 4.237721603928502e-05, 2.118860801964251e-05, 2.118860801964251e-05, 4.237721603928502e-05, 2.118860801964251e-05, 2.286162222521772e-03, 4.572324445043544e-03, 2.286162222521772e-03, 2.914311413337236e-03, 5.828622826674472e-03, 2.914311413337236e-03, 1.546408771221985e-06, 3.092817542443970e-06, 1.546408771221985e-06, 4.001514816263880e-04, 8.003029632527760e-04, 4.001514816263880e-04, 3.604243894921464e-01, 7.208487789842928e-01, 3.604243894921464e-01, 3.604243894921467e-01, 7.208487789842934e-01, 3.604243894921467e-01, 1.217173559862159e+01, 2.434347119724318e+01, 1.217173559862159e+01, 1.425701889346018e+01, 2.851403778692037e+01, 1.425701889346018e+01, 1.400117272193803e-01, 2.800234544387605e-01, 1.400117272193803e-01, 2.598324767370032e+00, 5.196649534740064e+00, 2.598324767370032e+00, 1.199889690642651e+03, 2.399779381285301e+03, 1.199889690642651e+03, 1.199889690642651e+03, 2.399779381285303e+03, 1.199889690642651e+03, 1.694354738151982e-13, 3.388709476303963e-13, 1.694354738151982e-13, 1.797820453789052e-13, 3.595640907578104e-13, 1.797820453789052e-13, 1.758744995590075e-13, 3.517489991180150e-13, 1.758744995590075e-13, 1.717090591184618e-13, 3.434181182369236e-13, 1.717090591184618e-13, 1.763359825574939e-13, 3.526719651149878e-13, 1.763359825574939e-13, 1.763359825574939e-13, 3.526719651149878e-13, 1.763359825574939e-13, 1.469079754551306e-13, 2.938159509102613e-13, 1.469079754551306e-13, 4.293549858410356e-12, 8.587099716820712e-12, 4.293549858410356e-12, 1.704997271324125e-10, 3.409994542648249e-10, 1.704997271324125e-10, 1.863491955068317e-10, 3.726983910136635e-10, 1.863491955068317e-10, 1.117337078182251e-09, 2.234674156364502e-09, 1.117337078182251e-09, 1.117337078182251e-09, 2.234674156364502e-09, 1.117337078182251e-09, 2.270946215206067e-07, 4.541892430412135e-07, 2.270946215206067e-07, 8.663653339850714e-09, 1.732730667970143e-08, 8.663653339850714e-09, 4.212396592613983e-05, 8.424793185227966e-05, 4.212396592613983e-05, 4.185044771391380e-05, 8.370089542782760e-05, 4.185044771391380e-05, 8.663783849648628e-05, 1.732756769929726e-04, 8.663783849648628e-05, 8.663783849648597e-05, 1.732756769929719e-04, 8.663783849648597e-05, 4.121933235001854e-04, 8.243866470003708e-04, 4.121933235001854e-04, 2.371951838495744e-05, 4.743903676991488e-05, 2.371951838495744e-05, 1.529056974431162e-02, 3.058113948862324e-02, 1.529056974431162e-02, 3.047200748279909e-11, 6.094401496559819e-11, 3.047200748279909e-11, 1.337609250769817e-02, 2.675218501539633e-02, 1.337609250769817e-02, 1.337609250769817e-02, 2.675218501539635e-02, 1.337609250769817e-02, 1.957950405193576e+01, 3.915900810387153e+01, 1.957950405193576e+01, 2.048741541819011e+00, 4.097483083638021e+00, 2.048741541819011e+00, 1.488146560499747e+02, 2.976293120999494e+02, 1.488146560499747e+02, 6.121788106933460e-04, 1.224357621386692e-03, 6.121788106933460e-04, 1.563550371996642e+03, 3.127100743993285e+03, 1.563550371996642e+03, 1.563550371996643e+03, 3.127100743993287e+03, 1.563550371996643e+03, 4.628738952485488e-06, 9.257477904970976e-06, 4.628738952485488e-06, 2.427335138261380e-06, 4.854670276522760e-06, 2.427335138261380e-06, 2.918759718345955e-06, 5.837519436691910e-06, 2.918759718345955e-06, 3.453549465125641e-06, 6.907098930251282e-06, 3.453549465125641e-06, 3.159401163650134e-06, 6.318802327300267e-06, 3.159401163650134e-06, 3.159401163650133e-06, 6.318802327300266e-06, 3.159401163650133e-06, 3.383631641119461e-06, 6.767263282238923e-06, 3.383631641119461e-06, 1.095497726796015e-06, 2.190995453592030e-06, 1.095497726796015e-06, 1.368354492813277e-06, 2.736708985626554e-06, 1.368354492813277e-06, 1.166434945164303e-06, 2.332869890328606e-06, 1.166434945164303e-06, 1.089050820029602e-06, 2.178101640059204e-06, 1.089050820029602e-06, 1.089050820029602e-06, 2.178101640059204e-06, 1.089050820029602e-06, 7.347764755312807e-08, 1.469552951062561e-07, 7.347764755312807e-08, 1.696278280242250e-05, 3.392556560484501e-05, 1.696278280242250e-05, 3.213000915845778e-05, 6.426001831691556e-05, 3.213000915845778e-05, 5.311762855572755e-06, 1.062352571114551e-05, 5.311762855572755e-06, 3.092812872994732e-08, 6.185625745989465e-08, 3.092812872994732e-08, 3.092812872992516e-08, 6.185625745985032e-08, 3.092812872992516e-08, 3.199642089062574e-06, 6.399284178125147e-06, 3.199642089062574e-06, 2.458210620277959e-03, 4.916421240555917e-03, 2.458210620277959e-03, 2.623766425174283e-02, 5.247532850348565e-02, 2.623766425174283e-02, 6.265056952470414e-05, 1.253011390494083e-04, 6.265056952470414e-05, 3.141813297271402e-02, 6.283626594542804e-02, 3.141813297271402e-02, 3.141813297271393e-02, 6.283626594542786e-02, 3.141813297271393e-02, 1.379028777531181e+00, 2.758057555062362e+00, 1.379028777531181e+00, 8.266534817359950e-01, 1.653306963471990e+00, 8.266534817359950e-01, 2.166701479833157e+02, 4.333402959666313e+02, 2.166701479833157e+02, 3.402171827895714e-03, 6.804343655791429e-03, 3.402171827895714e-03, 1.836045799204485e+03, 3.672091598408969e+03, 1.836045799204485e+03, 1.836045799204492e+03, 3.672091598408984e+03, 1.836045799204492e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_cc_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_cc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-3.922509181079086e-28, -3.922509181079084e-28, -1.115394413056410e-67, -1.115394413056410e-67, -1.363507206229005e-67, -1.363507206229005e-67, -5.247830697306444e-15, -5.247830697306443e-15, -2.939063233268776e-14, -2.939063233268776e-14, -5.878655567397643e-14, -5.878655567397642e-14, -2.907117856509212e-13, -2.907117856509211e-13, -7.583849568578912e-13, -7.583849568578910e-13, -1.333146423050590e-12, -1.333146423050591e-12, -6.177469665118727e-13, -6.177469665118728e-13, -4.391493984885359e-10, -4.391493984885359e-10, -2.187474153121860e-10, -2.187474153121861e-10, -1.623663072222483e-20, -1.623663072222483e-20, -1.413234298073751e-07, -1.413234298073750e-07, -1.027110832111000e-06, -1.027110832111000e-06, -5.329761457602364e-08, -5.329761457602363e-08, -2.263464468892612e-45, -2.263464468892612e-45, -9.533146136255797e-05, -9.533146136255797e-05, -1.007331480872922e-04, -1.007331480872922e-04, -6.788543348799306e-05, -6.788543348799311e-05, -5.676040460721112e-06, -5.676040460721112e-06, -1.442703445382500e-05, -1.442703445382501e-05, -2.645827350410998e-02, -2.645827350410997e-02, -2.546470085334245e-02, -2.546470085334246e-02, -2.134131565646666e-05, -2.134131565646668e-05, -3.506434639253317e-05, -3.506434639253319e-05, -5.513151239228963e-05, -5.513151239228964e-05, -8.710893440645045e-07, -8.710893440645046e-07, -2.422478027420343e-03, -2.422478027420344e-03, -2.422478027420345e-03, -2.422478027420345e-03, -1.897804322150896e-10, -1.897804322150895e-10, -4.029605737999161e-10, -4.029605737999160e-10, -3.939960426726652e-10, -3.939960426726653e-10, -3.848516330812343e-10, -3.848516330812344e-10, -9.869053465196512e-11, -9.869053465196509e-11, -1.977478117110599e-10, -1.977478117110599e-10, -8.738582700027854e-12, -8.738582700027854e-12, -2.609929638764360e-10, -2.609929638764358e-10, -1.996310508150819e-08, -1.996310508150818e-08, -2.224338852503501e-08, -2.224338852503501e-08, -3.411034187662282e-08, -3.411034187662282e-08, -6.778149720286671e-08, -6.778149720286671e-08, -3.715069705525342e-07, -3.715069705525342e-07, -3.560668874725025e-08, -3.560668874725029e-08, -1.069380251451498e-04, -1.069380251451498e-04, -1.194427713751169e-04, -1.194427713751170e-04, -1.653034021338601e-04, -1.653034021338601e-04, -2.925895933759823e-04, -2.925895933759824e-04, -4.978028211454684e-06, -4.978028211454689e-06, -9.994735096243553e-07, -9.994735096243561e-07, -7.344057951020357e-05, -7.344057951020363e-05, -3.421145510815295e-09, -3.421145510815294e-09, -1.303932245138841e-04, -1.303932245138840e-04, -1.303932245138841e-04, -1.303932245138841e-04, -3.436286327332510e-06, -3.436286327332509e-06, -1.284042695375700e-06, -1.284042695375700e-06, -2.093590103948726e-05, -2.093590103948726e-05, -9.013912803472292e-07, -9.013912803472294e-07, -4.137857520457818e-04, -4.137857520457817e-04, -4.137857520457823e-04, -4.137857520457820e-04, -1.505517074231109e-05, -1.505517074231109e-05, -7.760099909213193e-06, -7.760099909213193e-06, -1.250693931254121e-44, -1.250693931254122e-44, -5.603400955446187e-06, -5.603400955446190e-06, -1.478735245902470e-44, -1.478735245902469e-44, -5.111987029933757e-06, -5.111987029933754e-06, -5.067222129808559e-06, -5.067222129808562e-06, -5.135131808629831e-07, -5.135131808629831e-07, -1.475961740147594e-06, -1.475961740147595e-06, -2.893262181916734e-06, -2.893262181916734e-06, -2.528167418671915e-06, -2.528167418671915e-06, -1.252859905199490e-06, -1.252859905199490e-06, -8.924207791333429e-08, -8.924207791333431e-08, -1.416949121845418e-06, -1.416949121845418e-06, -4.755646279476191e-06, -4.755646279476191e-06, -1.807618609728663e-06, -1.807618609728664e-06, -6.781777168542482e-09, -6.781777168542481e-09, -6.815161380465221e-09, -6.815161380465216e-09, -4.730313745630379e-06, -4.730313745630381e-06, -1.290492093319523e-38, -1.290492093319524e-38, -3.978361299787006e-05, -3.978361299787004e-05, -1.869030144886420e-05, -1.869030144886420e-05, -1.890056423488290e-04, -1.890056423488290e-04, -1.890056423488285e-04, -1.890056423488286e-04, -4.241505283999142e-34, -4.241505283999143e-34, -9.883762889200207e-09, -9.883762889200206e-09, -1.285274589276379e-29, -1.285274589276379e-29, -2.759551932071130e-39, -2.759551932071129e-39, -8.119974848059850e-04, -8.119974848059850e-04, -1.382258554689410e-04, -1.382258554689410e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
