
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_cc_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_cc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.645995504593127e-01, -1.645996352753089e-01, -1.646000385269896e-01, -1.645987760390749e-01, -1.645994337813550e-01, -1.645994337813550e-01, -1.107858338079803e-01, -1.107858953437141e-01, -1.107880165072739e-01, -1.107897430442734e-01, -1.107865686220253e-01, -1.107865686220253e-01, -6.701250251538787e-02, -6.698500384224595e-02, -6.633259163577163e-02, -6.653654309574379e-02, -6.601467538257694e-02, -6.601467538257694e-02, -3.772543858041322e-02, -3.795944094392724e-02, -7.068124746431749e-02, -3.293139756342983e-02, -1.526572789412119e-02, -1.526572789412118e-02, -3.742807486504332e-03, -3.896432806400010e-03, -1.464211747871843e-02, -2.354652917225563e-03, -1.364699028102192e-03, -1.364699028102193e-03, -1.224262309558539e-01, -1.224315795955607e-01, -1.224264966468018e-01, -1.224312198220635e-01, -1.224289312242059e-01, -1.224289312242059e-01, -9.471366535601602e-02, -9.491131677370516e-02, -9.456775972311329e-02, -9.474328304329992e-02, -9.488784959377282e-02, -9.488784959377282e-02, -6.380887754153711e-02, -6.578528704781607e-02, -6.183010351696298e-02, -6.280527187948626e-02, -6.383234702821841e-02, -6.383234702821841e-02, -2.698776630089154e-02, -3.791012619451922e-02, -2.562648782034136e-02, -9.418617811359614e-02, -2.924906727490890e-02, -2.924906727490890e-02, -1.867437705853133e-03, -2.308706748076816e-03, -1.805464379757664e-03, -2.030936922987093e-02, -1.707439915523111e-03, -1.707439915523111e-03, -6.392276400058468e-02, -6.378585845826686e-02, -6.383403036466966e-02, -6.387372580701442e-02, -6.385385881021151e-02, -6.385385881021151e-02, -6.327339222489316e-02, -5.970926546622320e-02, -6.077511011920105e-02, -6.179473657157072e-02, -6.127904793746578e-02, -6.127904793746578e-02, -6.692269725018413e-02, -4.238284537410346e-02, -4.605064906081730e-02, -5.192487913855388e-02, -4.894362432354260e-02, -4.894362432354260e-02, -5.781341710312447e-02, -1.432196024264742e-02, -1.760412369643811e-02, -5.111200708881506e-02, -2.337131538508040e-02, -2.337131538508039e-02, -5.026499656734441e-03, -6.963031881589371e-04, -1.364001975476609e-03, -2.266785740244623e-02, -1.648580813133456e-03, -1.648580813133458e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_cc_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_cc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.747363802863358e-01, -1.747379543076137e-01, -1.747359255029175e-01, -1.747385797171874e-01, -1.747391254741690e-01, -1.747361909425471e-01, -1.747317329317631e-01, -1.747410439530557e-01, -1.747292604462930e-01, -1.747448398327651e-01, -1.747292604462930e-01, -1.747448398327651e-01, -1.202873552673178e-01, -1.202941962325740e-01, -1.202869326006948e-01, -1.202947445330391e-01, -1.202981709150045e-01, -1.202878351925379e-01, -1.202982988505355e-01, -1.202912304997424e-01, -1.203856189774031e-01, -1.201975650410761e-01, -1.203856189774031e-01, -1.201975650410761e-01, -7.561948400088464e-02, -7.453438306043018e-02, -7.571828093079354e-02, -7.438195655872730e-02, -7.335186410941780e-02, -7.539403995934583e-02, -7.490569396556772e-02, -7.424453690127646e-02, -6.542145548431011e-02, -8.502148187061778e-02, -6.542145548431011e-02, -8.502148187061778e-02, -4.989161697431717e-02, -3.876406664496044e-02, -5.100314252657109e-02, -3.840183429953353e-02, -8.269959902784570e-02, -7.553594765013415e-02, -4.027636457773583e-02, -3.716389289009818e-02, -1.790299227299435e-02, -1.107065512290100e-01, -1.790299227299436e-02, -1.107065512290100e-01, -5.796871845692445e-03, -4.021049554770392e-03, -6.182415960952609e-03, -4.094156355810842e-03, -2.131152770456127e-02, -1.534847062974793e-02, -2.908042967828830e-03, -3.189444163123559e-03, -1.629188024851442e-03, -9.386339554755162e-03, -1.629188024851445e-03, -9.386339554755162e-03, -1.320257165146468e-01, -1.322552862186567e-01, -1.320281164675982e-01, -1.322637579311500e-01, -1.320238402639199e-01, -1.322577064149606e-01, -1.320303889329838e-01, -1.322607493808907e-01, -1.320263597672173e-01, -1.322601326518380e-01, -1.320263597672173e-01, -1.322601326518380e-01, -1.038104933875702e-01, -1.038447732769699e-01, -1.039372386328651e-01, -1.041247334699548e-01, -1.042735120733230e-01, -1.030856781660211e-01, -1.044879930504405e-01, -1.032327348727326e-01, -1.025282357845723e-01, -1.055115545225324e-01, -1.025282357845723e-01, -1.055115545225324e-01, -7.122671969484871e-02, -7.219619993022791e-02, -7.384397609636119e-02, -7.372692722260303e-02, -7.558209051844320e-02, -6.443368521312567e-02, -7.435484876900562e-02, -6.735382543607731e-02, -6.333405313148137e-02, -8.197408087617993e-02, -6.333405313148138e-02, -8.197408087617991e-02, -3.304488529367378e-02, -3.120761838602072e-02, -4.483760630972449e-02, -4.338971596192844e-02, -3.587524997111714e-02, -2.628687692692923e-02, -1.032205747353651e-01, -1.033494215236738e-01, -4.162141792822083e-02, -2.905185825079631e-02, -4.162141792822083e-02, -2.905185825079631e-02, -2.639778391449710e-03, -2.236013898069453e-03, -3.099705349180732e-03, -2.877903794409306e-03, -2.748850596265192e-03, -2.022412218403719e-03, -2.502382037912608e-02, -2.413058312512957e-02, -5.284556529962669e-03, -1.458461844371442e-03, -5.284556529962674e-03, -1.458461844371441e-03, -7.249670394492513e-02, -7.117054950346578e-02, -7.252599668796721e-02, -7.085638386340694e-02, -7.254081681768323e-02, -7.094225566789823e-02, -7.253211774611906e-02, -7.103348400865338e-02, -7.253827628438680e-02, -7.098604859922321e-02, -7.253827628438680e-02, -7.098604859922321e-02, -7.150410860170713e-02, -7.079159591077096e-02, -6.839515913694791e-02, -6.640310813676356e-02, -6.953098029161921e-02, -6.751636757109580e-02, -7.035715517808999e-02, -6.883200168725237e-02, -6.987770078885536e-02, -6.822638582060545e-02, -6.987770078885536e-02, -6.822638582060545e-02, -7.518241602356586e-02, -7.477640473708574e-02, -4.990261222644039e-02, -4.799715670182943e-02, -5.460965670489294e-02, -5.121100960329418e-02, -6.002184794964665e-02, -5.828630798323652e-02, -5.590899177882627e-02, -5.602925832024788e-02, -5.590899177882629e-02, -5.602925832024786e-02, -6.672753729622090e-02, -6.408428782134792e-02, -1.801442773508176e-02, -1.725652554381796e-02, -2.372824903392467e-02, -1.946925636517462e-02, -6.061010956358143e-02, -5.608100363884520e-02, -3.322520374560083e-02, -2.388026233062190e-02, -3.322520374560083e-02, -2.388026233062190e-02, -7.022602990168078e-03, -5.866238432835904e-03, -9.161753735293134e-04, -9.098604065874214e-04, -2.125760719267967e-03, -1.505792626210597e-03, -2.870289439176892e-02, -2.589868374612478e-02, -4.804299843448032e-03, -1.370190047359593e-03, -4.804299843448034e-03, -1.370190047359594e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_cc_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_cc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([3.880126779038862e-21, 7.760253558077725e-21, 3.880126779038862e-21, 1.103323848581038e-20, 2.206647697162077e-20, 1.103323848581038e-20, 1.348671983874828e-20, 2.697343967749655e-20, 1.348671983874828e-20, 1.357467447964293e-19, 2.714934895928585e-19, 1.357467447964293e-19, 3.800922807008812e-19, 7.601845614017624e-19, 3.800922807008812e-19, 3.800922807008812e-19, 7.601845614017624e-19, 3.800922807008812e-19, 8.711618955463939e-16, 1.742323791092788e-15, 8.711618955463939e-16, 1.136215359171872e-15, 2.272430718343745e-15, 1.136215359171872e-15, 1.996879610259783e-15, 3.993759220519566e-15, 1.996879610259783e-15, 9.251363804864193e-16, 1.850272760972839e-15, 9.251363804864193e-16, 6.578885458470467e-13, 1.315777091694093e-12, 6.578885458470467e-13, 6.578885458470467e-13, 1.315777091694093e-12, 6.578885458470467e-13, 7.836957323832844e-08, 1.567391464766569e-07, 7.836957323832844e-08, 1.180780372772274e-07, 2.361560745544547e-07, 1.180780372772274e-07, 2.332431584347811e-07, 4.664863168695622e-07, 2.332431584347811e-07, 2.356781875401449e-08, 4.713563750802898e-08, 2.356781875401449e-08, 2.118860801964251e-05, 4.237721603928502e-05, 2.118860801964251e-05, 2.118860801964251e-05, 4.237721603928502e-05, 2.118860801964251e-05, 2.286162222521772e-03, 4.572324445043544e-03, 2.286162222521772e-03, 2.914311413337236e-03, 5.828622826674472e-03, 2.914311413337236e-03, 1.546408771221985e-06, 3.092817542443970e-06, 1.546408771221985e-06, 4.001514816263880e-04, 8.003029632527760e-04, 4.001514816263880e-04, 3.604243894921464e-01, 7.208487789842928e-01, 3.604243894921464e-01, 3.604243894921467e-01, 7.208487789842934e-01, 3.604243894921467e-01, 1.217173559862159e+01, 2.434347119724318e+01, 1.217173559862159e+01, 1.425701889346018e+01, 2.851403778692037e+01, 1.425701889346018e+01, 1.400117272193803e-01, 2.800234544387605e-01, 1.400117272193803e-01, 2.598324767370032e+00, 5.196649534740064e+00, 2.598324767370032e+00, 1.199889690642651e+03, 2.399779381285301e+03, 1.199889690642651e+03, 1.199889690642651e+03, 2.399779381285303e+03, 1.199889690642651e+03, 1.694354738151982e-13, 3.388709476303963e-13, 1.694354738151982e-13, 1.797820453789052e-13, 3.595640907578104e-13, 1.797820453789052e-13, 1.758744995590075e-13, 3.517489991180150e-13, 1.758744995590075e-13, 1.717090591184618e-13, 3.434181182369236e-13, 1.717090591184618e-13, 1.763359825574939e-13, 3.526719651149878e-13, 1.763359825574939e-13, 1.763359825574939e-13, 3.526719651149878e-13, 1.763359825574939e-13, 1.469079754551306e-13, 2.938159509102613e-13, 1.469079754551306e-13, 4.293549858410356e-12, 8.587099716820712e-12, 4.293549858410356e-12, 1.704997271324125e-10, 3.409994542648249e-10, 1.704997271324125e-10, 1.863491955068317e-10, 3.726983910136635e-10, 1.863491955068317e-10, 1.117337078182251e-09, 2.234674156364502e-09, 1.117337078182251e-09, 1.117337078182251e-09, 2.234674156364502e-09, 1.117337078182251e-09, 2.270946215206067e-07, 4.541892430412135e-07, 2.270946215206067e-07, 8.663653339850714e-09, 1.732730667970143e-08, 8.663653339850714e-09, 4.212396592613983e-05, 8.424793185227966e-05, 4.212396592613983e-05, 4.185044771391380e-05, 8.370089542782760e-05, 4.185044771391380e-05, 8.663783849648628e-05, 1.732756769929726e-04, 8.663783849648628e-05, 8.663783849648597e-05, 1.732756769929719e-04, 8.663783849648597e-05, 4.121933235001854e-04, 8.243866470003708e-04, 4.121933235001854e-04, 2.371951838495744e-05, 4.743903676991488e-05, 2.371951838495744e-05, 1.529056974431162e-02, 3.058113948862324e-02, 1.529056974431162e-02, 3.047200748279909e-11, 6.094401496559819e-11, 3.047200748279909e-11, 1.337609250769817e-02, 2.675218501539633e-02, 1.337609250769817e-02, 1.337609250769817e-02, 2.675218501539635e-02, 1.337609250769817e-02, 1.957950405193576e+01, 3.915900810387153e+01, 1.957950405193576e+01, 2.048741541819011e+00, 4.097483083638021e+00, 2.048741541819011e+00, 1.488146560499747e+02, 2.976293120999494e+02, 1.488146560499747e+02, 6.121788106933460e-04, 1.224357621386692e-03, 6.121788106933460e-04, 1.563550371996642e+03, 3.127100743993285e+03, 1.563550371996642e+03, 1.563550371996643e+03, 3.127100743993287e+03, 1.563550371996643e+03, 4.628738952485488e-06, 9.257477904970976e-06, 4.628738952485488e-06, 2.427335138261380e-06, 4.854670276522760e-06, 2.427335138261380e-06, 2.918759718345955e-06, 5.837519436691910e-06, 2.918759718345955e-06, 3.453549465125641e-06, 6.907098930251282e-06, 3.453549465125641e-06, 3.159401163650134e-06, 6.318802327300267e-06, 3.159401163650134e-06, 3.159401163650133e-06, 6.318802327300266e-06, 3.159401163650133e-06, 3.383631641119461e-06, 6.767263282238923e-06, 3.383631641119461e-06, 1.095497726796015e-06, 2.190995453592030e-06, 1.095497726796015e-06, 1.368354492813277e-06, 2.736708985626554e-06, 1.368354492813277e-06, 1.166434945164303e-06, 2.332869890328606e-06, 1.166434945164303e-06, 1.089050820029602e-06, 2.178101640059204e-06, 1.089050820029602e-06, 1.089050820029602e-06, 2.178101640059204e-06, 1.089050820029602e-06, 7.347764755312807e-08, 1.469552951062561e-07, 7.347764755312807e-08, 1.696278280242250e-05, 3.392556560484501e-05, 1.696278280242250e-05, 3.213000915845778e-05, 6.426001831691556e-05, 3.213000915845778e-05, 5.311762855572755e-06, 1.062352571114551e-05, 5.311762855572755e-06, 3.092812872994732e-08, 6.185625745989465e-08, 3.092812872994732e-08, 3.092812872992516e-08, 6.185625745985032e-08, 3.092812872992516e-08, 3.199642089062574e-06, 6.399284178125147e-06, 3.199642089062574e-06, 2.458210620277959e-03, 4.916421240555917e-03, 2.458210620277959e-03, 2.623766425174283e-02, 5.247532850348565e-02, 2.623766425174283e-02, 6.265056952470414e-05, 1.253011390494083e-04, 6.265056952470414e-05, 3.141813297271402e-02, 6.283626594542804e-02, 3.141813297271402e-02, 3.141813297271393e-02, 6.283626594542786e-02, 3.141813297271393e-02, 1.379028777531181e+00, 2.758057555062362e+00, 1.379028777531181e+00, 8.266534817359950e-01, 1.653306963471990e+00, 8.266534817359950e-01, 2.166701479833157e+02, 4.333402959666313e+02, 2.166701479833157e+02, 3.402171827895714e-03, 6.804343655791429e-03, 3.402171827895714e-03, 1.836045799204485e+03, 3.672091598408969e+03, 1.836045799204485e+03, 1.836045799204492e+03, 3.672091598408984e+03, 1.836045799204492e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_cc_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_cc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-5.616072852732996e-16, -5.616072852732993e-16, -1.596959962275583e-15, -1.596959962275584e-15, -1.952236544776498e-15, -1.952236544776498e-15, -1.964687650001561e-14, -1.964687650001561e-14, -5.501527511752590e-14, -5.501527511752589e-14, -5.501527511752590e-14, -5.501527511752589e-14, -2.557782735507499e-13, -2.557782735507498e-13, -3.336209461785794e-13, -3.336209461785794e-13, -5.877445826138785e-13, -5.877445826138786e-13, -2.738255951363473e-13, -2.738255951363473e-13, -1.940335847636963e-10, -1.940335847636963e-10, -1.940335847636963e-10, -1.940335847636963e-10, -1.310679859926573e-07, -1.310679859926574e-07, -1.980118570330862e-07, -1.980118570330861e-07, -4.199364383544094e-07, -4.199364383544092e-07, -4.596048575473902e-08, -4.596048575473901e-08, -4.013319336241883e-05, -4.013319336241883e-05, -4.013319336241883e-05, -4.013319336241883e-05, -1.761419718740345e-04, -1.761419718740344e-04, -2.313729906945753e-04, -2.313729906945754e-04, -2.112042375389450e-06, -2.112042375389451e-06, -1.147121756892132e-05, -1.147121756892132e-05, -1.541228416319096e-02, -1.541228416319096e-02, -1.541228416319098e-02, -1.541228416319099e-02, -4.198442593618825e-05, -4.198442593618829e-05, -5.694454296118886e-05, -5.694454296118889e-05, -8.519958150920066e-05, -8.519958150920068e-05, -1.551979927708852e-06, -1.551979927708852e-06, -1.488263167842238e-03, -1.488263167842239e-03, -1.488263167842237e-03, -1.488263167842238e-03, -3.771155896848278e-10, -3.771155896848277e-10, -4.003764779922369e-10, -4.003764779922368e-10, -3.915095689126620e-10, -3.915095689126621e-10, -3.824309906488792e-10, -3.824309906488793e-10, -3.925627571831051e-10, -3.925627571831050e-10, -3.925627571831051e-10, -3.925627571831050e-10, -1.527013184576353e-11, -1.527013184576353e-11, -4.644326074739135e-10, -4.644326074739132e-10, -1.779429898384138e-08, -1.779429898384138e-08, -2.016678254445106e-08, -2.016678254445107e-08, -1.184766556234513e-07, -1.184766556234513e-07, -1.184766556234513e-07, -1.184766556234513e-07, -4.516156676392461e-07, -4.516156676392461e-07, -1.138194326196547e-08, -1.138194326196548e-08, -5.306150102328810e-05, -5.306150102328812e-05, -2.780593496963643e-05, -2.780593496963645e-05, -1.795029865877939e-04, -1.795029865877939e-04, -1.795029865877933e-04, -1.795029865877933e-04, -4.174901272174758e-06, -4.174901272174762e-06, -1.821140680544366e-06, -1.821140680544368e-06, -1.216003912642344e-04, -1.216003912642345e-04, -6.403378400371215e-10, -6.403378400371215e-10, -2.303351532817455e-04, -2.303351532817454e-04, -2.303351532817456e-04, -2.303351532817456e-04, -3.893413452013599e-06, -3.893413452013598e-06, -9.907902119430266e-07, -9.907902119430266e-07, -3.650608816591011e-05, -3.650608816591010e-05, -1.497052709237542e-06, -1.497052709237542e-06, -6.089554129871753e-04, -6.089554129871749e-04, -6.089554129871765e-04, -6.089554129871761e-04, -8.452291293164912e-06, -8.452291293164916e-06, -6.088477688527828e-06, -6.088477688527828e-06, -6.914776315755131e-06, -6.914776315755139e-06, -7.571627619505186e-06, -7.571627619505190e-06, -7.233735705075830e-06, -7.233735705075826e-06, -7.233735705075827e-06, -7.233735705075823e-06, -2.366707552006636e-06, -2.366707552006637e-06, -1.969604479088902e-06, -1.969604479088902e-06, -2.711932894217671e-06, -2.711932894217673e-06, -2.418222651821352e-06, -2.418222651821352e-06, -2.211891924221669e-06, -2.211891924221669e-06, -2.211891924221668e-06, -2.211891924221668e-06, -1.002020769433394e-07, -1.002020769433394e-07, -2.689194570144858e-06, -2.689194570144857e-06, -8.238429902739387e-06, -8.238429902739387e-06, -2.365758147793204e-06, -2.365758147793205e-06, -1.107329530756278e-08, -1.107329530756278e-08, -1.107329530755485e-08, -1.107329530755484e-08, -3.651291440984227e-06, -3.651291440984228e-06, -1.388904416638416e-06, -1.388904416638417e-06, -3.457219743599431e-05, -3.457219743599430e-05, -2.409381852768368e-05, -2.409381852768368e-05, -1.632412496634924e-04, -1.632412496634924e-04, -1.632412496634918e-04, -1.632412496634919e-04, -1.028777454521966e-05, -1.028777454521966e-05, -3.814864981254601e-09, -3.814864981254601e-09, -2.250670920054076e-05, -2.250670920054076e-05, -1.547017386676654e-05, -1.547017386676653e-05, -6.018093218481080e-04, -6.018093218481080e-04, -6.018093218481083e-04, -6.018093218481084e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
