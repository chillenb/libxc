
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_kcis_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.645997984141768e-01, -1.645998722376647e-01, -1.646002559406559e-01, -1.645990459764830e-01, -1.645998368922163e-01, -1.645998368922163e-01, -1.107850779813080e-01, -1.107851378255798e-01, -1.107879564174404e-01, -1.107891435020754e-01, -1.107852302312699e-01, -2.886731328688578e-02, -6.686325305100879e-02, -1.800046229955828e-02, -1.683868753406666e-02, -1.733883134179941e-02, -1.803011962689167e-02, -1.803011962689167e-02, -1.197886188254228e-02, -1.226003539236850e-02, -7.129479792198967e-02, -5.894158592225749e-03, -1.206004912485432e-02, -1.206004912485432e-02, -1.588874467639028e-04, -1.733826448119817e-04, -1.403430096782538e-03, -2.230216613158123e-05, -1.735767650639615e-04, -1.735767650639615e-04, -4.758894820566065e-02, -4.766548841364050e-02, -4.759740684648443e-02, -1.224187739336419e-01, -4.762734099552586e-02, -4.762734099552586e-02, -9.468350884767802e-02, -9.487551903244792e-02, -9.460553775405933e-02, -9.475589169031329e-02, -9.491382938026718e-02, -2.603399478067650e-02, -2.555620428068674e-02, -2.893785530313862e-02, -2.384828323392363e-02, -2.625209759607695e-02, -2.678140885731687e-02, -6.444479849692643e-02, -2.795793269891251e-02, -9.531773471663138e-03, -2.775591893236855e-02, -3.423729948304538e-02, -5.276157095985741e-03, -5.276157095985741e-03, -3.066310529287210e-03, -3.038547921789521e-05, -3.367217305623324e-05, -2.111688835133230e-02, -3.174878232166117e-03, -2.800035455097466e-05, -3.221524372629225e-02, -3.125258530461662e-02, -6.421278911905946e-02, -3.184313699863200e-02, -3.170840018979804e-02, -3.170840018979804e-02, -3.151587140252336e-02, -2.422352134583165e-02, -2.622816925276818e-02, -2.816140739762163e-02, -2.716313055029495e-02, -6.165521676530553e-02, -2.850931271498562e-02, -4.342843891221907e-02, -1.501884662803318e-02, -5.212074169948084e-02, -1.729699951573479e-02, -1.729699951573480e-02, -5.782950547549860e-02, -1.259518102481032e-03, -1.742672375099996e-03, -1.986897246781907e-02, -2.479858776778672e-02, -3.488209514040080e-03, -1.375568443308287e-04, -2.415116310688966e-06, -1.215541337848983e-05, -3.470491264817025e-03, -2.398012643757344e-05, -2.398012643757336e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_kcis_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.747375022396805e-01, -1.747375764902732e-01, -1.747379624249751e-01, -1.747367454232825e-01, -1.747375409392460e-01, -1.747375409392460e-01, -1.202900715742411e-01, -1.202901326384370e-01, -1.202930086854292e-01, -1.202942199669432e-01, -1.202902269278121e-01, -7.472032267753791e-02, -7.491651594909549e-02, -4.580997437783218e-02, -4.357848572134739e-02, -4.453275555130051e-02, -4.586596128888627e-02, -4.586596128888627e-02, -3.076238576118902e-02, -3.124763353922213e-02, -7.955596680641969e-02, -1.753888665882542e-02, -3.090404415450416e-02, -3.090404415450416e-02, -6.019310526530007e-04, -6.560919016377652e-04, -4.313791500353626e-03, -8.587390650961223e-05, -6.566818766561418e-04, -6.566818766561419e-04, -1.030315465507144e-01, -1.030984000784762e-01, -1.030389274297509e-01, -1.321329433242859e-01, -1.030651072217355e-01, -1.030651072217355e-01, -1.037966701665785e-01, -1.039941747748390e-01, -1.037164617218208e-01, -1.038711268068387e-01, -1.040335787945163e-01, -6.604717525291323e-02, -5.551264809423076e-02, -5.981007756184104e-02, -5.318697268171563e-02, -5.610728026550500e-02, -5.713750787142645e-02, -7.237749697184798e-02, -3.318919960782708e-02, -2.635617014064656e-02, -3.296456561895865e-02, -7.786156453378336e-02, -1.555086076823431e-02, -1.555086076823431e-02, -3.946287747265610e-03, -1.168328991803027e-04, -1.290930832158075e-04, -2.549364889155059e-02, -4.083423057386236e-03, -1.076643289976508e-04, -6.507488999452216e-02, -6.297627635485874e-02, -7.213364933755588e-02, -6.424094462570941e-02, -6.394454369070149e-02, -6.394454369070149e-02, -6.359597339318873e-02, -5.271429885361428e-02, -5.516181331331996e-02, -5.763789022753810e-02, -5.632162899446675e-02, -6.944233915338220e-02, -5.984298088953154e-02, -5.006360750936622e-02, -3.710111468803149e-02, -5.935308484285391e-02, -4.092001055860749e-02, -4.092001055860748e-02, -6.540509854452931e-02, -4.182753875486288e-03, -5.700150909455541e-03, -4.438112175865661e-02, -2.965894237843184e-02, -1.025986763500566e-02, -5.238384576470689e-04, -9.334909424421216e-06, -4.683474716805797e-05, -1.020235079252956e-02, -9.221636527215399e-05, -9.221636527215368e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_kcis_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([9.639485913840547e-09, 9.639404119769498e-09, 9.638967549483227e-09, 9.640309887841787e-09, 9.639443359562851e-09, 9.639443359562851e-09, 1.543216245424397e-05, 1.543226428400342e-05, 1.543308878385010e-05, 1.542769363756834e-05, 1.543188891202953e-05, 4.661650867708821e-07, 1.300614025779114e-02, 4.798451042012528e-04, 4.476848173132729e-04, 4.709109617816788e-04, 4.807480583952870e-04, 4.807480583952870e-04, 1.759346094344399e-01, 1.758752811414252e-01, 6.028373216843345e-03, 1.457841929795909e-01, 1.757556816703791e-01, 1.757556816703791e-01, 2.174789723098815e+01, 2.055023244743248e+01, 1.327854917309287e+00, 1.673263258375203e+01, 2.170617530111032e+01, 2.170617530111031e+01, 3.989418954553267e-07, 4.022655103811003e-07, 3.993090850263951e-07, 3.443925698213249e-06, 4.006009706171399e-07, 4.006009706171399e-07, 1.625915890182042e-04, 1.584531058472687e-04, 1.642896420237707e-04, 1.610057735401110e-04, 1.576714762730580e-04, 5.925885943731446e-06, 4.328891954493472e-03, 6.085863013606638e-03, 4.094580198790864e-03, 5.463463366056843e-03, 4.559334342303987e-03, 2.508615120265434e-02, 2.887485416185106e+01, 8.315111121737476e-02, 3.045703682746026e+01, 1.917304035330626e-05, 2.650861601599762e-01, 2.650861601599762e-01, 3.878756631827571e+06, 1.908270038635675e+01, 9.921604485409097e+01, 1.863010988672729e+02, 3.310842943915226e+06, 2.580296248230892e+01, 6.061473469434738e-02, 2.905170276096277e-02, 6.144857570825114e-02, 4.373670150427115e-02, 3.945661170312249e-02, 3.945661170312249e-02, 5.067220223198923e-02, 7.795309968315841e-03, 9.902522600675064e-03, 1.404682158552580e-02, 1.149794611113126e-02, 4.586343499600429e-02, 3.846929868848689e-03, 9.738823184568257e-01, 3.481358892641681e-02, 1.985601326407952e-01, 2.903382596553269e-02, 2.903382596553268e-02, 7.175420180391077e-02, 1.506108493217349e+00, 7.277290453666637e-01, 3.654235373023767e-02, 6.606179745993981e+01, 5.343998740212117e-01, 7.353306953813674e+00, 7.817801224871566e+01, 8.017578071850109e+01, 6.667666291765979e-01, 4.268420241889477e+01, 4.268420241889477e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_kcis_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-5.175522598317222e-17, -1.201168587269655e-54, -1.201303003715831e-54, -1.200717677274763e-54, -1.201151621898194e-54, -1.201151621898194e-54, -7.113863825786213e-48, -7.116999856490161e-48, -7.209534039101503e-48, -7.167965819534385e-48, -7.114404650796550e-48, -1.562330689957482e-04, -1.322160013676613e-41, -1.093233025255077e-03, -8.978607803293651e-04, -9.875613880874429e-04, -1.098726184167795e-03, -1.098726184167795e-03, -8.854434091676085e-03, -9.358198685444682e-03, -1.031356765983377e-42, -2.001818339566304e-03, -8.992621473528683e-03, -8.992621473528683e-03, -6.522712446450111e-05, -7.101595986298313e-05, -4.208672156228864e-04, -5.340491699455814e-06, -7.272647954547799e-05, -7.272647954547792e-05, -6.603993771490942e-04, -6.676179664105619e-04, -6.611937313954272e-04, -3.409583914194651e-23, -6.640049445014689e-04, -6.640049445014689e-04, -2.099515867318623e-20, -1.265277580792900e-45, -1.239882987722334e-45, -1.253355918599653e-45, -1.274323221435112e-45, -3.708975286058020e-04, -9.788935844540306e-03, -2.006786601089636e-02, -7.415821546406259e-03, -1.247370348771145e-02, -1.207286632700010e-02, -6.024808015540268e-40, -2.366363995312268e-35, -3.553201089119570e-03, -2.980165053593990e-35, -1.425521021100524e-03, -2.250575635911768e-03, -2.250575635911768e-03, -4.569526706292496e-28, -8.187780551310411e-06, -1.804392444310282e-05, -3.259547190078583e-34, -3.779319673148015e-28, -8.374423750128777e-06, -1.989108020301105e-01, -9.114324069853622e-02, -2.182070827355189e-38, -1.411138836259320e-01, -1.265152894050113e-01, -1.265152894050113e-01, -1.492364744043362e-01, -1.142824212995094e-02, -1.803642232703311e-02, -3.108231067819795e-02, -2.306157371055547e-02, -3.521763409426208e-39, -1.400869608256898e-02, -1.940730063872277e-37, -6.237176711184266e-03, -2.073297621433539e-38, -8.285658732795064e-03, -8.285658732795062e-03, -2.922435215748781e-39, -3.380178655133456e-04, -5.286585777108111e-04, -1.456402540213923e-02, -1.259272141241096e-34, -1.395267261030225e-03, -3.508522469624498e-05, -6.802429297418632e-07, -4.816875592257907e-06, -1.513642060090822e-03, -8.501622889405594e-06, -8.501622889405562e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
