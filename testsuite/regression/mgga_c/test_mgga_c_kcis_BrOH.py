
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_kcis_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-5.108289525408384e-02, -5.108332486301413e-02, -5.108380237751538e-02, -5.107673367321808e-02, -5.108313465528504e-02, -5.108313465528504e-02, -4.989970371420865e-02, -4.990189413173982e-02, -4.995703835967443e-02, -4.978149063068562e-02, -4.990133128274370e-02, -4.990133128274370e-02, -3.327137811518538e-02, -3.311676949891423e-02, -2.903623351314519e-02, -2.900750900778091e-02, -3.321525863893253e-02, -3.321525863893253e-02, -1.320905448746859e-02, -1.368631864580525e-02, -4.112112877604779e-02, -8.178978176167280e-03, -1.336300046854920e-02, -1.336300046854920e-02, -1.626916619894725e-04, -1.786417771471250e-04, -1.617919105241228e-03, -3.403546108869978e-05, -1.781298845388987e-04, -1.781298845388987e-04, -4.783305856805876e-02, -4.790890855239907e-02, -4.783835250825354e-02, -4.789745215303466e-02, -4.787527772561014e-02, -4.787527772561014e-02, -2.832898893321349e-02, -2.841944837216273e-02, -2.781699021168928e-02, -2.787966777605209e-02, -2.907390758979180e-02, -2.907390758979180e-02, -3.514502656999263e-02, -5.014845458840970e-02, -3.585413167447703e-02, -4.667590574680892e-02, -3.578697998460256e-02, -3.578697998460256e-02, -4.670457267249603e-03, -1.023699132116776e-02, -4.820506402534008e-03, -7.046984223987238e-02, -6.106988040180718e-03, -6.106988040180718e-03, -3.175042166907907e-05, -4.206375971213758e-05, -3.881824744542321e-05, -2.760086673774445e-03, -4.293070290579826e-05, -4.293070290579824e-05, -4.722895112231148e-02, -3.798917673343116e-02, -4.009320596072138e-02, -4.239941806181295e-02, -4.115071080475566e-02, -4.115071080475566e-02, -5.439649883159085e-02, -2.530408355612507e-02, -2.830590436750799e-02, -3.221100394090572e-02, -3.015538388425638e-02, -3.015538388425639e-02, -5.121073750341786e-02, -1.307148859102138e-02, -1.673602868715981e-02, -2.513058017378460e-02, -2.031942542648872e-02, -2.031942542648873e-02, -2.673874189915311e-02, -1.372881690748704e-03, -2.057112231202252e-03, -2.754155920384007e-02, -4.074521645662458e-03, -4.074521645662481e-03, -2.046645159254695e-04, -4.296039753354988e-06, -1.348375360707850e-05, -4.096103021064302e-03, -3.755788856590723e-05, -3.755788856590710e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_kcis_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.210893806701805e-01, -1.210900148708012e-01, -1.210907976304393e-01, -1.210803639665226e-01, -1.210897333815362e-01, -1.210897333815362e-01, -1.051402903641860e-01, -1.051421099874908e-01, -1.051854219510569e-01, -1.050010468121682e-01, -1.051419724077162e-01, -1.051419724077162e-01, -6.775426921585709e-02, -6.758968091611227e-02, -6.280594763653329e-02, -6.275723719516070e-02, -6.769449365405017e-02, -6.769449365405017e-02, -3.276122802340275e-02, -3.351618357130857e-02, -7.789575702256009e-02, -2.270020612498935e-02, -3.300733364904761e-02, -3.300733364904761e-02, -6.152880420766361e-04, -6.745125618636839e-04, -4.815136760803928e-03, -1.283280576641366e-04, -6.726238645055715e-04, -6.726238645055715e-04, -1.032977358718715e-01, -1.033632548680530e-01, -1.033016088747718e-01, -1.033527029793029e-01, -1.033351621586993e-01, -1.033351621586993e-01, -6.990831073746008e-02, -7.012220895776637e-02, -6.901504430373562e-02, -6.917300697202856e-02, -7.122056945022580e-02, -7.122056945022580e-02, -6.530367004605912e-02, -7.443206265320267e-02, -6.568860853038172e-02, -7.199297492258465e-02, -6.598704128213530e-02, -6.598704128213530e-02, -1.343640652594695e-02, -2.775524203103278e-02, -1.378503084914132e-02, -1.058049189563851e-01, -1.750988475794851e-02, -1.750988475794851e-02, -1.207027403415795e-04, -1.589790109959464e-04, -1.475764464906669e-04, -8.453294093956443e-03, -1.615028843859886e-04, -1.615028843859885e-04, -7.084882642362648e-02, -6.707439754215384e-02, -6.827061561018295e-02, -6.931595651572389e-02, -6.878064571020998e-02, -6.878064571020998e-02, -7.184763192084558e-02, -5.400204263104191e-02, -5.735967796247143e-02, -6.129580640311297e-02, -5.927277679049336e-02, -5.927277679049336e-02, -7.602295353741359e-02, -3.343420882831901e-02, -3.977635846607291e-02, -5.138729643698234e-02, -4.509856399277647e-02, -4.509856399277646e-02, -5.512727267609906e-02, -4.488572286087374e-03, -6.539741871272203e-03, -5.275196222193917e-02, -1.165259270964030e-02, -1.165259270964039e-02, -7.603810533924384e-04, -1.620073903418453e-05, -5.165677285615822e-05, -1.167595985495945e-02, -1.411812914660251e-04, -1.411812914660245e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_kcis_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [2.711669924978182e-10, 2.711726025787291e-10, 2.711850819276243e-10, 2.710936842379732e-10, 2.711700533533151e-10, 2.711700533533151e-10, 1.092455388764279e-06, 1.092648523442010e-06, 1.097869172030258e-06, 1.089467704399384e-06, 1.092522577750662e-06, 1.092522577750662e-06, 1.358025483904513e-03, 1.349466922088253e-03, 1.126618800037803e-03, 1.113236009803444e-03, 1.354983624853105e-03, 1.354983624853105e-03, 2.017597266081699e-01, 2.050614067160010e-01, 7.417099531187176e-04, 2.509950307425786e-01, 2.028992767887886e-01, 2.028992767887886e-01, 2.261491064701872e+01, 2.159048355003018e+01, 1.672615116559598e+00, 3.449572134280437e+01, 2.265472158962485e+01, 2.265472158962486e+01, 4.009233390785215e-07, 4.042495675993758e-07, 4.012656927547066e-07, 4.038510956628612e-07, 4.026177214493134e-07, 4.026177214493134e-07, 6.703866869922399e-06, 6.696224704851655e-06, 6.536869633339382e-06, 6.531977744556234e-06, 6.923765855103837e-06, 6.923765855103837e-06, 6.366735399955489e-03, 1.151117346529566e-02, 7.075054576668009e-03, 1.180054908605789e-02, 6.324685023282627e-03, 6.324685023282627e-03, 3.385851498681805e-01, 9.269605779358334e-02, 3.914267104414583e-01, 5.789504997361022e-05, 3.352509474093109e-01, 3.352509474093109e-01, 3.794612417600016e+01, 3.316155851158540e+01, 1.258917048671858e+02, 9.648549183944807e-01, 5.361899783103167e+01, 5.361899783103160e+01, 6.974173817194992e-02, 3.201631109828483e-02, 4.001710759882354e-02, 4.927233451982251e-02, 4.419156101018397e-02, 4.419156101018396e-02, 6.745807114683314e-02, 8.174159286014752e-03, 1.065837469576474e-02, 1.567972785079986e-02, 1.263265741570438e-02, 1.263265741570437e-02, 8.123779977627246e-03, 5.362815642128050e-02, 4.054343522263108e-02, 3.091540380379473e-02, 3.609263545843301e-02, 3.609263545843302e-02, 1.115843795282539e-02, 1.732256609871615e+00, 9.563514646863535e-01, 5.575540959276121e-02, 6.908632422814737e-01, 6.908632422814768e-01, 1.447062717782225e+01, 2.117791653106700e+02, 9.535183807477780e+01, 8.771359495811442e-01, 9.209373514211724e+01, 9.209373514211715e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_kcis_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_kcis_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-2.225524093233553e-05, -2.225606336584070e-05, -2.225993513366374e-05, -2.224658901891467e-05, -2.225567137342321e-05, -2.225567137342321e-05, -1.103375732091161e-04, -1.103792504492630e-04, -1.116559114576832e-04, -1.114665926149092e-04, -1.103460345943615e-04, -1.103460345943615e-04, -7.283621680240627e-04, -7.256017681805308e-04, -6.558702645251053e-04, -7.312747927454519e-04, -7.274869677580036e-04, -7.274869677580036e-04, -8.451890582413728e-03, -8.864042046265289e-03, -1.952087087446241e-04, -1.814839427557602e-03, -8.559457157853992e-03, -8.559457157853992e-03, -6.520743771053141e-05, -7.098736100182228e-05, -4.173045158383965e-04, -5.331531920572384e-06, -7.270089298099212e-05, -7.270089298099205e-05, -6.579539736358970e-04, -6.651501539209406e-04, -6.587768376844056e-04, -6.643663644394170e-04, -6.615062958221275e-04, -6.615062958221275e-04, -3.305245846997200e-04, -3.502088061932362e-04, -3.246795444210554e-04, -3.401509042580949e-04, -3.517982207702240e-04, -3.517982207702240e-04, -7.104518826578664e-03, -7.638906564943958e-03, -4.910092185736995e-03, -5.075563413635466e-03, -8.930338841720708e-03, -8.930338841720708e-03, -1.175694108567538e-03, -3.465186296566840e-03, -1.328503650732902e-03, -4.822266509447020e-04, -2.163667474420553e-03, -2.163667474420553e-03, -7.566986639277331e-06, -8.175181896509264e-06, -1.802808770837988e-05, -5.259091259979057e-04, -8.356549398612751e-06, -8.356549398612739e-06, -1.040316096211166e-01, -7.153947775580957e-02, -8.336438324649990e-02, -9.365676020884105e-02, -8.842824010448443e-02, -8.842824010448443e-02, -4.085605780887295e-02, -1.105656732477181e-02, -1.687103482894834e-02, -2.706049064487966e-02, -2.088503256970472e-02, -2.088503256970471e-02, -5.072386075832423e-03, -4.714676000696310e-03, -5.889650691753298e-03, -7.557264545373913e-03, -7.471438111674142e-03, -7.471438111674143e-03, -7.427570894310440e-03, -3.366604214812234e-04, -5.191703548342757e-04, -1.073302435092718e-02, -1.349060995780660e-03, -1.349060995780665e-03, -3.492225523165818e-05, -6.797098630260177e-07, -4.815382164844981e-06, -1.458581566934724e-03, -8.482594563273369e-06, -8.482594563273335e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
