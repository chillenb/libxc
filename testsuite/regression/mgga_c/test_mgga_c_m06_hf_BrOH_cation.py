
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m06_hf_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_hf", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.625897567139046e-01, -1.625916757703248e-01, -1.625982202068317e-01, -1.625697589796816e-01, -1.625849535747581e-01, -1.625849535747581e-01, -8.677666127048611e-02, -8.678721521444316e-02, -8.703909638391161e-02, -8.668968409389410e-02, -8.682943872351251e-02, -8.682943872351251e-02, -3.366406927661098e-02, -3.310805545264361e-02, -1.794065099513165e-02, -1.753913695732523e-02, -2.469211152368522e-02, -2.469211152368522e-02, 2.705073996556506e-02, 2.564887241174318e-02, -6.243279165194893e-02, 9.982185087458184e-03, -9.858451245018496e-03, -9.858451245018524e-03, -2.276231609741628e-02, -2.396940404369960e-02, -8.860036566578905e-02, -1.592014098141291e-02, -1.114380572140902e-02, -1.114380572140905e-02, -1.359436574355043e-01, -1.362423818760529e-01, -1.359605902618203e-01, -1.362242102692437e-01, -1.360934934057013e-01, -1.360934934057013e-01, -2.056619633940460e-02, -2.299535704205224e-02, -1.637485341337286e-02, -1.858220762282492e-02, -2.396220002310978e-02, -2.396220002310978e-02, -5.648963160130199e-02, -5.920475582491256e-02, -4.969860285152028e-02, -5.509120271600354e-02, -5.889905929827838e-02, -5.889905929827843e-02, -5.213122866653822e-02, 2.978429118695203e-02, -6.159598589554258e-02, -7.831589910615876e-02, -8.322500350105289e-03, -8.322500350105178e-03, -1.632632284297400e-02, -1.783032035562113e-02, -1.233543047775430e-02, -8.880058095311498e-02, -1.266696912776765e-02, -1.266696912776761e-02, -6.869177932220134e-02, -7.491443659926902e-02, -7.410491807670053e-02, -7.251378741810424e-02, -7.343367682745425e-02, -7.343367682745425e-02, -5.587271992840788e-02, -3.379269646635991e-02, -5.036146726383084e-02, -6.485040113489932e-02, -5.810523473779808e-02, -5.810523473779808e-02, -5.943684587041285e-02, 3.244593494574910e-02, 2.081148335173744e-02, -2.090935029727181e-02, 1.266515273654956e-03, 1.266515273654956e-03, -3.028616437571657e-02, -8.329839364842093e-02, -9.635726256384876e-02, -3.343734191831088e-02, -5.872363500340105e-02, -5.872363500340147e-02, -3.983254983815862e-02, -7.525250538551681e-03, -8.538659685311893e-03, -6.096293000896752e-02, -1.203477972775680e-02, -1.203477972775683e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m06_hf_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_hf", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.094528979237502e-01, -3.094568551827175e-01, -3.094476943569803e-01, -3.094545315533128e-01, -3.094495676277141e-01, -3.094433234431892e-01, -3.094893431828841e-01, -3.095156475516170e-01, -3.094396276563200e-01, -3.095031812361725e-01, -3.094396276563200e-01, -3.095031812361725e-01, -2.152235824420510e-01, -2.151932270872099e-01, -2.151843146365212e-01, -2.151754674789718e-01, -2.147258696815708e-01, -2.143512377332843e-01, -2.159131399918540e-01, -2.157981443702565e-01, -2.167325414526024e-01, -2.138043530534779e-01, -2.167325414526024e-01, -2.138043530534779e-01, -1.515585481048073e-01, -1.527454103773913e-01, -1.513678661107691e-01, -1.535544295590564e-01, -1.640854021244953e-01, -1.495176040658512e-01, -1.615309992259014e-01, -1.634353729417451e-01, -1.859553636512195e-01, -8.107991180752905e-02, -1.859553636512195e-01, -8.107991180752905e-02, -2.799483919216650e-02, -1.164194311473032e-02, -3.929888969025580e-02, -1.959559008010686e-02, -5.095843280142809e-02, -9.283322224782214e-02, 1.215505527268845e-01, 7.546161175814747e-02, 9.529674746680895e-02, -1.384408754877559e-02, 9.529674746680895e-02, -1.384408754877739e-02, -6.201846380030115e-02, -5.655092613892861e-02, -6.508199298640241e-02, -5.860976135649199e-02, -1.583337835720051e-01, -1.465861248436483e-01, -3.744229092120403e-02, -3.826902213155408e-02, -3.283991495174508e-02, -6.809647076848738e-02, -3.283991495174503e-02, -6.809647076848413e-02, -2.089253288376848e-01, -2.091806235311895e-01, -2.081218420077693e-01, -2.084196663113230e-01, -2.089008743629456e-01, -2.091794869647354e-01, -2.082218002799042e-01, -2.084760360169997e-01, -2.084952052941405e-01, -2.087947239067007e-01, -2.084952052941405e-01, -2.087947239067007e-01, -2.340625210397331e-01, -2.327183788331004e-01, -2.333405020398599e-01, -2.324653786302177e-01, -2.300767439628572e-01, -2.283997786569297e-01, -2.297677555406092e-01, -2.277906053594594e-01, -2.344023587167851e-01, -2.352279503906477e-01, -2.344023587167851e-01, -2.352279503906477e-01, -1.203435281480692e-01, -1.196097636644962e-01, -4.879029036709221e-02, -4.704562436854857e-02, -1.417254331653973e-01, -1.046059978469826e-01, -5.803796086815954e-02, -3.573345501797776e-02, -9.699403739615747e-02, -1.282239564304512e-01, -9.699403739615758e-02, -1.282239564304509e-01, 7.004947747929920e-02, 7.657955685649094e-02, 5.888466225744099e-02, 6.289069198693858e-02, 5.575952871351327e-02, 4.696839709026999e-02, -6.131695540098660e-02, -6.150185325382941e-02, 1.145459446534033e-01, 1.154387603429385e-01, 1.145459446534035e-01, 1.154387603429379e-01, -3.212095368345542e-02, -3.041730520747460e-02, -3.808193938793041e-02, -3.738026736568563e-02, -3.049373431021944e-02, -2.814788208579295e-02, -5.677445802192856e-02, -7.033256327098449e-02, -4.473138743354774e-02, -2.768447356808980e-02, -4.473138743354937e-02, -2.768447356809017e-02, -5.997759272922523e-02, -5.830821226649602e-02, -6.781037981135679e-02, -6.561589436683739e-02, -6.259578019102784e-02, -6.056033102735663e-02, -5.994993382864061e-02, -5.815462550538159e-02, -6.101701092206567e-02, -5.911284082440443e-02, -6.101701092206567e-02, -5.911284082440446e-02, -6.183356525552072e-02, -6.024717659557073e-02, -1.480707831228511e-01, -1.451590802065478e-01, -1.386153352534469e-01, -1.351986526096258e-01, -1.054145210516911e-01, -1.032491816430755e-01, -1.247195679108026e-01, -1.224075508181347e-01, -1.247195679108026e-01, -1.224075508181346e-01, -4.978703533610498e-02, -4.574371679267797e-02, -1.220613119750003e-02, -7.773055345968949e-03, -7.961026427561224e-02, -7.349582903744267e-02, -1.363251541529956e-01, -1.353891764213691e-01, -1.183308012543747e-01, -1.185557643814581e-01, -1.183308012543755e-01, -1.185557643814590e-01, -1.500224969188939e-01, -1.423547671013877e-01, -1.569443154511086e-01, -1.549946318266874e-01, -1.340700110548202e-01, -1.282572720867090e-01, -1.351122216973340e-01, -1.103395044187628e-01, 3.549104873019218e-02, 3.397609781097841e-02, 3.549104873018603e-02, 3.397609781097297e-02, -8.222072819076226e-02, -7.806204939927987e-02, -1.209818628086297e-02, -1.226376002882572e-02, -2.307029421948575e-02, -2.115479545625102e-02, 2.092107782304940e-02, 1.034898901488251e-03, -4.058198908714028e-02, -2.635864030369920e-02, -4.058198908714002e-02, -2.635864030369955e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_hf_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_hf", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([4.822878585043196e-10, 0.000000000000000e+00, 4.823132681549566e-10, 4.822482535012804e-10, 0.000000000000000e+00, 4.822830352581439e-10, 4.821785853956179e-10, 0.000000000000000e+00, 4.821709197071018e-10, 4.826447925097515e-10, 0.000000000000000e+00, 4.827430946812905e-10, 4.823020682376076e-10, 0.000000000000000e+00, 4.825234757349162e-10, 4.823020682376076e-10, 0.000000000000000e+00, 4.825234757349162e-10, 3.381730735967502e-06, 0.000000000000000e+00, 3.387963869668874e-06, 3.380450011546613e-06, 0.000000000000000e+00, 3.387713895539183e-06, 3.367313865916738e-06, 0.000000000000000e+00, 3.363865569211043e-06, 3.389079263191980e-06, 0.000000000000000e+00, 3.393638874745923e-06, 3.414528489695758e-06, 0.000000000000000e+00, 3.349563654283710e-06, 3.414528489695758e-06, 0.000000000000000e+00, 3.349563654283710e-06, 9.345286170514848e-03, 0.000000000000000e+00, 9.959551954741797e-03, 9.288822888654060e-03, 0.000000000000000e+00, 1.009904379046041e-02, 1.120873434686626e-02, 0.000000000000000e+00, 9.454579000555819e-03, 9.719534512240462e-03, 0.000000000000000e+00, 9.989975316592240e-03, 1.737060498805304e-02, 0.000000000000000e+00, 2.811475375468766e-03, 1.737060498805304e-02, 0.000000000000000e+00, 2.811475375468766e-03, 1.230125301693336e+00, 0.000000000000000e+00, 2.489789618193484e-02, 1.392177927370149e+00, 0.000000000000000e+00, 9.043513243001122e-02, 3.953736076837388e-03, 0.000000000000000e+00, 5.019689639165423e-03, 5.016501997149121e-01, 0.000000000000000e+00, -9.437726493829744e-02, -3.319237237768119e+00, 0.000000000000000e+00, 5.250282027759443e+01, -3.319237237768108e+00, 0.000000000000000e+00, 5.250282027759406e+01, 2.510340810355399e+04, 0.000000000000000e+00, 2.201601653090731e+04, 2.303419393498799e+04, 0.000000000000000e+00, 1.992855958004076e+04, 2.403859695840952e+02, 0.000000000000000e+00, 2.164020404196949e+02, 6.544571432190139e+04, 0.000000000000000e+00, 6.821686575774525e+04, 3.154899724161526e+04, 0.000000000000000e+00, 1.397665359879370e+05, 3.154899724161525e+04, 0.000000000000000e+00, 1.397665359879300e+05, 3.780836191719440e-08, 0.000000000000000e+00, 3.862741017627095e-08, 2.308884810126231e-08, 0.000000000000000e+00, 2.434196166285753e-08, 3.714683031763158e-08, 0.000000000000000e+00, 3.822968832043027e-08, 2.447548611891876e-08, 0.000000000000000e+00, 2.529575456467393e-08, 3.022325611108011e-08, 0.000000000000000e+00, 3.144199953807058e-08, 3.022325611108011e-08, 0.000000000000000e+00, 3.144199953807058e-08, 4.102496649484669e-05, 0.000000000000000e+00, 4.059051970119521e-05, 3.980690800862768e-05, 0.000000000000000e+00, 3.952685893409382e-05, 3.855689018641164e-05, 0.000000000000000e+00, 3.941391845442444e-05, 3.757674481955834e-05, 0.000000000000000e+00, 3.831673165161799e-05, 4.237650605154338e-05, 0.000000000000000e+00, 3.959790060823313e-05, 4.237650605154338e-05, 0.000000000000000e+00, 3.959790060823313e-05, 1.209800611518116e-02, 0.000000000000000e+00, 1.198971120832839e-02, -2.396340074605787e-02, 0.000000000000000e+00, -2.510196490096213e-02, 2.410147278613468e-02, 0.000000000000000e+00, 1.578247518676301e-02, -2.083951647527696e-02, 0.000000000000000e+00, -2.201713667273772e-02, 6.867696089587067e-03, 0.000000000000000e+00, 1.153800247412690e-02, 6.867696089587110e-03, 0.000000000000000e+00, 1.153800247412689e-02, 1.975295355603888e+00, 0.000000000000000e+00, 9.254527902426081e-01, 9.128391058621847e-02, 0.000000000000000e+00, 9.053900704838884e-03, 4.580705489164528e+00, 0.000000000000000e+00, 1.876908976807811e+00, -9.274541512364906e-05, 0.000000000000000e+00, -9.305728296662515e-05, 2.721182572671447e+00, 0.000000000000000e+00, -4.164844863247455e+00, 2.721182572671422e+00, 0.000000000000000e+00, -4.164844863247451e+00, 1.036334584914465e+05, 0.000000000000000e+00, 9.155549234871923e+04, 6.924821225640795e+04, 0.000000000000000e+00, 6.294006554951876e+04, 3.465937020865553e+05, 0.000000000000000e+00, 3.210843508559624e+05, 3.430770550946129e+01, 0.000000000000000e+00, 4.043029671129224e+01, 1.437020542026492e+05, 0.000000000000000e+00, 1.295888959628193e+05, 1.437020542026673e+05, 0.000000000000000e+00, 1.295888959628208e+05, -1.753634958316417e-01, 0.000000000000000e+00, -1.772577874864260e-01, -7.229887382639774e-02, 0.000000000000000e+00, -7.345168399611508e-02, -1.000933178419323e-01, 0.000000000000000e+00, -1.015302345016360e-01, -1.298822719011356e-01, 0.000000000000000e+00, -1.309864529185492e-01, -1.141510326675845e-01, 0.000000000000000e+00, -1.154279119090965e-01, -1.141510326675845e-01, 0.000000000000000e+00, -1.154279119090965e-01, -1.205077504335920e-01, 0.000000000000000e+00, -1.243948922494600e-01, 3.444737492773998e-02, 0.000000000000000e+00, 3.381238560413891e-02, 3.076564896154572e-02, 0.000000000000000e+00, 3.001678310990126e-02, 6.240793799951425e-03, 0.000000000000000e+00, 5.596932219793648e-03, 2.278767976724327e-02, 0.000000000000000e+00, 2.207896570710125e-02, 2.278767976724333e-02, 0.000000000000000e+00, 2.207896570710125e-02, -1.570850154773767e-02, 0.000000000000000e+00, -1.699161450197202e-02, 1.697338726637001e-01, 0.000000000000000e+00, 1.236695757322641e-01, 2.219715431536617e-01, 0.000000000000000e+00, 1.892479589957672e-01, 1.736876261763250e-01, 0.000000000000000e+00, 1.716489469041547e-01, 2.087973380155542e-01, 0.000000000000000e+00, 2.133981370331630e-01, 2.087973380155553e-01, 0.000000000000000e+00, 2.133981370331638e-01, 5.280307284330815e-02, 0.000000000000000e+00, 4.990796695313742e-02, 2.711797234240637e+02, 0.000000000000000e+00, 2.632880819409431e+02, 9.533427958714707e+01, 0.000000000000000e+00, 8.854060525028699e+01, 2.461833129739690e-01, 0.000000000000000e+00, 1.866294974400658e-01, 1.286001567484675e+01, 0.000000000000000e+00, 3.534162173232897e+00, 1.286001567484889e+01, 0.000000000000000e+00, 3.534162173234208e+00, 7.832450776191605e+03, 0.000000000000000e+00, 7.178043396703323e+03, 1.207004539228110e+06, 0.000000000000000e+00, 1.198443481650281e+06, 4.496663652438671e+05, 0.000000000000000e+00, 4.060018148232311e+05, 1.384018074140713e+01, 0.000000000000000e+00, 1.616975321953471e+01, 2.590099238382548e+05, 0.000000000000000e+00, 1.592974489239489e+05, 2.590099238382586e+05, 0.000000000000000e+00, 1.592974489239497e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_hf_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_hf", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.446880624936254e-05, 2.447640717282102e-05, 2.447105996232356e-05, 2.447844695639853e-05, 2.447773800947721e-05, 2.448608487171414e-05, 2.444714564786833e-05, 2.445305411518467e-05, 2.446562406856781e-05, 2.446857600264552e-05, 2.446562406856781e-05, 2.446857600264552e-05, 1.157372449492940e-04, 1.144777615274690e-04, 1.158429553432382e-04, 1.144977750864903e-04, 1.174462036825564e-04, 1.162750801197094e-04, 1.171820082774032e-04, 1.157669359780959e-04, 1.177010813091314e-04, 1.151062802824151e-04, 1.177010813091314e-04, 1.151062802824151e-04, -1.637252027312896e-03, -2.321168451407341e-03, -1.600610973217223e-03, -2.445295829130285e-03, -3.565283816640475e-03, -2.495373375913715e-03, -2.237857518457440e-03, -2.472737520764070e-03, -8.849996593155848e-03, 1.565215297921891e-03, -8.849996593155848e-03, 1.565215297921891e-03, -1.187061463136905e-02, 3.414053169836904e-02, -1.236781516904613e-02, 3.641409888564550e-02, -4.512525497414300e-03, -5.063283463322492e-03, -7.251086687944440e-02, -4.270029936507035e-02, 1.358125184297553e-01, -4.233853345730128e-01, 1.358125184297547e-01, -4.233853345730136e-01, -3.948523957437718e-02, -4.175286857275706e-02, -4.140588957238595e-02, -4.430954200028803e-02, -8.556413342718394e-02, -8.693356228365652e-02, -1.989667533681168e-02, -2.009686295938240e-02, -3.415464010395812e-02, -2.316777804251407e-02, -3.415464010395805e-02, -2.316777804251409e-02, 8.317465183456894e-04, 8.325826383658960e-04, 8.487028972097132e-04, 8.490915605834791e-04, 8.328045776788782e-04, 8.332958949580475e-04, 8.474298783509687e-04, 8.481987791275702e-04, 8.402511593837271e-04, 8.408339890758396e-04, 8.402511593837271e-04, 8.408339890758396e-04, 6.671030630453537e-04, 6.746734785613072e-04, 6.770491736730102e-04, 6.838747586907175e-04, 7.609138911988189e-04, 6.967590170683432e-04, 7.740008093025058e-04, 7.098528301482138e-04, 5.668428665471897e-04, 7.317076375994417e-04, 5.668428665471897e-04, 7.317076375994417e-04, 5.253845040678281e-03, 5.414894926120278e-03, 1.264984321486108e-02, 1.323397210617977e-02, 5.442295606100971e-03, 2.008977443406894e-03, 5.071616615112857e-03, 3.168763334416346e-03, 4.870355922408153e-03, 8.205872678919347e-03, 4.870355922408153e-03, 8.205872678919346e-03, -8.893941914108131e-02, -8.253156987454606e-02, -1.917707108801939e-02, -1.621145600831221e-02, -1.020364381891390e-01, -7.662677681192977e-02, 3.916197975680228e-04, 3.961604608338535e-04, -1.168848969640045e-01, -3.262354919688831e-02, -1.168848969640043e-01, -3.262354919688838e-02, -9.577014603433326e-03, -9.789202143143140e-03, -1.662193858726988e-02, -1.544276243142560e-02, -3.915440793251886e-02, -4.275768928400195e-02, -9.722490441499265e-02, -1.047153416978828e-01, -1.071487137689039e-02, -4.457567313873012e-02, -1.071487137689042e-02, -4.457567313873020e-02, 1.805762346980420e-01, 1.840419669755360e-01, 1.081937488384142e-01, 1.103418839637135e-01, 1.340301106315937e-01, 1.368930605693231e-01, 1.577550749349543e-01, 1.606554062618406e-01, 1.457931280649104e-01, 1.486907422757985e-01, 1.457931280649104e-01, 1.486907422757984e-01, 6.114060684181211e-02, 6.375199523283945e-02, 5.056745254251272e-03, 4.444576489097838e-03, 5.553617060395801e-03, 4.956935579752098e-03, 2.209973001473874e-02, 2.196049159598824e-02, 1.026028762829479e-02, 9.992867791080157e-03, 1.026028762829481e-02, 9.992867791080174e-03, 7.861719322100403e-03, 8.265434933061177e-03, 5.306646430686643e-03, 8.283438420126328e-03, 1.087790614819916e-02, 1.344039046000916e-02, 5.840725032187718e-03, 5.244252858134042e-03, 1.100699768813175e-02, 1.044139648654376e-02, 1.100699768813153e-02, 1.044139648654360e-02, 5.504974710224191e-03, 4.488504007926357e-03, -9.082128255969661e-02, -8.896665594428571e-02, -9.066320766096220e-02, -8.873623412526009e-02, 8.569526608207655e-03, 5.790181108785874e-03, -1.281299370915047e-01, -9.024666904541478e-02, -1.281299370915049e-01, -9.024666904541490e-02, -2.839954484718563e-02, -2.840826245319243e-02, -3.193841914300194e-03, -2.394788665314962e-03, -2.125418373312735e-02, -2.302485597075245e-02, -1.198780665097336e-01, -1.174396639302768e-01, -1.834266870113096e-02, -4.218089515733659e-02, -1.834266870113097e-02, -4.218089515733670e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
