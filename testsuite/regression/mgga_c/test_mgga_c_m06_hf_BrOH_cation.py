
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m06_hf_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_hf", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.455433381052653e-01, -1.455428256009769e-01, -1.455408058087805e-01, -1.620961025740948e-01, -1.620962702800018e-01, -1.598837331431301e-01, -1.226872485600035e-01, -3.443909923685340e-02, -3.507447088741156e-02, -3.481861150560572e-02, -3.484469595530093e-02, -1.228267676405179e-01, -9.301450664812438e-02, -1.210202706746140e-01, 3.497076014410361e-02, -1.267393137679521e-01, -9.401629849031265e-02, 3.277743887550755e-02, -1.010149321155442e-01, -9.744974455286021e-02, -1.864907217437971e-01, 9.366507807005708e-03, -8.598320017443123e-03, -1.056237033971553e-01, -2.251483251360720e-02, -2.375895245672035e-02, -9.215605049466584e-02, -1.383188597549264e-02, -9.780742049361303e-03, -9.780742049361302e-03, -1.359299621230697e-01, -1.362331470680374e-01, -1.359473802052333e-01, -1.362148484021717e-01, -1.236704617714518e-01, -1.236844299380004e-01, -1.231999490179259e-02, -1.587707930619486e-02, -9.492475466991834e-03, -1.272913702174427e-02, -1.137201373932604e-01, -1.566565830040301e-02, -6.342717324075051e-02, -6.653078310212829e-02, -2.599177450577078e-02, -4.306329089815275e-02, -6.447211547316242e-02, -4.733926008470074e-02, -4.934270607424504e-02, -1.387279650549904e-01, -5.739298800851547e-02, -7.318980446623929e-02, -8.870536239606541e-03, -8.870536239606486e-03, -1.091895363011699e-02, -1.354976885115808e-02, -1.048161101308274e-02, -1.255571063108549e-01, -1.039682685882277e-02, -1.039682685882276e-02, -8.673152099172388e-02, -8.099810100653632e-02, -5.300997681879877e-02, -6.909759664870412e-02, -5.285778807518327e-02, -6.881510281579843e-02, -8.510131292060354e-02, -6.125589912391297e-02, -6.011840066995106e-02, -6.334450037649711e-02, -5.534979747089275e-02, -6.079790318742810e-02, -6.586871365268508e-02, 3.297328918796250e-02, -9.226209966546456e-02, -6.370079026046854e-02, 7.882288868205078e-03, -7.230986800072198e-02, -2.035770559496342e-02, -2.535695121888842e-02, -8.608431927289154e-02, -1.907685852267921e-02, -5.522251799726532e-02, -5.522251799726485e-02, -4.673861195980400e-03, -3.889569064290819e-03, -1.107546998125593e-03, -6.366035742316538e-02, -1.002119510561392e-02, -1.020067113626379e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m06_hf_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_hf", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.228512974171630e-01, -1.228323604343789e-01, -1.228508361803407e-01, -1.228335867534956e-01, -1.228566453478119e-01, -1.228309511759086e-01, -1.032386672755284e-01, -2.744530067447338e-01, -1.032446859048781e-01, -2.744583600049122e-01, -3.285743843414169e-01, -3.285724637563731e-01, -6.273999312023959e-02, 1.452934601868872e-02, -2.585382728549566e-01, -2.585852020015438e-01, -2.589242700876488e-01, -2.588097788102302e-01, -2.587577588836147e-01, -2.587430680754468e-01, -2.593897440797681e-01, -2.581222923474802e-01, 1.286100216753189e-02, -6.293109625999305e-02, -4.924276736148114e-02, -4.110293767991691e-02, 1.021528620459340e-01, 7.619429620057672e-02, -7.476431499405300e-02, -8.377365840396278e-02, 5.649553846184874e-02, 1.195490641562373e-01, -1.728901194318982e-03, -9.471654702494478e-02, -4.656616926381274e-02, -1.401252911397183e-01, 8.374662887207607e-02, 3.133994376239541e-02, 7.920687293596435e-02, 4.737530714888749e-02, -2.058598789364364e-01, 2.111350884954321e-01, 1.095257197575940e-01, 1.182575624599724e-01, 1.317892857097414e-01, 3.018488667409696e-01, 1.862602508005451e-01, -5.974634542848634e-02, -6.193383279880038e-02, -5.651531200756629e-02, -3.613107526384393e-02, -5.846785081372653e-02, -1.506171797828239e-01, -1.691542355547301e-01, -3.683242781668486e-02, -3.775438976519922e-02, -3.260081482910679e-02, -6.715457695921956e-02, -3.260081482910662e-02, -6.715457695921818e-02, -2.105634989421560e-01, -2.107363376570988e-01, -2.097538343192054e-01, -2.099685892116384e-01, -2.105018618581282e-01, -2.107072534918135e-01, -2.098186263925192e-01, -2.099989365745438e-01, -9.026599539071865e-02, -1.898423834592050e-01, -1.896607881317283e-01, -9.044779636696801e-02, -2.112018883937561e-01, -2.109180533368262e-01, -2.142294964612402e-01, -2.142569897242356e-01, -2.098158629758680e-01, -2.069680363083619e-01, -2.129059234569871e-01, -2.100181582467805e-01, -8.396456903284499e-03, 3.269462275826496e-02, -2.111914684012182e-01, -2.169570805905938e-01, -9.746956529851095e-02, -2.905529983474311e-02, -1.355579871277328e-01, -1.321696538522706e-01, -1.656057873430010e-01, -1.357429113040742e-01, -1.637655989722248e-01, -1.386464326361787e-01, -8.985219353576149e-02, -4.856469913186914e-02, -1.353002759623658e-01, -1.699917655082948e-01, 4.310129319635200e-02, 4.099491882083706e-02, 1.054500433657393e-01, -2.121246317219315e-01, 2.271159102546119e-02, 1.133041387408221e-02, -2.168876171683436e-01, -2.171102777971951e-01, 1.100844383576605e-01, 1.090018478865026e-01, 1.100844383576560e-01, 1.090018478865031e-01, -1.558950720320365e-02, -2.890202342253919e-02, -3.697858915452520e-02, -3.616994598504391e-02, -3.001651867740582e-02, -2.762678812526228e-02, -1.983377223977296e-01, -1.940235513230866e-01, -4.283509181340241e-02, -2.755690475935837e-02, -4.283509181340012e-02, -2.755690475935831e-02, -6.836361691137351e-02, -6.611812052231691e-02, -8.686905591618704e-02, -8.420328343995068e-02, -5.712034657763387e-02, -5.523537828299169e-02, -5.692746719599784e-02, -7.055521976093213e-02, -5.720362616180382e-02, -5.535671284012787e-02, -5.674113864496358e-02, -7.285144126461637e-02, -7.000009387538951e-02, -6.786377827073933e-02, -7.400075136806758e-02, -1.600015590335729e-02, -1.032985792897606e-01, -3.337377472098574e-02, -1.257047374130647e-01, -1.235959429184665e-01, -1.370752895960820e-01, -1.346213028801684e-01, -1.089995120145568e-01, -4.024106833278783e-02, -1.205887776061891e-01, -4.384097536611840e-02, -3.322229853616854e-03, 9.441249379807948e-04, 8.108933938916058e-02, 4.773312486603415e-02, 1.882348225440622e-02, 6.085911557430213e-04, -9.607101470752832e-02, -9.583697243588074e-02, 3.393949216077397e-02, 4.634344533887563e-02, -1.418378272032376e-01, -1.360739643058698e-01, -4.644003655681761e-02, -4.767020114457354e-02, -1.479778364031408e-01, -1.432885046732067e-01, -1.312354206865108e-01, -1.164311183558491e-01, 1.465976873480246e-02, 2.133443822666059e-03, 1.465976873480027e-02, 2.133443822660258e-03, -6.840376446966051e-03, -6.528396958115712e-03, -1.110088116277950e-02, -1.106533425958800e-02, -1.643370200478968e-03, -1.343701068571211e-03, -8.038844924363907e-02, -9.017452150937182e-02, -3.903447656540176e-02, -2.623697019516247e-02, -3.899333119981176e-02, -8.681567000091416e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_hf_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_hf", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [5.413625556860197e-09, 0.000000000000000e+00, 5.413064151731448e-09, 5.413469857617561e-09, 0.000000000000000e+00, 5.412953847915402e-09, 5.412993744505576e-09, 0.000000000000000e+00, 5.412251128707186e-09, 5.914741334378768e-09, 0.000000000000000e+00, 1.384780728109456e-10, 5.913378065996059e-09, 0.000000000000000e+00, 1.384051997695319e-10, 5.786656321325720e-10, 0.000000000000000e+00, 5.786837804604256e-10, -2.340245123301648e-06, 0.000000000000000e+00, 5.038834670907441e-05, 2.550049324342938e-06, 0.000000000000000e+00, 2.548592088855764e-06, 2.566973617396645e-06, 0.000000000000000e+00, 2.572075472726202e-06, 2.560425661410617e-06, 0.000000000000000e+00, 2.560077259283928e-06, 2.540798645144032e-06, 0.000000000000000e+00, 2.584366261219639e-06, 5.039305956466725e-05, 0.000000000000000e+00, -2.326604311602205e-06, 1.102346700331910e-01, 0.000000000000000e+00, 1.075471273703320e-01, 1.483262690898810e-01, 0.000000000000000e+00, -7.558407865970766e-03, 1.280474450507610e-03, 0.000000000000000e+00, 1.680231960870359e-03, -7.096659511337460e-03, 0.000000000000000e+00, 1.625493973219914e-01, 1.037482801901499e-01, 0.000000000000000e+00, 1.442330902104091e-01, 1.784271847736503e-04, 0.000000000000000e+00, 3.955229871327844e-03, 8.877277929340904e+01, 0.000000000000000e+00, -2.343171903320179e+00, 8.304620448506790e+01, 0.000000000000000e+00, -2.549995886972578e+00, 4.658743578691131e-04, 0.000000000000000e+00, 7.564191897777181e-02, 2.503006605964009e-01, 0.000000000000000e+00, -1.276688289552518e+00, -3.722004114097750e+00, 0.000000000000000e+00, 1.766870991081666e+01, -4.786047240139403e+00, 0.000000000000000e+00, 6.982272755765904e+02, 2.510812572539777e+04, 0.000000000000000e+00, 2.201807606358773e+04, 3.557315409457368e+07, 0.000000000000000e+00, 1.997319706550062e+04, 2.767126258620455e+04, 0.000000000000000e+00, 2.590303003403134e+02, 6.548664242774168e+04, 0.000000000000000e+00, 6.825222567100565e+04, 3.156246093859901e+04, 0.000000000000000e+00, 1.399819223608503e+05, 3.156246093859890e+04, 0.000000000000000e+00, 1.399819223608474e+05, 5.282356820819271e-08, 0.000000000000000e+00, 5.299352468530580e-08, 3.817466050018835e-08, 0.000000000000000e+00, 3.876188778783019e-08, 5.183305218043024e-08, 0.000000000000000e+00, 5.233755115316524e-08, 3.923004469567590e-08, 0.000000000000000e+00, 3.946298846935051e-08, 4.242068795510281e-06, 0.000000000000000e+00, -2.333182948694584e-07, -2.331937401407545e-07, 0.000000000000000e+00, 4.247164244587078e-06, 2.944757579124964e-05, 0.000000000000000e+00, 2.974382247871699e-05, 3.017019468038415e-05, 0.000000000000000e+00, 3.047136878121424e-05, 2.881956754906669e-05, 0.000000000000000e+00, 2.907247545571426e-05, 2.950482910863398e-05, 0.000000000000000e+00, 2.978244177491618e-05, -4.379090130069313e-05, 0.000000000000000e+00, 7.907652921119851e-04, 3.019155496271539e-05, 0.000000000000000e+00, 3.045930579826306e-05, -1.635319916885620e-04, 0.000000000000000e+00, 1.789163569980388e-01, 9.142896386157114e-03, 0.000000000000000e+00, 8.690676203614099e-03, 1.848877526412180e-02, 0.000000000000000e+00, 1.821157569405021e-02, 2.091975379590327e-02, 0.000000000000000e+00, 1.892126896603384e-02, 1.094298311061881e-03, 0.000000000000000e+00, 1.836523516216532e-01, 1.406991897875151e-02, 0.000000000000000e+00, 1.814166304723640e-02, 4.117046624508993e+00, 0.000000000000000e+00, 3.768202339642619e+00, 8.687135823151988e+01, 0.000000000000000e+00, 1.353968371719165e+00, 8.120894773034630e+00, 0.000000000000000e+00, 5.393345186062228e+00, 6.809371493162117e-05, 0.000000000000000e+00, 6.835723422175223e-05, 2.730202706934780e+00, 0.000000000000000e+00, -3.604989887951344e+00, 2.730202706934807e+00, 0.000000000000000e+00, -3.604989887951338e+00, 1.195154121766723e+09, 0.000000000000000e+00, 9.168270248668891e+04, 6.933067360463235e+04, 0.000000000000000e+00, 6.302039986182873e+04, 3.469048536072922e+05, 0.000000000000000e+00, 3.214298308382342e+05, 8.701081349805737e+01, 0.000000000000000e+00, 5.007150656235714e+03, 1.440384622921303e+05, 0.000000000000000e+00, 1.296194729966252e+05, 1.440384622921302e+05, 0.000000000000000e+00, 1.296194729966258e+05, -1.688502356812118e-01, 0.000000000000000e+00, -1.723824769114077e-01, -5.175054268162661e-02, 0.000000000000000e+00, -5.343857573941477e-02, 4.517517200760542e-02, 0.000000000000000e+00, 4.155032721833313e-02, 2.376603395972765e-02, 0.000000000000000e+00, -1.144841791412877e-01, 3.392231003071013e-02, 0.000000000000000e+00, 3.034487113055796e-02, 3.756911628682995e-02, 0.000000000000000e+00, -9.773323379896831e-02, -1.599313150537578e-01, 0.000000000000000e+00, -1.643171468616488e-01, -9.727433884480522e-03, 0.000000000000000e+00, 4.250886525253637e-01, 4.494898202882901e-03, 0.000000000000000e+00, 3.014143212056425e-01, 1.863831736097805e-02, 0.000000000000000e+00, 1.795226541218404e-02, 2.808007789988948e-02, 0.000000000000000e+00, 2.739752261133406e-02, 6.889963474948896e-03, 0.000000000000000e+00, 2.521515989298301e-01, 2.504545827450297e-03, 0.000000000000000e+00, 8.221218685449563e-02, 1.001532563485473e-01, 0.000000000000000e+00, 5.424313192015100e-02, 1.142907657423588e+01, 0.000000000000000e+00, -4.810547988198015e-01, 2.555029697651321e+00, 0.000000000000000e+00, -1.449598539465417e-01, 1.139091368841681e-01, 0.000000000000000e+00, 1.160577748316162e-01, -3.092529907247513e-01, 0.000000000000000e+00, 5.263758636201129e+00, 3.812099382510616e-02, 0.000000000000000e+00, 3.859025331291552e-02, -3.308941133807372e+04, 0.000000000000000e+00, -3.059101180798374e+04, 1.056088571542574e+02, 0.000000000000000e+00, 9.881231817373119e+01, 1.451695774849402e-01, 0.000000000000000e+00, 1.734887508251659e-01, 1.720944866253722e+01, 0.000000000000000e+00, 1.040705752886282e+01, 1.720944866253828e+01, 0.000000000000000e+00, 1.040705752886362e+01, -1.265780546115357e+07, 0.000000000000000e+00, -8.478921086551817e+06, 1.207380695945060e+06, 0.000000000000000e+00, 1.198987198309604e+06, -5.949700328506627e+09, 0.000000000000000e+00, -2.784238662377493e+09, 3.010315871710565e+02, 0.000000000000000e+00, 6.139360370914263e+02, 2.597315389413479e+05, 0.000000000000000e+00, 1.593338740322908e+05, 2.597316710801047e+05, 0.000000000000000e+00, 5.012963144636262e+08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_hf_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_hf", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.848448100803144e-05, -1.848634824586208e-05, -1.848453315439121e-05, -1.848613919363688e-05, -1.848348959158140e-05, -1.848641691176341e-05, -3.718526821097574e-05, 3.988581332142844e-05, -3.718141311093047e-05, 3.989651417928391e-05, 2.160532931303836e-05, 2.160986565144172e-05, 1.146293994089843e-03, -1.536760572886715e-03, 3.020094603075390e-04, 3.026253827148684e-04, 3.005413963867307e-04, 2.986662547264140e-04, 3.006563115809019e-04, 3.006555638326082e-04, 3.093981939151749e-04, 2.917352898930921e-04, -1.526015594467543e-03, 1.139521690304797e-03, -5.396862399955036e-03, -5.962190435503827e-03, -3.057448893546059e-02, 1.700685266751505e-02, 5.284511263818278e-03, 4.757984980301652e-03, 1.578439128597188e-02, -3.228616797624889e-02, -9.027167699733921e-03, -2.018107165267444e-03, 6.951766204674292e-03, 2.242053086516110e-03, -2.488093726762384e-01, 9.284307983857408e-02, -2.448134886076546e-01, 1.011487865956955e-01, 2.274380176999695e-03, -2.340439528563128e-02, -6.498835617276932e-02, -3.305020497002405e-02, 1.538243782244117e-01, -3.656489011594529e-01, 1.547266257795615e-01, -2.960541876001603e-01, -3.996835654768394e-02, -4.197019749759443e-02, 2.606539339385899e-04, -4.496768217788228e-02, 2.991638514418787e-03, -1.043712736715346e-01, -2.252524501495798e-02, -2.232561652206579e-02, -3.544551280625853e-02, -2.920717985205116e-02, -3.544551280625853e-02, -2.920717985205120e-02, 8.281527548312941e-04, 8.290685071566630e-04, 8.451682889919981e-04, 8.456343589459301e-04, 8.292898912975870e-04, 8.298508747714187e-04, 8.439629902681101e-04, 8.448014827763800e-04, -3.894075622441446e-04, 1.003116372008440e-03, 1.002248360330036e-03, -3.889317143896493e-04, 9.989019566739646e-04, 9.822421688897593e-04, 9.549451509052615e-04, 9.419415944648024e-04, 1.044447168305187e-03, 9.973923844152275e-04, 1.010673195352276e-03, 9.597573104124873e-04, 3.213886909605794e-03, -4.341062355474785e-03, 9.164050251716791e-04, 9.856215883469060e-04, 1.726798052818330e-02, -2.428429215538603e-02, 1.185998184879793e-02, 1.269488707558540e-02, 9.118326234445641e-03, 1.775057536637506e-03, 5.771257673738037e-03, 6.889826570697165e-04, 1.316417947689678e-02, -1.973489852703310e-02, 6.506102836184747e-04, 5.556659697826644e-03, -9.555173918731678e-02, -9.083045876012484e-02, -2.050160381848549e-01, -7.415651041386613e-03, -1.112693027225664e-01, -8.591068083716086e-02, 4.370913485060338e-04, 4.370487473182358e-04, -1.177776040170914e-01, -3.183222570933199e-02, -1.177776040170916e-01, -3.183222570933204e-02, 1.715951575613823e-05, -1.493557363828054e-02, -2.124101922008552e-02, -2.019703401430900e-02, -4.449731468630207e-02, -4.892912810665431e-02, -1.405719862736759e-01, -6.746758722137895e-03, -1.970950436861134e-02, -4.577271555581918e-02, -1.970950436861134e-02, -4.577271555581913e-02, 3.130858810610193e-01, 3.212764716386801e-01, 1.216623910804519e-01, 1.245828439919274e-01, -7.934409711731330e-03, -8.457540721981403e-03, -1.048663082643849e-02, 2.226649326834430e-01, -7.927240608287924e-03, -8.445228195673001e-03, -1.076624249587892e-02, 1.946983214008479e-01, 2.800510565630853e-01, 2.883404426983514e-01, 2.660612390960589e-02, -3.584966675888369e-02, 2.034518402156763e-02, -2.745513453621693e-02, 1.789924474497461e-02, 1.779971778141774e-02, 7.525494062963247e-03, 7.226031714997855e-03, 2.070083620832809e-02, -2.357139003535012e-02, 1.424228407109336e-02, -1.598981741845444e-02, 9.089020947684876e-03, 1.231747067026669e-02, -1.379768537273221e-01, 6.633693750834732e-02, -7.790238069916409e-02, 5.680607788260836e-02, 2.214680960086391e-02, 2.178558538761995e-02, 6.879777205887765e-02, -1.063916019189814e-01, 9.441455112804656e-03, 7.251624520092486e-03, 9.362637820289538e-03, 9.748518274145421e-03, -1.023617245136374e-01, -1.008460115382180e-01, 2.017316107680018e-02, 5.067279088394615e-03, -1.367414122652489e-01, -1.018099615974844e-01, -1.367414122652489e-01, -1.018099615974845e-01, 3.160338279609563e-04, 4.435941342589851e-04, -7.193833193318987e-03, -7.192909919395929e-03, 2.050498971303377e-05, 3.993758583640191e-05, 7.381955598112417e-03, 7.909309645061178e-03, -3.020569177712748e-02, -4.334000769609251e-02, -3.024460490578286e-02, 3.028902186351225e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
