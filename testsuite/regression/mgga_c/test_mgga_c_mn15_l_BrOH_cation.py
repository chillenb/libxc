
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_mn15_l_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn15_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-3.690669121499279e-01, -3.690759513788648e-01, -3.691143868230252e-01, -3.689805865071273e-01, -3.690509530181144e-01, -3.690509530181144e-01, 9.628655357245846e-03, 9.595167238464599e-03, 8.743478968235003e-03, 9.445350450588698e-03, 9.219138709519474e-03, 9.219138709519474e-03, -1.682315022673075e-02, -1.609784701438406e-02, 4.022269922826041e-03, 7.223515187785850e-03, 5.555394320662013e-03, 5.555394320662013e-03, 3.508830424924322e-02, 3.287935953574662e-02, -9.211369954444742e-02, 2.108591361659460e-02, 3.179711473785173e-02, 3.179711473785184e-02, -9.924137040569681e-03, -1.034380112089595e-02, -3.191402642088732e-02, -6.231928897438630e-03, -6.463640789449990e-03, -6.463640789449951e-03, -2.648711169009068e-01, -2.637765370507487e-01, -2.648171463062167e-01, -2.638513337051799e-01, -2.643262503599585e-01, -2.643262503599585e-01, 6.141973410309627e-02, 5.725934289561576e-02, 6.659700774303880e-02, 6.302821028400994e-02, 5.652336350259945e-02, 5.652336350259945e-02, -5.005758128474693e-02, -8.917791398061109e-02, -2.543720330450043e-02, -5.463535798048623e-02, -6.070255188072766e-02, -6.070255188072769e-02, -1.151712641510508e-02, 4.299321478488832e-02, -1.616161701163463e-02, -9.546955564626337e-02, 1.250936444345572e-02, 1.250936444345580e-02, -4.956088750883588e-03, -6.110703408609099e-03, -4.801245673231974e-03, -2.935632172502087e-02, -5.347890022313425e-03, -5.347890022313419e-03, -4.136874427512908e-02, -3.727112594603432e-02, -2.494660996578078e-02, -2.275610755776264e-02, -2.253630258776721e-02, -2.253630258776721e-02, -4.406846450024364e-02, -2.112895671816409e-02, -6.531395736827619e-02, -1.014438810986268e-01, -8.763052985958372e-02, -8.763052985958372e-02, -8.360921339997930e-02, 4.722803723869547e-02, 3.451010127204092e-02, -2.902929313301924e-03, 1.641514449769580e-02, 1.641514449769579e-02, -7.028105829990390e-03, -3.152508007183028e-02, -3.350066960965630e-02, -1.697986705524342e-02, -1.600162324960245e-02, -1.600162324960262e-02, -1.320711253073126e-02, -1.845807217589208e-03, -3.640998264067953e-03, -1.774645324799293e-02, -5.048184884208347e-03, -5.048184884208275e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_mn15_l_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn15_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-8.186205030732209e-01, -8.186213237507375e-01, -8.185775454407227e-01, -8.185789293487038e-01, -8.184134429956225e-01, -8.184119128304875e-01, -8.190419694325412e-01, -8.190468229748250e-01, -8.187060505788979e-01, -8.187141730102422e-01, -8.187060505788979e-01, -8.187141730102422e-01, -2.730561407461856e-01, -2.730567133053529e-01, -2.731575757978342e-01, -2.731582301966832e-01, -2.759130114850255e-01, -2.759121273439548e-01, -2.753742004859405e-01, -2.753736132070379e-01, -2.751911008239581e-01, -2.751752885345516e-01, -2.751911008239581e-01, -2.751752885345516e-01, -1.474368481269200e-01, -1.467773555409604e-01, -1.484540550496693e-01, -1.476479117148907e-01, -1.615294560590116e-01, -1.624795838712920e-01, -1.562467555934961e-01, -1.559798253625706e-01, -1.533971694904135e-01, -1.617931225928469e-01, -1.533971694904135e-01, -1.617931225928469e-01, -6.787965126842636e-02, -6.730190346223841e-02, -7.578510551331089e-02, -7.484979522883889e-02, -2.281572308732656e-01, -2.151538280481507e-01, 2.875141297180853e-02, 2.897720624006277e-02, 1.147448583008137e-02, 2.354169836679843e-02, 1.147448583008103e-02, 2.354169836679873e-02, -1.318744515323345e-02, -1.208479942144101e-02, -1.380918580170312e-02, -1.250138976814163e-02, -3.045272986916604e-02, -2.678903202715175e-02, -7.942025647911416e-03, -8.126495799699020e-03, -7.175184656849936e-03, -1.410563445219340e-02, -7.175184656849924e-03, -1.410563445219314e-02, -1.219233278922637e-02, -1.229649573998595e-02, -1.853065604362821e-04, -2.917285022738432e-04, -1.150647459187031e-02, -1.161255214193743e-02, -9.157160730371017e-04, -1.019776116801404e-03, -6.179197635568308e-03, -6.285027622802690e-03, -6.179197635568308e-03, -6.285027622802690e-03, -2.015692411320084e-01, -2.015667364511508e-01, -2.142308230078954e-01, -2.142187129430456e-01, -1.920800713385449e-01, -1.921810282968028e-01, -2.027248639464489e-01, -2.028222591233831e-01, -2.134826542319230e-01, -2.132964761871603e-01, -2.134826542319230e-01, -2.132964761871603e-01, -2.246275738641989e-01, -2.249151627323116e-01, -1.085405557121906e-01, -1.084689172893295e-01, -1.466554846456654e-01, -1.434228933028882e-01, -1.413349268900679e-01, -1.376116235543502e-01, -2.293330931907875e-01, -2.355198939476634e-01, -2.293330931907876e-01, -2.355198939476634e-01, 3.727867618811898e-02, 3.768299708156197e-02, 9.931787129262246e-03, 9.846794593470185e-03, 2.802589292334346e-02, 3.059476482179562e-02, -2.732478683914485e-01, -2.733277052056076e-01, 5.009843643727542e-02, 5.074936596068882e-02, 5.009843643727576e-02, 5.074936596068769e-02, -6.594174240684919e-03, -6.262931029728100e-03, -7.963127120916198e-03, -7.801646777932029e-03, -6.461575114553915e-03, -5.983940285514276e-03, -5.135559180844519e-03, -4.726560078257986e-03, -9.086851815438144e-03, -6.040085730945443e-03, -9.086851815438200e-03, -6.040085730945355e-03, -2.061907275126959e-01, -2.057532345038818e-01, 9.962129788399893e-02, 9.991828223687670e-02, 3.496787295044122e-02, 3.521909275259895e-02, -5.448467148468815e-02, -5.421509930487477e-02, -5.523188032732214e-03, -5.271999015119305e-03, -5.523188032732035e-03, -5.271999015119305e-03, -1.730785587463759e-01, -1.727473658247123e-01, -2.167050308248749e-01, -2.163986082180660e-01, -2.526104158567516e-01, -2.520562422426286e-01, -1.165558240008567e-01, -1.159594973899391e-01, -2.185181991649258e-01, -2.179488259538544e-01, -2.185181991649258e-01, -2.179488259538545e-01, -1.602621702831261e-01, -1.600161106723411e-01, -5.146837493743275e-02, -5.152593225432182e-02, -9.934644370729570e-02, -9.910045033080198e-02, -1.075372502470338e-01, -1.071289997016990e-01, -1.085984749824914e-01, -1.086168355100514e-01, -1.085984749824914e-01, -1.086168355100512e-01, -1.544945673235570e-01, -1.540663381376701e-01, -2.919109552654796e-02, -2.874074874657185e-02, -2.325033908385031e-02, -2.087140720846939e-02, -1.201059690676015e-01, -1.189807806371007e-01, 2.389464684483373e-02, 2.642983560017065e-02, 2.389464684483261e-02, 2.642983560017069e-02, -1.704222837085675e-02, -1.615965408744826e-02, -2.423247940153461e-03, -2.416266678617704e-03, -4.943214621886663e-03, -4.559890020750888e-03, 2.211189498792708e-02, 2.288355671423566e-02, -8.301646896053555e-03, -5.746670427397444e-03, -8.301646896053337e-03, -5.746670427397171e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_mn15_l_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn15_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.270419212957770e-10, -6.540838425915541e-10, -3.270419212957770e-10, -3.270636626966756e-10, -6.541273253933512e-10, -3.270636626966756e-10, -3.271357504727345e-10, -6.542715009454690e-10, -3.271357504727345e-10, -3.268138676555963e-10, -6.536277353111927e-10, -3.268138676555963e-10, -3.269859993174886e-10, -6.539719986349771e-10, -3.269859993174886e-10, -3.269859993174886e-10, -6.539719986349771e-10, -3.269859993174886e-10, 2.415900073608379e-06, 4.831800147216757e-06, 2.415900073608379e-06, 2.415339728995426e-06, 4.830679457990850e-06, 2.415339728995426e-06, 2.398548791389330e-06, 4.797097582778661e-06, 2.398548791389330e-06, 2.388299347058995e-06, 4.776598694117989e-06, 2.388299347058995e-06, 2.397324907895195e-06, 4.794649815790387e-06, 2.397324907895195e-06, 2.397324907895195e-06, 4.794649815790387e-06, 2.397324907895195e-06, 9.517514161745620e-03, 1.903502832349124e-02, 9.517514161745620e-03, 9.498572808174257e-03, 1.899714561634851e-02, 9.498572808174257e-03, 8.724439241430411e-03, 1.744887848286082e-02, 8.724439241430411e-03, 8.045254917486982e-03, 1.609050983497396e-02, 8.045254917486982e-03, 8.275277320512135e-03, 1.655055464102427e-02, 8.275277320512135e-03, 8.275277320512135e-03, 1.655055464102427e-02, 8.275277320512135e-03, 1.186235023350536e+00, 2.372470046701074e+00, 1.186235023350536e+00, 1.202787623857630e+00, 2.405575247715260e+00, 1.202787623857630e+00, 7.952398947272477e-03, 1.590479789454495e-02, 7.952398947272477e-03, 1.472694765596243e+00, 2.945389531192489e+00, 1.472694765596243e+00, 1.007352916530961e+00, 2.014705833061919e+00, 1.007352916530961e+00, 1.007352916530964e+00, 2.014705833061927e+00, 1.007352916530964e+00, 8.880931294959124e-02, 1.776186259061543e-01, 8.880931294959124e-02, 1.044426345643299e-01, 2.088852691192194e-01, 1.044426345643299e-01, 5.193431174017338e-01, 1.038686234803684e+00, 5.193431174017338e-01, 3.157531924933991e-02, 6.315063849754854e-02, 3.157531924933991e-02, 4.631258149808358e-02, 9.262516301032736e-02, 4.631258149808358e-02, 4.631258151528942e-02, 9.262516301628840e-02, 4.631258151528942e-02, -6.257045989444058e-07, -1.251409197888812e-06, -6.257045989444058e-07, -6.292064824923225e-07, -1.258412964984645e-06, -6.292064824923225e-07, -6.258384355991065e-07, -1.251676871198213e-06, -6.258384355991065e-07, -6.289302644531416e-07, -1.257860528906283e-06, -6.289302644531416e-07, -6.275149746846419e-07, -1.255029949369284e-06, -6.275149746846419e-07, -6.275149746846419e-07, -1.255029949369284e-06, -6.275149746846419e-07, 1.847991873397269e-05, 3.695983746794538e-05, 1.847991873397269e-05, 1.747139665822649e-05, 3.494279331645299e-05, 1.747139665822649e-05, 1.830139399839174e-05, 3.660278799678349e-05, 1.830139399839174e-05, 1.743344164964575e-05, 3.486688329929151e-05, 1.743344164964575e-05, 1.797719809355383e-05, 3.595439618710767e-05, 1.797719809355383e-05, 1.797719809355383e-05, 3.595439618710767e-05, 1.797719809355383e-05, 2.132706993575349e-03, 4.265413987150697e-03, 2.132706993575349e-03, -1.378386658904397e-02, -2.756773317808794e-02, -1.378386658904397e-02, 1.321564798997487e-02, 2.643129597994974e-02, 1.321564798997487e-02, 3.459136467302313e-03, 6.918272934604625e-03, 3.459136467302313e-03, -2.752348133964475e-04, -5.504696267928952e-04, -2.752348133964475e-04, -2.752348133964523e-04, -5.504696267929045e-04, -2.752348133964523e-04, 1.065907571155118e+00, 2.131815142310245e+00, 1.065907571155118e+00, 5.980940758046479e-01, 1.196188151609296e+00, 5.980940758046479e-01, 1.110274300576196e+00, 2.220548601152393e+00, 1.110274300576196e+00, -1.789791988997493e-05, -3.579583977994986e-05, -1.789791988997493e-05, 1.739155785243579e+00, 3.478311570487151e+00, 1.739155785243579e+00, 1.739155785243579e+00, 3.478311570487152e+00, 1.739155785243579e+00, 3.079342655902808e-02, 6.158685304814558e-02, 3.079342655902808e-02, 3.882320177069051e-02, 7.764640350514312e-02, 3.882320177069051e-02, 3.866604794324166e-01, 7.733209587511325e-01, 3.866604794324166e-01, 1.189594131822737e+00, 2.379188263645470e+00, 1.189594131822737e+00, 1.479918190453864e-01, 2.959836380676560e-01, 1.479918190453864e-01, 1.479918191722256e-01, 2.959836383106692e-01, 1.479918191722256e-01, 8.690427028354471e-02, 1.738085405670894e-01, 8.690427028354471e-02, 1.398518200550143e-03, 2.797036401100285e-03, 1.398518200550143e-03, 1.944725293725802e-02, 3.889450587451603e-02, 1.944725293725802e-02, 4.271118908980748e-02, 8.542237817961496e-02, 4.271118908980748e-02, 2.991733675389422e-02, 5.983467350778845e-02, 2.991733675389422e-02, 2.991733675389422e-02, 5.983467350778845e-02, 2.991733675389422e-02, 8.153977462192519e-02, 1.630795492438504e-01, 8.153977462192519e-02, 9.442267385251488e-03, 1.888453477050298e-02, 9.442267385251488e-03, -2.791692267971733e-03, -5.583384535943467e-03, -2.791692267971733e-03, -2.084300453920752e-02, -4.168600907841503e-02, -2.084300453920752e-02, -1.126291723935843e-02, -2.252583447871687e-02, -1.126291723935843e-02, -1.126291723935843e-02, -2.252583447871686e-02, -1.126291723935843e-02, -7.660127122313714e-03, -1.532025424462743e-02, -7.660127122313714e-03, 3.399348593080531e-01, 6.798697186161057e-01, 3.399348593080531e-01, 2.336271317172310e-01, 4.672542634344620e-01, 2.336271317172310e-01, 1.080840814319569e-01, 2.161681628639137e-01, 1.080840814319569e-01, 1.660666843236510e-01, 3.321333686473020e-01, 1.660666843236510e-01, 1.660666843236513e-01, 3.321333686473025e-01, 1.660666843236513e-01, 2.361033028920831e-02, 4.722066057841662e-02, 2.361033028920831e-02, 4.279443591439624e-01, 8.558887182879410e-01, 4.279443591439624e-01, 6.400771010374094e-01, 1.280154202074891e+00, 6.400771010374094e-01, 1.078254631355560e-01, 2.156509262711120e-01, 1.078254631355560e-01, 1.907508245463940e+00, 3.815016490927877e+00, 1.907508245463940e+00, 1.907508245463905e+00, 3.815016490927806e+00, 1.907508245463905e+00, 1.106705624973175e-01, 2.213411249952178e-01, 1.106705624973175e-01, 4.211666485431039e-02, 8.423332915777258e-02, 4.211666485431039e-02, 5.270215110252088e-02, 1.054043021429698e-01, 5.270215110252088e-02, 1.776214771608147e+00, 3.552429543216295e+00, 1.776214771608147e+00, 1.888948168539821e-01, 3.777896337962912e-01, 1.888948168539821e-01, 1.888948167775602e-01, 3.777896335611962e-01, 1.888948167775602e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_mn15_l_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn15_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([3.229268174430768e-04, 3.229268174430767e-04, 3.229080338905432e-04, 3.229080338905433e-04, 3.228335697118414e-04, 3.228335697118414e-04, 3.231117000985051e-04, 3.231117000985050e-04, 3.229647824191982e-04, 3.229647824191982e-04, 3.229647824191982e-04, 3.229647824191982e-04, 1.051291987713787e-03, 1.051291987713787e-03, 1.052515944086346e-03, 1.052515944086346e-03, 1.085854363328303e-03, 1.085854363328304e-03, 1.079676429349126e-03, 1.079676429349126e-03, 1.077337832396930e-03, 1.077337832396931e-03, 1.077337832396930e-03, 1.077337832396931e-03, -1.193105778825326e-02, -1.193105778825325e-02, -1.183535486894275e-02, -1.183535486894275e-02, -9.562230136651955e-03, -9.562230136651953e-03, -8.967774019172280e-03, -8.967774019172281e-03, -9.197036011931550e-03, -9.197036011931538e-03, -9.197036011931550e-03, -9.197036011931538e-03, -4.134737070954143e-02, -4.134737070954149e-02, -4.040206247425227e-02, -4.040206247425242e-02, -1.167140843566781e-02, -1.167140843566781e-02, -6.767790409804940e-02, -6.767790409804947e-02, -4.845729245436594e-02, -4.845729245436585e-02, -4.845729245436616e-02, -4.845729245436628e-02, -1.100756541293150e-04, -1.100756541293639e-04, -1.325422712020210e-04, -1.325422712019318e-04, -6.773808607341761e-03, -6.773808607341761e-03, -1.684921313781625e-05, -1.684921313781625e-05, -3.846538799033856e-05, -3.846538799039919e-05, -3.846538799059317e-05, -3.846538799056892e-05, -1.839587728035034e-03, -1.839587728035035e-03, -2.014511539460587e-03, -2.014511539460587e-03, -1.849600296593386e-03, -1.849600296593386e-03, -2.003913175056871e-03, -2.003913175056871e-03, -1.926835571507042e-03, -1.926835571507042e-03, -1.926835571507042e-03, -1.926835571507042e-03, 2.228535509367074e-03, 2.228535509367080e-03, 2.578749796025090e-03, 2.578749796025090e-03, 2.059708255408398e-03, 2.059708255408401e-03, 2.350403060367167e-03, 2.350403060367164e-03, 2.516335083863209e-03, 2.516335083863209e-03, 2.516335083863209e-03, 2.516335083863209e-03, 6.657155081923388e-02, 6.657155081923388e-02, 3.282803479649325e-02, 3.282803479649329e-02, 1.610620702882130e-02, 1.610620702882129e-02, 3.358829637215385e-02, 3.358829637215388e-02, 7.727048044411952e-02, 7.727048044411951e-02, 7.727048044411955e-02, 7.727048044411955e-02, -4.465066168190828e-02, -4.465066168190811e-02, -4.833797387448042e-02, -4.833797387448051e-02, -4.068439535157373e-02, -4.068439535157402e-02, 8.644043608862921e-03, 8.644043608862921e-03, -7.177005045444028e-02, -7.177005045444020e-02, -7.177005045443982e-02, -7.177005045443996e-02, -5.516853346996093e-06, -5.516853347017548e-06, -1.395521846323955e-05, -1.395521846321800e-05, -5.188670502732512e-05, -5.188670502724933e-05, -2.354880740471415e-02, -2.354880740471387e-02, -3.218067593433934e-05, -3.218067593435409e-05, -3.218067593441310e-05, -3.218067593441310e-05, 4.383157775778667e-01, 4.383157775778662e-01, -3.078203134351839e-01, -3.078203134351839e-01, -2.314514587282539e-01, -2.314514587282541e-01, -4.864616984375850e-02, -4.864616984375871e-02, -1.578910145776828e-01, -1.578910145776826e-01, -1.578910145776828e-01, -1.578910145776826e-01, 3.995650700261572e-01, 3.995650700261573e-01, 6.984442389673938e-02, 6.984442389673941e-02, 1.273862402970186e-01, 1.273862402970187e-01, 6.676101684224819e-02, 6.676101684224817e-02, 1.300116019309274e-01, 1.300116019309274e-01, 1.300116019309274e-01, 1.300116019309274e-01, 5.027820623410344e-02, 5.027820623410345e-02, -2.610546209547679e-02, -2.610546209547686e-02, -1.674214485076659e-02, -1.674214485076659e-02, -1.087204006644084e-02, -1.087204006644085e-02, -1.514382343226700e-02, -1.514382343226701e-02, -1.514382343226707e-02, -1.514382343226699e-02, 2.693268354997386e-02, 2.693268354997388e-02, -6.163178360290409e-03, -6.163178360290534e-03, -1.175218421229906e-02, -1.175218421229906e-02, 2.458401632585910e-02, 2.458401632585910e-02, -4.767129964324460e-02, -4.767129964324492e-02, -4.767129964324463e-02, -4.767129964324508e-02, -1.397096652622738e-04, -1.397096652623196e-04, -3.683170405382760e-07, -3.683170405343062e-07, -9.184667755332584e-06, -9.184667755332584e-06, -4.567871838311942e-02, -4.567871838311912e-02, -3.707027549999600e-05, -3.707027549999600e-05, -3.707027549987444e-05, -3.707027549988549e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
