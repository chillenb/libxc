
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_mn15_l_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn15_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.762850851948782e-01, -1.762861026023146e-01, -1.762902787628113e-01, -3.043950971274292e-01, -3.382575669392873e-01, -3.722533979162562e-01, 1.684124155154153e-02, 5.301625617609089e-02, 5.160793037590820e-02, 5.218108913559107e-02, 5.211683775728441e-02, 1.592318009102699e-02, -2.271774667361072e-01, -4.990749047872577e-02, 8.454647528055108e-02, 2.224731004484221e-02, -2.523521227291814e-01, 8.129768868190303e-02, -5.893983386864822e-03, -6.622275678240004e-02, 5.158639523887905e-02, 2.903645035429728e-02, 4.500709080482541e-02, 4.437947915929245e-02, -9.924460162326475e-03, -1.034404707468854e-02, -3.213677885856469e-02, -6.231946512573457e-03, -6.463627765736077e-03, -6.463627765736038e-03, -2.265610765153487e-01, -2.641492207152719e-01, -2.651844268839891e-01, -2.642168869492556e-01, -1.925320594754018e-01, -2.261066001521416e-01, 2.480597842080633e-02, 2.111611001203688e-02, 7.339194912909451e-02, 6.863725854416416e-02, -2.475103651775380e-02, 2.132270208801445e-02, -5.116655013416500e-02, -1.147717714566303e-01, -4.422353687996932e-03, -4.836453317932497e-02, -6.064297610332069e-02, -6.108892115408961e-02, -9.721643838429861e-03, 1.146390236430752e-03, -2.383881358095961e-02, -1.058082475459013e-01, -9.824383568103716e-03, -9.824383568103638e-03, -4.956089648328011e-03, -6.110699936628536e-03, -4.801276764206911e-03, -3.172045876334145e-02, -5.347907449828092e-03, -5.347907449828086e-03, -2.443933960815538e-02, -3.700978125229490e-02, -3.692231323044867e-02, -2.752802537743538e-02, -3.859630769295925e-02, -2.691728021116330e-02, -3.439490629798481e-02, -4.430481223744205e-02, -6.258641900311381e-02, -1.062338128101495e-01, -8.997886705508999e-02, -7.902710885767006e-02, -8.227540800366434e-02, -3.244387555485054e-03, -7.246546365798266e-03, -1.572266809657482e-02, -1.420000590917625e-02, -1.389077676827800e-02, 2.007632272552155e-03, -3.223837000836711e-01, -3.338847925078307e-02, -2.395825553637717e-02, -1.494736847870310e-02, -1.494736847870319e-02, -1.187673320006409e-01, -1.845807149261832e-03, -3.250692945661812e-02, -4.166437717780708e-01, -5.048178819849323e-03, -5.048426025351617e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_mn15_l_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn15_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.369670650257896e-01, -2.369674761806519e-01, -2.369558359174784e-01, -2.369565292357506e-01, -2.369117997268247e-01, -2.369110331933117e-01, -5.869260901768966e-01, -5.869299863177802e-01, -7.050887929335609e-01, -7.050961404298831e-01, -8.309882475274222e-01, -8.309964517125151e-01, -2.841334683508545e-01, -2.841338408622330e-01, -3.235964752053923e-01, -3.235956586107496e-01, -3.273770498905493e-01, -3.273780822922138e-01, -3.258526641617402e-01, -3.258533809030541e-01, -3.259981700599284e-01, -3.260172362246503e-01, -2.856566968785409e-01, -2.856459788877988e-01, 1.812941033469261e-01, 1.830897638854691e-01, -1.312336567151471e-01, -1.301097189219010e-01, -7.476092208144089e-02, -7.419659043637074e-02, -1.507526639688580e-01, -1.505627045395719e-01, 2.002579776032043e-01, 1.671694025752849e-01, -8.385008553309413e-02, -7.889149444743092e-02, -1.303593134856395e-01, -1.250976504354884e-01, -1.318058277462437e-01, -1.203008186691963e-01, -1.215328824628332e-01, -1.198903532361529e-01, 6.253035533533954e-02, 6.228573582316008e-02, 5.748948826803635e-02, 1.125556004756209e-01, 5.508033412897859e-02, 1.079982598656691e-01, -1.318959624324126e-02, -1.208686932701107e-02, -1.381082757111277e-02, -1.250296114073256e-02, -3.187097780507202e-02, -2.814794004897354e-02, -7.942140515589691e-03, -8.126611833846149e-03, -7.175104273433540e-03, -1.410552412986553e-02, -7.175104273433422e-03, -1.410552412986529e-02, 7.535798387721748e-03, 7.448146231678228e-03, -4.160036741667886e-04, -5.225974910353669e-04, -1.175619102096306e-02, -1.186243682450483e-02, -1.143445459971725e-03, -1.247670307786145e-03, 1.706006701846509e-02, 1.698428308237674e-02, 1.228476321551426e-02, 1.219569927690299e-02, -1.884204234786836e-01, -1.884221074756665e-01, -1.961103320828008e-01, -1.961203045753598e-01, -1.897753423520565e-01, -1.899060144975104e-01, -2.015450496501688e-01, -2.016677799784599e-01, -1.395396987297043e-01, -1.400894090365978e-01, -1.955503150253011e-01, -1.957103279745075e-01, -2.050153560113089e-01, -2.053073910731797e-01, -1.549735549489772e-01, -1.548870988489199e-01, -2.050483379749749e-01, -2.032318866074168e-01, -2.738306950064184e-01, -2.704092040300697e-01, -2.211333909456706e-01, -2.273156539694576e-01, -2.826277188295286e-01, -2.888472390793754e-01, 4.701480564264929e-02, 4.733715428110637e-02, -1.058083058667780e-01, -1.051476034790412e-01, -1.332147901255542e-02, -8.863927784805830e-03, -5.002247850220447e-01, -5.003124928095753e-01, -4.690713738280248e-02, -4.078642686906046e-02, -4.690713738280196e-02, -4.078642686906155e-02, -6.594180203547495e-03, -6.262936859053272e-03, -7.963104256752840e-03, -7.801624118950797e-03, -6.461782921699242e-03, -5.984141213831136e-03, -1.889043705871454e-02, -1.841086368673420e-02, -9.086981789325958e-03, -6.040193850317009e-03, -9.086981789325993e-03, -6.040193850316825e-03, -1.768887609737758e-01, -1.765072346777661e-01, 1.236785510761993e-01, 1.239744704125436e-01, -5.696741049516123e-02, -5.667844291489830e-02, -7.256462781824338e-02, -7.227919033260320e-02, -8.836728551338165e-02, -8.806663606487873e-02, -2.881414169832726e-02, -2.854793454869744e-02, -1.516581367145135e-01, -1.513515759024677e-01, -9.813794302243400e-02, -9.767679284843947e-02, -1.952547307150845e-01, -1.947184680248298e-01, -1.249883632992147e-01, -1.243687557657809e-01, -2.308051868875500e-01, -2.302224271228888e-01, -1.762228583021053e-01, -1.756969643594935e-01, -1.555429078116378e-01, -1.552991690636193e-01, -1.378402049524083e-01, -1.369981921348526e-01, -1.302231612877964e-01, -1.288799716563500e-01, -9.125320204761257e-02, -9.071310033057840e-02, -9.920507182184002e-02, -9.924706283442733e-02, -9.943592179637364e-02, -9.947770110436722e-02, -1.711521332431811e-01, -1.708516330449958e-01, -3.727802606920151e-01, -3.681994858278032e-01, -2.255122094141330e-02, -2.019063149515955e-02, -1.001179417425086e-01, -9.882634204434630e-02, 2.990654255140383e-02, 3.216321305837747e-02, 2.990654255140280e-02, 3.216321305837760e-02, -1.548522448314575e-01, -1.469158756864517e-01, -2.423247488664051e-03, -2.416266227694970e-03, -4.418139167346422e-02, -4.075906095015910e-02, -3.406187859099307e-01, -3.261716929384204e-01, -8.301602380240882e-03, -5.746632677617988e-03, -8.303415697839756e-03, -5.748170326349390e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_mn15_l_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn15_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.384570319001324e-08, -2.769140638002647e-08, -1.384570319001324e-08, -1.384621784333544e-08, -2.769243568667087e-08, -1.384621784333544e-08, -1.384818847194719e-08, -2.769637694389437e-08, -1.384818847194719e-08, -1.208865805056789e-09, -2.417731610113579e-09, -1.208865805056789e-09, -6.236508161094609e-10, -1.247301632218922e-09, -6.236508161094609e-10, -3.042752127923987e-10, -6.085504255847973e-10, -3.042752127923987e-10, 2.103359314808663e-06, 4.206718629617326e-06, 2.103359314808663e-06, 8.778578196141211e-07, 1.755715639228242e-06, 8.778578196141211e-07, 8.760769049022505e-07, 1.752153809804501e-06, 8.760769049022505e-07, 8.764188210132727e-07, 1.752837642026545e-06, 8.764188210132727e-07, 8.768389780895673e-07, 1.753677956179135e-06, 8.768389780895673e-07, 2.106033221843777e-06, 4.212066443687555e-06, 2.106033221843777e-06, 4.454153979640638e-02, 8.908307959281275e-02, 4.454153979640638e-02, 1.309292234103452e-02, 2.618584468206905e-02, 1.309292234103452e-02, 2.144820398855296e-03, 4.289640797710593e-03, 2.144820398855296e-03, 6.659544865736340e-03, 1.331908973147268e-02, 6.659544865736340e-03, 5.301069202672924e-02, 1.060213840534585e-01, 5.301069202672924e-02, 2.177467339628212e-03, 4.354934679256423e-03, 2.177467339628212e-03, 2.927802798903810e+00, 5.855605597807621e+00, 2.927802798903810e+00, 5.705148141762413e+00, 1.141029628352483e+01, 5.705148141762413e+00, 2.147548515546318e-03, 4.295097031092637e-03, 2.147548515546318e-03, 8.380358786981779e-01, 1.676071757396353e+00, 8.380358786981779e-01, 2.683454308628807e-01, 5.366908617257622e-01, 2.683454308628807e-01, 2.961336034354827e-01, 5.922672068709670e-01, 2.961336034354827e-01, 6.749661355903143e-01, 1.349932271192842e+00, 6.749661355903143e-01, 4.467544044543325e-01, 8.935088089062289e-01, 4.467544044543325e-01, 1.874082465581596e+00, 3.748164931163511e+00, 1.874082465581596e+00, 1.784874411868998e-01, 3.569748823413111e-01, 1.784874411868998e-01, 1.074293578920527e-02, 2.148587158307505e-02, 1.074293578920527e-02, 1.074293578104503e-02, 2.148587156524853e-02, 1.074293578104503e-02, -1.131407320389008e-06, -2.262814640778015e-06, -1.131407320389008e-06, -6.254496251450811e-07, -1.250899250290162e-06, -6.254496251450811e-07, -6.221548001235305e-07, -1.244309600247061e-06, -6.221548001235305e-07, -6.252466312579630e-07, -1.250493262515926e-06, -6.252466312579630e-07, -1.866128063102613e-06, -3.732256126205226e-06, -1.866128063102613e-06, -1.133169555458031e-06, -2.266339110916060e-06, -1.133169555458031e-06, 3.766405931275381e-05, 7.532811862550762e-05, 3.766405931275381e-05, 3.609388476517138e-05, 7.218776953034276e-05, 3.609388476517138e-05, 1.537920483469294e-05, 3.075840966938588e-05, 1.537920483469294e-05, 1.505931336537961e-05, 3.011862673075923e-05, 1.505931336537961e-05, 7.079873969306297e-05, 1.415974793861260e-04, 7.079873969306297e-05, 3.623139657148793e-05, 7.246279314297586e-05, 3.623139657148793e-05, 2.412897809402074e-03, 4.825795618804148e-03, 2.412897809402074e-03, -8.358442013863656e-03, -1.671688402772731e-02, -8.358442013863656e-03, 7.084624659793040e-03, 1.416924931958608e-02, 7.084624659793040e-03, 1.498563586781718e-03, 2.997127173563435e-03, 1.498563586781718e-03, -2.895283909941155e-04, -5.790567819882310e-04, -2.895283909941155e-04, -1.920866878313447e-04, -3.841733756626893e-04, -1.920866878313447e-04, 6.551189398233698e-01, 1.310237879646747e+00, 6.551189398233698e-01, 2.006058941692920e+00, 4.012117883385841e+00, 2.006058941692920e+00, 4.338985139391653e+00, 8.677970278783290e+00, 4.338985139391653e+00, -4.930892107568695e-06, -9.861784215137392e-06, -4.930892107568695e-06, 6.888380049755380e+00, 1.377676009951076e+01, 6.888380049755380e+00, 6.888380049755377e+00, 1.377676009951076e+01, 6.888380049755377e+00, 4.478747570811669e-02, 8.957495138419017e-02, 4.478747570811669e-02, 1.783864608430370e-02, 3.567729218415037e-02, 1.783864608430370e-02, 2.048516037273588e+00, 4.097032074186004e+00, 2.048516037273588e+00, 5.036318345267982e+00, 1.007263669053601e+01, 5.036318345267982e+00, 4.715001091156039e-01, 9.430002182031333e-01, 4.715001091156039e-01, 4.715001091162366e-01, 9.430002181840067e-01, 4.715001091162366e-01, 8.017342407267712e-02, 1.603468481453542e-01, 8.017342407267712e-02, 1.305643430060701e-03, 2.611286860121402e-03, 1.305643430060701e-03, 2.444698365590811e-02, 4.889396731181623e-02, 2.444698365590811e-02, 4.461815471857753e-02, 8.923630943715506e-02, 4.461815471857753e-02, 3.666716744759675e-02, 7.333433489519350e-02, 3.666716744759675e-02, 3.164609266679418e-02, 6.329218533358837e-02, 3.164609266679418e-02, 7.698393822017059e-02, 1.539678764403412e-01, 7.698393822017059e-02, 2.201695496622574e-02, 4.403390993245149e-02, 2.201695496622574e-02, -4.030417621027216e-03, -8.060835242054433e-03, -4.030417621027216e-03, -1.893278151257431e-02, -3.786556302514862e-02, -1.893278151257431e-02, -1.032708304195219e-02, -2.065416608390437e-02, -1.032708304195219e-02, -1.509661598749451e-02, -3.019323197498901e-02, -1.509661598749451e-02, -7.932268765124930e-03, -1.586453753024986e-02, -7.932268765124930e-03, 1.013998101474217e+00, 2.027996202948434e+00, 1.013998101474217e+00, 5.043022000580265e-01, 1.008604400116053e+00, 5.043022000580265e-01, 1.367210743572104e-01, 2.734421487144208e-01, 1.367210743572104e-01, 2.840804029638575e-01, 5.681608059277150e-01, 2.840804029638575e-01, 2.827990194116424e-01, 5.655980388232847e-01, 2.827990194116424e-01, 1.810105375968403e-02, 3.620210751936805e-02, 1.810105375968403e-02, 2.736998355814496e+04, 5.473996711628992e+04, 2.736998355814496e+04, 4.237114816687329e-01, 8.474229633374676e-01, 4.237114816687329e-01, 1.280721588428839e-01, 2.561443176857678e-01, 1.280721588428839e-01, 1.265118915138619e+00, 2.530237830277223e+00, 1.265118915138619e+00, 1.265118915138595e+00, 2.530237830277208e+00, 1.265118915138595e+00, 6.788974288489668e+06, 1.357794857697934e+07, 6.788974288489668e+06, 2.421889182361083e-03, 4.843778807387030e-03, 2.421889182361083e-03, 2.677708379840320e+09, 5.355416759680639e+09, 2.677708379840320e+09, 1.416078703012586e+03, 2.832157406025173e+03, 1.416078703012586e+03, 7.691873287309076e-02, 1.538374657876812e-01, 7.691873287309076e-02, 1.554315268794155e+01, 3.108630537624349e+01, 1.554315268794155e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_mn15_l_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn15_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.921388939241315e-05, 2.921388939241316e-05, 2.920750027540748e-05, 2.920750027540746e-05, 2.918155008349275e-05, 2.918155008349274e-05, 2.246322688664252e-04, 2.246322688664251e-04, 2.760419850180360e-04, 2.760419850180360e-04, 3.278446508675471e-04, 3.278446508675471e-04, 1.202325332047187e-03, 1.202325332047187e-03, 1.962391427667909e-03, 1.962391427667909e-03, 2.000603257922524e-03, 2.000603257922525e-03, 1.984792912279854e-03, 1.984792912279854e-03, 1.986810720703688e-03, 1.986810720703689e-03, 1.219470021626444e-03, 1.219470021626445e-03, -4.168000692899086e-02, -4.168000692899086e-02, -1.658430233080722e-02, -1.658430233080721e-02, 9.437363662888179e-05, 9.437363662887974e-05, -7.014197956703141e-03, -7.014197956703142e-03, -4.210793685392458e-02, -4.210793685392458e-02, 4.682392300696369e-04, 4.682392300696505e-04, -8.715689127650136e-02, -8.715689127650141e-02, -1.566556109768665e-01, -1.566556109768668e-01, -4.873623210774161e-03, -4.873623210774161e-03, -6.424694916422476e-02, -6.424694916422481e-02, -3.944377180501841e-02, -3.944377180501832e-02, -3.987200804845337e-02, -3.987200804845348e-02, -1.100763114091995e-04, -1.100763114092484e-04, -1.325428488119483e-04, -1.325428488118590e-04, -6.781504585688764e-03, -6.781504585688764e-03, -1.684922190272224e-05, -1.684922190272224e-05, -3.846537374383813e-05, -3.846537374389876e-05, -3.846537374409273e-05, -3.846537374406848e-05, -1.741271456392619e-03, -1.741271456392620e-03, -2.015802046825128e-03, -2.015802046825128e-03, -1.850561539098328e-03, -1.850561539098328e-03, -2.005158953344813e-03, -2.005158953344813e-03, -1.710596286629413e-03, -1.710596286629413e-03, -1.811720549979734e-03, -1.811720549979734e-03, 7.388138038885505e-04, 7.388138038885559e-04, 9.973893641516190e-04, 9.973893641516201e-04, 2.321322953119995e-03, 2.321322953119997e-03, 2.580357863293507e-03, 2.580357863293505e-03, -1.026470302554856e-03, -1.026470302554856e-03, 9.819147395255100e-04, 9.819147395255100e-04, 5.799923871059860e-02, 5.799923871059860e-02, 6.992863225905163e-02, 6.992863225905173e-02, 4.316446426130262e-02, 4.316446426130262e-02, 9.689192352519199e-02, 9.689192352519209e-02, 7.345241208507250e-02, 7.345241208507249e-02, 1.020319583758942e-01, 1.020319583758942e-01, -4.431573245886446e-02, -4.431573245886428e-02, -7.024305222207881e-02, -7.024305222207891e-02, -4.196903431926832e-02, -4.196903431926861e-02, 1.927247947676665e-02, 1.927247947676665e-02, -8.076065708703513e-02, -8.076065708703505e-02, -8.076065708703467e-02, -8.076065708703481e-02, -5.516853530975858e-06, -5.516853530997315e-06, -1.395521700379197e-05, -1.395521700377043e-05, -5.188676682061740e-05, -5.188676682054162e-05, -2.378521078471777e-02, -2.378521078471749e-02, -3.218069522488386e-05, -3.218069522489861e-05, -3.218069522495762e-05, -3.218069522495762e-05, 2.433904582089007e-01, 2.433904582089003e-01, -3.595828738853602e-01, -3.595828738853603e-01, 3.961570628522033e-02, 3.961570628522033e-02, 2.268933541910232e-02, 2.268933541910217e-02, 1.268972142802381e-01, 1.268972142802381e-01, -8.020418634437142e-02, -8.020418634437129e-02, 2.719995033201664e-01, 2.719995033201664e-01, 8.348351173258519e-03, 8.348351173258526e-03, 8.939859716763382e-02, 8.939859716763386e-02, 7.558555067472592e-02, 7.558555067472590e-02, 1.394314137504310e-01, 1.394314137504310e-01, 9.550096734358032e-02, 9.550096734358035e-02, 4.737409877192502e-02, 4.737409877192503e-02, -5.811383966355515e-02, -5.811383966355520e-02, -4.831100948581074e-02, -4.831100948581074e-02, -2.672621993096245e-02, -2.672621993096248e-02, -4.533963935428809e-02, -4.533963935428808e-02, -4.503464571250639e-02, -4.503464571250630e-02, 3.956388179128190e-02, 3.956388179128193e-02, -1.551013176429560e-02, -1.551013176429560e-02, -1.174629596544791e-02, -1.174629596544791e-02, 5.241202576389032e-03, 5.241202576389032e-03, -4.744840443023523e-02, -4.744840443023556e-02, -4.744840443023524e-02, -4.744840443023570e-02, -3.441213458400761e-04, -3.441213458400761e-04, -3.683170380258270e-07, -3.683170380218572e-07, -2.259432021717032e-05, -2.259432021717032e-05, -1.268394864264745e-01, -1.268394864264746e-01, -3.707026730868008e-05, -3.707026730868008e-05, -3.707060121662028e-05, -3.707060121663132e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
