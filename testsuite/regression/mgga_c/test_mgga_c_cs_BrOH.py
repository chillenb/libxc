
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_cs_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_cs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.963107699587559e-02, -2.963118349462290e-02, -2.963114602676297e-02, -2.962937714473092e-02, -2.963113780002134e-02, -2.963113780002134e-02, -5.384062935283349e-02, -5.383586515619296e-02, -5.368392919691253e-02, -5.361603884920099e-02, -5.384009908546813e-02, -5.384009908546813e-02, -5.663012548209354e-02, -5.662860361506963e-02, -5.579941588907860e-02, -5.286878528344963e-02, -5.662482535898701e-02, -5.662482535898701e-02, -1.749259085275255e-02, -1.788433193519853e-02, -9.288558897241295e-02, -2.023279370466433e-02, -1.762988283921003e-02, -1.762988283921003e-02, -1.739548037675087e-03, -1.819042043939963e-03, -6.543849224081382e-03, -8.501631823024062e-04, -1.800780006487413e-03, -1.800780006487413e-03, -1.809073671403630e-01, -6.456661377658755e-02, 6.549924983849831e-01, -2.395421078560708e-01, -2.212931968726680e-02, -5.047537278232182e-02, 1.536042000171807e+00, -5.321687947575220e-02, -3.557591015041627e-02, -3.563705519530971e-02, -3.702427967106587e-02, -2.683324983625938e-02, -1.912391655221529e-01, -8.129474165612854e-02, -1.381767493103205e-01, -3.895680601750486e-02, -3.540598800849001e-02, -3.891858153696796e-02, 1.800725456757711e-02, -6.390993365443182e-02, 1.534297432597786e-01, -5.539213764412564e-02, -1.161734474426004e-02, -9.061183550264215e-03, -8.206423256717047e-04, -9.356300921571495e-04, -7.046174160956382e-04, 2.379927500630719e-03, -8.539474585500237e-04, -8.539474585499667e-04, -8.373555437596400e+02, 2.981968350391982e+02, 5.667162205667056e+03, -8.293660840366371e+00, 2.322564368208246e+02, -1.075830923830917e+04, 4.104074199224404e+03, -2.720094204245644e-02, -1.088564862436144e-01, -1.982462662276346e-02, -3.487398240701985e-02, -2.139370439392626e-01, -2.013849386992453e-01, 5.889974603011278e-01, 1.136496056639769e+00, 1.137160695487439e-01, -3.692049585415373e-02, -2.940782491523092e-02, -2.978335766991775e-02, -1.175681525147622e-02, -9.211986008050663e-03, -2.837505548286384e-02, 5.905381176422551e-02, -9.398101155118580e-03, -2.026200715589171e-03, -2.597480262393752e-04, -4.910932068826732e-04, -5.048609146089682e-03, -7.276391803211458e-04, -7.276391803211448e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_cs_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_cs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-7.810772083130782e-02, -7.810721777064025e-02, -7.810594452640783e-02, -7.811418645840411e-02, -7.810744718269828e-02, -7.810744718269828e-02, -6.236263654127421e-02, -6.236218796226609e-02, -6.236331856256225e-02, -6.256824220350181e-02, -6.236123962730490e-02, -6.236123962730490e-02, -5.051186623110474e-02, -5.075337840637788e-02, -5.861487024396615e-02, -5.971244670099438e-02, -5.060071510096586e-02, -5.060071510096586e-02, -3.984845977866753e-02, -3.931393116522621e-02, -2.945003805655464e-02, -4.219843318127282e-02, -3.967112327724726e-02, -3.967112327724726e-02, -2.298889608416070e-03, -2.402967347876301e-03, -1.255312994026313e-02, -1.128652052229831e-03, -2.379064959332181e-03, -2.379064959332181e-03, 2.652981720886109e-02, -4.747542192617882e-02, -5.058187802090119e-01, 6.395067867688269e-02, -7.454516967052310e-02, -5.649242966689853e-02, -1.024366038348122e+00, -8.446514620306621e-02, -9.726444956388570e-02, -9.648610970531597e-02, -9.252002101392115e-02, -9.854718199353203e-02, 2.345307825350606e-02, -1.862085713463245e-02, -6.699317412605691e-04, -3.800513799063715e-02, -4.505448550706700e-02, -4.347382534475897e-02, -3.037852043360612e-02, -4.830956230939899e-02, 1.020251284194934e-02, -4.153361660023670e-02, -3.861875997105273e-02, -3.818690694361827e-02, -1.089625216751102e-03, -1.241573461329303e-03, -9.361247959283302e-04, -1.304497344193162e-02, -1.133654044896327e-03, -1.133654044895567e-03, 3.757811620409935e+02, -1.336004882707072e+02, -2.540082985639545e+03, 3.666047630157037e+00, -1.041830134095721e+02, 4.823304618779476e+03, -1.817115417661109e+03, -5.243392559222984e-02, -1.365189183509072e-02, -4.789223652993707e-02, -4.312216162846577e-02, 3.339143815012123e-02, 3.679639276143213e-02, -1.730127070981415e-01, -3.464831597594611e-01, -9.115212999690658e-02, -4.466700636933515e-02, -4.686513212618094e-02, -4.966946027602804e-02, -1.863138962176225e-02, -1.985914402838516e-02, -3.926824103692028e-02, 2.882450062024198e-03, -2.759845741516335e-02, -2.673009224411974e-03, -3.458734084632956e-04, -6.531563177451075e-04, -2.284871452982536e-02, -9.665969959064483e-04, -9.665969959064463e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_cs_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_cs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.139746677613814e-10, 1.139732906646018e-10, 1.139661332751213e-10, 1.139887048270335e-10, 1.139739500022789e-10, 1.139739500022789e-10, 8.904847686850774e-07, 8.904756710180290e-07, 8.900472880739402e-07, 8.898669314530337e-07, 8.904616234714145e-07, 8.904616234714145e-07, 2.053963335364788e-03, 2.063272779403864e-03, 2.323218194260550e-03, 2.244579430644876e-03, 2.057352882831070e-03, 2.057352882831070e-03, 3.371573944315120e-01, 3.227583342043837e-01, 9.180147142104603e-04, 9.005163006536232e-01, 3.327600610756218e-01, 3.327600610756218e-01, 4.238257053910784e-04, 8.617060939327618e-04, 4.368483676393380e+00, 3.879082857124507e-12, 7.367182334810949e-04, 7.367182334810949e-04, 1.239373479901651e-07, 1.238291631859792e-07, 1.239259282574794e-07, 1.238418129991175e-07, 1.238823471182045e-07, 1.238823471182045e-07, 1.433369969189939e-05, 1.386129343649331e-05, 1.453013980825760e-05, 1.415373689665080e-05, 1.376893363525573e-05, 1.376893363525573e-05, 3.761526273535273e-03, 2.624229404706449e-03, 4.716632932664015e-03, 3.933337475357844e-03, 3.193812017689757e-03, 3.193812017689757e-03, 1.948759572069400e+00, 3.293175443416858e-01, 2.004057561514936e+00, 1.572046442952994e-05, 1.386861462953849e+00, 1.386861462953849e+00, 9.897415334348436e-13, 1.213643519815091e-10, 1.429070760502292e-15, 4.087342130347611e+00, 4.588253768539905e-12, 4.588253768539905e-12, 3.282878503871826e-03, 3.360128530324791e-03, 3.332187501038182e-03, 3.310821717746759e-03, 3.321494679269465e-03, 3.321494679269465e-03, 3.781828845049865e-03, 6.955342608056741e-03, 5.777620848054837e-03, 4.893517055464665e-03, 5.321980196977692e-03, 5.321980196977692e-03, 2.131933719242666e-03, 1.494564941593296e-01, 7.945365681885590e-02, 3.066283366597883e-02, 4.968677894244238e-02, 4.968677894244241e-02, 1.074040188408784e-02, 4.139700402459969e+00, 4.380200387226655e+00, 3.838720178959731e-02, 2.916383888491288e+00, 2.916383888491287e+00, 4.077210505550720e-03, 1.692844046113100e-51, 1.683258874850878e-24, 3.144350644310930e+00, 6.226436196767164e-15, 6.226436196766759e-15])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_cs_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_cs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([-1.101663274035551e-06, -1.101657985424649e-06, -1.101630497520609e-06, -1.101717179866644e-06, -1.101660517553917e-06, -1.101660517553917e-06, -3.714262652389750e-05, -3.714248090658740e-05, -3.713562315408786e-05, -3.713273530487604e-05, -3.714225605965124e-05, -3.714225605965124e-05, -6.034207918143338e-04, -6.042910149474954e-04, -6.274961405935782e-04, -6.206881280659879e-04, -6.037379742260848e-04, -6.037379742260848e-04, -2.027951985145040e-03, -2.019928283007522e-03, -4.642886041801412e-04, -2.064093969945026e-03, -2.025580615885642e-03, -2.025580615885642e-03, -4.441162180948994e-10, -1.037702169882291e-09, -3.532541952502130e-04, -4.487828319205411e-19, -8.597385118173568e-10, -8.597385118173568e-10, -1.732969367579082e-05, -1.732380649715517e-05, -1.732907238872021e-05, -1.732449503579482e-05, -1.732670104567373e-05, -1.732670104567373e-05, -1.062199896509581e-04, -1.049057613505687e-04, -1.067582681700466e-04, -1.057226736225934e-04, -1.046454591556450e-04, -1.046454591556450e-04, -7.292377106507484e-04, -6.520727527478434e-04, -7.812659227042433e-04, -7.392898354485238e-04, -6.933236386814995e-04, -6.933236386814995e-04, -1.771504326029443e-03, -2.023676334784481e-03, -1.752616285905352e-03, -1.099235962660779e-04, -1.949271769792619e-03, -1.949271769792619e-03, -1.027988477379040e-19, -1.881525263723938e-17, -9.328168942417283e-23, -8.953665036736187e-04, -5.380754791052092e-19, -5.380754791052092e-19, -6.992619615383494e-04, -7.043146791353182e-04, -7.024973670776338e-04, -7.010999260892148e-04, -7.017988464876019e-04, -7.017988464876019e-04, -7.304435521812624e-04, -8.770111907290567e-04, -8.302656290204116e-04, -7.899920157853471e-04, -8.101594538787637e-04, -8.101594538787637e-04, -6.106213702682607e-04, -1.827338735820678e-03, -1.627416165417012e-03, -1.312319859461039e-03, -1.471298333649943e-03, -1.471298333649943e-03, -9.936563684825931e-04, -2.659542920695760e-04, -6.981745028647412e-04, -1.385760185054702e-03, -1.417583470700426e-03, -1.417583470700426e-03, -6.877752439412212e-09, -5.385846209786438e-60, -3.671122765087200e-32, -1.327116743018375e-03, -4.482179316269599e-22, -4.482179316269288e-22])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_cs_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_cs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-8.813306192284413e-06, -8.813263883397189e-06, -8.813043980164871e-06, -8.813737438933152e-06, -8.813284140431333e-06, -8.813284140431333e-06, -2.971410121911800e-04, -2.971398472526992e-04, -2.970849852327029e-04, -2.970618824390083e-04, -2.971380484772099e-04, -2.971380484772099e-04, -4.827366334514671e-03, -4.834328119579963e-03, -5.019969124748625e-03, -4.965505024527903e-03, -4.829903793808678e-03, -4.829903793808678e-03, -1.622361588116033e-02, -1.615942626406018e-02, -3.714308833441129e-03, -1.651275175956021e-02, -1.620464492708514e-02, -1.620464492708514e-02, -3.552929744759195e-09, -8.301617359058328e-09, -2.826033562001704e-03, -3.590262655364329e-18, -6.877908094538855e-09, -6.877908094538855e-09, -1.386375494063266e-04, -1.385904519772414e-04, -1.386325791097617e-04, -1.385959602863586e-04, -1.386136083653898e-04, -1.386136083653898e-04, -8.497599172076647e-04, -8.392460908045499e-04, -8.540661453603729e-04, -8.457813889807472e-04, -8.371636732451601e-04, -8.371636732451601e-04, -5.833901685205987e-03, -5.216582021982748e-03, -6.250127381633946e-03, -5.914318683588190e-03, -5.546589109451996e-03, -5.546589109451996e-03, -1.417203460823554e-02, -1.618941067827585e-02, -1.402093028724282e-02, -8.793887701286235e-04, -1.559417415834095e-02, -1.559417415834095e-02, -8.223907819032320e-19, -1.505220210979151e-16, -7.462535153933825e-22, -7.162932029388951e-03, -4.304603832841674e-18, -4.304603832841674e-18, -5.594095692306796e-03, -5.634517433082545e-03, -5.619978936621069e-03, -5.608799408713719e-03, -5.614390771900814e-03, -5.614390771900814e-03, -5.843548417450099e-03, -7.016089525832454e-03, -6.642125032163292e-03, -6.319936126282776e-03, -6.481275631030108e-03, -6.481275631030108e-03, -4.884970962146086e-03, -1.461870988656542e-02, -1.301932932333610e-02, -1.049855887568831e-02, -1.177038666919955e-02, -1.177038666919955e-02, -7.949250947860744e-03, -2.127634336556608e-03, -5.585396022917930e-03, -1.108608148043762e-02, -1.134066776560341e-02, -1.134066776560341e-02, -5.502201951529769e-08, -4.308676967829151e-59, -2.936898212069760e-31, -1.061693394414700e-02, -3.585743453015679e-21, -3.585743453015430e-21])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
