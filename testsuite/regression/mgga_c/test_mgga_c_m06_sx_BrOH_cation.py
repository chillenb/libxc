
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m06_sx_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_sx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.621559550213152e-01, -1.621556448172776e-01, -1.621544498768394e-01, -1.389654259433959e-01, -1.389648541035468e-01, -1.123562632679740e-01, -1.034072947392821e-01, -6.281377401244030e-02, -6.294758762001913e-02, -6.289504560138157e-02, -6.289892721118567e-02, -1.033993092939783e-01, -1.088723905588250e-01, -7.413429539373499e-02, -1.942820878332868e-02, -7.473759687485887e-02, -1.146312312334111e-01, -2.045678472906094e-02, -4.520176438236957e-02, -4.512208259896106e-02, -8.381491827374440e-02, 2.090276040046865e-02, 1.818691808221572e-02, -2.746355400906662e-02, 7.853331779804591e-03, 7.081460541726222e-03, 2.323821054769256e-02, 4.810895852570741e-03, 3.403872386894560e-03, 3.403872386894560e-03, -8.687976571896452e-02, -8.693858581475643e-02, -8.688312224954316e-02, -8.693501483565540e-02, -1.030688969302784e-01, -1.030538505178668e-01, -4.996090447162867e-02, -5.091043750644540e-02, -4.919090502001990e-02, -5.007511217717939e-02, -9.146710985779458e-02, -5.085007997822478e-02, -5.577525109494955e-02, -4.587087294296701e-02, -3.674369209127630e-02, -4.031598636648214e-02, -5.459389495592180e-02, -4.163358356040803e-02, 3.669670587419486e-02, -4.433583452916504e-02, 3.750614113401047e-02, -6.160108652337860e-02, 2.621957244702178e-02, 2.621957244702177e-02, 3.209862788525222e-03, 4.712228530055981e-03, 3.647654291348309e-03, 1.901053005724042e-02, 3.615966466672035e-03, 3.615966466672030e-03, -4.890530233707942e-02, -4.760239762956113e-02, -6.041895465252223e-02, -5.437950305430025e-02, -6.036005157882408e-02, -5.432297657153874e-02, -4.824468181634904e-02, -5.362586345919372e-02, -5.266464226957404e-02, -4.327030011149696e-02, -4.162463292786826e-02, -5.250681501341591e-02, -5.701756564578363e-02, -3.684861924369922e-03, -5.218407199104713e-02, -5.054867904794539e-02, -2.204342574215679e-02, -5.099962216402865e-02, -3.359385126491440e-02, -3.358096744328844e-02, 3.518592679206561e-02, -2.996121624614535e-02, 3.484829616614297e-02, 3.484829616614296e-02, -4.112762362488734e-03, 1.351396669833190e-03, -1.020883342694708e-03, -1.078149354971620e-01, 3.486266232834238e-03, 2.484781129196900e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m06_sx_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_sx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.509609265769851e-01, -1.509546267416122e-01, -1.509611372040657e-01, -1.509555484115706e-01, -1.509652681846767e-01, -1.509560981813286e-01, -1.576417080830055e-01, -1.040800804557468e-01, -1.576423947746945e-01, -1.040982662240080e-01, -1.236008911071184e-01, -1.236093194525397e-01, -1.339466048350633e-02, -9.508131813156193e-02, -6.462925946306726e-02, -6.463712446504251e-02, -6.456499510068631e-02, -6.455145467020994e-02, -6.459191570587054e-02, -6.458680118222321e-02, -6.468279938284632e-02, -6.448758716552065e-02, -9.538379980419942e-02, -1.335012265490560e-02, -1.918848102815715e-02, -1.864822372382223e-02, -5.752533647283010e-02, -2.557910443892852e-02, -6.784466911683623e-02, -7.190338840363214e-02, -3.647323448227693e-02, -5.635725216791557e-02, -1.165800758103467e-02, -1.379425722795326e-02, -4.887625688687738e-02, -9.098840070461800e-02, -4.375340223928023e-02, -4.127427742764428e-02, -4.333481359490879e-02, -3.548030143224454e-02, -1.359662566936143e-01, -6.474860855279692e-02, -4.516089214704586e-02, -3.192207054066763e-02, 2.189130840740536e-02, -1.736625227626726e-01, -4.642731381619529e-02, 1.055084508977164e-02, 1.335822829835176e-02, 1.104766021524945e-02, 9.142652264741797e-03, 1.101684995896980e-02, 2.570895954057564e-02, 9.075364860520328e-03, 7.341809076567516e-03, 7.739600828797619e-03, 3.783083185518976e-03, 1.866388607462302e-02, 3.783083185518975e-03, 1.866388607462302e-02, -1.057888678189622e-01, -1.058743934907405e-01, -1.060206911819559e-01, -1.061030841610266e-01, -1.058034242263475e-01, -1.058862922436692e-01, -1.060055846070614e-01, -1.060903913479962e-01, -1.217928579581302e-01, -9.745418241531760e-02, -9.737632290944426e-02, -1.218894942719291e-01, -5.999550629968497e-02, -5.992350685686842e-02, -5.899249384039011e-02, -5.903183321946381e-02, -6.129360357869646e-02, -6.034287867496543e-02, -6.031358986113630e-02, -5.938760565784806e-02, -7.832754176478780e-03, -8.111329672363365e-02, -5.813601359911925e-02, -5.999919832532236e-02, -2.405562933646374e-02, -6.326604193163279e-02, -5.381673426179073e-02, -5.425619843112808e-02, -4.194267936008559e-02, -3.455398737731544e-02, -4.389888329799052e-02, -3.876403443023798e-02, -2.454460283309075e-02, -7.101442943634950e-02, -3.911548819217966e-02, -4.785935600535077e-02, 4.468212288251360e-03, 5.366308296025990e-03, -5.509378154865800e-02, -1.092631130500707e-01, 8.854882553254709e-03, 1.398242119993768e-02, -6.272367678921534e-02, -6.286492021858145e-02, -3.836669648929950e-02, -1.059590425180831e-02, -3.836669648929947e-02, -1.059590425180833e-02, 3.813901451294492e-03, 5.593309243597057e-03, 7.564604988035333e-03, 7.215304333248921e-03, 6.319159469817423e-03, 5.278220751256549e-03, -3.873216634913349e-02, -2.458497738464913e-03, 1.069536381157701e-02, 4.083609101321536e-03, 1.069536381157702e-02, 4.083609101321529e-03, -6.742205340960453e-02, -6.661107019782073e-02, -6.475301253264068e-02, -6.403395662767460e-02, -6.682899756773478e-02, -6.589200441559295e-02, -6.781670021659592e-02, -6.474047194374694e-02, -6.691232810644604e-02, -6.599072041797407e-02, -6.781577548333642e-02, -6.421198508163645e-02, -6.651517941759341e-02, -6.584060958373246e-02, -1.647948668938841e-02, -5.724355385070552e-02, -2.931961946134383e-02, -6.093595779684598e-02, -5.185084552102528e-02, -5.126613069291390e-02, -4.660497028013216e-02, -4.603361663942181e-02, -3.681269517249311e-02, -6.262642589312238e-02, -4.111088712462123e-02, -6.804998147023429e-02, -5.703607885801374e-02, -5.471643839481140e-02, -4.303911413991364e-02, -2.699279226758659e-02, -4.740962150633765e-02, -5.883312835532624e-03, -3.944937243955085e-02, -3.933220179816273e-02, -1.006877634856212e-02, -4.306597817397102e-02, -3.656862234441718e-02, -3.509167634850943e-02, -7.390130134546979e-02, -7.246637971126937e-02, 4.067672990420895e-02, 3.764878828119277e-02, -3.355484080569320e-02, -3.069206572894652e-02, 8.622558144194003e-03, 1.641443185153818e-02, 8.622558144194093e-03, 1.641443185153819e-02, -6.325563498022668e-03, -6.079998479296683e-03, 2.181333305497571e-03, 2.165499768478914e-03, -1.341747055790213e-03, -1.355854471140685e-03, -1.542321499210140e-01, -1.512776083160110e-01, 9.570832305144120e-03, 4.011903751341669e-03, 9.529736015732209e-03, 1.006098354372049e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_sx_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_sx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([2.846825633482522e-10, 0.000000000000000e+00, 2.847515405470154e-10, 2.846903694376185e-10, 0.000000000000000e+00, 2.847569693946582e-10, 2.847087326427629e-10, 0.000000000000000e+00, 2.847866992370358e-10, 3.822457096534733e-10, 0.000000000000000e+00, -2.685095343216848e-10, 3.822789519539824e-10, 0.000000000000000e+00, -2.683958676044066e-10, -1.924181525815802e-10, 0.000000000000000e+00, -1.923968990893255e-10, -2.041992087285973e-06, 0.000000000000000e+00, 1.803576017927293e-06, -1.336705185534032e-06, 0.000000000000000e+00, -1.336667146899397e-06, -1.344628385087361e-06, 0.000000000000000e+00, -1.344888645325076e-06, -1.340967731751994e-06, 0.000000000000000e+00, -1.340885419741970e-06, -1.341262402483567e-06, 0.000000000000000e+00, -1.342695713567119e-06, 1.795167629229640e-06, 0.000000000000000e+00, -2.052213173753954e-06, 1.619805659574628e-03, 0.000000000000000e+00, 1.676091929873603e-03, 5.166499930220989e-03, 0.000000000000000e+00, -1.675446358605412e-03, -4.144695955942704e-04, 0.000000000000000e+00, -3.449124096898211e-04, -1.372710950053555e-03, 0.000000000000000e+00, 5.723034987352439e-03, 2.456308050961490e-03, 0.000000000000000e+00, 1.931262364980320e-03, -7.802626160031250e-04, 0.000000000000000e+00, -4.501265723737463e-05, 2.670095652235516e+00, 0.000000000000000e+00, -4.719915523720600e-02, 2.539326335553810e+00, 0.000000000000000e+00, -1.377869554144642e-01, 3.639297122119452e-04, 0.000000000000000e+00, 2.407784540895346e-03, 8.729961494603077e-01, 0.000000000000000e+00, 5.941820895355082e-01, -5.374230491897712e-01, 0.000000000000000e+00, 1.163147812929488e+01, 7.547207875734324e-02, 0.000000000000000e+00, 5.137754695755130e+01, -1.626037606390202e+03, 0.000000000000000e+00, -1.433702101493895e+03, -9.534022184340248e+06, 0.000000000000000e+00, -1.220916592288327e+03, -6.285477903702264e+03, 0.000000000000000e+00, 1.028859201199203e+01, -4.263717408556819e+03, 0.000000000000000e+00, -4.442088165590427e+03, -2.067796990395636e+03, 0.000000000000000e+00, -8.977241725992017e+03, -2.067796990395636e+03, 0.000000000000000e+00, -8.977241725992071e+03, 1.624434713192014e-08, 0.000000000000000e+00, 1.619672825511951e-08, 2.140502083104603e-08, 0.000000000000000e+00, 2.117188681468713e-08, 1.660831628348048e-08, 0.000000000000000e+00, 1.641259926866772e-08, 2.102019697918701e-08, 0.000000000000000e+00, 2.094234027396703e-08, 4.342461741665792e-07, 0.000000000000000e+00, -3.053402300735432e-08, -3.029658096003602e-08, 0.000000000000000e+00, 4.345679385334421e-07, -1.593261292753693e-05, 0.000000000000000e+00, -1.597172472187558e-05, -1.624492964874815e-05, 0.000000000000000e+00, -1.628550747113496e-05, -1.562337809473598e-05, 0.000000000000000e+00, -1.565760758850177e-05, -1.596027975497143e-05, 0.000000000000000e+00, -1.597707626607548e-05, -2.634425985567230e-05, 0.000000000000000e+00, 2.773166330961938e-05, -1.621036065842037e-05, 0.000000000000000e+00, -1.632405916638844e-05, -9.809074923458311e-03, 0.000000000000000e+00, 7.287209132819111e-03, -3.009576704601275e-03, 0.000000000000000e+00, -2.634483742305085e-03, -9.539578421795288e-03, 0.000000000000000e+00, -8.227133564409118e-03, -9.644752545927776e-03, 0.000000000000000e+00, -7.657625682760570e-03, -7.694823318991527e-03, 0.000000000000000e+00, 6.771230865980318e-03, -5.565494835088879e-03, 0.000000000000000e+00, -7.980596766317070e-03, 1.015720308094557e+00, 0.000000000000000e+00, 8.320195561500157e-01, 1.804650860690221e+00, 0.000000000000000e+00, 6.324768979400317e-01, 1.565495064992745e+00, 0.000000000000000e+00, 3.105499070021892e-01, -2.804459858511009e-05, 0.000000000000000e+00, -2.809993242002355e-05, 2.220214636712988e+00, 0.000000000000000e+00, 5.553983741359267e-01, 2.220214636712988e+00, 0.000000000000000e+00, 5.553983741359282e-01, -3.205190526853634e+08, 0.000000000000000e+00, -5.930442383807595e+03, -4.513503204088456e+03, 0.000000000000000e+00, -4.102680268831737e+03, -2.254836980296470e+04, 0.000000000000000e+00, -2.094392415589461e+04, 1.595294555345174e+01, 0.000000000000000e+00, -6.194799755389394e+02, -9.318606412525405e+03, 0.000000000000000e+00, -8.483158202354351e+03, -9.318606412525405e+03, 0.000000000000000e+00, -8.483158202354338e+03, 4.298816060176874e-02, 0.000000000000000e+00, 4.375744419034108e-02, 1.580811577817175e-02, 0.000000000000000e+00, 1.628048722822510e-02, 2.490873748396543e-02, 0.000000000000000e+00, 2.514961705045564e-02, 3.077925077177899e-02, 0.000000000000000e+00, 2.951504377313785e-02, 2.728691579654009e-02, 0.000000000000000e+00, 2.752696263073553e-02, 2.796468145350355e-02, 0.000000000000000e+00, 2.551246895528081e-02, 4.171197473113204e-02, 0.000000000000000e+00, 4.269761504755661e-02, -2.196918298935497e-02, 0.000000000000000e+00, 1.598543418291512e-02, -1.768176323562451e-02, 0.000000000000000e+00, 1.362386979005818e-02, -5.787522440076739e-03, 0.000000000000000e+00, -5.462138934223536e-03, -1.043851401824159e-02, 0.000000000000000e+00, -1.004284309945984e-02, -1.403650499379801e-02, 0.000000000000000e+00, 1.352675887251177e-02, -4.523104757059813e-03, 0.000000000000000e+00, 4.772663566005069e-03, 5.201107165290709e-02, 0.000000000000000e+00, 4.234269343187546e-02, 3.925890299502916e-01, 0.000000000000000e+00, -8.081263026612952e-02, 8.998956785576975e-02, 0.000000000000000e+00, -7.846355361512281e-02, -5.338887319457292e-02, 0.000000000000000e+00, -5.384181174345617e-02, -1.040564431159311e-01, 0.000000000000000e+00, 1.877580329363848e-01, -1.926148844622127e-02, 0.000000000000000e+00, -1.886014312231748e-02, -5.520630112885173e+03, 0.000000000000000e+00, -5.391973884367267e+03, -4.142948309714311e+00, 0.000000000000000e+00, -5.162727176021318e+00, -7.893614671036754e-02, 0.000000000000000e+00, -7.624591454676906e-02, 2.998126436929181e+00, 0.000000000000000e+00, 1.639762465511411e-01, 2.998126436929179e+00, 0.000000000000000e+00, 1.639762465511453e-01, -2.401564568486296e+06, 0.000000000000000e+00, -2.084808204276749e+06, -7.864811352945978e+04, 0.000000000000000e+00, -7.810158709814101e+04, -1.297631123484683e+09, 0.000000000000000e+00, -1.020241784175245e+09, 8.785524793782984e+01, 0.000000000000000e+00, 7.208699972310788e+01, -1.681337051741071e+04, 0.000000000000000e+00, -1.041247456641868e+04, -1.655957043492060e+04, 0.000000000000000e+00, -1.344158381673729e+08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_sx_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_sx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.240694912505296e-05, -1.240816800236085e-05, -1.240678683572801e-05, -1.240790357132844e-05, -1.240562476426432e-05, -1.240725166318531e-05, -1.448888316477487e-05, 2.824570298810427e-05, -1.448749118980330e-05, 2.824001954032002e-05, 2.640050356696529e-05, 2.639902523313290e-05, 7.034264237903562e-04, -4.854795734285075e-04, 6.875797655852691e-04, 6.875650312749080e-04, 6.901549314828114e-04, 6.902446930217664e-04, 6.890433034530488e-04, 6.890177362094285e-04, 6.890098180663918e-04, 6.895393701669880e-04, -4.836765245632488e-04, 7.058544646285954e-04, -9.803055069830535e-03, -9.892035662992063e-03, -6.872397847523765e-03, 5.426429867094203e-03, 5.501494014552051e-03, 5.492068754398688e-03, 5.004162033774543e-03, -6.899972245458907e-03, -1.044142317425433e-02, -1.042258273330068e-02, 5.841307069922517e-03, 5.526084058107090e-03, -4.075780012909876e-02, 2.478572795169962e-02, -4.193857261869570e-02, 2.626389928589944e-02, 1.856748412767742e-03, -3.685218391157627e-03, 1.685462814260804e-02, 1.920218145926149e-02, 2.769999220286511e-02, 8.677476420212880e-03, 2.317828642539496e-02, -8.951521556684684e-02, 2.614792891613776e-03, 2.752285263173726e-03, -2.260043289549159e-05, 2.932098716434559e-03, 6.681363952005789e-04, 6.699984696757180e-03, 1.469826861168236e-03, 1.456561784835192e-03, 2.323641576779409e-03, 1.897718263088242e-03, 2.323641576779409e-03, 1.897718263088251e-03, 1.460595317853784e-04, 1.463228015542498e-04, 1.406273765084547e-04, 1.411087668855273e-04, 1.456706987831196e-04, 1.461040267808221e-04, 1.410404137975816e-04, 1.413425551258561e-04, -1.540492574918388e-04, 1.643515332075307e-04, 1.639481275621979e-04, -1.538468810833327e-04, 1.618673347095949e-03, 1.621025525899447e-03, 1.645884626085870e-03, 1.648439989115197e-03, 1.595963530245924e-03, 1.596832461698483e-03, 1.622169357383501e-03, 1.622295602118475e-03, 1.650868991884017e-03, -1.292703882055113e-03, 1.642115218362852e-03, 1.650491375463037e-03, 1.741456241498652e-02, -8.675137575916089e-03, 1.154758008975243e-02, 1.077250387478014e-02, 1.754843777612263e-02, 1.609658015680995e-02, 1.895688432588535e-02, 1.644593377543566e-02, 1.534663083096208e-02, -7.338163111162751e-03, 1.451829292892247e-02, 1.813021993156521e-02, 1.228316478242701e-02, 1.238396666683031e-02, -1.998354293066780e-02, 1.139118706093148e-02, 1.136458925527840e-02, 1.245614473276000e-02, 2.296782440212672e-03, 2.299386953724874e-03, 1.575271639218349e-02, 2.075981884325311e-02, 1.575271639218351e-02, 2.075981884325311e-02, -9.651976622500955e-07, 9.729952609093581e-04, 1.385730947875185e-03, 1.317549787702522e-03, 2.904024918913910e-03, 3.196965342613785e-03, 7.966173442476430e-03, 8.906387957911217e-03, 1.282780036422940e-03, 2.997227931164453e-03, 1.282780036422940e-03, 2.997227931164450e-03, -6.044497853522054e-02, -6.268567515662567e-02, -1.695610610772234e-02, -1.816858214234378e-02, -3.710585739368851e-03, -3.930679078571435e-03, -3.988190837843673e-03, -3.990808920169879e-02, -3.620492768661575e-03, -3.839708295312318e-03, -4.119621860190681e-03, -3.348573662747992e-02, -5.284697783317061e-02, -5.510128298752406e-02, 2.199714638017298e-02, -1.222542166820700e-02, 2.193290565463800e-02, -1.014058680708032e-02, 1.434012636246143e-02, 1.388477990312692e-02, 1.884111947628683e-02, 1.838931323962558e-02, 2.000033086713739e-02, -8.985840197337055e-03, 1.347228620089193e-02, -6.083396294147249e-03, 2.130737933326187e-02, 2.131786666752963e-02, -2.848288143930071e-02, 2.016484061640355e-02, -2.245918332834035e-02, 2.735504153388888e-02, 2.719057020390665e-02, 2.730477283793379e-02, 2.575520375400204e-02, -2.701506416362857e-02, 2.169584188178737e-02, 2.143275547199644e-02, 1.890419869768494e-02, 1.832300780658201e-02, 7.792504206312204e-03, 8.181147970354847e-03, 3.560771482375977e-02, 3.493902119650738e-02, 1.293353093139808e-02, 1.562174596413485e-02, 1.293353093139808e-02, 1.562174596413484e-02, 6.095992683110888e-04, 5.087949499137170e-04, 4.686729967323948e-04, 4.686133811099925e-04, 4.037036797837413e-05, 2.933079945476243e-05, 1.626003857164844e-02, 1.817724436190861e-02, 1.967244254620312e-03, 2.835129092041942e-03, 1.965211503211671e-03, -4.659417571459886e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
