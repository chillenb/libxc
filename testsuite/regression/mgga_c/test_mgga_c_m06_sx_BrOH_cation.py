
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m06_sx_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_sx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.116807519694102e-01, -1.116812690405628e-01, -1.116835928101663e-01, -1.116759417863804e-01, -1.116799473944350e-01, -1.116799473944350e-01, -6.927560220625159e-02, -6.927823062602770e-02, -6.932489369625293e-02, -6.908625705345300e-02, -6.920260626683855e-02, -6.920260626683855e-02, -4.301677900435261e-02, -4.276903097950889e-02, -3.623999132752443e-02, -3.492883912202079e-02, -3.731516536492103e-02, -3.731516536492103e-02, -5.123725865333467e-03, -6.416972819089643e-03, -8.193543829207073e-02, 1.676206285998804e-02, 1.334165852145093e-02, 1.334165852145093e-02, 7.869388373399866e-03, 8.230975618245538e-03, 3.108651683459977e-02, 4.946792688199863e-03, 3.492278292660840e-03, 3.492278292660841e-03, -8.688635238150076e-02, -8.694659467551955e-02, -8.688962330925870e-02, -8.694275115356653e-02, -8.691664564303175e-02, -8.691664564303175e-02, -4.704315012388722e-02, -4.822352318859975e-02, -4.661599619249189e-02, -4.774638529452063e-02, -4.789757465806983e-02, -4.789757465806983e-02, -4.045019178743141e-02, -5.595710142874791e-02, -3.818925953174922e-02, -5.479425656820026e-02, -4.172116309558144e-02, -4.172116309558141e-02, 3.508671667382979e-02, 8.030420539323235e-03, 3.609233313420546e-02, -8.619040508805698e-02, 2.454941025724889e-02, 2.454941025724888e-02, 4.130114961565275e-03, 4.990688695598757e-03, 3.768256280392307e-03, 3.678525664965245e-02, 3.762376863662134e-03, 3.762376863662130e-03, -5.381825267687914e-02, -4.962329556356720e-02, -5.077459117783382e-02, -5.193932201357952e-02, -5.132807425708000e-02, -5.132807425708000e-02, -5.713895887493968e-02, -3.594951203058736e-02, -3.918255295163084e-02, -4.329048351202915e-02, -4.097405868181386e-02, -4.097405868181386e-02, -5.724401212819918e-02, -3.975223453451717e-03, -1.380106817598867e-02, -2.571041208779290e-02, -2.075651571643163e-02, -2.075651571643162e-02, -3.118449640482184e-02, 3.026173911312489e-02, 3.557380392567506e-02, -2.842297618377126e-02, 3.402997017767431e-02, 3.402997017767430e-02, 1.127517687630073e-02, 1.588129815367247e-03, 2.771055140657473e-03, 3.436999469110662e-02, 3.616426793434546e-03, 3.616426793434550e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m06_sx_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_sx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.374431874465687e-01, -1.373952408166163e-01, -1.374441058195907e-01, -1.373964081637050e-01, -1.374426105453894e-01, -1.373924633842393e-01, -1.374255475691456e-01, -1.373781541139263e-01, -1.374410436506122e-01, -1.373811961267591e-01, -1.374410436506122e-01, -1.373811961267591e-01, -1.398418570860961e-01, -1.399837559196227e-01, -1.398334291158402e-01, -1.399942638702643e-01, -1.399143219242507e-01, -1.399046542259851e-01, -1.395415345892539e-01, -1.396618263859873e-01, -1.402247898708007e-01, -1.392996551553465e-01, -1.402247898708007e-01, -1.392996551553465e-01, -8.834823410220510e-02, -8.936009470050515e-02, -8.808793546547752e-02, -8.945948861840319e-02, -8.907424928136293e-02, -8.658394958887639e-02, -8.525816048110477e-02, -8.524046924023337e-02, -9.738136322879343e-02, -7.804627475943329e-02, -9.738136322879343e-02, -7.804627475943329e-02, -5.777524061483306e-02, -4.123115827338939e-02, -5.776719112424397e-02, -3.962933198753492e-02, -1.130472621293739e-01, -1.130785381317064e-01, -5.443053834622440e-02, -4.821296232865514e-02, 9.974962672948909e-03, -2.235882371792568e-01, 9.974962672948876e-03, -2.235882371792573e-01, 1.336353624687372e-02, 1.104928513391582e-02, 1.412523710246276e-02, 1.138913320151152e-02, 4.031958198177868e-02, 3.465432092937106e-02, 7.380768203263098e-03, 7.771686094212719e-03, 3.797786769322234e-03, 1.871492905802942e-02, 3.797786769322231e-03, 1.871492905802941e-02, -1.066498021159964e-01, -1.066806116569868e-01, -1.068723305285940e-01, -1.069003751457290e-01, -1.066439608540794e-01, -1.066784422489021e-01, -1.068389247784090e-01, -1.068751198970690e-01, -1.067766258355940e-01, -1.067926374682569e-01, -1.067766258355940e-01, -1.067926374682569e-01, -7.061580261613995e-02, -7.000943246254505e-02, -6.867041698306980e-02, -6.824349243672634e-02, -6.936138453742663e-02, -6.904891357964638e-02, -6.756275695917649e-02, -6.716774604802572e-02, -7.049595944423011e-02, -6.941600612659829e-02, -7.049595944423011e-02, -6.941600612659829e-02, -7.434576996685290e-02, -7.368224914319822e-02, -8.034472095161879e-02, -7.923787457631634e-02, -8.360394406829733e-02, -7.125334025917431e-02, -8.452881007385835e-02, -7.554103658074615e-02, -6.814073919951542e-02, -8.383119352877719e-02, -6.814073919951538e-02, -8.383119352877715e-02, -7.028987811611875e-03, -4.899947668654918e-03, -5.752990146411401e-02, -5.574454028725592e-02, -2.372983156528398e-03, 3.650044463643230e-03, -1.088283642228946e-01, -1.088897113276973e-01, -4.573308489705123e-02, -1.806687261529011e-02, -4.573308489705124e-02, -1.806687261529010e-02, 6.434315059711955e-03, 5.709418648064798e-03, 7.633438180253298e-03, 7.291730168425459e-03, 6.348090296556129e-03, 5.311447604451876e-03, 2.620840599374710e-02, 2.557032074692887e-02, 1.080697446835036e-02, 4.086636596130776e-03, 1.080697446835036e-02, 4.086636596130772e-03, -6.914202218936397e-02, -6.818311418072147e-02, -7.034527649781749e-02, -6.940663396656374e-02, -7.050963757178275e-02, -6.954089145834952e-02, -7.017238932362511e-02, -6.921685598282315e-02, -7.039979305545566e-02, -6.943450491338662e-02, -7.039979305545566e-02, -6.943450491338662e-02, -6.716634744628046e-02, -6.636915400760872e-02, -4.142049628284091e-02, -4.065176863265055e-02, -5.013741756560126e-02, -4.947300255535660e-02, -6.359385768448808e-02, -6.295775526700488e-02, -5.707509200427795e-02, -5.614913524407093e-02, -5.707509200427795e-02, -5.614913524407095e-02, -8.347336435147840e-02, -8.134331477184589e-02, -5.767913127786323e-02, -5.539873777010502e-02, -5.160835028663142e-02, -4.808772834998683e-02, -5.147795612370183e-02, -5.126390873269704e-02, -4.403854163921436e-02, -4.409237800618625e-02, -4.403854163921435e-02, -4.409237800618623e-02, -5.240640655799837e-02, -4.975004762023154e-02, 3.797372283680450e-02, 3.725774695405552e-02, 3.786426926966634e-02, 3.519707956586001e-02, -5.951479716732677e-02, -4.866757887009195e-02, 3.463699168789261e-04, 9.903571489670235e-03, 3.463699168789703e-04, 9.903571489670207e-03, 1.726009255415086e-02, 1.547017546417989e-02, 2.245610760969000e-03, 2.243156546468754e-03, 4.808621378963222e-03, 3.962683555928327e-03, 1.086601095608803e-02, 1.153976239686312e-02, 9.666972397368214e-03, 4.014517114958103e-03, 9.666972397368197e-03, 4.014517114958101e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_sx_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_sx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.290712819872962e-11, 0.000000000000000e+00, -7.323918568512661e-11, -7.289201312223058e-11, 0.000000000000000e+00, -7.322915671875274e-11, -7.291159116490942e-11, 0.000000000000000e+00, -7.323331660615034e-11, -7.307092931965176e-11, 0.000000000000000e+00, -7.345068412025451e-11, -7.288342769930856e-11, 0.000000000000000e+00, -7.342147028812897e-11, -7.288342769930856e-11, 0.000000000000000e+00, -7.342147028812897e-11, 3.010653051199289e-06, 0.000000000000000e+00, 3.020485765135146e-06, 3.010292201325340e-06, 0.000000000000000e+00, 3.021130333842826e-06, 3.013492035574952e-06, 0.000000000000000e+00, 3.017361085402256e-06, 2.973306538297554e-06, 0.000000000000000e+00, 2.982643005258992e-06, 3.011904491889707e-06, 0.000000000000000e+00, 2.985348439350348e-06, 3.011904491889707e-06, 0.000000000000000e+00, 2.985348439350348e-06, 6.610635683631060e-03, 0.000000000000000e+00, 6.951246955220585e-03, 6.528826191607603e-03, 0.000000000000000e+00, 6.954630256001656e-03, 6.038013646927710e-03, 0.000000000000000e+00, 5.488606352788232e-03, 5.087124922659986e-03, 0.000000000000000e+00, 5.188825128837295e-03, 8.265049190841122e-03, 0.000000000000000e+00, 2.988787594890335e-03, 8.265049190841122e-03, 0.000000000000000e+00, 2.988787594890335e-03, 3.885439021408388e-01, 0.000000000000000e+00, 5.430943785797303e-02, 3.824669949728379e-01, 0.000000000000000e+00, 2.682064496900795e-02, 5.734083908310420e-03, 0.000000000000000e+00, 5.695362338200600e-03, 1.838272286943864e+00, 0.000000000000000e+00, 1.343977888172057e+00, -3.269639035870459e-01, 0.000000000000000e+00, 2.148983123370471e+01, -3.269639035870451e-01, 0.000000000000000e+00, 2.148983123370473e+01, -1.625419555346648e+03, 0.000000000000000e+00, -1.433334293474423e+03, -1.489064983397928e+03, 0.000000000000000e+00, -1.297668030813247e+03, -9.723038424442693e+00, 0.000000000000000e+00, -1.195246194457355e+01, -4.258468739266582e+03, 0.000000000000000e+00, -4.436288247138802e+03, -2.066594817982977e+03, 0.000000000000000e+00, -8.882227564746856e+03, -2.066594817982977e+03, 0.000000000000000e+00, -8.882227564746823e+03, 2.797176664136512e-08, 0.000000000000000e+00, 2.723106191506379e-08, 3.308608765256941e-08, 0.000000000000000e+00, 3.215695733060395e-08, 2.806418354135324e-08, 0.000000000000000e+00, 2.725456205180050e-08, 3.244506437282743e-08, 0.000000000000000e+00, 3.174819335511452e-08, 3.073513284930609e-08, 0.000000000000000e+00, 2.971689097812286e-08, 3.073513284930609e-08, 0.000000000000000e+00, 2.971689097812286e-08, -8.532667728570101e-06, 0.000000000000000e+00, -8.841769571513811e-06, -9.828399910088720e-06, 0.000000000000000e+00, -1.008963960987061e-05, -9.700969262694041e-06, 0.000000000000000e+00, -9.444182165448304e-06, -1.089288044986295e-05, 0.000000000000000e+00, -1.067313466776526e-05, -8.179340907054082e-06, 0.000000000000000e+00, -9.679126032119367e-06, -8.179340907054082e-06, 0.000000000000000e+00, -9.679126032119367e-06, 7.535850217285068e-03, 0.000000000000000e+00, 7.241764704065366e-03, 1.835847490669579e-02, 0.000000000000000e+00, 1.839300070284265e-02, 1.693739551059383e-02, 0.000000000000000e+00, 1.371049313837112e-02, 3.537834909365213e-02, 0.000000000000000e+00, 2.998318019869553e-02, 6.683964180627814e-03, 0.000000000000000e+00, 9.643668709965138e-03, 6.683964180627803e-03, 0.000000000000000e+00, 9.643668709965142e-03, 2.325377026014441e+00, 0.000000000000000e+00, 2.088401786088710e+00, 3.600552144448305e-01, 0.000000000000000e+00, 3.402339090727468e-01, 3.491871730216391e+00, 0.000000000000000e+00, 1.631881046943241e+00, 1.094975855465658e-04, 0.000000000000000e+00, 1.096833089426939e-04, 3.187433739042780e+00, 0.000000000000000e+00, 1.263360171820611e+00, 3.187433739042779e+00, 0.000000000000000e+00, 1.263360171820609e+00, -6.729758372489802e+03, 0.000000000000000e+00, -5.950750378052372e+03, -4.499597113643305e+03, 0.000000000000000e+00, -4.090170717961782e+03, -2.249138173843947e+04, 0.000000000000000e+00, -2.090536403463114e+04, 2.520916038961688e+00, 0.000000000000000e+00, 1.513851453453103e+00, -9.148946320394109e+03, 0.000000000000000e+00, -8.470049443301905e+03, -9.148946320394112e+03, 0.000000000000000e+00, -8.470049443301898e+03, 5.160167470744532e-02, 0.000000000000000e+00, 5.190707878850447e-02, 2.538492555906583e-02, 0.000000000000000e+00, 2.553784038761344e-02, 3.232316163624609e-02, 0.000000000000000e+00, 3.251394692484495e-02, 3.966577431209504e-02, 0.000000000000000e+00, 3.975973088199623e-02, 3.578205936845821e-02, 0.000000000000000e+00, 3.592295623346488e-02, 3.578205936845821e-02, 0.000000000000000e+00, 3.592295623346486e-02, 5.076268124114618e-02, 0.000000000000000e+00, 5.122843078919003e-02, -1.253538386788745e-02, 0.000000000000000e+00, -1.221959987508922e-02, -7.332867733963867e-03, 0.000000000000000e+00, -6.890105318051378e-03, 6.024823333386851e-03, 0.000000000000000e+00, 6.208074515089760e-03, -1.571020500656505e-03, 0.000000000000000e+00, -1.529294983334849e-03, -1.571020500656499e-03, 0.000000000000000e+00, -1.529294983334835e-03, 1.474960065007086e-02, 0.000000000000000e+00, 1.467570569694325e-02, 7.982456422641319e-02, 0.000000000000000e+00, 7.058550447521532e-02, 1.334081795308325e-02, 0.000000000000000e+00, 7.339965530549611e-03, 2.439400030535527e-02, 0.000000000000000e+00, 2.616283044827071e-02, -6.661847764969115e-03, 0.000000000000000e+00, -6.120558302455883e-03, -6.661847764969163e-03, 0.000000000000000e+00, -6.120558302455947e-03, -1.314846350271510e-03, 0.000000000000000e+00, -2.266463930647516e-03, -1.436262817222830e+01, 0.000000000000000e+00, -1.422456193701869e+01, -1.642317881850729e+00, 0.000000000000000e+00, -3.188353001961839e+00, 6.612398026245231e-02, 0.000000000000000e+00, 2.979803890619784e-02, 5.595214157582741e+00, 0.000000000000000e+00, 2.021503671158831e+00, 5.595214157582747e+00, 0.000000000000000e+00, 2.021503671158837e+00, -4.995305173111253e+02, 0.000000000000000e+00, -4.616335299287164e+02, -7.848988376633322e+04, 0.000000000000000e+00, -7.793413378556934e+04, -2.926352998635364e+04, 0.000000000000000e+00, -2.644802075608077e+04, 3.744336107618591e+00, 0.000000000000000e+00, 2.281609792711990e+00, -1.661929695795726e+04, 0.000000000000000e+00, -1.039381862789339e+04, -1.661929695795713e+04, 0.000000000000000e+00, -1.039381862789341e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_sx_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_sx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.956667302101139e-05, 1.958169164175224e-05, 1.956566530563580e-05, 1.958110009006676e-05, 1.956656599212353e-05, 1.958044758614582e-05, 1.957615899710588e-05, 1.959477840407817e-05, 1.956463064856433e-05, 1.959272493536621e-05, 1.956463064856433e-05, 1.959272493536621e-05, -2.210297459929369e-04, -2.218186179732197e-04, -2.209615175840761e-04, -2.218204114693455e-04, -2.198954843478685e-04, -2.203859829722813e-04, -2.166353989701160e-04, -2.174613440361958e-04, -2.191740913705577e-04, -2.186473250388136e-04, -2.191740913705577e-04, -2.186473250388136e-04, -5.076112960209758e-03, -5.294177584879154e-03, -5.020266029612704e-03, -5.285618760515504e-03, -4.381415274155187e-03, -4.040047355931912e-03, -3.762813406112883e-03, -3.862932040223547e-03, -5.594646443151704e-03, -1.858821887059039e-03, -5.594646443151704e-03, -1.858821887059039e-03, 2.333158420910197e-02, 3.001729131311005e-02, 2.261540003627003e-02, 2.987036551885424e-02, -5.269327046478178e-03, -5.472901856307147e-03, 5.446265124348173e-03, 1.053575977960914e-02, 1.884145151589966e-02, -8.531581677732498e-03, 1.884145151589965e-02, -8.531581677732530e-03, 2.582958658696405e-03, 2.737904825862636e-03, 2.709203531261288e-03, 2.908479671684706e-03, 5.854964272509603e-03, 6.420051352583945e-03, 1.297938328468527e-03, 1.310763373182607e-03, 2.238938330250188e-03, 1.499883701499300e-03, 2.238938330250185e-03, 1.499883701499305e-03, 1.376403308900754e-04, 1.383949863399839e-04, 1.322771370202076e-04, 1.332489298969977e-04, 1.374474182899345e-04, 1.383156645716669e-04, 1.328694032868622e-04, 1.336091993058743e-04, 1.348133102852429e-04, 1.358083628398395e-04, 1.348133102852429e-04, 1.358083628398395e-04, 1.077038033498812e-03, 1.093597343801030e-03, 1.165043063654227e-03, 1.179860221231012e-03, 1.149299673247445e-03, 1.134845302911874e-03, 1.231943900012747e-03, 1.219129834281138e-03, 1.063939476851343e-03, 1.145484807982789e-03, 1.063939476851343e-03, 1.145484807982789e-03, 5.009229025209121e-04, 7.748118414246451e-04, -7.192948988846149e-03, -7.502583986566557e-03, -2.964128920038990e-03, -3.487420352382595e-03, -7.996081010702113e-03, -9.222569347050874e-03, -2.291473476179651e-04, 5.115354515230759e-04, -2.291473476179553e-04, 5.115354515230664e-04, 8.342681769429414e-03, 8.152637695431201e-03, 1.540164662019722e-02, 1.518692813751224e-02, 7.259248335429778e-03, 8.676172368685701e-03, -1.153195053810371e-03, -1.152773204328061e-03, 1.087882801921948e-02, 1.550922476928502e-02, 1.087882801921949e-02, 1.550922476928505e-02, 6.235542168347163e-04, 6.376192415118962e-04, 1.083522020548356e-03, 1.006566848537454e-03, 2.553740610942328e-03, 2.792640311410246e-03, 7.068520371018488e-03, 8.631026568724115e-03, 6.922599504593972e-04, 2.918266309847735e-03, 6.922599504593979e-04, 2.918266309847734e-03, -4.013767070182517e-02, -4.128644238647210e-02, -2.032586101849278e-02, -2.121908405099549e-02, -2.719969814957343e-02, -2.823265606579890e-02, -3.345573246360523e-02, -3.445476803878742e-02, -3.029566580164592e-02, -3.131226895611433e-02, -3.029566580164592e-02, -3.131226895611433e-02, -1.795622835860180e-02, -1.881399208908640e-02, 1.819939522824576e-02, 1.793131493094204e-02, 1.531309759239424e-02, 1.483972919715631e-02, 4.855260825303460e-03, 4.455231199260414e-03, 1.105013110969912e-02, 1.082962953197953e-02, 1.105013110969912e-02, 1.082962953197951e-02, -6.279283997916126e-03, -6.683674132251259e-03, 1.829742235398239e-02, 1.821051335319391e-02, 1.631323665912875e-02, 1.622363294840174e-02, 4.520113946596743e-03, 3.945043100608562e-03, 1.394964994131315e-02, 1.389209354053937e-02, 1.394964994131317e-02, 1.389209354053938e-02, 8.825572883982847e-03, 9.157248510434961e-03, 6.512628875425548e-03, 6.399246661994563e-03, 6.428715927360040e-03, 6.812366809386331e-03, 2.278461745652068e-03, 6.513106007015945e-03, 9.541311934647441e-03, 1.180500881836996e-02, 9.541311934647429e-03, 1.180500881836996e-02, 1.851794210757746e-03, 1.857204103371461e-03, 2.079493132830420e-04, 1.558580968589914e-04, 1.385343656456967e-03, 1.501410742430867e-03, 1.094271584205081e-02, 1.327857969325416e-02, 1.188885555962220e-03, 2.758551531879619e-03, 1.188885555962222e-03, 2.758551531879620e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
