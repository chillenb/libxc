
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_rscan_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.694963022869784e-02, -2.694964117751430e-02, -2.694925322049520e-02, -2.694907586873423e-02, -2.694923126094406e-02, -2.694923126094406e-02, -4.825343710062478e-02, -4.824961058389731e-02, -4.812673198690797e-02, -4.797268221558475e-02, -4.807463838153411e-02, -4.807463838153411e-02, -4.141041094756272e-02, -4.125513401453496e-02, -3.753872954230967e-02, -3.747726271301882e-02, -3.761799200731910e-02, -3.761799200731910e-02, -1.538405502953909e-02, -1.594366445351850e-02, -4.879494207530496e-02, -1.488080618696538e-02, -1.673038933829194e-02, -1.673038933829193e-02, -3.760873885959681e-04, -4.058979427747451e-04, -3.142721650612959e-03, -1.739961668422051e-04, -2.466236217002092e-04, -2.466236217002092e-04, -2.639433951065454e-02, -2.640259610690518e-02, -2.639466603590887e-02, -2.640195658862178e-02, -2.639855426674764e-02, -2.639855426674764e-02, -2.534311327398990e-02, -2.492946137257603e-02, -2.474822622371072e-02, -2.438180401653145e-02, -2.539369255982702e-02, -2.539369255982702e-02, -2.902723939380071e-02, -3.276967979602483e-02, -3.543075829943792e-02, -4.374130082943550e-02, -2.876847370747979e-02, -2.876847370747979e-02, -1.018131625134425e-02, -1.490081120999490e-02, -9.551366835520797e-03, -5.526748801754369e-02, -1.217983751964369e-02, -1.217983751964369e-02, -1.248538759811847e-04, -1.720201465427188e-04, -1.481459552478921e-04, -5.928397271083462e-03, -1.752812832107816e-04, -1.752812832107816e-04, -2.451930289075590e-02, -2.416557056276287e-02, -2.428688204273308e-02, -2.438989778003967e-02, -2.433860070946464e-02, -2.433860070946464e-02, -2.566319003529102e-02, -2.160746858419962e-02, -2.271363451910785e-02, -2.386123929203659e-02, -2.334786851143597e-02, -2.334786851143597e-02, -3.613957076412585e-02, -1.579846397851329e-02, -1.915122227696316e-02, -2.766816750642768e-02, -2.220958773674111e-02, -2.220958773674110e-02, -2.488418779000876e-02, -2.927456503276111e-03, -4.278725141242131e-03, -2.710544649375928e-02, -8.070694048220493e-03, -8.070694048220493e-03, -5.803478631676228e-04, -3.137669179882234e-05, -8.419466482679115e-05, -6.942934893007633e-03, -1.617192011776290e-04, -1.617192011776279e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_rscan_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-4.057698947692900e-02, -4.057651407344834e-02, -4.057184914230623e-02, -4.057879393909474e-02, -4.057552132433202e-02, -4.057552132433202e-02, -6.885892017943834e-02, -6.884492072564075e-02, -6.846096801230044e-02, -6.845807957532793e-02, -6.852398048553600e-02, -6.852398048553600e-02, -7.440261697190081e-02, -7.411145069498139e-02, -6.792286579351113e-02, -7.039491727503625e-02, -6.988502953525495e-02, -6.988502953525495e-02, -4.604795370599396e-02, -4.699502050402972e-02, -8.774455380741862e-02, -2.906692737547819e-02, -3.904112417819943e-02, -3.904112417819942e-02, -7.352807933229682e-04, -7.929297552540625e-04, -6.407463727370374e-03, -3.426753303785149e-04, -4.843967298144639e-04, -4.843967298144639e-04, -2.943819988326309e-02, -2.942467785237006e-02, -2.943287003759822e-02, -2.942120978779585e-02, -2.943376980061078e-02, -2.943376980061078e-02, -5.527773145932285e-02, -5.357791790657913e-02, -5.459583896735705e-02, -5.299628189459341e-02, -5.461772576136378e-02, -5.461772576136378e-02, -4.064261452487584e-02, -2.676475557112573e-02, -4.598360176938095e-02, -2.968143448199824e-02, -3.907019381976400e-02, -3.907019381976400e-02, -1.895670295527324e-02, -5.539878166884171e-02, -1.810803669133532e-02, -3.002009096374244e-02, -3.357543521359622e-02, -3.357543521359629e-02, -2.465553548045962e-04, -3.388769722935922e-04, -2.926896250369545e-04, -1.534536431193521e-02, -3.456535730568754e-04, -3.456535730568755e-04, -2.568130190910755e-02, -2.824302296700020e-02, -2.741100827075073e-02, -2.666847951827959e-02, -2.704624513582995e-02, -2.704624513582996e-02, -2.411174947020359e-02, -3.967561755826590e-02, -3.700733969339438e-02, -3.319501747136302e-02, -3.531554203187859e-02, -3.531554203187860e-02, -2.666817244589803e-02, -4.943932133510229e-02, -5.200777049118101e-02, -4.872638212895109e-02, -5.026837624939602e-02, -5.026837624939597e-02, -4.564396745440980e-02, -5.909065206688308e-03, -9.778087088512105e-03, -4.261404916047542e-02, -2.333518399039419e-02, -2.333518399039418e-02, -1.127861697405765e-03, -6.239937790566281e-05, -1.667439893959002e-04, -1.990830260465400e-02, -3.191650726208665e-04, -3.191650726208655e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_rscan_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [8.192483444908276e-11, 8.192292132965590e-11, 8.189114893420570e-11, 8.191877844501362e-11, 8.190763586910115e-11, 8.190763586910115e-11, 1.380612704133543e-06, 1.380921029573102e-06, 1.388216406976364e-06, 1.378617211925044e-06, 1.382889881455502e-06, 1.382889881455502e-06, 1.355819307830781e-03, 1.350292771630338e-03, 1.192181264518190e-03, 1.007284478919162e-03, 1.070744457011600e-03, 1.070744457011600e-03, 5.191464782957735e-01, 5.308556880728507e-01, 8.545756136641198e-04, 2.184742232282244e-01, 4.545660982366805e-01, 4.545660982366815e-01, 3.726619718995546e+01, 3.547470527503359e+01, 2.120240182812041e+00, 8.498371210825846e+01, 6.852759867021622e+01, 6.852759867021632e+01, 1.227364525136488e-08, 1.224851862820994e-08, 1.222049442285836e-08, 1.220103886866534e-08, 1.228782875964691e-08, 1.228782875964691e-08, 8.460443112059905e-06, 7.821945246910548e-06, 8.039283025979713e-06, 7.466125127826959e-06, 8.299157842078695e-06, 8.299157842078695e-06, 6.273947847849218e-03, 6.616181193428564e-03, 1.035615855787202e-02, 1.445223536900174e-02, 5.880322703639805e-03, 5.880322703639805e-03, 2.526401697438309e-01, 4.452461629508671e-01, 3.476511767582074e-01, 6.180731510341954e-05, 1.099002127852361e+00, 1.099002127852365e+00, 1.522558713594435e+02, 9.755935151384928e+01, 4.708013488076385e+02, 2.542609217600822e+00, 2.174483327589067e+02, 2.174483327589064e+02, 5.896875471002732e-03, 5.343889420722216e-03, 5.520794780162844e-03, 5.681353169787680e-03, 5.600396484862812e-03, 5.600396484862815e-03, 7.903655075651647e-03, 6.739213467193608e-03, 6.739085960118582e-03, 6.956862915864763e-03, 6.868261975154762e-03, 6.868261975154761e-03, 5.936942875880768e-03, 1.622486958970960e-01, 1.050934475022423e-01, 5.560459363573403e-02, 7.532378139588768e-02, 7.532378139588770e-02, 1.447354160070599e-02, 2.022216513368157e+00, 2.061704491130274e+00, 7.673521608657387e-02, 2.545559772773071e+00, 2.545559772773071e+00, 1.844506840410931e+01, 2.058508264938564e+03, 4.159147590930814e+02, 2.522169123448047e+00, 2.845284009414881e+02, 2.845284009414892e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_rscan_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_rscan_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.103077024219765e-05, -1.103059419653722e-05, -1.102649041023822e-05, -1.102898912303432e-05, -1.102815600956003e-05, -1.102815600956003e-05, -4.993057338279599e-04, -4.995301585509466e-04, -5.054835943003465e-04, -5.038530018186161e-04, -5.037731888532138e-04, -5.037731888532138e-04, -6.865226326682815e-04, -7.049420118514984e-04, -9.648346305572130e-04, -3.092388587804913e-04, -5.056129346238890e-04, -5.056129346238890e-04, -3.737116853676873e-02, -3.987814269768994e-02, -3.875311351685858e-04, -2.197813378654878e-03, -1.606132789280925e-02, -1.606132789280916e-02, -9.901198967916356e-13, -5.350530959848245e-12, -5.566404220409190e-04, -8.763588962445953e-13, -2.507313572715371e-12, -2.507313572715450e-12, -2.912866511890890e-06, -2.850547325895820e-06, -2.793934689619749e-06, -2.744959719078063e-06, -2.941383773736099e-06, -2.941383773736099e-06, -8.380553031890427e-04, -7.944575235525754e-04, -7.872312104264080e-04, -7.474230778165918e-04, -8.380882390560261e-04, -8.380882390560261e-04, -1.560519074023884e-02, -1.960081504018210e-02, -1.794100332711496e-02, -2.380978025743313e-02, -1.540151145189917e-02, -1.540151145189917e-02, 8.032740093007068e-05, -3.297799809602261e-02, -3.338137433502727e-04, -3.417241861745961e-03, -1.678192174696483e-02, -1.678192174696494e-02, -9.941367871936756e-13, -3.528414293858402e-12, -1.053075346743361e-14, -5.449055245496526e-03, -4.541735624993595e-13, -4.541735624993561e-13, -1.684330509460822e-02, -1.495004579563313e-02, -1.555966539929768e-02, -1.610903556168039e-02, -1.583172476501728e-02, -1.583172476501729e-02, -1.998963026699734e-02, -1.091232583896218e-02, -1.253727663384414e-02, -1.473662438898039e-02, -1.360167463006706e-02, -1.360167463006707e-02, -1.920128409079052e-02, -2.382004213335296e-02, -2.610365779348510e-02, -2.822307227403384e-02, -2.741459179897642e-02, -2.741459179897640e-02, -1.744336076466959e-02, -4.229539393310212e-04, -1.930201749459055e-03, -3.549976585673578e-02, -1.222569176719479e-02, -1.222569176719480e-02, -5.109252878628557e-08, -3.430668188514996e-17, -2.182840073614183e-16, -1.002236149447394e-02, -8.531584532049271e-14, -8.531584532049588e-14]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
