
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_rscan_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-9.265783760760039e-02, -9.265535162792535e-02, -9.264532920545336e-02, -9.268212733205868e-02, -9.266270122851362e-02, -9.266270122851362e-02, -1.246213416143818e-01, -1.246186346892536e-01, -1.245446088253944e-01, -1.245782797404310e-01, -1.245712824572337e-01, -2.344382324508711e-02, -8.150792344964049e-02, -1.903848934337703e-02, -1.848623083923402e-02, -1.873511186006935e-02, -1.867872079644436e-02, -1.867872079644436e-02, -1.394704026957986e-02, -1.414608825422233e-02, -9.350603699400288e-02, -1.053113682889921e-02, -1.197087882545875e-02, -1.197087882545875e-02, -3.752969608554553e-04, -4.043342295309968e-04, -3.006770894735077e-03, -1.690554397653760e-04, -2.423674805307682e-04, -2.423674805307682e-04, -2.638748628300915e-02, -2.639582654344771e-02, -2.638796582272889e-02, -5.484344915146042e-02, -2.639166675215896e-02, -2.639166675215896e-02, -1.064122712314935e-01, -1.066394475347452e-01, -1.063022928170131e-01, -1.064442999068592e-01, -1.066168571923113e-01, -2.245106115096360e-02, -2.194107103768985e-02, -2.307883720109014e-02, -2.103684193380526e-02, -2.186504758504401e-02, -2.216299935947394e-02, -5.712251544026416e-02, -3.407918320670768e-02, -1.259698489983484e-02, -3.233296594790618e-02, -2.439951112505812e-02, -9.243807626673817e-03, -9.243807626673817e-03, -1.130614030145593e-03, -1.612449521113993e-04, -1.433344975083342e-04, -2.331384832604856e-02, -1.305936616784764e-03, -1.655366233430308e-04, -2.382863708468445e-02, -2.356680477191464e-02, -2.816522513293411e-02, -2.373437886717115e-02, -2.369617165436425e-02, -2.369617165436425e-02, -2.371386260334273e-02, -2.106617976452838e-02, -2.187346278504973e-02, -2.264947272640659e-02, -2.225670021742472e-02, -4.606567054908246e-02, -2.296077862260221e-02, -5.311267814329888e-02, -1.625478537067641e-02, -5.703247479211876e-02, -1.772508998369475e-02, -1.772508998369475e-02, -6.327756689612909e-02, -2.872884982296582e-03, -3.922013656692820e-03, -1.945525937830211e-02, -2.842712655123204e-02, -6.580397726471756e-03, -5.420728841374605e-04, -2.472863204531313e-05, -8.288757437547125e-05, -6.270602045790451e-03, -1.550602435844348e-04, -1.550602435844337e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_rscan_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.834446473962224e-02, 3.834265407382376e-02, 3.833536237315827e-02, 3.836215713576849e-02, 3.834801449194426e-02, 3.834801449194426e-02, -1.179974916700787e-01, -1.179388191116916e-01, -1.163688527069195e-01, -1.170112977474898e-01, -1.169398875677088e-01, -3.114363894937538e-02, -6.623214348734682e-02, -2.847892672865573e-02, -2.821448137945435e-02, -2.833445215453768e-02, -2.830878144928512e-02, -2.830878144928512e-02, -2.231841256962119e-02, -2.249671121410430e-02, -8.926431373285587e-02, -1.829022228973324e-02, -2.018499070769164e-02, -2.018499070769164e-02, -7.337320155192215e-04, -7.898678877794073e-04, -5.643015882912196e-03, -3.329335375870208e-04, -4.760242761569147e-04, -4.760242761569147e-04, -2.932656780630638e-02, -2.931642952224867e-02, -2.932598359122890e-02, 9.521763150133129e-04, -2.932149004718514e-02, -2.932149004718514e-02, -1.156302303576136e-01, -1.179648630173114e-01, -1.120093219970151e-01, -1.160403190121070e-01, -1.178935014938664e-01, -3.067260742675816e-02, -2.752305471424596e-02, -2.690879010150292e-02, -2.771406347289450e-02, -2.739164869066523e-02, -2.743022878721703e-02, -9.315679627592341e-03, -4.026934855477018e-02, -2.113477039907211e-02, -3.838511994296249e-02, -2.960164736615631e-02, -1.632886767740633e-02, -1.632886767740633e-02, -1.483589925941935e-03, -3.176264269581385e-04, -2.831761145935655e-04, -2.813800794954639e-02, -1.710259336203550e-03, -3.264176337618377e-04, -2.546904699222417e-02, -2.580784260413898e-02, -2.142941196442060e-02, -2.559412581291790e-02, -2.564385196065330e-02, -2.564385196065330e-02, -2.545204155808438e-02, -2.725205598506110e-02, -2.691870486304309e-02, -2.641750947746392e-02, -2.669370380548504e-02, -6.465514308748204e-03, -2.727780163776283e-02, -5.393359346560083e-02, -2.493218604294193e-02, -6.388692125590492e-02, -2.582581034909549e-02, -2.582581034909549e-02, -6.017201025069055e-02, -5.398635366571329e-03, -7.301413459667187e-03, -2.604692670341942e-02, -3.386938358719705e-02, -1.198753287528103e-02, -1.053208926394853e-03, -4.917580835009955e-05, -1.641538859364502e-04, -1.145662968069826e-02, -3.060109201034770e-04, -3.060109201034759e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_rscan_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([4.373658067718203e-09, 4.373456220984913e-09, 4.372604672690282e-09, 4.375596894465062e-09, 4.374022527620002e-09, 4.374022527620002e-09, 1.357563042499715e-05, 1.357581363665622e-05, 1.357960230752436e-05, 1.357317454217504e-05, 1.357950641695600e-05, 5.276713265282844e-08, 1.109117264622355e-02, 1.095489900470016e-04, 1.116330917367323e-04, 1.130301023679428e-04, 1.126484513070869e-04, 1.126484513070869e-04, 4.960608136527078e-02, 4.836053841674951e-02, 6.502693303398556e-03, 7.236675433465271e-02, 6.443912862716585e-02, 6.443912862716582e-02, 3.687774977299418e+01, 3.479946599306619e+01, 1.112776465670420e+00, 7.360299372222019e+01, 6.282907735842348e+01, 6.282907735842348e+01, 1.096112556249390e-08, 1.096468243125316e-08, 1.096140842561555e-08, 1.050162610130702e-06, 1.096287172740432e-08, 1.096287172740432e-08, 1.330763760126641e-04, 1.289642604037489e-04, 1.365765772822007e-04, 1.324217750116985e-04, 1.293196842251817e-04, 8.025496333245757e-07, 3.981491098313876e-04, 3.152900889023162e-04, 5.064341282559427e-04, 4.827311857350178e-04, 3.810785317663367e-04, 1.809985253438126e-02, 2.879024234893447e+01, 3.143762226304287e-02, 3.845838611527727e+01, 1.283205760414102e-06, 1.386576468750965e-01, 1.386576468750966e-01, 8.797267695246240e+06, 7.063959369416708e+01, 3.992563896737915e+02, 1.548296384473007e+02, 4.706514647157604e+06, 1.634446077494691e+02, 5.426450983809811e-04, 5.350679644906606e-04, 8.681117424666670e-03, 5.399011973413852e-04, 5.387826216569906e-04, 5.387826216569906e-04, 6.158890115790925e-04, 8.586548369375616e-04, 7.829105955558682e-04, 7.146978507143986e-04, 7.487840369272283e-04, 2.807959033141952e-02, 2.405328890540475e-04, 9.520652865260651e-01, 8.872892296463694e-03, 1.243133606240077e-01, 5.934348152097640e-03, 5.934348152097642e-03, 4.662341607361493e-02, 1.219734136703967e+00, 6.240500629331490e-01, 4.974062924663951e-03, 6.618266704458060e+01, 3.412374604983978e-01, 1.313663893910658e+01, 6.261362230694006e+02, 3.846434984066229e+02, 4.092234228773882e-01, 2.306596146342225e+02, 2.306596146342233e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_rscan_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-7.964920478587490e-05, -7.964860121572558e-05, -7.964587894470874e-05, -7.965484222622320e-05, -7.965015356043158e-05, -7.965015356043158e-05, -1.327152298405966e-04, -1.331680021589040e-04, -1.453340744750909e-04, -1.403419850108266e-04, -1.408981627069840e-04, -3.519933568360560e-32, -2.459886176967189e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -4.956295382286257e-29, -8.603245784556255e-29, -6.552389703198584e-04, -2.495454851355927e-29, -1.073409807451030e-29, 0.000000000000000e+00, -1.794105884274782e-40, -3.770410041512973e-40, -3.616514094552481e-34, -4.429439207464643e-44, 0.000000000000000e+00, 0.000000000000000e+00, -9.508674512296140e-36, -9.851163060588372e-34, -4.428688638671624e-36, -8.525235249077625e-04, 0.000000000000000e+00, 0.000000000000000e+00, -2.666974597411906e-05, 1.419074273671606e-05, -9.231535933223613e-05, -1.944624666849717e-05, 1.322744447240333e-05, 0.000000000000000e+00, -3.136648171642972e-31, -9.267254993394190e-32, -1.399043222642464e-31, -6.112475912910986e-33, -3.715619955397596e-31, -2.539915456735449e-02, -1.116746619478434e-03, 0.000000000000000e+00, -1.216878922985133e-03, 0.000000000000000e+00, -8.420546165845178e-30, 0.000000000000000e+00, -8.661361237642483e-11, 0.000000000000000e+00, 0.000000000000000e+00, -2.867319466662964e-03, -9.963652684372556e-11, -2.390833419653824e-44, -5.866880423332846e-33, 0.000000000000000e+00, -2.180401343768120e-02, -1.247570912096018e-32, -9.466271099354151e-33, -5.598725793034163e-32, -1.891314999796056e-34, -1.765691489710625e-30, -3.596963429266637e-31, 0.000000000000000e+00, -3.901657640541659e-31, -3.573770782950814e-02, -7.849428306529830e-32, -4.427922647767772e-03, -2.959603676470412e-29, -8.260623634814981e-04, -1.315736601981569e-31, 0.000000000000000e+00, -5.421244259617107e-03, 0.000000000000000e+00, -3.140062672936616e-31, -6.915141072300614e-30, -2.561900444103895e-03, -1.139060506189032e-30, -1.716878320510569e-38, 0.000000000000000e+00, -2.666114395149832e-45, -2.855655842119736e-30, 0.000000000000000e+00, -3.251623652648621e-43])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
