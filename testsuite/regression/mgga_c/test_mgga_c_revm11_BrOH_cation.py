
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_revm11_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm11", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.673793308395316e-01, -2.673935353500067e-01, -2.674524923157807e-01, -2.672422751742149e-01, -2.673529920909215e-01, -2.673529920909215e-01, -3.210936552364035e-02, -3.211334365595958e-02, -3.220292315719939e-02, -3.198482246582764e-02, -3.208427416197255e-02, -3.208427416197255e-02, -3.530676323984155e-02, -3.514279207149922e-02, -3.059902039065534e-02, -2.964429031298805e-02, -2.999211477934297e-02, -2.999211477934297e-02, -1.017785783161840e-02, -1.073894291310985e-02, -5.863153985847538e-02, -1.718335276567533e-02, -7.687022078275770e-03, -7.687022078275759e-03, -7.921151757493630e-03, -8.260127668700391e-03, -2.792513921546593e-02, -4.960999477955096e-03, -5.150151439675648e-03, -5.150151439675637e-03, -2.805363540713450e-01, -2.824696235632757e-01, -2.806617197986860e-01, -2.823668425637649e-01, -2.814972575397249e-01, -2.814972575397249e-01, -1.425845100122296e-02, -1.378909149044176e-02, -1.393085117661512e-02, -1.342968812075077e-02, -1.419410289731953e-02, -1.419410289731953e-02, -4.333272816658321e-02, -5.696777089746748e-02, -3.280796971325781e-02, -5.347251518551469e-02, -4.896025336343166e-02, -4.896025336343167e-02, -2.950209755517446e-02, -1.038899238303437e-02, -3.062036294650424e-02, -8.145946958377517e-02, -1.965433391036454e-02, -1.965433391036456e-02, -3.943250936164744e-03, -4.863974577937423e-03, -3.824080089022757e-03, -3.190114868689094e-02, -4.258790841900506e-03, -4.258790841900510e-03, 3.888818912343750e-03, -3.862093188784681e-02, -2.471866552405221e-02, -1.204284156388114e-02, -1.846845339242640e-02, -1.846845339242640e-02, 3.984134170254516e-02, -2.515249000678938e-02, -4.761226343468153e-02, -7.018583773726890e-02, -6.118957423198107e-02, -6.118957423198108e-02, -6.148313372993695e-02, -9.614384009306634e-03, -1.361298813303395e-02, -2.158694628765521e-02, -1.719884796376264e-02, -1.719884796376266e-02, -2.206168040846695e-02, -2.737445348274666e-02, -3.134185374081944e-02, -2.520079931030358e-02, -2.854917426546574e-02, -2.854917426546580e-02, -1.055621289258663e-02, -1.467937237534899e-03, -2.897022156442136e-03, -2.870246045542172e-02, -4.020247647729552e-03, -4.020247647729519e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_revm11_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm11", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.000627207780918e+00, -1.000627799026442e+00, -1.000648854435434e+00, -1.000649851477573e+00, -1.000750687448467e+00, -1.000749584921417e+00, -1.000425262923208e+00, -1.000428758730041e+00, -1.000592856508993e+00, -1.000598707915588e+00, -1.000592856508993e+00, -1.000598707915588e+00, -9.573916218172460e-02, -9.574040458733124e-02, -9.580627513581963e-02, -9.580769396085169e-02, -9.757729331567007e-02, -9.757541473537933e-02, -9.664311102384740e-02, -9.664183656717124e-02, -9.684922018645259e-02, -9.681517323750846e-02, -9.684922018645259e-02, -9.681517323750846e-02, -6.433808671633563e-02, -6.393066359140107e-02, -6.456188497479738e-02, -6.406252148134117e-02, -6.721025150823745e-02, -6.787361885861290e-02, -6.541394619708903e-02, -6.521408327573862e-02, -6.299528760135151e-02, -6.911470842784236e-02, -6.299528760135151e-02, -6.911470842784236e-02, -3.569261348810314e-02, -3.404004265854187e-02, -3.784204176480034e-02, -3.590008406994397e-02, -7.803579906824336e-02, -7.245831505850756e-02, -2.677526247334561e-03, -1.944292368242255e-03, -3.010185531303135e-03, -2.604329140193977e-02, -3.010185531303925e-03, -2.604329140194039e-02, -1.057466813125601e-02, -9.694577140290385e-03, -1.108505580110045e-02, -1.004071685294169e-02, -3.123420261911468e-02, -2.804342493941931e-02, -6.331058156475792e-03, -6.477907614463208e-03, -5.733983949019376e-03, -1.125607006419361e-02, -5.733983949019411e-03, -1.125607006419363e-02, -6.047931217363808e-01, -6.048916421293598e-01, -6.037637428186627e-01, -6.038652801100418e-01, -6.047956324165136e-01, -6.048960167630274e-01, -6.038875047841753e-01, -6.039867391397145e-01, -6.042500363984705e-01, -6.043505672006828e-01, -6.042500363984705e-01, -6.043505672006828e-01, -3.204781116563775e-02, -3.205047684193921e-02, -3.554374818137498e-02, -3.555794342754330e-02, -2.852936209182195e-02, -2.844040608514071e-02, -3.065189348892271e-02, -3.056048476018883e-02, -3.605600046897513e-02, -3.628909252508183e-02, -3.605600046897513e-02, -3.628909252508183e-02, -1.444258149764086e-01, -1.447035938506527e-01, 6.615528835836366e-03, 6.658377215139663e-03, -9.514203780642701e-02, -9.185491811266118e-02, -1.058768674813635e-01, -1.020278753691710e-01, -1.470649325393038e-01, -1.527407675648813e-01, -1.470649325393038e-01, -1.527407675648814e-01, -8.000603291766844e-03, -7.353102700949792e-03, -1.071865525127481e-02, -1.051268689138003e-02, -1.314727048466480e-02, -9.498121262772717e-03, -1.650676115102793e-01, -1.651416911592673e-01, 1.045503556840641e-03, 4.083807791394386e-03, 1.045503556840380e-03, 4.083807791394068e-03, -5.250000288908449e-03, -4.986450842785215e-03, -6.346132471627230e-03, -6.217598102558637e-03, -5.156527034144674e-03, -4.776102994016090e-03, -2.426957609672280e-02, -2.384566956745596e-02, -7.246351654382545e-03, -4.820065504886715e-03, -7.246351654382574e-03, -4.820065504886797e-03, 4.799138125083561e-02, 4.766318127260250e-02, 1.058074497273078e-01, 1.056909454467295e-01, 1.033529499736719e-01, 1.031339946665663e-01, 8.777223263868419e-02, 8.748626919684893e-02, 9.729799094769648e-02, 9.704278418083126e-02, 9.729799094769646e-02, 9.704278418083129e-02, 6.012382335777160e-02, 5.974337284105648e-02, -1.138389909381328e-01, -1.135105830766019e-01, -1.643229903310099e-01, -1.638551050733870e-01, -7.748127025727213e-02, -7.710915663739484e-02, -1.467416748732846e-01, -1.463141922293146e-01, -1.467416748732846e-01, -1.463141922293146e-01, -5.067504321041203e-02, -5.048767500306151e-02, -3.309104701020327e-02, -3.284820002485444e-02, -4.379128221287575e-02, -4.327912033021791e-02, -4.701024701652899e-02, -4.663010427984986e-02, -3.869997362840198e-02, -3.872074215606183e-02, -3.869997362840196e-02, -3.872074215606181e-02, -7.299558044120141e-02, -7.250686414864688e-02, -2.950695078043874e-02, -2.911729952824342e-02, -3.076189745567847e-02, -2.856499358813277e-02, -7.269394361482906e-02, -7.157059759887228e-02, -1.322296059567823e-02, -9.706154249635970e-03, -1.322296059567862e-02, -9.706154249635449e-03, -1.371084518742467e-02, -1.300543845039904e-02, -1.927348474490471e-03, -1.921796403107107e-03, -3.935850316399635e-03, -3.630851669122484e-03, -1.310926737194286e-02, -1.206946674834251e-02, -6.620914326230621e-03, -4.586199436582599e-03, -6.620914326230483e-03, -4.586199436582434e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revm11_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm11", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.639548211034490e-10, -5.279096422068982e-10, -2.639548211034490e-10, -2.639953018035997e-10, -5.279906036071993e-10, -2.639953018035997e-10, -2.641462400048338e-10, -5.282924800096676e-10, -2.641462400048338e-10, -2.635471330218357e-10, -5.270942660436713e-10, -2.635471330218357e-10, -2.638650461944031e-10, -5.277300923888063e-10, -2.638650461944031e-10, -2.638650461944031e-10, -5.277300923888063e-10, -2.638650461944031e-10, 1.224945704303518e-06, 2.449891408607036e-06, 1.224945704303518e-06, 1.225197829184465e-06, 2.450395658368929e-06, 1.225197829184465e-06, 1.230867916373841e-06, 2.461735832747683e-06, 1.230867916373841e-06, 1.219864240928275e-06, 2.439728481856550e-06, 1.219864240928275e-06, 1.225090169462320e-06, 2.450180338924640e-06, 1.225090169462320e-06, 1.225090169462320e-06, 2.450180338924640e-06, 1.225090169462320e-06, 2.320107110519097e-03, 4.640214221038194e-03, 2.320107110519097e-03, 2.312021605182977e-03, 4.624043210365953e-03, 2.312021605182977e-03, 2.084021084887675e-03, 4.168042169775350e-03, 2.084021084887675e-03, 1.931387151690482e-03, 3.862774303380965e-03, 1.931387151690482e-03, 1.983331181031132e-03, 3.966662362062264e-03, 1.983331181031132e-03, 1.983331181031132e-03, 3.966662362062264e-03, 1.983331181031132e-03, 2.899264954877805e-01, 5.798529909755612e-01, 2.899264954877805e-01, 2.917510574948783e-01, 5.835021149897565e-01, 2.917510574948783e-01, 1.974490426034519e-03, 3.948980852069038e-03, 1.974490426034519e-03, 4.067978344833961e-01, 8.135956689667925e-01, 4.067978344833961e-01, 2.672510358143126e-01, 5.345020716286245e-01, 2.672510358143126e-01, 2.672510358143134e-01, 5.345020716286266e-01, 2.672510358143134e-01, 2.529353590091065e-02, 5.058707180380693e-02, 2.529353590091065e-02, 2.974625091462579e-02, 5.949250182656288e-02, 2.974625091462579e-02, 1.480778726102253e-01, 2.961557452205123e-01, 1.480778726102253e-01, 8.992494964635937e-03, 1.798498992894969e-02, 8.992494964635937e-03, 1.318978995264362e-02, 2.637957990932005e-02, 1.318978995264362e-02, 1.318978995754383e-02, 2.637957991101774e-02, 1.318978995754383e-02, -1.181302595524410e-06, -2.362605191048821e-06, -1.181302595524410e-06, -1.209228621514085e-06, -2.418457243028171e-06, -1.209228621514085e-06, -1.182759099231294e-06, -2.365518198462587e-06, -1.182759099231294e-06, -1.207396036303832e-06, -2.414792072607665e-06, -1.207396036303832e-06, -1.195293206954211e-06, -2.390586413908421e-06, -1.195293206954211e-06, -1.195293206954211e-06, -2.390586413908421e-06, -1.195293206954211e-06, 6.859515255229446e-06, 1.371903051045889e-05, 6.859515255229446e-06, 6.859627940730913e-06, 1.371925588146183e-05, 6.859627940730913e-06, 6.513408571539497e-06, 1.302681714307899e-05, 6.513408571539497e-06, 6.511981138076748e-06, 1.302396227615350e-05, 6.511981138076748e-06, 7.035141115200916e-06, 1.407028223040183e-05, 7.035141115200916e-06, 7.035141115200916e-06, 1.407028223040183e-05, 7.035141115200916e-06, 4.776890676174123e-03, 9.553781352348247e-03, 4.776890676174123e-03, -1.307853951013404e-02, -2.615707902026808e-02, -1.307853951013404e-02, 8.599851214705950e-03, 1.719970242941190e-02, 8.599851214705950e-03, 8.925542186640944e-03, 1.785108437328189e-02, 8.925542186640944e-03, 3.517600199976880e-03, 7.035200399953761e-03, 3.517600199976880e-03, 3.517600199976878e-03, 7.035200399953756e-03, 3.517600199976878e-03, 3.031274878402923e-01, 6.062549756805872e-01, 3.031274878402923e-01, 1.579353041354208e-01, 3.158706082708414e-01, 1.579353041354208e-01, 3.161571375008205e-01, 6.323142750016409e-01, 3.161571375008205e-01, 2.595788846703119e-05, 5.191577693406239e-05, 2.595788846703119e-05, 4.876370968151822e-01, 9.752741936303625e-01, 4.876370968151822e-01, 4.876370968151822e-01, 9.752741936303625e-01, 4.876370968151822e-01, 8.769739544239201e-03, 1.753947906856839e-02, 8.769739544239201e-03, 1.105663680039374e-02, 2.211327359046713e-02, 1.105663680039374e-02, 1.101199295647028e-01, 2.202398590970239e-01, 1.101199295647028e-01, 3.394320501552032e-01, 6.788641003104050e-01, 3.394320501552032e-01, 4.214758772277205e-02, 8.429517543896053e-02, 4.214758772277205e-02, 4.214758775889545e-02, 8.429517550816990e-02, 4.214758775889545e-02, -2.216061347537185e-01, -4.432122695074370e-01, -2.216061347537185e-01, -1.135423250802247e-01, -2.270846501604493e-01, -1.135423250802247e-01, -1.432746000694834e-01, -2.865492001389668e-01, -1.432746000694834e-01, -1.740090500092202e-01, -3.480181000184404e-01, -1.740090500092202e-01, -1.578397182522391e-01, -3.156794365044783e-01, -1.578397182522391e-01, -1.578397182522391e-01, -3.156794365044783e-01, -1.578397182522391e-01, -2.443439919930739e-01, -4.886879839861477e-01, -2.443439919930739e-01, 8.415561470920279e-03, 1.683112294184056e-02, 8.415561470920279e-03, 3.902393828276396e-03, 7.804787656552793e-03, 3.902393828276396e-03, -2.135483171738242e-02, -4.270966343476484e-02, -2.135483171738242e-02, -3.964049465373194e-03, -7.928098930746388e-03, -3.964049465373194e-03, -3.964049465373194e-03, -7.928098930746388e-03, -3.964049465373194e-03, -3.738369352550379e-03, -7.476738705100757e-03, -3.738369352550379e-03, 8.392970354548730e-02, 1.678594070909745e-01, 8.392970354548730e-02, 5.585121594806438e-02, 1.117024318961287e-01, 5.585121594806438e-02, 3.906057268123214e-02, 7.812114536246428e-02, 3.906057268123214e-02, 4.507566145972706e-02, 9.015132291945410e-02, 4.507566145972706e-02, 4.507566145972711e-02, 9.015132291945421e-02, 4.507566145972711e-02, 1.295513014703460e-02, 2.591026029406920e-02, 1.295513014703460e-02, 1.220090990721073e-01, 2.440181981442193e-01, 1.220090990721073e-01, 1.825838885067901e-01, 3.651677770136006e-01, 1.825838885067901e-01, 6.218256158741424e-02, 1.243651231748285e-01, 6.218256158741424e-02, 5.433322211313392e-01, 1.086664442262678e+00, 5.433322211313392e-01, 5.433322211313293e-01, 1.086664442262657e+00, 5.433322211313293e-01, 3.152048380489231e-02, 6.304096760995058e-02, 3.152048380489231e-02, 1.199442602384468e-02, 2.398885189081304e-02, 1.199442602384468e-02, 1.500919082853337e-02, 3.001838163938911e-02, 1.500919082853337e-02, 5.061986327294757e-01, 1.012397265458952e+00, 5.061986327294757e-01, 5.379665568851531e-02, 1.075933114021859e-01, 5.379665568851531e-02, 5.379665566675063e-02, 1.075933113352316e-01, 5.379665566675063e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revm11_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm11", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revm11_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm11", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [4.789202113336968e-04, 4.789202113336966e-04, 4.789444021319801e-04, 4.789444021319801e-04, 4.790465539352852e-04, 4.790465539352851e-04, 4.786888922142697e-04, 4.786888922142697e-04, 4.788770038153318e-04, 4.788770038153320e-04, 4.788770038153318e-04, 4.788770038153320e-04, -9.002837844097444e-05, -9.002837844097451e-05, -8.958347773626812e-05, -8.958347773626805e-05, -7.762827433816885e-05, -7.762827433816861e-05, -8.248909782436364e-05, -8.248909782436337e-05, -8.199004816996549e-05, -8.199004816996532e-05, -8.199004816996549e-05, -8.199004816996532e-05, -3.546617276434097e-03, -3.546617276434094e-03, -3.518301424765285e-03, -3.518301424765286e-03, -2.849020090003494e-03, -2.849020090003494e-03, -2.820432405169086e-03, -2.820432405169080e-03, -2.836219764071123e-03, -2.836219764071128e-03, -2.836219764071123e-03, -2.836219764071128e-03, -1.332080256636395e-02, -1.332080256636388e-02, -1.281200168738535e-02, -1.281200168738532e-02, -3.699972634398131e-03, -3.699972634398131e-03, -2.911444439459080e-02, -2.911444439459078e-02, -1.977327935717660e-02, -1.977327935717657e-02, -1.977327935717636e-02, -1.977327935717628e-02, -4.777766549686869e-05, -4.777766549681979e-05, -5.753080373328876e-05, -5.753080373329620e-05, -2.953739815300708e-03, -2.953739815300708e-03, -7.312156045718774e-06, -7.312156045718774e-06, -1.669396148181359e-05, -1.669396148181359e-05, -1.669396148177721e-05, -1.669396148177721e-05, 8.320135067405678e-03, 8.320135067405674e-03, 8.404146476193180e-03, 8.404146476193180e-03, 8.325675646001698e-03, 8.325675646001699e-03, 8.399765170025764e-03, 8.399765170025768e-03, 8.361699620306015e-03, 8.361699620306015e-03, 8.361699620306015e-03, 8.361699620306015e-03, -7.797821107517601e-04, -7.797821107517598e-04, -7.358870837042979e-04, -7.358870837042978e-04, -7.966955885077946e-04, -7.966955885077941e-04, -7.770385204943168e-04, -7.770385204943181e-04, -7.386487486032236e-04, -7.386487486032236e-04, -7.386487486032236e-04, -7.386487486032236e-04, 2.721044219230362e-02, 2.721044219230362e-02, -2.390916061294935e-02, -2.390916061294938e-02, 3.675118128854353e-03, 3.675118128854354e-03, 1.192947504763781e-02, 1.192947504763782e-02, 3.316873759743339e-02, 3.316873759743337e-02, 3.316873759743341e-02, 3.316873759743342e-02, -1.972466109897675e-02, -1.972466109897687e-02, -1.949491989339575e-02, -1.949491989339574e-02, -1.795760924342954e-02, -1.795760924342969e-02, 2.827059570687456e-03, 2.827059570687456e-03, -3.152877618161878e-02, -3.152877618161883e-02, -3.152877618161892e-02, -3.152877618161913e-02, -2.394106836453747e-06, -2.394106836434436e-06, -6.056192870602404e-06, -6.056192870602404e-06, -2.251828573061382e-05, -2.251828573062140e-05, -1.033603571760905e-02, -1.033603571760902e-02, -1.396594398611275e-05, -1.396594398613488e-05, -1.396594398620127e-05, -1.396594398620865e-05, 4.148758765591323e-01, 4.148758765591325e-01, 1.042635492140620e-01, 1.042635492140620e-01, 1.646746063724765e-01, 1.646746063724762e-01, 2.484872084236281e-01, 2.484872084236282e-01, 2.017880866615562e-01, 2.017880866615565e-01, 2.017880866615562e-01, 2.017880866615565e-01, 1.930142797483122e-01, 1.930142797483122e-01, 1.936029823749518e-02, 1.936029823749518e-02, 6.188588708658328e-02, 6.188588708658330e-02, 6.453903710005583e-02, 6.453903710005582e-02, 7.418631775913921e-02, 7.418631775913927e-02, 7.418631775913921e-02, 7.418631775913924e-02, -2.000787906385761e-03, -2.000787906385750e-03, -8.751763840780394e-03, -8.751763840780385e-03, -6.862977399268769e-03, -6.862977399268769e-03, -1.312050908841941e-02, -1.312050908841942e-02, -1.333074484034345e-02, -1.333074484034343e-02, -1.333074484034344e-02, -1.333074484034343e-02, -2.775703050875607e-04, -2.775703050875570e-04, -2.686616283312629e-03, -2.686616283312598e-03, -5.137726739599000e-03, -5.137726739599000e-03, 1.640434109319117e-03, 1.640434109319113e-03, -2.103741988828643e-02, -2.103741988828662e-02, -2.103741988828644e-02, -2.103741988828663e-02, -6.064505184770266e-05, -6.064505184767973e-05, -1.598314910073512e-07, -1.598314910152906e-07, -3.985809092514464e-06, -3.985809092514464e-06, -2.015530275929062e-02, -2.015530275929072e-02, -1.608798906794986e-05, -1.608798906794986e-05, -1.608798906813738e-05, -1.608798906814841e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
