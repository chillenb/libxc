
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_revm11_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm11", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.117855389357250e-01, -1.117797508873862e-01, -1.117563843459598e-01, -2.151596610460742e-01, -2.425039213137886e-01, -2.699372411803229e-01, -2.845233244841659e-02, -1.008769514425655e-02, -1.020608983028190e-02, -1.015682192825441e-02, -1.016252745884796e-02, -2.865834922159208e-02, -8.658533631761210e-02, -4.337230483428199e-02, -1.136407162599293e-02, -2.603759734251647e-02, -9.180466807219341e-02, -1.183900059220526e-02, -2.019429706795839e-02, -3.477739048465061e-02, -2.295243682916285e-02, -1.498720105560343e-02, -4.182411401077725e-03, -4.348916961944560e-03, -7.921243784911526e-03, -8.260197718668569e-03, -2.798865157557003e-02, -4.961004494658490e-03, -5.150147730531278e-03, -5.150147730531266e-03, -2.082086930337668e-01, -2.831858586410313e-01, -2.813558357567693e-01, -2.830686175663382e-01, -1.447433757599141e-01, -2.086963044014703e-01, -2.784902027100029e-02, -2.797966451711524e-02, -1.151255290540512e-02, -1.133451854914592e-02, -4.599977529526113e-02, -2.796942089244200e-02, -4.581662444155716e-02, -8.125197838413276e-02, -1.913292478633144e-02, -3.729202857075878e-02, -4.972165328931494e-02, -4.402231467583845e-02, -2.899149031524392e-02, -2.143924556146734e-02, -3.280648982535685e-02, -6.646495553546272e-02, -2.591643195457935e-02, -2.591643195457937e-02, -3.943251191750260e-03, -4.863973589136233e-03, -3.824088943654022e-03, -3.257571815583700e-02, -4.258795805199883e-03, -4.258795805199886e-03, -3.928121081909489e-02, -5.983887825628149e-02, 6.351045872973153e-02, 7.398361179909438e-03, 6.626190552239496e-02, 4.644976771312863e-03, 1.085333138639083e-02, -4.580831649485235e-02, -5.142497911423956e-02, -7.509339247319520e-02, -6.201608521546165e-02, -5.816154999117089e-02, -6.083219711540931e-02, -2.207599403312192e-02, -2.359538841054496e-02, -2.621987957315184e-02, -2.550875166840505e-02, -2.542481726503343e-02, -1.710371659944464e-02, -1.102997156733460e-01, -3.130985110872583e-02, -2.922521115969641e-02, -2.824888167817381e-02, -2.824888167817385e-02, -4.062120138781374e-02, -1.467937218075912e-03, -1.111783023825069e-02, -1.423831259171577e-01, -4.020245920618984e-03, -4.020316323976314e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_revm11_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm11", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([1.956227199453690e-01, 1.956224592246855e-01, 1.956475235024213e-01, 1.956470838821529e-01, 1.957470652385987e-01, 1.957475511701798e-01, -5.697560554843212e-01, -5.697587792296867e-01, -7.928155868915384e-01, -7.928208129555631e-01, -1.022577484700436e+00, -1.022583402079142e+00, -9.116936348017560e-02, -9.117050445456734e-02, -6.002404970466065e-02, -6.002472235804199e-02, -6.225137153044624e-02, -6.225047646609292e-02, -6.134438102370318e-02, -6.134377261738353e-02, -6.144966078063509e-02, -6.143343755309735e-02, -9.260756678731581e-02, -9.257612314641459e-02, -4.969910943562647e-03, -4.285521448971617e-03, -6.356345747441576e-02, -6.298674050177665e-02, -4.543740082294871e-02, -4.573900676333712e-02, -6.340354321634153e-02, -6.322215831947467e-02, 1.201287068022179e-02, -2.461731301360090e-05, -4.346295618620110e-02, -4.638170072465297e-02, -4.848334520240546e-02, -4.568598341227353e-02, -4.612956684430818e-02, -4.162379760120358e-02, -6.134833659160960e-02, -5.859162858924342e-02, 6.396877950895575e-03, 7.000171189969198e-03, 8.439463518081378e-03, -3.186021163063356e-03, 7.836333991592241e-03, -4.359065215085185e-03, -1.057528078641010e-02, -9.695166673528285e-03, -1.108552340041255e-02, -1.004116440257349e-02, -3.163867575420052e-02, -2.843097876250499e-02, -6.331090870367045e-03, -6.477940660559028e-03, -5.733961055682755e-03, -1.125603864427650e-02, -5.733961055682761e-03, -1.125603864427653e-02, -3.026265319312547e-01, -3.026938806744084e-01, -6.068461967565730e-01, -6.069480643627414e-01, -6.078108102477111e-01, -6.079115125729824e-01, -6.069095466348949e-01, -6.070090973748857e-01, -5.761031150370705e-02, -5.765361045922322e-02, -3.016411970220436e-01, -3.017097917831492e-01, -5.702632489357782e-02, -5.703054535483043e-02, -6.131735588830210e-02, -6.134022119850521e-02, -2.263394496385272e-02, -2.255556449884906e-02, -2.557845754797755e-02, -2.549651235668408e-02, -8.061778808531660e-02, -8.113886041354311e-02, -6.087121924406404e-02, -6.123978861330427e-02, -1.361545787674648e-01, -1.364423163381318e-01, -1.361879140055668e-01, -1.361310061767321e-01, -8.835885991119910e-02, -8.599326847660914e-02, -1.653255971402997e-01, -1.622553655573497e-01, -1.421474449994801e-01, -1.478812738908184e-01, -1.774643515304977e-01, -1.827220196330859e-01, -5.241315992975531e-03, -4.617127032921689e-03, -3.879036057649106e-02, -3.838748079529300e-02, -2.489315554317119e-02, -2.070619377342696e-02, -3.190400883114603e-01, -3.191027524523801e-01, -2.571322687862952e-02, -2.114126582910268e-02, -2.571322687862972e-02, -2.114126582910297e-02, -5.250001987091131e-03, -4.986452502937435e-03, -6.346125960012321e-03, -6.217591649378482e-03, -5.156586217474095e-03, -4.776160218272509e-03, -2.819409052772083e-02, -2.775004673625025e-02, -7.246388670713010e-03, -4.820096297122184e-03, -7.246388670713035e-03, -4.820096297122238e-03, 5.344050955124065e-02, 5.325502484878139e-02, 8.363523439493291e-02, 8.360519624215919e-02, 1.323310427165587e-01, 1.318339865471368e-01, 9.122407805883088e-02, 9.087347799942869e-02, 1.126199256102061e-01, 1.121037724716589e-01, 1.051289134185923e-01, 1.047944730706851e-01, 6.482148247309825e-02, 6.451484511104434e-02, -9.652623919025628e-02, -9.605992807945603e-02, -1.229242255421049e-01, -1.224313033276641e-01, -1.050958453730078e-01, -1.046998791371785e-01, -1.624970859388547e-01, -1.620648918192098e-01, -8.997695564432243e-02, -8.956477578268042e-02, -4.268905482646628e-02, -4.250281926901827e-02, -5.107575818664202e-02, -5.061080789933698e-02, -5.205707843535063e-02, -5.128261934208056e-02, -5.101847129760863e-02, -5.059067878487519e-02, -4.579057810050456e-02, -4.581776067651829e-02, -4.575586619654332e-02, -4.578299130934804e-02, -6.762479014606389e-02, -6.720615951681665e-02, -1.275855571811074e-01, -1.260183000122276e-01, -3.056242392785002e-02, -2.837075229252958e-02, -7.332266231991891e-02, -7.210334751700509e-02, -1.151397516298563e-02, -8.076501600363150e-03, -1.151397516298600e-02, -8.076501600362605e-03, -5.296509796882780e-02, -5.025067436515896e-02, -1.927348345910536e-03, -1.921796274688556e-03, -1.511072406765493e-02, -1.394023849313659e-02, -1.154770738902153e-01, -1.105399491879284e-01, -6.620901648197910e-03, -4.586188685495082e-03, -6.621418078170513e-03, -4.586626605832553e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revm11_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm11", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.117483683465196e-08, -2.234967366930393e-08, -1.117483683465196e-08, -1.117622308834640e-08, -2.235244617669280e-08, -1.117622308834640e-08, -1.118174002828226e-08, -2.236348005656453e-08, -1.118174002828226e-08, -9.748457720484205e-10, -1.949691544096841e-09, -9.748457720484205e-10, -5.032620716036229e-10, -1.006524143207246e-09, -5.032620716036229e-10, -2.455383204383699e-10, -4.910766408767398e-10, -2.455383204383699e-10, 1.066476625183181e-06, 2.132953250366362e-06, 1.066476625183181e-06, 4.452994674050118e-07, 8.905989348100236e-07, 4.452994674050118e-07, 4.495780775406552e-07, 8.991561550813104e-07, 4.495780775406552e-07, 4.476457195983988e-07, 8.952914391967974e-07, 4.476457195983988e-07, 4.480856177321616e-07, 8.961712354643233e-07, 4.480856177321616e-07, 1.076233174796123e-06, 2.152466349592247e-06, 1.076233174796123e-06, 1.085799731304606e-02, 2.171599462609212e-02, 1.085799731304606e-02, 3.186912385553759e-03, 6.373824771107519e-03, 3.186912385553759e-03, 5.123367600848555e-04, 1.024673520169711e-03, 5.123367600848555e-04, 1.598726146244613e-03, 3.197452292489226e-03, 1.598726146244613e-03, 1.270504351123592e-02, 2.541008702247185e-02, 1.270504351123592e-02, 5.218724041618304e-04, 1.043744808323661e-03, 5.218724041618304e-04, 7.155813040892313e-01, 1.431162608178463e+00, 7.155813040892313e-01, 1.383854448207344e+00, 2.767708896414689e+00, 1.383854448207344e+00, 5.332119290676680e-04, 1.066423858135336e-03, 5.332119290676680e-04, 2.314880100329449e-01, 4.629760200658892e-01, 2.314880100329449e-01, 7.119212460426592e-02, 1.423842492085321e-01, 7.119212460426592e-02, 7.856433525809446e-02, 1.571286705161893e-01, 7.856433525809446e-02, 1.922352466811998e-01, 3.844704933658781e-01, 1.922352466811998e-01, 1.272398830951307e-01, 2.544797661895676e-01, 1.272398830951307e-01, 5.343483629624821e-01, 1.068696725925055e+00, 5.343483629624821e-01, 5.083234166056781e-02, 1.016646833118831e-01, 5.083234166056781e-02, 3.059580398044075e-03, 6.119160797416599e-03, 3.059580398044075e-03, 3.059580395720042e-03, 6.119160792339617e-03, 3.059580395720042e-03, -2.136046956384293e-06, -4.272093912768585e-06, -2.136046956384293e-06, -1.202008576016087e-06, -2.404017152032175e-06, -1.202008576016087e-06, -1.175797472828757e-06, -2.351594945657515e-06, -1.175797472828757e-06, -1.200324339534838e-06, -2.400648679069677e-06, -1.200324339534838e-06, -3.554608713926144e-06, -7.109217427852288e-06, -3.554608713926144e-06, -2.158466214526587e-06, -4.316932429053173e-06, -2.158466214526587e-06, 1.398042887249004e-05, 2.796085774498008e-05, 1.398042887249004e-05, 1.417119794530635e-05, 2.834239589061269e-05, 1.417119794530635e-05, 5.473410637602431e-06, 1.094682127520486e-05, 5.473410637602431e-06, 5.625163783407723e-06, 1.125032756681545e-05, 5.625163783407723e-06, 2.770615987692058e-05, 5.541231975384118e-05, 2.770615987692058e-05, 1.417868270432100e-05, 2.835736540864201e-05, 1.417868270432100e-05, 5.404469101013672e-03, 1.080893820202734e-02, 5.404469101013672e-03, -7.930736518327125e-03, -1.586147303665425e-02, -7.930736518327125e-03, 4.610195280055484e-03, 9.220390560110968e-03, 4.610195280055484e-03, 3.866714320067105e-03, 7.733428640134210e-03, 3.866714320067105e-03, 3.700277277761804e-03, 7.400554555523607e-03, 3.700277277761804e-03, 2.454937161438109e-03, 4.909874322876219e-03, 2.454937161438109e-03, 1.863056083277922e-01, 3.726112166555864e-01, 1.863056083277922e-01, 5.297285859981251e-01, 1.059457171996250e+00, 5.297285859981251e-01, 1.235551539486002e+00, 2.471103078971999e+00, 1.235551539486002e+00, 7.151420285601235e-06, 1.430284057120247e-05, 7.151420285601235e-06, 1.931413895019118e+00, 3.862827790038236e+00, 1.931413895019118e+00, 1.931413895019117e+00, 3.862827790038236e+00, 1.931413895019117e+00, 1.275514097306489e-02, 2.551028193700410e-02, 1.275514097306489e-02, 5.080349424292318e-03, 1.016069885301119e-02, 5.080349424292318e-03, 5.834122020121286e-01, 1.166824403921397e+00, 5.834122020121286e-01, 1.437034544335920e+00, 2.874069088671852e+00, 1.437034544335920e+00, 1.342816943425228e-01, 2.685633886770500e-01, 1.342816943425228e-01, 1.342816943427029e-01, 2.685633886716027e-01, 1.342816943427029e-01, -2.044424578993429e-01, -4.088849157986858e-01, -2.044424578993429e-01, -1.060020461060110e-01, -2.120040922120219e-01, -1.060020461060110e-01, -1.801093356221493e-01, -3.602186712442986e-01, -1.801093356221493e-01, -1.817781916447946e-01, -3.635563832895891e-01, -1.817781916447946e-01, -1.934508885816183e-01, -3.869017771632366e-01, -1.934508885816183e-01, -1.669603946167054e-01, -3.339207892334108e-01, -1.669603946167054e-01, -2.306918662859131e-01, -4.613837325718262e-01, -2.306918662859131e-01, 1.962293910572427e-02, 3.924587821144854e-02, 1.962293910572427e-02, 5.633957950924231e-03, 1.126791590184846e-02, 5.633957950924231e-03, -1.939770067134312e-02, -3.879540134268625e-02, -1.939770067134312e-02, -3.634677157021090e-03, -7.269354314042181e-03, -3.634677157021090e-03, -5.313342117533031e-03, -1.062668423506606e-02, -5.313342117533031e-03, -3.871182550137479e-03, -7.742365100274959e-03, -3.871182550137479e-03, 2.503554952429731e-01, 5.007109904859463e-01, 2.503554952429731e-01, 1.205591613931861e-01, 2.411183227863722e-01, 1.205591613931861e-01, 4.940971317175834e-02, 9.881942634351669e-02, 4.940971317175834e-02, 7.710825397335878e-02, 1.542165079467176e-01, 7.710825397335878e-02, 7.676044663659552e-02, 1.535208932731910e-01, 7.676044663659552e-02, 9.932157000038295e-03, 1.986431400007659e-02, 9.932157000038295e-03, 7.803320605107619e+03, 1.560664121021524e+04, 7.803320605107619e+03, 1.208649548666314e-01, 2.417299097332633e-01, 1.208649548666314e-01, 7.385875908428724e-02, 1.477175181685745e-01, 7.385875908428724e-02, 3.603548617900487e-01, 7.207097235800930e-01, 3.603548617900487e-01, 3.603548617900418e-01, 7.207097235800886e-01, 3.603548617900418e-01, 1.933592359913736e+06, 3.867184719827473e+06, 1.933592359913736e+06, 6.897310301341843e-04, 1.379462186335116e-03, 6.897310301341843e-04, 7.625919476797954e+08, 1.525183895359591e+09, 7.625919476797954e+08, 4.035644308110948e+02, 8.071288616221897e+02, 4.035644308110948e+02, 2.190621562458882e-02, 4.381243126099663e-02, 2.190621562458882e-02, 4.426641489658143e+00, 8.853282979418925e+00, 4.426641489658143e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revm11_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm11", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.842798814471290e-04, -1.842798814471289e-04, -1.842954522772082e-04, -1.842954522772083e-04, -1.843577535492246e-04, -1.843577535492245e-04, 2.565450612167214e-04, 2.565450612167214e-04, 3.729469868315141e-04, 3.729469868315141e-04, 4.898934942260163e-04, 4.898934942260163e-04, -9.003290242227183e-05, -9.003290242227193e-05, -8.953868386852271e-05, -8.953868386852264e-05, -7.561846453126910e-05, -7.561846453126880e-05, -8.129885386263662e-05, -8.129885386263626e-05, -8.070888231405521e-05, -8.070888231405502e-05, -8.178982789929239e-05, -8.178982789929221e-05, -8.816489078055774e-03, -8.816489078055776e-03, -4.370711645318594e-03, -4.370711645318595e-03, -6.327383726320794e-04, -6.327383726320788e-04, -2.414401429917289e-03, -2.414401429917283e-03, -9.846868626188745e-03, -9.846868626188747e-03, -7.773320051881971e-04, -7.773320051882020e-04, -2.678410826955502e-02, -2.678410826955497e-02, -4.597329321949757e-02, -4.597329321949756e-02, -1.615107830505663e-03, -1.615107830505663e-03, -2.800726686451502e-02, -2.800726686451500e-02, -1.681867498737579e-02, -1.681867498737577e-02, -1.695904951197942e-02, -1.695904951197933e-02, -4.777784524799392e-05, -4.777784524794502e-05, -5.753096171131461e-05, -5.753096171132205e-05, -2.955878825053312e-03, -2.955878825053312e-03, -7.312158441493875e-06, -7.312158441493875e-06, -1.669395758702587e-05, -1.669395758702587e-05, -1.669395758698949e-05, -1.669395758698949e-05, 4.689500799664651e-03, 4.689500799664649e-03, 8.439977050623104e-03, 8.439977050623104e-03, 8.360511398360042e-03, 8.360511398360044e-03, 8.434879583289458e-03, 8.434879583289461e-03, 1.508848826906028e-03, 1.508848826906028e-03, 4.713583289121802e-03, 4.713583289121802e-03, -7.573596762447645e-04, -7.573596762447642e-04, -7.056708709992430e-04, -7.056708709992429e-04, -7.992566970143261e-04, -7.992566970143254e-04, -7.806424528230311e-04, -7.806424528230326e-04, -6.714744190843640e-04, -6.714744190843640e-04, -7.095549524195178e-04, -7.095549524195178e-04, 2.344607169434227e-02, 2.344607169434227e-02, 8.047964382799243e-02, 8.047964382799250e-02, 5.423827112956166e-03, 5.423827112956169e-03, 4.113096578947840e-02, 4.113096578947844e-02, 3.084456562620275e-02, 3.084456562620274e-02, 4.824178699397191e-02, 4.824178699397193e-02, -1.962421740121435e-02, -1.962421740121446e-02, -2.666847048594972e-02, -2.666847048594972e-02, -1.833896376892568e-02, -1.833896376892583e-02, 1.058853054709811e-02, 1.058853054709811e-02, -3.436454605744121e-02, -3.436454605744126e-02, -3.436454605744136e-02, -3.436454605744155e-02, -2.394106886737063e-06, -2.394106886717753e-06, -6.056192471689347e-06, -6.056192471689347e-06, -2.251830262273082e-05, -2.251830262273840e-05, -1.040362940511746e-02, -1.040362940511744e-02, -1.396594925930749e-05, -1.396594925932962e-05, -1.396594925939600e-05, -1.396594925940338e-05, 5.736786268840750e-01, 5.736786268840752e-01, 1.817370073759196e-01, 1.817370073759196e-01, -1.568889717046255e-01, -1.568889717046260e-01, 1.774718093658085e-01, 1.774718093658086e-01, -1.072440117754942e-01, -1.072440117754938e-01, 1.174878202982431e-01, 1.174878202982435e-01, 3.051287725689453e-01, 3.051287725689453e-01, 8.381760394234558e-03, 8.381760394234560e-03, 3.400068765505988e-02, 3.400068765505988e-02, 9.280787774936741e-02, 9.280787774936737e-02, 8.664901843724118e-02, 8.664901843724124e-02, 2.852768706516392e-02, 2.852768706516394e-02, -6.390317225220790e-03, -6.390317225220781e-03, -1.844135383359219e-02, -1.844135383359218e-02, -1.393182942162382e-02, -1.393182942162382e-02, -1.293130905886953e-02, -1.293130905886953e-02, -1.580404777496235e-02, -1.580404777496233e-02, -1.577906611289343e-02, -1.577906611289341e-02, -6.997427485435819e-05, -6.997427485435380e-05, -5.281173462212141e-03, -5.281173462212141e-03, -5.136073720106374e-03, -5.136073720106374e-03, 1.081750874665313e-03, 1.081750874665309e-03, -2.097143414319235e-02, -2.097143414319255e-02, -2.097143414319235e-02, -2.097143414319255e-02, -1.165621101800663e-04, -1.165621101800663e-04, -1.598314903207361e-07, -1.598314903286756e-07, -7.650813241955126e-06, -7.650813241955126e-06, -4.404572344885534e-02, -4.404572344885534e-02, -1.608798682878718e-05, -1.608798682878718e-05, -1.608807810545316e-05, -1.608807810546419e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
