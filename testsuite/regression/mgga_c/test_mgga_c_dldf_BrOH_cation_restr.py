
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_dldf_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_dldf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.236674327777409e-01, -1.236666675266551e-01, -1.236638883134427e-01, -1.236752205008395e-01, -1.236691949164087e-01, -1.236691949164087e-01, -9.642761219150667e-02, -9.642334026671329e-02, -9.632020097314320e-02, -9.645071080425385e-02, -9.639782982628778e-02, -9.639782982628778e-02, -6.575919807172000e-02, -6.584828033659301e-02, -6.716012345270918e-02, -6.705282078957016e-02, -6.706822495187360e-02, -6.706822495187360e-02, -2.333648330142547e-02, -2.536481493989432e-02, -6.951976512643501e-02, 1.485762239809843e-03, -1.045971401181663e-02, -1.045971401181661e-02, 7.374634146290199e-03, 7.706010565184264e-03, 2.770824647010017e-02, 4.408046171807542e-03, 5.472944131653589e-03, 5.472944131653590e-03, -8.534615590799451e-02, -8.520587918485643e-02, -8.533806450154360e-02, -8.521430175866963e-02, -8.527591367323853e-02, -8.527591367323853e-02, -8.886138584011696e-02, -8.875135398672136e-02, -8.850359145076536e-02, -8.843239257635815e-02, -8.891896209163402e-02, -8.891896209163402e-02, -5.296410608199378e-02, -5.084068504004235e-02, -5.379614367602944e-02, -4.983495369883271e-02, -5.212084741916519e-02, -5.212084741916519e-02, 2.603071565231625e-02, -8.080214218156877e-03, 2.764471379385061e-02, -7.571646702619834e-02, 1.360249683431794e-02, 1.360249683431794e-02, 3.305610553931401e-03, 4.222215668148263e-03, 3.350351539213344e-03, 3.080328286283101e-02, 3.926938890530429e-03, 3.926938890530429e-03, -4.549828988679084e-02, -4.200390913161284e-02, -4.216636381169522e-02, -4.292726611773369e-02, -4.245182197875261e-02, -4.245182197875261e-02, -5.424687327609506e-02, -5.370734527341813e-02, -5.066851166672676e-02, -4.594920195204406e-02, -4.845529120945497e-02, -4.845529120945497e-02, -5.217241658890063e-02, -2.352270120165741e-02, -3.802836412656962e-02, -4.981035094552118e-02, -4.643688411652382e-02, -4.643688411652382e-02, -5.359133134297656e-02, 2.744699935647997e-02, 3.100674961740594e-02, -4.658131882962113e-02, 2.686798061087005e-02, 2.686798061087009e-02, 9.582603559753546e-03, 1.109641951018236e-03, 2.535889642790256e-03, 2.854152153920984e-02, 3.687310796488839e-03, 3.687310796488845e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_dldf_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_dldf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-7.854066506279850e-02, -7.854081942686675e-02, -7.854060832454991e-02, -7.853829575739257e-02, -7.853963367655131e-02, -7.853963367655131e-02, -5.823210636803215e-02, -5.823168659312058e-02, -5.822281834039006e-02, -5.823757768282643e-02, -5.822960462851119e-02, -5.822960462851119e-02, -4.751724453605354e-02, -4.804210937750183e-02, -6.554754031072109e-02, -6.499322604554247e-02, -6.426487280153972e-02, -6.426487280153972e-02, -1.044426218471255e-01, -1.018912842412660e-01, -4.421424976520203e-02, -9.637874927325553e-02, -1.064838577549926e-01, -1.064838577549927e-01, 8.237485585633262e-03, 8.601358611670353e-03, 2.238108948437365e-02, 5.032292716895414e-03, 6.194786156890023e-03, 6.194786156890014e-03, -6.214884652446944e-02, -6.228290534713846e-02, -6.215053998545442e-02, -6.226895879856611e-02, -6.221870869613618e-02, -6.221870869613618e-02, -1.051647631969991e-01, -1.030197402644144e-01, -1.114425402865669e-01, -1.094751668600565e-01, -1.010267392460416e-01, -1.010267392460416e-01, -3.534847996287634e-02, -6.328774796868226e-02, -3.480377044880568e-02, -5.709406946463381e-02, -3.603155837113236e-02, -3.603155837113236e-02, -3.766233197640804e-02, -1.158433220824288e-01, -2.878907500385562e-02, -9.498919466785904e-02, -7.232078807263705e-02, -7.232078807263703e-02, 3.914370921378725e-03, 4.900814178909433e-03, 3.827297369788709e-03, 4.587229057401808e-03, 4.537062316711723e-03, 4.537062316711730e-03, -6.573639840060208e-02, -5.060968572509485e-02, -5.526541245455292e-02, -5.971425524751851e-02, -5.742737448184913e-02, -5.742737448184915e-02, -7.156232703495262e-02, -4.605707975218076e-02, -3.466311718713014e-02, -3.478882184290753e-02, -3.288524552197689e-02, -3.288524552197689e-02, -6.355187202107074e-02, -1.204360532383779e-01, -1.020412972649723e-01, -4.509308391774436e-02, -7.231694501112858e-02, -7.231694501112854e-02, -4.460181378205375e-02, 2.314177620424479e-02, 1.842559655043617e-02, -3.327667555885826e-02, -2.213224149194341e-02, -2.213224149194313e-02, 1.091905934045928e-02, 1.373134956792443e-03, 2.879497517434731e-03, -1.463148112191706e-02, 4.231501579873998e-03, 4.231501579874017e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_dldf_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_dldf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.117457443866072e-11, -5.117192293852139e-11, -5.115988263827282e-11, -5.119913665150963e-11, -5.117861733501649e-11, -5.117861733501649e-11, -5.878479675326283e-07, -5.878851445118215e-07, -5.884501056393871e-07, -5.846446278029457e-07, -5.867493146156558e-07, -5.867493146156558e-07, -7.446789118784123e-04, -7.226913347015343e-04, -8.269480837383666e-05, -8.200315925406100e-05, -1.116203378312083e-04, -1.116203378312083e-04, 6.734509156614712e-01, 6.306543435017702e-01, -5.680647382353235e-04, 1.488184788517136e+00, 1.156346511258984e+00, 1.156346511258983e+00, 5.067104619923420e+02, 4.637708251107181e+02, 1.127243460152322e+01, 1.412688446722698e+03, 1.022012493061057e+03, 1.022012493061053e+03, -7.118002049808377e-10, 1.022520063491844e-09, -6.305500205352562e-10, 8.994963213480599e-10, 1.602650253881005e-10, 1.602650253881005e-10, 3.430809658582433e-06, 3.180855364903302e-06, 4.200843987041549e-06, 3.966751903264543e-06, 2.924026096918042e-06, 2.924026096918042e-06, -2.209721129235630e-03, 4.920116581602302e-03, -3.455665476420226e-03, 2.660091668938253e-03, -2.023190413988758e-03, -2.023190413988758e-03, 2.681980420889856e+00, 5.506156929495868e-01, 3.152107431746409e+00, 2.764170964024209e-05, 2.607411518387302e+00, 2.607411518387302e+00, 2.051807501259080e+03, 1.396831180280831e+03, 7.089220908645493e+03, 6.593574932420649e+00, 2.947753114230502e+03, 2.947753114230540e+03, 5.309777261541172e-02, 1.283060015923662e-02, 2.047031490177283e-02, 3.067689558905346e-02, 2.497833673508206e-02, 2.497833673508205e-02, 7.372930248390452e-02, -3.660836389373298e-04, -2.421044855829018e-03, -1.575195915205705e-03, -2.682787846393303e-03, -2.682787846393303e-03, 2.994034847775350e-03, 2.297859435471008e-01, 9.545457707884897e-02, -2.957830831526482e-03, 3.193710766606960e-02, 3.193710766606964e-02, -1.548491187663538e-03, 1.168311750339548e+01, 7.227548811194087e+00, -1.849028407014036e-02, 5.634618425103994e+00, 5.634618425103982e+00, 1.687023341551987e+02, 2.523520621695328e+04, 8.966951911506774e+03, 6.164216577624740e+00, 4.153192190506888e+03, 4.153192190506828e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_dldf_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_dldf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.901479234217160e-05, -1.901550773966230e-05, -1.901877403592323e-05, -1.900820967751249e-05, -1.901373019952159e-05, -1.901373019952159e-05, -7.234920089594510e-05, -7.237207976458145e-05, -7.302501179124767e-05, -7.320771967266035e-05, -7.300794606566133e-05, -7.300794606566133e-05, -4.929703244004828e-04, -4.961804554177538e-04, -5.938068183908862e-04, -6.589669873994514e-04, -6.327860481340976e-04, -6.327860481340976e-04, -1.237100613567295e-02, -1.234673075423105e-02, -1.092596599931414e-04, -7.193280779917262e-03, -9.094225472180181e-03, -9.094225472180185e-03, -1.708795186103040e-03, -1.804903442610708e-03, -3.961396709615437e-03, -8.373505036535499e-04, -1.250933507082118e-03, -1.250933507082117e-03, -4.276530992678392e-04, -4.330122917241944e-04, -4.279831869776431e-04, -4.327098305958388e-04, -4.303118318264817e-04, -4.303118318264817e-04, -4.184670292122590e-04, -4.340679991822977e-04, -4.271141474068178e-04, -4.419461966325780e-04, -4.228277004604275e-04, -4.228277004604275e-04, -3.393019886707209e-03, -5.912778909163640e-03, -2.127884066923021e-03, -2.307065097414522e-03, -3.743452656518222e-03, -3.743452656518222e-03, -5.926909933081201e-03, -8.283274333938646e-03, -5.756310662858304e-03, -3.528587140404302e-04, -8.581167472126620e-03, -8.581167472126623e-03, -4.051334813656832e-04, -6.693752155328725e-04, -1.719099466676710e-03, -5.300140273455932e-03, -1.133505686126091e-03, -1.133505686126091e-03, -9.328319745038838e-02, -4.407106433019087e-02, -5.706275236813716e-02, -7.153062393703352e-02, -6.381781119825648e-02, -6.381781119825647e-02, -4.098384269220330e-02, -6.118078237137894e-03, -7.218768439122419e-03, -1.187067262768767e-02, -8.582795454517799e-03, -8.582795454517797e-03, -3.834645169689444e-03, -8.389544554454648e-03, -7.585032797281772e-03, -4.814983143469208e-03, -6.854191152859103e-03, -6.854191152859109e-03, -4.547119739570929e-03, -4.108798499305023e-03, -4.324003627689834e-03, -5.856944209369904e-03, -7.204390884976680e-03, -7.204390884976698e-03, -1.193471395228632e-03, -1.161497083356396e-04, -9.281849288174212e-04, -7.682389739336336e-03, -1.345743462131095e-03, -1.345743462131098e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
