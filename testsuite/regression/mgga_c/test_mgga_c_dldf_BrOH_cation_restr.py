
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_dldf_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_dldf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.645995504599074e-01, -1.645996352774702e-01, -1.646000385296314e-01, -1.645987760656716e-01, -1.645994338558163e-01, -1.645994338558163e-01, -1.107858338429825e-01, -1.107858953893559e-01, -1.107880165870673e-01, -1.107897430814732e-01, -1.107865950035000e-01, -1.012364468937955e-01, -6.701411225019485e-02, -5.373918178409673e-02, -4.865604055118938e-02, -5.105374138024619e-02, -5.052744446888514e-02, -5.052744446888514e-02, -2.093580931761100e-02, -2.256404011138906e-02, -7.077000961998538e-02, 1.125694757905321e-02, -2.964906144212017e-03, -2.964906144212007e-03, 7.385436139713180e-03, 7.726643068780764e-03, 2.851334207864374e-02, 4.496270794241637e-03, 5.539190540202803e-03, 5.539190540202803e-03, -8.534683840694768e-02, -8.520553114668233e-02, -8.533868026114426e-02, -1.224312405851439e-01, -8.527607939869740e-02, -8.527607939869740e-02, -9.471366600561090e-02, -9.491133591069727e-02, -9.456852948214131e-02, -9.474413043394066e-02, -9.489275971457944e-02, -8.704959196409447e-02, -5.537834633587235e-02, -4.967356665787078e-02, -5.665822316817395e-02, -5.444328533362358e-02, -5.458620244663123e-02, -6.418936514394004e-02, -2.699430518029856e-02, -4.552190055688192e-03, -2.581454244194446e-02, -7.851975337594498e-02, 1.833923898590653e-02, 1.833923898590652e-02, -1.873262677774475e-03, 4.403620870132187e-03, 3.428968579825964e-03, -2.031142249656109e-02, -2.148658723728447e-03, 4.079226841288181e-03, -3.673571078368213e-02, -3.999512998955647e-02, -6.383636564200691e-02, -3.794094936266997e-02, -3.841950687759253e-02, -3.841950687759254e-02, -3.684507717256453e-02, -5.371411722531888e-02, -5.102987636889077e-02, -4.637122487609600e-02, -4.898430033271116e-02, -6.128134397443009e-02, -5.282314341928909e-02, -4.238697070491521e-02, -3.438234202075850e-02, -5.192846777352228e-02, -4.319219105743144e-02, -4.319219105743144e-02, -5.782021926348150e-02, 2.782360270542916e-02, 3.243721652221537e-02, -4.712305741260353e-02, -2.356177787973960e-02, 3.033037208453800e-02, 9.993579795854215e-03, 1.262449508259186e-03, 2.565191458505847e-03, 3.051744725819230e-02, 3.795195238419621e-03, 3.795195238419630e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_dldf_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_dldf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.747371672958627e-01, -1.747372526063871e-01, -1.747376582038778e-01, -1.747363883973037e-01, -1.747370500132488e-01, -1.747370500132488e-01, -1.202907756973956e-01, -1.202908384983423e-01, -1.202930029339308e-01, -1.202947646192207e-01, -1.202915523734385e-01, -1.141942031413722e-01, -7.507468276142483e-02, -1.463797340698866e-01, -1.604801692169429e-01, -1.539158206486990e-01, -1.554517980112134e-01, -1.554517980112134e-01, -1.075628488492587e-01, -1.061119593144680e-01, -7.900736698061860e-02, -8.828241328903083e-02, -1.063720780722134e-01, -1.063720780722134e-01, 8.241249730428208e-03, 8.608755124702515e-03, 2.364921978238181e-02, 5.059212672766645e-03, 6.215996061720143e-03, 6.215996061720143e-03, -6.185770182769890e-02, -6.198917200025939e-02, -6.186516664237918e-02, -1.321455341852713e-01, -6.192318947701497e-02, -6.192318947701497e-02, -1.038276322678099e-01, -1.040309546218596e-01, -1.036783308870873e-01, -1.038589693339978e-01, -1.040118482080472e-01, -1.189722978342507e-01, -4.289372725761188e-02, -3.399243870204036e-02, -5.802242670220754e-02, -4.185206768651365e-02, -3.992395817025544e-02, -7.210898567657270e-02, -3.211636191061110e-02, -1.156817883101433e-01, -3.079828628005500e-02, -5.391731656315655e-02, -6.594366397683060e-02, -6.594366397683067e-02, -2.429818831173949e-03, 4.956408108059186e-03, 3.852677087327910e-03, -2.457414087463874e-02, -2.781518125836640e-03, 4.585694823588951e-03, -5.130649073583224e-02, -4.181368683605251e-02, -7.173787450420190e-02, -4.731698006642606e-02, -4.589648207059056e-02, -4.589648207059057e-02, -4.921149903500787e-02, -4.875441493995510e-02, -3.645583400333070e-02, -3.216007992059024e-02, -3.317556917293718e-02, -6.904837093538647e-02, -3.537270563054198e-02, -4.894336676652947e-02, -1.115284423181441e-01, -5.914859868946303e-02, -8.922975462840743e-02, -8.922975462840738e-02, -6.539524416530183e-02, 2.369821710410340e-02, 2.113682430676622e-02, -5.191310644451910e-02, -2.826624935272212e-02, -1.507753522250614e-02, 1.108549040779413e-02, 1.420019381962381e-03, 2.888397276246291e-03, -1.054823614904746e-02, 4.265948908334039e-03, 4.265948908334062e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_dldf_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_dldf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.598970953103148e-09, 1.598965365893933e-09, 1.598927525588239e-09, 1.599012008537601e-09, 1.598969554479158e-09, 1.598969554479158e-09, 7.349286435277668e-06, 7.349477831671323e-06, 7.353943348538008e-06, 7.348977765300054e-06, 7.353127143112330e-06, 2.301120249187600e-07, 1.521211834973112e-02, 1.360907094695387e-03, 1.594234979343933e-03, 1.516806815918928e-03, 1.534083562346878e-03, 1.534083562346878e-03, 6.785341917807890e-01, 6.410254831696631e-01, 7.240714365102603e-03, 1.255467681670238e+00, 1.072255267597012e+00, 1.072255267597012e+00, 5.065255585386381e+02, 4.634171217480007e+02, 1.035791824790191e+01, 1.410500633908818e+03, 1.020292144852032e+03, 1.020292144852032e+03, -1.553761244844931e-09, 1.545062584215695e-10, -1.456708230559992e-09, 1.579180272171279e-06, -7.037968719857532e-10, -7.037968719857532e-10, 1.079336339650718e-04, 1.048365226371209e-04, 1.102519506304975e-04, 1.074288099017569e-04, 1.051421784422036e-04, 5.065092184167233e-06, -5.137346093023133e-04, -8.530514601587267e-04, 7.840459599210223e-04, -6.645216862229570e-04, -7.292101692174281e-04, 3.155082741082747e-02, 1.226917622314047e+02, 5.327341712029436e-01, 1.732913973838643e+02, -3.545244974098859e-06, 2.323294079069234e+00, 2.323294079069232e+00, 4.701277274934418e+08, 1.391766220444226e+03, 7.070607388225833e+03, 1.000571653095202e+03, 2.469036929017238e+08, 2.934222602441099e+03, 3.464885905506762e-02, 8.263032271056549e-03, 6.750884400533071e-02, 2.006821807486118e-02, 1.632216994559364e-02, 1.632216994559364e-02, 3.145739176080434e-02, 2.467807091500330e-04, -1.713356067811357e-03, -1.798138613058612e-03, -2.135696576433075e-03, 6.014736058742102e-02, -7.246501714509874e-04, 2.487623537996579e+00, 1.033836387358555e-01, 3.284217360209451e-01, 4.676057125010254e-02, 4.676057125010260e-02, 1.007387441286161e-01, 1.124203428441620e+01, 6.340140544121695e+00, 9.727871456709029e-03, 3.447824155940709e+02, 4.778518027318306e+00, 1.651010522959202e+02, 2.517903133995837e+04, 8.963314744920322e+03, 5.568970840700761e+00, 4.139825224007897e+03, 4.139825224007984e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_dldf_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_dldf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-5.175198931688638e-17, -1.891612189518822e-55, -1.891840278717551e-55, -1.890875031381619e-55, -1.891389533207325e-55, -1.891389533207325e-55, -1.117064132141356e-48, -1.117625924578488e-48, -1.132357538083999e-48, -1.125384339270605e-48, -1.127269915191119e-48, -2.124232298459224e-04, -2.095683272390794e-42, -2.192989001744714e-03, -2.069985457506834e-03, -2.141682189848215e-03, -2.124780079557155e-03, -2.124780079557155e-03, -1.346234146118935e-02, -1.370567993862888e-02, -1.592621940982442e-43, -9.296910432117037e-03, -1.118634151996012e-02, -1.118634151996012e-02, -1.723156372457998e-03, -1.832819709215768e-03, -4.437842377982296e-03, -9.393229893428959e-04, -1.340798270321293e-03, -1.340798270321293e-03, -4.288192567628357e-04, -4.341772289627201e-04, -4.291258204932464e-04, -3.404891354087704e-23, -4.314894474968660e-04, -4.314894474968660e-04, -2.100774294371137e-20, -1.994671227951696e-46, -1.942558383127727e-46, -1.966911935245193e-46, -1.998413094366961e-46, -5.144982965266182e-04, -5.689960286128817e-03, -9.539948026297262e-03, -5.189704124310709e-03, -6.124282903012042e-03, -5.995006776798633e-03, -9.694838196473082e-41, -4.341236976723119e-36, -9.046627838903955e-03, -6.846505305744116e-36, -9.008391662555235e-04, -9.828547818747781e-03, -9.828547818747780e-03, -5.974547382399693e-28, -8.664609363274906e-04, -1.961273071490145e-03, -7.380124708614725e-35, -1.068943167598713e-27, -1.424090608104714e-03, -1.377019366258003e-01, -4.879141933169159e-02, -3.242354582782708e-39, -8.891578417780517e-02, -7.628955329864358e-02, -7.628955329864356e-02, -1.199483925356648e-01, -6.584316106822266e-03, -8.006795166711508e-03, -1.309841106764175e-02, -9.609252653527009e-03, -5.725860151943521e-40, -6.906449433093154e-03, -3.402887149055405e-38, -8.896943035540915e-03, -3.278930387635771e-39, -9.127229715611257e-03, -9.127229715611272e-03, -4.460693869545587e-40, -4.344666026541952e-03, -4.974857880522087e-03, -1.081836697818400e-02, -2.725407564674632e-35, -8.375795726745039e-03, -1.564421753873292e-03, -3.009253481122494e-04, -9.880518583648174e-04, -8.428359389055600e-03, -1.591609879696336e-03, -1.591609879696342e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
