
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m05_2x_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m05_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-9.375829504063804e-02, -9.375818632470787e-02, -9.375566397681941e-02, -9.375719571104645e-02, -9.375668539251257e-02, -9.375668539251257e-02, -8.309243948100990e-02, -8.309446386653178e-02, -8.312652078873486e-02, -8.291517516166987e-02, -8.301999432426789e-02, -8.301999432426789e-02, -4.187373483486479e-02, -4.145101544504136e-02, -3.018176018387138e-02, -3.101717203164314e-02, -3.123266882503719e-02, -3.123266882503719e-02, -2.147002474274125e-03, -3.663732041596261e-03, -4.992454375172480e-02, 3.737298374595396e-02, 1.848201675845818e-02, 1.848201675845821e-02, 1.667516460304356e-02, 1.751454744738945e-02, 6.658756415361859e-02, 1.078535822968476e-02, 1.295477702498132e-02, 1.295477702498133e-02, -6.643075114776052e-02, -6.641249334138527e-02, -6.642375942024653e-02, -6.640788806812604e-02, -6.642467672823950e-02, -6.642467672823950e-02, -4.752844450595810e-02, -4.836760438241942e-02, -4.671524048404028e-02, -4.754703623732258e-02, -4.841147797544359e-02, -4.841147797544359e-02, -4.462347630556263e-02, -4.989538407500149e-02, -4.560885672252318e-02, -5.054105491284970e-02, -4.517120693547823e-02, -4.517120693547823e-02, 7.197583937876166e-02, 1.814092025706972e-02, 7.484078503107892e-02, -7.529933417829947e-02, 4.790043374056707e-02, 4.790043374056705e-02, 9.728476071896785e-03, 1.129550483131604e-02, 8.309533979610312e-03, 7.774766237888228e-02, 1.033664148102592e-02, 1.033664148102591e-02, -4.382861646140132e-02, -3.845399031664153e-02, -3.931990669450679e-02, -4.061906873979593e-02, -3.987923990130083e-02, -3.987923990130084e-02, -5.318082572257601e-02, -3.356038503224509e-02, -3.572775045524072e-02, -3.790017142351332e-02, -3.695344012500018e-02, -3.695344012500018e-02, -5.168067491405213e-02, -1.868165031196903e-04, -1.191437265826955e-02, -2.887809262187265e-02, -2.055460338590430e-02, -2.055460338590431e-02, -3.355420708043593e-02, 6.360996396008925e-02, 7.573604002124325e-02, -3.288711324174740e-02, 6.950675003296718e-02, 6.950675003296722e-02, 2.547870620841900e-02, 4.025306640650110e-03, 5.992357052449561e-03, 6.935032544565080e-02, 9.357841311793524e-03, 9.357841311793539e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m05_2x_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m05_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.545830312345390e-01, -1.545826126218703e-01, -1.545807817913448e-01, -1.545869609004855e-01, -1.545837204760012e-01, -1.545837204760012e-01, -1.462450982072327e-01, -1.462203972335920e-01, -1.456215863123728e-01, -1.463491706451455e-01, -1.460659486261018e-01, -1.460659486261018e-01, -1.336556370581431e-01, -1.341026353182610e-01, -1.379621975058845e-01, -1.344166842373104e-01, -1.356706589465237e-01, -1.356706589465237e-01, -4.445120100452219e-02, -4.375028330053464e-02, -1.518514624029515e-01, -5.598770245243118e-02, -5.785521807881052e-02, -5.785521807881040e-02, 3.123283778388380e-02, 3.260311192936106e-02, 9.492954525100236e-02, 1.964863304791028e-02, 2.388644069481041e-02, 2.388644069481046e-02, -1.128861081312927e-01, -1.128039341643742e-01, -1.128851557787581e-01, -1.128125880285660e-01, -1.128431365890559e-01, -1.128431365890559e-01, -9.189976097433354e-02, -8.878416948713318e-02, -8.689942039022845e-02, -8.380793015930964e-02, -9.259124934392028e-02, -9.259124934392028e-02, -7.175955157916375e-02, -5.786550002236041e-02, -8.008845299511448e-02, -5.024133774929852e-02, -6.805609521019695e-02, -6.805609521019695e-02, 1.013643000295003e-02, -5.882240415602560e-02, 2.216429210230635e-02, -8.245056191535979e-02, -3.348023407093523e-02, -3.348023407093521e-02, 1.594865055407071e-02, 1.946042917461420e-02, 1.514199408713414e-02, 7.100145654846675e-02, 1.802776434233675e-02, 1.802776434233674e-02, -6.662255185108286e-02, -5.698153806365780e-02, -5.890438723625072e-02, -6.166486743414144e-02, -6.014005143457950e-02, -6.014005143457950e-02, -7.227625909010814e-02, -5.478032142803176e-02, -6.168791160932726e-02, -5.863325891613153e-02, -6.179063368447172e-02, -6.179063368447172e-02, -5.702988742158692e-02, -5.144403227490883e-02, -4.755395841025608e-02, -7.573553986738658e-02, -5.498345036989829e-02, -5.498345036989821e-02, -7.126582042763593e-02, 9.516204831765462e-02, 9.371005455409612e-02, -7.063361097062813e-02, 2.800611972718080e-02, 2.800611972718198e-02, 4.218671248071766e-02, 6.043963957705927e-03, 1.139136254343433e-02, 3.938702346400984e-02, 1.674639134692452e-02, 1.674639134692458e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m05_2x_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m05_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([4.005839391589506e-10, 4.005907756815343e-10, 4.006138466389012e-10, 4.005130454718282e-10, 4.005668918865938e-10, 4.005668918865938e-10, 1.357175457519518e-06, 1.357101400790193e-06, 1.355413573109446e-06, 1.358988500167703e-06, 1.357847071341906e-06, 1.357847071341906e-06, 3.248760169702386e-03, 3.248552495163025e-03, 2.940892728379104e-03, 2.736420349815456e-03, 2.827208442756293e-03, 2.827208442756293e-03, -2.143088180779560e-01, -2.012350495926171e-01, 1.857496749694827e-03, 3.245743094827748e-01, 5.599547442818800e-02, 5.599547442818706e-02, -3.826894632053991e+03, -3.486741098288727e+03, -3.879929642416746e+01, -1.088404137750703e+04, -7.815442383678937e+03, -7.815442383678916e+03, 4.891862735886470e-07, 4.919977124415323e-07, 4.893775608046875e-07, 4.918569793183727e-07, 4.905767862483752e-07, 4.905767862483752e-07, 1.532494043034737e-06, 1.330426049583955e-06, 1.993370914637300e-07, -1.717136527365474e-08, 2.070287017555329e-06, 2.070287017555329e-06, 6.354074400052751e-03, 4.541084776897393e-03, 8.247700225836698e-03, 8.534720527602641e-04, 6.068580691036418e-03, 6.068580691036418e-03, -1.155516295480561e-01, -5.377509615923792e-02, -3.869662715555507e-01, 1.390062077803304e-05, 1.793059508429386e-01, 1.793059508429386e-01, -1.582043455355097e+04, -1.074053149770433e+04, -5.433527875191710e+04, -6.500555761835412e+00, -2.255614233033838e+04, -2.255614233033829e+04, 5.742781749974014e-02, 2.211058887510267e-02, 2.788520705719843e-02, 3.645472143540496e-02, 3.156515668654284e-02, 3.156515668654284e-02, 8.003730724608384e-02, 5.032766034915588e-03, 1.096715356155303e-02, 1.525992415830260e-02, 1.347589871306546e-02, 1.347589871306546e-02, 2.388457480197850e-03, -7.134258767363555e-02, -3.302925068227246e-02, 3.684222622098867e-02, 3.768457091734700e-03, 3.768457091734798e-03, 1.057155048010251e-02, -4.558768445762117e+01, -1.591756489642332e+01, 6.520525379357590e-02, -1.528140036529670e+00, -1.528140036529741e+00, -1.222506599324880e+03, -1.957318368618187e+05, -6.947162942833368e+04, -3.237417542283877e+00, -3.183410314130398e+04, -3.183410314130426e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m05_2x_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m05_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-6.044914348232074e-05, -6.045097966569306e-05, -6.046011755343389e-05, -6.043302743355853e-05, -6.044707892766273e-05, -6.044707892766273e-05, -2.159563985880548e-04, -2.160562029466749e-04, -2.187334374142327e-04, -2.180032098365401e-04, -2.179608100366466e-04, -2.179608100366466e-04, -4.079612350363484e-04, -3.773108522281514e-04, 5.326611538298754e-04, 5.422341240149482e-04, 4.928144453886906e-04, 4.928144453886906e-04, 6.476848614366865e-02, 6.252691428614751e-02, -1.570953517188036e-04, 4.728146209994119e-02, 5.522068808152381e-02, 5.522068808152385e-02, 1.329640253798935e-02, 1.404354788896602e-02, 3.054426347543353e-02, 6.517123199458260e-03, 9.735200654102265e-03, 9.735200654102251e-03, -1.147614564267549e-03, -1.154952677990977e-03, -1.148214264744508e-03, -1.154682157862033e-03, -1.151192229690505e-03, -1.151192229690505e-03, 5.137089722610718e-04, 4.795744947900375e-04, 6.409954830146008e-04, 6.167806599513627e-04, 4.322259791388902e-04, 4.322259791388902e-04, -1.083991273950902e-02, -8.185635228853381e-03, -6.429961557636149e-03, -4.031802193141889e-03, -1.202747988537159e-02, -1.202747988537159e-02, 4.321456289001217e-02, 5.118110690162429e-02, 4.231613436710954e-02, -4.714470659136203e-04, 5.959963619938134e-02, 5.959963619938135e-02, 3.153277483095619e-03, 5.209745199262756e-03, 1.337902236403369e-02, 4.009927427151846e-02, 8.821609218005982e-03, 8.821609218005974e-03, -9.429513734400308e-02, -5.920542297954989e-02, -6.752250432755384e-02, -7.760495315865944e-02, -7.211341114990003e-02, -7.211341114990003e-02, -4.054745704699153e-02, -6.061751544835924e-03, -2.047291773941362e-02, -3.439410714930686e-02, -2.761594988058890e-02, -2.761594988058889e-02, -5.647964911226240e-03, 4.549915004807750e-02, 3.187284175370003e-02, -5.959431542923623e-04, 1.655065436208192e-02, 1.655065436208189e-02, -3.839568007917010e-03, 3.171963431890459e-02, 3.313131213923242e-02, -1.120518900297897e-02, 5.319710380423332e-02, 5.319710380423344e-02, 9.284000379530370e-03, 9.040811915737159e-04, 7.224492410424718e-03, 5.712859240531791e-02, 1.047343530118238e-02, 1.047343530118240e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
