
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m05_2x_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m05_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.645995504598514e-01, -1.645996352774702e-01, -1.646000385296314e-01, -1.645987760656716e-01, -1.645994338558163e-01, -1.645994338558163e-01, -1.107858338429825e-01, -1.107858953893559e-01, -1.107880165870673e-01, -1.107897430814732e-01, -1.107865950035000e-01, -5.896831128538522e-02, -6.701411225019485e-02, -2.411518586943245e-02, -1.890667055252767e-02, -2.141516036946791e-02, -2.086406828282034e-02, -2.086406828282034e-02, -3.037771675403988e-03, -4.747509038911358e-03, -7.077000961998538e-02, 3.787253421438687e-02, 1.794133370466444e-02, 1.794133370466446e-02, 1.659356297823169e-02, 1.735934609130760e-02, 6.360019656318970e-02, 1.010487767012037e-02, 1.244758412615491e-02, 1.244758412615491e-02, -6.613631366026594e-02, -6.611981723511594e-02, -6.613534454067724e-02, -1.224312405851439e-01, -6.612807181394119e-02, -6.612807181394119e-02, -9.471366600561090e-02, -9.491133591069727e-02, -9.456852948214131e-02, -9.474413043394066e-02, -9.489275971457944e-02, -4.884362667630717e-02, -3.559023335908133e-02, -3.631896039104739e-02, -3.390831144425999e-02, -3.509444741221558e-02, -3.583498349797130e-02, -6.418936514394004e-02, -2.699430518029856e-02, 1.761167698898055e-02, -2.581454244194446e-02, -5.222887681494333e-02, 4.768584689383708e-02, 4.768584689383710e-02, -1.873262677774475e-03, 9.896763977929135e-03, 7.705827712960041e-03, -2.031142249656109e-02, -2.148658723728447e-03, 9.167282348091586e-03, -3.363175670071675e-02, -3.411299057014350e-02, -6.383636564200691e-02, -3.381529549709595e-02, -3.388645826540558e-02, -3.388645826540558e-02, -3.337649381624529e-02, -3.306959123676226e-02, -3.395660240152943e-02, -3.411442147392522e-02, -3.411494466159553e-02, -6.128134397443009e-02, -3.715654883888595e-02, -4.238697070491521e-02, -1.366757690101385e-02, -5.192846777352228e-02, -2.196835526309450e-02, -2.196835526309450e-02, -5.782021926348150e-02, 6.209216280377448e-02, 7.211550372530634e-02, -2.783984569973496e-02, -2.356177787973960e-02, 6.782689163049763e-02, 2.245040816022685e-02, 2.837498384363867e-03, 5.765276318490338e-03, 6.802661064736881e-02, 8.528948647431228e-03, 8.528948647431246e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m05_2x_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m05_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.747371672959526e-01, -1.747372526063871e-01, -1.747376582038778e-01, -1.747363883973037e-01, -1.747370500132488e-01, -1.747370500132488e-01, -1.202907756973956e-01, -1.202908384983423e-01, -1.202930029339308e-01, -1.202947646192207e-01, -1.202915523734385e-01, -7.544563936043497e-02, -7.507468276142483e-02, -4.857592305054598e-02, -5.439759621616306e-02, -5.139725148887841e-02, -5.205016188887164e-02, -5.205016188887164e-02, -4.167441874496180e-02, -4.004813086588224e-02, -7.900736698061860e-02, -4.247531062582138e-02, -5.180220383062436e-02, -5.180220383062410e-02, 3.121334487670476e-02, 3.256687866173039e-02, 9.707280881798604e-02, 1.946391433239020e-02, 2.375489786902253e-02, 2.375489786902253e-02, -1.130707092079701e-01, -1.129915157707020e-01, -1.130661503190606e-01, -1.321455341852713e-01, -1.130312205882410e-01, -1.130312205882410e-01, -1.038276322678099e-01, -1.040309546218596e-01, -1.036783308870873e-01, -1.038589693339978e-01, -1.040118482080472e-01, -6.063948356151657e-02, -5.592153669048767e-02, -6.345434975751495e-02, -4.692690486273687e-02, -5.543115807695060e-02, -5.806697531612449e-02, -7.210898567657270e-02, -3.211636191061110e-02, -5.595917564627066e-02, -3.079828628005500e-02, -8.505133373676160e-02, -2.346955172440308e-02, -2.346955172440312e-02, -2.429818831173949e-03, 1.908050906897682e-02, 1.497718781015750e-02, -2.457414087463874e-02, -2.781518125836640e-03, 1.771289480947741e-02, -5.781352875714980e-02, -5.731902488182955e-02, -7.173787450420190e-02, -5.706923827657434e-02, -5.698790094027371e-02, -5.698790094027371e-02, -5.687790146067877e-02, -4.833716149512834e-02, -5.607128355830869e-02, -5.974074238529090e-02, -5.867160393174456e-02, -6.904837093538647e-02, -6.410370952207865e-02, -4.894336676652947e-02, -3.815347024050608e-02, -5.914859868946303e-02, -3.238267901289594e-02, -3.238267901289592e-02, -6.539524416530183e-02, 9.604766984811428e-02, 9.891902617054305e-02, -3.809656076015964e-02, -2.826624935272212e-02, 4.104625314891315e-02, 4.156392183293851e-02, 5.685523113029904e-03, 1.132607474159443e-02, 4.704915002906513e-02, 1.652143424446546e-02, 1.652143424446555e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m05_2x_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m05_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [2.139841756898171e-09, 2.139828906192366e-09, 2.139756533946423e-09, 2.139949133619154e-09, 2.139850344069499e-09, 2.139850344069499e-09, 1.053261723954886e-05, 1.053277604875003e-05, 1.053611865301614e-05, 1.053023939942950e-05, 1.053605495652597e-05, -7.989948859512461e-08, 2.242813626420654e-02, -9.282803835495407e-04, -9.543771141488283e-04, -9.671758363437596e-04, -9.645941070300393e-04, -9.645941070300393e-04, -2.861564398907164e-01, -2.890695505062235e-01, 1.077559758486203e-02, -1.596992523008326e-01, -2.061374022306803e-01, -2.061374022306815e-01, -3.827398112213952e+03, -3.487703556762060e+03, -4.115378794300744e+01, -1.089003387618078e+04, -7.820143421247313e+03, -7.820143421247313e+03, 4.904874581338950e-07, 4.933255632648227e-07, 4.906536464595043e-07, 2.046342505002149e-06, 4.919053089492064e-07, 4.919053089492064e-07, 1.561504059210191e-04, 1.514389910666858e-04, 1.596900675829172e-04, 1.553931353429110e-04, 1.518939869872983e-04, -3.828152456758222e-06, 3.366888243708268e-03, 7.045019297438669e-03, 6.682939714497083e-04, 4.201107011632862e-03, 4.095164118209841e-03, 4.401005511527358e-02, 1.849412231619334e+02, -1.078125638346446e-01, 2.611333189863598e+02, 2.015635766931776e-05, -3.838773624167052e-01, -3.838773624167007e-01, 6.646106847727493e+08, -1.075440739318400e+04, -5.438637070748952e+04, 1.502561757809723e+03, 3.499358735196421e+08, -2.259322711418273e+04, 4.563085267386191e-02, 2.306789603211173e-02, 8.085627795925918e-02, 3.293553546284315e-02, 2.977540717260247e-02, 2.977540717260246e-02, 4.479902115379154e-02, 3.345794269163570e-03, 9.265340733607311e-03, 1.587343622523450e-02, 1.242777926213975e-02, 8.221345860824658e-02, 4.447886744558306e-03, 3.713738042899860e+00, -6.179422603259692e-02, 4.779646209749441e-01, -3.662758303958347e-02, -3.662758303958349e-02, 1.449015025667447e-01, -4.672874163969423e+01, -1.813842005472915e+01, 9.382567534225046e-04, 5.187959455629714e+02, -3.402112295410183e+00, -1.232273046412152e+03, -1.958873041458130e+05, -6.948164206563817e+04, -4.563984827354831e+00, -3.187076339092391e+04, -3.187076339092419e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m05_2x_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m05_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-5.175198931686961e-17, -2.587689075614103e-57, -2.588001097248922e-57, -2.586680657467291e-57, -2.587384486064473e-57, -2.587384486064473e-57, -1.528122237485599e-50, -1.528890758729215e-50, -1.549043322529345e-50, -1.539504120735506e-50, -1.542083552311275e-50, 1.722022242963797e-04, -2.866854390112774e-44, 9.144017918908086e-03, 9.596132536178989e-03, 9.483339510393402e-03, 9.511840447192508e-03, 9.511840447192508e-03, 7.261772970537327e-02, 7.221650615676760e-02, -2.178676168983625e-45, 6.337389292332142e-02, 7.094953983977784e-02, 7.094953983977791e-02, 1.340818857326947e-02, 1.426084530242572e-02, 3.425256759458049e-02, 7.310866900087944e-03, 1.043469902699774e-02, 1.043469902699774e-02, -1.156330453997020e-03, -1.163714161876355e-03, -1.156757053092253e-03, -3.404891354087704e-23, -1.160022026137912e-03, -1.160022026137912e-03, -2.100774294371137e-20, -2.728671857060377e-48, -2.657382488130872e-48, -2.690697678800476e-48, -2.733790658313002e-48, 8.851921528524426e-04, -1.034440890133375e-02, -3.035852314654326e-02, 4.065270242789694e-04, -1.156452517893822e-02, -1.370478565731312e-02, -1.326235209831317e-42, -5.938728647215999e-38, 5.692547004184146e-02, -9.365887513293462e-38, -2.284208297762668e-03, 6.921681881819573e-02, 6.921681881819562e-02, -8.173065852946958e-30, 6.743840876454049e-03, 1.526407762339001e-02, -1.009586858816444e-36, -1.462293683966558e-29, 1.108349336292471e-02, -1.527094176363659e-01, -7.730139339939252e-02, -4.435478677724311e-41, -1.104863711513111e-01, -9.992248243191527e-02, -9.992248243191525e-02, -1.385532812401576e-01, -4.648080639762105e-03, -2.035707602033501e-02, -4.131983100764190e-02, -2.991525089070232e-02, -7.832866507086401e-42, -2.190814430034383e-02, -4.655084139311988e-40, 4.075712380374678e-02, -4.485513674947574e-41, 3.002883766232470e-02, 3.002883766232470e-02, -6.102143377928924e-42, 3.355548357285701e-02, 3.819640009396471e-02, 4.678975484243467e-03, -3.728305104387470e-37, 6.229476479518703e-02, 1.217144025535441e-02, 2.342356435980972e-03, 7.690490647947569e-03, 6.292470117513908e-02, 1.238723505405825e-02, 1.238723505405829e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
