
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_tpssloc_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpssloc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-4.775583723081971e-02, -4.775612048133140e-02, -4.775513943902742e-02, -4.775087322858914e-02, -4.775342881899280e-02, -4.775342881899280e-02, -5.102756772581753e-02, -5.103270384959728e-02, -5.114916106303907e-02, -5.092120936178279e-02, -5.102122102986516e-02, -5.102122102986516e-02, -2.410738503095501e-02, -2.375567865954613e-02, -1.549280892566153e-02, -1.595509767865283e-02, -1.613001540367274e-02, -1.613001540367274e-02, -2.229674495763789e-03, -2.643347843752695e-03, -2.817479491357016e-02, -2.627397173133586e-04, -7.425589272544450e-04, -7.425589272544534e-04, -1.998254598483074e-12, -3.113413366173293e-12, -5.924527335629858e-08, -4.154210110465407e-14, -3.113307779378977e-13, -3.113307779378372e-13, -4.607002827033473e-02, -4.611954759220109e-02, -4.606403876744158e-02, -4.610803503769090e-02, -4.609940370817196e-02, -4.609940370817196e-02, -2.311983991738333e-02, -2.379950118045542e-02, -2.170946461988282e-02, -2.231154897950061e-02, -2.419621621045928e-02, -2.419621621045928e-02, -3.912238579317544e-02, -5.723335980399833e-02, -3.643768057725307e-02, -5.370633164175005e-02, -4.105726215863746e-02, -4.105726215863746e-02, -1.785385906597915e-05, -4.865909288954569e-04, -1.242999899860572e-05, -7.819001547668564e-02, -1.006054739587199e-04, -1.006054739587199e-04, -1.159375632046416e-14, -4.709489192961803e-14, -3.185032277360072e-13, -1.783639205331195e-06, -2.332324955796158e-13, -2.332324955795399e-13, -5.387579591565494e-02, -4.456050791079436e-02, -4.671562160767834e-02, -4.924955251761819e-02, -4.787959525841000e-02, -4.787959525841001e-02, -6.110903027543859e-02, -2.428331552860624e-02, -3.244628240729040e-02, -3.932090490241059e-02, -3.608312881166588e-02, -3.608312881166588e-02, -5.781487822712445e-02, -1.298967230242481e-03, -3.775984844502461e-03, -1.961553406806020e-02, -9.671847664658610e-03, -9.671847664658622e-03, -2.332431136543071e-02, -3.798047312561840e-08, -2.715779140105756e-07, -2.694716842749461e-02, -1.213860814093059e-05, -1.213860814092828e-05, -1.130559629987277e-11, -1.403665206949211e-16, -5.897774585454493e-15, -8.099359035139648e-06, -2.256287726632009e-13, -2.256330042262550e-13]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_tpssloc_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpssloc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.268892379890512e-01, -1.268902690209080e-01, -1.268918936512218e-01, -1.268765431288833e-01, -1.268850078933300e-01, -1.268850078933300e-01, -1.246766813275794e-01, -1.246788703382723e-01, -1.247182914285869e-01, -1.245273383115460e-01, -1.246209315152053e-01, -1.246209315152053e-01, -1.012259356398124e-01, -1.007999244199683e-01, -8.469336281643547e-02, -8.590883596152686e-02, -8.638585069160523e-02, -8.638585069160523e-02, -1.743797492525425e-02, -2.015790401666206e-02, -1.080976620765886e-01, -2.460438277840758e-03, -6.528942681248282e-03, -6.528942681248303e-03, -2.138208084301141e-11, -3.330909166320223e-11, -6.212291409867369e-07, -4.494578900305559e-13, -3.352708939351836e-12, -3.352729295474578e-12, -1.249264675404931e-01, -1.251514624918978e-01, -1.249326686722308e-01, -1.251314113027936e-01, -1.250425519763999e-01, -1.250425519763999e-01, -9.542532291054980e-02, -9.580380461153688e-02, -9.324584333348065e-02, -9.370148826982615e-02, -9.660056848790015e-02, -9.660056848790015e-02, -9.007872672014838e-02, -8.327953360767729e-02, -9.444754255654506e-02, -8.277414744082454e-02, -8.859584964295615e-02, -8.859584964295615e-02, -1.792196486454843e-04, -4.421308005408924e-03, -1.254526648528770e-04, -1.181467518756454e-01, -9.678636111009634e-04, -9.678636111009636e-04, -1.274488069668855e-13, -5.133553638353324e-13, -3.445849954490723e-12, -1.836025327008793e-05, -2.535958284424754e-12, -2.535948144481757e-12, -8.077258119991668e-02, -8.136850448211007e-02, -8.233755615103065e-02, -8.247822371916883e-02, -8.251764066089201e-02, -8.251764066089201e-02, -7.353178827791833e-02, -8.596492410729355e-02, -8.062910930456024e-02, -7.546394598580257e-02, -7.703409396979094e-02, -7.703409396979094e-02, -8.555640806619957e-02, -1.106704996691817e-02, -2.830148895202361e-02, -8.051775179606611e-02, -5.686194593362668e-02, -5.686194593362668e-02, -8.787935229396371e-02, -3.976768100789293e-07, -2.829955857146221e-06, -7.961387577923167e-02, -1.219544114563353e-04, -1.219544114563545e-04, -1.223893737647433e-10, -1.538122568918058e-15, -6.372856023801839e-14, -8.157136101751587e-05, -2.446336231864238e-12, -2.446336225034600e-12]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_tpssloc_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpssloc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [4.025187492196221e-10, 4.025321922741933e-10, 4.025783782248932e-10, 4.023797218771443e-10, 4.024857085192976e-10, 4.024857085192976e-10, 1.228419854769995e-06, 1.228662334612028e-06, 1.234217949019775e-06, 1.224180532074901e-06, 1.228916961053719e-06, 1.228916961053719e-06, 2.617057497085119e-03, 2.596704376846134e-03, 1.971151557864502e-03, 1.931941650386775e-03, 1.975782898853613e-03, 1.975782898853613e-03, 1.090898237031750e-01, 1.249075276771335e-01, 1.425492515387525e-03, 2.977130075425304e-02, 6.211271480418665e-02, 6.211271480418730e-02, 2.777625907304912e-06, 3.818696785947558e-06, 3.331198206552167e-04, 2.921388144264716e-07, 1.232308688269357e-06, 1.232312953901488e-06, 7.300108768168576e-07, 7.377582291900135e-07, 7.304575967418183e-07, 7.372915325796788e-07, 7.338762289028214e-07, 7.338762289028214e-07, 7.914853309772349e-06, 7.884469528393597e-06, 7.556541561063999e-06, 7.536286479594425e-06, 8.070545951102346e-06, 8.070545951102346e-06, 7.392023799235527e-03, 8.914275348702556e-03, 9.930855372692249e-03, 1.167016099361685e-02, 7.425784731054845e-03, 7.425784731054845e-03, 5.420113281483179e-03, 1.751046174602414e-02, 4.917439381589156e-03, 5.340244208918605e-05, 2.224307601409397e-02, 2.224307601409397e-02, 2.128868106138111e-07, 3.931559516996961e-07, 1.458892077354405e-05, 2.625498064843156e-03, 4.234135987213346e-06, 4.234118306193179e-06, 7.209242234347012e-02, 4.248443729078090e-02, 5.157130044058147e-02, 6.080758219271429e-02, 5.600305658947108e-02, 5.600305658947106e-02, 3.293778501409244e-02, 1.088083925641971e-02, 1.297911481081660e-02, 1.934226401287496e-02, 1.507179850664362e-02, 1.507179850664362e-02, 6.463324747360858e-03, 1.997693556895758e-02, 3.111345530388702e-02, 4.908871642467461e-02, 4.671221580309902e-02, 4.671221580309904e-02, 1.563047558747108e-02, 2.296633328807781e-04, 6.677682540070814e-04, 7.383716022604297e-02, 9.523275095330965e-03, 9.523275095330751e-03, 5.238718783632104e-06, 1.409858094423600e-07, 4.162212098719899e-07, 7.528238775401077e-03, 5.757547861434103e-06, 5.757517182308562e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_tpssloc_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpssloc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_tpssloc_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpssloc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-4.688718555918576e-05, -4.688958834350972e-05, -4.690170604527071e-05, -4.686625271392204e-05, -4.688461650686322e-05, -4.688461650686322e-05, -3.598389086627562e-05, -3.601772798298447e-05, -3.693405758410519e-05, -3.670821106027881e-05, -3.667433608292733e-05, -3.667433608292733e-05, 1.484031316252496e-04, 1.497698228499079e-04, 1.591293210690780e-04, 1.866184097425146e-04, 1.780232654296607e-04, 1.780232654296607e-04, 1.271660769138318e-03, 1.477782175818535e-03, 2.015267709548959e-05, 8.681496673593783e-05, 3.112856426062677e-04, 3.112856426062713e-04, 1.230373417954608e-12, 1.937495409887037e-12, 2.269297842829886e-08, 1.834138940664085e-14, 1.750958348999043e-13, 1.750958348997383e-13, -1.471932263510069e-03, -1.489844871037695e-03, -1.473258710429717e-03, -1.489050875995186e-03, -1.480716078327776e-03, -1.480716078327776e-03, 3.227261066790874e-05, 1.592667313954023e-05, 4.246182633392845e-05, 2.972498186224130e-05, 1.766618648901765e-05, 1.766618648901765e-05, -2.830619782634463e-03, -4.640410953853996e-03, -4.712758974384781e-04, -1.207349287159010e-03, -4.048912387658189e-03, -4.048912387658189e-03, 5.773542859857176e-06, 1.834174158927293e-04, 4.030872370300965e-06, -1.314097759733958e-04, 4.583627417174839e-05, 4.583627417174843e-05, 2.447420439336321e-15, 1.539787696594161e-14, 3.636679452477027e-13, 6.605379216256878e-07, 1.410506703585872e-13, 1.410506703582945e-13, -1.227730831521146e-01, -1.014221139313169e-01, -1.159403612727492e-01, -1.258642954752025e-01, -1.214048399991232e-01, -1.214048399991232e-01, -1.713110346158239e-02, -1.421299487749720e-03, -1.067844342794086e-02, -3.112031623853354e-02, -1.858818659395377e-02, -1.858818659395377e-02, -2.634866137057140e-03, 4.690917028930560e-04, 1.113545213927792e-03, 1.588768089695055e-03, 2.073708801709184e-03, 2.073708801709192e-03, 8.540759139486927e-04, 1.604107140250525e-08, 9.495991625009967e-08, -4.062114126991375e-04, 5.487918721998770e-06, 5.487918722001592e-06, 3.158433579933313e-12, 1.403386799658883e-17, 4.950582244271026e-15, 4.168375171685672e-06, 1.799449506120630e-13, 1.799564410708639e-13]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
