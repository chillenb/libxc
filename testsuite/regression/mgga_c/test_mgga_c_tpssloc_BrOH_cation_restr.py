
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_tpssloc_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpssloc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.645995504595983e-01, -1.645996352774701e-01, -1.646000385296314e-01, -1.645987760656716e-01, -1.645994338558163e-01, -1.645994338558163e-01, -1.107858338429825e-01, -1.107858953893559e-01, -1.107880165870673e-01, -1.107897430814732e-01, -1.107865950035000e-01, -2.780843467996058e-02, -6.701411225019485e-02, -3.475683142276537e-03, -2.208189996306690e-03, -2.726897494832872e-03, -2.600062310200896e-03, -2.600062310200896e-03, -1.882612821753301e-03, -2.160401189021029e-03, -7.077000961998538e-02, -1.279301205672812e-04, -4.426921253534920e-04, -4.426921253534918e-04, -1.940184222533565e-12, -2.949483674499367e-12, -4.000633148057388e-08, -2.754739347016144e-14, -2.433355328603258e-13, -2.433355328603258e-13, -4.563124337380393e-02, -4.568128673582846e-02, -4.563412240536306e-02, -1.224312405851439e-01, -4.565631912987624e-02, -4.565631912987624e-02, -9.471366600561090e-02, -9.491133591069727e-02, -9.456852948214133e-02, -9.474413043394064e-02, -9.489275971457944e-02, -2.077202632697880e-02, -2.824501220451421e-02, -3.581488064756742e-02, -2.015391432860786e-02, -2.828577077021548e-02, -3.012425434103961e-02, -6.418936514394004e-02, -2.699430518029856e-02, -3.882796539166728e-04, -2.581454244194446e-02, -3.710913754234570e-02, -6.757778528782548e-05, -6.757778528782548e-05, -1.873262677774475e-03, -1.851823514910838e-14, -1.989538709356509e-13, -2.031142249656109e-02, -2.148658723728447e-03, -1.024927623673422e-13, -3.581692144743629e-02, -3.609260600508575e-02, -6.383636564200691e-02, -3.592530570174125e-02, -3.596838184617710e-02, -3.596838184617710e-02, -3.559824490579189e-02, -2.303566112945295e-02, -3.019193347979149e-02, -3.462807480307065e-02, -3.279066207708704e-02, -6.128134397443009e-02, -3.489481572731980e-02, -4.238697070491520e-02, -2.827618782159356e-03, -5.192846777352227e-02, -6.623696074143677e-03, -6.623696074143683e-03, -5.782021926348150e-02, -3.133394372065590e-08, -1.680037147566323e-07, -1.795726018948460e-02, -2.356177787973960e-02, -7.488250230057586e-06, -4.264900110539954e-12, -2.383390592943857e-19, -4.716526291669513e-15, -6.011767826943047e-06, -1.236536488444734e-13, -1.236588759407158e-13]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_tpssloc_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpssloc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.747371672963184e-01, -1.747372526063871e-01, -1.747376582038778e-01, -1.747363883973037e-01, -1.747370500132488e-01, -1.747370500132488e-01, -1.202907756973956e-01, -1.202908384983423e-01, -1.202930029339308e-01, -1.202947646192207e-01, -1.202915523734385e-01, -9.201991067290126e-02, -7.507468276142483e-02, -2.886958985939354e-02, -2.054378216250250e-02, -2.349267817736428e-02, -2.254737493435956e-02, -2.254737493435956e-02, -1.503022415740996e-02, -1.693548641564360e-02, -7.900736698061860e-02, -1.219249560822148e-03, -3.999090684167719e-03, -3.999090684167601e-03, -2.075001956507264e-11, -3.152571756506165e-11, -4.361331367326284e-07, -2.960893260175626e-13, -2.609613166564600e-12, -2.609613166564600e-12, -1.245946038966328e-01, -1.248212939799974e-01, -1.246076121580943e-01, -1.321455341852712e-01, -1.247080816560425e-01, -1.247080816560425e-01, -1.038276322678099e-01, -1.040309546218596e-01, -1.036783308870873e-01, -1.038589693339978e-01, -1.040118482080472e-01, -8.954108013144019e-02, -8.637236249326112e-02, -7.772619143280496e-02, -8.550839503610883e-02, -8.529751056759963e-02, -8.473482870458560e-02, -7.210898567657270e-02, -3.211636191061110e-02, -3.737055110230685e-03, -3.079828628005500e-02, -9.683289266055567e-02, -6.534262729158281e-04, -6.534262729158313e-04, -2.429818831173949e-03, -1.990764171288036e-13, -2.136652511720827e-12, -2.457414087463874e-02, -2.781518125836640e-03, -1.100901794174713e-12, -8.348140921822281e-02, -7.836511375547234e-02, -7.173787450420190e-02, -8.148413472127650e-02, -8.071426664544218e-02, -8.071426664544216e-02, -8.192136117240971e-02, -8.470464796856435e-02, -7.992219156574210e-02, -7.297923413717944e-02, -7.588867256205883e-02, -6.904837093538647e-02, -8.096856997313384e-02, -4.894336676652947e-02, -2.217107656240313e-02, -5.914859868946302e-02, -4.390960689307161e-02, -4.390960689307163e-02, -6.539524416530183e-02, -3.271886088755316e-07, -1.741012085635363e-06, -7.369655333167087e-02, -2.826624935272212e-02, -7.516476292499381e-05, -4.552760113670070e-11, -3.865520522672986e-17, -5.082223510934771e-14, -6.047801374518450e-05, -1.328295089254283e-12, -1.328270909175314e-12]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_tpssloc_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpssloc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [4.586860437811549e-09, 4.586809269591515e-09, 4.586566005133510e-09, 4.587327637853075e-09, 4.586930783351616e-09, 4.586930783351616e-09, 6.528385864054908e-06, 6.528329500853584e-06, 6.526387243246285e-06, 6.524806825634865e-06, 6.527688839944728e-06, 5.288220639026496e-07, 4.716850471969975e-03, 2.776673941080913e-04, 2.198073811277657e-04, 2.304050421418941e-04, 2.198402075606379e-04, 2.198402075606379e-04, 8.741035683678307e-02, 9.604209217411031e-02, 2.551424908847068e-03, 1.145308603214900e-02, 3.131574256773238e-02, 3.131574256773156e-02, 2.670085723849004e-06, 3.551985230879078e-06, 2.240033066809032e-04, 1.691606238091203e-07, 8.870401369942785e-07, 8.870401369942785e-07, 7.299604683473273e-07, 7.377047158883673e-07, 7.304082610116795e-07, 1.298297135101512e-06, 7.338236232721977e-07, 7.338236232721977e-07, 6.508387607136782e-05, 6.322928524281099e-05, 6.648088928269662e-05, 6.479446869842500e-05, 6.340125007800251e-05, 6.745530228251691e-06, 5.834082748128205e-03, 8.956678503902516e-03, 5.535795138625377e-03, 7.114822646232761e-03, 6.122277694557986e-03, 7.557147370830701e-03, 1.374744296666412e+01, 1.495629082721838e-02, 1.876803616920051e+01, 2.699248284820944e-05, 1.306306449283738e-02, 1.306306449283685e-02, 1.832678208017018e+07, 1.144569104770121e-07, 7.803974789983905e-06, 9.171456112389930e+01, 9.876611055511663e+06, 1.425772270039456e-06, 9.731907622319015e-02, 4.447989982369572e-02, 8.020430914118585e-03, 6.956580790440327e-02, 6.199345682710655e-02, 6.199345682710653e-02, 9.548472814277191e-02, 1.043437783681165e-02, 1.290736965174360e-02, 1.987480857209300e-02, 1.532458329014890e-02, 1.238914243772487e-02, 5.575249299658213e-03, 4.139041894920543e-01, 2.144133785021861e-02, 6.536940412342633e-02, 2.952914164481028e-02, 2.952914164481032e-02, 2.260947011069170e-02, 1.774827008291268e-04, 3.516930135323691e-04, 5.019312498687872e-02, 3.488919001065475e+01, 4.992447531938175e-03, 1.442783872219021e-06, 1.379860493183214e-09, 3.094686358298946e-07, 5.048081038751617e-03, 2.591503454777942e-06, 2.591398344174461e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_tpssloc_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpssloc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-4.322788722050253e-29, -2.328392370444132e-104, -2.328718079929195e-104, -2.327234652691172e-104, -2.328028934373217e-104, -2.328028934373217e-104, -9.401775786587722e-92, -9.408805689952105e-92, -9.593214900229146e-92, -9.502938399450239e-92, -9.530119920898538e-92, -8.903748689998226e-05, -4.303740590815392e-80, 2.328547418523876e-04, 0.000000000000000e+00, 1.809955839087010e-04, 1.714407356517164e-04, 1.714407356517164e-04, 1.208567884358394e-03, 1.398903938197996e-03, -5.537450088121550e-82, 6.177598030947216e-05, 2.499499590975479e-04, 2.499499590975474e-04, 1.210165203079574e-12, 1.879590075242579e-12, 0.000000000000000e+00, 1.459086088898441e-14, 1.525777689003822e-13, 1.525777689003822e-13, -1.486778902951276e-03, -1.504758692765795e-03, -1.487810550191779e-03, -1.016017902654971e-42, -1.495750851343382e-03, -1.495750851343382e-03, -3.762416013234340e-37, -1.328375924365740e-87, -1.327934754006996e-87, -1.325959419045807e-87, -1.334959536348282e-87, 6.640525137544474e-06, -5.604546772495298e-03, -3.127154391963042e-02, 1.681981370416023e-04, -6.314254592351852e-03, -8.461437500408356e-03, -1.969410306342729e-77, -8.014197794063596e-68, 0.000000000000000e+00, -2.051499412066148e-67, -2.035389187838877e-03, 3.762721690858585e-05, 3.762721690858586e-05, -2.059004455417631e-50, 9.216870271128298e-15, 2.802169457672360e-13, -2.704267183830180e-65, -2.887696111236236e-50, 8.971311443247508e-14, -3.190588870635472e-01, -1.440044712417453e-01, -3.993618553747930e-75, -2.274096722502251e-01, -2.023401044162430e-01, -2.023401044162429e-01, -2.887236742861384e-01, -1.698425391259327e-03, -1.320725371916062e-02, -4.281949566392428e-02, -2.439379082465728e-02, -4.189327763699071e-76, -1.933174669981310e-02, -3.198361937949757e-72, 1.038154173481941e-03, -2.167714554029796e-74, 2.153037521560487e-03, 2.153037521560483e-03, -4.653548639585648e-76, 1.442451002411890e-08, 7.313502352743523e-08, 9.248116491244222e-04, -2.719965728336842e-66, 4.263929264978917e-06, 1.850088578118835e-12, 1.740585902155370e-18, 4.358504574944767e-15, 3.561607137792558e-06, 1.290464587051486e-13, 1.290625306089024e-13]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
