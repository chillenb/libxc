
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_pkzb_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_pkzb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.645995504592285e-01, -1.645996352774702e-01, -1.646000385296314e-01, -1.645987760656716e-01, -1.645994338558163e-01, -1.645994338558163e-01, -1.107858338429825e-01, -1.107858953893559e-01, -1.107880165870673e-01, -1.107897430814732e-01, -1.107865950035000e-01, -2.679187441588137e-02, -6.701411225019485e-02, -1.272512904896323e-02, -1.063727286594523e-02, -1.157278562913866e-02, -1.135427242035363e-02, -1.135427242035363e-02, -7.201758521513280e-03, -7.713729926360165e-03, -7.077000961998538e-02, -1.757112738669303e-03, -3.405145659401641e-03, -3.405145659401641e-03, -6.889956329867757e-09, -9.091171471219543e-09, -8.773266583759972e-06, -3.929297683510021e-10, -1.591228923548247e-09, -1.591228923548247e-09, -6.040516891179328e-02, -6.057204794827650e-02, -6.041475638045703e-02, -1.224312405851439e-01, -6.048870905773771e-02, -6.048870905773771e-02, -9.471366600561090e-02, -9.491133591069727e-02, -9.456852948214131e-02, -9.474413043394066e-02, -9.489275971457944e-02, -2.307475769483536e-02, -3.393553870504519e-02, -4.290910372232314e-02, -2.781208917143929e-02, -3.396179510187496e-02, -3.560793303287373e-02, -6.418936514394004e-02, -2.699430518029856e-02, -3.621652588115568e-03, -2.581454244194446e-02, -4.125033498569412e-02, -1.092159781728082e-03, -1.092159781728077e-03, -1.873262677774475e-03, -3.123015413238825e-10, -7.135129390885314e-10, -2.031142249656109e-02, -2.148658723728447e-03, -6.588648191906543e-10, -4.968625184509459e-02, -4.806607220809746e-02, -6.383636564200691e-02, -4.916224400889362e-02, -4.892847947819837e-02, -4.892847947819837e-02, -4.904191452887945e-02, -2.978161759448355e-02, -3.563461998822171e-02, -4.157604934651103e-02, -3.855047987986292e-02, -6.128134397443009e-02, -4.104543659239495e-02, -4.238697070491521e-02, -1.079419670546644e-02, -5.192846777352228e-02, -1.594903702011616e-02, -1.594903702011618e-02, -5.782021926348150e-02, -7.385564180296182e-06, -2.419069376106319e-05, -2.503651876105192e-02, -2.356177787973960e-02, -2.593527770792684e-04, -1.598722276336709e-08, -7.106383924328253e-13, -7.135060504843135e-11, -2.186671654282218e-04, -6.515480691096907e-10, -6.515480711002859e-10]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_pkzb_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_pkzb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.747371672968115e-01, -1.747372526063871e-01, -1.747376582038778e-01, -1.747363883973037e-01, -1.747370500132488e-01, -1.747370500132488e-01, -1.202907756973956e-01, -1.202908384983423e-01, -1.202930029339308e-01, -1.202947646192207e-01, -1.202915523734385e-01, -7.791373725500934e-02, -7.507468276142483e-02, -4.663423071218817e-02, -4.114806669624916e-02, -4.367809842138937e-02, -4.309969622385033e-02, -4.309969622385033e-02, -2.849015118056209e-02, -2.994216157737345e-02, -7.900736698061860e-02, -8.738558757691172e-03, -1.565444065447235e-02, -1.565444065447235e-02, -4.187940185496113e-08, -5.521542165244619e-08, -5.132808991756044e-05, -2.406749431483534e-09, -9.716678311245878e-09, -9.716678311245878e-09, -1.125391159584548e-01, -1.126935607164011e-01, -1.125479716123571e-01, -1.321455341852713e-01, -1.126164078298032e-01, -1.126164078298032e-01, -1.038276322678099e-01, -1.040309546218596e-01, -1.036783308870873e-01, -1.038589693339978e-01, -1.040118482080472e-01, -7.052423340264707e-02, -6.988782719404782e-02, -7.219217587326016e-02, -6.656266969594125e-02, -6.918177020100541e-02, -7.042847341758436e-02, -7.210898567657270e-02, -3.211636191061110e-02, -1.660249696736626e-02, -3.079828628005500e-02, -8.922654332787326e-02, -5.633715117632016e-03, -5.633715117632023e-03, -2.429818831173949e-03, -1.913461609713547e-09, -4.385334422538463e-09, -2.457414087463874e-02, -2.781518125836640e-03, -4.040620443872439e-09, -7.546947469998883e-02, -7.217188441425967e-02, -7.173787450420190e-02, -7.396974460285199e-02, -7.347589813197100e-02, -7.347589813197102e-02, -7.417695806866140e-02, -6.592334417760970e-02, -6.748316504943717e-02, -6.821342042297755e-02, -6.783237751738466e-02, -6.904837093538647e-02, -7.316502523969586e-02, -4.894336676652947e-02, -3.897525192180716e-02, -5.914859868946303e-02, -4.932008194941970e-02, -4.932008194941972e-02, -6.539524416530183e-02, -4.327616423530453e-05, -1.400057008988583e-04, -5.821013054971819e-02, -2.826624935272212e-02, -1.433143744102245e-03, -9.667495074058969e-08, -4.414822228197989e-12, -4.401126134968645e-10, -1.214798745932642e-03, -3.999464316194111e-09, -3.999464329192239e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_pkzb_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_pkzb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [8.161498703697965e-09, 8.161407659089412e-09, 8.160974813445731e-09, 8.162330002804068e-09, 8.161623871117007e-09, 8.161623871117007e-09, 1.161609634514708e-05, 1.161599605689965e-05, 1.161254015647292e-05, 1.160972808567592e-05, 1.161485611526679e-05, 2.505692885866861e-07, 8.392792746785303e-03, 3.090023522320052e-04, 2.784259770590607e-04, 2.989683755535181e-04, 2.940573915064708e-04, 2.940573915064708e-04, 1.086953096122169e-01, 1.104227347714125e-01, 4.539804811746709e-03, 5.912296342609259e-02, 8.573799600248032e-02, 8.573799600248017e-02, 4.153314081571698e-03, 4.792018392630793e-03, 1.836189618850546e-02, 1.066144694450651e-03, 2.554636529105383e-03, 2.554636529105383e-03, 1.796818544069997e-07, 1.814934692226695e-07, 1.797865459159656e-07, 2.310087810373452e-06, 1.805849516892526e-07, 1.805849516892526e-07, 1.158051301966154e-04, 1.125052171409307e-04, 1.182908656289507e-04, 1.152901814792594e-04, 1.128111978435359e-04, 3.381243215995001e-06, 1.940877078578977e-03, 2.512504502042678e-03, 2.161262183142078e-03, 2.342077530939623e-03, 1.957200440360905e-03, 1.344659365761198e-02, 2.446111877048235e+01, 4.212229435037528e-02, 3.339436744249478e+01, 8.748744332148565e-06, 8.226480556488112e-02, 8.226480556488121e-02, 3.260923462136543e+07, 8.531840849922751e-04, 1.246797196468878e-02, 1.631896766601931e+02, 1.757366491096296e+07, 4.063541960125460e-03, 3.879558971090288e-02, 1.485086988621156e-02, 1.427092395701781e-02, 2.576149326692620e-02, 2.235677101813351e-02, 2.235677101813351e-02, 3.715306918983789e-02, 3.717553549790709e-03, 3.989697572995067e-03, 5.678536679450984e-03, 4.488773127277909e-03, 2.204426564041591e-02, 1.605744833410360e-03, 7.364685609764812e-01, 2.368499253382146e-02, 1.163131763555006e-01, 1.926778026419250e-02, 1.926778026419252e-02, 4.022951286696635e-02, 1.778514316250144e-02, 2.135689304827047e-02, 1.872426453304974e-02, 6.207908064983524e+01, 7.107150840069684e-02, 2.351526542150010e-03, 1.153456905590404e-04, 2.092319599361848e-03, 7.583516329283205e-02, 6.065135801060341e-03, 6.065135810690746e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_pkzb_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_pkzb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-3.066687518170866e-29, -3.558729846028865e-99, -3.559227816289260e-99, -3.556960055303304e-99, -3.558174291209209e-99, -3.558174291209209e-99, -1.425685287269584e-86, -1.426751319407536e-86, -1.454715750527558e-86, -1.441026714150293e-86, -1.445147612192830e-86, 1.189451855615036e-04, -6.447763158068867e-75, 8.700306573272429e-04, 6.839692728683992e-04, 7.723346206604988e-04, 7.512018024451451e-04, 7.512018024451451e-04, 4.922773982750739e-03, 5.341185132815650e-03, -8.307093790490413e-77, 9.116015743488009e-04, 2.040331594976720e-03, 2.040331594976720e-03, 4.270546539134184e-09, 5.774855564502890e-09, 4.344867073448413e-06, 1.999411061675085e-10, 9.723735724426697e-10, 9.723735724426697e-10, 9.297698989852625e-05, 9.149538924793640e-05, 9.289318292643632e-05, -7.166719815098205e-43, 9.224050690055446e-05, 9.224050690055446e-05, -2.638641363384182e-37, -2.007194295434969e-82, -2.006354974053353e-82, -2.003458914552841e-82, -2.017132837168178e-82, 2.831350842567232e-04, 4.882882773537470e-03, 1.818366981710220e-03, 4.578914222905126e-03, 5.201489607798424e-03, 4.807718505901601e-03, -2.947506467957342e-72, -1.198985106292067e-62, 1.631515613714940e-03, -3.074015595491995e-62, 6.941386344652596e-04, 6.580744729301045e-04, 6.580744729301002e-04, -3.527103278235796e-45, 1.491499338120152e-10, 9.493279165448398e-10, -4.096161056846482e-60, -4.924655129369183e-45, 5.508264803533869e-10, -1.172706220445292e-01, -3.525169176609234e-02, -5.976255101008926e-70, -7.281977136799271e-02, -6.113642396469775e-02, -6.113642396469771e-02, -1.015689084285272e-01, 5.954363442210149e-03, 5.828890817365682e-03, 1.005879494334527e-03, 4.543608761127031e-03, -6.263249525420196e-71, 3.292064833706713e-03, -4.754879017717767e-67, 4.147905450428756e-03, -3.230088531610462e-69, 5.992085558139883e-03, 5.992085558139892e-03, -6.948467955567820e-71, 3.676417893928820e-06, 1.148421087064849e-05, 9.780756575465363e-03, -4.090652286899919e-61, 1.614096804271660e-04, 7.030469781254548e-09, 3.412281052676133e-13, 6.111277607340568e-11, 1.415884410973573e-04, 6.464334269735527e-10, 6.464334261552755e-10]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
