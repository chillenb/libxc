
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_bc95_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_bc95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-7.661129223974687e-02, -7.661148905363133e-02, -7.661161326187567e-02, -7.660836409600753e-02, -7.661140286443616e-02, -7.661140286443616e-02, -6.180491520088056e-02, -6.180439032869901e-02, -6.177740364961199e-02, -6.162291042444958e-02, -6.180591980207796e-02, -6.180591980207796e-02, -3.686705160394437e-02, -3.667197744453256e-02, -3.157132567659320e-02, -3.124903215224631e-02, -3.679549527538555e-02, -3.679549527538555e-02, -1.176324939168470e-02, -1.221742485618957e-02, -6.040840439579265e-02, -6.209914879226394e-03, -1.190668378802284e-02, -1.190668378802284e-02, -1.155715567117663e-05, -1.322115923063597e-05, -4.342769116845366e-04, -1.237046226379772e-06, -1.307281713279023e-05, -1.307281713279024e-05, -5.806880569556370e-02, -5.810266238655803e-02, -5.807141502743728e-02, -5.809778687239332e-02, -5.808732821990530e-02, -5.808732821990530e-02, -3.673413094777795e-02, -3.688481370664275e-02, -3.627922663054028e-02, -3.639602393382900e-02, -3.743018050876502e-02, -3.743018050876502e-02, -3.306747760788098e-02, -4.084559619578029e-02, -3.412499794953333e-02, -4.169153146397540e-02, -3.337154271273890e-02, -3.337154271273890e-02, -2.826167158572347e-03, -8.765435255315375e-03, -2.933135112530558e-03, -6.648383456296345e-02, -4.300677008829510e-03, -4.300677008829510e-03, -1.112120676597920e-06, -1.666522028034153e-06, -1.188440900416458e-06, -1.090458789545259e-03, -1.572152784708877e-06, -1.572152784708877e-06, -3.402042054165626e-02, -3.312989007608844e-02, -3.343989254662506e-02, -3.368626289305532e-02, -3.356279020382108e-02, -3.356279020382108e-02, -3.496951364025482e-02, -2.593669555677465e-02, -2.832231512496882e-02, -3.068894620464848e-02, -2.952511391606796e-02, -2.952511391606797e-02, -4.339252919852385e-02, -1.196156406422792e-02, -1.575468853703939e-02, -2.372768204894954e-02, -1.931373826075021e-02, -1.931373826075022e-02, -2.599833953485664e-02, -3.210853380553947e-04, -7.392634039220207e-04, -2.548302434077614e-02, -2.125054050692599e-03, -2.125054050692600e-03, -1.654339365489229e-05, -5.159364208498435e-08, -2.921638454759435e-07, -2.087556911962295e-03, -1.188678859554284e-06, -1.188678859554281e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_bc95_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_bc95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.147063835396475e-01, -1.147060858414991e-01, -1.147044912938521e-01, -1.147093097578715e-01, -1.147062295571818e-01, -1.147062295571818e-01, -1.038786170872695e-01, -1.038718823146818e-01, -1.036625760840664e-01, -1.036340542755775e-01, -1.038775901316097e-01, -1.038775901316097e-01, -7.755695727780332e-02, -7.736470351478034e-02, -7.120922314488526e-02, -6.968683822225330e-02, -7.748467976537220e-02, -7.748467976537220e-02, -2.952035931797162e-02, -3.021957297170061e-02, -1.215913350625848e-01, -1.964353277112588e-02, -2.974959615688777e-02, -2.974959615688777e-02, -4.706496303309073e-05, -5.381115210431156e-05, -1.694265361786408e-03, -5.136280683665640e-06, -5.320815809210655e-05, -5.320815809210655e-05, -8.295097306275002e-02, -8.288793933837861e-02, -8.294383169233478e-02, -8.289487526268544e-02, -8.291964111066970e-02, -8.291964111066970e-02, -7.448402196595269e-02, -7.420883287721609e-02, -7.403282947212100e-02, -7.381377591253149e-02, -7.486613194603403e-02, -7.486613194603403e-02, -5.350018122257457e-02, -4.498578372941564e-02, -5.661577993752009e-02, -4.997174300287528e-02, -5.203383965812716e-02, -5.203383965812716e-02, -9.926356548679537e-03, -2.504761797667112e-02, -1.024117595797579e-02, -6.535785466427646e-02, -1.418862819312260e-02, -1.418862819312260e-02, -4.590903603191054e-06, -6.892686814070831e-06, -4.901394456890368e-06, -4.137759035424897e-03, -6.527760605971668e-06, -6.527760605971667e-06, -3.843140314206502e-02, -4.139134230443000e-02, -4.045429341200738e-02, -3.963988063667942e-02, -4.005753653876522e-02, -4.005753653876522e-02, -3.696955282388268e-02, -4.679372295953439e-02, -4.669815088456496e-02, -4.533910772239529e-02, -4.628179275075325e-02, -4.628179275075325e-02, -4.730838852429833e-02, -3.104733569985709e-02, -3.701961262833187e-02, -4.674105546656874e-02, -4.139944927630483e-02, -4.139944927630484e-02, -4.881165528017434e-02, -1.260306542084202e-03, -2.836050576091589e-03, -4.638380735380254e-02, -7.620088546088355e-03, -7.620088546088358e-03, -6.790555276696997e-05, -2.171748048770773e-07, -1.207106572817592e-06, -7.488101690043429e-03, -4.945731176757649e-06, -4.945731176757636e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_bc95_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_bc95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.474507854638910e-10, 1.474511309518934e-10, 1.474455451741204e-10, 1.474398130889275e-10, 1.474510300377197e-10, 1.474510300377197e-10, 1.179365090763436e-06, 1.179403492298274e-06, 1.179698998232976e-06, 1.169823530765479e-06, 1.179409486205319e-06, 1.179409486205319e-06, 2.091318598828879e-03, 2.070966760918724e-03, 1.563807019615207e-03, 1.474835709501423e-03, 2.083884673381678e-03, 2.083884673381678e-03, 1.526324357712879e-01, 1.559565673899906e-01, 2.196590862358261e-03, 2.160713392080943e-01, 1.538817817484333e-01, 1.538817817484333e-01, 1.551201527025778e+00, 1.546636249783258e+00, 5.007590934992623e-01, 1.325877019125699e+00, 1.608071433584734e+00, 1.608071433584734e+00, 1.462656567674784e-07, 1.466912382406648e-07, 1.463019910294610e-07, 1.466332167105457e-07, 1.464933627445386e-07, 1.464933627445386e-07, 5.533286745968235e-06, 5.404418019310589e-06, 5.401244903591548e-06, 5.301342873898895e-06, 5.621643317391963e-06, 5.621643317391963e-06, 4.652125835647681e-03, 6.751561667977057e-03, 6.506624784526888e-03, 1.054404108365634e-02, 4.047797034188894e-03, 4.047797034188894e-03, 2.327337955879589e-01, 7.287650305783248e-02, 2.701168112708167e-01, 4.736207266303679e-05, 2.465129961403568e-01, 2.465129961403568e-01, 1.338008646152081e+00, 1.358135139823738e+00, 3.832434264217586e+00, 4.823356906463105e-01, 2.084532126811283e+00, 2.084532126811281e+00, 6.929998345941950e-03, 5.942185296446120e-03, 6.264221173313328e-03, 6.536716782375209e-03, 6.398016406096517e-03, 6.398016406096517e-03, 9.004047874874698e-03, 4.604330223710073e-03, 5.223196133623079e-03, 6.178263528044566e-03, 5.679379897498795e-03, 5.679379897498795e-03, 5.802002976924096e-03, 4.129943431655569e-02, 3.150363305893857e-02, 2.642935575723646e-02, 2.804750128110767e-02, 2.804750128110770e-02, 8.163969932272490e-03, 4.236457629379030e-01, 4.029537665831074e-01, 4.841057453467920e-02, 4.192956485493182e-01, 4.192956485493187e-01, 1.238593373691625e+00, 2.808829753855792e+00, 2.027842298302144e+00, 5.271463236153016e-01, 3.116837708410321e+00, 3.116837708410325e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_bc95_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_bc95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.453792881020835e-05, -1.453815844837191e-05, -1.453871124683689e-05, -1.453496057061442e-05, -1.453805385589584e-05, -1.453805385589584e-05, -2.775436576906803e-04, -2.775855508915998e-04, -2.787195116710247e-04, -2.766666961361983e-04, -2.775631483849621e-04, -2.775631483849621e-04, -2.355930769489709e-03, -2.326155936325914e-03, -1.624213943089691e-03, -1.639251645310494e-03, -2.345189621909301e-03, -2.345189621909301e-03, -3.960154996545132e-03, -4.321891409453982e-03, -2.589762119739679e-03, -1.210365121099308e-03, -4.071359626015101e-03, -4.071359626015101e-03, -2.971904688411089e-06, -3.390279689868400e-06, -6.932569228204634e-05, -2.686526026535870e-07, -3.421491950835473e-06, -3.421491950835474e-06, -2.270364236199089e-04, -2.280904403504870e-04, -2.271411325631901e-04, -2.279606871468378e-04, -2.275802814273013e-04, -2.275802814273013e-04, -2.619657172859747e-04, -2.670105022861876e-04, -2.519477275473951e-04, -2.557893556152959e-04, -2.791220374975574e-04, -2.791220374975574e-04, -6.561847842347336e-03, -1.240282339943801e-02, -6.733639062756232e-03, -1.215298748333417e-02, -6.923214536847441e-03, -6.923214536847441e-03, -4.299701434995194e-04, -1.456751740288871e-03, -4.869407601727779e-04, -1.934623506917164e-03, -8.147950457462470e-04, -8.147950457462470e-04, -2.575035527888732e-07, -3.760377772443233e-07, -4.770189010703516e-07, -1.807137943766328e-04, -4.274533259165149e-07, -4.274533259165147e-07, -1.720174471106644e-02, -1.414907958778020e-02, -1.514525674058078e-02, -1.598746071056006e-02, -1.555812503198624e-02, -1.555812503198624e-02, -1.879262873722554e-02, -4.786032157844813e-03, -6.887839697489260e-03, -9.933193977300818e-03, -8.256756186165932e-03, -8.256756186165934e-03, -1.114619740287045e-02, -2.039219582609204e-03, -3.148116437615883e-03, -6.753927378774448e-03, -4.714931968855889e-03, -4.714931968855887e-03, -5.187298369985341e-03, -4.672243692400858e-05, -1.115648744901561e-04, -1.094343744547512e-02, -4.028470824938104e-04, -4.028470824938113e-04, -3.464829181194732e-06, -1.603449443640014e-08, -8.721126006235346e-08, -4.396724529975842e-04, -3.942186910684218e-07, -3.942186910684204e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
