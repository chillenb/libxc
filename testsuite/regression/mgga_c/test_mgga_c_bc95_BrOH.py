
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_bc95_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_bc95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.236669792380000e-01, -1.236659530009853e-01, -1.236615156110479e-01, -1.236782071166664e-01, -1.236664382874152e-01, -1.236664382874152e-01, -1.353843969819101e-01, -1.353663025840442e-01, -1.348248774330607e-01, -1.350369530973844e-01, -1.353795400391372e-01, -4.258916066715315e-02, -1.377388602574051e-01, -1.996927172209529e-02, -1.853918499347026e-02, -1.914326849738417e-02, -2.000529668304465e-02, -2.000529668304465e-02, -1.086298818739967e-02, -1.117412223751231e-02, -2.016480594037443e-01, -4.415931880771808e-03, -1.095279784246484e-02, -1.095279784246484e-02, -1.129698088493285e-05, -1.284582816219283e-05, -3.724128602945183e-04, -8.093570660208698e-07, -1.275067686491243e-05, -1.275067686491243e-05, -5.797980054871490e-02, -5.801438226503410e-02, -5.798361618301523e-02, -8.263714386254309e-02, -5.799716871443096e-02, -5.799716871443096e-02, -1.318015607688291e-01, -1.287774254906102e-01, -1.331884857010636e-01, -1.307206000349399e-01, -1.280029942749728e-01, -3.502860351956076e-02, -2.707375513629001e-02, -3.033253974183741e-02, -2.529037548426340e-02, -2.766374484294561e-02, -2.831416145196681e-02, -5.717438472479004e-02, -3.312814904965537e-01, -8.221160064397760e-03, -3.122923129990933e-01, -4.121861023694078e-02, -3.711724490677241e-03, -3.711724490677241e-03, -1.147093604103742e+01, -1.206949544518082e-06, -1.034468973956347e-06, -6.191450030162088e-01, -1.082828149332190e+01, -1.022621547909377e-06, -3.254648350292583e-02, -3.190947330563192e-02, -3.726243640877511e-02, -3.231281728529650e-02, -3.222426005619453e-02, -3.222426005619453e-02, -3.195572665049660e-02, -2.533901577890729e-02, -2.733480035758520e-02, -2.916201414329960e-02, -2.823155864714030e-02, -4.853741790728536e-02, -3.016772411032539e-02, -1.110484731960789e-01, -1.447186771597634e-02, -7.120167367151936e-02, -1.712698050430510e-02, -1.712698050430511e-02, -6.806162834606883e-02, -2.938576055259777e-04, -6.131734578177672e-04, -1.998048948986107e-02, -3.400151597585778e-01, -1.785795278759616e-03, -1.109776951457253e-05, -2.850112789280256e-08, -2.642504696173008e-07, -1.730839628843659e-03, -7.552344611017289e-07, -7.552344611017275e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_bc95_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_bc95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-6.442954615213761e-02, -6.443022471403380e-02, -6.443320988323503e-02, -6.442216589681483e-02, -6.442990349026186e-02, -6.442990349026186e-02, -1.570564785757322e-02, -1.571617703684970e-02, -1.603201141851076e-02, -1.591003077858454e-02, -1.570857702351247e-02, -8.294789617457932e-02, 1.766738783256435e-02, -4.821561904200160e-02, -4.646833298569664e-02, -4.720138889890822e-02, -4.825646180357158e-02, -4.825646180357158e-02, -2.777235389650014e-02, -2.822619588804436e-02, 4.963436163092913e-02, -1.451350127560584e-02, -2.790596756041050e-02, -2.790596756041050e-02, -4.598265240303677e-05, -5.225108844039169e-05, -1.452664896803565e-03, -3.322299944089406e-06, -5.186912147245403e-05, -5.186912147245402e-05, -8.293723383721689e-02, -8.287500667000301e-02, -8.293034987120466e-02, -5.546154870254975e-02, -8.290608616993878e-02, -8.290608616993878e-02, -5.699258895334327e-03, -7.561994013563445e-03, -4.852749204164996e-03, -6.367768262453718e-03, -8.031057698864967e-03, -7.139651635549635e-02, -4.839511981482857e-02, -4.774455400163063e-02, -4.790138134616762e-02, -4.782774018841986e-02, -4.852955746610478e-02, -2.428013487418960e-02, 1.360836658343657e-01, -2.377442140662066e-02, 1.269334752373173e-01, -6.938342281383356e-02, -1.243090729294179e-02, -1.243090729294179e-02, 4.505698096280122e+00, -4.950072887664966e-06, -4.251410860737204e-06, 2.711602173769329e-01, 4.263055944868693e+00, -4.197202680207713e-06, -4.012341703378553e-02, -4.217206921824937e-02, -3.487545785139206e-02, -4.094202911743233e-02, -4.123096762834683e-02, -4.123096762834683e-02, -4.050087382651536e-02, -4.611158634991825e-02, -4.589132716781102e-02, -4.485759107194418e-02, -4.550805398429982e-02, -2.675907349597818e-02, -4.932669426604695e-02, 1.953214783123111e-02, -3.472837567979874e-02, -7.365537916937497e-03, -3.788305629966194e-02, -3.788305629966195e-02, -1.333500273108327e-02, -1.152947416861773e-03, -2.356008162691946e-03, -3.957716395615483e-02, 1.405959439625581e-01, -6.460146991219197e-03, -4.511772271344191e-05, -1.178696902751265e-07, -1.088947014794415e-06, -6.267443284452641e-03, -3.103597364275341e-06, -3.103597364275334e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_bc95_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_bc95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [6.597381013304412e-10, 6.597210242073487e-10, 6.596400362488750e-10, 6.599188327340053e-10, 6.597291479695583e-10, 6.597291479695583e-10, 7.800004652686080e-06, 7.798550919100526e-06, 7.753646067629212e-06, 7.768059932964383e-06, 7.799425276410217e-06, 3.611183973768950e-07, 3.447724941191228e-02, 3.941097385029284e-04, 3.799431167664001e-04, 3.938778783996458e-04, 3.944992245747863e-04, 3.944992245747863e-04, 1.246984943346839e-01, 1.239366518981627e-01, 2.135688862773376e-02, 1.045812477662681e-01, 1.243750857838237e-01, 1.243750857838237e-01, 1.483002659351524e+00, 1.461127723634534e+00, 3.688577212357971e-01, 5.769407226911740e-01, 1.530755950642056e+00, 1.530755950642056e+00, 1.453736687930685e-07, 1.458043041888032e-07, 1.454218615150981e-07, 4.732542374255354e-07, 1.455886560898379e-07, 1.455886560898379e-07, 1.402186780350177e-04, 1.313718232121862e-04, 1.441608823561492e-04, 1.369085376279921e-04, 1.294394888324953e-04, 4.560527694729273e-06, 2.307464554648975e-03, 2.403905038768437e-03, 2.404420631256585e-03, 2.718201463881373e-03, 2.236944059199423e-03, 1.838011642406951e-02, 1.438444559365809e+03, 6.301827137802912e-02, 1.444357736201463e+03, 1.018104838934350e-05, 1.811533858886079e-01, 1.811533858886079e-01, 1.899234451847661e+11, 7.205778765347505e-01, 2.916964238351237e+00, 2.925938818177605e+04, 1.464381905678664e+11, 8.967688847525177e-01, 5.839777880290904e-03, 5.126884935562507e-03, 9.200724005407519e-03, 5.558721673500573e-03, 5.458326463393287e-03, 5.458326463393287e-03, 6.410891160410613e-03, 4.234358622639493e-03, 4.564271664013611e-03, 5.062883048958963e-03, 4.777443233609706e-03, 2.634921550941992e-02, 1.701368846026909e-03, 5.735927049103051e+00, 2.504554727979144e-02, 4.029666822714765e-01, 1.963120549010907e-02, 1.963120549010909e-02, 1.018560734460751e-01, 3.552370283632718e-01, 2.774451865529561e-01, 2.176388178964183e-02, 4.206453963047891e+03, 2.945340602547146e-01, 5.646075952423090e-01, 8.830044668346589e-01, 1.664516591406490e+00, 3.603084291008690e-01, 1.281384950950778e+00, 1.281384950950780e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_bc95_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_bc95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-3.917658360446694e-05, -3.917641123231473e-05, -3.917551531534577e-05, -3.917834055818163e-05, -3.917649376224852e-05, -3.917649376224852e-05, -9.887043367868360e-04, -9.887007300229396e-04, -9.885308710347032e-04, -9.884593417231744e-04, -9.886951608360740e-04, -1.088127057943561e-04, -1.609190699825020e-02, -5.445291569199639e-04, -4.457820990753864e-04, -4.906601057525088e-04, -5.472813192835486e-04, -5.472813192835486e-04, -3.206213529051575e-03, -3.405537879639008e-03, -1.195932061492321e-02, -5.814545647093815e-04, -3.261184954610921e-03, -3.261184954610921e-03, -2.854209542879652e-06, -3.221278524971632e-06, -5.226901242205083e-05, -1.293516305052723e-07, -3.273217523713364e-06, -3.273217523713362e-06, -2.260864214897733e-04, -2.271450500191080e-04, -2.262036616335068e-04, -4.884199834238407e-04, -2.266163582445033e-04, -2.266163582445033e-04, -2.666387509531268e-03, -2.634635771704018e-03, -2.679393442276249e-03, -2.654371911375143e-03, -2.628347316080931e-03, -2.306579532512466e-04, -3.845479206558942e-03, -6.138139092064929e-03, -3.099991179148219e-03, -4.630928458942915e-03, -4.456210690564821e-03, -1.896391590989731e-02, -3.163010342284969e-01, -1.247515588512206e-03, -3.222752639339310e-01, -6.611528428383694e-04, -5.957261388792424e-04, -5.957261388792424e-04, -1.643503726705519e+01, -2.149252785121762e-07, -3.744939857928815e-07, -6.222606556189200e-01, -1.566836490373383e+01, -2.037749800117448e-07, -1.545821994428226e-02, -1.286815826809269e-02, -1.926676861498073e-02, -1.443319322647636e-02, -1.406840723169111e-02, -1.406840723169111e-02, -1.518402873384943e-02, -4.466058127057368e-03, -6.217108914199265e-03, -8.637116875835189e-03, -7.277045233318473e-03, -2.296871231034412e-02, -4.772113583317611e-03, -8.655545137078187e-02, -2.494354187499923e-03, -4.513165412366922e-02, -3.364268121579992e-03, -3.364268121579991e-03, -2.999566309076233e-02, -3.972220325135665e-05, -7.876582863330349e-05, -5.684563294075566e-03, -4.271985534400362e-01, -2.856852191688238e-04, -1.725217491921660e-06, -5.898705933133634e-09, -7.323067647325690e-08, -3.037106231478319e-04, -1.809211503248215e-07, -1.809211503248210e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
