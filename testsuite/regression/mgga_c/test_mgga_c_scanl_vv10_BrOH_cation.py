
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_scanl_vv10_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_scanl_vv10", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.659091432130362e-02, -2.659095556558794e-02, -2.659107406727396e-02, -2.659046175998337e-02, -2.659079184699243e-02, -2.659079184699243e-02, -4.888398444269763e-02, -4.888004740622932e-02, -4.874446272699721e-02, -4.851582394939957e-02, -4.866232614202260e-02, -4.866232614202260e-02, -4.035376646173842e-02, -4.021460262622960e-02, -3.676049608741003e-02, -3.634444864055686e-02, -3.645375384716263e-02, -3.645375384716263e-02, -1.751579250643093e-02, -1.795906528782629e-02, -4.771219600203058e-02, -1.539472167916788e-02, -1.243162219147287e-02, -1.243162219147287e-02, -6.579704746057491e-04, -7.052142065765631e-04, -4.473279131274098e-03, -3.254366764746252e-04, -3.904830665110876e-04, -3.904830665110876e-04, -8.746501771294206e-02, -8.124673860354616e-02, -2.639441875881515e-02, -8.485236520571328e-02, -2.639828739395007e-02, -6.624672198541677e-02, -2.411619672726193e-02, -4.171914051018886e-02, -3.193232240622823e-02, -3.135267927357034e-02, -3.401611677362558e-02, -2.283761363588853e-02, -5.517864153122469e-02, -7.492118063210869e-02, -5.262169286534463e-02, -5.321090970532348e-02, -4.591326411356114e-02, -4.708176285381703e-02, -7.881794157551206e-03, -1.928407068889379e-02, -7.383076228841896e-03, -7.447646320641621e-02, -9.577712834783573e-03, -9.577712834783573e-03, -2.364998687995433e-04, -3.115333479161447e-04, -2.503121612079318e-04, -5.259512769483715e-03, -3.126780970085392e-04, -3.086353026191034e-04, -6.070636938889511e-02, -5.612008952162393e-02, -5.760433217760474e-02, -5.900136663959720e-02, -5.823255855277232e-02, -5.825534369416235e-02, -6.168181143809445e-02, -2.572935124352329e-02, -5.193181331319007e-02, -2.282421364967282e-02, -4.505552880128570e-02, -5.200673986759734e-02, -7.080361962197901e-02, -1.472381172843076e-02, -1.752682492075515e-02, -1.977999781331058e-02, -3.207060726222113e-02, -2.964815108765759e-02, -3.335054236479384e-02, -2.914391617558765e-03, -5.789578979616222e-03, -3.457724320583889e-02, -6.870577784899721e-03, -6.870577784899739e-03, -6.957510249051320e-04, -6.669034362607212e-05, -1.398781508897150e-04, -6.417301651864541e-03, -2.945433359754700e-04, -2.945437265900397e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_scanl_vv10_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_scanl_vv10", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.031665869934424e-02, -3.031682137291138e-02, -3.031661642150319e-02, -3.031677422017028e-02, -3.031652016685516e-02, -3.031661896540920e-02, -3.031721063246974e-02, -3.031725599395150e-02, -3.031734726912374e-02, -3.031640298529984e-02, -3.031734726912374e-02, -3.031640298529984e-02, -1.290662418291187e-01, -1.290669322699599e-01, -1.290801509106826e-01, -1.290813011991599e-01, -1.294526334775547e-01, -1.294456741887456e-01, -1.294489594887042e-01, -1.294462980712546e-01, -1.294241429067117e-01, -1.293512514994823e-01, -1.294241429067117e-01, -1.293512514994823e-01, -7.327986458330953e-02, -7.288232677986577e-02, -7.317801909598506e-02, -7.269054572818265e-02, -6.865867047927897e-02, -6.930096457346485e-02, -6.876168848609975e-02, -6.856860054769880e-02, -6.594123067919234e-02, -7.187689863738232e-02, -6.594123067919234e-02, -7.187689863738232e-02, -7.670552409472646e-02, -7.270247407686967e-02, -7.676639974866133e-02, -7.251091781310848e-02, -8.816162313427253e-02, -8.429907062707467e-02, -3.157974929095202e-02, -3.100889700121174e-02, -2.110343751988015e-02, -4.498898924809096e-02, -2.110343751988017e-02, -4.498898924809094e-02, -1.296598001331446e-03, -1.227696689496354e-03, -1.394671314795008e-03, -1.310509462054439e-03, -8.640180913098441e-03, -8.122574775818752e-03, -6.235936539420363e-04, -6.323298933144398e-04, -6.996901562546382e-04, -1.015035880921594e-03, -6.996901562546386e-04, -1.015035880921594e-03, -1.700527979089479e-01, -1.663104030208972e-01, -1.411229209409427e-01, -1.411738504722337e-01, -2.930786021182747e-02, -2.932802663044943e-02, -1.709033696550475e-01, -1.701991837566922e-01, -2.930345274853286e-02, -2.932301126268652e-02, -1.197350249562230e-01, -1.195933035313751e-01, -3.507117726071073e-02, -3.338188071941613e-02, -8.100606663697422e-02, -8.103605408878689e-02, -1.090995532858469e-01, -1.089922211168248e-01, -1.062830803192726e-01, -1.064281318621318e-01, -1.129626205842508e-01, -1.131993426920308e-01, -3.064509301520189e-02, -3.093705033238712e-02, -1.019770191942548e-01, -1.001419415331183e-01, -1.044869599604733e-01, -1.046505978353887e-01, -9.806432427273014e-02, -9.603229065866858e-02, -7.892188299040441e-02, -7.499399553839285e-02, -7.392396316361684e-02, -7.934174836211151e-02, -7.329161568941614e-02, -7.938379719909591e-02, -1.406372372960905e-02, -1.427551917975590e-02, -3.724590848002732e-02, -3.702675217526544e-02, -1.393287440953069e-02, -1.283624020029176e-02, -1.106892756809061e-01, -1.107644596122777e-01, -1.526229724009035e-02, -1.777343263796404e-02, -1.526229724009035e-02, -1.777343263796404e-02, -6.184832601757692e-04, -3.028209134068356e-04, -9.561737581686259e-04, -2.109461700343233e-04, 3.189792774838934e-03, -3.473285343227406e-03, -1.019098842993191e-02, -9.194245259130871e-03, -7.201199842861897e-04, -5.553456701851027e-04, -7.197555197151423e-04, -5.288313806363318e-04, -7.546074969290528e-02, -7.498112673051244e-02, -7.808323109892494e-02, -7.762048680556444e-02, -7.751202305692637e-02, -7.704261888006167e-02, -7.687734171368764e-02, -7.639789127383671e-02, -7.709841775907086e-02, -7.664015326789700e-02, -7.717489361680065e-02, -7.670355807471982e-02, -7.309310098922417e-02, -7.267748317041701e-02, -7.118101445308264e-02, -7.069712541687632e-02, -9.573508131231161e-02, -9.524704268786374e-02, -2.633912300119295e-02, -2.609797563504144e-02, -7.344643778123434e-02, -7.302593112303091e-02, -9.422350274029517e-02, -9.402621599295297e-02, -1.140649509628890e-01, -1.144958155400077e-01, -2.363926068857285e-02, -2.341031412791819e-02, -2.884039753155393e-02, -2.864872948429789e-02, -2.627490839089684e-02, -2.593469835151123e-02, -5.927298521346572e-02, -5.929572773734216e-02, -5.501107842720061e-02, -5.503661516027365e-02, -9.215195002440335e-02, -9.162887903641172e-02, -5.458491197087014e-03, -5.493694065228923e-03, -1.102666069136419e-02, -1.059831704203116e-02, -7.605885187965207e-02, -7.468645745529545e-02, -1.075525617504972e-02, -1.363565143672793e-02, -1.075525617504970e-02, -1.363565143672795e-02, 3.486773224709211e-03, -4.829807192514672e-03, -1.296749723085822e-04, -1.319838739425746e-04, 5.426458138451077e-03, -4.901029494618655e-03, -1.199444740718731e-02, -1.141725339139581e-02, -6.878648199463707e-04, -5.165671040386015e-04, -6.878552030635080e-04, -5.165772781773044e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_scanl_vv10_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_scanl_vv10", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.031715963808008e-11, 1.575404883384124e-10, -6.031769695217809e-11, -6.031725456148859e-11, 1.575407566807480e-10, -6.031816061585280e-11, -6.031739588381901e-11, 1.575373252708029e-10, -6.031639419073771e-11, -6.031119394510726e-11, 1.575334302035099e-10, -6.031437216197407e-11, -6.031257042390727e-11, 1.575361282554770e-10, -6.031788838586133e-11, -6.031257042390727e-11, 1.575361282554770e-10, -6.031788838586133e-11, 2.006521917466707e-06, 3.506788885136957e-06, 2.006754655840322e-06, 2.007200803814437e-06, 3.507969096944788e-06, 2.007471044773513e-06, 2.024863411910683e-06, 3.537357044808141e-06, 2.024748659044226e-06, 2.016379496362177e-06, 3.521189484025550e-06, 2.016552425900617e-06, 2.019856489834084e-06, 3.526016407129951e-06, 2.017415847703274e-06, 2.019856489834084e-06, 3.526016407129951e-06, 2.017415847703274e-06, 1.508760521532506e-03, 3.159448528767888e-03, 1.508985778186795e-03, 1.499057993417482e-03, 3.139591897449953e-03, 1.499459277460287e-03, 1.266480621172755e-03, 2.657633980142016e-03, 1.264784050563660e-03, 1.214911244201944e-03, 2.564945939663785e-03, 1.214765923239872e-03, 1.243546318665338e-03, 2.608545156964823e-03, 1.229349902112518e-03, 1.243546318665338e-03, 2.608545156964823e-03, 1.229349902112518e-03, 1.016200987400568e+00, 1.618276978808764e+00, 9.073506657873953e-01, 9.930719435468245e-01, 1.580683863419630e+00, 8.834029215123569e-01, 8.414413889596210e-04, 1.701688788845175e-03, 8.423141980894757e-04, 2.966022569227518e-01, 6.012931623470033e-01, 2.883602493582066e-01, 1.442443494219951e-01, 2.779555147216482e-01, 1.670739105033185e-01, 1.442443494219954e-01, 2.779555147216487e-01, 1.670739105033189e-01, 6.209209162340613e+01, 1.341371987990574e+02, 6.277966208405423e+01, 5.874911651072061e+01, 1.266610639527104e+02, 5.944661207347475e+01, 1.943719937655314e+00, 3.877212290185122e+00, 1.953782028533139e+00, 1.332295451967507e+02, 3.644371471762854e+02, 1.306349039281348e+02, 1.063767380134155e+02, 2.273739230608307e+02, 8.050364158094608e+01, 1.063767380134157e+02, 2.273739230608314e+02, 8.050364158094570e+01, 3.057682415245337e-07, 6.628510946109499e-07, 3.158400934162343e-07, 3.082059890873786e-07, 6.206551486960531e-07, 3.082426993586015e-07, -8.061192456869659e-08, 2.052461639822558e-07, -8.074611578964066e-08, 2.668280498367612e-07, 6.452688021271622e-07, 2.685892048836612e-07, -8.073823019724763e-08, 2.055058830852401e-07, -8.087257170441529e-08, 2.333947863596694e-07, 4.694255530317555e-07, 2.372475983870110e-07, -1.853607240669053e-06, 1.356393170426221e-05, -2.085908985788277e-06, 5.868079056385092e-06, 1.210070421183056e-05, 5.867552191910596e-06, 1.633719831156312e-05, 2.806742988388553e-05, 1.634952816314210e-05, 1.529359260214400e-05, 2.657325628575586e-05, 1.542231664515892e-05, 1.734404529671464e-05, 2.958870625791294e-05, 1.728668212702120e-05, -3.719663452735536e-06, 1.100252970820820e-05, -3.714319510065418e-06, 3.857348880809574e-03, 1.104958007747890e-02, 4.122006211755989e-03, 8.602960500220981e-03, 1.802924493081012e-02, 8.578762787466210e-03, 5.282481495767932e-03, 1.400705001287019e-02, 5.097037636507549e-03, 9.143577347655168e-03, 1.823925682461838e-02, 9.188671363917324e-03, 3.825501017593772e-03, 7.651002035187543e-03, 3.825501017593772e-03, 4.848679728512479e-03, 9.975198508720690e-03, 4.793436128209555e-03, -2.653679607504154e+00, 5.867684019944655e+00, -2.496830555351022e+00, 6.643650272926617e-02, 1.533755427602772e-01, 6.653329197334487e-02, -4.201307776695800e+00, 7.995242674107891e+00, -3.009965512563678e+00, 5.432162844794246e-05, 1.084721671287508e-04, 5.432253403822475e-05, -1.877892629613905e+00, 3.753052070193369e+00, -1.281688406159019e+00, -1.877892629613905e+00, 3.753052070193369e+00, -1.281688406159019e+00, -2.252098068551061e+04, 4.118697370628016e+04, -1.782216973587746e+04, -4.350688763352373e+04, 8.387173613826231e+04, -3.974189109135246e+04, -1.883804957854096e+06, 3.174949106351804e+06, -1.335047635238747e+06, -1.952086006082279e+01, 4.062250011889724e+01, -1.879505702010255e+01, -3.202831083157716e+03, 3.544657015750207e+03, -1.657495973551486e+02, -3.718668495694740e+04, 2.977859481518495e+04, -5.215463719035489e+03, 1.000893861464930e-02, 2.418892225208680e-02, 1.003294431506717e-02, 7.567444593574816e-03, 1.928664557725798e-02, 7.591580351468610e-03, 8.338652841120408e-03, 2.070437846899469e-02, 8.362048027478695e-03, 1.007407239602992e-02, 2.014882206953818e-02, 1.007407433595048e-02, 8.450489856667086e-03, 2.183293804810697e-02, 8.477662496226604e-03, 8.671197376095067e-03, 2.140133847501920e-02, 8.694668082840740e-03, 1.225980172256114e-02, 2.958541485127434e-02, 1.228474864742272e-02, 1.048884884884393e-02, 1.999897034376080e-02, 1.033397714740306e-02, 6.842348682766028e-03, 1.670190976658483e-02, 6.862279298106382e-03, -4.156868002263737e-03, 1.116092157549366e-02, -4.054867870599371e-03, 7.954836727126732e-03, 1.637025742397083e-02, 7.966066639706016e-03, 5.047498148266335e-03, 1.831249763096878e-02, 5.051616645496837e-03, 4.742540423577229e-03, 1.343202343983513e-02, 4.709224466405105e-03, -7.791670349057638e-02, 2.176277011213870e-01, -7.471033753569253e-02, -3.653264909109987e-02, 1.528762648755498e-01, -3.271599198738866e-02, -1.875639156587659e-02, 5.419255481176161e-02, -1.800413449307598e-02, 3.100662342965525e-02, 6.253868700124916e-02, 3.100308906590885e-02, 3.395286616338451e-02, 7.126393936100646e-02, 3.399837649627489e-02, 2.633656116600855e-02, 4.487974204016591e-02, 2.623910616972471e-02, -1.666340848722942e+02, 3.316975309757232e+02, -1.599016293237711e+02, 1.125744063302806e+00, 2.238767608924503e+00, 1.101407021273536e+00, 9.253423281922929e-02, 1.598000278597401e-01, 9.075651090709806e-02, -9.342239941045106e+00, 1.738727357196133e+01, -6.626911641256065e+00, -9.342239941045341e+00, 1.738727357196174e+01, -6.626911641256244e+00, -1.118231338018718e+05, 2.010685735444747e+05, -9.030521356105230e+04, 2.030871677673614e+03, 1.341433794644894e+04, 2.062789657905755e+03, -7.834247950364742e+06, 1.302583528184475e+07, -5.412047097722505e+06, -9.911040030528531e+00, 2.066080011663152e+01, -8.949600597987192e+00, -1.280311265494466e+03, 2.571677851325958e+03, 1.923699862903914e+02, -1.278843136844889e+03, 2.570551295003820e+03, 1.926109860553202e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_scanl_vv10_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_scanl_vv10", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.542908875230264e-04, -1.543054847253249e-04, -1.543741155435387e-04, -1.543911019426118e-04, -1.566454133637538e-04, -1.566385618370414e-04, -1.567539318696575e-04, -1.567658919065999e-04, -1.564080642836761e-04, -1.562638555440469e-04, -1.564080642836761e-04, -1.562638555440469e-04, -3.501942702303865e-04, -3.498333984881144e-04, -3.482161911522442e-04, -3.478437050834942e-04, -3.007110691800203e-04, -3.005705634648332e-04, -3.088863212685806e-04, -3.085735049283550e-04, -3.086072587484393e-04, -3.085706690476390e-04, -3.086072587484393e-04, -3.085706690476390e-04, -1.277185992463574e-02, -1.202254277804332e-02, -1.297902917385080e-02, -1.220220782402224e-02, -1.046952586954211e-04, -1.035201437123475e-04, -9.234582695264405e-04, -8.884465203684578e-04, -3.910877611436010e-04, -4.118434056629834e-04, -3.910877611436029e-04, -4.118434056629857e-04, 3.252854937210060e-07, 3.671070305032505e-07, 3.569141776453431e-07, 4.113020986285889e-07, -6.265668974933275e-06, -6.900291143797268e-06, 2.041873438715901e-07, 2.095972796042331e-07, 2.448797834683902e-07, 3.593677431343567e-08, 2.448797834683930e-07, 3.593677431343661e-08, 1.953603574420799e-07, -2.984843645910649e-07, -5.227937705884470e-06, -5.228865912297287e-06, 0.000000000000000e+00, 0.000000000000000e+00, 5.524526572728181e-07, 5.088434181311812e-07, 0.000000000000000e+00, 0.000000000000000e+00, -6.551912207532576e-06, -7.355173867260673e-06, 3.212516756490041e-07, 3.412879565535798e-07, -2.858225477539800e-05, -2.857695069473042e-05, -2.728701347667536e-04, -2.731306203782669e-04, -2.619424065493444e-04, -2.635466219175693e-04, -2.939692534720356e-04, -2.929267268834087e-04, 0.000000000000000e+00, -1.437712115839379e-06, 2.516935790566165e-05, 1.574417029443369e-05, -4.411805160230342e-05, -4.163433121102899e-05, 1.563921061657906e-05, 2.609038741301749e-05, -2.527000958430281e-04, -2.658534380049199e-04, 0.000000000000000e+00, 0.000000000000000e+00, -5.800282712562031e-04, -5.709179021405987e-04, 0.000000000000000e+00, 0.000000000000000e+00, 8.294605291578357e-06, 8.364701679838497e-06, 0.000000000000000e+00, 0.000000000000000e+00, -7.114468477232707e-05, -7.115290430568575e-05, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 5.870030711736258e-08, 7.753442936372258e-08, 3.647673314989771e-13, 4.330583072350237e-13, 6.014750166853746e-12, 3.109598765669671e-11, 0.000000000000000e+00, 0.000000000000000e+00, 3.464057290761836e-08, 4.666171841486389e-07, 9.473619668990516e-11, 7.934910095603513e-10, 2.088871421098475e-12, 2.061588991747678e-12, 1.323314550991899e-11, 1.328854428286676e-11, 4.219472459814626e-14, 4.213840606333564e-14, 3.635127767551062e-12, 4.585965353911196e-12, 1.771256057807964e-10, 1.306392914803361e-10, 1.286625145802642e-14, 1.291650778836370e-14, 1.487015764921328e-13, 1.418633754092308e-13, -2.942932052703652e-03, -2.916000039015878e-03, 1.919019636271311e-05, 1.908318896435583e-05, 0.000000000000000e+00, 0.000000000000000e+00, -6.548209518425657e-04, -6.566984594710771e-04, 1.987380628403143e-05, 2.045776377150828e-05, 2.705268517562504e-05, 2.850522786261304e-05, 0.000000000000000e+00, 0.000000000000000e+00, 5.535056031237394e-06, 5.587927107383664e-06, 0.000000000000000e+00, 0.000000000000000e+00, -2.647688265064610e-04, -2.649836341318681e-04, -8.743309501307831e-04, -8.766536197274689e-04, -5.210403011031341e-03, -5.207432122356404e-03, 0.000000000000000e+00, 0.000000000000000e+00, -7.432905462185071e-06, -4.364554863992369e-06, -6.319725070884083e-03, -6.241499462738464e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.385837151594525e-08, 2.485298298396706e-09, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 3.533407687169732e-11, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
