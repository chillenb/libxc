
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_scanl_vv10_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_scanl_vv10", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-3.862820616607801e-02, -3.862902916058228e-02, -3.863137091121752e-02, -3.861914979891855e-02, -3.464471270262454e-02, -3.464471270262454e-02, -2.915031995861006e-02, -2.718147027664118e-02, -2.718153675959016e-02, -2.614424946133027e-02, -2.915060780005111e-02, -2.718148771973304e-02, -2.445154336937431e-02, -2.444829958140505e-02, -2.437340598295246e-02, -2.439756630967844e-02, -2.337565391008893e-02, -2.427008570872782e-02, -1.410547549952170e-02, -1.433531664718054e-02, -2.394518594048903e-02, -1.738217785637194e-02, -1.235590838547158e-02, -1.969185467103316e-02, -8.223426940845032e-04, -6.562951515737515e-04, -9.173739163610087e-03, -1.111894621264924e-04, -9.253722649732151e-04, -6.923030310548709e-05, -2.749636480652998e-02, -3.803144275008905e-02, -2.749637092739776e-02, -2.749648069812044e-02, -2.749642748932815e-02, -3.796786032392491e-02, -2.434063665361704e-02, -2.439706611380218e-02, -2.654290081144486e-02, -2.430882113922495e-02, -2.655817688416516e-02, -2.434780271382501e-02, -2.407054079257307e-02, -3.924364946123425e-02, -2.379808290069849e-02, -3.357398645419277e-02, -2.404376917054870e-02, -2.404376917054868e-02, -1.106874189046005e-02, -1.895812590306762e-02, -1.461605404991302e-02, -6.689957850808168e-02, -1.608732534686956e-02, -9.978936683581598e-03, -7.309561422096103e-05, -1.408804788577254e-03, -3.530763268818732e-04, -1.214287247450274e-02, -1.168727589306467e-03, -1.168727589306466e-03, -3.863212180499800e-02, -3.506678977566738e-02, -3.611177606736583e-02, -2.407858130094375e-02, -3.656923429071707e-02, -2.407610462217323e-02, -2.400276452966144e-02, -2.352122657804275e-02, -2.367116028392360e-02, -2.380982076770610e-02, -2.637290755243439e-02, -2.374027700536388e-02, -2.444160683509042e-02, -1.643846433513522e-02, -2.105215271653865e-02, -2.078951643395232e-02, -2.167148079745935e-02, -2.167148079745935e-02, -2.184062742907904e-02, -3.236302186725006e-03, -6.583350371874523e-03, -2.148120078203482e-02, -1.363052275451069e-02, -1.363052275451069e-02, -4.352490501479212e-04, -4.014203202069063e-04, -4.531148990847909e-05, -7.099870312705096e-03, -1.109937370003485e-03, -4.850130768636582e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08

# test_mgga_c_scanl_vv10_BrOH_cation_2_vrho() not generated due to NaN

# test_mgga_c_scanl_vv10_BrOH_cation_2_vsigma() not generated due to NaN

# test_mgga_c_scanl_vv10_BrOH_cation_2_vlapl() not generated due to NaN


def test_mgga_c_scanl_vv10_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_scanl_vv10", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
