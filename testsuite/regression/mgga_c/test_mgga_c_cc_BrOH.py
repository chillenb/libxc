
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_cc_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_cc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.645987698524943e-01, -1.645988436743185e-01, -1.645992273738454e-01, -1.645980174205966e-01, -1.645988083291892e-01, -1.645988083291892e-01, -1.107845175179429e-01, -1.107845773617200e-01, -1.107873959302812e-01, -1.107885830051033e-01, -1.107846697666463e-01, -1.107846697666463e-01, -6.686302819127440e-02, -6.683821749222559e-02, -6.618747242203132e-02, -6.637626507114835e-02, -6.685398158784905e-02, -6.685398158784905e-02, -3.884830504868374e-02, -3.909771337804629e-02, -7.129454252820250e-02, -3.304152509516754e-02, -3.892337880699501e-02, -3.892337880699501e-02, -5.836962451735261e-03, -6.059137226486771e-03, -1.705859550267874e-02, -3.162581153974649e-03, -6.008297725497659e-03, -6.008297725497659e-03, -1.224135396776812e-01, -1.224187221882082e-01, -1.224140865163768e-01, -1.224181159734425e-01, -1.224161738835294e-01, -1.224161738835294e-01, -9.468307849320164e-02, -9.487508716530836e-02, -9.460510801354542e-02, -9.475546076572411e-02, -9.491339721119327e-02, -9.491339721119327e-02, -6.354994642731449e-02, -6.551985916361885e-02, -6.231400667193045e-02, -6.330586491585430e-02, -6.444458984389427e-02, -6.444458984389427e-02, -2.795790560897061e-02, -3.898281332058283e-02, -2.775589238622643e-02, -9.415426217275502e-02, -3.029258085721030e-02, -3.029258085721030e-02, -3.066310498112501e-03, -3.437963615799383e-03, -2.681751673836464e-03, -2.111687625325582e-02, -3.174878197427740e-03, -3.174878197427740e-03, -6.429412558975314e-02, -6.416691228742127e-02, -6.421258200260355e-02, -6.424776511879356e-02, -6.423016145500850e-02, -6.423016145500850e-02, -6.352052611074439e-02, -6.019555445738921e-02, -6.120693492227375e-02, -6.211304617973156e-02, -6.165502636499921e-02, -6.165502636499921e-02, -6.665863684204915e-02, -4.342835275928391e-02, -4.691716832139661e-02, -5.212060951466563e-02, -4.948795152624541e-02, -4.948795152624540e-02, -5.782933926396749e-02, -1.620746291807964e-02, -1.975614416892405e-02, -5.089617481137674e-02, -2.479856847389609e-02, -2.479856847389609e-02, -6.628430789950041e-03, -1.088756144151760e-03, -1.944410087279367e-03, -2.411824304133295e-02, -2.758875307244261e-03, -2.758875307244265e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_cc_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_cc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.747363821479894e-01, -1.747364563991749e-01, -1.747368423303563e-01, -1.747356253397650e-01, -1.747364208484719e-01, -1.747364208484719e-01, -1.202894325397279e-01, -1.202894936034073e-01, -1.202923696260642e-01, -1.202935808973291e-01, -1.202895878919845e-01, -1.202895878919845e-01, -7.491623656166164e-02, -7.489021498171380e-02, -7.420751974649305e-02, -7.440561961652781e-02, -7.490674850235195e-02, -7.490674850235195e-02, -4.512324136900023e-02, -4.539324146282498e-02, -7.955565354779474e-02, -3.879901454157739e-02, -4.520452614008818e-02, -4.520452614008818e-02, -7.408289245084940e-03, -7.682811744579174e-03, -2.082742850484083e-02, -4.067896927582291e-03, -7.620030990823618e-03, -7.620030990823618e-03, -1.321275545433125e-01, -1.321328186738526e-01, -1.321281099946898e-01, -1.321322029122264e-01, -1.321302302367930e-01, -1.321302302367930e-01, -1.037961680429288e-01, -1.039936710459792e-01, -1.037159602498012e-01, -1.038706240781529e-01, -1.040330747452932e-01, -1.040330747452932e-01, -7.143667712672172e-02, -7.350674401928625e-02, -7.013611107125281e-02, -7.117994327433122e-02, -7.237723572555273e-02, -7.237723572555273e-02, -3.318915835573125e-02, -4.526887000185349e-02, -3.296452513148780e-02, -1.032521073283362e-01, -3.577533340109380e-02, -3.577533340109380e-02, -3.946287688264065e-03, -4.415186659901372e-03, -3.459435419270271e-03, -2.549362941948338e-02, -4.083422991717209e-03, -4.083422991717209e-03, -7.221909961565520e-02, -7.208538414747716e-02, -7.213338981778679e-02, -7.217037123496239e-02, -7.215186794073081e-02, -7.215186794073081e-02, -7.140573462753827e-02, -6.790359064726798e-02, -6.896995479255083e-02, -6.992450993060864e-02, -6.944209849581727e-02, -6.944209849581727e-02, -7.470185404849744e-02, -5.006348929577377e-02, -5.380411421205687e-02, -5.935291128433449e-02, -5.654971800760063e-02, -5.654971800760062e-02, -6.540488546969517e-02, -1.983769131502107e-02, -2.393840323403960e-02, -5.805018503704280e-02, -2.965891225314009e-02, -2.965891225314009e-02, -8.384336061627171e-03, -1.421584089965163e-03, -2.520781351740872e-03, -2.889363359653218e-02, -3.557215213140588e-03, -3.557215213140588e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_cc_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_cc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_cc_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_cc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
