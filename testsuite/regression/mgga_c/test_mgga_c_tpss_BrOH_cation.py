
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_tpss_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-4.771334984556944e-02, -4.771389185648277e-02, -4.771487016057316e-02, -4.770680520841269e-02, -4.771123490735583e-02, -4.771123490735583e-02, -4.180448840522418e-02, -4.180946389859539e-02, -4.192501520399516e-02, -4.172818909114268e-02, -4.181216835757346e-02, -4.181216835757346e-02, -2.776496920190963e-02, -2.753736459695470e-02, -2.211579971640829e-02, -2.243699075614414e-02, -2.214935521069214e-02, -2.214935521069214e-02, -7.468469309332402e-03, -8.076172565857151e-03, -3.001899509860433e-02, -2.316352589118994e-03, -2.768347547510702e-03, -2.768347547510706e-03, -6.812521735854480e-09, -9.197722886609005e-09, -1.034636136051964e-05, -3.707050859890689e-10, -6.675241811403000e-10, -6.675241811310186e-10, -5.045747213675841e-02, -5.056777673680210e-02, -5.045839722510184e-02, -5.055589054355338e-02, -5.051550707951159e-02, -5.051550707951159e-02, -2.297738968992716e-02, -2.347786327134709e-02, -2.203381728738133e-02, -2.247294880538104e-02, -2.372362158818342e-02, -2.372362158818342e-02, -3.836074404879507e-02, -5.507138370045793e-02, -3.615434585491747e-02, -5.096646982337648e-02, -3.991249429185893e-02, -3.991249429185894e-02, -4.747117263166945e-04, -3.887802017252274e-03, -3.676707484444377e-04, -7.151190227923201e-02, -1.225128348098285e-03, -1.225128348098285e-03, -1.400608587550092e-10, -3.689842135103946e-10, -6.456226265707631e-10, -9.515354319393470e-05, -5.962779870820952e-10, -5.962779850220804e-10, -5.560062002789899e-02, -4.763857156410411e-02, -4.965772416931045e-02, -5.184694026862489e-02, -5.068063823179039e-02, -5.068063823179040e-02, -6.086337013048546e-02, -2.805870235061598e-02, -3.362137418337949e-02, -4.020442294862588e-02, -3.676615598728770e-02, -3.676615598728770e-02, -5.520119783980712e-02, -6.917165245809132e-03, -1.150246300875134e-02, -2.429720847662942e-02, -1.737636531336259e-02, -1.737636531336259e-02, -2.736639739113622e-02, -8.018000607705054e-06, -2.949974420849901e-05, -2.867936829182111e-02, -3.044065164237326e-04, -3.044065164237334e-04, -2.104336800881252e-08, -3.712920426194480e-12, -5.472460102651661e-11, -2.470171256075240e-04, -5.406672004405601e-10, -5.406671952760257e-10]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_tpss_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.133332477122869e-01, -1.133331084434594e-01, -1.133340202739938e-01, -1.133342031485771e-01, -1.133366401294546e-01, -1.133354582471732e-01, -1.133209336248731e-01, -1.133233972398481e-01, -1.133258653232289e-01, -1.133336450827655e-01, -1.133258653232289e-01, -1.133336450827655e-01, -1.064108093613981e-01, -1.063973851203007e-01, -1.064165762498875e-01, -1.064023751001121e-01, -1.065368475116384e-01, -1.065212907127432e-01, -1.062778494486537e-01, -1.062606930056459e-01, -1.064151965134794e-01, -1.063558087193606e-01, -1.064151965134794e-01, -1.063558087193606e-01, -7.768991329707833e-02, -7.705834192617550e-02, -7.748041087402856e-02, -7.670409472406380e-02, -6.860128544610947e-02, -6.973273197669547e-02, -6.972520872980675e-02, -6.932904468374676e-02, -6.476322268720443e-02, -7.598395919108918e-02, -6.476322268720443e-02, -7.598395919108918e-02, -3.049336570718578e-02, -2.822547008508215e-02, -3.239333598037423e-02, -2.978398278479807e-02, -8.427034157810123e-02, -8.118793239187719e-02, -1.145081369457537e-02, -1.143481877838902e-02, -1.017876882388056e-02, -2.938180133627954e-02, -1.017876882388061e-02, -2.938180133627961e-02, 1.979281406230051e-08, -9.348360798701918e-08, -2.078683851755106e-08, -8.495507751327999e-08, -6.752081353231472e-05, -5.598241860049772e-05, 3.030107496758575e-09, -8.460315866281864e-09, -4.368137182837242e-09, -8.625518980375905e-09, -4.368137184571246e-09, -8.625518982846825e-09, -1.155828359889839e-01, -1.155882001354805e-01, -1.157998789893785e-01, -1.158130873466164e-01, -1.155880279671548e-01, -1.155982894830847e-01, -1.157854628165898e-01, -1.157911192586042e-01, -1.156925122449120e-01, -1.157048219973779e-01, -1.156925122449120e-01, -1.157048219973779e-01, -7.125209450435023e-02, -7.125362012545980e-02, -7.190707602065236e-02, -7.192515940895292e-02, -6.977939160146439e-02, -6.900017593626336e-02, -7.038410084073256e-02, -6.959770584653401e-02, -7.168434914918705e-02, -7.338170237520109e-02, -7.168434914918705e-02, -7.338170237520109e-02, -7.889821278544067e-02, -7.900494290466387e-02, -8.295976505217630e-02, -8.289659268956945e-02, -8.010516847833651e-02, -7.687109275926864e-02, -8.281524022368073e-02, -7.921032704962935e-02, -7.802834527215702e-02, -8.150781984868863e-02, -7.802834527215710e-02, -8.150781984868868e-02, -2.687186984700698e-03, -2.548056362369507e-03, -1.776127964557945e-02, -1.768237760644365e-02, -2.118091512432061e-03, -1.989137016276733e-03, -1.174657571369098e-01, -1.175332914671401e-01, -7.859657118336097e-03, -5.359021948323239e-03, -7.859657118336099e-03, -5.359021948323237e-03, -9.509130409360226e-10, -9.329279847966490e-10, -2.498306735340122e-09, -2.504252608984426e-09, -9.805985043382264e-09, -1.203646743025091e-11, -5.198755925069726e-04, -5.827725217415967e-04, -5.320122712689412e-09, -3.692873524474259e-09, -5.320122708261734e-09, -3.692873520818138e-09, -7.896276671372121e-02, -7.861921453493821e-02, -7.983084486401112e-02, -7.958286890142025e-02, -8.021911278750002e-02, -7.995616470477873e-02, -8.015951738313704e-02, -7.987360938744778e-02, -8.025195307124149e-02, -7.998003329397579e-02, -8.025195307124151e-02, -7.998003329397581e-02, -7.399728186570664e-02, -7.359873667293183e-02, -6.624879100129011e-02, -6.578241037084433e-02, -7.038228350664583e-02, -6.985485868949769e-02, -7.465560315732750e-02, -7.443488855579235e-02, -7.242927159593232e-02, -7.220713007645685e-02, -7.242927159593232e-02, -7.220713007645685e-02, -8.499095688603495e-02, -8.478435930785425e-02, -2.834614583013722e-02, -2.809118026284032e-02, -4.134692115898438e-02, -4.035230109404006e-02, -6.259054025407555e-02, -6.221616203811484e-02, -5.246583650185396e-02, -5.216867868796647e-02, -5.246583650185396e-02, -5.216867868796647e-02, -6.736324659039765e-02, -6.655503072901359e-02, -4.806073425802062e-05, -4.653136190991705e-05, -1.926308657585993e-04, -1.571448605141807e-04, -6.497769815448257e-02, -6.373976920934880e-02, -2.153353628380101e-03, -1.397486187055274e-03, -2.153353628380114e-03, -1.397486187055289e-03, -1.914151861040460e-07, -9.688546325311991e-08, -2.496590111970521e-11, -2.452161375362301e-11, -1.003445884441843e-09, 1.296710780865510e-10, -1.371747966251331e-03, -1.395416304718704e-03, -4.492949749588399e-09, -3.435297472401544e-09, -4.492949749821289e-09, -3.435297473559898e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_tpss_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [2.396714961905710e-10, 4.394449201574557e-10, 2.396705353402613e-10, 2.396764064938908e-10, 4.394653995121968e-10, 2.396772896707853e-10, 2.397001190046549e-10, 4.395297892571282e-10, 2.396932706507541e-10, 2.396035935739272e-10, 4.392266903376305e-10, 2.396176088600217e-10, 2.396338706630178e-10, 4.393892545918013e-10, 2.396792428663666e-10, 2.396338706630178e-10, 4.393892545918013e-10, 2.396792428663666e-10, 1.084029644895915e-06, 1.904619658089490e-06, 1.083545853941487e-06, 1.084249291813365e-06, 1.905074395664440e-06, 1.083734354474920e-06, 1.088869320935033e-06, 1.915054397461407e-06, 1.088401078041752e-06, 1.080281901516299e-06, 1.892142402799617e-06, 1.079748464540102e-06, 1.084613395795900e-06, 1.903120108237034e-06, 1.083607150096543e-06, 1.084613395795900e-06, 1.903120108237034e-06, 1.083607150096543e-06, 1.905762857744812e-03, 3.018867992961956e-03, 1.880901212602067e-03, 1.898461764849417e-03, 2.984327249393496e-03, 1.867918359497649e-03, 1.618295715894278e-03, 2.105148723593510e-03, 1.662386433714552e-03, 1.629927002454132e-03, 1.979352644664631e-03, 1.614205866535756e-03, 1.383087307811230e-03, 2.238087083874927e-03, 1.817034314629730e-03, 1.383087307811230e-03, 2.238087083874927e-03, 1.817034314629730e-03, 6.413487898919135e-01, -6.415207785254832e-01, 5.232322515882196e-01, 6.428191278995110e-01, -6.040511118797578e-01, 5.113183031260311e-01, 9.875612164871326e-04, 1.865246751370776e-03, 9.723171255202509e-04, 5.798659767277603e-01, -6.974433132065594e-01, 5.417250081719399e-01, 1.918328124872021e-01, -1.423819006607673e+00, 5.673587098015037e+00, 1.918328124872037e-01, -1.423819006607687e+00, 5.673587098015089e+00, 1.125749774240146e+01, -1.874860949538604e+01, 7.820368833283334e+00, 1.241853394531384e+01, -2.018468822838668e+01, 8.218260406348531e+00, 2.296008665557257e+00, -3.803107799137335e+00, 1.661085222303534e+00, 1.536905200607562e+00, -3.226612919880917e+00, 1.699831747781391e+00, 2.015949104288551e-03, 5.874420380354707e-03, 1.375251500896206e-03, 2.015949103575054e-03, 5.874420380452601e-03, 1.375251509590062e-03, 4.286028790170441e-07, 9.321668284317074e-07, 4.285511889836831e-07, 4.328635913178934e-07, 9.443708370631332e-07, 4.328938061221871e-07, 4.288401922832687e-07, 9.328447603292538e-07, 4.288398678142007e-07, 4.326593222705436e-07, 9.436114556331501e-07, 4.326090953569118e-07, 4.307030324605505e-07, 9.382674283301596e-07, 4.307246192930086e-07, 4.307030324605505e-07, 9.382674283301596e-07, 4.307246192930086e-07, 1.017485136162007e-05, -2.734597867844546e-07, 1.017650584461775e-05, 1.015792147412782e-05, -3.421345661895148e-07, 1.016851669848145e-05, 1.020785334201263e-05, -1.212639581130356e-06, 1.003341043276062e-05, 1.021185367891321e-05, -1.297852450261965e-06, 1.003392871699570e-05, 9.993370632114381e-06, 1.668335981186782e-07, 1.040017686906082e-05, 9.993370632114381e-06, 1.668335981186782e-07, 1.040017686906082e-05, 6.317043546392627e-03, 1.003232890031837e-02, 6.299896957690471e-03, 8.386732503728993e-03, 1.808414587574407e-02, 8.363922928461900e-03, 8.093974171485507e-03, 1.280620106678248e-02, 7.811263341061491e-03, 1.161450504928353e-02, 2.408832162304946e-02, 1.173975007822271e-02, 6.296223571679667e-03, 1.072187880298743e-02, 6.280830043675462e-03, 6.296223571679675e-03, 1.072187880298743e-02, 6.280830043675467e-03, 7.301408481104313e-01, -1.176115143787986e+00, 6.918129598233438e-01, 2.949220883780210e-01, -3.787496333543526e-01, 2.873855255928571e-01, 9.321518983168032e-01, -1.358309670814186e+00, 6.946761886928721e-01, 6.072089045749552e-05, 1.256785353731731e-04, 6.070996661687631e-05, 9.884978644846715e-01, -1.215704734043846e+00, 7.110116657190997e-01, 9.884978644846719e-01, -1.215704734043846e+00, 7.110116657191000e-01, 1.852620917161531e-03, 2.237745870428778e-03, 1.780356310878711e-03, 3.259492826279187e-03, 9.851213846703260e-04, 3.155714485818729e-03, 2.662099028809249e+00, -4.412603220231251e+00, 1.890552316571134e+00, 1.485432065527577e+00, -2.672442035352083e+00, 1.434547322057070e+00, 7.136984559414748e-03, 1.626347130396611e-02, 6.213686398101635e-03, 7.136984563938228e-03, 1.626347130207101e-02, 6.213686398291596e-03, 4.826844650541268e-02, 1.075514919111817e-01, 4.831868322092051e-02, 2.734429121999617e-02, 6.501608791877946e-02, 2.735998470943000e-02, 3.315830812039648e-02, 7.807837546302397e-02, 3.318239505098478e-02, 3.943069574013040e-02, 9.120106574955932e-02, 3.948423911698584e-02, 3.611199952097897e-02, 8.438213607884848e-02, 3.615180712886983e-02, 3.611199952097898e-02, 8.438213607884849e-02, 3.615180712886984e-02, 2.906165549742891e-02, 6.083009969451252e-02, 2.908139629861157e-02, 1.225299898460732e-02, 2.372703097050888e-03, 1.201614325675174e-02, 1.233464118581627e-02, 1.189825584555071e-02, 1.211274936317938e-02, 1.494907533384558e-02, 2.873910954439146e-02, 1.492371745726218e-02, 1.301147353681696e-02, 1.892564696533183e-02, 1.295287611225903e-02, 1.301147353681695e-02, 1.892564696533184e-02, 1.295287611225902e-02, 6.348046930813557e-03, 1.347495825312329e-02, 6.328571973180475e-03, 1.709831613572924e-01, -1.931805408231373e-01, 1.659003604620082e-01, 1.084231559990581e-01, -8.417998082489594e-02, 1.027553272271549e-01, 4.610402497612488e-02, 2.497936447433212e-02, 4.541631420216634e-02, 7.409802892651388e-02, -2.419322472926652e-02, 7.379347729605182e-02, 7.409802892651392e-02, -2.419322472926650e-02, 7.379347729605179e-02, 1.554082322952522e-02, 7.089687724116801e-03, 1.509316223307658e-02, 2.074246693709508e+00, -3.981250078710808e+00, 1.991714966114059e+00, 1.526628419300642e+00, -2.642269801908009e+00, 1.257228295819095e+00, 6.577056191469793e-02, 6.174851546454860e-02, 6.336908715490094e-02, 1.575350455861807e+00, -2.265702164090969e+00, 1.152566985744070e+00, 1.575350455861764e+00, -2.265702164090888e+00, 1.152566985744038e+00, 1.189872982094568e+00, -2.118355357636387e+00, 9.617889734273490e-01, 1.991188869988678e-03, 4.127744526362455e-03, 1.891830047997719e-03, 8.313303283094585e-01, -1.372459674731491e+00, 5.748421142050262e-01, 1.880381356877705e+00, -3.198930981304023e+00, 1.713763214397097e+00, 6.571821942374471e-03, 2.082691001140744e-02, 8.311706027616012e-03, 6.571821969112771e-03, 2.082691003043525e-02, 8.311706033311392e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_tpss_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_tpss_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.476990237069536e-05, -1.476990237069535e-05, -1.477107547035031e-05, -1.477107547035032e-05, -1.477704856244175e-05, -1.477704856244175e-05, -1.475973689341257e-05, -1.475973689341257e-05, -1.476869545738698e-05, -1.476869545738698e-05, -1.476869545738698e-05, -1.476869545738698e-05, 4.901056231738061e-06, 4.901056231738048e-06, 4.895182110763149e-06, 4.895182110763126e-06, 4.753132261854626e-06, 4.753132261854629e-06, 4.960544242473292e-06, 4.960544242473308e-06, 4.875899734743251e-06, 4.875899734743251e-06, 4.875899734743251e-06, 4.875899734743251e-06, 1.076289068522903e-04, 1.076289068522905e-04, 1.093794987973407e-04, 1.093794987973407e-04, 1.523480402933731e-04, 1.523480402933730e-04, 1.760122258593134e-04, 1.760122258593134e-04, 7.928632696902529e-05, 7.928632696902529e-05, 7.928632696902529e-05, 7.928632696902529e-05, 3.835717459658635e-03, 3.835717459658636e-03, 4.031824874596271e-03, 4.031824874596274e-03, 1.387009261412700e-05, 1.387009261412700e-05, 7.912933999076669e-04, 7.912933999076674e-04, 1.645633859427361e-03, 1.645633859427360e-03, 1.645633859427380e-03, 1.645633859427380e-03, 3.899770526790604e-09, 3.899770526790607e-09, 5.611574065005880e-09, 5.611574065005882e-09, 4.320329759765519e-06, 4.320329759765519e-06, -3.597753993372713e-11, -3.597753993372713e-11, -9.053716829288433e-10, -9.053716829288441e-10, -9.053716829543338e-10, -9.053716829543343e-10, -6.642163419519001e-04, -6.642163419519000e-04, -6.749744780941595e-04, -6.749744780941596e-04, -6.650348582777571e-04, -6.650348582777571e-04, -6.745196957418411e-04, -6.745196957418415e-04, -6.694763439662313e-04, -6.694763439662311e-04, -6.694763439662313e-04, -6.694763439662311e-04, 9.586176459024850e-05, 9.586176459024856e-05, 9.441460992009342e-05, 9.441460992009336e-05, 9.902793656558923e-05, 9.902793656558923e-05, 9.833475462032186e-05, 9.833475462032183e-05, 9.315785684778235e-05, 9.315785684778235e-05, 9.315785684778235e-05, 9.315785684778235e-05, -1.447241588779383e-03, -1.447241588779383e-03, -2.395801953875748e-03, -2.395801953875751e-03, -2.373390367375072e-04, -2.373390367375079e-04, -5.835795519707481e-04, -5.835795519707484e-04, -1.998486355215246e-03, -1.998486355215246e-03, -1.998486355215246e-03, -1.998486355215246e-03, 1.672059349171247e-04, 1.672059349171248e-04, 1.434199733592365e-03, 1.434199733592365e-03, 1.310316146931056e-04, 1.310316146931057e-04, -5.281759678568649e-05, -5.281759678568649e-05, 5.099131148648038e-04, 5.099131148648034e-04, 5.099131148648041e-04, 5.099131148648039e-04, -2.055073167772264e-11, -2.055073167772264e-11, -8.727961384466842e-11, -8.727961384466844e-11, -5.038911970644858e-10, -5.038911970644857e-10, 3.827307380785026e-05, 3.827307380785026e-05, -4.487495244536722e-10, -4.487495244536719e-10, -4.487495244537899e-10, -4.487495244537899e-10, -7.734199080544416e-02, -7.734199080544418e-02, -6.145974145874568e-02, -6.145974145874568e-02, -7.119054844668941e-02, -7.119054844668948e-02, -7.812742828048687e-02, -7.812742828048690e-02, -7.494726529107837e-02, -7.494726529107835e-02, -7.494726529107837e-02, -7.494726529107833e-02, -1.095972941645676e-02, -1.095972941645677e-02, -9.618505467294832e-04, -9.618505467294800e-04, -5.839221925825147e-03, -5.839221925825146e-03, -1.697242368207842e-02, -1.697242368207843e-02, -1.002732395441908e-02, -1.002732395441908e-02, -1.002732395441907e-02, -1.002732395441908e-02, -1.318368424088515e-03, -1.318368424088516e-03, 2.226267859718553e-03, 2.226267859718552e-03, 2.690322513767475e-03, 2.690322513767475e-03, 1.272798543846123e-03, 1.272798543846124e-03, 2.629254362709976e-03, 2.629254362709975e-03, 2.629254362709975e-03, 2.629254362709972e-03, 5.290660293393416e-04, 5.290660293393424e-04, 3.666040663588881e-06, 3.666040663588882e-06, 1.102612179957427e-05, 1.102612179957427e-05, -1.836739378974696e-05, -1.836739378974696e-05, 1.282654235128211e-04, 1.282654235128211e-04, 1.282654235128187e-04, 1.282654235128187e-04, 1.113483984875821e-10, 1.113483984875823e-10, -2.681519988826610e-13, -2.681519988826610e-13, -3.645047090109075e-11, -3.645047090109073e-11, 1.377979638531733e-04, 1.377979638531732e-04, -4.629999802187851e-10, -4.629999802187851e-10, -4.629999834666610e-10, -4.629999834666612e-10]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
