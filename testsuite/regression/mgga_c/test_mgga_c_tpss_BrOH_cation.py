
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_tpss_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.645995504590432e-01, -1.645996352769430e-01, -1.646000385289871e-01, -8.676631716844557e-02, -6.098319854568340e-02, -4.541425072589202e-02, -3.461962356494230e-02, -2.469671353709068e-02, -2.483021683824645e-02, -2.477621817585016e-02, -2.478181445430840e-02, -3.483389203441266e-02, -6.701332647008379e-02, -3.248571276282772e-02, -1.032070373207112e-02, -1.762323364740292e-02, -6.628241523783371e-02, -1.093794028684064e-02, -1.090953243829601e-02, -1.954309258227037e-02, -1.126997571337256e-02, -1.735184516542844e-03, -1.983456416208838e-04, -1.269935941855323e-04, -2.057839515719856e-08, -1.553774389594541e-08, -1.602811917749433e-05, -1.212819792108890e-09, -5.029752860646902e-11, -5.029752859580573e-11, -7.432591990448291e-02, -5.029891996258923e-02, -5.019491281332483e-02, -5.029225998560333e-02, -8.985657076276041e-02, -6.924889260308685e-02, -3.218659756966507e-02, -3.313629959845969e-02, -2.028098506497616e-02, -2.095773838655733e-02, -4.832452607598576e-02, -3.308110256886272e-02, -3.929668048608211e-02, -3.775194396601490e-02, -2.558658424618293e-02, -3.069894122162424e-02, -3.898522677061170e-02, -3.199924346400130e-02, -3.736344279761229e-04, -6.594871130705730e-03, -7.322242771619448e-04, -3.648586804629089e-02, -2.526942603033010e-03, -2.526942603033017e-03, -1.618766453260747e-10, -2.033784466193104e-10, -2.183744306702606e-09, -1.808367469453689e-04, -1.495095922767478e-09, -1.495095920680388e-09, -4.277463486926901e-02, -4.159703622576243e-02, -6.383563580100113e-02, -5.598386093301065e-02, -6.385539257642651e-02, -5.563222523852437e-02, -5.663490029076726e-02, -4.595248126244694e-02, -4.122370369160803e-02, -3.673576600283082e-02, -3.438897021223076e-02, -4.413469614900125e-02, -5.613629849061463e-02, -1.166009302035898e-02, -1.547378100005482e-02, -2.536340427668510e-02, -2.237058567710461e-02, -2.081543604025489e-02, -2.386211483020504e-02, -1.432337785401933e-02, -3.045751308152351e-05, -3.109963901904542e-02, -2.712784732053179e-04, -2.712784732053286e-04, -5.037446550363285e-03, -6.692986483525674e-13, -1.374982125405463e-03, -2.268013163367492e-02, -2.344765153458952e-10, -1.181056748333036e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_tpss_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.747369753468127e-01, -1.747373592471604e-01, -1.747369289286905e-01, -1.747375762850791e-01, -1.747380160558852e-01, -1.747373003530871e-01, -1.656795746399728e-01, -1.702499511196759e-01, -1.359678113314028e-01, -1.483988855458863e-01, -9.206000931619271e-02, -9.205629171380136e-02, -1.075089701692039e-01, -9.336849260615804e-02, -7.411286699248032e-02, -7.413267805001075e-02, -7.437306476450679e-02, -7.431243992764375e-02, -7.625806369118875e-02, -7.625831962775795e-02, -7.454768494978435e-02, -7.397954587789426e-02, -9.373832451996689e-02, -1.077269577702031e-01, -7.534022876475922e-02, -7.481054072999213e-02, -8.442387343325658e-02, -8.651976183586629e-02, -4.314053125621896e-02, -4.382187916131407e-02, -6.966267390921946e-02, -5.590717561159295e-02, -7.037457509512338e-02, -7.906556863981584e-02, -4.059057130531036e-02, -5.057269953934410e-02, -3.040743279946706e-02, -4.675661384604451e-02, -5.414578999108739e-02, -5.311810244191216e-02, -5.366403299903850e-02, -4.308117064905514e-02, -9.843201637611950e-03, -7.552813265521332e-03, -4.169809605986406e-04, -8.075257564337635e-03, 1.283152172943210e-05, -6.260123207477471e-03, -1.377274689779596e-07, -1.321353081880827e-07, -1.083727799240271e-07, -1.078435072269077e-07, -1.078712721170250e-04, -1.070808679332902e-04, -7.932647629603111e-09, -8.019226648220490e-09, -3.031186779185078e-10, -4.668257140633692e-10, -3.031186756548998e-10, -4.668257122170641e-10, -1.409954281906529e-01, -1.410247928437527e-01, -8.723861841503566e-02, -8.724049259334157e-02, -8.724918699743162e-02, -8.724933513374308e-02, -8.724242973806126e-02, -8.723791536191261e-02, -1.475051650301013e-01, -1.496557293609900e-01, -1.513749454705731e-01, -1.434435591780483e-01, -9.446340279605342e-02, -9.443755637778642e-02, -9.585342872364280e-02, -9.585457536739644e-02, -6.536455760967282e-02, -6.463387373431143e-02, -6.662681626784665e-02, -6.587579325150943e-02, -1.152316832553536e-01, -1.121396467417668e-01, -9.550908801175217e-02, -9.603713667442866e-02, -9.168767944773640e-02, -8.343418719710838e-02, -7.595056322310451e-02, -7.499149670851077e-02, -6.920232092577190e-02, -6.095452217262859e-02, -6.723112509173079e-02, -6.213242064558046e-02, -8.909604118919970e-02, -8.452100178911895e-02, -6.263697522954809e-02, -6.724830748443827e-02, -2.226933367734814e-03, -2.221271983720188e-03, -2.330215277619663e-02, -3.473222333701723e-02, -4.307243947927097e-03, -4.111197642729566e-03, -8.008094570956695e-02, -8.003172245605547e-02, -1.334521387999778e-02, -1.260350540536520e-02, -1.334521387999779e-02, -1.260350540536520e-02, -1.118192322854871e-09, -1.133123603375300e-09, -1.335235901220054e-09, -1.334666706312312e-09, -1.468223144099158e-08, -1.413810120339438e-08, -1.634626086328665e-03, -6.640720175673375e-04, -1.157596066964624e-08, -9.250064115005479e-09, -1.157596066563960e-08, -9.250064112173992e-09, -8.216542482122946e-02, -8.207424885641541e-02, -7.870384190040153e-02, -7.853851681662027e-02, -7.198832468635549e-02, -7.148872356177727e-02, -7.971325309164823e-02, -7.835343325704403e-02, -7.200798844943504e-02, -7.151058106231506e-02, -7.993358702527412e-02, -7.861821802229330e-02, -7.668173260340494e-02, -7.635125805274842e-02, -8.099845962818641e-02, -7.883031116025518e-02, -8.628074179778594e-02, -7.994871412203511e-02, -5.771621844361643e-02, -5.754099838477379e-02, -6.017212575782865e-02, -5.987091409897595e-02, -8.485238353861142e-02, -8.035730386324677e-02, -8.638541852022151e-02, -8.510086947325214e-02, -4.356128247856971e-02, -4.329884676410683e-02, -4.535721803727193e-02, -5.838902415306561e-02, -6.688055308126270e-02, -7.935697372830873e-02, -6.305385982636186e-02, -6.304436012146669e-02, -6.681396062590218e-02, -5.479476377783431e-02, -6.230938470180779e-02, -6.035739725609587e-02, -1.773472996354030e-02, -1.753120798266077e-02, -2.203459177734689e-04, -1.202057378151345e-04, -7.107884920558392e-02, -6.874406415090570e-02, -2.249276957690032e-03, -1.037406110380518e-03, -2.249276957690019e-03, -1.037406110380503e-03, -6.593851617928384e-03, -6.257235187311728e-03, -1.229638367774830e-10, 1.047925203863042e-10, -1.869567052566781e-03, -1.724808884064574e-03, -2.767194528635373e-02, -2.688551334493897e-02, -2.372921351658757e-09, -1.188644512009849e-09, -8.760525810997215e-08, -7.398467511371335e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_tpss_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [8.161498703694582e-09, 1.632299740738916e-08, 8.161498703694582e-09, 8.161407659079791e-09, 1.632281531815958e-08, 8.161407659079791e-09, 8.160974813433972e-09, 1.632194962686794e-08, 8.160974813433972e-09, -5.602989742987855e-10, 1.681128096525148e-09, 8.415917839434526e-10, 5.722617102850527e-10, 1.040077494933590e-09, 5.163021677973607e-10, 1.255850508040997e-10, 1.901913855295419e-10, 1.255647746706055e-10, 1.196688579850384e-06, 1.992835391539789e-06, 1.281471005639458e-06, 6.922486155382484e-07, -8.684204420653223e-08, 6.924896149253620e-07, 6.966056109722072e-07, -8.099898526860927e-08, 6.959201361732418e-07, 7.321495283998966e-07, -7.810231836052006e-09, 7.321220848017557e-07, 6.983160022286821e-07, -8.309824999442562e-08, 6.915229824079391e-07, 1.292018851457001e-06, 2.014333244399318e-06, 1.205958606383192e-06, 8.392759910612361e-03, 1.678551982122472e-02, 8.392759910612361e-03, 1.561293511436587e-03, 5.423561443435744e-03, 2.739806648288103e-03, 1.264936304480991e-03, -9.425843689836636e-04, 1.309802944953613e-03, 1.544570647015303e-03, 1.963974858059240e-03, 1.599280643666126e-03, 9.137046179770458e-03, 1.827409235954092e-02, 9.137046179770458e-03, 1.130197941558117e-03, -9.792494789804494e-04, 1.617968973643196e-03, 7.223245735542350e-01, 2.702442215881226e-01, 6.291018261418266e-01, 5.703172024127648e-01, 1.717454016048493e+00, 8.668140717232332e-01, 3.345104296047541e-04, 4.541487251158564e-04, 3.293880469496947e-04, 5.690997073407773e-01, -8.500938301556973e-01, 5.197301536445199e-01, -1.600145837415263e-02, 6.270267360397608e-02, -9.919320674473115e-03, -1.565598129511128e-02, 4.940317242462440e-02, 2.170452903518144e-02, 3.221005985336744e-02, 6.503625725762166e-02, 3.217926827755684e-02, 2.159998592793259e-02, 4.319997251161638e-02, 2.103153300698073e-02, 9.208315694578456e-02, 1.898945288236659e-01, 9.087945115012877e-02, 8.503227431781760e-03, 1.718201979602087e-02, 8.504181291278513e-03, 7.967245098247790e-05, 1.593449015833041e-04, -8.105265731961608e-04, 7.967245124296153e-05, 1.593449030231248e-04, -8.105265698697126e-04, 5.946393080696558e-07, 1.212049563996485e-06, 5.945850148049622e-07, 1.279753791687982e-07, 3.317575724213617e-07, 1.278852104273922e-07, 1.283257299984642e-07, 3.290463534225210e-07, 1.282195951006324e-07, 1.280316844158289e-07, 3.315853905045581e-07, 1.278744092921493e-07, 5.994153398337837e-07, 1.973178058786088e-06, 9.852441229180163e-07, 8.126135989609093e-07, 1.664934574120892e-06, -7.708156162695193e-07, 1.305009324751930e-05, 2.547677291037734e-05, 1.304371448291019e-05, 1.322153091958951e-05, 2.577346472285374e-05, 1.321678974311386e-05, 1.014637865497134e-05, -4.352545833079520e-06, 9.986009892031442e-06, 1.016858249301488e-05, -3.965184424609691e-06, 1.000169748276681e-05, 2.792612142735897e-05, 5.510525269401742e-05, 1.075488638172801e-05, 1.321086804112806e-05, 2.579056401763329e-05, 1.324285811621518e-05, 9.932609365577895e-03, 1.685055866171986e-02, 1.624434736442338e-04, 6.995049554822654e-03, 1.145928147382431e-02, 6.757930686010688e-03, 8.087524933724055e-03, -8.764503809949128e-04, 6.256646255045183e-03, 6.889793515388799e-03, 1.111105451551602e-03, 5.570024049049755e-03, 9.425041166013734e-03, 1.576162979394650e-02, -2.769317710249618e-03, 4.269299262099467e-03, 1.267222258928703e-03, 5.389403124046913e-03, 7.543035649192793e-01, -1.260315385138884e+00, 7.149691654856186e-01, 3.097647729270784e-01, 1.884094133827209e-01, 3.004980627904469e-01, 2.501937998468848e-01, 5.047916744735522e-01, 2.498467817956258e-01, 1.745737916548680e-05, 1.103061888243071e-05, 1.744081043023031e-05, 4.795093410055059e-01, 9.671707164700396e-01, 4.760286807941836e-01, 4.795093410055061e-01, 9.671707164700399e-01, 4.760286807941835e-01, 2.154476100740286e-03, 4.308952200999792e-03, 2.112327757867992e-03, 5.074827428978724e-04, 1.771227854522087e-03, 5.573096315425679e-04, 9.775898765881463e-02, 1.973973873299123e-01, 9.751356759647821e-02, 5.864900336689820e-01, -9.513861207885603e-02, 5.776106786664773e-01, 2.307436092005600e-02, 4.633268670546061e-02, 2.230569604247380e-02, 2.307436092060927e-02, 4.633268670866467e-02, 2.230569604268491e-02, 6.780710811482302e-02, 1.556876667372448e-01, 6.783401455130496e-02, 2.988139993461683e-02, 7.013033178729969e-02, 2.985074241007698e-02, 1.427086981357564e-02, 2.854173962715128e-02, 1.427086981357564e-02, 3.214339582336510e-02, 7.755056509029465e-02, 3.611817699183022e-02, 1.422339161095589e-02, 2.844678322191177e-02, 1.422339161095589e-02, 2.898701747542631e-02, 7.130485331465936e-02, 3.323882366288285e-02, 4.230442402858381e-02, 9.127838166432575e-02, 4.229464036789084e-02, 2.137697581487160e-02, 4.171675587447692e-02, 1.735100904639201e-02, 1.956791845725191e-02, 3.418768088501185e-02, 5.188981979798946e-03, 5.923924666096559e-03, 6.876888714820187e-03, 5.869450007395871e-03, 7.804325275249502e-03, 4.745690375226313e-03, 7.668664812510263e-03, 2.001121297902480e-02, 3.649168550993880e-02, 7.630816499350187e-03, 7.332223484931743e-03, 1.446102646156605e-02, 6.092297048285383e-03, 1.284256734666562e-01, 2.603020768769133e-01, 1.283887733925294e-01, 1.265581205867873e-01, 1.293366217986240e-01, 1.189558464370450e-01, -1.818967895349925e-02, 1.002619245721037e-01, 6.841719945618696e-02, 6.999366018210082e-02, 1.392636194347903e-01, 6.992993922138108e-02, 9.146369009951109e-02, 1.241536581940427e-01, 9.755326735120348e-02, 1.648323539816761e-02, -4.493408503460366e-03, 1.557651788422864e-02, 1.347260653707346e+03, 2.694521307414693e+03, 1.347260653707346e+03, 3.185583088206068e+00, -5.631342258151522e+00, 2.619235540877155e+00, 7.319954904763439e-02, 1.405419403036321e-01, 7.095826233730500e-02, 2.251146818821469e+00, -3.430957102165723e+00, 1.638762455704946e+00, 2.251146818821463e+00, -3.430957102165708e+00, 1.638762455704942e+00, 3.239757630393143e+05, 6.479515260786286e+05, 3.239757630393143e+05, -1.053639816074056e+01, 2.092950480531392e+01, -1.039305545578032e+01, 1.275483186190791e+08, 2.550966372381582e+08, 1.275483186190791e+08, 7.983167480935052e+01, 1.596633496187010e+02, 7.983167480935052e+01, 2.470155802626645e-03, 7.330441306099990e-03, 9.556197905700328e-04, 7.406425968409264e-01, 1.481375340897815e+00, 7.406876704488704e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_tpss_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-3.066687518058854e-29, -3.066687518058853e-29, -3.066820413056937e-109, -3.066820413056938e-109, -3.067249550810008e-109, -3.067249550810007e-109, -4.740755018954579e-06, -4.740755018954578e-06, -1.663984244991109e-05, -1.663984244991109e-05, 0.000000000000000e+00, 0.000000000000000e+00, -9.211754937729463e-05, -9.211754937729456e-05, 2.554796394065453e-05, 2.554796394065454e-05, 2.499242960030308e-05, 2.499242960030307e-05, 0.000000000000000e+00, 0.000000000000000e+00, 2.519212395836732e-05, 2.519212395836731e-05, -9.245145187494726e-05, -9.245145187494729e-05, -8.445776671304709e-30, -8.445776671304709e-30, -3.208136358593784e-04, -3.208136358593783e-04, 0.000000000000000e+00, 0.000000000000000e+00, -4.799617885876601e-04, -4.799617885876601e-04, -2.363476199609535e-84, -2.363476199609535e-84, 0.000000000000000e+00, 0.000000000000000e+00, -1.746525664809894e-03, -1.746525664809896e-03, -1.984847043251563e-03, -1.984847043251564e-03, -1.514604466713724e-04, -1.514604466713724e-04, 8.464263039607353e-04, 8.464263039607359e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -5.721748354232741e-10, -5.721748354232747e-10, -9.354359882029651e-09, -9.354359882029655e-09, -6.018998283144429e-06, -6.018998283144428e-06, -2.928062823171183e-11, -2.928062823171183e-11, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.297508873035350e-04, -1.297508873035350e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -7.643667739525607e-05, -7.643667739525608e-05, -3.589549421279097e-04, -3.589549421279095e-04, -4.724525671862319e-05, -4.724525671862319e-05, -5.025605824880414e-05, -5.025605824880412e-05, 1.052844506730998e-04, 1.052844506730998e-04, 1.024533789431363e-04, 1.024533789431364e-04, -9.182219877678331e-05, -9.182219877678331e-05, -5.011462405737659e-05, -5.011462405737659e-05, -4.074115019101816e-03, -4.074115019101814e-03, -1.668107844239713e-02, -1.668107844239716e-02, 1.293969088099995e-05, 1.293969088100148e-05, 0.000000000000000e+00, 0.000000000000000e+00, -5.028942552322838e-03, -5.028942552322838e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -8.967990268851891e-04, -8.967990268851895e-04, -1.242857924888434e-05, -1.242857924888435e-05, 0.000000000000000e+00, 0.000000000000000e+00, -7.134469986598016e-05, -7.134469986598015e-05, -7.134469986597966e-05, -7.134469986597966e-05, -6.107541108974237e-11, -6.107541108974235e-11, 0.000000000000000e+00, 0.000000000000000e+00, -1.520382233400744e-10, -1.520382233400743e-10, -4.178092398953236e-05, -4.178092398953238e-05, -1.850888127138591e-10, -1.850888127138590e-10, -1.850888127138592e-10, -1.850888127138592e-10, -2.304520524090866e-01, -2.304520524090867e-01, -9.485524508651723e-02, -9.485524508651723e-02, -2.059998262665980e-79, -2.059998262665982e-79, -4.420625762238437e-02, -4.420625762238441e-02, -2.678692314354500e-79, -2.678692314354499e-79, -3.924340675112298e-02, -3.924340675112295e-02, -4.886782166188527e-02, -4.886782166188528e-02, -1.190624430495335e-03, -1.190624430495336e-03, -5.697065651744146e-03, -5.697065651744145e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -7.209847860835271e-03, -7.209847860835274e-03, -1.435880448514510e-03, -1.435880448514511e-03, -4.125918568110255e-04, -4.125918568110255e-04, -2.397830578419070e-03, -2.397830578419070e-03, -4.376199250526817e-03, -4.376199250526820e-03, -1.159265665303836e-03, -1.159265665303835e-03, -4.027643048940748e-03, -4.027643048940744e-03, 6.471534238439981e-04, 6.471534238439971e-04, -4.991922479325582e-67, -4.991922479325586e-67, 0.000000000000000e+00, 0.000000000000000e+00, -2.736789615258571e-03, -2.736789615258571e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.581452293840021e-60, -2.581452293840022e-60, 0.000000000000000e+00, 0.000000000000000e+00, -5.242833262952976e-52, -5.242833262952974e-52, -3.266504737891419e-70, -3.266504737891420e-70, 0.000000000000000e+00, 0.000000000000000e+00, -1.478248004792391e-09, -1.478248004792391e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
