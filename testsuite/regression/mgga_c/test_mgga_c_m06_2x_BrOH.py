
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m06_2x_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.081616404913956e-01, -1.081630544964502e-01, -1.081683444477392e-01, -1.081452802926917e-01, -1.081623938019974e-01, -1.081623938019974e-01, -6.965037344774344e-02, -6.964932165660126e-02, -6.960940716407915e-02, -6.949099311541149e-02, -6.965103713066981e-02, -6.965103713066981e-02, -4.648791341796310e-02, -4.632013507307695e-02, -4.009397320714098e-02, -3.922703007198927e-02, -4.642591010226105e-02, -4.642591010226105e-02, -9.101184395186118e-03, -9.761907903415371e-03, -7.173204495928071e-02, 1.363208019916177e-02, -9.297640216792136e-03, -9.297640216792136e-03, 1.260612091006080e-02, 1.301738798527330e-02, 2.875304157441417e-02, 4.478995574764015e-03, 1.294714804376111e-02, 1.294714804376110e-02, -9.485627453919124e-02, -9.516042502490139e-02, -9.488977990901179e-02, -9.512612689792510e-02, -9.500887407522300e-02, -9.500887407522300e-02, -3.440925523607052e-02, -3.420153163199818e-02, -3.341102254166742e-02, -3.321548201304367e-02, -3.560323760195744e-02, -3.560323760195744e-02, -3.878999990987805e-02, -4.679776634075831e-02, -3.869947145713638e-02, -4.517388651178419e-02, -4.055317222755719e-02, -4.055317222755719e-02, 2.407094375392102e-02, -2.138808198531503e-03, 2.281794615458402e-02, -6.901281261860026e-02, 1.475006464926364e-02, 1.475006464926364e-02, 5.368245312426830e-03, 5.432224895284627e-03, 5.000801242311614e-03, 2.738928184901962e-02, 4.469681115793470e-03, 4.469681115793460e-03, -5.514548286528935e-02, -5.791382674517020e-02, -5.814910618810586e-02, -5.761787416941999e-02, -5.798159271208151e-02, -5.798159271208152e-02, -4.737663611398638e-02, -2.706930549861097e-02, -3.522399300596950e-02, -4.460297439991129e-02, -3.974558934952793e-02, -3.974558934952795e-02, -4.774573190488242e-02, -8.908783058721795e-03, -1.359655001817725e-02, -2.674463041968300e-02, -1.918740984663547e-02, -1.918740984663544e-02, -2.842539802246662e-02, 2.973656114758733e-02, 2.981690327808958e-02, -2.914649322865749e-02, 2.416477802916138e-02, 2.416477802916141e-02, 1.028075737334387e-02, 1.146579506401035e-03, 3.708349118806887e-03, 2.345511752261303e-02, 3.737899013000042e-03, 3.737899013000059e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m06_2x_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.275297491490661e-01, -2.275291927923805e-01, -2.275336294933333e-01, -2.275430461651942e-01, -2.275293921535108e-01, -2.275293921535108e-01, -1.007975112669134e-01, -1.008012204851601e-01, -1.009235372720120e-01, -1.010012753631584e-01, -1.007978771711682e-01, -1.007978771711682e-01, -7.733914482562565e-02, -7.809628494662738e-02, -1.015782696800374e-01, -9.840407481720323e-02, -7.760888379815523e-02, -7.760888379815523e-02, -3.281666576542600e-02, -3.659429594326120e-02, -7.792938312203015e-02, -2.971152698367924e-02, -3.418059563957028e-02, -3.418059563957028e-02, 2.501933764442847e-03, 2.600856315600792e-03, 2.527635562897302e-03, 4.988493249902797e-04, 2.574866549963289e-03, 2.574866549963283e-03, -1.674866431051459e-01, -1.671736893780797e-01, -1.674636687076978e-01, -1.672198599855886e-01, -1.673145784034327e-01, -1.673145784034327e-01, -1.133148462921600e-01, -1.141254336481785e-01, -1.116017058283128e-01, -1.121566647163914e-01, -1.155812294326096e-01, -1.155812294326096e-01, -6.880607501495370e-02, -5.396278024227766e-02, -6.146726016583350e-02, -5.563570783309371e-02, -7.268773973131458e-02, -7.268773973131458e-02, -8.771521128791551e-03, -1.755831808983895e-02, -9.144350105014409e-03, -7.097922615366720e-02, -1.446970003566124e-02, -1.446970003566124e-02, 7.294231554733100e-04, 7.502772108198871e-04, 6.448740059082976e-04, 3.643270645201547e-03, 5.005801483320904e-04, 5.005801483319524e-04, -5.372138335015532e-02, -6.346865010217173e-02, -5.938154514009177e-02, -5.657624386604501e-02, -5.791930773948016e-02, -5.791930773948016e-02, -5.130468470832199e-02, -8.688173689655163e-02, -8.759307895049707e-02, -8.065584767215346e-02, -8.480108749606366e-02, -8.480108749606370e-02, -5.448014102407334e-02, -2.162160154485554e-02, -4.811200573966001e-02, -6.052989705319112e-02, -6.159595068090820e-02, -6.159595068090817e-02, -6.990338790588972e-02, 2.560650689853582e-03, 9.334613239548022e-04, -5.339301496044653e-02, -7.334135749851747e-03, -7.334135749851860e-03, 2.365988993567652e-03, -1.649081954747866e-04, 3.769462508735382e-04, -6.504480435629604e-03, 3.141285947524269e-04, 3.141285947523123e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_2x_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.790889027318896e-10, 1.790778394078887e-10, 1.790430732810875e-10, 1.792241593308442e-10, 1.790829432863296e-10, 1.790829432863296e-10, 9.555715734051042e-07, 9.556049839274174e-07, 9.563503561108292e-07, 9.543658898373407e-07, 9.555683518628469e-07, 9.555683518628469e-07, 2.268315870746918e-03, 2.286297010382758e-03, 2.752030352592461e-03, 2.599610100927228e-03, 2.274766965378618e-03, 2.274766965378618e-03, 1.279337674336125e-01, 1.906118419571200e-01, 1.336595664644994e-03, 2.337582926801635e-01, 1.496484415815413e-01, 1.496484415815413e-01, 1.579615083060750e+03, 1.414510095763767e+03, 2.407371170873801e+01, 4.869478174457765e+03, 1.481068929744523e+03, 1.481068929744522e+03, 1.190492252093696e-08, 7.069320047603181e-09, 1.141144905058805e-08, 7.652395854222401e-09, 9.438563448202212e-09, 9.438563448202212e-09, 1.551683856391945e-05, 1.553327511905891e-05, 1.520629869638483e-05, 1.523631150071892e-05, 1.583046429123705e-05, 1.583046429123705e-05, 4.518041214383575e-03, 4.304996999229151e-04, 5.522097402810061e-03, 5.254359024023244e-03, 3.654427062395144e-03, 3.654427062395144e-03, 3.670166739206846e-01, -1.675755670314699e-01, 2.977644270451065e-01, 2.124745569847747e-05, -4.164231348597648e-01, -4.164231348597648e-01, 6.503718974312273e+03, 4.413283908541975e+03, 1.640114353709911e+04, 6.764278620147319e+00, 6.003447558905222e+03, 6.003447558905332e+03, -6.339988041053389e-02, -2.419673827336779e-02, -3.406935885281686e-02, -4.443394539233785e-02, -3.888718533067228e-02, -3.888718533067228e-02, -3.955341346047829e-02, 1.355781575324049e-02, 1.005552521167615e-02, 2.939010735959904e-03, 7.139534719131921e-03, 7.139534719131939e-03, 1.657816732724381e-03, -2.770357442853183e-02, 5.872336657192676e-02, 4.771173839911130e-02, 7.138146653649342e-02, 7.138146653649345e-02, 1.670174091357863e-02, 3.032850381977681e+01, 1.055751566239201e+01, 5.914565923351227e-02, 1.361015605123967e+00, 1.361015605124035e+00, 6.883814380657135e+02, 7.546770804015886e+04, 2.695524198010414e+04, 1.672843767966302e+00, 1.015049868078533e+04, 1.015049868078508e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_2x_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.466500821928897e-05, 2.466747981251444e-05, 2.467774957926165e-05, 2.463752785002675e-05, 2.466631499465588e-05, 2.466631499465588e-05, -2.595770023206351e-04, -2.595456788729976e-04, -2.585739359051756e-04, -2.589681135051370e-04, -2.595659370662860e-04, -2.595659370662860e-04, -3.867890942827142e-03, -3.855720643660147e-03, -3.398118108604897e-03, -3.480557483394311e-03, -3.863647356779809e-03, -3.863647356779809e-03, 6.130743610328120e-03, 8.247634764733596e-04, -3.102908579996535e-03, 1.794181877404686e-02, 4.425485521390688e-03, 4.425485521390688e-03, -2.543498377902045e-02, -2.598420835323318e-02, -1.968017987678445e-02, -6.246419044447840e-03, -2.645389723484467e-02, -2.645389723484465e-02, 8.972159960735216e-04, 9.121350627330515e-04, 8.988888310149056e-04, 9.104793233820931e-04, 9.046309983907937e-04, 9.046309983907937e-04, -1.127487335193337e-03, -1.172785763100556e-03, -1.118847354960639e-03, -1.158408428163624e-03, -1.160269669745509e-03, -1.160269669745509e-03, -2.420288744568893e-03, 2.932859673294701e-04, -4.814444459187113e-03, -4.365885367480334e-03, 4.159082930500776e-04, 4.159082930500776e-04, 1.550784475306416e-02, 3.335630320331025e-02, 1.816752324637945e-02, -9.271156799129414e-04, 3.618919364978233e-02, 3.618919364978233e-02, -8.970703385776307e-03, -8.256338065047556e-03, -1.512585768003978e-02, -8.575621844031815e-03, -7.765033838272203e-03, -7.765033838272204e-03, 1.326845149626108e-01, 9.382814048800962e-02, 1.109423421358056e-01, 1.242784085154903e-01, 1.177428556628645e-01, 1.177428556628645e-01, 4.063827980697134e-02, -1.167613629300723e-02, 2.903871870103423e-04, 2.107437331494208e-02, 9.119460112644501e-03, 9.119460112644433e-03, -2.471154371661067e-03, 1.482331618417554e-02, -7.518504072412978e-03, -1.558842245835840e-02, -1.800279035384682e-02, -1.800279035384683e-02, -1.155114306867005e-02, -2.241041428584279e-02, -1.289227007032818e-02, -1.423997528264138e-02, 1.424756761766653e-02, 1.424756761766650e-02, -1.295372523461188e-02, -2.330108119453527e-03, -8.608852680357470e-03, 1.480678090653616e-02, -7.910746016513343e-03, -7.910746016513349e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
