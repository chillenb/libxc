
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m06_2x_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.343470814683745e-01, -1.343463150569174e-01, -1.343430161719861e-01, -1.343554794396232e-01, -1.343466773755971e-01, -1.343466773755971e-01, -1.274919263438577e-01, -1.274800198853993e-01, -1.271238698951423e-01, -1.272642404548111e-01, -1.274887787026117e-01, -3.607282255109295e-02, -1.085952645800028e-01, -1.664321637262625e-02, -1.554976605178715e-02, -1.605166662903179e-02, -1.666686088147953e-02, -1.666686088147953e-02, -9.105168182739015e-03, -9.376624725816449e-03, -1.410861962401911e-01, 1.122363141826671e-02, -9.186282858647407e-03, -9.186282858647407e-03, 1.287719098037429e-02, 1.337074717633698e-02, 3.230400847889972e-02, 6.859409083610549e-03, 1.325138931036815e-02, 1.325138931036820e-02, -9.484809904325263e-02, -9.515526179664903e-02, -9.488202619956369e-02, -9.319378926833644e-02, -9.500211364807189e-02, -9.500211364807189e-02, -1.190900990381056e-01, -1.172726185607450e-01, -1.199211321340486e-01, -1.184442436533078e-01, -1.167997097901819e-01, -2.848582012739043e-02, -2.791792439172264e-02, -4.260633582409054e-02, -2.305979217421109e-02, -3.094238895685404e-02, -3.230489695806302e-02, -5.946745316558009e-02, -8.895954114878636e-02, -3.864860974589129e-03, -8.817556709951969e-02, -4.752635905786856e-02, 1.325735011096870e-02, 1.325735011096870e-02, -1.900280731575104e-03, 7.483222074611931e-03, 5.756420903643778e-03, -5.891900134820244e-02, -1.982361715207070e-03, 6.882373089399094e-03, -7.034950338879242e-02, -6.289774102356752e-02, -4.502014742418416e-02, -6.751760318765761e-02, -6.647424299930807e-02, -6.647424299930807e-02, -6.680181521054668e-02, -2.518751931377622e-02, -3.301259737526216e-02, -4.342602943319453e-02, -3.768503728532592e-02, -5.258371774069205e-02, -3.858279747580651e-02, -8.004132321762650e-02, -1.196947674950674e-02, -6.424570101775540e-02, -1.370247684833567e-02, -1.370247684833564e-02, -6.452995759684237e-02, 3.189127091330460e-02, 3.396251230301157e-02, -1.711476437600520e-02, -7.941633219070633e-02, 2.559638004253155e-02, 1.478008927417840e-02, 2.249923309088870e-03, 4.117922139113030e-03, 2.494135006800909e-02, 5.938516320951703e-03, 5.938516320951688e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m06_2x_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-9.147896591728502e-02, -9.147940968483528e-02, -9.148137763482754e-02, -9.147415297550304e-02, -9.147919950363953e-02, -9.147919950363953e-02, -5.197138971072093e-02, -5.197446888055731e-02, -5.206766299570421e-02, -5.203231423341939e-02, -5.197229132071797e-02, -1.376609016670926e-01, -3.468501429007041e-02, -2.765863341556035e-02, -1.885247115310892e-02, -2.244432404944530e-02, -2.790901043790744e-02, -2.790901043790744e-02, -1.155563134436594e-02, -1.307458362861527e-02, -4.526610683861278e-02, -1.781343488251974e-02, -1.197458668764839e-02, -1.197458668764839e-02, 2.545978089116929e-03, 2.654863141868686e-03, -2.871200985784784e-04, 1.114232818875604e-03, 2.621406425863233e-03, 2.621406425862635e-03, -1.684027236370718e-01, -1.680827667619182e-01, -1.683674507272283e-01, -7.460437931156580e-02, -1.682426789410194e-01, -1.682426789410194e-01, -4.416765550743344e-02, -4.458938724549118e-02, -4.399153203213629e-02, -4.431586920218463e-02, -4.469809031697527e-02, -1.038521324611377e-01, -9.661481488314266e-02, -1.003370310261211e-01, -8.763684870631669e-02, -9.841407317126093e-02, -1.004148379246429e-01, -3.900918841937456e-02, -1.009738191779818e-01, -6.597672688583814e-03, -9.671888386022200e-02, -1.448126831045746e-01, -1.799193015069484e-02, -1.799193015069484e-02, -2.687526318116601e-03, 1.265635930358558e-03, 8.380678610579126e-04, -1.027645223350490e-01, -2.821457693603454e-03, 1.115132848204263e-03, -6.266958232232216e-02, -7.503849343051608e-02, -4.517295985009209e-02, -6.746168383446896e-02, -6.921935372217698e-02, -6.921935372217698e-02, -6.671454244365560e-02, -9.018809425007360e-02, -9.593281848887414e-02, -9.347813350749813e-02, -9.580387814761512e-02, -3.932068538519837e-02, -1.038459549270458e-01, -2.841549209700397e-02, -2.332123948688294e-02, -2.862665602184369e-02, -4.204865138767414e-02, -4.204865138767408e-02, -3.231762857334559e-02, 1.272525672603908e-03, -4.473885082571505e-03, -6.624962456793029e-02, -9.904952564057541e-02, -1.677963337181793e-02, 3.128773615271540e-03, 1.598426998491666e-04, 4.903460486428675e-04, -1.619374776141672e-02, 8.877941024018595e-04, 8.877941024016687e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_2x_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.806207714506739e-09, 1.806167724021134e-09, 1.805975528790914e-09, 1.806628716511875e-09, 1.806186765142061e-09, 1.806186765142061e-09, 1.380025711304538e-05, 1.379956869069016e-05, 1.377651353675005e-05, 1.378022792665051e-05, 1.379975511223596e-05, 1.216766446579349e-06, 3.565948143092160e-02, 6.597920072562463e-06, -3.692744097425935e-04, -2.090438908402403e-04, 1.628247084943498e-05, 1.628247084943498e-05, -1.253206938755661e-01, -8.476998333762177e-02, 1.613321417650999e-02, -4.163446066229208e-01, -1.135732995461866e-01, -1.135732995461866e-01, 1.580857219622212e+03, 1.416040237425367e+03, 2.528763920089069e+01, 4.878819028638646e+03, 1.482461253526106e+03, 1.482461253526097e+03, 1.488546318999951e-08, 1.003991340999663e-08, 1.435336481604404e-08, 1.286111172592976e-06, 1.246477215698002e-08, 1.246477215698002e-08, 2.168152359248417e-04, 2.084223273438087e-04, 2.203665320465236e-04, 2.136444035131128e-04, 2.067074268238555e-04, 1.391810335386333e-05, 7.512451755434276e-03, 3.899254219827581e-03, 8.389091623516684e-03, 8.032147380851054e-03, 6.413176669411672e-03, 4.457922917307901e-02, 2.035129722801972e+02, -2.583113525393231e-01, 2.195687327403323e+02, 2.856324486130428e-05, -5.975202949214439e-01, -5.975202949214439e-01, 5.561507838591881e+07, 4.422522639538661e+03, 1.641910760292041e+04, 1.147261896119172e+03, 4.676868728638523e+07, 6.018069777751388e+03, -6.508712305129391e-02, -2.074827208328253e-02, 2.322516919573798e-03, -4.153733857679837e-02, -3.548664776843317e-02, -3.548664776843317e-02, -4.813768749818467e-02, 1.422412644582283e-02, 1.181819631841693e-02, 5.775921672015018e-03, 9.508273686048639e-03, 7.041263275619174e-02, 3.846412522038210e-03, 4.735057699318555e+00, 1.216483094752882e-02, 6.292716823326026e-01, 4.334037310169634e-02, 4.334037310169629e-02, 1.858589994818894e-01, 3.107440574354073e+01, 1.147260145358593e+01, 7.462725396194217e-02, 4.902029902749320e+02, 1.689573152407502e+00, 6.950768332952248e+02, 7.549014829115999e+04, 2.696316577265712e+04, 2.082283431526183e+00, 1.017302383674917e+04, 1.017302383674908e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_2x_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-2.991539918389808e-05, -2.991531979294729e-05, -2.991486441390685e-05, -2.991617178519689e-05, -2.991535809362587e-05, -2.991535809362587e-05, -6.517308219898840e-04, -6.517572249139339e-04, -6.525090606651152e-04, -6.521286521864268e-04, -6.517328102121713e-04, -5.573577484417711e-04, -8.168569955781293e-03, 7.928279051029887e-04, 2.676305198855870e-03, 1.879395149797843e-03, 7.429647587600762e-04, 7.429647587600762e-04, 2.032908208511510e-02, 1.593993928964529e-02, -4.906669503777228e-03, 4.291656650898121e-02, 1.908297910889725e-02, 1.908297910889725e-02, -2.596870994136847e-02, -2.667777449915709e-02, -2.369130069893521e-02, -9.007995516873132e-03, -2.706468907118181e-02, -2.706468907118182e-02, 8.995855882340603e-04, 9.145994597064219e-04, 9.012383378365290e-04, -3.742278867212043e-04, 9.070900811231161e-04, 9.070900811231161e-04, -1.662536911616434e-03, -1.658452162055710e-03, -1.663415712529830e-03, -1.660725843819199e-03, -1.658435596830441e-03, -1.264426075000180e-03, -9.718466984512368e-03, 1.016278302073823e-02, -1.309570336426666e-02, -6.581676609572596e-03, -5.140318613773127e-03, -1.317291287834094e-02, -2.236394696078685e-03, 4.192054965405771e-02, -4.600448557614667e-03, -6.702892315914603e-04, 4.632490610112828e-02, 4.632490610112828e-02, 2.007079552807848e-04, -1.093133625774325e-02, -1.708217104955928e-02, 2.001712351808099e-02, 2.287250637294829e-04, -1.125562913238705e-02, 2.817458224450999e-01, 1.216599406032442e-01, -1.446142189137775e-02, 1.976812435890743e-01, 1.758143878880329e-01, 1.758143878880329e-01, 2.086792111449966e-01, -1.354768328195007e-02, -2.420409045886412e-03, 2.154856515496661e-02, 6.964659114627521e-03, -1.632100625759918e-02, 1.800903337520127e-03, -3.751464329472835e-02, -7.464184153244168e-04, -2.731314641175105e-02, -1.626571167926622e-02, -1.626571167926609e-02, -1.919018659052842e-02, -2.484918230953369e-02, -1.673690472474958e-02, -2.885585175986887e-02, 4.042313539102949e-03, 1.620546368906366e-02, -1.843044691277901e-02, -3.841831449724305e-03, -9.396380624061009e-03, 1.715353763429809e-02, -1.168518287726160e-02, -1.168518287726163e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
