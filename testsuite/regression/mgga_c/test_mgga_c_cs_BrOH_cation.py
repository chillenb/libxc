
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_cs_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_cs", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.963150813454335e-02, -2.963163037257767e-02, -2.963161052900929e-02, -2.962977805920548e-02, -2.963081895752435e-02, -2.963081895752435e-02, -5.388908768881322e-02, -5.388403390452940e-02, -5.373725422657848e-02, -5.366428976359867e-02, -5.372801671476658e-02, -5.372801671476658e-02, -5.683836878098442e-02, -5.685827261737762e-02, -5.665887173159378e-02, -5.355498301466002e-02, -5.410919359391136e-02, -5.410919359391136e-02, -1.579193445836842e-02, -1.622372934794000e-02, -9.875959929232891e-02, -1.659980498206803e-02, -8.649235319532982e-03, -8.649235319532978e-03, -1.036247531631886e-03, -1.086918206536863e-03, -5.388436379994409e-03, -6.085250506665801e-04, -4.008640738039186e-04, -4.008640738039186e-04, -1.486014648272761e-01, -7.564913269703551e-02, 6.630724619825157e-01, -2.706092962587199e-01, -1.292015245894441e-02, -4.938465339828368e-02, 2.100684206991837e+00, -5.309175635958223e-02, -3.534577312187888e-02, -3.471490155376016e-02, -3.677503383459085e-02, -2.830337233965098e-02, -1.778499229946096e-01, -7.710735325874571e-02, -1.655394532758429e-01, -4.012222295172724e-02, -3.520441399547707e-02, -3.844736749580230e-02, 2.075042622667383e-02, -6.920623366471705e-02, 1.573528639494428e-01, -5.532120953772950e-02, -1.022055474236724e-02, -7.729597761959864e-03, -4.695813042919790e-04, -5.951280978577183e-04, -4.532323493143084e-04, 6.679504182340281e-03, -4.413126928869480e-04, -4.413126928869480e-04, -9.035936187385429e+02, 3.673427316086902e+02, 6.349896756614813e+03, -8.146291093170058e+00, 1.170651324932990e+02, -1.148088150418577e+04, 3.503520925851179e+03, -2.644910756002970e-02, -1.167031968042238e-01, -1.283694060881175e-02, -3.457298257854905e-02, -2.515859589906985e-01, -2.011181440771349e-01, 6.388823706079839e-01, 1.046694964319717e+00, 7.777702051431441e-02, -3.602738792894711e-02, -2.870782351452192e-02, -2.943107449488595e-02, -3.374642528700558e-03, -7.145550498040692e-03, -2.767591804493334e-02, 5.411891487459630e-02, -8.144361849594777e-03, -1.457695619847096e-03, -1.605849920490159e-04, -3.330184438309624e-04, -2.658574899784319e-03, -4.260985894548013e-04, -4.260985894548010e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_cs_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_cs", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-7.810696173046656e-02, -7.810598895464432e-02, -7.810632114036273e-02, -7.810547391495055e-02, -7.810524924145913e-02, -7.810376063714101e-02, -7.811312874442022e-02, -7.811306025300553e-02, -7.810806068012492e-02, -7.810879107988480e-02, -7.810806068012492e-02, -7.810879107988480e-02, -6.232566175148423e-02, -6.233183432088685e-02, -6.232369876306924e-02, -6.233160242981858e-02, -6.232986333076834e-02, -6.231247620269702e-02, -6.253973673842780e-02, -6.253660290895785e-02, -6.252732407122581e-02, -6.232097771947673e-02, -6.252732407122581e-02, -6.232097771947673e-02, -4.951885075145934e-02, -4.816056273356506e-02, -4.988442014364205e-02, -4.824842388533200e-02, -5.491760523454341e-02, -5.687914373042573e-02, -5.757201529914890e-02, -5.678276056104203e-02, -4.733124061613170e-02, -6.624064081873120e-02, -4.733124061613170e-02, -6.624064081873120e-02, -4.477119619310423e-02, -4.144335528209855e-02, -4.439332277488326e-02, -4.051039167550422e-02, -3.887482036312725e-02, -1.975318905599202e-02, -4.562699178703875e-02, -4.378587209091195e-02, -1.325693378624885e-02, -6.447997196900818e-02, -1.325693378624885e-02, -6.447997196900818e-02, -1.581432541924108e-03, -1.201715190782694e-03, -1.690414926798327e-03, -1.238354468034258e-03, -1.005907953119357e-02, -8.334328095304398e-03, -7.789399088034638e-04, -8.403173679424606e-04, -2.054207572295406e-04, -2.306834062057924e-03, -2.054207572295407e-04, -2.306834062057924e-03, 1.987934339179676e-02, -7.962758093763992e-03, -4.011873294272885e-02, -4.069623888957740e-02, -4.703814136904962e-01, -5.515917559383097e-01, 7.832663122531272e-02, 8.918293935295013e-02, -8.049671634499549e-02, -8.030933278746569e-02, -5.586848842183328e-02, -5.849139821670709e-02, -1.520344704037175e+00, -1.195124558434494e+00, -8.409494996344474e-02, -8.416688093289014e-02, -9.816983948589182e-02, -9.773159557183843e-02, -9.782774018083212e-02, -9.709655380829313e-02, -9.259156248887367e-02, -9.354999584434999e-02, -9.814039109695803e-02, -9.801371682879083e-02, 7.618782082822698e-04, 3.428538904778140e-02, -2.135675232979989e-02, -2.027561872549714e-02, 1.275145317506786e-03, 1.873208020820619e-02, -4.088064820925961e-02, -3.325025251227151e-02, -4.017955526420969e-02, -5.047476381185517e-02, -3.789469673696773e-02, -4.999169498644703e-02, -2.832976785624176e-02, -3.043732989347760e-02, -5.296047414497435e-02, -5.072351371671426e-02, 6.971208939110039e-02, -6.728060911414105e-03, -4.153171062698360e-02, -4.166413154767652e-02, -4.054449373045631e-02, -3.679087123015175e-02, -3.933084843447566e-02, -3.688940899557762e-02, -6.820889671405262e-04, -5.733974069906556e-04, -8.185352608927738e-04, -7.648782777571137e-04, -6.880093174747090e-04, -5.312583221571532e-04, -7.371700316354888e-03, -1.025855919097083e-02, -1.288503423968000e-03, -3.158468728335257e-04, -1.288503423968001e-03, -3.158468728335257e-04, 3.809582413637977e+02, 4.245976643877592e+02, -1.561684467124133e+02, -1.706977433010073e+02, -2.692051425647142e+03, -2.961113549875515e+03, 3.879817891374612e+00, 3.276377748356503e+00, -4.079713024067198e+01, -6.346202919721451e+01, 4.884276480771136e+03, 5.340350233416060e+03, -1.439137293423644e+03, -1.648424904798658e+03, -5.405338534796930e-02, -5.354282341079471e-02, -1.455818435939579e-02, -8.055440272235519e-03, -4.904020326438049e-02, -5.273181072483274e-02, -4.397703085832587e-02, -4.319073482108297e-02, 4.532386123335100e-02, 5.153542244286417e-02, 3.725571618293939e-02, 3.591995458375925e-02, -1.501557245344478e-01, -1.945221039205784e-01, -2.579938306054757e-01, -3.636083505864052e-01, -7.388299972670222e-02, -8.555461316379735e-02, -4.675281244864368e-02, -4.649731057916267e-02, -4.884017007209018e-02, -4.857910727460958e-02, -5.133465909589172e-02, -5.001178471982833e-02, -5.765628406980022e-03, -5.409920280995101e-03, -1.641104990918899e-02, -1.465636254349481e-02, -4.172042651412512e-02, -3.914626026697612e-02, 1.619535764875865e-02, -1.048321661672515e-03, -2.702406691302969e-02, -2.500387673611934e-02, -2.093502846885757e-03, -1.781434546979793e-03, -2.150421397991768e-04, -2.128424674267604e-04, -5.109114229111718e-04, -3.870421886846141e-04, -2.036122514190846e-02, -2.193348145087449e-02, -1.140531610784529e-03, -3.221304786936947e-04, -1.140531610784528e-03, -3.221304786936945e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_cs_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_cs", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.139601068928419e-10, 2.279202137856838e-10, 1.139601068928419e-10, 1.139585248843038e-10, 2.279170497686075e-10, 1.139585248843038e-10, 1.139510037560601e-10, 2.279020075121201e-10, 1.139510037560601e-10, 1.139745518431910e-10, 2.279491036863820e-10, 1.139745518431910e-10, 1.139622817814357e-10, 2.279245635628714e-10, 1.139622817814357e-10, 1.139622817814357e-10, 2.279245635628714e-10, 1.139622817814357e-10, 8.902846774437660e-07, 1.780569354887532e-06, 8.902846774437660e-07, 8.902753229475001e-07, 1.780550645895000e-06, 8.902753229475001e-07, 8.899529839767152e-07, 1.779905967953430e-06, 8.899529839767152e-07, 8.896907119761806e-07, 1.779381423952361e-06, 8.896907119761806e-07, 8.901687163093153e-07, 1.780337432618631e-06, 8.901687163093153e-07, 8.901687163093153e-07, 1.780337432618631e-06, 8.901687163093153e-07, 1.998109281280034e-03, 3.996218562560067e-03, 1.998109281280034e-03, 2.007809400912070e-03, 4.015618801824140e-03, 2.007809400912070e-03, 2.260102879068776e-03, 4.520205758137553e-03, 2.260102879068776e-03, 2.179688270156398e-03, 4.359376540312795e-03, 2.179688270156398e-03, 2.175531892561577e-03, 4.351063785123154e-03, 2.175531892561577e-03, 2.175531892561577e-03, 4.351063785123154e-03, 2.175531892561577e-03, 3.974304637253513e-01, 7.948609274507026e-01, 3.974304637253513e-01, 3.782279344705621e-01, 7.564558689411243e-01, 3.782279344705621e-01, 1.007083779924850e-03, 2.014167559849700e-03, 1.007083779924850e-03, 9.139523078043047e-01, 1.827904615608609e+00, 9.139523078043047e-01, 3.032373902651776e-01, 6.064747805303552e-01, 3.032373902651776e-01, 3.032373902651777e-01, 6.064747805303553e-01, 3.032373902651777e-01, 4.130103014438044e-09, 8.260206028876088e-09, 4.130103014438044e-09, 1.779757304602302e-08, 3.559514609204604e-08, 1.779757304602302e-08, 3.458760651461348e+00, 6.917521302922696e+00, 3.458760651461348e+00, 9.010629158086507e-19, 1.802125831617301e-18, 9.010629158086507e-19, 2.578738918328800e-14, 5.157477836657599e-14, 2.578738918328800e-14, 2.578738918328801e-14, 5.157477836657602e-14, 2.578738918328801e-14, 1.236721405679784e-07, 2.473442811359569e-07, 1.236721405679784e-07, 1.235607059076524e-07, 2.471214118153049e-07, 1.235607059076524e-07, 1.236665871165928e-07, 2.473331742331856e-07, 1.236665871165928e-07, 1.235682175678271e-07, 2.471364351356542e-07, 1.235682175678271e-07, 1.236158655568771e-07, 2.472317311137543e-07, 1.236158655568771e-07, 1.236158655568771e-07, 2.472317311137543e-07, 1.236158655568771e-07, 1.425737048906734e-05, 2.851474097813468e-05, 1.425737048906734e-05, 1.377388498868222e-05, 2.754776997736444e-05, 1.377388498868222e-05, 1.462313175742352e-05, 2.924626351484704e-05, 1.462313175742352e-05, 1.418165270865465e-05, 2.836330541730929e-05, 1.418165270865465e-05, 1.381801125366972e-05, 2.763602250733943e-05, 1.381801125366972e-05, 1.381801125366972e-05, 2.763602250733943e-05, 1.381801125366972e-05, 3.586813501619464e-03, 7.173627003238928e-03, 3.586813501619464e-03, 2.500105925691718e-03, 5.000211851383437e-03, 2.500105925691718e-03, 4.998713405916710e-03, 9.997426811833420e-03, 4.998713405916710e-03, 4.233455454981478e-03, 8.466910909962957e-03, 4.233455454981478e-03, 3.326762883442184e-03, 6.653525766884367e-03, 3.326762883442184e-03, 3.326762883442184e-03, 6.653525766884367e-03, 3.326762883442184e-03, 2.221180654384618e+00, 4.442361308769235e+00, 2.221180654384618e+00, 3.967676911232972e-01, 7.935353822465945e-01, 3.967676911232972e-01, 2.568601491666287e+00, 5.137202983332575e+00, 2.568601491666287e+00, 1.563298840408183e-05, 3.126597680816367e-05, 1.563298840408183e-05, 1.545277104145143e+00, 3.090554208290285e+00, 1.545277104145143e+00, 1.545277104145143e+00, 3.090554208290285e+00, 1.545277104145143e+00, 9.148776665322425e-26, 1.829755333064485e-25, 9.148776665322425e-26, 2.617548821507858e-19, 5.235097643015715e-19, 2.617548821507858e-19, 9.248696809343171e-27, 1.849739361868634e-26, 9.248696809343171e-27, 4.277586785628217e+00, 8.555173571256434e+00, 4.277586785628217e+00, 1.841595872846166e-21, 3.683191745692332e-21, 1.841595872846166e-21, 1.841595872846166e-21, 3.683191745692331e-21, 1.841595872846166e-21, 3.512196890350493e-03, 7.024393780700986e-03, 3.512196890350493e-03, 3.600909272148969e-03, 7.201818544297937e-03, 3.600909272148969e-03, 3.569388450672600e-03, 7.138776901345200e-03, 3.569388450672600e-03, 3.543676579435928e-03, 7.087353158871855e-03, 3.543676579435928e-03, 3.556518641825112e-03, 7.113037283650223e-03, 3.556518641825112e-03, 3.556518641825112e-03, 7.113037283650223e-03, 3.556518641825112e-03, 3.956046981847037e-03, 7.912093963694074e-03, 3.956046981847037e-03, 7.599809606816300e-03, 1.519961921363260e-02, 7.599809606816300e-03, 6.249658463776391e-03, 1.249931692755278e-02, 6.249658463776391e-03, 5.185383115487771e-03, 1.037076623097554e-02, 5.185383115487771e-03, 5.699154763177525e-03, 1.139830952635505e-02, 5.699154763177525e-03, 5.699154763177525e-03, 1.139830952635505e-02, 5.699154763177525e-03, 2.031643264870367e-03, 4.063286529740734e-03, 2.031643264870367e-03, 1.801588181130276e-01, 3.603176362260552e-01, 1.801588181130276e-01, 9.278087652347558e-02, 1.855617530469512e-01, 9.278087652347558e-02, 3.176151489656707e-02, 6.352302979313414e-02, 3.176151489656707e-02, 5.488971429633367e-02, 1.097794285926673e-01, 5.488971429633367e-02, 5.488971429633368e-02, 1.097794285926674e-01, 5.488971429633368e-02, 1.075727429937208e-02, 2.151454859874416e-02, 1.075727429937208e-02, 3.220886552665412e+00, 6.441773105330824e+00, 3.220886552665412e+00, 4.447930296956387e+00, 8.895860593912774e+00, 4.447930296956387e+00, 3.670723200168575e-02, 7.341446400337150e-02, 3.670723200168575e-02, 3.309308028353214e+00, 6.618616056706427e+00, 3.309308028353214e+00, 3.309308028353213e+00, 6.618616056706426e+00, 3.309308028353213e+00, 1.770026542427648e-05, 3.540053084855296e-05, 1.770026542427648e-05, 1.645548235601576e-87, 3.291096471203151e-87, 1.645548235601576e-87, 2.002268204737347e-38, 4.004536409474694e-38, 2.002268204737347e-38, 3.618721384499378e+00, 7.237442768998755e+00, 3.618721384499378e+00, 1.461797608843684e-23, 2.923595217687369e-23, 1.461797608843684e-23, 1.461797608843607e-23, 2.923595217687215e-23, 1.461797608843607e-23]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_cs_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_cs", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [-1.101605224603135e-06, -1.101609480258222e-06, -1.101597688346376e-06, -1.101604864450910e-06, -1.101576356026101e-06, -1.101568422510506e-06, -1.101650241288153e-06, -1.101675416266710e-06, -1.101594644629265e-06, -1.101636765794644e-06, -1.101594644629265e-06, -1.101636765794644e-06, -3.713866353381321e-05, -3.714018374247454e-05, -3.713840593009295e-05, -3.714014184204928e-05, -3.713525991628476e-05, -3.713296646702726e-05, -3.713069497429590e-05, -3.712913169719243e-05, -3.715839966500143e-05, -3.711672040758556e-05, -3.715839966500143e-05, -3.711672040758556e-05, -6.016725999216787e-04, -5.945741578153188e-04, -6.034071431295122e-04, -5.946754572510332e-04, -6.155508378449913e-04, -6.284495866586043e-04, -6.169275990462995e-04, -6.129354555916747e-04, -5.507954256111279e-04, -6.702867285789158e-04, -5.507954256111279e-04, -6.702867285789158e-04, -2.165242323015461e-03, -1.931020716659549e-03, -2.171667127571361e-03, -1.906494815595068e-03, -5.016428597195880e-04, -4.542718095489424e-04, -2.103257243392558e-03, -2.018528592181449e-03, -2.589986331841173e-04, -1.677383548826729e-03, -2.589986331841170e-04, -1.677383548826731e-03, -9.794364333056513e-16, -8.162900320275490e-16, -4.975706880779547e-15, -4.047432442923668e-15, -1.592487312603138e-04, -1.352278560072705e-04, -3.678295195294352e-26, -3.868471095124550e-26, -6.668162059266920e-22, -3.618471671112201e-21, -6.668162059266922e-22, -3.618471671112200e-21, -1.730903241217990e-05, -1.732147691133258e-05, -1.730279833120414e-05, -1.731556665537472e-05, -1.730861414415325e-05, -1.732129001929557e-05, -1.730335131286354e-05, -1.731583263746949e-05, -1.730585343018539e-05, -1.731852376418886e-05, -1.730585343018539e-05, -1.731852376418886e-05, -1.060015169808354e-04, -1.060175878058012e-04, -1.046167023165387e-04, -1.047021603129233e-04, -1.072883820848230e-04, -1.067336071326140e-04, -1.060852875465882e-04, -1.055139089910783e-04, -1.040912497539847e-04, -1.054708757413190e-04, -1.040912497539847e-04, -1.054708757413190e-04, -7.157852345316792e-04, -7.215005911863524e-04, -6.426437137940356e-04, -6.417692655794192e-04, -8.363661098292585e-04, -7.505109608272778e-04, -7.917876263319048e-04, -7.178306116038773e-04, -6.457828008069216e-04, -7.528188843157477e-04, -6.457828008069216e-04, -7.528188843157477e-04, -1.700070180969323e-03, -1.652346983685429e-03, -2.069383375226281e-03, -2.038707867690451e-03, -1.655010046116307e-03, -1.414529443326965e-03, -1.096223791320621e-04, -1.097702612480314e-04, -2.047227441393378e-03, -1.722126338949983e-03, -2.047227441393378e-03, -1.722126338949983e-03, -1.861275689562553e-33, -1.658289247164537e-33, -1.047162984287392e-26, -1.001020166126842e-26, -1.756586497527510e-34, -1.478898026129669e-34, -7.847939175957926e-04, -7.704937509711803e-04, -8.126222223790295e-29, -3.137423645346474e-29, -8.126222223790292e-29, -3.137423645346473e-29, -7.181251700264530e-04, -7.098610442847579e-04, -7.237080926422102e-04, -7.152964441717042e-04, -7.217495704382509e-04, -7.133636184163596e-04, -7.201055626753418e-04, -7.118146456330698e-04, -7.209273636178547e-04, -7.125898095910984e-04, -7.209273636178547e-04, -7.125898095910984e-04, -7.442468215401500e-04, -7.369145774596600e-04, -9.057998864178257e-04, -8.941285266153948e-04, -8.554462818902918e-04, -8.441572849322578e-04, -8.080880089668248e-04, -7.996231532462737e-04, -8.314743451510128e-04, -8.222767102707174e-04, -8.314743451510128e-04, -8.222767102707174e-04, -6.027886103159056e-04, -5.998514199600674e-04, -1.897300110016670e-03, -1.864721411207237e-03, -1.703017858234772e-03, -1.652787805109658e-03, -1.334621563278409e-03, -1.312725814721072e-03, -1.503695628230898e-03, -1.505288110396583e-03, -1.503695628230899e-03, -1.505288110396582e-03, -1.004251748533994e-03, -9.837880444429695e-04, -1.214517476299864e-04, -1.189924674255380e-04, -4.414677367683587e-04, -3.999440224802839e-04, -1.401274855003793e-03, -1.339748774074861e-03, -1.343128002393814e-03, -1.140918066589908e-03, -1.343128002393814e-03, -1.140918066589908e-03, -1.139393825645043e-11, -1.023940429211665e-11, -1.233864279785524e-96, -1.225442562088318e-96, -1.511335991777930e-46, -1.256173571707847e-46, -1.151973116205409e-03, -1.097256042010781e-03, -4.966881469913606e-31, -2.116450795284945e-31, -4.966881469913327e-31, -2.116450795284828e-31]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_cs_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_cs", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-8.812875842065787e-06, -8.812841796825081e-06, -8.812838915607271e-06, -8.812781506771006e-06, -8.812547380084056e-06, -8.812610848208809e-06, -8.813403330133686e-06, -8.813201930305219e-06, -8.813094126357152e-06, -8.812757157034125e-06, -8.813094126357152e-06, -8.812757157034125e-06, -2.971214699397965e-04, -2.971093082705055e-04, -2.971211347363944e-04, -2.971072474407436e-04, -2.970637317362180e-04, -2.970820793302782e-04, -2.970330535775394e-04, -2.970455597943674e-04, -2.969337632606845e-04, -2.972671973200115e-04, -2.969337632606845e-04, -2.972671973200115e-04, -4.756593262522551e-03, -4.813380799373431e-03, -4.757403658008266e-03, -4.827257145036097e-03, -5.027596693268835e-03, -4.924406702759927e-03, -4.903483644733400e-03, -4.935420792370397e-03, -5.362293828631328e-03, -4.406363404889028e-03, -5.362293828631328e-03, -4.406363404889028e-03, -1.544816573327640e-02, -1.732193858412369e-02, -1.525195852476054e-02, -1.737333702057089e-02, -3.634174476391542e-03, -4.013142877756706e-03, -1.614822873745160e-02, -1.682605794714048e-02, -1.341906839061384e-02, -2.071989065472937e-03, -1.341906839061384e-02, -2.071989065472938e-03, -6.530320256220384e-15, -7.835491466445215e-15, -3.237945954338934e-14, -3.980565504623641e-14, -1.081822848058164e-03, -1.273989850082510e-03, -3.094776876099642e-25, -2.942636156235482e-25, -2.894777336889758e-20, -5.334529647413548e-21, -2.894777336889759e-20, -5.334529647413547e-21, -1.385718152906607e-04, -1.384722592974392e-04, -1.385245332429978e-04, -1.384223866496331e-04, -1.385703201543646e-04, -1.384689131532261e-04, -1.385266610997559e-04, -1.384268105029084e-04, -1.385481901135110e-04, -1.384468274414831e-04, -1.385481901135110e-04, -1.384468274414831e-04, -8.481407024464095e-04, -8.480121358466830e-04, -8.376172825033872e-04, -8.369336185323096e-04, -8.538688570609126e-04, -8.583070566785843e-04, -8.441112719286266e-04, -8.486823003727059e-04, -8.437670059305523e-04, -8.327299980318773e-04, -8.437670059305523e-04, -8.327299980318773e-04, -5.772004729490822e-03, -5.726281876253433e-03, -5.134154124635349e-03, -5.141149710352289e-03, -6.004087686618222e-03, -6.690928878634072e-03, -5.742644892831011e-03, -6.334301010655241e-03, -6.022551074525984e-03, -5.166262406455372e-03, -6.022551074525984e-03, -5.166262406455373e-03, -1.321877586948343e-02, -1.360056144775460e-02, -1.630966294152361e-02, -1.655506700181027e-02, -1.131623554661573e-02, -1.324008036893047e-02, -8.781620899842516e-04, -8.769790330564972e-04, -1.377701071159986e-02, -1.637781953114702e-02, -1.377701071159986e-02, -1.637781953114702e-02, -1.326631397731630e-32, -1.489020551650042e-32, -8.008161329014737e-26, -8.377303874299139e-26, -1.183118420903736e-33, -1.405269198022008e-33, -6.163950007769441e-03, -6.278351340766344e-03, -2.509938916277182e-28, -6.500977779032234e-28, -2.509938916277181e-28, -6.500977779032237e-28, -5.678888354278064e-03, -5.745001360211627e-03, -5.722371553373636e-03, -5.789664741137683e-03, -5.706908947330868e-03, -5.773996563506013e-03, -5.694517165064555e-03, -5.760844501402736e-03, -5.700718476728791e-03, -5.767418908942837e-03, -5.700718476728791e-03, -5.767418908942837e-03, -5.895316619677279e-03, -5.953974572321203e-03, -7.153028212923161e-03, -7.246399091342611e-03, -6.753258279458059e-03, -6.843570255122336e-03, -6.396985225970189e-03, -6.464704071734595e-03, -6.578213682165739e-03, -6.651794761208107e-03, -6.578213682165739e-03, -6.651794761208107e-03, -4.798811359680540e-03, -4.822308882527249e-03, -1.491777128965791e-02, -1.517840088013336e-02, -1.322230244087726e-02, -1.362414286587818e-02, -1.050180651776857e-02, -1.067697250622729e-02, -1.204230488317267e-02, -1.202956502584718e-02, -1.204230488317267e-02, -1.202956502584718e-02, -7.870304355543754e-03, -8.034013988271955e-03, -9.519397394043034e-04, -9.716139810398924e-04, -3.199552179842274e-03, -3.531741894146870e-03, -1.071799019259889e-02, -1.121019884003035e-02, -9.127344532719265e-03, -1.074502401915052e-02, -9.127344532719269e-03, -1.074502401915052e-02, -8.191523433693321e-11, -9.115150605160348e-11, -9.803540496706554e-96, -9.870914238284199e-96, -1.004938857366279e-45, -1.209068793422344e-45, -8.778048336086254e-03, -9.215784929643266e-03, -1.693160636227956e-30, -3.973505175930884e-30, -1.693160636227861e-30, -3.973505175930662e-30]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
