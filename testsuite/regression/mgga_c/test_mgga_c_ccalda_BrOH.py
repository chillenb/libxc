
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_ccalda_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_ccalda", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.645987698524943e-01, -1.645988436743185e-01, -1.645992273738454e-01, -1.645980174205966e-01, -1.645988083291892e-01, -1.645988083291892e-01, -1.107845175179429e-01, -1.107845773617200e-01, -1.107873959302812e-01, -1.107885830051033e-01, -1.107846697666463e-01, -1.107846697666463e-01, -6.686302819127440e-02, -6.683821749222559e-02, -6.618747242203132e-02, -6.637626507114835e-02, -6.685398158784905e-02, -6.685398158784905e-02, -3.884830504868374e-02, -3.909771337804628e-02, -7.129454252820250e-02, -3.304152509516754e-02, -3.892337880699500e-02, -3.892337880699500e-02, -5.836962451735262e-03, -6.059137226486771e-03, -1.705859550267874e-02, -3.162581153974649e-03, -6.008297725497659e-03, -6.008297725497659e-03, -1.224135396776813e-01, -1.224187221882082e-01, -1.224140865163768e-01, -1.224181159734425e-01, -1.224161738835293e-01, -1.224161738835293e-01, -9.468307849320164e-02, -9.487508716530836e-02, -9.460510801354542e-02, -9.475546076572411e-02, -9.491339721119325e-02, -9.491339721119327e-02, -6.354994642731449e-02, -6.551985916361885e-02, -6.231400667193045e-02, -6.330586491585430e-02, -6.444458984389427e-02, -6.444458984389427e-02, -2.795790560897061e-02, -3.898281332058283e-02, -2.775589238622643e-02, -9.415426217275502e-02, -3.029258085721030e-02, -3.029258085721030e-02, -3.066310498112501e-03, -3.437963615799383e-03, -2.681751673836464e-03, -2.111687625325582e-02, -3.174878197427740e-03, -3.174878197427741e-03, -6.429412558975314e-02, -6.416691228742129e-02, -6.421258200260355e-02, -6.424776511879356e-02, -6.423016145500848e-02, -6.423016145500848e-02, -6.352052611074439e-02, -6.019555445738920e-02, -6.120693492227375e-02, -6.211304617973155e-02, -6.165502636499921e-02, -6.165502636499921e-02, -6.665863684204915e-02, -4.342835275928391e-02, -4.691716832139661e-02, -5.212060951466563e-02, -4.948795152624540e-02, -4.948795152624540e-02, -5.782933926396749e-02, -1.620746291807963e-02, -1.975614416892405e-02, -5.089617481137673e-02, -2.479856847389609e-02, -2.479856847389609e-02, -6.628430789950042e-03, -1.088756144151761e-03, -1.944410087279368e-03, -2.411824304133295e-02, -2.758875307244261e-03, -2.758875307244265e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_ccalda_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_ccalda", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.747363821479893e-01, -1.747364563991748e-01, -1.747368423303562e-01, -1.747356253397650e-01, -1.747364208484719e-01, -1.747364208484719e-01, -1.202894325397279e-01, -1.202894936034073e-01, -1.202923696260642e-01, -1.202935808973291e-01, -1.202895878919845e-01, -1.202895878922648e-01, -7.491623656166166e-02, -7.489021498184567e-02, -7.420751974637685e-02, -7.440561961674810e-02, -7.490674850257129e-02, -7.490674850257129e-02, -4.512324136877377e-02, -4.539324146293609e-02, -7.955565354779473e-02, -3.879901454252824e-02, -4.520452613987527e-02, -4.520452613987527e-02, -7.408289244428773e-03, -7.682811750638712e-03, -2.082742850626818e-02, -4.067896957146602e-03, -7.620030978938309e-03, -7.620030991915102e-03, -1.321275545433168e-01, -1.321328186737475e-01, -1.321281099946382e-01, -1.321322029122264e-01, -1.321302302367515e-01, -1.321302302367515e-01, -1.037961680429288e-01, -1.039936710459792e-01, -1.037159602498013e-01, -1.038706240781529e-01, -1.040330747452932e-01, -1.040330747450494e-01, -7.143667712676779e-02, -7.350674401923776e-02, -7.013611107112666e-02, -7.117994327429714e-02, -7.237723572568149e-02, -7.237723572555271e-02, -3.318915835573125e-02, -4.526887000240614e-02, -3.296452513148779e-02, -1.032521073283338e-01, -3.577533340106116e-02, -3.577533340106116e-02, -3.946287688264067e-03, -4.415186683259541e-03, -3.459435406815778e-03, -2.549362941948339e-02, -4.083422991717210e-03, -4.083422984295393e-03, -7.221909961565336e-02, -7.208538414748851e-02, -7.213338981778682e-02, -7.217037123496974e-02, -7.215186794072695e-02, -7.215186794072695e-02, -7.140573462753927e-02, -6.790359064724691e-02, -6.896995479265103e-02, -6.992450993054376e-02, -6.944209849577504e-02, -6.944209849581726e-02, -7.470185404848280e-02, -5.006348929577377e-02, -5.380411421207947e-02, -5.935291128433447e-02, -5.654971800738392e-02, -5.654971800772909e-02, -6.540488546969517e-02, -1.983769131414657e-02, -2.393840323484631e-02, -5.805018503704280e-02, -2.965891225314007e-02, -2.965891225427415e-02, -8.384336069307032e-03, -1.421584121948934e-03, -2.520781412344467e-03, -2.889363359730559e-02, -3.557215229681271e-03, -3.557215248058140e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_ccalda_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_ccalda", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [6.147465054976357e-26, 3.429474990195462e-26, -9.948896137466457e-26, -9.166310291680375e-27, 1.274011949699622e-25, 1.274011949699622e-25, 4.017843214345302e-23, -1.893255904591781e-23, 5.339145609608137e-23, -1.909643096465214e-22, -1.845120170743125e-22, 6.079501352742354e-18, -3.414244741313992e-19, 5.891656373780248e-15, -7.900331074543403e-15, -2.678491315923798e-14, 3.134491996503523e-15, 3.134491996503523e-15, -1.482133613791799e-12, 6.055018501920919e-13, -4.714501999443560e-20, -2.047048006663454e-11, -2.902505660935786e-12, -2.902505660935786e-12, -1.168714544872018e-06, 3.220083149376056e-07, 3.966765904639883e-09, -3.240650179645492e-06, 1.476120482775330e-07, -6.855113866626020e-07, 3.851386171024063e-19, 4.831049556107408e-19, -2.148315289220084e-19, -2.375105713138783e-23, 4.819083511623588e-20, 4.819083511623588e-20, 1.056701194451699e-22, 2.762787249526201e-22, -3.893069796740641e-21, 1.738304207642896e-21, 2.759630045471516e-21, -3.389278688918783e-17, -5.305617497104218e-15, 8.909981522791704e-16, 1.416006891410668e-14, 4.003482545582153e-15, 1.118215969719310e-14, 1.720644440095807e-18, 1.727752627602856e-16, -8.471524132958208e-13, 2.298022205775349e-16, 2.125836671329601e-18, -4.243112168204404e-12, -4.243112168204404e-12, 3.656613691045974e-13, -7.353148088054177e-06, -7.912935575318590e-06, 2.739123098453605e-16, 1.840023780747519e-13, -1.481832534345739e-05, -2.738574144120277e-14, -2.032390413617411e-14, -1.496613614703357e-17, -2.110173183086225e-14, -8.240941617998361e-15, -8.240941617998361e-15, 1.055799138565315e-14, 5.220443042161199e-14, 5.312020547059370e-14, 2.494137443154650e-14, 9.811214417725861e-15, 3.175597689794521e-18, -1.972206811495341e-15, -4.216315638883223e-17, 5.621158040701902e-13, -9.680851679208017e-18, -3.369982776870974e-13, 3.218151271489187e-13, 6.469607219445723e-18, -1.894602883372829e-10, 1.305765767836882e-09, -2.479871395827967e-14, 9.560992111874298e-16, 4.380942580704190e-11, -3.010631066743186e-07, 1.705551356839327e-03, 2.439414878228580e-04, -5.735492046330087e-12, -6.367582910973435e-05, -4.477044295391577e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_ccalda_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_ccalda", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-2.557565521429538e-20, -1.815651069585776e-20, 5.963249356677811e-21, -6.224857035523936e-22, 7.954111679357177e-21, 7.954111679357177e-21, -1.611245346235225e-19, -1.398373755199081e-19, -1.297980988591554e-19, 1.398666403556278e-19, -9.028668373831506e-20, -3.536994293945699e-15, 5.639795678597195e-19, -2.837287532683843e-14, -4.537313570965908e-14, -3.338953154056687e-14, -2.594500597935648e-14, -2.594500597935648e-14, 2.913643557647237e-13, -1.938400186698657e-13, 1.206689248781852e-19, 7.360649045182114e-13, 4.995030316227564e-13, 4.995030316227564e-13, 1.096561629497438e-11, -2.189079028427128e-11, -7.497816161710095e-13, 3.589932771563074e-11, 1.385382099743565e-11, 1.557452035223279e-11, 1.421555667643399e-15, -6.648742666087373e-16, 4.452674248495136e-16, -9.916261390356560e-20, 3.518829478024829e-16, 3.518829478024829e-16, -1.411463488180091e-19, 6.383106731387575e-19, -9.443419493987400e-19, -5.472615223420995e-19, 1.862604484026602e-19, 4.527871704314491e-15, -1.931409096207666e-14, -5.544785475277862e-14, -1.102148723675764e-15, 5.750913250906659e-14, 2.113106047118013e-15, -4.937279415656017e-18, 8.069171105448701e-19, 1.467030091473447e-13, 6.619197194079034e-19, -4.608773580993339e-15, -1.683128206645705e-13, -1.683128206645705e-13, -3.319837268730312e-19, -2.655479972877661e-11, -6.129895221989597e-12, -2.122635132474908e-18, 5.065019713044557e-19, 3.132217777233918e-11, -1.260892560301758e-14, -1.606540262079729e-14, 1.582810380609111e-17, -2.387846883270134e-14, 5.179570811038045e-14, 5.179570811038045e-14, 6.736343875691131e-14, 3.718683194845431e-14, 1.237564530428582e-14, 1.015671663234232e-13, 3.773082210837722e-14, -1.448325890008934e-17, -3.776460681608991e-15, 9.435620812607789e-21, 3.426971143995810e-14, -1.040794206460402e-17, 1.264308570051895e-13, -1.911641357407443e-13, 9.799716214423081e-18, -3.192436727304770e-12, 3.570426297542546e-13, -2.432035879545523e-13, -6.597253235618839e-18, -4.271893486688373e-13, 1.246962115319196e-11, -5.031289106943280e-11, 6.105396087187212e-11, -1.356384777696779e-12, 2.087756989828261e-11, -2.396445842024454e-11]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
