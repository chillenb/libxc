
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_ccalda_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_ccalda", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.645987698524943e-01, -1.645988436743185e-01, -1.645992273738454e-01, -1.645980174205966e-01, -1.645988083291892e-01, -1.645988083291892e-01, -1.107845175179429e-01, -1.107845773617200e-01, -1.107873959302812e-01, -1.107885830051033e-01, -1.107846697666463e-01, -1.107846697666463e-01, -6.686302819127440e-02, -6.683821749222559e-02, -6.618747242203132e-02, -6.637626507114835e-02, -6.685398158784905e-02, -6.685398158784905e-02, -3.884830504868374e-02, -3.909771337804629e-02, -7.129454252820250e-02, -3.304152509516754e-02, -3.892337880699501e-02, -3.892337880699501e-02, -5.836962451735261e-03, -6.059137226486771e-03, -1.705859550267874e-02, -3.162581153974649e-03, -6.008297725497659e-03, -6.008297725497659e-03, -1.224135396776812e-01, -1.224187221882082e-01, -1.224140865163768e-01, -1.224181159734425e-01, -1.224161738835294e-01, -1.224161738835294e-01, -9.468307849320164e-02, -9.487508716530837e-02, -9.460510801354542e-02, -9.475546076572411e-02, -9.491339721119327e-02, -9.491339721119327e-02, -6.354994642731449e-02, -6.551985916361885e-02, -6.231400667193045e-02, -6.330586491585430e-02, -6.444458984389427e-02, -6.444458984389427e-02, -2.795790560897061e-02, -3.898281332058283e-02, -2.775589238622643e-02, -9.415426217275502e-02, -3.029258085721030e-02, -3.029258085721030e-02, -3.066310498112501e-03, -3.437963615799382e-03, -2.681751673836464e-03, -2.111687625325582e-02, -3.174878197427740e-03, -3.174878197427740e-03, -6.429412558975314e-02, -6.416691228742127e-02, -6.421258200260355e-02, -6.424776511879356e-02, -6.423016145500850e-02, -6.423016145500850e-02, -6.352052611074439e-02, -6.019555445738922e-02, -6.120693492227375e-02, -6.211304617973156e-02, -6.165502636499922e-02, -6.165502636499921e-02, -6.665863684204915e-02, -4.342835275928391e-02, -4.691716832139661e-02, -5.212060951466563e-02, -4.948795152624541e-02, -4.948795152624540e-02, -5.782933926396749e-02, -1.620746291807964e-02, -1.975614416892405e-02, -5.089617481137674e-02, -2.479856847389609e-02, -2.479856847389609e-02, -6.628430789950041e-03, -1.088756144151760e-03, -1.944410087279367e-03, -2.411824304133295e-02, -2.758875307244261e-03, -2.758875307244265e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_ccalda_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_ccalda", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.747363821479898e-01, -1.747364563991750e-01, -1.747368423303569e-01, -1.747356253397655e-01, -1.747364208484722e-01, -1.747364208484722e-01, -1.202894325397279e-01, -1.202894936034073e-01, -1.202923696260642e-01, -1.202935808973291e-01, -1.202895878919845e-01, -1.202895878919845e-01, -7.491623656166164e-02, -7.489021498171380e-02, -7.420751974649303e-02, -7.440561961652779e-02, -7.490674850235193e-02, -7.490674850235193e-02, -4.512324136900020e-02, -4.539324146282497e-02, -7.955565354779473e-02, -3.879901454157739e-02, -4.520452614008812e-02, -4.520452614008812e-02, -7.408289245084997e-03, -7.682811744579175e-03, -2.082742850484080e-02, -4.067896927582293e-03, -7.620030990823640e-03, -7.620030990823561e-03, -1.321275545433107e-01, -1.321328186738500e-01, -1.321281099946897e-01, -1.321322029122247e-01, -1.321302302367892e-01, -1.321302302367892e-01, -1.037961680429287e-01, -1.039936710459792e-01, -1.037159602498013e-01, -1.038706240781530e-01, -1.040330747452933e-01, -1.040330747452933e-01, -7.143667712672173e-02, -7.350674401928627e-02, -7.013611107125281e-02, -7.117994327433122e-02, -7.237723572555273e-02, -7.237723572555273e-02, -3.318915835573125e-02, -4.526887000185348e-02, -3.296452513148780e-02, -1.032521073283362e-01, -3.577533340109379e-02, -3.577533340109379e-02, -3.946287688264067e-03, -4.415186659901370e-03, -3.459435419270272e-03, -2.549362941948338e-02, -4.083422991717210e-03, -4.083422991717209e-03, -7.221909961565520e-02, -7.208538414747716e-02, -7.213338981778679e-02, -7.217037123496239e-02, -7.215186794073081e-02, -7.215186794073081e-02, -7.140573462753826e-02, -6.790359064726803e-02, -6.896995479255096e-02, -6.992450993060863e-02, -6.944209849581734e-02, -6.944209849581727e-02, -7.470185404849745e-02, -5.006348929577380e-02, -5.380411421205687e-02, -5.935291128433450e-02, -5.654971800760063e-02, -5.654971800760060e-02, -6.540488546969520e-02, -1.983769131502100e-02, -2.393840323403958e-02, -5.805018503704280e-02, -2.965891225314010e-02, -2.965891225314008e-02, -8.384336061627171e-03, -1.421584089965163e-03, -2.520781351740867e-03, -2.889363359653216e-02, -3.557215213140588e-03, -3.557215213140588e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_ccalda_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_ccalda", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.424097938565491e-24, 9.577210021858318e-25, 7.945674061400695e-25, 1.932113966100705e-24, 1.044502907652977e-24, 1.044502907652977e-24, 5.071950473099911e-22, -9.426164941389162e-22, 1.377251654907187e-22, 2.343740164890629e-22, 6.634556822914689e-23, 6.634556822914689e-23, 4.952320659753592e-19, -1.262704500695762e-19, -2.312291338503453e-19, -2.027171620886425e-19, -8.367652937357928e-19, -8.367652937357928e-19, -8.288380878724184e-16, 4.968444341658172e-17, 1.273155878184373e-19, -2.314187813280124e-17, -9.675202104558273e-16, -9.675202104558273e-16, 9.520424382239485e-12, -3.140044941195755e-12, -1.878473709261368e-14, 5.941306504911611e-13, -4.628409993076914e-12, 3.327625686772680e-12, 3.047729690332622e-21, 4.402041880050216e-20, -2.705719564866537e-20, -5.356400380260516e-20, -1.267970065508014e-20, -1.267970065508014e-20, -1.049341827136977e-20, -1.980215771921570e-21, 4.900182704364442e-20, -2.864437907255642e-20, -4.012375811157169e-21, -4.012375811157169e-21, -7.053439247532053e-18, -7.095551201549342e-18, 5.215246273606035e-18, 5.712516926998322e-18, 5.393805213716188e-18, 5.393805213716188e-18, 1.421237051625768e-15, -1.536080233923362e-16, 1.239265462963130e-15, -8.691852745604672e-21, 7.119960537896148e-16, 7.119960537896148e-16, 3.308940701707431e-13, -4.403181845234072e-13, 1.453615073964187e-11, 4.396495336182049e-15, -2.262196731093888e-13, 5.424289581244311e-13, -9.710316591359652e-18, 2.900313139857234e-17, 5.112159034210898e-17, 2.115395717263315e-17, 6.145843833616600e-17, 1.385265648077503e-17, 1.627648744635347e-17, 1.410237844578461e-16, 1.837428302242115e-17, -1.319693269327979e-17, 1.321370657908322e-17, 1.334312576320262e-17, 8.259844575742033e-19, 3.662020551635124e-16, 1.543144601565083e-16, -3.358173611091050e-17, 4.960833131543117e-17, 2.200868083251507e-17, 2.834568297358135e-17, 1.807748148211299e-14, -7.494027287159522e-15, 2.854047803120341e-18, 5.860403059886266e-15, -7.237003960266568e-15, -7.374201876832155e-14, 3.227394387933472e-12, -9.301466369816084e-12, -6.055397485605445e-15, -3.680418086461633e-13, 1.009565447038152e-15]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_ccalda_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_ccalda", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_ccalda_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_ccalda", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.042910976327129e-20, 4.913463559953585e-20, -6.099336281135650e-19, -3.571261486147354e-19, -1.988696659119430e-19, -1.988696659119430e-19, -1.646263597632674e-19, 7.320319124899013e-19, 3.306966513523717e-19, -4.196236535189865e-19, -3.121506670253794e-19, -3.121506670253794e-19, -4.214871671168353e-19, 1.420927863445523e-19, 2.108723063662555e-18, 6.708684742459466e-19, 7.140180366140876e-19, 7.140180366140876e-19, 5.935239796108075e-17, 3.559775397412103e-17, -3.733069213594486e-19, -4.840099942033181e-18, 3.912473915335845e-17, 3.912473915335845e-17, -6.305838971808759e-17, 8.841644590873638e-17, 2.225515717562870e-17, -9.241479004073018e-19, 4.658310031343890e-17, -2.169501384263110e-17, -4.968688996255993e-17, 6.189670703109366e-17, 7.710176054944815e-17, 1.848295815256817e-17, 9.652870355275003e-17, 9.652870355275003e-17, 4.561688453314858e-18, -4.669451450386848e-18, -5.049214156453877e-18, -8.457117715472992e-18, 6.906869813920612e-19, 6.906869813920612e-19, 6.063815058859656e-18, 4.118564925153897e-18, 5.689100605209110e-19, 4.136690987484411e-18, -4.865025777304320e-18, -4.865025777304320e-18, 2.403734495794884e-19, -1.102144702274548e-17, 2.761434984301054e-17, 1.145350511633435e-19, -5.176555573167621e-17, -5.176555573167621e-17, 5.979865100139380e-20, 1.580268418186163e-19, 6.256486127013208e-18, 3.970751469489859e-18, -1.248541293566218e-18, 2.144145277309097e-18, -1.631606266702567e-16, -1.354013877256601e-16, 5.889889129207203e-17, 8.249752836979523e-17, 8.785674526277789e-17, -1.094872533651994e-16, -5.315310540064644e-17, -6.796955108865896e-17, 1.246827711555748e-16, 2.370544997616283e-17, -1.777413606115220e-16, -1.796179073024871e-16, 2.249357059486206e-18, -3.167923666403535e-17, -7.742696942297085e-17, -3.171497349481428e-17, 5.908036249092785e-19, -3.097662468712386e-17, 2.190067770367571e-17, 2.705603289793889e-17, 4.946669355669771e-18, 2.706595572255501e-17, -2.333188982244948e-18, -2.346303458610642e-17, -1.599937880244056e-18, -5.688856344428186e-19, 4.105597619456549e-18, -7.835635291588487e-18, -8.719228501605492e-19, 2.649949325801248e-18]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
