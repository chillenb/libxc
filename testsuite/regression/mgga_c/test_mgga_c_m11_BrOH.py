
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m11_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-3.472739990619735e-01, -3.472895646925001e-01, -3.473599931682456e-01, -3.471068045462153e-01, -3.472821771050137e-01, -3.472821771050137e-01, -6.416985727571496e-02, -6.418370313993420e-02, -6.458318909704001e-02, -6.435519838545964e-02, -6.417425506728940e-02, -6.417425506728940e-02, 8.956530859454914e-03, 9.347752978530568e-03, 1.744586511753059e-02, 1.921588366840975e-02, 9.098813083636336e-03, 9.098813083636336e-03, 1.667397902881766e-02, 1.629866358593900e-02, -2.932423757342292e-02, -2.099585505167816e-02, 1.656440026772408e-02, 1.656440026772408e-02, -4.815780166986707e-02, -4.983985370025224e-02, -1.014203391939286e-01, -2.683278243011817e-02, -4.941902897137740e-02, -4.941902897137789e-02, -2.770621837427918e-01, -2.759664576324732e-01, -2.769532824582531e-01, -2.761015464449620e-01, -2.765117671912966e-01, -2.765117671912966e-01, -2.592141452374925e-02, -3.187101021472876e-02, -2.278840150712142e-02, -2.781089005683710e-02, -3.365095536499829e-02, -3.365095536499829e-02, -4.566260657477417e-02, -5.664474668191214e-02, -4.558613022481453e-02, -5.413378892478269e-02, -5.144373083184622e-02, -5.144373083184622e-02, -5.175100260082940e-02, 5.529735444494836e-03, -4.730183030587280e-02, -7.980947724509614e-02, -2.146676050989648e-02, -2.146676050989648e-02, -2.599882089613391e-02, -2.912215307085552e-02, -2.270086245043087e-02, -9.886815668822388e-02, -2.690637437719982e-02, -2.690637437719994e-02, -2.723903260039060e-01, -1.041616847601257e-01, -1.524036260717256e-01, -2.028453139552238e-01, -1.764461575590833e-01, -1.764461575590833e-01, -2.136448389245141e-01, -3.762874867856487e-02, -5.482533867538673e-02, -8.012422316665181e-02, -7.101974394991839e-02, -7.101974394991839e-02, -5.871559389430431e-02, 2.113013605051944e-02, 1.830108051828484e-02, -2.491955968160431e-02, -4.778787702110606e-03, -4.778787702110551e-03, -3.760469503820191e-02, -1.025916529529183e-01, -1.001384426251493e-01, -3.535576730880392e-02, -5.667553420259996e-02, -5.667553420259906e-02, -5.494095069161222e-02, -9.273994112829316e-03, -1.653049371628966e-02, -5.549992427300151e-02, -2.339953510771008e-02, -2.339953510771005e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m11_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.255462757858227e+00, -1.255430065933204e+00, -1.255302471352407e+00, -1.255834537237911e+00, -1.255445395198885e+00, -1.255445395198885e+00, -1.868956311361731e-01, -1.867203749177333e-01, -1.814588646749699e-01, -1.834090807744101e-01, -1.868476629750828e-01, -1.868476629750828e-01, -7.678199095944267e-02, -7.447755884877488e-02, -1.371331876258745e-02, -3.794436886889477e-02, -7.598519720806665e-02, -7.598519720806665e-02, -1.333875018875174e-03, -1.424225501372657e-02, 1.269124311348308e-02, 2.741645573579996e-02, -4.967023245532025e-03, -4.967023245532025e-03, -5.852440773770225e-02, -6.025614816455040e-02, -6.323850336095005e-02, -3.431641505461132e-02, -5.975679222523290e-02, -5.975679222523062e-02, 1.648183564327552e-02, 3.386993686317796e-02, 1.840625648843797e-02, 3.191740344437666e-02, 2.522618806034184e-02, 2.522618806034184e-02, -3.089242518234409e-01, -2.869477671719420e-01, -3.177003339076205e-01, -3.022394519819455e-01, -2.799622724232956e-01, -2.799622724232956e-01, -8.473877474011607e-02, -1.392484274742170e-02, -7.239203755402165e-02, -7.903677061575752e-02, -1.402130165000351e-01, -1.402130165000351e-01, 6.029888207363000e-02, 3.950358179180070e-02, 5.940408157092530e-02, -1.433546827749423e-01, 4.407891623816147e-02, 4.407891623816147e-02, -3.324007667197574e-02, -3.710724346547468e-02, -2.902970840460391e-02, -2.309017277340497e-02, -3.435691016627040e-02, -3.435691016627363e-02, -5.790476176231021e-01, -4.695880757350561e-01, -6.203260379709949e-01, -6.721606386965313e-01, -6.563578448711856e-01, -6.563578448711856e-01, -6.375585228366819e-01, -6.259074899679651e-02, -1.912335945587949e-01, -5.911296454030142e-02, -1.800369587434264e-01, -1.800369587434264e-01, -5.905145838511885e-02, 3.411105906395698e-02, -7.777070722632573e-02, -1.464517379839751e-01, -1.646400599647505e-01, -1.646400599647507e-01, -8.620760142671642e-02, -7.480755653770745e-02, -3.536170527636676e-02, -8.786678886203300e-02, 4.988644380891975e-02, 4.988644380892580e-02, -6.695754091908530e-02, -1.210166706013938e-02, -2.136427740810384e-02, 4.751032202157131e-02, -2.998513632796623e-02, -2.998513632796593e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m11_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.364047787370357e-10, -4.364485975171136e-10, -4.366191917184543e-10, -4.359060423114265e-10, -4.364280463994319e-10, -4.364280463994319e-10, 5.445619304162631e-07, 5.446382127030020e-07, 5.467935177844770e-07, 5.422196468628674e-07, 5.445928240578178e-07, 5.445928240578178e-07, 3.579496898183445e-03, 3.570716262215038e-03, 3.140378490249872e-03, 2.961704711716767e-03, 3.576217285879309e-03, 3.576217285879309e-03, 4.921850107431062e-01, 4.984492019747199e-01, 2.650233709341005e-03, 7.631423290888857e-01, 4.952623101324568e-01, 4.952623101324568e-01, 3.317073337082608e-01, 3.571977802730392e-01, 6.810829292370210e-01, 6.246681780707293e-02, 3.722988171720232e-01, 3.722988171720215e-01, -1.084373529323610e-06, -1.089983176461811e-06, -1.084938553405543e-06, -1.089301540641479e-06, -1.087355448037950e-06, -1.087355448037950e-06, 4.246780275549029e-06, 3.846747988739898e-06, 4.302521043269789e-06, 3.964299507264690e-06, 3.919572719182623e-06, 3.919572719182623e-06, 4.474846453177810e-03, -1.728663983391465e-02, 4.570107928182541e-03, 4.974061382051326e-03, 2.121171929791563e-03, 2.121171929791563e-03, 7.043208397065718e-01, 2.052163630369987e-01, 8.458890384721666e-01, 1.815638130946002e-05, 8.132509897315534e-01, 8.132509897315534e-01, 6.436772997978840e-02, 8.016142390505722e-02, 2.426164354936262e-01, 1.032843644441217e+00, 1.238372430392958e-01, 1.238372430169803e-01, 1.676139355559664e-02, 2.748951823421345e-02, 4.563162828355956e-02, 4.962380032623240e-02, 4.946354829484613e-02, 4.946354829484613e-02, 6.148621795396714e-02, 5.737459721297552e-03, -8.016068562061146e-04, -3.221833959520134e-02, -1.326293356770358e-02, -1.326293356770358e-02, -4.765925409265631e-03, 1.219037949648311e-01, 8.526160809326648e-02, 2.340090753502567e-02, 4.688869799963129e-02, 4.688869799963135e-02, 6.189284929647925e-03, 4.767780987865551e-01, 7.035526992997049e-01, 3.086259324843771e-02, 1.248457306973189e+00, 1.248457306973200e+00, 2.745199119138746e-01, 2.015341851834392e-02, 4.897166904837205e-02, 1.616360909057585e+00, 1.675416704018536e-01, 1.675416704510027e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m11_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([6.168966780960195e-04, 6.168898371423752e-04, 6.168646829726724e-04, 6.169763529092091e-04, 6.168930246254798e-04, 6.168930246254798e-04, 6.386702552293032e-04, 6.373860639132615e-04, 5.985624490400010e-04, 6.135859292024068e-04, 6.383078999701596e-04, 6.383078999701596e-04, -1.231550240381408e-03, -1.439938261998632e-03, -6.113530851947551e-03, -3.760604608375044e-03, -1.303148437952673e-03, -1.303148437952673e-03, -4.211700693616055e-02, -3.041409630403328e-02, -7.623720077326664e-03, -6.019709159734790e-02, -3.899221571648617e-02, -3.899221571648617e-02, -3.057451150780340e-03, -3.448621085337925e-03, -4.453749241537083e-02, -1.376139173827913e-04, -3.502435768908935e-03, -3.502435768912069e-03, -9.070772493025451e-04, -1.155954261294750e-03, -9.345165396774058e-04, -1.127892920399740e-03, -1.031564307123070e-03, -1.031564307123070e-03, 4.707985984100958e-03, 4.329152237579742e-03, 4.861890698369087e-03, 4.608579559673697e-03, 4.190386077156762e-03, 4.190386077156762e-03, 1.919354694743925e-03, -4.766968684645467e-03, -1.164221122849136e-03, 3.118465150758894e-03, 3.234743512724657e-02, 3.234743512724657e-02, -8.566593146379191e-02, -4.862015483914814e-02, -8.973270483703279e-02, 2.114908267043517e-03, -7.510888904248730e-02, -7.510888904248730e-02, -1.892430201104490e-04, -2.292378825611163e-04, -3.946329577234092e-04, -6.304575940104011e-02, -2.166143526658209e-04, -2.166143526611161e-04, 1.191300786897583e+00, 7.057710320292381e-01, 1.091836325400600e+00, 1.325499911696624e+00, 1.225556650260631e+00, 1.225556650260631e+00, 1.346509435112766e+00, -5.958310533061975e-03, 9.288582224592348e-02, 7.065636530281615e-02, 1.241446585642591e-01, 1.241446585642592e-01, 4.678102674825200e-03, -4.016514902117812e-02, 2.096389782816993e-02, 5.643486630514460e-02, 7.311021038804495e-02, 7.311021038804501e-02, 1.027237653163198e-02, -3.568625769636869e-02, -5.865979229403370e-02, 2.522913398877812e-02, -1.047631298550463e-01, -1.047631298550433e-01, -1.868627128415199e-03, -6.040421310232051e-06, -7.642091857276149e-05, -1.117786704240702e-01, -1.912187624147796e-04, -1.912187624120802e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
