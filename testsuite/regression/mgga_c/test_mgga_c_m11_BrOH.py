
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m11_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-9.004032835491237e-02, -9.003563453642879e-02, -9.001516163320075e-02, -9.009152508625172e-02, -9.003785534871629e-02, -9.003785534871629e-02, -9.918554085356195e-02, -9.919648293494968e-02, -9.952714785486431e-02, -9.940101459804614e-02, -9.918869958320216e-02, -5.439797930325319e-02, -7.736001990227148e-02, 4.339940262506188e-02, 4.595173028682917e-02, 4.562985437890538e-02, 4.323533814686050e-02, 4.323533814686050e-02, 1.956845378110682e-02, 1.963358322116947e-02, -1.300580136177204e-01, -1.524391385539609e-02, 1.962802309308387e-02, 1.962802309308387e-02, -4.815774646246369e-02, -4.983976785924445e-02, -1.013405462163608e-01, -2.683276449846405e-02, -4.941895501882829e-02, -4.941895501882879e-02, -2.777220387397640e-01, -2.766224093568353e-01, -2.776043712700266e-01, -3.323210958207207e-02, -2.771809735746832e-01, -2.771809735746832e-01, -7.789677887011734e-02, -7.888661045502980e-02, -7.756383819451751e-02, -7.821727071240887e-02, -7.917828817075705e-02, -3.196767448911653e-02, -3.901790846327351e-02, -9.033201738839217e-02, -3.803478244739915e-02, -4.519921293323792e-02, -4.844483271730680e-02, -5.990286980078530e-02, -2.573963379760458e-01, 7.033692282242628e-03, -2.457164468363804e-01, -6.935478158799584e-02, -1.962259834244717e-02, -1.962259834244717e-02, -6.068662195801259e-02, -2.912212836485618e-02, -2.270085311539108e-02, -3.049031034709292e-01, -6.281879398520930e-02, -2.690634536239177e-02, -2.686754618843633e-01, -9.830977975766057e-02, -1.777076132400174e-01, -1.920016959652768e-01, -1.656917652958697e-01, -1.656917652958697e-01, -1.912845445016513e-01, -3.687307574806792e-02, -5.498132879311775e-02, -8.847524186942353e-02, -7.416217175599320e-02, -4.181928133323121e-02, -7.271423899203540e-02, -6.946356513148717e-02, 2.178526169197762e-02, -4.315117487127431e-02, -9.915041305833608e-04, -9.915041305833100e-04, -5.331170576083599e-02, -1.025619536387433e-01, -9.993208493823275e-02, -3.118457127212673e-02, -2.521003315040357e-01, -5.572642382926761e-02, -5.493987504865713e-02, -9.273993969294446e-03, -1.653049306303653e-02, -5.447636728049004e-02, -2.339951448809522e-02, -2.339951448809519e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m11_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [1.969211420889644e-01, 1.969248941318825e-01, 1.969413364612697e-01, 1.968801683889871e-01, 1.969231184831772e-01, 1.969231184831772e-01, -1.863929927285065e-01, -1.864120854236250e-01, -1.869471261877068e-01, -1.867530483879949e-01, -1.863985217500181e-01, -1.726655681471173e-01, 6.070870590228360e-02, -5.290095228567479e-02, 3.314852366565989e-02, -2.205317284823444e-03, -5.531814616327086e-02, -5.531814616327086e-02, 4.266186521409240e-03, -8.711012781459592e-03, 9.033860672988080e-02, 4.752083902995990e-02, 7.217015396423112e-04, 7.217015396423112e-04, -5.852405045220892e-02, -6.025559309824734e-02, -6.275436666356889e-02, -3.431629785647260e-02, -5.975631399022620e-02, -5.975631399022398e-02, 1.605067277035233e-02, 3.351280066741753e-02, 1.798860759108529e-02, -3.140901672556150e-02, 2.482538287426508e-02, 2.482538287426508e-02, -1.135334647626467e-01, -1.268451781721345e-01, -1.071586618162889e-01, -1.184470945735025e-01, -1.299831888927161e-01, -2.824167680538774e-01, -8.845038420999946e-02, -1.910018494154673e-01, -4.907669440761290e-02, -1.607411879207940e-01, -1.833808211819056e-01, -1.028466056700154e-02, -2.839162796983953e-03, 4.415175359469127e-02, 9.712264218066825e-03, -3.474237920850445e-01, 5.124347157534084e-02, 5.124347157534084e-02, -7.782265401966831e-02, -3.710708214630335e-02, -2.902964732708276e-02, -2.103486905466994e-01, -8.047810364736478e-02, -3.435672057421953e-02, -6.554965408434373e-01, -4.356428394999354e-01, -6.391569769711388e-01, -6.938541357528547e-01, -6.606252516516224e-01, -6.606252516516224e-01, -6.860508353043602e-01, -6.155204900484103e-02, -2.060042566931445e-01, -8.434433204652102e-02, -2.079958597070659e-01, 5.746823582620959e-02, -2.588921457343005e-01, 4.884274588392715e-02, -7.552746736034438e-02, -6.899760550620757e-02, -1.726602224158691e-01, -1.726602224158694e-01, -1.007248347177737e-01, -7.462521683674413e-02, -3.414623993238590e-02, -8.206165585260618e-02, -3.894177894986334e-02, 5.465900409463267e-02, -6.695058828684111e-02, -1.210166611444674e-02, -2.136427312078816e-02, 5.265341801725412e-02, -2.998500141851172e-02, -2.998500141851142e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m11_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.847642141764967e-08, -1.847780520748988e-08, -1.848370131217164e-08, -1.846120586514903e-08, -1.847715143319506e-08, -1.847715143319506e-08, 5.861112182229715e-06, 5.860923128033200e-06, 5.856516617370937e-06, 5.855866207099843e-06, 5.860947729531766e-06, 1.983014879337735e-07, 1.812575244334464e-02, 8.403195083882917e-04, 8.098363989810612e-04, 8.470708842484295e-04, 8.404552323356526e-04, 8.404552323356526e-04, 3.984033030626091e-01, 3.945167677731556e-01, 1.093087603162137e-02, 2.941981251629920e-01, 3.971456922324815e-01, 3.971456922324815e-01, 3.122319852167517e-01, 3.308728017452175e-01, 4.490452259820413e-01, 2.087709180596451e-02, 3.484059046607466e-01, 3.484059046581869e-01, -1.077747280333239e-06, -1.083361956389450e-06, -1.078396783607765e-06, -8.834627842449488e-06, -1.080617604291349e-06, -1.080617604291349e-06, 8.145883978302177e-05, 7.189262873512722e-05, 8.620207746238655e-05, 7.780190463574382e-05, 6.984422062754620e-05, 3.204982731200856e-06, 2.929709932315923e-03, -9.833254984064533e-03, 2.457735205099737e-03, 2.368244310252041e-03, 1.497547992627228e-03, 4.737493869219489e-03, 1.435319175408852e+02, 1.705887055838215e-01, 1.472426050519680e+02, 4.974269316238510e-06, 5.351122502128972e-01, 5.351122502128972e-01, 3.894104904567494e+07, 3.464948772361739e-02, 1.687920550482785e-01, 1.249673462575711e+03, 3.311762067899720e+07, 4.077889829771519e-02, 1.535351834851437e-02, 2.549621782936734e-02, 5.566174338433056e-02, 4.568234149565070e-02, 4.561271754170775e-02, 4.561271754170775e-02, 5.188523369872210e-02, 5.430687885341971e-03, -7.418782514138377e-04, -2.904552075077631e-02, -1.207113379872958e-02, -2.817545153877539e-02, -2.378580772219311e-03, 1.495854555799461e+00, 6.797966245842531e-02, 7.385726927891499e-02, 3.492481332289123e-02, 3.492481332289130e-02, 2.067354787094534e-02, 3.749692131315859e-01, 4.225715747389360e-01, 1.920821500022543e-02, 3.526123975337489e+02, 7.687367718807343e-01, 9.662748937894375e-02, 4.497050729733752e-03, 3.768283799510884e-02, 9.595856750896895e-01, 5.211086692591557e-02, 5.211086695611036e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m11_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.714999236480352e-04, -1.715029943066859e-04, -1.715157693709806e-04, -1.714658391756846e-04, -1.715015457040654e-04, -1.715015457040654e-04, 5.924659632632558e-04, 5.926544386205182e-04, 5.979995498789119e-04, 5.959130041419317e-04, 5.925134322631595e-04, 6.510940329778507e-04, -1.377728959869185e-02, 3.402396556193731e-03, -3.827132564119812e-03, -1.009329157703014e-03, 3.621228758248567e-03, 3.621228758248567e-03, -3.935954062676569e-02, -2.662944407851378e-02, -1.024291472216154e-02, -5.564883446016693e-02, -3.592757908940825e-02, -3.592757908940825e-02, -3.057450424474065e-03, -3.448619852312176e-03, -4.452908340011271e-02, -1.376138986487667e-04, -3.502434680852592e-03, -3.502434680855726e-03, -9.090622605928213e-04, -1.158941277025341e-03, -9.365850679642832e-04, -6.467694673322199e-05, -1.034092443738788e-03, -1.034092443738788e-03, 5.403580490173493e-04, 7.959349851074988e-04, 4.197554163148603e-04, 6.337146155406921e-04, 8.579937498543126e-04, 4.313594530843594e-03, 5.060843912068609e-03, 1.183206582430798e-01, -7.615976087703560e-03, 4.458060340198931e-02, 5.341405566283008e-02, -2.707621446338855e-02, -1.813156302516006e-01, -4.773447051911103e-02, -1.956820802043836e-01, 1.214916044194060e-02, -7.343120184905448e-02, -7.343120184905448e-02, -2.406990694665700e-04, -2.292378429042005e-04, -3.946329246173881e-04, -9.681654628776432e-02, -2.755532072979554e-04, -2.166143050425045e-04, 1.518960312037478e+00, 6.182856904312886e-01, 1.222674405177602e+00, 1.364792913469084e+00, 1.210139944029887e+00, 1.210139944029887e+00, 1.437972237204527e+00, -6.157783915484031e-03, 1.031578186411965e-01, 9.703643437782278e-02, 1.467751438093299e-01, -8.614518075001643e-02, 1.041354744279599e-01, -7.560293707096284e-02, 2.478903987467180e-02, 1.215280554803457e-02, 8.245726442290480e-02, 8.245726442290485e-02, 1.904879307532187e-02, -3.568383290785156e-02, -5.862940285889548e-02, 2.301154675456711e-02, -2.056548768652050e-01, -1.042731336775205e-01, -1.868619568150260e-03, -6.040421291234665e-06, -7.642091795833126e-05, -1.112018452690452e-01, -1.912187280818092e-04, -1.912187280791097e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
