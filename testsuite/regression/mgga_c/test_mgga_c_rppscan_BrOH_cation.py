
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_rppscan_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rppscan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.731383013266422e-02, -2.731384640868716e-02, -2.731346374743898e-02, -2.731320707881361e-02, -2.731340666509133e-02, -2.731340666509133e-02, -4.827263809977884e-02, -4.826883781824343e-02, -4.814667474267359e-02, -4.799251847163927e-02, -4.809439866694602e-02, -4.809439866694602e-02, -4.140771178901436e-02, -4.125202333417295e-02, -3.753237305117307e-02, -3.747585835614704e-02, -3.746619575587878e-02, -3.746619575587878e-02, -1.548166670825184e-02, -1.604897418832450e-02, -4.874036229008320e-02, -1.513444898639855e-02, -1.246015261686435e-02, -1.246015261686435e-02, -6.319290446108716e-04, -6.901861312942174e-04, -4.431961364635226e-03, -3.248915489000223e-04, -3.886736741259402e-04, -3.886736741259402e-04, -2.644922427276845e-02, -2.645700606771902e-02, -2.644842342585586e-02, -2.645534090159011e-02, -2.645376663764470e-02, -2.645376663764470e-02, -2.540011895554291e-02, -2.499577193940630e-02, -2.480807194406921e-02, -2.445164509664020e-02, -2.545368096434297e-02, -2.545368096434297e-02, -2.909488156741707e-02, -3.288130418126833e-02, -3.539378879369005e-02, -4.372017020113107e-02, -2.874186398041476e-02, -2.874186398041474e-02, -1.074663740292649e-02, -1.507186276039064e-02, -1.012927946608020e-02, -5.535589731694203e-02, -1.248174010593854e-02, -1.248174010593854e-02, -2.401899805717472e-04, -3.225259744924791e-04, -2.852294304395399e-04, -7.331303050841495e-03, -3.140580857964027e-04, -3.140580857964000e-04, -2.490079547080368e-02, -2.450313841167056e-02, -2.463855856061137e-02, -2.475428675120449e-02, -2.469648163247949e-02, -2.469648163247949e-02, -2.596294614588975e-02, -2.175247643862343e-02, -2.288063664667853e-02, -2.406321121850650e-02, -2.352512384412056e-02, -2.352512384412057e-02, -3.623343105257962e-02, -1.584094994310955e-02, -1.918784404313855e-02, -2.770143754746716e-02, -2.224712450909593e-02, -2.224712450909592e-02, -2.493050182470031e-02, -4.149887803462375e-03, -5.724625749629319e-03, -2.714954906939032e-02, -9.296397843715715e-03, -9.296397843715720e-03, -9.741404669642745e-04, -6.672422802067299e-05, -1.667619546378279e-04, -8.566974492923641e-03, -2.950488119927128e-04, -2.950488119927060e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_rppscan_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rppscan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-4.171291945223912e-02, -4.171303171839637e-02, -4.171264232635519e-02, -4.171283163640550e-02, -4.171150184594787e-02, -4.171129255427561e-02, -4.171458375881629e-02, -4.171524783533351e-02, -4.171255686001615e-02, -4.171366800389298e-02, -4.171255686001615e-02, -4.171366800389298e-02, -6.900497620864787e-02, -6.900753143766541e-02, -6.899087694708247e-02, -6.899379486416901e-02, -6.861245893485811e-02, -6.860860090339865e-02, -6.860814191811049e-02, -6.860552097781480e-02, -6.870778912699502e-02, -6.863780449703635e-02, -6.870778912699502e-02, -6.863780449703635e-02, -7.464167211773401e-02, -7.422665181758979e-02, -7.439858823987780e-02, -7.388922278347225e-02, -6.761270575255185e-02, -6.830592871663681e-02, -7.051576647727177e-02, -7.031861098755086e-02, -6.700279089903613e-02, -7.310850346825355e-02, -6.700279089903613e-02, -7.310850346825355e-02, -4.881934017832865e-02, -4.686286505109956e-02, -4.980559196031770e-02, -4.747077930177766e-02, -8.977593466883059e-02, -8.569975859722224e-02, -3.189284399658279e-02, -3.133035366269214e-02, -2.895966024121808e-02, -5.652435155250218e-02, -2.895966024121816e-02, -5.652435155250220e-02, -4.498003077210960e-03, -4.428024270065408e-03, -2.395170597416859e-03, -2.310341146872423e-03, -8.940709555335621e-03, -8.413606336393768e-03, -6.310632280052143e-04, -6.399749540437265e-04, -7.285329723631792e-04, -1.042767599978786e-03, -7.285329723631787e-04, -1.042767599978786e-03, -3.786168240143340e-02, -3.788166942086071e-02, -3.781520003635939e-02, -3.783572017932502e-02, -3.785835546077511e-02, -3.787871334015185e-02, -3.781776456096494e-02, -3.783782128510785e-02, -3.783860715536966e-02, -3.785896413360738e-02, -3.783860715536966e-02, -3.785896413360738e-02, -5.521593159364283e-02, -5.522024896641830e-02, -5.345269688384690e-02, -5.347529055780367e-02, -5.455250736078743e-02, -5.440998776875478e-02, -5.287067315535158e-02, -5.272598837701949e-02, -5.436956922130274e-02, -5.474474857469205e-02, -5.436956922130274e-02, -5.474474857469205e-02, -4.066041977965487e-02, -4.094674106910474e-02, -2.706402937278686e-02, -2.700679352098928e-02, -4.866891457105572e-02, -4.362216220563542e-02, -3.288807777077387e-02, -2.702071631659426e-02, -3.660153125815874e-02, -4.200075413400438e-02, -3.660153125815874e-02, -4.200075413400436e-02, -2.208847265989399e-02, -2.183618978395040e-02, -5.729278301379935e-02, -5.704139036809247e-02, -2.099968069924511e-02, -1.971124489528905e-02, -3.030480524836094e-02, -3.041457141717100e-02, -2.509881465598784e-02, -2.330698344628301e-02, -2.509881465598836e-02, -2.330698344628301e-02, -4.740986813100342e-04, -4.593537739176655e-04, -6.290254342287804e-04, -6.211460703591499e-04, -5.731980085752199e-04, -5.471042736593250e-04, -1.431686912229688e-02, -1.421331584397179e-02, -7.252234303304884e-04, -5.648765776746535e-04, -7.252234303304849e-04, -5.648765776746511e-04, -2.637685901936888e-02, -2.606799594915333e-02, -2.885024733790874e-02, -2.854381772129245e-02, -2.804786374115595e-02, -2.773965321418925e-02, -2.733019301474696e-02, -2.702319722692757e-02, -2.769524082129336e-02, -2.738766135829291e-02, -2.769524082129336e-02, -2.738766135829291e-02, -2.486284839818331e-02, -2.458107566797112e-02, -3.916077124433331e-02, -3.886020117203710e-02, -3.682798279491263e-02, -3.650179603304194e-02, -3.335843066055722e-02, -3.308419329873673e-02, -3.531852767936636e-02, -3.503609846651794e-02, -3.531852767936636e-02, -3.503609846651794e-02, -2.703865554737184e-02, -2.680175971652322e-02, -4.999322468018588e-02, -4.969452190102527e-02, -5.246724869616655e-02, -5.181208117646739e-02, -4.908504676477794e-02, -4.851314122907883e-02, -5.032505113298252e-02, -5.035288069455548e-02, -5.032505113298250e-02, -5.035288069455547e-02, -4.601331754537451e-02, -4.540765615272108e-02, -9.331043791843196e-03, -9.268063783143904e-03, -1.135306169169307e-02, -1.092998164380476e-02, -4.348021268771291e-02, -4.195420473313753e-02, -2.018729598995075e-02, -1.893848506001940e-02, -2.018729598995074e-02, -1.893848506001938e-02, -1.892110921488115e-03, -1.830022954139840e-03, -1.311633679697815e-04, -1.309351743654875e-04, -3.475029102146776e-04, -3.314126770584219e-04, -2.143809606670486e-02, -2.107976168870240e-02, -6.693561879041100e-04, -5.348158686877556e-04, -6.693561879041012e-04, -5.348158686877499e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_rppscan_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rppscan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [8.498118881256215e-11, 1.699623776251243e-10, 8.498118881256215e-11, 8.498106488646455e-11, 1.699621297729291e-10, 8.498106488646455e-11, 8.497454143100470e-11, 1.699490828620094e-10, 8.497454143100470e-11, 8.497629202755856e-11, 1.699525840551172e-10, 8.497629202755856e-11, 8.497622703108041e-11, 1.699524540621609e-10, 8.497622703108041e-11, 8.497622703108041e-11, 1.699524540621609e-10, 8.497622703108041e-11, 1.379389247119737e-06, 2.758778494239474e-06, 1.379389247119737e-06, 1.379696757310393e-06, 2.759393514620787e-06, 1.379696757310393e-06, 1.386969644826894e-06, 2.773939289653788e-06, 1.386969644826894e-06, 1.377367286019953e-06, 2.754734572039905e-06, 1.377367286019953e-06, 1.381644802023112e-06, 2.763289604046225e-06, 1.381644802023112e-06, 1.381644802023112e-06, 2.763289604046225e-06, 1.381644802023112e-06, 1.354661571793899e-03, 2.709323143587797e-03, 1.354661571793899e-03, 1.349084331567423e-03, 2.698168663134846e-03, 1.349084331567423e-03, 1.190466946842203e-03, 2.380933893684406e-03, 1.190466946842203e-03, 1.005957766823299e-03, 2.011915533646598e-03, 1.005957766823299e-03, 1.057515462868157e-03, 2.115030925736314e-03, 1.057515462868157e-03, 1.057515462868157e-03, 2.115030925736314e-03, 1.057515462868157e-03, 5.568892876413202e-01, 1.113778575282640e+00, 5.568892876413202e-01, 5.657925838603810e-01, 1.131585167720762e+00, 5.657925838603810e-01, 8.539274690203427e-04, 1.707854938040686e-03, 8.539274690203427e-04, 3.544119340960271e-01, 7.088238681920542e-01, 3.544119340960271e-01, 5.088182643238741e-01, 1.017636528647748e+00, 5.088182643238741e-01, 5.088182643238757e-01, 1.017636528647751e+00, 5.088182643238757e-01, 1.345846294586545e+03, 2.691692589173089e+03, 1.345846294586545e+03, 4.189395584365637e+02, 8.378791168731273e+02, 4.189395584365637e+02, 2.603273398561425e+00, 5.206546797122851e+00, 2.603273398561425e+00, 1.737212772211823e+02, 3.474425544423646e+02, 1.737212772211823e+02, 1.430180928763450e+02, 2.860361857526899e+02, 1.430180928763450e+02, 1.430180928763442e+02, 2.860361857526884e+02, 1.430180928763442e+02, 1.031435489231502e-07, 2.062870978463003e-07, 1.031435489231502e-07, 1.034149522433325e-07, 2.068299044866649e-07, 1.034149522433325e-07, 1.031424240858580e-07, 2.062848481717161e-07, 1.031424240858580e-07, 1.033824821184963e-07, 2.067649642369926e-07, 1.033824821184963e-07, 1.032879197960340e-07, 2.065758395920680e-07, 1.032879197960340e-07, 1.032879197960340e-07, 2.065758395920680e-07, 1.032879197960340e-07, 8.378772110657499e-06, 1.675754422131500e-05, 8.378772110657499e-06, 7.717246150726439e-06, 1.543449230145288e-05, 7.717246150726439e-06, 7.941069660286958e-06, 1.588213932057392e-05, 7.941069660286958e-06, 7.335910121072382e-06, 1.467182024214476e-05, 7.335910121072382e-06, 8.213575809390724e-06, 1.642715161878145e-05, 8.213575809390724e-06, 8.213575809390724e-06, 1.642715161878145e-05, 8.213575809390724e-06, 6.255817874777509e-03, 1.251163574955502e-02, 6.255817874777509e-03, 6.606531592698577e-03, 1.321306318539715e-02, 6.606531592698577e-03, 1.032157293506334e-02, 2.064314587012669e-02, 1.032157293506334e-02, 1.442228182416008e-02, 2.884456364832015e-02, 1.442228182416008e-02, 5.828359004944510e-03, 1.165671800988902e-02, 5.828359004944510e-03, 5.828359004944513e-03, 1.165671800988903e-02, 5.828359004944513e-03, 5.065032960844954e-01, 1.013006592168991e+00, 5.065032960844954e-01, 4.685272819285837e-01, 9.370545638571675e-01, 4.685272819285837e-01, 5.562042959101751e-01, 1.112408591820350e+00, 5.562042959101751e-01, 6.181297260903960e-05, 1.236259452180792e-04, 6.181297260903960e-05, 3.139903629629793e-01, 6.279807259259587e-01, 3.139903629629793e-01, 3.139903629629603e-01, 6.279807259259207e-01, 3.139903629629603e-01, 2.951388792121641e+02, 5.902777584243280e+02, 2.951388792121641e+02, 1.865646950520861e+02, 3.731293901041721e+02, 1.865646950520861e+02, 9.764573857324565e+02, 1.952914771464913e+03, 9.764573857324565e+02, 1.185192316443769e+00, 2.370384632887537e+00, 1.185192316443769e+00, 4.004211037195155e+02, 8.008422074390310e+02, 4.004211037195155e+02, 4.004211037195155e+02, 8.008422074390310e+02, 4.004211037195155e+02, 5.721592546591030e-03, 1.144318509318206e-02, 5.721592546591030e-03, 5.191965247215936e-03, 1.038393049443187e-02, 5.191965247215936e-03, 5.360261800258701e-03, 1.072052360051740e-02, 5.360261800258701e-03, 5.513744095472320e-03, 1.102748819094464e-02, 5.513744095472320e-03, 5.435628394727176e-03, 1.087125678945435e-02, 5.435628394727176e-03, 5.435628394727176e-03, 1.087125678945435e-02, 5.435628394727176e-03, 7.524452434351049e-03, 1.504890486870210e-02, 7.524452434351049e-03, 6.256155697941248e-03, 1.251231139588250e-02, 6.256155697941248e-03, 6.295383399813078e-03, 1.259076679962615e-02, 6.295383399813078e-03, 6.552796877039028e-03, 1.310559375407806e-02, 6.552796877039028e-03, 6.464570295117673e-03, 1.292914059023535e-02, 6.464570295117673e-03, 6.464570295117673e-03, 1.292914059023535e-02, 6.464570295117673e-03, 5.932536452337414e-03, 1.186507290467483e-02, 5.932536452337414e-03, 1.644216060018419e-01, 3.288432120036838e-01, 1.644216060018419e-01, 1.054261245930304e-01, 2.108522491860608e-01, 1.054261245930304e-01, 5.555996511445183e-02, 1.111199302289037e-01, 5.555996511445183e-02, 7.533799589101443e-02, 1.506759917820289e-01, 7.533799589101443e-02, 7.533799589101443e-02, 1.506759917820289e-01, 7.533799589101443e-02, 1.441181437619344e-02, 2.882362875238689e-02, 1.441181437619344e-02, 4.813545825954206e+00, 9.627091651908412e+00, 4.813545825954206e+00, 1.485156516934701e+00, 2.970313033869403e+00, 1.485156516934701e+00, 7.671335711648056e-02, 1.534267142329611e-01, 7.671335711648056e-02, 1.252579314803591e+00, 2.505158629607183e+00, 1.252579314803591e+00, 1.252579314803585e+00, 2.505158629607169e+00, 1.252579314803585e+00, 3.164820528367229e+01, 6.329641056734457e+01, 3.164820528367229e+01, 4.385142195829964e+03, 8.770284391659929e+03, 4.385142195829964e+03, 1.096905545768599e+03, 2.193811091537198e+03, 1.096905545768599e+03, 2.363050598713810e+00, 4.726101197427621e+00, 2.363050598713810e+00, 5.449565062673248e+02, 1.089913012534649e+03, 5.449565062673248e+02, 5.449565062673287e+02, 1.089913012534657e+03, 5.449565062673287e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_rppscan_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rppscan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_rppscan_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rppscan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.128668459232303e-05, -1.128668459232302e-05, -1.128678257619077e-05, -1.128678257619077e-05, -1.128659238136843e-05, -1.128659238136843e-05, -1.128512830096978e-05, -1.128512830096978e-05, -1.128598465354832e-05, -1.128598465354832e-05, -1.128598465354832e-05, -1.128598465354832e-05, -4.977707016269956e-04, -4.977707016269954e-04, -4.979940478534253e-04, -4.979940478534245e-04, -5.039182781921982e-04, -5.039182781921985e-04, -5.022910132226273e-04, -5.022910132226279e-04, -5.022141669871828e-04, -5.022141669871826e-04, -5.022141669871828e-04, -5.022141669871826e-04, -6.802200461889914e-04, -6.802200461890429e-04, -6.984385944217584e-04, -6.984385944218365e-04, -9.564220421013108e-04, -9.564220421013865e-04, -3.029490190697936e-04, -3.029490190697936e-04, -4.627708452472148e-04, -4.627708452471118e-04, -4.627708452472148e-04, -4.627708452471118e-04, -4.037109144803300e-02, -4.037109144803300e-02, -4.276098925399061e-02, -4.276098925399063e-02, -3.881471635131297e-04, -3.881471635131297e-04, -6.925501313301424e-03, -6.925501313301426e-03, -2.068730928093244e-02, -2.068730928093235e-02, -2.068730928093241e-02, -2.068730928093246e-02, -4.432442290030502e-03, -4.432442290030507e-03, -1.436037407453977e-03, -1.436037407453978e-03, -4.808478229704727e-04, -4.808478229704727e-04, -8.884142498726826e-06, -8.884142498726826e-06, -4.353772972558583e-05, -4.353772972558588e-05, -4.353772972558461e-05, -4.353772972558463e-05, -2.058356208506932e-04, -2.058356208506932e-04, -2.065525002221672e-04, -2.065525002221672e-04, -2.058518308619230e-04, -2.058518308619230e-04, -2.064852075342596e-04, -2.064852075342596e-04, -2.062070474623092e-04, -2.062070474623091e-04, -2.062070474623092e-04, -2.062070474623091e-04, -8.267434686584205e-04, -8.267434686584209e-04, -7.799330987460306e-04, -7.799330987460300e-04, -7.741456396491430e-04, -7.741456396491430e-04, -7.300808668913415e-04, -7.300808668913416e-04, -8.260029618572196e-04, -8.260029618572196e-04, -8.260029618572196e-04, -8.260029618572196e-04, -1.550935590448234e-02, -1.550935590448234e-02, -1.947830569382262e-02, -1.947830569382264e-02, -1.784636690971717e-02, -1.784636690971718e-02, -2.370268054941566e-02, -2.370268054941569e-02, -1.520531776003034e-02, -1.520531776003034e-02, -1.520531776003035e-02, -1.520531776003035e-02, -2.736460487856742e-03, -2.736460487856744e-03, -3.479652459931604e-02, -3.479652459931607e-02, -2.075362390679533e-03, -2.075362390679534e-03, -3.405707956308199e-03, -3.405707956308199e-03, -1.275892182173858e-03, -1.275892182174501e-03, -1.275892182174807e-03, -1.275892182174455e-03, -3.747646031973689e-07, -3.747646031973688e-07, -1.639051109737151e-06, -1.639051109737151e-06, -1.702670618336913e-05, -1.702670618336912e-05, -9.365271717082563e-04, -9.365271717082566e-04, -4.026501816094015e-06, -4.026501816094013e-06, -4.026501816093969e-06, -4.026501816093969e-06, -1.591763745970340e-02, -1.591763745970341e-02, -1.419524468229351e-02, -1.419524468229351e-02, -1.474812809663061e-02, -1.474812809663062e-02, -1.524718629752816e-02, -1.524718629752816e-02, -1.499324408305682e-02, -1.499324408305682e-02, -1.499324408305683e-02, -1.499324408305682e-02, -1.854541181969544e-02, -1.854541181969545e-02, -9.931350443121007e-03, -9.931350443121009e-03, -1.148135696060118e-02, -1.148135696060119e-02, -1.359878822306300e-02, -1.359878822306300e-02, -1.255796286314332e-02, -1.255796286314332e-02, -1.255796286314332e-02, -1.255796286314332e-02, -1.911434805414637e-02, -1.911434805414638e-02, -2.415404951051975e-02, -2.415404951051975e-02, -2.616715990735462e-02, -2.616715990735462e-02, -2.815073696547806e-02, -2.815073696547807e-02, -2.738322499627227e-02, -2.738322499627226e-02, -2.738322499627228e-02, -2.738322499627226e-02, -1.732247160898263e-02, -1.732247160898264e-02, -1.720081330706958e-03, -1.720081330706960e-03, -5.934749349565795e-04, -5.934749349565793e-04, -3.542148240060650e-02, -3.542148240060650e-02, -3.825706597497296e-03, -3.825706597497298e-03, -3.825706597497256e-03, -3.825706597497258e-03, -4.393352393481641e-06, -4.393352393481641e-06, -2.739231759403271e-08, -2.739231759403271e-08, -2.834999508921670e-05, -2.834999508921669e-05, -8.424939962820607e-03, -8.424939962820606e-03, -8.316266965718049e-06, -8.316266965718049e-06, -8.316266965717653e-06, -8.316266965717658e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
