
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_rppscan_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rppscan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-9.298816375235150e-02, -9.298568721338819e-02, -9.297570311005131e-02, -4.904302322722114e-02, -3.682106217328430e-02, -2.649775654561661e-02, -4.405779919654305e-02, -2.343143711475510e-02, -2.345083374081598e-02, -2.344306413249203e-02, -2.344386286793691e-02, -4.414765195986767e-02, -8.150961507449257e-02, -4.647970994098662e-02, -1.848390790391669e-02, -3.568314273687066e-02, -8.200992690867873e-02, -1.854343098184297e-02, -2.389241180914086e-02, -3.057000974234916e-02, -3.276746098356813e-02, -1.054600010011522e-02, 2.272783600762021e+00, 1.183015775622241e+00, -7.807278492844306e-04, -7.971538029232525e-04, -5.022545674345904e-03, -3.764525995864948e-04, 1.638005215898761e+12, 1.638005215898769e+12, -3.357549936202067e-02, -2.639582289614431e-02, -2.638796212177496e-02, -2.639531952730434e-02, -4.062757524926882e-02, -3.354653401049051e-02, -4.379756076017129e-02, -4.366702466691168e-02, -2.222365143881064e-02, -2.234337394275367e-02, -6.137504332544568e-02, -4.367370685344551e-02, -3.249354774924115e-02, -2.307894138443844e-02, -2.100997467923626e-02, -2.183220488817654e-02, -3.003102755634677e-02, -2.204882119780499e-02, -7.527644307326342e-03, -2.220282857369511e-02, -1.201477644619376e-02, -2.439949179364315e-02, -1.598420115736330e-02, -1.598420115736330e-02, -2.478720254078897e-04, 9.218568830343505e-04, -3.286072043356872e-04, -8.555943578434444e-03, -3.463872459992632e-04, -3.463872459992607e-04, -2.382828131914581e-02, -2.356640437328794e-02, -2.837817993153868e-02, -2.538444326773003e-02, -2.795245481874260e-02, -2.551637854517882e-02, -2.509697107701084e-02, -4.521737094643576e-02, -3.092253907637821e-02, -2.264896316597506e-02, -2.225616948071769e-02, -2.961720103010971e-02, -3.727598996061577e-02, -2.601251323867359e-02, -2.931095748225821e-02, -3.380799181017491e-02, -3.313856970954901e-02, -3.306906407380368e-02, -2.034196138092380e-02, -1.805287463006499e-02, -3.789996892898725e-03, -3.217364631501462e-02, -6.493695539135192e-03, -6.493695539135216e-03, -6.334177164217780e-03, -2.456813551638035e-05, -1.766529314903254e-03, -2.900278300208124e-02, 1.134489633923667e+09, -4.277141043280958e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_rppscan_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rppscan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.749342615255358e-02, 3.749283525549694e-02, 3.749181324880711e-02, 3.749081686998671e-02, 3.748345214075675e-02, 3.748455358914880e-02, -3.580551859849627e-02, -3.580713231799968e-02, -4.338923402072201e-02, -4.339100743545890e-02, -4.100948997878281e-02, -4.101055402518777e-02, -6.610477145094493e-02, -6.610714038944045e-02, -4.627777272492652e-02, -4.627892292771425e-02, -4.623973810542467e-02, -4.623821701310969e-02, -4.625554785660779e-02, -4.625451126518560e-02, -4.626708611700636e-02, -4.623945379702089e-02, -6.603928218216795e-02, -6.597413362112108e-02, -6.664901070844766e-02, -6.583887899321079e-02, -7.450108029358851e-02, -7.385657904032203e-02, -4.589307254118118e-02, -4.629565794821295e-02, -6.861491569693978e-02, -6.843493553036875e-02, -6.352513008803402e-02, -7.660916381034619e-02, -4.371745504860262e-02, -4.755303905664264e-02, -4.401212427484236e-02, -4.150049883485511e-02, -5.147914333956412e-02, -4.797810434937826e-02, -6.363193979552882e-02, -6.071993568330682e-02, -4.110420331423631e-02, -4.064862984420133e-02, -5.428904301097038e+01, -4.226751719169707e+01, -2.950273054016504e+01, -2.340407988968505e+01, -1.541790828687645e-03, -1.460290138364733e-03, -1.580065099770757e-03, -1.485194680392147e-03, -9.728892075651006e-03, -9.143167443911046e-03, -7.229540907344960e-04, -7.332533972921536e-04, -2.169628897191284e+13, -2.159297691841905e+13, -2.169628897191293e+13, -2.159297691841915e+13, -3.685276145355940e-02, -3.688188984894406e-02, -3.779187329620864e-02, -3.781232237651048e-02, -3.783487467315098e-02, -3.785516288357003e-02, -3.779485065357022e-02, -3.781483923611253e-02, -2.960505913326593e-02, -2.964479505320552e-02, -3.682150314606002e-02, -3.685112126488657e-02, -7.036980456294069e-02, -7.037788566744450e-02, -6.889446400078852e-02, -6.893875403688915e-02, -4.666589726766580e-02, -4.654489650283622e-02, -4.647967822803366e-02, -4.635295006311786e-02, -9.751370603698160e-02, -9.826711130332591e-02, -6.864130957395577e-02, -6.935483687464571e-02, -3.910225744251224e-02, -3.943872739807361e-02, -3.412129287236372e-02, -3.408828955599504e-02, -4.058125937645192e-02, -3.818844857144550e-02, -3.839873432203342e-02, -3.614855297895880e-02, -3.584390814348843e-02, -4.161843421329823e-02, -3.519305577073532e-02, -3.874903041766378e-02, -4.667229577639991e-02, -4.644718590419351e-02, -4.153682621487616e-02, -4.125265173118653e-02, -2.348855119538552e-02, -2.204065839992114e-02, -4.100033147995123e-02, -4.103487651305162e-02, -3.143099919243819e-02, -2.923002214734809e-02, -3.143099919243820e-02, -2.923002214734809e-02, -4.891264761369768e-04, -4.739124727693747e-04, -3.780530759848206e+00, -3.780533743513675e+00, -6.545441902338522e-04, -6.245558144291279e-04, -1.614251732283726e-02, -1.602515811755474e-02, -7.979436302043479e-04, -6.212985544415334e-04, -7.979436302043446e-04, -6.212985544415315e-04, -2.762620474746381e-02, -2.733654532047249e-02, -2.953408718817621e-02, -2.924473004673884e-02, -2.209252835083574e-02, -2.171094823494180e-02, -2.653502404258596e-02, -2.621634557766604e-02, -2.248941273761802e-02, -2.211877260156602e-02, -2.669482609802133e-02, -2.637189512045256e-02, -2.619278490345045e-02, -2.592488137850575e-02, -3.864498183761511e-02, -3.788863188423255e-02, -3.547595873121030e-02, -3.495189214802851e-02, -3.322421578774646e-02, -3.297373290286391e-02, -3.469230333225726e-02, -3.443230190592599e-02, -3.293101351494340e-02, -3.252362198108708e-02, -2.551402818044474e-02, -2.526792929975692e-02, -4.690789891567465e-02, -4.649209619084703e-02, -5.419908496326092e-02, -5.350580098421951e-02, -5.057718057165148e-02, -4.991134102526778e-02, -5.541723773868534e-02, -5.545125936219743e-02, -5.529593390999241e-02, -5.533002254798295e-02, -3.906063807153131e-02, -3.862079043263144e-02, -2.240705324819514e-02, -2.219516762979129e-02, -8.424563379848164e-02, -8.385308248753233e-02, -4.278125327590710e-02, -4.092606676276258e-02, -4.558308322818615e-02, -4.446744483570721e-02, -4.558308322818654e-02, -4.446744483570760e-02, -8.215110100419315e-03, -7.893141641564337e-03, -1.029113886830342e-02, -1.029096101675240e-02, -2.365589654226849e-03, -2.230732018889826e-03, -3.525737188418912e-02, -3.438415330190028e-02, -5.483758197114619e+10, -5.528943894445598e+10, -9.655663342321457e-04, -7.709758260106192e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_rppscan_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rppscan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([4.391718624885398e-09, 8.783437249770796e-09, 4.391718624885398e-09, 4.391517084739583e-09, 8.783034169479166e-09, 4.391517084739583e-09, 4.390666635451769e-09, 8.781333270903538e-09, 4.390666635451769e-09, 4.445100731338268e-10, 8.890201462676536e-10, 4.445100731338268e-10, 2.159290883144338e-10, 4.318581766288677e-10, 2.159290883144338e-10, 7.601000406479231e-11, 1.520200081295846e-10, 7.601000406479231e-11, 1.256877098458554e-06, 2.513754196917107e-06, 1.256877098458554e-06, 3.367757339455155e-07, 6.735514678910310e-07, 3.367757339455155e-07, 3.381833128655851e-07, 6.763666257311699e-07, 3.381833128655851e-07, 3.374618094443185e-07, 6.749236188886372e-07, 3.374618094443185e-07, 3.377156520622653e-07, 6.754313041245307e-07, 3.377156520622653e-07, 1.265459260862758e-06, 2.530918521725516e-06, 1.265459260862758e-06, 1.109299267836136e-02, 2.218598535672271e-02, 1.109299267836136e-02, 2.140876978449131e-03, 4.281753956898261e-03, 2.140876978449131e-03, 6.963442211645877e-04, 1.392688442329175e-03, 6.963442211645877e-04, 7.792824936918252e-04, 1.558564987383650e-03, 7.792824936918252e-04, 1.225111678202920e-02, 2.450223356405839e-02, 1.225111678202920e-02, 6.883019788673358e-04, 1.376603957734672e-03, 6.883019788673358e-04, 3.335260191124003e-01, 6.670520382248004e-01, 3.335260191124003e-01, 5.815467086816508e-01, 1.163093417363302e+00, 5.815467086816508e-01, 2.834895238435863e-04, 5.669790476871727e-04, 2.834895238435863e-04, 7.219448612197519e-01, 1.443889722439504e+00, 7.219448612197519e-01, 6.308785736951036e+02, 1.261757147390207e+03, 6.308785736951036e+02, 3.672516245144001e+02, 7.345032490288002e+02, 3.672516245144001e+02, 1.533118411163158e+02, 3.066236822326316e+02, 1.533118411163158e+02, 1.142486881762319e+02, 2.284973763524637e+02, 1.142486881762319e+02, 3.372969558685918e+00, 6.745939117371837e+00, 3.372969558685918e+00, 3.291529233455357e+02, 6.583058466910715e+02, 3.291529233455357e+02, 1.539107421360131e+19, 3.078214842720263e+19, 1.539107421360131e+19, 1.539107421360138e+19, 3.078214842720275e+19, 1.539107421360138e+19, 2.307825047738200e-07, 4.615650095476400e-07, 2.307825047738200e-07, 1.025622606327377e-07, 2.051245212654754e-07, 1.025622606327377e-07, 1.023021027398282e-07, 2.046042054796564e-07, 1.023021027398282e-07, 1.025461938535363e-07, 2.050923877070726e-07, 1.025461938535363e-07, 4.016714165162928e-07, 8.033428330325855e-07, 4.016714165162928e-07, 2.304712539459558e-07, 4.609425078919114e-07, 2.304712539459558e-07, 1.662475449100537e-05, 3.324950898201073e-05, 1.662475449100537e-05, 1.696209753379319e-05, 3.392419506758637e-05, 1.696209753379319e-05, 5.086925228323827e-06, 1.017385045664766e-05, 5.086925228323827e-06, 5.052428053178046e-06, 1.010485610635609e-05, 5.052428053178046e-06, 2.352960622417831e-05, 4.705921244835662e-05, 2.352960622417831e-05, 1.696694165747171e-05, 3.393388331494342e-05, 1.696694165747171e-05, 7.668042333237703e-03, 1.533608466647540e-02, 7.668042333237703e-03, 2.359901362690655e-03, 4.719802725381309e-03, 2.359901362690655e-03, 3.213796698606914e-03, 6.427593397213828e-03, 3.213796698606914e-03, 3.217330229254009e-03, 6.434660458508019e-03, 3.217330229254009e-03, 6.393227220480280e-03, 1.278645444096056e-02, 6.393227220480280e-03, 2.562344963988498e-03, 5.124689927976997e-03, 2.562344963988498e-03, 2.628551487502172e+00, 5.257102975004344e+00, 2.628551487502172e+00, 1.867114958198945e-01, 3.734229916397889e-01, 1.867114958198945e-01, 7.053067753355086e-01, 1.410613550671017e+00, 7.053067753355086e-01, 9.412229413876292e-06, 1.882445882775258e-05, 9.412229413876292e-06, 6.414365580583726e-01, 1.282873116116745e+00, 6.414365580583726e-01, 6.414365580583731e-01, 1.282873116116746e+00, 6.414365580583731e-01, 3.442580883974654e+02, 6.885161767949307e+02, 3.442580883974654e+02, 6.601252877549283e+06, 1.320250575509857e+07, 6.601252877549283e+06, 1.829487705389805e+03, 3.658975410779611e+03, 1.829487705389805e+03, 1.725198721810488e+00, 3.450397443620977e+00, 1.725198721810488e+00, 6.359696234478413e+02, 1.271939246895683e+03, 6.359696234478413e+02, 6.359696234478417e+02, 1.271939246895683e+03, 6.359696234478417e+02, 4.892602825956592e-03, 9.785205651913185e-03, 4.892602825956592e-03, 4.523338537844214e-03, 9.046677075688429e-03, 4.523338537844214e-03, 8.572444420280774e-03, 1.714488884056155e-02, 8.572444420280774e-03, 6.026987068163260e-03, 1.205397413632652e-02, 6.026987068163260e-03, 8.243062596933467e-03, 1.648612519386693e-02, 8.243062596933467e-03, 6.099877081550222e-03, 1.219975416310044e-02, 6.099877081550222e-03, 6.683545406681971e-03, 1.336709081336395e-02, 6.683545406681971e-03, 2.389350947863461e-02, 4.778701895726921e-02, 2.389350947863461e-02, 1.422996947870084e-02, 2.845993895740168e-02, 1.422996947870084e-02, 5.263710299415797e-03, 1.052742059883159e-02, 5.263710299415797e-03, 5.269258649994194e-03, 1.053851729998839e-02, 5.269258649994194e-03, 1.256160083102562e-02, 2.512320166205124e-02, 1.256160083102562e-02, 6.256189360883321e-03, 1.251237872176664e-02, 6.256189360883321e-03, 1.159626317036327e-01, 2.319252634072654e-01, 1.159626317036327e-01, 4.991756586730976e-02, 9.983513173461954e-02, 4.991756586730976e-02, 5.863364799795341e-02, 1.172672959959068e-01, 5.863364799795341e-02, 6.356186757932995e-02, 1.271237351586599e-01, 6.356186757932995e-02, 6.385626625432980e-02, 1.277125325086596e-01, 6.385626625432980e-02, 7.231753157117431e-03, 1.446350631423486e-02, 7.231753157117431e-03, 1.375638691580616e+03, 2.751277383161231e+03, 1.375638691580616e+03, 4.738718682285009e+01, 9.477437364570018e+01, 4.738718682285009e+01, 9.163246200147601e-02, 1.832649240029520e-01, 9.163246200147601e-02, 6.992608704855736e+00, 1.398521740971147e+01, 6.992608704855736e+00, 6.992608704855805e+00, 1.398521740971161e+01, 6.992608704855805e+00, 2.745818156443072e+05, 5.491636312886144e+05, 2.745818156443072e+05, 1.037512997139368e+06, 2.075025994278737e+06, 1.037512997139368e+06, 9.964083382783109e+07, 1.992816676556622e+08, 9.964083382783109e+07, 9.223846854006239e+01, 1.844769370801247e+02, 9.223846854006239e+01, 2.914280687886754e+17, 5.828561375773508e+17, 2.914280687886754e+17, 3.287161882459887e+03, 6.574323764919774e+03, 3.287161882459887e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_rppscan_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rppscan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-7.935798095728134e-05, -7.935798095728134e-05, -7.935737300055822e-05, -7.935737300055826e-05, -7.935463401850623e-05, -7.935463401850622e-05, -3.544162573798423e-05, -3.544162573798422e-05, -2.294749869830113e-05, -2.294749869830113e-05, -1.034868477550434e-05, -1.034868477550434e-05, -5.100471099283039e-04, -5.100471099283037e-04, -1.896369096575841e-04, -1.896369096575840e-04, -1.905143551210258e-04, -1.905143551210258e-04, -1.901252799601861e-04, -1.901252799601861e-04, -1.902070537853698e-04, -1.902070537853698e-04, -5.128983150318651e-04, -5.128983150318655e-04, -2.458980613572447e-03, -2.458980613572448e-03, -1.729809489121249e-03, -1.729809489121507e-03, -2.574834926489539e-03, -2.574834926489539e-03, 2.257807718958216e-05, 2.257807718958216e-05, -2.091155293835395e-03, -2.091155293835396e-03, -2.591528529668891e-03, -2.591528529668892e-03, -8.534243082634322e-03, -8.534243082634322e-03, -7.195811697492130e-03, -7.195811697492133e-03, -5.207237671034274e-04, -5.207237671034274e-04, -2.342702026370852e-02, -2.342702026370853e-02, -3.312808676947982e+01, -3.312808676947980e+01, -1.924826222619382e+01, -1.924826222619383e+01, -8.395576962123352e-07, -8.395576962123361e-07, -1.629110143116797e-06, -1.629110143116798e-06, -3.234409971442941e-05, -3.234409971442941e-05, -2.853467126599153e-07, -2.853467126599153e-07, -3.022030799879280e+13, -3.022030799879284e+13, -3.022030799879294e+13, -3.022030799879296e+13, -3.725014609626379e-04, -3.725014609626379e-04, -2.053053155967924e-04, -2.053053155967924e-04, -2.046224382800050e-04, -2.046224382800050e-04, -2.052620030323414e-04, -2.052620030323414e-04, -5.312267833409562e-04, -5.312267833409561e-04, -3.723037210373599e-04, -3.723037210373598e-04, -1.089172337875394e-03, -1.089172337875396e-03, -1.169525042217497e-03, -1.169525042217498e-03, -4.998208857151004e-04, -4.998208857151004e-04, -5.064940829080566e-04, -5.064940829080569e-04, -4.680768050371673e-04, -4.680768050371721e-04, -1.165682916843318e-03, -1.165682916843319e-03, -1.798104333621488e-02, -1.798104333621488e-02, -8.403198715828812e-03, -8.403198715828820e-03, -6.876015733941777e-03, -6.876015733941777e-03, -7.804805355840902e-03, -7.804805355840909e-03, -1.634359725486076e-02, -1.634359725486076e-02, -7.356488894692060e-03, -7.356488894692060e-03, -2.997718275748543e-02, -2.997718275748546e-02, -3.045529898872338e-03, -3.045529898872340e-03, -2.739879516700085e-04, -2.739879516700086e-04, -9.126593604975412e-04, -9.126593604975412e-04, -1.091519398950435e-03, -1.091519398950435e-03, -1.091519398950436e-03, -1.091519398950435e-03, -2.328230630159994e-07, -2.328230630159993e-07, -4.137296074203675e+00, -4.137296074203675e+00, -7.404650493012293e-07, -7.404650493012289e-07, -1.096032635895612e-04, -1.096032635895612e-04, -6.245543326425085e-07, -6.245543326425083e-07, -6.245543326425000e-07, -6.245543326425000e-07, -1.414879921893146e-02, -1.414879921893146e-02, -1.275043788698366e-02, -1.275043788698366e-02, -2.122896439241432e-02, -2.122896439241435e-02, -1.633405246253360e-02, -1.633405246253361e-02, -2.069005114576421e-02, -2.069005114576420e-02, -1.640074433309138e-02, -1.640074433309137e-02, -1.692792680014053e-02, -1.692792680014054e-02, -2.338797741325849e-02, -2.338797741325849e-02, -2.303952887982902e-02, -2.303952887982902e-02, -1.128338127722105e-02, -1.128338127722105e-02, -1.049393894515892e-02, -1.049393894515893e-02, -2.212020900900829e-02, -2.212020900900830e-02, -1.976225734987254e-02, -1.976225734987255e-02, -5.657125558458096e-03, -5.657125558458094e-03, 1.060899734159703e-04, 1.060899734159703e-04, -2.373017002318471e-02, -2.373017002318474e-02, -1.073263863828475e-02, -1.073263863828477e-02, -1.097088012116598e-02, -1.097088012116606e-02, -8.978236190948456e-03, -8.978236190948457e-03, -2.761222357999062e-05, -2.761222357999064e-05, -7.082062308029097e-02, -7.082062308029095e-02, -3.770068646248994e-02, -3.770068646248994e-02, -3.998116310085950e-02, -3.998116310085952e-02, -3.998116310085994e-02, -3.998116310085995e-02, -5.650953055119700e-07, -5.650953055119702e-07, -1.239743576801629e-02, -1.239743576801629e-02, -4.100206599857102e-08, -4.100206599857100e-08, -3.324531959209556e-04, -3.324531959209555e-04, -1.281435025325621e+11, -1.281435025325621e+11, -1.359322790851334e-07, -1.359322790851335e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
