
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m08_so_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m08_so", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-6.143212147479837e-02, -6.142262153131004e-02, -6.137931957826577e-02, -6.153375767307512e-02, -6.142713351498769e-02, -6.142713351498769e-02, 5.292838321882057e-03, 5.269256222422674e-03, 4.568631569021129e-03, 5.074291630298639e-03, 5.284875982643875e-03, 5.284875982643875e-03, -1.142580042088207e-02, -1.088836226463960e-02, 4.421099547669696e-03, 6.198048569310559e-03, -1.122913997998806e-02, -1.122913997998806e-02, 1.431942653681352e-02, 1.280965548239444e-02, -6.216422311488431e-02, -3.648882413334793e-02, 1.384035486315542e-02, 1.384035486315542e-02, -3.310533408517065e-02, -3.427906025659660e-02, -7.433690697267602e-02, -1.836034211799186e-02, -3.398993487528790e-02, -3.398993487528867e-02, -5.821802209339067e-03, -5.329703326779344e-03, -5.755395430205479e-03, -5.373484676374858e-03, -5.582314953287208e-03, -5.582314953287208e-03, 3.866521653073659e-02, 3.654850241933680e-02, 4.033956643372595e-02, 3.871559378735756e-02, 3.497346740746861e-02, 3.497346740746861e-02, -4.271658555728208e-02, -8.748459888113484e-02, -2.731039583108498e-02, -5.583232428458021e-02, -5.282973376531365e-02, -5.282973376531365e-02, -5.641437143287719e-02, 6.514653145832090e-03, -5.347609667575657e-02, -8.325754216763871e-02, -3.606471049672021e-02, -3.606471049672021e-02, -1.779163738457120e-02, -1.993212933136146e-02, -1.553895539502107e-02, -7.679001140853559e-02, -1.841413908282111e-02, -1.841413908282087e-02, -2.574950604834439e-02, -6.125245191399177e-02, -4.017515262689893e-02, -2.428805476355811e-02, -3.165791834208719e-02, -3.165791834208719e-02, -3.358109912540632e-02, -2.895788206691623e-02, -5.234870345845619e-02, -7.102500419221755e-02, -5.946675193583949e-02, -5.946675193583949e-02, -7.059288993003154e-02, 2.375035321933200e-02, 1.596802184995506e-02, -2.418732545452958e-03, 6.106257789079124e-03, 6.106257789079117e-03, -8.382567865621166e-03, -7.418103172684433e-02, -7.628269809670701e-02, -1.412217577766440e-02, -5.651013426673347e-02, -5.651013426673318e-02, -3.773820755419159e-02, -6.341641093058019e-03, -1.130727413628387e-02, -5.517662312705364e-02, -1.601203690251811e-02, -1.601203690251810e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m08_so_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m08_so", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [4.719787073370346e-01, 4.720171236998548e-01, 4.721994367254972e-01, 4.715748048887988e-01, 4.719988118692413e-01, 4.719988118692413e-01, -2.167425518937126e-01, -2.168791136029225e-01, -2.209903931960612e-01, -2.193554046743762e-01, -2.167809334959757e-01, -2.167809334959757e-01, -1.149300063605079e-01, -1.157244434682709e-01, -1.070781557995599e-01, -1.117773070544632e-01, -1.152144417081425e-01, -1.152144417081425e-01, -5.286149859400745e-02, -6.224769767628208e-02, -1.343916778650678e-01, 1.949157524120026e-02, -5.591407913735882e-02, -5.591407913735882e-02, -4.052899747652265e-02, -4.178041071015135e-02, -5.600498406322088e-02, -2.350307874833328e-02, -4.143503930339758e-02, -4.143503930340860e-02, 1.798824098538220e-03, -8.756187152300240e-03, 6.657240489486720e-04, -7.536946258511834e-03, -3.501807609733058e-03, -3.501807609733058e-03, -1.060783518697397e-01, -1.140221866769856e-01, -1.033249412311239e-01, -1.082679512912933e-01, -1.170375976982077e-01, -1.170375976982077e-01, -1.654672476588933e-01, -2.949021374682543e-01, -1.760856588522021e-01, -1.108309538167959e-01, -1.374315098167478e-01, -1.374315098167478e-01, 7.776672773661753e-03, 7.148791904237325e-02, 8.831956755857157e-03, -1.787660408286222e-01, 2.506457344473344e-02, 2.506457344473344e-02, -2.277163541657245e-02, -2.543012013017023e-02, -1.989960144622768e-02, -3.724340523565806e-02, -2.354094351438354e-02, -2.354094351439033e-02, -1.343077461929721e-01, 1.003871332491207e-01, 1.274373788045097e-01, 7.958669860826222e-02, 1.135667436375634e-01, 1.135667436375634e-01, -4.832983636811737e-03, -1.911500235077105e-01, -1.225286493511098e-01, -1.904250588891080e-01, -1.338623904150368e-01, -1.338623904150368e-01, -2.048102828160137e-01, -1.171387007372869e-02, -8.000155720282671e-02, -6.548856033531689e-02, -5.526319040674191e-02, -5.526319040674166e-02, -1.462201059575322e-01, -6.172112203966539e-02, -4.319888763041713e-02, -1.204038585369131e-01, 2.017418884295362e-03, 2.017418884230100e-03, -4.627709138137274e-02, -8.276050647055716e-03, -1.462112147602499e-02, 1.180576792527080e-03, -2.053919787276134e-02, -2.053919787275372e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m08_so_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m08_so", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [3.436851598592028e-10, 3.437277672052766e-10, 3.438975262802902e-10, 3.432042821510800e-10, 3.437077500578072e-10, 3.437077500578072e-10, 1.639396473625139e-06, 1.639438072551712e-06, 1.639685399624554e-06, 1.628493489552764e-06, 1.639437402673483e-06, 1.639437402673483e-06, 6.478137957503740e-03, 6.458359978977132e-03, 5.588525341031153e-03, 5.311669119039035e-03, 6.470846806783215e-03, 6.470846806783215e-03, 8.740797383777226e-01, 8.907212152250743e-01, 4.453788351580190e-03, 7.353296356883990e-01, 8.812144675350377e-01, 8.812144675350377e-01, -1.104733440799470e-01, -1.177324778272779e-01, -8.032919301813686e-03, -2.282327471054697e-02, -1.226872174300490e-01, -1.226872174300489e-01, 1.264380708241997e-06, 1.282112682872167e-06, 1.266260127949331e-06, 1.280041556649437e-06, 1.273427497127908e-06, 1.273427497127908e-06, 1.100926454810488e-05, 1.051787044670990e-05, 1.088664175199670e-05, 1.047698878317183e-05, 1.085669951024771e-05, 1.085669951024771e-05, 5.236907339631081e-03, 1.346510481455842e-02, 1.006930966586405e-02, 5.335405708600270e-03, 2.678927829432344e-03, 2.678927829432344e-03, 4.429213656520909e-01, 2.981530676697647e-01, 5.568663879131324e-01, 2.706699795589200e-05, 7.317595485253646e-01, 7.317595485253646e-01, -2.346808546268473e-02, -2.913660376553152e-02, -8.798993276430112e-02, 1.779201279891857e-01, -4.508030250220232e-02, -4.508030249407815e-02, 1.624562249907712e-01, 1.260023958384587e-02, 1.281981305653440e-02, 3.908378779861008e-02, 2.148630608598137e-02, 2.148630608598137e-02, 4.954160433787392e-02, 7.941969674683911e-03, 3.952813224137311e-03, 2.870884395760617e-02, 9.871841598788024e-03, 9.871841598788029e-03, 4.128927856508775e-03, 2.120000223074418e-01, 1.553993701596855e-01, 6.277378910954619e-02, 9.688672052105364e-02, 9.688672052105367e-02, 1.759298482375523e-02, -3.155788718021785e-02, 7.989455872277591e-02, 9.060514316632781e-02, 6.848530755668996e-01, 6.848530755669058e-01, -9.287071499483510e-02, -7.456672617714358e-03, -1.800821767834209e-02, 8.840159376574271e-01, -6.114676118625011e-02, -6.114676120418616e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m08_so_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m08_so", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m08_so_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m08_so", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-3.913195565791511e-04, -3.913532098001928e-04, -3.915058903224611e-04, -3.909588230808509e-04, -3.913372295400615e-04, -3.913372295400615e-04, 9.410044093177391e-04, 9.421494758630495e-04, 9.768440821719872e-04, 9.649853193054065e-04, 9.413036872117212e-04, 9.413036872117212e-04, -7.369453277960874e-03, -7.273013774538731e-03, -6.399484059854163e-03, -5.671231450700765e-03, -7.334329400966175e-03, -7.334329400966175e-03, -4.024605487519316e-02, -3.509105383862916e-02, -6.663393727904058e-03, -6.525458452300403e-02, -3.867249934533230e-02, -3.867249934533230e-02, -1.744115510681155e-03, -1.966794131405011e-03, -2.485198500574290e-02, -7.867261206716073e-05, -1.997477637365594e-03, -1.997477637348876e-03, -4.358680638816035e-03, -4.259934494724952e-03, -4.348256586082997e-03, -4.271518330673370e-03, -4.309504248537081e-03, -4.309504248537081e-03, 1.091763927183048e-03, 1.290981077900391e-03, 1.049561977431151e-03, 1.183811270085957e-03, 1.319688893336597e-03, 1.319688893336597e-03, 3.532743946405879e-02, 1.087661218573059e-01, 3.344555536337235e-02, 1.772761599283541e-02, 2.849379870136466e-02, 2.849379870136466e-02, -5.279005438918969e-02, -8.029946515708347e-02, -5.664127364521745e-02, 3.355344847720427e-03, -7.140218940237654e-02, -7.140218940237654e-02, -1.081830092274032e-04, -1.310366276764569e-04, -2.255676220190274e-04, -3.472165315905213e-02, -1.238252848299930e-04, -1.238252848385148e-04, 7.588904840973189e-02, -4.347031242064904e-01, -5.243039036207907e-01, -4.790481895573446e-01, -5.233561824252957e-01, -5.233561824252957e-01, -1.713262108739370e-01, 6.012608485934863e-02, 3.207866286245092e-02, 2.118198189554856e-02, 2.404399165421625e-02, 2.404399165421631e-02, 5.520434523820081e-02, -3.697851236566493e-02, -9.672711247569184e-03, -4.052672137530100e-03, -1.643321460854876e-02, -1.643321460854902e-02, 3.513043735523993e-02, -1.999077873201216e-02, -3.251791960657479e-02, 4.380601352182154e-02, -6.142743958865301e-02, -6.142743958864219e-02, -1.066291922430942e-03, -3.454319593912508e-06, -4.369605369903626e-05, -6.536666633928967e-02, -1.093150234755108e-04, -1.093150234891468e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
