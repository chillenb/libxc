
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m08_so_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m08_so", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.640133019421127e-01, -2.640245304854596e-01, -2.640736872206933e-01, -2.638909996630739e-01, -2.640192166211267e-01, -2.640192166211267e-01, -1.001214129740467e-01, -1.001241643694581e-01, -1.002188194827874e-01, -1.001817312166453e-01, -1.001222969314238e-01, 3.471528974936960e-02, -1.676406372416965e-01, 5.070090866748594e-02, 5.514930010096254e-02, 5.357018259033331e-02, 5.053786312472599e-02, 5.053786312472599e-02, 1.945977351812855e-02, 1.876910663288721e-02, -2.314500173357790e-01, -3.094651221702052e-02, 1.929142332030409e-02, 1.929142332030409e-02, -3.310535247169952e-02, -3.427908854981426e-02, -7.433784807767534e-02, -1.836034866961530e-02, -3.398995924558416e-02, -3.398995924558493e-02, -5.052410569053298e-03, -4.558128092116988e-03, -4.995492669339564e-03, -2.907700993194332e-01, -4.798591644229697e-03, -4.798591644229697e-03, -9.607463317795327e-02, -9.200267736922453e-02, -9.825837417545512e-02, -9.450014426698070e-02, -9.113124021949959e-02, 3.963593343886956e-02, -3.494030347166123e-02, -6.124452936286825e-02, -1.067252636272248e-02, -4.624868948642021e-02, -4.904228424090792e-02, -6.351317836433461e-02, -1.857371284058499e-01, 8.699709630516883e-03, -1.840965750024167e-01, -6.767199011532708e-02, -3.440534175066345e-02, -3.440534175066345e-02, -5.144674689313965e-03, -1.993213831135306e-02, -1.553895878056880e-02, -1.122820864182592e-01, -5.340990006001229e-03, -1.841414964504188e-02, 1.025602053348681e-02, -5.857014208139542e-02, -4.728408994262741e-02, -1.574760317173911e-02, -2.698635368686424e-02, -2.698635368686424e-02, -1.556462492942984e-02, -2.791185616180904e-02, -5.157949870998360e-02, -6.358364949060429e-02, -5.712778602163650e-02, -8.120118497750167e-02, -5.846525663030937e-02, -1.337990214907823e-01, 2.231835433866226e-02, -5.132570614593165e-02, 1.393197060651380e-02, 1.393197060651377e-02, -5.302959969738742e-02, -7.418299752101243e-02, -7.625926437759591e-02, -1.876548489131606e-03, -1.637122570196586e-01, -5.598949078569627e-02, -3.773857144666708e-02, -6.341641146165264e-03, -1.130727437650286e-02, -5.461682197781129e-02, -1.601204442794544e-02, -1.601204442794543e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m08_so_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m08_so", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-9.667154376614114e-01, -9.667417024743964e-01, -9.668567263554819e-01, -9.664290036474165e-01, -9.667292728027445e-01, -9.667292728027445e-01, -1.281216650122406e-01, -1.282961579285241e-01, -1.334306913762010e-01, -1.314715937600298e-01, -1.281702763307041e-01, -1.984504780881634e-01, 1.063899943992559e-01, -6.598170372766055e-02, -1.239131151847821e-02, -3.919192482313997e-02, -6.698936349044285e-02, -6.698936349044285e-02, -4.170035888895889e-02, -5.119063102292357e-02, -1.014658876081456e-01, 4.432247905004117e-02, -4.457295183325635e-02, -4.457295183325635e-02, -4.052911306940350e-02, -4.178058789775663e-02, -5.597016687992564e-02, -2.350312141385867e-02, -4.143519192923410e-02, -4.143519192924509e-02, 3.734696353056904e-03, -6.887930814619017e-03, 2.569780824813160e-03, -4.683078308535402e-01, -1.567123950963632e-03, -1.567123950963632e-03, 9.562101821313633e-02, 5.146964890645738e-02, 1.149688826212465e-01, 7.997694330272163e-02, 4.015442801852593e-02, -1.142886864382478e-01, -1.971351103329481e-01, -1.208569649572444e-01, -1.913766451974964e-01, -1.579514328105198e-01, -1.508749328152279e-01, -8.920178745092021e-02, -2.174757425675284e-01, 8.039689224605816e-02, -2.032565124245906e-01, -2.186430083597445e-01, 3.320862617860042e-02, 3.320862617860042e-02, -6.860876040614881e-03, -2.543017847479401e-02, -1.989962347500154e-02, -2.123276663702152e-01, -7.141091064904659e-03, -2.354101221657047e-02, 3.272206598613847e-02, 8.045577436717805e-02, 7.976074687621425e-02, 1.530249106684299e-01, 1.573227113186407e-01, 1.573227113186407e-01, 1.473145572328355e-01, -1.940854886452053e-01, -1.201820579914880e-01, -1.549817851921745e-01, -1.142011586490369e-01, -2.999641400889386e-01, -1.095264123568782e-01, -4.622103226480309e-02, -7.450944825203384e-02, 3.500152368059798e-02, -6.086482571255363e-02, -6.086482571255333e-02, -8.893795706867173e-02, -6.172003613225154e-02, -4.292877904079993e-02, -1.230727337657066e-01, -2.209294908226164e-01, 5.481574879455869e-03, -4.627938640500179e-02, -8.276050996823913e-03, -1.462112304951300e-02, 4.905585565953669e-03, -2.053924691824306e-02, -2.053924691823543e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m08_so_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m08_so", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.455087606265028e-08, 1.455230870933314e-08, 1.455845111329519e-08, 1.453516191928615e-08, 1.455163158961713e-08, 1.455163158961713e-08, 1.764480053852434e-05, 1.764220778543903e-05, 1.756210430048796e-05, 1.758741139154247e-05, 1.764374501175668e-05, 5.969650387642960e-07, 3.280380686211435e-02, 1.519887183408427e-03, 1.441161074006392e-03, 1.519179221243632e-03, 1.520728921555507e-03, 1.520728921555507e-03, 7.075312073888944e-01, 7.049955209586153e-01, 1.836962837300407e-02, 2.834760855875889e-01, 7.066367105966156e-01, 7.066367105966156e-01, -1.039871839733042e-01, -1.090557583122203e-01, -5.296189213286126e-03, -7.627787330490305e-03, -1.148135556908722e-01, -1.148135556900291e-01, 1.256654494751100e-06, 1.274324351442669e-06, 1.258625057525159e-06, 1.038159807357651e-05, 1.265536650106582e-06, 1.265536650106582e-06, 2.111721960555253e-04, 1.965705466858983e-04, 2.181165707670022e-04, 2.056175827997719e-04, 1.934592799285639e-04, 8.877379485240639e-06, 3.428635956132033e-03, 7.659430074371136e-03, 5.415123066182578e-03, 2.540287150028674e-03, 1.891323818222433e-03, 5.983203902412721e-03, 9.026192233408507e+01, 2.478435205016317e-01, 9.693287640930617e+01, 7.415494041454909e-06, 4.814915734138072e-01, 4.814915734138072e-01, -1.419767121347070e+07, -1.259419238457411e-02, -6.121597469119694e-02, 2.152717534767322e+02, -1.205576223857506e+07, -1.484468666977819e-02, 1.488106954205692e-01, 1.168657996821905e-02, 1.563768753009848e-02, 3.597948825809344e-02, 1.981355653404794e-02, 1.981355653404794e-02, 4.180575427170771e-02, 7.517326585833550e-03, 3.658284781604284e-03, 2.588163553362155e-02, 8.984763451504459e-03, 2.097149873708358e-02, 2.060667670181971e-03, 2.601405471336334e+00, 1.239009791857491e-01, 1.981248222523899e-01, 7.216559153959751e-02, 7.216559153959756e-02, 5.876436746424085e-02, -2.481916882125740e-02, 4.798669598760784e-02, 5.639069458795816e-02, 1.934288690411679e+02, 4.216978342657873e-01, -3.268930098445361e-02, -1.663888188813020e-03, -1.385700676616368e-02, 5.248141213843385e-01, -1.901861624922754e-02, -1.901861626024707e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m08_so_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m08_so", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [4.024678572730560e-04, 4.024851745705658e-04, 4.025593209306848e-04, 4.022776049592634e-04, 4.024769906653494e-04, 4.024769906653494e-04, 1.461272774493702e-04, 1.474518398664153e-04, 1.865965635441046e-04, 1.715741905343368e-04, 1.464938961362200e-04, 1.163220093567355e-03, -2.750310866993711e-02, 4.871926018611521e-04, -3.288437151234060e-03, -1.493529119841298e-03, 5.647949152869870e-04, 5.647949152869870e-04, -3.663252340227307e-02, -2.959301589454401e-02, -6.820999242517696e-03, -6.412612677208020e-02, -3.451411197327746e-02, -3.451411197327746e-02, -1.744119742239747e-03, -1.966801277941151e-03, -2.488107960950173e-02, -7.867272663907039e-05, -1.997483943091540e-03, -1.997483943074823e-03, -4.377011136075772e-03, -4.277438730334279e-03, -4.366266124207728e-03, 2.239918610877155e-03, -4.327730694321792e-03, -4.327730694321792e-03, -3.858702441212124e-03, -3.002544277322806e-03, -4.224850768451032e-03, -3.556870979195095e-03, -2.781553807888373e-03, 1.471324031634188e-03, 5.054075142414585e-02, -1.110783729845242e-02, 4.350429282805109e-02, 4.179968233082929e-02, 3.558541005649467e-02, 8.490142799915504e-03, -1.805846093662241e-03, -8.032591552211127e-02, -9.985534431398385e-03, 5.655380996724245e-03, -7.114349718111973e-02, -7.114349718111973e-02, 2.061444746057164e-04, -1.310368695220107e-04, -2.255678236720674e-04, 4.711869809428440e-02, 2.359081085779258e-04, -1.238255754787868e-04, -8.465407433558065e-01, -3.934589273985403e-01, -3.696366316191773e-01, -7.499148985447207e-01, -6.683612858164408e-01, -6.683612858164408e-01, -7.779314141528889e-01, 6.213951735458470e-02, 3.064642264926237e-02, -1.550026225894095e-02, 8.146338208268704e-03, 1.717701651064855e-01, 7.528909291667119e-03, -6.334704283651688e-02, -3.523660105337771e-03, -5.718744379590333e-02, -4.010035668862886e-03, -4.010035668863204e-03, 1.364559299229717e-02, -2.000000497379569e-02, -3.260099663501406e-02, 5.420585277246802e-02, 1.968351519291064e-02, -6.182136732778799e-02, -1.066336319905829e-03, -3.454319710900705e-06, -4.369605746998601e-05, -6.583375110234982e-02, -1.093152333200714e-04, -1.093152333337075e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
