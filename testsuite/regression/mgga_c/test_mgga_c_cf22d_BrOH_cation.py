
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_cf22d_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_cf22d", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.556419474728405e-01, -2.556498740744917e-01, -2.556820194834993e-01, -1.616742826020658e-01, -1.369198829037551e-01, -1.120052490842626e-01, -2.724907897254263e-03, 2.352834802167886e-02, 2.245060283337040e-02, 2.288760099224399e-02, 2.283904545709141e-02, -3.422113614857421e-03, -1.661184972007369e-01, -3.828181398841451e-02, 5.400642631556348e-02, 1.274661104998977e-02, -1.784218292022527e-01, 5.358994230881590e-02, -8.730557910581969e-03, -4.441533826470704e-02, 1.539968692840020e-02, -1.223438202614904e-02, 7.252469932560941e-03, 6.995297838772119e-03, -7.404617794803037e-03, -7.723030400332137e-03, -2.703055353717816e-02, -4.632375175905996e-03, -4.810820531158967e-03, -4.810820531158957e-03, -1.521299505678499e-01, -1.123128582310918e-01, -1.121587946653244e-01, -1.123031063563523e-01, -1.872677107551453e-01, -1.523607995096034e-01, 8.419686309887365e-03, 4.826140995027699e-03, 4.554972017396667e-02, 4.101657481001694e-02, -2.917007562141206e-02, 5.026738751872827e-03, -4.180714999145389e-02, -7.560482480573190e-02, -1.123611629882259e-02, -3.426482270589377e-02, -4.656027104542972e-02, -4.005264183350388e-02, -3.170843619127825e-02, -1.406592319082377e-02, -3.444062264125825e-02, -5.615832661600239e-02, -2.629111882410326e-02, -2.629111882410334e-02, -3.681223659217851e-03, -4.541571469371973e-03, -3.571545368553640e-03, -3.291187517029617e-02, -3.977282390807834e-03, -3.977282390807835e-03, -1.557822859751845e-01, -1.241147889396424e-01, -1.769512258994607e-01, -1.603690571925185e-01, -1.797401962720828e-01, -1.563922900508649e-01, -1.662582084567029e-01, -4.014417671418171e-02, -4.994519601110546e-02, -7.480105459309572e-02, -5.657891633605080e-02, -6.528287052879611e-02, -8.061998048546776e-02, -8.889000472173952e-03, -7.255148551892844e-03, -1.709999782685390e-02, -1.308809828514443e-02, -1.285444928149872e-02, -6.421766620273089e-03, -6.730921385940017e-02, -3.089182255145307e-02, -2.432316504730507e-02, -3.045209442337994e-02, -3.045209442337996e-02, -2.380058894243328e-02, -1.370137325757602e-03, -6.498510252546177e-03, -1.040424518666120e-01, -3.754553390574213e-03, -3.754585906004461e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_cf22d_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_cf22d", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-6.904907678099823e-01, -6.904913640511766e-01, -6.905019039715062e-01, -6.905029094207524e-01, -6.905490519411195e-01, -6.905479402017883e-01, -3.980160026136462e-01, -3.980184555517174e-01, -3.016706627167904e-01, -3.016741613077092e-01, -1.998030260177659e-01, -1.998058967644342e-01, -2.340272301038671e-01, -2.340278852103214e-01, -2.655576292571643e-01, -2.655574759702584e-01, -2.660991764786821e-01, -2.660993433392538e-01, -2.658905122977334e-01, -2.658906359228953e-01, -2.659045046741685e-01, -2.659077703616428e-01, -2.339633684124792e-01, -2.339450235058633e-01, 4.879159500694504e-02, 5.010463205428537e-02, -1.103886125355296e-01, -1.095569367595822e-01, 7.062809919638380e-03, 7.398195349805859e-03, -8.521151837306626e-02, -8.506642292758484e-02, 3.625010639785951e-02, 1.285531970722769e-02, -9.327344236465746e-03, -6.265078925014708e-03, -6.092553265985628e-02, -5.743097805030820e-02, -1.002823229300449e-01, -9.293968239498625e-02, 1.381990591665650e-03, 3.126998440288571e-03, 3.643989519564053e-02, 3.698425179085811e-02, 6.070082663667290e-02, 6.505722505496589e-02, 5.941606668368436e-02, 6.289221755319338e-02, -9.904251211146655e-03, -9.081546630031561e-03, -1.038675029095215e-02, -9.410315318991950e-03, -3.185385371711427e-02, -2.876391283346202e-02, -5.915087055256317e-03, -6.052209022223763e-03, -5.362740990177242e-03, -1.052098477617533e-02, -5.362740990177185e-03, -1.052098477617526e-02, -3.250887070247667e-01, -3.251707953897915e-01, -2.059932894006112e-01, -2.060600932833686e-01, -2.062466908123929e-01, -2.063127618749344e-01, -2.060099775755607e-01, -2.060752640472306e-01, -4.163822628204086e-01, -4.164798405722631e-01, -3.249648478014452e-01, -3.250486185477514e-01, -1.862067986992764e-01, -1.862090356049565e-01, -1.891094262555056e-01, -1.891224894027408e-01, -1.957938434101269e-01, -1.958603615475632e-01, -2.036541763180515e-01, -2.037105236693765e-01, -1.385916654279533e-01, -1.390906577843094e-01, -1.888431268058660e-01, -1.890528782930012e-01, -1.413712798200731e-01, -1.416326359979438e-01, -2.125932942185440e-01, -2.125112000614201e-01, -1.436154895136981e-01, -1.416995766906987e-01, -1.495882645381309e-01, -1.467768160567493e-01, -1.555188346376792e-01, -1.610164450682578e-01, -1.538740693525850e-01, -1.588279890027778e-01, -8.067952777554264e-03, -7.398953525206324e-03, -2.505333033771970e-02, -2.462306027917072e-02, -2.568366299801335e-02, -2.147956353728624e-02, -2.149961476427072e-01, -2.150531124136932e-01, -1.660098414521209e-02, -1.205662935228291e-02, -1.660098414521210e-02, -1.205662935228288e-02, -4.902477621487471e-03, -4.656440944437753e-03, -5.928474374164914e-03, -5.808459814439007e-03, -4.819927884989746e-03, -4.464626051206513e-03, -3.061800961453489e-02, -3.017772447664732e-02, -6.771287190868687e-03, -4.505379717556127e-03, -6.771287190868745e-03, -4.505379717556109e-03, -2.901443287645089e-01, -2.887650598999913e-01, -2.403980653333466e-01, -2.392221954976758e-01, -2.496871909744171e-01, -2.483023057086001e-01, -2.630316687658356e-01, -2.616794597731193e-01, -2.514088433547719e-01, -2.500087407513603e-01, -2.576008943096618e-01, -2.562696463746190e-01, -2.715605817726087e-01, -2.703730977962328e-01, -8.125791117597814e-02, -8.084641504337588e-02, -1.619391675604315e-01, -1.614388211333363e-01, -2.090081834561253e-01, -2.083776997884037e-01, -1.797832104972683e-01, -1.792878718679245e-01, -2.032607018092834e-01, -2.027201688375036e-01, -2.423809643767431e-01, -2.421005899865986e-01, -5.695987198483292e-02, -5.640285746857335e-02, -8.258078781699028e-02, -8.161237865393341e-02, -8.879873885072580e-02, -8.833404134571601e-02, -9.087553190715747e-02, -9.090897912524036e-02, -9.101435686042127e-02, -9.104764411761807e-02, -1.328958382083676e-01, -1.325682477842645e-01, -8.270004583729665e-02, -8.174364402511770e-02, -3.267085316208975e-02, -3.051293835044239e-02, -7.943655454421222e-02, -7.828561678090724e-02, -1.576767124990110e-02, -1.212289803888733e-02, -1.576767124990128e-02, -1.212289803888722e-02, -3.113988299229855e-02, -2.954946030169982e-02, -1.799012137110215e-03, -1.793829967251606e-03, -8.835612773867522e-03, -8.151449376562250e-03, -1.217469396761424e-01, -1.181392751029122e-01, -6.187113840800336e-03, -4.286872868635116e-03, -6.187352416114111e-03, -4.287075184675802e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_cf22d_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_cf22d", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.014728662870218e-08, 2.029457325740437e-08, 1.014728662870218e-08, 1.014773664946218e-08, 2.029547329892436e-08, 1.014773664946218e-08, 1.014947598616452e-08, 2.029895197232903e-08, 1.014947598616452e-08, 8.858959061352725e-10, 1.771791812270545e-09, 8.858959061352725e-10, 4.570569763428170e-10, 9.141139526856341e-10, 4.570569763428170e-10, 2.229951523234305e-10, 4.459903046468609e-10, 2.229951523234305e-10, 1.526601780485139e-06, 3.053203560970278e-06, 1.526601780485139e-06, 6.371310748436304e-07, 1.274262149687261e-06, 6.371310748436304e-07, 6.355644217155368e-07, 1.271128843431074e-06, 6.355644217155368e-07, 6.359179384798957e-07, 1.271835876959791e-06, 6.359179384798957e-07, 6.362111311441889e-07, 1.272422262288378e-06, 6.362111311441889e-07, 1.528081907599235e-06, 3.056163815198471e-06, 1.528081907599235e-06, 3.210770024909514e-02, 6.421540049819029e-02, 3.210770024909514e-02, 9.419551876238717e-03, 1.883910375247743e-02, 9.419551876238717e-03, 1.459070557168636e-03, 2.918141114337271e-03, 1.459070557168636e-03, 4.659188317858991e-03, 9.318376635717981e-03, 4.659188317858991e-03, 3.686231535433300e-02, 7.372463070866600e-02, 3.686231535433300e-02, 1.514156572539431e-03, 3.028313145078861e-03, 1.514156572539431e-03, 1.707112354136004e+00, 3.414224708272008e+00, 1.707112354136004e+00, 3.434189784858005e+00, 6.868379569716010e+00, 3.434189784858005e+00, 1.176677046984763e-03, 2.353354093969525e-03, 1.176677046984763e-03, 2.611801258157531e-01, 5.223602516315055e-01, 2.611801258157531e-01, 1.099580557576308e-01, 2.199161115152620e-01, 1.099580557576308e-01, 1.213446235084420e-01, 2.426892470168847e-01, 1.213446235084420e-01, 8.894751946729698e-02, 1.778950389362035e-01, 8.894751946729698e-02, 5.889757328819273e-02, 1.177951465760643e-01, 5.889757328819273e-02, 2.650822343398754e-01, 5.301644686797958e-01, 2.650822343398754e-01, 2.346903527985712e-02, 4.693807055544236e-02, 2.346903527985712e-02, 1.413654872835135e-03, 2.827309746284070e-03, 1.413654872835135e-03, 1.413654871761336e-03, 2.827309743938294e-03, 1.413654871761336e-03, 1.169300840273300e-06, 2.338601680546600e-06, 1.169300840273300e-06, 6.541940543362911e-07, 1.308388108672582e-06, 6.541940543362911e-07, 6.434314911220743e-07, 1.286862982244149e-06, 6.434314911220743e-07, 6.535043177380738e-07, 1.307008635476148e-06, 6.535043177380738e-07, 1.940183405596582e-06, 3.880366811193164e-06, 1.940183405596582e-06, 1.178138205355328e-06, 2.356276410710655e-06, 1.178138205355328e-06, 2.811674882044061e-05, 5.623349764088122e-05, 2.811674882044061e-05, 2.677994364958755e-05, 5.355988729917510e-05, 2.677994364958755e-05, 1.153149267681360e-05, 2.306298535362720e-05, 1.153149267681360e-05, 1.123435483843878e-05, 2.246870967687757e-05, 1.123435483843878e-05, 5.254818541777896e-05, 1.050963708355580e-04, 5.254818541777896e-05, 2.689163893647922e-05, 5.378327787295844e-05, 2.689163893647922e-05, 4.783019935678838e-03, 9.566039871357675e-03, 4.783019935678838e-03, 6.271245018564656e-03, 1.254249003712932e-02, 6.271245018564656e-03, 5.204206224170326e-03, 1.040841244834065e-02, 5.204206224170326e-03, 3.492871456235861e-03, 6.985742912471722e-03, 3.492871456235861e-03, 4.225057351049324e-03, 8.450114702098648e-03, 4.225057351049324e-03, 2.803100827776924e-03, 5.606201655553848e-03, 2.803100827776924e-03, 1.320142609629094e-01, 2.640285219258202e-01, 1.320142609629094e-01, 8.423842720133914e-01, 1.684768544026783e+00, 8.423842720133914e-01, 8.316089380945443e-01, 1.663217876189085e+00, 8.316089380945443e-01, 1.148269521944982e-05, 2.296539043889965e-05, 1.148269521944982e-05, 1.827858956959188e+00, 3.655717913918375e+00, 1.827858956959188e+00, 1.827858956959185e+00, 3.655717913918372e+00, 1.827858956959185e+00, 5.886396316613421e-03, 1.177279262901542e-02, 5.886396316613421e-03, 2.345364411219257e-03, 4.690728824482052e-03, 2.345364411219257e-03, 2.694743477307353e-01, 5.389486954139600e-01, 2.694743477307353e-01, 8.089892292814818e-01, 1.617978458562970e+00, 8.089892292814818e-01, 6.201570604737673e-02, 1.240314120910609e-01, 6.201570604737673e-02, 6.201570604745994e-02, 1.240314120885451e-01, 6.201570604745994e-02, 7.176050280481917e-02, 1.435210056096383e-01, 7.176050280481917e-02, 4.339010404191222e-02, 8.678020808382443e-02, 4.339010404191222e-02, 6.979941300167665e-02, 1.395988260033533e-01, 6.979941300167665e-02, 6.735087133085212e-02, 1.347017426617042e-01, 6.735087133085212e-02, 7.330247217061406e-02, 1.466049443412281e-01, 7.330247217061406e-02, 6.326468578004094e-02, 1.265293715600819e-01, 6.326468578004094e-02, 8.266636626229040e-02, 1.653327325245808e-01, 8.266636626229040e-02, 1.804827535214988e-02, 3.609655070429976e-02, 1.804827535214988e-02, 9.168188438792661e-03, 1.833637687758532e-02, 9.168188438792661e-03, 1.447097638628836e-02, 2.894195277257671e-02, 1.447097638628836e-02, 8.207491082391211e-03, 1.641498216478242e-02, 8.207491082391211e-03, 1.199809671214024e-02, 2.399619342428048e-02, 1.199809671214024e-02, 5.980580316656583e-03, 1.196116063331317e-02, 5.980580316656583e-03, 5.678858043510511e-01, 1.135771608702102e+00, 5.678858043510511e-01, 3.457904087239603e-01, 6.915808174479207e-01, 3.457904087239603e-01, 1.023537317694163e-01, 2.047074635388325e-01, 1.023537317694163e-01, 2.146469860989725e-01, 4.292939721979450e-01, 2.146469860989725e-01, 2.136787914799485e-01, 4.273575829598970e-01, 2.136787914799485e-01, 1.311965741943261e-02, 2.623931483886521e-02, 1.311965741943261e-02, 3.849596314105052e+03, 7.699192628210105e+03, 3.849596314105052e+03, 6.265317014170954e-02, 1.253063402834194e-01, 6.265317014170954e-02, 9.294967532053396e-02, 1.858993506410679e-01, 9.294967532053396e-02, 2.392463645926508e-01, 4.784927291852988e-01, 2.392463645926508e-01, 2.392463645926463e-01, 4.784927291852959e-01, 2.392463645926463e-01, 8.957044926022185e+05, 1.791408985204437e+06, 8.957044926022185e+05, 3.181878320346176e-04, 6.363757222265506e-04, 3.181878320346176e-04, 3.519407794175752e+08, 7.038815588351505e+08, 3.519407794175752e+08, 2.605582756657786e+02, 5.211165513315572e+02, 2.605582756657786e+02, 1.011727356285725e-02, 2.023454713117303e-02, 1.011727356285725e-02, 2.044421714962733e+00, 4.088843429972870e+00, 2.044421714962733e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_cf22d_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_cf22d", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.457340477576833e-04, 2.457340477576832e-04, 2.457420144065010e-04, 2.457420144065011e-04, 2.457733365729062e-04, 2.457733365729061e-04, 8.140123893478584e-05, 8.140123893478584e-05, 3.801799897548387e-05, 3.801799897548381e-05, -5.574862726146508e-06, -5.574862726146556e-06, 9.596614346344928e-04, 9.596614346344929e-04, 1.533048742933109e-03, 1.533048742933109e-03, 1.544667344152264e-03, 1.544667344152264e-03, 1.539765082885110e-03, 1.539765082885111e-03, 1.540546772490141e-03, 1.540546772490141e-03, 9.636146982497888e-04, 9.636146982497894e-04, -2.248176981259834e-02, -2.248176981259834e-02, -1.066716965547572e-02, -1.066716965547572e-02, -5.278262711892079e-03, -5.278262711892065e-03, -7.039945524787947e-03, -7.039945524787928e-03, -2.029781218832752e-02, -2.029781218832751e-02, -4.360516081721387e-03, -4.360516081721385e-03, -7.044432573580628e-02, -7.044432573580631e-02, -7.985752183346233e-02, -7.985752183346238e-02, -6.028886074369070e-03, -6.028886074369070e-03, -4.632396058789780e-02, -4.632396058789780e-02, -5.168416034784343e-02, -5.168416034784345e-02, -5.163853067733015e-02, -5.163853067733021e-02, -2.916273448626797e-05, -2.916273448632910e-05, -3.513097528579853e-05, -3.513097528578366e-05, -1.940362947839823e-03, -1.940362947839823e-03, -4.452809282257223e-06, -4.452809282257223e-06, -1.017417122596430e-05, -1.017417122597036e-05, -1.017417122597037e-05, -1.017417122597037e-05, 3.656549847062554e-04, 3.656549847062561e-04, -9.824029454543100e-04, -9.824029454543119e-04, -9.480212068632182e-04, -9.480212068632179e-04, -9.801933645346306e-04, -9.801933645346287e-04, 1.497234487787153e-03, 1.497234487787153e-03, 3.521941030372886e-04, 3.521941030372886e-04, 1.215942564445184e-03, 1.215942564445185e-03, 1.368081484606053e-03, 1.368081484606051e-03, 2.552795231328326e-03, 2.552795231328324e-03, 2.738587335538734e-03, 2.738587335538732e-03, -3.024254163844490e-04, -3.024254163844490e-04, 1.359890384553840e-03, 1.359890384553840e-03, 2.917508677339991e-02, 2.917508677339991e-02, 5.081721462807992e-02, 5.081721462807998e-02, 2.593215211251317e-02, 2.593215211251316e-02, 3.695308532869031e-02, 3.695308532869034e-02, 3.717625306912400e-02, 3.717625306912400e-02, 3.748473581407593e-02, 3.748473581407593e-02, -1.884335399925598e-02, -1.884335399925601e-02, -4.978396058648679e-02, -4.978396058648677e-02, -1.598499842464537e-02, -1.598499842464526e-02, 5.400659947119929e-03, 5.400659947119929e-03, -3.962910785325660e-02, -3.962910785325666e-02, -3.962910785325655e-02, -3.962910785325648e-02, -1.457226625074315e-06, -1.457226625078606e-06, -3.687628942931245e-06, -3.687628942931245e-06, -1.371906438650626e-05, -1.371906438647594e-05, -7.712043564999945e-03, -7.712043564999892e-03, -8.507428425273963e-06, -8.507428425296092e-06, -8.507428425244454e-06, -8.507428425222328e-06, 1.369518780759016e-01, 1.369518780759016e-01, 7.996659140460050e-03, 7.996659140460135e-03, 1.295667076985904e-01, 1.295667076985905e-01, 9.529418235875711e-02, 9.529418235875696e-02, 1.378695562246035e-01, 1.378695562246035e-01, 7.826868268891753e-02, 7.826868268891755e-02, 1.464332810330347e-01, 1.464332810330345e-01, 5.095164703852998e-03, 5.095164703853000e-03, 5.539026493479552e-02, 5.539026493479555e-02, 7.224595522089515e-02, 7.224595522089515e-02, 6.396395460879807e-02, 6.396395460879810e-02, 8.295170718784546e-02, 8.295170718784547e-02, 6.867480463590311e-02, 6.867480463590313e-02, -4.776169364572259e-02, -4.776169364572250e-02, -3.818547130224925e-02, -3.818547130224925e-02, -1.140334568850396e-02, -1.140334568850398e-02, -2.640946841070850e-02, -2.640946841070851e-02, -2.620015415272806e-02, -2.620015415272803e-02, 2.862048453684860e-02, 2.862048453684861e-02, -3.762142654483134e-04, -3.762142654482822e-04, -3.537354682343764e-03, -3.537354682343764e-03, 2.721372041526596e-03, 2.721372041526596e-03, -1.875321956101041e-02, -1.875321956101079e-02, -1.875321956101041e-02, -1.875321956101085e-02, -8.065661042507316e-06, -8.065661042507316e-06, -9.724638898055589e-08, -9.724638897857104e-08, -5.286471283563307e-07, -5.286471283563307e-07, -3.928503384695953e-03, -3.928503384696106e-03, -9.800361046108860e-06, -9.800361046108860e-06, -9.800313774306201e-06, -9.800313774295169e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
