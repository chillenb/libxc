
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_cf22d_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_cf22d", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.143553383298141e-01, -1.143563716747927e-01, -1.143593000335703e-01, -1.143439499895640e-01, -1.143522351608306e-01, -1.143522351608306e-01, -7.959746685184295e-03, -7.985781541889119e-03, -8.646119519002581e-03, -8.120887406672623e-03, -8.286388421457848e-03, -8.286388421457848e-03, -1.448491265341376e-02, -1.395785618631406e-02, -7.722848714258283e-04, 2.235579005134360e-03, 9.206366714366639e-04, 9.206366714366639e-04, 1.516496181176725e-02, 1.523876134162745e-02, -6.333595138525178e-02, -1.471222604003741e-02, 1.839509181716324e-03, 1.839509181716306e-03, -7.404575213587125e-03, -7.722997975175541e-03, -2.699904600484241e-02, -4.632372859719389e-03, -4.810822244939725e-03, -4.810822244939715e-03, -1.125368158881704e-01, -1.127026697005971e-01, -1.125386356466515e-01, -1.126851805834233e-01, -1.126244424143536e-01, -1.126244424143536e-01, 3.575236873117196e-02, 3.164269859844050e-02, 4.045480026914029e-02, 3.683218492904364e-02, 3.115334624321087e-02, 3.115334624321087e-02, -3.960887201459758e-02, -9.480760816369725e-02, -2.667315304049886e-02, -4.888094253439626e-02, -4.569088799317169e-02, -4.569088799317170e-02, -3.207024729308439e-02, 3.506395398966026e-03, -3.296921283425104e-02, -8.023430424064219e-02, -2.036477024134060e-02, -2.036477024134068e-02, -3.681223541267163e-03, -4.541571925856148e-03, -3.571541278656349e-03, -3.253212129664682e-02, -3.977280098592825e-03, -3.977280098592826e-03, -1.709352198200333e-01, -1.327999882759021e-01, -1.427589889379871e-01, -1.531658721862959e-01, -1.476341417488988e-01, -1.476341417488988e-01, -1.766458025951123e-01, -2.114589913332533e-02, -4.374073085211485e-02, -7.846216422156438e-02, -5.844526683524479e-02, -5.844526683524477e-02, -7.961435012476653e-02, 1.937789027458346e-02, 2.137658902920318e-02, -7.502734852245803e-03, 1.004426035431399e-02, 1.004426035431395e-02, -1.297087641304692e-02, -2.639986259345614e-02, -3.090841186268689e-02, -1.925852844367234e-02, -3.065146431523275e-02, -3.065146431523278e-02, -9.873483196933574e-03, -1.370137334734453e-03, -2.704557782215550e-03, -3.064540319778801e-02, -3.754554188231389e-03, -3.754554188231386e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_cf22d_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_cf22d", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.096976215510332e-01, -2.096979176598547e-01, -2.096888066035609e-01, -2.096893059274102e-01, -2.096487293538052e-01, -2.096481772877353e-01, -2.097763763807419e-01, -2.097781277041448e-01, -2.097085837360862e-01, -2.097115143978867e-01, -2.097085837360862e-01, -2.097115143978867e-01, -2.253959148046761e-01, -2.253967151042548e-01, -2.254088749605884e-01, -2.254097892903779e-01, -2.257958982958976e-01, -2.257946747689722e-01, -2.260878886780771e-01, -2.260870661233671e-01, -2.258751731522793e-01, -2.258531319575230e-01, -2.258751731522793e-01, -2.258531319575230e-01, -1.103347631898710e-01, -1.098407310584119e-01, -1.100694057599850e-01, -1.094663635395987e-01, -9.153756929590223e-02, -9.223243479277053e-02, -9.572183102610268e-02, -9.552288483450500e-02, -9.219079848098906e-02, -9.841495069124807e-02, -9.219079848098906e-02, -9.841495069124807e-02, -4.389327649316797e-04, 3.245739811164291e-04, -8.934180064420675e-03, -7.953924996056582e-03, -1.411824610439226e-01, -1.332126442560835e-01, 2.331070404367089e-02, 2.400166828696420e-02, 3.558216278108638e-02, 2.231919875179600e-02, 3.558216278108633e-02, 2.231919875179596e-02, -9.903967518514233e-03, -9.081273635942338e-03, -1.038653365952961e-02, -9.410107968287746e-03, -3.164943103194141e-02, -2.856788356602816e-02, -5.915071948056948e-03, -6.052193761647224e-03, -5.362751572494729e-03, -1.052099929813175e-02, -5.362751572494686e-03, -1.052099929813168e-02, -2.074795222849556e-01, -2.075445468695123e-01, -2.072083342337532e-01, -2.072753178905785e-01, -2.074385604125001e-01, -2.075048054825138e-01, -2.072014276903723e-01, -2.072668864143231e-01, -2.073546523720023e-01, -2.074209917265625e-01, -2.073546523720023e-01, -2.074209917265625e-01, -2.024781218776554e-01, -2.024772318765474e-01, -2.093772681393324e-01, -2.093739470805755e-01, -1.964385611475659e-01, -1.964827985190442e-01, -2.035342828324553e-01, -2.035717299807417e-01, -2.087839042026800e-01, -2.087367060799788e-01, -2.087839042026800e-01, -2.087367060799788e-01, -1.441775688116757e-01, -1.444301114238411e-01, -2.638211778364695e-01, -2.637279661428300e-01, -1.087622695960273e-01, -1.058060921397922e-01, -1.328283246017498e-01, -1.293134079562689e-01, -1.555267200089603e-01, -1.609581117779482e-01, -1.555267200089604e-01, -1.609581117779482e-01, -1.025817842729975e-02, -9.572660790268344e-03, 4.391693760918518e-02, 4.403407545499330e-02, -1.692494410909535e-02, -1.308282851348432e-02, -2.457898593666234e-01, -2.458651534756552e-01, 1.463095109305219e-02, 1.772387781384232e-02, 1.463095109305210e-02, 1.772387781384235e-02, -4.902476837704867e-03, -4.656440178205905e-03, -5.928477380874190e-03, -5.808462794171637e-03, -4.819900539724279e-03, -4.464599610824280e-03, -2.828744558434330e-02, -2.785849686720794e-02, -6.771270091041596e-03, -4.505365492220958e-03, -6.771270091041656e-03, -4.505365492220952e-03, -2.844385706517343e-01, -2.830092078876780e-01, -2.449926924256221e-01, -2.437814291761506e-01, -2.529817686737870e-01, -2.517046583707606e-01, -2.642599891101693e-01, -2.629317287136715e-01, -2.580210919740187e-01, -2.567198672526808e-01, -2.580210919740187e-01, -2.567198672526808e-01, -2.668798935237686e-01, -2.656659592638330e-01, -1.335329779364575e-01, -1.332483188592708e-01, -1.563435950604459e-01, -1.558839914894460e-01, -2.193212219307536e-01, -2.186729438528573e-01, -1.852808381038835e-01, -1.847748604568456e-01, -1.852808381038835e-01, -1.847748604568456e-01, -2.401066045518211e-01, -2.398279799897007e-01, 2.107116041586612e-02, 2.112437407823192e-02, -4.138401646307900e-02, -4.116793386414738e-02, -1.031217303843898e-01, -1.027557408475923e-01, -9.444829257160610e-02, -9.446388494177178e-02, -9.444829257160621e-02, -9.446388494177181e-02, -1.209796044153016e-01, -1.205594359245609e-01, -2.979106700412984e-02, -2.941561112839875e-02, -3.277741202572575e-02, -3.061678496439285e-02, -9.324133130687247e-02, -9.221116821808352e-02, -1.701408386533039e-02, -1.331664012856899e-02, -1.701408386533060e-02, -1.331664012856891e-02, -1.285864212777852e-02, -1.219886307772784e-02, -1.799012196427843e-03, -1.793830026494784e-03, -3.675423049191310e-03, -3.390687084441204e-03, -1.738131562598082e-02, -1.628992841548147e-02, -6.187119697673871e-03, -4.286877835558875e-03, -6.187119697673818e-03, -4.286877835558868e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_cf22d_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_cf22d", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([2.396836093802280e-10, 4.793672187604562e-10, 2.396836093802280e-10, 2.397012638546559e-10, 4.794025277093118e-10, 2.397012638546559e-10, 2.397610669702322e-10, 4.795221339404644e-10, 2.397610669702322e-10, 2.394997577177116e-10, 4.789995154354232e-10, 2.394997577177116e-10, 2.396392793756155e-10, 4.792785587512311e-10, 2.396392793756155e-10, 2.396392793756155e-10, 4.792785587512311e-10, 2.396392793756155e-10, 1.753441424809640e-06, 3.506882849619279e-06, 1.753441424809640e-06, 1.753003690647565e-06, 3.506007381295129e-06, 1.753003690647565e-06, 1.740066730472652e-06, 3.480133460945304e-06, 1.740066730472652e-06, 1.732918509781337e-06, 3.465837019562674e-06, 1.732918509781337e-06, 1.739435437388076e-06, 3.478870874776151e-06, 1.739435437388076e-06, 1.739435437388076e-06, 3.478870874776151e-06, 1.739435437388076e-06, 6.860685401057938e-03, 1.372137080211588e-02, 6.860685401057938e-03, 6.833638586277472e-03, 1.366727717255494e-02, 6.833638586277472e-03, 5.935029539896034e-03, 1.187005907979207e-02, 5.935029539896034e-03, 5.628666595312190e-03, 1.125733319062438e-02, 5.628666595312190e-03, 5.754421807575477e-03, 1.150884361515095e-02, 5.754421807575477e-03, 5.754421807575477e-03, 1.150884361515095e-02, 5.754421807575477e-03, 6.916573971541728e-01, 1.383314794308346e+00, 6.916573971541728e-01, 7.240129210614147e-01, 1.448025842122829e+00, 7.240129210614147e-01, 4.357249785968569e-03, 8.714499571937137e-03, 4.357249785968569e-03, 4.589762967716053e-01, 9.179525935432111e-01, 4.589762967716053e-01, 4.127760543838848e-01, 8.255521087677685e-01, 4.127760543838848e-01, 4.127760543838855e-01, 8.255521087677707e-01, 4.127760543838855e-01, 1.170335469579134e-02, 2.340670939250142e-02, 1.170335469579134e-02, 1.376912608433691e-02, 2.753825216742925e-02, 1.376912608433691e-02, 7.345921883280851e-02, 1.469184376656476e-01, 7.345921883280851e-02, 4.151789484502392e-03, 8.303578968856034e-03, 4.151789484502392e-03, 6.094237906003854e-03, 1.218847581387104e-02, 6.094237906003854e-03, 6.094237908267963e-03, 1.218847581465545e-02, 6.094237908267963e-03, 6.466609329140686e-07, 1.293321865828137e-06, 6.466609329140686e-07, 6.581235694255117e-07, 1.316247138851023e-06, 6.581235694255117e-07, 6.472411009914017e-07, 1.294482201982803e-06, 6.472411009914017e-07, 6.573544307617444e-07, 1.314708861523489e-06, 6.573544307617444e-07, 6.524172508409220e-07, 1.304834501681844e-06, 6.524172508409220e-07, 6.524172508409220e-07, 1.304834501681844e-06, 6.524172508409220e-07, 1.379551866543816e-05, 2.759103733087631e-05, 1.379551866543816e-05, 1.296294430568968e-05, 2.592588861137935e-05, 1.296294430568968e-05, 1.372258144269319e-05, 2.744516288538638e-05, 1.372258144269319e-05, 1.300547141794608e-05, 2.601094283589216e-05, 1.300547141794608e-05, 1.334302196349366e-05, 2.668604392698731e-05, 1.334302196349366e-05, 1.334302196349366e-05, 2.668604392698731e-05, 1.334302196349366e-05, 4.227605507155881e-03, 8.455211014311763e-03, 4.227605507155881e-03, 1.034188004651172e-02, 2.068376009302345e-02, 1.034188004651172e-02, 9.707918320104827e-03, 1.941583664020965e-02, 9.707918320104827e-03, 8.062600170215348e-03, 1.612520034043070e-02, 8.062600170215348e-03, 4.016472676867757e-03, 8.032945353735515e-03, 4.016472676867757e-03, 4.016472676867759e-03, 8.032945353735518e-03, 4.016472676867759e-03, 2.147930577289546e-01, 4.295861154579111e-01, 2.147930577289546e-01, 2.511516646749376e-01, 5.023033293498751e-01, 2.511516646749376e-01, 2.127949284069884e-01, 4.255898568139769e-01, 2.127949284069884e-01, 4.167934618631237e-05, 8.335869237262474e-05, 4.167934618631237e-05, 4.614918829453603e-01, 9.229837658907188e-01, 4.614918829453603e-01, 4.614918829453599e-01, 9.229837658907180e-01, 4.614918829453599e-01, 4.047165190873198e-03, 8.094330372558082e-03, 4.047165190873198e-03, 5.104342298863212e-03, 1.020868459296199e-02, 5.104342298863212e-03, 5.086368795383181e-02, 1.017273758927067e-01, 5.086368795383181e-02, 1.910857840758361e-01, 3.821715681516714e-01, 1.910857840758361e-01, 1.946514320972300e-02, 3.893028641640549e-02, 1.946514320972300e-02, 1.946514322640597e-02, 3.893028644836864e-02, 1.946514322640597e-02, 7.778505413190136e-02, 1.555701082638027e-01, 7.778505413190136e-02, 4.647658681479166e-02, 9.295317362958333e-02, 4.647658681479166e-02, 5.552451208792363e-02, 1.110490241758473e-01, 5.552451208792363e-02, 6.447231668183673e-02, 1.289446333636735e-01, 6.447231668183673e-02, 5.980867619391077e-02, 1.196173523878216e-01, 5.980867619391077e-02, 5.980867619391077e-02, 1.196173523878216e-01, 5.980867619391077e-02, 8.755848336263176e-02, 1.751169667252635e-01, 8.755848336263176e-02, 7.740245732394155e-03, 1.548049146478831e-02, 7.740245732394155e-03, 6.350399185025912e-03, 1.270079837005182e-02, 6.350399185025912e-03, 1.593102557623936e-02, 3.186205115247871e-02, 1.593102557623936e-02, 8.951249101824795e-03, 1.790249820364959e-02, 8.951249101824795e-03, 8.951249101824795e-03, 1.790249820364959e-02, 8.951249101824795e-03, 5.775397537236009e-03, 1.155079507447202e-02, 5.775397537236009e-03, 1.903792331804712e-01, 3.807584663609422e-01, 1.903792331804712e-01, 1.601936722786701e-01, 3.203873445573402e-01, 1.601936722786701e-01, 8.091517076969799e-02, 1.618303415393960e-01, 8.091517076969799e-02, 1.254775511074456e-01, 2.509551022148912e-01, 1.254775511074456e-01, 1.254775511074458e-01, 2.509551022148915e-01, 1.254775511074458e-01, 1.711278520391916e-02, 3.422557040783833e-02, 1.711278520391916e-02, 6.019050117815643e-02, 1.203810023563151e-01, 6.019050117815643e-02, 9.464661981112500e-02, 1.892932396222606e-01, 9.464661981112500e-02, 7.825542944139266e-02, 1.565108588827853e-01, 7.825542944139266e-02, 3.607284720011869e-01, 7.214569440023734e-01, 3.607284720011869e-01, 3.607284720011804e-01, 7.214569440023599e-01, 3.607284720011804e-01, 1.460133973341572e-02, 2.920267946690832e-02, 1.460133973341572e-02, 5.533287972101615e-03, 1.106657587183279e-02, 5.533287972101615e-03, 6.926832016378909e-03, 1.385366402459949e-02, 6.926832016378909e-03, 3.268232599768079e-01, 6.536465199536160e-01, 3.268232599768079e-01, 2.484571008041312e-02, 4.969142017244405e-02, 2.484571008041312e-02, 2.484571007036119e-02, 4.969142014152154e-02, 2.484571007036119e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_cf22d_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_cf22d", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.483625478934231e-06, -1.483625478934217e-06, -1.492471370937771e-06, -1.492471370937865e-06, -1.530496005162015e-06, -1.530496005162016e-06, -1.399649062759527e-06, -1.399649062759512e-06, -1.468366913575735e-06, -1.468366913575783e-06, -1.468366913575735e-06, -1.468366913575783e-06, 8.455957444974517e-04, 8.455957444974518e-04, 8.460491453348986e-04, 8.460491453348984e-04, 8.585775807695692e-04, 8.585775807695688e-04, 8.590475122115817e-04, 8.590475122115821e-04, 8.567513208124726e-04, 8.567513208124730e-04, 8.567513208124726e-04, 8.567513208124730e-04, -8.466466018402166e-03, -8.466466018402174e-03, -8.458550205258524e-03, -8.458550205258524e-03, -8.428020644436079e-03, -8.428020644436067e-03, -7.799757176126391e-03, -7.799757176126374e-03, -7.978463197961593e-03, -7.978463197961591e-03, -7.978463197961593e-03, -7.978463197961591e-03, -6.572636893653598e-02, -6.572636893653602e-02, -6.382669156415620e-02, -6.382669156415627e-02, -6.339576038014970e-03, -6.339576038014970e-03, -4.577425245066944e-02, -4.577425245066944e-02, -5.072374659562104e-02, -5.072374659562106e-02, -5.072374659562109e-02, -5.072374659562114e-02, -2.916282765334326e-05, -2.916282765340439e-05, -3.513105718174558e-05, -3.513105718173071e-05, -1.941502527273393e-03, -1.941502527273393e-03, -4.452810522843429e-06, -4.452810522843429e-06, -1.017416920849729e-05, -1.017416920850336e-05, -1.017416920850337e-05, -1.017416920850337e-05, -9.332193007214331e-04, -9.332193007214320e-04, -9.696172706300781e-04, -9.696172706300800e-04, -9.355603986798040e-04, -9.355603986798037e-04, -9.676612868815158e-04, -9.676612868815139e-04, -9.512650686106683e-04, -9.512650686106683e-04, -9.512650686106683e-04, -9.512650686106683e-04, 2.452439518751702e-03, 2.452439518751702e-03, 2.676457598759974e-03, 2.676457598759971e-03, 2.336211350293353e-03, 2.336211350293352e-03, 2.547719574156384e-03, 2.547719574156383e-03, 2.629911386618074e-03, 2.629911386618074e-03, 2.629911386618074e-03, 2.629911386618074e-03, 3.055251138901475e-02, 3.055251138901475e-02, 9.013683210990835e-02, 9.013683210990843e-02, 8.903376443874286e-03, 8.903376443874279e-03, 2.812014923243938e-02, 2.812014923243940e-02, 3.721746464735649e-02, 3.721746464735648e-02, 3.721746464735649e-02, 3.721746464735649e-02, -1.878622271311199e-02, -1.878622271311202e-02, -5.194439210328322e-02, -5.194439210328319e-02, -1.620151607124726e-02, -1.620151607124715e-02, 6.274385498703448e-03, 6.274385498703448e-03, -4.117001585770955e-02, -4.117001585770962e-02, -4.117001585770948e-02, -4.117001585770943e-02, -1.457226651107170e-06, -1.457226651111461e-06, -3.687628736373030e-06, -3.687628736373030e-06, -1.371907313525889e-05, -1.371907313522857e-05, -7.749422575879702e-03, -7.749422575879648e-03, -8.507431156207267e-06, -8.507431156229395e-06, -8.507431156177760e-06, -8.507431156155630e-06, 1.766884550702174e-01, 1.766884550702174e-01, 3.013625773338745e-02, 3.013625773338755e-02, 4.248390906420376e-02, 4.248390906420377e-02, 7.682500546430772e-02, 7.682500546430757e-02, 5.591150494430719e-02, 5.591150494430722e-02, 5.591150494430719e-02, 5.591150494430722e-02, 1.748539482636259e-01, 1.748539482636257e-01, 3.322444017232454e-02, 3.322444017232455e-02, 5.216297032290301e-02, 5.216297032290305e-02, 8.291010646978965e-02, 8.291010646978965e-02, 6.803541462797122e-02, 6.803541462797125e-02, 6.803541462797123e-02, 6.803541462797125e-02, 6.715666471259998e-02, 6.715666471260000e-02, -4.569949548511759e-02, -4.569949548511749e-02, -2.736389359377297e-02, -2.736389359377297e-02, 1.741247413450561e-03, 1.741247413450547e-03, -5.686364916125471e-03, -5.686364916125492e-03, -5.686364916125496e-03, -5.686364916125483e-03, 1.953820866392523e-02, 1.953820866392524e-02, -1.755714116373682e-03, -1.755714116373620e-03, -3.536460932989453e-03, -3.536460932989453e-03, 1.614790639225908e-02, 1.614790639225908e-02, -1.871579025244142e-02, -1.871579025244181e-02, -1.871579025244142e-02, -1.871579025244187e-02, -3.706249299378243e-05, -3.706249299379390e-05, -9.724638862513631e-08, -9.724638862315143e-08, -2.426130885618278e-06, -2.426130885618278e-06, -1.744663503885371e-02, -1.744663503885392e-02, -9.800359886456488e-06, -9.800359886456488e-06, -9.800359886335116e-06, -9.800359886324081e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
