
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_r2scan01_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scan01", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-9.298816375235321e-02, -9.298568721338819e-02, -9.297570311005131e-02, -4.903675396927352e-02, -3.680015572680312e-02, -2.649775654568002e-02, -4.392515628426564e-02, -2.343143711408959e-02, -2.345083373781883e-02, -2.344306413261851e-02, -2.344386239616023e-02, -4.401550084738359e-02, -8.150961507449382e-02, -4.642309872011356e-02, -1.848394150342466e-02, -3.568389332981462e-02, -8.200992690867871e-02, -1.854445436502170e-02, -2.383564239180894e-02, -3.053273501106738e-02, -3.267575632216269e-02, -1.054446832667642e-02, -5.736288776726317e-03, -5.861453178695039e-03, -7.788174185622324e-04, -7.942152293001955e-04, -5.010358169490120e-03, -3.754727376448431e-04, -6.457140352415422e-05, -6.457140352415422e-05, -3.358476385266108e-02, -2.639582289977852e-02, -2.638796212565485e-02, -2.639531953155581e-02, -4.066253764266298e-02, -3.355584838489571e-02, -4.366109434162205e-02, -4.353028494345249e-02, -2.222364928846594e-02, -2.234337181077436e-02, -6.134571981702366e-02, -4.353695594914418e-02, -3.244922261926848e-02, -2.307894102795624e-02, -2.100992276278895e-02, -2.183223989305658e-02, -2.999800773500543e-02, -2.204910128791640e-02, -7.529065181930343e-03, -2.214493524817345e-02, -1.199287525311891e-02, -2.439949187168819e-02, -1.595132167694355e-02, -1.595132167694356e-02, -2.469882135572923e-04, -1.552107567624573e-04, -3.277107319539492e-04, -8.540742989663978e-03, -3.452459208016385e-04, -3.452459208016359e-04, -2.382828189883317e-02, -2.356640457005594e-02, -2.837817993153868e-02, -2.539647620221656e-02, -2.795245481874260e-02, -2.553061767416740e-02, -2.510586013986566e-02, -4.532081938641731e-02, -3.090566839313770e-02, -2.264896369966609e-02, -2.225617025045245e-02, -2.963087222722563e-02, -3.741045369013957e-02, -2.593939731443567e-02, -2.931203013411457e-02, -3.371029124616861e-02, -3.307814880259230e-02, -3.300733326755867e-02, -2.034195336407355e-02, -1.805287463006499e-02, -3.854403057337443e-03, -3.209521047306241e-02, -6.507768431928523e-03, -6.507768431928542e-03, -6.334177164217780e-03, -2.471214975801581e-05, -1.766529314903255e-03, -2.900278300208124e-02, -7.196259060820366e-05, -4.274270120545065e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_r2scan01_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scan01", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.749342615255904e-02, 3.749283525550242e-02, 3.749181324880709e-02, 3.749081686998672e-02, 3.748345214075677e-02, 3.748455358914882e-02, -3.589647933622733e-02, -3.589809283238234e-02, -4.345986918304473e-02, -4.346164018055963e-02, -4.096270802679560e-02, -4.096377207320056e-02, -6.614189278284879e-02, -6.614425111632713e-02, -4.608243960700126e-02, -4.608358980978890e-02, -4.604614650749250e-02, -4.604462541517801e-02, -4.606125331633729e-02, -4.606021672491509e-02, -4.607286719821009e-02, -4.604523487958192e-02, -6.607722144961287e-02, -6.601236322282369e-02, -6.664901070844512e-02, -6.583887899320821e-02, -7.467102242089686e-02, -7.402973973895638e-02, -4.533383754267740e-02, -4.573642463712873e-02, -6.858046956715599e-02, -6.840009277410639e-02, -6.352513008803401e-02, -7.660916381034617e-02, -4.320249054964945e-02, -4.703855925760472e-02, -4.411973623362985e-02, -4.164917882917848e-02, -5.144658295947342e-02, -4.794778415349333e-02, -6.356413137285101e-02, -6.065716345063318e-02, -3.885866728768468e-02, -3.840323137370772e-02, -8.565665885829216e-03, -3.516510935477934e-02, -9.132452386936345e-03, -3.580044456199776e-02, -1.542098602148339e-03, -1.460576642217027e-03, -1.582105477200720e-03, -1.487196535922818e-03, -9.735106418547012e-03, -9.149283594207516e-03, -7.230662940155980e-04, -7.333675453173546e-04, -6.662749398913598e-05, -5.486135069441235e-04, -6.662749398913555e-05, -5.486135069441235e-04, -3.693432249820392e-02, -3.696347491492489e-02, -3.777227316596683e-02, -3.779272224627565e-02, -3.781480332091382e-02, -3.783509153134028e-02, -3.777522035948238e-02, -3.779520894203266e-02, -2.960229301749915e-02, -2.964211544261141e-02, -3.690233430945568e-02, -3.693197698647584e-02, -7.032499456944870e-02, -7.033305570050431e-02, -6.887170396671147e-02, -6.891585824718055e-02, -4.640544559773573e-02, -4.628444486123760e-02, -4.623144023101818e-02, -4.610471209546596e-02, -9.750170676602195e-02, -9.825789034487836e-02, -6.861837898921454e-02, -6.932974097868634e-02, -3.928593909138309e-02, -3.962139185985355e-02, -3.409432918476717e-02, -3.406132586969333e-02, -4.045028823048404e-02, -3.805749226177298e-02, -3.832176943860014e-02, -3.607157891519119e-02, -3.597695768693760e-02, -4.173619302345700e-02, -3.512422305564541e-02, -3.868031260016937e-02, -4.002358835500699e-02, -3.979840025570476e-02, -4.150754303120108e-02, -4.122361292948764e-02, -2.348461259591054e-02, -2.203685476123170e-02, -4.092397372755350e-02, -4.095851876093789e-02, -3.141779344468208e-02, -2.921748334521143e-02, -3.141779344468208e-02, -2.921748334521144e-02, -4.895107226885733e-04, -4.742937373064700e-04, -4.817484092326932e-03, -4.809846717926710e-03, -6.546459458426163e-04, -6.246532878690577e-04, -1.614274549649383e-02, -1.602538606684254e-02, -7.983225330276752e-04, -6.216063799699851e-04, -7.983225330276719e-04, -6.216063799699835e-04, -2.764692243267621e-02, -2.735726298624110e-02, -2.956967703090970e-02, -2.928031988255333e-02, -2.209252835083574e-02, -2.171094823494180e-02, -2.651924031353830e-02, -2.620015599840258e-02, -2.248941273761802e-02, -2.211877260156602e-02, -2.667822781380709e-02, -2.635481170373205e-02, -2.617915571015903e-02, -2.591099819322125e-02, -3.976244129874479e-02, -3.900109448982123e-02, -3.579399334181011e-02, -3.527052754374545e-02, -3.320127169565353e-02, -3.295078879594990e-02, -3.465058318462633e-02, -3.439058173522624e-02, -3.328975305901641e-02, -3.288180774116101e-02, -2.559860864472355e-02, -2.535034323452093e-02, -4.688028733712280e-02, -4.646533729641961e-02, -5.420631782416038e-02, -5.351339960496270e-02, -5.057463164830379e-02, -4.991032459344923e-02, -5.527918939073911e-02, -5.531338655518635e-02, -5.516108735590890e-02, -5.519534816420631e-02, -3.891719230010094e-02, -3.847734509514264e-02, -2.240705324819514e-02, -2.219516762979129e-02, -3.675829055789273e-02, -3.635437672895521e-02, -4.284581763943259e-02, -4.099825111678569e-02, -3.764987993985396e-02, -3.652993080263427e-02, -3.764987993985466e-02, -3.652993080263497e-02, -8.215110100419315e-03, -7.893141641564339e-03, -1.095561385401303e-03, -1.095383518315970e-03, -2.365589654226850e-03, -2.230732018889826e-03, -3.525737188418913e-02, -3.438415330190028e-02, -2.871657198750306e-04, -1.530992817529237e-04, -9.653856903062294e-04, -7.707821000240483e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_r2scan01_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scan01", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [4.378398129473153e-09, 8.756796258946306e-09, 4.378398129473153e-09, 4.378197303198952e-09, 8.756394606397905e-09, 4.378197303198952e-09, 4.377349871787389e-09, 8.754699743574778e-09, 4.377349871787389e-09, 4.453161744392547e-10, 8.906323488785095e-10, 4.453161744392547e-10, 2.159120110371243e-10, 4.318240220742485e-10, 2.159120110371243e-10, 7.571443530988808e-11, 1.514288706197762e-10, 7.571443530988808e-11, 1.257198245855017e-06, 2.514396491710034e-06, 1.257198245855017e-06, 3.331077832539107e-07, 6.662155665078213e-07, 3.331077832539107e-07, 3.345242198652153e-07, 6.690484397304305e-07, 3.345242198652153e-07, 3.338007841524191e-07, 6.676015683048382e-07, 3.338007841524191e-07, 3.340529150878072e-07, 6.681058301756145e-07, 3.340529150878072e-07, 1.265786970177697e-06, 2.531573940355394e-06, 1.265786970177697e-06, 1.013494618313014e-02, 2.026989236626027e-02, 1.013494618313014e-02, 2.139355220701427e-03, 4.278710441402853e-03, 2.139355220701427e-03, 6.780570425638660e-04, 1.356114085127732e-03, 6.780570425638660e-04, 7.829721642341537e-04, 1.565944328468307e-03, 7.829721642341537e-04, 1.117012988608849e-02, 2.234025977217697e-02, 1.117012988608849e-02, 6.711911091436946e-04, 1.342382218287389e-03, 6.711911091436946e-04, 3.242176922061580e-01, 6.484353844123160e-01, 3.242176922061580e-01, 5.838339486650043e-01, 1.167667897330009e+00, 5.838339486650043e-01, 2.852947076426795e-04, 5.705894152853590e-04, 2.852947076426795e-04, 6.572949444829791e-01, 1.314589888965958e+00, 6.572949444829791e-01, 5.233318801799385e-02, 1.046663760359877e-01, 5.233318801799385e-02, 6.046325753787598e-02, 1.209265150757519e-01, 6.046325753787598e-02, 1.559304803806077e+02, 3.118609607612155e+02, 1.559304803806077e+02, 1.180576448857721e+02, 2.361152897715442e+02, 1.180576448857721e+02, 3.436157688663776e+00, 6.872315377327552e+00, 3.436157688663776e+00, 3.351220057105927e+02, 6.702440114211854e+02, 3.351220057105927e+02, 1.576899365910198e+01, 3.153798731820395e+01, 1.576899365910198e+01, 1.576899365910201e+01, 3.153798731820403e+01, 1.576899365910201e+01, 2.316511910158639e-07, 4.633023820317278e-07, 2.316511910158639e-07, 1.023506893831645e-07, 2.047013787663290e-07, 1.023506893831645e-07, 1.020868987710041e-07, 2.041737975420082e-07, 1.020868987710041e-07, 1.023343872027764e-07, 2.046687744055529e-07, 1.023343872027764e-07, 4.026991715547263e-07, 8.053983431094526e-07, 4.026991715547263e-07, 2.313378481781888e-07, 4.626756963563775e-07, 2.313378481781888e-07, 1.669468440988801e-05, 3.338936881977602e-05, 1.669468440988801e-05, 1.701644422947574e-05, 3.403288845895147e-05, 1.701644422947574e-05, 5.017038313921824e-06, 1.003407662784365e-05, 5.017038313921824e-06, 4.985465409316389e-06, 9.970930818632778e-06, 4.985465409316389e-06, 2.374506546855937e-05, 4.749013093711875e-05, 2.374506546855937e-05, 1.702220289958818e-05, 3.404440579917637e-05, 1.702220289958818e-05, 7.676649024438125e-03, 1.535329804887625e-02, 7.676649024438125e-03, 2.352239795705671e-03, 4.704479591411343e-03, 2.352239795705671e-03, 3.183331843725322e-03, 6.366663687450644e-03, 3.183331843725322e-03, 3.195995754136147e-03, 6.391991508272295e-03, 3.195995754136147e-03, 6.392285164105234e-03, 1.278457032821047e-02, 6.392285164105234e-03, 2.546620461894568e-03, 5.093240923789137e-03, 2.546620461894568e-03, 2.127763887880223e+00, 4.255527775760445e+00, 2.127763887880223e+00, 1.886020588568764e-01, 3.772041177137529e-01, 1.886020588568764e-01, 7.122012114518785e-01, 1.424402422903757e+00, 7.122012114518785e-01, 9.357856983119451e-06, 1.871571396623890e-05, 9.357856983119451e-06, 6.477408419648640e-01, 1.295481683929728e+00, 6.477408419648640e-01, 6.477408419648641e-01, 1.295481683929728e+00, 6.477408419648641e-01, 3.544178198822858e+02, 7.088356397645716e+02, 3.544178198822858e+02, 7.935961432733287e+03, 1.587192286546657e+04, 7.935961432733287e+03, 1.864478251404925e+03, 3.728956502809850e+03, 1.864478251404925e+03, 1.743435374495606e+00, 3.486870748991211e+00, 1.743435374495606e+00, 6.520401142402749e+02, 1.304080228480550e+03, 6.520401142402749e+02, 6.520401142402751e+02, 1.304080228480550e+03, 6.520401142402751e+02, 4.937396967074394e-03, 9.874793934148788e-03, 4.937396967074394e-03, 4.562973773489945e-03, 9.125947546979891e-03, 4.562973773489945e-03, 8.434083036067587e-03, 1.686816607213517e-02, 8.434083036067587e-03, 6.043574494495281e-03, 1.208714898899056e-02, 6.043574494495281e-03, 8.118917933940970e-03, 1.623783586788194e-02, 8.118917933940970e-03, 6.120322754714700e-03, 1.224064550942940e-02, 6.120322754714700e-03, 6.696251826169381e-03, 1.339250365233876e-02, 6.696251826169381e-03, 2.479842236599889e-02, 4.959684473199778e-02, 2.479842236599889e-02, 1.433307538641288e-02, 2.866615077282576e-02, 1.433307538641288e-02, 5.248089815902427e-03, 1.049617963180485e-02, 5.248089815902427e-03, 5.245290364839024e-03, 1.049058072967805e-02, 5.245290364839024e-03, 1.273481186380002e-02, 2.546962372760004e-02, 1.273481186380002e-02, 6.347499337337184e-03, 1.269499867467437e-02, 6.347499337337184e-03, 1.168528415844446e-01, 2.337056831688891e-01, 1.168528415844446e-01, 4.983437685365086e-02, 9.966875370730172e-02, 4.983437685365086e-02, 5.895068438990334e-02, 1.179013687798067e-01, 5.895068438990334e-02, 6.476131908379304e-02, 1.295226381675861e-01, 6.476131908379304e-02, 6.505803325104002e-02, 1.301160665020801e-01, 6.505803325104002e-02, 7.156822098152887e-03, 1.431364419630577e-02, 7.156822098152887e-03, 6.043634962089249e+02, 1.208726992417850e+03, 6.043634962089249e+02, 1.848606725429234e+01, 3.697213450858469e+01, 1.848606725429234e+01, 9.165945946997449e-02, 1.833189189399490e-01, 9.165945946997449e-02, 5.398148394837160e+00, 1.079629678967432e+01, 5.398148394837160e+00, 5.398148394837293e+00, 1.079629678967459e+01, 5.398148394837293e+00, 2.871952501153788e+04, 5.743905002307583e+04, 2.871952501153788e+04, 1.065531503033938e+05, 2.131063006067876e+05, 1.065531503033938e+05, -4.186581408096390e+07, -8.373162816192780e+07, -4.186581408096390e+07, 5.357232118591826e+01, 1.071446423718365e+02, 5.357232118591826e+01, 3.343906739498941e+02, 6.687813478997884e+02, 3.343906739498941e+02, 3.295847112501936e+03, 6.591694225003873e+03, 3.295847112501936e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_r2scan01_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scan01", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-7.935798095728348e-05, -7.935798095728345e-05, -7.935737300055822e-05, -7.935737300055826e-05, -7.935463401850623e-05, -7.935463401850622e-05, -3.543024238568423e-05, -3.543024238568421e-05, -2.289070618713261e-05, -2.289070618713261e-05, -1.030297095832426e-05, -1.030297095832426e-05, -5.089231025075123e-04, -5.089231025075123e-04, -1.871886778000956e-04, -1.871886778000955e-04, -1.880714903544520e-04, -1.880714903544521e-04, -1.876806811808189e-04, -1.876806811808189e-04, -1.877621201942075e-04, -1.877621201942076e-04, -5.117675240494921e-04, -5.117675240494918e-04, -2.458980613572503e-03, -2.458980613572503e-03, -1.704767347769234e-03, -1.704767347769092e-03, -2.494311730203813e-03, -2.494311730203812e-03, 6.000887354312381e-06, 6.000887354312381e-06, -2.091155293835394e-03, -2.091155293835395e-03, -2.514743629980514e-03, -2.514743629980515e-03, -7.701595847218216e-03, -7.701595847218216e-03, -7.270313329201797e-03, -7.270313329201803e-03, -5.300930695730456e-04, -5.300930695730456e-04, -2.109386886162463e-02, -2.109386886162464e-02, -1.807579484734644e-03, -1.807579484734643e-03, -2.169164464894910e-03, -2.169164464894911e-03, -6.091159283847704e-06, -6.091159283847711e-06, -1.203458030455784e-05, -1.203458030455784e-05, -6.072663079808402e-05, -6.072663079808402e-05, -2.573744830356657e-06, -2.573744830356657e-06, -9.659825956769203e-06, -9.659825956769222e-06, -9.659825956769266e-06, -9.659825956769249e-06, -3.729418968469043e-04, -3.729418968469043e-04, -2.048311034921930e-04, -2.048311034921930e-04, -2.041403362043097e-04, -2.041403362043097e-04, -2.047872809642389e-04, -2.047872809642389e-04, -5.325588884161176e-04, -5.325588884161174e-04, -3.727494959844753e-04, -3.727494959844752e-04, -1.093980939506396e-03, -1.093980939506398e-03, -1.172470908601338e-03, -1.172470908601338e-03, -4.916380298220355e-04, -4.916380298220355e-04, -4.985010638161029e-04, -4.985010638161032e-04, -4.781429310907815e-04, -4.781429310907903e-04, -1.168732263597846e-03, -1.168732263597843e-03, -1.790260930111948e-02, -1.790260930111948e-02, -8.371709380236394e-03, -8.371709380236401e-03, -6.798632245320692e-03, -6.798632245320694e-03, -7.743957335407620e-03, -7.743957335407627e-03, -1.626466607475972e-02, -1.626466607475972e-02, -7.303712011508041e-03, -7.303712011508041e-03, -2.393097563414316e-02, -2.393097563414318e-02, -3.153584426785527e-03, -3.153584426785530e-03, -3.158140586913780e-04, -3.158140586913782e-04, -9.065548816106295e-04, -9.065548816106295e-04, -1.173045761925798e-03, -1.173045761925798e-03, -1.173045761925799e-03, -1.173045761925799e-03, -2.230858750404401e-06, -2.230858750404401e-06, -4.931247089889106e-03, -4.931247089889107e-03, -6.365073901611093e-06, -6.365073901611091e-06, -1.420607479721396e-04, -1.420607479721396e-04, -5.431506769146584e-06, -5.431506769146580e-06, -5.431506769146509e-06, -5.431506769146509e-06, -1.429449955716247e-02, -1.429449955716247e-02, -1.287715017693252e-02, -1.287715017693252e-02, -2.122896439241432e-02, -2.122896439241435e-02, -1.646620097931468e-02, -1.646620097931469e-02, -2.069005114576421e-02, -2.069005114576420e-02, -1.654298594034578e-02, -1.654298594034577e-02, -1.704883910170930e-02, -1.704883910170931e-02, -2.355990720614985e-02, -2.355990720614985e-02, -2.299078178222676e-02, -2.299078178222677e-02, -1.124463862104016e-02, -1.124463862104016e-02, -1.043829968477455e-02, -1.043829968477455e-02, -2.215989213984889e-02, -2.215989213984889e-02, -1.996390514597587e-02, -1.996390514597588e-02, -5.747334367038492e-03, -5.747334367038490e-03, 1.291577004469400e-04, 1.291577004469400e-04, -2.383864727211086e-02, -2.383864727211086e-02, -1.119536349354980e-02, -1.119536349354990e-02, -1.143373281131784e-02, -1.143373281131776e-02, -8.867450111900677e-03, -8.867450111900680e-03, -2.761222357999062e-05, -2.761222357999064e-05, -2.707936336084039e-02, -2.707936336084038e-02, -3.757664629212559e-02, -3.757664629212559e-02, -3.041216637692321e-02, -3.041216637692322e-02, -3.041216637692402e-02, -3.041216637692403e-02, -5.650953055119701e-07, -5.650953055119703e-07, -1.266506135351861e-03, -1.266506135351861e-03, -4.100206599857105e-08, -4.100206599857103e-08, -3.324531959209556e-04, -3.324531959209555e-04, -1.063817164565290e-04, -1.063817164565291e-04, -9.563355419984301e-07, -9.563355419984303e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
