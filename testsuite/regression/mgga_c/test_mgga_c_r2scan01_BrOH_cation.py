
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_r2scan01_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scan01", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.731077455810960e-02, -2.731079103958695e-02, -2.731041082966151e-02, -2.731015117677525e-02, -2.731035210648167e-02, -2.731035210648167e-02, -4.814487741937635e-02, -4.814108519685231e-02, -4.801911401062690e-02, -4.786449558398741e-02, -4.796658362397047e-02, -4.796658362397047e-02, -4.138237447479303e-02, -4.122564481259930e-02, -3.748311944082438e-02, -3.746285521477635e-02, -3.744534043949325e-02, -3.744534043949325e-02, -1.541474987079458e-02, -1.597029212808901e-02, -4.869981666989533e-02, -1.501985076387944e-02, -1.233141570024239e-02, -1.233141570024238e-02, -5.159989237136902e-04, -6.113361482433913e-04, -4.363943335101796e-03, -3.178120112194678e-04, -3.717679855458489e-04, -3.717679855458491e-04, -2.644909610787154e-02, -2.645688171528334e-02, -2.644829803197916e-02, -2.645521871789162e-02, -2.645363908665452e-02, -2.645363908665452e-02, -2.535509729737435e-02, -2.496048522533302e-02, -2.476902337919862e-02, -2.442137109918126e-02, -2.541157292455576e-02, -2.541157292455576e-02, -2.905515905973611e-02, -3.297417360613224e-02, -3.530829232123742e-02, -4.389390207844229e-02, -2.871038000416124e-02, -2.871038000416121e-02, -1.064260557129712e-02, -1.490368130129216e-02, -1.003729991878845e-02, -5.551515088823902e-02, -1.247942434775565e-02, -1.247942434775566e-02, -2.390098965475376e-04, -3.196504042412556e-04, -2.796659603755218e-04, -7.262768943021231e-03, -3.106031742547759e-04, -3.106031742547733e-04, -2.490755967870362e-02, -2.451246514949512e-02, -2.464820810977446e-02, -2.476326569773976e-02, -2.470591973667010e-02, -2.470591973667010e-02, -2.597042098947384e-02, -2.174677057934018e-02, -2.287503792658389e-02, -2.406118412459058e-02, -2.351979785011339e-02, -2.351979785011339e-02, -3.635108859256185e-02, -1.578342981760782e-02, -1.909779212561254e-02, -2.759940575446482e-02, -2.215797516255927e-02, -2.215797516255927e-02, -2.488168747002013e-02, -4.011419467742460e-03, -5.656249625384699e-03, -2.708215784939540e-02, -9.184667901998133e-03, -9.184667901998136e-03, -9.669923089178584e-04, -6.660044967706146e-05, -1.592651416876383e-04, -8.398559049833972e-03, -2.904824454304800e-04, -2.904824454304726e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_r2scan01_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scan01", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-4.167224022338200e-02, -4.167235245763528e-02, -4.167196514991922e-02, -4.167215440617474e-02, -4.167082944201927e-02, -4.167062020977262e-02, -4.167388113962750e-02, -4.167454502740343e-02, -4.167187080725999e-02, -4.167298163547207e-02, -4.167187080725999e-02, -4.167298163547207e-02, -6.901257017296661e-02, -6.901511754616954e-02, -6.899863796777850e-02, -6.900154690605122e-02, -6.862473007307580e-02, -6.862088421157797e-02, -6.862041551907661e-02, -6.861780293929727e-02, -6.871919844748892e-02, -6.864943484453233e-02, -6.871919844748892e-02, -6.864943484453233e-02, -7.497897507542869e-02, -7.456838259827975e-02, -7.473861298419472e-02, -7.423477903374576e-02, -6.795950593672945e-02, -6.864297808193663e-02, -7.074299067240630e-02, -7.054780849426784e-02, -6.731640814537927e-02, -7.335007414973031e-02, -6.731640814537927e-02, -7.335007414973031e-02, -4.767048493135480e-02, -4.573538196118691e-02, -4.876520829955860e-02, -4.645873468932084e-02, -8.972159434509439e-02, -8.564722855628058e-02, -3.176254290269237e-02, -3.120808213929961e-02, -2.955791748880309e-02, -5.730253536730365e-02, -2.955791748880315e-02, -5.730253536730368e-02, -1.730492612160701e-02, -1.723404202325171e-02, -2.118771689973992e-03, -2.033557803467653e-03, -9.472662398354313e-03, -8.944712007068574e-03, -6.841895366699954e-04, -6.931155382308010e-04, -9.544751310609748e-04, -1.281086686680563e-03, -9.544751310609670e-04, -1.281086686680555e-03, -3.784265354716149e-02, -3.786264032627776e-02, -3.779667137782993e-02, -3.781719128214111e-02, -3.783933360179609e-02, -3.785969124171620e-02, -3.779918469821392e-02, -3.781924119309864e-02, -3.781984004379419e-02, -3.784019677882117e-02, -3.781984004379419e-02, -3.784019677882117e-02, -5.488774752164626e-02, -5.489204465121390e-02, -5.314698923856445e-02, -5.316949816482448e-02, -5.420343807338918e-02, -5.406151283921747e-02, -5.254810454097428e-02, -5.240389408423929e-02, -5.406418976288844e-02, -5.443772324343547e-02, -5.406418976288844e-02, -5.443772324343547e-02, -4.069763337185315e-02, -4.098298574823688e-02, -2.715157630301629e-02, -2.709392785910619e-02, -4.873915136918438e-02, -4.371407226950905e-02, -3.359718889443120e-02, -2.767301127653897e-02, -3.667023750055688e-02, -4.205464035994159e-02, -3.667023750055687e-02, -4.205464035994156e-02, -2.251671668577598e-02, -2.226447425848557e-02, -5.555274153503474e-02, -5.530695043573228e-02, -2.136530275677287e-02, -2.007661836347020e-02, -3.048437137279262e-02, -3.059487749955132e-02, -2.430111323070423e-02, -2.253408298811047e-02, -2.430111323070428e-02, -2.253408298811026e-02, -4.752070822004809e-04, -4.604581843093744e-04, -6.363448726948629e-04, -6.284604754719687e-04, -6.084740973915039e-04, -5.823532276184759e-04, -1.462565056465565e-02, -1.452202928339650e-02, -7.359316065261829e-04, -5.753684756917764e-04, -7.359316065261790e-04, -5.753684756917742e-04, -2.636845619719588e-02, -2.605936803197872e-02, -2.888759523693510e-02, -2.858083932439931e-02, -2.806603722983061e-02, -2.775749348373032e-02, -2.733346448361759e-02, -2.702616496309441e-02, -2.770560004450458e-02, -2.739769798926773e-02, -2.770560004450458e-02, -2.739769798926773e-02, -2.484230769594495e-02, -2.456032249406368e-02, -3.905536183606192e-02, -3.875499702302413e-02, -3.677622345138325e-02, -3.645024695921014e-02, -3.339215140203518e-02, -3.311796811347490e-02, -3.529403457491535e-02, -3.501177391316440e-02, -3.529403457491535e-02, -3.501177391316442e-02, -2.723213673716505e-02, -2.699333216214870e-02, -4.866220532566388e-02, -4.836627413083029e-02, -5.175966220979985e-02, -5.111199704171025e-02, -4.907374321906358e-02, -4.850589739719067e-02, -5.003153505748995e-02, -5.005910188823595e-02, -5.003153505748993e-02, -5.005910188823592e-02, -4.590750801761311e-02, -4.530490008744500e-02, -1.170650772916205e-02, -1.164331653924715e-02, -1.176859033165798e-02, -1.134504557612356e-02, -4.348833838300672e-02, -4.197077728407222e-02, -2.078696857083390e-02, -1.953839260036365e-02, -2.078696857083387e-02, -1.953839260036361e-02, -1.909348232795089e-03, -1.847204693195932e-03, -1.311249792893687e-04, -1.308967944534726e-04, -4.606913696991476e-04, -4.445785143145690e-04, -2.263144691486462e-02, -2.227515157558636e-02, -6.908042462054673e-04, -5.560514989547824e-04, -6.908042462054559e-04, -5.560514989547754e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_r2scan01_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scan01", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([8.467436152454908e-11, 1.693487230490982e-10, 8.467436152454908e-11, 8.467424819101010e-11, 1.693484963820202e-10, 8.467424819101010e-11, 8.466777731729846e-11, 1.693355546345969e-10, 8.466777731729846e-11, 8.466937101435292e-11, 1.693387420287058e-10, 8.466937101435292e-11, 8.466938743885728e-11, 1.693387748777146e-10, 8.466938743885728e-11, 8.466938743885728e-11, 1.693387748777146e-10, 8.466938743885728e-11, 1.382099790654848e-06, 2.764199581309696e-06, 1.382099790654848e-06, 1.382402313489733e-06, 2.764804626979468e-06, 1.382402313489733e-06, 1.389532734741936e-06, 2.779065469483872e-06, 1.389532734741936e-06, 1.379878453984398e-06, 2.759756907968796e-06, 1.379878453984398e-06, 1.384208352142680e-06, 2.768416704285360e-06, 1.384208352142680e-06, 1.384208352142680e-06, 2.768416704285360e-06, 1.384208352142680e-06, 1.340156536487776e-03, 2.680313072975552e-03, 1.340156536487776e-03, 1.334345680514776e-03, 2.668691361029551e-03, 1.334345680514776e-03, 1.171966602668406e-03, 2.343933205336812e-03, 1.171966602668406e-03, 9.909516563623051e-04, 1.981903312724610e-03, 9.909516563623051e-04, 1.040293203302467e-03, 2.080586406604935e-03, 1.040293203302467e-03, 1.040293203302467e-03, 2.080586406604935e-03, 1.040293203302467e-03, 5.319843870627166e-01, 1.063968774125433e+00, 5.319843870627166e-01, 5.429116658687823e-01, 1.085823331737564e+00, 5.429116658687823e-01, 8.552927630795732e-04, 1.710585526159146e-03, 8.552927630795732e-04, 3.478508489720561e-01, 6.957016979441123e-01, 3.478508489720561e-01, 5.353856148039242e-01, 1.070771229607848e+00, 5.353856148039242e-01, 5.353856148039263e-01, 1.070771229607853e+00, 5.353856148039263e-01, 6.464412229840552e+03, 1.292882445968110e+04, 6.464412229840552e+03, 3.652289138629827e+02, 7.304578277259653e+02, 3.652289138629827e+02, 3.627100464809798e+00, 7.254200929619594e+00, 3.627100464809798e+00, 2.998441198930126e+02, 5.996882397860253e+02, 2.998441198930126e+02, 4.258549607676532e+02, 8.517099215353063e+02, 4.258549607676532e+02, 4.258549607676443e+02, 8.517099215352887e+02, 4.258549607676443e+02, 1.029325537123676e-07, 2.058651074247351e-07, 1.029325537123676e-07, 1.032079007665786e-07, 2.064158015331572e-07, 1.032079007665786e-07, 1.029315618632600e-07, 2.058631237265199e-07, 1.029315618632600e-07, 1.031751004815243e-07, 2.063502009630486e-07, 1.031751004815243e-07, 1.030789399060636e-07, 2.061578798121272e-07, 1.030789399060636e-07, 1.030789399060636e-07, 2.061578798121272e-07, 1.030789399060636e-07, 8.253139044061620e-06, 1.650627808812324e-05, 8.253139044061620e-06, 7.605667590386437e-06, 1.521133518077287e-05, 7.605667590386437e-06, 7.816041649683247e-06, 1.563208329936649e-05, 7.816041649683247e-06, 7.225154207946294e-06, 1.445030841589259e-05, 7.225154207946294e-06, 8.095606908038046e-06, 1.619121381607609e-05, 8.095606908038046e-06, 8.095606908038046e-06, 1.619121381607609e-05, 8.095606908038046e-06, 6.235162323138545e-03, 1.247032464627709e-02, 6.235162323138545e-03, 6.700294050903987e-03, 1.340058810180797e-02, 6.700294050903987e-03, 1.031850677582250e-02, 2.063701355164500e-02, 1.031850677582250e-02, 1.486579657013261e-02, 2.973159314026522e-02, 1.486579657013261e-02, 5.815940276773413e-03, 1.163188055354683e-02, 5.815940276773413e-03, 5.815940276773415e-03, 1.163188055354683e-02, 5.815940276773415e-03, 5.611802564025380e-01, 1.122360512805076e+00, 5.611802564025380e-01, 4.451630500932730e-01, 8.903261001865461e-01, 4.451630500932730e-01, 6.173576905394541e-01, 1.234715381078908e+00, 6.173576905394541e-01, 6.248544181602322e-05, 1.249708836320464e-04, 6.248544181602322e-05, 2.450423277004703e-01, 4.900846554009406e-01, 2.450423277004703e-01, 2.450423277004748e-01, 4.900846554009495e-01, 2.450423277004748e-01, 3.100092461039715e+02, 6.200184922079432e+02, 3.100092461039715e+02, 2.137871860343774e+02, 4.275743720687548e+02, 2.137871860343774e+02, 1.540388907123600e+03, 3.080777814247200e+03, 1.540388907123600e+03, 1.364798492466409e+00, 2.729596984932818e+00, 1.364798492466409e+00, 4.807852953542476e+02, 9.615705907084953e+02, 4.807852953542476e+02, 4.807852953542466e+02, 9.615705907084931e+02, 4.807852953542466e+02, 5.737318257187578e-03, 1.147463651437515e-02, 5.737318257187578e-03, 5.246326587896108e-03, 1.049265317579222e-02, 5.246326587896108e-03, 5.408728298827079e-03, 1.081745659765416e-02, 5.408728298827079e-03, 5.551022195595116e-03, 1.110204439119023e-02, 5.551022195595116e-03, 5.479233276448075e-03, 1.095846655289615e-02, 5.479233276448075e-03, 5.479233276448075e-03, 1.095846655289615e-02, 5.479233276448075e-03, 7.484900531394250e-03, 1.496980106278850e-02, 7.484900531394250e-03, 6.203703674250260e-03, 1.240740734850052e-02, 6.203703674250260e-03, 6.261094465235427e-03, 1.252218893047085e-02, 6.261094465235427e-03, 6.556221911058106e-03, 1.311244382211621e-02, 6.556221911058106e-03, 6.440058486111427e-03, 1.288011697222285e-02, 6.440058486111427e-03, 6.440058486111428e-03, 1.288011697222286e-02, 6.440058486111428e-03, 6.036142782391962e-03, 1.207228556478392e-02, 6.036142782391962e-03, 1.563604120060994e-01, 3.127208240121989e-01, 1.563604120060994e-01, 1.024271113283731e-01, 2.048542226567463e-01, 1.024271113283731e-01, 5.530684825304293e-02, 1.106136965060859e-01, 5.530684825304293e-02, 7.413545704722171e-02, 1.482709140944434e-01, 7.413545704722171e-02, 7.413545704722166e-02, 1.482709140944433e-01, 7.413545704722166e-02, 1.427713067257312e-02, 2.855426134514624e-02, 1.427713067257312e-02, 9.314595712342399e+00, 1.862919142468480e+01, 9.314595712342399e+00, 1.854438758406856e+00, 3.708877516813712e+00, 1.854438758406856e+00, 7.633717804274844e-02, 1.526743560854969e-01, 7.633717804274844e-02, 1.436329652983797e+00, 2.872659305967594e+00, 1.436329652983797e+00, 1.436329652983786e+00, 2.872659305967572e+00, 1.436329652983786e+00, 3.525149583285528e+01, 7.050299166571057e+01, 3.525149583285528e+01, 4.429980611833745e+03, 8.859961223667489e+03, 4.429980611833745e+03, 3.576668823274973e+03, 7.153337646549944e+03, 3.576668823274973e+03, 2.754986945854262e+00, 5.509973891708524e+00, 2.754986945854262e+00, 7.473581880939768e+02, 1.494716376187953e+03, 7.473581880939768e+02, 7.473581880939697e+02, 1.494716376187939e+03, 7.473581880939697e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_r2scan01_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scan01", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.123767975008888e-05, -1.123767975008887e-05, -1.123777898237259e-05, -1.123777898237259e-05, -1.123759601453617e-05, -1.123759601453617e-05, -1.123611350340464e-05, -1.123611350340464e-05, -1.123697927188790e-05, -1.123697927188790e-05, -1.123697927188790e-05, -1.123697927188790e-05, -4.980060381793157e-04, -4.980060381793155e-04, -4.982256622064906e-04, -4.982256622064902e-04, -5.040459894812012e-04, -5.040459894812016e-04, -5.024006241779494e-04, -5.024006241779496e-04, -5.023509820981481e-04, -5.023509820981477e-04, -5.023509820981481e-04, -5.023509820981477e-04, -6.064088336586108e-04, -6.064088336586596e-04, -6.236214736982952e-04, -6.236214736983402e-04, -8.690516411406739e-04, -8.690516411404896e-04, -2.340889753425408e-04, -2.340889753425408e-04, -3.832984214533647e-04, -3.832984214532592e-04, -3.832984214533647e-04, -3.832984214532592e-04, -3.827353306962199e-02, -3.827353306962199e-02, -4.073312526894552e-02, -4.073312526894555e-02, -3.915416885873891e-04, -3.915416885873891e-04, -6.625372212766607e-03, -6.625372212765569e-03, -2.193802739584196e-02, -2.193802739584198e-02, -2.193802739584206e-02, -2.193802739584214e-02, -2.212529367832979e-02, -2.212529367832984e-02, -1.245246651757152e-03, -1.245246651757264e-03, -1.123806375555984e-03, -1.123806375555984e-03, -8.629245669308361e-05, -8.629245669308361e-05, -4.002217378576149e-04, -4.002217378576155e-04, -4.002217378576033e-04, -4.002217378576036e-04, -2.053563101083110e-04, -2.053563101083110e-04, -2.060817000418192e-04, -2.060817000418192e-04, -2.053729378688759e-04, -2.053729378688760e-04, -2.060138219328730e-04, -2.060138219328730e-04, -2.057320157421539e-04, -2.057320157421539e-04, -2.057320157421539e-04, -2.057320157421539e-04, -8.112880013209196e-04, -8.112880013209199e-04, -7.659615953921131e-04, -7.659615953921126e-04, -7.590912960678512e-04, -7.590912960678512e-04, -7.165334640598688e-04, -7.165334640598690e-04, -8.111939632691464e-04, -8.111939632691463e-04, -8.111939632691464e-04, -8.111939632691463e-04, -1.540876259701124e-02, -1.540876259701124e-02, -1.967725190207053e-02, -1.967725190207055e-02, -1.777791960258129e-02, -1.777791960258130e-02, -2.392976782816994e-02, -2.392976782816997e-02, -1.511900206475719e-02, -1.511900206475718e-02, -1.511900206475719e-02, -1.511900206475719e-02, -3.327193197093117e-03, -3.327193197093121e-03, -3.279335295574821e-02, -3.279335295574826e-02, -2.595401636924217e-03, -2.595401636924218e-03, -3.425978208908157e-03, -3.425978208908157e-03, 6.476824137729505e-05, 6.476824137706561e-05, 6.476824137717851e-05, 6.476824137726575e-05, -3.618744934942427e-06, -3.618744934942427e-06, -1.559605237747070e-05, -1.559605237747070e-05, -1.597238415203871e-04, -1.597238415203871e-04, -1.400746058524712e-03, -1.400746058524712e-03, -3.700265962008212e-05, -3.700265962008210e-05, -3.700265962008171e-05, -3.700265962008171e-05, -1.602936092382222e-02, -1.602936092382223e-02, -1.435366762509400e-02, -1.435366762509400e-02, -1.491043118652874e-02, -1.491043118652876e-02, -1.539695467951403e-02, -1.539695467951404e-02, -1.515125095607171e-02, -1.515125095607170e-02, -1.515125095607171e-02, -1.515125095607170e-02, -1.861342397896251e-02, -1.861342397896252e-02, -9.829614712012390e-03, -9.829614712012392e-03, -1.140292594045075e-02, -1.140292594045075e-02, -1.357322858963002e-02, -1.357322858963001e-02, -1.249308768641036e-02, -1.249308768641036e-02, -1.249308768641036e-02, -1.249308768641037e-02, -1.929830194598681e-02, -1.929830194598682e-02, -2.278707191902331e-02, -2.278707191902330e-02, -2.526416780211957e-02, -2.526416780211957e-02, -2.790839144490585e-02, -2.790839144490587e-02, -2.681059035447656e-02, -2.681059035447656e-02, -2.681059035447655e-02, -2.681059035447653e-02, -1.710012392549216e-02, -1.710012392549216e-02, -4.303307053519492e-03, -4.303307053519495e-03, -1.100383431389332e-03, -1.100383431389331e-03, -3.511333797977580e-02, -3.511333797977580e-02, -4.828965837036734e-03, -4.828965837036737e-03, -4.828965837036674e-03, -4.828965837036675e-03, -3.299297435714045e-05, -3.299297435714045e-05, -2.718176725892987e-07, -2.718176725892986e-07, -2.897939753146303e-04, -2.897939753146302e-04, -1.023456557191070e-02, -1.023456557191147e-02, -7.730370082208765e-05, -7.730370082208763e-05, -7.730370082208339e-05, -7.730370082208345e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
