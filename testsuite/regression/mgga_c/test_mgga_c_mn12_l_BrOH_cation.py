
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_mn12_l_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn12_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.248677008658104e-01, -2.248743556958099e-01, -2.249013490836446e-01, -2.739915485543650e-01, -2.870188186278425e-01, -3.000660468000144e-01, -2.607340553173810e-04, 2.770824758204343e-02, 2.630519276352329e-02, 2.687455541793280e-02, 2.681167837666094e-02, -1.142540201297620e-03, -1.951418893932130e-01, -2.741173075189035e-02, 1.118936632991456e-01, 4.630206580250737e-02, -2.174435850595413e-01, 1.042806473384316e-01, 2.296186012315770e-02, -3.929363232118700e-02, 1.125382784556860e-01, 4.852357382480924e-02, 7.213366138971027e-02, 7.153484195343038e-02, -2.659019188213942e-02, -2.771848086500714e-02, -8.779770551010312e-02, -1.668456277088486e-02, -1.730951150107595e-02, -1.730951150107593e-02, -2.585872750836787e-01, -2.671116069463759e-01, -2.659153896825026e-01, -2.670343288436137e-01, -2.530628220316448e-01, -2.593024105148165e-01, 1.532461046423731e-02, 1.070189935382554e-02, 5.693671804492070e-02, 5.108882098838559e-02, -2.648244344389348e-02, 1.095867632303965e-02, -5.242241496063490e-02, -1.105410535347581e-01, -1.330867292944943e-02, -5.096057359482396e-02, -6.073206278555775e-02, -6.130542970406564e-02, -4.288014271242105e-02, 4.114480442978585e-02, -5.988345671510777e-02, -1.022569362154886e-01, -1.759822799779366e-03, -1.759822799779499e-03, -1.326672251034455e-02, -1.635948504126928e-02, -1.285619173948376e-02, -8.638547104242079e-02, -1.431925674922599e-02, -1.431925674922600e-02, -4.195317333768209e-01, -2.336732284533007e-01, -2.707697230419200e-01, -3.266158318839041e-01, -2.926266009204616e-01, -3.000940256356512e-01, -3.693044129569342e-01, -4.351341277511360e-02, -6.213256294820205e-02, -1.053098749145004e-01, -8.416259890434835e-02, -7.877067150129649e-02, -8.663083786637142e-02, 3.183298884230561e-02, 1.261820463801440e-02, -1.535970583387915e-02, -7.740105342566850e-03, -7.464313401429543e-03, -6.197072942363408e-03, -2.200096122165495e-01, -9.361048042177354e-02, -2.534916996621035e-02, -5.285647084237623e-02, -5.285647084237627e-02, -7.998813287800670e-02, -4.940310044636157e-03, -2.187568668818569e-02, -3.003480841795113e-01, -1.351689727739795e-02, -1.351700125763581e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_mn12_l_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn12_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-5.902903615300265e-01, -5.902908859955447e-01, -5.903088916105929e-01, -5.903097760223387e-01, -5.903856909494759e-01, -5.903847130485818e-01, -6.026551497481653e-01, -6.026588133810776e-01, -6.159679050372561e-01, -6.159743537930670e-01, -6.319779873201433e-01, -6.319847648637362e-01, -2.957066246006853e-01, -2.957072547254099e-01, -3.408518075078511e-01, -3.408515667045424e-01, -3.430384807519339e-01, -3.430387523348578e-01, -3.421594036508016e-01, -3.421596016940251e-01, -3.422413003742992e-01, -3.422465409852743e-01, -2.963893093977384e-01, -2.963715461774987e-01, 1.665339321248366e-01, 1.680763764316355e-01, -1.903778403228024e-01, -1.895070531000392e-01, -1.802508844462091e-01, -1.792922612900840e-01, -2.367863148880022e-01, -2.367114981994214e-01, 1.822552061812048e-01, 1.537438613953168e-01, -1.915816951689247e-01, -1.834057861510662e-01, -1.603129769290383e-01, -1.573662552375321e-01, -1.607320945981517e-01, -1.516955348298783e-01, -1.575743150301500e-01, -1.599219706108617e-01, 1.768137960886143e-01, 1.759162427823052e-01, 1.033579449394867e-01, 2.033970643410116e-01, 1.008587723801908e-01, 1.988482551621900e-01, -3.538158948078662e-02, -3.242723721368418e-02, -3.706075154136178e-02, -3.355626332541145e-02, -8.752243490138154e-02, -7.748585335507852e-02, -2.127151023350315e-02, -2.176538643012508e-02, -1.923144590121643e-02, -3.779099870705106e-02, -1.923144590121626e-02, -3.779099870705101e-02, -5.589232729471478e-01, -5.590363120081991e-01, -5.406161613917957e-01, -5.407360275627815e-01, -5.354007925018625e-01, -5.355191577975549e-01, -5.402784173030502e-01, -5.403955486886830e-01, -5.845418774121564e-01, -5.846548716743778e-01, -5.616697271099027e-01, -5.617851893657030e-01, -2.271112961732427e-01, -2.271131694769826e-01, -2.281105936635514e-01, -2.281220604904639e-01, -2.499515670128751e-01, -2.500469659853046e-01, -2.537878148901497e-01, -2.538704647095545e-01, -1.651476936502867e-01, -1.656480664366929e-01, -2.279074721623860e-01, -2.280911633448341e-01, -1.855482536574259e-01, -1.858383609312424e-01, -2.388203866197304e-01, -2.387261523003745e-01, -1.946649065635593e-01, -1.925939147436530e-01, -2.322415726150136e-01, -2.287600430171126e-01, -1.985497778995846e-01, -2.047272246140915e-01, -2.354954835230478e-01, -2.417208331369393e-01, 1.103300860240354e-01, 1.112825827173229e-01, -5.299884020566759e-02, -5.278478291887766e-02, 4.714097287829675e-02, 5.497824083842300e-02, -3.930613665086430e-01, -3.931471624064331e-01, 7.591468220014057e-02, 8.000840666872719e-02, 7.591468220014082e-02, 8.000840666872651e-02, -1.765498620973595e-02, -1.676829728278714e-02, -2.132624102471872e-02, -2.089392891261187e-02, -1.731183815968931e-02, -1.603288830343746e-02, -2.942952492928183e-02, -2.826656860069192e-02, -2.434031124888509e-02, -1.618245293600023e-02, -2.434031124888500e-02, -1.618245293600004e-02, -9.124961967120591e-01, -9.093668047989512e-01, -6.428937975845481e-01, -6.410905210305887e-01, -6.909161103232510e-01, -6.887969670510637e-01, -7.986330801166518e-01, -7.961447625169699e-01, -7.289737345555223e-01, -7.266942930378550e-01, -7.591759644711348e-01, -7.568745009765305e-01, -8.460457645711902e-01, -8.436433417538085e-01, -9.903519822056622e-02, -9.860367000778700e-02, -1.851610542393516e-01, -1.846213030018265e-01, -2.285191690585405e-01, -2.278175729734064e-01, -2.174192715695704e-01, -2.168340672600046e-01, -2.015839557218974e-01, -2.010267484132404e-01, -2.188409940731224e-01, -2.185702059126758e-01, -1.652101207282210e-01, -1.647894824614155e-01, -1.824730188672037e-01, -1.815772193801264e-01, -1.049404486721165e-01, -1.044674461388102e-01, -1.316914357801195e-01, -1.317252966175395e-01, -1.320174192146150e-01, -1.320510912392320e-01, -1.689323553898628e-01, -1.685956577542766e-01, -2.594818464327079e-01, -2.563557128804685e-01, -6.977890371934720e-02, -6.323852018691430e-02, -9.950680887095099e-02, -9.830815294600988e-02, 6.691676230862122e-02, 7.339440029976022e-02, 6.691676230861886e-02, 7.339440029975890e-02, -1.044089244112810e-01, -9.906389106712696e-02, -6.486011752200133e-03, -6.467326380069709e-03, -2.973562581399964e-02, -2.743255271857588e-02, -2.765792926384416e-01, -2.661647443123286e-01, -2.223769251842695e-02, -1.539656963226501e-02, -2.223845553149773e-02, -1.539721669276141e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_mn12_l_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn12_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.313352982175727e-09, -1.062670596435145e-08, -5.313352982175727e-09, -5.313305744076283e-09, -1.062661148815257e-08, -5.313305744076283e-09, -5.313072226377450e-09, -1.062614445275490e-08, -5.313072226377450e-09, -4.641163998948093e-10, -9.282327997896186e-10, -4.641163998948093e-10, -2.393503633740829e-10, -4.787007267481658e-10, -2.393503633740829e-10, -1.167774993094925e-10, -2.335549986189850e-10, -1.167774993094925e-10, 1.626923975324960e-06, 3.253847950649920e-06, 1.626923975324960e-06, 6.789570298509606e-07, 1.357914059701921e-06, 6.789570298509606e-07, 6.761062604427805e-07, 1.352212520885561e-06, 6.761062604427805e-07, 6.769671465842351e-07, 1.353934293168470e-06, 6.769671465842351e-07, 6.772277252884833e-07, 1.354455450576967e-06, 6.772277252884833e-07, 1.626597498344270e-06, 3.253194996688541e-06, 1.626597498344270e-06, 4.206278811940233e-02, 8.412557623880466e-02, 4.206278811940233e-02, 1.238134861895215e-02, 2.476269723790430e-02, 1.238134861895215e-02, 2.087597902681918e-03, 4.175195805363837e-03, 2.087597902681918e-03, 6.402408485887520e-03, 1.280481697177504e-02, 6.402408485887520e-03, 5.111594137894427e-02, 1.022318827578885e-01, 5.111594137894427e-02, 2.099638556517611e-03, 4.199277113035222e-03, 2.099638556517611e-03, 2.934255497275957e+00, 5.868510994551914e+00, 2.934255497275957e+00, 5.704622589244885e+00, 1.140924517848977e+01, 5.704622589244885e+00, 2.153242988582533e-03, 4.306485977165066e-03, 2.153242988582533e-03, 7.200930650712768e-01, 1.440186130142551e+00, 7.200930650712768e-01, 2.560348597437564e-01, 5.120697194875138e-01, 2.560348597437564e-01, 2.825482266540242e-01, 5.650964533080498e-01, 2.825482266540242e-01, 2.846437763690642e-01, 5.692875527432791e-01, 2.846437763690642e-01, 1.885084507110786e-01, 3.770169014211292e-01, 1.885084507110786e-01, 8.664237264699048e-01, 1.732847452939957e+00, 8.664237264699048e-01, 7.504166487894715e-02, 1.500833297442351e-01, 7.504166487894715e-02, 4.521428112128195e-03, 9.042856226219564e-03, 4.521428112128195e-03, 4.521428108693757e-03, 9.042856218716836e-03, 4.521428108693757e-03, -2.122105766550962e-07, -4.244211533101923e-07, -2.122105766550962e-07, -1.151688210062897e-07, -2.303376420125795e-07, -1.151688210062897e-07, -1.165701990088793e-07, -2.331403980177586e-07, -1.165701990088793e-07, -1.152599311959765e-07, -2.305198623919531e-07, -1.152599311959765e-07, -3.468065664030144e-07, -6.936131328060288e-07, -3.468065664030144e-07, -2.105914649970195e-07, -4.211829299940389e-07, -2.105914649970195e-07, 3.093725105087369e-05, 6.187450210174738e-05, 3.093725105087369e-05, 2.931202735662253e-05, 5.862405471324507e-05, 2.931202735662253e-05, 1.274507165707595e-05, 2.549014331415190e-05, 1.274507165707595e-05, 1.235363230745140e-05, 2.470726461490279e-05, 1.235363230745140e-05, 5.753351415385304e-05, 1.150670283077061e-04, 5.753351415385304e-05, 2.944289088332189e-05, 5.888578176664378e-05, 2.944289088332189e-05, 1.347576988116474e-03, 2.695153976232948e-03, 1.347576988116474e-03, -2.913913874320499e-03, -5.827827748641000e-03, -2.913913874320499e-03, 5.223985814583954e-03, 1.044797162916791e-02, 5.223985814583954e-03, 8.032860863012437e-04, 1.606572172602487e-03, 8.032860863012437e-04, -3.722566291039905e-04, -7.445132582079810e-04, -3.722566291039905e-04, -2.469724736228011e-04, -4.939449472456021e-04, -2.469724736228011e-04, 4.290858956568163e-01, 8.581717913136374e-01, 4.290858956568163e-01, 1.927221268574913e+00, 3.854442537149826e+00, 1.927221268574913e+00, 2.728491367203385e+00, 5.456982734406760e+00, 2.728491367203385e+00, -3.368185737989058e-06, -6.736371475978116e-06, -3.368185737989058e-06, 5.439471021731483e+00, 1.087894204346296e+01, 5.439471021731483e+00, 5.439471021731477e+00, 1.087894204346296e+01, 5.439471021731477e+00, 1.881842818260014e-02, 3.763685635173664e-02, 1.881842818260014e-02, 7.498990762470212e-03, 1.499798153147436e-02, 7.498990762470212e-03, 8.617797148319863e-01, 1.723559429512034e+00, 8.617797148319863e-01, 2.687398556909746e+00, 5.374797113819514e+00, 2.687398556909746e+00, 1.983164236361946e-01, 3.966328472605808e-01, 1.983164236361946e-01, 1.983164236364607e-01, 3.966328472525359e-01, 1.983164236364607e-01, -5.089554441404410e-02, -1.017910888280882e-01, -5.089554441404410e-02, -5.598891090766760e-03, -1.119778218153352e-02, -5.598891090766760e-03, -1.728575517975714e-02, -3.457151035951429e-02, -1.728575517975714e-02, -2.751697220435661e-02, -5.503394440871322e-02, -2.751697220435661e-02, -2.344453019405671e-02, -4.688906038811343e-02, -2.344453019405671e-02, -2.023411751428322e-02, -4.046823502856643e-02, -2.023411751428322e-02, -4.774949967006601e-02, -9.549899934013202e-02, -4.774949967006601e-02, 1.521919932976083e-02, 3.043839865952165e-02, 1.521919932976083e-02, -2.739211148232804e-03, -5.478422296465607e-03, -2.739211148232804e-03, -6.259551829946234e-03, -1.251910365989247e-02, -6.259551829946234e-03, -5.084378329372926e-03, -1.016875665874585e-02, -5.084378329372926e-03, -7.432583514809434e-03, -1.486516702961887e-02, -7.432583514809434e-03, -3.668451136599648e-03, -7.336902273199296e-03, -3.668451136599648e-03, 1.017096511057480e+00, 2.034193022114960e+00, 1.017096511057480e+00, 4.893065575899919e-01, 9.786131151799838e-01, 4.893065575899919e-01, 1.129335659582875e-01, 2.258671319165751e-01, 1.129335659582875e-01, 2.533625567916777e-01, 5.067251135833555e-01, 2.533625567916777e-01, 2.522197302903321e-01, 5.044394605806642e-01, 2.522197302903321e-01, 1.379408726113644e-02, 2.758817452227288e-02, 1.379408726113644e-02, 1.256571345429176e+04, 2.513142690858351e+04, 1.256571345429176e+04, 2.065365373529751e-01, 4.130730747059511e-01, 2.065365373529751e-01, 9.667836503914483e-02, 1.933567300782897e-01, 9.667836503914483e-02, 7.866201929780463e-01, 1.573240385956083e+00, 7.866201929780463e-01, 7.866201929780314e-01, 1.573240385956074e+00, 7.866201929780314e-01, 2.867615766696644e+06, 5.735231533393289e+06, 2.867615766696644e+06, 1.017081119943128e-03, 2.034162425784965e-03, 1.017081119943128e-03, 1.125145004244774e+09, 2.250290008489549e+09, 1.125145004244774e+09, 8.599224008805288e+02, 1.719844801761058e+03, 8.599224008805288e+02, 3.235376263080097e-02, 6.470752527905765e-02, 3.235376263080097e-02, 6.537802350822202e+00, 1.307560470179599e+01, 6.537802350822202e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_mn12_l_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn12_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.061385942330508e-04, 2.061385942330508e-04, 2.061506664028228e-04, 2.061506664028228e-04, 2.061987430886085e-04, 2.061987430886085e-04, 2.096435558070935e-04, 2.096435558070934e-04, 2.105867438501944e-04, 2.105867438501944e-04, 2.115253973639233e-04, 2.115253973639233e-04, 1.392398639907584e-03, 1.392398639907584e-03, 2.090332453236262e-03, 2.090332453236263e-03, 2.117122561832304e-03, 2.117122561832307e-03, 2.105924533080565e-03, 2.105924533080566e-03, 2.107473444191993e-03, 2.107473444191993e-03, 1.403830345311905e-03, 1.403830345311905e-03, -3.683374928901954e-02, -3.683374928901954e-02, -7.267288294768129e-03, -7.267288294768140e-03, 1.222900609878393e-02, 1.222900609878392e-02, 4.166861210172975e-03, 4.166861210172982e-03, -3.715538051855871e-02, -3.715538051855872e-02, 1.288231351636000e-02, 1.288231351635998e-02, -2.839740843531450e-02, -2.839740843531447e-02, -9.900949059844351e-02, -9.900949059844362e-02, -5.976004497815284e-04, -5.976004497815284e-04, -1.143499506174885e-01, -1.143499506174890e-01, -5.300547545901004e-02, -5.300547545900989e-02, -5.326506112583099e-02, -5.326506112583101e-02, -2.553800273719185e-04, -2.553800273718696e-04, -3.074948255320639e-04, -3.074948255321234e-04, -1.561271720150610e-02, -1.561271720150610e-02, -3.909698940701748e-05, -3.909698940701748e-05, -8.925055312236683e-05, -8.925055312239108e-05, -8.925055312241540e-05, -8.925055312241540e-05, 4.386020958016042e-03, 4.386020958016042e-03, 4.053238248850229e-03, 4.053238248850229e-03, 3.974766838886849e-03, 3.974766838886851e-03, 4.048129807831542e-03, 4.048129807831542e-03, 4.790234880544432e-03, 4.790234880544432e-03, 4.427857703486160e-03, 4.427857703486160e-03, 1.894217175421602e-03, 1.894217175421604e-03, 2.033133813513383e-03, 2.033133813513385e-03, 3.590392472281265e-03, 3.590392472281264e-03, 3.714945643475352e-03, 3.714945643475351e-03, 5.185312626161251e-05, 5.185312626161057e-05, 2.024969712233429e-03, 2.024969712233426e-03, 5.157580398535915e-02, 5.157580398535914e-02, 9.840568159575586e-02, 9.840568159575595e-02, 4.307922238346431e-02, 4.307922238346434e-02, 7.874042610811584e-02, 7.874042610811589e-02, 6.311882888503632e-02, 6.311882888503632e-02, 8.023893020456847e-02, 8.023893020456850e-02, -9.636732129270266e-02, -9.636732129270252e-02, -6.851474212729319e-02, -6.851474212729342e-02, -8.841076254263566e-02, -8.841076254263543e-02, 1.405218764900429e-02, 1.405218764900429e-02, -1.391844606980271e-01, -1.391844606980273e-01, -1.391844606980277e-01, -1.391844606980276e-01, -1.280172834323184e-05, -1.280172834323184e-05, -3.238195712824686e-05, -3.238195712824686e-05, -1.203944401367011e-04, -1.203944401365798e-04, -5.322620200372114e-02, -5.322620200372115e-02, -7.467059556057774e-05, -7.467059556051872e-05, -7.467059556063675e-05, -7.467059556063675e-05, 2.099610163184644e+00, 2.099610163184645e+00, 8.370575733983799e-01, 8.370575733983799e-01, 9.964013746292060e-01, 9.964013746292069e-01, 1.412200390105380e+00, 1.412200390105381e+00, 1.129049851161408e+00, 1.129049851161407e+00, 1.239182411718812e+00, 1.239182411718811e+00, 1.790444069181225e+00, 1.790444069181226e+00, 1.400254386265326e-02, 1.400254386265326e-02, 8.092858964841163e-02, 8.092858964841168e-02, 1.343328735310091e-01, 1.343328735310090e-01, 1.156367565211309e-01, 1.156367565211310e-01, 1.028407466205962e-01, 1.028407466205962e-01, 7.023545857490748e-02, 7.023545857490752e-02, -2.209212575763176e-02, -2.209212575763200e-02, -4.230398181753098e-03, -4.230398181753098e-03, -6.013904396258182e-03, -6.013904396258186e-03, -1.144220843517615e-02, -1.144220843517618e-02, -1.109890137613933e-02, -1.109890137613931e-02, 4.391555234703938e-02, 4.391555234703941e-02, -7.598980192187939e-03, -7.598980192187939e-03, -2.696287362834113e-02, -2.696287362834113e-02, 1.749747347533152e-02, 1.749747347533150e-02, -1.045929277747543e-01, -1.045929277747538e-01, -1.045929277747543e-01, -1.045929277747540e-01, -1.651625279943003e-04, -1.651625279943003e-04, -8.546932015396100e-07, -8.546932015396100e-07, -1.083103310189303e-05, -1.083103310189303e-05, -6.796536797309274e-02, -6.796536797309254e-02, -8.601607355674966e-05, -8.601607355674966e-05, -8.601581282476997e-05, -8.601581282476997e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
