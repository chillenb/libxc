
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_mn12_l_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn12_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.988486234021052e-01, -2.988549489880850e-01, -2.988813079198543e-01, -2.987876712430548e-01, -2.988369834680085e-01, -2.988369834680085e-01, -5.839585619566118e-03, -5.874700498255144e-03, -6.775149595697779e-03, -6.135565292742163e-03, -6.320415282683916e-03, -6.320415282683916e-03, 3.506138622411703e-03, 4.560427297388652e-03, 3.351779448065055e-02, 3.185836527607275e-02, 3.124559477726589e-02, 3.124559477726589e-02, 6.403447021568781e-02, 5.979935480952596e-02, -3.154285373337155e-02, 4.169197327650379e-02, 5.952970402531515e-02, 5.952970402531521e-02, -2.659005561664071e-02, -2.771837708456777e-02, -8.769472285022706e-02, -1.668455536493497e-02, -1.730951698242550e-02, -1.730951698242548e-02, -2.657728355934906e-01, -2.670429818540809e-01, -2.658465740597113e-01, -2.669669416084744e-01, -2.664052594134391e-01, -2.664052594134391e-01, 4.539914231574149e-02, 4.005400256834393e-02, 5.130560669672204e-02, 4.648754082909271e-02, 3.956395602859705e-02, 3.956395602859705e-02, -5.180306800935058e-02, -1.016185418665482e-01, -2.880438110934281e-02, -5.432197003928416e-02, -6.080866141548009e-02, -6.080866141548012e-02, -4.405613718108441e-02, 8.134705802062549e-02, -5.505579220582955e-02, -9.519479941627287e-02, 1.587622141352515e-02, 1.587622141352501e-02, -1.326672213326383e-02, -1.635948650081671e-02, -1.285617865998083e-02, -8.512395855858643e-02, -1.431924941908478e-02, -1.431924941908479e-02, -4.087846400962568e-01, -2.325525239456935e-01, -2.792373965043040e-01, -3.295587758678860e-01, -3.028951681650813e-01, -3.028951681650813e-01, -3.633043618441152e-01, -2.749312453240691e-02, -6.398629231314595e-02, -1.037262288036389e-01, -8.300643169833397e-02, -8.300643169833397e-02, -8.724768533674800e-02, 8.245963901861005e-02, 5.313320042787692e-02, -4.770417955214865e-03, 1.956460382680777e-02, 1.956460382680774e-02, -1.308284663874643e-02, -8.647478319426878e-02, -9.366516718210113e-02, -2.008136473001011e-02, -5.351198083547598e-02, -5.351198083547606e-02, -3.540022654271646e-02, -4.940310073330486e-03, -9.746524857610244e-03, -5.811526256765989e-02, -1.351689982820482e-02, -1.351689982820477e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_mn12_l_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn12_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-6.302905056529258e-01, -6.302911872746670e-01, -6.302803714093629e-01, -6.302815208259144e-01, -6.302427057265847e-01, -6.302414348465787e-01, -6.303866687683110e-01, -6.303906999736116e-01, -6.303077345986781e-01, -6.303144807660763e-01, -6.303077345986781e-01, -6.303144807660763e-01, -2.842219726549934e-01, -2.842227575143568e-01, -2.842795343611267e-01, -2.842804312607008e-01, -2.858808562636382e-01, -2.858796487680310e-01, -2.858229294356479e-01, -2.858221202220395e-01, -2.855844302815262e-01, -2.855627324730865e-01, -2.855844302815262e-01, -2.855627324730865e-01, -2.166149346726141e-01, -2.161454301895396e-01, -2.182695621751283e-01, -2.176992979278298e-01, -2.430443028543063e-01, -2.435597343036619e-01, -2.374472991124506e-01, -2.372984835960945e-01, -2.359682477586222e-01, -2.406695541054882e-01, -2.359682477586222e-01, -2.406695541054882e-01, -9.969781738502979e-02, -1.014453340003246e-01, -1.139597326733015e-01, -1.154918980275653e-01, -2.693246175177390e-01, -2.602812748309313e-01, 1.443989407142511e-01, 1.439055956161125e-01, 5.523294331169647e-02, 1.142457735345100e-01, 5.523294331169516e-02, 1.142457735345088e-01, -3.538068136488979e-02, -3.242636333453453e-02, -3.706005796241103e-02, -3.355559945046608e-02, -8.685140099810575e-02, -7.684225341505324e-02, -2.127146192447801e-02, -2.176533763068020e-02, -1.923147975332055e-02, -3.779104515968064e-02, -1.923147975332042e-02, -3.779104515968058e-02, -5.353085507294897e-01, -5.354246866109386e-01, -5.408353962799113e-01, -5.409552308022336e-01, -5.356156518994011e-01, -5.357339856702367e-01, -5.404933862519620e-01, -5.406104872570977e-01, -5.380543235347982e-01, -5.381729016409359e-01, -5.380543235347982e-01, -5.381729016409359e-01, -2.515910400555558e-01, -2.515894727801259e-01, -2.563568743973932e-01, -2.563504078671434e-01, -2.493183742226555e-01, -2.493891475922539e-01, -2.526601182062113e-01, -2.527219847975418e-01, -2.556541510051338e-01, -2.555565153654124e-01, -2.556541510051338e-01, -2.555565153654124e-01, -1.989454349756349e-01, -1.992330590989550e-01, -2.465314966309152e-01, -2.464424280392266e-01, -1.415947645779148e-01, -1.384795543982137e-01, -1.432223331928447e-01, -1.395790208910975e-01, -2.034654639816550e-01, -2.096487450159591e-01, -2.034654639816550e-01, -2.096487450159591e-01, 1.033672208671005e-01, 1.043734072590237e-01, 7.084713493764840e-02, 7.034480294662361e-02, 7.542937144039745e-02, 8.207897798204598e-02, -2.695584711464525e-01, -2.696388905525904e-01, 1.619729309441553e-01, 1.617473938480193e-01, 1.619729309441554e-01, 1.617473938480185e-01, -1.765498370392936e-02, -1.676829483308917e-02, -2.132625063900270e-02, -2.089393844064160e-02, -1.731175069859854e-02, -1.603280373616580e-02, -2.167377615024375e-02, -2.054847851928204e-02, -2.434025656086733e-02, -1.618240744015320e-02, -2.434025656086725e-02, -1.618240744015306e-02, -8.902157553556047e-01, -8.871218921273473e-01, -6.354136095664550e-01, -6.336149000416275e-01, -7.318101397074235e-01, -7.296643060729368e-01, -8.090726397427656e-01, -8.065745376689787e-01, -7.711137643260857e-01, -7.688026984249133e-01, -7.711137643260858e-01, -7.688026984249134e-01, -8.313022674072397e-01, -8.289151227236772e-01, -1.955408652282508e-01, -1.952162923001792e-01, -2.161184808079013e-01, -2.155665566873283e-01, -2.301528024238380e-01, -2.294589034719035e-01, -2.137366748627358e-01, -2.131580612141245e-01, -2.137366748627359e-01, -2.131580612141245e-01, -2.197105006902177e-01, -2.194386391960369e-01, -7.830522141068706e-02, -7.878690203763998e-02, -1.642089449029264e-01, -1.643777160690204e-01, -1.231848418881572e-01, -1.228207503114521e-01, -1.519591419031144e-01, -1.519719274391680e-01, -1.519591419031144e-01, -1.519719274391679e-01, -1.524188744366239e-01, -1.519848396611382e-01, -8.317549015842080e-02, -8.194565938034264e-02, -7.013180234256826e-02, -6.358247786337685e-02, -1.176406999478646e-01, -1.165676635910401e-01, 6.287304216226379e-02, 6.952385603090629e-02, 6.287304216226133e-02, 6.952385603090490e-02, -4.576392791582343e-02, -4.339836871615915e-02, -6.486011941808902e-03, -6.467326569440501e-03, -1.323505073832522e-02, -1.220893617280384e-02, 5.251293150478992e-02, 5.462299107301747e-02, -2.223771124991537e-02, -1.539658551780648e-02, -2.223771124991490e-02, -1.539658551780611e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_mn12_l_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn12_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.255038580537227e-10, -2.510077161074453e-10, -1.255038580537227e-10, -1.255064204064448e-10, -2.510128408128896e-10, -1.255064204064448e-10, -1.255107029784262e-10, -2.510214059568525e-10, -1.255107029784262e-10, -1.254727158775812e-10, -2.509454317551624e-10, -1.254727158775812e-10, -1.254936508271030e-10, -2.509873016542060e-10, -1.254936508271030e-10, -1.254936508271030e-10, -2.509873016542060e-10, -1.254936508271030e-10, 1.868670618505499e-06, 3.737341237010998e-06, 1.868670618505499e-06, 1.868083705400736e-06, 3.736167410801472e-06, 1.868083705400736e-06, 1.851063353869295e-06, 3.702126707738589e-06, 1.851063353869295e-06, 1.844780321237572e-06, 3.689560642475145e-06, 1.844780321237572e-06, 1.851577010967964e-06, 3.703154021935927e-06, 1.851577010967964e-06, 1.851577010967964e-06, 3.703154021935927e-06, 1.851577010967964e-06, 8.987861296192012e-03, 1.797572259238402e-02, 8.987861296192012e-03, 8.982344678843663e-03, 1.796468935768733e-02, 8.982344678843663e-03, 8.491676539539817e-03, 1.698335307907963e-02, 8.491676539539817e-03, 7.734613910308366e-03, 1.546922782061673e-02, 7.734613910308366e-03, 7.979495725060889e-03, 1.595899145012178e-02, 7.979495725060889e-03, 7.979495725060889e-03, 1.595899145012178e-02, 7.979495725060889e-03, 1.188849412819330e+00, 2.377698825638660e+00, 1.188849412819330e+00, 1.202676824269598e+00, 2.405353648539196e+00, 1.202676824269598e+00, 7.973485651973511e-03, 1.594697130394702e-02, 7.973485651973511e-03, 1.265431844421735e+00, 2.530863688843471e+00, 1.265431844421735e+00, 9.611397588068470e-01, 1.922279517613692e+00, 9.611397588068470e-01, 9.611397588068494e-01, 1.922279517613698e+00, 9.611397588068494e-01, 3.745227631695192e-02, 7.490455263684397e-02, 3.745227631695192e-02, 4.406967012211676e-02, 8.813934024025015e-02, 4.406967012211676e-02, 2.401021339026641e-01, 4.802042678054282e-01, 2.401021339026641e-01, 1.327524508054095e-02, 2.655049016060628e-02, 1.327524508054095e-02, 1.949178623417556e-02, 3.898357247431078e-02, 1.949178623417556e-02, 1.949178624141706e-02, 3.898357247681964e-02, 1.949178624141706e-02, -1.173592669632758e-07, -2.347185339265517e-07, -1.173592669632758e-07, -1.158605998706072e-07, -2.317211997412143e-07, -1.158605998706072e-07, -1.172603843459993e-07, -2.345207686919985e-07, -1.172603843459993e-07, -1.159389837288519e-07, -2.318779674577038e-07, -1.159389837288519e-07, -1.166191742355725e-07, -2.332383484711451e-07, -1.166191742355725e-07, -1.166191742355725e-07, -2.332383484711451e-07, -1.166191742355725e-07, 1.517940168172638e-05, 3.035880336345275e-05, 1.517940168172638e-05, 1.418861006888647e-05, 2.837722013777294e-05, 1.418861006888647e-05, 1.516675149600084e-05, 3.033350299200168e-05, 1.516675149600084e-05, 1.430120502626938e-05, 2.860241005253876e-05, 1.430120502626938e-05, 1.460889537647295e-05, 2.921779075294590e-05, 1.460889537647295e-05, 1.460889537647295e-05, 2.921779075294590e-05, 1.460889537647295e-05, 1.191093487564396e-03, 2.382186975128793e-03, 1.191093487564396e-03, -4.805321377952814e-03, -9.610642755905629e-03, -4.805321377952814e-03, 9.744815137769128e-03, 1.948963027553826e-02, 9.744815137769128e-03, 1.854226420093797e-03, 3.708452840187594e-03, 1.854226420093797e-03, -3.538788838470415e-04, -7.077577676940830e-04, -3.538788838470415e-04, -3.538788838470442e-04, -7.077577676940885e-04, -3.538788838470442e-04, 6.981417832001442e-01, 1.396283566400295e+00, 6.981417832001442e-01, 5.745891107898554e-01, 1.149178221579711e+00, 5.745891107898554e-01, 6.981756671272356e-01, 1.396351334254471e+00, 6.981756671272356e-01, -1.222568192488977e-05, -2.445136384977955e-05, -1.222568192488977e-05, 1.373339947531648e+00, 2.746679895063291e+00, 1.373339947531648e+00, 1.373339947531648e+00, 2.746679895063291e+00, 1.373339947531648e+00, 1.293852526929139e-02, 2.587705050920833e-02, 1.293852526929139e-02, 1.632045560364002e-02, 3.264091119204638e-02, 1.632045560364002e-02, 1.626622157889237e-01, 3.253244315300152e-01, 1.626622157889237e-01, 6.347719373562790e-01, 1.269543874712555e+00, 6.347719373562790e-01, 6.224645066476530e-02, 1.244929013198075e-01, 6.224645066476530e-02, 6.224645071811481e-02, 1.244929014220207e-01, 6.224645071811481e-02, -5.516840772544230e-02, -1.103368154508846e-01, -5.516840772544230e-02, -5.997158882016755e-03, -1.199431776403351e-02, -5.997158882016755e-03, -1.375059017192966e-02, -2.750118034385932e-02, -1.375059017192966e-02, -2.634090563386528e-02, -5.268181126773057e-02, -2.634090563386528e-02, -1.912877251439848e-02, -3.825754502879698e-02, -1.912877251439848e-02, -1.912877251439848e-02, -3.825754502879698e-02, -1.912877251439848e-02, -5.057526974356243e-02, -1.011505394871249e-01, -5.057526974356243e-02, 6.526958413708214e-03, 1.305391682741643e-02, 6.526958413708214e-03, -1.897330575116562e-03, -3.794661150233123e-03, -1.897330575116562e-03, -6.891109323705191e-03, -1.378221864741038e-02, -6.891109323705191e-03, -5.545121706166667e-03, -1.109024341233333e-02, -5.545121706166667e-03, -5.545121706166663e-03, -1.109024341233333e-02, -5.545121706166663e-03, -3.542593283260613e-03, -7.085186566521226e-03, -3.542593283260613e-03, 3.409735766628822e-01, 6.819471533257641e-01, 3.409735766628822e-01, 2.266801286352280e-01, 4.533602572704559e-01, 2.266801286352280e-01, 8.927899957504309e-02, 1.785579991500862e-01, 8.927899957504309e-02, 1.481097580092834e-01, 2.962195160185668e-01, 1.481097580092834e-01, 1.481097580092836e-01, 2.962195160185672e-01, 1.481097580092836e-01, 1.799248599542733e-02, 3.598497199085467e-02, 1.799248599542733e-02, 1.964716631984712e-01, 3.929433263969499e-01, 1.964716631984712e-01, 3.120031290314509e-01, 6.240062580629369e-01, 3.120031290314509e-01, 8.139465735345766e-02, 1.627893147069153e-01, 8.139465735345766e-02, 1.186042265433721e+00, 2.372084530867440e+00, 1.186042265433721e+00, 1.186042265433699e+00, 2.372084530867395e+00, 1.186042265433699e+00, 4.674647987171813e-02, 9.349295974368238e-02, 4.674647987171813e-02, 1.768704570393712e-02, 3.537409117654354e-02, 1.768704570393712e-02, 2.214489168140510e-02, 4.428978333672822e-02, 2.214489168140510e-02, 1.078617217836346e+00, 2.157234435672694e+00, 1.078617217836346e+00, 7.945344181326720e-02, 1.589068836636867e-01, 7.945344181326720e-02, 7.945344178112254e-02, 1.589068835648007e-01, 7.945344178112254e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_mn12_l_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn12_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_mn12_l_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn12_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.114292763844321e-04, 2.114292763844321e-04, 2.114250300884203e-04, 2.114250300884202e-04, 2.114071519820864e-04, 2.114071519820865e-04, 2.114701189470061e-04, 2.114701189470060e-04, 2.114369751642070e-04, 2.114369751642070e-04, 2.114369751642070e-04, 2.114369751642070e-04, 1.253649406268571e-03, 1.253649406268572e-03, 1.254546052173185e-03, 1.254546052173186e-03, 1.279125282181299e-03, 1.279125282181301e-03, 1.275845381510353e-03, 1.275845381510354e-03, 1.273496669279429e-03, 1.273496669279429e-03, 1.273496669279429e-03, 1.273496669279429e-03, -1.800489701781636e-03, -1.800489701781628e-03, -1.673134553138332e-03, -1.673134553138345e-03, 9.584716323342017e-04, 9.584716323341935e-04, 1.867993998082527e-03, 1.867993998082533e-03, 1.523189005778557e-03, 1.523189005778540e-03, 1.523189005778557e-03, 1.523189005778540e-03, 1.934345638348267e-02, 1.934345638348272e-02, 2.588641194576589e-02, 2.588641194576582e-02, -7.216907386781378e-03, -7.216907386781378e-03, -1.151886161208649e-01, -1.151886161208654e-01, -5.846923711870892e-02, -5.846923711870878e-02, -5.846923711870818e-02, -5.846923711870820e-02, -2.553805392746506e-04, -2.553805392746018e-04, -3.074952751335324e-04, -3.074952751335919e-04, -1.561812122116337e-02, -1.561812122116337e-02, -3.909699625422294e-05, -3.909699625422294e-05, -8.925054200463771e-05, -8.925054200466194e-05, -8.925054200468628e-05, -8.925054200468628e-05, 3.974100921028626e-03, 3.974100921028625e-03, 4.057275095844973e-03, 4.057275095844972e-03, 3.978717720187924e-03, 3.978717720187925e-03, 4.052087768332535e-03, 4.052087768332536e-03, 4.015344868722097e-03, 4.015344868722097e-03, 4.015344868722097e-03, 4.015344868722097e-03, 3.381475441917904e-03, 3.381475441917905e-03, 3.585230901148908e-03, 3.585230901148909e-03, 3.325647098550472e-03, 3.325647098550471e-03, 3.485822757947047e-03, 3.485822757947045e-03, 3.532444707231997e-03, 3.532444707231993e-03, 3.532444707231997e-03, 3.532444707231993e-03, 5.742136423606557e-02, 5.742136423606557e-02, 1.022162084298732e-01, 1.022162084298733e-01, 1.958124526144856e-02, 1.958124526144856e-02, 3.625980886882397e-02, 3.625980886882400e-02, 6.540597915980390e-02, 6.540597915980388e-02, 6.540597915980392e-02, 6.540597915980395e-02, -9.626680501308686e-02, -9.626680501308672e-02, -5.452741065070582e-02, -5.452741065070605e-02, -8.887218497321191e-02, -8.887218497321167e-02, 8.305037014530222e-03, 8.305037014530222e-03, -1.388474248874176e-01, -1.388474248874177e-01, -1.388474248874182e-01, -1.388474248874181e-01, -1.280172848704674e-05, -1.280172848704674e-05, -3.238195598797493e-05, -3.238195598797493e-05, -1.203944883809184e-04, -1.203944883807972e-04, -5.335895781053965e-02, -5.335895781053965e-02, -7.467061062416789e-05, -7.467061062410888e-05, -7.467061062422691e-05, -7.467061062422691e-05, 1.960345168647690e+00, 1.960345168647691e+00, 8.194879098740091e-01, 8.194879098740091e-01, 1.125756665569009e+00, 1.125756665569010e+00, 1.453971312849080e+00, 1.453971312849081e+00, 1.280494779907119e+00, 1.280494779907118e+00, 1.280494779907119e+00, 1.280494779907118e+00, 1.705605628884230e+00, 1.705605628884231e+00, 6.372713326325410e-02, 6.372713326325412e-02, 1.014014576094922e-01, 1.014014576094923e-01, 1.358957777922686e-01, 1.358957777922686e-01, 1.128929645690249e-01, 1.128929645690249e-01, 1.128929645690249e-01, 1.128929645690249e-01, 7.089179217273894e-02, 7.089179217273897e-02, 9.870095091827381e-03, 9.870095091827097e-03, 3.272120455222571e-02, 3.272120455222571e-02, 9.949699817850564e-03, 9.949699817850573e-03, 2.254681736499416e-02, 2.254681736499412e-02, 2.254681736499411e-02, 2.254681736499411e-02, 3.252020214667884e-02, 3.252020214667888e-02, -1.421978505943129e-02, -1.421978505943142e-02, -2.695902535759731e-02, -2.695902535759731e-02, 3.475360076000857e-02, 3.475360076000855e-02, -1.045093768792079e-01, -1.045093768792073e-01, -1.045093768792078e-01, -1.045093768792076e-01, -3.241049432293864e-04, -3.241049432293864e-04, -8.546931995746400e-07, -8.546931995746400e-07, -2.131276198275877e-05, -2.131276198275877e-05, -1.009739848906556e-01, -1.009739848906552e-01, -8.601606716055191e-05, -8.601606716055191e-05, -8.601606716103734e-05, -8.601606716103734e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
